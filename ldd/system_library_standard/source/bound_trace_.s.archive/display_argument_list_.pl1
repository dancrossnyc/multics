/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-03-13,GWMay), approve(86-04-16,MCR7373),
     audit(86-04-29,LJAdams), install(86-05-01,MR12.0-1051):
     Changed to reference entry_desc_info_version_2 constant.
  2) change(86-11-19,DGHowe), approve(86-11-19,MCR7583),
     audit(86-11-24,JRGray), install(86-12-09,MR12.0-1238):
     Changed to print out command_name. Modified to refer
     to command_name_arglist instead of arg_list.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
display_argument_list_:
     procedure (Iocb, Amup, Framep, Argp, Entryp, Farg, Larg, Lmarg);

/* This program is an adaptation of Steve Webber's list_arg_ routine from db,
   for use by trace_stack_. */
/* rewritten 8/10/81 by Melanie Weaver to use arithmetic_to_ascii_ */
/* Adapted from list_frame_args_ May 1982 by C. Hornig */
/* modified 7/12/83 by Jeffrey D. Ives to not print a warning if a packed arg is passed to an unpacked parm.	*/
/* modified 9/05/84 by Jeffrey D. Ives to use get_entry_arg_descs_$info, use "RET VAL" before a return value,
   and handle the returns (char|bit|area (*)) case. */


dcl  Amup ptr parameter;				/* unused */
dcl  Framep ptr parameter;
dcl  Argp ptr parameter;
dcl  Entryp ptr parameter;
dcl  (Farg, Larg) fixed bin parameter;
dcl  Lmarg fixed bin parameter;
dcl  Iocb ptr parameter;

dcl  (addr, addrel, character, hbound, lbound, min, null, substr, max, verify, unspec) builtin;

dcl  cleanup condition;

dcl  argp ptr;
dcl  ep ptr;
dcl  ap ptr;					/* ptr to arglist. */
dcl  strp ptr;
dcl  tp ptr;
dcl  xdesc (64) ptr;

dcl  (j, k) fixed bin;
dcl  (min_arg, max_arg, type, xtype) fixed bin;
dcl  (no_args, no_desc, strl, ndims, scale) fixed bin;
dcl  (xstrl, xndims, xscale, xnargs) fixed bin;
dcl  ec fixed bin (35);

dcl  arg_id char (7);
dcl  (ttype, xttype) char (40);
dcl  ascii_representation char (132) varying;

dcl  (packed, xpacked) bit (1) aligned;
dcl  begin_block_entries (2) bit (36) aligned internal static options (constant)
	init ("000614272100"b3 /* tsp2 pr0|614 */, "001376272100"b3 /* tsp2 pr0|1376 */);

dcl  condition_ entry (char (*), entry);
dcl  get_entry_arg_descs_$info entry (ptr, fixed bin, (*) ptr, ptr, fixed bin (35));
dcl  decode_descriptor_ entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
dcl  interpret_ptr_ entry (ptr, ptr, ptr);
dcl  ioa_$ioa_switch entry options (variable);
dcl  ioa_$ioa_switch_nnl entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  arithmetic_to_ascii_ entry (ptr, fixed bin, bit (1) aligned, fixed bin, fixed bin, char (132) varying);
dcl  display_file_value_ entry (ptr, file, fixed bin (35));

dcl  based_ptr ptr based;
dcl  packptr ptr based unaligned;
dcl  fword (4) fixed bin (35) based (argp);
dcl  bcs char (100) based (argp);
dcl  char_string char (strl) based (argp);
dcl  based_bit bit (36) aligned based;
dcl  bit_string bit (strl) based (argp);
dcl  based_file file based;

dcl  1 edi like entry_desc_info aligned;

dcl  1 label_variable based (argp) aligned,
       2 ptr ptr,
       2 stack ptr;

dcl  LEGAL char (96) static options (constant)
	init
	/* Printables except PAD, but with BS */ (
	" !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
%page;
	sp = Framep;
	ep = Entryp;
	ap = Argp;

	if ep = null () then ep = stack_frame.entry_ptr;
	if ap = null () then ap = stack_frame.arg_ptr;

	if ap = null () then do;
	     if ep ^= null ()
	     then do j = 1 to hbound (begin_block_entries, 1);
		if addrel (ep, 1) -> based_bit = begin_block_entries (j) then do;
		     call ioa_$ioa_switch (Iocb, "^vxThis is a begin block.  It has no argument list.", Lmarg);
		     return;
		     end;
	     end;

	     call ioa_$ioa_switch (Iocb, "^vxNo argument list.", Lmarg);
	     return;
	     end;

	strp = addr (strbuf);
	no_args = ap -> arg_list.arg_count;		/* get the number of arguments */
	no_desc = ap -> arg_list.desc_count;		/* and the number of descriptors */

	if (ap -> command_name_arglist.mbz ^= ""b)
	     | ((ap -> command_name_arglist.call_type ^= 4) & (ap -> command_name_arglist.call_type ^= 8))
	     | ((no_desc ^= 0) & (no_desc ^= no_args)) then do;

	     call ioa_$ioa_switch (Iocb, "^vxArgument list header invalid.", Lmarg);
	     return;
	     end;

	entry_desc_info_ptr = addr (edi);
	unspec (entry_desc_info) = ""b;
	entry_desc_info.version = entry_desc_info_version_2;
	call get_entry_arg_descs_$info (ep, xnargs, xdesc, entry_desc_info_ptr, ec);

	if (xnargs > 0) & (xnargs ^= no_args)
	then call ioa_$ioa_switch (Iocb, "^vxWarning: ^d arguments expected, ^d supplied.", Lmarg, xnargs, no_args);

	if no_args = 0 then do;			/* check for no arguments */
	     call ioa_$ioa_switch (Iocb, "^vxNo arguments.", Lmarg);
	     return;
	     end;

/* check and see if the command name is available */

	if (ap -> command_name_arglist.has_command_name) then do;
	     argp = ap -> command_name_arglist.name.command_name_ptr;
	     strl = ap -> command_name_arglist.name.command_name_length;
	     if strl > 0 then call ioa_$ioa_switch (Iocb, "^vxCommand name: ^a", Lmarg, char_string);
	     end;

	if no_args > 64 then call ioa_$ioa_switch (Iocb, "^vxOnly first 64 args of ^d will be listed.", Lmarg, no_args);

	min_arg = max (1, Farg);			/* print out all arguments */
	max_arg = min (Larg, no_args, 64);

	call condition_ ("any_other", intproc);
	on cleanup ;
%page;
	do j = min_arg to max_arg;			/* loop through the desired number of args */
	     argp = ap -> command_name_arglist.arg_ptrs (j);
						/* get pointer to the argument */
	     type, xtype = -1;			/* full word octal */
	     packed, xpacked = "0"b;
	     ndims, xndims = 0;
	     strl, xstrl = 0;
	     scale, xscale = 0;
	     if entry_desc_info.flags.function & j = xnargs
	     then arg_id = "RET VAL";
	     else call ioa_$rsnnl ("ARG ^3d", arg_id, k, j);
	     if xnargs >= j & xdesc (j) ^= null () then do;
						/* Do we know what this arg shd be? */
		call decode_descriptor_ (xdesc (j), 0, xtype, xpacked, xndims, xstrl, xscale);
		end;
	     if arg_id = "RET VAL" & xstrl = 16777215 then argp = argp -> based_ptr;
						/* returns (char|bit|area (*)) case */
	     if no_desc ^= 0 then do;			/* if we have descriptors, look at them */
		call decode_descriptor_ (ap, j, type, packed, ndims, strl, scale);
		if xnargs >= j & xdesc (j) ^= null () then do;
						/* Yes. We know what this arg shd be. */
		     if xtype ^= type then do;
			if type >= lbound (data_type_info_$info, 1) & type <= hbound (data_type_info_$info, 1)
			then ttype = type_name (type);
			else call ioa_$rsnnl ("type ^d", ttype, k, type);
			if xtype >= lbound (data_type_info_$info, 1) & xtype <= hbound (data_type_info_$info, 1)
			then xttype = type_name (xtype);
			else call ioa_$rsnnl ("type ^d", xttype, k, xtype);
			call ioa_$ioa_switch (Iocb, "^vxWarning: ^a is ^a, but it should be ^a.", Lmarg, arg_id,
			     ttype, xttype);
			end;
		     if xpacked ^= packed		/* Check that packed attributes match */
		     then do;
			if xpacked then do;
			     if xtype ^= char_dtype
			     then call ioa_$ioa_switch (Iocb,
				     "^vxWarning: ^a is unpacked, but it should be packed.", Lmarg, arg_id);
			     end;
			else call ioa_$ioa_switch (Iocb, "^vxWarning: ^a is packed, but it should be unpacked.",
				Lmarg, arg_id);
			end;
		     if xndims ^= ndims
		     then call ioa_$ioa_switch (Iocb, "^vxWarning: ^a has ^d dimensions, but it should have ^d.",
			     Lmarg, arg_id, ndims, xndims);
		     if xstrl ^= strl
		     then if xtype < pointer_dtype
			then call ioa_$ioa_switch (Iocb,
				"^vxWarning: ^a has a precision of ^d, but it should be ^d.", Lmarg, arg_id, strl,
				xstrl);
			else if xstrl ^= 16777215
			     then			/* No fuss abt char (*) */
				call ioa_$ioa_switch (Iocb,
				     "^vxWarning: ^a has a length of ^d, but it should be ^d.", Lmarg, arg_id,
				     strl, xstrl);
		     if xscale ^= scale
		     then call ioa_$ioa_switch (Iocb, "^vxWarning: ^a has a scale of ^d, but it should be ^d.", Lmarg,
			     arg_id, scale, xscale);
		     end;
		end;
	     else if xnargs >= j then do;		/* Callee might have descriptors for args. */
		     if xdesc (j) = null then go to guess;
						/* .. and then again he might not. */
		     call decode_descriptor_ (xdesc (j), 0, type, packed, ndims, strl, scale);
		     end;
		else do;				/* try to find out what type by heuristics */
guess:
		     if argp -> its.its_mod = ITS_MODIFIER
		     then type = pointer_dtype;	/* assume pointer */
		     else do;
			strl = verify (bcs, LEGAL) - 1;
						/* Scan for last legal char in string. */
			if strl < 0 then strl = 100;	/* If all legal, print first 100. */
			if strl >= 2
			then type = char_dtype;
			else strl = 0;
			end;
		     end;

	     if /* case */ type = -1 then call ioa_$ioa_switch (Iocb, "^vx^a: ^w", Lmarg, arg_id, fword (1));
						/* no descriptor; print full word octal */

	     else if type < lbound (data_type_info_$info, 1) | type > hbound (data_type_info_$info, 1)
	     then call ioa_$ioa_switch (Iocb, "^vx^a: (bad type ^d at ^p) ^w", Lmarg, arg_id, type, argp, fword (1));

	     else if data_type_info_$info (type).arithmetic then do;
		call arithmetic_to_ascii_ (argp, type, packed, strl, scale, ascii_representation);
		call ioa_$ioa_switch (Iocb, "^vx^a: ^a", Lmarg, arg_id, ascii_representation);
		end;

	     else if type = pointer_dtype then do;	/* Pointer */
		if packed then do;			/* packed ptr */
		     tp = argp -> packptr;
		     go to pptr;
		     end;
		if argp -> its.its_mod = ITS_MODIFIER then do;
		     tp = argp -> based_ptr;
pptr:
		     call interpret_ptr_ (tp, null (), strp);
		     call ioa_$ioa_switch (Iocb, "^vx^a: ^p ^a^a|^a ^a", Lmarg, arg_id, tp, struc.segment,
			struc.entryn, struc.offset, struc.comment);
		     end;
		else call ioa_$ioa_switch (Iocb, "^vx^a: ^w  ^w", Lmarg, arg_id, fword (1), fword (2));
		end;

	     else if type = offset_dtype		/* Offset */
	     then call ioa_$ioa_switch (Iocb, "^vx^a: ^w", Lmarg, arg_id, fword (1));

	     else if type = label_dtype | type = entry_dtype
						/* Label, Entry */
	     then do;
		call interpret_ptr_ (argp -> label_variable.ptr, argp -> label_variable.stack, strp);
		call ioa_$ioa_switch (Iocb, "^vx^a: ^p, ^p ^a^a|^a ^a", Lmarg, arg_id, label_variable.ptr,
		     label_variable.stack, struc.segment, struc.entryn, struc.offset, struc.comment);
		end;

	     else if type = bit_dtype | type = varying_bit_dtype
						/* Bit string */
	     then do;
		if type = varying_bit_dtype then strl = addrel (argp, -1) -> fword (1);
		if bit_string ^= ""b
		then ascii_representation = """" || character (substr (bit_string, 1, min (strl, 72))) || """b";
		else call ioa_$rsnnl ("(^d)""0""b", ascii_representation, 0, strl);

		call ioa_$ioa_switch (Iocb, "^vx^a: ^a", Lmarg, arg_id, ascii_representation);
		end;

	     else if type = char_dtype | type = varying_char_dtype
						/* Character string */
	     then do;
		if type = varying_char_dtype then strl = min (80, max (addrel (argp, -1) -> fword (1), 0));
		call ioa_$ioa_switch (Iocb, "^vx^a: ""^va""", Lmarg, arg_id, strl, char_string);
		end;

	     else if type = file_dtype		/* File */
	     then do;
		call ioa_$ioa_switch_nnl (Iocb, "^vx^a: ", Lmarg, arg_id);
		call display_file_value_ (Iocb, argp -> based_file, ec);
		call ioa_$ioa_switch (Iocb, "(file at ^p)", argp);
		end;

	     else call ioa_$ioa_switch (Iocb, "^vx^a: (^a at ^p) ^w", Lmarg, arg_id, type_name (type), argp, fword (1));

	     if ndims > 0 then call ioa_$ioa_switch (Iocb, "^-^vx(^d-dim array)", Lmarg, ndims);

skiparg:
	end;
	return;
%page;
intproc:
     procedure (mcp, cname, cop, infop, cont);

dcl  (mcp, cop, infop) ptr,
     cname char (*),
     cont bit (1);

	if (cname = "program_interrupt") | (cname = "finish") | (cname = "quit") then do;
	     cont = "1"b;
	     return;
	     end;

	if infop ^= null ()
	then if infop -> condition_info_header.action_flags.quiet_restart then return;

	call ioa_$ioa_switch (Iocb, "^vx^a not accessible. - ^a", Lmarg, arg_id, cname);
	go to skiparg;
     end;
%page;
%include arg_list;
%include entry_desc_info;
%include stack_frame;
%include interpret_ptr_struc;
%include its;
%include data_type_info_;
%include condition_info_header;
%include std_descriptor_types;
%include probe_data_type_names;

     end display_argument_list_;
