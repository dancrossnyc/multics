/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/*
   This program manages the trace and watch tables and the tab (trace
   attributes) structures.  The tables are not simple arrays.  To promote
   efficient update, each consists of two stacks, one at each end of a large
   storage array.  Entrypoints in trace_catch_ are used to access and update
   the tables.

   Written: May 1984 by Jeffrey D. Ives.
*/
/* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */


trace_tables_:
  procedure ();
    signal error;


/* INITIALIZE */

initialize:
  entry ();

    allocate tt in (trace_storage);
    call INIT_TABLE_HEADER (tt.h, dim (tt.e, 1));
    trace_catch_$tt_ptr = tt_ptr;

    allocate stt in (trace_storage);
    call INIT_TABLE_HEADER (stt.h, dim (stt.e, 1));
    trace_$stt_ptr = stt_ptr;

    allocate wt in (trace_storage);
    call INIT_TABLE_HEADER (wt.h, dim (wt.e, 1));
    trace_catch_$wt_ptr = wt_ptr;

    allocate swt in (trace_storage);
    call INIT_TABLE_HEADER (swt.h, dim (swt.e, 1));
    trace_$swt_ptr = swt_ptr;

    return;


INIT_TABLE_HEADER:
  proc (table_header_o, table_dim_i);
    dcl  1 table_header_o		 like table_header aligned parm;
    dcl  table_dim_i		 fixed bin parm;
    unspec (table_header_o) = ""b;
    table_header_o.version = TT_VERSION_3;
    table_header_o.max_count = table_dim_i;
    table_header_o.idx.high = table_dim_i;
    return;
  end INIT_TABLE_HEADER;
%page;
/* TRANSACTION BEGIN */

transaction_begin:
  entry ();

    if trace_catch_$tt_ptr -> tt.h.version ^= TT_VERSION_3
    then signal error;
    if trace_$stt_ptr -> tt.h.version ^= TT_VERSION_3 | trace_$stt_ptr -> tt.h.count ^= 0
    then signal error;

    if trace_catch_$wt_ptr -> wt.h.version ^= TT_VERSION_3
    then signal error;
    if trace_$swt_ptr -> wt.h.version ^= TT_VERSION_3 | trace_$swt_ptr -> wt.h.count ^= 0
    then signal error;

    return;


/* TRANSACTION BEGIN FORCE is the same as TRANSACTION END */

transaction_begin_force:				/* TRANSACTION END */
transaction_end:
  entry ();
    stt_ptr = trace_$stt_ptr;
    if stt.h.count = -1
    then stt.h.count = 0;				/* "*" case */
    else
      do stt_idx = 0 to stt.h.count - 1;
      te = trace_catch_$table_remove (stt_ptr, 0);	/* Removing the 0th one is the most efficient.	*/
      unspec (tte) = unspec (te);
      call FREE_TAB (tte.trace_attributes_ptr);
    end;
    swt_ptr = trace_$swt_ptr;
    if swt.h.count = -1
    then swt.h.count = 0;				/* "*" case */
    else
      do swt_idx = 0 to swt.h.count - 1;
      te = trace_catch_$table_remove (swt_ptr, 0);
    end;
    return;


/* ADD SPECIFIED ENTRYPOINTS */

add_specified_eps:
  entry (n_added_o, n_updated_o);
    tt_ptr = trace_catch_$tt_ptr;
    stt_ptr = trace_$stt_ptr;
    n_added = 0;
    n_updated = 0;
    if stt.h.count < 0
    then
      do tt_idx = 0 to tt.h.count - 1;			/* "*" case */
      te = trace_catch_$table_get (tt_ptr, tt_idx);
      call UPDATE_TTE (te);
    end;
    else
      do stt_idx = 0 to stt.h.count - 1;
      te = trace_catch_$table_get (stt_ptr, stt_idx);
      call UPDATE_TTE (te);
    end;
    n_added_o = n_added;
    n_updated_o = n_updated;
    return;

UPDATE_TTE:
  proc (te_i);
    dcl  1 te_i			 like te aligned parm;
    unspec (tte) = unspec (te_i);
    tab_ptr = tte.trace_attributes_ptr;
    tt_idx = trace_catch_$table_seek (tt_ptr, te.key);
    if tt_idx < 0
    then do;					/* Add it. */
      if tab.translator_id >= 0 /* If it can be traced. */
      then do;
        if ^trace_parameters_$update_parameters (tab.parms_ptr)
        then signal error;
      end;
      tab.reference_count = tab.reference_count + 1;
      tt_idx = trace_catch_$table_add (tt_ptr, te);
      if tt_idx < 0
      then signal error;
      n_added = n_added + 1;
    end;
    else do;					/* Update it. */
      if tab.translator_id >= 0 /* If it can be traced. */
      then do;
        if trace_parameters_$update_parameters (tab.parms_ptr)
        then n_updated = n_updated + 1;
      end;
    end;
  end UPDATE_TTE;


/* ADD SPECIFIED LOCATIONS */

add_specified_locs:
  entry (n_added_o, n_updated_o);
    wt_ptr = trace_catch_$wt_ptr;
    swt_ptr = trace_$swt_ptr;

    n_added = 0;
    n_updated = 0;
    if swt.h.count < 0
    then
      do wt_idx = 0 to wt.h.count - 1;			/* "*" case */
      te = trace_catch_$table_get (wt_ptr, wt_idx);
      unspec (wte) = unspec (te);
      if wte.old_value ^= wte.location_ptr -> based_value
      then do;
        call trace_catch_$table_put_data (wt_ptr, wt_idx, wte.location_ptr -> based_value);
        n_updated = n_updated + 1;
      end;
    end;
    else
      do swt_idx = 0 to swt.h.count - 1;
      te = trace_catch_$table_get (swt_ptr, swt_idx);
      unspec (wte) = unspec (te);
      wte.old_value = wte.location_ptr -> based_value;
      wt_idx = trace_catch_$table_seek (wt_ptr, te.key);
      if wt_idx < 0
      then do;					/* Add it. */
        unspec (te) = unspec (wte);
        wt_idx = trace_catch_$table_add (wt_ptr, te);
        if wt_idx < 0
        then signal error;
        n_added = n_added + 1;
      end;
      else do;					/* Update it. */
        te = trace_catch_$table_get (wt_ptr, wt_idx);
        if te.data ^= wte.old_value
        then do;
	call trace_catch_$table_put_data (wt_ptr, wt_idx, wte.old_value);
	n_updated = n_updated + 1;
        end;
      end;
    end;

    n_added_o = n_added;
    n_updated_o = n_updated;
    return;


/* REMOVE SPECIFIED ENTRYPOINTS */

remove_specified_eps:
  entry (n_removed_o);
    tt_ptr = trace_catch_$tt_ptr;
    stt_ptr = trace_$stt_ptr;
    n_removed = 0;
    if stt.h.count < 0
    then do;					/* "*" case */
      trace_$stt_ptr = null ();			/* Switch tables. */
      stt.h.count = 0;
      trace_catch_$tt_ptr = stt_ptr;
      trace_$stt_ptr = tt_ptr;
      n_removed = tt.h.count;
      do tt_idx = 0 to tt.h.count - 1;			/* Remove the meters. */
        te = trace_catch_$table_get (tt_ptr, tt_idx);
        unspec (tte) = unspec (te);
        tab_ptr = tte.trace_attributes_ptr;
        trace_catch_$removed = trace_catch_$removed + tab.local;
      end;
    end;
    else
      do stt_idx = 0 to stt.h.count - 1;
      te = trace_catch_$table_get (stt_ptr, stt_idx);
      tt_idx = trace_catch_$table_seek (tt_ptr, te.key);
      if tt_idx >= 0
      then do;					/* Remove it. */
        unspec (tte) = unspec (te);
        te = trace_catch_$table_remove (tt_ptr, tt_idx);
        if unspec (te) ^= unspec (tte)
        then signal error;
        tab_ptr = tte.trace_attributes_ptr;
        trace_catch_$removed = trace_catch_$removed + tab.local;
        call FREE_TAB (tab_ptr);
        n_removed = n_removed + 1;
      end;
    end;

    n_removed_o = n_removed;
    return;


/* REMOVE SPECIFIED LOCATIONS */

remove_specified_locs:
  entry (n_removed_o);
    wt_ptr = trace_catch_$wt_ptr;
    swt_ptr = trace_$swt_ptr;
    n_removed = 0;
    if swt.h.count < 0
    then do;					/* "*" case */
      trace_$swt_ptr = null ();			/* Switch them. */
      swt.h.count = 0;
      trace_catch_$wt_ptr = swt_ptr;
      trace_$swt_ptr = wt_ptr;
      n_removed = wt.h.count;
    end;
    else
      do swt_idx = 0 to swt.h.count - 1;
      te = trace_catch_$table_get (swt_ptr, swt_idx);
      wt_idx = trace_catch_$table_seek (wt_ptr, te.key);
      if wt_idx >= 0
      then do;					/* Remove it. */
        unspec (wte) = unspec (te);
        te = trace_catch_$table_remove (wt_ptr, wt_idx);
        if unspec (te.key) ^= unspec (wte.location_ptr)
        then signal error;
        n_removed = n_removed + 1;
      end;
    end;

    n_removed_o = n_removed;
    return;


/* TURN ON AND OFF SPECIFIED ENTRYPOINTS */

turn_on_specified_eps:
  entry (n_turned_o);
    what_we_want = "1"b;
    go to ON_OFF_JOIN;


turn_off_specified_eps:
  entry (n_turned_o);
    what_we_want = "0"b;
    go to ON_OFF_JOIN;


ON_OFF_JOIN:
    tt_ptr = trace_catch_$tt_ptr;
    stt_ptr = trace_$stt_ptr;

    n_turned = 0;
    if stt.h.count < 0
    then
      do tt_idx = 0 to tt.h.count - 1;			/* "*" case */
      te = trace_catch_$table_get (tt_ptr, tt_idx);
      unspec (tte) = unspec (te);
      tab_ptr = tte.trace_attributes_ptr;
      if tab.on ^= what_we_want
      then do;					/* Turn it. */
        tab.on = what_we_want;
        n_turned = n_turned + 1;
      end;
    end;
    else
      do stt_idx = 0 to stt.h.count - 1;
      te = trace_catch_$table_get (stt_ptr, stt_idx);
      tt_idx = trace_catch_$table_seek (tt_ptr, te.key);
      if tt_idx >= 0 /* If it is in the table...			*/
      then do;
        unspec (tte) = unspec (te);
        tab_ptr = tte.trace_attributes_ptr;
        if tab.on ^= what_we_want
        then do;					/* Turn it. */
	tab.on = what_we_want;
	n_turned = n_turned + 1;
        end;
      end;
    end;

    n_turned_o = n_turned;
    return;
%page;
/* METERS */


entrypoint_counts:
  entry (tt_idx_i) returns (1 aligned like counts);
    tt_idx = tt_idx_i;
    tt_ptr = trace_catch_$tt_ptr;
    if tt_idx < 0 | tt_idx >= tt.h.count
    then signal error;
    te = trace_catch_$table_get (tt_ptr, tt_idx);
    unspec (tte) = unspec (te);
    tab_ptr = tte.trace_attributes_ptr;
    return (tab.cts);


entrypoint_global_meters:
  entry (tt_idx_i) returns (1 like meters aligned);
    tt_idx = tt_idx_i;
    tt_ptr = trace_catch_$tt_ptr;
    if tt_idx < 0 | tt_idx >= tt.h.count
    then signal error;
    te = trace_catch_$table_get (tt_ptr, tt_idx);
    unspec (tte) = unspec (te);
    tab_ptr = tte.trace_attributes_ptr;
    return (tab.global);


entrypoint_local_meters:
  entry (tt_idx_i) returns (1 like meters aligned);
    tt_idx = tt_idx_i;
    tt_ptr = trace_catch_$tt_ptr;
    if tt_idx < 0 | tt_idx >= tt.h.count
    then signal error;
    te = trace_catch_$table_get (tt_ptr, tt_idx);
    unspec (tte) = unspec (te);
    tab_ptr = tte.trace_attributes_ptr;
    return (tab.local);


metered:
  entry () returns (1 like meters aligned);
    return (trace_catch_$metered);


removed:
  entry () returns (1 like meters aligned);
    return (trace_catch_$removed);


reset_meters:
  entry ();
    tt_ptr = trace_catch_$tt_ptr;
    do tt_idx = 0 to tt.h.count - 1;
      te = trace_catch_$table_get (tt_ptr, tt_idx);
      unspec (tte) = unspec (te);
      tab_ptr = tte.trace_attributes_ptr;
      tab.cts.calls = 0;
      tab.cts.max_level = 0;
      tab.local = 0;
      tab.global = 0;
    end;
    trace_catch_$removed = 1;
    trace_catch_$metered = 1;
    return;
%page;
/* ENTRYPOINTS */


entrypoint_index:
  entry (entry_ptr_i) returns (fixed bin);
    te.key = unspec (entry_ptr_i);
    return (trace_catch_$table_seek (trace_catch_$tt_ptr, te.key));


entrypoint_name:
  entry (tt_idx_i) returns (char (256) var);
    tt_idx = tt_idx_i;
    tt_ptr = trace_catch_$tt_ptr;
    if tt_idx < 0 | tt_idx >= tt.h.count
    then return ("entrypoint not in trace table");
    te = trace_catch_$table_get (tt_ptr, tt_idx);
    unspec (tte) = unspec (te);
    tab_ptr = tte.trace_attributes_ptr;
    if before (tab.name, "$") = after (tab.name, "$")
    then return (before (tab.name, "$"));
    else return (tab.name);


entrypoint_ptr:
  entry (tt_idx_i) returns (ptr);
    tt_idx = tt_idx_i;
    tt_ptr = trace_catch_$tt_ptr;
    if tt_idx < 0 | tt_idx >= tt.h.count
    then signal error;
    te = trace_catch_$table_get (tt_ptr, tt_idx);
    unspec (tte) = unspec (te);
    return (tte.entry_ptr);


entrypoint_seg_path:
  entry (tt_idx_i) returns (char (256) var);
    tt_idx = tt_idx_i;
    tt_ptr = trace_catch_$tt_ptr;
    if tt_idx < 0 | tt_idx >= tt.h.count
    then signal error;
    te = trace_catch_$table_get (tt_ptr, tt_idx);
    unspec (tte) = unspec (te);
    return (trace_entrypoints_$get_path_name (tte.entry_ptr));


entrypoint_status:
  entry (tt_idx_i) returns (char (32) var);
    tt_idx = tt_idx_i;
    tt_ptr = trace_catch_$tt_ptr;
    if tt_idx < 0 | tt_idx >= tt.h.count
    then signal error;
    te = trace_catch_$table_get (tt_ptr, tt_idx);
    unspec (tte) = unspec (te);
    tab_ptr = tte.trace_attributes_ptr;
    if tab.translator_id < 0
    then return ("cannot be traced");
    if tab.translator_id = 1
    then if ^trace_$alm ()
         then return ("off because -alm off");
    if tab.on
    then return ("on");
    else return ("off");


function:
  entry (tt_idx_i) returns (bit aligned);
    tt_idx = tt_idx_i;
    tt_ptr = trace_catch_$tt_ptr;
    if tt_idx < 0 | tt_idx >= tt.h.count
    then signal error;
    te = trace_catch_$table_get (tt_ptr, tt_idx);
    unspec (tte) = unspec (te);
    tab_ptr = tte.trace_attributes_ptr;
    return (tab.function);


num_entrypoints:
  entry () returns (fixed bin);
    return (trace_catch_$tt_ptr -> tt.h.count);


num_specified_entrypoints:
  entry () returns (fixed bin);
    stt_ptr = trace_$stt_ptr;
    if stt.h.count < 0
    then stt_ptr = trace_catch_$tt_ptr;			/* "*" case */
    return (stt.h.count);


parameters_ptr:
  entry (tt_idx_i) returns (ptr);
    tt_idx = tt_idx_i;
    tt_ptr = trace_catch_$tt_ptr;
    if tt_idx < 0 | tt_idx >= tt.h.count
    then signal error;
    te = trace_catch_$table_get (tt_ptr, tt_idx);
    unspec (tte) = unspec (te);
    tab_ptr = tte.trace_attributes_ptr;
    return (tab.parms_ptr);


specified_entrypoint_index:
  entry (stt_idx_i) returns (fixed bin);
    stt_idx = stt_idx_i;
    stt_ptr = trace_$stt_ptr;
    tt_ptr = trace_catch_$tt_ptr;
    if stt.h.count < 0
    then return (stt_idx);				/* "*" case */
    if stt_idx < 0 | stt_idx >= stt.h.count
    then signal error;
    te = trace_catch_$table_get (stt_ptr, stt_idx);
    tt_idx = trace_catch_$table_seek (tt_ptr, te.key);
    return (tt_idx);


translator_id:
  entry (tt_idx_i) returns (ptr);
    tt_idx = tt_idx_i;
    tt_ptr = trace_catch_$tt_ptr;
    if tt_idx < 0 | tt_idx >= tt.h.count
    then signal error;
    te = trace_catch_$table_get (tt_ptr, tt_idx);
    unspec (tte) = unspec (te);
    tab_ptr = tte.trace_attributes_ptr;
    return (tab.translator_id);
%page;
/* LOCATIONS */


location_ptr:
  entry (wt_idx_i) returns (ptr);
    wt_idx = wt_idx_i;
    wt_ptr = trace_catch_$wt_ptr;
    if wt_idx < 0 | wt_idx >= wt.h.count
    then signal error;
    te = trace_catch_$table_get (wt_ptr, wt_idx);
    unspec (wte) = unspec (te);
    return (wte.location_ptr);


location_seg_path:
  entry (wt_idx_i) returns (char (256) var);
    wt_idx = wt_idx_i;
    wt_ptr = trace_catch_$wt_ptr;
    if wt_idx < 0 | wt_idx >= wt.h.count
    then signal error;
    te = trace_catch_$table_get (wt_ptr, wt_idx);
    unspec (wte) = unspec (te);
    return (trace_entrypoints_$get_path_name (wte.location_ptr));


location_values:
  entry (wt_idx_i) returns (1 aligned like watch_values);
    wt_idx = wt_idx_i;
    wt_ptr = trace_catch_$wt_ptr;
    if wt_idx < 0 | wt_idx >= wt.h.count
    then signal error;
    te = trace_catch_$table_get (wt_ptr, wt_idx);
    unspec (wte) = unspec (te);
    my_watch_values.old = wte.old_value;
    my_watch_values.new = wte.location_ptr -> based_value;
    return (my_watch_values);


num_locations:
  entry () returns (fixed bin);
    return (trace_catch_$wt_ptr -> wt.h.count);


num_specified_locations:
  entry () returns (fixed bin);
    swt_ptr = trace_$swt_ptr;
    wt_ptr = trace_catch_$wt_ptr;
    if swt.h.count >= 0
    then return (swt.h.count);
    else return (wt.h.count);				/* "*" case */


specified_location_index:
  entry (swt_idx_i) returns (fixed bin);
    swt_idx = swt_idx_i;
    swt_ptr = trace_$swt_ptr;
    wt_ptr = trace_catch_$wt_ptr;
    if swt.h.count < 0
    then return (swt_idx);				/* "*" case */
    if swt_idx < 0 | swt_idx >= swt.h.count
    then signal error;
    te = trace_catch_$table_get (swt_ptr, swt_idx);
    wt_idx = trace_catch_$table_seek (wt_ptr, te.key);
    return (wt_idx);


specify_locations:
  entry (char256var_i);
    swt_ptr = trace_$swt_ptr;
    if char256var_i = "*"
    then do;
      if swt.h.count > 0
      then
LOCATIONS_STAR_ERROR:
        call sub_err_ (ZERO, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	   "If you specify *, you cannot specify any other locations.");
      swt.h.count = -1;
    end;
    else do;
      if swt.h.count < 0
      then go to LOCATIONS_STAR_ERROR;
      wte.location_ptr = addrel (cv_ptr_ ((char256var_i), code), 0);
      if wte.location_ptr = null ()			/* Addrel zeros the bit offset.		*/
      then call sub_err_ (code, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	      "I could not convert ""^a"" to a pointer value.", char256var_i);
      wte.old_value = wte.location_ptr -> based_value;	/* See if we blow up trying to reference it.	*/
      unspec (te) = unspec (wte);
      swt_idx = trace_catch_$table_add (swt_ptr, te);
    end;
    return;


specify_changed_locations:
  entry ();
    wt_ptr = trace_catch_$wt_ptr;
    swt_ptr = trace_$swt_ptr;
    if swt.h.count < 0
    then ;					/* "*" case */
    else
      do wt_idx = 0 to wt.h.count - 1;
      te = trace_catch_$table_get (wt_ptr, wt_idx);
      unspec (wte) = unspec (te);
      te.data = wte.location_ptr -> based_value;
      if te.data ^= wte.old_value
      then swt_idx = trace_catch_$table_add (swt_ptr, te);
    end;
    return;



/* MISCELLANEOUS */


add_entrypoint:					/* Called from trace_entrypoints_$add_entrypoint. */
  entry (entry_ptr_i, entry_name_i, translator_id_i, function_i) returns (fixed bin);
    tt_ptr = trace_catch_$tt_ptr;
    if tt.h.count = tt.h.max_count
    then return (null ());
    call ALLOCATE_TAB (entry_name_i, translator_id_i, function_i);
    if tab.translator_id >= 0 /* -1 means don't trace. */
    then do;
      if ^trace_parameters_$update_parameters (tab.parms_ptr)
      then signal error;
    end;
    tte.entry_ptr = entry_ptr_i;
    tte.trace_attributes_ptr = tab_ptr;
    unspec (te) = unspec (tte);
    tab.reference_count = tab.reference_count + 1;
    tt_idx = trace_catch_$table_add (tt_ptr, te);
    if tt_idx < 0
    then signal error;
    return (tt_idx);


specify_all_entrypoints:
  entry ();
    stt_ptr = trace_$stt_ptr;
    if stt.h.count > 0
    then call sub_err_ (ZERO, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	    "If you specify all entrypoints, you cannot specify any particular entrypoints.");
    stt.h.count = -1;
    return;


specify_entrypoint:					/* Called from trace_entrypoints_$specify_entrypoints.	*/
  entry (entry_ptr_i, entry_name_i, translator_id_i, function_i);
    stt_ptr = trace_$stt_ptr;
    tt_ptr = trace_catch_$tt_ptr;
    if stt.h.count < 0
    then call /* "*" case */
	    sub_err_ (ZERO, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	    "If you specify *, you cannot specify any other entrypoints.");
    if trace_catch_$table_seek (stt_ptr, unspec (entry_ptr_i)) >= 0
    then return;
    if stt.h.count = stt.h.max_count
    then call sub_err_ (ZERO, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	    "You have specified too many entrypoints.  The limit is ^d.", stt.h.max_count);
    tt_idx = trace_catch_$table_seek (tt_ptr, unspec (entry_ptr_i));
    if tt_idx >= 0
    then do;
      te = trace_catch_$table_get (tt_ptr, tt_idx);
      unspec (tte) = unspec (te);
      tab_ptr = tte.trace_attributes_ptr;
    end;
    else do;
      tte.entry_ptr = entry_ptr_i;
      call ALLOCATE_TAB (entry_name_i, translator_id_i, function_i);
      tte.trace_attributes_ptr = tab_ptr;
      unspec (te) = unspec (tte);
    end;
    tab.reference_count = tab.reference_count + 1;
    stt_idx = trace_catch_$table_add (stt_ptr, te);
    if stt_idx < 0
    then signal error;
    return;
%page;
/* SUBROUTINES */


ALLOCATE_TAB:
  proc (entry_name_i, translator_id_i, function_i);
    dcl  entry_name_i		 char (65) var parm;
    dcl  translator_id_i		 fixed bin parm;
    dcl  function_i			 bit aligned parm;
    tab_name_length = length (entry_name_i);
    if tab_name_length > 65
    then signal error;
    allocate tab in (trace_storage);
    unspec (tab) = ""b;
    tab.version = TAB_VERSION_3;
    tab.parms_ptr = null ();
    tab.on = "1"b;
    tab.translator_id = translator_id_i;
    tab.function = function_i;
    tab.name_length = tab_name_length;
    tab.name = entry_name_i;
  end ALLOCATE_TAB;


FREE_TAB:
  proc (tab_ptr_io);
    dcl  tab_ptr_io			 ptr unal parm;
    dcl  tp			 ptr unal;
    tp = tab_ptr_io;
    if tp = null ()
    then return;
    tab_ptr_io = null ();
    if tp -> tab.version ^= TAB_VERSION_3
    then signal error;
    tp -> tab.reference_count = tp -> tab.reference_count - 1;
    if tp -> tab.reference_count < 0
    then signal error;
    if tp -> tab.reference_count > 0
    then return;
    if tp -> tab.parms_ptr ^= null ()
    then call trace_parameters_$free_parameters (tp -> tab.parms_ptr);
    free tp -> tab;
  end FREE_TAB;
%page;
/* START OF DECLARATIONS */
/* format: ^insnl,^delnl */

/* Parameters */

    dcl  char256var_i		 char (256) var parm;
    dcl  entry_name_i		 char (65) var parm;
    dcl  entry_ptr_i		 ptr unal parm;
    dcl  function_i			 bit aligned parm;
    dcl  n_added_o			 fixed bin parm;
    dcl  n_removed_o		 fixed bin parm;
    dcl  n_turned_o			 fixed bin parm;
    dcl  n_updated_o		 fixed bin parm;
    dcl  stt_idx_i			 fixed bin parm;
    dcl  swt_idx_i			 fixed bin parm;
    dcl  translator_id_i		 fixed bin parm;
    dcl  tt_idx_i			 fixed bin parm;
    dcl  wt_idx_i			 fixed bin parm;


/* Automatic */

    dcl  code			 fixed bin (35);
    dcl  entry_ptr			 ptr unal;
    dcl  n_added			 fixed bin;
    dcl  n_removed			 fixed bin;
    dcl  n_turned			 fixed bin;
    dcl  n_updated			 fixed bin;
    dcl  rv			 fixed bin (35);
    dcl  stt_idx			 fixed bin;
    dcl  swt_idx			 fixed bin;
    dcl  tt_idx			 fixed bin;
    dcl  wt_idx			 fixed bin;
    dcl  what_we_want		 bit aligned;

    dcl  1 te			 aligned,
	 2 key			 bit (36),
	 2 data			 bit (36);

    dcl  1 tte			 aligned,
	 3 entry_ptr		 ptr unal,
	 3 trace_attributes_ptr	 ptr unal;

    dcl  1 wte			 aligned,
	 3 location_ptr		 ptr unal,
	 3 old_value		 bit (36);

    dcl  1 my_watch_values		 like watch_values aligned;

/* Static */

    dcl  ZERO			 fixed bin (35) static options (constant) init (0);


/* Conditions */

    dcl  error			 condition;


/* Based */

    dcl  based_value		 bit (36) aligned based;
    dcl  trace_storage		 area based (trace_catch_$trace_storage_ptr);

    dcl  TAB_VERSION_3		 char (8) aligned static options (constant) init ("TraceTB3");
    dcl  tab_name_length		 fixed bin;
    dcl  tab_ptr			 ptr unal;
    dcl  1 tab			 aligned based (tab_ptr),
	 2 version		 char (8),
	 2 reference_count		 fixed bin,
	 2 parms_ptr		 ptr unal,
	 2 cts			 like counts,
	 2 local			 like meters,
	 2 on			 bit,
	 2 global			 like meters,
	 2 translator_id		 fixed bin,
	 2 function		 bit,
	 2 name_length		 fixed bin,
	 2 name			 char (tab_name_length refer (tab.name_length)) unal;

    dcl  1 table_header		 aligned based,
	 2 version		 char (8),	/* "TraceTT3" */
	 2 max_count		 fixed bin,
	 2 count			 fixed bin,
	 2 idx,					/* Must be double word aligned.		*/
	   3 low			 fixed bin,
	   3 high			 fixed bin,
	 2 working_storage		 fixed bin (71);	/* For trace_catch_				*/


    dcl  TT_VERSION_3		 char (8) aligned static options (constant) init ("TraceTT3");
    dcl  tt_ptr			 ptr;
    dcl  1 tt			 aligned based (tt_ptr),
	 2 h			 like table_header,
	 2 e			 (0:9999) fixed bin (66);

    dcl  stt_ptr			 ptr;
    dcl  1 stt			 like tt aligned based (stt_ptr);

    dcl  wt_ptr			 ptr;
    dcl  1 wt			 aligned based (wt_ptr),
	 2 h			 like table_header,
	 2 e			 (0:1023) fixed bin (66);

    dcl  swt_ptr			 ptr;
    dcl  1 swt			 like wt aligned based (swt_ptr);


/* External Variables */

    dcl  trace_catch_$trace_storage_ptr	 ptr ext;
    dcl  trace_catch_$tt_ptr		 ptr ext;
    dcl  trace_catch_$wt_ptr		 ptr ext;
    dcl  1 trace_catch_$metered	 like meters aligned ext;
    dcl  1 trace_catch_$removed	 like meters aligned ext;

    dcl  trace_$stt_ptr		 ptr ext;
    dcl  trace_$swt_ptr		 ptr ext;


/* External Entries */

    dcl  cv_ptr_			 entry (char (*), fixed bin (35)) returns (ptr);
    dcl  sub_err_			 entry () options (variable);
    dcl  trace_catch_$table_add	 entry (ptr, 1 like te aligned) returns (fixed bin);
    dcl  trace_catch_$table_get	 entry (ptr, fixed bin) returns (1 like te aligned);
    dcl  trace_catch_$table_put_data	 entry (ptr, fixed bin, bit (36) aligned);
    dcl  trace_catch_$table_remove	 entry (ptr, fixed bin) returns (1 like te aligned);
    dcl  trace_catch_$table_seek	 entry (ptr, bit (36) aligned) returns (fixed bin);
    dcl  trace_entrypoints_$get_path_name entry (ptr unal) returns (char (256) var);
    dcl  trace_parameters_$free_parameters entry (ptr unal);
    dcl  trace_parameters_$update_parameters entry (ptr unal) returns (bit aligned);


/* format: insnl,delnl */
/* END OF DECLARATIONS */
%page;
/* START OF INCLUDE FILES */


%include sub_err_flags;
%page;
%include trace_interface;

  end trace_tables_;
