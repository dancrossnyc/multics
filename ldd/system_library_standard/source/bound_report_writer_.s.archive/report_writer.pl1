/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(1);
/*
     
     This module creates and destroys a report_writer_ invocation. The
     following entries are provided:

     create_invocation

     This entry creates a report_writer_ invocation. It sets up all of the
     temp segments, areas, etc. that report_writer_ needs. It also calls
     the intialization code for other modules, like the ones needed to manage
     the report_writer_ standard table, format option values, etc.

     destroy_invocation

     This entry destroys a report_writer_ invocation. It gets rid of the
     temp segments, areas, etc. the create_invocation entry acquires. It also
     calls the termination code for the modules mentioned above in
     create_invocation.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - October 1984.

*/
%page;
report_writer: proc;
%skip(3);
/* These parameters are described at each entry where they are used. */
%skip(3);
dcl code_parm fixed bin (35) parm;
dcl message_parm char (*) varying parm;
dcl report_cip_parm ptr parm;
dcl ssu_info_ptr_parm ptr parm;
dcl subsystem_name_parm char (*) parm;
%skip(3);
	call com_err_ (error_table_$badcall, "report_writer");
%skip(1);
	return;
%page;
create_invocation: entry (

	subsystem_name_parm,       /* input: Multics subsystem's name */
	ssu_info_ptr_parm,	       /* input: ssu_ info pointer */
	report_cip_parm,	       /* output: points to report_control_info */
	code_parm,                 /* output: success or failure */
	message_parm	       /* output: reason for the failure */
		       );
%skip(1);
/*

     This entrypoint sets up the environment for report_writer_. It performs
     the following steps:

     (1) Initializes automatic variables and sets up a cleanup handler so
         this entry can clean up gracefully if interrupted.

     (2) Sets up madatory subsystem info, like the ec suffix, subsystem name,
         etc.

     (3) Allocates/fills in report_control_info, and acquires the temp segments
         and area needed by report_writer_. Initializes the value_ segment
         used to hold the format option names and values.

     (4) Creates the entry variables for the calling subsystem's table
         manager procedure. Initializes the report_writer_ standard table
         structure. Sets the general report format options to their default
         values. Sets the report_writer_ info pointer in static storage so
         the report_writer_ subsystem requests will automagically get handed
         the correct report_writer_ info pointer from static storage. Adds
         the report_writer_ standard requests to the calling subsystem's
         set of requests. Adds the info directory for these requests.

*/
%skip(1);
	report_cip_parm = null;
%skip(1);
	call initialize_for_create_invocation;
%skip(1);
	on cleanup call cleanup_for_create_invocation;
%skip(1);
	call setup_subsystem_mandatory_info (code_parm, message_parm);
	if code_parm = 0
	then call setup_to_do_reporting (code_parm, message_parm);
	if code_parm = 0
	then call initialize_report_writer (code_parm, message_parm);
%skip(1);
	if code_parm = 0
	then report_cip_parm = report_cip;
	else call cleanup_for_create_invocation;
%skip(1);
	return;
%page;
destroy_invocation: entry (
%skip(1);
          report_cip_parm /* input: points to report_control_info */
	     );
%skip(1);
/*

     This entrypoint releases the environment setup for report_writer_. It 
     performs the following steps:

     (1) Cleans up the report_writer_ standard table structure.

     (2) Cleans up any report leftover by the user typing "display
         -keep_report", and then never invoking display again.

     (3) Gets rid of the temp segments and areas needed by report_writer_.

     (4) Removes the report_writer_ info pointer from static storage.

     (5) Removes the report_writer_ standard requests from the calling
         subsystem's set of requests, and the info dir for these requests.

*/
%skip(1);
	report_cip = report_cip_parm;
%skip(1);
	if report_cip ^= null
	then do;
	     call rw_table_manager$terminate_table (report_cip, (0));
	     if report_control_info.flags.permanent_report
	     then call rw_fr_delete_report (report_cip, (0));
	     call release_areas_and_temp_segments;
	     call rw_requests$delete_report_info_ptr (sci_ptr);
	     call ssu_$delete_request_table (sci_ptr,
		addr (report_writer_request_table_$standard_requests), (0));
	     call ssu_$delete_info_dir (sci_ptr,
		report_writer_info_dirs_$standard_requests, (0));
	     report_cip_parm = null;
	end;
%skip(1);
	return;
%page;
cleanup_for_create_invocation: proc;
%skip(1);
dcl cfci_loop fixed bin;
%skip(1);
	do cfci_loop = 1 to hbound (area_ptrs, 1);
	     call ssu_$release_area (sci_ptr, area_ptrs (cfci_loop));
	end;
%skip(1);
	do cfci_loop = 1 to hbound (temp_segment_ptrs, 1);
	     call ssu_$release_temp_segment (sci_ptr, temp_segment_ptrs (cfci_loop));
	end;
%skip(1);
	if work_area_ptr ^= null
	then call ssu_$release_area (sci_ptr, work_area_ptr);
%skip(1);
	return;
%skip(1);
     end cleanup_for_create_invocation;
%page;
initialize_for_create_invocation: proc;
%skip(1);
	work_area_ptr = null;
	report_cip = null;
	area_ptrs (*) = null;
	temp_segment_ptrs (*) = null;
%skip(1);
	return;
%skip(1);
     end initialize_for_create_invocation;
%page;
initialize_report_writer: proc (

	irw_code_parm,   /* output: success or failure */
	irw_message_parm /* output: reason for the failure */
			 );
%skip(1);
dcl irw_code_parm fixed bin (35) parm;
dcl irw_message_parm char (*) varying parm;
%skip(1);
	call rw_table_manager$set_table_manager (report_cip,
	     table_manager_name, irw_code_parm, irw_message_parm);
	if irw_code_parm ^= 0
	then return;
%skip(1);
	call rw_table_manager$initialize_table (report_cip, irw_code_parm);
	if irw_code_parm ^= 0
	then do;
	     call ioa_$rsnnl ("^/While initializing the internal table structure.",
		irw_message_parm, (0));
	     return;
	end;
%skip(1);
	call rw_options$set_all_to_system_defaults (report_cip, irw_code_parm);
	if irw_code_parm ^= 0
	then do;
	     call ioa_$rsnnl ("^/While setting the option values to their defaults.",
		irw_message_parm, (0));
	     return;
	end;
%skip(1);
	call rw_requests$set_initial_report_info_ptr (sci_ptr, report_cip, irw_code_parm);
	if irw_code_parm ^= 0
	then do;
	     call ioa_$rsnnl ("^/While setting the report writer info pointer.",
		irw_message_parm, (0));
	     return;
	end;
%skip(1);
	call ssu_$add_request_table (sci_ptr, addr (report_writer_request_table_$standard_requests),
	     99999, irw_code_parm);
	if irw_code_parm ^= 0
	then do;
	     call ioa_$rsnnl ("^/While adding the report_writer_ requests.",
		irw_message_parm, (0));
	     return;
	end;
%skip(1);
	call ssu_$add_info_dir (sci_ptr, report_writer_info_dirs_$standard_requests,
	     99999, irw_code_parm);
	if irw_code_parm ^= 0
	then do;
	     call ioa_$rsnnl ("^/While adding the report_writer_ info directory for the standard requests.",
		irw_message_parm, (0));
	     return;
	end;
%skip(1);
	return;
%skip(1);
     end initialize_report_writer;
%page;
release_areas_and_temp_segments: proc;
%skip(1);
dcl raats_loop ptr;
%skip(1);
	sci_ptr = report_control_info.subsystem_control_info_ptr;
%skip(1);
	do raats_loop = report_control_info.input_string_temp_seg_ptr,
	     report_control_info.output_string_temp_seg_ptr,
	     report_control_info.editing_strings_temp_seg_ptr,
	     report_control_info.headers_temp_seg_ptr,
	     report_control_info.row_value_temp_segment_ptr,
	     report_control_info.value_seg_ptr,
	     report_control_info.name_value_temp_seg_ptr,
	     report_control_info.report_temp_seg_ptr;
	     call ssu_$release_temp_segment (sci_ptr, raats_loop);
	end;
%skip(1);
	do raats_loop = report_control_info.name_value_area_ptr,
	     report_control_info.report_work_area_ptr,
	     report_control_info.general_work_area_ptr;
	     call ssu_$release_area (sci_ptr, raats_loop);
	end;
%skip(1);
	return;
%skip(1);
     end release_areas_and_temp_segments;
%page;
setup_subsystem_mandatory_info: proc (

	ssmi_code_parm,   /* output: success or failure */
	ssmi_message_parm /* output: reason for the failure */
			       );
%skip(1);
dcl ssmi_code_parm fixed bin (35) parm;
dcl ssmi_message_parm char (*) varying parm;
%skip(1);
	ssmi_code_parm = 0;
	ssmi_message_parm = "";
%skip(1);
	if ssu_info_ptr_parm = null
	then do;
	     ssmi_code_parm = error_table_$null_info_ptr;
	     ssmi_message_parm = "The ssu_ info pointer was null.";
	     return;
	end;
%skip(1);
	sci_ptr = ssu_info_ptr_parm;
	subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);
%skip(1);
	if subsystem_name_parm ^= ""
	then table_manager_name = subsystem_name_parm;
	else table_manager_name = ssu_$get_subsystem_name (sci_ptr);
%skip(1);
	ec_suffix = ssu_$get_ec_suffix (sci_ptr);
%skip(1);
	return;
%skip(1);
     end setup_subsystem_mandatory_info;
%page;
setup_to_do_reporting: proc (

	stdr_code_parm,	/* output: success or failure */
	stdr_message_parm	/* output: reason for failure */
		        );
%skip(1);
dcl stdr_code_parm fixed bin (35) parm;
dcl stdr_index fixed bin;
dcl stdr_loop char (32);
dcl stdr_message_parm char (*) varying parm;
%skip(1);
	stdr_code_parm = 0;
	stdr_message_parm = "";
%skip(1);
	area_infop = addr (automatic_area_info);
	area_info.version = area_info_version_1;
	unspec (area_info.control) = OFF;
	area_info.control.extend = ON;
	call ssu_$get_area (sci_ptr, area_infop, "rw_.general_use_area", work_area_ptr);
          allocate report_control_info in (work_area) set (report_cip);
          unspec (report_control_info) = OFF;
	report_control_info.general_work_area_ptr = work_area_ptr;
%skip(1);
	area_info.control.no_freeing = ON;
%skip(1);
	stdr_index = 1;
	do stdr_loop =  "rw_.names_and_values_area", "rw_.report_area";
	     call ssu_$get_area (sci_ptr, area_infop, stdr_loop, area_ptrs (stdr_index));
	     stdr_index = stdr_index + 1;
	end;
	report_control_info.name_value_area_ptr = area_ptrs (1);
	report_control_info.report_work_area_ptr = area_ptrs (2);
%skip(1);
	stdr_index = 1;
	do stdr_loop = "rw_.input_string_seg", "rw_.output_string_seg",
	     "rw_.editing_string_seg", "rw_.headers_seg", "rw_.row_value_seg",
	     "rw_.format_options_seg", "rw_.star_name_seg",  "rw_.formatted_page_seg";
	     call ssu_$get_temp_segment (sci_ptr, stdr_loop, temp_segment_ptrs (stdr_index));
	     stdr_index = stdr_index + 1;
	end;
%skip(1);
	report_control_info.input_string_temp_seg_ptr = temp_segment_ptrs (1);
	report_control_info.output_string_temp_seg_ptr = temp_segment_ptrs (2);
	report_control_info.editing_strings_temp_seg_ptr = temp_segment_ptrs (3);
	report_control_info.headers_temp_seg_ptr = temp_segment_ptrs (4);
	report_control_info.row_value_temp_segment_ptr = temp_segment_ptrs (5);
	report_control_info.value_seg_ptr = temp_segment_ptrs (6);
	report_control_info.name_value_temp_seg_ptr = temp_segment_ptrs (7);
	report_control_info.report_temp_seg_ptr = temp_segment_ptrs (8);
%skip(1);
	call value_$init_seg (report_control_info.value_seg_ptr, 0, null, 0, stdr_code_parm);
	if stdr_code_parm ^= 0
	then do;
	     stdr_message_parm = "^/While trying to initialize the options' value segment.";
	     return;
	end;
%skip(1);
	report_control_info.table_information_ptr = null;
	report_control_info.subsystem_control_info_ptr = sci_ptr;
	report_control_info.subsystems_info_ptr = subsystem_info_ptr;
	report_control_info.subsystems_ec_suffix = ec_suffix;
	report_control_info.format_report_info_ptr = null;
	report_control_info.display_iocb_ptr = null;
	report_control_info.temp_dir_name = get_pdir_ ();
	allocate status_branch in (work_area) set (status_ptr);
	call expand_pathname_ (report_control_info.temp_dir_name,
	     directory_name, entry_name, stdr_code_parm);
	if stdr_code_parm ^= 0
	then do;
	     stdr_message_parm = "^/Unable to expand the process dir directory name.";
	     return;
	end;
	call hcs_$status_long (directory_name, entry_name, 1,
	     status_ptr, null, stdr_code_parm);
	if stdr_code_parm ^= 0 & stdr_code_parm ^= error_table_$no_s_permission
	then do;
	     stdr_message_parm = "^/Unable to determine the unique id of the process dir.";
	     return;
	end;
	else stdr_code_parm = 0;
	report_control_info.temp_dir_unique_id = status_branch.long.uid;
	free status_branch in (work_area);
	allocate area_info in (work_area) set (area_infop);
	area_infop -> area_info = addr (automatic_area_info) -> area_info;
	report_control_info.area_info_ptr = area_infop;
%skip(1);
          return;
%skip(1);
     end setup_to_do_reporting;
%page;
dcl EXTENSIBLE bit (1) aligned static int options (constant) init ("1"b);
%skip(1);
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
%skip(1);
dcl addr builtin;
dcl area_ptrs (2) ptr;
dcl 1 automatic_area_info like area_info;
%skip(1);
dcl cleanup condition;
dcl com_err_ entry () options (variable);
%skip(1);
dcl directory_name char (168);
%skip(1);
dcl ec_suffix char (32);
dcl entry_name char (32);
dcl error_table_$badcall fixed bin(35) ext static;
dcl error_table_$no_s_permission fixed bin(35) ext static;
dcl error_table_$null_info_ptr fixed bin(35) ext static;
dcl expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
%skip(1);
dcl get_pdir_ entry() returns(char(168));
%skip(1);
dcl hbound builtin;
dcl hcs_$status_long entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
%skip(1);
dcl ioa_$rsnnl entry() options(variable);
%skip(1);
dcl null builtin;
%skip(1);
dcl report_writer_info_dirs_$standard_requests char (168) external;
dcl report_writer_request_table_$standard_requests bit (36) aligned external;
dcl rw_options$set_all_to_system_defaults entry (ptr, fixed bin (35));
dcl rw_fr_delete_report entry (ptr, fixed bin (35));
dcl rw_requests$delete_report_info_ptr entry (ptr);
dcl rw_requests$set_initial_report_info_ptr entry (ptr, ptr, fixed bin (35));
dcl rw_table_manager$initialize_table entry (ptr, fixed bin (35));
dcl rw_table_manager$set_table_manager entry (ptr, char(*), fixed bin (35), char (*) varying);
dcl rw_table_manager$terminate_table entry (ptr, fixed bin (35));
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$add_info_dir entry (ptr, char(*), fixed bin, fixed bin(35));
dcl ssu_$add_request_table entry (ptr, ptr, fixed bin, fixed bin(35));
dcl ssu_$delete_info_dir entry (ptr, char(*), fixed bin(35));
dcl ssu_$delete_request_table entry (ptr, ptr, fixed bin(35));
dcl ssu_$get_area entry (ptr, ptr, char(*), ptr);
dcl ssu_$get_ec_suffix entry (ptr) returns(char(32));
dcl ssu_$get_info_ptr entry (ptr) returns(ptr);
dcl ssu_$get_subsystem_name entry (ptr) returns(char(32));
dcl ssu_$get_temp_segment entry (ptr, char(*), ptr);
dcl ssu_$release_area entry (ptr, ptr);
dcl ssu_$release_temp_segment entry (ptr, ptr);
dcl subsystem_info_ptr ptr;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl table_manager_name char (32);
dcl temp_segment_ptrs (8) ptr;
%skip(1);
dcl unspec builtin;
%skip(1);
dcl value_$init_seg entry (ptr, fixed bin, ptr, fixed bin(19), fixed bin(35));
%skip(1);
dcl work_area area (sys_info$max_seg_size) based (work_area_ptr);
dcl work_area_ptr ptr;
%page;
%include area_info;
%page;
%include access_mode_values;
%page;
%include rw_report_info;
%page;
%include rw_options_extents;
%page;
%include status_structures;
%skip(3);
     end report_writer;
