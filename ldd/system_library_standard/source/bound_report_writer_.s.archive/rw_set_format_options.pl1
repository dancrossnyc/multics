/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*

     This is the main level procedure called to implement the
     report_writer_ set_format_options request.  Description and usage follows.

     Description:

     This request does one or more of the following actions.
     
     1) Sets INDIVIDUAL formatting option values to USER SPECIFIED
     VALUES.

     2) Sets INDIVIDUAL formatting option values to SYSTEM DEFAULTS.

     3) Sets ALL of the formatting option values to SYSTEM DEFAULTS.
     
     Usage:

     set_format_options {-format_option_args} {-control_args}


     Both parameters are passed to this request by ssu_.


     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983
     Changed - Al Dupuis - October 1984 Became report_writer_.

*/
%page;
rw_set_format_options: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	report_cip_parm /* input: points to report_control_info */
		        );
%skip(3);
dcl report_cip_parm ptr parm;
dcl sci_ptr_parm ptr parm;
%skip(3);
/*
          Mainline Processing Overview.

     	(1) Go through the control args once setting the long and 
              reset flags.

          (2) Reset all values to system defaults if -reset is in effect.

          (3) Process the format option args, prompting for value if
              requested, then setting the value to user provided or
              system default value.
*/
%page;
%skip(3);
	call initialize;
%skip(1);
          if reset_flag
	then do;
	     call rw_options$set_all_to_system_defaults (report_cip, code);
	     if code ^= 0 
	     then call ssu_$abort_line (sci_ptr, code);
	     if number_of_control_args = number_of_args_supplied
	     then return;
	end;
%skip(1);
	current_arg_number = 1;
          still_processing_format_option_args = ON;
%skip(1);
	do while (still_processing_format_option_args);
               call get_argument_set;
	     call get_and_or_set_the_value;
	end;
%skip(1);
	return;
%page;
get_accumulated_input: proc;
%skip(3);
/*
	Keep picking up pieces of the value concatenating each piece
	to the one before with a blank separating each one. The value is
	complete when we see the next format option name, which is 
	recognizable by the leading hyphen. If the arg before the
	next format option name was -string then conceal the special
	meaning of "-". The value is also complete when we exhaust the
	format option arguments.
*/
%skip(1);
	still_adding_chunks_of_the_value = ON;
%skip(1);
	do while (still_adding_chunks_of_the_value);
%skip(1);
	     call get_next_format_arg (code);
	     if code = NO_MORE_FORMAT_ARGS_LEFT
	     then return;
%skip(1);
	     if substr (arg, 1, 1) = "-" 
	     & ^this_is_a_string_arg (save_arg_number_for_hyphen_string)
	     then do;
		still_adding_chunks_of_the_value = OFF;
		current_arg_number = save_arg_number_for_hyphen_string + 1;
		still_processing_format_option_args = ON;
	     end;
	     else option_value 
		= option_value || " " || substr (arg, 1, arg_length);
%skip(1);
	end;
%skip(1);
	return;
%skip(1);
     end get_accumulated_input;
%page;
get_and_or_set_the_value: proc;
%skip(3);
/*
	Pick up the rest of the value if necessary. If the
	previous argument was -string then conceal the
	special meaning of -prompt and -default. If the value contains
	a trailing newline only then remove it. If the value contains
	imedded newlines then make sure it ends with a newline.
*/
%skip(1);
          if option_value = "-default" 
	& ^this_is_a_string_arg (save_arg_number_for_hyphen_string)
	then call rw_options$set_and_check (report_cip, long_option_name,
	     option_identifier, option_value, SYSTEM_DEFAULT, code);
	else do;
	     if option_value = "-prompt"
	     & ^this_is_a_string_arg (save_arg_number_for_hyphen_string)
	     then call get_prompted_input;
	     else call get_accumulated_input;
	     if length (option_value) > 0
	     then do;
		if index (substr (option_value, 1, length (option_value) - 1), NEWLINE) ^= 0
		then if substr (option_value, length (option_value)) ^= NEWLINE
		     then option_value = option_value || NEWLINE;
		     else;
		else if substr (option_value, length (option_value)) = NEWLINE
		     then option_value = substr (option_value, 1, length (option_value) - 1);
		     else;
	     end;
	     call rw_options$set_and_check (report_cip, long_option_name, 
		option_identifier, option_value, NOT_SYSTEM_DEFAULT, code);
	end;
%skip(1);
          /* Report various errors. */
%skip(1);
	if code ^= 0
          then if code = rw_error_$bad_option_value
	     then if identifier_needed
	          then call ssu_$abort_line (sci_ptr, code,
	               "^/^a is not a valid value for ^a.",
	               option_value, normalized_option_name);
	          else call ssu_$abort_line (sci_ptr, code,
		     "^/^a is not a valid value for ^a.", 
		     option_value, long_option_name);
	     else if code = error_table_$nomatch
		then call ssu_$abort_line (sci_ptr, code,
		     "^/The column identifier ^a did not match any column names.",
		     option_identifier);
	          else call ssu_$abort_line (sci_ptr, code);
	else;
%skip(1);
          return;
%skip(1);
     end get_and_or_set_the_value;
%page;
get_argument_set: proc;
%skip(3);
	/* Get the option name. */
%skip(1);
	call get_next_format_arg (code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, 0,
	     "Logic error while processing the request arguments.");
%skip(1);
	/* Translate the short or long name into a long name
             and find out if a column identifier is needed. */
%skip(1);
          option_name = arg;
          call rw_options$check_name (report_cip, option_name, 
	     long_option_name, identifier_needed, code);
	if code ^= 0
	then if code = rw_error_$no_columns_defined
	     then call ssu_$abort_line (sci_ptr, code,
	          "^/There must be columns defined before the value of ^a can be set.",
	          long_option_name);
	     else if code = rw_error_$bad_option_name
		then call ssu_$abort_line (sci_ptr, code,
		     "^/^a is not a valid option name.", option_name);
	          else call ssu_$abort_line (sci_ptr, code);
	else;
%skip(1);
	/* Get the identifier if its required and check to make sure it's
             valid so that we never prompt the user for the value when the 
	   option identifier is invalid. */
%skip(1);
	if identifier_needed
	then do;
	     call get_next_format_arg (code);
	     if code = NO_MORE_FORMAT_ARGS_LEFT
	     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		"The option name ^a was not followed by an identifier.", 
		long_option_name);
	     else;
	     option_identifier = arg;
	     call rw_options$check_identifier (report_cip, long_option_name, 
		option_identifier, normalized_option_name, code);
	     if code ^= 0
	     then if code = rw_error_$bad_option_identifier
		then call ssu_$abort_line (sci_ptr, code,
		     "^/^a is not a valid identifier for ^a.",
		     option_identifier, long_option_name);
	          else if code ^= error_table_$nostars
		     then call ssu_$abort_line (sci_ptr, code);
		     else;
	     else;
	end;
	else;
%skip(1);
/* 
	Get the first part of the option value which might be the complete
	value, part of the value, or the control args -default or -prompt.
*/
%skip(1);
	call get_next_format_arg (code);
          if code = NO_MORE_FORMAT_ARGS_LEFT
	then call ssu_$abort_line (sci_ptr, rw_error_$bad_option_value,
	     "^/The format option ^a did not have a value supplied.", 
	     long_option_name);
%skip(1);
	option_value = arg;
%skip(1);
          return;
%skip(1);
     end get_argument_set;
%page;
get_next_format_arg: proc (code_parm);
%skip(3);
/*
	Ignore control args and get straight to the format option arg.
	Save the number of the arg preceding the format option arg so
	-string processing can be done. Make sure that there is another
	format option arg for the next pass through and set an indicator
	if we've exhausted them.
*/
%skip(1);
dcl code_parm fixed bin (35) parm;
%skip(1);
	code_parm = 0;
%skip(1);
	/* Skip over the control args and get to the format args. */
%skip(1);
	do while (this_is_a_control_arg (current_arg_number));
	     current_arg_number = current_arg_number + 1;
	end;
%skip(1);
	if current_arg_number > number_of_args_supplied
	then do;
	     code = NO_MORE_FORMAT_ARGS_LEFT;
	     still_processing_format_option_args = OFF;
	     return;
	end;
          call ssu_$arg_ptr (sci_ptr, current_arg_number,
	     arg_ptr, arg_length);
	save_arg_number_for_hyphen_string = current_arg_number - 1;
	current_arg_number = current_arg_number + 1;
%skip(1);
	/* Make sure there is another format option arg. */
%skip(1);
	do while (this_is_a_control_arg (current_arg_number));
	     current_arg_number = current_arg_number + 1;
	end;
%skip(1);
	if current_arg_number > number_of_args_supplied
	then still_processing_format_option_args = OFF;
%skip(1);
	return;
%skip(1);
     end get_next_format_arg;
%page;
get_prompted_input: proc;
%skip(3);
/*
	Keep collecting lines from user_input until we hit a line which
	consists of the single character ".". Don't prompt before collecting
	if we are in brief mode. If the value is more than one line then
	leave the newline character after each line. If the value is one
	line then remove the newline from the end.
*/
%skip(1);
	input_buffer = "";
	option_value = "";
%skip(1);
	if ^brief_flag
	then if identifier_needed
	     then call ioa_ ("Enter ^a.", normalized_option_name);
	     else call ioa_ ("Enter ^a.", long_option_name);
	else;
%skip(1);
	number_of_input_lines = 0;
	more_input = ON;
%skip(1);
	do while (more_input);
	     call iox_$get_line (iox_$user_input,
		input_buffer_ptr, input_buffer_length, 
		number_of_chars_read, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code);
	     else;
	     number_of_input_lines = number_of_input_lines + 1;
	     if number_of_chars_read = 2
	     then if substr (input_buffer, 1, 1) = "."
		then more_input = OFF;
	          else;
	     else;
	     if more_input 
	     then option_value = option_value
		|| substr (input_buffer, 1, number_of_chars_read);
	end;
%skip(1);
	if number_of_input_lines = 2
	then option_value = substr (option_value, 1, 
	     length (option_value) - 1);
%skip(1);
	return;
%skip(1);
     end get_prompted_input;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	report_cip = report_cip_parm;
%skip(1);
	reset_flag = OFF;
	brief_flag = OFF;
%skip(1);
          /* If no args are given it is an error. */
%skip(1);
	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
	if number_of_args_supplied = 0
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
	     "^/Usage: set_format_options {-format_option_args} {-control_args}");
%skip(1);
/* 
	Go through the control args once setting the flags and flagging
	the control args we should ignore on our next pass through.
	This is done with a map of bits for the control args
	and another map of bits for the string args. 
*/
%skip(1);
	unspec (this_is_a_control_arg) = OFF;
	unspec (this_is_a_string_arg) = OFF;
	number_of_control_args = 0;
	current_arg_number = 1;
	still_processing_control_args = ON;
%skip(1);
	do while (still_processing_control_args);
%skip(1);
	     call ssu_$arg_ptr (sci_ptr, current_arg_number,
		arg_ptr, arg_length);
%skip(1);
	     if arg = "-string" | arg = "-str"
	     then do;
		this_is_a_control_arg (current_arg_number) = ON;
		this_is_a_string_arg (current_arg_number) = ON;
		number_of_control_args = number_of_control_args + 1;
		current_arg_number = current_arg_number + 1;
		if current_arg_number > number_of_args_supplied
		then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		     "^/-string must be followed by a format option value.");
		else;
	     end;
	     else if arg = "-reset" | arg = "-rs" 
		| arg = "-no_reset" | arg = "-nrs"
		then do;
		     this_is_a_control_arg (current_arg_number) = ON;
		     number_of_control_args = number_of_control_args + 1;
		     if arg = "-reset" | arg = "-rs"
		     then reset_flag = ON;
		     else reset_flag = OFF;
		end;
		else if arg = "-brief" | arg = "-bf"
		     | arg = "-long" | arg = "-lg"
		     then do;
			this_is_a_control_arg (current_arg_number) = ON;
			number_of_control_args = number_of_control_args + 1;
			if arg = "-brief" | arg = "-bf"
			then brief_flag = ON;
			else brief_flag = OFF;
		     end;
		     else;
%skip(1);
	     current_arg_number = current_arg_number + 1;
	     if current_arg_number > number_of_args_supplied
	     then still_processing_control_args = OFF;
%skip(1);
	end;
%skip(1);
	/* If no format option args were given (only control args were
             given), then -reset must be in effect or there's nothing to do. */
%skip(1);
	if number_of_control_args = number_of_args_supplied
	then if ^reset_flag
	     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	          "^/-reset was not specified and there are no format option values to set.");
	     else;
	else;
%skip(1);
	/* Used as the buffer to hold prompted input lines. */
%skip(1);
	input_buffer_ptr = addr (input_buffer);
	input_buffer_length = MAXIMUM_OPTION_VALUE_LENGTH;
	option_identifier = "";
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
dcl NEWLINE char (1) static int options (constant) init ("
");
dcl NO_MORE_FORMAT_ARGS_LEFT fixed bin (35) static int options (constant) init (1);
dcl NOT_SYSTEM_DEFAULT bit (1) aligned static int options (constant) init ("0"b);
dcl OFF bit (1) aligned static int options (constant) init ("0"b);
dcl ON bit (1) aligned static int options (constant) init ("1"b);
dcl SYSTEM_DEFAULT bit (1) aligned static int options (constant) init ("1"b);
%skip(1);
dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl brief_flag bit (1) aligned;
%skip(1);
dcl code fixed bin (35);
dcl current_arg_number fixed bin;
%skip(1);
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$noarg fixed bin(35) ext static;
dcl error_table_$nomatch fixed bin(35) ext static;
dcl error_table_$nostars fixed bin(35) ext static;
%skip(1);
dcl identifier_needed bit (1) aligned;
dcl index builtin;
dcl input_buffer char (MAXIMUM_OPTION_VALUE_LENGTH);
dcl input_buffer_length fixed bin (21);
dcl input_buffer_ptr ptr;
dcl ioa_ entry() options(variable);
dcl iox_$get_line entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl iox_$user_input ptr ext static;
%skip(1);
dcl length builtin;
dcl long_option_name char (MAXIMUM_OPTION_NAME_LENGTH) varying;
%skip(1);
dcl more_input bit (1) aligned;
%skip(1);
dcl number_of_chars_read fixed bin (21);
dcl number_of_args_supplied fixed bin;
dcl number_of_control_args fixed bin;
dcl number_of_input_lines fixed bin;
dcl normalized_option_name char (MAXIMUM_NORMALIZED_OPTION_NAME_LENGTH) varying;
%skip(1);
dcl option_identifier char (MAXIMUM_OPTION_IDENTIFIER_LENGTH) varying;
dcl option_name char (MAXIMUM_OPTION_NAME_LENGTH) varying;
dcl option_value char (MAXIMUM_OPTION_VALUE_LENGTH) varying;
%skip(1);
dcl report_cip ptr;
dcl reset_flag bit (1) aligned;
dcl rw_error_$bad_option_identifier fixed bin (35) ext static;
dcl rw_error_$bad_option_name fixed bin(35) ext static;
dcl rw_error_$bad_option_value fixed bin (35) static ext;
dcl rw_error_$no_columns_defined fixed bin(35) ext static;
dcl rw_options$check_name entry (ptr, char(*) var, char(*) var, bit(1) aligned, fixed bin(35));
dcl rw_options$check_identifier entry (ptr, char(*) var, char(*) var, char(*) var, fixed bin(35));
dcl rw_options$set_all_to_system_defaults entry (ptr, fixed bin(35));
dcl rw_options$set_and_check entry (ptr, char(*) var, char(*) var, char(*) var, bit(1) aligned, fixed bin(35));
%skip(1);
dcl save_arg_number_for_hyphen_string fixed bin;
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl still_adding_chunks_of_the_value bit (1) aligned;
dcl still_processing_format_option_args bit (1) aligned;
dcl still_processing_control_args bit (1) aligned;
dcl substr builtin;
%skip(1);
dcl this_is_a_control_arg (360) bit (1) unaligned;
dcl this_is_a_string_arg (360) bit (1) unaligned;
%skip(1);
dcl unspec builtin;
%page;
%include rw_options_extents;
%skip(3);
     end rw_set_format_options;
