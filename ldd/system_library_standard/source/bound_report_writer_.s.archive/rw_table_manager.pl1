/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(1);
/*

     This module is called to manage the report_writer_'s standard table
     structure. Data retrieved by the users table_manager procedure is
     placed into this standard table structure, and then report_writer_
     takes data out of the table to produce the report. The table is composed
     of the following:

     (1) An array of pointers to segments.  This array has one pointer for each
     segment referred to as level 1 segments.  The structure that contains the
     array is called table_segments_info and can be found in the include file
     rw_table_control_info.incl.pl1.

     (2) A series of level 1 segments.  These segments contain pointers to the
     row values.  There are as many segments as needed to hold all the
     pointers.  They are packed pointers, so roughly 250,000 rows can be
     pointed at by one segment full of pointers.  The structure row_ptrs is
     used to overlay these segments, and can be found in the include file
     rw_table_control_info.incl.pl1.

     (3) A series of level 2 segments.  These segments contain the row values.
     The row values are stored as a fixed length character string.  If a row
     doesn't quite fit into the last slot of the segment, it is stored in the
     next segment so that rows are never split across segment boundaries.
     These segments are implemented as an MSF, and are pointed at by the
     pointers in the level 1 segments.

     The array of pointers described in (1) above is a structure allocated in
     an area.  When the array is about to overflow, a new larger structure is
     allocated and everything is moved to the new structure, and the old one is
     freed.  The level 1 segments described in (2) above are temp segments.
     The level 2 segments described in (3) above are implemented as one MSF.
     When the table is sorted, the rows themselves aren't moved.  Only the row
     pointers are moved.  This is done by getting a new set of temp segments,
     moving the pointers across into their sorted order, and releasing the
     original temp segments.

*/
%page;
/*

     The following entrypoints are provided:

     initalize_table - called when report_writer_ is creating an invocation.
     terminate_table - called when report_writer_ is destroying an invocation.

     create_table - called when the user has asked for a new retrieve.
     delete_table - called when the retrieval has been completed.

     load_rows - called to retrieve N rows and place them in the table.
     load_table - called to retrieve all the rows and place them in the table.

     sort - called to sort the table.

     get_query - called to get the query statement the user used, to select
     the table, through the subsystem's method of choice.

     set_table_manager - called to set the users table manager procedure.
 
     Known Bugs:
 
     Other Problems:

     This subroutine and sort_seg_ call rw_temp_seg_mgr to get temp segments in
     a specified directory. All references to it should be removed after a
     generalized Multics temp segment manager becomes available, that knows how
     to create temp segments in places other than the process directory and
     knows how to clean them up after a process or system failure.
     rw_temp_seg_mgr knows how to do the former, but can't clean up after
     itself.

     History:

     Written - October 1984 - Al Dupuis

*/
%page;
rw_table_manager: proc;
%skip(1);
	/* These parameters are described at each entry where they are used. */
%skip(1);
dcl code_parm fixed bin (35) parm;
dcl message_parm char (*) varying parm;
dcl query_length_parm fixed bin (21) parm;
dcl query_segment_ptr_parm ptr parm;
dcl report_cip_parm ptr parm;
dcl row_count_actual_parm fixed bin (35) parm;
dcl row_count_specified_parm fixed bin (35) parm;
dcl sort_info_ptr_parm ptr parm;
dcl table_manager_parm char (*) parm;
%skip(3);
	call com_err_ (error_table_$badcall, RW_TABLE_MANAGER);
%skip(1);
	return;
%page;
create_table: entry (

	report_cip_parm,	/* input: points to report_control_info */
	code_parm		/* output: success or failure */
		    );
%skip(1);
	report_cip = report_cip_parm;
	code_parm = 0;
%skip(1);
	call initialize_automatic_variables;
	table_control_info.msf_directory_name = report_control_info.temp_dir_name;
%skip(1);
	call create_a_new_table;
	call create_a_segment_for_row_ptrs;
	call get_an_msf_component;
%skip(1);
	call report_control_info.table_manager_create_table_entry (
	     report_control_info.subsystems_info_ptr, code_parm);
	if code_parm ^= 0
	then call ssu_$abort_line (sci_ptr, code_parm);
%skip(1);
	call load_a_row_into_the_table;
%skip(1);
	return;
%page;
delete_table: entry (

	report_cip_parm,	/* input: points to report_control_info */
	code_parm		/* output: success or failure */
		    );
%skip(1);
	report_cip = report_cip_parm;
	code_parm = 0;
%skip(1);
	call initialize_automatic_variables;
	call delete_the_table (code_parm);
%skip(1);
	return;
%page;
get_query: entry (

	report_cip_parm,	       /* input: points to report_control_info */
	query_segment_ptr_parm,    /* input: points to query segment */
	query_length_parm,	       /* output: length of query */
	code_parm		       /* output: success or failure */
	      );
%skip(1);
	report_cip = report_cip_parm;
	sci_ptr = report_control_info.subsystem_control_info_ptr;
%skip(1);
	if report_control_info.table_manager_get_query_entry = report_writer_$create_invocation
	then call ssu_$abort_line (sci_ptr, error_table_$unsupported_operation,
	     "^/^a doesn't support the saving of a query.",
	     ssu_$get_subsystem_name (sci_ptr));
	else call report_control_info.table_manager_get_query_entry (report_control_info.subsystems_info_ptr,
	     query_segment_ptr_parm, query_length_parm, code_parm);
%skip(1);
	return;
%page;
initialize_table: entry (

	report_cip_parm,	/* input: points to report_control_info */
	code_parm		/* output: success or failure */
		    );
%skip(1);
	report_cip = report_cip_parm;
	code_parm = 0;
%skip(1);
	call initialize_the_table;
%skip(1);
	return;
%page;
load_rows: entry (

	report_cip_parm,	      /* input: points to report_control_info */
	row_count_specified_parm, /* input: number of rows needed */
	row_count_actual_parm,    /* output: number successfully gotten */
	code_parm		      /* output: success or failure */
	      );
%skip(1);
	report_cip = report_cip_parm;
	row_count_specified = row_count_specified_parm;
	row_count_actual_parm = 0;
	code_parm = 0;
%skip(1);
	call initialize_automatic_variables;
	row_ptrs_ptr = table_segments_info.segment_ptrs (
	     table_segments_info.current_number_of_segments);
%skip(1);
	do loop = 1 to row_count_specified while (code_parm = 0);
	     call report_control_info.table_manager_get_row_entry (
		report_control_info.subsystems_info_ptr, code_parm);
	     if code_parm = 0
	     then do;
		call load_a_row_into_the_table;
		row_count_actual_parm = row_count_actual_parm + 1;
	     end;
	end;
%skip(1);
	return;
%page;
load_table: entry (

	report_cip_parm,	      /* input: points to report_control_info */
	code_parm		      /* output: success or failure */
	      );
%skip(1);
	report_cip = report_cip_parm;
	code_parm = 0;
%skip(1);
	call initialize_automatic_variables;
	row_ptrs_ptr = table_segments_info.segment_ptrs (
	     table_segments_info.current_number_of_segments);
	still_loading_the_table = ON;
%skip(1);
	do while (still_loading_the_table);
	     call report_control_info.table_manager_get_row_entry (
		report_control_info.subsystems_info_ptr, code_parm);
	     if code_parm = 0
	     then call load_a_row_into_the_table;
	     else do;
		still_loading_the_table = OFF;
		if code_parm = rw_error_$no_data
		then code_parm = 0;
	     end;
	end;
%skip(1);
	return;
%page;
set_table_manager: entry (

	report_cip_parm,	/* input: points to report_control_info */
	table_manager_parm, /* input: name of table manager procedure */
	code_parm,	/* output: success or failure */
	message_parm	/* output: reason for the failure */
		    );
%skip(1);
	report_cip = report_cip_parm;
	code_parm = set_the_table_manager (table_manager_parm, message_parm);
%skip(1);
	return;
%page;
sort: entry (

	report_cip_parm,	/* input: points to report_control_info */
	sort_info_ptr_parm, /* input: points to sort_info */
	code_parm		/* output: success or failure */
		    );
%skip(1);
	report_cip = report_cip_parm;
	sort_info_ptr = sort_info_ptr_parm;
	code_parm = 0;
%skip(1);
	call initialize_automatic_variables;
	call sort_the_table (code_parm);
%skip(1);
	return;
%page;
terminate_table: entry (

	report_cip_parm,	/* input: points to report_control_info */
	code_parm		/* output: success or failure */
		    );
%skip(1);
	report_cip = report_cip_parm;
	code_parm = 0;
%skip(1);
	call initialize_automatic_variables;
	if table_control_info.msf_file_control_block_ptr ^= null
	then call delete_the_table (code_parm);
	call terminate_the_table;
%skip(1);
	return;
%page;
create_a_new_table: proc;
%skip(1);
dcl cant_code fixed bin (35);
%skip(1);
	call msf_manager_$open (table_control_info.msf_directory_name,
	     table_control_info.msf_file_name,
	     table_control_info.msf_file_control_block_ptr, cant_code);
	if cant_code ^= error_table_$noentry
	then call ssu_$abort_line (sci_ptr, cant_code,
	     "While trying to create/open the multi-segment file^/^a.",
	     pathname_ (table_control_info.msf_directory_name, 
	     table_control_info.msf_file_name));
%skip(1);
	table_control_info.maximum_number_of_rows_per_segment
	     = divide (sys_info$max_seg_size * 4, table_info.row_value_length, 21);
	table_control_info.current_segment_row_count = 0;
	table_control_info.current_component_ptr = null;
	table_control_info.row_count = 0;
%skip(1);
	return;
%skip(1);
     end create_a_new_table;
%page;
create_a_segment_for_row_ptrs: proc;
%skip(1);
dcl casfrp_code fixed bin (35);
dcl casfrp_loop fixed bin;
dcl casfrp_temporary_ptr ptr;
%skip(1);
	if (table_segments_info.current_number_of_segments
	= table_segments_info.maximum_number_of_segments)
	then do;
	     tsi_init_maximum_number_of_segments
		= table_segments_info.maximum_number_of_segments + STARTING_NUMBER_OF_SEGMENTS;
	     allocate table_segments_info in (work_area)
		set (casfrp_temporary_ptr);
	     casfrp_temporary_ptr -> table_segments_info.current_number_of_segments
		= table_segments_ip -> table_segments_info.current_number_of_segments;
	     do casfrp_loop = 1 to tsi_init_maximum_number_of_segments;
		if casfrp_loop > table_segments_ip -> table_segments_info.maximum_number_of_segments
		then casfrp_temporary_ptr -> table_segments_info.segment_ptrs (casfrp_loop) = null;
		else casfrp_temporary_ptr -> table_segments_info.segment_ptrs (casfrp_loop)
		     = table_segments_ip -> table_segments_info.segment_ptrs (casfrp_loop);
	     end;
	     free table_segments_ip -> table_segments_info;
	     table_segments_ip = casfrp_temporary_ptr;
	     table_control_info.table_segments_info_ptr = table_segments_ip;
	end;
%skip(1);
	call rw_temp_seg_mgr$get_segment (table_control_ip, RW_TABLE_MANAGER,
	     report_control_info.temp_dir_name,
	     table_segments_info.segment_ptrs (
	     table_segments_info.current_number_of_segments + 1), casfrp_code);
	if casfrp_code ^= 0
	then call ssu_$abort_line (sci_ptr, casfrp_code,
	     "^/Unable to get a temp segment in ^/^a.",
	     rtrim (report_control_info.temp_dir_name));
%skip(1);
	table_segments_info.current_number_of_segments
	     = table_segments_info.current_number_of_segments + 1;
	row_ptrs_ptr = table_segments_info.segment_ptrs (
	     table_segments_info.current_number_of_segments);
	row_ptrs.number_of_ptrs_in_this_segment = 0;
%skip(1);
	return;
%skip(1);
     end create_a_segment_for_row_ptrs;
%page;
delete_the_table: proc (

	dtt_code_parm /* output: success or failure */
		    /* only returned from replaceable delete_table proc */
		   );
%skip(1);
dcl dtt_code fixed bin (35);
dcl dtt_code_parm fixed bin (35) parm;
dcl dtt_loop fixed bin;
%skip(1);
	do dtt_loop = 1 to table_segments_info.current_number_of_segments;
	     call rw_temp_seg_mgr$release_segment (table_control_ip, RW_TABLE_MANAGER,
		table_segments_info.segment_ptrs (dtt_loop), dtt_code);
	     if dtt_code ^= 0
	     then call ssu_$print_message (sci_ptr, dtt_code,
		"^/While trying to delete the temp segment pointed to by ^p.",
		table_segments_info.segment_ptrs (dtt_loop));
	end;
%skip(1);
	table_segments_info.current_number_of_segments = 0;
	table_segments_info.segment_ptrs (*) = null;
	table_control_info.current_component_ptr = null;
	table_control_info.current_segment_row_count = 0;
%skip(1);
	call msf_manager_$close (table_control_info.msf_file_control_block_ptr);
	call delete_$path (table_control_info.msf_directory_name,
	     table_control_info.msf_file_name, DELETE_SWITCH,
	     "rw_table_manager", dtt_code);
	if dtt_code ^= 0
	then call ssu_$print_message (sci_ptr, dtt_code,
	     "While trying to delete^/^a.",
	     pathname_ (table_control_info.msf_directory_name,
	     table_control_info.msf_file_name));
	table_control_info.number_of_components = 0;
%skip(1);
	call report_control_info.table_manager_delete_table_entry (
	     report_control_info.subsystems_info_ptr, dtt_code_parm);
%skip(1);
	return;
%skip(1);
     end delete_the_table;
%page;
get_an_msf_component: proc;
%skip(1);
dcl gamc_code fixed bin (35);
%skip(1);
	call msf_manager_$get_ptr (table_control_info.msf_file_control_block_ptr,
	     table_control_info.number_of_components, CREATE_SWITCH,
	     table_control_info.current_component_ptr, (0), gamc_code);
	if gamc_code ^= 0
	then call ssu_$abort_line (sci_ptr, gamc_code,
	     "^/While trying to create component ^d for the MSF ^/pointed to by ^p.",
	     table_control_info.number_of_components, table_control_info.msf_file_control_block_ptr);
%skip(1);
	table_control_info.number_of_components = table_control_info.number_of_components + 1;
	table_control_info.current_segment_row_count = 0;
%skip(1);
	return;
%skip(1);
     end get_an_msf_component;
%page;
initialize_automatic_variables: proc;
%skip(1);
	sci_ptr = report_control_info.subsystem_control_info_ptr;
	table_ip = report_control_info.table_information_ptr;
	table_control_ip = report_control_info.table_control_info_ptr;
	table_segments_ip = table_control_info.table_segments_info_ptr;
	work_area_ptr = table_control_info.general_work_area_ptr;
%skip(1);
	return;
%skip(1);
     end initialize_automatic_variables;
%page;
initialize_the_table: proc;
%skip(1);
	work_area_ptr = report_control_info.general_work_area_ptr;
%skip(1);
	allocate table_control_info in (work_area)
	     set (table_control_ip);
	sci_ptr = report_control_info.subsystem_control_info_ptr;
%skip(1);
	table_control_info.number_of_components = 0;
	table_control_info.maximum_number_of_rows_per_segment = 0;
	table_control_info.current_segment_row_count = 0;
	table_control_info.table_information_ptr = report_control_info.table_information_ptr;
	table_control_info.table_segments_info_ptr = null;
	table_control_info.msf_file_control_block_ptr = null;
	table_control_info.current_component_ptr = null;
	table_control_info.temp_seg_info_ptr = null;
	table_control_info.subsystem_control_info_ptr = sci_ptr;
	table_control_info.msf_file_name = unique_chars_ (""b) || ".rw_.table";
	table_control_info.msf_directory_name = get_pdir_ ();
%skip(1);
	call ssu_$get_area (sci_ptr, null, "table area", work_area_ptr);
	table_control_info.general_work_area_ptr = work_area_ptr;
%skip(1);
	tsi_init_maximum_number_of_segments = STARTING_NUMBER_OF_SEGMENTS;
	allocate table_segments_info in (work_area) set (table_segments_ip);
	table_segments_info.maximum_number_of_ptrs_per_segment = sys_info$max_seg_size - SIZE_OF_ROW_PTRS_HEADER;
	table_segments_info.current_number_of_segments = 0;
	table_segments_info.segment_ptrs (*) = null;
	table_control_info.table_segments_info_ptr = table_segments_ip;
%skip(1);
	report_control_info.table_control_info_ptr = table_control_ip;
%skip(1);
	return;
%skip(1);
     end initialize_the_table;
%page;
load_a_row_into_the_table: proc;
%skip(1);
dcl laritt_row_value char (table_info.row_value_length) based (laritt_row_value_ptr);
dcl laritt_row_value_buffer char (table_info.row_value_length) based (table_info.row_value_ptr);
dcl laritt_row_value_ptr ptr;
%skip(1);
	if row_ptrs.number_of_ptrs_in_this_segment >= table_segments_info.maximum_number_of_ptrs_per_segment
	then call create_a_segment_for_row_ptrs;
%skip(1);
	if table_control_info.current_segment_row_count
	>= table_control_info.maximum_number_of_rows_per_segment
	then call get_an_msf_component;
%skip(1);
	laritt_row_value_ptr = addcharno (table_control_info.current_component_ptr,
	     table_control_info.current_segment_row_count * table_info.row_value_length + 1);
	laritt_row_value = laritt_row_value_buffer;
	table_control_info.current_segment_row_count
	     = table_control_info.current_segment_row_count + 1;
%skip(1);
	table_control_info.row_count = table_control_info.row_count + 1;
%skip(1);
	row_ptrs_ptr = table_segments_info.segment_ptrs (
	     table_segments_info.current_number_of_segments);
	row_ptrs.number_of_ptrs_in_this_segment = row_ptrs.number_of_ptrs_in_this_segment + 1;
	row_ptrs.row_value_ptr (row_ptrs.number_of_ptrs_in_this_segment) = laritt_row_value_ptr;
%skip(1);
	return;
%skip(1);
     end load_a_row_into_the_table;
%page;
set_the_table_manager: proc (

	sttm_table_manager_name_parm, /* input: name of table manager */
	sttm_message_parm)		/* output: reason for the failure */
	returns (fixed bin (35)	/* output: success or failure */
		        );
%skip(1);
dcl sttm_code fixed bin (35);
dcl sttm_loop char (12);
dcl sttm_message_parm char (*) varying parm;
dcl sttm_table_entry_variables (3) variable entry (ptr, fixed bin (35));
dcl sttm_table_manager_name char (32);
dcl sttm_table_manager_name_parm char (*) parm;
dcl sttm_variables_index fixed bin;
%skip(1);
	sttm_table_manager_name = sttm_table_manager_name_parm;
	sttm_message_parm = "";
	sttm_variables_index = 1;
%skip(1);
	do sttm_loop = "create_table", "delete_table", "get_row";
	     call hcs_$make_entry (null, sttm_table_manager_name,
		sttm_loop, sttm_table_entry_variables (
		sttm_variables_index), sttm_code);
	     if sttm_code ^= 0
	     then do;
		sttm_message_parm = "Unable to make an entry to "
		     || rtrim (sttm_loop) || ".";
		return (sttm_code);
	     end;
	     sttm_variables_index = sttm_variables_index + 1;
	end;
%skip(1);
	report_control_info.table_manager_create_table_entry = sttm_table_entry_variables (1);
	report_control_info.table_manager_delete_table_entry = sttm_table_entry_variables (2);
	report_control_info.table_manager_get_row_entry = sttm_table_entry_variables (3);
%skip(1);
	call hcs_$make_entry (null, sttm_table_manager_name, "get_query",
	     report_control_info.table_manager_get_query_entry, sttm_code);
	if sttm_code ^= 0
	then report_control_info.table_manager_get_query_entry = report_writer_$create_invocation;
%skip(1);
	return (0);
%skip(1);
     end set_the_table_manager;
%page;
sort_the_table: proc (

	stt_code_parm /* output: success or failure */
		 );
%skip(1);
dcl stt_code_parm fixed bin (35) parm;
dcl stt_loop fixed bin;
dcl stt_sort_descriptors_array (ss_field_count) ptr based (stt_sort_descriptors_array_ptr);
dcl stt_sort_descriptors_array_ptr ptr;
dcl 1 stt_sort_input aligned based (stt_sort_input_ptr),
      2 number_of_segments fixed bin,
      2 number_of_components fixed bin,
      2 sorted bit (1),
      2 segment_ptrs (stt_sort_input_init_number_of_segments refer (
                      stt_sort_input.number_of_segments)) ptr unaligned,
      2 component_ptrs (stt_sort_input_init_number_of_components refer (
                      stt_sort_input.number_of_components)) ptr unaligned;
dcl stt_sort_input_init_number_of_components fixed bin;
dcl stt_sort_input_init_number_of_segments fixed bin;
dcl stt_sort_input_ptr ptr;
dcl 1 stt_sort_output aligned based (stt_sort_output_ptr),
      2 number_of_segments fixed bin,
      2 segment_ptrs (stt_sort_input_init_number_of_segments refer (
                      stt_sort_output.number_of_segments)) ptr unaligned;
dcl stt_sort_output_ptr ptr;
dcl stt_sort_was_successful bit (1) aligned;
dcl stt_temp_ptr ptr;
%skip(1);
	stt_code_parm = 0;
	ss_info_ptr = null;
	stt_sort_descriptors_array_ptr = null;
	stt_sort_input_ptr = null;
	stt_sort_output_ptr = null;
	stt_sort_was_successful = OFF;
%skip(1);
	on cleanup call cleanup_sort_information;
%skip(1);
	ss_field_count = sort_info.number_of_columns_to_sort;
	allocate ss_info in (work_area) set (ss_info_ptr);
	ss_info.header.version = SS_info_version_1;
	ss_info.header.block_size = 1;
	ss_info.header.duplicate_mode = SS_duplicates;
	ss_info.header.mbz1 (*) = 0;
	ss_info.header.delim.type = SS_length;
	ss_info.header.delim.number = table_info.row_value_length;
	ss_info.header.delim.string = "";
	ss_info.field.from.type (*) = SS_index;
	ss_info.field.from.string (*) = "";
	ss_info.field.to.type (*) = SS_length;
	ss_info.field.to.string (*) = "";
	unspec (ss_info.field.modes (*)) = OFF;
	allocate stt_sort_descriptors_array in (work_area)
	     set (stt_sort_descriptors_array_ptr);
%page;
	do stt_loop = 1 to ss_field_count;
	     ss_info.field.from.number (stt_loop)
		= table_info.columns.column_index (sort_info.columns.number (stt_loop));
	     ss_info.field.to.number (stt_loop)
		= table_info.columns.column_length (sort_info.columns.number (stt_loop));
	     ss_info.field.modes.descending (stt_loop)
		= sort_info.columns.modes.descending (stt_loop);
	     ss_info.field.modes.non_case_sensitive (stt_loop)
		= sort_info.columns.modes.non_case_sensitive (stt_loop);
	     stt_sort_descriptors_array (stt_loop)
		= addr (table_info.columns.column_data_type (sort_info.columns.number (stt_loop)));
	     ss_info.field.modes.numeric (stt_loop)
		= mdbm_util_$number_data_class (stt_sort_descriptors_array (stt_loop));
	end;
%skip(1);
	stt_sort_input_init_number_of_segments = table_segments_info.current_number_of_segments;
	stt_sort_input_init_number_of_components = table_control_info.number_of_components;
	allocate stt_sort_input in (work_area) set (stt_sort_input_ptr);
	stt_sort_input.segment_ptrs (*) = null;
	stt_sort_input.sorted = OFF;
%skip(1);
	do stt_loop = 1 to stt_sort_input_init_number_of_segments;
	     stt_sort_input.segment_ptrs (stt_loop) = table_segments_info.segment_ptrs (stt_loop);
	end;
%skip(1);
	do stt_loop = 1 to stt_sort_input_init_number_of_components;
	     call msf_manager_$get_ptr (table_control_info.msf_file_control_block_ptr,
		stt_loop - 1, DONT_CREATE_SWITCH,
		stt_temp_ptr, (0), stt_code_parm);
	     if stt_code_parm ^= 0
	     then call ssu_$abort_line (sci_ptr, stt_code_parm,
		"^/While trying to obtain a pointer to component # ^d, for the MSF^/pointed to by ^p.",
		stt_loop - 1, table_control_info.msf_file_control_block_ptr);
	     stt_sort_input.component_ptrs (stt_loop) = stt_temp_ptr;
	end;
%skip(1);
	allocate stt_sort_output in (work_area) set (stt_sort_output_ptr);
	stt_sort_output.segment_ptrs (*) = null;
%skip(1);
	do stt_loop = 1 to stt_sort_input_init_number_of_segments;
	     call rw_temp_seg_mgr$get_segment (table_control_ip, RW_TABLE_MANAGER,
		report_control_info.temp_dir_name,
		stt_temp_ptr, stt_code_parm);
	     if stt_code_parm ^= 0
	     then call ssu_$abort_line (sci_ptr, stt_code_parm,
		"^/Unable to get a temp segment in ^/^a.",
		rtrim (report_control_info.temp_dir_name));
	     stt_sort_output.segment_ptrs (stt_loop) = stt_temp_ptr;
	end;
%skip(1);
	call sort_seg_$linus_table (table_control_ip, RW_TABLE_MANAGER, ss_info_ptr,
	     rw_temp_seg_mgr$get_segment, rw_temp_seg_mgr$release_segment,
	     report_control_info.temp_dir_name, stt_sort_input_ptr,
	     stt_sort_descriptors_array, stt_sort_output_ptr, stt_code_parm);
	if stt_code_parm ^= 0
	then call ssu_$abort_line (sci_ptr, stt_code_parm,
	     "^/Unable to sort the table.");
%skip(1);
	stt_sort_was_successful = ON; 
	call cleanup_sort_information;
%skip(1);
	return;
%page;
cleanup_sort_information: proc;
%skip(1);
dcl csi_loop fixed bin;
%skip(1);
	if ss_info_ptr ^= null
	then free ss_info;
	if stt_sort_descriptors_array_ptr ^= null
	then free stt_sort_descriptors_array;
%skip(1);
	if stt_sort_input_ptr = null
	then return;
%skip(1);
	if stt_sort_was_successful
	then do csi_loop = 1 to stt_sort_input_init_number_of_segments;
	     table_segments_info.segment_ptrs (csi_loop)
		= stt_sort_output.segment_ptrs (csi_loop);
	     stt_temp_ptr = stt_sort_input.segment_ptrs (csi_loop);
	     call rw_temp_seg_mgr$release_segment (table_control_ip, RW_TABLE_MANAGER,
		stt_temp_ptr, (0));
	end;
	else if stt_sort_output_ptr ^= null
	     then do csi_loop = 1 to stt_sort_input_init_number_of_segments;
		if stt_sort_output.segment_ptrs (csi_loop) ^= null
		then do;
		     stt_temp_ptr = stt_sort_output.segment_ptrs (csi_loop);
		     call rw_temp_seg_mgr$release_segment (table_control_ip, RW_TABLE_MANAGER,
			stt_temp_ptr, (0));
		end;
		else;
	     end;
	     else;
%skip(1);
	free stt_sort_input;
	if stt_sort_output_ptr ^= null
	then free stt_sort_output;
%skip(1);
	return;
%skip(1);
     end cleanup_sort_information;
%skip(1);
     end sort_the_table;
%page;
terminate_the_table: proc;
%skip(1);
	sci_ptr = report_control_info.subsystem_control_info_ptr;
	table_control_ip = report_control_info.table_control_info_ptr;
	if table_control_ip = null
	then return;
%skip(1);
	call rw_temp_seg_mgr$terminate (table_control_ip, (0));
	work_area_ptr = table_control_info.general_work_area_ptr;
	call ssu_$release_area (sci_ptr, work_area_ptr);
	free table_control_info;
	report_control_info.table_control_info_ptr = null;
%skip(1);
	return;
%skip(1);
     end terminate_the_table;
%page;
dcl CREATE_SWITCH bit (1) internal static options (constant) init ("1"b);
%skip(1);
dcl DELETE_SWITCH bit (6) internal static options (constant) init ("100100"b);
dcl DONT_CREATE_SWITCH bit (1) internal static options (constant) init ("0"b);
%skip(1);
dcl OFF bit (1) aligned internal static options (constant) init ("0"b);
dcl ON bit (1) aligned internal static options (constant) init ("1"b);
%skip(1);
dcl RW_TABLE_MANAGER char (16) internal static options (constant) init ("rw_table_manager");
%skip(1);
dcl SIZE_OF_ROW_PTRS_HEADER fixed bin internal static options (constant) init (1);
dcl STARTING_NUMBER_OF_SEGMENTS fixed bin static internal options (constant) init (10);
%skip(1);
dcl addcharno builtin;
dcl addr builtin;
%skip(1);
dcl cleanup condition;
dcl com_err_ entry() options(variable);
%skip(1);
dcl delete_$path entry (char(*), char(*), bit(6), char(*), fixed bin(35));
dcl divide builtin;
%skip(1);
dcl error_table_$badcall fixed bin(35) ext static;
dcl error_table_$noentry fixed bin(35) ext static;
dcl error_table_$unsupported_operation fixed bin(35) ext static;
%skip(1);
dcl get_pdir_ entry() returns(char(168));
%skip(1);
dcl hcs_$make_entry entry (ptr, char(*), char(*), entry, fixed bin(35));
%skip(1);
dcl loop fixed bin (35);
%skip(1);
dcl mdbm_util_$number_data_class entry (ptr) returns (bit (1) aligned);
dcl msf_manager_$close entry (ptr);
dcl msf_manager_$get_ptr entry (ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35));
dcl msf_manager_$open entry (char(*), char(*), ptr, fixed bin(35));
%skip(1);
dcl null builtin;
%skip(1);
dcl pathname_ entry (char(*), char(*)) returns(char(168));
%skip(1);
dcl report_writer_$create_invocation entry;
dcl row_count_specified fixed bin (35);
dcl rtrim builtin;
dcl rw_error_$no_data fixed bin(35) ext static;
dcl rw_temp_seg_mgr$get_segment entry (ptr, char(*), char(*), ptr, fixed bin(35));
dcl rw_temp_seg_mgr$release_segment entry (ptr, char(*), ptr, fixed bin(35));
dcl rw_temp_seg_mgr$terminate entry (ptr, fixed bin(35));
%skip(1);
dcl sci_ptr ptr;
dcl sort_seg_$linus_table entry (ptr, char(*), ptr, entry, entry, char(*), ptr, (*) ptr, ptr, fixed bin(35));
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$get_area entry (ptr, ptr, char(*), ptr);
dcl ssu_$get_subsystem_name entry (ptr) returns (char (32));
dcl ssu_$print_message entry() options(variable);
dcl ssu_$release_area entry (ptr, ptr);
dcl still_loading_the_table bit (1) aligned;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl unique_chars_ entry (bit(*)) returns(char(15));
dcl unspec builtin;
%skip(1);
dcl work_area area (sys_info$max_seg_size) based (work_area_ptr);
dcl work_area_ptr ptr;
%page;
%include rw_options_extents;
%page;
%include rw_report_info;
%page;
%include rw_sort_info;
%page;
%include rw_table_control_info;
%page;
%include rw_table_info;
%page;
%include sort_seg_info;
%skip(3);
     end rw_table_manager;
