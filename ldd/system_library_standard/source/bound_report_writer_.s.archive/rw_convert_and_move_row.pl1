/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(1);
/*

     This is the subroutine called by the subsystem's table manager procedure
     to have a row converted from other data types to character format, and
     moved into the row value buffer.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - October 1984.

*/
%page;
rw_convert_and_move_row: proc (

	report_control_ip_parm,	/* input: points to report_control_info */
	value_ptrs_parm		/* input: an array of value ptrs */
			     );
%skip(1);
dcl report_control_ip_parm ptr parm;
dcl value_ptrs_parm (*) ptr;
%skip(1);
	report_cip = report_control_ip_parm;
%skip(1);
	call initialize;
	call convert_the_row;
%skip(1);
	return;
%page;
convert_the_row: proc;
%skip(1);
dcl ctr_column_value char (table_info.columns (ctr_loop).column_length) based;
dcl ctr_loop fixed bin;
dcl ctr_row_value char (table_info.row_value_length) based (table_info.row_value_ptr);
%skip(1);
	do ctr_loop = 1 to table_info.column_count;
	     character_descriptor_overlay.size
		= table_info.columns (ctr_loop).column_length;
	     if table_info.columns (ctr_loop).column_data_type = character_descriptor
	     then substr (ctr_row_value,
		table_info.columns (ctr_loop).column_index,
		table_info.columns (ctr_loop).column_length)
		= value_ptrs_parm (ctr_loop) -> ctr_column_value;
	     else do;
		source_arg_descriptor_ptr
		     = addr (table_info.columns.column_data_type (ctr_loop));
		string_data_class
		     = ((source_arg_descriptor.type = bit_dtype)
		     | (source_arg_descriptor.type = varying_bit_dtype)
		     | (source_arg_descriptor.type = char_dtype)
		     | (source_arg_descriptor.type = varying_char_dtype));
		if string_data_class
		then source_length = source_arg_descriptor.size;
		else do;
		     encoded_precision_ptr -> encoded_precision.scale
			= source_fixed_arg_descriptor.scale;
		     encoded_precision_ptr -> encoded_precision.prec
			= source_fixed_arg_descriptor.precision;
		end;
		source_ptr = value_ptrs_parm (ctr_loop);
		on any_other call handle_conditions;
		call assign_$assign_round_ (
		     addr (row_value_as_an_array (table_info.columns (ctr_loop).column_index)),
		     2 * character_descriptor_overlay.type + fixed (character_descriptor_overlay.packed),
		     fixed (character_descriptor_overlay.size, 35),
		     source_ptr,
		     2 * source_arg_descriptor.type + fixed (source_arg_descriptor.packed),
		     source_length);
	     end;
	end;
%skip(1);
	return;
%page;
handle_conditions: proc;
%skip(1);
dcl 1 hc_condition_info like condition_info;
dcl hc_loop fixed bin;
%skip(1);
/*
     These conditions defined in CONDITION_NAMES are the same ones that the
     mrds module mu_convert.pl1 handles. The thinking is that it has been
     out there for several releases handling conversions of the same data 
     types, so these must be the correct conditions to handle.
*/
%skip(1);
	condition_info_ptr = addr (hc_condition_info);
	unspec (condition_info) = OFF;
	condition_info.version = condition_info_version_1;
	call find_condition_info_ (null, condition_info_ptr, (0));
%skip(1);
	do hc_loop = 1 to hbound (CONDITION_NAMES, 1);
	     if condition_info.condition_name = CONDITION_NAMES (hc_loop)
	     then call ssu_$abort_line (sci_ptr, error_table_$unexpected_condition,
		"^/The ^a condition occurred while trying to convert the^/^a column value.",
		CONDITION_NAMES (hc_loop), table_info.columns (ctr_loop).column_name);
	end;
%skip(1);
	call continue_to_signal_ ((0));
%skip(1);
	return;
%skip(1);
     end handle_conditions;
%skip(1);
     end convert_the_row;
%page;
initialize: proc;
%skip(1);
	table_ip = report_control_info.table_information_ptr;
	sci_ptr = report_control_info.subsystem_control_info_ptr;
	encoded_precision_ptr = addr (source_length);
	row_value_as_an_array_ptr = table_info.row_value_ptr;
	character_descriptor_overlay_ptr = addr (character_descriptor);
	character_descriptor_overlay.flag = "1"b;
	character_descriptor_overlay.type = char_dtype;
	character_descriptor_overlay.packed = "1"b;
	character_descriptor_overlay.number_dims = 0;
	character_descriptor_overlay.size = 0;
%skip(1);
	return;
%skip(1);
     end initialize;
%page;
dcl CONDITION_NAMES (7) char (32) varying internal static options (constant) init (
"conversion", "error", "fixedoverflow", "illegal_procedure",
"overflow", "size", "underflow");
%skip(1);
dcl OFF bit (1) aligned internal static options (constant) init ("0"b);
%skip(1);
dcl addr builtin;
dcl any_other condition;
dcl assign_$assign_round_ entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
%skip(1);
dcl character_descriptor bit (36) aligned;
dcl 1 character_descriptor_overlay like arg_descriptor based (character_descriptor_overlay_ptr);
dcl character_descriptor_overlay_ptr ptr;
dcl continue_to_signal_ entry (fixed bin(35));
%skip(1);
dcl encoded_precision_ptr ptr;
dcl error_table_$unexpected_condition fixed bin(35) ext static;
%skip(1);
dcl find_condition_info_ entry (ptr, ptr, fixed bin(35));
dcl fixed builtin;
%skip(1);
dcl hbound builtin;
%skip(1);
dcl null builtin;
%skip(1);
dcl row_value_as_an_array (table_info.row_value_length) char (1) based (row_value_as_an_array_ptr);
dcl row_value_as_an_array_ptr ptr;
%skip(1);
dcl sci_ptr ptr;
dcl 1 source_arg_descriptor like arg_descriptor based (source_arg_descriptor_ptr);
dcl source_arg_descriptor_ptr ptr;
dcl 1 source_fixed_arg_descriptor like fixed_arg_descriptor based (source_arg_descriptor_ptr);
dcl source_length fixed bin (35);
dcl source_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl string_data_class bit (1) aligned;
dcl substr builtin;
%skip(1);
dcl unspec builtin;
%page;
%include arg_descriptor;
%page;
%include condition_info;
%page;
%include encoded_precision;
%page;
%include rw_options_extents;
%page;
%include rw_report_info;
%page;
%include rw_table_info;
%page;
%include std_descriptor_types;
%skip(3);
     end rw_convert_and_move_row;
