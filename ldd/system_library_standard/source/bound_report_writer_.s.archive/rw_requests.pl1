/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(1);
/*

     This procedure is called by ssu_ whenever any of the report writer
     requests are invoked by the user. They are: column_value, display,
     display_builtins, list_format_options, restore_format_options,
     save_format_options, and set_format_options. This procedure is called
     with a pointer to the ssu_ info structure and a pointer to the
     subsystem's info structure. It obtains the pointer to the 
     report_control_info structure and then calls down to the appropriate
     report writer subroutine to have the request executed, passing along
     the report_control_info pointer. The names and values area is refreshed
     before execution of some of the requests (the ones that use it), rather
     than freeing everything allocated in it.

     It also provides the miscellaneous functions of: setting the initial
     report_writer_ info pointer in internal static when a report_writer_
     invocation is first created; replaces the current report_writer_ info
     pointer for the calling subsystem with a newly provided one, when the
     calling subsystem wants to multiplex several report_writer_ invocations
     within one subsystem invocation; and, removing the report_writer_ info
     pointer from internal static.

     The following entrypoints are provided:

     column_value           | These entrypoints are called by ssu_ whenever: a
     display	        | user at the terminal types one of these request
     display_builtins       | names; or, the calling subsystem calls ssu_
     list_format_options    | execute_line, execute_string, or
     restore_format_options | evaluate_active_string with one of these request
     save_format_options    | names as an argument.
     set_format_options     |

     delete_report_info_pointer  | This entrypoint is called to remove the
			   | report_writer_ info pointer from internal
			   | static storage.

     set_initial_report_info_ptr | This entrypoint is called to place the
			   | report_writer_ info pointer into internal
			   | static when a report_writer_ invocation is
			   | first created.

     set_report_writer_info_ptr  | This entrypoint is called to replace the
			   | existing report_writer_ info pointer with
			   | a caller provided one. The next time a
			   | standard report_writer_ request is invoked,
			   | it will get this new one.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - October 1984.

*/
%page;
rw_requests: proc;
%skip(3);
/* These parameters are described at each entry where they are used. */
%skip(3);
dcl code_parm fixed bin (35) parm;
dcl message_parm char (*) varying parm;
dcl report_writer_info_ptr_parm ptr parm;
dcl sci_ptr_parm ptr parm;
dcl subsystems_info_ptr_parm ptr parm;
%skip(3);
	call com_err_ (error_table_$badcall, "rw_requests");
%skip(1);
	return;
%page;
column_value: entry (

	sci_ptr_parm,	         /* input: ptr to the ssu_ info structure */
	subsystems_info_ptr_parm     /* input: ptr to the subsystems info */
	         );
%skip(3);
	call load_report_control_info_ptr (DONT_REFRESH_THE_AREA);
	call rw_column_value (sci_ptr, report_cip);
%skip(1);
	return;
%page;
delete_report_info_ptr: entry (

	sci_ptr_parm	         /* input: ssu_ info pointer */
			    );
%skip(1);
dcl drip_loop fixed bin;
dcl drip_pointer_number fixed bin;
%skip(1);
	sci_ptr = sci_ptr_parm;
	drip_pointer_number = 0;
%skip(1);
	do drip_loop = 1 to report_writer_info.number_of_pointers
	     while (drip_pointer_number = 0);
	     if sci_ptr = report_writer_info.pointers (drip_loop).ssu
	     then drip_pointer_number = drip_loop;
	end;
%skip(1);
	if drip_pointer_number = 0
	then call ssu_$abort_line (sci_ptr, error_table_$fatal_error,
	     "^/Unable to delete the report writer info pointer.");
	report_writer_info.number_of_pointers
	     = report_writer_info.number_of_pointers - 1;
	if drip_pointer_number = report_writer_info.number_of_pointers + 1
	then return;
%skip(1);
	do drip_loop = drip_pointer_number to report_writer_info.number_of_pointers;
	     report_writer_info.pointers (drip_loop).ssu
		= report_writer_info.pointers (drip_loop + 1).ssu;
	     report_writer_info.pointers (drip_loop).report_writer
		= report_writer_info.pointers (drip_loop + 1).report_writer;
	end;
%skip(1);
	return;
%page;
display: entry (

	sci_ptr_parm,	         /* input: ptr to the ssu_ info structure */
	subsystems_info_ptr_parm     /* input: ptr to the subsystems info */
	    );
%skip(3);
	call load_report_control_info_ptr (DONT_REFRESH_THE_AREA);
	call rw_display (sci_ptr, report_cip);
%skip(1);
	return;
%page;
display_builtins: entry (

	sci_ptr_parm,	         /* input: ptr to the ssu_ info structure */
	subsystems_info_ptr_parm     /* input: ptr to the subsystems info */
		   );
%skip(3);
	call load_report_control_info_ptr (DONT_REFRESH_THE_AREA);
	call rw_display_builtins (sci_ptr, report_cip);
%skip(1);
	return;
%page;
list_format_options: entry (

	sci_ptr_parm,	         /* input: ptr to the ssu_ info structure */
	subsystems_info_ptr_parm     /* input: ptr to the subsystems info */
		      );
%skip(3);
	call load_report_control_info_ptr (REFRESH_THE_AREA);
	call rw_list_format_options (sci_ptr, report_cip);
%skip(1);
	return;
%page;
restore_format_options: entry (

	sci_ptr_parm,	         /* input: ptr to the ssu_ info structure */
	subsystems_info_ptr_parm     /* input: ptr to the subsystems info */
		         );
%skip(3);
	call load_report_control_info_ptr (DONT_REFRESH_THE_AREA);
	call rw_restore_format_options (sci_ptr, report_cip);
%skip(1);
	return;
%page;
save_format_options: entry (

	sci_ptr_parm,	         /* input: ptr to the ssu_ info structure */
	subsystems_info_ptr_parm     /* input: ptr to the subsystems info */
		      );
%skip(3);
	call load_report_control_info_ptr (REFRESH_THE_AREA);
	call rw_save_format_options (sci_ptr, report_cip);
%skip(1);
	return;
%page;
set_initial_report_info_ptr: entry (

	sci_ptr_parm,	         /* input: ssu_ info pointer */
	report_writer_info_ptr_parm, /* input: points to report_control_info structure */
	code_parm		    /* output: success or failure */
			    );
%skip(1);
	if report_writer_info.number_of_pointers + 1
	> hbound (report_writer_info.pointers, 1)
	then do;
	     code_parm = error_table_$fatal_error;
	     return;
	end;
	else code_parm = 0;
	report_writer_info.pointers (report_writer_info.number_of_pointers + 1).ssu
	     = sci_ptr_parm;
	report_writer_info.pointers (report_writer_info.number_of_pointers + 1).report_writer
	     = report_writer_info_ptr_parm;
	report_writer_info.number_of_pointers = report_writer_info.number_of_pointers + 1;
%skip(1);
	return;
%page;
set_format_options: entry (

	sci_ptr_parm,	         /* input: ptr to the ssu_ info structure */
	subsystems_info_ptr_parm     /* input: ptr to the subsystems info */
		     );
%skip(3);
	call load_report_control_info_ptr (REFRESH_THE_AREA);
	call rw_set_format_options (sci_ptr, report_cip);
%skip(1);
	return;
%page;
set_report_writer_info_ptr: entry (

	report_writer_info_ptr_parm, /* input: points to report_control_info structure */
	sci_ptr_parm,	         /* input: ssu_ info pointer */
	code_parm,	         /* output: success or failure */
	message_parm	         /* output: reason for the failure */
			    );
%skip(1);
dcl srwip_loop fixed bin;
%skip(1);
	code_parm = 0;
	message_parm = "";
%skip(1);
	do srwip_loop = 1 to report_writer_info.number_of_pointers;
	     if report_writer_info.pointers (srwip_loop).ssu = sci_ptr_parm
	     then do;
		report_writer_info.pointers (srwip_loop).report_writer
		     = report_writer_info_ptr_parm;
		return;
	     end;
	end;
%skip(1);
	code_parm = rw_error_$no_ssu_ptr_match;
	message_parm = "^/The current report_writer_ info pointer will be retained.";
%skip(1);
	return;
%page;
load_report_control_info_ptr: proc (

	lrcip_refresh_the_area_parm /* input: ON means to refresh the area */
	);
%skip(1);
dcl lrcip_loop fixed bin;
dcl lrcip_not_found bit (1) aligned;
dcl lrcip_refresh_the_area_parm bit (1) aligned parm;
%skip(1);
	sci_ptr = sci_ptr_parm;
%skip(1);
	lrcip_not_found = "1"b;
	do lrcip_loop = 1 to report_writer_info.number_of_pointers
	     while (lrcip_not_found);
	     if report_writer_info.pointers (lrcip_loop).ssu = sci_ptr
	     then do;
		report_cip = report_writer_info.pointers (lrcip_loop).report_writer;
		lrcip_not_found = "0"b;
	     end;
	end;
	if lrcip_not_found
	then call ssu_$abort_line (sci_ptr, rw_error_$logic_error,
	     "^/Unable to find the report writer info pointer for the request.");
%skip(1);
	if lrcip_refresh_the_area_parm
	then do;
	     call ssu_$release_area (sci_ptr, report_control_info.name_value_area_ptr);
	     call ssu_$get_area (sci_ptr, report_control_info.area_info_ptr,
		"rw_.names_and_values_area", report_control_info.name_value_area_ptr);
	end;
%skip(1);
	return;
%skip(1);
     end load_report_control_info_ptr;
%page;
dcl DONT_REFRESH_THE_AREA bit (1) aligned internal static options (constant) init ("0"b);
%skip(1);
dcl REFRESH_THE_AREA bit (1) aligned internal static options (constant) init ("1"b);
%skip(1);
dcl com_err_ entry() options(variable);
%skip(1);
dcl error_table_$badcall fixed bin(35) ext static;
dcl error_table_$fatal_error fixed bin(35) ext static;
%skip(1);
dcl hbound builtin;
%skip(1);
dcl names_and_values_area_ptr ptr;
dcl null builtin;
%skip(1);
dcl 1 report_writer_info aligned internal static,
      2 number_of_pointers fixed bin init (0),
      2 pointers (512),
        3 ssu ptr,
        3 report_writer ptr;
dcl rw_column_value entry (ptr, ptr);
dcl rw_display entry (ptr, ptr);
dcl rw_display_builtins entry (ptr, ptr);
dcl rw_error_$logic_error fixed bin(35) ext static;
dcl rw_error_$no_ssu_ptr_match fixed bin(35) ext static;
dcl rw_list_format_options entry (ptr, ptr);
dcl rw_restore_format_options entry (ptr, ptr);
dcl rw_save_format_options entry (ptr, ptr);
dcl rw_set_format_options entry (ptr, ptr);
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$get_area entry (ptr, ptr, char(*), ptr);
dcl ssu_$release_area entry (ptr, ptr);
%page;
%include rw_options_extents;
%page;
%include rw_report_info;
%skip(3);
     end rw_requests;
