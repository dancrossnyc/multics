/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     report_writer_ column_value request. Description and usage follows.

     Description:

     This active request returns the value of the current column, the
     previous column, or the next column. The column is named by the
     caller. If subtotals or totals are being generated, the subtotal
     or total for the referenced column is returned.
     
     Usage: "column_value STR {-control_args}"

     where STR is the name or number of the desired column.

     -control_args can be "-current_row", "-next_row", "-previous_row",
     or "-default STR".

     Both parameters are passed to this request by ssu_.


     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983
     Changed - Al Dupuis - October 1984 Became report_writer_. 

*/
%page;
rw_column_value: proc (

	sci_ptr_parm,    /* input: ptr to the ssu_ info structure */
	report_cip_parm  /* input: points to report_control_info */
		     );
%skip(3);
dcl report_cip_parm ptr parm;
dcl sci_ptr_parm ptr parm;
%skip(3);
	call initialize;
	call verify_column_name_or_number;
	if status.flags.subtotals_ejection_in_progress
	then call get_subtotal_value;
	else if status.flags.totals_ejection_in_progress
	     then call get_total_value;
	     else call get_column_value;
%skip(1);
	spare_string_length = length (spare_string);
	spare_string_redefined_ptr = addrel (addr (spare_string), 1);
	return_value = requote_string_ (spare_string_redefined_as_nonvarying);
%skip(1);
	return;
%page;
get_column_value: proc;
%skip(3);
	if (status.flags.first_row_of_report & previous_row)
	| (status.flags.last_row_of_report & next_row)
	then do;
	     spare_string = default_return_value;
	     return;
	end;
%skip(1);
	if previous_row
	then the_row_value_ptr = status.previous_row_ptr;
	else if next_row
	     then the_row_value_ptr = status.next_row_ptr;
	     else the_row_value_ptr = status.current_row_ptr;
%skip(1);
	spare_string = substr (the_row_value,
	     table_info.columns.column_index (column_number),
	     table_info.columns.column_length (column_number));
%skip(1);
	return;
%skip(1);
     end get_column_value;
%page;
get_subtotal_value: proc;
%skip(3);
	not_found = ON;
	subtotal_ip = format_report_info.subtotal_info_ptr;
%skip(1);
	do loop = 1 to subtotal_info.number_of_columns_to_subtotal
	     while (not_found);
	     if column_number = subtotal_info.columns (loop).input_column
	     & subtotal_info.columns (loop).level = subtotal_info.current_level
	     then do;
		not_found = OFF;
		subtotal_number = loop;
	     end;
	end;
	if not_found
	then do;
	     call get_column_value;
	     return;
	end;
%skip(1);
	call ioa_$rsnnl (subtotal_info.columns.ioa_string (subtotal_number),
	     spare_string, spare_string_length,
	     subtotal_info.columns.subtotal (subtotal_number));
%skip(1);
	return;
%skip(1);
     end get_subtotal_value;
%page;
get_total_value: proc;
%skip(3);
	not_found = ON;
	total_ip = format_report_info.total_info_ptr;
%skip(1);
	do loop = 1 to total_info.number_of_columns_to_total
	     while (not_found);
	     if column_number = total_info.input_column (loop)
	     then do;
		not_found = OFF;
		total_number = loop;
	     end;
	end;
	if not_found
	then do;
	     call get_column_value;
	     return;
	end;
%skip(1);
	call ioa_$rsnnl (total_info.columns.ioa_string (total_number),
	     spare_string, spare_string_length,
	     total_info.columns.total (total_number));
%skip(1);
	return;
%skip(1);
     end get_total_value;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	report_cip = report_cip_parm;
%skip(1);
	next_row = OFF;
	previous_row = OFF;
	current_row = ON;
	default_return_value = "";
%skip(1);
	call ssu_$return_arg (sci_ptr, number_of_args_supplied,
	     active_request_flag, return_value_ptr, return_value_length);
	if number_of_args_supplied = 0
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
	     "A column name or number must be supplied.");
%skip(1);
	if report_cip = null ()
	then call ssu_$abort_line (sci_ptr, rw_error_$no_report);
	else if ^report_control_info.flags.report_has_been_started
	     then call ssu_$abort_line (sci_ptr, rw_error_$no_report);
%skip(1);
	format_report_ip = report_control_info.format_report_info_ptr;
	table_ip = format_report_info.table_info_ptr;
	table_control_ip = report_control_info.table_control_info_ptr;
	table_segments_ip = table_control_info.table_segments_info_ptr;
	status_pointer = format_report_info.status_ptr;
%skip(1);
          call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	column_identifier = arg;
%skip(1);
	if number_of_args_supplied = 1
	then return;
%page;
	current_arg_number = 2;
	still_processing_args = ON;
%skip(1);
	do loop = 2 to number_of_args_supplied
	     while (still_processing_args);
	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	     if arg = "-current_row" | arg = "-crw"
	     then do;
		current_row = ON;
		previous_row = OFF;
		next_row = OFF;
	     end;
	     else if arg = "-next_row" | arg = "-nrw"
		then do;
		     next_row = ON;
		     current_row = OFF;
		     previous_row = OFF;
		end;
		else if arg = "-previous_row" | arg = "-prw"
		     then do;
			previous_row = ON;
			current_row = OFF;
			next_row = OFF;
		     end;
		     else if arg = "-default" | arg = "-df"
			then do;
			     if current_arg_number >= number_of_args_supplied
			     then call ssu_$abort_line (sci_ptr,
				error_table_$inconsistent,
				"-default must be followed by a value.");
			     else;
			     current_arg_number = current_arg_number + 1;
			     call ssu_$arg_ptr (sci_ptr, current_arg_number, 
				arg_ptr, arg_length);
			     default_return_value = arg;
			end;
			else call ssu_$abort_line (sci_ptr, 
			     error_table_$badopt,
			     "^a is not a valid control argument.", arg);
	     current_arg_number = current_arg_number + 1;
	     if current_arg_number > number_of_args_supplied
	     then still_processing_args = OFF;
	end;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
verify_column_name_or_number: proc;
%skip(3);
          if verify (column_identifier, DIGITS) = 0
	then do;
	     column_number = convert (column_number, column_identifier);
	     if column_number < 1
	     | column_number > table_info.column_count
	     then call ssu_$abort_line (sci_ptr, 0,
		"^d is not a valid column number.", column_number);
	     else;
	end;
	else do;
	     not_found = ON;
	     do loop = 1 to table_info.column_count while (not_found);
		if column_identifier = table_info.columns.column_name (loop)
		then do;
		     not_found = OFF;
		     column_number = loop;
		end;
	     end;
	     if not_found
	     then call ssu_$abort_line (sci_ptr, 0,
		"^a is not a valid column name.", column_identifier);
	end;
%skip(1);
	return;
%skip(1);
     end verify_column_name_or_number;
%page;
dcl DIGITS char (10) static int options (constant) init ("0123456789");
dcl OFF bit (1) aligned static int options (constant) init ("0"b);
dcl ON bit (1) aligned static int options (constant) init ("1"b);
%skip(1);
dcl active_request_flag bit (1) aligned;
dcl addr builtin;
dcl addrel builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl column_number fixed bin;
dcl column_identifier char (128) varying;
dcl convert builtin;
dcl current_arg_number fixed bin;
dcl current_row bit (1) aligned;
%skip(1);
dcl default_return_value char (128) varying;
%skip(1);
dcl error_table_$badopt fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$noarg fixed bin(35) ext static;
%skip(1);
dcl ioa_$rsnnl entry() options(variable);
%skip(1);
dcl length builtin;
dcl loop fixed bin;
%skip(1);
dcl next_row bit (1) aligned;
dcl not_found bit (1) aligned;
dcl null builtin;
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl previous_row bit (1) aligned;
%skip(1);
dcl requote_string_ entry (char(*)) returns(char(*));
dcl return_value char (return_value_length) varying based (return_value_ptr);
dcl return_value_length fixed bin (21);
dcl return_value_ptr ptr;
dcl rw_error_$no_report fixed bin(35) ext static;
%skip(1);
dcl sci_ptr ptr;
dcl spare_string char (MAXIMUM_OPTION_VALUE_LENGTH) varying;
dcl spare_string_length fixed bin (21);
dcl spare_string_redefined_as_nonvarying char (spare_string_length) based (spare_string_redefined_ptr);
dcl spare_string_redefined_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
dcl still_processing_args bit (1) aligned;
dcl substr builtin;
dcl subtotal_number fixed bin;
%skip(1);
dcl the_row_value char (table_info.row_value_length) based (the_row_value_ptr);
dcl the_row_value_ptr ptr;
dcl total_number fixed bin;
%skip(1);
dcl verify builtin;
%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include rw_options_extents;
%page;
%include rw_report_info;
%page;
%include rw_report_structures;
%page;
%include rw_table_info;
%page;
%include rw_table_control_info;
%skip(3);
     end rw_column_value;
