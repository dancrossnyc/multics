/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to create a link table for each component containing a
     list of the links and the target that they resolve to (if they resolve
     internally).
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_make_link_tbl_:
  proc (lecp,			/** component table ptr (i/o)	*/
       leshp,			/** seg hashtable ptr   (in ) */
       leap);			/** le_area pointer	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_make_link_tbl_				*/
  /***	Input:	lecp, leshp, leap				*/
  /***	Function:	creates the link table from the input components.	*/
  /***		The link table contains pointers to each type-4	*/
  /***		link in the input components and the index of the	*/
  /***		component containing the link.  It is used when	*/
  /***		resolving links and to determine which library	*/
  /***		components are included in the eventual output.	*/
  /***	Output:	lecp					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  dcl None		fixed bin static options (constant) init (0);

  /* parameters */

  dcl lecp		ptr parameter;
  dcl leshp		ptr parameter;
  dcl leap		ptr parameter;

  /* procedures */

  dcl hash_$search		entry (ptr, char (*), bit (36) aligned,
			fixed bin (35));
  dcl le_debug_		entry options (variable);
  dcl le_error_		entry options (variable);

  /* external */

  dcl error_table_$no_ext_sym external fixed bin (35);
  dcl le_et_$not_linkfault	external fixed bin (35);

  /* based */

  dcl le_area		area based (leap);
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;

  /* static */

  dcl 01 default_init	static aligned like link_init;
  dcl setup		bit (1) static init ("0"b);

  /* automatic */

  dcl c			fixed bin automatic;
  dcl head		fixed bin automatic;
  dcl tail		fixed bin automatic;

  /* builtin */

  dcl addr		builtin;
  dcl addrel		builtin;
  dcl fixed		builtin;
  dcl null		builtin;
  dcl rel			builtin;
  dcl size		builtin;
  dcl unspec		builtin;

  if ^setup
    then do;
      default_init.type = INIT_NO_INIT;
      default_init.n_words = 0;
      setup = true;
    end;

  call le_debug_ ("Beginning link resolution.");

  lec.comp (*).next_comp = None;

  /* thread all of the PATH components into the processing list initially */

  head = 1;
  tail = 1;
  lec.comp (1).flags.include = true;

  do c = 2 to lec.n_components while (^lec.comp (c).library);
    lec.comp (c - 1).next_comp = c;
    lec.comp (c).flags.include = true;
    tail = c;
  end;

  lec.comp (tail).next_comp = None;

  /* scan the processing list.  Any time a link resolves to a	*/
  /* component that is not already in the list, add it to the end of	*/
  /* the list and continue.					*/

  do while (head ^= None);

    /* process the links from this component and resolve the type-3	*/
    /* and type-4 links that can be snapped internally.		*/

    call get_links (lecp, leshp, head, tail);

    /* if there are components referenced by this one, then process	*/
    /* them as well before going on to the next input component.	*/

    head = lec.comp (head).next_comp;

  end;

  call le_debug_ ("Completed link resolution.^2/");

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_links:
  proc (lecp,			/** components pointer  (i/o)	*/
       leshp,			/** seg hashtable ptr   (in ) */
       c,				/** component index	    (in ) */
       tail);			/** comp list tail	    (i/o) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	get_links					*/
  /***	Input:	lecp, leshp, c, tail			*/
  /***	Function:	extracts link information from the linkage	*/
  /***		section of an input component and attempts to	*/
  /***		determine the target of each link.  When a link	*/
  /***		is chased to another component, that component	*/
  /***		is checked to see if it is to be included in the	*/
  /***		final output already.  If not, it is appended	*/
  /***		to the list of components to be processed.	*/
  /***	Output:	lecp, tail				*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lecp		ptr parameter;
  dcl leshp		ptr parameter;
  dcl c			fixed bin parameter;
  dcl tail		fixed bin parameter;

  /* based */

  dcl 01 lel		aligned based (lelp),
       02 header		aligned like le_links.header,
       02 link		dim (link_count refer (lel.n_links))
			like le_link;
  dcl 01 vlh		aligned like virgin_linkage_header based (vlhp);

  /* automatic */

  dcl dhp			ptr automatic;
  dcl end_offset		fixed bin (18) unsigned automatic;
  dcl found		bit (1) automatic;
  dcl index		fixed bin automatic;
  dcl lelp		ptr automatic;
  dcl linkp		ptr automatic;
  dcl offset		fixed bin (18) unsigned automatic;
  dcl start_offset		fixed bin (18) unsigned automatic;
  dcl t			fixed bin automatic;
  dcl vlhp		ptr automatic;

  /* get pointers to the definition and linkage sections */

  vlhp = lec.comp (c).orig.linkp;
  dhp = lec.comp (c).orig.defnp;

  /* find the end of the link array */

  end_offset = vlh.linkage_section_lng - size (object_link);

  if vlh.first_ref_relp ^= 0
    then end_offset = vlh.first_ref_relp - size (object_link);

  start_offset = vlh.link_begin;

  /* set the link start offset for this component */

  if start_offset > end_offset
    then do;
      link_count = 0;
      allocate lel in (le_area) set (lec.comp (c).tables.lelp);
      return;
    end;

  /* determine the number of links */

  link_count = (end_offset - start_offset) / size (object_link) + 1;

  /* allocate the link table */

  allocate lel in (le_area) set (lelp);
  lec.comp (c).tables.lelp = lelp;

  lel.offset_adjustment = start_offset - size (object_link);

  /* scan the link array and attempt to resolve each link */

  do index = 1 to link_count;
    offset = lel.offset_adjustment + (index + index);
    linkp = addrel (vlhp, offset);
    call process_link (lecp, leshp, linkp, dhp, c, index, t, found);

    /* if the link was resolved internally, see if the target	*/
    /* component is already included in the output		*/

    if found
      then do;

        /* if not already included, thread it into the processing	*/
        /* list and flag that it has been included.		*/

        if ^lec.comp (t).flags.include
	then do;

	  call le_debug_ ("Including library component ""^a""",
	       lec.comp (t).name);

	  lec.comp (tail).next_comp = t;
	  tail = t;
	  lec.comp (t).flags.include = true;
	  lec.comp (t).next_comp = None;
	end;
      end;
  end;

  end get_links;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


process_link:
  proc (lecp,			/** components pointer  (in )	*/
       leshp,			/** seg hashtable ptr   (in ) */
       linkp,			/** link to resolve	    (in ) */
       dhp,			/** def header pointer  (in ) */
       c,				/** component index	    (in ) */
       lx,			/** index of link	    (in ) */
       t,				/** target component    (out) */
       found);			/** found flag	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	process_link				*/
  /***	Input:	lecp, leshp, linkp, dhp, c, lx		*/
  /***	Function:	attempts to resolve a single link to a component	*/
  /***		in the component table. This involves identifying	*/
  /***		the component by searching the segname table and	*/
  /***		then searching the definitions for that component	*/
  /***		looking for a match.			*/
  /***	Output:	t, found					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lecp		ptr parameter;
  dcl leshp		ptr parameter;
  dcl linkp		ptr parameter;
  dcl dhp			ptr parameter;
  dcl c			fixed bin parameter;
  dcl lx			fixed bin parameter;
  dcl t			fixed bin parameter;
  dcl found		bit (1) parameter;

  /* based */

  dcl 01 exp		aligned like exp_word based (expp);
  dcl 01 init		aligned like link_init based (initp);
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 led		aligned based (ledp),
       02 header		aligned like le_definitions.header,
       02 def		dim (0 refer (led.n_defs)) like le_definition;
  dcl 01 lel		aligned based (lelp),
       02 header		aligned like le_links.header,
       02 link		dim (0 refer (lel.n_links)) like le_link;
  dcl 01 link		aligned like object_link based (linkp);
  dcl 01 lk		aligned like le_link based (lkp);
  dcl 01 offset_acc		aligned based (offset_accp),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (offset_acc.count)) unaligned;
  dcl 01 seg_acc		aligned based (seg_accp),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (seg_acc.count)) unaligned;
  dcl 01 seg_addr		aligned based (addr (seg_bits)),
       02 comp		fixed bin (17) unaligned,
       02 index		fixed bin (17) unaligned;
  dcl 01 tlel		aligned based (tlelp),
       02 header		aligned like le_links.header,
       02 link		dim (0 refer (tlel.n_links)) like le_link;
  dcl 01 tlk		aligned like le_link based (tlkp);
  dcl 01 type_pr		aligned like type_pair based (type_prp);

  /* automatic */

  dcl dx			fixed bin automatic;
  dcl ec			fixed bin (35) automatic;
  dcl expp		ptr automatic;
  dcl initp		ptr automatic;
  dcl ledp		ptr automatic;
  dcl lelp		ptr automatic;
  dcl lkp			ptr automatic;
  dcl offset		fixed bin (18) unsigned automatic;
  dcl offset_accp		ptr automatic;
  dcl seg_accp		ptr automatic;
  dcl seg_bits		bit (36) aligned automatic;
  dcl tc			fixed bin automatic;
  dcl tl			fixed bin automatic;
  dcl tlelp		ptr automatic;
  dcl tlkp		ptr automatic;
  dcl type_prp		ptr automatic;

  found = false;
  t = None;
  offset = fixed (rel (linkp), 18) -
       fixed (rel (lec.comp (c).orig.linkp), 18);

  /* make sure the link is actually an unsnapped link */

  if link.tag ^= FAULT_TAG_2
    then do;
      call le_error_ (LE_WARNING, le_et_$not_linkfault, "tag ^2o at link|^o",
	 link.tag, offset);
      return;
    end;

  /* get the type_pair and expression word */

  expp = addrel (dhp, link.expression_relp);
  type_prp = addrel (dhp, type_relp);

  lelp = lec.comp (c).tables.lelp;

  /* fill in the link table entry */

  lkp = addr (lel.link (lx));

  unspec (lk) = ""b;

  lk.flags.used = false;
  lk.type = type_pr.type;
  if type_pr.type = LINK_SELF_BASE | type_pr.type = LINK_SELF_OFFSETNAME
    then do;
      lk.class = type_pr.segname_relp;
      lk.segnamep = null;
    end;
    else do;
      lk.class = None;
      seg_accp, lk.segnamep = addrel (dhp, type_pr.segname_relp);
    end;
  if type_pr.type = LINK_SELF_BASE | type_pr.type = LINK_REFNAME_BASE
    then lk.offsetp = null;
    else offset_accp, lk.offsetp = addrel (dhp, type_pr.offsetname_relp);
  lk.mod = link.modifier;
  lk.exp = exp.expression;
  lk.target = None;
  lk.defx = None;
  lk.relp = None;
  lk.target_link = None;
  lk.target_comp = None;
  lk.extension = None;
  if type_pr.type = LINK_SELF_OFFSETNAME &
       (type_pr.segname_relp = CLASS_SYSTEM |
       type_pr.segname_relp = CLASS_HEAP)
    then if type_pr.trap_relp = 0
	 then lk.initp = addr (default_init);
	 else lk.initp = addrel (dhp, type_pr.trap_relp);
    else lk.initp = null;

  if type_pr.type = LINK_SELF_BASE
    then return;

  if type_pr.type = LINK_SELF_OFFSETNAME
    then do;

      /* we only deal with *system and *heap links */

      if type_pr.segname_relp < CLASS_SYSTEM
        then return;

      initp = lk.initp;

      /* we have a valid initialization so continue */

      if init.type ^= INIT_NO_INIT
        then do;

	/* flag that the link has been processed and return */

	lk.flags.used = true;
	return;
        end;

      do tc = 1 repeat lec.comp (tc).next_comp while (tc ^= None);

        /* get the link table for the component */

        tlelp = lec.comp (tc).tables.lelp;

        /* scan each link looking for a matching link */

        if tlelp ^= null
	then
	  do tl = 1 to tlel.n_links;
	  tlkp = addr (tlel.link (tl));

	  /* see if the link is to the same target */

	  if tlk.type = LINK_SELF_OFFSETNAME & tlk.class = lk.class
	    then do;

	      if tlk.offsetp -> acc_string.string = offset_acc.string
	        then do;

		/* if we find a valid init, we can return */

		initp = tlk.initp;
		if init.type ^= INIT_NO_INIT | lk.flags.used
		  then do;
		    lk.flags.used = true;
		    return;
		  end;
	        end;
	    end;
	end;
	else do;

	  if has_init (lecp, tc, lk.class, offset_accp)
	    then do;
	      lk.flags.used = true;
	      return;
	    end;
	end;

      end;

      /* if we get here, we have searched all of the linkage	*/
      /* sections for an init for this link and haven't found one,	*/
      /* so we now scan the unincluded components and include the	*/
      /* first component which has an initialization for this link	*/

      do tc = 1 to lec.n_components;

        /* only process unincluded components */

        if ^lec.comp (tc).flags.include
	then do;

	  if has_init (lecp, tc, lk.class, offset_accp)
	    then do;

	      t = tc;
	      found = true;
	      lk.flags.used = true;
	      return;
	    end;
	end;
      end;

      /* there is no initialization info for this link anywhere */

      lk.flags.used = true;
      return;

    end;

  /* if the link cannot be resolved to another component, just return */
  /* otherwise we search for a matching segname			*/

  call hash_$search (leshp, seg_acc.string, seg_bits, ec);
  if ec ^= 0
    then return;

  /* if not found, the link remains external */

  if type_pr.type = LINK_REFNAME_BASE
    then do;

      /* type-3 links resolve to the base of the text for the target seg */

      call le_debug_ (
	 "Resolved link ^a|0^/   in component ^a^/   to component ^a",
	 seg_acc.string, lec.comp (c).name,
	 lec.comp (seg_addr.comp).name);

      t, lk.target = seg_addr.comp;
      found = true;
      return;
    end;

  /* if we found the segname, now look for the definition name */

  offset_accp = addrel (dhp, type_pr.offsetname_relp);
  ledp = lec.comp (seg_addr.comp).tables.ledp;

  do dx = 1 to led.n_defs while (^found);
    if led.def (dx).str = offset_acc.string
      then do;

        /* found the definition, save the definition table index */

        call le_debug_ (
	   "Resolved link ^a$^a^/   in component ^a^/   to component ^a",
	   seg_acc.string, offset_acc.string, lec.comp (c).name,
	   lec.comp (seg_addr.comp).name);

        led.def (dx).flags.referenced = true;

        /* reference the definition to force library retention but	*/
        /* actually snap the link				*/

        if led.def (dx).flags.no_link
	then return;

        t, lk.target = seg_addr.comp;
        lk.defx = dx;
        found = true;
      end;
  end;

  if ^found
    then call le_error_ (LE_WARNING, error_table_$no_ext_sym,
	    "^/Could not find definition ""^a"" in ""^a"";" ||
	    " external link generated.", offset_acc.string, seg_acc.string);

  return;

  end process_link;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


has_init:
  proc (lecp,			/** component info ptr  (in )	*/
       c,				/** component index	    (in ) */
       class,			/** link class	    (in )	*/
       namep)			/** name acc string ptr (in )	*/
       returns (bit (1));		/** has init flag	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	has_init					*/
  /***	Input:	lecp, c, class, namep			*/
  /***	Function:	searches a linkage section for a particular	*/
  /***		*system or *heap link that has valid init info.	*/
  /***		(i.e. not INIT_NO_INIT)			*/
  /***	Output:	init_found_sw				*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lecp		ptr parameter;
  dcl c			fixed bin parameter;
  dcl class		fixed bin (6) unsigned unaligned parameter;
  dcl namep		ptr parameter;

  /* based */

  dcl 01 exp		aligned like exp_word based (expp);
  dcl 01 init		aligned like link_init based (initp);
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 link		aligned like object_link based (linkp);
  dcl 01 name		aligned based (namep),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (name.count)) unaligned;
  dcl 01 offset_acc		aligned based (offset_accp),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (offset_acc.count)) unaligned;
  dcl 01 type_pr		aligned like type_pair based (type_prp);
  dcl 01 vlh		aligned like virgin_linkage_header based (vlhp);
  
  /* automatic */

  dcl dhp			ptr automatic;
  dcl end_offset		fixed bin (18) unsigned automatic;
  dcl expp		ptr automatic;
  dcl initp		ptr automatic;
  dcl linkp		ptr automatic;
  dcl offset		fixed bin (18) unsigned automatic;
  dcl offset_accp		ptr automatic;
  dcl start_offset		fixed bin (18) unsigned automatic;
  dcl type_prp		ptr automatic;
  dcl vlhp		ptr automatic;
  
  /* get pointers to the definition and linkage sections */

  vlhp = lec.comp (c).orig.linkp;
  dhp = lec.comp (c).orig.defnp;

  /* find the end of the link array */

  end_offset = vlh.linkage_section_lng - size (link);

  if vlh.first_ref_relp ^= None
    then end_offset = vlh.first_ref_relp - size (link);

  start_offset = vlh.link_begin;

  /* look at each link in the linkage section */

  do offset = start_offset to end_offset by size (link);

    /* get the name, type, class, and init pointers */

    linkp = addrel (vlhp, offset);
    expp = addrel (dhp, link.expression_relp);
    type_prp = addrel (dhp, exp.type_relp);

    /* if the type and class are the same. . . */

    if type_pr.type = LINK_SELF_OFFSETNAME &
         type_pr.segname_relp = class &
         type_pr.trap_relp ^= None
      then do;

        /* check out the names . . . */

        offset_accp = addrel (dhp, type_pr.offsetname_relp);

        if name.string = offset_acc.string
	then do;

	  /* OK, the target is the same, see if this	*/
	  /* one has valid initialization.		*/

	  initp = addrel (dhp, type_pr.trap_relp);

	  if init.type ^= INIT_NO_INIT
	    then return (true);

	end;
      end;
  end;
  
  return (false);
  
  end has_init;
  

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include object_link_dcls;
%include definition_dcls;

  end le_make_link_tbl_;
