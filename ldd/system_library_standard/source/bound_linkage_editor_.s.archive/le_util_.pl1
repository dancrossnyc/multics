/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to provide utilities used by a number of le
     subroutines.
                                                   END HISTORY COMMENTS */

/*  format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_util_:
  proc;

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_util_					*/
  /***	Function:	This is a set of utility routines used in a	*/
  /***		number of places within le_			*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  dcl Expanded_Absolute	bit (5) static options (constant)
			init ("11110"b);
  dcl rel_chr		(0:10) char (1) static options (constant)
			init ("t", "1", "2", "3", "l", "d", "s", "7",
			"8", "i", "r");

  /* parameters */

  dcl a_user		char (*) parameter;
  dcl a_version		char (*) parameter;
  dcl a_relinfop		ptr parameter;
  dcl a_relindex		fixed bin parameter;
  dcl a_odd		bit (1) parameter;
  dcl a_skip		fixed bin parameter;
  dcl a_rel		char (*) parameter;
  dcl a_lebp		ptr parameter;
  dcl a_lecp		ptr parameter;
  dcl a_uid		aligned bit (36) parameter;

  /* procedures */

  dcl get_group_id_		entry () returns (char (32));
  dcl le_error_		entry options (variable);

  /* external */

  dcl le_data_$caller	external char (32) varying;
  dcl le_data_$version_suffix external char (64) varying;
  dcl le_et_$invalid_relinfo	external fixed bin (35);

  /* based */

  dcl 01 relinfo		aligned based (a_relinfop),
       02 decl_vers		fixed bin,
       02 n_bits		fixed bin,
       02 relbits		bit (0 refer (relinfo.n_bits)) aligned;
  dcl 01 leb		aligned based (a_lebp),
       02 header		aligned like le_binaries.header,
       02 binary		dim (0:0 refer (leb.n_binaries))
			like le_binaries.binary;
  dcl 01 lec		aligned based (a_lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;

  /* automatic */

  dcl b			fixed bin automatic;
  dcl c			fixed bin automatic;
  dcl 01 exp_abs		aligned automatic,
       02 type		bit (5) unaligned,
       02 count		fixed bin (10) unsigned unaligned;
  dcl found		bit (1) automatic;
  dcl halfwords		fixed bin automatic;
  dcl 01 non_abs		aligned automatic,
       02 flag		bit (1) unaligned,
       02 type		fixed bin (4) unsigned unaligned;

  /* builtin */

  dcl divide		builtin;
  dcl mod			builtin;
  dcl null		builtin;
  dcl rtrim		builtin;
  dcl substr		builtin;
  dcl unspec		builtin;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_user_and_version:
  entry (a_user,			/** userid string	    (out)	*/
       a_version);			/** version string	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_util_$get_user_and_version			*/
  /***	Input:	none					*/
  /***	Function:	returns the userid and version strings to be	*/
  /***		included in the symbol section as part of the	*/
  /***		symbol header.				*/
  /***	Output:	user, version				*/
  /***							*/
  /*** ****************************************************************/

  a_user = get_group_id_ ();
  a_version = rtrim (le_data_$caller) || rtrim (le_data_$version_suffix);

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


scan_relinfo:
  entry (a_relinfop,		/** reloc info pointer  (in )	*/
       a_relindex,			/** position in relinfo (i/o) */
       a_odd,			/** odd halfword flag   (i/o) */
       a_skip,			/** words to skip	    (out) */
       a_rel);			/** relinfo found	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_util_$scan_relinfo			*/
  /***	Input:	relinfop, relindex, odd			*/
  /***	Function:	scans a relinfo block starting at a particular	*/
  /***		point and returns the relocation information for	*/
  /***		the next word containing non-absolute relinfo, as	*/
  /***		well as the number of words to skip (ie. words	*/
  /***		with absolute relocation.)			*/
  /***	Output:	relindex, skip, rel				*/
  /***							*/
  /*** ****************************************************************/

  a_skip = 0;
  a_rel = "aa";

  /* handle adjustment for previous word containing part of an	*/
  /* absolute group.					*/

  if a_odd
    then halfwords = -1;
    else halfwords = 0;
  a_odd = false;
  found = false;

  /* scan for the next non-absolute halfword */

  do while ((a_relindex <= relinfo.n_bits) & ^found);
    if substr (relinfo.relbits, a_relindex, 1) = "0"b
      then do;
        halfwords = halfwords + 1;
        a_relindex = a_relindex + 1;
      end;
    else if substr (relinfo.relbits, a_relindex, 5) = Expanded_Absolute
      then do;
        unspec (exp_abs) = substr (relinfo.relbits, a_relindex, 15);
        a_relindex = a_relindex + 15;
        halfwords = halfwords + exp_abs.count;
      end;
    else found = true;
  end;

  /* calculate the number of words to skip */

  a_skip = divide (halfwords, 2, 18, 0);

  /* if we didn't run off the end, then we generate the relinfo for	*/
  /* non-absolute word.					*/

  if found
    then do;
      if mod (halfwords, 2) = 0
        then do;

	/* non-absolute halfword was in the left halfword, so get	*/
	/* the relinfo and insert it.				*/

	unspec (non_abs) = substr (relinfo.relbits, a_relindex, 5);
	if non_abs.type > 10
	  then call le_error_ (LE_FATAL_ERROR, le_et_$invalid_relinfo,
		  "^/Unknown relocation value (^d) found.", non_abs.type);
	  else substr (a_rel, 1, 1) = rel_chr (non_abs.type);
	a_relindex = a_relindex + 5;
        end;

      /* now process the right halfword */

      /* check for and absolute bit */

      if substr (relinfo.relbits, a_relindex, 1) = "0"b
        then a_relindex = a_relindex + 1;

      /* see if the right halfword is absolute but part of an	*/
      /* expanded absolute block, here we dont skip the block, just	*/
      /* set the odd flag to note next time that we have already	*/
      /* processed one bit of the expanded block.			*/

      else if substr (relinfo.relbits, a_relindex, 5) = Expanded_Absolute
        then a_odd = true;
      else do;

        /* the right halfword is not absolute */

        unspec (non_abs) = substr (relinfo.relbits, a_relindex, 5);
        if non_abs.type > 10
	then call le_error_ (LE_FATAL_ERROR, le_et_$invalid_relinfo,
		"^/Unknown relocation value (^d) found.", non_abs.type);
	else substr (a_rel, 2, 1) = rel_chr (non_abs.type);
        a_relindex = a_relindex + 5;
      end;
    end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


check_uid:
  entry (a_lecp,			/** components pointer  (in )	*/
       a_lebp,			/** binaries pointer    (in )	*/
       a_uid)			/** unique id	    (in ) */
       returns (bit (1));		/** duplicate flag	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_util_$check_uid				*/
  /***	Input:	lecp, lebp, uid				*/
  /***	Function:	compares a given uid (for a segment about to be	*/
  /***		overwritten) with the stored UIDs for the input	*/
  /***		components and already emitted output to insure	*/
  /***		that nothing is being destroyed.		*/
  /***	Output:	duplicate_flag				*/
  /***							*/
  /*** ****************************************************************/

  /* see if the file is the same as an input component */

  if a_lecp ^= null
    then
      do c = 1 to lec.n_components;
      if lec.comp (c).uid = a_uid
        then return (true);
    end;

  /* see if the file is the same as an output component */

  if a_lebp ^= null
    then
      do b = 1 to leb.n_binaries;
      if leb.binary (b).uid = a_uid
        then return (true);
    end;

  /* no match so return false */

  return (false);

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;

  end le_util_;

