/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to create the component table of input paths and
     library components to be included in the output object.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_make_comp_tbl_:
  proc (leip,			/** le_input ptr	    (in )	*/
       lecp);			/** comp_table ptr	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_make_comp_tbl_				*/
  /***	Input:	leip					*/
  /***	Function:	create the component table from the list of	*/
  /***		input components in the le_input structure.	*/
  /***	Output:	lecp					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);

  /* parameters */

  dcl leip		ptr parameter;
  dcl lecp		ptr parameter;

  /* procedures */

  dcl archive_$get_component_info
			entry (ptr, fixed bin (24), char (*), ptr,
			fixed bin (35));
  dcl cv_fstime_		entry (bit (36) aligned)
			returns (fixed bin (71));
  dcl expand_pathname_$component
			entry (char (*), char (*), char (*), char (*),
			fixed bin (35));
  dcl hcs_$status_long	entry (char (*), char (*), fixed bin (1), ptr,
			ptr, fixed bin (35));
  dcl le_error_		entry options (variable);
  dcl object_info_$long	entry (ptr, fixed bin (24), ptr,
			fixed bin (35));

  /* external */

  dcl le_et_$cant_delete_table
			external fixed bin (35);
  dcl le_et_$dup_global_table_opt
			external fixed bin (35);
  dcl le_et_$dup_input_component
			external fixed bin (35);
  dcl le_et_$dup_table_opt	external fixed bin (35);
  dcl le_et_$has_break_map	external fixed bin (35);
  dcl le_et_$nonrelocatable	external fixed bin (35);
  dcl le_et_$nonstandard_object
			external fixed bin (35);
  dcl le_et_$not_an_object	external fixed bin (35);

  /* based */

  dcl 01 comp		aligned like le_comp based (compp);
  dcl 01 lei		aligned based (leip),
       02 header		aligned like le_input.header,
       02 opt		dim (0 refer (lei.n_opts)) like le_option;
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 opt		aligned like le_option based (optp);
  dcl 01 ssb		aligned like sb based (ssbp);

  /* automatic */

  dcl 01 ac_info		aligned like archive_component_info automatic;
  dcl 01 br_info		aligned like status_branch automatic;
  dcl cn			char (32) automatic;
  dcl compp		ptr automatic;
  dcl cx			fixed bin automatic;
  dcl dn			char (168) automatic;
  dcl ec			fixed bin (35) automatic;
  dcl en			char (32) automatic;
  dcl ix			fixed bin automatic;
  dcl found		bit (1) automatic;
  dcl 01 oi		aligned like object_info;
  dcl optp		ptr automatic;
  dcl optx		fixed bin automatic;
  dcl sblkp		ptr automatic;
  dcl sbp			ptr automatic;
  dcl select_type		fixed bin automatic;
  dcl ssbp		ptr automatic;

  /* builtin */

  dcl addr		builtin;
  dcl addrel		builtin;
  dcl null		builtin;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


  oi.version_number = object_info_version_2;

  /* scan the option list for PATH or LIBRARY input */

  do select_type = PATH, LIBRARY;

    do optx = 1 to lei.n_opts;

      optp = addr (lei.opt (optx));

      if opt.type = select_type
        then do;

	found = false;

	do cx = 1 to lec.n_components while (^found);
	  if opt.optp = lec.comp (cx).segp
	    then found = true;
	end;

	if found
	  then call le_error_ (LE_ERROR, le_et_$dup_input_component,
		  "^a", opt.name);
	  else do;

	    /* get the object info for the segment */

	    call object_info_$long (opt.optp, opt.bc,
	         addr (oi), ec);

	    /* if it didn't work, complain and dont append anything */
	    /* to the component table.			*/

	    if ec ^= 0
	      then call le_error_ (LE_ERROR, le_et_$not_an_object, "^a",
		      opt.name);
	    else if ^found
	      then do;
	        if ^oi.format.standard

	        /* if the thing is an object but not in standard	*/
	        /* format, then we don't want to touch it	*/

		then call le_error_ (LE_ERROR,
			le_et_$nonstandard_object, "^a", opt.name);
	        else if ^oi.format.relocatable
		then call le_error_ (LE_ERROR, le_et_$nonrelocatable,
			"^a", opt.name);
	        else if oi.bmapp ^= null
		then call le_error_ (LE_ERROR, le_et_$has_break_map,
			"^a", opt.name);
	        else do;

		/* actually add the component to the table */

		cx, lec.n_components = lec.n_components + 1;

		compp = addr (lec.comp (cx));
		comp.name = opt.name;
		comp.path = opt.path_or_ep;
		comp.segp = opt.optp;
		comp.bc = opt.bc;
		comp.compiler = oi.compiler;
		call expand_pathname_$component ((comp.path), dn, en, cn,
		     ec);
		call hcs_$status_long (dn, en, 1, addr (br_info), null,
		     ec);
		comp.uid = br_info.uid;
		if cn ^= ""
		  then do;

		    /* get dtcm from archive for archive components */

		    ac_info.version = ARCHIVE_COMPONENT_INFO_VERSION_1;

		    call archive_$get_component_info (comp.segp,
		         (br_info.bit_count), cn, addr (ac_info), ec);
		    comp.dtcm = ac_info.time_modified;
		  end;

		  /* from file system for segments or entire archives */

		  else comp.dtcm = cv_fstime_ ((br_info.dtcm));

		comp.tables.lesp = null;
		comp.tables.ledp = null;
		comp.tables.lelp = null;

		comp.orig.textp = oi.textp;
		comp.orig.defnp = oi.defp;
		comp.orig.linkp = oi.linkp;
		comp.orig.statp = oi.statp;
		comp.orig.symbp = oi.symbp;
		comp.orig.rel_textp = oi.rel_text;
		comp.orig.rel_symbp = oi.rel_symbol;
		comp.orig.rel_linkp = oi.rel_link;
		comp.orig.text_boundary = oi.text_boundary;
		comp.orig.static_boundary = oi.static_boundary;
		comp.orig.textl = oi.tlng;
		comp.orig.defnl = oi.dlng;
		comp.orig.linkl = oi.llng;
		comp.orig.statl = oi.ilng;
		comp.orig.symbl = oi.slng;
		comp.orig.symbl_no_rel = oi.default_truncate;
		comp.orig.symbl_no_table = oi.optional_truncate;

		comp.flags.separate_static = oi.separate_static;

		/* see if the pathname is unique */

		found = false;
		do ix = optx + 1 to lei.n_opts while (^found);
		  if lei.opt (ix).type = opt.type &
		       lei.opt (ix).path_or_ep = opt.path_or_ep
		    then found = true;
		end;
		comp.flags.unique_path = ^found;

		/* if the option was a PATH option it is	*/
		/* forcibly included.  If it is a LIBRARY	*/
		/* option, things are still negotiable.	*/

		if opt.type = LIBRARY
		  then comp.flags.library = true;
		  else comp.flags.library = false;

		comp.flags.include = false;

		/* see if the table is required for language I/O */

		comp.flags.io_table = false;

		if oi.compiler = "v2pl1" | oi.compiler = "PL/I"
		  then do;
		    sbp = oi.symbp;
		    if sbp -> sb.area_ptr ^= ""b
		      then if addrel (sbp, sbp -> sb.area_ptr) ->
			      pl1_symbol_block.flags.io
			   then comp.flags.io_table = true;
		  end;


		/* see how many symbol blocks there are */

		comp.orig.n_symb_blocks = 1;
		ssbp = comp.orig.symbp;

		do while (ssb.next_block ^= ""b);
		  comp.orig.n_symb_blocks =
		       comp.orig.n_symb_blocks + 1;
		  ssbp = addrel (comp.orig.symbp, ssb.next_block);
		end;

		/* try to find an option specifying what we do	*/
		/* with the symbol table. First we try to find	*/
		/* a specific option for this component.	*/

		found = false;
		comp.flags.delete_table = false;

		do ix = 1 to lei.n_opts;
		  if (lei.opt (ix).type = TABLE |
		       lei.opt (ix).type = NO_TABLE) &
		       lei.opt (ix).name = comp.name &
		       ^lei.opt (ix).ignore
		    then if found
			 then do;

			   /* if this is the second such	*/
			   /* option, then complain that	*/
			   /* duplicates exist and mark the	*/
			   /* duplicate to be ignored.	*/

			   call le_error_ (LE_WARNING,
			        le_et_$dup_table_opt,
			        "table for ^a will be " ||
			        "^[deleted^;retained^].",
			        lei.opt (ix).name,
			        comp.flags.delete_table);
			   lei.opt (ix).flags.ignore = true;
			 end;
			 else do;

			   /* we have found an option, note	*/
			   /* that we have and set the	*/
			   /* delete_table flag		*/

			   found = true;
			   if lei.opt (ix).type = TABLE
			     then comp.flags.delete_table = false;
			     else comp.flags.delete_table = true;
			 end;
		end;

		/* if we have not found a specific option,	*/
		/* look for a global table or no_table option.	*/

		if ^found
		  then
		    do ix = 1 to lei.n_opts;

		    /* look for a global table or no_table option */

		    if (lei.opt (ix).type = TABLE |
		         lei.opt (ix).type = NO_TABLE) &
		         lei.opt (ix).name = "" &
		         ^lei.opt (ix).flags.ignore
		      then if found
			   then do;

			     /* if we already found one,	*/
			     /* then print a message and 	*/
			     /* flag the new one as ignored	*/

			     call le_error_ (LE_WARNING,
				le_et_$dup_global_table_opt,
				"Tables will be " ||
				"^[deleted^;retained^].",
				comp.flags.delete_table);
			     lei.opt (ix).flags.ignore = true;
			   end;
			   else do;

			     /* note that we have found a	*/
			     /* global option and set the	*/
			     /* delete_table flag		*/

			     found = true;
			     if lei.opt (ix).type = TABLE
			       then comp.flags.delete_table = false;
			       else comp.flags.delete_table = true;
			   end;
		  end;

		/* check to see if there is a conflict between	*/
		/* the user option and the requirements of the	*/
		/* runtime (ie. user wants table deleted but	*/
		/* it is needed for data-directed I/O)	*/

		if comp.flags.delete_table & comp.flags.io_table
		  then do;
		    call le_error_ (LE_WARNING,
		         le_et_$cant_delete_table, "^a", comp.name);
		    comp.flags.delete_table = false;
		  end;
	        end;
	      end;
	  end;
        end;
    end;
  end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include archive_component_info;
%include le_data;
%include le_input;
%include object_info;
%include pl1_symbol_block;
%include status_structures;
%include symbol_block;

  end le_make_comp_tbl_;
