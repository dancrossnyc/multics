/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to emit the definitions for a single component.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_emit_defs_:
  proc (ocudp,			/** ocu_data pointer    (in )	*/
       lecp,			/** components pointer  (i/o) */
       c);			/** component index	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_emit_defs_				*/
  /***	Input:	ocudp, lecp, c				*/
  /***	Function:	emits the definitions for a given component.	*/
  /***	Output:	lecp					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  dcl hdr_size		fixed bin static options (constant) init (8);

  /* parameters */

  dcl ocudp		ptr parameter;
  dcl lecp		ptr parameter;
  dcl c			fixed bin parameter;

  /* procedures */

  dcl le_error_		entry options (variable);
  dcl le_snap_		entry (ptr, ptr, fixed bin, fixed bin (3),
			uns fixed bin (18), uns fixed bin (18), bit (1),
			fixed bin (3), uns fixed bin (18), bit (6),
			bit (1));

  /* external */

  dcl error_table_$bad_class_def
			external fixed bin (35);

  /* based */

  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 les		aligned based (lesp),
       02 header		aligned like le_segnames.header,
       02 segname		dim (0 refer (les.n_segnames))
			like le_segnames.segname;
  dcl 01 led		aligned based (ledp),
       02 header		aligned like le_definitions.header,
       02 def		dim (0 refer (led.n_defs)) like le_definition;

  /* automatic */

  dcl chase		fixed bin automatic;
  dcl flags		bit (4) automatic;
  dcl ignore_block		bit (1) automatic;
  dcl internal		bit (1) automatic;
  dcl ledp		ptr automatic;
  dcl lelp		ptr automatic;
  dcl lesp		ptr automatic;
  dcl library		bit (1) automatic;
  dcl link_ref		bit (1) automatic;
  dcl modifier		bit (6) automatic;
  dcl new_relp		fixed bin (18) unsigned automatic;
  dcl relp		fixed bin (18) unsigned automatic;
  dcl section		fixed bin (3) automatic;
  dcl stat_relp		fixed bin (18) unsigned automatic;
  dcl symb_relp		fixed bin (18) unsigned automatic;
  dcl text_relp		fixed bin (18) unsigned automatic;
  dcl type		fixed bin automatic;

  /* builtin */

  dcl null		builtin;
  dcl rtrim		builtin;

  /* get the table pointers */

  lesp = lec.comp (c).tables.lesp;
  ledp = lec.comp (c).tables.ledp;
  lelp = lec.comp (c).tables.lelp;

  /* get the relocation counters */

  text_relp = lec.comp (c).new.rel_text;
  stat_relp = lec.comp (c).new.rel_stat;
  symb_relp = lec.comp (c).new.rel_symb;

  library = lec.comp (c).flags.library;

  ignore_block = true;

  /* see if any definitions in this block are being emitted */

  do chase = 1 to led.n_defs while (ignore_block);

    /* unreferenced library entrypoints are deleted regardless */

    if library & ^led.def (chase).flags.referenced
      then do;
        led.def (chase).flags.retain, led.def (chase).flags.no_link = false;
        led.def (chase).flags.delete = true;
      end;

    /* if we find a non-deleted entrypoint, then we keep the block */

    if led.def (chase).flags.retain & ^led.def (chase).flags.ignore
      then ignore_block = false;
  end;

  /* set the ignore flag for the segnames if we are ignoring the block */

  if ignore_block
    then flags = DEFINITION_FLAGS_IGNORE;
    else flags = ""b;

  /* emit the segnames for the block */

  do chase = 1 to les.n_segnames;
    les.segname (chase).relp = ocu_$emit_segname (ocudp,
         rtrim (les.segname (chase).str), flags);
  end;

  /* now emit the definitions in the block */

  do chase = 1 to led.n_defs;

    /* see if this definition should be emitted */

    if (^led.def (chase).delete & ^led.def (chase).ignore) |
         led.def (chase).force_retain
      then do;

        /* set the definition flags */

        if led.def (chase).flags.force_retain
	then flags = DEFINITION_FLAGS_RETAIN;
	else flags = ""b;
        if led.def (chase).flags.ignore | led.def (chase).flags.delete
	then flags = flags | DEFINITION_FLAGS_IGNORE;
        type = led.def (chase).type;

        /* handle the definition based on the target section */

        if type = Text
	then do;

	  /* text reference: relocate it and check to see if it is	*/
	  /* 		 an entrypoint.  Then emit it.	*/

	  relp = led.def (chase).relp + text_relp;
	  if led.def (chase).flags.entrypoint
	    then flags = flags | DEFINITION_FLAGS_ENTRY;
	  led.def (chase).new_offset = ocu_$emit_definition (ocudp,
	       led.def (chase).str, Text, relp, flags);
	end;
        else if type = Symbol
	then do;

	  /* symbol reference: just relocate and emit. */

	  relp = led.def (chase).relp + symb_relp;
	  led.def (chase).new_offset = ocu_$emit_definition (ocudp,
	       led.def (chase).str, Symbol, relp, flags);
	end;
        else if type = Static
	then do;

	  /* static reference: just relocate and emit. */

	  relp = led.def (chase).relp + stat_relp;
	  led.def (chase).new_offset = ocu_$emit_definition (ocudp,
	       led.def (chase).str, Static, relp, flags);
	end;
        else if type = Linkage
	then do;

	  /* linkage reference: see if it is actually a reference	*/
	  /*		    to combined static. If so, relocate	*/
	  /*		    and emit.  If not, we have a link	*/
	  /*		    reference, so we snap the link to	*/
	  /*		    remove excess indirection, but then	*/
	  /*		    we must insure that the target of	*/
	  /*		    the definition is a link, so if it	*/
	  /*		    did not resolve to the linkage	*/
	  /*		    section, we emit a type-1 link to	*/
	  /*		    the target and have the definition	*/
	  /*		    point there.			*/

	  if lec.comp (c).flags.separate_static
	    then link_ref = true;
	  else if led.def (chase).relp > hdr_size + lec.comp (c).orig.defnl
	    then link_ref = true;
	  else link_ref = false;

	  if ^link_ref
	    then do;

	      /* we have a reference to a combined static section	*/
	      /* so we convert it back to a static reference and	*/
	      /* emit the definition with the appropriate reloc	*/

	      relp = led.def (chase).relp + stat_relp - hdr_size;
	      led.def (chase).new_offset = ocu_$emit_definition (ocudp,
		 led.def (chase).str, Static, relp, flags);
	    end;
	    else do;

	      /* we have a reference to a link, which may indirect	*/
	      /* through another link (ie. a PASCAL exportable	*/
	      /* variable represented as a link.)  So we first see	*/
	      /* if this link was resolved somewhere, and if it is,	*/
	      /* we generate a type-1 (link-self-base) link to the	*/
	      /* eventual target.				*/

	      call le_snap_ (ocudp, lecp, c, Definition,
		 led.def (chase).offset + 1, relp, false, section,
		 new_relp, modifier, internal);
	      if section ^= Linkage
	        then new_relp = ocu_$emit_link (ocudp, Self_Base, section,
		        "", "", (new_relp), modifier, null);

	      led.def (chase).new_offset = ocu_$emit_definition (ocudp,
		 led.def (chase).str, Linkage, new_relp, flags);
	    end;
	end;
        else call le_error_ (LE_FATAL_ERROR, error_table_$bad_class_def,
	        "^/at def|^o in component ^a.", led.def (chase).offset,
	        lec.comp (c).name);
      end;
  end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include ocu_dcls;

  end le_emit_defs_;

