/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to generate a listing segment.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_create_list_:
  proc (lecp,			/** components pointer  (in )	*/
       lebp,			/** binaries pointer    (in ) */
       dname,			/** directory name	    (in ) */
       ename,			/** entry name	    (in ) */
       list);			/** map/list switch	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_create_list_				*/
  /***	Input:	lecp, lebp, dname, ename, list		*/
  /***	Function:	creates a listing segment detailing the inclusion	*/
  /***		and disposition of: input components, links, and	*/
  /***		definitions.  Degree of detail is determined by	*/
  /***		the list switch.				*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);

  dcl NL			char (1) static options (constant) init ("
");
  dcl section_name		(0:4) char (4) static options (constant)
			init ("text", "link", "symb", "****", "stat");

  /* parameters */

  dcl lecp		ptr parameter;
  dcl lebp		ptr parameter;
  dcl dname		char (*) parameter;
  dcl ename		char (*) parameter;
  dcl list		bit (1) parameter;

  /* procedures */

  dcl date_time_$format	entry (char (*), fixed bin (71), char (*),
			char (*)) returns (char (250) var);
  dcl get_shortest_path_	entry (char (*)) returns (char (168));
  dcl get_temp_segment_	entry (char (*), ptr, fixed bin (35));
  dcl hcs_$get_uid_seg	entry (ptr, bit (36) aligned, fixed bin (35));
  dcl initiate_file_$create	entry (char (*), char (*), bit (*), ptr,
			bit (1) aligned, fixed bin (24),
			fixed bin (35));
  dcl le_error_		entry options (variable);
  dcl le_util_$check_uid	entry (ptr, ptr, bit (36) aligned)
			returns (bit (1));
  dcl le_util_$get_user_and_version
			entry (char (*), char (*));
  dcl release_temp_segment_	entry (char (*), ptr, fixed bin (35));
  dcl terminate_file_	entry (ptr, fixed bin (24), bit (*),
			fixed bin (35));
  dcl hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*),
			fixed bin (35));
  dcl pathname_		entry (char (*), char (*)) returns (char (168));
  dcl expand_pathname_$add_suffix
			entry (char (*), char (*), char (*), char (*),
			fixed bin (35));

  /* external */

  dcl le_data_$caller	external char (32) varying;
  dcl le_et_$implementation_error
			external fixed bin (35);
  dcl le_et_$input_output_overlap
			external fixed bin (35);

  /* based */

  dcl 01 def_list		based,
       02 count		fixed bin,
       02 def		(0 refer (def_list.count)) like dl_entry;

  dcl 01 dl_entry		aligned based,
       02 name		char (32),
       02 offset		fixed bin (18) unsigned unaligned,
       02 comp		fixed bin (9) unsigned unaligned,
       02 section		fixed bin (3) unsigned unaligned,
       02 flags		unaligned,
        03 entrypoint	bit (1),
        03 indirect		bit (1),
        03 mbz		bit (4);

  dcl 01 link_list		aligned based,
       02 count		fixed bin,
       02 lk		(0 refer (link_list.count)) like ll_entry;

  dcl 01 ll_entry		aligned based,
       02 name		char (64),
       02 comp		fixed bin (18) unsigned unaligned,
       02 offset		fixed bin (18) unsigned unaligned,
       02 init_offset	fixed bin (18) unsigned unaligned,
       02 init_length	fixed bin (18) unsigned unaligned;

  /* automatic */

  dcl bc			fixed bin (24) automatic;
  dcl created		bit (1) aligned automatic;
  dcl ec			fixed bin (35) automatic;
  dcl listp		ptr automatic;
  dcl new_dname		char (168) automatic;
  dcl new_ename		char (168) automatic;
  dcl uid			bit (36) aligned automatic;

  /* conditions */

  dcl cleanup		condition;

  /* builtin */

  dcl addcharno		builtin;
  dcl addr		builtin;
  dcl addrel		builtin;
  dcl char		builtin;
  dcl clock		builtin;
  dcl copy		builtin;
  dcl divide		builtin;
  dcl fixed		builtin;
  dcl index		builtin;
  dcl length		builtin;
  dcl ltrim		builtin;
  dcl null		builtin;
  dcl rel			builtin;
  dcl reverse		builtin;
  dcl rtrim		builtin;
  dcl size		builtin;
  dcl string		builtin;
  dcl substr		builtin;
  dcl unspec		builtin;
  dcl verify		builtin;

  call expand_pathname_$add_suffix (ename, "list", new_dname, new_ename, ec);
  call initiate_file_$create (new_dname, new_ename, RW_ACCESS, listp,
       created, bc, ec);
  if ec ^= 0
    then do;
      call le_error_ (LE_ERROR, ec, "^/While creating listing file ^a.",
	 new_ename);
      return;
    end;

  call hcs_$get_uid_seg (listp, uid, ec);
  if le_util_$check_uid (lecp, lebp, uid)
    then call le_error_ (LE_ABORT_ERROR, le_et_$input_output_overlap,
	    "^/Listing file is the same as one of the input files," ||
	    "^/or the executable output.");

  bc = 0;

  call generate_map (listp, bc, lecp, lebp);
  if list
    then call generate_list (listp, bc, lecp, lebp);

  call terminate_file_ (listp, bc, TERM_FILE_TRUNC_BC_TERM, ec);

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


generate_map:
  proc (listp,			/** listing segment ptr (i/o)	*/
       bc,			/** segment bit count   (i/o) */
       lecp,			/** components pointer  (in ) */
       lebp);			/** binaries pointer    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	generate_map				*/
  /***	Input:	listp, bc, lecp, lebp			*/
  /***	Function:	generates the map portion of the le_ listing from	*/
  /***		information contained in the component table and	*/
  /***		binaries table.				*/
  /***	Output:	listp, bc					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl listp		ptr parameter;
  dcl bc			fixed bin (24) parameter;
  dcl lecp		ptr parameter;
  dcl lebp		ptr parameter;

  /* based */

  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 leb		aligned based (lebp),
       02 header		aligned like le_binaries.header,
       02 binary		dim (0:0 refer (leb.n_binaries))
			like le_binaries.binary;
  dcl 01 comp		aligned like le_comp based (compp);

  /* automatic */

  dcl compp		ptr automatic;
  dcl pn			char (168) automatic;
  dcl strp		ptr automatic;
  dcl dn			char (168) automatic;
  dcl dnl			fixed bin automatic;
  dcl en			char (32) automatic;
  dcl ec			fixed bin (35) automatic;
  dcl user		char (32) automatic;
  dcl version		char (128) automatic;
  dcl value		fixed bin (35) automatic;
  dcl comp_pic		pic "zz9" automatic;
  dcl b			fixed bin automatic;
  dcl 01 comp_info		aligned automatic,
       02 name		char (32) unaligned,
       02 pad1		char (1) unaligned,
       02 compiler		char (8) unaligned,
       02 pad2		char (2) unaligned,
       02 target		char (3) unaligned,
       02 start		char (7) unaligned,
       02 text_start	char (7) unaligned,
       02 stat_start	char (7) unaligned,
       02 symb_start	char (7) unaligned,
       02 nl_1		char (1) unaligned,
       02 pad3		char (10) unaligned,
       02 dtcm		char (36) unaligned,
       02 length		char (7) unaligned,
       02 text_length	char (7) unaligned,
       02 stat_length	char (7) unaligned,
       02 symb_length	char (7) unaligned,
       02 nl_2		char (1) unaligned;
  dcl c			fixed bin automatic;
  dcl col			fixed bin automatic;
  dcl symbolp		ptr automatic;
  dcl dtcm		fixed bin (71) automatic;

  strp = addcharno (listp, divide (bc, 9, 21, 0));
  col = 1;

  /* generate the listing header */

  call append (strp, bc, col, "Listing for ");

  call hcs_$fs_get_path_name (leb.binary (1).segp, dn, dnl, en, ec);
  if leb.n_binaries = 1
    then pn = pathname_ (substr (dn, 1, dnl), en);
    else pn = substr (dn, 1, dnl);

  call append (strp, bc, col, rtrim (pn) || NL);
  call append (strp, bc, col, "Created on ");
  call append (strp, bc, col, date_time_$format ("date_time", clock (),
       "", ""));
  call le_util_$get_user_and_version (user, version);
  call append (strp, bc, col, ", by " || rtrim (user) || NL);
  call append (strp, bc, col, "Using " || rtrim (version) || NL || NL);

  /* create the source_map listing */

  do c = 1 to lec.n_components;
    compp = addr (lec.comp (c));
    if comp.flags.include & comp.flags.unique_path
      then call append (strp, bc, col,
	      rtrim (get_shortest_path_ ((comp.path))) || NL);
  end;

  /* create the length listings */

  if leb.n_binaries > 1
    then call append (strp, bc, col, NL || "Comp ");
    else call append (strp, bc, col, (NL));

  call append (strp, bc, col,
       "        Object    Text    Defs    Link    Symb  Static" || NL);

  do b = 1 to leb.n_binaries;
    if leb.n_binaries > 1
      then do;
        comp_pic = b;
        call append (strp, bc, col, char (comp_pic) || "  ");
      end;
    call append (strp, bc, col, "Start        0  ");
    value = fixed (rel (leb.binary (b).textp), 18);
    call append (strp, bc, col, oct (value, 6, " ") || "  ");
    value = fixed (rel (leb.binary (b).defnp), 18);
    call append (strp, bc, col, oct (value, 6, " ") || "  ");
    value = fixed (rel (leb.binary (b).linkp), 18);
    call append (strp, bc, col, oct (value, 6, " ") || "  ");
    value = fixed (rel (leb.binary (b).symbp), 18);
    call append (strp, bc, col, oct (value, 6, " ") || "  ");
    value = fixed (rel (leb.binary (b).statp), 18);
    call append (strp, bc, col, oct (value, 6, " ") || NL);

    if leb.n_binaries > 1
      then call append (strp, bc, col, "     Length  ");
      else call append (strp, bc, col, "Length  ");

    call append (strp, bc, col,
         oct (divide (leb.binary (b).bc, 36, 18, 0), 6, " ") || "  ");
    call append (strp, bc, col, oct ((leb.binary (b).textl), 6, " ") || "  ");
    call append (strp, bc, col, oct ((leb.binary (b).defnl), 6, " ") || "  ");
    call append (strp, bc, col, oct ((leb.binary (b).linkl), 6, " ") || "  ");
    call append (strp, bc, col, oct ((leb.binary (b).symbl), 6, " ") || "  ");
    call append (strp, bc, col, oct ((leb.binary (b).statl), 6, " ") || NL);
  end;

  /* emit the per_component information */

  call append (strp, bc, col,
       NL || "Name                             Language ");
  if leb.n_binaries > 1
    then call append (strp, bc, col, "Comp        ");
    else call append (strp, bc, col, "            ");
  call append (strp, bc, col,
       "  Text Static Symbol" || NL);
  call append (strp, bc, col,
       "          Date Compiled" || NL);

  string (comp_info) = "";
  comp_info.start = "  start";
  comp_info.length = " length";
  comp_info.nl_1 = NL;
  comp_info.nl_2 = NL;

  do c = 1 to lec.n_components;
    compp = addr (lec.comp (c));

    if comp.flags.include
      then do;

        comp_info.name = comp.name;
        comp_info.compiler = comp.compiler;

        /* insert the component number only if there was more than 1	*/
        /* component					*/

        if leb.n_binaries > 1
	then do;
	  comp_pic = comp.target;
	  comp_info.target = comp_pic;
	end;
	else comp_info.target = "";
        symbolp = addrel (leb.binary (comp.target).symbp, comp.new.rel_symb);
        dtcm = symbolp -> std_symbol_header.object_created;
        comp_info.dtcm = date_time_$format ("date_time", dtcm, "", "");
        comp_info.text_start = oct ((comp.new.rel_text), 7, " ");
        comp_info.stat_start = oct ((comp.new.rel_stat), 7, " ");
        comp_info.symb_start = oct ((comp.new.rel_symb), 7, " ");
        comp_info.text_length = oct ((comp.orig.textl), 7, " ");
        comp_info.stat_length = oct ((comp.orig.statl), 7, " ");
        comp_info.symb_length = oct ((comp.orig.symbl), 7, " ");
        call append (strp, bc, col, string (comp_info));
      end;
  end;

  end generate_map;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


generate_list:
  proc (listp,			/** list segment ptr    (i/o)	*/
       bc,			/** segment bit count   (i/o) */
       lecp,			/** components pointer  (in )	*/
       lebp);			/** binaries pointer    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	generate_list				*/
  /***	Input:	listp, bc, lecp, lebp			*/
  /***	Function:	generates the extended listing.  (after the basic	*/
  /***		map listing.)  This includes the link resolution	*/
  /***		information and definition information.		*/
  /***	Output:	listp, bc					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl listp		ptr parameter;
  dcl bc			fixed bin (24) parameter;
  dcl lecp		ptr parameter;
  dcl lebp		ptr parameter;

  /* based */

  dcl 01 acc		aligned based (accp),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (acc.count)) unaligned;
  dcl 01 dl		aligned based (scratchp),
       02 count		fixed bin,
       02 def		dim (0 refer (dl.count)) like def_list.def;
  dcl 01 def		aligned like definition based (defp);
  dcl 01 leb		aligned based (lebp),
       02 header		aligned like le_binaries.header,
       02 binary		dim (0:0 refer (leb.n_binaries))
			like le_binaries.binary;
  dcl 01 lk		aligned like object_link based (lkp);
  dcl 01 ll		aligned based (scratchp),
       02 count		fixed bin,
       02 lk		dim (0 refer (ll.count)) like link_list.lk;
  dcl 01 sn		aligned like segname_definition based (defp);
  dcl 01 vlh		aligned like virgin_linkage_header based (vlhp);
  dcl 01 plk		aligned like partial_link based (plkp);
  dcl word		fixed bin (35) based;

  /* automatic */

  dcl accp		ptr automatic;
  dcl col			fixed bin automatic;
  dcl defnp		ptr automatic;
  dcl linkp		ptr automatic;
  dcl defp		ptr automatic;
  dcl plkp		ptr automatic;
  dcl scratchp		ptr automatic;
  dcl strp		ptr automatic;
  dcl msf_sw		bit (1) automatic;
  dcl d			fixed bin automatic;
  dcl b			fixed bin automatic;
  dcl l			fixed bin automatic;
  dcl vlhp		ptr automatic;
  dcl dhp			ptr automatic;
  dcl lk_start		fixed bin (18) unsigned automatic;
  dcl lk_end		fixed bin (18) unsigned automatic;
  dcl offset		fixed bin (18) unsigned automatic;
  dcl lkp			ptr automatic;
  dcl count		fixed bin automatic;

  scratchp = null;

  on cleanup
    begin;
    if scratchp ^= null
      then call release_temp_segment_ ((le_data_$caller), scratchp, 0);
  end;

  call get_temp_segment_ ((le_data_$caller), scratchp, ec);

  strp = addcharno (listp, divide (bc, 9, 21, 0));
  col = 1;

  if leb.n_binaries > 1
    then msf_sw = true;
    else msf_sw = false;

  /* emit the definition list */

  if msf_sw
    then do;
      defnp = leb.binary (0).defnp;
      linkp = leb.binary (0).linkp;
    end;
    else defnp = leb.binary (1).defnp;

  /* count the number of visible definitions */

  count = 0;

  do defp = addrel (defnp, defnp -> definition_header.def_list_relp)
       repeat addrel (defnp, def.forward_relp)
       while (defp -> word ^= 0);
    if ^def.flags.ignore
      then count = count + 1;
  end;

  call append (strp, bc, col, NL || NL || ltrim (rtrim (char (count))));
  call append (strp, bc, col, " Definitions:" || NL);

  dl.count = -1;

  do defp = addrel (defnp, defnp -> definition_header.def_list_relp)
       repeat addrel (defnp, def.forward_relp)
       while (defp -> word ^= 0);
    if def.class = 3 & ^def.flags.ignore
      then do;

        /* we have found a segname, so sort any pending definitions	*/
        /* and print them out, zero the count, and print the segname	*/

        if dl.count ^= 0
	then do;
	  if dl.count > 0
	    then call print_defs (scratchp, msf_sw, strp, bc, col);
	    else dl.count = 0;

	  accp = addrel (defnp, def.name_relp);

	  if sn.first_relp ^= sn.forward_relp
	    then call append (strp, bc, col, NL || NL || "segnames: ");
	    else call append (strp, bc, col, NL || NL || "segname:  ");
	  call append (strp, bc, col, acc.string || NL);

	end;
	else do;

	  /* another segname on a block, just indent and display */

	  accp = addrel (defnp, def.name_relp);
	  call append (strp, bc, col, "          " || acc.string || NL);
	end;
      end;
    else if ^def.flags.ignore
      then do;

        /* a non-segname definition, so we add it to the table to be	*/
        /* sorted and printed.				*/

        d, dl.count = dl.count + 1;
        accp = addrel (defnp, def.name_relp);
        dl.def (d).name = acc.string;

        if def.flags.indirect
	then do;

	  /* for indirect definitions, we get the target info from	*/
	  /* the partial link to the actual target in another	*/
	  /* component					*/

	  dl.def (d).flags.indirect = true;
	  plkp = addrel (linkp, def.thing_relp);
	  dl.def (d).comp = plk.component;
	  dl.def (d).offset = plk.offset;
	  dl.def (d).section = plk.type;
	end;
	else do;

	  /* for non-indirect definitions we get the info from the	*/
	  /* definition itself.				*/

	  dl.def (d).comp = 0;
	  dl.def (d).flags.indirect = false;
	  dl.def (d).offset = def.thing_relp;
	  dl.def (d).section = def.class;
	end;
        dl.def (d).flags.entrypoint = def.flags.entry;
      end;
  end;

  /* now sort and print the definitions for the last block */

  if dl.count > 0
    then call print_defs (scratchp, msf_sw, strp, bc, col);

  ll.count = 0;

  do b = 1 to leb.n_binaries;
    vlhp = leb.binary (b).linkp;
    dhp = leb.binary (b).defnp;
    lk_start = vlh.link_begin;
    if vlh.first_ref_relp ^= 0
      then lk_end = vlh.first_ref_relp;
      else lk_end = vlh.linkage_section_lng;

    do offset = lk_start to lk_end;
      lkp = addrel (vlhp, offset);
      if lk.tag = FAULT_TAG_2
        then do;
	l, ll.count = ll.count + 1;
	ll.lk (l).comp = b;
	ll.lk (l).offset = offset;
	call get_link_info (lkp, dhp, addr (ll.lk (l)));
        end;
    end;

  end;

  call print_links (scratchp, msf_sw, strp, bc, col);

  call release_temp_segment_ ((le_data_$caller), scratchp, ec);

  end generate_list;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


print_defs:
  proc (dlp,			/** def list pointer    (in )	*/
       msf_sw,			/** MSF swtich	    (in )	*/
       strp,			/** list file pointer   (i/o) */
       bc,			/** list file bit count (i/o) */
       col);			/** display column	    (i/o) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	print_defs				*/
  /***	Input:	dlp, msf_sw, strp, bc, col			*/
  /***	Function:	sorts and prints out the definition list.	*/
  /***	Output:	strp, bc					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl dlp			ptr parameter;
  dcl msf_sw		bit (1) parameter;
  dcl strp		ptr parameter;
  dcl bc			fixed bin (24) parameter;
  dcl col			fixed bin parameter;

  /* based */

  dcl 01 dl		aligned based (dlp),
       02 count		fixed bin,
       02 def		dim (0 refer (dl.count)) like def_list.def;

  /* automatic */

  dcl i			fixed bin automatic;
  dcl addr		char (20) varying automatic;
  dcl fixed_addr		char (20) automatic;
  dcl temp		(1:size (dl_entry)) fixed bin (35) automatic;

  /* perform a heapsort on the definition list before printing it */

  do i = divide (dl.count, 2, 17, 0) by -1 to 1;
    call adjust_heap (dlp, i, dl.count, size (dl_entry));
  end;

  do i = dl.count to 2 by -1;
    unspec (temp) = unspec (dl.def (i));
    unspec (dl.def (i)) = unspec (dl.def (1));
    unspec (dl.def (1)) = unspec (temp);
    call adjust_heap (dlp, 1, i - 1, size (dl_entry));
  end;

  /* now scan the sorted list and print out the definition list */

  do i = 1 to dl.count;

    /* print each definition entry */

    call append (strp, bc, col, (NL));

    /* we only print the component, if there is more than one */

    if msf_sw
      then addr = "(" || ltrim (rtrim (char (dl.def (i).comp))) || ")";
      else addr = "";

    /* produce the rest of the address field */

    addr = addr || section_name (dl.def (i).section) || "|";
    addr = addr || oct ((dl.def (i).offset), -1, " ");
    fixed_addr = addr;

    /* display the address */

    call append (strp, bc, col, (fixed_addr));

    /* display the name */

    if dl.def (i).flags.indirect | dl.def (i).flags.entrypoint
      then call append (strp, bc, col, (dl.def (i).name));
      else call append (strp, bc, col, rtrim (dl.def (i).name));

    /* display the flags (if any) */

    if dl.def (i).flags.indirect
      then call append (strp, bc, col, " Indirect");
    if dl.def (i).flags.entrypoint
      then call append (strp, bc, col, " Entrypoint");
  end;

  dl.count = 0;

  end print_defs;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_link_info:
  proc (lkp,			/** link pointer	    (in )	*/
       dhp,			/** def header pointer  (in ) */
       lep);			/** link list entry ptr (i/o)	*/

  /*** ****************************************************************/
  /***							*/
  /***	Name:	get_link_info				*/
  /***	Input:	lkp, dhp, lep				*/
  /***	Function:	extracts information about a link and enters it	*/
  /***		into a link list entry.			*/
  /***	Output:	lep					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lkp			ptr parameter;
  dcl dhp			ptr parameter;
  dcl lep			ptr parameter;

  /* based */

  dcl 01 lk		aligned like object_link based (lkp);
  dcl 01 le		aligned like ll_entry based (lep);
  dcl 01 init		aligned like link_init based (initp);
  dcl 01 exp		aligned like exp_word based (expp);
  dcl 01 tp		aligned like type_pair based (tpp);
  dcl 01 segname		aligned based (segnamep),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (segname.count)) unaligned;
  dcl 01 offsetname		aligned based (offsetnamep),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (offsetname.count)) unaligned;

  /* automatic */

  dcl expp		ptr automatic;
  dcl tpp			ptr automatic;
  dcl segnamep		ptr automatic;
  dcl offsetnamep		ptr automatic;
  dcl initp		ptr automatic;
  dcl nm			char (64) varying automatic;

  expp = addrel (dhp, lk.expression_relp);
  tpp = addrel (dhp, exp.type_relp);
  segnamep = addrel (dhp, tp.segname_relp);
  offsetnamep = addrel (dhp, tp.offsetname_relp);
  initp = addrel (dhp, tp.trap_relp);

  if tp.type = 1
    then nm = rtrim (SYMBOLIC_SECTION_NAMES (tp.segname_relp)) || "|0";
  else if tp.type = 3
    then nm = segname.string || "$";
  else if tp.type = 4
    then do;
      if segname.string = offsetname.string
        then nm = segname.string;
        else nm = segname.string || "$" || offsetname.string;
    end;
  else if tp.type = 5
    then nm = rtrim (SYMBOLIC_SECTION_NAMES (tp.segname_relp)) || "$" ||
	    offsetname.string;
  else if tp.type = 6
    then do;
      if segname.string = offsetname.string
        then nm = segname.string;
        else nm = segname.string || "$" || offsetname.string;
    end;
  else call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	  "^/Invalid link type (^d) found at ^p.", tp.type, lkp);

  if exp.expression > 0
    then nm = nm || "+" || oct ((exp.expression), -1, " ");
  if lk.modifier ^= ""b
    then nm = nm || "," || modifier (fixed (lk.modifier, 6, 0));

  le.name = nm;

  if (tp.type = 5 | tp.type = 6) & tp.trap_relp ^= 0
    then do;
      le.init_offset = tp.trap_relp;
      le.init_length = init.n_words;
    end;
    else do;
      le.init_offset = 0;
      le.init_length = 0;
    end;

%include op_mnemonic_format;

  end get_link_info;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


print_links:
  proc (llp,			/** link list pointer   (in )	*/
       msf_sw,			/** MSF switch	    (in ) */
       strp,			/** list seg pointer    (i/o) */
       bc,			/** list seg bit count  (i/o)	*/
       col);			/** display column	    (i/o) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	print_links				*/
  /***	Input:	llp, msf_sw, strp, bc, col			*/
  /***	Function:	sorts and prints out the list of retained links.	*/
  /***	Output:	strp, bc, col				*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl llp			ptr parameter;
  dcl msf_sw		bit (1) parameter;
  dcl strp		ptr parameter;
  dcl bc			fixed bin (24) parameter;
  dcl col			fixed bin parameter;

  /* based */

  dcl 01 ll		aligned based (llp),
       02 count		fixed bin,
       02 lk		dim (0 refer (ll.count)) like link_list.lk;

  /* automatic */

  dcl temp		(1:size (ll_entry)) fixed bin (35) automatic;
  dcl i			fixed bin automatic;
  dcl comp		char (5) varying automatic;
  dcl fixed_comp		char (5) automatic;
  dcl addr		char (12) varying automatic;
  dcl fixed_addr		char (12) automatic;
  dcl init		char (64) varying automatic;

  call append (strp, bc, col, NL || NL);

  do i = divide (ll.count, 2, 17, 0) by -1 to 1;
    call adjust_heap (llp, i, ll.count, size (ll_entry));
  end;

  do i = ll.count by -1 to 2;
    unspec (temp) = unspec (ll.lk (i));
    unspec (ll.lk (i)) = unspec (ll.lk (1));
    unspec (ll.lk (1)) = unspec (temp);
    call adjust_heap (llp, 1, i - 1, size (ll_entry));
  end;

  call append (strp, bc, col, NL || ltrim (rtrim (char (ll.count))));
  call append (strp, bc, col, " Links:" || NL || NL);

  do i = 1 to ll.count;
    if msf_sw
      then do;
        comp = "(" || rtrim (ltrim (char (ll.lk (i).comp))) || ")";
        fixed_comp = copy (" ", length (fixed_comp) - length (comp)) || comp;
        call append (strp, bc, col, (fixed_comp));
      end;
    addr = "link|" || oct ((ll.lk (i).offset), -1, " ");
    fixed_addr = addr;
    call append (strp, bc, col, fixed_addr || rtrim (ll.lk (i).name));

    if ll.lk (i).init_offset ^= 0
      then do;
        init = "  Init -> def|" || oct ((ll.lk (i).init_offset), -1, " ");
        init = init || ", length = ";
        init = init || ltrim (rtrim (char (ll.lk (i).init_length)));
        call append (strp, bc, col, init);
      end;

    call append (strp, bc, col, (NL));
  end;

  end print_links;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


adjust_heap:
  proc (heapp,			/** heap pointer	    (i/o)	*/
       top,			/** top node index	    (in ) */
       last,			/** end node index	    (in ) */
       n_words);			/** size of entry	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	adjust_heap				*/
  /***	Input:	heapp, top, last, n_words			*/
  /***	Function:	adjusts a heap structure so that a given node is	*/
  /***		always greater than both its children.		*/
  /***	Output:	heapp					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl heapp		ptr parameter;
  dcl top			fixed bin parameter;
  dcl last		fixed bin parameter;
  dcl n_words		fixed bin parameter;

  /* based */

  dcl 01 heap		aligned based (heapp),
       02 count		fixed bin,
       02 entry		(0 refer (heap.count)) bit (n_words * 36);

  /* automatic */

  dcl l			fixed bin automatic;
  dcl r			fixed bin automatic;
  dcl side		fixed bin automatic;
  dcl temp		bit (n_words * 36) automatic;

  l = top * 2;
  r = l + 1;

  if l > last
    then return;

  if r > last
    then do;
      if heap.entry (top) < heap.entry (l)
        then do;
	temp = heap.entry (l);
	heap.entry (l) = heap.entry (top);
	heap.entry (top) = temp;
        end;
      return;
    end;

  if heap.entry (top) > heap.entry (l) & heap.entry (top) > heap.entry (r)
    then return;

  if heap.entry (l) > heap.entry (r)
    then side = l;
    else side = r;

  temp = heap.entry (side);
  heap.entry (side) = heap.entry (top);
  heap.entry (top) = temp;
  call adjust_heap (heapp, side, last, n_words);

  return;

  end adjust_heap;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


append:
  proc (strp,			/** string pointer	    (i/o)	*/
       bc,			/** bit count	    (i/o) */
       col,			/** current column	    (i/o) */
       text);			/** text to append	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	append					*/
  /***	Input:	strp, bc, col, text				*/
  /***	Function:	appends the text given to to the segment pointed	*/
  /***		to by strp, and adjusts strp and bc appropriately	*/
  /***	Output:	strp, bc					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl strp		ptr parameter;
  dcl bc			fixed bin (24) parameter;
  dcl col			fixed bin parameter;
  dcl text		char (*) varying parameter;

  /* based */

  dcl str			char (strl) unaligned based (strp);

  /* automatic */

  dcl strl		fixed bin (21) automatic;
  dcl new			char (512) varying automatic;

  call tabin (text, col, new);

  strl = length (new);
  str = new;

  strp = addcharno (strp, strl);
  bc = bc + strl * 9;

  end append;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


tabin:
  proc (old,			/** old text	    (in )	*/
       col,			/** start column	    (i/o) */
       new);			/** new text	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	tabin					*/
  /***	Input:	old, col					*/
  /***	Function:	replaces spaces with tabs in the output listing	*/
  /***	Output:	col, new					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl old			char (*) varying parameter;
  dcl col			fixed bin parameter;
  dcl new			char (*) varying parameter;

  /* automatic */

  dcl start		fixed bin automatic;
  dcl left		fixed bin automatic;
  dcl first		fixed bin automatic;
  dcl tab_col		fixed bin automatic;
  dcl nlx			fixed bin automatic;

  new = "";

  start = 1;
  left = length (old);

  do while (left > 0);
    first = index (substr (old, start, left), "  ");
    if first = 0
      then first = left;
      else first = first - 1;

    if first > 0
      then do;
        nlx = index (reverse (substr (old, start, first)), NL);
        if nlx > 0
	then col = nlx;
	else col = col + first;

        new = new || substr (old, start, first);
        start = start + first;
        left = left - first;
      end;

    if left > 0
      then do;
        first = verify (substr (old, start, left), " ");
        if first = 0
	then first = left;
	else first = first - 1;

        tab_col = divide (col + 9, 10, 17, 0) * 10 + 1;
        col = col + first;
        left = left - first;
        start = start + first;

        if col >= tab_col
	then do;
	  do while (tab_col <= col);
	    new = new || "	";
	    tab_col = tab_col + 10;
	  end;

	  tab_col = tab_col - 10;

	  if col ^= tab_col
	    then new = new || copy (" ", col - tab_col);
	end;
	else new = new || copy (" ", first);
      end;
  end;

  end tabin;

/**** *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


oct:
  proc (value,			/** value to convert    (in )	*/
       size,			/** field length	    (in ) */
       pad)			/** pad character	    (in ) */
       returns (char (32) varying);	/** octal string	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	oct					*/
  /***	Input:	value, size, pad				*/
  /***	Function:	converts a number to a string of octal digits of	*/
  /***		a given length, padded with a given character.	*/
  /***	Output:	octal_string				*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl octal		(0:7) char (1) static options (constant)
			init ("0", "1", "2", "3", "4", "5", "6", "7");

  /* parameters */

  dcl value		fixed bin (35) parameter;
  dcl size		fixed bin parameter;
  dcl pad			char (1) parameter;

  /* based */

  dcl digit		(1:12) fixed bin (3) unsigned unaligned
			based (addr (value));

  /* automatic */

  dcl string		char (32) varying automatic;
  dcl overflow		bit (1) automatic;
  dcl padding		bit (1) automatic;
  dcl d			fixed bin automatic;

  string = "";
  overflow = false;
  padding = true;

  if size > 12
    then string = copy (pad, size - 12);

  do d = 1 to 12;
    if d = 12
      then padding = false;
    if 13 - d > size & size > 0
      then do;
        if digit (d) ^= 0
	then overflow = true;
	else ;
      end;
      else do;
        if overflow
	then string = string || "*";
        else if padding & digit (d) = 0
	then do;
	  if size > 0
	    then string = string || pad;
	    else ;
	end;
        else do;
	string = string || octal (digit (d));
	if digit (d) ^= 0
	  then padding = false;
        end;
      end;
  end;

  return (string);

  end oct;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include access_mode_values;
%include definition_dcls;
%include le_data;
%include object_link_dcls;
%include std_symbol_header;
%include terminate_file;

  end le_create_list_;
