/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to relocate and emit the symbol section for a single
     input component.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_emit_symbol_:
  proc (ocudp,			/** ocu data pointer    (in )	*/
       lecp,			/** components pointer  (i/o) */
       c);			/** component index	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_emit_symbol_				*/
  /***	Input:	ocudp, lecp, c				*/
  /***	Function:	emits the symbol section of a single input	*/
  /***		component.				*/
  /***	Output:	lecp					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);

  dcl Left		fixed bin static options (constant) init (1);
  dcl Right		fixed bin static options (constant) init (2);

  dcl Table_Removed_Mask	bit (36) static options (constant)
			init ("000000010000"b3);
  dcl Root_Offset		fixed bin (18) unsigned static options
			(constant) init (5);
  dcl Map_Offset		fixed bin (18) unsigned static options
			(constant) init (6);
  dcl Flag_Offset		fixed bin (18) unsigned static options
			(constant) init (3);

  /* parameters */

  dcl ocudp		ptr parameter;
  dcl lecp		ptr parameter;
  dcl c			fixed bin parameter;

  /* procedures */

  dcl le_error_		entry options (variable);
  dcl le_snap_		entry (ptr, ptr, fixed bin, fixed bin (3),
			uns fixed bin (18), uns fixed bin (18), bit (1),
			fixed bin (3), uns fixed bin (18), bit (6),
			bit (1));
  dcl le_util_$scan_relinfo	entry (ptr, fixed bin, bit (1), fixed bin,
			char (*));

  /* external */

  dcl le_et_$implementation_error
			external fixed bin (35);
  dcl le_et_$invalid_relinfo	external fixed bin (35);
  dcl le_et_$unsupported_relinfo
			external fixed bin (35);

  /* based */

  dcl based_word		bit (36) aligned based;
  dcl 01 comp		aligned like le_comp based (compp);
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 word18		aligned based (addr (word)),
       02 side		(1:2) fixed bin (18) unsigned unaligned;

  /* automatic */

  dcl compp		ptr automatic;
  dcl internal		bit (1) automatic;
  dcl modifier		bit (6) automatic;
  dcl n_words		fixed bin (18) unsigned automatic;
  dcl odd			bit (1) automatic;
  dcl pad_words		(1:16) bit (36) aligned automatic;
  dcl rel			char (2) automatic;
  dcl relindex		fixed bin automatic;
  dcl relp		fixed bin (18) unsigned automatic;
  dcl relstr		char (4096) varying automatic;
  dcl relstrp		ptr automatic;
  dcl s			fixed bin automatic;
  dcl sbp			ptr automatic;
  dcl section		fixed bin (3) automatic;
  dcl size		fixed bin (18) unsigned automatic;
  dcl skip		fixed bin automatic;
  dcl start		fixed bin (18) unsigned automatic;
  dcl stat_relp		fixed bin (18) unsigned automatic;
  dcl symb_relp		fixed bin (18) unsigned automatic;
  dcl symbp		ptr automatic;
  dcl text_relp		fixed bin (18) unsigned automatic;
  dcl value		fixed bin (35) automatic;
  dcl word		bit (36) aligned automatic;

  /* builtin */

  dcl addr		builtin;
  dcl addrel		builtin;
  dcl copy		builtin;
  dcl fixed		builtin;
  dcl min			builtin;
  dcl null		builtin;
  dcl substr		builtin;

  compp = addr (lec.comp (c));
  relindex = 1;
  odd = false;
  n_words = 0;
  symbp = comp.orig.symbp;
  relstrp = addrel (addr (relstr), 1);

  /* extract the relocation counters */

  text_relp = comp.new.rel_text;
  stat_relp = comp.new.rel_stat;
  symb_relp = comp.new.rel_symb;

  /* pad the symbol section to put it on a doubleword boundary */

  if comp.new.symbol_pad > 0
    then do;
      n_words = comp.new.symbol_pad;
      relstr = copy ("aa", n_words);
      relp = ocu_$emit_symbol (ocudp, addr (pad_words), relstrp, n_words);
    end;

  start = 0;
  n_words = 0;

  /* emit the section */

  do while (n_words < comp.orig.symbl);

    /* scan for a non-absolute word */

    call le_util_$scan_relinfo (comp.orig.rel_symbp, relindex, odd, skip,
         rel);

    /* emit the intervening words with absolute relocation */

    do while (skip > 0 & n_words < comp.orig.symbl);
      size = min (2048, skip, comp.orig.symbl - n_words);
      relstr = copy ("aa", size);
      relp = ocu_$emit_symbol (ocudp, symbp, relstrp, size);
      if start = 0
        then start = relp;
      skip = skip - size;
      symbp = addrel (symbp, size);
      n_words = n_words + size;
    end;

    /* copy the word to relocate */

    word = symbp -> based_word;

    do s = Left to Right while (n_words < comp.orig.symbl);

      /* for each halfword . . . */

      /* abrolute or self-relative */

      if substr (rel, s, 1) = "a" | substr (rel, s, 1) = "r"
        then ;			/* no relocation required */

      /* text relative */

      else if substr (rel, s, 1) = "t" | substr (rel, s, 1) = "1"
        then do;
	value = word18.side (s) + text_relp;
	word18.side (s) = addr (value) -> word18.side (2);
        end;

      /* definition relative (not supported) */

      else if substr (rel, s, 1) = "d"
        then call le_error_ (LE_FATAL_ERROR, le_et_$unsupported_relinfo,
	        "^/Relocation code ""^a"" found at symbol|^o in ^a.",
	        substr (rel, s, 1), n_words, comp.name);

      /* 18 bit linkage reference */

      else if substr (rel, s, 1) = "2" | substr (rel, s, 1) = "3"
        then do;

	/* snap the link to its target and then make sure that the	*/
	/* reference is still to a link by emitting a type-1 link	*/
	/* to the target if the target is not a linkage reference.	*/

	call le_snap_ (ocudp, lecp, c, Symbol, n_words, (word18.side (s)),
	     false, section, relp, modifier, internal);
	if section = Linkage
	  then word18.side (s) = relp;
	else word18.side (s) = ocu_$emit_link (ocudp, Self_Base, section,
		"", "", (relp), ""b, null);
        end;

      /* symbol reference */

      else if substr (rel, s, 1) = "s" | substr (rel, s, 1) = "7"
        then do;
	value = word18.side (s) + symb_relp;
	word18.side (s) = addr (value) -> word18.side (Right);
        end;

      /* 18 bit static reference */

      else if substr (rel, s, 1) = "8"
        then word18.side (s) = word18.side (s) + stat_relp;
      else call le_error_ (LE_FATAL_ERROR, le_et_$invalid_relinfo,
	      "^/Relocation code ""^a"" found at symbol|^o in ^a.",
	      substr (rel, s, 1), n_words, comp.name);
    end;

    /* if not off the end, then emit the word */

    if n_words < comp.orig.symbl
      then do;
        relp = ocu_$emit_symbol (ocudp, addr (word), addr (rel), 1);
        if start = 0
	then start = relp;
        n_words = n_words + 1;
        symbp = addrel (symbp, 1);
      end;
  end;

  /* make sure the section starts where we calculated that it would */

  if start ^= 0 & start ^= lec.comp (c).new.rel_symb
    then call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	    "^/Symbol for ^a emitted at ^d instead of ^d as expected.",
	    lec.comp (c).name, start, lec.comp (c).new.rel_symb);

  /* if we deleted the symbol table from the component, then patch	*/
  /* the pl1 symbol block to indicate that there is no table.	*/

  if start ^= 0 & lec.comp (c).flags.delete_table
    then do;
      sbp = lec.comp (c).symbp;
      if sbp -> std_symbol_header.area_pointer ^= ""b
        then do;
	sbp = addrel (sbp, sbp -> std_symbol_header.area_pointer);
	if sbp -> pl1_symbol_block.identifier = "pl1info"
	  then do;

	    /* clear the root offset */

	    call ocu_$backpatch (ocudp, "symbol", start + Root_Offset,
	         "left 18 unsigned", 0);

	    /* clear the map start and length */

	    call ocu_$backpatch (ocudp, "symbol", start + Map_Offset,
	         "left 18 unsigned", 0);
	    call ocu_$backpatch (ocudp, "symbol", start + Map_Offset,
	         "right 18 unsigned", 0);

	    /* copy the flag bits, mask the table_removed bit on,	*/
	    /* and patch the halfword.			*/

	    word = ""b;
	    word18.side (2) =
	         addr (sbp -> pl1_symbol_block.flags) -> word18.side (1);
	    word = word | Table_Removed_Mask;
	    call ocu_$backpatch (ocudp, "symbol", start + Flag_Offset,
	         "left 18 unsigned", fixed (word, 35));
	  end;
        end;
    end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include std_symbol_header;
%include pl1_symbol_block;
%include ocu_dcls;

  end le_emit_symbol_;

