/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to backpatch unresolved references and complete
     generation of MSF objects by producing component 0.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_complete_binary_:
  proc (lecp,			/** components pointer  (in )	*/
       lebp);			/** binaries pointer    (in )	*/

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_complete_binary_				*/
  /***	Input:	lecp, lebp				*/
  /***	Function:	creates MSF component 0 and sets the ACL on the	*/
  /***		resulting MSF.  Note that this is unnecessary if	*/
  /***		the output binary is not an MSF, since ocu_ will	*/
  /***		set the ACL correctly on exit, but the ACL on a	*/
  /***		MSF includes the directory and segment acls.	*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lecp		ptr parameter;
  dcl lebp		ptr parameter;

  /* procedures */

  dcl expand_pathname_	entry (char (*), char (*), char (*),
			fixed bin (35));
  dcl fs_util_$add_acl_entries
			entry (char (*), char (*), ptr, fixed bin (35));
  dcl get_group_id_$tag_star	entry () returns (char (32));
  dcl get_system_free_area_	entry () returns (ptr);
  dcl hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*),
			fixed bin (35));
  dcl hcs_$get_uid_seg	entry (ptr, bit (36) aligned, fixed bin (35));
  dcl initiate_file_	entry (char (*), char (*), bit (*), ptr,
			fixed bin (24), fixed bin (35));
  dcl le_backpatch_$execute	entry (ptr, ptr);
  dcl le_error_		entry options (variable);
  dcl object_info_$brief	entry (ptr, fixed bin (24), ptr,
			fixed bin (35));

  /* external */

  dcl le_data_$caller	external char (32) varying;
  dcl 01 le_data_$symbol_table
			aligned like std_symbol_header external;
  dcl le_data_$version_number external fixed bin;
  dcl le_data_$version_suffix external char (64) varying;

  /* based */

  dcl 01 leb		aligned based (lebp),
       02 header		aligned like le_binaries.header,
       02 binary		dim (0:0 refer (leb.n_binaries))
			like le_binaries.binary;
  dcl sys_area		area based (sys_areap);

  /* automatic */

  dcl dn			char (168) automatic;
  dcl dnl			fixed bin automatic;
  dcl ec			fixed bin (35) automatic;
  dcl en			char (32) automatic;
  dcl i			fixed bin automatic;
  dcl 01 le_gen_info	aligned like gen_info automatic;
  dcl 01 my_acl		aligned automatic,
       02 version		char (8) aligned,
       02 count		fixed bin,
       02 entry		aligned like general_acl_entry;
  dcl 01 oi		aligned like object_info automatic;
  dcl sys_areap		ptr automatic;

  /* conditions */

  dcl cleanup		condition;

  /* builtin */

  dcl addr		builtin;
  dcl null		builtin;

  /* execute any backpatches that were required */

  call le_backpatch_$execute (lecp, lebp);

  /* if the object is a single segment binary, we are done.  If it is	*/
  /* an MSF, we have to create component 0.			*/

  if leb.n_binaries = 1
    then return;

  /* create the generator info */

  le_gen_info.gen_created = le_data_$symbol_table.object_created;
  le_gen_info.generator = le_data_$caller;
  le_gen_info.gen_number = le_data_$version_number;
  le_gen_info.gen_version = le_data_$caller || le_data_$version_suffix;

  sys_areap = get_system_free_area_ ();

  component_count = leb.n_binaries;

  /* make sure a release frees out allocated storage */

  component_listp = null;

  on cleanup
    begin;
    if component_listp ^= null
      then free component_list in (sys_area);
  end;

  /* allocate the component list */

  allocate component_list in (sys_area);

  /* copy the segment pointers into it */

  do i = 1 to component_count;
    component_list (i) = leb.binary (i).segp;
  end;

  /* create the MSF transfer vector */

  call ocu_$create_msf (component_listp, component_count,
       addr (le_gen_info), ec);

  /* free the component list */

  free component_list in (sys_area);

  if ec ^= 0
    then call le_error_ (LE_FATAL_ERROR, ec,
	    "^/Creating MSF transfer vector (component 0).");

  call hcs_$fs_get_path_name (leb.binary (1).segp, dn, dnl, en, ec);

  /* get the binary info for component 0 */

  call initiate_file_ (dn, "0", R_ACCESS, leb.binary (0).segp,
       leb.binary (0).bc, ec);
  oi.version_number = object_info_version_2;

  call object_info_$brief (leb.binary (0).segp, leb.binary (0).bc,
       addr (oi), ec);
  leb.binary (0).textp = oi.textp;
  leb.binary (0).defnp = oi.defp;
  leb.binary (0).linkp = oi.linkp;
  leb.binary (0).symbp = oi.symbp;
  leb.binary (0).statp = oi.statp;
  leb.binary (0).textl = oi.tlng;
  leb.binary (0).defnl = oi.dlng;
  leb.binary (0).linkl = oi.llng;
  leb.binary (0).symbl = oi.slng;
  leb.binary (0).statl = oi.ilng;

  call hcs_$get_uid_seg (leb.binary (0).segp, leb.binary (0).uid, ec);

  /* set the ACL on the Multi-Segment File */

  call expand_pathname_ (dn, dn, en, ec);

  my_acl.version = GENERAL_ACL_VERSION_1;
  my_acl.count = 1;
  my_acl.entry.access_name = get_group_id_$tag_star ();
  my_acl.entry.mode = RE_ACCESS;
  my_acl.entry.status_code = 0;

  call fs_util_$add_acl_entries (dn, en, addr (my_acl), ec);

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include access_mode_values;
%include acl_structures;
%include le_data;
%include object_info;
%include ocu_dcls;
%include std_symbol_header;

  end le_complete_binary_;


