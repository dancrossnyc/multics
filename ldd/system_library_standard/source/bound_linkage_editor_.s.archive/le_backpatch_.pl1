/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to record and execute backpatches which cannot be
     resolved until the end of the run.  These are references in one output
     component to something in another component.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_backpatch_:
  proc (type,			/** type of patch	    (in )	*/
       comp,			/** component to patch  (in ) */
       relp,			/** offset to patch	    (in ) */
       target,			/** target of patch	    (in ) */
       index);			/** thing to findd	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_backpatch_				*/
  /***	Input:	type, comp, relp, target, index		*/
  /***	Function:	this is the backpatching facility for the linkage	*/
  /***		editor.  This main entrypoint is used to schedule	*/
  /***		the backpatching of a reference.  This is done by	*/
  /***		placing an entry in a list.  The list if found	*/
  /***		using the external variable le_data_$patch_ptr	*/
  /***		The following types of patch are supported:	*/
  /***		  Patch_Init				*/
  /***		    - This patch is used to install the link	*/
  /***		      offset into the init_info for *system and	*/
  /***		      *heap links with deferred initialization.	*/
  /***		      <comp> is the output component where the	*/
  /***		      link was emitted, <relp> is the offset	*/
  /***		      (unadjusted for static) within the linkage	*/
  /***		      section of the link, <target> is the target	*/
  /***		      input component of the deferred init, and	*/
  /***		      <index> is the index of the target link	*/
  /***		      within that component link_table.		*/
  /***		  Patch_Self_Init				*/
  /***		    - This patch is used to install the link	*/
  /***		      offset into the init_info for *system and	*/
  /***		      *heap links with self-referential pointer	*/
  /***		      initializations.  This is required since	*/
  /***		      the link offset is unknown until the link	*/
  /***		      is emitted, and by then the init_info has	*/
  /***		      already been created.  <comp> is the output */
  /***		      component where the link was emitted,	*/
  /***		      <relp> is the offset (unadjusted for	*/
  /***		      static) within the linkage section.	*/
  /***		      <target> is unused, and <index> is the	*/
  /***		      index of the init_template to be patched.	*/
  /***		  Patch_Link				*/
  /***		    - This patch is used to install the correct	*/
  /***		      offset into partial links whos target is	*/
  /***		      a link in another component. Since the link	*/
  /***		      offset is unknown until the component is	*/
  /***		      closed, we patch it.  <comp> is the output	*/
  /***		      component containing the link to patch,	*/
  /***		      <relp> is the offset (unadjusted for	*/
  /***		      static) of the link within the linkage	*/
  /***		      section, <target> is the target input	*/
  /***		      component of the link,  and <index> is the	*/
  /***		      index within that components definition	*/
  /***		      table of the target definition of the link.	*/
  /***		      This is used to find the target link and	*/
  /***		      where it was relocated to.		*/
  /***		  Patch_Symbol_Ref				*/
  /***		    - This patch is used when resolving text	*/
  /***		      section references to the symbol section.	*/
  /***		      While we have the targets offset within the	*/
  /***		      symbol section, we don't have the offset	*/
  /***		      of the symbol section within the object	*/
  /***		      segment until it is closed.  <comp> is the	*/
  /***		      output component containing the reference,	*/
  /***		      <relp> is the offset of the word in the	*/
  /***		      text section, <target> is a code indicating	*/
  /***		      the halfword to patch.  <index> is unused.	*/
  /***		      In this patch, the absolute offset of the	*/
  /***		      symbol section within the object is added	*/
  /***		      to the value in place.			*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl type		fixed bin parameter;
  dcl comp		fixed bin parameter;
  dcl relp		fixed bin (18) unsigned parameter;
  dcl target		fixed bin parameter;
  dcl index		fixed bin parameter;
  dcl lecp		ptr parameter;
  dcl lebp		ptr parameter;

  /* procedures */

  dcl get_group_id_		entry () returns (char (32));
  dcl get_system_free_area_	entry () returns (ptr);
  dcl hcs_$add_acl_entries	entry (char (*), char (*), ptr, fixed bin,
			fixed bin (35));
  dcl hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*),
			fixed bin (35));
  dcl hcs_$list_acl		entry (char (*), char (*), ptr, ptr, ptr,
			fixed bin, fixed bin (35));
  dcl hcs_$replace_acl	entry (char (*), char (*), ptr, fixed bin,
			bit (1), fixed bin (35));
  dcl le_error_		entry options (variable);
  dcl pathname_		entry (char (*), char (*)) returns (char (168));

  /* external */

  dcl le_data_$patch_ptr	ptr external;
  dcl le_et_$implementation_error
			external fixed bin (35);

  /* based */

  dcl 01 leb		aligned based (lebp),
       02 header		aligned like le_binaries.header,
       02 binary		dim (0:0 refer (leb.n_binaries))
			like le_binaries.binary;
  dcl 01 lep		aligned based (le_data_$patch_ptr),
       02 header		aligned like le_patches.header,
       02 patch		dim (0 refer (lep.n_patches)) like le_patch;
  dcl 01 patch		aligned like le_patch based (patchp);

  /* automatic */

  dcl bx			fixed bin automatic;
  dcl patchp		ptr automatic;
  dcl px			fixed bin automatic;

  /* conditions */

  dcl cleanup		condition;

  /* builtin */

  dcl addr		builtin;
  dcl addrel		builtin;
  dcl currentsize		builtin;
  dcl fixed		builtin;
  dcl null		builtin;
  dcl rel			builtin;

  /* increment the number of patches and copy the info into the table */

  px, lep.n_patches = lep.n_patches + 1;
  lep.patch (px).type = type;
  lep.patch (px).comp = comp;
  lep.patch (px).relp = relp;
  lep.patch (px).target = target;
  lep.patch (px).index = index;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


execute:
  entry (lecp, lebp);

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_backpatch_$execute			*/
  /***	Input:	lecp, lebp				*/
  /***	Function:	executes all of the backpatches scheduled.	*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* if there are no patches, just return */

  if lep.n_patches = 0
    then return;

  leb.binary (*).aclp = null;

  /* make sure we put back the acls on an unexpected release */

  on cleanup
    begin;
    do bx = 1 to leb.n_binaries;
      call restore_acl (leb.binary (bx).segp, leb.binary (bx).aclp,
	 leb.binary (bx).aclc);
    end;
  end;

  do bx = 1 to leb.n_binaries;

    /* for each output binary set the acl so we can write into	*/
    /* the segment.						*/

    call set_acl (leb.binary (bx).segp, leb.binary (bx).aclp,
         leb.binary (bx).aclc);
  end;

  do px = 1 to lep.n_patches;

    patchp = addr (lep.patch (px));

    /* execute each patch in the table */

    if patch.type = Patch_Init
      then call patch_init (lecp, lebp, patch.comp, patch.relp, patch.target,
	      patch.index);
    else if patch.type = Patch_Self_Init
      then call patch_self_init (lecp, lebp, patch.comp, patch.relp,
	      patch.index);
    else if patch.type = Patch_Link
      then call patch_link (lecp, lebp, patch.comp, patch.relp,
	      patch.target, patch.index);
    else if patch.type = Patch_Symbol_Ref
      then call patch_symbol_ref (lebp, patch.comp, patch.relp, patch.target);
    else call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	    "^/Unknown patch type (^d) found in patch table.",
	    patch.type);
  end;

  /* now put back the acls on the segment(s) */

  do bx = 1 to leb.n_binaries;
    call restore_acl (leb.binary (bx).segp, leb.binary (bx).aclp,
         leb.binary (bx).aclc);
  end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


set_acl:
  proc (segp,			/** segment pointer	    (in )	*/
       aclp,			/** acl pointer	    (out) */
       count);			/** acl count	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	set_acl					*/
  /***	Input:	segp					*/
  /***	Function:	saves the access_control_list for the segment	*/
  /***		pointed to by segp, and adds a rw term to the acl	*/
  /***		for the calling user.			*/
  /***	Output:	aclp, count				*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl segp		ptr parameter;
  dcl aclp		ptr parameter;
  dcl count		fixed bin parameter;

  /* automatic */

  dcl 01 acl_entry		aligned like segment_acl_entry automatic;
  dcl dname		char (168) automatic;
  dcl ec			fixed bin (35) automatic;
  dcl ename		char (32) automatic;
  dcl sys_areap		ptr automatic;

  sys_areap = get_system_free_area_ ();

  /* get the pathname and acl */

  call hcs_$fs_get_path_name (segp, dname, 0, ename, ec);
  call hcs_$list_acl (dname, ename, sys_areap, aclp, null, count, ec);
  if ec ^= 0
    then do;
      call le_error_ (LE_WARNING, ec, "^/Unable to read ACL for ^a.",
	 pathname_ (dname, ename));
      aclp = null;
    end;

  /* create a new acl entry giving rw access to the user */

  acl_entry.access_name = get_group_id_ ();
  acl_entry.mode = REW_ACCESS;
  acl_entry.extended_mode = ""b;
  acl_entry.status_code = 0;

  /* add the new acl term */

  call hcs_$add_acl_entries (dname, ename, addr (acl_entry), 1, ec);
  if ec ^= 0
    then call le_error_ (LE_ABORT_ERROR, ec, "^/Unable to set ACL on ^a.",
	    pathname_ (dname, ename));

  end set_acl;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


restore_acl:
  proc (segp,			/** segment pointer	    (in )	*/
       aclp,			/** acl pointer	    (in )	*/
       count);			/** acl count	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	restore_acl				*/
  /***	Input:	segp, aclp, count				*/
  /***	Function:	replaces the saved acl (pointed to by aclp) on	*/
  /***		segment pointed to by segp and frees the saved	*/
  /***		acl structure.				*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl segp		ptr parameter;
  dcl aclp		ptr parameter;
  dcl count		fixed bin parameter;

  /* based */

  dcl 01 acl_list		(1:count) like segment_acl_entry based (aclp);
  dcl sys_area		area based (sys_areap);

  /* automatic */

  dcl dname		char (168) automatic;
  dcl ec			fixed bin (35) automatic;
  dcl ename		char (32) automatic;
  dcl sys_areap		ptr automatic;

  /* if there is no saved acl, just return */

  if aclp = null
    then return;

  sys_areap = get_system_free_area_ ();

  /* get the pathname and replace the saved acl */

  call hcs_$fs_get_path_name (segp, dname, 0, ename, ec);
  call hcs_$replace_acl (dname, ename, aclp, count, "1"b, ec);

  free acl_list in (sys_area);

  if ec ^= 0
    then call le_error_ (LE_WARNING, ec, "^/Unable to restore ACL on ^a.",
	    pathname_ (dname, ename));

  end restore_acl;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


patch_init:
  proc (lecp,			/** components pointer  (in )	*/
       lebp,			/** object info pointer (in ) */
       comp,			/** component index	    (in ) */
       relp,			/** relpointer to link  (in ) */
       target,			/** target input comp   (in ) */
       index);			/** link table index    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	patch_init				*/
  /***	Input:	lecp, lebp, comp, relp, target, index		*/
  /***	Function:	patches the link_relp value in a deferred init	*/
  /***		init_info to properly refer to the target of the	*/
  /***		deferred initialization.			*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lecp		ptr parameter;
  dcl lebp		ptr parameter;
  dcl comp		fixed bin parameter;
  dcl relp		fixed bin (18) unsigned parameter;
  dcl target		fixed bin parameter;
  dcl index		fixed bin parameter;

  /* based */

  dcl 01 exp		aligned like exp_word based (expp);
  dcl 01 init		aligned like link_init_deferred based (initp);
  dcl 01 leb		aligned based (lebp),
       02 header		aligned like le_binaries.header,
       02 binary		dim (0:0 refer (leb.n_binaries))
			like le_binaries.binary;
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 lel		aligned based (lelp),
       02 header		aligned like le_links.header,
       02 link		dim (0 refer (lel.n_links)) like le_link;
  dcl 01 lk		aligned like object_link based (lkp);
  dcl 01 type		aligned like type_pair based (typep);

  /* automatic */

  dcl expp		ptr automatic;
  dcl initp		ptr automatic;
  dcl lelp		ptr automatic;
  dcl lkp			ptr automatic;
  dcl offset		fixed bin (18) unsigned automatic;
  dcl typep		ptr automatic;

  /* builtin */

  dcl mod			builtin;

  /* adjust the link relpointer for the presence of the static section */

  if lec.header.flags.separate_static
    then offset = relp;
    else do;
      offset = relp + leb.binary (comp).statl;
      offset = offset + mod (offset, 2);
    end;

  /* get the link information */

  lkp = addrel (leb.binary (comp).linkp, offset);
  expp = addrel (leb.binary (comp).defnp, lk.expression_relp);
  typep = addrel (leb.binary (comp).defnp, exp.type_relp);
  initp = addrel (leb.binary (comp).defnp, type.trap_relp);

  lelp = lec.comp (target).tables.lelp;

  /* find the target link in the other component and adjust the link	*/
  /* offset for combined static if necessary.			*/

  if lec.header.flags.separate_static
    then init.link_relp = lel.link (index).relp;
    else do;
      init.link_relp = lel.link (index).relp +
	 leb.binary (lec.comp (target).target).statl;
      init.link_relp = init.link_relp + mod (init.link_relp, 2);
    end;

  end patch_init;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


patch_self_init:
  proc (lecp,			/** components pointer  (in )	*/
       lebp,			/** object info pointer (in ) */
       comp,			/** component index	    (in ) */
       relp,			/** relpointer to link  (in ) */
       index);			/** init template index (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	patch_self_init				*/
  /***	Input:	lecp, lebp, comp, relp, index			*/
  /***	Function:	patches the section_offset value in a pointer	*/
  /***		init template for a self_referential link.	*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lecp		ptr parameter;
  dcl lebp		ptr parameter;
  dcl comp		fixed bin parameter;
  dcl relp		fixed bin (18) unsigned parameter;
  dcl index		fixed bin parameter;

  /* based */

  dcl 01 exp		aligned like exp_word based (expp);
  dcl 01 init		aligned based (initp),
       02 header		aligned like link_init_list_template.header,
       02 pad		bit (18) unaligned,
       02 n_words_in_list	fixed bin (18) unsigned unaligned,
       02 template		dim (0 refer (init.n_words_in_list));
  dcl 01 leb		aligned based (lebp),
       02 header		aligned like le_binaries.header,
       02 binary		dim (0:0 refer (leb.n_binaries))
			like le_binaries.binary;
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 lk		aligned like object_link based (lkp);
  dcl 01 lte		aligned based (ltep),
       02 n_bits		fixed bin (35) aligned,
       02 mbz		bit (3) unaligned,
       02 init_type		fixed bin (3) unsigned unaligned,
       02 repeat		fixed bin (30) unsigned unaligned,
       02 datum		bit (0 refer (lte.n_bits));
  dcl 01 pit		aligned like pointer_init_template based (pitp);
  dcl 01 type		aligned like type_pair based (typep);

  /* automatic */

  dcl expp		ptr automatic;
  dcl i			fixed bin automatic;
  dcl initp		ptr automatic;
  dcl lkp			ptr automatic;
  dcl ltep		ptr automatic;
  dcl offset		fixed bin (18) unsigned automatic;
  dcl pitp		ptr automatic;
  dcl typep		ptr automatic;

  /* builtin */

  dcl mod			builtin;

  /* adjust the link relpointer for the presence of the static section */

  if lec.header.flags.separate_static
    then offset = relp;
    else do;
      offset = relp + leb.binary (comp).statl;
      offset = offset + mod (offset, 2);
    end;

  /* get the link information */

  lkp = addrel (leb.binary (comp).linkp, offset);
  expp = addrel (leb.binary (comp).defnp, lk.expression_relp);
  typep = addrel (leb.binary (comp).defnp, exp.type_relp);
  initp = addrel (leb.binary (comp).defnp, type.trap_relp);

  /* find the appropriate template */
  
  ltep = addr (init.template);
  
  do i = 1 to index-1;
    ltep = addrel (ltep, currentsize (lte));
  end;
  
  /* make sure the template found is a pointer init list template */
  
  if lte.init_type = 0
    then call le_error_ (le_et_$implementation_error, LE_ABORT_ERROR,
	    "^/Self Init backpatch does not refer to a pointer template." ||
	    "^/Patching link|^o", offset);
    else do;
      
      /* install the section offset into the init template */
      
      pitp = addr (lte.datum);
      pit.section_offset = offset;
    end;
	  
  end patch_self_init;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


patch_link:
  proc (lecp,			/** components pointer  (in )	*/
       lebp,			/** binaries pointer    (in ) */
       comp,			/** component index	    (in ) */
       relp,			/** link offset	    (in ) */
       target,			/** target input comp   (in ) */
       index);			/** def table index	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	patch_link				*/
  /***	Input:	lecp, lebp, comp, relp, target, index		*/
  /***	Function:	patches the word_offset portion of a partial	*/
  /***		link to a link in another component linkage scn.	*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lecp		ptr parameter;
  dcl lebp		ptr parameter;
  dcl comp		fixed bin parameter;
  dcl relp		fixed bin (18) unsigned parameter;
  dcl target		fixed bin parameter;
  dcl index		fixed bin parameter;

  /* based */

  dcl 01 leb		aligned based (lebp),
       02 header		aligned like le_binaries.header,
       02 binary		dim (0:0 refer (leb.n_binaries))
			like le_binaries.binary;
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 lel		aligned based (lelp),
       02 header		aligned like le_links.header,
       02 link		dim (0 refer (lel.n_links)) like le_link;
  dcl 01 plk		aligned like partial_link based (plkp);

  /* automatic */

  dcl lelp		ptr automatic;
  dcl offset		fixed bin (18) unsigned automatic;
  dcl plkp		ptr automatic;

  /* builtin */

  dcl mod			builtin;

  /* adjust the link offset for the presence of combined static */

  if lec.header.flags.separate_static
    then offset = relp;
    else do;
      offset = relp + leb.binary (comp).statl;
      offset = offset + mod (offset, 2);
    end;

  /* get the partial link itself */

  plkp = addrel (leb.binary (comp).linkp, offset);

  /* find the target link */

  lelp = lec.comp (target).tables.lelp;

  /* adjust the target offset for the presence of combined static and	*/
  /* patch the new offset into the link.			*/

  if lec.header.flags.separate_static
    then plk.offset = lel.link (index).relp;
    else do;
      plk.offset = lel.link (index).relp +
	 leb.binary (lec.comp (target).target).statl;
      plk.offset = plk.offset + mod (plk.offset, 2);
    end;

  end patch_link;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


patch_symbol_ref:
  proc (lebp,			/** binaries pointer    (in ) */
       comp,			/** component index	    (in ) */
       relp,			/** reference offset    (in ) */
       relinfo);			/** relinfo code	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	patch_symbol_ref				*/
  /***	Input:	lebp, comp, relp, relinfo			*/
  /***	Function:	patches a symbol reference being made using an	*/
  /***		absolute offset within the segment by adding in	*/
  /***		the offset of the symbol section within the seg.	*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl lebp		ptr parameter;
  dcl comp		fixed bin parameter;
  dcl relp		fixed bin (18) unsigned parameter;
  dcl relinfo		fixed bin parameter;

  /* based */

  dcl 01 ref		aligned based (refp),
       02 side		(1:2) fixed bin (18) unsigned unaligned;
  dcl 01 leb		aligned based (lebp),
       02 header		aligned like le_binaries.header,
       02 binary		dim (0:0 refer (leb.n_binaries))
			like le_binaries.binary;

  /* automatic */

  dcl refp		ptr automatic;

  /* find the referencing word */

  refp = addrel (leb.binary (comp).textp, relp);

  /* add in the symbol section offset within the segment */

  ref.side (relinfo) = ref.side (relinfo) +
       fixed (rel (leb.binary (comp).symbp), 18);

  end patch_symbol_ref;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include access_mode_values;
%include acl_structures;
%include definition_dcls;
%include le_data;
%include object_link_dcls;

  end le_backpatch_;

