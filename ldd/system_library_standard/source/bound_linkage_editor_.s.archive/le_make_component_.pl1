/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to generate a single output component.  This may be a
     single standalone object or a component of an object MSF.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_make_component_:
  proc (dname,			/** dirname	    (in )	*/
       ename,			/** entryname	    (in ) */
       leip,			/** le input pointer    (in ) */
       lebp,			/** binaries pointer    (i/o)	*/
       lecp,			/** components pointer  (i/o) */
       compx,			/** output comp index   (in ) */
       n_comp);			/** no of components    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_make_component_				*/
  /***	Input:	dname, ename, lebp, lecp, compx, n_comp		*/
  /***	Function:	Actually creates an output binary component.	*/
  /***	Output:	lebp, lecp				*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl Version_offset	fixed bin (18) unsigned static
			options (constant) init (10);
  dcl Userid_offset		fixed bin (18) unsigned static
			options (constant) init (11);
  dcl Backpointer_offset	fixed bin (18) unsigned static
			options (constant) init (15);
  dcl Block_length_offset	fixed bin (18) unsigned static
			options (constant) init (15);
  dcl Next_block_offset	fixed bin (18) unsigned static
			options (constant) init (16);
  dcl Source_map_offset	fixed bin (18) unsigned static
			options (constant) init (14);
  dcl Area_ptr_offset	fixed bin (18) unsigned static
			options (constant) init (14);
  dcl None		fixed bin static options (constant) init (0);

  /* parameters */

  dcl compx		fixed bin parameter;
  dcl dname		char (*) parameter;
  dcl ename		char (*) parameter;
  dcl lebp		ptr parameter;
  dcl lecp		ptr parameter;
  dcl leip		ptr parameter;
  dcl n_comp		fixed bin parameter;

  /* procedures */

  dcl date_time_		entry (fixed bin (71), char (*));
  dcl get_system_free_area_	entry () returns (ptr);
  dcl hcs_$get_uid_seg	entry (ptr, bit (36) aligned, fixed bin (35));
  dcl initiate_file_	entry (char (*), char (*), bit (*), ptr,
			fixed bin (24), fixed bin (35));
  dcl le_emit_defs_		entry (ptr, ptr, fixed bin);
  dcl le_emit_firstref_	entry (ptr, ptr, fixed bin);
  dcl le_emit_static_	entry (ptr, ptr, fixed bin);
  dcl le_emit_symbol_	entry (ptr, ptr, fixed bin);
  dcl le_emit_text_		entry (ptr, ptr, fixed bin);
  dcl le_error_		entry options (variable);
  dcl le_util_$get_user_and_version
			entry (char (*), char (*));
  dcl object_info_$brief	entry (ptr, fixed bin (24), ptr, fixed bin (35))
			;
  dcl pathname_		entry (char (*), char (*)) returns (char (168));

  /* external */

  dcl le_data_$caller	external char (32) varying;
  dcl le_data_$version_number external fixed bin;
  dcl 01 le_data_$symbol_table
			external aligned like std_symbol_header;

  /* based */

  dcl 01 bd_map		aligned based (bd_mapp),
       02 dcl_version	fixed bin,
       02 n_components	fixed bin,
       02 component		dim (comp_count refer (bd_map.n_components))
			aligned like bindmap.component,
       02 bf_name		aligned like bindmap.bf_name,
       02 bf_date_up	char (24),
       02 bf_date_mod	char (24);
  dcl 01 comp		aligned like le_comp based (compp);
  dcl 01 end_overlay	aligned based (addr (end_relp)),
       02 pad		bit (35) unaligned,
       02 odd		bit (1) unaligned;
  dcl 01 leb		aligned based (lebp),
       02 header		aligned like le_binaries.header,
       02 binary		dim (0:0 refer (leb.n_binaries))
			like le_binaries.binary;
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 lei		aligned based (leip),
       02 header		aligned like le_input.header,
       02 opt		dim (0 refer (lei.n_opts)) like le_option;
  dcl 01 les		aligned based (lesp),
       02 header		aligned like le_segnames.header,
       02 segname		dim (0 refer (les.n_segnames))
			like le_segnames.segname;
  dcl 01 sc_map		aligned based (sc_mapp),
       02 version		fixed bin,
       02 number		fixed bin,
       02 map		dim (source_count refer (sc_map.number))
			aligned like source_map.map;
  dcl 01 std_sb_hdr		aligned like std_symbol_header based;
  dcl sys_area		area based (sys_areap);

  /* automatic */

  dcl bd_mapp		ptr automatic;
  dcl bmp			ptr automatic;
  dcl bx			fixed bin automatic;
  dcl c			fixed bin automatic;
  dcl cname		char (32) automatic;
  dcl comp_count		fixed bin automatic;
  dcl compp		ptr automatic;
  dcl date_str		char (24) automatic;
  dcl dummy		fixed bin (18) unsigned automatic;
  dcl ec			fixed bin (35) automatic;
  dcl end_relp		fixed bin (18) unsigned automatic;
  dcl i			fixed bin automatic;
  dcl lesp		ptr automatic;
  dcl source_count		fixed bin automatic;
  dcl n_words		fixed bin (18) unsigned automatic;
  dcl nm			char (32) automatic;
  dcl nml			fixed bin (18) unsigned automatic;
  dcl ocudp		ptr automatic;
  dcl 01 oi		aligned like object_info automatic;
  dcl open_flags		bit (6) automatic;
  dcl pad_word		bit (36) aligned automatic;
  dcl pn			char (168) automatic;
  dcl pnl			fixed bin automatic;
  dcl prev_start		fixed bin (18) unsigned automatic;
  dcl rel_str		char (4096) varying automatic;
  dcl rel_strp		ptr automatic;
  dcl relp		fixed bin (18) unsigned automatic;
  dcl 01 sb_hdr		aligned like std_symbol_header automatic;
  dcl sbp			ptr automatic;
  dcl sc_mapp		ptr automatic;
  dcl segname		char (32) varying automatic;
  dcl start		fixed bin automatic;
  dcl sys_areap		ptr automatic;
  dcl userid		char (32) automatic;
  dcl version		char (256) automatic;

  /* conditions */

  dcl cleanup		condition;

  /* builtin */

  dcl addr		builtin;
  dcl addrel		builtin;
  dcl bin			builtin;
  dcl bit			builtin;
  dcl char		builtin;
  dcl clock		builtin;
  dcl copy		builtin;
  dcl currentsize		builtin;
  dcl divide		builtin;
  dcl length		builtin;
  dcl ltrim		builtin;
  dcl null		builtin;
  dcl rtrim		builtin;
  dcl size		builtin;
  dcl unspec		builtin;

  sys_areap = get_system_free_area_ ();

  /* arrange to clean up on an unexpected release */

  ocudp = null;
  sc_mapp = null;
  bd_mapp = null;

  on cleanup
    begin;
    if ocudp ^= null
      then call ocu_$release (ocudp);
    if sc_mapp ^= null
      then free sc_map in (sys_area);
    if bd_mapp ^= null
      then free bd_map in (sys_area);
  end;

  /* set up the open options for the component */

  open_flags = OPEN_FLAGS_BOUND | OPEN_FLAGS_PROCEDURE;
  if lec.header.flags.separate_static
    then open_flags = open_flags | OPEN_FLAGS_SEPARATE_STATIC;
  if lec.flags.perprocess_static
    then open_flags = open_flags | OPEN_FLAGS_PERPROCESS_STATIC;
  if n_comp > 1
    then open_flags = open_flags | OPEN_FLAGS_NO_HASHTABLE;

  /* determine the name of the component, and the name of the segname	*/
  /* definition block to contain the symbol_table and bindmap defs	*/

  if n_comp > 1
    then do;
      cname = ltrim (char (compx));
      segname = rtrim (ename) || "." || rtrim (cname);
    end;
    else cname, segname = rtrim (ename);

  /* open the new object segment */

  call ocu_$open (dname, cname, open_flags, ocudp, ec);
  if ec ^= 0
    then call le_error_ (LE_ABORT_ERROR, ec, "Opening ^a",
	    pathname_ (dname, cname));

  /* find the first component to be emitted */

  start = None;

  do c = 1 to lec.n_components while (start = None);
    if lec.comp (c).target = compx
      then start = c;
  end;

  /* if we have a MSF component, emit the msf map */

  if n_comp > 1
    then call ocu_$emit_msf_map (ocudp, n_comp + 1, (compx));

  /* emit the definition block for the bound unit */

  dummy = ocu_$emit_segname (ocudp, segname, ""b);
  dummy = ocu_$emit_definition (ocudp, "symbol_table", Symbol, 0, ""b);
  dummy = ocu_$emit_definition (ocudp, "bind_map", Symbol, 0, ""b);

  /* emit the symbol header for the bound unit */

  unspec (sb_hdr) = ""b;

  sb_hdr.dcl_version = 1;
  sb_hdr.identifier = "bind_map";
  sb_hdr.gen_number = le_data_$version_number;
  sb_hdr.gen_created = le_data_$symbol_table.object_created;
  sb_hdr.object_created = clock ();
  sb_hdr.generator = le_data_$caller;
  sbp = lec.comp (start).orig.symbp;
  sb_hdr.text_boundary = sbp -> std_sb_hdr.text_boundary;
  sb_hdr.stat_boundary = sbp -> std_sb_hdr.stat_boundary;

  /* calculate the size and relinfo */

  n_words = size (sb_hdr);
  rel_strp = addrel (addr (rel_str), 1);
  rel_str = copy ("aa", n_words);

  /* emit the symbol header */

  dummy = ocu_$emit_symbol (ocudp, addr (sb_hdr), rel_strp, n_words);

  call le_util_$get_user_and_version (userid, version);

  /* create the version string, relinfo, etc and emit the version string */

  n_words = divide (length (rtrim (version)) + 3, 4, 17, 0);
  rel_str = copy ("aa", n_words);
  dummy = ocu_$emit_symbol (ocudp, addr (version), rel_strp, n_words);

  /* backpatch the string offset and length into the symbol header */

  call ocu_$backpatch (ocudp, "symbol", Version_offset, "left 18 unsigned",
       (dummy));
  call ocu_$backpatch (ocudp, "symbol", Version_offset, "right 18 unsigned",
       length (rtrim (version)));

  /* get the userid, create relinfo for it and emit it */

  n_words = divide (length (rtrim (userid)) + 3, 4, 17, 0);
  rel_str = copy ("aa", n_words);
  dummy = ocu_$emit_symbol (ocudp, addr (userid), rel_strp, n_words);

  /* backpatch the offset and length into the symbol header */

  call ocu_$backpatch (ocudp, "symbol", Userid_offset, "left 18 unsigned",
       (dummy));
  call ocu_$backpatch (ocudp, "symbol", Userid_offset, "right 18 unsigned",
       length (rtrim (userid)));

  /*** ****************************************************************/
  /***							*/
  /***	NOTE:	when the relocation offsets are being calculated	*/
  /***		for the various sections in le_msf_partition_,	*/
  /***		it is assumed that the only things preceeding the	*/
  /***		first components symbol block are the symbol	*/
  /***		header, the userid string, and the version string	*/
  /***		If this is changed, adjust the relocation offset	*/
  /***		calculations accordingly.			*/
  /***							*/
  /*** ****************************************************************/

  comp_count = 0;

  do c = start to lec.n_components;
    compp = addr (lec.comp (c));

    /* if the component is in the target component currently being	*/
    /* then emit all of its sections				*/

    if comp.target = compx & comp.flags.include
      then do;

        /* emit each section of the object segment */

        call le_emit_defs_ (ocudp, lecp, c);
        call le_emit_text_ (ocudp, lecp, c);
        call le_emit_static_ (ocudp, lecp, c);
        call le_emit_symbol_ (ocudp, lecp, c);
        call le_emit_firstref_ (ocudp, lecp, c);

        /* count the number of components in this output component */

        comp_count = comp_count + 1;
      end;
  end;

  /* thread the symbol blocks together */

  prev_start = 0;

  do c = start to lec.n_components;
    compp = addr (lec.comp (c));
    if comp.target = compx & comp.flags.include
      then do;

        /* backpatch the section backpointer */

        call ocu_$backpatch (ocudp, "symbol",
	   comp.new.rel_symb + Backpointer_offset, "left 18 signed",
	   -comp.new.rel_symb);

        /* backpatch the new section length */

        call ocu_$backpatch (ocudp, "symbol",
	   comp.new.rel_symb + Block_length_offset,
	   "right 18 unsigned", (comp.orig.symbl));

        /* backpatch the next block offset */

        call ocu_$backpatch (ocudp, "symbol",
	   prev_start + Next_block_offset, "left 18 unsigned",
	   comp.new.rel_symb - prev_start);
        prev_start = comp.new.rel_symb;
      end;
  end;

  /* create the source_map */

  source_count, i = 0;

  /* find the number of unique source pathnames */

  do c = start to lec.n_components while (i < comp_count);
    compp = addr (lec.comp (c));
    if comp.flags.include & comp.target = compx
      then do;
        i = i + 1;
        if comp.flags.unique_path
	then source_count = source_count + 1;
      end;
  end;

  /* allocate the source map */

  allocate sc_map in (sys_area);

  sc_map.version = 1;

  i = 0;
  do c = start to lec.n_components while (i < source_count);
    compp = addr (lec.comp (c));
    if comp.target = compx & comp.flags.include & comp.flags.unique_path
      then do;

        /* if this component was included in the current output	*/
        /* component, then add it to the source map.		*/

        i = i + 1;
        sc_map.map (i).uid = comp.uid;
        sc_map.map (i).dtm = comp.dtcm;

        /* emit the pathname string and save the relpointer */

        pn = comp.path;
        pnl = length (rtrim (pn));
        n_words = divide (pnl + 3, 4, 17, 0);
        rel_str = copy ("aa", n_words);
        relp = ocu_$emit_symbol (ocudp, addr (pn), rel_strp, n_words);
        sc_map.map (i).pathname.offset = bit (bin (relp, 18));
        sc_map.map (i).pathname.size = bit (bin (pnl, 18));
        end_relp = relp + n_words;
      end;
  end;

  if end_overlay.odd
    then do;

      /* force source_map alignment to a doubleword boundary */

      pad_word = ""b;
      rel_str = "aa";
      end_relp = ocu_$emit_symbol (ocudp, addr (pad_word), rel_strp, 1)
	 + 1;
    end;

  /* now we actually emit the source map */

  n_words = currentsize (sc_map);
  rel_str = copy ("aa", n_words);

  relp = ocu_$emit_symbol (ocudp, sc_mapp, rel_strp, n_words);
  call ocu_$backpatch (ocudp, "symbol", Source_map_offset,
       "left 18 unsigned", (relp));

  end_relp = relp + n_words;

  /* free the local copy */

  free sc_map in (sys_area);
  sc_mapp = null;

  /* create the bind_map */

  i = 0;

  allocate bd_map in (sys_area);

  bd_map.dcl_version = 1;

  do c = start to lec.n_components while (i < comp_count);
    compp = addr (lec.comp (c));
    if comp.target = compx
      then do;

        /* for each component in the current output component, add a	*/
        /* bind map entry.					*/

        i = i + 1;

        /* emit the name string and insert the relpointer into the map */

        nm = comp.name;
        nml = length (rtrim (nm));
        n_words = divide (nml + 3, 4, 17, 0);
        rel_str = copy ("aa", n_words);
        relp = ocu_$emit_symbol (ocudp, addr (nm), rel_strp, n_words);
        end_relp = relp + n_words;
        bd_map.component (i).name.name_ptr = bit (bin (relp), 18);
        bd_map.component (i).name.name_lng = bit (bin (nml), 18);
        bd_map.component (i).comp_name = comp.compiler;
        bd_map.component (i).text_start = bit (bin (comp.new.rel_text), 18);
        bd_map.component (i).text_lng = bit (bin (comp.orig.textl), 18);
        bd_map.component (i).stat_start = bit (bin (comp.new.rel_stat), 18);
        bd_map.component (i).stat_lng = bit (bin (comp.orig.statl), 18);
        bd_map.component (i).symb_start = bit (bin (comp.new.rel_symb), 18);
        bd_map.component (i).symb_lng = bit (bin (comp.orig.symbl), 18);
        lesp = comp.tables.lesp;
        bd_map.component (i).defblock_ptr =
	   bit (bin (les.segname (1).relp), 18);
        bd_map.component (i).n_blocks =
	   bit (bin (comp.orig.n_symb_blocks), 18);
      end;
  end;

  /* determine a bindfile name string and emit it (if any) */

  if lei.bindfile.name = ""
    then do;
      bd_map.bf_name.bf_name_ptr = ""b;
      bd_map.bf_name.bf_name_lng = ""b;
    end;
    else do;
      nm = lei.bindfile.name;
      nml = length (rtrim (nm));
      n_words = divide (nml + 3, 4, 17, 0);
      rel_str = copy ("aa", n_words);
      relp = ocu_$emit_symbol (ocudp, addr (nm), rel_strp, n_words);
      bd_map.bf_name.bf_name_ptr = bit (bin (relp), 18);
      bd_map.bf_name.bf_name_lng = bit (bin (nml), 18);
    end;

  /* get the bindfile dates from the input structure */

  call date_time_ (lei.bindfile.dt_updated, date_str);
  bd_map.bf_date_up = date_str;
  call date_time_ (lei.bindfile.dt_modified, date_str);
  bd_map.bf_date_mod = date_str;

  /* force bindmap alignment onto a doubleword boundary */

  if end_overlay.odd
    then do;
      rel_str = "aa";
      end_relp = ocu_$emit_symbol (ocudp, addr (pad_word), rel_strp, 1) + 1;
    end;

  n_words = currentsize (bd_map);
  rel_str = copy ("aa", n_words);

  /* emit the bindmap */

  relp = ocu_$emit_symbol (ocudp, bd_mapp, rel_strp, n_words);

  /* patch the bindmap offset into the header */

  call ocu_$backpatch (ocudp, "symbol", Area_ptr_offset, "right 18 unsigned",
       (relp));

  free bd_map in (sys_area);

  bd_mapp = null;

  /* close the ocu_ invocation and actually create the segment */

  call ocu_$close (ocudp, ec);
  if ec ^= 0
    then call le_error_ (LE_ABORT_ERROR, ec, "^/While closing component ^a.",
	    pathname_ (dname, ename));

  /* get a pointer to the output component for the binaries structure */

  bx, leb.n_binaries = leb.n_binaries + 1;
  call initiate_file_ (dname, cname, R_ACCESS, leb.binary (bx).segp,
       leb.binary (bx).bc, 0);

  /* get the object info for the component */

  oi.version_number = object_info_version_2;

  call object_info_$brief (leb.binary (bx).segp, leb.binary (bx).bc,
       addr (oi), ec);
  leb.binary (bx).textp = oi.textp;
  leb.binary (bx).defnp = oi.defp;
  leb.binary (bx).linkp = oi.linkp;
  leb.binary (bx).symbp = oi.symbp;
  leb.binary (bx).statp = oi.statp;
  leb.binary (bx).textl = oi.tlng;
  leb.binary (bx).defnl = oi.dlng;
  leb.binary (bx).linkl = oi.llng;
  leb.binary (bx).symbl = oi.slng;
  leb.binary (bx).statl = oi.ilng;

  call hcs_$get_uid_seg (leb.binary (bx).segp, leb.binary (bx).uid, ec);

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include access_mode_values;
%include bind_map;
%include le_data;
%include le_input;
%include object_info;
%include ocu_dcls;
%include std_symbol_header;
%include source_map;

  end le_make_component_;
