/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written as the command interface to le.
  2) change(86-12-19,Elhard), approve(86-12-19,PBF7505),
     audit(86-12-22,DGHowe), install(87-01-05,MR12.0-1256):
     Changed to use "linkage_editor" in error messages rather than "le".
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

linkage_editor:
le:
  proc;

  /*** ****************************************************************/
  /***							*/
  /***	Name:	linkage_editor, le				*/
  /***	Syntax:	le paths {-control_args}			*/
  /***	Function:	le is the command interface to the le_ linkage	*/
  /***		editor subroutine.  Its function is to parse the	*/
  /***		command line arguments and create the le_ input	*/
  /***		structure.				*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);

  dcl ARCHIVE_SUFFIX	char (8) static options (constant)
			init (".archive");

  /* procedures */

  dcl archive_$next_component entry (ptr, fixed bin (24), ptr, fixed bin (24),
			char (*), fixed bin (35));
  dcl check_star_name_$entry	entry (char (*), fixed bin (35));
  dcl com_err_		entry () options (variable);
  dcl cu_$arg_count		entry (fixed bin, fixed bin (35));
  dcl cu_$arg_ptr		entry (fixed bin, ptr, fixed bin (21),
			fixed bin (35));
  dcl cv_dec_check_		entry (char (*), fixed bin (35))
			returns (fixed bin (35));
  dcl expand_pathname_	entry (char (*), char (*), char (*),
			fixed bin (35));
  dcl expand_pathname_$component
			entry (char (*), char (*), char (*), char (*),
			fixed bin (35));
  dcl get_system_free_area_	entry () returns (ptr);
  dcl get_temp_segment_	entry (char (*), ptr, fixed bin (35));
  dcl get_wdir_		entry () returns (char (168));
  dcl hcs_$star_dir_list_	entry (char (*), char (*), fixed bin (3), ptr,
			fixed bin, fixed bin, ptr, ptr, fixed bin (35));
  dcl hcs_$status_minf	entry (char (*), char (*), fixed bin (1),
			fixed bin (2), fixed bin (24), fixed bin (35));
  dcl initiate_file_	entry (char (*), char (*), bit (*), ptr,
			fixed bin (24), fixed bin (35));
  dcl initiate_file_$component
			entry (char (*), char (*), char (*), bit (*),
			ptr, fixed bin (24), fixed bin (35));
  dcl ioa_		entry () options (variable);
  dcl le_			entry (ptr, fixed bin, fixed bin (35));
  dcl match_star_name_	entry (char (*), char (*), fixed bin (35));
  dcl pathname_		entry (char (*), char (*)) returns (char (168));
  dcl pathname_$component	entry (char (*), char (*), char (*))
			returns (char (194));
  dcl release_temp_segment_	entry (char (*), ptr, fixed bin (35));
  dcl terminate_file_	entry (ptr, fixed bin (24), bit (*),
			fixed bin (35));

  /* external */

  dcl error_table_$bad_conversion
			external fixed bin (35);
  dcl error_table_$badopt	external fixed bin (35);
  dcl error_table_$dirseg	external fixed bin (35);
  dcl error_table_$msf	external fixed bin (35);
  dcl error_table_$noarg	external fixed bin (35);
  dcl error_table_$nomatch	external fixed bin (35);
  dcl le_data_$version_string external char (64) varying;
  dcl le_et_$too_many_options external fixed bin (35);
  dcl sys_info$max_seg_size	external fixed bin (35);
  dcl linkage_editor_severity_
			external fixed bin (35);

  /* based */

  dcl arg			char (argl) based (argp);
  dcl 01 lei		aligned based (leip),
       02 header		aligned like le_input.header,
       02 opt		dim (0 refer (lei.n_opts)) like le_option;

  /* automatic */

  dcl argl		fixed bin (21) automatic;
  dcl argp		ptr automatic;
  dcl argx		fixed bin automatic;
  dcl ec			fixed bin (35) automatic;
  dcl has_delete		bit (1) automatic;
  dcl has_global		bit (1) automatic;
  dcl has_retain		bit (1) automatic;
  dcl i			fixed bin automatic;
  dcl leip		ptr automatic;
  dcl nargs		fixed bin automatic;
  dcl severity		fixed bin automatic;
  dcl version_flag		bit (1) automatic;

  /* conditions */

  dcl cleanup		condition;

  /* builtin */

  dcl after		builtin;
  dcl before		builtin;
  dcl binary		builtin;
  dcl currentsize		builtin;
  dcl divide		builtin;
  dcl index		builtin;
  dcl length		builtin;
  dcl null		builtin;
  dcl rtrim		builtin;
  dcl size		builtin;
  dcl string		builtin;
  dcl substr		builtin;
  dcl unspec		builtin;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


  /* make sure that the le_info temp seg goes away on a release */

  leip = null;

  on cleanup
    begin;
    if leip ^= null
      then call release_temp_segment_ ("le", leip, ec);
  end;

  /* see how many arguments we have */

  call cu_$arg_count (nargs, ec);
  if ec ^= 0
    then call abort (ec, "");

  /* print a usage message if invoked with no arguments */

  if nargs = 0
    then call abort (0, "Usage: le path{s} {-control_args}");

  call get_temp_segment_ ("le", leip, ec);

  /* set up default values */

  lei.version = le_input_version_1;
  lei.header.name = "linkage_editor";
  lei.output_file.dir = get_wdir_ ();
  lei.output_file.entry = "a.out";
  lei.abort_severity = 3;
  lei.display_severity = 0;
  lei.component_size = 255;
  lei.bindfile.name = "";
  lei.bindfile.dt_updated = 0;
  lei.bindfile.dt_modified = 0;

  string (lei.header.flags) = ""b;
  lei.flags.auto_segnames = true;

  version_flag = true;
  has_global = false;
  has_retain = false;
  has_delete = false;

  /* scan through the arguments and process them */

  argx = 1;
  do while (argx <= nargs);

    /* read the argument */

    call cu_$arg_ptr (argx, argp, argl, ec);

    /* first handle input pathnames */

    if index (arg, "-") ^= 1
      then do;

        /* evaluate path as seg/dir/archive/starname/archive_starname */

        call expand_le_path (PATH, arg, leip, ec);
        if ec ^= 0
	then call abort (ec, arg);
      end;

    /* now handle library paths and other ctl args which take arguments */

    else if arg = "-library" | arg = "-lb"
      then do;

        /* make sure there is a next argument */

        if argx = nargs
	then call abort (error_table_$noarg,
		"library specification expected.");

        /* get the next argument */

        argx = argx + 1;
        call cu_$arg_ptr (argx, argp, argl, ec);

        /* expand pathname into discrete option entries */

        call expand_le_path (LIBRARY, arg, leip, ec);
        if ec ^= 0
	then call abort (ec, arg);
      end;

    else if arg = "-retain" | arg = "-ret"
      then do;

        has_retain = true;

        /* if there is no next argument, treat as global retain */

        if argx = nargs
	then call add_ep (RETAIN, "", false, leip, ec);
	else do;

	  /* otherwise fetch the next argument */

	  argx = argx + 1;
	  call cu_$arg_ptr (argx, argp, argl, ec);

	  /* if it is another control arg, treat as global retain	*/
	  /* and back up the argument count so the next control arg	*/
	  /* gets processed properly.				*/

	  if index (arg, "-") = 1
	    then do;
	      call add_ep (RETAIN, "", false, leip, ec);
	      argx = argx - 1;
	    end;

	    /* otherwise, add a retain for the entrpoint specified */

	    else call add_ep (RETAIN, arg, false, leip, ec);
	end;
      end;

    else if arg = "-delete" | arg = "-dl"
      then do;

        has_delete = true;

        /* if there is no next arg, treat as a global delete */

        if argx = nargs
	then call add_ep (DELETE, "", false, leip, ec);
	else do;

	  /* otherwise, fetch the next argument */

	  argx = argx + 1;
	  call cu_$arg_ptr (argx, argp, argl, ec);

	  /* if it is a control argument, treat as a global delete	*/
	  /* and back up the arg index so the next arg is processed	*/
	  /* properly.					*/

	  if index (arg, "-") = 1
	    then do;
	      call add_ep (DELETE, "", false, leip, ec);
	      argx = argx - 1;
	    end;

	    /* otherwise, add the delete option for the given entrypoint */

	    else call add_ep (DELETE, arg, false, leip, ec);
	end;
      end;

    else if arg = "-output_file" | arg = "-of"
      then do;

        /* make sure there is a next argument */

        if argx = nargs
	then call abort (error_table_$noarg,
		"Output file pathname expected.");

        /* fetch the output filename */

        argx = argx + 1;
        call cu_$arg_ptr (argx, argp, argl, ec);

        /* expand it to a dirname and entryname */

        call expand_pathname_ (arg, lei.output_file.dir,
	   lei.output_file.entry, ec);
        if ec ^= 0
	then call abort (ec, arg);
      end;

    else if arg = "-component_size" | arg = "-compsz"
      then do;

        /* make sure there is a next argument */

        if argx = nargs
	then call abort (error_table_$noarg, "Component size expected.");

        /* fetch the component size */

        argx = argx + 1;
        call cu_$arg_ptr (argx, argp, argl, ec);

        /* try converting it and make sure it is a number */

        lei.component_size = cv_dec_check_ (arg, ec);
        if ec ^= 0
	then call abort (error_table_$bad_conversion, arg);

        /* make sure it is in the range 4-255 */

        if lei.component_size > 255 | lei.component_size < 4
	then call abort (error_table_$badopt, "-component_size " || arg);
      end;

    else if arg = "-display_severity" | arg = "-dsv"
      then do;

        /* make sure there is a next argument */

        if argx = nargs
	then call abort (error_table_$noarg, "Display severity expected.");

        /* fetch the severity */

        argx = argx + 1;
        call cu_$arg_ptr (argx, argp, argl, ec);

        /* try converting it and make sure it is a number */

        lei.display_severity = cv_dec_check_ (arg, ec);
        if ec ^= 0
	then call abort (error_table_$bad_conversion, arg);

        /* make sure it is in the range 1 - 5 */

        if lei.display_severity > 5 | lei.display_severity < 1
	then call abort (error_table_$badopt, "-display_severity " || arg);
      end;

    else if arg = "-abort_severity" | arg = "-asv"
      then do;

        /* make sure there is a next argument */

        if argx = nargs
	then call abort (error_table_$noarg, "Abort severity expected.");

        /* fetch the severity */

        argx = argx + 1;
        call cu_$arg_ptr (argx, argp, argl, ec);

        /* try converting it and make sure it is a number */

        lei.abort_severity = cv_dec_check_ (arg, ec);
        if ec ^= 0
	then call abort (error_table_$bad_conversion, arg);

        /* make sure it is in the range 0 - 3 */

        if lei.abort_severity > 3 | lei.abort_severity < 0
	then call abort (error_table_$badopt, "-abort_severity " || arg);
      end;

    /* now handle args with no parameters */

    else if arg = "-force" | arg = "-fc"
      then lei.flags.force = true;

    else if arg = "-no_force" | arg = "-nfc"
      then lei.flags.force = false;

    else if arg = "-list" | arg = "-ls"
      then do;
        lei.flags.list = true;
        lei.flags.map = false;
      end;

    else if arg = "-map"
      then do;
        lei.flags.map = true;
        lei.flags.list = false;
      end;

    else if arg = "-no_list" | arg = "-nls"
      then do;
        lei.flags.map = false;
        lei.flags.list = false;
      end;

    else if arg = "-version" | arg = "-vers"
      then version_flag = true;

    else if arg = "-no_version" | arg = "-nvers"
      then version_flag = false;

    else if arg = "-debug" | arg = "-db"
      then lei.flags.debug = true;

    else if arg = "-no_debug" | arg = "-ndb"
      then lei.flags.debug = false;

    else if arg = "-auto_segnames" | arg = "-asn"
      then lei.flags.auto_segnames = true;

    else if arg = "-no_auto_segnames" | arg = "-nasn"
      then lei.flags.auto_segnames = false;

    else call abort (error_table_$badopt, arg);

    argx = argx + 1;

  end;

  /* make sure everything is kosher, and fill in things like the	*/
  /* component that a given entrypoint is found in.		*/

  call validate_opts (leip);

  /* print the version message if requested */

  if version_flag
    then call ioa_ ("^a", le_data_$version_string);

  /* call le_ to actually assemble the new binary */

  call le_ (leip, severity, ec);

  linkage_editor_severity_ = severity;

  if ec ^= 0
    then do;
      call ioa_ ("^/An error of severity ^d has occurred.", severity);
      call abort (ec, "");
    end;

  /* release the temp segment if required */

ABORT:
  if leip ^= null
    then do;

      /* terminate all of the files initiated */

      do i = 1 to lei.n_opts;
        if lei.opt (i).type = PATH | lei.opt (i).type = LIBRARY
	then call terminate_file_ (lei.opt (i).optp, lei.opt (i).bc,
		TERM_FILE_TERM, ec);
      end;
      call release_temp_segment_ ("le", leip, ec);
      leip = null;
    end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


expand_le_path:
  proc (type,			/** PATH or LIBRARY     (in )	*/
       path,			/** path to expand	    (in ) */
       leip,			/** le_info pointer	    (i/o) */
       ec);			/** error code	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	expand_le_path				*/
  /***	Input:	type, path, leip				*/
  /***	Function:	given a le input or library path specification,	*/
  /***		expand it into a set of discrete paths and add	*/
  /***		them to the option list in the lei structure.	*/
  /***	Output:	leip, ec					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl type		fixed bin parameter;
  dcl path		char (*) parameter;
  dcl leip		ptr parameter;
  dcl ec			fixed bin (35) parameter;

  /* automatic */

  dcl archive		bit (1) automatic;
  dcl bc			fixed bin (24) automatic;
  dcl cn			char (32) automatic;
  dcl dn			char (168) automatic;
  dcl en			char (32) automatic;
  dcl pathname		char (194) automatic;
  dcl segp		ptr automatic;

  /* expand the pathname into a dirname/entryname/starname or	*/
  /* dirname/starname combination.				*/

  call expand_pathname_$component (path, dn, en, cn, ec);
  if ec ^= 0
    then return;

  /* if there is a component, we have either an archive path or an	*/
  /* archive component starname.				*/

  if cn ^= ""
    then do;

      /* check the component name for star status */

      call check_star_name_$entry (cn, ec);
      if ec = 0
        then do;

	/* simple archive component pathname */

	call initiate_file_$component (dn, en, cn, R_ACCESS, segp, bc, ec);
	if ec ^= 0
	  then return;
	pathname = pathname_$component (dn, en, cn);

	/* add the option to the le_input structure */

	call add_opt (type, cn, pathname, bc, segp, ""b, leip, ec);
	return;
        end;
      else if ec = 1 | ec = 2
        then do;

	/* archive component starname of some variety */

	call expand_le_archive_star (type, dn, en, cn, leip, ec);
	return;
        end;
      else return;
    end;

  /* we have a non-archive path, see if it is a starname */

  call check_star_name_$entry (en, ec);
  if ec = 0
    then do;

      /* if not a starname, then try to initiate it */

      call initiate_file_ (dn, en, R_ACCESS, segp, bc, ec);
      if ec = error_table_$dirseg
        then do;

	/* the target is a directory, if it is a MSF, return an	*/
	/* error code.					*/

	call hcs_$status_minf (dn, en, 0, 0, bc, ec);
	if bc > 0
	  then do;

	    /* target is an MSF, return an error code */

	    ec = error_table_$msf;
	    return;
	  end;

	/* target is a directory so assume dir>** */

	dn = pathname_ (dn, en);
	call expand_le_star (type, dn, "**", leip, ec);
	return;
        end;
      else if ec = 0
        then do;

	/* target is a segment, see if it has a .archive suffix.	*/
	/* if it does, treat it as archive_segment_path::**,	*/
	/* otherwise, just add the segment itself.		*/

	pathname = pathname_ (dn, en);
	archive = false;
	if length (rtrim (en)) > length (ARCHIVE_SUFFIX)
	  then if substr (en,
		  length (rtrim (en)) - length (ARCHIVE_SUFFIX) + 1,
		  length (ARCHIVE_SUFFIX)) = ARCHIVE_SUFFIX
	         then archive = true;

	if archive
	  then call expand_le_archive_star (type, dn, en, "**", leip, ec);
	  else call add_opt (type, en, pathname, bc, segp, ""b, leip, ec);
	return;
        end;
      else return;
    end;
  else if ec = 1 | ec = 2
    then do;

      /* the entryname is a starname of some sort, expand the	*/
      /* starname into discrete segments and add them to the 	*/
      /* option list in le_input.				*/

      call expand_le_star (type, dn, en, leip, ec);
      return;
    end;
  else return;

  end expand_le_path;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


expand_le_archive_star:
  proc (type,			/** option type	    (in )	*/
       dname,			/** dir name	    (in )	*/
       ename,			/** entry name	    (in ) */
       sname,			/** component starname  (in ) */
       leip,			/** le_input pointer    (i/o) */
       ec);			/** error_code	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	expand_le_archive_star			*/
  /***	Input:	type, dname, ename, sname, leip		*/
  /***	Function:	expands an archive component starname into a set	*/
  /***		of discrete option entries in the le_input	*/
  /***		structure.				*/
  /***	Output:	leip, ec					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl type		fixed bin parameter;
  dcl dname		char (*) parameter;
  dcl ename		char (*) parameter;
  dcl sname		char (*) parameter;
  dcl leip		ptr parameter;
  dcl ec			fixed bin (35) parameter;

  /* automatic */

  dcl archive_bc		fixed bin (24) automatic;
  dcl archivep		ptr automatic;
  dcl c_bc		fixed bin (24) automatic;
  dcl complete_archive	bit (1) automatic;
  dcl cname		char (32) automatic;
  dcl cp			ptr automatic;
  dcl no_match		bit (1) automatic;
  dcl pathname		char (194) automatic;

  /* first initiate the archive itself */

  call initiate_file_ (dname, ename, R_ACCESS, archivep, archive_bc, ec);
  if ec ^= 0
    then return;

  /* save some time by checking for a complete archive match now */

  call check_star_name_$entry (sname, ec);
  if ec = 2
    then do;
      pathname = pathname_ (dname, ename);
      complete_archive = true;
    end;
    else complete_archive = false;

  /* preset the component info */

  cp = null;
  c_bc = 0;
  cname = "";
  no_match = true;

  /* get the first component */

  call archive_$next_component (archivep, archive_bc, cp, c_bc, cname, ec);
  if ec ^= 0
    then return;

  /* scan through the components adding the matching ones */

  do while (cp ^= null);
    if ^complete_archive
      then do;

        /* the starname does not necessarily match everything so	*/
        /* compare the component name against the starname		*/

        call match_star_name_ (cname, sname, ec);
        if ec = 0
	then do;

	  /* the name matches, so generate the path and add the option */

	  no_match = false;
	  pathname = pathname_$component (dname, ename, cname);
	  call add_opt (type, cname, pathname, c_bc, cp, ""b, leip, ec);
	  if ec ^= 0
	    then return;
	end;
      end;
      else do;

        /* all of the components are being added so just add the	*/
        /* option with the common pathname			*/

        no_match = false;
        call add_opt (type, cname, pathname, c_bc, cp, ""b, leip, ec);
        if ec ^= 0
	then return;
      end;

    /* get the next archive component */

    call archive_$next_component (archivep, archive_bc, cp, c_bc, cname, ec);
    if ec ^= 0
      then return;
  end;

  /* generate an error code if no components were found matching the	*/
  /* starname given.					*/

  if no_match
    then ec = error_table_$nomatch;

  end expand_le_archive_star;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


expand_le_star:
  proc (type,			/** option type	    (in )	*/
       dname,			/** directory name	    (in ) */
       sname,			/** starname	    (in ) */
       leip,			/** le_input pointer    (i/o) */
       ec);			/** error code	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	expand_le_star				*/
  /***	Input:	type, dname, sname, leip			*/
  /***	Function:	expands a starname and searches the directory for	*/
  /***		single segments matching the starname.		*/
  /***	Output:	leip, ec					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl type		fixed bin parameter;
  dcl dname		char (*) parameter;
  dcl sname		char (*) parameter;
  dcl leip		ptr parameter;
  dcl ec			fixed bin (35) parameter;

  /* based */

  dcl sys_area		area based (sys_areap);

  /* automatic */

  dcl archive		bit (1) automatic;
  dcl bc			fixed bin (24) automatic;
  dcl compx		fixed bin automatic;
  dcl ename		char (32) automatic;
  dcl last		fixed bin automatic;
  dcl pathname		char (168) automatic;
  dcl segp		ptr automatic;
  dcl sys_areap		ptr automatic;

  sys_areap = get_system_free_area_ ();

  star_list_branch_ptr = null;
  star_list_names_ptr = null;

  /* make sure the star structures get freed if we get unwound */

  on cleanup
    begin;
    if star_list_names_ptr ^= null
      then free star_list_names in (sys_area);
    if star_list_branch_ptr ^= null
      then free star_dir_list_branch in (sys_area);
  end;

  /* perform the starname directory search */

  star_select_sw = star_ALL_ENTRIES;
  call hcs_$star_dir_list_ (dname, sname, star_select_sw, sys_areap,
       star_branch_count, star_link_count, star_list_branch_ptr,
       star_list_names_ptr, ec);
  if ec ^= 0
    then return;

  /* scan through each matching branch/link */

  do compx = 1 to star_branch_count + star_link_count;

    /* if the branch is a directory, we ignore it. */

    if star_dir_list_branch (compx).type = star_DIRECTORY
      then ;
      else do;

        ename = star_list_names (star_dir_list_branch (compx).nindex);

        archive = false;
	if length (rtrim (ename)) > length (ARCHIVE_SUFFIX)
	then if substr (ename,
		length (rtrim (ename)) - length (ARCHIVE_SUFFIX) + 1,
		length (ARCHIVE_SUFFIX)) = ARCHIVE_SUFFIX
	       then archive = true;

        if archive
	then do;

	  /* the segment has a .archive suffix, so treat it as	*/
	  /* archive_name::**				*/

	  last = lei.n_opts;
	  call expand_le_archive_star (type, dname, ename, "**", leip, ec);

	  /* if the archive was found via a link, flag all the	*/
	  /* components found there so we can eliminate them if it	*/
	  /* is decided we shouldn't have chased links.		*/

	  if star_dir_list_branch (compx).type = star_LINK
	    then
	      do i = last + 1 to lei.n_opts;
	      lei.opt (i).flags.link = true;
	    end;
	end;
	else do;

	  /* either a segment branch or a link, initiate it and add	*/
	  /* it to the option list in le_input			*/

	  call initiate_file_ (dname, ename, R_ACCESS, segp, bc, ec);
	  if ec ^= 0
	    then goto free_and_return;
	  pathname = pathname_ (dname, ename);
	  call add_opt (type, ename, pathname, bc, segp, ""b, leip, ec);
	  if ec ^= 0
	    then goto free_and_return;
	  if star_dir_list_branch (compx).type = star_LINK
	    then lei.opt (lei.n_opts).flags.link = true;
	end;
      end;
  end;

  /* free the star structures */

free_and_return:
  free star_list_names in (sys_area);
  free star_dir_list_branch in (sys_area);

  end expand_le_star;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


add_ep:
  proc (type,			/** option type	    (in )	*/
       ep_name,			/** entrypoint name	    (in ) */
       inhibit,			/** inhibit errors	    (in ) */
       leip,			/** le_input pointer    (i/o) */
       ec);			/** error code	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	add_ep					*/
  /***	Input:	type, ep_name, inhibit, leip			*/
  /***	Function:	adds an entrypoint name to be retained or deleted	*/
  /***		to the option list after converting ambiguous	*/
  /***		specifications into a standard format.		*/
  /***	Output:	leip, ec					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl type		fixed bin parameter;
  dcl ep_name		char (*) parameter;
  dcl inhibit		bit (1) parameter;
  dcl leip		ptr parameter;
  dcl ec			fixed bin (35) parameter;

  /* automatic */

  dcl entrypoint		char (168) automatic;
  dcl segname		char (256) varying;
  dcl offsetname		char (256) varying;

  /* convert the name given to segname$offsetname format if necessary */

  if ep_name = ""
    then entrypoint = "**$**";
  else if index (ep_name, "$") = 0
    then entrypoint = "**$" || ep_name;
  else do;

    /* extract the segname and offsetname portions */

    segname = before (ep_name, "$");
    offsetname = after (ep_name, "$");

    /* check out the segname as a starname, and convert to standard format */

    call check_star_name_$entry ((segname), ec);
    if ec = 2
      then segname = "**";

    /* check out the offsetname as a starname, and convert null offsetnames */
    /* and global starnames into a ** format			      */

    if offsetname = ""
      then offsetname = "**";
      else do;
        call check_star_name_$entry ((offsetname), ec);
        if ec = 2
	then offsetname = "**";
      end;

    entrypoint = segname || "$" || offsetname;
  end;

  /* add it to the option list */

  if inhibit
    then call add_opt (type, "", entrypoint, 0, null, "0001"b, leip, ec);
    else call add_opt (type, "", entrypoint, 0, null, ""b, leip, ec);

  if entrypoint = "**$**"
    then has_global = true;

  end add_ep;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


add_opt:
  proc (type,			/** option type	    (in )	*/
       name,			/** name string	    (in ) */
       path,			/** path or ep string   (in ) */
       bc,			/** bit count	    (in ) */
       optp,			/** option pointer	    (in ) */
       flags,			/** flags		    (in ) */
       leip,			/** li_info pointer	    (i/o) */
       ec);			/** error code	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	add_opt					*/
  /***	Input:	type, name, path, bc, optp, flags, leip		*/
  /***	Function:	adds an option to the le_input option table.  The	*/
  /***		only error returned by this routine is if the	*/
  /***		table cannot hold the new entry.		*/
  /***	Output:	ec					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl type		fixed bin parameter;
  dcl name		char (*) parameter;
  dcl path		char (*) parameter;
  dcl bc			fixed bin (24) parameter;
  dcl optp		ptr parameter;
  dcl flags		bit (*) parameter;
  dcl leip		ptr parameter;
  dcl ec			fixed bin (35) parameter;

  /* based */

  dcl 01 lei		aligned based (leip),
       02 header		aligned like le_input.header,
       02 opt		dim (0 refer (lei.n_opts)) like le_option;

  /* see if adding another entry will overflow the temp seg */

  if currentsize (lei) + size (le_option) > sys_info$max_seg_size
    then do;
      ec = le_et_$too_many_options;
      return;
    end;
    else ec = 0;

  /* add the new option to the le_input structure */

  lei.n_opts = lei.n_opts + 1;
  lei.opt (lei.n_opts).type = type;
  lei.opt (lei.n_opts).name = name;
  lei.opt (lei.n_opts).path_or_ep = path;
  unspec (lei.opt (lei.n_opts).flags) = flags;
  lei.opt (lei.n_opts).bc = bc;
  lei.opt (lei.n_opts).optp = optp;

  end add_opt;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


validate_opts:
  proc (leip);			/** le_input pointer    (in )	*/

  /*** ****************************************************************/
  /***							*/
  /***	Name:	validate_opts				*/
  /***	Input:	leip					*/
  /***	Function:	make sure that the options in the le_input option	*/
  /***		array are all valid.  In particular, that we have	*/
  /***		some input paths, and that there is an explicit	*/
  /***		statement regarding the entrypoint **$main_	*/
  /***	Output:	leip					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl leip		ptr parameter;

  /* based */

  dcl 01 lei		aligned based (leip),
       02 header		like le_input.header,
       02 opt		dim (0 refer (lei.n_opts)) like le_option;

  /* automatic */

  dcl ec			fixed bin (35) automatic;
  dcl o			fixed bin automatic;
  dcl path_count		fixed bin automatic;
  dcl found		bit (1) automatic;

  path_count = 0;

  /* pass 1:  make sure we have at least 1 PATH option		*/

  do o = 1 to lei.n_opts;
    if lei.opt (o).type = PATH
      then path_count = path_count + 1;
  end;

  if path_count = 0
    then call abort (error_table_$noarg,
	    "At least 1 input path must be specified.");

  /* pass 2:  add in a -retain main_ option if no other specification	*/
  /*	    is given for main_				*/

  found = false;

  do o = 1 to lei.n_opts while (^found);

    /* see if this is a "-retain **$main_" or "-delete **$main_" argument */

    if lei.opt (o).type = RETAIN | lei.opt (o).type = DELETE
      then found = (lei.opt (o).path_or_ep = "**$main_");
  end;

  if ^found
    then call add_ep (RETAIN, "**$main_", true, leip, ec);

  /* assume global deletion if just retains specified, and global	*/
  /* retention otherwise.					*/

  if ^has_global
    then if has_retain & ^has_delete
	 then call add_ep (DELETE, "", false, leip, ec);
	 else call add_ep (RETAIN, "", false, leip, ec);

  end validate_opts;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


abort:
  proc (ec,			/** error code	    (in )	*/
       msg);			/** error message	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	abort					*/
  /***	Input:	ec, msg					*/
  /***	Function:	aborts execution of le and returns after printing	*/
  /***		a message on error_output.			*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl ec			fixed bin (35) parameter;
  dcl msg			char (*) parameter;

  call com_err_ (ec, "linkage_editor", msg);
  goto ABORT;

  end abort;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include access_mode_values;
%include le_input;
%include star_structures;
%include terminate_file;

  end le;
