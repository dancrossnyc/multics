/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to create the output binary, and to resolve conflicts
     between single segment or MSF output.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_create_binary_:
  proc (lecp,			/** components pointer  (in )	*/
       dname,			/** input dirname	    (in )	*/
       ename,			/** input entryname	    (in ) */
       comp_count,			/** component count	    (in ) */
       force,			/** force switch	    (in ) */
       act_dname,			/** actual dirname	    (out) */
       act_ename);			/** actual entryname    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_create_binary_				*/
  /***	Input:	lecp, dname, ename, comp_count		*/
  /***	Function:	If the leb.n_binaries is greater than 1, (ie. the	*/
  /***		output binary is an MSF), we create a single	*/
  /***		component MSF, and adjust the pathnames so	*/
  /***		that the segments are created in the MSF dir.	*/
  /***	Output:	act_dname, act_ename			*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);

  /* parameters */

  dcl lecp		ptr parameter;
  dcl dname		char (*) parameter;
  dcl ename		char (*) parameter;
  dcl comp_count		fixed bin parameter;
  dcl force		bit (1) parameter;
  dcl act_dname		char (*) parameter;
  dcl act_ename		char (*) parameter;

  /* procedures */

  dcl get_group_id_$tag_star	entry () returns (char (32));
  dcl hcs_$add_acl_entries	entry (char (*), char (*), ptr, fixed bin,
			fixed bin (35));
  dcl hcs_$status_long	entry (char (*), char (*), fixed bin (1), ptr,
			ptr, fixed bin (35));
  dcl le_error_		entry options (variable);
  dcl le_util_$check_uid	entry (ptr, ptr, bit (36) aligned)
			returns (bit (1));
  dcl make_msf_		entry (char (*), char (*), (3) fixed bin (6),
			fixed bin (35));
  dcl nd_handler_		entry (char (*), char (*), char (*),
			fixed bin (35));
  dcl nd_handler_$force	entry (char (*), char (*), char (*),
			fixed bin (35));
  dcl object_info_$brief	entry (ptr, fixed bin (24), ptr,
			fixed bin (35));
  dcl object_lib_$initiate	entry (char (*), char (*), char (*), bit (1),
			ptr,
			fixed bin (24), bit (1), fixed bin (35));
  dcl pathname_		entry (char (*), char (*)) returns (char (168));
  dcl unmake_msf_		entry (char (*), char (*), bit (1),
			(3) fixed bin (6), fixed bin (35));

  /* external */

  dcl error_table_$noentry	external fixed bin (35);
  dcl le_data_$caller	external char (32) varying;
  dcl le_et_$input_output_overlap
			external fixed bin (35);

  /* automatic */

  dcl abort		bit (1) automatic;
  dcl bc			fixed bin (24) automatic;
  dcl 01 br_info		aligned like status_branch automatic;
  dcl deleted		bit (1) automatic;
  dcl ec			fixed bin (35) automatic;
  dcl msf_sw		bit (1) automatic;
  dcl 01 my_acl		aligned like segment_acl_entry automatic;
  dcl 01 oi		aligned like object_info automatic;
  dcl rbs			(3) fixed bin (6) automatic;
  dcl segp		ptr automatic;

  /* conditions */

  dcl le_abort_		condition;

  /* builtin */

  dcl addr		builtin;
  dcl null		builtin;

  abort = false;
  act_dname = dname;
  act_ename = ename;

  /* see if the item exists at all.  If not, just return */

  call hcs_$status_long (dname, ename, 1, addr (br_info), null, ec);
  if ec = error_table_$noentry
    then do;

      /* the target does not exist, we create it if the output target	*/
      /* an msf and adjust the pathnames accordingly.		*/

      if comp_count > 1
        then do;
	call make_msf_ (dname, ename, rbs, ec);
	if ec ^= 0
	  then call le_error_ (LE_ABORT_ERROR, ec,
		  "Unable to create MSF output file ^a.",
		  pathname_ (dname, ename));
	act_dname = pathname_ (dname, ename);
	act_ename = ename;
        end;

      return;
    end;

  if le_util_$check_uid (lecp, null, (br_info.uid))
    then call le_error_ (LE_ABORT_ERROR, le_et_$input_output_overlap,
	    "^/The output file is the same as one of the input files.");

  /* try to initiate it as an object and validate that it is one.	*/
  /* We generally want to query any time the target exists but is not	*/
  /* an object file.  Object_lib_$initiate will only return		*/
  /* a zero code when called with the validate switch set if the	*/
  /* target is a legitimate object file.			*/

  deleted = false;

  call object_lib_$initiate (dname, ename, "", "1"b, segp, bc, msf_sw, ec);
  if ec ^= 0
    then do;
      msf_sw = false;
      if ^force
        then call nd_handler_ ((le_data_$caller), dname, ename, ec);
        else call nd_handler_$force ((le_data_$caller), dname, ename, ec);
      if ec ^= 0
        then signal le_abort_;
      deleted = true;
    end;
    else do;
      oi.version_number = object_info_version_2;
      call object_info_$brief (segp, bc, addr (oi), ec);
      if ^oi.format.bound
        then do;
	if force
	  then call nd_handler_$force ((le_data_$caller), dname, ename, ec);
	  else call nd_handler_ ((le_data_$caller), dname, ename, ec);
	if ec ^= 0
	  then signal le_abort_;
	msf_sw = false;
	deleted = true;
        end;
    end;

  if msf_sw
    then do;

      /* convert it to a SSF */

      call unmake_msf_ (dname, ename, ""b, rbs, ec);
      if ec ^= 0
        then call le_error_ (LE_ABORT_ERROR, ec,
	        "^/Unable to truncate MSF to a single segment. ^a",
	        pathname_ (dname, ename));

    end;

  if comp_count > 1
    then do;

      if ^deleted
        then do;

	/* give myself enough access to turn this thing into an MSF */

	my_acl.access_name = get_group_id_$tag_star ();
	my_acl.mode = REW_ACCESS;
	my_acl.extended_mode = ""b;
	my_acl.status_code = 0;

	call hcs_$add_acl_entries (dname, ename, addr (my_acl), 1, ec);
        end;

      /* create/convert MSF */

      call make_msf_ (dname, ename, rbs, ec);

      if ec ^= 0
        then call le_error_ (LE_ABORT_ERROR, ec,
	        "^/Unable to convert ^a to MSF format",
	        pathname_ (dname, ename));

      act_dname = pathname_ (dname, ename);
    end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include acl_structures;
%include access_mode_values;
%include le_data;
%include object_info;
%include status_structures;

  end le_create_binary_;

