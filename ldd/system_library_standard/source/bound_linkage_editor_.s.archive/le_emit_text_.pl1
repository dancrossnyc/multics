/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to relocate and emit the text section of a single input
     component.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_emit_text_:
  proc (ocudp,			/** ocu_data pointer    (in )	*/
       lecp,			/** components pointer  (i/o) */
       c);			/** component index	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_emit_text_				*/
  /***	Input:	ocudp, lecp, c				*/
  /***	Function:	emits the text section of the given input	*/
  /***		component and relocates references.		*/
  /***	Output:	lecp					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  dcl Left		fixed bin static options (constant) init (1);
  dcl Right		fixed bin static options (constant) init (2);
  dcl Section_Rel_15	(0:4) char (1) static options (constant)
			init ("t", "l", "a", "d", "i");
  dcl special_case		(1:4) bit (18) static options (constant)
			init ("551"b3, "552"b3, "751"b3, "752"b3);
  dcl special_case_name	(1:4) char (4) static options (constant)
			init ("stba", "stbq", "stca", "stcq");
  dcl Indirect_and_Tally	bit (2) static options (constant) init ("10"b);
  dcl Indirect_then_Register	bit (2) static options (constant) init ("11"b);

  /* parameters */

  dcl ocudp		ptr parameter;
  dcl lecp		ptr parameter;
  dcl c			fixed bin parameter;

  /* procedures */

  dcl le_backpatch_		entry (fixed bin, fixed bin, uns fixed bin (18),
			fixed bin, fixed bin);
  dcl le_error_		entry options (variable);
  dcl le_snap_		entry (ptr, ptr, fixed bin, fixed bin (3),
			uns fixed bin (18), uns fixed bin (18), bit (1),
			fixed bin (3), uns fixed bin (18), bit (6),
			bit (1));
  dcl le_util_$scan_relinfo	entry (ptr, fixed bin, bit (1), fixed bin,
			char (*));

  /* external */

  dcl le_et_$bad_def_reference
			external fixed bin (35);
  dcl le_et_$bad_instr_format external fixed bin (35);
  dcl le_et_$implementation_error
			external fixed bin (35);
  dcl le_et_$invalid_relinfo	external fixed bin (35);

  /* based */

  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 led		aligned based (ledp),
       02 header		aligned like le_definitions.header,
       02 def		dim (0 refer (led.n_defs)) like le_definition;
  dcl 01 lel		aligned based (lelp),
       02 header		aligned like le_links.header,
       02 link		dim (0 refer (lel.n_links)) like le_link;
  dcl 01 word15		aligned based (addr (instr)),
       02 halfword		(1:2) unaligned,
        03 pad		bit (3),
        03 side		fixed bin (15) unsigned;
  dcl 01 word18		aligned based (addr (instr)),
       02 side		(1:2) fixed bin (18) unsigned unaligned;

  /* automatic */

  dcl abort		bit (1) automatic;
  dcl d			fixed bin automatic;
  dcl found		bit (1) automatic;
  dcl initial_relp		fixed bin (19) automatic;
  dcl 01 instr		aligned automatic,
       02 pr		fixed bin (3) unsigned unaligned,
       02 offset		fixed bin (15) unsigned unaligned,
       02 op_code		bit (9) unaligned,
       02 extension		bit (1) unaligned,
       02 inhibit		bit (1) unaligned,
       02 use_pr		bit (1) unaligned,
       02 modifier		bit (6) unaligned;
  dcl internal		bit (1) automatic;
  dcl ledp		ptr automatic;
  dcl lelp		ptr automatic;
  dcl lx			fixed bin automatic;
  dcl modifier		bit (6) automatic;
  dcl n_words		fixed bin automatic;
  dcl odd			bit (1) automatic;
  dcl pad			(1:16) bit (36) aligned automatic;
  dcl rel			char (2) automatic;
  dcl rel_char		char (1) automatic;
  dcl relindex		fixed bin automatic;
  dcl relinfop		ptr automatic;
  dcl relp		fixed bin (18) unsigned automatic;
  dcl relstr		char (4096) automatic;
  dcl s			fixed bin automatic;
  dcl sc			fixed bin automatic;
  dcl section		fixed bin (3) automatic;
  dcl size		fixed bin (18) unsigned automatic;
  dcl skip		fixed bin automatic;
  dcl stat_relp		fixed bin (18) unsigned automatic;
  dcl symb_relp		fixed bin (18) unsigned automatic;
  dcl td			bit (4) automatic;
  dcl text_relp		fixed bin (18) unsigned automatic;
  dcl textp		ptr automatic;
  dcl tm			bit (2) automatic;
  dcl value		fixed bin (35) automatic;

  /* builtin */

  dcl addr		builtin;
  dcl addrel		builtin;
  dcl bin			builtin;
  dcl copy		builtin;
  dcl hbound		builtin;
  dcl min			builtin;
  dcl substr		builtin;
  dcl unspec		builtin;

  textp = lec.comp (c).orig.textp;
  relinfop = lec.comp (c).orig.rel_textp;
  relindex = 1;
  odd = false;
  initial_relp = -1;

  /* extract the relocation counters */

  text_relp = lec.comp (c).new.rel_text;
  symb_relp = lec.comp (c).new.rel_symb;
  stat_relp = lec.comp (c).new.rel_stat;

  /* emit pad words to align the text section */

  n_words = lec.comp (c).new.text_pad;
  unspec (pad) = ""b;

  do while (n_words > 0);
    size = min (hbound (pad, 1), n_words);
    substr (relstr, 1, size+size) = copy ("aa", size);
    relp = ocu_$emit_text (ocudp, addr (pad), addr (relstr), size);
    n_words = n_words - size;
  end;

  n_words = 0;

  do while (n_words < lec.comp (c).orig.textl);

    /* find the next word containing non-absolute relinfo */

    call le_util_$scan_relinfo (relinfop, relindex, odd, skip, rel);

    /* emit the intervening text words with absolute relocation */

    do while (skip > 0);
      size = min (skip, 2048);
      substr (relstr, 1, size+size) = copy ("aa", size);
      relp = ocu_$emit_text (ocudp, textp, addr (relstr), size);
      if initial_relp < 0
        then initial_relp = relp;
      textp = addrel (textp, size);
      skip = skip - size;
      n_words = n_words + size;
    end;

    /* copy the word to be relocated */

    unspec (instr) = unspec (textp -> word18);

    do s = Left to Right while (n_words < lec.comp (c).orig.textl);

      /* for each side of the non-absolute word */

      rel_char = substr (rel, s, 1);

      if rel_char = "a" | rel_char = "r"
        then ;			/* no relocation required	*/

      else if rel_char = "t" | rel_char = "1"
        then do;			/* text relative reference	*/
	value = word18.side (s) + text_relp;
	word18.side (s) = addr (value) -> word18.side (Right);
        end;

      else if rel_char = "2" | rel_char = "3"
        then do;

	/* link reference, snap the link and then adjust the	*/
	/* reference					*/

	value = word18.side (s);
	call le_snap_ (ocudp, lecp, c, Text, (n_words), (value), true,
	     section, relp, modifier, internal);
	word18.side (s) = relp;
        end;

      else if rel_char = "l"
        then do;

	/* standard pointer register link reference */

	value = word15.side (s);
	abort = false;

	if s ^= Left
	  then do;

	    /* link 15 relocation is only allowed in the left halfword */

	    call le_error_ (LE_FATAL_ERROR, le_et_$invalid_relinfo,
	         "^/Relocation code ""link 15"" is invalid in the right" ||
	         "^/halfword ^o of text|^o in ^a.", value, n_words,
	         lec.comp (c).name);
	    abort = true;
	  end;

	if instr.use_pr = false & ^abort
	  then do;
	    call le_error_ (LE_FATAL_ERROR, le_et_$bad_instr_format,
	         "^/Invalid instruction format at text|^o in ^a.",
	         n_words, lec.comp (c).name);
	    abort = true;
	  end;

	do sc = 1 to 4 while (^abort);
	  if instr.op_code = special_case (sc)
	    then do;
	      call le_error_ (LE_FATAL_ERROR, le_et_$bad_instr_format,
		 "^/Invalid op_code (^a) for link ref at text|^o in ^a.",
		 special_case_name (sc), n_words, lec.comp (c).name);
	      abort = true;
	    end;
	end;

	tm = substr (instr.modifier, 1, 2);
	td = substr (instr.modifier, 3, 4);

	if ^abort & ((tm = Indirect_and_Tally) |
	     (tm ^= Indirect_then_Register & td ^= ""b))
	  then do;

	    call le_error_ (LE_FATAL_ERROR, le_et_$bad_instr_format,
	         "^/Invalid modifier ^o for link ref at text|^o of ^a.",
	         bin (tm || td), n_words, lec.comp (c).name);
	    abort = true;
	  end;

	if ^abort
	  then do;
	    call le_snap_ (ocudp, lecp, c, Text, (n_words), (value), false,
	         section, relp, modifier, internal);

	    /* patch the returned offset */

	    if section = Static | section = Linkage
	      then word15.side (s) = relp;
	      else do;
	        word18.side (s) = relp;
	        instr.use_pr = false;
	      end;

	    /* schedule a backpatch since we don't know where the	*/
	    /* symbol section will be placed			*/

	    if section = Symbol
	      then call le_backpatch_ (Patch_Symbol_Ref,
		      lec.comp (c).target, n_words +
		      lec.comp (c).new.rel_text, s, 0);

	    /* remove the indirection modifier if the link was	*/
	    /* resolved internally.				*/

	    if internal
	      then if modifier = ""b
		   then substr (instr.modifier, 1, 2) = ""b;
		   else instr.modifier = modifier;

	    /* convert the relocation info */

	    substr (rel, s, 1) = Section_Rel_15 (section);
	  end;
        end;

      else if rel_char = "d"
        then do;

	/* look for a definition that this points to */

	ledp = lec.comp (c).tables.ledp;
	value = word18.side (s);

	found = false;

	/* scan the definition list */

	do d = 1 to led.n_defs while (^found);
	  if value = led.def (d).offset
	    then do;
	      word18.side (s) = led.def (d).new_offset;
	      found = true;
	    end;
	end;

	if ^found
	  then call le_error_ (LE_FATAL_ERROR, le_et_$bad_def_reference,
		  "^/Reference to definition|^o at text|^o in ^a.",
		  value, n_words, lec.comp (c).name);
        end;

      /* symbol reference */

      else if rel_char = "s" | rel_char = "7"
        then do;
	value = word18.side (s) + symb_relp;
	word18.side (s) = addr (value) -> word18.side (Right);
        end;

      /* 18 bit static reference */

      else if rel_char = "8"
        then do;
	if ^lec.comp (c).flags.separate_static
	  then word18.side (s) = word18.side (s) + stat_relp - 8;
	  else word18.side (s) = word18.side (s) + stat_relp;
        end;

      /* normal 15 bit static reference */

      else if rel_char = "i"
        then do;

	/* must be in the left halfword */

	if s ^= Left
	  then do;
	    call le_error_ (LE_FATAL_ERROR, le_et_$invalid_relinfo,
	         "^/Relocation code ""static 15"" is invalid in the" ||
	         "^/right halfword ^o of text|^o of ^a.",
	         word15.side (s), n_words, lec.comp (c).name);
	  end;
	  else do;
	    if ^lec.comp (c).flags.separate_static
	      then word15.side (s) = word15.side (s) + stat_relp - 8;
	      else word15.side (s) = word15.side (s) + stat_relp;
	  end;
        end;
      else call le_error_ (LE_ABORT_ERROR, le_et_$invalid_relinfo, "");
    end;

    /* if we are not off the end, then emit the word */

    if n_words < lec.comp (c).orig.textl
      then do;
        relp = ocu_$emit_text (ocudp, addr (instr), addr (rel), 1);
        if initial_relp < 0
	then initial_relp = relp;
        textp = addrel (textp, 1);
        n_words = n_words + 1;
      end;
  end;

  /* make sure the section started at the offset we calculated earlier */

  if initial_relp ^= lec.comp (c).new.rel_text & initial_relp >= 0
    then call le_error_ (LE_ABORT_ERROR, le_et_$implementation_error,
	    "^/Text for ^a relocated to ^d instead of ^d as expected.",
	    lec.comp (c).name, initial_relp, lec.comp (c).new.rel_text);

  /* make a pass down the link table and forcibly emit any *system	*/
  /* or *heap links which are the target link of a deferred_init	*/
  /* group to make sure there is something at the end of the chain	*/

  lelp = lec.comp (c).tables.lelp;

  do lx = 1 to lel.n_links;
    if lel.link (lx).target_comp = c & lel.link (lx).target_link = lx &
         lel.link (lx).type = Self_Offsetname
      then call le_snap_ (ocudp, lecp, c, Text, 0,
	      lel.offset_adjustment + 2 * lx,
	      false, section, relp, modifier, internal);
  end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include ocu_dcls;

  end le_emit_text_;

