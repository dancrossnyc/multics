/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to create a single initialization info block for each
     external variable reference by combining the init info blocks for all of
     the links referring to that external variable.
  2) change(86-12-19,Elhard), approve(86-12-19,PBF7505),
     audit(86-12-22,DGHowe), install(87-01-05,MR12.0-1256):
     Changed to scan for multiple *system/*heap links to the same target within
     one linkage section when looking for init infos so that references to
     *heap$p and *heap$p,* references in the same linkage section both get the
     correct initialization.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_combine_init_info_:
  proc (lecp);			/** components pointer  (in )	*/

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_combine_init_info_			*/
  /***	Input:	lecp					*/
  /***	Function:	combines the init_infos for multiple *system or	*/
  /***		*heap links to the same target into a single init	*/
  /***		info.					*/
  /***	Output:	lecp					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  dcl None		fixed bin static options (constant) init (0);

  /* parameters */

  dcl lecp		ptr parameter;

  /* procedures */

  dcl le_debug_		entry options (variable);
  dcl le_error_		entry options (variable);

  /* external */

  dcl le_et_$incompatible_init
			external fixed bin (35);
  dcl le_et_$multiple_inits	external fixed bin (35);

  /* based */

  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 lel		aligned based (lelp),
       02 header		aligned like le_links.header,
       02 link		dim (0 refer (lel.n_links)) like le_link;
  dcl 01 name		aligned based (namep),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (name.count)) unaligned;
  dcl 01 new_name		aligned based (new_namep),
       02 count		fixed bin (9) unsigned unaligned,
       02 string		char (0 refer (new_name.count)) unaligned;
  dcl 01 tlel		aligned based (tlelp),
       02 header		aligned like le_links.header,
       02 link		dim (0 refer (tlel.n_links)) like le_link;

  /* automatic */

  dcl c			fixed bin automatic;
  dcl chase_c		fixed bin automatic;
  dcl chase_l		fixed bin automatic;
  dcl extend		bit (1) automatic;
  dcl extension		fixed bin (35) automatic;
  dcl incompatible		bit (1) automatic;
  dcl initp		ptr automatic;
  dcl l			fixed bin automatic;
  dcl lelp		ptr automatic;
  dcl message		bit (1) automatic;
  dcl min			fixed bin automatic;
  dcl namep		ptr automatic;
  dcl new_initp		ptr automatic;
  dcl new_len		fixed bin (35) automatic;
  dcl new_namep		ptr automatic;
  dcl next_c		fixed bin automatic;
  dcl next_l		fixed bin automatic;
  dcl owner		fixed bin automatic;
  dcl print_message		bit (1) automatic;
  dcl replace		bit (1) automatic;
  dcl target_comp		fixed bin automatic;
  dcl target_link		fixed bin automatic;
  dcl tc			fixed bin automatic;
  dcl tl			fixed bin automatic;
  dcl tlelp		ptr automatic;

  /* builtin */

  dcl max			builtin;
  dcl null		builtin;
  dcl unspec		builtin;

  call le_debug_ ("Beginning init_info resolution.");

  /* for each component . . . */

  do c = 1 to lec.n_components;

    /* only process included component */

    if lec.comp (c).flags.include
      then do;

        /* get the link table */

        lelp = lec.comp (c).tables.lelp;

        /* for each link . . . */

        do l = 1 to lel.n_links;

	/* if a *system or *heap link */

	if lel.link (l).type = LINK_SELF_OFFSETNAME &
	     (lel.link (l).class = CLASS_SYSTEM |
	     lel.link (l).class = CLASS_HEAP) &
	     lel.link (l).target_link = None
	  then do;

	    /* initialize the flags and other init status info */

	    print_message = false;

	    namep = lel.link (l).offsetp;
	    initp = lel.link (l).initp;
	    target_comp = c;
	    target_link = l;
	    extension = 0;

	    call le_debug_ ("Combining init infos for " ||
	         "*^[system^;heap^]$^a" ||
	         "^/   using init info from component ^a",
	         (lel.link (l).class = CLASS_SYSTEM), name.string,
	         lec.comp (c).name);

	    /* assume that there is only one copy of a given link	*/
	    /* in any one component, so search the other components	*/
	    /* for similar links.				*/

	    do tc = c to lec.n_components;
	      if lec.comp (tc).flags.include
	        then do;

		/* get the new components link table */

		tlelp = lec.comp (tc).tables.lelp;

		/* search for a matching link */

		if tc = c
		  then min = l + 1;
		  else min = 1;
		
		do tl = min to tlel.n_links;
		  if tlel.link (tl).type = LINK_SELF_OFFSETNAME &
		       tlel.link (tl).class = lel.link (l).class &
		       tlel.link (tl).target_link = None
		    then do;
		      new_namep = tlel.link (tl).offsetp;
		      new_initp = tlel.link (tl).initp;

		      if name.count = new_name.count
			 & name.string = new_name.string
		        then do;

			/* the links match, so compare the init infos */

			call compare_init (initp, extension, new_initp,
			     replace, extend, message, incompatible,
			     new_len);

			/* print a message if the inits cant be	*/
			/* merged.			*/

			if incompatible
			  then call le_error_ (LE_FATAL_ERROR,
				  le_et_$incompatible_init,
				  "^/Combining init infos for " ||
				  "^[external^;heap^] " ||
				  "variable ""^a"".",
				  (lel.link (l).class = CLASS_SYSTEM),
				  name.string);
			  else do;

			    /* thread the links together for	*/
			    /* processing later when we know	*/
			    /* what init_info will be used.	*/

			    tlel.link (tl).target_comp =
			         lel.link (l).target_comp;
			    tlel.link (tl).target_link =
			         lel.link (l).target_link;
			    lel.link (l).target_comp = tc;
			    lel.link (l).target_link = tl;

			    if replace
			      then do;

			        /* we will use the new init info */

			        call le_debug_ (
				   "Replacing initialization with " ||
				   "version in ^a",
				   lec.comp (tc).name);

			        initp = new_initp;
			        extension = new_len -
				   new_initp -> link_init.n_words;
			        target_comp = tc;
			        target_link = tl;
			      end;
			    if extend
			      then do;

			        /* the current init_info must	*/
			        /* be extended.		*/

			        call le_debug_ (
				   "Extending initialization " ||
				   "to ^d words.",
				   new_len);
			        extension = new_len -
				   initp -> link_init.n_words;
			      end;

			    /* if a message is required at any	*/
			    /* stage, remember and print it at	*/
			    /* the end			*/

			    print_message = print_message | message;
			  end;
		        end;
		    end;
		end;
	        end;
	    end;

	    /* non-matching init_infos were found so print a	*/
	    /* message to identify the one we will use.		*/

	    if print_message
	      then call le_error_ (LE_WARNING, le_et_$multiple_inits,
		      "for ^[external^;heap^] variable ""^a""." ||
		      "^/The one in ^a will be used.",
		      (lel.link (l).class = CLASS_SYSTEM),
		      name.string, lec.comp (target_comp).name);

	    /* determine which output component will actually	*/
	    /* contain the init info (non-deferred init references)	*/

	    owner = lec.comp (target_comp).target;

	    chase_c = c;
	    chase_l = l;

	    /* now chase through the linked list of link table	*/
	    /* entries that refer to this variable, and set their	*/
	    /* init info data so that the init info is emitted	*/
	    /* correctly (if in the target component) or a valid	*/
	    /* deferred initialization.			*/

	    do while (chase_l ^= None);

	      tlelp = lec.comp (chase_c).tables.lelp;

	      next_l = tlel.link (chase_l).target_link;
	      next_c = tlel.link (chase_l).target_comp;

	      tlel.link (chase_l).target_link = target_link;
	      tlel.link (chase_l).target_comp = target_comp;

	      if lec.comp (chase_c).target = owner
	        then do;

		/* this link will be in the output component that	*/
		/* actually contains the init_info, so fill in	*/
		/* the information on how to generate it.	*/

		tlel.link (chase_l).initp = initp;
		tlel.link (chase_l).extension = extension;
	        end;
	        else do;

		/* this link is in another output component.  We	*/
		/* will be generating a deferred_init init info	*/
		/* for it, so all we need is the target link.	*/

		tlel.link (chase_l).initp = null;
		tlel.link (chase_l).extension = None;
	        end;
	      chase_l = next_l;
	      chase_c = next_c;
	    end;
	  end;
        end;
      end;
  end;

  call le_debug_ ("Completed init_info resolution.^2/");

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


compare_init:
  proc (oldp,			/** old init info ptr   (in )	*/
       extension,			/** amount extended	    (in ) */
       newp,			/** new init info ptr   (in ) */
       replace,			/** use new init sw	    (out) */
       extend,			/** must be extended    (out) */
       message,			/** print an error msg  (out) */
       incompatible,		/** cannot be combined  (out) */
       new_len);			/** new init length	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	compare_init				*/
  /***	Input:	oldp, newp				*/
  /***	Function:	compares two init_info structures and determines	*/
  /***		which of them should be used, and whether it must	*/
  /***		be extended.  The rules for this are:		*/
  /***							*/
  /***		A.  init infos are same size			*/
  /***		  1.  no new initialization	     use old init	*/
  /***		  2.  new initialization			*/
  /***		    i.  was init before	     use old and	*/
  /***					     print message	*/
  /***		    ii. was not init before	     use new init	*/
  /***		B.  new initialization smaller		*/
  /***		  1.  no new initialization	     use old init	*/
  /***		  2.  new initialization			*/
  /***		    i.  was init before	     use old and	*/
  /***					     print message	*/
  /***		    ii. was not init before	     use new with	*/
  /***					     larger size	*/
  /***		C.  new initialization larger			*/
  /***		  1.  no new initialization			*/
  /***		    i.  was init before	     use old with	*/
  /***					     larger size	*/
  /***		    ii. was not init before	     use new	*/
  /***		  2.  new initialization			*/
  /***		    i.  was init before	     use new and	*/
  /***					     print message	*/
  /***		    ii. was not init before	     use new	*/
  /***	Output:	replace, extend, message, incompatible, new_len	*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl oldp		ptr parameter;
  dcl extension		fixed bin (35) parameter;
  dcl newp		ptr parameter;
  dcl replace		bit (1) parameter;
  dcl extend		bit (1) parameter;
  dcl message		bit (1) parameter;
  dcl incompatible		bit (1) parameter;
  dcl new_len		fixed bin (35) parameter;

  /* automatic */

  dcl have_new		bit (1) automatic;
  dcl have_old		bit (1) automatic;
  dcl larger		bit (1) automatic;
  dcl smaller		bit (1) automatic;

  /* preset return args */

  replace, extend, message, incompatible = false;
  new_len = max (oldp -> link_init.n_words + extension,
       newp -> link_init.n_words);

  /* preset flags */

  larger, smaller, have_old, have_new = false;

  /* see if the init_infos are the same */

  if oldp -> link_init.n_words + extension = newp -> link_init.n_words &
       oldp -> link_init.type = newp -> link_init.type
    then do;

      if oldp -> link_init.type = INIT_COPY_INFO
        then if unspec (oldp -> link_init_copy_info) =
	        unspec (newp -> link_init_copy_info)
	     then return;
	     else ;
      else if oldp -> link_init.type = INIT_LIST_TEMPLATE
        then if unspec (oldp -> link_init_list_template) =
	        unspec (newp -> link_init_list_template)
	     then return;
	     else ;
      else return;
    end;

  /* at this point we know that the new and old templates are	*/
  /* different, so we have to either select one of them or create	*/
  /* a new combined template.					*/

  /* area initialization is incompatible with any other type of init	*/

  if oldp -> link_init.type ^= newp -> link_init.type
    then if oldp -> link_init.type = INIT_DEFINE_AREA |
	    newp -> link_init.type = INIT_DEFINE_AREA
	 then do;
	   incompatible = true;
	   return;
	 end;

  /* determine if the size is different */

  if oldp -> link_init.n_words + extension > newp -> link_init.n_words
    then smaller = true;
  else if oldp -> link_init.n_words + extension < newp -> link_init.n_words
    then larger = true;

  /* determine whether we already have initialiation info */

  if oldp -> link_init.type = INIT_NO_INIT
    then have_old = false;
    else have_old = true;

  /* determine if the new one has init info */

  if newp -> link_init.type = INIT_NO_INIT
    then have_new = false;
    else have_new = true;

  /* apply rules for what we do with init infos */

  if larger
    then if have_new
	 then if have_old
	        then message, replace = true;
	        else replace = true;
         else if have_old
	 then extend = true;
         else replace = true;
  else if smaller
    then if have_new
	 then if have_old
	        then message = true;
	        else replace, extend = true;
	 else ;
  else if have_new
    then if have_old
	 then message = true;
	 else replace = true;
  else ;

  end compare_init;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include definition_dcls;
%include object_link_dcls;

  end le_combine_init_info_;

