/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to determine the placement of each input component
     into an output MSF component (if there is enough input to cause MSF
     generation) and to calculate the relocation values for each input
     component.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_msf_partition_:
  proc (lecp,			/** components pointer  (i/o)	*/
       component_size,		/** max size in pages   (in ) */
       n_components);		/** no of output comp.  (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_msf_partition_				*/
  /***	Input:	lecp, component_size			*/
  /***	Function:	Partitions the input components into output	*/
  /***		components.  This is where it is determined	*/
  /***		if the output will be an MSF.  If all of the	*/
  /***		components fit within the component size limit	*/
  /***		given, a normal object segment will be created.	*/
  /***		If more than one is required, an MSF is created.	*/
  /***	Output:	lecp, n_components				*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl max_linkage_words	fixed bin (19) static options (constant)
			init (16384);
  dcl max_static_words	fixed bin (19) static options (constant)
			init (16384);

  /* parameters */

  dcl lecp		ptr parameter;
  dcl component_size	fixed bin parameter;
  dcl n_components		fixed bin parameter;

  /* procedures */

  dcl le_debug_		entry options (variable);
  dcl le_error_		entry options (variable);
  dcl le_util_$get_user_and_version
			entry (char (*), char (*));

  /* external */

  dcl le_et_$component_too_big
			external fixed bin (35);

  /* based */

  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;

  /* automatic */

  dcl bound		fixed bin automatic;
  dcl c			fixed bin automatic;
  dcl c_linkage_words	fixed bin (19) automatic;
  dcl c_static_words	fixed bin (19) automatic;
  dcl c_symbol_words	fixed bin (19) automatic;
  dcl c_text_words		fixed bin (19) automatic;
  dcl c_words		fixed bin (19) automatic;
  dcl max_words		fixed bin (19) automatic;
  dcl n_linkage_words	fixed bin (19) automatic;
  dcl n_static_words	fixed bin (19) automatic;
  dcl n_symbol_words	fixed bin (19) automatic;
  dcl n_text_words		fixed bin (19) automatic;
  dcl n_words		fixed bin (19) automatic;
  dcl pad			fixed bin (19) automatic;
  dcl pad_base		fixed bin (19) automatic;
  dcl symbol_base		fixed bin (19) automatic;
  dcl user		char (32) automatic;
  dcl version		char (128) automatic;

  /* builtin */

  dcl divide		builtin;
  dcl length		builtin;
  dcl mod			builtin;
  dcl rtrim		builtin;
  dcl size		builtin;

  call le_debug_ ("Beginning MSF partitioning.");

  /* set the starting point for symbol sections to take the size of	*/
  /* the symbol header, version string, and user string into account	*/

  call le_util_$get_user_and_version (user, version);
  symbol_base = size (std_symbol_header);
  symbol_base = divide (length (rtrim (user)) + 3, 4, 17, 0) +
       divide (length (rtrim (version)) + 3, 4, 17, 0) + symbol_base;
  pad_base = mod (symbol_base, 2);

  n_components = 1;
  max_words = component_size * 1024;
  n_words = 0;
  n_static_words = 0;
  n_linkage_words = 0;
  n_text_words = 0;
  n_symbol_words = 0;

  do c = 1 to lec.n_components;

    /* for each included component . . . */

    if lec.comp (c).flags.include
      then do;

        /* calculate the number of words in the input component */

        c_words = divide (lec.comp (c).bc, 36, 19, 0);

        /* calculate the section sizes */

        c_linkage_words = lec.comp (c).orig.linkl;
        c_static_words = lec.comp (c).orig.statl;
        c_text_words = lec.comp (c).orig.textl;
        c_symbol_words = lec.comp (c).orig.symbl_no_rel;

        /* adjust the linkage size for combined static */

        if lec.comp (c).flags.separate_static &
	   ^lec.header.flags.separate_static
	then c_linkage_words = c_linkage_words + c_static_words;

        /* adjust the symbol size for table removal */

        if lec.comp (c).flags.delete_table
	then c_symbol_words = lec.comp (c).orig.symbl_no_table;

        lec.comp (c).orig.symbl = c_symbol_words;

        /* print a message if we are forcing an oversize output	*/
        /* component					*/

        if c_words > max_words
	then call le_error_ (LE_WARNING, le_et_$component_too_big,
		"^/Component ^a (^d pages) is larger than ^d pages.",
		lec.comp (c).name, divide (c_words + 1023, 1024, 9, 0),
		component_size);

        /* if the output component is empty, include the component	*/
        /* even if it is larger than the maximum size to prevent	*/
        /* looping into an infinite number of components because we	*/
        /* couldn't ever fit one input component into a single output	*/
        /* component.					*/

        if n_words = 0
	then do;

	  /* set the section and total size values */

	  n_words = c_words;
	  n_static_words = c_static_words;
	  n_text_words = c_text_words;
	  n_linkage_words = c_linkage_words;
	  lec.comp (c).target = n_components;

	  /* zero the relocation counters */

	  lec.comp (c).new.rel_text = 0;
	  lec.comp (c).new.rel_stat = 0;
	  lec.comp (c).new.text_pad = 0;
	  lec.comp (c).new.static_pad = 0;

	  /* set the symbol relocation counter accounting for the	*/
	  /* symbol header and strings			*/

	  lec.comp (c).new.rel_symb = symbol_base + pad_base;
	  lec.comp (c).new.symbol_pad = pad_base;
	  n_symbol_words = symbol_base + pad_base + c_symbol_words;
	end;
        else if n_words + c_words > max_words
	then do;

	  /* if adding this input component would overflow the	*/
	  /* output component, skip to the next component		*/

	  call le_debug_ ("Skipping to component ^d due to size overflow.",
	       n_components + 1);

	  n_components = n_components + 1;
	  n_words = c_words;
	  n_static_words = c_static_words;
	  n_linkage_words = c_linkage_words;
	  n_text_words = c_text_words;
	  lec.comp (c).target = n_components;

	  /* zero the relocation counters */

	  lec.comp (c).new.rel_text = 0;
	  lec.comp (c).new.rel_stat = 0;
	  lec.comp (c).new.text_pad = 0;
	  lec.comp (c).new.static_pad = 0;

	  /* set the symbol relocation counter accounting for the	*/
	  /* symbol header and strings			*/

	  lec.comp (c).new.rel_symb = symbol_base + pad_base;
	  lec.comp (c).new.symbol_pad = pad_base;
	  n_symbol_words = symbol_base + pad_base + c_symbol_words;
	end;
        else if n_static_words + c_static_words > max_static_words
	then do;

	  /* if adding to this component would overflow the maximum	*/
	  /* addressible static section size, then skip to the next	*/
	  /* component.					*/

	  call le_debug_ (
	       "Skipping to component ^d due to static section overflow.",
	       n_components + 1);

	  n_components = n_components + 1;
	  n_words = c_words;
	  n_static_words = c_static_words;
	  n_linkage_words = c_linkage_words;
	  n_text_words = c_text_words;
	  lec.comp (c).target = n_components;

	  /* zero the relocation counters */

	  lec.comp (c).new.rel_text = 0;
	  lec.comp (c).new.rel_stat = 0;
	  lec.comp (c).new.text_pad = 0;
	  lec.comp (c).new.static_pad = 0;

	  /* set the symbol relocation counter accounting for the	*/
	  /* symbol header and strings			*/

	  lec.comp (c).new.rel_symb = symbol_base + pad_base;
	  lec.comp (c).new.symbol_pad = pad_base;
	  n_symbol_words = symbol_base + pad_base + c_symbol_words;
	end;
        else if n_linkage_words + c_linkage_words > max_linkage_words
	then do;

	  /* if adding to this component would overflow the maximum	*/
	  /* addressible linkage section size, then skip to the	*/
	  /* next component.				*/

	  call le_debug_ (
	       "Skipping to component ^d due to linkage section overflow.",
	       n_components + 1);

	  n_components = n_components + 1;
	  n_words = c_words;
	  n_static_words = c_static_words;
	  n_linkage_words = c_linkage_words;
	  lec.comp (c).target = n_components;

	  /* zero the relocation counters */

	  lec.comp (c).new.rel_text = 0;
	  lec.comp (c).new.rel_stat = 0;
	  lec.comp (c).new.text_pad = 0;
	  lec.comp (c).new.static_pad = 0;

	  /* set the symbol relocation counter accounting for the	*/
	  /* symbol header and strings			*/

	  lec.comp (c).new.rel_symb = symbol_base + pad_base;
	  lec.comp (c).new.symbol_pad = pad_base;
	  n_symbol_words = symbol_base + pad_base + c_symbol_words;
	end;
        else do;

	/* otherwise just append this input component to the	*/
	/* current output component.				*/

	lec.comp (c).target = n_components;
	n_words = n_words + c_words;

	/* calculate the text relocation counter, padding if reqd	*/
	/* to get the necessary text boundary.			*/

	bound = lec.comp (c).orig.text_boundary;
	pad = mod (n_text_words, bound);
	lec.comp (c).new.rel_text = n_text_words + pad;
	lec.comp (c).new.text_pad = pad;
	n_text_words = n_text_words + pad + c_text_words;

	/* calculate the static relocation counter, padding if reqd	*/
	/* to get the necessary static boundary.		*/

	bound = lec.comp (c).orig.static_boundary;
	pad = mod (n_static_words, bound);
	lec.comp (c).new.rel_stat = n_static_words + pad;
	lec.comp (c).new.static_pad = pad;
	n_static_words = n_static_words + pad + c_static_words;

	/* calculate the symbol relocation counter */

	pad = mod (n_symbol_words, 2);
	lec.comp (c).new.rel_symb = n_symbol_words + pad;
	lec.comp (c).new.symbol_pad = pad;
	n_symbol_words = n_symbol_words + pad + c_symbol_words;
        end;

        call le_debug_ ("Placing input component ""^a"" in component ^d.",
	   lec.comp (c).name, n_components);
      end;
  end;

  call le_debug_ ("Completed MSF partitioning.^2/");

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include std_symbol_header;

  end le_msf_partition_;

