/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to extract definition options and create the sorted
     option table to be used for definition retention determination.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_make_opt_tbl_:
  proc (leip,			/** le_input ptr	    (in )	*/
       leop);			/** le_options ptr	    (i/o) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_make_opt_tbl_				*/
  /***	Input:	leip, leop				*/
  /***	Function:	creates the option table from the le_input	*/
  /***		structure.  This table is scanned to resolve	*/
  /***		options which may be global, or deal with a	*/
  /***		single component or entrypoint.  Options are	*/
  /***		places into the option list ordered such that	*/
  /***		the most specific options are first.  This way,	*/
  /***		a linear search of the options for the first	*/
  /***		option which matches will provide the option	*/
  /***		which is most appropriate.			*/
  /***	Output:	leop					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);

  /* parameters */

  dcl leip		ptr parameter;
  dcl leop		ptr parameter;

  /* procedures */

  dcl check_star_name_$entry	entry (char (*), fixed bin (35));
  dcl le_error_		entry options (variable);

  /* external */

  dcl le_et_$bad_ep_starname	external fixed bin (35);
  dcl le_et_$dup_ep_option	external fixed bin (35);
  dcl le_et_$dup_global_option
			external fixed bin (35);

  /* based */

  dcl 01 lei		aligned based (leip),
       02 header		aligned like le_input.header,
       02 opt		dim (0 refer (lei.n_opts)) like le_option;
  dcl 01 leo		aligned based (leop),
       02 header		aligned like le_options.header,
       02 opt		dim (0 refer (leo.n_opts)) like le_options.opt;

  /* automatic */

  dcl cl			fixed bin automatic;
  dcl ec			fixed bin (35) automatic;
  dcl en			char (256) automatic;
  dcl io			fixed bin automatic;
  dcl optx		fixed bin automatic;
  dcl sn			char (32) automatic;

  /* builtin */

  dcl after		builtin;
  dcl before		builtin;
  dcl mod			builtin;
  dcl unspec		builtin;

  /* scan the option list for definition-disposition options,	*/
  /* evaluate their ordering and add them to the option table.	*/

  do io = 1 to lei.n_opts;

    if (lei.opt (io).type = DELETE |
         lei.opt (io).type = RETAIN |
         lei.opt (io).type = NO_LINK) &
         ^lei.opt (io).flags.ignore
      then do;
        lei.opt (io).flags.used = true;
        sn = before (lei.opt (io).path_or_ep, "$");
        en = after (lei.opt (io).path_or_ep, "$");
        cl = get_class (sn, en, ec);
        if ec ^= 0
	then do;
	  call le_error_ (LE_WARNING, le_et_$bad_ep_starname, "^a",
	       lei.opt (io).path_or_ep);
	  lei.opt (io).flags.ignore = true;
	end;
	else do;
	  optx, leo.n_opts = leo.n_opts + 1;
	  leo.opt (optx).type = lei.opt (io).type;
	  leo.opt (optx).inhibit_error = lei.opt (io).flags.inhibit_error;
	  leo.opt (optx).used = false;
	  leo.opt (optx).order = io;
	  leo.opt (optx).segname = sn;
	  leo.opt (optx).ep_name = en;
	  leo.opt (optx).class = cl;
	end;
      end;
  end;

  /* sort the options into ascending order by ordering class */

  call sort_opts (leop);

  /* now that they are sorted, check for duplicates and print a message */

  do optx = 1 to leo.n_opts - 1;
    if leo.opt (optx).segname = leo.opt (optx + 1).segname &
         leo.opt (optx).ep_name = leo.opt (optx + 1).ep_name
      then do;
        if leo.opt (optx).class = 9
	then call le_error_ (LE_WARNING, le_et_$dup_global_option,
		"^/Global ""^[retain^;delete^;no_link^]"" option ignored.",
		leo.opt (optx + 1).type - RETAIN + 1);
	else call le_error_ (LE_WARNING, le_et_$dup_ep_option,
		"^/Option ""^[retain^;delete^;no_link^] ^[^a$^;^s^]^[^a^;^s^]"" ignored.",
		leo.opt (optx + 1).type - RETAIN + 1,
		(mod (leo.opt (optx + 1).class, 3) ^= 0),
		leo.opt (optx + 1).segname,
		(leo.opt (optx + 1).class < 7),
		leo.opt (optx + 1).ep_name);
      end;
  end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_class:
  proc (segname,			/** segname string	    (in )	*/
       offsetname,			/** offsetname string   (in ) */
       ec)			/** error code	    (out) */
       returns (fixed bin);		/** ordering class	    (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	get_class					*/
  /***	Input:	segname, offsetname				*/
  /***	Function:	calculates the ordering class of an entrypoint	*/
  /***		specification.  Ordering class is based on how	*/
  /***		specific the name is.  Valid values are:	*/
  /***		  1 - segname$offsetname			*/
  /***		  2 - starname$offsetname			*/
  /***		  3 - **$offsetname				*/
  /***		  4 - segname$starname			*/
  /***		  5 - starname$starname			*/
  /***		  6 - **$starname				*/
  /***		  7 - segname$**				*/
  /***		  8 - starname$**				*/
  /***		  9 - **$**				*/
  /***		The options are sorted in ascending order by	*/
  /***		ordering class.  When trying to ascertain the	*/
  /***		disposition of any single definition, the option	*/
  /***		table is searched and the first matching option	*/
  /***		is used.					*/
  /***	Output:	ordering_class, error_code			*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl segname		char (*) parameter;
  dcl offsetname		char (*) parameter;
  dcl ec			fixed bin (35) parameter;

  /* automatic */

  dcl ordering_class	fixed bin automatic;

  /* The ordering class is derived based on the error code returned	*/
  /* by check_star_name_$entry.  If the string is a valid non-star	*/
  /* name, a 0 is returned, a starname returns a 1, and a starname	*/
  /* which matches anything (ie. **) returns a 2.  If the error code	*/
  /* is greater than 2, then the name is invalid.			*/

  call check_star_name_$entry (offsetname, ec);
  if ec > 2
    then return (9999);
  ordering_class = ec * 3;
  call check_star_name_$entry (segname, ec);
  if ec > 2
    then return (9999);
  ordering_class = ordering_class + ec + 1;
  ec = 0;

  return (ordering_class);

  end get_class;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


sort_opts:
  proc (leop);			/** le_options pointer  (i/o)	*/

  /*** ****************************************************************/
  /***							*/
  /***	Name:	sort_opts					*/
  /***	Input:	leop					*/
  /***	Function:	sorts the options into ascending order based on	*/
  /***		the ordering class.  This allows the disposition	*/
  /***		of any definition to be determined by performing	*/
  /***		a linear search of the option list searching for	*/
  /***		the first matching specification.		*/
  /***	Output:	leop					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl leop		ptr parameter;

  /* based */

  dcl 01 leo		aligned based (leop),
       02 header		aligned like le_options.header,
       02 opt		dim (0 refer (leo.n_opts)) like le_options.opt;

  /* automatic */

  dcl i			fixed bin automatic;

  /* build the heap */

  do i = leo.n_opts / 2 by -1 to 1;
    call adjust_heap (leop, i, leo.n_opts);
  end;

  /* sort the heap by extracting the largest and placing it at the	*/
  /* end of the array and inserting the last item into the heap to	*/
  /* rebuild a heap 1 smaller.				*/

  do i = leo.n_opts - 1 by -1 to 1;
    call exchange (leop, i + 1, 1);
    call adjust_heap (leop, 1, i);
  end;

  end sort_opts;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


adjust_heap:
  proc (leop,			/** le_options pointer  (i/o)	*/
       head,			/** pseudo-head index   (in ) */
       size);			/** end of heap	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	adjust_heap				*/
  /***	Input:	leop, head, size				*/
  /***	Function:	given a heap structure and a starting node,	*/
  /***		adjust the heap structure into a true heap by	*/
  /***		making sure that each node has a value greater	*/
  /***		than both of the child nodes.			*/
  /***	Output:	leop					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl leop		ptr parameter;
  dcl head		fixed bin parameter;
  dcl size		fixed bin parameter;

  /* automatic */

  dcl r			fixed bin automatic;
  dcl l			fixed bin automatic;
  dcl exch		fixed bin automatic;

  /* get the indecies of the left and right child nodes */

  l = 2 * head;
  r = l + 1;

  /* if they are out of bounds, we are done */

  if l > size
    then return;

  if r > size
    then r = 0;

  if greater (leop, head, r)
    then if greater (leop, l, r)
	 then exch = r;
	 else exch = l;
  else if greater (leop, head, l)
    then exch = l;
  else return;

  call exchange (leop, exch, head);
  call adjust_heap (leop, exch, size);

  end adjust_heap;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


exchange:
  proc (leop,			/** le_options pointer  (i/o)	*/
       x1,			/** exch node index 1   (in ) */
       x2);			/** exch node index 2   (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	exchange					*/
  /***	Input:	leop, x1, x2				*/
  /***	Function:	exchange the nodes indicated by the indicies x1	*/
  /***		and x2.					*/
  /***	Output:	leop					*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl leop		ptr parameter;
  dcl x1			fixed bin parameter;
  dcl x2			fixed bin parameter;

  /* based */

  dcl 01 leo		aligned based (leop),
       02 header		aligned like le_options.header,
       02 opt		dim (0 refer (leo.n_opts)) like le_options.opt;

  /* automatic */

  dcl 01 temp		aligned automatic like le_options.opt;

  temp = leo.opt (x2);
  leo.opt (x2) = leo.opt (x1);
  leo.opt (x1) = temp;

  end exchange;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


greater:
  proc (leop,			/** le_option pointer   (in )	*/
       orig,			/** index of original   (in ) */
       new)			/** index of new	    (in ) */
       returns (bit (1));		/** true if new > orig  (out) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	greater					*/
  /***	Input:	leop, new, orig				*/
  /***	Function:	determine if the option indicated by new is	*/
  /***		greated (according to the ordering method) than	*/
  /***		the option indicated by orig.			*/
  /***	Output:	greater_sw				*/
  /***							*/
  /*** ****************************************************************/

  /* parameters */

  dcl leop		ptr parameter;
  dcl new			fixed bin parameter;
  dcl orig		fixed bin parameter;

  /* based */

  dcl 01 leo		aligned based (leop),
       02 header		aligned like le_options.header,
       02 opt		dim (0 refer (leo.n_opts)) like le_options.opt;

  if new = 0
    then return (false);

  /* first criterion is ordering class */

  if leo.opt (new).class > leo.opt (orig).class
    then return (true);
  else if leo.opt (new).class < leo.opt (orig).class
    then return (false);

  /* with class, sort by segname */

  if leo.opt (new).segname > leo.opt (orig).segname
    then return (true);
  else if leo.opt (new).segname < leo.opt (orig).segname
    then return (false);

  /* within class and segname, sort by ep_name */

  if leo.opt (new).ep_name > leo.opt (orig).ep_name
    then return (true);
  else if leo.opt (new).ep_name < leo.opt (orig).ep_name
    then return (false);

  /* within class, segname, and ep_name, sort by order given in the	*/
  /* input options.						*/

  if leo.opt (new).order > leo.opt (orig).order
    then return (true);
    else return (false);

  end greater;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include le_input;

  end le_make_opt_tbl_;
