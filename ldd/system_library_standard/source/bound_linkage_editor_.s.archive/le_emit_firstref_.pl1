/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Originally written to emit the first reference traps for a single input
     component.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

le_emit_firstref_:
  proc (ocudp,			/** ocu_data pointer    (in )	*/
       lecp,			/** components pointer  (in ) */
       c);			/** component index	    (in ) */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_emit_firstref_				*/
  /***	Input:	ocudp, lecp, c				*/
  /***	Function: emits the first reference traps contained in a	*/
  /***		component.				*/
  /***	Output:	none					*/
  /***							*/
  /*** ****************************************************************/

  /* constants */

  dcl false		bit (1) static options (constant) init ("0"b);

  /* parameters */

  dcl ocudp		ptr parameter;
  dcl lecp		ptr parameter;
  dcl c			fixed bin parameter;

  /* procedures */

  dcl le_snap_		entry (ptr, ptr, fixed bin, fixed bin (3),
			uns fixed bin (18), uns fixed bin (18), bit (1),
			fixed bin (3), uns fixed bin (18), bit (6),
			bit (1));

  /* based */

  dcl 01 frt		aligned based (frtp),
       02 decl_vers		fixed bin,
       02 n_traps		fixed bin,
       02 trap_array	dim (0 refer (frt.n_traps))
			like fr_traps.trap_array;
  dcl 01 lec		aligned based (lecp),
       02 header		aligned like le_components.header,
       02 comp		dim (0 refer (lec.n_components)) like le_comp;
  dcl 01 vlh		aligned like virgin_linkage_header based (vlhp);

  /* automatic */

  dcl call_relp		fixed bin (18) unsigned automatic;
  dcl frtp		ptr automatic;
  dcl info_relp		fixed bin (18) unsigned automatic;
  dcl internal		bit (1) automatic;
  dcl modifier		bit (6) automatic;
  dcl relp		fixed bin (18) unsigned automatic;
  dcl section		fixed bin (3) automatic;
  dcl t			fixed bin automatic;
  dcl vlhp		ptr automatic;

  /* builtin */

  dcl addrel		builtin;
  dcl null		builtin;

  /* get the linkage header for the component */

  vlhp = lec.comp (c).orig.linkp;

  /* if there are no traps then return */

  if vlh.first_ref_relp = 0
    then return;

  /* get the trap block */

  frtp = addrel (vlhp, vlh.first_ref_relp);

  do t = 1 to frt.n_traps;

    /* for each trap, emit the link pointed to by the call relp */

    call le_snap_ (ocudp, lecp, c, Linkage, vlh.first_ref_relp + 1 + t,
         (frt.trap_array (t).call_relp), false, section, relp, modifier,
         internal);
    if section ^= Linkage
      then call_relp = ocu_$emit_link (ocudp, Self_Base, section, "", "",
	      (relp), ""b, null);

    /* emit the link for the info relp (if any) */

    if frt.trap_array (t).info_relp ^= 0
      then do;
        call le_snap_ (ocudp, lecp, c, Linkage, vlh.first_ref_relp + 1 + t,
	   (frt.trap_array (t).info_relp), false, section, relp, modifier,
	   internal);
        if section ^= Linkage
	then info_relp = ocu_$emit_link (ocudp, Self_Base, section, "",
		"", (relp), ""b, null);
      end;
      else info_relp = 0;

    /* emit the first reference trap */

    call ocu_$emit_firstref_trap (ocudp, call_relp, info_relp);

  end;

  return;

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include le_data;
%include object_link_dcls;
%include ocu_dcls;

  end le_emit_firstref_;


