/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This  routine determines the number of bytes in a control interval
     available for use (free).  Contral intervals are laid out conceptually
     from left to right as follow: fixed size bci_header, an array of datum
     slots, a pool of free space, and the used portion, which may contain
     scattered bytes of free storage.

       ------------------------------------------------------------
       |        | | |   | |            |      |//|       |////|   |
       | Header |1|2|...|N|   Pool     |      |//|       |////|   |
       |        | | |   | |            |      |//|       |////|   |
       ------------------------------------------------------------
                ^         ^            ^       ^           ^
                |         |            |       |           |
                start     start        |       scattered_free_space
                of slots  of pool      start 
                                       of used space
     The four entries work as follows:
     
       $all - returns the number of bytes in the pool (p_free_bytes_in_pool)
     and the number of free bytes in the control (p_free_bytes_in_ci), which
     includes the bytes in the pool and the scattered free bytes and a caller
     suppied number of bytes currently in use but to be reclaimed
     (p_old_datum_length).
     
       $effective - returns the same information as $all including space
     required for a datum header, i.e., space required for the datum header is
     not considered free. There are three possible datum_header sizes, the
     proper type of datum_header is determined by the p_is_continued and
     p_is_continuation flags input by the caller.
     
       $does_new_datum_fit - returns two flags indicating whether a new datum
     of the size p_new_datum_contents_length will fit in the control interval
     (p_fits_in_ci) or in the pool (p_fits_in_pool).  This entry takes header
     space into consideration, as in $effective, and the amount of space
     necessary for the new datum slot.  The datum slot of the new datum is
     supplied (p_new_datum_slot_idx) by Ordered ESM callers; this is because
     the new slot can be beyond the end of the old datum slot table, requiring
     more than one new slot. Basic ESM callers supply a value of 0; if there
     is a free slot then no extra space is used, else space for one extra slot
     must be accounted.
       This routine returns the amount of free space left in the control
     interval after accounting for the new datum (p_free_bytes_in_ci), if the
     datum fits.  If the datum does not fit, p_free_bytes_in_ci is a 
     non-positive interger with absolute value of the number of bytes in the 
     datum over what would fit.
     
       ** Not yet used **
       $does_replacement_fit - returns two flags indicating whether a
     replacement for a datum will fit in the control interval (p_fits_in_ci)
     or in the pool (p_fits_in_pool).  The size of the old datum (including
     header) (p_old_datum_length) and the length of the new datum contents
     (p_new_datum_contents_length).  Header space for the value of the datum
     is taken into consideration as in $effective.  The caller also supplies
     the offset of the old datum (p_old_datum_offset), and that offset
     indicates that the datum is the first datum in the used space, the pool
     is extended to include the old datum.
       This routine returns the amount of free space left in the control
     interval after accounting for the new datum (p_free_bytes_in_ci), if the
     datum fits.  If the datum does not fit, p_free_bytes_in_ci is a 
     non-positive interger with absolute value of the number of bytes in the 
     datum over what would fit.
*/

/* HISTORY:

Written by Matthew Pierret, 10/27/82.
Modified:
02/03/83 by Matthew Pierret: Fixed bug which subtracted header_space_required
            twice. Changed to check bci_header version.
08/08/83 by Matthew Pierret: Added the $does_new_datum_fit and
            $does_replacement_fit entries.
09/26/84 by Matthew Pierret: Added declaration of max and size.  Changed
            CHECK_VERSION_CHAR_4 to CHECK_CI_VERSION.  Moved procedure and
            format statements to standard location.
*/

/* format: style2,ind3 */

cm_determine_free_space:
   proc ();

      return;

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_bci_header_ptr       ptr parameter;
      dcl	    p_is_continued	       bit (1) aligned parameter;
      dcl	    p_is_continuation      bit (1) aligned parameter;
      dcl	    p_old_datum_offset     fixed bin (35) parameter;
      dcl	    p_old_datum_length     fixed bin (35) parameter;
      dcl	    p_new_datum_contents_length
			       fixed bin (35) parameter;
      dcl	    p_free_bytes_in_ci     fixed bin (35) parameter;
      dcl	    p_free_bytes_in_pool   fixed bin (35) parameter;
      dcl	    p_new_datum_slot_idx   fixed bin (35) parameter;
      dcl	    p_fits_in_pool	       bit (1) aligned;
      dcl	    p_fits_in_ci	       bit (1) aligned;

/* Automatic */

      dcl	    (first_byte_in_pool, free_bytes_in_pool, free_bytes_in_ci, number_of_slots, required_header_space)
			       fixed bin (35) init (0);
      dcl	    (determine_if_datum_fits, for_new_datum, for_replacement)
			       bit (1) aligned init ("0"b);

/* Based */
/* Builtin */

      dcl	    (max, null, size)      builtin;

/* Constant */

      dcl	    myname	       init ("cm_determine_free_space") char (32) varying internal static
			       options (constant);
      dcl	    BYTES_PER_WORD	       init (4) fixed bin internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$unimplemented_ci_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

effective:
   entry (p_bci_header_ptr, p_old_datum_length, p_is_continued, p_is_continuation, p_free_bytes_in_ci,
        p_free_bytes_in_pool);

      goto INCLUDE_DATUM_HEADER;

does_replacement_fit:
   entry (p_bci_header_ptr, p_old_datum_offset, p_old_datum_length, p_new_datum_contents_length, p_is_continued,
        p_is_continuation, p_fits_in_ci, p_fits_in_pool, p_free_bytes_in_ci);

      determine_if_datum_fits = "1"b;
      for_replacement = "1"b;
      goto INCLUDE_DATUM_HEADER;

does_new_datum_fit:
   entry (p_bci_header_ptr, p_new_datum_contents_length, p_new_datum_slot_idx, p_is_continued, p_is_continuation,
        p_fits_in_ci, p_fits_in_pool, p_free_bytes_in_ci);

      determine_if_datum_fits = "1"b;
      for_new_datum = "1"b;
      goto INCLUDE_DATUM_HEADER;

INCLUDE_DATUM_HEADER:
      if p_is_continued & p_is_continuation
      then required_header_space = CDCN_DATUM_HEADER_LENGTH_IN_BYTES;
      else if p_is_continued
      then required_header_space = CD_DATUM_HEADER_LENGTH_IN_BYTES;
      else required_header_space = 0;

      goto JOIN;


all:
   entry (p_bci_header_ptr, p_old_datum_length, p_free_bytes_in_ci, p_free_bytes_in_pool);

      goto JOIN;

JOIN:
      bci_header_ptr = p_bci_header_ptr;

      call CHECK_CI_VERSION (bci_header.layout_type);

      if for_new_datum
      then if p_new_datum_slot_idx > 0
	 then number_of_slots = max (bci_header.number_of_datums + 1, p_new_datum_slot_idx);
	 else if bci_header.flags.free_slot_is_present
	 then number_of_slots = bci_header.number_of_datums;
	 else number_of_slots = bci_header.number_of_datums + 1;
      else number_of_slots = bci_header.number_of_datums;

      first_byte_in_pool = BYTES_PER_WORD * (size (bci_header) + number_of_slots + 1);

      free_bytes_in_pool = bci_header.start_of_used_space - first_byte_in_pool - required_header_space;
      free_bytes_in_ci = free_bytes_in_pool + bci_header.scattered_free_space;

      if for_replacement
      then if p_old_datum_offset = bci_header.start_of_used_space
	 then free_bytes_in_pool = free_bytes_in_pool + p_old_datum_length;

      if ^for_new_datum
      then free_bytes_in_ci = free_bytes_in_ci + p_old_datum_length;

      if determine_if_datum_fits
      then
         do;
	  p_fits_in_ci = (p_new_datum_contents_length <= free_bytes_in_ci);
	  p_fits_in_pool = (p_new_datum_contents_length <= free_bytes_in_pool);
	  p_free_bytes_in_ci = free_bytes_in_ci - p_new_datum_contents_length;
						/* If ^p_fits_in_ci, this will be non-positive, */
						/* indicating how much smaller the datum must be to fit. */
         end;
      else
         do;
	  p_free_bytes_in_ci = free_bytes_in_ci;
	  p_free_bytes_in_pool = free_bytes_in_pool;
         end;

      return;
%page;
CHECK_CI_VERSION:
   proc (ccv_p_given_version);

      dcl	    ccv_p_given_version    char (4) aligned;

      if ccv_p_given_version ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a control interval; received ^a.", BASIC_CI_LAYOUT_1, ccv_p_given_version);
      else return;

   end CHECK_CI_VERSION;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_datum_constants;
%page;
%include sub_err_flags;

   end cm_determine_free_space;
