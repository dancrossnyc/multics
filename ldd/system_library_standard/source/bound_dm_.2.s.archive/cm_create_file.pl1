/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

          This routine creates a file and formats control interval zero
     for maintenance by collection_manager_. Creating the file consists
     solely of calling file_manager_$create_open. The format of control
     interval zero is a basic_control_interval (see dm_cm_basic_ci.incl.pl1)
     with the collection_header of collection zero (the header collection)
     taking up slot one, and the header for all collections, collmgr_header,
     taking up slot two.
     */

/* HISTORY:

Written by Matthew Pierret 08/04/82.
Modified:
11/03/82 by Matthew Pierret:  Changed to use cm_file_header (instead of 
            collmgr_header), new format CI (BASIC_CI_LAYOUT_1) which does
            not use datum headers.
12/01/82 by Lindsey Spratt:  Changed to set the storage_record_element_id in
	  the collection_header.
02/23/83 by Matthew Pierret: Changed to use file_reservation_map instead of
            block_map_array.
05/21/84 by Matthew Pierret: Renamed include files dm_cm_(esm cism)_info to
            dm_(esm cism)_info.  Added ERROR_RETURN procedure.
09/26/84 by Matthew Pierret: Changed to use file_manger_$simple_put.
            Removed unused variable declarations.  Changed to use addcharno
            instead of addr(substr()).
*/


/* format: style2,ind3 */

cm_create_file:
   proc (p_file_dir, p_file_name, p_file_create_info_ptr, p_file_opening_id, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_dir	       char (*);
      dcl	    p_file_name	       char (*);
      dcl	    p_file_create_info_ptr ptr;
      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    code		       fixed bin (35) init (0);
      dcl	    file_opening_id	       bit (36) aligned init ("0"b);
      dcl	    control_interval_zero  char (CONTROL_INTERVAL_ZERO_ADDRESSABLE_LENGTH_IN_BYTES) aligned;
      dcl	    control_interval_one   char (CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES) aligned;
      dcl	    collection_header_length_in_bytes
			       fixed bin (17);
      dcl	    cm_file_header_length_in_bytes
			       fixed bin (17);
      dcl	    based_byte_string_ptr  ptr;
      dcl	    bbs_length	       fixed bin (17);

      dcl	    1 initial_file_reservation_map
			       aligned like file_reservation_map;

/* Based */

      dcl	    datum_header_string    bit (9) unaligned based;
      dcl	    based_byte_string      char (bbs_length) unaligned based (based_byte_string_ptr);

/* Builtin */

      dcl	    (addcharno, addr, size, substr, unspec)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    BYTES_PER_WORD	       fixed bin init (4) int static options (constant);
      dcl	    BITS_PER_BYTE	       fixed bin init (9) int static options (constant);
      dcl	    BITS_PER_WORD	       fixed bin init (36) int static options (constant);
      dcl	    myname	       init ("cm_create_file") char (32) varying int static options (constant);
      dcl	    MAX_ELEMENT_SIZE       fixed bin (35) init (999999) int static options (constant);
      dcl	    ALLOCATION_MAP_ELEMENT_ID
			       bit (36) aligned init ("000000010001"b3) int static options (constant);
      dcl	    COLLECTION_ID_TABLE_ELEMENT_ID
			       bit (36) aligned init ("000000000004"b3) int static options (constant);
      dcl	    BLOCK_MAP_ARRAY_ELEMENT_ID
			       bit (36) aligned init ("000000000005"b3) int static options (constant);

      dcl	    INITIAL_ALLOCATION_MAP_LENGTH_IN_BYTES
			       fixed bin (17) init (116) int static options (constant);
      dcl	    DEFAULT_NUMBER_OF_CONTROL_INTERVALS_PER_BLOCK
			       fixed bin (17) init (1024) int static options (constant);
      dcl	    DEFAULT_STORAGE_RECORD_ELEMENT_ID
			       init ("000000000006"b3) bit (36) aligned internal static options (constant);
      dcl	    START_OF_CI_OFFSET     init (0) fixed bin (21) internal static options (constant);

/* Entry */

      dcl	    file_manager_$create_open
			       entry (char (*), char (*), ptr, bit (36) aligned, fixed bin (35));
      dcl	    file_manager_$delete_close
			       entry (bit (36) aligned, fixed bin (35));
      dcl	    file_manager_$simple_put
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));

/* External */

      dcl	    (
	    dm_error_$file_already_exists,
	    dm_error_$file_already_open
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code, code = 0;
      p_file_opening_id = "0"b;
      frm_number_of_fragments = 0;			/* To silence the compiler */

      call file_manager_$create_open (p_file_dir, p_file_name, p_file_create_info_ptr, file_opening_id, code);
      if code ^= 0
      then
         do;
	  if code = dm_error_$file_already_exists | code = dm_error_$file_already_open
	  then p_file_opening_id = file_opening_id;
	  call ERROR_RETURN (code);
         end;

      collection_header_length_in_bytes = size (collection_header) * BYTES_PER_WORD;
      cm_file_header_length_in_bytes = size (cm_file_header) * BYTES_PER_WORD;

/* Initialize the first control interval - control interval 0. */

      unspec (control_interval_zero) = "0"b;
      basic_control_interval_ptr = addr (control_interval_zero);

      basic_control_interval.header.layout_type = BASIC_CI_LAYOUT_1;
      basic_control_interval.header.collection_id = HEADER_COLLECTION_ID;
      basic_control_interval.header.number_of_datums = 6;

/*
    Initialize the datum slots of the following elements:
     Slot 1 - collection_header of the "header collection"
     Slot 2 - cm_file_header (collection_manager_ info about entire file)
     Slot 3 - Reserved for user
     Slot 4 - collection_id_table (containing no collection ids)
     Slot 5 - file_reservation_map (containing one fragment)
     Slot 6 - storage record for header collection (unblocked_storage_record)
*/

      basic_control_interval.datum_position_table (1).offset_in_bytes =
	 CONTROL_INTERVAL_ZERO_ADDRESSABLE_LENGTH_IN_BYTES - collection_header_length_in_bytes;
      basic_control_interval.datum_position_table (1).length_in_bits = collection_header_length_in_bytes * BITS_PER_BYTE;

      basic_control_interval.datum_position_table (2).offset_in_bytes =
	 basic_control_interval.datum_position_table (1).offset_in_bytes - cm_file_header_length_in_bytes;
      basic_control_interval.datum_position_table (2).length_in_bits = cm_file_header_length_in_bytes * BITS_PER_BYTE;

      basic_control_interval.datum_position_table (3).offset_in_bytes =
	 basic_control_interval.datum_position_table (2).offset_in_bytes;
      basic_control_interval.datum_position_table (3).length_in_bits = 0;

      basic_control_interval.datum_position_table (4).offset_in_bytes =
	 basic_control_interval.datum_position_table (2).offset_in_bytes - BYTES_PER_WORD;
      basic_control_interval.datum_position_table (4).length_in_bits = BITS_PER_WORD;

      basic_control_interval.datum_position_table (5).offset_in_bytes =
	 basic_control_interval.datum_position_table (4).offset_in_bytes
	 - size (initial_file_reservation_map) * BYTES_PER_WORD;
      basic_control_interval.datum_position_table (5).length_in_bits =
	 size (initial_file_reservation_map) * BITS_PER_WORD;

      basic_control_interval.datum_position_table (6).offset_in_bytes =
	 basic_control_interval.datum_position_table (5).offset_in_bytes
	 - size (unblocked_storage_record) * BYTES_PER_WORD;
      basic_control_interval.datum_position_table (6).length_in_bits = size (unblocked_storage_record) * BITS_PER_WORD;

      basic_control_interval.header.start_of_used_space = basic_control_interval.datum_position_table (6).offset_in_bytes;

/* 
     Directly insert the values of the six elements by overlaying based
     structures on control_interval_zero.  Each element is on a word boundary,
     so there are no alignment problems.

     Set value of collection zero's collection_header 
*/

      collection_header_ptr =
	 addcharno (basic_control_interval_ptr, basic_control_interval.datum_position_table (1).offset_in_bytes);

      collection_header.version = COLLECTION_HEADER_VERSION_2;
      collection_header.flags.thread_control_intervals = "1"b;
      collection_header.maximum_element_size = MAX_ELEMENT_SIZE;
      collection_header.control_interval_storage_method = UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD;
      collection_header.element_storage_method = BASIC_ELEMENT_STORAGE_METHOD;
      collection_header.storage_record_element_id = DEFAULT_STORAGE_RECORD_ELEMENT_ID;

/* Set value for collection_manager_'s file header (cm_file_header) */

      cm_file_header_ptr =
	 addcharno (basic_control_interval_ptr, basic_control_interval.datum_position_table (2).offset_in_bytes);

      cm_file_header.version = CM_FILE_HEADER_VERSION_1;
      cm_file_header.allocation_map_element_id = BLOCK_MAP_ARRAY_ELEMENT_ID;
      cm_file_header.collection_id_table_element_id = COLLECTION_ID_TABLE_ELEMENT_ID;
      cm_file_header.number_of_control_intervals_per_block = DEFAULT_NUMBER_OF_CONTROL_INTERVALS_PER_BLOCK;
      cm_file_header.number_of_blocks = 1;

/*
    Since the initial value for the collection_id_table is "0"b,
    it need not be inserted.

    Insert the file_reservation_map, which at this time consists of one entry. 
*/

      based_byte_string_ptr =
	 addcharno (basic_control_interval_ptr, basic_control_interval.datum_position_table (5).offset_in_bytes);
      bbs_length = size (initial_file_reservation_map) * BYTES_PER_WORD;

      unspec (initial_file_reservation_map) = "0"b;
      initial_file_reservation_map.lowest_numbered_control_interval = 1;
      initial_file_reservation_map.element_id = ALLOCATION_MAP_ELEMENT_ID;

      based_byte_string = addr (initial_file_reservation_map) -> based_byte_string;

/*
     Set the value of the unblocked_storage_record. 
*/

      unblocked_storage_record_ptr =
	 addcharno (basic_control_interval_ptr, basic_control_interval.datum_position_table (6).offset_in_bytes);

      unblocked_storage_record.first_control_interval = 0;
      unblocked_storage_record.last_control_interval = 1;

/*
     Put the whole control interval into the file.
*/

      call file_manager_$simple_put (file_opening_id, 0, START_OF_CI_OFFSET, basic_control_interval_ptr,
	 (CONTROL_INTERVAL_ZERO_ADDRESSABLE_LENGTH_IN_BYTES), code);
      if code ^= 0
      then call ERROR_RETURN (code);

/*
     Insert the reservation map.  It consists of a single fragment in control
     interval one, which is also part of the header collection (collection
     zero).
*/

      unspec (control_interval_one) = "0"b;
      basic_control_interval_ptr = addr (control_interval_one);

      basic_control_interval.layout_type = BASIC_CI_LAYOUT_1;
      basic_control_interval.header.collection_id = HEADER_COLLECTION_ID;
      basic_control_interval.number_of_datums = 1;

      frmf_number_of_control_intervals = DEFAULT_NUMBER_OF_CONTROL_INTERVALS_PER_BLOCK;

      basic_control_interval.datum_position_table (1).offset_in_bytes =
	 CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES - INITIAL_ALLOCATION_MAP_LENGTH_IN_BYTES;
      basic_control_interval.datum_position_table (1).length_in_bits = frmf_number_of_control_intervals;

      file_reservation_map_fragment_ptr =
	 addcharno (basic_control_interval_ptr, basic_control_interval.datum_position_table (1).offset_in_bytes);

      substr (file_reservation_map_fragment, 1, 1) = "1"b;	/* To mark that control interval one has been allocated */

      call file_manager_$simple_put (file_opening_id, 1, START_OF_CI_OFFSET, basic_control_interval_ptr,
	 (CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES), code);
      if code ^= 0
      then call ERROR_RETURN (code);


      p_file_opening_id = file_opening_id;
MAIN_RETURN:
      return;
%page;
ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH ();
      go to MAIN_RETURN;

   end ERROR_RETURN;


FINISH:
   proc ();

/* This can go when protected file creation is implemented */
      if p_file_opening_id = "0"b & file_opening_id ^= "0"b
      then call file_manager_$delete_close (file_opening_id, (0));

   end FINISH;
%page;
%include dm_hdr_collection_id;
%page;
%include dm_cm_hdr_col_ids;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_file_header;
%page;
%include dm_cm_collection_header;
%page;
%include dm_esm_info;
%page;
%include dm_cism_info;
%page;
%include dm_cm_reservation_map;
%page;
%include dm_cm_storage_record;
%page;
%include dm_ci_header;
%page;
%include dm_ci_lengths;

   end cm_create_file;
