/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* format: style2,ind3 */

cm_put_cn_datum:
   proc (p_cm_info_ptr, p_datum_contents_ptr, p_datum_contents_length, p_continuation, p_datum_id, p_code);

/* DESCRIPTION:

         This  routine  allocates  a  single  datum.    The  datum  must be a
     continuation or continued-continuation datum of an element.  The  routine
     first  finds  a  control  interval that has enough free space to hold the
     datum, allocating a new control interval if necessary.  Then a free  slot
     is found and the datum is place in the free pool.

     p_datum_id is the control interval id / slot index found for the datum.
     p_continuation is "0"b if searching for a continuation_datum; the value
     of this datum's continuation if searching for a continued continuation
     datum
*/

/* HISTORY:

Written by Matthew Pierret, 11/02/82.
Modified:
12/01/82 by Lindsey Spratt:  Added setting of the is_continuation and
	  is_continued flags. 
02/02/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2. Fixed bug in
            deciding when to set bci_header.number_of_datums.
08/04/83 by Matthew Pierret: Changed to use cm_determine_free_space
            $does_new_datum_fit.  This entry understands that the space needed
            is for a new datum, and takes into consideration the need for a 
            new datum slot. Because of this, this routine does not have to set
            bci_header.number_of_datums to what it will be after the allocation
            to get the correct results before calling cm_dfs$dndf.
            Changed cm_find_free_slot to return a flag indicating the value
            bci_header.free_slot_is_present after allocation.

11/01/84 by Lindsey L. Spratt:  Changed the main procedure name, and myname,
            to agree with the segment name (cm_put_cn_datum).  The old
            procedure name was cm_allocate_cn_datum.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_cm_info_ptr	       ptr parameter;
      dcl	    p_datum_contents_ptr   ptr parameter;
      dcl	    p_datum_contents_length
			       fixed bin (35) parameter;
      dcl	    p_continuation	       bit (36) aligned parameter;
      dcl	    p_datum_id	       bit (36) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/*  Automatic */

      dcl	    1 automatic_bci_header aligned like bci_header;
      dcl	    1 automatic_datum_slot aligned like datum_slot;
      dcl	    (fits_in_ci, fits_in_pool, has_free_slot_after_allocation)
			       bit (1) aligned init ("0"b);
      dcl	    control_interval_id    fixed bin (24) unsigned init (0);
      dcl	    (datum_contents_length_in_bytes, total_free_bytes)
			       fixed bin (35) init (0);
      dcl	    (number_of_slots_after_allocation, slot_idx)
			       fixed bin (17) init (0);

/* Based */

      dcl	    datum_id_string	       bit (36) aligned based (datum_id_ptr);

/* Builtin */

      dcl	    (addr, ceil, divide, null, unspec)
			       builtin;

/* Constant */

      dcl	    myname	       init ("cm_put_cn_datum") char (32) varying internal static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin internal static options (constant);
      dcl	    IS_A_CONTINUATION      init ("1"b) bit (1) aligned internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$programming_error
			       fixed bin (35) ext;
      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code = 0;
      cm_info_ptr = p_cm_info_ptr;
      call CHECK_VERSION ((cm_info.version), (CM_INFO_VERSION_2), "cm_info");

      datum_id_ptr = addr (p_datum_id);

      datum_contents_length_in_bytes = ceil (divide (p_datum_contents_length, BITS_PER_BYTE, 35, 18));

      unspec (automatic_bci_header) = "0"b;
      unspec (automatic_datum_slot) = "0"b;

      bci_header_ptr = addr (automatic_bci_header);
      datum_slot_ptr = addr (automatic_datum_slot);

      call cm_find_ci_to_alloc_datum (cm_info_ptr, datum_contents_length_in_bytes, 0, (p_continuation ^= "0"b), "1"b,
	 bci_header_ptr, control_interval_id, p_code);
      if p_code ^= 0
      then return;

      call cm_find_free_slot (cm_info.file_oid, control_interval_id, bci_header_ptr, slot_idx,
	 number_of_slots_after_allocation, has_free_slot_after_allocation, p_code);
      if p_code ^= 0
      then return;

      datum_id.control_interval_id = control_interval_id;
      datum_id.index = slot_idx;

      call cm_determine_free_space$does_new_datum_fit (bci_header_ptr, datum_contents_length_in_bytes, (slot_idx),
	 (p_continuation ^= "0"b), IS_A_CONTINUATION, fits_in_ci, fits_in_pool, total_free_bytes);

      if ^fits_in_ci
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Control interval ^d was selected in which to allocate a datum, but the^/^10xthere is not enough free space in which to fit the datum.^/^10xThe datum is ^d bytes long;there are ^d free."
	      , control_interval_id, datum_contents_length_in_bytes, total_free_bytes);


      if fits_in_pool
      then bci_header.number_of_datums = number_of_slots_after_allocation;
      else
         do;
	  call cm_compact (cm_info.file_oid, number_of_slots_after_allocation, datum_id_string, bci_header_ptr, p_code);
	  if p_code ^= 0
	  then return;

         end;

      bci_header.flags.free_slot_is_present = has_free_slot_after_allocation;
      datum_slot.flags.is_continuation = "1"b;

      if p_continuation = "0"b
      then call cm_put_datum_in_pool (cm_info.file_oid, datum_id_string, p_datum_contents_ptr, p_datum_contents_length,
	      datum_slot_ptr, bci_header_ptr, p_code);

      else
         do;
	  datum_slot.flags.is_continued = "1"b;
	  call cm_put_datum_in_pool$continued (cm_info.file_oid, datum_id_string, p_datum_contents_ptr,
	       p_datum_contents_length, datum_slot_ptr, bci_header_ptr, -1, p_continuation, p_code);
         end;

      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (8);
      dcl	    p_expected_version     char (8);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
%include dm_cm_info;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;
   end cm_put_cn_datum;
