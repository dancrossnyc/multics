/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This routine takes a pointer to an element (p_element_ptr) and
   allocates maximum-sized datums in which to store the element.  Starting
   from the end of the element, it takes a maximum-sized piece off the end,
   allocates a control interval, and stores the piece as a datum in the first
   slot of the new control interval.  It stops when the element has been
   reduced to less than a maximum-sized datum.  This routine can be called
   with an element that already has had part of the element allocated in this
   fashion, providing that the allocated portion is at the end and is all
   maximum-sized datums.  In this case, the caller passes the datum_id of the
   leftmost datum (p_continuation_datum_id) which is stored as part of the
   first datum allocated by this routine.
   
        The first datum stored (the rightmost datum) is handled as a special
   case if it is the last datum of the element (p_continuation_datum_id =
   "0"b).  First, since it is the last datum, it is not itself continued,
   i.e. it is a continuation_datum rather than a continued_continuation_datum. 
   Second, if the total length of the element is not an integral number of
   bytes, the last byte of this datum is padded to make it an integral number
   of bytes.
   
        On output, p_remainder_length_in_bits is set to the number of bits of
   the element not stored by this routine.  This is the leftmost part of the
   element and the remaining number of bits must be less than the maximum size
   of a datum. It can be zero.  p_continuation_datum_id is set to be the
   datum_id of the last (logically, leftmost) datum stored.  
*/

/* HISTORY:

Written by Matthew Pierret, 10/27/82.
Modified:
12/23/82 by Lindsey Spratt:  Fixed to set cm_info_ptr.
01/03/83 by Lindsey Spratt:  Fixed to set p_continuation and to update
	  remainder_length_in_bits and p_remainder_length_in_bits.   Changed
	  to use the info_header entry in cm_allocate_ci to get a current
	  and valid value for the bci_header.
01/05/83 by Lindsey Spratt:  Fixed to set the continued_datum_is_present flag.
01/05/83 by Matthew Pierret: Changed to make rightmost datum (the first datum
            stored in this routine) pad the last byte to make all datums to the
            left be an integral number of bytes.
02/03/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2. Added version check
03/09/83 by Lindsey Spratt:  Fixed use of based_bit_array, was too low by 1.
	  Moved setting of dclib to MDCLIB into case for datum_count ^=
	  1 or p_continuation ^= "0"b.  Fixed to initialize datum_slot.flags
	  to "0"b.
04/04/83 by Lindsey L. Spratt:  Fixed to check p_code after calling
            cm_put_datum_in_pool$*.  Fixed to initialize the datum_slot for
            each datum.
04/05/83 by Lindsey L. Spratt:  Changed to explicitly calculate the
            datum_contents_ptr using the addbitno builtin instead of the addr
            builtin and a based_bit_array.
09/24/84 by Matthew Pierret: To add ERROR_RETURN and LIMIT, and remove call-
            by-value to CHECK_VERSION.
*/

/* format: style2,ind3 */

cm_put_overlength_tail:
   proc (p_cm_info_ptr, p_element_ptr, p_remainder_length_in_bits, p_continuation_datum_id, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_cm_info_ptr	       ptr parameter;
      dcl	    p_element_ptr	       ptr parameter;
      dcl	    p_remainder_length_in_bits
			       fixed bin (35) parameter;
      dcl	    p_continuation_datum_id
			       bit (36) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    1 my_bci_header	       aligned like bci_header;
      dcl	    1 my_datum_slot	       aligned like datum_slot;
      dcl	    code		       fixed bin (35);
      dcl	    control_interval_id    fixed bin (24) uns init (0);
      dcl	    datum_count	       fixed bin (17) init (0);
      dcl	    (remainder_length_in_bits, datum_contents_length_in_bits, number_of_bits_in_last_byte)
			       fixed bin (35) init (0);
      dcl	    datum_contents_ptr     ptr init (null);

/* Based */
/* Builtin */

      dcl	    (addbitno, addr, mod, null, unspec)
			       builtin;

/*	 Constant */

      dcl	    myname	       init ("cm_put_overlength_tail") char (32) varying internal static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin internal static options (constant);
      dcl	    LIMIT		       init (131071) fixed bin (17) internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$programming_error
			       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      p_code, code = 0;
      cm_info_ptr = p_cm_info_ptr;
      call CHECK_VERSION ("cm_info", cm_info.version, CM_INFO_VERSION_2);

      bci_header_ptr = addr (my_bci_header);
      datum_slot_ptr = addr (my_datum_slot);


      remainder_length_in_bits = p_remainder_length_in_bits;

      do datum_count = 1 to LIMIT
	 while (remainder_length_in_bits > MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS - BITS_PER_BYTE);

         call cm_allocate_ci$info_header (cm_info_ptr, control_interval_id, bci_header_ptr, code);
         if code ^= 0
         then call ERROR_RETURN (code);

         bci_header.number_of_datums = 1;
         bci_header.flags.continuation_datum_is_present = "1"b;

         element_id.control_interval_id = control_interval_id;
         element_id.index = 1;

         unspec (datum_slot) = ""b;
         datum_slot.is_continuation = "1"b;

         if datum_count = 1 & p_continuation_datum_id = "0"b
         then
	  do;
	     number_of_bits_in_last_byte = mod (remainder_length_in_bits, BITS_PER_BYTE);
	     if number_of_bits_in_last_byte = 0
	     then number_of_bits_in_last_byte = BITS_PER_BYTE;
	     datum_contents_length_in_bits =
		MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS - BITS_PER_BYTE + number_of_bits_in_last_byte;
	     datum_contents_ptr = addbitno (p_element_ptr, remainder_length_in_bits - datum_contents_length_in_bits);
	     call cm_put_datum_in_pool (cm_info.file_oid, element_id_string, datum_contents_ptr,
		datum_contents_length_in_bits, datum_slot_ptr, bci_header_ptr, code);
	     if code ^= 0
	     then call ERROR_RETURN (code);
	  end;
         else
	  do;
	     datum_contents_length_in_bits = MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS;
	     datum_contents_ptr = addbitno (p_element_ptr, remainder_length_in_bits - datum_contents_length_in_bits);
	     call cm_put_datum_in_pool$continued (cm_info.file_oid, element_id_string, datum_contents_ptr,
		datum_contents_length_in_bits, datum_slot_ptr, bci_header_ptr, -1, p_continuation_datum_id, code);
	     if code ^= 0
	     then call ERROR_RETURN (code);
	  end;
         p_continuation_datum_id = element_id_string;
         remainder_length_in_bits = remainder_length_in_bits - datum_contents_length_in_bits;

      end;
      if datum_count > LIMIT
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null (), 0,
	      "^/The program was looping infinitely.");

      p_remainder_length_in_bits = remainder_length_in_bits;

MAIN_RETURN:
      return;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_given_version, cv_p_correct_version);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", cv_p_correct_version,
	      cv_p_structure_name, cv_p_given_version);
      else return;

   end CHECK_VERSION;
%page;
%include dm_cm_info;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_cm_entry_dcls;
%page;
%include dm_element_id;
%page;
%include sub_err_flags;

   end cm_put_overlength_tail;
