/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         Given  a  pointer to a dimension_table, convert that dimension_table
     into a field_table.  The caller provides a pointer to the area  in  which
     to  allocate  the field_table.  In addition to returning a pointer to the
     newly allocated field_table, this  routine  returns  the  length  of  the
     largest possible record represented by the field_table, in bits.
*/

/* HISTORY:

Written by Matthew Pierret, 08/25/83.
Modified:
05/03/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3.  Changed to
            align fields in string.
09/12/84 by Matthew C. Pierret:  Changed the SET_FIELD_LOCATIONS loop to set
            the location after calculating what the location is, instead of
            before.  Added a prefix on each variable local to an internal
            subroutine.  Changed the format style from style2,ind3, so
            reformat before comparing with old version.
12/10/84 by R. Michael Tague:  Addressed auditing comments.
*/

/* format: style2,ind3 */
/* format: ll79,comcol50,indcomtxt,^indnoniterdo,indnoniterend,^indprocbody */

dfu_cv_dim_to_field_table:
   proc (p_work_area_ptr, p_dimension_table_ptr, p_field_table_ptr,
        p_maximum_record_length);


/* START OF DECLARATIONS */
/* Parameter */

   dcl	 p_work_area_ptr	    ptr;	         /* is a pointer to an area in */
				         /* which to allocate the field_table */
   dcl	 p_dimension_table_ptr  ptr;	         /* is a pointer to the input */
				         /* dimension_table. */
   dcl	 p_field_table_ptr	    ptr;	         /* is the pointer to the newly */
				         /* created field_table. */
   dcl	 p_maximum_record_length
			    fixed bin (35);/* is the length of the largest record */
				         /* record that can possibly be represented */
				         /* by the field_table. */

/* Automatic */

   dcl	 alignment	    fixed bin;
   dcl	 bits_past_alignment_boundary
			    fixed bin;
   dcl	 field_idx	    fixed bin;
   dcl	 position_in_varying_fields
			    fixed bin;
   dcl	 (code, location_of_next_field, varying_field_portion_length,
	 field_length_in_bits)  fixed bin (35);

/* Based */

   dcl	 p_work_area	    area (10000) based (p_work_area_ptr);

/* Builtin */

   dcl	 (addr, hbound, mod, null, rtrim, string)
			    builtin;

/* Condition */

   dcl	 cleanup		    condition;

/* Constant */

   dcl	 myname		    init ("dfu_cv_dim_to_field_table")
			    char (32) varying internal static
			    options (constant);
   dcl	 MAXIMUM_LENGTH_HELD_IN_ONE_BYTE
			    fixed bin (35) int static
			    options (constant)
			    init (511 /* 2 ** 9 - 1 */);
   dcl	 MAXIMUM_LENGTH_HELD_IN_TWO_BYTES
			    fixed bin (35) int static
			    options (constant)
			    init (262143511 /* 2 ** 18 - 1 */);
   dcl	 ONE_BYTE		    fixed bin int static options (constant)
			    init (9);
   dcl	 TWO_BYTES	    fixed bin int static options (constant)
			    init (18);
   dcl	 FOUR_BYTES	    fixed bin int static options (constant)
			    init (36);

/* Entry */

   dcl	 sub_err_		    entry () options (variable);
   dcl	 dmu_get_data_bit_length$alignment
			    entry (bit (36) aligned, fixed bin (35),
			    fixed bin (17), fixed bin (35));

/* External */

   dcl	 dm_error_$programming_error
			    fixed bin (35) ext;
   dcl	 error_table_$unimplemented_version
			    fixed bin (35) ext;

/* END OF DECLARATIONS */

   code = 0;
   p_field_table_ptr, field_table_ptr = null;

   dimension_table_ptr = p_dimension_table_ptr;
   call CHECK_VERSION ((dimension_table.version), DIMENSION_TABLE_VERSION_1,
        "dimension_table");

   ft_number_of_fields = dimension_table.number_of_dimensions;
   ft_length_of_field_names = 0;
   do field_idx = 1 to ft_number_of_fields;
      ft_length_of_field_names =
	 ft_length_of_field_names
	 + length (dimension_table.dimension (field_idx).name);
   end;

   on cleanup call FINISH ();

   alloc field_table in (p_work_area);
   field_table.field_names = "";

SET_NAME_AND_DESCRIPTOR:
   do field_idx = 1 to hbound (field_table.field, 1);
      field_table.field (field_idx).location_of_name =
	 length (rtrim (field_table.field_names)) + 1;
      field_table.field (field_idx).length_of_name =
	 length (dimension_table.dimension (field_idx).name);
      field_table.field_names =
	 rtrim (field_table.field_names)
	 || dimension_table.dimension (field_idx).name;

      if dimension_table.dimension (field_idx).descriptor_ptr
	 ^= addr (dimension_table.dimension (field_idx).descriptor_string)
      then call sub_err_ (dm_error_$programming_error, myname,
	      ACTION_CANT_RESTART, null, 0, "^/^10x^a^/^10x^a",
	      "A potentially multiple-word descriptor was supplied for a field."
	      ,
	      "Currently only single word descriptors are supported in the field_table."
	      );

      field_table.field (field_idx).descriptor =
	 dimension_table.dimension (field_idx).descriptor_string;
      string (field_table.field (field_idx).flags) = "0"b;
   end SET_NAME_AND_DESCRIPTOR;

   position_in_varying_fields = 0;
SETUP_VARYING_FIELD_MAP:
   do field_idx = 1 to hbound (field_table.field, 1);
      if FIELD_IS_VARYING (field_table.field (field_idx).descriptor)
      then
         do;
         field_table.field (field_idx).flags.length_is_in_characters =
	    FIELD_IS_CHARACTER_VARYING (field_table.field (field_idx)
	    .descriptor);
         position_in_varying_fields = position_in_varying_fields + 1;
         field_table.varying_field_map (position_in_varying_fields).field_id =
	    field_idx;
         field_table.varying_field_map (field_idx).varying_field_index =
	    position_in_varying_fields;
         end;
   end SETUP_VARYING_FIELD_MAP;

   location_of_next_field = 1;
   varying_field_portion_length = 0;
SET_FIELD_LOCATIONS:
   do field_idx = 1 to hbound (field_table.field, 1);
      call dmu_get_data_bit_length$alignment (field_table.field (field_idx)
	 .descriptor, field_length_in_bits, alignment, code);
      if code ^= 0
      then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Error encountered attempting to get the length in bits of field ^d, ^/with descriptor of ^3bo."
	      , field_idx, field_table.field (field_idx).descriptor);

      bits_past_alignment_boundary =
	 mod (location_of_next_field - 1, alignment);
      if bits_past_alignment_boundary > 0
      then location_of_next_field =
	      location_of_next_field + alignment
	      - bits_past_alignment_boundary;
      field_table.field (field_idx).location = location_of_next_field;

      if field_table.varying_field_map (field_idx).varying_field_index = 0
      then field_table.field (field_idx).length_in_bits = field_length_in_bits;
      else
         do;
         if field_length_in_bits < MAXIMUM_LENGTH_HELD_IN_ONE_BYTE
         then field_table.field (field_idx).length_in_bits = ONE_BYTE;
         else if field_length_in_bits < MAXIMUM_LENGTH_HELD_IN_TWO_BYTES
         then field_table.field (field_idx).length_in_bits = TWO_BYTES;
         else field_table.field (field_idx).length_in_bits = FOUR_BYTES;

         varying_field_portion_length =
	    varying_field_portion_length + field_length_in_bits;
         end;
      location_of_next_field =
	 location_of_next_field
	 + field_table.field (field_idx).length_in_bits;

   end SET_FIELD_LOCATIONS;
   field_table.location_of_first_varying_field = location_of_next_field;

   p_field_table_ptr = field_table_ptr;
   p_maximum_record_length =
        location_of_next_field + varying_field_portion_length;

   return;
%page;
FINISH:
   proc ();

   if field_table_ptr ^= null & field_table_ptr ^= p_field_table_ptr
   then free field_table;

   end FINISH;
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
   dcl	 cv_p_received_version  char (8);
   dcl	 cv_p_expected_version  char (8);
   dcl	 cv_p_structure_name    char (*);

   if cv_p_received_version ^= cv_p_expected_version
   then call sub_err_ (error_table_$unimplemented_version, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected version ^a of the ^a structure.^/Received version ^a instead."
	   , cv_p_expected_version, cv_p_structure_name,
	   cv_p_received_version);
   else return;

   end CHECK_VERSION;
%page;
FIELD_IS_VARYING:
   proc (fiv_p_descriptor_string) returns (bit (1) aligned);

   dcl	 fiv_p_descriptor_string
			    bit (36) aligned;
   dcl	 1 fiv_descriptor_type  unal based (addr (fiv_p_descriptor_string)),
	   2 unused1	    bit (1) unal,
	   2 type		    fixed bin (6) unsigned unal,
	   2 unused2	    bit (29) unal;
   dcl	 BIT_VARYING	    fixed bin (6) unsigned init (20);
   dcl	 CHAR_VARYING	    fixed bin (6) init (22);

   if fiv_descriptor_type.type = BIT_VARYING
        | fiv_descriptor_type.type = CHAR_VARYING
   then return ("1"b);
   else return ("0"b);

   end FIELD_IS_VARYING;
%page;
FIELD_IS_CHARACTER_VARYING:
   proc (ficv_p_descriptor_string) returns (bit (1) aligned);

   dcl	 ficv_p_descriptor_string
			    bit (36) aligned;
   dcl	 1 ficv_descriptor_type unal based (addr (ficv_p_descriptor_string)),
	   2 unused1	    bit (1) unal,
	   2 type		    fixed bin (6) unsigned unal,
	   2 unused2	    bit (29) unal;
   dcl	 BIT_VARYING	    fixed bin (6) unsigned init (20);
   dcl	 CHAR_VARYING	    fixed bin (6) init (22);

   if ficv_descriptor_type.type = CHAR_VARYING
   then return ("1"b);
   else return ("0"b);

   end FIELD_IS_CHARACTER_VARYING;
%page;
%include dm_field_table;
%page;
%include vu_dimension_table;
%page;
%include sub_err_flags;
   end dfu_cv_dim_to_field_table;
