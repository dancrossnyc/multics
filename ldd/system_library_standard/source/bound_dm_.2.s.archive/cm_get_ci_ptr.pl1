/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

          This routine implements the 
     collection_manager_$get_control_interval_ptr entry.  It gets a pointer
     to the addressable portion of a control interval.  The pointer is actually
     to the control interval in the file, not to a copy.  The following errors
     can occur as a result of consistency checks, but do not prevent the return
     of p_the control_interval_ptr:

     dm_error_$ci_not_allocated - the entire control interval header is "0"b
     dm_error_$ci_not_in_collection - the control interval does not belong to
                                      the specified collection.
     error_table_$unimplemented_version - the layout_type is not one supported
                                      by the collection_manager_.
          
*/

/* HISTORY:

Written by Matthew Pierret, 03/16/84.
Modified:
08/23/84 by Matthew Pierret:  Changed to verify control interval. Added
            ERROR_RETURN procedure.
*/

/* format: style2,ind3 */

cm_get_ci_ptr:
   proc (p_file_opening_id, p_collection_id, p_control_interval_id, p_control_interval_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;	/*A file opening identifier. */
      dcl	    p_collection_id	       bit (36) aligned;	/*A collection identifier.*/
      dcl	    p_control_interval_id  fixed bin (24) uns;	/*Number of desired control interval.*/
      dcl	    p_control_interval_ptr ptr;		/*Pointer to addressable portion of CI.*/
      dcl	    p_code	       fixed bin (35);	/*Standard error code.*/

/* Automatic */

      dcl	    code		       fixed bin (35);

/* Based */
/* Builtin */

      dcl	    (null, unspec)	       builtin;

/* Constant */
/* Entry */

      dcl	    file_manager_$get_ci_ptr
			       entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));

/* External */

      dcl	    dm_error_$ci_not_allocated
			       fixed bin (35) ext;
      dcl	    dm_error_$ci_not_in_collection
			       fixed bin (35) ext;
      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;


/* END OF DECLARATIONS */
%page;
      code = 0;
      p_control_interval_ptr = null;

      call file_manager_$get_ci_ptr (p_file_opening_id, (p_control_interval_id), p_control_interval_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      if p_control_interval_ptr -> bci_header.layout_type ^= BASIC_CI_LAYOUT_1
      then if unspec (p_control_interval_ptr -> bci_header) = ""b
	 then call ERROR_RETURN (dm_error_$ci_not_allocated);
	 else call ERROR_RETURN (error_table_$unimplemented_version);
      else if p_control_interval_ptr -> bci_header.collection_id ^= p_collection_id
      then call ERROR_RETURN (dm_error_$ci_not_in_collection);
      else p_code = 0;

MAIN_RETURN:
      return;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;

%page;
%include dm_cm_basic_ci;

   end cm_get_ci_ptr;
