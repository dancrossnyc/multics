/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */



/* DESCRIPTION:

   This  routine puts an element that is already a multi-datum element.
   The new element value  may  or  may  not  be  multi-datum  itself.    The
   arguments   received   are   the   datum   id   of   a   continuation  or
   continued_continuation datum (p_datum_id_string), the  pointer  to  the  element
   (p_element_ptr),     the     length    of    the    element    in    bits
   (p_element_length_in_bits) the amount of space available in  the  control
   interval       of       which       this      is      a      continuation
   (p_available_space_in_previous_ci).    If  the  datum  is  continued,  it
   recursively  invokes cm_recursive_modify on its continuation datum.  Then it
   determines if the previous control interval has enough room to store what
   is left of the element.  If so, it frees the datum it is working  on  and
   returns.  If there is more than a maximum-sized datum left of the element
   and  the  current datum is already maximum-sized, it stores the uppermost
   (rightmost) maximum-sized portion, truncates  that  portion  off  of  the
   element,  and returns its datum id (which is unchanged).  If the datum is
   not already maximum-sized, it allocates new datums to hold the overlength
   tail.  If the element remains is less than maximum-size and  the  current
   datum  is  also  (and  the previous ci cannot hold the what's left of the
   element) it either puts what's left in the datum, or,  if  there  is  not
   enough  room  in  the  control  interval,  frees  the  current  datum and
   allocates a bigger one.  Then it returns to the caller the new datum id.
*/

/* HISTORY:

Written by Matthew Pierret, 10/27/82.
Modified:
12/01/82 by Lindsey Spratt:  Changed declaration of datum_id_string from being
            based on addr(datum_id_ptr) to datum_id_ptr.
12/02/82 by Lindsey Spratt:  Fixed to include the old_datum_length_inbytes in
            the pool_free_space only when the old datum was stored as the
            start_of_used_space, otherwise the old_datum_length_in_bytes is
            just seen in the total_free_bytes and hence is only available via
            compaction.
01/05/83 by Lindsey Spratt:  Changed to initialize remaining_element_length_in_bits,
            to return after replacing max-sized datum, and to *not* return
            after allocating an overlength tail.
01/05/83 by Matthew Pierret: Changed to make all datums but the last always
            be an integral number of bytes.  If the datum is the last
            (continuation = "0"b), the last byte may be only partially filled.
            Changed to atempt to replace less-than-max-sized datums, instead
            of always using the free pool.
01/27/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2. Changed calling
            sequence to accept p_continued_datum_id_string. This is the id of
            the datum from whence we came, The id is only used for error
            reporting. Changed to report an internal inconsistency via sub_err_
            if certain errors are returned from cm_get_bci_header$slot.
            Changed to use cm_get_bci_header$slot instead of
            cm_get_header_and_slot.
05/10/83 by Lindsey L. Spratt:  Changed to use addbitno (p_element_ptr,X)
            rather than addr( p_element_ptr -> based_bit_array.bit(X+1)
            because the PL/1 compiler doesn't handle this construct properly
            in calling sequences.  Also, the "+ 1" was being left off.
07/12/83 by Lindsey Spratt:  Fixed to set the parameter
            p_remaining_element_length_in_bits in the "put_in_place" case.  It
            was setting the local variable, remaining_element_length_in_bits,
            instead.  Fixed several sub_err_ calls to include the "myname"
            argument.
10/04/84 by Matthew Pierret:  Changed name from cm_recursive_put to
            cm_recursive_modify to conform to the new naming scheme for
            operations.  Added ERROR_RETURN and RETURN technology. Added
            more inline documentation, and restructured code slightly to
            make the flow of control clearer.  Removed unused varables.
10/05/84 by Matthew Pierret:  Change to use cm_compact$replacement instead of
            cm_compact.  cm_compact assumes that a new datum is being put
            and reserves space for it. In this routine, we are not allocating
            a new datum.
12/03/84 by Matthew Pierret:  Moved indcomtxt off main format statement as
            it was causing the HISTORY section to become non-standard.
*/

/* format: style2,ind3 */
/* format: indcomtxt */

cm_recursive_modify:
   proc (p_cm_info_ptr, p_continued_datum_id_string, p_element_ptr, p_remaining_element_length_in_bits,
        p_available_space_in_previous_ci, p_datum_id_string, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_cm_info_ptr	       ptr parameter;
      dcl	    p_continued_datum_id_string
			       bit (36) aligned parameter;
      dcl	    p_element_ptr	       ptr parameter;
      dcl	    p_remaining_element_length_in_bits
			       fixed bin (35) parameter;
      dcl	    p_available_space_in_previous_ci
			       fixed bin (35) parameter;
      dcl	    p_datum_id_string      bit (36) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    automatic_bh_buffer    (3) fixed bin (71) init (0, 0, 0);
      dcl	    automatic_ds_buffer    (1) fixed bin (35) init (0);
      dcl	    code		       fixed bin (35);
      dcl	    continuation_datum_id_string
			       bit (36) aligned init ("0"b);
      dcl	    need_maximum_size_datum
			       bit (1) aligned init ("0"b);
      dcl	    current_datum_is_maximum_size
			       bit (1) aligned init ("0"b);
      dcl	    (header_space_required, number_of_bits_in_last_byte, old_datum_length_in_bytes, pool_free_bytes,
	    remaining_element_length_in_bits, total_free_bytes)
			       fixed bin (35) init (0);

/* Based */

      dcl	    datum_id_string	       bit (36) aligned based (datum_id_ptr);

/* Builtin */

      dcl	    (addbitno, addr, ceil, divide, mod, null)
			       builtin;

/* Constant */

      dcl	    myname	       init ("cm_recursive_modify") char (32) varying int static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin (17) int static options (constant);
      dcl	    NONE_OF_ELEMENT_REMAINS
			       init (0) fixed bin (35) internal static options (constant);
      dcl	    DONT_MODIFY_REMAINING_LENGTH
			       init (-1) fixed bin (35) internal static options (constant);

/* Entry */

      dcl	    file_manager_$simple_get
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$ci_not_allocated,
	    dm_error_$programming_error,
	    dm_error_$no_element,
	    dm_error_$misformatted_ci
	    )		       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      p_code, code = 0;

      datum_id_ptr = addr (p_datum_id_string);

      cm_info_ptr = p_cm_info_ptr;
      call CHECK_VERSION (cm_info.version, CM_INFO_VERSION_2, "cm_info");

      bci_header_ptr = addr (automatic_bh_buffer);
      datum_slot_ptr = addr (automatic_ds_buffer);

      remaining_element_length_in_bits = p_remaining_element_length_in_bits;

      call cm_get_bci_header$slot (cm_info.file_oid, bci_header_ptr, datum_slot_ptr, datum_id_string, code);
      if code ^= 0
      then if code = dm_error_$no_element | code = dm_error_$ci_not_allocated | code = dm_error_$misformatted_ci
	 then call REPORT_MULTI_DATUM_INCONSISTENCY (addr (p_continued_datum_id_string)
		 -> element_id.control_interval_id, addr (p_continued_datum_id_string) -> element_id.index,
		 datum_id.control_interval_id, datum_id.index, code);
	 else call ERROR_RETURN (code);

      call VERIFY_MULTI_DATUM_CONSISTENCY (addr (p_continued_datum_id_string) -> element_id.control_interval_id,
	 addr (p_continued_datum_id_string) -> element_id.index, cm_info.collection_id, datum_id.control_interval_id,
	 datum_id.index, bci_header.collection_id, (datum_slot.offset_in_bytes = FREE_SLOT),
	 (^datum_slot.flags.is_continuation), code);


      call cm_determine_free_space$effective (bci_header_ptr, 0, (datum_slot.is_continued), (datum_slot.is_continuation),
	 total_free_bytes, pool_free_bytes);
      old_datum_length_in_bytes = ceil (divide (datum_slot.length_in_bits, BITS_PER_BYTE, 35, 18));

      if datum_slot.offset_in_bytes = bci_header.start_of_used_space
      then pool_free_bytes = pool_free_bytes + old_datum_length_in_bytes;

      total_free_bytes = total_free_bytes + old_datum_length_in_bytes;

      if datum_slot.is_continued
      then
         do;
	  call GET_CONTINUATION (cm_info.file_oid, (datum_id.control_interval_id), (datum_slot.offset_in_bytes),
	       continuation_datum_id_string);
	  call cm_recursive_modify (cm_info_ptr, datum_id_string, p_element_ptr, remaining_element_length_in_bits,
	       total_free_bytes, continuation_datum_id_string, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end;


      if remaining_element_length_in_bits > MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS
      then need_maximum_size_datum = "1"b;
      else need_maximum_size_datum = "0"b;
      if datum_slot.length_in_bits >= MINIMUM_MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS
      then current_datum_is_maximum_size = "1"b;
      else current_datum_is_maximum_size = "0"b;

      if need_maximum_size_datum & current_datum_is_maximum_size
      then
REPLACE_MAX_WITH_MAX:
         do;
	  if continuation_datum_id_string = "0"b
	  then
CONTINUATION_DATUM:
	     do;
	        number_of_bits_in_last_byte = mod (remaining_element_length_in_bits, BITS_PER_BYTE);
	        if number_of_bits_in_last_byte = 0
	        then number_of_bits_in_last_byte = BITS_PER_BYTE;
	        datum_contents_length_in_bits =
		   MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS - BITS_PER_BYTE + number_of_bits_in_last_byte;

	        call cm_put_datum_in_place (cm_info.file_oid, datum_id_string,
		   addbitno (p_element_ptr, remaining_element_length_in_bits - datum_contents_length_in_bits),
		   datum_contents_length_in_bits, datum_slot_ptr, bci_header_ptr, code);
	     end CONTINUATION_DATUM;
	  else
CONTINUED_CONTINUATION_DATUM:
	     do;
	        datum_contents_length_in_bits = MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS;
	        call cm_put_datum_in_place$continued (cm_info.file_oid, datum_id_string,
		   addbitno (p_element_ptr, remaining_element_length_in_bits - datum_contents_length_in_bits),
		   datum_contents_length_in_bits, datum_slot_ptr, bci_header_ptr, -1, continuation_datum_id_string,
		   code);
	     end CONTINUED_CONTINUATION_DATUM;
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  else call RETURN (remaining_element_length_in_bits - datum_contents_length_in_bits);
         end REPLACE_MAX_WITH_MAX;

      /*** Control cannot reach this point if this routine simply
	 replaced an existing maximum size datum with another
	 maximum size datum.  Two cases remain to consider: (1) we
	 still have more than a maximum size datum worth of the
	 element to store, but there is no existing maximum size
	 datum in which to put it; or (2) we don't need a maximum
	 size datum.  If (1) is the case, attempt to put each
	 remaining maximum size portion of the element in a new
	 maximum size datum. */

      if need_maximum_size_datum & ^current_datum_is_maximum_size
      then
INSERT_REMAINING_MAX_DATUMS:
         do;
	  call cm_put_overlength_tail (cm_info_ptr, p_element_ptr, remaining_element_length_in_bits,
	       continuation_datum_id_string, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  else /* remaining_element_length_in_bits was updated */
	       ;
         end INSERT_REMAINING_MAX_DATUMS;

      /*** By now we have cut the element down to a size that is storable in a single
	 datum.  Because this routine does not operate on the first datum of an element,
	 we kown that there exists a datum of this element previous to the current
	 datum.  If the remainder of the element can be stored in the control interval
	 in which the previous datum resides, delete the current datum.  The caller will
	 store the remainder of the element.  Otherwise, store the remainder in the
	 current datum (if it fits), in the control interval in
	 which the current datum resides (if it fits), are in
	 another control which does have space.  In the last case,
	 delete the current datum, as the new datum replaces the
	 current datum. */

      if remaining_element_length_in_bits <= p_available_space_in_previous_ci * BITS_PER_BYTE
      then
REMOVE_DATUM_FROM_ELEMENT:
         do;
	  call cm_delete_cn_datum$header (cm_info_ptr, bci_header_ptr, datum_slot_ptr, "1"b, datum_id_string, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  else
	     do;
	        p_datum_id_string = continuation_datum_id_string;
	        call RETURN (remaining_element_length_in_bits);
	     end;
         end REMOVE_DATUM_FROM_ELEMENT;
      else
REPLACE_CURRENT_DATUM:
         /*** If continuation_datum_id_string is equal to "0"b, this
	    is the last datum of the element.  Otherwise, it is an
	    intermediate datum.  */
         if continuation_datum_id_string ^= "0"b
      then header_space_required = CDCN_DATUM_HEADER_LENGTH_IN_BYTES;
      else header_space_required = 0;
      if remaining_element_length_in_bits <= BITS_PER_BYTE * (old_datum_length_in_bytes - header_space_required)
      then
PUT_DATUM_IN_PLACE:
         do;
	  if continuation_datum_id_string = "0"b
	  then call cm_put_datum_in_place (cm_info.file_oid, datum_id_string, p_element_ptr,
		  remaining_element_length_in_bits, datum_slot_ptr, bci_header_ptr, code);
	  else call cm_put_datum_in_place$continued (cm_info.file_oid, datum_id_string, p_element_ptr,
		  remaining_element_length_in_bits, datum_slot_ptr, bci_header_ptr, -1, continuation_datum_id_string,
		  code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  else call RETURN (NONE_OF_ELEMENT_REMAINS);
         end PUT_DATUM_IN_PLACE;
      else if remaining_element_length_in_bits <= BITS_PER_BYTE * (total_free_bytes - header_space_required)
      then
PUT_ELSEWHERE_IN_SAME_CI:
         do;
	  if remaining_element_length_in_bits > BITS_PER_BYTE * (pool_free_bytes - header_space_required)
	  then
	     do;
	        call cm_compact$replacement (cm_info.file_oid, (bci_header.number_of_datums), datum_id_string,
		   bci_header_ptr, code);
	        if code ^= 0
	        then call ERROR_RETURN (code);
	     end;
	  if continuation_datum_id_string = "0"b
	  then call cm_put_datum_in_pool (cm_info.file_oid, datum_id_string, p_element_ptr,
		  remaining_element_length_in_bits, datum_slot_ptr, bci_header_ptr, code);

	  else call cm_put_datum_in_pool$continued (cm_info.file_oid, datum_id_string, p_element_ptr,
		  remaining_element_length_in_bits, datum_slot_ptr, bci_header_ptr, -1, continuation_datum_id_string,
		  code);

	  if code ^= 0
	  then call ERROR_RETURN (code);
	  else call RETURN (NONE_OF_ELEMENT_REMAINS);
         end PUT_ELSEWHERE_IN_SAME_CI;
      else
PUT_IN_ANOTHER_CI:
         do;
	  call cm_delete_cn_datum$header (cm_info_ptr, bci_header_ptr, datum_slot_ptr, "1"b, datum_id_string, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);

	  call cm_put_cn_datum (cm_info_ptr, p_element_ptr, remaining_element_length_in_bits,
	       continuation_datum_id_string, datum_id_string, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  else call RETURN (NONE_OF_ELEMENT_REMAINS);
         end PUT_IN_ANOTHER_CI;

MAIN_RETURN:
      return;

RETURN:
   proc (r_p_remaining_length);

      dcl	    r_p_remaining_length   fixed bin (35);

      if r_p_remaining_length ^= DONT_MODIFY_REMAINING_LENGTH
      then p_remaining_element_length_in_bits = r_p_remaining_length;
      go to MAIN_RETURN;

   end RETURN;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call RETURN (DONT_MODIFY_REMAINING_LENGTH);

   end ERROR_RETURN;
%page;
REPORT_MULTI_DATUM_INCONSISTENCY:
   proc (p_cd_ci, p_cd_index, p_cn_ci, p_cn_index, p_code);

      dcl	    (p_cd_ci, p_cn_ci)     fixed bin (24) unsigned unaligned;
      dcl	    (p_cd_index, p_cn_index)
			       fixed bin (12) unsigned unaligned;
      dcl	    p_code	       fixed bin (35);

      call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	 "^/The element in control interval ^d, slot ^d claims to be continued at^/control interval ^d, slot ^d. ^[^s^a^s^s^;^[^s^a^s^;^s^s^a^]"
	 , p_cd_ci, p_cd_index, p_cn_ci, p_cn_index, (p_code = dm_error_$no_element),
	 (p_code = dm_error_$ci_not_allocated), "That slot is a free slot.",
	 "That control interval is not allocated for use.", "That control interval is incorrectly formatted.");

   end REPORT_MULTI_DATUM_INCONSISTENCY;
%page;
VERIFY_MULTI_DATUM_CONSISTENCY:
   proc (p_cd_ci, p_cd_index, p_cd_collection_id, p_cn_ci, p_cn_index, p_cn_collection_id, p_cn_slot_is_free,
        p_cn_slot_is_not_continuation, p_code);

      dcl	    (p_cd_ci, p_cn_ci)     fixed bin (24) unsigned unaligned;
      dcl	    (p_cd_index, p_cn_index)
			       fixed bin (12) unsigned unaligned;
      dcl	    (p_cd_collection_id, p_cn_collection_id)
			       bit (36) aligned;
      dcl	    (p_cn_slot_is_free, p_cn_slot_is_not_continuation)
			       bit (1) aligned;
      dcl	    p_code	       fixed bin (35);

      if p_cn_collection_id ^= p_cd_collection_id
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	      "^/The element in control interval ^d, slot ^d claims to be continued at^/control interval ^d, slot ^d, but the two are in different collections.^/The former is in collection ^.3b;^/the latter is in collection ^.3b."
	      , p_cd_ci, p_cd_index, p_cn_ci, p_cn_index, p_cd_collection_id, p_cn_collection_id);
      else if p_cn_slot_is_free | p_cn_slot_is_not_continuation
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	      "^/The element in control interval ^d, slot ^d claims to be continued at^/control interval ^d, slot ^d. ^[^That slot ^[is free^;is not a continuation datum^]."
	      , p_cd_ci, p_cd_index, p_cn_ci, p_cn_index, p_cn_slot_is_free);

   end VERIFY_MULTI_DATUM_CONSISTENCY;
%page;
GET_CONTINUATION:
   proc (gc_p_file_oid, gc_p_ci, gc_p_offset, gc_p_continuation_datum_id);

      dcl	    gc_p_file_oid	       bit (36) aligned;
      dcl	    gc_p_ci	       fixed bin (27);
      dcl	    gc_p_offset	       fixed bin (21);
      dcl	    gc_p_continuation_datum_id
			       bit (36) aligned;
      dcl	    gc_code	       fixed bin (35);

      gc_code = 0;
      call file_manager_$simple_get (gc_p_file_oid, gc_p_ci, gc_p_offset, addr (gc_p_continuation_datum_id),
	 (CDCN_DATUM_HEADER_LENGTH_IN_BYTES), gc_code);
      if gc_code ^= 0
      then call ERROR_RETURN (gc_code);
      else return;


   end GET_CONTINUATION;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (8) aligned;
      dcl	    p_expected_version     char (8) aligned;
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.
Received version ^a instead.", p_expected_version, p_structure_name, p_received_version);


   end CHECK_VERSION;
%page;
%include dm_cm_info;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_element_id;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_recursive_modify;
