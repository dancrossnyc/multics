/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/*  DESCRIPTION

       This module implements collection_manager_$modify (cm_modify$cm_modify),
   collection_manager_$modify_in_ci_buffer (cm_modify$buffered) and
   collection_manager_$modify_unprotected (cm_modify$unprotected), and
   implements entries internal to collection_manager_.

        This module takes the element value pointed to by p_element_ptr and puts it in
   the location described by p_element_id. An element must already be
   allocated at that location. In the simple case where both the old value is
   stored as a single datum and the new value can be stored as a single datum,
   the following attempts are made to store the new value in the old element's
   control interval: (1) exactly replace the contents if there is no change in
   length - do not change any other information; (2) store the new value in the
   same place as the old if no more bytes are required to do so; (3) store the
   new value in the free pool and remove the old; (4) compact the control
   interval if there is enough overall free space to store the new value, and
   store the new value in the newly-enlarged free pool; (5) if Ordered ESM,
   return dm_error_$long_element; else store value in another control interval
   and store in this control interval a continued_datum pointing to where the
   value is actually stored.
   
        The following entry points exist:
   $cm_modify: Called externally (via collection_manager_ transfer
   vector).  This is the main entry.

   $unprotected: Called externally. This entry requires the new value be
   identical in length to the old value. The file_manager_$raw_put entry is
   used to put the new value, thereby not obtaining an exclusive lock on the
   control interval. The new and old values must also be single datum elements.

   $buffered: Called externally. This entry operates on a control interval
   buffer (set up by collection_manager_$setup_buffered_ci) and copies data
   info the buffer directly rather than use file_manager_.

   $info, $unprotected_info, $buffered_info: Called internally by another
   collection_manager_ module which must have set up opening information on
   which this entry relies. In all other respects, identical to their
   corresponding entry.
   
        Internal subroutines which detect an error situation return to the
   external caller via the ERROR_RETURN subroutine. This subroutine sets the
   output error code (p_code), cleans up (via FINISH) and transfers to the
   RETURN label preceding the return statement in the main procedure.  For
   this reason, there are no error code checks following calls to internal
   subroutines.
*/

/* HISTORY:
Written by Matthew Pierret.
Modified:
03/26/82 by Matthew Pierret: Fixed bug that tested for beginning of element 
            incorrectly. Also added check for the collection id to which
            the control interval belongs.
04/07/82 by Matthew Pierret: Added calculation of maximum space available.
04/27/82 by Matthew Pierret: Changed calling sequence of cm_compact_and_add.
05/10/82 by Lindsey Spratt:  Changed division to calculate length_in_bytes to
	  use precision and scale of (35,18) instead of (17, 2).  The
	  length_in_bytes was one short when the length_in_bits was not a
	  multiple of the number of bits per byte. Changed the test which
	  decides whether to use put_datum_in_place or put_datum_in_pool to
	  take into account the datum_header length.
05/11/82 by Lindsey Spratt:  Changed the calculation of
	  p_maximum_space_available to adjust for the datum header length
	  when adding in the length of the element attempting to be "put",
	  but for which there was insufficient room.
06/15/82 by Matthew Pierret: Changed to deal with only complete elements.
            cm_put_element_portion has been written to handle element portions.
            Changed to bci_header, dm_cm_basic_ci.incl.pl1. 
06/21/82 by Matthew Pierret: Changed to use cm_compact.
08/04/82 by Matthew Pierret: Changed to use bit(36)aligned collection id.
09/10/82 by Matthew Pierret: Changed to call cm_compact with element_id.index
            equal to 0, meaning do not leave room for a new slot.
09/21/82 by Lindsey Spratt:  Changed to call cm_compact$replacement, which
	  frees the storage associated with the datum at p_element_id.  This
	  storage was not being freed.  This is done instead of the previous
	  technique of using a 0 index.
10/03/82 by Matthew Pierret:  Added opening info, $info entry.
            Added support for multi-datum elements.
            Changed calculation of p_maximum_space_available to include
            scatterred free space. Previously ony the free pool was being
            considered.
11/18/82 by Lindsey Spratt: Changed to set element_id_string to p_element_id,
	  and changed all of the uses of p_element_id to element_id_string.
12/01/82 by Lindsey Spratt: Changed to always get the cd_datum_header if the
	  is_continued flag is on, and set the continuation variable.
12/02/82 by Lindsey Spratt:  Fixed to add the old storage for the datum to the
            pool_free_space only if the old storage starts at the
            start_of_used_space, as recorded in the bci_header.
01/06/83 by Matthew Pierret: Added $buffered and $buffered_info entries. These
            entries accept a pointer to a control interval buffer, and access
            the control interval buffer rather than have file_manager_ access
            the control interval in the file.
01/12/83 by Lindsey Spratt:  Added declarations of put_into_ci_buffer and
	  sys_info$max_seg_size.  Fixed declaration of dm_error_$no_element,
	  also fixed dcl of p_continuation in an internal proc (was bit(1),
	  is now bit(36)).  Corrected to use BASIC_CI_LAYOUT_1.
01/27/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2. Changed to use
            cm_bet_bci_header$slot instead of cm_get_header_and_slot.
            Changed to use dm_error_$ci_not_in_collection instead of
            $ci_in_wrong_collection. Changed to use addcharno.
            Removed put_element label. Changed calling sequence to 
            cm_recursive_put, adding element_id_string. This is so that
            cm_recursive_put knows the orignin of the element.
04/27/83 by Matthew Pierret:  Added $unprotected("" _info) entries which do
            not obtain an exclusive lock to update the datum contents.  This
            is used for heavily updated and non-critical elements.  The old
            and new elements must be identical in size, so that only the
            contents themselves are changed, avoiding messing up a reader of
            the control interval header.  Also, only single datum elements are
            supported.
                 Also changed to call ERROR_RETURN whenever an error is
            detected, even if in an interal subroutine.  Callers of internal
            subroutines can assume that if the caller is returned to, no error
            has occurred.
04/28/83 by Matthew Pierret:  Fixed bug in cm_put_element introduced in last
            collection_manager_ installation.  A wrong variable was being set,
            leaving the correct one uninitialized.
05/02/83 by Matthew Pierret:  Changed to not allow buffered puts to use
            SIMPLE_REPLACE_DATUM_CONTENTS, since that routine updates the file
            directly.  The previous action caused buffered elements to become
            inconsistent, particularly the branch_ci_header in index
            collections.
05/04/83 by Matthew Pierret:  Fixed use of addcharno (was adding one char too
            many).
04/13/84 by Matthew Pierret:  Changed declaration of p_element_length to
            correctly be fixed bin (35) instead of (17).
05/21/84 by Matthew Pierret:  Renamed include file dm_cm_esm_info to 
            dm_esm_info.
06/01/84 by Matthew Pierret:  Changed to reset datum_slot.offset_in_bytes
            after calling cm_compact$replacement.  The value is used in the
            call to cm_put_datum_in_pool to determine if the existing datum is
            the first datum past the pool and can therefore be partially 
            re-used.  A compaction removes the existing datum's storage, so 
            is invalid to try to re-use it.
06/12/84 by Matthew Pierret:  Changed name of module from cm_put_element to
            cm_modify.  Switched length/ptr parameter pairs to ptr/length.
10/02/84 by Matthew Pierret:  Changed byte length calculations to use the
            function bytes<-divide(bits+BITS_PER_BYTE-1,BITS_PER_BYTE,17,0)
            instead of ceil(divide(bits,BITS_PER_BYTE,35,18)), the former being
            more efficient.  Changed SETUP_HEADER_AND_SLOT into the pair
            GET_SLOT_FROM_BUFFER and GET_HEADER_AND_SLOT_FROM_FILE.  Changed
            subroutines to follow the variable name prefixing convention.
            Changed the continuation variable to continuation_datum_id.
            Fixed to set the element_length_in_bits to the full length of the
            element (current_element_length_in_bits) isntead of the length of 
            the first datum (datum_slot.length_in_bits).  Removed the declared
            but un-used variables BYTES_PER_WORD and sys_info$max_seg_size.
            Changed to only check the ci version once and to use the 
            standard sub_err_ calling sequence.
02/27/85 by Matthew C. Pierret:  Changed to use
            cm_compact$buffered_replacement instead of cm_compact$replacement
            if entered through the buffered entry (is_buffered equals "1"b).
*/

/* format: style2,ind3 */

cm_modify:
   proc (p_file_opening_id, p_collection_id, p_element_ptr, p_element_length, p_element_id, p_maximum_space_available,
        p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_ci_buffer_ptr	       ptr parameter;
      dcl	    p_cm_info_ptr	       ptr parameter;
      dcl	    p_file_opening_id      bit (36) aligned parameter;
      dcl	    p_collection_id	       bit (36) aligned parameter;
      dcl	    p_element_length       fixed bin (35) parameter;
      dcl	    p_element_ptr	       ptr parameter;
      dcl	    p_element_id	       bit (36) aligned parameter;
      dcl	    p_maximum_space_available
			       fixed bin (35) parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    1 automatic_bci_header aligned like bci_header;
      dcl	    1 automatic_datum_slot aligned like datum_slot;
      dcl	    continuation_datum_id  bit (36) aligned init ("0"b);
      dcl	    (current_element_length_in_bits, element_length_in_bits, header_space_required, old_datum_length_in_bytes,
	    pool_free_bytes, remaining_length_in_bits, total_free_bytes, code)
			       fixed bin (35) init (0);
      dcl	    (element_length_in_bytes, remaining_length_in_bytes)
			       fixed bin (17) init (0);

      dcl	    (using_ordered_esm, is_buffered, is_unprotected)
			       bit (1) aligned init ("0"b);

/* Based */
/* Builtin */

      dcl	    (addcharno, addr, unspec, divide, null)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("cm_modify") char (32) varying internal static options (constant);
      dcl	    BITS_PER_BYTE	       fixed bin init (9) int static options (constant);
      dcl	    END_OF_ELEMENT	       fixed bin init (-1) int static options (constant);

/* Entry */

      dcl	    file_manager_$get      entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    file_manager_$put      entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    file_manager_$raw_put  entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    file_manager_$simple_get
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));
      dcl	    sub_err_	       entry options (variable);

/* External */

      dcl	    (
	    dm_error_$bad_element_length,
	    dm_error_$ci_not_in_collection,
	    dm_error_$long_element,
	    dm_error_$no_element,
	    dm_error_$unimplemented_ci_version,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */

      is_unprotected = "0"b;
      is_buffered = "0"b;
      unspec (automatic_bci_header) = ""b;
      unspec (automatic_datum_slot) = ""b;
      bci_header_ptr = addr (automatic_bci_header);
      datum_slot_ptr = addr (automatic_datum_slot);
      go to NO_INFO_JOIN;

buffered:
   entry (p_ci_buffer_ptr, p_file_opening_id, p_collection_id, p_element_ptr, p_element_length, p_element_id,
        p_maximum_space_available, p_code);

      is_buffered = "1"b;
      bci_header_ptr = p_ci_buffer_ptr;
      call CHECK_CI_VERSION ((bci_header.layout_type));
      goto NO_INFO_JOIN;

unprotected:
   entry (p_file_opening_id, p_collection_id, p_element_ptr, p_element_length, p_element_id, p_maximum_space_available,
        p_code);

      is_unprotected = "1"b;
      is_buffered = "0"b;
      unspec (automatic_bci_header) = ""b;
      unspec (automatic_datum_slot) = ""b;
      bci_header_ptr = addr (automatic_bci_header);
      datum_slot_ptr = addr (automatic_datum_slot);
      go to NO_INFO_JOIN;


NO_INFO_JOIN:
      code = 0;
      call cm_opening_info$get (p_file_opening_id, p_collection_id, cm_info_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      go to JOIN;


info:
   entry (p_cm_info_ptr, p_element_ptr, p_element_length, p_element_id, p_maximum_space_available, p_code);

      is_unprotected = "0"b;
      is_buffered = "0"b;
      unspec (automatic_bci_header) = ""b;
      unspec (automatic_datum_slot) = ""b;
      bci_header_ptr = addr (automatic_bci_header);
      datum_slot_ptr = addr (automatic_datum_slot);
      cm_info_ptr = p_cm_info_ptr;
      go to JOIN;

/* ******************** Not currently used ********************

   buffered_info:
   entry (p_cm_info_ptr, p_ci_buffer_ptr, p_element_ptr, p_element_length, p_element_id, p_maximum_space_available,
   p_code);

   is_unprotected = "0"b;
   is_buffered = "1"b;
   cm_info_ptr = p_cm_info_ptr;
   bci_header_ptr = p_ci_buffer_ptr;
   call CHECK_CI_VERSION (bci_header.layout_type);

   go to JOIN;

   ** ************************************************************ */

unprotected_info:
   entry (p_cm_info_ptr, p_element_ptr, p_element_length, p_element_id, p_maximum_space_available, p_code);

      is_unprotected = "1"b;
      is_buffered = "0"b;
      unspec (automatic_bci_header) = ""b;
      unspec (automatic_datum_slot) = ""b;
      bci_header_ptr = addr (automatic_bci_header);
      datum_slot_ptr = addr (automatic_datum_slot);
      cm_info_ptr = p_cm_info_ptr;
      goto JOIN;
%page;
JOIN:
      call CHECK_VERSION (cm_info.version, CM_INFO_VERSION_2, "cm_info");
      collection_header_ptr = cm_info.header_ptr;
      call CHECK_VERSION (collection_header.version, COLLECTION_HEADER_VERSION_2, "collection_header");

      p_code, code = 0;
      p_maximum_space_available = -1;

      element_id_string = p_element_id;

      if collection_header.element_storage_method = ORDERED_ELEMENT_STORAGE_METHOD
      then using_ordered_esm = "1"b;
      else using_ordered_esm = "0"b;

      if is_buffered
      then call GET_SLOT_FROM_BUFFER (element_id.index, bci_header_ptr, datum_slot_ptr);
      else call GET_HEADER_AND_SLOT_FROM_FILE (cm_info.file_oid, element_id_string, bci_header_ptr, datum_slot_ptr);
      if bci_header.collection_id ^= cm_info.collection_id
      then call ERROR_RETURN (dm_error_$ci_not_in_collection);

/**** Get the length of the existing element (current_element_length_in_bits). */

      if datum_slot.flags.is_continued
      then if is_buffered
	 then call GET_DATUM_HEADER_VALUES_FROM_BUFFER (bci_header_ptr, datum_slot.offset_in_bytes,
		 current_element_length_in_bits, continuation_datum_id);
	 else call GET_DATUM_HEADER_VALUES_FROM_FILE (cm_info.file_oid, (element_id.control_interval_id),
		 (datum_slot.offset_in_bytes), current_element_length_in_bits, continuation_datum_id);
      else current_element_length_in_bits = datum_slot.length_in_bits;

/**** Get the length of the new element (element_length_in_bits). */

      if p_element_length ^= END_OF_ELEMENT
      then element_length_in_bits = p_element_length;
      else element_length_in_bits = current_element_length_in_bits;

      if element_length_in_bits < 1
      then call ERROR_RETURN (dm_error_$bad_element_length);

      if ^datum_slot.flags.is_continued & element_length_in_bits = current_element_length_in_bits & ^is_buffered
      then
SIMPLE_REPLACE:
         do;

         /*** The length of the old and new elements are the same.  This means that only the
	    datum contents need to be changed, and the contents can be changed in place.
	    This special-case replacement can be done quickly. */

	  call SIMPLE_REPLACE_DATUM_CONTENTS (cm_info.file_oid, (element_id.control_interval_id), p_element_ptr,
	       element_length_in_bits, (datum_slot.offset_in_bytes), is_unprotected);

         end SIMPLE_REPLACE;
      else if is_unprotected & (element_length_in_bits ^= current_element_length_in_bits | datum_slot.flags.is_continued)
      then
GENERAL_REPLACE_UNPROTECTED:
         call ERROR_RETURN (dm_error_$bad_element_length);
      else
GENERAL_REPLACE:
         do;

         /*** More work may be necessary than simply changing the contents of
	    the datum which holds the element. */

	  remaining_length_in_bits = element_length_in_bits;
						/* Length of portion of element not yet re-written. */
         /*** Determine the amount of free space in bytes in this control
	    interval. */

	  call cm_determine_free_space$all (bci_header_ptr, 0, total_free_bytes, pool_free_bytes);

         /*** Record the length of the existing datum. This is needed to accurately determine
	    the effective free space (total_free_bytes + old_datum_length_in_bytes)
	    and to determine the change in free space caused by replacing the datum. */

	  old_datum_length_in_bytes = divide (datum_slot.length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);

	  total_free_bytes = total_free_bytes + old_datum_length_in_bytes;

         /*** If the old datum was allocated at the beginning of the used space, then its
	    old storage space is available as part of the free pool (cm_put_datum_in_pool
	    is capable of recovering this space).  Otherwise,  the only way to recover the
	    old storage for the datum is to compact the control interval. */

	  if datum_slot.offset_in_bytes = bci_header.start_of_used_space
	  then pool_free_bytes = pool_free_bytes + old_datum_length_in_bytes;

	  if datum_slot.flags.is_continued
	  then
	     do;

	     /*** The existing element is a multi-datum element. Put the new value from
		rightmost datum of the element to the leftmost. */

	        call cm_recursive_modify (cm_info_ptr, element_id_string, p_element_ptr, remaining_length_in_bits,
		   total_free_bytes, continuation_datum_id, code);
	        if code ^= 0
	        then call ERROR_RETURN (code);

	     end;

	  if remaining_length_in_bits >= MINIMUM_MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS
	  then
	     do;

	     /*** As it is not possible, by convention, for the first datum of an element
		to be maximum-sized, maximum-sized datums must be allocated to hold the
		tail of the element.  If part of the tail has already been put by
		cm_recursive_modify, that part is ignored because remaining_length_in_bits
		was decremented.   */

	        call cm_put_overlength_tail (cm_info_ptr, p_element_ptr, remaining_length_in_bits,
		   continuation_datum_id, code);
	        if code ^= 0
	        then call ERROR_RETURN (code);
	     end;

         /*** Now all of the element except for a less-than maximum-sized datum has
	    been stored.  If the remainder is too big to fit in this control interval,
	    store it in another control interval and leave an indirect in this
	    control interval. */

	  if continuation_datum_id ^= "0"b
	  then header_space_required = CD_DATUM_HEADER_LENGTH_IN_BYTES;

	  remaining_length_in_bytes = divide (remaining_length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);

	  if remaining_length_in_bytes + header_space_required <= old_datum_length_in_bytes
	  then
PUT_IN_PLACE:
	     do;

	     /*** The remainder can be placed where the old datum is. */

	        if is_buffered
	        then if continuation_datum_id = "0"b
		   then call cm_put_datum_in_place$buffered (bci_header_ptr, p_element_ptr, remaining_length_in_bits,
			   datum_slot_ptr, code);
		   else call cm_put_datum_in_place$buffered_continued (bci_header_ptr, p_element_ptr,
			   remaining_length_in_bits, datum_slot_ptr, element_length_in_bits, continuation_datum_id,
			   code);

	        else if continuation_datum_id = "0"b
	        then call cm_put_datum_in_place (cm_info.file_oid, element_id_string, p_element_ptr,
		        remaining_length_in_bits, datum_slot_ptr, bci_header_ptr, code);
	        else call cm_put_datum_in_place$continued (cm_info.file_oid, element_id_string, p_element_ptr,
		        remaining_length_in_bits, datum_slot_ptr, bci_header_ptr, element_length_in_bits,
		        continuation_datum_id, code);

	     end PUT_IN_PLACE;
	  else
PUT_IN_POOL:
	     do;

	     /*** The remainder is too large to be stored in the space which the old value
		currently occupies. Find another place in the control interval to put the
		new value. */

	        if remaining_length_in_bits > (total_free_bytes - header_space_required) * BITS_PER_BYTE
	        then
		 do;

		 /*** The remainder won't fit in this control interval.  Allocate another
		      datum in which to store the remainder. */

		    if using_ordered_esm
		    then call ERROR_RETURN (dm_error_$long_element);

		    call cm_put_cn_datum (cm_info_ptr, p_element_ptr, remaining_length_in_bits,
		         (continuation_datum_id), continuation_datum_id, code);
		    if code ^= 0
		    then call ERROR_RETURN (code);

		    remaining_length_in_bits = 0;
		    header_space_required = CD_DATUM_HEADER_LENGTH_IN_BYTES;

		 end;

	     /*** The remainder can be placed in this control interval.  Try to put it
		in the place it previously occupied.  Otherwise, compact the control
		interval and place it in the pool. */

	        if remaining_length_in_bits > (pool_free_bytes - header_space_required) * BITS_PER_BYTE
	        then
		 do;

		    if is_buffered
		    then call cm_compact$buffered_replacement (bci_header_ptr, (bci_header.number_of_datums),
			    element_id_string, code);
		    else call cm_compact$replacement (cm_info.file_oid, (bci_header.number_of_datums),
			    element_id_string, bci_header_ptr, code);
		    if code ^= 0
		    then call ERROR_RETURN (code);
		    datum_slot.offset_in_bytes = 0;	/* The compaction removed the storage taken up by the element. */
		 end;

	        if continuation_datum_id = "0"b
	        then
		 do;

		    datum_slot.flags.is_continued = "0"b;

		    if is_buffered
		    then call cm_put_datum_in_pool$buffered (bci_header_ptr, p_element_ptr, remaining_length_in_bits,
			    datum_slot_ptr, code);
		    else call cm_put_datum_in_pool (cm_info.file_oid, element_id_string, p_element_ptr,
			    remaining_length_in_bits, datum_slot_ptr, bci_header_ptr, code);

		 end;
	        else
		 do;

		    datum_slot.flags.is_continued = "1"b;

		    if is_buffered
		    then call cm_put_datum_in_pool$buffered_continued (bci_header_ptr, p_element_ptr,
			    remaining_length_in_bits, datum_slot_ptr, element_length_in_bits, continuation_datum_id,
			    code);
		    else call cm_put_datum_in_pool$continued (cm_info.file_oid, element_id_string, p_element_ptr,
			    remaining_length_in_bits, datum_slot_ptr, bci_header_ptr, element_length_in_bits,
			    continuation_datum_id, code);

		 end;

	     end PUT_IN_POOL;

	  if code ^= 0
	  then call ERROR_RETURN (code);

         end GENERAL_REPLACE;

/**** Successful return. */

      call FINISH ();
RETURN:						/* Transferred to from ERROR_RETURN. */
      return;

%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (8) aligned;
      dcl	    p_expected_version     char (8) aligned;
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.
Received version ^a instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;


CHECK_CI_VERSION:
   proc (p_given_version);

      dcl	    p_given_version	       char (4) aligned;

      if p_given_version ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^4a"" control interval; received ""^4a"".", BASIC_CI_LAYOUT_1, p_given_version);

      return;

   end CHECK_CI_VERSION;
%page;
FINISH:
   proc ();


      if p_code = 0 | p_code = dm_error_$long_element
      then p_maximum_space_available =
	      BITS_PER_BYTE * (total_free_bytes - header_space_required) - remaining_length_in_bits;

      return;

   end FINISH;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH ();
      goto RETURN;

   end ERROR_RETURN;
%page;
SIMPLE_REPLACE_DATUM_CONTENTS:
   proc (srdc_p_file_opening_id, srdc_p_control_interval_id, srdc_p_datum_contents_ptr, srdc_p_datum_contents_length,
        srdc_p_datum_contents_offset, srdc_p_is_unprotected);

      dcl	    (
	    srdc_p_file_opening_id bit (36) aligned,
	    srdc_p_control_interval_id
			       fixed bin (27),
	    srdc_p_datum_contents_length
			       fixed bin (35),
	    srdc_p_datum_contents_ptr
			       ptr,
	    srdc_p_datum_contents_offset
			       fixed bin (17),
	    srdc_p_is_unprotected  bit (1) aligned
	    )		       parameter;
      dcl	    srdc_code	       fixed bin (35) init (0);
      dcl	    1 srdc_ci_part	       aligned,
	      2 number_of_parts    fixed bin (17) init (1),
	      2 part	       (1) like ci_parts.part;

      srdc_ci_part.part (1).offset_in_bytes = srdc_p_datum_contents_offset;
      srdc_ci_part.part (1).length_in_bytes =
	 divide (srdc_p_datum_contents_length + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);
      srdc_ci_part.part (1).local_ptr = srdc_p_datum_contents_ptr;

      if srdc_p_is_unprotected
      then call file_manager_$raw_put (srdc_p_file_opening_id, srdc_p_control_interval_id, addr (srdc_ci_part), srdc_code)
	      ;
      else call file_manager_$put (srdc_p_file_opening_id, srdc_p_control_interval_id, addr (srdc_ci_part), srdc_code);

      if srdc_code ^= 0
      then call ERROR_RETURN (srdc_code);

      return;

   end SIMPLE_REPLACE_DATUM_CONTENTS;
%page;
GET_SLOT_FROM_BUFFER:
   proc (gs_p_slot_index, gs_p_bci_ptr, gs_p_slot_ptr);

      dcl	    gs_p_slot_index	       fixed bin (12) uns unal parameter;
      dcl	    gs_p_bci_ptr	       ptr parameter;
      dcl	    gs_p_slot_ptr	       ptr parameter;

      if gs_p_slot_index > gs_p_bci_ptr -> basic_control_interval.header.number_of_datums | gs_p_slot_index <= 0
      then call ERROR_RETURN (dm_error_$no_element);
      else gs_p_slot_ptr = addr (gs_p_bci_ptr -> basic_control_interval.datum_position_table (gs_p_slot_index));

   end GET_SLOT_FROM_BUFFER;


GET_HEADER_AND_SLOT_FROM_FILE:
   proc (ghs_p_file_oid, ghs_p_element_id, ghs_p_bci_header_ptr, ghs_p_slot_ptr);

      dcl	    ghs_p_file_oid	       bit (36) aligned parameter;
      dcl	    ghs_p_element_id       bit (36) aligned parameter;
      dcl	    ghs_p_bci_header_ptr   ptr parameter;
      dcl	    ghs_p_slot_ptr	       ptr parameter;

      dcl	    ghs_code	       fixed bin (35) init (0);

      call cm_get_bci_header$slot (ghs_p_file_oid, ghs_p_bci_header_ptr, ghs_p_slot_ptr, ghs_p_element_id, ghs_code);
      if ghs_code ^= 0
      then call ERROR_RETURN (ghs_code);
      else call CHECK_CI_VERSION (ghs_p_bci_header_ptr -> bci_header.layout_type);

      return;

   end GET_HEADER_AND_SLOT_FROM_FILE;
%page;
GET_DATUM_HEADER_VALUES_FROM_FILE:
   proc (gdf_p_file_oid, gdf_p_ci_number, gdf_p_datum_offset, gdf_p_full_length, gdf_p_continuation_datum_id);

      dcl	    gdf_p_file_oid	       bit (36) aligned parameter;
      dcl	    gdf_p_ci_number	       fixed bin (27) parameter;
      dcl	    gdf_p_datum_offset     fixed bin (21) parameter;
      dcl	    gdf_p_full_length      fixed bin (35) parameter;
      dcl	    gdf_p_continuation_datum_id
			       bit (36) aligned parameter;

      dcl	    gdf_code	       fixed bin (35) init (0);
      dcl	    1 gdf_continued_datum_header
			       aligned like continued_datum.header;

      call file_manager_$simple_get (gdf_p_file_oid, gdf_p_ci_number, gdf_p_datum_offset,
	 addr (gdf_continued_datum_header), (CD_DATUM_HEADER_LENGTH_IN_BYTES), gdf_code);
      if gdf_code ^= 0
      then call ERROR_RETURN (gdf_code);

      gdf_p_full_length = gdf_continued_datum_header.full_length;
      gdf_p_continuation_datum_id = unspec (gdf_continued_datum_header.continuation);

      return;

   end GET_DATUM_HEADER_VALUES_FROM_FILE;
%page;
GET_DATUM_HEADER_VALUES_FROM_BUFFER:
   proc (gdb_p_ci_ptr, gdb_p_datum_offset, gdb_p_full_length, gdb_p_continuation_datum_id);

      dcl	    gdb_p_ci_ptr	       ptr parameter;
      dcl	    gdb_p_datum_offset     fixed bin (15) uns unal parameter;
      dcl	    gdb_p_full_length      fixed bin (35) parameter;
      dcl	    gdb_p_continuation_datum_id
			       bit (36) aligned parameter;

      dcl	    gdb_datum_ptr	       ptr;

      gdb_datum_ptr = addcharno (gdb_p_ci_ptr, gdb_p_datum_offset);

      gdb_p_full_length = gdb_datum_ptr -> continued_datum.full_length;
      gdb_p_continuation_datum_id = unspec (gdb_datum_ptr -> continued_datum.continuation);

      return;

   end GET_DATUM_HEADER_VALUES_FROM_BUFFER;
%page;
%include dm_cm_info;
%page;
%include dm_cm_collection_header;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_ci_parts;
%page;
%include dm_element_id;
%page;
%include dm_esm_info;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_modify;
