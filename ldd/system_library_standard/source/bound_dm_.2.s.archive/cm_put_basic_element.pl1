/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

        This module allocates space for an element according to the rules
   of the Basic Element Storage Method, then puts the element at the allocated
   spot.

        This parameters of this module are:

   p_cm_info_ptr - which points to the opening info for the collection and
                   is set be the caller, cm_put;
   p_basic_control_interval_ptr - which points to a copy of the header of
                   control interval into which the element will be put,
                   if possible, or to an empty buffer the size of bci_header.
                   On output, points to a copy of the header of the control
                   interval in which the element was successfully put;
   p_element_length - the length of the element in bits;
   p_element_ptr - points to the element to be put;
   p_element_id - on input, the p_element_id->element_id.control_interval_id
                   is the first control interval to be tried in attempting
                   to put the element; on output is the element_id of the
                   newly-put element;
   p_maximum_space_available - on output, is the amount of free space
                   available in the control interval in which the element
                   was put, after the element was put;
   p_code - is a status code.
                   
   Currently this module does not support Threaded BESM.
*/

/* HISTORY:
Written by Matthew C Pierret.
Modified:
04/09/82 by Lindsey Spratt: Changed to use the dm_element_id include file.
	  Now uses the "local" element_id_string/element_id consistently.
04/13/82 by Matthew Pierret: Fixed to set p_element_id before returning.
04/14/82 by Matthew Pierret: Changed to attempt to allocate element in the
            last used control interval of the collection if not enough room
            in the given control interval, and to assume the last used control
            interval if a control interval id of 0 is requested, i.e.
            element_id.control_interval_id is 0.
                 Also changed declaration of control_interval_id from aligned
            to unaligned, so that calls to cm$allocate_control_interval would
            be made by reference.
                 Also changed to use cm_get_datum_slots instead of the now
            obsolete cm_get_slot_table;
                 Changed to reset bci_header.free_slot_is_present,
            necessitating searching for a free slot even after the first has
            been found.
                 Removed use of automatic control_interval_id variable, using
            element_id.control_interval_id directly instead.
04/15/82 by Matthew Pierret: Fixed bug which "forgot" to set collmgr_header_ptr
            and initialize p_code to 0.
04/16/82 by Matthew Pierret: Added following logic: If a new control interval
            must be allocated, call cm_allocate_element$header recursively, so
            all of the necessary checks are made. This was the source of a bug
            which allocated a new control interval but did not get a new 
            basic_control_interval header (bci_header).
04/17/82 by Matthew Pierret: Converted the code which deals with actually
            allocating an element into a separate module called
            cm_allocate_basic_in_ci. Retained only code which is used in
            deciding what control interval to attempt to allocate an element in.
05/19/82 by Matthew Pierret: Changed use of collmgr_header.collection() to
            collection_header, and removed collmgr_header_ptr from calling
            sequence of cm_allocate_basic_in_ci.
08/03/82 by Matthew Pierret: Changed calling sequence to take last_control_interval.
            Removed version check of collection_header since it is never
            actually used in this module.
11/03/82 by Matthew Pierret: Multi-datum support. Opening info. Max space
            available.
02/02/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2.
            Added version check for bci_header. Fixed bug in compaction.
            This bug occurred when the start_of_used_space was adjacent to the
            last slot. bci_header.number_of_datums was being incremented
            before the call to cm_compact, causing the leftmost datum to be
            overwritten by the new last slot. cm_determine_free_space expects
            bci_header.number_of_datums to be incremented, so it is incremented
            before calling cm_determine_free_space and decremented before
            calling cm_compact. cm_find_free_slot was changed to not update
            bci_header.number_of_datums, instead returning the new argument
            number_of_slots_after_allocation.
08/04/83 by Matthew Pierret: Changed to use a new cm_determine_free_space
            entry, $does_new_datum_fit.  This entry returns flags indicating
            whether the datum will fit in the ci and the pool.  It also 
            takes into consideration the fact that the datum is new and may
            need a new datum slot.  Previously, cm_allocate_basic_element
            had to juggle bci_header.number_of_datums around to get correct
            results. Now, that field value is set only once near the end of 
            this module.
            Changed cm_find_free_slot to return a flag indicating the value
            bci_header.free_slot_is_present after allocation.
01/04/85 by Matthew Pierret: In response to audit failure: moved position of
            format and main procedure statements to standard location; fixed
            DESCRIPTION to refer to cm_put instead of cm_allocate_element;
            moved declaration of error_table_$unimplemented_version to main 
            procedure; declared all builtins; fixed unnecessary calls-by-value
            of CHECK_VERSION; removed the extra "the" in a sub_err_ call;
            renamed module to cm_put_basic_element from 
            cm_allocate_basic_element in accordance with the new
            collection_manager_ entries naming scheme.
            Also changed to follow completely the ERROR_RETURN and 
            subroutine variable prefixing mechanisms.
*/

/* format: style2,ind3,ll79,^indnoniterdo,^indprocbody */

cm_put_basic_element:
   proc (p_cm_info_ptr, p_basic_control_interval_header_ptr, p_element_length,
        p_element_ptr, p_element_id, p_maximum_space_available, p_code);


/* START OF DECLARATIONS */
/* Parameter */

   dcl	 p_cm_info_ptr	    ptr parameter;
   dcl	 p_basic_control_interval_header_ptr
			    ptr parameter;
   dcl	 p_element_length	    fixed bin (35) parameter;
   dcl	 p_element_ptr	    ptr parameter;
   dcl	 p_element_id	    bit (36) aligned parameter;
   dcl	 p_maximum_space_available
			    fixed bin (35) parameter;
   dcl	 p_code		    fixed bin (35) parameter;

/* Automatic */

   dcl	 1 my_datum_slot	    aligned like datum_slot;
   dcl	 code		    fixed bin (35);
   dcl	 continuation	    bit (36) aligned init ("0"b);
   dcl	 control_interval_id    fixed bin (24) uns init (0);
   dcl	 (element_length_in_bits, element_length_in_bytes, total_free_bytes)
			    fixed bin (35) init (0);
   dcl	 (number_of_slots_before_allocation,
	 number_of_slots_after_allocation, slot_index_to_use)
			    fixed bin (17) init (0);
   dcl	 (is_continued, fits_in_ci, fits_in_pool,
	 has_free_slot_after_allocation)
			    bit (1) aligned init ("0"b);

/* Based */
/* Builtin */

   dcl	 (ceil, divide, addr, null, unspec)
			    builtin;

/* Controlled */
/* Constant */

   dcl	 myname		    init ("cm_put_basic_element")
			    char (32) varying int static
			    options (constant);
   dcl	 BITS_PER_BYTE	    init (9) fixed bin internal static
			    options (constant);
   dcl	 IS_NOT_A_CONTINUATION  init ("0"b) bit (1) aligned internal
			    static options (constant);

/* Entry */

   dcl	 sub_err_		    entry options (variable);

/* External */

   dcl	 dm_error_$programming_error
			    ext fixed bin (35);
   dcl	 error_table_$unimplemented_version
			    ext fixed bin (35);

/* END OF DECLARATIONS */

   p_code, code = 0;

   cm_info_ptr = p_cm_info_ptr;
   call CHECK_VERSION (cm_info.version, CM_INFO_VERSION_2, "cm_info");
   bci_header_ptr = p_basic_control_interval_header_ptr;
   datum_slot_ptr = addr (my_datum_slot);
   element_id_string = p_element_id;
   element_length_in_bits = p_element_length;

/**** Allocate the tail of the element if it is larger than a single datum. */

   if element_length_in_bits
        > MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS - BITS_PER_BYTE
   then
      do;
      call cm_put_overlength_tail (cm_info_ptr, p_element_ptr,
	 element_length_in_bits, continuation, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      is_continued = "1"b;
   end;

   element_length_in_bytes =
        ceil (divide (element_length_in_bits, BITS_PER_BYTE, 35, 18));

/**** Find a control interval in which to allocate the datum/element. */

   call cm_find_ci_to_alloc_datum (cm_info_ptr, element_length_in_bytes,
        (element_id.control_interval_id), is_continued, "0"b, bci_header_ptr,
        control_interval_id, code);
   if code ^= 0
   then call ERROR_RETURN (code);
   else call CHECK_BCI_VERSION (bci_header.layout_type);

/**** Find a slot in the slot table available for use. */

   call cm_find_free_slot (cm_info.file_oid, control_interval_id,
        bci_header_ptr, slot_index_to_use, number_of_slots_after_allocation,
        has_free_slot_after_allocation, code);
   if code ^= 0
   then call ERROR_RETURN (code);

   element_id.control_interval_id = control_interval_id;
   element_id.index = slot_index_to_use;

/**** Verify that the datum actually fits. */

   call cm_determine_free_space$does_new_datum_fit (bci_header_ptr,
        element_length_in_bytes, (slot_index_to_use), is_continued,
        IS_NOT_A_CONTINUATION, fits_in_ci, fits_in_pool, total_free_bytes);

   if ^fits_in_ci
   then call sub_err_ (dm_error_$programming_error, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Control interval ^d was selected in which to allocate a datum, but^/^10xthere is not enough free space in which to fit the datum.^/^10xThe datum is ^d bytes long;there are ^d free."
	   , control_interval_id, element_length_in_bytes, total_free_bytes);

   unspec (datum_slot) = ""b;
   datum_slot.flags.is_continued = is_continued;

   if fits_in_pool
   then bci_header.number_of_datums = number_of_slots_after_allocation;
   else
      do;
      call cm_compact (cm_info.file_oid, number_of_slots_after_allocation,
	 element_id_string, bci_header_ptr, code);	/* cm_compact updates bci_header.number_of_datums */
      if code ^= 0
      then call ERROR_RETURN (code);
   end;

   bci_header.flags.free_slot_is_present = has_free_slot_after_allocation;

/**** Put the datum in the free pool. */

   if is_continued
   then call cm_put_datum_in_pool$continued (cm_info.file_oid,
	   element_id_string, p_element_ptr, element_length_in_bits,
	   datum_slot_ptr, bci_header_ptr, p_element_length, continuation,
	   code);
   else call cm_put_datum_in_pool (cm_info.file_oid, element_id_string,
	   p_element_ptr, element_length_in_bits, datum_slot_ptr,
	   bci_header_ptr, code);
   if code ^= 0
   then call ERROR_RETURN (code);


   p_element_id = element_id_string;

   call FINISH ();
MAIN_RETURN:
   return;
%page;
CHECK_VERSION:
   proc (cv_p_given_version, cv_p_correct_version, cv_p_structure_name);

   dcl	 cv_p_structure_name    char (*);
   dcl	 cv_p_given_version	    char (8) aligned;
   dcl	 cv_p_correct_version   char (8) aligned;

   if cv_p_given_version ^= cv_p_correct_version
   then call sub_err_ (error_table_$unimplemented_version, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected version ""^8a"" of ^a structure; received ""^8a"".",
	   cv_p_correct_version, cv_p_structure_name, cv_p_given_version);
   else return;

   end CHECK_VERSION;

CHECK_BCI_VERSION:
   proc (cbv_p_given_version);
   dcl	 cbv_p_given_version    char (4) aligned;

   if cbv_p_given_version ^= BASIC_CI_LAYOUT_1
   then call sub_err_ (error_table_$unimplemented_version, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected version ""^4a"" of bci_header structure; received ""^4a""."
	   , BASIC_CI_LAYOUT_1, cbv_p_given_version);
   else return;

   end CHECK_BCI_VERSION;
%page;
ERROR_RETURN:
   proc (er_p_code);

   dcl	 er_p_code	    fixed bin (35);

   p_code = er_p_code;
   call FINISH ();
   goto MAIN_RETURN;

   end ERROR_RETURN;

FINISH:
   proc ();

   if p_code = 0
   then p_maximum_space_available = total_free_bytes * BITS_PER_BYTE;

   end FINISH;
%page;
%include dm_element_id;
%page;
%include dm_cm_info;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_datum_constants;
%page;
%include sub_err_flags;
%page;
%include dm_cm_entry_dcls;

   end cm_put_basic_element;
