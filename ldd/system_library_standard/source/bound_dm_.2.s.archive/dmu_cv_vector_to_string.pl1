/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
          Converts data in the form of a typed vector into a varying bit 
     string, formatted according to the supplied field_table.  The bit string 
     is placed in the caller supplied string_buffer if it will fit.  If it
     doesn't fit, then the bit string is allocated in the caller-supplied
     work_area.  If it doesn't fit there (or no work_area was supplied), then
     and error is returned.
*/

/* HISTORY:
Written by Lindsey Spratt, 04/02/82.
Modified:
04/14/82 by Lindsey Spratt: Changed to set the length word of the "p_string"
	  returned to the caller.  A new variable, p_string_length, is
	  defined which is based on the first word of the storage pointed at
	  by p_string_ptr.  Also, varying size length value for varying
	  strings are now handled.  The old technology was to assume that
	  all length values for varying character strings were one word (36
	  bits).  Now, the "length_in_bits" of the field_table is used to
	  get the size of the length value.
05/17/82 by Lindsey Spratt: Changed to use
	  field_table.varying_field_map.varying_field_index to determine if
	  a field is a varying string.  Was (incorrectly) using the
	  descriptor_is_varying bit.
12/22/82 by Lindsey Spratt:  Extended to support allocating new buffers at
	  need.  Added the p_return_string_buffer_length parameter.
01/03/83 by Lindsey Spratt:  Corrected setting of the buffer_string.length
	  value.  Was being set to buffer_string_length regardless of actual
	  string length, in some cases.
01/06/83 by Lindsey Spratt:  Fixed varying case to not use the p_string_ptr ->
	  based_varying_bit_string construct, but rather
	  buffer_string.contents.
03/23/83 by Lindsey Spratt:  Fixed to use version 2 field_table structure,
	  and changed to check the version of the field_table structure and
	  the type of the simple_typed_vector.
05/03/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3.
11/08/84 by Lindsey L. Spratt:  Changed to use ERROR_RETURN technique.  Minor
            format changes.  Corrected arguments for an error message.
            Changed CHECK_VERSION_CHAR to have char(8) aligned parameters for
            the versions.
*/

/* format: style2,ind3 */
dmu_cv_vector_to_string:
cv_vector_to_string:
   proc (p_field_table_ptr, p_typed_vector_ptr, p_string_buffer_ptr, p_string_buffer_length, p_work_area_ptr,
        p_string_ptr, p_return_string_buffer_length, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_field_table_ptr      ptr;
      dcl	    p_typed_vector_ptr     ptr;
      dcl	    p_string_buffer_ptr    ptr;
      dcl	    p_string_buffer_length fixed bin (35);
      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_string_ptr	       ptr;
      dcl	    p_return_string_buffer_length
			       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    (buffer_string_ptr, new_buffer_string_ptr, old_buffer_string_ptr)
			       ptr init (null);
      dcl	    (buffer_string_length, new_buffer_string_length, old_buffer_string_length)
			       fixed bin (35) init (0);
      dcl	    work_area_ptr	       ptr init (null);

      dcl	    current_length_in_bits fixed bin (35);
      dcl	    data_type	       fixed bin (17);
      dcl	    field_idx	       fixed bin (17);
      dcl	    current_varying_field_bit_offset
			       fixed bin (35);
      dcl	    local_real_fix_bin_1a  fixed bin (35) aligned;

/* Based */

      dcl	    based_real_fix_bin_1u  fixed bin (35) unaligned based;
      dcl	    based_bit_string       bit (sys_info$max_seg_size * 36) based;
      dcl	    p_string_length	       fixed bin (35) based (p_string_ptr) unaligned;
      dcl	    1 buffer_string	       based (buffer_string_ptr) unaligned,
	      2 length	       fixed bin (35),
	      2 contents	       bit (buffer_string_length refer (buffer_string.length));
      dcl	    work_area	       area based (work_area_ptr);

/* Builtin */

      dcl	    (null, addr, length, copy)
			       builtin;

/* Condition */

      dcl	    (cleanup, area)	       condition;

/* Constant */

      dcl	    (
	    BITS_PER_WORD	       init (36),
	    BITS_PER_BYTE	       init (9)
	    )		       fixed bin (17) int static options (constant);
      dcl	    myname	       init ("dmu_cv_vector_to_string") char (32) varying internal static
			       options (constant);

/* Entry */

      dcl	    decode_descriptor_     entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;
      dcl	    (
	    dm_error_$short_buffer,
	    error_table_$bad_arg,
	    error_table_$unimplemented_version,
	    dm_error_$bad_vector_type
	    )		       fixed bin (35) ext;


/* END OF DECLARATIONS */

      p_code = 0;
      p_string_ptr = null;
      p_return_string_buffer_length = p_string_buffer_length;
      field_table_ptr = p_field_table_ptr;
      call CHECK_VERSION_CHAR (field_table.version, FIELD_TABLE_VERSION_3, "field_table");

      simple_typed_vector_ptr = p_typed_vector_ptr;
      if simple_typed_vector.type ^= SIMPLE_TYPED_VECTOR_TYPE
      then call sub_err_ (dm_error_$bad_vector_type, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected a simple_typed_vector type structure (type ^d).
Received a structure with type ^d instead.", SIMPLE_TYPED_VECTOR_TYPE, simple_typed_vector.type);

      work_area_ptr = p_work_area_ptr;

      if p_string_buffer_length <= 0
      then call sub_err_ (error_table_$bad_arg, myname, "h", null, 0,
	      "^/The length of the string_buffer must be greater than 0.  The length
provided was ^d.", p_string_buffer_length);

      on cleanup call FINISH;

      on area call ERROR_RETURN (dm_error_$short_buffer);

      buffer_string_ptr = p_string_buffer_ptr;
      current_varying_field_bit_offset = field_table.location_of_first_varying_field;
      buffer_string_length = p_string_buffer_length - BITS_PER_WORD;
      buffer_string.length = field_table.location_of_first_varying_field - 1;

/* If the fixed length of the string is going to be larger than the entire
buffer, then either return the short buffer error or allocate a new,
sufficiently large buffer.
*/

      if buffer_string.length > buffer_string_length
      then if work_area_ptr = null
	 then call ERROR_RETURN (dm_error_$short_buffer);
	 else
	    do;
	       old_buffer_string_ptr = buffer_string_ptr;
	       old_buffer_string_length = buffer_string_length;
	       buffer_string_length = max (2 * buffer_string_length, buffer_string.length);
	       alloc buffer_string in (work_area);
	       buffer_string.length = old_buffer_string_ptr -> buffer_string.length;
	    end;

FIELD_LOOP:
      do field_idx = 1 to field_table.number_of_fields;
         if field_table.varying_field_map (field_idx).varying_field_index > 0
         then
VARYING_FIELD:
	  do;
	     substr (buffer_string.contents, field_table.field (field_idx).location,
		field_table.field (field_idx).length_in_bits) =
		substr (simple_typed_vector.dimension (field_idx).value_ptr -> based_bit_string,
		BITS_PER_WORD - field_table.field (field_idx).length_in_bits + 1,
		field_table.field (field_idx).length_in_bits);

	     if field_table.field (field_idx).length_is_in_characters
	     then current_length_in_bits =
		     simple_typed_vector.dimension (field_idx).value_ptr -> based_real_fix_bin_1u * BITS_PER_BYTE;
	     else current_length_in_bits = simple_typed_vector.dimension (field_idx).value_ptr -> based_real_fix_bin_1u;

	     buffer_string.length = buffer_string.length + current_length_in_bits;

	     if buffer_string.length > buffer_string_length
	     then if work_area_ptr = null
		then call ERROR_RETURN (dm_error_$short_buffer);
		else
		   do;
		      new_buffer_string_length = max (2 * buffer_string_length, buffer_string.length);
		      buffer_string.length = buffer_string.length - current_length_in_bits;
		      old_buffer_string_length = buffer_string_length;
		      old_buffer_string_ptr = buffer_string_ptr;
		      buffer_string_length = new_buffer_string_length;
		      alloc buffer_string in (work_area);
		      buffer_string = old_buffer_string_ptr -> buffer_string;
		      buffer_string.length = buffer_string.length + current_length_in_bits;
		      old_buffer_string_ptr -> buffer_string.length = old_buffer_string_length;
		      if old_buffer_string_ptr ^= p_string_buffer_ptr
		      then free old_buffer_string_ptr -> buffer_string in (work_area);
		   end;

	     substr (buffer_string.contents, current_varying_field_bit_offset, current_length_in_bits) =
		substr (simple_typed_vector.dimension (field_idx).value_ptr -> based_bit_string, 37,
		current_length_in_bits);
	     current_varying_field_bit_offset = current_varying_field_bit_offset + current_length_in_bits;
	  end VARYING_FIELD;
         else
	  do;
	     substr (buffer_string.contents, field_table.field (field_idx).location,
		field_table.field (field_idx).length_in_bits) =
		substr (simple_typed_vector.dimension (field_idx).value_ptr -> based_bit_string, 1,
		field_table.field (field_idx).length_in_bits);
	  end;
      end FIELD_LOOP;
      p_string_ptr = buffer_string_ptr;
      buffer_string_ptr = null;
      p_return_string_buffer_length = buffer_string_length + BITS_PER_WORD;

      call FINISH;

MAIN_RETURN:
      return;
%page;
FINISH:
   proc;
      if buffer_string_ptr ^= p_string_buffer_ptr & buffer_string_ptr ^= null
      then
         do;
	  buffer_string.length = buffer_string_length;
	  free buffer_string in (work_area);
         end;
   end FINISH;

ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parameter;
      call FINISH ();
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
CHECK_VERSION_CHAR:
   proc (p_expected_version, p_received_version, p_structure_name);
      dcl	    (p_expected_version, p_received_version)
			       char (8) aligned parameter;
      dcl	    p_structure_name       char (*) parameter;
      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION_CHAR;
%page;
%include sub_err_flags;
%page;
%include std_descriptor_types;
%page;
%include vu_typed_vector;
%page;
%include dm_field_table;
   end dmu_cv_vector_to_string;
