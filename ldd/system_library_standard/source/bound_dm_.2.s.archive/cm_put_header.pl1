/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

          The entry cm_put_header$cm_put_header implements
     collection_manager_$put_header.
          The entry cm_put_header$unprotected implements
     collection_manager_$put_unprotected_header.

          This routine puts a caller-supplied header associated with a 
     collection.  If the header is not already present (indicated by
     collection_header.header_record_id equal to "0"b), the given header is
     allocated.  If the header is already present, it is replaced by the 
     given header.  If entered via the $unprotected entry, the replacement
     is done without obtaining an exclusive lock on the control interval in 
     which the header is stored, but the new header must be the same length
     as the old one.
*/

/* Written by Matthew Pierret.
Modified:
06/08/82 by Matthew Pierret: Changed call to cm_allocate_element$header to
            be to cm_allocate_element. The collection_header that was being 
            passed was for the collection whose header was being put; 
            cm_allocate_element$header assumes that it is the header of the 
            collection that the header is being put into, i.e. the header collection.
06/15/82 by Matthew Pierret: Changed calling sequence of cm_put_element.
08/04/82 by Matthew Pierret: Changed to use bit(36)aligned collection id.
11/05/82 by Matthew Pierret: Changed to get opening info for specified 
            collection and header collection, and to pass a pointer to the
            header collection info (hc_cm_info_ptr) to 
            cm_(allocate put)_element$info;
01/27/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2. Changed to report
            certain errors from cm_put_element which indicate internal
            inconsistencies via sub_err_.
06/12/84 by Matthew Pierret: Re-named cm_put_element to cm_modify,
            cm_allocate_element to cm_put.
10/03/84 by Matthew Pierret: Changed to use ERROR_RETURN procedure to return
            in the case of an error.  Added addr and 
            error_table_$unimplemented_version in the main procedure.
            Changed to use local code variable instead of p_code parameter.
*/

/* format: style2,ind3 */
%page;
/* format: style2,ind3 */

cm_put_header:
   proc (p_file_opening_id, p_collection_id, p_header_ptr, p_header_length, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_collection_id	       bit (36) aligned;
      dcl	    p_header_ptr	       ptr;
      dcl	    p_header_length	       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    hc_cm_info_ptr	       ptr init (null);
      dcl	    is_unprotected	       bit (1) aligned init ("0"b);

/* Based */
/* Builtin */

      dcl	    (addr, null)	       builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       char (32) varying init ("cm_put_header") int static options (constant);
      dcl	    UNINITIALIZED_ELEMENT_ID
			       bit (36) aligned init ("0"b) int static options (constant);
      dcl	    END_OF_ELEMENT	       fixed bin (35) init (-1);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$ci_not_allocated,
	    dm_error_$ci_not_in_collection,
	    dm_error_$misformatted_ci,
	    dm_error_$no_element,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      goto JOIN;

unprotected:
   entry (p_file_opening_id, p_collection_id, p_header_ptr, p_header_length, p_code);

      is_unprotected = "1"b;

JOIN:
      p_code, code = 0;

      call cm_opening_info$get (p_file_opening_id, p_collection_id, cm_info_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call CHECK_VERSION ("cm_info", cm_info.version, CM_INFO_VERSION_2);

      collection_header_ptr = cm_info.header_ptr;

      call CHECK_VERSION ("collection_header", collection_header.version, COLLECTION_HEADER_VERSION_2);

      call cm_opening_info$get (cm_info.file_oid, HEADER_COLLECTION_ID, hc_cm_info_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      if collection_header.header_record_element_id = UNINITIALIZED_ELEMENT_ID
      then
         do;
	  element_id_string = p_collection_id;

	  call cm_put$info (hc_cm_info_ptr, p_header_ptr, p_header_length, element_id_string, (0), code);
	  if code ^= 0
	  then call ERROR_RETURN (code);

	  collection_header.header_record_element_id = element_id_string;
	  call cm_modify$info (hc_cm_info_ptr, collection_header_ptr, END_OF_ELEMENT, p_collection_id, (0), code);
	  if code ^= 0
	  then if code = dm_error_$no_element | code = dm_error_$ci_not_allocated
		  | code = dm_error_$ci_not_in_collection | code = dm_error_$misformatted_ci
	       then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
		       "^/An internal inconsistency was encountered attempting to restore the^/collection header of collection ^3bo at control interval ^d, slot ^d."
		       , cm_info.collection_id,
		       addr (collection_header.header_record_element_id) -> element_id.control_interval_id,
		       addr (collection_header.header_record_element_id) -> element_id.index);

         end;
      else
         do;
	  element_id_string = collection_header.header_record_element_id;

	  if is_unprotected
	  then call cm_modify$unprotected_info (hc_cm_info_ptr, p_header_ptr, p_header_length, element_id_string, (0),
		  code);
	  else call cm_modify$info (hc_cm_info_ptr, p_header_ptr, p_header_length, element_id_string, (0), code);

	  if code ^= 0
	  then if code = dm_error_$no_element | code = dm_error_$ci_not_allocated
		  | code = dm_error_$ci_not_in_collection | code = dm_error_$misformatted_ci
	       then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
		       "^/An internal inconsistency was encountered attempting to restore the user^/header of collection ^3bo at control interval ^d, slot ^d."
		       , cm_info.collection_id,
		       addr (collection_header.header_record_element_id) -> element_id.control_interval_id,
		       addr (collection_header.header_record_element_id) -> element_id.index);
         end;

MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (p_structure_name, p_given_version, p_correct_version);

      dcl	    p_structure_name       char (*);
      dcl	    p_given_version	       char (8) aligned;
      dcl	    p_correct_version      char (8) aligned;

      if p_given_version ^= p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of ^a structure; received ^8a.", p_correct_version, p_structure_name,
	      p_given_version);

      return;

   end CHECK_VERSION;
%page;
%include dm_cm_info;
      ;
%page;
%include dm_cm_collection_header;
%page;
%include dm_element_id;
%page;
%include dm_hdr_collection_id;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_put_header;
