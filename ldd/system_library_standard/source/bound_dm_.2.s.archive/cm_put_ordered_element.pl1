/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

        This module allocates space for an element according to the rules of
   the Ordered Element Storage Method, then puts the element at the allocated
   spot.  There are two modes of operation, with an entry for each, those
   being the normal approach and the buffered approach.  In the buffered
   approach, a pointer to a copy of the control interval into which the
   element must be put is passed to the $buffered entry.
   
        An element can be put either as a single datum in the specified
   control interval or as a continued datum in the specified control interval
   with subsequent maximum-sized continuation datums in other control
   intervals.  Each maximum-sized continuation datum effectively fills up
   an entire control interval on its own.  The contents of an element is
   stored byte-aligned, so if the element length in bits does not correspond
   to an integral number of bytes, the last byte is padded with enough extra
   bits to make the total length correspond to an integral number of bytes.
   In the multi-datum element case, this means that the last maximum-sized
   datum may be slightly less than the maximum (up to 8 bits) size in bits.
   The maximum size of a datum is MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS
   (declared in dm_cm_datum_constants.incl.pl1).

        The Ordered Element Storage Method requires that the first datum
   (either the whole element or the first datum of a multi-datum element) be
   put in the specified control interval.  If there is not enough room in that
   control interval for the first datum, the code dm_error_$long_element is
   return along with total amount of free space in bits in the control
   interval, not including the space required for the datum slot and the datum
   header.  The caller can use this information in determining how much space
   must be freed in the control interval before the datum will fit.
   
        The Ordered Element Storage Method also requires that the element uses
   the specified datum slot.  If that slot is already in use, it and all
   following slots are shifted one slot to the right.  If the specified slot
   is more than one slot past the last slot, the intervening slots are
   initialized as free slots, but are counted in the number_of_datums for the
   control interval.
   
        The parameters are:
   
   p_cm_info_ptr - points to collection opening info set up by the caller.
   p_bci_header_ptr - only in the normal entry, points to a copy of
             bci_header local to the caller.  On output it will be filled with
             the contents of the bci_header of the control interval in which
             the element is pout.
   p_ci_buffer_ptr - only in the buffered entry, points to the control
             interval buffer set up by the caller.  This routine modifies the
             contents of this control interval buffer, not the file copy of
             the control interval, so the caller must be prepared to write the
             entire buffer into the file.  If the element is stored as a
             multi-datum element, only the first datum is in  this control
             interval buffer; the rest are stored in other control intervals
             by modifying the file copy of each control interval.
   p_element_length - is the length of the element is bits.
   p_element_ptr - points to the element to be put.
   p_element_id - is the identifier the element is to have.  It contains a
             control interval id and a slot index.  This is how the caller
             specifies the control interval in which the element is to be put
             and the slot which it should use.
   p_free_space - is the total amount of free space in bits in the control
             interval, not including the datum slot and datum header, but
             including the datum contents if successfully put.
   p_code - is a status code. It is dm_error_$long_element if there is not
             enough room in the control interval for the first datum of the
             element.
*/

/* HISTORY:
Written by Matthew C Pierret.
Modified:
04/09/82 by Lindsey Spratt: Changed to use the dm_element_id include file.
	  Now uses the "local" element_id_string/element_id consistently.
04/13/82 by Matthew Pierret: Fixed to set p_element_id before returning.
04/14/82 by Matthew Pierret: Changed to accept slot index greater than the
            the current number of datums + 1. Use cm_get_datum_slots instead
            of cm_get_slot_table and cm_put_datum_slots instead of 
            cm_shift_slots.
04/15/82 by Matthew Pierret: Fixed some plus/minus 1 bugs and made to take
            uninitialized slot space into consideration when calculating
            free space.
04/19/82 by Matthew Pierret: Added code to get the basic_control_interval header.
04/27/82 by Matthew Pierret: Changed calling segquence of cm_compact_and_add.
05/10/82 by Lindsey Spratt:  Changed division to find element_length_in_bytes
	  to use a precision and scale of (35,18) rather than (17,2).  The
	  length in bytes was coming out one short when the length in bits
	  was not an integral multiple of the number of bits per byte.
06/03/82 by Lindsey Spratt:  Changed to only shift the slots if using the free
	  pool, since cm_compact_and_add does the shift when using
	  compaction.
06/21/82 by Matthew Pierret: Changed to use cm_compact.
08/03/82 by Matthew Pierret: Changed to use cm_get_bci_header.
10/27/82 by Lindsey Spratt:  Changed to set the
	  automatic_datum_slot.offset_in_bytes to FREE_SLOT before calling
	  cm_put_datum_in_pool.
11/09/82 by Matthew Pierret: Changed to calculate p_free_space which is the
            total number of free bits left in the control interval after
            successfully allocating the element, or the number of extra bits
            needed if the element would not fit.
            Changed to use cm_determine_free_space and to support multi-datum
            elements.
11/22/82 by Matthew Pierret:  Changed to properly initialize datum slot.
01/07/83 by Matthew Pierret:  Added $buffered entry.  Qualified all references
            to bci_header with the pointer ci_buffer_or_ci_header_ptr. This is
            because the normal entry takes a pointer to a bci_header structure
            (p_bci_header_ptr), while $buffered entry takes a pointer to the
            base of a buffered control interval (p_ci_buffer_ptr).
            ci_buffer_or_ci_header_ptr is given the value of one of these 
            parameters to make it clear that bci_header can be referencing an
            automatic header or an actual buffered ci.
01/11/83 by Lindsey Spratt (for Matthew Pierret):  Fixed to set the
	  datum_contents_length_in_bits based on whether the element is
	  continued or not.  Also fixed to set dm_error_$long_element if the
	  total_free_bytes*BITS_PER_BYTE is less than the
	  datum_contents_length_in_bits, rather than "less than or equal to".
01/18/83 by Matthew Pierret: Fixed references to basic_control_interval that
            were not qualified with a locator.
            Added call to cm_compact$buffered_replacement, 
            cm_put_datum_in_pool$buffered("" _continued).
            Fixed bug in determination of whether slots should be shifted in
            the buffered case. If element_id.index = number_of_datums, the
            last datum should be shifted, but was not.
01/31/83 by Lindsey Spratt:  Fixed to not increment the
	  bci_header.number_of_datums when there is not enough room in the
	  CI for the new element.  Also fixed to use cm_compact$buffered
	  rather than $buffered_replacement, so that the task of moving
	  slots to the right is done by cm_compact rather than before
	  calling cm_compact (when necessary).  The old behavior caused
	  datum contents to be overwritten by the last datum_slot when the
	  start_of_used_space was immediately after the datum_position_table
	  (before the addition of the new slot).
	       Changed to set new_last_slot_idx, rather than
	  basic_control_interval.number_of_datums, as this made the
	  basic_control_interval inconsistent.  bci.nod is now only set to
	  new_last_slot_idx when appropriate.
02/03/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2.
08/04/83 by Matthew Pierret: Changed to use 
            cm_determine_free_space$does_new_datum_fit.  This entry takes into
            account the fact that the datum also needs space for a new datum 
            slot and possibly datum header space, returning flags indicating
            whether the datum can fit in the ci and in the pool.  Also returned
            is amount of space left in the ci.  Added an ERROR_RETURN
            routine and the forced all error returns to go through it.
            Added verification to see if the calculated datum contents length
            differs from the actual number of bits left after allocating an
            overlength tail.
            Changed to always return -1 for p_free_space if the allocation
            fails for any reason other than a lack of space 
            (dm_error_$long_element).
09/25/84 by Matthew Pierret:  Changed to correctly calculate the length of
            the first datum rather than rely on cm_put_overlength_tail to do
            so.  Added BITS_TO_BYTES conversion function which uses a slightly
            optimized conversion algorithm. Changed to use datum_slot_ptr 
            instead of addr (automatic_datum_slot).  Changed automatic_*
            to my_=.  Changed to use a my_ci_parts structure instead of
            using a fixed bin (71) array buffer.
01/04/85 by Matthew C. Pierret:  Added must_be_zero elment to my_ci_parts.
*/


/* format: style2,ind3 */
/* format: ^indblkcom,indcomtxt */
/* ADD AFTER AUDIT IS DONE: ll79,^indnoniterdo,^indprocbody */

cm_put_ordered_element:
   proc (p_cm_info_ptr, p_bci_header_ptr, p_element_length, p_element_ptr, p_element_id, p_free_space, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_cm_info_ptr	       ptr;
      dcl	    p_ci_buffer_ptr	       ptr;
      dcl	    p_bci_header_ptr       ptr;
      dcl	    p_element_length       fixed bin (35);
      dcl	    p_element_ptr	       ptr;
      dcl	    p_element_id	       bit (36) aligned;
      dcl	    p_free_space	       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    1 my_ci_parts	       aligned,
	      2 number_of_parts    fixed bin init (1),
	      2 must_be_zero       fixed bin init (0),
	      2 part	       (1) like ci_parts.part;
      dcl	    1 my_datum_slot	       aligned like datum_slot;
      dcl	    1 datum_slot_table     (1024) aligned like datum_slot;

      dcl	    code		       fixed bin (35);
      dcl	    continuation	       bit (36) aligned init ("0"b);

      dcl	    (datum_contents_length_in_bytes, number_of_slots, previous_last_slot_idx, new_last_slot_idx, slot_idx,
	    uninitialized_slot_space)
			       fixed bin (17) init (0);
      dcl	    (datum_contents_length_in_bits, unallocated_element_length_in_bits, total_free_bytes)
			       fixed bin (35) init (0);

      dcl	    (is_buffered, is_continued, must_shift_slots_to_the_right, must_initialize_slots_to_the_left, fits_in_ci,
	    fits_in_pool)	       bit (1) aligned init ("0"b);

      dcl	    ci_buffer_or_ci_header_ptr
			       ptr;

/* Based */
/* Builtin */

      dcl	    (abs, ceil, divide, addr, max, mod, null, size, string, unspec)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("cm_put_ordered_element") char (32) varying internal static options (constant);
      dcl	    BYTES_PER_WORD	       init (4) fixed bin int static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin int static options (constant);
      dcl	    IS_NOT_A_CONTINUATION  init ("0"b) bit (1) aligned internal static options (constant);

/* Entry */

      dcl	    file_manager_$get      entry (bit (36) aligned, fixed bin (24) uns, ptr, fixed bin (35));
      dcl	    file_manager_$put      entry (bit (36) aligned, fixed bin (24) uns, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$long_element,
	    dm_error_$programming_error,
	    error_table_$unimplemented_version
	    )		       ext fixed bin (35);

/* END OF DECLARATIONS */



      ci_buffer_or_ci_header_ptr = p_bci_header_ptr;
      goto JOIN;


buffered:
   entry (p_cm_info_ptr, p_ci_buffer_ptr, p_element_length, p_element_ptr, p_element_id, p_free_space, p_code);

      is_buffered = "1"b;
      ci_buffer_or_ci_header_ptr = p_ci_buffer_ptr;
      goto JOIN;



JOIN:
      p_code, code = 0;
      p_free_space = -1;
      bci_header_ptr, basic_control_interval_ptr = null;

      cm_info_ptr = p_cm_info_ptr;
      call CHECK_VERSION ("cm_info", cm_info.version, CM_INFO_VERSION_2);

      element_id_string = p_element_id;

      if ^is_buffered
      then
         do;
	  call cm_get_bci_header (cm_info.file_oid, (element_id.control_interval_id), ci_buffer_or_ci_header_ptr, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end;

      if p_element_length > MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS
      then
         do;
	  is_continued = "1"b;
	  datum_contents_length_in_bytes =
	       BITS_TO_BYTES (mod (p_element_length, MAXIMUM_DATUM_CONTENTS_LENGTH_IN_BITS));
	  datum_contents_length_in_bits = datum_contents_length_in_bytes * BITS_PER_BYTE;
         end;
      else
         do;
	  is_continued = "0"b;
	  datum_contents_length_in_bits = p_element_length;
	  datum_contents_length_in_bytes = BITS_TO_BYTES (datum_contents_length_in_bits);
         end;

/**** Determine whether a) the requested slot is in the middle of the slot
      array or b) the requested slot is beyond the end of the slot array. */

      if is_buffered
      then
         do;
	  if element_id.index <= ci_buffer_or_ci_header_ptr -> basic_control_interval.header.number_of_datums
	  then if unspec (ci_buffer_or_ci_header_ptr -> basic_control_interval.datum_position_table (element_id.index))
		  = ""b
	       then must_shift_slots_to_the_right = "0"b;
	       else must_shift_slots_to_the_right = "1"b;
	  else if element_id.index > ci_buffer_or_ci_header_ptr -> basic_control_interval.header.number_of_datums + 1
	  then must_initialize_slots_to_the_left = "1"b;
	  else must_initialize_slots_to_the_left = "0"b;
         end;

      else
         do;
	  ci_parts_ptr = addr (my_ci_parts);
	  ci_parts.part (1).local_ptr = addr (datum_slot_table);

	  number_of_slots = ci_buffer_or_ci_header_ptr -> bci_header.number_of_datums - element_id.index + 1;

	  if number_of_slots > 0
	  then
	     do;

	     /*** There exist slots to the right of the requested slot.  Get those slots.
		If the requested slot is not free, shift the slots one slot to the right
		to make room for the new one.  Otherwise simply use the free slot without
		bothering the slots to the right. */

	        ci_parts.part (1).offset_in_bytes =
		   BYTES_PER_WORD * (size (ci_buffer_or_ci_header_ptr -> bci_header) + element_id.index - 1);
	        ci_parts.part (1).length_in_bytes = BYTES_PER_WORD * number_of_slots;

	        call file_manager_$get (cm_info.file_oid, (element_id.control_interval_id), ci_parts_ptr, code);
	        if code ^= 0
	        then call ERROR_RETURN (code);

	        if unspec (datum_slot_table (1)) = ""b
	        then must_shift_slots_to_the_right = "0"b;
	        else must_shift_slots_to_the_right = "1"b;
	     end;
	  else
	     do;
	        number_of_slots = element_id.index - ci_buffer_or_ci_header_ptr -> bci_header.number_of_datums - 1;
	        if number_of_slots > 0
	        then
		 do;

		 /*** The requested slot is beyond the end of the slot array.  This means that
		      all slots between the current end of the array and the new slot must be
		      initialized as free slots. */

		    must_initialize_slots_to_the_left = "1"b;
		    uninitialized_slot_space = number_of_slots * size (datum_slot) * BYTES_PER_WORD;

		    ci_parts.part (1).offset_in_bytes =
		         BYTES_PER_WORD
		         * (size (ci_buffer_or_ci_header_ptr -> bci_header) + element_id.index - number_of_slots);
		    ci_parts.part (1).length_in_bytes = BYTES_PER_WORD * number_of_slots;

		    call file_manager_$get (cm_info.file_oid, (element_id.control_interval_id), ci_parts_ptr, code);
		    if code ^= 0
		    then call ERROR_RETURN (code);
		 end;
	     end;
         end;

      previous_last_slot_idx = ci_buffer_or_ci_header_ptr -> bci_header.number_of_datums;

      if must_shift_slots_to_the_right
      then new_last_slot_idx = max (element_id.index, ci_buffer_or_ci_header_ptr -> bci_header.number_of_datums + 1);
      else new_last_slot_idx = max (element_id.index, ci_buffer_or_ci_header_ptr -> bci_header.number_of_datums);

/**** See if first datum will fit in control interval. */

      call cm_determine_free_space$does_new_datum_fit (ci_buffer_or_ci_header_ptr, (datum_contents_length_in_bytes),
	 (element_id.index), is_continued, IS_NOT_A_CONTINUATION, fits_in_ci, fits_in_pool, total_free_bytes);

      if ^fits_in_ci
      then call ERROR_RETURN (dm_error_$long_element);

      if is_continued
      then
         do;

         /*** This is an overlength element requiring more than one datum to store.
	    Store maximum-sized chunks of the element in newly allocated control
	    intervals from right to left, until only a single datum is left. */

	  unallocated_element_length_in_bits = p_element_length;
	  call cm_put_overlength_tail (cm_info_ptr, p_element_ptr, unallocated_element_length_in_bits, continuation,
	       code);
	  if code ^= 0
	  then call ERROR_RETURN (code);

	  if unallocated_element_length_in_bits ^= datum_contents_length_in_bits
	  then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
		  "^/^a^/^d ^a ^d ^a^/^a", "The calculated length of the first datum of an multi-datum element is",
		  datum_contents_length_in_bits, "bits; after all but the first datum were put",
		  unallocated_element_length_in_bits, "bits remain.", "The two should be equal.");

	  datum_contents_length_in_bits = unallocated_element_length_in_bits;
	  datum_contents_length_in_bytes = BITS_TO_BYTES (datum_contents_length_in_bits);
         end;

      if ^fits_in_pool
      then
DATUM_FITS_IN_CI_BUT_NOT_IN_POOL:
         do;
	  if is_buffered
	  then call cm_compact$buffered (ci_buffer_or_ci_header_ptr, new_last_slot_idx, element_id_string, code);
	  else call cm_compact (cm_info.file_oid, new_last_slot_idx, element_id_string, ci_buffer_or_ci_header_ptr,
		  code);
	  if code ^= 0
	  then call ERROR_RETURN (code);

	  ci_buffer_or_ci_header_ptr -> basic_control_interval.number_of_datums = new_last_slot_idx;
         end DATUM_FITS_IN_CI_BUT_NOT_IN_POOL;
      else
DATUM_FITS_IN_POOL:
         do;					/* datum_contents_length_in_bytes <= pool_free_bytes */
	  ci_buffer_or_ci_header_ptr -> basic_control_interval.number_of_datums = new_last_slot_idx;

	  if (must_shift_slots_to_the_right | must_initialize_slots_to_the_left)
	  then
	     do;
	        if is_buffered
	        then
		 do;
		    if must_shift_slots_to_the_right
		    then
		       do slot_idx = ci_buffer_or_ci_header_ptr -> basic_control_interval.header.number_of_datums
			  to element_id.index + 1 by -1;
			ci_buffer_or_ci_header_ptr -> basic_control_interval.datum_position_table (slot_idx) =
			     ci_buffer_or_ci_header_ptr
			     -> basic_control_interval.datum_position_table (slot_idx - 1);
		       end;
		    else if must_initialize_slots_to_the_left
		    then
		       do slot_idx = ci_buffer_or_ci_header_ptr -> basic_control_interval.header.number_of_datums - 1
			  to previous_last_slot_idx by -1;
			unspec (ci_buffer_or_ci_header_ptr
			     -> basic_control_interval.datum_position_table (slot_idx)) = "0"b;
		       end;
		 end;
	        else /* not buffered, datum_contents_length_in_bytes <= pool_free_bytes, and mssttr or misttl */
		 do;
		    if must_shift_slots_to_the_right
		    then ci_parts.part (1).offset_in_bytes = ci_parts.part (1).offset_in_bytes + BYTES_PER_WORD;

		    call file_manager_$put (cm_info.file_oid, (element_id.control_interval_id), ci_parts_ptr, code);

		    if code ^= 0
		    then call ERROR_RETURN (code);
		 end;
	     end;
         end DATUM_FITS_IN_POOL;

/* Initialize datum_slot */

      if is_buffered
      then datum_slot_ptr =
	      addr (ci_buffer_or_ci_header_ptr -> basic_control_interval.datum_position_table (element_id.index));
      else datum_slot_ptr = addr (my_datum_slot);

      unspec (datum_slot) = ""b;

/* Put new datum in the control interval's free pool */

      if is_buffered
      then if is_continued
	 then call cm_put_datum_in_pool$buffered_continued (ci_buffer_or_ci_header_ptr, p_element_ptr,
		 datum_contents_length_in_bits, datum_slot_ptr, p_element_length, continuation, code);
	 else call cm_put_datum_in_pool$buffered (ci_buffer_or_ci_header_ptr, p_element_ptr,
		 datum_contents_length_in_bits, datum_slot_ptr, code);

      else if is_continued
      then call cm_put_datum_in_pool$continued (cm_info.file_oid, element_id_string, p_element_ptr,
	      datum_contents_length_in_bits, datum_slot_ptr, ci_buffer_or_ci_header_ptr, p_element_length, continuation,
	      code);
      else call cm_put_datum_in_pool (cm_info.file_oid, element_id_string, p_element_ptr, datum_contents_length_in_bits,
	      datum_slot_ptr, ci_buffer_or_ci_header_ptr, code);


      p_element_id = element_id_string;
      call FINISH ();
MAIN_RETURN:
      return;



ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH ();
      goto MAIN_RETURN;

   end ERROR_RETURN;


FINISH:
   proc ();

      if p_code = 0 | p_code = dm_error_$long_element
      then p_free_space = total_free_bytes * BITS_PER_BYTE;

      return;

   end FINISH;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_given_version, cv_p_correct_version);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", cv_p_correct_version,
	      cv_p_structure_name, cv_p_given_version);
      else return;

   end CHECK_VERSION;
%page;

BITS_TO_BYTES:
   proc (btb_p_bits) returns (fixed bin (17));

/* This function takes a length in bits and returns the number of bytes
   necessary to hold that many bits. The expression which figures this out
   is an optimization of the expression:
   ceil (divide (btb_p_bits, BITS_PER_BYTE, 35, 18)
*/

      dcl	    btb_p_bits	       fixed bin (35);

      return (divide (btb_p_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0));

   end BITS_TO_BYTES;
%page;
%include dm_cm_info;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_element_id;
%page;
%include dm_ci_parts;
%page;
%include sub_err_flags;
%page;
%include dm_cm_entry_dcls;

   end cm_put_ordered_element;
