/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         Given  a  control  interval,  find  an available slot for allocation
     according to the basic element storage method. There are four return 
     arguments, defined as follows:

       p_free_slot_idx - is the index of a slot that can be used for
     a new datum.  This is either a free slot in the datum_position_table
     or one slot past the current end of the table.     
       p_number_of_slots - the number of slots that will remain in 
     the datum_position_table after allocation of the datum.  The possible
     values are (bci_header.number_of_datums) if a free slot is found in the
     existing slot table or (bci_header.number_of_datums + 1) if there are no
     free slots in the existing table.  bci_header.number_of_datums is *not*
     updated to reflect the new slot.
       p_extra_free_slot_remains - is on if there are free slots in the
     datum_position_table other than the one at p_free_slot_idx.
     bci_header.flags.free_slot_is_present is not updated.
       p_code - a standard error code returned from file_manager_$get.
*/

/* HISTORY:

Written by Matthew Pierret, 10/28/82.
Modified:
02/03/83 by Matthew Pierret: Added p_number_of_slots parameter in which is
            returned the new number of slots rather than updaing 
            bci_header.number_of_datums directly.
08/09/83 by Matthew Pierret: Added p_extra_free_slot_remains parameter in
            which is the new value of bci_header.flags.free_slot_is_present
            after allocation of the new datum.  bci_header is not updated
            for any reason by this module.
09/27/84 by Matthew Pierret:  Changed to use ERROR_RETURN and local code
            variable instead of p_code parameter.  Changed CHECK_VERSION
            to CHECK_CI_VERSION.  Changed to use file_manager_$simple_get,
            thus removing the ci_parts structure.
*/

/* format: style2,ind3 */

cm_find_free_slot:
   proc (p_file_oid, p_control_interval_id, p_bci_header_ptr, p_free_slot_idx, p_number_of_slots,
        p_extra_free_slot_remains, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_oid	       bit (36) aligned parameter;
      dcl	    p_control_interval_id  fixed bin (24) uns parameter;
      dcl	    p_bci_header_ptr       ptr parameter;
      dcl	    p_free_slot_idx	       fixed bin (17) parameter;
      dcl	    p_number_of_slots      fixed bin (17) parameter;
      dcl	    p_extra_free_slot_remains
			       bit (1) aligned;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    1 datum_slot_table     (1024) like datum_slot aligned;
      dcl	    extra_free_slot_found  bit (1) aligned;
      dcl	    free_slot_found	       bit (1) aligned;
      dcl	    slot_idx	       fixed bin (17);

/* Based */
/* Builtin */

      dcl	    (addr, max, null, size)
			       builtin;

/* Constant */

      dcl	    myname	       init ("cm_find_free_slot") char (32) varying int static options (constant);
      dcl	    BYTES_PER_WORD	       init (4) fixed bin (17) int static options (constant);

/* Entry */

      dcl	    file_manager_$simple_get
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$unimplemented_ci_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      p_code, code = 0;
      p_number_of_slots = 0;
      extra_free_slot_found = "0"b;
      free_slot_found = "0"b;
      bci_header_ptr = p_bci_header_ptr;
      call CHECK_CI_VERSION (bci_header.layout_type);

      if ^bci_header.flags.free_slot_is_present
      then
NO_FREE_SLOT:
         p_free_slot_idx = bci_header.number_of_datums + 1;
      else
SEARCH_FOR_FREE_SLOT:
         do;
	  call file_manager_$simple_get (p_file_oid, (p_control_interval_id), size (bci_header) * BYTES_PER_WORD,
	       addr (datum_slot_table), bci_header.number_of_datums * BYTES_PER_WORD, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);

	  /*** Search the slot table for two free slots, the first to return to the
caller, the second to determine if any free slots exist other than the one
being returned to the caller. */

	  do slot_idx = 1 to bci_header.number_of_datums while (^extra_free_slot_found);

	     if datum_slot_table (slot_idx).offset_in_bytes = FREE_SLOT
	     then if free_slot_found
		then extra_free_slot_found = "1"b;
		else
		   do;
		      free_slot_found = "1"b;
		      p_free_slot_idx = slot_idx;
		   end;

	  end;

	  if ^free_slot_found
	  then p_free_slot_idx = bci_header.number_of_datums + 1;

         end SEARCH_FOR_FREE_SLOT;


      p_extra_free_slot_remains = extra_free_slot_found;
      p_number_of_slots = max (bci_header.number_of_datums, p_free_slot_idx);
MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_CI_VERSION:
   proc (ccv_p_given_version);

      dcl	    ccv_p_given_version    char (4) aligned;

      if ccv_p_given_version ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a control interval; received ^a.", BASIC_CI_LAYOUT_1, ccv_p_given_version);
      else return;

   end CHECK_CI_VERSION;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include sub_err_flags;

   end cm_find_free_slot;
