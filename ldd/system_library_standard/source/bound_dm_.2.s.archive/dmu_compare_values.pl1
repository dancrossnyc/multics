/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
dmu_compare_values:
   proc (p_descriptor_ptr, p_vector_value_ptr, p_field_value_ptr, p_field_value_length, p_vector_equal_to_key,
      p_vector_less_than_key, p_code);

/* DESCRIPTION:
          This module compares two values and returns information about
     whether the first is less than, equal to, or greater than, the second.
     Both values must be of the same data-type, however the storage
     conventions for varying string data for the second value are slightly
     different from the Multics standard format.  This difference consists
     solely in that the length of the varying string is not stored as the
     initial piece of information in the string.  The length of varying
     string values in fields is passed in as a parameter.  
          The first value is referred to as the "vector" value, since it
     usually is the value of a dimension of a typed_vector.  The second value
     is referred to  as the "field" value, since it is usually the value of a
     field of a key.
     
          All work is actually done in the internal subroutine
     COMPARE_VALUES.  This routine is part of the include file
     dm_comp_values_proc.incl.pl1.  It is in an include file so that
     other modules may access it without the expense of an external call
     and argument list preparation.
     
          No parameters are passed to from this module to the internal 
     subroutine.  All data flow is done using global variables. The names of
     the global variables are prefixed with "cv_p_".
*/

/* HISTORY:
Written by Lindsey Spratt, 03/30/82.
Modified:
04/24/82 by Lindsey Spratt: Added the field_to_field entry and the
	  vector_value_is_in_field_format protocol.  Also, changed to use
	  unaligned (as opposed to aligned) based overlays for numeric
	  "field" format data.
06/03/82 by Lindsey Spratt: Changed the handling of unaligned numeric data
	  types to use the full word (or double word), they were using one
	  too few bits.  Also, introduced the consistent use of named
	  constants instead of literals.
01/10/83 by Lindsey Spratt: Fixed to include the sign character in the length
	  of decimal data.
01/14/83 by Lindsey Spratt: Added data types 43 (real fixed decimal leading
	  sign 4-bit byte aligned) and 44 (real float decimal 4-bit byte
	  aligned).  Also added unimplemented data type check.
01/17/83 by Lindsey Spratt: Fixed float decimal to include exponent in size.
01/18/83 by Lindsey Spratt: Fixed float binary to correctly copy packed data
	  into the local float binary variable.
03/02/83 by Lindsey Spratt: Added a check to ensure that the provided
	  descriptor type is between 1 and HIGHEST_SUPPORTED_DATA_TYPE.
03/15/83 by Lindsey Spratt: Added the 4 complex binary data types, 5 through 8.
03/17/83 by Lindsey Spratt:  Added the 4 complex decimal data types, 11, 12,
	  45 and 46.
03/28/83 by Lindsey Spratt:  Changed all references to im_* to dmu_*.
06/08/83 by Matthew Pierret: Changed references to dmu_compare_dec* modules
            to correctly be dmu_compare_decimal_values$dmu_compare_dec*.
04/19/84 by Matthew Pierret: Extracted code into the include file
            dm_comp_values_proc.incl.pl1, which is written as two internal
            subroutines: COMPARE_FIELD_VALUES (replaces $field_to_field)
            and COMPARE_VALUES (replaces $dmu_compare_values).
*/
/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_descriptor_ptr       ptr;
      dcl	    p_vector_value_ptr     ptr;
      dcl	    p_field_value_ptr      ptr;
      dcl	    p_field_value_length   fixed bin (35);
      dcl	    p_vector_equal_to_key  bit (1) aligned;
      dcl	    p_vector_less_than_key bit (1) aligned;
      dcl	    p_code	       fixed bin (35);

      dcl	    p_vector_value_length  fixed bin (35);

/* Automatic */

      dcl	    cv_p_descriptor_ptr    ptr;
      dcl	    cv_p_vector_value_ptr  ptr;
      dcl	    cv_p_vector_value_length
			       fixed bin (35);
      dcl	    cv_p_field_value_ptr   ptr;
      dcl	    cv_p_field_value_length
			       fixed bin (35);
      dcl	    cv_p_vector_equal_to_key
			       bit (1) aligned;
      dcl	    cv_p_vector_less_than_key
			       bit (1) aligned;
      dcl	    cv_p_code	       fixed bin (35);

      dcl	    vector_value_is_in_field_format
			       bit (1) aligned;

/* Based */
/* Builtin */
/* Constant */

      dcl	    myname	       init ("dmu_compare_values") char (32) varying internal static options (constant);

/* Entry */
/* External */

/* END OF DECLARATIONS */

      vector_value_is_in_field_format = "0"b;
      cv_p_vector_value_length = -1;

      goto CVS_JOIN;


field_to_field:
   entry (p_descriptor_ptr, p_vector_value_ptr, p_vector_value_length, p_field_value_ptr, p_field_value_length,
      p_vector_equal_to_key, p_vector_less_than_key, p_code);

      vector_value_is_in_field_format = "1"b;
      cv_p_vector_value_length = p_vector_value_length;

CVS_JOIN:						/* Copy parameters into variables COMPARE_VALUES expects. */
      cv_p_descriptor_ptr = p_descriptor_ptr;
      cv_p_vector_value_ptr = p_vector_value_ptr;
      cv_p_field_value_ptr = p_field_value_ptr;
      cv_p_field_value_length = p_field_value_length;

      call COMPARE_VALUES (vector_value_is_in_field_format);

/* Copy output values into parameters to return to caller. */

      p_vector_equal_to_key = cv_p_vector_equal_to_key;
      p_vector_less_than_key = cv_p_vector_less_than_key;
      p_code = cv_p_code;

      return;
%page;
%include dm_comp_values_proc;

   end dmu_compare_values;
