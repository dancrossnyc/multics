/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* DESCRIPTION:

         This subroutine determines if a leaf key or record string satisfies  a
     sequential specification.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 07/07/82.
Modified:
08/17/82 by Matthew Pierret:  Changed from im_compare_sequential to
            dmu_compare_sequential, as this routine is now used by both
            index_manager_ and record_manager_.
09/27/82 by Matthew Pierret:  Corrected flaw in logic in subroutine "compare"
            which decides whether a key satisfies a specification.
10/07/82 by Lindsey Spratt:  Changed to use search_specification version 2,
	  and to take the and_group_id_list_ptr,
	  number_of_fully_structural_fields and partial_structural_field_id
	  parameters.  Constraints with field ids <=
	  number_of_fully_structural_fields are ignored.  If a constraint
	  has a field id = partial_structural_field_id, then it
	  is only used if its operator_code uses a regular expression or if
	  it is a "^=" comparison.  Any other comparisons on this field will
	  have been satisfied already.
03/22/83 by Lindsey Spratt:  Changed to use version 2 field_table.  Internal
	  procedure names were uppercased.  Did some restructuring of the
	  code in preparation for the version 4 search_specification which
	  suports "intra-tuple" comparisons.  Fixed an error in calculating
	  the location of varying field data.
05/02/83 by Lindsey L. Spratt:  Fixed SETUP_PTR_AND_LENGTH to allow for
            whether the field length is in characters or bits when locating a
            varying field.
05/03/83 by Lindsey L. Spratt:  Fixed to use the addbitno builtin when
            calculating the addr of a field value in a string.
05/23/83 by Matthew Pierret:  Changed to use version 4 specifications,
            which have intra-key/record comparisons. Removed the comments
            around the code which Lindsey wrote in expectation of this event,
            as described in the preceding journalization entries.
02/28/84 by Matthew Pierret: Changed to use the simple_search_specification
            structure and the simplified COMPARE_CONSTRAINT if such a 
            structure is supplied. Changed to check for varying-ness of data
            type by examining the field_descriptor instead of thefield_table's
            varying_field_map, since we already had the field_descriptor.
            Added ERROR_RETURN.  Changed to use the this_constraint structure
            instead of accessing the search specification.
03/01/84 by Matthew Pierret: Corrected a flaw in the logic which determines
            if the result of a comparison between two values is satisfactory.
            This was introduced in the last modification and failed to catch 
            the case where greater-equal was wanted and greater was the result.
03/08/84 by Matthew Pierret: Changed SETUP_PTR_AND_LENGTH to use a based
            overlay to pick up the length fields of varying fields instead
            of the less performant assignment using substr and copy.
05/02/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3.
06/08/84 by Lee Baldwin:  Fixed to call dm_error_$unimplemented_data_type
            instead of $bad_descriptor_type which didn't exist.
10/13/84 by Lindsey L. Spratt:  In response to audit comments; changed to only
            have arg_descriptor included in the outermost proc, the two
            internal procs which use it either reference it explicitly or via
            a like dcl.  Moved the proc stmt to standard location.  Deleted
            unused dcls.
01/12/85 by Lee A. Newcomb:  Fixed to use error_table_$unsupported_operation
            instead of the non-existant error_table_$unimplemented_operation.
*/

/* format: style2,ind3 */
dmu_compare_sequential:
   proc (p_field_table_ptr, p_search_specification_ptr, p_and_group_id_list_ptr, p_number_of_fully_structural_fields,
        p_partial_structural_field_id, p_key_string, p_key_satisfies_specification, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_field_table_ptr      ptr parameter;
      dcl	    p_search_specification_ptr
			       ptr parameter;
      dcl	    p_and_group_id_list_ptr
			       ptr parameter;
      dcl	    p_number_of_fully_structural_fields
			       fixed bin;
      dcl	    p_partial_structural_field_id
			       fixed bin;
      dcl	    p_key_string	       bit (*) parameter;
      dcl	    p_key_satisfies_specification
			       bit (1) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    key_satisfies_specification
			       bit (1) aligned;

      dcl	    (and_group_list_idx, and_group_idx, constraint_idx)
			       fixed bin;
      dcl	    constraint_operator_code
			       fixed bin (18) uns unal;
      dcl	    (constraint_field_id, constraint_value_field_id)
			       fixed bin;

      dcl	    field_value_offset     fixed bin (35);
      dcl	    (field_value_length, second_value_length)
			       fixed bin (35);
      dcl	    (field_value_ptr, second_value_ptr)
			       ptr;
      dcl	    field_descriptor_ptr   ptr;
      dcl	    input_key_string_ptr   ptr init (null);
      dcl	    this_constraint_ptr    ptr init (null);

/* Based */

      dcl	    field_descriptor       bit (36) based (field_descriptor_ptr);
      dcl	    1 this_constraint      unaligned like search_specification.and_group.constraint based (this_constraint_ptr);
      dcl	    1 simple_search_specification
			       based (search_specification_ptr),
	      2 head	       like specification_head,
	      2 maximum_number_of_constraints
			       fixed bin (17) unal,
	      2 number_of_and_groups
			       fixed bin (17) unal,
	      2 range	       unal,
	        3 type	       fixed bin (17),
	        3 size	       fixed bin (17),
	      2 and_group,
	        3 number_of_constraints
			       fixed bin (17) unal,
	        3 constraint       like search_specification.and_group.constraint;

/* Builtin */

      dcl	    (addbitno, addr, bin, null, substr, unspec)
			       builtin;

/* Constant */

      dcl	    myname	       init ("dmu_compare_sequential") char (32) varying internal static options (constant);

      dcl	    BITS_PER_BYTE	       init (9) fixed bin internal static options (constant);
      dcl	    DEFAULT_VALUE_LENGTH   init (-1) fixed bin (35) internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);
      dcl	    dmu_compare_values     entry (ptr, ptr, ptr, fixed bin (35), bit (1) aligned, bit (1) aligned,
			       fixed bin (35));
      dcl	    dmu_compare_values$field_to_field
			       entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35), bit (1) aligned,
			       bit (1) aligned, fixed bin (35));
      dcl	    search_file_	       entry (ptr, fixed bin (21), fixed bin (21), ptr, fixed bin (21), fixed bin (21),
			       fixed bin (21), fixed bin (21), fixed bin (35));

/* External */

      dcl	    error_table_$unsupported_operation
			       fixed bin (35) ext;
      dcl	    dm_error_$unimplemented_data_type
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      search_specification_ptr = p_search_specification_ptr;

      field_table_ptr = p_field_table_ptr;

/**** ********** Removed for efficiency ********************

      call CHECK_VERSION (search_specification.version, SPECIFICATION_VERSION_4, "search_specification");
      call CHECK_VERSION_CHAR (field_table.version, FIELD_TABLE_VERSION_3, "field_table");
      if id_list_ptr ^= null
      then call CHECK_VERSION (id_list.version, (ID_LIST_VERSION_1), "id_list");

 **** ******************************************************/

      input_key_string_ptr = addr (p_key_string);

      key_satisfies_specification = "0"b;

      if simple_search_specification.number_of_and_groups = 1
	 & simple_search_specification.and_group.number_of_constraints = 1
      then call COMPARE_CONSTRAINT;
      else
COMPARE_AND_GROUPS:
         do;

	  id_list_ptr = p_and_group_id_list_ptr;

	  if id_list_ptr ^= null
	  then
AND_GROUP_LIST_LOOP:
	     do and_group_list_idx = 1 to id_list.number_of_ids while (^key_satisfies_specification);

	        and_group_idx = id_list.id (and_group_list_idx);

	        key_satisfies_specification = "1"b;
	        call COMPARE_AND_GROUP;
	     end AND_GROUP_LIST_LOOP;
	  else
AND_GROUP_LOOP:
	     do and_group_idx = 1 to search_specification.number_of_and_groups while (^key_satisfies_specification);
	        key_satisfies_specification = "1"b;
	        call COMPARE_AND_GROUP;
	     end AND_GROUP_LOOP;

         end COMPARE_AND_GROUPS;

      p_code = 0;
MAIN_RETURN:
      p_key_satisfies_specification = key_satisfies_specification;

      return;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      goto MAIN_RETURN;

   end ERROR_RETURN;
%page;
COMPARE_CONSTRAINT:
   proc;


      constraint_field_id = simple_search_specification.and_group.constraint.field_id;
      constraint_operator_code = simple_search_specification.and_group.constraint.operator_code;
      constraint_value_field_id = simple_search_specification.and_group.constraint.value_field_id;

      field_descriptor_ptr = addr (field_table.field (constraint_field_id).descriptor);

      call SETUP_PTR_AND_LENGTH (constraint_field_id, field_descriptor_ptr, field_value_ptr, field_value_length);

      if constraint_value_field_id > 0
      then
         do;
	  call SETUP_PTR_AND_LENGTH (constraint_value_field_id, field_descriptor_ptr, second_value_ptr,
	       second_value_length);

	  if field_table.field (constraint_value_field_id).descriptor ^= field_descriptor
	  then call sub_err_ (error_table_$unsupported_operation, myname, ACTION_CANT_RESTART, null, 0,
		  "^/Currently fields to be compared must have identical descriptors.");

/**** FOR COMPARISON OF FIELDS WITH DIFFERENT DESCRIPTORS 

		         do;
			  call
			     CONVERT_AND_COMPARE (unspec (constraint_operator_code),
			     field_descriptor_ptr, field_value_ptr,
			     field_value_length, addr (field_table.field (constraint_value_field_id).descriptor),
			     second_value_ptr, second_value_length, key_satisfies_specification);

		         end;

**** END FOR COMPARISONS OF FIELDS WITH DIFFERENT DESCRIPTORS */

	  else
	     do;
	        call COMPARE (unspec (constraint_operator_code), second_value_ptr, second_value_length,
		   field_descriptor_ptr, field_value_ptr, field_value_length, key_satisfies_specification);

	     end;
         end;
      else
         do;

	  call COMPARE (unspec (constraint_operator_code), (simple_search_specification.and_group.constraint.value_ptr),
	       DEFAULT_VALUE_LENGTH, field_descriptor_ptr, field_value_ptr, field_value_length,
	       key_satisfies_specification);

         end;

      return;

   end COMPARE_CONSTRAINT;
%page;
COMPARE_AND_GROUP:
   proc;
      do constraint_idx = 1 to search_specification.and_group (and_group_idx).number_of_constraints
	 while (key_satisfies_specification);

         this_constraint_ptr = addr (search_specification.and_group (and_group_idx).constraint (constraint_idx));

         constraint_field_id = this_constraint.field_id;
         constraint_operator_code = this_constraint.operator_code;
         constraint_value_field_id = this_constraint.value_field_id;

         if constraint_field_id > p_number_of_fully_structural_fields
         then if constraint_field_id ^= p_partial_structural_field_id
	         | (USES_REGULAR_EXPRESSION_OPERATOR (constraint_operator_code)
	         | constraint_operator_code = NOT_EQUAL_OPERATOR_CODE | constraint_value_field_id >= 0)
	    then
CHECK_CONSTRAINT:
	       do;

		field_descriptor_ptr = addr (field_table.field (constraint_field_id).descriptor);

		call SETUP_PTR_AND_LENGTH (constraint_field_id, field_descriptor_ptr, field_value_ptr,
		     field_value_length);

		if constraint_value_field_id > 0
		then
		   do;
		      call SETUP_PTR_AND_LENGTH (constraint_value_field_id, field_descriptor_ptr, second_value_ptr,
			 second_value_length);

		      if field_table.field (constraint_value_field_id).descriptor ^= field_descriptor
		      then call sub_err_ (error_table_$unsupported_operation, myname, ACTION_CANT_RESTART, null, 0,
			      "^/Currently fields to be compared must have identical descriptors.");

/**** FOR COMPARISON OF FIELDS WITH DIFFERENT DESCRIPTORS 

		         do;
			  call
			     CONVERT_AND_COMPARE (unspec (constraint_operator_code),
			     field_descriptor_ptr, field_value_ptr,
			     field_value_length, addr (field_table.field (constraint_value_field_id).descriptor),
			     second_value_ptr, second_value_length, key_satisfies_specification);

		         end;

**** END FOR COMPARISONS OF FIELDS WITH DIFFERENT DESCRIPTORS */

		      else
		         do;
			  call COMPARE (unspec (constraint_operator_code), second_value_ptr, second_value_length,
			       field_descriptor_ptr, field_value_ptr, field_value_length,
			       key_satisfies_specification);

		         end;
		   end;
		else
		   do;

		      call COMPARE (unspec (constraint_operator_code), (this_constraint.value_ptr),
			 DEFAULT_VALUE_LENGTH, field_descriptor_ptr, field_value_ptr, field_value_length,
			 key_satisfies_specification);

		   end;
	       end CHECK_CONSTRAINT;
      end;
   end COMPARE_AND_GROUP;
%page;
SETUP_PTR_AND_LENGTH:
   proc (spl_p_field_id, spl_p_field_descriptor_ptr, spl_p_field_value_ptr, spl_p_field_value_length);

      dcl	    spl_p_field_id	       fixed bin;
      dcl	    spl_p_field_descriptor_ptr
			       ptr;
      dcl	    spl_p_field_value_ptr  ptr;
      dcl	    spl_p_field_value_length
			       fixed bin (35);

      dcl	    spl_temp_field_id      fixed bin;
      dcl	    spl_temp_field_value_length
			       fixed bin (35);
      dcl	    spl_varying_field_idx  fixed bin;
      dcl	    spl_varying_field_location
			       fixed bin (35);
      dcl	    spl_length_field_length
			       fixed bin (35);
      dcl	    spl_length_field_ptr   ptr;
      dcl	    spl_length_field_string
			       bit (spl_length_field_length) based (spl_length_field_ptr);

      dcl	    spl_descriptor_type    fixed bin (35) init (0);

      spl_descriptor_type = spl_p_field_descriptor_ptr -> arg_descriptor.type;

      if spl_descriptor_type ^= varying_bit_dtype & spl_descriptor_type ^= varying_char_dtype
      then
PREPARE_NONVARYING_FIELD:
         do;
	  spl_p_field_value_length = -1;
	  spl_p_field_value_ptr = addbitno (input_key_string_ptr, field_table.field (spl_p_field_id).location - 1);
         end PREPARE_NONVARYING_FIELD;
      else
PREPARE_VARYING_FIELD:
         do;
	  spl_length_field_length = field_table.field (spl_p_field_id).length_in_bits;
	  spl_length_field_ptr = addbitno (input_key_string_ptr, field_table.field (spl_p_field_id).location - 1);
	  spl_p_field_value_length = bin (spl_length_field_string, 35, 0);

	  spl_varying_field_location = field_table.location_of_first_varying_field;
SET_VARYING_FIELD_VALUE_OFFSET:
	  do spl_varying_field_idx = 1 to field_table.varying_field_map (spl_p_field_id).varying_field_index - 1;
	     spl_temp_field_id = field_table.varying_field_map (spl_varying_field_idx).field_id;
	     spl_length_field_length = field_table.field (spl_temp_field_id).length_in_bits;
	     spl_length_field_ptr = addbitno (input_key_string_ptr, field_table.field (spl_temp_field_id).location - 1);
	     spl_temp_field_value_length = bin (spl_length_field_string, 35, 0);

	     if field_table.field (spl_temp_field_id).length_is_in_characters
	     then spl_varying_field_location = spl_varying_field_location + spl_temp_field_value_length * BITS_PER_BYTE;
	     else spl_varying_field_location = spl_varying_field_location + spl_temp_field_value_length;
	  end SET_VARYING_FIELD_VALUE_OFFSET;

	  spl_p_field_value_ptr = addbitno (input_key_string_ptr, spl_varying_field_location - 1);
         end PREPARE_VARYING_FIELD;

      return;


   end SETUP_PTR_AND_LENGTH;
%page;
COMPARE:
   proc (c_p_operator_code_string, c_p_spec_value_ptr, c_p_spec_value_length, c_p_field_descriptor_ptr,
        c_p_field_value_ptr, c_p_field_value_length, c_p_key_satisfies_specification);

      dcl	    c_p_operator_code_string
			       bit (*);
      dcl	    c_p_spec_value_ptr     ptr;
      dcl	    c_p_spec_value_length  fixed bin (35);
      dcl	    c_p_field_descriptor_ptr
			       ptr;
      dcl	    c_p_field_value_ptr    ptr;
      dcl	    c_p_field_value_length fixed bin (35);
      dcl	    c_p_key_satisfies_specification
			       bit (1) aligned;

      dcl	    c_code	       fixed bin (35);

      dcl	    (c_want_key_equal_to_spec, c_want_key_greater_than_spec, c_invert_spec, c_want_key_match_regular_expression)
			       bit (1) aligned;
      dcl	    (c_spec_equal_to_key, c_spec_less_than_key)
			       bit (1) aligned;

      dcl	    1 c_p_field_descriptor based (c_p_field_descriptor_ptr) like arg_descriptor;

      dcl	    1 c_varying_spec_value based (c_p_spec_value_ptr),
	      2 length	       fixed bin (35),
	      2 string	       char (0 refer (c_varying_spec_value.length));

      c_code = 0;
      c_want_key_match_regular_expression = substr (c_p_operator_code_string, REGULAR_EXPRESSION_IDX, 1);
      c_invert_spec = substr (c_p_operator_code_string, NOT_IDX, 1);

      if c_want_key_match_regular_expression
      then
         do;
	  if c_p_field_value_length = -1
	  then
	     do;
	        if c_p_field_descriptor.type ^= char_dtype
	        then call ERROR_RETURN (dm_error_$unimplemented_data_type);

	        c_p_field_value_length = c_p_field_descriptor.size;
	     end;
	  call search_file_ (addr (c_varying_spec_value.string), 1, (c_varying_spec_value.length), c_p_field_value_ptr,
	       1, (c_p_field_value_length), 0, 0, c_code);
	  if c_code = 0
	  then c_p_key_satisfies_specification = "1"b;
	  else if c_code = 1
	  then c_p_key_satisfies_specification = "0"b;
	  else call ERROR_RETURN (c_code);

         end;
      else
         do;
	  c_want_key_equal_to_spec = substr (c_p_operator_code_string, EQUAL_IDX, 1);
	  c_want_key_greater_than_spec = substr (c_p_operator_code_string, GREATER_IDX, 1);

	  if c_p_spec_value_length = -1
	  then call dmu_compare_values (c_p_field_descriptor_ptr, c_p_spec_value_ptr, c_p_field_value_ptr,
		  c_p_field_value_length, c_spec_equal_to_key, c_spec_less_than_key, c_code);
	  else call dmu_compare_values$field_to_field (c_p_field_descriptor_ptr, c_p_spec_value_ptr,
		  c_p_spec_value_length, c_p_field_value_ptr, c_p_field_value_length, c_spec_equal_to_key,
		  c_spec_less_than_key, c_code);

	  if c_code ^= 0
	  then call ERROR_RETURN (c_code);

/* format: off */
	  if (c_want_key_equal_to_spec & c_spec_equal_to_key) 
						/* want equal and is equal */
	  |  (c_want_key_greater_than_spec & ^c_spec_equal_to_key & c_spec_less_than_key)
						/* want greater and is greater */
            then c_p_key_satisfies_specification = "1"b;
	  else c_p_key_satisfies_specification = "0"b;
                                                            /* format: on */
         end;

      if c_invert_spec
      then c_p_key_satisfies_specification = ^c_p_key_satisfies_specification;

      return;

   end COMPARE;
%page;
/* ******************** Removed for efficiency ********************************
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);
      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	    "^/The expected version for the ^a structure was ^d. Received ^d instead.", p_expected_version,
	    p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
CHECK_VERSION_CHAR:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (*) parameter;
      dcl	    p_expected_version     char (*) parameter;
      dcl	    p_structure_name       char (*) parameter;

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the ^a structure. Received version ^a.", p_expected_version, p_structure_name,
	    p_received_version);

   end CHECK_VERSION_CHAR;

******************** End of code removed for efficiency *********************/
%page;
%include dm_specification;
%page;
%include dm_specification_head;
%page;
%include std_descriptor_types;
%page;
%include dm_id_list;
%page;
%include dm_field_table;
%page;
%include dm_operator_constants;
%page;
%include sub_err_flags;
%page;
%include arg_descriptor;
   end dmu_compare_sequential;
