/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This module implements collection_manager_$replace_ci_buffer.

         Puts  the  entire  collection_manager_-addressable  portion  of  the
     specified control interval.   The  caller  supplies  a buffer previously
     set up by cm_$setup_buffered_ci, and may use this control interval buffer
     in subsequent calls to collection_manager_$get_element_buffered.
*/

/* HISTORY:

Written by Matthew Pierret, 01/10/82.
Modified:
01/27/82 by Matthew Pierret: To use dm_error_$unimplemented_ci_version instead
            of error_table_$unimplemented_version.
01/24/84 by Matthew Pierret:  Added debugging entries for displaying previous
            and next control interval ids to help keep track of modifications
            of the control interval thread.
04/13/84 by Matthew Pierret:  Changed variable names p_control_interval_ptr
            and p_control_interval_length_in_bits to p_ci_buffer_ptr and
            p_ci_buffer_length to conform to documentation.  Also changed to
            copy p_ci_buffer_ptr into a local automatic variable.
10/08/84 by Matthew Pierret:  Added ERROR_RETURN. Removed unused variables,
            unneccessary call-by-values.  Changed to use 
            file_manager_$simple_put. Changed to use new sub_err_ flags.
*/

/* format: style2,ind3 */

cm_replace_buffered_ci:
   proc (p_file_opening_id, p_collection_id, p_control_interval_number, p_ci_buffer_ptr, p_ci_buffer_length_in_bits,
        p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned parameter;
      dcl	    p_collection_id	       bit (36) aligned parameter;
      dcl	    p_control_interval_number
			       fixed bin (24) unsigned parameter;
      dcl	    p_ci_buffer_ptr	       ptr parameter;
      dcl	    p_ci_buffer_length_in_bits
			       fixed bin (35) parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    ci_buffer_length_in_bits
			       fixed bin (35);
      dcl	    ci_buffer_ptr	       ptr;
      dcl	    1 existing_bci_header  aligned like bci_header;

/* Based */
/* Builtin */

      dcl	    (addr, null)	       builtin;

/* Constant */

      dcl	    myname	       init ("cm_replace_buffered_ci") char (32) varying internal static options (constant);
      dcl	    BITS_PER_WORD	       init (9) fixed bin internal static options (constant);
      dcl	    START_OF_CI_OFFSET     init (0) fixed bin (21) internal static options (constant);

/* Entry */

      dcl	    file_manager_$simple_put
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));
      dcl	    ioa_		       entry () options (variable);
      dcl	    cm_get_bci_header      entry (bit (36) aligned, uns fixed bin (24), ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$ci_not_in_collection,
	    dm_error_$ci_buffer_too_small,
	    dm_error_$unimplemented_ci_version
	    )		       fixed bin (35) ext;

/* Static */

      dcl	    static_trace_thread_switch
			       init ("0"b) bit (1) aligned internal static;

/* END OF DECLARATIONS */

      p_code, code = 0;
      ci_buffer_length_in_bits = p_ci_buffer_length_in_bits;
      ci_buffer_ptr = p_ci_buffer_ptr;

      call CHECK_CI_VERSION (ci_buffer_ptr -> bci_header.layout_type);

      if ci_buffer_ptr -> bci_header.collection_id ^= p_collection_id
      then call ERROR_RETURN (dm_error_$ci_not_in_collection);

      if ci_buffer_length_in_bits < CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES * BITS_PER_WORD
      then call ERROR_RETURN (dm_error_$ci_buffer_too_small);

/* If tracing ci thread modifications, compare next and previous with existing
   control header to see if anythng has changed. */

      if static_trace_thread_switch
      then
         do;
	  call cm_get_bci_header (p_file_opening_id, p_control_interval_number, addr (existing_bci_header), code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  else call CHECK_CI_VERSION (existing_bci_header.layout_type);
	  if existing_bci_header.previous_control_interval ^= ci_buffer_ptr -> bci_header.previous_control_interval
	  then call ioa_ (
		  "Buffered control interval ^d changed during replacement.^/^8xPrevious control interval changed from ^d to ^d."
		  , p_control_interval_number, existing_bci_header.previous_control_interval,
		  ci_buffer_ptr -> bci_header.previous_control_interval);
	  if existing_bci_header.next_control_interval ^= ci_buffer_ptr -> bci_header.next_control_interval
	  then call ioa_ (
		  "Buffered control interval ^d changed during replacement.^/^8xNext control interval changed from ^d to ^d."
		  , p_control_interval_number, existing_bci_header.next_control_interval,
		  ci_buffer_ptr -> bci_header.next_control_interval);
         end;

/* Replace buffered control interval. */

      call file_manager_$simple_put (p_file_opening_id, (p_control_interval_number), START_OF_CI_OFFSET, ci_buffer_ptr,
	 (CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES), code);
      if code ^= 0
      then call ERROR_RETURN (code);
      else
MAIN_RETURN:
         return;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;

trace_thread_modifications_on:
   entry ();
      static_trace_thread_switch = "1"b;
      return;

trace_thread_modifications_off:
   entry ();
      static_trace_thread_switch = "0"b;
      return;
%page;
CHECK_CI_VERSION:
   proc (ccv_p_given_version);

      dcl	    ccv_p_given_version    char (4) aligned;

      if ccv_p_given_version ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^4a control interval; received ^4a.", BASIC_CI_LAYOUT_1, ccv_p_given_version);
      else return;

   end CHECK_CI_VERSION;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_ci_lengths;
%page;
%include sub_err_flags;

   end cm_replace_buffered_ci;
