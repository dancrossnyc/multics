/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION

   This routine frees a datum specified by p_datum_id. The datum
   must be a continuation datum or a continued continuation datum.
   If the latter, the datum id of this datum's continuation is returned
   in p_datum_id.  Otherwise the return value of p_datum_id is "0"b;
   The Ordered Element Storage Method requires that CdCn and Cn datums
   be maximum-sized datums stored alone in a control interval.  For this
   reason, if the OESM is in effect, the entire control interval in which
   this datum resides is freed.  If the Basic ESM is in effect, the
   control interval is freed if this datum is sole remaining datum in the
   control interval.  If the datum slot is anywhere but at the rightmost
   end of the slot table, the slot is simply marked free.  Otherwise the
   last datum slot and any adjacent free slots are truncated.

   The zero-on-free option (dictated by p_zero_on_free) is not
   implemented yet.  Datum contents are not zeroed unless the entire
   control interval is freed.
*/

/* HISTORY:

Written by Matthew Pierret 11/10/82.
Modified:
02/04/83 by Matthew Pierret: Upgraded to CM_INFO_VERSION_2.  Changed to use
            cm_get_bci_header$slot instead of cm_get_header_and_slot.
04/05/83 by Lindsey L. Spratt:  Changed to not test the datum_slot
            is_continued flag until the datum_slot has been gottn in the
            must_get_header case.
04/06/83 by Lindsey L. Spratt:  Moved the getting of the header and the
            getting of the continuation id out of the BASIC_ESM block, so that
            the continuation id is alos gotten in the ORDERED_ESM case.
05/21/84 by Matthew Pierret:  Renamed include file dm_cm_cism_info to
            dm_cism_info. Removed un-used error codes.
09/28/84 by Matthew Pierret:  Re-named CHECK_VERSION_CHAR_4 to CHEK_CI_VERSION.
            Added subroutine prefix to variables local to subroutines and
            explicit pointer reference to structures in subroutines. Added
            BITS_TO_BYTES function to replace the old ceil(divide(...)).
12/03/84 by Matthew Pierret:  Fixed HISTORY section to conform to standards.
            Made to pass on p_zero_on_free to cm_free_ci.  Removed
            automatic_collection_header (not used) and changed 
            automatic_ci_parts_buffer to my_ci_parts, which has a component
            which is liked to ci_parts.part.  Upgraded to modern sub_err_
            calling sequence.
*/

/* format: style2,ind3 */
/* format: indcomtxt   */

cm_delete_cn_datum:
   proc (p_cm_info_ptr, p_zero_on_free, p_datum_id, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_cm_info_ptr	       ptr;
      dcl	    p_bci_header_ptr       ptr;
      dcl	    p_datum_slot_ptr       ptr;
      dcl	    p_datum_id	       bit (36) aligned;
      dcl	    p_zero_on_free	       bit (1) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    1 my_bci_header	       aligned like bci_header;
      dcl	    1 my_datum_slot	       aligned like datum_slot;
      dcl	    1 my_ci_parts	       aligned,
	      2 number_of_parts    fixed bin (17) init (0),
	      2 mbz	       fixed bin (17) init (0),
	      2 part	       (2) like ci_parts.part;

      dcl	    continuation	       bit (36) aligned init ("0"b);
      dcl	    datum_id_string	       bit (36) aligned init ("0"b);
      dcl	    number_of_slots	       fixed bin (17);
      dcl	    rightmost_non_free_slot
			       fixed bin (17);
      dcl	    slot_idx	       fixed bin (17);
      dcl	    datum_slot_table_ptr   ptr;
      dcl	    found		       bit (1) aligned init ("0"b);
      dcl	    must_get_header	       bit (1) aligned init ("0"b);

/* Based */

      dcl	    1 datum_slot_table     (number_of_slots) aligned based (datum_slot_table_ptr) like datum_slot;

/* Builtin */

      dcl	    (addr, divide, null, size)
			       builtin;

/* Controlled */
/*  Constant */

      dcl	    myname	       init ("cm_delete_cn_datum") char (32) varying int static options (constant);
      dcl	    BITS_PER_BYTE	       init (9) fixed bin int static options (constant);
      dcl	    BYTES_PER_WORD	       init (4) fixed bin int static options (constant);
      dcl	    ZEROED_DATUM_SLOT      init (0) fixed bin (35) int static options (constant);

/* Entry */

      dcl	    file_manager_$get      entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    file_manager_$put      entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    file_manager_$simple_get
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$no_datum     ext fixed bin (35);
      dcl	    dm_error_$unimplemented_ci_version
			       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      must_get_header = "1"b;

      goto JOIN;


header:
   entry (p_cm_info_ptr, p_bci_header_ptr, p_datum_slot_ptr, p_zero_on_free, p_datum_id, p_code);

      must_get_header = "0"b;
      datum_slot_ptr = p_datum_slot_ptr;
      bci_header_ptr = p_bci_header_ptr;
      call CHECK_CI_VERSION (bci_header.layout_type);

      goto JOIN;
%page;
JOIN:
      p_code, code = 0;
      cm_info_ptr = p_cm_info_ptr;
      call CHECK_VERSION ("cm_info", cm_info.version, CM_INFO_VERSION_2);

      collection_header_ptr = cm_info.header_ptr;
      call CHECK_VERSION ("collection_header", collection_header.version, COLLECTION_HEADER_VERSION_2);

      datum_id_string = p_datum_id;
      datum_id_ptr = addr (datum_id_string);

      if datum_id.index = 0
      then call ERROR_RETURN (dm_error_$no_datum);

      if must_get_header
      then
         do;

	  bci_header_ptr = addr (my_bci_header);
	  datum_slot_ptr = addr (my_datum_slot);

	  call cm_get_bci_header$slot (cm_info.file_oid, bci_header_ptr, datum_slot_ptr, p_datum_id, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  else call CHECK_CI_VERSION (bci_header.layout_type);
         end;

      if ^datum_slot.flags.is_continuation
      then call ERROR_RETURN (dm_error_$no_datum);

      if datum_slot.is_continued
      then
         do;

	  /*** The datum is a continued continuation datum. Before freeing this datum
	       get the id of its continuation to be passed back to the caller. */

	  continuation = GET_CONTINUATION ((datum_id.control_interval_id), (datum_slot.offset_in_bytes));
         end;

      ci_parts_ptr = addr (my_ci_parts);
      ci_parts.number_of_parts = 1;

      if collection_header.element_storage_method = ORDERED_ELEMENT_STORAGE_METHOD
      then
ORDERED_ESM:
         do;

	  /*** The Ordered Element Storage Method requires continuation datums be
	       maximum-sized datums residing alone in a control interval.  To free
	       such a datum, simply free the entire control interval. */

	  call cm_free_ci$info (cm_info_ptr, (datum_id.control_interval_id), p_zero_on_free, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end ORDERED_ESM;
      else
BASIC_ESM:
         do;

	  /*** Delete the basic datum. The following cases are possible:
	       (1) The datum is the only one in the control interval: free the control interval;
	       (2) The datum uses the last slot: truncate the slot
	       (3) The datum uses the last slot and the adjacent slot to the left is
	       a free slot: truncate all trailing free slots.
	       (4) The datum uses a slot other than the last slot: zero that slot
	       and note that there exists a free slot in the bci_header.
	  */

	  if datum_id.index = bci_header.number_of_datums
	  then if bci_header.number_of_datums = 1
	       then
BESM_1_FREE_CI:
		do;
		   call cm_free_ci$info (cm_info_ptr, (datum_id.control_interval_id), p_zero_on_free, code);
		   if code ^= 0
		   then call ERROR_RETURN (code);
		end BESM_1_FREE_CI;
	       else
		do;

		   if ^bci_header.flags.free_slot_is_present
		   then
BESM_2_TRUNCATE_LAST_SLOT:
		      do;

		         ci_parts.part (1).offset_in_bytes =
			    (size (bci_header) + datum_id.index - 1) * BYTES_PER_WORD;
		         ci_parts.part (1).length_in_bytes = BYTES_PER_WORD;
		         ci_parts.part (1).local_ptr = addr (ZEROED_DATUM_SLOT);

		         bci_header.number_of_datums = bci_header.number_of_datums - 1;
		         call PUT_HEADER_AND_SLOTS (cm_info.file_oid, bci_header_ptr, datum_slot_ptr,
			    (datum_id.control_interval_id), ci_parts_ptr);

		      end BESM_2_TRUNCATE_LAST_SLOT;
		   else
BESM_3_TRUNCATE_TRAILING_FREE_SLOTS:
		      do;

		         number_of_slots = bci_header.number_of_datums;
B3_BEGIN_BLOCK:
		         begin;

			  /*** Since there is at least one free slot in this control interval, check
			       to see if it and any others are adjacent to the last slot (which is being
			       freed).  A begin block is used to allocate a datum slot array of the
			       proper size. */

			  dcl	datum_slots_buffer	   (number_of_slots) fixed bin (35);

			  datum_slots_buffer = 0;
			  datum_slot_table_ptr = addr (datum_slots_buffer);

			  ci_parts.part (1).offset_in_bytes = size (bci_header) * BYTES_PER_WORD;
			  ci_parts.part (1).length_in_bytes = number_of_slots * BYTES_PER_WORD;
			  ci_parts.part (1).local_ptr = datum_slot_table_ptr;

			  call file_manager_$get (cm_info.file_oid, (datum_id.control_interval_id), ci_parts_ptr,
			       code);
			  if code ^= 0
			  then call ERROR_RETURN (code);

			  datum_slots_buffer (number_of_slots) = 0;

			  do rightmost_non_free_slot = number_of_slots - 1 to 1 by -1
			       while (datum_slot_table (rightmost_non_free_slot).offset_in_bytes = FREE_SLOT);
			     datum_slots_buffer (rightmost_non_free_slot) = 0;
			  end;

			  do slot_idx = 1 to rightmost_non_free_slot - 1
			       while (datum_slot_table (slot_idx).offset_in_bytes ^= FREE_SLOT);
			  end;

			  if slot_idx >= rightmost_non_free_slot
			  then bci_header.flags.free_slot_is_present = "0"b;

			  bci_header.number_of_datums = rightmost_non_free_slot;

			  if bci_header.number_of_datums = 0
			  then
			     do;
			        call cm_free_ci$info (cm_info_ptr, (datum_id.control_interval_id), p_zero_on_free,
				   code);
			        if code ^= 0
			        then call ERROR_RETURN (code);
			     end;

			  else call PUT_HEADER_AND_SLOTS (cm_info.file_oid, bci_header_ptr, datum_slot_ptr,
				  (datum_id.control_interval_id), ci_parts_ptr);

		         end B3_BEGIN_BLOCK;
		      end BESM_3_TRUNCATE_TRAILING_FREE_SLOTS;
		end;
	  else
BESM_4_DELETE_SLOT_IN_THE_MIDDLE_OF_TABLE:
	     do;

	        /*** The slot is in the middle of the slot table. Zero out that slot and note
		   that there now exists a free slot in the table. */

	        ci_parts.part (1).offset_in_bytes = (size (bci_header) + datum_id.index - 1) * BYTES_PER_WORD;
	        ci_parts.part (1).length_in_bytes = BYTES_PER_WORD;
	        ci_parts.part (1).local_ptr = addr (ZEROED_DATUM_SLOT);

	        bci_header.flags.free_slot_is_present = "1"b;

	        call PUT_HEADER_AND_SLOTS (cm_info.file_oid, bci_header_ptr, datum_slot_ptr,
		   (datum_id.control_interval_id), ci_parts_ptr);

	     end BESM_4_DELETE_SLOT_IN_THE_MIDDLE_OF_TABLE;

	  p_datum_id = continuation;

         end BASIC_ESM;

MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_given_version, cv_p_correct_version);

      dcl	    cv_p_structure_name    char (*);
      dcl	    cv_p_given_version     char (8) aligned;
      dcl	    cv_p_correct_version   char (8) aligned;

      if cv_p_given_version ^= cv_p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", cv_p_correct_version,
	      cv_p_structure_name, cv_p_given_version);

      return;

   end CHECK_VERSION;


CHECK_CI_VERSION:
   proc (ccv_p_given_version);

      dcl	    ccv_p_given_version    char (4) aligned;

      if ccv_p_given_version ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a control interval; received ^a.", BASIC_CI_LAYOUT_1, ccv_p_given_version);
      else return;

   end CHECK_CI_VERSION;
%page;
PUT_HEADER_AND_SLOTS:
   proc (phas_p_file_opening_id, phas_p_bci_header_ptr, phas_p_datum_slot_ptr, phas_p_control_interval_id,
        phas_p_ci_parts_ptr);

      dcl	    phas_p_file_opening_id bit (36) aligned;
      dcl	    phas_p_bci_header_ptr  ptr;
      dcl	    phas_p_datum_slot_ptr  ptr;
      dcl	    phas_p_control_interval_id
			       fixed bin (27);
      dcl	    phas_p_ci_parts_ptr    ptr;
      dcl	    phas_code	       fixed bin (35);

      phas_code = 0;

      if phas_p_datum_slot_ptr -> datum_slot.offset_in_bytes = phas_p_bci_header_ptr -> bci_header.start_of_used_space
      then phas_p_bci_header_ptr -> bci_header.start_of_used_space =
	      phas_p_bci_header_ptr -> bci_header.start_of_used_space + BITS_TO_BYTES ((datum_slot.length_in_bits));
      else phas_p_bci_header_ptr -> bci_header.scattered_free_space =
	      phas_p_bci_header_ptr -> bci_header.scattered_free_space + BITS_TO_BYTES ((datum_slot.length_in_bits));


      phas_p_ci_parts_ptr -> ci_parts.number_of_parts = 2;
      phas_p_ci_parts_ptr -> ci_parts.part (2).offset_in_bytes = 0;
      phas_p_ci_parts_ptr -> ci_parts.part (2).length_in_bytes = size (bci_header) * BYTES_PER_WORD;
      phas_p_ci_parts_ptr -> ci_parts.part (2).local_ptr = phas_p_bci_header_ptr;

      call file_manager_$put (phas_p_file_opening_id, phas_p_control_interval_id, phas_p_ci_parts_ptr, phas_code);
      if phas_code ^= 0
      then call ERROR_RETURN (phas_code);
      else return;

   end PUT_HEADER_AND_SLOTS;
%page;
BITS_TO_BYTES:
   proc (btb_p_bits) returns (fixed bin (17));

      dcl	    btb_p_bits	       fixed bin (35);

      return (divide (btb_p_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0));

   end BITS_TO_BYTES;
%page;
GET_CONTINUATION:
   proc (gc_p_ci, gc_p_offset) returns (bit (36) aligned);

      dcl	    gc_p_ci	       fixed bin (27);
      dcl	    gc_p_offset	       fixed bin (21);
      dcl	    gc_continuation_datum_id
			       bit (36) aligned;
      dcl	    gc_code	       fixed bin (35);

      call file_manager_$simple_get (cm_info.file_oid, gc_p_ci, gc_p_offset, addr (gc_continuation_datum_id),
	 (CDCN_DATUM_HEADER_LENGTH_IN_BYTES), gc_code);
      if gc_code ^= 0
      then call ERROR_RETURN (gc_code);
      else return (gc_continuation_datum_id);


   end GET_CONTINUATION;
%page;
%include dm_cm_info;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_cm_collection_header;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_esm_info;
%page;
%include dm_ci_parts;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_delete_cn_datum;
