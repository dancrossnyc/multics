/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This module implements collection_manager_$setup_ci_buffer.

         Gets  the  entire  collection_manager_-addressable  portion  of  the
     specified control interval.   The  caller  supplies  a buffer for  the
     control  interval, and may use this control interval buffer in subsequent
     calls to collection_manager_$get_element_buffered.
*/

/* HISTORY:

Written by Matthew Pierret, 08/17/82.
Modified:
01/10/83 by Matthew Pierret:  Changed to refuse to setup ci if a continuation
            datum is present in the ci. Continuation datums are the source of
            some as-yet unsolved lost-update problems.
01/27/83 by Matthew Pierret:  Changed to use dm_error_$unimplemented_ci_version
04/13/84 by Matthew Pierret:  Changed p_control_interval_ptr and
            p_control_interval_length_in_bits to p_ci_buffer_ptr and
            p_ci_buffer_length_in_bits to conform to documentation.
10/08/84 by Matthew Pierret:  Changed to use ERROR_RETURN and to use local
            copies of parameters.  Change to use file_manager_$simple_get,
            eliminating the need for ci_parts.
*/

/* format: style2,ind3 */

cm_setup_buffered_ci:
   proc (p_file_opening_id, p_collection_id, p_control_interval_number, p_ci_buffer_ptr, p_ci_buffer_length_in_bits,
        p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned parameter;
      dcl	    p_collection_id	       bit (36) aligned parameter;
      dcl	    p_control_interval_number
			       fixed bin (24) unsigned parameter;
      dcl	    p_ci_buffer_ptr	       ptr parameter;
      dcl	    p_ci_buffer_length_in_bits
			       fixed bin (35) parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    ci_buffer_length_in_bits
			       fixed bin (35);
      dcl	    ci_number	       fixed bin (27);
      dcl	    ci_ptr	       ptr;

/* Based */

      dcl	    based_bit_string       bit (ci_buffer_length_in_bits) based;

/* Builtin */

      dcl	    null		       builtin;

/* Constant */

      dcl	    myname	       init ("cm_setup_buffered_ci") char (32) varying internal static options (constant);
      dcl	    START_OF_CI_OFFSET     init (0) fixed bin (21) internal static options (constant);

/* Entry */

      dcl	    file_manager_$simple_get
			       entry (bit (36) aligned, fixed bin (27), fixed bin (21), ptr, fixed bin (21),
			       fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$cant_buffer_ci_continuations,
	    dm_error_$ci_not_in_collection,
	    dm_error_$ci_buffer_too_small,
	    dm_error_$unimplemented_ci_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code, code = 0;
      ci_ptr = null;
      ci_number = p_control_interval_number;
      ci_buffer_length_in_bits = p_ci_buffer_length_in_bits;
      if ci_buffer_length_in_bits < CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES * 9
      then call ERROR_RETURN (dm_error_$ci_buffer_too_small);

      ci_ptr = p_ci_buffer_ptr;
      call file_manager_$simple_get (p_file_opening_id, ci_number, START_OF_CI_OFFSET, ci_ptr,
	 (CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES), code);
      if code ^= 0
      then call ERROR_RETURN (code);


      call CHECK_CI_VERSION (ci_ptr -> bci_header.layout_type);
      if ci_ptr -> bci_header.collection_id ^= p_collection_id
      then call ERROR_RETURN (dm_error_$ci_not_in_collection);
      else if ci_ptr -> bci_header.flags.continuation_datum_is_present
      then call ERROR_RETURN (dm_error_$cant_buffer_ci_continuations);


MAIN_RETURN:
      return;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      if ci_ptr ^= null
      then ci_ptr -> based_bit_string = ""b;
      go to MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_CI_VERSION:
   proc (ccv_p_given_version);

      dcl	    ccv_p_given_version    char (4) aligned;

      if ccv_p_given_version ^= BASIC_CI_LAYOUT_1
      then call sub_err_ (dm_error_$unimplemented_ci_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^4a control interval; received ^4a.", BASIC_CI_LAYOUT_1, ccv_p_given_version);
      else return;

   end CHECK_CI_VERSION;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_ci_lengths;
%page;
%include sub_err_flags;

   end cm_setup_buffered_ci;
