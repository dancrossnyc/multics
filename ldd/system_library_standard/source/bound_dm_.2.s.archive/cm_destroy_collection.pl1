/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This  routine  destroys  a collection in a DM file.  Currently, only
     collections which employ the Unblocked Control  Interval  Storage  Method
     can  be  destroyed.  Each control interval of the collection is freed, as
     well  as  all  associated  header   information,   which   includes   the
     collection_header,    the   storage_record   and   the   entry   in   the
     collection_id_table.

          In the future (post MR11) when creation of Blocked collections is
     supported, this module will also support the deletion of Blocked
     collections.  Deleting Blocked collections requires following an
     allocation map, rather than a control interval thread.
*/

/* HISTORY:
Written by Matthew Pierret, 03/21/83.
Modified:
02/07/84 by Matthew Pierret:  Changed to use cm_get_element instead of
            cm_get_element$info.  The latter entry is now obsolete.
05/21/84 by Matthew Pierret:  Renamed include file dm_cm_cism_info to
            dm_cism_info.  Added er_p_code parameter to ERROR_RETURN.
            Changed to use local variable code instead of parameter p_code.
06/12/84 by Matthew Pierret:  Re-named cm_put_element to cm_modify.
07/24/84 by Matthew Pierret:  Changed to use cm_free_ci$raw_return_prev_next
            instead of using cm_free_ci$info then relying on it to have updated
            unblocked_storage_record.first_control_interval.  The new entry
            frees the control itnerval without bothering to update headers
            and re-thread threads, and returns the value of the next ci id.
09/26/84 by Matthew Pierret: Added comment indicating that Blocked collections
            are not supported but will be in the future.
*/

/* format: style2,ind3 */

cm_destroy_collection:
   proc (p_file_opening_id, p_collection_id, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned parameter;
      dcl	    p_collection_id	       bit (36) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    1 local_cm_file_header aligned like cm_file_header;
      dcl	    hc_cm_info_ptr	       ptr init (null);
      dcl	    is_unblocked	       bit (1) aligned init ("1"b);
      dcl	    (header_record_element_id, collection_header_element_id, collection_id, file_opening_id,
	    storage_record_element_id)
			       bit (36) aligned init ("0"b);
      dcl	    ci_count	       fixed bin (24);
      dcl	    collection_idx	       fixed bin;
      dcl	    code		       fixed bin (35);
      dcl	    collection_id_table_length
			       fixed bin (35) init (0);
      dcl	    (current_ci_id, first_ci_id, last_ci_id, next_ci_id)
			       fixed bin (24) unsigned;

/* Based */

      dcl	    dm_work_area	       area (sys_info$max_seg_size) based (dm_work_area_ptr);
      dcl	    collection_id_table_buffer
			       aligned bit (collection_id_table_length) based (collection_id_table_ptr);

/* Builtin */

      dcl	    (addr, ceil, divide, length, null, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("cm_destroy_collection") char (32) varying internal static options (constant);
      dcl	    (
	    BITS_PER_WORD	       init (36),
	    DEFAULT_POSITION       init (0)
	    )		       fixed bin internal static options (constant);
      dcl	    LIMIT_TO_STOP_INFINITE_LOOPING
			       init (1e6) fixed bin (35) internal static options (constant);
      dcl	    DONT_ZERO_ON_FREE      init ("0"b) bit (1) aligned internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);
      dcl	    get_dm_free_area_      entry () returns (ptr);

/* External */

      dcl	    (
	    error_table_$unimplemented_version,
	    sys_info$max_seg_size,
	    dm_error_$programming_error,
	    dm_error_$unimplemented_cism
	    )		       fixed bin (35) ext;

/* Static */

      dcl	    dm_work_area_ptr       ptr init (null) internal static;

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */

      p_code, code = 0;

      file_opening_id = p_file_opening_id;
      collection_id = p_collection_id;

      collection_id_table_ptr = null;

   /*** Get opening info for the header collection (hc_cm_info_ptr). ***/

      call cm_opening_info$full_get (file_opening_id, HEADER_COLLECTION_ID, hc_cm_info_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);

   /*** Get the opening info (cm_info) for this collection. ***/

      call cm_opening_info$full_get (file_opening_id, collection_id, cm_info_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call CHECK_VERSION (cm_info.version, CM_INFO_VERSION_2, "cm_info");

      collection_header_ptr = cm_info.header_ptr;
      call CHECK_VERSION (collection_header.version, COLLECTION_HEADER_VERSION_2, "collection_header");

      if collection_header.control_interval_storage_method ^= UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD
      then call sub_err_ (dm_error_$unimplemented_cism, myname, ACTION_CANT_RESTART, null, 0,
	      "^/This operation only supports control interval storage method ^d;^/^10xreceived method ^d.",
	      UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD, collection_header.control_interval_storage_method);
						/* In the future (post MR11) deletion of */
						/* Blocked collections will be supported. */
      else
         do;

         /*** This is an Unblocked collection. Set up the unblocked_storage_record,
	    and  get the ids of the first and last control intervals of the collection. ***/

	  unblocked_storage_record_ptr = cm_info.storage_record_ptr;

	  first_ci_id = unblocked_storage_record.first_control_interval;
	  last_ci_id = unblocked_storage_record.last_control_interval;

         end;

   /*** Save the element ids of elements related to this element which are
        stored in the Header Collection. ***/

      collection_header_element_id = collection_id;
      header_record_element_id = collection_header.header_record_element_id;
      storage_record_element_id = collection_header.storage_record_element_id;

/**** Prepare to begin destruction. ***/

      collection_id_table_ptr = null;
      if dm_work_area_ptr = null
      then dm_work_area_ptr = get_dm_free_area_ ();
      on cleanup call FINISH ();

/**** Free all of the control intervals in the collection. ***/

      current_ci_id = first_ci_id;

      do ci_count = 1 to LIMIT_TO_STOP_INFINITE_LOOPING while (current_ci_id > 0);

         call cm_free_ci$raw_return_prev_next (cm_info_ptr, current_ci_id, "1"b, (0), next_ci_id, code);
         if code ^= 0
         then call ERROR_RETURN (code);

         current_ci_id = next_ci_id;
      end;

/**** Free the opening info for his collection. ***/

      call cm_free_opening_info (file_opening_id, collection_id, code);
      if code ^= 0
      then call ERROR_RETURN (code);
      cm_info_ptr = null;

/**** Remove the collection_id from the collection_id_table. ***/

   /*** Get the cm_file_header, to find the location of the collection_id_table. ***/

      call cm_get_element (file_opening_id, HEADER_COLLECTION_ID, CM_FILE_HEADER_ELEMENT_ID, DEFAULT_POSITION,
	 addr (local_cm_file_header), length (unspec (local_cm_file_header)), null, ("0"b), cm_file_header_ptr, (0),
	 code);
      if code ^= 0
      then call ERROR_RETURN (code);
      call CHECK_VERSION (cm_file_header.version, CM_FILE_HEADER_VERSION_1, "cm_file_header");

   /*** Get the collection_id_table. ***/

      cit_number_of_collections = cm_file_header.number_of_collections;

      call cm_get_element (file_opening_id, HEADER_COLLECTION_ID, cm_file_header.collection_id_table_element_id,
	 DEFAULT_POSITION, null, (0), dm_work_area_ptr, ("1"b), collection_id_table_ptr, collection_id_table_length,
	 code);
      if code ^= 0
      then call ERROR_RETURN (code);

      if ceil (divide (collection_id_table_length, BITS_PER_WORD, 35, 18)) ^= cit_number_of_collections
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CAN_RESTART, null, 0,
	      "^/The actual size of the collection_id_table, ^d entries, differs from the^/number of collections, ^d.",
	      ceil (divide (collection_id_table_length, BITS_PER_WORD, 35, 18)), cit_number_of_collections);

   /*** Find the entry in the collection_id_table which holds this collection_id. ***/

      do collection_idx = 1 to cit_number_of_collections while (collection_id_table (collection_idx) ^= collection_id);
      end;

      if collection_idx <= cit_number_of_collections
      then
         do;

         /*** The collection id is in collection_id_table (collection_idx). Remove it,
	    recover the entry and replace the collection_id_table in the file. ***/

	  if collection_idx ^= cit_number_of_collections
	  then collection_id_table (collection_idx) = collection_id_table (cit_number_of_collections);
	  cit_number_of_collections = cit_number_of_collections - 1;

	  call cm_modify$info (hc_cm_info_ptr, collection_id_table_ptr, length (unspec (collection_id_table)),
	       cm_file_header.collection_id_table_element_id, (0), code);
	  if code ^= 0
	  then call ERROR_RETURN (code);

	  cm_file_header.number_of_collections = cit_number_of_collections;

	  call cm_modify$info (hc_cm_info_ptr, cm_file_header_ptr, length (unspec (cm_file_header)),
	       CM_FILE_HEADER_ELEMENT_ID, (0), code);
	  if code ^= 0
	  then call ERROR_RETURN (code);

         end;

/**** Free all per-collection header information in the file: the collection_header,
      storage_record and caller header. ***/

      call cm_delete$info (hc_cm_info_ptr, collection_header_element_id, DONT_ZERO_ON_FREE, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call cm_delete$info (hc_cm_info_ptr, storage_record_element_id, DONT_ZERO_ON_FREE, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call cm_delete$info (hc_cm_info_ptr, header_record_element_id, DONT_ZERO_ON_FREE, code);
      if code ^= 0
      then call ERROR_RETURN (code);

/**** Finished ****/

      call FINISH ();
MAIN_RETURN:
      return;					/* Effective end of cm_destroy_collection */
%page;
ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH ();
      goto MAIN_RETURN;

   end ERROR_RETURN;



FINISH:
   proc ();

      if collection_id_table_ptr ^= null
      then free collection_id_table_buffer in (dm_work_area);

   end FINISH;
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      dcl	    cv_p_received_version  char (8) aligned;
      dcl	    cv_p_expected_version  char (8) aligned;
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of the ^a structure.
Received version ^8a instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%page;
%include dm_hdr_collection_id;
%page;
%include dm_cm_hdr_col_ids;
%page;
%include dm_cm_info;
%page;
%include dm_cm_collection_header;
%page;
%include dm_cm_file_header;
%page;
%include dm_cm_storage_record;
%page;
%include dm_cism_info;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;
   end cm_destroy_collection;
