/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

        This routine puts a datum in the free pool of a control interval.
   It assumes that the caller has already determined that the datum will fit
   in the free pool.  This will put the datum in the file copy of the
   specified control interval (p_element_id.control_interval_id) or on a
   buffered copy of the control interval, depending on whether the entry into
   this routine was from a non-buffered or buffered entry point.
   
        The areas of a control interval that this routine may modify are
   highlighted with *'s, as follows:
   
    ---------------------------------------------------------------
    |        || | | | | | | ||                   ||                |
    | Header || | | Slots | ||     Free pool     ||   Used space   |
    |        || | | | | | | ||   (Un-used space) ||                |
    ----------------------------------------------------------------
     ********      *                     (**)*****(****)
       (1)        (2)                     (4)  (3)  
   
   (1) The start_of_used_space component of bci_header is modified to the 
   location of the start of the new datum. The caller may also have modified
   other components of bci_header and is relying on this routine to actually
   put the modified bci_header back into the file copy of the control interval.
   
   (2) The datum_slot for the datum to put has its length_in_bits component
   and perhaps the is_continuation flag set by this routine.  The 
   offset_in_bytes and is_continued flag are set by the caller.  The 
   length_in_bits is p_datum_contents_length_in_bits plus the length of the
   datum header, if there is one.
   
   (3) This is the actual contents of the datum.  This may actually spill over
   into the used space portion of the control interval if this call is made to
   replace a datum which happened to start at the start of the used space.
   This routine, however, does not make that determination, trusting the caller
   to have correctly calculated the proper offset for the datum.
   
   (4) This is the header of the datum, and is only put if called through the
   $continued or $buffered_continued entry points.  It is a continued_datum
   header if p_element_length_in_bits is non-negative. p_element_length_in_bits
   and p_continuation are used to fill in the continued_datum.header
   (cd_datum_header) structure.  If negative, this indicates the datum
   requires a continued_continuation_datum header (cdcn_datum_header), which 
   only uses p_continuation.
   
        If the datum is to be put into a buffered copy of the control interval
   (i.e., routine was entered through $buffered or $buffered_continued),
   p_ci_buffer_ptr points to the control interval buffer, and, because of
   the construction of the control interval, to bci_header.  p_datum_slot_ptr
   is assumed to point at the datum slot in the control interval buffer.
   Any modifications to bci_header and datum_slot, then, are made directly
   to the control interval buffer.
   
        If the datum is to be put into the file copy of the control interval
   (i.e., routine was entered through $cm_put_datum_in_pool or $continued)
   p_bci_header_ptr and p_datum_slot_ptr are assumed to point to copies of
   the bci_header and datum_slot in the caller's local storage.  Modifications
   made to these structures, and to datum header structures, do not change the
   file copy of the control interval.  The modified structures must be put back
   into the file copy via a call to file_manager_$put.
   
*/

/* HISTORY:
Written by Matthew Pierret.
Modified:
04/13/82 by Matthew Pierret: Fixed bug. Uninitialized element_ptr was being used 
            instead of p_element_ptr.
06/15/82 by Matthew Pierret: Changed to use bci_header, dm_cm_basic_ci.incl.pl1,
            ignore non-addressable portion of CI, new calling sequence of 
            cm_add_ci_part.
08/04/82 by Matthew Pierret: Removed calls to cm_add_ci_part, making that code
            in-line.
10/20/82 by Matthew Pierret:  Converted to use file_manager_. Changed
            from element_(ptr length_in_bytes length_in_bits) to
            datum_contents_=.
01/04/83 by Matthew Pierret: Added $buffered and $buffered_continued to do
            puts into a supplied ci buffer.
01/21/83 by Matthew Pierret: Removed an invalid use of p_bci_header_ptr when
            entered through $buffered or $buffered_continued. These entries
            do not take that parameter.
            Changed based_ci_string character overlay to be based_ci, a bit (9)
            array.  This was to remove the "addr(substr())" construct, which
            is not guaranteed to be correct in all cases.
10/03/84 by Matthew Pierret:  Removed dm_cm_entry_dcls.incl.pl1, ceil and
            null.  Changed calculation of bits to bytes from
            bytes = ceil (divide (bits, BITS_PER_BYTES, 35, 18)) to
            bytes = divide (bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0),
            the latter being more efficient.  Added size, unspec and 
            DESCRIPTION section.  Also changed buffer upon which ci_parts
            is based from automatic__parts_buffer to my_ci_parts, which is
            a structure "like"-ed to ci_parts.
10/05/84 by Matthew Pierret:  Changed to increment the scattered_free_space
            if the datum already existed (datum_slot.offset_in_bytes is not
            equal to FREE_SLOT) and the existing datum is not at the beginning 
            of the used space (datum_slot.offset_in_bytes is equal to 
            bci_header.start_of_used_space).  If it is at the beginning of
            the used space, the space it takes up is recovered immediately.
12/03/84 by Matthew Pierret:  Added the local cdcn_datum_header and
            cd_datum_header structures which were removed from
            dm_cm_datum.incl.pl1
*/

/* format: style2,ind3 */

cm_put_datum_in_pool:
   proc (p_file_opening_id, p_element_id, p_datum_contents_ptr, p_datum_contents_length_in_bits, p_datum_slot_ptr,
        p_bci_header_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_element_id	       bit (36) aligned;
      dcl	    p_datum_contents_ptr   ptr;
      dcl	    p_datum_contents_length_in_bits
			       fixed bin (35);
      dcl	    p_datum_slot_ptr       ptr;
      dcl	    p_bci_header_ptr       ptr;
      dcl	    p_ci_buffer_ptr	       ptr;
      dcl	    p_element_length_in_bits
			       fixed bin (35);
      dcl	    p_continuation	       bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    is_buffered	       bit (1) aligned init ("0"b);
      dcl	    1 my_ci_parts	       aligned,
	      2 number_of_parts    fixed bin,
	      2 part	       (4) like ci_parts.part;
      dcl	    based_byte_string_length
			       fixed bin (35) init (0);
      dcl	    datum_contents_length_in_bytes
			       fixed bin (17) init (0);
      dcl	    datum_header_length_in_bytes
			       fixed bin (17) init (0);
      dcl	    old_datum_length_in_bytes
			       fixed bin (17) init (0);
      dcl	    (ci_datum_contents_ptr, ci_datum_header_ptr, datum_header_ptr)
			       ptr;

      dcl	    1 cd_datum_header      aligned like continued_datum.header;
      dcl	    1 cdcn_datum_header    aligned like continued_continuation_datum.header;

/* Based */

      dcl	    1 based_ci	       based (bci_header_ptr),
	      2 byte	       (CONTROL_INTERVAL_ADDRESSABLE_LENGTH_IN_BYTES) bit (9) unaligned;
      dcl	    based_byte_string      char (based_byte_string_length) based;

/* Builtin */

      dcl	    (addr, divide, null, size, unspec)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    BITS_PER_BYTE	       fixed bin init (9) int static options (constant);
      dcl	    BYTES_PER_WORD	       fixed bin init (4) int static options (constant);
      dcl	    HEADER_PART_IDX	       fixed bin init (1) int static options (constant);
      dcl	    DATUM_SLOT_PART_IDX    fixed bin init (2) int static options (constant);
      dcl	    DATUM_CONTENTS_PART_IDX
			       fixed bin init (3) int static options (constant);
      dcl	    DATUM_HEADER_PART_IDX  fixed bin init (4) int static options (constant);

/* Entry */

      dcl	    file_manager_$put      entry (bit (36) aligned, uns fixed bin (24), ptr, fixed bin (35));

/* External */
/* END OF DECLARATIONS */

      bci_header_ptr = p_bci_header_ptr;
      datum_slot_ptr = p_datum_slot_ptr;

      goto JOIN;

buffered:
   entry (p_ci_buffer_ptr, p_datum_contents_ptr, p_datum_contents_length_in_bits, p_datum_slot_ptr, p_code);

      bci_header_ptr = p_ci_buffer_ptr;
      datum_slot_ptr = p_datum_slot_ptr;
      is_buffered = "1"b;

      goto JOIN;

continued:
   entry (p_file_opening_id, p_element_id, p_datum_contents_ptr, p_datum_contents_length_in_bits, p_datum_slot_ptr,
        p_bci_header_ptr, p_element_length_in_bits, p_continuation, p_code);

      bci_header_ptr = p_bci_header_ptr;

      goto CD_JOIN;

buffered_continued:
   entry (p_ci_buffer_ptr, p_datum_contents_ptr, p_datum_contents_length_in_bits, p_datum_slot_ptr,
        p_element_length_in_bits, p_continuation, p_code);

      bci_header_ptr = p_ci_buffer_ptr;
      is_buffered = "1"b;

CD_JOIN:
      datum_slot_ptr = p_datum_slot_ptr;

      datum_slot.flags.is_continued = "1"b;

      if p_element_length_in_bits < 0
      then
         do;
	  datum_slot.flags.is_continuation = "1"b;
	  datum_header_length_in_bytes = CDCN_DATUM_HEADER_LENGTH_IN_BYTES;

	  unspec (cdcn_datum_header.continuation) = p_continuation;
	  datum_header_ptr = addr (cdcn_datum_header);
         end;
      else
         do;
	  datum_slot.flags.is_continuation = "0"b;
	  datum_header_length_in_bytes = CD_DATUM_HEADER_LENGTH_IN_BYTES;

	  cd_datum_header.full_length = p_element_length_in_bits;
	  unspec (cd_datum_header.continuation) = p_continuation;

	  datum_header_ptr = addr (cd_datum_header);
         end;

      goto JOIN;
%page;
JOIN:
      p_code = 0;

      datum_contents_length_in_bits = p_datum_contents_length_in_bits;
      datum_contents_length_in_bytes = divide (datum_contents_length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);

      if datum_slot.offset_in_bytes = bci_header.start_of_used_space
      then datum_slot.offset_in_bytes =
	      datum_slot.offset_in_bytes - (datum_contents_length_in_bytes + datum_header_length_in_bytes)
	      + divide (datum_slot.length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);
      else
         do;
	  if datum_slot.offset_in_bytes ^= FREE_SLOT
	  then bci_header.scattered_free_space =
		  bci_header.scattered_free_space
		  + divide (datum_slot.length_in_bits + BITS_PER_BYTE - 1, BITS_PER_BYTE, 17, 0);
	  else /* no old space to remember */
	       ;

	  datum_slot.offset_in_bytes =
	       bci_header.start_of_used_space - (datum_contents_length_in_bytes + datum_header_length_in_bytes);
         end;

      datum_slot.length_in_bits = datum_header_length_in_bytes * BITS_PER_BYTE + datum_contents_length_in_bits;
      bci_header.start_of_used_space = datum_slot.offset_in_bytes;

      if is_buffered
      then
COPY_INTO_BUFFERED_CI:
         do;

	  based_byte_string_length = datum_contents_length_in_bytes;
	  ci_datum_contents_ptr = addr (based_ci.byte (datum_slot.offset_in_bytes + datum_header_length_in_bytes + 1));
	  ci_datum_contents_ptr -> based_byte_string = p_datum_contents_ptr -> based_byte_string;

	  if datum_header_length_in_bytes > 0
	  then
	     do;
	        based_byte_string_length = datum_header_length_in_bytes;
	        ci_datum_header_ptr = addr (based_ci.byte (datum_slot.offset_in_bytes + 1));
	        ci_datum_header_ptr -> based_byte_string = datum_header_ptr -> based_byte_string;
	     end;

         end COPY_INTO_BUFFERED_CI;
      else
COPY_INTO_FILE_CI:
         do;

	  element_id_string = p_element_id;

	  ci_parts_ptr = addr (my_ci_parts);
	  ci_parts.number_of_parts = 3;

	  ci_parts.part (DATUM_SLOT_PART_IDX).offset_in_bytes =
	       BYTES_PER_WORD * ((element_id.index - 1) + size (bci_header));
	  ci_parts.part (DATUM_SLOT_PART_IDX).length_in_bytes = BYTES_PER_WORD;
	  ci_parts.part (DATUM_SLOT_PART_IDX).local_ptr = datum_slot_ptr;

	  ci_parts.part (HEADER_PART_IDX).offset_in_bytes = 0;
	  ci_parts.part (HEADER_PART_IDX).length_in_bytes = size (bci_header) * BYTES_PER_WORD;
	  ci_parts.part (HEADER_PART_IDX).local_ptr = bci_header_ptr;

	  ci_parts.part (DATUM_CONTENTS_PART_IDX).offset_in_bytes =
	       datum_slot.offset_in_bytes + datum_header_length_in_bytes;
	  ci_parts.part (DATUM_CONTENTS_PART_IDX).length_in_bytes = datum_contents_length_in_bytes;
	  ci_parts.part (DATUM_CONTENTS_PART_IDX).local_ptr = p_datum_contents_ptr;

	  if datum_slot.is_continued
	  then
	     do;
	        ci_parts.number_of_parts = 4;

	        ci_parts.part (DATUM_HEADER_PART_IDX).offset_in_bytes = datum_slot.offset_in_bytes;
	        ci_parts.part (DATUM_HEADER_PART_IDX).length_in_bytes = datum_header_length_in_bytes;
	        ci_parts.part (DATUM_HEADER_PART_IDX).local_ptr = datum_header_ptr;

	     end;

	  call file_manager_$put (p_file_opening_id, (element_id.control_interval_id), ci_parts_ptr, p_code);

         end COPY_INTO_FILE_CI;

      return;

%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_element_id;
%page;
%include dm_ci_parts;
%page;
%include dm_ci_lengths;

   end cm_put_datum_in_pool;
