/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

          This module implements collection_manager_$get_id (cm_get_id$id)
     cm_get_id$ptr is an internal interface.

          This routine returns the identifier of an element relative to another
     element. The desired element is p_position_change elements away from the
     "start" element in a forward direction if positive, or if negative, is
     abs (p_position_change) away in a backward direction.  The element from
     which to start is determined as follows: (1) if p_is_absolute_position
     is on, then (1a) if p_position_change is positive (position forward),
     the start is the imaginary element which precedes the first element of the
     collection; else (1b) if p_position_change is negative (position backward)
     the start is the imaginary element which succeeds the last element of the
     collection; else (1c) if p_position_change is equal to 0 the error
     dm_error_$beginning_of_collection is returned; (2) if 
     p_is_absolute_position is off, the start is the element specified by
     p_input_element_id_string. 

          There are two entries into this routine, id and ptr.
     The id entry point inplements collection_manager_$get_id.
     The id entry point works as described above.  In the course of looking
     through control intervals, it gets a pointer to each control interval 
     of interest.
     The ptr entry point is an internal interface.
     The ptr entry point works the same, but allows the caller to supply the 
     pointer to the first control interval to be examined.  The caller expects
     the pointer to the last control interval examined.  p_input_ci_ptr and
     p_return_ci_ptr are sed for these purposes.  The supplied pointer and the
     returned pointer, which may be the same, must not be terminated.  All 
     other control interval pointers used must be terminated.     

*/

/* HISTORY:

Written by Matthew Pierret, 09/03/82.
Modified:
11/05/82 by Matthew Pierret:  Added $info_* entries.  Made to get opening
            info (cm_info) by calling cm_opening_info$full_get ($full_get
            gets the storage record)
11/22/82 by Lindsey Spratt:  Fixed the $element entry to do a
	  cm_opening_info$full_get.  Fixed $info_element entry to set
	  cm_info_ptr from p_cm_info_ptr.
01/20/83 by Lindsey Spratt:  Fixed to check for the fetch of the first ci to
	  return ci 0 when not looking in the header collection (always the
	  owner of ci 0) as an indication of the current collection being
	  empty.
01/27/83 by Matthew Pierret: Changed to use cm_opening_info$get_storage_record.
            Updraded to CM_INFO_VERSION_2. Added check to see if control
            interval thread is consistent.
02/07/83 by Matthew Pierret: Changed to accept p_bci_header_ptr and
            p_slot_table_ptr so that this routine can be used by cm_ modules
            that have already gotten the two structures. This will help
            centralize all positioning in cm_.
05/04/83 by Matthew Pierret:  Changed to use dm_error_$programming_error
            instead of $col_is_inconsistent.
10/13/83 by Lindsey L. Spratt:  Renamed the header and header_return_slot
            entries to be info_header and info_header_return_slot.  Added new
            header and header_return_slot entries which expect file_opening_id
            and collection_id instead of a cm_info_ptr, then do a
            cm_opening_info$get themselves.  Changed handling of error codes
            to use the "call ERROR_RETURN (code);" technique.  Changed naming
            of variables in internal procedures to use a prefix unique to that
            internal procedure.
02/06/84 by Matthew Pierret:  Removed all entries except $id and added $ptr.
            All collection_manager_ modules which use cm_get_id now use the
            $ptr entry.  This entry can receive as input and return as output
            a pointer to a control interval, as returned by
            file_manager_$get_ci_ptr.  Use of this pointer allows direct
            access to look at file control intervals.  This module was
            substantially rewritten to get ci_ptr's to access control
            intervals.
02/10/84 by Matthew Pierret:  Changed to initialize its return element id
            string and to check for infinite looping.
03/16/84 by Matthew Pierret:  Changed to special-case the error code
            dm_error_$ci_not_allocated when returned from fm_$get_ci_ptr.
05/21/84 by Matthew Pierret:  Renamed include fle dm_cm_cism_info to
            dm_cism_info.
07/17/84 by Matthew Pierret:  Changed to return dm_error_$ci_not_in_collection
            instead of calling sub_err_ if there is a mismatch on the first
            control interval seen.
10/02/84 by Matthew Pierret:  Changed CHECK_CI_LAYOUT to return 
            dm_error_$unimplemented_ci_version.  Modified DESCRIPTION to
            correctly reflect the workings of this module.
            Moved include files from internal procedures to main procedure,
            making refernces to the structures in those procedures by
            explicit pointer reference.
*/

/* format: style2,ind3,ll80,^indprocbody */
%page;
cm_get_id$id:
   procedure (p_file_opening_id, p_collection_id, p_input_element_id_string,
        p_position_change, p_is_absolute_position, p_return_element_id_string,
        p_code);



/* START OF DECLARATIONS */
/* Parameter */

   dcl	 p_file_opening_id	    bit (36) aligned parameter;
   dcl	 p_collection_id	    bit (36) aligned parameter;
   dcl	 p_input_element_id_string
			    bit (36) aligned parameter;
   dcl	 p_return_element_id_string
			    bit (36) aligned parameter;
   dcl	 p_position_change	    fixed bin (17) parameter;
   dcl	 p_is_absolute_position bit (1) aligned parameter;
   dcl	 p_input_ci_ptr	    ptr parameter;
   dcl	 p_return_ci_ptr	    ptr parameter;
   dcl	 p_code		    fixed bin (35) parameter;

/* Automatic */

   dcl	 (ci_idx, current_slot_index, position_change)
			    fixed bin (17);
   dcl	 (current_ci_id, most_recent_ci_id)
			    fixed bin (24) uns init (0);

   dcl	 (file_opening_id, collection_id, input_element_id_string,
	 return_element_id_string)
			    bit (36) aligned init ("0"b);

   dcl	 (is_absolute_position, terminate_last_ci_ptr)
			    bit (1) aligned init ("0"b);

   dcl	 (ci_ptr, input_ci_ptr) ptr init (null);

/* Based */

   dcl	 1 input_element_id	    aligned
			    based (addr (input_element_id_string))
			    like element_id;

/* Builtin */

   dcl	 (addr, max, min, null) builtin;

/* Constant */

   dcl	 myname		    init ("cm_get_id") char (32) varying
			    internal static options (constant);
   dcl	 LIMIT_TO_STOP_INFINITE_LOOPING
			    init (1e6) fixed bin (35) internal
			    static options (constant);
   dcl	 (
	 LOWEST_SLOT_INDEX	    init (0),
	 HIGHEST_SLOT_INDEX	    init (1e4)
	 )		    fixed bin (17) internal static
			    options (constant);
   dcl	 (
	 IS_FIRST		    init ("1"b),
	 NOT_FIRST	    init ("0"b)
	 )		    bit (1) aligned internal static
			    options (constant);

/* Entry */

   dcl	 sub_err_		    entry () options (variable);

/* External */

   dcl	 (
	 dm_error_$beginning_of_collection,
	 dm_error_$ci_not_allocated,
	 dm_error_$ci_not_in_collection,
	 dm_error_$end_of_collection,
	 dm_error_$no_element,
	 dm_error_$programming_error,
	 dm_error_$unimplemented_cism,
	 dm_error_$unimplemented_ci_version
	 )		    fixed bin (35) ext static;
   dcl	 error_table_$unimplemented_version
			    ext fixed bin (35);

/* END OF DECLARATIONS */

/*
id:
   entry (p_file_opening_id, p_collection_id, p_input_element_id_string,
        p_position_change, p_is_absolute_position, p_return_element_id_string,
        p_code);
*/

   input_ci_ptr = null;
   terminate_last_ci_ptr = "1"b;

   goto JOIN;

ptr:
   entry (p_file_opening_id, p_collection_id, p_input_element_id_string,
        p_position_change, p_is_absolute_position, p_input_ci_ptr,
        p_return_ci_ptr, p_return_element_id_string, p_code);

   p_return_ci_ptr = null;
   terminate_last_ci_ptr = "0"b;
   input_ci_ptr = p_input_ci_ptr;

   goto JOIN;
%page;
/* format: equalind25 */
JOIN:
   p_code		        = 0;
   p_return_element_id_string
		        = "0"b;
   file_opening_id	        = p_file_opening_id;
   collection_id	        = p_collection_id;
   is_absolute_position     = p_is_absolute_position;
   input_element_id_string  = p_input_element_id_string;
   position_change	        = p_position_change;		/* format: equalind0 */

   if is_absolute_position
   then call SET_DEFAULT_POSITION (file_opening_id, collection_id,
	   position_change, current_ci_id, current_slot_index);
   else
      do;
         current_ci_id = input_element_id.control_interval_id;
         current_slot_index = input_element_id.index;
      end;

LOOP_THROUGH_CONTROL_INTERVALS:
   do ci_idx = 1 to LIMIT_TO_STOP_INFINITE_LOOPING while (position_change ^= 0);

      call GET_CI_PTR (file_opening_id, collection_id, current_ci_id,
	 input_ci_ptr, ci_ptr);

      if most_recent_ci_id ^= 0
      then if position_change > 0
	      & ci_ptr -> bci_header.previous_control_interval
	      ^= most_recent_ci_id
	 then call sub_err_ (dm_error_$programming_error, myname,
		 ACTION_CANT_RESTART, null, 0,
		 "^/^a ^d ^a ^d;^/^a ^d ^a ^d.", "Control interval",
		 most_recent_ci_id, "has a next control interval of",
		 current_ci_id, "control interval", current_ci_id,
		 "has a previous control interval of",
		 ci_ptr -> bci_header.previous_control_interval);
	 else if position_change < 0
		 & ci_ptr -> bci_header.next_control_interval
		 ^= most_recent_ci_id
	 then call sub_err_ (dm_error_$programming_error, myname,
		 ACTION_CANT_RESTART, null, 0,
		 "^/^a ^d ^a ^d;^/^a ^d ^a ^d.", "Control interval",
		 most_recent_ci_id, current_ci_id,
		 "has a previous control interval of", "control interval",
		 current_ci_id, "has a next control interval of",
		 ci_ptr -> bci_header.next_control_interval);

      call POSITION_THROUGH_CI (ci_ptr, position_change, current_slot_index);

      if position_change ^= 0
      then
         do;
	  most_recent_ci_id = current_ci_id;

	  if position_change > 0
	  then if ci_ptr -> bci_header.next_control_interval = 0
	       then call ERROR_RETURN (dm_error_$end_of_collection);
	       else
		do;
		   current_ci_id =
		        ci_ptr -> bci_header.next_control_interval;
		   current_slot_index = LOWEST_SLOT_INDEX;
		end;				/* position_change is necessarily < 0 */
	  else if ci_ptr -> bci_header.previous_control_interval = 0
	  then call ERROR_RETURN (dm_error_$beginning_of_collection);
	  else
	     do;
	        current_ci_id =
		   ci_ptr -> bci_header.previous_control_interval;
	        current_slot_index = HIGHEST_SLOT_INDEX;
	     end;

         end;


   end LOOP_THROUGH_CONTROL_INTERVALS;

   if position_change ^= 0
   then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART,
	   null, 0, "^/^a^/ ^d elements to^/position past.",
	   "This module was looping without bound loop while attempting to",
	   "position among the elements.  There are still", position_change);

   element_id.control_interval_id = current_ci_id;
   element_id.index = current_slot_index;

   p_return_element_id_string = element_id_string;
   p_code = 0;
   if terminate_last_ci_ptr
   then call TERMINATE_CI_PTR (ci_ptr);
   else p_return_ci_ptr = ci_ptr;

MAIN_RETURN:
   return;
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
   dcl	 cv_p_received_version  char (8) aligned;
   dcl	 cv_p_expected_version  char (8) aligned;
   dcl	 cv_p_structure_name    char (*);

   if cv_p_received_version ^= cv_p_expected_version
   then call sub_err_ (error_table_$unimplemented_version, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected version ^a of the ^a structure.
Received version ^a instead.", cv_p_expected_version, cv_p_structure_name,
	   cv_p_received_version);

   end CHECK_VERSION;



CHECK_CI_LAYOUT:
   proc (ccl_p_ci_layout);
   dcl	 ccl_p_ci_layout	    char (4) aligned;

   if ccl_p_ci_layout ^= BASIC_CI_LAYOUT_1
   then call sub_err_ (dm_error_$unimplemented_ci_version, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected a version ^a control interval. Received version ^a instead."
	   , BASIC_CI_LAYOUT_1, ccl_p_ci_layout);

   end CHECK_CI_LAYOUT;

%page;

FINISH:
   proc ();

   if ci_ptr ^= input_ci_ptr
   then call TERMINATE_CI_PTR (ci_ptr);

   end FINISH;

ERROR_RETURN:
   proc (er_p_code);
   dcl	 er_p_code	    fixed bin (35) parameter;

   call FINISH;
   p_code = er_p_code;
   go to MAIN_RETURN;

   end ERROR_RETURN;

%page;
POSITION_THROUGH_CI:
   proc (ptc_p_ci_ptr, ptc_p_position_change, ptc_p_current_slot_index);

   dcl	 ptc_p_ci_ptr	    ptr;
   dcl	 (ptc_p_position_change, ptc_p_current_slot_index)
			    fixed bin (17);
   dcl	 ptc_slot_idx	    fixed bin (17);

   if ptc_p_position_change > 0
   then
LOOP_FORWARD_THROUGH_SLOTS:
      do ptc_slot_idx = max (1, ptc_p_current_slot_index + 1)
	 to ptc_p_ci_ptr -> basic_control_interval.header.number_of_datums
	 while (ptc_p_position_change > 0);
         if ^(ptc_p_ci_ptr
	    -> basic_control_interval.datum_position_table (ptc_slot_idx)
	    .flags.is_continuation
	    | ptc_p_ci_ptr
	    -> basic_control_interval.datum_position_table (ptc_slot_idx)
	    .offset_in_bytes = FREE_SLOT)
         then ptc_p_position_change = ptc_p_position_change - 1;

         ptc_p_current_slot_index = ptc_slot_idx;
      end LOOP_FORWARD_THROUGH_SLOTS;
   else
LOOP_BACKWARD_THROUGH_SLOTS:
      do ptc_slot_idx =
	 min (ptc_p_current_slot_index - 1,
	 ptc_p_ci_ptr -> basic_control_interval.header.number_of_datums)
	 to 1 by -1 while (ptc_p_position_change < 0);
         if ^(ptc_p_ci_ptr
	    -> basic_control_interval.datum_position_table (ptc_slot_idx)
	    .flags.is_continuation
	    | ptc_p_ci_ptr
	    -> basic_control_interval.datum_position_table (ptc_slot_idx)
	    .offset_in_bytes = FREE_SLOT)
         then ptc_p_position_change = ptc_p_position_change + 1;

         ptc_p_current_slot_index = ptc_slot_idx;
      end LOOP_BACKWARD_THROUGH_SLOTS;

   return;

   end POSITION_THROUGH_CI;
%page;
GET_CI_PTR:
   proc (gcp_p_file_opening_id, gcp_p_collection_id, gcp_p_ci_id,
        gcp_p_input_ci_ptr, gcp_p_ci_ptr);

   dcl	 gcp_p_file_opening_id  bit (36) aligned;
   dcl	 gcp_p_collection_id    bit (36) aligned;
   dcl	 gcp_p_ci_id	    fixed bin (24) unsigned;
   dcl	 gcp_p_input_ci_ptr	    ptr;
   dcl	 gcp_p_ci_ptr	    ptr;
   dcl	 gcp_this_is_first_look_at_ci
			    bit (1) aligned;
   dcl	 gcp_code		    fixed bin (35);


   if gcp_p_ci_ptr = null
   then
      do;
         gcp_this_is_first_look_at_ci = IS_FIRST;
         if gcp_p_input_ci_ptr ^= null
         then
	  do;
	     gcp_p_ci_ptr = gcp_p_input_ci_ptr;
	  end;
         else
	  do;
	     call REALLY_GET_CI_PTR (IS_FIRST);
	  end;
      end;
   else
      do;
         gcp_this_is_first_look_at_ci = NOT_FIRST;
         if gcp_p_input_ci_ptr ^= gcp_p_ci_ptr
         then
	  do;
	     call TERMINATE_CI_PTR (gcp_p_ci_ptr);
	  end;
         call REALLY_GET_CI_PTR (NOT_FIRST);
      end;

   call CHECK_CI_LAYOUT (gcp_p_ci_ptr -> bci_header.layout_type);

   if gcp_p_ci_ptr -> bci_header.collection_id ^= gcp_p_collection_id
   then
      do;
         if gcp_this_is_first_look_at_ci
         then
	  do;
	     call ERROR_RETURN (dm_error_$ci_not_in_collection);
	  end;
         else
	  do;
	     call sub_err_ (dm_error_$programming_error, myname,
		ACTION_CANT_RESTART, null, 0,
		"^/Control interval ^d is in collection ^3bo but was expected to^/be in collection ^3bo."
		, gcp_p_ci_id, gcp_p_ci_ptr -> bci_header.collection_id,
		gcp_p_collection_id);
	  end;
      end;

   return;

REALLY_GET_CI_PTR:
   proc (rgcp_p_is_first);

   dcl	 rgcp_p_is_first	    bit (1) aligned;
   dcl	 file_manager_$get_ci_ptr
			    entry (bit (36) aligned, fixed bin (27), ptr,
			    fixed bin (35));

   call file_manager_$get_ci_ptr (gcp_p_file_opening_id, (gcp_p_ci_id),
        gcp_p_ci_ptr, gcp_code);
   if gcp_code ^= 0
   then if gcp_code ^= dm_error_$ci_not_allocated
        then call ERROR_RETURN (gcp_code);
        else if rgcp_p_is_first
        then call ERROR_RETURN (dm_error_$no_element);
        else call sub_err_ (gcp_code, myname, ACTION_CANT_RESTART, null, 0,
	        "^/Control interval ^d was expected to be ^[next^;previous^] from^/control interval ^d."
	        , gcp_p_ci_id, (position_change > 0), most_recent_ci_id);

   end REALLY_GET_CI_PTR;

   end GET_CI_PTR;
%page;
TERMINATE_CI_PTR:
   proc (tcp_p_ci_ptr);

   dcl	 tcp_p_ci_ptr	    ptr;

   return;

   end TERMINATE_CI_PTR;
%page;
SET_DEFAULT_POSITION:
   proc (sdp_p_file_opening_id, sdp_p_collection_id, sdp_p_position_change,
        sdp_p_ci_id, sdp_p_slot_index);

   dcl	 (sdp_p_file_opening_id, sdp_p_collection_id)
			    bit (36) aligned;
   dcl	 sdp_p_position_change  fixed bin (17);
   dcl	 sdp_p_ci_id	    fixed bin (24) unsigned;
   dcl	 sdp_p_slot_index	    fixed bin (17);
   dcl	 sdp_code		    fixed bin (35);
   dcl	 sdp_cm_info_ptr	    ptr;

   call cm_opening_info$full_get (sdp_p_file_opening_id, sdp_p_collection_id,
        sdp_cm_info_ptr, sdp_code);
   if sdp_code ^= 0
   then call ERROR_RETURN (sdp_code);

   call CHECK_VERSION (sdp_cm_info_ptr -> cm_info.version, CM_INFO_VERSION_2,
        "cm_info");

   call CHECK_VERSION (sdp_cm_info_ptr -> cm_info.header_ptr
        -> collection_header.version, COLLECTION_HEADER_VERSION_2,
        "collection_header");

   if sdp_cm_info_ptr -> cm_info.header_ptr
        -> collection_header.control_interval_storage_method
        ^= UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD
   then call sub_err_ (dm_error_$unimplemented_cism, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected control interval storage method ^d; received ^d.",
	   UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD,
	   sdp_cm_info_ptr -> cm_info.header_ptr
	   -> collection_header.control_interval_storage_method);


   if sdp_p_position_change > 0
   then
      do;
         sdp_p_slot_index = LOWEST_SLOT_INDEX;
         sdp_p_ci_id = GET_FIRST_CI ();
         if sdp_p_ci_id = 0 & sdp_p_collection_id ^= HEADER_COLLECTION_ID
         then call ERROR_RETURN (dm_error_$no_element);
      end;
   else if sdp_p_position_change < 0
   then
      do;
         sdp_p_slot_index = HIGHEST_SLOT_INDEX;
         sdp_p_ci_id = GET_LAST_CI ();
         if sdp_p_ci_id = 0 & sdp_p_collection_id ^= HEADER_COLLECTION_ID
         then call ERROR_RETURN (dm_error_$no_element);
      end;
   else call ERROR_RETURN (dm_error_$beginning_of_collection);

   return;


GET_FIRST_CI:
   proc () returns (fixed bin (24) unsigned);

   return (sdp_cm_info_ptr -> cm_info.storage_record_ptr
        -> unblocked_storage_record.first_control_interval);

   end GET_FIRST_CI;


GET_LAST_CI:
   proc () returns (fixed bin (24) unsigned);

   return (sdp_cm_info_ptr -> cm_info.storage_record_ptr
        -> unblocked_storage_record.last_control_interval);

   end GET_LAST_CI;

   end SET_DEFAULT_POSITION;
%page;
%include dm_element_id;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_cm_storage_record;
%page;
%include dm_cm_info;
%page;
%include dm_cm_collection_header;
%page;
%include dm_cism_info;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

%include dm_hdr_collection_id;
   end cm_get_id$id;
