/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
          Modifies data in a bit string formatted according to the
     supplied field_table.  Fields to be modified are specified by a
     general_typed_vector and those field values are converted from the
     general_typed_vector to a bit string representation.  Un-modified
     field values are copied from the input bit string.  If only fixed fields
     are modified the modification is done in place, i.e., p_output_string_ptr
     and p_input_string_ptr are the same.  Otherwise, the output bit string is
     placed in the caller supplied string_buffer if it will fit.  If it doesn't
     fit, then the bit string is allocated in the caller-supplied work_area.
     If it doesn't fit there (or no work_area was supplied), then and an error
     is returned.
*/

/* HISTORY:
Written by Matthew Pierret, 10/04/82.
  (Mostly copied from dmu_cv_vector_to_string, written by 
   Lindsey Spratt, 04/02/82.)
Modified:
12/09/82 by Lindsey Spratt:  Changed to always use dim_idx when  referring to
	  the general_typed_vector.
12/13/82 by Lindsey Spratt:   Fixed to copy old varying fields correctly.
	  Changed setting of current_length_in_bits from old string to pick
	  to use unspec and copy instead of bin.
01/04/83 by Lindsey Spratt:  Changed to support arbitrarily long strings.
03/03/83 by Lindsey Spratt:  Fixed to only set p_output_buffer_length > 0 when
	  a new buffer is allocated, otherwise it's = 0.
03/14/83 by Lindsey Spratt:  Fixed to initialize p_output_string_length to the
	  fixed portion's length for the varying case, then to initialize
	  the output_string to "0"b, if the p_output_string_length is <= the
	  output_buffer_length.  This initialization to "0"b may be
	  superfluous.
05/12/83 by Lindsey L. Spratt:  Fixed to set the initial new-buffer allocation
            (done when the input buffer is too small) to be as much as twice
            as large as the length of the fixed portion of the data string.
            Removed the code which initialized the value of the buffer, since
            all of the buffer should be explicitly set in the course of the
            modify.
05/03/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3 and to use
            dm_error_$bad_vector_type.
11/08/84 by Lindsey L. Spratt:  Made minor format fixes.  Changed
            CHECK_VERSION_CHAR to have char(8) aligned version parameters.
            Removed unused/dcl'ed variables, added dcls for
            referenced/undcl'ed tokens.
*/

/* format: style2,ind3 */
dmu_general_modify_string:
general_modify_string:
   proc (p_field_table_ptr, p_typed_vector_ptr, p_input_string_ptr, p_input_string_length, p_string_buffer_ptr,
        p_string_buffer_length, p_work_area_ptr, p_output_string_ptr, p_output_string_length, p_output_buffer_length,
        p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_field_table_ptr      ptr;
      dcl	    p_typed_vector_ptr     ptr;
      dcl	    p_string_buffer_ptr    ptr;
      dcl	    p_string_buffer_length fixed bin (35);
      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_input_string_ptr     ptr;
      dcl	    p_input_string_length  fixed bin (35);
      dcl	    p_output_string_ptr    ptr;
      dcl	    p_output_string_length fixed bin (35);
      dcl	    p_output_buffer_length fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    current_length_in_bits fixed bin (35);
      dcl	    current_varying_field_bit_offset
			       fixed bin (35);
      dcl	    dim_idx	       fixed bin (17);
      dcl	    field_idx	       fixed bin (17);
      dcl	    old_length_in_bits     fixed bin (35);
      dcl	    old_current_varying_field_bit_offset
			       fixed bin (35);
      dcl	    (output_buffer_ptr, old_output_buffer_ptr)
			       ptr init (null);
      dcl	    (output_buffer_length, old_output_buffer_length)
			       fixed bin (35) init (0);
      dcl	    work_area_ptr	       ptr init (null);

/* Based */

      dcl	    based_real_fix_bin_1u  fixed bin (35) unaligned based;
      dcl	    based_bit_string       bit (sys_info$max_seg_size * 36) based;
      dcl	    output_buffer	       based (output_buffer_ptr) bit (output_buffer_length);
      dcl	    work_area	       area based (work_area_ptr);

/* Builtin */

      dcl	    (bin, copy, hbound, min, null, substr, unspec)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    (
	    BITS_PER_WORD	       init (36),
	    BITS_PER_BYTE	       init (9),
	    MAXIMUM_BUFFER_LENGTH_IN_BITS
			       init (36 /* number of bits per word */
			       *
			       261084
			       /* (number of pages per segment (255) */
			       /* * number of words per page(1024)) */
			       /* -  number of words of area-package overhead (36) */)
	    )		       fixed bin (35) int static options (constant);
      dcl	    myname	       init ("dmu_general_modify_string") char (32) varying int static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;

      dcl	    (
	    error_table_$bad_arg,
	    error_table_$unimplemented_version,
	    dm_error_$bad_vector_type,
	    dm_error_$short_buffer,
	    dm_error_$programming_error
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      field_table_ptr = p_field_table_ptr;
      call CHECK_VERSION_CHAR (field_table.version, FIELD_TABLE_VERSION_3, "field_table");

      general_typed_vector_ptr = p_typed_vector_ptr;

      if general_typed_vector.type ^= GENERAL_TYPED_VECTOR_TYPE
      then call sub_err_ (dm_error_$bad_vector_type, myname, "h", null, 0,
	      "Only typed_vector structures of type ^d are accepted by this routine.^/          Received type ^d.",
	      GENERAL_TYPED_VECTOR_TYPE, general_typed_vector.type);

      work_area_ptr = p_work_area_ptr;

      if p_string_buffer_length <= 0 & p_string_buffer_ptr ^= null
      then call sub_err_ (error_table_$bad_arg, myname, "h", null, 0,
	      "^/The length of the string_buffer must be greater than 0.  The length
provided was ^d.", p_string_buffer_length);

      current_varying_field_bit_offset, old_current_varying_field_bit_offset =
	 field_table.location_of_first_varying_field;

      p_output_buffer_length = 0;

      if ELEMENT_IS_FIXED ()
      then
         do;
	  p_output_string_ptr, output_buffer_ptr = p_input_string_ptr;
	  p_output_string_length, output_buffer_length = p_input_string_length;
         end;
      else
         do;
	  output_buffer_ptr, p_output_string_ptr = p_string_buffer_ptr;
	  output_buffer_length = p_string_buffer_length;
	  p_output_string_length = field_table.location_of_first_varying_field - 1;
         end;

      if p_output_string_length > output_buffer_length
      then if work_area_ptr = null
	 then
	    do;
	       p_code = dm_error_$short_buffer;
	       return;
	    end;
	 else
	    do;
	       old_output_buffer_length = output_buffer_length;
	       old_output_buffer_ptr = output_buffer_ptr;

	       output_buffer_length, p_output_buffer_length =
		  min (2 * p_output_string_length, MAXIMUM_BUFFER_LENGTH_IN_BITS);
	       alloc output_buffer in (work_area);
	       p_output_string_ptr = output_buffer_ptr;
	    end;

      if p_output_string_ptr = p_input_string_ptr
      then
MODIFY_FIXED_ELEMENT_IN_PLACE:
         do;

	  do dim_idx = 1 to hbound (general_typed_vector.dimension, 1);

	     substr (p_output_string_ptr -> based_bit_string,
		field_table.field (general_typed_vector.dimension (dim_idx).identifier).location,
		field_table.field (general_typed_vector.dimension (dim_idx).identifier).length_in_bits) =
		substr (general_typed_vector.dimension (dim_idx).value_ptr -> based_bit_string, 1,
		field_table.field (general_typed_vector.dimension (dim_idx).identifier).length_in_bits);

	  end;

	  p_output_string_length = p_input_string_length;

         end MODIFY_FIXED_ELEMENT_IN_PLACE;

      else
MERGE_OLD_STRING_AND_VECTOR_VALUES:
         do;
FIELD_LOOP:
	  do field_idx = 1 to hbound (field_table.field, 1);

	     do dim_idx = 1 to hbound (general_typed_vector.dimension, 1)
		while (general_typed_vector.dimension (dim_idx).identifier ^= field_idx);
	     end;
	     if dim_idx <= hbound (general_typed_vector.dimension, 1)
	     then
CV_NEW_FIELD:
	        do;

		 if field_table.varying_field_map (field_idx).varying_field_index > 0
		 then
VARYING_FIELD:
		    do;

		       substr (p_output_string_ptr -> based_bit_string, field_table.field (field_idx).location,
			  field_table.field (field_idx).length_in_bits) =
			  substr (general_typed_vector.dimension (dim_idx).value_ptr -> based_bit_string,
			  BITS_PER_WORD - field_table.field (field_idx).length_in_bits + 1,
			  field_table.field (field_idx).length_in_bits);

		       if field_table.field (field_idx).length_is_in_characters
		       then
			do;
			   current_length_in_bits =
			        general_typed_vector.dimension (dim_idx).value_ptr -> based_real_fix_bin_1u
			        * BITS_PER_BYTE;

			   old_length_in_bits =
			        bin (
			        substr (p_input_string_ptr -> based_bit_string,
			        field_table.field (field_idx).location,
			        field_table.field (field_idx).length_in_bits)) * BITS_PER_BYTE;
			end;
		       else
			do;

			   current_length_in_bits =
			        general_typed_vector.dimension (dim_idx).value_ptr -> based_real_fix_bin_1u;
			   old_length_in_bits =
			        bin (
			        substr (p_input_string_ptr -> based_bit_string,
			        field_table.field (field_idx).location,
			        field_table.field (field_idx).length_in_bits));
			end;

		       if current_varying_field_bit_offset + current_length_in_bits - 1 > output_buffer_length
		       then if work_area_ptr = null
			  then
			     do;
			        p_code = dm_error_$short_buffer;
			        return;
			     end;
			  else
			     do;
			        old_output_buffer_length = output_buffer_length;
			        old_output_buffer_ptr = output_buffer_ptr;

			        output_buffer_length, p_output_buffer_length = 2 * output_buffer_length;
			        alloc output_buffer in (work_area);
			        p_output_string_ptr = output_buffer_ptr;

			        substr (output_buffer, 1, current_varying_field_bit_offset) =
				   substr (old_output_buffer_ptr -> output_buffer, 1,
				   current_varying_field_bit_offset);

			        if old_output_buffer_ptr ^= p_string_buffer_ptr & old_output_buffer_ptr ^= null
			        then
				 do;
				    output_buffer_length = old_output_buffer_length;
				    free old_output_buffer_ptr -> output_buffer in (work_area);
				    output_buffer_length = p_output_buffer_length;
				 end;

			     end;

		       substr (p_output_string_ptr -> based_bit_string, current_varying_field_bit_offset,
			  current_length_in_bits) =
			  substr (general_typed_vector.dimension (dim_idx).value_ptr -> based_bit_string,
			  BITS_PER_WORD + 1, current_length_in_bits);

		       current_varying_field_bit_offset = current_varying_field_bit_offset + current_length_in_bits;
		       old_current_varying_field_bit_offset =
			  old_current_varying_field_bit_offset + old_length_in_bits;

		    end VARYING_FIELD;
		 else
		    do;
		       substr (p_output_string_ptr -> based_bit_string, field_table.field (field_idx).location,
			  field_table.field (field_idx).length_in_bits) =
			  substr (general_typed_vector.dimension (dim_idx).value_ptr -> based_bit_string, 1,
			  field_table.field (field_idx).length_in_bits);
		    end;
	        end CV_NEW_FIELD;
	     else
COPY_OLD_FIELD:
	        do;

		 substr (p_output_string_ptr -> based_bit_string, field_table.field (field_idx).location,
		      field_table.field (field_idx).length_in_bits) =
		      substr (p_input_string_ptr -> based_bit_string, field_table.field (field_idx).location,
		      field_table.field (field_idx).length_in_bits);

		 if field_table.varying_field_map (field_idx).varying_field_index > 0
		 then
		    do;

		       unspec (current_length_in_bits) =
			  copy ("0"b, BITS_PER_WORD - field_table.field (field_idx).length_in_bits)
			  ||
			  substr (p_output_string_ptr -> based_bit_string, field_table.field (field_idx).location,
			  field_table.field (field_idx).length_in_bits);

		       if field_table.field (field_idx).length_is_in_characters
		       then current_length_in_bits = current_length_in_bits * BITS_PER_BYTE;

		       if current_length_in_bits + current_varying_field_bit_offset - 1 > p_string_buffer_length
		       then
			do;
			   p_code = dm_error_$short_buffer;
			   return;
			end;

		       substr (p_output_string_ptr -> based_bit_string, current_varying_field_bit_offset,
			  current_length_in_bits) =
			  substr (p_input_string_ptr -> based_bit_string, old_current_varying_field_bit_offset,
			  current_length_in_bits);

		       current_varying_field_bit_offset = current_varying_field_bit_offset + current_length_in_bits;
		       old_current_varying_field_bit_offset =
			  old_current_varying_field_bit_offset + current_length_in_bits;

		    end;
	        end COPY_OLD_FIELD;
	  end FIELD_LOOP;

	  p_output_string_length = current_varying_field_bit_offset - 1;

         end MERGE_OLD_STRING_AND_VECTOR_VALUES;

      if p_output_buffer_length > 0
	 & (p_output_string_ptr = p_string_buffer_ptr | p_output_string_ptr = p_input_string_ptr)
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	      "^/There is an inconsistency in the return values of this module with respect 
to the output string buffer.");

      return;
%page;
ELEMENT_IS_FIXED:
   proc () returns (bit (1) aligned);

      dcl	    eif_dim_idx	       fixed bin;

      do eif_dim_idx = 1 to hbound (general_typed_vector.dimension, 1)
	 while (field_table.varying_field_map (general_typed_vector.dimension (eif_dim_idx).identifier)
	 .varying_field_index <= 0);
      end;

      if eif_dim_idx > hbound (general_typed_vector.dimension, 1)
      then return ("1"b);
      else return ("0"b);

   end ELEMENT_IS_FIXED;
%page;
CHECK_VERSION_CHAR:
   proc (p_expected_version, p_received_version, p_structure_name);
      dcl	    (p_expected_version, p_received_version)
			       char (8) aligned parameter;
      dcl	    p_structure_name       char (*) parameter;

      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION_CHAR;
%page;
%include std_descriptor_types;
%page;
%include vu_typed_vector;
%page;
%include dm_field_table;
%page;
%include sub_err_flags;
   end dmu_general_modify_string;
