/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-02-27,Pierret), approve(86-02-27,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Added must_be_zero field to my_ci_parts;
                                                   END HISTORY COMMENTS */


/* DESCRIPTION:

         This routine gets and validates the header (bci_header) of a
     specified control interval.  Four entries each provide this service in a
     slightly different manner.  The bci_header begins at the first word of
     the addressable portion of the control interval.  The caller supplies a
     pointer (p_bci_header_ptr) to a buffer in which to put the bci_header.
     The caller must also supply the opening id of the file
     (p_file_opening_id) in which the specified control interval resides.
     
          If called through teh $cm_get_bci_header or $exclusive entrypoints,
     number of the control interval is specified with the
     p_control_interval_number parameter.  If called through the $exclusive
     entrypoint, an exclusive lock is obtained on the control interval;
     otherwise a shared lock is obtained.
     
          If called through the $slot or $slot_exclusive entrypoints, the
     number of the control interval is specified as part of the p_element_id
     parameter (addr(p_element_id)->element_id.control_interval_id).  Also
     specified is the index into the slot table of an element in p_element_id
     (addr(p_element_id)->element_id.index).  The specified slot is returned,
     using the caller-supplied buffer at p_datum_slot_ptr.  If called through
     the $slot_exclusive entrypoint, an exclusive lock is obtained.
     
          Possible errors are those errors that can be encountered while doing
     a file_manager_$get, dm_error_$ci_not_allocated if the returned bci_header
     is all zeroes and dm_error_$misformatted_ci if the returned bci_header
     does not have a layout type of BASIC_CI_LAYOUT_1.
*/

/* HISTORY:

Written by Matthew Pierret, 07/21/82.
Modified:
10/20/82 by Matthew Pierret: Converted to use file_manager_.
01/26/83 by Matthew Pierret: Added $slot and $slot_exclusive entries,
            obsoleting cm_get_header_and_slot. Changed to return
            dm_error_$ci_not_allocated if bci_header is all zeroes.
10/01/84 by Matthew Pierret: Changed to use my_ci_parts instead of 
            automatic_cip_buffer (an array of fixed bin (71) elements) as
            the local storage for the ci_parts structure. my_ci_parts is
            able to change size as the ci_parts structure changes.
05/20/85 by S. Cox: Added must_be_zero field to my_ci_parts.
*/

/* format: style2,ind3 */

cm_get_bci_header:
   proc (p_file_opening_id, p_control_interval_number, p_bci_header_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned parameter;
      dcl	    p_control_interval_number
			       fixed bin (24) unsigned parameter;
      dcl	    p_bci_header_ptr       ptr parameter;
      dcl	    p_datum_slot_ptr       ptr parameter;
      dcl	    p_element_id	       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    (exclusive_get, get_slot)
			       bit (1) aligned;
      dcl	    1 my_ci_parts	       aligned,
	      2 number_of_parts    fixed bin init (-1),
	      2 must_be_zero       fixed bin init (0),
	      2 part	       (2) like ci_parts.part;
      dcl	    control_interval_number
			       fixed bin (24) unsigned;
      dcl	    slot_number	       fixed bin (12) unsigned;

/* Based */
/* Builtin */

      dcl	    (addr, null, size, unspec)
			       builtin;

/* Constant */

      dcl	    BYTES_PER_WORD	       init (4) fixed bin (17) int static options (constant);

/* Entry */

      dcl	    file_manager_$get      entry (bit (36) aligned, uns fixed bin (24), ptr, fixed bin (35));
      dcl	    file_manager_$get_exclusive
			       entry (bit (36) aligned, uns fixed bin (24), ptr, fixed bin (35));

/* External */

      dcl	    (
	    dm_error_$ci_not_allocated,
	    dm_error_$misformatted_ci
	    )		       ext fixed bin (35);

/* END OF DECLARATIONS */

      exclusive_get = "0"b;
      get_slot = "0"b;
      control_interval_number = p_control_interval_number;
      go to JOIN;


exclusive:
   entry (p_file_opening_id, p_control_interval_number, p_bci_header_ptr, p_code);

      exclusive_get = "1"b;
      get_slot = "0"b;
      control_interval_number = p_control_interval_number;
      go to JOIN;

slot_exclusive:
   entry (p_file_opening_id, p_bci_header_ptr, p_datum_slot_ptr, p_element_id, p_code);

      exclusive_get = "1"b;
      get_slot = "1"b;
      control_interval_number = addr (p_element_id) -> element_id.control_interval_id;
      slot_number = addr (p_element_id) -> element_id.index;
      go to JOIN;

slot:
   entry (p_file_opening_id, p_bci_header_ptr, p_datum_slot_ptr, p_element_id, p_code);

      exclusive_get = "0"b;
      get_slot = "1"b;
      control_interval_number = addr (p_element_id) -> element_id.control_interval_id;
      slot_number = addr (p_element_id) -> element_id.index;
      go to JOIN;


JOIN:
      p_code = 0;
      bci_header_ptr = p_bci_header_ptr;

      my_ci_parts.number_of_parts = 1;
      my_ci_parts.part (1).offset_in_bytes = 0;
      my_ci_parts.part (1).length_in_bytes = size (bci_header) * BYTES_PER_WORD;
      my_ci_parts.part (1).local_ptr = bci_header_ptr;

      if get_slot
      then if slot_number > 0 & p_datum_slot_ptr ^= null
	 then
	    do;
	       my_ci_parts.number_of_parts = 2;

	       my_ci_parts.part (2).offset_in_bytes = (size (bci_header) + slot_number - 1) * BYTES_PER_WORD;
	       my_ci_parts.part (2).length_in_bytes = BYTES_PER_WORD;
	       my_ci_parts.part (2).local_ptr = p_datum_slot_ptr;
	    end;

      if exclusive_get
      then call file_manager_$get_exclusive (p_file_opening_id, control_interval_number, addr (my_ci_parts), p_code);
      else call file_manager_$get (p_file_opening_id, control_interval_number, addr (my_ci_parts), p_code);
      if p_code = 0
      then if bci_header.layout_type ^= BASIC_CI_LAYOUT_1
	 then if unspec (bci_header) = "0"b
	      then p_code = dm_error_$ci_not_allocated;
	      else p_code = dm_error_$misformatted_ci;

      return;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_ci_parts;
%page;
%include dm_element_id;

   end cm_get_bci_header;
