/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION

   This module implements collection_manager_$get_portion 
   (cm_get_element_portion$cm_get_element_portion) and the not-yet-used
   collection_manager_$get_portion_exclusive (cm_get_element_portion$exclusive)

   This module gets an element or element portion located at (p_element_id
   + p_position elements). The data is returned in the buffer located at
   p_buffer_ptr (if it fits). p_buffer_length is the bit length of
   that caller-supplied buffer. If the buffer is too small to hold the data
   or the requested element is an overlength element, space is allocated in
   the provided area and the data is returned there.

   p_portion_beginning_index is a 1-origined index of the bit in the element
   which is the first bit of the portion.  At this time only portions at the
   head of the element can be retrieved (p_portion_beginning_index equal to 1).
   
   p_portion_length is the length in bits of the portion.  A value of -1
   indicates that the portion runs on to the end of the element.
*/

/* HISTORY:
Written by Matthew Pierret, 07/10/82.
Modified:
09/02/82 by Matthew Pierret:  To do forward and backward positioning.
10/19/82 by Matthew Pierret:  Added check for free datum slot.
            Changed to use dm_error_$no_element.
10/20/82 by Matthew Pierret:  Converted to use file_manager_.
11/10/82 by Matthew Pierret:  Added multi-datum support.
01/27/83 by Matthew Pierret:  Changed to initialize p_new_buffer_was_allocated
            to "0"b. Removed get_element_portion entry name.
            Fixed to use a local buffer when getting the first datum of a
            general multi-datum get. Changed to return error in the case where
            the supplied buffer is too small, no area was supplied and the
            element is multi-datum. Added more extensive error reporting.
            Added checks for consistency of each datum in multi-datum element.
            Changed to detect errors occurring on continuation datums which
            indicate internal inconsistency.
02/07/83 by Matthew Pierret: Changed to use cm_get_id$header_return_slot to
            position to an element.  Added the $info* entries.
04/29/83 by Matthew Pierret: Changed to use addcharno instead of addr(substr))
            and dm_error_$long_return_element isntead of $long_element.
05/05/83 by Matthew Pierret: Fixed use of addcharno. Was adding one char too
            many.
07/14/83 by Matthew Pierret: Added ERROR_RETURN routine. This routine is called
            whenever an error is encountered to set p_code and return from
            the main procedure. Changed to disallow specifying an
            elemenet_id.index equal to 0 without also specifying non-zero
            positioning.
10/14/83 by Lindsey L. Spratt:  CHanged to use the
            cm_get_id$info_header_return_slot entry instead of then
            cm_get_id$header_return_slot entry.
02/13/84 by Matthew Pierret:  Changed to use file_manager_$get_ci_ptr to get a
            pointer to a control interval and directly access the data in it.
            Also changed to use new entry cm_get_id$ptr, which makes use of
            this same mechansim for accessing control intervals.
03/15/84 by Lindsey L. Spratt:  Fixed MULTI_DATUM_GET to set the
            cd_datum_header.  (Matt and Lee B.)
03/16/84 by Matthew Pierret:  Changed to special case
            dm_error_$ci_not_allocated when returned from fm_$get_ci_ptr.
05/09/84 by Matthew Pierret:  Changed to allocate output buffers on even word
            boundaries.
07/18/84 by Matthew Pierret:  Changed to return dm_error_$ci_not_in_collection
            instead of calling sub_err_ if the first control interval gotten
            is not in the specified collection.
10/01/84 by Matthew Pierret:  Changed to base all datum structures on datum_ptr
            and datum_contents_length_in_bits.  Changed to use
            bytes = divide (bits + BITS_PER_BYTE -1, BITS_PER_BYTE, 17, 0)
            to convert bits to bytes more efficiently. This is only used in
            the critical path (SIMPLE_GET).
12/03/84 by Matthew Pierret:  Added the local cd_datum_header which was
            removed from dm_cm_datum.incl.pl1.
*/

/* format: style2,ind3,ll79,^indprocbody */
%page;
cm_get_element_portion:
   proc (p_file_opening_id, p_collection_id, p_element_id, p_position,
        p_buffer_ptr, p_buffer_length, p_area_ptr, p_portion_beginning_index,
        p_portion_length, p_new_buffer_was_allocated, p_element_ptr,
        p_element_length, p_code);

/* START OF DECLARATIONS */
/* Parameter */

   dcl	 p_file_opening_id	    bit (36) aligned;
   dcl	 p_collection_id	    bit (36) aligned;
   dcl	 p_element_id	    bit (36) aligned;
   dcl	 p_position	    fixed bin (17);
   dcl	 p_buffer_ptr	    ptr;
   dcl	 p_buffer_length	    fixed bin (35);
   dcl	 p_area_ptr	    ptr;
   dcl	 p_portion_beginning_index
			    fixed bin (35);
   dcl	 p_portion_length	    fixed bin (35);
   dcl	 p_new_buffer_was_allocated
			    bit (1) aligned;
   dcl	 p_element_ptr	    ptr;
   dcl	 p_element_length	    fixed bin (35);
   dcl	 p_code		    fixed bin (35);

/* Automatic */

   dcl	 (file_opening_id, collection_id)
			    bit (36) aligned;
   dcl	 (continuation_datum_id_string, continued_datum_id_string)
			    init ("0"b) bit (36) aligned;

   dcl	 code		    fixed bin (35) init (0);
   dcl	 buffer_length_in_bits  fixed bin (35) init (0);
   dcl	 buffer_length_in_double_words
			    fixed bin (35) init (0);
   dcl	 datum_contents_length_in_bytes
			    fixed bin (17) init (0);
   dcl	 portion_length_in_bits fixed bin (35) init (0);
   dcl	 portion_length_in_bytes
			    fixed bin (17) init (0);
   dcl	 position_from_specified_element
			    fixed bin (17) init (0);
   dcl	 remaining_portion_length_in_bytes
			    fixed bin (17) init (0);

   dcl	 exclusive_get	    bit (1) aligned init ("0"b);

   dcl	 ci_ptr		    ptr init (null);
   dcl	 work_area_ptr	    ptr init (null);
   dcl	 buffer_ptr	    ptr init (null);
   dcl	 current_buffer_ptr	    ptr init (null);
   dcl	 datum_contents_ptr	    ptr init (null);

   dcl	 1 cd_datum_header	    aligned like continued_datum.header;

/* Based */

   dcl	 1 continued_datum_id   aligned like datum_id
			    based (addr (continued_datum_id_string));
   dcl	 1 continuation_datum_id
			    aligned like datum_id
			    based (addr (continuation_datum_id_string));
   dcl	 work_area	    area based (work_area_ptr);
   dcl	 buffer		    (buffer_length_in_double_words) fixed
			    bin (71) based (buffer_ptr);
   dcl	 datum_contents_string  char (datum_contents_length_in_bytes) based;

/* Builtin */

   dcl	 (addr, addcharno, ceil, divide, length, min, null, unspec)
			    builtin;

/* Condition */

   dcl	 cleanup		    condition;

/* Constant */

   dcl	 myname		    init ("cm_put_element_portion")
			    char (32) varying internal static
			    options (constant);
   dcl	 (
	 BITS_PER_BYTE	    init (9) fixed bin,
	 BYTES_PER_DOUBLE_WORD  init (8) fixed bin,
	 THIS_IS_FIRST_CI_SEEN  init ("1"b) bit (1) aligned,
	 THIS_IS_NOT_FIRST_CI_SEEN
			    init ("1"b) bit (1) aligned,
	 TO_END_OF_ELEMENT	    init (-1) fixed bin (35)
	 )		    internal static options (constant);

/* Entry */

   dcl	 file_manager_$get_ci_ptr
			    entry (bit (36) aligned, uns fixed bin (24),
			    ptr, fixed bin (35));
   dcl	 sub_err_		    entry () options (variable);

/* External */

   dcl	 (
	 error_table_$bad_arg,
	 error_table_$unimplemented_version
	 )		    fixed bin (35) ext;
   dcl	 (
	 dm_error_$ci_not_allocated,
	 dm_error_$ci_not_in_collection,
	 dm_error_$no_element,
	 dm_error_$programming_error,
	 dm_error_$long_return_element
	 )		    fixed bin (35) ext;

/* END OF DECLARATIONS */

   exclusive_get = "0"b;
   goto JOIN;

exclusive:
   entry (p_file_opening_id, p_collection_id, p_element_id, p_position,
        p_buffer_ptr, p_buffer_length, p_area_ptr, p_portion_beginning_index,
        p_portion_length, p_new_buffer_was_allocated, p_element_ptr,
        p_element_length, p_code);

/* This entry is not actually implemented.  What is needed to implement
   it fully is a file_manager_$get_ci_ptr_exclusive entry. */

   exclusive_get = "1"b;
   goto JOIN;

%page;
/* format: ^indblkcom,indcomtxt */
/* format: equalind25 */
JOIN:
   p_code		        = 0;
   p_new_buffer_was_allocated
		        = "0"b;
   file_opening_id	        = p_file_opening_id;
   collection_id	        = p_collection_id;
   position_from_specified_element
		        = p_position;
   portion_length_in_bits   = p_portion_length;
   element_id_string        = p_element_id;
   buffer_ptr	        = p_buffer_ptr;		/* format: equalind0 */


   if buffer_ptr = null
   then buffer_length_in_bits = -1;			/* no buffer */
   else buffer_length_in_bits = p_buffer_length;

   if position_from_specified_element = 0
   then
      do;
         if element_id.index <= 0
         then call ERROR_RETURN (dm_error_$no_element);
         call GET_CI_PTR (THIS_IS_FIRST_CI_SEEN, file_opening_id,
	    collection_id, (element_id.control_interval_id), ci_ptr);
         if element_id.index
	    > ci_ptr -> basic_control_interval.header.number_of_datums
         then call ERROR_RETURN (dm_error_$no_element);
      end;
   else
      do;
         call cm_get_id$ptr (file_opening_id, collection_id,
	    (element_id_string), position_from_specified_element,
	    (element_id_string = "0"b), (null) /* input ci_ptr */, ci_ptr,
	    element_id_string, code);
         if code ^= 0
         then call ERROR_RETURN (code);
      end;

/*** Set pointer to datum_slot instead of accessing ci_ptr->bci.dpt(ei.i)
     for efficiency. */

   datum_slot_ptr =
        addr (ci_ptr
        -> basic_control_interval.datum_position_table (element_id.index));

/*** If no element corresponds to this datum slot, report to caller that
     the element could not be found. */

   if datum_slot.offset_in_bytes = FREE_SLOT /* no datum here */
        | datum_slot.flags.is_continuation		/* this datum is not the start of an element */
   then call ERROR_RETURN (dm_error_$no_element);



/*** Report if caller supplied an invalid p_portion_length argument.  The
     portion length must be positive or a special value. */

   if portion_length_in_bits < 1 & portion_length_in_bits ^= TO_END_OF_ELEMENT
   then call ERROR_RETURN (error_table_$bad_arg);

   datum_ptr = addcharno (ci_ptr, datum_slot.offset_in_bytes);

   if ^datum_slot.flags.is_continued
   then
SIMPLE_GET:
      do;

      /*** The datum described by datum_slot is the entire element.  Get the datum
	 portion and return. */

         datum_contents_ptr = addr (datum.contents);	/* Points to the datum contents in the control interval. */
						/* This should one day be changed to point at the start  */
						/* of an element portion. */

         if portion_length_in_bits = TO_END_OF_ELEMENT
         then datum_contents_length_in_bits = datum_slot.length_in_bits;
         else datum_contents_length_in_bits =
	         min (portion_length_in_bits, datum_slot.length_in_bits);

         datum_contents_length_in_bytes =
	    ceil (
	    divide (datum_contents_length_in_bits, BITS_PER_BYTE, 35, 18));

         if datum_contents_length_in_bytes * BITS_PER_BYTE
	    > buffer_length_in_bits			/* datum_contents_length_in_bytes * BITS_PER_BYTE is used */
						/* in this test instead of datum_slot.length_in_bits      */
						/* because the buffer must be large enough to fit the     */
						/* contents when copied in bytes.                         */
         then
SG_ALLOC_BUFFER:
	  do;					/* Buffer is too small. Try allocating a buffer in the work area. */
	     work_area_ptr = p_area_ptr;
	     if work_area_ptr = null
	     then
	        do;
		 p_element_length =
		      datum_contents_length_in_bytes * BITS_PER_BYTE;
						/* Not the actual length of the element, but the minimum */
						/* size a buffer must be to hold the element. */
		 call ERROR_RETURN (dm_error_$long_return_element);
	        end;
	     else
	        do;				/* Allocate the buffer. */
		 buffer_length_in_double_words =
		      ceil (
		      divide (datum_contents_length_in_bytes,
		      BYTES_PER_DOUBLE_WORD, 35, 18));
		 on cleanup call FINISH ();
		 alloc buffer in (work_area);
		 p_new_buffer_was_allocated = "1"b;
	        end;
	  end SG_ALLOC_BUFFER;

      /*** Now, copy the datum contents into the buffer. */

         buffer_ptr -> datum_contents_string =
	    datum_contents_ptr -> datum_contents_string;

         p_element_ptr = buffer_ptr;
         p_element_length = datum_slot.length_in_bits;

      end SIMPLE_GET;

   else if portion_length_in_bits ^= TO_END_OF_ELEMENT
	   & portion_length_in_bits
	   <= (datum_slot.length_in_bits - CD_DATUM_HEADER_LENGTH_IN_BITS)
   then
SIMPLE_MULTI_DATUM_GET:
      do;

      /*** The element consists of more than one datum, but the retreival
	 can be satisfied by using only the first datum. This do-group is almost
	 identical to the SIMPLE_GET do-group. */

         datum_contents_ptr = addr (continued_datum.contents);
						/* Points to the datum contents in the control interval. */

         if portion_length_in_bits = TO_END_OF_ELEMENT
         then datum_contents_length_in_bits =
	         datum_slot.length_in_bits - CD_DATUM_HEADER_LENGTH_IN_BITS;
         else datum_contents_length_in_bits =
	         min (portion_length_in_bits,
	         datum_slot.length_in_bits - CD_DATUM_HEADER_LENGTH_IN_BITS);

         datum_contents_length_in_bytes =
	    ceil (
	    divide (datum_contents_length_in_bits, BITS_PER_BYTE, 35, 18));

         if datum_contents_length_in_bytes * BITS_PER_BYTE
	    > buffer_length_in_bits			/* datum_contents_length_in_bytes * BITS_PER_BYTE is used */
						/* in this test instead of datum_slot.length_in_bits      */
						/* because the buffer must be large enough to fit the     */
						/* contents when copied in bytes.                         */
         then
SMG_ALLOC_BUFFER:
	  do;					/* Buffer is too small. Try allocating a buffer in the work area. */
	     work_area_ptr = p_area_ptr;
	     if work_area_ptr = null
	     then
	        do;
		 p_element_length =
		      datum_contents_length_in_bytes * BITS_PER_BYTE;
						/* Not the actual length of the element, but the minimum */
						/* size a buffer must be to hold the element. */
		 call ERROR_RETURN (dm_error_$long_return_element);
	        end;
	     else
	        do;				/* Allocate the buffer. */
		 buffer_length_in_double_words =
		      ceil (
		      divide (datum_contents_length_in_bytes,
		      BYTES_PER_DOUBLE_WORD, 35, 18));
		 on cleanup call FINISH ();
		 alloc buffer in (work_area);
		 p_new_buffer_was_allocated = "1"b;
	        end;
	  end SMG_ALLOC_BUFFER;

      /*** Now, copy the datum contents into the buffer. */

         buffer_ptr -> datum_contents_string =
	    datum_contents_ptr -> datum_contents_string;

         p_element_ptr = buffer_ptr;
         p_element_length = datum_contents_length_in_bits;

      end SIMPLE_MULTI_DATUM_GET;

   else call MULTI_DATUM_GET ();

   if p_element_id ^= element_id_string
   then p_element_id = element_id_string;

MAIN_RETURN:
   return;
%page;
FINISH:
   proc ();

   if buffer_ptr ^= p_buffer_ptr & buffer_ptr ^= null
   then
      do;
         free buffer in (work_area);
         p_new_buffer_was_allocated = "0"b;
      end;

   call TERMINATE_CI_PTR (ci_ptr);

   end FINISH;


ERROR_RETURN:
   proc (er_code);

   dcl	 er_code		    fixed bin (35);

   p_code = er_code;
   call FINISH ();
   goto MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_CI_LAYOUT:
   proc (ccl_p_ci_layout);
   dcl	 ccl_p_ci_layout	    char (4) aligned;

   if ccl_p_ci_layout ^= BASIC_CI_LAYOUT_1
   then call sub_err_ (error_table_$unimplemented_version, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected a version ^a control interval. Received version ^a instead."
	   , BASIC_CI_LAYOUT_1, ccl_p_ci_layout);

   end CHECK_CI_LAYOUT;
%page;
GET_CI_PTR:
   proc (gcp_p_this_is_first_ci_seen, gcp_p_foid, gcp_p_collection_id,
        gcp_p_ci_id, gcp_p_ci_ptr);

   dcl	 gcp_p_this_is_first_ci_seen
			    bit (1) aligned;
   dcl	 gcp_p_foid	    bit (36) aligned;
   dcl	 gcp_p_collection_id    bit (36) aligned;
   dcl	 gcp_p_ci_id	    fixed bin (24) unsigned;
   dcl	 gcp_p_ci_ptr	    ptr;
   dcl	 gcp_code		    fixed bin (35);


   if gcp_p_ci_ptr ^= null
   then call TERMINATE_CI_PTR (gcp_p_ci_ptr);

   call file_manager_$get_ci_ptr (gcp_p_foid, (gcp_p_ci_id), gcp_p_ci_ptr,
        gcp_code);
   if gcp_code ^= 0
   then if gcp_code ^= dm_error_$ci_not_allocated
        then call ERROR_RETURN (gcp_code);
        else if continuation_datum_id_string = "0"b
        then call ERROR_RETURN (dm_error_$no_element);	/* First datum of element. No CI means no element. */
						/* A continuation datum of a multi-datum element. No CI means an improperly formed conntinued datum. */
        else call sub_err_ (gcp_code, myname, ACTION_CANT_RESTART, null, 0,
	        "^/Control interval ^d was expected to hold the continuation of ^/the datum at slot ^d of control interval ^d."
	        , gcp_p_ci_id, continued_datum_id.index,
	        continued_datum_id.control_interval_id);


   call CHECK_CI_LAYOUT ((gcp_p_ci_ptr -> bci_header.layout_type));

   if gcp_p_ci_ptr -> bci_header.collection_id ^= gcp_p_collection_id
   then
      do;
         if gcp_p_this_is_first_ci_seen
         then call ERROR_RETURN (dm_error_$ci_not_in_collection);
         else call sub_err_ (dm_error_$programming_error, myname,
	         ACTION_CANT_RESTART, null, 0,
	         "^/Control interval ^d is in collection ^3bo but was expected to^/be in collection ^3bo."
	         , gcp_p_ci_id, gcp_p_ci_ptr -> bci_header.collection_id,
	         gcp_p_collection_id);
      end;

   return;

   end GET_CI_PTR;
%page;
TERMINATE_CI_PTR:
   proc (tcp_p_ci_ptr);

   dcl	 tcp_p_ci_ptr	    ptr;

   tcp_p_ci_ptr = null;

   return;

   end TERMINATE_CI_PTR;
%page;
MULTI_DATUM_GET:
   proc ();


/*** The datum is by definition a "continued" datum, described by the
     continued_datum structure.  Set a pointer to the beginning of that structure,
     extract header information and datum contents from it. */

   datum_contents_length_in_bits =
        datum_slot.length_in_bits - CD_DATUM_HEADER_LENGTH_IN_BITS;
						/* Length of the datum contents in bits. */
   datum_contents_ptr = addr (continued_datum.contents);	/* Points to beginning of datum contents. */
   datum_contents_length_in_bytes =
        ceil (divide (datum_contents_length_in_bits, BITS_PER_BYTE, 35, 18));

   if portion_length_in_bits = TO_END_OF_ELEMENT
   then portion_length_in_bits = continued_datum.header.full_length;
   else portion_length_in_bits =
	   min (portion_length_in_bits, continued_datum.header.full_length);

   portion_length_in_bytes =
        ceil (divide (portion_length_in_bits, BITS_PER_BYTE, 71, 18));
						/* This length can be very large. */

   if portion_length_in_bytes * BITS_PER_BYTE > buffer_length_in_bits
						/* portion_length_in_bytes * BITS_PER_BYTE is used in this        */
						/* test instead of datum_slot.length_in_bits because the buffer   */
						/* must be large enough to fit the contents when copied in bytes. */
   then
MG_ALLOC_BUFFER:
      do;						/* Buffer is too small. Try allocating a buffer in the work area. */
         work_area_ptr = p_area_ptr;
         if work_area_ptr = null
         then
	  do;
	     p_element_length = portion_length_in_bytes * BITS_PER_BYTE;
						/* Not the actual length of the portion, but the minimum size a  */
						/* buffer must be to hold the portion. */
	     call ERROR_RETURN (dm_error_$long_return_element);
	  end;
         else
	  do;					/* Allocate the buffer. */
	     buffer_length_in_double_words =
		ceil (
		divide (portion_length_in_bytes, BYTES_PER_DOUBLE_WORD, 35,
		18));
	     on cleanup call FINISH ();
	     alloc buffer in (work_area);
	     p_new_buffer_was_allocated = "1"b;
	  end;
      end MG_ALLOC_BUFFER;

   if datum_contents_length_in_bytes <= 0
   then
      do;
         current_buffer_ptr = buffer_ptr;
         remaining_portion_length_in_bytes = portion_length_in_bytes;
      end;
   else
      do;
         buffer_ptr -> datum_contents_string =
	    datum_contents_ptr -> datum_contents_string;
         current_buffer_ptr =
	    addcharno (buffer_ptr, datum_contents_length_in_bytes);
         remaining_portion_length_in_bytes =
	    portion_length_in_bytes - datum_contents_length_in_bytes;
						/* This is to indicate how much is left to be gotten. */
      end;

   continued_datum_id_string = element_id_string;		/* datum id of the continued datum, i.e., the the datum most recently */
						/* copied.  The element is continued in another datum. */
   cd_datum_header = continued_datum.header;

   continuation_datum_id = cd_datum_header.continuation;	/* datum id of the datum which is the continuation of the continued datum. */

GET_EACH_DATUM_LOOP:
   do while (continuation_datum_id_string ^= "0"b
        & remaining_portion_length_in_bytes > 0);

      call GET_CI_PTR (THIS_IS_NOT_FIRST_CI_SEEN, file_opening_id,
	 collection_id, (continuation_datum_id.control_interval_id), ci_ptr);

      if continuation_datum_id.index
	 > ci_ptr -> basic_control_interval.header.number_of_datums
      then call sub_err_ (dm_error_$programming_error, myname,
	      ACTION_CANT_RESTART, null, 0,
	      "^/There is no datum at slot ^d of control interval ^d.  A continuation^/of the datum at slot ^d of control interval ^d was expected to be there."
	      , continuation_datum_id.index,
	      continuation_datum_id.control_interval_id,
	      continued_datum_id.index,
	      continued_datum_id.control_interval_id);

      datum_slot_ptr =
	 addr (ci_ptr
	 -> basic_control_interval
	 .datum_position_table (continuation_datum_id.index));

      datum_ptr = addcharno (ci_ptr, datum_slot.offset_in_bytes);

      if datum_slot.is_continued
      then
         do;
	  datum_contents_length_in_bits =
	       datum_slot.length_in_bits
	       - length (unspec (continued_continuation_datum.header));
	  datum_contents_length_in_bytes =
	       ceil (
	       divide (datum_contents_length_in_bits, BITS_PER_BYTE, 35, 18))
	       ;
	  datum_contents_ptr = addr (continued_continuation_datum.contents);

	  continued_datum_id_string = continuation_datum_id_string;
	  continuation_datum_id =
	       continued_continuation_datum.header.continuation;
         end;
      else
         do;
	  datum_contents_length_in_bytes =
	       ceil (
	       divide (datum_slot.length_in_bits, BITS_PER_BYTE, 35, 18));
	  datum_contents_ptr = addr (continuation_datum.contents);

	  continuation_datum_id_string = "0"b;
         end;

      datum_contents_length_in_bytes =
	 min (datum_contents_length_in_bytes,
	 remaining_portion_length_in_bytes);

      current_buffer_ptr -> datum_contents_string =
	 datum_contents_ptr -> datum_contents_string;

      current_buffer_ptr =
	 addcharno (current_buffer_ptr, datum_contents_length_in_bytes);

      remaining_portion_length_in_bytes =
	 remaining_portion_length_in_bytes - datum_contents_length_in_bytes;

   end GET_EACH_DATUM_LOOP;

   if remaining_portion_length_in_bytes > 0
   then call sub_err_ (dm_error_$programming_error, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/The length of the element at slot ^d of control interval ^d is^/recorded as ^d bits.  The actual length is ^d bits."
	   , element_id.index, element_id.control_interval_id,
	   portion_length_in_bits,
	   (portion_length_in_bits
	   - remaining_portion_length_in_bytes * BITS_PER_BYTE));

   p_element_ptr = buffer_ptr;
   p_element_length = cd_datum_header.full_length;

   end MULTI_DATUM_GET;
%page;
%include dm_cm_basic_ci;
%page;
%include dm_cm_basic_ci_const;
%page;
%include dm_element_id;
%page;
%include dm_cm_datum;
%page;
%include dm_cm_datum_constants;
%page;
%include dm_ci_parts;
%page;
%include dm_cm_entry_dcls;
%page;
%include sub_err_flags;

   end cm_get_element_portion;
