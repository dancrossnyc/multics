/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
dmu_get_data_bit_length:
   proc (p_descriptor, p_bit_length, p_code);

/* DESCRIPTION:

     Given an aligned 36-bit multics pl1 argument descriptor this routine
     determines the number of bits of storage that the data type,
     alignment, and precision or size requires when residing in memory,
     not counting words skipped to obtain even word boundaries.  The
     descriptor is assumed to be valid, with correct values for scale,
     precision, size, etc.  For that data type, since this is to be an
     efficient run-time routine having had error checks made elsewhere.
     Also, the data is assumed to be scalar, i.e.  that there are no array
     bounds, as this will be expanded elsewhere. Decimal 4-bit non-byte 
     aligned are treated as byte aligned data.
*/

/* HISTORY:
Written by Matthew Pierret, 04/05/82.
Modified:
01/07/83 by Lindsey Spratt:  Fixed data-types 9 through 12 to always set the
	  bit_length.  It wasn't being set when the packed flag was off.
05/03/84 by Matthew Pierret:  Added the alignment entry, which returns the
            required alignment in addition to the bit length.  Made
            descriptor_string aligned.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_descriptor	       bit (36) aligned;
      dcl	    p_bit_length	       fixed bin (35);
      dcl	    p_alignment	       fixed bin (17);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    get_alignment	       bit (1) aligned init ("0"b);
      dcl	    alignment	       fixed bin (17);
      dcl	    descriptor_string      bit (36) aligned;
      dcl	    bit_length	       fixed bin (35);	/* returned storage length */

/* Based */

      dcl	    1 descriptor	       based (addr (descriptor_string)) unal,
	      2 flag	       bit (1) unal,
	      2 type	       unsigned fixed bin (6) unal,
	      2 packed	       bit (1) unal,
	      2 ndims	       unsigned fixed bin (4) unal,
	      2 size	       unsigned fixed bin (24) unal;

      dcl	    1 precision_descriptor based (addr (descriptor_string)) unal,
	      2 unused1	       bit (24) unal,
	      2 precision	       unsigned fixed bin (12) unal;

/* Builtin */

      dcl	    (mod, addr, null, floor)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    SIGN_AND_PAD	       fixed bin init (2) int static options (constant);
						/* sign digit + 1/2 byte padding */
      dcl	    SIGN_EXPONENT_AND_PAD  fixed bin init (4) int static options (constant);
						/* sign digit, exp byte, + 1/2 byte pad */
      dcl	    PAD		       fixed bin init (1) int static options (constant);
						/* 1/2 byte padding */
      dcl	    PER_BYTE_FACTOR	       fixed bin init (2) int static options (constant);
						/* number of digits per byte */
      dcl	    SIGN_AND_EXPONENT      fixed bin init (2) int static options (constant);
						/* float decimal exp and sign char space */
      dcl	    DOUBLE	       fixed bin init (2) int static options (constant);
						/* multiplier for complex numbers */
      dcl	    SIGN		       fixed bin init (1) int static options (constant);
						/* space for sign */
      dcl	    ONE_WORD	       fixed bin init (36) int static options (constant);
						/* bit length of a word */
      dcl	    TWO_WORD	       fixed bin init (72) int static options (constant);
						/* bit length of two words */
      dcl	    FOUR_WORD	       fixed bin init (144) int static options (constant);
						/* bit length of four words */
      dcl	    ONE_BYTE	       fixed bin init (9) int static options (constant);
						/* bit length of a byte (character) */
      dcl	    BIT_ALIGNED	       fixed bin (17) init (1) int static options (constant);
						/* data type is aligned at the bit level (not aligned) */
      dcl	    BYTE_ALIGNED	       fixed bin (17) init (9) int static options (constant);
						/* data type is aligned at the byte level */
      dcl	    WORD_ALIGNED	       fixed bin (17) init (36) int static options (constant);
						/* data type is aligned at the word level */
      dcl	    EVEN_WORD_ALIGNED      fixed bin (17) init (72) int static options (constant);
						/* data type is aligned at the even word level */

/* Entry */
/* External */

      dcl	    dm_error_$unimplemented_data_type
			       fixed bin (35) ext;
      dcl	    dm_error_$invalid_alignment
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      go to JOIN;

alignment:
   entry (p_descriptor, p_bit_length, p_alignment, p_code);

      get_alignment = "1"b;
      alignment = BIT_ALIGNED;			/* Default alignment is bit-aligned, or not aligned. */

JOIN:
      descriptor_string = p_descriptor;
      p_code = 0;

/* CASE STRUCTURE BASED ON THE DATA TYPE */

      goto DATA_TYPE (descriptor.type);

/* REAL FIXED BINARY SHORT */
DATA_TYPE (1):
      if descriptor.packed
      then bit_length = precision_descriptor.precision + SIGN;
      else
         do;
	  alignment = WORD_ALIGNED;
	  bit_length = ONE_WORD;
         end;
      goto END_CASE;

/* READ FIXED BINARY LONG */
DATA_TYPE (2):
      if descriptor.packed
      then bit_length = precision_descriptor.precision + SIGN;
      else
         do;
	  alignment = EVEN_WORD_ALIGNED;
	  bit_length = TWO_WORD;
         end;
      goto END_CASE;

/* REAL FLOATING BINARY SHORT */
DATA_TYPE (3):
      if descriptor.packed
      then bit_length = precision_descriptor.precision + ONE_BYTE;
      else
         do;
	  alignment = WORD_ALIGNED;
	  bit_length = ONE_WORD;
         end;
      goto END_CASE;

/*  REAL FLOATING BINARY LONG */
DATA_TYPE (4):
      if descriptor.packed
      then bit_length = precision_descriptor.precision + ONE_BYTE;
      else
         do;
	  alignment = EVEN_WORD_ALIGNED;
	  bit_length = TWO_WORD;
         end;
      goto END_CASE;

%page;
/* COMPLEX FIXED BINARY SHORT */
DATA_TYPE (5):
      if descriptor.packed
      then bit_length = DOUBLE * (precision_descriptor.precision + SIGN);
      else
         do;
	  alignment = EVEN_WORD_ALIGNED;
	  bit_length = TWO_WORD;
         end;
      goto END_CASE;

/* COMPLEX FIXED BINARY LONG */
DATA_TYPE (6):
      if descriptor.packed
      then bit_length = DOUBLE * (precision_descriptor.precision + SIGN);
      else
         do;
	  alignment = EVEN_WORD_ALIGNED;
	  bit_length = FOUR_WORD;
         end;
      goto END_CASE;

/* COMPLEX FLOATING BINARY SHORT */
DATA_TYPE (7):
      if descriptor.packed
      then bit_length = DOUBLE * (precision_descriptor.precision + ONE_BYTE);
      else
         do;
	  alignment = EVEN_WORD_ALIGNED;
	  bit_length = TWO_WORD;
         end;
      goto END_CASE;

/* COMPLEX FLOATING BINARY LONG */
DATA_TYPE (8):
      if descriptor.packed
      then bit_length = DOUBLE * (precision_descriptor.precision + ONE_BYTE);
      else
         do;
	  alignment = EVEN_WORD_ALIGNED;
	  bit_length = FOUR_WORD;
         end;
      goto END_CASE;

%page;
/* REAL FIXED DECIMAL */
DATA_TYPE (9):
      bit_length = ONE_BYTE * (precision_descriptor.precision + SIGN);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* REAL FLOATING DECIMAL */
DATA_TYPE (10):
      bit_length = ONE_BYTE * (precision_descriptor.precision + SIGN_AND_EXPONENT);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* COMPLEX FIXED DECIMAL */
DATA_TYPE (11):
      bit_length = DOUBLE * ONE_BYTE * (precision_descriptor.precision + SIGN);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* COMPLEX FLOATING DECIMAL */
DATA_TYPE (12):
      bit_length = DOUBLE * ONE_BYTE * (precision_descriptor.precision + SIGN_AND_EXPONENT);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

%page;
/* POINTER */
DATA_TYPE (13):
      if descriptor.packed
      then bit_length = ONE_WORD;
      else
         do;
	  alignment = EVEN_WORD_ALIGNED;
	  bit_length = TWO_WORD;
         end;
      goto END_CASE;

/* OFFSET */
DATA_TYPE (14):
      if descriptor.packed
      then p_code = dm_error_$invalid_alignment;
      else
         do;
	  alignment = WORD_ALIGNED;
	  bit_length = ONE_WORD;
         end;
      goto END_CASE;

/* LABEL */
DATA_TYPE (15):
      if descriptor.packed
      then p_code = dm_error_$invalid_alignment;
      else
         do;
	  alignment = EVEN_WORD_ALIGNED;
	  bit_length = FOUR_WORD;
         end;
      goto END_CASE;

/* ENTRY */
DATA_TYPE (16):
      if descriptor.packed
      then p_code = dm_error_$invalid_alignment;
      else
         do;
	  alignment = EVEN_WORD_ALIGNED;
	  bit_length = FOUR_WORD;
         end;
      goto END_CASE;

/* NOTE: this length is correct for structures declared
   without arrays only. (i.e. only scalar elements) */

/* STRUCTURE */
DATA_TYPE (17):
      if ^descriptor.packed
      then alignment = WORD_ALIGNED;
      bit_length = ONE_WORD * descriptor.size;
      goto END_CASE;

/* AREA */
DATA_TYPE (18):
      alignment = EVEN_WORD_ALIGNED;
      bit_length = ONE_WORD * descriptor.size;
      goto END_CASE;

%page;
/* BIT STRING */
DATA_TYPE (19):
      bit_length = descriptor.size;
      if ^descriptor.packed
      then
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* Note: varying strings are stored in a special fashion which makes them,
   act as though they were bit-aligned. */

/* VARYING BIT STRING */
DATA_TYPE (20):
      bit_length = descriptor.size + ONE_WORD;
      if ^descriptor.packed
      then call pad_to_word_boundary ();
      goto END_CASE;

/* CHARACTER STRING */
DATA_TYPE (21):
      bit_length = ONE_BYTE * descriptor.size;
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* Note: varying strings are stored in a special fashion which makes them,
   act as though they were bit-aligned. */

/* VARYING CHARACTER STRING */
DATA_TYPE (22):
      bit_length = (ONE_BYTE * descriptor.size) + ONE_WORD;
      if ^descriptor.packed
      then call pad_to_word_boundary ();
      goto END_CASE;

%page;
/* FILE */
DATA_TYPE (23):
      alignment = EVEN_WORD_ALIGNED;
      bit_length = FOUR_WORD;
      goto END_CASE;

/* REAL FIXED DECIMAL LEADING OVERPUNCHED SIGN 9-BIT */
DATA_TYPE (29):
      bit_length = ONE_BYTE * precision_descriptor.precision;
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* REAL FIXED DECIMAL TRAILING OVERPUNCHED SIGN 9-BIT */
DATA_TYPE (30):
      bit_length = ONE_BYTE * precision_descriptor.precision;
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* REAL FIXED BINARY SHORT UNSIGNED */
DATA_TYPE (33):
      if descriptor.packed
      then bit_length = precision_descriptor.precision;
      else
         do;
	  alignment = WORD_ALIGNED;
	  bit_length = ONE_WORD;
         end;
      goto END_CASE;

/* REAL FIXED BINARY LONG UNSIGNED */
DATA_TYPE (34):
      if descriptor.packed
      then bit_length = precision_descriptor.precision;
      else
         do;
	  alignment = EVEN_WORD_ALIGNED;
	  bit_length = TWO_WORD;
         end;
      goto END_CASE;

%page;
/* REAL FIXED DECIMAL UNSIGNED 9-BIT */
DATA_TYPE (35):
      bit_length = ONE_BYTE * precision_descriptor.precision;
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* REAL FIXED DECIMAL TRAILING SIGN 9-BIT */
DATA_TYPE (36):
      bit_length = ONE_BYTE * (precision_descriptor.precision + SIGN);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* NOTE: non-byte-aligned decimal 4-bit requires knowledge of
   physical 1/2 byte alignment to determine actual bit length,
   thus it is unsupported by pl1, and MRDS, and the returned
   bit length will be the same as if it were the corresponding
   byte aligned decimal 4-bit data type. */

/* REAL FIXED DECIMAL UNSIGNED 4-BIT */
DATA_TYPE (38):
      bit_length = ONE_BYTE * floor ((precision_descriptor.precision + PAD) / PER_BYTE_FACTOR);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* REAL FIXED DECIMAL TRAILING SIGN 4-BIT */
DATA_TYPE (39):
      bit_length = ONE_BYTE * floor ((precision_descriptor.precision + SIGN_AND_PAD) / PER_BYTE_FACTOR);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* REAL FIXED DECIMAL LEADING SIGN 4-BIT */
DATA_TYPE (41):
      bit_length = ONE_BYTE * floor ((precision_descriptor.precision + SIGN_AND_PAD) / PER_BYTE_FACTOR);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* REAL FLOATING DECIMAL 4-BIT */
DATA_TYPE (42):
      bit_length = ONE_BYTE * floor ((precision_descriptor.precision + SIGN_EXPONENT_AND_PAD) / PER_BYTE_FACTOR);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

%page;
/* REAL FIXED DECIMAL LEADING SIGN 4-BIT BYTE-ALIGNED */
DATA_TYPE (43):
      bit_length = ONE_BYTE * floor ((precision_descriptor.precision + SIGN_AND_PAD) / PER_BYTE_FACTOR);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* REAL FLOATING DECIMAL 4-BIT BYTE-ALIGNED */
DATA_TYPE (44):
      bit_length = ONE_BYTE * floor ((precision_descriptor.precision + SIGN_EXPONENT_AND_PAD) / PER_BYTE_FACTOR);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* COMPLEX FIXED DECIMAL LEADING SIGN 4-BIT BYTE-ALIGNED */
DATA_TYPE (45):
      bit_length = DOUBLE * ONE_BYTE * floor ((precision_descriptor.precision + SIGN_AND_PAD) / PER_BYTE_FACTOR);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* COMPLEX FLOATING DECIMAL 4-BIT BYTE-ALIGNED */
DATA_TYPE (46):
      bit_length = DOUBLE * ONE_BYTE * floor ((precision_descriptor.precision + SIGN_EXPONENT_AND_PAD) / PER_BYTE_FACTOR);
      if descriptor.packed
      then alignment = BYTE_ALIGNED;
      else
         do;
	  alignment = WORD_ALIGNED;
	  call pad_to_word_boundary ();
         end;
      goto END_CASE;

/* UNUSED */
DATA_TYPE (0):
DATA_TYPE (24):
DATA_TYPE (25):
DATA_TYPE (26):
DATA_TYPE (27):
DATA_TYPE (28):
DATA_TYPE (31):
DATA_TYPE (32):
DATA_TYPE (37):
DATA_TYPE (40):
DATA_TYPE (47):
DATA_TYPE (48):
DATA_TYPE (49):
DATA_TYPE (50):
DATA_TYPE (51):
DATA_TYPE (52):
DATA_TYPE (53):
DATA_TYPE (54):
DATA_TYPE (55):
DATA_TYPE (56):
DATA_TYPE (57):
DATA_TYPE (58):
DATA_TYPE (59):
DATA_TYPE (60):
DATA_TYPE (61):
DATA_TYPE (62):
DATA_TYPE (63):
      p_code = dm_error_$unimplemented_data_type;
      goto END_CASE;

/* END OF DESCRIPTOR TYPE CASE STATEMENT */
END_CASE:
      p_bit_length = bit_length;
      if get_alignment
      then p_alignment = alignment;

      return;

%page;
pad_to_word_boundary:
   procedure ();

/* fill out the bit length to reflect a word boundary aligned,
   integral number of words storage space */

      if mod (bit_length, ONE_WORD) = 0
      then ;
      else bit_length = bit_length + (ONE_WORD - mod (bit_length, ONE_WORD));

   end;


   end dmu_get_data_bit_length;
