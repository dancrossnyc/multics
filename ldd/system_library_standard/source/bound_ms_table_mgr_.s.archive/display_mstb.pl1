/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_mstb:
     procedure options (variable);

/* display_mstb: Display information about a multisegment table. */
/* Written by C. Hornig, February 1980. */
/* Modified by B. Margolin, July 1983, for Version 2 MSTB */
/* Modified 1984-07-23 BIM for Version 3 MSTB */

%include mstb_format;
%include ms_table_info;

dcl ME char (32) static options (constant) init ("display_mstb");

dcl error_table_$unimplemented_version fixed bin (35) external;

dcl com_err_ entry options (variable);
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl date_time_ entry (fixed bin(71), char(*));
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl ioa_ entry options (variable);
dcl msf_manager_$open entry (char (*), char (*), pointer, fixed bin (35));
dcl msf_manager_$get_ptr entry (pointer, fixed bin, bit (1) aligned, pointer, fixed bin (24), fixed bin (35));
dcl msf_manager_$close entry (pointer);
dcl pathname_ entry (char(*), char(*)) returns(char(168));

dcl ap ptr;
dcl al fixed bin (21);
dcl arg char (al) based (ap);
dcl i fixed bin;
dcl code fixed bin (35);
dcl dirname char (168);
dcl ename char (32);
dcl fcbp ptr;

/* * * * * * * * * * DISPLAY_MSTB * * * * * * * * * */

	call cu_$arg_ptr (1, ap, al, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Usage: display_mstb path");
	     return;
	     end;
	call expand_pathname_ (arg, dirname, ename, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a", arg);
	     return;
	     end;
	call msf_manager_$open (dirname, ename, fcbp, code);
	if fcbp = null () then do;
	     call com_err_ (code, ME, "Opening ^a>^a.", dirname, ename);
	     return;
	     end;
	call msf_manager_$get_ptr (fcbp, 0, "0"b, segp, (0), code);
	if segp = null () then do;
	     call com_err_ (code, ME, "Reading first component of ^a>^a.", dirname, ename);
	     goto close_msf;
	     end;

	hdrp = segp;
	if mt_header.mti.version ^= MS_TABLE_INFO_VERSION_3 then do;
	     call com_err_ (error_table_$unimplemented_version, ME);
	     return;
	     end;
	call ioa_ ("Version ^d MSTB ^a is of type ^a.", mt_header.mti.version,
	     pathname_ (dirname, ename), mt_header.mti.type);
	call ioa_ (" ^d components, ^d entries, ^d used, ^d deleted, ^d free. (^2d% full)", mt_header.number_components + 1,
	     mt_header.total_entries, mt_header.used_entries, mt_header.deleted_entries,
	     (mt_header.total_entries - mt_header.used_entries - mt_header.deleted_entries),
	     divide (100 * (mt_header.deleted_entries + mt_header.used_entries), mt_header.total_entries, 17, 0));
	call ioa_ (" entry size = ^d, header size = ^d, component size = ^d.", mt_header.mti.entry_size,
	     mt_header.mti.header_size, mt_header.mti.max_size);

	call ioa_ ("lock = ^w, pclock = ^d, ^d entries_per_component, entry_offset = ^d",
	     mt_header.lock, mt_header.pclock, mt_header.entries_per_component, mt_header.entry_offset);
	call ioa_ ("perm_data_checksum = ^d", mt_header.perm_data_checksum);
	
	i = 0;
	call display_component;
	do i = 1 to mt_header.number_components;
	     call msf_manager_$get_ptr (fcbp, i, "0"b, segp, (0), code);
	     if segp = null then do;
		call com_err_ (code, ME, "Reading component ^d.", i);
		go to close_msf;
	     end;
	     call display_component;
	end;

close_msf:
	call msf_manager_$close (fcbp);
	return;
	

display_component:
	procedure;

declare ts (2) char (16);
	
	call date_time_ (comp_header.dt_created, ts (1));
	call date_time_ (comp_header.dt_updated, ts (2));

	call ioa_ ("^d: type ^a, created ^a, updated ^a, component ^d.",
	     i,
	     comp_header.type, ts (1), ts (2), comp_header.component);
	return;
     end display_component;
     
     end display_mstb;
