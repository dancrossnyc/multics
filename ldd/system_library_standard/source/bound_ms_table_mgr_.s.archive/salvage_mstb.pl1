/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,ifthenstmt,indend,declareind8,dclind4 */
salvage_mstb:
     procedure options (variable);

/* Recover and rahash a multi-segment table. */
/* Written by C. Hornig, January 1980. */
/* Modified by B. Margolin, July 1983, for Version 2 MSTB */
/* Modified 1984-08-17 by E. Swenson for Version 3 MSTBs. */

%include ms_table_info;

dcl error_table_$bad_conversion fixed bin (35) ext static;
dcl error_table_$checksum_failure fixed bin (35) external static;
dcl error_table_$unimplemented_version fixed bin (35) ext static;
dcl error_table_$no_record fixed bin (35) ext static;
dcl error_table_$bad_index fixed bin (35) ext static;
dcl error_table_$id_already_exists fixed bin (35) ext static;
dcl iox_$error_output ptr external static;

dcl ME char (32) init ("salvage_mstb") static options (constant);
dcl NO_WRITE bit (1) aligned initial ("0"b) internal static options (constant);

dcl com_err_ entry options (variable);
dcl copy_acl_ entry (char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
dcl cu_$arg_count entry returns (fixed bin);
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl hcs_$chname_file entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl ioa_$ioa_switch entry options (variable);
dcl ms_table_mgr_$abs_entry entry (ptr, fixed bin (35), char (*), bit (1) aligned, ptr, fixed bin (35), fixed bin (35));
dcl ms_table_mgr_$create entry (char (*), char (*), ptr, fixed bin (35));
dcl ms_table_mgr_$close entry (ptr, fixed bin (35));
dcl ms_table_mgr_$open entry (char (*), char (*), char (*), ptr, ptr, fixed bin (35));
dcl ms_table_mgr_$new_entry entry (ptr, char (*), ptr, fixed bin (35));
dcl ms_table_mgr_$table_data entry (ptr, ptr, ptr, fixed bin (35), fixed bin (35));
dcl ms_table_mgr_$update_entry entry (ptr, ptr, fixed bin (35));
dcl unique_chars_ entry (bit (*)) returns (char (15));

dcl copy_header (mti.header_size) fixed bin (35) based;
dcl copy_entry (mti.entry_size) fixed bin (35) based;

dcl 1 mti aligned like ms_table_info;
dcl (tp, ntp, hp, nhp, ep, nep) ptr;
dcl key char (32);
dcl ndirname char (168);
dcl (nename, oename) char (32);
dcl ne fixed bin (35);
dcl code fixed bin (35);
dcl i fixed bin (35);
dcl ap ptr;
dcl al fixed bin (21);
dcl argument char (al) based (ap);

dcl addr builtin;

dcl rtrim builtin;

/* * * * * * * * * * * SALVAGE_MSTB * * * * * * * * * */

	i = cu_$arg_count ();
	if i < 1 | i > 2 then do;
	     call com_err_ (0, ME, "Usage: salvage_mstb path {entries}");
	     return;
	end;
	call cu_$arg_ptr (1, ap, al, code);		/* get the path */
	call expand_pathname_ (argument, ndirname, oename, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a", argument);
	     return;
	end;

	call ms_table_mgr_$open (ndirname, oename, "", tp, hp, code);
						/* open the old MSTB */
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Opening MSTB ^a>^a.", ndirname, oename);
	     return;
	end;

	call ms_table_mgr_$table_data (tp, addr (mti), hp, ne, code);
						/* find out about the old one */
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Getting MSTB data.");
	     return;
	end;

	if mti.version ^= MS_TABLE_INFO_VERSION_3 then do;
	     call com_err_ (error_table_$unimplemented_version, ME);
	     return;
	end;

	call cu_$arg_ptr (2, ap, al, code);		/* did the caller specify the table size? */
	if code ^= 0
	then mti.max_entries = 3 * ne;		/* no, default to 1/3 full */
	else do;
	     mti.max_entries = cv_dec_check_ (argument, code);
						/* yes, get it */
	     if code ^= 0 then do;
		call com_err_ (error_table_$bad_conversion, ME, "^a", argument);
		return;
	     end;
	end;

	nename = unique_chars_ (""b) || "." || oename;
	call ms_table_mgr_$create (ndirname, nename, addr (mti), code);
						/* create the new copy */
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Creating new MSTB.");
	     return;
	end;
	call ms_table_mgr_$open (ndirname, nename, (mti.type), ntp, nhp, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Opening new MSTB.");
	     return;
	end;

	nhp -> copy_header = hp -> copy_header;		/* copy the table header */
	do i = 1 by 1;				/* now copy the records */
	     call ms_table_mgr_$abs_entry (tp, i, key, NO_WRITE, ep, (0), code);
	     if code = 0 then do;			/* got one */
		call ms_table_mgr_$new_entry (ntp, key, nep, code);
						/* create in new copy */
		if code = 0 then do;		/* got an entry */
		     call COPY_ENTRY ();		/* Copy the entry */
		     if code ^= 0 then goto ENTRY_ERROR;
		end;
		else if code = error_table_$id_already_exists then ;
						/* ignore */
		else do;
ENTRY_ERROR:
		     call com_err_ (code, ME, "Processing entry ^d key ^a.", i, key);
		     return;
		end;
	     end;
	     else if code = error_table_$bad_index then goto done_copying_entries;
	     else if code = error_table_$no_record then ;
	     else if code = error_table_$checksum_failure
	     then call ioa_$ioa_switch (iox_$error_output, "^a: Checksum failure processing entry ^d.", ME, i);
	     else do;
		call com_err_ (code, ME, "Reading entry ^d.", i);
		return;
	     end;
	     end;
done_copying_entries:
	call ms_table_mgr_$close (ntp, (0));		/* and clean up */
	call ms_table_mgr_$close (tp, (0));		/* switch names: */
	call copy_acl_ (ndirname, oename, ndirname, nename, ("0"b), code);
	if code ^= 0 then call com_err_ (code, ME, "Unable to copy MSTB ACL.");
	call hcs_$chname_file (ndirname, oename, oename, rtrim (oename) || ".-." || unique_chars_ (""b), code);
						/* XXX -> XXX.-.!shriek */
	if code ^= 0 then call com_err_ (code, ME, "Unable to rename old MSTB.");
	call hcs_$chname_file (ndirname, nename, nename, oename, code);
						/* !shriek.XXX -> XXX */
	if code ^= 0 then call com_err_ (code, ME, "Unable to rename new MSTB.");

	return;
%page;
COPY_ENTRY:
     procedure ();

/**** This internal procedure copies the old entry into the new entry
      and updates the table entry. */

	nep -> copy_entry = ep -> copy_entry;		/* Slurp */
	call ms_table_mgr_$update_entry (ntp, nep, code);
	return;
     end COPY_ENTRY;

     end salvage_mstb;


