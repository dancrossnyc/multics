/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */

ms_table_mgr_v2_:
     procedure;

/* Multi-segment table manager for large system tables. */
/* Written by C. Hornig, June 1979. */
/* Modified by C. Hornig, January 1980, for salvager */
/* Modified by B. Margolin, July 1983, for case-insensitive searching */

	declare (
	        (Dirname, Ename)	 character (*),	/* MSF pathname */
	        Create_info		 pointer,		/* to ms_table_info */
	        Type		 character (*) aligned,
						/* type of table (for checking) */
	        Tp		 pointer,		/* my data pointer */
	        Hp		 pointer,		/* header pointer */
	        Ne		 fixed bin (35),	/* number of used entries */
	        Key		 character (*),
	        Ep		 pointer,		/* pointer to entry */
	        Record		 fixed bin (35),
	        Code		 fixed (35)
	        )			 parameter;


/**** The following declarations are for the old (obsolete)
      version 2 MSTBs.  They exist here solely for conversion
      purposes. */

	declare 1 mt_header_v2	 aligned based,
		2 comp_hdr	 aligned like comp_header_v2,
		2 mti		 aligned like ms_table_info_v2,
		2 (number_components, entries_per_component, entry_offset)
				 unsigned fixed binary (18),
		2 (total_entries, deleted_entries, used_entries)
				 fixed binary (35),
		2 meters,
		  3 searches	 fixed binary (35),
		  3 entries_examined fixed binary (35);

	declare 1 comp_header_v2	 aligned based,
		2 type		 character (32),
		2 (dt_created, dt_updated)
				 fixed binary (71),
		2 component	 unsigned fixed binary (18);

	declare 1 entry_v2		 aligned based,
		2 (used, deleted, inconsistent)
				 bit unaligned,
		2 lock		 bit (36) aligned,	/* unused */
		2 key		 character (32) unaligned;

	declare ms_table_info_version_2
				 fixed init (2) internal static options (constant);

	declare 1 ms_table_info_v2	 aligned based,
		2 version		 fixed,		/* Should be 2 */
		2 type		 character (32),	/* what table is this? */
		2 (
		header_size,			/* length of table header in words */
		entry_size
		)		 unsigned fixed (18),
						/* same for table entries */
		2 max_entries	 unsigned fixed bin (18),
						/* how many entries */
		2 max_size	 fixed bin (19);	/* max segment length */

	dcl     1 mt_header		 aligned like mt_header_v2 based (hdrp);
	dcl     1 comp_header	 aligned like comp_header_v2 based (segp);
	dcl     1 entry		 aligned like entry_v2 based (ep);

	declare (
	        error_table_$namedup,
	        error_table_$bad_index,
	        error_table_$no_record,
	        error_table_$unimplemented_version,
	        error_table_$inconsistent,
	        error_table_$noalloc,
	        error_table_$noentry,
	        error_table_$request_id_ambiguous,
	        error_table_$id_already_exists,
	        error_table_$id_not_found
	        )			 fixed bin (35) external;

	declare hash_index_		 entry (pointer, fixed bin (21), fixed bin (35), fixed bin (35))
				 returns (fixed bin (35)),
	        hcs_$set_bc_seg	 entry (ptr, fixed bin (24), fixed bin (35)),
	        hcs_$set_max_length_seg
				 entry (pointer, fixed bin (19), fixed bin (35)),
	        msf_manager_$open	 entry (character (*), character (*), pointer, fixed bin (35)),
	        msf_manager_$get_ptr	 entry (pointer, unsigned fixed bin (18), bit aligned, pointer, fixed bin (24),
				 fixed bin (35)),
	        msf_manager_$close	 entry (pointer);

	declare code		 fixed bin (35),
	        i			 unsigned fixed bin (18),
	        bc		 fixed bin (24),
	        component		 unsigned fixed bin (18),
	        (enum, record)	 fixed bin (35),
	        now		 fixed bin (71),
	        case_ins		 bit (1),
	        ep		 pointer,
	        hdrp		 pointer,
	        segp		 pointer,
	        tp		 pointer;

	declare (addr, addrel, clock, divide, max, mod, null, pointer, size)
				 builtin;

/* * * * * * * * * * CREATE * * * * * * * * * */

create:
     entry (Dirname, Ename, Create_info, Code);

/* Create MSF "Path" with characteristics described in ms_table_info. */

	Code = 0;

	if Create_info -> ms_table_info_v2.version ^= ms_table_info_version_2
	     & Create_info -> ms_table_info_v2.version ^= 1
						/* We still support version 1 */
	then do;
		Code = error_table_$unimplemented_version;
		return;
	     end;

	call msf_manager_$open (Dirname, Ename, tp, code);
	if code ^= error_table_$noentry
	then do;
		if code = 0
		then do;
			Code = error_table_$namedup;
			call msf_manager_$close (tp);
		     end;
		else Code = code;
		return;
	     end;

	call msf_manager_$get_ptr (tp, 1, "1"b, segp, bc, code);
						/* create the second component to force an MSF */
	call msf_manager_$get_ptr (tp, 0, "1"b, hdrp, bc, code);
						/* create the header */
	if hdrp = null ()
	then do;
		Code = code;
		return;
	     end;
	mt_header.mti = Create_info -> ms_table_info_v2;
	mt_header.used_entries, mt_header.deleted_entries = 0;
	mt_header.entries_per_component =
	     divide (mt_header.max_size - size (comp_header), size (entry) + mt_header.entry_size, 18);
	mt_header.entry_offset =
	     1
	     +
	     divide (size (mt_header_v2) - size (comp_header) + mt_header.header_size - 1,
	     size (entry) + mt_header.entry_size, 18);
	mt_header.number_components =
	     max (1, divide (mt_header.max_entries + mt_header.entry_offset - 1, mt_header.entries_per_component, 18));
	mt_header.total_entries =
	     (1 + mt_header.number_components) * mt_header.entries_per_component - mt_header.entry_offset;

	now = clock ();
	do i = 0 to mt_header.number_components;
	     call msf_manager_$get_ptr (tp, i, "1"b, segp, bc, code);
	     if code ^= 0
	     then do;
		     Code = code;
		     return;
		end;
	     comp_header.type = mt_header.mti.type;
	     comp_header.dt_created, comp_header.dt_updated = now;
	     comp_header.component = i;
	     call hcs_$set_max_length_seg (segp, (mt_header.max_size), code);
	     call hcs_$set_bc_seg (segp, 36 * mt_header.max_size, code);
	end;

	call msf_manager_$close (tp);
return:
	return;

/* * * * * * * * * * OPEN * * * * * * * * * * */

open:
     entry (Dirname, Ename, Type, Tp, Hp, Code);

	Code = 0;
	Tp, Hp = null ();

	call msf_manager_$open (Dirname, Ename, tp, code);
	if tp = null ()
	then do;
		Code = code;
		return;
	     end;
	call get_header;
	if mt_header.version ^= ms_table_info_version_2 & mt_header.version ^= 1
						/* Upward compatible */
	then do;
		Code = error_table_$unimplemented_version;
		return;
	     end;
	if (mt_header.mti.type ^= Type) & (Type ^= "")
	then do;
		Code = error_table_$inconsistent;
		return;
	     end;
	Hp = pointer (hdrp, size (mt_header_v2));
	Tp = tp;
	return;

/* * * * * * * * * * VERIFY * * * * * * * * * */

verify:
     entry (Tp, Code);

	Code = 0;
	tp = Tp;

	call get_header;
	do i = 0 to mt_header.number_components;
	     call get_component (i);
	     if comp_header.type ^= mt_header.mti.type | comp_header.component ^= i
		| comp_header.dt_updated ^= mt_header.comp_hdr.dt_updated
	     then do;
		     Code = error_table_$inconsistent;
		     return;
		end;
	end;
	return;

/* * * * * * * * * * TABLE_INFO * * * * * * * * * * */

table_data:
     entry (Tp, Create_info, Hp, Ne, Code);

	Code, Ne = 0;
	Hp = null ();
	tp = Tp;

	call get_header;
	Create_info -> ms_table_info_v2 = mt_header.mti;
	Hp = pointer (hdrp, size (mt_header));
	Ne = mt_header.used_entries - mt_header.deleted_entries;
	return;

/* * * * * * * * * * CLOSE * * * * * * * * * */

close:
     entry (Tp, Code);

	Code = 0;
	tp = Tp;

	call msf_manager_$close (tp);
	return;

/* * * * * * * * * * NEW_ENTRY * * * * * * * * * */

new_entry:
     entry (Tp, Key, Ep, Code);

	Code = 0;
	Ep = null ();
	tp = Tp;

	call get_header;
	if hash_search (Key, "0"b)
	then do;
		Code = error_table_$id_already_exists;
		return;
	     end;

	if ep = null ()
	then do;
		Code = error_table_$noalloc;
		return;
	     end;

	entry.key = Key;
	entry.used = "1"b;
	mt_header.used_entries = mt_header.used_entries + 1;
	call set_checkpoint;
	Ep = addrel (ep, size (entry));
	return;

/* * * * * * * * * * FIND_ENTRY * * * * * * * * * */

find_entry:
     entry (Tp, Key, Ep, Code);

	case_ins = "0"b;
	go to find_entry_common;

find_entry_case_ins:
     entry (Tp, Key, Ep, Code);

	case_ins = "1"b;

find_entry_common:
	Code = 0;
	Ep = null ();
	tp = Tp;

	call get_header;
	if case_ins & mt_header.version = 1
	then do;					/* No case-insensitive searching in v1 */
		Code = error_table_$unimplemented_version;
		return;
	     end;
	if ^hash_search (Key, case_ins)
	then do;
		Code = error_table_$id_not_found;
		return;
	     end;
	if ep = null ()
	then do;					/* Ambiguous */
		Code = error_table_$request_id_ambiguous;
		return;
	     end;

	Ep = addrel (ep, size (entry));		/* return pointer to HIS part of entry */
	return;

/* * * * * * * * * * DELETE_ENTRY * * * * * * * * * */

delete_entry:
     entry (Tp, Key, Code);

	Code = 0;
	tp = Tp;

	call get_header;
	if ^hash_search (Key, "0"b)
	then do;
		Code = error_table_$id_not_found;
		return;
	     end;

	entry.deleted = "1"b;
	mt_header.deleted_entries = mt_header.deleted_entries + 1;
	call set_checkpoint;
	return;

/* * * * * * * * * * ABS_ENTRY * * * * * * * ** * */

abs_entry:
     entry (Tp, Record, Key, Ep, Code);

	Code = 0;
	Ep = null ();
	Key = "";
	tp = Tp;

	call get_header;
	record = Record - 1;
	if record + mt_header.entry_offset >= mt_header.total_entries
	then do;
		Code = error_table_$bad_index;
		return;
	     end;
	call get_entry (record);
	if entry.deleted | ^entry.used
	then Code = error_table_$no_record;
	else do;
		Ep = addrel (ep, size (entry));
		Key = entry.key;
	     end;
	return;

/* * * * * * * * * * NUMBER_ENTRIES * * * * * * * * * */

number_entries:
     entry (Tp) returns (unsigned fixed (18));

	tp = Tp;

	call get_header;
	return (mt_header.used_entries - mt_header.deleted_entries);

/* * * * * * * * * * GET_HEADER * * * * * * * * * */

get_header:
     procedure;

	call msf_manager_$get_ptr (tp, 0, "0"b, hdrp, bc, code);
	if hdrp = null ()
	then do;
		Code = code;
		goto return;
	     end;
	segp = hdrp;
	component = 0;
     end;

/* * * * * * * * * * GET_COMPONENT * * * * * * * * * * */

get_component:
     procedure (Component);

	declare Component		 unsigned fixed bin (18) parameter;

	component = Component;
	call msf_manager_$get_ptr (tp, component, "0"b, segp, bc, code);
	if segp = null ()
	then do;
		Code = code;
		goto return;
	     end;
	return;
     end;

/* * * * * * * * * * SET_CHECKPOINT * * * * * * * * * */

set_checkpoint:
     procedure;

	declare now		 fixed bin (71);

	now = clock ();
	do i = 0 to mt_header.number_components;
	     call get_component (i);
	     comp_header.dt_updated = now;
	end;
     end;

/* * * * * * * * * * HASH_SEARCH * * * * * * * * * */

hash_search:
     procedure (Key, Case_ins) returns (bit aligned);

	declare (
	        Key		 character (*),
	        Case_ins		 bit (1)
	        )			 parameter;
	declare (hash_key, match_key)	 character (32) aligned,
	        (found_one, case_ins)	 bit (1),
	        save_ep		 ptr,
	        hash		 fixed bin (35);

	if mt_header.version = 1
	then do;
		hash_key, match_key = Key;
		case_ins = "0"b;
	     end;
	else do;					/* Version 2, different hash */
		hash_key = lowercase (Key);
		case_ins = Case_ins;
		if case_ins
		then match_key = hash_key;		/* Lowercase */
		else match_key = Key;		/* Normal */
	     end;
	hash = hash_index_ (addr (hash_key), 32, 1, mt_header.total_entries);
						/*	     mt_header.meters.searches = mt_header.meters.searches + 1; */
	found_one = "0"b;
	save_ep = null ();
	do enum = hash to mt_header.total_entries - mt_header.entry_offset - 1, 0 to hash - 1;
	     call get_entry (enum);			/*		mt_header.meters.entries_examined = mt_header.meters.entries_examined + 1; */
	     if ^entry.used
	     then do;				/* End of hash bucket */
		     if case_ins & found_one
		     then do;
			     ep = save_ep;
			     return ("1"b);
			end;
		     return ("0"b);			/* Don't null pointer to unused entry */
		end;
	     if ^entry.deleted
	     then do;
		     if case_ins
		     then do;			/* Case-insensitive match */
			     if lowercase (entry.key) = match_key
			     then if found_one
				then do;
					ep = null ();
						/* This nonsense combination */
					return ("1"b);
						/* indicates ambiguous match */
				     end;
				else do;
					found_one = "1"b;
					save_ep = ep;
						/* Save for later */
				     end;
			end;			/* Case-sensitive match */
		     else if entry.key = match_key
		     then return ("1"b);
		end;
	end;
	if found_one
	then do;
		ep = save_ep;
		return ("1"b);
	     end;
	else do;
		ep = null ();
		return ("0"b);
	     end;

lowercase:
     proc (String) returns (char (32)) reducible;

	dcl     String		 char (*) parameter;
	dcl     (
	        LOWER		 init ("abcdefghijklmnopqrstuvwxyz"),
	        UPPER		 init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
	        )			 char (26) int static options (constant);
	dcl     translate		 builtin;

	return (translate (String, LOWER, UPPER));

     end lowercase;


     end hash_search;

/* * * * * * * * * * GET_ENTRY * * * * * * * * * */

get_entry:
     procedure (Enum);

	declare Enum		 fixed bin (35) parameter,
	        enum		 fixed bin (35),
	        ecomp		 unsigned fixed bin (18);

	enum = Enum + mt_header.entry_offset;
	ecomp = divide (enum, mt_header.entries_per_component, 18);
	if ecomp ^= component
	then call get_component (ecomp);
	ep = pointer (segp,
	     size (comp_header) + (size (entry) + mt_header.entry_size) * mod (enum, mt_header.entries_per_component));
     end get_entry;

     end;
