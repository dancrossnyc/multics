/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style2 */

convert_v2_mstb_:
     procedure (P_source_dirname, P_source_entryname, P_target_dirname, P_target_entryname, P_convert_procedure,
	P_new_entry_size, P_code);

/**** This program converts a V2 MSTB to a V3 MSTB.  It relies upon the
      supplied conversion procedure to translate a V2 entry to a V3 entry. */

/**** Written 1984-07-31 by EJS */

/* Parameters */

	dcl     P_code		 fixed bin (35) parameter;
	dcl     P_convert_procedure	 entry (ptr, ptr, ptr, fixed bin (35)) variable parameter;
	dcl     P_ec		 fixed bin (35) parameter;
	dcl     P_new_entry_size	 fixed bin (18) unsigned;
	dcl     P_septr		 ptr parameter;
	dcl     P_source_dirname	 char (*) parameter;
	dcl     P_source_entryname	 char (*) parameter;
	dcl     P_table_ptr		 ptr parameter;
	dcl     P_target_dirname	 char (*) parameter;
	dcl     P_target_entryname	 char (*) parameter;
	dcl     P_teptr		 ptr parameter;

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     i			 fixed bin (35);
	dcl     key		 char (32);
	dcl     source_dirname	 char (168);
	dcl     source_entry_ptr	 ptr;
	dcl     target_entry_ptr	 ptr;
	dcl     source_entryname	 char (32);
	dcl     source_header_ptr	 ptr;
	dcl     source_table_ptr	 ptr;
	dcl     target_dirname	 char (168);
	dcl     target_entryname	 char (32);
	dcl     target_header_ptr	 ptr;
	dcl     target_table_ptr	 ptr;

/* Structures */

/**** The following declarations are of the old (obsolete) version
      2 MSTBs.  They are here solely for the pupose of converting
      V2 MSTBs to Version 3. */

	declare 1 mt_header_v2	 aligned based,
		2 comp_hdr	 aligned like comp_header_v2,
		2 mti		 aligned like ms_table_info_v2,
		2 (number_components, entries_per_component, entry_offset)
				 unsigned fixed binary (18),
		2 (total_entries, deleted_entries, used_entries)
				 fixed binary (35),
		2 meters,
		  3 searches	 fixed binary (35),
		  3 entries_examined fixed binary (35);

	declare 1 comp_header_v2	 aligned based,
		2 type		 character (32),
		2 (dt_created, dt_updated)
				 fixed binary (71),
		2 component	 unsigned fixed binary (18);

	declare 1 entry_v2		 aligned based,
		2 (used, deleted, inconsistent)
				 bit unaligned,
		2 lock		 bit (36) aligned,	/* unused */
		2 key		 character (32) unaligned;

	declare ms_table_info_version_2
				 fixed init (2) internal static options (constant);

	declare 1 ms_table_info_v2	 aligned based,
		2 version		 fixed,		/* Should be 2 */
		2 type		 character (32),	/* what table is this? */
		2 (
		header_size,			/* length of table header in words */
		entry_size
		)		 unsigned fixed (18),
						/* same for table entries */
		2 max_entries	 unsigned fixed bin (18),
						/* how many entries */
		2 max_size	 fixed bin (19);	/* max segment length */

	dcl     1 mti_v2		 aligned like ms_table_info_v2;
	dcl     1 mti_v3		 aligned like ms_table_info;

/* External Entries */

	dcl     ms_table_mgr_$close	 entry (ptr, fixed bin (35));
	dcl     ms_table_mgr_$create	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     ms_table_mgr_$new_entry
				 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     ms_table_mgr_$open	 entry (char (*), char (*), char (*) aligned, ptr, ptr, fixed bin (35));
	dcl     ms_table_mgr_$update_entry
				 entry (ptr, ptr, fixed bin (35));
	dcl     ms_table_mgr_v2_$abs_entry
				 entry (ptr, fixed bin (35), char (*), ptr, fixed bin (35));
	dcl     ms_table_mgr_v2_$close entry (ptr, fixed bin (35));
	dcl     ms_table_mgr_v2_$open	 entry (char (*), char (*), char (*) aligned, ptr, ptr, fixed bin (35));
	dcl     ms_table_mgr_v2_$table_data
				 entry (ptr, ptr, ptr, fixed bin (35), fixed bin (35));

/* External Static */

	dcl     error_table_$bad_index fixed bin (35) external static;
	dcl     error_table_$unimplemented_version
				 fixed bin (35) external static;
/* Conditions */

     dcl cleanup condition;
%page;
/* Program */

/* convert_v2_mstb_: entry  (P_source_dirname, P_source_entryname, P_target_dirname, P_target_entryname, P_convert_procedure, P_new_entry_size, P_code); */

	source_dirname = P_source_dirname;
	source_entryname = P_source_entryname;
	target_dirname = P_target_dirname;
	target_entryname = P_target_entryname;

	source_table_ptr = null ();			/* For cleanup purposes */
	target_table_ptr = null ();

	on condition (cleanup)
	     call CLEAN_UP ();

	call ms_table_mgr_v2_$open (source_dirname, source_entryname, "", source_table_ptr, source_header_ptr, code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

	call ms_table_mgr_v2_$table_data (source_table_ptr, addr (mti_v2), source_header_ptr, (0), code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

	if mti_v2.version ^= 2 & mti_v2.version ^= 1
	then do;
		code = error_table_$unimplemented_version;
		goto RETURN_TO_CALLER;
	     end;

	mti_v3 = mti_v2, by name;			/* Keep all the rest the same */
	mti_v3.version = MS_TABLE_INFO_VERSION_3;	/* Upgrade to V3 */
	mti_v3.keep_meters = "0"b;			/* This used to be the default */

	if P_new_entry_size ^= 0
	then mti_v3.entry_size = P_new_entry_size;

	call ms_table_mgr_$create (target_dirname, target_entryname, addr (mti_v3), code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

	call ms_table_mgr_$open (target_dirname, target_entryname, (mti_v3.type), target_table_ptr, target_header_ptr,
	     code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

/**** I'm not sure how to find the maximum number of entries.  This should
      work, however. */

	do i = 1 by 1 while (code ^= error_table_$bad_index);
	     call PROCESS_ENTRY (i);
	end;

	if code = error_table_$bad_index
	then code = 0;

RETURN_TO_CALLER:
	call CLEAN_UP ();
	P_code = code;
	return;
%page;
default_convert_proc:
     entry (P_table_ptr, P_septr, P_teptr, P_ec);

	dcl     based_storage	 (based_storage_length) bit (36) aligned based;
	dcl     based_storage_length	 fixed bin (18) unsigned;
	dcl     1 table_info	 aligned like mti_v2;

	call ms_table_mgr_v2_$table_data (P_table_ptr, addr (table_info), (null ()), (0), P_ec);
	if P_ec ^= 0
	then return;

	based_storage_length = table_info.entry_size;

	P_teptr -> based_storage = P_septr -> based_storage;
	return;
%page;
PROCESS_ENTRY:
     procedure (idx);

	dcl     idx		 fixed bin (35);

	call ms_table_mgr_v2_$abs_entry (source_table_ptr, idx, key, source_entry_ptr, code);
	if code ^= 0
	then return;

	call ms_table_mgr_$new_entry (target_table_ptr, key, target_entry_ptr, code);
	if code ^= 0
	then goto RETURN_TO_CALLER;			/* Need better error handling */

	call P_convert_procedure (source_table_ptr, source_entry_ptr, target_entry_ptr, code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

	call ms_table_mgr_$update_entry (target_table_ptr, target_entry_ptr, code);
	if code ^= 0
	then goto RETURN_TO_CALLER;			/* Need better error handling */

	return;
     end PROCESS_ENTRY;
%page;
CLEAN_UP: procedure ();

	if target_table_ptr ^= null ()
	then call ms_table_mgr_$close (target_table_ptr, (0));
	if source_table_ptr ^= null ()
	then call ms_table_mgr_v2_$close (source_table_ptr, (0));

	return;
end CLEAN_UP;

/* format: off */
%page; %include ms_table_info;
%page; %include ms_table_status;
%page; %include mstb_format;
/* format: on */

     end convert_v2_mstb_;
