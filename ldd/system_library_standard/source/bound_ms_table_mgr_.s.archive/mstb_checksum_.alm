" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" ***********************************************************
	name	mstb_checksum_

" Checksums for mstb components.  It logically adds up double words
" and then collapses the resulting double word into an 18-bit checksum.
" 

" BIM 1984-07-23
" Modified 1984-08-13 by E. Swenson so that it would work.
"
" declare mstb_checksum_$sum_entry (pointer, fixed bin (35)) returns (fixed bin (18) unsigned);
"
" checksum =  mstb_checksum_$sum_entry (addr (vector), n_doublewords);
"
" Where: vector is a double-word aligned vector of pairs
" n_doublewords is its length in double-words.
" checksum (output) is the resultant checksum.
"
" declare mstb_checksum_$check_entry entry (pointer, fixed bin (35), fixed bin (18) unsigned)
"			       returns (bit (1) aligned)
" valid = mstb_checksum_$check_entry (vector_ptr, n_doublewords, checksum)
"
"

" Parameters for sum_entry

	equ	se.vector_ptr,2
	equ	se.vector_count,4
	equ	se.entry_checksum,6

" Parameters for check_entry

	equ	ce.vector_ptr,2
	equ	ce.vector_count,4
	equ	ce.checksum,6
	equ	ce.return_value,8

"

	entry	sum_entry,check_entry

sum_entry:
	epp1	ap|se.vector_ptr,*	          " ptr to ptr to vector
	epp1	pr1|0,*			" ptr to vector
	lda	ap|se.vector_count,*	" N
	als	1			" offset 2 past last
	eax1	0,al			" into X1
	fld	0,du
sum_entry.loop:
	adlaq	pr1|-2,x1			" Pick up next pair
	sbx1	2,du			" done?
	tnz	sum_entry.loop		" not until zero
	sta	ap|se.entry_checksum,*	" need a temporary
	adlq	ap|se.entry_checksum,*	" add a and q
	eax1	0,ql
	anq	=o777777,du
	stq	ap|se.entry_checksum,*
	adlx1	ap|se.entry_checksum,*	" add upper to lower
	sxl1	ap|se.entry_checksum,*	" store result
	lda	=o777777,ql
	ansa	ap|se.entry_checksum,*	" only want upper 18 bits
	short_return

check_entry:
	epp1	ap|ce.vector_ptr,*
	epp1	pr1|0,*		          " pointer to the vector
	lda	ap|ce.vector_count,*	" N
	als	1			" offset 2 past last
	eax1	0,al			" into X1
	fld	0,dl
"	lda	0,dl
"	ldq	ap|ce.checksum,*		" ignore bit offset
"	anq	=o777777,dl
"	negl				" prime checksum with initial
					" value.
check_entry.loop:
	adlaq	pr1|-2,x1			" Pick up next pair
	sbx1	2,du			" done?
	tnz	check_entry.loop		" not until zero
	sta	ap|ce.return_value,*	" need a temporary
	adlq	ap|ce.return_value,*	" add a and q
	eax1	0,ql
	anq	=o777777,du
	stq	ap|ce.return_value,*
	adlx1	ap|ce.return_value,*	" add upper to lower
	sxl1	ap|ce.return_value,*	" store result
	lda	=o777777,ql
	ansa	ap|ce.return_value,*	" only want upper 18 bits
	ldq	ap|ce.return_value,*	" need it to compare
	cmpq	ap|ce.checksum,*
	tnz	check_entry.fail
	lda	=o400000,du
	sta	ap|ce.return_value,*
	short_return
check_entry.fail:
	stz	ap|ce.return_value,*
	short_return

	end
