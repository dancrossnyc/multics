/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1992   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(92-09-03,WAAnderson), approve(92-09-03,MECR0016),
     audit(92-09-17,Vu), install(92-09-24,MR12.5-1017):
     During message segment compaction the message segment gets truncated to a
     length of 0. This action overwrites the lockword held by the calling
     process.  The fix ensures the lockword (which is the first word in the
     segment) does not get set to 0.
  2) change(92-10-02,WAAnderson), approve(92-10-02,MCR8271),
     audit(92-10-13,Vu), install(92-10-21,MR12.5-1032):
     This MCR closes MECR0016.
                                                   END HISTORY COMMENTS */

/* Message segment primitive operations (mseg_) which manipulate the entire message segment as a whole */

/* Created:  April 1985 by G. Palter based upon mseg_ and mseg_compact_ */

/* format: style3,linecom */

mseg_segment_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl	P_mseg_operation_ptr
			pointer parameter;
dcl	P_code		fixed binary (35) parameter;

dcl	P_compaction_ratio	float binary parameter;	/* compact_seg: %'age of waste to cause compaction (I) */

dcl	P_source_mseg_operation_ptr			/* copy_seg: -> description of segment to copy (I) */
			pointer parameter;
dcl	P_target_mseg_operation_ptr			/* copy_seg: -> description of target segment (I) */
			pointer parameter;
dcl	P_error_on_target	bit (1) aligned parameter;	/* copy_seg: set ON => target in error (O) */

dcl	P_salvaged_flag	bit (1) aligned parameter;	/* get_salvage_flag_seg: set ON => segment was salvaged (O) */

dcl	P_max_length	fixed binary (19) parameter;	/* set_max_length_seg: the segment's new max length (I) */


/* Local copies of parameters */

dcl	1 source_mseg_operation
			aligned based (source_mseg_operation_ptr) like mseg_operation;
dcl	source_mseg_operation_ptr
			pointer;

dcl	1 target_mseg_operation
			aligned based (target_mseg_operation_ptr) like mseg_operation;
dcl	target_mseg_operation_ptr
			pointer;

dcl	segment_in_error	fixed binary;
dcl	(
	SOURCE		initial (1),
	TARGET		initial (2)
	)		fixed binary static options (constant);

dcl	code		fixed binary (35);


/* Remaining declartions */

dcl	system_area	area based (system_area_ptr);
dcl	system_area_ptr	pointer;

dcl	1 target_mseg_segment_header
			aligned based (target_mseg_ptr) like mseg_segment.header;
dcl	target_mseg_ptr	pointer;
dcl	target_mseg_dir_name
			character (168);
dcl	target_mseg_entryname
			character (32);

dcl	source_mseg_ptr	pointer;
dcl	source_mseg_dir_name
			character (168);
dcl	source_mseg_entryname
			character (32);

dcl	source_mseg_message_bits
			bit (source_mseg_operation.ms_len) aligned based (source_mseg_operation.ms_ptr);

dcl	compacted_segment	(compacted_size) bit (36) aligned based;
dcl	compacted_size	fixed binary (19);

dcl	1 local_mseg_segment_header
			aligned like mseg_segment.header;
dcl	initialize_block_map
			bit (1) aligned;

dcl	1 an_operation	aligned like mseg_operation;

dcl	1 local_aef	aligned like audit_event_flags;

dcl	operation_name	character (64);
dcl	operation_specific_return
			entry (fixed binary (35)) variable;
dcl	operation_specific_abort
			entry () variable;

dcl	mseg_dir_name	character (168);
dcl	mseg_entryname	character (32);

dcl	(rqo_detected, salvage_if_errors, free_source_message_bits)
			bit (1) aligned;

dcl	(source_max_length, target_max_length)
			fixed binary (19);
dcl	(n_new_blocks, n_new_header_blocks, n_virgin_blocks, n_used_or_wasted_blocks, n_wasted_blocks)
			fixed binary (18);

dcl       TRUNCATE_ALL_BUT_THE_LOCKWORD fixed bin (19) int static options (constant) init (1); 

dcl	access_operations_$mseg_attr_mod
			bit (36) aligned external;

dcl	(
	error_table_$action_not_performed,
	error_table_$bad_segment,
	error_table_$clnzero,
	error_table_$invalid_max_length,
	error_table_$messages_off,
	error_table_$no_message,
	error_table_$rqover
	)		fixed binary (35) external;

dcl	access_audit_r1_$log_obj_ptr
			entry () options (variable);
dcl	aim_util_$get_access_class
			entry (bit (72) aligned) returns (bit (72) aligned);
dcl	get_process_id_	entry () returns (bit (36));
dcl	get_system_free_area_
			entry () returns (pointer);
dcl	get_temp_segment_	entry (character (*), pointer, fixed binary (35));
dcl	hcs_$get_max_length_seg
			entry (pointer, fixed binary (19), fixed binary (35));
dcl	hcs_$set_max_length_seg
			entry (pointer, fixed binary (19), fixed binary (35));
dcl	hcs_$truncate_seg	entry (pointer, fixed binary (19), fixed binary (35));
dcl	mseg_message_$add_message_for_mseg
			entry (pointer, character (*), fixed binary (35));
dcl	mseg_message_$read_message_for_mseg
			entry (pointer, character (*), pointer, fixed binary (35));
dcl	mseg_utils_$abort_operation
			entry (pointer);
dcl	mseg_utils_$begin_operation
			entry (bit (36) aligned, pointer, character (*), character (*), character (*), pointer,
			bit (1) aligned, fixed binary (35));
dcl	mseg_utils_$finish_operation
			entry (pointer);
dcl	mseg_utils_$salvage_for_cause
			entry (pointer, fixed binary (35)) options (variable);
dcl	release_temp_segment_
			entry (character (*), pointer, fixed binary (35));

dcl	(addr, copy, currentsize, divide, float, length, low, mod, null, rtrim, string, substr, unspec)
			builtin;

dcl	(cleanup, record_quota_overflow)
			condition;
%page;
/* Compact the segment */

mseg_segment_$compact_seg:
     entry (P_mseg_operation_ptr, P_compaction_ratio, P_code);

	call setup_operation ();			/* for cleanup handler */
	target_mseg_ptr = null ();
	salvage_if_errors, free_source_message_bits = "0"b;
	operation_specific_return = return_from_compact_seg;
	operation_specific_abort = abort_compact_seg;

	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$compact_seg);
	if rqo_detected
	then call return_from_operation (0);
	else if code ^= 0
	then call return_from_operation (code);

	if mseg_segment.n_messages = 0		/* can't be any waste unless there's something present */
	then call return_from_operation (0);


	/*** When deciding whether to compact, the ratio of unused blocks to the "size" of the segment is checked
	     against the caller's compaction ratio.  If the unused ratio exceeds the compaction ratio and there is at
	     least one page of unused blocks, the segment is compacted.  However, if the caller's compaction ratio is
	     negative, the compaction is always performed regardless of the amount of space it may (or may not) recover.
	     In order to make the unused block ratio useful, the unused blocks after the last used block are not counted
	     when computing either the size of the segment or the number of unused blocks. */

	if P_compaction_ratio >= 0.0e0
	then do;

		n_virgin_blocks = mseg_segment.n_blocks_allocated - find_last_one_bit (mseg_segment.block_map.map);
		n_used_or_wasted_blocks = mseg_segment.n_blocks_allocated - n_virgin_blocks;
		n_wasted_blocks = mseg_segment.n_blocks_unused - n_virgin_blocks;

		if n_wasted_blocks = 0		/* there's no waste at all */
		then call return_from_operation (0);

		if (float (n_wasted_blocks) / float (n_used_or_wasted_blocks)) < P_compaction_ratio
		then call return_from_operation (0);	/* there isn't enough waste to satisfy our caller */

		if (mseg_segment.block_size * n_wasted_blocks)
		     < mod ((mseg_segment.block_size * n_used_or_wasted_blocks), 1024)
		then call return_from_operation (0);	/* we won't recover any pages so why bother */
	     end;


	/*** Control arrives here only if we are going to compact the segment -- We compact the segment by copying its
	     messages into a "message segment" in the process directory.  This so-called message segment is actually
	     just a temporary segment with an associated mseg_operation structure containing the necessary information
	     to satisfy mseg_message_$add_message_for_mseg. */

	/*** Finish preparation of the source -- Save the segment's wakeup state in its mseg_operation so we can store
	     it in the target segment while initalizing the target's header.  Also, to insure that the target's block
	     map is the proper length, we claim that the target's max length is equal to the source even though, as a
	     temporary segment, its max length may indeed be larger. */

	source_mseg_operation_ptr = mseg_operation_ptr;
	source_mseg_ptr = mseg_ptr;

	if mseg_segment.wakeup_state_set
	then call get_wakeup_state_seg ();
	else mseg_operation.wakeup_state_valid = "0"b;

	call hcs_$get_max_length_seg (mseg_ptr, target_max_length, code);
	if code ^= 0
	then call return_from_operation (code);


	/*** Prepare the target -- Create an mseg_operation which will satisfy mseg_message_$add_message_for_mseg and
	     then get a temporary segment to serve as the target. */

	an_operation = source_mseg_operation;
	an_operation.mseg_ptr_valid,			/* the source segment is never the target ... */
	     an_operation.access_info_valid = "0"b;	/* ... and its access info doesn't apply to the target */
	an_operation.suppress_access_checks = "1"b;	/* must be able to  copy all messages */

	call get_temp_segment_ (operation_name, target_mseg_ptr, code);
	if code ^= 0
	then call return_from_operation (code);

	an_operation.mseg_ptr = target_mseg_ptr;
	an_operation.mseg_ptr_valid = "1"b;

	target_mseg_operation_ptr = addr (an_operation);

	call mseg_utils_$begin_operation (mseg_operations_$copy_seg_target, target_mseg_operation_ptr, ((64)" "),
	     target_mseg_dir_name, target_mseg_entryname, target_mseg_ptr, rqo_detected, code);
	if rqo_detected
	then call return_from_operation (error_table_$rqover);
	else if code ^= 0
	then call return_from_operation (code);


	/*** Copy the source segment to its "target" which actually performs the compaction */

	salvage_if_errors = "1"b;			/* if we RQO reading from the segment, it's busted */

	on record_quota_overflow call return_rqover_from_operation ();

	call initialize_target_header ("1"b);		/* put in the saved wakeup state */

	call copy_messages ();


	/*** Move the target back into the real segment which will complete this operation -- As the compacted segment
	     is guaranteed to not use more pages than its original, we can pratically guarantee that an RQO will not
	     occur on pages that had been zero in the original by first truncating the segment.  If, however, an RQO
	     does occur while copying into the segment, we will stop the copy and salvage what's there as our handler
	     for record_quota_overflow will prevent an automatic salvage by mseg_utils_$abort_operation. */

	segment_in_error = SOURCE;

	call hcs_$truncate_seg (source_mseg_ptr, TRUNCATE_ALL_BUT_THE_LOCKWORD, (0));

	compacted_size =
	     target_mseg_segment_header.block_size
	     * (target_mseg_segment_header.n_blocks_allocated - target_mseg_segment_header.n_blocks_unused);

	source_mseg_ptr -> compacted_segment = target_mseg_ptr -> compacted_segment;

	revert record_quota_overflow;			/* success! */
	call return_from_operation (0);



/* Special processing required upon completion of a compact_seg operation */

return_from_compact_seg:
     procedure (p_code);

dcl	p_code		fixed binary (35) parameter;

	if target_mseg_ptr ^= null ()
	then do;
		call release_temp_segment_ (operation_name, target_mseg_ptr, (0));
		target_mseg_ptr = null ();
	     end;

	if salvage_if_errors & (p_code ^= 0)		/* the flag is only set while actually copying */
	then if segment_in_error = SOURCE
	     then if p_code = error_table_$rqover
		then call mseg_utils_$salvage_for_cause (source_mseg_operation_ptr, error_table_$rqover);

	if free_source_message_bits			/* this flag is also only set while acutally copying */
	then if source_mseg_operation.message_info.ms_ptr ^= null ()
	     then do;
		     free source_mseg_message_bits in (system_area);
		     source_mseg_operation.message_info.ms_ptr = null ();
		end;

	return;

     end return_from_compact_seg;



/* Special processing required upon abnormal termination of a compact_seg operation */

abort_compact_seg:
     procedure ();

	if free_source_message_bits			/* this flag is only set while acutally copying */
	then if source_mseg_operation.message_info.ms_ptr ^= null ()
	     then do;
		     free source_mseg_message_bits in (system_area);
		     source_mseg_operation.message_info.ms_ptr = null ();
		end;

	if target_mseg_ptr ^= null ()
	then do;
		call release_temp_segment_ (operation_name, target_mseg_ptr, (0));
		target_mseg_ptr = null ();
	     end;

	return;

     end abort_compact_seg;
%page;
/* Copy the segment -- This entrypoint doesn't use mseg_operation_ptr as we are invoked with two message segments which
   must be given equal treatment in terms of begin/finish/abort operation actions. */

mseg_segment_$copy_seg:
     entry (P_source_mseg_operation_ptr, P_target_mseg_operation_ptr, P_error_on_target, P_code);

	call setup_operation ();			/* for cleanup handler */
	source_mseg_operation_ptr, target_mseg_operation_ptr = null ();
	salvage_if_errors, free_source_message_bits = "0"b;
	operation_specific_return = return_from_copy_seg;
	operation_specific_abort = abort_copy_seg;

	on cleanup call operation_was_aborted ();


	/*** Lock the target segment and verify that it is, in fact, empty */

	segment_in_error = TARGET;

	target_mseg_operation_ptr = P_target_mseg_operation_ptr;

	call mseg_utils_$begin_operation (mseg_operations_$copy_seg_target, target_mseg_operation_ptr, operation_name,
	     target_mseg_dir_name, target_mseg_entryname, target_mseg_ptr, rqo_detected, code);
	if rqo_detected
	then call return_from_operation (error_table_$rqover);
	else if code ^= 0
	then call return_from_operation (code);

	if (target_mseg_segment_header.n_messages ^= 0) | target_mseg_segment_header.wakeup_state_set
	then call return_from_operation (error_table_$clnzero);


	/*** Lock the source segment -- If it's empty, we're done. */

	segment_in_error = SOURCE;

	source_mseg_operation_ptr = P_source_mseg_operation_ptr;

	call mseg_utils_$begin_operation (mseg_operations_$copy_seg_source, source_mseg_operation_ptr, operation_name,
	     source_mseg_dir_name, source_mseg_entryname, source_mseg_ptr, rqo_detected, code);
	if rqo_detected				/* couldn't even lock the source: there's nothing to copy */
	then call return_from_operation (0);
	else if code ^= 0
	then call return_from_operation (code);


	/*** Verify that the max length of the target is, at least, as large as the source */

	segment_in_error = SOURCE;
	call hcs_$get_max_length_seg (source_mseg_ptr, source_max_length, code);
	if code ^= 0
	then call return_from_operation (code);

	segment_in_error = TARGET;
	call hcs_$get_max_length_seg (target_mseg_ptr, target_max_length, code);
	if code ^= 0
	then call return_from_operation (code);

	if target_max_length < source_max_length	/* it may not all fit */
	then call return_from_operation (error_table_$invalid_max_length);


	/*** Everything looks OK -- Copy the segment */

	salvage_if_errors = "1"b;			/* RQO on source or any error on target should salvage */

	on record_quota_overflow call return_rqover_from_operation ();

	call initialize_target_header ("0"b);		/* do not copy the source's wakeup state */

	call copy_messages ();

	revert record_quota_overflow;

	call return_from_operation (0);		/* success! */



/* Return after completion of the copy_seg operation -- If an RQO occured while accessing the source segment, we will
   salvage it because a properly formed message segment should never have message block offsets which reference an all
   zero page and, as we are handling RQO ourselves, the standard abort_operation salvage will not occur.  On the other
   hand, if any error is detected while accessing the target segment, we will salvage it because we shouldn't get an error
   adding messages. */

return_from_copy_seg:
     procedure (p_code);

dcl	p_code		fixed binary (35) parameter;

	if salvage_if_errors & (p_code ^= 0)		/* the flag is only set while actually copying */
	then if segment_in_error = SOURCE
	     then if p_code = error_table_$rqover
		then call mseg_utils_$salvage_for_cause (source_mseg_operation_ptr, error_table_$rqover);
		else ;

	     else if segment_in_error = TARGET
	     then if p_code ^= error_table_$bad_segment
		then do;				/* only salvage if mseg_message_ hasn't already done so */
			call mseg_utils_$salvage_for_cause (target_mseg_operation_ptr, p_code);
			if p_code ^= error_table_$rqover
			then p_code = error_table_$bad_segment;
		     end;

	if free_source_message_bits			/* this flag is also only set while acutally copying */
	then if source_mseg_operation.message_info.ms_ptr ^= null ()
	     then do;
		     free source_mseg_message_bits in (system_area);
		     source_mseg_operation.message_info.ms_ptr = null ();
		end;

	if target_mseg_operation_ptr ^= null ()
	then call mseg_utils_$finish_operation (target_mseg_operation_ptr);

	if source_mseg_operation_ptr ^= null ()
	then call mseg_utils_$finish_operation (source_mseg_operation_ptr);

	P_error_on_target = (segment_in_error = TARGET);	/* tell caller where (if anywhere) the error occured */

	return;

     end return_from_copy_seg;



/* Abort the copy_seg operation */

abort_copy_seg:
     procedure ();

	if free_source_message_bits			/* this flag is only set while acutally copying */
	then if source_mseg_operation.message_info.ms_ptr ^= null ()
	     then do;
		     free source_mseg_message_bits in (system_area);
		     source_mseg_operation.message_info.ms_ptr = null ();
		end;

	call mseg_utils_$abort_operation (source_mseg_operation_ptr);

	call mseg_utils_$abort_operation (target_mseg_operation_ptr);

	return;

     end abort_copy_seg;
%page;
/* Get the salvaged flag -- The salvaged indicator is set whenever the message segment is salvaged and remains set until
   it explicitly reset by someone with "d" extended access to the segment. */

mseg_segment_$get_salvaged_flag_seg:
     entry (P_mseg_operation_ptr, P_salvaged_flag, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$get_salvaged_flag_seg);

	if rqo_detected				/* the header is zero and accessing it causes RQOs, */
	then P_salvaged_flag = "0"b;			/* ... so we know the flag is off without actually looking */

	else if code = 0				/* we can look at the header without trouble */
	then P_salvaged_flag = mseg_segment.flags.salvaged;

	call return_from_operation (code);
%page;
/* Get the wakeup acceptance state */

mseg_segment_$get_wakeup_state_seg:
     entry (P_mseg_operation_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$get_wakeup_state_seg);
	if rqo_detected				/* header's empty so no one is accepting wakeups here */
	then call return_from_operation (error_table_$messages_off);
	else if code ^= 0
	then call return_from_operation (code);

	if ^mseg_segment.wakeup_state_set
	then call return_from_operation (error_table_$messages_off);

	call get_wakeup_state_seg ();

	call return_from_operation (0);



/* Actually get the wakeup state -- This internal procedure is only invoked if the message segment's header claims that
   the wakeup state is actually present.  In earlier version 5 message segments, the wakeup state was actually stored in
   several pieces throughout the header.  This internal procedure is also used by compact_seg. */

get_wakeup_state_seg:
     procedure ();

						/** format: idind30 */
dcl	1 old_wakeup_state		aligned,
	  2 state,
	    3 switches		aligned,
	      4 allow_normal	bit (1) unaligned,
	      4 allow_urgent	bit (1) unaligned,
	      4 pad		bit (34) unaligned,
	    3 lock_id		bit (36) aligned,
	    3 event_channel		fixed bin (71),
	    3 process_id		bit (36) aligned,
	  2 pad			(64 - 5) bit (36) aligned;
						/* format: idind20 */

	if mseg_segment.wakeup_state.version = MSEG_WAKEUP_STATE_VERSION_1
	then mseg_operation.wakeup_state = mseg_segment.wakeup_state.state;

	else do;					/* early version 5 message segment */
		unspec (old_wakeup_state) = unspec (header_msg);
		mseg_operation.wakeup_state.version = MSEG_WAKEUP_STATE_VERSION_1;
		string (mseg_operation.wakeup_state.flags) = string (old_wakeup_state.switches);
		mseg_operation.wakeup_state.event_channel = old_wakeup_state.event_channel;
		mseg_operation.wakeup_state.access_class = header_msg_access_class;
		mseg_operation.wakeup_state.process_id = old_wakeup_state.process_id;
		mseg_operation.wakeup_state.lock_id = old_wakeup_state.lock_id;
	     end;

	mseg_operation.wakeup_state_valid = "1"b;	/* it's very definitely OK now */

	return;

     end get_wakeup_state_seg;
%page;
/* Reset the salvaged flag */

mseg_segment_$reset_salvaged_flag_seg:
     entry (P_mseg_operation_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$reset_salvaged_flag_seg);
	if rqo_detected				/* header's empty so the salvaged flag is already reset */
	then call return_from_operation (0);
	else if code ^= 0
	then call return_from_operation (code);

	if mseg_segment.flags.salvaged
	then do;

		mseg_segment.flags.salvaged = "0"b;	/* actually reset the flag */

		if mseg_operation.call_admin_gate & ^mseg_operation.suppress_access_checks
		     & mseg_operation.access_info.multiclass
		then do;				/* audit the covert channel */
			string (local_aef) = ""b;
			local_aef.grant = "1"b;
			local_aef.cc_10_100 = "1"b;
			call access_audit_r1_$log_obj_ptr (operation_name, mseg_operation.validation_level,
			     string (local_aef), access_operations_$mseg_attr_mod, mseg_ptr, 0, null (), 0,
			     "Message segment salvage flag reset.");
		     end;
	     end;

	call return_from_operation (0);
%page;
/* Reset the wakeup acceptance state (i.e., turn it off) */

mseg_segment_$reset_wakeup_state_seg:
     entry (P_mseg_operation_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$reset_wakeup_state_seg);
	if rqo_detected				/* header's empty so the wakeup state is already reset */
	then call return_from_operation (0);
	else if code ^= 0
	then call return_from_operation (code);

	mseg_segment.wakeup_state_set = "0"b;
	unspec (mseg_segment.wakeup_state) = ""b;

	call return_from_operation (0);
%page;
/* Set the max length */

mseg_segment_$set_max_length_seg:
     entry (P_mseg_operation_ptr, P_max_length, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$set_max_length_seg);

	if rqo_detected
	then do;	/*** The header is empty and any attempts to access it cause an RQO.  We can still try to set the max
		     length, however, by using a local copy of the header while being careful not to reference its
		     block map which doesn't exist. */
		mseg_ptr = addr (local_mseg_segment_header);
		mseg_segment.n_messages = 0;
		mseg_segment.block_size = mseg_data_$block_size;
		initialize_block_map = "0"b;
	     end;

	else if code = 0
	then do;	/*** We can access the header without problems. */
		if mseg_segment.block_size = 0
		then mseg_segment.block_size = mseg_data_$block_size;
		initialize_block_map = "1"b;
	     end;

	else call return_from_operation (code);		/* couldn't get to the segment at all */

	if mseg_segment.n_messages > 0
	then call return_from_operation (error_table_$action_not_performed);


	/*** The new max length must be large enough to hold the header and a single zero length message. */

	if P_max_length <= 0
	then call return_from_operation (error_table_$invalid_max_length);

	n_new_blocks = divide (P_max_length, mseg_segment.block_size, 18, 0);
						/* format: off */
	n_new_header_blocks =
	     divide ((currentsize (local_mseg_segment_header) + divide ((n_new_blocks + 35), 36, 18, 0)
		    + mseg_segment.block_size - 1), mseg_segment.block_size, 18, 0);
						/* format: on */
	if n_new_blocks <= n_new_header_blocks
	then call return_from_operation (error_table_$invalid_max_length);


	/*** The new max length is OK -- set it */

	call hcs_$set_max_length_seg (mseg_operation.mseg_ptr, P_max_length, code);

	if (code = 0) & initialize_block_map
	then do;	/*** We set the max length and can access the actual header -- Initialize the block map. */
		mseg_segment.n_blocks_allocated = n_new_blocks;
		mseg_segment.n_blocks_unused = n_new_blocks - n_new_header_blocks;
		mseg_segment.block_map.map = copy ("1"b, n_new_header_blocks);
	     end;

	call return_from_operation (code);
%page;
/* Set the wakeup acceptance state */

mseg_segment_$set_wakeup_state_seg:
     entry (P_mseg_operation_ptr, P_code);

	call setup_operation ();			/* for cleanup handler */
	on cleanup call operation_was_aborted ();

	call begin_operation (mseg_operations_$set_wakeup_state_seg);
	if rqo_detected
	then call return_from_operation (error_table_$rqover);
	else if code ^= 0
	then call return_from_operation (code);

	mseg_segment.wakeup_state.version = MSEG_WAKEUP_STATE_VERSION_1;

	mseg_segment.wakeup_state.flags = mseg_operation.wakeup_state.flags;
	mseg_segment.wakeup_state.event_channel = mseg_operation.wakeup_state.event_channel;

	mseg_segment.wakeup_state.access_class = aim_util_$get_access_class (mseg_operation.caller.authorization);
	mseg_segment.wakeup_state.process_id = get_process_id_ ();
	mseg_segment.wakeup_state.lock_id = mseg_data_$lock_id;

	unspec (mseg_segment.header.wakeup_state.pad) = ""b;

	mseg_segment.wakeup_state_set = "1"b;		/* it's now set */

	call return_from_operation (0);
%page;
/* Common initialization for all operations */

setup_operation:
     procedure ();

	code = 0;

	operation_specific_abort = nulle;		/* nothing special when we abort or return (yet) */
	operation_specific_return = nulle;

	mseg_operation_ptr = null ();

	return;

     end setup_operation;



/* Begin the operation -- This procedure isn't part of setup_operation so that we can be certain to have a cleanup handler
   available at all times that the message segment may be in use. */

begin_operation:
     procedure (p_mseg_operation_id);

dcl	p_mseg_operation_id bit (36) aligned parameter;

	mseg_operation_ptr = P_mseg_operation_ptr;

	call mseg_utils_$begin_operation (p_mseg_operation_id, mseg_operation_ptr, operation_name, mseg_dir_name,
	     mseg_entryname, mseg_ptr, rqo_detected, code);

	return;

     end begin_operation;



/* The "null" entry which indicates that there's no special abort/return processing for an operation */

nulle:
     procedure ();

	return;

     end nulle;
%page;
/* Return after completion of an operation */

return_from_operation:
     procedure (p_code);

dcl	p_code		fixed binary (35) parameter;

	if operation_specific_return ^= nulle		/* let the operation do anything special */
	then call operation_specific_return (p_code);

	if mseg_operation_ptr ^= null ()		/* may be invoked before we've called begin_operation */
	then call mseg_utils_$finish_operation (mseg_operation_ptr);

	P_code = p_code;				/* set our caller's status code */
	go to RETURN_FROM_OPERATION;

     end return_from_operation;

RETURN_FROM_OPERATION:
	return;



/* Return error_table_$rqover to our caller after an RQO is detected */

return_rqover_from_operation:
     procedure ();

	if operation_specific_return ^= nulle		/* let the operation do anything special */
	then call operation_specific_return (error_table_$rqover);

	if mseg_operation_ptr ^= null ()		/* may be invoked by copy_seg which doesn't use this value */
	then call mseg_utils_$finish_operation (mseg_operation_ptr);

	P_code = error_table_$rqover;			/* set our caller's status code */
	go to RETURN_FROM_OPERATION;

     end return_rqover_from_operation;



/* Abort an operation */

operation_was_aborted:
     procedure ();

	if operation_specific_abort ^= nulle		/* let the operation do anything special */
	then call operation_specific_abort ();

	call mseg_utils_$abort_operation (mseg_operation_ptr);

	return;

     end operation_was_aborted;
%page;
/* Finds the last one bit in a bit string as index (reverse (bit_string), "1"b) is too slow */

find_last_one_bit:
     procedure (p_bit_string) returns (fixed binary (24));

dcl	p_bit_string	bit (*) unaligned parameter;
dcl	the_bits_as_chars	character (n_chars) aligned based (addr (p_bit_string));
dcl	the_char		character (1) aligned;
dcl	the_char_as_bits	bit (9) aligned based (addr (the_char));
dcl	(n_bits, bit_idx)	fixed binary (24);
dcl	(n_chars, char_idx) fixed binary (21);

	n_bits = length (p_bit_string);

	if mod (n_bits, 9) ^= 0
	then do;					/* must check the last bits by hand */
		do bit_idx = 0 to (mod (n_bits, 9) - 1);
		     if substr (p_bit_string, (n_bits - bit_idx), 1)
		     then return ((n_bits - bit_idx));
		end;
		n_bits = n_bits - mod (n_bits, 9);	/* ... they were all zero */
	     end;

	n_chars = divide (n_bits, 9, 21, 0);
	char_idx = length (rtrim (the_bits_as_chars, low (1)));

	if char_idx = 0
	then return (0);				/* no one bits at all */

	the_char = substr (the_bits_as_chars, char_idx, 1);
	do bit_idx = 9 to 1 by -1;
	     if substr (the_char_as_bits, bit_idx)
	     then return ((9 * (char_idx - 1)) + bit_idx);
	end;

	return ((9 * (char_idx - 1)));		/* won't get here, but ... */

     end find_last_one_bit;
%page;
/* Initialize the copy target's header -- Our caller has already locked the segment and determined its max length. */

initialize_target_header:
     procedure (p_copy_source_wakeup_state);

dcl	p_copy_source_wakeup_state
			bit (1) aligned parameter;

	target_mseg_segment_header.n_messages, target_mseg_segment_header.date_time_last_salvaged = 0;
	unspec (target_mseg_segment_header.message_chain) = ""b;
	string (target_mseg_segment_header.flags) = ""b;
	unspec (target_mseg_segment_header.wakeup_state) = ""b;
	unspec (target_mseg_segment_header.hash_table) = ""b;

	target_mseg_segment_header.sentinel = MSEG_SEGMENT_SENTINEL;
	target_mseg_segment_header.version = MSEG_SEGMENT_VERSION_5;

	target_mseg_segment_header.block_size = mseg_data_$block_size;
	target_mseg_segment_header.n_blocks_allocated =
	     divide (target_max_length, target_mseg_segment_header.block_size, 18, 0);
						/* format: off */
	n_new_header_blocks =
	     divide ((currentsize (target_mseg_segment_header)
		    + divide ((target_mseg_segment_header.n_blocks_allocated + 35), 36, 18, 0)
		    + target_mseg_segment_header.block_size - 1), target_mseg_segment_header.block_size, 18, 0);
						/* format: on */

	target_mseg_segment_header.n_blocks_unused =
	     target_mseg_segment_header.n_blocks_allocated - n_new_header_blocks;

	target_mseg_ptr -> mseg_segment.block_map.map = copy ("1"b, n_new_header_blocks);

	if p_copy_source_wakeup_state
	then do;
		if source_mseg_operation.wakeup_state_valid
		then target_mseg_segment_header.wakeup_state.state = source_mseg_operation.wakeup_state;
		target_mseg_segment_header.wakeup_state_set = source_mseg_operation.wakeup_state_valid;
	     end;

	return;

     end initialize_target_header;
%page;
/* Copy all messages in the source message segment to the target -- We call mseg_message_$read_message_for_mseg and
   mseg_message_$add_message_for_mseg to do the actuall reading/writing.  These special entrypoints are implemented
   knowing that they are invoked with the message segment's already locked. */

copy_messages:
     procedure ();

	source_mseg_operation.suppress_access_checks,	/* insure mseg_message_ copies all the messages */
	     target_mseg_operation.suppress_access_checks = "1"b;
	target_mseg_operation.add_message_info_all_valid = "1"b;

	source_mseg_operation.message_info.version = MSEG_MESSAGE_INFO_V1;
	string (source_mseg_operation.message_info.control_flags) = ""b;
	source_mseg_operation.message_info.ms_ptr = null ();

	system_area_ptr = get_system_free_area_ ();

	free_source_message_bits = "1"b;		/* force cleanup handlers to get rid of leftovers */

	segment_in_error = SOURCE;
	source_mseg_operation.message_info.message_code = MSEG_READ_FIRST;
	call mseg_message_$read_message_for_mseg (source_mseg_operation_ptr, operation_name, system_area_ptr, code);

	do while (code = 0);

	     segment_in_error = TARGET;
	     target_mseg_operation.message_info = source_mseg_operation.message_info;
	     call mseg_message_$add_message_for_mseg (target_mseg_operation_ptr, operation_name, code);
	     if code ^= 0
	     then call return_from_operation (code);

	     if source_mseg_operation.message_info.ms_ptr ^= null ()
	     then do;
		     free source_mseg_message_bits in (system_area);
		     source_mseg_operation.message_info.ms_ptr = null ();
		end;

	     segment_in_error = SOURCE;
	     source_mseg_operation.message_info.message_code = MSEG_READ_AFTER_SPECIFIED;
	     call mseg_message_$read_message_for_mseg (source_mseg_operation_ptr, operation_name, system_area_ptr, code)
		;
	end;

	if code ^= error_table_$no_message		/* we were unable to read a message */
	then call return_from_operation (code);

	free_source_message_bits = "0"b;

	return;

     end copy_messages;

/* format: off */
%page; %include mseg_data_;
%page; %include mseg_segment;
%page; %include mseg_wakeup_state;
%page; %include mseg_operation;
%page; %include mseg_message_info;
%page; %include entry_access_info;
%page; %include mseg_operations_;
%page; %include access_audit_eventflags;
%page;

/* BEGIN MESSAGE DOCUMENTATION


   Message:
   Audit (mseg_$reset_salvaged_flag_seg): GRANTED modifying message segment attributes
	ADDED_INFO <Message segment salvage flag reset.>

   S:	$access_audit

   T:	$run

   M:	The salvaged indicator of a message segment or mailbox was reset at
	the user's request.  Repeated occurences of this event over a short
	period of time could indicate an attempt to exploit a moderate
	bandwidth covert channel.  ADDED_INFO will identify the user and
	segment in question.

   A:	$notify_ssa


   END MESSAGE DOCUMENTATION */

/* format: on */

     end mseg_segment_;
