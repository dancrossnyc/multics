/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/*
   This program invokes and revokes the FORTRAN/COBOL menu subsystem.
*/
/* Written March to April 1982 by Chris Jones */
/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
fc_menu_utils:
     proc;

	signal condition (bad_call_);			/* not a true entrypoint */
	return;

/* Parameters */

dcl	p_code		   fixed bin (35) parameter;	/* (Output) status code */
dcl	p_user_window_columns  fixed bin (35) parameter;	/* (Output) width of user_i/o window after init */
dcl	p_user_window_id	   fixed bin (35) parameter;	/* (Output) id of user_i/o window after init */
dcl	p_user_window_lines	   fixed bin (35) parameter;	/* (Output) height of user_i/o window after init */
dcl	p_usage_mode	   fixed bin parameter;	/* (Input) whether windows are to be managed automatically */

/* Automatic variables */

dcl	1 entry_overlay	   aligned,
	  2 codeptr	   ptr,
	  2 envptr	   ptr;
dcl	entry_variable	   entry variable options (variable);

/* Based variables */

dcl	THE_AREA		   area based (get_system_free_area_ ());
dcl	menu_array	   (fc_menu_data_$menu_array_size) ptr based (fc_menu_data_$menu_array_ptr);
						/* array of menus we are managing */
dcl	window_array	   (fc_menu_data_$window_array_size) ptr based (fc_menu_data_$window_array_ptr);
						/* array of windows we've created */


/* Static storage and constants */

dcl	DEFAULT_MENU_ARRAY_SIZE
			   fixed bin init (5) static options (constant);
dcl	DEFAULT_WINDOW_ARRAY_SIZE
			   fixed bin init (3) static options (constant);

/* External entries and variables */

dcl	error_table_$bad_arg   fixed bin (35) ext static;
dcl	error_table_$out_of_sequence
			   fixed bin (35) ext static;

dcl	fc_menu_data_$already_video
			   bit (1) aligned external static;
dcl	fc_menu_data_$auto_window
			   bit (1) aligned external static;
dcl	fc_menu_data_$have_user_io_info
			   bit (1) aligned external static;
dcl	fc_menu_data_$initialized
			   bit (1) aligned external static;
dcl	fc_menu_data_$menu_array_ptr
			   ptr external static;
dcl	fc_menu_data_$menu_array_size
			   fixed bin external static;
dcl	fc_menu_data_$original_cleanup_handler
			   ptr external static;
dcl	1 fc_menu_data_$user_io_window_info
			   aligned like window_position_info external static;
dcl	fc_menu_data_$window_array_ptr
			   ptr external static;
dcl	fc_menu_data_$window_array_size
			   fixed bin external static;

dcl	iox_$user_io	   ptr ext static;

dcl	video_data_$terminal_iocb
			   ptr external static;

dcl	get_system_free_area_  entry () returns (ptr);
dcl	iox_$control	   entry (ptr, char (*), ptr, fixed bin (35));
dcl	iox_$destroy_iocb	   entry (ptr, fixed bin (35));
dcl	video_utils_$turn_off_login_channel
			   entry (fixed bin (35));
dcl	video_utils_$turn_on_login_channel
			   entry (fixed bin (35), char (*));

/* Conditions and builtins */

dcl	(bad_call_)	   condition;

dcl	(addr, null, unspec)   builtin;

/* Routine to do the real initialization (the cleanup handler has been attached by init1 */

init2:
     entry (p_usage_mode, p_user_window_lines, p_user_window_columns, p_user_window_id, p_code);

	if ^fc_menu_data_$initialized then do;
	     p_code = error_table_$out_of_sequence;
	     return;
	end;
	if (p_usage_mode ^= 0) & (p_usage_mode ^= 1) then do;
	     p_code = error_table_$bad_arg;
	     return;
	end;
	fc_menu_data_$auto_window = (p_usage_mode = 0);

/* Allocate the array, set the pointer and length */

	fc_menu_data_$menu_array_size = DEFAULT_MENU_ARRAY_SIZE;
	allocate menu_array in (THE_AREA) set (fc_menu_data_$menu_array_ptr);
	menu_array (*) = null ();
	fc_menu_data_$window_array_size = DEFAULT_WINDOW_ARRAY_SIZE;
	allocate window_array in (THE_AREA) set (fc_menu_data_$window_array_ptr);
	window_array (*) = null ();

/* Now set up the video system.  If the video system is already invoked, leave it as is, and only manage the
   area of the display currently covered by user_i/o.  Otherwise, invoke the video system and use the whole display. */

	fc_menu_data_$already_video = (video_data_$terminal_iocb ^= null ());
	if ^fc_menu_data_$already_video then do;
	     call video_utils_$turn_on_login_channel (p_code, "");
	     if p_code ^= 0 then do;
		call terminate_proc;
		return;
	     end;
	end;
	call iox_$control (iox_$user_io, "get_window_info", addr (fc_menu_data_$user_io_window_info), p_code);
	if p_code ^= 0 then do;
	     call terminate_proc;
	     return;
	end;
	fc_menu_data_$have_user_io_info = "1"b;

	p_user_window_lines = fc_menu_data_$user_io_window_info.height;
	p_user_window_columns = fc_menu_data_$user_io_window_info.width;
	p_user_window_id = pack_ptr (iox_$user_io);
	return;

/* entry which cleans up */

terminate:
     entry;

	call terminate_proc;
	return;

/* routine to do the termination and cleanup stuff */
/* This routine must be very careful as it can be called at any time (including in the middle of the init call). */

terminate_proc:
     proc;

dcl	menu_array_idx	   fixed bin;
dcl	window_array_idx	   fixed bin;

	if ^fc_menu_data_$initialized then
	     return;				/* nothing to do, nowhere to report an error */

/* Free the menu_array variables */

	if fc_menu_data_$menu_array_ptr ^= null () then do;
	     do menu_array_idx = 1 to fc_menu_data_$menu_array_size;
		if menu_array (menu_array_idx) ^= null () then do;
		     call menu_$destroy (menu_array (menu_array_idx), (0));
		end;
	     end;
	     free menu_array;
	     fc_menu_data_$menu_array_ptr = null ();
	     fc_menu_data_$menu_array_size = 0;
	end;

/* Restore the terminal attachments */

	if fc_menu_data_$already_video then do;
	     if fc_menu_data_$have_user_io_info then do;

/* Destroy any windows we've created */

		if fc_menu_data_$window_array_ptr ^= null () then do;
		     do window_array_idx = 1 to fc_menu_data_$window_array_size;
			if window_array (window_array_idx) ^= null () then do;
			     call window_$destroy (window_array (window_array_idx), (0));
			     call iox_$destroy_iocb (window_array (window_array_idx), (0));
			     window_array (window_array_idx) = null ();
			end;
		     end;
		     free window_array;
		     fc_menu_data_$window_array_ptr = null ();
		     fc_menu_data_$window_array_size = 0;
		end;

		call iox_$control (iox_$user_io, "set_window_info", addr (fc_menu_data_$user_io_window_info), (0));
		fc_menu_data_$have_user_io_info = "0"b;
	     end;
	end;
	else call video_utils_$turn_off_login_channel ((0));

	if fc_menu_data_$original_cleanup_handler ^= null () then do;
	     entry_overlay.codeptr = fc_menu_data_$original_cleanup_handler;
	     entry_overlay.envptr = null ();
	     unspec (entry_variable) = unspec (entry_overlay);
	     call entry_variable;
	     fc_menu_data_$original_cleanup_handler = null ();
	end;

	fc_menu_data_$initialized = "0"b;

     end terminate_proc;

pack_ptr:
     proc (p) returns (fixed bin (35));

dcl	p		   ptr;

dcl	pp		   ptr unal;
dcl	ptr_as_integer	   fixed bin (35) based;

	pp = p;
	return (addr (pp) -> ptr_as_integer);

     end pack_ptr;

%include window_control_info;
%page;
%include window_dcls;
%page;
%include menu_dcls;

     end fc_menu_utils;
