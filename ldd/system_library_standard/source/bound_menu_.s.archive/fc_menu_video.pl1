/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/*
   This program is the FORTRAN/COBOL menu displayer, getter of choices, etc.
*/
/*
   Written April 1982 by Chris Jones

   84-03-12 Davids: Added code to set the mbz field to 0 and the width field
   to the value of fc_menu_data$user_io_window_info.width in the 
   auto_user_io_info structure. This structure is used to resize the user_io
   window after the menu window is created. The width of the window was
   some small random number. I expect that the problem was not noticed
   before because it is only recently that partial width windows were
   implemented in the video system.

   Added code to ckeck fkey_ptr after call to ttt_info_$function_key_data.
   If pointer is null then the aalternate function key sequences are used.
   Removed the code that checks for a non-zero error code being returned
   there is no reason to return with an error code if we can continue with the
   alternate set. Also added code to check the number of the highest function
   key on the terminal with the number of the highest function key needed. If
   the terminal cannot cover the needed key the alternate set of function keys
   are used. The original code allowed for a subscript out-of-bounds if the
   application needed more function keys then the terminal had.

   84-09-11 Rochlis: changed auto_user_io_info.mbz to be auto_user_io_info.column
   so this module will compile with the MR11 Video System.
*/
   
/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
fc_menu_video:
     proc;

	signal condition (bad_call_);			/* not a true entrypoint */
	return;

/* Parameters */

dcl	p_code		   fixed bin (35) parameter;	/* (Output) status code */
dcl	p_fkey		   fixed bin (35) parameter;	/* (Output) non zero if a function key was hit */
dcl	p_function_key_info	   char (*) parameter;	/* (Input) substitutes for function keys */
dcl	p_menu_id		   fixed bin (35) parameter;	/* (Output) how a menu is identified */
dcl	p_menu_needs_array	   (3) fixed bin parameter;	/* (Output) describes size of created menu */
dcl	1 p_menu_needs_struc   parameter aligned,	/* (Output) ditto, for COBOL programs */
	  2 lines_needed	   fixed bin,
	  2 width_needed	   fixed bin,
	  2 n_options	   fixed bin;
dcl	p_selection	   fixed bin parameter;	/* (Output) number of the choice */
dcl	p_window_id	   fixed bin (35) parameter;	/* (Input) the windowiocb ptr packed */

/* Automatic storage */

dcl	1 auto_menu_requirements
			   like menu_requirements;
dcl	1 auto_user_io_info	   like window_position_info;
dcl	fkey		   bit (1) aligned;		/* set if a function key was hit */
dcl	fkey_ptr		   ptr;			/* points to the function key info */
dcl	fkey_sequence_length   fixed bin;		/* length of ersatz function key string */
dcl	fkey_sequence_ptr	   ptr;			/* pointer to same */
dcl	fortran_entry	   bit (1) aligned;		/* distinguishes which kind of program called us */
dcl	fx		   fixed bin;		/* index for function key info */
dcl	menu_ptr		   ptr;			/* used in calls to the menu_ subroutines */
dcl	window_ptr	   ptr;			/* used in calls to the window_ and menu_ subroutines */

/* Based variables */

dcl	fkey_sequence	   char (fkey_sequence_length) based (fkey_sequence_ptr);
dcl	window_array	   (fc_menu_data_$window_array_size) ptr based (fc_menu_data_$window_array_ptr);
						/* array of windows we've created */

/* Static storage and constants */

dcl	AUTO_WINDOW_IDX	   fixed bin init (1) static options (constant);

dcl	LINES_NEEDED	   fixed bin init (1) static options (constant);
dcl	WIDTH_NEEDED	   fixed bin init (2) static options (constant);
dcl	N_OPTIONS		   fixed bin init (3) static options (constant);

/* External entries and variables */

dcl	error_table_$no_table  fixed bin (35) ext static;
dcl	error_table_$out_of_sequence
			   fixed bin (35) ext static;

dcl	fc_menu_data_$auto_window
			   bit (1) aligned external static;
dcl	1 fc_menu_data_$auto_window_info
			   aligned like window_position_info external static;
dcl	fc_menu_data_$auto_window_iocbp
			   ptr external static;
dcl	fc_menu_data_$initialized
			   bit (1) aligned external static;
dcl	1 fc_menu_data_$user_io_window_info
			   aligned like window_position_info external static;
dcl	fc_menu_data_$window_array_ptr
			   ptr external static;
dcl	fc_menu_data_$window_array_size
			   fixed bin external static;

dcl	iox_$user_io	   ptr ext static;

dcl	video_data_$terminal_iocb
			   ptr external static;

dcl	fc_menu_window$add_to_window_array
			   entry (ptr);
dcl	iox_$control	   entry (ptr, char (*), ptr, fixed bin (35));
dcl	iox_$find_iocb	   entry (char (*), ptr, fixed bin (35));
dcl	ttt_info_$function_key_data
			   entry (char (*), ptr, ptr, fixed bin (35));
dcl	unique_chars_	   entry (bit (*)) returns (char (15));
dcl	window_$clear_window   entry (ptr, fixed bin (35));
dcl	window_$create	   entry (ptr, ptr, ptr, fixed bin (35));

/* Conditions and builtins */

dcl	(bad_call_, cleanup)   condition;

dcl	(addr, byte, length, null, rtrim, substr)
			   builtin;

/* Entry which returns information about a menu */

fortran_describe:
     entry (p_menu_id, p_menu_needs_array, p_code);

	fortran_entry = "1"b;
	goto describe_common;

cobol_describe:
     entry (p_menu_id, p_menu_needs_struc, p_code);

	fortran_entry = "0"b;

describe_common:
	call must_have_initialized;
	menu_ptr = unpack_ptr (p_menu_id);
	auto_menu_requirements.version = menu_requirements_version_1;
	call menu_$describe (menu_ptr, addr (auto_menu_requirements), p_code);
	if fortran_entry then do;
	     p_menu_needs_array (LINES_NEEDED) = auto_menu_requirements.lines_needed;
	     p_menu_needs_array (WIDTH_NEEDED) = auto_menu_requirements.width_needed;
	     p_menu_needs_array (N_OPTIONS) = auto_menu_requirements.n_options;
	end;
	else do;
	     p_menu_needs_struc.lines_needed = auto_menu_requirements.lines_needed;
	     p_menu_needs_struc.width_needed = auto_menu_requirements.width_needed;
	     p_menu_needs_struc.n_options = auto_menu_requirements.n_options;
	end;
	return;

/* Entry to display a given menu.  If the user has specified she wants to have us manage the menu window,
   make sure it's big enough (creating it if necessary). */

display:
     entry (p_window_id, p_menu_id, p_code);

	call must_have_initialized;
	menu_ptr = unpack_ptr (p_menu_id);
	if fc_menu_data_$auto_window then do;		/* we manage the menu window */
	     auto_menu_requirements.version = menu_requirements_version_1;
	     call menu_$describe (menu_ptr, addr (auto_menu_requirements), p_code);
						/* find out how big a window we need */
	     if p_code ^= 0 then
		return;

/* If we don't have the menu window created yet, create it. */

	     if window_array (AUTO_WINDOW_IDX) = null () then do;
		call iox_$find_iocb ("fc_menu_." || unique_chars_ (""b), fc_menu_data_$auto_window_iocbp, p_code);
		if p_code ^= 0 then
		     return;
		fc_menu_data_$auto_window_info.line = fc_menu_data_$user_io_window_info.line;
						/* start at the top of the user_i/o window */
		fc_menu_data_$auto_window_info.height = 0;
		call window_$create (video_data_$terminal_iocb, addr (fc_menu_data_$auto_window_info),
		     fc_menu_data_$auto_window_iocbp, p_code);
		if p_code ^= 0 then
		     return;
		call fc_menu_window$add_to_window_array (fc_menu_data_$auto_window_iocbp);
	     end;

/* Ensure the auto window is big enough. */
	     if auto_menu_requirements.lines_needed > fc_menu_data_$auto_window_info.height then do;
		fc_menu_data_$auto_window_info.height = auto_menu_requirements.lines_needed;
		call iox_$control (fc_menu_data_$auto_window_iocbp, "set_window_info",
		     addr (fc_menu_data_$auto_window_info), p_code);
		if p_code ^= 0 then
		     return;

/* Shrink the user_i/o window now. */

		auto_user_io_info.version = window_position_info_version_1;
                    auto_user_io_info.column = 0;
		auto_user_io_info.line =
		     fc_menu_data_$user_io_window_info.line + fc_menu_data_$auto_window_info.height;
                    auto_user_io_info.width = fc_menu_data_$user_io_window_info.width;
		auto_user_io_info.height =
		     fc_menu_data_$user_io_window_info.height - fc_menu_data_$auto_window_info.height;
		call iox_$control (iox_$user_io, "set_window_info", addr (auto_user_io_info), p_code);
		if p_code ^= 0 then
		     return;
		call window_$clear_window (iox_$user_io, p_code);
		if p_code ^= 0 then
		     return;
	     end;
	     window_ptr = fc_menu_data_$auto_window_iocbp;
	end;
	else window_ptr = unpack_ptr (p_window_id);

/* Now, display the menu */

	call menu_$display (window_ptr, menu_ptr, p_code);
	return;

/* Entry to get a choice from a displayed menu. */


get_choice:
     entry (p_window_id, p_menu_id, p_function_key_info, p_fkey, p_selection, p_code);

	call must_have_initialized;

/* See if we have to fake function keys. */

	if p_function_key_info = "" then
	     fkey_ptr = null ();			/* no function keys needed */
	else do;					/* we've got to check */
	     fkey_ptr = null ();
	     fkey_sequence_ptr = null ();

	     on cleanup call cleanup_get_choice;

	     call ttt_info_$function_key_data (get_term_type_name (), null (), fkey_ptr, p_code);

	     if fkey_ptr = null () /* if function key data could not be */
               then do;              /* gotten - don't report error just make it */
		fkey_ptr = make_function_key_info (p_function_key_info);
		goto GOT_FUNCTION_KEY_INFO;
		end;

	     if fkey_ptr -> function_key_data.highest < length (rtrim (p_function_key_info)) - 1
	     then do; /* At least 1 Fkey has an index larger than the terminals's Fkeys */
		fkey_ptr = make_function_key_info (p_function_key_info);
		goto GOT_FUNCTION_KEY_INFO;
		end;

/* Loop through the function keys looking for any missing ones */

	     do fx = 0 to length (rtrim (p_function_key_info)) - 1;
		if (substr (p_function_key_info, fx + 1) ^= " ")
		     & (fkey_ptr -> function_key_data.function_keys.sequence_length (fx, KEY_PLAIN) = 0) then do;
						/* we're missing one we need */
		     free fkey_ptr -> function_key_data;
		     fkey_ptr = null ();
		     fkey_ptr = make_function_key_info (p_function_key_info);
		     goto GOT_FUNCTION_KEY_INFO;
		end;
	     end;
	end;
GOT_FUNCTION_KEY_INFO:
	menu_ptr = unpack_ptr (p_menu_id);
	if fc_menu_data_$auto_window then
	     window_ptr = fc_menu_data_$auto_window_iocbp;
	else window_ptr = unpack_ptr (p_window_id);
	call iox_$control (iox_$user_io, "reset_more", null (), (0));
	call menu_$get_choice (window_ptr, menu_ptr, fkey_ptr, fkey, p_selection, p_code);
	if fkey then
	     p_fkey = 1;
	else p_fkey = 0;

ERROR_RETURN:
	call cleanup_get_choice;
	return;

cleanup_get_choice:
     proc;

	if fkey_ptr ^= null () then do;
	     free fkey_ptr -> function_key_data;
	     fkey_ptr = null ();
	end;
	if fkey_sequence_ptr ^= null () then do;
	     free fkey_sequence;
	     fkey_sequence_ptr = null ();
	end;

     end cleanup_get_choice;

unpack_ptr:
     proc (ptr_as_integer) returns (ptr);

dcl	ptr_as_integer	   fixed bin (35);

dcl	packed_ptr	   ptr unal based (addr (ptr_as_integer));

	return (packed_ptr);

     end unpack_ptr;

get_term_type_name:
     procedure () returns (char (32));
declare	1 ti		   aligned like terminal_info;

	ti.version = terminal_info_version;
	call iox_$control (iox_$user_io, "terminal_info", addr (ti), p_code);
	if p_code ^= 0 then
	     goto ERROR_RETURN;
	return (ti.term_type);

     end get_term_type_name;

make_function_key_info:
     procedure (string) returns (pointer);
declare	string		   char (*);
declare	i		   fixed bin;

	function_key_data_highest = length (rtrim (string)) - 1;
	allocate function_key_data set (fkey_ptr);
	fkey_sequence_length = 2 * length (rtrim (string));
	allocate fkey_sequence set (fkey_sequence_ptr);
	fkey_ptr -> function_key_data.version = function_key_data_version_1;
	fkey_ptr -> function_key_data.highest = function_key_data_highest;
	fkey_ptr -> function_key_data.sequence.seq_ptr = addr (fkey_sequence);
	fkey_ptr -> function_key_data.sequence.seq_len = length (fkey_sequence);
	fkey_ptr -> function_key_data.home.sequence_index (*) = 0;
	fkey_ptr -> function_key_data.home.sequence_length (*) = 0;
	fkey_ptr -> function_key_data.left.sequence_index (*) = 0;
	fkey_ptr -> function_key_data.left.sequence_length (*) = 0;
	fkey_ptr -> function_key_data.up.sequence_index (*) = 0;
	fkey_ptr -> function_key_data.up.sequence_length (*) = 0;
	fkey_ptr -> function_key_data.right.sequence_index (*) = 0;
	fkey_ptr -> function_key_data.right.sequence_length (*) = 0;
	fkey_ptr -> function_key_data.down.sequence_index (*) = 0;
	fkey_ptr -> function_key_data.down.sequence_length (*) = 0;
	fkey_ptr -> function_key_data.function_keys.sequence_index (*, *) = 0;
	fkey_ptr -> function_key_data.function_keys.sequence_length (*, *) = 0;
	do i = 0 to length (rtrim (string)) - 1;
	     if substr (string, i + 1, 1) ^= " " then do;
		substr (fkey_sequence, i * 2 + 1, 2) = byte (27) || substr (string, i + 1, 1);
		fkey_ptr -> function_key_data.function_keys.sequence_index (i, KEY_PLAIN) = i * 2 + 1;
		fkey_ptr -> function_key_data.function_keys.sequence_length (i, KEY_PLAIN) = 2;
	     end;
	end;

	return (fkey_ptr);

     end make_function_key_info;

must_have_initialized:
     proc;

	if ^fc_menu_data_$initialized then
	     goto HAVE_NOT_INITIALIZED;

     end must_have_initialized;

HAVE_NOT_INITIALIZED:
	p_code = error_table_$out_of_sequence;
	return;

%include menu_dcls;
%page;
%include window_control_info;
%page;
%include function_key_data;
%page;
%include terminal_info;

     end fc_menu_video;
