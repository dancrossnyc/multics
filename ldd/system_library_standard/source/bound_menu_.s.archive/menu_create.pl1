/****^  *********************************************************
        *                                                       *
        * Copyright, (C) BULL HN Information Systems Inc., 1990 *
        *                                                       *
        * Copyright (c) 1972 by Massachusetts Institute of      *
        * Technology and Honeywell Information Systems, Inc.    *
        *                                                       *
        ********************************************************* */



/****^  HISTORY COMMENTS:
  1) change(90-05-16,Kallstrom), approve(90-05-16,MCR8176),
     audit(90-06-21,Blackmore), install(90-07-17,MR12.4-1022):
     fixed menu_get_choice so that the -dfkeys string is not used when the
     number of characters in the string is the same as the number of function
     keys defined for the terminal type.
                                                   END HISTORY COMMENTS */


/* format: style2 */

menu_create:
     procedure options (variable);			/* COMMAND */

/* The menu commands from MTB 494
   menu_create, menu_display, menu_get_choice, menu_describe

   James R. Davis 21 Jan 81
*/

/* Maintained by Suzanne Krupp.

   Modified 06/08/81 by Suzanne Krupp to use menu_$store_menu and
     menu_$retrieve menu to store retrieve menus from segments.

   Modified 06/30/81 by Suzanne Krupp to change maximum allowed options
     from 35 to 61.

  Modified July 1981 BIM for cleanup to store/retrieve, list, delete.

  Audit changes October 1981 BIM.

  Modified November 1981 MRJ to fake function key data when not found in TTT
                             and to add control arg to specify options selectors.

  Modified 10 February 1982 by Chris Jones to initialize dfkey_string_len.

  84-03-12 Davids: Modified argument processing of menu_describe entry to
  allow more robust handling. You can now specify any combination of
  -width, -height, and -count and things will work. There is no longer
  any "knowledge" of how many arguments should be present. This fixes
  TR phx15650
*/

	declare get_system_free_area_	 entry () returns (ptr);
	declare requote_string_	 entry (character (*)) returns (character (*));


	declare arg		 char (al) based (ap);
	declare al		 fixed bin (21);
	declare ap		 ptr;
	declare alp		 ptr;		/* to arg list */
	declare code		 fixed bin (35);
	declare nargs		 fixed bin;
	declare af_value		 char (afl) varying based (afp);
	declare afl		 fixed bin (21);
	declare afp		 ptr;
	declare active		 bit (1) aligned;
	declare complain		 entry variable options (variable);
	declare answer		 char (3) var;
	declare myname		 char (32);
	declare pathname_present	 bit (1);
	declare swname_present	 bit (1);
	declare brief		 bit (1);
	declare valid_args		 fixed bin;
	declare pathname		 char (168);	/* MENU seg path */
	declare dirname		 char (168);	/* MENU seg dir */
	declare ename		 char (32);	/* MENU seg entryname */

	declare 1 auto_query_info	 like query_info;

	declare menu_namep		 ptr;
	declare menu_name_len	 fixed bin;
	declare menu_name		 char (menu_name_len) based (menu_namep);

	declare iocbp		 ptr;
	declare menu_ptr		 ptr;

	declare SUFFIX		 char (5) internal static options (constant) init ("value");

	declare (
	        error_table_$active_function,
	        error_table_$bad_conversion,
	        error_table_$badopt,
	        error_table_$bigarg,
	        error_table_$noarg,
	        error_table_$noentry,
	        error_table_$too_many_args
	        )			 fixed bin (35) ext static;


	declare (addr, empty, max, null, rtrim, size)
				 builtin;

	call set_flavor_of_command ("menu_create", "0"b);

menu_create_block:
	begin;
	     declare 1 mf		      aligned like menu_format;
	     declare 1 auto_menu_requirements
				      aligned like menu_requirements;

	     declare (n_choices, n_headers, n_trailers)
				      fixed bin;
	     declare max_choice_len	      fixed bin (21);
	     declare max_line_len	      fixed bin (21);

	     declare (keep_trying, create)  bit (1) aligned;

	     declare command_query_	      entry () options (variable);

	     declare option_keys_ptr	      pointer;
	     declare option_keys_len	      fixed bin (21);
	     declare option_keys	      (option_keys_len) char (1) unal based (option_keys_ptr);

	     if nargs < 2
	     then goto USAGE;

	     dirname, ename, pathname = "";
	     pathname_present, brief, create = "0"b;
	     call get_menu_name ();

	     call scan_controls ();
	     n_choices = max (n_choices, 1);
	     n_headers = max (n_headers, 1);
	     n_trailers = max (n_trailers, 1);
	     begin;
		declare argx		 fixed bin;
		declare choices		 (n_choices) char (max_choice_len) varying;
		declare headers		 (n_headers) char (max_line_len) varying;
		declare trailers		 (n_trailers) char (max_line_len) varying;
		declare (choicex, headerx, trailerx)
					 fixed bin;

		choicex, headerx, trailerx = 0;
		choices (*), headers (*), trailers (*) = "";
		do argx = 2 to nargs;
		     call arg_getter (argx, ap, al, (0));
		     if arg = "-option" | arg = "-opt"
		     then call snarf (choicex, choices);
		     else if arg = "-header" | arg = "-he"
		     then call snarf (headerx, headers);
		     else if arg = "-trailer" | arg = "-tr"
		     then call snarf (trailerx, trailers);
		end;

		auto_menu_requirements.version = menu_requirements_version_1;
						/* create starts out false, so we can query */

		call menu_$create (choices, headers, trailers, addr (mf), option_keys, null,
		     addr (auto_menu_requirements), menu_ptr, code);
		if code ^= 0
		then call gen_err (code, "Could not create the menu object.");

		if ^pathname_present
		then call get_default_vseg_path ();

		keep_trying = "1"b;
		answer = "";
		do while (keep_trying);
		     call menu_$store (dirname, ename, menu_name, create, menu_ptr, code);
		     if code = error_table_$noentry
		     then do;
			     if brief
			     then answer = "yes";
			     else do;
				     call get_query_info (code);
				     call command_query_ (addr (auto_query_info), answer, myname,
					"Segment not found: ^a.  Do you wish to create it?", pathname);
				end;
			     if answer = "yes"
			     then do;
				     keep_trying = "1"b;
				     create = "1"b;
				end;
			     else call gen_err (code, rtrim (pathname));
			end;
		     else if code ^= 0
		     then call gen_err (code, "Trying to store " || menu_name || " in " || pathname || " .");
		     else keep_trying = "0"b;
		end;				/* do while */

		return;


snarf:
     procedure (ix, larr);
	declare ix		 fixed bin parameter;
						/* I/O index into array */
	declare larr		 (*) char (*) varying parameter;
						/* I/O array of lines */
	ix = ix + 1;
	argx = argx + 1;
	call arg_getter (argx, ap, al, (0));
	larr (ix) = arg;
     end snarf;

	     end;					/* non quick begin block */

/* Internal Procedures for create follow */



/* look thru the command args, count headers, trailers, and options, and set format */
scan_controls:
     procedure ();
	declare argx		 fixed bin;
	declare get_line_length_$switch
				 entry (ptr, fixed bin (35)) returns (fixed bin);

	max_choice_len, max_line_len = 0;
	n_choices, n_headers, n_trailers = 0;

/* defaults */
	option_keys_ptr = addr (MENU_OPTION_KEYS);
	option_keys_len = hbound (MENU_OPTION_KEYS, 1);
	mf.version = menu_format_version_1;
	mf.max_width = get_line_length_$switch ((null ()), code);
	if code ^= 0
	then do;
		code = 0;
		mf.max_width = 80;			/* new get_line_length_ isnt in yet */
	     end;

	mf.max_height = 0;
	mf.n_columns = 1;
	mf.flags = "0"b;
	mf.pad_char = " ";

	do argx = 2 to nargs;
	     call arg_getter (argx, ap, al, (0));

	     if arg = "-header" | arg = "-he"
	     then call accumulate (n_headers, max_line_len);
	     else if arg = "-trailer" | arg = "-tr"
	     then call accumulate (n_trailers, max_line_len);
	     else if arg = "-option" | arg = "-opt"
	     then call accumulate (n_choices, max_choice_len);

	     else if arg = "-columns" | arg = "-col"
	     then mf.n_columns = get_next_arg_num ();

	     else if arg = "-center_headers" | arg = "-ceh"
	     then mf.center_headers = "1"b;
	     else if arg = "-no_center_headers" | arg = "-nceh"
	     then mf.center_headers = "0"b;
	     else if arg = "-center_trailers" | arg = "-cet"
	     then mf.center_trailers = "1"b;
	     else if arg = "-no_center_trailers" | arg = "-ncet"
	     then mf.center_trailers = "0"b;
	     else if arg = "-line_length" | arg = "-ll"
	     then mf.max_width = get_next_arg_num ();
	     else if arg = "-pad"
	     then mf.pad_char = get_next_arg_char ();
	     else if arg = "-pathname" | arg = "-pn"
	     then do;
		     pathname_present = "1"b;
		     call get_next_arg ();
		     call get_menu_seg_info ();
		end;
	     else if arg = "-brief" | arg = "-bf"
	     then brief = "1"b;
	     else if arg = "-option_keys" | arg = "-okeys"
	     then do;
		     call get_next_arg ();
		     option_keys_ptr = addr (arg);
		     option_keys_len = length (arg);
		end;
	     else do;
		     call complain (error_table_$badopt, myname, "^a", arg);
		     goto ERROR_EXIT;
		end;
	end;					/* control arg loop */

	return;


accumulate:
     procedure (count, maxlen);
	declare count		 fixed bin parameter;
						/* input/output */
	declare maxlen		 fixed bin (21) parameter;
						/* input/output */
	call get_next_arg ();
	count = count + 1;				/* found another */
	maxlen = max (maxlen, al);
     end accumulate;


get_next_arg_num:
     procedure returns (fixed bin);
	declare x			 fixed bin (35);
	declare cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	declare nscode		 fixed bin (35);

	call get_next_arg ();
	x = cv_dec_check_ (arg, nscode);
	if nscode ^= 0
	then do;
		call complain (error_table_$bad_conversion, myname, "Not a decimal number: ^a.", arg);
		goto ERROR_EXIT;
	     end;

	return (x);
     end get_next_arg_num;

get_next_arg_char:
     procedure returns (char (1) aligned);
	declare c			 char (1) aligned;
	call get_next_arg ();
	if al > 1
	then do;
		call complain (error_table_$bigarg, myname, "The pad argument must be  a single character.");
		goto ERROR_EXIT;
	     end;
	c = arg;
	return (c);
     end get_next_arg_char;

get_next_arg:
     procedure ();
	if argx = nargs
	then goto MISSING;
	argx = argx + 1;
	call arg_getter (argx, ap, al, (0));
     end get_next_arg;
     end scan_controls;


MISSING:
	     call complain (error_table_$noarg, myname, "missing arg after ^a.", arg);
	     goto ERROR_EXIT;
	end menu_create_block;

menu_get_choice:
     entry options (variable);			/* COMMAND/AF */
	call set_flavor_of_command ("menu_get_choice", "1"b);

get_menu_choice_begin:
	begin;
	     declare funk		      ptr;	/* to function key info */
	     declare funky_area	      area (512);	/*  where to allocate funk info */
						/* like this we don't have to free, and we know the data is small */
	     declare dfkey_string_ptr	      ptr;
	     declare dfkey_string_len	      fixed bin (21);
	     declare dfkey_string	      char (dfkey_string_len) based (dfkey_string_ptr) unal;
	     declare fkey		      bit (1) aligned;
	     declare keyno		      fixed bin;
	     declare argx		      fixed bin;

	     pathname_present, swname_present = "0"b;
	     funk, dfkey_string_ptr = null ();
	     dfkey_string_len = 0;
	     call get_menu_name ();

	     do argx = 2 to nargs;
		call arg_getter (argx, ap, al, code);
		if code ^= 0
		then call gen_err (code, "");
		if arg = "-pathname" | arg = "-pn"
		then do;
			call get_next_choice_arg ();
			call get_menu_seg_info ();
			pathname_present = "1"b;
		     end;
		else if arg = "-io_switch" | arg = "-is"
		then do;
			call get_next_choice_arg ();
			call get_switch ();
			swname_present = "1"b;
		     end;
		else if arg = "-function_keys" | arg = "-fkeys"
		then do;
			call get_next_choice_arg ();
			funk = make_function_key_info (arg);
		     end;
		else if arg = "-default_function_keys" | arg = "-dfkeys"
		then do;
			call get_next_choice_arg ();
			dfkey_string_ptr = addr (arg);
			dfkey_string_len = length (arg);
		     end;
		else go to BAD_OPT;
	     end;

	     if ^swname_present
	     then iocbp = iox_$user_io;		/* we do output on *'s */
	     if ^pathname_present
	     then call get_default_vseg_path ();

	     call lookup_menu ();

	     if funk = null ()
	     then funk = get_function_key_info ();

	     call menu_$get_choice (iocbp, menu_ptr, funk, fkey, keyno, code);
	     if code ^= 0
	     then goto USAGE;

	     call result (key_str ());
	     return;


/* internal procedures for get_menu_choice */

get_next_choice_arg:
     proc ();

	argx = argx + 1;
	call arg_getter (argx, ap, al, code);
	if code ^= 0
	then call gen_err (code, "");

     end get_next_choice_arg;

key_str:
     procedure () returns (char (8) aligned);
	declare s			 char (8) aligned;
	declare ioa_$rsnnl		 entry () options (variable);
	call ioa_$rsnnl ("^[F^]^d", s, (0), fkey, keyno);
	return (s);
     end key_str;


get_function_key_info:
     procedure () returns (pointer);
	declare f			 ptr;
	declare fx		 fixed bin;
	declare ttt_info_$function_key_data
				 entry (char (*), ptr, ptr, fixed bin (35));
	declare error_table_$no_table	 fixed bin (35) ext static;
	funky_area = empty ();

	call ttt_info_$function_key_data (get_term_type_name (), addr (funky_area), f, code);
	if code = error_table_$no_table
	then do;
		code = 0;
		if dfkey_string_ptr = null ()
		then f = make_function_key_info ("0123456789");
		else f = make_function_key_info (dfkey_string);
	     end;
	else if code ^= 0
	then do;
		call complain (code, myname, "Getting function key data.");
		goto ERROR_EXIT;
	     end;
	else do;
		if dfkey_string_ptr ^= null () & f -> function_key_data.highest + 1 < dfkey_string_len
		then f = make_function_key_info (dfkey_string);
		else do;				/* make sure all required function keys are present */
			do fx = 1 to dfkey_string_len;
			     if (substr (dfkey_string, fx, 1) ^= " ")
				& (f -> function_key_data.function_keys.sequence_length (fx - 1, KEY_PLAIN) = 0)
			     then do;
				     f = make_function_key_info (dfkey_string);
				     goto GOT_FUNCTION_KEY_INFO;
				end;
			end;
		     end;
	     end;
GOT_FUNCTION_KEY_INFO:
	return (f);


get_term_type_name:
     procedure () returns (char (32));
	declare 1 ti		 aligned like terminal_info;

	ti.version = terminal_info_version;
	call iox_$control (iox_$user_io, "terminal_info", addr (ti), code);
	if code ^= 0
	then do;
		call complain (code, myname, "Getting terminal type.");
		goto ERROR_EXIT;
	     end;
	return (ti.term_type);
     end get_term_type_name;
     end get_function_key_info;


make_function_key_info:
     procedure (string) returns (pointer);
	declare string		 char (*);
	declare sequence		 char (2 * length (string)) based (sequence_ptr);
	declare sequence_ptr	 pointer;
	declare i			 fixed bin;

	function_key_data_highest = length (string) - 1;
	allocate function_key_data in (funky_area);
	allocate sequence in (funky_area);
	function_key_data.version = function_key_data_version_1;
	function_key_data.highest = function_key_data_highest;
	function_key_data.sequence.seq_ptr = addr (sequence);
	function_key_data.sequence.seq_len = length (sequence);
	function_key_data.home.sequence_index (*) = 0;
	function_key_data.home.sequence_length (*) = 0;
	function_key_data.left.sequence_index (*) = 0;
	function_key_data.left.sequence_length (*) = 0;
	function_key_data.up.sequence_index (*) = 0;
	function_key_data.up.sequence_length (*) = 0;
	function_key_data.right.sequence_index (*) = 0;
	function_key_data.right.sequence_length (*) = 0;
	function_key_data.down.sequence_index (*) = 0;
	function_key_data.down.sequence_length (*) = 0;
	function_key_data.function_keys.sequence_index (*, *) = 0;
	function_key_data.function_keys.sequence_length (*, *) = 0;
	do i = 0 to length (string) - 1;
	     if substr (string, i + 1, 1) ^= " "
	     then do;
		     substr (sequence, i * 2 + 1, 2) = byte (27) || substr (string, i + 1, 1);
		     function_key_data.function_keys.sequence_index (i, KEY_PLAIN) = i * 2 + 1;
		     function_key_data.function_keys.sequence_length (i, KEY_PLAIN) = 2;
		end;
	end;

	return (addr (function_key_data));

     end make_function_key_info;

	end get_menu_choice_begin;

menu_display:
     entry options (variable);
	call set_flavor_of_command ("menu_display", "0"b);

menu_display_begin:
	begin;

	     declare argx		      fixed bin;

	     pathname_present, swname_present = "0"b;
	     call get_menu_name ();

	     do argx = 2 to nargs;
		call arg_getter (argx, ap, al, code);
		if code ^= 0
		then call gen_err (code, "");
		if arg = "-pathname" | arg = "-pn"
		then do;
			call get_next_display_arg ();
			call get_menu_seg_info ();
			pathname_present = "1"b;
		     end;
		else if arg = "-io_switch" | arg = "-is"
		then do;
			call get_next_display_arg ();
			call get_switch ();
			swname_present = "1"b;
		     end;
		else go to BAD_OPT;
	     end;

	     if ^swname_present
	     then iocbp = iox_$user_output;
	     if ^pathname_present
	     then call get_default_vseg_path ();

	     call lookup_menu ();

	     call menu_$display (iocbp, menu_ptr, code);
	     if code ^= 0
	     then call gen_err (code, menu_name);

	     return;

get_next_display_arg:
     proc ();

	argx = argx + 1;
	call arg_getter (argx, ap, al, code);
	if code ^= 0
	then call gen_err (code, "");

     end get_next_display_arg;

	end menu_display_begin;

menu_describe:
     entry options (variable);
	call set_flavor_of_command ("menu_describe", "1"b);

menu_describe_begin:
	begin;

	     declare 1 mr		      aligned like menu_requirements;
	     declare ioa_		      entry () options (variable);
	     declare argx		      fixed bin;
	     dcl	   width_flag	      bit (1);
	     dcl	   height_flag	      bit (1);
	     dcl	   count_flag	      bit (1);

	     width_flag = "0"b;
	     height_flag = "0"b;
	     count_flag = "0"b;
	     pathname_present = "0"b;
	     call get_menu_name ();

	     do argx = 2 to nargs;
		call arg_getter (argx, ap, al, code);
		if code ^= 0
		then call gen_err (code, "");
		if arg = "-pathname" | arg = "-pn"
		then do;
			call get_next_desc_arg ();
			call get_menu_seg_info ();
			pathname_present = "1"b;
		     end;
		else if arg = "-width"
		then width_flag = "1"b;
		else if arg = "-height"
		then height_flag = "1"b;
		else if arg = "-count" | arg = "-ct"
		then count_flag = "1"b;
		else go to BAD_OPT;
	     end;

	     if ^pathname_present
	     then call get_default_vseg_path ();

	     call lookup_menu ();

	     if active
	     then do;
		     if (width_flag & height_flag) | (width_flag & count_flag) | (height_flag & count_flag)
		     then code = error_table_$too_many_args;
		     if ^(width_flag | height_flag | count_flag)
		     then code = error_table_$noarg;
		end;
	     if code ^= 0
	     then goto USAGE;

	     mr.version = menu_requirements_version_1;
	     call menu_$describe (menu_ptr, addr (mr), code);
	     if code ^= 0
	     then goto USAGE;
	     if ^active
	     then do;
		     if ^width_flag & ^height_flag & ^count_flag
						/* no flags set - print everything */
		     then call ioa_ ("Height: ^d;  Width: ^d;  ^d Option^[s^]", mr.n_options, mr.width_needed,
			     mr.n_options, (mr.n_options > 1));
		     else call ioa_ ("^[Height: ^d;  ^;^s^]^[Width: ^d;  ^;^s^]^[^d Option^[s^]^;^s^s^]", height_flag,
			     mr.n_options, width_flag, mr.width_needed, count_flag, mr.n_options,
			     (mr.n_options > 1));
		end;
	     else do;
		     if width_flag
		     then call describe ("-width");
		     else if height_flag
		     then call describe ("-height");
		     else call describe ("-count");
		end;
	     return;


describe:
     procedure (which);
	declare which		 char (*) parameter;
	declare v			 char (8) aligned;
	declare n			 fixed bin;
	declare (char, ltrim, rtrim)	 builtin;

	if which = "-width"
	then n = mr.width_needed;
	else if which = "-height"
	then n = mr.lines_needed;
	else if which = "-count" | which = "-ct"
	then n = mr.n_options;
	else goto BAD_OPT;
	v = rtrim (ltrim (char (n)));
	call result (v);
     end describe;

get_next_desc_arg:
     proc ();

	argx = argx + 1;
	call arg_getter (argx, ap, al, code);
	if code ^= 0
	then call gen_err (code, "");

     end get_next_desc_arg;

	end menu_describe_begin;
	return;

menu_list:
     entry options (variable);

	call set_flavor_of_command ("menu_list", "1"b);

menu_list_begin:
	begin;
	     declare ioa_		      entry () options (variable);
%include menu_list_info;
	     declare argx		      fixed bin;
	     declare starname	      character (128);
	     declare starname_present	      bit (1);

	     starname_present = "0"b;
	     pathname_present = "0"b;

	     if nargs > 0
	     then do argx = 1 to nargs;
		     call arg_getter (argx, ap, al, (0));
		     if character (arg, 1) = "-"
		     then do;
			     if arg = "-pathname" | arg = "-pn"
			     then do;
				     call get_next_list_arg;
				     call get_menu_seg_info;
				     pathname_present = "1"b;
				end;
			     else go to BAD_OPT;
			end;
		     else do;
			     if starname_present
			     then call gen_err (error_table_$too_many_args, "Only one starname may be given.");
			     starname = arg;
			     starname_present = "1"b;
			end;
		end;

	     if ^starname_present
	     then starname = "**";

	     if ^pathname_present
	     then call get_default_vseg_path;

	     menu_list_info_ptr = null ();
	     call menu_$list (dirname, ename, starname, get_system_free_area_ (), menu_list_info_version_1,
		menu_list_info_ptr, code);

	     if code ^= 0
	     then call gen_err (code, "");
	     if active
	     then af_value = "";

	     do argx = 1 to menu_list_info.n_names;
		begin;
		     declare name		      character (menu_list_info.names (argx).length)
					      defined (menu_list_info.name_string)
					      position (menu_list_info.names (argx).position);
		     if active
		     then af_value = af_value || requote_string_ (name) || " ";
		     else call ioa_ ("^a", name);

		end;
	     end;
	     if active
	     then af_value = rtrim (af_value);

get_next_list_arg:
     procedure;

	if argx = nargs
	then call gen_err (error_table_$noarg, "No pathname supplied with -pathname.");
	argx = argx + 1;
	call arg_getter (argx, ap, al, (0));
     end get_next_list_arg;

	end menu_list_begin;

	return;

menu_delete:
     entry options (variable);

	call set_flavor_of_command ("menu_delete", "0"b);

menu_delete_begin:
	begin;

	     declare argx		      fixed bin;
	     pathname_present = "0"b;

	     call get_menu_name ();

	     do argx = 2 to nargs;
		call arg_getter (argx, ap, al, (0));

		if arg = "-pathname" | arg = "-pn"
		then do;
			call get_next_delete_arg ();
			call get_menu_seg_info ();
			pathname_present = "1"b;
		     end;
		else go to BAD_OPT;
	     end;

	     if ^pathname_present
	     then call get_default_vseg_path;

	     call menu_$delete (dirname, ename, menu_name, code);
	     if code ^= 0
	     then call gen_err (code, "Could not delete menu " || menu_name || " from segment " || pathname);


get_next_delete_arg:
     procedure;
	if argx = nargs
	then call gen_err (error_table_$noarg, "");

	argx = argx + 1;

	call arg_getter (argx, ap, al, (0));
     end get_next_delete_arg;

	end menu_delete_begin;
	return;


/* COMMON UTILITIES FOR THE VARIOUS COMMANDS AND ACTIVE FUNCTIONS */

/* This procedure finds a menu in a menu segment. */

lookup_menu:
     procedure ();

	call menu_$retrieve (dirname, ename, menu_name, null, menu_ptr, code);
	if code ^= 0
	then call gen_err (code, "Looking up menu:  " || menu_name || " in " || pathname);

     end lookup_menu;

get_menu_name:
     proc ();

	call arg_getter (1, ap, al, code);
	if code ^= 0
	then call gen_err (code, "");
	menu_namep = ap;
	menu_name_len = al;

     end get_menu_name;

/* This one assumes that first arg is PATH of menu, and finds it.
   It may be OK for the seg not to exist (if we will create it).
   Sets GLOBAL variables for directory, etc.

*/
get_menu_seg_info:
     procedure ();
	declare expand_pathname_$add_suffix
				 entry (character (*), character (*), character (*), character (*),
				 fixed binary (35));

	call expand_pathname_$add_suffix (arg, SUFFIX, dirname, ename, code);
	if code ^= 0
	then call gen_err (code, arg);
	pathname = rtrim (dirname) || ">" || rtrim (ename);

     end get_menu_seg_info;



get_switch:
     procedure ();

	call iox_$look_iocb (arg, iocbp, code);
	if code ^= 0
	then call gen_err (code, "Looking for switch:  " || arg);

     end get_switch;

result:
     procedure (v);
	declare v			 char (8) aligned parameter;
	declare ioa_		 entry () options (variable);
	if active
	then af_value = v;
	else call ioa_ ("^a", v);
     end result;


set_flavor_of_command:
     procedure (name, active_ok);

/* This MUST be quick, or it will get the wrong arg list.
   In Hoc Signo Ursus
*/
	declare name		 char (*) parameter;
	declare active_ok		 bit (1) aligned parameter;

	declare active_fnc_err_	 entry () options (variable);
	declare com_err_		 entry () options (variable);
	declare cu_$arg_list_ptr	 entry (pointer);
	declare cu_$af_return_arg	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	declare error_table_$not_act_fnc
				 fixed bin (35) ext static;

	myname = name;
	call cu_$arg_list_ptr (alp);
	call cu_$af_return_arg (nargs, afp, afl, code);
	if code = 0
	then do;
		active = "1"b;
		complain = active_fnc_err_;

		if ^active_ok
		then code = error_table_$active_function;
		if code ^= 0
		then goto USAGE;
	     end;
	else if code = error_table_$not_act_fnc
	then do;
		code = 0;
		active = "0"b;
		complain = com_err_;
		afp = null ();
	     end;
	else do;
		call com_err_ (code, myname);
		goto ERROR_EXIT;
	     end;
     end set_flavor_of_command;


arg_getter:
     procedure (argn, argp, argl, acode);
	declare argn		 fixed bin parameter;
	declare argp		 pointer parameter;
	declare argl		 fixed bin (21) parameter;
	declare acode		 fixed bin (35) parameter;
	declare cu_$af_arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), pointer);
	declare cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	if active
	then call cu_$af_arg_ptr_rel (argn, argp, argl, acode, alp);
	else call cu_$arg_ptr_rel (argn, argp, argl, acode, alp);
     end arg_getter;


get_default_vseg_path:
     proc ();

	declare user_info_		 entry (char (*), char (*), char (*));
	declare user_info_$homedir	 entry (char (*));

	declare person_id		 char (22);

	call user_info_ (person_id, "", "");
	call user_info_$homedir (dirname);
	ename = rtrim (person_id) || ".value";
	pathname = rtrim (dirname) || ">" || ename;

     end get_default_vseg_path;


get_query_info:
     proc (code);

	declare code		 fixed bin (35);

	auto_query_info.version = query_info_version_5;
	auto_query_info.yes_or_no_sw = "1"b;
	auto_query_info.suppress_name_sw = "0"b;
	auto_query_info.suppress_spacing = "0"b;
	auto_query_info.cp_escape_control = "00"b;
	auto_query_info.status_code = code;
	auto_query_info.query_code = 0;
	auto_query_info.question_iocbp = null;
	auto_query_info.answer_iocbp = null;
	auto_query_info.repeat_time = 0;
	auto_query_info.explanation_ptr = null;
	auto_query_info.explanation_len = 0;

     end get_query_info;


gen_err:
     procedure (a_code, a_str);

	declare a_code		 fixed bin (35);
	declare a_str		 char (*);

	call complain (code, myname, "^a", a_str);
	go to ERROR_EXIT;

     end gen_err;

USAGE:
	call complain (code, myname, "Usage: ^a MENU {-control_args}", myname);
	go to ERROR_EXIT;

BAD_OPT:
	call complain (error_table_$badopt, myname, "^a", arg);
	goto ERROR_EXIT;

ERROR_EXIT:
	return;

%include menu_dcls;
%include iox_dcls;
%include terminal_info;
%include access_mode_values;
%include query_info;
%include function_key_data;
     end menu_create;
