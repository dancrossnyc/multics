" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************
" This routine is used by the FORTRAN and COBOL menu interface routines to
" attach a cleanup handler to their caller's stack (sneaky, no?).  If there
" already is a cleanup handler attached to the stack, it is subsumed and ours
" is attached anyway.  However, the subsumed one will be called by the one we
" attach.
"
" Written April 1982 by Chris Jones
"
	include	stack_header
	include	stack_frame
	include	on_unit

cleanup_name:
	aci	"cleanup"
	equ	cleanup_length,7

	entry	fc_menu_init1

fc_menu_init1:
	lda	stack_frame.condition_bit,dl
	cana	sp|stack_frame.flag_word		" see if any conditions are enabled
	tze	establish_handler			" -> none were set

" Unfortunately, at least one condition handler exists.  We loop thru them,
" looking for "cleanup".  Hopefully, we won't find one (stay tuned for details
" if we do...).

	ldx0	sp|stack_frame.on_unit_rel_ptrs	" relative to this stack frame
check_for_cleanup:
	tze	establish_handler			" -> no handlers left
	epp2	sp|on_unit.name,x0			" pointer to the on unit name
	lda	sp|on_unit.size,x0			" length of the on unit name
	cmpc	(),(pr,rl),fill(040)		" is this a cleanup handler?
	desc9a	cleanup_name,cleanup_length
	desc9a	pr2|0,al
	tze	found_cleanup_handler		" -> yes
	ldx0	sp|on_unit.next,x0			" offset to next on unit
	tra	check_for_cleanup			" keep looking
"
" Come here if there already is a cleanup handler on this frame.  Remember what
" it is so that the terminate routine can call it.
"
" x0 is the offset into the stack frame of the on unit.
"
found_cleanup_handler:
	epp2	sp|on_unit.body,x0*
	spri2	fc_menu_data_$original_cleanup_handler
"
"	fall thru...
"
" Here we call establish_cleanup_proc_ to actually establish the handler.  Note
" that establish_cleanup_proc_ attaches its handler to its CALLER's stack frame.
" Notice also that we haven't pushed a frame, so we are running on our caller's
" frame.  Thus, when we call establish_cleanup_proc_, the handler will get
" attached to our caller's frame, and when establish_cleanup_proc_ returns, it
" returns not to us, but to our caller.
"
establish_handler:
"
" The first thing we do is extend the stack by 16 words to make room for the
" argument list.  This code was cribbed from condition_.alm.
"
	lda	ap|0				" see if this is a pl1 frame
	eppap	sb|stack_header.stack_end_ptr,*	" remember where it was
	eax0	16				" the increment we are extending the stack by
	adlx0	sb|stack_header.stack_end_ptr+1	" add in offset part of stack_end
	stx0	sb|stack_header.stack_end_ptr+1	" put it back
	stx0	sp|stack_frame.next_sp+1		" reset current frame's idea of end
	cana	=o14,dl				" Z<>0 => pl1 frame
	tze	build_arg_list
	stx0	sp|5				" record growth in pl1 frame
build_arg_list:
	ora	2,du				" 1 argument
	sta	ap|0
	stz	ap|1				" no descriptors
	epp2	fc_menu_utils$terminate
	spri2	ap|4				" the argument
	epp2	ap|4
	spri2	ap|2				" the pointer to it
"
" Now (at last), call and have the handler attached.
"
	lda	=o400000,du
	sta	fc_menu_data_$initialized
	tra	establish_cleanup_proc_$establish_cleanup_proc_
"
"	there is no return...
"
	end
