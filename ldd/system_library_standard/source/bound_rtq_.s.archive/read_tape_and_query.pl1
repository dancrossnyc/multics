/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */


/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-05-28,TLNguyen), approve(87-05-28,MCR7692),
     audit(87-07-15,Blair), install(87-07-28,MR12.1-1048):
     convert read_tape_and_query (rtq) nonstandard subsystem to a standard
     ssu_ subsystem:  initialize intermediate variables.  Get optional
     control arguments and their required partners (e.g. -comment STR).
     Establish cleanup and program_interrupt conditions.  Create an
     invocation of rtq subsystem.  Add the 2nd ssu_ request table to the
     list of tables.  Add the 2nd ssu_ info directory to the list of
     directoies.  Get the default request processor options for rtq.
     Set prompt string for rtq.  Set up fields of the "rtq_structure_
     info" record structure.  Call "rtq_$set_up" external procedure.
     Set up for "-quit".  Set up for "-request" and handle its possible
     errors.  Invoke "ssu_$listen" and handle its possible error.
     Invoke "terminate_null_ref_name" to terminate file if already
     initiated.  Invoke "read_tape_and_query_janitor" to detach and
     close tape and file.  Finally, invoke "ssu_$destroy_invocation"
     to destroy invocation if already created.
                                                   END HISTORY COMMENTS */


/* read_tape_and_query - written Sept 1977 by James A. Bush
   Modified 9/10/79 by J. A. Bush for installation in MR8.0
   Modified 3/11/80 by P. B. Kelley to:
   1) Fix bug preventing use of "-track".
   2) Remove automatic large buffer if user has access to rcp_sys_.
   3) Implement the "-block" control argument.
   4) Fixes bug which caused rtq to return if a tape mark was encountered
   while attempting to determine the correct density.
   Modified 7/30/80 by J. A. Bush to:
   1) Fix several tape positioning bugs.
   2) Implement the "-density" and "-no_prompt" control arguments.
   3) Add the "list_tape_contents" and "bof" requests.
   4) Add tape label/trailer record recognition and display capabilities.
   5) Add the "-count" argument to the "read_record" and "read_file" requests.
   Modified 01/02/81 by J. A. Bush to:
   1) Recognize and diplay version 2 standard Multics tape labels.
   2) Fix bug with "-skip" read_file  request argument.
   3) Implement the "-multics", "-nnl" and "-extend" read_file request arguments.
   4) Implement the "-ring" control argument.
   Modified 4/82 by J. A. Bush to fix some bugs
   Modified 11/82 by J. A. Bush to fix some more bugs
*/

read_tape_and_query: rtq: proc;

/* formated by default */

	dcl     abbrev_specified_flg	 bit (1);
	dcl     arg_count		 fixed bin;
	dcl     arg_length		 fixed bin (21);
	dcl     arg_ptr		 ptr;
	dcl     arg_dex		 fixed bin;
	dcl     array_index		 fixed bin;
	dcl     bit_count		 fixed bin (24);
	dcl     (blocksize, code)	 fixed bin (35);
	dcl     buf_size		 fixed bin (21);	/* default buffer size */
	dcl     ddec		 fixed bin (35);	/* density decimal */
	dcl     dir_name		 char (168);
	dcl     entry_name		 char (32);
	dcl     match		 bit (1) aligned;
	dcl     no_prompt_specified_flg bit (1);
	dcl     profile_ptr		 ptr;
	dcl     prompt_length	 fixed bin (21);
	dcl     prompt_ptr		 ptr;
	dcl     quit_specified_flg	 bit (1);
	dcl     request_line_length	 fixed bin (21);
	dcl     request_line_ptr	 ptr;
	dcl     request_loop_specified_flg bit (1);
	dcl     request_specified_flg	 bit (1);
	dcl     rtq_info_ptr           ptr;
	dcl     sci_ptr		 ptr;
	dcl     tape_name		 char (8);
	dcl     tape_atd		 char (200);
	dcl     tdec		 fixed bin (35);	/* track decimal */
	dcl     var_prompt_string	 char (64) varying;
	dcl     wd_buf_size		 fixed bin;	/* default buffer size in words */

/* based */
	dcl     arg		 char (arg_length) based (arg_ptr);
	dcl     prompt_string	 char (prompt_length) based (prompt_ptr);
	dcl     request_line	 char (request_line_length) based (request_line_ptr);
	dcl     1 rtq_info		 aligned like rtq_structure_info based (rtq_info_ptr);		      

/* builtin */
	dcl     (addr, char, divide, fixed, hbound, ltrim, mod, null, rtrim, substr) builtin;

/* condition */
	dcl     (cleanup, program_interrupt) condition;

/* constants */
	dcl     DEFAULT_BUFFER_SIZE	 fixed bin static options (constant) init (2800);
	dcl     NEXT_POS_IN_THE_LIST_OF_TABLES fixed bin static options (constant) init (2);
	dcl     NINE_TRACK		 fixed bin static options (constant) init (9);
	dcl     NUMBER_OF_CHARACTER_PER_WORD fixed bin static options (constant) init (4);
	dcl     SEVEN_TRACK		 fixed bin static options (constant) init (7);
	dcl     density		 (5) char (5) static options (constant) init
				 ("d800", "d1600", "d6250", "d556", "d200");
	dcl     info_dir		 char (168) int static options (constant) init (">doc>subsystem>read_tape_and_query");
	dcl     rtq_version_1	 char (8) static options (constant) init ("rtq.1");
	dcl     pname		 char (19) int static options (constant) init
				 ("read_tape_and_query");
	dcl     whoami		 char (32) static options (constant) init ("rtq");

/* entries */
	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     rtq_$set_up		 entry (ptr, ptr, fixed bin (35));
	dcl     requote_string_	 entry (char (*)) returns (char (*));
	dcl     ssu_$add_info_dir	 entry (ptr, char (*), fixed bin, fixed bin (35));
	dcl     ssu_$add_request_table entry (ptr, ptr, fixed bin, fixed bin (35));
	dcl     ssu_$create_invocation entry (char (*), char (*), ptr, ptr, char (*), ptr, fixed bin (35));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     ssu_$execute_line	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     ssu_$get_default_rp_options entry (ptr, char (8), ptr, fixed bin (35));
	dcl     ssu_$listen		 entry (ptr, ptr, fixed bin (35));
	dcl     ssu_$set_prompt_mode	 entry (ptr, bit (*));
	dcl     ssu_$set_prompt	 entry (ptr, char (64) varying);
	dcl     ssu_$set_request_processor_options entry (ptr, ptr, fixed bin (35));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));

/* external */
	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$badcall	 fixed bin (35) ext static;
	dcl     error_table_$inconsistent fixed bin (35) ext static;
	dcl     rtq_request_table_$rtq_request_table_ fixed bin (35) external static;
	dcl     ssu_et_$subsystem_aborted fixed bin (35) external static;
	dcl     ssu_et_$null_request_line fixed bin (35) ext static;
	dcl     ssu_et_$program_interrupt fixed bin (35) ext static;
	dcl     ssu_et_$request_line_aborted fixed bin (35) ext static;
	dcl     ssu_info_directories_$standard_requests char (168) external;
	dcl     ssu_request_tables_$standard_requests fixed bin (35) external;


%page;
/* initialized intermediate variables */
	call init_intermediate_variables;

/* get users 's optional control arguments */
	call get_users_optional_control_args;

	if code ^= 0 then do;
	     call terminate_null_ref_name;
	     return;
	     end;

/* establish cleanup condition */
	on cleanup goto FINISH_SUBSYSTEM;

/* establish program_interrupt condition */
	on program_interrupt goto INVOKE_LISTEN;

/* create a invocation of a subsystem */
	call ssu_$create_invocation (whoami, rtq_version_1, addr (rtq_structure_info),
	     addr (rtq_request_table_$rtq_request_table_),
	     info_dir, sci_ptr, code);
	if code ^= 0 then do;
		call com_err_ (code, pname, "Creating subsystem invocation.");
		goto DESTROY_INVOCATION;
	     end;

/* add ssu_request_table_ as the 2nd request table in the list of tables */
	call ssu_$add_request_table (sci_ptr, addr (ssu_request_tables_$standard_requests),
	     NEXT_POS_IN_THE_LIST_OF_TABLES, code);
	if code ^= 0 then do;
		call com_err_ (code, pname, "Adding standard ssu_ request table as the 2nd table.");
		goto DESTROY_INVOCATION;
	     end;

/* add standard ssu_info_directories at the 2nd position in the info directories*/
	call ssu_$add_info_dir (sci_ptr, ssu_info_directories_$standard_requests,
	     NEXT_POS_IN_THE_LIST_OF_TABLES, code);
	if code ^= 0 then do;
		call com_err_ (code, pname, "Adding standard ssu_ request info segs.");
		goto DESTROY_INVOCATION;
	     end;

/* get the default request processor options for the rtq subsystem */
	if abbrev_specified_flg then do;
		call ssu_$get_default_rp_options (sci_ptr, RP_OPTIONS_VERSION_1, addr (local_rpo), (0));
		local_rpo.abbrev_info.expand_request_lines = "1"b;
		local_rpo.abbrev_info.default_profile_ptr = profile_ptr;
		local_rpo.abbrev_info.profile_ptr = profile_ptr;

		call ssu_$set_request_processor_options (sci_ptr, addr (local_rpo), (0));
	     end;

/* set prompt string for the rtq subsystem */
	if no_prompt_specified_flg | prompt_length = -1 then
	     call ssu_$set_prompt_mode (sci_ptr, DONT_PROMPT);
	else if prompt_length > 0 then do;		/* set user_specified prompt */
		var_prompt_string = prompt_string;
		call ssu_$set_prompt (sci_ptr, var_prompt_string); /* make it varying for ssu_ */
	     end;
	else call ssu_$set_prompt_mode (sci_ptr, PROMPT); /* by default */

/* make things ready before performing user's requests */
	rtq_info_ptr = addr (rtq_structure_info);

	call fill_in_fields_of_rtq_stru_info;

	call rtq_$set_up (sci_ptr, rtq_info_ptr, code);
	if code ^= 0 then
		goto DESTROY_INVOCATION;		/* don't want additional message. */

	if quit_specified_flg then
	     goto FINISH_SUBSYSTEM;

	if request_specified_flg then do;
		call ssu_$execute_line (sci_ptr, request_line_ptr, request_line_length, code);
		if code ^= 0 then do;
			if code = ssu_et_$null_request_line | code = ssu_et_$program_interrupt |
			     code = ssu_et_$request_line_aborted then goto INVOKE_LISTEN;

			else if code = ssu_et_$subsystem_aborted then
			     goto FINISH_SUBSYSTEM;

			else do;
				call com_err_ (code, whoami);
				goto FINISH_SUBSYSTEM;
			     end;
		     end;
	     end;
						/* invokes listen */
INVOKE_LISTEN:

	call ssu_$listen (sci_ptr, null (), code);
	if code ^= ssu_et_$subsystem_aborted then
	     call com_err_ (code, pname, "Calling the listener.");

/* finishes subsystem */
FINISH_SUBSYSTEM:
	call read_tape_and_query_janitor (sci_ptr, rtq_info_ptr);

DESTROY_INVOCATION:

	call terminate_null_ref_name;

	call ssu_$destroy_invocation (sci_ptr);

	return;

/**************************************************************************/
%page;
fill_in_fields_of_rtq_stru_info: proc ();

/* fill in "rtq_structure_info" structure's field values after processing */
/* control argument and got the structure's address.                      */

	rtq_structure_info.atd_sw, rtq_structure_info.buf_ful, rtq_structure_info.eof, rtq_structure_info.eov = "0"b;
	rtq_info.eof_request_flg = "0"b;
	rtq_structure_info.extend_sw, rtq_structure_info.f_attached, rtq_structure_info.fw_file = "0"b;
	rtq_structure_info.last_job_deck_flg, rtq_structure_info.one_eof, rtq_structure_info.return_subsys_loop_flg = "0"b;
	rtq_info.records_in_file_flg = "0"b;
	rtq_structure_info.set_bin, rtq_structure_info.set_nine, rtq_structure_info.tmr, rtq_structure_info.two_eofs = "0"b;
	rtq_structure_info.bits, rtq_structure_info.block_size, rtq_structure_info.clen, rtq_structure_info.cvbl = 0;
	rtq_structure_info.l_type, rtq_structure_info.rec_len = 0;
	rtq_structure_info.c_file, rtq_structure_info.c_mode, rtq_structure_info.c_rec = 1;
	rtq_structure_info.cbufp, rtq_structure_info.cdkp, rtq_structure_info.cdptr, rtq_structure_info.cfptr = null;
	rtq_structure_info.cvp, rtq_structure_info.cvbp, rtq_structure_info.fiocb_ptr, rtq_structure_info.lblp = null;
	rtq_structure_info.rptr, rtq_structure_info.rtq_area_ptr, rtq_structure_info.tiocb_ptr, rtq_structure_info.tptr = null;
	rtq_structure_info.c_den, rtq_structure_info.filename, rtq_structure_info.filepath = "";
	rtq_structure_info.buf_size = buf_size;
	rtq_structure_info.ddec = ddec;
	rtq_structure_info.density = density;
	rtq_structure_info.tape_atd = tape_atd;
	rtq_structure_info.tape_name = tape_name;
	rtq_structure_info.tdec = tdec;
	rtq_structure_info.Version = rtq_version_1;
	rtq_structure_info.wd_buf_size = wd_buf_size;

     end fill_in_fields_of_rtq_stru_info;

/**************************************************************************/
%page;

get_nxt_arg: proc returns (bit (1) aligned);
						/* get_nxt_arg - function to get next command line argument */

	dcl     old_arg		 char (32) init ("");

/* begin coding */
	old_arg = arg;				/* copy arg for error messages */
	arg_dex = arg_dex + 1;
	call cu_$arg_ptr (arg_dex, arg_ptr, arg_length, code); /* get comment arg */
	if code ^= 0 then do;			/* error */
		call com_err_ (code, pname, "obtaining ""^a"" specification.", old_arg);
		return ("0"b);
	     end;
	return ("1"b);				/* return ok */

     end get_nxt_arg;

/***********************************************************************/
%page;
get_users_optional_control_args: proc;

/* the 1st input argument typed in must be reel identifier */
	call cu_$arg_count (arg_count, code);
	call cu_$arg_ptr (1, arg_ptr, arg_length, code);
	if code ^= 0 then do;
		call com_err_ (code, pname, "Getting reel_id.");
		call ioa_ ("Usage:  read_tape_and_query (rtq) reel_id {-control_args}");
		call ioa_ ("^/CONTROL ARGUMENTS ^/-abbrev, -ab ^/-block N, -bk N ^/-comment STR ^/-density N, -den N" ||
		     "^/-no_abbrev, -nab ^/-no_prompt ^/-no_request_loop, -nrql ^/-profile PATH, -pf PATH ^/-prompt STR" ||
		     "^/-quit ^/-request STR, -rq STR ^/-request_loop, -rql  ^/-ring ^/-track N, -tk N");
		return;
	     end;

/* save reel number and establish tape attach description */
	tape_name = arg;
	tape_atd = "tape_nstd_ " || arg;

/* process all optional input control arguments if they are specified */
	do arg_dex = 2 by 1 to arg_count while (code = 0);
	     call cu_$arg_ptr (arg_dex, arg_ptr, arg_length, code); /* look for more arguments */
	     if code ^= 0 then ;			/* if args exhausted, look no further */

	     else if arg = "-comment" | arg = "-com" then do; /* User wants to send OPR message */
		     if ^get_nxt_arg () then return;	/* if some problem with required arg, quit */
		     tape_atd = rtrim (tape_atd) || " -comment " ||
			requote_string_ ((arg));	/* put in quoted comment */
		end;

	     else if arg = "-track" | arg = "-tk" then do;/* next arg must be 7 or 9 */
		     if ^get_nxt_arg () then return;	/* if some problem with required arg, quit */
		     tdec = cv_dec_check_ (arg, code);	/* convert to dec. for check */
		     if code ^= 0 then go to bad_arg;	/* must be numeric */
		     if tdec ^= SEVEN_TRACK & tdec ^= NINE_TRACK then go to bad_arg; /* and only 7 or 9 */
		     tape_atd = rtrim (tape_atd) || " -track " ||
			ltrim (char (tdec));	/* insert leading blank */
		end;

	     else if arg = "-block" | arg = "-bk" then do;/* next arg must be blocksize */
		     if ^get_nxt_arg () then return;	/* if some problem with required arg, quit */
		     blocksize = cv_dec_check_ (arg, code);
		     if code ^= 0 then go to bad_arg;
		     tape_atd = rtrim (tape_atd) || " -block " || ltrim (char (blocksize));
		     buf_size = blocksize + mod (blocksize, NUMBER_OF_CHARACTER_PER_WORD); /* set buffer size in chars, mod 4 */
		     wd_buf_size = divide (buf_size, NUMBER_OF_CHARACTER_PER_WORD, 17, 0); /* and in words */
		end;

	     else if arg = "-density" | arg = "-den" then do; /* next arg must be density value */
		     if ^get_nxt_arg () then return;	/* if some problem with required arg, quit */
		     ddec = cv_dec_check_ (arg, code);
		     if code ^= 0 then go to bad_arg;

		     match = "0"b;
		     do array_index = 1 to hbound (density, 1) while (^match);
			if ddec = fixed (substr (density (array_index), 2, 4)) then do;
				match = "1"b;
				tape_atd = rtrim (tape_atd) || " -density " || ltrim (char (ddec));
			     end;
		     end;
		     if ^match then
			go to bad_arg;
		end;

	     else if arg = "-prompt" then do;
		     arg_dex = arg_dex + 1;

		     call cu_$arg_ptr (arg_dex, prompt_ptr, prompt_length, code);
		     if code ^= 0 then do;
			     call com_err_ (code, pname, "Trying to get the prompt string.");
			     return;
			end;
		     if prompt_length = 0 then prompt_length = -1;
		end;

	     else if arg = "-no_prompt" then
		no_prompt_specified_flg = "1"b;

	     else if arg = "-ring" | arg = "-rg" then /* user wants to attach tape with write ring */
		tape_atd = rtrim (tape_atd) || " -write";

	     else if arg = "-request_loop" | arg = "-rql" then do;
		     if quit_specified_flg then do;
INCONSISTENT:
			     call com_err_ (error_table_$inconsistent, pname, "-request_loop and -quit");

			     return;
			end;
		     else request_loop_specified_flg = "1"b;
		end;

	     else if arg = "-no_request_loop" | arg = "-nrql" then
		request_loop_specified_flg = "0"b;

	     else if arg = "-abbrev" | arg = "-ab" then
		abbrev_specified_flg = "1"b;

	     else if arg = "-no_abbrev" | arg = "-nab" then
		abbrev_specified_flg = "0"b;

	     else if arg = "-profile" | arg = "-pf" then do;
		     abbrev_specified_flg = "1"b;
		     arg_dex = arg_dex + 1;

		     call cu_$arg_ptr (arg_dex, arg_ptr, arg_length, code);
		     if code ^= 0 then goto bad_arg;
		     call expand_pathname_$add_suffix (arg, "profile", dir_name, entry_name, code);
		     if code ^= 0 then goto bad_arg;

		     call initiate_file_ (dir_name, entry_name, R_ACCESS, profile_ptr, bit_count, code);
		     if profile_ptr = null then do;
			     call com_err_ (code, pname, "Initiating the profile:  ", pathname_ (dir_name, entry_name));
			     return;
			end;
		end;

	     else if arg = "-quit" then do;
		     if request_loop_specified_flg then goto INCONSISTENT;
		     else quit_specified_flg = "1"b;
		end;

	     else if arg = "-request" | arg = "-rq" then do;
		     if request_specified_flg then do;
			     call com_err_ (error_table_$badcall, pname, "Only one request line allowed.");
			     return;
			end;
		     else do;
			     request_specified_flg = "1"b;
			     arg_dex = arg_dex + 1;

			     call cu_$arg_ptr (arg_dex, request_line_ptr, request_line_length, code);
			     if code ^= 0 then do;
				     call com_err_ (code, pname, "Trying to get the request line.");
				     return;
				end;
			end;
		end;

	     else do;
		     if substr (arg, 1, 1) = "-" then do;
bad_arg:
			     call com_err_ (error_table_$bad_arg, pname, "argument number ^d: ""^a""", arg_dex, arg);
			     return;
			end;
		end;
	end;					/* do argdex = 2 by 1 while code = 0 */

     end get_users_optional_control_args;

/***********************************************************************/
%page;
init_intermediate_variables: proc ();

/* begin coding */
	abbrev_specified_flg, no_prompt_specified_flg, quit_specified_flg, request_loop_specified_flg, request_specified_flg = "0"b;
	arg_length, arg_dex, blocksize, code, ddec, prompt_length, request_line_length, tdec = 0;
	arg_ptr, profile_ptr, prompt_ptr, request_line_ptr, rtq_info_ptr, sci_ptr = null;
	dir_name, entry_name, tape_name, tape_atd, var_prompt_string = "";
	buf_size = DEFAULT_BUFFER_SIZE * NUMBER_OF_CHARACTER_PER_WORD;
	wd_buf_size = DEFAULT_BUFFER_SIZE;

     end init_intermediate_variables;

/***********************************************************************/
%page;
read_tape_and_query_janitor: proc (sci_ptr, rtq_info_ptr);
						/* detach_tape_file - internal procedure to detach and close tape and file */

	dcl     release_area_ entry (ptr);
	dcl     (rtq_info_ptr, sci_ptr) ptr;

/* close and detach  tape switch which was attached and opened early */
	if rtq_info.tiocb_ptr ^= null then do;
		call iox_$close (rtq_info.tiocb_ptr, (0));
		call iox_$detach_iocb (rtq_info.tiocb_ptr, (0));
	     end;

	if rtq_info.rtq_area_ptr ^= null then
		call release_area_ (rtq_info.rtq_area_ptr);

/* if file was attached then detach it */
	if rtq_info.f_attached then do;
		call iox_$close (rtq_info.fiocb_ptr, (0));
		call iox_$detach_iocb (rtq_info.fiocb_ptr, (0));
		rtq_info.last_job_deck_flg, rtq_info.f_attached = "0"b;
	     end;

     end read_tape_and_query_janitor;

/************************************************************************/
%page;
terminate_null_ref_name:  proc ();

/* begin coding */
	code = 0;                               /* prevent code was previously not zero */
	if profile_ptr ^= null then
	     call terminate_file_ (profile_ptr, bit_count, TERM_FILE_TERM, code);
	if code ^= 0 then call com_err_ (code, pname, "Terminating profile segment.");

	return;

end terminate_null_ref_name;
     
/************************************************************************/
%page;
%include rtq_structure_info;
%page;
%include access_mode_values;
%page;
%include terminate_file;
%page;
%include iox_modes;
%page;
%include ssu_prompt_modes;
%include ssu_rp_options;
	dcl     1 local_rpo		 like rp_options;
%include area_info;

     end read_tape_and_query;
