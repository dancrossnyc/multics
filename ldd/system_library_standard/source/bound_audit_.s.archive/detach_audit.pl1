/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
detach_audit:
dta:
   proc;

/*  This module turns off auditing for the calling process.  The single parameter
   is the switchname of the switch attached via the audit_ module that is to be detached.

Modified:
11/12/81 by Lindsey Spratt: changed the variable "whoami" to "MYNAME", making
	  it an internal constant as well.
10/13/82 by Lindsey Spratt:  Changed to destroy the new_iocb, which is no
	  longer needed after the move_attach.  Also, removed the
	  set_safety_sw, as this is done by iox_$close.  Changed to
	  use error_table_$badopt when too many args are given, rather than
	  a 0 error code.
*/

/*  Automatic  */

      dcl	    nargs		       fixed bin;
      dcl	    tc		       fixed bin;
      dcl	    tp		       ptr;
      dcl	    blkptr	       ptr;
      dcl	    old_iocb	       ptr;
      dcl	    new_iocb	       ptr;
      dcl	    code		       fixed bin (35);

/*  Based  */

      dcl	    targ		       char (tc) based (tp);

/* Constant */

      dcl	    MYNAME	       char (12) init ("detach_audit") internal static options (constant);

/* Entries  */

      dcl	    audit_$audit_close     entry;
      dcl	    cu_$arg_count	       entry (fixed bin);
      dcl	    cu_$arg_ptr	       entry (fixed bin, ptr, fixed bin, fixed bin (35));
      dcl	    ioa_$ioa_switch	       entry options (variable);
      dcl	    iox_$look_iocb	       entry (char (*), ptr, fixed bin (35));
      dcl	    iox_$move_attach       entry (ptr, ptr, fixed bin (35));
      dcl	    iox_$detach_iocb       entry (ptr, fixed bin (35));
      dcl	    iox_$destroy_iocb      entry (ptr, fixed bin (35));
      dcl	    iox_$close	       entry (ptr, fixed bin (35));
      dcl	    com_err_	       entry options (variable);

/* External */

      dcl	    error_table_$badopt    fixed bin (35) ext;

      call cu_$arg_count (nargs);
      if nargs > 1
      then
         do;
	  call com_err_ (error_table_$badopt, MYNAME, "Too many arguments.^/Usage: detach_audit {switchname}");
	  return;
         end;
      else if nargs = 1
      then call cu_$arg_ptr (1, tp, tc, code);
      else
         do;
	  tc = 8;
	  alloc targ;
	  targ = "user_i/o";
         end;
      call iox_$look_iocb ((targ), old_iocb, code);
      if code ^= 0
      then
         do;
	  call com_err_ (code, MYNAME, "while looking for ^a", targ);
	  return;
         end;

      if old_iocb -> iocb.close ^= audit_$audit_close
      then
         do;
	  call com_err_ (0, MYNAME, "^a not attached via audit_", targ);
	  return;
         end;

      blkptr = old_iocb -> iocb.attach_data_ptr;
      new_iocb = blkptr -> blk.auditing_iocb;

      call iox_$close (old_iocb, code);
      if code ^= 0
      then
         do;
	  call com_err_ (code, MYNAME, "while closing ^a switch", targ);
	  return;
         end;

      call iox_$detach_iocb (old_iocb, code);
      if code ^= 0
      then
         do;
	  call ioa_$ioa_switch (new_iocb, "Couldn't detach ^a", targ);
	  return;
         end;


      call iox_$move_attach (new_iocb, old_iocb, code);
      if code ^= 0
      then
         do;
	  call com_err_ (code, MYNAME, "while moving attachment from ^a to ^a", new_iocb -> iocb.name, targ);
	  return;
         end;

      call iox_$destroy_iocb (new_iocb, code);
      if code ^= 0
      then
         do;
	  call com_err_ (code, MYNAME, "Unable to destroy the auditing iocb.  Auditing was successfully 
detached for switch ""^a"", however.", targ);
         end;

      return;

/*  Include  */

%include iocb;
%include audit_block;

   end;
