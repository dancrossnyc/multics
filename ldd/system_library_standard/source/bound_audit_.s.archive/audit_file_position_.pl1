/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-08-02,TLNguyen), approve(88-08-02,MCR7939),
     audit(88-09-14,Parisek), install(88-09-15,MR12.2-1110):
     a. Return error_table_$bad_file when the audit file contains gargage
        or nothing other than the header.
     b. Remove the external entry named find_valid_entry because pcref
        shows it has no caller and is virtually useless anyway.
                                                   END HISTORY COMMENTS */


/* format: style2,ind3 */
audit_file_position_:
   proc;
      return;					/* Not a valid entry. */

/* The entries in this procedure are all of the entries used for getting
   around in the audit file.  The position_info structure is used to specify
   various things about the state of the audit file which some of theses
   procedures need to know.  The entries are:

move_number - move a specified number of entries either relative to the
   current position or from the beginning of the file.

move_time - move to a specified time, relative to the current entry or an
   absolute time.

forward_search - search forward through the audit file for an entry which
   contains a match for the specified regular expression (qedx style).

backward_search - search backward through the audit file for and entry which
   contains a match for the specified regular expression.

next	  - move to the next entry.
   
previous	  - move to the previous entry.

first	  - move to the first entry in the file.

last	  - move to the last entry in the file.

count_last - count to the last entry in the file.  Unlike "last", this entry
   sets the entry_number in the position structure.

set_count	  - set the count in the position structure to be the count up to
   the current entry, given the class id of the current entry.  The "any
   entry" flag in the position info structure is ignored by this entry.


12/08/78 Written by Lindsey L. Spratt

Modified:
   12/08/79 by Lindsey Spratt: Add the count_last and set_count entries.
   10/26/80 by Lindsey Spratt: Change spurious error code
	     incompatible_operations to be "inconsistent". Changed set_count
	     to set the class_identifier in the position structure to "" if
	     the "any entry" bit is on in the position_info structure.
06/02/82 by Lindsey Spratt: Change go_to_first and go_to_last internal
	  procedures to  set the component_max_char_index correctly when the
	  audit file is circular.
	       Also, changed "move_number" from being a synonym label for
	  audit_file_position_ to being a separate entrypoint label.  
06/03/82 by Lindsey Spratt: Fixed bug in setting of last entry position when
	  the file is circular.
06/04/82 by Lindsey Spratt: Fixed problem in go_to_previous_entry which was
	  generating a size or subscriptrange error.  msf_manager_$get_ptr
	  returns the bit count of the component when the component was
	  first initiated for the "current" opening of the MSF, not the
	  current bit count as one might expect.  The fix is to do an
	  explicit hcs_$status_mins to determine the bit count.
06/08/82 by Lindsey Spratt: Fixed go_to_last to behave correctly when the
	  position_info.audit_index = 0, meaning the "last" entry is at the
	  end of the "previous" component.  This comes up when updating the
	  metering info is being done by audit_ (in insert_line) and the
	  entry being inserted is to large to fit in the current component,
	  hence the new entry is being placed at index 0 of the "next"
	  component (which is now the  current component) and the  last
	  entry is at the end of the previous component.
10/13/82 by Lindsey Spratt:  Added limits to all loops.  The limit is somewhat
	  arbitrarily set to by assuming that an audit file won't have more
	  than 1000 components, each of 255 pages, each page having no more
	  than 128 audit entries.  These loop limits are to prevent any
	  infinite looping, no matter how damaged the audit file may be.
	  Added explicit subscriptrange condition enabling for setting the
	  position.aep pointer by indexing into file_char_array by
	  position.char_index.
03/16/83 by Lindsey Spratt:  Updated the search_file_ entry declaration to fix
	  a size condition.
*/

      dcl	    (p_position_ptr, p_position_info_ptr)
			       ptr;
      dcl	    (time, p_time)	       fixed bin (71);
      dcl	    1 p_position	       based (p_position_ptr) like position_template;
      dcl	    1 position	       like position_template;
      dcl	    1 position_info	       based (p_position_info_ptr) like position_info_template;
      dcl	    error_table_$bad_file  fixed bin (35) ext static;
      dcl	    error_table_$empty_file
			       fixed bin (35) ext;
      dcl	    error_table_$end_of_info
			       fixed bin (35) ext;
      dcl	    error_table_$nomatch   fixed bin (35) ext;
      dcl	    (p_abs, p_add, p_subtract)
			       bit (1);
      dcl	    add		       bit (1);
      dcl	    (p_number, number)     fixed bin;
      dcl	    entry_idx	       fixed bin (35);
      dcl	    entry_number	       fixed bin;
      dcl	    (code, p_code)	       fixed bin (35);
      dcl	    type		       fixed bin (2);
      dcl	    MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
			       init (3.264e7) /* 1000 components * 255 pages/component * 128 entries/page */
			       fixed bin (35) internal static options (constant);
      dcl	    error_table_$inconsistent
			       fixed bin (35) ext;
      dcl	    search_file_	       entry (ptr, fixed bin (21), fixed bin (21), ptr, fixed bin (21), fixed bin (21),
			       fixed bin (21), fixed bin (21), fixed bin (35));
      dcl	    hcs_$status_mins       entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
      dcl	    msf_manager_$get_ptr   entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));

/* Builtin */

      dcl	    (abs, addr, addrel, bin, currentsize, divide, length, mod, size, substr)
			       builtin;

move_number:
   entry (p_position_ptr, p_abs, p_add, p_subtract, p_number, p_position_info_ptr, p_code);

      position = p_position;
      p_code, code = 0;


/* An exclusive or  is done over the input switches to check that one and
   only one is "1"b and the other two are "0"b. */

      if (bin (p_abs) + bin (p_add) + bin (p_subtract)) ^= 1
      then
         do;
	  p_code = error_table_$inconsistent;
	  return;
         end;
      else if p_abs
      then
         do;
	  if (position.entry_number = 0 | position.search_tag ^= position_info.default_search_tag)
	  then
	     do;
	        call go_to_first_entry (position, code);
	        number = p_number - 1;
	        add = "1"b;
	     end;
	  else
	     do;
	        number = p_number - position.entry_number;
	        if number < 0
	        then
		 do;
		    add = "0"b;
		    number = abs (number);
		 end;
	        else add = "1"b;
	     end;
         end;
      else
         do;
	  add = p_add;
	  number = p_number;
         end;


      if add
      then
         do entry_number = 1 to number while (code = 0);
	  call go_to_next_entry (position, code);
         end;
      else
         do entry_number = 1 to number while (code = 0);
	  call go_to_previous_entry (position, code);
         end;
      if code ^= 0
      then if code ^= error_table_$end_of_info
	 then
	    do;
	       p_code = code;
	       return;
	    end;
      p_code = code;
      p_position = position;
      return;



move_time:
   entry (p_position_ptr, p_abs, p_add, p_subtract, p_time, p_position_info_ptr, p_code);
      position = p_position;
      p_code, code = 0;

      if (bin (p_abs) + bin (p_add) + bin (p_subtract)) ^= 1
      then
         do;
	  p_code = error_table_$inconsistent;
	  return;
         end;
      else if p_abs
      then
         do;
	  call go_to_first_entry (position, code);
	  time = p_time;
	  add = "1"b;
         end;
      else if p_add
      then
         do;
	  time = position.aep -> audit_entry.time + p_time;
	  add = "1"b;
         end;
      else
         do;
	  time = position.aep -> audit_entry.time - p_time;
	  if time < 0
	  then time = 0;
	  add = "0"b;
         end;

      if add
      then
         do entry_idx = 1 to MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
	  while (position.aep -> audit_entry.time < time & code = 0);
	  call go_to_next_entry (position, code);
         end;
      else
         do entry_idx = 1 to MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
	  while (position.aep -> audit_entry.time > time & code = 0);
	  call go_to_previous_entry (position, code);
         end;

      if entry_idx > MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
      then code = error_table_$bad_file;

      if code ^= 0
      then if code ^= error_table_$end_of_info
	 then
	    do;
	       p_code = code;
	       return;
	    end;
      p_code = code;
      p_position = position;

      return;


forward_search:
   entry (p_position_ptr, p_match_str, p_position_info_ptr, p_code);
      dcl	    (p_match_str, match_str)
			       char (256) varying;
      dcl	    (forward, continue)    bit (1) init ("1"b);
      dcl	    (match_begin, match_end)
			       fixed bin(21);
      dcl	    do_first_entry	       bit (1);

      goto START;

backward_search:
   entry (p_position_ptr, p_match_str, p_position_info_ptr, p_code);

      forward = "0"b;

START:
      p_code, code = 0;
      position = p_position;
      match_str = p_match_str;

      do_first_entry = "1"b;
      do entry_idx = 1 to MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
         while ((continue & (position.aep ^= p_position.aep)) | do_first_entry);
         do_first_entry = "0"b;
         if forward
         then call go_to_next_entry (position, code);
         else call go_to_previous_entry (position, code);
         if code ^= 0
         then if code = error_table_$end_of_info
	    then
	       do;
		code = 0;
		if forward
		then call go_to_first_entry (position, code);
		else call go_to_last_entry (position, code);
		if code ^= 0
		then continue = "0"b;
	       end;
	    else
	       do;
		p_code = code;
		return;
	       end;
         call
	  search_file_ (addrel (addr (match_str), 1), 1, length (match_str), addr (position.aep -> audit_entry.string),
	  1, (position.aep -> audit_entry.entry_length), match_begin, match_end, code);
         if code ^= 1
         then continue = "0"b;
         else match_str = "";
      end;
      if entry_idx > MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
      then code = error_table_$bad_file;

      if code = 0
      then p_position = position;
      else if code = 1
      then code = error_table_$nomatch;

      p_code = code;
      return;


next:
   entry (p_position_ptr, p_position_info_ptr, p_code);
      p_code, code = 0;
      call go_to_next_entry (p_position, p_code);
      return;

previous:
   entry (p_position_ptr, p_position_info_ptr, p_code);
      p_code, code = 0;
      call go_to_previous_entry (p_position, p_code);
      return;

first:
   entry (p_position_ptr, p_position_info_ptr, p_code);
      p_code, code = 0;
      call go_to_first_entry (p_position, p_code);
      return;

last:
   entry (p_position_ptr, p_position_info_ptr, p_code);
      p_code, code = 0;
      call go_to_last_entry (p_position, p_code);
      return;

count_last:
   entry (p_position_ptr, p_position_info_ptr, p_code);
      p_code, code = 0;
      call go_to_first_entry (p_position, p_code);
      if p_code ^= 0
      then return;
      do entry_idx = 1 to MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE while (p_code = 0);
         call go_to_next_entry (p_position, p_code);
      end;
      if entry_idx > MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
      then p_code = error_table_$bad_file;

      if p_code = error_table_$end_of_info
      then p_code = 0;
      return;


set_count:
   entry (p_position_ptr, p_position_info_ptr, p_code);
      p_code, code = 0;
      position = p_position;
      call go_to_first_entry (position, p_code);
      if p_code ^= 0
      then return;
      do entry_idx = 1 to MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE while (position.aep ^= p_position.aep);
         call go_to_next_entry (position, p_code);
      end;
      if entry_idx > MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
      then
         do;
	  p_code = error_table_$bad_file;
	  return;
         end;

      p_position = position;
      if position_info.any_tag
      then p_position.search_tag = "";
      return;
%page;
go_to_next_entry:
   proc (p_position, p_code);
      dcl	    entry_idx	       fixed bin (35);
      dcl	    1 p_position	       like position_template;
      dcl	    1 position	       like position_template;
      dcl	    1 last_position	       like position_template;
      dcl	    (code, p_code)	       fixed bin (35);
      dcl	    bit_count24	       fixed bin (24);
      dcl	    file_char_array	       (0:position.component_max_char_index) char (1) based (position.component_ptr);
      dcl	    tag_match	       bit (1);
      p_code, code = 0;
      tag_match = "0"b;
      position = p_position;
      last_position = p_position;
      call go_to_last_entry (last_position, code);

      if (position.component_number = last_position.component_number) & (position.char_index = last_position.char_index)
      then
         do;
	  p_code = error_table_$end_of_info;
	  return;
         end;

      do entry_idx = 1 to MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
         while
         ((position.component_number ^= last_position.component_number | position.char_index ^= last_position.char_index)
         & ^tag_match);
         position.char_index =
	  position.char_index + (currentsize (position.aep -> audit_entry) * 4) + 7
	  - mod ((currentsize (position.aep -> audit_entry) * 4) + 7, 8);

         if position.char_index >= position.component_max_char_index
         then if position.component_number = position_info.max_component
	    then
	       do;
		if position_info.max_component ^= 0
		then
		   do;
		      position.component_number = 0;
		      position.component_ptr = position_info.audit_ptr;
		      if position_info.current_component = 0
		      then position.component_max_char_index = position_info.audit_index;
		      else
		         do;
			  call hcs_$status_mins (position.component_ptr, type, bit_count24, code);
			  if code ^= 0
			  then
			     do;
			        p_code = code;
			        return;
			     end;
			  call hcs_$status_mins (position.component_ptr, type, bit_count24, code);
			  if code ^= 0
			  then
			     do;
			        p_code = code;
			        return;
			     end;
			  position.component_max_char_index = divide (bit_count24, 9, 24, 0);
			  position.component_max_char_index =
			     position.component_max_char_index + 7 - mod (position.component_max_char_index + 7, 8);
		         end;
		   end;
		else position.component_max_char_index = position_info.audit_index - 1;
		position.char_index =
		   (size (audit_file_header) * 4) + 7 - mod ((size (audit_file_header) * 4) + 7, 8);
	       end;
	    else
	       do;
		position.component_number = position.component_number + 1;
		if position.component_number = position_info.current_component
		then
		   do;
		      position.char_index = 0;
		      position.component_ptr = position_info.audit_ptr;
		      position.component_max_char_index = position_info.audit_index - 1;
		   end;
		else if position.component_number = position_info.max_component
		then
		   do;
		      position.char_index = 0;
		      call
		         msf_manager_$get_ptr (position_info.audit_fcb, position.component_number, "1"b,
		         position.component_ptr, bit_count24, code);
		      position.component_max_char_index = position_info.max_index;
		   end;
		else
		   do;
		      position.char_index = 0;
		      call
		         msf_manager_$get_ptr (position_info.audit_fcb, position.component_number, "1"b,
		         position.component_ptr, bit_count24, code);
		      if code ^= 0
		      then
		         do;
			  p_code = code;
			  return;
		         end;
		      position.component_max_char_index = divide (bit_count24, 9, 24, 0);
		      position.component_max_char_index =
		         position.component_max_char_index + 7 - mod (position.component_max_char_index + 7, 8);
		   end;
	       end;
(subscriptrange):
         position.aep = addr (file_char_array (position.char_index));
         call validate_entry (position, p_code);
         if p_code ^= 0
         then return;
         if position_info.any_tag
         then tag_match = "1"b;
         else call set_tag_match (position.aep, position_info.default_search_tag, tag_match);
      end;
      if entry_idx > MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
      then
         do;
	  p_code = error_table_$bad_file;
	  return;
         end;

      if tag_match
      then
         do;
	  if (position.entry_number ^= 0 & position.search_tag = position_info.default_search_tag)
	  then position.entry_number = position.entry_number + 1;
	  else
	     do;
	        position.entry_number = 0;
	        position.search_tag = "";
	     end;
	  p_position = position;
	  p_code = 0;
         end;
      else p_code = error_table_$end_of_info;
   end go_to_next_entry;
%page;
go_to_previous_entry:
   proc (p_position, p_code);
      dcl	    tag_match	       bit (1);
      dcl	    entry_idx	       fixed bin (35);
      dcl	    1 position	       like position_template;
      dcl	    1 p_position	       like position_template;
      dcl	    (code, p_code)	       fixed bin (35);
      dcl	    bit_count24	       fixed bin (24);
      dcl	    file_char_array	       (0:position.component_max_char_index) char (1) based (position.component_ptr);
      p_code, code = 0;
      tag_match = "0"b;
      position = p_position;

      if (position.component_number = position_info.begin_component) & (position.char_index = position_info.begin_index)
      then
         do;
	  p_code = error_table_$end_of_info;
	  return;
         end;

      do entry_idx = 1 to MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
         while
         ((position.component_number ^= position_info.begin_component | position.char_index ^= position_info.begin_index)
         & ^tag_match);

         position.char_index =
	  position.char_index
	  - (position.aep -> audit_entry.last_entry_length + 7
	  - mod (position.aep -> audit_entry.last_entry_length + 7, 8) + (size (audit_entry) * 4));

/* Check if the char_index has crossed a component boundary.  If so reset char_index
   component_number, component_ptr, and component_max_char_index appropriately.
*/

         if position.component_number = 0
	  & position.char_index < ((size (audit_file_header) * 4) + 7 - mod ((size (audit_file_header) * 4) + 7, 8))
						/* The beginning of the zero-th component is after the header. */
         then
	  do;
	     if position_info.file_limit
	     then
	        do;
		 if position_info.max_component ^= position.component_number
		 then
		    do;
		       position.component_number = position_info.max_component;
		       call
			msf_manager_$get_ptr (position_info.audit_fcb, position.component_number, "1"b,
			position.component_ptr, bit_count24, code);
		       if code ^= 0
		       then
			do;
			   p_code = code;
			   return;
			end;
		    end;
		 call hcs_$status_mins (position.component_ptr, type, bit_count24, code);
		 if code ^= 0
		 then
		    do;
		       p_code = code;
		       return;
		    end;
		 position.component_max_char_index = divide (bit_count24, 9, 24, 0);
		 position.component_max_char_index =
		    position.component_max_char_index + 7 - mod (position.component_max_char_index + 7, 8);
	        end;

	     else
	        do;
		 position.component_number = position_info.current_component;
		 position.component_max_char_index = position_info.audit_index - 1;
		 position.component_ptr = position_info.audit_ptr;
	        end;
	     position.char_index =
	        position.component_max_char_index
	        - (position.aep -> audit_entry.last_entry_length + 7
	        - mod (position.aep -> audit_entry.last_entry_length + 7, 8) + (size (audit_entry) * 4));
	  end;
         else if position.char_index < 0
         then
	  do;
	     position.component_number = position.component_number - 1;
	     call
	        msf_manager_$get_ptr (position_info.audit_fcb, position.component_number, "1"b, position.component_ptr,
	        bit_count24, code);
	     if code ^= 0
	     then
	        do;
		 p_code = code;
		 return;
	        end;
	     call hcs_$status_mins (position.component_ptr, type, bit_count24, code);
	     if code ^= 0
	     then
	        do;
		 p_code = code;
		 return;
	        end;
	     position.component_max_char_index = divide (bit_count24, 9, 24, 0);
	     position.component_max_char_index =
	        position.component_max_char_index + 7 - mod (position.component_max_char_index + 7, 8);
	     position.char_index =
	        position.component_max_char_index
	        - (position.aep -> audit_entry.last_entry_length + 7
	        - mod (position.aep -> audit_entry.last_entry_length + 7, 8) + (size (audit_entry) * 4));
	  end;
(subscriptrange):
         position.aep = addr (file_char_array (position.char_index));
         call validate_entry (position, p_code);
         if p_code ^= 0
         then return;
         if position_info.any_tag
         then tag_match = "1"b;
         else call set_tag_match (position.aep, position_info.default_search_tag, tag_match);
      end;
      if entry_idx > MAXIMUM_NUMBER_OF_ENTRIES_POSSIBLE
      then
         do;
	  p_code = error_table_$bad_file;
	  return;
         end;

      if tag_match
      then
         do;
	  if (position.entry_number ^= 0 & position.search_tag = position_info.default_search_tag)
	  then position.entry_number = position.entry_number - 1;
	  else
	     do;
	        position.entry_number = 0;
	        position.search_tag = "";
	     end;

	  p_position = position;
	  p_code = 0;
         end;

      else p_code = error_table_$end_of_info;
   end go_to_previous_entry;
%page;
go_to_last_entry:
   proc (p_position, p_code);
      dcl	    1 p_position	       like position_template;
      dcl	    1 position	       like position_template;
      dcl	    file_char_array	       (0:position.component_max_char_index) char (1) based (position.component_ptr);
      dcl	    bit_count24	       fixed bin (24);
      dcl	    tag_match	       bit (1);
      dcl	    (p_code, code)	       fixed bin (35);

/* The last_entry_length is initialized by audit_attach (called by the command
attach_audit) to the value impossible_audit_entry_length.  This value is
declared in the audit_entry.incl.pl1 include file.
*/
      p_code, code = 0;
      if position_info.last_entry_length = impossible_audit_entry_length
      then
         do;
	  p_code = error_table_$empty_file;
	  return;
         end;
      if position_info.audit_index = (size (audit_file_header) * 4) + 7 - mod (size (audit_file_header) * 4 + 7, 8)
         & position_info.file_limit
      then
         do;
	  position.component_number = position_info.max_component;
	  call
	     msf_manager_$get_ptr (position_info.audit_fcb, position.component_number, "1"b, position.component_ptr,
	     bit_count24, code);
	  if code ^= 0
	  then
	     do;
	        p_code = code;
	        return;
	     end;
         end;
      else if position_info.audit_index = 0
      then
         do;
	  position.component_number = position_info.current_component - 1;
	  call
	     msf_manager_$get_ptr (position_info.audit_fcb, position.component_number, "1"b, position.component_ptr,
	     bit_count24, code);
	  if code ^= 0
	  then
	     do;
	        p_code = code;
	        return;
	     end;
         end;
      else
         do;
	  position.component_number = position_info.current_component;
	  position.component_ptr = position_info.audit_ptr;
         end;

      if (position_info.audit_index = 0
         | (position_info.file_limit
         & (position_info.begin_component > position_info.current_component
         | (position_info.begin_component = position_info.current_component
         & position_info.begin_index > position_info.audit_index))))
      then
         do;
	  call hcs_$status_mins (position.component_ptr, type, bit_count24, code);
	  if code ^= 0
	  then
	     do;
	        p_code = code;
	        return;
	     end;
	  position.component_max_char_index = divide (bit_count24, 9, 24, 0);
	  position.component_max_char_index =
	     position.component_max_char_index + 7 - mod (position.component_max_char_index + 7, 8);
         end;
      else position.component_max_char_index = position_info.audit_index;

      if (position_info.audit_index = 0
         | (position_info.file_limit
         & position_info.audit_index = (size (audit_file_header) * 4) + 7 - mod (size (audit_file_header) * 4 + 7, 8)))
      then position.char_index =
	    position.component_max_char_index
	    - (position_info.last_entry_length + 7 - mod (position_info.last_entry_length + 7, 8)
	    + audit_entry_header_length);
      else position.char_index =
	    position_info.audit_index
	    - (position_info.last_entry_length + 7 - mod (position_info.last_entry_length + 7, 8)
	    + audit_entry_header_length);

(subscriptrange):
      position.aep = addr (file_char_array (position.char_index));
      position.entry_number = 0;
      position.search_tag = "";
      call validate_entry (position, p_code);
      if p_code ^= 0
      then return;

      if position_info.any_tag
      then tag_match = "1"b;
      else call set_tag_match (position.aep, position_info.default_search_tag, tag_match);
      if ^tag_match
      then
         do;
	  call go_to_previous_entry (position, code);
	  if code ^= 0
	  then
	     do;
	        p_code = code;
	        return;
	     end;
         end;
      p_code = 0;
      p_position = position;
   end go_to_last_entry;
%page;
go_to_first_entry:
   proc (p_position, p_code);
      dcl	    1 p_position	       like position_template;
      dcl	    1 position	       like position_template;
      dcl	    (p_code, code)	       fixed bin (35);
      dcl	    tag_match	       bit (1);
      dcl	    bit_count24	       fixed bin (24);
      dcl	    file_char_array	       (0:position.component_max_char_index) char (1) based (position.component_ptr);
      p_code, code = 0;
      position = p_position;

      if position_info.last_entry_length < 0
      then
         do;
	  p_code = error_table_$empty_file;
	  return;
         end;

      if position.component_number ^= position_info.begin_component
      then
         do;
	  position.component_number = position_info.begin_component;
	  position.char_index = position_info.begin_index;

	  if position_info.current_component = position_info.begin_component
	     & position_info.begin_index < position_info.audit_index
	  then position.component_ptr = position_info.audit_ptr;
	  else
	     do;
	        call
		 msf_manager_$get_ptr (position_info.audit_fcb, position.component_number, "1"b,
		 position.component_ptr, bit_count24, code);
	        if code ^= 0
	        then
		 do;
		    p_code = code;
		    return;
		 end;
	     end;
         end;

      else position.char_index = position_info.begin_index;

      if (position_info.file_limit
         & (position_info.begin_component > position_info.current_component
         | (position_info.begin_component = 0 & position_info.begin_index >= position_info.audit_index)))
         | (^position_info.file_limit & position_info.current_component > 0)
      then
         do;
	  call hcs_$status_mins (position.component_ptr, type, bit_count24, code);
	  if code ^= 0
	  then
	     do;
	        p_code = code;
	        return;
	     end;
	  position.component_max_char_index = divide (bit_count24, 9, 24, 0);
	  position.component_max_char_index =
	     position.component_max_char_index + 7 - mod (position.component_max_char_index + 7, 8);
         end;
      else position.component_max_char_index = position_info.audit_index;

(subscriptrange):
      position.aep = addr (file_char_array (position.char_index));
      call validate_entry (position, p_code);
      if p_code ^= 0
      then return;
      if position_info.any_tag
      then tag_match = "1"b;
      else call set_tag_match (position.aep, position_info.default_search_tag, tag_match);

      if ^tag_match
      then
         do;
	  call go_to_next_entry (position, p_code);
	  if p_code ^= 0
	  then return;
         end;

      position.entry_number = 1;
      position.search_tag = position_info.default_search_tag;
      p_position = position;
      p_code = 0;
   end go_to_first_entry;
%page;
set_tag_match:
   proc (p_ptr, p_search_tag, p_tag_match);
      dcl	    p_ptr		       ptr;
      dcl	    p_search_tag	       char (32) varying;
      dcl	    p_tag_match	       bit (1);

      p_tag_match = (substr (p_ptr -> audit_entry.tag, 1, length (p_search_tag)) = p_search_tag);
   end set_tag_match;

validate_entry:
   proc (p_position, p_code);
                                                             /* parameters */
      dcl	    1 p_position	       like position_template; /* input */
      dcl	    p_code	       fixed bin (35);         /* input/output */

/* begin coding */
      p_code = 0;

      if p_position.aep -> audit_entry.tag = "  "
      then p_code = error_table_$bad_file;

      return;

   end validate_entry;
%page;
%include audit_entry;
%include audit_position;
%include audit_file_header;
   end audit_file_position_;
