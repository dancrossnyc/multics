/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright (c) 1986 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(81-01-01,Margulies), approve(), audit(), install():
     These are the journalization comments from window_io_video_, which is
     now incorporated in this module.
     
     video operations for window_io_
     
     asyncronous event management in this program is different
     from that in terminal control. In terminal control, the program can
     detect something happening during a block, and then give up on what it was
     going to write and recompute based on the state after the async occurence.
     Here, terminal controlwill do what we call it to do,
     unless a nonlocal goto is used to unwind the terminal control operation.
     This is a trifle dangerous, as the calls to terminal control are
     nonatomic ... they may consist of several distinct terminal operations.
     
     NB: OP_WRITE_SYNC_GET_CHARS_NO_ECHO is obsolete. In the current
     terminal control implementation, it is equivalent to a WRITE, followed
     by a SYNC, followed by a GET. The window operation, and for that matter
     the tc operation, may become meaningful again in a later implementation,
     and there was not time to gut the callers.
     
     Modified 21 January 1982 by Chris Jones to re-enable quits after
     reconnection
     
     Modified 16 August 1982 by William M. York to fix W_GET_ECHOED_CHARS so
     it doesn't try to update the cursor position after an async event occurs
     in the current window.  Since the cursor has moved somewhere else, this
     caused the cursor state to become invalid.
     
     Modified 16 September 1982 by WMY to fix W_GET_ECHOED_CHARS to handle the
     case where tc_ returned because of async interruption and the input buffer
     happened to be full.  This bug caused looping and process death.
     
     Modified 21 September 1982 by WMY fix a bug in W_SYNC which passed the
     wrong structure down to tc_.
     
     Modified 29 October 1982 by WMY to update the attach_data.col after a
     successful OP_WRITE_SYNC_GET_CHARS_NO_ECHO to include the prompt.
  2) change(81-01-01,WMY), approve(), audit(), install():
     Set status on raw output calls, but ignore that status when the next raw
     output call comes in.
     
     Modified 1 October 1983 by Jon A. Rochlis to add support for partial
     screen width windows.
     
     Modified 30 September 1983 by Jon A. Rochlis to add support for partial
     screen width windows to create_window.
     
     Modified 9 October 1983 by JR to map error_table_$undefined_order_request
     into video_et_$wsys_not_invoked.
     
     Modified 9 October 1983 by Jon A. Rochlis to add first cut
     at window_$edit_line.
     
     Modifed December 1983 - February 1984 by Bill Gimbel and JR to move
     window_io_video_ to this module.
     
     Modified 27 December 1984 by JR to only update attach_data state if calls
     to tc_ were successful.  This prevent inconsistent states which could
     hang a process.
     
     Modified 7 February 1985 by JR to store the current ips mask in tc's
     request structure so tc_block can restore it before going blocked.
     
     user interface to extended video operations
  3) change(87-02-13,LJAdams), approve(87-03-19,MCR7642),
     audit(87-04-24,Gilcrease), install(87-05-14,MR12.1-1030):
     The entry points insert_text and overwrite_text are calling
     require_cursor_valid after masking IPS signals.  If the cursor position is
     invalid because the write_raw_text entry was previously called, the
     require_cursor_valid procedure will exit window_ leaving the signals
     masked.  (phx20711).
                                                   END HISTORY COMMENTS */



/* format: style2,linecom,^indnoniterdo,indcomtxt,^inditerdo,dclind5,idind25 */
window_:
     procedure;
	return;

	declare 1 simple_r		   aligned like request_header;

	declare real_window_iocb_ptr	   pointer;
	declare target_iocbp	   pointer;
	declare this_request_ptr	   pointer;
	declare this_is_an_input_request bit (1) aligned;
	declare saved_ips_mask	   bit (36) aligned;
	declare cleanup		   condition;

	declare (
	        hcs_$set_ips_mask,
	        hcs_$reset_ips_mask
	        )			   entry (bit (36) aligned, bit (36) aligned);


	declare (
	        video_et_$window_status_pending,
	        video_et_$bad_window_id,
	        video_et_$cursor_position_undefined,
	        video_et_$string_not_printable
	        )			   external static fixed bin (35);

	declare (
	        Iocb_ptr		   pointer,
	        Distance		   fixed bin,
	        Line		   fixed bin,
	        Col		   fixed bin,
	        N_lines		   fixed bin,
	        N_cols		   fixed bin,
	        Count		   fixed bin,
	        N_to_get		   fixed bin (21),
	        Text		   character (*),
	        Prompt		   character (*),
	        Text_got		   fixed bin (21),
	        Break		   character (1) varying,
	        Code		   fixed bin (35)
	        )			   parameter;

	declare (addcharno, addr, character, clock, currentsize, length, ltrim, max, null, rtrim, string, substr,
	        unspec, verify)	   builtin;

position_cursor:
     entry (Iocb_ptr, Line, Col, Code);
	dcl  (line, col)		fixed bin;
	call get_attach_data_ptr;

	line = Line;
	col = Col;
pc_common:
	on cleanup call clean_things_up ();
	call setup_request (addr (simple_r), OP_POSITION_CURSOR, line, col);
	call do_request (addr (simple_r));

	if Code = 0
	then do;					/* only update state, if the operation worked */
	     attach_data.line = line;
	     attach_data.col = col;
	     attach_data.cursor_valid = "1"b;
	end;
	go to done;

position_cursor_rel:
     entry (Iocb_ptr, Line, Col, Code);

	call get_attach_data_ptr;
	call require_cursor_valid;

	line = Line + attach_data.line;
	col = Col + attach_data.col;
	goto pc_common;

change_column:
     entry (Iocb_ptr, Col, Code);
	call get_attach_data_ptr;
	call require_cursor_valid;
	line = attach_data.line;
	col = Col;
	go to pc_common;

change_line:
     entry (Iocb_ptr, Line, Code);
	call get_attach_data_ptr;
	call require_cursor_valid;
	col = attach_data.col;
	line = Line;
	go to pc_common;

	declare 1 rqr		   aligned like request_clear_region;

clear_window:
     entry (Iocb_ptr, Code);

clear_window_label:
	call get_attach_data_ptr;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqr), OP_CLEAR_REGION, 1, 1);

	rqr.rows = attach_data.current.rows;
	rqr.columns = attach_data.current.columns;

	call do_request (addr (rqr));
	if Code = 0
	then do;
	     attach_data.line, attach_data.col = 1;
	     attach_data.cursor_valid = "1"b;

/* This is an awful modularity violation since this variable should
   only be touched by window_io_iox_. However, until there are more
   control orders for window operations, we are stuck with it. */
	     attach_data.lines_written_since_read = 0;
	end;
	go to done;

clear_to_end_of_window:
     entry (Iocb_ptr, Code);

	call get_attach_data_ptr;
	call require_cursor_valid;
	if attach_data.col = 1			/* Are we at */
	     & attach_data.line = 1			/* The Origin? */
	then go to clear_window_label;		/* Much Easier */

	on cleanup call clean_things_up ();
	call setup_request (addr (rqr), OP_CLEAR_REGION, attach_data.line, attach_data.col);
						/* first approx */

	if attach_data.col > 1
	then do;
	     rqr.rows = 1;
	     rqr.columns = attach_data.current.columns - attach_data.col + 1;
	     call do_request (addr (rqr));		/* clear off current line */
	     if rqr.row < attach_data.current.rows
	     then do;				/* now do full-width part */
		rqr.columns = attach_data.current.columns;
		rqr.row = rqr.row + 1;
		rqr.rows = attach_data.current.rows - attach_data.line;
						/* + 1 canceled by the row we already got */
		rqr.col = 1;
		if rqr.rows > 1
		then call do_request (addr (rqr));
	     end;
	end;
	else do;					/* start at col 1 */

	     rqr.columns = attach_data.current.columns;
	     rqr.rows = attach_data.current.rows - attach_data.line + 1;
	     if rqr.rows ^< 1
	     then call do_request (addr (rqr));
	end;

	if attach_data.col > 1			/* we had to clear end of line */
	then do;
	     call clean_things_up ();
	     call setup_request (addr (simple_r), OP_POSITION_CURSOR, attach_data.line, attach_data.col);
	     call do_request (addr (simple_r));
	end;					/* do */
	go to done;

clear_to_end_of_line:
     entry (Iocb_ptr, Code);
	call get_attach_data_ptr;
	call require_cursor_valid;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqr), OP_CLEAR_REGION, attach_data.line, attach_data.col);
	rqr.rows = 1;
	rqr.columns = attach_data.current.columns - attach_data.col + 1;
	call do_request (addr (rqr));
	go to done;

clear_region:
     entry (Iocb_ptr, Line, Col, N_lines, N_cols, Code);
	call get_attach_data_ptr;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqr), OP_CLEAR_REGION, Line, Col);
	rqr.extent.rows = N_lines;
	rqr.extent.columns = N_cols;

	call do_request (addr (rqr));

	if Code = 0
	then do;
	     attach_data.col = Col;
	     attach_data.line = Line;
	     attach_data.cursor_valid = "1"b;
	end;
	go to done;

	declare 1 rqt		   aligned like request_text;

insert_text:
     entry (Iocb_ptr, Text, Code);

	call get_attach_data_ptr;
	call require_cursor_valid;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqt), OP_INSERT_TEXT, attach_data.line, attach_data.col);
	go to tx_common;

overwrite_text:
     entry (Iocb_ptr, Text, Code);

	call get_attach_data_ptr;
	call require_cursor_valid;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqt), OP_OVERWRITE_TEXT, attach_data.line, attach_data.col);

tx_common:
	call validate_text (Text);
	rqt.text_ptr = addr (Text);
	rqt.text_length = length (Text);
	call do_request (addr (rqt));
	if Code = 0
	then attach_data.col = attach_data.col + rqt.text_length;
	go to done;

write_raw_text:
     entry (Iocb_ptr, Text, Code);
	call get_attach_data_ptr;
	if attach_data.status_pending & ^attach_data.ignore_status
	then if unspec (attach_data.status) ^= unspec (W_STATUS_SCREEN_INVALID)
	     then do;
		Code = video_et_$window_status_pending;
		goto error_return;
	     end;

	on cleanup call clean_things_up ();
	call setup_request (addr (rqt), OP_WRITE_RAW, attach_data.line, attach_data.col);
	if ^attach_data.cursor_valid
	then do;
	     rqt.row = attach_data.line_origin;		/* as good a place as any */
	     rqt.col = 1;
	end;
	rqt.text_ptr = addr (Text);
	rqt.text_length = length (Text);
	call do_request (addr (rqt));

	if Code = 0
	then do;
	     attach_data.cursor_valid = "0"b;
	     attach_data.status.screen_invalid = "1"b;
	     attach_data.status_pending = "1"b;
	end;
	go to done;

delete_chars:
     entry (Iocb_ptr, Count, Code);
	call get_attach_data_ptr;
	declare 1 rqd		   aligned like request_delete_chars;
	call require_cursor_valid;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqd), OP_DELETE_CHARS, attach_data.line, attach_data.col);
	rqd.count = Count;
	call do_request (addr (rqd));
	go to done;

get_cursor_position:
     entry (Iocb_ptr, Line, Col, Code);
	call get_attach_data_ptr;
	call require_cursor_valid;
	Line = attach_data.line;
	Col = attach_data.col;
	return;

bell:
     entry (Iocb_ptr, Code);
	call get_attach_data_ptr;
	call require_cursor_valid;
	on cleanup call clean_things_up ();
	call setup_request (addr (simple_r), OP_BELL, attach_data.line, attach_data.col);
	call do_request (addr (simple_r));
	go to done;

	declare 1 rqg		   aligned like request_read;
	declare rqg_text		   character (rqg.buffer_length) based (rqg.buffer_ptr);

get_unechoed_chars:
     entry (Iocb_ptr, N_to_get, Text, Text_got, Break, Code);
	call get_attach_data_ptr;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqg), OP_GET_CHARS_NO_ECHO, attach_data.line, attach_data.col);
						/* we don't check the cursor position for unechoed input */
	rqg.prompt_ptr = null ();
	go to get_common;

get_echoed_chars:
     entry (Iocb_ptr, N_to_get, Text, Text_got, Break, Code);
	call get_attach_data_ptr;
	call require_cursor_valid;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqg), OP_GET_CHARS_ECHO, attach_data.line, attach_data.col);
	rqg.prompt_ptr = null ();

get_common:
	Break = "";
	rqg.buffer_ptr = addr (Text);
	rqg.buffer_length = N_to_get;
	rqg.breaks = attach_data.breaks;

	Text_got = 0;

get_some_more:
	rqg.returned_break_flag = "0"b;
	rqg.returned_length = 0;
	rqg.col = attach_data.col + attach_data.column_origin - 1;

	call do_request (addr (rqg));

	Text_got = Text_got + rqg.returned_length;

/* This gets complicated.  If something asynchronous has happened
   in this window, we don't really know where the cursor is,
   and we certainly shouldn't set the cursor position to our now
   invalid idea of where it is.  If it happened in some other
   window, update the cursor state and get some more chars. */

	if rqg.async_interruption			/* ASSERT cannot be on if returned_break_flag is on */
	then do;					/* something went BONG */
	     if rqg.this_window
	     then do;
		attach_data.status.async_change = "1"b;
		attach_data.status_pending = "1"b;

/* If we got something, return it and q status for next call.
   if we got nothing, might as well return the status this call.
   but never return status AND characters. */

		if Text_got = 0
		then Code = video_et_$window_status_pending;
		go to done;
	     end;
	     else do;				/* Some Other Window */

		rqg.buffer_ptr = addcharno (rqg.buffer_ptr, rqg.returned_length);
		rqg.buffer_length = rqg.buffer_length - rqg.returned_length;

/* update the cursor state so far */
		if rqg.operation = OP_GET_CHARS_ECHO
		then attach_data.col = attach_data.col + rqg.returned_length;

		if rqg.operation = OP_WRITE_SYNC_GET_CHARS_NO_ECHO
		then do;				/* don't reprint prompt, just read response */
		     rqg.operation = OP_GET_CHARS_NO_ECHO;
		     attach_data.col = rqg.col + rqg.prompt_length;
		end;

/* At this point we know that tc_ level returned
   because something asynchronous happened in another
   window.  If the user was in the phantom column at the
   time, the call to tc_ returned enough characters to
   fill our caller's buffer, so return.  */

		if rqg.returned_length = rqg.buffer_length
		then goto done;
		else goto get_some_more;

	     end;
	end;					/* The async term case */

/* no async, so update the cursor position */
	if rqg.operation = OP_GET_CHARS_ECHO
	then do;
	     attach_data.col = attach_data.col + rqg.returned_length;
	     if rqg.returned_break_flag & (rqg.returned_length > 0)
	     then attach_data.col = attach_data.col - 1;	/* The last one isn't really there */
	end;
	else if rqg.operation = OP_WRITE_SYNC_GET_CHARS_NO_ECHO
	then attach_data.col = rqg.col + rqg.prompt_length;

	if rqg.returned_break_flag & rqg.returned_length > 0
	then do;
	     Text_got = Text_got - 1;
	     Break = substr (rqg_text, rqg.returned_length, 1);
	end;
	go to done;

get_one_unechoed_char:
get_one_unechoed:
     entry (Iocb_ptr, One, Block_flag, Code);

	declare One		   character (1) varying;
	declare one_char		   character (1);
	declare Block_flag		   bit (1) aligned;

	call get_attach_data_ptr;
	call require_cursor_valid;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqg), OP_READ_ONE, attach_data.line, attach_data.col);

	rqg.buffer_ptr = addr (one_char);
	rqg.buffer_length = 1;

one_some_more:					/* returned_break_flag is the block flag on input, and the
						   break_flag on output */
	rqg.returned_break_flag = Block_flag;
	call do_request (addr (rqg));

/* Several things could have happened in the call to tc_.
   1) called in with block flag off, no asyncronosity possible cause we
   didn't block regardless of what we got back.
   2) called in with block flag, nothing async happens while blocked, got char.
   3) called in with block flag, async event happend, no char back. */

	if rqg.async_interruption
	then if rqg.this_window
	     then do;
		attach_data.status.async_change = "1"b;
		attach_data.status_pending = "1"b;
		Code = video_et_$window_status_pending;
		go to done;
	     end;
	     else goto one_some_more;

	if ^Block_flag & ^rqg.returned_break_flag
	then One = "";
	else One = one_char;

	go to done;

write_sync_read:
     entry (Iocb_ptr, Prompt, N_to_get, Text, Text_got, Break, Code);
	call get_attach_data_ptr;
	call require_cursor_valid;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqg), OP_WRITE_SYNC_GET_CHARS_NO_ECHO, attach_data.line, attach_data.col);

	rqg.prompt_ptr = addr (Prompt);
	rqg.prompt_length = length (Prompt);

	goto get_common;

sync:
     entry (Iocb_ptr, Code);
	call get_attach_data_ptr;
	on cleanup call clean_things_up ();
	call setup_request (addr (rqg), OP_GET_CHARS_NO_ECHO, attach_data.line, attach_data.col);
	rqg.buffer_length = 0;
	call do_request (addr (rqg));			/* lengths are 0 */
	go to done;

/* This is somewhat of a kludge, but is a first cut at allowing the
   video system line editor to be called from a window_ context, rather than
   an iox_ context.  It is very un-window_ like, since we don't make a control
   order for tc_io_, but instead call window_io_iox_ directly.  When
   the editor moves out of window_io_iox_ and window_io_ is taught about
   this then it can be changed. All we are at the moment is a blown up
   transfer vector! */

edit_line:
     entry (Iocb_ptr, Window_edit_line_info_ptr, Buffer_ptr, Buffer_len, N_read, Code);

	declare Window_edit_line_info_ptr
				   pointer parameter;
	declare Buffer_ptr		   pointer parameter;
	declare Buffer_len		   fixed binary (21) parameter;
	declare N_read		   fixed binary (21) parameter;

	declare window_io_iox_$edit_line entry (ptr, ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));

	call get_attach_data_ptr;
	call require_cursor_valid;
	call window_io_iox_$edit_line (real_window_iocb_ptr /* set by get_attach_data_ptr */, Window_edit_line_info_ptr,
	     Buffer_ptr, Buffer_len, N_read, Code);
	return;

scroll_region:
     entry (Iocb_ptr, Line, N_lines, Distance, Code);

	declare 1 rsr		   aligned like request_scroll_region;
	call get_attach_data_ptr;
	call require_cursor_valid;
	on cleanup call clean_things_up ();
	call setup_request (addr (rsr), OP_SCROLL_REGION, 1, 1);
						/* The coords are not interesting */

	rsr.n_lines = N_lines;
	rsr.distance = Distance;
	rsr.start_line = Line + attach_data.line_origin - 1;
	call do_request (addr (rsr));
	go to done;

/* Create and Destroy utilities -- the beginnings of the window
   side of desk management. */

	declare window_list_ptr	   pointer;
	declare 1 window_list	   aligned based (window_list_ptr),
		2 sentinel	   character (4) aligned,
		2 n_windows	   fixed bin,
		2 window_names	   (wl_n_windows refer (window_list.n_windows)) character (32) unaligned;

	declare wl_n_windows	   fixed bin;
	declare (i, j)		   fixed bin;
	declare code		   fixed bin (35);
	declare value_$get_data	   entry (pointer, bit (36) aligned, character (*), pointer, pointer,
				   fixed binary (18), fixed binary (35));
	declare value_$set_data	   entry (pointer, bit (36) aligned, character (*), pointer, fixed binary (18),
				   pointer, pointer, fixed binary (18), fixed binary (35));
	declare (
	        error_table_$null_info_ptr,
	        error_table_$unimplemented_version
	        )			   fixed bin (35) ext static;
	declare video_et_$switch_not_window
				   fixed bin (35) external static;
get_window_list:
     procedure (terminal_name);
	declare terminal_name	   character (*);
	declare value_name		   character (45) /* 32 + 13 */;
	declare no_create		   bit (1) aligned;

	declare WINDOW_LIST_VALUE_NAME_SUFFIX
				   character (12) init ("window_list_") internal static options (constant);

	no_create = "0"b;
	go to common;

get_window_list$$no_create:
     entry (terminal_name);
	no_create = "1"b;

common:
	window_list_ptr = null ();
	value_name = rtrim (terminal_name) || WINDOW_LIST_VALUE_NAME_SUFFIX;

	call value_$get_data (null (), "10"b /* perprocess */, value_name, get_system_free_area_ (), window_list_ptr,
	     (0), code);

	if window_list_ptr = null ()
	then do;
	     if no_create
	     then return;
	     wl_n_windows = 1;
	     allocate window_list set (window_list_ptr);
	     window_list.sentinel = "WNDL";
	     window_list.n_windows = 0;		/* careful here, to avoid pl1 illegalities */
	end;
	return;

store_window_list:
     entry (terminal_name);
	declare size_of_window_list	   fixed bin (18);

	value_name = rtrim (terminal_name) || WINDOW_LIST_VALUE_NAME_SUFFIX;

	if window_list_ptr ^= null ()
	then size_of_window_list = currentsize (window_list);
	else size_of_window_list = 0;
	call value_$set_data (null (), "10"b /* perprocess */, value_name, window_list_ptr, size_of_window_list,
	     null (), null (), (0), (0));		/* we ignore the code */
	if window_list_ptr ^= null ()
	then free window_list;
	return;
     end;


create:
create_window:
     entry (Terminal_iocb_ptr, Window_info_ptr, Window_iocb_ptr, Code);
	declare Terminal_iocb_ptr	   pointer parameter;
	declare terminal_iocb_ptr	   pointer;
	declare Window_iocb_ptr	   pointer parameter;
	declare Window_info_ptr	   pointer parameter;

	terminal_iocb_ptr = Terminal_iocb_ptr;
	window_position_info_ptr = Window_info_ptr;
	Code = 0;
	if window_position_info_ptr = null () | Window_iocb_ptr = null () | Terminal_iocb_ptr = null ()
	then do;
	     Code = error_table_$null_info_ptr;
	     return;
	end;

	if window_position_info.version ^= window_position_info_version
	then do;
	     Code = error_table_$unimplemented_version;
	     return;
	end;

	begin;
	     declare atd		        character (128);

	     atd = "window_io_ " || iocb_name (terminal_iocb_ptr) || " -first_line "
		|| ltrim (rtrim (character (window_position_info.origin.line)));

	     if window_position_info.height > 0
	     then atd = rtrim (atd) || " -n_lines " || ltrim (rtrim (character (window_position_info.height)));

	     if window_position_info.origin.column > 0
	     then atd = rtrim (atd) || " -first_column "
		     || ltrim (rtrim (character (window_position_info.origin.column)));

	     if window_position_info.width > 0
	     then atd = rtrim (atd) || " -n_columns " || ltrim (rtrim (character (window_position_info.width)));

	     call iox_$attach_ptr (Window_iocb_ptr, atd, null (), Code);
	     if Code ^= 0
	     then return;
	end;

	call iox_$open (Window_iocb_ptr, Stream_input_output, ""b, Code);
	if Code ^= 0
	then do;
	     call iox_$detach_iocb (Window_iocb_ptr, (0));
	     return;
	end;

	call get_window_list$$no_create (iocb_name (terminal_iocb_ptr));
	begin;
	     declare new_window_list_ptr      pointer;

	     if window_list_ptr = null ()
	     then wl_n_windows = 1;
	     else wl_n_windows = window_list.n_windows + 1;
	     allocate window_list set (new_window_list_ptr);
	     new_window_list_ptr -> window_list.sentinel = "WNDL";
	     if window_list_ptr ^= null ()
	     then do;
		do i = 1 to window_list.n_windows;
		     new_window_list_ptr -> window_list.window_names (i) = window_list.window_names (i);
		end;
		free window_list;
	     end;
	     else i = 1;
	     window_list_ptr = new_window_list_ptr;
	     window_list.window_names (i) = iocb_name (Window_iocb_ptr);
	end;					/* the begin block */
	call store_window_list (iocb_name (terminal_iocb_ptr));

	return;

destroy:
destroy_window:
     entry (Window_iocb_ptr, Code);

	call iox_$control (Window_iocb_ptr, "get_terminal_iocb_ptr", terminal_iocb_ptr, Code);
	if Code ^= 0
	then return;

	call get_window_list (iocb_name (terminal_iocb_ptr));

	do i = 1 to window_list.n_windows;
	     if window_list.window_names (i) = iocb_name (Window_iocb_ptr)
	     then do;
		if i < window_list.n_windows
		then do j = i + 1 to window_list.n_windows;
		     window_list.window_names (j - 1) = window_list.window_names (j);
		end;
		go to SUCCESS;
	     end;
	end;
	Code = video_et_$switch_not_window;
	return;

SUCCESS:
	call iox_$close (Window_iocb_ptr, (0));
	call iox_$detach_iocb (Window_iocb_ptr, (0));

	begin;
	     declare new_window_list_ptr      pointer;
	     wl_n_windows = window_list.n_windows - 1;
	     if wl_n_windows = 0
	     then free window_list;
	     else do;
		allocate window_list set (new_window_list_ptr);
		do i = 1 to wl_n_windows;
		     new_window_list_ptr -> window_list.window_names (i) = window_list.window_names (i);
		end;
		free window_list;
		window_list_ptr = new_window_list_ptr;
	     end;
	end;					/* the begin */

	call store_window_list (iocb_name (terminal_iocb_ptr));
	return;

destroy_all:
destroy_all_windows:
     entry (Terminal_iocb_ptr);			/* No code interesting */
	declare iocb_ptr		   pointer;

	terminal_iocb_ptr = Terminal_iocb_ptr;
	call get_window_list$$no_create (iocb_name (terminal_iocb_ptr));
	if window_list_ptr = null
	then return;
	do i = 1 to window_list.n_windows;
	     iocb_ptr = find_iocb (window_list.window_names (i));
	     call iox_$close (iocb_ptr, (0));
	     call iox_$detach_iocb (iocb_ptr, (0));
	end;
	free window_list;
	call store_window_list (iocb_name (terminal_iocb_ptr));
	return;

iocb_name:
     procedure (iocb_ptr) returns (character (32)) reducible;
	declare iocb_ptr		   pointer;
	return (iocb_ptr -> iocb.name);
     end iocb_name;

find_iocb:
     procedure (iocb_name) returns (pointer);
	declare iocb_ptr		   pointer;
	declare iocb_name		   character (*);

	call iox_$find_iocb (iocb_name, iocb_ptr, (0));
	return (iocb_ptr);
     end find_iocb;
%page;

setup_request:
     procedure (r_header_ptr, op, l, c);
	declare r_header_ptr	   pointer;
	declare (op, l, c)		   fixed bin;

	this_request_ptr, request_ptr = r_header_ptr;

	attach_data.async_count = attach_data.async_count + 1;
	call hcs_$set_ips_mask (""b, saved_ips_mask);
	request_header.saved_ips_mask = saved_ips_mask;

/* If there is status pending for this window, return a code.
   Raw output handles its own status below. */

	if (op ^= OP_WRITE_RAW) & attach_data.status_pending & ^attach_data.ignore_status
	then do;
	     Code = video_et_$window_status_pending;
	     go to done;
	end;

	this_is_an_input_request =
	     (op = OP_GET_CHARS_ECHO | op = OP_GET_CHARS_NO_ECHO | op = OP_WRITE_SYNC_GET_CHARS_NO_ECHO
	     | op = OP_READ_ONE);

	request_header.sentinel = REQUEST_SENTINEL;
	request_header.window_id = attach_data.window_id;
	request_header.request_id = clock ();
	request_header.operation = op;
	request_header.row = l + attach_data.line_origin - 1;
	request_header.col = c + attach_data.column_origin - 1;
	string (request_header.flags) = ""b;

     end setup_request;

do_request:
     procedure (request_ptr);
	declare request_ptr		   pointer;

	target_iocbp = attach_data.target_iocb_ptr;

/* terminal control will unmask if it blocks. */
/* we must just note if it signals */
/* the condition handler is elsewhere established to keep this block quick */
/* but this is the right place for the handler to destect ips mask changes
   which happen while down in tc. Sigh, I wonder if the cost is worth it --
   JR 2/10/85 */

	on cleanup
	     begin;
		if request_header.saved_ips_mask ^= saved_ips_mask
		then saved_ips_mask = request_header.saved_ips_mask;
	     end;

	call iox_$control (target_iocbp, "window_operation", request_ptr, Code);
	if Code = video_et_$bad_window_id
	then begin;				/* reconnection, get us a new id if we can */
		declare 1 auto_desk_info	   aligned like tc_desk_window_info;
		auto_desk_info.window_id = attach_data.window_id;
		auto_desk_info.first_row = attach_data.line_origin;
		auto_desk_info.n_rows = attach_data.current.rows;
		auto_desk_info.first_column = attach_data.column_origin;
		auto_desk_info.n_columns = attach_data.current.columns;
		auto_desk_info.window_iocb_ptr = real_window_iocb_ptr;
		call iox_$control (target_iocbp, "check_out_window", addr (auto_desk_info), (0));
						/* JustinCase */
		call iox_$control (target_iocbp, "check_in_window", addr (auto_desk_info), Code);
		if Code ^= 0
		then go to terminal_control_died;
		attach_data.window_id = auto_desk_info.window_id;
		attach_data.status_pending = "1"b;
		attach_data.status.screen_invalid = "1"b;
		call iox_$control (target_iocbp, "quit_enable", null (), (0));
		Code = video_et_$window_status_pending;
		go to done;
	     end;

	if ^this_is_an_input_request & request_ptr -> request_header.async_interruption
	     & request_ptr -> request_header.this_window
	then go to ASYNC_EVENT;
     end do_request;

clean_things_up:
     procedure;

	attach_data.async_count = max (0, attach_data.async_count - 1);
	if saved_ips_mask ^= ""b
	then call hcs_$reset_ips_mask (saved_ips_mask, (""b));

	saved_ips_mask = ""b;

	return;

     end clean_things_up;

/* IMPORTANT: This routine must be invoked before we mask and hack the async
   counter because it branches to "error_return", not "done" */

require_cursor_valid:
     procedure;
	if ^attach_data.cursor_valid
	then do;
	     Code = video_et_$cursor_position_undefined;
	     go to error_return;
	end;
     end require_cursor_valid;

/* IMPORTANT: This routine must be invoked before we mask and hack the async
   counter because it branches to "error_return", not "done" */

get_attach_data_ptr:
     procedure;

	dcl  error_table_$undefined_order_request
				fixed bin (35) ext static;
	dcl  video_et_$wsys_not_invoked
				fixed bin (35) ext static;

	Code = 0;
	real_window_iocb_ptr = null ();
	saved_ips_mask = ""b;

	call iox_$control (Iocb_ptr, "get_window_iocb_ptr", real_window_iocb_ptr, Code);
	if Code = error_table_$undefined_order_request | real_window_iocb_ptr = null ()
						/* discard_ will return a zero error code! */
	then Code = video_et_$wsys_not_invoked;		/* much better */
	if Code ^= 0
	then goto error_return;

	attach_data_ptr = real_window_iocb_ptr -> iocb.attach_data_ptr;
	return;

     end get_attach_data_ptr;

terminal_control_died:				/* insert debugging code here */
	go to done;

/* Only branch here if we haven't masked.  This is needed because we might
   not even have a valid iocb at this point, so we can't muck with attach
   data! */

error_return:
	return;
done:
	revert cleanup;				/* At least keep things from getting more confused */
	call clean_things_up ();
	return;

ASYNC_EVENT:
	on cleanup call clean_things_up;
	call setup_request (addr (simple_r), OP_GET_CURSOR_POSITION, (0), (0));

	call do_request (addr (simple_r));
	if simple_r.row ^< attach_data.line_origin	/* after the top */
	     & simple_r.row ^> (attach_data.line_origin + attach_data.current.rows - 1)
						/* and before the bottom */
	then do;					/* if the cursor landed in this window */
	     attach_data.line = simple_r.row;		/* note where */
	     attach_data.col = simple_r.col;
	end;

	attach_data.status_pending = "1"b;
	attach_data.status.async_change = "1"b;

	Code = video_et_$window_status_pending;
	go to done;

validate_text:
     procedure (text);
	declare text		   character (*);
	declare printable		   character (96)
				   init (
				   " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()-_=+`~\|{}'"";:/?.>,<[]!"
				   ) internal static options (constant);

	if verify (text, printable) > 0
	then do;
	     Code = video_et_$string_not_printable;
	     go to done;
	end;
     end validate_text;

%include tc_desk_info_;
%page;
%include iox_dcls;
%page;
%include iox_modes;
%page;
%include iocb;
%page;
%include window_control_info;
%page;
%include window_io_attach_data_;
%page;
%include tc_operations_;

     end window_;
