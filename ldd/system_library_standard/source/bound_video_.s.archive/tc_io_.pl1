/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-05-23,LJAdams), approve(86-11-11,MCR7485),
     audit(86-12-19,Margolin), install(87-01-06,MR12.0-1255):
     Modified to support MOWSE.
  2) change(86-11-26,LJAdams), approve(86-11-26,MCR7584),
     audit(86-12-19,Margolin), install(87-01-06,MR12.0-1255):
     Initial DSA coding has been maintained in a non-executable form.
  3) change(87-02-17,LJAdams), approve(87-03-19,PBF7584),
     audit(87-04-24,Gilcrease), install(87-05-14,MR12.1-1030):
     Incorrect paramaters being passed to dsa_tty_$connect.
  4) change(88-09-26,LJAdams), approve(88-09-26,MCR8001),
     audit(88-10-06,Farley), install(88-10-07,MR12.2-1148):
     In the reconnection entrypoint attach_data.tc_info_ptr was not being
     checked for a null value before starting to process.
  5) change(90-09-20,Bubric), approve(90-10-01,MCR8211), audit(90-10-01,Itani),
     install(90-10-17,MR12.4-1044):
     Have the calls to the routine 'nothing' changed to calls to the routine
     'null_entry_'.
                                                   END HISTORY COMMENTS */


/* format: style2,linecom,^indnoniterdo,indcomtxt,^inditerdo,dclind5,idind25 */
tc_io_:
     procedure;


/*
   This is an interim implementation of the terminal control level
   I/O module. Its successor, terminal_io_, will be rather more complete.
   This program provides the Terminal Management layer of the Video System,
   translating logical video operations into physical terminal operations.
   It does not provide any Window Management, so that video operations
   so that the video environment is not available until another attachment
   is made atop this one.


   This program was created by creatively merging JR Davis' vtty_ and the
   old terminal io module, tty_.

   vtty_ was written by James Raymond Davis,

   with the guidance of
   ** * Steve H.Webber ** *
   ** * Larry E.Johnson ** *
   ** * Bernard S.Greenberg ** *

   * October 1980

   ***************************************************************************

   If I have seen further than others ...

   Benson Ira Margulies, May 22, 1981.

*/

/* Modified 3 April 1984 by Jon A. Rochlis to add the entry for reconnection.

   Q: So where is terminal_io_?
   A: That day is not today, at least not at Honeywell. */
/* Modified June 1985 by Roger Negaret to support DSA networks. */
/* Modified Mar 1986 by Cox for new ipc_$create_event_channel call sequence */

/* Parameters */

	dcl  Iocbp		pointer parameter;
	dcl  Code			fixed bin (35) parameter;
	dcl  Com_err_switch		bit (1) aligned parameter;
	dcl  Ignore		bit (1) aligned parameter;
	dcl  Open_mode		fixed bin parameter;
	dcl  Attach_options		(*) character (*) varying parameter;

/* Automatic */

	dcl  dsa_connection_info_ptr	ptr;
	dcl  dsa_connection_info_len	fixed bin (21);
	dcl  access_class_range	(2) bit (72);

	dcl  actual_iocbp		ptr;		/* copy of iocb.actual_ioc_ptr */
	dcl  device		char (32);
	dcl  terminal_type		character (32);
	dcl  do_not_block		bit (1);
	dcl  i			fixed bin;
	dcl  iocbp		ptr;		/* copy of arg_iocb_ptr */
	dcl  hangup		bit (1);
	dcl  login_channel		bit (1);
	dcl  mask			bit (36) aligned;	/* ips mask */
	dcl  mowse_terminal_iocbp	ptr;
	dcl  phone_no		char (32);	/* phone to which to dial */
	dcl  password		char (12);
	dcl  password_given		bit (1);
	dcl  resource_description	character (256);
	dcl  state		fixed bin;	/* state returned by hcs_$tty_ calls */

	dcl  1 dma		aligned like dial_manager_arg;

	dcl  1 ipcas		aligned like ipc_create_arg_structure;


	dcl  1 dm_flags		aligned,
	       2 dialup		bit (1) unal,
	       2 hungup		bit (1) unal,
	       2 control		bit (1) unal,
	       2 pad		bit (33) unal;

	dcl  1 event_message	like event_wait_info aligned;
	dcl  error_string		char (32);

/* builtins */

	dcl  (addr, hbound, index, lbound, null, string, substr)
				builtin;

/* Constants */

	dcl  ME			character (32) internal static options (constant) initial ("tc_io_");

	dcl  MOWSE_DEVICE		character (9) internal static options (constant) initial ("mowse_i/o");


/* Based */

	dcl  system_free_area	area based (get_system_free_area_ ());
	dcl  connection_info	(dsa_connection_info_len) fixed bin (35) based (dsa_connection_info_ptr);

/* External Static */

	dcl  (
	     error_table_$too_many_args,
	     error_table_$resource_attached,
	     error_table_$action_not_performed,
	     error_table_$inconsistent,
	     error_table_$not_detached,
	     error_table_$badopt,
	     error_table_$bad_mode,
	     error_table_$bad_ptr,
	     error_table_$noarg,
	     error_table_$wrong_no_of_args
	     )			fixed bin (35) ext;

	dcl  (any_other, cleanup)	condition;


/* Procedures */

	dcl  com_err_		entry options (variable);
	dcl  convert_dial_message_$return_io_module
				entry (fixed bin (71), char (*), char (*), fixed bin, 1 structure aligned,
				2 bit (1) unal, 2 bit (1) unal, 2 bit (1) unal, 2 bit (33) unal, fixed bin (35));
	dcl  (
	     dial_manager_$dial_out,
	     dial_manager_$privileged_attach,
	     dial_manager_$release_channel,
	     dial_manager_$release_channel_no_hangup,
	     dial_manager_$terminate_dial_out
	     )			entry (ptr, fixed bin (35));
	dcl  get_system_free_area_	entry () returns (pointer);
	dcl  ioa_$rsnnl		entry options (variable);
	dcl  null_entry_		entry ();
	dcl  ipc_$create_ev_chn	entry (fixed bin (71), fixed bin (35));
	dcl  ipc_$create_event_channel
				entry (ptr, fixed bin (71), fixed bin (35));
	dcl  ipc_$delete_ev_chn	entry (fixed bin (71), fixed bin (35));
	dcl  hcs_$delete_channel	entry (fixed bin (71), fixed bin (35));
	dcl  hcs_$reset_ips_mask	entry (bit (36) aligned, bit (36) aligned);
	dcl  hcs_$set_ips_mask	entry (bit (36) aligned, bit (36) aligned);
	dcl  hcs_$tty_attach	entry (char (*), fixed bin (71), fixed bin, fixed bin, fixed bin (35));
	dcl  hcs_$tty_detach	entry (fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl  hcs_$tty_event		entry (fixed bin, fixed bin (71), fixed bin, fixed bin (35));
	dcl  hcs_$tty_order		entry (fixed bin, character (*), pointer, fixed bin, fixed bin (35));
	dcl  dsa_tty_$attach	entry (char (*), fixed bin (71), fixed bin (35), fixed bin, fixed bin (35));
	dcl  dsa_tty_$connect	entry (char (*), ptr, fixed bin (71), char (*) var, ptr, char (*), fixed bin (35),
				ptr, fixed bin (21), char (*) var, (2) bit (72), fixed bin (35));

	dcl  dsa_tty_$detach	entry (fixed bin (35), fixed bin, fixed bin, fixed bin (35));
	dcl  dsa_tty_$event		entry (fixed bin (35), fixed bin (71), fixed bin, fixed bin (35));
	dcl  dsa_tty_$order		entry (fixed bin (35), character (*), pointer, fixed bin, fixed bin (35));
	dcl  ws_tty_$event		entry (ptr, fixed bin (71), fixed bin, fixed bin (35));
	dcl  ws_tty_$order		entry (ptr, char (*), ptr, fixed bin, fixed bin (35));
	dcl  ipc_$block		entry (ptr, ptr, fixed bin (35));
	dcl  (
	     ipc_$mask_ev_calls,
	     ipc_$unmask_ev_calls
	     )			entry (fixed bin (35));

	dcl  user_info_$terminal_data entry (char (*), char (*), char (*), fixed bin, char (*));

	dcl  tc_$init		entry (ptr, char (*), fixed bin (71), char (*), bit (1), ptr, fixed bin (35));
	dcl  tc_$shut		entry (pointer);
	dcl  tc_$shut_ttp_info	entry (ptr);
	dcl  tc_$tc_io_control	entry;

/*  tc_io_attach  */

/* The name tty_attach is hung on here so that reconnection
   can be fooled into believing that this is indeed tty_.
   In the next release, when tc_io_ becomes terminal_io_ and
   replaces tty_, this will be a useful compatability feature
   as well. */

tc_io_attach:
tty_attach:
     entry (Iocbp, Attach_options, Com_err_switch, Code);

	Code = 0;
	mask = ""b;
	iocbp = Iocbp;


	if hbound (Attach_options, 1) < 1
	then call error (error_table_$noarg, "Usage: tc_io_ {device} {-control_args}");
	terminal_type, resource_description, device, phone_no, password = "";
	password_given = "0"b;
	login_channel, do_not_block = ""b;
	hangup = "1"b;
	attach_data_ptr = null ();
	on cleanup call clean_up_attach;

	if iocbp -> iocb.attach_descrip_ptr ^= null ()
	then call error (error_table_$not_detached, "");

	do i = lbound (Attach_options, 1) to hbound (Attach_options, 1);
	     if /* case */ index (Attach_options (i), "-") ^= 1
	     then do;				/* channel name */
		if device ^= ""
		then call error (error_table_$wrong_no_of_args, "Multiple devices specified.");
		device = Attach_options (i);
	     end;

	     else if Attach_options (i) = "-login_channel"
	     then login_channel = "1"b;

	     else if Attach_options (i) = "-hangup_on_detach"
	     then hangup = "1"b;
	     else if Attach_options (i) = "-no_hangup_on_detach"
	     then hangup = "0"b;

	     else if Attach_options (i) = "-terminal_type" | Attach_options (i) = "-ttp"
	     then do;
		i = i + 1;
		if terminal_type ^= ""
		then call error (error_table_$too_many_args,
			"The -terminal_type control arguments may only be given once.");
		if i <= hbound (Attach_options, 1)
		then if index (Attach_options (i), "-") = 1
		     then call error (error_table_$noarg, "Control argument found in place of terminal type.");
		     else terminal_type = Attach_options (i);
		else call error (error_table_$noarg, "-terminal_type given without a terminal type.");
	     end;

	     else if Attach_options (i) = "-resource" | Attach_options (i) = "-rsc"
	     then do;
		i = i + 1;
		if resource_description ^= ""
		then call error (error_table_$too_many_args, "A second resource description was given.");
		if i <= hbound (Attach_options, 1)
		then if index (Attach_options (i), "-") = 1
		     then call error (error_table_$noarg, "Control argument found in place of resource description.");
		     else ;
		else call error (error_table_$noarg, "-resource given without a description.");

		resource_description = Attach_options (i);
	     end;

	     else if Attach_options (i) = "-destination" | Attach_options (i) = "-ds"
	     then do;
		i = i + 1;
		if phone_no ^= ""
		then call error (error_table_$too_many_args, "Multiple dial_out destinations given.");
		if i > hbound (Attach_options, 1)
		then call error (error_table_$noarg, "Phone number.");
		phone_no = Attach_options (i);
	     end;

	     else if Attach_options (i) = "-password" | Attach_options (i) = "-pwd" | Attach_options (i) = "-pw"
	     then do;
		i = i + 1;
		if i > hbound (Attach_options, 1)
		then call error (error_table_$noarg, "Password.");
		password = Attach_options (i);
		password_given = "1"b;
	     end;

	     else if Attach_options (i) = "-no_block"
	     then do;
		do_not_block = "1"b;
	     end;

	     else if Attach_options (i) = "-mowse"
	     then do;
		i = i + 1;
		if i > hbound (Attach_options, 1)
		then call error (error_table_$noarg, "-mowse given without a switch name.");
		call iox_$find_iocb ((Attach_options (i)), mowse_terminal_iocbp, Code);
		if Code ^= 0
		then call error (Code, "Invalid switch name.");
		device = MOWSE_DEVICE;
	     end;

	     else call error (error_table_$badopt, (Attach_options (i)));
	end;

	if login_channel & ((phone_no ^= "") | (password ^= ""))
	then call error (error_table_$inconsistent, "-login_channel and -destination.");
	if login_channel & (device ^= "")
	then call error (error_table_$inconsistent, "-login_channel and an explicit device.");
	if login_channel & (resource_description ^= "")
	then call error (error_table_$inconsistent, "-login_channel and -resource.");

	if login_channel
	then call user_info_$terminal_data ("", "", device, (0), "");

	if device = ""
	then call error (error_table_$noarg, "No device given.");

	allocate attach_data set (attach_data_ptr) in (system_free_area);

	attach_data.tc_info_ptr = null ();		/* to  avoid an over-gravid attach data block the video part hangs off specially */

	string (attach_data.flags) = ""b;
	attach_data.device_id = device;
	if index (attach_data.device_id, MOWSE_DEVICE) = 1
	then attach_data.mowse_terminal_iocb_ptr = mowse_terminal_iocbp;
	else attach_data.mowse_terminal_iocb_ptr = null;
	attach_data.terminal_type = terminal_type;
	attach_data.device_used = device;		/* unless dm_ changes it */
	attach_data.resource_desc = resource_description;
	attach_data.dial_phone = phone_no;
	attach_data.phone_given = (phone_no ^= "");
	attach_data.login_channel = login_channel;
	attach_data.no_block = do_not_block;
	attach_data.hangup = hangup;
	attach_data.operation_hlock = 0;


/* we always try to get the channel with hcs_, to avoid
   changing the dial_manager_ event channel if we do not
   have to. All we cound do wrong here is successfully attach
   a channel with the wrong reservation characteristics etc.
   we always pass a bogus event channel in until open time.
*/

	call attach_common (error_string, Code);
	if Code ^= 0
	then call error (Code, error_string);

attach_common:					/* also called at reconnection time */
     proc (error_string, Code);

	dcl  error_string		char (*);
	dcl  Code			fixed bin (35);

	call try_hcs_attach (Code);
	if Code ^= 0
	then do;

	     if attach_data.login_channel
	     then do;
		error_string = "Cannot attach login channel.";
		return;
	     end;

	     if attach_data.network_type = DSA_NETWORK_TYPE
	     then do;
		call dsa_tty_$connect (attach_data.device_id, get_system_free_area_ (), 0, attach_data.dial_phone,
		     null (), attach_data.device_used, (0), dsa_connection_info_ptr, dsa_connection_info_len, (""),
		     access_class_range, Code);
		if Code ^= 0
		then do;
		     error_string = "Could not connect channel.";
		     return;
		end;
		/*** free the connection info */

		free connection_info;
	     end;

	     else if attach_data.network_type = MOWSE_NETWORK_TYPE
	     then do;				/* MOWSE */
		error_string = "Could not assign channel.";
		return;
	     end;
	     else do;				/* MCS_NETWORK_TYPE */
		call try_dial_manager_attach (Code);
		if Code ^= 0
		then do;
		     error_string = "Could not assign channel.";
		     return;
		end;
	     end;

	     call try_hcs_attach (Code);
	     if Code ^= 0
	     then do;
		error_string = "Could not attach channel.";
		return;
	     end;
	end;


	return;

     end attach_common;

	call make_atd;
	on any_other call handler;			/* should be on */

	call set_ips_mask;
	iocbp -> iocb.attach_descrip_ptr = addr (attach_data.attach_descrip);
	iocbp -> iocb.attach_data_ptr = attach_data_ptr;
	iocbp -> iocb.detach_iocb = tc_io_detach;
	iocbp -> iocb.open = tc_io_open;
	call iox_$propagate (iocbp);
	revert any_other;
	call reset_ips_mask;

RETURN:
	return;

make_atd:
     procedure;					/* format: off */

	call ioa_$rsnnl (
	     "^a ^[-login_channel^s^;^a^]^[ -mowse^]^[ -resource ^a^;^s^]^[ -destination ^a^;^s^]^[ -password^;^]^[ -no_block^]^[ ^[-no_hangup_on_detach^;-hangup_on_detach^]^]"
	     , attach_data.attach_descrip, (0),
	     ME,
	     attach_data.login_channel, attach_data.device_used,
               (attach_data.network_type = MOWSE_NETWORK_TYPE),
	     (attach_data.resource_desc ^= ""), attach_data.resource_desc,
	     attach_data.phone_given, attach_data.dial_phone,
	     password_given,
	     attach_data.no_block,
	     ^attach_data.login_channel,
	     ^attach_data.hangup);

/* format: ^off */

     end make_atd;


/*  Error calls com_err_ if the loud switch is set and goes to the attach return */

error:
     proc (err_code, message);

	dcl  err_code		fixed bin (35);	/* Multics standard error Code */
	dcl  message		char (*);		/* Additional error information */
	dcl  sub_err_		entry () options (variable);

	if Com_err_switch
	then call com_err_ (err_code, ME, "^a IOCB ^a.", iocbp -> iocb.name, message);
	else call sub_err_ (err_code, ME, "c" /* continue unless someone handles */, null (), (0), "^a IOCB ^a.",
		iocbp -> iocb.name, message);
	Code = err_code;

	call clean_up_attach;
	goto RETURN;

     end error;


/* This entry detaches the terminal and frees the information about it.  It ignores the Code and does
   the following:

   1.  The event channel is released.
   2.  The channel is released if it was attached with dial_manager_.
   3.  The table space in this dim for the attachment is freed iff the hlock is clear.
*/

tc_io_detach:
     entry (Iocbp, Code);

	call set_up;				/* set no lock, but get actual_iocb_ptr */

	call hcs_detach;

	call release_channel;			/* if we got it with dm_, let it go */

	on any_other call handler;			/* should be on */
	call set_ips_mask;
	actual_iocbp -> iocb.attach_descrip_ptr = null ();
	actual_iocbp -> iocb.attach_data_ptr = null ();
	actual_iocbp -> iocb.detach_iocb = iox_$err_not_attached;
	actual_iocbp -> iocb.open = iox_$err_not_attached;
	actual_iocbp -> iocb.control = iox_$err_not_attached;
	call iox_$propagate (actual_iocbp);
	if attach_data.operation_hlock = 0		/* no outstanding operations */
	then free attach_data;
	else attach_data.async_detach = "1"b;		/* warn other incarnations */
	revert any_other;				/* avoid unneccessary fatal errors */
	call reset_ips_mask;

	return;


/* This entry sets the open description and the legal operation entries in
   the iocb. This so-called I/O module only excepts the control operation.
   We are an I/O mudule so that
   (1) we can be reconnected, and
   (2) find_iocb can find us,
   (3) pat will display us.

*/

tc_io_open:
     entry (Iocbp, Open_mode, Ignore, Code);

	call set_up;

	if Open_mode = Stream_input_output		/* sure, why not */
	then attach_data.open_descrip = iox_modes (Open_mode);
	else do;
	     Code = error_table_$bad_mode;
	     return;
	end;

	call open_common ("0"b /* no reconnection */, Code);
	if Code ^= 0
	then return;

open_common:
     proc (reconnection_flag, Code);

	dcl  reconnection_flag	bit (1);
	dcl  Code			fixed bin (35);

	if attach_data.network_type ^= MOWSE_NETWORK_TYPE
	then do;
	     call allocate_ev_channel;		/* in case user supplied with set_event */
	     call ipc_$mask_ev_calls (Code);		/* do not let user Code run till we are really open */
	     if Code ^= 0
	     then return;
	end;

/* leave it free for tc_ to do an hcs_ tty attach */

	if attach_data.network_type = DSA_NETWORK_TYPE
	then					/* DSA */
	     call dsa_tty_$detach (attach_data.tty_handle, (0), (0), Code);
	else if attach_data.network_type = MOWSE_NETWORK_TYPE
	then					/* MOWSE */
	     ;					/* mowse does not have to detach a switch */
	else					/* MCS */
	     call hcs_$tty_detach (attach_data.tty_index, (0), (0), Code);

	if Code ^= 0
	then do;
	     call ipc_$unmask_ev_calls ((0));
	     return;
	end;


	call tc_$init (attach_data.tc_info_ptr, attach_data.device_used, attach_data.event_wait.channel_id (1),
	     attach_data.terminal_type, reconnection_flag, attach_data.mowse_terminal_iocb_ptr, Code);
	if Code ^= 0
	then do;
	     call ipc_$unmask_ev_calls ((0));
	     return;
	end;

	return;

     end open_common;


	on any_other call handler;
	call set_ips_mask;

	actual_iocbp -> iocb.open_descrip_ptr = addr (attach_data.open_descrip);
	actual_iocbp -> iocb.detach_iocb = iox_$err_not_closed;
	actual_iocbp -> iocb.open = iox_$err_not_closed;
	actual_iocbp -> iocb.close = tc_io_close;
	actual_iocbp -> iocb.control = tc_$tc_io_control;

	call iox_$propagate (actual_iocbp);
	call reset_ips_mask;
	revert any_other;
	call ipc_$unmask_ev_calls ((0));

	if attach_data.network_type = DSA_NETWORK_TYPE
	then					/* DSA */
	     call dsa_tty_$order (attach_data.tty_handle, "start", null (), state, (0));
	else if attach_data.network_type = MOWSE_NETWORK_TYPE
	then					/* MOWSE */
	     call ws_tty_$order (attach_data.mowse_terminal_iocb_ptr, "start", null (), state, (0));
	else					/* MCS */
	     call hcs_$tty_order (attach_data.tty_index, "start", null (), state, (0));

	Code = 0;
	return;

/*  This procedure closes the io switch and returns a zero Code.
   the terminal is hardcore detached at this point, but dm_
   attachment is left for real detachment. This will cause the
   interface to be reasonable, as another user cannot
   snarf the "attached" channel
*/

tc_io_close:
     entry (Iocbp, Code);

	call set_up;

	call tc_$shut (attach_data.tc_info_ptr);

	call close_common (Code);			/* also called at reconnection */

close_common:
     proc (Code);

	dcl  Code			fixed bin (35);

/* turn off wakeups from the channel */

	if attach_data.network_type = DSA_NETWORK_TYPE
	then					/* DSA */
	     call dsa_tty_$event (attach_data.tty_handle, (0), (0), (0));
	else if attach_data.network_type = MOWSE_NETWORK_TYPE
	then					/* MOWSE */
	     call ws_tty_$event (attach_data.mowse_terminal_iocb_ptr, (0), (0), (0));
	else					/* MCS */
	     call hcs_$tty_event (attach_data.tty_index, (0), (0), (0));

	if attach_data.assigned_ev_channel		/* fast channel, give back to hardcore */
	then call hcs_$delete_channel (attach_data.event_wait.channel_id (1), Code);
	else if attach_data.created_ev_channel		/* we created regular channel */
	then call ipc_$delete_ev_chn (attach_data.event_wait.channel_id (1), Code);
	attach_data.have_ev_channel = ^(attach_data.assigned_ev_channel | attach_data.created_ev_channel);
						/* if user supplied it sticks */

     end close_common;

	on any_other call handler;			/* should be on */
	call set_ips_mask;

	actual_iocbp -> iocb.open_descrip_ptr = null;
	actual_iocbp -> iocb.detach_iocb = tc_io_detach;
	actual_iocbp -> iocb.open = tc_io_open;
	actual_iocbp -> iocb.control = iox_$err_not_open;
	actual_iocbp -> iocb.modes = iox_$err_not_open;

	call iox_$propagate (actual_iocbp);

	call reset_ips_mask;
	return;

/* This is called by the reconnection control order.  It re-initializes
   all terminal specific info and hopefully leaves all else alone. */

reconnection:
     entry (P_attach_data_ptr, Code);

	dcl  P_attach_data_ptr	ptr;

	attach_data_ptr = P_attach_data_ptr;

/* close */
	if attach_data.tc_info_ptr = null
	then do;
	     Code = error_table_$bad_ptr;
	     return;
	end;
	call tc_$shut_ttp_info (attach_data.tc_info_ptr);
	call close_common (Code);
	if Code ^= 0
	then return;

/* detach */
	call hcs_detach ();
	call release_channel ();

/* attach */
	call user_info_$terminal_data ("", "", device, (0), "");
	attach_data.device_id, attach_data.device_used = device;
	call attach_common ("", Code);

/* open */
	call open_common ("1"b /* reconnection */, Code);
	call ipc_$unmask_ev_calls ((0));
	return;

/* This entry allows other parts of terminal_io_ to easily (perish the thought)
   call up a process termination. */


terminate_the_process:
     entry (Code);
	call terminate_this_process (Code);

/* This program only needs to mask for the simple operations of filling in
   the iocb. Any fault taken there is serious enough, and unlikely enough, to
   warrent process termination. Thus we do not use the utilities that are around
   for masking ips when an error could occur, or quits must be tolerated. */


handler:
     procedure options (non_quick);			/* visible in ifd */

	dcl  error_table_$unable_to_do_io
				fixed (35) ext;
	if mask ^= ""b
	then call terminate_this_process (error_table_$unable_to_do_io);
     end handler;


terminate_this_process:
     procedure (cd) options (non_quick);

	dcl  cd			fixed bin (35);
	dcl  terminate_process_	ext entry (char (*), ptr);
	dcl  1 ti			aligned automatic,
	       2 version		fixed,
	       2 code		fixed (35);


	ti.version = 0;
	ti.code = cd;
	call terminate_process_ ("fatal_error", addr (ti));

     end terminate_this_process;


allocate_ev_channel:
     procedure;					/*  Assign event channel */

	if attach_data.have_ev_channel		/* user supplied a channel via "set_event" order */
	then return;


	/*** Try to get a fast channel, first;          */
	/*** If no success create a wait event channel. */

	ipcas.version = ipc_create_arg_structure_v1;
	ipcas.channel_type = FAST_EVENT_CHANNEL_TYPE;
	ipcas.call_entry = null_entry_;
	ipcas.call_data_ptr = null ();
	ipcas.call_priority = 0;
	call ipc_$create_event_channel (addr (ipcas), attach_data.event_wait.channel_id (1), Code);
	if Code = 0
	then attach_data.assigned_ev_channel = "1"b;

	else do;
	     ipcas.channel_type = WAIT_EVENT_CHANNEL_TYPE;
	     call ipc_$create_event_channel (addr (ipcas), attach_data.event_wait.channel_id (1), Code);
	     if Code ^= 0
	     then call error (Code, "Could not create a wait event channel.");
	end;

	attach_data.have_ev_channel = "1"b;
	return;

     end allocate_ev_channel;


try_hcs_attach:
     procedure (Code);

	dcl  Code			fixed bin (35);

	Code = 0;

/* The network_type is initialized here.                      */
/* set no event -- it will be set with tty_event at open time */

	if substr (device, 1, 4) = "dsa."		/* DSA */
	then do;
	     attach_data.network_type = DSA_NETWORK_TYPE;
	     call dsa_tty_$attach (attach_data.device_used, 0, attach_data.tty_handle, state, Code);
	end;

	else if index (device, MOWSE_DEVICE) = 1
	then do;					/* MOWSE */
	     attach_data.network_type = MOWSE_NETWORK_TYPE;
	end;

	else do;					/* MCS */
	     attach_data.network_type = MCS_NETWORK_TYPE;
	     call hcs_$tty_attach (attach_data.device_used, 0, attach_data.tty_index, state, Code);
	end;

     end try_hcs_attach;

try_dial_manager_attach:
     procedure (Code);

	dcl  Code			fixed bin (35);

	Code = 0;
	call ipc_$create_ev_chn (attach_data.dial_manager_event.channel_id (1), Code);
	if Code ^= 0
	then return;
	dma.version = dial_manager_arg_version_2;
	dma.dial_channel = attach_data.dial_manager_event.channel_id (1);
	dma.dial_qualifier = "";
	dma.channel_name = attach_data.device_id;
	if attach_data.phone_given
	then dma.dial_out_destination = attach_data.dial_phone;
	else dma.dial_out_destination = "";
	dma.reservation_string = resource_description;
	if attach_data.flags.phone_given
	then call dial_manager_$dial_out (addr (dma), Code);
	else call dial_manager_$privileged_attach (addr (dma), Code);

/*
   If this is a priv_attach, then if we already have it then everything
   is fine. If user specified the destination, then we must dial to it.
*/

	if (Code = error_table_$resource_attached) & ^attach_data.flags.phone_given
	then do;
	     /*** must release is still "0"b at this point */

	     Code = 0;				/* do not go blocked, as has nothing further to say */
	     return;
	end;
	if Code ^= 0
	then do;
dm_call_failed_:
	     call ipc_$delete_ev_chn (attach_data.dial_manager_event.channel_id (1), (0));
	     attach_data.flags.must_release = "0"b;	/* avoid freeing an ipc channel twice (fatal proc error) */
	     return;
	end;
	attach_data.flags.must_release = "1"b;		/* it cant hurt to try */

	call ipc_$block (addr (attach_data.dial_manager_event), addr (event_message), Code);
						/* wait for news from initializer */
	if Code ^= 0
	then goto dm_call_failed_;

	call convert_dial_message_$return_io_module (event_message.message, device, (""), (0), dm_flags, Code);
	if Code ^= 0
	then go to dm_call_failed_;
	if ^dm_flags.dialup
	then do;
	     Code = error_table_$action_not_performed;
	     go to dm_call_failed_;
	end;

	attach_data.flags.must_release = "1"b;
	attach_data.device_used = device;		/* starnames unstarred here */
	return;
     end try_dial_manager_attach;

release_channel:
     procedure;
	declare Code		   fixed bin (35);
	if attach_data.flags.must_release
	then do;
	     dma.version = dial_manager_arg_version_2;
	     dma.channel_name = attach_data.device_used;
	     dma.dial_channel = attach_data.dial_manager_event.channel_id (1);
	     if attach_data.flags.phone_given
	     then call dial_manager_$terminate_dial_out (addr (dma), Code);

	     if ^attach_data.flags.hangup
	     then call dial_manager_$release_channel_no_hangup (addr (dma), Code);
	     call dial_manager_$release_channel (addr (dma), Code);
	     call ipc_$delete_ev_chn (attach_data.dial_manager_event.channel_id (1), Code);
	     attach_data.flags.must_release = "0"b;
	end;

     end release_channel;


hcs_detach:
     procedure;

	if attach_data.network_type = DSA_NETWORK_TYPE
	then					/* DSA */
	     call dsa_tty_$detach (attach_data.tty_handle, 0, (0), (0));
	else if attach_data.network_type = MOWSE_NETWORK_TYPE
	then					/* MOWSE */
	     ;					/* mowse has no switch to detach */
	else					/* MCS */
	     call hcs_$tty_detach (attach_data.tty_index, 0, (0), (0));

     end hcs_detach;

set_up:
     procedure;

	Code = 0;
	actual_iocbp = Iocbp -> iocb.actual_iocb_ptr;
	attach_data_ptr = actual_iocbp -> iocb.attach_data_ptr;
	mask = ""b;
	return;

     end set_up;

clean_up_attach:
     procedure;

	if attach_data_ptr = null ()
	then return;
	if attach_data.tty_index > 0
	then call hcs_detach;
	if attach_data.must_release
	then call release_channel;
	free attach_data;
     end clean_up_attach;

set_ips_mask:
     procedure;
	if mask = ""b
	then call hcs_$set_ips_mask (""b, mask);
	return;
reset_ips_mask:
     entry;
	if mask ^= ""b
	then call hcs_$reset_ips_mask (mask, mask);
     end set_ips_mask;

/* include files */

%include net_event_message;
%include iox_entries;
%include iox_modes;
%page;
%include tc_io_attach_data_;
%include tc_desk_info_;
%page;
%include iocb;
%include dial_manager_arg;
%include event_wait_info;
%include ipc_create_arg;
%include terminal_info;
     end tc_io_;
