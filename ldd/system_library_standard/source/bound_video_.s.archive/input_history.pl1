
/****^  HISTORY COMMENTS:
  1) change(2016-03-30,GDixon), approve(2016-06-12,MCR10013),
     audit(2016-06-12,Swenson):
     Initial implementation of command to setup input_history_ I/O module.
  2) change(2016-05-09,GDixon), approve(2016-06-12,MCR10013),
     audit(2016-06-12,Swenson):
     Version 2 adds a new version operation.
                                                   END HISTORY COMMENTS */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Name:  input_history, ih							        */
	/*									        */
	/* Function:  setup an attachment of the input_history_ I/O module through the user_i/o switch    */
	/* to window_io_ attachment normally on that switch when the video system has been invoked.       */
	/* input_history_ captures each input line in a USER_NAME.history segment.  Then it adds editing  */
	/* requests to the window_io_ line editor to select prior input lines for editing and re-input.   */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

input_history:
ih:  proc();

/* ------------------------------------ *
 * Usage
 * ------------------------------------ */
display_usage:
     proc;
     call ioa_("");

     call ioa_ ("^(^a^)",
"Syntax as a command:
   ih attach {source_switch {monitored_switch}} {-control_args}
or:
   ih detach {source_switch}
or:
   ih version {source_switch}");

     if debug then call ioa_ ("^(^a^)", 
	"or:
   ih debug
   ih db
or:
   ih print_attach_table
   ih pat
or
   ih data {source_switch}");

     call ioa_ ("^(^a^)",
          "
Arguments:
source_switch
   is an existing switch attached to an I/O module open for
   stream_input or stream_input_output.  Subsequent get_line
   operations on this switch will be captured in the history file.
   (DEFAULT: -- user_i/o)",
	"
monitored_switch
   is a new switch created by the input_history command to save the
   I/O module attachment currently on the input_switch, so subsequent
   I/O requests can pass-thru the input_history_ module to the saved",
	"
   module.   (DEFAULT: -- input_history.time)",
	"

Control arguments: are input_history_ I/O module attach options.
-pathname PATH, -pn PATH
   use PATH as the location of the history file.  The default PATH is:
     [homedir]>[user name].history",
	"
-perprocess, -pp
   use a temporary history file created in the process directory.
-permanent, -perm
   use only a permanent the history file.
",
	"
-lines N, -ln N
   recommends a size for the history file, in lines.  The default is
   200 lines (about 2 records of storage, if the average input line is
   40 characters in length).",
	"
-truncate, -tc
   if the history file already exists, truncates this file as part of
   the attach operation.  The default is to extend the existing file.");

     if debug then call ioa_ ("^(^a^)", 
	"
-debug, -db
   display debugging messages as input_history_ is attached or 
   detached, and when input scrolls off top of history file.",
	"
-end
   separates source_switch or attach control arguments from
   next input_history command operation given within the same
   command.");

     if debug then call ioa_ ("^(^a^)", 
	"

Notes on multiple operations:
Several ih operations may be given with the same command.  For any
operation that requires a switch_name or control arguments, use the
-end control argument to end that operation, and begin the next.",
	"
For example:
   ih debug  pat  attach -truncate -debug -end  data -end  pat");

     call ioa_("");

     end display_usage;
%page;

  dcl (FALSE init("0"b), TRUE init("1"b)) bit(1) aligned int static options(constant);
  dcl  IOMODULE char(14) int static options(constant) init("input_history_");
  dcl  NL char(1) int static options(constant) init("
");
  dcl  PROC char(13) int static options(constant) init("input_history");
  dcl  TITLE_DISPLAY_USAGE char(9) int static options(constant) init("~~USAGE~~");
  dcl  TITLE_OPERATION_OPTIONAL char(22) int static options(constant) init("~~OPERATION-OPTIONAL~~");
  dcl  VERSION char(12) aligned int static options(constant) init("id_cmd_03.01");

  dcl (code, ignoredCode, delayedCode1, delayedCode2, delayedCode3) fixed bin(35);

  dcl  com_err_ entry() options(variable);
  dcl  ioa_ entry() options(variable);

  dcl (error_table_$bad_arg,
       error_table_$bigarg,
       error_table_$noarg,
       error_table_$not_detached,
       error_table_$not_open,
       error_table_$unsupported_operation) fixed bin(35) ext static;

  dcl (addr, after, before, clock, codeptr, length, ltrim, maxlength, null, rtrim, substr) builtin;

  dcl  cleanup condition;
%page;

  dcl  debug bit(1) aligned init(FALSE);		/* Is debugging enabled?			        */
						/*  See the clandestine "debug" operation below.	        */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Each sequence begins with a positional argument that names the operation to be performed.      */
	/*									        */
	/* An operation has its own set of operands and control arguments.  These operation sequences     */
	/* are:									        */
	/*   ih attach {source_switch {monitored_switch}} {-control_args}			        */
	/*   ih detach {source_switch}						        */
	/*   ih version {source_switch}						        */
	/*   ih debug								        */
	/*      ih db								        */
	/*   ih print_attach_table							        */
	/*      ih pat								        */
	/*   ih data {source_switch}							        */
	/*									        */
	/* As documented for users, each operation is issued in a separate command.  However, it is       */
	/* often desirable to perform several operations in sequence.			        */
	/*									        */
	/* To perform several operations within the same command, issue the operation name and its        */
	/* arguments sequentially in the command.  For any operation that accepts operands or control     */
	/* arguments, include -end at the end of its sequence.  For example:			        */
	/*   ih debug  pat  attach -truncate -debug -end  data -end  pat			        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

     call arg_setup();

  dcl  operation_count fixed bin init(0);

  dcl  title char(22);
     title = TITLE_DISPLAY_USAGE;

LOOK_FOR_OPERATION:					/* See what operation user selected.		        */

  dcl  operation char(7) var init("");

     call next_positional_arg(title, operation, code);
     if debug then
	if operation ^= "debug" & operation ^= "db" then
	     call ioa_ ("- operation: ^a", operation);
     operation_count = operation_count + 1;
     title = TITLE_OPERATION_OPTIONAL;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Operation: attach							        */
	/*  1) Get source_switch_name and monitored_switch_name (optional positional args), or their      */
	/*     default values.							        */
	/*  2) Form an input_history_ attach description from monitored_switch_name, and remaining        */
	/*     control args.							        */
	/*      - Let input_history_ I/O module diagnose any problem with the control args.	        */
	/*  3) Look for source_iocbP (corresponding to source_switch_name).			        */
	/*      - Make sure it is attached and open.					        */
	/*  4) Find/create the monitored_iocbP (corresponding to monitored_switch_name).  This will       */
	/*     probably be created, if our default name is used.				        */
	/*      - Make sure it is detached.						        */
	/*  5) Validate attach description (in 2 above) if source_switch_name is user_i/o.	        */
	/*  6) Move current attachment for source_iocbP onto monitored_iocbP.			        */
	/*      - Establish a cleanup on-unit, so we can gracefully undo this move, if necessary.	        */
	/*  7) Attach source_iocbP to input_history_ I/O module, using attach description formed in step  */
	/*     (2) above.								        */
	/*      - Use silent attach operation if source_switch_name is user_i/o.  Cannot print errors if  */
	/*        user_i/o is detached.						        */
	/*      - Use loud attach operation otherwise.					        */
	/*      - If errors occur, undo the move_attach, then print an error message.		        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl  source_switch_name char(32) var;			/* Get the source_switch name.		        */

     if operation = "attach" then do;			/* attach operation:			        */
	source_switch_name = "user_i/o";		/*   Set default value for source_switch_name.	        */
	call next_positional_arg("", source_switch_name, code);
						/*   This is an optional positional arg.	        */
	if debug then call ioa_ ("   - source_switch: ^a", source_switch_name);
						/*   When debugging, describe our actions for the user.   */

  dcl  source_iocbP ptr;				/*   Equivalent IOCB ptr for our source_switch.	        */
  dcl  iox_$user_io ptr ext static;
  dcl  iox_$user_input ptr ext static;
  dcl  iox_$find_iocb entry (char(*), ptr, fixed bin(35));	/*   This entry creates the switch, if not found.	        */
  dcl  iox_$look_iocb entry (char(*), ptr, fixed bin(35));	/*   This entry reports an error if not found.	        */
	
	if source_switch_name = "user_i/o" then		/*   user_i/o switch is easy to find.		        */
	     source_iocbP = iox_$user_io;
	else if source_switch_name = "user_input" then	/*   user_input switch is easy to find.		        */
	     source_iocbP = iox_$user_input;
	else do;					/*   source_iocbP must already be attached/open.	        */
	     call iox_$look_iocb ((source_switch_name), source_iocbP, code);
	     if code ^= 0 then do;
		call com_err_ (code, PROC, "Accessing the source_switch ^a", source_switch_name);
		go to EXIT_ih;
		end;
	     end;

	if source_iocbP->iocb.actual_iocb_ptr->iocb.attach_descrip_ptr = null |
	   source_iocbP->iocb.actual_iocb_ptr->iocb.open_descrip_ptr = null then do;
	     call com_err_ (error_table_$not_open, PROC, "The source_switch must be attached & open: ^a", 
		source_switch_name);
	     go to EXIT_ih;
	     end;
	if debug then call ioa_ ("      - checks: OK");

  dcl  source_switch_section char(100) var;		/*   attach descriptions are of form:		        */
  dcl 1 attach_desc aligned based,			/*     module_name attach_options ...		        */
      2 length fixed bin,
      2 string char (0 refer(attach_desc.length));
  dcl  attach_module char(100) var;

	source_switch_section = source_iocbP -> iocb.actual_iocb_ptr -> iocb.attach_descrip_ptr -> attach_desc.string;
	attach_module = before(source_switch_section, " ");
	if debug then call ioa_ ("      - I/O module: ^a", attach_module);


  dcl  monitored_switch_name char(32) var;		/* Get the monitored_switch name.		        */

  dcl  time char(16);
  dcl  date_time_ entry (fixed bin(71), char(*));
	call date_time_(clock(), time);		/*   Set default value for monitored_switch_name.	        */

	monitored_switch_name = PROC || "." || substr(time,11,6);
	if code ^= error_table_$noarg then		/*   If positional args remain, get next one.	        */
	     call next_positional_arg("", monitored_switch_name, ignoredCode);
						/*   This is an optional positional arg.	        */
	if debug then call ioa_ ("   - monitored_switch: ^a", monitored_switch_name);


  dcl  monitored_iocbP ptr;				/*   Equivalent IOCB for our monitored_switch.	        */

	call iox_$find_iocb ((monitored_switch_name), monitored_iocbP, code);
						/*   Monitored switch will probably be created here, since*/
						/*    we gave it a fairly unique name.  Caller could have */
						/*    overridden our name, however.		        */
	if code ^= 0 then do;
	     call com_err_ (code, PROC, "Accessing the monitored_switch ^a", monitored_switch_name);
	     go to EXIT_ih;
	     end;
						/* Make sure monitored_iocbP is detached.	        */
	if monitored_iocbP->iocb.actual_iocb_ptr->iocb.attach_descrip_ptr ^= null then do;
	     call com_err_ (error_table_$not_detached, PROC, "Accessing the monitored_switch ^a", monitored_switch_name);
	     go to EXIT_ih;
	     end;
	if debug then call ioa_ ("      - checks: OK");


  dcl  attach_descrip char(1000) var;			/* Form the input_history_ attach description.	        */
	attach_descrip = IOMODULE || " " || monitored_switch_name || " " ||  remaining_control_args();
	attach_descrip = rtrim(attach_descrip);
	if debug then call ioa_ ("   - attach_descrip: ^a", attach_descrip);	

	if source_switch_name = "user_i/o" then do;	/* Once we move user_i/o, we cannot print error msgs.     */
						/*  Validate attach options before the move_attach.       */
	     if debug then call ioa_ ("   - attach option validation...");	     

  dcl  input_history_$validate_attach_options entry (char(*), char(*), (*) char(*) var, fixed bin(35));
	     call input_history_$validate_attach_options 
		(PROC, (source_switch_name), attachOptions_with(monitored_switch_name), code);
	     if code ^= 0 then			/*  - Validate with source_switch, since its attachment   */
		go to EXIT_ih;			/*    becomes the monitored_switch after the move_attach. */
	     end;

	if debug then call ioa_ ("   - attach changes begin...");	     

  dcl iox_$move_attach entry (ptr, ptr, fixed bin(35));	/* The move_attach between switches is attempted here.    */

	on cleanup call undo_move_attach(monitored_switch_name, source_switch_name);
						/*  - Undo move_attach if we get aborted.	        */
	call iox_$move_attach (source_iocbP, monitored_iocbP, code);
	if code ^= 0 then do;
	     call com_err_ (code, PROC, "Unable to move attachment from source_switch ^a to monitored_switch ^a",
		source_switch_name, monitored_switch_name);
	     go to EXIT_ih;
	     end;

						/* Now attach to input_history_ module.		        */
  dcl  iox_$attach_loud entry (ptr, char(*), ptr, fixed bin(35));
  dcl  iox_$attach_ptr entry (ptr, char(*), ptr, fixed bin(35));
  dcl  iox_$close entry (ptr, fixed bin(35));
  dcl  iox_$detach_iocb entry (ptr, fixed bin(35));
  dcl  iox_$destroy_iocb entry (ptr, fixed bin(35));

	if source_switch_name = "user_i/o" then do;	/* When attaching to user_i/o, we cannot print errors     */
						/*  after move_attach.  Do a non-loud attachment.         */
	     call iox_$attach_ptr (source_iocbP, (attach_descrip), codeptr(input_history), code);
	     if code ^= 0 then do;			/*  We cannot diagnose errors until attachments restored. */
		call iox_$close (source_iocbP, ignoredCode);
		call iox_$detach_iocb (source_iocbP, ignoredCode);
						/*  - Just in case, close/detach the supposedly-failed    */
						/*    new attachment.			        */
		call undo_move_attach(monitored_switch_name, source_switch_name);
						/*  - Move switches back to where they started.	        */
		call com_err_ (code, PROC, "Error attaching source_switch ^a to I/O module ^a.",
		     source_switch_name, IOMODULE);	/*  - Now print the error message, based upon status code.*/
		if debug then call ioa_ ("   - attach changes ABORTED.^a", NL);
		go to EXIT_ih;
		end;
	     end;

	else do;					/* Otherwise, do a loud attachment to get better errors.  */
	     if debug then call ioa_ ("      - move_attach: OK");

	     call iox_$attach_loud (source_iocbP, (attach_descrip), codeptr(input_history), code);
	     if code ^= 0 then do;			/* The I/O module diagnosed the error (attach_loud)       */
		call iox_$close (source_iocbP, ignoredCode);
		call iox_$detach_iocb (source_iocbP, ignoredCode);
						/*  - Just in case, close/detach the supposedly-failed    */
						/*    new attachment.			        */
		call undo_move_attach(monitored_switch_name, source_switch_name);
						/*  - Move switches back to where they started.	        */
		if debug then call ioa_ ("   - attach changes ABORTED.^a", NL);	     
		go to EXIT_ih;
		end;
	     end;

	if debug then call ioa_ ("   - attach changes complete^a", NL);	     
	go to LOOK_FOR_OPERATION;
	end;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Operation:  detach							        */
	/*									        */
	/*  1) Get source_switch_name, or its default value.				        */
	/*      - Look for its IOCB ptr.						        */
	/*      - Make sure it is attached and open.					        */
	/*      - Make sure it is attached to input_history_ I/O module.			        */
	/*  2) Get monitored_switch_name out of the source_iocbP attach description.		        */
	/*      - Look for its IOCB ptr.						        */
	/*  3) Close and detach the source_iocbP.					        */
	/*  4) Undo move_attach, so attachments on monitor_iocbP are moved back to the source_iocbP.      */
	/*  5) Destroy the monitored IOCB (since we most likely created it during the attach).	        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

     else if operation = "detach" then do;
	source_switch_name = "user_i/o";
	call next_positional_arg("", source_switch_name, code);
						/* This is an optional positional arg.		        */
	if debug then call ioa_ ("   - source_switch: ^a", source_switch_name);

  dcl  ignore char(1) varying;
	ignore = remaining_control_args();		/* In case another debugging operation follows detach.    */

	if source_switch_name = "user_i/o" then
	     source_iocbP = iox_$user_io;
	else if source_switch_name = "user_input" then
	     source_iocbP = iox_$user_input;
	else do;
	     call iox_$look_iocb ((source_switch_name), source_iocbP, code);
	     if code ^= 0 then do;
		call com_err_ (code, PROC, "Accessing the source_switch ^a", source_switch_name);
		go to EXIT_ih;
		end;
	     end;
	if source_iocbP->iocb.actual_iocb_ptr->iocb.attach_descrip_ptr = null then do;
	     call com_err_ (error_table_$not_open, PROC, "The source_switch must be attached & open: ^a", 
		source_switch_name);
	     go to EXIT_ih;
	     end;
	if debug then call ioa_ ("      - checks: OK");


  dcl  monitored_switch_section char(100) var;		/* input_history_ attach description is of form:	        */
						/*   input_history_ monitored_switch_name ...	        */
	monitored_switch_section = source_iocbP -> iocb.actual_iocb_ptr -> iocb.attach_descrip_ptr -> attach_desc.string;

	attach_module = before(monitored_switch_section, " ");
	if debug then call ioa_ ("   - monitored module: ^a", attach_module);
	if attach_module ^= IOMODULE then do;
	     call com_err_ (error_table_$bad_arg, PROC, 
		"source_switch ^a is attached to ^a, rather than the ^a I/O module.",
		source_switch_name, attach_module, IOMODULE);
	     go to EXIT_ih;
	     end;

	monitored_switch_section = after(monitored_switch_section, " ");
	monitored_switch_section = ltrim(monitored_switch_section);
	monitored_switch_name = before(monitored_switch_section, " ");
	if debug then call ioa_ ("   - monitored_switch: ^a", monitored_switch_name);

	call iox_$look_iocb ((monitored_switch_name), monitored_iocbP, code);
	if code ^= 0 then do;
	     call com_err_ (code, PROC, "Accessing the source_switch ^a", source_switch_name);
	     go to EXIT_ih;
	     end;
	
	if debug then call ioa_ ("   - detach changes begin...");
						/* Defer display of errors until work complete.	        */
	if source_iocbP->iocb.actual_iocb_ptr->iocb.open_descrip_ptr ^= null then
	     call iox_$close (source_iocbP, delayedCode1);	
	else delayedCode1 = 0;

	call iox_$detach_iocb (source_iocbP, delayedCode2);
	call iox_$move_attach (monitored_iocbP, source_iocbP, delayedCode3);
	call iox_$destroy_iocb (monitored_iocbP, ignoredCode);
	if delayedCode1 ^= 0 then
	     call com_err_ (delayedCode1, PROC, "While closing source_switch ^a from ^a I/O module", 
	          source_switch_name, IOMODULE);
	if delayedCode2 ^= 0 then
	     call com_err_ (delayedCode2, PROC, "While detaching source_switch ^a from ^a I/O module", 
	          source_switch_name, IOMODULE);
	if delayedCode3 ^= 0 then
	     call com_err_ (delayedCode3, PROC, "While moving attachments from monitored_switch ^a to source_switch ^a", 
	          monitored_switch_name, source_switch_name);

	if debug then call ioa_ ("   - detach changes complete^a", NL);
	go to LOOK_FOR_OPERATION;
	end;
%page;
     else if operation = "debug" | operation = "db" then do;
	debug = ^debug;
	call ioa_("^a- operation: debug (^[on^;off^])", NL, debug);

	if operation_count = 1 then
	     title = TITLE_DISPLAY_USAGE;
	else title = TITLE_OPERATION_OPTIONAL;
	go to LOOK_FOR_OPERATION;
	end;

     else if operation = "print_attach_table" | operation = "pat" then do;
	call ioa_("");
	
  dcl  print_attach_table entry options(variable);
	call print_attach_table();

	call ioa_("");
	go to LOOK_FOR_OPERATION;
	end;

     else if operation = "data" then do;
	source_switch_name = "user_i/o";
	call next_positional_arg("", source_switch_name, code);
						/* This is an optional positional arg.		        */
	if debug then call ioa_ ("   - source_switch: ^a", source_switch_name);

	ignore = remaining_control_args();		/* In case another debugging operation follows data.      */
	call ioa_("");

  dcl  io_call entry options(variable);
	call io_call ("control", char(source_switch_name), "get_input_history_data");
	
	call ioa_("");
	go to LOOK_FOR_OPERATION;
	end;

     else if operation = "help" | operation = "h" | operation = "?" then do;
	call display_usage();
	go to LOOK_FOR_OPERATION;
	end;

     else if operation = "version" then do;
	source_switch_name = "user_i/o";
	call next_positional_arg("", source_switch_name, code);
						/* This is an optional positional arg.		        */
	if debug then call ioa_ ("   - source_switch: ^a", source_switch_name);

	ignore = remaining_control_args();		/* In case another debugging operation follows version.   */

	call ioa_ ("ih (command)   version: ^a", VERSION);
	call io_call ("control", char(source_switch_name), "get_input_history_version");
	end;

     else do;
	call com_err_ (error_table_$unsupported_operation, PROC, "^a", operation);
	go to EXIT_ih;
	end;

     return;

EXIT_ih:
     return;

undo_move_attach:
     proc(mon_sw, src_sw);

  dcl (mon_sw, src_sw) char(32) var;

  dcl  code fixed bin(35);

     call iox_$move_attach (monitored_iocbP, source_iocbP, code);
     if code ^= 0 then
	call com_err_ (code, PROC, "While moving attachments from monitored_switch ^a to source_switch ^a", 
	     mon_sw, src_sw);
     end undo_move_attach;

%page;
  dcl  argListP ptr;
  dcl  argListN fixed bin;
  dcl  argI fixed bin;

  dcl  argP ptr;
  dcl  argL fixed bin(21);
  dcl  arg char(argL) based(argP);
     
  dcl cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr);

arg_setup:
     proc;

  dcl  code fixed bin(35);

  dcl  cu_$arg_list_ptr entry (ptr);
     call cu_$arg_list_ptr (argListP);

  dcl  cu_$arg_count entry (fixed bin, fixed bin(35));
     call cu_$arg_count(argListN, code);
     if code ^= 0 then do;
	call com_err_(code, PROC, "Getting argument count.");
	go to EXIT_ih;
	end;
     
     argI = 0;					/* Prepare to process the first argument.	        */

     end arg_setup;


next_positional_arg:				/* Get the next positional argument.		        */
     proc (title, positional_value, code);

  dcl  title char(*);     
  dcl  positional_value char(*) var;
  dcl  code fixed bin(35);

     if argI >= argListN then do;			/* Oops, no more args.			        */
	code = error_table_$noarg;
	if title = TITLE_DISPLAY_USAGE then do;
	     call display_usage;
	     go to EXIT_ih;
	     end;
	if title = TITLE_OPERATION_OPTIONAL then do;
	     go to EXIT_ih;
	     end;
	if title ^= "" then do;			/*  - Only a fatal error if a title has been given.       */
	     call com_err_ (code, PROC, "Getting ^a.", title);
	     go to EXIT_ih;
	     end;
	return;
	end;

     argI = argI + 1;				/* Actually get the argument here.		        */
     call cu_$arg_ptr_rel (argI, argP, argL, code, argListP);

     if substr(arg,1,1) = "-" then do;			/* Oops, this is a control arg.  No more positional args. */
	argI = argI - 1;
	code = error_table_$noarg;			/*   This is NOT an error; but return a code to indicate  */
	return;					/*   there are no more positional arguments.	        */
	end;
     
     if length(arg) > maxlength(positional_value) then do;	/* Oops, argument is too long to fit in positional_value  */
	code = error_table_$bigarg;
	if title ^= "" then do;			/*   Only a fatal error if title was given.	        */
	     call com_err_ (code, PROC, "^a (^d characters) will not hold supplied argument: ^a",
	          title, maxlength(positional_value), arg);
	     go to EXIT_ih;
	     end;
	return;
	end;
     
     positional_value = arg;
     code = 0;
     return;
     
remaining_control_args:				/* Capture arguments (until -end is seen) as a string.    */
     entry () returns(char(1000) var);

  dcl  str char(1000) var;
     
     str = "";
     
     attachOptionMaxLength = maxlength(monitored_switch_name);
     attachOptionFirst = argI+1;
     attachOptionLast  = argI;
     attachOptionCount = attachOptionLast + 1 - attachOptionFirst + 1;
						/* Add 1 for the attach_options_with(xxx) argument.       */
     do argI = argI+1 to argListN;
	call cu_$arg_ptr_rel (argI, argP, argL, code, argListP);
	if arg = "-end" then return(str);		/* Leave remaining args for next operation.	        */
	str = str || rtrim(arg) || " ";

	attachOptionLast = argI;
	attachOptionMaxLength = max(attachOptionMaxLength, argL);
	attachOptionCount = attachOptionLast + 1 - attachOptionFirst + 1;
	end;
     str = rtrim(str);
     return (str);

     end next_positional_arg;


  dcl (attachOptionFirst, attachOptionLast, attachOptionCount, attachOptionMaxLength) fixed bin;

attachOptions_with:					/* Return remaining_control_args as an attach_option      */
     proc (switch_name) returns ((*) char(*) var);	/*  array, plus one argument not in remaining args.       */

  dcl  switch_name char(*) var;			/* First attachOption element value.		        */

  dcl  attachOptions (attachOptionCount) char(attachOptionMaxLength) var;

  dcl  i fixed bin;
  dcl  ignoreCode fixed bin(35);

     i = 1;
     attachOptions(i) = switch_name;
     do argI = attachOptionFirst to attachOptionLast;
	call cu_$arg_ptr_rel (argI, argP, argL, ignoreCode, argListP);
	i = i + 1;
	attachOptions(i) = arg;
	end;
     return (attachOptions);

     end attachOptions_with;
%page;
%include iocb;
%page;
%include input_history_data;

     end input_history;
