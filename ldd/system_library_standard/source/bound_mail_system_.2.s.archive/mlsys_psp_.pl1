/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-06-11,Mills), approve(86-06-11,MCR7419),
     audit(86-06-17,Margolin), install(86-06-30,MR12.0-1080):
     This adds the entry point mlsys_psp_$domains_available.  This returns a
     "1"b is they are, ""b if not.
                                                   END HISTORY COMMENTS */


/* format: off */

/* Determines which PSPs/RPQs used by the mail system are available at the site */

/* Created:  December 1983 by G. Palter */
/* Modified: March 1984 by G. Palter to fix mail system error #0436 -- if a */
/* forum meeting is not found in the "forum" search list, the mail system   */
/* will treat it as a version 1 meeting in the working directory            */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


mlsys_psp_:
     procedure () returns (bit (1) aligned);

          return ("0"b);                                    /* not an entrypoint */


/* Declarations */

dcl  psp_entry entry () options (variable) variable;

dcl  local_host character (40) varying;
dcl  forum_gate_brackets (3) fixed binary (3);

dcl  code fixed binary (35);

dcl  MAIL_SYSTEM_ character (32) static options (constant) initial ("mail_system_");

dcl  nit_data_$local_host character (40) varying external;

/* format: off */
dcl (forum_error_table_$meeting_bloat, forum_error_table_$no_such_forum, forum_error_table_$not_eligible,
     forum_error_table_$not_in_search_list, forum_error_table_$read_only, forum_error_table_$rqo)
          fixed binary (35) external;
/* format: on */

dcl  forum_$close_forum entry (fixed binary, fixed binary (35));
dcl  forum_$enter_trans
          entry (fixed binary, character (*), fixed binary, character (*), bit (1) aligned, fixed binary,
          fixed binary (35));
dcl  forum_$get_forum_path entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  forum_$open_forum entry (character (*), character (*), fixed binary, fixed binary (35));
dcl  forum_$real_forum_limits
          entry (fixed binary, fixed binary, fixed binary, fixed binary, fixed binary, fixed binary, bit (36) aligned,
          fixed binary (35));
dcl  get_ring_ entry () returns (fixed binary (3));
dcl  hcs_$fs_get_brackets entry (pointer, fixed binary (5), (3) fixed binary (3), fixed binary (35));
dcl  host_name_$local_compare entry (char (256), char (256), fixed bin (35)) returns (bit (1));
dcl  host_name_$qualify_local entry (char (256), fixed bin (35)) returns (char (256));
dcl  host_name_$local_valid_destination entry (char (256), fixed bin (35)) returns (bit (1));
dcl  mlsys_mailer_ entry (pointer, pointer, fixed binary (21));
dcl  sub_err_ entry () options (variable);

dcl  linkage_error condition;

dcl  (codeptr, null) builtin;
%page;
/* Determine if the site has purchased the TCP/IP and/or Hyperchannel RPQs which provide a prototype Network Information
   Table (NIT) and an interim Inter-System Mailer */

ism_not_available:
     entry () returns (bit (1) aligned);

          if mlsys_data_$ism_not_available = 0 then do;

               /*** First time in this process and ring: actually check for the mailer's existence */

               mlsys_data_$ism_not_available = -1;          /* until proven otherwise ... */

               on condition (linkage_error)
                    begin;                                  /* ... where otherwise is when this handler is invoked */
                         mlsys_data_$ism_not_available = 1;
                         go to RETURN_FROM_ISM_NOT_AVAILABLE;
                    end;

               psp_entry = host_table_mgr_$primary_name;    /* try to snap the links to all entrypoints we use ... */
               psp_entry = mlsys_mailer_;
               psp_entry = nit_$get_forwarding_host;
               psp_entry = nit_$get_service_list;

               local_host = nit_data_$local_host;           /* ... and the single external constant */
          end;

RETURN_FROM_ISM_NOT_AVAILABLE:
          return (mlsys_data_$ism_not_available = 1);
%page;
/* Determine if the site has the domain name system software installed. */

domains_available:
     entry () returns (bit (1) aligned);

          if mlsys_data_$domains_available = 0 then do;

               /*** First time in this process and ring: actually check for the domain system's existence */

               mlsys_data_$domains_available = 1;           /* until proven otherwise... */

               on condition (linkage_error)
                    begin;
                         mlsys_data_$domains_available = -1;
                         go to RETURN_FROM_DOMAINS_AVAILABLE;
                    end;

               psp_entry = host_name_$local_compare;        /* try to snap the links to all entrypoints we use ... */
               psp_entry = host_name_$qualify_local;
               psp_entry = host_name_$local_valid_destination;
          end;

RETURN_FROM_DOMAINS_AVAILABLE:
          return (mlsys_data_$domains_available = 1);
%page;
/* Determine if the site has purchased forum and, if available, the lowest ring in which it may be used */

forum_not_available:
     entry () returns (bit (1) aligned);

          if mlsys_data_$forum_not_available = 0 then do;

               /*** First time in this process and ring: actually check for Forum's existence */

               mlsys_data_$forum_not_available = -1;        /* until proven otherwise ... */

               on condition (linkage_error)
                    begin;                                  /* ... where otherwise is when this handler is invoked */
                         mlsys_data_$forum_not_available = 1;
                         go to RETURN_FROM_FORUM_NOT_AVAILABLE;
                    end;

               do psp_entry =                               /* snap the links to all forum entrypoints ... */
                    forum_$close_forum, forum_$enter_trans, forum_$get_forum_path, forum_$open_forum,
                    forum_$real_forum_limits;
               end;

               do code =                                    /* ... and all forum error codes */
                    forum_error_table_$meeting_bloat, forum_error_table_$no_such_forum, forum_error_table_$not_eligible,
                    forum_error_table_$not_in_search_list, forum_error_table_$read_only, forum_error_table_$rqo;
               end;

               revert condition (linkage_error);            /* here iff the site has forum */

               call hcs_$fs_get_brackets (codeptr (forum_$open_forum), (0), forum_gate_brackets, code);
               if code ^= 0 then do;
RESIGNAL_GET_RING_BRACKETS_FAILURE:
                    call sub_err_ (code, MAIL_SYSTEM_, ACTION_CANT_RESTART, null (), (0),
                         "Unable to determine the ring brackets on the forum_ gate.^/Contact your system programming staff."
                         );
                    go to RESIGNAL_GET_RING_BRACKETS_FAILURE;
               end;

               mlsys_data_$lowest_forum_ring = forum_gate_brackets (1);

               if get_ring_ () < mlsys_data_$lowest_forum_ring then mlsys_data_$forum_not_available = 1;
                                                            /* can't use forum in this ring: act like it's not present */
          end;

RETURN_FROM_FORUM_NOT_AVAILABLE:
          return (mlsys_data_$forum_not_available = 1);
%page;
%include mlsys_internal_data;
%page;
%include host_table_dcls;
%page;
%include sub_err_flags;

     end mlsys_psp_;
