/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-06-11,Mills), approve(86-06-11,MCR7419),
     audit(86-06-17,Margolin), install(86-06-30,MR12.0-1080):
     This changes three entry points to call host_name_ entries instead of
     host_table_ entries if all the domain software is installed.
  2) change(89-07-13,Lee), approve(89-08-01,MCR8125),
     audit(89-08-29,LZimmerman), install(89-10-02,MR12.3-1079):
     Modified the local procedure "canonicalize" to not drop any domains if
     dropping domains causes the name to become ambiguous to the host table.
                                                   END HISTORY COMMENTS */


/* format: off */

/* Interface between the Multics Mail System and the Network Information Table (NIT):  In this release, the NIT does not
   actually exist and this module serves as an interface to the MRDS/CDS host table and nit_data_ CDS segment furnished as
   part of the Hyperchannel TCP/IP RPQ */

/* Created:  July 1983 by G. Palter */
/* Modified: 6 March 1984 by G. Palter to fix error #0425 -- attempting to create an address whose foreign system name is
      actually the name of one of the containing domains of the local system (eg: ARPA for MIT-MULTICS.ARPA) will cause a
      fatal process error */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */

mlsys_nit_interface_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_system_name character (256) varying parameter;

dcl  P_system_name_1 character (256) varying parameter;	/* compare_system_names: the names to be compared */
dcl  P_system_name_2 character (256) varying parameter;	/* ... */

dcl  P_relay_system character (256) varying parameter;	/* is_mail_supported: set to forwarding system if any */
dcl  P_code fixed binary (35) parameter;		/* is_mail_supported */


/* Local copies of parameters */

dcl  system_name character (256) varying;
dcl  relay_system character (256) varying;

/* Remaining declarations */

/* format: off */
dcl  (LOWERCASE     initial ("abcdefghijklmnopqrstuvwxyz"),
      UPPERCASE     initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
          character (26) static options (constant);
/* format: on */

dcl  nit_data_$local_host character (40) varying external;

/* format: off */
dcl (mlsys_et_$ism_not_available, mlsys_et_$no_mail_service, mlsys_et_$unknown_system)
          fixed binary (35) external;

/* format: on */

dcl  host_name_$local_compare entry (character (256), character (256), fixed bin (35)) returns (bit (1) aligned);
dcl  host_name_$qualify_local entry (character (256), fixed bin (35)) returns (character (256));
dcl  host_name_$local_valid_destination entry (char (256), fixed bin (35)) returns (bit (1) aligned);
dcl  mlsys_psp_$ism_not_available entry () returns (bit (1) aligned);
dcl  mlsys_psp_$domains_available entry () returns (bit (1) aligned);

dcl  sub_error_ condition;

dcl  (after, before, length, null, reverse, rtrim, substr, translate) builtin;
%page;
/* Return the host name of the local system */

get_local_system_name:
     entry () returns (character (256) varying);

	if mlsys_psp_$ism_not_available () then		/* no NIT on this system */
	     return ("");

	else return (translate (nit_data_$local_host, UPPERCASE, LOWERCASE));



/* Return the fully qualified host name of the given system */

get_fully_qualified_name:
     entry (P_system_name) returns (character (256) varying);

	on condition (sub_error_) go to RETURN_INPUT_NAME;/* in case the database is damaged */

	if mlsys_psp_$ism_not_available () then		/* no NIT on this system */
RETURN_INPUT_NAME:
	     return (translate (P_system_name, UPPERCASE, LOWERCASE));

	else if canonicalize (P_system_name) = canonicalize ((nit_data_$local_host)) then
	     return (translate (nit_data_$local_host, UPPERCASE, LOWERCASE));
						/* avoid accessing the database when possible */

	else if mlsys_psp_$domains_available () then return (rtrim (host_name_$qualify_local ((P_system_name), (0))));
	else return (translate (host_table_mgr_$primary_name (P_system_name), UPPERCASE, LOWERCASE));
%page;
/* Compare two system names to see if they identify the same system */

compare_system_names:
     entry (P_system_name_1, P_system_name_2) returns (bit (1) aligned);

	on condition (sub_error_) go to COMPARE_LITERAL_SYSTEM_NAMES;

	if mlsys_psp_$ism_not_available () then		/* not NIT on this system */
COMPARE_LITERAL_SYSTEM_NAMES:
	     return (translate (P_system_name_1, UPPERCASE, LOWERCASE)
		= translate (P_system_name_2, UPPERCASE, LOWERCASE));

	else if translate (P_system_name_1, UPPERCASE, LOWERCASE) = translate (P_system_name_2, UPPERCASE, LOWERCASE)
	     then
	     return ("1"b);				/* avoid accessing the database when possible */

	else if mlsys_psp_$domains_available () then
	     return (host_name_$local_compare ((P_system_name_1), (P_system_name_2), (0)));

	else return (host_table_mgr_$primary_name (P_system_name_1) = host_table_mgr_$primary_name (P_system_name_2));


/* Determine if the supplied system name identifies the local system */

is_local_system:
     entry (P_system_name) returns (bit (1) aligned);

	if mlsys_psp_$ism_not_available () then		/* no NIT here: if it's not null, it's foreign */
	     return (P_system_name = "");

	else return (compare_system_names (P_system_name, (nit_data_$local_host)));
%page;
/* Return the canonical form of a system name:  The canonicalized form of a system name is said name translated to
   uppercase with all domains in common to the local system name removed */

canonicalize_system_name:
     entry (P_system_name) returns (character (256) varying);

	return (canonicalize (P_system_name));



/* Actually canonicalizes the name (called by several entrypoints) */

canonicalize:
     procedure (p_system_name) returns (character (256) varying);

dcl  p_system_name character (*) varying parameter;	/* because host_table_mgr_ returns the wrong size */

dcl  canonical_name character (256) varying;
dcl  reversed_name character (256) varying;
dcl  reversed_local_name character (256) varying;
dcl  next_component character (256) varying;
dcl  canonicalized_form character (256) varying;
dcl  end_point fixed binary;
dcl  continue bit (1) aligned;

	canonical_name = translate (p_system_name, UPPERCASE, LOWERCASE);
	end_point = length (p_system_name);

	if mlsys_psp_$ism_not_available () then		/* no NIT on the system */
	     go to RETURN_FROM_CANONICALIZE;

	reversed_name = reverse (canonical_name);
	reversed_local_name = reverse (translate (nit_data_$local_host, UPPERCASE, LOWERCASE));
	continue = "1"b;

	do while (continue);
	     if after (reversed_local_name, ".") = "" then go to RETURN_FROM_CANONICALIZE;
	     next_component = before (reversed_local_name, ".");
	     if before (reversed_name, ".") = next_component then do;
		end_point = end_point - length (next_component) - 1;
		if end_point <= 0 then do;		/* system name is that of a containing domain */
		     end_point = length (p_system_name);
		     go to RETURN_FROM_CANONICALIZE;
		end;
		reversed_name = after (reversed_name, ".");
		reversed_local_name = after (reversed_local_name, ".");
	     end;
	     else continue = "0"b;
	end;

RETURN_FROM_CANONICALIZE:
	canonicalized_form = substr (canonical_name, 1, end_point);

	if end_point < length (p_system_name) then	/* RL: make sure removal of domains still makes name identifiable */
	     if canonicalized_form = host_table_mgr_$primary_name (canonicalized_form) then
						/* couldn't find in host table, return original name */
		return (canonical_name);
	return (canonicalized_form);

     end canonicalize;
%page;
/* Determines if mail can be sent to the given system by checking the NIT */

is_mail_supported:
     entry (P_system_name, P_relay_system, P_code);

dcl  junk bit (1) auto aligned;

	if mlsys_psp_$domains_available () then do;
	     P_relay_system = "";
	     junk = host_name_$local_valid_destination ((P_system_name), P_code);
	     return;
	end;

	on condition (sub_error_) go to RETURN_ISM_NOT_AVAILABLE;

	if mlsys_psp_$ism_not_available () then do;	/* no NIT and/or mailer on this system */
RETURN_ISM_NOT_AVAILABLE:
	     P_code = mlsys_et_$ism_not_available;
	     return;
	end;

	system_name = host_table_mgr_$primary_name (P_system_name);

	relay_system = nit_$get_forwarding_host ("mail", system_name);
	if relay_system ^= "" then
	     service_list_ptr = nit_$get_service_list ("mail", relay_system);
	else service_list_ptr = nit_$get_service_list ("mail", system_name);

	if service_list_ptr ^= null () then do;		/* we can send it mail */
	     free service_list;
	     P_relay_system = relay_system;
	     P_code = 0;				/* success */
	end;

	else if system_name = P_system_name then	/* failure: host_table_mgr_ needs a code argument ... */
	     P_code = mlsys_et_$unknown_system;		/* ... so assume if the name hasn't changed, it's invalid */

	else P_code = mlsys_et_$no_mail_service;	/* failure: no way to send mail to the given system */

	return;
%page;
%include host_table_dcls;

     end mlsys_nit_interface_;
