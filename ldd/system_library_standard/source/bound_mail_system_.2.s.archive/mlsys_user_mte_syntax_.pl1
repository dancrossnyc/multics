/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Validates the syntax of User_ids and mail table entry (MTE) names */

/* Created:  June 1983 by G. Palter */
/* Modified: March 1984 by G. Palter to fix mail system error #0415 -- read_mail, print_mail, and have_mail/have_messages
      do not reject starnames as invalid mailbox specifications */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


mlsys_user_mte_syntax_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_name character (*) varying parameter;		/* the name to be validated as a User_id or MTE name */

dcl  P_is_mte_name bit (1) aligned parameter;		/* classify_and_validate: set ON => MTEname; OFF => User_id */

dcl  P_person_id character (*) varying parameter;		/* classify_and_validate, validate_user_id: set to ... */
dcl  P_project_id character (*) varying parameter;	/* ... Person_id and Project_id of the User_id respectively */

dcl  P_code fixed binary (35) parameter;


/* Local copies of parameters */

dcl  person_id character (64) varying;
dcl  project_id character (64) varying;


/* Remaining declarations */

dcl  LONGEST_PERSON_ID character (28) static options (constant) initial ("");
dcl  LONGEST_PROJECT_ID character (32) static options (constant) initial ("");
dcl  LONGEST_MTE_NAME character (32) static options (constant) initial ("");

dcl  INVALID_MTE_CHARACTERS character (12) static options (constant) initial (",:;\()<>{}""@");

dcl  WHITESPACE character (5) static options (constant) initial (" 	
");						/* SP HT VT FF NL */

dcl  WHITESPACE_OTHER_THAN_SPACE character (4) static options (constant) initial ("	
");						/* HT VT FF NL */

/* format: off */
dcl (mlsys_et_$invalid_mte_syntax, mlsys_et_$invalid_person_id_syntax, mlsys_et_$invalid_user_id_syntax)
	fixed binary (35) external;
/* format: on */

dcl  check_star_name_$entry entry (character (*), fixed binary (35));

dcl  (after, before, index, length, search) builtin;
%page;
/* Determines if the given name is a User_id or MTE name and then validates its syntax */

classify_and_validate:
     entry (P_name, P_is_mte_name, P_person_id, P_project_id, P_code);

	if search (P_name, WHITESPACE) = 0 then		/* a User_id contains no whitespace ... */
	     if (index (P_name, ".") ^= 0) & (index (after (P_name, "."), ".") = 0) then
		P_is_mte_name = "0"b;		/* ... and exactly one period */
	     else P_is_mte_name = "1"b;
	else P_is_mte_name = "1"b;

	if P_is_mte_name then			/* perform appropriate syntax checks */
	     call validate_mte_name (P_name, P_code);
	else do;
	     call validate_user_id (P_name, P_person_id, P_project_id, P_code);
	     if P_code = 0 then do;			/* ... reject starnames in User_ids when parsing only */
		call check_star_name_$entry ((P_name), P_code);
		if P_code ^= 0 then P_code = mlsys_et_$invalid_user_id_syntax;
	     end;
	end;

	return;
%page;
/* Validates the syntax of a User_id and returns its component Person_id and Project_id */

validate_user_id:
     entry (P_name, P_person_id, P_project_id, P_code);

	if search (P_name, WHITESPACE) ^= 0 then do;	/* no embedded whitespace is allowed */
BAD_USER_ID_SYNTAX:					/* invalid User_id syntax */
	     P_code = mlsys_et_$invalid_user_id_syntax;
	     return;
	end;

	if index (P_name, ".") = 0 then go to BAD_USER_ID_SYNTAX;
	if index (after (P_name, "."), ".") ^= 0 then go to BAD_USER_ID_SYNTAX;
						/* not exactly one period */

	if search (P_name, "<>") ^= 0 then go to BAD_USER_ID_SYNTAX;
						/* only other unacceptable characters in a User_id */

	person_id = before (P_name, ".");		/* isolate the components */
	project_id = after (P_name, ".");

	if (length (person_id) > length (LONGEST_PERSON_ID)) | (length (project_id) > length (LONGEST_PROJECT_ID)) then
	     go to BAD_USER_ID_SYNTAX;		/* either Person_id is over 28 or Project_id is over 32 */

	if (person_id = "") | (project_id = "") then	/* neither part can be null */
	     go to BAD_USER_ID_SYNTAX;

	P_person_id = person_id;			/* validate User_id */
	P_project_id = project_id;
	P_code = 0;

	return;
%page;
/* Validates the syntax of a Person_id */

validate_person_id:
     entry (P_person_id, P_code);

	if search (P_person_id, WHITESPACE) ^= 0 then do; /* no embedded whitespace is allowed */
BAD_PERSON_ID_SYNTAX:				/* invalid Person_id syntax */
	     P_code = mlsys_et_$invalid_person_id_syntax;
	     return;
	end;

	if index (P_name, ".") ^= 0 then go to BAD_PERSON_ID_SYNTAX;
						/* can not have any periods */

	if search (P_name, "<>") ^= 0 then go to BAD_PERSON_ID_SYNTAX;
						/* only other unacceptable characters in a Person_id */

	if length (P_person_id) > length (LONGEST_PERSON_ID) then go to BAD_PERSON_ID_SYNTAX;
						/* Person_id can not exceed 28 characters */

	if P_person_id = "" then go to BAD_PERSON_ID_SYNTAX;
						/* can't be a null string */

	P_code = 0;

	return;
%page;
/* Validates the syntax of a mail table entry (MTE) name */

validate_mte_name:
     entry (P_name, P_code);

	if length (P_name) > length (LONGEST_MTE_NAME) then do;
INVALID_MTE_NAME_SYNTAX:				/* invalid MTE name syntax */
	     P_code = mlsys_et_$invalid_mte_syntax;
	     return;
	end;

	if search (P_name, WHITESPACE_OTHER_THAN_SPACE) ^= 0 then go to INVALID_MTE_NAME_SYNTAX;

	if search (P_name, INVALID_MTE_CHARACTERS) ^= 0 then go to INVALID_MTE_NAME_SYNTAX;

	if P_name = "" then go to INVALID_MTE_NAME_SYNTAX;/* can't be a null string */

	P_code = 0;				/* success */

	return;

     end mlsys_user_mte_syntax_;
