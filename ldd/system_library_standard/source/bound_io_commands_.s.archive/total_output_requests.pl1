/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Names:  total_output_request, tor						*/
	/*									*/
	/*      This command prints a summary of number of entries in various I/O Daemon request	*/
	/* type queues.  When invoked as an active function, it returns the counts for a single	*/
	/* request type.								*/
	/*									*/
	/* Status									*/
	/* 0) Created:    October 5, 1981 by G. C. Dixon					*/
	/* 1) Modified:   April 29, 1982 by G. C. Dixon - to accept eor-defined request types	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

total_output_requests:
tor:	procedure;

     dcl						/*	automatic variables			*/
	Larg			fixed bin(21),	/* length of input argument.	 		*/
	Lret			fixed bin(21),	/* length of output argument.			*/
	Nargs			fixed bin,	/* number of input arguments.			*/
	Parg			ptr,		/* ptr to input argument.			*/
	Pret		 	ptr,		/* ptr to output argument.			*/
	Sall			bit(1),		/* on if in -all mode.			*/
	Sbrief			bit(1),		/* on if in -brief mode.			*/
	Sinhibit_error		bit(1),		/* on if in -inhibit_error mode.		*/
	Sno_rqt			bit(1),		/* on if processing the default print rqt.	*/
	code			fixed bin(35),	/* a status code.				*/
	delim			char(1),		/* delimiter character for output msg.		*/
	dft_q			fixed bin,
         (i, j)			fixed bin,	/* a do-group index.			*/
	long (4)			char(100),
	pic			pic"zzzzz9",
	longest_q_name		fixed bin,
	1 s			aligned,		/* device rqt structure.			*/
	  2 Nrqt		fixed bin,		/*    number of request types.		*/
	  2 rqt (100)		char(32) unal,	/*       rqt name.				*/
	  2 max_q (100)		fixed bin,
	  2 queues (100,4),
	    3 code		fixed bin(35),	/*       status code assoc. with rqt & queue.	*/
	    3 q 			fixed bin;	/*       queue counts for request type's queues.	*/

     dcl						/* 	based variables			*/
	arg			char(Larg) based (Parg),
						/* input argument.				*/
	ret			char(Lret) varying based (Pret);
						/* return argument.				*/

     dcl						/*		builtins			*/
         (dim, index, length, ltrim, max, min, rtrim, sum)
				builtin;

     dcl						/*	entries				*/
	active_fnc_err_		entry options (variable),
	com_err_			entry options (variable),
	convert_status_code_	entry (fixed bin(35), char(8), char(100)),
	cu_$af_arg_ptr		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	dprint_$queue_contents	entry (char(*), fixed bin, fixed bin, fixed bin(35)),
	enter_output_request$default_request_type
				entry (char(*), char(*), fixed bin, fixed bin, fixed bin(35)),
	enter_output_request$request_type
				entry (char(*), char(*), char(*), fixed bin, fixed bin, fixed bin(35)),
	iod_info_$queue_data	entry (char(*), fixed bin, fixed bin, fixed bin(35)),
	iod_info_$rqt_list		entry (char(32) unal, (*) char(32) unal, fixed bin, fixed bin(35)),
         (ioa_, ioa_$nnl)		entry options (variable);

     dcl						/*	static variables			*/
         (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant),
         (error_table_$badopt,
	error_table_$bigarg,
	error_table_$id_not_found,
	error_table_$too_many_names,
	error_table_$wrong_no_of_args) fixed bin(35) ext static;

	call cu_$af_return_arg (Nargs, Pret, Lret, code);
	if code = 0 then do;			/* Use special code if invoked as an active fcn	*/
	     ret = "";
	     if Nargs > 1 then go to wnoa;
	     if Nargs = 1 then do;
		call cu_$af_arg_ptr (1, Parg, Larg, code);
		call enter_output_request$request_type (arg, "", s.rqt(1), dft_q, s.max_q(1), code);
		if code ^= 0 then go to af_undefined_request_type;
		end;
	     else do;
		call enter_output_request$default_request_type ("printer", s.rqt(1), dft_q, s.max_q(1), code);
		if code ^= 0 then go to af_bad_default_request_type;
		end;

	     s.max_q(1) = min(s.max_q(1),4);		/* This program only supports up to 4 queues.	*/

	     do i = 1 to s.max_q(1);
		call dprint_$queue_contents (s.rqt(1), i, s.q(1,i), s.code(1,i));
		end;

	     if s.code(1,1) = 0 then do;		/* Got count for queue 1 successfully?		*/
		pic = s.q(1,1);			/*   Yes, return the count.			*/
		ret = ltrim(pic);
		end;
	     else ret = "*";			/*   No, return a star for queue 1 count.	*/

	     do i = 2 to s.max_q(1);
		ret = ret || " ";
		if s.code(1,i) = 0 then do;		/* Do same for counts in other queues.		*/
		     pic = s.q(1,i);
		     ret = ret || ltrim(pic);
		     end;
		else ret = ret || "*";
		end;

	     return;

wnoa:	     call active_fnc_err_ (error_table_$wrong_no_of_args, "total_output_requests",
		"^/Usage:^-[tor  {request_type} ]");
	     return;

af_undefined_request_type:
	     call active_fnc_err_ (code, "total_output_requests", "
Request type ^a undefined.", arg);
	     return;

af_bad_default_request_type:
	     call active_fnc_err_ (code, "total_output_requests", "
Unable to get default printer request type.");
	     return;
	     end;

	else do;					/* Invoked as a command.			*/
	     Sall = FALSE;				/* Prepare to parse arguments.		*/
	     Sbrief = FALSE;
	     Sinhibit_error = FALSE;
	     s.Nrqt = 0;
	     do i = 1 to Nargs;
		call cu_$arg_ptr (i, Parg, Larg, code);
		if index(arg, "-") = 1 then do;
		     if arg = "-brief" | arg = "-bf"
			then Sbrief = TRUE;
		     else if arg = "-long" | arg = "-lg"
			then Sbrief = FALSE;
		     else if arg = "-all" | arg = "-a"
			then Sall = TRUE;
		     else if arg = "-inhibit_error" | arg = "-ihe"
			then Sinhibit_error = TRUE;
		     else go to badopt;
		     end;
		else do;				/* Arg is a request type name.  Save it in array. */
		     if Larg > length(s.rqt(1)) then go to longarg;
		     if s.Nrqt = dim(s.rqt,1) then go to manyarg;
		     j, s.Nrqt = s.Nrqt + 1;
		     call enter_output_request$request_type (arg, "", s.rqt(j), dft_q, s.max_q(j), code);
		     if code ^= 0 then do;
			s.max_q(j) = 1;
			s.code(j,1) = code;
			s.q(j,1) = 0;
			end;
		     else do;
			s.q(j,*) = 0;
			s.code(j,*) = 0;
			end;
		     end;
		end;

	     if s.Nrqt = 0 then			/* No request type names were given?		*/
		if Sall then do;			/*   -all means all known types.  Get the list.	*/
		     Sno_rqt = FALSE;
		     call iod_info_$rqt_list ("", s.rqt, s.Nrqt, code);
		     if code ^= 0 then do;
			call com_err_ (code, "total_output_requests", "
^d request types exist.  Only the first ^d will be printed.", s.Nrqt, dim(s.rqt,1));
			s.Nrqt = dim(s.rqt,1);
			end;
		     s.q(*,*) = 0;
		     s.code(*,*) = 0;
		     do i = 1 to s.Nrqt;
			call iod_info_$queue_data (s.rqt(i), dft_q, s.max_q(i), code);
			if code ^= 0 then do;	/* No data for entire request_type?		*/
			     s.max_q(i) = 1;
			     s.code(i,1) = code;
			     end;
			end;
		     end;
		else do;				/*   Default is to list printer request_type only.*/
		     Sno_rqt = TRUE;
		     s.Nrqt = 1;
		     s.q(1,*) = 0;
		     call enter_output_request$default_request_type ("printer", s.rqt(1), dft_q, s.max_q(1), code);
		     if code ^= 0 then do;
			s.max_q(1) = 1;
			s.code(1,1) = code;
			end;
		     else s.code(1,*) = 0;
		     end;
	     else Sno_rqt = FALSE;			/*   request_type args were given.		*/

	     longest_q_name = 0;			/* Compute length of longest request_type name.	*/
	     do i = 1 to s.Nrqt;
		longest_q_name = max (longest_q_name, length (rtrim (s.rqt(i))));
		end;
	     longest_q_name = longest_q_name + length("  ");

	     do i = 1 to s.Nrqt;			/* Get/print data for each request type. 	*/
		if s.code(i,1) = 0 then
		do j = 1 to s.max_q(i);		/* Get data which  is accessible.		*/
		     call dprint_$queue_contents (s.rqt(i), j, s.q(i,j), s.code(i,j));
		     end;

		if Sno_rqt then do;			/* Neither -all nor request_type names given?	*/
		     if sum(s.code(1,*)) > 0 then	/*   Then suppress request type name unless	*/
			delim = ":";		/*   an error was encountered while listing queues*/
		     else do;
			s.rqt(1) = "";
			delim = "";
			longest_q_name = 1;
			end;
		     end;
		else delim = ":";

		if Sbrief then			/*   Skip request type if no data to print & -bf	*/
		     if sum(s.code(i,*)) + sum(s.q(i,*)) = 0 then
			go to SKIP_DVC;
		if sum(s.code(i,*)) = 0 then		/*   Simple case:  no errors while getting totals.*/
		     call ioa_ ("^a^a^vt^v(^5d ^)^5d",
			s.rqt(i), delim, longest_q_name, s.max_q(i)-1,
			s.q(i,1), s.q(i,2), s.q(i,3), s.q(i,4));
		else do;				/*   Complex case:  errors occurs for some queue. */
		     do j = 1 to s.max_q(i);
			call convert_status_code_ (s.code(i,j), "", long(j));
			end;
		     call ioa_ ("^a^a^vt^v(^[^5d^;^s*****^] ^)^[^5d^;^s*****^] ",
			s.rqt(i), delim, longest_q_name, s.max_q(i)-1,
		         (s.code(i,1) = 0), s.q(i,1),
		         (s.code(i,2) = 0), s.q(i,2),
		         (s.code(i,3) = 0), s.q(i,3),
		         (s.code(i,4) = 0), s.q(i,4));
		     if ^Sinhibit_error then do;
			if s.max_q(i) = 1 & s.code(i,1) = error_table_$id_not_found then
			     call ioa_ ("^-^a  Request type undefined.", long(1));
			else call ioa_$nnl ("^v(^[^-^a  ^a queue ^d.^/^;^3s^]^)",
			     s.max_q(i),
			    (s.code(i,1) ^= 0), long(1), s.rqt(i), 1,
			    (s.code(i,2) ^= 0), long(2), s.rqt(i), 2,
			    (s.code(i,3) ^= 0), long(3), s.rqt(i), 3,
			    (s.code(i,4) ^= 0), long(4), s.rqt(i), 4);
			end;
		     end;
SKIP_DVC:		end;
	     call ioa_ ("");
	     return;

badopt:	     call com_err_ (error_table_$badopt, "total_output_requests", "^a
Usage:	total_output_requests {request_types} {-ctl_args}
ctl_args:	-brief, -bf
	-long, -lg
	-all, -a
	-inhibit_error, -ihe", arg);
	     return;

longarg:	     call com_err_ (error_table_$bigarg, "total_output_requests", "^a
A request type must be ^d characters or less in length.",
		arg, length(s.rqt(1)));
	     return;

manyarg:	     call com_err_ (error_table_$too_many_names, "total_output_requests", "
A maximum of ^d request types may be given.", dim(s.rqt,1));
	     return;
	     end;

	end total_output_requests;
