/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

copy_cards: ccd: proc;
						/* Written by S. Vestal */
						/* modified by J. Stern 7/9/75 */
dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  get_authorization_ entry returns (bit (72) aligned);
dcl  get_group_id_ entry returns (char (32));
dcl  pool_manager_$find_pool entry (char (*), bit (72) aligned, char (*), char (*), fixed bin (35));
dcl  check_star_name_$entry entry (char (*), fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  hcs_$star_ entry (char (*), char (*), fixed bin, ptr, fixed bin,
     ptr, ptr, fixed bin (35));
dcl (ioa_, com_err_) entry options (variable);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_equal_name_ entry (char (*), char (*), char (32), fixed bin (35));
dcl  copy_seg_ entry (char (*), char (*), char (*), char (*), char (*), bit (1), fixed bin (35));
dcl  get_wdir_ entry returns (char (168));
dcl  error_table_$noentry fixed bin (35) ext;
dcl  error_table_$nomatch fixed bin (35) ext;
dcl  error_table_$entlong fixed bin (35) ext;
dcl  error_table_$bad_equal_name fixed bin (35) ext;
dcl  error_table_$longeql fixed bin (35) ext;
dcl (addr, substr, before, null, fixed, index, verify, reverse) builtin;
dcl  id char (10) int static init ("copy_cards");
dcl  latest bit (1);
dcl  warn_flag bit (1) init ("0"b);
dcl  code fixed bin (35);				/*  error return code */
dcl  equal bit (1) init ("0"b);			/*  on if equal(=) in path */
dcl  star bit (1) init ("0"b);			/*  on if stars in path */
dcl  arg char (argl) based (argp);
dcl  argp ptr;
dcl  argl fixed bin;
dcl  ename char (32);
dcl  deck_name char (32);				/*  search name for card decks */
dcl  caller char (22);				/*  Person name of the caller */
dcl  sysdir char (168) int static init ("System_Card_Pool");
dcl  caller_auth bit (72) aligned;			/*  callers authorization */
dcl  pool_path char (168);				/*  pathname of the card pool */
dcl  areap ptr;					/*  area pointer */
dcl  system_area area (65560) based (areap);		/*  area overlay */
dcl  ecount fixed bin;				/* entry count */
dcl  eptr ptr init (null);				/*  pointer to entry structure */
dcl  nptr ptr init (null);				/*  pointer to name array */
dcl  names (200) char (32) based (nptr);		/*  name array */
dcl  new_deck_dirname char (168);			/*  directory portion of pathname for new_deck */
dcl  new_deck_ename char (32);			/*  name of new deck */
dcl  dir char (168);				/* directory name used in error message */
dcl  ent char (32);					/* entry name used in error message */
dcl  nind fixed bin;				/*  name index */
dcl  new_ename char (32);				/*  entry name */
dcl  suffix char (4) ;				/* suffix of ename */
dcl  prefix char (32);
dcl  errsw bit (1) ;				/*  error switch */
dcl (i, j) fixed bin;				/*  loop index */
dcl 1 entries (100) based (eptr) aligned,
    2 type bit (2) unal,
    2 nname bit (16) unal,
    2 nindex bit (18) unal;
dcl  cleanup condition;


	if cu_$arg_count () = 0 then do;
	     call ioa_ ("^a: Usage: ^a deck_name [newdeck_name] ", id, id);
	     return;
	end;
	new_deck_ename = "==";
	new_deck_dirname = get_wdir_ ();
	latest = "0"b;
	i = 1;
	do while (i <= cu_$arg_count ());
	     call cu_$arg_ptr (i, argp, argl, code);
	     if code ^= 0 then goto error;
	     if i = 1 then deck_name = arg;
	     else if arg = "-latest" then latest = "1"b;
	     else do;
		call expand_pathname_ (arg, new_deck_dirname, new_deck_ename, code);
		if code ^= 0 then goto error;
	     end;
	     i = i + 1;
	end;
	call check_star_name_$entry (deck_name, code);	/* check legality of starname */
	if code > 2 then do;			/*  illegal */
	     call com_err_ (code, id, deck_name);
	     return;
	end;
	if code > 0 then				/* deck_name contains stars */
	     if length (rtrim (deck_name)) >= 2 then
		if substr (deck_name, length (rtrim (deck_name))-1, 2) = "**" then /* deck_name ends in "**" */
		     go to get_auth;
	substr (deck_name, length (rtrim (deck_name)) + 1, 2) = ".*";
get_auth:
	caller = before (get_group_id_ (), ".");	/*  get the callers name and level */
	caller_auth = get_authorization_ ();
	call pool_manager_$find_pool (sysdir, caller_auth, caller, pool_path, code);
	if code ^= 0 then
	     if code = error_table_$noentry then	/* no pool, cards probably not read yet */
		go to not_found;			/* treat like pool exists but deck missing */
	     else do;				/* uh oh */
		call com_err_ (code, id, "Cannot find user card pool.");
		return;
	     end;
	areap = get_system_free_area_ ();
	on cleanup call clean_up;
	call hcs_$star_ ((pool_path), (deck_name), 2, areap, ecount, eptr, nptr, code);
	if code ^= 0 then				/*  anything in the caller's pool */
	     if code = error_table_$nomatch then do;
not_found:	call com_err_ (0, id, "^a not found in card pool.", substr (deck_name, 1, argl));
		return;
	     end;
	     else do;
		call com_err_ (code, id, "^a>^a", pool_path, deck_name);
		return;
	     end;
	j = 0;
	do i = 1 to ecount;				/*  look at every entry */
	     nind = fixed (eptr -> entries (i).nindex, 18); /*  build the name */
	     ename = nptr -> names (nind);
	     suffix = reverse (before (reverse (ename), "."));
	     prefix = reverse (after (reverse (ename), ".")); /* erase suffix to compute equal reverse(ename) */
	     call get_equal_name_ (prefix, new_deck_ename, new_ename, code); /*  build an equal name for it */
	     if code ^= 0 then
		if code = error_table_$bad_equal_name then do;
		     call com_err_ (code, id, new_deck_ename);
		     go to finish;
		end;
		else do;
long_equal:	     call com_err_ (code, id, "converting ^a to ^a", ename, new_deck_ename);
		     go to end_loop;
		end;
	     if suffix ^= "0" then do;		/* must have been a namedup during card input */
		if length (rtrim (new_ename)) + length (rtrim (suffix)) + 1 > 32 then goto long_equal;
		new_ename = substr (new_ename, 1, length (rtrim (new_ename))) || "." || suffix;
		warn_flag = "1"b;
	     end;
	     call copy_seg_ (pool_path, ename, new_deck_dirname, new_ename, "copy_cards", errsw, code); /*  copy the segment */
	     if code ^= 0 then do;
		if ^errsw then do;			/* problem with source seg */
		     dir = pool_path;
		     ent = ename;
		end;
		else do;				/* problem with target seg */
		     dir = new_deck_dirname;
		     ent = new_ename;
		end;
		call com_err_ (code, id, "^a>^a", dir, ent);
		go to end_loop;
	     end;
	     j = j+1;				/*  increment the copy count */
end_loop:	end;
	if warn_flag then
	     call com_err_ (0, id, "Multiple decks of the same name may have been entered. Check for numbered copies.");
	call ioa_ ("^d card decks copied.", j);		/*  inform the caller and exit */
finish:	call clean_up;
	return;
test:	entry (dirname);				/*  test entry point for defining pool pathname */
dcl  dirname char (*);
	sysdir = dirname;				/*  should be the only argument */
	return;

clean_up:	proc;					/*  trap to cleanup */
	     if eptr ^= null then free entries in (system_area); /*  free system storage */
	     if nptr ^= null then free names in (system_area);
	     return;				/*  and return */
	end;
error:	if code ^= 0 then call com_err_ (code, id);
	call clean_up;
	return;
     end copy_cards;
