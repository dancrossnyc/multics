/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This module does the put_chars, write_record, rewrite_record, get_chars,
   get_line, and read_record functions of the io_call command. */
/* Removed from main command June 1977 by Larry Johnson, and made to work as an active function */
/* Modified 08/03/83 by Jim Lippard to not require specification of buffer
   length, to not complain about short records when called as an AF,
   to add a -string control argument for output requests, to print
   the right information in error messages, and to fix write_record
   and rewrite_record to leave things alone when -segment is used without
   -nl or -nnl */
/* Modified 12/13/83 by Jim Lippard to add -allow_newline (-alnl),
   -append_newline (-apnl), and -remove_newline (-rmnl) and to
   not require buffer length for read_record */

io_call_read_write_: proc;

/* Parameters */

dcl  arg_iocb_ptr ptr;				/* Pointer to the IOCB */
dcl  arg_arg_list_ptr ptr;				/* Pointer to the commands argument list */

/* Automatic storage */

dcl  code fixed bin (35);				/* System status code */
dcl  arg_list_ptr ptr;				/* Pointer to argument list */
dcl  arg_ptr ptr;					/* Pointer to current argument */
dcl  arg_len fixed bin;				/* Length of current argument */
dcl  n_args fixed bin;				/* Number of arguments on command line */
dcl  next_arg fixed bin;				/* Used in counting args */
dcl  dir char (168);				/* To hold directory names */
dcl  ename char (32);				/* To hold entry names */
dcl  seg_ptr ptr;					/* Pointer to dir>ename */
dcl  arg_name char (32) var;				/* Name of current arg for error msg */
dcl  iocb_ptr ptr;					/* Pointer to IOCB being processed */
dcl  offset_val fixed bin (21);			/* Value of offset into segment if specified */
dcl  length_val fixed bin (21);			/* Value of length of string if specified */
dcl  bit_count fixed bin (24);			/* Length of segment in bits */
dcl  char_cnt fixed bin (21);				/* Length of segment in characters */
dcl  offset_sw bit (1);				/* Set if offset given in command */
dcl  length_sw bit (1);				/* Set if length given in command */
dcl  lines_sw bit (1);				/* Set if -lines specified */
dcl  cv_dec_err fixed bin;				/* Error code from cv_dec_check_ */
dcl  data_ptr ptr;					/* Pointer to data if i/o from a segment */
dcl  data_len fixed bin (21);				/* Length of data if io from segment */
dcl  init_sw bit (1) init ("0"b);			/* Set if segment has been inited so it can be termed */
dcl  cmd_type bit (1);				/* 0 if input operation, 1 if output */
dcl (input init ("0"b), output init ("1"b)) bit (1) int static options (constant); /* Possible values for cmd_type */
dcl  string_sw bit (1);				/* Set if string appears on command line */
dcl  string_ptr ptr;				/* Pointer to string command argument */
dcl  string_len fixed bin (21);			/* Length of string command argument */
dcl  nl_sw bit (1);					/* Set if -append_newline appears */
dcl  nnl_sw bit (1);				/* Set of -remove_newline appears */
dcl  alnl_sw bit (1);				/* Set if -allow_newline appears */
dcl  nhe_sw bit (1);				/* Set if -nhe or -no_header is used */
dcl  path_sw bit (1);				/* Set if -segment or -sm appears */
dcl  temp_val fixed bin (35);				/* Temp area used in conversions */
dcl  input_len fixed bin (21);			/* Length of data read on input operation */
dcl  alloc_sw bit (1) init ("0"b);			/* Set if string allocated and should be freed */
dcl  print_length bit (1) init ("0"b);			/* Set if length of input record should be printed */
dcl  length_printed bit (1) init ("0"b);		/* Set on input ops once length is printed */
dcl  ptr_array (1) ptr init (null);			/* Array of pointers used by get_temp_segments_ */
dcl  ioname char (32);				/* Name of current switch */
dcl  request_name char (32);				/* Name of current request */
dcl  af_sw bit (1);					/* Set if called as an active function */
dcl  no_quote_sw bit (1);				/* Set if -no_quote specified */
dcl  error entry variable options (variable);		/* Either com_err_ of active_fnc_err_ */
dcl  af_retp ptr;					/* Pointer to af return string */
dcl  af_retl fixed bin;				/* Its max length */

/* Constants */

dcl  cmd_name char (7) int static options (constant) init ("io_call"); /* Name of this thing */
dcl  new_line char (1) int static options (constant) init ("
");						/* A new line character */

/* Static storage */

dcl  old_dir char (168) static init (" ");		/* Previous directory used */
dcl  old_ename char (32) static init (" ");		/* Previous entry name */

/* Based storage */

dcl  arg char (arg_len) based (arg_ptr);		/* Some arbitrary argument */
dcl  based_seg char (char_cnt) based (seg_ptr);		/* One way of looking at a segment */
dcl  based_seg_array (1:char_cnt) char (1) based (seg_ptr); /* Another way */
dcl  arg_string char (string_len) based (string_ptr);	/* Command argument used as output string */
dcl  input_string char (input_len) based (data_ptr);	/* Input string during read operation */
dcl  af_ret char (af_retl) based (af_retp) var;		/* Return string for active function */

/* Things allocated in system free area */

dcl  free_area_ptr ptr init (null);			/* Pointer to the area */
dcl  free_area area based (free_area_ptr);		/* A representation of the area */
dcl  free_area_string char (free_area_string_len) based (free_area_string_ptr); /* A string allocated there */
dcl  free_area_string_len fixed bin (21);		/* Length of the string */
dcl  free_area_string_ptr ptr init (null);		/* Pointer to that string */

/* External variables */

dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$long_record ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$no_operation ext fixed bin (35);
dcl  error_table_$short_record ext fixed bin (35);
dcl  error_table_$too_many_args ext fixed bin (35);

dcl  iox_$user_output ext ptr;

dcl sys_info$max_seg_size fixed bin(35) ext static;

/* Builtin functions */

dcl (addr, addrel, bin, divide, index, length, max, mod, null, size, substr) builtin;

dcl (area, cleanup) condition;

/* Entry variables */

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);

dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  cu_$arg_count_rel entry (fixed bin, ptr);
dcl  cu_$af_return_arg_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  cu_$af_arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);

dcl  cv_dec_check_ entry (char (*), fixed bin) returns (fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  get_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));

dcl  hcs_$get_max_length entry (char (*), char (*), fixed bin (18), fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$set_max_length_seg entry (ptr, fixed bin (18), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35));

dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);


dcl  iox_$get_chars entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$rewrite_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$write_record entry (ptr, ptr, fixed bin (21), fixed bin (35));

dcl  release_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  requote_string_ entry (char (*)) returns (char (*));

%include iocb;

/* PUT_CHARS operation */

put_chars: entry (arg_iocb_ptr, arg_arg_list_ptr);

	request_name = "put_chars";
	on cleanup call clean_up;
	call setup;
	cmd_type = output;				/* Output command */
	call scan_cmd;				/* Scan the command */
	if  ^(nl_sw | nnl_sw | alnl_sw) then nl_sw = "1"b;		/* -apnl default */
	call build_optr;				/* Build pointer to data */
	call iox_$put_chars (iocb_ptr, data_ptr, data_len, code); /* Write it */
	if code ^= 0 then go to err_2;
exit:	call clean_up;
	return;

/* WRITE_RECORD operation */

write_record: entry (arg_iocb_ptr, arg_arg_list_ptr);

	request_name = "write_record";
	on cleanup call clean_up;
	call setup;
	cmd_type = output;				/* Output command */
	call scan_cmd;				/* Scan command */
	if ^path_sw & ^(nl_sw | nnl_sw | alnl_sw) then nnl_sw = "1"b;
	else if path_sw & ^(nl_sw | nnl_sw | alnl_sw) then alnl_sw = "1"b;
	call build_optr;				/* Build pointer to data */
	call iox_$write_record (iocb_ptr, data_ptr, data_len, code); /* Write it */
	if code ^= 0 then go to err_2;
	else go to exit;

/* REWRITE_RECORD operation */

rewrite_record: entry (arg_iocb_ptr, arg_arg_list_ptr);

	request_name = "rewrite_record";
	on cleanup call clean_up;
	call setup;
	cmd_type = output;				/* Output command */
	call scan_cmd;				/* Scan command line */
	if ^path_sw & ^(nl_sw | nnl_sw | alnl_sw) then nnl_sw = "1"b;
	else if path_sw & ^(nl_sw | nnl_sw | alnl_sw) then alnl_sw = "1"b;
	call build_optr;				/* Build pointer to data */
	call iox_$rewrite_record (iocb_ptr, data_ptr, data_len, code);
	if code ^= 0 then go to err_2;
	else go to exit;

/* GET_CHARS operation */

get_chars: entry (arg_iocb_ptr, arg_arg_list_ptr);

	request_name = "get_chars";
	on cleanup call clean_up;
	call setup;
	cmd_type = input;
	call scan_cmd;
	if af_sw & ^(nl_sw | nnl_sw | alnl_sw) then nnl_sw = "1"b;
	else if ^af_sw & path_sw & ^(nl_sw | nnl_sw | alnl_sw) then alnl_sw = "1"b;
	else if ^af_sw & ^path_sw & ^(nl_sw | nnl_sw | alnl_sw) then nl_sw = "1"b;
	call build_iptr;				/* Get pointer to input area */
	print_length = "1"b;
	input_len = -1;
	call iox_$get_chars (iocb_ptr, data_ptr, data_len, input_len, code); /* Read chars */
	if code ^= 0 then do;
	     call print_code;
	     if input_len > 0 then call input_dispose;
	     go to exit;
	end;
	call input_dispose_final;
	go to exit;

/* READ_RECORD operation */

read_record: entry (arg_iocb_ptr, arg_arg_list_ptr);

	request_name = "read_record";
	on cleanup call clean_up;
	call setup;
	cmd_type = input;
	call scan_cmd;				/* Scan command */
	if af_sw & ^(nl_sw | nnl_sw | alnl_sw) then nnl_sw = "1"b;
	else if ^af_sw & ^(nl_sw | nnl_sw | alnl_sw) then alnl_sw = "1"b;
	call build_iptr;
	print_length = "1"b;			/* Length should be printed */
	input_len = -1;
	call iox_$read_record (iocb_ptr, data_ptr, data_len, input_len, code); /* Read record */
	if code ^= 0 then do;			/* An error */
	     if code = error_table_$long_record then do;
		if input_len > data_len then do;	/* If true length returned */
		     call error (code, cmd_name, "^d characters in record, ^d returned.", input_len, data_len);
		     input_len = data_len;
		     length_printed = "1"b;		/* Remember length already printed */
		end;
		else call print_code;		/* Use standard error print */
	     end;
	     else call print_code;
	     if input_len > 0 then call input_dispose;
	     go to exit;
	end;
	call input_dispose_final;
	go to exit;

/* GET_LINE operation */

get_line:	entry (arg_iocb_ptr, arg_arg_list_ptr);

	request_name = "get_line";
	on cleanup call clean_up;
	call setup;
	cmd_type = input;
	call scan_cmd;				/* Scan command line */
	if af_sw & ^(nl_sw | nnl_sw | alnl_sw) then nnl_sw = "1"b;
	else if ^af_sw & path_sw & ^(nl_sw | nnl_sw | alnl_sw) then alnl_sw = "1"b;
	else if ^af_sw & ^path_sw & ^(nl_sw | nnl_sw | alnl_sw) then nl_sw = "1"b;
	call build_iptr;				/* Get pointer to input area */
	print_length = length_sw;			/* If user supplied buffer length there will only be
						   one read so I can print the length */
getl:	input_len = -1;
	call iox_$get_line (iocb_ptr, data_ptr, data_len, input_len, code); /* Read line */
	if code ^= 0 then do;			/* If error */
	     if length_sw then do;			/* User supplied buffer */
		call print_code;
		if input_len > 0 then call input_dispose;
		go to exit;
	     end;
	     if code = error_table_$long_record then do;	/* Didn't get it all */
		if path_sw then do;			/* If reading into segment */
		     offset_val = offset_val+input_len; /* Adjust offset */
		     data_ptr = addr (based_seg_array (offset_val+1)); /* Compute new address */
		     data_len = data_len-input_len;	/* Space left */
		     go to getl;
		end;
		else do;
		     call write_first;		/* Write standard header */
		     call iox_$put_chars (iox_$user_output, data_ptr, input_len, code); /* Write section to user_output */
		     if code ^= 0 then go to out_err;
		     go to getl;			/* And read more */
		end;
	     end;
	     else do;				/* Other errors */
		call print_code;
		if input_len > 0 then call input_dispose;
		go to exit;
	     end;
	end;
 print_length = "1"b;	/* If only one get_line needed, I can print the length */
	call input_dispose_final;
	go to exit;

/* Procedure to scan command line on input or output operations to extract rest of options */

scan_cmd:	proc;

dcl  carg_flag bit (1) init ("0"b);			/* Once set, only control args are allowed */

	     string_sw = "0"b;			/* Output string not yet found */
	     path_sw = "0"b;			/* Segment specification not yet found */
	     offset_sw = "0"b;			/* Offset not yet found */
	     length_sw = "0"b;			/* Length not yet found */
	     lines_sw = "0"b;			/* -lines has not been specified */
	     nl_sw = "0"b;				/* -append_newline has not been specified */
	     nnl_sw = "0"b;				/* -remove_newline has not been specified */
	     alnl_sw = "0"b;			/* -allow_newline has not been specified */
	     nhe_sw = "0"b;				/* -no_header has not been specified */
	     no_quote_sw = "0"b;			/* -no_quote not specified */

arg_loop:	     if next_arg > n_args then do;		/* If no more arguments to process */
		if ^length_sw then length_val = sys_info$max_seg_size * 4;
		return;
	     end;
	     call get_arg_ptr;			/* Get next arg */
	     if code ^= 0 then go to err_8;		/* This shouldn't happen */
	     if substr (arg, 1, 1) = "-" then go to carg; /* Go process control argument */
	     if carg_flag then do;			/* If only control arguments being accepted */
		code = error_table_$too_many_args;
		go to err_3;
	     end;
	     if cmd_type = output then do;		/* If output type command */
		string_sw = "1"b;			/* Then this is the output string */
		string_ptr = arg_ptr;		/* Save pointer */
		string_len = arg_len;		/* Save length */
		carg_flag = "1"b;			/* Only control arguments may appear now */
	     end;
	     else do;				/* If input type command */
		length_val = cv_dec ();		/* This must be length */
		if cv_dec_err ^= 0 then go to err_9;
		length_sw = "1"b;			/* Length has been specified */
		carg_flag = "1"b;			/* Only control arguments may follow */
	     end;
narg:	     next_arg = next_arg+1;			/* Next argument to process */
	     go to arg_loop;

/* Process control argument */

carg:	     if arg = "-nl" then nl_sw = "1"b;
	     else if arg = "-nnl" then nnl_sw = "1"b;
	     else if arg = "-allow_newline" | arg = "-alnl" then do;
		     nl_sw = "0"b;
		     nnl_sw = "0"b;
		     alnl_sw = "1"b;
	     end;
	     else if arg = "-append_newline" | arg = "-apnl" then do;
		     nl_sw = "1"b;
		     nnl_sw = "0"b;
		     alnl_sw = "0"b;
	     end;
	     else if arg = "-remove_newline" | arg = "-rmnl" then do;
		     nl_sw = "0"b;
		     nnl_sw = "1"b;
		     alnl_sw = "0"b;
	     end;
	     else if arg = "-lines" | arg = "-l" then lines_sw = "1"b;
	     else if arg = "-no_header" | arg = "-nhe" then nhe_sw = "1"b;
	     else if arg = "-no_quote" | arg = "-nq" then no_quote_sw = "1"b;
	     else if (arg = "-string" | arg = "-str") & cmd_type = output then do;
		     next_arg = next_arg + 1;
		     call get_arg_ptr;
		     if code ^= 0 then go to err_8;
		     if string_sw then do;
			call com_err_ (0, cmd_name, "Output string may only be specified once.");
			go to exit;
			end;
		     string_sw = "1"b;
		     string_ptr = arg_ptr;
		     string_len = arg_len;
		     carg_flag = "1"b;
		     end;
	     else if ^af_sw & (arg = "-segment" | arg = "-sm") then do;
		call sm_spec;			/* Analyze segment specification */
		carg_flag = "1"b;			/* Only control arguments may follow */
	     end;
	     else do;
		code = error_table_$badopt;		/* Bad control arg */
		go to err_3;
	     end;
	     go to narg;

	end scan_cmd;

/* Scan -segment portion of command line */

sm_spec:	proc;

	     if path_sw then do;			/* If duplicate specification */
		call error (0, cmd_name, "Duplicate -segment specification.");
		go to exit;
	     end;
	     arg_name = "pathname after -segment.";	/* Looking for this now */
	     next_arg = next_arg + 1;			/* This should be path name */
	     call get_arg_ptr;
	     if code ^= 0 then go to err_1;		/* Failed */
	     if arg = "." then do;			/* "." means re-use last segment */
		if old_dir = "" | old_ename = "" then do; /* Assuming there was one */
		     code = error_table_$noarg;
		     go to err_1;
		end;
		dir = old_dir;			/* Copy saved name */
		ename = old_ename;
	     end;
	     else do;				/* Analyze new name */
		call expand_path_ (arg_ptr, arg_len, addr (dir), addr (ename), code);
		if code ^= 0 then go to err_3;
		old_dir = dir;			/* Save name */
		old_ename = ename;
	     end;
	     path_sw = "1"b;			/* A path has been specified */
	     if next_arg = n_args then return;		/* If all args process, then done */
	     next_arg = next_arg + 1;			/* Step to next */
	     call get_arg_ptr;
	     if code ^= 0 then go to err_8;		/* Shouldn't happen */
	     if substr (arg, 1, 1) = "-" then do;	/* If this is control argument, -sm scan is done */
sm_back:		next_arg = next_arg - 1;		/* Back up so caller can process this arg */
		return;
	     end;
	     temp_val = cv_dec ();			/* Next arg should be decimal */
	     if cv_dec_err ^= 0 then go to err_9;	/* But wasn't */
	     if cmd_type = input then do;		/* If input type command */
		offset_sw = "1"b;			/* This was the offset */
		offset_val = temp_val;
		return;				/* And done */
	     end;
	     length_sw = "1"b;			/* If this is output command, then this may be the length */
	     length_val = temp_val;
	     if next_arg = n_args then return;		/* Done if this was last arg */
	     next_arg = next_arg+1;			/* Try next */
	     call get_arg_ptr;
	     if code ^= 0 then go to err_8;
	     if substr (arg, 1, 1) = "-" then go to sm_back; /* If control arg, then done with -sm */
	     temp_val = cv_dec ();			/* Should be decimal */
	     if cv_dec_err ^= 0 then go to err_9;
	     offset_sw = "1"b;			/* The first number was really the offset */
	     offset_val = length_val;			/* So move it */
	     length_val = temp_val;			/* This new number is the length */
	     return;

	end sm_spec;

/* Procedure used on output commands to compute pointer to and length of output data */

build_optr: proc;

dcl  has_nl bit (1) init ("0"b);			/* Set if string given already has new line */

	     if string_sw then do;			/* If data is from command line string */
check_nl:		data_ptr = string_ptr;		/* Pointer is known */
		data_len = string_len;		/* Length is also known */
		if string_len > 0 then
		     if substr (arg_string, string_len, 1) = new_line then has_nl = "1"b; /* Check for a new-line */
		if nnl_sw then do;			/* If requested to remove a newline */
		     if has_nl then data_len = data_len-1; /* Easy to do by changing count */
		end;
		if nl_sw then do;			/* If requested to add a newline */
		     if has_nl then return;		/* Already there */
		     call alloc_string (string_len+1);	/* Create temporary string */
		     data_ptr = free_area_string_ptr;	/* Data located here */
		     data_len = free_area_string_len;	/* And is this long */
		     free_area_string = arg_string;	/* Copy body of string */
		     substr (free_area_string, free_area_string_len, 1) = new_line; /* Append new-line */
		end;
		return;
	     end;
	     if path_sw then do;			/* If input from segment */
		call path_init;			/* Find data there */
		string_ptr = addr (based_seg_array (offset_val+1)); /* Get pointer to data */
		string_len = length_val;
		go to check_nl;			/* Go check -nl and -nnl options */
	     end;

	     call error (0, cmd_name, "No output specification.");
	     go to exit;

	end build_optr;

/* Procedure used by input commands to compute pointer to data area */

build_iptr: proc;

dcl  max_len fixed bin (18);				/* Used to hold max length of segment */

	     if path_sw then do;			/* If reading into segment */
		call path_init;			/* Initiate it */
		data_ptr = addr (based_seg_array (offset_val+1)); /* Data goes here */
		if length_sw then data_len = length_val; /* If length given, use it */
		else do;				/* If length not given */
		     call hcs_$get_max_length (dir, ename, max_len, code); /* Get max segment length */
		     if code ^= 0 then go to err_5;
		     data_len = 4*max_len-offset_val;	/* Compute space remaining in segment */
		end;
	     end;
	     else do;				/* Not reading into segment */
		call alloc_string (length_val);	/* And create a string */
		data_ptr = free_area_string_ptr;	/* Here */
		data_len = free_area_string_len;	/* For this length */
	     end;

	     return;

	end build_iptr;

/* This procedure is called after an input operation to handle the final disposition of the data */

input_dispose: proc;

dcl  new_bit_count fixed bin (24);			/* New segment bit count */
dcl  has_nl bit (1) init ("0"b);			/* Set if newline at end of data */
dcl  word_cnt fixed bin (18);				/* Word count of segment */
dcl  last_word_ptr ptr;				/* Pointer to last word of segment */
dcl  last_word bit (36) based (last_word_ptr);		/* Last word */
dcl  bits_used fixed bin;				/* Bits used in last word */

	     if input_len > 0 then
		if substr (input_string, input_len, 1) = new_line then has_nl = "1"b; /* Check for newline at end */
	     if path_sw then do;			/* If data is to go into segment */
		if nl_sw & ^has_nl then do;		/* If wants newline and doesn't have one */
		     input_len = input_len+1;		/* Make string longer */
		     substr (input_string, input_len, 1) = new_line; /* Insert newline */
		end;
		else if nnl_sw then			/* If requested to strip newline */
		     if has_nl then input_len = input_len-1; /* Strip it if present */
		new_bit_count = 9 * (offset_val + input_len); /* Compute new segment bit count */
		call hcs_$set_bc_seg (seg_ptr, new_bit_count, code); /* Set it */
		if code ^= 0 then go to err_5;
		if new_bit_count < bit_count then do;	/* If segment is shrinking */
		     word_cnt = divide (new_bit_count+35, 36, 18, 0); /* Get length in words */
		     call hcs_$truncate_seg (seg_ptr, word_cnt, code); /* And truncate it */
		     if code ^= 0 then go to err_5;
		     bits_used = mod (new_bit_count, 36); /* Bits used in last word (0 if full) */
		     if bits_used ^= 0 then do;	/* If word partially filled */
			last_word_ptr = addrel (seg_ptr, word_cnt-1); /* Get pointer to last word */
			substr (last_word, bits_used+1) = "0"b; /* Zero remaining bits */
		     end;
		end;
	     end;
	     else if ^af_sw then do;			/* Data will be written to terminal */
		call write_first;			/* Write header  */
		call iox_$put_chars (iox_$user_output, data_ptr, input_len, code);
		if code ^= 0 then go to out_err;
		if ^has_nl & nl_sw then do;		/* If no newline */
		     call iox_$put_chars (iox_$user_output, addr (new_line), 1, code);
		     if code ^= 0 then go to out_err;
		end;
	     end;
	     else do;				/* Called as an active function */
		if has_nl & nnl_sw then input_len = input_len - 1;
		if no_quote_sw then af_ret = input_string;
		else af_ret = requote_string_ (input_string);
	     end;

	     return;

	end input_dispose;

input_dispose_final: proc;

	     call input_dispose;
	     if path_sw & ^length_printed then do;
		print_length = "1"b;
		call write_first;
	     end;
	     return;

	end input_dispose_final;

/* This routines writes a standard message at the beginning of the data obtained on input commands.
   This consists of at least the word "io_call:" and is usually followed by the number of characters
   read by the command. */

write_first: proc;

dcl  header char (50);				/* Temp area */
dcl  headl fixed bin;				/* Value returned by ioa_$rsnnl */

	     if length_printed | nhe_sw | af_sw then return; /* Only do this once */
	     header = cmd_name || ": ";		/* This is data to write */
	     call iox_$put_chars (iox_$user_output, addr (header), length (cmd_name)+2, code);
	     if code ^= 0 then go to out_err;
	     if print_length then do;			/* If length should be printed too */
		call ioa_$rsnnl ("^d character^v(s^) returned.", header, headl, input_len, bin (input_len ^= 1, 1));
		if path_sw then substr (header, headl+1, 1) = new_line; /* If data going to segment, this is end */
		call iox_$put_chars (iox_$user_output, addr (header), headl+1, code); /* Write data with extra char */
		if code ^= 0 then go to out_err;
	     end;
	     length_printed = "1"b;
	     return;

	end write_first;

/* The following procedure are used when input operations get an error code. The error is printed and
   plus the length of the data (if any) returned. */

print_code: proc;

dcl (l, lt) fixed bin (21);

	  if code = error_table_$short_record & (af_sw | ^length_sw) then return;
	     l = input_len;				/* Length read on last operation */
	     lt = max (l, 0);			/* Total length to print */

	     if lt = 0 then do;			/* If no data */
		if l < 0 then call error (code, cmd_name, "^a on switch ^a", request_name, ioname); /* Print this message if no length returned */
		else call error (code, cmd_name, "No data returned by ^a on switch ^a.", request_name, ioname);
	     end;

	     else call error (code, cmd_name, "^d character^v(s^) returned by ^a on switch ^a.", lt, bin (lt ^= 1, 1), request_name, ioname);

	     length_printed = "1"b;

	     return;

	end print_code;

/* Procedure to allocate a temporary string */

alloc_string: proc (string_len);

dcl  string_len fixed bin (21);			/* Length to allocate */

	     if free_area_ptr = null then
		free_area_ptr = get_system_free_area_ (); /* Start with pointer to free area */
	     free_area_string_len = string_len;		/* Length to allocate */
	     on area go to alloc_err;			/* In case error */
	     allocate free_area_string in (free_area);	/* Create string */
	     alloc_sw = "1"b;			/* Remember that I did this */
	     return;

alloc_err:     revert area;

/* Try to make a temporary segment since the allocate failed */

	     call get_temp_segments_ (cmd_name, ptr_array, code);
	     if code ^= 0 then do;
		call error (code, cmd_name, "Unable to allocate temp segment for data.");
		go to exit;
	     end;
	     call hcs_$set_max_length_seg (ptr_array (1), size (free_area_string), code); /* Make seg bit enough */
	     if code ^= 0 then do;
		call error (code, cmd_name, "Unable to get ^d word segment to hold data.", size (free_area_string));
		go to exit;
	     end;
	     free_area_string_ptr = ptr_array (1);
	     return;


	end alloc_string;

/* Procedure to locate data if in a segment */

path_init: proc;

dcl  cur_pos fixed bin (21);				/* Used during scan for line feeds */

	     call hcs_$initiate_count (dir, ename, "", bit_count, 0, seg_ptr, code); /* This is a good start */
	     if seg_ptr = null then do;		/* Initiate failed */
		if cmd_type = output then go to err_5;	/* Must succeed if this is output */
		call hcs_$make_seg (dir, ename, "", 01010b, seg_ptr, code); /* Make new segment to read into */
		if seg_ptr = null then go to err_5;	/* This should succeed */
		call ioa_ ("^a: Segment ^a^v(>^)^a created.", cmd_name, dir, bin (dir ^= ">", 1), ename);
		bit_count = 0;			/* New segment has no length */
	     end;
	     init_sw = "1"b;			/* Remember that I did this */
	     char_cnt = divide (bit_count, 9, 21, 0);	/* Compute length in characters */

	     if ^lines_sw then do;			/* If measurements are in characters */
		if cmd_type = output then do;		/* If output command */
		     if ^offset_sw then offset_val = 0; /* Assume 0 if offset omitted */
		     if offset_val > char_cnt then go to bound_err; /* Check range */
		     if ^length_sw then length_val = char_cnt-offset_val; /* Default length is rest of seg */
		     if (offset_val + length_val) > char_cnt then go to bound_err; /* Check range */
		end;
		else do;				/* If input command */
		     if ^offset_sw then offset_val = char_cnt; /* If no offset, assume end */
		     if offset_val > char_cnt then go to bound_err; /* Check range */
		end;
	     end;
	     else do;				/* If measurements in lines */
		cur_pos = 0;			/* Initialize current position for scan */
		if cmd_type = output then do;		/* If output command */
		     if ^offset_sw then offset_val = 0; /* If no offset, assume 0 */
		     call find_nl (offset_val, cur_pos); /* Scan down offset new-lines */
		     offset_val = cur_pos;		/* Offset now converted to chars */
		     if ^length_sw then length_val = char_cnt-offset_val; /* If no length, use rest */
		     else do;			/* If length given */
			call find_nl (length_val, cur_pos); /* Scan down for new-lines */
			length_val = cur_pos-offset_val; /* Length in characters */
		     end;
		end;
		else do;				/* If input command */
		     if ^offset_sw then offset_val = char_cnt; /* If no offset, use end of seg */
		     else do;
			call find_nl (offset_val, cur_pos); /* Scan down for new-lines */
			offset_val = cur_pos;	/* Offset in characters */
		     end;
		end;
	     end;

	     return;


	end path_init;

/* Procedure to scan down string for a given number of new-lines */

find_nl:	proc (n, pos);

dcl  n fixed bin (21);				/* Number of new-lines wanted */
dcl  pos fixed bin (21);				/* Current loc in segment (input and output) */
dcl  i fixed bin (21);				/* Loop index  */
dcl  new_pos fixed bin (21);				/* Temp pos */

	     do i = 1 to n;				/* Do for each new-line */
		if pos >= char_cnt then go to bound_err; /* Error if off end */
		new_pos = index (substr (based_seg, pos+1), new_line); /* Length of next line */
		if new_pos = 0 then go to bound_err;	/* If new-line not found */
		pos = pos + new_pos;		/* Compute new loc */
	     end;

	     return;

	end find_nl;

/* Internal procedure to call cu_$arg_ptr_rel so that this argument list is only built once */

get_arg_ptr: proc;

	     if af_sw then call cu_$af_arg_ptr_rel (next_arg, arg_ptr, arg_len, code, arg_list_ptr);
	     else call cu_$arg_ptr_rel (next_arg, arg_ptr, arg_len, code, arg_list_ptr);

	end get_arg_ptr;


/* Internal procedure to check next argument for a decimal value */

cv_dec:	proc returns (fixed bin (35));

	     return (cv_dec_check_ (arg, cv_dec_err));

	end cv_dec;

/* Procedure to set up args at all entries */

setup:	proc;

	     iocb_ptr = arg_iocb_ptr;
	     arg_list_ptr = arg_arg_list_ptr;
	     next_arg = 3;
	     ioname = iocb_ptr -> iocb.name;
	     call cu_$af_return_arg_rel (n_args, af_retp, af_retl, code, arg_list_ptr);
	     if code = 0 then do;			/* Called as active function */
		af_sw = "1"b;
		error = active_fnc_err_;
	     end;
	     else do;				/* Called as command */
		af_sw = "0"b;
		error = com_err_;
		call cu_$arg_count_rel (n_args, arg_list_ptr);
	     end;
	     return;

	end setup;


/* Come here for various kinds of error messages */

err_1:	call error (code, cmd_name, "^a", arg_name);
	go to exit;

err_2:	if code = error_table_$no_operation then call error (code, cmd_name, "^a on switch ""^a"".", request_name, ioname);
	else call error (code, cmd_name, "^a", ioname);
	go to exit;

err_3:	call error (code, cmd_name, "^a", arg);
	go to exit;

err_5:	call error (code, cmd_name, "^a^v(>^)^a", dir, bin (dir ^= ">", 1), ename);
	go to exit;

err_6:	call get_arg_ptr;
	if code = 0 then do;
	     code = error_table_$too_many_args;
	     go to err_3;
	end;
err_8:	call error (code, cmd_name, " (arg ^d)", next_arg);
	go to exit;

err_9:	call error (0, cmd_name, "Invalid decimal number. ^a", arg);
	go to exit;

bound_err: call error (0, cmd_name, "Offset/length exceeds bit count of segment.");
	go to exit;
need_len: call error (0, cmd_name, "Length of input area must be specified.");
	go to exit;

out_err:	arg_name = "user_output";
	go to err_1;

/* Cleanup procedure for command termination */

clean_up:	proc;


	     if init_sw then do;			/* If an init was done */
		init_sw = "0"b;
		call hcs_$terminate_noname (seg_ptr, code);
	     end;

	     if alloc_sw then do;
		alloc_sw = "0"b;
		free free_area_string in (free_area);
	     end;

	     if ptr_array (1) ^= null then
		call release_temp_segments_ (cmd_name, ptr_array, code);



	end clean_up;


     end io_call_read_write_;
