/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Returns "true" if there are messages in the specified message segment */

/* Created:  September 1982 by G. Palter */
/* Modified:  July 1984 by Jim Lippard to accept starnames and multiple
   paths */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


have_queue_entries:
     procedure () options (variable);


dcl  code fixed binary (35);

dcl  active_function bit (1) aligned;			/*  ON => invoked as an active function */

dcl  complain entry () options (variable) variable;
dcl  get_argument entry (fixed binary, pointer, fixed binary (21), fixed binary (35)) variable;

dcl  n_arguments fixed binary;

dcl  return_value character (return_value_max_lth) varying based (return_value_ptr);
dcl  return_value_max_lth fixed binary (21);
dcl  return_value_ptr pointer;

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_lth fixed binary (21);
dcl  argument_ptr pointer;

dcl  file_dname character (168);			/* dir/entryname of the message-segment */
dcl  file_ename character (32);
dcl  file_index fixed binary;				/* message-segment index of above */
dcl  message_count fixed binary;			/* # of messages in it */

dcl  multiple_paths bit (1) aligned;			/* ON => if any starnames or more than one path */

dcl  (arg_index, name_index) fixed binary;

dcl  HAVE_QUEUE_ENTRIES character (32) static options (constant) initial ("have_queue_entries");

/* format: off */
dcl (active_fnc_err_, active_fnc_err_$suppress_name, com_err_, com_err_$suppress_name)
	entry () options (variable);
/* format: on */

dcl  check_star_name_$path entry (character (*), fixed binary (35));
dcl  cu_$af_arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  cu_$af_return_arg entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$star_
	entry (character (*), character (*), fixed binary (2), pointer, fixed binary, pointer, pointer,
	fixed binary (35));
dcl  ioa_ entry () options (variable);
dcl  message_segment_$close entry (fixed binary, fixed binary (35));
dcl  message_segment_$get_message_count_index entry (fixed binary, fixed binary, fixed binary (35));
dcl  message_segment_$open entry (character (*), character (*), fixed binary, fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));

/* format: off */
dcl (error_table_$badopt, error_table_$badstar, error_table_$not_act_fnc)
	fixed binary (35) external;
/* format: on */

dcl  (index, null, sum) builtin;

dcl  cleanup condition;
%page;
/* have_queue_entries: entry () options (variable) */

	call cu_$af_return_arg (n_arguments, return_value_ptr, return_value_max_lth, code);

	if code = 0 then do;
	     active_function = "1"b;
	     complain = active_fnc_err_;
	     get_argument = cu_$af_arg_ptr;
	     return_value = "false";			/* in case of error be sure to return something */
	end;

	else if code = error_table_$not_act_fnc then do;
	     active_function = "0"b;
	     complain = com_err_;
	     get_argument = cu_$arg_ptr;
	end;

	else do;
	     call com_err_ (code, HAVE_QUEUE_ENTRIES, "Determining type of call.");
	     return;
	end;

	if n_arguments = 0 then do;			/* must have a pathname */
	     if active_function then
		call active_fnc_err_$suppress_name (0, HAVE_QUEUE_ENTRIES, "Usage:  [have_queue_entries starnames]");
	     else call com_err_$suppress_name (0, HAVE_QUEUE_ENTRIES, "Usage:  have_queue_entries starnames");
	     return;
	end;

	if n_arguments > 1 then multiple_paths = "1"b;	/* more than one pathname */

	do arg_index = 1 to n_arguments;
	     call get_argument (arg_index, argument_ptr, argument_lth, code);
	     if code ^= 0 then do;
		call complain (code, HAVE_QUEUE_ENTRIES, "Fetching argument #^d.", arg_index);
		return;
	     end;

	     if index (argument, "-") = 1 then do;	/* can't be a control argument */
		call complain (error_table_$badopt, HAVE_QUEUE_ENTRIES, """^a""", argument);
		return;
	     end;

	     else do;				/* the pathname */
		call expand_pathname_$add_suffix (argument, "ms", file_dname, file_ename, code);
		if code ^= 0 then do;
		     call complain (code, HAVE_QUEUE_ENTRIES, "^a", argument);
		     return;
		end;

		call check_star_name_$path (argument, code);
		if code = error_table_$badstar then do;
		     call complain (code, HAVE_QUEUE_ENTRIES, "^a", argument);
		     return;
		end;
		else if code ^= 0 then do;		/* a star name */
		     star_names_ptr, star_entry_ptr = null ();
		     on condition (cleanup) call free_star_structures ();
		     call hcs_$star_ (file_dname, file_ename, star_ALL_ENTRIES, get_system_free_area_ (),
			star_entry_count, star_entry_ptr, star_names_ptr, code);
		     if code ^= 0 then do;
			call complain (code, HAVE_QUEUE_ENTRIES, "^a", pathname_ (file_dname, file_ename));
			return;
		     end;

		     do name_index = 1 to star_entry_count;
			call get_message_count (file_dname, star_names (star_entries.nindex (name_index)), message_count,
			     code);
			if code ^= 0 then do;
			     call complain (code, HAVE_QUEUE_ENTRIES, "^a",
				pathname_ (file_dname, star_names (star_entries.nindex (name_index))));
			     call free_star_structures ();
			     return;
			end;
			if (message_count = 0) then
			     if active_function then
				;
			     else call ioa_ ("No messages in ^a.",
				     pathname_ (file_dname, star_names (star_entries.nindex (name_index))));
			else if active_function then return_value = "true";
			else call ioa_ ("There are messages in ^a.",
				pathname_ (file_dname, star_names (star_entries.nindex (name_index))));
		     end;				/* star entries loop */
		     call free_star_structures ();
		end;				/* a star name */
		else do;				/* a path name */
		     call get_message_count (file_dname, file_ename, message_count, code);
		     if code ^= 0 then do;
			call complain (code, HAVE_QUEUE_ENTRIES, "^a", pathname_ (file_dname, file_ename));
			return;
		     end;
		     if (message_count = 0) then
			if active_function then
			     ;
			else call ioa_ ("No messages^[ in ^a^].", multiple_paths,
				pathname_ (file_dname, file_ename));
		     else if active_function then return_value = "true";
		     else call ioa_ ("There are messages^[ in ^a^].", multiple_paths,
			     pathname_ (file_dname, file_ename));
		end;				/* a path name */
	     end;
	end;					/* argument loop */

	return;

%page;

get_message_count:
     procedure (P_file_dname, P_file_ename, P_message_count, P_code);
dcl  (P_file_dname, P_file_ename) character (*) parameter;
dcl  P_message_count fixed binary parameter;
dcl  P_code fixed binary (35) parameter;

	P_code = 0;

/* Actual processing */

	call message_segment_$open (P_file_dname, P_file_ename, file_index, code);
	if code ^= 0 then do;
	     P_code = code;
	     return;
	end;

	on condition (cleanup)			/* if here the mailbox/message-segment is opened */
	     call message_segment_$close (file_index, (0));

	call message_segment_$get_message_count_index (file_index, P_message_count, code);
	if code ^= 0 then do;
	     P_code = code;
	     call message_segment_$close (file_index, (0));
	     return;
	end;

	call message_segment_$close (file_index, (0));
     end get_message_count;

%page;

free_star_structures:
     procedure;
	if star_names_ptr ^= null () then free star_names;/* in system free area */
	if star_entry_ptr ^= null () then free star_entries;
						/* in system free area */
     end free_star_structures;

%page;
%include star_structures;

     end have_queue_entries;
