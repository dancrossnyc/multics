/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*converted to version 2 pl1 on 11.20.72 by Alan Downing*/
write_list_: proc;

dcl (sp,						/* save ap */
     p,						/* pointer to current argument */
     xptr) ptr,					/* pointer to floating point number */

     packed bit(1) aligned,				/* "1"b if packed argument */
     ndims fixed bin(15),				/* number of dimensions in an array */
     size fixed bin(35),				/* arithemetic precision, string size,
						   or number of structure elements */
     scale fixed bin(15),				/* arithemetic scale */

    (i,j,jj,l,bin_exp,no_of_arg,type) fixed bin(15),
     exponent fixed bin(15),
     number1 fixed bin(35),
    (int2,int_temp) fixed bin(63),
     fractional fixed bin(35),
     fractional2 fixed bin(71),

    (upper,upper_quotient,upper_remainder) fixed bin(35),
    (lower,lower_quotient) fixed bin(50),

     d(25) fixed bin(15),

     x float bin(63),

     bit0 bit(36) aligned int static init("0"b),
     single_p bit(1) aligned,
     dec_bit72 bit(72) aligned,

     based_fix fixed bin(35) based(p),
     based_fix71 fixed bin(71) based(p),
     based_float float bin(27) based(p),
     based_float63 float bin(63) based(p),
     based_bit bit(36) aligned based(p),
     based_bit_string bit(144) based(p),
     based_bit72 bit(72) aligned based(p),

     digit(0: 9) char(1) int static
     init("0","1","2","3","4","5","6","7","8","9"),

     based_char_string char(140) based(p);

dcl 1 arg based(sp) aligned,				/* Multics argument list structure */
    2 (acount,spval,dcount,padding) bit(18) unal,
    2 ptr(1) pointer;				/* argument pointers */

dcl 1 pointer based(p) aligned,			/* PL/1 pointer structure */
    2 (segno,pad,offset) bit(18) unal,
    2 (bit_offset,modifier) bit(9) unal;

dcl  cv_chars char(13) varying aligned,
     ch char(1) aligned;

dcl  suffix char(4) aligned;

dcl  nl_is_required bit(1) aligned;			/* flag to remember if new line char is needed */
dcl nl char(1) init("
");/*new line character*/

dcl  string char(132) aligned varying,
     substring char(132) aligned varying,
     temp_string char(21) aligned;

dcl  proc_name char(12) aligned int static init("write_list_");
dcl  string_no_descrip char(80) aligned int static
     init("No descriptors supplied; delete the declaration of the parameters to write_list_");

dcl  cu_$arg_list_ptr entry(ptr),
     com_err_ entry options(variable),
     convert_binary_integer_$decimal_string entry(fixed bin(35)) returns(char(12) varying),
     convert_binary_integer_$long_decimal_string entry(fixed bin(71)) returns(char(23) varying),
     convert_binary_integer_$octal_string entry(fixed bin(35)) returns(char(13) varying),
     decode_descriptor_ entry(ptr,fixed bin(15),fixed bin(15),bit(1) aligned,
     fixed bin(15),fixed bin(35),fixed bin(15)),
     ios_$write_ptr entry(ptr,fixed bin(35),fixed bin(35));

dcl (abs,addr,addrel,divide,fixed,length,mod,substr,unspec) builtin;

%include dectab;
%include decimal_table;
/*  */
	nl_is_required = "1"b;			/* normal entry adds new line character */
	go to start;

nnl:	entry;					/* entry to suppress new line character */
	nl_is_required = "0"b;

start:	
	call cu_$arg_list_ptr(sp);			/* get a pointer to the argument list */
	if arg.dcount = (18)"0"b			/* error, no descripters */
	then do;
	     call com_err_ (0,proc_name,string_no_descrip);
	     return;
	end;

	no_of_arg = divide(fixed(arg.acount,18),2,15,0);
	string = "";

	do j = 1 to no_of_arg;			/* loop for processing arguments */
	     call decode_descriptor_(sp,j,type,packed,ndims,size,scale);
	     p = arg.ptr(j);			/* get pointer to current argument */

/* Note that when Version II PL/1 comes along, we will have to be very careful
   to obey the "packed" flag for all data items. All packed integers will have
   to be extracted with an adjustable bit string, and their sign bit extended to
   the unpacked representation. Also, we should print out the scale factor for fixed
   point items (345f+6) */


/*  */
	     if type = 1				/* real fixed single */
	     then substring = "  "||convert_binary_integer_$decimal_string(p->based_fix);
						/*  */
	     else if type = 2			/* real fixed double */
	     then substring = "  "||convert_binary_integer_$long_decimal_string(p->based_fix71);

/*  */
	     else if type < 5			/* for real floating point; 3 = single precision,4 = double */
	     then do;
		x = 0e0;
		if type = 3			/* the number is single precision */
		then do;
		     single_p = "1"b;		/* set the single precision flag on */
		     x = p->based_float;		/* pick up a single precision number */
		end;
		else do;				/* the number is double precision */
		     single_p = "0"b;		/* set the single precision flag off */
		     x = p->based_float63;		/* pick up a double precision number */
		end;

		if substr(p->based_bit,9,2) = bit0	/* if the number is zero */
		then do;
		     substring = "  0.00000000e+00";	/* set the answer */
		     go to end_float;
		end;

		if substr(p->based_bit,9,1)		/* if the number is negative */
		then substring = " -0.";		/* set a leading minus sign in answer */
		else substring = "  0.";

		x = abs(x);			/* take the absolute value of the number */

		exponent = 0;			/* initialize the print-out exponent */

		if x>=1.0e-1			/* if the number is > than .1 */
		then do;				/* reduce it so that 0 < number < .1 */
		     do while (x>=1.0e4);
			x = x*(10.0e0**-5);		/* first pull out powers of 10**5 */
			exponent = exponent+5;	/* increment exponent accordingly */
		     end;
		     do while(x>=1.0e0);
			x = x*(10.0e0**-1);		/* then pull out powers of 10 */
			exponent = exponent+1;	/* incrementing the exponent */
		     end;
		end;
		else do;				/* if the number is negative, reverse procedure */
		     do while(x<1.0e-5);		/* while the number is < 10**-5 */
			x = x*(10.0e0**5);		/* multiply by 10**5 */
			exponent = exponent-5;	/* and increment exponent */
		     end;
		     do while(x<1.0e-1);		/* while number is < 10**-1 */
			x = x*(10.0e0**1);		/* multiply by 10 */
			exponent = exponent-1;	/* and increment exponent */
		     end;
		end;

		if exponent>=0			/* set the sign of the exponent */
		then suffix = "e+  ";
		else suffix = "e-  ";

		exponent = abs(exponent);		/* take the absolute value of the exponent */

		xptr = addr(x);
		bin_exp = fixed(substr(xptr->based_bit,1,8),8); /* get binary exponent */

		dec_bit72 = substr(xptr->based_bit72,10,63); /* pick out mantissa */

		if bin_exp^=0 then bin_exp = 256-bin_exp; /* since the number is less than .1, the exponent
						   is <= 0. Take its absolute value */

		if single_p			/* if the number is single precision */
		then do;
		     fractional = 0;		/* initialize fixed point representation */
		     do i = 1 to 27;		/* multiply bits by appropriate exponent */
			if substr(dec_bit72,i,1)
			then fractional = fractional+decimal_table(i+bin_exp);
		     end;				/* fractional is fixed point representation */
		     fractional = fractional+decimal_table(28+bin_exp); /* round-off step */

		     number1 = divide(fractional+50,100,35,0); /* add fifty to force carry
						   if all bits are ones, divide by
						   100 to throw away last two bits */

		     do i = 1 to 7;
			d(i) = mod(number1,10);	/* pull out rightmost digit */
			number1 = divide(number1,10,35,0); /* decrement number */
		     end;

		     if number1 = 10		/* if the result is 10 */
		     then do;			/* put it in a better representation */
			number1 = 1;
			exponent = exponent+1;
		     end;

		     substring = substring||(digit(number1)||digit(d(7))||digit(d(6))||digit(d(5))
		     ||digit(d(4))||digit(d(3))||digit(d(2))||digit(d(1))); /* make up output string */
		end;
		else do;				/* for double precision numbers */
		     fractional2 = 0;		/* initialize fixed point representation */
		     do i = 1 to 63;		/* convert number to fixed point representation */
			if substr(dec_bit72,i,1)
			then fractional2 = fractional2+decimal_table_2(i+bin_exp);
		     end;

		     fractional2 = fractional2+decimal_table_2(64+bin_exp)+54;
						/* 54 is added in order to force a carry
						   if all 63 mantissa bits are one's */

		     upper = addr(fractional2)->based_fix; /* split number into 2 parts */
		     lower = fractional2-68719476736*upper;

		     do i = 1 by 1 while(upper>=134217728); /* reduce upper part to < 2**27 */
			upper_quotient = divide(upper,10,35,0);
			upper_remainder = upper-10*upper_quotient;

			lower = lower+68719476736*upper_remainder;
			lower_quotient = divide(lower,10,50,0);
			d(i) = lower-10*lower_quotient;
			substr(temp_string,22-i,1) = digit(d(i));

			upper = upper_quotient;
			lower = lower_quotient;
		     end;

		     int2 = 68719476736*upper+lower;

		     do i = i to 21;		/* now continue division normally */
			int_temp = divide(int2,10,63,0);
			d(i) = int2-10*int_temp;
			int2 = int_temp;
			substr(temp_string,22-i,1) = digit(d(i));
		     end;

		     substring = substring||substr(temp_string,1,19);
		     if substr(substring,5,1) = "0"	/* round-off */
		     then do;
			substr(substring,5,1) = digit(1);
			exponent = exponent+1;
		     end;
		end;

		substr(suffix,3,2) = digit(divide(exponent,10,15,0))||digit(mod(exponent,10));
		substring = substring||suffix;
end_float:	
	     end;

/*  */

	     else if type = 9 | type = 10		/*  for real decimal; 9 = fixed, 10 = float */
	     then do;
		cv_chars = "";
		size = size + 1;			/* account for leading sign */
		if type = 10
		then do;
		     ch = substr(p->based_char_string,size+1,1); /* pick off exponent from number */
exponent = fixed(unspec(ch),9);
		     if exponent >= 128 then exponent = exponent - 256; /* normalize from 8 bit representation */
		     cv_chars = convert_binary_integer_$decimal_string((exponent));
		     cv_chars = "e"||cv_chars;
		end;
		do jj = 2 to size while(substr(p->based_char_string,jj,1) = "0");
		end;
		if jj = size+1
		then do;
		     jj = size;
		     cv_chars = "";
		end;
		ch = substr(p->based_char_string,1,1);
		if ch ^= "-" then ch = "";
		l = size-jj+1;
		substring = "  "||ch||substr(p->based_char_string,jj,l)||cv_chars;
	     end;
						/*  */
	     else if type = 13			/* pointer datum */
	     then do;
		cv_chars = convert_binary_integer_$octal_string(fixed(pointer.segno,35));
		substring = "  "||cv_chars||"|";
		cv_chars = convert_binary_integer_$octal_string(fixed(pointer.offset,35));
		substring = substring||cv_chars;

		if pointer.bit_offset ^= (9)"0"b	/* add in bit offset if found */
		then do;
		     cv_chars = convert_binary_integer_$decimal_string(fixed(pointer.bit_offset,9));
		     substring = substring||"("||cv_chars||")";
		end;

	     end;

/*  */
	     else if type = 19 | type = 20		/* for bit strings; 19 = fixed length, 20 = varying */
	     then do;
		if type = 20			/* varying string, get current length */
		then l = addrel(p,-1)->based_fix;
		else l = size;			/* fixed string, get length from descriptor */
		substring = "  """;

		do i = 1 to l;
		     if substr(p->based_bit_string,i,1)
		     then substring = substring||"1";
		     else substring = substring||"0";
		end;

		substring = substring||"""b";
	     end;

/*  */
	     else if type = 21 | type = 22		/* for character strings; 21 = fixed length,22 = varying */
	     then do;
		if type = 22			/* varying string, get current length */
		then l = addrel(p,-1)->based_fix;
		else l = size;			/* fixed string, get length from descriptor */

		if l = 0
		then do;
		     substring = "  """"";
		end;
		else do;
		     substring = "  "||substr(p->based_char_string,1,l);
		end;
	     end;

/*  */
	     else do;				/* illegal descripter type */
		call com_err_(0,proc_name,"Unhandled data-type ^d for argument ^d. It will be replaced by XXX",type,j);
		substring = "  XXX";
	     end;

	     if length(string)+length(substring) > 131	/* if length of output string exceeded */
	     then do;
		call ios_$write_ptr(addr(string),0,length(string)); /* write what you've got */
		string = substring;			/* and begin a new output string */
	     end;
	     else do;				/* no overflow, concatenate substring */
		string = string||substring;		/* add argument to print-out string */
	     end;

	end;					/* end of do loop for processing arguments */

	if nl_is_required
	then do;
	string = string || nl;/* add on a new line character*/
	end;

	call ios_$write_ptr(addrel(addr(string),1),0,length(string));

     end write_list_;
