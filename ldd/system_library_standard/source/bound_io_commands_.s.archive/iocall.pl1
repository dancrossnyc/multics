/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


	/*	IOCALL -
		This command allows the user to make calls directly to the I/O system from
			command level. The following I/O calls are provided:

			attach
			detach
			read
			write
			seek
			tell
			setsize
			getsize
			abort
			order
			changemode
			resetread
			resetwrite
			readsync
			writesync
			worksync

		In addition the entry checkstatus is provided so that an I/O system
			caller may interpret the status returned from an I/O call.

		Originally coded by R. J. Feiertag on February 21, 1970 due to unremitting
			pressure.							*/
	/*	Modified on April 8, 1971 by R. J. Feiertag to add some new calls.		*/

iocall:	proc;

dcl whoami char(8) static aligned init("iocall");

	/*	AUTOMATIC VARIABLES */

	dcl (l1,l2,l3,l4,l5) fixed bin(17),	/* arg lengths */
	    (p1,p2,p3,p4,p5) ptr,		/* arg pointers */
	    statusp ptr,			/* pointer to status string */
	    call_name char(l1) based(p1),	/* the name of the I/O call */
	    command_name char(32) init(whoami),		/* name of this command */
	    ioname char(l2) based(p2),	/* the stream name for this call */
	    arg3 char(l3) based(p3),		/* third arg */
	    arg4 char(l4) based(p4),	/* fourth arg */
	    arg5 char(l5) based(p5),		/* fifth arg */
	    count fixed bin(17),	/* the number of arguments for this call */
	    mode char(128),		/* the mode to be passed to the I/O system */
	    pos fixed bin,		/* position in mode string */
	    old_mode char(128),	/* the previous mode of this device */
	    old_status bit(72) aligned,	/* a previous status string */
	    limit fixed bin,	/* the limit of readahead or writebehind */
	    status bit(72) aligned,		/* the status string returned by the I/O system */
	    ioname2 char(32),	/* the detach id for a detach call */
	    path char(168),		/* the path name of a segment */
	    dir char(168),		/* the directory of a segment */
	    entry char(32),		/* the name of a segment */
	    code fixed bin(35),	/* error code */
	    segptr ptr,		/* pointer to a segment */
	    offset fixed bin(17),	/* an offset from the beginning of a segment */
	    nelem fixed bin(17),	/* the number of elements to be read or written */
	    bit_count fixed bin(24),	/* bit-count from hcs_$initiate_count */
	    nelemt fixed bin(17),	/* the number of elements read or written */
	    ptrname2 char(32),
	    element_size fixed bin(17),	/* the size in bits of an element */
	    name char(32);		/* the stream name */

	dcl 1 s based(statusp) aligned,
		2 code fixed bin(17),	/* error code */
		2 comp bit(5) unaligned,
		2 p1 bit(4) unaligned,
		2 eof bit(1) unaligned,	/* end of file */
		2 p2 bit(4) unaligned,
		2 abs bit(1) unaligned,	/* device absent */
		2 det bit(1) unaligned,	/* detached */
		2 quit bit(1) unaligned,	/* quit detected */
		2 abort bit(1) unaligned,	/* transaction aborted */
		2 p3 bit(18) unaligned;

	/*	EXTERNAL DATA */

	dcl (error_table_$noarg fixed bin(35),
	     sys_info$max_seg_size fixed bin) ext;	/* # of pages/segment */

	/*	EXTERNAL ENTRIES */

	dcl cu_$arg_ptr ext entry(fixed bin(17),ptr,fixed bin(17),fixed bin(35)),
	    expand_path_ ext entry(ptr,fixed bin(17),ptr,ptr,fixed bin(35)),
	hcs_$make_seg entry(char(*), char(*), char(*), fixed bin(5), ptr, fixed bin(35)),
	hcs_$initiate_count entry(char(*), char(*), char(*), fixed bin(24), fixed bin, ptr, fixed bin(35)),
	hcs_$set_bc entry(char(*), char(*), fixed bin(24), fixed bin(35)),
	cv_dec_check_ entry(char(*), fixed bin(35), fixed bin),
	    (com_err_, ioa_) entry options(variable);

dcl	ios_$attach entry(char(*), char(*), char(*), char(*), bit(72) aligned), 
	ios_$detach entry(char(*), char(*), char(*), bit(72) aligned), 
	ios_$read entry(char(*), ptr, fixed bin, fixed bin, fixed bin, bit(72) aligned), 
	ios_$write entry(char(*), ptr, fixed bin, fixed bin, fixed bin, bit(72) aligned), 
	ios_$seek entry(char(*), char(*), char(*), fixed bin, bit(72) aligned), 
	ios_$tell entry(char(*), char(*), char(*), fixed bin, bit(72) aligned), 
	ios_$setsize entry(char(*), fixed bin, bit(72) aligned), 
	ios_$getsize entry(char(*), fixed bin, bit(72) aligned), 
	ios_$order entry(char(*), char(*), ptr, bit(72) aligned), 
	ios_$changemode entry(char(*), char(*), char(*), bit(72) aligned), 
	ios_$resetread entry(char(*), bit(72) aligned), 
	ios_$resetwrite entry(char(*), bit(72) aligned), 
	ios_$abort entry(char(*), bit(72) aligned, bit(72) aligned), 
	ios_$readsync entry(char(*), char(*), fixed bin, bit(72) aligned), 
	ios_$writesync entry(char(*), char(*), fixed bin, bit(72) aligned), 
	ios_$worksync entry(char(*), char(*), char(*), bit(72) aligned);

dcl (addr, bin, divide, length, null, substr) builtin;

/**/

	statusp = addr(status);
	call cu_$arg_ptr(1,p1,l1,code); /* get call name */
	if code ^= 0 then go to bad_args;
	call cu_$arg_ptr(2,p2,l2,code); /* get ioname */
	if code ^= 0 then go to bad_args;
	call cu_$arg_ptr(3,p3,l3,code); /* get third arg */
	if code ^= 0 then count = 2; /* remember which is last arg */
	 else do;
		call cu_$arg_ptr(4,p4,l4,code);
		if code ^= 0 then count = 3; /* remember last arg */
		 else do;
			call cu_$arg_ptr(5,p5,l5,code);
			if code ^= 0 then count = 4;
			 else count = 5;
			end;
		end;
	if call_name = "attach" then do;	/* this is an attach call */
		if count < 4 then go to bad_args;
		mode = ""; /* initialize mode string */
		pos = 1; /* start from beginning of mode string */
		do count = 6 by 1 while(code = 0); /* process remaining arguments */
			substr(mode,pos,l5) = arg5; /* place next mode in mode string */
			pos = pos + l5 + 1; /* update position in mode string */
			call cu_$arg_ptr(count,p5,l5,code); /* pick up next argument */
			if code = 0 then substr(mode,pos-1,1) = ","; /* insert delimiter in mode string */
			end;
		call ios_$attach(ioname,arg3,arg4,mode,status);	/* make attach call */
		end;
	 else if call_name = "detach" then do;	/* detach call */
		if count = 2 then ioname2,mode = "";
		 else if count = 3 then do;
			ioname2 = arg3;
			mode = "";
			end;
		  else if count = 4 then do;
			ioname2 = arg3;
			mode = arg4;
			end;
		   else go to bad_args;
		call ios_$detach(ioname,ioname2,mode,status); /* make detach call */
		end;
	 else if call_name = "read" then do; /* read call */
		if count < 3 | count > 5 then go to bad_args;
		path = arg3;	/* align for expand_path_ */
		call expand_path_(addr(path),length(arg3),addr(dir),addr(entry),code);
			/* get the directory and entry */
		if code ^= 0 then go to path_err;
		call hcs_$make_seg(dir,entry,"",01011b,segptr,code);
			/* create the segment */
		if segptr = null then go to path_err;
		call ios_$getsize(ioname,element_size,status); /* get element size */
		if substr(status,1,36) ^= "0"b then element_size = 9; /* if can't get element size assume 9 */
		if count = 3 then do; /* set up args */
			offset = 0;
			nelem = divide(sys_info$max_seg_size * 36, element_size, 17, 0);
			end;
		 else if count = 4 then do;
			offset = 0;
			call cv_dec_check_(arg4, code, nelem); /* convert count */
			if code ^= 0
			then /* ! */
nelem_4:			     call num_err(arg4, "nelem");
			end;
		  else if count = 5 then do;
			call cv_dec_check_(arg4, code, offset);
			if code ^= 0
			then /* ! */
offset_4:			     call num_err(arg4, "offset");
			call cv_dec_check_(arg5, code, nelem);
			if code ^= 0
			then /* ! */
nelem_5:			     call num_err(arg5, "nelem");
			end;
		call ios_$read(ioname,segptr,offset,nelem,nelemt,status); /* make read call */
		if s.code = 0 then do; /* no problems */
			call hcs_$set_bc(dir,entry,nelemt*element_size,code);	/* set segment bit count */
			if code ^= 0 then
				call ioa_("iocall: Unable to set bit count for segment. ^a",path);
			call ioa_("The number of elements read is ^d.",nelemt);
			end;
		end;
	 else if call_name = "write" then do;	/* write call */
		if count < 3 | count > 5 then go to bad_args;
		path = arg3;	/* align for expand_path_ */
		call expand_path_(addr(path),length(arg3),addr(dir),addr(entry),code);
			/* process path name */
		if code ^= 0 then go to path_err;
		call hcs_$initiate_count(dir,entry,"",bit_count,1,segptr,code);
			/* get pointer to segment */
		if segptr = null then go to path_err;
		call ios_$getsize(ioname,element_size,status); /* get element size */
		if substr(status,1,36) then element_size = 9; /* if can't get element size assume 9 */
		if count = 3 then do;	/* set up args */
			offset = 0;
			nelem = divide(bit_count,element_size,17,0); /* get element count */
			nelemt = nelem * element_size;		/* Calc # bits to be sent */
			bit_count = bit_count - nelemt;
			if bit_count ^= 0
			then call ioa_("^d bits at bit-offset ^d not transmitted to device ^a",
				bit_count, nelemt, ioname);
			end;
		 else if count = 4 then do;
			offset = 0;
			call cv_dec_check_(arg4, code, nelem);
			if code ^= 0
			then go to nelem_4;
			end;
		  else if count = 5 then do;
			call cv_dec_check_(arg4, code, offset);
			if code ^= 0
			then go to offset_4;
			call cv_dec_check_(arg5, code, nelem);
			if code ^= 0
			then go to nelem_5;
			end;
		call ios_$write(ioname,segptr,offset,nelem,nelemt,status); /* make write call */
		if s.code = 0 then call ioa_("The number of elements written is ^d.",nelemt);
		end;
	 else if call_name = "seek" then do; /* seek call */
		if count = 3 then do; /* set up args */
			ptrname2 = "first";
			offset = 0;
			end;
		 else if count = 4 then do;
			ptrname2 = arg4;
			offset = 0;
			end;
		  else if count = 5 then do;
			ptrname2 = arg4;
			call cv_dec_check_(arg5, code, offset);
			if code ^= 0
			then call num_err(arg5, "offset");
			end;
		   else go to bad_args;
		call ios_$seek(ioname,arg3,ptrname2,offset,status);	/* make seek call */
		end;
	 else if call_name = "tell" then do;	/* tell call */
		if count = 3 then ptrname2 = "first";	/* set up args */
		 else if count = 4 then ptrname2 = arg4;
		  else go to bad_args;
		call ios_$tell(ioname,arg3,ptrname2,offset,status);	/* make tell call */
		if s.code = 0 then call ioa_("Offset is ^d.",offset);
		end;
	 else if call_name = "setsize" then do; /* setsize call */
		if count ^= 3 then go to bad_args;
		call cv_dec_check_(arg3, code, element_size); /* convert element size */
		if code ^= 0
		then call num_err(arg3, "element_size");
		call ios_$setsize(ioname,element_size,status); /* make setsize call */
		end;
	 else if call_name = "getsize" then do; /* getsize call */
		if count ^= 2 then go to bad_args;
		call ios_$getsize(ioname,element_size,status); /* make getsize call */
		if s.code = 0 then call ioa_("Element size is ^d.",element_size); /* tell user the element size */
		end;
	 else if call_name = "order" then do; /* order call */
		if count ^= 3 then go to bad_args;
		call ios_$order(ioname,arg3,null,status); /* make order call */
		end;
	 else if call_name = "changemode" then do; /* changemode call */
		mode = ""; /* initialize mode string */
		if count >= 3 then code = 0; /* we have at least three arguments */
		pos = 1; /* start at beginning of mode string */
		do count = 4 by 1 while(code = 0); /* process remaining arguments */
			substr(mode,pos,l3) = arg3; /* add mode to mode string */
			pos = pos + l3 + 1; /* update position in mode string */
			call cu_$arg_ptr(count,p3,l3,code); /* get next argument */
			if code = 0 then substr(mode,pos-1,1) = ","; /* insert mode delimiter */
			end;
		call ios_$changemode(ioname,mode,old_mode,status); /* issue changemode call */
		if s.code = 0 then call ioa_("Mode changed from ^a",old_mode); /* tell user old mode */
		end;
	 else if call_name = "resetread" then do; /* resetread call */
		if count ^= 2 then go to bad_args;
		call ios_$resetread(ioname,status); /* issue resetread call */
		end;
	 else if call_name = "resetwrite" then do; /* resetwrite call */
		if count ^= 2 then go to bad_args;
		call ios_$resetwrite(ioname,status); /* issue resetwrite call */
		end;
	 else if call_name = "abort" then do; /* abort call */
		if count ^= 2 then go to bad_args;
		old_status = ""b; /* abort all transactions */
		call ios_$abort(ioname,old_status,status); /* issue abort call */
		end;
	 else if call_name = "readsync" then do; /* readsync call */
		if count = 3 then limit = bin(131071, 17); /* set high limit for default */
		 else if count = 4 then do;
			call cv_dec_check_(arg4, code, limit); /* else set given limit */
			if code ^= 0
			then /* ! */
limit_4:			     call num_err(arg4, "limit");
			end;
		  else go to bad_args;
		call ios_$readsync(ioname,arg3,limit,status); /* issue readsync call */
		end;
	 else if call_name = "writesync" then do; /* writesync call */
		if count = 3 then limit = bin(131071, 17); /* set high default limit */
		 else if count = 4 then do;
			call cv_dec_check_(arg4, code, limit); /* else set given limit */
			if code ^= 0
			then go to limit_4;
			end;
		  else go to bad_args;
		call ios_$writesync(ioname,arg3,limit,status); /* issue writesync call */
		end;
	 else if call_name = "worksync" then do; /* worksync call */
		if count ^= 3 then go to bad_args;
		call ios_$worksync(ioname,arg3,"",status); /* issue worksync call */
		end;
	 else do;
		call ioa_("iocall: The ^a call to the I/O system is not permitted by iocall.",call_name);
		return;
		end;
	name = ioname;
	go to status_check; /* go interpret status */

path_err:	call com_err_(code,whoami,path);	/* report error to user */
	return;


bad_args:	call com_err_(error_table_$noarg,whoami,""); /* incorrect number of args */
	return;

	/* This entry point interprets a status string */

checkstatus:	entry(input_status);

	dcl input_status bit(72) aligned;

	name = "";
	statusp = addr(status);
	status = input_status;
	command_name = "I/O Error";
status_check:
	/* print out status interpretation */
	if s.code ^= 0 then call com_err_(s.code,command_name,name);
	if s.eof then call ioa_("^a at end of file.",name);
	if s.abs then call ioa_("^a device absent.",name);
	if s.det then call ioa_("^a device detached.",name);
	if s.quit then call ioa_("^a quit detected.",name);
	if s.abort then call ioa_("^a transaction aborted.",name);

num_err: proc(str, id);

dcl (str, id) char(*);

	call com_err_(0, whoami, "Non-numeric digits in ^a argument to ^a request: ^a", id, call_name, str);

	go to end_iocall;

end;

end_iocall:
end iocall;
