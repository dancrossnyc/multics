/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


get_mode: procedure options (variable);			/* COMMAND AF */

/* A Command/AF to extract a mode value from a mode string
   James R. Davis Oct 80  MCR 4712
*/
/* Sept 1983 C Spitzer. Change to arg processing such that if 2nd arg is
        missing, the AF return arg is not used.*/

	dcl     mode_str		 char (mode_str_len) based (mode_str_ptr);
	dcl     mode_str_len	 fixed bin (21);
	dcl     mode_str_ptr	 ptr;

	dcl     mode_name		 char (mode_name_len) based (mode_name_ptr);
	dcl     mode_name_len	 fixed bin (21);
	dcl     mode_name_ptr	 ptr;

	dcl     af_result		 char (afl) varying based (afp);
	dcl     afl		 fixed bin (21);
	dcl     afp		 ptr;

	dcl     1 mv		 aligned like mode_value;

	dcl     nargs		 fixed bin,
	        code		 fixed bin (35),
	        active		 bit (1) aligned,
	        result		 char (66);

	dcl     complainer		 entry variable options (variable);

	dcl     myname		 char (32) internal static init ("get_mode") options (constant);

	dcl     mode_string_$get_mode	 entry (char (*), char (*), ptr, fixed bin (35));

	dcl     requote_string_	 entry (char (*)) returns (char (*));

	dcl     active_fnc_err_	 entry () options (variable);
	dcl     com_err_		 entry () options (variable);
	dcl     ioa_		 entry () options (variable);

	dcl     cu_$af_return_arg	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));

	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));

	dcl     error_table_$not_act_fnc fixed bin (35) external static;
	dcl     error_table_$too_many_args fixed bin (35) external static;
	dcl     error_table_$noarg fixed bin(35) ext static;

	dcl     addr builtin;
%page;
	complainer = com_err_;			/* default */
	active = "0"b;
	call cu_$af_return_arg (nargs, afp, afl, code);
	if code = 0 then do;
		active = "1"b;
		af_result = "";
		complainer = active_fnc_err_;
	     end;
	else if code = error_table_$not_act_fnc then
	     code = 0;
	else goto USAGE;

	if nargs > 2 then do;
		code = error_table_$too_many_args;
		goto USAGE;
	     end;
	else if active & nargs < 2 then do;
		code = error_table_$noarg;
		goto USAGE;
		end;

	call cu_$arg_ptr (1, mode_str_ptr, mode_str_len, code);
	if code ^= 0 then goto USAGE;
	call cu_$arg_ptr (2, mode_name_ptr, mode_name_len, code);
	if code ^= 0 then goto USAGE;

	mv.version = mode_value_version_3;

	call mode_string_$get_mode (mode_str, mode_name, addr (mv), code);
	if code ^= 0 then do;
		call complainer (code, myname, "^a in ^a", mode_name, mode_str);
		return;
	     end;

	if mv.boolean_valuep
	then if mv.boolean_value
	     then result = "true";
	     else result = "false";
	else if mv.numeric_valuep
	then result = mv.char_value;
	else result = requote_string_ ((mv.char_value));

	if active then af_result = result;
	else call ioa_ ("^a", result);
	return;

USAGE:	call complainer (code, myname,
	     "Usage:  ^[[^]^a MODE-STR MODE-NAME^[]^]",
	     active, myname, active);
	return;
%page;
%include mode_string_info;
     end get_mode;
