/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This program is called by enter_output_request.  eor stored user-defined default	*/
	/* control argument settings in the default value segment as binary data values.  This	*/
	/* program converts these values from version 5 to version 6 format.  The only		*/
	/* difference between versions is that version 5 makes no constraints on the names of	*/
	/* these groups of defaults.  Version 6 disallows names which begin with a hyphen or	*/
	/* contain * or ? characters.							*/
	/*									*/
	/* Status:								*/
	/* Created:    June 2, 1982 by G. C. Dixon					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

eor_cv5_6_:
	proc(Pdefault_header, code);

    dcl	Pdefault_header		ptr,
	code			fixed bin(35);

    dcl	Pd			ptr,
	answer			char(28) varying,
	area			area(4096),
	dft_name			char(28) varying,
	d_size			fixed bin(18),
	i			fixed bin,
	unseen(2)			bit(1) aligned,
	unseen_overall_reason	bit(1);

    dcl	1 default_header		aligned based(Pdefault_header),
	  2 version		fixed bin,	/* structure containing default request types and */
	  2 default_request_type (3)	char(24) unal,	/* defining version of default_(print punch)	*/
						/* structures above.  The default_request_type	*/
						/* array elements are for printing, punching and	*/
	Vdefault_header_6		fixed bin int static options(constant) init(6),
						/* Version 6 de-supports default names beginning	*/
						/*   with hyphen or which are starnames.	*/
	1 default,
	  2 header,
	    3 Ntype		fixed bin,	/* This structure holds information corresponding */
	    3 name		char(24) unal,	/*   to the O, S, N and PLS structures above, in	*/
	    3 size		fixed bin(18),	/*   the form in which it is stored as 		*/
	1 d			aligned based(Pd),
	  2 header		like default.header,
	  2 data (d_size - size(default))
				fixed bin;

    dcl  (addr, after, empty, index, length, null, search, size, substr, translate)
				builtin;

    dcl	command_query_		entry() options(variable),
	ioa_$ioa_switch		entry() options(variable),
	value_$delete_data		entry (ptr, bit(36) aligned, char(*), fixed bin(35)),
	value_$get_data		entry (ptr, bit(36) aligned, char(*), ptr, ptr, fixed bin(18),
				     fixed bin(35)),
	value_$list_data_names	entry (ptr, bit(36) aligned, ptr, ptr, ptr, fixed bin(35)),
	value_$set_data		entry (ptr, bit(36) aligned, char(*), ptr, fixed bin(18), ptr, ptr,
				     fixed bin(18), fixed bin(35));

    dcl	AZ			char(26) int static options(constant)
				     init("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
	DEFAULT_VALUE_SEG		ptr int static options(constant) init(null),
         (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant),
	PERM			bit(36) aligned int static options(constant) init("01"b),
	az			char(26) int static options(constant)
				     init("abcdefghijklmnopqrstuvwxyz"),
	iox_$user_io		ptr ext static,
	new_name_explanation	char(58) int static options(constant) init(
"Please give the new name for the ^a group of eor defaults:"),
	rename_explanation		char(250) int static options(constant) init(
"^7sThe enter_output_request user-defined defaults called ^a must be renamed
or deleted because the name is no longer valid.  Please type ""rename"" if you
wish to rename the group of defaults, or ""delete"" if you wish to delete it.
Rename or delete?");

	code = 0;
	unseen_overall_reason = TRUE;			/* Emit error messages like compilers, with each	*/
	unseen(*) = TRUE;				/*   message numbered and message text printed 	*/
						/*   only once.				*/

	mi.name(1) = "eor.**.*._";
	call value_$list_data_names (DEFAULT_VALUE_SEG, PERM, addr(mi),
	   addr(area), value_list_info_ptr, code);	/* Get a list of eor-related data items from value*/
	do i = 1 to value_list_info.pair_count;		/*   seg.  Check name of each one.		*/
	   dft_name = substr(value_list_info.chars,
	      value_list_info.pairs(i).name_index, value_list_info.pairs(i).name_len);
	   dft_name = after(dft_name,".");
	   dft_name = substr(dft_name,1,length(dft_name)-2);
	   if index(dft_name,"-") = 1 then
	      call eliminate (dft_name, 1, "begin with a hyphen");
	   else if search(dft_name, "?*")>0 then
	      call eliminate (dft_name, 2, "be a starname (containing * or ? chars)");
	   end;
	default_header.version = Vdefault_header_6;
	call value_$set_data (DEFAULT_VALUE_SEG, PERM, "eor._",
	   Pdefault_header, size(default_header), null, null, 0, code);
ERROR_EXIT:
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


eliminate:					/* Eliminate bad names by allowing user to choose */
	proc (name, Nerr, reason);			/*   renaming or deleting of the badly-named	*/
						/*   group of defaults			*/

    dcl  (name, reason)		char(*) varying,
	Nerr			fixed bin;

	qi.version = query_info_version_5;
	qi.switches = FALSE;
	qi.switches.yes_or_no_sw = FALSE;
	qi.suppress_name_sw = ^unseen_overall_reason;
	qi.status_code = 0;
	qi.query_code = 0;
	qi.question_iocbp = null;
	qi.answer_iocbp = null;
	qi.repeat_time = 0;

	qi.explanation_ptr = addr(rename_explanation);	/* Ask user whether to rename or delete?	*/
	qi.explanation_len = length(rename_explanation);
REASK_RENAME:
	call command_query_(addr(qi), answer, "enter_output_request",
	   "^[Invalid default name ^a.
^;^s^]ERROR ^d: ^[A default name may not ^a. ^;^s^]^[
This is a change to the naming conventions allowed by eor.  To accomodate this
change, do^s^;  ^a
Do^] you want to rename (rn) or delete (dl) the ^a defaults?",
	   unseen_overall_reason, name,
	   Nerr,
	   unseen(Nerr), reason,
	   unseen_overall_reason, name, name);

	answer = translate (answer, az, AZ);		/* Canonicalize user's answer.		*/
	if answer = "rename" | answer = "rn" | answer = "r" then
	   answer = "rename";
	else if answer = "delete" | answer = "dl" | answer = "d" then
	   answer = "delete";
	else do;
	   call ioa_$ioa_switch (iox_$user_io, "Please answer ""rename"" or ""delete"".");
	   go to REASK_RENAME;
	   end;

	unseen_overall_reason = FALSE;		/* Mark overall reason for change, and this error */
	unseen(Nerr) = FALSE;			/*   as already having been seen.		*/

	if answer = "rename" then do;			/* Renaming?  Ask for the new name and validate it*/
	   qi.explanation_ptr = addr(new_name_explanation);
	   qi.explanation_len = length(new_name_explanation);
	   call command_query_(addr(qi), answer, "enter_output_request",
	      "New name:", name);
ANSWER_CHECK:
	   if length(answer) > 24 then do;
	      call command_query_ (addr(qi), answer, "enter_output_request",
	         "^a is too long.  The new name must be less than 25 characters long.
New name:", answer);
	      go to ANSWER_CHECK;
	      end;
	   else if index(answer,"-")=1 then do;
	      call command_query_ (addr(qi), answer, "enter_output_request",
	         "^a is an illegal name.  The name cannot begin with a hyphen.
New name:", answer);
	      go to ANSWER_CHECK;
	      end;
	   else if search(answer,"*?")>0 then do;
	      call command_query_ (addr(qi), answer, "enter_output_request",
	         "^a is an illegal name.  The name cannot be a starname.
New name:", answer);
	      go to ANSWER_CHECK;
	      end;
	   call value_$get_data (DEFAULT_VALUE_SEG, PERM,
	      "eor." || name || "._", addr(area), Pd, d_size, code);
	   d.name = answer;
	   call value_$delete_data (DEFAULT_VALUE_SEG, PERM, "eor." || name || "._", code);
	   if code ^= 0 then go to ERROR_EXIT;
	   call value_$set_data (DEFAULT_VALUE_SEG, PERM,
	      "eor." || answer || "._", Pd, d_size, null, null, 0, code);
	   if code ^= 0 then go to ERROR_EXIT;
	   free d in (area);
	   end;

	else do;					/* delete					*/
	   call value_$delete_data (DEFAULT_VALUE_SEG, PERM, "eor." || name || "._", code);
	   if code ^= 0 then go to ERROR_EXIT;
	   end;

	end eliminate;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

%include query_info;

    dcl	1 qi			aligned like query_info;

%include value_structures;

    dcl	1 mi			aligned,		/* automatic copy of match_info		*/
	  2 version		fixed bin init(1),
	  2 name_count		fixed bin init(1),
	  2 max_name_length		fixed bin init(30),
	  2 name_array (1),
	    3 exclude_sw		bit(1) unal init("0"b),
	    3 regexp_sw		bit(1) unal init("0"b),
	    3 pad			bit(34) unal init("0"b),
	    3 name		char(30) varying;

	end eor_cv5_6_;
