/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


discard_output:
dco:
     procedure options (variable);

/* This module implements the discard_output command, which discards the
   output from specified I/O switches for the duration of a command line.

   Usage:
	discard_output {-osw switch_name}... command_line

   */

/* Steve Herbst 4/19/77 */


dcl  arg char (arg_len) based (arg_ptr);
dcl  command_line char (cl_len) aligned based (cl_ptr);
dcl  old_command_line char (old_cl_len) aligned based (old_cl_ptr);
dcl  cl_space char (512) aligned init ("");

dcl  command char (14) int static options (constant) init ("discard_output");
dcl  NL char (1) int static options (constant) init ("
");

dcl  area area based (area_ptr);

dcl  cl_allocated bit (1);

dcl (area_ptr, discard_ptr) ptr init (null ());
dcl (arg_list_ptr, arg_ptr, cl_ptr, iocb_ptr, old_cl_ptr) ptr;

dcl (arg_len, cl_len, command_len, old_cl_len) fixed bin (21);
dcl (arg_count, arg_index, iocb_limit, iocb_count, n_saved_iocbs, i) fixed bin;
dcl (code, cp_code) fixed bin (35);

dcl  switch_name char (32);
dcl  syn_attach_desc char (37);

dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$not_attached fixed bin (35) ext static;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  cu_$cp entry (ptr, fixed bin (21), fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$attach_ptr entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin (35));
dcl  iox_$error_output ptr ext;
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$look_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$move_attach entry (ptr, ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1), fixed bin (35));
dcl  iox_$user_output ptr ext;
dcl  unique_chars_ entry (bit (*)) returns (char (15));

dcl (addr, divide, length, null, substr) builtin;

dcl  cleanup condition;

%include iox_modes;

	call cu_$arg_count (arg_count);
	if arg_count = 0 then do;
USAGE:	     call com_err_ (0, command,
		"Usage:  discard_output {-osw switchname}... command_line");
	     return;
	end;

	iocb_count, command_len = 0;
	iocb_limit = divide (arg_count, 2, 17, 0)+1;
	cl_ptr = addr (cl_space);
	cl_len = length (cl_space);
	cl_allocated = "0"b;
	call cu_$arg_list_ptr (arg_list_ptr);
	arg_index = 1;

	begin;

dcl  iocbp (iocb_limit) pointer;			/* IOCB's to discard */
dcl  iocb_name (iocb_limit) char (32);			/* names of the switches */
dcl  saved_iocb (iocb_limit) pointer;			/* IOCB's of saved attachments */
dcl  was_detached (iocb_limit) bit (1) aligned;		/* ON if switch was not attached to begin with */


	     n_saved_iocbs = 0;			/* haven't saved anything yet */
	     on condition (cleanup) call clean_up;

NEXT_OS:	     call cu_$arg_ptr_rel (arg_index, arg_ptr, arg_len, code, arg_list_ptr);
	     if code ^= 0 then go to USAGE;
	     if substr (arg, 1, 1) = "-" then
		if arg = "-osw" | arg = "-output_switch" then do;
		     call cu_$arg_ptr_rel (arg_index+1, arg_ptr, arg_len, code, arg_list_ptr);
		     if code ^= 0 then go to USAGE;
		     call iox_$look_iocb (arg, iocb_ptr, code);
		     if iocb_ptr = null () then do;
			call com_err_ (code, command, "^a", arg);
			return;
		     end;
		     iocb_count = iocb_count+1;
		     iocbp (iocb_count) = iocb_ptr;
		     iocb_name (iocb_count) = arg;
		     arg_index = arg_index+2;
		     go to NEXT_OS;
		end;
		else do;				/* no other control args allowed */
		     call com_err_ (error_table_$badopt, command, "^a", arg);
		     return;
		end;
	     else call grow_command_line ();		/* start of command line arguments */

	     do arg_index = arg_index+1 to arg_count;	/* pick up rest of command line */
		call cu_$arg_ptr_rel (arg_index, arg_ptr, arg_len, code, arg_list_ptr);
		call grow_command_line ();
	     end;

	     if iocb_count = 0 then do;
		iocb_count = 1;
		iocbp (iocb_count) = iox_$user_output;	/* default I/O switch */
		iocb_name (iocb_count) = "user_output";
	     end;


/* Create a switch to use to discard output of specified switches */

	     switch_name = "dco_" || unique_chars_ ("0"b); /* create name of switch */
	     syn_attach_desc = "syn_ " || switch_name;	/* and attach description for discarded switches */

	     call iox_$attach_name (switch_name, discard_ptr, "discard_", null (), code); /* attempt to attach it */
	     if code ^= 0 then do;
		call com_err_ (code, command, "Attempting to attach ^a.", switch_name);
		call clean_up;
		return;
	     end;

	     call iox_$open (discard_ptr, Stream_output, "0"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, command, "Attempting to open ^a.", switch_name);
		call clean_up ();
		return;
	     end;


/* Save attachments of switches to be discarded and attach them to discard_
   switch */

	     do i = 1 to iocb_count;
		switch_name = "dco_save_" || unique_chars_ ("0"b);
		call iox_$find_iocb (switch_name, saved_iocb (i), code);
		if code ^= 0 then do;
		     call clean_up ();		/* insure error_output is alright */
		     call com_err_ (code, command, "^a", switch_name);
		     return;
		end;
		call iox_$move_attach (iocbp (i), saved_iocb (i), code);
		if code = 0
		then was_detached (i) = "0"b;		/* have saved something */
		else if code = error_table_$not_attached
		then was_detached (i) = "1"b;		/* not attached */
		else do;
		     call clean_up ();
		     call com_err_ (code, command, "Saving attachment of ^a.", iocb_name (i));
		     return;
		end;
		n_saved_iocbs = n_saved_iocbs + 1;	/* have now saved the attachment */
		call iox_$attach_ptr (iocbp (i), syn_attach_desc, null (), code); /* attach to discard_ */
		if code ^= 0 then do;
		     call clean_up ();
		     call com_err_ (code, command, "Attaching ^a.", switch_name);
		     return;
		end;
	     end;


/* Call the command processor */

	     substr (command_line, command_len, 1) = NL;

	     call cu_$cp (addr (command_line), command_len, cp_code);

	     call clean_up ();
	     revert cleanup;

	     if (cp_code ^= 0) & (cp_code ^= 100) then do; /* have to print message? */
		do i = iocb_count by -1 to 1 while (iocbp (i) ^= iox_$error_output); end;
		if i ^= 0 then call com_err_ (cp_code, command, "Returned by command_processor_.");
	     end;


grow_command_line:
	     procedure ();

/* This internal procedure adds arg to the end of command_line */

		if command_len + arg_len + 1 > cl_len then do; /* need more space */
		     old_cl_ptr = cl_ptr;
		     old_cl_len = cl_len;
		     cl_len = 2 * cl_len;
		     if area_ptr = null () then area_ptr = get_system_free_area_ ();
		     allocate command_line in (area) set (cl_ptr);
		     command_line = old_command_line;
		     if cl_allocated then free old_cl_ptr -> command_line in (area);
		     else cl_allocated = "1"b;
		end;

		substr (command_line, command_len + 1) = arg;
		command_len = command_len + arg_len + 1;

	     end grow_command_line;


clean_up:
	     procedure ();

/* This internal procedure restores attachments to their previous state */

		do i = 1 to n_saved_iocbs;		/* restore each saved attachment */
		     call iox_$detach_iocb (iocbp (i), code); /* detach it from discard_ */
		     if was_detached (i) then;	/* it was detached to start with */
		     else call iox_$move_attach (saved_iocb (i), iocbp (i), code);
		     call iox_$destroy_iocb (saved_iocb (i), code); /* get rid of temp IOCB */
		end;

		if discard_ptr ^= null () then do;	/* get rid of discard_ IOCB */
		     call iox_$close (discard_ptr, code);
		     call iox_$detach_iocb (discard_ptr, code);
		     call iox_$destroy_iocb (discard_ptr, code);
		end;

		if cl_allocated			/* free copy of command line */
		then free command_line in (area);

	     end clean_up;

	end;					/* of begin block */

     end discard_output;
