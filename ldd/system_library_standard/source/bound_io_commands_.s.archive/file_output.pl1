/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


file_output:
fo:
     procedure () options (variable);

/* This module implements the file_output, terminal_output and
   revert_output commands. Both file_output and terminal_output push
   a stack of attachments. The revert_output command pops the latest
   attachment for a specified switch. revert_output -all pops the
   entire stack.

   Usage:
   file_output {path} {-ssw switchname}... {-truncate|-extend}
   terminal_output {-ssw switchname}...
   revert_output {-all} {-ssw switchname}...
   syn_output target_sw {-ssw source_switchname}...

   If no switchnames are specified, the default is user_output.
   revert_output -all reverts all switches, unless one is specified.
   */

/* Written 4/5/77 by Steve Herbst */
/* Modified 07/14/77 by G. Palter to work properly */
/* Modified 08/77 by B. Greenberg for syn_output */
/* Modified 06/78 by M. R. Jordan for -truncate and -extend */
/* test for invalid entrynames 04/18/79 S. Herbst */
/* Modified 10/82 by Linda Pugh to attach switch to segment containing
   a space in its name */

dcl 1 node aligned based (p),				/* node in list of saved attachments */
    2 next ptr,
    2 last ptr,
    2 this_iocb ptr,				/* ptr to saved IOCB */
    2 fo_def_ptr ptr,				/* ptr to definition of file_output_n for new attachment */
    2 saved_iocb ptr,				/* pointer to iocb where attachment moved */
    2 was_detached bit (1) aligned;			/* ON if switch not already attached */

dcl 1 fo_def aligned based,				/* definition of an file_output_n attachment */
    2 fo_ptr ptr,					/* ptr to file_output_n IOCB */
    2 ref_count fixed bin;				/* number of IOCB's syn'ed to this one */

dcl  area area based (area_ptr);

dcl  arg char (arg_len) based (arg_ptr);
dcl  attach_description char (200);
dcl  file_path char (168);
dcl (switch_name, target_name, save_name) char (32);	/* names of output I/O switches */
dcl  command char (32);				/* name of command entry point called */

dcl  ips_mask bit (36);				/* mask for disabling quits, etc. */
dcl (file, terminal, revert) bit (1) init ("0"b);		/* ON for fo, to, and ro */
dcl  syn_entry bit (1) init ("0"b);			/* ON for so */
dcl  console bit (1) init ("0"b);			/* ON for console_output (obsolete) */
dcl  all bit (1);					/* ON for revert_output -all */
dcl  all_switches bit (1);				/* ON for same without osw's */
dcl  found_one bit (1);				/* found a saved attachment to restore */
dcl  path_given bit (1);				/* pathname specified to file_output */
dcl  truncate bit (1);				/* truncate the output file */

dcl  area_ptr ptr int static init (null ());		/* for allocations */
dcl  new_fo_def_ptr ptr;				/* ptr to file_output_n definition */
dcl  new_fo_ptr ptr;				/* ptr to file_output_n IOCB */
dcl (first_p, last_p) ptr int static init (null ());	/* ptrs to threaded list of nodes */
dcl (p, prev_p) ptr;
dcl (arg_list_ptr, arg_ptr, iocb_ptr) ptr;

dcl (arg_count, i, iocb_count, iocb_limit) fixed bin;
dcl  last_processed fixed bin;			/* last IOCB saved/restored for cleanup */
dcl  arg_len fixed bin (21);
dcl  code fixed bin (35);
dcl  saved_code fixed bin (35);

dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$badstar fixed bin (35) ext;
dcl  error_table_$nostars fixed bin (35) ext;

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  check_star_name_$path entry (char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  get_system_free_area_ entry returns (ptr);
dcl  hcs_$reset_ips_mask entry (bit (36), bit (36));
dcl  hcs_$set_ips_mask entry (bit (36), bit (36));
dcl  iox_$attach_ptr entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin (35));
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$look_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$move_attach entry (ptr, ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1), fixed bin (35));
dcl  iox_$user_output ptr ext;
dcl  requote_string_ entry (char(*)) returns (char(*));
dcl  unique_chars_ entry (bit (*)) returns (char (15));

dcl (divide, null, rtrim, substr) builtin;

dcl  error_table_$noarg fixed bin (35) external;

dcl  cleanup condition;

%include iox_modes;


/* file_output:
   fo:
   procedure () options (variable);
   */

	command = "file_output";
	file = "1"b;
	file_path = "output_file";
	go to COMMON;


terminal_output:
to:	entry () options (variable);

	command = "terminal_output";
	terminal = "1"b;
	go to COMMON;


revert_output:
ro:	entry () options (variable);

	command = "revert_output";
	revert = "1"b;
	all = "0"b;
	go to COMMON;

syn_output:
so:	entry () options (variable);

	command = "syn_output";
	syn_entry = "1"b;
	go to COMMON;



console_output:
co:	entry () options (variable);			/* Obsolete:  eqv to "revert_output user_output -all" */

	command = "console_output";
	revert, console = "1"b;
	all = "1"b;

COMMON:	iocb_count = 0;
	truncate = "0"b;				/* Default is to extend file */
	path_given = "0"b;				/* no pathname seen yet */
	all_switches = "0"b;
	call cu_$arg_count (arg_count);
	if console & arg_count>0 then do;		/* obsolete */
	     call com_err_ (0, command, "Usage:  console_output");
	     return;
	end;
	call cu_$arg_list_ptr (arg_list_ptr);
	iocb_limit = divide (arg_count, 2, 17, 0)+1;


	begin;

dcl  iocbp (iocb_limit) ptr;
dcl  iocb_name (iocb_limit) char (32);

	     do i = 1 to arg_count;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, arg_list_ptr);
		if substr (arg, 1, 1) = "-" then do;
		     if arg = "-ssw" | arg = "-osw" | arg = "-source_switch" | arg = "-output_switch" then do;
			i = i+1;
			call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, arg_list_ptr);
			if code ^= 0 then do;
			     call com_err_ (code, command, "No value specified for source switch.");
			     return;
			end;
			call iox_$look_iocb (arg, iocb_ptr, code);
			if iocb_ptr = null () then do;
			     call com_err_ (code, command, "^a", arg);
			     return;
			end;
			iocb_count = iocb_count+1;
			iocbp (iocb_count) = iocb_ptr;
			iocb_name (iocb_count) = arg;
		     end;
		     else if revert & (arg = "-a" | arg = "-all") then all = "1"b;
		     else if file & (arg = "-tc" | arg = "-truncate") then truncate = "1"b;
		     else if file & (arg = "-extend") then truncate = "0"b;
		     else do;
			call com_err_ (error_table_$badopt, command, "^a", arg);
			return;
		     end;
		end;
		else if revert then do;
		     call com_err_ (0, command, "Usage:  revert_output {-all} {-ssw switchname}...");
		     return;
		end;
		else if terminal then do;
		     call com_err_ (0, command, "Usage:  terminal_output {-ssw switchname}...");
		     return;
		end;
		else if path_given then do;
		     if file then call com_err_ (0, command,
			"Usage:  file_output {path} {-ssw switchname}... {-truncate|-extend}");
		     else call com_err_ (0, command, "Usage:  syn_output target_switch {-ssw switchname}...");
		     return;
		end;
		else do;
		     path_given = "1"b;
		     file_path = arg;
		end;
	     end;

	     if path_given & file then do;		/* Check pathname for file_output */
		call check_star_name_$path (file_path, code);
		if code ^= 0 then do;
		     if code = error_table_$badstar then call com_err_ (code, command, "^a", file_path);
		     else call com_err_ (error_table_$nostars, command, "^a", file_path);
		     return;
		end;
	     end;

	     if iocb_count = 0 then do;		/* apply default */
		if all & revert & ^console then all_switches = "1"b;
		iocb_count = 1;
		iocbp (1) = iox_$user_output;
		iocb_name (1) = "user_output";
	     end;

	     if syn_entry & ^path_given then do;
		call com_err_ (error_table_$noarg, command, "No target switch given.");
		return;
	     end;



	     if terminal then target_name = "user_i/o";
	     else if syn_entry then do;
		target_name = file_path;
		call iox_$look_iocb (target_name, iocb_ptr, code);
		if code ^= 0 then do;
		     call com_err_ (code, command, target_name);
		     return;
		end;
	     end;
	     else if file then do;
		call absolute_pathname_ ((file_path), file_path, code);
		if code ^= 0 then do;
		     call com_err_ (code, command, "^a", file_path);
		     return;
		end;

		target_name = "fo_" || unique_chars_ ("0"b);
		call iox_$find_iocb (target_name, new_fo_ptr, code);
		if code ^= 0 then do;
		     call com_err_ (code, command, "^a", target_name);
		     return;
		end;

		if truncate then attach_description = "vfile_ " || requote_string_ (rtrim (file_path)) ;
		else attach_description = "vfile_ " || requote_string_ (rtrim (file_path)) || " -extend";
		if ^path_given then			/* Say what's happening */
		     call com_err_ (0, command, "Writing output into ^a. Use revert_output to stop.", file_path);

		call iox_$attach_ptr (new_fo_ptr, attach_description, null (), code);
		if code ^= 0 then do;
		     call com_err_ (code, command, "Unable to attach switch ""^a"" to ^a.", target_name, file_path);
		     call iox_$destroy_iocb (new_fo_ptr, code);
		     return;
		end;
		call iox_$open (new_fo_ptr, Stream_output, "0"b, code);
		if code ^= 0 then do;
		     call com_err_ (code, command, "Unable to open switch ""^a"" for write to ^a.", target_name, file_path);
		     call iox_$detach_iocb (new_fo_ptr, code);
		     call iox_$destroy_iocb (new_fo_ptr, code);
		     return;
		end;
		if area_ptr = null () then area_ptr = get_system_free_area_ ();
		allocate fo_def in (area) set (new_fo_def_ptr);
		new_fo_def_ptr -> fo_def.fo_ptr = new_fo_ptr;
		new_fo_def_ptr -> fo_def.ref_count = 0;
	     end;


	     last_processed = 0;			/* haven't done anything yet */

	     on condition (cleanup) call clean_up ();


	     do i = 1 to iocb_count;

		iocb_ptr = iocbp (i);
		switch_name = iocb_name (i);

		ips_mask = "0"b;

		if revert
		then call restore_attachment ();

		else do;
		     call save_attachment ();

		     call iox_$attach_ptr (iocb_ptr, "syn_ " || target_name, null (), code);
		     if code ^= 0 then do;
			saved_code = code;
			call restore_attachment ();
			call clean_up ();
			call com_err_ (saved_code, command, "^a", switch_name);
			return;
		     end;
		end;

		last_processed = i;
	     end;

	     return;


ABORT:	     call clean_up ();
	     return;


clean_up:	     procedure ();

		if ips_mask ^= "0"b
		then call hcs_$reset_ips_mask ((ips_mask), ips_mask);

		if last_processed ^= 0		/* have done some work */
		then if revert			/* always do reverts regardless */
		     then do i = last_processed + 1 to iocb_count;
			iocb_ptr = iocbp (i);
			call restore_attachment ();
		     end;

		     else				/* not revert: restore what was done */
		     do i = 1 to last_processed;
			iocb_ptr = iocbp (i);
			call restore_attachment ();
		     end;

		return;

	     end clean_up;


save_attachment: procedure ();

/* This internal procedure saves the current attachment of iocb_ptr */

		call hcs_$set_ips_mask ("0"b, ips_mask);

		if area_ptr = null () then area_ptr = get_system_free_area_ ();

		allocate node in (area) set (p);
		p -> node.this_iocb = iocb_ptr;

		save_name = "fo_save_" || unique_chars_ ("0"b);
		call iox_$find_iocb (save_name, p -> node.saved_iocb, code);
		if code ^= 0 then do;
		     call com_err_ (code, command, "^a", switch_name);
		     go to ABORT;
		end;

		call iox_$move_attach (iocb_ptr, p -> node.saved_iocb, code);
		if code = 0
		then p -> node.was_detached = "0"b;
		else p -> node.was_detached = "1"b;

		if file then do;			/* ptr to file_output_n definition */
		     p -> node.fo_def_ptr = new_fo_def_ptr;
		     new_fo_def_ptr -> fo_def.ref_count = new_fo_def_ptr -> fo_def.ref_count + 1;
		end;
		else p -> node.fo_def_ptr = null ();

		p -> node.next = null ();
		if first_p = null () then do;		/* this is the first node saved */
		     first_p = p;
		     p -> node.last = null ();
		end;
		else do;				/* thread to last node */
		     last_p -> node.next = p;
		     p -> node.last = last_p;
		end;
		last_p = p;

		call hcs_$reset_ips_mask ((ips_mask), ips_mask);

		return;

	     end save_attachment;


restore_attachment: procedure ();

/* This internal procedure restores the last or first (-all) saved
   attachment of iocb_ptr and frees the last node or all nodes (-all) */

		if first_p = null () then do;
NOT_FOUND:	     if all_switches then call com_err_ (0, command, "No previous attachments.");
		     else call com_err_ (0, command, "No previous attachment of ^a", switch_name);
		     if ips_mask ^= "0"b then call hcs_$reset_ips_mask ((ips_mask), ips_mask);
		     return;
		end;

/* Find the right saved attachment */

		call hcs_$set_ips_mask ("0"b, ips_mask);

		if all then do;
		     found_one = "0"b;
		     do p = last_p repeat (p -> node.last) while (p ^= null ());
			if p -> node.this_iocb = iocb_ptr | all_switches then do;
			     found_one = "1"b;
			     call restore_iocb ();
			end;
		     end;
		     if ^found_one then go to NOT_FOUND;
		end;
		else do;
		     do p = last_p repeat (p -> node.last) while (p ^= null ());
			if p -> this_iocb = iocb_ptr then go to FOUND;
		     end;
FOUND:		     if p = null () then go to NOT_FOUND;
		     call restore_iocb ();
		end;

/* Free the appropriate nodes */

		if all then do;
		     prev_p = last_p;
		     do p = last_p repeat (prev_p) while (prev_p ^= null ());
			prev_p = p -> node.last;
			if p -> this_iocb = iocb_ptr | all_switches then call rethread ();
		     end;
		end;
		else call rethread ();

		call hcs_$reset_ips_mask ((ips_mask), ips_mask);

		return;


restore_iocb:	procedure ();

/* This procedure internal to restore_attachment restores one iocb */

		     call iox_$detach_iocb (p -> node.this_iocb, code);
		     if ^ (p -> node.was_detached)
		     then call iox_$move_attach (p -> node.saved_iocb, p -> node.this_iocb, code);
		     call iox_$destroy_iocb (p -> node.saved_iocb, code);

		     return;

		end restore_iocb;

	     end restore_attachment;


rethread:	     procedure ();

		if p = first_p then do;
		     first_p = p -> node.next;
		     if first_p ^= null () then first_p -> node.last = null ();
		     else last_p = null ();
		end;
		else if p = last_p then do;
		     last_p = p -> node.last;
		     if last_p ^= null () then last_p -> node.next = null ();
		     else first_p = null ();
		end;
		else do;
		     p -> node.next -> node.last = p -> node.last;
		     p -> node.last -> node.next = p -> node.next;
		end;

		if p -> node.fo_def_ptr ^= null () then do; /* was replaced by an fo attachment */
		     p -> node.fo_def_ptr -> fo_def.ref_count = p -> node.fo_def_ptr -> fo_def.ref_count - 1;
		     if p -> node.fo_def_ptr -> fo_def.ref_count = 0 then do; /* this file_output_n is unused */
			call iox_$close (p -> node.fo_def_ptr -> fo_def.fo_ptr, code);
			call iox_$detach_iocb (p -> node.fo_def_ptr -> fo_def.fo_ptr, code);
			call iox_$destroy_iocb (p -> node.fo_def_ptr -> fo_def.fo_ptr, code);
			free p -> node.fo_def_ptr -> fo_def in (area);
		     end;
		end;

		free p -> node in (area);

		return;

	     end rethread;

	end;					/* end begin block */


     end file_output;
