/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Procedure use by the io_call command to print the IOCB in a readable form */

/* Extracted from the main command May 1977 by Larry Johnson */
/* Modified 1/83 by S. Krupp to print version 2 iocb. */

io_call_print_iocb_: proc (iocb_ptr);

/* Parameters */

dcl  iocb_ptr ptr;

/* Automatic */

dcl  i fixed bin;
dcl  code fixed bin (35);
dcl  dir char (168);
dcl  ename char (32);
dcl  p ptr;					/* Pointer with short name to point to IOCB */
dcl  ptr1 ptr;					/* Temporary pointer used for various things */
dcl  ptr2 ptr;					/* Second temp pointer */
dcl  temp_name char (32) var;				/* Temp name used for various things */
dcl  int char (32);					/* Internal entry name */
dcl  path char (232) var;
dcl  inh bit (37);					/* Syn_ inhibit bits */
dcl  ev_ptr ptr;					/* Pointer to entry variable array */
dcl  last_ptr ptr;					/* Temp pointer to last entry variable */
dcl  dir_len fixed bin;				/* Length of directory in question */

/* Based  */

dcl 1 descrip aligned based (ptr2),			/* Open or attach description */
    2 msg_len fixed bin,				/* Length of text */
    2 msg char (0 refer (descrip.msg_len));		/* The actual message */

dcl  ev (N_ENTRY_VARS) entry based (ev_ptr);			/* Entry variable array in IOCB */


/* External stuff */

dcl (ioa_, ioa_$nnl, ioa_$rsnnl) entry options (variable);
dcl  cu_$decode_entry_value entry (entry, ptr, ptr);
dcl  get_entry_name_ entry (ptr, char (*), fixed bin, char (8), fixed bin (35));
dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));

dcl (addr, baseno, null, ptr, rtrim, substr) builtin;

/* Constants */

dcl  N_ENTRY_VARS fixed bin init(19) int static options(constant);

dcl  opt_name (19) char (14) int static options (constant) init
    ("detach_iocb",					/* 1 */
     "open",					/* 2 */
     "close",					/* 3 */
     "get_line",					/* 4 */
     "get_chars",					/* 5 */
     "put_chars",					/* 6 */
     "modes",					/* 7 */
     "position",					/* 8 */
     "control",					/* 9 */
     "read_record",					/* 10 */
     "write_record",				/* 11 */
     "rewrite_record",				/* 12 */
     "delete_record",				/* 13 */
     "seek_key",					/* 14 */
     "read_key",					/* 15 */
     "read_length", 				/* 16 */
     "open_file",					/* 17 */
     "close_file",					/* 18 */
     "detach");					/* 19 */

%include iocbx;

/* Print header line */

	p = iocb_ptr;				/* Copy IOCB pointer to thing with shorter name */
	call ioa_$nnl ("IOCB ""^a"" @ ^p", p -> iocb.name, iocb_ptr); /* Print name and addr */
	if p -> iocb.actual_iocb_ptr = iocb_ptr then call ioa_ (""); /* If not syned to something, end line */
	else call ioa_ (" (actual IOCB is ""^a"" @ ^p)",
	     p -> iocb.actual_iocb_ptr -> iocb.name,
	     p -> iocb.actual_iocb_ptr);		/* Otherwise say what real IOCB is */

/* Print data on syn_ attachments */

	ptr1 = p -> iocb.syn_father;
	temp_name = "father";
	call print_syn;
	ptr1 = p -> iocb.syn_brother;
	temp_name = "brother";
	call print_syn;
	ptr1 = p -> iocb.syn_son;
	temp_name = "son";
	call print_syn;

/* Print attach data */

	temp_name = "attach";
	ptr1 = p -> iocb.attach_data_ptr;
	ptr2 = p -> iocb.attach_descrip_ptr;
	call print_dat;

/* Print open data */

	temp_name = "open";
	ptr1 = p -> iocb.open_data_ptr;
	ptr2 = p -> iocb.open_descrip_ptr;
	call print_dat;


/* Print event channel */

	if p -> iocb.event_channel ^= "0"b then
	     call ioa_ ("event channel is ^24.3b", p -> iocb.event_channel);

/* IOS compatability pointer */

	if p -> iocb.ios_compatibility ^= null then
	     call ioa_ ("IOS transfer vector @ ^p", p -> iocb.ios_compatibility);

/* Print entry variables */

	ev_ptr = addr (p -> iocb.detach_iocb);		/* Pointer to entry variable list */
	if iocb_ptr = p -> iocb.actual_iocb_ptr then inh = "0"b; /* If not syned, then no inhibits in effect */
	else inh = "0"b || p -> iocb.syn_inhibits;	/* Otherwise copy inhibit array, supplying a "0"b
						   for detach, which is never inhibited */
	last_ptr = null;

	do i = 1 to N_ENTRY_VARS;			/* Scan all variables */
	     call cu_$decode_entry_value (ev (i), ptr1, ptr2); /* Turn entry variable into pointers */
	     if (i > 1) & (ptr1 = last_ptr) then do;	/* If two identical pointers in a row */
		path = " """;			/* Path name is a ditto mark */
	     end;
	     else do;				/* A real path must be determined */
		call get_entry_name_ (ptr1, int, (0), (""), code); /* Get entry point name */
		if code ^= 0 then int = "";		/* If not found */
		if (i = 1) | (baseno (ptr1) ^= baseno (last_ptr)) then do; /* If 1st time or different seg */
		     call hcs_$fs_get_path_name (ptr (ptr1, 0), dir, dir_len, ename, code); /* Get path name */
		     if code ^= 0 then dir, ename = ""; /* If it failed */
		end;
		path = substr (dir, 1, dir_len);	/* Build pathname */
		if path ^= ">" then path = path || ">"; /* Only add > if seg not in root */
		path = path || rtrim (ename);
		if (int ^= ename) & (int ^= "") then path = path || "$" || rtrim (int);
		call ioa_$rsnnl (" (^p)", temp_name, (0), ptr1); /* Edit pointer value */
		path = path || temp_name;
	     end;
	     last_ptr = ptr1;			/* Save previous pointer */
	     if substr (inh, i, 1) then temp_name = " (inh)"; /* If inhibited */
	     else temp_name = "";
	     call ioa_ ("^15a ^a^a", opt_name (i), path, temp_name);
	end;
	return;

/* Subroutines used by print_iocb */

/* Procedure to print syn_ attachments */

print_syn: proc;

	     if ptr1 = null then return;		/* If no attachment */
	     call ioa_ ("SYN ^a is ""^a"" @ ^p", temp_name, ptr1 -> iocb.name, ptr1);
	     return;

	end print_syn;


/* Procedure to print attach and open data */

print_dat: proc;

	     if ptr2 = null then call ioa_$nnl ("not ^aed,", temp_name);
	     else call ioa_$nnl ("^a description: ""^a"",", temp_name, descrip.msg);

	     if ptr1 = null then call ioa_ (" ^a data is null", temp_name);
	     else call ioa_ (" ^a data at ^p", temp_name, ptr1);

	     return;

	end print_dat;


     end io_call_print_iocb_;
