/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*converted to v2pl1 by A. Downing 12.14.72*/
/* Free format input program, doing conversions as dictated
   by descriptors of the calling program.
   re-coded by M. Weaver 28 July 1970 */

/* Modified on:	23 September 1971 by Paul Green for new descriptors */

read_list_: procedure;				/*  Arguments to read_list_ are accessed through a based
						   declaration since their number and size are not
						   known at compile time.  */

dcl 1 arg based,					/* Multics argument list structure. */
    2 acount bit(18),
    2 spval bit(18),
    2 dcount bit(18),
    2 padding bit(18),
    2 ptr(100) pointer;

/* 	Dummy declarations to refer to arguments after their type is known */

dcl  strv char(131) based,				/* For character strings, fixed and varying */
     strvad char(ssize) based,			/* For prompting message character strings */
     bitv bit(131) based,				/* For bit strings, fixed and varying */
     fxdv fixed bin(35) based,			/* For single precision fixed point input */
     fxdvh fixed bin(17) based,			/* For other single prec. fixed point numbers */
     fxd2v fixed bin(71) based,			/* Double precision fixed point */
     fltv float bin(27) based,			/* Single precision floating point */
     flt2v float bin(63) based,			/* Double precision floating point */
     ptrv pointer based;				/* For pointer variables */

dcl  argct fixed bin,				/* Number of arguments in calling sequence. */
     argp pointer,					/* Holds pointer to argument list */
     argpos fixed bin,				/* Next argument position to be filled. */
     beg fixed bin,					/* First non-control argument */
     bpos fixed bin,				/* index of first char of value */
     cannedsw fixed bin,				/* Switch to permit printing of canned prompting message. */
     cend fixed bin,				/* Index of end of conversion scan */
     charpos fixed bin,				/* Index of next input character to be scanned */
     code fixed bin,				/* error code */
     comsw bit(1) aligned,				/* indicates prescence of comma followed by irrelevant chars */
     cstart fixed bin,				/* Index of start of conversion scan */
     cvindex fixed bin,				/* Index used during number conversion */
     digit fixed bin,				/* Holds value of next digit of input string */
     fltval float bin(63),				/* Holds floating point value during conversion */
     fxval fixed bin(71),				/* Holds fixed point values during conversion */
     i fixed bin,					/* index into label array for return from number conversion */
     iosw bit(1) aligned,				/* Console interaction switch */
     j fixed bin,					/* no. of relevant chars in bit string */
     lset bit(1) int static init("0"b),			/* Switch for initializing labels */
     neg fixed bin,					/* Sign of value being converted */
     ndims fixed bin,				/* Number of dimensions in array argument */
     nl char(1) aligned int static init("
"),						/* new-line character */
     octal_fix(0: 1) bit(36) aligned based,		/* array to pick out the low order word of a double prec. no. */
     p ptr,					/* Pointer to current argument */
     packed bit(1) aligned,				/* ="1"b if this argument is packed */
     plural char(1) aligned,				/* "s" or " " for more grammatical prompting */
     promptsw fixed bin,				/* Set to 1 if caller provides prompting messages */
     ptrbrk(0: 2) fixed bin(17) int static init(124, 40, 41), /* ascii for ptr break chars */
     q ptr,                                                 /* Pointer to intermediate conversion number */
     radix fixed bin,				/* Radix of integer conversion */
     rbuf char(rcount) based(rbufp),			/* Input string */
     rbufp pointer,					/* Pointer to input buffer */
     rcount fixed bin,				/* Number  of characters read or length of input string */
     readbuf char(131) aligned,			/* Typewriter input buffer area */
     scale fixed bin,				/* Arithemetic scale of argument */
    (size,ssize) fixed bin(35),			/* Arithmetic precision, string size, or number of structure elements */
     squosw bit(1) aligned,				/* Flag to indicate single quote in string */
     stop_at_break bit(1),				/* Flag to tell scan of input to stop at a break */
     tempc char(1) aligned,				/* temporary for looking at a character */
     type fixed binary,				/* Data type of next argument to be filled */
     typemsg char(32),				/* Holds an error message appropriate for input type */
     up fixed bin,					/* Last relevant digit corresponding to radix */
     vpos fixed bin,				/* index of last char of value */
     1 x aligned based(rbufp),			/* Structure for scanning input line */
     2 c(0: 3) char(1) unaligned;

dcl  retlab(0: 2) label local  int static;		/* Label array for returning from number conversion routine */

dcl  com_err_$suppress_name entry(fixed bin,char(*) aligned,char(*) aligned),
     com_err_ entry options(variable),
     cu_$arg_list_ptr entry(ptr),
     cv_float_double_ entry(char(*) aligned,fixed bin,float bin(63)),
     decode_descriptor_ entry(ptr,fixed bin,fixed bin,bit(1) aligned,fixed bin,fixed bin(35),fixed bin),
     ioa_ entry options(variable),
     ioa_$nnl entry options(variable),
     ios_$read_ptr ext entry(ptr, fixed bin, fixed bin),
     ios_$resetread entry options(variable);

dcl (addr,addrel,baseptr,divide,fixed,min,substr,unspec) builtin;

/*	declare added for ios_$resetread */
dcl	status_bits bit(72) aligned;

/* 	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/* 	Entry points.  Locate calling sequence. */


	promptsw = 0;				/* No prompting messages provided by user */
	cannedsw = 0;				/* Canned prompting is suppressed the first time */
	go to cmn;

prompt:	entry;
	promptsw = 1;				/* prompting messages are provided */
	go to cmn;

no_prompt: entry;
	promptsw = 0;				/* No prompting messages provided by user */
	cannedsw = 2;				/* Always suppress canned prompting */
	go to cmn;

scan_string: entry;
	promptsw = 0;				/* No prompting messages provided by user */
	cannedsw = 2;				/* Always suppress canned prompting */
	iosw = "0"b;				/* non-interactive entry */
	beg = 3;					/* third arg is first regular output arg */
	go to getap;


cmn:	rbufp = addr(readbuf);			/* want input to go into a buffer for most entries */
	beg = 1;					/* most entries don't have control arguments */
	iosw = "1"b;				/* most entries will interact with concole */
getap:	q = addr(digit);		                    /* init q pointer */
	call cu_$arg_list_ptr(argp);			/* get pointer to caller's argument list */
	argct = divide(fixed(argp->arg.acount,18), 2, 17, 0); /* get number of arguments */
	charpos = 0;				/* prepare to look at first character in input line */
	if ^iosw then do;				/* get addr and length of input string for $scan_string */
	     rbufp = argp->arg.ptr(1);		/* get pointer to input string */
	     call decode_descriptor_(argp,1,type,packed,ndims,size,scale);
	     if type = 21 then rcount = size-1;
						/* fixed length string; get length from it; indexing starts at 0 */
	     else rcount = addrel(rbufp,-1)->fxdvh - 1;	/* varying string; get current length from it*/

/* We want to look at the input string through an aligned based structure.  In order
   to do this, if the string is unaligned, we must adjust the pointer to the string
   and also adjust the offset and length.  */

	     up = fixed(substr(addr(rbufp)->bitv,55,9),9); /* isolate bit offset of input ptr */
	     if up > 0 then do;
		substr(addr(rbufp)->bitv,55,9) = "0"b;	/* zero out any bit offset */
		up = divide(up,9,17,0);		/* calculate character offset from bit offset */
		charpos = charpos + up;		/* adjust beginning offset to reflect aligned string */
		rcount = rcount + up;		/* adjust length to reflect aligned string */
	     end;
	end;
	else rcount = -1;				/* for rest of entries, rcount will come from ios_$read_ptr */

	if ^lset then do;				/* initiate label array once per process */
	     retlab(0) = retlab_0;
	     retlab(1) = retlab_1;
	     retlab(2) = retlab_2;
	     lset = "1"b;
	end;

/* 	Grand loop--fill in caller's arguments, one at a time */


	do argpos = (beg+promptsw) by (1+promptsw) to argct;

	     call decode_descriptor_(argp,argpos,type,packed,ndims,size,scale);

/* 	locate start of next typed input value */

cklth:	     if charpos > rcount then do;		/* we are at end of current input line */
		if ^iosw then do;			/* can't get any more lines */
		     argp->arg.ptr(2)->fxdv = argpos-3;	/* return number of args filled in */
		     return;
		end;
		else if promptsw = 1 then do;		/* print next prompting message */
		     call decode_descriptor_(argp,argpos-1,0,"0"b,0,ssize,0);
		     if ssize ^= 0 then call ioa_$nnl(argp->arg.ptr(argpos-1)->strvad);
		end;
		else if cannedsw = 1 then do;
		     radix = argct-argpos+1;		/* put calculation into a temporary */
		     if radix = 1 then plural = " ";
		     else plural = "s";
		     call ioa_("^d more input value^a expected",radix,plural);
		end;
		else if cannedsw = 0 then cannedsw = 1;	/* allow canned prompting messages from now on */

read_more:	call ios_$read_ptr(rbufp,130,rcount);
		comsw = "1"b;			/* new-line character at beginning of line is treated as a comma */
		rcount = rcount - 2;		/* discard "new line" character; indexing starts at 0 */
		charpos = 0;			/* Prepare to look at first character of input line */
	     end;

/* When looking for the next value, blanks, tabs, commas and new-line chars are
   skipped over.  Blanks and tabs are ignored.  Two consecutive commas, or 2
   commas separated by blanks and/or tabs indicate that the current parameter
   position is not to be filled in. */

	     tempc = x.c(charpos);			/* copy character into a temporary */
	     if tempc = " " then go to skipb;		/* skip over blanks */
	     if tempc = "	" then do;			/* skip over tabs */
skipb:		charpos = charpos + 1;
		go to cklth;
	     end;
	     if tempc = "," then do;			/* ",," implies do nothing to corresponding arg */
		if comsw then do;
		     charpos = charpos + 1;		/* don't want to get into a loop */
		     go to next_par;
		end;
set_com:		comsw = "1"b;			/* note passing of comma */
		go to skipb;
	     end;
	     if tempc = nl then go to set_com;		/* skip over imbedded new-line character */

/* 	The general strategy is as follows.  First the type of the next argument is determined and a pointer
   to it is obtained.  For fixed, floating or bit arguments, the input string is scanned until the
   first break character and then a branch is made to the appropriate conversion section.
   Pointer input is parsed only once--in the number conversion routine.  Character input is parsed once,
   but with a facility to recognize quotes and to suppress breaks.  */

	     p = argp->arg.ptr(argpos);		/* get pointer to current argument */

	     comsw = "0"b;				/* Have relevant character; forget any previous comma */
	     bpos = charpos;			/* remember beginning of value */

	     if type = 13 then go to ptr_input;
	     if type = 21 then go to char_input;
	     if type = 22 then go to char_input;

	     do charpos = charpos to rcount;		/* scan to the end of the input string if necessary */
		tempc = x.c(charpos);		/* copy character into a temporary */
		if tempc = " " then go to use_val;	/* test for blank */
		if tempc = "	" then go to use_val;	/* test for tab */
		if tempc = "," then go to use_val;	/* test for comma */
		if tempc = nl then go to use_val;	/* test for new line */
	     end;

use_val:	     vpos = charpos - 1;			/* don't include break character in value */
	     if type < 3 then go to fixed_input;
	     if type < 5 then go to fpt_input;
	     if type = 19 then go to bit_input;
	     if type = 20 then go to bit_input;

/* omitted types are: 5-8: complex; 9-10: decimal; 14: offset; 15: label; 16: entry; 23: file; 24: packed ptr. */

	     call com_err_(0,"read_list_","Unhandled data-type ^d for argument ^d. It has been ignored.",type,argpos);
	     go to next_par;


/* 	Try to interpret next input value as fixed  point */

fixed_input:   
	     cend = vpos;				/* normally scan whole value */
	     tempc = x.c(vpos);
	     if tempc = "b" then do;			/* input in binary form */
		radix = 2;
		cend = vpos - 1;			/* ignore last character */
	     end;
	     else if tempc = "o" then do;		/* input in octal form */
		radix = 8;
		cend = vpos - 1;			/* ignore last character */
	     end;
	     else radix = 10;			/* input in decimal form */
	     cstart = bpos;
	     typemsg = "an integer";
	     go to cvint;				/* convert the number */
retfx:	    					/* get here only if there were no errors */
	     if type = 2 then p->fxd2v = fxval;		/* double precision case */
						/* don't want positive sign to affect
						   single precision octal or binary input */
	     else if radix ^= 10 & neg > 0 then unspec(p->fxdv) = addr(fxval)->octal_fix(1);
	     else p->fxdv = fxval;			/* single precision case; decimal or negative octal/binary value */
	     go to next_par;


/* 	Try to interpret next input value as floating point */

fpt_input:     
	     typemsg = "a real (floating-point) number";
	     call cv_float_double_(substr(rbuf,bpos+1,vpos-bpos+1),code,fltval);
	     if code ^= 0 then go to illegal;
	     if type = 3 then argp->arg.ptr(argpos)->fltv = fltval; /* single precision */
	     else argp->arg.ptr(argpos)->flt2v = fltval;	/* double precision */
	     go to next_par;


/* 	Try to interpret next input value as a pointer variable */

ptr_input:     
	     radix = 8;				/* pointer input is in octal */
	     cstart = bpos;
	     cend = rcount;				/* go till get to break */
	     typemsg = "an (octal) pointer value";
	     i = 0;				/* set index into label array */
	     go to cvint;				/* start parsing and converting segment number */
retlab_0:     					/* breaks are checked by number conversion routine */
	     cstart = cvindex + 1;			/* set beginning of word offset scan */
	     i = 1;
	     go to cvint;
retlab_1:      
	     cstart = cvindex + 1;			/* set beginning of bit offset scan */
	     i = 2;
	     radix = 10;				/* bit offset is in decimal */
	     go to cvint;
retlab_2:      
	     charpos = cvindex + 1;			/* set for scanning next input value */
						/* 	check range ofbit offset */
	     if fxval > 35 then do;			/* check range of bit offset */
		call ioa_("^d is too large for a bit offset in a pointer.",fixed(fxval,35));
		beg = -1;
		go to illegal;
	     end;

	     go to next_par;


/* 	Try to interpret next input value as a bit string */

bit_input:     
	     typemsg = "a bit string";
	     if x.c(bpos) ^= """" then go to illegal;	/* check to see that value starts with " */
	     if substr(rbuf,vpos,2) ^= """b" then go to illegal; /* and that it ends with "b */
	     up = vpos - bpos - 2;			/* compute length of string */
	     j = min(size,up);			/* determine number of bits to fill in */

	     do cvindex = 1 to j;
		tempc = x.c(bpos+cvindex);		/* copy next character into a temporary */
		if tempc = "1" then substr(p->bitv,cvindex,1) = "1"b;
		else if tempc = "0" then substr(p->bitv,cvindex,1) = "0"b;
		else go to illegal;
	     end;

	     if j < up then do cvindex = j + 1 to up;	/* check rest of input for illegal characters */
		tempc = x.c(bpos+cvindex);
		if tempc ^= "1" then if tempc ^= "0" then go to illegal;
	     end;

	     if type = 19 then if j < size
	     then substr(p->bitv,j+1,size-j) = "0"b;	/* pad fixed string with zeros */
	     else;				/* no padding needed */
	     else addrel(p,-1)->fxdv = j;		/* set varying string length */
	     go to next_par;


/* 	Interpret next input value as a character string */

char_input:    
	     typemsg = "a character string";
	     squosw = "0"b;				/* init switch to indicate a quote after first character */
	     stop_at_break = "1"b;			/* presume scan goes to first break */
	     vpos = 0;				/* for number of characters inserted in arg */

	     do charpos = charpos to rcount;		/* scan to the end of the input string if needed */
		tempc = x.c(charpos);		/* copy character */
		if stop_at_break then do;		/* stop at a break unless in a quoted string */
		     if tempc = " " then go to setl;
		     if tempc = "	" then go to setl;	/* test for tab */
		     if tempc = "," then go to setl;
		     if tempc = nl then go to setl;	/* test for new-line */
		     if squosw then go to illegfinch;	/* had a single quote not followed by break */
		end;

		if tempc = """" then do;		/* check for quote mark */
		     if charpos = bpos /* first char */ then stop_at_break = "0"b;
		     else if charpos = rcount then go to lastquo; /* last char of input line */
		     else if x.c(charpos+1) = """" then do; /* next char is a quote */
			charpos = charpos + 1;	/* store only it */
			go to storech;
		     end;
		     else do;			/* either end of string of illegal */
lastquo:			if x.c(bpos) ^= """" then go to illegfinch; /* quotes don't match */
			stop_at_break = "1"b;	/* breaks are effective again */
			squosw = "1"b;		/* if next char is not a break, have illegal string */
		     end;
		end;
		else do;				/* character is not a quote mark */
storech:		     vpos = vpos + 1;
		     if vpos <= size then substr(p->strv,vpos,1) = tempc; /* store if there is room */
		end;
	     end;					/* end of character input loop */

	     if ^stop_at_break then do;		/* string started with a quote but didn't end with one */
		go to illegal;
	     end;

setl:	     
	     if type = 21 then if vpos < size
	     then substr(p->strv,vpos+1,size-vpos) = " ";	/* pad fixed string with blanks */
	     else;				/* no padding needed */
	     else addrel(p,-1)->fxdv = min(size,vpos);	/* set current length of varying string */
	     go to next_par;


/* 	Illegal syntax detected while converting input value.  Comment and try again. */

illegfinch:   					/* finish parsing illegal character string value */
	     cvindex = charpos;
illegfin:     					/* finish parsing illegal pointer value */
	     do charpos = cvindex to rcount;		/* parse until get to break */
		tempc = x.c(charpos);
		if tempc = " " then go to illegal;	/* test for blank */
		if tempc = "	" then go to illegal;	/* test for tab */
		if tempc = "," then go to illegal;
		if tempc = nl then go to illegal;	/* test for new-line */
	     end;

illegal:	     if ^iosw then do;			/* in non-interactive mode; set code and return */
		argp->arg.ptr(2)->fxdv = 2 - argpos;	/* here code must be negative */
		return;
	     end;

	     if beg > 0 then			/* tell user what was wrong */
	     call ioa_("Can't interpret ""^a"" as ^a.",substr(rbuf,bpos+1,charpos-bpos),typemsg);
	     else beg = 1;				/* reset so we can get proper messages later */
	     call ios_$resetread("user_input",status_bits);
	     call com_err_$suppress_name(0,"read_list_","Retype input starting with that value.");
	     rcount = -1;				/* discard remainder of this line */
	     argpos = argpos-(1+promptsw);		/* want to re-enter this argument */
	     go to next_par;


/* 	routine to convert ascii number to binary */
cvint:	     
	     up = radix + 47;			/* highest digit to look for; 60 octal = 0 */
	     neg = 1;				/* initialize scan */
	     fxval = 0;
	     digit = 0;

	     do cvindex = cstart to cend;
		q->x.c(3) = rbufp->x.c(cvindex);	/* copy next char into a number */
		if digit >= 48 then if digit <= up then do; /* could be a digit */
		     fxval = radix * fxval + (digit - 48);
		     go to end_loop;		/* this char was OK; get another */
		end;
		if type = 13 then do;		/* are processing a pointer */
		     if cvindex = cstart then go to illegfin; /* couldn't use any part of tokens */
storeptr:	     if i = 0 then			/* working on segment number */
		     p->ptrv = baseptr(fxval);
		     else if i = 1 then		/* working on offset */
		     p->ptrv = addrel(p->ptrv,fxval);
		     else if i = 2 then		/* working on bit offset */
		     substr(p->bitv,55,9) = substr(addr(fxval)->bitv,64,9);
		     if cvindex > cend then go to set_ind; /* stopped by end of input string */
		     if digit ^= ptrbrk(i) then do;	/* ptrbrk(1)="|"; ptrbrk(1)="("; ptrbrk(2)=")" */
			if i = 2 then go to illegfin;	/* bit offset must end with ")" */
			if digit ^= 32		/* space */
			then if digit ^= 9		/* tab */
			then if digit ^= 44		/* comma */
			then if digit ^= 10		/* new-line */
			then go to illegfin;	/* have illegal character */
set_ind:			charpos = cvindex + 1;	/* set charpos for scanning next input arg */
			go to next_par;		/* value is already stored in arg */
		     end;
		     go to retlab(i);
		end;				/* end of pointer processing */
		else if cvindex ^= cstart then go to illegal;
		else do;
		     if digit = 45 then neg = -1;	/* minus sign */
		     else if digit ^= 43 then go to illegal; /* could have a plus sign */
		end;
end_loop:      end;					/* end of character scanning for conversion */

	     if type = 13 then			/* end of input line */
	     if i = 2 then go to illegfin;		/* bit offset must end with ")" */
	     else go to storeptr;			/* finish up ptr */
	     if neg < 0 then fxval = -fxval;
	     go to retfx;				/* get here only during fixed point conversion */


/* 	Argument has been stored, move on to the next one */

next_par:      
	end;					/* End of grand loop */

	if promptsw = 1 then if argpos = argct + 1 then do; /* Is the last arg an extra prompting message? */
	     call decode_descriptor_(argp,argpos-1,0,"0"b,0,ssize,0);
	     if ssize ^= 0 then call ioa_$nnl(argp->arg.ptr(argpos-1)->strvad);
	end;
	if ^iosw then argp->arg.ptr(2)->fxdv = argpos - 3; /* return number of args filled in */
	return;

     end read_list_;
