/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* modified 03/21/84 by Melanie Weaver to close pascal files */

/* format: style3,^indnoniterdo */
close_file:
cf:
     proc;
dcl	arg		char (cnt) based (arg_ptr) unal;
dcl	(arg_count, cnt, i) fixed bin (17);
dcl	arg_ptr		ptr;
dcl	code		fixed bin (35);
dcl	com_err_		entry options (variable);
dcl	(convert, substr, verify)
			builtin;
dcl	cu_$arg_count	entry (fixed bin),
	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl	(
	error_table_$noarg,
	error_table_$badopt,
	error_table_$no_file
	)		ext static fixed bin (35);
dcl	f_file		fixed bin;
dcl	(fortran_code, pl1_code, pascal_code)
			fixed bin (35);
dcl	fortran_io_$close_file
			entry (fixed bin, fixed bin (35));
dcl	ft_file		char (2);
dcl	linkage_error	condition;
dcl	msg		char (80);
dcl	plio2_$close_all_	entry,
	plio2_$close_by_name_sys_
			entry (char (*) unal, fixed bin (35));
dcl	pascal_io_$close_all
			entry;
dcl	pascal_io_$close_by_name
			entry (char (*), fixed bin (35));

	call cu_$arg_count (arg_count);
	if arg_count = 0
	then do;					/* needs args */
	     code = error_table_$noarg;
	     msg = "argument must be -all, or 1 or more file names.";
	     go to error_return;
	end;

	else do i = 1 to arg_count;
		msg = "";
		fortran_code, pl1_code, pascal_code = 1;
		call cu_$arg_ptr (i, arg_ptr, cnt, code);
		if code ^= 0
		then do;
error_return:
		     call com_err_ (code, "close_file", "^a", msg);
		     return;
		end;
		if substr (arg, 1, 1) = "-"
		then if arg ^= "-all" & arg ^= "-a"
		     then do;			/* bad option */
			code = error_table_$badopt;
			msg = arg || ".";
			go to error_return;
		     end;

		if arg = "-all" | arg = "-a"
		then do;				/* close all of them */
		     on linkage_error
			begin;
			     fortran_code = 1;
			     go to SKIP_FORTRAN_ALL;
			end;
		     call fortran_io_$close_file (-1, fortran_code);
SKIP_FORTRAN_ALL:
		     revert linkage_error;

		     on linkage_error go to SKIP_PASCAL_ALL;
		     call pascal_io_$close_all;
SKIP_PASCAL_ALL:
		     revert linkage_error;

		     call plio2_$close_all_;		/* close all pl1 files */
		     return;			/* all done */
		end;
		else do;
		     if substr (arg, 1, 4) = "file"
		     then do;			/* might be a fortran file */
			ft_file = substr (arg, 5, 2);
			if ft_file ^= "00"
			then if verify (ft_file, "1234567890") = 0
			     then do;
				f_file = convert (f_file, ft_file);
				on linkage_error
				     begin;
					fortran_code = 1;
					go to SKIP_FORTRAN_ONE_FILE;
				     end;
				call fortran_io_$close_file (f_file, fortran_code);
SKIP_FORTRAN_ONE_FILE:
				revert linkage_error;
			     end;
			     else ;
			else ;
		     end;

		     on linkage_error
			begin;
			     pascal_code = 1;
			     go to SKIP_PASCAL_ONE_FILE;
			end;
		     call pascal_io_$close_by_name ((arg), pascal_code);
SKIP_PASCAL_ONE_FILE:
		     revert linkage_error;

		     call plio2_$close_by_name_sys_ ((arg), pl1_code);
		end;
		if pl1_code + fortran_code + pascal_code > 2
		then call com_err_ (error_table_$no_file, "close_file", "^a", arg);
	     end;
	return;
     end close_file;
