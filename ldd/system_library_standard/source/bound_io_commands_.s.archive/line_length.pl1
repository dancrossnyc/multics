/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure allows the user to change the line length of the device he is
   presently attached to on the stream user_output.

   Coded by R. J. Feiertag on February 21, 1970			 */
/* Modified 08/04/83 by Jim Lippard to use iox_$modes */
/* Modified 84-07-24 by Charlie Spitzer. Let work as an AF. */

line_length: ll: proc;

dcl  ME char (11) internal static options (constant) init ("line_length");
dcl  active_fnc bit (1) aligned,
     af_return_arg_ptr ptr,
     af_return_arg_len fixed bin (21),
     af_return_arg char (af_return_arg_len) varying based (af_return_arg_ptr),
     cmaxl fixed bin(21),				/* length of cmax */
     cmaxp ptr,					/* pointer to cmax */
     cmax char (cmaxl) based (cmaxp),			/* line length in ascii */
     ll_ch char (8),
     code fixed bin(35),				/* error code */
     n_args fixed bin,
     error_table_$not_act_fnc fixed bin(35) ext static,
     error_table_$too_many_args fixed bin(35) ext static,
     new_line_length fixed bin,
     old_line_length fixed bin,
     get_line_length_$switch entry (ptr, fixed bin(35)) returns(fixed bin),
     iox_$modes entry (ptr, char(*), char(*), fixed bin(35)),
     iox_$user_output ext static ptr,
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin(21), fixed bin (35)),
     cu_$af_return_arg entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
     error_routine entry variable entry options (variable),
     ioa_ entry() options(variable),
     active_fnc_err_ entry options(variable),
     com_err_ ext entry options (variable);
dcl  conversion condition;
dcl  (char, convert, ltrim) builtin;

	new_line_length = 0;			/* init not to set */

	call cu_$af_return_arg (n_args, af_return_arg_ptr, af_return_arg_len, code);
	if code = error_table_$not_act_fnc then do;
	     active_fnc = "0"b;
	     error_routine = com_err_;
	end;
	else do;
	     active_fnc = "1"b;
	     error_routine = active_fnc_err_;
	end;
	
	if n_args > 1 then do;
	     call error_routine (error_table_$too_many_args, ME);
	     return;
	end;
	else if n_args = 1 then do;
		call cu_$arg_ptr (1, cmaxp, cmaxl, code);    /* get first arg */
		if code ^= 0 then do;		/* incorrect calling sequence */
		     call error_routine (code, ME, "");
		     return;
		     end;

		on conversion begin;
		     call error_routine ((0), ME, """^a"" is not a decimal integer.", cmax);
		     goto done;
		     end;

		new_line_length = convert (new_line_length, cmax);
		if new_line_length <= 4
		then do;			/* He doesn't seem to know what he's doing */

		     call com_err_ (0, ME, "Line length must be greater than 4.");
		     return;
		     end;

		ll_ch = "ll" || cmax;
		end;

	if n_args = 0 | active_fnc then do;		/* need old line length */
	     old_line_length = get_line_length_$switch (iox_$user_output, code);
	     if code ^= 0 then do;
		call error_routine (code, ME, "Determining old line length.");
		return;
	     end;
	end;
	
	if new_line_length > 0 then do;		/* Set new line length */
	     call iox_$modes (iox_$user_output, ll_ch, (""), code);
	     if code ^= 0 then do;
		call error_routine (code, ME, "Setting new line length of ^d", new_line_length);
		return;
	     end;
	end;
	
	if new_line_length > 0 then do;
	     call iox_$modes (iox_$user_output, ll_ch, "", code); /* set line length */

	     if code ^= 0 then do;
		call error_routine (code, ME, "^a", cmax);
		return;
		end;
	     end;

	if active_fnc then af_return_arg = ltrim (char (old_line_length));
	else if n_args = 0 then call ioa_ ("^d", old_line_length);

done:	return;

     end line_length;
