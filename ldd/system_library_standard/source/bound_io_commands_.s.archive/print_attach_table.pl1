/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Modified 10/06/83 by Charlie Spitzer. make it pay attention to -open/-att if
				 not doing star names. phx9394 */

print_attach_table:
pat: proc ();

dcl (ap, rsp) pointer,
    (al, rsl, nargs, argno) fixed bin,
     arg char (al) based (ap),
     rs char (rsl) varying based (rsp);

dcl 1 names (100) aligned,
    2 name char (32) unaligned,
    2 star bit (1) aligned,
    2 match bit (1) aligned;
dcl  name_count fixed bin;

dcl  out_str char (1024) varying;
dcl (i, j, k, len1, len2, len3, t1) fixed bin;
dcl (af_sw, default, no_names_specified, star_sw, brief_sw, switch_processed) bit (1) aligned;
dcl  select_type fixed bin;
dcl  code fixed bin (35);
dcl  iocb_ptr pointer;
dcl  attach_desc_ptr pointer;
dcl  open_desc_ptr pointer;

dcl  varying_string char (4096) varying based;

dcl  cu_$af_return_arg entry (fixed bin, pointer, fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  active_fnc_err_ entry options (variable);
dcl  check_star_name_$entry entry (char (*), fixed bin (35));
dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
dcl  iox_$find_iocb_n entry (fixed bin, pointer, fixed bin (35));
dcl  iox_$put_chars entry (pointer, pointer, fixed bin, fixed bin (35));

dcl  complain entry variable options (variable);

dcl  iox_$user_output pointer external;
dcl (error_table_$not_act_fnc,
     error_table_$badopt,
     error_table_$inconsistent,
     error_table_$noarg,
     error_table_$bigarg,
     error_table_$nomatch) fixed bin (35) external;


dcl  whoami char (32) aligned internal static options (constant) init ("print_attach_table");
dcl  newline char (1) aligned internal static options (constant) init ("
");
dcl  spaces char (80) aligned internal static options (constant) init ("");
dcl  not_attached char (32) varying internal static options (constant) init ("(not attached)");
dcl  not_open char (32) varying internal static options (constant) init ("(not open)");
dcl  null_string char (0) varying internal static options (constant) init ("");  /* open desc for syn_ attachments */
dcl  standard_switches (4) char (32) aligned internal static options (constant) init
    ("user_i/o", "user_output", "user_input", "error_output");

dcl (substr, length, rtrim, addr, null) builtin;

/**/

%include iocb;

/**/

	call cu_$af_return_arg (nargs, rsp, rsl, code);
	if code = 0 then do;
	     af_sw = "1"b;
	     rs = "";
	     complain = active_fnc_err_;
	     end;

	else if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     rsp = null ();
	     complain = com_err_;
	     end;

	else do;
	     call com_err_ (code, whoami);
	     return;
	     end;

	brief_sw = "0"b;				/* default is to mention 4 standard ones */
	no_names_specified = "0"b;			/* true only if no names are specified */
	select_type = 0;

	name_count = 0;				/* initialize */
	do i = 1 to nargs;				/* look through arguments */
	     call cu_$arg_ptr (i, ap, al, code);
	     if substr (arg, 1, 1) = "-" then do;	/* control argument */
		if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;
		else if arg = "-open" then do;
		     if select_type = 0 then select_type = 3;	/* set it */
		     else do;			/* otherwise, complina */
only_one_select_type:	call complain (error_table_$inconsistent, whoami,
			     "Only one of -open, -attached, or -all is allowed.");
			return;
			end;
		     end;

		else if arg = "-attached" | arg = "-att" then do;
		     if select_type = 0 then select_type = 2;
		     else goto only_one_select_type;
		     end;

		else if arg = "-all" | arg = "-a" then do;
		     if select_type = 0 then select_type = 1;
		     else goto only_one_select_type;
		     end;

		else if arg = "-name" | arg = "-nm" then do;	/* this one is NOT a starname */
		     if i = nargs then do;
			call complain (error_table_$noarg, whoami, "after -name.");
			return;
			end;

		     i = i + 1;
		     call cu_$arg_ptr (i, ap, al, code);

		     call add_to_list (arg, "0"b);		/* not a starname */
		     end;

		else do;
		     call complain (error_table_$badopt, whoami, "^a", arg);
		     return;
		     end;

		end;				/* of control argument processing */

	     else do;				/* it wasn't a control argument */
		call add_to_list (arg, "1"b);		/* since it wasn't a control arg, must be a starname */
		end;
	     end;

	if select_type = 0 then do;			/* if wasn't specified */
	      select_type = 2;			/* only attached switches */
	      default = "1"b;			/* for error msg if no match found */
	      end;
	 else default = "0"b;

	if name_count = 0 then do;			/* he didn't give any, so give the default */
	     call add_to_list ("**", "1"b);
	     no_names_specified = "1"b;		/* remember that we are looking at "all" switches */
	     end;

	do i = 1 by 1;				/* loop through all the switches */
	     call iox_$find_iocb_n (i, iocb_ptr, code);
	     if code ^= 0 then goto epilogue;		/* we've run out of switches */

	     switch_processed = "0"b;			/* nothing has been printed for this one yet */
	     do j = 1 to name_count;			/* loop thru all the names we're supposed to look for */

		if names.star (j) then do;
		     call match_star_name_ ((iocb_ptr -> iocb.name), names.name (j), code);
		     if code ^= 0 then goto next_name;	/* didn't match */

/*	check our other criteria now, like -brief and -all, -open, and -attached */

		     if brief_sw then do k = 1 to hbound (standard_switches, 1);
			if iocb_ptr -> iocb.name = standard_switches (k) then goto end_loop;  /* don't print it */
			end;

		     if select_type = 3 & (iocb_ptr -> iocb.open_descrip_ptr = null ()
			| iocb_ptr -> iocb.attach_descrip_ptr = null ()
			| iocb_ptr -> iocb.actual_iocb_ptr ^= iocb_ptr)  /* special crock for syn_ attachments */
			then goto end_loop;		/* not open */
		     if select_type = 2 & iocb_ptr -> iocb.attach_descrip_ptr = null () then goto end_loop;  /* not attached */

		     if ^switch_processed then
			call process_iocb (iocb_ptr);	/* it passed all our tests */
		     names.match (j) = "1"b;		/* remember that something matched this one */
		     switch_processed = "1"b;
		     goto next_name;			/* to avoid printing it twice */
		     end;				/* of starname case */

		else do;				/* we're looking for an explicit match */
		     if names.name (j) ^= iocb_ptr -> iocb.name then goto next_name;	/* not this one */

		     if select_type = 3 & (iocb_ptr -> iocb.open_descrip_ptr = null ()
			| iocb_ptr -> iocb.attach_descrip_ptr = null ()
			| iocb_ptr -> iocb.actual_iocb_ptr ^= iocb_ptr)  /* special crock for syn_ attachments */
			then goto end_loop;		/* not open */
		     if select_type = 2 & iocb_ptr -> iocb.attach_descrip_ptr = null () then goto end_loop;  /* not attached */

		     if ^switch_processed then
			call process_iocb (iocb_ptr);	/* process it */
		     names.match (j) = "1"b;		/* remember that we found this one */
		     switch_processed = "1"b;		/* to avoiod printing it more than once */
		     goto next_name;
		     end;
next_name:
		end;				/* of loop through possible names */

end_loop:
	     end;					/* of loop through IOCB's */

epilogue:

	if ^af_sw then do i = 1 to name_count;		/* print our error messages */
	     if names.match (i) = "0"b then do;		/* didn't find this one */
		if names.star (i) = "1"b then
		     if no_names_specified
		     then if default | select_type = 1
			then call complain (0, whoami, "No non-standard I/O switches found.");
		          else call complain (0, whoami, "No non-standard ^[attached^;open^] I/O switches found.", select_type=2);

		     else if default | select_type = 1	/* complain about a specific starname */
			then call complain (0, whoami, "No I/O switches matching the star name ^a.", names.name (i));
			else call complain (0, whoami, "No ^[attached^;open^] I/O switches matching the star name ^a.", select_type=2, names.name (i));


		else if default | select_type = 1
		     then call complain (0, whoami, "No I/O switch matching the name ^a.", names.name (i));
		     else call complain (0, whoami, "No ^[attached^;open^] I/O switch matching the name ^a.", select_type=2, names.name (i));
		end;
	     end;					/* of error printing loop */

main_return:
	return;					/* our work's all done */

/**/

/*	INTERNAL PROCEDURES	*/

add_to_list: proc (P_name, P_star_sw);	/* procedure to add a name to the naemes array */

dcl (P_name char (*),
     P_star_sw bit (1) aligned) parameter;

	star_sw = P_star_sw;

	if star_sw then do;			/* see if it's valid */
	     call check_star_name_$entry (P_name, code);
	     if code > 2 then do;
		call complain (code, whoami, "^a", P_name);
		goto main_return;
		end;
	     if code = 0 then star_sw = "0"b;		/* wasn't a starname, after all */
	     end;

	if length (P_name) > 32 then do;
	     call complain (error_table_$bigarg, whoami, "^a", P_name);
	     goto main_return;
	     end;

	if name_count >= hbound (names, 1) then do;	/* see if there is room */
	     call complain (0, whoami, "Too many switch names specified.  Maximum = ^d.", hbound (names, 1));
	     goto main_return;
	     end;

	do j = 1 to name_count;			/* make sure he hasn't already specified this name */
	     if names.name (j) = P_name then do;	/* a duplicate */
		if names.star (j) = star_sw then do;	/* but only if same starname type */
		     call com_err_ (0, whoami, "Warning -- duplicate switch name ""^a"" ignored.", P_name);
		     return;
		     end;
		end;
	     end;					/* of duplicate elimination loop */

	name_count = name_count + 1;
	names.name (name_count) = P_name;
	names.star (name_count) = star_sw;
	names.match (name_count) = "0"b;		/* initialize to not found state */
	return;

	end;					/* add_to_list */

/**/

process_iocb: proc (P_iocb_ptr);

/*	This procedure does the appropriate thing with the selected iocb */
/*	depending on af_sw, and on whether the switch is attached or open */

dcl  P_iocb_ptr pointer parameter;

	if af_sw then do;				/* just add it to the return string */
	     if length (rs) ^= 0 then rs = rs || " ";	/* space to separate returned values */
	     rs = rs || rtrim (P_iocb_ptr -> iocb.name);
	     return;
	     end;

	else attach_desc_ptr = P_iocb_ptr -> iocb.attach_descrip_ptr;
	if P_iocb_ptr -> iocb.actual_iocb_ptr = iocb_ptr then	/* crock for syn_ attachments */
	     open_desc_ptr = P_iocb_ptr -> iocb.open_descrip_ptr;
	else open_desc_ptr = addr (null_string);

	if attach_desc_ptr = null () then do;
	     attach_desc_ptr = addr (not_attached);
	     open_desc_ptr = addr (null_string);
	     end;
	else if open_desc_ptr = null () then open_desc_ptr = addr (not_open);

	len1 = length (rtrim (P_iocb_ptr -> iocb.name));
	len2 = length (rtrim (attach_desc_ptr -> varying_string));
	len3 = length (rtrim (open_desc_ptr -> varying_string));

	out_str = substr (P_iocb_ptr -> iocb.name, 1, len1);	/* initialize */

	if len1 < 19 & len2 < 59 then do;			/* attach description and name on same line */
	     out_str = out_str || substr (spaces, 1, 20 - len1);  /* yes, same line. columnize */
	     t1 = 20;				/* for test about open description */
	     end;					/* of case for short name */

	else do;					/* definitely goes on a different line */
	     out_str = out_str || newline;
	     out_str = out_str || substr (spaces, 1, 5);
	     t1 = 5;
	     end;

	out_str = out_str || substr (attach_desc_ptr -> varying_string, 1, len2);

	if len3 > 0 then do;			/* only process the open description if there is one */
	     t1 = t1 + len2;			/* t1 is now the last column of attach description */

	     if t1 > 38 then do;			/* put the open description on the next line */
		out_str = out_str || newline;
		out_str = out_str || substr (spaces, 1, 10);
		end;

	     else out_str = out_str || substr (spaces, 1, 40 - t1);

	     out_str = out_str || substr (open_desc_ptr -> varying_string, 1, len3);
	     end;

	out_str = out_str || newline;			/* and a newline to finish it off */

	call iox_$put_chars (iox_$user_output, addr (substr (out_str, 1, 1)), length (out_str), (0));
	return;					/* all done */

	end;					/* process_iocb */

     end;						/* print_attach_table */
