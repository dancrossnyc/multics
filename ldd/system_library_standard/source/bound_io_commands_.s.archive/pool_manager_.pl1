/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2,indcomtxt */

pool_manager_:
     proc;

/*  System storage pool management module  */

/* Coded January 1975 by Stan C. Vestal */
/* Modified in Sept. 1975 by J. C. Whitmore to fix quota reference bug in clean_pool entry */
/* Modified in April 1976 by J. C. Whitmore to check for non-terminal quota when closing pool */
/* Modified 84-01-05 BIM to stop gratuitously fooling with quota.
   personid dirs are never given terminal quota now,
   since users lack access to take advantage of it.
   For perfection, card stuff should set max lengths. */
/* Modified 84-12-27 by Keith Loepere to set dir_quota. */
/* Modified 85-01-30 by Keith Loepere to be smarter about same. */

	return;					/*  shouldn't be called here */

	dcl     aim_check_$equal	 entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
	dcl     convert_authorization_$encode
				 entry (bit (72) aligned, char (*));
	dcl     cu_$level_get	 entry returns (fixed bin);
	dcl     delete_$path	 entry (char (*), char (*), bit (6), char (*), fixed bin (35));
	dcl     expand_pathname_	 entry (character (*), character (*), character (*), fixed binary (35));
	dcl     get_authorization_	 entry returns (bit (72) aligned);
	dcl     get_group_id_$tag_star entry returns (char (32));
	dcl     get_system_free_area_	 entry returns (ptr);
	dcl     hcs_$add_dir_acl_entries
				 entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$add_dir_inacl_entries
				 entry (char (*), char (*), ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     hcs_$create_branch_	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     hcs_$get_access_class	 entry (char (*), char (*), bit (72) aligned, fixed bin (35));
	dcl     hcs_$quota_get	 entry (char (*), fixed bin (18), fixed bin (35), bit (36) aligned, fixed bin,
				 fixed bin (1), fixed bin, fixed bin (35));
	dcl     hcs_$quota_move	 entry (char (*), char (*), fixed bin (18), fixed bin (35));
	dcl     hcs_$set_ips_mask	 entry (bit (36) aligned, bit (36) aligned);
	dcl     hcs_$star_list_	 entry (char (*), char (*), fixed bin (3), ptr, fixed bin, fixed bin, ptr, ptr,
				 fixed bin (35));
	dcl     hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				 fixed bin (35));
	dcl     priv_move_quota_	 entry (char (*) aligned, char (*) aligned, fixed bin, fixed bin (35));
	dcl     system_privilege_$dir_priv_off
				 entry (fixed bin (35));
	dcl     system_privilege_$dir_priv_on
				 entry (fixed bin (35));
	declare pathname_		 entry (character (*), character (*)) returns (character (168));

	dcl     error_table_$ai_restricted
				 external fixed bin (35);
	dcl     error_table_$action_not_performed
				 external fixed bin (35);
	dcl     error_table_$rqover	 external fixed bin (35);
	dcl     error_table_$invalid_move_qmax
				 external fixed bin (35);
	dcl     error_table_$invalid_move_quota
				 external fixed bin (35);
	dcl     error_table_$namedup	 external fixed bin (35);
	dcl     error_table_$no_dir	 external fixed bin (35);
	dcl     error_table_$nomatch	 external fixed bin (35);
	dcl     error_table_$nondirseg external fixed bin (35);
	dcl     error_table_$noentry	 external fixed bin (35);
	dcl     error_table_$notadir	 external fixed bin (35);


	dcl     a_path		 char (*);
	dcl     a_personid		 char (*);	/*  person name for this pool entry */
	dcl     a_grace_quota	 fixed bin;	/* quota to be left on access class dir over used */
	dcl     ac		 bit (72) aligned;	/*  bit rep of access_class for desired personid dir */
	dcl     access		 bit (36) aligned;	/*  mode to set in inacl of access_class_dir */
	dcl     access_class_dir	 char (32);	/*  entry name for the access_class directory */
	dcl     access_class_path	 char (168);	/*  full pathname of access_class_dir */
	dcl     access_quota	 fixed bin (18);	/*  quota on access_class_dir */
	dcl     access_used		 fixed bin;	/*  pages used on access_class_dir */
	dcl     age		 fixed bin;	/*  age olde than which segs are to be deleted */
	dcl     all_switches	 bit (6);		/*  for both */
	dcl     bc		 fixed bin;	/*  number of dirs and segs in dir */
	dcl     bitcnt		 fixed bin (24);	/*  bit count of branch entry */
	dcl     caller_auth		 bit (72) aligned;	/*  access_class of the process */
	dcl     code		 fixed bin (35);	/*  error code */
	dcl     dir_switches	 bit (6);		/*  and for dirs */
	dcl     dir_lk_switches	 bit (6);		/* and for dirs and links only */
	dcl     dum72		 bit (72) aligned;	/*  dummy for time storage */
	dcl     ec		 fixed bin (35);	/*  return error code */
	dcl     grace_quota		 fixed bin;	/*  amount of quota in excess of used to leave of dir */
	dcl     i			 fixed bin;	/*  loop index */
	dcl     infqcnt		 fixed bin;	/*  no. of inferior dirs with terminal quota */
	dcl     key_path		 (2) char (168) int static init (">ddd>tape_pool", ">ddd>cards");
	dcl     keyword		 (2) char (168) int static init ("System_Tape_Pool", "System_Card_Pool");
	dcl     lc		 fixed bin;	/*  numbe of links in dir */
	dcl     limit		 fixed bin (71);	/*  max age of segment to be deleted */
	dcl     mask		 bit (36) aligned;
	dcl     mask_set		 bit (1) aligned;
	dcl     msdays		 fixed bin (71);	/*  age in microseconds */
	dcl     need_priv		 bit (1) int static;/* on if the process is upgraded WRT root */
	dcl     no_of_keywords	 fixed bin init (2);/*  number of known keywords */
	dcl     now		 fixed bin (71);	/*  time of day in clock_ terms */
	dcl     old_mask		 bit (36) aligned;
	dcl     path		 char (168);	/* pathname of personid dir */
	dcl     person_path		 char (168);	/*  pathname of personid dir */
	dcl     personid		 char (32);
	dcl     pool_access_class	 bit (72) aligned int static;
						/*  access class of the pool dirs */
	dcl     pool_dir_parent	 char (168);	/*  dir portion of pool root */
	dcl     pool_dirname	 char (32);	/*  entry portion of pool root */
	dcl     pool_root_dir	 char (168);	/*  pool root directory */
	dcl     priv_code		 fixed bin (35) init (1);
	dcl     quota		 fixed bin;	/*  desired quota on the access class dir */
	dcl     quota_change	 fixed bin (18);	/*  amount of quota to move */
	dcl     root		 char (168);	/*  path of the pool root or keyword */
	dcl     root_quota		 fixed bin (18);	/*  quota on pool_root_dir */
	dcl     root_used		 fixed bin;	/*  pages used in pool_root_dir */
	dcl     rt		 char (*);
	dcl     seg_switches	 bit (6);		/*  delete_$path switches for segments */
	dcl     taccsw		 fixed bin (1);	/*  on if terminal quota on this dir */
	dcl     trp		 fixed bin (35);	/*  time-record product */
	dcl     tup		 bit (36) aligned;	/*  time trp last updated */
	dcl     type		 fixed bin (2);	/*  branch type from status_minf */
	dcl     (adumdir, pdumdir)	 char (168);	/*  pathnames */
	dcl     (aname, pname, sname)	 char (32);	/*  directory and segment names */
	dcl     (area_ptr, eptr, nptr, aep, peptr, pnptr, pep, septr, snptr, sep)
				 ptr init (null);
	dcl     (j, k)		 fixed bin;	/*  loop indices */
	dcl     (no_of_adirs, no_of_pdirs, no_of_segs)
				 fixed bin;
	dcl     (person_del_count, seg_del_count)
				 fixed bin;	/*  number of deletes performed */

	dcl     1 create_info	 aligned like create_branch_info;
						/* real storage for the create branch structure */

%include create_branch_info;

	dcl     acl_count		 fixed bin;	/*  number of acl entries */

	dcl     1 dir_acl		 (2) aligned,	/*  ACL structure for hcs_ entries */
		2 access_name	 char (32),	/*  access name */
		2 dir_modes	 bit (36),	/*  sma for the dir, bits 0,1,2 resp. */
		2 status_codes	 fixed bin (35);	/*  status for the access_name */

	dcl     entries		 (bc + lc) bit (144) aligned based;

	dcl     1 branch		 aligned based,
	        ( 2 type		 bit (2),
		2 nname		 bit (16),
		2 nindex		 bit (18),
		2 dtm		 bit (36),
		2 dtu		 bit (36),
		2 mode		 bit (5),
		2 pad		 bit (13),
		2 records		 bit (18)
		)		 unaligned;

	dcl     names		 (1000) char (32) aligned based;

	dcl     (addr, clock, divide, fixed, index, max, min, null, rtrim, substr, unspec)
				 builtin;

	dcl     (any_other, cleanup)	 condition;

	dcl     1 status_info	 aligned,
	        ( 2 type		 bit (2),
		2 nnames		 bit (16),
		2 nrp		 bit (18),
		2 dtm		 bit (36),
		2 dtu		 bit (36),
		2 mode		 bit (5),
		2 pad1		 bit (13),
		2 records		 bit (18),
		2 dtd		 bit (36),
		2 dtem		 bit (36),
		2 pad2		 bit (36),
		2 curlen		 bit (12),
		2 bitcnt		 bit (24),
		2 did		 bit (4),
		2 pad3		 bit (4),
		2 copysw		 bit (9),
		2 pad4		 bit (9),
		2 rbs		 (0:2) bit (6),
		2 uid		 bit (36)
		)		 unaligned;


init:
     entry (rt, quota, access, ec);			/*  first entry point called by a process managing pools */

/*  This entry requires that the caller have access to the system_privilege_ gate  */

	root = rt;

	call parse_root;

	call expand_pathname_ (pool_root_dir, pool_dir_parent, pool_dirname, ec);
	if ec ^= 0
	then return;				/*  trouble? */

	call hcs_$get_access_class (pool_dir_parent, pool_dirname, pool_access_class, ec);
						/*  used to determine if pool exists */
	if ec ^= 0
	then return;				/*  it doesn't, can't continue */

	if aim_check_$equal (caller_auth, pool_access_class)
	then need_priv = "0"b;
	else need_priv = "1"b;			/* must be able to call system_privilege_ gate */

	call hcs_$get_access_class (pool_root_dir, access_class_dir, pool_access_class, code);
						/*  dir already exist */

	if code = 0
	then do;					/*  yes, were through */
		if ^aim_check_$equal (caller_auth, pool_access_class)
		then do;
			ec = error_table_$ai_restricted;
			return;
		     end;
		acl_count = 1;
		dir_acl (1).dir_modes = "111"b || (33)"0"b;
		dir_acl (1).access_name = get_group_id_$tag_star ();
		mask = (36)"0"b;
		mask_set = "0"b;
		on cleanup call clean_up;
		on any_other go to condition_error;
		if need_priv
		then do;				/* only set the privileges when needed */
			call hcs_$set_ips_mask (mask, old_mask);
			mask_set = "1"b;
			call system_privilege_$dir_priv_on (priv_code);
		     end;
		call hcs_$add_dir_acl_entries (pool_root_dir, access_class_dir, addr (dir_acl), acl_count, ec);

		if priv_code = 0
		then do;				/*  be sure we reset privileges as found */
			call system_privilege_$dir_priv_off (priv_code);
			priv_code = 1;		/*  so we won't do it again */
		     end;

		revert any_other;			/*  we don't want to catch ips signals */

		if mask_set
		then do;
			mask_set = "0"b;
			call hcs_$set_ips_mask (old_mask, mask);
						/*  let'er rip */
		     end;

		return;
	     end;

	if code = error_table_$noentry
	then do;					/*  have to create it */
						/*  build branch structure */

		create_info.version = create_branch_version_2;
		create_info.copy_sw = "0"b;
		create_info.chase_sw = "0"b;		/* we should never chase a link to create */
		create_info.priv_upgrade_sw = "0"b;	/* not a ring 1 special seg */
		create_info.parent_ac_sw = "0"b;	/* we will give the access class */
		create_info.mbz1 = (31)"0"b;		/* this must be zero */
		create_info.bitcnt = 0;
		create_info.mbz2 = (33)"0"b;
		create_info.dir_sw = "1"b;
		create_info.mode = "100"b;
		create_info.userid = "*.*.*";		/* always give "s" to *.*.* */
		i = cu_$level_get ();		/* to get around a compiler bug */
		create_info.rings (*) = i;
		create_info.quota = quota;
		create_info.dir_quota = max (10, divide (quota, 10, 17));
		pool_access_class = caller_auth;	/* save this for future calls */
		create_info.access_class = pool_access_class;

		mask_set = "0"b;			/*  info to the handler */
		mask = (36)"0"b;

		on cleanup call clean_up;
		on any_other go to condition_error;

		if need_priv
		then do;				/* only when we need to */
			call hcs_$set_ips_mask (mask, old_mask);
			mask_set = "1"b;

			call system_privilege_$dir_priv_on (priv_code);
		     end;

create_branch:
		call hcs_$create_branch_ (pool_root_dir, access_class_dir, addr (create_info), code);

		if code = error_table_$invalid_move_qmax
		then if create_info.dir_quota = 0
		     then go to error;
		     else do;			/* try create without dir quota */
			     create_info.dir_quota = 0;
			     go to create_branch;
			end;
		else if code ^= 0
		then go to error;			/*  unable to create */

		acl_count = 2;			/*  set the ACL of access_class_dir */
		dir_acl (1).access_name = get_group_id_$tag_star ();
						/*  sma for *.SysDaemon.* */
		dir_acl (1).dir_modes = "111"b || (33)"0"b;
		dir_acl (2).dir_modes = "100"b || (33)"0"b;
						/* there is only s to *.*.* at this level */
		dir_acl (2).access_name = "*.*.*";

		call hcs_$add_dir_acl_entries (pool_root_dir, access_class_dir, addr (dir_acl), acl_count, code);

		if code ^= 0
		then go to error;

		if priv_code = 0
		then /* if we set the priv, reset it */
		     call system_privilege_$dir_priv_off (priv_code);

		priv_code = 1;			/* so we don't try again */

		revert any_other;			/* let ips signals fall through */

		if mask_set
		then do;
			mask_set = "0"b;
			call hcs_$set_ips_mask (old_mask, mask);
						/* restore the mask as we found it */
		     end;

		dir_acl (2).dir_modes = access & "100"b || (33)"0"b;
						/* set initial ACL as caller requested (limit = s) */

		call hcs_$add_dir_inacl_entries (pool_root_dir, access_class_dir, addr (dir_acl), acl_count, 4, ec);

		return;
	     end;

	go to error;

open_user_pool:
     entry (rt, a_personid, a_path, ec);

	personid = a_personid;
	root = rt;

	path, a_path = "";

	call parse_root;				/*  determine the pool root directory name */

	access_class_path = pathname_ (pool_root_dir, access_class_dir);

/*	see if there is sufficient quota to create the person directory */

	call hcs_$quota_get (access_class_path, access_quota, trp, tup, infqcnt, taccsw, access_used, ec);
	if ec ^= 0
	then return;				/* OOPS */

	if access_quota <= access_used
	then /* cover all bets, must be greater */
	     call add_quota (root, (access_used - access_quota) + 2, ec);
						/* try for quota of 2 pages */
						/* if not enough quota, keep going..user's dir may exist */
						/* don't check the code */

/*  build create_branch_ structure   */

	create_info.version = create_branch_version_2;
	create_info.copy_sw = "0"b;
	create_info.chase_sw = "0"b;			/* don't want to chase any links */
	create_info.priv_upgrade_sw = "0"b;		/* not a ring 1 special seg */
	create_info.mbz1 = "0"b;			/* must be zero */
	create_info.mbz2 = (33)"0"b;
	create_info.bitcnt = 0;
	create_info.dir_sw = "1"b;
	create_info.mode = "100"b;			/* new dir will have "s" to personid at the start */
	i = cu_$level_get ();			/* to get around a compiler bug */
	create_info.rings (*) = i;
	create_info.userid = substr (personid, 1, index (personid, " ") - 1) || ".*.*";
	create_info.quota = 0;
	create_info.dir_quota = 0;
	create_info.access_class = caller_auth;		/* we always run at the callers authorization */

	call hcs_$create_branch_ (access_class_path, personid, addr (create_info), ec);

	if ec = error_table_$namedup | ec = 0
	then do;					/* keep going as long as it is there */

		acl_count = 2;
		dir_acl (1).dir_modes = "111"b || (33)"0"b;
		dir_acl (1).access_name = get_group_id_$tag_star ();
		dir_acl (2).dir_modes = "100"b || (33)"0"b;
						/* give the user only s permission */
		dir_acl (2).access_name = rtrim (personid) || ".*.*";
						/* so he can't delete while we are writing */
		call hcs_$add_dir_acl_entries (access_class_path, personid, addr (dir_acl), acl_count, ec);

		if ec ^= 0
		then return;

		person_path = pathname_ (access_class_path, personid);
						/*  build pathname */
		a_path = person_path;		/*  quota set to zero, give user the pathname */
		ec = 0;				/*  return good status */
		return;
	     end;
	return;					/*  code was not namedup or 0 */



add_quota:
     entry (rt, quota, ec);

/*  This entry requires that the caller have access to the system_privilege_ gate */

	ec = 0;					/* be ready for a clean exit */
	if quota = 0
	then return;				/*  meaningless call */

	root = rt;

	call parse_root;				/*  determine the pool_root_dir */

	if quota < 0
	then do;					/*  user wants to move quota back to pool_root_dir */

		access_class_path = pathname_ (pool_root_dir, access_class_dir);
		call hcs_$quota_get (access_class_path, access_quota, trp, tup, infqcnt, taccsw, access_used, ec);
						/*  get quota info for the dir */

		if ec ^= 0
		then return;

		if access_used = 0
		then access_used = 1;		/* min used = 1, can't make quota non-terminal */

		if access_used >= access_quota
		then do;				/* any quota to move? */
			if -quota >= access_quota
			then ec = error_table_$invalid_move_quota;
						/* choose an error code */
			else ec = error_table_$rqover;
			return;
		     end;

		quota_change = -(min (-quota, (access_quota - access_used)));
						/*  move only what is not in use */

	     end;
	else do;					/* move quota to the access class pool dir */

		call hcs_$quota_get (pool_root_dir, root_quota, trp, tup, infqcnt, taccsw, root_used, ec);
						/*  get quota data on pool_root_dir */

		if ec ^= 0
		then return;

		if root_used = 0
		then root_used = 1;			/* min used = 1, can't make root non-terminal */

		if root_used >= root_quota
		then do;				/* see if there is any to move */
			if quota >= root_quota
			then ec = error_table_$invalid_move_quota;
						/* choose an error code */
			else ec = error_table_$rqover;
			return;
		     end;

		quota_change = min (root_quota - root_used, quota);
						/*  can move only up to used */
	     end;

	if need_priv
	then /* only use the privileged call if needed */
	     call priv_move_quota_ ((pool_root_dir), (access_class_dir), (quota_change), ec);
	else call hcs_$quota_move (pool_root_dir, access_class_dir, quota_change, ec);

	return;

close_user_pool:
     entry (rt, a_personid, quota, access, ec);

	root = rt;
	personid = a_personid;
	call parse_root;				/*  determine the pool root dir */

	access_class_path = pathname_ (pool_root_dir, access_class_dir);
	acl_count = 1;				/*  replace the acl for Person.*.* */
	dir_acl (1).access_name = rtrim (personid) || ".*.*";
	dir_acl (1).dir_modes = access & "110"b || (33)"0"b;
						/*  "sm" limit on caller specified access */
	call hcs_$add_dir_acl_entries (access_class_path, personid, addr (dir_acl), acl_count, ec);
	if ec ^= 0
	then return;
	return;					/*  all done */



find_pool:
     entry (rt, ac, a_personid, a_path, ec);

	path, a_path = "";
	personid = a_personid;
	root = rt;

	call parse_root;				/*  find the pool_root_dir */

	call convert_authorization_$encode (ac, access_class_dir);
						/*  might be asking about some other level */

	if access_class_dir = ""
	then access_class_dir = "system_low";

	access_class_path = pathname_ (pool_root_dir, access_class_dir);

	call hcs_$status_minf (access_class_path, personid, 0, type, bitcnt, code);

	if code ^= 0
	then do;					/*  non-zero code may be useful */

		if code = error_table_$noentry | code = error_table_$no_dir
		then do;				/*  access_class_dir>personid does not exist */
			code = error_table_$noentry;
return_path:
			a_path = pathname_ (access_class_path, personid);
			ec = code;		/*  return the correct path and tell him it doesn't exist */
			return;
		     end;

		a_path = "";			/*  don't give him a path for any other error */
		ec = code;			/*  copy the code and let the user figure it out */
		return;

	     end;

/*  zero code means we found a branch */

	if type = 2
	then go to return_path;			/*  must be a directory, however */

	ec = error_table_$notadir;			/*  if a seg or link, tell him not found */
	a_path = "";
	return;



clean_pool:
     entry (rt, age, a_grace_quota, ec);		/*  garbage collection entry */

/*  This entry requires that the caller have access to the system_privilege_ gate */

/*  We will walk through the entire pool hierarchy deleting entries which should
   not be there or have been there too long */

	priv_code = 1;				/*  only reset privileges if set */
	mask_set = "0"b;				/*  we have not changed the ips mask yet */
	mask = (36)"0"b;

	on cleanup call clean_up;			/*  establish handlers for consistency */
	on any_other go to condition_error;

	call hcs_$set_ips_mask (mask, old_mask);	/*  don't want any interrupts */
	mask_set = "1"b;
	call system_privilege_$dir_priv_on (priv_code);

	root = rt;				/*  copy args */
	call parse_root;				/*  get pname and auth for caller */

	msdays = age * 86400000000;			/*  convert time to msecs */
	now = clock ();
	limit = now - msdays;

	grace_quota = max (0, a_grace_quota);		/* must be 0 or positive */
	area_ptr = get_system_free_area_ ();

	seg_switches = "100100"b;			/*  for force deleting segments only - no questions */
	dir_switches = "101000"b;			/*  deletes dirs only */
	all_switches = "101110"b;			/*  deletes everything */
	dir_lk_switches = "101010"b;			/*  deletes just directory or link */

	call hcs_$star_list_ (pool_root_dir, "*", 2, area_ptr, bc, lc, eptr, nptr, code);

	if code = error_table_$nomatch
	then do;					/*  empty pool */
empty:
		ec = 0;				/*  we did what was asked */
		if priv_code = 0
		then call system_privilege_$dir_priv_off (priv_code);
						/* undo what we did */
		priv_code = 1;
		revert any_other;			/*  now the handler can be reset */
		call clean_up;			/*  free storage and reset privileges */
		return;
	     end;

	if code ^= 0
	then go to error;				/*  all other codes are bad news */

	no_of_adirs = bc + lc;			/*  number of entries in pool */

start_adir_loop:
	do i = 1 to no_of_adirs;			/*  look at each entry in the pool root dir */

	     aep = addr (eptr -> entries (i));		/*  get ptr to an entry */
	     if aep -> branch.type ^= "10"b
	     then go to end_adir_loop;		/*  if not a dir, then skip it */

	     aname = nptr -> names (fixed (aep -> branch.nindex, 17));
						/*  get its name */
	     adumdir = pathname_ (pool_root_dir, aname);	/*  and make a pname */

	     call hcs_$star_list_ (adumdir, "*", 3, area_ptr, bc, lc, peptr, pnptr, code);
						/*  now look in it */

	     if code = error_table_$nomatch
	     then do;				/*  it is empty */
		     code = 0;
		     no_of_pdirs, person_del_count = 0;
		     go to start_pdir_loop;
		end;

	     if code ^= 0
	     then go to end_adir_loop;		/*  oh well, try the next one */

	     person_del_count = 0;			/*  its not empty, init the delete count */
	     no_of_pdirs = bc + lc;			/*  no of entries in the access_class_dir */

start_pdir_loop:
	     do j = 1 to no_of_pdirs;			/*  look at everything in this access_class_dir */
		pep = addr (peptr -> entries (j));	/*  get an entry */
		pname = pnptr -> names (fixed (pep -> branch.nindex, 17));
						/*  build a name */
		pdumdir = pathname_ (adumdir, pname);

		if pep -> branch.type ^= "10"b
		then do;				/*  if not a dir then delete it */
delete_pdir:
			call delete_$path (adumdir, pname, all_switches, "pool_manager_", code);
			if code = 0
			then person_del_count = person_del_count + 1;
						/*  bump the count */
			go to end_pdir_loop;
		     end;

		call hcs_$status_long (adumdir, pname, 0, addr (status_info), null, code);
		if code ^= 0
		then go to end_pdir_loop;		/* trouble, try the next one */

		dum72 = "0"b;			/*  see if we can delete it without looking at entries */
		substr (dum72, 21, 36) = status_info.dtem;
						/*  get the dtem */
		if dum72 < unspec (limit)
		then go to delete_pdir;		/*  is it old */

		call hcs_$star_list_ (pdumdir, "**", 3, area_ptr, bc, lc, septr, snptr, code);
						/* no, must search it */

		if code = error_table_$nomatch
		then do;				/*  empty? */
			code = 0;
			no_of_segs, seg_del_count = 0;
			go to start_seg_loop;
		     end;

		if code ^= 0
		then go to end_pdir_loop;		/*  keep trying */

		seg_del_count = 0;			/*  get ready to look at segs in the person dir */
		no_of_segs = bc + lc;
start_seg_loop:
		do k = 1 to no_of_segs;		/*  look at each entry in person dir */
		     sep = addr (septr -> entries (k)); /*  get the entry */
		     sname = snptr -> names (fixed (sep -> branch.nindex, 17));
		     if sep -> branch.type ^= "01"b
		     then do;			/*  delete if not a segment */
			     call delete_$path (pdumdir, sname, dir_lk_switches, "pool_manager_", code);
			     if code = 0
			     then do;		/* we deleted it */
				     seg_del_count = seg_del_count + 1;
				     go to end_seg_loop;
				end;
			     if code ^= error_table_$nondirseg
			     then go to end_seg_loop; /* someone using it */
						/* otherwise, it was an MSF */
			end;


		     dum72 = "0"b;
		     substr (dum72, 21, 36) = sep -> branch.dtm;
						/*  get its age */

		     if dum72 < unspec (limit)
		     then do;			/*  can we delete it */

			     call delete_$path (pdumdir, sname, seg_switches, "pool_manager_", code);
			     if code = 0
			     then seg_del_count = seg_del_count + 1;
						/*  bump the delete count */
			     call hcs_$quota_move (adumdir, pname, -fixed (sep -> branch.records), code);
						/* recover quota */
			end;
end_seg_loop:
		end;
		if seg_del_count = no_of_segs
		then do;				/*  is the dir empty */
			call delete_$path (adumdir, pname, dir_switches, "pool_manager_", code);
						/*  if so delete it */
			if code = 0
			then person_del_count = person_del_count + 1;
		     end;

end_pdir_loop:
		if septr ^= null
		then free septr -> entries;
		if snptr ^= null
		then free snptr -> names;

	     end;

	     if person_del_count = no_of_pdirs
	     then do;				/*  is the access class dir empty */
		     call delete_$path (pool_root_dir, aname, dir_switches, "pool_manager_", code);
		     if code = 0
		     then go to end_adir_loop;	/* when deleted, we are done */
						/* otherwise try to move back to grace quota */
		end;

	     call hcs_$quota_get (adumdir, access_quota, trp, tup, infqcnt, taccsw, access_used, code);
	     if code ^= 0
	     then go to end_adir_loop;

	     quota_change = access_quota - max ((access_used + grace_quota), 1);
						/* adjust the quota */
	     if quota_change ^= 0
	     then /* if anything to move.... */
		call hcs_$quota_move (pool_root_dir, aname, (-quota_change), code);

end_adir_loop:
	     if peptr ^= null
	     then free peptr -> entries;
	     if pnptr ^= null
	     then free pnptr -> names;

	end;

	ec, code = 0;				/* just to be sure we say all is well */

	if priv_code = 0
	then call system_privilege_$dir_priv_off (priv_code);
	priv_code = 1;				/*  make it safe to revert the condition handler */

	revert any_other;				/* in case a condition occurs from clean_up */

	call clean_up;

	return;

/**/

error:
	ec = code;				/*  copy the status */

	if priv_code = 0
	then call system_privilege_$dir_priv_off (priv_code);
	priv_code = 1;

	revert any_other;

	call clean_up;

	return;					/*  and exit */


condition_error:					/*	Some condition occured.  Don't know the status of anything so we must */
						/*	return a failure code so we don't fool the caller */
	ec = error_table_$action_not_performed;

	if priv_code = 0
	then call system_privilege_$dir_priv_off (priv_code);
	priv_code = 1;

	revert any_other;				/* in case of a condition during clean_up */

	call clean_up;

	return;

parse_root:
     proc;

	do i = 1 to no_of_keywords;			/*  check for keyword match */
	     if root = keyword (i)
	     then go to hit;			/*  found a match */
	     else ;				/*  keep looking */
	end;

	pool_root_dir = root;			/*  must be a pathname */
	go to get_auth;				/*  determine the authorization */

hit:
	pool_root_dir = key_path (i);			/*  select the appropriate path */

get_auth:
	caller_auth = get_authorization_ ();		/*  get the access_class of the process */

	call convert_authorization_$encode (caller_auth, access_class_dir);
						/*  convert to a unique name */

	if access_class_dir = ""
	then access_class_dir = "system_low";

	return;


     end;


clean_up:
     proc;

/*  This internal proc is the handler for all conditions, cleanup, and a
   general tidying up routine.  However, if there is a default handler
   active which will call this, we are open to recursive errors or a tight loop.
   The freen_ proc could signal the area condition and there could be a
   linkage error on system_privilege_.  So, beware of the conditions at the
   time it is called.  */


	if priv_code = 0
	then call system_privilege_$dir_priv_off (priv_code);
						/*  turn priv off in case one is left */
	priv_code = 1;				/* don't do it again */

	if mask_set
	then do;

		mask_set = "0"b;			/* reset before any ips signal can interrupt */
		call hcs_$set_ips_mask (old_mask, mask);/* open the gate */

	     end;


	if septr ^= null
	then free septr -> entries;
	if snptr ^= null
	then free snptr -> names;
	if peptr ^= null
	then free peptr -> entries;
	if pnptr ^= null
	then free pnptr -> names;
	if eptr ^= null
	then free eptr -> entries;
	if nptr ^= null
	then free nptr -> names;


	return;
     end;

     end pool_manager_;
