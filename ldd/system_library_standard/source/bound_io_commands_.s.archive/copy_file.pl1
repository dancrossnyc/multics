/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


cpf: copy_file: procedure;

/*
   This command copies records from a structured input file to
   a structured output file.  If the input file is keyed, the
   keys may or may not be copied.  The input file may be copied
   either partially, or in its entirety.

   0) Created 01/13/76 by Ross E. Klinger
   1) Modified 10/4/83 by Charles Spitzer: let it copy keyed files with invalid descriptors
*/
	

/* DECLARATIONS */


/* control argument variables */
dcl  arg char (argL) based (argP),			/* argument string */
     argL fixed bin,				/* length of an argument string */
     argN fixed bin,				/* number of arguments */
     argP ptr,					/* ptr to an argument string */
     argX fixed bin,				/* index of argument currently being processed */
     max_argL fixed bin,				/* maximum length of an argument descriptor */
     numeric_arg fixed bin (35);			/* holds numeric value of an argument descriptor */


/* control argument validation variables */
dcl  input_type fixed bin,				/* -1 - undefined; 0 - I/O switch;  1 - attach description */
     output_type fixed bin,				/* -1 - undefined; 0 - I/O switch;  1 - attach description */
     copy_keys bit (1) aligned,			/* "0"b - no;  "1"b - yes */
     begin_cntl fixed bin,				/* -1 - undefined; 0 - from_idx;  1 - start */
     end_cntl fixed bin,				/* -1 - undefined; 0 - to;  1 - stop;  2 - count;  3 - all */
     msg_cntl fixed bin;				/* -1 - undefined; 0 - brief;  1 - long */


/* control argument validation types */
dcl  undefined fixed bin internal static options (constant) init (-1),
     isw fixed bin internal static options (constant) init (0),
    (osw, from_idx, to_idx, brief) fixed bin defined (isw),
     ids fixed bin internal static options (constant) init (1),
    (ods, start, stop, long) fixed bin defined (ids),
     count fixed bin internal static options (constant) init (2),
     all fixed bin internal static options (constant) init (3),
     yes bit (1) aligned internal static options (constant) init ("1"b),
     no bit (1) aligned internal static options (constant) init ("0"b);


/* control argument descriptor values */
dcl  input_switchname char (32),			/* input switch name */
     input_description char (256),			/* input attach description */
     output_switchname char (32),			/* output switch name */
     output_description char (256),			/* output attach description */
     from_idx_position fixed bin (35),			/* record position at which to begin copy */
     start_key char (256) varying,			/* record key at which to begin copying */
     to_idx_position fixed bin (35),			/* record position after which to stop copy */
     stop_key char (256) varying,			/* record key after which to stop copy */
     count_value fixed bin (35);			/* record count after which to stop copy */
	

/* I/O system variables */
dcl  input_iocbP ptr,				/* pointer to input I/O control block */
     input_open_mode fixed bin,			/* 4 - sequential_input :: 8 - keyed_sequential_input */
     output_iocbP ptr,				/* pointer to output I/O control block */
     output_open_mode fixed bin;			/* 5 - sequential_output :: 9 - keyed_sequential_output */


/* opening mode constants */
dcl  sequential_input fixed bin internal static options (constant) init (4),
     sequential_output fixed bin internal static options (constant) init (5),
     keyed_sequential_input fixed bin internal static options (constant) init (8),
     keyed_sequential_output fixed bin internal static options (constant) init (9);


/* I/O cleanup switches */
dcl  close_input bit (1) aligned,			/* close input switch before exiting */
     detach_input bit (1) aligned,			/* detach input switch before exiting */
     close_output bit (1) aligned,			/* close output switch before exiting */
     detach_output bit (1) aligned;			/* detach output switch before exiting */


/* record copying variables */
dcl  recordL fixed bin (21),				/* record length */
     recordP (1) ptr,				/* pointer to record buffer segment */
     record_count fixed bin (35),			/* number of records copied */
     record_key char (256) varying,			/* key of record being copied */
     max_recordL fixed bin (21) init (sys_info$max_seg_size * 4), /* in characters */
     sys_info$max_seg_size fixed bin (35) external static,
     can_rewrite bit (1) aligned,			/* "0"b - no  :: "1"b - yes */
     read_keys bit (1) aligned;			/* "0"b - no :: "1"b - yes */


/* Error message text variables */
dcl  name char (9) internal static options (constant) init ("copy_file"),
     error_text char (256) varying,			/* holds message for output via com_err_ */
     end_argument (0:3) char (6) internal static options (constant)
     init ("-to", "-stop", "-count", "-all"),
     input_open_string char (24) varying,
     output_open_string char (24) varying;


/*  Miscellaneous storage */
dcl  code fixed bin (35),				/* error code */
     unique_string char (15);				/* holds value returned by unique_string_ */


/*  Conditions and builtin functions */
dcl  cleanup condition,
    (addr, before, binary, null, substr, unspec, verify) builtin;
	

/*  Error codes */
dcl (error_table_$action_not_performed,
     error_table_$bad_arg,
     error_table_$badopt,
     error_table_$end_of_info,
     error_table_$fatal_error,
     error_table_$inconsistent,
     error_table_$key_order,
     error_table_$no_key,
     error_table_$no_record,
     error_table_$noarg,
     error_table_$nodescr,
     error_table_$not_attached,
     error_table_$not_closed,
     error_table_$wrong_no_of_args) fixed bin (35) external static;


/*  External procedures */
dcl  com_err_ ext entry options (variable),
     cu_$arg_count ext entry (fixed bin),
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     get_system_free_area_ entry() returns(ptr),
     get_temp_segments_ ext entry (char (*), (*) ptr, fixed bin (35)),
     ioa_ ext entry options (variable),
     iox_$attach_ioname ext entry (char (*), ptr, char (*), fixed bin (35)),
     iox_$close ext entry (ptr, fixed bin (35)),
     iox_$control entry (ptr, char(*), ptr, fixed bin(35)),
     iox_$detach_iocb ext entry (ptr, fixed bin (35)),
     iox_$destroy_iocb entry (ptr, fixed bin(35)),
     iox_$look_iocb ext entry (char (*), ptr, fixed bin (35)),
     iox_$open ext entry (ptr, fixed bin, bit (1) aligned, fixed bin (35)),
     iox_$position ext entry (ptr, fixed bin, fixed bin, fixed bin (35)),
     iox_$read_key ext entry (ptr, char (256) varying, fixed bin (21), fixed bin (35)),
     iox_$read_record ext entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
     iox_$rewrite_record ext entry (ptr, ptr, fixed bin (21), fixed bin (35)),
     iox_$seek_key ext entry (ptr, char (256) varying, fixed bin (21), fixed bin (35)),
     iox_$write_record ext entry (ptr, ptr, fixed bin (21), fixed bin (35)),
     release_temp_segments_ ext entry (char (*), (*) ptr, fixed bin (35)),
     unique_chars_ ext entry (bit (*)) returns (char (15));
	

/* iocb attach description variable */
dcl 1 input_attach_desc based (input_iocbP -> iocb.attach_descrip_ptr),
    2 len fixed bin (17),
    2 string char (0 refer (input_attach_desc.len));
dcl io_module char (32);

/* iocb open description variables */
dcl 1 input_open_desc based (input_iocbP -> iocb.open_descrip_ptr),
    2 len fixed bin (17),
    2 string char (0 refer (input_open_desc.len));
dcl 1 output_open_desc based (output_iocbP -> iocb.open_descrip_ptr),
    2 len fixed bin (17),
    2 string char (0 refer (output_open_desc.len));
dcl  open_mode char (32) varying;			/* hold open mode from an open description */

/* Key copying variables */
dcl  areap ptr,					/* pointer to my_area to allocate in */
     my_area area based (areap),			/* where structures are allocated in */
     only_keys bit (1) aligned,			/* we only copy keys and no records */
    1 info like indx_info;				/* place to put file_status info */

%include ak_info;
%include vfs_info;
%include iocb;
	

/* PREPARATORY CONTROL ARGUMENT PROCESSING */

	input_type, output_type, begin_cntl, end_cntl, msg_cntl = undefined;
	copy_keys = no;


/* PROCESS AND VALIDATE CONTROL ARGUMENTS */

	call cu_$arg_count (argN);			/* get number of arguments */
	if argN < 4 then do;
	     call com_err_ (error_table_$wrong_no_of_args, name,
		"^/Type ""help copy_file -section Syntax"" for details of use.");
	     return;
	end;

	do argX = 1 to argN;			/* look at each argument */
	     call cu_$arg_ptr (argX, argP, argL, code);
	     if code ^= 0 then do;
		call com_err_ (code, name);
		return;
	     end;

	     if arg = "-input_switch" | arg = "-isw" then do;
		if input_type ^= undefined then do;
MULTIPLE_INPUT:	     error_text = "Multiple input file specifications.";
		     go to INCONSISTENT_ARGUMENT_ERROR;
		end;
		else input_type = isw;
		call get_string_arg_32;
		input_switchname = arg;
	     end;

	     else if arg = "-input_description" | arg = "-ids" then do;
		if input_type ^= undefined then go to MULTIPLE_INPUT;
		else input_type = ids;
		call get_string_arg_256;
		input_description = arg;
	     end;

	     else if arg = "-output_switch" | arg = "-osw" then do;
		if output_type ^= undefined then do;
MULTIPLE_OUTPUT:	     error_text = "Multiple output file specifications.";
		     go to INCONSISTENT_ARGUMENT_ERROR;
		end;
		else output_type = osw;
		call get_string_arg_32;
		output_switchname = arg;
	     end;

	     else if arg = "-output_description" | arg = "-ods" then do;
		if output_type ^= undefined then go to MULTIPLE_OUTPUT;
		else output_type = ods;
		call get_string_arg_256;
		output_description = arg;
	     end;
	     
	     else if arg = "-keyed" then do;
		if copy_keys then do;
		     error_text = "Multiple ""-keyed"" arguments.";
		     go to INCONSISTENT_ARGUMENT_ERROR;
		end;
		else copy_keys = yes;
	     end;

	     else if arg = "-from" | arg = "-fm" then do;
		if begin_cntl ^= undefined then do;
MULTIPLE_BEGIN:	     error_text = "Multiple initial record specifications.";
		     go to INCONSISTENT_ARGUMENT_ERROR;
		end;
		else begin_cntl = from_idx;
		call get_numeric_arg;
		from_idx_position = numeric_arg;
	     end;

	     else if arg = "-start" | arg = "-sr" then do;
		if begin_cntl ^= undefined then go to MULTIPLE_BEGIN;
		else begin_cntl = start;
		call get_string_arg_256;
		start_key = arg;
	     end;

	     else if arg = "-to" then do;
		if end_cntl ^= undefined then do;
MULTIPLE_END:	     error_text = "Multiple terminal record specifications.";
		     go to INCONSISTENT_ARGUMENT_ERROR;
		end;
		else end_cntl = to_idx;
		call get_numeric_arg;
		to_idx_position = numeric_arg;
	     end;

	     else if arg = "-stop" | arg = "-sp" then do;
		if end_cntl ^= undefined then go to MULTIPLE_END;
		else end_cntl = stop;
		call get_string_arg_256;
		stop_key = arg;
	     end;

	     else if arg = "-count" | arg = "-ct" then do;
		if end_cntl ^= undefined then go to MULTIPLE_END;
		else end_cntl = count;
		call get_numeric_arg;
		count_value = numeric_arg;
	     end;

	     else if arg = "-all" | arg = "-a" then do;
		if end_cntl ^= undefined then go to MULTIPLE_END;
		else end_cntl = all;
	     end;
	     
	     else if arg = "-brief" | arg = "-bf" then do;
		if msg_cntl ^= undefined then do;
MULTIPLE_MSG:	     error_text = "Multiple message length specifications.";
		     go to INCONSISTENT_ARGUMENT_ERROR;
		end;
		else msg_cntl = brief;
	     end;

	     else if arg = "-long" | arg = "-lg" then do;
		if msg_cntl ^= undefined then go to MULTIPLE_MSG;
		else msg_cntl = long;
	     end;

	     else do;
		call com_err_ (error_table_$badopt, name, "^a", arg);
		return;
	     end;
	end;
	

/* CHECK REQUIREMENTS AND APPLY DEFAULTS */

	if input_type = undefined then do;
	     error_text = "Either ""-input_switch"" or ""-input_description"" is required.";
	     go to NO_ARGUMENT_ERROR;
	end;

	if output_type = undefined then do;
	     error_text = "Either ""-output_switch"" or ""-output_description"" is required.";
	     go to NO_ARGUMENT_ERROR;
	end;


	if msg_cntl = undefined then msg_cntl = long;	/* default is -LONG */

	if end_cntl = undefined then end_cntl = all;	/* default is -ALL */
	else if end_cntl = to_idx then do;		/* -to was specified */
	     if begin_cntl ^= from_idx then do;		/* -from was not specified */
		error_text = """-from"" must be used with ""-to"".";
		go to NO_ARGUMENT_ERROR;
	     end;
	     else do;				/* -from was specified */
		if to_idx_position < from_idx_position then do;
		     error_text = """-to"" position must be greater then or equal to ""-from"" position.";
		     go to INCONSISTENT_ARGUMENT_ERROR;
		end;
	     end;
	end;

	if begin_cntl = start & end_cntl = stop then do;	/* -start and -stop */
	     if stop_key < start_key then do;
		error_text = """-stop"" key must be greater than or equal to ""-start"" key.";
		go to INCONSISTENT_ARGUMENT_ERROR;
	     end;
	end;


	if begin_cntl = start | end_cntl = stop | copy_keys then do;
	     input_open_mode = keyed_sequential_input;
	     input_open_string = "keyed_sequential_input";
	     read_keys = yes;
	end;
	else do;
	     input_open_mode = sequential_input;
	     input_open_string = "sequential_input";
	     read_keys = no;
	end;

	if copy_keys then do;
	     output_open_mode = keyed_sequential_output;
	     output_open_string = "keyed_sequential_output";
	end;
	else do;
	     output_open_mode = sequential_output;
	     output_open_string = "sequential_output";
	end;
	

/*  PREPARATORY I/O PROCESSING */

	can_rewrite, close_input, detach_input, close_output, detach_output = no;
	recordP, gk_info_ptr, ak_info_ptr = null;
	unique_string = "";
	on cleanup call cleaner;			/* tidy up I/O switches and buffer segment */

/* INPUT FILE PROCESSING - I/O SWITCH ALREADY ATTACHED */

	if input_type = isw then do;
	     call iox_$look_iocb (input_switchname, input_iocbP, code); /* get the iocb pointer */
	     if code ^= 0 then do;
BAD_INPUT_ATTACH:	call com_err_ (code, name, """^a""", input_switchname);
		return;
	     end;

	     call iox_$open (input_iocbP, input_open_mode, "0"b, code);

	     if code = 0 then close_input = yes;	/* we opened, so we close */

	     else if code = error_table_$not_attached then go to BAD_INPUT_ATTACH;

	     else if code = error_table_$not_closed then do; /* NOT AN ERROR - switch can be open */

		open_mode = before (input_open_desc.string, " ");
		if read_keys then do;
		     if open_mode = "keyed_sequential_input" then;
		     else if open_mode = "keyed_sequential_update" then;
		     else do;
			error_text = "keyed sequential";
BAD_INPUT_OPEN:		call com_err_ (error_table_$action_not_performed, name,
			     "^/Input switch ""^a"" must be closed^/and re-opened for ^a access.",
			     input_switchname, error_text);
			return;
		     end;
		end;
		else do;
		     if open_mode = "sequential_input" then;
		     else if open_mode = "sequential_input_output" then;
		     else if open_mode = "keyed_sequential_input" then;
		     else if open_mode = "keyed_sequential_update" then;
		     else do;
			error_text = "sequential";
			go to BAD_INPUT_OPEN;
		     end;
		end;

	     end;

	     else do;				/* some other error code */
		call com_err_ (code, name, "^/Unable to open input switch ""^a"" for ^a.",
		     input_switchname, input_open_string);
		return;
	     end;
	end;
	

/*  INPUT FILE PROCESSING - I/O SWITCH NOT ALREADY ATTACHED */

	else do;

	     unique_string = unique_chars_ ("0"b);

	     call iox_$attach_ioname (unique_string || ".copy_file.input", input_iocbP, input_description, code);

	     if code = 0 then detach_input = yes;	/* we attached, so we detach */

	     else do;
		call com_err_ (code, name,
		     "^/Unable to attach input file using attach description^/""^a"".", input_description);
		return;
	     end;

	     call iox_$open (input_iocbP, input_open_mode, "0"b, code);

	     if code = 0 then close_input = yes;	/* we opened, so we close */

	     else do;
		call com_err_ (code, name, "^/Unable to open input file for ^a.", input_open_string);
		go to CLEANUP_AND_RETURN;
	     end;

	end;



/*  INPUT FILE POSITIONING */

	if begin_cntl = from_idx then do;		/* must be able to position to a specific record */

	     if ^close_input then do;			/* input switch was open, position unknown */
		call iox_$position (input_iocbP, -1, 0, code); /* move to 1st record */
		if code ^= 0 then do;
BAD_INPUT_POSITION:	     call com_err_ (error_table_$no_record, name,
			"^/Unable to position input file to record ^d.", from_idx_position);
		     go to CLEANUP_AND_RETURN;
		end;
	     end;

	     call iox_$position (input_iocbP, 0, from_idx_position - 1, code); /* skips from_idx_position - 1 records */
	     if code ^= 0 then go to BAD_INPUT_POSITION;

	end;

	else if begin_cntl = start then do;		/* must seek to a specific key */
	     call iox_$seek_key (input_iocbP, start_key, 0, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "^/Starting key ""^a"" not found in input file.", start_key);
		go to CLEANUP_AND_RETURN;
	     end;

	end;
	

/*  OUTPUT FILE PROCESSING - I/O SWITCH ALREADY ATTACHED */

	if output_type = osw then do;
	     call iox_$look_iocb (output_switchname, output_iocbP, code);
	     if code ^= 0 then do;
BAD_OUTPUT_ATTACH:	call com_err_ (code, name, """^a""", output_switchname);
		go to CLEANUP_AND_RETURN;
	     end;

	     call iox_$open (output_iocbP, output_open_mode, "0"b, code);
	     if code = 0 then close_output = yes;	/* we opened, so we close */
	     else if code = error_table_$not_attached then go to BAD_OUTPUT_ATTACH;
	     else if code = error_table_$not_closed then do; /* NOT AN ERROR - switch can be open */
		open_mode = before (output_open_desc.string, " ");
		if copy_keys then do;
		     if open_mode = "keyed_sequential_output" then;
		     else if open_mode = "direct_output" then;
		     else if open_mode = "keyed_sequential_update" then can_rewrite = yes;
		     else if open_mode = "direct_update" then can_rewrite = yes;
		     else do;
			error_text = "keyed sequential or direct";
BAD_OUTPUT_OPEN:		call com_err_ (error_table_$action_not_performed, name,
			     "Output switch ""^a"" must be closed^/and re-opened for ^a access.",
			     output_switchname, error_text);
			go to CLEANUP_AND_RETURN;
		     end;
		end;
		else do;
		     if open_mode = "sequential_output" then;
		     else if open_mode = "sequential_input_output" then;
		     else do;
			error_text = "sequential";
			go to BAD_OUTPUT_OPEN;
		     end;
		end;
	     end;
	     else do;
		call com_err_ (code, name, "^/Unable to open output switch ""^a"" for ^a.",
		     output_switchname, output_open_string);
		go to CLEANUP_AND_RETURN;
	     end;
	end;
	

/* OUTPUT FILE PROCESSING - I/O SWITCH NOT ALREADY ATTACHED */

	else do;
	     if unique_string = "" then unique_string = unique_chars_ ("0"b);

	     call iox_$attach_ioname (unique_string || ".copy_file.output", output_iocbP, output_description, code);
	     if code = 0 then detach_output = yes;	/* we attached, we detach */
	     else do;
		call com_err_ (code, name,
		     "^/Unable to attach output file using attach description^/""^a"".", output_description);
		go to CLEANUP_AND_RETURN;
	     end;

	     call iox_$open (output_iocbP, output_open_mode, "0"b, code);
	     if code = 0 then close_output = yes;	/* we opened, so we close */
	     else do;
		call com_err_ (code, name, "^/Unable to open output file for ^a.", output_open_string);
		go to CLEANUP_AND_RETURN;
	     end;
	end;



/* BUFFER SEGMENT PROCESSING */

	call get_temp_segments_ (name, recordP, code);
	if recordP (1) = null then do;
	     call com_err_ (code, name, "^/Unable to create temporary buffer segment in process directory.");
	     go to CLEANUP_AND_RETURN;
	end;
	

	if end_cntl = to_idx then count_value = to_idx_position - from_idx_position + 1;
	record_count = 0;

	if copy_keys then do;
	     io_module = before (input_attach_desc.string, " ");
	     if io_module ^= "vfile_ " then do;
		call com_err_ (0, name, "Attempt to copy keyed file that is not open through the vfile_ I/O module.");
		goto CLEANUP_AND_RETURN;
		end;
	     info.info_version = vfs_version_1;
	     call iox_$control (input_iocbP, "file_status", addr (info), code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "Attempting to get the input file status.");
		goto CLEANUP_AND_RETURN;
		end;
	     if info.type ^= 4 then do;
		call com_err_ (0, name, "The input ^[switch ^a^;attach description ^s^a^] must point to a keyed file.",
		     input_type=isw, input_switchname, input_description);
		goto CLEANUP_AND_RETURN;
		end;
	     if info.records = 0 then do;		/* copy only keys */
		code = 0;
		only_keys = yes;

KEY_CNTL (3):
KEY_LOOP:
		call get_key_descriptor;
		if code = error_table_$no_key | code = error_table_$no_record | code = error_table_$end_of_info
		then goto END_OF_FILE;
		else if code = 0 then do;
			call add_key;
			if code ^= 0 then goto ADD_KEY_ERROR;
			end;
		     else goto GET_KEY_ERROR;

		record_count = record_count + 1;
		call iox_$position (input_iocbP, 0, 1, code);
		if code = error_table_$end_of_info
		then goto END_OF_FILE;
		else if code ^= 0 then goto IO_ERROR;

		goto KEY_CNTL (end_cntl);

KEY_CNTL (1):
		if record_key = stop_key then goto DONE;
		else goto KEY_LOOP;

KEY_CNTL (2):
KEY_CNTL (0):
		if record_count = count_value then goto DONE;
		else goto KEY_LOOP;
		end;
	     end;
	

/* Copy the records and associated keys from the input file */

RECORD_CNTL (3):
RECORD_LOOP:
	if read_keys then do;
	     call iox_$read_key (input_iocbP, record_key, 0, code);
	     if code = 0 then;
	     else if code = error_table_$end_of_info then go to END_OF_FILE;
	     else go to READ_ERROR;
	     end;

	call iox_$read_record (input_iocbP, recordP (1), max_recordL, recordL, code);
	if code = 0 then;
	else if code = error_table_$end_of_info then go to END_OF_FILE;
	else go to READ_ERROR;

	if copy_keys then do;
	     call iox_$seek_key (output_iocbP, record_key, 0, code);
	     if code = error_table_$no_record then;	/* THIS IS CORRECT - means key not in file */
	     else if code = error_table_$key_order then go to OUTPUT_KEY_ERROR;
	     else if code = 0 then do;		/* duplicate key */
		if can_rewrite then do;
		     call iox_$rewrite_record (output_iocbP, recordP (1), recordL, code);
		     if code = 0 then go to COUNT_IT;
		     else go to WRITE_ERROR;
		end;
		else go to DUPLICATE_KEY_ERROR;
	     end;
	     else go to WRITE_ERROR;
	end;

	call iox_$write_record (output_iocbP, recordP (1), recordL, code);
	if code ^= 0 then go to WRITE_ERROR;

COUNT_IT:	record_count = record_count + 1;
	go to RECORD_CNTL (end_cntl);

RECORD_CNTL (1): if record_key = stop_key then go to DONE;
	else go to RECORD_LOOP;

RECORD_CNTL (0):
RECORD_CNTL (2): if record_count = count_value then go to DONE;
	else go to RECORD_LOOP;

/* NOTE -- RECORD_CNTL (3) is at beginning of RECORD_LOOP */
	

/* END CASE PROCESSING */

END_OF_FILE: if end_cntl = all then go to DONE;		/* this is to be expected */

	else do;					/* otherwise, copying was prematurely terminated */
	     call com_err_ (error_table_$end_of_info, name, "While reading input file.
""^a"" condition not satisfied.  ^d records copied.",
		end_argument (end_cntl), record_count);
	     go to CLEANUP_AND_RETURN;
	end;



DONE:	if msg_cntl = long then call ioa_ ("^d ^[keys^;records^] copied.", record_count, only_keys);


CLEANUP_AND_RETURN: call cleaner;


RETURN_TO_CL: return;
	

/* ERROR PROCESSING */

INCONSISTENT_ARGUMENT_ERROR: code = error_table_$inconsistent;
	go to ARGUMENT_ERROR;


NO_ARGUMENT_ERROR: code = error_table_$noarg;


ARGUMENT_ERROR: call com_err_ (code, name, "^/^a", error_text);
	return;


ADD_KEY_ERROR:
	call com_err_ (code, name, "Adding key ""^a"" to output file.", record_key);
	goto CLEANUP_AND_RETURN;


GET_KEY_ERROR:
	call com_err_ (code, name, "Error getting next key after ""^a"" from input file.", record_key);
	goto CLEANUP_AND_RETURN;


READ_ERROR: error_text = "reading input";
	go to IO_ERROR;


WRITE_ERROR: error_text = "writing output";


IO_ERROR:	call com_err_ (code, name,
	     "^/Error while ^a file.  ^d records successfully copied.", error_text, record_count);
	go to CLEANUP_AND_RETURN;


OUTPUT_KEY_ERROR: call com_err_ (error_table_$action_not_performed, name,
	     "^/Unable to perform requested copy.
Key of last output file record is greater than or
equal to key of first input file record: ""^a"".", record_key);
	go to CLEANUP_AND_RETURN;


DUPLICATE_KEY_ERROR: call com_err_ (error_table_$fatal_error, name,
	     "^/Unable to copy input file record with key ""^a"".
A record with this key already exists in the output file.
The output switch must be closed and re-opened in an update mode
to copy this record.  ^d records successfully copied.",
	     record_count);
	go to CLEANUP_AND_RETURN;
	

/* INTERNAL PROCEDURES */
/*   Note:  none of the following three internal procedures should be modified so that they would no longer run
   in the stack frame of the main procedure.  This restriction is imposed by the use of cu_$arg_ptr, which
   would then operate on the argument list of the internal procedure instead of the command's argument list.     */

get_string_arg_256: procedure;			/* obtains next argument, a string ^> 256 chars */
	     max_argL = 256;
	     go to GET_ARGUMENT;

get_string_arg_32: entry;				/* obtains next argument, a string ^> 32 chars */
	     max_argL = 32;

GET_ARGUMENT:  call get_arg;				/* get next argument, if any */
	     if argL > max_argL then do;
		call com_err_ (error_table_$bad_arg, name,
		     "^/Argument descriptor length exceeds ^d characters.^/^a", max_argL, arg);
		go to RETURN_TO_CL;
	     end;
	     return;

	end get_string_arg_256;


get_numeric_arg: procedure;				/* obtains next argument, a number */

	     call get_arg;				/* get the argument, if any */
	     if argL > 10 then do;
BAD_NUMERIC_ARG:	call com_err_ (error_table_$bad_arg, name,
		     "^/Argument descriptor must be positive integer < 10000000000.^/""^a""", arg);
		go to RETURN_TO_CL;
	     end;
	     if verify (arg, "0123456789") ^= 0 then go to BAD_NUMERIC_ARG;
	     numeric_arg = binary (arg);
	     if numeric_arg <= 0 then go to BAD_NUMERIC_ARG;
	     return;

	end get_numeric_arg;


get_arg:	procedure;				/* obtains next argument, if any */

	     argX = argX + 1;			/* increment to next argument */
	     if argX > argN then do;
		call com_err_ (error_table_$nodescr, name, "^a", arg);
		go to RETURN_TO_CL;
	     end;
	     call cu_$arg_ptr (argX, argP, argL, code);
	     if code ^= 0 then do;
		call com_err_ (code, name);
		go to RETURN_TO_CL;
	     end;
	     return;

	end get_arg;
%page;

get_key_descriptor:
     proc;

	if gk_info_ptr = null then do;
	     areap = get_system_free_area_ ();
	     gk_key_len = 256;
	     allocate gk_info in (my_area) set (gk_info_ptr);
	     unspec (gk_info_ptr -> gk_info) = "0"b;
	     gk_info_ptr -> gk_info.current = "1"b;
	     gk_info_ptr -> gk_info.version = gk_info_version_0;
	     end;

	call iox_$control (input_iocbP, "get_key", gk_info_ptr, code);
	if code = error_table_$no_key then code = error_table_$end_of_info;
	return;

	end get_key_descriptor;

%page;

add_key:
     proc;

	if ak_info_ptr = null then do;
	     areap = get_system_free_area_ ();
	     ak_key_len = 256;
	     allocate ak_info in (my_area) set (ak_info_ptr);
	     unspec (ak_info_ptr -> ak_info) = "0"b;
	     ak_info_ptr -> ak_info.flags.input_desc = "1"b;
	     ak_info_ptr -> ak_info.flags.input_key = "1"b;
	     end;
	ak_info_ptr -> ak_info.descrip = gk_info_ptr -> gk_info.descrip;
	ak_info_ptr -> ak_info.key_len = gk_info_ptr -> gk_info.key_len;
	record_key, ak_info_ptr -> ak_info.key = substr (gk_info_ptr -> gk_info.key, 1, gk_info_ptr -> gk_info.key_len);

	call iox_$control (output_iocbP, "add_key", ak_info_ptr, code);
	return;
	end add_key;
	

/* CLEANUP PROCEDURE */

cleaner:	procedure;

	     if recordP (1) ^= null then do;
		call release_temp_segments_ (name, recordP, 0);
		recordP (1) = null;
	     end;

	     if close_input then do;
		call iox_$close (input_iocbP, code);
		if code = 0 then close_input = no;
		else call com_err_ (code, name, "^/Unable to close input file.");
	     end;

	     if detach_input then do;
		call iox_$detach_iocb (input_iocbP, code);
		if code = 0 then call iox_$destroy_iocb (input_iocbP, code);
		if code = 0 then detach_input = no;
		else call com_err_ (code, name, "^/Unable to detach input file.");
	     end;

	     if close_output then do;
		call iox_$close (output_iocbP, code);
		if code = 0 then close_output = no;
		else call com_err_ (code, name, "^/Unable to close output file.");
	     end;

	     if detach_output then do;
		call iox_$detach_iocb (output_iocbP, code);
		if code = 0 then call iox_$destroy_iocb (output_iocbP, code);
		if code = 0 then detach_output = no;
		else call com_err_ (code, name, "^/Unable to detach output file.");
	     end;

	     if ak_info_ptr ^= null then do;
		free ak_info_ptr -> ak_info in (my_area);
		ak_info_ptr = null;
		end;

	     if gk_info_ptr ^= null then do;
		free gk_info_ptr -> gk_info in (my_area);
		gk_info_ptr = null;
		end;

	end cleaner;



     end copy_file;
