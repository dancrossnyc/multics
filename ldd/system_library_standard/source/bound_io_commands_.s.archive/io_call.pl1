/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Command interface to iox_ for performing operations on I/O switches. */

/* Completely rewritten in June 1975 by Larry Johnson */
/* Modified September 1975 by Larry Johnson to check for non-fatal input errors */
/* Modified December 1975 by Larry Johnson to extend position operation types */
/* Modified April 1976 by Larry Johnson to use io_call order in control operations */
/* Modified July 1976 by Larry Johnson to allow entry point names in attach module name. */
/* Modified June 1977 by Larry Johnson for io active function. Command was also split into several modules */
/* Modified: 12 November 1980 by G. Palter to increase possible size of the mode string to 512 */
/* Modified 1/83 by S. Krupp to add handling for new iox_ entry points:
   open_file, close_file, and detach.  Modified attach to call
   iox_$attach_loud rather than attaching switches differently from everyone
   else.  Moved the code that handles entry point names in attach
   module names to attach_name.pl1 which is common code used by all
   iox_$attach entries. */
/* Modified 08/02/83 by Jim Lippard to allow find_iocb as an AF and to print
   the name of the control order in error messages about the control order
   (rather than nonsensically using the name of the I/O switch) */
/* Modified 12/19/83 by Jim Lippard to make open_desc allow -no_quote */

io_call: io: proc;

/* Automatic storage */

dcl  code fixed bin (35);				/* System status code */
dcl  arg_list_ptr ptr;				/* Pointer to argument list */
dcl  arg_ptr ptr;					/* Pointer to current argument */
dcl  arg_len fixed bin;				/* Length of current argument */
dcl  arg2_len fixed bin;				/* Length of a second arg */
dcl  arg2_ptr ptr;					/* Pointer to a second arg */
dcl  n_args fixed bin;				/* Number of arguments on command line */
dcl  next_arg fixed bin;				/* Used in counting args */
dcl  dir char (168);				/* To hold directory names */
dcl  desc_len fixed bin;				/* The length of a description. */
dcl  ename char (32);				/* To hold entry names */
dcl  seg_ptr ptr;					/* Pointer to dir>ename */
dcl  arg_name char (32) var;				/* Name of current arg for error msg */
dcl  attach_entry char (32);				/* For building name of attach entry point */
dcl  iocb_ptr ptr;					/* Pointer to IOCB being processed */
dcl  iocb2_ptr ptr;					/* Pointer to target IOCB during move_attach */
dcl (i, j) fixed bin;				/* A binary number */
dcl  mode fixed bin;				/* Mode for open operation */
dcl  cv_dec_err fixed bin;				/* Error code from cv_dec_check_ */
dcl  data_ptr ptr;					/* Pointer to data if i/o from a segment */
dcl  data_len fixed bin (21);				/* Length of data if io from segment */
dcl  key char (256) var;				/* A key for seek type operations */
dcl  print_sw bit (1);				/* On if results of modes should be printed */
dcl  new_mode_sw bit (1);				/* On if modes command specified a new mode */
dcl  negate_sw bit (1);				/* For calculating position */
dcl  dummy_char char (1);				/* Used when null character string needed */
dcl  n_low fixed bin;				/* Lower bound of param array description */
dcl  n_high fixed bin;				/* Number of entries in param array */
dcl  max_l fixed bin;				/* Max length of an entry in param array */
dcl  msg_ptr ptr;					/* Will point to io_call_msg_$ if needed */
dcl  order char (32);				/* The order on a control operation */
dcl  error entry variable options (variable);		/* Will be com_err_ of active_fnc_err_ */
dcl  af_sw bit (1);					/* Set if invoked as active function */
dcl  af_retp ptr;					/* Pointer to active function return string */
dcl  af_retl fixed bin;				/* Length of active function return string */
dcl  no_quote_sw bit (1);				/* Set by -no_quote */
dcl  ev entry variable;				/* For valid_op operation */
dcl  valid_mode_sw bit (1);				/* To distinguish between valid and test mode ops */

/* Constants */

dcl  cmd_name char (7) int static options (constant) init ("io_call"); /* Name of this thing */

/* This array contains the names of 16 of the possible operations performed by this command. This
   array must agree with the names and positions of the entry variables in the IOCB */

dcl  opt_name (19) char (14) int static options (constant) init
    ("detach_iocb",					/* 1 */
     "open",					/* 2 */
     "close",					/* 3 */
     "get_line",					/* 4 */
     "get_chars",					/* 5 */
     "put_chars",					/* 6 */
     "modes",					/* 7 */
     "position",					/* 8 */
     "control",					/* 9 */
     "read_record",					/* 10 */
     "write_record",				/* 11 */
     "rewrite_record",				/* 12 */
     "delete_record",				/* 13 */
     "seek_key",					/* 14 */
     "read_key",					/* 15 */
     "read_length", 				/* 16 */
     "open_file",					/* 17 */
     "close_file",					/* 18 */
     "detach");					/* 19 */

/* The remaining operations performed by this command are numbered starting with 20, as follows:

   20 - attach		21 - find_iocb		22 - look_iocb
   23 - destroy_iocb	24 - move_attach		25 - print_iocb
   26 - attached		27 - opened		28 - closed
   29 - detached		30 - open_desc		31 - attach_desc
   32 - io_module		33 - valid_op		34 - test_mode
   35 - valid_mode
*/

/* This array contains the names of the rest of the operations performed by the command,
   including some abbreviations for things in the first array of operations */

dcl  opt_name2 (27) char (12) int static options (constant) init
    ("attach",					/* 1 -> 20 */
     "find_iocb",					/* 2 -> 21 */
     "find",					/* 3 -> 21 */
     "look_iocb",					/* 4 -> 22 */
     "look",					/* 5 -> 22 */
     "destroy_iocb",				/* 6 -> 23 */
     "destroy",					/* 7 -> 23 */
     "write",					/* 8 -> 11 */
     "rewrite",					/* 9 -> 12 */
     "delete",					/* 10 -> 13 */
     "seek",					/* 11 -> 14 */
     "move_attach",					/* 12 -> 24 */
     "move",					/* 13 -> 24 */
     "print_iocb",					/* 14 -> 25 */
     "piocb",					/* 15 -> 25 */
     "print",					/* 16 -> 25 */
     "read",					/* 17 -> 10 */
     "attached",					/* 18 -> 26 */
     "opened",					/* 19 -> 27 */
     "closed",					/* 20 -> 28 */
     "detached",					/* 21 -> 29 */
     "open_desc",					/* 22 -> 30 */
     "attach_desc",					/* 23 -> 31 */
     "io_module",					/* 24 -> 32 */
     "valid_op",					/* 25 -> 33 */
     "test_mode",					/* 26 -> 34 */
     "valid_mode");					/* 27 -> 35 */

/* This array defines the correspondence between operations in opt_name2 and
   the labels that perform the operations. (See the comments in opt_name2) */

dcl  op_match (27) fixed bin int static options (constant) init
    (20, 21, 21, 22, 22, 23, 23, 11, 12, 13, 14, 24, 24, 25, 25, 25, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35);

/* The following array defines what operations are valid through the active function */

dcl  valid_af (35) bit (1) unal int static options (constant) init (
     "0"b, "0"b, "0"b, "1"b, "1"b, "0"b, "1"b, "1"b, "1"b, "1"b,
     "0"b, "0"b, "0"b, "1"b, "1"b, "1"b, "0"b, "0"b, "0"b, "0"b,
     "1"b, "1"b, "0"b, "0"b, "0"b, "1"b, "1"b, "1"b, "1"b, "1"b,
     "1"b, "1"b, "1"b, "1"b, "1"b);

/* The following array defines what tests must be performed in
   order to determine if an operation is valid (for the valid_op operation ).
   The tests are:
   1 - check IOCB entry variable
   2 - valid if detached
   3 - valid if IOCB exists
   4 - always valid
   5 - valid if open
   6 - valid if attached */

dcl  valid_op (35) fixed bin int static options (constant) init (
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
     4, 4, 2, 6, 3, 4, 4, 4, 4, 5, 6, 6, 4, 6, 6);

/* Full names of all open modes */

dcl  open_type (13) char (24) int static init
    ("stream_input",				/* 1 */
     "stream_output",				/* 2 */
     "stream_input_output",				/* 3 */
     "sequential_input",				/* 4 */
     "sequential_output",				/* 5 */
     "sequential_input_output",			/* 6 */
     "sequential_update",				/* 7 */
     "keyed_sequential_input",			/* 8 */
     "keyed_sequential_output",			/* 9 */
     "keyed_sequential_update",			/* 10 */
     "direct_input",				/* 11 */
     "direct_output",				/* 12 */
     "direct_update");				/* 13 */

/* Abbreviations for open types */

dcl  open_abbrev (13) char (4) int static init
    ("si",					/* 1 */
     "so",					/* 2 */
     "sio",					/* 3 */
     "sqi",					/* 4 */
     "sqo",					/* 5 */
     "sqio",					/* 6 */
     "squ",					/* 7 */
     "ksqi",					/* 8 */
     "ksqo",					/* 9 */
     "ksqu",					/* 10 */
     "di",					/* 11 */
     "do",					/* 12 */
     "du");					/* 13 */

/* Static storage */

dcl  req char (32) static init (".");			/* Current operation, remembered for next call */
dcl  ioname char (32) static init (".");		/* Current io switch, remembered for next call */
dcl  WHITESPACE char(2) init(" 	") int static options(constant);

/* Based storage */

dcl  arg char (arg_len) based (arg_ptr);		/* Some arbitrary argument */
dcl  arg2 char (arg2_len) based (arg2_ptr);		/* A second argument */
dcl  af_ret char (af_retl) based (af_retp) var;		/* To return active function value */
dcl  ev_array (16) entry based;			/* Array of entry variables in iocb */

dcl 1 word aligned based (data_ptr),			/* Used for help messages */
    2 upper bit (18) unal,
    2 lower bit (18) unal;


dcl 1 descrip aligned based,				/* An attach or open description */
    2 msg_len fixed bin,
    2 msg char (0 refer (descrip.msg_len)) unal;


/* External variables */

dcl  error_table_$bad_mode ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$end_of_info ext fixed bin (35);
dcl  error_table_$key_order ext fixed bin (35);
dcl  error_table_$no_ext_sym ext fixed bin (35);
dcl  error_table_$no_operation ext fixed bin (35);
dcl  error_table_$no_record ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$not_attached ext fixed bin (35);
dcl  error_table_$not_detached ext fixed bin (35);
dcl  error_table_$not_open ext fixed bin (35);
dcl  error_table_$request_not_recognized ext fixed bin (35);
dcl  error_table_$seg_not_found ext fixed bin (35);
dcl  error_table_$too_many_args ext fixed bin (35);
dcl  error_table_$undefined_order_request ext fixed bin (35);

dcl  io_call_msg_$ ext;				/* External error message stuff */

/* Builtin functions */

dcl (addr, addrel, bin, hbound, index, length, max, min, null, reverse, rtrim, search, substr) builtin;


/* Entry variables */

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);

dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  cu_$ptr_call entry options (variable);
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$af_arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  cu_$decode_entry_value entry (entry, ptr, ptr);

dcl  cv_dec_check_ entry (char (*), fixed bin) returns (fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));

dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));

dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);

dcl  io_call_print_iocb_ entry (ptr);
dcl  io_call_read_write_$put_chars entry (ptr, ptr);
dcl  io_call_read_write_$get_chars entry (ptr, ptr);
dcl  io_call_read_write_$get_line entry (ptr, ptr);
dcl  io_call_read_write_$read_record entry (ptr, ptr);
dcl  io_call_read_write_$write_record entry (ptr, ptr);
dcl  io_call_read_write_$rewrite_record entry (ptr, ptr);

dcl  iox_$attach_loud entry (ptr, char(*), ptr, fixed bin(35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$close_file entry(ptr, char(*), fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$delete_record entry (ptr, fixed bin (35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin (35));
dcl  iox_$detach entry(ptr, char(*), fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$look_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  iox_$move_attach entry (ptr, ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$open_file entry(ptr, fixed bin, char(*), bit(1) aligned, fixed bin(35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$read_key entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
dcl  iox_$read_length entry (ptr, fixed bin (21), fixed bin (35));
dcl  iox_$seek_key entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
dcl  iox_$err_no_operation entry;
dcl  iox_$err_not_attached entry;
dcl  iox_$err_not_closed entry;
dcl  iox_$err_not_open entry;

dcl  requote_string_ entry (char (*)) returns (char (*));
dcl  term_$single_refname entry (char (*) aligned, fixed bin (35));

%include iocb;

/* Check first to see if command or active function */

	call cu_$af_return_arg (n_args, af_retp, af_retl, code); /* This guy knows */
	if code = 0 then do;
	     af_sw = "1"b;				/* We are an active function */
	     error = active_fnc_err_;			/* For reporting errors */
	end;
	else do;					/* Plain old command */
	     af_sw = "0"b;
	     error = com_err_;
	     call cu_$arg_count (n_args);		/* Get command arg count */
	end;
	call cu_$arg_list_ptr (arg_list_ptr);		/* Need this in any case */

/* Get operation to be performed (the first argument) */

	if n_args = 0 then do;			/* If no args, setup help message */
	     i = 0;
	     arg_name = "opname";
	     go to help;
	end;
	next_arg = 1;
	call get_arg ("operation");
	if arg ^= "." then req = arg;			/* "." means same req as last time */
	if req = "." then do;			/* There was no last time */
	     code = error_table_$noarg;
	     arg_name = "operation";
	     go to err_1;
	end;

/* Determine if the operation specified is valid. */

	i = get_op_number (req);			/* Look up opertion */

	if i = 0 then do;
bad_req:	     code = error_table_$request_not_recognized;	/* Unknown request */
	     arg_name = req;
	     go to err_1;
	end;

	if af_sw then if ^valid_af (i) then go to bad_req; /* Only valid in command */
	if n_args > 1 then go to get_sw;		/* If a switch name also specified */

/* Command specification is incomplete so print a help message */

	arg_name = req;				/* Type of help being given */
help:	msg_ptr = addr (io_call_msg_$);		/* Get pointer to segment with help messages */
	data_ptr = addrel (msg_ptr, i);		/* Pointer to header word for command */
	j = bin (word.lower);			/* Number of messages */
	data_ptr = addrel (msg_ptr, word.upper);	/* Pointer to first message pointer */
	if ^af_sw then call ioa_ ("^a: Usage is: io_call ^a switchname ^A",
	     cmd_name, arg_name, addrel (msg_ptr, word.upper));
	else call error (0, cmd_name, "Usage is: [io_call ^a switchname ^A]",
	     arg_name, addrel (msg_ptr, word.upper));

	do i = 2 to j;				/* Print rest of message */
	     data_ptr = addrel (data_ptr, 1);
	     call ioa_ ("^A", addrel (msg_ptr, word.upper));
	end;
	return;

/* Get I/O switch name (the second argument) */

get_sw:	call get_arg ("switchname");
	if arg ^= "." then ioname = arg;		/* "." means same switch again */
	if ioname = "." then do;			/* There was no last time */
	     code = error_table_$noarg;
	     arg_name = "switchname";
	     go to err_1;
	end;



	go to op (i);				/* Dispatch to appropriate routine */

/* This is the exit from the command */


finish:	if code ^= 0 then go to err_2;		/* Most operations finish here to check last error code */
          return;

finish_attach:
          if code = error_table_$seg_not_found		/* Cannot locate I/O module. */
	then go to err_4;
	else if code ^= 0
	then go to err_2;
	return;

exit:	return;


/* True/false type active function entries exit here */

true:	call report ("true");
	go to exit;

false:	call report ("false");
	go to exit;

/* DETACH_IOCB operation */

/* Note:  the DETACH operation transfers control to here ONLY when there
   is no detach description specified on the command line. */

op (1):	call look_iocb;				/* Get IOCB pointer */
	call check_eol;
	call iox_$detach_iocb (iocb_ptr, code);		/* Do the real detach */
	go to finish;

/* OPEN operation */

op (2):   call open_common();				/* Gets iocb_ptr and open mode. */
	call check_eol;

	call iox_$open (iocb_ptr, mode, "0"b, code);	/* Open the switch */
	go to finish;

/* CLOSE operation */

op (3):	call look_iocb;				/* Get IOCB pointer */
	call check_eol;
	call iox_$close (iocb_ptr, code);
	go to finish;

/* GET_LINE operation */

op (4):	call look_iocb;
	call io_call_read_write_$get_line (iocb_ptr, arg_list_ptr);
	go to exit;

/* GET_CHARS operation */

op (5):	call look_iocb;				/* Locate the IOCB */
	call io_call_read_write_$get_chars (iocb_ptr, arg_list_ptr);
	go to exit;

/* PUT_CHARS operation */

op (6):	call look_iocb;
	call io_call_read_write_$put_chars (iocb_ptr, arg_list_ptr);
	go to exit;

/* MODES operation */

op (7):	call look_iocb;
	arg_name = "new modes.";			/* Looking for new modes */
	print_sw = "1"b;				/* Assume for now old modes will be printed */
	new_mode_sw = "0"b;				/* Mode not found yet */
	do while (next_arg <= n_args);
	     call get_arg ("");
	     if arg = "-brief" | arg = "-bf" then print_sw = "0"b; /* This means don't print old modes */
	     else if new_mode_sw then do;
		code = error_table_$badopt;
		go to err_3;
	     end;
	     else do;
		arg2_len = arg_len;			/* Remember this arg */
		arg2_ptr = arg_ptr;
		new_mode_sw = "1"b;
	     end;
	end;
	if ^new_mode_sw then do;			/* If a new mode was not given */
	     arg2_ptr = addr (dummy_char);		/* Set up a dummy one */
	     arg2_len = 1;
	     dummy_char = " ";
	end;

	begin;

dcl  old_modes char (512);				/* Allow for long modes string */

	     old_modes = "";
	     call iox_$modes (iocb_ptr, arg2, old_modes, code); /* Do modes operation */
	     if code ^= 0 then go to err_2;
	     else if af_sw then af_ret = requote_string_ (rtrim (old_modes));
	     else if print_sw & old_modes ^= "" then	/* If printing wanted, and something returned */
		call ioa_ ("^a: ^a", cmd_name, old_modes);
	end;
	go to exit;

/* POSITION operation */

op (8):	call look_iocb;
	call get_arg ("position type");
	negate_sw = "0"b;				/* Initialize switch */
	i = cv_dec ();				/* Should be decimal number */
	if cv_dec_err ^= 0 then do;			/* Check for some keywords */
	     if arg = "bof" | arg = "b" then i = -1;	/* Beginning of file */
	     else if arg = "eof" | arg = "e" then i = 1;	/* End of file */
	     else if arg = "forward" | arg = "foward" | arg = "fwd" | arg = "f" then do; /* Move forward */
		i = 0;
	     end;
	     else if arg = "reverse" | arg = "rev" | arg = "r" then do; /* If reverse move */
		i = 0;
		negate_sw = "1"b;			/* The number will have to be inverted */
	     end;
	     else do;
		call error (0, cmd_name, "Invalid position specification. ^a", arg);
		go to exit;
	     end;
	end;

/* Another argument is required if i = 0, is illegal for i = 1 and i = -1,
   and is optional for other values of i */

	if i = 0 | ((i ^= 1) & (i ^= -1) & (next_arg <= n_args)) then do;
	     call get_arg ("position value");
	     data_len = cv_dec ();			/* Which also is decimal */
	     if cv_dec_err ^= 0 then do;
		call error (0, cmd_name, "Invalid decimal number. ^a", arg);
		go to exit;
	     end;
	     if negate_sw then data_len = -data_len;	/* If reverse position */
	end;
	else data_len = 0;				/* Don't care */
	call check_eol;
	call iox_$position (iocb_ptr, i, data_len, code); /* Do operation */
	if af_sw then do;
	     if code = 0 then go to true;
	     if code = error_table_$end_of_info then go to false;
	end;
	go to finish;

/* CONTROL operation */

op (9):	call look_iocb;				/* First, locate the IOCB */
	call get_arg ("order");
	order = arg;				/* Save order name */
	if order = "io_call" | order = "io_call_af" then do;
	     call error (0, cmd_name, "The ^a ^[active function^;command^] cannot perform an ^a order.",
		cmd_name, af_sw, order);
	     go to exit;
	end;
	call check_args;				/* Scan rest of argument list */

	begin;					/* Begin block allocates param structure */

dcl  io_call_order_name char (10);			/* Will be io_call or io_call_af */
dcl 1 io_call_info aligned,				/* This structure must look like io_call_info.incl.pl1 */
    2 version fixed bin,
    2 caller_name char (32),
    2 order_name char (32),
    2 ioa_entry entry variable options (variable),
    2 com_err_entry entry variable options (variable),
    2 af_returnp ptr,				/* Pointer to active function return string */
    2 af_returnl fixed bin,				/* Its max length */
    2 fill (5) bit (36) aligned,
    2 nargs fixed bin,
    2 max_arglen fixed bin,
    2 args (n_high) char (max_l) varying;

	     io_call_info.version = 1;
	     io_call_info.caller_name = cmd_name;	/* Initialize param list */
	     io_call_info.order_name = order;
	     io_call_info.ioa_entry = ioa_;
	     if af_sw then do;
		io_call_info.af_returnp = af_retp;
		io_call_info.af_returnl = af_retl;
		io_call_order_name = "io_call_af";
	     end;
	     else do;
		io_call_info.af_returnp = null;
		io_call_info.af_returnl = 0;
		io_call_order_name = "io_call";
	     end;
	     io_call_info.com_err_entry = error;
	     io_call_info.fill = "0"b;
	     io_call_info.nargs = n_high;
	     io_call_info.max_arglen = max_l;
	     i = 1;
	     do while (next_arg <= n_args);
		call get_arg ("");
		io_call_info.args (i) = arg;
		i = i + 1;
	     end;

/* First try to perform the control operation with the "io_call" order */

	     call iox_$control (iocb_ptr, io_call_order_name, addr (io_call_info), code);

	end;

	if code = 0 then go to exit;			/* Io module did the order. */
	if af_sw then go to err_2;
	if code = error_table_$no_operation | code = error_table_$undefined_order_request then do;
						/* Module does not seem to like io_call order */
	     call iox_$control (iocb_ptr, rtrim (order), null, code); /* Retry original order */
	     if code ^= 0 then do;
		call error (code, cmd_name, "Order ^a on switch ^a.", order, ioname);
		go to exit;
	     end;
	     end;
	go to finish;

/* READ_RECORD operation */

op (10):	call look_iocb;				/* Locate IOCB */
	call io_call_read_write_$read_record (iocb_ptr, arg_list_ptr);
	go to exit;

/* WRITE_RECORD operation */

op (11):	call look_iocb;
	call io_call_read_write_$write_record (iocb_ptr, arg_list_ptr);
	go to exit;

/* REWRITE_RECORD operation */

op (12):	call look_iocb;
	call io_call_read_write_$rewrite_record (iocb_ptr, arg_list_ptr);
	go to exit;

/* DELETE_RECORD operation */

op (13):	call look_iocb;
	call check_eol;
	call iox_$delete_record (iocb_ptr, code);
	go to finish;

/* SEEK_KEY operation */

op (14):	call look_iocb;
	call get_arg ("key");
	call check_eol;
	key = arg;				/* Copy key to varying string */
	data_len = -1;
	call iox_$seek_key (iocb_ptr, key, data_len, code);
	if af_sw then do;				/* Active function */
	     if code = 0 then go to true;
	     if code = error_table_$no_record then go to false;
	end;
	if code ^= 0 then do;
	     if data_len = -1 then do;		/* No record length returned */
		if code = error_table_$no_record | code = error_table_$key_order then
		     call error (code, cmd_name, "^a", key);
		else go to err_2;
	     end;
	     else call error (code, cmd_name, "len=^d.", data_len);
	end;
	else call ioa_ ("^a: key=""^a"" len=^d.", cmd_name, key, data_len);
	go to exit;


/* READ_KEY operation */

op (15):	call look_iocb;
	call check_nq;				/* Look for -no_quote */
	call check_eol;
	data_len = -1;
	key = "";
	call iox_$read_key (iocb_ptr, key, data_len, code); /* Do the operation */
	if code ^= 0 then do;
	     if data_len = -1 then go to err_2;		/* Nothing returned */
	     else call error (code, cmd_name, "key=""^a"" len=^d.", key, data_len);
	end;
	else if af_sw then do;
	     if no_quote_sw then af_ret = key;
	     else af_ret = requote_string_ ((key));
	end;
	else call ioa_ ("^a: key=""^a"" len=^d.", cmd_name, key, data_len);
	go to exit;


/* READ_LENGTH operation */

op (16):	call look_iocb;
	call check_eol;
	data_len = -1;
	call iox_$read_length (iocb_ptr, data_len, code); /* Get length */
	if code ^= 0 then do;
	     if data_len = -1 then go to err_2;
	     call error (code, cmd_name, "len=^d.", data_len);
	end;
	else if af_sw then call ioa_$rsnnl ("^d", af_ret, (0), data_len);
	else call ioa_ ("^a: len=^d.", cmd_name, data_len);
	go to exit;

/* OPEN_FILE operation */

op (17):  call open_common();				/* Gets IOCB ptr and open mode. */
          call get_desc_len(desc_len);

	begin;

	     dcl description char(desc_len);

	     call get_desc(description);
	     call iox_$open_file(iocb_ptr, mode, description, "0"b, code);

	end;

	go to finish;

/* CLOSE_FILE operation */

op (18):  call look_iocb();				/* Get IOCB ptr. */
          call get_desc_len(desc_len);

	begin;

	     dcl description char(desc_len);

	     call get_desc(description);
	     call iox_$close_file(iocb_ptr, description, code);

	end;

	go to finish;

/* DETACH operation */

op (19):  call look_iocb();				/* Get IOCB ptr. */

          if at_eol()				/* No detach description specified. */
	then go to op(1);				/* Transfer to DETACH_IOCB op. */

          call get_desc_len(desc_len);

	begin;

	     dcl description char(desc_len);

	     call get_desc(description);
	     call iox_$detach(iocb_ptr, description, code);

	end;

	go to finish;


/* ATTACH operation */

op (20):	call find_iocb();				/* Get IOCB pointer */
          call get_desc_len(desc_len);

	begin;

	     dcl description char(desc_len);

	     call get_desc(description);
	     call iox_$attach_loud(iocb_ptr, description, (null), code);
	if code = error_table_$no_ext_sym then do;
		call error (code, cmd_name, "Attaching ^a on switch ^a.", description, ioname);
		code = 0;
	end;

	end;

	go to finish_attach;


/* FIND_IOCB operation */

op (21):	call find_iocb;
findx:	call check_eol;
	if af_sw then call ioa_$rsnnl ("^p", af_ret, (0), iocb_ptr);
	else call ioa_ ("^a: ^a at ^p", cmd_name, ioname, iocb_ptr);
	go to exit;

/* LOOK_IOCB operation */

op (22):	call iox_$look_iocb (ioname, iocb_ptr, code);	/* Get IOCB pointer */
	if af_sw then do;
	     if code = 0 then go to true;
	     else go to false;
	end;
	else if code ^= 0 then go to err_2;
	else go to findx;


/* DESTROY_IOCB operation */

op (23):	call look_iocb;
	call check_eol;
	call iox_$destroy_iocb (iocb_ptr, code);
	go to finish;


/* MOVE_ATTACH operation */

op (24):	call look_iocb;				/* Locate source IOCB */
	call get_arg ("target iocb");
	call check_eol;
	call iox_$find_iocb (arg, iocb2_ptr, code);	/* Get pointer to target IOCB */
	if code ^= 0 then go to err_3;		/* If this failed */
	call iox_$move_attach (iocb_ptr, iocb2_ptr, code);
	if code ^= 0 then do;
	     if code = error_table_$not_detached then go to err_3; /* Error applies to target IOCB */
	     else go to err_2;			/* Error applies to source IOCB */
	end;
	go to exit;

/* PRINT_IOCB operation */

op (25):	call look_iocb;				/* Find IOCB */
	call check_eol;
	call io_call_print_iocb_ (iocb_ptr);
	go to exit;

/* ATTACHED operation */

op (26):	call check_eol;
	call iox_$look_iocb (ioname, iocb_ptr, code);
	if code ^= 0 then go to false;
	if iocb_ptr -> iocb.attach_descrip_ptr = null then go to false;
	else go to true;

/* OPENED operation */

op (27):	call check_eol;
	call iox_$look_iocb (ioname, iocb_ptr, code);
	if code ^= 0 then go to false;
	if iocb_ptr -> iocb.open_descrip_ptr = null then go to false;
	else go to true;

/* CLOSED operation */

op (28):	call check_eol;
	call iox_$look_iocb (ioname, iocb_ptr, code);
	if code ^= 0 then go to true;
	if iocb_ptr -> iocb.open_descrip_ptr = null then go to true;
	else go to false;

/* DETACHED operation */

op (29):	call check_eol;
	call iox_$look_iocb (ioname, iocb_ptr, code);
	if code ^= 0 then go to true;
	if iocb_ptr -> iocb.attach_descrip_ptr = null then go to true;
	else go to false;

/* OPEN_DESC operation */

op (30):	call check_eol;
	call look_iocb;
	call check_nq;
	if iocb_ptr -> iocb.open_descrip_ptr = null then do;
	     code = error_table_$not_open;
	     go to err_2;
	end;
          if no_quote_sw then call report (iocb_ptr -> iocb.open_descrip_ptr -> descrip.msg);
	else call report (requote_string_ (iocb_ptr -> iocb.open_descrip_ptr -> descrip.msg));
	go to exit;

/* ATTACH_DESC operation */

op (31):	call look_iocb;
	call check_nq;
	call check_eol;
	if iocb_ptr -> iocb.attach_descrip_ptr = null then do;
	     code = error_table_$not_attached;
	     go to err_2;
	end;
	if no_quote_sw then call report (iocb_ptr -> iocb.attach_descrip_ptr -> descrip.msg);
	else call report (requote_string_ (iocb_ptr -> iocb.attach_descrip_ptr -> descrip.msg));
	go to exit;

/* IO_MODULE operation */

op (32):	call check_eol;
	call look_iocb;
	if iocb_ptr -> iocb.attach_descrip_ptr = null then do; /* No attachment */
	     code = error_table_$not_attached;
	     go to err_2;
	end;
	i = index (iocb_ptr -> iocb.attach_descrip_ptr -> descrip.msg, " ");
	if i = 0 then i = length (iocb_ptr -> iocb.attach_descrip_ptr -> descrip.msg);
	else i = i - 1;
	call report (substr (iocb_ptr -> iocb.attach_descrip_ptr -> descrip.msg, 1, i));
	go to exit;

/* VALID_OP operation */

op (33):	call get_arg ("operation");
	i = get_op_number (arg);			/* Look it up */
	if i = 0 then do;
	     code = error_table_$badopt;
	     go to err_3;
	end;
	call check_eol;
	go to valid_op_test (valid_op (i));		/* Go check if valid */
valid_op_test (1):					/* Valid if no error entry in IOCB */
	call iox_$look_iocb (ioname, iocb_ptr, code);
	if code ^= 0 then go to false;
	ev = addr (iocb_ptr -> iocb.detach_iocb) -> ev_array (i);
	if equal_ev (ev, iox_$err_no_operation) then go to false;
	if equal_ev (ev, iox_$err_not_attached) then go to false;
	if equal_ev (ev, iox_$err_not_closed) then go to false;
	if equal_ev (ev, iox_$err_not_open) then go to false;
	go to true;
valid_op_test (2):					/* Valid if detached */
	call iox_$look_iocb (ioname, iocb_ptr, code);
	if code ^= 0 then go to true;
	if iocb_ptr -> iocb.attach_descrip_ptr = null then go to true;
	else go to false;
valid_op_test (3):					/* Valid if iocb exists */
	call iox_$look_iocb (ioname, iocb_ptr, code);
	if code = 0 then go to true;
	else go to false;
valid_op_test (4):					/* Always valid */
	go to true;
valid_op_test (5):					/* True if open */
	call iox_$look_iocb (ioname, iocb_ptr, code);
	if code ^= 0 then go to false;
	if iocb_ptr -> iocb.open_descrip_ptr = null then go to false;
	else go to true;
valid_op_test (6):					/* Valid if attached */
	call iox_$look_iocb (ioname, iocb_ptr, code);
	if code ^= 0 then go to false;
	if iocb_ptr -> iocb.attach_descrip_ptr = null then go to false;
	else go to true;

/* TEST_MODE operation */

op (34):	valid_mode_sw = "0"b;			/* Not a valid_mode operation */
test_mode_join:
	call look_iocb;
	call get_arg ("mode");
	call check_eol;

	begin;

dcl  not_sw bit (1);				/* Set if ^mode asked for */
dcl  test_mode char (32) var;
dcl  mode_str char (512);
dcl  modes char (512) var;

	     not_sw = (substr (arg, 1, 1) = "^");
	     if not_sw then test_mode = substr (arg, 2);
	     else test_mode = arg;
	     call iox_$modes (iocb_ptr, "", mode_str, code);
	     if code ^= 0 then go to err_2;
	     modes = rtrim (mode_str, " .");		/* Trim spaces and trailing period */
	     do while (modes ^= "");			/* Loop till string gone */
		i = index (modes, ",");		/* Find end of next mode */
		if i = 0 then i = length (modes);
		else i = i - 1;
		if substr (modes, 1, 1) = "^" then
		     if substr (modes, 2, i-1) = test_mode then
			if valid_mode_sw then go to true;
			else if not_sw then go to true;
			else go to false;
		     else;
		else if substr (modes, 1, i) = test_mode then
		     if valid_mode_sw then go to true;
		     else if not_sw then go to false;
		     else go to true;
		if i+1 >= length (modes) then modes = ""; /* Done */
		else modes = substr (modes, i+2);	/* Strip off mode */
	     end;

	     if valid_mode_sw then go to false;
	     code = error_table_$bad_mode;
	     go to err_3;

	end;

/* VALID_MODE operation */

op (35):	valid_mode_sw = "1"b;
	go to test_mode_join;

/* Get next argument and print error if not found */

get_arg:	proc (s);

dcl  s char (*);					/* Comment for error message */

	     call get_arg_ptr;
	     if code = 0 then return;
	     call error (code, cmd_name, "^a", s);
	     go to exit;

	end get_arg;

/* Internal procedure to call cu_$arg_ptr_rel so that this argument list is only built once */

get_arg_ptr: proc;

	     if af_sw then call cu_$af_arg_ptr_rel (next_arg, arg_ptr, arg_len, code, arg_list_ptr);
	     else call cu_$arg_ptr_rel (next_arg, arg_ptr, arg_len, code, arg_list_ptr);
	     next_arg = next_arg + 1;

	end get_arg_ptr;


/* Internal procedure to check next argument for a decimal value */

cv_dec:	proc returns (fixed bin (35));

	     return (cv_dec_check_ (arg, cv_dec_err));

	end cv_dec;


/* Entry to print or return a result */

report:	proc (answer);

dcl  answer char (*);

	     if af_sw then af_ret = answer;		/* If active function */
	     else call ioa_ ("^a", answer);		/* If command */
	     return;

	end report;

/* Each operation starts with a call to one of the following internal procedures: The call
   is to look_iocb if the IOCB must exist prior to the command being issued:  the call is to
   find_iocb if this is not required. */

look_iocb: proc;

	     call iox_$look_iocb (ioname, iocb_ptr, code);
	     if code ^= 0 then go to err_2;
	     return;

	end look_iocb;


find_iocb: proc;

	     call iox_$find_iocb (ioname, iocb_ptr, code);
	     if code ^= 0 then go to err_2;
	     return;

	end find_iocb;


/* This procedure scan the rest of the argument list to determine how much space must be allocated
   to hold it. This is used by control operations. */

check_args: proc;

dcl  save_next_arg fixed bin;				/* Arg to start with */

	     save_next_arg = next_arg;
	     max_l = 1;				/* Length of longest arg */
	     do while (next_arg <= n_args);
		call get_arg ("");
		max_l = max (max_l, arg_len);
	     end;

	     next_arg = save_next_arg;
	     n_high = n_args - next_arg + 1;		/* Number of elements in array */
	     n_low = min (1, n_high);			/* Bounds are 1:n_high or 0:0 */
	     return;

	end check_args;

/* Check for too many arguments */

check_eol: proc;

	     if next_arg > n_args then return;		/* Ok */
	     call get_arg_ptr;
	     call error (error_table_$too_many_args, cmd_name, "^a", arg);
	     go to exit;

	end check_eol;

/* Check the next argument for -no_quote */

check_nq:	proc;


	     no_quote_sw = "0"b;
	     if next_arg > n_args then return;
	     call get_arg ("");
	     if arg = "-no_quote" | arg = "-nq" then do;
		no_quote_sw = "1"b;
		return;
	     end;

	     code = error_table_$badopt;
	     go to err_3;

	end check_nq;

/* This function looks up an operation and returns its index */

get_op_number: proc (op) returns (fixed bin);

dcl  op char (*);
dcl  i fixed bin;

	     do i = 1 to hbound (opt_name, 1);
		if op = opt_name (i) then return (i);
	     end;
	     do i = 1 to hbound (opt_name2, 1);
		if op = opt_name2 (i) then return (op_match (i));
	     end;
	     return (0);

	end get_op_number;

/* This procedure scans the rest of the argument list to determine the
   maximum length of the description.  It is used by attach, open_file,
   close_file and detach. */

get_desc_len:  proc(desc_len);

          dcl desc_len fixed bin;
	dcl save_next_arg fixed bin;

	save_next_arg = next_arg;
	desc_len = 0;

	do while(next_arg <= n_args);
	     call get_arg("");
	     if search(arg, WHITESPACE) ^= 0
	     then desc_len = desc_len + (2 * arg_len + 2);     /* (2 * arg_len + 2) from requote_string_. */
	     else desc_len = desc_len + arg_len;
	     if next_arg <= n_args
	     then desc_len = desc_len + 1;		/* +1 for space between args. */
	end;

	next_arg = save_next_arg;

     end get_desc_len;

/* Concatenates the rest of the argument list forming the description. */

get_desc: proc(description);

          dcl description char(*);
	dcl var_description char(length(description)) var;

	description = "";
	var_description = "";

	do while(next_arg <= n_args);
	     call get_arg("");
	     if search(arg, WHITESPACE) ^= 0
	     then var_description = var_description || requote_string_(arg);
	     else var_description = var_description || arg;
	     if next_arg <= n_args
	     then var_description = var_description || " ";

	end;

	description = var_description;

     end get_desc;

/* This function compares two entry variables and returns true if they have the same procedure pointer */

equal_ev:	proc (e1, e2) returns (bit (1));

dcl (e1, e2) entry;
dcl (p1, p2, p3) ptr;

	     call cu_$decode_entry_value (e1, p1, p3);
	     call cu_$decode_entry_value (e2, p2, p3);
	     return (p1 = p2);

	end equal_ev;

open_common: proc();

          call look_iocb;				/* Get IOCB pointer */
	call get_arg ("open mode");
	mode = cv_dec ();				/* First test for numeric mode */
	if cv_dec_err = 0 then do;			/* If it is numeric.. */
	     if mode < 1 | mode > hbound (open_type, 1) then do; /* If out of range */
		code = error_table_$badopt;
		go to err_3;
	     end;
	     return;				/* Found type */
	end;

	do mode = 1 to hbound (open_type, 1);		/* Scan array of possible modes */
	     if arg = open_type (mode) | arg = open_abbrev (mode)
	     then return;				/* Found match */
	end;

	code = error_table_$badopt;
	go to err_3;

     end open_common;

/* Says whether or not we have already gotten the last argument on the
   command line. */

at_eol: proc() returns(bit(1) aligned);

               return(next_arg > n_args);

          end at_eol;


/* Come here for various kinds of error messages */

err_1:	call error (code, cmd_name, "^a", arg_name);
	go to exit;

err_2:	arg_name = ioname;
	go to err_1;

err_3:	call error (code, cmd_name, "^a", arg);
	go to exit;

err_4:    call error (code, cmd_name, "Cannot locate I/O module to attach ^a.", ioname);

     end io_call;
