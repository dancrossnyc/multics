/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */

iod_info_: proc;
	return;					/* no entry here */

/* This subroutine is provided to extract information from the io daemon
   tables, thereby sparing its callers the need to understand the structure
   and location of these tables.  A pointer to the iod_working_tables segment
   is obtained the first time the procedure is called.  Recovery from a
   seg_fault_error is attempted because the IO Coordinator, as a matter of
   standard procedure, may delete the iod_working_tables segment and replace
   it with a new one when starting.
*/

/* Written by J. Stern, 2/13/75 */
/* Modified by J. C. Whitmore, 4/78, to add queue_data and rqt_list entries; and for new iod_tables format */
/* Modified by J. C. Whitmore, 10/78, to use version 3 iod_tables */

/****^  HISTORY COMMENTS:
  1) change(88-02-26,Brunelle), approve(88-10-31,MCR7911),
     audit(88-10-25,Wallman):
     Add forms_info, validate_forms_info and evaluate_forms_info entrypoints.
     Use version 5 iod tables.
  2) change(88-10-31,Brunelle), approve(88-10-31,MCR7911),
     audit(88-11-01,Wallman):
     Correct error in evaluate_forms_info entrypoint where invalid return
     pointer for evaluate_forms_info_output was being returned.
                                                   END HISTORY COMMENTS */

/* Arguments */

dcl  acc_name char (32) parameter;			/* driver access name argument */
dcl  code fixed bin (35) parameter;			/* error code */
dcl  default_q fixed bin parameter;			/* number of the default q for a request type */
dcl  gen_type char (32) parameter;			/* generic type name argument */
dcl  max_queues fixed bin parameter;			/* number of queues for a given request type */
dcl  n_queues fixed bin parameter;			/* number of q_group names returned in q_list */
dcl  ptr_to_user_area ptr parameter;
dcl  q_group char (*) parameter;			/* queue group name argument */
dcl  q_list (*) char (32) parameter;			/* array for returning q_group names */
dcl  return_area_ptr ptr parameter;
dcl  rqtip ptr parameter;				/* ptr to rqti seg to use */
dcl  efiip ptr parameter;				/* ptr to evaluate_forms_info_input to use */
dcl  efiop ptr parameter;				/* return ptr to evaluate_forms_info_output */

/* External Procedures & Variables */

dcl  cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry);
dcl  error_table_$id_not_found fixed bin (35) ext static;
dcl  error_table_$improper_data_format fixed bin (35) ext static;
dcl  error_table_$noentry fixed bin (35) ext static;
dcl  error_table_$no_forms_table_defined fixed bin (35) ext static;
dcl  error_table_$too_many_names fixed bin (35) ext static;
dcl  get_system_free_area_ entry () returns (ptr);
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl  iod_forms_$evaluate entry (ptr, ptr, fixed bin (35));
dcl  iod_forms_$info entry (ptr, ptr, fixed bin (35));

dcl  (addr, hbound, null, ptr, rtrim, substr) builtin;

dcl  (cleanup, seg_fault_error) condition;

/* Internal Static */

dcl  ACC fixed bin int static options (constant) init (0);
dcl  GEN fixed bin int static options (constant) init (1);
dcl  Q fixed bin int static options (constant) init (2);
dcl  RQTL fixed bin int static options (constant) init (3);
dcl  VFI fixed bin int static options (constant) init (4);
dcl  FI fixed bin int static options (constant) init (5);
dcl  itp ptr int static init (null);			/* ptr to iod_working_tables segment */
dcl  my_area_ptr ptr int static init (null);
dcl  sysdir char (168) int static init (">daemon_dir_dir>io_daemon_dir");
dcl  undefined char (32) int static options (constant) init ("UNDEFINED"); /* a preset value */

/* Automatic */

dcl  bitcount fixed bin (24);
dcl  entry fixed bin;				/* entry switch */
dcl  i fixed bin;
dcl  icode fixed bin (35);				/* internal error code */
dcl  forms_info_entry entry (ptr, ptr, fixed bin (35)) variable;
dcl  generic_type char (32) aligned;			/* local copy of generic type name */
dcl  my_area area based (my_area_ptr);
dcl  qg_name char (32) aligned;			/* local copy of q group name */
dcl  return_forms_allowed bit (1);
dcl  return_lines_per_inch fixed bin;
dcl  return_max_line_length fixed bin;
dcl  return_max_page_length fixed bin;
dcl  user_area_ptr ptr;
dcl  user_area area based (user_area_ptr);
dcl  evaluate_forms_entry entry (ptr, ptr, fixed bin (35)) variable;
%page;

/* Given a specific request type, return name of driver as defined in the I/O
   daemon tables */
driver_access_name: entry (q_group, acc_name, code);

	entry = ACC;
	qg_name = q_group;				/* copy the request type name */
	generic_type = undefined;
	acc_name = "";				/* clear the return arg */
	go to common;


/* Given a specific request type, return generic type as defined in the I/O
   daemon tables */
generic_type: entry (q_group, gen_type, code);

	entry = GEN;
	qg_name = q_group;				/* copy the args */
	gen_type = "";				/* clear the return value */
	generic_type = undefined;
	go to common;


/* Given a specific request type, return default and max # queues as defined
   in the I/O daemon tables */
queue_data: entry (q_group, default_q, max_queues, code);

	entry = Q;
	qg_name = q_group;				/* copy the args */
	default_q, max_queues = 0;			/* clear the return values */
	generic_type = undefined;
	go to common;


/* Given a specific generic type, return list of all request type of that type
   as defined in the I/O daemon tables */
rqt_list: entry (gen_type, q_list, n_queues, code);

	entry = RQTL;
	qg_name = undefined;
	generic_type = gen_type;			/* does caller only want one generic type */
						/* if blank, we give him all */
	n_queues = 0;				/* init the return value */
	go to common;
%page;
/* Given a specific request type, return all forms information available */

forms_info: entry (q_group, ptr_to_user_area, return_area_ptr, code);

	entry = FI;
	qg_name = q_group;				/* copy the request type name */
	user_area_ptr = ptr_to_user_area;
	return_area_ptr = null;
	go to common;


/* Given a specific request type and forms string, validate that the forms
   string is correct and return max line and page lengths */

validate_forms_info: entry (validate_forms_info_input_ptr, validate_forms_info_output_ptr, code);

	entry = VFI;
	qg_name = validate_forms_info_input.request_type;
	user_area_ptr = validate_forms_info_input.user_area_ptr;
	go to common;


/* This entrypoint is only for internal use by the I/O daemons to evaluate the
   forms information and return all the data required.  It is put in this
   module just so there is a common place for all calls. */

evaluate_forms_info: entry (rqtip, efiip, efiop, code);

	call evaluate_forms_data (rqtip, efiip, efiop, code);

/* if the evaluation routine didn't return an output structure, there was some
   sort of major error.  Allocate a return structure ourselves so we don't
   mess up anyone who calls us */
	if efiop = null then do;
	     system_returned_forms_length,
		system_error_string_length,
		system_escape_string_length,
		system_special_string_length = 0;
	     user_area_ptr = efiip -> evaluate_forms_info_input.area_ptr;
	     if user_area_ptr = null then
		allocate evaluate_forms_info_output in (my_area);
	     else allocate evaluate_forms_info_output in (user_area);

	     evaluate_forms_info_output.version = EVALUATE_FORMS_INFO_OUTPUT_VERSION_1;
	     evaluate_forms_info_output.lines_per_inch = return_lines_per_inch;
	     evaluate_forms_info_output.lines_per_page = return_max_page_length;
	     evaluate_forms_info_output.chars_per_line = return_max_line_length;
	     efiop = evaluate_forms_info_output_ptr;
	end;

	return;
%page;
common:
	evaluate_forms_info_input_ptr,
	     evaluate_forms_info_output_ptr = null;

	on seg_fault_error go to try_again;

	if itp = null then do;			/* get ptr to iod_working_tables */
initiate:	     call initiate_file_ (sysdir, "iod_working_tables", R_ACCESS, itp, bitcount, code);
	     if itp = null then return;
	     ithp = itp;
	end;
	else ithp = itp;
	if iod_tables_hdr.version ^= IODT_VERSION_5 then do; /* wrong version number */
	     code = error_table_$improper_data_format;
	     return;
	end;

	code = 0;

/* get ptrs to various needed tables in the iod tables */
	qgtp = ptr (ithp, iod_tables_hdr.q_group_tab_offset);
	text_strings_ptr = ptr (ithp, iod_tables_hdr.text_strings_offset);

	do i = 1 to q_group_tab.n_q_groups;
	     qgtep = addr (q_group_tab.entries (i));
	     if entry = RQTL then do;			/* when listing the request types */
		if generic_type = "" | generic_type = qgte.generic_type then do; /* want this one? */
		     if hbound (q_list, 1) > n_queues then do;
			n_queues = n_queues + 1;
			q_list (n_queues) = qgte.name;
		     end;
		     else code = error_table_$too_many_names;
		end;
	     end;
	     else if qgte.name = qg_name then do;	/* looking for a specific request type */
		if entry = ACC then acc_name = qgte.driver_id;
		else if entry = GEN then gen_type = qgte.generic_type;
		else if entry = Q then do;		/* we want queue data */
		     default_q = qgte.default_queue;
		     max_queues = qgte.max_queues;
		end;
		else if entry = VFI then do;
		     call return_forms_validation_info;
		end;
		else if entry = FI then do;
		     call return_forms_info;
		end;
		return;
	     end;
	end;

	if entry = RQTL then do;			/* may not be an error for this entry */
	     if n_queues = 0 then code = error_table_$noentry;
	end;
	else code = error_table_$id_not_found;		/* did not find what we were looking for */
	return;

try_again: itp = null;				/* come here after seg_fault_error */
	revert seg_fault_error;			/* if it happens again, let it go */
	go to initiate;				/* try to reinitiate iod_working_tables */

tables_dir: entry returns (char (*));

/* This entry returns the pathname of the current iod_working_tables being
   used by iod_info_ */

	return (sysdir);

tables_ptr: entry returns (ptr);

/* This entry returns a pointer to the current iod_working_tables being used
   by iod_info_ */

	if itp = null then do;
	     call initiate_file_ (sysdir, "iod_working_tables", R_ACCESS, itp, bitcount, code);
	end;
	return (itp);

test: entry (test_dir);				/* for setting test directory */

dcl  test_dir char (*);

	sysdir = test_dir;
	call initiate_file_ (sysdir, "iod_working_tables", R_ACCESS, itp, bitcount, icode);

	return;
%page;
return_forms_validation_info: proc;

	call evaluate_forms_data (null, null, evaluate_forms_info_output_ptr, code);

/* allocate the structure to return data back to the user */
	if evaluate_forms_info_output_ptr ^= null then do;
	     returned_forms_length = evaluate_forms_info_output.forms_length;
	     error_string_length = evaluate_forms_info_output.error_length;
	end;
	else do;
	     returned_forms_length,
		error_string_length = 0;
	end;
	if user_area_ptr = null then
	     allocate validate_forms_info_output in (my_area);
	else allocate validate_forms_info_output in (user_area);

	validate_forms_info_output.version = VALIDATE_FORMS_INFO_OUTPUT_VERSION_1;
	validate_forms_info_output.lines_per_inch = return_lines_per_inch;
	validate_forms_info_output.lines_per_page = return_max_page_length;
	validate_forms_info_output.chars_per_line = return_max_line_length;
	validate_forms_info_output.forms_allowed = return_forms_allowed;
	if returned_forms_length > 0 then
	     validate_forms_info_output.returned_forms = evaluate_forms_info_output.returned_forms;
	if error_string_length > 0 then
	     validate_forms_info_output.error_string = evaluate_forms_info_output.error_string;

	if evaluate_forms_info_output_ptr ^= null then
	     free evaluate_forms_info_output in (my_area);

     end return_forms_validation_info;
%page;
evaluate_forms_data: proc (rqti_ptr, vfiip, vfiop, code);

dcl  rqti_ptr ptr;					/* input ptr to rqti seg to use or NULL */
dcl  vfiip ptr;					/* ptr to evaluate_forms_info_input to use or NULL */
dcl  vfiop ptr;					/* ptr to return evaluate_forms_info_output */
dcl  code fixed bin (35);				/* error code */

	if my_area_ptr = null then
	     my_area_ptr = get_system_free_area_ ();

/* start with known state for the output pointer */
          evaluate_forms_info_output_ptr = null;

/* default to system maximums for page and line length and lpi.  These will be
   replaced by the forms validation routine or the contents of the rqti seg
   if they are applicable.  Also assume forms string not allowed */

	return_lines_per_inch = 6;
	return_max_page_length = 66;
	return_max_line_length = 132;
	return_forms_allowed = "0"b;

/* get page & line limits from the rqti seg if available */

	if rqti_ptr = null then do;			/* have to find rqti_seg ourselves */
	     call initiate_file_ (rtrim (sysdir) || ">ris", (qgte.rqti_seg_name), R_ACCESS, prt_rqtip, bitcount, icode);
	     if icode ^= 0 then
		go to terminate_the_rqti_seg;
	end;
	else prt_rqtip = rqti_ptr;			/* user supplied ptr to rqti_seg */

/* punt out of here if wrong version */
	if prt_rqti.version ^= prt_rqti_version_1 then
	     go to terminate_the_rqti_seg;

/* set return lengths based on data in rqti */
	return_lines_per_inch = prt_rqti.lines_per_inch;
	return_max_page_length = prt_rqti.paper_length;
	return_max_line_length = prt_rqti.paper_width;

terminate_the_rqti_seg:				/* clean up after outselves */
	if rqti_ptr = null then			/* if I initiated, then terminate rqti seg */
	     call terminate_file_ (prt_rqtip, bitcount, TERM_FILE_TERM, icode);

/* now let us see what the forms parser routine finds out for us */

/* if user passed us input structure already built, use it (called from the
   iod_info_$evaluate_forms_info entrypoint by a daemon);

   otherwise we will generate one and fill it in (called from the
   iod_info_$validate_forms_info entrypoint by a user queueing job for
   printing) */
	if vfiip = null then do;
	     evaluate_forms_info_input_ptr = null;

	     on cleanup begin;
		if vfiip = null then		/* if user didn't pass a structure */
		     if evaluate_forms_info_input_ptr ^= null then /* and we have one, we created it */
			free evaluate_forms_info_input; /* so free it */
	     end;

/* allocate input evaluation structure and fill it in with data  */
	     system_input_forms_string_length = validate_forms_info_input.forms_string_length;
	     allocate evaluate_forms_info_input in (my_area);

	     evaluate_forms_info_input.version = EVALUATE_FORMS_INFO_INPUT_VERSION_1;
	     evaluate_forms_info_input.ithp = ithp;	/* copy ptr to daemon tables to use */
	     evaluate_forms_info_input.qgtep = qgtep;	/* & ptr to request type to process for */
	     evaluate_forms_info_input.idtep,		/* no major device */
		evaluate_forms_info_input.mdtep = null; /* no minor device */
	     evaluate_forms_info_input.max_forms_string_length = validate_forms_info_input.max_forms_string_length;
	     evaluate_forms_info_input.forms_string = validate_forms_info_input.forms_string;
	     evaluate_forms_info_input.area_ptr = my_area_ptr;
	end;
	else evaluate_forms_info_input_ptr = vfiip;

	call call_validation_routine;
	if code = 0 then do;
	     return_forms_allowed = "1"b;
	     return_lines_per_inch = evaluate_forms_info_output.lines_per_inch;
	     return_max_page_length = evaluate_forms_info_output.lines_per_page;
	     return_max_line_length = evaluate_forms_info_output.chars_per_line;
	end;

	vfiop = evaluate_forms_info_output_ptr;

/* if I allocated the input structure then get rid of it */
	if vfiip = null then
	     free evaluate_forms_info_input;

     end evaluate_forms_data;

%page;
call_validation_routine: proc;

/* this routine will call the forms validation routine to authenticate any
   forms strings either passed in or defined as default.  It will locate the
   routine to validate the forms string using the following precedence:
   .  device_table value
   .  request_type value
   .  default of "iod_forms_$evaluate"
   However, it will not make any calls unless there is a forms table defined
   for the routine to use.  If the device entry pointer is given, any elements
   in the request type entry will be ignored */

dcl  validation_routine_name char (256);

/* set up all the pointers we will need from the input structure */
	ithp = evaluate_forms_info_input.ithp;
	qgtep = evaluate_forms_info_input.qgtep;
	idtep = evaluate_forms_info_input.idtep;
	mdtep = evaluate_forms_info_input.mdtep;
	text_strings_ptr = ptr (ithp, iod_tables_hdr.text_strings_offset);
	validation_routine_name = "";

/* if a device entry is defined, use the name in the device entry iff a forms
   table name is defined for the device to use.  Otherwise return error */
	if idtep ^= null then do;
	     if return_string (idte.forms_table) = "" then do;
		code = error_table_$no_forms_table_defined;
		return;
	     end;
	     validation_routine_name = return_string (idte.forms_validation);
	end;

/* if no name defined, there was no device entry data available so will will
   use what is available in the request type entry */
	else if qgtep ^= null then do;
	     if return_string (qgte.forms_table) = "" then do;
		code = error_table_$no_forms_table_defined;
		return;
	     end;
	     validation_routine_name = return_string (qgte.forms_validation);
	end;

/* if no name is defined yet, create entrypoint to default, else use the name defined */
	if validation_routine_name = "" then
	     evaluate_forms_entry = iod_forms_$evaluate;
	else do;
	     evaluate_forms_entry = cv_entry_ (
		rtrim (validation_routine_name) || "$evaluate",
		null (), code);
	     if code ^= 0 then return;
	end;

/* now call the given module */
	call evaluate_forms_entry (evaluate_forms_info_input_ptr, evaluate_forms_info_output_ptr, code);

     end call_validation_routine;
%page;

/* return all forms information for a given request type */
return_forms_info: proc;

	if my_area_ptr = null then
	     my_area_ptr = get_system_free_area_ ();

/* if there is no forms validation routine defined for the request type, call
   the system default routine; else call the one defined for the queue */

	if qgte.forms_validation.total_chars = 0 then
	     forms_info_entry = iod_forms_$info;
	else do;
	     forms_info_entry = cv_entry_ (
		return_string (qgte.forms_validation) || "$info",
		null (), code);
	     if code ^= 0 then return;
	end;

/* set up the structure to pass in */
	system_input_forms_string_length = 0;
	evaluate_forms_info_input_ptr = null;

	on cleanup begin;
	     if evaluate_forms_info_input_ptr ^= null then
		free evaluate_forms_info_input;
	end;

	allocate evaluate_forms_info_input in (my_area);

	evaluate_forms_info_input.version = EVALUATE_FORMS_INFO_INPUT_VERSION_1;
	evaluate_forms_info_input.ithp = ithp;		/* iod tables ptr */
	evaluate_forms_info_input.qgtep = qgtep;	/* ptr to request type forms info desired for */
	evaluate_forms_info_input.idtep,		/* no major device defined */
	     evaluate_forms_info_input.mdtep = null;	/* no minor device defined */
	evaluate_forms_info_input.max_forms_string_length = 0; /* no string to validate */
	if user_area_ptr = null then			/* set ptr to area to return data in */
	     evaluate_forms_info_input.area_ptr = my_area_ptr;
	else evaluate_forms_info_input.area_ptr = user_area_ptr;

/* now call the given module */
	call forms_info_entry (evaluate_forms_info_input_ptr, return_area_ptr, code);

/* make sure we clean up after ourselves */
	free evaluate_forms_info_input;

     end return_forms_info;


/* little routine to return a string from text_strings.chars in the i/o daemon tables */
return_string: proc (target) returns (char (*));

dcl  1 target unaligned like text_offset;
	if target.total_chars = 0 then
	     return ("");
	else return (substr (text_strings.chars, target.first_char, target.total_chars));

     end return_string;
%page; %include access_mode_values;
%page; %include iod_device_tab;
%page; %include iod_tables_hdr;
%page; %include prt_rqti;
%page; %include q_group_tab;
%page; %include terminate_file;
%page; %include system_forms_info;
%page; %include user_forms_info;

     end iod_info_;
