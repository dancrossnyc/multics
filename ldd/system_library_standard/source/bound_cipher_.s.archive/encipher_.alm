" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This procedure enciphers an arrya of double words, i.e., fixed bin(71),
" using the key that is provided.  It has entries to both encipher and decipher:
"
"	call encipher_(key,input_array,output_array,array_length)
"
"	call decipher_(key,input_array,output_array,array_length)
"
" where:	key		is fixed bin(71) key for coding
"	input_array(array_length) is fixed bin(71) array
"	output_array(array_length) is fixed bin(71) array
"	array_length	is fixed bin(17) length (double words) of array
"
"	Coded 1 April 1973 by Roger R. Schell, Major, USAF
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	entry	encipher_
	entry	decipher_

	equ	key,2
	equ	input_array,4
	equ	output_array,6
	equ	array_length,8

"
"	Entry to encipher
"

encipher_:
	push
	epplp	ap|output_array,*	"LP -> cipher text
	tra	setup_keys

"
"	Entry to decipher
"

decipher_:
	push
	epplp	ap|input_array,*	"set LP -> cipher text

setup_keys:
				"First create internal keying variables
"Use Tausworth pseudo-random number generator on key

	equ	shift,11		"Shift for generator
	equ	size,36		"Word size used for generator

	tempd	variables(12)	"Internal keying variables

	eax6	0		"loop index in x6
	ldaq	ap|key,*		"Start with input key

mask_loop:
				"Create masks
	staq	variables,6	"save copy of generator seed
	qrl	shift		"Now generate pseudo-random number
	arl	shift
	eraq	variables,6
	staq	variables,6
	qls	size-shift
	als	size-shift
	eraq	variables,6
	staq	variables,6	"Save result

	eax6	2,6
	cmpx6	18,du		"Generate 9 double words
	tnz	mask_loop

"
"Next create 7-bit shift variables

	eax6	0
	lrl	11		"First 7 bits to upper A-reg
	eax0	0		"Zero for clearing half word
shift_loop:
	sta	variables+A1,6	"Upper A-reg is shift variable
	sxl0	variables+A1,6	"Zero lower half word
	lls	7
	ana	=o000177777777	"Save 7 bits in upper A-reg
	eax6	1,6
	cmpx6	7,du		"Generate 7 shift variables
	tnz	shift_loop

"
"	Now that we have needed variables, aply the cipher
"

"Declaration of offsets of keying variables
	equ	C0,0		"Initial cipher text from key
	equ	M1,2		"Mask variables
	equ	M2,4
	equ	M3,6
	equ	M4,8
	equ	M5,10
	equ	M6,12
	equ	M7,14
	equ	A1,16		"Amount of shift -- as address
	equ	A2,17
	equ	A3,18
	equ	A4,19
	equ	A5,20
	equ	A6,21
	equ	A7,22

	lxl5	ap|array_length,*	"Get length (double words)
	eax5	-1,5		"Check for zero or negative
	tmi	return
	eax6	0		"X6 is index into arrays
	eppbp	variables+C0	"Initial cipher text from key
cipher_loop:
	ldaq	bp|0

"First compute select function

	llr	variables+A6,*
	adlaq	variables+M6
	llr	variables+A7,*
	eraq	variables+M7
	eax1	0,ql		"Save select function
"
"Compute value
"
	ldaq	bp|0
	llr	variables+A1,*
	adlaq	variables+M1
	canx1	=o10,du
	tnz	2,ic
	llr	variables+A2,*
	eraq	variables+M2
	canx1	=o4,du
	tnz	2,ic
	llr	variables+A3,*
	adlaq	variables+M3
	canx1	=o2,du
	tnz	2,ic
	llr	variables+A4,*
	eraq	variables+M4
	canx1	=o1,du
	tnz	2,ic
	llr	variables+A5,*
	adlaq	variables+M5	"AQ contains computed key

	eppbp	lp|0,6		"set BP -> next cipher text autokey
	eraq	ap|input_array,*6
	staq	ap|output_array,*6	"return ciphered value
	eax6	2,6		"Increment array offset
	eax5	-1,5		"Check for end of array
	tpl	cipher_loop
return:
"
"Clean up the 'dirty blackboard' before returning

	bool	rpt,5202		"RPT instruction

	ldaq	*		" Load AQ with garbage
	eax6	0
	vfd	8/11,2/0,1/1,7/0,12/rpt,6/2 "RPT instruction
	staq	variables,6	"Overwrite keying variables

	return

	end
