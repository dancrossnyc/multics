/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* Read a password from the terminal */

/* Modified: 9 November 1981 by G. Palter to add the switch entry and not assume the last character read is a newline */
/* Modified: 1 August 1983 by Jim Lippard to use iox_signal_ rather than
   (the not externally available) ios_signal_ */


read_password_:
     procedure (P_prompt, P_password);


/* Parameters */

dcl  P_prompt character (*) parameter;			/* message to prompt user for the password */
dcl  P_password character (*) parameter;		/* the returned password */

dcl  P_tty_id character (4) aligned parameter;		/* get_password_: no longer used */
dcl  P_tty_type fixed binary parameter;			/* get_password_: no longer used */

dcl  P_output_switch pointer parameter;			/* switch: -> switch to write prompt */
dcl  P_input_switch pointer parameter;			/* switch: -> switch to read password */
dcl  P_code fixed binary (35) parameter;		/* switch: status code if read fails */

dcl  no_return_code bit (1) aligned;

dcl (input_switch, output_switch) pointer;

dcl (char_loc, indx, num_read) fixed binary (21);
dcl  err_code fixed binary (35);
dcl  line_buffer character (120);
dcl  temp_buffer character (120) varying;

dcl (SP	initial (" "),
     HT	initial ("	"),
     NL	initial ("
"))
	character (1) static options (constant);

dcl (TWO_POWER_THIRTYFIVE	initial (34359738368),
     TWO_POWER_SIXTY	initial (1152921504606846976))
	fixed binary (71) static options (constant);

dcl (iox_$user_input, iox_$user_output) pointer external;

dcl  error_table_$long_record fixed binary (35) external;

dcl  ioa_$ioa_switch entry () options (variable);
dcl  ioa_$ioa_switch_nnl entry () options (variable);
dcl  iox_signal_ entry (ptr, fixed binary (35));
dcl  iox_$control entry (pointer, character (*), pointer, fixed binary (35));
dcl  iox_$get_line entry (pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));

dcl (addr, binary, bit, clock, collate, length, ltrim, mod, null, rtrim, search, substr, translate)
	builtin;

dcl  cleanup condition;

/*  */

/* Read a password from the user's terminal */

/* read_password_: entry (P_prompt, P_password); */

get_password_:					/* old now obsolete entry */
     entry (P_prompt, P_tty_id, P_tty_type, P_password);

	no_return_code = "1"b;

	input_switch = iox_$user_input;		/* read from user_input ... */
	output_switch = iox_$user_output;		/* ... and put prompt on user_output */

	go to READ_PASSWORD_COMMON;


/* Read a password from a specified switch */

switch:
     entry (P_output_switch, P_input_switch, P_prompt, P_password, P_code);

	no_return_code = "0"b;			/* have a return code */
	P_code = 0;				/* ... so initialize it */

	input_switch = P_input_switch;
	output_switch = P_output_switch;


READ_PASSWORD_COMMON:
	call ioa_$ioa_switch (output_switch, "^a", P_prompt);

	on condition (cleanup)
	     call iox_$control (input_switch, "printer_on", null (), (0));

	call iox_$control (input_switch, "printer_off", null (), err_code);
	if err_code ^= 0 then			/* can't turn off printer: print a mask */
	     call print_garbage ();

	err_code = -1;
	do while (err_code ^= 0);
	     call iox_$get_line (input_switch, addr (line_buffer), length (line_buffer), num_read, err_code);
	     if err_code ^= 0 then do;		/* something went wrong ... */
		if (err_code = error_table_$long_record) then
		     err_code = 0;			/* ... use the first part of the line */
		else if no_return_code then		/* ... no nice way to inform caller */
		     call iox_signal_ (input_switch, err_code);
		else do;				/* ... tell the caller about it */
		     P_code = err_code;
		     return;
		end;
	     end;
	end;

	num_read = length (rtrim (substr (line_buffer, 1, num_read), NL));
						/* strip trailing newlines */

	substr (line_buffer, 1, num_read) = translate (substr (line_buffer, 1, num_read), SP, HT);
						/* fudge the rest of canonicalization */

	temp_buffer = ltrim (substr (line_buffer, 1, num_read)); /* trim leading whitespace */
	char_loc = search (temp_buffer, SP);
	if char_loc ^= 0 then			/* remove anything after first whitespace in the string */
	     temp_buffer = substr (temp_buffer, 1, char_loc - 1);

	if length (temp_buffer) = 0 then
	     P_password = "*";			/* caller really wanted a blank password */
	else P_password = temp_buffer;

	call iox_$control (input_switch, "printer_on", null (), (0));

	return;

/*  */

/* Print a password mask (including a line of garbage) */

print_garbage:
	procedure ();

dcl  strange_number fixed binary (71);
dcl  strange_bits bit (60);
dcl  CR character (1);
dcl  garbage character (12);

dcl  MISC character (32) static options (constant) initial ("etaiosqwertyuioplkjhgfdsazxcvbnm");

	     CR = substr (collate (), 14, 1);		/* be legal now */

	     strange_number = 1979339333 * mod (clock (), TWO_POWER_THIRTYFIVE);
	     strange_bits = bit (binary (mod (strange_number, TWO_POWER_SIXTY), 60));

	     do indx = 1 by 1 to 12;
		substr (garbage, indx, 1) = substr (MISC, 1 + binary (substr (strange_bits, 1 - 5 + (indx * 5), 5)), 1);
	     end;

	     call ioa_$ioa_switch_nnl (output_switch, "YourPassword^aXWXWXWXWXWXW^a986986986986^a^a^a",
				 CR, CR, CR, garbage, CR);

	     return;

	end print_garbage;

     end read_password_;
