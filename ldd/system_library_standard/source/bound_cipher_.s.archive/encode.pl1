/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


encode: code: proc;

/* Commands encode and decode, for enciphering and deciphering files given a key.

   Usage:
   encode path1A {path2A ... path1N path2N} {-key STR}
   where:
   1. path1A  is the pathname of a segment.
   2. path2A  is the optional pathname of the encoded result, with
   the suffix .code assumed. The default is path1A.code.

   decode path1A {path2A ... path1N path2N} {-key STR}
   where:
   1. path1A  is the pathname of a segment, with .code suffix assumed.
   2. path2A  is the optional pathname of the decoded result.
   The default is path1A without .code suffix.

   Written 07/06/79 by Steve Herbst */
/* TR7458 Add -key 10/30/80 S. Herbst */
/* Fixed to check for w permission on target before asking for key 10/26/82 S. Herbst */


/* Enciphered and deciphered as arrays of fixed bin (71) word pairs */
dcl  source_array (source_len) fixed bin (71) based (source_ptr);
dcl  target_array (source_len) fixed bin (71) based (target_ptr);

dcl 1 entries (ecount) aligned based (eptr),		/* for hcs_$star_ */
    2 type bit (2) unaligned,
    2 nnames bit (16) unaligned,
    2 nindex bit (18) unaligned;

dcl  names (99 /* arbitrary */) char (32) aligned based (nptr); /* names from hcs_$star_ */

dcl  arg char (arg_len) based (arg_ptr);
dcl (dn, source_dn, target_dn) char (168);
dcl (en, equal_en, match_en, source_en, star_en, target_en) char (32);
dcl  command char (32);				/* "encode" or "decode" */
dcl (buffer, buffer2) char (11);			/* input key */

dcl (encode_sw, got_key_sw, path2_sw) bit (1);

dcl  error_table_$badopt fixed bin (35) ext;
dcl  area area based (area_ptr);

dcl (area_ptr, arg_ptr, eptr, nptr, source_ptr, target_ptr) ptr;

dcl  key fixed bin (71);				/* encipher/decipher key */
dcl  bit_count fixed bin (24);
dcl (arg_count, ecount, i, j, source_len) fixed bin;
dcl arg_len fixed bin (21);

dcl  code fixed bin (35);
dcl  error_table_$badstar fixed bin (35) ext;
dcl  error_table_$entlong fixed bin (35) ext;
dcl  error_table_$moderr fixed bin (35) ext;
dcl  error_table_$no_w_permission fixed bin (35) ext;
dcl  error_table_$sameseg fixed bin (35) ext;
dcl  error_table_$zero_length_seg fixed bin (35) ext;

dcl  check_star_name_$entry entry (char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  com_err_$suppress_name entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  decipher_ entry (fixed bin (71), dim (*) fixed bin (71), dim (*) fixed bin (71), fixed bin);
dcl  encipher_ entry (fixed bin (71), dim (*) fixed bin (71), dim (*) fixed bin (71), fixed bin);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_equal_name_ entry (char (*), char (*), char (32), fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  read_password_ entry (char (*), char (*));

dcl (divide, fixed, length, null, rtrim, substr, unspec) builtin;

dcl  cleanup condition;
						/*  */
	encode_sw = "1"b;
	command = "encode";
	go to COMMON;

decode:	entry;

	encode_sw = "0"b;
	command = "decode";

COMMON:	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, command);
	     return;
	end;
	if arg_count = 0 then do;
	     call com_err_$suppress_name (0, command,
		"Usage:  ^a path1A {path2A ... path1N path2N}", command);
	     return;
	end;

	got_key_sw = "0"b;

	path2_sw = "0"b;
	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if substr (arg, 1, 1) = "-" then
		if arg = "-key" then do;
		     if got_key_sw then do;
			call com_err_ (0, command, "Attempt to specify two keys.");
			return;
		     end;
		     i = i + 1;
		     if i > arg_count then do;
			call com_err_ (0, command, "No value specified for -key.");
			return;
		     end;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if arg_len > length (buffer) then do;
			call com_err_ (0, command, "Key longer than ^d characters.", length (buffer));
			return;
		     end;
		     buffer = arg;

/* Calculate fixed bin (71) key */

		     call build_key (buffer, key);

		     arg_ptr = null;
		     got_key_sw = "1"b;
		end;
		else do;
		     call com_err_ (error_table_$badopt, command, "^a", arg);
		     return;
		end;
	end;

	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if substr (arg, 1, 1) = "-" then do;
		i = i + 1;
		go to END_LOOP;
	     end;

	     call expand_pathname_ (arg, dn, en, code);
	     if code ^= 0 then do;
		call com_err_ (code, command, "^a", arg);
		return;
	     end;
	     if path2_sw then do;
		target_dn = dn;
		equal_en = en;

		call cipher_stars;

		path2_sw = "0"b;
	     end;
	     else do;
		source_dn = dn;
		star_en = en;
		path2_sw = "1"b;
	     end;
END_LOOP:
	end;
	if path2_sw then do;
	     target_dn = dn;
	     equal_en = "==";

	     call cipher_stars;
	end;

RETURN:	return;
						/*  */
cipher_stars: proc;

/* This internal procedure applies the star convention and calls cipher */

	     call check_star_name_$entry (star_en, code);
	     if code = error_table_$badstar then do;
		call com_err_ (code, command, "^a", pathname_ (source_dn, star_en));
		go to RETURN;
	     end;
	     else if code = 0 then do;		/* no stars */
		source_en = star_en;

		call cipher;
		return;
	     end;

/* Starname */

	     eptr, nptr = null;

	     on condition (cleanup) call star_clean_up;

	     area_ptr = get_system_free_area_ ();
	     match_en = star_en;
	     if ^encode_sw then call append_code (match_en);

	     call hcs_$star_ (source_dn, match_en, 3 /* all */, area_ptr, ecount, eptr, nptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, command, "^a", pathname_ (source_dn, star_en));
		return;
	     end;

	     do j = 1 to ecount;
		source_en = names (fixed (entries (j).nindex));
		if ^encode_sw then			/* remove .code suffix */
		     source_en = substr (source_en, 1, length (rtrim (source_en)) - 5);

		call cipher;
	     end;

	     call star_clean_up;

star_clean_up: proc;

		if eptr ^= null then free entries in (area);
		if nptr ^= null then free names in (area);

	     end star_clean_up;

	end cipher_stars;
						/*  */
cipher:	proc;

/* This internal procedure applies the equal convention and processes a single segment */

	     call get_equal_name_ (source_en, equal_en, target_en, code);
	     if code ^= 0 then do;
		call com_err_ (code, command, "^a", equal_en);
		return;
	     end;

	     if encode_sw then call append_code (target_en);
	     else call append_code (source_en);

	     call hcs_$initiate_count (source_dn, source_en, "", bit_count, 0, source_ptr, code);
	     if source_ptr = null then do;
SOURCE_ERROR:	call com_err_ (code, command, "^a", pathname_ (source_dn, source_en));
		return;
	     end;
	     source_len = divide (bit_count + 71, 72, 18, 0); /* number of double words in segment */
	     if source_len = 0 then do;
		code = error_table_$zero_length_seg;
		go to SOURCE_ERROR;
	     end;
	     call hcs_$make_seg (target_dn, target_en, "", 01010b, target_ptr, code);
	     if target_ptr = null then do;
TARGET_ERROR:	call com_err_ (code, command, "^a", pathname_ (target_dn, target_en));
		return;
	     end;
	     call hcs_$truncate_seg (target_ptr, 0, code);
	     if code ^= 0 then do;
		if code = error_table_$moderr then code = error_table_$no_w_permission;
		go to TARGET_ERROR;
	     end;

	     if source_ptr = target_ptr then do;
		code = error_table_$sameseg;
		go to SOURCE_ERROR;
	     end;

	     if ^got_key_sw then do;
		buffer, buffer2 = "";
GET_KEY:		call read_password_ ("Key:", buffer);
		if encode_sw then do;
		     call read_password_ ("Verify:", buffer2);
		     if buffer ^= buffer2 then do;	/* twice to make sure */
			call com_err_ (0, "encode", "Keys do not match. Please try again.");
			go to GET_KEY;
		     end;
		end;

/* Generate a fixed bin (71) key */

		call build_key (buffer, key);

		buffer2 = "";
		got_key_sw = "1"b;
	     end;

	     if encode_sw then call encipher_ (key, source_array, target_array, source_len);
	     else call decipher_ (key, source_array, target_array, source_len);

	     call hcs_$set_bc_seg (target_ptr, bit_count, code);
	     call hcs_$terminate_noname (source_ptr, code);
	     call hcs_$terminate_noname (target_ptr, code);

	end cipher;
/**/
append_code: proc (a_en);

/* This internal procedure appends a .code suffix and checks for entlong */

dcl a_en char (32);

	if length (rtrim (a_en)) + 5 > length (a_en) then do;
	     call com_err_ (error_table_$entlong, command, "^a.code", a_en);
	     go to RETURN;
	end;

	a_en = rtrim (a_en) || ".code";

end append_code;
%page;
build_key: proc (A_buffer, A_key);

dcl A_buffer char (11);
dcl A_key fixed bin (71);
dcl k fixed bin;
dcl buffer_bits bit(99) unaligned;
dcl key_bits bit(72) unaligned;

dcl 1 pack unaligned defined (key_bits),
   2 bits (10) bit (7) unaligned,
   2 pad bit (2) unaligned;

dcl 1 strip unaligned defined (buffer_bits),
   2 c (11) unaligned,
    3 pad bit (2) unaligned,
    3 bits bit (7) unaligned;

	unspec (buffer_bits) = unspec (A_buffer);

	do k = 1 to 10;
	     pack.bits (k) = strip.c (k).bits;
	end;

	pack.pad = substr (strip.c (11).bits, 6, 2);
	unspec (A_key) = unspec (key_bits);

	A_buffer = "";

end build_key;

     end encode;

