/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-08-05,Houck), approve(86-08-11,MCR7501), audit(86-08-15,Wong),
     install(86-08-29,MR12.0-1140):
     Fixed so that an error code is now checked which was previously ignored.
  2) change(86-11-17,Dickson), approve(86-11-18,MECR0001),
     audit(86-11-17,GDixon), install(86-11-18,MR12.0-1221):
     Fix bug in which mailboxes/message_segments couldn't be deleted because
     the "safety" switch was on, but the "copy" switch was unimplemented.
  3) change(86-12-04,Dickson), approve(86-12-04,MCR7582),
     audit(86-12-08,GDixon), install(86-12-09,MR12.0-1236):
     Fixed the bug in which mailboxes/message_segments couldn't be delete
     because the "safety" switch was on, but the "copy" switch was
     unimplemented.
                                                   END HISTORY COMMENTS */


/* format: style2,idind30,indcomtxt */

dl_handler_:
     procedure (id, dname, ename, code);

/* Initially coded 6/69 by V. Voydock */
/* Modified 03/08/70 P. Karger */
/* Modified 12/03/70 E. Donner */
/* Modified 11/02/71 Dennis Capps */
/* Modified 01/74 by E. Donner to reflect that the safety switch protects a branch. */
/* Rewritten to work on mailboxes and queues 03/28/80 S. Herbst */
/* Changed $dirdelete to say "empty" or "nonempty" if possible 12/15/82 S. Herbst */
/* changed for object_type_, added switches entry 7/2/83 Jay Pattin */
/* 830927 BIM object_type_ --> fs_util_ */
/* Fixed to return et_$vtoc_io_error & try to ignore et_$vtoce_connection_fail 06/25/84 S. Herbst */


%include query_info;
%include dl_handler_options;

%include suffix_info;
%include copy_flags;

	dcl     1 dir_acl		        aligned,	/* for hcs_$add_dir_acl_entries */
		2 user_id		        char (32) aligned,
		2 mode		        bit (36) aligned,
		2 status		        fixed bin (35);


	dcl     (id, dname, ename)	        char (*);
	dcl     switches		        bit (36) aligned parameter;
	dcl     (code, star_code)	        fixed bin (35);

	dcl     fs_util_type	        char (32);
	dcl     answer		        char (150) varying;
	dcl     (empty_str, switch_type)      char (32);

	dcl     fb_copy_switch	        fixed bin (1);
	dcl     copy_switch		        bit (1) aligned;
	dcl     safety_switch	        bit (1) aligned;

	dcl     bit_count		        fixed bin (24);
	dcl     entry_count		        fixed bin;
	dcl     type		        fixed bin (2);

	dcl     error_table_$action_not_performed
				        fixed bin (35) ext;
	dcl     error_table_$nomatch	        fixed bin (35) ext;
	dcl     error_table_$safety_sw_on     fixed bin (35) ext;
	dcl     error_table_$vtoce_connection_fail
				        fixed bin (35) ext;

	dcl     command_query_	        entry options (variable);
	dcl     fs_util_$list_switches        entry (char (*), char (*), char (*), ptr, ptr, fixed bin (35));
	dcl     get_group_id_	        entry returns (char (32));
	dcl     get_system_free_area_	        entry returns (ptr);
	dcl     hcs_$add_dir_acl_entries      entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$get_safety_sw	        entry (char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     hcs_$get_copysw	        entry (char (*), char (*), fixed bin (1), fixed bin (35));
	dcl     hcs_$set_copysw	        entry (char (*), char (*), fixed bin (1), fixed bin (35));
	dcl     hcs_$set_safety_sw	        entry (char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     hcs_$star_		        entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				        fixed bin (35));
	dcl     hcs_$status_minf	        entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				        fixed bin (35));
	dcl     installation_tools_$set_safety_sw
				        entry (char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     fs_util_$get_switch	        entry (char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     fs_util_$set_switch	        entry (char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     fs_util_$get_type	        entry (character (*), character (*), character (*), fixed binary (35));
	dcl     pathname_		        entry (char (*), char (*)) returns (char (168));

	dcl     cleanup		        condition;

	dcl     (addr, hbound, lbound, null, string, unspec)
				        builtin;

/* dl_handler_$dl_handler_ */

	string (dl_handler_options) = ""b;
	goto JOIN;

dl_handler_$switches:
     entry (id, dname, ename, switches, code);

	string (dl_handler_options) = switches;
	if dl_handler_options.no_question
	then goto RESET;

JOIN:
	call query_init;
	query_info.status_code = error_table_$safety_sw_on;

	if dl_handler_options.raw
	then call hcs_$get_safety_sw (dname, ename, safety_switch, code);
	else call fs_util_$get_switch (dname, ename, "safety", safety_switch, code);
	if code ^= 0
	then if code = error_table_$vtoce_connection_fail
	     then go to GET_STATUS;			/* OK to delete anyway */
	     else return;

	if safety_switch
	then switch_type = "safety switch";
	else do;
		if dl_handler_options.raw
		then do;
			call hcs_$get_copysw (dname, ename, fb_copy_switch, code);
			copy_switch = (fb_copy_switch ^= 0);
		     end;
		else call fs_util_$get_switch (dname, ename, "copy", copy_switch, code);
		if code ^= 0
		then if code = error_table_$vtoce_connection_fail
		     then go to GET_STATUS;		/* unlikely 2nd time */
		     else return;

		if copy_switch
		then switch_type = "copy switch";
		else go to GET_STATUS;		/* neither switch is on */
	     end;

	code = 0;

	call command_query_ (addr (query_info), answer, id, "^a is protected by ^a. Do you want to delete it?  ",
	     pathname_ (dname, ename), switch_type);

	if answer = "no"
	then do;
NO:
		code = error_table_$action_not_performed;
		return;
	     end;
	goto RESET;

noquestion:
     entry (id, dname, ename, code);			/* dl_handler_$noquestion: no need to query */

	string (dl_handler_options) = ""b;		/* no need to set no_question */

RESET:
	if dl_handler_options.library
	then call installation_tools_$set_safety_sw (dname, ename, "0"b, code);
	else if dl_handler_options.raw
	then do;
		call hcs_$set_copysw (dname, ename, 0, code);
		call hcs_$set_safety_sw (dname, ename, "0"b, code);
	     end;
	else do;
		call fs_util_$set_switch (dname, ename, "copy", "0"b, code);
		if code ^= 0
		then if ^switch_implemented (dname, ename, "copy")
		     then code = 0;
		if code = 0
		then do;
			call fs_util_$set_switch (dname, ename, "safety", "0"b, code);
			if code ^= 0
			then if ^switch_implemented (dname, ename, "safety")
			     then code = 0;
		     end;
	     end;
	if code ^= 0
	then return;

/* Obtain storage system type */

GET_STATUS:
	call hcs_$status_minf (dname, ename, 0, type, bit_count, code);
	if code ^= 0
	then return;

/* If entry is a directory, add current user onto ACL with sma access */

	if type = 2 & bit_count = 0
	then do;
		if ^dl_handler_options.raw
		then do;				/* is it really a dir? */
			call fs_util_$get_type (dname, ename, fs_util_type, code);
			if code = 0 & fs_util_type ^= FS_OBJECT_TYPE_DIRECTORY
			then return;		/* its some sort of extended something */
		     end;

		dir_acl.user_id = get_group_id_ ();
		dir_acl.mode = "111"b;
		call hcs_$add_dir_acl_entries (dname, ename, addr (dir_acl), 1, code);
	     end;

	return;					/*						*/
dblstar:
     entry (id, dname, ename, code);			/* "Do you want to delete '**'? */

	call query_init;
	query_info.suppress_name_sw = "1"b;

	call command_query_ (addr (query_info), answer, id, "Do you want to '^a ^a' in ^a ?  ", id, ename, dname);

	if answer = "no"
	then go to NO;
	else code = 0;

	return;



dirdelete:
     entry (id, dname, ename, code);			/* "Do you want to delete the directory...?" */

	call query_init;

	call hcs_$star_ (pathname_ (dname, ename), "**", 3 /* ALL ENTRIES */, null, entry_count, null, null, star_code);
	if star_code = 0
	then if entry_count = 0
	     then empty_str = " empty";
	     else empty_str = " nonempty";
	else if star_code = error_table_$nomatch
	then empty_str = " empty";
	else empty_str = "";
	call command_query_ (addr (query_info), answer, id, "Do you want to delete the^a directory ^a ? ", empty_str,
	     pathname_ (dname, ename));
	if answer = "no"
	then go to NO;
	else code = 0;

	return;					/*						*/
query_init:
     proc;

	unspec (query_info) = "0"b;
	query_info.version = query_info_version_4;
	query_info.yes_or_no_sw = "1"b;
	query_info.question_iocbp, query_info.answer_iocbp = null;

     end query_init;


switch_implemented:
     procedure (dname, ename, switch) returns (bit (1) aligned);

	dcl     switch		        char (32);
	dcl     dname		        char (*);
	dcl     ename		        char (*);

	dcl     found		        bit(1);
	dcl     indx		        fixed bin;
	dcl     system_area_ptr	        ptr;
	dcl     system_area		        area based(system_area_ptr);

	switch_list_ptr = null ();
	on cleanup call cleanup_switch_list;
	system_area_ptr = get_system_free_area_();

	call fs_util_$list_switches (dname, ename, SWITCH_LIST_VERSION_1,
	     addr(system_area), switch_list_ptr, code);
	if code ^= 0 then return ("0"b);

	do indx = lbound (switch_list.names, 1)
	       to hbound (switch_list.names, 1)
	    while (switch_list.names(indx) ^= switch);
	end;
	found = indx > hbound(switch_list.names, 1);
	free switch_list in (system_area);

	return (found);

cleanup_switch_list:
     procedure;

	if switch_list_ptr ^= null ()
	then free switch_list in (system_area);

     end cleanup_switch_list;

     end switch_implemented;

     end dl_handler_;
