/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Honeywell Bull Inc., 1987                   *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1983    *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-11-11,Lippard), approve(86-12-08,MCR7589),
     audit(87-02-16,Farley), install(87-03-23,MR12.1-1009):
     Modified to allow damaged switch for directories.
  2) change(87-08-21,TLNguyen), approve(87-08-21,MCR7556),
     audit(87-09-01,Lippard), install(87-12-07,MR12.2-1009):
     a. Change the switch_on to return an error message to the user when
        it fails to determine the type of a specified non-existent entry.
     
     b. Change the switch_on to set a specified support switch name on
        for a specified existing extended entry type such as forum.
  3) change(88-05-12,Lippard), approve(88-05-02,MCR7881),
     audit(88-06-16,Fawcett), install(88-08-02,MR12.2-1074):
     Changed to allow setting of audit_switch.
  4) change(88-08-16,TLNguyen), approve(88-08-16,MCR7921),
     audit(88-08-17,Parisek), install(88-08-23,MR12.2-1091):
     Prevents an infinitive loop when one of the specified existent paths is a
     Multisegment-file (MSF).
                                                   END HISTORY COMMENTS */


/* format: style2,idind30,indcomtxt */
switch_on:
swn:
     procedure options (variable);

/****
      Syntax:  switch_on name paths {-chase/-no_chase}
      switch_off name paths {-chase/-no_chase}

      Turns on or off the named switch (safety, copy, no_complete_volume_dump, etc.) for the
      specified pathnames. The star convention is allowed in paths.

      For an MSF, the switches of the MSF dir (when possible) and those of all the non-link components are set. */

/* Written 06/18/80 by S. Herbst */
/* Fixed to see links with starname only if -chase 11/17/80 S. Herbst */
/* Modified September 1982, J. Bongiovanni, for synchronized switch */
/* Added -name 10/26/82 S. Herbst */
/* Modified 2/20/83 Jay Pattin for object_type_ */
/* Modified 830927 BIM for object_type_ --> fs_util_ */
/* Fixed to detect "Entry not found" 12/13/83 S. Herbst */
/* Fixed to not blow out trying to find obj map of null seg, 1984.08.26, MAP */
/* 850206 MSharpe to replace -fcnt with -inase/inaee */
/* 850226 MSharpe to give better error messages when invalid switch names
   are given in conjunction with starnames */

/* Constants */

	dcl     long_key		        (8) char (32) int static options (constant)
				        init ("copy", "damaged", "complete_volume_dump",
				        "incremental_volume_dump", "perprocess_static", "safety", "synchronized","audit");

	dcl     short_key		        (8) char (32) int static options (constant)
				        init ("cp", "dm", "cvd", "ivd", "pps", "sf", "synch", "ad");

	dcl     long_long_key	        (8) char (32) int static options (constant)
				        init ("copy_switch", "damaged_switch", "complete_volume_dump_switch",
				        "incremental_volume_dump_switch", "perprocess_static_switch",
				        "safety_switch", "synchronized_switch","audit_switch");

	dcl     short_long_key	        (8) char (32) int static options (constant)
				        init ("csw", "dsw", "cvds", "ivds", "ppsw", "ssw", "synsw","asw");

	dcl     DIR_ALLOWED		        bit (8) aligned static options (constant) init ("01000101"b);

	dcl     (UNKNOWN_KEY, GENERAL_SET)    fixed bin int static options (constant) init (9);

	dcl     NO_CHASE		        fixed bin (1) int static options (constant) init (0);

	dcl     BRANCHES_ONLY	        fixed bin int static options (constant) init (2);
	dcl     BRANCHES_AND_LINKS	        fixed bin int static options (constant) init (3);

	dcl     (
	        LINK_TYPE		        init (0),
	        SEG_TYPE		        init (1),
	        DIR_TYPE		        init (2),
	        MSF_TYPE		        init (3),
	        EXTENDED_TYPE	        init (4)
	        )			        fixed bin static options (constant);


/* Based */

	dcl     arg		        char (arg_len) based (arg_ptr);

	dcl     1 entries		        (entries_count) aligned based (entries_ptr),
		2 type		        fixed bin (2) unaligned unsigned,
		2 nnames		        fixed bin (15) unaligned,
		2 nindex		        fixed bin (17) unaligned;

	dcl     names		        (99 /* arbitrary */) char (32) aligned based (names_ptr);


/* Automatic */

	dcl     (dn, target_dn)	        char (168);
	dcl     (en, key_name, me, star_en, target_en)
				        char (32);

	dcl     (chase_arg_given_sw, chase_sw, force_no_type_sw, got_key, got_path, name_sw, some_sw, star_sw,
	        switch_value)	        bit (1) aligned;

	dcl     area		        area based (area_ptr);

	dcl     (area_ptr, arg_ptr, entries_ptr, names_ptr)
				        ptr;

	dcl     (arg_count, arg_len, entries_count, i, j, key_index, star_type, type)
				        fixed bin;
	dcl     code		        fixed bin (35);

	dcl     error_table_$argerr	        fixed bin (35) ext;
	dcl     error_table_$badopt	        fixed bin (35) ext;
	dcl     error_table_$incorrect_access fixed bin (35) ext;
	dcl     error_table_$moderr	        fixed bin (35) ext;
	dcl     error_table_$no_dir	        fixed bin (35) ext;
	dcl     error_table_$no_s_permission  fixed bin (35) ext;
	dcl     error_table_$nomatch	        fixed bin (35) ext;
	dcl     error_table_$not_a_branch     fixed bin (35) ext;
	dcl     error_table_$root	        fixed bin (35) ext;

	dcl     (
	        com_err_,
	        com_err_$suppress_name
	        )			        entry options (variable);
	dcl     check_star_name_$entry        entry (char (*), fixed bin (35));
	dcl     cu_$arg_count	        entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     expand_pathname_	        entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_group_id_	        entry returns (char (32));
	dcl     get_system_free_area_	        entry returns (ptr);
	dcl     get_wdir_		        entry returns (char (168));
	dcl     hcs_$add_acl_entries	        entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$delete_acl_entries       entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$get_link_target	        entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$initiate_count	        entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr,
				        fixed bin (35));
	dcl     hcs_$list_acl	        entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     hcs_$set_copysw	        entry (char (*), char (*), fixed bin (1), fixed bin (35));
	dcl     hcs_$set_damaged_sw	        entry (char (*), char (*), bit (1), fixed bin (35));
	dcl     hcs_$set_safety_sw	        entry (char (*), char (*), bit (1), fixed bin (35));
	dcl     hcs_$set_synchronized_sw      entry (char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     hcs_$set_volume_dump_switches entry (char (*), char (*), fixed bin, fixed bin, fixed bin (35));
	dcl     hcs_$star_		        entry (char (*), char (*), fixed bin, ptr, fixed bin, ptr, ptr,
				        fixed bin (35));
	dcl     hcs_$status_minf	        entry (char (*), char (*), fixed bin (1), fixed bin, fixed bin (24),
				        fixed bin (35));
	dcl     hcs_$terminate_noname	        entry (ptr, fixed bin (35));
	dcl     fs_util_$set_switch	        entry (char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     fs_util_$get_type	        entry (character (*), character (*), character (*), fixed binary (35));
	dcl     pathname_		        entry (char (*), char (*)) returns (char (168));
          dcl     system_privilege_$set_entry_audit_switch
    	        entry (char (*), char (*), bit (1), fixed bin (35));

	dcl     (addr, addrel, divide, fixed, hbound, index, null, rtrim, substr)
				        builtin;

          dcl     test_linkage_entry	        entry variable options (variable);


	dcl     cleanup		        condition;
          dcl     linkage_error	        condition;
%page;
	me = "switch_on";
	switch_value = "1"b;
	go to COMMON;

switch_off:
swf:
     entry;

	me = "switch_off";
	switch_value = "0"b;

COMMON:
	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, me);
		return;
	     end;

/* Read control args */

	chase_sw, chase_arg_given_sw, force_no_type_sw = "0"b;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) = "-"
	     then if arg = "-chase"
		then chase_sw, chase_arg_given_sw = "1"b;
		else if arg = "-no_chase"
		then do;
			chase_sw = "0"b;
			chase_arg_given_sw = "1"b;
		     end;

		else if arg = "-interpret_as_standard_entry" | arg = "-inase"
		then force_no_type_sw = "1"b;

		else if arg = "-interpret_as_extended_entry" | arg = "-inaee"
		then force_no_type_sw = "0"b;

		else if arg = "-name" | arg = "-nm"
		then do;				/* skip following arg */
			i = i + 1;
			if i > arg_count
			then do;
				call com_err_ (0, me, "No value specified for -name");
				return;
			     end;
		     end;
		else do;
			call com_err_ (error_table_$badopt, me, "^a", arg);
			return;
		     end;
	end;

/* Read and process other args */

	got_key, got_path, name_sw = "0"b;
	area_ptr, entries_ptr, names_ptr = null;
	on cleanup call clean_up;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if arg = "-name" | arg = "-nm"
	     then name_sw = "1"b;
	     else if index (arg, "-") ^= 1
	     then if ^got_key
		then do;
			key_name = arg;
			do j = hbound (long_key, 1) by -1 to 1 while (long_key (j) ^= key_name);
			end;
			if j = 0
			then do;
				do j = hbound (short_key, 1) by -1 to 1 while (short_key (j) ^= key_name);
				end;
				if j = 0
				then do;
					do j = hbound (long_long_key, 1) by -1 to 1
					     while (long_long_key (j) ^= key_name);
					end;
					if j = 0
					then do;
						do j = hbound (short_long_key, 1) by -1 to 1
						     while (short_long_key (j) ^= key_name);
						end;
						if j = 0
						then if force_no_type_sw
						     then do;
							     call com_err_ (0, me,
								"Invalid switch name: ^a", key_name);
							     goto RETURN;
							end;
						     else j = UNKNOWN_KEY;
						/* MAY BE EXTENDED OBJECT */
					     end;
				     end;
			     end;
			key_index = j;
			got_key = "1"b;
			name_sw = "0"b;
		     end;

		else do;

			got_path = "1"b;

			if name_sw
			then do;
				name_sw = "0"b;
				dn = get_wdir_ ();
				en = arg;
				go to LITERAL_NAME;
			     end;

			call expand_pathname_ (arg, dn, en, code);
			if code ^= 0
			then do;
				call com_err_ (code, me, "^a", arg);
				return;
			     end;

			if dn = ">" & en = ""
			then do;
				call com_err_ (error_table_$root, me, "^a", arg);
				go to NEXT_ARG;
			     end;

			call check_star_name_$entry (en, code);
			if code = 0
			then do;
LITERAL_NAME:
				star_sw = "0"b;

				type = get_type (dn, en);
						/* no stars */

				if type = LINK_TYPE
				then if chase_arg_given_sw & ^chase_sw
				     then call com_err_ (error_table_$not_a_branch, me, "^a", pathname_ (dn, en));

				     else do;	/* default: chase if not stars */

					     call resolve_link (dn, en, target_dn, target_en, type, code);

					     if code = 0
					     then call set_one (target_dn, target_en, type, key_index,
						     switch_value, code);
					     else call com_err_ (code, me, "Chasing link ^a",
						     pathname_ (target_dn, target_en));

					end;

				else call set_one (dn, en, type, key_index, switch_value, code);
			     end;

			else if code > 2
			then do;			/* bad syntax in starname */
				call com_err_ (code, me, "^a", arg);
				return;
			     end;

			else do;
				star_sw = "1"b;
				star_en = en;

				if area_ptr = null
				then area_ptr = get_system_free_area_ ();

				entries_ptr, names_ptr = null;

				if chase_sw
				then star_type = BRANCHES_AND_LINKS;
				else star_type = BRANCHES_ONLY;

				some_sw = "0"b;

				call hcs_$star_ (dn, en, star_type, area_ptr, entries_count, entries_ptr,
				     names_ptr, code);
				if code ^= 0
				then do;
					call com_err_ (code, me, "^a", pathname_ (dn, en));
					go to NEXT_ARG;
				     end;

				else do j = 1 to entries_count;

					type = entries_ptr -> entries (j).type;
					if type = SEG_TYPE | type = DIR_TYPE
					then do;	/* not a link */

						target_dn = dn;
						target_en =
						     names_ptr -> names (entries_ptr -> entries (j).nindex);

BRANCH:
						type = get_type (target_dn, target_en);
						/* MSF?, EXTENDED? */

						if (type ^= EXTENDED_TYPE) & key_index = UNKNOWN_KEY
						then ;
						else do;
							call set_one (target_dn, target_en, type, key_index,
							     switch_value, code);

							if code ^= 0
							then if code = error_table_$no_s_permission
								| code = error_table_$incorrect_access
								| code = error_table_$no_dir
							     then go to NEXT_ARG;
						     end;
					     end;

					else if chase_sw
					then do;	/* link */

						en = names_ptr -> names (entries_ptr -> entries (j).nindex);

						call resolve_link (dn, en, target_dn, target_en, type, code);

						if code = 0
						then go to BRANCH;
						else if key_index = UNKNOWN_KEY
						then ;
						/* Quiet! Wasn't meant for this one anyway */
						else call com_err_ (code, me, "Chasing link ^a",
							pathname_ (dn, en));
					     end;
				     end;

				if star_sw & ^some_sw
				then if key_index = UNKNOWN_KEY
				     then call com_err_ (0, me, "Invalid switch name: ^a", key_name);
				     else call com_err_ (error_table_$nomatch, me, "^a", pathname_ (dn, star_en));

NEXT_ARG:
				call clean_up;
			     end;
		     end;
	end;

	if ^got_path
	then do;
		call com_err_$suppress_name (0, me, "Usage:  ^a keyword paths {-control_args}", me);
		return;
	     end;

RETURN:
	call clean_up;

	return;
%page;
get_type:
     proc (P_dn, P_en) returns (fixed bin);

/* Decides whether an entry is a segment, directory, or MSF */

	dcl     (P_dn, P_en)	        char (*);
	dcl     type		        fixed bin;
	dcl     bit_count		        fixed bin (24);
	dcl     fs_util_type	        char (32);

          code = 0;                                         /* make get_type happy */
	fs_util_type = "";

	if ^force_no_type_sw
	then do;
		call fs_util_$get_type (P_dn, P_en, fs_util_type, code);

		if code = 0 & ((substr (fs_util_type, 1, 1) ^= "-") | (fs_util_type = FS_OBJECT_TYPE_DM_FILE))
		then return (EXTENDED_TYPE);		/* extended object or DM files,i.e., non-hcs */
		else if code ^= 0
		     then do;
			call com_err_ (code, me, "^a", pathname_ (P_dn, P_en));
			goto RETURN;
		     end;
		else;
	     end;

	call hcs_$status_minf (P_dn, P_en, NO_CHASE, type, bit_count, code);
	if code ^= 0 & code ^= error_table_$no_s_permission
	then do;
		if key_index = UNKNOWN_KEY
		then call com_err_ (0, me, "Invalid switch name: ^a.", key_name);
		else call com_err_ (code, me, "^a", pathname_ (P_dn, P_en));
		go to RETURN;
	     end;

	if type = DIR_TYPE & bit_count > 0
	then return (MSF_TYPE);
	else return (type);

%include suffix_info;
%include copy_flags;
     end get_type;
%page;
resolve_link:
     proc (P_dn, P_en, P_target_dn, P_target_en, P_type, P_code);

/* Chases a link and gets the type of the target */

	dcl     (P_dn, P_en, P_target_dn, P_target_en)
				        char (*);
	dcl     P_type		        fixed bin;
	dcl     P_code		        fixed bin (35);

	call hcs_$get_link_target (P_dn, P_en, P_target_dn, P_target_en, P_code);
	if P_code ^= 0
	then return;

	P_type = get_type (P_target_dn, P_target_en);

     end resolve_link;
%page;
set_one:
     proc (P_dn, P_en, P_type, P_key_index, P_switch_value, P_code);

/* Sets the switch of one segment by calling the appropriate routine */

	dcl     (P_dn, P_en)	        char (*);
	dcl     P_switch_value	        bit (1) aligned;
	dcl     (P_key_index, P_type)	        fixed bin;
	dcl     P_code		        fixed bin (35);

	dcl     (entries_ptr, names_ptr)      ptr;
	dcl     entries_count	        fixed bin;
	dcl     code		        fixed bin (35);

	dcl     msf_path		        char (168);
	dcl     component_name	        char (32);
          dcl     msf_component_index           fixed bin;  /* local */
     
          code = 0;                                         /* must initialize to avoid it was previously contained garbage */

	if P_type = MSF_TYPE
	then do;					/* first set the switch on all the components */

		if long_key (P_key_index) = "perprocess_static"
		then do;
			call com_err_ (0, me, "Operation not allowed on MSF's.  ^a", pathname_ (P_dn, P_en));
			return;
		     end;

		msf_path = P_dn;
		if msf_path ^= ">"
		then msf_path = rtrim (msf_path) || ">";
		msf_path = rtrim (msf_path) || P_en;

		if area_ptr = null
		then area_ptr = get_system_free_area_ ();
		entries_ptr, names_ptr = null;

		on cleanup call msf_cleanup;

		call hcs_$star_ (msf_path, "**", BRANCHES_ONLY, area_ptr, entries_count, entries_ptr, names_ptr, code);

		if code = 0 & entries_count > 0
		then do;
			do msf_component_index = 1 to entries_count;
			     component_name = names_ptr -> names (entries_ptr -> entries (msf_component_index).nindex);

			     call set_whichever (msf_path, component_name, (entries_ptr -> entries (msf_component_index).type),
				P_key_index, P_switch_value);
			end;

			call msf_cleanup;
		     end;
	     end;

	if P_type ^= MSF_TYPE | substr (DIR_ALLOWED, P_key_index, 1)
	then call set_whichever (P_dn, P_en, P_type, P_key_index, P_switch_value);

	return;

msf_cleanup:
     proc;

	if entries_ptr ^= null
	then free entries_ptr -> entries in (area);
	if names_ptr ^= null
	then free names_ptr -> names in (area);

     end msf_cleanup;


     end set_one;
%page;
set_whichever:
     proc (P_dn, P_en, P_type, P_key_index, P_switch_value);

/* Calls the appropriate entry point to set a switch */

	dcl     (P_dn, P_en)	        char (*);
	dcl     (P_type, P_key_index)	        fixed bin;
	dcl     P_switch_value	        bit (1) aligned;
	dcl     code		        fixed bin (35);

	dcl     (ncvd_value, nivd_value)      fixed bin;

          code = 0;                                         /* must initialize to avoid it was previously contained an unexpected value */

	if P_type = EXTENDED_TYPE
	then goto SET (GENERAL_SET);

	if P_type = DIR_TYPE & ^substr (DIR_ALLOWED, P_key_index, 1)
	then do;
		if ^star_sw
		then call com_err_ (0, me, "Directories do not support the ^a switch. ^a.", key_name,
			pathname_ (P_dn, P_en));
		return;
	     end;

	go to SET (P_key_index);

SET (1):						/* copy switch */
	some_sw = "1"b;
	call hcs_$set_copysw (P_dn, P_en, fixed (P_switch_value, 1), code);
	if code ^= 0
	then call com_err_ (code, me, "^a", pathname_ (P_dn, P_en));
	return;


SET (2):						/* damaged_switch */
	some_sw = "1"b;
	call hcs_$set_damaged_sw (P_dn, P_en, (P_switch_value), code);
	if code ^= 0
	then call com_err_ (code, me, "^a", pathname_ (P_dn, P_en));
	return;

SET (3):						/* complete_volume_dump switch */
	some_sw = "1"b;				/* use NOT of user's arg "complete_volume_dump_switch" */
	if P_switch_value
	then ncvd_value = -1;
	else ncvd_value = 1;
	call hcs_$set_volume_dump_switches (P_dn, P_en, 0, ncvd_value, code);
	if code ^= 0
	then call com_err_ (code, me, "^a", pathname_ (P_dn, P_en));
	return;

SET (4):						/* incremental_volume_dump switch */
	some_sw = "1"b;				/* use NOT of user's arg "incremental_volume_dump_switch" */
	if P_switch_value
	then nivd_value = -1;
	else nivd_value = 1;
	call hcs_$set_volume_dump_switches (P_dn, P_en, nivd_value, 0, code);
	if code ^= 0
	then call com_err_ (code, me, "^a", pathname_ (P_dn, P_en));

	return;

SET (5):						/* perprocess_static switch */
	some_sw = "1"b;
	call set_perprocess (P_dn, P_en, P_switch_value, code);
	return;

SET (6):						/* safety switch */
	some_sw = "1"b;
	call hcs_$set_safety_sw (P_dn, P_en, (P_switch_value), code);
	if code ^= 0
	then call com_err_ (code, me, "^a", pathname_ (P_dn, P_en));
	return;

SET (7):						/* synchronized switch */
	some_sw = "1"b;
	call hcs_$set_synchronized_sw (P_dn, P_en, (P_switch_value), code);
	if code ^= 0
	then call com_err_ (code, me, "^a", pathname_ (P_dn, P_en));
	return;

SET (8):	                                                  /* entry audit switch */
	some_sw = "1"b;
	on linkage_error begin;
	   call com_err_ (error_table_$moderr, me, "system_privilege_");
	   goto no_sys_priv;
	   end;
	test_linkage_entry = system_privilege_$set_entry_audit_switch;
	call system_privilege_$set_entry_audit_switch (P_dn, P_en, (P_switch_value), code);
	if code ^= 0
	then call com_err_ (code, me, "^a", pathname_ (P_dn, P_en));

no_sys_priv:
	
	return;
SET (9):						/* unknown keyname, only allowed for extended objects */
	if type ^= EXTENDED_TYPE
	then do;
		if ^star_sw
		then call com_err_ (0, me, "Invalid switch name: ^a.", key_name);
		return;
	     end;

	if key_index = UNKNOWN_KEY                        /* users specified a switch name for a specified extended entry */
	then call fs_util_$set_switch (P_dn, P_en, key_name, P_switch_value, code); 
	else call fs_util_$set_switch (P_dn, P_en, long_key (key_index), P_switch_value, code);

	if code ^= 0
	then do;
	     
	     if code = error_table_$argerr

	     then if star_sw & P_key_index = UNKNOWN_KEY
		then return;			/* we don't support this switch; if nobody else does,
						   the Invalid switch error will be printed at the end */
		else call com_err_ (code, me, "^/This object does not support the ^a switch.  ^a", key_name,
			pathname_ (P_dn, P_en));      /* must display error code value to users */

	     else call com_err_ (code, me, "^[Res^;S^]etting ^a switch on ^a.", ^P_switch_value, key_name,
		     pathname_ (P_dn, P_en));
	     end;

	some_sw = "1"b;
	return;

     end set_whichever;
%page;
set_perprocess:
     proc (P_dn, P_en, P_switch_value, P_code);

/* Sets the perprocess_static switch of an object segment, which is in the segment itself */

	dcl     (P_dn, P_en)	        char (*);
	dcl     P_switch_value	        bit (1) aligned;
	dcl     P_code		        fixed bin (35);

%include object_map;

	dcl     1 segment_acl	        (1) aligned,/* to force access to Person.Project.a */
		2 access_name	        char (32),
		2 mode		        bit (36),
		2 pad		        bit (36),
		2 status_code	        fixed bin (35);

	dcl     saved_mode		        bit (36);
	dcl     delete_acl_sw	        bit (1);
	dcl     (last_word_ptr, object_map_ptr, seg_ptr)
				        ptr;
	dcl     object_map_index	        fixed bin;
	dcl     word_count		        fixed bin (18);
	dcl     bit_count		        fixed bin (24);
	dcl     code		        fixed bin (35);

	seg_ptr = null;
	delete_acl_sw = "0"b;

	on cleanup call sp_cleanup;

	call hcs_$initiate_count (P_dn, P_en, "", bit_count, 0, seg_ptr, P_code);
	if seg_ptr = null
	then do;
		call com_err_ (code, me, "^a", pathname_ (P_dn, P_en));
		return;
	     end;

	if bit_count = 0
	then do;
BAD_OBJECT:
		if ^star_sw
		then call com_err_ (0, me, "Obsolete or non-object segment ^a", pathname_ (P_dn, P_en));
		P_code = 0;
		go to SP_RETURN;
	     end;

	word_count = divide (bit_count + 35, 36, 18, 0);
	last_word_ptr = addrel (seg_ptr, word_count - 1);

	object_map_index = fixed (last_word_ptr -> map_ptr, 18);
	if object_map_index <= 0 | object_map_index > word_count
	then go to BAD_OBJECT;

	object_map_ptr = addrel (seg_ptr, last_word_ptr -> map_ptr);
	if object_map_ptr -> object_map.identifier ^= "obj_map "
	then go to BAD_OBJECT;

	if object_map_ptr -> object_map.decl_vers ^= 2
	then go to BAD_OBJECT;			/* obsolete version */

/* Force write access if necessary */

	segment_acl (1).access_name = get_group_id_ ();	/* Person.Project.a */

	call hcs_$list_acl (P_dn, P_en, null, null, addr (segment_acl), 1, P_code);
	if P_code ^= 0
	then do;
		call com_err_ (P_code, me, "^a", pathname_ (P_dn, P_en));
		go to SP_RETURN;
	     end;

	if segment_acl (1).status_code ^= 0
	then delete_acl_sw = "1"b;			/* no such previous ACL term */
	else do;
		delete_acl_sw = "0"b;		/* have to restore previous access */
		saved_mode = segment_acl (1).mode;
	     end;

	segment_acl (1).mode = "101"b;		/* set rw */

	call hcs_$add_acl_entries (P_dn, P_en, addr (segment_acl), 1, P_code);
	if P_code ^= 0
	then do;
		call com_err_ (P_code, me, "^a", pathname_ (P_dn, P_en));
		go to SP_RETURN;
	     end;

	on cleanup
	     begin;
		call restore_acl;
		call sp_cleanup;
	     end;

	object_map_ptr -> object_map.format.perprocess_static = P_switch_value;

	call restore_acl;

SP_RETURN:
	call sp_cleanup;

	return;


restore_acl:
     proc;

	if delete_acl_sw
	then call hcs_$delete_acl_entries (P_dn, P_en, addr (segment_acl), 1, code);
	else do;
		segment_acl (1).mode = saved_mode;	/* restore previous access */
		call hcs_$add_acl_entries (P_dn, P_en, addr (segment_acl), 1, code);
	     end;

     end restore_acl;


sp_cleanup:
     proc;

	if seg_ptr ^= null
	then call hcs_$terminate_noname (seg_ptr, code);

     end sp_cleanup;

     end set_perprocess;
%page;
/* SAVED FOR LATER SHAPING UP
   set_soos: proc (P_dn, P_en, P_switch_value, P_code);

   /* Turns soos on, or tests for consistent AIM attributes and turns soos off

   dcl (P_dn, P_en) char (*);
   dcl P_switch_value bit (1);
   dcl P_code fixed bin (35);

   dcl (code, old_dir_priv, old_soos_priv) fixed bin (35);

   on linkage_error begin;
   call com_err_ (error_table_$moderr, me, "system_privilege_.");
   go to RETURN;
   end;

   if P_switch_value = "1"b then call system_privilege_$soos_on (P_dn, P_en, P_code);

   else do;

   old_dir_priv, old_soos_priv = 1;               /* don't restore privileges unless set

   on cleanup call clean_up_privs;

   call system_privilege_$dir_priv_on (old_dir_priv);       /* ensure necessary privileges
   call system_privilege_$soos_priv_on (old_soos_priv);

   call system_privilege_$check_mode_reset (P_dn, P_en, P_code);
   /* this entry point only succeeds if the branch's
   AIM attributes are consistent
   if P_code ^= 0 then call com_err_ (P_code, me, "^a", pathname_ (P_dn, P_en));
   end;


   clean_up_privs: proc;

   if old_dir_priv = 0 then call system_privilege_$dir_priv_off (code);
   if old_soos_priv = 0 then call system_privilege_$soos_priv_off (code);

   end clean_up_privs;


   end set_soos;
*/
%page;
clean_up:
     proc;

	if area_ptr = null
	then return;
	if entries_ptr ^= null
	then free entries in (area);
	if names_ptr ^= null
	then free names in (area);
	return;

     end clean_up;


     end switch_on;
