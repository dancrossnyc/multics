/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-17,Houck), approve(86-07-17,MCR7487), audit(86-08-14,Wong),
     install(86-09-04,MR12.0-1148):
     Changed the query_each_sw and -query_all_sw switches so that the
     -query_each and -query_all arguments would be processed as per Multics
     argument processing conventions.
  2) change(88-07-06,TLNguyen), approve(88-07-06,MCR7922),
     audit(88-07-08,Parisek), install(88-07-12,MR12.2-1055):
     Change the delete command to use error_table_$bad_file_name to report an
     error when a null characters string is specified in place of path
     argument.
  3) change(89-01-16,TLNguyen), approve(89-01-27,MCR8047),
     audit(89-02-06,Parisek), install(89-02-27,MR12.3-1015):
     Issue an extra query to protect directories whose safety switches are
     set and a starname is specified in place of a directory path.
                                                   END HISTORY COMMENTS */


/* format: style2,idind30,indcomtxt */

delete:
dl:
     procedure options (variable);

/**** Implements these commands:

      delete file_paths {-control_args}

      l_delete file_paths {-control_args}

      delete_dir directory_paths {-control_args}

      unlink link_paths {-control_args}

      and the obsolete delete_force command equivalent to "delete -force".
      Rewritten 01/11/80 by S. Herbst */
/* Modified: 30 June 1980 by G. Palter to fix bug where error messages are meaningless */
/* Fixed bugs and added -absolute_pathname and -entryname 07/19/82 S. Herbst */
/* Fixed nomatch error message 11/08/82 S. Herbst */
/* Fixed "dl ** -qye -long" to print individual queries 12/13/82 S. Herbst */
/* Modified 2/20/83 Jay Pattin for object_type_ */
/* Modified 6/9/83 Jay Pattin. Added l_delete, Changed to use delete_options, added -no_force */
/* 830927 BIM for object_type_ --> fs_util_ */
/* Fixed dl -chase to delete segments 06/25/84 S. Herbst */
/* Modified 12/03/84 by Matthew Pierret: to print helpful message if the
   directory could not be deleted because it contained a protected
   data management file and a transaction is in progress (code
   returned from delete_ is error_table_$no_delete_dir_transaction).
   This means that the actual file deletion will be done when the
   transaction completes. */
/* Modified 850206 MSharpe to replace -fcnt with -inase/inaee */

/* format: off */
%page; %include delete_options;
%page; %include branch_status;
%page; %include star_structures;
%page; %include suffix_info;
%page; %include copy_flags;
%page;

/* format: on */
	dcl     1 si		        aligned like suffix_info;

	dcl     1 query_array	        (query_bound) based (query_ptr),
		2 query_dn	        char (168),
		2 query_en	        char (32);

	dcl     (old_query_ptr, query_ptr)    ptr;
	dcl     (new_query_bound, old_query_bound, query_bound, query_count)
				        fixed bin;


	dcl     1 entries		        (ecount) based (entries_ptr),
		2 type		        bit (2) unaligned,
		2 nnames		        bit (16) unaligned,
		2 nindex		        bit (18) unaligned;

	dcl     names		        (99 /* arbitrary */) char (32) aligned based (names_ptr);

	dcl     arg		        char (arg_len) based (arg_ptr);
	dcl     fs_util_type	        char (32);
	dcl     (dn, print_path, target_dn)   char (168);
	dcl     (en, myname, starname, target_en, thing, things, what)
				        char (32);

	dcl     area		        area based (area_ptr);

	dcl     (absp_sw, brief_sw, chase_sw, chased, force_sw, force_no_type_sw, long_sw, query_sw, query_all_sw,
	        query_each_sw, safety_sw, same_dir_sw, saved_force_sw, some_args, some_matches, yes_sw)
				        bit (1);

	dcl     (area_ptr, arg_ptr, entries_ptr, names_ptr)
				        ptr;
          dcl     QUERY_LIMIT fixed bin int static options (constant) init (20);

	dcl     (
	        NO_CHASE		        init (0),
	        CHASE		        init (1)
	        )			        fixed bin (1) int static options (constant);
	dcl     (
                  NO_STAR_NAME                  init (0),
	        STAR_NAME		        init (1),
	        STAR_STAR_NAME	        init (2)
	        )			        fixed bin (35) int static options (constant);

	dcl     entry_type		        fixed bin (2);
	dcl     (arg_count, arg_len, ecount, i, j)
				        fixed bin;
	dcl     bit_count		        fixed bin (24);
	dcl     (code, star_code)	        fixed bin (35);

	dcl     error_table_$action_not_performed
				        fixed bin (35) ext;
          dcl     error_table_$bad_file_name    fixed bin (35) ext;
	dcl     error_table_$badopt	        fixed bin (35) ext;
	dcl     error_table_$incorrect_access fixed bin (35) ext;
	dcl     dm_error_$no_delete_dir_transaction
				        fixed bin (35) ext;
	dcl     error_table_$no_info	        fixed bin (35) ext;
	dcl     error_table_$no_s_permission  fixed bin (35) ext;
	dcl     error_table_$noentry	        fixed bin (35) ext;
	dcl     error_table_$nomatch	        fixed bin (35) ext;
	dcl     error_table_$root	        fixed bin (35) ext;

	dcl     (
	        com_err_,
	        com_err_$suppress_name
	        )			        entry options (variable);
	dcl     check_star_name_$entry        entry (char (*), fixed bin (35));
	dcl     command_query_$yes_no	        entry options (variable);
	dcl     cu_$arg_count	        entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     delete_$path	        entry (char (*), char (*), bit (36) aligned, char (*), fixed bin (35));
	dcl     dl_handler_$dblstar	        entry (char (*), char (*), char (*), fixed bin (35));
	dcl     dl_handler_$dirdelete	        entry (char (*), char (*), char (*), fixed bin (35));
	dcl     expand_pathname_	        entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_system_free_area_	        entry returns (ptr);
	dcl     get_wdir_		        entry returns (char (168));
	dcl     hcs_$get_link_target	        entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$get_safety_sw	        entry (char (*), char (*), bit (1), fixed bin (35));
	dcl     hcs_$star_		        entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				        fixed bin (35));
	dcl     hcs_$status_long	        entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     hcs_$status_minf	        entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				        fixed bin (35));
	dcl     ioa_		        entry options (variable);
	dcl     installation_tools_$delentry_file
				        entry (char (*), char (*), fixed bin (35));
	dcl     fs_util_$get_type	        entry (character (*), character (*), character (*), fixed binary (35));
	dcl     fs_util_$suffix_info_for_type entry (character (*), pointer, fixed binary (35));
	dcl     pathname_		        entry (char (*), char (*)) returns (char (168));

	dcl     (addr, codeptr, fixed, index, null, string, substr, unspec)
				        builtin;

	dcl     (cleanup, linkage_error)      condition;	/*						*/
	myname = "delete";
	thing = "file";
	things = "files";
	string (delete_options) = ""b;
	delete_options.question, delete_options.segment = "1"b;
	force_sw = "0"b;
	go to COMMON;

l_delete:
ldl:
     entry;

	myname = "l_delete";
	thing = "file";
	things = "files";
	string (delete_options) = ""b;
	force_sw = "1"b;
	delete_options.question, delete_options.force, delete_options.segment, delete_options.library,
	     delete_options.raw = "1"b;
	go to COMMON;

delete_force:
deleteforce:
df:
     entry;					/* OBSOLETE */

	myname = "delete_force";
	thing = "file";
	things = "files";
	string (delete_options) = ""b;
	force_sw = "1"b;
	delete_options.force, delete_options.segment = "1"b;
	go to COMMON;

delete_dir:
dd:
     entry options (variable);

	myname = "delete_dir";
	thing = "directory";
	things = "directories";
	string (delete_options) = ""b;
	delete_options.force, delete_options.question, delete_options.directory = "1"b;
	force_sw = "0"b;
	go to COMMON;

unlink:
ul:
     entry options (variable);

	myname = "unlink";
	thing = "link";
	things = "links";
	string (delete_options) = ""b;
	delete_options.link = "1"b;
	force_sw = "0"b;


COMMON:
	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, myname);
		return;
	     end;

	si.version = SUFFIX_INFO_VERSION_1;
	entries_ptr, names_ptr, query_ptr = null;

	absp_sw, brief_sw, chase_sw, force_no_type_sw, long_sw, query_sw, query_all_sw, query_each_sw, some_args = "0"b;
	if delete_options.library
	then force_no_type_sw = "1"b;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname);
		return;
	     end;

	     if index (arg, "-") ^= 1
	     then some_args = "1"b;

	     else if arg = "-absolute_pathname" | arg = "-absp"
	     then absp_sw = "1"b;
	     else if arg = "-brief" | arg = "-bf"
	     then brief_sw = "1"b;
	     else if arg = "-chase" & myname = "delete"
	     then chase_sw = "1"b;
	     else if arg = "-no_chase" & myname = "delete"
	     then chase_sw = "0"b;
	     else if arg = "-entryname" | arg = "-etnm"
	     then absp_sw = "0"b;
	     else if arg = "-force" | arg = "-fc"
	     then delete_options.force, force_sw = "1"b;
	     else if arg = "-no_force" | arg = "-nfc"
	     then delete_options.force, force_sw = "0"b;
	     else if arg = "-interpret_as_standard_entry" | arg = "-inase"
	     then force_no_type_sw, delete_options.raw = "1"b;
	     else if arg = "-interpret_as_extended_entry" | arg = "-inaee"
	     then force_no_type_sw, delete_options.raw = "0"b;
	     else if arg = "-long" | arg = "-lg"
	     then long_sw = "1"b;
	     else if arg = "-name" | arg = "-nm"
	     then do;
		     i = i + 1;
		     if i > arg_count
		     then do;
			     call com_err_ (0, myname, "No value specified for -name");
			     return;
			end;
		     some_args = "1"b;
		end;
	     else if arg = "-query_each" | arg = "-qye"
	     then do;

		     query_each_sw, query_sw = "1"b;
		     query_all_sw = "0"b;
		end;
	     else if arg = "-query_all" | arg = "-qya"
	     then do;

		     query_all_sw, query_sw = "1"b;
		     query_each_sw = "0"b;
		end;


	     else do;
		     call com_err_ (error_table_$badopt, myname, "^a", arg);
		     return;
		end;
	end;

	if ^some_args
	then do;
		call com_err_$suppress_name (0, myname, "Usage:  ^a ^a_paths {-control_args}", myname, thing);
		return;
	     end;

	if delete_options.library
	then do;
		on linkage_error
		     begin;			/* check for installation_tools_ access */
			call com_err_ (0, myname, "This command requires access to the installation_tools_ gate.");
			goto MAIN_RETURN;
		     end;

		arg_ptr = codeptr (installation_tools_$delentry_file);
						/* provoke linkage error */
		revert linkage_error;
	     end;

	on cleanup
	     begin;
		call star_cleanup;
		if query_ptr ^= null
		then free query_array in (area);
	     end;

	if query_all_sw
	then do;
		query_bound = QUERY_LIMIT;
		area_ptr = get_system_free_area_ ();

		allocate query_array in (area) set (query_ptr);
		query_count = 0;
	     end;
	else area_ptr = null;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if index (arg, "-") = 1
	     then if arg = "-name" | arg = "-nm"
		then do;
			i = i + 1;
			call cu_$arg_ptr (i, arg_ptr, arg_len, code);

			dn = get_wdir_ ();
			en, starname = arg;
			go to NO_STARS;
		     end;
		else go to NEXT_ARG;

	     if arg = ""                         /* a null string such as "", " ", "    "  is specified
		                                  in place of path argument */
	     then do;
		     call com_err_ (error_table_$bad_file_name, myname, """""");
		     go to NEXT_ARG;
		end;

	     call expand_pathname_ (arg, dn, starname, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, myname, "^a", arg);
		     go to NEXT_ARG;
		end;

	     call check_star_name_$entry (starname, star_code);
	     if star_code = NO_STAR_NAME
	     then do;

		     en = starname;

NO_STARS:
		     chased = "0"b;

STATUS:
		     call hcs_$status_minf (dn, en, NO_CHASE, entry_type, bit_count, code);
		     if code ^= 0
		     then do;
PATH_ERROR:
			     if ^brief_sw | (code ^= error_table_$noentry & code ^= error_table_$nomatch)
			     then call com_err_ (code, myname, "^a", pathname_ (dn, en));
			     go to NEXT_ARG;
			end;

		     if ^force_no_type_sw & entry_type ^= star_LINK
		     then do;
			     call fs_util_$get_type (dn, en, fs_util_type, code);
			     if code = 0 & fs_util_type ^= FS_OBJECT_TYPE_DIRECTORY
			     then do;
				     entry_type = star_SEGMENT;
				     if ^delete_options.segment
				     then do;
					     call fs_util_$suffix_info_for_type (fs_util_type, addr (si), (0));
					     call com_err_ (code, myname, "^a is a ^a. Use delete.",
						pathname_ (dn, en), si.type_name);
					     goto NEXT_ARG;
					end;
				end;
			end;

		     if entry_type = star_LINK
		     then do;
			     if ^delete_options.link
			     then do;
				     if chase_sw & ^chased
				     then do;
					     call hcs_$get_link_target (dn, en, target_dn, target_en, code);
					     if code ^= 0
					     then do;
						     call com_err_ (code, myname, "Unable to chase link ^a",
							pathname_ (dn, en));
						     go to NEXT_ARG;
						end;
					     dn = target_dn;
					     en = target_en;
					     chased = "1"b;
					     go to STATUS;
					end;
				     call com_err_ (0, myname, "^a is a link. Use unlink.", pathname_ (dn, en));
				     go to NEXT_ARG;
				end;
			end;

		     else if entry_type = star_DIRECTORY & bit_count = 0
		     then do;
			     if ^delete_options.directory
			     then do;
				     call com_err_ (0, myname, "^a is a directory. Use delete_dir.",
					pathname_ (dn, en));
				     go to NEXT_ARG;
				end;
			     if ^force_sw
			     then do;
				     if ^modify (dn, en)
				     then go to NEXT_ARG;
						/* ^modify prints err msg */
				     if ^query_sw
				     then do;
					     call dl_handler_$dirdelete (myname, dn, en, code);
						/* Do you want to delete the directory dn>en? */
					     if code ^= 0
					     then go to NEXT_ARG;
					end;
				end;
			end;

		     else do;			/* segment or MSF */
			     if ^delete_options.segment
			     then do;
				     call com_err_ (0, myname,
					"^a is a ^[multisegment file^;segment^]. Use delete.",
					pathname_ (dn, en), entry_type = star_DIRECTORY);
				     go to NEXT_ARG;
				end;
			end;

		     if absp_sw
		     then print_path = pathname_ (dn, en);
		     else print_path = en;

		     call delete_one;

		end;

	     else if star_code = STAR_NAME | star_code = STAR_STAR_NAME
	     then do;				/* star convention */

		     if area_ptr = null
		     then area_ptr = get_system_free_area_ ();
		     entries_ptr, names_ptr = null;

		     if delete_options.link | chase_sw
		     then entry_type = star_ALL_ENTRIES;
		     else entry_type = star_BRANCHES_ONLY;

		     call hcs_$star_ (dn, starname, entry_type, area_ptr, ecount, entries_ptr, names_ptr, code);
		     if code ^= 0
		     then do;
			     if ^brief_sw | code ^= error_table_$nomatch
			     then call com_err_ (code, myname, "^a", pathname_ (dn, starname));
			     go to NEXT_ARG;
			end;

		     if (delete_options.directory | star_code = STAR_STAR_NAME) & ^force_sw
		     then do;			/* dd, dl **, or ul **  */
			     if ^modify (dn, starname)
			     then go to NEXT_ARG;
			     if long_sw & ^query_each_sw
			     then do;		/* combine the ** or dd query with -long query */
				     long_sw = "0"b;
				     query_all_sw, query_sw = "1"b;
				     if query_ptr = null
				     then do;
					     query_bound = QUERY_LIMIT;
					     area_ptr = get_system_free_area_ ();

					     allocate query_array in (area) set (query_ptr);
					     query_count = 0;
					end;
				end;
			     if ^query_sw
			     then do;
				     call dl_handler_$dblstar (myname, dn, starname, code);
						/* Do you want to delete/unlink 'starname' in dn? */
				     if code ^= 0
				     then go to NEXT_ARG;
				end;

						/* query again for protected dirs because a starname is specified. */
			     if delete_options.directory & (star_code = STAR_NAME | star_code = STAR_STAR_NAME)
			     then delete_options.force = "0"b;

			end;

		     some_matches = "0"b;

		     do j = 1 to ecount;

			en = names (fixed (entries.nindex (j), 17));

			if ^force_no_type_sw & entries.type (j) ^= link_type
			then do;
				call fs_util_$get_type (dn, en, fs_util_type, code);
				if code = 0 & fs_util_type ^= FS_OBJECT_TYPE_DIRECTORY
				then entries.type (j) = segment_type;
			     end;

			if entries.type (j) = link_type
			then do;
				if chase_sw
				then do;
					some_matches = "1"b;
					call hcs_$get_link_target (dn, en, target_dn, target_en, code);
					if code ^= 0
					then do;
						call com_err_ (code, myname, "Unable to chase link ^a",
						     pathname_ (dn, en));
						go to NEXT_MATCH;
					     end;
					dn = target_dn;
					en = target_en;
					call hcs_$status_minf (dn, en, NO_CHASE, entry_type, bit_count, code);
					if entry_type = star_LINK
					     | (entry_type = star_DIRECTORY & bit_count = 0)
					then go to NEXT_MATCH;
				     end;
				else if ^delete_options.link
				then go to NEXT_MATCH;
			     end;
			else if entries.type (j) = segment_type
			then do;
FILE:
				if ^delete_options.segment
				then go to NEXT_MATCH;
			     end;
			else do;			/* directory or MSF */
				call hcs_$status_minf (dn, en, NO_CHASE, entry_type, bit_count, code);
				if bit_count ^= 0
				then go to FILE;
				if ^delete_options.directory
				then go to NEXT_MATCH;
			     end;

			some_matches = "1"b;

			if absp_sw
			then print_path = pathname_ (dn, en);
			else print_path = en;

			call delete_one;

			if code = error_table_$incorrect_access | code = error_table_$no_info
			then do;
				call star_cleanup;
				go to NEXT_ARG;
			     end;
NEXT_MATCH:
		     end;

		     call star_cleanup;

		     if ^some_matches
		     then do;
			     if ^brief_sw
			     then call com_err_ (0, myname, "No ^a selected by starname.  ^a", things,
				     pathname_ (dn, starname));
			     go to NEXT_ARG;
			end;
		end;
	     else call com_err_ (star_code, myname, "^a", pathname_ (dn, starname));

NEXT_ARG:
	end;

	if query_all_sw & query_count > 0
	then do;

		if myname = "delete" | myname = "delete_force"
		then what = "Files";
		else if myname = "delete_dir"
		then what = "Directories";
		else what = "Links";

		same_dir_sw = "1"b;
		do i = 2 to query_count;
		     if query_dn (i) ^= query_dn (1)
		     then same_dir_sw = "0"b;
		end;

		call ioa_ ("^a to be deleted^[ in ^a^]:", what, same_dir_sw, query_dn (1));

		do i = 1 to query_count;
		     if same_dir_sw
		     then call ioa_ ("^3x^a", query_en (i));
		     else call ioa_ ("^3x^a", pathname_ (query_dn (i), query_en (i)));
		end;

		call command_query_$yes_no (yes_sw, 0, myname, "", "Delete?");

		if yes_sw
		then do i = 1 to query_count;
			call delete_$path (query_dn (i), query_en (i), string (delete_options), myname, code);
			if code = 0 | code = error_table_$action_not_performed
			then do;
				if long_sw
				then if absp_sw
				     then call ioa_ ("Deleted ^a", pathname_ (query_dn (i), query_en (i)));
				     else call ioa_ ("Deleted ^a", query_en (i));
			     end;
			else if code = dm_error_$no_delete_dir_transaction
			then call com_err_ (code, myname, "^/The contents of ^a ^a^/^a^/^a",
				pathname_ (query_dn (i), query_en (i)), "which do not need to wait until the",
				"transaction commits have been deleted.  The directory itself can be",
				"deleted after the transaction ends.");

			else call com_err_ (code, myname, "^a", pathname_ (query_dn (i), query_en (i)));

		     end;
	     end;

	if query_all_sw
	then do;
		free query_array in (area);
		query_ptr = null;
	     end;

MAIN_RETURN:
	return;					/*						*/
delete_one:
     proc;

/* This internal procedure remembers the pathname dn>en if -query_all,
   else implements -query_each and -long and deletes the single entry dn>en. */

	code = 0;

	if query_all_sw
	then do;
		query_count = query_count + 1;
		if query_count > query_bound
		then call grow_query_array;
		query_dn (query_count) = dn;
		query_en (query_count) = en;
		return;
	     end;

	saved_force_sw = delete_options.force;

	if query_each_sw
	then do;
		safety_sw = "0"b;
		if ^delete_options.link
		then do;
			call hcs_$get_safety_sw (dn, en, safety_sw, 0);
			call hcs_$status_long (dn, en, NO_CHASE, addr (branch_status), null, 0);
		     end;

		call command_query_$yes_no (yes_sw, 0, myname, "",
		     "^[Unlink^;Delete^] ^a ?^[^[ (safety switch is on)^]^[ (copy switch is on)^]^]",
		     delete_options.link, print_path, ^delete_options.link, safety_sw, branch_status.copy_switch);

		if ^yes_sw
		then return;

		if safety_sw | branch_status.copy_switch
		then delete_options.force = "1"b;
	     end;

	call delete_$path (dn, en, string (delete_options), myname, code);
	if code ^= 0
	then do;
		if code = dm_error_$no_delete_dir_transaction
		then call com_err_ (code, myname, "^/The contents of ^a ^a^/^a^/^a", pathname_ (dn, en),
			"which do not need to wait until the",
			"transaction commits have been deleted.  The directory itself can be",
			"deleted after the transaction ends.");
		else if code ^= error_table_$action_not_performed
		then call com_err_ (code, myname, "^a", pathname_ (dn, en));
	     end;

	else if long_sw & ^query_each_sw
	then call ioa_ ("Deleted ^a ^a", thing, print_path);

	delete_options.force = saved_force_sw;

     end delete_one;				/*						*/
modify:
     proc (a_dn, a_en) returns (bit (1));

/* This internal procedure returns "1"b if the user has modify on the directory a_dn */

	dcl     (a_dn, a_en)	        char (*);

	call hcs_$status_long (a_dn, "", CHASE, addr (branch_status), null, code);
	if code = error_table_$root
	then return ("1"b);				/* ignore and let hardcore catch moderr */
	if code ^= 0 & code ^= error_table_$no_s_permission
	then do;
		call com_err_ (code, myname, "Unable to check access to ^a", a_dn);
		return ("0"b);
	     end;
	if substr (branch_status.mode, 4, 1)
	then return ("1"b);
	call com_err_ (error_table_$incorrect_access, myname, "^a", pathname_ (a_dn, a_en));
	return ("0"b);

     end modify;



grow_query_array:
     proc;

/* This internal procedure doubles the size of query_array */

	old_query_ptr = query_ptr;
	old_query_bound = query_bound;
	query_bound, new_query_bound = query_bound * 2;
	allocate query_array in (area) set (query_ptr);
	query_bound = old_query_bound;
	unspec (query_ptr -> query_array) = unspec (old_query_ptr -> query_array);
	free old_query_ptr -> query_array in (area);
	query_bound = new_query_bound;

     end grow_query_array;



star_cleanup:
     proc;

	if entries_ptr ^= null
	then free entries in (area);
	if names_ptr ^= null
	then free names in (area);
	entries_ptr, names_ptr = null;

     end star_cleanup;


     end delete;
