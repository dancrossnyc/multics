/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


safety_sw_on: ssn: proc;

dcl (dirname, new_path) char (168);
dcl (entname, ename) char (32);

dcl  arg char (alng) based (aptr) unaligned;
dcl  b_name char (32) based;

dcl (aptr, eptr, nptr, bentp, npp, dirp, entp) ptr init (null);

dcl (i, j, argcnt, alng, ecount, retc) fixed bin (17);
dcl  code fixed bin (35);

dcl  whoami char (16);

dcl  new_value bit (1);
dcl safety_sw bit (1);

dcl (error_table_$badopt,
     error_table_$incorrect_access,
     error_table_$no_info,
     error_table_$noarg) ext fixed bin (35);

dcl  check_path_name_ ext entry (ptr, fixed bin (17), bit (1), char (16), ptr, ptr, ptr,
     fixed bin (17), ptr, ptr, fixed bin (17));
dcl  check_path_name_$indiv ext entry (ptr, ptr, bit (1));
dcl  cu_$arg_ptr ext entry (fixed bin (17), ptr, fixed bin (17), fixed bin (35));
dcl  freen_ ext entry (ptr);
dcl  com_err_ ext entry options (variable);

dcl  hcs_$set_safety_sw ext entry (char (*), char (*), bit (1), fixed bin (35));
dcl  hcs_$set_damaged_sw ext entry (char (*), char (*), bit (1), fixed bin (35));

dcl (null, substr, addr) builtin;
dcl  cleanup condition;

	new_value = "1"b;
	whoami = "safety_sw_on";
	safety_sw = "1"b;
	goto start;

safety_sw_off: ssf: entry;
	new_value = "0"b;
	whoami = "safety_sw_off";
	safety_sw = "1"b;
	goto start;

damaged_sw_on: dsn: entry;

	new_value = "1"b;
	whoami = "damaged_sw_on";
	safety_sw = "0"b;
	goto start;

damaged_sw_off: dsf: entry;

	new_value = "0"b;
	whoami = "damaged_sw_off";
	safety_sw = "0"b;

start:

	npp = addr (new_path);
	dirp = addr (dirname);
	entp = addr (entname);

	on cleanup call ss_cleanup;

	do i = 1 by 1;				/* loop through all arguments */

	     call cu_$arg_ptr (i, aptr, alng, code);
	     if code ^= 0 then do;
		if i = 1 then go to no_pathname;	/* no argument means safety switch of working directory */
		return;				/* otherwise we are done */
	     end;

	     if (arg = "-wd")| (arg = "-working_directory") then do;
no_pathname:	aptr = dirp;
		alng = 3;
		dirname = "-wd";
		goto check_name;
	     end;

	     if substr (arg, 1, 1) = "-" then do;
		call com_err_ (error_table_$badopt, whoami, "^a", arg);
		return;
	     end;

check_name:
	     call check_path_name_ (aptr, alng, "0"b, whoami, dirp, entp, npp, ecount, eptr, nptr, retc);
	     if retc = 2 then go to free_up;		/* error message was already printed */
	     ename = entname;

	     do j = 1 to ecount;			/* loop through all enames */

		if retc = 1 then do;		/* a star name */
		     call check_path_name_$indiv (dirp, bentp, "0"b);
		     ename = bentp -> b_name;
		end;

		if safety_sw			/* See if to set safety sw or damaged sw */
		then call hcs_$set_safety_sw (dirname, ename, new_value, code);
		else call hcs_$set_damaged_sw (dirname, ename, new_value, code);
		if code ^= 0 then do;
		     call com_err_ (code, whoami, new_path);
						/* if user lacks modify permission on parent */
		     if (code = error_table_$incorrect_access) | (code = error_table_$no_info) then
			go to free_up;		/* skip processing segments in this directory */
		end;
	     end;
free_up:
	     call ss_cleanup;

	end;					/* loop through pathnames */

ss_cleanup: proc;

	     if eptr ^= null then call freen_ (eptr);
	     if nptr ^= null then call freen_ (nptr);

	end ss_cleanup;

     end safety_sw_on;
