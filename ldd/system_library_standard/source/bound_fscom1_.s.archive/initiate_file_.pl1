/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Initiate a segment or an archive component.

   Written 8 April 1981 by M. N. Davidoff.
   Modified: 19 February by G. Palter to not return error_table_$zero_length_seg
   Modified 3/82 BIM for creation.
*/

/* format: style2 */

initiate_file_:
     procedure (P_dirname, P_entryname, P_mode, P_seg_ptr, P_bit_count, P_code);

	create_requested = "0"b;
	component_name = "";
	go to join;


create:
     entry (P_dirname, P_entryname, P_mode, P_seg_ptr, P_created, P_bit_count, P_code);

	P_created = "0"b;
	create_requested = "1"b;
	component_name = "";
	go to join;


component:
     entry (P_dirname, P_entryname, P_component_name, P_mode, P_seg_ptr, P_bit_count, P_code);

	component_name = P_component_name;
	create_requested = "0"b;
	go to join;
%page;
/* parameters */

	declare P_bit_count		 fixed binary (24);
	declare P_code		 fixed binary (35);
	declare P_component_name	 char (*);
	declare P_created		 bit (1) aligned;
	declare P_dirname		 char (*);
	declare P_entryname		 char (*);
	declare P_mode		 bit (*);
	declare P_seg_ptr		 pointer;

/* automatic */

	declare bit_count		 fixed binary (24);
	declare create_code		 fixed binary (35);
	declare code		 fixed binary (35);
	declare component_name	 char (32);
	declare create_requested	 bit (1);
	declare created		 bit (1);
	declare 1 effective_mode,
		2 pad1		 bit (1),
		2 read		 bit (1),
		2 execute		 bit (1),
		2 write		 bit (1),
		2 pad2		 bit (1);
	declare effective_mode_bin	 fixed binary (5);
	declare 1 required_mode,
		2 read		 bit (1),
		2 execute		 bit (1),
		2 write		 bit (1);
	declare seg_ptr		 pointer;

/* builtin */

	declare (bit, index, null, reverse, rtrim, string)
				 builtin;

/* condition */

	declare cleanup		 condition;

/* external static */

	declare error_table_$archive_component_modification
				 fixed binary (35) external static;
	declare error_table_$namedup	 fixed binary (35) external static;
	declare error_table_$no_e_permission
				 fixed binary (35) external static;
	declare error_table_$no_m_permission
				 fixed binary (35) external static;
	declare error_table_$no_r_permission
				 fixed binary (35) external static;
	declare error_table_$no_w_permission
				 fixed binary (35) external static;
	declare error_table_$not_archive
				 fixed binary (35) external static;

/* entry */

	declare archive_$get_component entry (pointer, fixed binary (24), char (*), pointer, fixed binary (24),
				 fixed binary (35));
	declare hcs_$delentry_file	 entry (char (*), char (*), fixed bin (35));
	declare hcs_$append_branch	 entry (character (*), character (*), fixed binary (5), fixed binary (35));
	declare hcs_$fs_get_mode	 entry (pointer, fixed binary (5), fixed binary (35));
	declare hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35));
	declare hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed binary (24), fixed binary (2),
				 pointer, fixed binary (35));
	declare terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));

%include terminate_file;

join:
	string (required_mode) = P_mode;
	P_seg_ptr = null;
	P_bit_count = 0;
	P_code = 0;

	seg_ptr = null;
	created = "0"b;

	if component_name ^= "" & before (reverse (rtrim (P_entryname)), ".") ^= "evihcra"
	then call finish_error (error_table_$not_archive);

	on cleanup call finish_error (0);

	call hcs_$initiate_count (P_dirname, P_entryname, "", bit_count, 0, seg_ptr, code);
	if seg_ptr = null
	then do;
		if ^create_requested
		then call finish_error (code);

		string (effective_mode) = ""b;
		effective_mode = required_mode, by name;

		call hcs_$append_branch (P_dirname, P_entryname, bin (string (effective_mode), 5), create_code);
		string (effective_mode) = ""b;	/* leave for next use */
		if create_code ^= error_table_$namedup
		then code = create_code;		/* report original error if it was a lack of status access */
		else if create_code = 0
		then code = 0;

		if code ^= 0
		then call finish_error (code);

		call hcs_$initiate (P_dirname, P_entryname, "", 0, 0, seg_ptr, code);
		if seg_ptr = null
		then do;
			call hcs_$delentry_file (P_dirname, P_entryname, (0));
			call finish_error (code);
		     end;
		created = "1"b;
	     end;

	call hcs_$fs_get_mode (seg_ptr, effective_mode_bin, code);
	if code ^= 0
	then call finish_error (code);

	string (effective_mode) = bit (effective_mode_bin);

	if component_name = ""
	then if required_mode.read & ^effective_mode.read
	     then call finish_error (error_table_$no_r_permission);

	     else if required_mode.write & ^effective_mode.write
	     then call finish_error (error_table_$no_w_permission);

	     else if required_mode.execute & ^effective_mode.execute
	     then call finish_error (error_table_$no_e_permission);

	     else ;

	else begin;
		declare component_bit_count	 fixed binary (24);
		declare component_ptr	 pointer;

		if ^effective_mode.read
		then call finish_error (error_table_$no_r_permission);

		call archive_$get_component (seg_ptr, bit_count, component_name, component_ptr, component_bit_count,
		     code);
		if code ^= 0
		then call finish_error (code);

		if required_mode.write
		then call finish_error (error_table_$archive_component_modification);

		else if required_mode.execute
		then call finish_error (error_table_$no_e_permission);

		seg_ptr = component_ptr;
		bit_count = component_bit_count;
	     end;

	P_seg_ptr = seg_ptr;
	P_bit_count = bit_count;

	if created
	then P_created = "1"b;			/* only set for created entrypoint */

return:
	return;

finish_error:
     procedure (final_code);

	declare final_code		 fixed binary (35); /* (Input) */

	if ((final_code = error_table_$no_r_permission) | (final_code = error_table_$no_w_permission)
	     | (final_code = error_table_$no_e_permission)) & created
	then final_code = error_table_$no_m_permission;	/* not enough access to create it with proper access */

	P_seg_ptr = null;
	P_bit_count = 0;
	P_code = final_code;

	if seg_ptr ^= null
	then if created
	     then call terminate_file_ (seg_ptr, 0, TERM_FILE_DELETE, 0);
	     else call terminate_file_ (seg_ptr, 0, TERM_FILE_TERM, 0);
	else if created
	then call hcs_$delentry_file (P_dirname, P_entryname, 0);

	if final_code ^= 0				/* Zero ONLY in cleanup case */
	then goto return;
     end finish_error;

     end initiate_file_;
