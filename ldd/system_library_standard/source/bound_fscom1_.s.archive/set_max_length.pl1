/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */



/* format: style2,idind30,indcomtxt */

set_max_length:
sml:
     procedure options (variable);

/* Changed to round up mod 1024 instead of mod 16 by Steve Herbst 11/20/75 */
/* MCR 4271, 4272 Add -record and make args nonpositional 01/08/80 S. Herbst */
/* Made to work on mailboxes and queues 03/28/80 S. Herbst */
/* Add -maximum 05/12/80 S. Herbst */
/* Modified 2/20/83 Jay Pattin for object_type_ */
/* 256K max length check, 3/1 E. N. Kittlitz */
/* 830927 BIM object_type_ -> fs_util_ */
/* 850206 MSharpe to replace -fcnt with -inase/inaee */

          dcl     (dirname, new_path)           char (168);
          dcl     (entname, ename)              char (32);
          dcl     (length_string, seg_type)     char (32);
          dcl     answer                        char (3) var;

          dcl     arg                           char (alng) based (aptr) unaligned;
          dcl     b_name                        char (32) based;

          dcl     (aptr, bentp)                 ptr;
          dcl     (eptr, nptr)                  ptr init (null);

          dcl     (arg_count, ecount, entry_len, j, retc)
                                                fixed bin;
          dcl     alng                          fixed bin (21);
          dcl     base                          fixed bin;
          dcl     code                          fixed bin (35);
          dcl     (max_length, fixed_max_length)
                                                fixed bin (19);

          dcl     (brf_sw, len_sw, mbx_sw, max_sw, pth_sw, record_sw)
                                                bit (1);

          dcl     whoami                        char (16) int static init ("set_max_length");

          dcl     decimal                       fixed bin int static init (1);
          dcl     octal                         fixed bin int static init (2);

          dcl     label                         (2) char (8) init ("decimal", "octal");

          dcl     sys_info$max_seg_size         fixed bin (18) ext;

          dcl     (
                  error_table_$action_not_performed,
                  error_table_$argerr,
                  error_table_$badopt,
                  error_table_$dirseg,
                  error_table_$incorrect_access,
                  error_table_$invalid_max_length,
                  error_table_$no_info,
                  error_table_$noarg
                  )                             ext fixed bin (35);

          dcl     1 query_info                  aligned,
                    2 version                   fixed bin init (2),
                    2 yes_or_no_sw              bit (1) unaligned init ("1"b),
                    2 suppress_name_sw          bit (1) unaligned init ("0"b),
                    2 status_code               fixed bin (35),
                    2 query_code                fixed bin (35) init (0);

          dcl     sml_entry                     entry (char (*), char (*), fixed bin (19), fixed bin (35)) variable;
          dcl     sbc_entry                     entry (char (*), char (*), fixed bin (24), fixed bin (35)) variable;

          dcl     check_path_name_              ext
                                                entry (ptr, fixed bin (21), bit (1) aligned, char (16) aligned, ptr, ptr,
                                                ptr, fixed bin (17), ptr, ptr, fixed bin (17));
          dcl     check_path_name_$indiv        ext entry (ptr, ptr, bit (1) aligned);
          dcl     cu_$arg_ptr                   ext entry (fixed bin (17), ptr, fixed bin (21), fixed bin (35));
          dcl     cv_dec_check_                 ext entry (char (*), fixed bin (35)) returns (fixed bin (35));
          dcl     cv_oct_check_                 ext entry (char (*), fixed bin (35)) returns (fixed bin (35));
          dcl     (
                  com_err_,
                  com_err_$suppress_name,
                  command_query_
                  )                             ext entry options (variable);

          dcl     (
                  hcs_$set_max_length,
                  fs_util_$set_max_length
                  )                             ext entry (char (*), char (*), fixed bin (19), fixed bin (35));
          dcl     hcs_$truncate_file            ext entry (char (*), char (*), fixed bin (19), fixed bin (35));
          dcl     (
                  hcs_$set_bc,
                  fs_util_$set_bit_count
                  )                             ext entry (char (*), char (*), fixed bin (24), fixed bin (35));

          dcl     cleanup                       condition;

          dcl     (addr, divide, length, mod, null, rtrim, substr)
                                                builtin;

          on cleanup call sml_cleanup;

          brf_sw, len_sw, max_sw, pth_sw, record_sw = "0"b;
          base = decimal;
          sml_entry = fs_util_$set_max_length;
          sbc_entry = fs_util_$set_bit_count;

          do arg_count = 1 by 1;

               call cu_$arg_ptr (arg_count, aptr, alng, code);
               if code ^= 0
               then do;
                         if arg_count < 2
                         then do;                           /* must have at least 2 args */
USAGE:
                                   call com_err_$suppress_name (0, whoami,
                                        "Usage:  set_max_length path length {-control_args}");
                                   goto free_up;
                              end;
                         goto process_request;              /* ready to do work */
                    end;
               if index (arg, "-") = 1
               then do;

                         if (arg = "-dc") | (arg = "-decimal")
                         then base = decimal;

                         else if (arg = "-oc") | (arg = "-octal")
                         then base = octal;

                         else if (arg = "-bf") | (arg = "-brief")
                         then brf_sw = "1"b;

                         else if (arg = "-rec") | (arg = "-record")
                         then record_sw = "1"b;

                         else if (arg = "-word")
                         then record_sw = "0"b;

                         else if (arg = "-maximum") | (arg = "-max")
                         then if len_sw
                              then do;
MAX_USAGE:
                                        call com_err_ (0, whoami, "-maximum inconsistent with length argument.");
                                        return;
                                   end;
                              else max_sw = "1"b;

		     else if arg = "-interpret_as_standard_entry" | arg = "-inase"
                              then do;
                                   sml_entry = hcs_$set_max_length;
                                   sbc_entry = hcs_$set_bc;
                              end;
		     else if arg = "-interpret_as_extended_entry" | arg = "-inaee"
		     then do;
			     sml_entry = fs_util_$set_max_length;
			     sbc_entry = fs_util_$set_bit_count;
			end;

                         else do;                           /* not a legal control argument */
                                   call com_err_ (error_table_$badopt, whoami, arg);
                                   return;
                              end;

                    end;                                    /* must be pathname */
               else if ^pth_sw
               then do;
                         call check_path_name_ (aptr, alng, "0"b, (whoami), addr (dirname), addr (entname),
                              addr (new_path), ecount, eptr, nptr, retc);
                         if retc = 2
                         then return;                       /* err and freeing all done */
                         ename = entname;
                         pth_sw = "1"b;
                    end;
               else do;                                     /* max length number */
                         if len_sw
                         then go to USAGE;                  /* supplied two length strings */
                         if max_sw
                         then go to MAX_USAGE;
                         length_string = arg;
                         len_sw = "1"b;                     /* indicate that have length (and pathname) */
                    end;

          end;

process_request:
          if max_sw
          then do;
                    max_length = sys_info$max_seg_size;
                    go to SET;
               end;

          if ^len_sw
          then go to USAGE;

          if base = decimal
          then max_length = cv_dec_check_ (length_string, code);
          else max_length = cv_oct_check_ (length_string, code);
          if code ^= 0
          then do;                                          /* code indicates which digit failed */
                    call com_err_ (0, whoami, "Invalid ^a number ^a", label (base), length_string);
                    go to free_up;
               end;

          if record_sw
          then max_length = max_length * 1024;

          else if mod (max_length, 1024) ^= 0
          then do;                                          /* must be in terms of records used */
                    fixed_max_length = divide (max_length + 1023, 1024, 19, 0) * 1024;
                    if ^brf_sw
                    then do;
                              if base = decimal
                              then call com_err_ (0, whoami, "^d is not a multiple of 1024 words, ^d used for max length",
                                        max_length, fixed_max_length);
                              else call com_err_ (0, whoami,
                                        "^o is not a multiple of 2000 (1024 decimal) words, ^o used for max length",
                                        max_length, fixed_max_length);
                         end;
                    max_length = fixed_max_length;
               end;

          if max_length > sys_info$max_seg_size
          then do;
                    call com_err_ (0, whoami,
                         "The specified value exceeds the supported maximum length for a segment. Please type ""help 256K_segments.gi""."
                         );
                    go to free_up;
               end;

SET:
          do j = 1 to ecount;                               /* loop through all enames */

               if retc = 1
               then do;                                     /* a star name */
                         call check_path_name_$indiv (addr (dirname), bentp, "0"b);
                         ename = bentp -> b_name;
                    end;

               call sml_entry (dirname, ename, max_length, code);
               if code ^= 0
               then do;
                         if retc = 1
                         then if code = error_table_$dirseg
                              then go to loop_end;          /* skip directories */
                         if code = error_table_$argerr
                         then do;                           /* wrong max length */
argerr:
                                   if base = decimal
                                   then call com_err_ (0, whoami, "Invalid max length ^d.", max_length);
                                   else call com_err_ (0, whoami, "Invalid max length ^o.", max_length);
                                   go to free_up;
                              end;
                         else if code = error_table_$invalid_max_length
                         then do;
                                   query_info.status_code = code;
                                   if base = decimal
                                   then call command_query_ (addr (query_info), answer, whoami,
                                             "Max length is less than current length, do you want to truncate ^a to ^d?",
                                             new_path, max_length);
                                   else call command_query_ (addr (query_info), answer, whoami,
                                             "Max length is less than current length, do you want to truncate ^a to ^o?",
                                             new_path, max_length);
                                   if answer = "no"
                                   then go to loop_end;
                                   call hcs_$truncate_file (dirname, ename, max_length, code);
                                   if code ^= 0
                                   then goto dont_care_err;
                                   call sbc_entry (dirname, ename, max_length * 36, code);
                                   call sml_entry (dirname, ename, max_length, code);
                                   if code ^= 0
                                   then goto dont_care_err;
                              end;
                         else do;
dont_care_err:
                                   call com_err_ (code, whoami, new_path);
                                                            /* if incorrect access on parent directory */
                                   if (code = error_table_$incorrect_access) | (code = error_table_$no_info)
                                   then go to free_up;      /* skip processing rest of star names */
                              end;                          /* code is 0, continue loop */
                    end;

loop_end:
          end;

free_up:
          call sml_cleanup;
          return;

sml_cleanup:
     proc;
          declare freen_                        entry (pointer);
                                                            /* Ycch, but we have no structure to free */

          if eptr ^= null
          then call freen_ (eptr);
          if nptr ^= null
          then call freen_ (nptr);                          /* proc */
     end;

/* proc */
     end set_max_length;
