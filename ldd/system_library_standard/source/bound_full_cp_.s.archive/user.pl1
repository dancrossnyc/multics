/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
user: procedure options (variable);

/* USER - active function to return user parameters */


/****^  HISTORY COMMENTS:
  1) change(86-03-01,Gilcrease), approve(86-03-27,MCR7370),
     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
     First comment for hcom.
     
     Modified April 1979 by T. Casey for MR7.0a to return "foreground" from [user abs_queue] in foreground job
     initial_term_(id type) added and term_(id type) changed to return current info. 09/12/79 S. Herbst
     Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures. (UNCA).
     Modified June 1981 by E. N. Kittlitz for UNCA rate structures
     Modified Augues 30 1981 by William M. York to add accounting keywords
     (limit, monthly_limit, cutoff_date, shift_limit, spending, monthly_spending,
     shift_spending, and limit_type), to clean up the code, and add comments
     to each action
     Modified October 1982 by E. N. Kittlitz for request_id
     Added 256K (256k) keyword 07/14/83 S. Herbst
     Added all keyword, printed in sorted list  10/3/83 C Spitzer
     Modified 1984-07-28 BIM to implement all in maintainable way,
     add auth_range, min_auth.
     Modified 1984-09-13 by JAFalksen, to utilize date_time_$format("date"|"time"|"date_time"
     Modified 1984-12-05 BIM: fixed dcl of user_info_$attributes
     Modified 1984-12-05 C Spitzer. fix subscriptrange errors
  2) change(86-03-27,Gilcrease), approve(86-03-27,MCR7370),
     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
     Add the keywords absout_truncation, absentee_restarted for -truncate
     absout, SCP6297.
  3) change(87-11-30,Parisek), approve(88-02-11,MCR7849),
     audit(88-03-07,Lippard), install(88-07-13,MR12.2-1047):
     Added the min_ring, max_ring, & ring_range keywords. SCP6367
                                                   END HISTORY COMMENTS */


dcl  alp pointer;
dcl  ap ptr,					/* ptr to argument */
     al fixed bin (21),				/* lth of argument */
     all_switch bit (1) aligned,
     bchr char (al) based (ap) unal,			/* argument */
     answer char (al) varying based (ap);		/* return argument */

dcl  time fixed bin (71),
     nactsw bit (1),
     (got_login_data, got_auth, got_limits) bit (1) aligned,
     term_id_sw bit (1),
     K256_switch bit (2) aligned,
     switch fixed bin,
     ec fixed bin (35),
     attr char (300) varying,
     (nm, pj, ac, grp) char (32),
     f float bin,
     (an, sb, wt) fixed bin,
     (tli, ocpu) fixed bin (71),
     wd char (9),
     dn char (168),
     id char (8),
     (np, pf, pp) fixed bin,
     tt char (32),
     (i, n) fixed bin,
     b36 bit (36),
     (auth, max_auth) bit (72) aligned,
     auth_range (2) bit (72) aligned,
     rs_number fixed bin,
     string char (300) varying,
     auth_string char (644),
     (absolute_limit, absolute_spending, monthly_limit, monthly_spending) float bin,
     (shift_limits, shift_spendings) dimension (0:7) float bin,
     cutoff_date fixed bin (71),
     limit_type fixed bin,
     current_shift fixed bin,
     fb71 fixed bin (71),
     char19 char (19),
     (truncate, restarted) bit (1),
     rg_range (2) fixed bin,
     ring_string char (3);

dcl  process_type (0:3) char (12) static options (constant)
	init ("initializer", "interactive", "absentee", "daemon");

dcl  service_type (0:7) char (8) static options (constant)
	init ("unknown", "login", "FTP", "MC", "slave", "type5", "autocall", "inactive");

%include line_types;
%include iocbx;

dcl  1 terminal_info aligned,
       2 version fixed bin init (1),
       2 id char (4) unaligned,
       2 term_type char (32) unaligned,
       2 line_type fixed bin,
       2 baud_rate fixed bin,
       2 reserved (4) fixed bin;

dcl  inarg char (24);

/* The following 3 arrays MUST all be dimensioned at the same size.
ITEM_ALPHA_ORDER indicates what order each data item is printed in when we find
the "all" keyword (use a 0 for a place holder if it is not to be printed for
"all"). item is the array of implemented keywords in no special order. New
ones may be added on the end of the list. user_data indicates which of the 3
types of user_info_ data must be retrieved to implement the keyword. If none
of them are correct, use a 0 as a place holder. */

dcl  ITEM_ALPHA_ORDER (58) fixed bin int static options (constant) init (1, 2, 3, 4, 54, 5, 6, 7, 55, 8, 9, 0, 11, 12, 0, 53, 56, 57, 58, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 28, 29, 0, 51, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49);
dcl  item (58) char (24) aligned int static options (constant) init (
	"256k_switch",				/* case 1  */
	"abs_queue",				/* case 2  */
	"absentee",				/* case 3  */
	"absentee_request_id",			/* case 4  */
	"absin",					/* case 5  */
	"absout",					/* case 6  */
	"account",				/* case 7  */
	"anonymous",				/* case 8  */
	"attributes",				/* case 9  */
	"auth",					/* case 10 */
	"auth_long",				/* case 11 */
	"brief_bit",				/* case 12 */
	"charge_type",				/* case 13 */
	"cpu_secs",				/* case 14 */
	"cutoff_date",				/* case 15 */
	"device_channel",				/* case 16 */
	"group",					/* case 17 */
	"initial_term_id",				/* case 18 */
	"initial_term_type",			/* case 19 */
	"limit",					/* case 20 */
	"limit_type",				/* case 21 */
	"line_type",				/* case 22 */
	"log_time",				/* case 23 */
	"login_date",				/* case 24 */
	"login_time",				/* case 25 */
	"login_word",				/* case 26 */
	"max_auth",				/* case 27 */
	"max_auth_long",				/* case 28 */
	"monthly_limit",				/* case 29 */
	"monthly_spending",				/* case 30 */
	"n_processes",				/* case 31 */
	"name",					/* case 32 */
	"outer_module",				/* case 33 */
	"preemption_time",				/* case 34 */
	"process_id",				/* case 35 */
	"process_overseer",				/* case 36 */
	"process_type",				/* case 37 */
	"project",				/* case 38 */
	"protected",				/* case 39 */
	"rate_structure_name",			/* case 40 */
	"rate_structure_number",			/* case 41 */
	"secondary",				/* case 42 */
	"service_type",				/* case 43 */
	"shift_limit",				/* case 44 */
	"shift_spending",				/* case 45 */
	"spending",				/* case 46 */
	"term_id",				/* case 47 */
	"term_type",				/* case 48 */
	"weight",					/* case 49 */
	"min_auth",				/* case 50 */
	"min_auth_long",				/* case 51 */
	"auth_range",				/* case 52 */
	"auth_range_long",				/* case 53 */
	"absentee_restarted",			/* case 54 */
	"absout_truncation",			/* case 55 */
          "min_ring",				/* case 56 */
          "max_ring",				/* case 57 */
          "ring_range");				/* case 58 */

dcl  user_data (58) fixed bin int static options (constant) init
	((6) 0, 1, 1, 0, 2, 2, 0, 0, 0, 3, (4) 0, 3, 3, 0, (4) 1, 2, 2,
	3, 3, 0, 1, (5) 0, 1, 0, 0, 0, 1, 0, 0, 3, 3, 0, 0, 1, (4) 0, 0, 0,
          0, 0, 0);

dcl  item_synonyms (3) char (24) int static options (constant) init
	("abs_rqid", "256k", "256K");
dcl  item_synonyms_position (3) fixed bin int static options (constant) init (4, 1, 1);

dcl  error_table_$not_act_fnc fixed bin (35) ext;
dcl  error_table_$badopt fixed bin(35) ext static;

dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$af_arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  get_process_id_ entry () returns (bit (36));
dcl  cu_$af_return_arg_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$user_io ptr external;
dcl  date_time_$format entry (char(*), fixed bin(71), char(*), char(*)) returns(char(250) var);
dcl  requote_string_ entry (char (*)) returns (char (*));
dcl  user_info_$authorization_range entry ((2) bit (72) aligned);
dcl  user_info_$login_data entry options (variable);
dcl  user_info_$absin entry (char (*));
dcl  user_info_$absout entry (char (*));
dcl  (user_info_$absout_truncation, user_info_$absentee_restarted) entry (bit(1));
dcl  user_info_$outer_module entry (char (*));
dcl  user_info_$attributes entry (char (*) varying);
dcl  user_info_$service_type entry (fixed bin);
dcl  user_info_$process_type entry (fixed bin);
dcl  user_info_$terminal_data entry options (variable);
dcl  user_info_$responder entry (char (*));
dcl  user_info_$usage_data entry options (variable);
dcl  user_info_$load_ctl_info entry options (variable);
dcl  user_info_$absentee_queue entry (fixed bin);
dcl  user_info_$rs_name entry (char (*));
dcl  user_info_$rs_number entry (fixed bin);
dcl  user_info_$limits entry (float bin, float bin, fixed bin (71), fixed bin,
	(0:7) float bin, float bin, float bin, (0:7) float bin);
dcl  user_info_$absentee_request_id entry (fixed bin (71));
dcl  user_info_$ring_range entry ((2) fixed bin);
dcl  system_info_$next_shift_change entry (fixed bin, fixed bin (71), fixed bin, fixed bin (71));
dcl  hcs_$get_usage_values entry (fixed bin, fixed bin (71), fixed bin);
dcl  hcs_$get_authorization entry (bit (72) aligned, bit (72) aligned);
dcl  hcs_$set_256K_switch entry (bit (2) aligned, bit (2) aligned, fixed bin (35));
dcl  convert_access_class_$to_string entry (bit (72) aligned, char (*), fixed bin (35));
dcl  convert_access_class_$to_string_short entry (bit (72) aligned, char (*), fixed bin (35));
dcl  convert_access_class_$to_string_range entry ((2) bit (72) aligned, character (*), fixed binary (35));
dcl  convert_access_class_$to_string_range_short entry ((2) bit (72) aligned, character (*),
	fixed binary (35));
dcl  request_id_ entry (fixed bin (71)) returns (char (19));
dcl  ioa_$rsnnl entry options (variable);

dcl  (addr, clock, hbound, index, ltrim, rtrim) builtin;

/* ======================================================= */

	all_switch, nactsw, got_limits, got_auth, got_login_data = "0"b;
	call cu_$arg_list_ptr (alp);
	call cu_$af_arg_ptr (1, ap, al, ec);
	if ec = error_table_$not_act_fnc then do;
	     call cu_$arg_ptr (1, ap, al, ec);
	     nactsw = "1"b;
	end;
	if ec ^= 0 then do;
er:	     if nactsw then call com_err_ (ec, "user", "");
	     else call active_fnc_err_ (ec, "user", "");
	     return;
	end;
	inarg = bchr;

	if inarg = "all" then all_switch = "1"b;
	else do;
	     do switch = 1 to hbound (item, 1);
		if inarg = item (switch) then go to have_good_item;
	     end;
	     do switch = 1 to hbound (item_synonyms, 1);
		if inarg = item_synonyms (switch) then do;
		     switch = item_synonyms_position (switch);
		     goto have_good_item;
		end;
	     end;
	     if nactsw then call com_err_ (0, "user", "Invalid keyword: ^a", inarg);
	     else call active_fnc_err_ (0, "user", "Invalid keyword: ^a", inarg);
	     return;
	end;

have_good_item:
	if all_switch & ^nactsw then do;
	     call active_fnc_err_ (error_table_$badopt, "user", "The ""all"" keyword is invalid in an active function invocation.");
	     return;
	end;

	if all_switch then
	     do i = 1 to 3;
	     call get_user_data (i);
	end;
	else
	     call get_user_data (user_data (switch));


	if all_switch then do i = 1 to hbound (ITEM_ALPHA_ORDER, 1);
	     if ITEM_ALPHA_ORDER (i) ^= 0 then call process_one_item (ITEM_ALPHA_ORDER (i));
	end;
	else call process_one_item (switch);
	return;


get_user_data:
     proc (type);

dcl  type fixed bin;

	if type = 1 then call user_info_$login_data (nm, pj, ac, an, sb, wt, tli, wd);
	else if type = 2 then call hcs_$get_authorization (auth, max_auth);
	else if type = 3 then call user_info_$limits (monthly_limit, absolute_limit, cutoff_date,
		limit_type, shift_limits, monthly_spending, absolute_spending, shift_spendings);

	return;
     end get_user_data;

process_one_item:
     procedure (switch) options (non_quick);
declare  switch fixed bin;
declare  i fixed bin;

	go to case (switch);

case (32):					/* name */
	dn = nm;
	go to j1;

case (38):					/* project */
	dn = pj;
	go to j1;

case (7):						/* account */
	dn = ac;
	go to j1;

case (25):					/* login_time */
j3:	string = date_time_$format ("time", tli, "", "");
	go to exit;

case (24):					/* login_date */
	string =  date_time_$format ("date", tli, "", "");
	go to exit;

case (8):						/* anonymous */
	if an = 1 then string = "true";
	else string = "false";
	go to exit;

case (42):					/* secondary */
	if sb = 1 then string = "true";
	else string = "false";
	go to exit;

case (49):					/* weight */
	f = wt / 1e1;
	go to j2;

case (26):					/* login_word */
	dn = wd;
	go to j1;

case (23):					/* log_time */
	time = clock () - tli;
	f = time / 60e6;
	go to j2;

case (36):					/* process_overseer */
	call user_info_$responder (dn);
	go to j1;

case (18):					/* initial_term_id */
iterm_id:
	call user_info_$terminal_data (id, tt);
	dn = id;
	go to j1;

case (19):					/* initial_term_type */
	call user_info_$absentee_queue (n);
	if n ^= -1 then do;
	     string = "Absentee";
	     go to exit;
	end;
iterm_type:
	call user_info_$terminal_data (id, tt);
	string = rtrim (tt);
	go to exit;

case (14):					/* cpu_secs */
	call user_info_$usage_data (np, ocpu);
	call hcs_$get_usage_values (pf, time, pp);
	time = time + ocpu;
	f = time / 1e6;
j2:	call ioa_$rsnnl ("^.1f", string, i, f);
	go to exit;

case (16):					/* device_channel */
	call user_info_$terminal_data (id, tt, dn);	/* get channel name */
j1:	string = rtrim (dn);
	go to exit;

case (31):					/* n_processes */
	call user_info_$usage_data (np, ocpu);
	call ioa_$rsnnl ("^d", string, i, np);
	go to exit;

case (3):						/* absentee */
	call user_info_$absentee_queue (n);
	if n = -1 then string = "false";
	else string = "true";
	go to exit;

case (2):						/* abs_queue */
	call user_info_$absentee_queue (n);
	if n = -1 then string = "interactive";
	else if n = 0 then string = "foreground";
	else call ioa_$rsnnl ("^d", string, i, n);
	go to exit;

case (39):					/* protected */
	call user_info_$load_ctl_info (grp, sb, tli);
	string = "false";
	if sb = 0 then if tli > clock () then string = "true";
	go to exit;

case (12):					/* brief_bit */
	call user_info_$attributes (attr);
	if index (attr, "brief") = 0 then string = "false";
	else string = "true";
	go to exit;

case (17):					/* group */
	call user_info_$load_ctl_info (grp);
	dn = grp;
	go to j1;

case (34):					/* preemption_time */
	call user_info_$load_ctl_info (grp, sb, tli);
	go to j3;

case (9):						/* attributes */
	call user_info_$attributes (string);
	go to exit;

case (5):						/* absin */
	call user_info_$absin (dn);
	go to j1;

case (6):						/* absout */
	call user_info_$absout (dn);
	go to j1;

case (33):					/* outer_module */
	call user_info_$outer_module (dn);
	go to j1;

case (35):					/* process_id */
	b36 = get_process_id_ ();
	call ioa_$rsnnl ("^w", string, i, b36);
	go to exit;

case (10):					/* auth */
	call convert_access_class_$to_string_short (auth, auth_string, ec);
	if ec ^= 0 then go to er;
	if auth_string = "" then string = "system_low";
	else string = rtrim (auth_string);
	go to exit;

case (11):					/* auth_long */
	call convert_access_class_$to_string (auth, auth_string, ec);
	if ec ^= 0 then go to er;
	if auth_string = "" then string = "system_low";
	else string = rtrim (auth_string);
	go to exit;

case (27):					/* max_auth */
	call convert_access_class_$to_string_short (max_auth, auth_string, ec);
	if ec ^= 0 then go to er;
	if auth_string = "" then string = "system_low";
	else string = rtrim (auth_string);
	go to exit;

case (28):					/* max_auth_long */
	call convert_access_class_$to_string (max_auth, auth_string, ec);
	if ec ^= 0 then go to er;
	if auth_string = "" then string = "system_low";
	else string = rtrim (auth_string);
	go to exit;

case (50):					/* min_auth */
	call user_info_$authorization_range (auth_range);
	call convert_access_class_$to_string_short (auth_range (1), auth_string, ec);
	if ec ^= 0 then go to er;
	if auth_string = "" then auth_string = "system_low";
	string = rtrim (auth_string);
	go to exit;

case (51):					/* min_auth */
	call user_info_$authorization_range (auth_range);
	call convert_access_class_$to_string (auth_range (1), auth_string, ec);
	if ec ^= 0 then go to er;
	if auth_string = "" then auth_string = "system_low";
	string = rtrim (auth_string);
	go to exit;

case (52):					/* auth_range */
	call user_info_$authorization_range (auth_range);
	call convert_access_class_$to_string_range_short (auth_range, auth_string, ec);
	if ec ^= 0 then go to er;
	if auth_string = "" then auth_string = "system_low";
	string = rtrim (auth_string);
	go to exit;

case (53):					/* auth_range_long */
	call user_info_$authorization_range (auth_range);
	call convert_access_class_$to_string_range (auth_range, auth_string, ec);
	if ec ^= 0 then go to er;
	if auth_string = "" then auth_string = "system_low";
	string = rtrim (auth_string);
	go to exit;

case (22):					/* line_type */
	call user_info_$terminal_data ((""), (0), (""), i);
	dn = line_types (i);
	goto j1;

case (43):					/* service_type */
	call user_info_$service_type (i);
	dn = service_type (i);
	goto j1;

case (37):					/* process_type */
	call user_info_$process_type (i);
	dn = process_type (i);
	goto j1;

case (13):					/* charge_type */
	call user_info_$terminal_data ((""), (""), (""), (0), dn);
	go to j1;

case (47):					/* term_id */
	term_id_sw = "1"b;
get_term: call user_info_$process_type (i);
	if i > 1 then				/* absentee or daemon process */
	     if term_id_sw then go to iterm_id;
	     else if i = 2 then do;
		string = "Absentee";
		go to exit;
	     end;
	     else go to iterm_type;

/* Interactive or initializer process */

	call iox_$control (iox_$user_io, "terminal_info", addr (terminal_info), ec);
	if ec ^= 0 then do;
	     if term_id_sw then go to iterm_id;
	     else go to iterm_type;
	end;
	if term_id_sw then string = rtrim (terminal_info.id);
	else string = rtrim (terminal_info.term_type);
	go to exit;

case (48):					/* term_type */
	term_id_sw = "0"b;
	go to get_term;

case (40):					/* rate_structure_name */
	call user_info_$rs_name (nm);
	string = nm;
	go to exit;

case (41):					/* rate_structure_number */
	call user_info_$rs_number (rs_number);
	call ioa_$rsnnl ("^d", string, i, rs_number);
	go to exit;

case (20):					/* limit */
	call ioa_$rsnnl ("^.2f", string, i, absolute_limit);
	goto exit;

case (15):					/* cutoff_date */
	string = date_time_$format ("date_time", cutoff_date, "", "");
	goto exit;

case (29):					/* monthly_limit */
	call ioa_$rsnnl ("^.2f", string, i, monthly_limit);
	goto exit;

case (44):					/* shift_limit */
	call system_info_$next_shift_change (current_shift, (0), (0), (0));
	call ioa_$rsnnl ("^.2f", string, i, shift_limits (current_shift));
	goto exit;

case (46):					/* spending */
	call ioa_$rsnnl ("^.2f", string, i, absolute_spending);
	goto exit;

case (30):					/* monthly_spending */
	call ioa_$rsnnl ("^.2f", string, i, monthly_spending);
	goto exit;

case (45):					/* shift_spending */
	call system_info_$next_shift_change (current_shift, (0), (0), (0));
	call ioa_$rsnnl ("^.2f", string, i, shift_spendings (current_shift));
	goto exit;

case (21):					/* limit_type */
	if limit_type = 0
	then string = "absolute";
	else if limit_type = 1
	then string = "day";
	else if limit_type = 2
	then string = "month";
	else if limit_type = 3
	then string = "year";
	else if limit_type = 4
	then string = "calendar_year";
	else if limit_type = 5
	then string = "fiscal_year";
	goto exit;

case (4):						/* absentee_request_id */ /* abs_rqid */
	call user_info_$absentee_request_id (fb71);
	if fb71 ^= 0 then do;
	     char19 = request_id_ (fb71);
	     string = char19;
	end;
	else string = "0";
	go to exit;

case (1):						/* 256k_switch (allow 256K segments) */ /* 256k */ /* 256K */
	call hcs_$set_256K_switch ("00"b, K256_switch, (0));
	if K256_switch = "11"b then string = "true";
	else string = "false";
	go to exit;

case (54):					/* absentee_restarted */
	call user_info_$absentee_restarted (restarted);
	if restarted then string = "true";
	else string = "false";
	go to exit;

case (55):					/* absout_truncation */
	call user_info_$absout_truncation (truncate);
	if truncate then string = "true";
	else string = "false";

case (56):					/* min_ring */
	call user_info_$ring_range (rg_range);
	call ioa_$rsnnl ("^d", ring_string, (0), rg_range (1));
	string = rtrim(ring_string);
	go to exit;
	
case (57):					/* max ring */
	call user_info_$ring_range (rg_range);
	call ioa_$rsnnl ("^d", ring_string, (0), rg_range (2));
	string = rtrim(ring_string);
	go to exit;
	
case (58):					/* ring range (lowest and highest) */
	call user_info_$ring_range (rg_range);
	call ioa_$rsnnl ("^d:^d", ring_string, (0), rg_range (1), rg_range (2));
	string = rtrim(ring_string);
	go to exit;
	

/* End of moby CASE statement */

/* Common return point for many actions */

exit:	if all_switch then do;
	     if string ^= ""
	     then call ioa_ ("^a:^24t^a", item (switch), ltrim (string));
	end;
	else if nactsw then
	     call ioa_ ("^a", string);
	else do;
	     call cu_$af_return_arg_rel (i, ap, al, (0), alp);
	     answer = requote_string_ ((string));
	end;
	return;
     end process_one_item;
     end user;
