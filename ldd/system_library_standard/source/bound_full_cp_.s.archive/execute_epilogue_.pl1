/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


execute_epilogue_: proc (run_only);

/* coded 9/77 by Steve Webber */
/* modified 1/78 by Melanie Weaver to clean up list of run handlers as it is processed and to mask quits */
/* modified  7/78 by Melanie Weaver to fix loop bug */

/* Parameters */

dcl  a_entry entry;
dcl  run_only bit (1) aligned;			/* ON if only want run-unit cleanup */

/* Automatic */

dcl  i fixed bin;
dcl  code fixed bin (35);
dcl  iocb_ptr ptr;
dcl  mask bit (36) aligned;

/*  Static */

dcl  num_handlers fixed bin static init (0);
dcl  epilogue_handlers (10) static entry variable;
dcl  num_run_handlers fixed bin static init (0);
dcl  run_epilogue_handlers (10) static entry variable;

/* External */

dcl  error_table_$action_not_performed fixed bin (35) ext;

/* Builtins, etc */

dcl  any_other condition;
dcl cleanup condition;
dcl (ptr, addr, hbound) builtin;

/* entries */

dcl  iox_$find_iocb_n entry (fixed bin, ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);


/*  */

/* Don't let quits keep handlers from finishing */

	mask = "0"b;
	on cleanup begin;
	     if mask then call hcs_$reset_ips_mask (mask, mask);
	end;
	call hcs_$set_ips_mask ("0"b, mask);

/* Always call the run handlers */

	do i = num_run_handlers to 1 by -1;
	     num_run_handlers = num_run_handlers - 1;	/* don't want this handler to be remembered after run unit is gone */
	     on any_other goto next0;
	     call run_epilogue_handlers (i) ();
next0:	end;


	if ^run_only then do;
	     do i = 1 to num_handlers;
		on any_other goto next;
		call epilogue_handlers (i) ();
next:	     end;

/* Now close all files */

	     call iox_$find_iocb_n (1, iocb_ptr, code);
	     do i = 2 to 2000 while (code = 0);		/* avoid infinite loop */
		on any_other goto nexti;
		call iox_$close (iocb_ptr, code);
nexti:		call iox_$find_iocb_n (i, iocb_ptr, code);
	     end;
	end;

	call hcs_$reset_ips_mask (mask, mask);

	return;

/*  */

add_epilogue_handler_: entry (a_entry) returns (fixed bin (35));


	if ptr (addr (i), 0) -> stack_header.run_unit_depth > 0 then do;
	     if num_run_handlers = hbound (run_epilogue_handlers, 1) then return (error_table_$action_not_performed);
	     do i = 1 to num_run_handlers;
		if run_epilogue_handlers (i) = a_entry then return (0);
	     end;
	     num_run_handlers = num_run_handlers + 1;
	     run_epilogue_handlers (num_run_handlers) = a_entry;
	end;
	else do;
	     if num_handlers = hbound (epilogue_handlers, 1) then return (error_table_$action_not_performed);
	     do i = 1 to num_handlers;
		if epilogue_handlers (i) = a_entry then return (0);
	     end;
	     num_handlers = num_handlers + 1;
	     epilogue_handlers (num_handlers) = a_entry;
	end;
	return (0);

/*  */

%include stack_header;
     end;
