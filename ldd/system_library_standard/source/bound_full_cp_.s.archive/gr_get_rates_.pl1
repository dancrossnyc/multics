/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gr_get_rates_: proc (cpu_rate, real_rate, io_ops_rate, kmu_rate, next_shift);

dcl  next_shift fixed bin (71);
dcl (dv_index, number_of_devices) fixed bin;
dcl  tty_charge_type char (8);
dcl (cpu_rate,
     real_rate,
     io_ops_rate,
     kmu_rate) float bin;
dcl  ip ptr;
dcl  ec fixed bin;
dcl  shift_index fixed bin;
dcl  abs_queue fixed bin;
dcl  part_of_week fixed bin (71);
dcl  time fixed bin (71);
dcl  s fixed bin;
dcl  shift fixed bin;
dcl  shift_tab (336) fixed bin;
dcl (cpu (0:7),
     log (0:7),
     io_ops (0:7),
     cor (0:7),
     dsk,
     reg,
     abs_cpu_rate (4),
     abs_kmu_rate (4)) float bin;
dcl  user_info_$terminal_data ext entry (char(*), char(*), char(*), fixed bin, char(*));
dcl  system_info_$device_prices ext entry options (variable);
dcl  user_info_$absentee_queue ext entry (fixed bin);
dcl  system_info_$shift_table ext entry ((336) fixed bin);
dcl  system_info_$next_shift_change ext entry (fixed, fixed bin (71));
dcl  system_info_$prices ext entry ((0:7) float bin, (0:7) float bin, (0:7) float bin, (0:7) float bin, float bin, float bin);
dcl  system_info_$abs_prices ext entry ((4) float bin, (4) float bin);
dcl  sys_info$time_delta fixed bin (35) ext static;
dcl (fixed,
     divide,
     mod) builtin;



	call user_info_$absentee_queue (abs_queue);
						/* are we executing in an absentee process and if so, what queue are we in? */
	if abs_queue > 0 then do;
	     call system_info_$abs_prices (abs_cpu_rate, abs_kmu_rate);
	     cpu_rate = abs_cpu_rate (abs_queue);
	     kmu_rate = abs_kmu_rate (abs_queue);
	     real_rate, io_ops_rate = 0.;
	     next_shift = 0;
	end;
	else do;
	     call system_info_$prices (cpu, log, io_ops, cor, dsk, reg); /* get prices for various things for each shift */
	     call system_info_$next_shift_change (s, next_shift); /* this may differ from static system data */

/* return prices */
	     cpu_rate = cpu (s);
	     io_ops_rate = io_ops (s);
	     kmu_rate = cor (s);
	     real_rate = log (s);			/* get connect time base price */
						/* now determine surcharge on login rate */

	     call user_info_$terminal_data ("", "", "", 0, tty_charge_type);
	     call system_info_$device_prices (number_of_devices);
	     begin;

dcl 1 dvt (number_of_devices) aligned,
    2 id char (8),
    2 prices (0:7) float bin (27);

		call system_info_$device_prices ((0), addr (dvt));
		do dv_index = 1 to number_of_devices;
		     if tty_charge_type = dvt.id (dv_index) then do;
			real_rate = real_rate + dvt.prices (dv_index, s);
						/* add in surcharge */
			dv_index = number_of_devices;
		     end;
		end;
	     end;

	end;

     end;
