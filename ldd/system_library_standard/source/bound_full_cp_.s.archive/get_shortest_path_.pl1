/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

get_shortest_path_:
     proc (P_path) returns (char (168));

/* DESCRIPTION:

	Replaces every directory component it has access to with the
     shortest name on the directory.  If for any component multiple
     shortest names are found, three steps are taken to give what is
     hopefully the optimum name for the user.  First, try to get rid of
     any names with upper case characters in them and reduce the list
     of candidate names to this set.  If multiple names still exist,
     take the first char. of the primary name and take the first short
     name whose first char. matches it case independently.  If this fails,
     return the first shortest name found.
*/

/* HISTORY:

Written by S. Herbst, 10/01/81.
Modified:
11/16/82 by S. Herbst:  Added cleanup handler and made it replace names
	  of links to dirs.
09/13/83 by Lee A. Newcomb:  made to give precidence to names without upper
	  case chars, then names matching 1st char of primary name.  Also
	  made status_branch an automatic structure, and fixed bug where
	  status_entry_names structure was never freed.
01/30/84 by L. A. Newcomb:  fixed bug in freeing the status_entry_names
	  structure if the pathname supplied is a link (i.e., the last
	  pathname component is a link, but we don't care about the other
	  directory components of the pathname).
*/
%page;
/* START OF DECLARATIONS */
/* Parameter */
dcl
     P_path		        char (*)		/* path to get shortest_path of */
			        parameter;

/* Automatic */
dcl  (
     code			        fixed bin (35),	/* status/error code */
     ename		        char (32),		/* used in hcs_$status_ to get all enames */
     entry_names_p		        ptr,		/* for getting to (status_)entry_names faster */
     i			        fixed bin (21),	/* used in indexing into orginal_path */
     input_path		        char (528) varying,	/* 528 max. for paths */
     original_path		        char (528),		/* after being pased through absolute_pathname_ */
     output_path		        char (528) varying,	/* we build it as we go */
     start		        fixed bin (21)	/* for walking through the given name */
     )			        automatic;

/* Automatic Structures */
dcl
     1 local_status_branch	        like status_branch aligned
			        automatic;

/* CONSTANTS */
dcl  (
     LOWER_CHARS		        char (26) init ("abcdefghijklmnopqrstuvwxyz"),
     NO_CHASE		        fixed bin (1) init (0),
     UPPER_CHARS		        char (26) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
     )			        internal static options (constant);

/* Based */
dcl
     entry_names		        aligned char (32)	/* like status_entry_names */
			        dim (status_branch.nnames) based (entry_names_p),
     status_area		        area based (status_area_ptr);

/* Entries */
dcl
     absolute_pathname_	        entry (char (*), char (*), fixed (35)),
     get_system_free_area_	        entry returns (ptr),
     hcs_$status_		        entry (char (*), char (*), fixed (1), ptr, ptr, fixed (35));

/* Builtins & Conditions */
dcl
     (addr, index, length,
     null, pointer, rtrim,
     search, substr, translate)       builtin,
     cleanup		        condition;

/* END OF DECLARATIONS */
%page;
	call absolute_pathname_ (P_path, original_path, code); /* get the complete pathname string */
	if code ^= 0 then				/* failure, can only return input data */
	     return (P_path);

	if original_path = ">" then			/* the ROOT is kind of short to start with */
	     return (">");

	input_path = rtrim (original_path);		/* copy to varying string */
	output_path = ">";				/* always start at the ROOT */
	start = 2;				/* ignore first ">" in path */
	status_area_ptr = get_system_free_area_ ();	/* where to allocate status_names */
	status_ptr = addr (local_status_branch);	/* use auto storage for the basic structure */
	status_branch.names_relp = ""b;		/* for cleanup */
	entry_names_p = null ();			/* for safety in cleanup */

	on cleanup begin;
		if status_branch.names_relp ^= ""b then
		     if entry_names_p ^= null () then	/* take care of window between setting names_relp and ptr */
			free entry_names in (status_area); /* so we don't free twice */
	     end;

	do while (start <= length (input_path));	/* main loop, go until nothing left */
						/* get next ename to shorten */
	     i = index (substr (input_path, start), ">");
	     if i ^= 0 then
		ename = substr (input_path, start, i - 1);
	     else do;
		ename = substr (input_path, start);
		i = length (input_path) + 1;		/* to stop loop */
	     end;

	     call hcs_$status_ ((output_path), ename, NO_CHASE, status_ptr, status_area_ptr, code);
	     if code = 0 then			/* make freeing work */
		entry_names_p = pointer (status_area_ptr, status_branch.names_relp);

	     if code = 0 &
		(status_branch.type = Directory |	/* replace only directory names */
		(status_branch.type = Link & i <= length (input_path))) then     /* and names of links to dirs */
		ename = select_shortest_entry_name ();	/* possibly replace original name */


	     if code = 0 then do;			/* must free names struct. */
		status_branch.names_relp = ""b;	/* to prevent multiple frees by cleanup handler */
		free entry_names in (status_area);	/* and use our version of the structure for freeing */
		entry_names_p = null ();		/* so ptr is null between relp setting and ptr calculation */
	     end;

						/* ename still holds name to use */
	     if length (output_path) > 1 then		/* most common case */
		output_path = output_path || ">" || rtrim (ename);
	     else output_path = ">" || rtrim (ename);	/* don't double up the first ">" */
	     start = start + i;			/* update loop control */
	end;


	return ((output_path));

/*   end get_shortest_path_; */
%page;
select_shortest_entry_name:
     proc () returns (char (32));

/* This procedure selects the shortest name in the currently available */
/* status_entry_names array.  For efficiency and ease of programming,  */
/* the entry_names array has been declared and given an explicit ptr.  */
/* The necessity for this procedure is to allocate the name index      */
/* as we have no idea at the time get_shortest_path_'s stack frame is  */
/* laid down what the max size required will be.                       */

/* START OF DECLARATIONS */
/* Automatic */
dcl  (
     curr_shortest_length	        fixed bin (21),	/* shortest entryname length at any point in selection */
     name_idx		        fixed bin,		/* for walking throught status_names struct. */
     n_lower_names		        fixed bin,		/* # of entrynames of the same length with no upper */
						/* case chars; must be <= n_shortest_names */
     n_shortest_names	        fixed bin,		/* # of shortest entrynames of same length */
     primary_ename_fchar	        char (1) aligned,	/* 1st char. of primary entryname for selecting */
						/* between multiple shortest names of same length */
     shortest_name_idxs	        fixed bin dim (status_branch.nnames) /* for getting the SHORTEST entrynames */
						/* dcl'd this way to not have to program */
						/* for a staticly dcl'd array overflow */
     )			        automatic;

/* END OF DECLARATIONS */

	n_shortest_names = 1;			/* to start */
	shortest_name_idxs (1) = 1;
	curr_shortest_length = length (rtrim (entry_names (1)));

	do name_idx = 2 to status_branch.nnames;

	     if length (rtrim (entry_names (name_idx))) < curr_shortest_length then do;
						/* new shortest length */
		curr_shortest_length = length (rtrim (entry_names (name_idx)));
		n_shortest_names = 1;		/* must restart list */
		shortest_name_idxs (1) = name_idx;
	     end;

	     else if length (rtrim (entry_names (name_idx))) = curr_shortest_length then do;
						/* add to current list */
		n_shortest_names = n_shortest_names + 1;
		shortest_name_idxs (n_shortest_names) = name_idx;
	     end;

	     else ;				/* name too long ==> uninteresting */
	end;

/* if only one name is left, we have our answer */

	if n_shortest_names = 1 then			/* done */
	     return (entry_names (shortest_name_idxs (1)));
%page;
/* More work needed:  all names we have saved indices of are of the same  */
/* length see if any are all lower case or valid non-alpha chars.  We     */
/* will share the current index array if any names show up not containing */
/* any upper case characters.					    */

	n_lower_names = 0;				/* we share the current index array */
	do name_idx = 1 to n_shortest_names;

	     if search (entry_names (shortest_name_idxs (name_idx)), UPPER_CHARS) = 0 then do;

		n_lower_names = n_lower_names + 1;	/* no upper case chars */
		shortest_name_idxs (n_lower_names) = shortest_name_idxs (name_idx);
	     end;
	end;

/* If one non-upper name was found, we return it */

	if n_lower_names = 1 then			/* done */
	     return (entry_names (shortest_name_idxs (1)));

/* We know we need to do compare with first char of primary name case */
/* independently.  First, we make sure we have that char in lower     */
/* if it is upper case. */

	primary_ename_fchar = translate (substr (entry_names (1), 1, 1), LOWER_CHARS, UPPER_CHARS);

/* If we know only non-upper case names are around, do small optimization */

	if n_lower_names > 1 then do;

	     do name_idx = 1 to n_lower_names;		/* will break out of loop on a match */

		if primary_ename_fchar = substr (entry_names (shortest_name_idxs (name_idx)), 1, 1) then
		     return (entry_names (shortest_name_idxs (name_idx)));	/* done */
	     end;
						/* no match, return 1st non-upper name */
	     return (entry_names (shortest_name_idxs (1)));    /* done */
	end;

/* If there were no non-upper case names, we must do a translation for   */
/* the fchar compare.  This is the only effective difference between the */
/* previous compare loop and the following one. */

	do name_idx = 1 to n_shortest_names;

	     if primary_ename_fchar = translate (substr (entry_names (
		shortest_name_idxs (name_idx)), 1, 1), LOWER_CHARS, UPPER_CHARS) then

		return (entry_names (shortest_name_idxs (name_idx)));	/* done */
	end;

/* no first char match on multiple names of same shortest length. */
/* We just return the first shortest name found */

	return (entry_names (shortest_name_idxs (1)));	/* done */

     end select_shortest_entry_name;
%page;%include status_structures;

     end get_shortest_path_;
