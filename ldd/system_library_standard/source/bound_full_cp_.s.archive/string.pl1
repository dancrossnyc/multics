/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* string		an active function which returns its input arguments, strung together	*/
	/*		in a quoted character string and separated by blanks.  An arbitrary	*/
	/*		number of input arguments can be handled (0 to infinite).  The only	*/
	/* 		bound on their number of length is the maximum command line size.	*/
	/*		When invoked as a command, string has the effect of:		*/
	/*			ioa_ [string ...]					*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/* 	[string arg1_ ... arg_n]						*/
	/* or      string arg1_ ... arg_n						*/
	/*									*/
	/* 1) arg_i	are optional input arguments which are returned as a single quoted	*/
	/*		string.							*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* TR7417, call iox_$put_chars only once for command invocation  10/31/80 S. Herbst */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


string:	procedure;				/* active function which returns its input args,	*/
						/* separated by blanks, as a quoted string.	*/

     dcl						/*	automatic variables			*/
	Larg			fixed bin (21),	/* length of an input arg.			*/
	Lmax			fixed bin (21),	/* max estimate for string to print 		*/
	Lret			fixed bin (21),	/* maximum length of our return value.		*/
	Nargs			fixed bin,	/* number of arguments we were passed.		*/
	Parg			ptr,		/* ptr to an input argument.			*/
	Parg_list			ptr,		/* ptr to the argument list 			*/
	Pret			ptr,		/* ptr to our return value.			*/
	code			fixed bin (35),	/* an error code value.			*/
	i			fixed bin;	/* a do-group index.			*/


     dcl						/*	based variables			*/
	arg			char(Larg) based (Parg),
						/* an input argument.			*/
	ret			char(Lret) varying based (Pret);
						/* overlay for portions of our return value.	*/


     dcl (addr, addrel, length, search)	builtin;


     dcl						/*	entries				*/
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin (21), fixed bin(35)),
         (cu_$af_arg_ptr,
	cu_$arg_ptr)		entry (fixed bin, ptr, fixed bin (21), fixed bin(35)),
	cu_$arg_list_ptr		entry (ptr),
	cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr),
	iox_$put_chars		entry (ptr, ptr, fixed bin, fixed bin(35));


     dcl						/*	static variables			*/
	NL			char(1) int static init ("
"),
	SPACE			char(1) int static init (" "),
	iox_$user_output		ptr ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	call cu_$af_return_arg (Nargs, Pret, Lret, code);	/* see how we were called.			*/
	if code = 0 then do;			/* as an active function.			*/
	     if Nargs = 0 then do;			/* no input args.  Return a null string.	*/
		ret = """""";
		return;
		end;
	     ret = """";
	     call cu_$af_arg_ptr (1, Parg, Larg, code);	/* add first argument to return string.		*/
	     if search (arg, """") > 0 then
		ret = ret || double_quotes (arg);
	     else ret = ret || arg;
	     do i = 2 to Nargs;			/* add remaining args to return string.		*/
		ret = ret || " ";
		call cu_$af_arg_ptr (i, Parg, Larg, code);
		if search (arg, """") > 0 then
		     ret = ret || double_quotes (arg);
		else ret = ret || arg;
		end;
	     ret = ret || """";
	     end;
	else do;					/* command merely output's its args, separated by	*/
	     Lmax = 1;				/* allow for NL always */
	     do i = 1 to Nargs;
		call cu_$arg_ptr (i, Parg, Larg, code);
		Lmax = Lmax + Larg + 1;
	     end;

	     call cu_$arg_list_ptr (Parg_list);
begin;

dcl the_string char (Lmax) varying;
dcl i fixed bin;

	     the_string = "";
	     do i = 1 to Nargs;
		call cu_$arg_ptr_rel (i, Parg, Larg, code, Parg_list);
		if i ^= 1 then the_string = the_string || SPACE;
		the_string = the_string || arg;
	     end;
	     the_string = the_string || NL;
	     call iox_$put_chars (iox_$user_output, addrel (addr (the_string), 1), length (the_string), code);
end;
	     end;

double_quotes:	procedure (string) returns (char(*) varying);
						/* internal procedure to double all quotes in	*/
						/* a "to be quoted" string.			*/

     dcl	string			char(*);

     dcl (i, j)			fixed bin;


     dcl	copied_string		char(length(string)*2) varying;

     dcl	string_begin		char(i-1) based (addr(string_array(j))),
	string_end		char(length(string)-(j-1)) based(addr(string_array(j))),
	string_array (length(string))	char(1) based (addr(string));

	i = search(string,"""");
	if i = 0 then return(string);
	j = 1;
	copied_string = "";
	do while (i > 0);
	     copied_string = copied_string || string_begin;
	     copied_string = copied_string || """""";
	     j = i+j;
	     i = search (string_end, """");
	     end;
	copied_string = copied_string || string_end;
	return (copied_string);


	end double_quotes;


	end string;
