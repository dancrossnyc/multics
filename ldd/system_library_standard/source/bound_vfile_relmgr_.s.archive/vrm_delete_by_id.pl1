/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

delete_tuples_by_id: proc (I_cursor_ptr, I_element_id_list_ptr, O_number_deleted, O_code);

/*                   BEGIN_DESCRIPTION

       Delete the tuples with the tuple ids supplied in the element_id_list.
       All indexed attribute keys associated with the tuple will also be deleted.
       The number of tuples deleted will be returned.
			         
                     END_DESCRIPTION		         */

/* HISTORY

   82-10-11 Roger Lackey : Initially written
   83-05-24 Roger Lackey: replaced call to record_status to get record_ptr
                          with call to vrmu_cv_vf_desc_to_ptr
   84-12-19 Thanh Nguyen : Added code to continue on the next tuple in case of
   the tuple was just deleted by another parallel process in share mode (by
   error code = mrds_error_$inconsistent_data_length) and stop the premature
   tuple_not_found.
*/
%page;
/* delete_tuples_by_id: proc (I_cursor_ptr, I_element_id_list_ptr, O_number_deleted, O_code); */


	dcl     I_element_id_list_ptr	 ptr parameter;	/* Id_list pointer */
	dcl     I_cursor_ptr	 ptr parameter;	/* Cursor pointer */
	dcl     O_number_deleted	 fixed bin (35) parameter; /* Number of tuples deleted */
	dcl     O_code		 fixed bin (35) parameter; /* Error code */

/* Init parameters */

	element_id_list_ptr = I_element_id_list_ptr;
	vrm_cursor_ptr = I_cursor_ptr;
	O_number_deleted = 0;
	O_code = 0;

	if vrm_cursor.switches.meter_sw then do;

		call cpu_time_and_paging_ (pf_1, t1, pf_dummy);
		vrm_meter_ptr = vrm_cursor.meter_ptr;
		vrm_meter.last_call_stats = 0;
	     end;

	file_locked = "0"b;

	on cleanup call tidy_up;			/* To besure file is unlocked */

	call init_delete;				/* Setup needed structures */

	do x = 1 to element_id_list.number_of_elements;	/* Delete a tuple at a time */

	     tid_ptr = addr (element_id_list.id (x));	/* Get pointer to input tuple_id (tid) */
	     vfd_ptr = addr (vfile_desc);

	     vfile_desc = 0;
	     vfd.comp_number = tid.comp_num;
	     vfd.comp_offset = tid.offset;


	     call delete_one_tuple (element_id_list.id (x), vfile_desc, vrm_cursor.iocb_ptr);
	     O_number_deleted = O_number_deleted + 1;
	end;

exit:	call tidy_up;
	return;
%page;
/*  * * * * * * * * * * * * *   delete_one_tuple    * * * * * * * * * * * */

delete_one_tuple: proc (I_tid, I_vf_desc, I_iocb_ptr);

	dcl     I_tid		 bit (36) aligned parameter; /* Tuple id of tuple to be deleted */
	dcl     I_vf_desc		 fixed bin (35);	/* Vfile descriptor of tuple to be deleted */
	dcl     I_iocb_ptr		 ptr parameter;	/* iocb_ptr */

	if vrm_cursor.shared then do;
		if vrm_cursor.opening_mode = KSQU then call lock; /* If sharing the file, lock the vfile while we delete everthing */
	     end;

%page;

	call vrmu_cv_vf_desc_to_ptr (I_iocb_ptr, I_vf_desc, tuple_ptr, rec_len, code);
	if code = 0 then do;			/* Located the record */

		bd_ptr = addr (tuple.data);

		do i = 1 to ksl_number_of_values;	/* Build the primary key from tuple attr values */


		     vrm_attr_info_ptr = addr (vrm_rel_desc.attr (vrm_open_info.primary_key_info_ptr -> vrm_collection_info.attribute (i).attr_index)); /* to attr info */
		     key_source_list.val_info.val_ptr (i) = addr (key_vals (i)); /* set source value ptr */
		     key_source_list.val_info.desc_ptr (i) = addr (vrm_attr_info.descriptor); /* and ptr to descr. */
		     if vrm_attr_info.varying then do;	/* if var. attr. */
			     offset = tuple.var_offsets (vrm_attr_info.bit_offset); /* bit offset */
			     key_source_list.val_info.val_ptr (i) = addr (bit_data (offset));
			end;			/* if varying */
		     else
			key_source_list.val_info.val_ptr (i) -> bit_str =
			     substr (data_str, vrm_attr_info.bit_offset, vrm_attr_info.bit_length);

		end;				/* Build primary key  list */


		call vrmu_encode_key (key_source_list_ptr, pri_key, (0), code);
		if code ^= 0 then call error (code);

/* Now finish up the header on the primary key */

		index_ptr = addrel (addr (pri_key), 1); /* past length word of varying string */
		index_value_length = 0;		/* save warning flag */
		index.rel_id = vrm_rel_desc.rel_id;
		index.index_id = "0"b;

		if vrm_rel_desc.switches.indexed then do; /* Build list of keys to be delete */
			call vrmu_build_index_list (vrm_rel_desc_ptr, vrm_open_info_ptr, tuple_ptr,
			     change_bits_ptr, key_list_ptr, code);

			if code = 0 then /* Delete the index keys for this record */
			     call vrmu_delete_indexes (I_iocb_ptr, key_list_ptr, I_tid, code);
			if code ^= 0 then call error (code);
		     end;

		call iox_$seek_key (I_iocb_ptr, pri_key, rec_len, code);
		if code = 0 then call iox_$delete_record (I_iocb_ptr, code);
		if code ^= 0 then call error (code);

	     end;
	else if code = mrds_error_$inconsistent_data_length
						/* Tuple is just deleted by other parallel process in share
	        mode.  So it is O.K. to set code to zero. */
	then code = 0;

	if file_locked then call unlock;		/* Unlock the file now that we are done */

	if code ^= 0 then do;
		if code = error_table_$no_record then code = dm_error_$no_tuple_id;
		call error (code);
	     end;

	if vrm_cursor.switches.meter_sw then
	     vrm_meter.last_call_stats.number_tuples_deleted =
		vrm_meter.last_call_stats.number_tuples_deleted + 1;

     end delete_one_tuple;
%page;
/* * * * * * * * * * * * * * * init_delete  * * * * * * * * * * * * * * * */

init_delete: proc;


	vrm_cursor.switches.shared = vrm_cursor.open_info_ptr -> vrm_open_info.switches.shared;

	if element_id_list.version ^= ELEMENT_ID_LIST_VERSION_1 then
	     call error (error_table_$unimplemented_version);

	vrm_open_info_ptr = vrm_cursor.open_info_ptr;
	vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;

	vrm_com_ptr = vrm_open_info.com_ptr;

	if vrm_com.mod_seg_ptr = null () then do;
		call get_temp_segment_ ("vrm_delete", vrm_com.mod_seg_ptr, code);
		if code ^= 0 then call error (code);
	     end;

/* Instead of allocating the structures are placed in the temp_seg and their 
   pointer calculated by the procedure so freeing does not have to be done */

	bit_len = 9 * vrm_rel_desc.maximum_data_length;
	cb_number_of_change_bits = vrm_rel_desc.number_attrs;
	ksl_number_of_values = vrm_open_info.primary_key_info_ptr ->
	     vrm_collection_info.number_of_attributes;

	key_list_ptr = vrm_com.mod_seg_ptr;		/* For any indexed attributers */
	key_list.number_of_keys = vrm_rel_desc.number_sec_indexes;

	i = currentsize (key_list);
	key_source_list_ptr = addrel (key_list_ptr, i + mod (i, 2)); /* For Primary key */
	key_source_list.number_of_values = ksl_number_of_values;

	i = currentsize (key_source_list);
	kv_ptr = addrel (key_source_list_ptr, i + mod (i, 2));

	i = currentsize (key_vals);
	change_bits_ptr = addrel (kv_ptr, i + mod (i, 2));
	change_bits.number_of_change_bits = cb_number_of_change_bits;

	if cb_number_of_change_bits <= 128 then
	     string (change_bits.position) = substr (all_ones, 1, cb_number_of_change_bits);
	else string (change_bits.position) = substr (all_ones || all_ones, 1, cb_number_of_change_bits);

     end init_delete;
%page;
/* * * * * * * * * * * * * *     lock   * * * * * * * * * * * * * * * *  */


lock: proc;

	call iox_$control (iocb_ptr, "set_file_lock", addr (LOCK), lock_err_code);
	if lock_err_code ^= 0 then call error (lock_err_code);

	file_locked = "1"b;

	if vrm_cursor.switches.meter_sw then
	     vrm_meter.last_call_stats.number_times_locked =
		vrm_meter.last_call_stats.number_times_locked + 1;


     end lock;







/* * * * * * * * * * * * * *     unlock   * * * * * * * * * * * * * * * *  */

unlock: proc;

	if file_locked then do;
		call iox_$control (iocb_ptr, "set_file_lock", addr (UNLOCK), lock_err_code);
		if lock_err_code ^= 0 then call error (lock_err_code);
	     end;

	file_locked = "0"b;

     end unlock;

%page;
/*  * * * * * * * * * * * * * * * *     error   * * * * * * * * * * * * * */

error: proc (cd);

	dcl     cd		 fixed bin (35) parameter; /* Error code */

	O_code = cd;
	goto exit;

     end error;

/* * * * * * * * * * * * * * * * *    tidy_up  * * * * * * * * * * * * *  */

tidy_up: proc;

	if file_locked then call iox_$control (iocb_ptr, "set_file_lock", addr (UNLOCK), code);

	if vrm_cursor.switches.meter_sw then do;
		call cpu_time_and_paging_ (pf_2, t2, pf_dummy);
		vrm_meter.last_call_stats.last_time_of_stats = clock;

		t3 = t2 - t1;
		vrm_meter.last_call_stats.vcpu_time = divide (t3, 1000000, 63);
		vrm_meter.last_call_stats.page_faults = pf_2 - pf_1;
		vrm_meter.last_call_stats.number_times_used = 1;
		vrm_meter.total_stats.last_time_of_stats = 0;
		vrm_meter.total_stats = vrm_meter.total_stats + vrm_meter.last_call_stats;

	     end;


     end tidy_up;
%page;
%include vrm_collection_info;
%page;
%include vrm_open_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_cursor;
%page;
%include vrm_com;
%page;
%include vrm_change_bits;
%page;
%include vrm_key_list;
%page;
%include vrm_tuple;
%page;
%include vrm_index;
%page;
%include vrm_key_source_list;
%page;
%include vrm_meter;
%page;
%include dm_element_id_list;

	dcl     1 tid		 aligned based (tid_ptr), /* MRDS tuple id (tid) */
		2 non_std_desc	 bit (1) unal,	/* Non-standard descriptor bit */
		2 temp		 bit (1) unal,	/* On if temp relation */
		2 file_id		 bit (7) unal,	/* File id from mrds db_model file_id_list */
		2 comp_num	 bit (10) unal,	/* Component number */
		2 offset		 bit (17) unal;	/* Offset within component */

	dcl     tid_ptr		 pointer;


	dcl     1 vfd		 aligned based (vfd_ptr), /* Vfile desc */
		2 pad_1		 bit (8) unal,
		2 comp_number	 bit (10) unal,	/* Component number */
		2 comp_offset	 bit (17) unal,	/* Offset with in component */
		2 pade_2		 bit (1) unal;

	dcl     vfd_ptr		 pointer;		/* Pointer to vfd structure */



%page;
	dcl     addr		 builtin;
	dcl     addrel		 builtin;
	dcl     all_ones		 bit (128) int static options (constant) init ((128)"1"b);
	dcl     bd_ptr		 ptr;
	dcl     bit_data		 (bit_len) bit (1) unal based (bd_ptr);
	dcl     bit_len		 fixed bin (35);
	dcl     bit_str		 bit (vrm_attr_info.bit_length) based;
	dcl     cleanup		 condition;
	dcl     clock		 builtin;
	dcl     code		 fixed bin (35);
	dcl     cpu_time_and_paging_	 entry (fixed bin, fixed bin (71), fixed bin);
	dcl     currentsize		 builtin;
	dcl     data_str		 bit (bit_len) based (bd_ptr);
	dcl     divide		 builtin;
	dcl     dm_error_$no_tuple_id	 fixed bin (35) ext static;
	dcl     error_table_$no_record fixed bin (35) ext static;
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     file_locked		 bit (1);
	dcl     fixed		 builtin;
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     i			 fixed bin;
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$delete_record	 entry (ptr, fixed bin (35));
	dcl     iox_$seek_key	 entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
	dcl     key_vals		 (ksl_number_of_values) char (vrm_data_$max_kattr_length) based (kv_ptr); /* to hold values so they are aligned */
	dcl     KSQU		 fixed bin int static options (constant) init (10);
	dcl     kv_ptr		 ptr;		/* ptr to key values */
	dcl     lock_err_code	 fixed bin (35);
	dcl     LOCK		 bit (2) aligned int static options (constant) init ("10"b);
	dcl     vrm_data_$max_kattr_length ext fixed bin (35);
	dcl     mrds_error_$inconsistent_data_length fixed bin (35) ext static;
	dcl     mod		 builtin;
	dcl     null		 builtin;
	dcl     offset		 fixed bin (35);	/* temp attr offset */
	dcl     pf_1		 fixed bin;
	dcl     pf_2		 fixed bin;
	dcl     pf_dummy		 fixed bin;
	dcl     pri_key		 char (256) var;	/* holds encoded primary key */
	dcl     rel		 builtin;
	dcl     string		 builtin;
	dcl     substr		 builtin;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     t1		 fixed bin (71);
	dcl     t2		 fixed bin (71);
	dcl     t3		 float bin (63);
	dcl     UNLOCK		 bit (2) aligned int static options (constant) init ("00"b);
	dcl     vrmu_build_index_list	 entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     vrmu_delete_indexes	 entry (ptr, ptr, bit (36) aligned, fixed bin (35));
	dcl     vrmu_encode_key	 entry (ptr, char (256) varying, fixed bin (35), fixed bin (35));
	dcl     x			 fixed bin (35);
	dcl     vfile_desc		 fixed bin (35) aligned;
	dcl     rec_len		 fixed bin (21);
	dcl     vrmu_cv_vf_desc_to_ptr entry (ptr, fixed bin (35), ptr, fixed bin (21), fixed bin (35));


     end delete_tuples_by_id;
