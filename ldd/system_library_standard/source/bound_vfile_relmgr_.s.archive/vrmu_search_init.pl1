/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

vrmu_search_init: proc (I_cursor_ptr, I_spec_ptr, O_code);


	dcl     I_cursor_ptr	 ptr parameter;	/* Pointer to vrm_cursor */
	dcl     I_spec_ptr		 ptr parameter;	/* Pointer to dm_relation_search_specification*/
	dcl     O_code		 fixed bin (35) parameter; /* Error code */

/*	          BEGIN_DESCRIPTION

    
    This module builds the vrm_search_list. It is called from vrm_get_by_spec
    to initialize for vrmu_search.

    If a relation_search_specification constriants are supplied they are
    translated to the vrm_search_list.   If a collection_id was supplied in the
    relation_search_specification and key attribute constraints are supplied 
    the vrm_search_list is optimized and setup for a seek_head (done in
    vrmu_search) is done.

    All key attribute constraints are compared to other constraints on
    the same attribute.  Inconsistent constraints cause the switch
    do_not_use_sw to be set.  Duplicate constraints are removed.

                    END_DESCRIPTION

    HISTORY:
    Written by Roger Lackey:
    83-10-01 Roger Lackey :  modified to handle multi attribute keys in 
                             seek headed setup.
    83-10-25 Roger Lackey : Added vrmu_scan_records$scan_records_init for the 
                            case where num_and_groups = 0; 
    84-06-11 Bert Moberg : Major rewrite to fix several problems including
         		       not using all of the available key head and a sort
		       loop that did not sort.
*/

/* vrmu_search_init: proc (I_cursor_ptr, I_spec_ptr, O_code); */


/* Init parameters */

	vrm_cursor_ptr = I_cursor_ptr;

	relation_search_specification_ptr = I_spec_ptr;
	O_code = 0;

/* Init local variables */

	vrm_open_info_ptr = vrm_cursor.open_info_ptr;
	vrm_com_ptr = vrm_open_info.com_ptr;
	vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;
	num_search_keys_used = 0;

/* Clean up old storage */
	if vrm_cursor.search_list_ptr ^= null then
	     free vrm_cursor.search_list_ptr -> vrm_search_list;
	vrm_cursor.search_list_ptr = null;

	if vrm_cursor.search_keys_ptr ^= null then
	     free vrm_cursor.search_keys_ptr -> search_keys;
	vrm_cursor.search_keys_ptr = null;

	if relation_search_specification_ptr = null then do;
	     vsl_number_of_and_groups = 0;
	     vsl_max_number_of_constraints = 0;

	     allocate vrm_search_list in (get_area) set (vrm_search_list_ptr);
	     vrm_cursor.search_list_ptr = vrm_search_list_ptr;

	     vrm_search_list.num_and_groups = vsl_number_of_and_groups;
	     vrm_search_list.max_num_constraints = vsl_max_number_of_constraints;
	end;

	else do;  /* relation_search_specification_ptr ^= null */
	     call vrmu_validate_spec (vrm_cursor_ptr,
		relation_search_specification_ptr,
		alloc_num_search_keys, code);
	     if code ^= 0 then call error (code);

	     if alloc_num_search_keys > 0 then do;
		allocate search_keys in (get_area) set (search_keys_ptr);
		vrm_cursor.search_keys_ptr = search_keys_ptr; ;
	     end;

	     vsl_number_of_and_groups = relation_search_specification.number_of_and_groups;
	     vsl_max_number_of_constraints = relation_search_specification.maximum_number_of_constraints;

	     allocate vrm_search_list in (get_area) set (vrm_search_list_ptr);
	     vrm_cursor.search_list_ptr = vrm_search_list_ptr;

	     vrm_search_list.num_and_groups = vsl_number_of_and_groups;
	     vrm_search_list.max_num_constraints = vsl_max_number_of_constraints;

	     do ag = 1 to relation_search_specification.number_of_and_groups; /* Look at all and groups */
		key_head_attr_exists = "0"b;
		call build_vrm_and_group;
		if collection_id_found then call validate_all_key_constraints;
		if key_head_attr_exists
		 & ^vrm_search_list.and_groups (ag).do_not_use_sw
		then call optimize_and_group;
	     end;

	end; /* relation_search_specification ^= null */

	if vrm_search_list.num_and_groups > 0 then
	     vrm_search_list.current_and_group = 1;
	else do;					/* It has to be scan_records type */
	     call vrmu_scan_records$scan_records_init (iocb_ptr, code);
	     if code ^= 0 then call error (code);
	     vrm_search_list.current_and_group = 0;
	end;

	if db_sw then call vrm_display_search_list$subroutine (vrm_cursor_ptr);

exit:	return;

build_vrm_and_group: proc;

/* Fill in the vrm_search_list with info from relation_search_specification from vrm_rel_desc */

	   vrm_search_list.and_groups (ag).num_cons_in_this_and_group =
	        relation_search_specification.and_group (ag).number_of_constraints;

	   vrm_search_list.and_groups (ag).seek_key_con_ix = 0;
	   vrm_search_list.and_groups (ag).do_not_use_sw = "0"b;

	   vrm_search_list.and_groups (ag).collection_id_supplied_sw =
	        relation_search_specification.and_group (ag).flags.collection_id_supplied;

	   vrm_search_list.and_groups (ag).collection_id =
	        relation_search_specification.and_group (ag).search_collection_id;

	   if vrm_search_list.and_groups (ag).num_cons_in_this_and_group > 0 then
	        vrm_search_list.and_groups (ag).must_initialize_sw = "1"b;
	   vrm_search_list.and_groups (ag).multi_attr_seek_head_sw = "0"b;
	   vrm_search_list.and_groups (ag).full_key_equal_only_sw = "0"b;

	   vrm_collection_info_ptr = null;
	   collection_id_found = "0"b;

	   if vrm_search_list.and_groups (ag).collection_id_supplied_sw then do;

	        if vrm_search_list.and_groups (ag).collection_id = "0"b then do; /* Primary key collection */
		   collection_id_found = "1"b;
		   vrm_collection_info_ptr = vrm_open_info.primary_key_info_ptr;
	        end;

	        else if vrm_search_list.and_groups (ag).collection_id = RELATION_COLLECTION_ID then do;
	        end;

 /* Since it is not the relation collection and it is not the primary key collect, it must be an index collection */
	        else do;
		   do i = 1 to vrm_open_info.number_of_index_collections while (^collection_id_found);
		        if vrm_search_list.and_groups (ag).collection_id =
			   vrm_open_info.index_collection (i).id then do;
			   collection_id_found = "1"b;
			   vrm_collection_info_ptr = vrm_open_info.index_collection (i).info_ptr;
		        end;
		   end;
		   if ^collection_id_found then do;
		        call sub_err_ (mrds_error_$internal_error,
			   "vrmu_search_init", ACTION_CANT_RESTART, null, 0,
			   "A collection_id was specified in the relation_search_specification that was not found in the relation.");
		   end;
	        end;	/* index collection id supplied */

	   end;  /* collection id supplied */

	   vrm_search_list.and_groups (ag).collection_info_ptr = vrm_collection_info_ptr;
	   key_cons_this_group = 0;

	   do c = 1 to relation_search_specification.and_group (ag).number_of_constraints;

	        if relation_search_specification.and_group (ag).constraint (c).value_ptr ^= null
	        then do;
		   call convert_one_constraint;
		   if collection_id_found then call check_for_key_attr;
	        end;
	        else call sub_err_ (mrds_error_$internal_error,
			   "vrmu_search_init", ACTION_CANT_RESTART, null, 0,
			   "A constraint was specified with a null value pointer");
	   end;
	   vrm_search_list.and_groups (ag).num_key_cons_in_this_and_group = key_cons_this_group;

     end build_vrm_and_group;

/* * * * * * * * * *   convert_one_constraint   * * * * * * * * * */

convert_one_constraint: proc;

	unspec (vrm_search_list.and_groups (ag).cons (c)) = "0"b; /* Zero everything */

	vrm_search_list.and_groups (ag).cons (c).valid_sw = "1"b;
	vrm_search_list.and_groups (ag).cons (c).val_ptr =
	     relation_search_specification.and_group (ag).constraint (c).value_ptr;

	x = relation_search_specification.and_group (ag).constraint (c).field_id;

	vrm_search_list.and_groups (ag).cons (c).attr_index = x;
	vrm_search_list.and_groups (ag).cons (c).attr_desc_ptr = addr (vrm_rel_desc.attr (x).descriptor);
	vrm_search_list.and_groups (ag).cons (c).attr_bit_length = vrm_rel_desc.attr (x).bit_length;

	vrm_search_list.and_groups (ag).cons (c).encoded_key_ptr = null;

	vrm_search_list.and_groups (ag).cons (c).operator =
	     relation_search_specification.and_group (ag).constraint (c).operator_code;

	vrm_search_list.and_groups (ag).cons (c).key_attr_sw = "0"b;	/* Until we know better */

	return;

     end convert_one_constraint;

/* * * * * * * * * * * * * * *   check_for_key_attr  * * * * * * * * * *   */

check_for_key_attr: proc;

	key_attr_found = "0"b;

	do cx = 1 to vrm_collection_info.number_of_attributes while (^key_attr_found);

	     if relation_search_specification.and_group (ag).constraint (c).field_id =
		vrm_collection_info.attribute (cx).attr_index
	     then do; /* It is a key attribute */

		key_attr_found = "1"b;

		key_cons_this_group = key_cons_this_group + 1;
		vrm_search_list.and_groups (ag).cons (c).key_attr_sw = "1"b;
		vrm_search_list.and_groups (ag).cons (c).attr_position_in_key = cx;

		if vrm_collection_info.attribute (cx).key_offset = 0 then do;
		     vrm_search_list.and_groups (ag).cons (c).key_head_sw = "1"b;
		     key_head_attr_exists = "1"b;

		     if vrm_search_list.and_groups (ag).cons (c).operator < 4 then
			vrm_search_list.and_groups (ag).cons (c).seek_head_sw = "1"b;
		end;

		vrm_search_list.and_groups (ag).cons (c).key_offset =
		     vrm_collection_info.attribute (cx).key_offset;

		vrm_search_list.and_groups (ag).cons (c).key_bit_length =
		     vrm_collection_info.attribute (cx).key_bit_len;

		num_search_keys_used = num_search_keys_used + 1;

		call vrmu_encode_key$encode_attr
		     ((relation_search_specification.and_group (ag).constraint (c).value_ptr),
		     addr (vrm_rel_desc.attr (relation_search_specification.and_group (ag).constraint (c).field_id).descriptor),
		     search_keys (num_search_keys_used), code);

		if code ^= 0 then call error (code);

		vrm_search_list.and_groups (ag).cons (c).search_keys_ix = num_search_keys_used;

		vrm_search_list.and_groups (ag).cons (c).encoded_key_ptr =
		     addrel (addr (search_keys (num_search_keys_used)), 1);
		vrm_search_list.and_groups (ag).cons (c).encoded_key_length =
		     length (search_keys (num_search_keys_used));

	     end; /* Found key attribute */

	end; /* Look for key attribute */

	if key_attr_found then do;

/* if the key constraint is not at the begining of the constraint list, put it there */
	     if c ^= key_cons_this_group then call switch_constraints (c, key_cons_this_group, switched);

/* Sort the key constraints in order by their position within the key */
/* If the attributes are in the same position, sort by operator */
	     switched = "1"b;
	     do cx = key_cons_this_group - 1 to 1 by -1 while (switched);
		switched = "0"b;
		/* if position in key wrong */
		if vrm_search_list.and_groups (ag).cons (cx).attr_position_in_key >
		     vrm_search_list.and_groups (ag).cons (cx + 1).attr_position_in_key
		     then call switch_constraints (cx, cx + 1, switched);
		/* else if position in key right, but operators in wrong order */
		else if vrm_search_list.and_groups (ag).cons (cx).attr_position_in_key =
		     vrm_search_list.and_groups (ag).cons (cx + 1).attr_position_in_key
		   & vrm_search_list.and_groups (ag).cons (cx).operator >
		     vrm_search_list.and_groups (ag).cons (cx + 1).operator
		     then call switch_constraints (cx, cx + 1, switched);
	     end; /* sort loop */

	end;

     end check_for_key_attr;

/* * * * * * * * * * * * * * *   validate_all_key_constraints  * * * * * * * * * *   */

validate_all_key_constraints: proc;

	c1 = 1;
	do while (c1 < vrm_search_list.and_groups (ag).num_key_cons_in_this_and_group);

retry_c2:	     do c2 = c1 + 1 to vrm_search_list.and_groups (ag).num_key_cons_in_this_and_group;

/* If the current two constraints are on the sma attribute, cross validate them */
		if vrm_search_list.and_groups (ag).cons (c1).attr_position_in_key
		 = vrm_search_list.and_groups (ag).cons (c2).attr_position_in_key then do;
		     call validate_constraints (c1, c2, action);
		     go to perform (action);

		/* keep both constraints */
perform (1):	     goto next_c2;

		/* remove first constraint */
perform (2):	     call remove_key_constraint (c1);
		     goto retry_c2;

		/* remove second constraint */
perform (3):	     call remove_key_constraint (c2);
		     goto retry_c2;

		/* remove second constraint and make first constraint equals operator */
perform (4):	     call remove_key_constraint (c2);
		     vrm_search_list.and_groups (ag).cons (c1).operator = 1;
		     goto retry_c2;

		/* kill and group */
perform (5):	     vrm_search_list.and_groups (ag).do_not_use_sw = "1"b;
		     return;

		end;	/* Two constraints on same attribute */

next_c2:
	     end;		/* do while more attributes with same position */

	     c1 = c1 + 1;
	end;	/* do while more attributes in key */


     end validate_all_key_constraints;

/* * * * * * * * * * * * * * *   validate_constraints  * * * * * * * * * *   */
validate_constraints: proc (con_1, con_2, action);

/* This procedure cross validates two constraints within an and group  */
/* This procedure assumes that con_1 < con_2 and
   cons (con_1).operator <= cons (con_2).operator	*/

	dcl     con_1		 fixed bin parameter; /* First constraint */
	dcl     con_2		 fixed bin parameter; /* Second constaint */
	dcl     action		 fixed bin parameter;

	goto first_op (vrm_search_list.and_groups (ag).cons (con_1).operator);

/* If first operator is equals, then if this value meets the second constraint,
   the second constraint is not needed.  If it does not meet the second
   constraint, the and group will never match */

first_op (1):	/* op1 is =, op2 is ? */
	if key_compare (con_1, (vrm_search_list.and_groups (ag).cons (con_2).operator), con_2) then
	     action = REMOVE_B;
	else action = KILL_AND_GROUP;
	return;

first_op (2):	/* op1 is >, op2 is ? */
	goto first_op_greater (vrm_search_list.and_groups (ag).cons (con_2).operator);

first_op_greater (2):	/* op1 is >, op2 is > */
	if key_compare (con_1, LESS_OPERATOR_CODE, con_2) then
	     action = REMOVE_A;
	else action = REMOVE_B;
	return;

first_op_greater (3):	/* op1 is >, op2 is >= */
	if key_compare (con_1, LESS_OPERATOR_CODE, con_2) then
	     action = REMOVE_A;
	else action = REMOVE_B;
	return;

first_op_greater (4):	/* Not used */
	goto bad_code;

first_op_greater (5):	/* op1 is >, op2 is ^= */
	if key_compare (con_1, LESS_OPERATOR_CODE, con_2) then
	     action = KEEP_BOTH;
	else action = REMOVE_B;
	return;

first_op_greater (6):	/* op1 is >, op2 is <= */
	if key_compare (con_1, LESS_OPERATOR_CODE, con_2) then
	     action = KEEP_BOTH;
	else action = KILL_AND_GROUP;
	return;

first_op_greater (7):	/* op1 is >, op2 is < */
	if key_compare (con_1, LESS_OPERATOR_CODE, con_2) then
	     action = KEEP_BOTH;
	else action = KILL_AND_GROUP;
	return;

first_op (3):	/* op1 is >=, op2 is ? */
	goto first_op_greater_or_equal (vrm_search_list.and_groups (ag).cons (con_2).operator);

first_op_greater_or_equal (3):	/* op1 is >=, op2 is >= */
	if key_compare (con_1, LESS_OPERATOR_CODE, con_2) then
	     action = REMOVE_A;
	else action = REMOVE_B;
	return;

first_op_greater_or_equal (4):	/* Not used */
	goto bad_code;

first_op_greater_or_equal (5):	/* op1 is >=, op2 is ^= */
	if key_compare (con_1, LESS_OR_EQUAL_OPERATOR_CODE, con_2) then
	     action = KEEP_BOTH;
	else action = REMOVE_B;
	return;

first_op_greater_or_equal (6):	/* op1 is >=, op2 is <= */
	if key_compare (con_1, LESS_OPERATOR_CODE, con_2) then
	     action = KEEP_BOTH;
	else if key_compare (con_1, EQUAL_OPERATOR_CODE, con_2) then
	     action = REMOVE_B_MAKE_A_EQUALS;
	else action = KILL_AND_GROUP;
	return;

first_op_greater_or_equal (7):	/* op1 is >, op2 is < */
	if key_compare (con_1, LESS_OPERATOR_CODE, con_2) then
	     action = KEEP_BOTH;
	else action = KILL_AND_GROUP;
	return;

first_op (4):	/* Not used */
bad_code: call sub_err_ (mrds_error_$internal_error,
	     "vrmu_search_init", ACTION_CANT_RESTART, null, 0,
	     "A constraint was specified with an invalid operation code");

first_op (5):	/* op1 is ^=, op2 is ? */
	goto first_op_not_equal (vrm_search_list.and_groups (ag).cons (con_2).operator);

first_op_not_equal (5):	/* op1 is ^=, op2 is ^= */
	if key_compare (con_1, NOT_EQUAL_OPERATOR_CODE, con_2) then
	     action = KEEP_BOTH;
	else action = REMOVE_B;
	return;

first_op_not_equal (6):	/* op1 is ^=, op2 is <= */
	if key_compare (con_1, LESS_OR_EQUAL_OPERATOR_CODE, con_2) then
	     action = KEEP_BOTH;
	else action = REMOVE_A;
	return;

first_op_not_equal (7):	/* op1 is ^=, op2 is < */
	if key_compare (con_1, LESS_OPERATOR_CODE, con_2) then
	     action = KEEP_BOTH;
	else action = REMOVE_A;
	return;

first_op (6):	/* op1 is <=, op2 is ? */
	goto first_op_less_or_equal (vrm_search_list.and_groups (ag).cons (con_2).operator);

first_op_less_or_equal (6):	/* op1 is <=, op2 is <= */
	if key_compare (con_1, GREATER_OPERATOR_CODE, con_2) then
	     action = REMOVE_A;
	else action = REMOVE_B;
	return;

first_op_less_or_equal (7):	/* op1 is <=, op2 is < */
	if key_compare (con_1, GREATER_OR_EQUAL_OPERATOR_CODE, con_2) then
	     action = REMOVE_A;
	else action = REMOVE_B;
	return;

first_op (7):	/* op1 is <, op2 is < */
	if key_compare (con_1, GREATER_OPERATOR_CODE, con_2) then
	     action = REMOVE_A;
	else action = REMOVE_B;
	return;

     end validate_constraints;

/*    * * * * * * * * * * * * *     key_compare    * * * * * * * * * * * *   */

/* Compares two key values using one of six operators */

key_compare: proc (con_1, operator, con_2) returns (bit (1));

	dcl     con_1		 fixed bin parameter; /* First constraint */
	dcl     con_2		 fixed bin parameter; /* Second constaint */
	dcl     operator		 fixed bin (17) parameter; /* Comparison operator */

	dcl     key_one_ptr		 ptr;		  /* Pointer to first key value */
	dcl     key_two_ptr		 ptr;		  /* Pointer to second key value */
	dcl     key_len		 fixed bin (17);	  /* Length of both key values in bits */

	dcl     key_one		 bit (key_len) based (key_one_ptr);
	dcl     key_two		 bit (key_len) based (key_two_ptr);

	key_one_ptr = vrm_search_list.and_groups (ag).cons (con_1).encoded_key_ptr;
	key_two_ptr = vrm_search_list.and_groups (ag).cons (con_2).encoded_key_ptr;
	key_len = vrm_search_list.and_groups (ag).cons (con_1).key_bit_length;

	goto k_compare (operator);

k_compare (1):					/* Operator:  =  */
	if key_one = key_two then return ("1"b);
	else return ("0"b);

k_compare (2):					/* Operator:  >  */
	if key_one > key_two then return ("1"b);
	else return ("0"b);

k_compare (3):					/* Operator:  >=  */
	if key_one >= key_two then return ("1"b);
	else return ("0"b);

k_compare (5):					/* Operator:  ^=  */
	if key_one ^= key_two then return ("1"b);
	else return ("0"b);

k_compare (6):					/* Operator:  <=  */
	if key_one <= key_two then return ("1"b);
	else return ("0"b);

k_compare (7):					/* Operator:  <  */
	if key_one < key_two then return ("1"b);
	else return ("0"b);

     end key_compare;

/* * * * * * * * * * * * * * *   remove_key_constraint  * * * * * * * * * *   */
remove_key_constraint: proc (con);

	dcl     con		 fixed bin parameter; /* constraint to remove */
	dcl     cx		 fixed bin;
	dcl     switched		 bit (1) aligned;

	do cx = con to vrm_search_list.and_groups (ag).num_cons_in_this_and_group - 1;
	     call switch_constraints (cx, cx + 1, switched);
	end;

	vrm_search_list.and_groups (ag).num_cons_in_this_and_group =
	     vrm_search_list.and_groups (ag).num_cons_in_this_and_group - 1;
	vrm_search_list.and_groups (ag).num_key_cons_in_this_and_group =
	     vrm_search_list.and_groups (ag).num_key_cons_in_this_and_group - 1;

	return;

     end remove_key_constraint;

/* * * * * * * * * * * * * * *   optimize_and_group  * * * * * * * * * *   */
optimize_and_group: proc;

	done_sw = "0"b;
	last_op_was_equal = "0"b;
	next_key_pos = 1;
	num_seek_head_attr = 0;

	do c = 1 to vrm_search_list.and_groups (ag).num_key_cons_in_this_and_group while (^done_sw);

	     if vrm_search_list.and_groups (ag).cons (c).attr_position_in_key ^= next_key_pos then
		done_sw = "1"b;
	     else do;

		last_op_was_equal = "0"b;
		/* operator is = */
		if vrm_search_list.and_groups (ag).cons (c).operator = 1 then do;
		     last_op_was_equal = "1"b;
		     next_key_pos = next_key_pos + 1;
		     num_seek_head_attr = num_seek_head_attr + 1;
		     vrm_search_list.and_groups (ag).cons (c).and_group_search_terminator = "1"b;
		     vrm_search_list.and_groups (ag).cons (c).seek_head_sw = "1"b;
		end;
		/* operator is > or >= */
		else if vrm_search_list.and_groups (ag).cons (c).operator < 4 then do;
		     vrm_search_list.and_groups (ag).cons (c).seek_head_sw = "1"b;
		     num_seek_head_attr = num_seek_head_attr + 1;
		end;
		/* operator is < or <= */
		else if vrm_search_list.and_groups (ag).cons (c).operator > 5 then do;
		     vrm_search_list.and_groups (ag).cons (c).and_group_search_terminator = "1"b;
		     done_sw = "1"b;
		end;

	     end;		/* attribute in right position */

	end;	/* loop over all attributes */

	if last_op_was_equal then do;
	     if vrm_collection_info.unique & num_seek_head_attr = vrm_collection_info.number_of_attributes then
		vrm_search_list.and_groups (ag).full_key_equal_only_sw = "1"b;
	end;

/* See if a bad key attribute exist in key_head
   One that cannot be character aligned */
	if num_seek_head_attr < vrm_collection_info.number_of_attributes then do;

	     done_sw = "0"b;
	     do x = num_seek_head_attr to 1 by -1 while (^done_sw);
		/* if the next key attribute does not start on a character
		     position, we must back up on */
		if mod (vrm_collection_info.attribute (x + 1).key_offset, 9) ^= 0 then do;
		     vrm_search_list.and_groups (ag).cons (x).seek_head_sw = "0"b;
		     vrm_search_list.and_groups (ag).cons (x).and_group_search_terminator = "0"b;
		     num_seek_head_attr = num_seek_head_attr - 1;
		end;
		else done_sw = "1"b;
	     end;
	end;

	vrm_search_list.and_groups (ag).seek_key_con_ix = num_seek_head_attr;
	vrm_search_list.and_groups (ag).num_seek_key_attr_count = num_seek_head_attr;
	if num_seek_head_attr > 1 then do;
	     vrm_search_list.and_groups (ag).multi_attr_seek_head_sw = "1"b;
	end;

     end optimize_and_group;

/* * * * * * * * * * * * *     switch_constraints   * * * * * * * * * *    */

switch_constraints: proc (con_1, con_2, switched_flag);

/* This procedure switches constraint info with in an and group 
   moving first constraint to seconds position and visa-versa          */

	dcl     con_1		 fixed bin parameter; /* First constraint */
	dcl     con_2		 fixed bin parameter; /* Second constaint */
	dcl     switched_flag	 bit (1) aligned parameter;

	switched_flag = "1"b;

	temp_constraint_info = vrm_search_list.and_groups (ag).cons (con_1);

	vrm_search_list.and_groups (ag).cons (con_1) =
	     vrm_search_list.and_groups (ag).cons (con_2);

	vrm_search_list.and_groups (ag).cons (con_2) = temp_constraint_info;

     end switch_constraints;

/* * * * * * * * * * * * * * * * * * *     error   * * * * * * * * * * * *  */


error: proc (cd);

	dcl     cd		 fixed bin (35) parameter;

	O_code = cd;
	goto exit;

     end error;





db_on: entry;
	db_sw = "1"b;
	return;


db_off: entry;
	db_sw = "0"b;
	return;

%include dm_operator_constants;
%page;
%include dm_relation_spec;
%page;
%include dm_specification_head;
%page;
%include vrm_search_list;
%page;
%include vrm_cursor;
%page;
%include vrm_open_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_collection_info;
%page;
%include vrm_meter;
%page;
%include vrm_com;
%page;
%include sub_err_flags;
%page;

	dcl     1 temp_constraint_info like constraint_info aligned;

	dcl    (KEEP_BOTH			init (1),
	        REMOVE_A			init (2),
	        REMOVE_B			init (3),
	        REMOVE_B_MAKE_A_EQUALS	init (4),
	        KILL_AND_GROUP		init (5))
	             fixed bin internal static options (constant);

	dcl     action		 fixed bin;
	dcl     addr		 builtin;
	dcl     addrel		 builtin;
	dcl     ag		 fixed bin;
	dcl     switched		 bit (1) aligned;
	dcl     c			 fixed bin;
	dcl     c1		 fixed bin;
	dcl     c2		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     collection_id_found	 bit (1) aligned;
	dcl     cx		 fixed bin;
	dcl     db_sw		 bit (1) int static init ("0"b);
	dcl     done_sw		 bit (1) aligned;
	dcl     fixed		 builtin;
	dcl     get_area		 area (sys_info$max_seg_size) based (vrm_com.get_seg_ptr);
	dcl     i			 fixed bin;
	dcl     key_attr_found	 bit (1) aligned;
	dcl     key_head_attr_exists	 bit (1) aligned;
	dcl     last_op_was_equal	 bit (1) aligned;
	dcl     length		 builtin;
	dcl     mod		 builtin;
	dcl     mrds_error_$internal_error fixed bin (35) ext static;
	dcl     null		 builtin;
	dcl     num_search_keys_used	 fixed bin;
	dcl     num_seek_head_attr	 fixed bin;
	dcl     rel		 builtin;
	dcl     RELATION_COLLECTION_ID bit (36) int static options (constant) init ("111111111111111111111111111111111111"b);
	dcl     sub_err_		 entry () options (variable);
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     unspec		 builtin;
	dcl     vrmu_encode_key$encode_attr entry (ptr, ptr, char (*) var, fixed bin (35));
	dcl     vrmu_scan_records$scan_records_init entry (ptr, fixed bin (35));
	dcl     vrmu_validate_spec	 entry (ptr, ptr, fixed bin, fixed bin (35));
	dcl     vrm_display_search_list$subroutine entry (ptr);
	dcl     x			 fixed bin;
	dcl     key_cons_this_group	 fixed bin;
	dcl     next_key_pos	 fixed bin;

     end vrmu_search_init;
