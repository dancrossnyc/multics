/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

vrm_put_tuple: put_tuple: proc (I_relation_cursor_ptr, I_typed_vector_ptr, O_element_id, O_code);

/* .	         BEGIN_DESCRIPTION

   Put a tuple into the relation specified by I_relation_cursor_ptr
   and update all of the indices for that relation to reflect the presence
   of the new tuple.

   .	         END_DESCRIPTION	         */

/* History:

   82-09-15  R. Harvey:  Originally written from mu_store.



/****^  HISTORY COMMENTS:
  1) change(86-07-17,Dupuis), approve(86-08-07,MCR7491),
     audit(86-08-07,Gilcrease), install(86-08-15,MR12.0-1127):
     Changed the calling sequence of vrm_put_tuples to have the correct number
     of parameters. Changed a loop counter that this entrypoint uses.
                                                   END HISTORY COMMENTS */

%page;
/* vrm_put_tuple: put_tuple: proc (I_relation_cursor_ptr, I_typed_vector_ptr, O_element_id, O_code); */

/* Parameters */

	dcl     I_relation_cursor_ptr	 ptr;
	dcl     I_typed_vector_ptr	 ptr;
	dcl     O_element_id	 bit (36) aligned;
	dcl     O_code		 fixed bin (35);


	simple_typed_vector_ptr, general_typed_vector_ptr = I_typed_vector_ptr;
	vrm_cursor_ptr = I_relation_cursor_ptr;
	O_element_id = "0"b;
	O_code = 0;
	file_locked = "0"b;

	on cleanup call tidy_up;

	if vrm_cursor.switches.meter_sw then do;

		call cpu_time_and_paging_ (pf_1, t1, pf_dummy);
		vrm_meter_ptr = vrm_cursor.meter_ptr;
		vrm_meter.last_call_stats = 0;
	     end;


	if simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE
	then simple_vector = "1"b;
	else simple_vector = "0"b;

	call init_put;


	call put_one_tuple (simple_typed_vector_ptr, O_element_id);

	O_code = 0;
Exit:	call tidy_up;
	return;



vrm_put_tuples: put_tuples: entry (I_relation_cursor_ptr, I_typed_vector_list_ptr, I_element_id_list_ptr, O_number_put, O_code);

/*  Parameters */

/*	dcl     I_relation_cursor_ptr  ptr parameter;	      */

	dcl     I_typed_vector_list_ptr ptr parameter;

	dcl     I_element_id_list_ptr	 ptr parameter;
	dcl     O_number_put           fixed bin (35) parameter;
		        
/*	dcl     O_code		 fixed bin (35) parameter;	      */


	O_code, O_number_put = 0;
	file_locked = "0"b;

	on cleanup call tidy_up;

	if vrm_cursor.switches.meter_sw then do;

		call cpu_time_and_paging_ (pf_1, t1, pf_dummy);
		vrm_meter_ptr = vrm_cursor.meter_ptr;
		vrm_meter.last_call_stats = 0;
	     end;

	typed_vector_list_ptr = I_typed_vector_list_ptr;
	vrm_cursor_ptr = I_relation_cursor_ptr;
	if typed_vector_list.version ^= TYPED_VECTOR_LIST_VERSION_1
	then call error (error_table_$unimplemented_version);
	element_id_list_ptr = I_element_id_list_ptr;
	if element_id_list.version ^= ELEMENT_ID_LIST_VERSION_1
	then call error (error_table_$unimplemented_version);

	call init_put;

	do vpt_index = 1 to typed_vector_list.number_of_vectors;
	     call put_one_tuple (typed_vector_list.vector_ptr (vpt_index), element_id_list.id (vpt_index));
	     O_number_put = O_number_put + 1;
	end;

	O_code = 0;
	go to Exit;
%page;
init_put: proc;

	vrm_open_info_ptr = vrm_cursor.open_info_ptr;

	vrm_cursor.switches.shared = vrm_open_info.switches.shared;

	vrm_rel_desc_ptr = vrm_open_info.relation_model_ptr;
	vrm_com_ptr = vrm_open_info.com_ptr;

	if vrm_com.put_seg_ptr = null () then do;
		call get_temp_segment_ ("vrm_put", vrm_com.put_seg_ptr, code);
		if code ^= 0 then call error (code);
	     end;					/* then do */
	temp_seg_ptr = vrm_com.put_seg_ptr;

/* Initialize values for structures in the temp seg */

	bit_len = 9 * vrm_rel_desc.maximum_data_length;
	cb_number_of_change_bits = vrm_rel_desc.number_attrs;
	ksl_number_of_values = vrm_rel_desc.number_primary_key_attrs;

	key_list_ptr = temp_seg_ptr;
	key_list.number_of_keys = vrm_rel_desc.number_sec_indexes;

	i = currentsize (key_list);
	key_source_list_ptr = addrel (key_list_ptr, i + mod (i, 2));
	key_source_list.number_of_values = ksl_number_of_values;

	i = currentsize (key_source_list);
	kv_ptr = addrel (key_source_list_ptr, i + mod (i, 2));

	i = currentsize (key_vals);
	change_bits_ptr = addrel (kv_ptr, i + mod (i, 2));
	change_bits.number_of_change_bits = cb_number_of_change_bits;

	i = currentsize (change_bits);
	tuple_ptr = addrel (change_bits_ptr, i + mod (i, 2));

	if cb_number_of_change_bits <= 128 then
	     string (change_bits.position) = substr (all_ones, 1, cb_number_of_change_bits);
	else string (change_bits.position) = substr (all_ones || all_ones, 1, cb_number_of_change_bits);

     end init_put;
%page;
put_one_tuple: proc (I_typed_vector_ptr, O_mrds_id);

/* Parameters */

	dcl     I_typed_vector_ptr	 ptr parameter;
	dcl     O_mrds_id		 bit (36) aligned parameter;


	call vrmu_cv_vector_to_tuple (vrm_rel_desc_ptr, tuple_ptr, I_typed_vector_ptr, "0"b /* NOT mod */, tuple_length, code);
	if code ^= 0 then call error (code);

	bd_ptr = addr (tuple.data);

	do i = 1 to ksl_number_of_values;		/* copy out values and build key source list */
	     vrm_attr_info_ptr = addr (vrm_rel_desc.attr (vrm_open_info.primary_key_info_ptr -> vrm_collection_info.attribute (i).attr_index)); /* to attr info */
	     key_source_list.val_info.val_ptr (i) = addr (key_vals (i)); /* set source value ptr */
	     key_source_list.val_info.desc_ptr (i) = addr (vrm_attr_info.descriptor); /* and ptr to descr. */
	     if vrm_attr_info.varying then do;		/* if var. attr. */
		     offset = tuple.var_offsets (vrm_attr_info.bit_offset); /* bit offset */
		     key_source_list.val_info.val_ptr (i) = addr (bit_data (offset));
		end;				/* if varying */
	     else
		key_source_list.val_info.val_ptr (i) -> bit_str =
		     substr (data_str, vrm_attr_info.bit_offset, vrm_attr_info.bit_length);
	end;					/* building key source list */


	call vrmu_encode_key (key_source_list_ptr, pri_key, (0), code);
	if code ^= 0 then call error (code);

/* Now finish up the header on the primary key */

	index_ptr = addrel (addr (pri_key), 1);		/* past length word of varying string */
	index_value_length = 0;			/* save warning flag */
	index.rel_id = vrm_rel_desc.rel_id;
	index.index_id = "0"b;

/* Initialize the key list */

	if vrm_rel_desc.switches.indexed then do;
		call vrmu_build_index_list (vrm_rel_desc_ptr, vrm_open_info_ptr, tuple_ptr, change_bits_ptr, key_list_ptr, code);
		if code ^= 0 then call error (code);
	     end;					/* indexed */

	if vrm_cursor.switches.shared & vrm_cursor.opening_mode = KSQU then call lock; /* Lock file wile we add tuple */

	call vrmu_add_tuple (vrm_rel_desc_ptr, vrm_cursor.iocb_ptr, addr (pri_key), tuple_id, tuple_ptr, tuple_length, tt_ptr, code);
	if code ^= 0 then call error (code);


	if vrm_rel_desc.switches.indexed then do;	/* add indexes if necess. */
		call vrmu_add_indexes (vrm_cursor.iocb_ptr, key_list_ptr, tuple_id, code);
		if code ^= 0 then call error (code);
	     end;					/* adding indexes */
	if file_locked then call unlock;

	O_mrds_id = tuple_id;

	if vrm_cursor.switches.meter_sw then
	     vrm_meter.last_call_stats.number_tuples_stored =
		vrm_meter.last_call_stats.number_tuples_stored + 1;

     end put_one_tuple;
%page;
error: proc (ecode);
	dcl     ecode		 fixed bin (35);
	O_code = ecode;
	goto Exit;
     end error;



/* * * * * * * * * * * * * * * * * * *   tidy_up   * * * * * * * * * * *  */

tidy_up: proc;

	if file_locked then call iox_$control (iocb_ptr, "set_file_lock", addr (UNLOCK), code);

	if vrm_cursor.switches.meter_sw then do;
		call cpu_time_and_paging_ (pf_2, t2, pf_dummy);
		vrm_meter.last_call_stats.last_time_of_stats = clock;

		t3 = t2 - t1;
		vrm_meter.last_call_stats.vcpu_time = divide (t3, 1000000, 63);
		vrm_meter.last_call_stats.page_faults = pf_2 - pf_1;
		vrm_meter.last_call_stats.number_times_used = 1;
		vrm_meter.total_stats.last_time_of_stats = 0;
		vrm_meter.total_stats = vrm_meter.total_stats + vrm_meter.last_call_stats;

	     end;


     end tidy_up;
%page;
/* * * * * * * * * * * * * *     lock   * * * * * * * * * * * * * * * *  */


lock: proc;

	call iox_$control (iocb_ptr, "set_file_lock", addr (LOCK), code);
	if code ^= 0 then call error (code);

	file_locked = "1"b;

	if vrm_cursor.switches.meter_sw then
	     vrm_meter.last_call_stats.number_times_locked =
		vrm_meter.last_call_stats.number_times_locked + 1;


     end lock;







/* * * * * * * * * * * * * *     unlock   * * * * * * * * * * * * * * * *  */

unlock: proc;

	if file_locked then do;
		call iox_$control (iocb_ptr, "set_file_lock", addr (UNLOCK), code);
		if code ^= 0 then call error (code);
	     end;

	file_locked = "0"b;

     end unlock;

%page;
%include vu_typed_vector;
%page;
%include dm_typed_vector_list;
%page;
%include dm_element_id_list;
%page;
%include vrm_open_info;
%page;
%include vrm_collection_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_com;
%page;
%include vrm_cursor;
%page;
%include vrm_tuple;
%page;
%include vrm_index;
%page;
%include vrm_key_source_list;
%page;
%include vrm_key_list;
%page;
%include vrm_change_bits;
%page;
%include vrm_meter;
%page;
	dcl     1 rs,				/* Record_status_info */
		2 version		 fixed bin init (2),
		2 flags		 aligned,
		  3 lock_sw	 bit (1) unal init ("0"b),
		  3 unlock_sw	 bit (1) unal init ("0"b),
		  3 create_sw	 bit (1) unal init ("0"b),
		  3 locate_sw	 bit (1) unal init ("1"b), /* Only switch on */
		  3 inc_ref_count	 bit (1) unal init ("0"b),
		  3 dec_ref_count	 bit (1) unal init ("0"b),
		  3 locate_pos_sw	 bit (1) unal init ("0"b),
		  3 mbz1		 bit (29) unal init ("0"b),
		2 record_length	 fixed bin (21) init (0),
		2 max_rec_len	 fixed bin (21) init (0),
		2 record_ptr	 pointer init (null),
		2 descriptor	 fixed bin (35),
		2 ref_count	 fixed bin (34),
		2 time_last_modified fixed bin (71),
		2 modifier	 fixed bin (35),
		2 block_ptr	 pointer ptr unal,
		2 last_image_modifier fixed bin (35),
		2 mbz2		 fixed bin init (0);


	dcl     addr		 builtin;
	dcl     addrel		 builtin;
	dcl     all_ones		 bit (128) int static options (constant) init ((128)"1"b);
	dcl     bd_ptr		 ptr;
	dcl     bit_data		 (bit_len) bit (1) unal based (bd_ptr);
	dcl     bit_len		 fixed bin (35);
	dcl     bit_str		 bit (vrm_attr_info.bit_length) based;
	dcl     cleanup		 condition;
	dcl     clock		 builtin;
	dcl     code		 fixed bin (35);
	dcl     cpu_time_and_paging_	 entry (fixed bin, fixed bin (71), fixed bin);
	dcl     currentsize		 builtin;
	dcl     data_str		 bit (bit_len) based (bd_ptr);
	dcl     divide		 builtin;
	dcl     file_locked		 bit (1);
	dcl     fixed		 builtin;
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     i			 fixed bin (17);
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     key_vals		 (ksl_number_of_values) char (vrm_data_$max_kattr_length) based (kv_ptr); /* to hold values so they are aligned */
	dcl     KSQU		 fixed bin int static options (constant) init (10);
	dcl     kv_ptr		 ptr;		/* ptr to key values */
	dcl     LOCK		 bit (2) aligned int static options (constant) init ("10"b);
	dcl     mod		 builtin;
	dcl     null		 builtin;
	dcl     offset		 fixed bin (35);	/* temp attr offset */
	dcl     pf_1		 fixed bin;
	dcl     pf_2		 fixed bin;
	dcl     pf_dummy		 fixed bin;
	dcl     pri_key		 char (256) var;	/* holds encoded primary key */
	dcl     rel		 builtin;
	dcl     simple_vector	 bit (1) aligned;
	dcl     string		 builtin;
	dcl     substr		 builtin;
	dcl     t1		 fixed bin (71);
	dcl     t2		 fixed bin (71);
	dcl     t3		 float bin (63);
	dcl     temp_seg_ptr	 ptr;
	dcl     tt_ptr		 ptr;		/* pointer to tuple in the vfile */
	dcl     tuple_id		 bit (36) aligned;
	dcl     UNLOCK		 bit (2) aligned int static options (constant) init ("00"b);
          dcl     vpt_index		 fixed bin (24);
	dcl     vrmu_add_indexes	 entry (ptr, ptr, bit (36) aligned, fixed bin (35));
	dcl     vrmu_add_tuple	 entry (ptr, ptr, ptr, bit (36) aligned, ptr, fixed bin (21), ptr, fixed bin (35));
	dcl     vrmu_build_index_list	 entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     vrmu_cv_vector_to_tuple entry (ptr, ptr, ptr, bit (1) aligned, fixed bin (21), fixed bin (35));
	dcl     vrmu_encode_key	 entry (ptr, char (256) varying, fixed bin (35), fixed bin (35));

	dcl     error_table_$unimplemented_version ext fixed bin (35);

	dcl     (vrm_data_$max_kattr_length,
	        sys_info$max_seg_size) ext fixed bin (35);



     end vrm_put_tuple;
