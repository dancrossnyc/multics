/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrmu_init_rel_desc: proc (I_db_path, I_rel_name, I_uid, I_model_ptr, I_vrm_com_ptr, I_oid, O_vrm_open_info_ptr, O_code);

/*        BEGIN_DESCRIPTION

   The purpose of this procedure is to create and initialize the vrm_rel_desc
   for a given relation.

          END_DESCRIPTION
*/

/*  HISTORY

   82-08-17 Written by Roger Lackey
   82-11-02 Modified by R. Harvey for opening_info/rel_desc structure split
   82-11-17 Modified by Roger Lackey : to calculate the pri_key_offset for
                                        varying strings like encode_key does

   82-12-09 Modified by Roger Lackey : To added vrm_iocb_list_block handling

   82-12-20 Modified by Roger Lackey : To add initiate the vfile_ component 
                                       that contains the vrm_rel_desc for an
	                             internal model so the vfile opening 
			         could be destroy in this program.
                                       This allows 
			         vrm_open_info.relation_model_ptr valid.

   83-05-26 Modified by Roger Lackey : Added  vrm_attr_info.key_head bit 
			         and vrm_attr_info.primary_key_attr bit

   83-06-14 Modified by Ron Harvey :   Changed the substr for the file_id field
			         so that it doesn't pick up the last 7 
			         bits, but instead acts like MR 10.0 and
			         previous MRDS code.

  83-10-03 Modified by Roger Lackey : to put the key_bit_len in vrm_collection_info

  84-05-25 Modified by Bert Moberg : 	to use vrmu_encode_key$compute_offset_and_length
				so that key lengths are properly calculated

  84-05-30 Modified by Bert Moberg : Changed new call to use
			       vrmu_encode_key$compute_alignment_and_length
			       because there was a case that was not being
			       handled properly
*/


/*  PARAMETERS  */

	dcl     I_db_path		 char (*) parameter;/* Absolute database path */
	dcl     I_rel_name		 char (*) parameter;/* Relation name */
	dcl     I_uid		 bit (36) aligned parameter; /* uid of relation */
	dcl     I_model_ptr		 ptr parameter;	/* Pointer to relation model */
	dcl     I_vrm_com_ptr	 pointer parameter; /* Pointer to segment where vrm_rel_desc is to be allocated */
	dcl     I_oid		 bit (36) aligned parameter; /* Opening id associdated with this desc */
	dcl     O_vrm_open_info_ptr	 pointer parameter; /* Pointer to the opening info structure */
	dcl     O_code		 fixed bin (35) parameter; /* Error code */
%page;
	O_vrm_open_info_ptr = null;
	O_code = 0;
	vrm_com_ptr = I_vrm_com_ptr;
	rel_name = I_rel_name;
	fm_ptr = I_model_ptr;

	vrm_open_info_ptr = null;
	vrm_rel_desc_ptr = null;
	vrm_iocb_list_block_ptr = null;
	iocb_ptr = null;

	on cleanup call tidy_up;

	if fm_ptr ^= null then call build_from_MRDS_model;
	else call build_from_internal_model;

	O_vrm_open_info_ptr = vrm_open_info_ptr;

exit:	return;
%page;
build_from_MRDS_model: proc;

	call hcs_$initiate (I_db_path, "db_model", "", 0, 0, dbm_ptr, code);
	if dbm_ptr = null then call error (error_table_$noentry);

	ri_ptr = pointer (fm_ptr, file_model.rel_ptr);

/* In order to create the opening info structure, we must know the number of
   index collections (secondary indexes + primary key) */

	voi_no_of_index_collections = 0;
	do i = 1 to rel_info.num_attr;
	     if i = 1 then ai_ptr = pointer (fm_ptr, rel_info.attr_ptr);
	     else ai_ptr = pointer (fm_ptr, attr_info.fwd_thread);

	     if attr_info.index_attr & attr_info.index_id ^= "0"b
	     then voi_no_of_index_collections = voi_no_of_index_collections + 1;
	end;

	call create_open_info (voi_no_of_index_collections);

/* We'll build the collection info later while walking attribute chain again */

	vrd_no_of_attrs = rel_info.num_attr;
	allocate vrm_rel_desc in (wa) set (vrm_rel_desc_ptr);

	unspec (vrm_rel_desc) = "0"b;			/* Init every thing to zeros */
	vrm_open_info.relation_model_ptr = vrm_rel_desc_ptr;
	vrm_rel_desc.version = VRM_REL_DESC_VERSION_1;

	vrm_rel_desc.switches.stationary_records = "0"b;	/* Will get changed if varing attr is found */
	vrm_rel_desc.switches.indexed = rel_info.indexed;
	vrm_rel_desc.switches.pad = "0"b;

	vrm_rel_desc.version = VRM_REL_DESC_VERSION_1;

	fi_ptr = pointer (dbm_ptr, db_model.file_ptr);
	found = "0"b;

	do while (^found & rel (fi_ptr) ^= NULL_OFFSET);
	     if file_info.file_name = rel_name then do;
		     found = "1"b;

/*  Pick up the file_id from the last seven but two bits of the field. This
    is due to a stringrange bug in previous implementations of MRDS.  It is
    almost certain that the value we pick up is guaranteed to be ZEROS.     */

		     vrm_rel_desc.file_id = substr (file_info.file_id, 28, 7);
		end;
	     fi_ptr = pointer (dbm_ptr, file_info.fwd_ptr);
	end;

	if ^found then call error (error_table_$noentry);

	vrm_rel_desc.rel_id = substr (rel_info.id, 1, 12);
	vrm_rel_desc.switches.MRDS_compatible = "1"b;
	vrm_rel_desc.var_offset = rel_info.var_offset;
	vrm_rel_desc.maximum_data_length = divide (rel_info.max_data_len, 9, 21, 0); /* convert from bit count to char count */
	if mod (rel_info.max_data_len, 9) ^= 0
	then vrm_rel_desc.maximum_data_length = vrm_rel_desc.maximum_data_length + 1;
	vrm_rel_desc.number_primary_key_attrs = rel_info.num_key_attrs;
	vrm_rel_desc.number_sec_indexes = 0;		/* Calculated during walk through attrs */
	vrm_rel_desc.last_var_attr_no = 0;		/* Calculated during walk through attrs */
	vrm_rel_desc.number_var_attrs = rel_info.nvar_atts;
	vrm_rel_desc.number_attrs = vrd_no_of_attrs;

%page;
	pri_key_offset = 0;				/* Offset within primary key in chars */
	key_attr_index = 1;				/* index for key_attrs substructure */

	vci_no_of_attributes = rel_info.num_key_attrs;
	allocate vrm_collection_info in (wa) set (key_collection_info_ptr);
	key_collection_info_ptr -> vrm_collection_info.unique = "1"b;
	key_collection_info_ptr -> vrm_collection_info.primary_key = "1"b;
	key_collection_info_ptr -> vrm_collection_info.id = "0"b;
	key_coll_index = 1;
	vrm_open_info.primary_key_info_ptr = key_collection_info_ptr;
	open_info_coll_index = 1;			/* set for first secondary index */

	do i = 1 to vrm_rel_desc.number_attrs;

	     if i = 1 then ai_ptr = pointer (fm_ptr, rel_info.attr_ptr);
	     else ai_ptr = pointer (fm_ptr, attr_info.fwd_thread);

	     di_ptr = pointer (dbm_ptr, attr_info.domain_ptr);

	     desc_ptr = addr (domain_info.db_desc);
	     if descriptor.type = 20 | descriptor.type = 22 /* Bit varying or char varying */
	     then vrm_rel_desc.switches.stationary_records = "1"b;

	     vrm_rel_desc.attr (i).name = attr_info.name;
	     vrm_rel_desc.attr (i).descriptor = domain_info.db_desc;
	     desc_ptr = addr (domain_info.db_desc);

	     if descriptor.type = 20 | descriptor.type = 22 /* varying bit string or varying character string */
	     then do;
		     vrm_rel_desc.attr (i).varying = "1"b;
		     vrm_rel_desc.last_var_attr_no = i;
		end;
	     else vrm_rel_desc.attr (i).varying = "0"b;

	     vrm_rel_desc.attr (i).key_head = "0"b;
	     vrm_rel_desc.attr (i).primary_key_attr = "0"b;

	     if attr_info.key_attr then do;
		     vrm_rel_desc.attr (i).primary_key_attr = "1"b;
		     if pri_key_offset = 0 then vrm_rel_desc.attr (i).key_head = "1"b;

		     call vrmu_encode_key$compute_alignment_and_length (desc_ptr, pri_key_offset, pri_key_align, pri_key_bit_len);

		     pri_key_offset = pri_key_offset + pri_key_align;
		     vrm_collection_info_ptr = key_collection_info_ptr;
		     vrm_collection_info.attribute (key_coll_index).attr_index = i;
		     vrm_collection_info.attribute (key_coll_index).key_offset = pri_key_offset;

		     vrm_collection_info.attribute (key_coll_index).key_bit_len = pri_key_bit_len;
		     pri_key_offset = pri_key_offset + pri_key_bit_len;

		     key_coll_index = key_coll_index + 1;
		end;

	     if attr_info.index_attr & attr_info.index_id ^= "0"b
	     then do;
		     vrm_rel_desc.attr (i).key_head = "1"b;
		     vrm_rel_desc.number_sec_indexes = vrm_rel_desc.number_sec_indexes + 1;
		     vci_no_of_attributes = 1;
		     allocate vrm_collection_info in (wa) set (vrm_collection_info_ptr);
		     vrm_open_info.index_collection (open_info_coll_index).info_ptr = vrm_collection_info_ptr;
		     vrm_open_info.index_collection (open_info_coll_index).id = substr (attr_info.index_id, 1, 8);
		     vrm_collection_info.id = substr (attr_info.index_id, 1, 8);
		     vrm_collection_info.unique = "0"b;
		     vrm_collection_info.primary_key = "0"b;
		     vrm_collection_info.attribute (1).attr_index = i;
		     vrm_collection_info.attribute (1).key_offset = 0;

		     dummy_offset = 0;	/* offset not needed for secondary indexes */
		     call vrmu_encode_key$compute_alignment_and_length (desc_ptr, dummy_offset,
			dummy_align, vrm_collection_info.attribute (1).key_bit_len);

		     open_info_coll_index = open_info_coll_index + 1;
		end;
	     vrm_rel_desc.attr (i).pad = "0"b;
	     vrm_rel_desc.attr (i).bit_length = attr_info.bit_length;
	     vrm_rel_desc.attr (i).bit_offset = attr_info.bit_offset;

	end;

     end build_from_MRDS_model;
%page;
build_from_internal_model: proc;

/* Now we must find the internal relation description (if there is one) */

	call vrmu_iocb_manager$create_iocb (I_db_path, I_rel_name, KSQR, "1"b, "vrm_open", iocb_ptr, code);
	if code ^= 0 then call error (code);

	call iox_$seek_key (iocb_ptr, VRM_REL_DESC_KEY, (0), code);
	if code = 0 then call iox_$control (iocb_ptr, "record_status", addr (rs_info), code);
	if code ^= 0 then call error (code);

/* rs_info.record_ptr is the pointer to vrm_rel_desc which is a record inf vfile */

/* Make sure the segment that contains the vrm_rel_desc is initiated so we can use the pointer to it */

	call hcs_$fs_get_path_name (rs_info.record_ptr, dir, dir_len, ent, code);
	if code ^= 0 then call error (code);

	call hcs_$initiate (dir, ent, "", 0, 0, seg_ptr, code);
	if seg_ptr = null then call error (code);

	call create_open_info (rs_info.record_ptr -> vrm_rel_desc.number_sec_indexes);
	vrm_open_info.relation_model_ptr = rs_info.record_ptr;

/* Now destroy the iocb used to get the vrm_rel_desc */

	call vrmu_iocb_manager$destroy_iocb (iocb_ptr, code);
	if code ^= 0 then call error (code);

     end build_from_internal_model;
%page;
create_open_info: proc (no_of_indexes);

	dcl     no_of_indexes	 fixed bin parameter;

	voi_no_of_index_collections = no_of_indexes;
	allocate vrm_open_info in (wa) set (vrm_open_info_ptr);


	vrm_open_info.version = VRM_OPEN_INFO_VERSION_1;
	vrm_open_info.opening_id = I_oid;

	vrm_open_info.file_uid = I_uid;
	vrm_open_info.number_of_openings = 1;
	vrm_open_info.switches.shared = "0"b;
	vrm_open_info.database_dir_path = I_db_path;
	vrm_open_info.relation_name = rel_name;
	vrm_open_info.relation_model_ptr = null ();	/* for now */
	vrm_open_info.com_ptr = I_vrm_com_ptr;

/* Allocate first vrm_list_iocb_block and set its pointer in vrm_open_info */

	allocate vrm_iocb_list_block in (wa) set (vrm_iocb_list_block_ptr);

	vrm_iocb_list_block.num_iocbs_used = 0;
	vrm_iocb_list_block.prev_block_ptr = null;
	vrm_iocb_list_block.next_block_ptr = null;
	vrm_iocb_list_block.iocbs = null;		/* Init all to null */

	vrm_open_info.iocb_list_ptr = vrm_iocb_list_block_ptr;


/* Initialize the collections */

	do i = 1 to vrm_open_info.number_of_index_collections;
	     vrm_open_info.index_collection (i).id = "0"b;
	     vrm_open_info.index_collection (i).info_ptr = null ();
	end;

     end create_open_info;
%page;
error: proc (cd);

	dcl     cd		 fixed bin (35) parameter;

	O_code = cd;
	goto exit;

     end error;







tidy_up: proc;

	if vrm_iocb_list_block_ptr ^= null then free vrm_iocb_list_block;

	if vrm_rel_desc_ptr ^= null then free vrm_rel_desc;

	if iocb_ptr ^= null then
	     call vrmu_iocb_manager$destroy_iocb (iocb_ptr, code);


     end tidy_up;
%page;
%include vrm_open_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_collection_info;
%page;
%include vrm_com;
%page;
%include vrm_iocb_list_block;
%page;
%include mdbm_db_model;
%page;
%include mdbm_file_model;
%page;
	dcl     desc_ptr		 ptr;

	dcl     1 descriptor	 based (desc_ptr),
		2 version		 bit (1) unal,
		2 type		 fixed bin (6) unsigned unal,
		2 packed		 bit (1) unal,
		2 number_dims	 bit (4) unal,
		2 size		 fixed bin (24) unsigned unal;
%page;
/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     dir		 char (168);
	dcl     dir_len		 fixed bin;
	dcl     dummy_align		 fixed bin;
	dcl     dummy_offset	 fixed bin;
	dcl     ent		 char (32);
	dcl     found		 bit (1);
	dcl     i			 fixed bin;
	dcl     iocb_ptr		 ptr;
	dcl     key_attr_index	 fixed bin;
	dcl     key_collection_info_ptr ptr;
	dcl     key_coll_index	 fixed bin;
	dcl     open_info_coll_index	 fixed bin;
	dcl     pri_key_align	 fixed bin;
	dcl     pri_key_bit_len	 fixed bin;
	dcl     pri_key_offset	 fixed bin;
	dcl     rel_name		 char (30);
	dcl     seg_ptr		 ptr;

/* Based */

	dcl     wa		 area (sys_info$max_seg_size) based (vrm_com.work_area_ptr);


/* Builtin */

	dcl     (
	        addr,
	        divide,
	        fixed,
	        mod,
	        null,
	        pointer,
	        rel,
	        substr
	        )			 builtin;


/* Condition */

	dcl     cleanup		 condition;

/* External entries */

	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$seek_key	 entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
	dcl     vrmu_encode_key$compute_alignment_and_length entry (ptr, fixed bin, fixed bin, fixed bin);
	dcl     vrmu_iocb_manager$create_iocb entry (char (*), char (*), fixed bin, bit (1) aligned, char (*), ptr,
				 fixed bin (35));
	dcl     vrmu_iocb_manager$destroy_iocb entry (ptr, fixed bin (35));

/* External static */

	dcl     (error_table_$noentry,
	        sys_info$max_seg_size) ext static fixed bin (35);
	dcl     vrm_data_$iocb_list_block_size ext static fixed bin;

/* Internal static */

	dcl     KSQR		 fixed bin int static options (constant) init (8);
	dcl     NULL_OFFSET		 bit (18) int static options (constant) init ((18)"1"b);

/* Structure */

	dcl     1 rs_info		 aligned,
		2 version		 fixed bin init (2),
		2 flags		 aligned,
		  3 lock_sw	 bit (1) unal init ("0"b),
		  3 unlock_sw	 bit (1) unal init ("0"b),
		  3 create_sw	 bit (1) unal init ("0"b),
		  3 locate_sw	 bit (1) unal init ("0"b),
		  3 inc_ref_count	 bit (1) unal init ("0"b),
		  3 dec_ref_count	 bit (1) unal init ("0"b),
		  3 locate_pos_sw	 bit (1) unal init ("0"b),
		  3 mbz		 bit (29) unal init ("0"b),
		2 record_length	 fixed bin (21) init (0),
		2 max_rec_len	 fixed bin (21) init (0),
		2 record_ptr	 ptr init (null),
		2 descriptor	 fixed bin (35) init (0),
		2 ref_count	 fixed bin (34) init (0),
		2 time_last_modified fixed bin (71) init (0),
		2 modifier	 fixed bin (35) init (0),
		2 block_ptr	 ptr unal init (null),
		2 mbz2		 (2) fixed bin init (0, 0);


	dcl     1 sh_info		 aligned,
		2 relation_type	 fixed bin init (1),/* greater than or equal to */
		2 n		 fixed bin init (4),/* number of relevant chars in key */
		2 search_key	 char (4);

     end vrmu_init_rel_desc;
