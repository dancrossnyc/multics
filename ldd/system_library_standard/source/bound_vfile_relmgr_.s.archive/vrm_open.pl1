/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrm_open: open: proc (I_rel_dir, I_rel_name, O_opening_id, O_code);

/* .		         BEGIN_DESCRIPTION
*
*
*       Open  the  specified  relation.   This  requires  extracting
*  relation  header information  into an opening  info structure and
*  setting a relation opening identifier for this opening.
*
*  .		         END_DESCRIPTION
*/

/* History
*
*  82-08-19 R. Harvey: Initially written
*
*  83-10-24 Roger Lackey : for better performance changed call to
                           hcs_$status_long to hcs_$get_uid_file to get uid.
*/
%page;
/*    Parameters		      */

	dcl     I_rel_dir		 char (*);
	dcl     I_rel_name		 char (*);
	dcl     O_opening_id	 bit (36) aligned;
	dcl     O_code		 fixed bin (35);


	O_opening_id = "0"b;

	vrm_open_info_ptr = null ();
	new_opening = "0"b;

	rel_name = rtrim (I_rel_name);
	rel_model_name = rtrim (rel_name) || ".m";

	call initiate_file_ (I_rel_dir, rel_model_name, R_ACCESS, fm_ptr, (0), (0));
	if fm_ptr ^= null () then do;			/* MRDS permanent relation */
		call initiate_file_ (I_rel_dir, "db_model", R_ACCESS, dbm_ptr, (0), (0));
		if dbm_ptr = null then call error (error_table_$noentry);
	     end;
	else ;					/* 'model' info is in the relation */

	call hcs_$get_uid_file (I_rel_dir, rel_name, file_uid, code); /* Try for uid of relation */
	if code ^= 0 then if code ^= error_table_$no_s_permission then
		call error (code);			/* This works even without s_permission */

	call vrm_open_man$get_opening_id (file_uid, O_opening_id, vrm_com_ptr, vrm_open_info_ptr, code); /* Get an opening id */
	if code ^= 0 then call error (code);

	if vrm_open_info_ptr = null ()
	then do;					/* Not already open */
		new_opening = "1"b;
		call vrmu_init_rel_desc (I_rel_dir, rel_name, file_uid, fm_ptr, vrm_com_ptr, O_opening_id, vrm_open_info_ptr, code);
		if code ^= 0 then call error (code);

		call vrm_open_man$set_open_info_ptr (O_opening_id, vrm_open_info_ptr);
	     end;					/* not already open */
	else vrm_open_info.number_of_openings = vrm_open_info.number_of_openings + 1;

	O_code = 0;
Exit:
	return;
%page;
error: proc (error_code);

	if new_opening
	then do;
		call vrm_open_man$remove_opening (O_opening_id);
		if vrm_open_info_ptr ^= null ()
		then do;
			wa_ptr = vrm_open_info.com_ptr -> vrm_com.work_area_ptr;
			free vrm_open_info in (wa);
		     end;
	     end;
	O_opening_id = "0"b;

	O_code = error_code;
	go to Exit;


	dcl     error_code		 fixed bin (35);

     end;
%page;
%include vrm_com;
%page;
%include vrm_open_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_collection_info;
%page;
%include access_mode_values;
%page;
	dcl     hcs_$get_uid_file	 entry (char (*), char (*), bit (36) aligned, fixed bin (35));
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	dcl     vrmu_init_rel_desc	 entry (char (*), char (*), bit (36) aligned, ptr, ptr, bit (36) aligned, ptr, fixed bin (35));
	dcl     vrm_open_man$get_opening_id entry (bit (36) aligned, bit (36) aligned, ptr, ptr, fixed bin (35));
	dcl     vrm_open_man$set_open_info_ptr entry (bit (36) aligned, ptr);
	dcl     vrm_open_man$remove_opening entry (bit (36) aligned);

	dcl     error_table_$noentry	 fixed bin (35) ext static;
	dcl     error_table_$no_s_permission fixed bin (35) ext static;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;

	dcl     code		 fixed bin (35);
	dcl     dbm_ptr		 ptr;
	dcl     file_uid		 bit (36) aligned;
	dcl     fm_ptr		 ptr;
	dcl     new_opening		 bit (1) aligned;
	dcl     rel_name		 char (30);
	dcl     rel_model_name	 char (32);
	dcl     wa_ptr		 ptr;
	dcl     wa		 area based (wa_ptr);

	dcl     (addr, fixed, null, rel, rtrim) builtin;

     end vrm_open;
