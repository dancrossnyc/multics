
/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrm_create_cursor: create_cursor: proc (I_rel_opening_id, I_work_area_ptr, O_cursor_ptr, O_code);

/* .		         BEGIN_DESCRIPTION

  Allocate  aand inititialize a  cursor  in  the  work_area.

  .		         END_DESCRIPTION
*/

/* History

  82-08-19 R. Harvey: Initially written
  82-12-09 Modified by Roger Lackey : To added vrm_iocb_list_block handling
  83-05-26 Modified Roger Lackey : To conform to relation curdor sepcification 
  83-06-21 Roger Lackey : Added secondary_iocb_ptr to vrm_cursor

*/
%page;



/*		Parameters          */

	dcl     I_rel_opening_id	 bit (36) aligned;

	dcl     I_work_area_ptr	 ptr;
	dcl     O_cursor_ptr	 ptr;
	dcl     O_code		 fixed bin (35);


	call vrm_open_man$get_open_info_ptr (I_rel_opening_id, vrm_open_info_ptr, code);
	if code ^= 0 then call error (code);
	vrm_rel_desc_ptr = vrm_open_info.relation_model_ptr;

	work_area_ptr = I_work_area_ptr;

	allocate vrm_cursor in (work_area) set (vrm_cursor_ptr);

	vrm_cursor.opening_id = I_rel_opening_id;
	string (vrm_cursor.debug_sw) = "0"b;
	string (vrm_cursor.switches) = "0"b;

	vrm_cursor.open_info_ptr = vrm_open_info_ptr;
	vrm_cursor.vrm_relation_desc_ptr = vrm_rel_desc_ptr;
	vrm_cursor.iocb_ptr = null ();		/* Do this for cleanup */
	vrm_cursor.secondary_iocb_ptr = null ();	/* Do this for cleanup */
	vrm_cursor.search_list_ptr = null;
	vrm_cursor.search_keys_ptr = null;
	vrm_cursor.vrm_iocb_list_block_ptr = null;
	vrm_cursor.vrm_iocb_list_block_iocbs_ix = 0;

	call vrmu_iocb_manager$add_cursor_iocb (vrm_cursor_ptr, code);
	if code ^= 0 then call error (code);

	if metering_sw then do;
		call vrm_meter$add_meter (vrm_cursor_ptr, vrm_cursor.meter_ptr, code);
		if code ^= 0 then call error (code);
		if vrm_cursor.meter_ptr ^= null then do;
			vrm_cursor.switches.meter_sw = "1"b;
			vrm_meter_ptr = vrm_cursor.meter_ptr;
			vrm_meter.switches.metering = "1"b;
		     end;

	     end;
	else do;
		vrm_cursor.meter_ptr = null;
		vrm_cursor.switches.meter_sw = "0"b;
	     end;


	O_cursor_ptr = vrm_cursor_ptr;
	O_code = 0;

Exit:	return;
%page;
error: proc (ecode);
	dcl     ecode		 fixed bin (35);

	O_code = ecode;
	if vrm_cursor_ptr ^= null ()
	then do;
		free vrm_cursor;
		vrm_cursor_ptr = null ();
	     end;

	goto Exit;

     end error;




metering_on: entry;					/* Called by vrm_meter */
	metering_sw = "1"b;
	return;


metering_off: entry;				/*  Called by vrm_meter */
	metering_sw = "0"b;
	return;
%page;
%include vrm_cursor;
%page;
%include vrm_open_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_meter;
%page;
	dcl     code		 fixed bin (35);
	dcl     metering_sw		 bit (1) internal static init ("0"b);
	dcl     null		 builtin;
	dcl     string		 builtin;
	dcl     vrmu_iocb_manager$add_cursor_iocb entry (ptr, fixed bin (35));
	dcl     vrm_meter$add_meter	 entry (ptr, ptr, fixed bin (35));
	dcl     vrm_open_man$get_open_info_ptr entry (bit (36) aligned, ptr, fixed bin (35));
	dcl     work_area		 area based (work_area_ptr);
	dcl     work_area_ptr	 ptr;

     end vrm_create_cursor;
