/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

vrmu_add_tuple: proc (vrm_rel_desc_ptr, iocb_ptr, pk_ptr, tuple_id, int_ptr, tuple_len, outt_ptr, code);

/* NOTES:

   This procedure stores a new tuple into the relation indicated by rmri_ptr.
   The seek_key and write_record operations are used.  The
   tuple_id and a pointer to the stored record are returned to the caller.
*/

/* HISTORY:

   Initially written by JA Weeldreyer -- June, 1978.

   82-09-20 R. Harvey: Changed module name and stripped down for
   vfile_relmgr_.

   83-06-23 R. Harvey: Changed references to mdbm_error_$dup_store to 
   be dm_error_$key_duplication.

   83-10-21 Roger Lackey : Removed the mdbm_tuple_id.incl.pl1 and replaced
                           the needed parts as a automactic based  structure
*/
%page;
	tuple_ptr = int_ptr;
	tuple_hdr_len = 4 * (binary (rel (addr (int_ptr -> tuple.data))) -
	     binary (rel (int_ptr)));

	call iox_$seek_key (iocb_ptr, key, rl_sink, icode); /* search for key */
	if icode = 0 then call error (dm_error_$key_duplication); /* if there already */
	else if icode ^= error_table_$no_record then call error (icode); /* other error */

	call iox_$write_record (iocb_ptr, tuple_ptr, tuple_len, icode); /* write the record */
	if icode ^= 0 then call error (icode);

	string (rs_info.flags) = "0"b;		/* get info on rec. just written */
	call iox_$control (iocb_ptr, "record_status", addr (rs_info), icode);
	if icode ^= 0 then call error (icode);

	outt_ptr = rs_info.record_ptr;		/* set output args */
	tid_ptr = addr (tuple_id);			/* make tuple id */
	tuple_id_templet.nstd_desc = "1"b;
	tuple_id_templet.temp = "0"b;
	tuple_id_templet.file_id = vrm_rel_desc.file_id;
	svd_ptr = addr (rs_info.descriptor);
	tuple_id_templet.comp_no = spec_vf_desc.comp_no;
	tuple_id_templet.offset = spec_vf_desc.offset;

	code = 0;

exit:
	return;
%page;
error: proc (cd);

/* Internal error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;
%page;
%include vrm_rel_desc;
%page;
%include vrm_tuple;
%page;

%include mdbm_rs_info;
%page;
	dcl     tid_ptr		 ptr;		/* Pointer to tuple_id_templet */

	dcl     1 tuple_id_templet	 unal based (tid_ptr), /* tuple id for unblocked files */
		2 nstd_desc	 bit (1) unal,	/* to indicate foreign vfile desc */
		2 temp		 bit (1) unal,	/* On if for temp relation */
		2 file_id		 bit (7) unal,	/* file id no. */
		2 comp_no		 bit (10),	/* vfile component number */
		2 offset		 bit (17) unal;	/* the double word offset within component */

%page;
	dcl     (pk_ptr,				/* Input: pointer to encoded primary key */
	        int_ptr,				/* Input: pointer to tuple to be stored */
	        outt_ptr,				/* Output: pointer to stored tuple in db. */
	        svd_ptr				/* pointer to special view of vfile desc. */
	        )			 ptr;

	dcl     (code,				/* Output: status code */
	        icode)		 fixed bin (35);	/* internal status code */


	dcl     tuple_id		 bit (36) aligned;	/* Output: tuple id of stored tuple */

	dcl     (rl_sink,				/* sink for record length */
	        tuple_hdr_len,			/* length of tuple header */
	        tuple_len)		 fixed bin (21);	/* true length of tuple */

	dcl     iocb_ptr		 ptr;
	dcl     key		 char (256) var based (pk_ptr); /* encoded primary key */

	dcl     1 spec_vf_desc	 aligned based (svd_ptr), /* special view of vf. desc. */
		2 pad		 bit (8) unal,
		2 comp_no		 bit (10) unal,
		2 offset		 bit (17) unal;	/* drops low order bit */

	dcl     (dm_error_$key_duplication,
	        error_table_$no_record) ext fixed bin (35);

	dcl     (addr,
	        binary,
	        rel,
	        string
	        )			 builtin;

	dcl     iox_$seek_key	 entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
	dcl     iox_$write_record	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));


     end vrmu_add_tuple;
