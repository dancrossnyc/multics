/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrm_open_man: proc; return;

/* .		         BEGIN_DESCRIPTION

  This module contains the entry points necessary for managing the
  opening and closing of relations by the vfile_relation_manager.

  .		         END_DESCRIPTION
*/

/* History

  82-08-17 R. Harvey: Initially written
  82-10-15 R. Harvey: Rewritten to manage opening_ids as one per relation,
	 and also to pass back error codes
  82-11-02 R. Harvey: Modified to use vrm_open_info structure
  82-12-14 Roger Lackey : Added call to  destroy_all_iocbs_for_oid when
                          removing an opening.

*/
%page;
get_opening_id: entry (I_uid, O_opening_id, O_com_ptr, O_open_info_ptr, O_code);

/*

  Add a new opening to the opening table.  If the table does  not
  exist  a temporary segment is created and initialized.

*/

/* Parameters */

	dcl     I_uid		 bit (36) aligned parameter;
	dcl     O_opening_id	 bit (36) aligned parameter;
	dcl     O_com_ptr		 ptr parameter;

/*	dcl     O_open_info_ptr	 ptr parameter;	     */
	dcl     O_code		 fixed bin (35) parameter;


	if INTERNAL_VRM_COM_PTR = null ()		/* If first call... */
	then call create_com_segment;			/* ... make vrm_com_ptr point to something */
	else vrm_com_ptr = INTERNAL_VRM_COM_PTR;

/* First, see if this relation is already open */

	call search_for_uid (I_uid, opening_id);
	if opening_id = "0"b then do;			/* Nope */
		if vrm_com.next_free_oid = "0"b then call create_and_link_oid_section;
		opening_id = addr (vrm_com.next_free_oid) -> oid_template.right_half;
		call unlink (opening_id, addr (vrm_com.next_free_oid));
		oid_entry_ptr = ptr (vrm_com_ptr, opening_id);
		oid_entry.uid = I_uid;
		oid_entry.open_info_ptr = null ();
		call link (opening_id, addr (vrm_com.first_assigned_oid));
	     end;
	else oid_entry_ptr = ptr (vrm_com_ptr, opening_id);

	addr (O_opening_id) -> oid_template.left_half = "0"b;
	addr (O_opening_id) -> oid_template.right_half = opening_id;
	O_com_ptr = vrm_com_ptr;
	O_open_info_ptr = oid_entry.open_info_ptr;

	O_code = 0;

Exit:	return;
%page;
set_open_info_ptr: entry (I_opening_id, I_open_info_ptr);

/*

	          Given an opening_id set the associated open_info_ptr.

*/

/* Parameters */


	dcl     I_opening_id	 bit (36) aligned;
	dcl     I_open_info_ptr	 ptr;


	vrm_com_ptr = INTERNAL_VRM_COM_PTR;
	oid_entry_ptr = ptr (vrm_com_ptr, addr (I_opening_id) -> oid_template.right_half);
	oid_entry.open_info_ptr = I_open_info_ptr;

	return;
%page;
get_open_info_ptr: entry (I_opening_id, O_open_info_ptr, O_code);

/*

           Given an opening_id return the associated open_info_ptr.

*/

/* Parameters */


/*	dcl     I_opening_id	 bit (36) aligned parameter;     */
	dcl     O_open_info_ptr	 ptr parameter;

/*	dcl     O_code		 fixed bin (35) parameter; */


	if INTERNAL_VRM_COM_PTR = null then call error (dm_error_$no_opening);
	vrm_com_ptr = INTERNAL_VRM_COM_PTR;
	if I_opening_id > vrm_com.highest_oid then call error (dm_error_$no_opening);
	oid_entry_ptr = ptr (vrm_com_ptr, addr (I_opening_id) -> oid_template.right_half);
	if fixed (oid_entry.next_oid) > fixed (vrm_com.highest_oid) |
	     fixed (oid_entry.prev_oid) > fixed (vrm_com.highest_oid) |
	     oid_entry.uid = "0"b |
	     oid_entry.open_info_ptr = null ()
	then call error (dm_error_$no_opening);
	if oid_entry.open_info_ptr -> vrm_open_info.opening_id ^= I_opening_id then call error (dm_error_$no_opening);
	O_open_info_ptr = oid_entry.open_info_ptr;

	O_code = 0;

	return;
%page;
remove_opening: entry (I_opening_id);

/*

	Given an opening_id, remove it from the opening table.

*/

/*    Parameters */


/*	dcl     I_opening_id	 bit (36) aligned;    */


	vrm_com_ptr = INTERNAL_VRM_COM_PTR;
	opening_id = addr (I_opening_id) -> oid_template.right_half;
	oid_entry_ptr = ptr (vrm_com_ptr, opening_id);

	oid_entry.uid = "0"b;
	oid_entry.open_info_ptr = null ();		/* Invalidate entry */
	call unlink (opening_id, addr (vrm_com.first_assigned_oid));
	call link (opening_id, addr (vrm_com.next_free_oid));

	I_opening_id = "0"b;			/* Let him not use it again */

	return;
%page;
get_open_relations: entry (I_user_area_ptr, O_relation_list_ptr, O_code);

	dcl     I_user_area_ptr	 ptr parameter;
	dcl     O_relation_list_ptr	 ptr parameter;

/*	dcl     O_code		 fixed bin (35) parameter; */


	if INTERNAL_VRM_COM_PTR = null then call error (dm_error_$no_opening);
	vrm_com_ptr = INTERNAL_VRM_COM_PTR;

	vrl_number_of_openings = 0;
	oid = vrm_com.first_assigned_oid;
	do while (oid ^= "0"b);
	     oid_entry_ptr = ptr (vrm_com_ptr, addr (oid) -> oid_template.right_half);
	     vrl_number_of_openings = vrl_number_of_openings + 1;
	     addr (oid) -> oid_template.right_half = oid_entry.next_oid;
	end;

	allocate vrm_relation_list in (user_area) set (vrm_relation_list_ptr);
	i = 0;
	oid = vrm_com.first_assigned_oid;
	do while (oid ^= "0"b);
	     oid_entry_ptr = ptr (vrm_com_ptr, addr (oid) -> oid_template.right_half);
	     i = i + 1;
	     vrm_relation_list.opening (i).opening_id = oid;
	     vrm_relation_list.opening (i).open_info_ptr = oid_entry.open_info_ptr;
	     addr (oid) -> oid_template.right_half = oid_entry.next_oid;
	end;

	O_relation_list_ptr = vrm_relation_list_ptr;
	O_code = 0;
	return;
%page;
create_com_segment: proc;

	dcl     code		 fixed bin (35);

/* get a temporary segment from the process dir */

	call get_temp_segment_ ("vrm_open_man", INTERNAL_VRM_COM_PTR, code);
	if code ^= 0 then call error (code);
	vrm_com_ptr = INTERNAL_VRM_COM_PTR;

/* initialize the temp segment */

	vrm_com.highest_oid = "0"b;
	vrm_com.next_free_oid = "0"b;
	vrm_com.first_assigned_oid = "0"b;
	vrm_com.get_seg_ptr, vrm_com.put_seg_ptr, vrm_com.mod_seg_ptr = null ();
	vrm_com.work_area_ptr = addr (vrm_com.oid_area);
	vrm_com.oid_area = empty ();

	return;

     end;
%page;
create_and_link_oid_section: proc;

/*
	     This procedure will allocate a new oid_table section in
	     the temp area. It will be initialized and linked into the
	     appropriate place.
*/

	dcl     entry_size		 fixed bin;
	dcl     i			 fixed bin;
						/*	dcl new_oid_section_ptr ptr; */
	dcl     prev_oid		 bit (18) unal;

	allocate new_oid_section in (vrm_com.oid_area) set (new_oid_section_ptr);

/* init new section */

	oid_entry_ptr = new_oid_section_ptr;
	entry_size = size (oid_entry);

	prev_oid = "0"b;
	do i = 1 to vrm_data_$oid_slots_per_section;
	     oid_entry.uid = "0"b;
	     oid_entry.open_info_ptr = null ();
	     oid_entry.next_oid = rel (addrel (oid_entry_ptr, entry_size));
	     oid_entry.prev_oid = prev_oid;
	     oid_entry.valid = "0"b;
	     prev_oid = rel (oid_entry_ptr);
	     oid_entry_ptr = addrel (oid_entry_ptr, entry_size);
	end;

	ptr (oid_entry_ptr, prev_oid) -> oid_entry.next_oid = "0"b; /* readjust the last entry */
	if vrm_com.highest_oid < "000000000000000000"b || prev_oid
	then addr (vrm_com.highest_oid) -> oid_template.right_half = prev_oid;
	addr (vrm_com.next_free_oid) -> oid_template.right_half = rel (new_oid_section_ptr);

	return;

     end;
%page;
link: proc (opening_id, place_to_link);

	dcl     opening_id		 bit (18) unal parameter;
	dcl     place_to_link	 ptr parameter;

	dcl     temp_hold		 bit (18) unal;

	quit_signaled = "0"b;
	on quit quit_signaled = "1"b;

	temp_hold = place_to_link -> oid_template.right_half;
	place_to_link -> oid_template.right_half = opening_id;
	if temp_hold ^= "0"b then ptr (vrm_com_ptr, temp_hold) -> oid_entry.prev_oid = opening_id;
	oid_entry_ptr = ptr (vrm_com_ptr, opening_id);
	oid_entry.prev_oid = "0"b;
	oid_entry.next_oid = temp_hold;

	revert quit;
	if quit_signaled then do;
		quit_signaled = "0"b;
		signal quit;
	     end;

     end link;
%page;
unlink: proc (oid_to_be_unlinked, place_to_unlink);

	dcl     oid_to_be_unlinked	 bit (18) unal parameter;
	dcl     place_to_unlink	 ptr parameter;
	dcl     walk_oid		 bit (18) unal;
	dcl     found		 bit (1) unaligned;

	quit_signaled = "0"b;
	on quit quit_signaled = "1"b;

	walk_oid = place_to_unlink -> oid_template.right_half;
	found = "0"b;
	do while (walk_oid ^= "0"b & ^found);
	     oid_entry_ptr = ptr (vrm_com_ptr, walk_oid);
	     if walk_oid = oid_to_be_unlinked then do;
		     found = "1"b;
		     if oid_entry.prev_oid ^= "0"b then
			ptr (vrm_com_ptr, oid_entry.prev_oid) -> oid_entry.next_oid = oid_entry.next_oid;
		     else place_to_unlink -> oid_template.right_half = oid_entry.next_oid;
		     if oid_entry.next_oid ^= "0"b then
			ptr (vrm_com_ptr, oid_entry.next_oid) -> oid_entry.prev_oid = oid_entry.prev_oid;
		end;
	     walk_oid = oid_entry.next_oid;		/* go to next entry */
	end;

	revert quit;
	if quit_signaled then do;
		quit_signaled = "0"b;
		signal quit;
	     end;

     end unlink;
%page;
search_for_uid: proc (uid, oid);

	dcl     uid		 bit (36) aligned parameter;
	dcl     oid		 bit (18) unal parameter;

	dcl     found		 bit (1) aligned;

	oid = addr (vrm_com.first_assigned_oid) -> oid_template.right_half;
	found = "0"b;
	do while (^found & oid ^= "0"b);
	     oid_entry_ptr = ptr (vrm_com_ptr, oid);
	     if oid_entry.uid = uid then found = "1"b;
	     else oid = oid_entry.next_oid;
	end;

     end search_for_uid;
%page;
error: proc (ecode);

	dcl     ecode		 fixed bin (35) parameter;

	O_code = ecode;

	goto Exit;

     end error;
%page;
%include vrm_com;
%page;
%include vrm_open_info;
%page;
%include vrm_relation_list;
%page;
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));

	dcl     vrm_data_$oid_slots_per_section fixed bin external static;

	dcl     i			 fixed bin (35);
	dcl     opening_id		 bit (18) unal;
	dcl     oid		 bit (36) aligned;
	dcl     oid_entry_ptr	 ptr;
	dcl     quit_signaled	 bit (1) unal;

	dcl     1 new_oid_section	 (vrm_data_$oid_slots_per_section) based (new_oid_section_ptr),
		2 new_oid_entry	 like oid_entry;

	dcl     1 oid_template	 aligned based,
		2 left_half	 bit (18) unal,
		2 right_half	 bit (18) unal;

	dcl     1 oid_entry		 aligned based (oid_entry_ptr),
		2 uid		 bit (36) aligned,
		2 open_info_ptr	 ptr unal,
		2 next_oid	 bit (18) unal,
		2 prev_oid	 bit (18) unal,
		2 valid		 bit (36) aligned;

	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     dm_error_$no_opening	 fixed bin (35) ext static;

	dcl     quit		 condition;

	dcl     (addr, addrel, empty, fixed, null, ptr, rel, size, substr)
				 builtin;

	dcl     new_oid_section_ptr	 ptr internal static;
	dcl     INTERNAL_VRM_COM_PTR	 ptr internal static init (null ()); /* This points the the vrm_com structure FOR THIS PROCESS */

	dcl     user_area		 area based (I_user_area_ptr);



     end vrm_open_man;
