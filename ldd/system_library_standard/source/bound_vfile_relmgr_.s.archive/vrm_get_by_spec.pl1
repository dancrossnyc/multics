/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrm_get_by_spec:
     proc;

/* .                        BEGIN_DESCRIPTION

   This program has four entry points:

   get_tuples_by_spec

   get_tuple_id

   get_tuples_and_ids

   get_count


   The get_tuples_by_spec entry:
   Get the attribute values of the tuples identified by a search
   of a particular index (cursor).  The values are vectors allocated in the
   area supplied by the caller and and are pointed to by a the pointers
   O_gt_vec_list_ptr -> pointer_array.

   The get_tuple_id entry:
   Returns a list of tuple_ids that satisfy the search specification.

   The get_tuples_and_ids entry:
   Combines the functions of the get_tuples_by_spec and get_tuple_id entries.

   The get_count entry:
   Returns the count of the tuples that satisify the relation_search_specification.


   The search specification must be limited to
   attributes supported by the cursor supplied.

   .                            END_DESCRIPTION


   HISTORY

   82-08-20  Roger Lackey : Written by
   82-11-16  Roger Lackey : Added call to vrm_cursor_man$validate
 
   83-01-11  Roger Lackey : Change get_count entry to retrun n-1 for 
   vfile_status count on MRDS_compatible relations.

   83-03-10  Ron Harvey : added the get_tuples_and_ids entry points and allowed
   the caller to pass in a typed_vector_list to be filled.

   83-05-25  Roger Lackey : Changed get_tid and get_tuples_and_ids to allow
                            call to pass in a non_null pointer to element_id_list
		        to be fill.

   83-05-25 Roger Lackey : Changed calling sequence to comply with the 
                           relation cursor specification.

   83-09-08  Roger Lackey : Modified to used new vrm_search_info
*/
%page;
get_tuples_by_spec:
     entry (I_gt_cursor_ptr, I_gt_spec_ptr, I_gt_id_list_ptr, I_gt_area_ptr, O_gt_vec_list_ptr, O_gt_code);

/*    PARAMETERS     */

	dcl     I_gt_spec_ptr	 pointer parameter; /* Pointer to search specification  */
	dcl     I_gt_area_ptr	 pointer parameter; /* Pointer to base an area upon */
	dcl     I_gt_id_list_ptr	 pointer parameter; /* Pointer to attr id_list */
	dcl     I_gt_cursor_ptr	 pointer parameter; /* Cursor pointer */
	dcl     O_gt_vec_list_ptr	 pointer parameter; /* Pointer to output vector_list */
	dcl     O_gt_code		 fixed bin (35) parameter;
						/* Error code */


	entry_type = GET_TUPLE;
	id_list_ptr = I_gt_id_list_ptr;
	vrm_cursor_ptr = I_gt_cursor_ptr;
	relation_search_specification_ptr = I_gt_spec_ptr;
	area_ptr = I_gt_area_ptr;
	O_gt_vec_list_ptr = null;
	O_gt_code = 0;

	goto common;






get_tuples_and_ids:
     entry (I_gti_cursor_ptr, I_gti_spec_ptr, I_gti_id_list_ptr,
	I_gti_area_ptr, X_gti_tid_list_ptr, X_gti_vec_list_ptr, O_gti_code);

	dcl     I_gti_spec_ptr	 ptr parameter;	/* Specification structure ptr */
	dcl     I_gti_area_ptr	 ptr parameter;	/* Return area ptr */
	dcl     I_gti_id_list_ptr	 ptr parameter;	/* Attribute id list structure */
	dcl     I_gti_cursor_ptr	 ptr parameter;	/* Cursor pointer */
	dcl     X_gti_tid_list_ptr	 ptr parameter;	/* Tuple id list structure pointer 
                                                                If null we will allocate the list */
	dcl     X_gti_vec_list_ptr	 ptr parameter;	/* Typed vector list structure ptr */
	dcl     O_gti_code		 fixed bin (35) parameter;
						/* Error ocde */

	entry_type = GET_TUPLE_AND_TID;
	relation_search_specification_ptr = I_gti_spec_ptr;
	vrm_cursor_ptr = I_gti_cursor_ptr;
	area_ptr = I_gti_area_ptr;
	id_list_ptr = I_gti_id_list_ptr;
	element_id_list_ptr = X_gti_vec_list_ptr;
	O_gti_code = 0;

	goto common;
%page;
get_tuple_id:
     entry (I_id_cursor_ptr, I_id_spec_ptr, I_id_area_ptr, X_id_tid_list_ptr, O_id_code);

	dcl     I_id_spec_ptr	 ptr parameter;	/* Specification structure pointer */
	dcl     I_id_area_ptr	 ptr parameter;	/* Work area pointer */
	dcl     I_id_cursor_ptr	 ptr parameter;	/* Cursor pointer */
	dcl     X_id_tid_list_ptr	 ptr parameter;	/* Tuple id list ptr
.                                                               If null we will allocate the list  */
	dcl     O_id_code		 fixed bin (35) parameter;
						/* Error code */

	entry_type = GET_TID;
	relation_search_specification_ptr = I_id_spec_ptr;
	vrm_cursor_ptr = I_id_cursor_ptr;
	area_ptr = I_id_area_ptr;
	element_id_list_ptr = X_id_tid_list_ptr;
	O_id_code = 0;

	goto common;








get_count:
     entry (I_count_cursor_ptr, I_count_spec_ptr, O_count_number, O_count_code);

	dcl     I_count_spec_ptr	 ptr parameter;	/* Specification_structure pointer */
	dcl     I_count_cursor_ptr	 ptr parameter;	/* Cursor pointer */
	dcl     O_count_number	 fixed bin (35) parameter;
						/* Number of tuples counted that met search spec */
	dcl     O_count_code	 fixed bin (35) parameter;
						/* Error code */

	relation_search_specification_ptr = I_count_spec_ptr;
	vrm_cursor_ptr = I_count_cursor_ptr;
	O_count_number = 0;
	O_count_code = 0;
	entry_type = GET_COUNT;
	goto common;

%page;
common:
	if vrm_cursor.switches.meter_sw		/* If metering is being done */
	then do;

		call cpu_time_and_paging_ (pf_1, t1, dummy);
		vrm_meter_ptr = vrm_cursor.meter_ptr;
		vrm_meter.last_call_stats = 0;
		metering_sw = "1"b;
	     end;
	else metering_sw = "0"b;

	file_locked = "0"b;

	vrm_cursor.switches.shared = vrm_cursor.open_info_ptr -> vrm_open_info.switches.shared;

	if area_seg_ptr = null then do;
		vrm_com_ptr = vrm_cursor.open_info_ptr -> vrm_open_info.com_ptr;
		if vrm_com.get_seg_ptr = null then do;
			call get_temp_segment_ (MY_NAME, vrm_com.get_seg_ptr, code);
			if code ^= 0 then call error (code);
		     end;
		area_seg_ptr = vrm_com.get_seg_ptr;
		get_area = empty ();
	     end;

	vrm_search_info_ptr = addr (search_info);
	search_info.cur_id_list_ix = 0;

	if entry_type = GET_TUPLE | entry_type = GET_TUPLE_AND_TID
	then vrm_search_info.tuple_pointer_required = "1"b;
	else vrm_search_info.tuple_pointer_required = "0"b;

	if entry_type = GET_TID | entry_type = GET_TUPLE_AND_TID
	then vrm_search_info.tuple_tid_required = "1"b;
	else vrm_search_info.tuple_tid_required = "0"b;


	if metering_sw then vrm_search_info.meter_sw = "1"b;
	else vrm_search_info.meter_sw = "0"b;

	vrm_search_info.upper_limit_exceeded_sw = "0"b;
	vrm_search_info.last_call_stats = 0;

	vrm_rel_desc_ptr = vrm_cursor.vrm_relation_desc_ptr;

	iocb_ptr = vrm_cursor.iocb_ptr;
	items_found = 0;
	all_range_spec = "0"b;

	on cleanup call tidy_up;
%page;
	if relation_search_specification_ptr = null	/* No search specification supplied */
	then do;

		rss_maximum_number_of_constraints = 0;	/* Just to keep the compiler happy */
		all_range_spec = "1"b;		/* Get everything */
		search_info.max_number_values = vrm_data_$typed_vector_array_limit;
	     end;

	else do;					/* There was a search specification supplied */
		if relation_search_specification.head.type ^= ABSOLUTE_RELATION_SEARCH_SPECIFICATION_TYPE &
		     relation_search_specification.head.type ^= RELATIVE_RELATION_SEARCH_SPECIFICATION_TYPE then
		     call error (dm_error_$unsup_search_spec_head_type);

		if relation_search_specification.head.type = ABSOLUTE_RELATION_SEARCH_SPECIFICATION_TYPE then do;
			all_range_spec = "1"b;
			search_info.max_number_values = vrm_data_$typed_vector_array_limit;
		     end;

		if relation_search_specification.range.type = LOW_RANGE_TYPE then
		     search_info.max_number_values = relation_search_specification.range.size;

	     end;

	if all_range_spec then do;			/* Build an internal version of the search spec */
		call vrmu_search_init (vrm_cursor_ptr, relation_search_specification_ptr, code);
		if code ^= 0 then call error (code);
	     end;

	if vrm_cursor.search_list_ptr = null then do;
		call sub_err_ (mrds_error_$internal_error,
		     MY_NAME, ACTION_CANT_RESTART, null, 0,
		     "A dm_search_specification with a RELATIVER_RELATION_SEARCH_SPECIFICATION_TYPE 
before a ABSOLUTE_RELATION_SEARCH_SPECIFICATION_TYPE.");
	     end;
	vrm_search_list_ptr = vrm_cursor.search_list_ptr;

	if vrm_search_list.num_and_groups > 0 then do;
		cur_ag = 0;

		do ag = 1 to vrm_search_list.num_and_groups while (cur_ag = 0);

		     if vrm_search_list.and_groups (ag).do_not_use_sw = "0"b then
			cur_ag = ag;
		end;
		if cur_ag = 0 then call error (dm_error_$no_tuple);
		else vrm_search_list.current_and_group = cur_ag;
	     end;
%page;
	if (entry_type = GET_TID | entry_type = GET_TUPLE_AND_TID)
	then do;					/* Set ptr for tid list */
		if element_id_list_ptr = null then do;	/* Element id list was NOT passed in */
			element_id_list_supplied_sw = "0"b; /* Was not supplied */
			if tid_temp_seg_ptr = null then do;
				call get_temp_segment_ (MY_NAME, tid_temp_seg_ptr, code);
				if code ^= 0
				then call error (code);
			     end;
			element_id_list_ptr = tid_temp_seg_ptr;
			element_id_list.version = ELEMENT_ID_LIST_VERSION_1;
			element_id_list.number_of_elements = search_info.max_number_values;
		     end;
		else do;				/* Element_id_list supplied */
			element_id_list_supplied_sw = "1"b;
			if element_id_list.version ^= ELEMENT_ID_LIST_VERSION_1 then
			     call error (error_table_$unimplemented_version);
			element_id_list.number_of_elements = search_info.max_number_values; /* this is the way it has to be */
		     end;
		search_info.tid_list_ptr = element_id_list_ptr;
	     end;

	if (entry_type = GET_TUPLE | entry_type = GET_TUPLE_AND_TID)
	then do;					/* Set ptr for tuple list */
		typed_vector_list_ptr = null ();
		if entry_type = GET_TUPLE_AND_TID
		then if X_gti_vec_list_ptr ^= null
		     then typed_vector_list_ptr = X_gti_vec_list_ptr;

		if entry_type = GET_TUPLE
		then if O_gt_vec_list_ptr ^= null
		     then typed_vector_list_ptr = O_gt_vec_list_ptr;

		if typed_vector_list_ptr = null
		then do;				/* none passed in */
			if tuple_temp_seg_ptr = null then do; /* first non-null call */
				call get_temp_segment_ (MY_NAME, tuple_temp_seg_ptr, code);
				if code ^= 0
				then call error (code);
			     end;

			typed_vector_list_ptr = tuple_temp_seg_ptr;
			typed_vector_list.version = TYPED_VECTOR_LIST_VERSION_1;
		     end;
		else /* typed_vector_list was passed in */
		     search_info.max_number_values = min (typed_vector_list.maximum_number_of_vectors, search_info.max_number_values);

		if typed_vector_list.version ^= TYPED_VECTOR_LIST_VERSION_1
		then call error (error_table_$unimplemented_version);

		if typed_vector_list_ptr = tuple_temp_seg_ptr
		then typed_vector_list.maximum_number_of_vectors = search_info.max_number_values;
	     end;
%page;

	if entry_type = GET_COUNT & relation_search_specification_ptr = null
	then do;					/* No search constraints so use vfile_status */
		O_count_number = 0;

		vfsi.info_version = 1;

		call iox_$control (iocb_ptr, "file_status", addr (vfsi), code);
		if code = 0
		then do;				/* Give um the count */
			if vrm_rel_desc.switches.MRDS_compatible
			then O_count_number = vfsi.non_null_recs - 1;
						/* Cause they have one null record */
			else O_count_number = vfsi.non_null_recs;
						/* Actual count */
		     end;

		O_count_code = code;
		goto exit;

	     end;

	if db_sw then
	     call vrm_display_search_list$subroutine (vrm_cursor_ptr);
%page;
/* Following loop does the work */

	if vrm_cursor.switches.shared then do;
		if vrm_cursor.opening_mode = KSQU then call lock; /* If in shared mode we must lock the file */
	     end;

	code = 0;

	do while (code = 0 & items_found < search_info.max_number_values);

	     search_info.num_items_returned = 0;

	     call vrmu_search (vrm_search_info_ptr, vrm_cursor_ptr, code);
	     if search_info.num_items_returned > 0 then
		call add_to_output_list;		/* Got a tuple or tid 
                                                   even if code = dm_error_$no_tuple
					 there still could be items_returned
					 that are valid so add them to
					 the output list before checking error code */

	     if code ^= 0 then do;
		     if code ^= dm_error_$no_tuple then call error (code);
		     if vrm_search_list.current_and_group + 1 <
			vrm_search_list.num_and_groups then do;
			     vrm_search_list.current_and_group = vrm_search_list.current_and_group + 1;
			     code = 0;
			end;
		end;
	end;

	if file_locked then call unlock;
%page;
	if items_found ^= 0
	then do;					/* Found some tuples or tids */

		if tuple_temp_seg_ptr = typed_vector_list_ptr & (entry_type = GET_TUPLE | entry_type = GET_TUPLE_AND_TID)
		then do;				/* Build the returned vector_pointer array */
			on area call error (error_table_$noalloc);
			tvl_maximum_number_of_vectors = items_found;

			allocate typed_vector_list in (wa) set (typed_vector_list_ptr);
			typed_vector_list.version = TYPED_VECTOR_LIST_VERSION_1;
			typed_vector_list.pad = 0;
			typed_vector_list.number_of_vectors = items_found;
			tuple_temp_seg_ptr -> typed_vector_list.maximum_number_of_vectors =
			     items_found;		/* Cut temp copy down to size */

			typed_vector_list_ptr -> typed_vector_list.vector_ptr =
			     /* Copy temp list  into callers area */ tuple_temp_seg_ptr
			     -> typed_vector_list.vector_ptr;

			if entry_type = GET_TUPLE
			then O_gt_vec_list_ptr = typed_vector_list_ptr;
			else X_gti_vec_list_ptr = typed_vector_list_ptr;

		     end;

		if entry_type = GET_TID | entry_type = GET_TUPLE_AND_TID
		then do;

			eil_number_of_elements = items_found;

			if ^element_id_list_supplied_sw then do;
				allocate element_id_list in (wa) set (element_id_list_ptr);
				element_id_list.number_of_elements = items_found;
				tid_temp_seg_ptr -> element_id_list.number_of_elements = items_found;
				element_id_list = tid_temp_seg_ptr -> element_id_list;

				if entry_type = GET_TID
				then X_id_tid_list_ptr = element_id_list_ptr;
				else X_gti_tid_list_ptr = element_id_list_ptr;
			     end;			/* END if ^element_id_list_supplied_sw then do; */
			else element_id_list.number_of_elements = items_found; /* element id list supplied */
		     end;

		if entry_type = GET_COUNT
		then /* all that's left */
		     O_count_number = items_found;	/* entry_type = GET_COUNT */

	     end;
%page;
/* Some kind of an error to return */
	else do;
		if entry_type = GET_TUPLE
		then O_gt_code = dm_error_$no_tuple;
		else if entry_type = GET_TID
		then O_id_code = dm_error_$no_tuple;
		else if entry_type = GET_TUPLE_AND_TID
		then O_gti_code = dm_error_$no_tuple;
		else O_count_code = 0;
	     end;


	if db_sw then
	     call ioa_ ("^/Number items returned:  ^d^/", items_found);

exit:
	call tidy_up;
	return;

%page;
/*  * * * * * * * * * * * *     add_to_output_list  * * * * * * * * * * * * */

add_to_output_list: proc;

	if entry_type = GET_TUPLE | entry_type = GET_TUPLE_AND_TID
	then do;

		do n = 1 to search_info.num_items_returned;

		     items_found = items_found + 1;

		     if typed_vector_list_ptr = tuple_temp_seg_ptr /* we did the allocation */
		     then vector_ptr = null ();	/* make sure it is not garbage */
		     else vector_ptr = typed_vector_list.vector_ptr (items_found); /* get user's stv ptr */
		     tuple_ptr = search_info.tup_ptr (n);
		     call vrmu_cv_tuple_to_vector$simple_vector (tuple_ptr, area_ptr, id_list_ptr, vrm_rel_desc_ptr,
			vector_ptr, err_code);
		     if err_code ^= 0
		     then call error (err_code);

		     typed_vector_list.vector_ptr (items_found) = vector_ptr;
		end;
	     end;

	else /* entry_type ^= GET_TUPLE | entry_type ^= GET_TUPLE_AND_TID */
	     items_found = items_found + search_info.num_items_returned;


	search_info.cur_id_list_ix = items_found;

     end add_to_output_list;

%page;
/* * * * * * * * * * * * * * *   error    * * * * * * * * * * * * * * * */

error:
     proc (cd);

	dcl     cd		 fixed bin (35) parameter;

	if entry_type = GET_TUPLE
	then O_gt_code = cd;
	else if entry_type = GET_TID
	then O_id_code = cd;
	else if entry_type = GET_TUPLE_AND_TID
	then O_gti_code = cd;
	else O_count_code = cd;

	goto exit;

     end error;




/* * * * * * * * * * * * *  tidy_up * * * * * * * * * * * * * * * * * * */

tidy_up:
     proc;

	if file_locked
	then call iox_$control (iocb_ptr, "set_file_lock", addr (UNLOCK), code);

	if metering_sw
	then do;
		call cpu_time_and_paging_ (pf_2, t2, dummy);
		vrm_meter.last_call_stats = vrm_search_info.last_call_stats;
		vrm_meter.last_call_stats.last_time_of_stats = clock;

		t3 = t2 - t1;
		vrm_meter.last_call_stats.vcpu_time = divide (t3, 1000000, 63);
		vrm_meter.last_call_stats.page_faults = pf_2 - pf_1;
		vrm_meter.last_call_stats.number_items_returned = items_found;
		if vrm_search_info.upper_limit_exceeded_sw
		then vrm_meter.last_call_stats.upper_limit_found_count =
			vrm_meter.last_call_stats.upper_limit_found_count + 1;
		vrm_meter.last_call_stats.number_times_used = 1;
		vrm_meter.total_stats.last_time_of_stats = 0;
		vrm_meter.total_stats = vrm_meter.total_stats + vrm_meter.last_call_stats;

	     end;

     end tidy_up;
%page;
/* * * * * * * * * * * * * *     lock   * * * * * * * * * * * * * * * *  */


lock:
     proc;

	if metering_sw
	then search_info.last_call_stats.number_times_locked = search_info.last_call_stats.number_times_locked + 1;

	call iox_$control (iocb_ptr, "set_file_lock", addr (LOCK), lock_err_code);
	if lock_err_code ^= 0
	then call error (lock_err_code);

	file_locked = "1"b;

     end lock;







/* * * * * * * * * * * * * *     unlock   * * * * * * * * * * * * * * * *  */

unlock:
     proc;

	if file_locked
	then do;
		call iox_$control (iocb_ptr, "set_file_lock", addr (UNLOCK), lock_err_code);
		if lock_err_code ^= 0
		then call error (lock_err_code);
	     end;
	file_locked = "0"b;

     end unlock;



/*  * * * * * * * * * * * * * * * * * *  debug   * * * * * * * * * * *   */

db_on: entry;
	db_sw = "1"b;
	return;


db_off: entry;
	db_sw = "0"b;
	return;
%page;
%include dm_specification_head;
%page;
%include dm_relation_spec;
%page;
%include dm_range_constants;
%page;
%include vrm_rel_desc;
%page;
%include vrm_cursor;
%page;
%include vrm_search_list;
%page;
%include vrm_meter;
%page;
%include dm_element_id_list;
%page;
%include dm_typed_vector_list;
%page;
%include vrm_tuple;
%page;
%include vrm_open_info;
%page;
%include vrm_search_info;
%page;
%include vfs_info;
%page;
%include vrm_com;
%page;
%include sub_err_flags;


	dcl     1 search_info	 like vrm_search_info aligned;

	dcl     1 vfsi		 like indx_info;
%page;
	dcl     addr		 builtin;
	dcl     ag		 fixed bin;
	dcl     all_range_spec	 bit (1) aligned;
	dcl     area		 condition;
	dcl     area_ptr		 ptr;
	dcl     area_seg_ptr	 ptr int static init (null);
	dcl     cleanup		 condition;
	dcl     clock		 builtin;
	dcl     code		 fixed bin (35);
	dcl     cpu_time_and_paging_	 entry (fixed bin, fixed bin (71), fixed bin);
	dcl     cur_ag		 fixed bin;
	dcl     db_sw		 bit (1) int static init ("0"b);
	dcl     divide		 builtin;
	dcl     dm_error_$no_tuple	 fixed bin (35) ext static;
	dcl     dm_error_$unsup_search_spec_head_type fixed bin (35) ext static;
	dcl     dummy		 fixed bin;
	dcl     element_id_list_supplied_sw bit (1) aligned;
	dcl     empty		 builtin;
	dcl     entry_type		 fixed bin;
	dcl     err_code		 fixed bin (35);
	dcl     error_table_$noalloc	 fixed bin (35) ext static;
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     file_locked		 bit (1);
	dcl     fixed		 builtin;
	dcl     get_area		 area (sys_info$max_seg_size) based (area_seg_ptr);
	dcl     GET_COUNT		 fixed bin int static options (constant) init (3);
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     GET_TID		 fixed bin int static options (constant) init (2);
	dcl     GET_TUPLE		 fixed bin int static options (constant) init (1);
	dcl     GET_TUPLE_AND_TID	 fixed bin int static options (constant) init (4);
	dcl     id_list_ptr		 ptr;
	dcl     info		 fixed bin;	/* Dummy variable for vfsi like */
	dcl     ioa_		 entry () options (variable);
	dcl     iocb_ptr		 ptr;
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     items_found		 fixed bin (35);
	dcl     KSQU		 fixed bin int static options (constant) init (10);
	dcl     LOCK		 bit (2) aligned int static options (constant) init ("10"b);
	dcl     lock_err_code	 fixed bin (35);
	dcl     metering_sw		 bit (1) aligned;
	dcl     min		 builtin;
	dcl     mrds_error_$internal_error fixed bin (35) ext static;
	dcl     MY_NAME		 char (24) int static options (constant) init ("vrm_get_by_spec");
	dcl     n			 fixed bin;
	dcl     null		 builtin;
	dcl     pf_1		 fixed bin;
	dcl     pf_2		 fixed bin;
	dcl     rel		 builtin;
	dcl     sub_err_		 entry () options (variable);
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     t1		 fixed bin (71);
	dcl     t2		 fixed bin (71);
	dcl     t3		 float bin (63);
	dcl     tid_temp_seg_ptr	 ptr internal static init (null);
	dcl     tuple_temp_seg_ptr	 ptr internal static init (null);
	dcl     UNLOCK		 bit (2) aligned int static options (constant) init ("00"b);
	dcl     vector_ptr		 ptr;
	dcl     vrmu_cv_tuple_to_vector$simple_vector entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     vrmu_search		 entry (ptr, ptr, fixed bin (35));
	dcl     vrmu_search_init	 entry (ptr, ptr, fixed bin (35));
	dcl     vrm_data_$typed_vector_array_limit fixed bin (35) ext static;
	dcl     vrm_display_search_list$subroutine entry (ptr);
	dcl     wa		 area based (area_ptr);

     end vrm_get_by_spec;

