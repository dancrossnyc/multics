/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

vrm_create_relation: create_relation: proc (I_rel_dir, I_rel_name, I_rel_creation_info_ptr, I_typed_vector_array_ptr, O_rel_opening_id, O_record_collection_id, O_code);

/* .		    BEGIN_DESCRIPTION

   Create a multi-segment vfile for a database relation. Open the relation
   and return a collection id.  Note that the collection id will always have
   all bits on. If called at the $create_relation entry, a relation description
   record will be written to the relation.

   .		    END_DESCRIPTON
*/

/*  History:

    82-09-27  R. Harvey:  Initially written.
    82-11-11  R. Harvey:  Modified to add internal description record
    83-10-04 Roger Lackey : added align_varying_tuple_data procedure  to
                            make sure varying part of tuple was word aligned.
*/
%page;
/* vrm_create_relation: proc (I_rel_dir, I_rel_name, I_rel_creation_info_ptr, I_typed_vector_array_ptr, O_rel_opening_id, O_record_collection_id, O_code); */

/* Parameters */

	dcl     I_rel_dir		 char (*) parameter;
	dcl     I_rel_name		 char (*) parameter;
	dcl     I_rel_creation_info_ptr ptr parameter;
	dcl     I_typed_vector_array_ptr ptr parameter;
	dcl     O_rel_opening_id	 bit (36) aligned parameter;
	dcl     O_record_collection_id bit (36) aligned parameter;
	dcl     O_code		 fixed bin (35) parameter;

	MRDS = "0"b;
	goto common;


create_MRDS_relation: entry (I_rel_dir, I_rel_name, I_rel_creation_info_ptr, I_typed_vector_array_ptr, O_rel_opening_id, O_record_collection_id, O_code);

	MRDS = "1"b;



common:
	O_rel_opening_id = "0"b;
	O_record_collection_id = "0"b;
	O_code = 0;
	iocb_ptr = null ();
	vrm_rel_desc_ptr = null ();

	on cleanup call tidy_up;

	attach_name = unique_chars_ ("0"b) || ".VRM.new_relation";
	attach_desc = "vfile_ " || rtrim (I_rel_dir) || ">" || I_rel_name;

	call iox_$attach_name (attach_name, iocb_ptr, attach_desc, null (), code);
	if code ^= 0 then call error (code);

	call iox_$open (iocb_ptr, KSQU, "0"b, code);
	if code ^= 0 then call error (code);
						/* Init the vfile */
	call iox_$control (iocb_ptr, "record_status", addr (rs_info), code);
	if code ^= 0 then call error (code);

	if ^MRDS then do;
		call iox_$delete_record (iocb_ptr, code); /* trash the zero length record */
		if code ^= 0 then call error (code);

		call create_relation_record;		/* put relation info in the relation */
	     end;


	call vrm_open (I_rel_dir, I_rel_name, O_rel_opening_id, code); /* Open the relation */
	if code ^= 0 then call error (code);

	O_record_collection_id = "111111111111111111111111111111111111"b;

Exit:	call tidy_up;
	return;
%page;
create_relation_record: proc;

	typed_vector_array_ptr = I_typed_vector_array_ptr;
	if typed_vector_array.version ^= TYPED_VECTOR_ARRAY_VERSION_2 then call error (error_table_$unimplemented_version);

	vrd_no_of_attrs = typed_vector_array.number_of_dimensions;
	allocate vrm_rel_desc set (vrm_rel_desc_ptr);

	vrm_rel_desc.record_id = VRM_REL_DESC_RECORD_ID;
	vrm_rel_desc.version = VRM_REL_DESC_VERSION_1;
	vrm_rel_desc.file_id = "0000001"b;
	vrm_rel_desc.rel_id = "000000000001"b;
	string (vrm_rel_desc.switches) = "0"b;
	vrm_rel_desc.var_offset = 1;			/* bit number for substr */
	vrm_rel_desc.maximum_data_length = 0;
	vrm_rel_desc.number_primary_key_attrs = 0;
	vrm_rel_desc.number_sec_indexes = 0;
	vrm_rel_desc.last_var_attr_no = 0;
	vrm_rel_desc.number_var_attrs = 0;

	do i = 1 to vrd_no_of_attrs;
	     vrm_attr_info_ptr = addr (vrm_rel_desc.attr (i)); /* get pointer to place to store info */
	     char_attr_no = i;
	     vrm_attr_info.name = typed_vector_array.dimension_table (i).name;
	     desc_ptr = typed_vector_array.dimension_table (i).descriptor_ptr;
	     vrm_attr_info.descriptor = desc_ptr -> descriptor_bit_36_ovrly;
	     if desc_ptr -> descriptor.type = VARYING_CHAR_TYPE
		| desc_ptr -> descriptor.type = VARYING_BIT_TYPE
	     then do;				/* varying */
		     vrm_attr_info.varying = "1"b;
		     vrm_rel_desc.switches.stationary_records = "1"b; /* we must do this so records won't move */
		     vrm_rel_desc.number_var_attrs = vrm_rel_desc.number_var_attrs + 1; /* count the varying attributes */
		     vrm_rel_desc.last_var_attr_no = i; /* If this is the last... */
		end;
	     else vrm_attr_info.varying = "0"b;
	     vrm_attr_info.pad = "0"b;
	     call compute_bit_offset_and_length;
	end;

	if vrm_rel_desc.number_var_attrs ^= 0 then
	     call align_varying_tuple_data;		/* Align varying part of tuple */

/* convert bit count to char count */
	vrm_rel_desc.maximum_data_length = ceil (divide (vrm_rel_desc.maximum_data_length, 9, 21, 5));
	rel_size = currentsize (vrm_rel_desc) * 4;	/* length of record in bytes */

	call iox_$seek_key (iocb_ptr, VRM_REL_DESC_KEY, (0), code);
	if code = error_table_$no_record then code = 0;

	if code = 0 then call iox_$write_record (iocb_ptr, vrm_rel_desc_ptr, rel_size, code);
	if code ^= 0 then call error (code);

     end create_relation_record;
%page;
/*  * * * * * * * * * *      compute_bit_offset_and_length   * * * * * * *   */

compute_bit_offset_and_length: proc;

/* routine to convert the attribute's domain descriptor into
   the required tuple offset and space required and update the
   corresponding statistics for the relation information
   NOTE: the padding routines were introduced to make the data stored
   in the tuple(via bit offset/length) relect the pl1 definition
   of storage locations needed for unaligned and aligned data types */

	vrm_attr_info.bit_length =
	     vrmu_data_length$get_data_bit_length (desc_ptr -> descriptor_bit_36_ovrly);

/* fixed length attribute/domain handling */

	if ^vrm_attr_info.varying then do;		/* fixed attributes */
		padding =
		     vrmu_data_align$align_data_item (desc_ptr, vrm_rel_desc.maximum_data_length);
		vrm_attr_info.bit_offset = vrm_rel_desc.var_offset + padding;
						/* set to end of fixed data */
		vrm_rel_desc.var_offset =
		     vrm_rel_desc.var_offset + vrm_attr_info.bit_length + padding;

/* set new fixed data end */
	     end;

/* varying string handling */

	else do;					/* varying strings */
		vrm_attr_info.bit_offset = vrm_rel_desc.number_var_attrs; /* varying array index, not offset */
		padding = pad (WORD, vrm_rel_desc.maximum_data_length); /* varying must start/stop on word boundary */
	     end;

/* set the maximum tuple and key bit lengths */

	vrm_rel_desc.maximum_data_length = /* calc in bits for now */
	     vrm_rel_desc.maximum_data_length + vrm_attr_info.bit_length + padding;


     end compute_bit_offset_and_length;
%page;
/*   * * * * * * * * * * * * * *        pad         * * * * * * * * * * * *  */

pad: proc (pad_size, pad_base) returns (fixed bin);

/* routine to return the number of bits necessary to pad a bit count
   out to an alignment boundary of 9(byte), 36(word), or 72(double word) bits
   as determined by the pad size input */

	if mod (pad_base, pad_size) = 0 then
	     number_of_bits = 0;
	else do;

		number_of_bits = pad_size - mod (pad_base, pad_size);

	     end;

	return (number_of_bits);

	dcl     pad_size		 fixed bin;	/* either 9 or 36 or 72 */
	dcl     pad_base		 fixed bin (35);	/* current bit length to be padded */
	dcl     number_of_bits	 fixed bin;	/* what has to be added to get to the desired boundary */

     end pad;
%page;
align_varying_tuple_data: procedure ();

/* varying attributes in the tuple must start on a word boundary,
   this routine makes sure that the end of the fixed data portion of the
   tuple, which is where the varying attributes start, is on that boundary */

	if vrm_rel_desc.number_var_attrs ^= 0 then do;

		amount_to_pad = pad (WORD, vrm_rel_desc.var_offset - 1);
		vrm_rel_desc.var_offset = vrm_rel_desc.var_offset + amount_to_pad;
		vrm_rel_desc.maximum_data_length = vrm_rel_desc.maximum_data_length + amount_to_pad;
	     end;

     end align_varying_tuple_data;
%page;
tidy_up: proc;

	if iocb_ptr ^= null () then do;
		call iox_$close (iocb_ptr, code);	/* Clean up after ourself */
		if code = 0 then call iox_$detach_iocb (iocb_ptr, code);
		if code = 0 then call iox_$destroy_iocb (iocb_ptr, code);
	     end;

	if vrm_rel_desc_ptr ^= null () then free vrm_rel_desc;


     end tidy_up;




error: proc (ecode);

	dcl     ecode		 fixed bin (35);

	O_code = ecode;
	go to Exit;

     end error;
%page;
%include vrm_rel_desc;
%page;
%include vu_typed_vector_array;
%page;
%include mdbm_descriptor;
%page;
/* Automatic */

	dcl     attach_name		 char (40);
	dcl     attach_desc		 char (210);
	dcl     amount_to_pad	 fixed bin;	/* bits needed for word alignment */
	dcl     char_attr_no	 picture "zz9";
	dcl     i			 fixed bin;
	dcl     iocb_ptr		 ptr;
	dcl     code		 fixed bin (35);
	dcl     MRDS		 bit (1) aligned;
	dcl     padding		 fixed bin;
	dcl     rel_size		 fixed bin (21);

/* Based */

	dcl     descriptor_bit_36_ovrly bit (36) based;

/* Builtin */

	dcl     (addr, ceil, currentsize, divide, mod, null, rtrim, string) builtin;

/* Condition */

	dcl     cleanup		 condition;

/* Entry */

	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$delete_record	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$seek_key	 entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
	dcl     iox_$write_record	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     vrm_open		 entry (char (*), char (*), bit (36) aligned, fixed bin (35));
	dcl     vrmu_data_length$get_data_bit_length entry (bit (36)) returns (fixed bin (35));
	dcl     vrmu_data_align$align_data_item entry (ptr, fixed bin (35)) returns (fixed bin);

/* External static */

	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     error_table_$no_record fixed bin (35) ext static;

/* Internal static */

	dcl     (
	        KSQU		 init (10),
	        VARYING_BIT_TYPE	 init (20),
	        VARYING_CHAR_TYPE	 init (22),
	        WORD		 init (36)
	        )			 fixed bin int static options (constant);

/* Structure */

	dcl     1 rs_info		 aligned,
		2 version		 fixed bin init (2),
		2 flags		 aligned,
		  3 lock_sw	 bit (1) unal init ("0"b),
		  3 unlock_sw	 bit (1) unal init ("0"b),
		  3 create_sw	 bit (1) unal init ("1"b),
		  3 locate_sw	 bit (1) unal init ("1"b),
		  3 inc_ref_count	 bit (1) unal init ("0"b),
		  3 dec_ref_count	 bit (1) unal init ("0"b),
		  3 locate_pos_sw	 bit (1) unal init ("0"b),
		  3 mbz		 bit (29) unal init ("0"b),
		2 record_length	 fixed bin (21) init (0),
		2 max_rec_len	 fixed bin (21) init (0),
		2 record_ptr	 ptr init (null),
		2 descriptor	 fixed bin (35) init (0),
		2 ref_count	 fixed bin (34) init (0),
		2 time_last_modified fixed bin (71) init (0),
		2 modifier	 fixed bin (35) init (0),
		2 block_ptr	 ptr unal init (null),
		2 mbz2		 (2) fixed bin init (0, 0);


     end vrm_create_relation;
