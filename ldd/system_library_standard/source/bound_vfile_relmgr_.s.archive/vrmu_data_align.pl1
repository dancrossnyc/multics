/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - December 1979
   Renamed for vfile_relmgr_ by R. Harvey -- November 1982

*/

vrmu_data_align: align_data_item: procedure (desc_ptr, base_to_pad) returns (fixed bin);

/* DESCRIPTION:

   given a pointer to a standard multics pl1 data argument descriptor,
   and a current storage offset at which data is to be placed,
   this routine calculates from the data type, and the given address
   the number of padding bits needed to properly align the data
   on either a byte, word, or double word boundary, as required
   by the data type definition, and routines such as assign_.
   currently the data types that assign_ can handle are supported
   by this routine(i.e. 1-12, 19-22, 33-34, 43-46)

*/

/* PARAMETERS:

   desc_ptr - - (input) pointer, points to the standard multics pl1 argument
   descriptor for the data to be byte/word/even_word aligned using the given address

   base_to_pad - - (input) fixed bin(35), the current address(offset), of the last
   data item, after which the data item described by the input descriptor
   is to be placed, for the first data item, base_to_pad = 0.

   needed_bits - - (output) fixed bin, the number of bits to add to base_to_pad,
   in order to obtain the correct byte/word/even_word alignment for the
   data type as described by the input descriptor.

*/

/* using the declared alignment and data type for this attribute,
   return the number of bits necessary to put the data on a boundary
   as defined by pl1, such as byte, word or double word aligned, for using that type.
   directly in such operations as the any_to_any convert via assign_
   without having to do a bit move to get the proper alignment.
   this makes data storage in the tuple a true representation of the pl1
   attributes of unaligned and aligned for complete user choice
   in the trade off between speed and space. */

	needed_bits = 0;				/* initialize */

	if desc_ptr = null () then ;
	else if descriptor.packed then do;		/* unaligned */

		if ^(descriptor.type = 21 | (descriptor.type >= 9 & descriptor.type <= 12) /* char or decimal */
		     | (descriptor.type >= 43 & descriptor.type <= 46)) then ; /* packed decimal */
		else needed_bits = pad (BYTE, base_to_pad);

	     end;
	else do;					/* aligned */

		if (descriptor.type >= 9 & descriptor.type <= 12) | /* decimal */
		     (descriptor.type >= 43 & descriptor.type <= 46) | /* packed decimal */
		     (descriptor.type >= 19 & descriptor.type <= 22) | /* bit or char */
		     descriptor.type = 1 | descriptor.type = 3 | descriptor.type = 33 then /* binary short */
		     needed_bits = pad (WORD, base_to_pad);

		else if descriptor.type = 2 | descriptor.type = 34 | /* binary long */
			(descriptor.type >= 4 & descriptor.type <= 8) then /* binary complex */
		     needed_bits = pad (DOUBLE_WORD, base_to_pad);
		else ;				/* none needed otherwise */

	     end;

	return (needed_bits);


	declare null		 builtin;
	declare needed_bits		 fixed bin;	/* number of bits needed to get the alignment */
	declare base_to_pad		 fixed bin (35);	/* original value to be padded out */

pad: procedure (pad_size, pad_base) returns (fixed bin);

/* routine to return the number of bits necessary to pad a bit count
   out to an alignment boundary of 9(byte), 36(word), or 72(double word) bits
   as determined by the pad size input */

	if mod (pad_base, pad_size) = 0 then
	     number_of_bits = 0;
	else do;

		number_of_bits = pad_size - mod (pad_base, pad_size);

	     end;

	return (number_of_bits);


	declare mod		 builtin;
	declare pad_size		 fixed bin;	/* either 9 or 36 or 72 */
	declare pad_base		 fixed bin (35);	/* current bit length to be padded */
	declare number_of_bits	 fixed bin;	/* what has to be added to get to the desired boundary */

     end;

	declare BYTE		 fixed bin init (9) internal static options (constant); /* byte boundary = 9 bits */
	declare WORD		 fixed bin init (36) int static options (constant); /* word boundary = 36 bits */
	declare DOUBLE_WORD		 fixed bin init (72) int static options (constant); /* double word boundary = 72 bits */

%include mdbm_descriptor;

     end vrmu_data_align;
