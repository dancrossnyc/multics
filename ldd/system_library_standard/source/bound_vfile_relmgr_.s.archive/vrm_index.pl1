/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

create_index: proc (I_rel_opening_id, I_id_list_ptr, I_flags, I_style, O_index_collection_id, O_code);


/* .		         BEGIN_DESCRIPTION

   Create an index for a relation using exactly ONE of the relation's
   attributes.  When called with the Unique index bit set in the flags
   structure, a primary key will be assumed and the index_collection_id
   returned will be all zero bits in this case.  In the case of a single
   indexed attribute, the collection id will be the bit string equivalent of
   the attribute number.  The only bit in the flags structure that is honored
   is the 'relation_must_be_empty' flag.  If the relation is found to not be
   empty when this flag is set, an error code will be returned and the index
   will not be created.  The 'style' parameter is ignored.

   .		         END_DESCRIPTION
*/

/* History:

   82-09-29  R. Harvey:  Initially written
   82-11-02  R. Harvey:  Modified for internal relation info structure
   82-11-30  R. Harvey:  Modified to not use scan_records so that stationary
		     records relations work properly.
   83-01-19  R. Harvey:  Modified so that destruction of indices is done
		     without looking at each tuple.
   83-06-07  Roger Lackey : Added vrm_rel_desc.attr info for relation cursors
   83-10-03  Roger Lackey : Changed the way that key offsets wer calculated and
		        added key_bit_len value to collection info.
   84-05-25  Bert Moberg : Changed to call the new routine
                           vrmu_encode_key$compute_offset_and_length to
                           properly calculate key offsets and lengths
   84-05-30  Bert Moberg : Changed the new call to
		       vrmu_encode_key$compute_offset_and_length to
		       call vrmu_encode_key$compute_alignment_and_length
		       as there was one case were the first try did not
		       work.
*/

%page;
/* create_index: proc (I_rel_opening_id, I_id_list_ptr, I_flags, I_style, O_index_collection_id, O_code); */


/*       Parameters        */

	dcl     I_rel_opening_id	 bit (36) aligned;
	dcl     I_id_list_ptr	 ptr;
	dcl     I_flags		 bit (36) aligned;
	dcl     I_style		 fixed bin (17);
	dcl     O_index_collection_id	 bit (36) aligned;
	dcl     O_code		 fixed bin (35);



	O_index_collection_id = "0"b;
	O_code = 0;

	id_list_ptr = I_id_list_ptr;
	if id_list.version ^= ID_LIST_VERSION_1 then
	     call error (error_table_$unimplemented_version);
	string (flags) = I_flags;

	change_bits_ptr, key_list_ptr, scan_iocb_ptr, index_iocb_ptr, pk_iocb_ptr, get_key_info_ptr, rs_info_ptr = null;
	on cleanup call tidy_up;

	call vrm_open_man$get_open_info_ptr (I_rel_opening_id, vrm_open_info_ptr, code);
	if code ^= 0 then call error (code);
	vrm_rel_desc_ptr = vrm_open_info.relation_model_ptr;
	vrm_com_ptr = vrm_open_info.com_ptr;

	if ^flags.index_is_unique then do;		/* assume non-primary key */
		attr_no = id_list.id (1);		/* only support one-attribute indexes for now */

		call init_create;

		vrm_rel_desc.number_sec_indexes = vrm_rel_desc.number_sec_indexes + 1;

		vci_no_of_attributes = 1;
		allocate vrm_collection_info in (wa) set (vrm_collection_info_ptr);

		call calculate_collection_id (attr_no, O_index_collection_id);
		vrm_collection_info.id = substr (O_index_collection_id, 1, 8);
		vrm_collection_info.unique = "0"b;
		vrm_collection_info.primary_key = "0"b;
		vrm_collection_info.pad = "0"b;
		call fill_attribute_info;
		call add_collection_info;

		do x = 1 to vrm_collection_info.number_of_attributes;
		     ax = vrm_collection_info.attribute (x).attr_index;
		     vrm_rel_desc.attr (ax).primary_key_attr = "0"b;
		     if vrm_collection_info.attribute (x).key_offset = 0 then
			vrm_rel_desc.attr (ax).key_head = "1"b;
		end;

		tuple_ptr = addr (tuple_ptr);		/* make sure non-null */
		do while (tuple_ptr ^= null ());
		     call get_a_tuple (scan_iocb_ptr, file_id, tuple_id, tuple_ptr);
		     if tuple_ptr ^= null () then do;
			     call vrmu_build_index_list (vrm_rel_desc_ptr, vrm_open_info_ptr, tuple_ptr, change_bits_ptr, key_list_ptr, code);
			     if code = 0 then call vrmu_add_indexes (index_iocb_ptr, key_list_ptr, tuple_id, code);
			     if code ^= 0 then call error (code);
			end;			/* tuple_ptr ^ null */
		end;				/* do while */

	     end;					/* index not unique */
	else do;					/* primary key */
		O_index_collection_id = "0"b;
		vci_no_of_attributes = id_list.number_of_ids;
		allocate vrm_collection_info in (wa) set (vrm_collection_info_ptr);
		vrm_collection_info.id = "0"b;
		vrm_collection_info.unique = "1"b;
		vrm_collection_info.primary_key = "1"b;
		vrm_collection_info.pad = "0"b;

		call fill_attribute_info;
		call add_collection_info;

		vrm_rel_desc.number_primary_key_attrs = id_list.number_of_ids;
		vrm_open_info.primary_key_info_ptr = vrm_collection_info_ptr;
		do x = 1 to vrm_collection_info.number_of_attributes;
		     ax = vrm_collection_info.attribute (x).attr_index;
		     vrm_rel_desc.attr (ax).primary_key_attr = "1"b;
		     if vrm_collection_info.attribute (x).key_offset = 0 then
			vrm_rel_desc.attr (ax).key_head = "1"b;
		end;

	     end;					/* primary key */

	if ^vrm_rel_desc.MRDS_compatible then do;	/* create info record */
		call open_iocb (KSQU, "vrm_key_info", pk_iocb_ptr);
		if code ^= 0 then call error (code);

		call iox_$seek_key (pk_iocb_ptr, VRM_COLLECTION_KEY_HEAD || char (O_index_collection_id),
		     (0), code);
		if code ^= error_table_$no_record & code ^= 0 then call error (code);

		call iox_$write_record (pk_iocb_ptr, vrm_collection_info_ptr, currentsize (vrm_collection_info), code);
		if code ^= 0 then call error (code);

	     end;					/* (non-MRDS) */



	call tidy_up;

Exit:	return;
%page;
destroy_index: entry (I_rel_opening_id, I_index_collection_id, O_code);


/* Parameters	   */

/*	dcl     I_rel_opening_id       bit (36) aligned parameter;      */
	dcl     I_index_collection_id	 bit (36) aligned parameter;

/*	dcl     O_code		 fixed bin (35) parameter;	    */


	O_code = 0;

	call vrm_open_man$get_open_info_ptr (I_rel_opening_id, vrm_open_info_ptr, code);
	if code ^= 0 then call error (code);
	vrm_rel_desc_ptr = vrm_open_info.relation_model_ptr;
	vrm_com_ptr = vrm_open_info.com_ptr;

	found = "0"b;
	do i = 1 to vrm_open_info.number_of_index_collections while (^found);
	     if vrm_open_info.index_collection (i).id = I_index_collection_id then
		do;
		     found = "1"b;
		     collection_index = i;
		     vrm_collection_info_ptr = vrm_open_info.index_collection (i).info_ptr;
		end;
	end;

	if ^found then call error (dm_error_$collection_not_in_relation);

	change_bits_ptr, key_list_ptr, scan_iocb_ptr, index_iocb_ptr, get_key_info_ptr, pk_iocb_ptr = null;
	on cleanup call tidy_up;
	call init_destroy;


	call iox_$position (index_iocb_ptr, -1, 0, code); /* -1 = goto beginning of file */
	if code ^= 0 then call error (code);

	index_head = "";
	unspec (index_head) = vrm_rel_desc.rel_id || vrm_collection_info.id || "0000000"b;
	seek_head_info.search_key = index_head;
	call iox_$control (index_iocb_ptr, "seek_head", addr (seek_head_info), code);
	if code ^= 0 then do;			/* check for empty relation */
		if code ^= error_table_$no_record
		then call error (code);
		call tidy_up;
		goto Exit;
	     end;

	key_found = index_head;
	do while (substr (key_found, 1, 3) = index_head & code = 0);
	     call iox_$control (index_iocb_ptr, "delete_key", null (), code);
	     if code ^= 0 then call error (code);

	     call iox_$read_key (index_iocb_ptr, key_found, (0), code);
	     if code ^= 0
	     then if code ^= error_table_$end_of_info then call error (code);
	end;

	call remove_collection_info;
	vrm_rel_desc.number_sec_indexes = vrm_rel_desc.number_sec_indexes - 1;
	if ^vrm_rel_desc.MRDS_compatible then do;	/* delete index record */
	     end;

	O_code = 0;
	call tidy_up;				/* do non-local goto */
%page;
init_create: proc;

	call open_iocb (KSQU, "vrm_add_index", index_iocb_ptr);
	call open_iocb (KSQR, "vrm_scan_records", scan_iocb_ptr);

	call setup_for_relation_scan (scan_iocb_ptr);

	cb_number_of_change_bits = vrm_rel_desc.number_attrs;
	allocate change_bits set (change_bits_ptr);

	string (change_bits.position) = "0"b;
	change_bits.position (attr_no) = "1"b;

	kl_number_of_keys = 1;
	allocate key_list set (key_list_ptr);

	file_id = vrm_rel_desc.file_id;

     end init_create;





init_destroy: proc;

	call open_iocb (KSQU, "vrm_delete_index", index_iocb_ptr);
	call open_iocb (KSQR, "vrm_scan_records", scan_iocb_ptr);

	call setup_for_relation_scan (scan_iocb_ptr);

	cb_number_of_change_bits = vrm_rel_desc.number_attrs;
	allocate change_bits set (change_bits_ptr);

	string (change_bits.position) = "0"b;
	do i = 1 to vrm_collection_info.number_of_attributes;
	     attr_no = vrm_collection_info.attribute (i).attr_index;
	     change_bits.position (attr_no) = "1"b;
	end;

	kl_number_of_keys = 1;
	allocate key_list set (key_list_ptr);

	file_id = vrm_rel_desc.file_id;

	index_value_length = 0;			/* keep the compiler happy */


	dcl     (i, attr_no)	 fixed bin;

     end init_destroy;
%page;
open_iocb: proc (open_mode, open_name, iocb_ptr);

	dcl     open_mode		 fixed bin (17) parameter;
	dcl     open_name		 char (24) varying parameter;
	dcl     iocb_ptr		 ptr parameter;

	dcl     atd		 char (344) varying;
	dcl     attach_desc		 char (344);
	dcl     code		 fixed bin (35);


	atd = "vfile_ " || rtrim (vrm_open_info.database_dir_path);
	atd = atd || ">";
	atd = atd || rtrim (vrm_open_info.relation_name);
	atd = atd || " -dup_ok -share ";
	atd = atd || ltrim (char (vrm_data_$max_vfile_wait_time));
	if vrm_rel_desc.switches.stationary_records then
	     atd = atd || " -stationary";

	attach_desc = atd;
	call iox_$attach_name (unique_chars_ ("0"b) || open_name,
	     iocb_ptr,
	     rtrim (attach_desc), null (), code);
	if code ^= 0 then call error (code);
	call iox_$open (iocb_ptr, open_mode, "0"b, code);
	if code ^= 0 then call error (code);

     end open_iocb;
%page;
setup_for_relation_scan: proc (sfrs_rel_scan_iocb_ptr);
						/*
   This routine sets up the beginning of the primary key so that the
   get_a_tuple routine can be called to get each record in turn
*/

/* PARAMETERS */

	dcl     sfrs_rel_scan_iocb_ptr ptr;		/* (input) pointer to the iocb that will be used to
						   .       scan all the tuples in the relation */

/* AUTOMATIC */

	dcl     sfrs_code		 fixed bin (35);


	call iox_$position (sfrs_rel_scan_iocb_ptr, -1, 0, sfrs_code); /* goto beginning of file */
	if sfrs_code = 0
	then do;
		seek_head_info.relation_type = 0;	/* equal */
		seek_head_info.n = 3;		/* 3 chars */
		addr (seek_head_info.search_key) -> index.rel_id = vrm_rel_desc.rel_id;
		addr (seek_head_info.search_key) -> index.index_id = "0"b; /* primary key */
		addr (seek_head_info.search_key) -> index.mbz = "0"b;
		call iox_$control (sfrs_rel_scan_iocb_ptr, "seek_head", addr (seek_head_info), sfrs_code);
	     end;
	if sfrs_code ^= 0 & sfrs_code ^= error_table_$no_record
	then call error (sfrs_code);

	gk_key_len = 256;
	allocate gk_info set (get_key_info_ptr);
	unspec (get_key_info_ptr -> gk_info.flags) = "0"b;
	get_key_info_ptr -> gk_info.flags.current = "1"b;
	get_key_info_ptr -> gk_info.flags.reset_pos = "0"b;

	allocate rs_info set (rs_info_ptr);
	rs_info.version = rs_info_version_2;
	string (rs_info.flags) = "0"b;

	return;

     end setup_for_relation_scan;
%page;
get_a_tuple: proc (gat_rel_scan_iocb_ptr, gat_file_id, gat_tid, gat_tuple_ptr);

/*
   This routine determines a pointer  to  the  next  tuple  and  the
   tuple's  tuple  id  which is based on the vfile record descriptor
   for the record which contains the tuple. The tuple_id  and  vfile
   descriptor are different for historical reasons.
*/

/* PARAMETERS */

	dcl     gat_rel_scan_iocb_ptr	 ptr;		/* (input) pointer to the iocb that will be used to
						   .       scan all the tuples in the relation */
	dcl     gat_file_id		 bit (7);		/* (input) id of the file as defined in the database model */
	dcl     gat_tid		 bit (36) aligned;	/* (output) a tuple id */
	dcl     gat_tuple_ptr	 ptr;		/* (output) pointer to a tuple */

/* AUTOMATIC */

	dcl     gat_code		 fixed bin (35);	/* local error code */
	dcl     tid_ptr		 pointer;		/* Pointer to tid structure */
	dcl     vfd_ptr		 pointer;		/* Pointer to vfd structure */


/* BASED     */

	dcl     1 tid		 aligned based (tid_ptr), /* MRDS tuple id (tid) */
		2 non_std_desc	 bit (1) unal,	/* Non-standard descriptor bit */
		2 temp		 bit (1) unal,	/* On if temp relation */
		2 file_id		 bit (7) unal,	/* File id from mrds db_model file_id_list */
		2 comp_num	 bit (10) unal,	/* Component number */
		2 offset		 bit (17) unal;	/* Offset within component */


	dcl     1 vfd		 aligned based (vfd_ptr), /* Vfile desc */
		2 pad_1		 bit (8) unal,
		2 comp_number	 bit (10) unal,	/* Component number */
		2 comp_offset	 bit (17) unal,	/* Offset with in component */
		2 pade_2		 bit (1) unal;


	call iox_$control (gat_rel_scan_iocb_ptr, "get_key", get_key_info_ptr, gat_code);
	if gat_code ^= 0
	then do;
		if gat_code = error_table_$end_of_info | gat_code = error_table_$no_record
		then gat_tuple_ptr = null ();
		else call error (gat_code);
	     end;
	else do;
		call iox_$control (gat_rel_scan_iocb_ptr, "record_status", addr (rs_info), gat_code);
		if gat_code ^= 0
		then call error (gat_code);
		else do;

/* Convert vfile_descriptor to tuple_id (tid) */
			vfd_ptr = addr (rs_info.descriptor);
			tid_ptr = addr (gat_tid);
			tid.non_std_desc = "1"b;
			tid.temp = "0"b;
			tid.file_id = gat_file_id;
			tid.comp_num = vfd.comp_number;
			tid.offset = vfd.comp_offset;

			gat_tuple_ptr = rs_info.record_ptr;
			call iox_$position (gat_rel_scan_iocb_ptr, 0, 1, gat_code); /* skip 1 record */
		     end;
	     end;

	return;

     end get_a_tuple;
%page;
fill_attribute_info: proc;

	key_offset = 0;
	do i = 1 to id_list.number_of_ids;
	     attr_no = id_list.id (i);

	     desc_ptr = addr (vrm_rel_desc.attr (attr_no).descriptor);

	     call vrmu_encode_key$compute_alignment_and_length (desc_ptr, key_offset,
		key_alignment, key_bit_len);

	     key_offset = key_offset + key_alignment;
	     vrm_collection_info.attribute (i).attr_index = attr_no;
	     vrm_collection_info.attribute (i).key_offset = key_offset;
	     vrm_collection_info.attribute (i).key_bit_len = key_bit_len;
	     key_offset = key_offset + key_bit_len;

	end;					/* do i */


	dcl     attr_no		 fixed bin;
	dcl     i			 fixed bin;
	dcl     key_alignment	 fixed bin;
	dcl     key_bit_len		 fixed bin;
	dcl     key_offset		 fixed bin;

     end fill_attribute_info;
%page;
calculate_collection_id: proc (attr_no, O_id);

/* This procedure obtains a unassigned collection id and returns it as O_id */

	dcl     attr_no		 fixed bin (17) parameter;
	dcl     O_id		 bit (36) aligned parameter;

	dcl     j			 fixed bin;
	dcl     available		 bit (1) init ("0"b);
	dcl     found		 bit (1);
	dcl     candidate_id	 bit (36) aligned based (addr (id_structure));
	dcl     1 id_structure	 aligned,
		2 index_no	 fixed bin (8) uns unal,
		2 pad		 bit (28) unal init ("0"b);

	do id_structure.index_no = 1 to 255 while (^available);
	     found = "0"b;
	     do j = 1 to vrm_open_info.number_of_index_collections;
		if vrm_open_info.index_collection (j).id = candidate_id then found = "1"b;
	     end;					/* do j = 1  */

	     if ^found then do;			/* got it */
		     O_id = candidate_id;
		     available = "1"b;
		end;				/* if ^found */
	end;					/* do 1 to 255 */

	if ^available then call error (mdbm_error_$max_indexes);


     end calculate_collection_id;
%page;
add_collection_info: proc;

	dcl     old_vrm_open_info_ptr	 ptr;


	voi_no_of_index_collections = vrm_open_info.number_of_index_collections + 1;
	old_vrm_open_info_ptr = vrm_open_info_ptr;
	allocate vrm_open_info in (wa) set (vrm_open_info_ptr);
	vrm_open_info.number_of_index_collections = vrm_open_info.number_of_index_collections - 1; /* So we can copy old info */
	vrm_open_info_ptr -> vrm_open_info = old_vrm_open_info_ptr -> vrm_open_info;
	vrm_open_info.number_of_index_collections = vrm_open_info.number_of_index_collections + 1; /* Original value */
	vrm_open_info.index_collection (voi_no_of_index_collections).id = O_index_collection_id;
	vrm_open_info.index_collection (voi_no_of_index_collections).info_ptr = vrm_collection_info_ptr;
	call vrm_open_man$set_open_info_ptr (vrm_open_info.opening_id, vrm_open_info_ptr);
	free old_vrm_open_info_ptr -> vrm_open_info in (wa);

     end add_collection_info;
%page;
remove_collection_info: proc;

	vrm_collection_info_ptr = vrm_open_info.index_collection (collection_index).info_ptr;
	attr_no = vrm_collection_info.attribute (1).attr_index;
	vrm_open_info.index_collection (collection_index).id = "0"b;
	vrm_open_info.index_collection (collection_index).info_ptr = null ();

     end remove_collection_info;
%page;
tidy_up: proc;

	if index_iocb_ptr ^= null () then call close_iocb (index_iocb_ptr);
	if scan_iocb_ptr ^= null () then call close_iocb (scan_iocb_ptr);
	if pk_iocb_ptr ^= null () then call close_iocb (pk_iocb_ptr);
	if change_bits_ptr ^= null () then free change_bits;
	if key_list_ptr ^= null () then free key_list;
	if get_key_info_ptr ^= null () then free get_key_info_ptr -> gk_info;
	if rs_info_ptr ^= null () then free rs_info;


     end tidy_up;


close_iocb: proc (iocb_ptr);

	dcl     iocb_ptr		 ptr parameter;

	dcl     code		 fixed bin (35);

	call iox_$close (iocb_ptr, code);
	call iox_$detach_iocb (iocb_ptr, code);		/* ignore code */
	call iox_$destroy_iocb (iocb_ptr, code);


     end close_iocb;





error: proc (ecode);

	dcl     ecode		 fixed bin (35);


	O_code = ecode;
	go to Exit;

     end error;
%page;
%include vrm_open_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_collection_info;
%page;
%include vrm_com;
%page;
%include dm_id_list;
%page;
%include vrm_tuple;
%page;
%include vrm_change_bits;
%page;
%include vrm_key_list;
%page;
%include vrm_index;
%page;
%include ak_info;
%page;
%include rs_info;
%page;
/* Area */

	dcl     wa		 area based (vrm_com.work_area_ptr);

/* Automatic */

	dcl     attr_no		 fixed bin (17);
	dcl     code		 fixed bin (35);
	dcl     collection_index	 fixed bin;
	dcl     file_id		 bit (7);
	dcl     found		 bit (1) aligned;
	dcl     get_key_info_ptr	 ptr;
	dcl     i			 fixed bin (17);
	dcl     index_iocb_ptr	 ptr;
	dcl     index_head		 char (3);
	dcl     key_found		 char (256) varying;
	dcl     pk_iocb_ptr		 ptr;
	dcl     scan_iocb_ptr	 ptr;
	dcl     tuple_id		 bit (36) aligned;
	dcl     ax		 fixed bin;
	dcl     x			 fixed bin;

/* Builtin */

	dcl     (addr,
	        char,
	        currentsize,
	        fixed,
	        ltrim,
	        null,
	        rel,
	        rtrim,
	        string,
	        substr,
	        unspec
	        )			 builtin;

/* Condition */

	dcl     cleanup		 condition;

/* Internal static */

	dcl     KSQR		 fixed bin (17) int static init (8);
	dcl     KSQU		 fixed bin (17) int static init (10);

/* External entries */

	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$position	 entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
	dcl     iox_$read_key	 entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
	dcl     iox_$seek_key	 entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
	dcl     iox_$write_record	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     vrm_open_man$get_open_info_ptr entry (bit (36) aligned, ptr, fixed bin (35));
	dcl     vrm_open_man$set_open_info_ptr entry (bit (36) aligned, ptr);
	dcl     vrmu_add_indexes	 entry (ptr, ptr, bit (36) aligned, fixed bin (35));
	dcl     vrmu_build_index_list	 entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     vrmu_encode_key$compute_alignment_and_length
				 entry (ptr, fixed bin, fixed bin, fixed bin);

/* External static */

	dcl     (
	        error_table_$unimplemented_version,
	        error_table_$end_of_info,
	        error_table_$no_record,
	        mdbm_error_$max_indexes,
	        dm_error_$collection_not_in_relation,
	        sys_info$max_seg_size,
	        vrm_data_$max_vfile_wait_time
	        )			 ext static fixed bin (35);

/* Structure */

	dcl     1 flags		 aligned,
		2 relation_must_be_empty bit (1) unal,
		2 index_is_clustering bit (1) unal,
		2 index_is_unique	 bit (1) unal,
		2 pad		 bit (33) unal;

	dcl     1 seek_head_info,
		2 relation_type	 fixed bin,
		2 n		 fixed bin,
		2 search_key	 char (3);


	dcl     desc_ptr		 ptr;

	dcl     1 descriptor	 based (desc_ptr),
		2 version		 bit (1) unal,
		2 type		 fixed bin (6) unsigned unal,
		2 packed		 bit (1) unal,
		2 number_dims	 bit (4) unal,
		2 size		 fixed bin (24) unsigned unal;

     end create_index;
