/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
get_description: proc (I_rel_opening_id, I_return_area_ptr, O_relation_description_ptr, O_code);

/* .		BEGIN_DESCRIPTION

	Allocate and fill in a relation_description structure for the
specified relation.

   .	          END_DESCRIPTION
*/

/* History

   83-01-15  R. Harvey:  Initially written
   83-02-17  R. Harvey:  Modified for version 3 relation_description by adding
	   attribute names.
*/
%page;
/* get_description: proc (I_rel_opening_id, I_return_area_ptr, O_relation_description_ptr, O_code); */


/*	    Parameters  */

	dcl     I_rel_opening_id	 bit (36) aligned parameter;
	dcl     I_return_area_ptr	 ptr parameter;
	dcl     O_relation_description_ptr ptr parameter;
	dcl     O_code		 fixed bin (35) parameter;


	O_code = 0;
	O_relation_description_ptr = null ();


	call vrm_open_man$get_open_info_ptr (I_rel_opening_id, vrm_open_info_ptr, code);
	if code ^= 0 then call error (code);

	vrm_rel_desc_ptr = vrm_open_info.relation_model_ptr;
	rd_number_of_attributes = vrm_rel_desc.number_attrs;
	rd_number_of_indices = vrm_open_info.number_of_index_collections + 1; /* one for the primary key */
	rd_maximum_number_of_attributes_per_index = vrm_rel_desc.number_primary_key_attrs;
	rd_maximum_attribute_name_length = 32;

	allocate relation_description in (return_area) set (relation_description_ptr);
	relation_description.version = RELATION_DESCRIPTION_VERSION_3;
	relation_description.record_collection_id = "111111111111111111111111111111111111"b;

	do i = 1 to rd_number_of_attributes;
	     relation_description.attribute (i).name =
		vrm_rel_desc.attr (i).name;
	     relation_description.attribute (i).descriptor_ptr =
		addr (vrm_rel_desc.attr (i).descriptor);
	end;


/* Copy primary key information */

	vrm_collection_info_ptr = vrm_open_info.primary_key_info_ptr;
	relation_description.index (1).collection_id = "0"b;
	relation_description.index (1).style = 0;	/* multi-field sorting */
	relation_description.index (1).number_of_attributes = vrm_rel_desc.number_primary_key_attrs;
	relation_description.index (1).flags.is_unique = "1"b;
	relation_description.index (1).flags.is_primary = "1"b;
	relation_description.index (1).flags.pad = "0"b;

	do j = 1 to vrm_collection_info.number_of_attributes;
	     relation_description.index (1).attribute (j) = vrm_collection_info.attribute (j).attr_index;
	end;

	do i = 1 to rd_number_of_indices - 1;
	     vrm_collection_info_ptr = vrm_open_info.index_collection (i).info_ptr;
	     relation_description.index (i + 1).collection_id = vrm_open_info.index_collection (i).id;
	     relation_description.index (i + 1).style = 0;/* multi-field sorting */
	     relation_description.index (i + 1).number_of_attributes = 1;
	     relation_description.index (i + 1).flags.is_unique = "0"b;
	     relation_description.index (i + 1).flags.is_primary = "0"b;
	     relation_description.index (i + 1).flags.pad = "0"b;
	     relation_description.index (i + 1).attribute (1) = vrm_collection_info.attribute (1).attr_index;
	end;

	O_relation_description_ptr = relation_description_ptr;
	O_code = 0;

Exit:	return;
%page;
error: proc (ecode);

	dcl     ecode		 fixed bin (35) parameter;

	O_code = ecode;
	goto Exit;

     end error;
%page;
%include vrm_open_info;
%page;
%include vrm_rel_desc;
%page;
%include vrm_collection_info;
%page;
%include dm_relation_description;
%page;
/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     (i, j)		 fixed bin;

/* Based */

	dcl     return_area		 area based (I_return_area_ptr);

/* Builtin */

	dcl     (addr, null)	 builtin;

/* External entry */

	dcl     vrm_open_man$get_open_info_ptr entry (bit (36) aligned, ptr, fixed bin (35));


     end get_description;
