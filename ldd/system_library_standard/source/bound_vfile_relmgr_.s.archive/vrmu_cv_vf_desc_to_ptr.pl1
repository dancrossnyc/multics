/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
vrmu_cv_vf_desc_to_ptr: proc (I_iocb_ptr, I_vfile_desc, O_record_ptr, O_record_len, O_code);

/*                     BEGIN_DESCRIPTION

The purpose of this procedure is to convert a vfile descriptor to
a pointer to the vfile_record.

                       END_DESCRIPTION

HISTORY

83-05-18  Roger Lackey : Originally written.

84-12-17  Thanh Nguyen : Added code to return code as mrds_error_$inconsistent_data_length
in case of record length is zero or record was deleted by another process 
running in parallel.
*/

	dcl     I_iocb_ptr		 ptr parameter;
	dcl     I_vfile_desc	 fixed bin (35) aligned parameter;
	dcl     O_record_ptr	 ptr parameter;
	dcl     O_record_len	 fixed bin (21) parameter;
	dcl     O_code		 fixed bin (35) parameter;
	dcl     code		 fixed bin (35);
	dcl     com_err_		 entry () options (variable);


	O_code, code = 0;
	O_record_ptr = null;
	O_record_len = 0;

	indx_cb_ptr = I_iocb_ptr -> iocb.open_data_ptr;
	desc = I_vfile_desc;

	vfd_ptr = addr (desc);

loop:	if vfd.comp > hbound (seg_ptr_array, 1) then call extend_seg_ptr_array;

	if seg_ptr_array (vfd.comp) = null then do;
		call msf_manager_$get_ptr (indx_cb.fcb_ptr, (vfd.comp), DONT_CREATE,
		     seg_ptr_array (vfd.comp), bcnt, O_code);
		if O_code ^= 0 then
		     return;
	     end;

	block_ptr = addrel (seg_ptr_array (vfd.comp), vfd.offset);
	if block_ptr -> record_block_structure.reserved.stationary = "0"b then do;
		record_len = length (block_ptr -> record_block_structure.block_tail.record);
		O_record_ptr = addrel (addr (block_ptr -> record_block_structure.block_tail.record), 1);
	     end;
	else do;
		if block_ptr -> record_block_structure.reserved.indirect then do;
			desc = block_ptr -> ind_structure.prev_desc;
			goto loop;
		     end;
		record_len = length (block_ptr -> stat_structure.record);
		O_record_ptr = addrel (addr (block_ptr -> stat_structure.record), 1);
	     end;
	if record_len = 0 | block_ptr -> block_head.is_this_block_free = "1"b then O_code = mrds_error_$inconsistent_data_length;
	else O_record_len = record_len;

	return;
%page;
extend_seg_ptr_array: proc;

	old_array_limit = seg_ptr_array_limit;
	old_array_ptr = seg_ptr_array_ptr;
	f_b_ptr = indx_cb.file_base_ptr;
	seg_ptr_array_limit = file_base.last_comp_num;
	allocate seg_ptr_array in (get_system_free_area_ () -> cb_area) set (seg_ptr_array_ptr);

	do i = 0 to old_array_limit;
	     seg_ptr_array (i) = old_array (i);
	end;
	do i = old_array_limit + 1 to seg_ptr_array_limit;
	     seg_ptr_array (i) = null ();
	end;

	free old_array;				/* in systemfree */


	dcl     cb_area		 area based;
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     i			 fixed bin;
	dcl     old_array_limit	 fixed bin;
	dcl     old_array_ptr	 ptr;
	dcl     old_array		 (0:old_array_limit) ptr based (old_array_ptr);

     end extend_seg_ptr_array;

%page;
%include vfile_indx;
%page;
%include vfile_indx_block_header;
%page;
%include iocb;
%page;
	dcl     vfd_ptr		 ptr;
	dcl     1 vfd		 based (vfd_ptr),
		2 comp		 fixed bin (17) unal,
		2 offset		 bit (18) unal;

	dcl     addrel		 builtin;
	dcl     bcnt		 fixed bin (24);
	dcl     DONT_CREATE		 bit (1) int static options (constant) init ("0"b);
	dcl     msf_manager_$get_ptr	 entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
	dcl     pos_ptr		 ptr;		/* This var is not referenced
						   but a compiler warning is issued
						   if it isn't here */
	dcl     block_ptr		 ptr;
	dcl     mrds_error_$inconsistent_data_length fixed bin (35) ext static;
	dcl     hbound		 builtin;
	dcl     record_len		 fixed bin (21);
	dcl     desc		 fixed bin (35) aligned;

     end vrmu_cv_vf_desc_to_ptr;
