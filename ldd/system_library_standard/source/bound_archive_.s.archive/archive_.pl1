/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


archive_: proc ();

/* *	ARCHIVE_ -- subroutine entriers for manipulating archives
   *
   *	archive_$get_component
   *	   Returns a pointer to a named archive component, given a pointer to the archive
   *	archive_$get_component_info
   *	   Finds a component and returns complete info about it.
   *	archive_$next_component
   *	   Returns a pointer to the next component in an archive.
   *	archive_$next_component_info
   *	   Returns complete info about the next component.
   *	archive_$list_components
   *	   Returns a list of archive components and info.
   *
   *	01/13/81, W. Olin Sibert
   */
/* Fixed bug detecting format error if only one, null, component (archive is just a header) 04/18/85 Steve Herbst */


/* *	Note: this procedure assumes that all archives do, in fact, contain only the strings
   *	archive_data_$ident and archive_data_$header_end to identify their headers. The use
   *	of archive_data_$header_begin and archive_data_$header_end was evidently an improvement
   *	which was never implemented, and can therefore be ignored here. No existing code in
   *	the system generates archives containing either of those strings. The archive command,
   *	in fact, cannot deal with such archives.
   */

dcl  P_archive_ptr pointer parameter;			/* Input: pointer to archive */
dcl  P_archive_bc fixed bin (24) parameter;		/* Input: archive bitcount */
						/* All entries take the same first two arguments */
dcl  P_component_name char (*) parameter;		/* Input: component to search for or update */
						/* Output for archive_$next_component */
dcl  P_component_ptr pointer parameter; 		/* Output: pointer to base of component */
						/* Input/Output for archive_$next_component("" _info) */
dcl  P_component_bc fixed bin (24) parameter;		/* Output: bitcount of component */
dcl  P_archive_component_info_ptr pointer parameter;	/* Input: pointer to archive_component_info to fill in */
dcl  P_info_version fixed bin parameter;		/* Input: version number of listing structure caller wants */
dcl  P_area_ptr pointer parameter;			/* Input: pointer to area for list */
dcl  P_n_components fixed bin;			/* Output: number of components in archive */
dcl  P_component_list_ptr pointer parameter;		/* Output: pointer to array of component infos */
dcl  P_code fixed bin (35) parameter;

dcl  archive_ptr pointer;				/* Pointer and size of the archive being worked on */
dcl  archive_bc fixed bin (24);
dcl  archive_size fixed bin (19);

dcl  component_name char (32);
dcl  component_ptr pointer;

dcl  header_ptr pointer;				/* All information about the current component */
dcl 1 comp_info like archive_component_info aligned automatic;

dcl  comp_list_ptr pointer;
dcl  n_components fixed bin;
dcl  comp_idx fixed bin;
dcl 1 comp_list (n_components) like archive_component_info aligned based (comp_list_ptr);
dcl  output_area_ptr pointer;
dcl  output_area area based (output_area_ptr);

dcl  info_sw bit (1) aligned;

dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));

dcl  error_table_$archive_fmt_err fixed bin (35) external static;
dcl  error_table_$bad_arg fixed bin (35) external static;
dcl  error_table_$no_component fixed bin (35) external static;
dcl  error_table_$not_archive fixed bin (35) external static;
dcl  error_table_$unimplemented_version fixed bin (35) external static;

dcl  archive_data_$ident char (8) aligned external static;
dcl  archive_data_$header_end char (8) aligned external static;

dcl (addrel, baseno, binary, divide, ltrim, null, pointer, rel, rtrim, size, string, substr, unspec, verify) builtin;

dcl  cleanup condition;

/*  */

archive_$get_component: entry (P_archive_ptr, P_archive_bc, P_component_name, P_component_ptr, P_component_bc, P_code);

	P_component_ptr = null ();
	P_component_bc = 0;
	info_sw = "0"b;
	goto GET_COMPONENT_COMMON;


archive_$get_component_info: entry (P_archive_ptr, P_archive_bc, P_component_name, P_archive_component_info_ptr, P_code);

	archive_component_info_ptr = P_archive_component_info_ptr;
	if archive_component_info.version ^= ARCHIVE_COMPONENT_INFO_VERSION_1 then
	     call FINISH (error_table_$unimplemented_version);

	info_sw = "1"b;
	goto GET_COMPONENT_COMMON;


GET_COMPONENT_COMMON:
	call CHECK_ARCHIVE;

	component_name = P_component_name;

	do header_ptr = (NEXT_HEADER_PTR ())
		repeat (NEXT_HEADER_PTR ())
		while (header_ptr ^= null ());

	     if comp_info.name = component_name then
		goto FOUND_COMPONENT;
	     end;

	call FINISH (error_table_$no_component);	/* never returns */

FOUND_COMPONENT:
	if info_sw then				/* only call convert_date_to_binary_ if needful, to */
	     call GET_ALL_COMPONENT_INFO;		/* avoid unnecessary expense. */

	if ^info_sw then do;			/* Return pointer and length */
	     P_component_ptr = comp_info.comp_ptr;
	     P_component_bc = comp_info.comp_bc;
	     end;
	else archive_component_info = comp_info;		/* Just fill in the structure from our copy */

	call FINISH (0);				/* All done, return successfully */

/*  */

archive_$next_component: entry (P_archive_ptr, P_archive_bc, P_component_ptr, P_component_bc, P_component_name, P_code);

	component_ptr = P_component_ptr;		/* Input/Output parameter */

	P_component_ptr = null ();			/* Initialize output arguments */
	P_component_bc = 0;
	P_component_name = "";
	info_sw = "0"b;
	goto NEXT_COMPONENT_COMMON;


archive_$next_component_info: entry (P_archive_ptr, P_archive_bc, P_component_ptr, P_archive_component_info_ptr, P_code);

	component_ptr = P_component_ptr;		/* Input/Output parameter */
	P_component_ptr = null ();			/* Initialize output argument */
	archive_component_info_ptr = P_archive_component_info_ptr;
	if archive_component_info.version ^= ARCHIVE_COMPONENT_INFO_VERSION_1 then
	     call FINISH (error_table_$unimplemented_version);

	info_sw = "1"b;
	goto NEXT_COMPONENT_COMMON;


NEXT_COMPONENT_COMMON:
	call CHECK_ARCHIVE; 			/* Get set up */

	if baseno (archive_ptr) ^= baseno (component_ptr) then /* Ought to do something about this */
	     if component_ptr ^= null () then		/* But don't reject the "first" flag */
		call FINISH (error_table_$bad_arg);

	if component_ptr = null () then		/* Set up for NEXT_HEADER_PTR protocol */
	     header_ptr = null ();
	else if binary (rel (component_ptr), 18) < size (archive_header) then  /* Must be a sensible pointer */
	     call FINISH (error_table_$bad_arg);
	else if binary (rel (component_ptr), 18) > archive_size then /* Must not be past the end */
	     call FINISH (error_table_$bad_arg);
	else if pointer (component_ptr, rel (component_ptr)) ^= component_ptr then /* Make sure it's a word boundary */
	     call FINISH (error_table_$bad_arg);
	else do;
	     header_ptr = addrel (component_ptr, 0 - size (archive_header)); /* Back up the header itself */
	     call GET_COMPONENT_INFO;
	     end;

	header_ptr = NEXT_HEADER_PTR ();		/* get the next one */

	if header_ptr = null () then do;		/* We have run out of components */
	     if info_sw then do;			/* Clear out the comp_info as well */
		unspec (archive_component_info) = ""b;
		archive_component_info.version = ARCHIVE_COMPONENT_INFO_VERSION_1;
		archive_component_info.comp_ptr = null ();
		end;
	     else P_component_bc = 0;

	     call FINISH (0);			/* All done with this archive */
	     end;

	P_component_ptr = comp_info.comp_ptr;		/* Return the Input/Output parameter */

	if info_sw then do; 			/* only call convert_date_to_binary_ if needful, to */
	     call GET_ALL_COMPONENT_INFO;		/* avoid unnecessary expense. */
	     archive_component_info = comp_info;
	     end;

	else do;					/* Otherwise, just return pointer and length */
	     P_component_bc = comp_info.comp_bc;
	     P_component_name = comp_info.name;
	     end;

	call FINISH (0);				/* All done, return successfully */

/*  */

archive_$list_components: entry (P_archive_ptr, P_archive_bc,
	P_info_version, P_area_ptr, P_component_list_ptr, P_n_components, P_code);

	output_area_ptr = P_area_ptr; 		/* Locate the area we shall allocate the list in */
	P_n_components = 0; 			/* Initialize output arguments */
	P_component_list_ptr = null ();

	if P_info_version ^= ARCHIVE_COMPONENT_INFO_VERSION_1 then /* Make sure we agree with the caller */
	     call FINISH (error_table_$unimplemented_version); /* about the info structure version */

	call CHECK_ARCHIVE; 			/* See if it's in the least OK */

	n_components = 0;				/* First, count the components -- this will also validate */
	header_ptr = null ();			/* the entire archive */

	do header_ptr = (NEXT_HEADER_PTR ())
		repeat (NEXT_HEADER_PTR ())
		while (header_ptr ^= null ());

	     n_components = n_components + 1;
	     end;

	if (n_components = 0) | (output_area_ptr = null ()) then do; /* Nothing there, or no list wanted */
	     P_n_components = n_components;
	     call FINISH (0);			/* Return successfully */
	     end;

	on cleanup begin;
	     if comp_list_ptr ^= null () then
		free comp_list in (output_area);
	     P_component_list_ptr = null ();		/* Don't let user think we didn't free this */
	     end;

	allocate comp_list in (output_area) set (comp_list_ptr);

	comp_idx = 1;
	do header_ptr = (NEXT_HEADER_PTR ())		/* Now, go through and list the components */
		repeat (NEXT_HEADER_PTR ())
		while (header_ptr ^= null ());

	     call GET_ALL_COMPONENT_INFO;		/* Fill in the whole thing */
	     comp_list (comp_idx) = comp_info;		/* and put it in the array */
	     comp_idx = comp_idx + 1; 		/* Advance to next component */
	     end;

	P_component_list_ptr = comp_list_ptr;
	P_n_components = n_components;

	call FINISH (0);				/* All done for listing */

/*  */

MAIN_RETURN:					/* This label is the only way out of the program */
	return;

FORMAT_ERROR:					/* General-purpose format error exit */
	if comp_list_ptr ^= null () then		/* Clean up anything we might have allocated */
	     free comp_list;
	comp_list_ptr = null ();

	call FINISH (error_table_$archive_fmt_err);



FINISH: proc (P_return_code);

dcl  P_return_code fixed bin (35) parameter;

/* This is just a convenient way of exiting and returning a specific error code */

	P_code = P_return_code;			/* Set the main procedure return code */
	goto MAIN_RETURN;

	end FINISH;



CHECK_ARCHIVE: proc ();

/* This procedure copies the standard parameters, and verifies that the
   segment does, indeed, seem to be an archive. */

	comp_list_ptr = null ();			/* For cleanup handler */
	archive_ptr = pointer (P_archive_ptr, 0);	/* Adjust to base of archive segment */

	archive_bc = P_archive_bc;
	archive_size = divide (archive_bc, 36, 19, 0);

	if archive_bc ^= (36 * archive_size) then	/* Can't be if bitcount is not word aligned */
	     call FINISH (error_table_$not_archive);

	header_ptr = null ();			/* Make NEXT_HEADER_PTR look for the first */

	if archive_size = 0 then			/* No components is OK, though perhaps undesired */
	     return;

	if archive_size < size (archive_header) then	/* Must have enough to be an archive */
	     call FINISH (error_table_$not_archive);

	if (archive_ptr -> archive_header.header_begin ^= archive_data_$ident) then
	     call FINISH (error_table_$not_archive);	/* Probably not, and this is a better message than */
						/* format error if it truly isn't an archive */

	if (archive_ptr -> archive_header.header_end ^= archive_data_$header_end) then
	     call FINISH (error_table_$not_archive);

	P_code = 0;				/* Set standard output parameter for success, and */
	return;					/* assume it's valid, and let someone else */
	end CHECK_ARCHIVE;				/* find out that it is not if need be. */

/*  */

NEXT_HEADER_PTR: proc () returns (pointer);

/* This procedure advances header_ptr to point to the header for the next component,
   validates the header, and returns the pointer to it. It assumes that header_ptr
   already points to a validated header, unless it is null, in which case it sets
   header_ptr to point to the first header in the archive.
   */

	if header_ptr = null () then			/* First component */
	     if archive_size = 0 then 		/* But, archive is empty */
		return (null ());
	     else header_ptr = archive_ptr;		/* really first */
	else do;
	     if binary (rel (header_ptr), 18) + size (archive_header) + comp_info.comp_lth >= archive_size then
		return (null ());			/* We have reached the last component */
	     header_ptr = addrel (header_ptr, (size (archive_header) + comp_info.comp_lth));
	     end;

	call GET_COMPONENT_INFO;			/* make sure this header seems OK, */
						/* and extract all the information from it */
	return (header_ptr);
	end NEXT_HEADER_PTR;

/*  */

GET_COMPONENT_INFO: proc ();

/* This procedure ascertains that header_ptr points to something looking
   reasonably like an archive component header. It verifies as well as it
   can that the times and the access are valid, although it does not actually
   calculate them. To fill in those values, GET_ALL_COMPONENT_INFO should be
   called.
   */

dcl  TIME_CHARACTERS char (13) internal static options (constant) init ("0123456789 ./");
dcl  MODE_CHARACTERS char (5) internal static options (constant) init ("rewa ");
dcl  BITCOUNT_CHARS char (10) internal static options (constant) init ("0123456789");



	if (header_ptr -> archive_header.header_begin ^= archive_data_$ident) then
	     goto FORMAT_ERROR;

	if (header_ptr -> archive_header.header_end ^= archive_data_$header_end) then
	     goto FORMAT_ERROR;

/* These machinations with the bitcount are necessary because some archives in the system contain
   the bitcount left justified in the eight character field, rather than right justified. How they
   got that way is anybodys guess, but if archive can handle them, this should, too.
   */

	if header_ptr -> archive_header.bit_count = "" then
	     goto FORMAT_ERROR;
	if verify (rtrim (ltrim (header_ptr -> archive_header.bit_count)), BITCOUNT_CHARS) ^= 0 then
	     goto FORMAT_ERROR;

	if verify (header_ptr -> archive_header.timeup, TIME_CHARACTERS) ^= 0 then
	     goto FORMAT_ERROR;
	if verify (header_ptr -> archive_header.time, TIME_CHARACTERS) ^= 0 then
	     goto FORMAT_ERROR;

	unspec (comp_info) = ""b;
	comp_info.version = ARCHIVE_COMPONENT_INFO_VERSION_1;	/* So it's safer to just return this structure */
	comp_info.comp_ptr = addrel (header_ptr, size (archive_header)); /* First data after header structure */
	comp_info.comp_bc = binary (ltrim (rtrim (header_ptr -> archive_header.bit_count)), 28);
						/* Avoid size condition here by using precision 28 */

	comp_info.name = header_ptr -> archive_header.name;
	comp_info.comp_lth = divide (comp_info.comp_bc + 35, 36, 18, 0);

	if archive_size < (binary (rel (comp_info.comp_ptr), 18) + comp_info.comp_lth) then
	     goto FORMAT_ERROR;			/* component extends past the end, sad to say */
						/* This will also catch generally oversize bitcounts */
	if verify (header_ptr -> archive_header.mode, MODE_CHARACTERS) ^= 0 then
	     goto FORMAT_ERROR;

	return;
	end GET_COMPONENT_INFO;

/*  */

GET_ALL_COMPONENT_INFO: proc ();

/* This procedure fills in all the rest of the comp_info structure, which is
   is only needed by some entrypoints.
   */

dcl 1 mode_str unaligned,				/* For mode testing */
    2 read char (1) unaligned,
    2 execute char (1) unaligned,
    2 write char (1) unaligned,
    2 pad char (1) unaligned;
dcl  code fixed bin (35);


	string (mode_str) = header_ptr -> archive_header.mode;
	comp_info.access = ""b;			/* Prepare to figure out the access modes */

	if mode_str.read = "r" then
	     substr (comp_info.access, 1, 1) = "1"b;	/* Read */
	else if mode_str.read ^= " " then
	     goto FORMAT_ERROR;

	if mode_str.execute = "e" then
	     substr (comp_info.access, 2, 1) = "1"b;	/* Execute */
	else if mode_str.execute ^= " " then
	     goto FORMAT_ERROR;

	if mode_str.write = "w" then
	     substr (comp_info.access, 3, 1) = "1"b;	/* Write */
	else if mode_str.write ^= " " then
	     goto FORMAT_ERROR;

	if (mode_str.pad ^= " ") & (mode_str.pad ^= "a") then /* Obsolete -- used to mean append */
	     goto FORMAT_ERROR;			/* Complain if it's wrong, anyway */

	call convert_date_to_binary_ (string (header_ptr -> archive_header.time), comp_info.time_modified, code);
	if code ^= 0 then				/* Just complain about archive badness, rather than */
	     goto FORMAT_ERROR;			/* whatever specific error it is */

	call convert_date_to_binary_ (string (header_ptr -> archive_header.timeup), comp_info.time_updated, code);
	if code ^= 0 then
	     goto FORMAT_ERROR;

	return;
	end GET_ALL_COMPONENT_INFO;

%page;	%include archive_header;
%page;	%include archive_component_info;

	end archive_;
