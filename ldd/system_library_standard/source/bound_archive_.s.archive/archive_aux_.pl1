/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
auxilliary subroutines used by the archive command
for special case handling.

	listwdir used to list the working directory
	inwdir used to find whether entry is in wdir
	free used to free storage allocated by listwdir

	active used to note to user attempt to use recursively

*/
/*
12/03/70	coded		J.W. Gintell
07/07/71	modified
Bug fixed 04/18/79 S. Herbst
*/
archive_aux_: proc;

dcl	(addr, bin, null, substr) builtin;
/* 
   */

listwdir:	entry(auxw_ptr,code);

dcl	auxw_ptr ptr;			/* pointer to structure */
dcl code fixed bin(35);

dcl	(get_system_free_area_, freen_) entry(ptr);
dcl	hcs_$star_list_ external entry(char(*),char(*),fixed bin(3),ptr,fixed bin,
	  fixed bin,ptr,ptr,fixed bin(35));
dcl hcs_$status_long entry(char(*), char(*), fixed bin, ptr, ptr, fixed bin(35));

declare 1 stat aligned,			/* Structure for status_long call */
	2 (type bit(2),
	   pad bit(34)) unaligned,
	2 dtm bit(36),
	2 pad1(5) fixed bin,
	2 (curlen bit(12),
	   bitcnt bit(24)) unaligned,
	2 pad2(2) fixed bin;

declare 1 wstructure aligned based(auxw_ptr),
	2 mustfree bit(1),		/* set to one after allocation complete */
	2 ecount fixed bin,	/* Number of entries in directory */
	2 wdir char(168) unaligned,		/* Working directory unaligned, filled by caller */
	2 eptr ptr,			/* pointer to entry structure */
	2 nptr ptr;			/* pointer to name structure */

dcl	area area based (areap);		/* for freeing */
dcl	areap ptr;			/* pointer to area */
dcl	lcount fixed bin(17);		/* number of links */
dcl	(j,k) fixed bin(17);

dcl	1 branches(ecount) based(eptr) aligned,	/* returned by star_ in area */
	 (2 type bit(2),			/* ask for segs only */
	  2 nname bit(16),			/* number of names */
	  2 nindex bit(18),			/* index to names array */
	  2 dtm bit(36),			/* date-time mod */
	  2 dtu bit(36),
	  2 mode bit(5),
	  2 pad bit(13),
	  2 records bit(18)) unaligned;

dcl	names (5000) char(32) aligned based (nptr);	/* Illegal PL/I but easier than computing # of names */


	call get_system_free_area_(areap);		/* get area for star handler */

	call hcs_$star_list_(wdir,"**",3,areap,ecount,lcount,eptr,nptr,code);
	ecount = ecount + lcount;		/* Update by number of links, to get total entries */
	if ecount > 0 then mustfree = "1"b;

	return;




inwdir:	entry(auxw_ptr,component_name,dtm,type,found) ;

dcl	component_name char(32);
dcl	type bit(2) aligned;
dcl	dtm bit(36) aligned;
dcl	found bit(1) aligned;

dcl xcode fixed bin(35);


	do k = 1 to ecount;			/* look at all branches */
	  do j = 1 to bin(eptr->branches.nname(k), 17);	/* look at all names */
	    if component_name = nptr->names(j+bin(eptr->branches.nindex(k), 17)-1) then do;
	      type = eptr->branches.type(k);
	     if type then dtm = eptr->branches.dtm(k);		/* Is branch (really should check non-dir) */
	     else do;				/* Link, chase it */
		call hcs_$status_long(wdir, component_name, 1, addr(stat), null, xcode);
		if xcode ^= 0 then go to nfnd;	/* Link target empty */
		dtm = stat.dtm;			/* Set date-time-seg updated */
		end;
	       found = "1"b;
	       return;
	    end;
	  end;
	end;

nfnd:	found = ""b;
	return;


free:	entry(auxw_ptr);

	if eptr ^= null then free eptr -> branches in (area);
	if nptr ^= null  then free nptr -> names in (area);
	return;

/**/
active:	entry(activeind);

dcl buffer char(120) varying;

dcl command_query_ entry options(variable);

declare 1 query_info aligned, 			/* structure for command_query_ */
	2 version fixed bin init(1),
	2 yes_or_no_sw bit(1) unal init("1"b),		/* require yes or no */
	2 suppress_name_sw bit(1) unal init("0"b),	/* print name with question */
	2 status_code fixed bin(35),			/* set to code of prompting question */
	2 query_code fixed bin(35) init(0);

dcl	activeind bit(1) aligned;

	query_info.status_code = 0;
	call command_query_(addr(query_info),buffer,"archive",
	  "Pending work in previous invocation will be lost if you proceed;^/do you wish to proceed?","");

	if substr(buffer,1,3) = "yes" then activeind = ""b;
				else activeind = "1"b;

end archive_aux_;
