/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to interrogate user if he wishes to un-protect a protected segment for updating purposes.
   Generalized from original of J Gintell  by C Garman, June 1972.
   Resurrected by E Stone Jan 1974 after being deleted accidently and changed to call the new acl primitives
   Calling sequences modified 03/29/79 by Steve Herbst
   */
update_handler_: proc (path, name, caller, access_switches, old_mode, code);

dcl  path char (*),					/* directory name of segment */
     name char (*),					/* entry name */
     caller char (*),				/* Name of calling command */
     access_switches bit (36),			/* whether access was forced */
     old_mode bit (36),				/* user's previous mode to restore */
     code fixed bin (35);				/* error code
						   = 0 if OK,
						   = 1 if no delete,
						   else std error code */

dcl access_forced bit (1) def (access_switches) pos (1);  /* whether access was forced */
dcl old_acl_entry bit (1) def (access_switches) pos (2);	/* whether an entry for the user already existed */

dcl  error_table_$moderr ext fixed bin (35);

dcl  command_query_ entry options (variable),
     get_group_id_ entry returns (char (32) aligned),
     hcs_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
     hcs_$delete_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
     hcs_$list_acl entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35));

declare 1 query_info aligned,				/* Structure for command_query_ */
        2 version fixed bin init (1),
        2 yes_or_no_sw bit (1) unal init ("1"b),		/* require yes or no */
        2 suppress_name_sw bit (1) unal init ("0"b),	/* print name with question */
        2 status_code fixed bin (35),			/* set to code of prompting question */
        2 query_code fixed bin (35) init (0);

dcl 1 seg_acl aligned,				/* structure used to add entry to acl */
    2 userid char (32) aligned,
    2 mode bit (36) aligned,
    2 ex_mode bit (36) aligned,
    2 status_code fixed bin (35);

dcl 1 del_acl aligned,				/* structure used to delete entry from acl */
    2 userid char (32),
    2 status_code fixed bin (35);


dcl  buffer char (150) varying;			/* place to receive answer from command_query_ */

dcl (addr, length, null, substr) builtin;

/*
   
   */
	access_switches = "00"b;

	query_info.status_code = error_table_$moderr;
	call command_query_ (addr (query_info), buffer, caller,
	"Do you want to update the protected segment ^R^a>^a^B?", path, name);

	if substr (buffer, 1, 2) = "no"
	     then do;

	     code = 1;				/* indicate answer wasn't yes */
	     return;
	end;

unprotect:
	seg_acl.userid = get_group_id_ ();
	seg_acl.status_code = 0;

	call hcs_$list_acl (path, name, null, null, addr (seg_acl), 1, code);
	if code ^= 0 then return;

	if seg_acl.status_code = 0 then do;		/* user already on ACL */
	     old_acl_entry = "1"b;
	     old_mode = seg_acl.mode;
	end;

	seg_acl.mode = "101"b;
	seg_acl.ex_mode = "0"b;

	call hcs_$add_acl_entries (path, name, addr (seg_acl), 1, code);

	if code = 0 then access_forced = "1"b;

	return;


reprotect: entry (path, name, access_switches, old_mode, code);

	if ^access_forced then return;

	if ^old_acl_entry then do;			/* delete forced access */
	     del_acl.userid = get_group_id_ ();
	     call hcs_$delete_acl_entries (path, name, addr (del_acl), 1, code);
	end;

	else do;					/* restore user's old access */
	     seg_acl.userid = get_group_id_ ();
	     seg_acl.mode = old_mode;
	     seg_acl.ex_mode = "00"b;

	     call hcs_$add_acl_entries (path, name, addr (seg_acl), 1, code);
	end;
						/* remove user from acl */

	return;

     end update_handler_;
