/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


archive_star_:	proc(dirname,starname,key,argptr,lastarg);

/*
Procedure used by the archive command to implement the star convention.

This procedure is called with the directory name and entryname
which is known to contain stars.  It uses the star handler to find all
the correct names and then  calls the archive command to perform the work.

The archive segments will be treated in alphabetical order.
*/
/*
12/6/69	JW Gintell	Originally coded as archive_t_star command.
1/27/70,7/15/70		modified
11/18/70			Transformed into archive_star_.
3/9/72			Modified to extend star convention
*/


dcl	dirname char(*);				/* directory in which * conventions is to be applied */
dcl	starname char(*);
dcl	key char(*);				/* key to be passed back */
dcl	argptr ptr;				/* pointer to argument list */
dcl	lastarg fixed bin;				/* count of number of arguments */

dcl	(areap,eptr,nptr) ptr init(null),		/* used for star handling */
	(code,ecount) fixed bin(17),

	1 entries(ecount) based(eptr) aligned,		/* structure for status call */
	  2 type bit(2) unaligned,
	  2 nname bit(16) unaligned,
	  2 nindex bit(18) unaligned,

	word(ecount) based(eptr) bit(36) aligned,	/* used for sort */
	saveword bit(36),

	names(n) char(32) aligned based(nptr),
	archive_name char(168),
	dirnamel fixed bin(17),
	n fixed bin(17),
	(i,j) fixed bin(17);

dcl						/* external entries */

	hcs_$star_ entry (char(*), char(*), fixed bin(2), ptr, fixed bin(17), ptr, ptr, fixed bin(17)),
	com_err_ entry options(variable),
	archive$star_entry entry (char(*),char(*),ptr,fixed bin),
	(get_system_free_area_, freen_) entry(ptr);

dcl system_area area(1024) based(areap);

dcl cleanup condition;

dcl (bin, index, null, substr) builtin;

/**/
	call get_system_free_area_(areap);			/* get area for call to star_ */
	on condition(cleanup) call free;

	call hcs_$star_(dirname, starname, 3 /* branches and links */, areap, ecount, eptr, nptr, code);

	if code ^= 0 then do;
	  call com_err_(code,"archive","^a>^a",dirname,starname);
	  return;
	end;

	do i = 1 to ecount-1;			/* sort the names of the segments */

	     do j = i+1 to 2 by -1 while(names(bin(entries(j-1).nindex, 17)) > names(bin(entries(j).nindex, 17)));

		saveword = word(j);
		word(j) = word(j-1);
		word(j-1) = saveword;
	     end;
	end;

	dirnamel = index(dirname," ") - 1;

	do i = 1 to ecount;				/* call archive for each segment */

	  n = bin(eptr->entries(i).nindex, 17);		/* pick out index to name */
	  archive_name = substr(dirname,1,dirnamel)||">"||names(n);	/* build archive name: dir>name */
	  call archive$star_entry(key,archive_name,argptr,lastarg);
	end;

	call free;

free:	procedure;

	if eptr^=null then free eptr->entries in(system_area);
	if nptr^=null then free nptr->names in(system_area);

end free;

end archive_star_;
