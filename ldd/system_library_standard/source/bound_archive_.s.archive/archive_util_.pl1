/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


archive_util_$next_element: proc (header_ptr, code);

/* archive utility procedure to search archive segments

   expect pointer to archive segment in header_ptr
   return code = 0 and header_ptr set to next element
   unless at end of segment or if a format error
   where header_ptr is left as given and code set to 1 if at end of segment
   or to 2 if a format error is discovered.

   first_element or first_dissected must be called first.
   thereafter, next_element or next_dissected must be called.
   Due to the use of internal static variables, only one archive at a time
   can be processed with this subroutine.

   Modified 781203 by PG to fix bug causing first_dissected to store code in wrong parameter.
   */

dcl  header_ptr ptr;
dcl  header_save ptr;

dcl  header_length_bits init (900) fixed bin static;

dcl (code, scode, stype, icode) fixed bin (17),
     bitcnt fixed bin (24),
     highoffset internal static fixed bin (17);

dcl  flag fixed bin (17);

dcl  cv_dec_ entry (char (*) aligned, fixed bin (24)),
     hcs_$status_mins external entry (ptr, fixed bin (17), fixed bin (24), fixed bin (17));

dcl  n fixed bin (24);

dcl  next ptr;

dcl  archive_data_$ident ext char (8) aligned;
dcl  archive_data_$header_begin ext char (8) aligned;

/* builtins */

dcl (addrel, bin, divide, null, rel, size) builtin;

/* include files */

%include archive_header;

	flag, icode = 0;

start:
	call cv_dec_ (header_ptr -> archive_header.bit_count, n);
	next = addrel (header_ptr, divide (n + header_length_bits + 35, 36, 17, 0));
	if bin (rel (next), 17) < highoffset then go to continue;
	if bin (rel (next), 17) = highoffset then do;
	     icode = 1;header_ptr = null; go to comretn;
	end;
	icode = 2;header_ptr = null;go to comretn;

continue:
	header_ptr = null;				/* initialize for end of archive state */
	if next -> archive_header.header_begin = archive_data_$ident then header_ptr = next;
	else if next -> archive_header.header_begin = archive_data_$header_begin then header_ptr = next;
	if header_ptr ^= next then icode = 2;		/* format error */

comretn:
	if flag = 1 then go to disected_return;
	if flag = 2 then go to search_return;
	code = icode;
	return;
						/*  */
first_element: entry (header_ptr, code);

	icode, flag = 0;

first_elt2:
	highoffset = 0;
	call hcs_$status_mins (header_ptr, stype, bitcnt, scode);
	if scode ^= 0 then do;
	     icode = scode;
	     go to comretn;
	end;
	highoffset = divide (bitcnt+35, 36, 17, 0);
	if highoffset = 0 then do;
	     icode = 1;
	     go to comretn;
	end;
	next = header_ptr;
	go to continue;

disected_element: entry (header_ptr, segptr, segname, bit_count, code5);

dcl  segptr ptr,
     code5 fixed bin (17),
     segname char (32) aligned,
     bit_count fixed bin (24);

	flag = 1;
	icode = 0;
	go to start;

disected_return:
	if header_ptr = null then
	     do;
	     segptr = null;
	     segname = "";
	     bit_count = 0;
	     code5 = icode;
	     return;
	end;

	call cv_dec_ (header_ptr -> archive_header.bit_count, bit_count);
	segptr = addrel (header_ptr, size (archive_header));
	segname = header_ptr -> archive_header.name;
	code5 = icode;
	return;
						/*  */
first_disected: entry (header_ptr, segptr, segname, bit_count, code5);

	flag = 1;
	icode = 0;
	go to first_elt2;

search:	entry (header_ptr, segptr, segname, code4);

dcl  code4 fixed bin (17);

	flag = 2;
	icode = 0;
	header_save = header_ptr;
	next = header_ptr;
	go to continue;

search_return:
	if header_ptr = null then do;
	     segptr = null;
	     code4 = icode;
	     header_ptr = header_save;
	     return;
	end;

	if segname ^= header_ptr -> archive_header.name then go to start;
	segptr = addrel (header_ptr, size (archive_header));
	code4 = icode;
	header_ptr = header_save;
	return;

     end						/* archive_util_ */;
