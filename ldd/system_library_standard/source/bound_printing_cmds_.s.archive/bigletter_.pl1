/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


bigletter_: proc (inchar, writer);

/* BIGLETTER_ - Create "big letters" for printing.
   Used by IO Daemon subroutine "head_sheet_" and routine "make_tape_labels", and others.

   This routine can make two sizes of letters: 9x8 large letters, and 5x5 small ones.
   The letters are printed according to a format matrix which shows where a mark should be made.
   Each input letter is looked up in a "translation alphabet" -- if not found, the letter is skipped.
   Only 132 characters will be put out on a line - this is 13 9x8 letters or 22 5x5 letters.

   An entry point is provided for the user who insists on making his own alphabet and
   format matrix, for the 8x9 case only. the $init entry sets this up, and the $var is used to write.

   THVV */

dcl  inchar char (*);				/* Input character string to be written. */

dcl  writer entry (ptr, fixed bin);			/* Input user program to write one line. */

dcl 1 letters (0:128) based (bigp) aligned,		/* The matrix to be used. Subscript 0 is not used. */
    2 bits bit (item) aligned;			/* 36 or 72 bit elements. */

dcl 1 letter based (letp) aligned,			/* A single letter in the array. */
    2 bitrow (high) bit (wide) unal;			/* .. consists of a matrix of bits */

dcl 1 letters9 (0: 128) based (bigp) aligned,		/* Special for 9x8 */
    2 bits bit (72) aligned;

dcl 1 letter9 based (letp) aligned,
    2 bitrow9 bit (72);

dcl 1 letters5 (0: 128) based (bigp) aligned,		/* Special for 5x5 */
    2 bits bit (36) aligned;

dcl 1 letter5 based (letp) aligned,
    2 bitrow5 bit (36);

dcl  cx fixed bin (8) unal based (addr (c));		/* For convert char to number in fast case. */

dcl  i fixed bin,					/* index in input string */
     ii fixed bin,					/* horizontal index in output char */
     m fixed bin,					/* Constant part of above */
     row fixed bin,					/* vertical index in output */
     inch char (22),				/* Copy of input. */
     incl fixed bin,				/* Length of input. */
     x fixed bin,					/* horizontal index in output buffer */
     k fixed bin,					/* index of character in alphabet. */
     c char (1) aligned,				/* temp for one char of inchar */
     big_letterp ptr int static init (null),		/* pointer to user-supplied format matrix */
     alpha char (128) aligned,			/* actual lookup alphabet used. */
     item fixed bin,				/* width of element in "letters" -- 36 or 72 */
     high fixed bin,				/* letter height */
     wide fixed bin,				/* letter width */
     bigp ptr,					/* pointer to actual alphabet format matrix */
     letp ptr;					/* pointer to current letter format matrix */

dcl  alphabet char (128) aligned int static init ("");	/* user-supplied lookup alphabet */
dcl  fill char (1) aligned int static init ("*");		/* user-supplied fill character */

dcl (letseg_$letseg, letseg_$littles) fixed bin ext;	/* System alphabet format matrices */

dcl (null, length, substr, index) builtin;

dcl  linebuf char (132) aligned;			/* Output buffer for one line. */

/* ===================================================== */

regular:	bigp = addr (letseg_$letseg);			/* Regular 9 x 8 big letters, upper and lower case. */
	inch = inchar;				/* Copy input for speed. */
	incl = length (inchar) + 1 - verify (reverse (inchar), " ");
	m = 0;
	do row = 1 to 9;				/* Will put out nine lines. */
	     linebuf = "";				/* Clean out line buffer. */
	     x = 1;				/* Reset to left margin. */

	     do i = 1 to incl;			/* Loop over the input string. */
		c = substr (inch, i, 1);		/* Get one character. */
		if unspec (c) = "000001000"b then do;	/* handle backpsace */
		     if x > 10 then x = x - 10;	/* .. overstriking will work */
		     go to skip0;
		end;
		if x > 125 then go to skip0;		/* write max of 132 */
		k = cx - 31;
		if k <= 0 then go to skip0;
		if k = 1 then do;			/* Special-case blanks. */
		     x = x +10;
		     go to skip0;
		end;

		if fill ^= " " then c = fill;		/* Default makes all *'s - user can change. */
		letp = addr (letters9 (k));		/* Find format matrix for the "K"th letter */
		do ii = 1 to 8;			/* Minor loop is over the letter width. */
		     if substr (bitrow9, m+ii, 1) then
			substr (linebuf, x, 1) = c;
		     x = x + 1;			/* Go to next column */
		end;
		x = x + 2;			/* Make room between letters. */

skip0:	     end;

	     call writer (addr (linebuf), 132);		/* Give the line to the user procedure. */
	     m = m + 8;				/* Increment array index. */
	end;
	return;					/* Finished. */

/* Entry point to make 5 x 5 characters. */

five:	entry (inchar, writer);

	bigp = addr (letseg_$littles);		/* Find 5x5 letters. */
	inch = inchar;				/* Copy input for speed. */
	incl = length (inchar) + 1 - verify (reverse (inchar), " ");
	m = 0;
	do row = 1 to 5;				/* Will put out five lines. */
	     linebuf = "";				/* Clean out line buffer. */
	     x = 1;				/* Reset to left margin. */

	     do i = 1 to incl;			/* Loop over the input string. */
		c = substr (inch, i, 1);		/* Get one character. */
		if unspec (c) = "000001000"b then do;	/* handle backpsace */
		     if x > 7 then x = x - 7;		/* .. overstriking will work */
		     go to skip1;
		end;
		if x > 128 then go to skip1;		/* write max of 132 */
		k = cx - 31;
		if k <= 0 then go to skip1;
		if k = 1 then do;			/* Special-case blanks. */
		     x = x + 7;
		     go to skip1;
		end;

		if fill ^= " " then c = fill;		/* Default makes all *'s - user can change. */
		letp = addr (letters5 (k));		/* Find format matrix for the "K"th letter */
		do ii = 1 to 5;			/* Minor loop is over the letter width. */
		     if substr (bitrow5, m+ii, 1) then
			substr (linebuf, x, 1) = c;
		     x = x + 1;			/* Go to next column */
		end;
		x = x + 2;			/* Make room between letters. */

skip1:	     end;

	     call writer (addr (linebuf), 132);		/* Give the line to the user procedure. */
	     m = m + 5;				/* Increment array index. */
	end;
	return;					/* Finished. */

/* Entry to use user-specified alphabel for 9 x 8 characters */

var:	entry (inchar, writer);

	if big_letterp = null then go to regular;	/* If user never init'ed, use regular big letters */
	bigp = big_letterp;				/* Retrieve saved matrix pointer */
	alpha = alphabet;				/* .. and saved lookup alphabet */

	wide = 8;					/* Set sizes */
	high = 9;					/* ... */
	item = 72;				/* ... */

/* The main loop is on the height of the letters. */

	inch = inchar;				/* Copy input for speed. */
	incl = length (inchar) + 1 - verify (reverse (inchar), " ");
	do row = 1 to high;				/* Will put out "high" lines. */
	     linebuf = "";				/* Clean out line buffer. */
	     x = 1;				/* Reset to left margin. */

	     do i = 1 to incl;			/* Loop over the input string. */
		c = substr (inch, i, 1);		/* Get one character. */
		if unspec (c) = "000001000"b then do;	/* handle backpsace */
		     if x > (wide+2) then x = x-wide-2; /* .. overstriking will work */
		     go to skip;
		end;
		if x+wide > 133 then go to skip;	/* write max of 132 */
		k = index (alpha, c);		/* Look up input character in lookup alphabet */
		if k = 0 then go to skip;		/* If not found, ignore character. */

		if fill ^= " " then c = fill;		/* Default makes all *'s - user can change. */
		letp = addr (letters (k));		/* Find format matrix for the "K"th letter */
		do ii = 1 to wide;			/* Minor loop is over the letter width. */
		     if substr (bitrow (row), ii, 1) then
			substr (linebuf, x, 1) = c;
		     x = x + 1;			/* Go to next column */
		end;
		x = x + 2;			/* Make room between letters. */

skip:	     end;

	     call writer (addr (linebuf), 132);		/* Give the line to the user procedure. */

	end;
	return;					/* Finished. */

/* --------------------------------------------- */

init:	entry (xp, a, f);				/* Entry for the user who wants to play. */

dcl  xp ptr, (a, f) char (*);

	fill = f;
	alphabet = a;
	big_letterp = xp;

	return;

     end bigletter_;
