/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
     Modified to allow blocks to be joined to the definition section.
                                                   END HISTORY COMMENTS */


pakbit_:	procedure ;

/*        Modified for separate static on 06/15/75 by Eugene E Wiatrowski    */
/*	Modified on 03/21/72 at 09:45:38 by R F Mabee.
	by RFM on 21 March 1972 for relocation bits structure version (part of new object format).
	by RHG on 8 August 1970 to suppress listing of relocation bits
*/
  
	/* This procedure collects and packs the words of relocation bits
	   and then outputs them to the assembler's scratch segment */

% include concom ;
%	include	alm_options;
% include objnfo ;
%include segnfo;

dcl (buff, j, nl, n, nr, i, ik, rpc, bits, itemp) fixed bin (26) ; 
dcl (lbits, rbits) fixed bin (26); 

dcl eb_data_$stat_len ext fixed bin(26);
dcl eb_data_$separate_static ext bit(1) aligned;

dcl pakrtn label local;

dcl
	object_$objst ext entry (fixed bin (26), fixed bin (26)),
	object_$getbtx ext entry ( fixed bin (26), fixed bin (26), fixed bin (26) ),
	object_$gtblk ext entry ( fixed bin (26), fixed bin (26), fixed bin (26) ),
	object_$getbdf ext entry ( fixed bin (26), fixed bin (26), fixed bin (26) ),
	object_$getbst ext entry ( fixed bin (26), fixed bin (26), fixed bin (26) );

dcl	iword fixed bin(26),
	01 word aligned based(addr(iword)),
		02 (left, right) fixed bin(18) unsigned unaligned;

dcl	tx_word(0:262143) fixed bin(26) aligned based(eb_data_$segnfo.text);

dcl	01 lk_sym_def_overlay (0:32767) based(eb_data_$segnfo.scrtch),
	  02 (lk_rel, lk_word, st_rel, st_word, df_rel, df_word, pad1, pad2) fixed bin(26) aligned;

dcl (utils_$or, utils_$ls, utils_$rs) external entry ( fixed bin (26), fixed bin (26) ) returns ( fixed bin (26) );

 declare	reloc_vers internal static fixed bin (26) initial (1);

	/* output text count */
	rpc = istpc ;
	if tnewobject ^= 0 then do;
		call object_$objst (rpc, reloc_vers);
		rpc = rpc + 1;
		end;

	call object_$objst( rpc, itxcnt ) ;

	rpc = rpc + 1 ;

	lbits = 0 ;

	rbits = 0 ;

	bits = 0 ;

	j = 0 ;

	buff = 0 ;

	pakrtn = label_975 ;

	itemp = itxpc - 1 ;

text_loop:	
	do i = 0 to  itemp ;
		call object_$getbtx(i, lbits, rbits ) ;
		iword = tx_word(i);

		go to label_5000 ;
label_975:
		tx_word(i) = iword;

end text_loop ;



	/* output the last word if there is more in the buffer */

	if j = 0 then go to label_1000 ;

	call object_$objst(rpc,buff ) ;

	rpc = rpc + 1 ;


	/* output the linkage bits count */

label_1000:

	if tnewobject ^= 0 then do;
		call object_$objst (rpc, reloc_vers);
		rpc = rpc + 1;
		end;
	
	/* output the linkage bits count */

	call object_$objst( rpc, ilkcnt ) ;

	rpc = rpc + 1 ;

	lbits = 0 ;

	rbits = 0 ;

	bits = 0 ;

	j = 0 ;

	buff = 0 ;

	pakrtn = label_1075 ;


          /* no need to generate relocation bits for separate static section */

	if eb_data_$separate_static
	   then do;
	        itemp = (eb_data_$stat_len + ilkpc) - 1;
	        ik = eb_data_$stat_len;
	        end;
	   else do;
	        itemp = ilkpc - 1;
	        ik = 0;
	        end;

link_loop:

	do i = ik to itemp ;

		call object_$gtblk (i, lbits, rbits ) ;
		iword = lk_word(i);

		go to label_5000 ;

label_1075:
		lk_word(i) = iword;

end link_loop ;


	/* output the last word of the linkage buffer */

	if j = 0 then go to label_1200 ;

	call object_$objst(rpc, buff ) ;

	rpc = rpc + 1 ;

	/* process the definition relocation bits */

label_1200:
	j = 0 ;
	buff = 0 ;
	lbits = 0 ;
	rbits = 0 ;
	bits = 0 ;

	if tnewobject ^= 0 then do;
		call object_$objst (rpc, reloc_vers);
		rpc = rpc + 1;
		end;

	/* output the definition relocation bits count then the definition bits */

	call object_$objst(rpc, idfcnt ) ;
	rpc = rpc + 1 ;

	pakrtn = label_1250;	/* process internal definitions */

	do i = itxpc to itxpc+new_definition_length-1;
		call object_$getbtx(i, lbits, rbits);
		iword = tx_word(i);
		goto label_5000;
label_1250:
		tx_word(i) = iword;
	  end;

	pakrtn = label_1275 ;	/* add explicit definition section */
	itemp = idfpc - 1 ;

definition_loop:
	do i = 0 to itemp ;
		call object_$getbdf(i, lbits, rbits ) ;
		iword = df_word(i);
		go to label_5000 ;
label_1275:
		df_word(i) = iword;
	end definition_loop ;

	if j = 0 then go to label_1100 ;

	call object_$objst(rpc, buff ) ;

	rpc = rpc + 1 ;



	/* process the symbol relocation bits */

label_1100:

	j = 0 ;

	buff = 0 ;

	lbits = 0 ;

	rbits = 0 ;

	bits = 0 ;


	if tnewobject ^= 0 then do;
		call object_$objst (rpc, reloc_vers);
		rpc = rpc + 1;
		end;

	/* output the symbol relocation bits count then the symbol bits */


	call object_$objst(rpc, istcnt ) ;

	rpc = rpc + 1 ;

	pakrtn = label_1175 ;

	itemp = istpc - 1 ;

symbol_loop:

	do i = 0 to itemp ;

		call object_$getbst(i, lbits, rbits ) ;
		iword = st_word(i);

		go to label_5000 ;

label_1175:
		st_word(i) = iword;

end symbol_loop ;





	istpc = rpc ;
	if j = 0 then return ;
	call object_$objst(istpc, buff ) ;
	istpc = istpc + 1 ;

	return ;		/* as all bits have been processed */





	/* internal routine to process relocation bits patterns as retrieved by the GETxxx routines */
	/* The patterns are contained in the right halves of full words ( in lbits and rbits ).
		This internal routine concatenates the relocation bits and outputs them when a full word is filled. */ 



label_5000:
	if lbits = 27 /* 33o */ then do; /* relocate definition offsets */
		lbits = 21 /* 25o */; /* true defn relocation */
		word.left = word.left + new_definition_length;
	  end;
	if rbits = 27 /* 33o */ then do; /* relocate definition offsets */
		rbits = 21 /* 25o */; /* true defn relocation */
		word.right = word.right + new_definition_length;
	  end;

	nl = 1 ;

	nr = 1 ;

	if lbits ^= 0 then nl = 5 ;

	if rbits ^= 0 then nr = 5 ;

	n = nl + nr ;

	bits = utils_$or(utils_$ls(lbits,nr), rbits ) ;

	if ( j + n ) > 36 then go to label_5050 ;

	buff = utils_$or(buff,utils_$ls(bits,36-n-j)) ;

	j = j + n ;

	go to label_5080 ;

label_5050:

	buff = utils_$or(buff,utils_$rs(bits,n-(36-j))) ;

	call object_$objst(rpc,buff) ;

	buff = 0 ;

	rpc = rpc + 1 ;

	j = j + n - 36 ;

	buff = utils_$ls(bits,36-j) ;

label_5080:

	/* return to the proper main loop */

	go to pakrtn ;

end pakbit_;
