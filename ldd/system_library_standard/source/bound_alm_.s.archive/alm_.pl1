/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
     Written to be a general subroutine level interface to ALM.
  2) change(86-11-24,JRGray), approve(86-11-24,MCR7507),
     audit(86-11-25,RWaters), install(86-11-26,MR12.0-1228):
     Changed (PBF) to properly return error_codes for various error conditions.
  3) change(2016-01-05,Swenson), approve(2016-01-05,MCR10002):
     Fixed ALM buffer overrun error (ticket #89) that occurs on long source
     pathnames.
                                                   END HISTORY COMMENTS */

alm_:	proc(ALM_INFO_PTR, ALM_ARGS_PTR, severity, code);

/*	This procedure was written to provide a generalized subroutine
	interface to ALM. This will allow various subsystems and compiler
	to utilize ALM.
*/

/*	P A R A M E T E R S	*/
dcl	(ALM_INFO_PTR, ALM_ARGS_PTR) ptr parameter;
dcl	severity fixed bin parameter;
dcl	code fixed bin(35) parameter;

/*	S T A T I C   S E C T I O N	*/
dcl	recursive bit(1) static init("0"b);

/*	A U T O M A T I C   S E C T I O N       */
dcl	argument char(argument_len) based(argument_ptr);
dcl	argument_len fixed bin(21);
dcl	argument_ptr ptr;
dcl	bit_count fixed bin(24);
dcl	caller_ptr ptr;
dcl	canonical_str char(24);
dcl	date char(24) aligned;
dcl	decor fixed bin(35);
dcl	default_str char(24);
dcl	first_time_thru bit(1);
dcl	(i, n) fixed bin;
dcl	no_target_given bit(1) init("0"b);
dcl	target_value fixed bin;
dcl	temp_ptrs(2) ptr init((2) null);
dcl	trimmed_entryname char(32);

dcl	cleanup condition;
dcl	null builtin;

dcl	alm_cross_reference_ entry;
dcl	alm_include_file_$first_file entry(char(*));
dcl	alm_merge_$alm_merge_ entry;
dcl	clock_ entry returns(fixed bin(71));
dcl	com_err_ entry options(variable);
dcl	cu_$caller_ptr entry returns(ptr);
dcl	date_time_ entry(fixed bin(71), char(*) aligned);
dcl	get_group_id_ entry returns(char(32) aligned);
dcl	get_temp_segments_ entry(char(*), (*) ptr, fixed bin(35));
dcl	glpl_$genlas entry;
dcl	hcs_$get_max_length_seg entry(ptr, fixed bin(19), fixed bin(35));
dcl	hcs_$status_mins entry(ptr, fixed bin(2), fixed bin(24), fixed bin(35));
dcl	lstman_$blkasn entry(fixed bin(17), fixed bin(17), fixed bin(17), fixed bin(17)) returns(fixed bin(17));
dcl	make_alm_object_map_ entry(fixed bin(26));
dcl	make_object_map_ entry(ptr, fixed bin(26), fixed bin(26), fixed bin(26), fixed bin(26), fixed bin(35));
dcl	mexp_$cleanup entry;
dcl	mexp_$init entry(fixed bin(35));
dcl	object_info_$brief entry(ptr, fixed bin(24), ptr, fixed bin(35));
dcl	pakbit_$pakbit_ entry;
dcl	pass1_$pass1_ entry( fixed bin(35), fixed bin(17), bit(1), bit(1));
dcl	pass2_$pass2_ entry( fixed bin(35), fixed bin(17), bit(1), bit(1));
dcl	postp1_$postp1_ entry;
dcl	postp2_$postp2_ entry;
dcl	prlst_$prlst_ entry(char(*));
dcl	prnter_$general_abort entry(char(*));
dcl	release_temp_segments_ entry(char(*), (*) ptr, fixed bin(35));
dcl	system_type_ entry(char(*), char(*), fixed bin(17), fixed bin(35));

dcl	eb_data_$abort_assembly external static label;
dcl	eb_data_$alm_arg_ptr ptr ext;
dcl	eb_data_$alm_arg_count fixed bin ext;
dcl	eb_data_$curr_char_no fixed bin(17) external;
dcl	eb_data_$lavptr ptr ext;	/* ptr to ALM's scratch segment of list structures */
dcl	eb_data_$list_component external fixed bin;
dcl	eb_data_$listing_max_length fixed bin(19) ext;
dcl	eb_data_$mexp_argno fixed bin ext;
dcl	1 eb_data_$oulst external, 2 oulst char(680) aligned;
dcl	eb_data_$per_process_static_sw fixed bin ext;
dcl	eb_data_$varcom_size external fixed bin(17);
dcl	eb_data_$who_am_I char(12) external;
dcl	error_table_$null_info_ptr fixed bin(35) external;
dcl	error_table_$request_pending fixed bin(35) external;
dcl	error_table_$translation_aborted fixed bin(35) external;
dcl	error_table_$translation_failed fixed bin(35) external;
dcl	error_table_$unimplemented_version fixed bin(35) external;
dcl	error_table_$zero_length_seg fixed bin(35) external;
dcl	new_sthedr_$generator external static char(8);
dcl	new_sthedr_$gen_number external static fixed bin;

dcl	01 OBJECT_INFO like object_info;

%include alm_info;
%include alm_data;
%include alm_options;
%include concom;
%include erflgs;
%include lstcom;
%include object_info;
%include objnfo;
%include segnfo;
%include std_symbol_header;
%include sthedr;
%include system_types;
%include varcom;

	severity = 5;
	alm_info_ptr = ALM_INFO_PTR;
	alm_args_ptr = ALM_ARGS_PTR;
	if alm_info_ptr = null | alm_args_ptr = null then do;
		code = error_table_$null_info_ptr;
		return;
	  end;
	if alm_info.version ^= ALM_INFO_V1 | alm_args.version ^= ALM_ARGS_V1 then do;
		code = error_table_$unimplemented_version;
		return;
	  end;
	if recursive then do;
		code = error_table_$request_pending;
		return;
	  end;
	if alm_info.source_ptr = null | alm_info.object_ptr = null then do;
		code = error_table_$null_info_ptr;
		return;
	  end;
	if alm_info.source_bc = 0 then do;
		code = error_table_$zero_length_seg;
		return;
	  end;

	new_sthedr_$generator = alm_info.generator;
	new_sthedr_$gen_number = alm_info.gen_number;
	new_sthedr_$alm_version_name = alm_info.gen_version;
	if alm_info.gen_created = 0 then do;
		caller_ptr = ptr(cu_$caller_ptr(), 0);
		call hcs_$status_mins(caller_ptr, (0), bit_count, code); /* get bit count for next call */
		if code ^= 0 then sthedr_$alm_creation_date = clock();
		else do;
		            OBJECT_INFO.version_number = object_info_version_2;
			  call object_info_$brief(caller_ptr, bit_count, addr(OBJECT_INFO), code); /* get creation date */
			  if code ^= 0 then sthedr_$alm_creation_date = clock();
			  else sthedr_$alm_creation_date = OBJECT_INFO.symbp -> std_symbol_header.object_created;
		  end;
	  end;
	else sthedr_$alm_creation_date = alm_info.gen_created;
	new_sthedr_$alm_creation_date = sthedr_$alm_creation_date;

on        cleanup call cleanup_handler;
	recursive = "1"b;

	if alm_info.brief then tquietsw = 1;
	else tquietsw = 0;

	if alm_info.list then do;
		tnolst = 0;
		call hcs_$get_max_length_seg(alm_info.list_component_ptr, eb_data_$listing_max_length, code);
		if code ^=0 then call complain("Unable to get max length of listing segment.");
	  end;
	else tnolst = 1;

	if alm_info.symbols then tnoxref = tnolst;	/* only set when there is to be a list */
	else tnoxref = 1;

	if alm_info.target = "" then target_value = L68_SYSTEM;
	/* target = SYSTEM_TYPE_NAME(L68_SYSTEM); This did something once... */
	else do;
		call system_type_((alm_info.target), canonical_str, target_value, code);
		if code ^= 0 then call complain(alm_info.target);
	  end;


	tcheckcompatibility = 0;
	tnewmachine, tnewcall, tnewobject = 1;

	trimmed_entryname = before(alm_info.source_entryname || " ", ".alm ");
	trimmed_entryname = before(trimmed_entryname, ".ex ");


	call get_temp_segments_("alm_", temp_ptrs, code);
	if code^=0 then call complain("Unable to get temp segments.");
	eb_data_$lavptr = temp_ptrs(1);
	eb_data_$segnfo.scrtch = temp_ptrs(2);
	eb_data_$abort_assembly = abort;

	eb_data_$segnfo.text = alm_info.object_ptr;
	eb_data_$segnfo.source = alm_info.source_ptr;
	eb_data_$segnfo.list = alm_info.list_component_ptr;
	eb_data_$segnfo.list_fcb = alm_info.list_fcb_ptr;
	eb_data_$segnfo.srclen = divide(alm_info.source_bc, 9, 21, 0);
	eb_data_$segnfo.lstlen = 0;
	eb_data_$list_component = 0;
	eb_data_$alm_arg_count = alm_args.arg_count;
	eb_data_$alm_arg_ptr = addr(alm_args.arg);
	eb_data_$mexp_argno = 0;
	severity = 4;		/* in case of aborts */

/* - - - - - - - - - Begin processing the assembly - - - - - - - - */
	do i = 1 to eb_data_$varcom_size;	/* clear all of varcom */
		brk(i) = 0;
	  end;
	brk(1), nbrk(1) = ibsp;	/* set the break characters */
	stkc = 40;	/* set up the stack counter */
	nboxes = 211;	/* set up the number of boxes */	/*THIS COULD BE DONE STATICALLY INSTAIN eb_data_ */
	ndpcls = addr(pclst);	/* set up the ends of the lists */
	ndltls = addr(litlst);	/* "            "             " */
	ndlkls = addr(lnklst);	/* "            "             " */
	ndtvls = addr(tvlst);	/* "            "             " */
	do i = 1 to 36;		/* clear the error flags */
		flgvec(i) = 0;
	  end;
	tfatal = 0;		/* most severe error */
	eb_data_$per_process_static_sw = 0;

	call glpl_$genlas;			/* initialize free storage */

	sthedr_$seg_name = trimmed_entryname;
	new_sthedr_$comment = alm_info.option_string;
	new_sthedr_$user_id = get_group_id_();
	sthedr_$time_of_translation, new_sthedr_$time_of_translation = clock_();

	call date_time_(sthedr_$time_of_translation, date);
	call prlst_$prlst_("ASSEMBLY LISTING OF SEGMENT " || alm_info.source_path);
	call prlst_$prlst_("ASSEMBLED ON:	" || date);
	call prlst_$prlst_("OPTIONS USED:	" || alm_info.option_string);
	call prlst_$prlst_("ASSEMBLED BY:	" || new_sthedr_$alm_version_name);
	call date_time_(sthedr_$alm_creation_date, date);
	call prlst_$prlst_("ASSEMBLER CREATED:	" || date);
	call prlst_$prlst_("");		/* add a blank line */

	txtlen, itxpc, ilkpc, istpc, idfpc, itxcnt, ilkcnt, istcnt, idfcnt = 0;
	eb_data_$curr_char_no = 0;
	myblk = lstman_$blkasn(1, 0, 0, 0);
	tpass1 = 1;
	call alm_include_file_$first_file(trimmed_entryname);
	binlin = 0;
	call mexp_$init(code);
	if code ^= 0 then goto abort;

	/* The next few lines initialize decor to the current system type.
	   The decor_name array(data1)is built by alm_table_tool, who checks
	   that decor names and system_type_ names are in correspondence */

	call system_type_("", default_str, (0), code);
	do n = 1 to hbound(data1.decor, 1) while(rtrim(default_str) ^= data1.decor(n).name);
	  end;
	if n > hbound(data1.decor, 1)
	    then call prnter_$general_abort("Assembler error. Please notify assembler maintanence personel.");
	decor = data1.decor(n).number;

	call pass1_$pass1_(decor, target_value, no_target_given, first_time_thru);
	call mexp_$cleanup;

	tpass1 = 0;
	tpost1 = 1;
	call postp1_$postp1_;

	tpost1 = 0;
	eb_data_$curr_char_no = 0;
	tpass2 = 1;
	source_printed = ""b;
	call alm_include_file_$first_file(trimmed_entryname);
	binlin = 0;
	call mexp_$init(code);
	if code ^= 0 then goto abort;
	call pass2_$pass2_(decor, target_value, no_target_given, first_time_thru);
	/* pass2_ will check each instruction for compatibility with the decor value */
	call mexp_$cleanup;

	tpass2 = 0;
	tpostp = 1;
	source = addr(oulst); begin_line = 1; srclen = 680;	/*fudge the source pointer for prnam*/
	call postp2_$postp2_;

	tpostp = 0;
	call pakbit_$pakbit_;
	call alm_merge_$alm_merge_;
	if tnoxref = 0 then call alm_cross_reference_();
	severity = tfatal;
	if tfatal < 3 then call prlst_$prlst_("

NO FATAL ERRORS");
	else call prlst_$prlst_("

FATAL ERRORS ENCOUNTERED");

abort:	if code=0 then call release_temp_segments_("alm_", temp_ptrs, code);
	else call release_temp_segments_("alm_", temp_ptrs, 0);

	if tnewobject = 0 then do;
		 call make_object_map_(text, itxpc, ilkpc, istpc, txtlen/* in bits */, code);
		if code^=0 then call complain("An error was encountered in completing the object segment" || alm_info.source_entryname);
	  end;
	else call make_alm_object_map_(txtlen);
	alm_info.object_bc = eb_data_$segnfo.txtlen;

	if tnolst = 0 then do;
		alm_info.list_bc = eb_data_$segnfo.lstlen * 9;
		alm_info.list_component = eb_data_$list_component;
	  end;
	recursive = "0"b;
	if code = 0 then
	     if severity = 3 then code = error_table_$translation_failed;
	     else if severity = 4 then code = error_table_$translation_aborted;
	return;

abandon_assembly:
	recursive = "0"b;
	severity = 4;
	return;

cleanup_handler:	proc;
	if temp_ptrs(1) ^= null() then call release_temp_segments_("alm_", temp_ptrs, 0);
	call mexp_$cleanup;
	recursive = "0"b;
end cleanup_handler;

complain:	proc(message);
dcl	message char(*);

	if tquietsw ^= 1 then call com_err_(code, eb_data_$who_am_I, message);
	goto abandon_assembly;
end complain;

end alm_;
