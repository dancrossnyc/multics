/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
     Modified to support *heap references.
                                                   END HISTORY COMMENTS */


varevl_:
     procedure (xwhat, xbasno, xval, xadmod, xb29, xaddr) returns (fixed bin (26));
						/*  evaluate variable fields for the Multics assembler (ma_6180). */


/*   Modified 3/8/77 by Noel I. Morris to handle segment$symbol.
        Modified for separate static on 06/15/75 by Eugene E Wiatrowski    
	Modified 740905 by PG to know about pr0...pr7.
   by RFM on 15 January 1973 to add an option to not read the modifier.
   by RHG on 15 June 1971 to add "(" and ")" to the list of legal field terminators (for "call", etc)
   by RFM and RHG on 22 November 1972 to _n_o_t set prntr on expevl_ error.
   by RHG on 2 June 1971 to set prntr on expevl_ error
   by RHG on 25 May 1971 to allow "," to terminate a field too
   by RHG on 29 March 1971 at 1703 to spot illegal field terminator
   by NA on June 28, 1970 at 2159 for the new CODTAB
*/

/* There are six modes of entry to VAREVL. Two are for external */
/* references, two for internal references, and two for boolean */
/* references. the routines are careful to generate the proper */
/* linkages for external references, to evaluate literals */
/* properly, and to check for errors of all types. parentheses */
/* are allowed in the internal expressions for nesting. */


/* INCLUDE FILES FOR VAREVL */

% include concom;
% include varcom;
% include codtab;
% include erflgs;
% include lcsect;
% include lclit;
/*  */

/* INTERBAL STATIC DATA */
declare  ixvrvl_notag fixed bin init (0);

/*  EXTERNAL ENTRIES USED BY VAREVL */

declare  getid_$getid_ ext entry,
         getid_$getnam ext entry,
         prnter_$prnter_ entry (char (*), fixed bin),
         utils_$abort ext entry,
         inputs_$next ext entry,
         litevl_$litevl_ entry (fixed bin (26), fixed bin (26), fixed bin (26));

/* EXTERNAL FUNCTIONS USED BY VAREVL */

declare  lstman_$namasn entry (fixed bin (26)) returns (fixed bin (26)),
         lstman_$blkasn ext entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
         lstman_$lnkasn ext entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
         table_ entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26)) returns (fixed bin (26)),
         glpl_$clh entry (fixed bin) returns (fixed bin),
         modevl_$modevl_ entry (fixed bin (26)) returns (fixed bin (26)),
         expevl_$expevl_ entry (fixed bin (26), fixed bin (26), fixed bin (26)) returns (fixed bin (26));

/*  EXTERNAL DATA USED BY VAREVL */

declare (eb_data_$asym (2), eb_data_$atext (2), eb_data_$alink (2), eb_data_$astat (2), eb_data_$asys (2)) ext fixed bin (35);
declare eb_data_$aheap(2) ext fixed bin(35);

/* LABEL VARIABLES USED BY VAREVL */
	

declare  evlrtn label local;

/*  AUTOMATIC DATA USED BY VAREVL */

declare (admod, b29, basno, blk, i, iaddr,
         inexp, junk, snlnk, tbool, tmpno, tself, txnam,
         txtern, type, val, varevl_answer, xaddr, xadmod,
         xbasno, xb29, xnlnk, xval, xwhat) fixed bin (26);

/* BASED */

declare	1 acc aligned based (addr (eb_data_$varcom.sym (1))),
	  2 count unaligned fixed bin (8),
	  2 string unaligned char (3);

/*  */
/* - - - - - MAIN ENTRY POINT, Check type of call and branch to it. */

	iaddr = 0;
	tbool = 0;				/* FALSE */
	if xwhat = ixvrvl then go to label_200;
	if xwhat = ixvrvl_notag then goto label_200;
	if xwhat = ixvrvp then go to label_210;
	if xwhat = invrvl then go to label_130;
	if xwhat = invrvp then go to label_160;
	if xwhat = ibvrvl then go to label_110;
	if xwhat = ibvrvp then go to label_140;
	

	call prnter_$prnter_ ("fatal error in the assembler (VAREVL)", 101);
	call utils_$abort;

/* boolean entry without current break. */
label_110:
	tbool = 1;				/* TRUE */

/* arithmetic entry without current break. */
label_130:
	call getid_$getid_;
	go to label_170;

/* boolean entry with current break. */
label_140:
	tbool = 1;				/* TRUE */

/* normal entry with current break. */
label_160:
	sym (1) = 0;
label_170:
	admod = 0;
	varevl_answer = 1;				/* TRUE */
	txtern = 0;				/* FALSE */
	if (brk (1) = iequal & sym (1) = 0) then go to label_500;
	evlrtn = label_1100;
	go to label_3000;

/* process possible external field without current break. */
label_200:
	call getid_$getid_;
	go to label_220;


/* process possible external field with current break. */
label_210:
	sym (1) = 0;
label_220:
	tbool = 0;				/* FALSE */
	inexp = 0;
	txtern = 1;				/* TRUE */
	varevl_answer = 1;				/* TRUE */


/* check first break for possible external symbol. */
	if (brk (1) = ilpb & sym (1) = 0) then go to label_300;
	if (brk (1) = ivlin & sym (1) ^= 0) then go to label_400;
	if (brk (1) = idolr & sym (1) ^= 0) then go to label_290;
	if (brk (1) = iequal & sym (1) = 0) then go to label_500;
	if (brk (1) = istar | brk (1) = islash | sym (1) = 0) then go to label_600;
	go to label_700;




/* process segname$symbol */
label_290:
	tself = 0;
	snlnk = lstman_$namasn (sym (1));
	call getid_$getid_;

	if sym (1) ^= 0 then do;
	     xnlnk = lstman_$namasn (sym (1));
	     sym (1) = 0;
	     go to label_320;
	end;

	else do;
	     xnlnk = 0;
	     go to label_312;
	end;



/* process external symbol in pointed brackets. */
label_300:
	call getid_$getnam;
	if (sym (1) = 0 | brk (1) ^= irpb) then go to label_2000;
	call inputs_$next;
	if (brk (1) ^= ivlin) then go to label_2000;
	tself = 0;				/* FALSE */
	if (sym (1) ^= eb_data_$atext (1) | sym (2) ^= eb_data_$atext (2)) then go to label_302;
	tself = 1;				/* TRUE */
	snlnk = 0;
	go to label_310;
label_302:
	if (sym (1) ^= eb_data_$alink (1) | sym (2) ^= eb_data_$alink (2)) then go to label_304;
	tself = 1;				/* TRUE */
	snlnk = 1;
	go to label_310;
label_304:
	if (sym (1) ^= eb_data_$asym (1) | sym (2) ^= eb_data_$asym (2)) then go to label_305;
	tself = 1;				/* TRUE */
	snlnk = 2;
	go to label_310;
label_305:
	if (sym (1) ^= eb_data_$astat (1) | sym (2) ^= eb_data_$astat (2)) then go to label_306;
	tself = 1;
	snlnk = 4;
	go to label_310;
label_306:
	if (sym (1) ^= eb_data_$asys (1) | sym (2) ^= eb_data_$asys (2)) then go to label_307;
	tself = 1;
	snlnk = 5;
	go to label_310;
label_307:
	/* add support for *heap links */
	if (sym (1) = eb_data_$aheap (1) | sym (2) = eb_data_$aheap (2)) then do;
		tself = 1;
		snlnk = 6;
		goto label_310;
	  end;
	tself = 0;				/* FALSE */
	snlnk = lstman_$namasn (sym (1));

/* type 3 address, external name without external symbol. */
label_310:
	call check_external_name;
	if (txnam ^= 0) then go to label_320;
label_312:
	type = 3;
	if (tself ^= 0) then type = 1;
	evlrtn = label_330;
	go to label_3000;


/* type 4 address, external name with external symbol. */
label_320:
	type = 4;
	if (tself ^= 0) then type = 5;
	evlrtn = label_330;
	go to label_3100;


/* generate type block for external name and external symbol. */
label_330:
	blk = lstman_$blkasn (type, snlnk, xnlnk, 0);
	go to label_1000;




/* process base number in front of vertical line. */
label_400:
	if acc.count = 3
	then if substr (acc.string, 1, 2) = "pr"
	     then do;
		     basno = index ("01234567", substr (acc.string, 3, 1)) - 1;

		     if basno ^= -1		/* if pr0...pr7 */
		     then go to label_420;
		end;

	do i = 1 to 8;
	     basno = i - 1;
	     if (sym (1) = symbas (i)) then go to label_420;
	end;

	if (table_ (iserch, sym (1), basno, (clint), junk) ^= 0) then go to label_420;
	basno = 0;
	varevl_answer = 0;				/* FALSE */
	prntu = 1;				/* TRUE */


label_420:
	call check_external_name;
	if (txnam ^= 0) then go to label_440;


/* type 6 address, base specified without external symbol. */
	type = 6;
	evlrtn = label_1000;
	go to label_3000;


/* type 2 address, base specified with external symbol. */
label_440:
	type = 2;
	evlrtn = label_450;
	go to label_3100;


/* generate type block for base register and external symbol. */
label_450:
	blk = lstman_$blkasn (type, basno * 32768, xnlnk, 0); /* utils_$ls (basno, 15) */
	go to label_1000;




/* break is =, evaluate literal. */
label_500:
	call litevl_$litevl_ (inexp, admod, txtern);
	type = 0;
	if (admod = mdu | admod = mdl) then go to label_1010;
	iaddr = lplit;
	go to label_1010;




/* star or slash break implies internal, go to it. */
label_600:
	go to label_710;




/* plus or minus break, segref or basref symbol possible. */
label_700:
	if (table_ (iserch, sym (1), val, (clext), junk) ^= 0) then go to label_720;
	if (table_ (iserch, sym (1), val, (clstk), junk) ^= 0) then go to label_730;


/* internal symbol, process it. */
label_710:
	evlrtn = label_1000;
	type = 0;
	go to label_3000;


/* segref or basref symbol, setup block and type. */
label_720:
	blk = val;
	type = glpl_$clh (blk + 1);
	sym (1) = 0;
	evlrtn = label_1000;
	go to label_3100;


/* stack reference, set relative pointer and type. */
label_730:
	tmpno = val;
	type = 7;
	sym (1) = 0;
	evlrtn = label_1000;
	go to label_3100;

/* common entry after evaluating variable field, get modifier, */
/* establish linkage, address, local modifier, and b29, */
/* and return to caller with terminal break character. */


label_1000:
	admod = 0;
	if brk (1) = icomma then if xwhat ^= ixvrvl_notag then admod = modevl_$modevl_ (brk (1));
label_1010:
	go to address_type (type);

/* type 0, normal address, internal and b29 off. */
label_1100:
address_type (0):
	if (brk (1) ^= ivlin) then go to label_1110;
	basno = inexp;
	if txtern ^= 0 then goto label_420;
label_1110:

	basno = 0;
	val = inexp;
	b29 = 0;
	go to label_1900;


/* types 1 thru 5, reference requires linkage through type-block. */
address_type (1):
address_type (2):
address_type (3):
address_type (4):
address_type (5):
	val = lstman_$lnkasn (blk, inexp, admod, iaddr);
	basno = lp;
	admod = mri;
	b29 = 1;
	iaddr = lpsect;
	go to label_1900;


/* type 6, augmented reference requiring no linkage. */
address_type (6):
	val = inexp;
	b29 = 1;
	go to label_1900;


/* stack reference, generate reference without linkage. */
address_type (7):
	val = tmpno+inexp;
	basno = sp;
	b29 = 1;
	if (iaddr ^= 0) then prntr = 1;		/* TRUE */
	iaddr = 0;
	go to label_1900;

/* common return section, set external values and return. */
label_1900:
	i = brk (1);
	if i ^= isp then if i ^= inl then if i ^= iquot then if i ^= icomma
			then if i ^= irpar then if i ^= ilpar then prnte = 1;
label_1905:
	xbasno = basno;
	xval = val;
	xadmod = admod;
	xb29 = b29;
	xaddr = iaddr;
	return (varevl_answer);


/* field error, set f flag and make null return. */
label_2000:
	prntf = 1;				/* TRUE */
	varevl_answer = 0;				/* FALSE */
	basno = 0;
	val = 0;
	admod = 0;
	b29 = 0;
	go to label_1905;

/* interlude to internal variable field evaluation routine. this */
/* routine evaluates expressions consisting only of internal re- */
/* ferences using a stack evaluation method. nested parentheses are */
/* allowed, and are taken to delimit subexpressions. the interlude */
/* checks for call requirements and checks the results for field */
/* errors, any such causing varevl_answer to be false. */


/* normal entry, break in brk, and perhaps symbol in sym. */
label_3000:
	junk = expevl_$expevl_ (tbool, inexp, iaddr);
label_3010:
	go to evlrtn;


/* entry after external symbol encountered. symbol must be zero, */
/* and break must be + or -, anything else terminates scan. */
label_3100:
	if (sym (1) = 0 & (brk (1) = iplus | brk (1) = iminus)) then go to label_3000;
	go to label_3010;

/* chkxnm, internal subroutine used to check for external name */
/* after a vertical line. */

check_external_name:
	procedure;

	     call getid_$getid_;
	     if (brk (1) ^= ilsb | sym (1) ^= 0)
		then do;
		xnlnk = 0;
		txnam = 0;			/* FALSE */
		return;
	     end;

	     call getid_$getid_;
	     if (brk (1) ^= irsb | sym (1) = 0) then go to label_2000;
	     xnlnk = lstman_$namasn (sym (1));
	     txnam = 1;				/* TRUE */
	     call getid_$getid_;
	     return;

	end check_external_name;

     end varevl_;
