/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

table_:
     procedure (dowhat, xsym, xval, xflags, xaddr) returns (fixed binary (17));
			/* assignment table routine for symbols in the program being assembled */

/*
	Modified for new hashing schema on 02/10/76 by Eugene E Wiatrowski.
	Modified on 11/28/72 at 19:21:37 by R F Mabee.
	by RFM on 28 August and 22 November 1972 to fix little bugs.
	by RFM on 23 July 1972 to keep referencing line numbers for each name.
			This makes it possible for ALM to produce a cross reference table.
	by RHG on 3 June 1971 to fix flagging of multiply defined symbols
			and to let multiply defined symbols keep the first value given them
	by RHG on 22 Sept 1970 to submit an unexpanded copy (source got expanded accidentally)
	by RHG on 17 August 1970 at 1842 to spot multiply defined symbols of different classes
*/



/* for entering and searching for symbols in table.
   the table consists of a list structure in 211 parallel
   lists, one entry for each item in the table. each entry
   consists of a pointer block containing the symbol value and
   flags, and a pointer to the symbol stored in a variable
   length ascii type string. Both search and assign entries
   are contained in this program. */

% include alm_xref_nodes;

% include	alm_options;

%include varcom;

%include concom;

%include erflgs;

%include codtab;


 declare	 (dowhat, xsym (8), xval, xflags, xcls, xslink,
	words (-2:5), boxno, tval, tflags, yflags, tcls, xaddr,
	l, k, link, nwrds) fixed binary (26),
	result fixed binary, line_no fixed binary (35),
	tree_rel fixed binary, tree_ptr pointer,
	line_list_rel bit (18), line_list_ptr pointer,
	last_line_rel bit (18), last_line_ptr pointer;
 declare	internal_return label local;

	/* EXTERNAL FUNCTIONS */
 declare	glpl_$clh external entry (fixed binary (26)) returns (fixed binary (26)),
	glpl_$crh external entry (fixed binary (26)) returns (fixed binary (26)),
	glpl_$cwrd external entry (fixed binary (26)) returns (fixed binary (26)),
	utils_$rs external entry (fixed binary (26), fixed binary (26)) returns (fixed binary (26)),
	glpl_$glwrd external entry (fixed binary (26), fixed binary (26)) returns (fixed binary (26)),
	glpl_$setblk external entry (fixed binary(26), fixed binary(26)) returns (fixed binary(26)),
	utils_$nswrds external entry (fixed binary (26)) returns (fixed binary (26)),
	utils_$compare_acc external entry (fixed binary (26), fixed binary (26)) returns (fixed binary (26));

	/* EXTERNAL ENTRIES */
 declare	prnter_$prnter_ external entry (char (*)),
	glpl_$slwrd external entry (fixed binary (26), fixed binary (26), fixed binary (26)),
	glpl_$storl external entry (fixed binary (26), fixed binary (26)),
	glpl_$storr external entry (fixed binary (26), fixed binary (26)),
	utils_$abort external entry;

	declare (eb_data_$rho, eb_data_$twop18) external fixed binary (35) aligned;

 declare	eb_data_$lavptr external pointer;

 declare	 (slink, xslink_ptr) pointer;

dcl	mod_2_sum	bit(36) aligned;

dcl	bit_array(8) bit(36) aligned based;

 declare  1 bsym based aligned,
	  2 nc fixed bin (8) unal,
	  2 ch char (0 refer (bsym.nc)) unal;

 declare	1 word based aligned,
	  2 left bit (18) unaligned,
	  2 right bit (18) unaligned;

 declare	twop18 fixed binary (20) internal static initial (262144);

 declare	 (abs, addr, addrel, bit, fixed, mod, pointer, rel) builtin;


label_0100:
	result = 1;		/* Preset for happy return. */

	if (dowhat = iassgn) then goto label_1000;
	if (dowhat = iserch) then goto label_2000;
	call prnter_$prnter_ ("fatal error in the assembler (TABLE)"); call utils_$abort;


/* assign entry, first search table. */
label_1000:

	internal_return = label_1010;
	goto label_3000;

/* analyze result of table search. */
label_1010:

	if (link = 0) then goto label_1020;
	goto label_1030;

/* not now in table, hence assign directly. */
label_1020:


	if xsym (1) > eb_data_$twop18 then xslink = glpl_$setblk (xsym (1),nwrds); /* assign symbol if there is one in SYM */

	words (0), words (-1), words (-2) = 0;
	words (1) = glpl_$glwrd (xslink, box (boxno));
	words (2) = glpl_$glwrd (xflags,xval);
	if (xflags = fmlcrf) then goto label_1026;
	words (3) = glpl_$glwrd (xaddr, fixed (addr (xval) -> word.left, 18));
	l = 3;
	if xflags = 0 then l = 5;
label_1022:

	link = glpl_$setblk (words (-2), l + 3) + 3;
	box (boxno) = link;
	if (xflags = fmlcrf) then xaddr = link;

/* Insert new symbol into tree as well as hash table. */

	if tnoxref ^= 0 then goto all_done;		/* Don't bother unless user wants result. */

	tree_ptr = addr (symbol_tree_rel);
tree_loop:	tree_rel = tree_ptr -> symbol_tree_node.high_sublist;		/* Which must be the first word. */
		if tree_rel = 0 then goto tree_done;
		tree_ptr = pointer (eb_data_$lavptr, tree_rel);
		if utils_$compare_acc (xslink, fixed (tree_ptr -> symbol_tree_node.name_rel, 18)) < 0 then tree_ptr = addrel (tree_ptr, 1);
		goto tree_loop;
tree_done:tree_ptr -> symbol_tree_node.high_sublist = link - 3;
	goto make_line_node;

/* set up entry for multiple location counters. */
label_1026:

	words (3) = 0;
	words (4) = xval;
	words (5) = 0;
	l = 5;
	goto label_1022;

/* entry found table, check for consistency and redefinition. */
label_1030:

	if (unspec (tflags) & unspec (fdef)) = "0"b then goto label_1040;
	if unspec (tflags) & unspec (fset) then goto label_1070;
	if unspec (tflags) & unspec (fmul) then goto label_1062;
	if tcls = xcls then if tval = xval then goto label_1050;
	if unspec (xflags) & unspec (fdef) then goto label_1060;
	goto label_1050;

/* assign new value and flags to undefined symbol. */
label_1040:
	unspec (yflags) = unspec (tflags) | unspec (xflags);
	call glpl_$slwrd (link+1, yflags, xval);

	if xflags = fmlcrf then do;
		call glpl_$slwrd (link + 2, 0, 0);
		call glpl_$slwrd (link + 3, 0, xval);
		call glpl_$slwrd (link + 4, 0, 0);
		end;
	else call glpl_$slwrd (link + 2, xaddr, fixed (addr (xval) -> word.left, 18));

/* simple return for equivalent assignments. */
label_1050:

	goto make_line_node;

/* error if multiple non-equivalent assignment. */
label_1060:
	unspec (yflags) = unspec (tflags) | unspec (fmul);
	call glpl_$storl (link+1, yflags);
label_1062:
	prntm = 1;
	result = 0;
	goto make_line_node;

label_1070:

	call glpl_$slwrd (link+1,xflags,xval);
	call glpl_$storr (link + 2, fixed (addr (xval) -> word.left, 18));
	goto make_line_node;


/* search entry, first search table. */
label_2000:

	internal_return = label_2010;
	goto label_3000;

/* analyze search results. */
label_2010:

	if xcls ^= 0 then if xcls ^= tcls then goto label_2020;
	if link ^= 0 then if unspec (tflags) & unspec (fdef) then goto label_2030;

/* value not found, give bad return. */
label_2020:

	xval = 0;
	xaddr = 0;
	return (0);

/* found in table, check for errors and return value. */
label_2030:

	if unspec (tflags) & unspec (fmul) then prntm = 1;
	if unspec (tflags) & unspec (fphs) then prntp = 1;
	xval = tval;
	xaddr = 0;
	if (unspec (tflags) & unspec (flocrf)) = unspec (flocrf) then xaddr = glpl_$clh (link+2);
	if (unspec (tflags) & unspec (fmlcrf)) = unspec (fmlcrf) then xaddr = link;

/* Come here on both search and assign entries, to append line number node to list for symbol. */

make_line_node:
	if tnoxref ^= 0 then goto all_done;		/* Skip this extra work if xref not needed. */
	if binlin = 0 then goto all_done;		/* Initialization reference (probably). */

	line_no = binlin + fixed (rel (include_info_stack), 18) * twop18;
	line_list_ptr, tree_ptr = pointer (eb_data_$lavptr, link - 1);
line_loop:line_list_rel = line_list_ptr -> line_node.backward_rel;
	if line_list_rel = "0"b then do;
		line_list_ptr = tree_ptr;
		goto line_end;
		end;
	line_list_ptr = pointer (eb_data_$lavptr, line_list_rel);
	if line_list_ptr -> line_node.line_no > line_no then goto line_loop;
	if line_list_ptr -> line_node.line_no = line_no then goto all_done;

line_end:	last_line_rel = line_list_ptr -> line_node.forward_rel;
	if last_line_rel = "0"b then last_line_ptr = tree_ptr;
	else last_line_ptr = pointer (eb_data_$lavptr, last_line_rel);

	addr (words (1)) -> line_node.line_no = line_no;
	addr (words (1)) -> line_node.forward_rel = last_line_rel;
	addr (words (1)) -> line_node.backward_rel = line_list_rel;
	link = glpl_$setblk (words (1), 2);
	line_list_ptr -> line_node.forward_rel, last_line_ptr -> line_node.backward_rel = bit (fixed (link, 18));

all_done:	return (result);


/* table search routine, reached by assign goto linkage. */
label_3000:



	nwrds = utils_$nswrds (xsym (1));

	if xsym (1) > eb_data_$twop18 then xslink_ptr = addr (xsym (1));

	else do;
		xslink = xsym (1);
		xslink_ptr = pointer (eb_data_$lavptr, xslink);
	end;

	mod_2_sum = xslink_ptr -> bit_array(1);

	do k = 2 to nwrds;
	   mod_2_sum = bool(mod_2_sum,xslink_ptr -> bit_array(k),"0110"b);
	end;

	boxno = mod(binary(mod_2_sum,35),nboxes);

	link = box (boxno);
label_3010:
	if link = 0 then goto search_done;
	slink = pointer (eb_data_$lavptr,glpl_$clh (link));
label_3020:
	if (xslink_ptr -> bsym.ch ^= slink -> bsym.ch) then goto label_3030;

	tflags = glpl_$clh (link + 1);
	tval = glpl_$crh (link + 1);
	if tflags ^= fmlcrf then tval = tval + glpl_$crh (link + 2) * twop18;
	xcls = utils_$rs (xflags,15);
	tcls = utils_$rs (tflags,15);
search_done:
	goto internal_return;
label_3030:

	link = glpl_$crh (link);
	goto label_3010;


     end table_;
