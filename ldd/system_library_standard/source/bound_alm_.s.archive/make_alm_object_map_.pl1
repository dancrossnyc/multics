/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Procedure to put new format object map into object segment for ALM.
   Created on 05/06/72 at 17:23:51 by R F Mabee.
   Modified on 05/20/72 at 13:28:34 by R F Mabee.  
   Modified for new object map on 06/15/75 by Eugene E Wiatrowski. */

make_alm_object_map_: procedure (bit_count);
 declare	bit_count fixed binary;

% include	object_map;

% include	segnfo;

% include	objnfo;

declare	eb_data_$entry_bound ext fixed bin(18);
declare	eb_data_$entrybound_bit ext bit(1);
declare	eb_data_$separate_static ext bit(1) aligned;
declare   eb_data_$per_process_static_sw ext fixed bin;
declare	(object_map_pointer,end_ptr) pointer;


	object_map_pointer = pointer (text, txtlen);

	object_map_pointer -> object_map.decl_vers = object_map_version_2;
	object_map_pointer -> object_map.identifier = "obj_map ";
	object_map_pointer -> object_map.text_offset = bit (fixed (new_text_offset, 18));
	object_map_pointer -> object_map.text_length = bit (fixed (new_text_length, 18));
	object_map_pointer -> object_map.definition_offset = bit (fixed (new_definition_offset, 18));
	object_map_pointer -> object_map.definition_length = bit (fixed (new_definition_length, 18));
	object_map_pointer -> object_map.linkage_offset = bit (fixed (new_link_offset, 18));
	object_map_pointer -> object_map.linkage_length = bit (fixed (new_link_length, 18));
	object_map_pointer -> object_map.static_offset = bit (fixed (new_static_offset, 18));
	object_map_pointer -> object_map.static_length = bit (fixed (new_static_length, 18));
	object_map_pointer -> object_map.symbol_offset = bit (fixed (new_symbol_offset, 18));
	object_map_pointer -> object_map.symbol_length = bit (fixed (new_symbol_length, 18));
	object_map_pointer -> object_map.break_map_offset = ""b;
	object_map_pointer -> object_map.break_map_length = ""b;
	if eb_data_$entrybound_bit
	   then object_map_pointer -> object_map.entry_bound = bit(eb_data_$entry_bound,18);

	string (object_map_pointer -> object_map.format) = ""b;
	object_map_pointer -> object_map.format.relocatable = "1"b;
	object_map_pointer -> object_map.format.procedure = "1"b;
	object_map_pointer -> object_map.format.standard = "1"b;
	object_map_pointer -> object_map.format.separate_static = eb_data_$separate_static;
	object_map_pointer -> object_map.format.perprocess_static = (eb_data_$per_process_static_sw ^= 0);

	end_ptr = addrel(object_map_pointer,size(object_map_pointer -> object_map));
	end_ptr -> map_ptr = rel(object_map_pointer);
	bit_count = fixed (rel (end_ptr), 18) * 36 + 36;
	end;
