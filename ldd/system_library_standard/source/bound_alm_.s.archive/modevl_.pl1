/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


 modevl_: 
     procedure ( dummy /* normally BRK */ ) returns ( fixed bin(17) );
/*
	Last modified on 07/06/72 at 22:26:10 by R F Mabee.
		by RFM on 6 July 1972 to add itp modifier.
		by RHG on 17 Sept 1970 to fix bug in octal modifiers
		by RHG on 28 August 1970 at 0916 to allow octal modifiers
		by Nate Adleman on June 28, 1970 at 2037 for the new CODTAB
*/
		/* MODEVL:   evaluate address modifier, if any. */

		/* Possible modifier types are: (r), *(r), (r)*, and (it).
		   all modifiers are tested, but note that the index
		   pseudo - operation is not yet coded. However, all 645
		   modifiers are included. */

/* INCLUDE FILES USED BY MODEVL */


% include codtab;
% include concom;
% include erflgs;
% include varcom;


/* EXTERNAL ENTRIES USED BY MODEVL */

declare	getid_$getid_ ext entry,
	inputs_$next ext entry ;

/* EXTERNAL FUNCTIONS USED BY MODEVL */

declare	table_$table_ ext entry (fixed bin (26), fixed bin (26), fixed bin, fixed bin (26), fixed bin) returns (fixed bin (26)),
	utils_$and ext entry (fixed bin, fixed bin) returns (fixed bin) ;


/* EXTERNAL DATA USED BY MODEVL */

declare ( eb_data_$itlist_ (0:20), eb_data_$rlist(0:15) ) external fixed bin(17);

/* AUTOMATIC DATA USED BY MODEVL */

declare ( i, ixr, junk, modevl_answer, dummy ) fixed bin (17) ;

/*  */
/*  -   -   -   -   -   -   -   -   -  PROGRAM STARTS HERE  -   -   -   -   -   -   -   -   -   -   -   -   -  */

/* get first identifier and break and check for star. */
label_100: 
	call getid_$getid_;
	modevl_answer = 0;
	if (brk(1) = istar) then go to label_200;
	if (sym(1) = 0) then go to label_300;
	go to label_400;


/* star encountered, check for *(r) or (r)* modifier. */
label_200: 
	if (sym(1) = 0) then go to label_210;
	modevl_answer = 16;
	call inputs_$next;
	go to label_230;
label_210: 

	call getid_$getid_;
	if (brk(1) ^= inum) then go to label_215;
	modevl_answer = brk(2) + 8;	/* actually brk(2)-"0"+56 */
	if modevl_answer >= 64 then goto non_octal;	/* make sure digit was octal */
	go to get_next;
label_215: 
	if (sym(1) ^= 0) then go to label_220;
	modevl_answer = 16;
	go to modevl_return;
label_220: 

	modevl_answer = 48;


/* register involved, search rlist for it. */
label_230: 

label_240: 
	do i = 0 to 15;
	     if (sym(1)  ^=  eb_data_$rlist(i)) then go to label_250;
	     modevl_answer = modevl_answer + i;
	     go to modevl_return;
label_250:     
	end label_240;



/* not in rlist, search table for index assignment. */
label_260: 
	if (table_$table_(iserch,sym(1),ixr,clint,junk) = 0) then go to label_280;
	modevl_answer = modevl_answer + ixr + 8;
	go to modevl_return;

/* we get here when we were expecting an octal digit but got 8 or 9 */

non_octal:	prnt7 = 1;

/* undefined modifier, set flag and exit with null register. */
label_280: 
	prntt = 1;				/* TRUE */
	go to label_310;


/* no *, no sym, check for digit. */
label_300: 
	if (brk(1) ^= inum) then go to label_310;
	modevl_answer = brk(2) - 40;	/* actually brk(2)-"0"+8 */
	if modevl_answer >= 16 then goto non_octal;	/* check digit was actually octal */
	call inputs_$next;
	if brk(1) = inum then	/*check for another digit*/
		do;
		if brk(2) >= 56 then goto non_octal;	/*check digit was actually octal*/
		modevl_answer = 8*modevl_answer+brk(2)-112;
		goto get_next;
		end;
	if (brk(1) ^= istar) then go to modevl_return;
	modevl_answer = modevl_answer + 16;
	go to get_next;


/* null modifier, zero and exit. */
label_310: 
	modevl_answer = 0;
	go to modevl_return;


/* no star, check in it list first. */
label_400: 

	do i = 1 to eb_data_$itlist_ (0) by 2;		/* Length in first word; name, value in word pairs after. */
	     if (sym(1)  ^=  eb_data_$itlist_ (i)) then go to label_410;
	     modevl_answer = eb_data_$itlist_ (i + 1);
	     go to modevl_return;
label_410:     
	end label_400;

/* not in itlist, go check rlist. */
	modevl_answer = 0;
	go to label_240;

get_next:	call inputs_$next;

modevl_return: 

	return( modevl_answer );



     end modevl_ ;
