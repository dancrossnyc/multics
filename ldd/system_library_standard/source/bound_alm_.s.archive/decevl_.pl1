/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-09-03,Oke), approve(86-09-03,MCR7543), audit(86-09-30,JRGray),
     install(86-10-08,MR12.0-1180):
     Extend decimal input
     processing to permit 1 or 2 word values.  User explicitly requests
     double precision integer decimal input by using a "L" suffix.
     Previously only single word values were generated, with no detected
     errors.  Permits double-word decimal literals to be generated.  Needed
     by the C compiler.
                                                   END HISTORY COMMENTS */

/* Evaluate decimal literal field, return results and break.

   Fixed and real constants may be single or double precision.  Decevl is
   called from pass1 and pass2 (for dec pseudo-op) and by litevl (for
   literals).  The parameter type is used by litevl in case of du or dl
   modifier requiring a truncation of results.  Note that according to bsa
   standards, fields may be separated by commas or blanks.  Machine language
   subroutines are used to manipulate the double precision words.

   Last modified:
	by RHG on 22 sept 1970 to handle multi-line ascii literals properly
   Last modified:
	by BLW on 8 Sept 1973 to use accurate conversion routines.  Machine
	language subroutine is no longer used to manipulate double precision
	words.  decevl_ was converted to version 2 pl1 with minimum changes
	needed.
   Modified 7 July 1980 by M. N. Davidoff to issue "E" diagnostic instead of raising size, also cleaned it up some.
*/
/* format: style2 */
decevl_:
     procedure (rslts, type) returns (fixed bin (35));

	declare rslts		 (10) fixed bin (35);
	declare type		 fixed bin (26);

/* automatic */

	declare 1 attr,
		2 binary		 bit (1),
		2 double		 bit (1),
		2 float		 bit (1);
	declare binpt		 fixed bin (26);
	declare buffer		 char (64);
	declare double		 bit (1) aligned;
	declare first		 bit (1) aligned;
	declare next_sw		 bit (1) aligned;
	declare prec		 fixed bin (35);
	declare saw_point		 bit (1) aligned;
	declare scale		 fixed bin (26);
	declare 1 x_structure	 aligned,		/* NOTE: x must start on an even boundary. */
		2 pad1_for_alignment fixed bin (71),
		2 x		 (3) fixed bin (26);
	declare xp		 fixed bin (26);

/* based */

	declare 1 brk_overlay	 aligned based (addr (brk (2))),
		2 skip		 char (3) unal,
		2 ch		 char (1) unal;
	declare 1 number		 aligned based (addr (buffer)),
		2 sign		 char (1) unal,
		2 digit		 (prec) char (1) unal,
		2 skip		 bit (1) unal,
		2 exponent	 fixed bin (7) unal;

/* builtin */

	declare (addr, byte, divide, length, max, min, rank, string, substr, unspec)
				 builtin;

/* condition */

	declare (overflow, size)	 condition;

/* external static */

	declare eb_data_$iasc	 fixed bin (35) external static;
	declare eb_data_$iflt	 fixed bin (35) external static;
	declare eb_data_$ifxd	 fixed bin (35) external static;
	declare eb_data_$iint	 fixed bin (35) external static;

/* entry */

	declare assign_		 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	declare inputs_$ascii_literal	 entry;
	declare inputs_$next	 entry;
	declare inputs_$nxtnb	 entry;

%include varcom;
%include erflgs;
%include codtab;
%include std_descriptor_types;

/* program */

	double = ""b;			/* Assume single prec int */
	xp = 0;
	saw_point = "0"b;
	string (attr) = ""b;
	first = "1"b;
	prec = 0;
	scale = 0;
	binpt = 71;
	number.sign = "+";

	on overflow, size goto return_from_size;

/* main loop for collecting digits, check for sign, point, and a, b, d, or e
   fields following number. */

	do while ("1"b);
	     next_sw = "1"b;

	     if brk (1) = inum
	     then do;
		     if attr.float
		     then scale = scale + 1;

		     prec = prec + 1;
		     number.digit (prec) = ch;
		end;

	     else if brk (1) = ipoint
	     then do;
		     saw_point = "1"b;
		     attr.float = "1"b;
		end;

	     else if brk (1) = iminus
	     then number.sign = "-";

	     else if brk (1) = iplus
	     then ;

	     else
label_220:
		if brk (1) = ilet
	     then begin;
		     declare char		      char (1) aligned;

/* letter encountered, evaluate b, d, or e field. */

		     char = byte (brk (2));

		     if char = "a" & ^attr.binary & ^attr.float & number.sign ^= "-"
		     then begin;
			     declare chars		      char (32);
			     declare i		      fixed bin;
			     declare word_count	      fixed bin;

			     declare char_array	      (8) char (4) defined (chars);

/* ascii literal, pack characters into rslts and return count. */

			     call assign_ (addr (x (1)), 2 * real_fix_bin_2_dtype, 71, addr (buffer),
				2 * real_fix_dec_9bit_ls_dtype, prec);

			     type = eb_data_$iasc;
			     x (2) = min (x (2), length (chars));
			     word_count = max (divide (x (2) + 3, 4, 17), 1);
			     unspec (chars) = ""b;

			     do i = 1 to x (2);
				call inputs_$ascii_literal;
				substr (chars, i, 1) = byte (brk (2));
			     end;

			     do i = 1 to word_count;
				unspec (rslts (i)) = unspec (char_array (i));
			     end;

			     call inputs_$next;

			     return (word_count);
			end;

		     else if char = "b" & ^attr.binary
		     then do;
			     attr.binary = "1"b;
			     binpt = evaluate_integer_field ();
			end;

		     else if char = "L" & ^double
			then do;
			     call inputs_$next;
			     double = "1"b;
			end;
		     else do;
			     if char = "d"
			     then attr.double = "1"b;

			     else if char ^= "e"
			     then prnte = 1;	/* TRUE */

			     attr.float = "1"b;
			     xp = evaluate_integer_field ();
			end;

		     goto label_220;
		end;

	     else if ^first
	     then do;

/* end of field, convert number to proper format, set type, return results and
   break, and set value to number of words. */

		     if ^attr.binary & ^attr.float
		     then do;
			     type = eb_data_$iint;
			     call assign_ (addr (x (1)), 2 * real_fix_bin_2_dtype, 71, addr (buffer),
				2 * real_fix_dec_9bit_ls_dtype, prec);

/* if requested precision double then we supply two words. */

			     if double then do;
				rslts (1) = x (1);
				rslts (2) = x (2);
				return (2);
			     end;

/* Original assumption - return just a single word. */

			     rslts (1) = x (2);

			     return (1);
			end;

		     number.exponent = xp - scale;

		     if attr.binary
		     then do;
			     type = eb_data_$ifxd;

			     if prnte ^= 1
			     then call assign_ (addr (x (1)), 2 * real_fix_bin_2_dtype, (71 - binpt) * 1f18b + 71,
				     addr (buffer), 2 * real_flt_dec_9bit_dtype, prec);
			end;

		     else do;
			     type = eb_data_$iflt;
			     call assign_ (addr (x (1)), 2 * real_flt_bin_2_dtype, 63, addr (buffer),
				2 * real_flt_dec_9bit_dtype, prec);
			end;

		     rslts (1) = x (1);
		     rslts (2) = x (2);

		     if attr.double
		     then return (2);
		     else return (1);
		end;

	     else do;
		     call inputs_$nxtnb;
		     next_sw = "0"b;
		end;

	     if next_sw
	     then call inputs_$next;

	     first = "0"b;
	end;

/* A size condition occured.  This was probably in assign_, but could have
   been in evaluate_integer_field.  Just return something so the rest of the
   program will get parsed.  If the size condition occured in the call to
   assign_ in the ascii literal, or during evaluate_integer_field, the current
   input character is not advanced passed this literal so other syntax errors
   on the input line may result. */

return_from_size:
	prnte = 1;				/* TRUE */
	type = eb_data_$iint;
	rslts (1) = 0;

	return (1);

evaluate_integer_field:
     procedure returns (fixed bin (26));

	declare int		 fixed bin (26);
	declare sign		 fixed bin;

	sign = 1;
	int = 0;
	first = "0"b;

	call inputs_$next;
	do while (brk (1) = iplus | brk (1) = iminus | brk (1) = inum);
	     if brk (1) = iminus
	     then sign = -1;

	     else if brk (1) = inum
	     then int = 10 * int + brk (2) - rank ("0");

	     call inputs_$next;
	end;

	return (sign * int);
     end evaluate_integer_field;

     end decevl_;
