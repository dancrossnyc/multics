/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


expevl_:
     proc (tbool, inexp, lc, expevl_answer) ;

/*
   Modified 740821 by PG to allow stack-references wherever references are allowed.
   Modified on 12/07/72 at 20:29:45 by R F Mabee. Fixed up prntr problem for good.
   Modified by RHG on 17 August 1970 at 1614 to clean up some bad code
   by RHG on 11 August 1970 at 0537 to get rid of return value (make it a parameter)
   by RHG on 10 August 1970 at 2139 to allow "^" as substitute for "/" in bool expressions
   by RHG on 10 August 1970 at 2032 to eliminate calls to prec_ and utils_$(and or xor)
   by Nate Adleman on June 28, 1970 at 2006 for the new CODTAB
*/

/* EXPEVL:   evaluate internal expressions for MA */

/*   internal expression evaluation routine. this routine evaluates */
/*   expressions consisting entirely of internal references using a */
/*   stack technique. nested expressions are allowed as normal */
/*   subexpressions, and evaluation is done on either an arithmetic */
/*   or boolean operator interpretation. the stack is an internal */
/*   array of nstk( = 100) locations, sufficient for most expressions. */

/* modifications by wagner for multiple location counters, */
/* june 13, 1967. returns in lc the address of the assignment */
/* table entry for the location counter to which inexp is relative. */
/* if call has tbool =  1;	(TRUE) then caller must ignore lc. */

/* a second stack, lstk, runs parallel to stk. lstk(i) is-- */

/*   lc  if stk(i) is relative to a location counter. */
/*   0  if stk(i) is absolute. */
/*   garbage  if stk(i) is an operator. */

/* then at each arithmetic operator there must be a check */
/* that operands are of consistent types. */



/* INCLUDE FILES USED BY EXPEVL */

% include varcom;
% include concom;
% include erflgs;
% include codtab;
% include curlc;
/*  */
/* EXTERNAL ENTRIES USED BY EXPEVL */

declare  getid_$getid_ external entry,
         inputs_$next external entry ;

/* EXTERNAL FUNCTIONS USED BY EXPEVL */

declare  glpl_$clh external entry (fixed bin) returns (fixed bin),
         glpl_$crh external entry (fixed bin) returns (fixed bin),
         table_$table_ external entry (fixed bin (26), fixed bin (26), fixed bin, fixed bin (26), fixed bin) returns (fixed bin (26));


/* EXTERNAL DATA USED BY EXPEVL */

declare (eb_data_$ilend, eb_data_$ineg, eb_data_$inot) ext fixed bin (35);


/* AUTOMATIC DATA USED BY EXPEVL */

declare  expevl_answer fixed bin (35) ;
	

declare (inexp, i, lc, l1, l2, lstk (100), op, rprec,
         stk (100), tbad, tbool, val, vlc, radix, brk_temp) fixed bin (17);

declare  nstk fixed bin internal static init (100);

/*  */
/* - - - - - NORMAL ENTRY, break in brk, and perhaps symbol in xsym. */

label_100:
	radix = 10 -tbool - tbool ;			/* set the radix for numeric constants to 8 or 10 */
	expevl_answer = 1;				/* TRUE */;
	tbad = 0;					/* FALSE */;
	i = 1;
	stk (1) = eb_data_$ilend;
	go to label_210;

/*   re-entry to get next identifier. */
label_200:
	call getid_$getid_;
label_210:
	if (brk (1) = inum) then go to label_230;
	if (sym (1) = 0) then go to label_300;

/*   not number nor void, look up symbol in assignment table. */
label_220:
	if (table_$table_ (iserch, sym (1), val, clint, vlc) ^= 0) then go to label_400;
	if (table_$table_ (iserch, sym (1), val, clmlc, vlc) ^= 0) then go to label_400;
	if (table_$table_ (iserch, sym (1), val, clstk, vlc) ^= 0) then go to label_400;
label_225:
	prntu = 1;				/* TRUE */;
	expevl_answer = 0;				/* FALSE */;
	go to label_400;

/*   number, convert to binary. */
label_230:
	unspec (val) = unspec (brk (2)) & "000000000000000000000000000000001111"b; /* val = utils_$and( brk(2), 15) */
	vlc = 0;
label_240:
	call inputs_$next;
	if (brk (1) ^= inum) then go to label_400;
	val = radix * val + fixed (unspec (brk (2)) & "000000000000000000000000000000001111"b, 17, 0) ;
	go to label_240;

/*   unary operator, check which and process. */
label_300:
	brk_temp = brk (1);				/* set brk_temp which is not abnormal so pl1 can optimize */
	if (brk_temp = iplus) then go to label_310;
	if (brk_temp = iminus) then go to label_320;
	if (brk_temp = istar) then go to label_330;
	if (brk_temp = islash) then go to label_340;
	if (brk_temp = icflx) then go to label_340;
	if (brk_temp = ilpar) then go to label_350;
	go to label_360;

/*   ignore unary plus. */
label_310:
	go to label_200;

/*   replace unary minus by _$neg_$, put instack, and . */
label_320:
	i = i+1;
	stk (i) = eb_data_$ineg;
	go to label_200;

/*   unary star is symbol for this location. */
label_330:
	val = pc;
	vlc = curlc;
	call getid_$getid_;
	if (sym (1) ^= 0) then go to label_800;
	go to label_400;

/*   unary slash for booleans means not. */
label_340:
	i = i+1;
	stk (i) = eb_data_$inot;
	go to label_200;

/*   simply insert ( and scan. */
label_350:
	i = i+1;
	stk (i) = ilpar;
	go to label_200;

/*   unknown break, val is zero and treat as binary end. */
label_360:
	val = 0;
	vlc = 0;
	go to label_400;


/*   binary operator, insert operand, and check precedence of */
/*   operator. if current precedence greater than last operator, */
/*   insert new operator in stack, otherwise, begin evaluating */
/*   operators up the stack. parentheses and end of field are */
/*   treated in special ways. */

label_400:
	if (i > (nstk-4)) then go to label_800;
	i = i+1;
	stk (i) = val;
	lstk (i) = vlc;
label_410:
	unspec (rprec) = unspec (brk (1)) & "000000000000000000000000000000001111"b; /* rprec = utils_$and(brk(1), 15); */
label_420:
	op = stk (i-1);
	if fixed (unspec (op) & "000000000000000000000000000000001111"b, 17, 0) >= rprec then goto label_460;
	if (brk (1) = irpar) then go to label_450;
	if (rprec <= 4) then go to label_440;

/*   precedence greater, insert operator in stack. */
label_430:
	i = i+1;
	stk (i) = brk (1);
	go to label_200;

/*   end terminator, check results and return answer. */
label_440:
	if (i ^= 2) then go to label_800;
	go to label_900;

/*   right parenthesis processed only after ops evaluated. */
label_450:
	if (op = eb_data_$ilend) then go to label_440;
	if (op ^= ilpar) then go to label_800;
	i = i-1;
	stk (i) = stk (i+1);
	lstk (i) = lstk (i+1);
	call getid_$getid_;
	if (sym (1) ^= 0) then go to label_800;
	go to label_410;

/*   work operators up stack until precedence is in order. */
/*   seperate evaluators for boolean and arithmetic operators. */
label_460:
	if (tbool ^= 0) then go to label_600;

/*   arithmetic operator, branch on type. */
label_500:
	l1 = lstk (i-2);
	l2 = lstk (i);
	if (op = iplus) then go to label_510;
	if (op = iminus) then go to label_520;
	if (op = istar) then go to label_530;
	if (op = islash) then go to label_540;
	if (op = eb_data_$ineg) then go to label_550;
	if (op = eb_data_$ilend) then go to label_900;
	go to label_800;

/*   evaluate binary +. */
label_510:
	stk (i-2) = stk (i-2)+stk (i);
	if (l1 ^= 0 & l2 ^= 0) then tbad = 1;		/* TRUE */;
	if (l1+l2 = 0) then vlc = 0;
	if (l1 ^= 0) then vlc = l1;
	if (l2 ^= 0) then vlc = l2;
	go to label_700;

/*   evaluate binary -. */

/*   special patch has been added to permit */
/*   the evaluation of a difference when the */
/*   symbols are both relocatable and in the */
/*   same segment but are defined under different */
/*   location counters. in this case the result */
/*   is modified by adding the difference between */
/*   the origins of the two location counters. */
label_520:
	stk (i-2) = stk (i-2)-stk (i);
	if (^(tpass2 ^= 0 & l1 ^= 0 & l2 ^= 0)) then go to label_525;
	if (glpl_$crh (l1+4) ^= glpl_$crh (l2+4)) then tbad = 1; /* TRUE */;
	stk (i-2) = stk (i-2) + (glpl_$clh (l1+3)-glpl_$clh (l2+3));
	vlc = 0;
	go to label_700;
label_525:
	

	if (l2 ^= 0 & l1 ^= l2) then tbad = 1;		/* TRUE */;
	if (l1+l2 = 0) then vlc = 0;
	if (l1 ^= 0 & l2 = 0) then vlc = l1;
	if (l1 ^= 0 & l2 ^= 0) then vlc = 0;
	go to label_700;

/*   evaluate binary *. */
label_530:
	stk (i-2) = stk (i-2)*stk (i);
	if (l1+l2 ^= 0) then tbad = 1;		/* TRUE */;
	vlc = 0;
	go to label_700;

/*   evaluate binary /. */
label_540:
	if (stk (i) ^= 0) then stk (i-2) = divide (stk (i-2), stk (i), 17, 0);
	if (l1+l2 ^= 0) then tbad = 1;		/* TRUE */;
	vlc = 0;
	go to label_700;

/*   evaluate unary -. */
label_550:
	stk (i-1) = -stk (i);
	if (lstk (i) ^= 0) then tbad = 1;		/* TRUE */;
	vlc = 0;
	go to label_710;


/*   boolean operator, branch on type. */
label_600:
	if (op = iplus) then go to label_610;
	if (op = iminus) then go to label_620;
	if (op = istar) then go to label_630;
	if (op = islash) then go to label_640;
	if (op = icflx) then go to label_640;
	if (op = eb_data_$inot) then go to label_650;
	if (op = eb_data_$ilend) then go to label_900;
	go to label_800;

/*   evaluate boolean .or. function. */
label_610:
	unspec (stk (i-2)) = unspec (stk (i-2)) | unspec (stk (i)) ;
	go to label_700;

/*   evaluate boolean .xor. function. */
label_620:
	unspec (stk (i-2)) = bool (unspec (stk (i-2)), unspec (stk (i)), "0110"b) ;
	go to label_700;

/*   evaluate boolean .and. function. */
label_630:
	unspec (stk (i-2)) = unspec (stk (i-2)) & unspec (stk (i)) ;
	go to label_700;

/*   evaluate boolean .and not. function. */
label_640:
	unspec (stk (i-2)) = unspec (stk (i-2)) & ^unspec (stk (i)) ;
	go to label_700;

/*   evaluate boolean .not. function. */
label_650:
	stk (i-1) = -1 - stk (i) ;
	go to label_710;


/*   termination for binary operator evaluation, reduce stack */
/*   level, and go test new operator. */
label_700:
	lstk (i-2) = vlc;
	i = i-2;
	if (i >= 2) then go to label_420;
	go to label_800;

/*   termination for unary operations in stack. */
label_710:
	lstk (i-1) = vlc;
	i = i-1;
	if (i >= 2) then go to label_420;
	go to label_800;


/*   phase error return. */
label_800:
	prntf = 1;				/* TRUE */
	expevl_answer = 0;				/* FALSE */
label_810:
	inexp = 0;
	lc = 0;
	return ;


/*   normal termination return, answer is stk(2). */
label_900:
	inexp = stk (2);
	if (tbad ^= 0) then go to label_910;
	lc = lstk (2);
	return ;

/* invalid operator-operand modes somewhere in evaluation */
label_910:
	lc = 0;
	if tpass1 = 0 then prntr = 1;
	expevl_answer = 0;				/* FALSE */;
	return ;


     end expevl_;
