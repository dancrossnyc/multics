/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


	

/****^  HISTORY COMMENTS:
  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
     Modified to allow for joining to the definition section.
                                                   END HISTORY COMMENTS */


postp1_:		procedure ;
	
	/*  modified for separate static on 06/15/75 by Eugene E Wiatrowski  */
	/*  modified on 03/30/72 at 23:52:53 by R F Mabee. */
	 
	/*   post pass1 processor for eplbsa. ;
	 postp1 has the job of originating all lcs.
	counters. each location counter has an entry in the 
	assignment table as follows--  
	  
	  zero   name,next in hash table   
	  vfd 15/flags,3/class,18/current value 
	  zero left join,right join  
	  zero origin,max value    
	  vfd 15/unused,1/sixty-four,1/eight,1/even,18/segment   
	  
		postp1 does not see the assignment table, but instead,
	four lists strung together with the left and right  
	join pointers--    
	  
	  ulclst  location counters never join#ed    
	  tlclst  text segment location counters     
	  llclst  link segment location counters     
	  slclst  symbol segment location counters    
	  dlclst  definition segment location counters    
	  
	in addition ulcend points to the end of ulclst.   
	  
	postp1 first moves ulclst to the beginning of tlclst,
	then goes down the three remaining lists filling in 
	#origin#. it uses only the following information out
	of the entry--     
	  
	  right join     
	  max value
		  current value   
	  sixty-four     
	  eight  
	  even   
	  
	the field #segment# just duplicates the information 
	given by membership in the appropriate list.     
	  
	late addition to the work of postp1-- check max against current
	value to save work for mills.  
	  
	later addition--set current value to zero. */ 
	  
dcl eb_data_$stat_len ext fixed bin(26);
dcl eb_data_$separate_static ext bit(1);
	  
	  
	  
dcl  linkage_done bit(1) aligned;
	dcl ( text, radix, maxv, curv, cur, mode, jut, splice, j, symbol, definition, mods, link) fixed bin (26) ;

% include alm_lc;
	  
	/* EXTERNAL FUNCTIONS */
 
declare	glpl_$clh ext entry (fixed bin) returns (fixed bin),
	glpl_$crh ext entry (fixed bin) returns (fixed bin) ;
	  
	/* EXTERNAL ENTRIES */
 
declare	glpl_$storr ext entry (fixed bin (26), fixed bin (26)),
	glpl_$storl ext entry (fixed bin (26), fixed bin (26)),
	putxt_$putxt_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26)),
	pulnk_$pulnk_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26)),
	pudef_$pudef_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26)),
	pusmb_$pusmb_ ext entry (fixed bin (26), fixed bin (26), fixed bin (26)) ;

	% include concom ;
	% include varcom;
	  
	  
	/*	put ulclst onto the beginning of tlclst. */     
	  
	   if (ulclst = 0) then go to label_100;
	 call glpl_$storl(tlclst+2,(ulcend)) ;
	 call glpl_$storr(ulcend+2,(tlclst)) ;
	 tlclst = ulclst;
	 ulclst = 0;
	 ulcend = 0;
	itxtmod, ilnkmod = 2;
label_100:	  
	  
	/* go through the text location counters assigning 
	  origins, etc. */   
	  
	   text = 0;
	   cur = tlclst;
label_1000:	 if (cur = 0) then go to label_1999;   
	  
	   mods = glpl_$clh(cur+4) ;  
	   curv = glpl_$crh(cur+1) ;  
	   maxv = glpl_$crh(cur+3) ;  
	  
	   radix = 1; 
	   if (mods ^= 0) then radix = mods; 
	  
		jut = text - divide(text,radix,26,0) * radix ;
	   if (jut = 0) then go to label_1200 ;   
	   splice = radix-jut ;  
	 
label_1100:	
	   do j = 1 to splice ; 
	     call putxt_$putxt_(text+j-1,mnopdu,0) ;    
  
end label_1100 ;
	 
	text = text + splice ;
  
label_1200:	  
	  
	/* check max vs. current values. */
		  
	   if (curv < maxv) then go to label_1300 ; 
	 	maxv = curv; 
	 	call glpl_$storr(cur+3,maxv); 
label_1300:	

	/* Accumulate per-segment mod (boundary) info. */

	if mods ^= 0 then if itxtmod = 0 then itxtmod = mods;
			else if mod (mods, itxtmod) = 0 then itxtmod = mods;
			else if mod (itxtmod, mods) ^= 0 then itxtmod = itxtmod * mods;
	  
	/* set origin */
	 
	   call glpl_$storl(cur+3,text); 
	   text = text+maxv ;   
	  
	/* set current value to zero */  
	  
	   call glpl_$storr(cur+1,0) ;
	  
	/* and loop around */
	  
	   cur = glpl_$crh(cur+2); 
	   go to label_1000; 
label_1999:	

	/*  For the case of separate static we have to change the list
	    of location counters of the form:

		L = (slc1  lc1 ... lci ... lcn  slc2)

	    where slc1 and slc2 are two system-location counters
	    and (lc1 ... lci ... lcn) is a list posibly empty of user
	    defined location counters

	    into two separate lists:
				a) L1 = (lc1 ... lci ... lcn)
			and       b) L2 = (slc1  slc2).             */

	  
	 /* go through the link location counters assigning 
	  origins, etc. */   
	  
	   link = 0; 
	   eb_data_$stat_len = 0;
	   if eb_data_$separate_static
	      then do;
		 cur = lpsect;
		 cur = glpl_$clh(cur+2);
		 call glpl_$storr(cur+2,0);
		 cur = llclst;
		 cur = glpl_$crh(cur+2);
		 call glpl_$storl(cur+2,0);
		 end;
	      else cur = llclst; 

	   linkage_done = "0"b;

label_2000:	 if (cur = 0) then go to label_2888; 
	  
	   mods = glpl_$clh(cur+4) ; 
	   curv = glpl_$crh(cur+1) ;  
	   maxv = glpl_$crh(cur+3) ;  
	  
	   radix = 1; 
	   if (mods ^= 0) then radix = mods; 
	  
		jut = link - divide(link,radix,26,0) * radix ;
	   if (jut = 0) then go to label_2200; 
	   splice = radix-jut; 
	 
label_2100:	
	   do j = 1 to splice ; 
	      call pulnk_$pulnk_(link+j-1,mnopdu,0) ;   
  
end label_2100 ;
	 
	link = link + splice ;
  
label_2200:	
	  
	/* check max vs. current values. */
	  
	   if (curv < maxv) then go to label_2300 ; 
	 	maxv = curv;
	 	call glpl_$storr(cur+3,maxv);
label_2300:	  

	if mods ^= 0 then if ilnkmod = 0 then ilnkmod = mods;
			else if mod (mods, ilnkmod) = 0 then ilnkmod = mods;
			else if mod (ilnkmod, mods) ^= 0 then ilnkmod = ilnkmod * mods;
	  
	/* set origin */
	  
	   call glpl_$storl(cur+3,link); 
	   link = link+maxv; 
	  
	/* set current value to zero. */  
	  
	   call glpl_$storr(cur+1,0) ;
	  
	/* and loop around */
	  
	   cur = glpl_$crh(cur+2); 
	   go to label_2000; 
label_2888:
	   if eb_data_$separate_static
	      then do;
		 if linkage_done then goto label_2999;
		 cur = llclst;
		 call glpl_$storr(cur+2,lpsect);
		 call glpl_$storl(lpsect+2,cur);
		 eb_data_$stat_len = link + mod(link,2);
		 link = 0;
		 linkage_done = "1"b;
		 goto label_2000;
		 end;

label_2999:	  
	  
	/* now go through and do the same for symbol    
	  segment location counters. */  
	  
	   symbol = 0 ; 
	   cur = slclst; 
label_3000:	 if (cur = 0) then go to label_3999; 
	  
	   mods = glpl_$clh(cur+4) ; 
	   curv = glpl_$crh(cur+1) ;  
	   maxv = glpl_$crh(cur+3) ;  
	  
	   radix = 1 ; 
	   if (mods ^= 0) then radix = mods; 
	  
		jut = symbol - divide(symbol, radix, 26, 0 ) * radix ;
	   if (jut = 0) then go to label_3200; 
	   splice = radix-jut; 
label_3100:	
	   do j = 1 to splice ; 
	     call pusmb_$pusmb_(symbol+j-1,mnopdu,0) ;  
  
end label_3100 ;
	 
	symbol = symbol + splice ;
  
label_3200:	
	  
	/* check max vs. current values. */
	  
	   if (curv < maxv) then go to label_3300 ; 
	 maxv = curv; 
	 call glpl_$storr(cur+3,maxv); 
label_3300:	
	  
	/* set origin */
	  
	   call glpl_$storl(cur+3,symbol); 
	   symbol = symbol+maxv ; 
	  
	/* set current value to zero. */  
	  
	   call glpl_$storr(cur+1,0) ;
	  
	/* and loop around */
	  
	   cur = glpl_$crh(cur+2); 
	   go to label_3000; 

label_3999:	
	/* definition section */
	definition = 0;
	cur = dlclst;
label_4000:
	if (cur = 0) then goto label_4999;
	mods = glpl_$clh(cur+4);
	curv = glpl_$crh(cur+1) ;  
	maxv = glpl_$crh(cur+3) ;  
	  
	radix = 1; 
	if (mods ^= 0) then radix = mods; 
	  
	jut = definition - divide(definition,radix,26,0) * radix ;
	if (jut = 0) then go to label_4200 ;
	splice = radix - jut;

	do j = 1 to splice;
		 call pudef_$pudef_(definition+j-1,mnopdu,0);
	  end;
	definition = definition + splice;
label_4200:
	if curv < maxv then goto label_4300;
	     maxv = curv;
	     call glpl_$storr(cur+3,maxv);

label_4300:
	call glpl_$storl(cur+3,definition);
	definition = definition + maxv;
	call glpl_$storr(cur+1,0);
	cur = glpl_$crh(cur+2);
	goto label_4000;

label_4999:
	/* and that seems to be all */
	  
end postp1_ ;
