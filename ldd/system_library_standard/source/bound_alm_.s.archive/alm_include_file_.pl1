/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-04-28,JRGray), approve(87-07-03,MCR7689),
     audit(87-07-09,RWaters), install(87-11-02,MR12.2-1001):
     Modified to remember more source file info (alm 19).
  2) change(87-04-28,JRGray), approve(87-07-03,MCR7689),
     audit(87-07-09,RWaters), install(87-11-02,MR12.2-1001):
     Fixed to calculate bit_count correctly (srclen is in chars not words).
                                                   END HISTORY COMMENTS */


/* This module keeps track of include files for ALM so that it can properly expand source programs by itself. */
/* modified on 08/10/72 at 19:48:21 by R F Mabee. */
/* Modified for macro processing 3/22/77 by Noel I. Morris	*/
/* Created new on 05/20/72 at 11:13:19 by R F Mabee. */

 alm_include_file_: procedure; /* Main entry never referenced. */


% include varcom;

% include segnfo;

% include alm_include_file_info;

% include	lstcom;


 declare	segment_pointer pointer, error_code fixed binary(35),
	bit_count fixed binary, file_name char (256);

 declare	1 eb_data_$tsym external static aligned,	/* This is the name of the desired input file. */
	  2 acc_length bit (9) unaligned,
	  2 acc_string char (32) unaligned;

dcl  eb_data_$macro_depth fixed bin ext,
     eb_data_$include_number fixed bin ext,
     eb_data_$include_control bit (110) aligned ext;

dcl  source_file_number fixed bin static;	/* Main source = 0, first include = 1 */

dcl 1 eb_data_$macro_stack (100) aligned ext,
    2 source_pointer ptr unal,
    2 source_length fixed bin (26),
    2 curr_char_no fixed bin (26),
    2 macro bit (1) unal,
    2 begin_offset fixed bin (15),
    2 count fixed bin (18) unal;


 declare	null builtin, addr builtin, rel builtin, fixed builtin,
	divide builtin, mod builtin, pointer builtin, substr builtin;

 declare	eb_data_$curr_char_no fixed binary external static,
	eb_data_$lavptr pointer external static,
	eb_data_$who_am_I char (12) external static;

 declare	find_include_file_$initiate_count external entry (char (*), pointer, char (*), fixed binary,
							pointer, fixed binary (35)),
	translator_info_$component_get_source_info external entry (ptr, char (*), char (*), char(*),
				fixed binary (71), bit (36) aligned, fixed binary),
	mexp_$reset_macro external entry,
	com_err_ external entry options(variable),
	prlst_ external entry (char (*)),
	prwrd_$source_only ext entry,
	prnter_ external entry (char (*)),
	prnter_$abort1 external entry,
	glpl_$setblk external entry (fixed binary, fixed binary) returns (fixed binary),
	prnter_$no_end_card external entry;



first_file: entry (main_program_name);
 declare	main_program_name char (*);

/* first_file is called at the beginning of each pass to cause the initial name node
   to be created (pass one) and pointers reset generally.  */

	include_index = 0;
	eb_data_$macro_depth = 0;
	eb_data_$include_number = 0;
	source_file_number = 0;
	eb_data_$include_control = "0"b;
	if tpass1 ^= 0 then do;		/*  First pass, make base node for main source. */
					/*  On second pass, base of name list is still available. */
		include_info_stack = null ();
		segment_pointer = source;
		bit_count = srclen * 9;	/* srclen is in chars */
		call make_new_node ();
		include_info_stack -> source_info.search_name = main_program_name || ".alm";
		include_name_list_base = include_info_stack;
		end;
	else do;
		source = include_name_list_base -> source_info.source_pointer;
		srclen = include_name_list_base -> source_info.source_length;
		end;

	/*  Set other list pointers to base node in either pass. */

	include_name_list_top, include_info_stack = include_name_list_base;
	begin_line = 0;
	return;

alm_include_file_$pass1: entry;

/* This entry is called by pass1_ to find an include file whose name is lying in tsym. */
/* It must do a full search to find the segment. */


	/* Stop accidental recursion by placing an upper limit on depth of nested include files. */

	if include_index > 10 then do;
		call prnter_ ("
Include file nesting depth limit (10) exceeded.
");
		call prnter_$abort1 ();
		end;

	include_index = include_index + 1;


	/* Generate full entry name, find file in libraries. */

	file_name = substr (acc_string, 1, fixed (acc_length, 9)) || ".incl.alm";
	call find_include_file_$initiate_count ("alm", source, file_name, bit_count, segment_pointer, error_code);
	if error_code ^= 0 then do;
		call com_err_ (error_code, eb_data_$who_am_I, file_name);
		call prlst_ ("
Include file missing:  " || file_name || "
");
		call prnter_$abort1 ();
		end;

	/*  Stack per-file information and thread in new filename node. */

	source_file_number = source_file_number + 1;
	eb_data_$include_number = source_file_number;
	call make_new_node ();
	source = segment_pointer;
	srclen = divide (bit_count, 9, 17, 0);
	include_name_list_top -> source_info.names_list_pointer = include_info_stack;
	include_name_list_top = include_info_stack;
	include_info_stack -> source_info.search_name = file_name;

	return;


alm_include_file_$pass2: entry;

/* This entry is called by pass2_ to find an include file. */
/* It can use segment pointer and length saved by alm_include_file_$pass1. */


	/*  Step along name thread to get entry for next input file. */
	/*  Update stacked info for old input file. */

	include_name_list_top = include_name_list_top -> source_info.names_list_pointer;
	include_name_list_top -> source_info.stack_back_pointer = include_info_stack;
	eb_data_$include_number = include_name_list_top -> source_info.source_number;
	include_info_stack = include_name_list_top;
	include_index = include_index + 1;

	call safe_store ();

	/*  Verify that this is the right file. */

	file_name = substr (acc_string, 1, fixed (acc_length, 9)) || ".incl.alm";
	if include_name_list_top -> source_info.search_name ^= file_name then do;
		call prnter_ ("
Phase error in include file processing.
");
		call prnter_$abort1 ();
		end;

	source = include_name_list_top -> source_info.source_pointer;
	srclen = include_name_list_top -> source_info.source_length;

	return;


alm_include_file_$macro: entry (macp, maclen);

/* Called with macro expansion to be inserted in source. */

dcl  macp ptr,
     maclen fixed bin;

	if eb_data_$curr_char_no ^= begin_line & tpass2 = 1 then
	     call prwrd_$source_only;

	call macro_safestore;
	eb_data_$macro_stack (eb_data_$macro_depth).macro = "1"b;
	eb_data_$macro_stack (eb_data_$macro_depth).count = 1;

	return;


alm_include_file_$insert: entry (macp, maclen, iters);

/* Called with other than macro expansion to be inserted in source. */

dcl  iters fixed bin;

	call macro_safestore;
	eb_data_$macro_stack (eb_data_$macro_depth).macro = "0"b;
	eb_data_$macro_stack (eb_data_$macro_depth).count = iters;

	return;


alm_include_file_$pop: entry;

/* Called because current input segment is exhausted. Returns having reset pointers etc. to previous input. */
/* If there is no more input data, the END card must be missing.  That is cause enough to abort. */


	if substr (eb_data_$include_control, 1, 1) then do;  /* If macro processing ... */
	     eb_data_$macro_stack (eb_data_$macro_depth).count = eb_data_$macro_stack (eb_data_$macro_depth).count - 1;
	     if eb_data_$macro_stack (eb_data_$macro_depth).count > 0 then do;
		eb_data_$curr_char_no = 0;
		begin_line = 0;
	     end;
	     else do;
		source = eb_data_$macro_stack (eb_data_$macro_depth).source_pointer;
		srclen = eb_data_$macro_stack (eb_data_$macro_depth).source_length;
		eb_data_$curr_char_no = eb_data_$macro_stack (eb_data_$macro_depth).curr_char_no;
		begin_line = eb_data_$curr_char_no - eb_data_$macro_stack (eb_data_$macro_depth).begin_offset;
		if eb_data_$macro_stack (eb_data_$macro_depth).macro then
		     call mexp_$reset_macro;

		eb_data_$macro_depth = eb_data_$macro_depth - 1;
		if eb_data_$macro_depth = 0 then
		     binlin = binlin + 1;
		eb_data_$include_control = substr (eb_data_$include_control, 2) || "0"b;
	     end;
	     source_printed = (eb_data_$curr_char_no ^= begin_line);
	end;
	else if include_index <= 0 then call prnter_$no_end_card ();
	else do;

		source = include_info_stack -> source_info.savep;
		srclen = include_info_stack -> source_info.savel;
		eb_data_$curr_char_no = include_info_stack -> source_info.curr_char_no;
		binlin = include_info_stack -> source_info.line_number;
		begin_line = include_info_stack -> source_info.line_begin_offset;
		source_printed = (eb_data_$curr_char_no ^= begin_line);

/* Retrieve old input state from push-down list. */

		include_info_stack = include_info_stack -> source_info.stack_back_pointer;
		eb_data_$include_number = include_info_stack -> source_info.source_number;
		include_index = include_index - 1;
		eb_data_$include_control = substr (eb_data_$include_control, 2) || "0"b;

		end;

	return;


make_new_node: procedure;

/*  This internal procedure creates a new source_info node for the current input segment. */


 declare	errcode fixed binary, rel_pointer fixed binary, words_needed fixed binary, new_pointer pointer;

 declare	map_entry_work_space (100);	/*  Copied into new block by glpl_$setblk. */

 declare  dirname		char(256),
	(entname, compname)	char(32);


	/*  Get space for node. */

	new_pointer = addr (map_entry_work_space);	/*  For address arithmetic to be defined. */
	words_needed = fixed (rel (addr (new_pointer -> source_info.last_word)), 18) - fixed (rel (addr (new_pointer -> source_info.first_word)), 18) + 2;
	rel_pointer = glpl_$setblk (map_entry_work_space (1), words_needed);

	/*  Make sure block address is even. */

	if mod (rel_pointer, 2) ^= 0 then rel_pointer = rel_pointer + 1;

	/*  Start filling in structure. */

	new_pointer = pointer (eb_data_$lavptr, rel_pointer);
	new_pointer -> source_info.source_number = source_file_number;

	call translator_info_$component_get_source_info (segment_pointer, dirname, entname, compname,
			new_pointer -> source_info.dtm, new_pointer -> source_info.uid, errcode);
	if errcode ^= 0 then do;
		call com_err_ (errcode, eb_data_$who_am_I, "Unable to get source file status. Assembly will continue.");
		tfatal = 1;
		end;

	if compname = "" then new_pointer -> source_info.pathname = rtrim (dirname, "> ") || ">" || entname;
	else new_pointer -> source_info.pathname = rtrim (dirname, "> ") || ">" || before (entname, ".archive") ||
		"::" || compname;
	new_pointer -> source_info.source_pointer = segment_pointer;
	new_pointer -> source_info.source_length = divide (bit_count, 9, 17);

	new_pointer -> source_info.names_list_pointer = null ();
	new_pointer -> source_info.stack_back_pointer = include_info_stack;

	include_info_stack = new_pointer;

	call safe_store ();

	return;
	end;


safe_store: procedure;

/*  This internal procedure puts current location in current file into current stack node,
    and resets the current position to the beginning of the (next) file.  */


	include_info_stack -> source_info.savep = source;
	include_info_stack -> source_info.savel = srclen;
	include_info_stack -> source_info.curr_char_no = eb_data_$curr_char_no;
	include_info_stack -> source_info.line_number = binlin;
	include_info_stack -> source_info.line_begin_offset = begin_line;

	eb_data_$curr_char_no = 0;

	binlin = 1;
	begin_line = 0;
	source_printed = "0"b;

	eb_data_$include_control = "0"b || eb_data_$include_control;

	return;
	end;


macro_safestore: proc;

/* This internal procedure pushes info onto the macro stack and
   prepares to handle insertion of expanded macro.	*/

	if eb_data_$macro_depth = 0 then
	     binlin = binlin - 1;
	eb_data_$macro_depth = eb_data_$macro_depth + 1;
	if eb_data_$macro_depth > 100 then do;
	     call prnter_ ("
Macro depth limit (100) exceeded.
");
	     call prnter_$abort1 ();
	end;

	eb_data_$macro_stack (eb_data_$macro_depth).source_pointer = source;
	eb_data_$macro_stack (eb_data_$macro_depth).source_length = srclen;
	eb_data_$macro_stack (eb_data_$macro_depth).curr_char_no = eb_data_$curr_char_no;
	eb_data_$macro_stack (eb_data_$macro_depth).begin_offset = eb_data_$curr_char_no - begin_line;

	source = macp;
	srclen = maclen;
	eb_data_$curr_char_no = 0;
	begin_line = 0;
	source_printed = "0"b;

	eb_data_$include_control = "1"b || eb_data_$include_control;

	return;


	end;


end;
