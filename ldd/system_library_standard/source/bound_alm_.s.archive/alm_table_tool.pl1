/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-11-04,JRGray), approve(86-11-04,MCR7507),
     audit(86-11-05,RWaters), install(86-11-12,MR12.0-1202):
     Modified to transparently handle history comments in the 'include' files.
  2) change(88-09-07,JRGray), approve(88-09-07,MCR7952),
     audit(88-09-30,WAAnderson), install(88-10-17,MR12.2-1169):
     Modified to remind that this program must be compiled with -table. Also
     fixed Capitalization problems.
                                                   END HISTORY COMMENTS */


att:alm_table_tool: proc options(variable);

/* Note: as this program calls cds, it must be compiled with -table */

/* alm_table_tool takes as input two include files, a table of [instructions X
decors] (DECOR_TABLE.incl.pl1) and a list of opcode defining ALM macros
(defops.incl.alm) from oplook_.alm, and produces as output a new version of
defops.incl.alm and two external static data structures: alm_data2, a bit
table denoting decor_class/decor compatibility, and alm_data1, a decor name
table used to assign numeric codes to the decors.  Both structures are
referenced by pass1_ and pass2_. 

     alm_table_tool is currently implemented as a command.

           Usage: alm_table_tool PATH1 PATH2

           where PATH1 is DECOR_TABLE.incl.pl1
                                 and
                 PATH2 is defops.incl.alm

	DECOR_TABLE.incl.pl1 and defops.incl.alm must conform to certain
standards to be accepted by alm_table_tool.  Since there are already current
versions of both, one simple way to avoid running afoul of these standards is
to make changes to the existing versions consistent with their current form.
At this writing, DECOR_TABLE.incl.pl1 is %included as a huge PL1 comment in
alm_table_tool itself.  Defops.incl.alm is %included in oplook_.alm.

     Assumptions about DECOR_TABLE.incl.alm:

	alm_table_tool assumes that the entire include file is a pl1
comment.  It assumes that the table consists of two parts, the first preceded
by the keyword "NAMES:" and the second preceded by the keyword "TABLE:".  It
assumes that the names section consists of a series of definitions separated
by whitespace.  Each definition consists of a dummy name (any character string
except "table") followed immediately by a colon, and a series of synonyms
(separated by whitespace and terminated by a semicolon).  In the table
section, there must be one column for each dummy name in the names section,
headed by that dummy name.  alm_table_tool uses the dummy names only to
coordinate synonyms with table columns.  Any name that is to be used as an
operand to the decor pseudo-op should be included as a synonym to some dummy
name in the names section.  alm_table_tool assumes that there is a "|"
delimiter between each column header and one after the last header.  It
assumes the "-------------------------------------------" boundary follows.
For each row, it assumes a "|" delimiter after the instruction name, one
between each row/column intersection, and one at the end of the row.  (Just
the kind of thing you'd expect).  If a given instruction is not in a given
decor, then whitespace should appear at the intersection of the instruction's
row and decor's column on the table, otherwise an "X" should appear
(alm_table_tool will also accept "x").  alm_table_tool assumes that a row
terminates with a new_line character.



     Assumptions about defops.incl.alm:

          alm_table_tool assumes that "defop" is the name of the macro, that
there are no spaces between members of the operand list, and that the last
operand of every defop denotes decor class.  If one finds it desirable to
alter any of these features of the macro, one should also alter alm_table_tool
to handle the change.  alm_table_tool also assumes that the defop segment it
receives as input has nothing else but defop macros in it.


      alm_table_tool's output:

          alm_table_tool writes new versions of defops.incl.alm, alm_data1,
and alm_data2 in the working directory.  Oplook_.alm must be reassembled to
incorporate the new defop macros.  Alm_data1 and alm_data2, which are
referenced by pass1_.pl1 and pass2_.pl1, need merely be replaced
in bound_alm by the new versions.  Pass1_.pl1 and pass2_.pl1 need not be
recompiled.    


IMPLEMENTATION STRATEGY:

	Each instr in DECOR_TABLE.incl.pl1 is a memeber of exactly one decor
class. A decor class is simply a compound predicate stating which set of
decors its members belong to. Since a row in the DECOR_TABLE is a vector with
a boolean (yes or no) slot for each decor, unique values of this vector denote
unique decor classes. alm_table_tool thus establishes an initial numbering of
decor classes by letting the binary value of the boolean vector number the
class denoted by that vector. Thus:

		| A | B | C | D |
	----------|-----------------
	 instr	| X |   | X |   |   

tells us that instr is in decor class "1010" = 9;

	Since not all possible classes are likely to be used (not all
possible bit patterns are represented by some row), the classes are then
renumbered so that if n classes are used they are numbered from 0 to n-1.
The table of decor_class/decor compatibilty (alm_data2) is then simply built
by "stacking" the bit patterns for each class on top of each other with class
0 at the top and class n-1 at the bottom. The class no for each instr (derived
from the bit pattern of its row in the table) is then placed in the
appropriate field for each instr in the defop macros of defops.incl.alm. The
main passes of the assembler will check instr/decor compatibility by first
calling oplook_ to get the decor_class for a given instr, and then taking the
decor_class as a row index and the current decor as a column index into
alm_data2.

/* DECOR_TABLE.incl.pl1 */

%include DECOR_TABLE;



    /* LOCAL ERROR HANDLER */
         on  local_error goto return_point;

    /* IN CASE OF INTERUPT */
         on cleanup call clean_up;

    /* GET TABLE AND DEFOP SEG PTRS  */
        call cu_$arg_count(arg_no);
        if arg_no ^=2
           then do;
                   call com_err_$suppress_name(0,this_pgm,"Usage: alm_table_tool table_seg_path defops_seg_path");
                   return;
                end;

        call cu_$arg_ptr(1,arg1p,arg1l,code);
        if code ^=0 | arg1 = ""
            then do;
                   call com_err_(error_table_$noarg,this_pgm);
                   return;
                 end;

        call cu_$arg_ptr(2,arg2p,arg2l,code);
        if code ^=0
            then do;
                   call com_err_(code,this_pgm,"while in cu_$arg_ptr");
                   return;
                 end;

        call expand_pathname_(arg1,dir_name,entry_name,code);
        if code ^=0
            then do;
                    call com_err_(code,this_pgm,arg1,"while in expand_pathname_");
                    return;
                 end;

        call hcs_$initiate_count(dir_name,entry_name,"",bit_ct,0,table_ptr,code);
        if table_ptr = null
            then do;
                    call com_err_(code,this_pgm,"while in hsc_$initiate_count");
                    return;
                 end;

        table_length = divide(bit_ct+8,9,24,0);

        call expand_pathname_(arg2,dir_name,entry_name,code);
        if code ^=0
            then do;
                    call com_err_(code,this_pgm,arg2);
                    return;
                 end;

        call hcs_$initiate_count(dir_name,entry_name,"",bit_ct,0,defops_ptr,code);
        if defops_ptr = null
            then do;
                    call com_err_(code,this_pgm,"while in hcs_$initiate_count");
                 end;

        defops_length = divide(bit_ct+8,9,24,0);


    /* COLLECT DECOR NAMES and INITIALIZE VARIABLES */

        call get_first_symbol(table,cursor,current_symbol);
        if substr(current_symbol,1,2) ^= "/*"
            then do;
	          call com_err_(0,this_pgm,"First symbol must be pl1 comment.");
		signal local_error;
	       end;
        if length(current_symbol) > 2
            then current_symbol = substr(current_symbol,3);
	  else call get_next_symbol(table,cursor,current_symbol);

/* Skip over comments that don't begin with "names:" or "NAMES:" */
        do while(current_symbol ^= "NAMES:" & current_symbol ^= "names:" & current_symbol ^= "");
	   do while(current_symbol ^= "*/" & current_symbol ^= " ");
		call get_next_symbol(table,cursor,current_symbol);
	     end;
	   if current_symbol = "*/" then do;
		call get_next_symbol(table, cursor, current_symbol);
		if substr(current_symbol, 1, 2) ^= "/*" then do;
		     call com_err_(0,this_pgm,"First symbol must be pl1 comment.");
		     signal local_error;
		  end;
		if length(current_symbol) > 2 then current_symbol = substr(current_symbol, 3);
		else call get_next_symbol(table,cursor,current_symbol);
	     end;
	end;

        if current_symbol ^="NAMES:" & current_symbol ^= "names:"
            then do;
	          call com_err_(0,this_pgm,"First non-comment symbol of DECOR_TABLE.incl must be ""NAMES:""");
		signal local_error;
	       end;


       do n = 1 to hbound(temp_array,1);
           temp_array(n).ptr = null;
       end;
       n = 0;

       call get_next_symbol(table,cursor,current_symbol);
       do while(current_symbol ^= "TABLE:" & current_symbol ^= "table:");
           n = n + 1;
	 if n > hbound(temp_array,1)
	     then do;
	             call com_err_(0,this_pgm,"Number of dummy names supplied excedes current maximum of ^d.",hbound(temp_array,1));
		   signal local_error;
		end;
           temp_array(n).name = substr(current_symbol,1,length(current_symbol)-1);
	 call get_next_symbol(table,cursor,current_symbol);
	 
           end_of_synonyms = "0"b;
           do while(^end_of_synonyms);
	     ptr_saver = temp_array(n).ptr;
	     allocate chain_node in(chain_space) set(temp_array(n).ptr);
	     temp_array(n).ptr -> chain_node.next = ptr_saver;
	     temp_array(n).ptr -> chain_node.name = current_symbol;
	     if index(temp_array(n).ptr -> chain_node.name,";")^=0
	         then do;
	                 temp_array(n).ptr -> chain_node.name = substr(temp_array(n).ptr -> chain_node.name,1,length(temp_array(n).ptr -> chain_node.name)-1);
		       end_of_synonyms = "1"b;
		    end;
               call get_next_symbol(table,cursor,current_symbol);
	     if current_symbol = ";"
	         then do;
	                 end_of_synonyms = "1"b;
		       call get_next_symbol(table,cursor,current_symbol);
		    end;
           end;

        end;



        call get_next_symbol(table,cursor,current_symbol); /* get symbol after
"TABLE:" */
        table_position = cursor;    /* save table position */
        line = current_line(table,cursor);
        call get_first_symbol((line),cursor,current_symbol); /* resets cursor relative to top line of table */
        table_position = table_position - cursor; /* so table_position equals beginning of line */
        if current_symbol ^= "|"
            then do;
	         call com_err_(0,this_pgm,"""|"" must be first character in table.");
	         signal local_error;
	       end;
        call get_next_symbol((line),cursor,current_symbol);


/* COUNT DECORS FORM COLUMN HEADINGS AND COORDINATE WITH NAMES */

    /* initialize */
        DEC_no = 0;
        m = 0;

        do while(current_symbol ^= "");
            DEC_no = DEC_no + 1;

         /* chase chain */

            do n= 1 to hbound(temp_array,1) while(current_symbol ^= temp_array(n).name);
	  end;
	  if current_symbol ^= temp_array(n).name
	      then do;
	             call com_err_(0,this_pgm,"""^a"" has not been defined in the NAMES section.",current_symbol);
		   signal local_error;
		 end;
            temp_ptr = temp_array(n).ptr;
	  do while(temp_ptr ^= null);
	      m = m + 1;
	      allocate name_stack;
	      name_stack.name = temp_ptr -> chain_node.name;
	      name_stack.number = DEC_no;
	      temp_ptr = temp_ptr -> chain_node.next;
	  end;

	  call get_next_symbol((line),cursor,current_symbol);
	  if current_symbol ^= "|"
	      then do;
	              if current_symbol = ""
	                 then message = "Top line of table must end with ""|"" delimiter";
		       else message = "Some column in table is missing a ""|"" delimiter";
		    call com_err_(0,this_pgm,message);
		    signal local_error;
		 end;
           call get_next_symbol((line),cursor,current_symbol);
        end;

/* CREATE ALM_DATA1 */

begin; /* so alm_data1 can get the extents just computed */

	/* FORMAT OF ALM_DATA1 */
          /* changes to this fromat should be propogated to alm_data.incl.pl1 */

     dcl 1 alm_data1,
	 2 structure,
	   3 num_of_names fixed init(allocation(name_stack)),
	   3 decor_name (allocation(name_stack)),
	     4 name  char(24) varying,
	     4 number fixed bin(35);
     dcl (n,m) fixed;

        m = allocation(name_stack);
        do n = m to 1 by -1;
            alm_data1.structure.decor_name(n).name = name_stack.name;
	  alm_data1.structure.decor_name(n).number = name_stack.number;
	  free name_stack;
        end;

        cds_argsA.sections(1).p = addr(alm_data1);
        cds_argsA.sections(1).len = size(alm_data1);
        cds_argsA.sections(1).struct_name = "alm_data1";
        cds_argsA.seg_name = "alm_data1";
        cds_argsA.num_exclude_names = 0;
        cds_argsA.exclude_array_ptr = null;
        cds_argsA.switches.defs_in_link = "0"b;
        cds_argsA.switches.separate_static = "0"b;
        cds_argsA.switches.have_text = "1"b;
        cds_argsA.switches.have_static = "0"b;
        cds_argsA.switches.pad = "0"b;

        call create_data_segment_(addr(cds_argsA),code);
        if code ^= 0
            then do;
	          call com_err_(code,this_pgm,"while creating alm_data1");
		signal local_error;
	       end;

end; /* begin block */        



/* DIGEST TABLE INFO */

        array_size = 2**DEC_no;
        cursor = cursor + table_position ;  /* reset relative to table */


    /* skip stuff */
         call get_next_symbol(table,cursor,current_symbol);
         if substr(current_symbol,1,5) ^= "-----"
             then do;
		 call com_err_(0,this_pgm,"Expecting ""---..."", found ""^a"".^/   Current line is:^/^a",current_symbol,current_line(table,cursor));
                     signal local_error;
                  end;
         call get_next_symbol(table,cursor,current_symbol);



begin;
       dcl  bit_string          bit(DEC_no*DEC_no*2) varying init(""b);
       dcl class_array(0:array_size-1) bit(1) unaligned;
       dcl bit_register(DEC_no) bit(1) unaligned;
       dcl bit_register_overlay bit(DEC_no) defined bit_register;

   /* PROCESS INSTRUCTIONS */
        class_array = "0"b;
        do while(current_symbol ^= "*/");
            allocate instruction; 
            instruction.name = current_symbol;
            last_symbol = current_symbol;
            call get_next_symbol(table,cursor,current_symbol);
            if current_symbol ^= "|"
                then do;
		   call com_err_(0,this_pgm,"Instruction table is defective. Just processed ""^a"", expecting ""|"", found ""^a"".^/   Current line is:^/^a",last_symbol,current_symbol,current_line(table,cursor));
                       signal local_error;
                     end;
            slot_no = 0;
            bit_register = "0"b;
            do while(current_symbol = "|" );
	      slot_no = slot_no + 1;
                call get_next_symbol(table,cursor,current_symbol);
                if current_symbol = "X" | current_symbol = "x"
                    then do;
                            bit_register(slot_no) = "1"b;
                            call get_next_symbol(table,cursor,current_symbol);
                            if current_symbol ^= "|"
                                then do;
				call com_err_(0,this_pgm,"Instruction table is defective. Just processed ""X"", expecting ""|"", found ""^a"".^/   Current line is:^/^a",current_symbol,current_line(table,cursor));
                                        signal local_error;
                                     end;
                         end;
            end;
            if slot_no ^= DEC_no + 1
	      then if slot_no < DEC_no + 1
	              then do;
			  call com_err_(0,this_pgm,"Unrecognized symbol ""^a"" in current line:^/^a^/    or previous line has too few columns.",current_symbol,current_line(table,cursor));
			   signal local_error;
			end;   
                         else do;
			   call com_err_(0,this_pgm,"Too many columns in the line at or near this one:^/^a",current_line(table,cursor-3));
			   signal local_error;
			end;
            instruction.number = binary(bit_register_overlay); 
            class_array(instruction.number) = "1"b;
        end; 

        call get_next_symbol(table,cursor,current_symbol);

	/* Skip over comments */
        do while(substr(current_symbol, 1, 2) = "/*");
	   if length(current_symbol) > 2 then current_symbol = substr(current_symbol, 3);
	   else call get_next_symbol(table,cursor,current_symbol);
	   do while(current_symbol ^= "*/");
	        call get_next_symbol(table,cursor,current_symbol);
	        if current_symbol = "" then do;
		   call com_err_(0,this_pgm,"DECOR_TABLE.incl.pl1 end while in comment.");
		   signal local_error;
		 end;
	     end;
	   call get_next_symbol(table,cursor,current_symbol);
	end;

        if current_symbol ^= ""
            then do;
	          call com_err_(0,this_pgm,"""^a"" was found at the end of DECOR_TABLE.incl, outside of the pl1-comment delimiters.",current_symbol);
		signal local_error;
	       end;



    /* COUNT NO OF DECOR CLASSES */

        no_of_classes = 0;
        do n = 0 to array_size-1;
            if class_array(n)
                then no_of_classes = no_of_classes + 1;
	      if no_of_classes > current_max_of_classes
	          then do;
		        call com_err_(0,this_pgm,"Number of unique intersections of decors excedes current maximum of ^d.",current_max_of_classes);
		        signal local_error;
		     end;
        end;
        hash_no = closest_prime(no_of_classes);


     begin;
       dcl  hash_table(0:hash_no) ptr;
       dcl 1 hash_entry  based(hash_entry_ptr),
             2 instr_no     fixed bin(17),
             2 class_no     fixed bin(17),
             2 next         ptr;
       dcl hash_entry_ptr   ptr;

	/* FORMAT OF ALM_DATA2 */
          /* changes to this format should be propogated to alm_data.incl.pl1 */

      dcl 1 alm_data2,
	  2 structure,
	    3 num_of_classes_less_1  fixed init(no_of_classes-1),
	    3 num_of_decors   fixed init(DEC_no),
	    3 compatible (0:no_of_classes-1) bit(DEC_no);

    /* BUILD HASH TABLE */
        hash_table = null;
        clsnum = -1; /* clsnum is incremented before it is used; the first class no. will be 0 */


        do n = 0 to array_size-1;
            if class_array(n) /* if there is such a class */
                then do;
                         clsnum = clsnum + 1;

                         hash_index = mod(n,hash_no);
                         if hash_table(hash_index) = null
                             then do; /* create and link new entry */
                                     allocate hash_entry;
                                     hash_table(hash_index) = hash_entry_ptr;
                                  end;
                         else do; /* go to the end and create new entry */
                                 ptr1 = hash_table(hash_index);
                                 do while(ptr1 -> hash_entry.next ^= null);
                                     ptr1 = ptr1 -> hash_entry.next;
                                 end;
                                 allocate hash_entry;
                                 ptr1 -> hash_entry.next = hash_entry_ptr;
                              end;
                       /* put_info_in_new_entry */ 
                         hash_entry.instr_no = n;
                         hash_entry.class_no = clsnum;
                         hash_entry.next = null;

		/*  fill in alm_data2's rows */
                         alm_data2.structure.compatible(clsnum) = substr(bit(n,17),17 - DEC_no + 1);
                     end;
           end;



     /* WRITE ALM_DATA2 */

        cds_argsA.sections(1).p = addr(alm_data2);
        cds_argsA.sections(1).len = size(alm_data2);
        cds_argsA.sections(1).struct_name = "alm_data2";
        cds_argsA.seg_name = "alm_data2";
        cds_argsA.num_exclude_names = 0;
        cds_argsA.exclude_array_ptr = null;
        cds_argsA.switches.defs_in_link = "0"b;
        cds_argsA.switches.separate_static = "0"b;
        cds_argsA.switches.have_text = "1"b;
        cds_argsA.switches.have_static = "0"b;
        cds_argsA.switches.pad = "0"b;

        call create_data_segment_(addr(cds_argsA),code);
        if code ^= 0
            then do;
	          call com_err_(code,this_pgm,"while creating alm_data2");
		signal local_error;
	       end;



     /* TRANSLATE INSTRUCTION NO'S TO DECOR CLASS NO'S */
           do while(allocation(instruction) ^=0); 
               allocate instruction2;
               instruction2 = instruction; 
               free instruction;
               hash_index = mod(instruction2.number ,hash_no);
               ptr1 = hash_table(hash_index);
               do while(ptr1 -> hash_entry.instr_no ^= instruction2.number);
                   ptr1 = ptr1 -> hash_entry.next;
               end;
               instruction2.number = ptr1 -> hash_entry.class_no;
           end; 

     end; /*  begin block */


     /* PUT DECOR CLASS NO's IN DEFOPS */
          working_dir = get_wdir_();
	call hcs_$make_seg(working_dir,"defops.incl.alm","",10,dont_care,code);
	if code ^= 0
	    then do;
	            call com_err_(code,this_pgm,"while trying to write defops.incl.alm");
	            signal local_error;
	         end;

          open file(defops_incl_alm) title("vfile_ "||rtrim(working_dir)||">defops.incl.alm") output;

          call get_first_symbol(defops,cursor,current_symbol);

/* Skip over leading comments */
	do while(current_symbol ^= "" & substr(current_symbol, 1, 1) = """");
	     comment_length = index(substr(defops, cursor), new_line) - 1;
	     if comment_length = 0 then comment_length = defops_length - cursor + 1;
	     put file(defops_incl_alm) skip edit(substr(defops, cursor, comment_length)) (a);
	     cursor = cursor + comment_length;
	     call get_next_symbol(defops,cursor,current_symbol);
	  end;

          macro_line = current_symbol||"     ";
          do while(current_symbol ^="");
              if allocation(instruction2) = 0
                  then do;
		      call com_err_(0,this_pgm,"There are more defops than entries in the table.");
                          signal local_error;
                       end;
              call get_next_symbol(defops,cursor,current_symbol);
              if index(current_symbol,instruction2.name) ^=1
                  then  do;
		       call com_err_(0,this_pgm,"Defop and table entries don't match.^/  Current defop entry is ""^a"".^/  Current table entry is ""^a"".",current_symbol,instruction2.name);
                           signal local_error;
                        end;
              begin;
                    dcl significance fixed bin(17),
                        char_num char(2) varying,
                        last_comma  fixed bin(17),
                        untouched_part   char(100) varying;
                    significance = verify(char(instruction2.number)," ");
                    char_num = substr(char(instruction2.number),significance);
                    last_comma = search(reverse(current_symbol),",") - 1;
                    untouched_part = substr(current_symbol,1,length(current_symbol) - last_comma);
                    macro_line = macro_line||untouched_part||char_num;
                    put file(defops_incl_alm) skip edit(macro_line) (x(10),a);
              end;
              free instruction2;
              call get_next_symbol(defops,cursor,current_symbol);

	/* Skip over comments */
	     do while(current_symbol ^= "" & substr(current_symbol, 1, 1) = """");
		comment_length = index(substr(defops, cursor), new_line) - 1;
		if comment_length = 0 then comment_length = defops_length - cursor + 1;
		put file(defops_incl_alm) skip edit(substr(defops, cursor, comment_length)) (a);
		cursor = cursor + comment_length;
		call get_next_symbol(defops,cursor,current_symbol);
	       end;

              macro_line = current_symbol||"     ";
          end;

          put file(defops_incl_alm) skip;
	close file(defops_incl_alm);



end;  /* of begin block */

return_point:  call clean_up;



     /* SUBROUTINES */
               
       closest_prime: proc(n) returns(fixed bin(17));
                      dcl n    fixed bin(17);
                      return(n);
       end closest_prime;

       get_first_symbol: proc(text,cursor,ret_arg);
                         dcl text   char(*) ,
                             ret_arg char(*) varying,
                             cursor  fixed bin(35),
                             extent  fixed bin(35);
                         cursor = verify(text,white_space);
                         if cursor = 0
                             then ret_arg = "";
                         else do;
                                 extent = search(substr(text,cursor),white_space)-1;
                                 if extent = -1
                                     then ret_arg = substr(text,cursor);
                                 else ret_arg = substr(text,cursor,extent);
                              end;
       end get_first_symbol;

       get_next_symbol: proc(text,cursor,symbol);
                         dcl text   char(*) ,
                             symbol char(*) varying,
                             cursor  fixed bin(35),
                             extent  fixed bin(35),
                             (temp_ptr,temp_ptr2)  fixed bin(35);
                         extent = search(substr(text,cursor),white_space);
                         if extent =0
                             then symbol = "";
                         else do;
                                 temp_ptr = cursor + extent - 1;
                                 temp_ptr2 = verify(substr(text,temp_ptr),white_space);
                                 if temp_ptr2 = 0
                                     then symbol = "";
                                 else do;
                                         cursor = temp_ptr + temp_ptr2 - 1;
                                         extent = search(substr(text,cursor),white_space) - 1;
                                         if extent = -1
                                              then symbol = substr(text,cursor);
                                         else symbol = substr(text,cursor,extent);
                                      end;
                              end;
       end get_next_symbol;

      current_line:proc(text,cursor) returns(char(300) varying);
              dcl text      char(*) ,
	        cursor    fixed bin(35);
	    dcl (n,new_cursor,extent)         fixed bin(35);

	    n = index(reverse(substr(text,1,cursor)),new_line);
	    if n=0
	        then new_cursor = 1; /* this is the first line */
	    else new_cursor = cursor - n +2;
	    extent = index(substr(text,new_cursor),new_line);
	    if extent = 0
	        then return( substr(text,new_cursor) ); /* last line */
	    else return( substr(text,new_cursor,extent) );
     end current_line;




    clean_up: proc;
                 do while(allocation(instruction) ^=0);
                     free instruction;
                 end;
                 do while(allocation(instruction2) ^=0);
                     free instruction2;
                 end;
	       do while(allocation(name_stack)^=0);
	           free name_stack;
	       end;
	       close file(defops_incl_alm);
    end clean_up;



     /* DECLARATIONS */

      dcl (arg1l,arg2l)                       fixed bin(21),
          (arg1p,arg2p,table_ptr,defops_ptr)  pointer,
          code                                fixed bin(35),
          arg1                                char(arg1l) based(arg1p),
          arg2                                char(arg2l) based(arg2p),
          table                               char(table_length)   based(table_ptr),
          defops                              char(defops_length)  based(defops_ptr),
          bit_ct                              fixed bin(24),
          dir_name                            char(168),
          entry_name                          char(32),
          arg_no                              fixed bin,
          null                                builtin,
	this_pgm                            char(14) init("alm_table_tool"),
          error_table_$noarg                  fixed bin(35) ext static,
          cu_$arg_ptr                         entry (fixed bin,ptr,fixed bin(21),fixed bin(35)),
          com_err_                            entry() options(variable),
          com_err_$suppress_name              entry() options(variable),
          cu_$arg_count                       entry(fixed bin),
          hcs_$initiate_count                 entry(char(*),char(*),char(*),fixed bin(24),fixed bin(2),ptr,fixed bin(35)),
          expand_pathname_                    entry (char(*),char(*),char(*),fixed bin(35)),
          cursor             fixed bin(35),
	DEC_no		fixed bin(17),
          current_symbol                      char(200) varying;
      dcl 1 instruction controlled,
            2 name   char(10) varying,
            2 number fixed bin(17);
      dcl 1 instruction2 controlled,
            2 name    char(10) varying,
            2 number   fixed bin(17);
     dcl (slot_no,no_of_classes,clsnum,hash_no)   fixed bin(17);

       dcl local_error condition;
       dcl white_space char(5) init("	 
");
       dcl ptr1                ptr,
           table_length        fixed bin(23),
           defops_length       fixed bin(23),
           array_size          fixed bin(17),
           last_symbol         char(200) varying,
           n                   fixed bin(17),
           hash_index          fixed bin(17),
	 table_position      fixed bin(17),
           macro_line          char(100) varying,
           declaration         char(200) varying,
	 length_of_pseudop   fixed bin (17) internal static init(8) options(constant),
	 decor_name(16)      char(length_of_pseudop) varying,
	 message             char(100) varying,
	 line                char(300) varying;
  dcl      1 temp_array(100),
             2 name   char(24) varying,
	   2 ptr    ptr;

  dcl      1 chain_node  based,
             2 name    char(24) varying,
	   2 next    ptr;

  dcl	 1 name_stack controlled,
  	   2 name char(24) varying,
	   2 number fixed bin(35);

  dcl	 comment_length fixed bin;
  dcl	 new_line char(1) int static options(constant) init("
");
  dcl 	 current_max_of_classes  fixed   internal static options(constant) init(16);
  dcl      working_dir  char(168) ;
  dcl      get_wdir_  entry  returns(char(168));
  dcl      hcs_$make_seg  entry (char(*),char(*),char(*),fixed bin(5),ptr, fixed bin(35));
  dcl      create_data_segment_ entry (ptr, fixed bin(35));
  dcl     dont_care  ptr;
  dcl      chain_space area(1024);
  dcl     end_of_synonyms bit(1);
  dcl   (temp_ptr,ptr_saver)     ptr;
  dcl      (m,j)     fixed bin;
  dcl	(addr,allocation,binary,bit,char,divide,empty,hbound,index,length,
	mod,reverse,rtrim,search,size,substr,verify) builtin;

  %include  cds_args;
  dcl     1 cds_argsA  like cds_args;
  dcl   cleanup  condition;
  dcl   defops_incl_alm  file;
end alm_table_tool;
