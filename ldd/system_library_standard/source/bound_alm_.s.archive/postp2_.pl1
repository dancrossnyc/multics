/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
     Modified to allow for joining to the definition section.
  2) change(88-08-02,JRGray), approve(88-08-05,MCR7952),
     audit(88-09-30,WAAnderson), install(88-10-17,MR12.2-1169):
     Modified to call alm_symtab_ as part of symbol table support.
                                                   END HISTORY COMMENTS */


/* post pass2 processor for the eplbsa assembler. */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

postp2_:
     procedure;

/* Postp2 is called after pass two to generate non-source output.
   There are three regions to this subroutine,
   one to append information
   to the text segment (literals, etc), one to put out the
   symbolic definition region (to either text or link) and one to
   put out the linkage file
   (including entry and call interludes).
   The arrangement of the output information is determined by the
   two flags tprot (for transfer vector and error call) and
   tmvdef (for moving definitions to the linkage file).
   Tprot should imply tmvdef.
   If the definitions are to go in the linkage file,
   a pre-pass must be made to assign locations
   before the information is put out
   because the links must be assigned first. */
/* Modified for separate static on 06/15/75 by Eugene E Wiatrowski */
/* Modified on 07/25/72 at 04:13:13 by R F Mabee.
   by RFM on 6 May 1972 to add definition pointer to entry point.
   by RFM on 21 March 1972 for new object segment format.
   by RHG on 15 May 1971 to fix last fix
   by RHG on 1 April 1971 to fix making itxlen even.
   November 1970, R H Campbell, for cleavage.
   by RHG on 17 Sept 1970 for new listing package
   by RHG on 11 August 1970 at 1345 to fix bug in rel_symbol link
   by RHG on 7 August 1970 at 0107 for new symbol table header
   */
/* AUTOMATIC VARIABLES USED BY POST_PASS_2 */
dcl (argout, calblk, iexp1,
     ilc, ilnkno, ioffst,
     isegno, ispc, itemp, itxlen, ival, l, 
     ldef, statlen, lnklen,
     lword (4), nwrds, rblock (10), rleft, rlkdef,
     rright, rsydef, val, words (4)) fixed bin (26) ;
dcl  iaddr fixed bin (18);
dcl (ientlc, ientpc) pointer;
dcl  iexp pointer;
dcl (ileft, iright) fixed bin (18);
dcl (isym, iname) pointer;
dcl (j, k) pointer;
dcl (lcl, lcptr, lcr) pointer;
dcl  lnkorg fixed bin (26);
declare  header_done bit (1) aligned;
						/* Headings placed in listing (watch for form-feeds). */
dcl  SYMBOL_TABLE_HEADER_nl static character (25) aligned initial ("SYMBOL TABLE HEADER
     ");
dcl  ff_ERROR_RETURN_CALL_nl static character (23) aligned initial ("ERROR RETURN CALL
     ");
dcl  ff_LINKAGE_INFORMATION_nl static character (27) aligned initial ("LINKAGE INFORMATION
     ");
dcl  ff_LITERALS_nl static character (15) aligned initial ("LITERALS
     ");
dcl  nl_NO_LITERALS_nl static character (18) aligned initial ("
NO LITERALS
     ");
dcl  ff_SYMBOL_INFORMATION_nl static character (25) aligned initial ("SYMBOL INFORMATION
     ");
dcl  ff_TRANSFER_VECTOR_nl static character (22) aligned initial ("TRANSFER VECTOR
     ");
dcl  ff_ENTRY_SEQUENCES_nl internal static char (22) aligned initial ("ENTRY SEQUENCES
");
dcl  nl_FIRST_REFERENCE_TRAP_LIST_nl internal static char (32) aligned initial ("
FIRST REFERENCE TRAP LIST
");
						/* EXTERNAL DATA USED BY POST_PASS_2 */
						/* eb_data_$bases is overlayed with eb_data_$symbas */
dcl (eb_data_$anames (0: 5), eb_data_$bases (0: 7), eb_data_$blanks (2),
     eb_data_$calseq (4), eb_data_$entseq (5),
     eb_data_$maos, eb_data_$meax0,
     eb_data_$meax7) external fixed bin (26);
dcl  eb_data_$lavptr external pointer;
dcl  eb_data_$stat_len ext fixed bin(26);
dcl  eb_data_$separate_static external bit(1);
						/* EXTERNAL ENTRIES CALLED BY POST_PASS_2 */
dcl  alm_definitions_$assign_definitions entry;
declare  alm_definitions_$fix_entries ext entry;
declare  alm_symtab_$count_words ext entry(fixed bin(26));
declare  alm_symtab_$emit ext entry(fixed bin(26));

dcl  alm_definitions_$emit_definitions entry (fixed bin (26), fixed bin (26), fixed bin (26));
dcl  litevl_$litasn entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26));
dcl  prlst_$prlst_ entry (character (*) aligned);
dcl  prnam_$prnam2 entry (pointer, pointer);
dcl  prnam_$prnam_ entry (pointer);
dcl  prnter_$abort1 entry;
dcl  prnter_$prnter_ entry (character (*) aligned);
dcl  pulnk_$lnkcnt entry (fixed bin (26));
dcl  pulnk_$pulnk_ entry (fixed bin (26), fixed bin (26), fixed bin (26));
dcl  pudef_$pudef_ entry (fixed bin (26), fixed bin (26), fixed bin (26));
dcl  pudef_$defcnt entry (fixed bin (26));
dcl  pusmb_$symcnt entry (fixed bin (26));
dcl  putout_$putblk entry (fixed bin (26), pointer, fixed bin (26), fixed bin (26), pointer);
dcl  putout_$putlst entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26));
dcl  putout_$putwrd entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26));
dcl  putxt_$putxt_ entry (fixed bin (26), fixed bin (26), fixed bin (26));
dcl  putxt_$txtcnt entry (fixed bin (26));
						/* EXTERNAL FUNCTIONS CALLED BY POST_PASS_2 */
dcl (lstman_$blkasn entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26)),
     lstman_$lnkasn entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26)),
     lstman_$namasn entry (fixed bin (26)),
     utils_$makins entry (fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26), fixed bin (26))
     ) returns (fixed bin);
						/* LABEL VARIABLES USED IN POST_PASS_2 */
dcl  control_1020 (3) label local static;
dcl  control_1030 (5) label local static;
dcl  first_time bit (1) static initial ("1"b);
dcl  twop18 static fixed bin (19) initial (1000000000000000000b);
dcl  deforg fixed bin;
declare  symtab_words fixed bin(26);
dcl (null, convert, fixed) builtin;

/* INCLUDE FILES */
%	include alm_lc;

%	include alm_list_beads;

/* multiple word bit patterns for standard sequences */
%	include alm_prototypes;

/* miscellaneous whole words for use with relocation processing */
%	include alm_relocation_bits;

%	include concom;

%	include objnfo;

/* common for symbol table header processing. */
%	include sthedr;

%	include varcom;

%	include alm_options;

/* END OF DECLARATIONS */
/*  */
/* POST_PASS_TWO PROGRAM STARTS HERE. */
	if first_time /* in the process */ then
	     do;					/* initialize the labels & stuff */
	     control_1020 (1) = label_1030;		/* Normal link pair. */
	     control_1020 (2) = label_1040;		/* Entry point. */
	     control_1020 (3) = label_1070;		/* Call out. */
	     control_1030 (1) = label_1031;		/* Type 1 link: <*section>|x */
	     control_1030 (2) = label_1032;		/* Type 2 link: base|[symbol] */
	     control_1030 (3) = label_1033;		/* Type 3 link: <segment>|x */
	     control_1030 (4) = label_1034;		/* Type 4 link: <segment>|[symbol] */
	     control_1030 (5) = label_1035;		/* Type 5 link: <*section>|[symbol] */
	     first_time = "0"b;
	end;

	if dlclst > 0 then do;	/* calculate length of explicit definitions */
		curlc = dlclst;
		idfpc = 0;
		j = pointer(eb_data_$lavptr, curlc);
		do while(j->location_counter_bead.right_join ^= "0"b);
			idfpc = idfpc + convert(idfpc, j->location_counter_bead.max_value);
			curlc = convert(curlc, j->location_counter_bead.right_join);
			j = pointer(eb_data_$lavptr, curlc);
		  end;
	  end;
						/* part 2 of postp2. */
						/* Put out terminal information in the text segment. */
						/* output order is transfer vector, error call, and literals. */
						/* In addition if (tmvdef), all definitions are preassigned. */
	lnkorg = convert (lnkorg, pointer (eb_data_$lavptr, lpsect) -> location_counter_bead.origin);
	if (tprot ^= 0) then
	     do;
	     call prlst_$prlst_ (ff_TRANSFER_VECTOR_nl);
	     pc = 0;
	     curlc = lptv;
	     j = pointer (eb_data_$lavptr, tvlst);
	     do while (rel (j));
		tinhib = convert (tinhib, j -> transfer_vector_bead.inhibit);
		val = convert (val, j -> transfer_vector_bead.location);
		k = pointer (eb_data_$lavptr, j -> transfer_vector_bead.location_counter);
		if rel (k) then
		     val = val + fixed (k -> location_counter_bead.origin, 18);
		call putout_$putwrd (pc, utils_$makins (0, (val), mtra, 0, 0), i642, (iltext));
		j = pointer (eb_data_$lavptr, j -> transfer_vector_bead.next);
	     end;
						/* put out error call. */
	     tinhib = 0;
	     if (tcall ^= 0) then
		do;
		pc = 0;
		curlc = lpcall;
		call prlst_$prlst_ (ff_ERROR_RETURN_CALL_nl);
		call litevl_$litasn (argout, dzero (1), 2, 0);
		slcall (3) = utils_$makins (0, argout + litorg, meapap, 0, 0);
		nslbit (3) = iltext;
		calblk = lstman_$blkasn (4, lstman_$namasn (smxer (1)), lstman_$namasn (sretrn (1)), 0);
		slcall (5) = utils_$makins (lp, lstman_$lnkasn (calblk, 0, 0, 0) + lnkorg, mtra, 1, mri);
		nslbit (5) = ilkptr * twop18;		/* glpl_$glwrd (ilkptr, 0) */
		call putout_$putlst (pc, slcall (1), i642, nslcal, nslbit (1));
		call putout_$putwrd (pc, 0, i642, 0);
	     end;
	end;

/*  For new object segment format, put out text-section entry sequences.
   These merely call an operator, because the full entry sequence is fairly long.  */

	if tnewobject ^= 0 then do;
	     call alm_definitions_$fix_entries ();
	     header_done = "0"b;
	     j = pointer (eb_data_$lavptr, lnklst);	/* Chain of links, entries, etc. */
	     curlc = lpentries;
	     pc = 0;
	     do while (rel (j));
		if j -> entry_bead.kind = bit (binary (2, 18), 18) then do;
		     if ^ header_done then do;
			call prlst_$prlst_ (ff_ENTRY_SEQUENCES_nl);
			header_done = "1"b;
		     end;
		     tinhib = convert (tinhib, j -> entry_bead.inhibit);
		     ientpc = pointer (eb_data_$lavptr, j -> entry_bead.transfer_vector);
		     ioffst = convert (ioffst, ientpc -> transfer_vector_bead.location);
		     ientlc = pointer (eb_data_$lavptr, ientpc -> transfer_vector_bead.location_counter);
		     ival = fixed (ientlc -> location_counter_bead.origin, 18) + ioffst;

		     new_entlst (1) = fixed (j -> entry_bead.link_no, 18) * twop18;
		     new_entlst (3) = utils_$makins (0, ival, new_entlst (3), 0, 0);
		     call putout_$putlst (pc, new_entlst (1), i642, new_nentls, new_entbit (1));
		end;
		j = pointer (eb_data_$lavptr, j -> entry_bead.next);
	     end;
	end;

/* punch out literals in order of definition. */
	if pointer (eb_data_$lavptr, lplit) -> location_counter_bead.value then
	     do;
	     curlc = lplit;
	     call prlst_$prlst_ (ff_LITERALS_nl);
	     j = pointer (eb_data_$lavptr, litlst);
	     do while (rel (j));
		pc = convert (pc, j -> literal_bead.location);
		nwrds = convert (nwrds, j -> literal_bead.size);
		lcptr = pointer (eb_data_$lavptr, j -> literal_bead.location_counters);
		if rel (lcptr) then			/* */
label_280a:	     do l = 1 to nwrds;
		     lcl = pointer (eb_data_$lavptr, lcptr -> location_counters (l).left);
		     lcr = pointer (eb_data_$lavptr, lcptr -> location_counters (l).right);
		     ileft = convert (ileft, j -> literal_bead.words (l).left);
		     iright = convert (iright, j -> literal_bead.words (l).right);
		     rleft = 0;
		     rright = 0;
		     if rel (lcl) then
			do;
			ileft = ileft + fixed (lcl -> location_counter_bead.origin, 18);
			rleft = ibits (fixed (lcl -> location_counter_bead.section, 18));
		     end;
		     if rel (lcr) then
			do;
			iright = iright + fixed (lcr -> location_counter_bead.origin, 18);
			rright = ibits (fixed (lcr -> location_counter_bead.section, 18));
		     end;
		     j -> literal_bead.words (l).left = convert (literal_bead.words (1).left, ileft);
		     j -> literal_bead.words (l).right = convert (literal_bead.words (1).right, iright);
		     rblock (l) = rleft * twop18 + rright; /* glpl_$glwrd (rleft, rright) */
		end label_280a;
		else				/* */
label_211a:	do l = 1 to nwrds;
		     rblock (l) = 0;
		end label_211a;
		call putout_$putblk (pc, addr (j -> literal_bead.words), i66, nwrds, addr (rblock));
		j = pointer (eb_data_$lavptr, j -> literal_bead.next);
	     end;
	end;
	else
	call prlst_$prlst_ (nl_NO_LITERALS_nl);

	itxpc, deforg = fixed (pointer (eb_data_$lavptr, lplit) -> location_counter_bead.origin, 18) + litc;

/* assign locations to definitions, if required. */
	if (tmvdef = 0) then
	     do;
	     new_text_offset = 0;
	     new_text_length, new_definition_offset = deforg;
	     pointer (eb_data_$lavptr, lpdefs) -> location_counter_bead.origin = bit (fixed (deforg, 18), 18);
	     call alm_definitions_$emit_definitions (lnkorg, rlkdef, rsydef); /* Put out the definitions. */
	     new_definition_length = defc;
						/* save the length of the text segment - slave procedure. */
	     itxlen = defc + fixed (pointer (eb_data_$lavptr, lpdefs) -> location_counter_bead.origin, 18);
	end;
	else
	do;
	     pointer (eb_data_$lavptr, lpdefs) -> location_counter_bead.origin =
		bit (fixed (fixed (pointer (eb_data_$lavptr, lpsect) -> location_counter_bead.origin, 18) + lnkno, 18), 18);
	     call alm_definitions_$assign_definitions;	/* Merely assign definitions for later output. */
	     itxlen = fixed (pointer (eb_data_$lavptr, lplit) -> location_counter_bead.origin, 18) + litc;
	end;

/* force the linkage to begin on an even word boundary */
	if (mod (itxlen + idfpc, 2) ^= 0) then do;
	     curlc = lptext;
	     call putout_$putwrd (itxlen, 0, i66, 0);
	     /* The pad word is part of the defn section only when there is
	        more stuff to be added to the defn section. */
	     if idfpc > 0 then new_definition_length = new_definition_length + 1;
	end;
						/* Put out links, entries, and call - outs. */
						/* comment, initialize, and generate the eight word header. */
	if tnewobject = 0 then itxpc = itxlen;
	text_section_length = itxlen;
	call prlst_$prlst_ (ff_LINKAGE_INFORMATION_nl);
	tpulnk = 1;
	if eb_data_$separate_static
	   then lnkc = eb_data_$stat_len;
	   else lnkc = 0;
	curlc = lphead;
	if pointer (eb_data_$lavptr, lphead) -> location_counter_bead.value then
	     do;
	     call prnter_$prnter_ ("alm: fatal processing error in POSTP2 in the assembler");
	     call prnter_$abort1;
	end;
	tinhib = 0;
						/* put def ptr in header. */
	if (tmvdef = 0) then
	     do;
	     ldef = 0;
	     words (1) = 0;
	end;
	else
	do;
	     ldef = defcnt;
	     words (1) = mri;
	end;
	lnklen = lnkno + ldef + lnkorg;
	words (2) = convert (words (2), pointer (eb_data_$lavptr, lpdefs) -> location_counter_bead.origin) * twop18;
	lword (1) = 0;
	lword (2) = iltext;
	if (tmvdef ^= 0) then
	     lword (2) = illink;

	if tfirstreftrap ^= 0 then do;
	     words (2) = words (2) + lnklen;
	     lword (2) = lword (2) + ilink;
	     lnklen = lnklen + 3;
	     lnkno = lnkno + 3;
	end;
	call putout_$putlst (lnkc, words (1), i66, 2, lword (1));
						/* nxt blk ptr and pre blk ptr are 0 since only one */
						/* linkage block is currently produced by eplbsa. */
	words (1) = 0;
	words (2) = 0;
	words (3) = 0;
	words (4) = 0;
	call putout_$putlst (lnkc, words (1), i66, 4, words (1));
						/* put loc of links and block length in 7th word of header and */
						/* segment length in 8th word. */
	words (1) = lnkorg * twop18 + lnklen;
	lword (1) = illink + ilink;
          if ^ eb_data_$separate_static
             then words (2) = lnkorg - 8;
             else words (2) = eb_data_$stat_len;
          statlen = words (2);
          lword (2) = ilink;
	call putout_$putlst (lnkc, words (1), i66, 2, lword (1));

/* put out links, entries, and call - outs. */

	if eb_data_$separate_static
	   then lnkc = eb_data_$stat_len;
	   else lnkc = 0;
	curlc = lpsect;
	l = lnkorg;
	j = pointer (eb_data_$lavptr, lnklst);
label_1020:
	do while (rel (j));
	     go to control_1020 (fixed (j -> link_bead.kind, 18));

/* type 1 in list, normal link pair, generate fi pair. */
/* print proper names according to the type no. of the link. */
/* see mspm bd.7.01 for a discussion of the 5 link types. */
label_1030:    tinhib = 0;
						/* print the symbols corresponding to the link types. */
						/* but ignoring the internal expression values of the link. */
	     iexp = pointer (eb_data_$lavptr, pointer (eb_data_$lavptr,
		j -> link_bead.expression) -> expression_bead.type_pair);
	     iexp1 = convert (iexp1, iexp -> type_pair_bead.segment);
	     iname = addr (eb_data_$anames (2 * iexp1));
	     isym = pointer (eb_data_$lavptr, pointer (eb_data_$lavptr,
		iexp -> type_pair_bead.symbol) -> name_bead.name);
	     if isym = eb_data_$lavptr then
		isym = addr (eb_data_$blanks);
	     ilnkno = convert (ilnkno, iexp -> type_pair_bead.type); /* Extract the type no. of the link. */
	     go to control_1030 (ilnkno);		/* Branch on the link type. */

/* type 1 link, print *name only. */
label_1031:    isym = addr (eb_data_$blanks);
	     go to label_1037;

/* type 2 link, print base and symbol. */
label_1032:    iname = addr (eb_data_$bases (divide (iexp1, 32768, 26, 0)));
	     go to label_1037;

/* type 3 link, print segment name only. */
label_1033:    isym = addr (eb_data_$blanks);
						/* type 4 link, print segment and symbol */
label_1034:    iname = pointer (eb_data_$lavptr, pointer (eb_data_$lavptr, iexp1) -> name_bead.name);
label_1035:					/* type 5 link, print *name and symbol. */
label_1037:    call prnam_$prnam2 (iname, isym);		/* Print the segment and symbol characters for the fi pair. */
	     words (1) = - l * twop18 + mfi;
	     lword (1) = imblok * twop18;
	     words (2) = fixed (pointer (eb_data_$lavptr,
		j -> link_bead.expression) -> expression_bead.location || j -> link_bead.modifier, 18);
	     lword (2) = ildefs;
						/* put out the binary fi word pair. */
	     call putout_$putlst (lnkc, words (1), i642, 2, lword (1));
	     l = l + 2;
	     go to label_1080;

/* type 2, entry point, generate entry interlude. */
/* print entry sequence */
label_1040:    if tnewobject ^= 0 then goto label_1080;	/* Entries already processed. */
	     call prnam_$prnam_ (addr (eb_data_$entseq));
	     tinhib = convert (tinhib, j -> entry_bead.inhibit);
	     if (tprot = 0) then
		do;
		ientpc = pointer (eb_data_$lavptr, j -> entry_bead.transfer_vector);
		ioffst = convert (ioffst, ientpc -> transfer_vector_bead.location);
		ientlc = pointer (eb_data_$lavptr, ientpc -> transfer_vector_bead.location_counter);
		ival = fixed (ientlc -> location_counter_bead.origin, 18) + ioffst;
		words (1) = utils_$makins (0, - l, meaplp, 0, mpc);
		words (2) = utils_$makins (0, 3, eb_data_$maos, 0, mpc);
		words (3) = utils_$makins (0, ival, eb_data_$meax7, 0, 0);
		words (4) = utils_$makins (0, fixed (j -> entry_bead.link_no, 18) - l - 3 + lnkorg, mtra, 0, mpci);
		lword (1) = imlink * twop18;
		lword (2) = iselfr * twop18;
						/* extract the segment number to determine proper relocation. */
		isegno = convert (isegno, ientlc -> location_counter_bead.section);
		itemp = ibits (isegno);
		lword (3) = itemp * twop18;
		lword (4) = lword (2);
		call putout_$putlst (lnkc, words (1), i642, 4, lword (1));
		words (1) = 0;
		words (2) = 0;
		lword (1) = 0;
		lword (2) = 0;
		call putout_$putlst (lnkc, words (1), i66, 2, lword (1)); /* changed to i66 to keep inhibit bit off */
		l = l + 6;
	     end;
	     else
	     do;
						/* mastermode or execute only entry sequence */
		call putout_$putwrd (lnkc,
		     utils_$makins (0, (fixed (j -> entry_bead.transfer_vector_no, 18)), eb_data_$meax0, 0, 0), i642, 0);
		l = l + 1;
		words (1) = utils_$makins (0, - l, meaplp, 0, mpc);
		words (2) = utils_$makins (0, 2, eb_data_$maos, 0, mpc);
		words (3) = utils_$makins (0, fixed (j -> entry_bead.link_no, 18) - l - 2 + lnkorg, mtra, 0, mpci);
		lword (1) = imlink * twop18;
		lword (2) = iselfr * twop18;
		lword (3) = lword (2);
		call putout_$putlst (lnkc, words (1), i642, 3, lword (1));
		call putout_$putwrd (lnkc, 0, i66, 0);
		l = l + 4;
		call putout_$putwrd (lnkc, 0, i66, 0);
		l = l + 1;
	     end;
	     go to label_1080;

/* type 3, call - out, in mastermode put out call interlude. */
/* print call sequence comment; */
label_1070:    call prnam_$prnam_ (addr (eb_data_$calseq));
	     words (1) = utils_$makins (0, fixed (j -> call_out_bead.transfer_vector_no, 18), eb_data_$meax0, 0, 0);
	     words (2) = utils_$makins (0, fixed (j -> call_out_bead.type_pair, 18) - l - 1 + lnkorg, mtra, 0, mpci);
	     lword (1) = 0;
	     lword (2) = iselfr * twop18;
	     tinhib = convert (tinhib, j -> call_out_bead.inhibit);
	     call putout_$putlst (lnkc, words (1), i642, 2, lword (1));
	     l = l + 2;
						/* link through link list. */
label_1080:    j = pointer (eb_data_$lavptr, j -> link_bead.next);
	end label_1020;

/* First-reference trap array goes at end of links. */

	if tfirstreftrap ^= 0 then do;
	     call prlst_$prlst_ (nl_FIRST_REFERENCE_TRAP_LIST_nl);
	     words (1) = 1;				/* Declaration version. */
	     words (2) = 1;				/* Number of trap pointers. */
	     words (3) = first_ref_trap_proc_linkno * twop18 + first_ref_trap_arg_linkno;
	     lword (1), lword (2) = 0;
	     if first_ref_trap_arg_linkno = 0 then lword (3) = illink;
	     else lword (3) = illink + ilink;
	     call putout_$putlst (lnkc, words (1), i66, 3, lword (1));
	end;

/* end of links, decide to put out definitions or pointer. */

	if (tmvdef ^= 0) then			/* */
	     call alm_definitions_$emit_definitions (lnkorg, rlkdef, rsydef); /* Put out the definitions now. */
						/* Check for phase error in linkage file. */
	ilkpc = lnklen;
	if (tmvdef ^= 0) then
	     lnkc = lnkc + defc;
	if (lnkc ^= (lnkno + ldef) + eb_data_$stat_len) then
	     do;
	     call prnter_$prnter_ ("Phase error in the assembler while generating the linkage segment.");
	     call prnter_$abort1;
	end;

          if ^ eb_data_$separate_static
             then eb_data_$stat_len = statlen;

/* force linkage to be an even length */

	if (mod (ilkpc, 2) ^= 0) then
	     do;
	     call putout_$putwrd (lnkc, 0, i66, 0);
	     lnklen = lnklen + 1;
	     ilkpc = ilkpc + 1;
	end;
	call prlst_$prlst_ (ff_SYMBOL_INFORMATION_nl);
	ilc = curlc;
	curlc = lpst;
						/* assembler produced header always */
						/* begins following joined data of symbol segment. */
	ispc = fixed (pointer (eb_data_$lavptr, lprtx) -> location_counter_bead.origin, 18);
	if mod (ispc, 2) ^= 0 then ispc = ispc + 1;
	call prlst_$prlst_ (SYMBOL_TABLE_HEADER_nl);
						/* if the symbol table header is changed */
						/* then the following calls must be */
						/* changed accordingly. */
						/* complete the symbol table header */
						/* store the text length and linkage length */
	sthedr_$text_and_link_lengths.text_length = bit (fixed (itxlen, 18), 18);
	sthedr_$text_and_link_lengths.link_length = bit (fixed (lnklen, 18), 18);
	if tnewobject ^= 0 then do;
	     call alm_symtab_$count_words (symtab_words);
	     optional_truncate = bit (fixed (ispc + new_sthedr_$hdrlen, 18), 18);
	     pointer (eb_data_$lavptr, lprtx) -> location_counter_bead.origin, rel_text, default_truncate =
		bit (fixed (fixed (optional_truncate, 18) + symtab_words, 18), 18);
	     text_boundary = bit (fixed (itxtmod, 18), 18);
	     link_boundary = bit (fixed (ilnkmod, 18), 18);
	end;
	else pointer (eb_data_$lavptr, lprtx) -> location_counter_bead.origin = bit (fixed (ispc + sthedr_$hdrlen, 18), 18);

	call putxt_$txtcnt (val);			/* Count relocation bits. */
	if tnewobject = 0 then if tmvdef = 0 then val = val + 8; /* Adjust for rlkdef, rsydef output later. */
	tpc = convert (tpc, pointer (eb_data_$lavptr, lprtx) -> location_counter_bead.origin);
						/* call pusmb_$pusmb_ (tpc, val, 0); DONE BY PAKBIT. */
	itxcnt = val;
	nwrds = divide (val + 35, 36, 26, 0) + 1;
	if tnewobject ^= 0 then nwrds = nwrds + 1;
	iaddr = nwrds + fixed (pointer (eb_data_$lavptr, lprtx) -> location_counter_bead.origin, 18);
	pointer (eb_data_$lavptr, lprlk) -> location_counter_bead.origin =
	     bit (fixed (iaddr, 18), 18);

	if tnewobject = 0 then if tmvdef = 0 then
		call putxt_$putxt_ (rlkdef, iaddr * twop18 + 2, ilsymb);
	     else					/* */
	     call pulnk_$pulnk_ (rlkdef, iaddr * twop18 + 2, ilsymb);
	else rel_link = bit (fixed (iaddr - ispc, 18), 18);

	call pulnk_$lnkcnt (val);
	if (tmvdef ^= 0) then
	     val = val + 4;
	tpc = convert (tpc, pointer (eb_data_$lavptr, lprlk) -> location_counter_bead.origin);
						/* call pusmb_$pusmb_ (tpc, val, 0); DONE BY PAKBIT. */
	ilkcnt = val;
	nwrds = divide (val + 35, 36, 26, 0) + 1;
	if tnewobject ^= 0 then nwrds = nwrds + 1;
	iaddr = iaddr + nwrds;
	pointer (eb_data_$lavptr, lpdefs) -> location_counter_bead.origin =
	     bit (fixed (iaddr, 18), 18);

	if tnewobject = 0 then if tmvdef = 0 then
		call putxt_$putxt_ (rsydef, iaddr * twop18 + 2, ilsymb);
	     else					/* */
	     call pulnk_$pulnk_ (rsydef, iaddr * twop18 + 2, ilsymb);
	else rel_def = bit (fixed (iaddr - ispc, 18), 18);

	l = itxpc;	/* l(def) = l(def+text)-l(text)+l(exp def) */
	itxpc = itxpc + new_definition_length;
	call putxt_$txtcnt(idfcnt);
	itxpc = l;	/* restore value of itxpc */
	call putxt_$txtcnt(val);
	l = idfcnt - val;	/* l(def+text) - l(text) */
	call pudef_$defcnt(val);	/* calculate length of reloc info for definition section */
	val = val + l;
	if (tmvdef ^= 0) then
	     val = val + 4;
	tpc = convert (tpc, pointer (eb_data_$lavptr, lpdefs) -> location_counter_bead.origin);
						/* call pudef_$pudef_ (tpc, val, 0); DONE BY PAKBIT. */
	idfcnt = val;
	nwrds = divide (val + 35, 36, 26, 0) + 1;
	if tnewobject ^= 0 then nwrds = nwrds + 1;
	iaddr = iaddr + nwrds;
	pointer (eb_data_$lavptr, lprst) -> location_counter_bead.origin =
	     bit (fixed (iaddr, 18), 18);

	if tnewobject = 0 then if tmvdef = 0 then
		call putxt_$putxt_ (rsydef, iaddr * twop18 + 2, ilsymb);
	     else					/* */
	     call pulnk_$pulnk_ (rsydef, iaddr * twop18 + 2, ilsymb);
	else rel_symbol = bit (fixed (iaddr - ispc, 18), 18);

	new_sthedr_$block_size.block_size =
	     bit (fixed (iaddr - ispc + divide (fixed (default_truncate, 18) + 17, 18, 17, 0) + 2, 18), 18);
						/*  *** ASSUMING all absolute relocation for symbol header. *** */

	ilc = curlc;
	curlc = lpst;
	if tnewobject = 0 then call putout_$putblk (ispc, addr (sthedr_$sthedr_), i66, sthedr_$hdrlen, null ());
	else do;
	     call putout_$putblk (ispc, addr (new_sthedr_$new_sthedr_), i66, new_sthedr_$hdrlen, addr (new_sthedr_$relocinfo));
	     call alm_symtab_$emit (ispc);
	end;
	istpc = ispc;
	curlc = ilc;
	call pusmb_$symcnt (itemp);
     end postp2_;
