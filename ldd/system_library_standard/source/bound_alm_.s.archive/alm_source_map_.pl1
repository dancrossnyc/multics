/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-04-28,JRGray), approve(87-07-03,MCR7689),
     audit(87-07-09,RWaters), install(87-11-02,MR12.2-1001):
     Updated to use the latest source_info structure (alm 19).
  2) change(2016-01-05,Swenson), approve(2016-01-05,MCR10002):
     Fixed ALM buffer overrun error (ticket #89) that occurs on long source
     pathnames.
                                                   END HISTORY COMMENTS */


/*  This segment contains routines to generate standard object segment source map identifying
    the source files which went into this compilation.  An additional entry point counts
    the words used for the source map so that space can be allocated in advance.  */

/*  Created on 06/20/72 at 20:34:31 by R F Mabee. */
/*  Modified on 06/22/72 at 11:51:34 by R F Mabee. */
/* Modified for macro expansion 3/24/77 by Noel I. Morris	*/
/* Modified to fix bugs phx5126 and phx6042 on 5/12/81 by EBush */


alm_source_map_$count_map_words: procedure (nwords);

/*  This entry returns the number of words to be reserved for the source map. */


 declare	nwords fixed bin;

 declare	temp pointer, (i, j) fixed bin (26),
	code fixed bin (35);

 declare	nnames fixed bin internal static;		/*  Saved from count entry to putout entry. */

 declare	twop18 fixed bin (26) internal static initial (262144);	/*  Constant. */

 declare	prnam_$prnam_ external entry (pointer),
	putout_$putblk external entry (fixed bin, pointer, fixed bin (26), fixed bin, pointer),
	putout_$putwrd external entry (fixed bin, fixed bin, fixed bin (26), fixed bin (35)),
	hcs_$terminate_noname external entry (ptr, fixed bin (35));

 declare	null builtin, substr builtin, divide builtin, length builtin, rtrim builtin;


%include	alm_include_file_info;

%include	varcom;

%include	concom;


	nwords, nnames = 0;		/*  Count names, words containing names. */

	temp = include_name_list_base;
	do while (temp ^= null ());	/*  Run down list. */
		i = length (rtrim (temp -> source_info.pathname));

		temp -> source_info.source_map_offset = nwords;
		temp -> source_info.source_map_length = i;

		nwords = nwords + divide (i + 3, 4, 26, 0);

		temp = temp -> source_info.names_list_pointer;
		nnames = nnames + 1;
		end;

	nwords = nwords + nnames * 4 + 2;	/*  Two word header, four word array entries. */

	return;


alm_source_map_$put_out_map: entry (ispc);

/*  This entry sticks source map in object at ispc in current lc.  */


 declare	ispc fixed bin;

 declare	map_base fixed bin;

 declare	1 acc_temp aligned,
	  2 count bit (9) unaligned,
	  2 string char (256) unaligned;


	map_base = ispc + 2 + nnames * 4;		/*  Two word header plus a four word entry pointing to each name. */
	call putout_$putwrd (ispc, 1, i66, 0);		/*  Version number of structure. */
	call putout_$putwrd (ispc, nnames, i66, 0);

	temp = include_name_list_base;
	do while (temp ^= null ());
/*****************************************************************************/
	/* The first source_ptr in this chain is apparently a ptr to the
	   source program segment. Thus, to avoid bugs 5126,6042, we bypass
             the termination step for it so that the source is not prematurely
             terminated. */
/****************************************************************************/
	     if temp ^= include_name_list_base
		then call hcs_$terminate_noname (temp-> source_info.source_pointer, code);
						/* Terminate file and ignore error code. */
		call putout_$putwrd (ispc, (temp -> source_info.source_map_offset + map_base) * twop18 + temp -> source_info.source_map_length, i66, 0);
		call putout_$putblk (ispc, addr (temp -> source_info.uid), i66, 1, null ());
		call putout_$putblk (ispc, addr (temp -> source_info.dtm), i66, 2, null ());
		temp = temp -> source_info.names_list_pointer;
		end;

	temp = include_name_list_base;
	do while (temp ^= null ());
		acc_temp.count = bit (fixed (min (temp -> source_info.source_map_length, 680), 9));
		acc_temp.string = temp -> source_info.pathname;
		call prnam_$prnam_ (addr (acc_temp));
		call putout_$putblk (ispc, addr (temp -> source_info.pathname), i66, divide (temp -> source_info.source_map_length + 3, 4, 26, 0), null ());
		temp = temp -> source_info.names_list_pointer;
		end;

	end;
