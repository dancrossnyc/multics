" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1988                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
"     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
"     Modified to allow for joining information to the definition section.
"                                                      END HISTORY COMMENTS


name                          object_
"Original programmer:         Nate Adleman???
"Language:                    alm
"Translated by                Richard H. Gumpertz
"Last modified on 11/12/72    by R. F. Mabee
"                             11 Nov 1972 by R. F. Mabee to fix short return
"                             26 Sept 1970 by RHG to add name pseudo-op
"                             17 Sept 1970 at 0115 by RHG for new listing package
"                             11 August 1970 at 0543 by RHG--total rewrite for new scratch segment layout
"
%include segnfo
"
"The text data words are written directly into the object segment.
"The remaining data and relocation information is written into the scratch segment.

"The scratch segment is accessed by the use of two pl1 type overlays.
"Note that text_overlay fits into the padding of link_and_sym_overlay.



"First the overlay used in writing the text relocation bits:
"          dcl 1 text_overlay based ( addrel (eb_data_$segnfo.scrtch, 2*pc) ),
"              2 pad bit (9),
"              2 text_left_reloc bit (9),
"              2 pad bit (9),
"              2 text_right,reloc bit (9);

"Now the overlay used in writing the link and symbol data words and relocation bits:
"          dcl 1 link_and_sym_overlay based( addrel (eb_data_$segnofo.scrtch, 8*pc) ),
"              2 link_left_reloc bit(9),
"              2 pad bit(9),
"              2 link_right_reloc bit(9),
"              2 pad bit(9),
"              2 link_data_word bit(36),
"              2 sym_left_reloc bit(9),
"              2 pad bit (9),
"              2 sym_right_reloc bit(9)
"              2 pad bit(9)
"              2 sym_data_word bit(36),
"              2 def_left_reloc bit(9),
"              2 pad bit (9),
"              2 def_right_reloc bit(9),
"              2 pad bit(9),
"              2 def_data_word bit(36);
"
"The following entries write the object words into various segments.
"Calls are of the format:
"         call obj___(pc,word)
"         where word is the word to be written.




"The following entry writes the text object words:
          entry      object_
object_:
          lda        ap|2,*     get the program counter
          ldq        segnfo+text,*al     look at the current object word
          tnz        <prnter_>|[phsmsg]  if non-zero, we probably have a phase error in the object segment
          ldq        ap|4,*     get word to be written
          stq        segnfo+text,*al   write it
exit:
          short_return




"The following entry writes the link object words:
          entry     objlk
objlk:
          lda       ap|2,*     get the pc
          als       3          multiply it by 8
objwri:   eppbp     segnfo+scrtch,*al    do the addrel in the structure link_and_sym_overlay
          ldq       bp|1       look at current object word
          tnz       <prnter_>|[phsmsg]   if non-zero, we probably have a phase error
          ldq       ap|4,*     get the word to be written
          stq       bp|1       write it
          tra       exit-*,ic and return




"The following entry writes the symbol table object words:
          entry     objst
objst:
          lda       ap|2,*  get the pc
          als       3         multiply by 8
          ada       =2,dl     add offset to indicate symbol data word
          tra       objwri-*,ic         and join objik to write

"The following entry writes the definition object words:
          entry     objdf
objdf:
          lda       ap|2,*  get the pc
          als       3         multiply by 8
          ada       =4,dl     add offset to indicate definition data word
          tra       objwri-*,ic         and join objik to write
"
"The following entries read a word from the linkage or symbol table object segments.
"Calls are of the format:
"           call geto__(pc,word)
"           where word is the variable in which the value is to be returned.




"The following entry reads a word from the linkage object segment
          entry     getolk
getolk:
          lda       ap|2,*   get the pc
          als       3        multiply it by 8
objrea:   eppbp     segnfo+scrtch,*al   do the addrel in the structure link_and_sym_overlay
          ldq       bp|1     get the object word
          stq       ap|4,*   return it into the second argument
          tra       exit-*,ic and return




"The following entry reads a word from the symbol table object segment:
          entry     getost
getost:
          lda       ap|2,*      get the pc
          als       3           multiply it by 8
          ada       =2,dl       add offset to indicate symbol data word
          tra       objrea-*,ic            continue as above

"The following entry reads a word from the definition object segment:
          entry     getodf
getodf:
          lda       ap|2,*      get the pc
          als       3           multiply it by 8
          ada       =4,dl       add offset to indicate definition data word
          tra       objrea-*,ic            continue as above
"
"The following entries write the relocation bits to the text, linkage, or symbol relocation words
"Calls are of the format:
"         call wrb_(pc,relwrd)
"         where relwrd contains lbits in its left half and rbits in its right half.




"The following entry writes the text relocation information.
          entry     wrbtx
wrbtx:
          lda       ap|2,*    get the pc
          als       1         multiply it by 2
          eppbp     segnfo+scrtch,*al   do the addrel in the structure text_overlay
          ldq       ap|4,*    get the word to be written
          stbq      bp|0,ic*  actually 24 modifier -- store the bits in the two subfields
          tra       exit-*,ic and return




"The following entry writes the linkage relocation information.
          entry     wrblk
wrblk:
          lda       ap|2,*    get the pc
          als       3	multiply by 8
relwri:   eppbp     segnfo+scrtch,*al   do the addrel in the structure link_and_sym_overlay
          ldq       ap|4,*    get the word to be written
          qls       9         position it
          stbq      bp|0,ci   actually 50 modifier -- store the bits in the two subfields
          tra       exit-*,ic and return




"The following entry writes the symbol relocation information.
          entry     wrbst
wrbst:
          lda       ap|2,*     get the pc
          als       3	multiply by 8
          ada       =2,dl      add offset to indicate symbol bits
          tra       relwri-*,ic          join wrblk to write

"The following entry writes the definition relocation information.
          entry     wrbdf
wrbdf:
          lda       ap|2,*     get the pc
          als       3	multiply by 8
          ada       =4,dl      add offset to indicate definition bits
          tra       relwri-*,ic          join wrblk to write
"
"The following entries read the relocation bits for the text, linkage, or symbol table.
"Calls are of the format:
"         call getb__(pc,lbits,rbits)




"The following entry gets the text relocation bits:
          entry     getbtx
getbtx:
          lda       ap|2,*    get the pc
          als       1         multiply by 2
          lda       segnfo+scrtch,*al get the word we want
          lrl       18        position the bit fields
relrea1:  qrl       18        "                 "
          anaq      mask      mask out the unwanted bits
          sta       ap|4,*    return left_bits
          stq       ap|6,*    return right_bits
          tra       exit-*,ic and return




"The following entry gets the link relocation bits:
          entry     gtblk
gtblk:
          lda       ap|2,*    get the pc
          als       3         multiply it by 8
relrea2:  lda       segnfo+scrtch,*al   get the word we want
          lrl       27        position the bit fields
          tra       relrea1-*,ic       and join getbtx to get the bits





"The following entry gets the symbol relocation bits.
          entry     getbst
getbst:
          lda       ap|2,*     get the pc
          als       3	multiply by 8
          ada       =2,dl      add offset to indicate symbol bits
          tra       relrea2-*,ic         and join gtblk to get the bits


"The following entry gets the definition relocation bits.
          entry     getbdf
getbdf:
          lda       ap|2,*     get the pc
          als       3	multiply by 8
          ada       =4,dl      add offset to indicate definition bits
          tra       relrea2-*,ic         and join gtblk to get the bits



          even                force us to an even boundary for the anaq
mask:     oct       777,777   this is the mask for recovering the relocation bits
"
	end
