/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-08-02,JRGray), approve(88-08-05,MCR7952),
     audit(88-09-30,WAAnderson), install(88-10-17,MR12.2-1169):
     These routines remember and emit structures necessary for symbol table
     support.
                                                   END HISTORY COMMENTS */

/*	These procedures are used to build up information in the symbol
	section of object segments. */
alm_symtab_:	proc;
dcl	program_name char(11) static options(constant) init("alm_symtab_");
dcl	(name, string, type) char(*) parameter;
dcl	sc_dtcm fixed bin(71) parameter;
dcl	sc_uid bit(36) aligned parameter;
dcl	(st_length, st_line, st_loc, st_num, st_offset) fixed bin(35) parameter;
dcl	(admod, b29, basno, iaddr, offset, pc, value, word_count) fixed bin(26) parameter;

dcl	(addr, before, bit, divide, fixed, hbound, index, length, max, mod, null, rtrim, size, substr, verify) builtin;

dcl	alm_source_map_$count_map_words entry(fixed bin(26));
dcl	alm_source_map_$put_out_map entry(fixed bin(26));
dcl	getbit_ entry(fixed bin(26), fixed bin(26), fixed bin(26), fixed bin(26));
dcl	get_temp_segments_ entry(char(*), (*) ptr, fixed bin(35));
dcl	ioa_ entry options(variable);
dcl	putout_$putblk entry(fixed bin(26), ptr, fixed bin(26), fixed bin(26), ptr);
dcl	putout_$putwrd entry(fixed bin(26), fixed bin(26), fixed bin(26), fixed bin(26));
dcl	release_temp_segments_ entry(char(*), (*) ptr, fixed bin(35));

dcl	(source_data_ptr, symbol_data_ptr) ptr static;
dcl	temp_ptrs(3) ptr init((3) null()) static;

dcl	(context, current_block, current_source, current_statement, first_token, forward) fixed bin static;
dcl	(max_allocated, max_block, max_source) fixed bin static;
dcl	sc_string_len fixed bin(21) static;
dcl	source_stack(1:255) fixed bin static;
dcl	stack_level fixed bin static;
dcl	(start_pl1_sb, start_sc, start_sc_strings, start_statement, start_symbol) fixed bin static;

dcl	ec fixed bin(35);
dcl	i fixed bin(21);
dcl	s fixed bin;

dcl	eb_data_$lavptr external ptr;
dcl	1 glpl_words(0:261119) based(eb_data_$lavptr),
	  2 (left, right) fixed bin(18) unsigned unaligned;

dcl	word(261120) fixed bin(26) based;

dcl	symbol_data(261120) fixed bin(35) based(symbol_data_ptr);
dcl	1 source_data based(source_data_ptr),
	  2 sc_map(0:255),
	    3 pathname unaligned,
	      4 (offset, size) fixed bin(18) unsigned unaligned,
	    3 uid bit(36) aligned,
	    3 dtm fixed bin(71),
	  2 sc_strings char(256 * 256),
	  2 st_map(121000),
	    3 location fixed bin(18) unsigned unaligned,
	    3 source_id unaligned,
	      4 file fixed bin(8) unsigned unaligned,
	      4 line fixed bin(14) unsigned unaligned,
	      4 statement fixed bin(5) unsigned unaligned,
	    3 source_info unaligned,
	      4 start fixed bin(18) unsigned unaligned,
	      4 length fixed bin(9) unsigned unaligned;

dcl	(CHAR init(21), DOUBLE init(4), ENUMTYPE init(55), ENUMVALUE init(56),
	 FLOAT init(3), FUNCTION init(26), INT init(1), LONG init(2), PTR init(13),
	 STRUCTURE init(17), TYPEREF init(54), UINT init(33), ULONG init(34), UNION init(57))
	     fixed bin int static options(constant);

initialize:	entry;	/* initializes static variables and creates tempsegs */
	/* first temp-segment is for source and statement info.
	   second tempseg is for runtime_symbol info: symbols, tokens, blocks.
	   third segment is for relocation info associated with symbol info. */
	call get_temp_segments_(program_name, temp_ptrs, ec);
	source_data_ptr = temp_ptrs(1);
	symbol_data_ptr = temp_ptrs(2);
	context = 0;
	current_block = 0;
	current_source = 0;
	current_statement = 0;
	first_token = 0;
	forward = 0;	/* no forward references */
	max_allocated = 0;
	max_block = 0;
	max_source = -1;	/* source zero is the first source */
	sc_string_len = 0;
	stack_level = 0;
	return;

block:	entry(string);	/* creates runtime_block & stores it in tree */
	if context ^= 0 then call error("New block encountered while in symbol context.");
	context = 0;
	call open_block(string, current_block);
	return;

end_block:	entry;	/* closes out current runtime_block */
	if context ^= 0 then call error("end_block encountered while in symbol context.");
	if current_block = 0 then call error("Mismatched end_block.");
	else call close_block(current_block);
	return;

enum:	entry(string);	/* Starts definition of enumeration type */
	call open_context(string, ENUMTYPE, context);
	return;

end_enum:	entry;	/* closes out enumeration definitions */
	if context = 0 then call error("end_enum encountered while not in symbol context.");
	else call close_context(context);
	return;

source:	entry(string, sc_uid, sc_dtcm);	/* start source program: path, uid & dtcm */

	max_source = max_source + 1;
	current_source = max_source;
	stack_level = stack_level + 1;
	source_stack(stack_level) = current_source;

	sc_map(current_source).offset = divide(sc_string_len, 4, 17, 0);
	i = length(rtrim(string));
	sc_map(current_source).size = i;
	sc_map(current_source).uid = sc_uid;
	sc_map(current_source).dtm = sc_dtcm;

	i = i + mod(4000 - i, 4);	/* pad length to fill last word */
	substr(sc_strings, sc_string_len+1, i) = string;	/* store path in list containing all paths */
	sc_string_len = sc_string_len + i;
	return;

end_source:	entry;	/* end of source program */
	if stack_level = 0 then call error("'end_source' encountered with no source active.");
	else do;
	     stack_level = stack_level - 1;
	     current_source = source_stack(stack_level);
	  end;
	return;

	/* source line info associated with alm location */
statement:	entry(st_loc, st_offset, st_length, st_line, st_num);
	current_statement = current_statement + 1;
	st_map(current_statement).location = st_loc;
	st_map(current_statement).source_info.start = st_offset;
	st_map(current_statement).source_info.length = st_length;
	st_map(current_statement).source_id.line = st_line;
	st_map(current_statement).source_id.file = current_source;
	st_map(current_statement).source_id.statement = st_num;
	return;

structure:	entry(string);	/* starts definition of structure */
	call open_context(string, STRUCTURE, context);
	return;

end_structure:	entry;	/* closes of structure definition */
	if context = 0 then call error("end_structure encountered while not in symbol context.");
	else call close_context(context);
	return;

	/* defines information about a runtime symbol */
symbol:	entry(name, type, basno, value, admod, b29, iaddr, offset);
	call define_symbol(name, type, basno, value, admod, b29, iaddr, offset, s);
	return;

union:	entry(string);	/* Starts definition of union type */
	call open_context(string, UNION, context);
	return;

end_union:	entry;	/* closes definition of union */
	if context = 0 then call error("end_union encountered while not in symbol context.");
	else call close_context(context);
	return;

count_words:	entry(word_count);	/* returns length of symbol_table info */
	if max_source < 0 then do;	/* only info is map of alm sources */
	     call alm_source_map_$count_map_words(word_count);
	     return;
	  end;

	start_sc = new_sthedr_$hdrlen;
	start_sc_strings = start_sc + 2 + (max_source+1) * 4;
	start_pl1_sb = start_sc_strings + divide(sc_string_len + 3, 4, 17, 0);
	if max_allocated = 0 & current_statement = 0 then do;
	     start_symbol = 0;
	     start_statement = 0;
	     word_count = start_pl1_sb - new_sthedr_$hdrlen;
	  end;
	else do;
	     if context ^= 0 then call error("Missing end_(enum structure union) statement.");
	     if current_block ^= 0 then call error("Missing end_block.");
	     new_sthedr_$source_and_area.area_offset = bit(fixed(start_pl1_sb, 18), 18);
	     start_symbol = start_pl1_sb + size(pl1_symbol_block) + divide(length(rtrim(sthedr_$seg_name))+3, 4, 17, 0);
	     start_statement = start_symbol + max_allocated;
	     word_count = start_statement + (current_statement+1)*2 - new_sthedr_$hdrlen;
	  end;
	return;

emit:	entry(pc);	/* emits symbol_table info & releases storage */
	if max_source < 0 then call alm_source_map_$put_out_map(pc);
	else call emit_symtab;

cleanup:	entry;		/* release storage */
	if temp_ptrs(1) ^= null() then call release_temp_segments_(program_name, temp_ptrs, ec);
	return;
/* ===================== Internal Procedures =================== */

/* This procedure prints out an error message and sets the S error Flag */
error:	proc(string);
dcl	string char(*);

	prnts = 1;	/* set flag for S (symbol) error */
	call ioa_("Symbol Table Error: ^a", string);
end error;

/* This procedure allocates a block in the symbol_data tempseg */
allocate_storage:	proc(size, offset);
dcl	(size, offset) fixed bin parameter;

	if max_allocated + size > hbound(symbol_data, 1) then do;
	     call error("Symbol Table Overflow.");
	     max_allocated = 0;
	  end;
	offset = max_allocated + 1;
	max_allocated = max_allocated + size;
end allocate_storage;

/* This procedure returns the offset of a specified runtime token. It will
   create the token if one doesn't already exist. */
get_token:       proc(name, offset);
dcl	name char(*) parameter;
dcl	offset fixed bin(17) parameter;
dcl	(t, last_t) fixed bin;
dcl	t_ptr ptr;
dcl	l fixed bin;

	offset = 0;
	l = length(name);
	if l = 0 then return;

	/* to optimize set token list and search via it */
	last_t = 0;
	t = first_token;
	do while(t > 0 );
	     t_ptr = addr(symbol_data(t));
	     if t_ptr -> runtime_token.size > l then goto create_token;
	     else if t_ptr -> runtime_token.size = l then 
	       if t_ptr -> runtime_token.string > name then goto create_token;
	       else if t_ptr -> runtime_token.string = name then do;	/* found it */
		offset = t;
		return;
	       end;
	     last_t = t;
	     if t_ptr -> runtime_token.next = 0 then t = 0;
	     else t = t_ptr -> runtime_token.next + t;
	  end;
create_token:
	call allocate_storage(divide(l+4, 4, 17, 0) + 1, t); /* new token */
	t_ptr = addr(symbol_data(t));
	t_ptr -> runtime_token.size = l;
	t_ptr -> runtime_token.string = name;
	if last_t = 0 then do;
	     if first_token ^= 0 then t_ptr -> runtime_token.next = first_token - t;
	     first_token = t;
	  end;
	else do;
	     if addr(symbol_data(last_t)) -> runtime_token.next ^= 0 then
		t_ptr -> runtime_token.next = addr(symbol_data(last_t)) -> runtime_token.next + last_t - t;
	     addr(symbol_data(last_t)) -> runtime_token.next = t - last_t;
	  end;
	offset = t;
end get_token;

/* This procedure creates a runtime_block. It will create a runtime_token 
   if necessary and insert the block into the runtime_block tree.
   Note: runtime_blocks are linked into a circular list whose parent
   points to the last runtime_block. This form is converted into a standard
   linked list by the close_block routine */
open_block:	proc(name, block);
dcl	name char(*);
dcl	(block, b, bot, t) fixed bin;
dcl	b_ptr ptr;

	if max_allocated>1 & current_block=0 then call error("Multiple blocks declared at the global level.");
	call allocate_storage(size(runtime_block) - 1, b);	/* -1 because no owner field */
	b_ptr = addr(symbol_data(b));
	if name = "" then do;
	     max_block = max_block + 1;
	     b_ptr -> runtime_block.number = max_block;
	     if block = 0 then b_ptr -> runtime_block.type = 4;
	     else do;	/* quick block */
		b_ptr -> runtime_block.type = 3;
		call allocate_storage(1, 0);	/* room for owner */
		b_ptr -> runtime_block.owner_flag = "1"b;
		b_ptr -> runtime_block.quick = "1"b;
		if addr(symbol_data(block)) -> runtime_block.owner_flag then
		     b_ptr -> runtime_block.owner = addr(symbol_data(block)) -> runtime_block.owner + block - b;
		else b_ptr -> runtime_block.owner = block - b;
	       end;
	  end;
	else do;
	     call get_token(name, t);
	     b_ptr -> runtime_block.name = t-b+1; /* points to runtime_token.name */
	     b_ptr -> runtime_block.type = 1;
	  end;
	b_ptr -> runtime_block.flag = "1"b;
	b_ptr -> runtime_block.standard = "1"b;
	b_ptr -> runtime_block.first = current_statement;	/* adjust later for start of statement map */
	if current_block = 0 then b_ptr -> runtime_block.father = 0;
	else do;
	     b_ptr -> runtime_block.father = current_block - b;
	     bot = addr(symbol_data(current_block)) -> runtime_block.son;
	     if bot ^= 0 then do;
		bot = bot + current_block;
		b_ptr -> runtime_block.brother = addr(symbol_data(bot)) -> runtime_block.brother + bot - b;
		addr(symbol_data(bot)) -> runtime_block.brother = b - bot;
	       end;
	     addr(symbol_data(current_block)) -> runtime_block.son = b - current_block;
	  end;
	block = b;
end open_block;

/* This routine finishes a runtime block by converting its children from a
   circular list into a regular list and then pops out to the parent block */
close_block:	proc(block);
dcl	(block, bot) fixed bin;
dcl	b_ptr ptr;

	if block = 0 then return;
	b_ptr = addr(symbol_data(block));
	b_ptr -> runtime_block.last = current_statement;
	bot = b_ptr -> runtime_block.son;
	if bot ^= 0 then do;	/* convert list from circular to bounded */
	     bot = bot + block;
	     b_ptr -> runtime_block.son = addr(symbol_data(bot)) -> runtime_block.brother + bot - block;
	     addr(symbol_data(bot)) -> runtime_block.brother = 0;
	  end;

	if b_ptr -> runtime_block.father = 0 then block = 0;
	else block = b_ptr -> runtime_block.father + block;
end close_block;

/* This procedure opens a context. It creates a symbol node for the
   context, links it into the current context and updates the context. */
open_context:	proc(name, type, context);
dcl	name char(*);
dcl	(type, context, s) fixed bin;

	call create_symbol(name, s);
	if s = 0 then return;         /* abort */
	addr(symbol_data(s)) -> runtime_symbol.type = type;
	if addr(symbol_data(s)) -> runtime_symbol.level = 0 then
	     addr(symbol_data(s)) -> runtime_symbol.level = 1;
	if context = 0 then call thread_symbol_into_block(s, current_block);
	else call add_symbol_in_context(s, context);
	context = s;
end open_context;

/* This procedure ends a context. It converts a end pointed circular
   linked list into a start pointed bounded linked list */
close_context:	proc(context);
dcl	(bot, context, top) fixed bin;

	bot = addr(symbol_data(context)) -> runtime_symbol.son;
	if bot ^= 0 then do;	/* list is not empty */
	     bot = bot + context;
	     top = addr(symbol_data(bot)) -> runtime_symbol.brother + bot;
	     addr(symbol_data(bot)) -> runtime_symbol.brother = 0;
	     addr(symbol_data(context)) -> runtime_symbol.son = top - context;
	  end;
	context = addr(symbol_data(context)) -> runtime_symbol.father + context;	/* leave context */
	if context = current_block then context = 0;
end close_context;

/* This procedure creates a runtime_symbol, creating/accessing a runtime_token as necessary */
create_symbol:	proc(name, s);
dcl	name char(*) parameter;
dcl	s fixed bin parameter;
dcl	(dcladdr, t) fixed bin;
dcl	s_ptr ptr;

	if name = "" then do;
	     call allocate_storage(5, s);
	     s_ptr = addr(symbol_data(s));
	  end;
	else do;
	     call get_token(name, t);
	     call allocate_storage(5, s);
	     s_ptr = addr(symbol_data(s));
	     s_ptr -> runtime_symbol.name = t - s + 1;
	     dcladdr = addr(symbol_data(t)) -> runtime_token.dcl;
	     if dcladdr ^= 0 then s_ptr -> runtime_symbol.next = dcladdr + t - s;
	     addr(symbol_data(t)) -> runtime_token.dcl = s - t;
	  end;
	s_ptr -> runtime_symbol.flag = "1"b;
	s_ptr -> runtime_symbol.aligned = "1"b;
	s_ptr -> runtime_symbol.simple = "1"b;
end create_symbol;

/* This procedure searchs for the runtime_symbol node associated with a name */
find_symbol:	proc(name, context, in_symbol_context) returns(fixed bin);
dcl	name char(*) parameter;
dcl	context fixed bin;
dcl	in_symbol_context bit(1);
dcl	(b, c, first, o, s, t) fixed bin;

	o = context;
	if in_symbol_context then do;	/* check in symbol contexts (containing structs, unions, enums) */
	     c = 0;
	     do while(o ^= 0);	/* end of list when zero offset */
		c = c + o;
		s = c;
		o = addr(symbol_data(c)) -> runtime_symbol.son;
		first = s + o;		/* remember for test for end of circular list */
		do while(o ^= 0 );	/* find name in symbol table */
		     s = s + o;
		     t = addr(symbol_data(s)) -> runtime_symbol.name;
		     o = addr(symbol_data(s)) -> runtime_symbol.brother;
		     if s+o = first then o = 0;	/* end of circular list */
		     if t ^= 0 then
		       if addr(symbol_data(s+t-1)) -> runtime_token.string = name then return(s);
		  end;
		o = addr(symbol_data(c)) -> runtime_symbol.father;
		if c+o = current_block then o = 0;	/* not found */
		if addr(symbol_data(c)) -> runtime_symbol.level > 1 then o = 0;
	       end;
	     o = c + addr(symbol_data(c)) -> runtime_symbol.father;	/* containing block */
	  end;

	b = 0;	/* OK now look in the runtime_blocks */
	do while(o ^= 0);
	     b = b + o;
	     s = b;
	     o = addr(symbol_data(b)) -> runtime_block.start;
	     do while(o ^= 0 );	/* find name in symbol table */
		s = s + o;
		t = addr(symbol_data(s)) -> runtime_symbol.name;
		o = addr(symbol_data(s)) -> runtime_symbol.brother;
		if t ^= 0 then
		  if addr(symbol_data(s+t-1)) -> runtime_token.string = name then return(s);
	       end;
	     o = addr(symbol_data(b)) -> runtime_block.father;
	  end;
	return(0);	/* no runtime_symbol with specified name */
end find_symbol;

/* This procedure returns the storage requirement associated with one element of a runtime_symbol */
symbol_element_size:	proc(s) returns(fixed bin);
dcl	(first, i, m, o, s, sz, t) fixed bin;

	if s = 0 then return(0);
	t = addr(symbol_data(s)) -> runtime_symbol.type;
	sz = addr(symbol_data(s)) -> runtime_symbol.size;
	if t = INT | t = LONG then return(sz + 1);
	if t = FLOAT| t = DOUBLE then return(sz + 9);
	if t = PTR then return(72);
	if t = UINT | t = ULONG then return(sz);
	if t = CHAR then return(sz * 9);
	if t = ENUMTYPE | t = ENUMVALUE then return(sz + 1);
	if t = STRUCTURE then do;	/* size of structure = last element: offset + size */
	     o = addr(symbol_data(s)) -> runtime_symbol.son;
	     i = s;
	     if o = 0 then return(0);	/* empty structure */
	     if ^addr(symbol_data(s+o)) -> runtime_symbol.simple &
	        addr(symbol_data(s+o)) -> runtime_symbol.offset ^= 0
	       then i = s+o;	/* attempt to take size of open structure */
	     else do while(o ^= 0);
		i = i + o;
		o = addr(symbol_data(i)) -> runtime_symbol.brother;
	       end;

	     m = addr(symbol_data(i)) -> runtime_symbol.offset;
	     if addr(symbol_data(i)) -> runtime_symbol.type ^= UNION &	/* here? must be typedefs */
	       addr(symbol_data(i)) -> runtime_symbol.type ^= STRUCTURE then m = m + symbol_size(i);
	     return(72 * divide(m+71, 72, 17, 0));
	  end;
	if t = UNION then do;
	     m = 0;
	     i = s;
	     o = addr(symbol_data(i)) -> runtime_symbol.son;
	     /* it is an error to try to figure out size of something that
	     is not fully defined, but just in case prevent infinite loops */
	     first = i + o;		/* used for circular list end test */
	     do while(o ^= 0);
		i = i + o;
		o = addr(symbol_data(i)) -> runtime_symbol.brother;
		if i + o = first then o = 0;	/* prevent infinite loops when scanning circular lists */
		if addr(symbol_data(i)) -> runtime_symbol.type ^= UNION &
		   addr(symbol_data(i)) -> runtime_symbol.type ^= STRUCTURE
		     then m = max(m, symbol_size(i));	/* unions & structure here are really typedefs */
	       end;
	     return(72 * divide(m+71, 72, 17, 0));
	  end;
	if t = TYPEREF then
	     if addr(symbol_data(s)) -> runtime_symbol.son = 0 then return(0);
	     else return(symbol_size(s + addr(symbol_data(s)) -> runtime_symbol.son));
	return(0);
end symbol_element_size;

/* This procedure returns the storage requirement associated with a runtime_symbol */
symbol_size:	proc(s) returns(fixed bin);
dcl	(i, s, sz) fixed bin;
dcl	s_ptr ptr;

	sz = symbol_element_size(s);
	if sz = 0 then return(0);
	s_ptr = addr(symbol_data(s));
	do i = 1 to s_ptr -> runtime_symbol.ndims;
	     sz = sz * (s_ptr -> runtime_symbol.bounds(i).upper - s_ptr -> runtime_symbol.bounds(i).lower + 1);
	  end;
	return(sz);
end symbol_size;

/* This procedure fill out the multiplier field of array runtime_symbols */
compute_array_data:	proc(s);
dcl	(i, s, sz) fixed bin;
dcl	s_ptr ptr;

	s_ptr = addr(symbol_data(s));
	if s_ptr -> runtime_symbol.ndims <= 0 then return;
	sz = symbol_element_size(s);
	if sz = 0 then return;
	s_ptr -> runtime_symbol.array_units = 1;	/* bit units */
	do i = s_ptr -> runtime_symbol.ndims to 1 by -1;
	     s_ptr -> runtime_symbol.bounds(i).multiplier = sz;
	     sz = sz * (s_ptr -> runtime_symbol.bounds(i).upper - s_ptr -> runtime_symbol.bounds(i).lower + 1);
	  end;
end compute_array_data;

/* This procedure links a runtime_symbol as the last son of the runtime_symbol 'context' */
add_symbol_in_context:	proc(s, c);
dcl	(bot, c, offset, s, t) fixed bin;
dcl	(b_ptr, c_ptr, s_ptr) ptr;

	if c = 0 then return;	/* no papa? no can do... */
	s_ptr = addr(symbol_data(s));
	c_ptr = addr(symbol_data(c));
	s_ptr -> runtime_symbol.level = c_ptr -> runtime_symbol.level + 1;
	s_ptr -> runtime_symbol.father = c-s;
	bot = c_ptr -> runtime_symbol.son;
	if bot ^= 0 then do;
	     bot = bot + c;
	     b_ptr = addr(symbol_data(bot));
	     s_ptr -> runtime_symbol.brother = b_ptr -> runtime_symbol.brother + bot - s;
	     b_ptr -> runtime_symbol.brother = s - bot;

	     if c_ptr -> runtime_symbol.type = STRUCTURE then do; /* fill in offset */
		if s_ptr -> runtime_symbol.simple then do;
		     call allocate_storage(2, 0);
		     s_ptr -> runtime_symbol.simple = "0"b;
		  end;

		if b_ptr -> runtime_symbol.simple then offset = 0;
		else offset = b_ptr -> runtime_symbol.offset;
		if b_ptr -> runtime_symbol.type ^= STRUCTURE &	/* in this context must be typedef */
		   b_ptr -> runtime_symbol.type ^= UNION then offset = offset + symbol_size(bot);
		if s_ptr -> runtime_symbol.aligned then do;	/* align the data */
		     t = s_ptr -> runtime_symbol.type;
		     if t = LONG | t = DOUBLE | t = PTR | t = STRUCTURE then offset = 72 * divide(offset + 71, 72, 17, 0);
		     else if t = CHAR then offset = 9 * divide(offset + 8, 9, 17, 0);
		     else offset = 36 * divide(offset + 35, 36, 17, 0);
		  end;

		s_ptr -> runtime_symbol.offset = offset;
		s_ptr -> runtime_symbol.units = 1;
	       end;
	  end;
	c_ptr -> runtime_symbol.son = s - c;
end add_symbol_in_context;

/* This procedure takes a runtime_symbol node and inserts it into the
   linked list of runtime_symbols in a specified block */
thread_symbol_into_block:	proc(s, b);
dcl	(b, ct, ctl, i, j, last_s, slot, s, t, tl) fixed bin;
dcl	(b_ptr, s_ptr, t_ptr) ptr;

	if b = 0 then do;
	     call error("Attempt to link symbol when not in a runtime_block.");
	     return;
	  end;

	s_ptr = addr(symbol_data(s));
	b_ptr = addr(symbol_data(b));
	s_ptr -> runtime_symbol.father = b-s;

	last_s = 0;	/* symbol that should precede new symbol */
	t = s_ptr -> runtime_symbol.name;
	if t ^= 0 then do;	/* find list location by finding last_s */
	     t = t + s - 1;
	     t_ptr = addr(symbol_data(t));
	     tl = t_ptr -> runtime_token.size;
	     j = b_ptr -> runtime_block.start;
	     if j ^= 0 then if ^ordered_symbols(s, b+j) then last_s = b+j;

	     i = 2;	/* check symbol chain first, setting chain if necessary */
	     do slot = 1 to 4 while(tl >= i);
		i = i + i;	/* min length of current slot */
		j = b_ptr -> runtime_block.chain(slot);
		if j = 0 then b_ptr -> runtime_block.chain(slot) = s-b;
		else do;	/* compare with symbol */
		     ct = addr(symbol_data(j+b)) -> runtime_symbol.name+j+b - 1;
		     ctl = addr(symbol_data(ct)) -> runtime_token.size;
		     if ctl > tl then b_ptr -> runtime_block.chain(slot) = s-b;
		     else if ctl < tl then last_s = j+b;
		     else if addr(symbol_data(ct)) -> runtime_token.string >
			t_ptr -> runtime_token.string then b_ptr -> runtime_block.chain(slot) = s-b;
		     else last_s = j+b;
		  end;
	       end;

	     j = last_s;	/* search through rest of list finding preceding symbol */
	     last_s = 0;
	     do while(j ^= 0);
		if ordered_symbols(last_s + j, s) then do;
		     last_s = last_s + j;
		     j = addr(symbol_data(last_s)) -> runtime_symbol.brother;
		  end;
		else j = 0;
	       end;
	  end;

	if last_s = 0 then do;	/* put at beginning of list */
	     if b_ptr -> runtime_block.start ^= 0 then
		s_ptr -> runtime_symbol.brother = b + b_ptr -> runtime_block.start - s;
	     b_ptr -> runtime_block.start = s-b;
	  end;
	else do;	/* insert in list */
	     if addr(symbol_data(last_s)) -> runtime_symbol.brother ^= 0 then
		s_ptr -> runtime_symbol.brother = last_s + addr(symbol_data(last_s)) -> runtime_symbol.brother - s;
	     addr(symbol_data(last_s)) -> runtime_symbol.brother = s - last_s;
	  end;
end thread_symbol_into_block;

ordered_symbols:	proc(s1, s2) returns(bit(1));	/* returns true if s1 should be ordered before s2 */
dcl	(s1, s2, t1, t2, t1l, t2l) fixed bin;

	t1 = addr(symbol_data(s1)) -> runtime_symbol.name;
	if t1 = 0 then return("1"b);
	t2 = addr(symbol_data(s2)) -> runtime_symbol.name;
	if t2 = 0 then return("0"b);
	t1 = s1 + t1 - 1;
	t2 = s2 + t2 - 1;
	t1l = addr(symbol_data(t1)) -> runtime_token.size;
	t2l = addr(symbol_data(t2)) -> runtime_token.size;
	if t1l < t2l then return("1"b);
	if t1l > t2l then return("0"b);
	return( addr(symbol_data(t1)) -> runtime_token.string <= addr(symbol_data(t2)) -> runtime_token.string);
end ordered_symbols;

define_symbol:    proc(name, type, basno, value, admod, b29, iaddr, offset, top);
dcl	(name, type) char(*) parameter;
dcl	(admod, b29, basno, iaddr, offset, value) fixed bin(26) parameter;
dcl	reloc fixed bin(26);
dcl	(i, key, s, top) fixed bin;
dcl	s_ptr ptr;
dcl	remainder char(80);
dcl	token char(80) varying;

dcl	valid_chars(0:15) char(80) varying int static options(constant)
	  init(("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"),
	     "", ")", "0123456789", (2)("0123456789]"), (10)("0123456789"));
dcl	01 type_name_info int static options(constant),
	  02 blank char(1) init(" "),
	  02 names(10) char(16) init(".int .short", ".uint .ushort",
		".long", ".ulong", ".char", ".uchar", ".float", ".double",
		".label", ".enum");
dcl	type_names char(10*16+1) based(addr(type_name_info));
dcl	01 type_info(10) internal static options(constant),
	  02 type fixed bin init(1, 33, 2, 34, 21, 21, 3, 4, 24, 56),
	  02 default_size fixed bin init(35, 36, 71, 72, 1, 1, 27, 63, 0, 35);

	call create_symbol(name, s);
	if s = 0 then return;	/* couldn't allocate: abort */
	top = s;	/* return top of type chain */
	s_ptr = addr(symbol_data(s));

	/* set location information remembering relocation info */
	reloc = 0;	/* absolute relocation */
	if iaddr = 0 then s_ptr -> runtime_symbol.location = value;
	else do;	/* address is relative to location counter */
	     s_ptr -> runtime_symbol.location = value + glpl_words(iaddr+3).left;
	     call getbit_(iaddr, basno, 0 /* b29 = 0 always use 18 bit relocation */, reloc);
	     temp_ptrs(3) -> glpl_words(s+2).left = reloc;	/* relocation info */
	  end;

	/* relocation info maps directly to some classes of storage */
	if reloc = itext then s_ptr -> runtime_symbol.class = 12;
	else if reloc = ilink then s_ptr -> runtime_symbol.class = 5;
	else if reloc = isymbl then s_ptr -> runtime_symbol.class = 11;
	else do;	/* figure it out the hard way */
	     if admod = 16 then	/* indirect flag */
		if basno = 7 then do;    /* parameter */
		     s_ptr -> runtime_symbol.class = 9;
		     s_ptr -> runtime_symbol.location = s_ptr -> runtime_symbol.location / 2;
		  end;
		else s_ptr -> runtime_symbol.class = 8;	/* indirect parameter?? */
	     else if basno = 6 then s_ptr -> runtime_symbol.class = 1;
	  end;

	if offset ^= 0 then do;	/* explicitly fill in offset field */
	     call allocate_storage(2, 0);
	     s_ptr -> runtime_symbol.simple = "0"b;
	     s_ptr -> runtime_symbol.aligned = "0"b;
	     s_ptr -> runtime_symbol.packed = "1"b;
	     if mod(offset, 9) = 0 then do;
		s_ptr -> runtime_symbol.offset = divide(offset, 9, 26, 0);
		s_ptr -> runtime_symbol.units = 2;	/* byte */
	       end;
	     else do;
		s_ptr -> runtime_symbol.offset = offset;
		s_ptr -> runtime_symbol.units = 1;	/* bit */
	       end;
	  end;


	remainder = type;
	do while(remainder ^= "");	/* fill in type related info */
	     key = index("*(:[,0123456789", substr(remainder, 1, 1));
	     i = verify(substr(remainder, 2), valid_chars(key));
	     if i < 1 then i = length(remainder) - 1;
	     token = substr(remainder, 1, i);
	     remainder = substr(remainder, i + 1);

	     if key = 0 then do;	/* Type Name */
		i = divide(15 + index(type_names, " " || token || " "), 16, 17, 0);
		if i > 0 then do;	/* C type */
		     s_ptr -> runtime_symbol.type = type_info(i).type;
		     s_ptr -> runtime_symbol.size = type_info(i).default_size;
		     if type_info(i).type = CHAR then do;
			s_ptr -> runtime_symbol.aligned = "0"b;
			s_ptr -> runtime_symbol.packed = "1"b;
			s_ptr -> runtime_symbol.decimal = (token = ".char");
		       end;
		  end;

		else do;	/* type reference */
		     s_ptr -> runtime_symbol.type = TYPEREF;
		     if context ^= 0 then i = find_symbol((token), context, "1"b);
		     else i = find_symbol((token), current_block, "0"b);
		     if i = 0 then do;	/* forward reference */
			s_ptr -> runtime_symbol.size = forward;
			forward = s;	/* chain through size field */
			call get_token((token), i);
			s_ptr -> runtime_symbol.son = i;	/* remember name */
		       end;
		     else do;
			if addr(symbol_data(i)) -> runtime_symbol.type = ENUMTYPE & i = context
			  then s_ptr -> runtime_symbol.type = ENUMVALUE;
			else s_ptr -> runtime_symbol.son = i-s;
		       end;
		  end;
	       end;
	     else if key <= 2 then do; 	/* pointer or function & type... */
		if key = 1 then s_ptr -> runtime_symbol.type = PTR;	/* ptr */
		else s_ptr -> runtime_symbol.type = FUNCTION;		/* function */
		if s = top then
		     if context = 0 then call thread_symbol_into_block(s, current_block);
		     else call add_symbol_in_context(s, context);
		call compute_array_data(s);
		call create_symbol("", i);
		addr(symbol_data(i)) -> runtime_symbol.level = s_ptr -> runtime_symbol.level;
		s_ptr -> runtime_symbol.son = i - s;
		s = i;
		s_ptr = addr(symbol_data(s));
		if context ^= 0 then s_ptr -> runtime_symbol.father = context - s;
		else s_ptr -> runtime_symbol.father = current_block - s;
	       end;
	     else if key = 3 then do;	/* size information */
		s_ptr -> runtime_symbol.aligned = "0"b;
		s_ptr -> runtime_symbol.packed = "1"b;
		s_ptr -> runtime_symbol.size = fixed(substr(token, 2));
	       end;
	     else if key <= 5 then do;	/* bounds info */
		if s_ptr -> runtime_symbol.simple then do;
		     s_ptr -> runtime_symbol.simple = "0"b;
		     call allocate_storage(2, 0);
		  end;
		call allocate_storage(3, 0);
		s_ptr -> runtime_symbol.ndims = s_ptr -> runtime_symbol.ndims + 1;
		s_ptr -> runtime_symbol.bounds(s_ptr -> runtime_symbol.ndims).upper =
		     fixed(before(substr(token, 2), "]")) - 1;
	       end;
	     else s_ptr -> runtime_symbol.type = fixed(token);	/* explicit type */
	  end;
	if s = top then
	     if context = 0 then call thread_symbol_into_block(s, current_block);
	     else call add_symbol_in_context(s, context);
	call compute_array_data(s);
end define_symbol;

/* This procedure emits all the structures that have been previously
   defined into the symbol table of the object. */
emit_symtab:	proc;	/* IN-OUT (pc) */
dcl	(i, j) fixed bin(26);
dcl	seg_name_size fixed bin(26);
dcl	temp_string char(8);
dcl	twop18 fixed bin(26) int static options(constant) init(262144);
dcl	token(0:5) fixed bin;	/* used to fill out token list in runtime_blocks */

	do i = 0 to max_source;	/* fix up offsets of source strings */
	     sc_map(i).pathname.offset = sc_map(i).pathname.offset + start_sc_strings;
	  end;

	call putout_$putwrd(pc, 1, i66, 0);		/* source_map.version */
	call putout_$putwrd(pc, (max_source+1), i66, 0);	/* source_map.number */
	call putout_$putblk(pc, addr(sc_map), i66, (max_source+1)*4, null());

	call putout_$putblk(pc, addr(sc_strings), i66, divide(sc_string_len, 4, 26, 0), null());

	if current_statement = 0 & max_allocated = 0 then return;

	/* pl1_symbol_block */
	j = length(rtrim(sthedr_$seg_name));
	seg_name_size = divide(j + 3, 4, 26, 0);
	call putout_$putwrd(pc, 1, i66, 0);	/* version */
	temp_string = "pl1info ";
	call putout_$putblk(pc, addr(temp_string), i66, 2, null());
	call putout_$putwrd(pc, fixed("100000000000"b3,35), i66, 0);	/* flags: map */
	call putout_$putwrd(pc, 0, i66, 0);	/* greatest severity */
	call putout_$putwrd(pc, start_symbol * twop18, i66, 0);	/* root, profile */
	i = start_statement * twop18 + start_statement + (current_statement+1)*2;
	call putout_$putwrd(pc, i, i66, 0);	/* map: first, last */
	call putout_$putwrd(pc, (pc + 1) * twop18 + j, i66, 0);	/* segname: offset, length */
	call putout_$putblk(pc, addr(sthedr_$seg_name), i66, seg_name_size, null());

	/* output symbol information */
	if max_allocated > 0 then do;
	     call resolve_forward_references;
	     call make_token_list;
	     call adjust_block_offsets(1);
	     call putout_$putblk(pc, symbol_data_ptr, i66, (max_allocated), temp_ptrs(3));
	  end;

	/* can't allocate statement map as a block because of relocation */
	do i = 1 to current_statement;	/* statement map */
	     call putout_$putwrd(pc, addr(st_map(i)) -> word(1), i66, iltext);
	     call putout_$putwrd(pc, addr(st_map(i)) -> word(2), i66, 0);
	  end;
	/* last statement map entry is special */
	call putout_$putwrd(pc, (itxpc-1)*twop18 + 262143, i66, iltext);
	call putout_$putwrd(pc, 261632*twop18, i66, 0);
	return;	/* end emit_symtab */

/* This procedure scans through the linked list of runtime tokens
   creating the hashed list that is used by runtime_blocks */
make_token_list:	proc;
dcl	(l, o, slot, t) fixed bin;
dcl	t_ptr ptr;

	token(*) = 0;
	slot = 0;
	l = 1;
	t = 0;
	o = first_token;
	do while(o ^= 0);
	     t = t + o;
	     t_ptr = addr(symbol_data(t));
	     o = t_ptr -> runtime_token.next;
	     do while(t_ptr -> runtime_token.size >= l);
		token(slot) = t;
		slot = slot + 1;
		l = l + l;
		if slot > hbound(token, 1) then return;
	       end;
	  end;
end make_token_list;

/* This procedure recursively adjusts offset values for the runtime_block
   tree. It adjusts the values for the token hash list and statement map values */
adjust_block_offsets:	proc(b);
dcl	b fixed bin parameter;
dcl	b_ptr ptr;
dcl	i fixed bin;

	b_ptr = addr(symbol_data(b));
	b_ptr -> runtime_block.header = 1-b-start_symbol;
	if b_ptr -> runtime_block.father = 0 then b_ptr -> runtime_block.father = 1 - b - start_symbol;
	do i = 0 to 5 while(token(i) ^= 0);
	     b_ptr -> runtime_block.token(i) = token(i) - b;
	  end;
	b_ptr -> runtime_block.map.first = b_ptr -> runtime_block.map.first*2 + start_statement-b-start_symbol+1;
	b_ptr -> runtime_block.map.last = b_ptr -> runtime_block.map.last*2 + start_statement-b-start_symbol+1;
	if b_ptr -> runtime_block.brother ^= 0 then
	     call adjust_block_offsets(b_ptr -> runtime_block.brother + b);
	if b_ptr -> runtime_block.son ^= 0 then
	     call adjust_block_offsets(b_ptr -> runtime_block.son + b);
end adjust_block_offsets;

resolve_forward_references:	proc;
dcl	(s, i) fixed bin;
dcl	s_ptr ptr;

	s = forward;
	do while(s ^= 0);
	     s_ptr = addr(symbol_data(s));
	     i = find_symbol(addr(symbol_data(s_ptr -> runtime_symbol.son)) -> runtime_token.string,
		s_ptr->runtime_symbol.father+s, (s_ptr->runtime_symbol.level > 0));
	     if i = 0 then call ioa_("Type has been referenced but not defined: ^a",
		 addr(symbol_data(s_ptr -> runtime_symbol.son)) -> runtime_token.string);
	     else s_ptr -> runtime_symbol.son = i - s;
	     s = s_ptr -> runtime_symbol.size;	/* link through size field */
	     s_ptr -> runtime_symbol.size = 35;	/* reasonable but useless value */
	  end;
end resolve_forward_references;

end emit_symtab;

/* runtime symbol structures */

dcl	1 runtime_symbol	aligned based,
	2 flag		unal bit(1),	/* always "1"b for Version II */
	2 use_digit	unal bit(1),	/* if "1"b and units are half words units are really digits */
	2 array_units	unal fixed bin(2) unsigned,
	2 units		unal fixed bin(2) unsigned,	/* addressing units */
	2 type		unal fixed bin(6) unsigned,	/* data type */
	2 level		unal fixed bin(6) unsigned,	/* structure level */
	2 ndims		unal fixed bin(6) unsigned,	/* number of dimensions */
	2 bits		unal,
	  3 aligned	bit(1),
	  3 packed	bit(1),
	  3 simple	bit(1),
	  3 decimal	bit(1),
	2 scale		unal fixed bin(7),	/* arithmetic scale factor */
	2 name		unal fixed bin(17),	/* rel ptr to acc name */
	2 brother		unal fixed bin(17),	/* rel ptr to brother entry */
	2 father		unal fixed bin(17),	/* rel ptr to father entry */
	2 son		unal fixed bin(17),	/* rel ptr to son entry */
	2 address		unal,
	  3 location	fixed bin(17),		/* location in storage class */
	  3 class		unsigned fixed bin(4),		/* storage class */
	  3 next		fixed bin(13),		/* rel ptr to next of same class */
	2 size		fixed bin(35),	/* encoded string|arith size */
	2 offset		fixed bin(35),	/* encoded offset from address */
	2 virtual_org	fixed bin(35),
	2 bounds(1),
	  3 lower		fixed bin(35),	/* encoded lower bound */
	  3 upper		fixed bin(35),	/* encoded upper bound */
	  3 multiplier	fixed bin(35);	/* encoded multiplier */

dcl	1 runtime_bound	based,
	2 lower		fixed bin(35),
	2 upper		fixed bin(35),
	2 multiplier	fixed bin(35);

dcl	1 runtime_block	aligned based,
	2 flag		unal bit(1),	/* always "1"b for Version II */
	2 quick		unal bit(1),	/* "1"b if quick block */
	2 fortran		unal bit(1),	/* "1"b if fortran program */
	2 standard	unal bit(1),	/* "1"b if program has std obj segment */
	2 owner_flag	unal bit(1),	/* "1"b if block has valid owner field */
	2 skip		unal bit(1),
	2 type		unal fixed bin(6) unsigned,	/* = 0 for a block node */
	2 number		unal fixed bin(6) unsigned,	/* begin block number */
	2 start		unal fixed bin(17),	/* rel ptr to start of symbols */
	2 name		unal fixed bin(17),	/* rel ptr to name of proc */
	2 brother		unal fixed bin(17),	/* rel ptr to brother block */
	2 father		unal fixed bin(17),	/* rel ptr to father block */
	2 son		unal fixed bin(17),	/* rel ptr to son block */
	2 map		unal,
	  3 first		fixed bin(17),		/* rel ptr to first word of map */
	  3 last		fixed bin(17),		/* rel ptr to last word of map */
	2 entry_info	unal fixed bin(17),	/* info about entry of quick block */
	2 header		unal fixed bin(17),	/* rel ptr to symbol header */
	2 chain(4)	unal fixed bin(17),	/* chain(i) is rel ptr to first symbol
					   on start list with length >= 2**i */
	2 token(0:5)	unal fixed bin(17),	/* token(i) is rel ptr to first token
					   on list with length >= 2 ** i */
	2 owner		unal fixed bin(17);	/* rel ptr to owner block */

dcl	1 runtime_token	aligned based,
	2 next		unal fixed bin(17),	/* rel ptr to next token */
	2 dcl		unal fixed bin(17),	/* rel ptr to first dcl of this token */
	2 name,				/* ACC */
	  3 size		unal unsigned fixed bin (9), /* number of chars in token */
	  3 string	unal char(n refer(runtime_token.size));
/* end of rutime symbol structures */

%include concom;
%include erflgs;
%include objnfo;
%include pl1_symbol_block;
%include relbit;
%include sthedr;

end alm_symtab_;
