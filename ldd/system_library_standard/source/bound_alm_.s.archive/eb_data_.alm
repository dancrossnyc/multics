" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1988                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
"     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
"     Modified to allow for *heap links, joining to definition section,
"     and to store the list_component number.
"  2) change(2016-01-05,Swenson), approve(2016-01-05,MCR10002):
"     Fixed ALM buffer overrun error (ticket #89) that occurs on long source
"     pathnames.
"                                                      END HISTORY COMMENTS


name	eb_data_

"		data segment for 
"		the Multics GE-645 Assembler

"		originally coded by N. Adleman
"		on December 2, 1969

"		Modified 14 July 1980 by M. N. Davidoff to remove ia, ib, id and ie
"			which were only used by decevl_.
"		modified for macro processing 3/23/77 by Noel I. Morris
"                   modified for prelinking on 06/15/75 by Eugene E Wiatrowski
"	          modified 01/74 by E Stone to add listing_max_length
"		modified on 09/13/73 at 15:42:36 by R F Mabee.
"		modified on 09/13/73 at 15:41:46 by R F Mabee. Fixed bug in rpt_terminators.
"		modified on 07/28/73 at 23:36:27 by R F Mabee. Added constant tables for EIS, etc.
"		modified on 07/06/72 at 21:59:07 by R F Mabee. Reformatted itlist for modevl_, to add itp modifier.
"		modified on 04/30/72 at 23:59:31 by R F Mabee. Changed new call, stretched objnfo.
"		modified on 04/16/72 at 14:00:28 by R F Mabee. Added new call/save/return to use operators.
"		by RHG on 17 Sept 1970 to allow "f1","f2","f3" as modifiers rather than "f","fi","fj"
"		by RHG on 9 September for new listing package and
"			additional varcom required by cleavage of pass1
"		by RHG on 11 August 1970 at 0523 to fix CODTAB to get rid of prec_$prec_
"		by RHG on 8 August 1970 at 0035 to remove symbol table header
"		by NA on August 4, 1970 at 1011 to remove the ribbon shift characters from who_am_I

"		This data segment retains pure
"		data in the text portion and impure
"		data in the linkage portion


	use	pure	in the text
	use	impure	in the linkage

	org	0


%	include	stack_header


	use	pure
	segdef	varcom_size
varcom_size:	zero	0,end_varcom-varcom
	use	pure
	segdef	concom	pure from fortran-coded eplbsa
concom:	null
basnos:	oct	0,1,2,3,4,5,6,7
clunk:	oct	0
clint:	oct	100000
clext:	oct	200000
clbas:	oct	300000
clstk:	oct	400000
clndx:	oct	500000
clmlc:	oct	600000
fdef:	oct	1
fnul:	oct	2
fphs:	oct	4
fset:	oct	10
frel:	oct	020
fabs:	oct	040
fbol:	oct	100
fcom:	oct	200
find:	oct	400
flocrf:	oct	100021
fequrf:	oct	100041
fbolrf:	oct	100101
fsetrf:	oct	100051
fbasrf:	oct	200041
fsegrf:	oct	200041
fsthof:	oct	400041
fndxrf:	oct	500041
fmlcrf:	oct	600041
onesev:	oct	7
twosev:	oct	77
thrsev:	oct	777
forsev:	oct	7777
fivsev:	oct	77777
sixsev:	oct	777777
allsev:	oct	777777777777
	segdef	bases
bases:	null		POSTP2
symbas:	acc	"ap"
	acc	"ab"
	acc	"bp"
	acc	"bb"
	acc	"lp"
	acc	"lb"
	acc	"sp"
	acc	"sb"
mir:	arg	0,*n
mri:	arg	0,n*
mdu:	arg	0,du
mdl:	arg	0,dl
mxo:	arg	0,0
mx1:	arg	0,1
mpc:	arg	0,ic
mpci:	arg	0,ic*
mfi:	oct	46
mits:	oct	43
mitb:	oct	41
ixtern:	aci	"XTRN"
intern:	aci	"NTRN"
iassgn:	aci	"ASGN"
iserch:	aci	"SRCH"
ixvrvl:	aci	"XVRL"
ixvrvp:	aci	"XVRP"
invrvl:	aci	"NVRL"
invrvp:	aci	"NVRP"
ibvrvl:	aci	"BVRL"
ibvrvp:	aci	"BVRP"
iaccvl:	aci	"ACCV"
iacivl:	aci	"ACIV"
mcmpq:	cmpq	0
mcmpx0:	cmpx0	0
mldaq:	ldaq	0
mldq:	ldq	0
mldx0:	ldx0	0
mnopdu:	nop	0,du
mstcd:	stcd	0
mtra:	tra	0
mtnc:	tnc	0
mtnz:	tnz	0
meabsp:	easpsp	0
meapap:	eppap	0
meapbp:	eppbp	0
meaplp:	epplp	0
meapsp:	eppsp	0
mstpap:	spriap	0
mstpbp:	spribp	0
mstplp:	sprilp	0
mstpsp:	sprisp	0
i1542:	aci	"1542"
i642:	aci	"642 "
i3333:	aci	"3333"
i66:	aci	"66  "



ibb:	aci	"    "
ibsp:	aci	"    "
null:	oct	0
smxer:	acc	"mxerror"
sentry:	acc	"entry"
sretrn:	acc	"return"
dzero:	oct	0,0
ixvrvl_notag:	aci	"XTAG"
 
	use	pure
	segdef	ib6
ib6:	aci	" 6  "
	use	pure
	use	pure
	segdef	codtab	pure data
codtab:	null
"NOTE: the last character of the codtab entries are for use as the precedence by expevl_
	aci	"NUL2"	000,null
	aci	"SOH2"	001, start of header
	aci	"STX2"	002, start of text
	aci	"ETX2"	003,end of text
	aci	"EOT2"	004,end of transmission
	aci	"ENQ2"	005,inquiry: who are you
	aci	"ACK2"	006, acknowledge
	aci	"BEL2"	007, bell
	aci	"BS 2"	010, backspace
	aci	"SP 2"	011, horizontal tab same as space (040)
	aci	"NL 2"	012, new line
	aci	"VT 2"	013, vertical tab
	aci	"SP 2"	014, form feed same as space (040)
	aci	"NL 2"	015, carrier return same as new-line (012)
	aci	"SO 2"	016, shift out
	aci	"SI 2"	017, shift in
	aci	"DLE2"	020, data link escape
	aci	"DC12"	021, device control 1
	aci	"DC22"	022, device control 2
	aci	"DC32"	023, device control 3
	aci	"DC42"	024, device control 4
	aci	"NAK2"	025, negative acknowledge
	aci	"SYN2"	026, synchronous idle
	aci	"ETB2"	027, end of transmission block
	aci	"CAN2"	030, cancel
	aci	"EOM2"	031, end of medium
	aci	"SUB2"	032, start of special sequence
	aci	"ESC2"	033, escape
	aci	"FS 2"	034, file separator
	aci	"GS 2"	035, group separator
	aci	"RS 2"	036, record separator
	aci	"US 2"	037, unit separator
	aci	"SP 2"	040, space
	aci	"!  2"	041, exclamation point
	aci	"QUO2"	042, quotation mark
	aci	"#  2"	043, number sign
	aci	"$  2"	044, dollar sign
	aci	"SP 2"	045, per cent sign, treated like space.
	aci	"&  2"	046, ampersand
	aci	"'  2"	047, apostrophe
	aci	"(  3"	050, left parenrhesis
	aci	")  4"	051, right parenthesis
	aci	"*  6"	052, star
	aci	"+  5"	053, plus
	aci	",  2"	054, comma
	aci	"-  5"	055, minus
	aci	".  2"	056, point
	aci	"/  6"	057, slash
	aci	"dig2"	060-071, ten digits	0
	aci	"dig2"	1
	aci	"dig2"	2
	aci	"dig2"	3
	aci	"dig2"	4
	aci	"dig2"	5
	aci	"dig2"	6
	aci	"dig2"	7
	aci	"dig2"	8
	aci	"dig2"	9
	aci	":  2"	072, colon
	aci	"NL 2"	073, semi-colon same as new-line (012)
	aci	"<  2"	074, left pointed bracket
	aci	"=  2"	075, equal sign
	aci	">  2"	076, right pointed bracket
	aci	"?  2"	077, question mark
	aci	"@  2"	100, at sign
	aci	"ltr2"	101-132	26 Upper case Letters	A
	aci	"ltr2"	B     WHICH ARE TREATED THE SAME AS LOWER CASE LETTERS
	aci	"ltr2"	C
	aci	"ltr2"	D
	aci	"ltr2"	E
	aci	"ltr2"	F
	aci	"ltr2"	G
	aci	"ltr2"	H
	aci	"ltr2"	I
	aci	"ltr2"	J
	aci	"ltr2"	K
	aci	"ltr2"	L
	aci	"ltr2"	M
	aci	"ltr2"	N
	aci	"ltr2"	O
	aci	"ltr2"	P
	aci	"ltr2"	Q
	aci	"ltr2"	R
	aci	"ltr2"	S
	aci	"ltr2"	T
	aci	"ltr2"	U
	aci	"ltr2"	V
	aci	"ltr2"	W
	aci	"ltr2"	X
	aci	"ltr2"	Y
	aci	"ltr2"	Z
	aci	"[  2"	133, left square bracket
	aci	"\  2"	134, reverse slash
	aci	"]  2"	135, right square bracket
	aci	"^  6"	136, circumflex
	aci	"ltr2"	137, underline same as letters (uppers and lowers) 
	aci	"`  2"	140, grave accent
	aci	"ltr2"	141-172 Lower case Letters	a
	aci	"ltr2"	b
	aci	"ltr2"	c
	aci	"ltr2"	d
	aci	"ltr2"	e
	aci	"ltr2"	f
	aci	"ltr2"	g
	aci	"ltr2"	h
	aci	"ltr2"	i
	aci	"ltr2"	j
	aci	"ltr2"	k
	aci	"ltr2"	l
	aci	"ltr2"	m
	aci	"ltr2"	n
	aci	"ltr2"	o
	aci	"ltr2"	p
	aci	"ltr2"	q
	aci	"ltr2"	r
	aci	"ltr2"	s
	aci	"ltr2"	t
	aci	"ltr2"	u
	aci	"ltr2"	v
	aci	"ltr2"	w
	aci	"ltr2"	x
	aci	"ltr2"	y
	aci	"ltr2"	z
	aci	"{  2"	173, left brace
	aci	"|  2"	174, vertical line
	aci	"}  2"	175, right brace
	aci	"~  2"	176, tilde
	aci	"PAD2"	177, pad character

	use	pure
	segdef	relbit	pure data
relbit:	null
iabsol:	dec	0	absolute
	dec	16	text
imtext:	dec	17	negative text
	dec	18	link segment
imlink:	dec	19	negative link segment
ilkptr:	dec	20	linkage pointer...lp
idefpt:	dec	21	definition pointer
isymbl:	dec	22	symbol
imsymb:	dec	23	negative symbol
ilblok:	dec	24	linkage block
imblok:	dec	25	negative linkage block
iselfr:	dec	26	self relative
iresv1:	dec	27	unused
iresv2:	dec	28	unused
iresv3:	dec	29	unused
iresv4:	dec	30	unused
iescap:	dec	31	escape
iltext:	zero	16,0	glwrd(itext,0)
illink:	zero	18,0	glwrd(ilink,0)
ilsymb:	zero	22,0	glwrd(isymbl,0)
ildefs:	zero	21,0	glwrd(idefpt,0)
ibits:	oct	20	itext
	oct	22	ilink
	oct	26	isymbl

	use	pure
	segdef	mxsave,nmxsav	pure data
mxsave:	null
nmxsav:	dec	2		"mastermode save
	ldx0	sp|8
	ldi	sp|21

	use	pure
	segdef	retlst,nretls	normal return
retlst:	null
nretls:	dec	3		"pure data
	lpri	sp|16,*
	lreg	sp|8
	rtcd	sp|20

	segdef	new_retlst,new_nretls	" normal return, new version February 1972.
new_retlst:	null
new_nretls:	dec	1
	tra	sb|stack_header.return_op_ptr,*		" go to system return operator.

	segdef	short_retlst,short_nretls	" short return (no save done).
short_retlst:	null
short_nretls:	dec	1
	tra	sb|stack_header.ret_no_pop_op_ptr,*		" go to system short return operator.

	segdef	new_getlp,new_ngetlp		" sequence to load linkage pointer while in text.
new_ngetlp:	null
new_getlp:	dec	1
	tspbp	sb|stack_header.entry_op_ptr,*

	use	pure	
	segdef	anames,atext,alink,asym,astat,asys,aheap
anames:	null
atext:	acc	"*text"		pass1, pass2
alink:	acc	"*link"		"
asym:	acc	"*symbol"		"
	bss	,2
astat:	acc	"*static"		"
asys:	acc	"*system"		"
aheap:	acc	"*heap"		"
	segdef	atext2,alink2,asym2,astatic2,asystem2,adef2
atext2:	acc	"text"		pass1
alink2:	acc	"link"		"
asym2:	acc	"symbol"		"
astatic2: acc       "static"            "
asystem2:	acc	"system"		"
adef2:	acc	"definition"	"
 
 
 
	use	pure
	segdef	itext,ilink,isym,istatic,idefs
itext:	oct	0
ilink:	oct	1
isym:	oct	2
istatic:  oct       4
idefs:	oct	10

	use       impure
	segdef    stat_len
stat_len: oct       0
	segdef    separate_static
separate_static:
	oct       0
	segdef	entry_bound
entry_bound:
	oct	0
	segdef	entrybound_bit
entrybound_bit:
	oct	0



	use       pure
	segdef	ion,ioff,iobject,isave,irestore,unwind
ion:	acc	"on"		PASS1,PASS2
ioff:	acc	"off"		"
iobject:	acc	"object"
isave:	acc	"save"
irestore:	acc	"restore"
unwind:	acc	"unwinder_"	pass2

	segdef	mstaq,mx7,maos,meax0,meax7,stnam
mstaq:	staq	0		pass2
mx7:	oct	000000000017	pass2
maos:	aos	0		postp2
meax0:	eax0	0
meax7:	eax7	0
stnam:	acc	"symbol_table"

	segdef	calseq
calseq:	acc	"(call_sequence)"

	segdef	entseq
entseq:	acc	"(entry_sequence)"

	segdef	itxnam,ilknam,isynam
itxnam:	acc	"rel_text"
ilknam:	acc	"rel_link"
isynam:	acc	"rel_symbol"


	segdef	blanks
blanks:	acc	"       "	7 ascii blanks	postp2

	segdef	typr2
typr2:	oct	000000000000
	oct	000000000025
	oct	000025000000
	oct	000025000025
	oct	000000000025

	segdef	rho,twop18
rho:	oct	314151126535		table
twop18:	oct	000001000000

	segdef	ilend
ilend:	aci	"lnd1"		expevl_
	segdef	ineg,inot
ineg:	aci	"neg7"		expevl_
inot:	aci	"not7"		expevl, procedure table

	segdef	l0r0,l1r0,l2r0,l3r0
l0r0:	oct	0		LSTMAN
l1r0:	oct	000001000000
l2r0:	oct	000002000000
l3r0:	oct	000003000000

	segdef	rlist
rlist:	acc	"n"		MODEVL
	acc	"au"
	acc	"qu"
	acc	"du"
	acc	"ic"
	acc	"al"
	acc	"ql"
	acc	"dl"
	acc	"x0"
	acc	"x1"
	acc	"x2"
	acc	"x3"
	acc	"x4"
	acc	"x5"
	acc	"x6"
	acc	"x7"

	segdef	itlist_
itlist_:	zero	0,end_itlist-*
	acc	"f1";	oct	40
	acc	"itb";	oct	41
	acc	"itp";	oct	41
	acc	"its";	oct	43
	acc	"sd";	oct	44
	acc	"scr";	oct	45
	acc	"f2";	oct	46
	acc	"f3";	oct	47
	acc	"ci";	oct	50
	acc	"i";	oct	51
	acc	"sc";	oct	52
	acc	"ad";	oct	53
	acc	"di";	oct	54
	acc	"dic";	oct	55
	acc	"id";	oct	56
end_itlist:	acc	"idc";	oct	57

	segdef	jba,jbi,jbm,jbo,jbv,ibtb,ibts,ibtp,jbh
	segdef	iasc,ifxd,iint,ioct,ivfd,imach
	segdef	iitb,iits,ierr,iflt
jba:	oct	141	a	LITEVL
jbi:	oct	151	i
jbm:	oct	155	m
jbo:	oct	157	o
jbv:	oct	166	v
jbh:	oct	150	h
ibtb:	acc	"tb"	LITEVL
ibts:	acc	"ts"	LITEVL
ibtp:	acc	"tp"	LITEVL
iasc:	aci	".asc"
ifxd:	aci	".fxd"
iint:	aci	".int"
ioct:	aci	".oct"
ivfd:	aci	".vfd"
imach:	aci	".mch"
iitb:	aci	".itb"
iits:	aci	".its"
ierr:	aci	".err"
iflt:	aci	".flt"	DECEVL

	segdef	nlpads,ipads
ipads:	oct	177177177177
nlpads:	oct	012177177177

	segdef	mb28,mb29,zerbuf

mb28:	oct	200
mb29:	oct	100
zerbuf:	oct	0,0,0,0,0,0,0,0,0,0
	oct	0,0,0,0,0,0,0,0,0,0
	oct	0,0,0,0,0,0,0,0,0,0

	segdef	eis_flag_keys,eis_value_keys,eis_mf
eis_flag_keys:
	acc	"ascii";	oct	0
	acc	"enablefault"
	acc	"round";	oct	0
eis_value_keys:
	acc	"mask"
	acc	"bool"
	acc	"fill"
eis_mf:
	acc	"pr";	oct	100
	acc	"rl";	oct	40
	acc	"id";	oct	20

	segdef	rpt_terminators
rpt_terminators:
	acc	"tze"
	acc	"tnz"
	acc	"tmi"
	acc	"tpl"
	acc	"trc"
	acc	"tnc"
	acc	"tov"

	segdef	bcd_table
bcd_table:
	oct	777777777777,777777777777,777777777777,777777777777	" NUL to ETB.
	oct	777777777777,777720777613,537432573555,546073523361	" CAN to /.
	oct	000102030405,060710111556,367516171421,222324252627	" 0 to G.
	oct	303141424344,454647505162,636465666770,711237344072	" H to _.
	oct	572122232425,262730314142,434445464750,516263646566	" ` to w.
	oct	677071774077,777777777777				" x to PAD.

"
	use	impure	in the linkage

	use	impure
 
	even	"for use of sym in LDAQ instructions
 
	segdef	varcom,tsym	impure from fortran coded eplbsa
varcom:	null
	bss	var_pad,4
tsym:	null	overlayed with SYM
	bss	var_pad2,350
end_varcom:
 
	even		"ITS pointers follow
	use	impure
	segdef	objnfo
objnfo:	bss	objnfo,24	impure from fortran called eplbsa
	use	impure
	segdef	segnfo
	even		ITS pointers follow
segnfo:	bss	segnfo,13	impure from fortran coded eplbsa
	use	impure
	segdef	erflgs,erflgs_overlay,flgvec	impure data
erflgs:	null
erflgs_overlay:	null	18prntX words and 18 TSTSW words overlayed with FLGVEC
flgvec:	bss	flgvec,36

	use	impure
	segdef	lstcom
lstcom:	null
	bss	tnolst,1

	use	impure
	segdef	mxpro	impure data
mxpro:	dec	2
	cmpx0	0,0
	tnc	0,0

	use	impure
	segdef	slcall,nslcal	impure data
slcall:	null
nslcal:	dec	5
	spri	sp|0
	sreg	sp|8
	eppap	0
	stcd	sp|20
	tra	0

	segdef	new_slcall,new_nslcal	" New call, same as old as of February 1972.
new_slcall:	null
new_nslcal:	dec	7
	spri	sp|0
	eppap	0		" load arg list.
	eppbp	0		" load thing to call.
	sreg	sp|32
	tsplp	sb|stack_header.call_op_ptr,*		" go to system call operator.
	lpri	sp|0
	lreg	sp|32

	segdef	short_slcall,short_nslcal
short_slcall:	null		" Short (no bases/regs saved or restored) slave call macro.
short_nslcal:	dec	3
	eppbp	0
	tsplp	sb|stack_header.call_op_ptr,*
	epplp	sp|24,*		" Restore linkage pointer.

	use	impure
	segdef	mxcall,nmxcal	impure data
mxcall:	null
nmxcal:	dec	11
	spri	sp|0
	sreg	sp|8
	eppap	lp|0
	spriap	sp|20
	eppap	0
	sti	sp|21
	ldq	0
	stq	sp|22
	ldq	sp|13
	ldi	sp|21
	tra	0

	use	impure
	segdef	mxclbk,nmxclb	impure data
mxclbk:	null
nmxclb:	dec	7
	ldq	sp|22
	cmpq	0
	tnz	0
	stz	sp|22
	ldq	sp|13
	ldx0	sp|8
	ldi	sp|21

	use	impure
	segdef	relocn	impure data
relocn:	null
mxpbit:	oct	0	2 words
	oct	000020000000
nslbit:	oct	0	5 words
	oct	0
	oct	777777000000
	oct	0
	oct	777777000000
mxcbit:	oct	0	11 words
	oct	0
	oct	000024000000
	oct	0
	oct	777777000000
	oct	0
	oct	000020000000
	oct	0
	oct	0
	oct	0
	oct	777777000000
mxlbit:	oct	0	7 words
	oct	777777000000
	oct	777777000000
	oct	0
	oct	0
	oct	0
	oct	0
mxsbit:	oct	0	2 words
	oct	0
mslbit:	oct	0	6 words
	oct	0
	oct	0
	oct	0
	oct	0
	oct	0
mrtbit:	oct	0	3 words
	oct	0
	oct	0
merbit:	oct	0	11 words
	oct	0
	oct	0
	oct	0
	oct	0
	oct	0
	oct	0
	oct	0
	oct	0
	oct	0
	oct	000024000000

new_mrtbit:	oct	0	" Relocation bits for new return operator.
	bss	,2		" Padding in case it grows.
new_mslbit:	oct	0	" New slave save.
	oct	0
	bss	,4		" More padding.
new_nslbit:	oct	0	" New slave call.
	oct	777777000000
	oct	777777000000
	oct	0
	oct	0
	oct	0
	oct	0
	bss	,3		" Call particularly likely to grow.
short_mrtbit:	oct	0	" New short return.
	bss	,2		" Padding.
new_entbit:	oct	000025000000	" New entry sequence.
	oct	0
	oct	000020000000
	bss	,2		" Padding.
short_nslbit:	oct	777777000000		" New short slave call.
		oct	0
		oct	0
		bss	,3		" Padding.
new_getbit:	oct	0		" New in-text find linkage pointer.
	bss	,4		" Padding.


	use	impure
	segdef	slsave,nslsav	impure data
slsave:	null
nslsav:	dec	6		"slave mode save
	eppbp	sp|18,*
	sprisp	bp|16
	eppbp	bp|-
	spribp	bp|18
	eppsp	bp|0
	spriap	sp|26

	segdef	new_slsave,new_nslsav	" New save operator, February 1972.
new_nslsav:	null
new_slsave:	dec	2
	eax7	0
	tspbp	sb|stack_header.push_op_ptr,*		" go to system save operator.

	segdef	new_entlst,new_nentls
new_entlst:	null
new_nentls:	dec	3
	oct	0
	tspbp	sb|stack_header.entry_op_ptr,*
	tra	-

	use	impure
	segdef	ertlst,nertls	alternate return  impure data
ertlst:	null
nertls:	dec	11
	spri	sp|0
	sreg	sp|8
	fld	=2b25,dl
	staq	sp|0
	ldaq	sp|0
	staq	sp|0
	eppap	sp|0
	ldaq	sp|12
	ldi	sp|21
	stcd	sp|20
	tra	0

	use	impure
	segdef	lctext	impure data
lctext:	null
	bss	lptext,1
	acc	".text."
	use	impure
	segdef	lchead	impure data
lchead:	null
	bss	lphead,1
	acc	".lkhead."

	use	impure
	segdef	lcsect	impure data
lcsect:	null
	bss	lpsect,1
	acc	".lksect."

	use	impure
	segdef	lclit	impure data
lclit:	null
	bss	lplit,1
	acc	".lit."

	use	impure
	segdef	lcdefs	impure data
lcdefs:	null
	bss	lpdefs,1
	acc	".defs."

	use	impure
	segdef	lctv	impure data
lctv:	null
	bss	lptv,1
	acc	".TV."

	use	impure
	segdef	lccall	impure data
lccall:	null
	bss	lpcall,1
	acc	".ec."

	use	impure
	segdef	lcst	impure data
lcst:	null
	bss	lpst,1
	acc	".st."

	use	impure
	segdef	lcrtx	impure data
lcrtx:	null
	bss	lprtx,1
	acc	".reltx."

	use	impure
	segdef	lcrlk	impure data
lcrlk:	null
	bss	lprlk,1
	acc	".rellk."

	use	impure
	segdef lcrst	impure data
lcrst:	null
	bss	lprst,1
	acc	".relst."

	segdef	lcentries
lcentries:	null
	bss	lpentries,1
	acc	".entries."

	use	impure
	segdef	labarg	impure data
labarg:	null
	bss	gralal,1

	use	impure
	segdef	lccom	impure data
lccom:	null
	bss	moccl,6

	use	impure
	segdef	curlc	impure data
curlc:	null
	bss	clruc,1

	segdef	oulst
oulst:	bss	oulst,170

	use	impure
	use	impure
	segdef	lavptr
	even
lavptr:	null
	its	-1,1	holds pointer to the segment for the list management routines
 
	even
	segdef	who_am_I,abort_assembly
abort_assembly:
	its -1,1
	its -1,1
	bss	label_unused,2
who_am_I:	aci	"alm         "	(must be 12 characters)
	segdef	curr_char_no	for INPUTS
curr_char_no:	dec	-1	the current character in the source segment

	even
	segdef	mexp_env_ptr	for macro expander
mexp_env_ptr:
	its	-1,1

	segdef	alm_arg_ptr
alm_arg_ptr:
	its	-1,1

	segdef	macro_depth
macro_depth:
	dec	0

	segdef	include_number
include_number:
	bss	,1

	segdef	include_control
include_control:
	bss	,(110+35)/36

	segdef	mexp_argno
mexp_argno:
	bss	,1

	segdef	alm_arg_count
alm_arg_count:
	bss	,1

	segdef	macro_listing_control
macro_listing_control:
	bss	,1

	segdef	macro_stack
macro_stack:
	bss	,4*100

	segdef	macro_linect
macro_linect:
	dec	0



	segdef	dig
dig:	vfd	8/27,28/0		for DECSUB


	segdef	alm_options	" Options passed from command to others.
alm_options:	bss	,3	" tnewcall, tnewmachine, tnewobject.
		bss	,3	" tcheckcompatibility, tquietsw, tfirstreftrap.
		bss	,3	" tnoxref, two spare cells.

	segdef	listing_max_length	" Maximum length of listing component
listing_max_length:
	bss	,1

	segdef	list_component	" Component number of listing
list_component:
	bss	,1

	segdef	per_process_static_sw
per_process_static_sw:
	bss	,1

	join	/text/pure
	join	/link/impure
	end
