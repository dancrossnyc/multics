/* **************************************************************
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   ************************************************************** */

/* fs_msf_rb_util_.pl1 -- set and get ring brackets for MSF's */
/* format: style2,idind30,indcomtxt */
/* BIM 831022 */

fs_msf_rb_util_:
     procedure;

	declare (Dir_name, Entryname)	        character (*);
	declare Brackets		        (*) fixed bin (3);
	declare Code		        fixed bin (35);

%include access_mode_values;
%include star_structures;

	declare get_system_free_area_	        entry returns (pointer);
	declare hcs_$star_		        entry (character (*), character (*), fixed bin (2), pointer, fixed bin,
				        pointer, pointer, fixed bin (35));
	declare pathname_		        entry (character (*), character (*)) returns (character (168));
	declare fs_standard_object_$set_segment_ring_brackets
				        entry (character (*), character (*), (*) fixed bin (3), fixed bin (35));
	declare fs_standard_object_$set_directory_ring_brackets
				        entry (character (*), character (*), (*) fixed bin (3), fixed bin (35));
	declare fs_standard_object_$get_directory_ring_brackets
				        entry (character (*), character (*), (*) fixed bin (3), fixed bin (35));
	declare hcs_$get_user_access_modes    entry (character (*), character (*), character (*), fixed bin,
				        bit (36) aligned, bit (36) aligned, fixed bin (35));

	declare error_table_$moderr	        external static fixed bin (35);

	declare segment_brackets	        (3) fixed bin (3);
	declare directory_brackets	        (2) fixed bin (3);
	declare bx		        fixed bin;
	declare code		        fixed bin (35);
	declare cleanup		        condition;
	declare dir_mode		        bit (36) aligned;
	declare msf_directory	        character (168);


set:
     entry (Dir_name, Entryname, Brackets, Code);

	Code = 0;
	msf_directory = pathname_ (Dir_name, Entryname);

/**** * This program has a basic design flaw. It is not capable of */
/**** * backing out if it encounters an error partway through,
      since that would require us to remember all the original
      ring brackets of the original MSF. To make things reasonable,
      it just ignores null links and dirs in the MSF dir,
      rather than reporting error_table_$inconsistent_msf.
      Failure to set the MSF dir brackets, though, is reported
      as an error. */


	call hcs_$get_user_access_modes (Dir_name, Entryname, "", -1, dir_mode, (""b), Code);
	if Code ^= 0
	then return;				/* Cant possibly have enough access */
	if (dir_mode & SM_ACCESS) = ""b
	then do;
		Code = error_table_$moderr;
		return;
	     end;
/**** * First to the dir, to get a lack of access to containing dir */

	directory_brackets (1) = Brackets (1);
	directory_brackets (2) = Brackets (2);
	call fs_standard_object_$set_directory_ring_brackets (Dir_name, Entryname, directory_brackets, Code);
	if Code ^= 0
	then return;
	star_names_ptr, star_entry_ptr = null ();
	on cleanup
	     begin;
		if star_names_ptr ^= null ()
		then free star_names;
		if star_entry_ptr ^= null ()
		then free star_entries;
		star_names_ptr, star_entry_ptr = null ();
	     end;

	call hcs_$star_ (msf_directory, "**", star_BRANCHES_ONLY, get_system_free_area_ (), star_entry_count,
	     star_entry_ptr, star_names_ptr, Code);

	if Code ^= 0
	then return;				/* We must lack access, neh? */

	segment_brackets (1) = Brackets (1);
	segment_brackets (2), segment_brackets (3) = Brackets (2);
	do bx = 1 to star_entry_count;
	     if star_entries (bx).type = star_SEGMENT
	     then do;
		     call fs_standard_object_$set_segment_ring_brackets (msf_directory,
			star_names (star_entries (bx).nindex), segment_brackets, code);
		     if Code = 0
		     then Code = code;
		end;
	end;

	free star_names;
	free star_entries;
	return;


get:
     entry (Dir_name, Entryname, Brackets, Code);

	Code = 0;
	call fs_standard_object_$get_directory_ring_brackets (Dir_name, Entryname, Brackets, Code);
	return;
     end fs_msf_rb_util_;
