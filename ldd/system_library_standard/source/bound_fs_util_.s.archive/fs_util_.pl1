/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */

/* format: style2,indcomtxt,idind30 */


/**** fs_util_ -- outer set of interfaces for typed object support. */

fs_util_:
     procedure;

/****   Jay Pattin 1/26/83 */
/****   modified 1984.03.05 by M. Pandolf to fix get_bit_count parameter */
/****   modified 1984.03.12 by M. Pandolf to initialize P_status correctly */
/****   modified 1984.04.04 by M. Pandolf to fix GET_TYPE usage of parameters */

	declare P_acl_ptr		        ptr;
	declare P_area_ptr		        ptr;
	declare P_bit_count		        fixed bin (24);
	declare P_copy_options_ptr	        ptr;
	declare P_desired_version	        char (*);
	declare P_directory		        char (*);
	declare P_entryname		        char (*);
	declare P_entrypoint_name	        char (*);
	declare P_entry_to_call	        entry variable options (variable);
	declare P_max_length	        fixed bin (19);
	declare (P_modes, P_exmodes)	        bit (36) aligned;
	declare P_new_name		        char (*);
	declare P_no_sysdaemon	        bit (1);
	declare P_old_name		        char (*);
	declare P_ring		        fixed bin;
	declare P_ring_brackets	        (*) fixed bin (3);
	declare P_status		        fixed bin (35);
	declare P_suffix_info_ptr	        ptr;
	declare P_switch_list_ptr	        ptr;
	declare P_switch_name	        char (*);
	declare P_type		        char (*);
	declare P_user_name		        char (*);
	declare P_value		        bit (1) aligned;

	declare entry_to_call	        entry variable options (variable);
	declare idx		        fixed bin;
	declare type		        char (32);
	declare fixed_type		        fixed bin;
	declare arg_list_ptr	        pointer;
	declare user_area_ptr	        pointer;

	declare cleanup		        condition;

	declare cu_$arg_list_ptr	        entry () returns (ptr);
	declare cu_$generate_call	        entry (entry, ptr);
	declare sub_err_		        entry options (variable);

	declare get_user_free_area_	        entry returns (pointer);
	declare hcs_$make_entry	        entry (ptr, char (*), char (*), entry, fixed bin (35));
	declare pathname_		        entry (char (*), char (*)) returns (char (168));

	declare error_table_$null_info_ptr    fixed bin (35) ext static;
	declare error_table_$unsupported_operation
				        fixed bin (35) ext static;
	declare error_table_$unimplemented_version
				        fixed bin (35) ext static;


/**** * NOTE: operations that are defined to operate on links are
      special-cased, to avoid chasing the link. At this time,
      the only such operations are chname and delentry. */

chname_file:
     entry (P_directory, P_entryname, P_old_name, P_new_name, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO_NO_CHASE (FS_CHNAME_FILE);

delentry_file:
     entry (P_directory, P_entryname, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO_NO_CHASE (FS_DELENTRY_FILE);

copy:
     entry (P_copy_options_ptr, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO_DN_EN (FS_COPY, P_copy_options_ptr -> copy_options.source_dir,
	     P_copy_options_ptr -> copy_options.source_name);

get_max_length:
     entry (P_directory, P_entryname, P_max_length, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_GET_MAX_LENGTH);

set_max_length:
     entry (P_directory, P_entryname, P_max_length, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_SET_MAX_LENGTH);

get_bit_count:
     entry (P_directory, P_entryname, P_bit_count, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_GET_BIT_COUNT);

set_bit_count:
     entry (P_directory, P_entryname, P_bit_count, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_SET_BIT_COUNT);

get_user_access_modes:
     entry (P_directory, P_entryname, P_user_name, P_ring, P_modes, P_exmodes, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_GET_USER_ACCESS_MODES);


get_ring_brackets:
     entry (P_directory, P_entryname, P_ring_brackets, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_GET_RING_BRACKETS);


set_ring_brackets:
     entry (P_directory, P_entryname, P_ring_brackets, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_SET_RING_BRACKETS);

get_switch:
     entry (P_directory, P_entryname, P_switch_name, P_value, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_GET_SWITCH);

set_switch:
     entry (P_directory, P_entryname, P_switch_name, P_value, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_SET_SWITCH);


add_acl_entries:
     entry (P_directory, P_entryname, P_acl_ptr, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_ADD_ACL_ENTRIES);

add_extended_acl_entries:
     entry (P_directory, P_entryname, P_acl_ptr, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_ADD_EXTENDED_ACL_ENTRIES);

delete_acl_entries:
     entry (P_directory, P_entryname, P_acl_ptr, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_DELETE_ACL_ENTRIES);

list_acl:
     entry (P_directory, P_entryname, P_desired_version, P_area_ptr, P_acl_ptr, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_LIST_ACL);

list_extended_acl:
     entry (P_directory, P_entryname, P_desired_version, P_area_ptr, P_acl_ptr, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_LIST_EXTENDED_ACL);

replace_acl:
     entry (P_directory, P_entryname, P_acl_ptr, P_no_sysdaemon, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_REPLACE_ACL);

replace_extended_acl:
     entry (P_directory, P_entryname, P_acl_ptr, P_no_sysdaemon, P_status);

	arg_list_ptr = cu_$arg_list_ptr ();
	call GO (FS_REPLACE_EXTENDED_ACL);


suffix_info:
     entry (P_directory, P_entryname, P_suffix_info_ptr, P_status);

	if P_suffix_info_ptr = null ()
	then do;
		P_status = error_table_$null_info_ptr;
		return;
	     end;
	if P_suffix_info_ptr -> suffix_info.version ^= SUFFIX_INFO_VERSION_1
	then do;

		P_status = error_table_$unimplemented_version;
		return;
	     end;

	P_status = 0;
	call GET_TYPE_GET_ENTRY (FS_SUFFIX_INFO);
	go to SUFFIX_INFO_COMMON;

suffix_info_for_type:
     entry (P_type, P_suffix_info_ptr, P_status);

	P_status = 0;
	suffix_info_ptr = P_suffix_info_ptr;
	if suffix_info.version ^= SUFFIX_INFO_VERSION_1
	then do;
		P_status = error_table_$unimplemented_version;
		return;
	     end;
	call GET_ENTRY_GIVEN_TYPE (P_type, FS_SUFFIX_INFO);

SUFFIX_INFO_COMMON:
	call entry_to_call (P_suffix_info_ptr);
	return;



list_switches:
     entry (P_directory, P_entryname, P_desired_version, P_area_ptr, P_switch_list_ptr, P_status);

	user_area_ptr = P_area_ptr;
	if user_area_ptr = null ()
	then user_area_ptr = get_user_free_area_ ();

	call GET_TYPE_GET_ENTRY (FS_LIST_SWITCHES);
	go to LIST_SWITCHES_COMMON;

list_switches_for_type:
     entry (P_type, P_desired_version, P_area_ptr, P_switch_list_ptr, P_status);
	call GET_ENTRY_GIVEN_TYPE (P_type, FS_LIST_SWITCHES);

LIST_SWITCHES_COMMON:
	call entry_to_call (P_desired_version, P_area_ptr, P_switch_list_ptr, P_status);
	return;



make_entry:
     entry (P_directory, P_entryname, P_entrypoint_name, P_entry_to_call, P_status);

	P_status = 0;
	call GET_TYPE_GET_ENTRY (P_entrypoint_name);
	P_entry_to_call = entry_to_call;
	return;

make_entry_for_type:
     entry (P_type, P_entrypoint_name, P_entry_to_call, P_status);

	P_status = 0;
	call GET_ENTRY_GIVEN_TYPE (P_type, P_entrypoint_name);
	P_entry_to_call = entry_to_call;
	return;

get_type:
     entry (P_directory, P_entryname, P_type, P_status);

	P_status = 0;
	P_type = "";
	call GET_TYPE (P_directory, P_entryname);
	if P_status = 0
	then P_type = type;
	return;



GO:
     procedure (operation);

	declare operation		        char (*);
	declare directory		        char (*) parameter;
	declare entryname		        char (*) parameter;

	call GET_TYPE (P_directory, P_entryname);	/* get the type of the thing */
	go to GO_common;

GO_NO_CHASE:
     entry (operation);

	call GET_TYPE_NO_CHASE (P_directory, P_entryname);
	go to GO_common;

GO_DN_EN:
     entry (operation, directory, entryname);

	call GET_TYPE (directory, entryname);

GO_common:
	call GET_ENTRY (operation);			/* find the entrypoint */
	call cu_$generate_call (entry_to_call, arg_list_ptr);
	go to MAIN_RETURN;

     end GO;

GET_TYPE_GET_ENTRY:
     procedure (operation);

	declare operation		        char (*);

	call GET_TYPE (P_directory, P_entryname);
	call GET_ENTRY (operation);
	return;
     end GET_TYPE_GET_ENTRY;

GET_ENTRY_GIVEN_TYPE:
     procedure (a_type, operation);

	declare (a_type, operation)	        char (*);

	type = a_type;
	call FIX_TYPE;

	call GET_ENTRY (operation);
	return;
     end GET_ENTRY_GIVEN_TYPE;

GET_ENTRY:
     procedure (operation);

	declare operation		        char (*);
	declare ox		        fixed bin;
	declare reference_name	        char (32);
	declare code		        fixed bin (35);

	declare fs_standard_object_$make_entry
				        entry (fixed bin, fixed bin, fixed bin (35)) returns (entry);

	if fixed_type > 0				/* this is a standard_object */
	then do;
		do ox = 1 to HIGHEST_FS_OPERATION_INDEX;
		     if operation = FS_OPERATIONS (ox)
		     then go to HAVE_OPERATION;
		     if operation < FS_OPERATIONS (ox)
		     then go to ERROR_NO_OPERATION;
		end;
ERROR_NO_OPERATION:
		P_status = error_table_$unsupported_operation;
		go to MAIN_RETURN;

HAVE_OPERATION:
		entry_to_call = fs_standard_object_$make_entry (fixed_type, ox, P_status);
		if P_status ^= 0
		then go to MAIN_RETURN;
	     end;

	else do;
		reference_name = "suffix_" || rtrim (type) || "_";
		call hcs_$make_entry (codeptr (fs_util_), reference_name, operation, entry_to_call, code);
		if code ^= 0
		then do;
			P_status = error_table_$unsupported_operation;
			go to MAIN_RETURN;
		     end;
	     end;

	return;
     end GET_ENTRY;

/**** call fs_get_type_, translate type to fixed bin if appropriate */

GET_TYPE:
     procedure (directory, entryname);

	declare (directory, entryname)        char (*);


	declare fs_get_type_	        entry (char (*), char (*), char (*), fixed bin (35));
	declare fs_get_type_$no_chase	        entry (character (*), character (*), character (*), fixed binary (35));


	call fs_get_type_ (directory, entryname, type, P_status);
	go to GET_TYPE_common;

GET_TYPE_NO_CHASE:
     entry (directory, entryname);

	call fs_get_type_$no_chase (directory, entryname, type, P_status);
GET_TYPE_common:
	if P_status ^= 0
	then go to MAIN_RETURN;

FIX_TYPE:
     entry;
	if substr (type, 1, 1) = "-"
	then do;
		do idx = 1 to HIGHEST_FS_STANDARD_TYPE_INDEX;
		     if type = FS_STANDARD_TYPES (idx)
		     then go to HAVE_STD_TYPE;
		end;
		call sub_err_ (0, "fs_util_", ACTION_CANT_RESTART, null (), (0),
		     "Unsupported reserved object type referenced: ""^a"".", type);

HAVE_STD_TYPE:
		fixed_type = idx;
	     end;
	else fixed_type = -1;			/* Implies that this is not a std type */

	return;

     end GET_TYPE;

MAIN_RETURN:
	return;

%include copy_options;
%include file_system_operations_;
%include file_system_operations;

%include suffix_info;
%include copy_flags;
%include sub_err_flags;
     end fs_util_;
