/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1983    *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-10-29,MSharpe), approve(86-01-24,MCR7296),
     audit(86-01-24,CLJones), install(86-01-29,MR12.0-1009):
     History comments before hcom:
      fs_util_$copy for segments and MSF's
     - BIM 831022
     - MAP 840206 to properly close SSF when copying SSF -> MSF -update
     - MSharpe 850212 to force_access in case of "-fc (-update -extend)";
      to return et_$inconsistent_msf instead of et_$noentry if msf>0 is
      not found; to delete the forced acl entry if none existed before and
      replace the forced acl with the original mode otherwise; to compare
      the max length of target with bit_count/36 instead of bit_count/4.
     - MSharpe 850307 to check the contents of target past the bitcount
      up to the last bit of current length whenever there is a discrepency.
      If there are only zeroes, we copy; otherwise, give "bit count is
      inconsistent with current length" error message.
     
     and the reason for the first use of history_comment is...
     
     Fixed bug that caused components of msfs to be terminated twice.
                                                   END HISTORY COMMENTS */


/* format: style2,indcomtxt,idind30 */

fs_copy_util_:
     procedure;

	declare P_copy_options_ptr	        ptr parameter;
	declare P_status		        fixed bin (35) parameter;

	declare attach_desc		        char (200);
	declare (bit_count, bc2)	        fixed bin (24);
	declare char_count		        fixed bin (21);
	declare code		        fixed bin (35);
	declare component_ptr	        ptr;
	declare curlen		        fixed bin;
	declare dir		        char (168);
	declare ename		        char (32);
	declare (forced_access, delete_forced_acle)
				        bit (1) aligned;
	declare (fcb_ptr, new_fcb_ptr)        ptr;
	declare increment		        fixed bin;
	declare iocb_name		        char (32);
	declare iocb_ptr		        ptr;
	declare max_length		        fixed bin (19);
	declare modes		        bit (36) aligned;
	declare (msf, target_msf)	        bit (1) aligned;
	declare (new_seg_ptr, old_seg_ptr)    ptr;
	declare saved_mode		        bit (36) aligned;
	declare source_dir		        char (168);
	declare source_name		        char (32);
	declare source_type		        char (32);
	declare target_dir		        char (168);
	declare target_name		        char (32);
	declare type		        fixed bin;
	declare word_count		        fixed bin (19);

	declare 1 sb		        aligned like status_branch;
	declare 1 sb2		        aligned like status_branch;
	declare 1 cei		        aligned like copy_error_info;
	declare 1 oi		        aligned like object_info;
	declare 1 one_acl		        aligned,
		2 version		        char (8) aligned,
		2 count		        fixed bin,
		2 entries		        (1) aligned like general_acl_entry;
	declare 1 one_del_acl	        aligned,
		2 version		        char (8) aligned,
		2 count		        fixed bin,
		2 entries		        (1) aligned like general_acl_entry;
	declare 1 info		        aligned like indx_info;



	declare (addbitno, addr, clock, divide, fixed, index, min, null, rtrim)
				        builtin,
	        (cleanup, no_write_permission)
				        condition;

	declare (
	        error_table_$inconsistent_msf,
	        error_table_$lower_ring,
	        error_table_$moderr,
	        error_table_$namedup,
	        error_table_$noentry,
	        error_table_$no_e_permission,
	        error_table_$no_s_permission,
	        error_table_$unimplemented_version,
	        error_table_$user_not_found
	        )			        fixed bin (35) external;

	declare add_acl_entries_entry	        entry (char (*), char (*), pointer, fixed bin (35)) variable;
	declare delete_acl_entries_entry      entry (char (*), char (*), pointer, fixed bin (35)) variable;
	declare get_group_id_	        entry returns (char (32));
	declare get_ring_		        entry returns (fixed bin (3));
	declare fs_util_$make_entry_for_type  entry (char (*), char (*), entry, fixed bin (35));
	declare hcs_$fs_get_path_name	        entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	declare hcs_$status_long	        entry (char (*), char (*), fixed bin, ptr, ptr, fixed bin (35));
	declare hcs_$status_minf	        entry (char (*), char (*), fixed bin, fixed bin, fixed bin (24),
				        fixed bin (35));
	declare hcs_$get_max_length_seg       entry (ptr, fixed bin (19), fixed bin (35));
	declare hcs_$get_max_length	        entry (char (*), char (*), fixed bin (19), fixed bin (35));
	declare hcs_$set_bc		        entry (char (*), char (*), fixed bin (24), fixed bin (35));
	declare hcs_$set_bc_seg	        entry (ptr, fixed bin (24), fixed bin (35));
	declare initiate_file_	        entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	declare initiate_file_$create	        entry (char (*), char (*), bit (*), ptr, bit (1) aligned, fixed bin (24),
				        fixed bin (35));
	declare hcs_$terminate_noname	        entry (ptr, fixed bin (35));
	declare hcs_$truncate_seg	        entry (ptr, fixed bin (19), fixed bin (35));
	declare msf_manager_$adjust	        entry (ptr, fixed bin, fixed bin (24), bit (3), fixed bin (35));
	declare msf_manager_$close	        entry (ptr);
	declare msf_manager_$msf_get_ptr      entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
	declare msf_manager_$get_ptr	        entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
	declare msf_manager_$open	        entry (char (*), char (*), ptr, fixed bin (35));
	declare object_info_$brief	        entry (ptr, fixed bin (24), ptr, fixed bin (35));
	declare pathname_		        entry (char (*), char (*)) returns (char (168));
	declare request_id_		        entry (fixed bin (71)) returns (char (19));
	declare requote_string_	        entry (char (*)) returns (char (*));
	declare sub_err_		        entry options (variable);
	declare vfile_status_	        entry (char (*), char (*), ptr, fixed bin (35));

%include iox_entries;
%include iox_modes;
%include file_system_operations;
%include suffix_info;


/* format: off */

%page; %include status_structures;
%page; %include copy_options;
%page; %include copy_flags;
%page; %include access_mode_values;
%page; %include sub_error_info;
%include sub_err_flags;
%page; %include condition_info_header;
%include copy_error_info;
%page; %include object_info;
%page; %include vfs_info;
%page; %include acl_structures;
/* format: on */


segment:
     entry (P_copy_options_ptr, P_status);

	source_type = FS_OBJECT_TYPE_SEGMENT;
	msf = "0"b;
	go to Entry_Common;

msf:
     entry (P_copy_options_ptr, P_status);
	source_type = FS_OBJECT_TYPE_MSF;
	msf = "1"b;

Entry_Common:
	copy_options_ptr = P_copy_options_ptr;
	if copy_options.version ^= COPY_OPTIONS_VERSION_1
	then call copy_error (error_table_$unimplemented_version, "0"b);

	if copy_options.extend & copy_options.update
	then call fatal (0, "contents", "0"b, "The extend and update switches may not both be specified.");

	source_dir = copy_options.source_dir;
	source_name = copy_options.source_name;
	target_dir = copy_options.target_dir;
	target_name = copy_options.target_name;


	fcb_ptr, new_fcb_ptr, new_seg_ptr, old_seg_ptr = null ();
	forced_access = "0"b;

	on cleanup call cleanup_copy ();
	on no_write_permission call copy_error (error_table_$moderr, "1"b);

	call hcs_$status_long (source_dir, source_name, 1, addr (sb), null (), code);
	if code ^= 0
	then if code ^= error_table_$no_s_permission
	     then call copy_error (code, "0"b);

	if msf
	then do;
		increment = 0;
		call msf_manager_$open (source_dir, source_name, fcb_ptr, code);
		if code ^= 0
		then call copy_error (code, "0"b);
	     end;

	if sb.ring_brackets (1) < get_ring_ ()
	then call copy_error (error_table_$lower_ring, "0"b);
	if sb.mode & R_ACCESS = ""b
	then call copy_error (error_table_$moderr, "0"b);

	if ^msf & ^copy_options.extend
	then do;
		if sb.bit_count = 0
		then bc2 = 0;
		else bc2 = divide (sb.bit_count - 1, (36 * 1024), 12, 0) + 1;
		if bc2 ^= sb.current_length
		then call warning (0, "contents", "0"b, "Bit count is inconsistent with current length for ^a.");
	     end;

/* caller is responsible for namedup */
	call hcs_$status_minf (target_dir, target_name, 1, type, bit_count, code);
	if copy_options.extend | copy_options.update
	then if code ^= 0
	     then call copy_error (code, "1"b);
	     else target_msf = (type = Directory & bit_count > 0);
	else if code ^= error_table_$noentry
	then call copy_error (error_table_$namedup, "1"b);
	else target_msf = "0"b;

/* initiate old segment */
	if msf
	then do;
		call msf_manager_$get_ptr (fcb_ptr, 0, "0"b, old_seg_ptr, bit_count, code);
		if code ^= 0
		then code = error_table_$inconsistent_msf;
	     end;
	else do;
		call initiate_file_ (source_dir, source_name, R_ACCESS, old_seg_ptr, (0), code);
		bit_count = sb.bit_count;
	     end;
	if code ^= 0
	then call copy_error (code, "0"b);

	if copy_options.extend
	then call extend;
	else if ^msf & ^target_msf
	then do;
		call initiate_file_$create (target_dir, target_name, REW_ACCESS, new_seg_ptr, ("0"b), (0), code);
						/* The only problem would be access */
		if copy_options.update
		then do;				/* truncate old contents */
			if copy_options.force & code ^= 0
			then call ensure_access ();	/* force access */
						/* does not affect code */

			if code ^= 0		/* the last call to initiate_file_ was not successful */
			then call initiate_file_ (target_dir, target_name, RW_ACCESS, new_seg_ptr, (0), code);

			if code = 0
			then call hcs_$truncate_seg (new_seg_ptr, 0, code);
			if code ^= 0
			then call copy_error (code, "1"b);
		     end;

		else if code = error_table_$no_e_permission
		then do;
			call initiate_file_ (target_dir, target_name, RW_ACCESS, new_seg_ptr, (0), code);
			if code ^= 0
			then call copy_error (code, "1"b);
		     end;

		if new_seg_ptr = null
		then call copy_error (code, "1"b);

		curlen = sb.current_length;
		word_count = curlen * 1024;

		call copy_a_segment ();

		call hcs_$terminate_noname (old_seg_ptr, (0));
		call hcs_$terminate_noname (new_seg_ptr, (0));
	     end;

	else do;					/* Create target */
		call msf_manager_$open (target_dir, target_name, new_fcb_ptr, code);
		if new_fcb_ptr = null ()
		then call copy_error (code, "1"b);

		if copy_options.update
		then do;				/* truncate the target */
			if copy_options.force
			then call ensure_access ();
			call msf_manager_$adjust (new_fcb_ptr, 0, 0, "010"b, code);
			if code ^= 0
			then call copy_error (code, "1"b);
		     end;

		call msf_manager_$msf_get_ptr (new_fcb_ptr, 0, "1"b, new_seg_ptr, 0, code);

		if code ^= 0
		then call copy_error (code, "1"b);

		do while ("1"b);
		     call hcs_$fs_get_path_name (old_seg_ptr, dir, 0, ename, (0));
		     call hcs_$status_long (dir, ename, 1, addr (sb), null (), code);
		     if code ^= 0
		     then call copy_error (code, "0"b);

		     curlen = fixed (sb.current_length, 12);
		     call hcs_$get_max_length (dir, ename, max_length, code);
		     if code ^= 0
		     then call copy_error (code, "0"b);

		     word_count = min (curlen * 1024, max_length);
		     call copy_a_segment ();

		     if ^msf
		     then goto SSF_UD_FINISH;		/* -update from ssf to msf */
		     increment = increment + 1;

		     call msf_manager_$get_ptr (fcb_ptr, increment, "0"b, old_seg_ptr, bit_count, code);
		     if code ^= 0
		     then goto MSF_FINISH;

		     call msf_manager_$get_ptr (new_fcb_ptr, increment, "1"b, new_seg_ptr, (0), code);
		     if code ^= 0
		     then call copy_error (code, "1"b);
		end;

MSF_FINISH:
		call hcs_$set_bc (target_dir, target_name, (increment), code);
		if code ^= 0
		then call copy_error (code, "1"b);

SSF_UD_FINISH:
		if msf
		then call msf_manager_$close (fcb_ptr);
		else call hcs_$terminate_noname (old_seg_ptr, (0));

		call msf_manager_$close (new_fcb_ptr);
	     end;

	P_status = 0;				/* we exit via subr on errors */
	if forced_access
	then call delete_access ();			/* in case we forcd it earlier */
	return;


copy_a_segment:
     procedure;

	declare segment		        (word_count) fixed bin (35) based;

	new_seg_ptr -> segment = old_seg_ptr -> segment;

	call hcs_$set_bc_seg (new_seg_ptr, bit_count, code);
	if code ^= 0
	then call copy_error (code, "1"b);

	return;
     end copy_a_segment;


extend:
     procedure;

declare  rest_of_seg	bit (extra_bits) based;
declare  extra_bits		fixed bin (24);

	if ^msf
	then do;
		call object_info_$brief (old_seg_ptr, (sb.bit_count), addr (oi), code);
		if code = 0
		then call unstruct ("0"b);

		if sb.bit_count = 0
		then bc2 = 0;
		else bc2 = divide (sb.bit_count - 1, (36 * 1024), 12, 0) + 1;
		if bc2 ^= sb.current_length
		then call fatal (0, "contents", "0"b,
			"Bit count is inconsistent with current length for ^a. Cannot copy it.");
	     end;

	info.info_version = vfs_version_1;
	call vfile_status_ (source_dir, source_name, addr (info), code);
	if code ^= 0
	then call copy_error (code, "0"b);
	if info.type ^= 1 | (info.type = 1 & uns_info.flags.header_present)
	then call unstruct ("0"b);

	if copy_options.force
	then call ensure_access ();

	call vfile_status_ (target_dir, target_name, addr (info), code);
	if code ^= 0
	then call copy_error (code, "1"b);
	if info.type ^= 1 | (info.type = 1 & uns_info.flags.header_present)
	then call unstruct ("1"b);

	if ^target_msf
	then do;
		call initiate_file_ (target_dir, target_name, RW_ACCESS, new_seg_ptr, (0), code);
		if code ^= 0
		then call copy_error (code, "1"b);

		call hcs_$status_long (target_dir, target_name, 1, addr (sb2), null (), code);
		if code ^= 0
		then call copy_error (code, "1"b);

		if sb2.bit_count = 0
		then bc2 = 0;
		else bc2 = divide (sb2.bit_count - 1, (36 * 1024), 12, 0) + 1;
		if bc2 ^= sb2.current_length
		then do;
		     extra_bits = sb2.current_length * 1024 * 36 - sb2.bit_count;
						/* bits past bit_count */
		     if index (addbitno (new_seg_ptr, sb2.bit_count) -> rest_of_seg, "1"b) > 0
		     then call fatal (0, "contents", "1"b,
			"Bit count is inconsistent with current length for ^s^a. Cannot append to it.");
		end;

		call object_info_$brief (new_seg_ptr, (sb2.bit_count), addr (oi), code);
		if code = 0
		then call unstruct ("1"b);

		if ^msf
		then do;				/* check for easy case */
			call hcs_$get_max_length_seg (new_seg_ptr, max_length, code);
			if code ^= 0
			then call copy_error (code, "1"b);

			if divide ((sb.bit_count + sb2.bit_count), 36, 19, 0) > max_length
			then goto USE_IOX;

			bit_count = sb.bit_count + sb2.bit_count;
			new_seg_ptr = addbitno (new_seg_ptr, sb2.bit_count);
						/* point to end of target */
			word_count = divide (sb.bit_count - 1, 36, 19, 0) + 1;

			call copy_a_segment ();

			call hcs_$terminate_noname (old_seg_ptr, (0));
			call hcs_$terminate_noname (new_seg_ptr, (0));

			return;
		     end;
	     end;

USE_IOX:
	iocb_ptr = null ();
	on cleanup call close_and_destroy_iocb ();

	if ^target_msf
	then call hcs_$terminate_noname (new_seg_ptr, (0));

	iocb_name = "copy_." || request_id_ (clock ());
	attach_desc = "vfile_ " || requote_string_ (rtrim (pathname_ (target_dir, target_name))) || " -extend";

	call iox_$attach_name (iocb_name, iocb_ptr, attach_desc, null (), code);
	if code ^= 0
	then call copy_error (code, "1"b);

	call iox_$open (iocb_ptr, Stream_output, "0"b, code);
	if code ^= 0
	then call copy_error (code, "1"b);

	if ^msf
	then do;
		char_count = divide (bit_count - 1, 9, 21, 0) + 1;
		call iox_$put_chars (iocb_ptr, old_seg_ptr, char_count, code);
		if code ^= 0
		then call copy_error (code, "1"b);
	     end;
	else do increment = 0 repeat increment + 1;
		call msf_manager_$get_ptr (fcb_ptr, increment, "0"b, component_ptr, bit_count, code);
		if component_ptr = null ()
		then goto DONE;

		char_count = divide (bit_count - 1, 9, 21, 0) + 1;
		call iox_$put_chars (iocb_ptr, component_ptr, char_count, code);
		if code ^= 0
		then call copy_error (code, "1"b);
	     end;

DONE:
	call close_and_destroy_iocb ();

	if msf
	then call msf_manager_$close (fcb_ptr);
	else call hcs_$terminate_noname (old_seg_ptr, (0));

	return;
%page;
unstruct:
     proc (errsw);

	declare errsw		        bit (1) aligned;

	call fatal (0, "contents", errsw, "Only unstructured files without headers may be used with -extend.");

     end unstruct;


close_and_destroy_iocb:
     proc ();

	if iocb_ptr = null ()
	then return;

	call iox_$close (iocb_ptr, (0));
	call iox_$detach_iocb (iocb_ptr, (0));
	call iox_$destroy_iocb (iocb_ptr, (0));

	return;
     end close_and_destroy_iocb;

     end extend;
%page;

copy_error:
     proc (status, switch);

	declare status		        fixed bin (35),
	        switch		        bit (1) aligned;

	cei.copy_options_ptr = copy_options_ptr;
	cei.operation = "contents";
	cei.target_err_switch = switch;

	do while ("1"b);
	     call sub_err_ (status, "copy_", ACTION_CANT_RESTART, addr (cei), (0), "^[^a^;^s^a^]", switch,
		pathname_ (target_dir, target_name), pathname_ (source_dir, source_name));

	end;

     end copy_error;

error:
     proc (status, op, switch, message);

	declare flags		        bit (36) aligned,
	        status		        fixed bin (35),
	        op		        char (*),
	        switch		        bit (1) aligned,
	        message		        char (*);

	flags = ACTION_CAN_RESTART;
	goto COMMON;

fatal:
     entry (status, op, switch, message);

	flags = ACTION_CANT_RESTART;
	goto COMMON;

warning:
     entry (status, op, switch, message);

	flags = ACTION_DEFAULT_RESTART;
COMMON:
	cei.copy_options_ptr = copy_options_ptr;
	cei.operation = op;
	cei.target_err_switch = switch;

	call sub_err_ (status, "copy_", flags, addr (cei), (0), message, pathname_ (source_dir, source_name),
	     pathname_ (target_dir, target_name));

	return;
     end error;
%page;
/**** This procedure may call an fs_util_ entry for an MSF with

      a segment for an operand. This is okay, since a segment
      will be corrcectly trreated as an SSF MSF. */

ensure_access:
     procedure;

	declare code		        fixed bin (35);
	declare get_user_access_modes_entry   entry (char (*), char (*), char (*), fixed bin, bit (36) aligned,
				        bit (36) aligned, fixed bin (35)) variable;
	declare list_acl_entry	        entry (char (*), char (*), char (*), pointer, pointer, fixed bin (35))
				        variable;

	call fs_util_$make_entry_for_type (source_type, FS_GET_USER_ACCESS_MODES, get_user_access_modes_entry, (0));

	call get_user_access_modes_entry (target_dir, target_name, "", -1, modes, ""b, code);
	if code ^= 0
	then call copy_error (code, "1"b);

	if (modes & RW_ACCESS) = RW_ACCESS
	then return;				/* Don't have to force access */

	call fs_util_$make_entry_for_type (source_type, FS_LIST_ACL, list_acl_entry, (0));
	call fs_util_$make_entry_for_type (source_type, FS_ADD_ACL_ENTRIES, add_acl_entries_entry, (0));
	call fs_util_$make_entry_for_type (source_type, FS_DELETE_ACL_ENTRIES, delete_acl_entries_entry, (0));


	one_acl.version = GENERAL_ACL_VERSION_1;
	one_acl.count = 1;
	one_acl.access_name = get_group_id_ ();
	one_acl.mode = RW_ACCESS;

	call list_acl_entry (target_dir, target_name, GENERAL_ACL_VERSION_1, null (), addr (one_acl), code);

	if code ^= 0
	then call copy_error (code, "1"b);
	saved_mode = one_acl.mode (1);
	delete_forced_acle = (one_acl.entries (1).status_code = error_table_$user_not_found);
						/* If there were no entry for user, delete the forced one
						   when we're done;else put the old one back */
	forced_access = "1"b;

	one_acl.mode (1) = one_acl.mode (1) | RW_ACCESS;

	call add_acl_entries_entry (target_dir, target_name, addr (one_acl), code);
	if code ^= 0
	then call copy_error (code, "1"b);

	return;

delete_access:
     entry;

	if ^forced_access				/* just in case the caller didn't check */
	then return;

	one_acl.mode (1) = saved_mode;
	if delete_forced_acle
	then do;
		one_del_acl = one_acl, by name;
		one_del_acl.version = GENERAL_DELETE_ACL_VERSION_1;
		call delete_acl_entries_entry (target_dir, target_name, addr (one_del_acl), (0));
	     end;
	else call add_acl_entries_entry (target_dir, target_name, addr (one_acl), (0));
	return;
     end ensure_access;

cleanup_copy:
     procedure;

	if forced_access
	then call delete_access ();			/* in case we forced it earlier */

	if ^msf					/* MSF pointers are terminated by msf_manager_$close */
	then if old_seg_ptr ^= null ()
	     then call hcs_$terminate_noname (old_seg_ptr, (0));

	if ^target_msf
	then if new_seg_ptr ^= null ()
	     then call hcs_$terminate_noname (new_seg_ptr, (0));


	if fcb_ptr ^= null ()
	then call msf_manager_$close (fcb_ptr);
	if new_fcb_ptr ^= null ()
	then call msf_manager_$close (new_fcb_ptr);

	return;
     end cleanup_copy;

     end fs_copy_util_;
