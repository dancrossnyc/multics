//  Routines to manipulate strings for BCPL programs.
//  Last modified on 06/06/74 at 15:36:39 by R F Mabee.
//  Reinstalled with no material change in June 1974 by R F Mabee.
//  Modifications for 6180 conversion installed in June 1973 by R F Mabee.
//  First installed as bcpl_lib_ on 645 Multics in September 1971 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"

manifest
     $(	FirstCharsMask = true rshift CountSize	  //  Mask for characters in first word of string.
	BlankWord = '*s*s*s*s'
     $)

let Length (String) = String!0 rshift (WordSize - CountSize)	//  Return length in characters.
and SetLength (String, Len) = valof			//  Fix length of BCPL string.
     $(	String!0 := String!0 & FirstCharsMask | Len lshift (WordSize - CountSize)
	let Nbits = Len * ByteSize + CountSize
	let Nwords = (Nbits + WordSize - 1) / WordSize
	String!(Nwords - 1) := String!(Nwords - 1) & not (true rshift ((Nbits - 1) rem WordSize + 1))
	resultis String
     $)
and LengthInWords (String) = 			//  Return length of string in words.
	(Length (String) * ByteSize + CountSize + WordSize - 1) / WordSize

let EqualString (s, t) = valof		//  Compare two strings.  Returns true if identical, otherwise false.
     $(	if s = t resultis true		//  Easy case.
	for i = 0 to LengthInWords (s) - 1 unless s!i = t!i resultis false
	resultis true
     $)
and CompareStrings (s, t) = valof	//  Compare two strings.  Returns 0 for s = t, 1 or 2 for s > t, -1 or -2 for s < t.
				//  1 or -1 means difference is only in case bits, 2 or -2 other difference.
     $(	if EqualString (s, t) resultis 0
	let a, b = Length (s), Length (t)
	let Case = 0
	for i = 1 to MinI (a, b) do
	     $(	let c, d = Subch (s, i), Subch (t, i)
		if c = d loop
		if 'a' le c le 'z' do c := c - 'a' + 'A'
		if 'a' le d le 'z' do d := d - 'a' + 'A'
		unless c = d resultis c < d -> -2, 2		//  A significant difference.
		if Case = 0 do Case := Subch (s, i) < Subch (t, i) -> -1, 1
	     $)
	unless a = b resultis a < b -> -2, 2
	resultis Case
     $)

let CopyString (String, Space) be			//  Copy a BCPL string.
	Move (Space, String, LengthInWords (String))

let StringToChar (s) = valof
     $(	let C = 0
	for i = 1 to Length (s, i) do C := C lshift ByteSize logor Subch (s, i)
	resultis C
     $)
and CharToString (Ch, Space) = valof
     $(	for Len = ByteSize to WordSize by ByteSize if (Ch rshift Len) = 0 do		//  Skip unused bytes.
	     $(	MoveBits (Space, CountSize, lv Ch, WordSize - Len, Len)
		resultis SetLength (Space, Len / ByteSize)
	     $)
     $)

let Concatenate (Space, MaxLen, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z) = valof
						//  Concatenate any number of BCPL strings.
     $(	let n = Length (a)
	unless a = Space do CopyString (a, Space)	//  Special-case first string for Concatenate (v, ., v, ...).
	for i = 1 to NumbArgs () - 3 do
	     $(	let p = (lv a)!i			//  p is i'th string arg.
		let l = Length (p)
		if n + l ge MaxLen do l := MaxLen - n
		MoveBits (Space, n * ByteSize + CountSize, p, CountSize, l * ByteSize)
		n := n + l
	     $)
	resultis SetLength (Space, n)
     $)

let Substr (Space, String, First, Count) = valof		//  Like PL/I substr, but requires space for result.
     $(	let l = Length (String) - First + 1		//  Max or default length of substring.
	if NumbArgs () < 4 | Count > l do Count := l
	if Count < 0 do Count := 0
	MoveBits (Space, CountSize, String, (First - 1) * ByteSize + CountSize, Count * ByteSize)
	resultis SetLength (Space, Count)
     $)

let IndexCh (String, Ch) =				//  Return i such that i'th character of String is Ch.
	ScanChar (String, CountSize / ByteSize, Length (String), Ch) + 1
let Index (String, Pattern) = valof			//  Just like the PL/I index built-in function.
     $(	let l = Length (Pattern)
	if l = 0 resultis 0				//  Define weird case.
	let Ch = Subch (Pattern, 1)			//  First character to look for.
	let n = Length (String) - l + 1		//  Number of characters worth looking at.
	let b = 0
	while b < n do
	     $(	let p = ScanChar (String, b + CountSize / ByteSize, n - b, Ch)	//  Find next instance of Ch.
		if p < 0 break			//  Not there.
		b := b + p + 1
		for i = 2 to l do			//  Check for rest of string.
			unless Subch (String, b + i - 1) = Subch (Pattern, i) goto Nomatch
		resultis b
	Nomatch:
	     $)
	resultis 0
     $)

let Pad (Space, From, Len) be			//  Pad a string with blanks.
     $(	let Fp, Lp = From - From rem 4, Len - Len rem 4
	let Blanks = BlankWord
	unless Fp = From do
	     $(	Fp := Fp + 4
		MoveBits (Space, From * ByteSize, lv Blanks, 0, (MinI (Fp, Len) - From) * ByteSize)
	     $)
	while Fp < Lp do
	     $(	Space!(Fp / 4) := BlankWord
		Fp := Fp + 4
	     $)
	unless Lp = Len | Fp > Lp do MoveBits (Space, Lp * ByteSize, lv Blanks, 0, (Len - Lp) * ByteSize)
     $)
and LastNonBlank (Space, Len) = valof
     $(	let Lp = Len - Len rem 4
	let c = 0
	while Len > Lp do
	     $(	Len := Len - 1
		MoveBits (lv c, WordSize - ByteSize, Space, Len * ByteSize, ByteSize)		//  Grab last character.
		unless c = '*s' resultis Len + 1
	     $)
	while Len > 0 do
	     $(	unless Space!(Len / 4 - 1) = BlankWord break
		Len := Len - 4
	     $)
	while Len > 0 do
	     $(	Len := Len - 1
		MoveBits (lv c, WordSize - ByteSize, Space, Len * ByteSize, ByteSize)
		unless c = '*s' resultis Len + 1
	     $)
	resultis Len
     $)

let MakePl1String (BcplString, Space, Len) = valof	//  Make a PL/I-style aligned string padded to length.
     $(	let l = Length (BcplString)
	if l > Len do l := Len
	MoveBits (Space, 0, BcplString, CountSize, l * ByteSize)
	if Len > l do Pad (Space, l, Len)
	resultis Space
     $)
let MakeBcplString (Pl1String, Len, Space) = valof	//  Convert aligned PL/I string back to BCPL format.
     $(	Len := LastNonBlank (Pl1String, Len)		//  Strip off trailing blanks.
	MoveBits (Space, CountSize, Pl1String, 0, Len * ByteSize)
	resultis SetLength (Space, Len)
     $)

