//  Interface to Multics command level features.
//  Last modified on 06/03/74 at 12:02:01 by R F Mabee.
//  Reinstalled with no material change in June 1974, R F Mabee.
//  Modifications for 6180 conversion installed in May 1973 by R F Mabee.
//  First installed in September 1971 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"

external
     $(	ComErr = "com_err_"			//  call com_err_ (error code, command name, comment, arg1, arg2)
	ActFncErr = "active_fnc_err_"		//  call active_fnc_err_ (error code, command name, comment)

	ErrTableNoArg = "error_table_$noarg"	//  dcl error_table_$noarg bit 36 external static
	ErrTableBadOpt = "error_table_$badopt"	//  dcl error_table_$badopt bit 36 external static
     $)
global
     $(	Frame : 0; ConditionFlag : 16
	ArgITS : 26			//  ITS pointer to Multics argument list is always stored in 26 and 27.
	ConditionChain : 30; ConditionMask : 31

	MyConditionList : 41
     $)

let Pl1NumbArgs () = rv BCPLaddr (lv ArgITS) rshift 19	//  Return number of arguments passed by PL/I caller.
and Pl1ArgPtr (n) = BCPLaddr (BCPLaddr (lv ArgITS) + n * 2) //  Return pointer to argument passed by PL/I caller.
and Pl1Descriptor (n) = valof				//  Return descriptor image provided by PL/I caller.
     $(	let Ap = BCPLaddr (lv ArgITS)
	let t = Ap!1 rshift 18
	if t = 0 resultis 0
	if (Ap!0 & Right) = 8 do t := t + 2
	let D = rv BCPLaddr (Ap + t + n * 2)
	if D < 0 resultis D		//  Done if was new format.
//  Map old format descriptor into the new format.
	let Type, Dims = D rshift 21, 0
	let NewType = valof switchon Type into
	     $(	case 1 to 16:	resultis Type
		case 17 to 32:	Dims := 1		//  Array, guess at order.
				resultis Type - 16
		case 523:		Dims := 1
		case 514:		resultis 17	//  Structure.
		case 524:		Dims := 1
		case 518:		resultis 18	//  Area.
		case 525:		Dims := 1
		case 519:		resultis 19	//  Bit string.
		case 527:		Dims := 1
		case 521:		resultis 20	//  Varying bit string.
		case 526:		Dims := 1
		case 520:		resultis 21	//  Character string.
		case 528:		Dims := 1
		case 522:		resultis 22	//  Varying character string.
		default:		resultis 0
	     $)
	resultis 1 lshift 35 | NewType lshift 29 | Dims lshift 24 | D & Right
     $)

let Pl1ArgString (n, Space, MaxLen) = valof		//  Make copy of n'th command arg in BCPL string form.
		//  Will work for other PL/I to BCPL calls passing strings, but will not strip trailing blanks.
     $(	if NumbArgs () < 3 do MaxLen := 511
	let P = Pl1ArgPtr (n)		//  Contains bit offset also.
	and D = Pl1Descriptor (n) & $877777777
	if D > MaxLen do D := MaxLen
	MoveBits (Space, CountSize, P, 0, D * ByteSize)
	resultis SetLength (Space, D)			//  Return ptr to newly built BCPL string.
     $)
let Pl1ReturnString (BcplString) be			//  Return a string value. For active function commands.
     $(	let n = Pl1NumbArgs ()			//  Number of args.
	if n = 0 goto Err
	let q = Pl1ArgPtr (n)			//  q -> varying string.
	let d = Pl1Descriptor (n)			//  Descriptor.
	unless (d rshift 29) = 64 + 22 goto Err		//  Not a varying character string!
	d := d & $877777777
	let l = Length (BcplString)
	if l > d do l := d
	MakePl1String (BcplString, q, d)		//  Make aligned padded string like non-varying.
	q!-1 := l					//  Set character count field of varying string.
	return
   Err:	let v, w = vec 20, vec 20
	MakePl1String (ProgramID, v, 32)		//  Align args to ActFncErr. Coding around a Multics bug.
	MakePl1String (BcplString, w, 80)
	call ActFncErr (ErrTableNoArg, v char 32, w char 80)	//  Puts out standard error messages (two of them).
     $)

let SetupConditionList () be		//  Initialize stack header for condition mechanism.
     $(	if (ConditionFlag & $8100) = 0 do		//  Set to zero when frame is created. signal_ uses this flag
	     $(	ConditionChain := 0		//  to avoid trying to follow an uninitialized chain.
		ConditionMask := 0
		MyConditionList := 0
		ConditionFlag := ConditionFlag | $8100
	     $)
     $)
and SetHandler (Name, Routine, Space) be	//  Establish handler for a PL/I condition.
     $(	SetupConditionList ()
	MakePl1String (Name, Space + 8, 32)
	ITS (Space + 8, Space)
	ITS (MainCondition, Space + 2)
	Space!4 := Length (Name)
	Space!5 := ConditionChain
	Space!6 := Routine
	Space!7 := MyConditionList
	ConditionChain, MyConditionList := (Space - lv Frame) lshift Left, Space
     $)
and RevertHandler (Name) be		//  Remove handler for a PL/I condition.
     $(	SetupConditionList ()
	let Block = FindConditionBlock (Name)
	unless Block = 0 test Block = MyConditionList
	then ConditionChain, MyConditionList := Block!5, Block!7
	or   $(	let t = MyConditionList
		until t = 0 do
		     $(	if t!7 = Block break
			t := t!7
		     $)
		unless t = 0 do t!5, t!7 := Block!5, Block!7
	     $)
	if ConditionChain = 0 do ConditionFlag := ConditionFlag & not $8100	//  Reset flag if no handler info.
     $)
and MainCondition () be main		//  PL/I-callable routine to be invoked for any condition.
     $(	let Name = vec 32 / 4
	let Ap = BCPLaddr (lv ArgITS)
	let Nargs = Ap!0 rshift 19
	let Sp = BCPLaddr (Ap + Nargs * 2 + 2)
	Pl1ArgString (Nargs = 1 -> 1, 2, Name, 32)
	for i = 32 to 399 do (lv Frame)!i := Sp!i	//  Retrieve old global values.
	let Block = FindConditionBlock (Name)
	if Block = 0 do Block := FindConditionBlock ("unclaimed_signal")
	unless Block = 0 do (Block!6) (Name)
     $)
and FindConditionBlock (Name) = valof		//  Get the condition block for a particular condition.
     $(	let v = vec 32 / 4
	MakePl1String (Name, v, 32)
	let t = MyConditionList
	until t = 0 do
	     $(	for i = 0 to 32 / 4 - 1 unless v!i = t!(i + 8) goto NoMatch
		resultis t
	NoMatch:
		t := t!7
	     $)
	resultis 0
     $)

let Complain (a, b, c, d, e, f) be		//  Produce standard Multics error message and abort command.
      $(	let n = NumbArgs ()
	for i = n + 1 to 6 do (lv a)!(i - 1) := ""		//  Fill out arglist.
	call ComErr (lv Errcode bit 36, ProgramID string, a string, b string, c string, d string, e string, f string)
	SetupConditionList ()
	let Block = nil		//  Invoke cleanup handler for this command if there is one.
	Block := FindConditionBlock ("cleanup")
	unless Block = 0 do (Block!6) ()
	finish
     $)

//  Subroutine to standardize command argument processing; can be used on any option list because
//  GetNextArg is called for each option processed.  See GetNextCommandArg.

//  Caller prepares three lists of length ListSize:
//	NamesList is a list of options as BCPL strings.  Omit '-' and 'no_' prefixes.
//	FlagsList is a list of flag words for option in corresponding position in above list.  Flags:
//		OptNegatable	Option can be specified with 'no_' or '^' prefix to complement meaning.
//		OptNegate		Complement sense of resulting boolean value.
//		OptGetNext	Next option is a value that this one uses.
//		OptConvert	Convert string value to number value (implies OptGetNext).
//		OptCallOut	Corresponding element of PointersList is a subroutine to be called to process value.
//	PointersList elements are pointers to cells where value of option is to be stored, unless OptCallOut flag is set.

//  PutName is called to process any argument that isn't an option (doesn't start with '-').
//  To treat such arguments as options, supply PutName equal to zero.
//  All errors are reported immediately using Complain, which aborts the program.

let OptionParse (GetNextArg, ListSize, NamesList, PointersList, FlagsList, PutName) be
     $(	let Arg, Arg2 = vec 128, vec 128
	while GetNextArg (Arg) do
	     $(	let i, B, w = 1, true, nil
		test Subch (Arg, 1) = '-'
		then i := i + 1		//  Skip over hyphen in option.
		or unless PutName = 0 do	//  If names are allowed, this is a name.
		     $(	PutName (Arg)
			loop
		     $)
	Search:	w := i = 1 -> Arg, Substr (Arg2, Arg, i)	//  w is rest-of-string after prefix already parsed.

		let j = 0
		     $(	if -1 le CompareStrings (w, NamesList!j) le 1 goto Match	//  Equal or case-bit different.
			j := j + 1
		     $)	repeatwhile j < ListSize

		//  Failed on search - see if there is a way to fix it up.
		switchon Subch (Arg, i) into		//  Dispatch on first character.
		     $(	case '^':	B := not B	//  Initial not sign means complement option.
				i := i + 1
				goto Search

			case 'n': case 'N':
				let c = Subch (Arg, i + 1)
				unless c = 'o' | c = 'O' endcase
				B := not B	//  Initial 'no' also means complement.
				i := i + 2
				if Subch (Arg, i) = '_' do i := i + 1	//  Also allow 'no_'.
				goto Search

			case 'o': case 'O':
				let c, d = Subch (Arg, i + 1), Subch (Arg, i + 2)
				unless c = 'l' | c = 'L' endcase
				unless d = 'd' | d = 'D' endcase
				B := not B	//  Initial 'old' also means complement.
				Concatenate (Arg, 511, "new", Substr (Arg2, Arg, i + 3))
				i := 1		//  Replace 'old' with 'new' and try again.
				goto Search

			default:	endcase
		     $)
		//  Can't figure it out, complain.
		Errcode := rv ErrTableBadOpt
		Complain (Arg)

	Match:	let T, P = FlagsList!j, PointersList!j
		if (T & OptNegatable) = 0 & not B do		//  Weren't supposed to have 'no' prefix.
		     $(	Errcode := rv ErrTableBadOpt
			Complain (Arg)
		     $)
		if (T & OptNegate) ne 0 do B := not B
		if (T & (OptGetNext | OptConvert)) ne 0 do	//  Need next argument.
		     $(	unless GetNextArg (Arg2) do
			     $(	Errcode := rv ErrTableNoArg
				Complain (Arg)
			     $)
			if (T & OptConvert) ne 0 do		//  Want only number.
			     $(	B := ConvertStoN (Arg2, 10)
				unless Errcode = 0 do Complain (Arg2)
			     $)
		     $)
		if (T & OptCallOut) ne 0 do
		     $(	P (Arg2, B, Arg, j)	//  Pass whatever might come in handy.
			loop
		     $)
		rv P := B
	     $)
     $)

and GetNextCommandArg (Arg) = valof		//  This routine is meant for ordinary use as GetNextArg in OptionParse.
     $(	if ArgIndex > Pl1NumbArgs () resultis false
	Pl1ArgString (ArgIndex, Arg, 511)
	ArgIndex := ArgIndex + 1
	resultis true
     $)

and ConcatenateArgs (First, Space, MaxLen) = valof	//  Make one string out of all command args from First on.
     $(	let Nargs = Pl1NumbArgs ()
	let Arg = vec 128
	test Nargs < First
	then SetLength (Space, 0)
	or   $(	Pl1ArgString (First, Space, MaxLen)
		for i = First + 1 to Nargs do Concatenate (Space, MaxLen, Space, " ", Pl1ArgString (i, Arg, 511))
	     $)
	resultis Space
     $)
