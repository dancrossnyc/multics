//  BCPL stream I/O routines.
//  Last modified on 06/03/74 at 11:50:07 by R F Mabee.
//  Reinstalled with no material change in June 1974, R F Mabee.
//  Modified for 6180 bootstrap and installed in June 1973, R F Mabee.
//  First installed in September 1971 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"

external
     $(	GetWdir = "get_wdir_"		//  call get_wdir_ (return working dir name)
	FindIncludeFile = "find_include_file_$initiate_count" // call find_include_file_$initiate_count (caller name,
					//  ref ptr, search name, return bit count, return ptr, return code)

	MsfManagerOpen = "msf_manager_$open"	// call msf_manager_$open (dir name, entry name, return fcb ptr,
					//	return code)
	MsfManagerGetPtr = "msf_manager_$get_ptr" // call msf_manager_$get_ptr (fcb ptr, component, create_sw,
					//	return segment pointer, return bit count, return code)
	MsfManagerAdjust = "msf_manager_$adjust" // call msf_manager_$adjust (fcb ptr, component, bit count,
					//	flags, return code)
	MsfManagerClose = "msf_manager_$close"	//  call msf_manager_$close (fcb ptr)

	ReadPtr = "ios_$read_ptr"		//  call ios_$read_ptr (buffer ptr, buffer length, return line length)
	WritePtr = "ios_$write_ptr"		//  call ios_$write_ptr (buffer ptr, character offset, length)
	IosRead = "ios_$read"		//  call ios_$read (stream name, buffer ptr, character offset,
					//	buffer length, return line length, return status bits)
	IosWrite = "ios_$write"		//  call ios_$write (stream name, buffer ptr, character offset,
					//	length, return length, return status bits)
	IosResetread = "ios_$resetread"	//  call ios_$resetread (stream name, return status bits)
	GetAtEntry = "get_at_entry_"		//  call get_at_entry_ (stream name, return type,
					//	return ioname 2, return mode, return code)

	SegKnown = "error_table_$segknown"	//  declare error_table_$segknown fixed binary external static;
	ZeroLenSeg = "error_table_$zero_length_seg" // declare error_table_$zero_length_seg fixed binary external static;
	DirSeg = "error_table_$dirseg"	//  declare error_table_$dirseg fixed binary external static;
	NoEntry = "error_table_$noentry"	//  declare error_table_$noentry fixed binary external static;

	MaxSegSize = "sys_info$max_seg_size"	//  declare sys_info$max_seg_size fixed binary external static;
     $)
static
    $(	In = 0; Out = 0			//  Saved console streams.
	Freelist = 0			//  Chain of ten-word free blocks.
	Bufferlist = 0			//  Chain of free stream buffers
	Zero = 0; One = 1; Eleven = 11	//  Constants for Multics calls.
     $)
manifest
     $(	RwaBits = Read | Write | Append
	TypeBits = Pointer | Console | StreamName | PathName | EntryName | SearchName
	MsfBits = MultiSegmentFile
     $)


let Open (Options, Name, Length, Delimiter) = valof	//  Return pointer to ten-word block representing a stream.
		//  Options consists of one of
		//	{ Read Write Append }
		//  plus one of
		//	{ Console StreamName Pointer PathName EntryName SearchName }
		//  plus possibly MultiSegmentFile.
		//
		//  These are manifest constants defined in head.bcpl.  There are no defined defaults.  Read and
		//  Write are self-explanatory.  A stream can not be used for both input and output.  Append is
		//  similar to Write except that output is appended to that which already exists rather than
		//  replacing it.  This makes no difference for Console or StreamName output.
		//
		//  Console implies Multics stream I/O on the streams user_input and user_output.
		//  StreamName specifies Multics stream I/O on the stream Name, which is assumed to be already
		//  attached.  Length is the length of the buffer to be used; default is 200 characters.
		//
		//  Pointer indicates that "Name" is actually a pointer to a segment or vector to be read
		//  from or written into.  With Read and Write Length is the maximum length; default is a full
		//  segment.  With Append Length is the current length; default is 0.
		//
		//  PathName indicates that Name is a relative path name to the segment to be read or written.
		//  With Write Length is the maximum length; default is a full segment.  With Read or Append
		//  Length is the current length; default is the bit count / 9.
		//
		//  EntryName is similar to PathName except that Name is not expanded; the named segment is
		//  found or created (for Write and Append) in the current working directory.
		//
		//  SearchName indicates that Name is the entry name of a segment to be located by a standard
		//  search through several directories; the segment must exist.  "Length" is then actually a
		//  stream which provides a "referencing dir" for the search rules.
		//
		//  MultiSegmentFile applies only with PathName, EntryName, or SearchName; it indicates that the file
		//  may already be an MSF or may grow to be one.
		//
		//  Delimiter applies only with StreamName and Write or Append.
		//  It is the output delimiter character (the default is '*n').
		//  If it is zero the buffer is written out only when it is full or Writeout is called.
		//  
		//  The format of the stream block:
		//	Nextch, Maxch, Bufflen, Options, Refill, Name, Bufferptr, MSFcount, MSFfcb
		//
		//  Nextch is the offset within the buffer to the next character position.
		//
		//  Maxch is the length of the buffer for Write and Append.  For Read it is the length of the
		//  current line and the buffer length is stored in Bufflen.
		//  For Write and Append Bufflen is used for the delimiter which, if non-zero, is the
		//  character which causes the current buffer to be written out.  It is set to '*n' for Console
		//  and StreamName, otherwise zero.
		//
		//  Options is a copy of the argument to the call to Open which created this stream.
		//
		//  Refill is the address of a routine to be called when the buffer must be written out or
		//  refilled.  If it is zero, the buffer cannot be written out or refilled.
		//
		//  Name is a copy of the argument to Open, except for Console, when it is either "user_input"
		//  or "user_output".
		//
		//  Bufferptr is a pointer to the buffer, or for Pointer, PathName, EntryName, and SearchName it
		//  points directly to the segment referenced by the stream.
		//
		//  MSFcount is the index of the current segment in an MSF.
		//
		//  MSFfcb is the File Control Block for msf_manager_.


     $(	let Rwa, Type, Msf = Options & RwaBits, Options & TypeBits, Options & MsfBits
	Errcode := 0
	if Type = Console test Rwa = Read	//  Special case the two most common streams. All console input
	then $(	if In = 0 do		//  goes through the same stream block, and similarly for output.
		     $(	let f = Allocate (10)
			f!2, f!3, f!4 := 400 * 4, Console + Read, ConsoleRead
			f!5, f!6, f!7, f!8 := "user_input", Allocate (400), 0, 0
			In := f
		     $)
		In!0, In!1 := 0, 0		//  Throw away partial line left from previous use.
		resultis In
	     $)
	or   $(	if Out = 0 do
		     $(	let f = Allocate (10)
			f!1, f!2, f!3, f!4 := 100 * 4, '*n', Console + Write, ConsoleWrite
			f!5, f!6, f!7, f!8 := "user_output", Allocate (100), 0, 0
			Out := f
		     $)
		Out!0 := 0		//  Throw away partial line.
		resultis Out
	     $)
	let f = Freelist			//  Chain of free stream blocks.
	test f = 0
	then f := Allocate (10)
	or Freelist := f!0			//  Pop chain.
	let Buffer = nil
	let Nargs = NumbArgs ()
	f!0, f!1, f!2, f!3, f!4, f!5, f!6, f!7, f!8 := 0, 0, 0, Options, 0, Name, Null, 0, 0
	test Type = StreamName
	then $(	if Nargs < 3 | Length le 0 do Length := 200
		let p, q = Bufferlist, lv Bufferlist
		until p = 0 do			//  Look for free buffer of exactly the right length.
		     $(	if p!1 = Length do		//  User probably keeps reusing same length,
			     $(	Buffer := p	//  so we never fragment these blocks.
				q!0 := p!0
				goto Gotbuf
			     $)
			q := p
			p := p!0
		     $)
		Buffer := Allocate (Length / 4 + 10)	//  Allow space in Buffer for copy of Name.
	Gotbuf:	for i = 0 to 8 do Buffer!i := Name!i	//  Make copy so caller can release his copy.
		f!5 := Buffer
		Buffer := Buffer + 9
		if Nargs < 4 do Delimiter := '*n'
		test Rwa = Read
		then f!2, f!4 := Length, StreamRead
		or f!1, f!2, f!4 := Length, Delimiter, StreamWrite
		let x, y, z = nil, nil, nil
		call GetAtEntry (Name string, lv x char 0, lv y char 0, lv z char 0, lv Errcode bit 36)
					//  Verify that attachment exists (user may check Errcode.)
	     $)
		//  Otherwise it must be file I/O in some form.
	or   $(	test Type = Pointer
		then $(	Buffer := Name
			if Nargs < 3 do Length := rv MaxSegSize * 4
		     $)
		or   $(	let Dir, Ent, Path = vec 42, vec 8, vec 42
			let Rlen = 0
			unless Msf = 0 do f!4 := MsfNextSeg
			test Type = PathName
			then ExpandPathname (Name, Path)
			or test Type = EntryName
			then $(	MakePl1String (Name, Ent, 32)
				call GetWdir (Dir char 168)
				JoinPathname (Dir, Ent, Path)
			     $)
			//  Otherwise it must be SearchName.
			or   $(	let ReferencingSeg = Nargs < 3 | Length = 0 -> Null, Length!6
				Nargs := 2		//  Since Length is really something else.
				let v, w = vec 2, vec 2
				call FindIncludeFile (ProgramID string, ITS (ReferencingSeg, v) pointer,
							Name string, lv Rlen, w pointer, lv Errcode bit 36)
				if Errcode = 0 do GetPathname (BCPLaddr (w), Path)
			     $)
			unless Errcode = 0 resultis f
			Buffer := FindSegment (Path, lv Rlen)
			if Errcode ne 0 then if Msf ne 0 & Errcode = rv DirSeg do
			     $(	SplitPathname (Path, Dir, Ent)
				MsfOpen (f, Path)
				unless Errcode = 0 resultis f
				Buffer := MsfGetseg (f, Rwa = Append -> Rlen - 1, 0, lv Rlen)
			     $)
			test Rwa = Read
			then if Rlen = 0 & Errcode = 0 do Errcode := rv ZeroLenSeg
			or test Buffer = Null
			   then Buffer := MakeSegment (Path)		//  Create output segment if necessary.
			   or if Rwa = Write do SetBitCount (Buffer, 0)	//  Truncate segment for faster writing.

			Rlen := Rlen / 9		//  Character count (from Findseg).
			if Nargs < 3 do Length := Rwa = Write -> rv MaxSegSize * 4, Rlen
			if Rwa = Append & Msf ne 0 & Length ge rv MaxSegSize * 4 do
			     $(	if f!8 = 0 do MsfOpen (f, Path)
				unless Errcode = 0 resultis f
				Buffer := MsfGetseg (f, Length / (rv MaxSegSize * 4), lv Rlen)
				Length := Length rem (rv MaxSegSize * 4)
			     $)
		     $)
		test Rwa = Append
		then f!0, f!1 := Length, rv MaxSegSize * 4
		or f!1 := Length
	     $)
	f!6 := Buffer
	resultis f
     $)

and ConsoleRead (f) be			//  Routine to refill buffer from user_input.
     $(	unless Out = 0 | Out!0 = 0 do ConsoleWrite (Out)	//  Write out partial output line before waiting for input.
	let w = vec 2
	call ReadPtr (ITS (f!6, w) pointer, lv f!2, lv f!1)
	f!0 := 0
     $)
and ConsoleWrite (f) be			//  Routine to write out buffer to user_output.
     $(	let w = vec 2
	call WritePtr (ITS (f!6, w) pointer, lv Zero, lv f!0)
	f!0 := 0
     $)
and StreamRead (f) be			//  Routine to refill buffer from arbitrary Multics stream.
     $(	f!1 := 0
	let w = vec 2
	call IosRead (f!5 string, ITS (f!6, w) pointer, lv Zero, lv f!2, lv f!1, lv Errcode bit 72)
	if f!1 = 0 do f!1, rv (f!6) := 1, Endofstreamch lshift 27	//  Stream not attached or at end of file.
	f!0 := 0
     $)
and StreamWrite (f) be			//  Routine to write buffer to Multics stream.
     $(	let w, x = vec 2, nil
	call IosWrite (f!5 string, ITS (f!6, w) pointer, lv Zero, lv f!0, lv x, lv Errcode bit 72)
	f!0 := 0
     $)
and MsfNextSeg (f) be		//  Routine to get next segment of multi-segment file stream.
     $(	let Rwa = f!3 & RwaBits
	let p, l = f!6, 0
	if f!8 = 0 do
	     $(	if Rwa = Read goto NoGood
		let Path = vec 50
		GetPathname (p, Path)
		unless Errcode = 0 goto NoGood
		MsfOpen (f, Path)
		unless Errcode = 0 goto NoGood
	     $)
	unless Rwa = Read do SetBitCount (p, f!0 * 9)
	f!7 := f!7 + 1
	p := MsfGetseg (f, f!7, lv l)
	unless Errcode = 0 goto NoGood
	f!0 := 0
	test Rwa = Read
	then f!1 := l / 9
	or SetBitCount (p, 0)
	return
  NoGood:	f!4 := 0
     $)
and MsfOpen (f, Path) be		//  Make a stream into a multi-segment file.
     $(	let v, Dir, Ent = vec 2, vec 48, vec 8
	SplitPathname (Path, Dir, Ent)
	call MsfManagerOpen (Dir char 168, Ent char 32, v pointer, lv Errcode bit 36)
	if Errcode ne 0 then if Errcode = rv NoEntry & (f!3 & RwaBits) ne Read do Errcode := 0
	f!8 := BCPLaddr (v)
     $)
and MsfGetseg (f, n, LvL) = valof		//  Get pointer to n'th segment of a multi-segment file.
     $(	let v, w = vec 2, vec 2
	let Createsw = (f!3 & RwaBits) = Read -> 0, 1 lshift 35
	call MsfManagerGetPtr (ITS (f!8, v) pointer, lv n, lv Createsw bit 1, w pointer, LvL, lv Errcode bit 36)
	if Errcode ne 0 then if Errcode = rv SegKnown do Errcode := 0
		let p = BCPLaddr (w)
	f!6, f!7 := p, n
	resultis p
     $)

let Writeout (f) be				//  Write out contents of buffer.
	unless f!0 = 0 | f!4 = 0 do (f!4) (f)
and Flushinput (f) be			//  Discard unprocessed contents of buffer & delete read ahead.
     $(	let Rwa, Type = f!3 & RwaBits, f!3 & TypeBits
	if Rwa = Read & (Type = Console | Type = StreamName) do
	     $(	call IosResetread (f!5 string, lv Errcode bit 72)
		f!0, f!1 := 0, 0
	     $)
     $)
and ResetStream (f, Offset) be		//  Back up current working point in stream.
     $(	if NumbArgs () = 1 do Offset := 0
	Errcode := 0
	let Type, Rwa, p = f!3 & TypeBits, f!3 & RwaBits, f!6
	if Type = PathName | Type = EntryName | Type = SearchName do
	     $(		let l, n = nil, Offset / (rv MaxSegSize * 4)
		Offset := Offset rem (rv MaxSegSize * 4)
		unless f!8 = 0 | n = f!7 do
		     $(	p := MsfGetseg (f, n, lv l)
			if Rwa = Read do f!1 := l / 9
		     $)
		unless Rwa = Read do SetBitCount (p, (Offset + 3) * ByteSize)
	     $)
	f!0 := Offset
     $)
and StreamPointer (Stream) = Stream!6
and StreamOffset (Stream) = Stream!0 + Stream!7 * rv MaxSegSize * 4
and StreamLength (Stream) = Stream!1

let Close (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z) be
					//  Release stream block. Write out buffer or set bit count as necessary.
   for i = 0 to NumbArgs () - 1 do		//  Walk argument list.
     $(	let f = (lv a)!i
	let Rwa, Type = f!3 & RwaBits, f!3 & TypeBits
	switchon Type into
	     $(	case Console:		//  Common stream block should not be released.
			test Rwa = Read
			then f!0, f!1 := 0, 0	//  Discard unwanted input line.
			or Writeout (f)
			loop
		case StreamName:
			let l = nil
			test Rwa = Read
			then l := f!2
			or   $(	Writeout (f)
				l := f!1
			     $)
			let p = f!5	//  Original buffer area (I hope).
			p!0, p!1 := Bufferlist, l
			Bufferlist := p
			endcase
		case PathName:
		case EntryName:
		case SearchName:
			let p, BitCount = f!6, f!0 * 9
			unless Rwa = Read do SetBitCount (p, BitCount)
			test f!8 = 0
			then $(	Terminate (p)	//  Free segment number unless otherwise in use.
				if Type = SearchName do Terminate (p)	//  Got initiated twice at open.
			     $)
			or   $(	let v = vec 2
				ITS (f!8, v)
				unless Rwa = Read call MsfManagerAdjust (v pointer, lv f!7, lv BitCount,
								     lv Zero bit 3, lv Errcode bit 36)
				call MsfManagerClose (v pointer)
			     $)
			endcase
		default:	loop		//  Already closed or isn't a stream or Type = Pointer.
	     $)
	for i = 1 to 8 do f!i := 0
	f!0 := Freelist
	Freelist := f
     $)

let WriteS (f, s) be			//  Write a string.
     $(	if NumbArgs () = 1 do
	     $(	s := f
		f := OUTPUT
	     $)
	let c, l = 0, Length (s)		//  Current offset, remaining length.
	if l = 0 return
	     $(	let r = f!0		//  Current offset in output buffer.
		let n = f!1 - r		//  Remaining space.
		if n > l do n := l
		MoveBits (f!6, r * ByteSize, s, c * ByteSize + CountSize, n * ByteSize)
		f!0 := f!0 + n
		c := c + n
		l := l - n
		if l = 0 break
		Writeout (f)
	     $)	repeat
	if Subch (s, c) = f!2 ne 0 do Writeout (f)	//  Write out buffer ending with delimiter.
     $)

let WriteN (f, n) be			//  Write out a number in decimal.
     $(	if NumbArgs () = 1 do
	     $(	n := f
		f := OUTPUT
	     $)
	let w = vec 20
	WriteS (f, ConvertNtoS (n, w))
     $)

let Format (Stream, Control, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y,
		         A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y) be
		//  Control string is written out with additional arguments substituted for control codes.
     $(	let Space = vec 500
	ProcessFormatString (Control, lv a, Space, 500 * WordSize / ByteSize)
	WriteS (Stream, Space)
     $)
and FormatString (Space, MaxLen, Control, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y,
				  A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y) be
	ProcessFormatString (Control, lv a, Space, MaxLen)

and ProcessFormatString (Control, p, Space, MaxLen) be
     $(	let n = Length (Control)
	let u, v, w = vec 400, vec 100, vec 100
	and j = 0
	SetLength (Space, 0)
	for i = 1 to n do
	     $(	if j > 100 do
		     $(	u!0 := j
			Packstring (u, v)
			Concatenate (Space, MaxLen, Space, v)
			j := 0
		     $)
		let c = Subch (Control, i)
		if c ne '^' | i ge n do
		     $(	j := j + 1
			u!j := c
			loop
		     $)
		let Width, Digits = 0, 0
		     $(	i := i + 1
			c := Subch (Control, i)
			unless '0' le c le '9' break
			Width := Width * 10 + c - '0'
		     $)	repeat
		if c = '.' do
		     $(	i := i + 1
			c := Subch (Control, i)
			unless '0' le c le '9' break
			Digits := Digits * 10 + c - '0'
		     $)	repeat
		Width, Digits := MinI (Width, 200), MinI (Digits, 200)
		if c = '^' do
		     $(	j := j + 1
			u!j := '^'
			loop
		     $)
		let Val = ProcessItem (c, rv p, Digits, w)
		p := lv p!1
		let Len = Length (Val)
		for k = 1 to Len if Subch (Val, k) = '*b' do Len := Len - 2
		for k = Len + 1 to Width do
		     $(	j := j + 1
			u!j := '*s'
		     $)
		u!0 := j
		Packstring (u, v)
		Concatenate (Space, MaxLen, Space, v, Val)
		j := 0
	     $)
	if j ne 0 do
	     $(	u!0 := j
		Packstring (u, v)
		Concatenate (Space, MaxLen, Space, v)
	     $)
     $)
and ProcessItem (c, x, Digits, Space) = valof
     $(	let v = vec 100
	switchon c into
	     $(	case 'a': case 's':
			if Length (x) ge Digits resultis x
			CopyString (x, Space)
			Concatenate (Space, 400, Space, " ") repeatwhile Length (Space) < Digits
			resultis Space

		case 'p':	test (x rshift 30) = 0
			then FormatString (Space, 100, "^o|^o", (x rshift 18) & $87777, x & $8777777)
			or FormatString (Space, 100, "^o|^o(^2.2d)", (x rshift 18) & $87777, x & $8777777, x rshift 30)
			resultis Space

		case 'b':	resultis x -> "true", "false"

		case 'c':	if Digits = 0 do Digits := 1
			for i = Digits to 1 by -1 do
			     $(	v!i := x
				x := x rshift ByteSize
			    $)
			v!0 := Digits
			Packstring (v, Space)
			resultis Space

		case 'd':
		case 'n':	ConvertNtoS (x, Space, -10, Digits)	//  -10 requests signed conversion.
			resultis Space

		case 'w':	if Digits = 0 do Digits := 12
			ConvertNtoS (x, Space, 8, Digits)	//  Request unsigned conversion.
			resultis Space

		case 'o':	ConvertNtoS (x, Space, -8, Digits)	//  Request signed conversion.
			resultis Space

		case 'f':	if Digits = 0 do Digits := 5
			ConvertFtoS (x, Space, Digits)
			resultis Space

		default:	v!0, v!1 := 1, c
			Packstring (v, Space)
	     $)
	resultis Space
     $)
