//  Functions to convert values from one representation to another.
//  Last modified on 06/10/74 at 01:14:41 by R F Mabee.
//  Reinstalled with no material change in June 1974 by R F Mabee.
//  This module first installed on 6180 Multics in June 1973 by R F Mabee.
//  Formed from bcpl_lib_ and bcpl_io_, first installed on 645 Multics in September 1971 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"

external
     $(	SetTimeZone = "set_time_zone"		//  Meant to be used from command level.

	SysInfoTimeZone = "sys_info$time_zone"		//  Name of current zone.
	SysInfoTimeCorrectionConstant = "sys_info$time_correction_constant"
						//  Zone offset in microseconds.
	ErrTableBadString = "error_table_$bad_conversion"
     $)

let StoreN (N, w, Base, Digits) = valof
     $(	let i, j, v = 0, 0, vec 100
//  Generate digits in reverse order.
	     $(	i := i + 1
		let a = N rshift 1				//  Simulate unsigned arithmetic.
		let b = N - a - 1				//  N = a + b + 1.
		let T = a rem Base + b rem Base + 1 rem Base
		v!i := T rem Base				//  Unsigned remainder: N rem Base.
		N := a / Base + b / Base + 1 / Base + T / Base	//  Unsigned quotient: N / Base.
	     $)	repeatuntil N = 0 & i ge Digits
//  Reverse digits and put into result vector.
	     $(	j := j + 1
		w!j := (v!i > 9 -> 'A' - 10, '0') + v!i		//  Form printable digit.
		i := i - 1
	     $)	repeatuntil i = 0
	resultis j
     $)
and ConvertNtoS (N, Space, Base, Digits) = valof		//  Convert a number to a decimal string representation.
     $(	let j, w = 0, vec 100
	let Nargs = NumbArgs ()
	if Nargs < 4 do
	     $(	Digits := 1
		if Nargs < 3 do Base := -10
	     $)
	if Base < 0 do		//  Negative Base means N is signed.
	     $(	Base := - Base
		if N < 0 do N, w!1, j := - N, '-', 1
	     $)
	j := j + StoreN (N, lv w!j, Base, Digits)
	w!0 := j
	Packstring (w, Space)
	resultis Space
     $)
and ConvertFtoS (F, Space, Digits) = valof		//  Convert a floating-point number to string representation.
     $(	let j, w = 0, vec 100
	if NumbArgs () < 3 do Digits := 5
	if F .< 0.0 do F, w!1, j := .- F, '-', 1	//  Handle sign.
//  Compute exponent for E notation.
	let e = 0
	unless F .= 0.0 | 0.1 .le F .< 10000.0 do
		test F .ge 10.0			//  Get F in range 1.0 to 9.999....
		then e, F := e + 1, F ./ 10.0 repeatwhile F .ge 10.0
		or e, F := e - 1, F .* 10.0 repeatwhile F .< 1.0
//  Convert the integer part.
	let n = RtoI (F)
	F := F .- ItoR (n)
	let T = StoreN (n, lv w!j, 10, 1)
	j, Digits := j + T + 1, Digits - T
	w!j := '.'
	if Digits > 20 do Digits := 20
	for i = 1 to Digits do
	     $(	F := F .* 10.0
		j := j + 1
		w!j := RtoI (F) rem 10 + '0'
	     $)
	unless e = 0 do
	     $(	j := j + 1
		w!j := 'E'
		if e < 0 do
		     $(	j := j + 1
			e, w!j := - e, '-'
		     $)
		j := j + StoreN (e, lv w!j, 10, 2)
	     $)
	w!0 := j
	Packstring (w, Space)
	resultis Space
     $)

//  Functions to convert a BCPL string to and from escaped format exactly like that allowed by compiler.

let InsertEscapes (Input, Space) = valof
     $(	let v, w = vec 300 / 4, vec 300
	and j = 0
	SetLength (Space, 0)
	let Len = Length (Input)
	for i = 1 to Len do
	     $(	if j > 300 - 5 do		//  Temporary string w nearly full, move onto output.
		     $(	w!0 := j
			Packstring (w, v)
			Concatenate (Space, Len * 5, Space, v)		//  Max length - assume worst case.
			j := 0
		     $)
		let c = Subch (Input, i)
		let s = valof switchon c into
		     $(	case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G':
			case 'H': case 'I': case 'J': case 'K': case 'L': case 'M': case 'N':
			case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U':
			case 'V': case 'W': case 'X': case 'Y': case 'Z':
			case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g':
			case 'h': case 'i': case 'j': case 'k': case 'l': case 'm': case 'n':
			case 'o': case 'p': case 'q': case 'r': case 's': case 't': case 'u':
			case 'v': case 'w': case 'x': case 'y': case 'z':
			case '0': case '1': case '2': case '3': case '4':
			case '5': case '6': case '7': case '8': case '9':
			case '<': case '>': case ':': case ';': case '+': case '-':
			case '=': case '.': case ',': case '/': case '?': case '#':
			case '|': case '`': case '\': case '_': case '[': case ']':
			case '{': case '}': case '(': case ')': case '&': case '%':
			case '$': case '!': case '^': case '~': case '@': case ' ':
				j := j + 1; w!j := c
				loop
	
			case '*n': resultis 'n'
			case '*t': resultis 't'
			case '*b': resultis 'b'
			case '*f': resultis 'f'
			case '*v': resultis 'v'
			case '*r': resultis 'r'
			case '*d': resultis 'd'
			case '*k': resultis 'k'
			case '**': case '*'': case '*"':
				resultis c
	
			default:	resultis 'o'
		     $)
		j := j + 1; w!j := '**'
		j := j + 1; w!j := s
		if s = 'o' do j := j + StoreN (c, lv w!j, 8, 3)
	     $)

	w!0 := j
	Packstring (w, v)
	Concatenate (Space, Len * 5, Space, v)
	resultis Space
     $)

and RemoveEscapes (Input, Space) = valof
     $(	let v, w = vec 300 / 4, vec 300
	and j = 0
	SetLength (Space, 0)
	let First, Last = 1, Length (Input)
	let c = Subch (Input, First)
	if (c = '*'' | c = '*"') & Last > First & Subch (Input, Last) = c do First, Last := First + 1, Last - 1
	for i = First to Last do
	     $(	if j > 300 - 1 do		//  Temporary string w is full, stuff it into output string Space.
		     $(	w!0 := j
			Packstring (w, v)
			Concatenate (Space, Last, Space, v)
			j := 0
		     $)
		c := Subch (Input, i)
		if c = '**' & i < Last do
		     $(	i := i + 1
			c := Subch (Input, i)
			c := valof switchon c into
			     $(	case 's':	case 'S':	resultis '*s'
				case 'n':	case 'N':	resultis '*n'
				case 't':	case 'T':	resultis '*t'
				case 'b':	case 'B':	resultis '*b'
				case 'r':	case 'R':	resultis '*r'
				case 'f':	case 'F':	resultis '*f'
				case 'v':	case 'V':	resultis '*v'
				case 'k':	case 'K':	resultis '*k'
				case 'd':	case 'D':	resultis '*d'
	
				case 'c':	case 'C':	i := i + 1 repeatuntil Subch (Input, i) = '**' | i ge Last
						loop
				case 'o':	case 'O':	     $(	let n = 0
							for k = 1 to 3 do
							     $(	if i ge Last break
								let c = Subch (Input, i + 1)
								unless '0' le c le '7' break
								n := n lshift 3 | (c - '0')
								i := i + 1
							     $)
							resultis n
						     $)
				default:		resultis c
			     $)
		     $)
		j := j + 1
		w!j := c
	     $)

	w!0 := j
	Packstring (w, v)
	Concatenate (Space, Last, Space, v)
	resultis Space
     $)


let ConvertStoN (String, Base) = valof		//  String to number conversion.
					//  Allows floating point and base specification (i.e. octal).
					//  If an unexpected character is found, an appropriate error code is set.
     $(	if NumbArgs () < 2 do Base := 10
	let Unpacked = vec 512
	Unpackstring (String, Unpacked)
	let Index, Length = 1, Unpacked!0		//  For scanning string.
	let Integer, Real = 0, 0.0			//  For result.
	let Neg = false
	Errcode := 0

//  First remove all blanks from the string.
	for i = Length to 1 by -1 if Unpacked!i = '*s' do
			     $(	Length := Length - 1
				for j = i to Length do Unpacked!j := Unpacked!(j + 1)
			     $)

	let Ch = Unpacked!Index			//  Next character to process.
	if Ch = '-' logor Ch = '+' do			//  Allow sign.
	     $(	if Ch = '-' do Neg := true
		Index := Index + 1			//  Space over sign.
		Ch := Unpacked!Index
	     $)
	if Ch = '$' & Index < Length do		//  May start with base specification, for example $8 for octal.
	     $(	Ch := Unpacked!(Index + 1)
		test '2' le Ch le '9'
		then Base := Ch - '0'
		or test Ch = 'x' logor Ch = 'X'
		   then Base := 16			//  Hexadecimal.
		   or $(	Errcode := rv ErrTableBadString
			resultis 0
		      $)
		Index := Index + 2			//  Space over dollar sign and digit.
		Ch := Unpacked!Index
	     $)
	while Index le Length do			//  Gather in integer part.
	     $(	let N = Ch - '0'
		unless 0 le N < Base do
		     $(	N := Ch - 'A' + 10
			unless 10 le N < Base break
		     $)
		Integer := Integer * Base + N
		if Base = 10 do Real := Real .* 10.0 .+ ItoR (N)	//  In case it turns out to be floating.
		Index := Index + 1
		Ch := Unpacked!Index
	     $)
	if Neg do Integer := - Integer
	if Index > Length resultis Integer
	unless Ch = '.' & Base = 10 do
	     $(	Errcode := rv ErrTableBadString
		resultis Integer
	     $)
						//  Now it is known to be a floating point number.
	let Div, Fraction = 1.0, 0.0			//  Accumulate fraction and divisor.
	     $(	Index := Index + 1			//  Gather in the fractional part of the number.
		Ch := Unpacked!Index
		unless Index le Length & '0' le Ch le '9' break
		Div := Div .* 10.0
		Fraction := Fraction .* 10.0 .+ ItoR (Ch - '0')
	     $)	repeat
	Real := Real .+ Fraction ./ Div
	if Index < Length & (Ch = 'e' | Ch = 'E') do	//  E-notation.
	     $(	let Neg = false
		let Exp = 0			//  Power of ten to multiply result by.
		Index := Index + 1			//  Skip the E.
		Ch := Unpacked!Index
		if Ch = '-' logor Ch = '+' do		//  Signed exponent.
		    $(	if Ch = '-' do Neg := true
			Index := Index + 1
			Ch := Unpacked!Index
		     $)
		while Index le Length & '0' le Ch le '9' do	//  Get exponent.
		     $(	Exp := Exp * 10 + Ch - '0'
			Index := Index + 1
			Ch := Unpacked!Index
		     $)
		if Neg do Exp := - Exp
		Real := Real .* RpowerI (10.0, Exp)	//  Multiply Real by 10.0 ** Exp.
	     $)
	if Neg do Real := .- Real
	unless Index > Length do Errcode := rv ErrTableBadString
	resultis Real
     $)

static
     $(	StandardZone = 0
	StandardDelta = 0
	DaylightZone = 0
	DaylightDelta = 0
     $)

let StoreDate (SecondsSince1901, Space, Breaks) be	//  Internal routine to decode clock value.
     $(	let SecondsSinceMidnight = Mod (SecondsSince1901 - 1, 24 * 3600) + 1		//  24:00:00 exists.
	let DaysSince1901 = (SecondsSince1901 - SecondsSinceMidnight) / (24 * 3600)
	let DayOfCycle = Mod (DaysSince1901, 1461)		//  1461 days in four year leap cycle.
	let MonthOfCycle = DayOfCycle / 31			//  First guess - must check with table.
	let Table = table 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334,
		365, 396, 424, 455, 485, 516, 546, 577, 608, 638, 669, 699,
		730, 761, 789, 820, 850, 881, 911, 942, 973, 1003, 1034, 1064,
		1095, 1126, 1155, 1186, 1216, 1247, 1277, 1308, 1339, 1369, 1400, 1430,
		1461
	if DayOfCycle ge Table!(MonthOfCycle + 1) do MonthOfCycle := MonthOfCycle + 1

	let MonthOfYear = MonthOfCycle rem 12
	and DayOfMonth = DayOfCycle - Table!MonthOfCycle
	and Year = 1901 + (DaysSince1901 - DayOfCycle) / 1461 * 4 + DayOfCycle * 4 / 1461
	and DayOfWeek = Mod (DaysSince1901 + 2, 7)			//  1 Jan 1901 was a Tuesday (2).

	let MonthNames = list "January", "February", "March", "April", "May", "June",
			"July", "August", "September", "October", "November", "December"
	and DayNames = list "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"

	Space!0, Space!1 := MonthOfYear + 1, MonthNames!MonthOfYear
	Space!2, Space!3 := DayOfMonth + 1, Year
	Space!4, Space!5 := DayOfWeek, DayNames!DayOfWeek

	Space!6 := SecondsSinceMidnight / 3600
	Space!7 := (SecondsSinceMidnight / 60) rem 60
	Space!8 := SecondsSinceMidnight rem 60

	let FirstMonthOfYear = MonthOfCycle - MonthOfYear
	let LastDayOfApril = Table!(FirstMonthOfYear + 4) - 1	//  First day of May - 1.
	and LastDayOfOctober = Table!(FirstMonthOfYear + 10) - 1
	let LastSundayOfApril = LastDayOfApril - (LastDayOfApril + DayOfWeek - DayOfCycle + 7777) rem 7
	and LastSundayOfOctober = LastDayOfOctober - (LastDayOfOctober + DayOfWeek - DayOfCycle + 7777) rem 7
	Breaks!0 := (LastSundayOfApril + DaysSince1901 - DayOfCycle) * (24 * 3600) + 2 * 3600
	Breaks!1 := (LastSundayOfOctober + DaysSince1901 - DayOfCycle) * (24 * 3600) + 2 * 3600
     $)
and Mod (x, y) = x ge 0 -> x rem y, (x rem y + y) rem y	//  Necessary from 6180 definition of rem.


//  Routine to interpret a clock time in seconds since 1901 into a form easily formatted for printing.
//  This routine applies the standard Daylight Saving Time algorithm to determine which of two time zones to use.

and FormDate (Seconds, Space, GMTsw) be
     $(	let Breaks = vec 2
	if StandardZone = 0 do InitializeZoneInfo ()	//  Initialize static strings.

	if NumbArgs () > 2 then if GMTsw do
	     $(	StoreDate (Seconds, Space, Breaks)
		Space!9 := "GMT"
		return
	     $)

	StoreDate (Seconds - StandardDelta, Space, Breaks)	//  Assume Standard time first.
	Space!9 := StandardZone

	if (Seconds - StandardDelta) > Breaks!0 & (Seconds - DaylightDelta) le Breaks!1 do
	     $(	StoreDate (Seconds - DaylightDelta, Space, Breaks)	//  Try daylight time.
		Space!9 := DaylightZone
	     $)
     $)
and InitializeZoneInfo () be
     $(	let Zone = rv SysInfoTimeZone

//  Convert Zone to all upper case.
	for i = 0 to WordSize  - ByteSize by ByteSize do
	     $(	let c = (Zone rshift i) logand (true rshift WordSize - ByteSize)
		if 'a' le c le 'z' do Zone := Zone + ('A' - 'a' lshift i)
	     $)

	switchon Zone into
	     $(	case 'EST ': case 'EDT ':
			StandardZone, StandardDelta := "EST", 5 * 3600
			DaylightZone, DaylightDelta := "EDT", 4 * 3600
			endcase

		case 'CST ': case 'CDT ':
			StandardZone, StandardDelta := "CST", 6 * 3600
			DaylightZone, DaylightDelta := "CDT", 5 * 3600
			endcase

		case 'MST ': case 'MDT ':
			StandardZone, StandardDelta := "MST", 7 * 3600
			DaylightZone, DaylightDelta := "MDT", 6 * 3600
			endcase

		case 'PST ': case 'PDT ':
			StandardZone, StandardDelta := "PST", 8 * 3600
			DaylightZone, DaylightDelta := "PDT", 7 * 3600
			endcase

		default:
			let v = vec 10
			MakeBcplString (lv Zone, 4, v)
			let t = Allocate (LengthInWords (v))
			CopyString (v, t)
			let d = TimeToSeconds (SysInfoTimeCorrectionConstant)
			StandardZone, StandardDelta := t, d
			DaylightZone, DaylightDelta := t, d
	     $)
     $)

let SetTimeZone () be main
     $(	let Arg = vec 128
	if Pl1NumbArgs () < 4 do
	     $(	InitializeZoneInfo ()
		return
	     $)
	DaylightDelta := ConvertStoN (Pl1ArgString (4, Arg))
	Pl1ArgString (3, Arg)
	DaylightZone := Allocate (LengthInWords (Arg))
	CopyString (Arg, DaylightZone)
	StandardDelta := ConvertStoN (Pl1ArgString (2, Arg))
	Pl1ArgString (1, Arg)
	StandardZone := Allocate (LengthInWords (Arg))
	CopyString (Arg, StandardZone)
    $)
