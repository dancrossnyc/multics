/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7426), audit(86-11-12,Zwick),
     install(86-11-20,MR12.0-1222):
     implemented list_heap_variables.
                                                   END HISTORY COMMENTS */

/* format: style3,^indnoniterdo */

/* list heap variables ... this routine lists the heap variables at
   the specified level or at the current level.
*/

list_heap_variables:
lhv:
     proc;

/* automatic */

dcl	arg_ptr		pointer automatic;		/* ptr to the current arg */
dcl	arg_list_ptr	pointer automatic;		/* ptr to our arg list */
dcl	arg_length	fixed bin automatic;	/* length of current arg */
dcl	code		fixed bin (35) automatic;	/* an error code */
dcl	exe_level		fixed bin (17) automatic;	/* the current execution level */
dcl	finish		fixed bin (17) automatic;	/* the last exe level to be printed */
dcl	heap_header_ptr	pointer automatic;		/* ptr to the current heap header */
dcl	hdrsw		bit (1) aligned automatic;	/* -he or -nhe specified */
dcl	i		fixed bin automatic;	/* an indexing var */
dcl	lgsw		bit (1) aligned automatic;	/* -lg specified */
dcl	num_of_args	fixed bin automatic;	/* total args on command line */
dcl	nnames		fixed bin automatic;	/* number of ext vars to be printed */
dcl	nprinted		fixed bin automatic;	/* number of names printed */
dcl	node_ptr		pointer automatic;		/* ptr to variable_node ptr */
dcl	start		fixed bin (17) automatic;	/* the exe level to start at */

/* constants */

dcl	ME		char (19) aligned init ("list_heap_variables") static options (constant);
dcl	LONG_HEADER	char (69) static options (constant)
			init ("^/NAME^-^-         SEGMENT OFFSET   SIZE       ALLOCATED   INIT_PTR^/");
dcl	SHORT_HEADER	char (42) static options (constant) init ("^/NAME^-^-         SEGMENT OFFSET   SIZE^/");

dcl	IOA_CONTROL	(0:3) char (30) var static options (constant) init ("^30a ^3o ^6o ^8d ^16a ^p",
						/* SHORT NAME -lg */
			"^a^/^31x^3o ^6o ^8d ^16a ^p",/* LONG NAME -lg */
			"^30a ^3o ^6o ^8d",		/* SHORT NAME -bf */
			"^a^/^31x^3o ^6o ^8d");	/* LONG NAME -bf */

/* builtins */

dcl	(addr, baseno, bin, convert, fixed, hbound, lbound, null, rel, stackbaseptr, substr, verify)
			builtin;

/* external entries */

dcl	(com_err_, ioa_)	entry options (variable);
dcl	cu_$arg_count	entry () returns (fixed bin);
dcl	cu_$arg_ptr_rel	entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl	cu_$arg_list_ptr	entry () returns (ptr);
dcl	date_time_	entry (fixed bin (71), char (*));
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed, char (*), fixed (35));
dcl	heap_manager_$get_heap_header
			entry (pointer, fixed bin (17), pointer, fixed bin (35));
dcl	heap_manager_$get_heap_level
			entry (pointer) returns (fixed bin (17));


/* external variables */

dcl	error_table_$badopt ext fixed bin (35);

/* based */

dcl	arg		char (arg_length) based (arg_ptr);

/* structs */

dcl	1 list		aligned based,
	  2 array		dim (0:num_of_args),
	    3 name	char (256),
	    3 nsize	fixed bin (17) aligned,
	    3 flags,
	      4 found	bit (1) unal,
	      4 pad	bit (35) unal;

/**/

/* find out if there are any external variables */

	hdrsw = "1"b;
	lgsw = "0"b;
	start, finish = -1;
	nnames = 0;
	nprinted = 0;
	sb = stackbaseptr ();

	arg_list_ptr = cu_$arg_list_ptr ();
	num_of_args = cu_$arg_count ();

	begin;

dcl	1 name_list	like list automatic;


	     call process_args (addr (name_list));
	     if start = -1
	     then do;
		call com_err_ (0, ME, "There are no heaps allocated.");
		goto EXIT;
	     end;

	     do exe_level = start to finish;
		call heap_manager_$get_heap_header (sb, exe_level, heap_header_ptr, code);
		if code ^= 0
		then do;
		     call com_err_ (0, ME, "The heap does not exist at level ^d.", exe_level);
		     goto NEXT_LEVEL;
		end;


		call print_each_level (heap_header_ptr, exe_level, addr (name_list));

		if nnames > 0 then do;
		     if nprinted < nnames then do;
			call ioa_ ("^/The following variables were not found:");
			do i = 1 to nnames;
			     if ^name_list.array (i).flags.found then
				call ioa_ ("^a",
				     substr (name_list.array (i).name,
				     1, name_list.array (i).nsize));
			end;
		     end;
		     nprinted = 0;

/* reset the found switches */

		     do i = 1 to nnames;
			name_list.array (i).flags.found = "0"b;
		     end;
		end;

NEXT_LEVEL:
	     end;


	end;


EXIT:
	return;

/**/
/* Internal entry points */

/* print each level
   goes through a passed heap level and prints out information concerning
   the heap variables at that level
*/

print_each_level:
     proc (heap_header_ptr, exe_level, name_list_ptr);


dcl	heap_header_ptr	pointer parameter;
dcl	exe_level		fixed bin parameter;
dcl	name_list_ptr	pointer parameter;

dcl	entryname		char (32) automatic;
dcl	code		fixed bin (35) automatic;
dcl	table_ptr		pointer automatic;
dcl	i		fixed bin automatic;



/* get the heap area name and print out some info about the heap */

	entryname = "???";
	call hcs_$fs_get_path_name (heap_header_ptr -> heap_header.area_ptr, "", (0), entryname, code);
	if code ^= 0
	then do;
	     call com_err_ (code, ME,
		"Cannot get name of heap area segment ^p at level ^d.",
		heap_header_ptr, exe_level);
	     return;
	end;

	call ioa_ ("^/^/Heap level ^d, allocation area at ^p ^/ (^a in process directory).",
	     heap_header_ptr -> heap_header.execution_level, heap_header_ptr -> heap_header.area_ptr, entryname);



/* check and see if there any variables at this level */

	table_ptr = heap_header_ptr -> heap_header.heap_name_list_ptr;
	if table_ptr = null
	then do;
no_variables:
	     call ioa_ ("There are no heap variables at level ^d.", exe_level);
	     return;
	end;


	if (table_ptr -> variable_table_header.cur_num_of_variables < 1)
	then goto no_variables;


/* print out a header if required */

	if hdrsw
	then do;
	     if lgsw
	     then call ioa_ (LONG_HEADER);

	     else call ioa_ (SHORT_HEADER);
	end;



/* loop through system name list, printing info for desired variables */


	do i = lbound (table_ptr -> variable_table_header.hash_table, 1)
	     to hbound (table_ptr -> variable_table_header.hash_table, 1);

	     do node_ptr = table_ptr -> variable_table_header.hash_table (i)
		repeat node_ptr -> variable_node.forward_thread while (node_ptr ^= null);

		if nnames = 0
		then call print_it (node_ptr);

		else if name_on_list (node_ptr, name_list_ptr)
		then do;
		     call print_it (node_ptr);
		     nprinted = nprinted + 1;
		     if nprinted = nnames
		     then return;
		end;
	     end;
	end;


     end print_each_level;

/**/

/* name_on_list
   checks and sees if the passed variable is on the name list specified
   on the command line
*/

name_on_list:
     proc (node_ptr, name_list_ptr) returns (bit (1));

dcl	node_ptr		pointer parameter;
dcl	name_list_ptr	pointer parameter;

dcl	j		fixed bin automatic;
dcl	1 name_list	like list aligned based (name_list_ptr);


	do j = 1 to nnames;
	     if ^name_list.array (j).flags.found
	     then do;
		if name_list.array (j).name = node_ptr -> variable_node.name
		then do;
		     name_list.array (j).flags.found = "1"b;
		     return ("1"b);
		end;
	     end;
	end;

	return ("0"b);

     end name_on_list;


/**/
/* print_it: prints out information concerning an individual heap
   variable.
*/
print_it:
     proc (node_ptr);

dcl	node_ptr		pointer parameter;

dcl	date		char (24) automatic;
dcl	init_ptr		pointer automatic;
dcl	variable_ptr	pointer automatic;


	variable_ptr = node_ptr -> variable_node.vbl_ptr;
	if lgsw
	then do;
	     call date_time_ (node_ptr -> variable_node.time_allocated, date);
	     init_ptr = node_ptr -> variable_node.init_ptr;

	     call ioa_ (IOA_CONTROL (bin ((node_ptr -> variable_node.name_size > 31), 1)),
		node_ptr -> variable_node.name, fixed (baseno (variable_ptr), 15), bin (rel (variable_ptr), 18),
		node_ptr -> variable_node.vbl_size, substr (date, 1, 16), init_ptr);
	end;

	else call ioa_ (IOA_CONTROL (bin ((node_ptr -> variable_node.name_size > 31), 1) + 2),
		node_ptr -> variable_node.name, fixed (baseno (variable_ptr), 15), bin (rel (variable_ptr), 18),
		node_ptr -> variable_node.vbl_size);
	return;

     end print_it;

/**/
/* process_args: goes through the command arguements and sets up a
   name list of variables to be found
*/

process_args:
     procedure (name_list_ptr);

dcl	name_list_ptr	pointer parameter;

dcl	i		fixed bin automatic;

dcl	1 name_list	like list aligned based (name_list_ptr);

	if num_of_args > 0
	then do i = 1 to num_of_args;
		call cu_$arg_ptr_rel (i, arg_ptr, arg_length, code, arg_list_ptr);
		if code ^= 0
		then do;
		     call com_err_ (code, ME, arg);
		     goto EXIT;
		end;

		else if index (arg, "-") = 1
		then do;

		     if (arg = "-long") | (arg = "-lg")
		     then lgsw = "1"b;

		     else if (arg = "-brief") | (arg = "-bf")
		     then lgsw = "0"b;

		     else if (arg = "-all") | (arg = "-a")
		     then do;
			start = 0;
			finish = heap_manager_$get_heap_level (sb);
		     end;

		     else if (arg = "-no_header") | (arg = "-nhe")
		     then hdrsw = "0"b;

		     else if (arg = "-header") | (arg = "-he")
		     then hdrsw = "1"b;

		     else if arg = "-to"
		     then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, arg_ptr, arg_length, code, arg_list_ptr);
			if (verify (arg, "0123456789") ^= 0) | (code ^= 0)
			then do;
			     call com_err_ (0, ME, "Numeric operand of -to is missing.");
			     goto EXIT;
			end;
			finish = convert (finish, arg);
		     end;

		     else if (arg = "-from") | (arg = "-fm")
		     then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, arg_ptr, arg_length, code, arg_list_ptr);
			if (verify (arg, "0123456789") ^= 0) | (code ^= 0)
			then do;
			     call com_err_ (0, ME, "Numeric argument of -from is missing.");
			     goto EXIT;
			end;
			start = convert (start, arg);
		     end;

		     else do;
			call com_err_ (error_table_$badopt, ME, arg);
			goto EXIT;
		     end;
		end;

		else do;
		     nnames = nnames + 1;
		     name_list.array (nnames).name = arg;
		     name_list.array (nnames).nsize = arg_length;
		     name_list.array (nnames).flags.found = "0"b;
		end;
	     end;


/* set start and finish to defalut values of current level if not 
   specified
*/

	if start = -1
	then do;
	     if finish = -1
	     then start = heap_manager_$get_heap_level (sb);
	     else start = 0;
	end;
	if finish = -1
	then finish = heap_manager_$get_heap_level (sb);

     end process_args;
%page;
/* Include Files */

%include system_link_names;
%page;

%include stack_header;


     end list_heap_variables;
