/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


make_object_map_:	proc(object_ptr,textl,linkl,symboll,bitcnt,code);



/*	procedure to make an object map and place it in the end of
	the object segment

	the first four arguments are given to be a ptr to the segment
	  and the lengths of the three component parts (in words)
	  the assumption is that the text begins at loc 0
	  the link at the first 0mod(2) loc after the end of  the text
	  and the symbol at the first 0mod(2) loc after then end of the link

	the map immediately follows

	the bitcnt is returned as is the code which is equal to 0 if sucessful
	and equal to 1 if there is no room for the map */

dcl	object_ptr ptr,
	(textl,linkl,symboll,code) fixed bin(17),
	bitcnt fixed bin(24);

dcl	(i,linkrel,symbolrel,maprel) fixed bin(17);
dcl	p ptr;

dcl	max_length fixed bin (17),
	hcs_$get_max_length_seg entry (ptr, fixed bin (17), fixed bin (17));

dcl	1 object_glop based(p) aligned,
	  2 idwords(0:3) bit(36) aligned,
	  2 textrel fixed bin(35),
	  2 textbc fixed bin(35),
	  2 linkrel fixed bin(35),
	  2 linkbc fixed bin(35),
	  2 symbolrel fixed bin(35),
	  2 symbolbc fixed bin(35),
	  2 maprel fixed bin(35);

dcl	(segp,map_ptr) ptr;

dcl	map_words fixed bin(17);

dcl	map_ptr_offset fixed bin(17),
	fb18 fixed bin(18) based;
/**/


	linkrel = divide(textl+1,2,17,0)*2;

	symbolrel = divide(linkrel+linkl+1,2,17,0)*2;

	maprel = symbolrel + symboll;

	call hcs_$get_max_length_seg (object_ptr, max_length, code);
	if code ^= 0 then return;

	if (maprel +11) > max_length then do;
	  code = 1;	/* no room for map */
	  return;
	end;


	p = ptr(object_ptr,maprel);		/* make ptr to map */

	do i = 0 to 3;
	p->object_glop.idwords(i) = "101010101010101010101010101010101010"b;
	end;

	p->object_glop.textrel = 0;
	p->object_glop.textbc = textl*36;
	p->object_glop.linkrel = linkrel;
	p->object_glop.linkbc = linkl*36;
	p->object_glop.symbolrel = symbolrel;
	p->object_glop.symbolbc = symboll*36;
	p->object_glop.maprel = maprel;

	bitcnt = multiply(maprel+11,36,24,0);

	code = 0;
	return;
/**/

/*	make_object_map_$tl is a special entry for use by the mst generator.  The assumptions are that the last
	  word of the segment is a pointer to the beginning of the object map, and that the current
	  structure of the map causes the first 9 words of the map to be equivalent to a
	  map which would be created for a segment consisting of a text and linkage section only
*/

tl: entry (bitcnt,segp,map_ptr,map_words,code);

	code = 0;						/* zero out error code */

	map_ptr_offset = divide(bitcnt+35,36,17,0)-1;		/* get map offset */
	map_ptr = addrel(segp,addrel(segp,map_ptr_offset)->fb18);	/* create map pointer */
	map_words = 9;					/* return map size */

	do i =0 to 3;					/* check map format */
	   if map_ptr->object_glop.idwords(i) ^= "101010101010101010101010101010101010"b then do;
	      code = 2;
	      return;
	   end;
	end;

	return;

end make_object_map_;
