/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


ti_$getseg: proc(dir,ename,segp,crock,code);


/* The subroutine ti_ (translator interface) is the interface between Multics
   standard translators and the file system.
   NOTE: THIS PROCEDURE ASSUMES THAT THE POINTER RETURNED BY LISTEN_$GET_AREA
         POINTS TO THE SAME SEGMENT FOR THE LIFE OF THE PROCESS */

	
/* initially coded in June 1969 by V. Voydock */
/*  modified on April 15, 1970 at 8:25 P. M. by V. Voydock */
/* modified by E. Stone on Aug. 4 1970 */
/* modified on December 7, 1970 by V. Voydock to follow new ring conventions */
/* Modified in June 1971 by V. Voydock to not know what segment
   listen_$get_area uses as an area */
/* Coding style cleaned up by V. Voydock in August 1971 */
	
dcl	cleanup condition;
dcl	1 x based(p) aligned,   /*  template to fill in ACL info */
	     2 number_of_acl_entries bit(18) unaligned,
	     2 offset_of_saved_acl bit(18) unaligned;

dcl	1 working_acl aligned internal static,
	     2 process_group_id char(32) aligned,
	     2 mode bit(5) unaligned,
	     2 reterr bit(13) unaligned,
	     2 (rb1,rb2,rb3) bit(6) unaligned;

dcl	dir char(*) aligned,
	ename char(*) aligned;

dcl	(aclp initial(null),
	 area_ptr int static,
	 segp,     /* ptr to segment "dir>ename" */
	 p
			) ptr;

dcl	(code,     /* error code */
	 error_table_$seg_unknown external,
	 error_table_$nolinkag external,
	 acnt      /* number of entries in ACL returned by readacl */
			) fixed bin;

dcl	crock  fixed bin(35);    /* ACL storage information */

dcl	first_time bit(1) aligned internal static initial("1"b);

dcl	cu_$level_get ext entry returns(fixed bin(6)),
	get_group_id_$tag_star ext entry returns(char(32) aligned),
	listen_$get_area ext entry returns(ptr),
	term_$nomakeunknown ext entry(ptr,fixed bin),
	hcs_$truncate_seg external entry(ptr,fixed bin,fixed bin),
	hcs_$make_seg ext entry(char(*) aligned,char(*) aligned,char(*) aligned,fixed bin(5),ptr,fixed bin),
	hcs_$acl_list ext entry(char(*) aligned,char(*) aligned,ptr,fixed bin,ptr,fixed bin),
	hcs_$acl_replace ext entry(char(*) aligned, char(*) aligned,ptr,fixed bin,fixed bin);

dcl	(addr,
	 fixed,
	 max,
	 null,
	 ptr,
	 rel
		) builtin;
/*  */
		/* Set up acl.  This acl will be used either while the translation takes
		   place or when it is done or both (with the mode changed appropriately)  */
	if first_time then
	     do;
	     process_group_id=get_group_id_$tag_star ();
	     area_ptr=listen_$get_area ();
	     first_time="0"b;
	     end;
	rb1=bit (cu_$level_get (), 6);
	rb2,rb3 = rb1;
	
		/* Create segment in directory dir with entry name ename, null reference name
		     and rwa access attributes */
	call hcs_$make_seg(dir,ename,"",01011b,segp,code);
	
		/* If the segment did not previously exist zero the ACL storage argument, "crock",
		   This will tell ti_$finobj or ti_$findata that the segment does
		   not have an ACL to restore */
	if code=0 then  do; crock=0; return; end;

		/* If unable to create segment return with error code */
	if segp=null then return;

		/* If segment did already exist, terminate it, truncate it, and save
		   its ACL so that it can be restored by ti_$finobj or ti_$findata */
	call term_$nomakeunknown(segp,code);
	if code^=0 then
	     if code^=error_table_$seg_unknown then
	          if code^=error_table_$nolinkag then  return;
	          else code=0;
	     else code=0;

		/* Set up cleanup handler to free storage, in case processing
		   is interrupted before control returns to caller */ 
	on cleanup begin; if aclp^=null then do; crock=0; free aclp->acl; end; end;

		/* Save the old ACL in the area returned by listen_$get_area */
	call hcs_$acl_list(dir,ename,aclp,acnt,area_ptr,code);
	if code^=0 then return;

		/* Pack information into the argument crock which will allow ti_$finobj or
		   ti_$findata to restore the ACL which has just been saved. In particular,
		   we pack the number of entries in the saved ACL into the left half of crock and
		   the offset relative to the base of the segment in which listen_$get_area has
		   its area into the right half of crock.  From this offset, the other entries
		   can rebuild a pointer to the saved ACL  */
	p=addr(crock);
	number_of_acl_entries=bit (fixed(acnt,18), 18);
	offset_of_saved_acl=rel(aclp);
	
		/* Put the ACL to be used during the translation onto the segment. */
	mode="01011"b;
	call hcs_$acl_replace(dir,ename,addr(working_acl),1,code);
	if code^=0 then return;

		/* Truncate the segment */
	call hcs_$truncate_seg(segp,0,code);
	return;
/*  */
	
finobj: entry(segp,bitcnt,crock,code);

dcl	1 acl based(aclp) aligned,
	     2 pad char(32),
	     2 mmode bit(5);

dcl	f_dir char(168) aligned,
	f_ename char(32) aligned;

dcl	(lng,
	 bitcnt
		   ) fixed bin;

dcl	processing_object bit(1) aligned;

dcl	hcs_$terminate_noname ext entry(ptr,fixed bin),
	hcs_$fs_get_path_name ext entry(ptr,char(*) aligned,fixed bin,char(*) aligned,fixed bin),
	hcs_$set_bc ext entry(char(*) aligned,char(*) aligned,fixed bin,fixed bin);
/*  */
		/* Indicate that this is call to the "finobj" entry */
	processing_object="1"b;
	go to COMMON;
	
findata: entry(segp,bitcnt,crock,code);
	
	processing_object="0"b;

COMMON:
	
		/* Get pathname of segment pointed to by segp */
	call hcs_$fs_get_path_name(segp,f_dir,lng,f_ename,code);
	if code^=0 then return;
	
		/* Set bit count of segment to bitcnt */
	call hcs_$set_bc(f_dir,f_ename,bitcnt,code);
	if code^=0 then return;
	
		/* Restore old ACL if it exists, otherwise give default ACL */
	if crock^=0 then
	     do;
	     p=addr(crock);
	     aclp=ptr(area_ptr,offset_of_saved_acl);     /* get ptr to ACL */
	     acnt=fixed(number_of_acl_entries,17);

		/* If called from ti_$finobj check the old ACL. If it has only one entry and
		     if the entry is for the current user and if it has RWA as its mode, change
		     the the mode to RE since it is very likely that this acl is left over from
		     an earlier compilation which the user quit out of */
	     if processing_object then if acnt=1 then if mmode="01011"b then mmode="01100"b;
	     call hcs_$acl_replace(f_dir,f_ename,aclp,acnt,code);      /* restore old ACL */
	     if code^=0 then return;
		/* Free up storage used to store ACL and indicate this has been done */
	     if acnt>0 then free aclp->acl;
	     crock=0;
	     end;
	else      

		/* If no old ACL exists then we must put a default ACL on the segment.
		   In the case of data segments this is RWA for the given user.  Since this is the
		   same ACL that was used during the compilation, this ACL is already on the segment
		   and nothing need be done.  If this is an object segment, then the default ACL
		   is RE for the user, and we must put this on the segment */
	if processing_object then  
	     do;
	     mode="01100"b;
	     call hcs_$acl_replace(f_dir,f_ename,addr(working_acl),1,code);
	     if code^=0 then return;
	     end;
	
		/* Terminate segment */
	call hcs_$terminate_noname(segp,code);

	return;
/*  */


clean_up: entry(crock);


		/* Get pointer to storage to be freed up */
	if crock=0 then return;
	p=addr(crock);
	aclp=ptr(area_ptr,offset_of_saved_acl);
	acnt=fixed(number_of_acl_entries,17);

		/* Free up the storage and indicate that storage has been cleaned up */
	if acnt>0 then free aclp->acl;
	crock=0;


end ti_$getseg;
