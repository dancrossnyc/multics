/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(88-07-06,TLNguyen), approve(88-07-06,MCR7932),
     audit(88-07-08,Parisek), install(88-07-12,MR12.2-1055):
     Fix bug which prevents a null pointer condition raised when calling
     msf_manager_$get_ptr
                                                   END HISTORY COMMENTS */



/*  The translator storage system interface module (tssi_) gets pointers
    to segments needed by translators, relieving them of the burden of
    taking care of acls.  It has several entry points, sometimes in
    pairs - one for strictly Single Segment Files, and another for Multi Segment
    Files.

    Based on ti_, written by V. Voydock.

    Coded by Dan Bricklin April 1972
    Recoded to use new ACL primitives and also better methods by M.J. Grady May 1973
    Modified by E Stone April 1974 to call new msf_manager_ entries $acl_add and $acl_delete
    to fix bug in clean_up_file entry and to cleanup code
    Modified by Richard Lamson January 6, 1982 for better interface with initial ACLs

*/


tssi_:	proc;


dcl
	dirname char(*),
	ename char(*),
	segp ptr,
	aclinfop ptr,
	code fixed bin(35),
	xcode fixed bin(35),
	(addr, null, substr) builtin,
	hcs_$make_seg ext entry(char(*), char(*), char(*), fixed bin(5), ptr, fixed bin(35)),
	hcs_$list_acl entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35)),
	hcs_$replace_acl entry (char(*), char(*), ptr, fixed bin, bit(1), fixed bin(35)),
	term_$nomakeunknown ext entry(ptr, fixed bin(35)),
	error_table_$seg_unknown fixed bin(35) ext,
	error_table_$nolinkag fixed bin(35) ext,
	type fixed bin,
	seg fixed bin static init (1),
	file fixed bin static init (2),
	cleanup condition,

	1 info_bead based(aclinfop) aligned,
	   2 dirname char(168),
	   2 ename char(32),
	   2 made_seg bit(1),
	   2 mode bit(3),

	free_area area based(areap),
	areap ptr static init(null),


	1 working_acl aligned,
	   2 process_group_id char(32) aligned,
	   2 mode bit(3) unaligned,
	   2 mbz1 bit(33) unaligned,
	   2 mbz2 bit(36),
	   2 err_code fixed bin(35),

	1 del_acl aligned,
	  2 process_group_id char(32) aligned,
	  2 err_code fixed bin(35),

	hcs_$delete_acl_entries entry(char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$add_acl_entries entry(char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$truncate_seg ext entry(ptr, fixed bin(19), fixed bin(35)),
	bc fixed bin(24),
	msf_manager_$open entry(char(*), char(*), ptr, fixed bin(35)),
	msf_manager_$get_ptr entry(ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35)),
	msf_manager_$adjust entry(ptr, fixed bin, fixed bin(24), bit(3), fixed bin(35)),
	msf_manager_$close entry(ptr),
	msf_manager_$acl_add entry(ptr, ptr, fixed bin, fixed bin(35)),
	msf_manager_$acl_delete entry(ptr, ptr, fixed bin, fixed bin(35)),
	fcbp ptr,
	bit_count fixed bin(24),
	mode bit(36) aligned,
	hcs_$set_bc_seg ext entry(ptr, fixed bin(24), fixed bin(35)),
	dir char(168),
	enm char(32),
	hcs_$terminate_noname ext entry(ptr, fixed bin(35)),
	component fixed bin,
	get_group_id_ ext entry returns(char(32) aligned),
	get_group_id_$tag_star ext entry returns(char(32) aligned),
	get_system_free_area_ ext entry returns(ptr);

%page;
/*  The get_segment entry returns a pointer to segment dirname>ename.  The
     segment will have "rw" access to the current user.  If an old acl had to be
     changed to do this, aclinfop is set pointing to information for reseting
     the acl. */


get_segment:
	entry(dirname, ename, segp, aclinfop, code);


	segp, aclinfop = null;			/* initialize ptrs to show no allocation done */

	if areap = null then areap = get_system_free_area_();

	dir = dirname;				/* copy path name arguments */
	enm = ename;

	call hcs_$make_seg(dir,enm,"",01100b,segp,code); /* try to make seg */
	if segp = null then return;			/* bad error */

	on cleanup call free_acl_info;

	allocate info_bead in(free_area) set(aclinfop);	/* grab some storage */

	aclinfop->info_bead.dirname = dir;		/* save the pathnames */
	aclinfop->info_bead.ename = enm;

	if code = 0 then do;			/* we made the seg save some info */
	     info_bead.made_seg = "1"b;
	     info_bead.mode = "110"b;			/* save mode */

	end;
	else do;					/* we did not make it */
	     info_bead.made_seg = "0"b;
	     info_bead.mode = "0"b;

	     call term_$nomakeunknown(segp,code);	/*term it, but save segno */

	     if code ^= 0 then do;
		if code ^= error_table_$seg_unknown then
		if code ^= error_table_$nolinkag then return;
		code = 0;
	     end;

	end;
	call add_acl;					/* add Person.project.tag to acl of segment */
	if code ^= 0 then return;

	if ^info_bead.made_seg then call hcs_$truncate_seg(segp,0,code);
	return;					/* all done now */

%page;
/*  The get_file entry returns a pointer to component 0 of file dirname>ename.  The
    file will have "rw" access to the current user.  If an old acl had to be changed
    to set the access to "rw", then aclinfop will be left pointing to information
    needed to reset the acl.  */


get_file:
	entry(dirname, ename, segp, aclinfop, fcbp, code);

	segp, aclinfop, fcbp = null;				/* init ptrs to indicate that we haven't allocated	*/
          code = 0;

	if areap = null then areap = get_system_free_area_();	/* grab area */

	dir = dirname;					/* copy path name arguments */
	enm = ename;

	on cleanup begin;					/* in case returned around, want to clean up */
	     call free_acl_info;
	     call free_fcb;
	end;

	call msf_manager_$open(dir, enm, fcbp, code);
	if fcbp = null then return;                                 /* return the code value indicating the reason for opening failure */

	call msf_manager_$get_ptr(fcbp, 0, "1"b, segp, bc, xcode);
	if segp=null then do;
	   call free_fcb;
	   code = xcode;
	   return;
	   end;

	allocate info_bead in (free_area) set (aclinfop);		/* save ptr to acl, acl_count, and set user ptr */

	aclinfop->info_bead.dirname = dir;			/* save the pathnames */
	aclinfop->info_bead.ename = enm;

	if code ^= 0 then do;				/* we made the seg so.. */
	     info_bead.made_seg = "1"b;
	     info_bead.mode = "101"b;				/* put on by msf_manager_ */
	end;
	else do;						/* was there so do other things */
	     info_bead.made_seg = "0"b;
	     info_bead.mode = "0"b;
	     call msf_manager_$adjust(fcbp,0,0,"110"b,code);	/* truncate seg to 0 */
	end;

	call add_acl;					/* add rw for P.P.tag to segment */

	return;						/* that's it */

%page;
/* The following two internal procedures are used through out tssi_ to free allocated storage. */


free_acl_info:
	proc;



	if aclinfop^=null then				/* if aclinfop was set, then free the bead */
	free aclinfop->info_bead in (free_area);

	end free_acl_info;



free_fcb:
	proc;


	if fcbp^=null then					/* if a fcb was allocated, then free it */
	call msf_manager_$close(fcbp);


	end free_fcb;

%page;
/*  The finish_segment entry is used to set the bitcount on the segment after the translator
    is finished with it.  It also resets the acl, if an old one exists.  If one did not,
    then if mode="110"b then the acl is changed to "re", else it is left "rw".  It also terminates
    the segment.  */


finish_segment:
	entry(segp, bit_count, mode, aclinfop, code);

	call hcs_$set_bc_seg(segp, bit_count, code);		/* set the bitcount to the value given 	*/
	if code^=0 then return;				/* if error, then give up */

	type = seg;					/* finishing up a segment, rather than a file */

	call delete_acl (code);				/* remove the acl entry for Person.Project.tag */
	if code ^= 0 then return;

	call adjust_mode;					/* make sure requested mode is on the segment */

	call free_acl_info;

	call hcs_$terminate_noname(segp,code);

	return;						/* finished */


/*  The finish_file entry is used to set the length of the file when the translator is finished
    with it.  It also resets acls like the "finish_segment" entry, and terminates the file.  */


finish_file:
	entry(fcbp, component, bit_count, mode, aclinfop, code);

	call msf_manager_$adjust(fcbp, component, bit_count, "101"b, code);/* set the bitcount and terminate */
	if code ^= 0 then return;				/* set bitcount before changing acl so we know
							  it will work*/

	type = file;					/* flag to indicate a file is being finished */

	call delete_acl (code);				/* remove acl for Person.Project.tag */
	if code ^= 0 then return;

	call adjust_mode;					/* make sure requested mode is on the file */

	call free_acl_info;					/* free info structure */

	call free_fcb;					/* free the fcb */

	return;						/* finished */

%page;
/*  The clean_up entry is called by the user in the event of him having to abnormally abort his work, and
    just frees the storage allocated for acls, if present. */


clean_up_segment:
	entry(aclinfop);

	if aclinfop = null then return;

	type = seg;					/* finishing up a segment, rather than a file */

	call delete_acl (xcode);				/* remove acl entry for P.P.t */

	call free_acl_info;

	return;						/* that's it */


clean_up_file:
	entry(fcbp, aclinfop);


	if aclinfop ^= null then do;

	     type = file;					/* flag to indicate a file is finished */

	     call delete_acl (xcode);				/* delete acl for P.P.tag */

	     call free_acl_info;

	end;

	call free_fcb;

	return;

%page;
/* The internal procedure add_acl is used to add the entry Person.Project.tag  rw for the get entries */

add_acl:
     proc;

	working_acl.process_group_id = get_group_id_();	/* set up acl for Person.Project.tag */
	working_acl.mode = "101"b;
	working_acl.mbz1, working_acl.mbz2 = "0"b;

	call hcs_$add_acl_entries(dir,enm,addr(working_acl),1,code); /* do it */


     end add_acl;






/* The internal procedure delete_acl is used to remove the entry on the segment or msf for
   Person.Project.tag */

delete_acl:
	proc (error);

dcl	error fixed bin (35);



	dir = aclinfop->info_bead.dirname;			/* copy dirname */
	enm = aclinfop->info_bead.ename;			/* copy ename also */

	del_acl.process_group_id = get_group_id_();		/* get Person.Project.tag to del it */

	if type = seg then call hcs_$delete_acl_entries(dir,enm,addr(del_acl),1,error);
 	else call msf_manager_$acl_delete(fcbp,addr(del_acl),1,error);


     end delete_acl;
%page;
/* The internal procedure adjust_mode puts the requested mode on the the acl if the segment or msf
   was made by tssi_. */

adjust_mode:
     proc;



	if info_bead.made_seg then do;
	     working_acl.mode = substr (mode, 1, 3);		/* copy mode */
	     if info_bead.mode ^= working_acl.mode then do;	/* if different mode set it */

		working_acl.process_group_id = get_group_id_$tag_star();
		working_acl.mbz1, working_acl.mbz2 = "0"b;

		if type = seg
		then call hcs_$add_acl_entries(dir,enm,addr(working_acl),1,code);
 		else call msf_manager_$acl_add(fcbp,addr(working_acl),1,code);

	     end;

	if working_acl.mode & E_ACCESS then call fix_inacl_entries;

	end;

fix_inacl_entries:
	procedure;



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* POLICY:								*/
	/*	If the user is trying to put "re" on a new segment, then for each ACL entry	*/
	/*	which was derived from the IACL (which should be all that's on the entry by	*/
	/*	now), if the access is non-null, then if it already contains "e", we assume	*/
	/*	the user knows what she's doing;  otherwise, the corresponding user receives	*/
	/*	"re" permission to the new segment.					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



	acl_ptr = null ();
	on cleanup begin;
	     if acl_ptr ^= null then free segment_acl;
	end;

	call hcs_$list_acl (dir, enm, get_system_free_area_ (), acl_ptr, null (), acl_count, xcode);
	if xcode ^= 0 then return;			/* Can't fix initial acl? Too bad. */
	do i = 1 to acl_count;
	     if segment_acl (i).modes ^= N_ACCESS
	     then if (segment_acl (i).modes & E_ACCESS) = ""b
		then segment_acl (i).modes = RE_ACCESS;
	end;
	call hcs_$replace_acl (dir, enm, acl_ptr, acl_count, "1"b, xcode);
	free segment_acl;
	return;

declare 1 segment_acl (acl_count) aligned based (acl_ptr),
	2 access_name	    char (32),
	2 modes		    bit (36),
	2 xmodes		    bit (36),
	2 status_code	    fixed binary (35);

declare	acl_ptr pointer;
declare  (acl_count, i) fixed binary;


	end fix_inacl_entries;

%include access_mode_values;

     end adjust_mode;

	end tssi_;
