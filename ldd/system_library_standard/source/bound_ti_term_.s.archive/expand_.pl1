/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


expand_:proc(path,ent,segp1,bit_count,segp2,bit_count2,val);

	/* expand_ does the real work of implementing % include ; statements. This entry point is called 
	directly by the expand command and assembler and pl1.  Most of the actual work is done inside the 
	recursive internal procedure work. Whenever an include statement is recognized, work calls
	itself. There is no possibility of getting into an infinite loop by having an include file
	include itself because this error is checked for. There are some things that work does not do
	the first time it is called in an invocation of expand_. This is implemented by providing
	two entry points to work, one called work_first and the other called work.

	Most of the time expand_ is able to recover from errors in the ascii file it is expanding.
	Since expand_ follows sss conventions, it reflects the error code of the last serious error.
	Due to this, the caller of expand_ can't tell from the error code whether expand found
	a fatal error, since the only fatal errors are file system errors that do not allow the 
	expanded segment to be made or truncated. Therefore, a caller of expand_ should check segp2.
	if this pointer is null, then there was a fatal error, otherwise expand_ put something in the 
	expanded segment correctly(that is, expand operated correctly) even if the bit count of the
	expanded segment is zero.

	segp is a pointer that is static with respect to work to aid in the generation of error messages.

	pwork is a pointer that points to the expanded segment - it is easier to access than segp2.

	revi is at first used in finding the suffix. Later it is used with segp in error messages.

	outi is the number of characters that have been put into the expanded segment. It must be static
		with respect to work.

	suffix is a varying string that contains the suffix  that is on ent. This tells us what syntax
		to assume the ascii file is in and also helps specify names of include files.

	bit_count is the bit count of the file to be expanded.

	bit_count2 is the bit count of the expanded segment.

	segp1  is a pointer to file to be expanded. It is a parameter and is hard to access.

	segp2 is a pointer to the expanded segment. It is a parameter and is not used
		for accessing that segment inside expand_.

	val is the parameter that is the error code we want to return.

	code is what we use to find out about errors in routines we call.

	i is a variable we don't really need except for ease of understanding the program. It is a temporary.

	level is used to keep track of what level of recursion we are working on at present.

	major_init is a flag that tells us whether we are dealing with assembler or pl1 syntax."1"b means assembler syntax,
		"0"b means pl1 syntax.

	path holds the directory path name that is searched for include files before ">library_dir_dir>include"
		is searched. 
							*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


	dcl null builtin;
	dcl (com_err_, com_err_$suppress_name, ioa_) entry options (variable);
dcl  hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin);
dcl  hcs_$set_bc entry (char (*) aligned, char (*) aligned, fixed bin (24), fixed bin);
dcl  hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (24), fixed bin (2),
     ptr, fixed bin);
	dcl (bit_count,bit_count2) fixed bin(24),(segp,segp1,segp2,pwork) ptr;
	dcl (val,code,revi,i) fixed bin(17);
	dcl (outi,level) fixed bin(17),(ent, group_id, wkent)char(32) aligned;
	dcl major_init bit(1) aligned init("0"b);
	dcl path char(168) aligned;
	dcl proj_incl_dir char(168) aligned;
	dcl proj_incl_dir_init bit(1) aligned initial("0"b);
	dcl suffix char(32) aligned varying init ("");
	dcl (error_table_$namedup,error_table_$zero_length_seg,error_table_$badsyntax,error_table_$recursion_error,
		error_table_$entlong) ext fixed bin(17);

	dcl get_group_id_$tag_star external entry returns (char(32));
	dcl hcs_$truncate_seg ext entry(ptr,fixed bin(17),fixed bin(17));

	segp2=null;
	outi,level,val,bit_count2=0;

		/* revi=reverse_index(ent,".",0); I generate code for this routine.*/
	do revi=32 by-1 while(revi>0&substr(ent,revi,1)^=".");	/* find the last suffix, if any */
	end;

			/*locate the suffix*/
	if revi>0 then do;

		i=index(substr(ent,revi)," ");

		if i=0 then i=33-revi;

		suffix = substr(ent,revi,i-1); /* get suffix*/

		end;

		else do; /* probably an error - no suffix - continue any way, though */

			revi=index(ent," "); /*find size of file name*/
			if revi=0 then revi=33;

			end;

	if suffix=".eplbsa"|suffix=".alm" then major_init="1"b;/*is it an eplbsa
						or a pl1 type expand?*/

	wkent=substr(ent,1,revi-1)||".ex"||suffix; /* generate name of expanded file*/

	if (revi+length(suffix))>30	/* if (revi-1 + 3 + length(suffix)>32 - only faster */
	then do;		/* it is an error if the new name is longer than 32 chars */

	     code=error_table_$entlong;	/* Entry too long */
	     go to error;

	     end;

	call hcs_$make_seg(path,wkent,"",11,pwork,code);	/* get expanded segment */
	if code = error_table_$namedup then call hcs_$truncate_seg(pwork,0,code);
	if pwork=null then go to error;

	segp2=pwork;		/* set parameter */

	call work_first;/* special entry point for work when it is first called*/

	bit_count2=outi*9;

	if outi=0 & val=0 then val=error_table_$zero_length_seg;

	call hcs_$set_bc(path,wkent,bit_count2,code);	/* set the bit count on the expanded segment */

	if code^=0
	then 
error:		do;

		call com_err_(code,"expand_","^a^/",wkent);

		val=code;

		end;

	/* This is where the internal procedure work begins. There are no more statements in expand_ proper. */

work:proc(nmp,nmn,checkp) recursive;

	/*
	This is where most of the work is done.
	This entry point is only used for recursive calls to work.

	The code that appears between here and the entry work_first is only executed when processing
		an include statement.

	quote is used in assembler syntax to remember what the quoting character of an acc or aci pseudo-op was.

	opcode is used in assembler syntax to get the opcode in a convenient location for checking against
	"acc","aci",and "include".

	start_item is used to remember where a statement or comment or quote begins for use in 
		diagnostics.

	i is the variable in the huge loop that looks at each character. It tells which character in the 
		present file is being looked at.

	k has two uses. 1) as a flag to tell whether we are in the midst of an identifier
		2) to remember where an identifier begins, so we will be able to look at it when we have
			come to the end of the identifier.

	n tells the number of characters in the file.

	lineno tells us which line we are presently looking at.

	start_id is used in much the same way that k is used.

	lasti is used to tell which character in the present file was the last one sent to the expanded segment.
		In order to delete some characters from the expanded segment, merely call output_text
		and then update value of lasti to skip over a part of the file being scanned.
	size is used to tell how large various identifiers are. It is usually used in conjunction with k.

	c is an easily accessable place that contains the character in the file that is presently being looked at.
		i tells where in the current file this character came from.


		There are several different states that work can be in when it considers one
		character. For example, are we inside of a comment? are we using pl1 or assembler syntax?, etc.
		These different states are implemented by four label variables, called major_state,minor_state,
		pct_break, and pct_finish. The main use of major_state is to distinguish between pl1 and ma
		syntax and also to ignore include statements inside comments and/or quoted strings.
		Minor_state is used to distinguish between processing inside and outside of an
		include statement. Pct_break is transferred to whenever a blank or tab is found 
		right after an identifier. Pct_finish is transferred to whenever the end of
		statement character is encountered if we care. Pct_break and pct_finish are only
		transferred to if we care whether we just finished an identifier or statement.
		For example, in pl1 syntax where statements begin and end is not kept track of
		except for include statements, while for eplbsa, the statements are kept track
		of.

	switch is a structure containing several flag bits. qcomment is used for deciding
		whether a possible missing quote diagnostic has been given for this quotation.
		percent_flag tells us whether we are in a percent statement in eplbsa. The
		end_file_flag tells us whether we are ready to reach the end of the file or not.
		"1"b means that, for qcomment, the diagnostic has been given, for percent_flag
		we are in an include statement, for end_file_flag, we are not ready to end the file.

	bc contains the bit count of the file being considered.

	nmp was set from i before work was called.

	nmn was set as nmp was.

	checkp points to chain_link in the previous stack frame.

	chain_link is a structure that allows us to check for recursion error. Since there are no conditionals
		in include statement processing, any loop of includes that closes on itself, of
		any length, will cause infinite recursion.
		segpt points to the include file in this level. It is used as such all during
			work.
		backpt points to chain_link in the previous stack frame. If there is no previous stack frame 
			of work, then backpt is null.
		entr contains the entry name of the current include file. It is mostly for diagnostics. The 
			reason it is in this structure is so that if the next invocation of work
			can't initiate it's include file, not only can the error message say which
			file had a file system error, but also which line in which include file caused the 
			error.
		startline contains the line on which a statement started, if we know we are at a statement.

	text is a character string consisting of the entire segment that we are processing.

	nm tells us how to find the name of the include file directly from the ascii segment
		containing the include file.

	texti is thetext, only for the previous invocation of work. It is just for the purpose 
		of using nmn and nmp to get a pointer to nm.
							*/

	dcl hcs_$terminate_noname ext entry(ptr,fixed bin(17));
	dcl find_include_file_$initiate_count entry (char (*), ptr, char (*) aligned, fixed bin (24), ptr, fixed bin (17));
	dcl quote char(1) aligned;	/* quote char for acc and aci statements in EPLBSA */
	dcl opcode char(7) varying aligned ;
	dcl (start_item,i,k,n,lineno,start_id,lasti,size) fixed bin(17);
	dcl c char(1) aligned;

	dcl  major_state     label local;

	dcl  minor_state     label local;

	dcl pct_finish       label local;

	dcl pct_break        label local;

	dcl 1 switch aligned,
		2(qcomment,percent_flag,end_file_flag) unaligned bit(1);

	dcl (indx, num_chars) fixed binary(17);		/* used in evaluating person's project */
	dcl bc fixed bin(24);
	dcl (nmp /*tells where in the segment of the previous generation the name of the
		include file for this generation is*/,nmn /*tells the number of characters in the
		name*/)fixed bin(17),checkp ptr /*links the chainof recursive calls together*/;
	dcl 1 chain_link aligned auto,
		2 segpt ptr,  /* points to the text segment*/
		2 backpt ptr,  /* points to the previous generation*/
		2 entr char(32) aligned,	/* for diagnostics */
		2 startline fixed bin(17);
	dcl 1 chain aligned based(chain_link.backpt),
		2 segptr ptr,
		2 backp ptr,
		2 entr1 char(32) aligned,
		2 startline1 fixed bin(17);
	dcl text char(n) aligned based(segpt),nm char(nmn) based(segpt),texti(nmp) char(1) based;

print_key:proc(mess1,mess2,incr);
	/*
	Print_key is used to print out most of the diagnostics for work.

	It is in charge of making sure that the header for error messages is correct at all times.

	There are two entry points,print_key and print_error. The basic difference is that print_key 
		prints out part of the include file and has a two part variable message while
		print_error just has a one part error message and is just used to give miscellaneous
		or simple error messages.
							*/

	dcl statement char(52) aligned varying;
	dcl (mess1,mess2) char(*),incr fixed bin(17),print_switch bit(1) aligned;

	print_switch="0"b;

	go to print_maybe;

print_error:entry(message);

	dcl message char(*);

	print_switch="1"b;

print_maybe:
	if segp^=segpt|revi^=level	/* Only print this message once per call to work */
				/* segp and revi are static wrt work and so remember the 
				last segment and level for which this message was typed */
	then do;

	     call ioa_("expand_: Error in ^a at level ^d.^/",entr,level);

	     segp=segpt;
	     revi=level;		/* remember the segment and level for which message typed */

	     end;

	if print_switch="0"b

	then do;
	     statement=substr(text,start_item,i-start_item+incr);	/*This makes sure I grab
								no more than 52 characters*/
	     call com_err_$suppress_name(0,"expand_","	^a (starting on line ^d) ""^a"" ^a.^/",mess1,startline,
		statement,mess2);
	     end;

	else
	     call com_err_$suppress_name(0,"expand_","	^a on line ^d.^/	Expansion will continue.^/",message,lineno);

	if val=0 then val=error_table_$badsyntax;

end print_key;

output_text:proc;

	dcl out_text char(j) based(pwork),(j,nout) fixed bin(17);

	nout=i-lasti-1;

	if nout<=0 then return;

	j=outi+nout;

	substr(out_text,outi+1,nout)=substr(text,lasti+1,nout);

	outi=j;

end output_text;

	segpt=addr(checkp->segptr->texti(nmp)); /* find out where nm begins*/

	entr=nm||".incl"||suffix;

	backpt=checkp;
		/*perform search - first of wdir then of projects include dir, then of >ldd>include*/

	if (nmn+length(suffix))>27		/* if length(nm||".incl"||suffix)>32 */
	then do;

	     code=error_table_$entlong;	/* Entry too long. */
	     go to too_long;

	     end;

	call find_include_file_$initiate_count (substr (suffix, 2), chain.segptr, entr, bc, segpt, code);
	if segpt=null then do;

too_long:	     if segp^=chain.segptr | revi^=level
	     then do;


		call ioa_("expand_: Error in ^a at level ^d.^/",chain.entr1,level);

		segp = chain.segptr;
		revi = level;		/* write header for error messages and remember */

		end;

	     call com_err_(code,"	expand_","^a, due to include statement starting on line ^d.^/",
		entr,chain.startline1);

	     val=code;

	     return;
	     end;

	do i=1 by 1 while(chain.backp^=null);
			/* check for recursion error - don't check against original source*/

		if chain.segptr=chain_link.segpt
		then do;

		     val=error_table_$recursion_error;	/* fatal error*/

		     call com_err_(0,"expand_","Recursion of include files starting with ^a is ^d levels deep.^/",
		     entr,i);

		     return;
		     end;

		chain_link.backpt=chain.backp;

	end;

	chain_link.backpt=checkp;

	go to start_work;

work_first:entry;

	backpt=null;
	segpt=segp1;
	entr=ent;
	bc=bit_count;

	segp=null;
	revi=0;		/*revi and segp are used by the print_key and print_error routines to decide
			whether it is necessary to type out the name of the file and the level
			number for an error message - need a variable that tis static with respect
			to work */


start_work:


	start_id,start_item,k,lasti=0;
	percent_flag,end_file_flag = "0"b;	/* flags that are used to determine state */
	if bc<9 then go to term_seg;

	n=divide(bc,9,35,0);

	level=level+1;

	if major_init="1"b
	then do;

		major_state=eb_major;
		minor_state=eb_new_stmt;
		pct_break=eb_have_opcode;
		pct_finish=eb_early_eos;

	     end;

	else do;

		major_state=any;
		minor_state=usual;

	     end;


	lineno,startline=1;

		/* Initialization all done - ready for work loop */

loop:	do i=1 to n;

	c=substr(text,i,1);  /* this is a huge loop that looks at each character in the file. If we look
			so hard, we need easy access to the character under consideration*/

	go to major_state;/* a label variable is more efficient than a constant transfer vector*/

any:	/* major_state - normal running */

	if c = "/"
	then if i<n
		then if substr(text,i+1,1)="*"	/*is this the beginning of a comment?*/
			then do;

				major_state=in_commnt;
				end_file_flag = "1"b;	/* can't end this way */

				if ^percent_flag		/* if we are not in a percent statement */
				then do;
				     startline=lineno;
				     start_item=i;
				     end;
				else if start_id ^= 0 then go to pct_break;

				i=i+1;	/* Skip over "*" unless it interfers with pct_break*/

				go to not_nl;

				end;

	go to minor_state;

in_commnt:	/* major_state - inside a comment */

	if c="*"
	then if i<n
	     then if substr(text,i+1,1)="/"
		then do;

		     i=i+1;	/* Skip over "/" */
		     major_state=any;
		     end_file_flag = "0"b;		/* can end this way */

		     go to not_nl;

		     end;

	go to next;

in_quote:	/* major_state - inside a quoted string */

	if c=""""
	then do;

	     if i<n
	     then if substr(text,i+1,1)=""""
		then do;

		     i=i+1;	/* Skip over quoted quote for unpaired quote diagnostic */

		     go to not_nl;

		     end;
	     major_state=any;
	     end_file_flag="0"b;

	     end;

	if c="
"		/* newline - check for possible error */
	then if qcomment="0"b
	     then do;

		if suffix=".pl1"
		then do;

		     if (i-start_item)>256
		     then 

print_miss_quote:		do;

			qcomment="1"b;

			call print_key("Probable missing quote","",1);

			end;

		     end;

		else go to print_miss_quote;

		end;

	go to next;

	/* Minor states - only transferred to by major state any */

usual:	/* minor_state - not in a % statement or comment or quote*/

	if c = "%"

	then do;

		call output_text;

		startline=lineno;
		start_item=i;	/* used in diagnostics */
		start_id=0;
		pct_break=form_include;
		pct_finish=null_pct;
		minor_state=in_pct;
		percent_flag="1"b;		/* we are now in a percent statement in pl1 syntax */

		go to not_nl;

		end;

	else if c=""""
		then do;

		major_state=in_quote;
		end_file_flag="1"b;
		start_item=i;
		startline=lineno;
		qcomment="0"b;

		go to not_nl;

		end;

	go to next;

in_pct:	/* minor_state - inside % statement. Don't ignore quoted strings anymore */

	if c=";"
	then go to pct_finish;

	if c <= " "	/* checks for blank,newline,tab all at once */
	then if start_id ^= 0
		then go to pct_break;
		else go to next;

	if start_id=0 then start_id=i;	/* we are either at the beginning or in the middle of an atom*/

	go to not_nl;

	/* Termination states for processing "%" */

have_name:	/* pct_finish - have now seen "include" and a name and maybe more */

	if start_id ^= 0
	then call print_key("Extra items in ""include"" statement
	","ignored",1);

recurse:	call work(k,size,addr(chain_link));

	go to pct_clean;

null_pct:	/* pct_finish - null % statement */

	if start_id^=0
	then go to bad_pct;

pct_clean:
	lasti=i;
	minor_state=usual;
	percent_flag="0"b;		/* we are out of the percent statement */
	start_id=0;

	go to not_nl;

bad_pct:	/* pct_finish - illegal */

	call print_key("Illegal construction","deleted",1);

	go to pct_clean;	/* clean up anyway */

finish_name:	/* pct_finish - name ends with a ";" */

	k=start_id;
	size=i-start_id;

	go to recurse;

	/* States to process break characters */

form_include:	/* pct_break - have gotten "include" */

	if substr(text,start_id,i-start_id)="include"
	then do;

	     pct_break=form_name;
	     pct_finish=finish_name;

	     end;

	else do;

	     pct_break=next;	/* ignore any future break characters */
	     pct_finish=bad_pct;	/* Yell when the statement is finished*/

	     end;

fin_break:
	start_id=0;

	if c="/"
	then do;

	     i=i+1;	/* didn't increment i to skip * so I could use i in substr above*/

	     go to not_nl;

	     end;

	go to next;

form_name:	/* pct_break - have just received a break char for the name - remember where name is */

	k=start_id;
	size=i-start_id;
	pct_break=next;	/*ignore any further breaks */
	pct_finish=have_name;

	go to fin_break;


/* New states for recognizing "include" pseudo-op in EPLBSA syntax */

eb_major: /* major_state - processing normal statement */

	if c = ";"
	then go to pct_finish;

	if c = "
"		/* newline */
	then go to pct_finish;		/* End of statement delimiters */

	go to minor_state;		/* something else, see who has his hand up */

eb_ascii: /* major_state - handling quoted string in ACC or ACI pseudo-ops */

	if c = quote
	then if i < n
	     then if substr(text,i+1,1) = quote
		then i = i + 1;			/* doubled quote means insert quote character */
		else do;

		     major_state=eb_major;
ignore_to_EOS:	     pct_finish = eb_normal_eos;	/* at EOS ignore whatever opcode was */
ignore_rest_of_stmt:	     minor_state = not_nl;		/* at EOS do whatever opcode demands */

		     end;

	go to next;


eb_new_stmt: /* minor_state */

	if c = ":"
	then do;

	     if k = 0
	     then do;

err_c:		call print_error("Error in syntax involving <"||c||">");

		end_file_flag = "1"b;	/* we are in a statement - cannot end without eos */

		end;

	     else k=0;			/* legitimate label, reset and restart */

	     go to not_nl;

	     end;

eb_get_opcode: /* minor_state */

	if c = "%"
	then if k ^= 0
	     then go to err_c;		/* a % in the middle of an identifier - comment and continue */
	     else do;

		start_id = i;		/* save */
		i = start_item;		/* start_item is the beginning of the present statement */
		call output_text;
		i = start_id;		/* restore */
		lasti = i;		/* drop "%" from segment */

		end_file_flag = "1"b;	/* we are in a statement */

		go to not_nl;

		end;

	if c = """"
	then if k ^= 0
	     then go to err_c;		/* .. */
	     else do;

		end_file_flag = "1"b;	/* we are in statement */

		go to ignore_rest_of_stmt;

		end;

	if c <= " "	/* checks for blank, tab all at once */
	then if k ^= 0
	     then go to pct_break;
	     else go to not_nl;

	if k=0 then do;
		k=i;
		end_file_flag="1"b;

		end;

	go to not_nl;

eb_get_ascii_quote: /* minor_state - looking for quoting char */

	if c > " "	/* not blank,tab,etc */
	then do;

	     quote = c;
	     major_state = eb_ascii;

	     end;

	go to not_nl;

eb_early_eos: /* pct_finish */

	if k ^= 0
	then do;

	     size=i-k;

	     if size <= 7
	     then do;

		opcode = substr(text,k,size);

		if opcode ^= "acc"
		then if opcode ^= "aci"
		then if opcode ^= "include"	/* if opcode^="acc"&opcode^="aci"&opcode^="include" */
		then 

eb_normal_eos: /* pct_finish */
			do;

			start_item = i + 1;
			if c = "
"				/* newline*/
			then startline = lineno + 1;		/* For diagnostics */
			else startline = lineno;		/* Rarely */
			k = 0;
			major_state=eb_major;
			end_file_flag="0"b;		/* end of statement - we can end file now */
			minor_state = eb_new_stmt;
			pct_break = eb_have_opcode;
			pct_finish = eb_normal_eos;

			go to next;

			end;

	/* error, opcode requiring operand followed by EOS */

		call print_error("Opcode "||opcode||" requires operand");

		end;
	     end;

	go to eb_normal_eos;	/* random opcode - don't care */

eb_include_eos: /* pct_finish */

	if k^=0 & size=0 then size=i-k;

eb_include_eos_x: /* pct_finish */

	/* include statement completed, now the fun begins */

	start_id = i;		/* save value */
	i = start_item;		/* fudge for output_text */

	call output_text;

	if k=0
	then call print_error("Segment-name missing from ""include"" statement");
	else call work(k,size,addr(chain_link));		/* recurse */

	i = start_id;
	lasti = i;
	go to eb_normal_eos;

eb_have_opcode: /* pct_break */

	size = i - k;
	if size <= 7
	then do;

	     opcode = substr(text,k,size);

	     if opcode = "acc"
	     then do;

set_acc:		minor_state=eb_get_ascii_quote;	/* looking for quote */
		go to next;

		end;

	     if opcode = "aci"
	     then go to set_acc;

	     if opcode = "include"
	     then do;

		size=0;
		k = 0;		/* start collecting */
		pct_finish = eb_include_eos;
		minor_state = eb_get_opcode;		/* don't look for labels */
		pct_break = eb_have_include_name;

		go to not_nl;

		end;
	     end;

	/* we're not interested, ignore to EOS */

	go to ignore_to_EOS;

eb_have_include_name: /* pct_break */

	if size=0 then if k^=0	/* if size=0 & k^=0 */
	then do;

	     size=i-k;

	     minor_state = not_nl;	/* leave name undisturbed */
	     pct_finish = eb_include_eos_x;

	     end;

	go to not_nl;

/* End of loop, all states described */

next:	if c="
"		/*newline*/
	then lineno=lineno+1;

not_nl:	end loop;

	if ^(end_file_flag | percent_flag)
	then call output_text;
	else do;
	     start_id=start_item;	/* Set variables for call to print_key */
	     start_item = i;	/* Save for call to output_text */
	     i = start_id;		/* Only move up to before error */

	     call output_text;	/* copy out any characters before error */

	     i = start_item;	/* restore */
	     start_item = start_id;

	     call print_key("Unbalanced comment or quote or improper ""%"" sequence
	","deleted",0);

	     end;

	level=level-1;

term_seg:
	if level^=0
	then do;
	     call hcs_$terminate_noname(segpt,code);
	     if code^=0
	     then do;
		val=code;
		call com_err_(code,"expand_","^a^/",entr);
		end;
	     end;

end work;
end expand_;
