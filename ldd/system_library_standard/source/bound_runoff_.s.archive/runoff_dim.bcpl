//  This module implements the defined I/O system calls for the runoff_ dim.
//  Last modified on 05/30/74 at 18:42:47 by R F Mabee.
//
//  Routines defined in this module:
//	SetModes		Fetch mode string and set modes.
//	GetModeArg	Scan mode string for next field.
//	OldModes		Store settable modes in PL/I arg string.
//	StNum		Store numeric mode.
//	StSwitch		Store on/off mode.
//	Save		Stuff globals into SDB.
//	Unsave		Retrieve globals from SDB.
//	DimAttach		Set up runoff_ attachment.
//	DimDetach		Remove runoff_ attachment.
//	DimWrite		Process some text through runoff_.
//	DimOrder		Execute control line from outside.
//	DimChangemode	Alter internal modes and get old modes.
//  Only the last five routines are external.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"
get "runoff_head"


external
     $(	DimAttach = "runoff_dim$runoff_attach"
	DimDetach = "runoff_dim$runoff_detach"
	DimWrite = "runoff_dim$runoff_write"
	DimOrder = "runoff_dim$runoff_order"
	DimChangemode = "runoff_dim$runoff_changemode"

	Ionmat = "error_table_$ionmat"
	BadMode = "error_table_$undefined_order_request"
     $)

static $( FreeSDBlist = 0 $)

global
     $(	SDB	: 70
	StatPtr	: 71
	SdbLV	: 72
	ModeArg	: 73

	Global	: 0
     $)
manifest
     $(	SdbIoname2 = 10
	SdbSave = 20
	SaveLen = 250
	SdbLength = 250 + 20
     $)

let SetModes (n) be
     $(	let OldChars, OldDevice, OldPaging, OldControl, OldFill = Charsw, Device, NoPaging, NoControl, NoFill
	ModeArg := vec 128
	Pl1ArgString (n, ModeArg)
	ArgIndex := 1
	let Names = list "device", "margin", "chars", "pagination", "control",
			"fill", "hyphenate", "number"
	and Pointers = list lv Device, lv ExtraMargin, lv Charsw, lv NoPaging, lv NoControl,
			lv NoFill, lv Hyphenating, lv PrintLineNumbers
	and Flags = table OptConvert, OptConvert, OptNegatable, OptNegatable | OptNegate, OptNegatable | OptNegate,
			OptNegatable | OptNegate, OptNegatable, OptNegatable

	OptionParse (GetModeArg, 8, Names, Pointers, Flags, 0)

	if OldChars neqv Charsw do SetCharsw (Charsw)
	if OldDevice ne Device do SetDevice (Device)
	if OldPaging neqv NoPaging do SetPaging (NoPaging)
	if OldControl neqv NoControl do LIno := NoControl -> 1000000, 0
	if OldFill neqv NoFill do Fi := not NoFill
     $)
and GetModeArg (v) = valof
     $(	let Len = Length (ModeArg)
	while ArgIndex le Len & Subch (ModeArg, ArgIndex) = '*s' do ArgIndex := ArgIndex + 1
	if ArgIndex > Len resultis false
	let First = ArgIndex
	while ArgIndex le Len & Subch (ModeArg, ArgIndex) ne '*s' do ArgIndex := ArgIndex + 1
	Substr (v, ModeArg, First, ArgIndex - First)
	resultis true
     $)
and OldModes (n) be
     $(	let v = vec 128
	SetLength (v, 0)
	StNum (v, "device", Device)
	StNum (v, "margin", ExtraMargin)
	StSwitch (v, "chars", Charsw)
	StSwitch (v, "pagination", not NoPaging)
	StSwitch (v, "control", not NoControl)
	StSwitch (v, "fill", not NoFill)
	StSwitch (v, "hyphenate", Hyphenating)
	StSwitch (v, "number", PrintLineNumbers)
	let Sp, Desc = Pl1ArgPtr (n), Pl1Descriptor (n)
	MakePl1String (v, Sp, Desc & Right)
     $)
and StNum (Space, Name, Value) be
     $(	let v = vec 20
	Concatenate (Space, 511, Space, "-", Name, "*s", ConvertNtoS (Value, v), "*s")
     $)
and StSwitch (Space, Name, Value) be
     $(	let b = Value -> "-", "-no_"
	Concatenate (Space, 511, Space, b, Name, "*s")
     $)

and Save () be for i = 0 to SaveLen do SDB!(SdbSave + i) := (lv Global)!i
and Unsave (n) be
     $(	let Sptr = Pl1ArgPtr (1)
	let s = BCPLaddr (Sptr)
	for i = 32 to SaveLen do (lv Global)!i := s!(SdbSave + i)
	StatPtr := Pl1ArgPtr (n)
	StatPtr!0, StatPtr!1 := 0, 0
	SdbLV := Sptr
     $)

let DimAttach () be main	//  call attach (ioname1, dimname, ioname2, mode, status, sdbptr)
     $(	Errcode, ProgramID := 0, "runoff_dim"
	StatPtr := Pl1ArgPtr (5)
	StatPtr!0, StatPtr!1 := 0, 0
	SdbLV := Pl1ArgPtr (6)
	unless BCPLaddr (SdbLV) = Null do
	     $(	StatPtr!0 := rv Ionmat
		return
	     $)

	SDB := FreeSDBlist
	test SDB = 0
	then SDB := Allocate (SdbLength + 10000)
	or FreeSDBlist := SDB!0

	NewvecInit (SDB + SdbLength, 10000 - 2)

	let Arg = vec 200
	MakePl1String (Pl1ArgString (2, Arg), SDB, 32)
	ITS (ITS (Null, SDB + SdbIoname2), SDB + 8)
	MakePl1String (Pl1ArgString (3, Arg), SDB + SdbIoname2 + 3, 32)
	SDB!(SdbIoname2+2) := Length (Arg)

	MONITOR, OUTPUT := Open (StreamName + Write, "error_output"), Open (StreamName + Write, Arg, 1000, 0)
	Output := OUTPUT
	CONSOLE := 0
	Errorstream, ChStream := MONITOR, 0
	Waitsw, Stopsw, Filesw := false, false, false
	FileName := "<stream>"
	From, To, Start := 1, 999999, 1
	Charsw, Selsw, Device := false, false, 37
	NoPaging, Hyphenating := false, false
	ExtraMargin, PrintLineNumbers := 0, false
	NoControl, NoFill := false, false
	Passes := 1
	Parameter := ""
	ErrorTempID, TimeNow := 0, 0

	InitializeSymbolTree ()
	InputStack := Newvec (MaxDepth)
	let w = vec 2
	TimeNow := TimeToSeconds (RawClockTime (w))

	Char := Newvec (Maxline * 2)
	Rawchar := Newvec (Maxline + 20)
	Rawchar!0 := 0

	Eh, Oh, Ef, Of := Newvec (Maxheads), Newvec (Maxheads), Newvec (Maxheads), Newvec (Maxheads)
	for i = 0 to Maxheads do Eh!i, Oh!i, Ef!i, Of!i := 0, 0, 0, 0

	Conv, TrTable, DeviceTable, CharsTable := Newvec (128), Newvec (128), Newvec (128), Newvec (128)
	for i = 0 to 127 do CharsTable!i := '*s'
	FillTrTable ()
	SetDevice (Device)

	Footbuf := Newvec (Maxline + 20)
	Temp := Newvec (Maxline * 2)

	SetSwitches ()
	SetModes (4)

	Save ()
	ITS (SDB, SdbLV)
     $)
and DimDetach () be main		//  call detach (sdbptr, ioname2, disp, status)
     $(	Unsave (4)
	Break ()
	Eject ()
	unless OUTPUT = 0 do Close (OUTPUT)
	unless ChStream = 0 do Close (ChStream)
	Close (MONITOR)
	SDB!0 := FreeSDBlist
	FreeSDBlist := SDB
	NewvecCleanup ()
	ITS (Null, SdbLV)
	StatPtr!0, StatPtr!1 := 0, $84000000
     $)
let DimWrite () be main	//  call write (sdbptr, workspace, offset, nelem, nelemt, status)
     $(	Unsave (6)
	let Workspace, Offset, Nelem = BCPLaddr (Pl1ArgPtr (2)), rv Pl1ArgPtr (3), rv Pl1ArgPtr (4)
	Workspace := Workspace + Offset / 4
	Offset := Offset rem 4
	INPUT := Open (Pointer + Read, Workspace, Nelem + Offset)
	for i = 1 to Offset do Readch (INPUT, lv Ch)
	RoffProcess (INPUT)
	Writeout (Output)
	Save ()
	rv Pl1ArgPtr (5) := Nelem
     $)

let DimOrder () be main	//  call order (sdbptr, request, pointer, status)
     $(	Unsave (4)
	let Arg = vec 200
	Pl1ArgString (2, Arg)
	Unpackstring (Arg, Rawchar)
	Nr := Rawchar!0
	Rawchar!0 := 0
	Rawchar!(Nr + 1) := '*s'
	while Rawchar!Nr = '*s' do Nr := Nr - 1
	test Rawchar!1 = '.'
	then Control ()
	or if Rawchar!1 = '%' do
	     $(	let Retptr = BCPLaddr (Pl1ArgPtr (3))
		Nrx, Nr := 1, Nr + 1
		Check_ref ()
		rv Retptr := ReadParam (0)
	     $)
	Nr := 0
	Save ()
     $)
and DimChangemode () be main		//  call changemode (sdbptr, newmode, oldmode, status)
     $(	Unsave (4)
	OldModes (3)
	SetModes (2)
	Save ()
     $)
