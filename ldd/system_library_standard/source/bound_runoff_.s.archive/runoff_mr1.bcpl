//		Roff for MULTICS
//
//  The first ROFF for Multics was written in March, 1969, by
//  Doug McIlroy of Bell Labs.  Art Evans made extensive
//  modifications to it in May and June, 1969, adding many
//  comments and making various changes.
//  Footnoting added by Dennis Capps in 1970.
//  Maintained by Harwell Thrasher in 1971.
//  Many new features added and bugs fixed by R Mabee in 1971-1972.
//  RUNOFF and BCPL were brought over to the 6180 Multics (from 645) in May of 1973 by R F Mabee.

//  Last modified on 05/30/74 at 18:43:28 by R F Mabee.

//  The following files compose the RUNOFF command:
//	runoff_driver	the command and driver.
//	runoff_mr0	Miscellaneous utility subroutines.
//	runoff_mr1	Roff - the main routine.
//	runoff_mr2	Control line processors.
//	runoff_mr3	Routines for text printing.
//	runoff_mr4	Miscellaneous output subroutines.
//	runoff_mr5	Routines for header and footer printing.
//	runoff_mr6	Routines for footnote processing
//	runoff_mr7	Routines for the "chars" option
//	runoff_mr8	ReadExp - expression reading and evaluating subroutines.
//	runoff_mr9	Reference symbol subroutines.
//	runoff_dim	Routines for optional use of runoff as IOSIM.
//	runoff_		Outer module transfer vector for ios_ to use above.
//	runoff_head	Global and other declarations for RUNOFF.

//  This last file includes a table-of-contents, listing for each
//  routine which file it is declared in.
//  In addition, of course, the usual BCPL library is used.

//  This file contains the main program for RUNOFF on Multics.
//  Roff is called by the driver, and sets things up before calling
//  RoffProcess to do the work.  Its parameters are as follows:
//	Streams	a vector of input streams to be processed.
//	Sn	the number of streams in the vector Streams (1 to Sn).
//	OutStream	the main output stream.
//  In addition, many global variables must be set (encoding options) before Roff is entered.


//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "runoff_head"	// Include declarations for ROFF.


let Roff (Streams, Sn, OutStream) be
     $(
	Output := OutStream

// Set up buffers for input and output lines.

	Char := vec Maxline * 2		// Text buffer for output lines.
	Rawchar := vec Maxline + 20		// Buffer for input lines.
	Rawchar[0] := 0


// Establish buffer to hold one footnote line.
	Footbuf := vec Maxline + 20

// Establish a temporary storeroom for the unprocessed stuff in
// Char while a footnote is being processed.
	Temp := vec Maxline * 2

// Set up translation tables.

	TrTable, DeviceTable, Conv, CharsTable := vec 128, vec 128, vec 128, vec 128
	for i = 0 to 127 do CharsTable!i := '*s'

// Establish buffers for headers' addresses.

	Eh, Oh := vec Maxheads, vec Maxheads		//  Headers.
	for i = 0 to Maxheads do Eh!i, Oh!i := 0, 0
	Ef, Of := vec Maxheads, vec Maxheads		//  Footers.
	for i = 0 to Maxheads do Ef!i, Of!i := 0, 0

// Other initialization.

	InitializeSymbolTree ()
	InputStack := vec MaxDepth

	     $(Pass		//  Make requested number of passes. Output is produced only on last pass.
				//  This is a repeatwhile Passes > 0 loop.
	// Initialize various switches and things in global:

		SetSwitches ()

		if Passes > 1 do Fp, Lp, Print := 999999, 999999, false	//  Not final pass, suppress output.


	// Set up conversion table for output.

		FillTrTable ()

		SetDevice (Device)
		SetCharsw (Charsw)
		SetPaging (NoPaging)


	// Do all the work.

		for i = 1 to Sn do RoffProcess (Streams!i)
	

		if Ft do Foot_end ()	//  Otherwise we die.
		Break ()
		Eject () repeatuntil Fl = 0

		Freeheads (Oh)
		Freeheads (Eh)
		Freeheads (Of)
		Freeheads (Ef)

		unless Fth = 0 do Freevec (Fth)
		Freevec (FootRef)
		Freevec (TextRef)

		Passes := Passes - 1
	     $)Pass  repeatwhile Passes > 0
     $)


and SetDevice (New) be
     $(	Printersw, Selsw := false, false
	Device := New
	for i = 0 to 127 do DeviceTable!i := i
	let T = valof switchon Device into
	     $(	case 1050: case 2741: case 963:
			resultis table 6, '{', '}', '[', ']', '`', '~'
		case 041:	Selsw := true
			resultis table 2, '[', ']'
		case 015: case 012: case 088:
			Selsw := true
			resultis table 0
		case 202: case 300:
			Printersw := true
		default:	resultis table 0
	     $)

	if Selsw do
	     $(	let St = "-M;**:%m*"(>Bg.kh9y2384657#Ee b H*c
			*<P|XVUCAZO+WYJSQDFNR\TL!?I)='1 ^*c
			* p,xvucazo&wyjsqdfnr@tl$/i0    "
		if Device = 088 do St := "EMme:b*'*"(>Bg.kh912384657#**;<=%H*c
				      *-P|XVUCAZO+WYJSQDFNR\TL!?I) _ K^*c
				      * p,xvucazo&wyjsqdfnr@tl$/i0 G  "
		Unpackstring (St, DeviceTable + '*s')
		DeviceTable!'*s', DeviceTable!Skip := '*s', Skip	//  Limits of above string.
	     $)

	for i = 1 to T!0 do DeviceTable!(T!i) := '*s'
	for i = 0 to 127 do Conv!i := DeviceTable!(TrTable!i)
     $)

and FillTrTable() be
     $(	for i = 0 to $8037 do TrTable!i := Skip
	for i = $8040 to $8176 do TrTable!i := i
	TrTable!Skip := Skip
	TrTable!'*t', TrTable!'*b', TrTable!'*n' := '*t', '*b', '*n'
	TrTable!'*f', TrTable!'*d', TrTable!'*k' := '*f', '*d', '*k'
     $)
and SetPaging (New) be
     $(	NoPaging := New
	test NoPaging
	then Pl, Ma1, Ma2, Ma3, Ma4 := 1000000000, 0, 0, 0, 0
	or   Pl, Ma1, Ma2, Ma3, Ma4 := PL_, MA1_, MA2_, MA3_, MA4_
	SetLinesLeft ()
     $)

and SetSwitches () be
     $(	Fp := From	//  First page to print.
	Lp := To		//  Last page to print.
	Np := Start	//  Number to be on first page.
	NNp := Np + 1	//  Next page number.
	Print := Fp le Np le Lp & Passes le 1	//  Are we now printing?
	OddPage := Np rem 2 ne 0

	Ad := true	//  Adjust
	Again := false	//  Control line to be reprocessed
	Ce := 0		//  Do not center.
	Eq := 0		//  Do not print line as equation.
	Eqcnt := 1	//  Start equation counter at 1
	Fc := 0		//  Number of characters in Footbuf
	Fl := 0		//  Number of lines in FootList
	Flp := false	//  Pagefull override off
	Fi := not NoFill	//  Fill lines unless global override option.
	Foot := 1		//  Start footnote counter at 1
	FootList := 0	//  Top of list (growing end).
	FootListBase := 0	//  Base of list.
	Fr := true	//  Reset footnote counter at each page
	Ft := false	//  Not processing a footnote
	Fth := 0		//  Footnote demarcation.
	In := 0		//  No indenting.
	JumpLine := -1	//  Not performing goto.
	LIno := NoControl -> 1000000000, 0  //  Process control lines normally.
	Ll := LL_		//  Default line length.
	Ma1 := MA1_	//  Space above header
	Ma2 := MA2_	//  Space below header
	Ma3 := MA3_	//  Space above footer
	Ma4 := MA4_	//  Space below footer
	MultiplePagecount := 1  //  Print every page.
	Ms := 1		//  Multiple spacing
	Nc := 0		//  No characters stored yet.
	Nl := 0		//  Last used line number on page.
	NoFtNo := false	//  Number footnotes normally.
	Nr := 0		//  Count of characters in Rawchar.
	PadLeft := false	//  Start adjusting with right end.
	Pi := 0		//  Space needed for a picture.
	Pl := PL_		//  Page length, in lines.
	Roman := false	//  Print page numbers in Arabic.
	SavedCc := 0	//  Initially no character in buffer cell.
	Spec_char := '%'	//  Special character for symbol references.
	Un := 0		//  No undenting.

	FootRef := StoreString ("(%Foot%) ")
	TextRef := StoreString (" (%Foot%) ")
     $)
