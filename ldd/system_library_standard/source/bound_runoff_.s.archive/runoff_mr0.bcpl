//  This file contains miscellaneous utility programs for runoff.
//  Many of them are system-dependent by nature.
//  Last modified on 05/30/74 at 18:42:57 by R F Mabee.
//
//  Routines defined in this module:
//	Wait		Wait until line is typed in on console.
//	ConsoleReadLine	Get line from console input.
//	FixTab		Insert blanks into buffer to properly convert tab.
//	Typeout		Print body of control line on console.
//	ExecuteCommand	Pass body of control line to command processor.
//	NewOutputStream	Make new output file when current one is full.
//	SetCharsw		Turn "chars" option on or off.
//	Report		Generate error message. Save if main output is to console.
//	StoreString	Make unshared copy of string in free storage.
//	Nx_open		Stack new input stream.
//	Nx_close		Revert to previous input stream.
//	Nx_reset		Reprocess input text (file).
//	ReadLine		Get next input line from nested input streams.
//	RoffProcess	Do all the text from a given input stream.
//  Only FixTab is not external.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "runoff_head"
get "head"

external
     $(	CuCp = "cu_$cp"
     $)

global
     $(	EndL : 320		//  Return point on end of all data.
	EndP : 321		//  Stack frame to go with EndL.
     $)

static
     $(	ErrorfileCounter = 0	//  Unique id for error message segments.
     $)


let Wait () be
     $(	let v = vec Maxline
	unless Filesw do ConsoleReadline (v)
     $)
and ConsoleReadline (v) = valof
     $(	unless Filesw do Writeout (OUTPUT)
	if CONSOLE = 0 do CONSOLE := Open (Console + Read)
	let i = 0
	     $(	if i < Maxline do i := i + 1
		Readch (CONSOLE, lv Ch)
		v!i := Ch & $8177
		if Ch = '*t' do i := FixTab (v, i)
	     $)	repeatuntil Ch = '*n'
	v!i := '*s'
	v!0 := i - 1
	resultis i - 1
     $)
and FixTab (v, i) = valof
     $(	let p = 0
	for j = 1 to i - 1 do p := p + Width (v!j)
	for j = p rem 10 to 9 do
	     $(	v!i := '*s'
		i := i + 1
	     $)
	resultis i - 1
     $)
and Typeout () be
     $(	Check_ref ()
	unless Filesw do Writeout (OUTPUT)
	for i = Nrx to Nr - 1 do Writech (MONITOR, Rawchar!i)
	Writech (MONITOR, '*n')
     $)
and ExecuteCommand () be
     $(	Check_ref ()
	unless Filesw do Writeout (OUTPUT)
	let v, w = vec Maxline, vec Maxline
	let l = Nr - Nrx
	if l le 0 return
	Rawchar!(Nrx - 1) := l
	Packstring (Rawchar + Nrx - 1, v)
	MakePl1String (v, w, l)
	call CuCp (ITS (w, v), lv l, lv Errcode)
     $)

let SetCharsw (New) be
     $(	if New & ChStream = 0 do
	     $(	let v = vec 20
		ChStream := Open (EntryName + Write, Concatenate (v, 32, FileName, ".chars"))
		unless Errcode = 0 do Complain (v)
		WrChInit ()
	     $)
	Charsw := New
     $)
and Report (s) be
     $(	if Errorstream = 0 do
	     $(	test Filesw
		then Errorstream := MONITOR
		or   $(	ErrorfileCounter := ErrorfileCounter + 1
			ErrorTempID := ErrorfileCounter
			ErrorfilePointer := MakeTempSeg (ErrorTempID, "error_messages")
			Errorstream := Open (Pointer + Write, ErrorfilePointer)
		     $)
	     $)

	Format (Errorstream, "^a in line ^d of file ^a. ", s, InputLines, InputFileName)
	for i = 1 to Nr - 1 do Writech (Errorstream, Rawchar!i)
	Writech (Errorstream, '*n')
     $)

and StoreString (S) = valof
     $(	let P = Newvec (LengthInWords (S) - 1)
	CopyString (S, P)
	resultis P
     $)


//  The following function is used to open a stream.  Its
//  argument is the name of the file to open.

let Nx_open (Name) be
     {	test NestingDepth ge MaxDepth
	then Report ("Input files nested too deeply")
	or   {	InputStack[NestingDepth] := INPUT		//  Remember current stream.
		InputStack[NestingDepth + 1] := InputLines	//  And line number.
		InputStack[NestingDepth + 2] := InputFileName	//  And file name.
		NestingDepth := NestingDepth + 3
		INPUT := FindInput (Name, INPUT)
		unless Errcode = 0 do Report ("Unable to open input file")
		InputLines := 0
		InputFileName := StoreString (Name)
	     }
     }


//  This parameter-less routine may be called to close off the
//  current stream.

and Nx_close () be
     {	unless JumpLine = -1 do
	     $(	Nx_reset ()
		let J = JumpLine - 1
		JumpLine := -1
		while InputLines < J do
		     $(	Nr := 0
			Readline ()
		     $)
		Nr, Ch := 0, 0
		return
	     $)
	if NestingDepth le 0 do Longjump (EndL, EndP)
	Close (INPUT)
	Freevec (InputFileName)
	NestingDepth := NestingDepth - 3
	INPUT := InputStack[NestingDepth]
	InputLines := InputStack[NestingDepth + 1]
	InputFileName := InputStack[NestingDepth + 2]
     }

//  This routine resets the current position in the current
//  input file back to the beginning so that the input will be read again.

and Nx_reset () be
     $(	ResetStream (INPUT, 0)
	InputLines := 0
     $)

and Readline () be  	//  Read next line into Rawchar[1]...Rawchar[Nr].
     $(	     $(	Readch (INPUT, lv Ch)
		if Ch = Endofstreamch do
		     $(	Nx_close ()
			loop
		     $)
		if Nr < Maxline do Nr := Nr + 1
		Rawchar!Nr := Ch & $8177
		if Ch = '*t' do Nr := FixTab (Rawchar, Nr)
	     $)	repeatuntil Ch = '*n'
	InputLines := InputLines + 1
	Rawchar!Nr := '*s'
	while Rawchar!Nr = '*s' do Nr := Nr - 1  // Delete blanks.
     $)

let RoffProcess (Stream) be
     $(	INPUT := Stream
	InputLines := 0
	InputFileName := FileName		//  Not always right, but close enough for now...
	NestingDepth := 0
	EndL, EndP := End, Level ()

	     $(	Readline ()
	Process:
		test LIno = 0
		then test Rawchar!1 = '.'
			then $(	Control ()
				if Again do
				     $(	Again := false
					goto Process
				     $)
			     $)
			or Text ()
		or   $(	Text ()
			unless NoControl do LIno := LIno - 1
		     $)
		Nr := 0
	     $)	repeat		//  Eventually we run out of input and jump to End.

  End:	Nx_reset ()		//  So it can be read again if necessary.
     $)
