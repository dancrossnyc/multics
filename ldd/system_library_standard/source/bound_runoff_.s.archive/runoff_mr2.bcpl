//		ROFF for Multics
//
//  Last modified on 05/30/74 at 18:43:45 by R F Mabee.
//
//  This file contains the main routine for processing control
//  lines for ROFF for Multics, and some short routines used by it.
//  Routines are:
//	Control		Routine to process control line.
//	Set_param		Update parameter with possibly signed value.
//	Number		Read numeric expression from line.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "runoff_head"	//  Declarations for ROFF.


// Control is called with a control line in
//	Rawchar[1] ... Rawchar[Nr]
// when Rawchar[1] is '.' .  It processes
// the control word in columns 2 and 3.

let Control () be
{		// Control

// Set Nrx to point to first non-blank
// after column 3.  (We know column 3 is non-blank.)

   Nrx := 4		// Start scan here.
   Nr := Nr + 1	// So characters in the last column of input can be read (kludge)
   while Rawchar[Nrx] ne '*s' & Nrx < Nr do Nrx := Nrx + 1
   while Rawchar[Nrx]  = '*s' & Nrx < Nr do Nrx := Nrx + 1

// Branch, depending on the control word in columns 2 and 3.

   switchon (Rawchar[2]lshift ByteBits logor Rawchar[3]) into
   {
	default:	if Rawchar[2] = '**' return		//  Valid comment.
		Report ("Unknown control request")
		return

	case '** ':
			return		//  Most comments.

	case '~ ':
		if Charsw do		//  .~ means copy line into chars file.
		     $(	for i = 1 to Nr - 1 do WrCh (Rawchar!i)
			WrCh ('*n')
		     $)
		return

	case 'ad':
		Break (); Ad := true; return

	case 'ar':
		Roman := false; return

	case 'bp':
		Break (); Eject (); return

	case 'br':
		Break (); return

	case 'cc':
		test Nrx = Nr
		then Spec_char := '%'
		else Spec_char := Rawchar[Nrx]
		return

	case 'ce':
		Break (); Ce := Number (); Need (Ce); return

	case 'ch':
		while Nrx < Nr do
		     $(	CharsTable!(Rawchar!Nrx) := Rawchar!(Nrx + 1)
			Nrx := Nrx + 2
		     $)
		return

	case 'ds':
		Break (); Ms := 2; Need (2); return

	case 'ef':
		Sethead (Ef); SetLinesLeft (); return
		
	case 'eh':
		Sethead (Eh); return

	case 'eq':
		//  Next n lines are equations.
		Break (); Eq := Number (); Need (Eq); return

	case 'ex':
		if Nrx < Nr do ExecuteCommand ()
		return

	case 'fh':
		unless Fth = 0 do Freevec (Fth)
		Fth := Gethead ()
		return

	case 'fi':
		Break (); unless NoFill do Fi := true; return

	case 'fo':
		Sethead (Ef); Sethead (Of); SetLinesLeft (); return

	case 'fr':
		if Rawchar[Nrx] = 'f' do { Fr := false; return }		//  Renumber on each page - _false.
		if Rawchar[Nrx] = 't' do { Fr := true; return }		//  '' - _true.
		if Rawchar[Nrx] = 'u' do { NoFtNo := true; return }	//  Next footnote _unnumbered.
		Fr := false
		return

	case 'ft':
		test Ft
		then Foot_end ()
		or Foot_begin ()
		return

	case 'gb':
		Skiptolabel (false)		//  Jump backwards.
		return

	case 'gf':
		Skiptolabel (true)		//  Jump forward.
		return

	case 'he':
		Sethead (Eh); Sethead (Oh); return

	case 'if':
		InsertFile (); return

	case 'in':
		// Establish indenting.
		Break ()
		Set_param (lv In, 0)
		Un := In
		return

	case 'la':
		return		//  Label for jumps, ignore.

	case 'li':
		// Treat next n lines as text.
		LIno := Number (); return

	case 'll':
		// Set line length.
		Set_param (lv Ll, LL_); return

	case 'ma':
		// Establish top and bottom margins.
		Set_param (lv Ma1, MA1_); Set_param (lv Ma4, MA4_)
		SetLinesLeft ()
		return

	case 'm1':
		// Set space above header
		Set_param (lv Ma1, MA1_)
		return

	case 'm2':
		// Set space below header and above text
		Set_param (lv Ma2,MA2_)
		return

	case 'm3':
		// Set space above footer and below text
		Set_param (lv Ma3,MA3_)
		SetLinesLeft ()
		return

	case 'm4':
		// Set space below footer
		Set_param (lv Ma4,MA4_)
		SetLinesLeft ()
		return

	case 'mp':
		//  Set multiple paging.
		Set_param (lv MultiplePagecount, 1)
		return

	case 'ms':
		// Set multiple spacing
		Break ()
		Set_param (lv Ms, 1)
		Need (2)
		return

	case 'na':
		Break (); Ad := false; return

	case 'ne':
		NeedSS (Number ()); return

	case 'nf':
		Break (); Fi := false; return

	case 'of':
		Sethead (Of); SetLinesLeft (); return

	case 'oh':
		Sethead (Oh); return

	case 'op':
		Break (); Eject (); Np := Np + 1 - Np rem 2; goto SetPrint

	case 'pa':
		// Start a new page, with designated page number.
		Break (); Eject ()		// Finish this page.
		Set_param (lv Np, Np)	// Set next page number.
	SetPrint:
		NNp := Np + 1
		Print := Fp le Np le Lp & Passes le 1
		return

	case 'pi':
		// Leave space for a picture to be drawn.
		Pi := Pi + Number ()
		if Pi le LinesLeft do
		     $(	Newline (Pi)
			Pi := 0
		     $)
		return

	case 'pl':
		// Set up paper length.
		unless NoPaging do Set_param (lv Pl, PL_)
		SetLinesLeft ()
		return


	case 'rd':
		Nr := ConsoleReadline (Rawchar)
		Again := true
		return

	case 'ro':
		Roman := true; return

	case 'rt':
		Nr := 0; Nx_close (); return

	case 'sk':
		NNp := NNp + Number (); return

	case 'sp':
		// Leave n lines blank.
		Break ()			// Finish current line.
		if Nl = 0 do Spacing ()	// If new page, print header.
		Newline (MinI (Number (), LinesLeft))
		Need (2)
		return

	case 'sr':
		Set_ref ()
		return

	case 'ss':
		Break (); Ms := 1; Need (2); return

	case 'tr':
		// Modify character conversion table.
		while Nrx < Nr do
		     $(	TrTable!(Rawchar!Nrx) := Rawchar!(Nrx + 1)
			Conv!(Rawchar!Nrx) := DeviceTable!(Rawchar!(Nrx + 1))
			Nrx := Nrx + 2
		     $)
		return

	case 'ts':
		if Number () = 0 do Readline (); return		//  Conditional skip.

	case 'ty':
		Typeout (); return

	case 'un':
		// Undent next line n spaces.
		Break ()
		Un := Nrx ge Nr -> 0, In - Number ()		//  Default is undent to left margin.
		if Un < 0 do Un := 0
		return

	case 'ur':
		if Nrx < Nr do
		     $(	let w = vec Maxline
			Nr := Use_ref (Rawchar + Nrx - 1, w, Nr - Nrx)
			for i = 1 to Nr do Rawchar!i := w!i
			Rawchar!(Nr + 1) := '*s'
			Again := true
		     $)
		return

	case 'wt':
		Wait (); return

   }
}		// Control

//  This subroutine sets some parameter of runoff to either some value
//  or to some offset from its current value. If the operand is omitted
//  in the control line, the result is Default. If the operand is signed,
//  it is added into the old value. Otherwise the operand field value
//  replaces the old value.
//  Param is actually the lv of the cell to update.
//  This function returns the value of the operand field of a control line.
//  If the operand is omitted, it returns one.
and Set_param (Param, Default) be
     $(	Check_ref ()
	if Nrx ge Nr do
	     $(	rv Param := Default
		return
	     $)
	let OldNrx = Nrx
	let P = ReadParam (rv Param)
	if P < 0 do P := 0
	rv Param := P
	Nrx := OldNrx
     $)
and Number () = valof
     $(	if Nrx ge Nr resultis 1
	Check_ref ()
	ExpError := false
	let v = vec Maxline
	let n = ReadExp (0, v)
	if ExpError | Nrx < Nr do Report ("Malformed expression")
	resultis n
     $)
