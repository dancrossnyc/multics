/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to merge attributes from t (template) into s (symbol).
   Return value is "1"b if some attribute could not be merged, else "0"b
   Modified 780712 by PG to modify s only if no errors occurred
*/

merge_attributes:
	procedure (bv_s, bv_t) returns (bit (1) aligned);

/* parameters */

declare	(bv_s, bv_t) ptr parameter;

/* automatic */

declare	(dummy_qualifier, s, t) ptr;
declare	1 dummy aligned like symbol;
declare	e bit(1) aligned;

/* builtins */

declare	(null,string) builtin;

/* program */

	t = bv_t;
	s = bv_s;

	/* Make a copy of s in case an error is found later... */

	dummy = s -> symbol;			/* structure assignment */
	dummy_qualifier = dummy.reference -> reference.qualifier;
	e = "0"b;

	/* Now merge into the dummy symbol, setting the error flag if applicable. */

	string(dummy.attributes) = string(dummy.attributes) | string(t->symbol.attributes);

	if dummy.initial = null
	then dummy.initial = copy_expression(t->symbol.initial);
	else if t->symbol.initial ^= null then e="1"b;

	if dummy.general = null
	then dummy.general = t->symbol.general;
	else if t->symbol.general ^= null then e="1"b;

	if dummy.equivalence = null
	then dummy.equivalence = t->symbol.equivalence;
	else if t->symbol.equivalence ^= null then e="1"b;

	if dummy.array = null
	then dummy.array = copy_expression(t->symbol.array);
	else if t->symbol.array ^= null then e="1"b;

	if dummy_qualifier = null
	then dummy_qualifier = t->symbol.reference->reference.qualifier;
	else if t->symbol.reference->reference.qualifier ^= null then e = "1"b;

	if dummy.dcl_size = null
	then if t->symbol.returns
	     then if t->symbol.dcl_size ^= null
		then do;
		     dummy.dcl_size = copy_expression(t->symbol.dcl_size);
		     dummy.dcl_size->symbol.token =
			create_token(dummy.token->token.string||"[return_value]",(identifier));
		     end;
		else;
	     else dummy.dcl_size = copy_expression(t->symbol.dcl_size);
	else if t->symbol.dcl_size ^= null then e="1"b;

	if dummy.c_dcl_size = 0
	then do;
		dummy.c_dcl_size = t->symbol.c_dcl_size;
		dummy.scale = t->symbol.scale;
	     end;
	else do;
		if t->symbol.c_dcl_size ^= 0 then e="1"b;
		if t->symbol.scale ^= 0 then e="1"b;
	     end;

	/* If no errors were discovered, it is OK to change the input node. */

	if e = "0"b
	then do;
		s -> symbol = dummy;		/* structure assignment */
		dummy.reference -> reference.qualifier = dummy_qualifier;
	     end;

	return(e);

/* include files */

%include symbol;
%include reference;
%include token;
%include token_types;
%include language_utility;

     end /* merge attributes */;
