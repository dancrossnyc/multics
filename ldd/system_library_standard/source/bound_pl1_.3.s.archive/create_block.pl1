/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*	This procedure allocates and initializes a block node.

	Modified on:	10 August 1970 by P. Green for Version II
	Modified on:	30 October 1970 by PG for updated node format
	Modified on:	 5 January 1971 by BLW for updated node format
	Modified on:	1 July 1971 by JDM for these changes to the block node:
			   1) descriptors_used replaced by filler_field
			   2) max_arg_no replaced by filler
			   3) max_par_no replaced by filler1
			   4) last_temp replaced by entry_info
	Modified on:	22 September 1971 by PAB to add IO items to node
	Modified on:	11 February 1977 to add text_displayed bit
	Modified on:	April 1977 by RHS for new allocation methods
	Modified on:	April 3 1977 by P.Green to tell why blocks are non-quick
	Modified on:	22 Ocober 1980 by M. N. Davidoff to diagnose block.number too big; fixes 1960.
*/
/* format: style3 */
create_block:
     procedure (type, father) returns (ptr);

dcl	type		bit (9) aligned;
dcl	father		ptr;

/* automatic */

dcl	p		ptr;
dcl	q		ptr;

/* builtin */

dcl	(char, ltrim, null) builtin;

/* external static */

dcl	1 pl1_nodes_template_$block_template
			aligned like block external static;
dcl	pl1_stat_$node_uses (32) fixed bin external static;
dcl	1 pl1_stat_$statement_id
			external static,
	  2 file_number	bit (8),
	  2 line_number	bit (14),
	  2 statement_number
			bit (5);

%include block;
%include block_types;
%include nodes;
%include pl1_tree_areas;
%include token_types;
%include language_utility;

/* program */

	pl1_stat_$node_uses (1) = pl1_stat_$node_uses (1) + 1;
	if pl1_stat_$node_uses (1) > max_block_number
	then call parse_error$no_text (385, create_token (ltrim (char (max_block_number)), dec_integer));

	allocate block in (tree_area) set (p);

	p -> block = pl1_nodes_template_$block_template;
	p -> block.node_type = block_node;
	p -> block.source_id = pl1_stat_$statement_id;
	p -> block.father = father;
	p -> block.block_type = type;
	p -> block.no_stack = type = internal_procedure | type = begin_block;
	p -> block.number = pl1_stat_$node_uses (1);
	p -> block.owner = null;

	if father ^= null
	then if father -> block.son = null
	     then father -> block.son = p;
	     else do;
		     do q = father -> block.son repeat q -> block.brother while (q -> block.brother ^= null);
		     end;

		     q -> block.brother = p;
		end;

	return (p);
     end create_block;
