/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


free_node:	proc(arg);

dcl	(arg,p,q) ptr,
	nodetype fixed bin(15);

dcl	pl1_stat_$free_ptr(18) ptr ext static;

dcl	(fixed,null) builtin;



%include pl1_tree_areas;
%include nodes;
%include symbol;
%include token;
%include block;
%include statement;
%include reference;
%include array;
%include list;
%include context;
%include label;
%include operator;

			/*      */

	p = arg;
	if p=null then goto ret;

	nodetype = fixed(p->node.type,15,0);

	if p->node.type=operator_node
	then do;
		if p->operator.number=2
		then do;
			nodetype = fixed(list_node,15,0);
			goto free_list;
		end;

		if p->operator.number^=3 then goto ret;

free_operator:
		p->operand(1) = pl1_stat_$free_ptr(nodetype);

		goto set;
	end;

	if p->node.type=list_node | p->node.type=label_array_element_node
	then do;
		if p->list.number=3
		then do;
			nodetype = fixed(operator_node,15,0);
			goto free_operator;
		end;

		if p->list.number^=2 then goto ret;

free_list:
		p->list.element(1) = pl1_stat_$free_ptr(nodetype);

		goto set;
	end;

	if p->node.type=reference_node
	then do;
		p->reference.symbol = pl1_stat_$free_ptr(nodetype);

		goto set;
	end;

	if p->node.type=symbol_node
	then do;
		if p->symbol.block_node^=null
		then	if p->symbol.block_node->block.end_declaration=p
			then	goto ret;

		p->symbol.next = pl1_stat_$free_ptr(nodetype);

		if p->symbol.token ^= null
		then do;
			if p->symbol.token->token.declaration=p
			then do;
				p->symbol.token->token.declaration = p->symbol.multi_use;

				goto set;
			end;

			q = p;

			do while(q->symbol.multi_use^=p);
				q = q->symbol.multi_use;
			end;

			q->symbol.multi_use = p->symbol.multi_use;
		end;

		goto set;
	end;

	if p->node.type=statement_node
	then do;
		p->statement.back->statement.next = p->statement.next;
		p->statement.next->statement.back = p->statement.back;

		p->statement.next = pl1_stat_$free_ptr(nodetype);

		goto set;
	end;

	goto ret;

set:
	pl1_stat_$free_ptr(nodetype) = p;

ret:

end free_node;
