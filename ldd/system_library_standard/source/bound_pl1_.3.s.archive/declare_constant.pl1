/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Modified 780425 by PG to prepare for reformatting of symbol node */
/* Modified 780712 by PG for unsigned */
/* Modified 790419 by PCK to implement 4-bit decimal */

declare_constant:
     procedure (value, bv_input_type, size, scale) returns (ptr);

/* parameters */

dcl	value bit (*) aligned;
dcl	bv_input_type bit (36) aligned;
dcl	(size, scale) fixed bin (31);

/* automatic */

dcl	(p, q, p1, ref, pv, last, save) ptr;
dcl	(boundary, i, j, word_size, bit_size, value_size) fixed bin(31);
dcl	copy bit(18432);		/* max size of constant is 512 words */
dcl	1 ctype like type;
dcl	1 itype like type;

/* based */

dcl	const_value bit(value_size) aligned based;
dcl	new_value bit(value_size) aligned based(pv);
dcl	space bit(value_size)  aligned based;

/* builtin */

dcl	(addr, bit, divide, hbound, index, max, null, string, substr) builtin;

/* external static */

dcl	pl1_stat_$constant_list ptr external static;

/* internal static */

dcl	zero bit(36) int static init("0"b);

/* include files */

%include language_utility;
%include symbol;
%include pl1_symbol_type;
%include reference;
%include system;
%include mask;
%include boundary;
%include declare_type;

/* program */

	string (itype) = bv_input_type;
	string (ctype) = string (itype) & declare_constant_mask;
	if ctype.ptr then do;
				boundary = mod2_;
				bit_size = bits_per_word*2;
				go to search;
			  end;
	if ctype.offset then do;
				boundary = word_;
				bit_size = bits_per_word;
				go to search;
			 end;
	if ctype.decimal then do;
				boundary = character_;
				ctype.unaligned = itype.unaligned;
				if ctype.unaligned
				then do;
					if ctype.float
					then bit_size = size + 3;
					else bit_size = size + 1;

					bit_size = bit_size + mod(bit_size,2);
					bit_size = divide(bit_size,packed_digits_per_character,24,0) * bits_per_character;
				     end;
				else do;
					if ctype.float
					then bit_size = size + 2;
					else bit_size = size + 1;

					bit_size = bit_size * bits_per_character;
				     end;
				if ctype.complex
				then bit_size = bit_size * 2;
				go to search;
			end;
	if ctype.char then do;
				boundary = character_;
				bit_size = size*bits_per_character;
				go to search;
			end;
	if ctype.bit | ctype.arg_descriptor
		then do;
				boundary = bit_;
				bit_size = size;
				go to search;
			end;

/* this is a binary constant */

	if ctype.fixed
	then	if itype.unaligned
		then	if itype.unsigned
			then	bit_size = size;
			else	bit_size = size + 1;
		else	if size>max_p_fix_bin_1
			then	bit_size = bits_per_word*2;
			else	bit_size = bits_per_word;

	else	if itype.unaligned
		then	bit_size = size+bits_per_binary_exponent+1;
		else	if size>max_p_flt_bin_1
			then	bit_size = bits_per_word*2;
			else	bit_size = bits_per_word;

	if ctype.complex then bit_size = bit_size*2;
	if bit_size > bits_per_word
		then boundary = mod2_;
		else boundary = word_;

	ctype.unaligned = itype.unaligned;
	ctype.unsigned = itype.unsigned;

/* search the chain of constants to find one who's value is equal to this value.
   If no such constant can be found, make a new constant declaration.	*/

search:
	word_size = divide(bit_size+bits_per_word-1,bits_per_word,31,0);
	value_size = word_size * bits_per_word;

	substr(copy,1,value_size) = substr(value,1,bit_size);

	pv = addr(copy);

	save  ,
	last = null;
	p = pl1_stat_$constant_list;

	do while(p^=null);
		if p->symbol.c_word_size >= word_size
		then	if p->symbol.initial->const_value = new_value
			then do;
				if word_size = 0
				then	if word_size ^= p -> symbol.c_word_size
					then	go to again;

				save = p;

				if p->symbol.c_bit_size^=bit_size then goto new_symbol;
				if substr (string (p -> symbol.attributes), 1, 36) ^= string (ctype) then go to again;
				if p->symbol.c_dcl_size ^= size then goto again;
				if p->symbol.scale ^= scale then goto again;

				return(p->symbol.reference);
			end;
			else;
		else	last = p;

again:
		p = p->symbol.multi_use;
	end;

/* create a new symbol node to represent this constant.	*/

new_symbol:
	q = create_symbol(null,null,by_compiler);
	q -> symbol.boundary = boundary;
	substr (string (q -> symbol.attributes), 1, 36) = string (ctype);
	q->symbol.c_dcl_size = size;
	q->symbol.scale = scale;
	q->symbol.c_word_size = word_size;
	q->symbol.c_bit_size = bit_size;
	q->symbol.internal,
	q->symbol.constant = "1"b;

	q->symbol.packed = q->symbol.unaligned;

	q->symbol.allocate = save=null;
	ref = q->symbol.reference;
	if ctype.bit | ctype.char then ref->reference.c_length = size;
	ref->reference.padded_ref = "1"b;

/* If this value exists as the value of another constant then
   this declaration will be equivalenced to the declaration of the other constant. */

	if save^=null
	then do;
		if save->symbol.equivalence = null
			then q->symbol.equivalence = save;
			else q->symbol.equivalence = save->symbol.equivalence;

		do p1 = q -> symbol.equivalence repeat p1 -> symbol.equivalence while(p1 -> symbol.equivalence ^= null);
		end;
		p1 -> symbol.boundary = max(boundary,p1 -> symbol.boundary);

		q->symbol.initial = save->symbol.initial;
	     end;
	else do;
		if word_size > 0
		then do;
			q->symbol.initial,p1 = create_storage((word_size));
			p1->space = substr(copy,1,bit_size);
		     end;
		else	q -> symbol.initial = addr(zero);
	     end;

/* hook this symbol node into the chain of constants keeping the chain ordered by size. */

	if last=null
	then do;
		q->symbol.multi_use=pl1_stat_$constant_list;
		pl1_stat_$constant_list=q;
	end;
	else do;
		q->symbol.multi_use=last->symbol.multi_use;
		last->symbol.multi_use=q;
	end;

	return(ref);

/* Entry points to allow easy declaration of constant values by the compiler. */

dcl	integer fixed bin(31);
dcl	integer_image bit(bits_per_word) aligned based(addr(integer));
dcl	bits aligned bit(*);
dcl	char aligned char(*);
dcl	char_image aligned bit(length(char)*bits_per_character) based(addr(char));

dcl	length builtin;

	/* following is table giving binary precision corresponding
	   to decimal precision, it is used by declare_constant$integer
	   to adjust computed binary precision so that it matches the
	   precision that would be used if a decimal integer were
	   converted to binary */

dcl	prectab(0:10) fixed binary static init(0,5,8,11,15,18,21,25,28,31,35);

integer: entry(integer) returns(ptr);

	i = index(bit(integer,31),"1"b);
	if i = 0 then i = 1; else i = 31 - i + 1;

	do j = 0 to hbound(prectab,1)-1;
	     if i = prectab(j) then goto ok;
	     if i ^> prectab(j+1)
	     then do;
		i = prectab(j+1);
		goto ok;
		end;
	     end;

	i = max_p_fix_bin_1;

ok:	return(declare_constant(integer_image,integer_type,i,0));

desc: entry(bits) returns(ptr);

	return(declare_constant(bits,arg_desc_type,length(bits),0));

bit: entry(bits) returns(ptr);

	return(declare_constant(bits,bit_type,length(bits),0));

char: entry(char) returns(ptr);

	return(declare_constant(char_image,char_type,length(char),0));

     end;
