/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


decode_node_id: proc(pt,caps) returns(char(120) varying);

dcl	pt ptr,		/* points at any node */
	caps bit(1) aligned; /* TRUE if capitals desired */

dcl	k fixed bin,
	bindec$vs entry(fixed bin(15)) returns(char(12) varying),
	v char(120) varying;

dcl	statement(0:1) char(10) aligned static
	 init("statement ", "STATEMENT "),
	on(0:1) char(4) aligned static init(" on ", " ON "),
	line(0:1) char(5) aligned static init("line ", "LINE "),
	file(0:1) char(9) aligned static init(" of file ", " OF FILE ");

dcl	(addr,fixed,string) builtin;

%include nodes;
%include source_id;
%include source_list;
%include token;

	string(source_id) = string(pt -> node.source_id);
	go to begin;

decode_source_id:
	entry(id, caps) returns(char(120) varying);

dcl	1 id like source_id;

	string(source_id) = string(id);

begin:
	k = fixed(caps,1);

	m = fixed(source_id.statement_number,5);
	if m = 1 then v = "";
	else do;
	     v = statement(k) || bindec$vs(m);
	     v = v || on(k);
	     end;

	v = v || line(k);
	v = v || bindec$vs(fixed(source_id.line_number,14));

	m = fixed(source_id.file_number,8);

	if m ^= 0
	then do;
	     v = v || file(k);
	     v = v || bindec$vs(m);
	     v = v || " (";
	     v = v || source.name -> token.string;
	     v = v || ")";
	     end;

	return(v);
	end;
