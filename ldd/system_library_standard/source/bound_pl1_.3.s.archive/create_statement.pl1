/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*	This procedure allocates and initializes a statement node.
	Modified on:	April 1977 by RHS for new allocation methods
	Modified on:	14 March 1980 by M. N. Davidoff to add some comments
*/
/* format: style3 */
create_statement:
     proc (statement_type, father_block, label_ptr, conditions) returns (pointer);

dcl	(i, nodetype)	fixed bin (15),
	statement_type	bit (9) aligned,
	(lab, p, q, qq, ref, t, father_block, label_ptr)
			ptr;
dcl	conditions	bit (12) aligned;

dcl	pl1_stat_$node_uses (32) fixed bin ext;
dcl	(
	pl1_stat_$source_seg,
	pl1_stat_$st_length
	)		fixed bin (11) ext static,
	pl1_stat_$st_start	fixed bin (23) ext static,
	pl1_stat_$cur_block ptr ext,
	pl1_stat_$cur_statement
			ptr ext,
	pl1_stat_$free_ptr	(18) ptr ext static;

dcl	(fixed, null, string)
			builtin;

%include pl1_tree_areas;
%include token_list;
%include label;
%include reference;
%include list;
%include statement;
%include block;
%include nodes;
%include statement_types;

	if father_block = null
	then i = 3;

	else if father_block -> node.type = statement_node/* for inserting a statement */
	then i = 3;

	else i = 1;

	go to common;

create_statement$prologue:
     entry (statement_type, father_block, label_ptr, conditions) returns (ptr);

	i = 2;

common:
	nodetype = fixed (statement_node, 15, 0);
	p = pl1_stat_$free_ptr (nodetype);

	if p ^= null
	then pl1_stat_$free_ptr (nodetype) = p -> statement.next;
	else do;
		pl1_stat_$node_uses (2) = pl1_stat_$node_uses (2) + 1;
		allocate statement in (xeq_tree_area) set (p);
	     end;

	p -> statement.node_type = statement_node;
	p -> statement.statement_type = statement_type;
	p -> statement.optimized, p -> statement.free_temps, p -> statement.LHS_in_RHS, string (p -> statement.bits) = "0"b;

	p -> statement.reference_count, p -> statement.ref_count_copy, p -> statement.object.start,
	     p -> statement.object.finish = 0;

	if i = 3
	then do;

/* Use statement numbering information from statement being processed by top level of expression_semantics,
   unless we are doing a do statement. */

		q = pl1_stat_$cur_statement;

		if q ^= null
		then if q -> statement.statement_type = do_statement
						/* for do_semantics */
		     then q = father_block;

		if q = null
		then q = father_block;

		p -> statement.source.segment = q -> statement.source.segment;
		p -> statement.source.start = q -> statement.source.start;
		p -> statement.source.length = q -> statement.source.length;
		string (p -> statement.source_id) = string (q -> statement.source_id);
	     end;
	else do;
		p -> statement.source.segment = pl1_stat_$source_seg;
		p -> statement.source.start = pl1_stat_$st_start;
		p -> statement.source.length = pl1_stat_$st_length;
		string (p -> statement.source_id) = string (pl1_stat_$statement_id);
	     end;

	p -> statement.labels = label_ptr;
	p -> statement.prefix = conditions;

	p -> statement.next, p -> statement.root, p -> statement.state_list, p -> statement.reference_list = null;

	go to action (i);

action (1):					/* end of the main sequence */
	if father_block -> block.end_main = null
	then father_block -> block.main = p;
	else father_block -> block.end_main -> statement.next = p;
	p -> statement.back = father_block -> block.end_main;
	father_block -> block.end_main = p;
	return (p);

action (2):					/* end of the prologue sequence */
	if father_block -> block.end_prologue = null
	then father_block -> block.prologue = p;
	else father_block -> block.end_prologue -> statement.next = p;
	p -> statement.back = father_block -> block.end_prologue;
	father_block -> block.end_prologue = p;
	return (p);

action (3):
	if father_block = null
	then do;

/* No statements preceding cur_statement in prologue. */

		t = pl1_stat_$cur_block -> block.prologue;
		goto con;
	     end;

	if string (p -> statement.source_id) ^= string (father_block -> statement.source_id)
	then do;

/* p has become the first statement node of the corresponding source statement. */

		p -> statement.put_in_profile, p -> statement.free_temps = "1"b;

		t = father_block -> statement.next;
		if t ^= null
		then do;
con:
			t -> statement.put_in_profile, t -> statement.free_temps = "0"b;

			if t -> statement.statement_type ^= entry_statement
			     & q -> statement.statement_type ^= do_statement
			then do;
				do qq = t -> statement.labels repeat qq -> list.element (1) while (qq ^= null);
				     if qq -> list.element (2) -> node.type = label_node
				     then qq -> list.element (2) -> label.statement = p;
				     else if qq -> list.element (2) -> node.type ^= token_node
				     then do;
					     ref = qq -> element (2);
					     lab = ref -> reference.symbol;
					     lab -> label.statement -> element (ref -> reference.c_offset + 1) = p;
					end;
				end;

				p -> statement.reference_count = t -> statement.reference_count;
				t -> statement.reference_count = 0;
				p -> statement.labels = t -> statement.labels;
				t -> statement.labels = null;
			     end;
		     end;
	     end;

	if father_block ^= null
	then do;					/* insert into the main sequence */
		p -> statement.back, q = father_block;
		p -> statement.next = q -> statement.next;
		q -> statement.next = p;

		q = p -> statement.next;
		if q ^= null
		then q -> statement.back = p;
	     end;
	else do;
		p -> statement.back = null;
		p -> statement.next = pl1_stat_$cur_block -> block.prologue;
		pl1_stat_$cur_block -> block.prologue = p;
		p -> statement.next -> statement.back = p;
	     end;

	return (p);

     end;
