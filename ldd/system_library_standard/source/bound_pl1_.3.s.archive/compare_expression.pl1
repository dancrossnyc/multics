/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


compare_expression: proc(ap,bp) reducible returns(bit(1) aligned);

dcl	(ap,bp) ptr;	/* pointers at nodes to be compared */

dcl	(a,b,r) ptr,
	(i,n) fixed bin,
	b_op_code bit(9) aligned,
	null builtin;

%include list;
%include nodes;
%include operator;
%include reference;
%include symbol;
%include op_codes;

	a = ap;
	b = bp;

	if a = b then goto exit;

	if a = null then goto fail;
	if b = null then goto fail;

	if a -> node.type ^= b -> node.type then goto fail;

	if a -> node.type = temporary_node then go to fail;

	if a -> node.type = token_node then go to fail;

	if a -> node.type = operator_node
	then do;
	     b_op_code = b -> operator.op_code;
	     if a -> operator.op_code ^= b_op_code then goto fail;
	     if a -> operator.number ^= b -> operator.number then goto fail;

	     do i = 1 to a -> operator.number;
		if a -> operand(i) ^= b -> operand(i)
		then if ^ compare_expression((a -> operand(i)),(b -> operand(i)))
		     then goto fail;

		end;

	     if b_op_code = std_call
	     then do;
		r = b -> operand(2);
		if r -> node.type = operator_node
		     then r = r -> operand(1);
		if r -> reference.symbol -> symbol.irreducible
		     then goto fail;
		end;

	     goto exit;
	     end;

	if a -> node.type = list_node
	then do;
	     if a -> list.number ^= b -> list.number then goto fail;

	     do i = 1 to a -> list.number;
		if a -> element(i) ^= b -> element(i)
		then if ^ compare_expression((a -> element(i)),(b -> element(i)))
		     then goto fail;

		end;

	     goto exit;
	     end;

	if a -> reference.symbol ^= b -> reference.symbol then goto fail;
	if a -> reference.c_length ^= b -> reference.c_length then goto fail;
	if a -> reference.c_offset ^= b -> reference.c_offset then goto fail;
	if a -> reference.units ^= b -> reference.units then goto fail;
	if a -> reference.array_ref ^= b -> reference.array_ref then goto fail;
	if a -> reference.modword_in_offset ^= b -> reference.modword_in_offset then goto fail;

	if a -> reference.length ^= b -> reference.length
	then if ^ compare_expression((a -> reference.length),(b -> reference.length))
	     then goto fail;

	if a -> reference.offset ^= b -> reference.offset
	then if ^ compare_expression((a -> reference.offset),(b -> reference.offset))
	     then goto fail;

	if a -> reference.qualifier ^= b -> reference.qualifier
	then if ^ compare_expression((a -> reference.qualifier),(b -> reference.qualifier))
	     then goto fail;

exit:	return("1"b);

fail:	return("0"b);
	end;
