/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


declare_picture:	proc(string,symbol_ptr,error_code);

dcl	string char(*) aligned;
dcl	symbol_ptr ptr;
dcl	error_code fixed bin(15);

dcl	n_storage_nodes fixed bin;

dcl	pl1_stat_$node_uses(32) fixed bin ext static;

dcl	bit_value bit(648) aligned based(addr(picture_constant));

dcl	(addr,substr) builtin;

dcl	picture_info_ ext entry(char(*)aligned,ptr,fixed bin(15));

%include language_utility;
%include picture_constant;
%include picture_image;
%include picture_types;
%include reference;
%include symbol;
%include system;

	call picture_info_(string,addr(picture_constant),error_code);

	if error_code^=0
	then do;
		picture_constant.piclength = 64;

		/* following code is inserted only to prevent future faults */

		symbol_ptr->symbol.pix.pic_fixed = "1"b;
		symbol_ptr->symbol.pix.pic_size = default_fix_dec_p;
		goto skip;
	end;

	symbol_ptr->symbol.pix.pic_size = picture_constant.prec;

	if picture_constant.type = real_fixed_picture
	then	symbol_ptr->symbol.pix.pic_fixed = "1"b;
	else	symbol_ptr->symbol.pix.pic_float = "1"b;

	if symbol_ptr->symbol.pix.pic_fixed
	then	symbol_ptr->symbol.pix.pic_scale = picture_constant.scale-picture_constant.scalefactor;

	if picture_constant.type=char_picture
	then	symbol_ptr->symbol.pix.pic_char = "1"b;

	if symbol_ptr->symbol.complex
	then do;
		if picture_constant.type = real_fixed_picture
		then	picture_constant.type = cplx_fixed_picture;
		else	if picture_constant.type = real_float_picture
			then	picture_constant.type = cplx_float_picture;

		symbol_ptr->symbol.reference->reference.c_length,
		symbol_ptr->symbol.c_dcl_size = 2 * picture_constant.varlength;
	end;

	else do;
		symbol_ptr->symbol.reference->reference.c_length  ,
		symbol_ptr->symbol.c_dcl_size = picture_constant.varlength;
	end;

skip:

	/* Note that we really should use unspec(addr(picture_constant) -> picture_image) */

	/* We don't want the picture constant to be allocated unless absolutely necessary
	   (e.g., for I/O), but we don't want to turn off allocate bit if it was
	   turned on for a previous picture.  Since declare_constant normally turns
	   the bit on, we must go to some trouble to do this right. */

	n_storage_nodes = pl1_stat_$node_uses(14);
	symbol_ptr->symbol.general = declare_constant$bit(substr(bit_value,1,72+picture_constant.piclength*9));
	if n_storage_nodes ^= pl1_stat_$node_uses(14)
	     then symbol_ptr->symbol.general->reference.symbol->symbol.allocate = "0"b;

	end declare_picture;
