/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

create_label:
     proc (cblock, t, type) returns (ptr);
						/*	Modified on:	12 October 1970 by P. Green */
						/*	Modified on:	 5 January 1971 by BLW for new node format */
						/*	Modified on:	April 1977 by RHS for new allocation methods */

dcl 1 pl1_nodes_template_$label_template external like label aligned;

dcl (cblock, t, t1, p) ptr;
dcl  create_identifier entry () returns (ptr);
dcl  n fixed bin (15);
declare (null, string) builtin;
dcl  pl1_stat_$node_uses (32) fixed bin ext;
dcl  type bit (3) aligned;

%include pl1_tree_areas;
%include nodes;
%include block;
%include label;
%include token_list;
%include token;

	if t = null then t1 = create_identifier (); else t1 = t;

	pl1_stat_$node_uses (15) = pl1_stat_$node_uses (15) + 1;

	allocate label in (tree_area) set (p);

	p -> label = pl1_nodes_template_$label_template;


	if cblock -> block.end_declaration = null
	then cblock -> block.declaration = p;
	else cblock -> block.end_declaration -> label.next = p;
	cblock -> block.end_declaration = p;
	p -> label.block_node = cblock;

	p -> label.multi_use = t1 -> token.declaration;	/* push onto multi_use chain */
	t1 -> token.declaration = p;			/* .. */

	string (p -> label.source_id) = string (pl1_stat_$statement_id);

	p -> label.dcl_type = type;

	p -> label.token = t1;



	return (p);
     end create_label;
