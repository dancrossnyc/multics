/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


reserve$declare_lib:	proc(number) returns(ptr);

dcl	(p,q,s) ptr,
	(error_number,i,k,m,n,number) fixed bin(15),
	test_string char(20) varying aligned,

	(declared_array,renamed_array) bit(216) aligned int static,
	parallel_ptr_number fixed bin(15) int static,
	parallel_ptr(40) ptr int static,

	pl1_stat_$use_old_area bit(1) aligned ext static,

	pl1_stat_$root ptr ext static;

dcl	(addr,length,null,substr)	 builtin;

%include language_utility;
%include boundary;
%include declare_type;
%include op_codes;
%include operator;
%include parameter;
%include reference;
%include symbol;
%include system;
%include token;
%include token_list;
%include token_types;

	p=reserve$read_lib(number);

	if substr(declared_array,number,1)
	then do;
		s=p->token.declaration;
		do while(s->symbol.block_node^=pl1_stat_$root);
			s=s->symbol.multi_use;
			if s=null then goto dcl_entry;
		end;

		return(s->symbol.reference);
	end;

dcl_entry:
	substr(declared_array,number,1)="1"b;
	s=create_symbol(pl1_stat_$root,p,by_compiler);
	s->symbol.boundary=mod2_;
	s->symbol.allocate  ,
	s->symbol.entry  ,
	s->symbol.constant  ,
	s->symbol.external  ,
	s->symbol.irreducible = "1"b;

	return(s->symbol.reference);

read_lib:	entry(number) returns(ptr);

	if substr(renamed_array,number,1)
	then do;
		test_string=reserved_name(number);
		m=length(test_string);
		do i=1 to 39 by 2;
			p=parallel_ptr(i);
			n=p->token.size;
			if m=n
			then	if p->token.string=test_string
				then do;
					p=parallel_ptr(i+1);
					goto read_lib_ret;
				end;
			if n=2*m+1
			then	if p->token.string=substr(test_string,1,m)||"$"||substr(test_string,1,m)
				then do;
					p=parallel_ptr(i+1);
					goto read_lib_ret;
				end;
		end;
	end;
	else	p=create_token((reserved_name(number)),identifier);

read_lib_ret:
	return(p);

reserve$clear:	entry returns(ptr);

	parallel_ptr_number=0;
	declared_array ,
	renamed_array = "0"b;

	return(null);

dcl	number_of_reserved_names fixed bin(15) int static initial(200),
	reserved_name(200) char(20) varying aligned int static init
(	/*  1*/     "free_$free_",
	/*  2*/     "stat_",
	/*  3*/     "area_",
	/*  4*/     "system_condition_",
	/*  5*/     "alloc_",
	/*  6*/     "bound_",
	/*  7*/	  "on_data_$get_onloc",
	/*  8*/     "on_data_$get_onfield",
	/*  9*/     "on_data_$get_onchar",
	/* 10*/     "on_data_$get_oncode",
	/* 11*/     "on_data_$set_onchar",
	/* 12*/     "on_data_$get_onfile",
	/* 13*/     "on_data_$get_onkey",
	/* 14*/     "on_data_$getonsource",
	/* 15*/     "datmk_",
	/* 16*/     "snap_",
	/* 17*/     "xp2_",
	/* 18*/     "dxp1_",
	/* 19*/     "cxp1_",
	/* 20*/     "dcxp1_",
	/* 21*/     "xp3_",
	/* 22*/     "dxp2_",
	/* 23*/     "cxp2_",
	/* 24*/     "dcxp2_",
	/* 25*/     "sqrt_",
	/* 26*/     "dsqrt_",
	/* 27*/     "csqrt_",
	/* 28*/     "dcsqrt_",
	/* 29*/     "exp_",
	/* 30*/     "dexp_",
	/* 31*/     "cexp_",
	/* 32*/     "dcexp_",
	/* 33*/     "log_",
	/* 34*/     "dlog_",
	/* 35*/     "clog_",
	/* 36*/     "dclog_",
	/* 37*/     "log_$log2_",
	/* 38*/     "dlog_$dlog2_",
	/* 39*/     "clog_$clog2_",
	/* 40*/     "dclog_$dclog2_",
	/* 41*/     "log_$log10_",
	/* 42*/     "dlog_$dlog10_",
	/* 43*/     "clog_$clog10_",
	/* 44*/     "dclog_$dclog10_",
	/* 45*/     "log_$atanh_",
	/* 46*/     "dlog_$datanh_",
	/* 47*/     "catan_$catanh_",
	/* 48*/     "dcatan_$dcatanh_",
	/* 49*/     "log_$lone_",
	/* 50*/     "dlog_$dlone_",
	/* 51*/     "clog_$clone_",
	/* 52*/     "dclog_$dclone_",
	/* 53*/     "sin_",
	/* 54*/     "dsin_",
	/* 55*/     "csin_",
	/* 56*/     "dcsin_",
	/* 57*/     "sin_$sind_",
	/* 58*/     "dsin_$dsind_",
	/* 59*/     "csin_$csind_",
	/* 60*/     "dcsin_$dcsind_",
	/* 61*/     "sin_$cos_",
	/* 62*/     "dsin_$dcos_",
	/* 63*/     "csin_$ccos_",
	/* 64*/     "dcsin_$dccos_",
	/* 65*/     "sin_$cosd_",
	/* 66*/     "dsin_$dcosd_",
	/* 67*/     "csin_$ccosd_",
	/* 68*/     "dcsin_$dccosd_",
	/* 69*/     "tan_",
	/* 70*/     "dtan_",
	/* 71*/     "csin_$ctan_",
	/* 72*/     "dcsin_$dctan_",
	/* 73*/     "tan_$tand_",
	/* 74*/     "dtan_$dtand_",
	/* 75*/     "csin_$ctand_",
	/* 76*/     "dcsin_$dctand_",
	/* 77*/     "asin_",
	/* 78*/     "dasin_",
	/* 79*/     "casin_",
	/* 80*/     "dcasin_",
	/* 81*/     "asin_$asind_",
	/* 82*/     "dasin_$dasind_",
	/* 83*/     "casin_$casind_",
	/* 84*/     "dcasin_$dcasind_",
	/* 85*/     "asin_$acos_",
	/* 86*/     "dasin_$dacos_",
	/* 87*/     "casin_$cacos_",
	/* 88*/     "dcasin_$dcacos_",
	/* 89*/     "asin_$acosd_",
	/* 90*/     "dasin_$dacosd_",
	/* 91*/     "casin_$cacosd_",
	/* 92*/     "dcasin_$dcacosd_",
	/* 93*/     "asin_$atan_",
	/* 94*/     "dasin_$datan_",
	/* 95*/     "catan_",
	/* 96*/     "dcatan_",
	/* 97*/     "asin_$atand_",
	/* 98*/     "dasin_$datand_",
	/* 99*/     "catan_$catand_",
	/*100*/     "dcatan_$dcatand_",
	/*101*/     "atan2_",
	/*102*/     "datan2_",
	/*103*/     "catan2_",
	/*104*/     "dcatan2_",
	/*105*/     "atan2_$atand2_",
	/*106*/     "datan2_$datand2_",
	/*107*/     "catan2_$catand2_",
	/*108*/     "dcatan2_$dcatand2_",
	/*109*/     "sinh_",
	/*110*/     "dsinh_",
	/*111*/     "csin_$csinh_",
	/*112*/     "dcsin_$dcsinh_",
	/*113*/     "sinh_$cosh_",
	/*114*/     "dsinh_$dcosh_",
	/*115*/     "csin_$ccosh_",
	/*116*/     "dcsin_$dccosh_",
	/*117*/     "tanh_",
	/*118*/     "dtanh_",
	/*119*/     "csin_$ctanh_",
	/*120*/     "dcsin_$dctanh_",
	/*121*/     "asinh_",
	/*122*/     "dasinh_",
	/*123*/     "casin_$casinh_",
	/*124*/     "dcasin_$dcasinh_",
	/*125*/     "asinh_$acosh_",
	/*126*/     "dasinh_$dacosh_",
	/*127*/     "casin_$cacosh_",
	/*128*/     "dcasin_$dcacosh_",
	/*129*/     "erf_",
	/*130*/     "derf_",
	/*131*/     "cerf_",
	/*132*/     "dcerf_",
	/*133*/     "erf_$erfc_",
	/*134*/     "derf_$derfc_",
	/*135*/     "cerf_$cerfc_",
	/*136*/     "dcerf_$dcerfc_",
	/*137*/     "exerfc_",
	/*138*/     "dexerfc_",
	/*139*/     "cexerfc_",
	/*140*/     "dcexerfc_",
	/*141*/     "cabs_",
	/*142*/     "dcabs_",
	/*143*/     "cfmp_",
	/*144*/     "dcfmp_",
	/*145*/     "cfdp_",
	/*146*/     "dcfdp_",
	/*147*/     "iexp_",
	/*148*/     "round_",
	/*149*/     "round_$expon_",
	/*150*/     "round_$adexp_",
	/*151*/	  "freen_",
	/*152*/	  "plio_$plio_sw_",
	/*153*/	  "plio_$open1",
	/*154*/	  "plio_$close",
	/*155*/	  "plio_$get_value_data",
	/*156*/	  "plio_$put_value_data",
	/*157*/	  "plio_$get_value_list",
	/*158*/	  "plio_$put_value_list",
	/*159*/	  "plio_$get_value_edit",
	/*160*/	  "plio_$put_value_edit",
	/*161*/	  "area_assign_",
	/*162*/	  "exit_",
	/*163*/	  "stop_",
	/*164*/	  "char_to_arith_",
	/*165*/	  "char_to_bit_",
	/*166*/	  "arith_to_char_",
	/*167*/	  "bit_to_char_",
	/*168*/	  "ftnio_$init",
	/*169*/	  "ftnio_",
	/*170*/	  "ftnio_$finish",
	/*171*/	  "diexp_",
	/*172*/	  "arith_to_arith_",
	/*173*/	  "bit_to_arith_",
	/*174*/	  "arith_to_bit_",
	/*175*/	  "decimal_op_",
	/*176*/	  "multi_decimal_op_",
	/*177*/	  "plio2_$set_pageno",
	/*178*/	  "pl1_before_bit_",
	/*179*/	  "pl1_before_char_",
	/*180*/	  "translate_$trans_2_",
	/*181*/	  "translate_$trans_3_",
	/*182*/	  "complex_decimal_op_",
	/*183*/	  "plio2_$get_lineno",
	/*184*/	  "plio2_$get_pageno",
	/*185*/	  "pl1_valid_picture_",
	/*186*/	  "pl1_date_",
	/*187*/	  "pl1_time_",
	/*188*/	  "pl1_after_bit_",
	/*189*/	  "pl1_after_char_",
	/*190*/	  "pl1_decat_bit_",
	/*191*/	  "pl1_decat_char_",
	/*192*/	  "alloc_$storage_",
	/*193*/	  "complex_binary_op_",
	/*194*/	  "on_data_$setonsource",
	/*195*/	  "decimal_exp_",
	/*196*/	  "decimal_exp2_",
	/*197*/	  "xp22_",
	/*198*/	  "dxp12_",
	/*199*/	  "cxp12_",
	/*200*/	  "dcxp12_"
					);

rename_parse:	entry(number,return_bit);

dcl	return_bit bit(1) aligned;

	k=number+1;

	if t_table.type ^= left_parn then go to error1;

l:	k=k+1;
	if t_table.type ^= left_parn then go to error1;

	k=k+1;
	if t_table.type ^= identifier then go to error2;

	test_string=t_table.string;
	do i=1 to number_of_reserved_names;
		if reserved_name(i)=test_string then goto replace;
	end;

	go to error3;

replace:
	if i = 1		/* free_$free_	*/
	|  i = 3		/* area_		*/
	|  i = 5		/* alloc_		*/
	|  i = 151	/* freen_		*/
	|  i = 192	/* alloc_$storage	*/
	then pl1_stat_$use_old_area = "1"b;

	k=k+1;
	if t_table.type ^= comma then go to error4;

	k=k+1;
	if t_table.type ^= identifier then go to error5;

	parallel_ptr_number=parallel_ptr_number+2;
	if parallel_ptr_number>40 then goto error7;

	substr(renamed_array,i,1)="1"b;
	parallel_ptr(parallel_ptr_number-1)=token_list(k-2);
	parallel_ptr(parallel_ptr_number)=token_list(k);

	k=k+1;
	if t_table.type ^= right_parn then go to error6;

	k=k+1;
	if t_table.type = comma then go to l;
	if t_table.type ^= right_parn then go to error6;

	number=k+1;
	return_bit="1"b;
	return;

error1:	error_number=161;			/* no left parn */
	go to error_finish;

error2:	error_number=162;			/* Name1 is not an identifier */
	go to error_finish;

error3:	error_number=163;			/* Name1 could not be matched with a reserved name. */
	go to error_finish;

error4:	error_number=164;			/* No comma */
	go to error_finish;

error5:	error_number=165;			/* Name2 is not an identifier. */
	go to error_finish;

error6:	error_number=166;			/* No matching right parn */
	goto error_finish;

error7:	error_number=94;

error_finish:
	call parse_error(error_number,token_list(k));
	return_bit="0"b;

	end reserve$declare_lib;
