/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Modified 7/01/81 by EBush to add recognition of "null_pointer" condition. */

pl1_signal_catcher: proc (mc_ptr, name, co_ptr, info_ptr, continue);

	dcl     (mc_ptr, co_ptr, info_ptr) ptr,
	        name		 char (*) unaligned,
	        continue		 bit (1) aligned;

	dcl     (cg_static_$cur_statement, pl1_stat_$cur_statement) ptr ext,
	        pl1_stat_$phase	 fixed bin ext,
	        cg_static_$debug	 bit (1) aligned ext,
	        (p, q, source_pt)	 ptr,
	        errno		 fixed bin,
	        n			 fixed bin,
	        cond		 char (32),
	        (error, error$omit_text) entry (fixed bin, ptr, ptr),
	        parse_error		 entry (fixed bin, ptr),
	        ioa_		 entry options (variable);

	dcl     1 source_structure	 based (source_pt),
		2 spacer		 char (p -> statement.source.start) unal,
		2 output		 char (p -> statement.source.length) unal;

	dcl     code		 fixed bin (35);	/* needed by iox_$put_chars but never examined */
	dcl     program_interrupt	 condition;

	declare any_other		 condition;

	dcl     (addr, fixed, length, null, ptr) builtin;

%include pl1_tree_areas;
%include statement;
%include source_list;
%include token;
%include nodes;

	on any_other system;			/* In case of recursive faults ! */
	if pl1_stat_$phase <= 4
	then do;
		errno = pl1_stat_$phase + 333;
		p = pl1_stat_$cur_statement;
	     end;

	else do;
		errno = 310;
		p = cg_static_$cur_statement;
	     end;
	if p = null
	then if pl1_stat_$phase ^= 1 | cg_static_$debug
	     then do;

/* refuse to handle the condition */

refuse:		     continue = "1"b;
		     return;
		end;

	     else ;

	else if p -> node.type ^= statement_node
	then if p -> node.type ^= symbol_node | cg_static_$debug
	     then go to refuse;

	cond = name;
	if cond = "null_pointer" then go to ok;
	if cond = "out_of_bounds" then goto ok;
	if cond = "illegal_opcode" then goto ok;
	if cond = "no_read_permission" then go to ok;
	if cond = "no_write_permission" then go to ok;
	if cond = "no_execute_permission" then go to ok;
	if cond = "null_pointer" then goto ok;
	if cond = "storage"
	then do;
		if pl1_stat_$phase = 2		/* semantics */
		then errno = 365;
		go to ok;
	     end;
	if cond = "size" then go to ok;
	if cond = "fixedoverflow" then goto ok;
	if cond = "illegal_modifier" then goto ok;
	if cond = "not_in_call_bracket" then go to ok;
	if cond = "not_in_execute_bracket" then go to ok;
	if cond = "not_in_read_bracket" then go to ok;
	if cond ^= "not_in_write_bracket" then go to refuse;

/* condition is one we recognize */


ok:	if ^cg_static_$debug
	then do;
		n = length (name);
		allocate token in (tree_area) set (q);
		q -> node.type = token_node;
		q -> token.string = cond;

		if p ^= null
		then if p -> node.type = statement_node
		     then call error (errno, p, q);
		     else call error$omit_text (errno, p, q);
		else call parse_error (errno, q);

/* call to error should abort compilation and never return */

	     end;
	goto refuse;


     end;
