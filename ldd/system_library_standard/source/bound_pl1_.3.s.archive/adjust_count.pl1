/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* this routine  is called to adjust the reference counts in a subtree.
   If a given node in the tree has no reference count, no further
   processing is necessary.  If it has a count, the count is reduced by one.
   If that reduces it to zero, the node is freed and the routine is called to
   process the subexpressions.  */

adjust_count: proc(pt);

dcl	(pt,t,s) ptr;
dcl	shared bit(1) aligned;
dcl	i fixed bin(15);
dcl	null builtin;

%include nodes;
%include reference;
%include operator;
%include op_codes;
%include list;
%include language_utility;

begin:
	t = pt;
	if t = null then return;
	if t->node.type = reference_node
	     then do;
		if t->reference.shared then return;
		t->reference.ref_count = t->reference.ref_count-1;
		if t->reference.ref_count = 0
		     then do;
			if t->reference.offset ^= null then call adjust_count((t->reference.offset));
			if t->reference.length ^= null then call adjust_count((t->reference.length));
			if t->reference.qualifier ^= null then call adjust_count((t->reference.qualifier));
			call free_node(t);
			end;
		return;
		end;
	if t->node.type = operator_node
	     then if t->operator.number > 0
		then if t->operator.operand(1) ^= null
		     then do;
			s = t->operator.operand(1);

			shared = s->reference.shared;

			if ^shared
			then do;
			     if t->operator.op_code = std_call
				then i = 2;
				else i = 1;
			     if s->reference.ref_count - i ^= 0
			     then do;
				s->reference.ref_count = s->reference.ref_count - 1;
				return;
				end;
			     end;

			if ^t->operator.optimized
			then do i = 1 to t->operator.number;
			     call adjust_count((t->operator.operand(i)));
			     end;

			if ^shared
			     then call free_node(t);
			     else t -> operator.optimized = "1"b;
			return;
			end;
	if t->node.type = list_node
	     then do i = 1 to t->list.number;
		call adjust_count((t->list.element(i)));
		end;
	end; /* adjust_count */

