/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

share_expression:	proc(a) returns(ptr);

dcl	(a,p,inptr,outptr) ptr,

	n fixed bin(15),

	nodetype bit(9) aligned;

dcl	null builtin;

%include language_utility;
%include nodes;
%include operator;
%include reference;
%include symbol;

	inptr = a;
	outptr = null;

	if inptr=null then goto ret;
	nodetype = inptr->node.type;

	if nodetype=operator_node
	then do;
		p = inptr->operand(1);
		if p=null then goto copy;

		if ^p->reference.shared
		then	p->reference.ref_count = p->reference.ref_count+1;
		else do;
			p = create_reference((inptr->operand(1)));
			p->reference = inptr->operand(1)->reference;
			p->reference.shared = "0"b;
			p->reference.ref_count = 2;
			inptr->operand(1) = p;
		end;

		outptr = inptr;
		goto ret;
	end;

	if nodetype=reference_node
	then do;
		if ^inptr->reference.shared
		then	inptr->reference.ref_count = inptr->reference.ref_count + 1;

		outptr = inptr;
		go to ret;
	end;

copy:
	outptr = copy_expression((inptr));

ret:
	return(outptr);

	end share_expression;
