/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Originally coded by Paul Green, July, 1970 */
/*	Modified on:	 5 January 1971 by BLW for new node format */
/*	Modified on:	30 October 1970 by PG for updated node format */
/*	Modified on:	14 September 1970 by P. Green for Version II */
/*	Modified on:	April 1977 by RHS for new allocation methods */
/* This procedure is called to create a symbol table in
   cblock, pointed to by token, and having the given type.
   If cblock is null, the symbol is left floating.
   If token is null, create_identifier is called to produce a
   uniquely named identifier.  */

create_symbol:
     proc (cblock, token, type) returns (ptr);
dcl 1 pl1_nodes_template_$symbol_template external like symbol aligned;

dcl (cblock, token, tok_pt, p) pointer,
     type bit (3) aligned,
     k fixed bin (21) init (0),			/* this is used only by the "token" incl file	*/
    (n, nodetype) fixed bin (15);

dcl  pl1_stat_$free_ptr (18) ptr ext static;
dcl  pl1_stat_$node_uses (32) fixed bin ext;

dcl  create_identifier external entry returns (ptr),
     create_reference$for_symbol external entry (ptr) returns (ptr);

dcl (addr, fixed, null, string) builtin;

%include pl1_tree_areas;
% include symbol;
% include block;
%include token_list;


% include nodes;
/* Begin processing */

	if token = null then tok_pt = create_identifier (); else tok_pt = token;

	nodetype = fixed (symbol_node, 15, 0);
	p = pl1_stat_$free_ptr (nodetype);

	if p ^= null
	then pl1_stat_$free_ptr (nodetype) = p -> symbol.next;
	else do;
	     pl1_stat_$node_uses (6) = pl1_stat_$node_uses (6) + 1;
	     allocate symbol in (tree_area) set (p);
	end;
	p -> symbol = pl1_nodes_template_$symbol_template;

	if cblock = null
	then p -> symbol.block_node = null;
	else do;
	     p -> symbol.block_node = cblock;

	     if cblock -> block.end_declaration = null
	     then cblock -> block.declaration = p;
	     else cblock -> block.end_declaration -> symbol.next = p;

	     cblock -> block.end_declaration = p;
	end;

	p -> symbol.multi_use = tok_pt -> t_table.declaration; /* push this symbol onto multi_use chain */
	tok_pt -> t_table.declaration = p;		/* update pointer to first symbol */

	p -> symbol.token = tok_pt;			/* set pointer back to token table */
	p -> symbol.dcl_type = type;			/* assign type as passed to us	*/
	p -> symbol.node_type = symbol_node;		/* identify this node		*/

	p -> symbol.reference = create_reference$for_symbol (p);

	return (p);

     end create_symbol;
