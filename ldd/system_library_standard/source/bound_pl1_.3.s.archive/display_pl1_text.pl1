/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* program to display binary text produced by pl/1 compiler

   Revised Version: 20 January, 1969 by BLW
	Modified: 18 April 1971 by BLW for Version II
	Modified: 19 August 1972 by BLW
	Modified:	1 August 1974 by RAB for relocatable constants
	Modified:	11 February 1977 by RAB for multiple conditions per on-unit	*/

display_pl1_text: proc(pt);

dcl	pt	ptr;	/* points at root block node */

dcl	p ptr,
	n fixed bin,
	(cg_static_$text_base,cg_static_$text_reloc_base,cg_static_$encoded_values,
	 cg_static_$constant_list,cg_static_$format_list,cg_static_$sym_use_base,
	 cg_static_$label_list) ptr ext static,
	line char(60) varying int static,
	old_id bit(27) int static,
	blk_pt ptr int static,
	(block_count fixed bin,nested_proc bit(1)) int static,
	display_text entry(ptr,ptr,ptr,fixed bin,fixed bin),
	display_text$display_ascii entry(ptr,fixed bin(31)),
	bindec ext entry(fixed bin) returns(char(12)),
	bindec$vs entry(fixed bin) returns(char(12) varying),
	display_text$display_abs entry(ptr,ptr,fixed bin(31)),
	pl1_print$non_varying_nl entry(char(*) aligned,fixed bin),
	pl1_print$unaligned_nl entry(char(*) unaligned,fixed bin),
	pl1_print$varying_nl entry(char(*) varying);

dcl	(addr,addrel,bit,divide,fixed,length,null,ptr,string,substr) builtin;

dcl	encode_names(6) char(20) varying int static init("size of ",
	 "offset of ", "virtual origin of ",
	 "lower bound of ", "upper bound of ", "multiplier of ");

%include cgsystem;
%include block;
%include statement;
%include symbol;
%include array;
%include reference;
%include operator;
%include list;
%include label;
%include ev_node;
%include token;
%include block_types;
%include statement_types;

	line = "";
	block_count = 0;
	nested_proc, old_id = "0"b;
	call prt_block(pt -> block.son);
	return;

prt_block:     proc(pt);

dcl	     pt ptr unaligned;	/* points at block node */

dcl	     (p,p1,q,r_pt,t_pt,bp,text_base,text_reloc_base,sym_use_base) ptr,
	     (size,type,i,k) fixed bin,
	     put_const bit(1) aligned,
	     name char(32) varying;

	     bp = pt;
	     if bp = null then return;

	     text_base = cg_static_$text_base;
	     text_reloc_base = cg_static_$text_reloc_base;
	     sym_use_base = cg_static_$sym_use_base;

	     if bp -> block.block_type = begin_block
	     then do;
db:		call prt_block(bp -> block.brother);
		return;
		end;

	     if bp -> block.block_type = on_unit then goto db;

	     call entry_name((bp -> block.main),name);
	     line = "BEGIN PROCEDURE "||name;

	     if nested_proc then goto common;

	     nested_proc = "1"b;

do_consts:     p = cg_static_$constant_list;
	     if p = null then goto ce;

	     /* display all constant nodes without equivalent ptr */

	     put_const = "1"b;
	     do while(p ^= null);

		if p -> symbol.equivalence ^= null then goto next_const;

		if p -> symbol.allocated
		then do;

		     if put_const
		     then do;
			call pl1_print$non_varying_nl("CONSTANTS",9);
			put_const = "0"b;
			end;

		     t_pt = addrel(text_base,p -> symbol.location);
		     r_pt = addrel(text_reloc_base,p -> symbol.location);

		     if p -> symbol.char
		     then do;

			q = p -> symbol.array;

			if p -> symbol.varying
			then do;

			     if q = null then k = p -> symbol.c_word_size;
			     else k = q -> array.c_element_size;

			     do i = 1 by k to p -> symbol.c_word_size;
				call display_text$display_abs(t_pt,r_pt,1);
				call display_text$display_ascii(addrel(t_pt,1),(p -> symbol.c_dcl_size));
				t_pt = addrel(t_pt,k);
				end;

			     end;
			else do;
			     if q = null then k = p -> symbol.c_dcl_size;
			     else k = p -> symbol.c_word_size * chars_per_word;

			     call display_text$display_ascii(t_pt,(k));
			     end;

			end;
		     else call display_text$display_abs(t_pt,r_pt,(p -> symbol.c_word_size));

		     call pl1_print$non_varying_nl("",0);

		     end;

next_const:	p = p -> symbol.multi_use;
		end;

ce:	     p = cg_static_$encoded_values;
	     if p = null then goto formats;

	     call pl1_print$non_varying_nl("ENCODED VALUES",0);

	     do while(p ^= null);
		q = p -> ev_node.name;

		if q = null
		then do;
		     call pl1_print$non_varying_nl("",0);
		     goto cf;
		     end;

		call pl1_print$varying_nl(encode_names(p -> ev_node.code)
		 || q -> token.string);

cf:		p1 = p -> ev_node.equiv;
		do while(p1 ^= null);
		     q = p1 -> ev_equiv.name;
		     if q = null then goto cg;
		     call pl1_print$varying_nl(encode_names(p1 -> ev_equiv.code)
		      || q -> token.string);
cg:		     p1 = p1 -> ev_equiv.next;
		     end;

		call display_text(text_base,text_reloc_base,sym_use_base,
		 (p -> ev_node.first),p -> ev_node.last - p -> ev_node.first);

		p = p -> ev_node.next;
		end;

	     call pl1_print$non_varying_nl("",0);

formats:	     p = cg_static_$format_list;
	     if p = null then goto label_arrays;

	     call pl1_print$non_varying_nl("FORMATS",0);

	     do while(p ^= null);
		q = p -> element(2);
		call display_text$display_abs(addrel(text_base,q -> symbol.location),
		 addrel(text_reloc_base,q -> symbol.location),(q -> symbol.c_word_size));
		call pl1_print$non_varying_nl("",0);

		p = p -> element(1);
		end;

label_arrays:
	     p = cg_static_$label_list;
	     if p = null then go to common;

	     call pl1_print$non_varying_nl("LABEL ARRAYS",0);

	     do while(p ^= null);
		q = p -> element(2);
		call display_text(text_base,text_reloc_base,sym_use_base,
		 (q->label.location), q->label.high_bound - q->label.low_bound + 1);
		call pl1_print$non_varying_nl("",0);

		p = p -> element(1);
		end;

	     goto common;

prt_on_unit:   entry(pt);

	     bp = pt;

	     call entry_name((bp -> block.main),name);
	     line = "BEGIN CONDITION "||name;
	     goto com;

prt_begin_block: entry(pt);

	     bp = pt;

	     block_count = block_count+1;
	     name = substr(bindec(block_count),11,2);
	     line = "BEGIN BLOCK "||name;

com:	     text_base = cg_static_$text_base;
	     text_reloc_base = cg_static_$text_reloc_base;
	     sym_use_base = cg_static_$sym_use_base;

common:	     blk_pt = bp;

	     if bp -> block.number_of_entries = 1 then goto do_main;

	     p = bp -> block.prologue;

	     if p = null
	     then if bp -> block.plio_ps = null
		then goto do_main;

	     call pl1_print$varying_nl(line);
	     line = "PROLOGUE SEQUENCE";

	     if bp -> block.block_type = begin_block
	     then if bp -> block.plio_ps = null
		then goto do_prol; else goto pr_dt;

	     call pl1_print$varying_nl(line);
	     line = "";

pr_dt:	     n = bp -> enter.start;
	     call display_text(text_base,text_reloc_base,sym_use_base,n,bp -> enter.end - n);

do_prol:	     do while(p ^= null);
		call prt_statement(p);
		p = p -> statement.next;
		end;

	     if bp -> block.block_type ^= begin_block
	     then do;
		n = bp -> leave.start;
		call display_text(text_base,text_reloc_base,sym_use_base,n,
		 bp -> leave.end - n);
		end;

	     line = "MAIN SEQUENCE";

do_main:	     p = bp -> block.main;
	     do while(p ^= null);
		call prt_statement(p);
		p = p -> statement.next;
		end;

	     bp -> block.text_displayed = "1"b;

	     call prt_block(bp -> block.son);

	     if bp -> block.block_type = begin_block
	     then do;
		call pl1_print$varying_nl("  END BLOCK "||name);
		return;
		end;

	     if bp -> block.block_type = on_unit
	     then do;
		call pl1_print$varying_nl("  END CONDITION "||name);
		return;
		end;

	     call pl1_print$varying_nl("  END PROCEDURE "||name);

	     call prt_block(bp -> block.brother);
	     end;

prt_statement: proc(tq);

dcl	     (tq,q) ptr,	/* points at statement node */
	     bit_s_id bit(27),
	     stm char(133),
	     heading char(132) varying,
	     sixht char(6) int static init((6)"	"),
	     nl char(1) int static init("
"),
	     c char(1),
	     blank bit(1),
	     source_pt ptr,
	     ename char(32) varying,
	     st_type bit(9),
	     (i,j,l,ln,sn,k,c2) fixed bin,
	     c1 fixed bin(21);

dcl	     source_segment char(262143) aligned based(source_pt);

dcl	     1 fake	aligned based(source_pt),
	     2 skip	char(c1-1) unaligned,
	     2 sub_str	char(c2) unaligned;

%include source_list;

	     q = tq;
	     st_type = q -> statement.statement_type;

	     i = q -> statement.object.start;
	     j = q -> statement.object.finish;
	     if i = j
	     then do;
		if st_type = begin_statement then goto l1;
		if st_type = continue_statement then goto l1;
		if st_type = do_statement then goto l1;
		if st_type = end_statement then goto l1;
		return;
		end;

l1:	     if st_type = entry_statement | st_type = procedure_statement
	     then do;
		if length(line) ^= 0 then call pl1_print$varying_nl(line);
		call entry_name(q,ename);
		line = "ENTRY TO "||ename;
		end;

	     bit_s_id = string(q -> statement.source_id);
	     if bit_s_id = old_id
	     then if length(line) = 0
		then goto show;

	     if bit_s_id = "0"b
	     then if length(line) ^= 0
		then call pl1_print$varying_nl(line);
		else;
	     else do;

		if length(line) ^= 0
		then do;
		     substr(stm,1,60) = line;
		     k = 60;
		     end;
		else do;
		     substr(stm,1,6) = sixht;
		     k = 6;
		     end;

		ln = fixed(substr(bit_s_id,9,14),14);
		sn = fixed(substr(bit_s_id,23,5),5);

		heading = substr(stm,1,k);
		heading = heading || "STATEMENT ";
		heading = heading || bindec$vs(sn);
		heading = heading || " ON LINE ";
		heading = heading || bindec$vs(ln);

		ln = fixed(substr(bit_s_id,1,8),8);
		if ln ^= 0
		then do;
		     heading = heading || " OF FILE ";
		     heading = heading || bindec$vs(ln);
		     end;

		call pl1_print$varying_nl(heading);
		end;

	     line = "";
	     old_id = bit_s_id;
	     if bit_s_id = "0"b then goto show;

	     c2 = q -> statement.source.length;
	     if c2 <= 0 then goto show;

	     /* there is a source statement, extract ptr to seg */

	     m = q -> statement.source.segment;
	     source_pt = source.seg_ptr;

	     c1 = q -> statement.source.start+1;

beg:	     if c1 < 2 then goto write;

	     c = substr(source_segment,c1-1,1);

	     if c ^= nl
	     then if c ^= ";"
		then do;
		     c1 = c1 - 1;
		     c2 = c2 + 1;
		     goto beg;
		     end;

write:	     call pl1_print$unaligned_nl(fake.sub_str,c2);

	     if substr(source_segment,c1+c2-1,1) ^= nl
	     then call pl1_print$non_varying_nl("",0);

show:	     if st_type = entry_statement | st_type = procedure_statement
	        then do;
		   l = q -> statement.labels -> list.element(2) -> reference.symbol -> symbol.location;
		   call display_text$display_abs(addrel(cg_static_$text_base,i),
					   addrel(cg_static_$text_reloc_base,i),l-i);
		   i = l;
		   end;

     	     call display_text(cg_static_$text_base,cg_static_$text_reloc_base,
	       cg_static_$sym_use_base,i,j-i);

	     if st_type = begin_statement
	     then call prt_begin_block(q -> statement.root);
	     else if st_type = on_statement
		then if ^ q -> statement.root -> operand(3) -> block.text_displayed
		     then call prt_on_unit(q -> statement.root -> operand(3));

	     end;

entry_name:    proc(pt,value);

dcl	     pt ptr,	/* points at statement node */
	     value char(32) varying;

dcl	     p ptr;

	     p = pt -> statement.labels -> element(2) -> reference.symbol -> symbol.token;
	     value = p -> token.string;
	     end;

	end;
