/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


get_array_size: proc(sym,units);

/* Modified 780807 by PG to fix 1651 (not checking for array that is too big)
   Modified 781128 by RAB to fix 1801 (array.element_boundary set incorrectly for interleaved arrays)
   Modified 781206 by RAB to fix 1796 (size of star extent array in structure calc incorrectly)
   Modified 790419 by PCK to implement 4-bit decimal
*/

/* parameters */

dcl	(sym ptr,
	units fixed bin (15)) parameter;

/* automatic */

dcl	is_packed_star_param bit(1) aligned;
dcl	(blk, s, a, b, t, p, q, dm, m) ptr;
dcl	(cm, cdm, c) fixed bin (24);
dcl	n fixed bin (15);
dcl	optable(6:7) bit(9) aligned initial(word_to_mod2,word_to_mod4);

/* builtins */

dcl	(binary, divide, null, min, max, mod) builtin;

/* conditions */

dcl	size condition;

/* external static */

dcl	(pl1_stat_$util_error,pl1_stat_$util_abort) variable static ext entry(fixed bin(15),ptr);
dcl	pl1_stat_$eis_mode bit(1) aligned ext static;
dcl	pl1_stat_$eis bit(1) aligned ext static;

/* internal static */

dcl	ctable(6:7) fixed bin(15) int static initial(2,4);
dcl	factor(7) fixed bin(15) int static initial(1,0,9,18,36,36,36);
dcl	round(5) fixed bin(15) int static initial(36,0,4,2,1);


	s = sym;

	blk = s->symbol.block_node;
	s->symbol.reference->reference.array_ref = "1"b;
	a = s->symbol.array;
	if a->array.element_boundary = 0 then a->array.element_boundary = s->symbol.boundary;

	a->array.offset_units = min(units,word_);

	a->array.c_element_size = s->symbol.c_word_size;
	a->array.c_element_size_bits = s->symbol.c_bit_size;
	a->array.element_size = s->symbol.word_size;
	a->array.element_size_bits = s->symbol.bit_size;

/* Insure that the element size is rounded upward to modulo the boundary requirement. */

	if a->element_boundary > a->offset_units   /* offset_units give the units in which the element size is measured. */
	then	if a->element_boundary > word_
		then	if a->element_size = null
			then do;
				c = ctable(a->element_boundary);
				a->c_element_size = divide(a->c_element_size+c-1,c,31,0)*c;
			end;
			else do;
				q = create_operator(optable(a->element_boundary),2);
				q->operand(2) = a->element_size;
				a->element_size = q;
			end;

		else	if a->element_boundary  = character_
			then do;
				if a->element_size = null
				then do;
					a->c_element_size = divide(a->c_element_size+bits_per_character-1,bits_per_character,31,0);
				end;
				else do;
					q = create_operator(bit_to_char,2);
					q->operand(2) = a->element_size;
					a->element_size = q;
				end;

				a->offset_units = character_;
			end;


/* If the array is a packed star_extent parameter, we must express offsets and sizes in bits */

	is_packed_star_param = s -> symbol.packed
			 & s -> symbol.star_extents
			 & s -> symbol.parameter;

	if is_packed_star_param
	then do;
		if a -> array.offset_units = character_
		then	if a -> array.element_size = null
			then	a -> array.c_element_size = a -> array.c_element_size * bits_per_character;
			else	a -> array.element_size = multf((a -> array.element_size),
					declare_constant$integer(bits_per_character));

		a -> array.offset_units = bit_;
		go to build_multipliers;
	end;


/* If the element size is constant and the units are less than word, try and convert
   the size to a value expressed in higher units.	*/

	if a->array.element_size ^= null then go to build_multipliers;
	if a->array.offset_units >= word_ then go to build_multipliers;

	if a->array.offset_units = bit_
	then	if pl1_stat_$eis_mode
		then	if mod(a->array.c_element_size,bits_per_word)=0
			then do;
				a->array.offset_units = word_;
				a->array.c_element_size = divide(a->array.c_element_size,bits_per_word,31,0);
			end;
			else	goto build_multipliers;
		else	if mod(a->array.c_element_size,bits_per_character)=0
			then do;
				a->array.offset_units = character_;
				a->array.c_element_size = divide(a->array.c_element_size,bits_per_character,31,0);
			end;
			else	goto build_multipliers;

	if a->array.offset_units = character_
	then	if pl1_stat_$eis_mode
		then	if mod(a->array.c_element_size,characters_per_word)=0
			then do;
				a->array.offset_units = word_;
				a->array.c_element_size = divide(a->array.c_element_size,characters_per_word,31,0);
			end;
			else	goto build_multipliers;
		else	if mod(a->array.c_element_size,characters_per_half)=0
			then do;
				a->array.offset_units = half_;
				a->array.c_element_size = divide(a->array.c_element_size,characters_per_half,31,0);
			end;
			else	goto build_multipliers;

	if a->array.offset_units = half_
	then	if mod(a->array.c_element_size,2)=0
		then do;
			a->array.offset_units = word_;
			a->array.c_element_size = divide(a->array.c_element_size,2,31,0);
		end;

/* walk down the bound pairs and construct two multipliers for each bound pair.
   The descriptor multiplier is used only when the array is accessed
   as a parameter.  It is expressed in bits if the array is packed and
   in words if it is unpacked.  The other multiplier is used by this procedure and
   is expressed in the units given by offset_units.  Multipliers are computed by the
   following rule:

	m(n) = element_size
	m(n-1) = (hb(n)-lb(n)+1)*m(n)
	m(n-2) = (hb(n-1)-lb(n-1)+1)*m(n-1)
	   .
	   .
	   .
	m(1) = (hb(2)-lb(2)+1)m(2)

   The address of an element is :
	addr(a(i(1),i(2),...i(n)) = B-V+(i(1)*m(1)+i(2)*m(2)...i(n)*m(n))
	B = the beginning of storage for the array ( the offset of its first element).
	V = the virtual origin (lb(1)*m(1)+lb(2)*m(2)...lb(n)*m(n))
		the address of the 0th element.
								*/

/* the first multiplier is the element size.  It is converted to bits when used
   as the descriptor multiplier of a packed array. */

build_multipliers:
	on size call pl1_stat_$util_abort (357, s);	/* array s won't fit in 262144 words */
	m = a->array.element_size;
	cm = a->array.c_element_size;

	if m = null then m = declare_constant$integer((cm));

	if s->symbol.packed
	then	c = factor(a->array.offset_units);
	else	c = 1;

	cdm = c*cm;

	if c = 1
	then	dm = m;
	else	dm = multf(m,declare_constant$integer((c)));

/* loop down the bound pairs and compute the multipliers and virtual origin.	*/

	do b = a->array.bounds repeat b->bound.next while(b^=null);

/* if the multiplier is constant insure that it is included in the object program.	*/

		if m = null then m = declare_constant$integer((cm));
		if dm = null then dm = declare_constant$integer((cdm));

/* check for decimal integer constant bounds. */

		if b->bound.lower^=null then if b->bound.lower->node.type = token_node
		then	if b->bound.lower->token.type = dec_integer
			then do;
				b->bound.c_lower = token_to_binary((b->bound.lower));
				b->bound.lower = null;
			end;

		if b->bound.upper^=null then if b->bound.upper->node.type = token_node
		then	if b->bound.upper->token.type = dec_integer
			then do;
				b->bound.c_upper = token_to_binary((b->bound.upper));
				b->bound.upper = null;
			end;

/* if this is an auto or defined array evaluate its bounds in the prologue.  If any
   multiplier is an expression evaluate it in the prologue.	*/

		if s->symbol.auto | s->symbol.defined
		then do;
			if b->bound.lower ^= null
				then b->bound.lower = assignf(b->bound.lower);
			if b->bound.upper ^= null
				then b->bound.upper = assignf(b->bound.upper);
			if m->node.type = operator_node
				then m = assignf((m));
		end;

/* If this is a star extent array the multipliers are given by the descriptor.
   Otherwise we compute them and save them in the bound nodes.  */

		if ^(s->symbol.star_extents & s->symbol.parameter)
		then do;
			b->bound.multiplier = m;
			b->bound.c_multiplier = cm;
			if s->symbol.controlled & b->bound.desc_multiplier ^= null
			then b->bound.symtab_multiplier = dm;
			else b->bound.desc_multiplier = dm;
			b->bound.c_desc_multiplier = cdm;
		end;

/* add this term to the virtual origin.				*/

		call virtue(a,b);

/* develop the next multiplier.	*/

		if b->bound.lower = null
		then	if b->bound.c_lower = 1
			then	if b->bound.upper = null
				then	if cm = 0
					then do;
						m = multf(m,declare_constant$integer((b->bound.c_upper)));
						cm = 0;
						dm = multf(dm,declare_constant$integer((b->bound.c_upper)));
						cdm = 0;
					end;
					else do;
						m = null;
(size):						cm = b->bound.c_upper*cm;
						dm = null;
(size):						cdm = b->bound.c_upper*cdm;
					end;
				else do;
					m = multf(m,(b->bound.upper));
					cm = 0;
					dm = multf(dm,(b->bound.upper));
					cdm = 0;
				end;
			else do;
				c = b->bound.c_lower-1;
				if b->bound.upper = null
				then do;
					c = b->bound.c_upper-c;
					if cm = 0
					then do;
						m = multf(m,declare_constant$integer((c)));
						cm = 0;
						dm = multf(dm,declare_constant$integer((c)));
						cdm = 0;
					end;
					else do;
						m = null;
(size):						cm = c*cm;
						dm = null;
(size):						cdm = c*cdm;
					end;
				end;
				else do;
					t = subf(b->bound.upper,declare_constant$integer((c)));
					m = multf(m,t);
					cm = 0;
					dm = multf(dm,t);
					cdm = 0;
				end;
			end;

		else do;
			if b->bound.upper = null
				then t = subf(declare_constant$integer(b->bound.c_upper+1),b->bound.lower);
				else t = subf(b->bound.upper,subf(b->bound.lower,declare_constant$integer(1)));
			m = multf(m,t);
			cm = 0;
			dm = multf(dm,t);
			cdm = 0;
		end;

		if cm<0
		then	call pl1_stat_$util_error(168,s);
		else	if cm = 0
			then	if m = null
				then	call pl1_stat_$util_abort(168,s);

		a->array.number_of_dimensions = a->array.number_of_dimensions+1;
	end;

/* the last multiplier gives the total array size exclusive of any
   rounding forced by succeeding structure members.		*/

/* record the total size of the array measured in bits.	*/

	s->symbol.bit_size = null;
	s->symbol.c_bit_size = 0;
	c = factor(a->array.offset_units);

	if cm = 0
	then	if c = 1
		then	s->symbol.bit_size = m;
		else	s->symbol.bit_size = multf(m,declare_constant$integer((c)));
	else
(size):		s -> symbol.c_bit_size = cm * c;

/* store the array size in the symbol node.	*/
	s->symbol.word_size = m;
	s->symbol.c_word_size = cm;

/* if this is a structure copy its bounds and multipliers onto all contained members
   at every level. */

	if s->symbol.structure then call interleaved(s);

	if is_packed_star_param
	then	units = a->array.offset_units;
	else	units = max(units,a->array.offset_units);

	return;

/* subroutine to make a prologue assignment. */

assignf: proc(e) returns(ptr);

dcl	e ptr unal,
	(p,q) ptr;

	q = create_operator(assign,2);
	q->operand(2) = e;
	p,q->operand(1) = declare_integer(blk);
	p->reference.symbol->symbol.c_dcl_size = max_offset_precision;
	p = create_statement$prologue(assignment_statement,blk,null,(blk->block.prefix));
	p->statement.root = copy_expression((q));

	return(q->operand(1));

	end;


/* subroutine to create expressions. */

addf:	proc(e1,e2) returns(ptr);

dcl	(e1,e2) ptr unal,
	q ptr;
dcl	opcode bit(9) aligned;

	if e1 = null then return(e2);
	opcode = add;
	go to common;

subf:	entry(e1,e2) returns(ptr);

	opcode = sub;

common:
	q = create_operator(opcode,3);
	q->operand(2) = e1;
	q->operand(3) = e2;

	return(q);

	end;

multf:	proc(e1,e2) returns(ptr);

dcl	(e1,e2) ptr;

dcl	(arg(2), q) ptr,
	i fixed bin(15),
	based_integer fixed bin(35) based;

	arg(1) = e1;
	arg(2) = e2;

	do i=1 to 2;
		if arg(i)->node.type=reference_node
		then	if arg(i)->reference.symbol->node.type=symbol_node
			then	if arg(i)->reference.symbol->symbol.constant
				then	if arg(i)->reference.symbol->symbol.initial->based_integer=0
					then	return(arg(i));
					else	if arg(i)->reference.symbol->symbol.initial->based_integer=1
						then	return(arg(3-i));
	end;

	q = create_operator((mult),3);
	q->operand(2) = e1;
	q->operand(3) = e2;

	return(q);

	end;

/* subroutine to add a term to the virtual origin. */

virtue: proc(a,b);

dcl	(a,b) ptr;

	if b->lower = null
	then	if b->c_lower = 1
		then	if b->c_multiplier = 0
			then	a->virtual_origin = addf(a->virtual_origin,b->multiplier);
			else	a->c_virtual_origin = a->c_virtual_origin+b->c_multiplier;
		else	if b->c_multiplier = 0
			then	a->virtual_origin = addf(a->virtual_origin,multf((b->multiplier),
					declare_constant$integer((b->c_lower))));
			else	a->c_virtual_origin = a->c_virtual_origin+b->c_multiplier*b->c_lower;
	else	a->virtual_origin = addf(a->virtual_origin,multf((b->multiplier),(b->lower)));

	end virtue;

/* subroutine to distribute the bounds and multipliers of a dimensioned structure onto
   all of its contained members at every level.  The virtual origin of the members
   is recomputed to include the bounds inherited from its containing structures. */

interleaved: proc(d);

dcl	(equal,packed_eq) bit(1);
dcl	(d,p,q,a1,b,b1,v) ptr;

dcl	create_array entry returns(ptr);
dcl	create_bound entry returns(ptr);

	do p = d->symbol.son repeat p->symbol.brother while(p^=null);
		a1=p->symbol.array;
		packed_eq = s->symbol.packed = p->symbol.packed;
		if a1=null
		then do;
			p->symbol.dimensioned = "1"b;
			equal = "1"b;
			p->symbol.array,a1 = create_array();
			a1->array=a->array;
			a1->array.number_of_dimensions  ,
			a1->array.own_number_of_dimensions  ,
			a1->array.c_virtual_origin=0;
			a1->array.virtual_origin=null;
			a1->array.element_size_bits = p->symbol.bit_size;
			a1->array.c_element_size_bits = p->symbol.c_bit_size;
			a1->array.element_size = p->symbol.word_size;
			a1->array.c_element_size = p->symbol.c_word_size;
			a1->array.element_boundary = p->symbol.boundary;	/* Fixes 1801. */
			b1=null;
		end;
		else do;
			equal = a->array.offset_units = a1->array.offset_units;
			if ^equal
			then do;
				a1->array.offset_units = bit_;
				a1->array.c_virtual_origin = 0;
				a1->array.virtual_origin = null;
				a1->array.element_size = a1->array.element_size_bits;
				a1->array.c_element_size = a1->array.c_element_size_bits;
			end;

			do b = a1->array.bounds repeat b->bound.next while(b^=null);
				if ^equal
				then do;
					b->bound.multiplier = b->bound.desc_multiplier;
					b->bound.c_multiplier = b->bound.c_desc_multiplier;
					call virtue(a1,b);
				end;

				b1 = b;
			end;
		end;

/* this code copies the bounds from the father to the son */
/* If "equal" the multipliers are copied without change, otherwise the descriptor
   multipliers are used as the standard multipliers and their units are converted to
   bits when necessary.	*/

		p->symbol.exp_extents   = d->symbol.exp_extents;
		p->symbol.refer_extents = d->symbol.refer_extents;
		p->symbol.star_extents  = d->symbol.star_extents;
		a1->array.interleaved = "1"b;
		p->symbol.connected = "0"b;
		p->symbol.reference->reference.array_ref = "1"b;

		do b = a->array.bounds repeat b->bound.next while(b^=null);
			q = create_bound();
			q->bound=b->bound;
			q->bound.next=null;
			q->bound.lower = copy_expression(b->bound.lower);
			q->bound.upper = copy_expression(b->bound.upper);

			if equal
			then do;
				q->bound.multiplier = copy_expression(b->bound.multiplier);
				q->bound.c_multiplier = b->bound.c_multiplier;
				if packed_eq
				then do;
					q->bound.desc_multiplier = copy_expression(b->bound.desc_multiplier);
					q->bound.c_desc_multiplier = b->bound.c_desc_multiplier;
				end;
				else do;
					q->bound.desc_multiplier = copy_expression(multf((b->bound.desc_multiplier),
							declare_constant$integer(bits_per_word)));
					q->bound.c_desc_multiplier = b->bound.c_desc_multiplier*bits_per_word;
				end;
			end;
			else do;
				if s->symbol.packed & p->symbol.packed
				then do;
					q->bound.c_multiplier = b->bound.c_desc_multiplier;
					q->bound.multiplier = copy_expression(b->bound.desc_multiplier);
					q->bound.c_desc_multiplier = b->bound.c_desc_multiplier;
					q->bound.desc_multiplier = q->bound.multiplier;
				end;
				else do;
					q->bound.c_multiplier = b->bound.c_desc_multiplier*bits_per_word;
					q->bound.multiplier = copy_expression(multf((b->bound.desc_multiplier),
							declare_constant$integer(bits_per_word)));
					q->bound.c_desc_multiplier = q->bound.c_multiplier;
					q->bound.desc_multiplier = q->bound.multiplier;
				end;

				call virtue(a1,q);
			end;

/*  get the next bound.	*/

			if b1 = null
			then	a1->array.bounds = q;
			else	b1->bound.next = q;

			b1 = q;
		end;

/* add the structure's number of dimensions to the member's number of dims */

		a1->array.number_of_dimensions=a1->array.number_of_dimensions+
			a->array.number_of_dimensions;

/* add the structure's virtual origin to the member's virtual origin */

		if equal
		then do;
			a1->array.virtual_origin = addf(a1->array.virtual_origin,a->array.virtual_origin);
			a1->array.c_virtual_origin = a1->array.c_virtual_origin +
					a->array.c_virtual_origin;
		end;

		if p->symbol.structure
		then	call interleaved(p);
	end;

	end interleaved;

/* include files */

%include language_utility;
%include array;
%include block;
%include boundary;
%include nodes;
%include op_codes;
%include operator;
%include reference;
%include statement;
%include statement_types;
%include symbol;
%include system;
%include token;
%include token_types;
     end /* get_array_size */;
