/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2,idind30 */
get_size:
     proc (sym);

/* Modified 780712 by PG for unsigned */
/* Modified 790419 by PCK to implement 4-bit decimal */
/* Modified 830427 BIM to implement options (packed) for ptrs */

	dcl     (sym, s, q, p, b)	        ptr;
	dcl     (n, e, i)		        fixed bin (15);
	dcl     units		        fixed bin (3);

	dcl     pl1_stat_$util_abort	        ext static variable entry (fixed bin (15), ptr);

	dcl     pl1_stat_$eis_mode	        bit (1) aligned ext static;

	dcl     convert_map		        (7) fixed bin (31) int static initial (1, 0, 9, 18, 36, 36, 36);
	dcl     round		        (4) fixed bin (15) int static initial (36, 0, 4, 2);

	dcl     optable		        (4) bit (9) aligned
				        initial (bit_to_word, ""b, char_to_word, half_to_word);

	dcl     file_conditions	        (7) char (13) int static
				        initial ("key", "record", "endpage", "endfile", "name", "transmit",
				        "undefinedfile");

	dcl     (divide, fixed, null, length, max)
				        builtin;

%include language_utility;
%include symbol;
%include block;
%include statement;
%include statement_types;
%include nodes;
%include reference;
%include token;
%include operator;
%include op_codes;
%include boundary;
%include system;

	s = sym;

	b = s -> symbol.block_node;

	if s -> symbol.bit | s -> symbol.char | s -> symbol.area
	then do;
		if s -> symbol.dcl_size ^= null & (s -> symbol.auto | s -> symbol.defined)
		then do;
			p = create_statement$prologue (assignment_statement, b, null, (b -> block.prefix));
			q, p -> statement.root = create_operator (assign, 2);
			q -> operand (2) = s -> symbol.dcl_size;
			p, q -> operand (1), s -> symbol.dcl_size = declare_integer (b);
			p -> reference.symbol -> symbol.c_dcl_size = max_length_precision;
		     end;

		if s -> symbol.varying
		then s -> symbol.reference -> reference.varying_ref = "1"b;
		else if ^s -> symbol.area
		then do;
			s -> symbol.reference -> reference.c_length = s -> symbol.c_dcl_size;
			s -> symbol.reference -> reference.length = s -> symbol.dcl_size;
		     end;
	     end;

	if s -> symbol.structure
	then do;
		units = s -> symbol.reference -> reference.c_length;
		go to get_bit_size;
	     end;

	if s -> symbol.packed
	then do;
		if s -> symbol.char
		then do;
			units = character_;
			s -> symbol.word_size = s -> symbol.dcl_size;
			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			go to get_boundary;
		     end;

		if s -> symbol.bit
		then do;
			units = bit_;
			s -> symbol.word_size = s -> symbol.dcl_size;
			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			go to get_boundary;
		     end;

		if s -> symbol.binary
		then do;
			units = bit_;
			if s -> symbol.float
			then s -> symbol.c_word_size = s -> symbol.c_dcl_size + 1 + bits_per_binary_exponent;
			else if s -> symbol.unsigned
			then s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			else s -> symbol.c_word_size = s -> symbol.c_dcl_size + 1;

			if s -> symbol.complex
			then s -> symbol.c_word_size = 2 * s -> symbol.c_word_size;
			go to get_boundary;
		     end;

		if s -> symbol.decimal
		then do;
			units = character_;
			s -> symbol.c_word_size = (s -> symbol.c_dcl_size + 1 + 2 * fixed (s -> symbol.float));
			s -> symbol.c_word_size =
			     divide (s -> symbol.c_word_size + mod (s -> symbol.c_word_size, 2),
			     packed_digits_per_character, 24, 0);
			if s -> symbol.complex
			then s -> symbol.c_word_size = 2 * s -> symbol.c_word_size;
			go to get_boundary;
		     end;

		if s -> symbol.ptr
		then do;
			units = bit_;
			s -> symbol.c_word_size = bits_per_packed_ptr;
			go to get_boundary;
		     end;

		if s -> symbol.picture
		then do;
			units = character_;

			if s -> symbol.general = null
			then s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			else do;
				if s -> symbol.general -> node.type = token_node
				then do;

/* usual case */

					s -> symbol.c_word_size = length (s -> symbol.general -> token.string);

					call declare_picture (s -> symbol.general -> token.string, s, e);
					if e ^= 0
					then call pl1_stat_$util_abort (e, s);
				     end;
				else s -> symbol.reference -> reference.c_length = s -> symbol.c_dcl_size;

				s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			     end;

			go to get_boundary;
		     end;
	     end;
	else do;
		if s -> symbol.ptr
		then do;
			units = word_;
			if ^s -> symbol.explicit_packed
			then s -> symbol.c_word_size = words_per_pointer;
			else s -> symbol.c_word_size = words_per_packed_pointer;
			go to get_boundary;
		     end;

		if s -> symbol.binary
		then do;
			units = word_;

			if s -> symbol.float
			then if s -> symbol.c_dcl_size > max_p_flt_bin_1
			     then s -> symbol.c_word_size = words_per_flt_bin_2;
			     else s -> symbol.c_word_size = words_per_flt_bin_1;
			else if s -> symbol.c_dcl_size > max_p_fix_bin_1
			then s -> symbol.c_word_size = words_per_fix_bin_2;
			else s -> symbol.c_word_size = words_per_fix_bin_1;

			if s -> symbol.complex
			then s -> symbol.c_word_size = 2 * s -> symbol.c_word_size;
			go to get_boundary;
		     end;

		if s -> symbol.char
		then do;
			units = character_;
			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			s -> symbol.word_size = s -> symbol.dcl_size;
			go to get_boundary;
		     end;

		if s -> symbol.bit
		then do;
			units = bit_;
			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			s -> symbol.word_size = s -> symbol.dcl_size;
			go to get_boundary;
		     end;

		if s -> symbol.decimal
		then do;
			units = character_;
			s -> symbol.c_word_size = (s -> symbol.c_dcl_size + 1 + fixed (s -> symbol.float));
			if s -> symbol.complex
			then s -> symbol.c_word_size = 2 * s -> symbol.c_word_size;
			go to get_boundary;
		     end;

		if s -> symbol.entry
		then do;
			units = word_;
			s -> symbol.c_word_size = words_per_entry_var;
			go to get_boundary;
		     end;

		if s -> symbol.label
		then do;
			units = word_;
			s -> symbol.c_word_size = words_per_label_var;
			goto get_boundary;
		     end;

		if s -> symbol.file
		then do;
			units = word_;
			s -> symbol.c_word_size = words_per_file_var;
			goto get_boundary;
		     end;

		if s -> symbol.format
		then do;
			units = word_;
			s -> symbol.c_word_size = words_per_format;
			goto get_boundary;
		     end;

		if s -> symbol.offset
		then do;
			units = word_;
			s -> symbol.c_word_size = words_per_offset;
			go to get_boundary;
		     end;

		if s -> symbol.area
		then do;
			units = word_;
			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			s -> symbol.word_size = s -> symbol.dcl_size;
			go to get_boundary;
		     end;

		if s -> symbol.picture
		then do;
			units = character_;

			if s -> symbol.general = null
			then s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			else do;
				if s -> symbol.general -> node.type = token_node
				then do;

/* usual case */

					s -> symbol.c_word_size = length (s -> symbol.general -> token.string);

					call declare_picture (s -> symbol.general -> token.string, s, e);
					if e ^= 0
					then call pl1_stat_$util_abort (e, s);
				     end;
				else s -> symbol.reference -> reference.c_length = s -> symbol.c_dcl_size;

				s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			     end;

			go to get_boundary;
		     end;

		if s -> symbol.storage_block
		then do;
			units = word_;
			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
			go to get_boundary;
		     end;

		if s -> symbol.condition
		then do;
			units = word_;
			s -> symbol.c_word_size = words_per_condition_var;
			do i = 1 to 7;
			     if s -> symbol.token -> token.string = file_conditions (i)
			     then s -> symbol.c_word_size = 8;
			end;
			goto get_boundary;
		     end;

		units = word_;
	     end;

/* compute the required boundary.	*/

get_boundary:
	if s -> symbol.packed
	then if s -> symbol.decimal | s -> symbol.char | s -> symbol.picture
	     then s -> symbol.boundary = character_;
	     else s -> symbol.boundary = bit_;
	else do;
		s -> symbol.boundary = word_;

		if s -> symbol.fixed & s -> symbol.binary
		then if s -> symbol.c_word_size > words_per_fix_bin_1
		     then s -> symbol.boundary = mod2_;

		if s -> symbol.float & s -> symbol.binary
		then if s -> symbol.c_word_size > words_per_flt_bin_1
		     then s -> symbol.boundary = mod2_;

		if s -> symbol.label | s -> symbol.entry | s -> symbol.file | s -> symbol.format
		     | s -> symbol.condition | s -> symbol.area
		then s -> symbol.boundary = mod2_;

		if s -> symbol.ptr
		then if s -> symbol.explicit_packed
		     then s -> symbol.boundary = word_;
		     else s -> symbol.boundary = mod2_;
	     end;

	if ^s -> symbol.member
	then s -> symbol.boundary = max (s -> symbol.boundary, word_);

/* determine the size in bits excluding any rounding.	*/

get_bit_size:
	if s -> symbol.word_size = null
	then s -> symbol.c_bit_size = s -> symbol.c_word_size * convert_map (units);
	else if units = bit_
	then s -> symbol.bit_size = s -> symbol.word_size;
	else s -> symbol.bit_size = multf ((s -> symbol.word_size), declare_constant$integer (convert_map (units)));

/* if the units are less than word and this is not a packed item, then round the size to words.	*/

	if units < word_ & ^s -> symbol.packed
	then do;
		if s -> symbol.word_size = null
		then s -> symbol.c_word_size =
			divide (s -> symbol.c_word_size + round (units) - 1, round (units), 31, 0);
		else do;
			q = create_operator (optable (units), 2);
			q -> operand (2) = s -> symbol.word_size;
			s -> symbol.word_size = q;
		     end;

		units = word_;
	     end;

/* if this is a varying string add one to the word size.	*/

	if s -> symbol.varying
	then if s -> symbol.word_size = null
	     then s -> symbol.c_word_size = s -> symbol.c_word_size + words_per_varying_string_header;
	     else s -> symbol.word_size =
		     addf ((s -> symbol.word_size), declare_constant$integer (words_per_varying_string_header));

/* if this is an array call get_array size to find the total size and to compute the
   multipliers and virtual origin used by subscripted references to the array elements.	*/

	if s -> symbol.array ^= null
	then call get_array_size (s, units);

/* if this is a level 1 packed item round the size to words.	*/

	if s -> symbol.packed & ^s -> symbol.member & units < word_
	then if s -> symbol.word_size ^= null
	     then do;
		     q = create_operator (optable (units), 2);
		     q -> operand (2) = s -> symbol.word_size;
		     s -> symbol.word_size = q;
		end;
	     else s -> symbol.c_word_size = divide (s -> symbol.c_word_size + round (units) - 1, round (units), 31, 0);

/* if this is a member of a structure try to improve the units in which the size is expressed.	*/

	if ^s -> symbol.member
	then goto exit;

	if units = word_
	then if ^s -> symbol.structure
	     then units = max (s -> symbol.boundary, units);
	if s -> symbol.word_size ^= null
	then go to exit;
	if units >= word_
	then go to exit;

	if units = bit_
	then if pl1_stat_$eis_mode
	     then if s -> symbol.c_word_size = divide (s -> symbol.c_word_size, bits_per_word, 31, 0) * bits_per_word
		then do;
			units = word_;
			s -> symbol.c_word_size = divide (s -> symbol.c_word_size, bits_per_word, 31, 0);
		     end;
		else goto exit;
	     else if s -> symbol.c_word_size
		     = divide (s -> symbol.c_word_size, bits_per_character, 31, 0) * bits_per_character
	     then do;
		     units = character_;
		     s -> symbol.c_word_size = divide (s -> symbol.c_word_size, bits_per_character, 31, 0);
		end;
	     else goto exit;

	if units = character_
	then if pl1_stat_$eis_mode
	     then if s -> symbol.c_word_size
		     = divide (s -> symbol.c_word_size, characters_per_word, 31, 0) * characters_per_word
		then do;
			units = word_;
			s -> symbol.c_word_size = divide (s -> symbol.c_word_size, characters_per_word, 31, 0);
		     end;
		else goto exit;
	     else if s -> symbol.c_word_size
		     = divide (s -> symbol.c_word_size, characters_per_half, 31, 0) * characters_per_half
	     then do;
		     units = half_;
		     s -> symbol.c_word_size = divide (s -> symbol.c_word_size, characters_per_half, 31, 0);
		end;
	     else goto exit;

	if units = half_
	then if s -> symbol.c_word_size = divide (s -> symbol.c_word_size, 2, 31, 0) * 2
	     then do;
		     units = word_;
		     s -> symbol.c_word_size = divide (s -> symbol.c_word_size, 2, 31, 0);
		end;

exit:
	if s -> symbol.member
	then s -> symbol.reference -> reference.c_length = units;

/* subroutine to do arithmetic. */

multf:
     proc (a, b) returns (ptr);

	dcl     (a, b, c)		        ptr;
	dcl     opcode		        bit (9) aligned;

	opcode = mult;
	go to common;

addf:
     entry (a, b) returns (ptr);

	opcode = add;
common:
	c = create_operator (opcode, 3);
	c -> operand (2) = a;
	c -> operand (3) = b;
	return (c);
     end;

     end /* get_size */;
