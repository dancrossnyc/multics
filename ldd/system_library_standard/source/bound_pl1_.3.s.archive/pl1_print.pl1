/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1992   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(92-09-10,Zimmerman), approve(92-09-10,MCR8257), audit(92-09-18,Vu),
     install(92-10-06,MR12.5-1023):
     Fix segment overflow in source section of listing.
                                                   END HISTORY COMMENTS */


/*	print routines for use by the PL/1 compiler in writing into the listing */
/*	segment.  There are four entries for the combinations of varying and non-*/
/*	varying character string parameters and for with and without new-line	*/
/*	characters appended to the string before transmission.		*/

/*	Written by:	J.D. Mills	*/
/*	On		22 January 1969				*/
/*	Modified by:	B. L. Wolman on 16 May 1969 to use cv_string */
/*	Modified by:	B. L. Wolman on 21 May 1969 to accept ptr to string */
/*	Rewritten in pl1 replacing cv_string with substr on 28 JULY 1969 by the author. */
/*	Modified on:	20 August 1970 by P. Green for Version II */
/*	Modified on:	17 January 1974 by R. A. Barnes for 256K segments */
/*	Modified 770502 by PG to rewrite $for_lex entry to work with EIS lex */

pl1_print$varying:	proc(var_string);

/* parameters */

dcl	var_string	char(*) varying aligned;

/* automatic */

dcl	l_suff	fixed bin,
	arg_length	fixed bin(21);

/* based */

declare	string char (261120) aligned based (pl1_stat_$list_ptr);

/* builtins */

declare (	length, substr) builtin;

/* conditions */

declare	listing_overflow condition;

/* external static */

dcl (	pl1_stat_$list_ptr		ptr,
	pl1_stat_$max_list_size	fixed bin(21),
	pl1_stat_$char_pos		fixed bin(21)) static external;

/* internal static */

declare	NL	character(1) aligned static internal initial("
");

/* program */

/*	Entry to write a varying character string sans new-line character into the listing segment.	*/

	l_suff=0;
	go to l1;

/*	Entry to write a varying character string avec new-line character into the listing segment.	*/

pl1_print$varying_nl:	entry(var_string);

	l_suff=1;

l1:	arg_length=length(var_string);

	if arg_length + pl1_stat_$char_pos + l_suff > pl1_stat_$max_list_size
	then signal condition(listing_overflow);

	substr(string,pl1_stat_$char_pos,arg_length)=var_string;
	goto done;

/*	Entry to write a non-varying character string sans new-line character into the listing segment.	*/

pl1_print$non_varying:	entry(nv_string,size);

dcl	nv_string char(*) aligned,
	size fixed bin(35);

	l_suff=0;
	go to l2;

/*	Entry to write non-varying character string avec new-line character into the listing segment.	*/

pl1_print$non_varying_nl:	entry(nv_string,size);

	l_suff=1;

l2:	if size > 0
	then arg_length=size;
	else arg_length=length(nv_string);

	if arg_length + pl1_stat_$char_pos + l_suff > pl1_stat_$max_list_size
	then signal condition(listing_overflow);
	substr(string,pl1_stat_$char_pos,arg_length)=nv_string;

done:	pl1_stat_$char_pos=pl1_stat_$char_pos + arg_length;

	if l_suff ^= 0
	then do;
	     substr(string,pl1_stat_$char_pos,1) = NL;
	     pl1_stat_$char_pos = pl1_stat_$char_pos+1;
	     end;

	return;

/*	Entry to write string given by ptr into listing without nl */

pl1_print$string_ptr: entry(pt,size);

dcl	pt ptr;	/* points at string */
dcl	based_string char(size) aligned based(pt);

	l_suff = 0;
	goto l3;

/*	Entry to write string given by ptr into listing with nl */

pl1_print$string_ptr_nl: entry(pt,size);

	l_suff = 1;

l3:	arg_length = size;

	if arg_length + pl1_stat_$char_pos + l_suff > pl1_stat_$max_list_size
	then signal condition(listing_overflow);

	substr(string,pl1_stat_$char_pos,arg_length)=based_string;

	goto done;

pl1_print$for_lex:
	entry (bv_source_ptr, bv_line_number, bv_line_start, bv_line_length, bv_suppress_line_numbers,
	     bv_line_begins_in_comment);

/* parameters */

declare (	bv_source_ptr ptr,
	bv_line_number fixed bin (14),
	bv_line_start fixed bin (21),
	bv_line_length fixed bin (21),
	bv_suppress_line_numbers bit (1) aligned,
	bv_line_begins_in_comment bit (1) aligned
	) parameter;

/* automatic */

declare	line_number_string picture "zzzzzzzz9";

/* external static */

declare	pl1_stat_$source_seg fixed bin (8) external static;

/* internal static */

declare SPACE_FOR_LINE_NUMBERS_PLUS_ONE_BLANK fixed bin internal static options (constant) init (10);
	
/* program */

/* A source program cannot be more than a single segment in length, but the
   LISTING (including headers, incl. files, etc.) of the source can exceed
   a single segment. Thus this check. We could do it in two parts (one for
   the line number field, if we're not supressing them) and the other for
   the actual line... but it's more efficient to only do the check once.
   If we're going msf on the listing (which is guaranteed if we approach 
   msf in this phase) doing it a few characters early won't hurt.  phx21284 */

	if pl1_stat_$char_pos + SPACE_FOR_LINE_NUMBERS_PLUS_ONE_BLANK
	     + bv_line_length >= pl1_stat_$max_list_size
	     then signal condition(listing_overflow);
	

	if ^bv_suppress_line_numbers
	then do;
		line_number_string = bv_line_number;
		substr (string, pl1_stat_$char_pos,
		     SPACE_FOR_LINE_NUMBERS_PLUS_ONE_BLANK) = line_number_string;  /* move in digits + 1 blank */

		if pl1_stat_$source_seg > 0
		then do;
			line_number_string = pl1_stat_$source_seg;
			substr (string, pl1_stat_$char_pos, 3) = substr (line_number_string, 7, 3);
		     end;

		pl1_stat_$char_pos = pl1_stat_$char_pos + SPACE_FOR_LINE_NUMBERS_PLUS_ONE_BLANK;

		if bv_line_begins_in_comment
		then substr (string, pl1_stat_$char_pos - 1, 1) = "*";
	     end;

	substr (string, pl1_stat_$char_pos, bv_line_length) = substr (bv_source_ptr -> based_string,
	     bv_line_start, bv_line_length);
	pl1_stat_$char_pos = pl1_stat_$char_pos + bv_line_length;
	return;

/*	Entry to write unaligned string avec new-line character into the listing segment */

pl1_print$unaligned_nl:	entry(unal_string,size);

dcl	unal_string char(*) unaligned;

	if size > 0
	then arg_length = size;
	else arg_length = length(unal_string);

	if arg_length + pl1_stat_$char_pos >= pl1_stat_$max_list_size
	then signal condition(listing_overflow);

	substr(string,pl1_stat_$char_pos,arg_length) = unal_string;

	l_suff = 1;
	goto done;
	end;
