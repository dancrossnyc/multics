/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* program to display output text produced by pl/1

   Initial Version: 17 October, 1968
	Modified: 19 August 1972 by BLW
	Modified:	20 February 1973 by RAB for multiple base-regs
	Modified:	3 July 1973 by RAB for EIS	
	Modified:	21 December 1976 by RAB to fix 1565	
	Modified: 5 May 1977 by SHW for new format pl1_operator_names
	Modified 770630 by PG to fix 1615 (stop printing fill(000) field for TCT and SCD)
	Modified: 9 August 1978 by PCK to print the name of the external entry operator with the entry sequence
	Modified: 25 April 1979 by PCK to implement 4-bit decimal
	Modified:	20 August 1979 by RAB to recognize 04 for andnot
*/

display_text: proc (t_pt, r_pt, s_pt, delta, number);

/* parameters */

	dcl     t_pt		 ptr,		/* points at text base */
	        r_pt		 ptr,		/* points at relocation base */
	        s_pt		 ptr,		/* points at symbol use base */
	        delta		 fixed bin,	/* offset of starting position */
	        number		 fixed bin;	/* number to print */

	dcl     (p, q, s, sym_pt, tok_pt, line_pt, pt) ptr,
	        (i, j, k, m, mop, n, save_k, irand, nrands, ndesc) fixed bin,
	        (fract_offset, offset, size, scale) fixed bin (18),
	        (ignore_ic_mod, double, eis, eis_desc, need_comma, ext_base, itag, has_ic, decimal) bit (1),
	        ht		 char (1) int static aligned init ("	"), /* tab */
	        htht		 char (2) int static aligned init ("		"), /* two tabs */
	        c			 char (1),
	        cstring		 char (12),
	        op_code		 char (5),
	        tag		 char (3),
	        line		 char (256);

/* entries */

	dcl     binoct		 entry (aligned bit (*)) returns (char (12) aligned),
	        pl1_print$string_ptr_nl entry (ptr, fixed bin);

/* external static */

	dcl     (cg_static_$text_pos	 fixed bin,
	        pl1_operators_$operator_table,
	        pl1_operator_names_$first fixed bin (18),
	        pl1_operator_names_$pl1_operator_names_
	        )			 external static;

/* builtins */

	dcl     (addr, addrel, char, divide, fixed, length, ltrim, min, null, ptr, rel, string, substr) builtin;

%include operator_names;

%include op_mnemonic_dcl_;

	dcl     1 name_pair		 aligned based (p),
		2 rel_ptr		 unaligned bit (18),/* ptr to ascii string */
		2 size		 unaligned bit (18);/* size of string */

	dcl     based_string	 aligned char (size) based (p);

	dcl     digit		 (0:9) char (1) aligned int static
				 init ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9");

	dcl     relocation		 (-1:11) char (1) aligned int static
				 init ("a", "t", "1", "2", "3", "l", "d", "s", "7", "8", "i", "r", "e");

	dcl     base		 (0:7) char (4) aligned int static
				 init ("pr0|", "pr1|", "pr2|", "pr3|", "pr4|", "pr5|", "pr6|", "pr7|");

	dcl     modifier		 (0:63) char (3) aligned int static
				 init ("n", "au", "qu", "du", "ic", "al", "ql", "dl",
				 "0", "1", "2", "3", "4", "5", "6", "7",
				 "*", "au*", "qu*", "...", "ic*", "al*", "ql*", "...",
				 "0*", "1*", "2*", "3*", "4*", "5*", "6*", "7*",
				 (8) (1)"...",
				 (8) (1)"...",
				 "*n", "*au", "*qu", "...", "*ic", "*al", "*ql", "...",
				 "*0", "*1", "*2", "*3", "*4", "*5", "*6", "*7");

	dcl     word		 (0:1) bit (36) aligned based (p);

	dcl     1 instruction	 based (p) aligned,
		2 base		 unaligned bit (3),
		2 offset		 unaligned bit (15),
		2 op_code		 unaligned bit (10),
		2 unused		 unaligned bit (1),
		2 ext_base	 unaligned bit (1),
		2 tag		 unaligned bit (6);

	dcl     1 half		 based (p) aligned,
		2 left		 unaligned bit (18),
		2 right		 unaligned bit (18);

	dcl     1 rel_tab		 based (p) aligned,
		2 dummy_l		 unaligned bit (14),
		2 left		 unaligned bit (4),
		2 dummy_r		 unaligned bit (14),
		2 right		 unaligned bit (4);

	dcl     1 mod_factor	 aligned,
		2 ext_base	 bit (1) unal,
		2 length_in_reg	 bit (1) unal,
		2 indirect_descriptor bit (1) unal,
		2 tag		 bit (4) unal;

	dcl     mf		 (3) fixed bin (6) int static init (30, 12, 3); /* location of modification factor fields in EIS inst */

	dcl     1 packed_ptr_st	 based aligned,
		2 packed_ptr	 ptr unal;

	dcl     (ebase, len_reg, ic)	 (3) bit (1) aligned;
	dcl     desc_word		 char (8) varying;

	dcl     desc_op		 (0:9) char (8) varying int static
				 init ("desc9a", "descb", "desc9fl", "desc9ls", "desc9ts", "desc9ns", "desc4fl", "desc4ls", "desc4ts", "desc4ns");

	dcl     eis_modifier	 (0:15) char (3) aligned int static
				 init ("n", "au", "qu", "du", "ic", "al", "ql", "...",
				 "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7");

	dcl     bool_word		 (0:15) char (6) aligned int static varying
				 init ("clear", "and", "andnot", "move", "andnot", "", "xor", "or",
				 "", "", "", "", "invert", "", "nand", "set");

	dcl     1 descriptor	 based aligned,	/* EIS alphanumeric and bit operand descriptor */
		2 address		 bit (18) unal,
		2 char		 bit (2) unal,
		2 bit		 bit (4) unal,
		2 length		 bit (12) unal;

	dcl     1 four_bit_descriptor	 based aligned,	/* EIS 4-bit operand descriptor */
		2 address		 bit (18) unal,
		2 char		 bit (3) unal,
		2 bit		 bit (3) unal,
		2 length		 bit (12) unal;

%include symbol;
%include token;
%include declare_type;
%include cgsystem;
%include nodes;

begin:	p = addrel (t_pt, delta);
	q = addrel (r_pt, delta);
	s = addrel (s_pt, delta);

	line_pt = addr (line);
	eis = "0"b;
	irand = 0;

	do i = 1 to number;

	     tag = "   ";
	     substr (line, 1, 6) = binoct (rel (p));
	     substr (line, 7, 2) = "  ";

	     call insert_relocation;

	     cstring = binoct (p -> word (0));

	     if ^eis
	     then do;
		     mop = fixed (p -> instruction.op_code, 10);
		     op_mnemonic_ptr = addr (op_mnemonic_$op_mnemonic_ (mop));
		     op_code = op_mnemonic.name;
		end;
	     else do;
		     mop = 0;
		     op_mnemonic_ptr = addr (op_mnemonic_$op_mnemonic_ (0));
		end;

	     if op_code = ".... "
	     then do;
not_ins:		     substr (line, 13, 3) = "   ";
		     substr (line, 16, 5) = substr (cstring, 1, 5);
		     substr (line, 21, 7) = substr (cstring, 6, 7);
		     k = 28;
		     goto prt;
		end;

	     if op_mnemonic.num_words > 1
	     then do;

/* EIS */

		     call init_eis;

		     substr (line, 13, 4) = substr (cstring, 1, 3);
		     substr (line, 17, 4) = substr (cstring, 4, 3);
		     substr (line, 21, 4) = substr (cstring, 7, 3);
		     substr (line, 25, 3) = substr (cstring, 10, 3);

		     substr (line, 28, 1) = ht;
		     substr (line, 29, 5) = op_code;
		     substr (line, 34, 1) = ht;

		     k = 35;

		     do j = 1 to ndesc;
			string (mod_factor) = substr (p -> word (0), mf (j), 7);
			ebase (j) = mod_factor.ext_base;
			len_reg (j) = mod_factor.length_in_reg;

			substr (line, k, 1) = "(";
			k = k + 1;
			need_comma = "0"b;

			if ebase (j)
			then do;
				substr (line, k, 2) = "pr";
				k = k + 2;
				need_comma = "1"b;
			     end;

			if len_reg (j)
			then do;
				if need_comma
				then do;
					substr (line, k, 1) = ",";
					k = k + 1;
				     end;
				substr (line, k, 2) = "rl";
				k = k + 2;
				need_comma = "1"b;
			     end;

			if mod_factor.tag
			then do;
				if need_comma
				then do;
					substr (line, k, 1) = ",";
					k = k + 1;
				     end;
				ic (j) = mod_factor.tag = "0100"b; /* IC */
				substr (line, k, 2) = eis_modifier (fixed (mod_factor.tag, 4));
				k = k + 2;
			     end;
			else ic (j) = "0"b;

			substr (line, k, 2) = "),";
			k = k + 2;
		     end;


		     if substr (p -> word (0), 10, 1)
		     then do;
			     substr (line, k, 12) = "enablefault,";
			     k = k + 12;
			end;

		     if desc_word = "desc9a" | desc_word = "desc4a"
		     then if ndesc < 3
			then if (substr (op_code, 1, 3) ^= "scd") & (substr (op_code, 1, 3) ^= "tct")
			     then do;
				     if substr (op_code, 1, 3) = "scm"
				     then substr (line, k, 5) = "mask(";
				     else substr (line, k, 5) = "fill(";

				     k = k + 5;
				     substr (line, k, 3) = substr (cstring, 1, 3);
				     k = k + 3;
				     substr (line, k, 1) = ")";
				     k = k + 1;
				end;
			     else k = k - 1;	/* flush trailing , */
			else k = k - 1;		/* .. */
		     else if desc_word = "descb"
		     then do;
			     substr (line, k, 5) = "fill(";
			     k = k + 5;
			     substr (line, k, 1) = digit (fixed (substr (p -> word (0), 1, 1), 1));
			     k = k + 1;
			     substr (line, k, 1) = ")";
			     k = k + 1;
			     if op_code ^= "cmpb "
			     then do;
				     substr (line, k, 6) = ",bool(";
				     k = k + 6;
				     j = fixed (substr (p -> word (0), 6, 4), 4);
				     m = length (bool_word (j));
				     if m > 0
				     then do;
					     substr (line, k, m) = bool_word (j);
					     k = k + m;
					end;
				     else do;
					     substr (line, k, 1) = digit (fixed (substr (p -> word (0), 6, 1), 1));
					     substr (line, k + 1, 1) = digit (fixed (substr (p -> word (0), 7, 3), 3));
					     k = k + 2;
					end;
				     substr (line, k, 1) = ")";
				     k = k + 1;
				end;
			end;
		     else if substr (p -> word (0), 11, 1)
		     then do;
			     substr (line, k, 5) = "round";
			     k = k + 5;
			end;
		     else k = k - 1;

		     irand = 0;
		     go to prt;
		end;

	     double, ignore_ic_mod = "0"b;

	     eis_desc = eis & desc_word ^= "arg";
	     if eis_desc
	     then do;
		     substr (line, 13, 2) = "  ";
		     substr (line, 15, 6) = substr (cstring, 2, 5);
		     substr (line, 21, 3) = substr (cstring, 7, 2);
		     substr (line, 24, 4) = substr (cstring, 9, 4);

		     substr (line, 28, 1) = ht;

		     if decimal
		     then desc_word = desc_op (2 + fixed (p -> four_bit_descriptor.bit, 3));
		     else if desc_word = "desc9a" & p -> four_bit_descriptor.bit = "100"b
		     then desc_word = "desc4a";
		     if irand > 1
		     then if op_code = "dtb  " | op_code = "mvne "
			then desc_word = desc_op (0);
			else ;
		     else if op_code = "btd  "
		     then desc_word = desc_op (0);

		     substr (line, 29, length (desc_word)) = desc_word;
		     k = length (desc_word) + 29;

		     ext_base = ebase (irand);
		     itag = len_reg (irand);
		     if itag
		     then tag = eis_modifier (fixed (substr (p -> descriptor.length, 9, 4), 4));
		     has_ic = ic (irand);
		     go to chk_ext;
		end;

	     if op_code = "rpd  " then goto set;
	     if op_code = "rpt  " then goto set;

	     if p -> instruction.unused then goto not_ins;

	     if op_mnemonic.num_desc ^= 0
	     then do;
		     tag = substr (binoct ((p -> instruction.tag)), 1, 2);
		     ignore_ic_mod = "1"b;
		     goto set;
		end;

	     if p -> instruction.tag
	     then do;
		     tag = modifier (fixed (p -> instruction.tag, 6));
		     if tag = "..." then goto not_ins;
		end;

set:	     substr (line, 13, 2) = "  ";
	     substr (line, 15, 6) = substr (cstring, 2, 5);
	     substr (line, 21, 5) = substr (cstring, 7, 4);
	     substr (line, 26, 2) = substr (cstring, 11, 2);

	     substr (line, 28, 1) = ht;
	     k = 29;

	     if ^eis & op_mnemonic.dtype = 1 & ^p -> instruction.ext_base
	     then op_code = rtrim (op_code) || "x";
	     substr (line, k, 5) = op_code;

	     c = substr (line, k + 3, 1);

	     double = substr (op_code, 1, 2) = "df" | substr (op_code, 3, 2) = "aq" | substr (op_code, 4, 2) = "aq";

	     ext_base = p -> instruction.ext_base | (^eis & op_mnemonic.dtype = 1); /* force PR format for aXdb/sXbd */

	     itag = p -> instruction.tag ^= "000000"b;
	     has_ic = p -> instruction.tag = "000100"b;	/* IC */

	     k = 34;
chk_ext:
chk_ext1:	     substr (line, k, 1) = ht;
	     k = k + 1;

	     save_k = k;

	     if ^eis
	     then if p -> instruction.unused
		then do;

/* have rpd | rpt instruction */

			tag = digit (fixed (p -> instruction.tag, 6));
			offset = fixed (substr (p -> half.left, 1, 8), 8);
			ignore_ic_mod = "1"b;
			goto sk;
		     end;

	     if ext_base
	     then do;
		     substr (line, k, 4) = base (fixed (p -> instruction.base, 3));
		     offset = fixed (p -> instruction.offset, 15);
		     if offset > 16384 then offset = offset - 32768;
		     k = k + 4;
		     j = 13;
		end;
	     else do;
		     offset = fixed (p -> half.left, 18);

		     if offset > 131072
		     then do;
			     if tag = "du " then goto sk;
			     if tag = "dl " then goto sk;
			     offset = offset - 262144;/* 2's comp */
			end;

sk:		     j = 14;
		end;

	     substr (line, j, 1) = cstring;

	     call bin2dec (offset);

	     if eis_desc
	     then do;
		     if desc_word = "descb"
		     then fract_offset = fixed (p -> descriptor.char, 2) * bits_per_char + fixed (p -> descriptor.bit, 4);
		     else if substr (desc_word, 1, 5) = "desc4"
		     then fract_offset = fixed (p -> four_bit_descriptor.char, 3);
		     else fract_offset = fixed (p -> descriptor.char, 2);
		     if fract_offset ^= 0
		     then do;
			     substr (line, k, 1) = "(";
			     k = k + 1;
			     call bin2dec (fract_offset);
			     substr (line, k, 1) = ")";
			     k = k + 1;
			end;
		end;

	     if itag
	     then do;
		     substr (line, k, 1) = ",";
		     substr (line, k + 1, 3) = tag;

		     k = k + 2;
		     if substr (line, k, 1) ^= " " then k = k + 1;
		     if substr (line, k, 1) ^= " " then k = k + 1;
		end;
	     else if eis_desc
	     then do;
		     substr (line, k, 1) = ",";
		     k = k + 1;
		     if desc_word = "desc9ls" | desc_word = "desc4ls"
		     then do;
			     call bin2dec (fixed (substr (p -> descriptor.length, 7, 6), 6));
			     substr (line, k, 1) = ",";
			     k = k + 1;
			     scale = fixed (substr (p -> descriptor.length, 1, 6), 6);
			     if scale >= 32
			     then scale = scale - 64;
			     call bin2dec (scale);
			end;
		     else call bin2dec (fixed (p -> descriptor.length, 12));
		end;

	     if ignore_ic_mod then goto chk_base;

	     if has_ic
	     then do;
		     substr (line, k, 2) = htht;
		     k = k + 2;

		     pt = addrel (p, offset - irand);
		     substr (line, k, 6) = binoct (rel (pt));

		     k = k + 6;

		     if substr (op_code, 1, 1) = "t" then goto prt;
		     if fixed (rel (pt), 18) > cg_static_$text_pos then goto prt;

		     substr (line, k, 1) = " ";
		     k = k + 1;

equal:		     substr (line, k, 2) = "= ";
		     substr (line, k + 2, 12) = binoct (pt -> word (0));
		     k = k + 14;

		     if double
		     then do;
			     substr (line, k, 1) = " ";
			     substr (line, k + 1, 12) = binoct (pt -> word (1));
			     k = k + 13;
			end;

		     goto prt;
		end;

chk_base:	     if ^ext_base then goto prt;

	     if p -> instruction.base ^= "000"b & op_code ^= "tsp2" /* Assumes that tsp2 is used only to invoke entry operators */
	     then do;
		     if s -> word (0) = "0"b then goto prt;

		     sym_pt = s -> packed_ptr;
		     if sym_pt = null then goto prt;

		     if sym_pt -> symbol.dcl_type = by_compiler
		     then if ^sym_pt -> symbol.entry
			then goto prt;

		     j = 2 - divide (k - save_k, 10, 17, 0);
		     substr (line, k, j) = htht;
		     k = k + j;

		     if sym_pt -> node.type = label_node
		     then go to put;

		     tok_pt = sym_pt -> symbol.father;
		     if tok_pt = null then goto put;

		     do while (tok_pt -> symbol.father ^= null);
			tok_pt = tok_pt -> symbol.father;
		     end;

		     tok_pt = tok_pt -> symbol.token;
		     j = tok_pt -> token.size;
		     substr (line, k, j) = tok_pt -> token.string;
		     k = k + j;

		     substr (line, k, 1) = ".";
		     k = k + 1;

put:		     tok_pt = sym_pt -> symbol.token;
		     j = tok_pt -> token.size;
		     substr (line, k, j) = tok_pt -> token.string;
		     k = k + j;

		     goto prt;
		end;

	     if op_code = "xec  "
	     then do;
		     pt = addrel (addr (pl1_operators_$operator_table), offset);
		     mop = fixed (pt -> instruction.op_code, 10);
		     op_mnemonic_ptr = addr (op_mnemonic_$op_mnemonic_ (mop));
		     if op_mnemonic.num_words > 1
		     then do;

/* we are executing an EIS instruction in pl1_operators_ */

			     call init_eis;

			     do j = 1 to ndesc;
				ebase (j) = "1"b;
				len_reg (j) = ^decimal;
				ic (j) = "0"b;
			     end;

			     irand = 0;
			end;
		end;

	     if itag then goto prt;

	     if substr (op_code, 1, 1) ^= "t"
	     then do;
		     if offset >= pl1_operator_names_$first then goto prt;
		     pt = addrel (addr (pl1_operators_$operator_table), offset);
		     substr (line, k, 2) = htht;
		     k = k + 2;
		     goto equal;
		end;

	     op_names_pt = addr (pl1_operator_names_$pl1_operator_names_);

	     if offset >= operator_names.first & offset <= operator_names.last
	     then do;
		     pt = addr (operator_names.names (offset));
		     goto str_info;
		end;

	     else if offset >= operator_names.first_special & offset <= operator_names.last_special
	     then do;
		     do j = 1 to operator_names.number_special;
			if operator_names.special (j).offset = offset
			then do;
				pt = addr (operator_names.special (j).namep);
				goto str_info;
			     end;
		     end;
		     goto prt;
		end;
str_info:	     size = fixed (pt -> name_pair.size, 18);
	     pt = ptr (pt, pt -> name_pair.rel_ptr);

	     substr (line, k, 2) = htht;
	     k = k + 2;

	     substr (line, k, size) = pt -> based_string;
	     k = size + k;

prt:	     call pl1_print$string_ptr_nl (line_pt, k - 1);

	     if eis
	     then do;
		     irand = irand + 1;
		     if irand > nrands
		     then do;
			     eis = "0"b;
			     irand = 0;
			end;
		     else if irand > ndesc
		     then op_code, desc_word = "arg";
		end;

	     p = addrel (p, 1);
	     q = addrel (q, 1);
	     s = addrel (s, 1);
	end;

	return;

display_text$display_abs: entry (t_pt, r_pt, n_words);

	dcl     n_words		 fixed bin;	/* size of block to be displayed */

	p = t_pt;
	q = r_pt;
	line_pt = addr (line);

	do i = 1 to n_words;

	     substr (line, 1, 6) = binoct (rel (p));
	     substr (line, 7, 2) = "  ";
	     call insert_relocation;
	     substr (line, 13, 3) = "   ";
	     substr (line, 16, 12) = binoct (p -> word (0));

	     k = 27;

	     call pl1_print$string_ptr_nl (line_pt, k);
	     p = addrel (p, 1);
	     q = addrel (q, 1);
	end;

	return;

display_text$display_ascii: entry (t_pt, n_chars);

	dcl     n_chars		 fixed bin;	/* size of string to be displayed */

	dcl     nc		 fixed bin,
	        char_string		 char (4) aligned based (p);

	p = t_pt;
	nc = n_chars;
	line_pt = addr (line);


	do i = 1 by 4 to nc;

	     substr (line, 1, 6) = binoct (rel (p));
	     substr (line, 7, 2) = "  ";
	     substr (line, 9, 4) = "aa  ";

	     cstring = binoct (p -> word (0));
	     k = 13;
	     do j = 1 by 3 to 12;
		substr (line, k, 4) = substr (cstring, j, 3);
		k = k + 4;
	     end;

	     substr (line, 28, 1) = ht;

	     k = min (4, nc - i + 1);
	     substr (line, 29, k) = substr (p -> char_string, 1, k);

	     call pl1_print$string_ptr_nl (line_pt, k + 28);
	     p = addrel (p, 1);
	end;


insert_relocation: proc;

/* inserts relocation characters in line */

	if r_pt = null
	then do;
		substr (line, 9, 4) = "aa  ";
		return;
	     end;

	if q -> rel_tab.dummy_l then k = fixed (q -> rel_tab.left, 4);
	else k = -1;

	substr (line, 9, 1) = relocation (k);

	if q -> rel_tab.dummy_r then k = fixed (q -> rel_tab.right, 4);
	else k = -1;

	substr (line, 10, 3) = relocation (k);

     end;


bin2dec: proc (number);

	dcl     number		 fixed bin (18);

	substr (line, k, length (ltrim (char (number)))) = ltrim (char (number));
	k = k + length (ltrim (char (number)));

     end;


init_eis: proc;

	eis = "1"b;
	nrands = op_mnemonic.num_words - 1;
	ndesc = op_mnemonic.num_desc;
	decimal = op_mnemonic.dtype = 2;
	desc_word = desc_op (op_mnemonic.dtype);

     end;

     end;
