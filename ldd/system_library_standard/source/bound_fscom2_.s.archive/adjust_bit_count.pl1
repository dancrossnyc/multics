/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


adjust_bit_count: abc: proc;

	/* This command sets the bit counts of segments to the last
	   bit of the last non-zero word or character */

/* Written 3/4/76 by Steve Herbst */
/* Fixed to complain about directories 05/15/79 S. Herbst */

dcl 1 paths (arg_count) based(paths_ptr),		/* ptrs and lengths of pathname args */
     2 path_ptr ptr,
     2 path_len fixed bin;

dcl 1 entries (ecount) aligned based(entries_ptr),	/* entry info from hcs_$star_ */
     2 etype fixed bin(1) unaligned,
     2 nnames fixed bin(15) unaligned,
     2 nindex fixed bin unaligned;

dcl LINK_TYPE fixed bin int static options(constant) init(0);

dcl names (99) char(32) aligned based(names_ptr);		/* entry names from hcs_$star_ */

dcl area area based(area_ptr);

dcl arg char(arg_len) based(arg_ptr);
dcl dn char(168);
dcl (en, star_name) char(32);

dcl (character, chase_sw, long, match, stars) bit(1) aligned;

dcl (area_ptr, arg_ptr, entries_ptr, names_ptr, paths_ptr) ptr;

dcl (arg_count, arg_len, ecount, i, j, path_count) fixed bin;
dcl (bit_count, old_bit_count) fixed bin(24);
dcl code fixed bin(35);

dcl error_table_$badopt fixed bin(35) ext;
dcl error_table_$badstar fixed bin(35) ext;
dcl error_table_$dirseg fixed bin(35) ext;
dcl error_table_$nomatch fixed bin(35) ext;

dcl adjust_bit_count_ entry(char(*),char(*),bit(1)aligned,fixed bin(24),fixed bin(35));
dcl check_star_name_$entry entry(char(*),fixed bin(35));
dcl com_err_ entry options(variable);
dcl cu_$arg_count entry(fixed bin);
dcl cu_$arg_ptr entry(fixed bin,ptr,fixed bin,fixed bin(35));
dcl expand_path_ entry(ptr,fixed bin,ptr,ptr,fixed bin(35));
dcl get_system_free_area_ entry returns(ptr);
dcl hcs_$get_link_target entry(char(*),char(*),char(*),char(*),fixed bin(35));
dcl hcs_$star_ entry(char(*),char(*),fixed bin(2),ptr,fixed bin,ptr,ptr,fixed bin(35));
dcl hcs_$status_minf entry(char(*),char(*),fixed bin(1),fixed bin(2),fixed bin(24),fixed bin(35));
dcl ioa_ entry options(variable);

dcl (addr, null, substr) builtin;

dcl cleanup condition;
/**/
	call cu_$arg_count(arg_count);
	if arg_count=0 then do;
  NO_PATH:     call com_err_(0,"","Usage is:  adjust_bit_count paths -control_args-");
	     return;
	end;

	entries_ptr, names_ptr, paths_ptr = null;
	on condition(cleanup) call clean_up;

	area_ptr = get_system_free_area_();
	allocate paths in(area) set(paths_ptr);
	path_count = 0;

	character, chase_sw, long = "0"b;

	do i = 1 to arg_count;
	     call cu_$arg_ptr(i,arg_ptr,arg_len,code);
	     if substr(arg,1,1)="-" then
		if arg="-character" | arg="-ch" then character = "1"b;
		else if arg="-long" | arg="-lg" then long = "1"b;
		else if arg="-chase" then chase_sw = "1"b;
		else if arg="-no_chase" then chase_sw = "0"b;
		else do;
		     call com_err_(error_table_$badopt,"adjust_bit_count","^a",arg);
		     free paths in(area);
		     return;
		end;
	     else do;				/* pathname argument */
		path_count = path_count+1;
		path_ptr(path_count) = arg_ptr;
		path_len(path_count) = arg_len;
	     end;
	end;

	if path_count=0 then do;
	     free paths in(area);
	     go to NO_PATH;
	end;
/**/
	do i = 1 to path_count;

	     call expand_path_(path_ptr(i),path_len(i),addr(dn),addr(en),code);
	     if code^=0 then do;
		arg_ptr = path_ptr(i);
		arg_len = path_len(i);
		call com_err_(code,"adjust_bit_count","^a",arg);
		go to NEXT_PATH;
	     end;

	     call check_star_name_$entry(en,code);
	     if code=0 then do;
		stars = "0"b;
		ecount = 1;
	     end;
	     else if code=error_table_$badstar then do;
		call com_err_(code,"adjust_bit_count","^a",en);
		go to NEXT_PATH;
	     end;
	     else do;
		stars = "1"b;
		star_name = en;
		call hcs_$star_(dn,en,3,area_ptr,ecount,entries_ptr,names_ptr,code);
		if code^=0 then do;
		     call com_err_(code,"adjust_bit_count","^a>^a",dn,en);
		     go to NEXT_PATH;
		end;
	     end;

	     match = "0"b;

	     do j = 1 to ecount;			/* for each starname match */

		if stars then do;
		     en = names(nindex(j));
		     if etype(j)=LINK_TYPE then
			if chase_sw then do;
			     call hcs_$get_link_target(dn,en,dn,en,code);
			     if code^=0 then go to NEXT_MATCH;
			end;
			else go to NEXT_MATCH;
		end;

		if long then do;
		     call hcs_$status_minf(dn,en,1,(0),old_bit_count,code);
		     bit_count = old_bit_count;
		end;

		call adjust_bit_count_(dn,en,character,bit_count,code);

		if code = error_table_$dirseg then do;
		     if ^stars then call com_err_ (code, "adjust_bit_count",
			"^a^[>^]^a", dn, dn ^= ">", en);
		end;
		else do;

		     match = "1"b;

		     if code ^= 0 then
			if bit_count=-1 then call com_err_(code,"adjust_bit_count","^a>^a",dn,en);
			else call com_err_(code,"adjust_bit_count",
				"^a>^a^/^-Computed bit count = ^d",dn,en,bit_count);

		     else if long & bit_count^=old_bit_count then
			call ioa_("Bit count of ^a>^a changed from ^d to ^d",
				dn,en,old_bit_count,bit_count);
		end;
NEXT_MATCH:    end;

	     if stars then do;

		if ^match then call com_err_ (error_table_$nomatch, "adjust_bit_count",
		     "^a^[>^]^a", dn, dn ^= ">", star_name);

		free entries in(area);
		free names in(area);
	     end;

  NEXT_PATH: end;

	call clean_up;
	return;

clean_up: proc;

	if paths_ptr^=null then free paths in(area);
	if entries_ptr^=null then free entries in(area);
	if names_ptr^=null then free names in(area);

end clean_up;

end adjust_bit_count;
