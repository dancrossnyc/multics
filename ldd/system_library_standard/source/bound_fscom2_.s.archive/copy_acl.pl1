/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */




/* format: style2,idind30,indcomtxt */

copy_acl:
     procedure options (variable);

/* COPY_ACL, COPY_IACL_SEG, COPY_IACL_DIR */
/* initial coding 8/76 THVV */
/* Added -working_dir or -wd in place of pathnames 07/25/80 S. Herbst */
/* cleaned and neatened BIM and J. Pattin, 83-(8 9) */
/* Modified 11/01/83 by C. Spitzer.  fix arg processing bug, allow equal
   convention in place of missing last argument */

          dcl     arg                           char (al) based (ap);
          dcl     (dn1, dn2)                    char (168);
          dcl     (en1, en2)                    char (32);
          dcl     error_sw                      bit (1);
          dcl     (ap, areap)                   ptr;
          dcl     (eptr, nptr)                  ptr init (null);
          dcl     whoami                        char (13);
          dcl     (i, ecount)                   fixed bin;
          dcl     al                            fixed bin (21);
          dcl     an                            fixed bin init (1);
          dcl     (starsw, areasw)              bit (1) init ("0"b);

          dcl     system_area                   area ((1024)) based (areap);

          dcl     1 entries                     (100) based (eptr) aligned,
                    2 type                      bit (2) unaligned,
                    2 nnames                    bit (16) unaligned,
                    2 nindex                    bit (18) unaligned;

          dcl     names                         (100) char (32) based (nptr);

          dcl     arg_count                     fixed bin;
          dcl     code                          fixed bin (35);
          dcl     error_table_$badopt           fixed bin (35) ext;
          dcl     error_table_$noarg            fixed bin (35) ext;
          dcl     error_table_$odd_no_of_args   fixed bin (35) ext;
          dcl     error_table_$badequal         fixed bin (35) ext;

          dcl     check_star_name_$entry        entry (char (*), fixed bin (35));
          dcl     com_err_                      entry options (variable);
          dcl     com_err_$suppress_name        entry options (variable);
          dcl     cu_$arg_count                 entry (fixed bin, fixed bin (35));
          dcl     cu_$arg_ptr                   entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
          dcl     get_equal_name_               entry (char (*), char (*), char (*), fixed bin (35));
          dcl     expand_pathname_              entry (char (*), char (*), char (*), fixed bin (35));
          dcl     hcs_$star_                    entry (char (*), char (*), fixed bin, ptr, fixed bin, ptr, ptr,
                                                fixed bin (35));
          dcl     get_system_free_area_         entry () returns (ptr);
          dcl     get_wdir_                     entry returns (char (168));
          dcl     copy_acl_                     entry (char (*), char (*), char (*), char (*), bit (1), fixed bin (35));
          dcl     copy_iacl_$dir                entry (char (*), char (*), char (*), char (*), bit (1), fixed bin (35));
          dcl     copy_iacl_$seg                entry (char (*), char (*), char (*), char (*), bit (1), fixed bin (35));
          dcl     pathname_                     entry (char (*), char (*)) returns (char (168));

          dcl     (addr, addrel, bin, null)     builtin;
          dcl     cleanup                       condition;



          whoami = "copy_acl";
          go to start;

copy_iacl_seg:
     entry;
          whoami = "copy_iacl_seg";
          go to start;

copy_iacl_dir:
     entry;
          whoami = "copy_iacl_dir";

start:
          call cu_$arg_count (arg_count, code);
          if code ^= 0
          then do;
                    call com_err_ (code, whoami);
                    return;
               end;
          if arg_count = 0
          then do;
                    call com_err_$suppress_name (0, whoami, "Usage: ^a path11 {path21 ... pathN1 {pathN2}}", whoami);
                    return;
               end;

          do an = 1 to arg_count by 2;
               call cu_$arg_ptr (an, ap, al, (0));

               if index (arg, "-") = 1
               then if arg = "-working_dir" | arg = "-wd"
                    then call expand_pathname_ (get_wdir_ (), dn1, en1, code);
                    else do;
BADOPT:
                              call com_err_ (error_table_$badopt, whoami, "^a", arg);
                              return;
                         end;
               else call expand_pathname_ (arg, dn1, en1, code);

               if code ^= 0
               then do;
                         call com_err_ (code, whoami, "^a", arg);
                         return;
                    end;

               call check_star_name_$entry (en1, code);
               if code = 0
               then starsw = "0"b;                          /* No stars */
               else if code <= 2
               then do;                                     /* Name1 has stars */
                         if ^areasw
                         then do;
                                   areasw = "1"b;
                                   areap = get_system_free_area_ ();
                                   on condition (cleanup) call cleanup_handler;
                              end;
                         call hcs_$star_ (dn1, en1, 3, areap, ecount, eptr, nptr, code);
                         if code ^= 0
                         then do;
                                   call com_err_ (code, whoami, "Could not star list ^a.", pathname_ (dn1, en1));
                                   return;
                              end;
                         starsw = "1"b;
                    end;
               else
PATHNAME_ERROR:
                    do;
                         call com_err_ (code, whoami, "^a.", pathname_ (dn1, en1));
                         return;
                    end;

	     if an = arg_count
	     then do;				/* last argument missing */
		dn2 = get_wdir_ ();
		en2 = "===";			/* same name in current [wd] */
		end;
	     else do;
		call cu_$arg_ptr (an+1, ap, al, (0));	/* Get Name2 */

		if index (arg, "-") = 1
		then if arg = "-working_dir" | arg = "-wd"
		     then call expand_pathname_ (get_wdir_ (), dn2, en2, code);
		     else go to BADOPT;
		else call expand_pathname_ (arg, dn2, en2, code);

		if code ^= 0
		then go to PATHNAME_ERROR;
	     end;

               if ^starsw
               then call PERFORM_COPY (en1);
               else do i = 1 to ecount;
                         call PERFORM_COPY (names (bin (entries (i).nindex, 18)));
                    end;
again:
               if starsw
               then call cleanup_handler;
          end;

PERFORM_COPY:
     proc (oldent);

          dcl     oldent                        char (32);
          dcl     newent                        char (32);

          call get_equal_name_ (oldent, en2, newent, code);
          if code ^= 0
          then if code = error_table_$badequal
               then go to PATHNAME_ERROR;                   /* skip this pair of arguments */
               else do;                                     /* must be longeql */
                         call com_err_ (code, whoami, arg); /* print arg name in error message */
                         return;
                    end;

          if whoami = "copy_acl"
          then call copy_acl_ (dn1, oldent, dn2, newent, error_sw, code);
          else if whoami = "copy_iacl_seg"
          then call copy_iacl_$seg (dn1, oldent, dn2, newent, error_sw, code);
          else if whoami = "copy_iacl_dir"
          then call copy_iacl_$dir (dn1, oldent, dn2, newent, error_sw, code);

          if code ^= 0
          then do;
                    if error_sw
                    then call com_err_ (code, whoami, "^a", pathname_ (dn2, newent));
                    else call com_err_ (code, whoami, "^a", pathname_ (dn1, oldent));
               end;

     end PERFORM_COPY;

cleanup_handler:
     proc;
          if eptr ^= null
          then free entries in (system_area);
          if nptr ^= null
          then free names in (system_area);
     end cleanup_handler;

     end copy_acl;
