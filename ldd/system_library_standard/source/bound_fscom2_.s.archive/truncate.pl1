/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


truncate:  tc:   proc;

/*   This command is used to truncate a specified segment to a specified word offset.
	the segment to be truncated is referred to either by a pathname or an octal segment
	number. The second argument is the length to which the segment is to be truncated.
	If no offset is supplied, zero will be assumed.

	Written by Robert S. Coren Sept 1972
	Modified Nov 1983 by Charles Spitzer. make work on consistent MSFs.

*/


/*	entry declarations   */
dcl	cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl	cv_oct_check_ entry (char(*), fixed bin(35)) returns(fixed bin(35));
dcl	com_err_ entry options(variable);
dcl	expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
dcl	hcs_$get_safety_sw_seg entry (ptr, bit (1), fixed bin (35));
dcl	hcs_$truncate_file entry (char(*), char(*), fixed bin(19), fixed bin(35));
dcl	hcs_$truncate_seg entry (ptr, fixed bin(19), fixed bin(35));


dcl	hcs_$set_bc entry (char(*), char(*), fixed bin(24), fixed bin(35));
dcl	hcs_$set_bc_seg entry (ptr, fixed bin(24), fixed bin(35));


/*	external refs  */

dcl      (error_table_$noarg,
	error_table_$dirseg,
	error_table_$noentry,
	error_table_$inconsistent_msf) fixed bin(35) ext static;

/*	static   */

dcl	myname char (32) int static options (constant) init ("truncate");

/*	fixed binary    */

dcl	alen fixed bin(21); /* length of currently examined argument */
dcl	code fixed bin(35); /* status code */
dcl	bitcnt fixed bin(24);/* new bit count */
dcl	nwords fixed bin(19);/* new length in words */
dcl	i fixed bin;	/* argument counter */
dcl	segno fixed bin;

/*	pointers  */

dcl
	aptr ptr;		/* pointer to latest argument */
dcl	segptr ptr;	/* pointer to segment if number coded */

dcl	(baseptr,char,divide,ltrim,null) builtin;

/*	character strings  */

dcl	dir char(168);
dcl	ent char(32);
dcl	arg char(alen) based(aptr);
dcl	argsave char(168) init(" ");

/*	labels    */
dcl	callpt label local;

/********************	code begins here	***********************/

	i = 1;
	call cu_$arg_ptr(i,aptr,alen,code);
	if code = error_table_$noarg|alen = 0 then go to nogood;

	if arg = "-name" | arg = "-nm" then do;		/* Name option */

	     i = i + 1;				/* Next arg is name of segment */
	     call cu_$arg_ptr(i,aptr,alen,code);
	     if code = error_table_$noarg | alen = 0 then go to nogood;
	     end;

	else do;					/* find out if it's a number */
	     segno = cv_oct_check_(arg,code);
	     if code = 0 then do;		/* it is */
		segptr = baseptr(segno);
		callpt = seg;
		go to getoff;
		end;
	     end;

				/* if it's a name, expand it */

	call expand_pathname_(arg,dir,ent,code);
	if code ^= 0 then do;
               argsave = arg;
               go to nogood;
               end;
	callpt = file;

getoff:
	argsave = arg;
	i = i + 1;		/* Get offset argument (if any) */
	call cu_$arg_ptr(i,aptr,alen,code);
	if code=0 & alen>0 then do;
	     nwords = cv_oct_check_(arg,code);
	     if code^=0 then go to badarg;
	     bitcnt = nwords*36;
	     end;
	else do;
	     nwords,bitcnt = 0;	/* default is 0 */
	     end;


	go to callpt;


/**********************	actual truncation now	*******************/

file:					/* pathname given */
	call hcs_$truncate_file(dir,ent,nwords,code);
	if code = 0 then do;
	     call hcs_$set_bc(dir,ent,bitcnt,code);
	     if code ^= 0 then goto nogood;
	     end;
	else if code = error_table_$dirseg then call truncate_msf;
	     else goto nogood;
	return;

seg:					/* segment number given */
	call hcs_$truncate_seg(segptr,nwords,code);
	if code = 0 then do;
	     call hcs_$set_bc_seg(segptr,bitcnt,code);
	     if code = 0 then return;
	     end;

			/**** ERROR BRANCHES  ****/

nogood:
	call com_err_(code,myname,"^a",argsave);
	return;



badarg:			/* Non-numeric offset */
	call com_err_(0,myname,"Invalid offset: ^a",arg);
	return;

%page;
truncate_msf:
     proc;

dcl initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl terminate_file_ entry (ptr, fixed bin(24), bit(*), fixed bin(35));
dcl delete_$ptr entry (ptr, bit(36) aligned, char(*), fixed bin(35));
dcl hcs_$star_ entry (char(*), char(*), fixed bin(2), ptr, fixed bin, ptr, ptr, fixed bin(35));
dcl pathname_ entry (char(*), char(*)) returns(char(168));

dcl cleanup condition;

dcl ec fixed bin (35);				/* error code */
dcl word_count fixed bin (19);
dcl word_count_sum fixed bin (35);
dcl path char (168);
dcl component fixed bin;
dcl (max_component, min_component) fixed bin (24);
dcl component_count fixed bin;
dcl deleting bit (1) aligned;
dcl safety_sw bit (1);
dcl error_component fixed bin;

	path = pathname_ (dir, ent);

/* get the number of components. */

	call hcs_$star_ (path, "**", 3, null, component_count, (null), (null), ec);
	if ec ^= 0 then return;

	begin;

dcl segp ptr;
dcl msf_bc fixed bin (24);

dcl 1 segs (component_count),				/* components of the msf */
      2 name char (32),				/* component name */
      2 segp ptr,					/* ptr to base of component */
      2 bc fixed bin (24);				/* bit count of component */

	     segp, segs.segp (*) = null;

	     on cleanup call msf_cleanup;

	     ec, max_component = 0;
	     do component = 1 by 1 while (ec = 0 & component <= component_count);
		segs.name (component) = ltrim (char (max_component));
		call initiate_file_ (path, segs.name (component), "001"b, segs.segp (component), segs.bc (component), ec);
		if ec = 0
		then max_component = max_component + 1;
		else error_component = max_component;
		end;

	     if ec ^= 0
	     then if ec ^= error_table_$noentry then goto msf_close;

	     if max_component ^= component_count then do;
		ec = error_table_$inconsistent_msf;	/* not enough segments in MSF to match what star_ said */
		error_component = 0;
		goto msf_close;
		end;

	     word_count_sum, word_count = 0;
	     do component = 1 to max_component;
		word_count = divide (segs.bc (component) + 35, 36, 24, 0);
		if word_count_sum + word_count >= nwords
		then do;				/* end the MSF on this component */
		     msf_bc, min_component = component; /* MSF bit count is highest numbered component */

/* going backwards means we have a valid MSF if we get an abort for any reason */

		     deleting = "1"b;		/* delete components */
		     do component = max_component to min_component+1 by -1;
			error_component = component;
			call hcs_$get_safety_sw_seg (segs.segp (component), safety_sw, ec);
			if ec ^= 0 then goto msf_close;

			if ^safety_sw & deleting
			then do;
			     call delete_$ptr (segs.segp (component), "010101"b, "truncate", ec);
			     segs.segp (component) = null;
			     end;
			else do;
			     if deleting
			     then do;
				 msf_bc = component;/* how many components to set the bit count of the dir */
				 deleting = "0"b;	/* don't delete any more previous to this one */
				 end;
			     call terminate_file_ (segs.segp (component),
				0, TERM_FILE_TRUNC_BC_TERM, ec);
			     end;

			if ec ^= 0 then goto msf_close;
			end;

		     error_component = min_component;
		     call terminate_file_ (segs.segp (min_component), (nwords-word_count_sum)*36,
			TERM_FILE_TRUNC_BC_TERM, ec);
		     if ec ^= 0 then goto msf_close;

		     error_component = 0;
		     call hcs_$set_bc (dir, ent, msf_bc, ec);
		     goto msf_close;
		     end;
		else word_count_sum = word_count_sum + word_count;
		end;

/* We reached the end of the MSF before nwords. This is not allowed. Issue
   an error message and return. */

	     call com_err_ (0, myname, "Truncation length specified is larger than current length of ^d for ^a.",
		word_count_sum, path);
	     ec = 0;

msf_close:
	     if ec ^= 0 then call com_err_ (ec, myname, "^a^[>^d^]", path, (error_component ^= 0), error_component);

	     call msf_cleanup;

msf_cleanup:					/* inside begin block */
	proc;

	do component = 1 to component_count;
	     if segs.segp (component) ^= null then call terminate_file_ (segs.segp (component), 0, "0010"b, (0));
	     end;

	if segp ^= null then call terminate_file_ (segp, 0, "0010"b, (0));

	return;

	end msf_cleanup;

	     end;					/* begin block */

	return;

     end truncate_msf;

%include terminate_file;

end truncate;
