/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
link: lk: proc;

/* The link command:   link target1 path1 ... targetN {pathN} */
/* Written 12/05/80 S. Herbst */
/* Added -chase, -check, -copy_names, -name, reject -foo and blank names 06/30/82 S. Herbst */
/* Fixed to print usage message if no pathnames specified 04/04/83 S. Herbst */
/* Fixed not to try to -copy_names if link cannot be created 12/12/83 S. Herbst */

/* Constants */

dcl WHITE_SPACE char (5) int static options (constant) init (" 	
");						/* SP HT VT NL FF */
dcl ALL_ENTRIES fixed bin (2) int static options (constant) init (3);
dcl (CHASE init (1), NO_CHASE init (0)) fixed (1) int static options (constant);
dcl LINK_TYPE fixed (2) int static options (constant) init (0);

/* Based */

dcl arg char (arg_len) based (arg_ptr);

/* Automatic */

dcl (dn, first_arg, target_dn) char (168);
dcl (en, target_en) char (32);

dcl (chase_sw, check_sw, copy_names_sw, errsw, got_path_sw, name_sw, second_arg_sw, star_sw) bit (1);

dcl arg_ptr ptr;

dcl (arg_count, arg_len, i) fixed;
dcl type fixed bin (2);
dcl code fixed bin (35);

dcl error_table_$action_not_performed fixed (35) ext;
dcl error_table_$badopt fixed (35) ext;
dcl error_table_$namedup fixed (35) ext;
dcl error_table_$no_s_permission fixed (35) ext;
dcl error_table_$noentry fixed (35) ext;
dcl error_table_$segnamedup fixed (35) ext;

dcl check_star_name_$entry entry (char (*), fixed (35));
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl copy_names_ entry (char (*), char (*), char (*), char (*), char (*), bit (1), fixed (35));
dcl cu_$arg_count entry (fixed, fixed (35));
dcl cu_$arg_ptr entry (fixed, ptr, fixed, fixed (35));
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed (35));
dcl get_equal_name_ entry (char (*), char (*), char (*), fixed (35));
dcl get_system_free_area_ entry returns (ptr);
dcl get_wdir_ entry returns (char (168));
dcl hcs_$append_link entry (char (*), char (*), char (*), fixed (35));
dcl hcs_$get_link_target entry (char (*), char (*), char (*), char (*), fixed (35));
dcl hcs_$star_ entry (char (*), char (*), fixed (2), ptr, fixed, ptr, ptr, fixed (35));
dcl hcs_$status_minf entry (char (*), char (*), fixed (1), fixed (2), fixed (24), fixed (35));
dcl nd_handler_ entry (char (*), char (*), char (*), fixed (35));
dcl pathname_ entry (char (*), char (*)) returns (char (168));

dcl (fixed, null, search, verify) builtin;

dcl cleanup condition;
%page;
	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, "link");
	     return;
	end;

	chase_sw, check_sw, copy_names_sw, got_path_sw = "0"b;

	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if verify (arg, WHITE_SPACE) = 0 then do;	/* blank arg */
		call com_err_ (0, "link", "Invalid name ""^a""", arg);
		return;
	     end;

	     if substr (arg, 1, 1) = "-" then
		if arg = "-chase" then chase_sw = "1"b;
		else if arg = "-no_chase" then chase_sw = "0"b;
		else if arg = "-check" | arg = "-ck" then check_sw = "1"b;
		else if arg = "-no_check" | arg = "-nck" then check_sw = "0"b;
		else if arg = "-copy_names" | arg = "-cpnm" then copy_names_sw = "1"b;
		else if arg = "-no_copy_names" | arg = "-ncpnm" then copy_names_sw = "1"b;
		else if arg = "-name" | arg = "-nm" then i = i + 1;
		else do;
		     call com_err_ (error_table_$badopt, "link", "^a", arg);
		     return;
		end;

	     else got_path_sw = "1"b;
	end;

	if ^got_path_sw then do;
	     call com_err_$suppress_name (0, "link",
		"Usage:  link target_path1 link_path1 ... target_pathN {link_pathN} {-control_args}");
	     return;
	end;

	second_arg_sw = "0"b;			/* ON if already got first arg of pair */
	name_sw = "0"b;				/* ON if -name just encountered */

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) = "-" then
		if arg = "-name" | arg = "-nm" then do;
		     i = i + 1;
		     if i > arg_count then do;
			call com_err_ (0, "link", "No value specified for -name");
			return;
		     end;
		     name_sw = "1"b;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if second_arg_sw then go to SECOND_ARG;
		     else do;
			call com_err_ (0, "link", "-name not allowed before target path.");
			return;
		     end;
		end;
		else;

	     else if ^second_arg_sw then do;
FIRST_ARG:
		second_arg_sw = "1"b;			/* for next time through */
		first_arg = arg;

		call expand_pathname_ (arg, target_dn, target_en, code);
		if code ^= 0 then do;
PATH_ERR:		     call com_err_ (code, "link", "^a", arg);
		     return;
		end;

		call check_star_name_$entry (target_en, code);
		if code ^= 0 then
		     if code = 1 | code = 2 then star_sw = "1"b;
		     else do;
			call com_err_ (code, "link", "^a", target_en);
			return;
		     end;
		else star_sw = "0"b;
	     end;

	     else do;

		name_sw = "0"b;
SECOND_ARG:
		second_arg_sw = "0"b;		/* for next time through */

		if name_sw then do;
		     name_sw = "0"b;
		     dn = get_wdir_ ();
		     en = arg;
		end;
		else do;
		     call expand_pathname_ (arg, dn, en, code);
		     if code ^= 0 then go to PATH_ERR;

		     call check_star_name_$entry (en, code);
		     if code ^= 0 then do;
			if code = 1 | code = 2 then call com_err_ (0, "link",
			     "Stars not allowed in link pathname.  ^a", arg);
			else call com_err_ (code, "link", "^a", en);
			return;
		     end;
		end;

		if star_sw then call link_stars (dn, en, target_dn, target_en);

		else call link_one (dn, en, target_dn, target_en);
	     end;
	end;

	if second_arg_sw then do;			/* second arg in pair missing */
	     if search (first_arg, "<>") = 0 then do;	/* first is in wdir */
		call com_err_ (0, "link", "Link points to itself; not created.  ^a",
		     pathname_ (target_dn, target_en));
		return;
	     end;

	     dn = get_wdir_ ();
	     en = "===";

	     if star_sw then call link_stars (dn, en, target_dn, target_en);

	     else call link_one (dn, en, target_dn, target_en);
	end;

RETURN:	return;
%page;
link_one: proc (P_dn, P_en, P_target_dn, P_target_en);

dcl (P_dn, P_en, P_target_dn, P_target_en) char (*);
dcl (target_dn, target_path, ultimate_dn) char (168);
dcl (en, target_en, ultimate_en) char (32);

	target_dn = P_target_dn;
	target_en = P_target_en;
	target_path = pathname_ (target_dn, target_en);

	call get_equal_name_ (target_en, P_en, en, code);
	if code ^= 0 then do;
	     call com_err_ (code, "link", "^a for ^a", en, target_en);
	     return;
	end;

	if check_sw then do;
	     call hcs_$status_minf (target_dn, target_en, CHASE, type, 0, code);
	     if code ^= 0 & code ^= error_table_$no_s_permission then do;
		if code = error_table_$noentry then do;
		     call hcs_$status_minf (target_dn, target_en, NO_CHASE, 0, 0, code);
		     if code ^= error_table_$noentry then do;
			call com_err_ (0, "link", "No ultimate target for intended target ^a",
			     pathname_ (target_dn, target_en));
			go to RETURN;
		     end;
		end;
		call com_err_ (code, "link", "Link target ^a", pathname_ (target_dn, target_en));
		go to RETURN;
	     end;
	end;

	if chase_sw then do;
	     call hcs_$get_link_target (target_dn, target_en, ultimate_dn, ultimate_en, code);
	     if ultimate_dn ^= "" then do;
		target_dn = ultimate_dn;
		target_en = ultimate_en;
		target_path = pathname_ (target_dn, target_en);
	     end;
	end;

LINK:	call hcs_$append_link (P_dn, en, target_path, code);
	if code ^= 0 then
	     if code = error_table_$namedup then do;	/* ask whether to replace existing link */
		call nd_handler_ ("link", P_dn, en, code);
		if code = 0 then go to LINK;
		else if code = error_table_$action_not_performed then return;
		else go to RETURN;			/* an error occurred */
	     end;
	     else call com_err_ (code, "link", "^a^[>^]^a", dn, dn ^= ">", en);

	else if copy_names_sw then do;
	     call copy_names_ (target_dn, target_en, P_dn, en, "link -copy_names", errsw, code);
	     if code ^= 0 & code ^= error_table_$namedup & code ^= error_table_$segnamedup then
		if errsw then call com_err_ (code, "link", "^a", pathname_ (P_dn, en));
		else call com_err_ (code, "link", "^a", pathname_ (target_dn, target_en));
	end;

end link_one;
%page;
link_stars: proc (P_dn, P_en, P_target_dn, P_target_en);

dcl (P_dn, P_en, P_target_dn, P_target_en) char (*);
dcl 1 entries (entry_count) based (entries_ptr),
   2 pad bit (18) unaligned,
   2 nindex bit (18) unaligned;
dcl names (999) char (32) aligned based (names_ptr);
dcl target_en char (32);
dcl area area based (area_ptr);
dcl (area_ptr, entries_ptr, names_ptr) ptr;
dcl (entry_count, j) fixed bin;

	area_ptr = get_system_free_area_ ();
	entries_ptr, names_ptr = null;

	on cleanup call star_cleanup;

	call hcs_$star_ (P_target_dn, P_target_en, ALL_ENTRIES, area_ptr, entry_count, entries_ptr, names_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, "link", "^a", pathname_ (P_target_dn, P_target_en));
	     return;
	end;

	do j = 1 to entry_count;

	     target_en = names_ptr -> names (fixed (entries_ptr -> entries (j).nindex));

	     call link_one (P_dn, P_en, P_target_dn, target_en);
	end;

	call star_cleanup;

	return;

star_cleanup: proc;

	if entries_ptr ^= null then free entries in (area);
	if names_ptr ^= null then free names in (area);

end star_cleanup;

end link_stars;

end link;
