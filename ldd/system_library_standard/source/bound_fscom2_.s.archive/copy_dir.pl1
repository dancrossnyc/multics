/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */




/* format: style2,idind30,indcomtxt */
copy_dir:
cpd:
     procedure options (variable);

/*  Move or copy a directory and its subtree.

   Last modified:

   06/02/78  by  LLS for initial implementation
   07/06/78  by  LLS to add -update, the entry_type_keys, and fix containment and argument consistency checking.
   11/14/80  by  GAT to use copy_dir_.
   09/22/81  by  Lindsey Spratt: removed call to status to validate pathnames.
   copy_dir_ does this validation and it need not be duplicated
   here.
   6/29/83 by Jay Pattin to add -fcnt
   831002  by BIM to cleanup a bit, audit above, etc. 
   25/09/84 by B. Braun to initialize copy_dir_options.parent_ac_sw to "0"b;
   12/27/84  by Keith Loepere to remove create_branch_info.
   830206 by MSharpe to replace -fcnt with -inase/inaee; to accept -fc
	   as synonym for -force;  to initialize cdo.primary to ""b.
*/
/* Entries */

          dcl     check_star_name_$entry        entry (char (*), fixed bin (35));
          dcl     com_err_                      entry options (variable);
          dcl     com_err_$suppress_name        entry options (variable);
          dcl     copy_dir_                     entry (char (*), char (*), char (*), char (*), char (*), ptr,
                                                fixed bin (35));
          dcl     cu_$arg_count                 entry (fixed bin, fixed bin (35));
          dcl     cu_$arg_ptr                   entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
          dcl     expand_pathname_              entry (char (*), char (*), char (*), fixed bin (35));
          dcl     get_equal_name_               entry (char (*), char (*), char (32), fixed bin (35));
          dcl     get_system_free_area_         entry returns (ptr);
          dcl     get_wdir_                     entry returns (char (168));
          dcl     hcs_$star_                    entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
                                                fixed bin (35));

/**** *  Conditions  */

          dcl     cleanup                       condition;

/**** *  Based  */

          dcl     arg                           char (arg_len) based (arg_ptr);
          dcl     area                          area based (area_ptr);

/**** *  Automatic  */

          dcl     whoami                        char (8);   /* name of entry into code ("copy_dir" or "move_dir"). */
          dcl     code                          fixed bin (35);
                                                            /* the returned error code from a system call. */
          dcl     (
                  all_entries,                              /* all entries are copied */
                  all_names,                                /* all names on an entry are copied */
                  errors,
                  have_source,                              /* pathname of source is known. */
                  have_target,                              /* pathname of target is known */
                  same_dir,                                 /* se_name and te_name are in the same directory. */
                  multiple_sources,                         /* star name input                                */
                  move
                 )                              bit (1);    /* delete source_dir after copying */
          dcl     (
                  argno,                                    /* index to count through the argument list. */
                  entry_count,                              /* number star matches                            */
                  entry_index,
                  nargs
                  )                             fixed bin;
          dcl     arg_len                       fixed bin (21);
                                                            /* length of argument pointed to by arg_ptr. */

          dcl     (sd_name, td_name, wd)        char (168);
          dcl     (entry_temp, se_name, te_name)
                                                char (32);
          dcl     (arg1, arg2)                  char (32) varying;
          dcl     (
                  area_ptr,                                 /* ptr on which area is based. */
                  arg_ptr                                   /* Ptr to arg, set by call to cu_$arg_ptr. */
                  )                             ptr;

/*  External  */

          dcl     (
                  error_table_$badopt,
                  error_table_$inconsistent,
                  error_table_$notadir,
                  error_table_$no_s_permission
                  )                             fixed bin (35) external;

/**** *  Builtins  */

          dcl     (addr, binary, null, substr, sum)
                                                builtin;


          whoami = "copy_dir";
          move = "0"b;
          go to START;

move_dir:
mvd:
     entry options (variable);

          whoami = "move_dir";
          move = "1"b;

/*  true beginning of program */

START:
          star_branch_count, star_link_count = 0;
          star_select_sw = star_BRANCHES_ONLY;
          area_ptr = get_system_free_area_ ();
          star_entry_ptr, star_names_ptr = null ();
          on condition (cleanup)
               begin;
                    if star_names_ptr ^= null ()
                    then free star_names in (area);
                    if star_entry_ptr ^= null ()
                    then free star_entries in (area);
               end;

          wd = get_wdir_ ();
          have_source = "0"b;
          have_target = "0"b;
          all_names = "1"b;
          all_entries = "1"b;
          errors = "0"b;
          same_dir = "0"b;

          cdo.version = copy_dir_options_version_0;
          cdo.replace = "0"b;
          cdo.link_translation = "1"b;
	cdo.primary = "0"b;
          cdo.acl = "0"b;
          cdo.force = "0"b;
          cdo.brief = "0"b;
          cdo.chase = "0"b;
          cdo.parent_ac_sw = "0"b;
          cdo.link = "0"b;
          cdo.seg = "0"b;
          cdo.msf = "0"b;
          cdo.nnlk = "0"b;
          cdo.update = "0"b;
          cdo.dir = "0"b;
          cdo.raw = "0"b;
          cdo.pad1, cdo.pad2 = "0"b;
          if move
          then cdo.delete = "1"b;
          else cdo.delete = "0"b;


/* process arguments */

          call cu_$arg_count (nargs, code);
          if code ^= 0
          then do;
                    call com_err_ (code, whoami);
                    return;
               end;
          if nargs = 0
          then do;
usage:
                    call com_err_$suppress_name (0, whoami,
                         "Usage: ^a source_dir {target_dir} {-entry_type_keys} {-control_args} ", whoami);
                    goto finish;
               end;                                         /* get source_dir (sd_name and se_name). */


          do argno = 1 to nargs;
               call cu_$arg_ptr (argno, arg_ptr, arg_len, code);
               if code ^= 0
               then do;
                         call com_err_ (code, whoami, "On argument number ^d", argno);
                         goto finish;
                    end;

               if substr (arg, 1, 1) ^= "-"
               then if ^have_source
                    then do;
                              call expand_pathname_ (arg, sd_name, se_name, code);
                              if code ^= 0
                              then do;
err:
                                        call com_err_ (code, whoami, "^a", arg);
                                        goto finish;
                                   end;
                              call check_star_name_$entry (se_name, code);
                              if code = 0
                              then do;
                                        entry_count = 1;
                                        multiple_sources = "0"b;
                                   end;
                              else if (code = 1 | code = 2)
                              then multiple_sources = "1"b;
                              else do;
                                        call com_err_ (code, whoami, "Star name check failed on ^a.", se_name);
                                        goto finish;
                                   end;
                              have_source = "1"b;
                         end;

/*  process the rest of the arguments. */

                    else if ^have_target
                    then do;

                              call expand_pathname_ (arg, td_name, entry_temp, code);
                              if code ^= 0
                              then do;
                                        call com_err_ (code, whoami, "^a", arg);
                                        goto finish;
                                   end;

                              have_target = "1"b;
                         end;
                    else do;
                              call com_err_ (error_table_$badopt, whoami,
                                   "Too many pathnames, a maximum of two is allowed.");
                              goto finish;
                         end;                               /* check for the control arguments */
               else if arg = "-replace" | arg = "-rp"
               then cdo.replace = "1"b;
               else if arg = "-update" | arg = "-ud"
               then cdo.update = "1"b;
               else if (arg = "-no_link_translation" | arg = "-nlt") & ^move
               then cdo.link_translation = "0"b;
               else if arg = "-acl"
               then cdo.acl = "1"b;
               else if arg = "-force" | arg = "-fc"
               then cdo.force = "1"b;
               else if arg = "-brief" | arg = "-bf"
               then cdo.brief = "1"b;
               else if arg = "-chase"
               then cdo.chase = "1"b;
               else if arg = "-primary" | arg = "-pri"
               then cdo.primary = "1"b;
               else if arg = "-interpret_as_standard_entry" | arg = "-inase"
               then cdo.raw = "1"b;

               else if arg = "-interpret_as_extended_entry" | arg = "-inaee"
               then cdo.raw = "0"b;

/* check for entry type keys. */

               else if arg = "-link" | arg = "-lk"
               then do;
                         all_entries = "0"b;
                         cdo.link = "1"b;
                    end;
               else if arg = "-sm" | arg = "-segment"
               then do;
                         all_entries = "0"b;
                         cdo.seg = "1"b;
                    end;
               else if arg = "-dr" | arg = "-directory"
               then do;
                         all_entries = "0"b;
                         cdo.dir = "1"b;
                    end;
               else if arg = "-branch" | arg = "-br"
               then do;
                         all_entries = "0"b;
                         cdo.seg = "1"b;
                         cdo.msf = "1"b;
                         cdo.dir = "1"b;
                    end;
               else if arg = "-file" | arg = "-f"
               then do;
                         all_entries = "0"b;
                         cdo.seg = "1"b;
                         cdo.msf = "1"b;
                    end;
               else if arg = "-msf" | arg = "-multisegment_file"
               then do;
                         all_entries = "0"b;
                         cdo.msf = "1"b;
                    end;
               else if arg = "-non_null_link" | arg = "-nnlk"
               then do;
                         all_entries = "0"b;
                         cdo.nnlk = "1"b;
                    end;
               else do;
                         call com_err_ (error_table_$badopt, whoami, "^a", arg);
                         goto finish;
                    end;
          end;

/* check argument compatibility. */

          if (cdo.nnlk & cdo.link)
          then do;
                    arg1 = "-non_null_link";
                    arg2 = "-link";
incompatarg:
                    call com_err_ (error_table_$inconsistent, whoami, "Incompatible arguments ^a and ^a", arg1, arg2);
                    goto finish;
               end;
          if (cdo.replace & cdo.update)
          then do;
                    arg1 = "-replace";
                    arg2 = "-update";
                    goto incompatarg;
               end;
          if (cdo.chase & ^(cdo.link | all_entries))
          then do;
                    arg1 = "-chase";
                    arg2 = "not -link";
                    goto incompatarg;
               end;
          if ^have_target
          then do;
                    td_name = wd;
                    entry_temp = "==";
               end;
          if all_entries
          then cdo.link, cdo.seg, cdo.dir, cdo.msf = "1"b;


/* if source_dir is a star name, decode it and set up for using
   multiple source entries.  Otherwise, set up for using  a single
   source entry. */

          if multiple_sources
          then do;

                    call hcs_$star_ (sd_name, se_name, star_BRANCHES_ONLY, area_ptr, star_entry_count, star_entry_ptr,
                         star_names_ptr, code);
                    if code ^= 0
                    then do;
                              call com_err_ (code, whoami, "Could not get matching names for ^a^[>^]^a.", sd_name,
                                   sd_name ^= ">", se_name);
                              goto finish;
                         end;
                    entry_count = star_entry_count;
               end;

/* begin the loop through all of the source entries. */

          do entry_index = 1 to entry_count;
               if multiple_sources
               then if star_entries (entry_index).type = star_DIRECTORY
                                                            /*  check that arg 1 is a directory. */
                    then se_name = star_names (star_entries (entry_index).nindex);
                    else goto NEXT_ENTRY;

               call get_equal_name_ (se_name, entry_temp, te_name, code);
               call copy_dir_ (whoami, sd_name, se_name, td_name, te_name, addr (cdo), code);

/* errors messages are taken care of by copy_dir_, if -brief was used, the "trivial" errors
   aren't reported anywhere.
*/
NEXT_ENTRY:
          end;
finish:
          if star_names_ptr ^= null ()
          then free star_names in (area);
          if star_entry_ptr ^= null ()
          then free star_entries in (area);

          return;
%page;
/* Include */

%include star_structures;
%page;
%include query_info_;
%page;
%include copy_dir_options;

          declare 1 cdo                         aligned like copy_dir_options;

     end copy_dir;
