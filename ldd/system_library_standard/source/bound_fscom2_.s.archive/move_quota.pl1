/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
move_quota: movequota: mq: proc;

/* Implements the get_quota and move_quota commands and the get_quota active function. */
/* Coded November 1969 by M.R. Thompson */
/* Converted to pl1 1970 J.W. Gintell */
/* Star convention added September 1971 J. W. Gintell */
/* Converted to Version 2 December 1971 J.W. Gintell */
/* Removed set_quota entry point to tools May 1975 J. Whitmore */
/* Extra blank line removed from output 07/14/76 S. Herbst */
/* Rewrote, added gq af and -quota, -records_left, -records_used 09/29/82 S. Herbst */
/* Fixed to print table when multiple paths specified 10/29/82 S. Herbst */
/* Fixed error message for invalid numeric arg 01/03/83 S. Herbst */
/* Fixed bug in gq active function 03/17/83 S. Herbst */
/* Fixed -rec_left on link to use target's parent quota not link's parent quota 07/06/84 S. Herbst */
/* Added -nonzero, -total, -zero 07/06/84 S. Herbst */
/* Changed -all to print trp price at current rate structure 07/09/84 S. Herbst */
/* Added -sort 07/12/84 S. Herbst */
/* Fixed bug truncating record-days to an integer 11/15/84 Steve Herbst */
/* Fixed -long to align its output data in a column 11/26/84 Steve Herbst */
/* Fixed bug in error message when no directories match a starname 02/15/85 Steve Herbst */


/* Constants */

dcl NO_ACCESS fixed bin int static options (constant) init (-1);
dcl (QUOTA init (1), RECORDS_LEFT init (2), RECORDS_USED init (3)) fixed bin int static options (constant);

/* Based */

dcl area area based (area_ptr);

dcl 1 node aligned based,
   2 sort_value fixed bin (35),
   2 next ptr,
   2 info,
    3 path char (168) unaligned,
    3 lvname char (36),
    3 trp fixed bin (71),
    3 time_updated fixed bin (36),
    3 (terminal_quota, quota_value, records_left, records_used) fixed bin;

dcl arg char (arg_len) based (arg_ptr);
dcl return_arg char (return_len) varying based (return_ptr);

/* Automatic */

dcl (dn, path) char (168);
dcl lvname_string char (36);
dcl (default_lvname, en, lvname, me, time_string) char (32);

dcl sons_lvid bit (36);
dcl (af_sw, dir_quota_sw, long_sw, nonzero_sw, print_header_sw, quota_sw, records_left_sw, records_used_sw) bit (1);
dcl (some_matches, some_nonzero, some_zero, sort_sw, star_sw, total_sw, type_specified_sw, wdir_sw, zero_sw) bit (1);

dcl (area_ptr, arg_ptr, first_node_ptr, last_node_ptr, p, return_ptr) ptr;

dcl rate_structure_number fixed bin (9);
dcl (arg_count, i, j, node_count, path_count, quota_value, records_left, records_used) fixed bin;
dcl (sort_by, terminal_quota, total_quota, total_records_used) fixed bin;
dcl (arg_len, return_len) fixed bin (21);
dcl (code, time_updated) fixed bin (35);
dcl trp fixed bin (71);
dcl record_days float bin;
dcl dummy_rate (0:7) float bin;
dcl (disk_rate, dummy_float) float bin;

dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$badstar fixed bin (35) ext;
dcl error_table_$nomatch fixed bin (35) ext;
dcl error_table_$nostars fixed bin (35) ext;
dcl error_table_$not_act_fnc fixed bin (35) ext;

dcl complain variable entry options (variable);
dcl get_arg variable entry (fixed bin, ptr, fixed bin (21), fixed bin (35));

dcl absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl active_fnc_err_ entry options (variable);
dcl check_star_name_$path entry (char (*), fixed bin (35));
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cu_$arg_count entry (fixed bin, fixed bin (35));
dcl (cu_$af_arg_ptr, cu_$arg_ptr) entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl date_time_$fstime entry (fixed bin (35), char (*));
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl get_system_free_area_ entry returns (ptr);
dcl get_wdir_ entry returns (char (168));
dcl (hcs_$dir_quota_move, hcs_$quota_move) entry (char (*), char (*), fixed bin, fixed bin (35));
dcl (hcs_$dir_quota_read, hcs_$quota_read) entry (char (*), fixed bin, fixed bin (71), fixed bin (35),
	bit (36), fixed bin, fixed bin, fixed bin (35));
dcl hcs_$get_link_target entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl hcs_$star_dir_list_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, fixed bin,
	ptr, ptr, fixed bin (35));
dcl (ioa_, ioa_$rsnnl) entry options (variable);
dcl mdc_$find_lvname entry (bit (36), char (*), fixed bin (35));
dcl pathname_ entry (char (*), char (*)) returns (char (168));
dcl sort_items_$fixed_bin entry (ptr);
dcl system_info_$prices_rs entry (fixed bin (9), (0:7)float bin, (0:7)float bin, (0:7)float bin, (0:7)float bin,
	float bin, float bin);
dcl user_info_$rs_number entry (fixed bin (9));

dcl (addr, binary, divide, float, index, length, mod, null, reverse, substr, sum, unspec) builtin;

dcl cleanup condition;
%page;
	me = "move_quota";
	dir_quota_sw = "0"b;
	go to MOVE_COMMON;

move_dir_quota: entry;

	me = "move_dir_quota";
	dir_quota_sw = "1"b;

MOVE_COMMON:
	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, me);
	     return;
	end;

	if arg_count < 2 | mod (arg_count, 2) ^= 0 then do;
	     call com_err_$suppress_name (0, me, "Usage:  ^a path1 records1 ... pathN recordsN", me);
	     return;
	end;

	do i = 1 by 2 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if index (arg, "-") = 1 then
		if arg = "-working_directory" | arg = "-working_dir" | arg = "-wd" then do;
		     dn = get_wdir_ ();
		     en = "";
		end;
		else do;
		     call com_err_ (error_table_$badopt, me, "^a", arg);
		     return;
		end;
	     else do;
		call expand_pathname_ (arg, dn, en, code);
		if code ^= 0 then do;
		     call com_err_ (code, me, "^a", arg);
		     return;
		end;
	     end;

	     call cu_$arg_ptr (i + 1, arg_ptr, arg_len, code);

	     quota_value = cv_dec_check_ (arg, code);
	     if code ^= 0 then do;
		call com_err_ (0, me, "Invalid numeric argument.  ^a", arg);
		return;
	     end;

	     if dir_quota_sw then call hcs_$dir_quota_move (dn, en, quota_value, code);
	     else call hcs_$quota_move (dn, en, quota_value, code);

	     if code ^= 0 then do;
		call com_err_ (code, me, "^a", pathname_ (dn, en));
		return;
	     end;
	end;

	return;
%page;
get_quota: getquota: gq: entry;

	me = "get_quota";
	dir_quota_sw = "0"b;
	go to GET_COMMON;

get_dir_quota: entry;

	me = "get_dir_quota";
	dir_quota_sw = "1"b;

GET_COMMON:
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = 0 then do;
	     af_sw = "1"b;
	     get_arg = cu_$af_arg_ptr;
	     complain = active_fnc_err_;
	end;
	else if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     get_arg = cu_$arg_ptr;
	     complain = com_err_;
	end;
	else do;
	     call com_err_ (code, me);
	     return;
	end;

	long_sw, nonzero_sw, quota_sw, records_left_sw, records_used_sw = "0"b;
	sort_sw, total_sw, type_specified_sw, wdir_sw, zero_sw = "0"b;
	path_count = 0;

	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if index (arg, "-") = 1 then
		if arg = "-all" | arg = "-a" then do;
LONG:
		     if af_sw then do;
BAD_OPT:			call complain (error_table_$badopt, me, "^a", arg);
			return;
		     end;
		     long_sw, quota_sw, records_left_sw, records_used_sw = "1"b;
		end;
		else if arg = "-long" | arg = "-lg" then go to LONG;
		else if arg = "-nonzero" | arg = "-nz" then
		     if af_sw then go to BAD_OPT;
		     else nonzero_sw = "1"b;
		else if arg = "-quota" then quota_sw, type_specified_sw = "1"b;
		else if arg = "-records_left" | arg = "-rec_left" | arg = "-left" then
		     records_left_sw, type_specified_sw = "1"b;
		else if arg = "-records_used" | arg = "-rec_used" | arg = "-ru" | arg = "-used" then
		     records_used_sw, type_specified_sw = "1"b;
		else if arg = "-sort" then
		     if af_sw then go to BAD_OPT;
		     else sort_sw = "1"b;
		else if arg = "-total" | arg = "-tt" then total_sw = "1"b;
		else if arg = "-working_directory" | arg = "-working_dir" | arg = "-wd" then
		     if af_sw & path_count > 0 then go to AF_TWO_PATHS;
		     else do;
			wdir_sw = "1"b;
			path_count = path_count + 1;
		     end;
		else if arg = "-zero" then
		     if af_sw then go to BAD_OPT;
		     else zero_sw = "1"b;
		else go to BAD_OPT;
	     else do;
		if af_sw & path_count > 0 then do;
AF_TWO_PATHS:
		     call complain (0, me, "Only one directory allowed.");
		     return;
		end;
		path_count = path_count + 1;
	     end;
	end;

	if nonzero_sw & zero_sw then do;
	     call complain (0, me, "Incompatible control arguments -zero and -nonzero");
	     return;
	end;

	if af_sw then
	     if (quota_sw & records_left_sw) |
	        (records_left_sw & records_used_sw) |
	        (quota_sw & records_used_sw) then do;
		call complain (0, me, "Only one of -quota, -records_left, -records_used is allowed.");
		return;
	     end;

	if ^type_specified_sw then
	     if af_sw then quota_sw = "1"b;		/* af default: just return quota */
	     else quota_sw, records_used_sw = "1"b;

	if sort_sw then do;				/* decide which value to sort by */
	     if quota_sw & ^records_left_sw & ^records_used_sw then sort_by = QUOTA;
	     else if records_left_sw & ^quota_sw & ^records_used_sw then sort_by = RECORDS_LEFT;
	     else sort_by = RECORDS_USED;
	     node_count = 0;
	end;

	default_lvname = "";
	print_header_sw = "1"b;
	some_nonzero, some_zero, star_sw = "0"b;
	total_quota, total_records_used = 0;

	star_entry_ptr, star_names_ptr = null;
	first_node_ptr, last_node_ptr = null;
	area_ptr = get_system_free_area_ ();

	on cleanup call clean_up;

	if wdir_sw | path_count = 0 then do;
	     call process_path (get_wdir_ ());
	     if path_count < 2 then go to TOTAL;	/* no args or -wd by itself */
	end;

	do i = 1 to arg_count;

	     call get_arg (i, arg_ptr, arg_len, code);

	     if index (arg, "-") ^= 1 then do;		/* pathname */

		call absolute_pathname_ (arg, path, code);
		if code ^= 0 then do;
		     call complain (code, me, "^a", arg);
		     return;
		end;

		star_sw = "0"b;
		if path ^= ">" then do;
		     call check_star_name_$path (path, code);
		     if code = error_table_$badstar then do;
			call complain (code, me, "^a", path);
			return;
		     end;
		     star_sw = (code ^= 0);
		end;

		if ^star_sw then call process_path (path);

		else do;				/* starname */

		     if af_sw then do;
			call complain (error_table_$nostars, me, "^a", path);
			return;
		     end;

		     call expand_pathname_ (path, dn, en, code);
		     if code ^= 0 then do;		/* absolute_pathname_ probably caught this */
			call complain (code, me, "^a", path);
			return;
		     end;

		     if dir_quota_sw then call hcs_$dir_quota_read (dn, quota_value, trp, time_updated,
			sons_lvid, terminal_quota, records_used, code);
		     else call hcs_$quota_read (dn, quota_value, trp, time_updated,
			sons_lvid, terminal_quota, records_used, code);
		     if code ^= 0 then do;
			call complain (code, me, "^a", dn);
			return;
		     end;

		     call mdc_$find_lvname (sons_lvid, default_lvname, code);
		     if code ^= 0 then do;
			call complain (code, me, "^a ^w", dn, sons_lvid);
			return;
		     end;

		     call hcs_$star_ (dn, en, star_BRANCHES_ONLY, area_ptr, star_entry_count,
			star_entry_ptr, star_names_ptr, code);
		     if code ^= 0 then do;
			call complain (code, me, "^a", pathname_ (dn, en));
			return;
		     end;

		     some_matches = "0"b;

		     do j = 1 to star_entry_count;

			if star_entries (j).type = star_DIRECTORY then do;

			     some_matches = "1"b;

			     call process_path (pathname_ (dn, star_names (star_entries (j).nindex)));
			end;
		     end;

		     if ^some_matches then call complain (0, me, "No directories match starname ^a",
			pathname_ (dn, en));

		     call clean_up_stars;
		end;
	     end;
	end;

TOTAL:
	if nonzero_sw & ^some_nonzero then
	     call com_err_ (0, me, "No directories with nonzero quota-used.");
	else if zero_sw & ^some_zero then
	     call com_err_ (0, me, "No directories with zero quota-used.");

	if sort_sw then
begin;
dcl 1 sort_array aligned,
   2 n fixed bin (18),
   2 eltp (node_count) ptr unaligned;

	sort_array.n = node_count;
	i = 0;

	do p = first_node_ptr repeat (p -> node.next) while (p ^= null);
	     i = i + 1;
	     sort_array.eltp (i) = addr (p -> node.sort_value);
	end;

	call sort_items_$fixed_bin (addr (sort_array));

	do i = sort_array.n by -1 to 1;
	     p = eltp (i);
	     lvname = p -> node.lvname;
	     trp = p -> node.trp;
	     time_updated = p -> node.time_updated;
	     terminal_quota = p -> node.terminal_quota;
	     quota_value = p -> node.quota_value;
	     records_left = p -> node.records_left;
	     records_used = p -> node.records_used;

	     call print_line (p -> node.path);
	end;
end;

	if star_sw & ^af_sw & ^print_header_sw & ^long_sw then
	     if (quota_sw | records_used_sw) then call ioa_ ("^/^[^6d^-^;^s^]^[^6d^-^;^s^]^[^-^]^-Total^/",
		quota_sw, total_quota, records_used_sw, total_records_used, records_left_sw);
	     else call ioa_ ("");

	return;
%page;
add_node: proc () returns (ptr);

dcl newp ptr;

	allocate node in (area) set (newp);
	unspec (newp -> node) = "0"b;
	newp -> node.next = null;
	if first_node_ptr = null then first_node_ptr, last_node_ptr = newp;
	else do;
	     last_node_ptr -> node.next = newp;
	     last_node_ptr = newp;
	end;

	node_count = node_count + 1;

	return (newp);

end add_node;
%page;
clean_up: proc;

dcl (nextp, p) ptr;

	call clean_up_stars;

	if first_node_ptr ^= null then
	     do p = first_node_ptr repeat (nextp) while (p ^= null);
		nextp = p -> node.next;
		free p -> node in (area);
	     end;

end clean_up;
%page;
clean_up_stars: proc;

	if star_names_ptr ^= null then free star_names in (area);
	if star_entry_ptr ^= null then free star_entries in (area);
	star_entry_ptr, star_names_ptr = null;

end clean_up_stars;
%page;
entryname: proc (P_path) returns (char (*));

dcl P_path char (*);
dcl (i, j) fixed bin;

	if P_path = ">" then return (">");
	i = index (reverse (P_path), ">");
	if i = 0 then return (P_path);
	j = length (P_path) - i + 2;
	return (substr (P_path, j));

end entryname;
%page;
get_records_left: proc (P_path, P_quota_value, P_records_used, P_terminal_quota) returns (fixed bin);

/* This procedure calls itself recursively */

dcl P_path char (*);
dcl (P_quota_value, P_records_used, P_terminal_quota) fixed bin;
dcl (dn, target_dn) char (168);
dcl (en, target_en) char (32);
dcl (quota_value, records_used, terminal_quota) fixed bin;
dcl code fixed bin (35);

	if P_terminal_quota ^= 0 then return (P_quota_value - P_records_used);

	else do;

	     call expand_pathname_ (P_path, dn, en, code);

	     call hcs_$get_link_target (dn, en, target_dn, target_en, code);
						/* if nonlink, target_foo set same as foo */
	     if code ^= 0 then return (NO_ACCESS);

	     if dir_quota_sw then call hcs_$dir_quota_read (target_dn, quota_value, 0, 0, "0"b, terminal_quota,
		records_used, code);
	     else call hcs_$quota_read (target_dn, quota_value, 0, 0, "0"b, terminal_quota,
		records_used, code);

	     if code ^= 0 then return (NO_ACCESS);

	     else return (get_records_left (target_dn, quota_value, records_used, terminal_quota));
	end;

end get_records_left;
%page;
print_line: proc (P_path);

dcl P_path char (*);

	if ^long_sw then
	     if ^star_sw & path_count < 2 then call ioa_
		("^[quota = ^d^[; ^]^;^2s^]^[used = ^d^[; ^]^;^2s^]^[remaining = ^[(no access)^;^d^]^]",
		quota_sw, quota_value, records_left_sw | records_used_sw,
		records_used_sw, records_used, records_left_sw,
		records_left_sw, records_left = NO_ACCESS, records_left);

	     else do;				/* star case */
		if print_header_sw then do;		/* print heading first time */
		     call ioa_ ("^/^[^xquota^-^]^[^2xused^-^]^[^2xremaining^-^]^-directory name^/",
			quota_sw, records_used_sw, records_left_sw);
		     print_header_sw = "0"b;
		end;
		if lvname = default_lvname then lvname_string = "";
		else call ioa_$rsnnl ("(^a)", lvname_string, 0, lvname);
		call ioa_ ("^[^6d^-^;^s^]^[^6d^-^;^s^]^[^[no access^s^;^6d^]^-^;^2s^]^-^a  ^a",
		     quota_sw, quota_value,
		     records_used_sw, records_used,
		     records_left_sw, records_left = NO_ACCESS, records_left,
		     entryname (P_path), lvname_string);
	     end;

	else do;					/* -long */
	     call ioa_ ("^/quota for:   ^a^/", P_path);
	     call date_time_$fstime (time_updated, time_string);
	     record_days = (float (trp) + 43200.) / 86400.;
	     call ioa_ ("quota:^28t^d pages ^[(space is charged to superior directory)^]",
		quota_value, terminal_quota = 0);
	     call ioa_ ("used:^28t^d pages", records_used);
	     call ioa_ ("remaining:^28t^[(no access)^;^d pages^]", records_left = NO_ACCESS, records_left);
	     call ioa_ ("sons volume:^28t^a", lvname);
	     if time_updated ^= 0 then do;
		call ioa_ ("time-record-product:^28t^.3f record-days", record_days);
		call ioa_ ("trp last updated:^28t^a", time_string);
		call user_info_$rs_number (rate_structure_number);
		disk_rate = 0;
		call system_info_$prices_rs (rate_structure_number,
		     dummy_rate, dummy_rate, dummy_rate, dummy_rate, disk_rate, dummy_float);
		if disk_rate > 0 then
		     call ioa_ ("trp price at current rate:^28t$^.2f", trp * disk_rate);
		call ioa_ ("");
	     end;
	end;

end print_line;
%page;
process_path: proc (P_path);

dcl P_path char (*);

	if dir_quota_sw then call hcs_$dir_quota_read (P_path, quota_value, trp, time_updated,
	     sons_lvid, terminal_quota, records_used, code);
	else call hcs_$quota_read (P_path, quota_value, trp, time_updated,
	     sons_lvid, terminal_quota, records_used, code);
	if code ^= 0 then do;
	     call complain (code, me, "^a", P_path);
	     return;
	end;

	if total_sw & terminal_quota ^= 0 then
	     records_used = records_used + subdir_records_used (P_path);

	if nonzero_sw then
	     if records_used = 0 then return;
	     else some_nonzero = "1"b;
	else if zero_sw then
	     if records_used ^= 0 then return;
	     else some_zero = "1"b;

	call mdc_$find_lvname (sons_lvid, lvname, code);
	if code ^= 0 then call complain (code, me, "^a ^w", P_path, sons_lvid);

	total_quota = total_quota + quota_value;
	total_records_used = total_records_used + records_used;

	if records_left_sw then records_left = get_records_left (P_path, quota_value, records_used, terminal_quota);

	if af_sw then do;
	     call ioa_$rsnnl ("^[^d^;^s^]^[^d^;^s^]^[^d^]", return_arg, return_len,
		quota_sw, quota_value, records_left_sw, records_left, records_used_sw, records_used);
	     return;
	end;

	if ^sort_sw then call print_line (P_path);

	else do;					/* -sort: save data for sorting */
	     p = add_node ();
	     p -> node.path = P_path;
	     p -> node.lvname = lvname;
	     p -> node.trp = trp;
	     p -> node.time_updated = time_updated;
	     p -> node.terminal_quota = terminal_quota;
	     p -> node.quota_value = quota_value;
	     p -> node.records_left = records_left;
	     p -> node.records_used = records_used;
	     if sort_by = QUOTA then p -> node.sort_value = quota_value;
	     else if sort_by = RECORDS_LEFT then p -> node.sort_value = records_left;
	     else p -> node.sort_value = records_used;
	end;

end process_path;
%page;
subdir_records_used: proc (P_dn) returns (fixed bin);

dcl P_dn char (*);
dcl path char (168);
dcl (eptr, nptr) ptr;
dcl (ecount, j, lcount, records_used, terminal_quota, total_ru) fixed bin;
dcl code fixed bin (35);

	eptr, nptr = null;
	on cleanup call local_cleanup;

	total_ru = 0;

	call hcs_$star_dir_list_ (P_dn, "**", star_BRANCHES_ONLY, area_ptr, ecount, lcount, eptr, nptr, code);
	if code = 0 & ecount > 0 then do;
	     star_branch_count = ecount;		/* to satisfy the structure declarations */
	     star_link_count = lcount;
	     star_select_sw = star_BRANCHES_ONLY;
	     do j = 1 to ecount;
		if eptr -> star_dir_list_branch (j).type = star_DIRECTORY then do;
		     path = pathname_
			(P_dn, (nptr -> star_list_names (eptr -> star_dir_list_branch (j).nindex)));
		     if eptr -> star_dir_list_branch (j).master_dir then call complain (0, me,
			"^a is a master directory; its quota will not be included in the total.", path);
		     else do;
			if dir_quota_sw then call hcs_$dir_quota_read (path, 0, 0, 0, "0"b,
			     terminal_quota, records_used, code);
			else call hcs_$quota_read (path, 0, 0, 0, "0"b,
			     terminal_quota, records_used, code);
			if code ^= 0 then call complain (code, me,
			     "^a^/Directory's quota will not be included in the total.", path);
			else if terminal_quota ^= 0 then
			     total_ru = total_ru + records_used + subdir_records_used (path);
		     end;
		end;
	     end;
	     call local_cleanup;
	end;
	else if code ^= 0 & code ^= error_table_$nomatch then call complain (code, me, "^a", P_dn);

	return(total_ru);

local_cleanup: proc;

	star_list_branch_ptr = eptr;			/* to make the declaration happy */
	if nptr ^= null then free nptr -> star_list_names in (area);
	if eptr ^= null then free eptr -> star_dir_list_branch in (area);

end local_cleanup;

end subdir_records_used;
%page;
%include star_structures;

end move_quota;
