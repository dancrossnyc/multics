/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* Copy segment and/or directory IACL from one directory to another */

/* Rewritten: 23 January 1981 by G.  Palter to not add *.SysDaemon.* term to the new IACL if not present in the original
	       and to use the system free area rather than an automatic one */


copy_iacl_:
     procedure (source_dirname, source_ename, target_dirname, target_ename, error_on_target, code);


/* Parameters */

dcl  source_dirname character (*) parameter;		/* dir/entry of directory whose IACL is copied */
dcl  source_ename character (*) parameter;

dcl  target_dirname character (*) parameter;		/* dir/entry of directory to receive the IACL */
dcl  target_ename character (*) parameter;

dcl  error_on_target bit (1) aligned parameter;		/* ON => error occurred adding IACL to target;
						   OFF => error occured adding getting IACL from source */

dcl  code fixed binary (35) parameter;


/* Remaining declarations */

dcl 1 segment_acl (acl_count) aligned based (acl_ptr),
    2 access_name character (32),
    2 modes bit (36),
    2 extended_modes bit (36),
    2 status_code fixed binary (35);

dcl 1 directory_acl (acl_count) based (acl_ptr),
    2 access_name character (32),
    2 dir_modes bit (36),
    2 status_code fixed binary (35);

dcl  acl_ptr pointer;
dcl  acl_count fixed binary;

dcl  ring fixed binary (3);

dcl  directory_iacl bit (1) aligned;

dcl  system_area area based (system_area_ptr);
dcl  system_area_ptr pointer;

dcl  get_ring_ entry () returns (fixed binary (3));
dcl  get_system_free_area_ entry () returns (pointer);
dcl (hcs_$list_inacl, hcs_$list_dir_inacl)
	entry (character (*), character (*), pointer, pointer, pointer, fixed binary, fixed binary (3), fixed binary (35));
dcl (hcs_$replace_dir_inacl, hcs_$replace_inacl)
	entry (character (*), character (*), pointer, fixed binary, bit(1) aligned, fixed binary (3), fixed binary (35));

dcl  cleanup condition;

dcl  null builtin;
%page;
/* Copy both the segment and directory IACLs */

	system_area_ptr = get_system_free_area_ ();
	ring = get_ring_ ();

	acl_ptr = null ();				/* for cleanup handler */
	on condition (cleanup)
	     begin;
		if acl_ptr ^= null () then
		     if directory_iacl then
			free directory_acl in (system_area);
		     else free segment_acl in (system_area);
	     end;

	directory_iacl = "0"b;
	call copy_seg_iacl ();
	     if code ^= 0 then return;		/* couldn't do it */

	directory_iacl = "1"b;
	call copy_dir_iacl ();

	return;



/* Copy the segment IACL only */

seg: entry (source_dirname, source_ename, target_dirname, target_ename, error_on_target, code);

	system_area_ptr = get_system_free_area_ ();
	ring = get_ring_ ();

	acl_ptr = null ();
	on condition (cleanup)
	     begin;
		if acl_ptr ^= null () then
		     free segment_acl in (system_area);
	     end;

	call copy_seg_iacl ();

	return;



/* Copy the directory IACL only */

dir: entry (source_dirname, source_ename, target_dirname, target_ename, error_on_target, code);

	system_area_ptr = get_system_free_area_ ();
	ring = get_ring_ ();

	acl_ptr = null ();
	on condition (cleanup)
	     begin;
		if acl_ptr ^= null () then
		     free directory_acl in (system_area);
	     end;

	call copy_dir_iacl ();

	return;
%page;
/* Copy the segment IACL */

copy_seg_iacl:
	procedure ();

	     error_on_target = "0"b;
	     call hcs_$list_inacl (source_dirname, source_ename, system_area_ptr, acl_ptr, null (), acl_count, ring, code);
		if code ^= 0 then return;		/* assume nothing was allocated */

	     error_on_target = "1"b;
	     call hcs_$replace_inacl (target_dirname, target_ename, acl_ptr, acl_count, "1"b, ring, code);

	     free segment_acl in (system_area);		/* get rid of it */

	     return;

	end copy_seg_iacl;



/* Copy the directory IACL */

copy_dir_iacl:
	procedure ();

	     error_on_target = "0"b;
	     call hcs_$list_dir_inacl (source_dirname, source_ename, system_area_ptr, acl_ptr, null (), acl_count,
				 ring, code);
		if code ^= 0 then return;		/* assume nothing allocated */

	     error_on_target = "1"b;
	     call hcs_$replace_dir_inacl (target_dirname, target_ename, acl_ptr, acl_count, "1"b, ring, code);

	     free directory_acl in (system_area);

	     return;

	end copy_dir_iacl;

     end copy_iacl_;
