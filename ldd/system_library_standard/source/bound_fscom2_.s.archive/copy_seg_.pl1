/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
   *                                                            *
   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
   *                                                            *
   ************************************************************** */



copy_seg_:
     proc (P_source_dir, P_source_name, P_target_dir, P_target_name, P_caller, P_error_sw, P_code);

/* This is a replacement for the old copy_seg_. It is just a write-around for copy_

   Jay Pattin 6/29/83 */

          declare (P_source_dir, P_source_name, P_target_dir, P_target_name, P_caller)
                                         char (*) parameter,
                  P_error_sw             bit (1) aligned parameter,
                  P_code                 fixed bin (35) parameter;

          declare 1 cpo                  aligned like copy_options,
                  1 cei                  aligned like copy_error_info,
                  1 ci                   aligned like condition_info;

          declare brief                  bit (1) aligned,
                  code                   fixed bin (35),
                  message                char (100) aligned,
                  no_message             bit (1) aligned;

          declare error_table_$fatal_error fixed bin (35) external,
                  iox_$error_output      ptr external,
                  string                 builtin,
                  sub_error_             condition;

          declare continue_to_signal_    entry (fixed bin (35)),
                  convert_status_code_   entry (fixed bin (35), char (8) aligned, char (100) aligned),
                  copy_                  entry (ptr),
                  find_condition_info_   entry (ptr, ptr, fixed bin (35)),
                  ioa_$ioa_switch        entry options (variable);
%page;
%include copy_options;
%page;
%include copy_flags;
%page;
%include sub_error_info;
%include copy_error_info;
%include condition_info_header;
%include condition_info;
%page;
          brief, no_message = "0"b;
          goto COMMON;

copy_seg_$brief:
     entry (P_source_dir, P_source_name, P_target_dir, P_target_name, P_caller, P_error_sw, P_code);

          brief = "1"b;
          no_message = "0"b;
          goto COMMON;

copy_seg_$no_message:
     entry (P_source_dir, P_source_name, P_target_dir, P_target_name, P_caller, P_error_sw, P_code);

          brief = "0"b;
          no_message = "1"b;
          goto COMMON;

COMMON:   cpo.version = COPY_OPTIONS_VERSION_1;
          cpo.caller_name = P_caller;
          cpo.source_dir = P_source_dir;
          cpo.source_name = P_source_name;
          cpo.target_name = P_target_name;
          cpo.target_dir = P_target_dir;

          string (cpo.flags) = ""b;
          cpo.no_name_dup = no_message;
          string (cpo.copy_items) = ""b;

          on sub_error_ call sub_err_handler ();

          call copy_ (addr (cpo));

          P_code = 0;
          return;

MAIN_RETURN:
          P_error_sw = cpo.target_err_switch;
          if code = 0 then code = error_table_$fatal_error;
          P_code = code;
          return;
%page;
sub_err_handler:
     proc ();

          ci.version = condition_info_version_1;
          call find_condition_info_ (null (), addr (ci), (0));
          sub_error_info_ptr = ci.info_ptr;

          if sub_error_info.name ^= "copy_" | copy_error_info.copy_options_ptr ^= addr (cpo) then do;
                    call continue_to_signal_ ((0));
                    return;
               end;

          code = sub_error_info.status_code;

          if sub_error_info.cant_restart then goto MAIN_RETURN;

          if sub_error_info.default_restart & brief then return;

          call convert_status_code_ (code, "", message);
          call ioa_$ioa_switch (iox_$error_output, "^a: ^a ^a", cpo.caller_name, message, sub_error_info.info_string);

          return;
     end sub_err_handler;

     end copy_seg_;
