/****^  **************************************************************
        *                                                            *
        * Copyright, (C) BULL HN Information Systems Inc., 1990      *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1983    *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */





/****^  HISTORY COMMENTS:
  1) change(88-10-03,Flegel), approve(88-11-16,MCR8020), audit(89-01-16,Lee),
     install(89-01-24,MR12.3-1012):
     phx19616 - created procedure change_source_dir, see function header for
                info.
     phx20481 - repaired ioa_ control strings for calls to error and
                warning so that all 3 arguments are properly accounted for.
     phx21214 - reorder the copying of characteristics so that the ACL is
                copied last and the ring_brackets are second last.
  2) change(88-11-10,Flegel), approve(88-12-22,MCR8028), audit(89-01-16,Lee),
     install(89-01-24,MR12.3-1012):
     phx21056 / phx21147 - ignore error_table_$action_not_performed when
                setting max_length and allow suffix_XXX_ to set the
                max_length appropriately when the copy is first perfomed.
  3) change(89-01-31,Flegel), approve(89-03-08,PBF8020), audit(89-03-09,Lee),
     install(89-03-13,MR12.3-1023):
     Post Bug Fix - The call to sub_error_ had control string backwards in
     respect to the pathnames that were to be used based on the value of
     switch.
  4) change(89-11-15,Flegel), approve(89-11-16,MECR0014),
     audit(89-11-15,LZimmerman), install(89-11-16,MR12.3-1118):
     Repair "change_source_dir" subroutine to verify that the target is a real
     directory (which excludes MSFs).
  5) change(89-12-14,Flegel), approve(89-12-14,MCR8151),
     audit(89-12-14,LZimmerman), install(90-04-19,MR12.4-1007):
     Install MECR0014 through regular installation procedures.
  6) change(90-09-04,Huen), approve(90-09-04,MCR8195), audit(90-09-26,Vu),
     install(90-10-14,MR12.4-1039):
     phx21348 (cmds_837) - Fix the error handling of the copy/move commands by
     intercepting the "sub_error" condition.
                                                   END HISTORY COMMENTS */


/* format: style2,indcomtxt,idind30 */

copy_:
     proc (P_copy_options_ptr);

/* This is the primitive used to copy (and move) segments.

   Jay Pattin 6/2/83 */

/****
      BIM 830923 rework of object_type_ to fs_util_ */
/**** BIM 831022 split into fs_copy_ and copy_. */
/**** BIM 831031 fixed raw mode to use source type instead of target. */
/**** BIM 1984-07-27 fix copying with the raw switch. */
/**** C Spitzer 841102 fix bug in sub_err_ call */
/**** MSharpe 850206 to check the hcs type of the source before calling nd_handler_ */

/**** * copy_ is the advertised interface for copying objects.
      copy_ uses fs_util_$copy to copy the contents,
      and then various copy_XXX_ utilities to copy other
      atrributes. In raw mode, it forcibly uses segment or
      msf copying in fs_standard_object_, and does
      attributes appropriately. */

	declare P_copy_options_ptr	        ptr parameter;

	declare errsw		        bit (1) aligned;
	declare forced_access	        bit (1) aligned;
	declare max_length		        fixed bin (19);
	declare raw		        bit (1) aligned;
	declare same_dir_sw		        bit (1) aligned;
	declare ring_brackets	        (64) fixed bin (3);
	declare source_dir		        char (168);
	declare source_name		        char (32);
	declare source_type		        char (32);
	declare target_dir		        char (168);
	declare target_name		        char (32);
	declare (source_uid, target_uid)      bit (36) aligned;
	declare fs_type		        char (32);
	declare (source_hcs_type, target_hcs_type)
				        fixed bin (2);
	declare old_source_dir	        char (168);

	declare 1 bks		        aligned like status_for_backup;
	declare 1 si		        aligned like suffix_info;
	declare 1 cei		        aligned like copy_error_info;

	declare (
	        error_table_$nonamerr,
	        error_table_$dirseg,
	        error_table_$namedup,
	        error_table_$noentry,
	        error_table_$no_info,
	        error_table_$sameseg,
	        error_table_$segnamedup,
	        error_table_$unimplemented_version,
	        error_table_$unsupported_operation,
	        error_table_$action_not_performed
	        )			        fixed bin (35) external;

	declare copy_acl_		        entry (char (*), char (*), char (*), char (*), bit (1) aligned,
				        fixed bin (35));
	declare copy_names_		        entry (char (*), char (*), char (*), char (*), char (*), bit (1) aligned,
				        fixed bin (35));
	declare delete_$path	        entry (char (*), char (*), bit (36) aligned, char (*), fixed bin (35));
	declare expand_pathname_	        entry (char (*), char (*), char (*), fixed bin (35));
	declare (
	        hcs_$chname_file,
	        fs_util_$chname_file
	        )			        entry (char (*), char (*), char (*), char (*), fixed bin (35));
	declare hcs_$get_link_target	        entry (char (*), char (*), char (*), char (*), fixed bin (35));
	declare hcs_$get_uid_file	        entry (char (*), char (*), bit (36) aligned, fixed bin (35));
	declare hcs_$status_minf	        entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				        fixed bin (35));
	declare hcs_$set_entry_bound	        entry (char (*), char (*), fixed bin (14), fixed bin (35));
	declare hcs_$status_for_backup        entry (char (*), char (*), ptr, fixed bin (35));
	declare move_names_		        entry (char (*), char (*), char (*), char (*), char (*), bit (1) aligned,
				        fixed bin (35));
	declare nd_handler_$switches	        entry (char (*), char (*), char (*), bit (36) aligned, fixed bin (35));

	declare get_shortest_path_	        entry (char (*)) returns (char (168));
	declare get_system_free_area_	        entry () returns (ptr);
	declare hcs_$status_	        entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));

	declare 1 entries		        aligned,
		2 (
		copy_entry	        entry (ptr, fixed bin (35)),
	        (get_ml_entry, set_ml_entry)  entry (char (*), char (*), fixed bin (19), fixed bin (35)),
	        (get_rb_entry, set_rb_entry)  entry (char (*), char (*), (*) fixed bin (3), fixed bin (35)),
	        (get_switch_entry, set_switch_entry)
				        entry (char (*), char (*), char (*), bit (1) aligned, fixed bin (35))
	        )			        variable;

	declare fs_util_$suffix_info_for_type entry (char (*), ptr, fixed bin (35));
	declare fs_util_$get_type	        entry (char (*), char (*), char (*), fixed bin (35));
	declare fs_util_$make_entry_for_type  entry (char (*), char (*), entry, fixed bin (35));
						/*	declare fs_util_$copy	        entry (pointer, fixed bin (35));
						*/
	declare sub_err_		        entry options (variable);
	declare pathname_		        entry (char (*), char (*)) returns (char (168));
	declare code		        fixed bin (35);

	declare (addr, fixed, rtrim, string, index, length, pointer, substr)
				        builtin;	/* format: off */

%page; %include status_structures;
%page; %include status_for_backup;
%page; %include suffix_info;
%page; %include copy_options;
%page; %include copy_flags;
%page; %include access_mode_values;
%page; %include delete_options;
%page; %include nd_handler_options;
%page; %include sub_error_info;
%page; %include sub_err_flags;
%page; %include condition_info_header;
%page; %include condition_info;
%page; %include copy_error_info;
%page; %include file_system_operations;
/* format: on */



	entries = Dummy_Procedure;			/* aggregately */
	old_source_dir = "";			/* No source dir change */
	copy_options_ptr = P_copy_options_ptr;
	if copy_options.version ^= COPY_OPTIONS_VERSION_1
	then call copy_error (error_table_$unimplemented_version, "0"b);

	if copy_options.extend & copy_options.update
	then call fatal (0, "contents", "0"b, "The extend and update switches may not both be specified.");

	source_dir = copy_options.source_dir;
	source_name = copy_options.source_name;
	target_dir = copy_options.target_dir;
	target_name = copy_options.target_name;

	raw = copy_options.raw;
	forced_access = "0"b;

	call hcs_$status_minf (source_dir, source_name, 1 /* chase */, source_hcs_type, (0), code);
	if code ^= 0
	then if code ^= error_table_$no_info		/* may not be true for inner-ring entries;
						   fs_util_$get_type will catch this anyway */
	     then call copy_error (code, "0"b);

	call fs_util_$get_type (source_dir, source_name, source_type, code);
	if code = 0 & source_type = FS_OBJECT_TYPE_DIRECTORY
	then code = error_table_$dirseg;
	if code ^= 0
	then call copy_error (code, "0"b);

	call hcs_$status_minf (target_dir, target_name, 0, target_hcs_type, (0), code);
						/* does target already exist? */
	if code = error_table_$noentry
	then /* Has to if updating or extending */
	     if copy_options.extend | copy_options.update
	     then call copy_error (code, "1"b);
	     else ;
	else do;					/* check if source = target */
		if code ^= 0
		then call copy_error (code, "1"b);
		call hcs_$get_uid_file (source_dir, source_name, source_uid, (0));
		call hcs_$get_uid_file (target_dir, target_name, target_uid, (0));
		if source_uid = target_uid
		then if target_hcs_type ^= Link
		     then call copy_error (error_table_$sameseg, "1"b);
		     else do;			/* in case we delete the link, get real source path */
			     call hcs_$get_link_target (copy_options.source_dir, copy_options.source_name,
				source_dir, source_name, code);
			     if code ^= 0
			     then call copy_error (code, "0"b);

			     copy_options.source_dir = source_dir;
			     copy_options.source_name = source_name;
			end;

		if ^copy_options.no_name_dup & ^copy_options.extend & ^copy_options.update
		then do;

/* MF - phx19616 - make sure pathname in source will not change */

			call change_source_dir ();
			string (nd_handler_options) = ""b;
			nd_handler_options.delete_force = copy_options.force;
			nd_handler_options.raw = raw;
			call nd_handler_$switches (copy_options.caller_name, target_dir, target_name,
			     string (nd_handler_options), code);
			if code ^= 0
			then do;
				if code = error_table_$action_not_performed
				then code = error_table_$namedup;
				call copy_error (code, "1"b);
			     end;
		     end;
	     end;					/* name duplication */

	if raw
	then /* we could use a GET_REAL_TYPE, ... */
	     if source_hcs_type = Segment
	     then fs_type = FS_OBJECT_TYPE_SEGMENT;
	     else fs_type = FS_OBJECT_TYPE_MSF;
	else fs_type = source_type;

	call fs_util_$make_entry_for_type (fs_type, FS_COPY, copy_entry, (0));
	call fs_util_$make_entry_for_type (fs_type, FS_GET_RING_BRACKETS, get_rb_entry, (0));
	call fs_util_$make_entry_for_type (fs_type, FS_SET_RING_BRACKETS, set_rb_entry, (0));
	call fs_util_$make_entry_for_type (fs_type, FS_GET_MAX_LENGTH, get_ml_entry, (0));
	call fs_util_$make_entry_for_type (fs_type, FS_SET_MAX_LENGTH, set_ml_entry, (0));
	call fs_util_$make_entry_for_type (fs_type, FS_GET_SWITCH, get_switch_entry, (0));
	call fs_util_$make_entry_for_type (fs_type, FS_SET_SWITCH, set_switch_entry, (0));

	si.version = SUFFIX_INFO_VERSION_1;
	call fs_util_$suffix_info_for_type (fs_type, addr (si), code);
	if code ^= 0
	then call copy_error (code, "0"b);

	if (copy_options.extend & ^si.copy_flags.extend) | (copy_options.update & ^si.copy_flags.update)
	then call copy_error (error_table_$unsupported_operation, "0"b);

/* phx21348 - use original if no source dir change */
	if (old_source_dir = "") /* No source_dir change */
	     then call copy_entry (copy_options_ptr, code);     /* Grab the contents */
	else begin; /* pass modified copy of struc that contains a valid source_dir */
/* MF - phx19616 - need to use a local version of copy_options so we don't
   * change the original passed into us when there is a source_dir change */
	declare 1 co		        aligned like copy_options;
	declare sub_error_		        condition;
	     co = copy_options;
	     co.source_dir = source_dir;     /* source_dir change */

/* phx21348 - If the sub_error_ condition occurs and the error was caused
 * using the modifed copy of the copy_options struc (co) then we patch
 * copy_error_info.copy_options_ptr to point back to the original version.
 * This is necessary because the handler in the 'copy' command uses this
 * value to determine whether to handle the condition. */
               on sub_error_  begin;
		declare 1 ci                          aligned like condition_info;
		declare continue_to_signal_           entry (fixed bin(35));
		declare find_condition_info_	        entry (ptr, ptr, fixed bin(35));
		declare null                          builtin;

		ci.version = condition_info_version_1;
		call find_condition_info_ (null (), addr (ci), (0));
		sub_error_info_ptr = ci.info_ptr;
		if sub_error_info.name = "copy_" &
		   copy_error_info.copy_options_ptr = addr(co) then
		     copy_error_info.copy_options_ptr = P_copy_options_ptr;
	          call continue_to_signal_ ((0));
	     end;	/* of sub_error_ patch handler */

	     call copy_entry (addr (co), code);	      /* Grab the contents */
	end;
	if code ^= 0
	then call copy_error (code, (copy_options.target_err_switch));

/* MF - phx21214 - reorganized the characteristic copying section so that
   * the ACL is last (except for source deletion) and the ring_brackets are
   * second last. */

	if copy_options.max_length
	then if ^si.copy_flags.max_length
	     then call unsup ("max length");
	     else do;
		     call get_ml_entry (source_dir, source_name, max_length, code);
		     if code ^= 0
		     then call error (code, "max length", "0"b, "Getting max length on ^[^s^a^;^a^s^].");
		     else do;
			     call set_ml_entry (target_dir, target_name, max_length, code);

/* MF - phx21056 - ignore action_not_performed error code */

			     if code ^= 0 & code ^= error_table_$action_not_performed
			     then call error (code, "max length", "1"b, "Setting max length on ^[^s^a^;^a^s^].");
			end;
		end;

	if copy_options.copy_switch
	then if ^si.copy_flags.copy_switch
	     then call unsup ("copy switch");
	     else call copy_switch ("copy");

	if copy_options.safety_switch
	then if ^si.copy_flags.safety_switch
	     then call unsup ("safety switch");
	     else call copy_switch ("safety");

	if copy_options.dumper_switches
	then if ^si.copy_flags.dumper_switches
	     then call unsup ("dumper switches");
	     else do;
		     call copy_switch ("complete_volume_dump");
		     call copy_switch ("incremental_volume_dump");
		end;
	if copy_options.entry_bound
	then do;
		if fs_type ^= FS_OBJECT_TYPE_SEGMENT
		then goto NOT_GATE;
		bks.version = status_for_backup_version_2;
		call hcs_$status_for_backup (source_dir, source_name, addr (bks), code);
		if code ^= 0
		then call error (code, "entry bound", "0"b, "Getting entry bound on ^[^s^a^;^a^s^].");
		else if ^bks.entrypt
		then
NOT_GATE:
		     call error (error_table_$unsupported_operation, "entry bound", "0"b,
			"Entry has no entry bound to copy. ^[^s^a^;^a^s^]");
		else do;
			call hcs_$set_entry_bound (target_dir, target_name, fixed (bks.entrypt_bound), code);
			if code ^= 0
			then call error (code, "entry bound", "1"b, "Setting entry bound on ^[^s^a^;^a^s^].");
		     end;
	     end;

	if copy_options.ring_brackets
	then if ^si.copy_flags.ring_brackets
	     then call unsup ("ring brackets");
	     else do;
		     call get_rb_entry (source_dir, source_name, ring_brackets, code);
		     if code ^= 0
		     then call error (code, "ring brackets", "0"b, "Getting ring brackets on ^[^s^a^;^a^s^].");
		     else do;
			     call set_rb_entry (target_dir, target_name, ring_brackets, code);
			     if code ^= 0
			     then call error (code, "ring brackets", "1"b,
				     "Setting ring brackets on ^[^s^a^;^a^s^].");
			end;
		end;

/**** NOTE -- since we don't have copy_XXX_$raw yet, we have to skip these! */

	if ^raw
	then do;
		if copy_options.acl
		then if ^si.copy_flags.acl
		     then call unsup ("ACL");
		     else do;
			     call copy_acl_ (source_dir, source_name, target_dir, target_name, errsw, code);
			     if code ^= 0
			     then call error (code, "ACL", errsw, "Copying ACL ^[from ^a^s^;to ^s^a^].");
			end;

		if copy_options.names
		then if ^si.copy_flags.names
		     then call unsup ("names");
		     else do;
			     same_dir_sw = same_dirp ();
			     if same_dir_sw
			     then do;		/* If in same dir, have to move names */
				     if ^copy_options.delete
				     then call warning (0, "names", "1"b,
					     "Source and target are in the same directory. Names will be moved instead of copied."
					     );
				     call move_names_ (source_dir, source_name, target_dir, target_name,
					copy_options.caller_name, errsw, code);
				end;
			     else call copy_names_ (source_dir, source_name, target_dir, target_name,
				     copy_options.caller_name, errsw, code);

			     if code ^= 0 & code ^= error_table_$namedup & code ^= error_table_$segnamedup
			     then call error (code, "names", errsw, "Copying names ^[from ^a^s^;to ^s^a^].");
			end;

	     end;

	if copy_options.delete
	then do;
		string (delete_options) = ""b;
		delete_options.segment, delete_options.link, delete_options.chase, delete_options.question = "1"b;
		delete_options.force = copy_options.force;
		delete_options.raw = raw;
		call delete_$path (source_dir, source_name, string (delete_options), copy_options.caller_name, code);
		if code ^= 0
		then if code ^= error_table_$action_not_performed
		     then call error (code, "delete", "0"b, "Deleting ^[^s^a^;^a^s^].");

		if copy_options.names & same_dir_sw
		then do;
			if raw
			then call hcs_$chname_file (target_dir, target_name, "", source_name, code);
			else call fs_util_$chname_file (target_dir, target_name, "", source_name, code);
			if code ^= 0
			then call error (code, "names", "1"b, "Copying names to ^[^s^a^;^a^s^].");
		     end;
	     end;

MAIN_RETURN:
	return;
%page;
same_dirp:
     proc returns (bit (1) aligned);

	declare dir_dir		        char (168),
	        dir_ent		        char (32);

	if source_dir = target_dir
	then return ("1"b);

	call expand_pathname_ (source_dir, dir_dir, dir_ent, (0));
	call hcs_$get_uid_file (dir_dir, dir_ent, source_uid, (0));

	call expand_pathname_ (target_dir, dir_dir, dir_ent, (0));
	call hcs_$get_uid_file (dir_dir, dir_ent, target_uid, (0));

	return (source_uid = target_uid);
     end same_dirp;


copy_switch:
     proc (switch_name);

	declare switch_name		        char (*),
	        value		        bit (1) aligned;

	call get_switch_entry (source_dir, source_name, switch_name, value, code);
	if code ^= 0
	then call error (code, rtrim (switch_name) || "switch", "0"b, "Getting switch from ^[^s^a^;^a^s^].");
	else do;
		call set_switch_entry (target_dir, target_name, switch_name, value, code);
		if code ^= 0
		then call error (code, rtrim (switch_name) || "switch", "1"b, "Setting switch on ^[^s^a^;^a^s^].");
	     end;

	return;
     end copy_switch;

change_source_dir:
     proc ();

/* FUNCTION

   phx19616 - Determine whether or not there will be a conflict in names
   between a target pathname and some component of the source directory.  If
   there is, then the source dir will be changed so that a new name is inserted
   where the conflict occurs.  If there are no other names to use, then it will
   merely return to let nd_handler and the user resolve what to do.
*/

/* MISC VARIABLES */
	declare short_target_path	        char (168) var;
	declare short_target_dir	        char (168) var;
	declare short_source_dir	        char (168) var;
	declare target_type		        char (32);
	declare done		        bit (1);
	declare i			        fixed bin;
	declare 1 sb		        aligned like status_branch;

/* INIT */
	short_target_dir = rtrim (get_shortest_path_ (target_dir));
	short_source_dir = rtrim (get_shortest_path_ (source_dir));
	short_target_path = rtrim (pathname_ (rtrim (short_target_dir), target_name));

/* MAIN */

/* Find out what type of file we are targetting to */

	call fs_util_$get_type (target_dir, target_name, target_type, code);
	if (code ^= 0) then do;
	     call error (code, "copy_", "1"b, "Getting file system type of ^[^s^a^;^a^s^]");
	     return;
	end;

/* A target DIRECTORY contained in the source DIRECTORY is potential */

	if (target_type = FS_OBJECT_TYPE_DIRECTORY)
	     & (index (short_source_dir, short_target_path) > 0)
	then do;
		status_ptr = addr (sb);
		status_area_ptr = get_system_free_area_ ();

		call hcs_$status_ (target_dir, target_name, 0, status_ptr, status_area_ptr, code);
		if (code ^= 0)
		then call error (code, "status", "0"b, "Getting status on ^[^s^a^;^a^s^]");

		done = "0"b;			/* Is there really a contention? */
		do i = 1 to status_branch.short.nnames;
		     if status_entry_names (i) = target_name
		     then do;			/* Found, so get out of the loop */
			     done = "1"b;
			     i = status_branch.short.nnames;
			end;
		end;
		if ^done
		then do;				/* No, then get out */
			free status_entry_names;
			return;
		     end;

		i = 1;				/* Look for another name to use */
		done = "0"b;
		do while (^done);
		     if (i > status_branch.short.nnames)
		     then /* None at all */
			done = "1"b;
		     else if (status_entry_names (i) ^= target_name)
		     then /* Found */
			done = "1"b;
		     else /* Keep trying */
			i = i + 1;
		end;

		if (i > status_branch.short.nnames)
		then do;				/* Oh-oh, can't continue */
			free status_entry_names;
			call fatal (error_table_$nonamerr, "copy_", "1"b,
			     "^s^s^a. Source will be deleted before copy completed.");
			return;
		     end;

/* Rearrange the names so that there will be no contention */

		old_source_dir = source_dir;
		source_dir = short_target_dir || ">" || rtrim (status_entry_names (i));
		if length (short_target_path) < length (short_source_dir)
		then source_dir = rtrim (source_dir) || substr (short_source_dir, length (short_target_path) + 1);

		free status_entry_names;
	     end;

     end change_source_dir;



copy_error:
     proc (status, switch);

	declare status		        fixed bin (35),
	        switch		        bit (1) aligned;

	cei.copy_options_ptr = copy_options_ptr;
	cei.operation = "contents";
	cei.target_err_switch = switch;

	do while ("1"b);
	     call sub_err_ (status, "copy_", ACTION_CANT_RESTART, addr (cei), (0), "^[^a^s^;^s^a^]", switch,
		pathname_ (target_dir, target_name), pathname_ (source_dir, source_name));

	end;

     end copy_error;

unsup:
     proc (op);

	declare op		        char (32);

	cei.copy_options_ptr = copy_options_ptr;
	cei.operation = op;
	cei.target_err_switch = "0"b;

	call sub_err_ (error_table_$unsupported_operation, "copy_", ACTION_CAN_RESTART, addr (cei), (0),
	     "The ^a object type does not support the copying of ^a. ^a", si.type_name, op,
	     pathname_ (source_dir, source_name));

	return;
     end unsup;


error:
     proc (status, op, switch, message);

	declare flags		        bit (36) aligned,
	        status		        fixed bin (35),
	        op		        char (*),
	        switch		        bit (1) aligned,
	        message		        char (*);

	flags = ACTION_CAN_RESTART;
	goto COMMON;

fatal:
     entry (status, op, switch, message);

	flags = ACTION_CANT_RESTART;
	goto COMMON;

warning:
     entry (status, op, switch, message);

	flags = ACTION_DEFAULT_RESTART;
COMMON:
	cei.copy_options_ptr = copy_options_ptr;
	cei.operation = op;
	cei.target_err_switch = switch;

	call sub_err_ (status, "copy_", flags, addr (cei), (0), message, switch, pathname_ (source_dir, source_name),
	     pathname_ (target_dir, target_name));

	return;

     end error;

Dummy_Procedure:
     procedure options (non_quick);

	declare cu_$arg_count	        entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	declare last_arg_x		        fixed bin;
	declare code_ptr		        pointer;
	declare code		        fixed bin (35) based (code_ptr);
	declare error_table_$no_operation     fixed bin (35) ext static;

	call cu_$arg_count (last_arg_x, (0));
	call cu_$arg_ptr (last_arg_x, code_ptr, (0), (0));
	code = error_table_$no_operation;
	return;
     end Dummy_Procedure;

     end copy_;
