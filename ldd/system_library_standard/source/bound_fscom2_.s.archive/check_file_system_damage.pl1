/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-05,Spitzer), approve(85-09-05,MCR7269),
     audit(85-09-18,Blair), install(85-12-16,MR12.0-1001):
     1) Fix CA detection code.  2) Add -pn CA.
  2) change(88-08-25,TLNguyen), approve(88-08-25,MCR7962),
     audit(88-09-14,Parisek), install(88-09-15,MR12.2-1110):
     Remove the check_superior_dirs internal procedure because users don't
     generally have a status access mode on their superior directories and
     this procedure goes beyond what this program is documented or
     supposed to do.
                                                   END HISTORY COMMENTS */

check_file_system_damage:
cfsd:
     proc;

/* ***********************************************************************
   *   Command for finding damaged segments and connection failures.     *
   *   This program is useful after a system crash to check the state    *
   *   of the libraries and system control directories                   *
   *                                                                     *
   *   Coded July 1980 by Jim Homan, with thanks to Warren Johnson for   *
   *   his check_dsw command.                                            *
   *   Bug fixes installed August 1980 by Warren Johnson.                *
   *********************************************************************** */

/* Modified 3/8/84 by C Spitzer. modify for installation per MCRB amendments */
/* Modified 1/6/85 by Keith Loepere to understand "new" error code from hcs_$star_. */

/* ****************************************************************************
   *                                                                          *
   * Usage:                                                                   *
   *                                                                          *
   * check_file_system_damage path {-control_args}                            *
   *                                                                          *
   * path          is a pathname specifying what is to be checked.  It        *
   *               may be a starname, and -wd is accepted.                    *
   *                                                                          *
   * control_args  may be any of the following:                               *
   *                                                                          *
   * -pathname,    specifies that the next argument is to be used as a        *
   * -pn	         pathname rather than as a control argument.	        *
   *							        *
   * -subtree,     if this control argument is specified, then path must      *
   *    -subt      be a directory.  All segments in the specified directory   *
   *               and all directories below the specified directory are      *
   *               checked.                                                   *
   *                                                                          *
   * -multisegment_file,                                                      *
   * -msf          if this control argument is specified, then the components *
   *               of MSFs are checked.  This is the default.	        *
   *							        *
   * -no_multisegment_file,					        *
   * -no_msf,      turns off checking of MSF.			        *
   *                                                                          *
   * -brief, bf    if this control argument is specified, then error          *
   *               messages about incorrect access to directories and no star *
   *               name matches are suppressed.                               *
   *                                                                          *
   * -call STR     STR is a command to be executed for each segment which     *
   *               is damaged.  For each damaged segment, the command         *
   *               executed is "STR path damaged".  For each connection       *
   *               failure, the executed is "STR path connection_failure".    *
   *               The default action, when -call is not specified, is to     *
   *               print out an error message for each damaged segment and    *
   *               each connection failure.                                   *
   **************************************************************************** */
%page;
/* external entries */

dcl  active_fnc_err_ entry options (variable);
dcl  check_star_name_$entry entry (char (*), fixed (35));
dcl  com_err_ entry options (variable);
dcl  cu_$af_return_arg entry (fixed, ptr, fixed (21), fixed (35));
dcl  cu_$arg_count entry returns (fixed);
dcl  cu_$arg_ptr entry (fixed, ptr, fixed, fixed (35));
dcl  cu_$cp entry (ptr, fixed, fixed (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  get_wdir_ entry () returns (char (168));
dcl  hcs_$star_ entry (char (*), char (*), fixed (2), ptr, fixed, ptr, ptr, fixed (35));
dcl  hcs_$status_long entry (char (*), char (*), fixed (1), ptr, ptr, fixed (35));
dcl  ioa_ entry options (variable);
dcl  pathname_ entry (char (*), char (*)) returns (char (168));

/* external static */

dcl  error_table_$bad_arg fixed (35) bin external static;
dcl  error_table_$badopt fixed (35) bin external static;
dcl  error_table_$inconsistent fixed (35) bin external static;
dcl  error_table_$logical_volume_not_defined fixed (35) bin external static;
dcl  error_table_$moderr fixed (35) bin external static;
dcl  error_table_$noarg fixed (35) bin external static;
dcl  error_table_$nomatch fixed (35) bin external static;
dcl  error_table_$too_many_args fixed (35) bin external static;
dcl  error_table_$vtoce_connection_fail fixed (35) bin external static;

/* internal static */

dcl  ME char (32) int static options (constant) init ("check_file_system_damage");

/* automatic */

dcl  area_ptr ptr;					/* pointer to area used for hcs_$star allocations */
dcl  argN fixed;					/* number of argument being processed */
dcl  arglen fixed;					/* length of any command argument */
dcl  argptr ptr;					/* pointer to any command argument */
dcl  brief_switch bit (1) aligned;			/* on if -brief specified */
dcl  call_switch bit (1) aligned;			/* on if -call specified */
dcl  code fixed (35);				/* error code returned by Multics subroutines */
dcl  command_line_length fixed init (0);		/* length of command line argument */
dcl  command_line_ptr ptr;				/* pointer to command line argument */
dcl  dname char (168);				/* directory portion of pathname given as argument */
dcl  ename char (32);				/* entryname portion of pathname given as argument */
dcl  max_depth fixed bin;				/* number of dirs allowed to go down. default is 99999 */
dcl  msf_switch bit (1) aligned;			/* on if -msf specified */
dcl  nargs fixed;					/* number of arguments given to the command */
dcl  star_switch bit (1) aligned;			/* on if pathname arg is a starname */
dcl  subroutine bit (1) aligned;			/* on if entry thru subroutine interface */
dcl  subtree_switch bit (1) aligned;			/* on if -subtree specified */

/* based */

dcl  arg char (arglen) based (argptr);			/* any command argument */
dcl  command_line char (command_line_length) based (command_line_ptr);
						/* argument after -call */

/* conditions */

dcl  cleanup condition;

/* builtins */

dcl  (addr, index, length, null, rtrim, substr, sum) builtin;
%page;
%include branch_status;
%page;
	star_switch, subtree_switch, brief_switch, call_switch, subroutine = "0"b;
	msf_switch = "1"b;
	max_depth = 99999;

	call cant_be_active_function ();
	call check_number_of_args (1, 0, "check_file_system_damage path {-ctl_args}", nargs);
	dname = "";
	argN = 1;

	do while (argN <= nargs);
	     call cu_$arg_ptr (argN, argptr, arglen, code);
	     if /* case */ code ^= 0
	     then do;
		call com_err_ (code, ME, "^/Error getting argument ^d.", argN);
		return;
		end;
	     else if index (arg, "-") ^= 1
		then if dname = ""
		     then call get_starname_arg (arg, dname, ename, star_switch);
		     else do;
MULTIPLE_PATHS:		call com_err_ (0, ME, "Multiple pathnames given. ^a", arg);
			goto EXIT;
			end;
	     else if arg = "-pn" | arg = "-pathname"
		then if dname = ""
		     then do;
			argN = argN + 1;
			call get_required_arg (argN, "After -pathname.", argptr, arglen);
			call expand_pathname_ (arg, dname, ename, code);
			if code ^= 0
			then do;
			     call com_err_ (code, ME, "^a", arg);
			     return;
			     end;
			end;
		     else goto MULTIPLE_PATHS;
	     else if arg = "-wd" | arg = "-working_dir"
		then if dname = ""
		     then call expand_pathname_ (get_wdir_ (), dname, ename, (0));
		     else goto MULTIPLE_PATHS;
	     else if arg = "-subtree" | arg = "-subt"
		then subtree_switch = "1"b;
		else if arg = "-brief" | arg = "-bf"
		     then brief_switch = "1"b;
		     else if arg = "-msf" | arg = "-multisegment_file"
			then msf_switch = "1"b;
			else if arg = "-no_msf" | arg = "-no_multisegment_file"
			     then msf_switch = "0"b;
			     else if arg = "-dh" | arg = "-depth"
				then do;
				     argN = argN + 1;
				     call get_required_arg (argN, "After -depth.", argptr, arglen);
				     max_depth = cv_dec_check_ (arg, code);
				     if code ^= 0
				     then do;
					call com_err_ (0, ME, "Non-numeric after -depth. ^a", arg);
					return;
					end;
				     subtree_switch = "1"b;
				     end;
				else if arg = "-call"
				     then do;
					call_switch = "1"b;
					argN = argN + 1;
					call get_required_arg (argN, "After -call.", command_line_ptr,
					     command_line_length);
					end;
				     else do;	/* Error, unrecognized argument */
					if arglen > 0
					then if substr (arg, 1, 1) = "-"
					     then call com_err_ (error_table_$badopt, ME, arg);
					     else call com_err_ (error_table_$bad_arg, ME, arg);
					else ;
					return;
					end;
	     argN = argN + 1;
	     end;

	if dname = "" 
	then do;
	     call com_err_ (error_table_$noarg, ME, "^/Usage: ^a path {-control_args}", ME);
	     goto EXIT;
	     end;

	if subtree_switch & star_switch
	then do;
	     call com_err_ (error_table_$inconsistent, ME,
		"Pathname may not be a starname if -^[subtree^;depth^] option is used. ^a", (max_depth = 99999),
		pathname_ (dname, ename));
	     go to EXIT;
	     end;
	else ;

	area_ptr = get_system_free_area_ ();

	if subtree_switch
	then call survey_the_damage (pathname_ (dname, ename), "**", 1);
	else if star_switch
	     then call survey_the_damage (dname, ename, 1);
	     else call check_entry (dname, ename, 1);

EXIT:						/* all internal procs may go to here to after reporting errors */
	return;
%page;
check_file_system_damage_:
     entry (Pdir, Pname, Pcode) returns (bit (36) aligned);

dcl  Pdir char (*) parameter;				/* directory name (input) */
dcl  Pname char (*) parameter;			/* entry name (input)*/
dcl  Pcode fixed bin (35) parameter;			/* error code (output) */

dcl  return_bits bit (36) aligned;
dcl  1 return_bits_based aligned based (addr (return_bits)),
       2 damage bit (1) unaligned,			/* ON = any damage */
       2 damaged_switch bit (1) unaligned,		/* ON = damaged entry */
       2 connection_failure bit (1) unaligned,		/* ON = connectin failure on entry */
       2 unused bit (33) unaligned;			/* future expansion */

	return_bits = "0"b;
	Pcode, code = 0;

	subroutine = "1"b;
	call_switch, msf_switch = "0"b;
	max_depth = 0;

	command_line_length = 0;
	call check_entry (Pdir, Pname, 0);
	if code ^= 0
	then do;
	     Pcode = code;
	     return_bits = "0"b;
	     end;
	else if return_bits ^= "0"b
	     then return_bits_based.damage = "1"b;

	return (return_bits);
%page;
/* **********************************************************************
   *  Internal procedure to check all entries in a directory that match *
   *  a starname.                                                       *
   ********************************************************************** */

survey_the_damage:
     proc (dir, et, depth) recursive;

dcl  dir char (*) parameter;				/* Input-directory name */
dcl  et char (*) parameter;				/* Input-starname */
dcl  depth fixed bin parameter;			/* Input-number of dirs downwards we are */

dcl  ec fixed (35);					/* error code */
dcl  i fixed;					/* loop index */
%page;
%include star_structures;
%page;
	if depth > max_depth
	then return;

	star_entry_ptr, star_names_ptr = null ();

	on cleanup /* CLEANUP HANDLER */
	     begin;
		if star_names_ptr ^= null ()
		then free star_names;
		else ;
		if star_entry_ptr ^= null ()
		then free star_entries;
		else ;
		end;

	call hcs_$star_ (dir, et, star_BRANCHES_ONLY, area_ptr, star_entry_count, star_entry_ptr, star_names_ptr, ec);

	if ec ^= 0
	then if (ec = error_table_$moderr | ec = error_table_$nomatch
		| ec = error_table_$logical_volume_not_defined) & brief_switch
	     then ;
	     else call com_err_ (ec, ME, "^a", pathname_ (dir, et));
	else do i = 1 to star_entry_count by 1;
		call check_entry (dir, star_names (star_entries (i).nindex), depth);
		end;
CLEANUP:
	if star_names_ptr ^= null ()
	then free star_names;
	else ;
	if star_entry_ptr ^= null ()
	then free star_entries;
	else ;
	return;

     end survey_the_damage;
%page;
/* **********************************************************************
   *   Internal procedure to check an individual branch for damage.     *
   *   This procedure recalls survey_damage as needed to handle         *
   *   subtrees and MSFs.                                               *
   ********************************************************************** */

check_entry:
     proc (d, e, depth);

dcl  d char (*) parameter;				/* Input-directory portion of pathname */
dcl  e char (*) parameter;				/* Input-entryname */
dcl  depth fixed bin parameter;			/* Input-number of dirs downward we are */

dcl  ec fixed (35);					/* error code */
dcl  command char (command_line_length + 188);		/* long enough for command line plus pathname plus */
						/* "connection_failure" plus spaces */

	call hcs_$status_long (d, e, 0, addr (branch_status), null (), ec);
	if ec = error_table_$vtoce_connection_fail
	then if call_switch
	     then do;
		command = command_line || " " || rtrim (pathname_ (d, e)) || " connection_failure";
		call cu_$cp (addr (command), length (command), (0));
		end;
	     else if subroutine
		then return_bits_based.connection_failure = "1"b;
		else call ioa_ ("Connection failure: ^a", pathname_ (d, e));
	else if ec ^= 0
	     then if subroutine
		then do;
		     code = ec;
		     return;
		     end;
		else call com_err_ (ec, ME, "^a", pathname_ (d, e));
	     else if branch_status.damaged_switch
		then if call_switch
		     then do;

			command = command_line || " " || rtrim (pathname_ (d, e)) || " damaged";
			call cu_$cp (addr (command), length (command), (0));
			end;
		     else if subroutine
			then return_bits_based.damaged_switch = "1"b;
			else call ioa_ ("Damage switch on: ^a", pathname_ (d, e));
		else if branch_status.type = directory_type
		     then if (msf_switch & branch_status.bit_count ^= "0"b)
			     | (branch_status.bit_count = "0"b & subtree_switch)
			then if depth < max_depth
			     then call survey_the_damage (pathname_ (d, e), "**", depth + 1);
			     else ;		/* would make it too far down */
			else ;
		     else ;			/* not a directory */

	return;

     end check_entry;
%page;
/* ***********************************************************************
   *  Internal procedure to check to see if command was called as active *
   *  function, and to report an error if it was.                        *
   *********************************************************************** */

cant_be_active_function:
     proc;

dcl  ec fixed (35);					/* error code */

	call cu_$af_return_arg ((0), null (), (0), ec);	/* call with dummy args, we just want the error code */
	if ec = 0
	then do;
	     call active_fnc_err_ (0, ME, "This command cannot be called as an active function.");
	     go to EXIT;
	     end;
	else return;

     end cant_be_active_function;
%page;
/* **********************************************************************
   *  Internal procedure to determine the number of arguments passed to *
   *  the command and ensure that the minimum and maximum number of     *
   *  arguments for the command are not abused.                         *
   ********************************************************************** */

check_number_of_args:
     proc (min_args, max_args, usage, nargs);

/* parameters */

dcl  min_args fixed parameter;			/* Input-Minimum number of arguments needed by this command */
dcl  max_args fixed parameter;			/* Input-Maximum number of arguments acceptable
						   to this command.  (0 means no maximum) */
dcl  usage char (*) parameter;			/* Input-Usage description for this command */
dcl  nargs fixed parameter;				/* Output-Actual number of arguments given to command */

	nargs = cu_$arg_count ();

	if nargs < min_args				/* not enough arguments, tell user what to do */
	then call com_err_ (error_table_$noarg, ME, "^/^-Usage: ^a", usage);
	else if nargs > max_args & max_args ^= 0	/* too many arguments, tell user what to do */
	     then call com_err_ (error_table_$too_many_args, ME, "^/^-Usage: ^a", usage);
	     else return;
	go to EXIT;

     end check_number_of_args;
%page;
/* **********************************************************************
   *  This internal procedure is used to get pointer and length for a   *
   *  required argument.                                                *
   ********************************************************************** */

get_required_arg:
     proc (n, error_comment, ap, al);

dcl  n fixed parameter;				/* Input-number of the argument we want to get */
dcl  error_comment char (*) parameter;			/* Input-comment to print with any error messages */
dcl  ap ptr parameter;				/* Output-pointer to argument */
dcl  al fixed parameter;				/* Output-length of argument */

dcl  arg char (al) based (ap);			/* the argument itself */
dcl  ec fixed (35);					/* error code */

	call cu_$arg_ptr (n, ap, al, ec);
	if ec = 0
	then if al > 0				/* check to make sure it's not another control arg */
	     then if substr (arg, 1, 1) = "-"
		then do;
		     ec = error_table_$noarg;
		     call com_err_ (ec, ME, error_comment);
		     go to EXIT;
		     end;
		else ;
	     else ;
	else do;
	     call com_err_ (ec, ME, error_comment);
	     go to EXIT;
	     end;
	return;

     end get_required_arg;
%page;
/* **********************************************************************
   *  Internal procedure to get a pathname,  which may be a starname.   *
   *  -wd or -working_dir is accepted as meaning the working directory. *
   ********************************************************************** */

get_starname_arg:
     proc (arg, dir, et, is_star);

dcl  arg char (*) parameter;				/* Input-path of the directory to usage (may be a starname) */
dcl  dir char (*) parameter;				/* Output-directory portion of pathname */
dcl  et char (*) parameter;				/* Output-entryname portion (starname) of pathname */
dcl  is_star bit (1) aligned parameter;			/* Output-"1"b if   entryname is a starname */

dcl  ec fixed (35);					/* error code */

	call expand_pathname_ (arg, dir, et, ec);
	if ec ^= 0
	then do;
	     call com_err_ (ec, ME, "^a", arg);
	     go to EXIT;
	     end;

	if dir = ">" & et = ""			/* special case the ROOT */
	then is_star = "0"b;
	else do;
	     call check_star_name_$entry (et, ec);
	     if ec > 2
	     then do;				/* 1 and 2 have special meanings and do not indicate errors */
		call com_err_ (ec, ME, "^a", arg);
		go to EXIT;
		end;
	     else ;
	     if ec = 0
	     then is_star = "0"b;
	     else is_star = "1"b;
	     end;
	return;

     end get_starname_arg;

     end check_file_system_damage;

