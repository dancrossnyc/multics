/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


adjust_bit_count_: proc (dn, en, ascii, a_bit_count, a_code);

/* Subroutine that does adjusting on individual files.


   Prepared for installation by C Garman, July 1971

   */

/* re-modified to work on MSF's by Steve Herbst 12/15/74 */
/* fixed by M. Asherman 9/2/76 to return a bit_count for msf's */
/* Modified 06/08/82 by Jim Lippard to not require aligned dname
   and ename, and to compile without error */
/* Modified 08/02/83 by Jim Lippard to properly handle MSFs */
/* Modified 04/09/84 by Jim Lippard to return proper error code on MSF
   to which caller has no access */

/* DECLARATIONS */
dcl sum_prev_bcs fixed(35);				/* sum of bit counts of MSF components */


/* fixed bin */

dcl (current_block,
     i,
     j,
     k init (0),
     components,
     ldn
     ) fixed bin (17);

dcl  block_offset fixed bin (18);

dcl a_bit_count fixed(35);
dcl (bc,bit_count) fixed(24);

dcl (a_code,
     code,
     error_table_$dirseg ext,
     error_table_$noentry ext,
     error_table_$segknown ext) fixed bin (35);


/* bit */

dcl  ascii bit (1) aligned;
dcl  msf bit (1) aligned;


/* character */

dcl (en, enc) char (32);				/* entry name */

dcl (dn, dnc) char (168);				/* directory name */


/* pointer */

dcl (blockp,
     compp init (null),
     eptr,
     fcbp init (null),
     segp,
     wordp) ptr;


/* builtin */

dcl (addr, addrel, fixed, max, null) builtin;


/* structures and based declarations */

declare 1 br aligned,				/* status branch */
        (2 (type bit (2), nnames bit (16), nrp bit (18)),
        2 dtm bit (36),
        2 dtu bit (36),
        2 (mode bit (5), pad1 bit (13), records bit (18)),
        2 dtd bit (36),
        2 dtem bit (36),
        2 acct bit (36),
        2 (curlen bit (12), bitcnt bit (24)),
        2 (did bit (4), imdid bit (4),
         copysw bit (1), pad3 bit (9),
         rbs (0:2) bit (6)),
        2 uid bit (36)) unaligned;

dcl  word_mask (0:1023) fixed bin based (blockp);

declare 1 char_mask aligned based (wordp),
        2 char (1:4) bit (9) unaligned;


/* external entries */

dcl  hcs_$fs_get_path_name  entry (ptr, char(*), fixed bin, char(*), fixed bin(35));
dcl  hcs_$initiate  entry (char(*), char(*), char(*), fixed bin(1), fixed bin(2), ptr, fixed bin(35));
dcl  hcs_$set_bc entry (char(*), char(*), fixed bin(24), fixed bin(35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin(24), fixed bin(35));
dcl  hcs_$status_long entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin(35));
dcl  msf_manager_$adjust entry (ptr, fixed bin, fixed bin(24), bit(3), fixed bin(35));
dcl  msf_manager_$close entry (ptr);
dcl  msf_manager_$get_ptr entry (ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35));
dcl  msf_manager_$open entry (char(*), char(*), ptr, fixed bin(35));
/* 
   adjust_bit_count_:  proc (dn, en, ascii, a_bit_count, a_code); */

	bit_count = -1;
	msf = "0"b;
	sum_prev_bcs=0;

	eptr = addr (br);
	call hcs_$status_long (dn, en, 1, eptr, null, code); /* Get length and type of segment */
	if code ^= 0
	then go to FIN;

	if br.type = "10"b then 
	     if br.bitcnt = "0"b then do;
		code = error_table_$dirseg;
		go to FIN;
	     end;
	     else do;
		msf = "1"b;
		call msf_manager_$open (dn, en, fcbp, code);
		if code ^= 0 then go to FIN;
		components = -1;
		bc=0;

  msf_loop:	components = components + 1;
		sum_prev_bcs=sum_prev_bcs+bc;
		segp = compp;
		call msf_manager_$get_ptr (fcbp, components, "0"b, compp, bc, code);
		if code = 0 | code = error_table_$segknown then go to msf_loop;
		else if code ^= error_table_$noentry then do;
		     sum_prev_bcs = 0;
		     go to FIN;
		end;
		call hcs_$fs_get_path_name (segp, dnc, ldn, enc, code);
		if code ^= 0 then go to FIN;
		call hcs_$status_long (dnc, enc, 1, eptr, null, code);
		if code ^= 0 then go to FIN;
	     end;

	else call hcs_$initiate (dn, en, "", 0, 1, segp, code); /* Get pointer to segment */

	if segp = null
	then go to FIN;				/* this is the only non-zero code that worries us */

  last:	code = 0;

	current_block = fixed (br.curlen, 12) -1;	/* get current block number */
	if current_block >= 0			/* If non-zero current length */
	then do i = current_block to 0 by -1 while (bit_count < 0);

	     block_offset = i * 1024;			/* Compute start of current block */
	     blockp = addrel (segp, block_offset);

	     do j = 1023 by -1 to 0 while
		(blockp -> word_mask (j) = 0);	/* Search current block for non-zero word */
	     end;

	     if j >= 0				/* (Should always be, but ...) */
	     then do;

		if ascii				/* If character adjustment wanted, test last word */
		then do;

		     wordp = addr (blockp -> word_mask (j)); /* Get pointer to last word */

		     do k = 4 by -1 to 1 while (wordp -> char_mask.char (k) = (9)"0"b);
						/* Now test characters */
		     end;

		end;

		else				/* no character adjustment wanted */
		j = j + 1;			/* include full last non-zero word */

	     end;

	     if j >= 0				/* a non-zero length block was found */
	     then bit_count = (((block_offset + j) * 4) + k) * 9; /* inner expression is multiplied by 36 */

	end;

	bit_count = max (bit_count, 0);

	if msf then do;
	     call msf_manager_$adjust (fcbp, components-1, bit_count, "110"b, code);
	     if code ^= 0 then go to FIN;
	     if components>1 then call hcs_$set_bc (dn, en, (components), code);
	     if code ^= 0 then go to FIN;
	end;
	call hcs_$set_bc_seg(segp,bit_count,code);
	if code ^= 0 then go to FIN;

	if msf then call msf_manager_$close (fcbp);
	else call hcs_$terminate_noname (segp, (0));

FIN:	
	a_bit_count = bit_count+sum_prev_bcs;

	a_code = code;				/* Return the last error code */

     end adjust_bit_count_;
