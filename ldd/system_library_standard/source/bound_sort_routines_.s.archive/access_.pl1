/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-07-05,TLNguyen), approve(88-06-13,MCR7919),
     audit(88-07-26,RBarstad), install(88-08-08,MR12.2-1078):
     fix bug which fails to set the desired access mode on MSFs.
                                                   END HISTORY COMMENTS */


access_:	proc;
	return;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name: access_								*/
	/*									*/
	/*      This subroutine can be called by subsystems to temporarily set the ACL of a	*/
	/* particular segment, directory or MSF, and then to restore the ACL to its original	*/
	/* state.  Only ACLs are affected.  AIM classification and ring brackets are not changed. */
	/*									*/
	/* Status:								*/
	/* 0) Created by:  G. C. Dixon, May, 1982					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



    dcl	dir			char(*),		/* dir part of path whose access sb set. (In)	*/
	ent			char(*),		/* entry part of path whose access sb set. (In)	*/
	type			fixed bin(2),	/* type of entry:	(In)			*/
						/*   1 = SEGMENT				*/
						/*   2 = DIRECTORY				*/
						/*   3 = MSF or SEGMENT			*/
	mode			bit(*),		/* mode to be set. Must be a file mode or a 	*/
						/*   directory mode, depending upon type.  (In)	*/
	Paccess			ptr,		/* ptr to access_$reset info. (Out)		*/
	code			fixed bin(35);	/* status code from setting/reseting (Out)	*/

    dcl	Pfcb			ptr,
	1 acle			aligned,
	  2 access_name		char(32),
	  2 mode			bit(36),
	  2 xmode			bit(36),
	  2 code			fixed bin(35),
	1 delete_acle		aligned,
	  2 access_name		char(32),
	  2 code			fixed bin(35),
	1 dir_acle		aligned,
	  2 access_name		char(32),
	  2 mode			bit(36),
	  2 code			fixed bin(35);

    dcl	1 access			aligned based (Paccess),
	  2 version		char(8) init("access_1"),
	  2 set			fixed bin init(0),	/* has access been set:			*/
						/*   0 = NO				*/
						/*   1 = ACL_ADDED				*/
						/*   2 = ACL_REPLACED			*/
	  2 type			fixed bin(2),	/* entry type (SEGMENT, DIRECTORY or MSF)	*/
	  2 old_mode		bit(36),		/* mode to be reset when ACL_REPLACED.		*/
	  2 dir			char(168) unal,	/* dir/ent of path whose access was changed.	*/
	  2 ent			char(32) unal,
	area			area based(Parea);

    dcl  (addr, null)		builtin;

    dcl	cleanup			condition;

    dcl	get_group_id_		entry() returns(char(32)),
	get_system_free_area_	entry() returns(ptr),
	hcs_$add_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$add_dir_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$delete_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$delete_dir_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$list_acl		entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35)),
	hcs_$list_dir_acl		entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35)),
	msf_manager_$acl_add	entry (ptr, ptr, fixed bin, fixed bin(35)),
	msf_manager_$acl_delete	entry (ptr, ptr, fixed bin, fixed bin(35)),
	msf_manager_$acl_list	entry (ptr, ptr, ptr, ptr, fixed bin, fixed bin(35)),
	msf_manager_$close		entry (ptr),
	msf_manager_$open		entry (char(*), char(*), ptr, fixed bin(35));

    dcl   Parea			ptr int static init(null),
         (NO			init(0),		/* access.set values			*/
	ACL_ADDED			init(1),
	ACL_REPLACED		init(2),
	SEGMENT			init(1),		/* access.type values			*/
	MSF			init(3)) fixed bin int static options(constant),
	access_name		char(32) int static init(""),
         (error_table_$out_of_bounds,
	error_table_$unimplemented_version,
	error_table_$user_not_found)	fixed bin(35) ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


set_temporarily:
	entry (dir, ent, type, mode, Paccess, code);

	Paccess = null;
	if Parea = null then do;
	   Parea = get_system_free_area_();
	   access_name = get_group_id_();
	   end;

          if type < SEGMENT | type > MSF then do;
	   code = error_table_$out_of_bounds;
	   go to EXIT;
	   end;

	allocate access in (area);
	access.dir = dir;
	access.ent = ent;
	access.type = type;
	go to SET(access.type);

SET(1):	acle.access_name = access_name;		/* Handle segment ACL.			*/
	acle.mode = ""b;
	acle.xmode = ""b;
	call hcs_$list_acl (dir, ent, null, null, addr(acle), 1, code);
	if code ^= 0 then go to EXIT;
	if acle.code = error_table_$user_not_found then do;
	   access.old_mode = ""b;
	   access.set = ACL_ADDED;
	   end;
	else if acle.mode = mode then go to EXIT;
	else do;
	   access.old_mode = acle.mode;
	   access.set = ACL_REPLACED;
	   end;
	acle.mode = mode;
	call hcs_$add_acl_entries (dir, ent, addr(acle), 1, code);
	if code ^= 0 then go to EXIT;
	return;

SET(2):	dir_acle.access_name = access_name;
	dir_acle.mode = ""b;
	call hcs_$list_dir_acl (dir, ent, null, null, addr(dir_acle), 1, code);
	if code ^= 0 then  go to EXIT;
	if dir_acle.code = error_table_$user_not_found then do;
	   access.old_mode = ""b;
	   access.set = ACL_ADDED;
	   end;
	else if dir_acle.mode = mode then go to EXIT;
	else do;
	   access.old_mode = dir_acle.mode;
	   access.set = ACL_REPLACED;
	   end;
	dir_acle.mode = mode;
	call hcs_$add_dir_acl_entries (dir, ent, addr(dir_acle), 1, code);
	if code ^= 0 then go to EXIT;
	return;

SET(3):	Pfcb = null;
	on cleanup begin;
	   call msf_manager_$close (Pfcb);
	   end;
	call msf_manager_$open (dir, ent, Pfcb, code);
	if code ^= 0 then go to EXIT;
	acle.access_name = access_name;
	acle.mode = ""b;
	acle.xmode = ""b;
	call msf_manager_$acl_list (Pfcb, null, null, addr(acle), 1, code);
	if code ^= 0 then go to MSF_EXIT;
	if acle.code = error_table_$user_not_found then do;
	   access.old_mode = ""b;
	   access.set = ACL_ADDED;
	   end;
	else if acle.mode = mode then go to MSF_EXIT;
	else do;
	   access.old_mode = acle.mode;
	   access.set = ACL_REPLACED;
	   end;
          acle.mode = mode;                              /* fill in the desired mode */
	call msf_manager_$acl_add (Pfcb, addr(acle), 1, code);
	if code ^= 0 then  go to MSF_EXIT;
	call msf_manager_$close (Pfcb);
	return;

MSF_EXIT: call msf_manager_$close(Pfcb);
	Pfcb = null;

EXIT:	if Paccess ^= null then do;
	   free access in (area);
	   Paccess = null;
	   end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


reset:	entry (Paccess, code);

	code = 0;
	if Paccess = null then return;
	if access.version ^= "access_1" then do;
	   code = error_table_$unimplemented_version;
	   go to EXIT;
	   end;
	if access.set = NO then go to EXIT;
	go to RESET(access.type);

RESET(1):	go to SEG_RESET(access.set);			/* Reset segment ACL.			*/

SEG_RESET(1):					/*   Delete ACL entry previously added.		*/
	delete_acle.access_name = access_name;
	call hcs_$delete_acl_entries (access.dir, access.ent, addr(delete_acle), 1, code);
	go to EXIT;

SEG_RESET(2):					/*   Replace ACL entry with previous mode value.	*/
	acle.access_name = access_name;
	acle.mode = access.old_mode;
	acle.xmode = ""b;
	call hcs_$add_acl_entries (access.dir, access.ent, addr(acle), 1, code);
	go to EXIT;


RESET(2):	go to DIR_RESET(access.set);

DIR_RESET(1):
	delete_acle.access_name = access_name;
	call hcs_$delete_dir_acl_entries (access.dir, access.ent, addr(delete_acle), 1, code);
	go to EXIT;
	
DIR_RESET(2):
	dir_acle.access_name = access_name;
	dir_acle.mode = access.old_mode;
	call hcs_$add_dir_acl_entries (access.dir, access.ent, addr(dir_acle), 1, code);
	go to EXIT;

RESET(3): Pfcb = null;
	on cleanup begin;
	   call msf_manager_$close (Pfcb);
	   end;
	call msf_manager_$open (access.dir, access.ent, Pfcb, code);
	if code ^= 0 then go to EXIT;
	go to MSF_RESET(access.set);

MSF_RESET(1):
	delete_acle.access_name = access_name;
	call msf_manager_$acl_delete (Pfcb, addr(delete_acle), 1, code);
	go to MSF_EXIT;

MSF_RESET(2):
	acle.access_name = access_name;
	acle.mode = access.old_mode;
	acle.xmode = ""b;
	call msf_manager_$acl_add (Pfcb, addr(acle), 1, code);
	go to MSF_EXIT;

	end access_;
