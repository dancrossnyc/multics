/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* This module implements the following commands:

      defer_messages (dm) - command to defer printing of interactive
         messages until either the immediate_messages or accept_messages
         commands are used.
      immediate_messages (im) - command to resume printing of interactive
         messages.
*/
/* Written 12/26/83 by Jim Lippard */
/* Modified 11/30/84 by Jim Lippard to make immediate_messages print out
   messages received while messages were not being accepted. */
/* Modified 12/12/84 by Jim Lippard to make immediate_messages print all
   unseen messages. */
defer_messages: dm: procedure options (variable);
	dcl     ME		 char (18);
	dcl     VERSION		 char (3) internal static options (constant) initial ("1.2");

	dcl     com_err_		 entry () options (variable);

	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));

	dcl     get_system_free_area_	 entry () returns (ptr);

	dcl     mlsys_utils_$parse_mailbox_control_args entry (ptr, fixed bin, ptr, char (*), char (*), fixed bin (35));

	dcl     message_facility_$get_msg_array_ptr entry (ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     message_facility_$get_msgf_mbx_ptr entry (char (*), char (*), ptr, fixed bin (35));
	dcl     message_facility_$get_wakeup_state entry (ptr, bit (*), fixed bin (35));
	dcl     message_facility_$set_wakeup_state entry (ptr, bit (*), fixed bin (35));
	dcl     message_facility_$wakeup_processor entry (ptr);

	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));

	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

	dcl     user_info_$whoami	 entry (char (*), char (*), char (*));

	dcl     cleanup		 condition;

	dcl     arg_count		 fixed bin;
	dcl     arg_ptr		 ptr;
	dcl     arg_len		 fixed bin (21);
	dcl     arg		 char (arg_len) based (arg_ptr);

	dcl     new_wakeup_state	 bit (2) aligned;

	dcl     dname		 char (168);
	dcl     ename		 char (32);

	dcl     flags		 bit (5);

	dcl     idx		 fixed bin;

	dcl     1 local_eci		 aligned like event_call_info;
	dcl     1 local_pcao	 aligned like parse_ca_options;

	dcl     msgf_mbx_ptr	 ptr;

	dcl     path		 bit (1) aligned;

	dcl     person		 char (22);
	dcl     project		 char (9);

	dcl     sci_ptr		 ptr;

	dcl     sys_area_ptr	 ptr;
	dcl     sys_area		 area based (sys_area_ptr);

	dcl     (addr, null, rtrim, unspec) builtin;

	dcl     code		 fixed bin (35);

	dcl     error_table_$noarg	 fixed bin (35) ext static;

	dcl     TRUE		 bit (1) internal static options (constant) init ("1"b);
	dcl     FALSE		 bit (1) internal static options (constant) init ("0"b);

	ME = "defer_messages";
	new_wakeup_state = DEFER_MESSAGES;
	go to COMMON;

immediate_messages: im: entry;
	ME = "immediate_messages";
	new_wakeup_state = ACCEPT_MESSAGES;

COMMON:

/* initialize variables */
	path = FALSE;
	msg_array_ptr, sci_ptr, sys_area_ptr = null ();

	on cleanup call cleanup_dm;

/* create ssu_ invocation */
	call ssu_$standalone_invocation (sci_ptr, ME, VERSION, null (), abort_dm, code);

	if code ^= 0 then do;
		call com_err_ (code, ME, "Creating standalone subsystem invocation.");
		return;
	     end;

/* process arguments */
	call ssu_$arg_count (sci_ptr, arg_count);

	do idx = 1 to arg_count;
	     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
	     if arg = "-pathname" | arg = "-pn" then do;
		     idx = idx + 1;
		     if idx > arg_count then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A pathname must be specified after ""^a"".", arg);

		     if path then call ssu_$abort_line (sci_ptr, (0),
			     "Usage: ^[dm^;im^] {mbx_specification}", (ME = "defer_messages"));

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
		     call expand_pathname_$add_suffix (arg, "mbx", dname, ename, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", arg);

		     path = TRUE;
		end;
	     else do;
						/* let mlsys_utils_ have at it */
		     local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
		     local_pcao.logbox_creation_mode = DONT_CREATE_MAILBOX;
		     local_pcao.savebox_creation_mode = DONT_CREATE_MAILBOX;
		     local_pcao.abort_on_errors = TRUE;
		     local_pcao.validate_addresses = FALSE;
		     local_pcao.mbz = ""b;

		     call mlsys_utils_$parse_mailbox_control_args (sci_ptr, idx, addr (local_pcao), dname, ename, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code);

		     if path then call ssu_$abort_line (sci_ptr, (0),
			     "Usage: ^[dm^;im^] {mbx_specification}", (ME = "defer_messages"));
		     idx = idx - 1;

		     path = TRUE;
		end;
	end;

	if ^path then do;
		call user_info_$whoami (person, project, "");
		dname = ">udd>" || rtrim (project) || ">" || rtrim (person);
		ename = rtrim (person) || ".mbx";
	     end;

	call message_facility_$get_msgf_mbx_ptr (dname, ename, msgf_mbx_ptr, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

	call message_facility_$get_wakeup_state (msgf_mbx_ptr, flags, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

	if new_wakeup_state = ACCEPT_MESSAGES then do;	/* immediate_messages needs to print "pending" messages */

		sys_area_ptr = get_system_free_area_ ();

		call message_facility_$get_msg_array_ptr (msgf_mbx_ptr, sys_area_ptr, msg_array_ptr, n_messages, code);

		if code ^= 0 then call ssu_$abort_line (sci_ptr, code,
			"Getting message array pointer. ^a", pathname_ (dname, ename));

		do idx = 1 to n_messages;
		     if ^msg_array.printed (idx) then call print_message (idx);
		end;
	     end;

	addr (flags) -> wakeup_flags.wakeup_state = new_wakeup_state;

	call message_facility_$set_wakeup_state (msgf_mbx_ptr, flags, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (dname, ename));

	call cleanup_dm;

RETURN_FROM_DM:
	return;

cleanup_dm: proc;
	if msg_array_ptr ^= null () then free msg_array in (sys_area);
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	return;
     end;

abort_dm: proc;
	call cleanup_dm;
	go to RETURN_FROM_DM;
     end abort_dm;

/* This procedure prints a message. */
print_message: procedure (P_message_index);
	dcl     P_message_index	 fixed bin parm;

/* Set up bogotified event_call_info.  None of this info is used except
   for local_eci.message and local_eci.data_ptr. */
	local_eci.channel_id = 0;
	unspec (local_eci.message) = unspec (msg_array.message_id (P_message_index));
	local_eci.sender = ""b;
	local_eci.dev_signal = ""b;
	local_eci.ring = 0;
	local_eci.data_ptr = msgf_mbx_ptr;

	call message_facility_$wakeup_processor (addr (local_eci));
     end print_message;

%page;
%include event_call_info;
%page;
%include mlsys_parse_ca_options;
%page;
%include msg_array;
%page;
%include msg_wakeup_flags;
     end defer_messages;
