/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(83-11-22,Lippard), approve(), audit(), install():
      A rewrite by Jim Lippard of the send_message command which was part of
      message_facility.pl1 (written 12/01/75 by Steve Herbst).  This is the
      standard command for sending interactive messages.
  2) change(84-06-26,Lippard), approve(), audit(), install():
      Modified to merge in "accepting" (based on the original "accepting"
      written by James R. Davis on April 29, 1980 which was based on an idea
      of Paul Benjamin).
  3) change(84-11-15,Lippard), approve(), audit(), install():
      Modified to remove the short name "acc" from accepting.
  4) change(84-12-14,Lippard), approve(), audit(), install():
      Modified to do the right thing with error_table_$no_info.
  5) change(85-06-03,Lippard), approve(85-11-18,MCR7298),
     audit(86-01-10,Spitzer), install(86-01-20,MR12.0-1006):
      Modified to handle errors properly for accepting.
  6) change(85-08-19,Lippard), approve(85-11-18,MCR7298),
     audit(86-01-10,Spitzer), install(86-01-20,MR12.0-1006):
      Modified to correct the error message produced when attempting to send
      a message to a user whose mail table entry points to a mailing list,
      add -update_destination (-upds) and -no_update_destination (-nupds),
      and -acknowledge_if_deferred (-ackid).
  7) change(87-12-02,GWMay), approve(87-12-02,MCR7801),
     audit(87-12-03,Lippard), install(87-12-07,MR12.2-1008):
     Changed to terminate without error when the code error_table_$end_of_info
     is returned by iox_$get_line in the input loop.  The change allows the
     command to be used as a filter without error.
                                                   END HISTORY COMMENTS */

send_message: sm: procedure options (variable);
	dcl     ME		 char (24);
	dcl     VERSION		 char (3) internal static options (constant) initial ("1.4");

	dcl     com_err_		 entry () options (variable);

	dcl     convert_access_class_$from_string entry (bit (72) aligned, char (*), fixed bin (35));

	dcl     cu_$cp		 entry (ptr, fixed bin (21), fixed bin (35));

	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     get_system_free_area_	 entry () returns (ptr);

	dcl     ioa_		 entry () options (variable);

	dcl     iox_$get_line	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
	dcl     iox_$user_input	 ptr ext static;

	dcl     mail_system_$create_user_mailbox_address entry (char (*) varying, char (*) varying, char (*) varying,
				 ptr, fixed bin (35));
	dcl     mail_system_$create_mail_table_address entry (char (*) varying, char (*) varying, char (*) varying,
				 ptr, fixed bin (35));
	dcl     mail_system_$free_address entry (ptr, fixed bin (35));
	dcl     mail_system_$get_address_pathname entry (ptr, char (*), char (*), char (*), fixed bin (35));
	dcl     mail_system_$get_mail_table_address entry (ptr, ptr, fixed bin (35));
	dcl     mlsys_utils_$parse_mailbox_control_args entry (ptr, fixed bin, ptr, char (*), char (*), fixed bin (35));

	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));

	dcl     message_facility_$get_last_message_info entry (ptr, ptr, fixed bin (35));
	dcl     message_facility_$get_msgf_mbx_ptr entry (char (*), char (*), ptr, fixed bin (35));
	dcl     message_facility_$send_message entry (char (*), char (*), char (*), ptr, fixed bin (35));
	dcl     message_facility_$send_message_access_class entry (char (*), char (*), char (*), ptr, bit (72) aligned, fixed bin (35));

	dcl     requote_string_	 entry (char (*)) returns (char (*));

	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     ssu_$print_message	 entry () options (variable);
	dcl     ssu_$return_arg	 entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));
	dcl     ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

	dcl     user_info_$whoami	 entry (char (*), char (*), char (*));

	dcl     af_allowed		 bit (1) aligned;

	dcl     active_function	 bit (1) aligned;

	dcl     arg_count		 fixed bin;
	dcl     arg_ptr		 ptr;
	dcl     arg_len		 fixed bin (21);
	dcl     arg		 char (arg_len) based (arg_ptr);

	dcl     return_ptr		 ptr;
	dcl     return_len		 fixed bin (21);
	dcl     return_arg		 char (return_len) varying based (return_ptr);

	dcl     access_class	 bit (1) aligned;
	dcl     acknowledge		 bit (1) aligned;
	dcl     ack_if_deferred	 bit (1) aligned;
	dcl     comment		 bit (1) aligned;
	dcl     control_args	 bit (1) aligned;
	dcl     destination		 bit (1) aligned;
	dcl     escape		 bit (1) aligned;
	dcl     express		 bit (1) aligned;
	dcl     inhibit_error	 bit (1) aligned;
	dcl     last_destination	 bit (1) aligned;
	dcl     last_sender		 bit (1) aligned;
	dcl     long		 bit (1) aligned;
	dcl     message_allocated	 bit (1) aligned;
	dcl     print_destination	 bit (1) aligned;
	dcl     no_print_destination	 bit (1) aligned;
	dcl     pathname		 bit (1) aligned internal static;
	dcl     suppress_errors	 bit (1) aligned;
	dcl     suppress_warnings	 bit (1) aligned;
	dcl     update_destination	 bit (1) aligned;

	dcl     access_class_arg	 bit (72) aligned;
	dcl     comment_field	 char (32);
	dcl     destination_arg	 char (168);

	dcl     dname		 char (168);
	dcl     ename		 char (32);

	dcl     person		 char (22);
	dcl     project		 char (9);

	dcl     last_destination_arg	 char (168) internal static init ("");
	dcl     last_dname		 char (168) internal static init ("");
	dcl     last_ename		 char (32) internal static init ("");

	dcl     last_person		 char (22);
	dcl     last_project	 char (9);

	dcl     1 local_lmi		 aligned like last_message_info;

	dcl     msgf_mbx_ptr	 ptr;

	dcl     idx		 fixed bin;

	dcl     1 ca_options	 aligned like parse_ca_options;

	dcl     address_ptr		 ptr;
	dcl     mt_address_ptr	 ptr;

	dcl     chars_read		 fixed bin (21);

	dcl     old_message_ptr	 ptr;
	dcl     old_message_len	 fixed bin (21);
	dcl     message_ptr		 ptr;
	dcl     message_len		 fixed bin (21);
	dcl     message_space	 char (1600) aligned;
	dcl     message		 char (message_len) aligned based (message_ptr);
	dcl     start_len		 fixed bin (21);

	dcl     area_ptr		 ptr;
	dcl     area		 area based (area_ptr);

	dcl     sci_ptr		 ptr;

	dcl     cleanup		 condition;

	dcl     (addr, after, before, index, length, null, reverse, rtrim, search, substr) builtin;

	dcl     TRUE		 bit (1) internal static options (constant) init ("1"b);
	dcl     FALSE		 bit (1) internal static options (constant) init ("0"b);
	dcl     DOT_NL		 char (2) internal static options (constant) init (".
");


	dcl     (code, old_code)	 fixed bin (35);

	dcl     (error_table_$badopt,
	        error_table_$end_of_info,
	        error_table_$long_record,
	        error_table_$messages_deferred,
	        error_table_$messages_off,
	        error_table_$no_append,
	        error_table_$noarg,
	        error_table_$no_dir,
	        error_table_$noentry,
	        error_table_$wakeup_denied) external fixed bin (35);

	dcl     mlsys_et_$invalid_user_id_syntax external fixed bin (35);

	ME = "send_message";
	af_allowed = FALSE;
	active_function = FALSE;
	go to COMMON;

accepting: entry;
	ME = "accepting";
	af_allowed = TRUE;
	go to COMMON;

last_message_destination: lmds: entry;
	ME = "last_message_destination";
	af_allowed = TRUE;
	inhibit_error = FALSE;

COMMON:
						/* initialize variables */
	sci_ptr = null ();
	address_ptr, mt_address_ptr = null ();
	area_ptr = null ();
	access_class, acknowledge, ack_if_deferred, destination, express, last_destination, last_sender, long, message_allocated,
	     suppress_errors, suppress_warnings = FALSE;
	comment, escape, update_destination = TRUE;
	print_destination, no_print_destination = FALSE;
	call user_info_$whoami (person, project, "");
	comment_field = person;

	message_ptr = addr (message_space);
	message_len = length (message_space);
	message = "";

	on cleanup call cleanup_sm;

/* create ssu invocation */
	call ssu_$standalone_invocation (sci_ptr, ME, VERSION, null, abort_sm, code);

	if code ^= 0 then do;
		call com_err_ (code, ME, "Creating standalone subsystem invocation.");
		return;
	     end;

/* process arguments */
	if af_allowed then call ssu_$return_arg (sci_ptr, arg_count, active_function, return_ptr, return_len);
	else call ssu_$arg_count (sci_ptr, arg_count);

	if ME = "last_message_destination" then do;	/* last_message_destination ends here */
		do idx = 1 to arg_count;
		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
		     if arg = "-inhibit_error" | arg = "-ihe" then inhibit_error = TRUE;
		     else if index (arg, "-") = 1 then call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", arg);
		     else call ssu_$abort_line (sci_ptr, (0), "Usage: lmds {-control_arg}");
		end;


		if last_destination_arg = "" then do;
			if ^inhibit_error then call ssu_$abort_line (sci_ptr, (0), "No last message destination.");
			else if active_function then return_arg = "";
		     end;

		else do;
			if active_function then return_arg = requote_string_ (rtrim (last_destination_arg));
			else call ioa_ ("^a", last_destination_arg);
		     end;

		go to MAIN_RETURN;
	     end;

	control_args = TRUE;

	do idx = 1 to arg_count while (control_args);
	     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

	     if (arg = "-acknowledge" | arg = "-ack") & ^af_allowed then do;
		acknowledge = TRUE;
		ack_if_deferred = FALSE;
		end;
	     else if (arg = "-no_acknowledge" | arg = "-nack") & ^af_allowed then acknowledge, ack_if_deferred = FALSE;
	     else if (arg = "-acknowledge_if_deferred" | arg = "-ackid") & ^af_allowed then do;
		     ack_if_deferred = TRUE;
		     acknowledge = FALSE;
		     end;

	     else if (arg = "-brief" | arg = "-bf") & ^af_allowed then do;
		     suppress_warnings = TRUE;
		     suppress_errors, long = FALSE;
		end;

	     else if (arg = "-long" | arg = "-lg") & ^af_allowed then do;
		     suppress_warnings, suppress_errors = FALSE;
		     long = TRUE;
		end;

	     else if (arg = "-silent" | arg = "-sil") & ^af_allowed then do;
		     suppress_warnings, suppress_errors = TRUE;
		     long = FALSE;
		end;

	     else if (arg = "-comment" | arg = "-com") & ^af_allowed then do;
		     idx = idx + 1;
		     if idx > arg_count then
			call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A character string must be given after ""^a"".", arg);
		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
		     if arg_len > length (send_mail_info.sent_from) then
			call ssu_$abort_line (sci_ptr, (0), "Comment field may be no longer than ^d characters.",
			     length (send_mail_info.sent_from));
		     comment = TRUE;
		     comment_field = arg;
		end;

	     else if (arg = "-no_comment" | arg = "-ncom") & ^af_allowed then do;
		     comment = FALSE;
		     comment_field = "";
		end;

	     else if (arg = "-escape" | arg = "-esc") & ^af_allowed then escape = TRUE;
	     else if (arg = "-no_escape" | arg = "-no_escape") & ^af_allowed then escape = FALSE;

	     else if (arg = "-express" | arg = "-xps") & ^af_allowed then express = TRUE;
	     else if (arg = "-no_express" | arg = "-nxps") & ^af_allowed then express = FALSE;
	     else if (arg = "-access_class" | arg = "-acc") & ^af_allowed then do;
		     idx = idx + 1;

		     if idx > arg_count then
			call ssu_$abort_line (sci_ptr, error_table_$noarg, "An access class must be specified after ""^a"".", arg);

		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);

		     call convert_access_class_$from_string (access_class_arg, arg, code);

		     if code ^= 0 then
			call ssu_$abort_line (sci_ptr, code, "^a", arg);

		     access_class = TRUE;
		end;

	     else if arg = "-last_message_destination" | arg = "-lmds" then do;
		     if destination then call print_usage_message;
		     destination, last_destination, print_destination = TRUE;
		     destination_arg = last_destination_arg;
		     dname = last_dname;
		     ename = last_ename;
		end;

	     else if arg = "-last_message_sender" | arg = "-lms" then do;
		     if destination then call print_usage_message;
		     dname = ">udd>" || rtrim (project) || ">" || person;
		     ename = rtrim (person) || ".mbx";

		     call message_facility_$get_msgf_mbx_ptr (dname, ename, msgf_mbx_ptr, code);
		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code,
			     "While getting message facility mailbox pointer. ^a", pathname_ (dname, ename));

		     local_lmi.version = LAST_MESSAGE_INFO_VERSION_1;
		     call message_facility_$get_last_message_info (msgf_mbx_ptr, addr (local_lmi), code);
		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code,
			     "While getting last message info. ^a", pathname_ (dname, ename));

		     if local_lmi.last_message_id = ""b then call ssu_$abort_line (sci_ptr, (0), "No last message.");

		     message_info_ptr = local_lmi.last_message_ptr;
		     destination_arg, last_destination_arg =
			substr (message_info.sender, 1, length (rtrim (message_info.sender)) - 2);
		     last_person = before (destination_arg, ".");
		     last_project = after (destination_arg, ".");
		     dname = ">udd>" || rtrim (last_project) || ">" || last_person;
		     ename = rtrim (last_person) || ".mbx";
		     destination, last_destination, last_sender, print_destination = TRUE;
		end;


	     else if arg = "-pathname" | arg = "-pn" then do;
		     idx = idx + 1;
		     if idx > arg_count then
			call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "A mailbox pathname must be given after ""^a"".", arg);
		     if destination then call print_usage_message;
		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
		     call expand_pathname_$add_suffix (arg, "mbx", dname, ename, code);
		     if code ^= 0 then
			call ssu_$abort_line (sci_ptr, code, "^a", arg);
		     destination, pathname = TRUE;
		     destination_arg = pathname_ (dname, ename);
		end;

	     else if (arg = "-print_destination" | arg = "-prds") & ^af_allowed then do;
		     print_destination = TRUE;
		     no_print_destination = FALSE;
		end;
	     else if (arg = "-no_print_destination" | arg = "-nprds") & ^af_allowed then do;
		     print_destination = FALSE;
		     no_print_destination = TRUE;
		end;
	     else if (arg = "-update_destination" | arg = "-upds") & ^af_allowed then update_destination = TRUE;
	     else if (arg = "-no_update_destination" | arg = "-nupds") & ^af_allowed then update_destination = FALSE;
	     else if index (arg, "-") ^= 1 & destination then control_args = FALSE;

	     else if search (arg, "<>") ^= 0 then do;
		     call expand_pathname_$add_suffix (arg, "mbx", dname, ename, code);

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", arg);

		     destination = TRUE;
		     destination_arg = arg;
		     pathname = TRUE;
		end;

	     else if index (arg, "-") ^= 1 then do;
		     call mail_system_$create_user_mailbox_address ((arg), "", "", address_ptr, code);

		     if code = mlsys_et_$invalid_user_id_syntax then do;
			     call mail_system_$create_mail_table_address ((arg), "", "", address_ptr, code);
			     if code = 0 then do;
				     call mail_system_$get_mail_table_address (address_ptr, mt_address_ptr, code);
				     if code = 0 then do;
					     call mail_system_$free_address (address_ptr, (0));
					     address_ptr = mt_address_ptr;
					end;
				end;
			end;

		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", arg);

		     call mail_system_$get_address_pathname (address_ptr, dname, ename, "", code);
		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", arg);

		     if before (reverse (rtrim (ename)), ".") = "slm" then call ssu_$abort_line (sci_ptr, (0), "Mailing lists are not supported by this command. ^a", arg);

		     destination = TRUE;
		     destination_arg = arg;
		     pathname = FALSE;
		end;

	     else do;				/* let mlsys_utils_ handle this potential address */
		     ca_options.version = PARSE_CA_OPTIONS_VERSION_1;
		     ca_options.logbox_creation_mode = DONT_CREATE_MAILBOX;
		     ca_options.savebox_creation_mode = DONT_CREATE_MAILBOX;
		     ca_options.abort_on_errors = TRUE;
		     ca_options.validate_addresses = FALSE;
		     ca_options.mbz = ""b;

		     call mlsys_utils_$parse_mailbox_control_args (sci_ptr, idx, addr (ca_options), dname, ename, code);
		     if code ^= 0 then call ssu_$abort_line (sci_ptr, code);
		     idx = idx - 1;			/* let the do loop increment it rather than mlsys_utils_ */

		     destination = TRUE;
		     destination_arg = pathname_ (dname, ename);
		     pathname = TRUE;
		end;
	end;					/* arg loop */

	if ^control_args & af_allowed then call print_usage_message;
	else if ^control_args then idx = idx - 1;

	if ^destination then call print_usage_message;

	if last_destination & last_destination_arg = "" then
	     call ssu_$abort_line (sci_ptr, (0), "No last destination.");

/* set last info */
	if ^af_allowed & update_destination then do;
		last_destination_arg = destination_arg;
		last_dname = dname;
		last_ename = ename;
	     end;

	if acknowledge & ^long then suppress_warnings = TRUE;

	send_mail_info.version = send_mail_info_version_2;
	send_mail_info.sent_from = comment_field;
	send_mail_info.wakeup = TRUE;
	send_mail_info.mbz1 = ""b;
	send_mail_info.always_add = ^express;
	send_mail_info.never_add = FALSE;
	send_mail_info.notify = FALSE;
	send_mail_info.acknowledge = acknowledge;
	send_mail_info.mbz = ""b;

	code = test_sendable ();
	old_code = code;

	if ack_if_deferred & (code = error_table_$messages_deferred
	     | code = error_table_$messages_off) then send_mail_info.acknowledge = TRUE;

	if af_allowed then do;			/* accepting ends here */
		if code = error_table_$messages_off
		     | code = error_table_$messages_deferred then
		     if ^active_function then call print_code ();
		     else return_arg = "false";
		else if code ^= 0 then call ssu_$print_message (sci_ptr, code, "Cannot determine accepting state. ^a", destination_arg);
		else if ^active_function then do;
			if pathname then call ssu_$print_message (sci_ptr, (0),
				"Messages are being accepted on the mailbox ^a.", destination_arg);
			else call ssu_$print_message (sci_ptr, (0), "^a is accepting messages.", destination_arg);
		     end;
		else return_arg = "true";
		go to MAIN_RETURN;
	     end;

	if code ^= 0 then call print_code ();

	if idx <= arg_count then do;			/* there is a message to send */
		start_len = 1;
		message = "";
		do idx = idx to arg_count;
		     call ssu_$arg_ptr (sci_ptr, idx, arg_ptr, arg_len);
		     if start_len + arg_len > message_len then do; /* need more space */
			     old_message_ptr = message_ptr;
			     old_message_len = message_len;
			     message_len = message_len + arg_len + length (message_space);
			     if area_ptr = null () then area_ptr = get_system_free_area_ ();

			     allocate message in (area) set (message_ptr);
			     message_allocated = TRUE;
			     message = substr (old_message_ptr -> message, 1, old_message_len);
			     if old_message_len > length (message_space) then free old_message_ptr -> message in (area);
			     substr (message, old_message_len + 1) = "";
			end;
		     substr (message, start_len, arg_len) = arg;
		     start_len = start_len + arg_len + 1;
		end;				/* arg loop */

		if access_class then
		     call message_facility_$send_message_access_class (dname, ename, substr (message, 1, start_len - 1),
			addr (send_mail_info), access_class_arg, code);
		else call message_facility_$send_message (dname, ename, substr (message, 1, start_len - 1),
			addr (send_mail_info), code);

		if message_allocated then free message in (area);

		if print_destination & ^no_print_destination then
		     call ioa_ ("Sent to ^a^[ (last message ^[sender^;destination^])^].", destination_arg, last_destination, last_sender);

		if code ^= old_code then call print_code ();

		goto MAIN_RETURN;
	     end;					/* message on command line */

	else do;					/* input mode */
		code = 0;

		call ioa_ ("Input to ^a:", destination_arg);
		do while (code = 0);
		     call iox_$get_line (iox_$user_input, message_ptr, message_len, chars_read, code);
		     if code ^= 0 then if code = error_table_$long_record then do;
				call ssu_$print_message (sci_ptr, code, "user_input");
				call ssu_$print_message (sci_ptr, (0), "Maximum message length is ^d characters.  Message truncated to ""^a"".", message_len, message);
				code = 0;
			     end;
			else if code = error_table_$end_of_info then goto MAIN_RETURN;
			else call ssu_$abort_line (sci_ptr, code, "user_input");
			
		     if substr (message, 1, chars_read) = DOT_NL then goto MAIN_RETURN; /* exit input mode */
		     if substr (message, 1, 2) = ".." & escape then do;
			     substr (message, 1, 2) = "  ";
			     call cu_$cp (message_ptr, chars_read, code);
			     code = 0;
			end;
		     else do;
			     if access_class then
				call message_facility_$send_message_access_class (dname, ename, substr (message, 1, chars_read),
				     addr (send_mail_info), access_class_arg, code);
			     else call message_facility_$send_message (dname, ename, substr (message, 1, chars_read),
				     addr (send_mail_info), code);

			     if code ^= old_code then
				if code = 0 & ^suppress_warnings then
				     call ssu_$print_message (sci_ptr, (0), "^[A process^s^;^a^] is now accepting messages^[ on the mailbox ^a^].", pathname, destination_arg, pathname, destination_arg);
				else if code ^= 0 then call print_code ();
			     old_code = code;
			     if code ^= 0 then if (code = error_table_$messages_off
				     | code = error_table_$wakeup_denied
				     | code = error_table_$messages_deferred) then code = 0;
			end;			/* sending it */
		end;				/* input loop */
	     end;					/* message with input loop */

	if code ^= 0 & code ^= old_code then call print_code ();
MAIN_RETURN:
	call cleanup_sm ();
RETURN_FROM_SM:
	return;

cleanup_sm: proc ();
	if message_allocated then do;
		message_allocated = FALSE;
		free message in (area);
	     end;
	if address_ptr ^= null () then call mail_system_$free_address (address_ptr, (0));
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	return;
     end cleanup_sm;

abort_sm: proc ();
	call cleanup_sm ();
	go to RETURN_FROM_SM;
     end abort_sm;

test_sendable: proc () returns (fixed bin (35));
	dcl     return_code		 fixed bin (35);
	send_mail_info.never_add = TRUE;
	if access_class then
	     call message_facility_$send_message_access_class (dname, ename, "", addr (send_mail_info), access_class_arg, return_code);
	else call message_facility_$send_message (dname, ename, "", addr (send_mail_info), return_code);
	send_mail_info.never_add = FALSE;
	return (return_code);
     end test_sendable;


print_code: proc;
	dcl     error_occurred	 bit (1) aligned;
	error_occurred = FALSE;
	if code = error_table_$no_append then do;
		if ^suppress_errors then call ssu_$print_message (sci_ptr, (0),
			"Insufficient access to add a message to^[ mailbox of^] ^a", ^pathname, destination_arg);
		error_occurred = TRUE;
	     end;
	else if code = error_table_$noentry | code = error_table_$no_dir then do;
		if ^suppress_errors then call ssu_$print_message (sci_ptr, (0),
			"No mailbox^[ for^] ^a.", ^pathname, destination_arg);
		error_occurred = TRUE;
	     end;
	else if code = error_table_$messages_off then if ^suppress_warnings then do;
		     if pathname then call ssu_$print_message (sci_ptr, (0),
			     "No process is accepting messages on the mailbox ^a.", destination_arg);
		     else call ssu_$print_message (sci_ptr, (0),
			     "^a is not accepting messages or not logged in.", destination_arg);
		end;
	     else ;
	else if code = error_table_$messages_deferred then if ^suppress_warnings then do;
		     if pathname then call ssu_$print_message (sci_ptr, (0),
			     "Messages are deferred on the mailbox ^a.", destination_arg);
		     else call ssu_$print_message (sci_ptr, (0),
			     "^a has deferred messages.", destination_arg);
		end;
	     else ;
	else if code = error_table_$wakeup_denied then if ^suppress_warnings then do;
		     call ssu_$print_message (sci_ptr, (0),
			"Insufficient access to send a wakeup to ^a.  Message may not be printed immediately.", destination_arg);
		end;
	     else ;
	else do;
		error_occurred = TRUE;
		if ^suppress_errors then call ssu_$print_message (sci_ptr, code, "^a", destination_arg);
	     end;
	if express & ((suppress_warnings & error_occurred) | ^suppress_warnings) then
	     call ssu_$print_message (sci_ptr, (0), "Message not sent to ^a.", destination_arg);
	if express | error_occurred then call abort_sm ();
     end print_code;

/* This procedure prints a usage message for accepting or send_message */
print_usage_message: procedure;
	if af_allowed then
	     call ssu_$abort_line (sci_ptr, (0), "Usage: ^[[^]accepting address^[]^]", active_function, active_function);
	else call ssu_$abort_line (sci_ptr, (0), "Usage: sm {-control_args} address {message}");
     end print_usage_message;

%page;
%include last_message_info;
%page;
%include message_info;
%page;
%include send_mail_info;
%page;
%include mlsys_parse_ca_options;
     end send_message;
