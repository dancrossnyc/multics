/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-06-02,Herbst), approve(86-06-02,MCR7432), audit(86-06-30,Wong),
     install(86-06-30,MR12.0-1080):
     Changed to initialize unused portions of mail_format to zero.
                                                   END HISTORY COMMENTS */


send_mail_: proc (destination, message, send_info_ptr, code);

	/* This subroutine sends one message to a specified
	   Person.Project destination and optionally accompanies
	   it with a wakeup. Control information is input via
	   the structure send_mail_info. */

	/* Steve Herbst 7/1/75 */
/* Arguments declared char (*) 05/12/80 S. Herbst */

%include mail_format;
%include send_mail_info;
dcl 1 send_info like send_mail_info based(send_info_ptr);

dcl (destination, message) char(*);
dcl (a_dn, a_en) char (*);
dcl dn char (168);
dcl en char (32);
dcl newline char(1) aligned init("
");
dcl switch bit(36) init("0"b);
dcl (a_access_class, access_class, id) bit(72) aligned;
dcl aim_add bit(1) aligned;
dcl retried bit(1) aligned;				/* retried once already after $bad_segment */

dcl send_info_ptr ptr;

dcl (count, i, j) fixed bin;
dcl mbx_index fixed bin init(0);			/* index of recipient's mailbox */
dcl msg_bitcnt fixed bin;				/* bitcnt of message added */

dcl code fixed bin(35);
dcl error_table_$bad_segment fixed bin(35) ext;
dcl error_table_$noentry fixed bin(35) ext;
dcl error_table_$rqover fixed bin(35) ext;

dcl mailbox_$close entry(fixed bin,fixed bin(35));
dcl mailbox_$open entry(char(*),char(*),fixed bin,fixed bin(35));
dcl mailbox_$wakeup_add_index entry(fixed bin,ptr,fixed bin,bit(36),bit(72)aligned,fixed bin(35));
dcl mailbox_$wakeup_aim_add_index entry(fixed bin,ptr,fixed bin,bit(36),bit(72)aligned,bit(72)aligned,fixed bin(35));

dcl (addr, index, length, reverse, size, substr, verify) builtin;

dcl (cleanup, record_quota_overflow) condition;
/**/
	aim_add = "0"b;
	go to COMMON;

access_class: entry (destination, message, send_info_ptr, a_access_class, code);

	aim_add = "1"b;
	access_class = a_access_class;

	/* locate recipient's mailbox */

COMMON:	i = index(destination,".");
	j = length(destination) + 1 - verify(reverse(destination)," ");
	if i=0 then do;				/* invalid destination */
	     code = error_table_$noentry;		/* no such mailbox */
	     return;
	end;
	else do;
	     dn = ">udd>" || substr(destination,i+1,j-i) || ">" || substr(destination,1,i-1);
	     en = substr(destination,1,i-1) || ".mbx";
	end;
	go to OPEN;

path:	entry (a_dn, a_en, message, send_info_ptr, code);

	aim_add = "0"b;
	go to COMMON2;

path_access_class: entry (a_dn, a_en, message, send_info_ptr, a_access_class, code);

	aim_add = "1"b;
	access_class = a_access_class;

COMMON2:	dn = a_dn;
	en = a_en;
	i = length (rtrim (en));
	if i < 5 then do;
ADD_SUFFIX:    substr (en, i + 1, 4) = ".mbx";
	end;
	else if substr (en, i - 3, 4) ^= ".mbx" then go to ADD_SUFFIX;

OPEN:	on condition (cleanup) begin;
	     if mbx_index ^= 0 then call mailbox_$close (mbx_index, 0);
	end;

	call mailbox_$open(dn,en,mbx_index,code);
	if code^=0 then return;

	/* build message */

	if message="" then text_length = 0;
	else text_length = length(message)-verify(reverse(message)," ")+1;
	msg_bitcnt = size(mail_format)*36;

allocate_message: begin;

	dcl mf_space bit(msg_bitcnt) aligned;

	dcl 1 mf aligned like mail_format based(addr(mf_space));

	mf.version = MAIL_FORMAT_VERSION_4;
	mf.text_len = text_length;
	mf.sent_from = send_info.sent_from;
	mf.wakeup = send_info.wakeup;
	mf.notify = send_info.notify;
	mf.acknowledge = send_info.acknowledge;
	mf.urgent, mf.seen, mf.others = "0"b;
	mf.text = message;

	/* count lines */

	mf.lines = 0;
	count = 1;
	i = 1;
	do while(i^=0 & text_length^=0);
	     i = index(substr(message,count,text_length),newline);
	     count = count+i;
	     text_length = text_length-i;
	     mf.lines = mf.lines+1;
	end;

	/* send */

	on condition(record_quota_overflow) begin;
	     code = error_table_$rqover;
	     go to RETURN;
	end;

	switch = mf.wakeup || mf.urgent || send_info.always_add || send_info.never_add;
	retried = "0"b;
RETRY:	if aim_add then call mailbox_$wakeup_aim_add_index
	     (mbx_index,addr(mf),msg_bitcnt,switch,access_class,id,code);
	else call mailbox_$wakeup_add_index(mbx_index,addr(mf),msg_bitcnt,switch,id,code);
	if code=error_table_$bad_segment & ^retried then do;
	     retried = "1"b;
	     go to RETRY;
	end;
	call mailbox_$close(mbx_index,0);

end allocate_message;

RETURN:	return;

end send_mail_;
