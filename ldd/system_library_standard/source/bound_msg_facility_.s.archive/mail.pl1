/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-06-02,Herbst), approve(86-06-02,MCR7432), audit(86-06-30,Wong),
     install(86-06-30,MR12.0-1080):
     Fixed to zero unused portions of mail_format.
  2) change(87-02-26,Lippard), approve(87-03-18,MECR0001),
     audit(87-03-12,Fawcett), install(87-03-19,MR12.1-1002):
     Modified to strip control characters from message comment field.
  3) change(87-05-08,Lippard), approve(87-04-20,MCR7669),
     audit(87-05-11,Fawcett), install(87-05-20,MR12.1-1032):
     Formal installation to close out MECR0001.
                                                   END HISTORY COMMENTS */


mail: ml: proc;

/* Usage:
   mail					to read own mail
   mail -path-				to read any mail
   mail  path  user1_ proj1_ ... user_i proj_i		to send a segment
   mail   *    user1_ proj1_ ... user_i proj_i		to send console input

   Mailbox names end in ".mbx"	*/


/* -notify and -no_notify added 7/27/78 by S. Herbst */
/* Modified: 1 May 1985 by G. Palter to remove reference to mseg_hdr.incl.pl1 */

% include mail_format;	/* this based structure should call the ASCII part "text" */
dcl 1 send_mail_info aligned,				/* structure for sending acknowledgement message */
    2 version fixed bin,				/* = 1 */
    2 from char (32) aligned,
    2 switches,
      3 wakeup bit (1) unal,
      3 mbz1 bit (1) unal,
      3 always_add bit (1) unal,
      3 never_add bit (1) unal,
      3 mbz2 bit (1) unal,
      3 acknowledge bit (1) unal,
      3 mbz bit (30) unal;

dcl  area area based (areap);

dcl  segment char (4096) based (segp);
dcl  page char (4096) aligned;
dcl  node_space (48) ptr aligned;			/* space for first 24 deletion nodes */

dcl  alphabet char (256) init				/* alphabetics plus BS HT NL RRS BRS */
    ((8)" " || "	
" || (3)" " || "" || (16)" " || substr (collate (), 33));
dcl  BS char (1) internal static options (constant) init ("");
dcl (buffer, dn) char (168);
dcl (en, last_sender, last_sent_from, sender, sender_name) char (32);
dcl  atime char (24);
dcl (match_person, match_project) char (32) init ("*");
dcl (exclude_person, exclude_project) char (32) init (".");
dcl  name char (22);
dcl  proj char (9);
dcl  vname char (22) varying;
dcl  vproj char (9) varying;
dcl  last_date char (8);
dcl  command char (7);
dcl  answer char (3) varying;
dcl  s char (1) init ("");
dcl  nlx char (1);
dcl  newline char (1) init ("
");

dcl  arg char (al) based (ap);

dcl  node (24) char (16) aligned based (stack_ptr);	/* deletion nodes */

dcl  stack_bits bit (3456) aligned based (stack_ptr);
dcl  clock bit (54) aligned;
dcl  exmode bit (36) aligned;
dcl (acknowledge,					/* request acknowledgement when sending */
     brief,					/* -brief option when reading */
     head_mode,					/* -header mode when reading */
     dont_print_count,
     console,					/* sending console input */
     got_input,					/* already copied into "page" */
     more,					/* more input in input mode */
     my_mbx,					/* reading from user's own mailbox */
     notify_sw,					/* send notification with the mail */
     own,						/* reading own messages */
     path_sw,					/* read mail by pathname */
     pdir_flag,					/* save mail in process directory */
     printing,					/* printing mail */
     salvaged,					/* mailbox was salvaged */
     saved,					/* already saved in unsent_mail */
     seg_initiated)					/* initiated a segment to send */
     bit (1) aligned init ("0"b);

dcl (al, anonymous, arg_count, argno, chars, header_length, i, msg_bitcnt, nlines) fixed bin;
dcl (count, mseg_index) fixed bin init (0);
dcl  node_index fixed bin init (0);
dcl (last_type, interactive init (1), mail_type init (2)) fixed bin;
dcl (five_minutes, last_time, time) fixed bin (71);
dcl  bitcnt fixed bin (24);
dcl  j fixed bin (21);
dcl  mode fixed bin (5);
dcl  chase fixed bin (1) init (1);

dcl (ap, argp, idp, node_ptr) pointer;
dcl (areap, mbxp, segp) pointer init (null);
dcl  stack_ptr ptr;

dcl 1 id_node aligned based,
    2 next pointer aligned,
    2 delete_id bit (72) aligned;			/* message id saved for deletion */

dcl 1 mseg_return_args aligned,
    2 msg_ptr pointer,				/* -> returned message */
    2 bitcnt fixed bin (18),				/* bit count of message */
    2 sender_id char (32),				/* sender's group id */
    2 level fixed bin,				/* validation level */
    2 id bit (72),					/* loc_and_time */
    2 sender_authorization bit (72),
    2 access_class bit (72);

dcl 1 query_info aligned internal static,
    2 vsn fixed bin init (1),
    2 yes_or_no_sw bit (1) unaligned init ("1"b),
    2 suppress_name_sw bit (1) unaligned init ("0"b),
    2 status_code fixed bin (35) init (0),
    2 query_code fixed bin (35) init (0);

dcl  canonicalize_ entry (ptr, fixed bin(21), ptr, fixed bin(21), fixed bin(35));
dcl  com_err_ entry options (variable);
dcl  command_query_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$grow_stack_frame entry (fixed bin, ptr, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  get_pdir_ entry returns (char (168)aligned);
dcl  get_wdir_ entry returns (char (168)aligned);
dcl hcs_$delentry_file entry (char (*), char (*), fixed bin (35));
dcl  hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$nnl entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$user_input pointer external;
dcl  iox_$user_output pointer external;
dcl  send_mail_ entry (char (*)aligned, char (*)aligned, ptr, fixed bin (35));
dcl  send_message_$notify_mail entry (char (*), char (*), fixed bin (35));
dcl  user_info_ entry (char (*));
dcl  user_info_$login_data entry (char (*), char (*), char (*), fixed bin);
dcl  mailbox_$add_index entry (fixed bin, ptr, fixed bin, bit (72)aligned, fixed bin (35));
dcl  mailbox_$check_salv_bit_index entry (fixed bin, bit (1)aligned, bit (1)aligned, fixed bin (35));
dcl  mailbox_$close entry (fixed bin (17), fixed bin (35));
dcl  mailbox_$create entry (char (*), char (*), fixed bin (35));
dcl  mailbox_$delete_index entry (fixed bin, bit (72)aligned, fixed bin (35));
dcl  mailbox_$get_mode_index entry (fixed bin, bit (*)aligned, fixed bin (35));
dcl  mailbox_$incremental_read_index entry (fixed bin, ptr, bit (2), bit (72)aligned, ptr, fixed bin (35));
dcl  mailbox_$open entry (char (*), char (*), fixed bin, fixed bin (35));
dcl  mailbox_$open_if_full entry (char (*), char (*), bit (1) aligned,
     fixed bin (17), fixed bin (17), fixed bin (35));
dcl  mailbox_$own_incremental_read_index entry (fixed bin, ptr, bit (2), bit (72)aligned, ptr, fixed bin (35));
dcl  mailbox_$own_read_index entry (fixed bin, ptr, bit (1), ptr, fixed bin (35));
dcl  mailbox_$read_index entry (fixed bin, ptr, bit (1), ptr, fixed bin (35));
dcl  mailbox_$update_message_index entry (fixed bin, fixed bin, bit (72)aligned, ptr, fixed bin (35));


dcl  code fixed bin (35);
dcl  error_table_$bad_segment fixed bin (35) external;
dcl  error_table_$badopt fixed bin (35) external;
dcl  error_table_$long_record fixed bin (35) external;
dcl  error_table_$moderr fixed bin (35) external;
dcl  error_table_$noentry fixed bin (35) external;
dcl  error_table_$no_message fixed bin (35) external;
dcl  error_table_$root fixed bin (35) ext;
dcl  error_table_$rqover fixed bin (35) external;

dcl (cleanup, no_write_permission, program_interrupt, record_quota_overflow) condition;

dcl (addr, bin, collate, divide, fixed, index, length, min, null) builtin;
dcl (rel, reverse, rtrim, search, size, substr, translate, unspec, verify) builtin;
						/*  */
	mail_format_ptr = null;
	on condition (cleanup) call mail_cleanup;
	command = "mail";
	call cu_$arg_count (arg_count);
	buffer = "";
	path_sw = "0"b;
	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, ap, al, code);
	     if substr (arg, 1, 1) = "-" then
		if arg = "-brief" | arg = "-bf" then brief = "1"b;
		else if arg = "-header" | arg = "-he" then head_mode = "1"b;
		else if arg = "-match" then do;
		     dont_print_count = "1"b;
		     i = i + 1;
		     if i>arg_count then do;
			call com_err_ (0, command, "No value specified for -match");
			return;
		     end;
		     call cu_$arg_ptr (i, ap, al, code);
		     j = index (arg, ".");
		     if j = 0 then match_person = arg;
		     else do;
			match_person = substr (arg, 1, j-1);
			match_project = substr (arg, j+1);
		     end;
		end;
		else if arg = "-exclude" | arg = "-ex" then do;
		     dont_print_count = "1"b;
		     i = i + 1;
		     if i>arg_count then do;
			call com_err_ (0, command, "No value specified for -exclude");
			return;
		     end;
		     call cu_$arg_ptr (i, ap, al, code);
		     j = index (arg, ".");
		     if j = 0 then exclude_person = arg;
		     else do;
			exclude_person = substr (arg, 1, j-1);
			exclude_project = substr (arg, j+1);
		     end;
		end;
		else if arg = "-acknowledge" | arg = "-ack" then go to SEND;
		else if arg = "-notify" | arg = "-nt" then go to SEND;
		else if arg = "-no_notify" | arg = "-nnt" then go to SEND;
		else if arg = "-pathname" | arg = "-pn" then do;
		     if buffer ^= "" then go to SEND;
		     i = i+1;
		     if i>arg_count then do;
			call com_err_ (0, command, "No value specified for -pathname");
			return;
		     end;
		     call cu_$arg_ptr (i, ap, al, code);
		     buffer = arg;
		     path_sw = "1"b;
		end;
		else do;
		     call com_err_ (error_table_$badopt, command, "^a", arg);
		     return;
		end;
	     else if buffer ^= "" then go to SEND;
	     else buffer = arg;
	end;
	if buffer = "" then do;

/* Read from default mailbox */

READ:	     my_mbx = "1"b;
	     bitcnt = 0;
	     call user_info_$login_data (name, proj, "", anonymous);
	     if anonymous = 1 then do;		/* anonymous user */
		dn = ">udd>" || rtrim (proj) || ">anonymous";
		en = "anonymous.mbx";
	     end;
	     else do;
		dn = ">udd>" || rtrim (proj) || ">" || name;
		en = rtrim (name) || ".mbx";
	     end;
	     call mailbox_$open_if_full (dn, en, salvaged, count, mseg_index, code);
	     if code = error_table_$noentry then do;

/* Create a new mailbox */

		on condition (record_quota_overflow) begin;
		     call com_err_ (error_table_$rqover, command, "Unable to create default mailbox.");
		     go to RETURN;
		end;

		call mailbox_$create (dn, en, code);
		if code ^= 0 then do;
		     call com_err_ (code, command, "Unable to create default mailbox.");
		     go to RETURN;
		end;

		revert condition (record_quota_overflow);

		call ioa_ ("^a>^a created. No mail.", dn, en);
		return;
	     end;
	end;
	else do;

/* Read from specified mailbox */

	     if buffer = ">" then do;
		code = error_table_$root;
		go to ERROR2;
	     end;
	     else if search (buffer, "<>") ^= 0 | path_sw then do; /* mbx pathname */
		call expand_pathname_$add_suffix (buffer, "mbx", dn, en, code);
		if code ^= 0 then go to ERROR2;
	     end;
	     else do;				/* Person.Project destination */
		i = index (buffer, ".");
		if i = 0 then do;
		     call com_err_ (0, command, "No project specified for ^a", buffer);
		     return;
		end;
		call ioa_$rsnnl (">udd>^a>^a", dn, 168, substr (buffer, i+1), substr (buffer, 1, i-1));
		en = substr (buffer, 1, i-1)||".mbx";
	     end;
	     call mailbox_$open_if_full (dn, en, salvaged, count, mseg_index, code);
	end;

	if code ^= 0 & (code ^= error_table_$moderr | mseg_index = 0) then go to ERROR1;

	if salvaged then do;
	     if my_mbx then call mailbox_$check_salv_bit_index (mseg_index, "1"b, salvaged, code);
	     call ioa_ ("Mailbox ^a^[>^]^a has been salvaged since mail was last read.
Messages may have been lost.", dn, dn ^= ">", en);
	end;
	if code = 0 then do;
	     if count = 0 then do;
		if ^brief then
		     call ioa_ ("No mail.");
		go to CLOSE;
	     end;
	     if count>1 then s = "s";			/* plural */
	     if ^dont_print_count then
		call ioa_ ("^d message^a.", count, s);
	     if brief then go to CLOSE;
	end;

	areap = get_system_free_area_ ();
	argp = addr (mseg_return_args);

	call mailbox_$read_index (mseg_index, areap, "0"b, argp, code); /* read earliest message first */
	if code ^= 0 then
	     if code = error_table_$no_message then do;
		if ^brief then call ioa_ ("No mail.");
		go to CLOSE;
	     end;
	     else if code = error_table_$moderr then own = "1"b;
	     else go to ERROR1;

	if own then do;
	     call mailbox_$own_read_index (mseg_index, areap, "0"b, argp, code);
	     if code ^= 0 then if code = error_table_$no_message then do;
		     if ^brief then call ioa_ ("You have no messages in ^a^[>^]^a.", dn, dn ^= ">", en);
		     go to CLOSE;
		end;
		else go to ERROR1;
	     else if brief then do;
		call ioa_ ("You have messages in ^a^[>^]^a", dn, dn ^= ">", en);
		go to CLOSE;
	     end;
	     else call ioa_ ("^/Your messages:^/");
	end;

	printing = "1"b;

	on condition (program_interrupt) begin;		/* pi turns off printing */
	     printing = "0"b;
	     go to REMEMBER;
	end;

	last_type = mail_type;			/* initialize some variables */
	last_sender, last_date = "";
	last_time = 0;
	five_minutes = (3*10**8)* (2**18);
	idp, stack_ptr = addr (node_space);
	idp -> stack_bits = "0"b;

	do count = 1 by 1 while (code = 0);		/* if a message is deleted while in this loop,
						   all messages after it won't get printed.
						   They will appear with next "mail". */
	     mail_format_ptr = msg_ptr;

	     if ^printing then go to REMEMBER;

	     clock = substr (id, 19, 54);
	     unspec (time) = clock;
	     call date_time_ (bin (clock, 71), atime);
	     if lines ^= 1 then s = "s";
	     else s = "";
	     i = index (mseg_return_args.sender_id, " "); /* remove instance tag */
	     if i = 0 then i = 33;
	     sender = substr (mseg_return_args.sender_id, 1, i-3);
	     j = index (sender, ".");
	     if exclude_person = "*" | exclude_person = substr (sender, 1, j-1) then go to RNEXT;
	     if exclude_project = "*" | exclude_project = substr (sender, j+1) then go to RNEXT;
	     if match_person ^= "*" & match_person ^= substr (sender, 1, j-1) then go to RNEXT;
	     if match_project ^= "*" & match_project ^= substr (sender, j+1) then go to RNEXT;
	     if head_mode then nlx = ""; else nlx = newline;

	     if mail_format.wakeup then do;		/* interractive message */
		if last_type = mail_type then do;
		     call ioa_ ("");
		     last_sender = "";
		end;
		if sender = last_sender & sent_from = last_sent_from & ^head_mode then do;
		     if time-last_time>five_minutes then
			if substr (atime, 1, 8) ^= last_date then call ioa_$nnl ("=:(^a) ", atime);
			else call ioa_$nnl ("=:(^a) ", substr (atime, index (atime, ".")-4, 6));
		     else call ioa_$nnl ("=: ");
		end;
		else if sent_from = "" | sent_from = sender
		| sent_from = substr (sender, 1, length (sender)-index (reverse (sender), ".")) then
		     call ioa_ ("^aMessage from ^a  ^a:", nlx, sender, atime);
		else call ioa_ ("^aMessage from ^a (^a)  ^a:", nlx, sender, rtrim (canon (rtrim (sent_from), length (rtrim (sent_from)))), atime);
		last_type = interactive;
		last_sender = sender;
		last_sent_from = sent_from;
		last_time = time;
		last_date = substr (atime, 1, 8);
	     end;

	     else do;
		last_type = mail_type;
		if sent_from = "" | sent_from = sender
		| sent_from = substr (sender, 1, length (sender)-index (reverse (sender), "."))
		then call ioa_ ("^a^d) From: ^a  ^a^[ (^d line^a)^;^s^s^]^a",
		     nlx, count, sender, atime, (lines > 0), lines, s, nlx);
		else call ioa_ ("^a^d) From: ^a (^a)  ^a^[ (^d line^a)^;^2s^]^a",
		     nlx, count, rtrim (canon (rtrim (sent_from), length (rtrim (sent_from)))), sender, atime, (lines > 0), lines, s, nlx);
	     end;

/* Print the message */

	     if ^head_mode then do;
		i = 1;
		do while (i <= mail_format.text_len);
		     j = min (mail_format.text_len-i+1, length (buffer));
		     buffer = rtrim (canon (substr (mail_format.text, i, j), length (substr (mail_format.text, i, j))));
		     call iox_$put_chars (iox_$user_output, addr (buffer), j, code);
		     i = i+j;
		end;
		if substr (buffer, j, 1) ^= newline then call ioa_ ("");

/* Acknowledge the message */

		if mail_format.acknowledge then do;

		     send_mail_info.version = 1;
		     send_mail_info.from = "";
		     send_mail_info.wakeup = "1"b;
		     send_mail_info.mbz1 = "0"b;
		     send_mail_info.always_add = "1"b;
		     send_mail_info.never_add = "0"b;
		     send_mail_info.mbz2 = "0"b;
		     send_mail_info.acknowledge = "0"b;
		     send_mail_info.mbz = "0"b;
		     clock = substr (mseg_return_args.id, 19, 54);
		     unspec (time) = clock;
		     call date_time_ (bin (clock, 71), atime);
		     i = length (mseg_return_args.sender_id)+1-verify (reverse (mseg_return_args.sender_id), " ");

		     call send_mail_ (substr (mseg_return_args.sender_id, 1, i-2),
			"Acknowledge message of "||atime, addr (send_mail_info), code);

		     mail_format.acknowledge = "0"b;	/* turn off acknowledge bit in message */
		     call mailbox_$update_message_index (mseg_index,
			36 * (fixed (rel (addr (mail_format.text)))-fixed (rel (addr (mail_format.version)))),
			mseg_return_args.id, mseg_return_args.msg_ptr, code);
		end;
	     end;

/* Remember to delete later */

REMEMBER:	     if ^head_mode then do;
		call get_id_node;
		idp -> id_node.next = node_ptr;
		idp = node_ptr;
		idp -> id_node.next = null;
		idp -> id_node.delete_id = id;
	     end;

/* Read the next message */

RNEXT:	     free mail_format in (area);

	     if own then call mailbox_$own_incremental_read_index (mseg_index, areap, "01"b, id, argp, code);
	     else call mailbox_$incremental_read_index (mseg_index, areap, "01"b, id, argp, code);

	end;

	revert condition (program_interrupt);
	on condition (program_interrupt) go to QUERY;

	if code ^= error_table_$no_message then go to ERROR1;

QUERY:	if node_index = 0 then answer = "no";
	else call command_query_ (addr (query_info), answer, command, "Delete?");
	revert condition (program_interrupt);
	if answer ^= "yes" then go to CLOSE;

	count = 0;
	idp = addr (node_space);
	do while (idp ^= null);
	     count = count+1;
	     call mailbox_$delete_index (mseg_index, idp -> id_node.delete_id, code);
	     if code ^= 0 then do;
		call com_err_ (code, command, "Message ^d not deleted.", count);
		code = 0;
	     end;
	     idp = idp -> id_node.next;
	end;

	go to CLOSE;
						/*  */
/* Send mail */

SEND:	notify_sw = "1"b;
	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, ap, al, code);
	     if substr (arg, 1, 1) = "-" then		/* look for control arguments */
		if arg = "-acknowledge" | arg = "-ack" then acknowledge = "1"b;
		else if arg = "-notify" | arg = "-nt" then notify_sw = "1"b;
		else if arg = "-no_notify" | arg = "-nnt" then notify_sw = "0"b;
		else if arg ^= "-pathname" & arg ^= "-pn" then do;
		     call com_err_ (error_table_$badopt, "mail", "^a", arg);
		     return;
		end;
	end;

	on condition (record_quota_overflow) begin;	/* from adding a message */
	     call com_err_ (error_table_$rqover, command,
		"Unable to add message to mailbox ^a^[>^]^a", dn, dn ^= ">", en);
	     call save;
	     go to RETURN;
	end;

	argno = 1;
GET_PATH:	call cu_$arg_ptr (argno, ap, al, code);
	argno = argno+1;
	if substr (arg, 1, 1) = "-" then go to GET_PATH;
	buffer = arg;
	if buffer = ">" then do;
	     code = error_table_$root;
	     go to ERROR2;
	end;
	text_length = 0;
	mail_format_ptr = null;
	call user_info_ (sender_name);

SEND_LOOP:
	call cu_$arg_ptr (argno, ap, al, code);
	if code ^= 0 then do;			/* Normal exit - no more destinations */
CLEANUP:	     call mail_cleanup;
	     return;
	end;
	if substr (arg, 1, 1) = "-" then
	     if arg = "-pathname" | arg = "-pn" then do;
		argno = argno + 1;
		call cu_$arg_ptr (argno, ap, al, code);
		if code ^= 0 then do;
		     call com_err_ (0, command, "No value specified for -pathname");
		     return;
		end;
		call expand_pathname_$add_suffix (arg, "mbx", dn, en, code);
		if code ^= 0 then do;
		     call com_err_ (code, command, "^a", arg);
		     return;
		end;
		go to OPEN;
	     end;
	     else do;
		argno = argno+1;
		go to SEND_LOOP;
	     end;
	i = index (arg, ".");
	if i ^= 0 then do;				/* Person.Project destination */
	     argno = argno-1;
	     name, vname = substr (arg, 1, i-1);
	     proj, vproj = substr (arg, i+1);
	end;
	else do;
	     name, vname = arg;
GET_PROJ:	     call cu_$arg_ptr (argno+1, ap, al, code);
	     if code ^= 0 then do;
NO_PROJ:		call com_err_ (0, command, "No project name specified for ^a.", vname);
		call save;
		return;
	     end;
	     if substr (arg, 1, 1) = "-" then
		if arg = "-pathname" | arg = "-pn" then go to NO_PROJ;
		else do;
		     argno = argno+1;
		     go to GET_PROJ;
		end;
	     proj, vproj = arg;			/* project id for concatenating */
	end;
	en = vname || ".mbx";
	dn = ">udd>" || vproj || ">" || vname;

OPEN:	call mailbox_$open (dn, en, mseg_index, code);	/* get index of mailbox */
	if code ^= 0 then do;
	     call com_err_ (code, command, "^a^[>^]^a", dn, dn ^= ">", en);
	     call save;
	     go to NEXT;
	end;
	else do;
	     call mailbox_$get_mode_index (mseg_index, exmode, code); /* get effective access to mailbox */
	     if ^substr (exmode, 1, 1) then do;		/* no "a" access */
		call com_err_ (0, command,
		     "Insufficient access to send to ^a^[>^]^a", dn, dn ^= ">", en);
		call save;
		go to NEXT;
	     end;
	end;

	if ^got_input then do;			/* copy the message in once */

	     areap = get_system_free_area_ ();

	     nlines = 0;
	     if buffer = "*" then do;			/* console input */
		console = "1"b;
		got_input = "1"b;
		segp = addr (page);

		on condition (program_interrupt) begin; /* pi saves what is typed so far and quits */
		     call save;
		     go to CLOSE;
		end;

		call ioa_ ("Input:");

		more = "1"b;
		do while (more);
		     call iox_$get_line (iox_$user_input, addr (buffer), 168, j, code);
		     if code ^= 0 then if code ^= error_table_$long_record then do;
			     call save;
			     buffer = "user_input";
			     go to ERROR2;
			end;

		     if j = 2 & substr (buffer, 1, 1) = "." then more = "0"b; /* dot ends input mode */
		     else do;
			if text_length+j>4096 then do;
			     call com_err_ (0, command, "Message cannot be longer than 1 record.");
			     call save;
			     return;
			end;
			if code ^= error_table_$long_record then nlines = nlines + 1;
			substr (segp -> segment, text_length+1, j) = substr (buffer, 1, j); /* copy the line in */
			text_length = text_length+j;
		     end;
		end;

		revert condition (program_interrupt);
		if nlines = 0 then return;
		bitcnt = text_length*9;
	     end;
	     else do;				/* input is a segment */
		got_input = "1"b;
		call expand_pathname_ (rtrim (buffer), dn, en, code);
		if code ^= 0 then go to ERROR2;

		call hcs_$initiate_count (dn, en, "", bitcnt, 1, segp, code);
		if segp = null then go to ERROR1;

		seg_initiated = "1"b;

		call hcs_$fs_get_mode (segp, mode, code); /* see if access to read */
		if mode<1000b then if code = 0 then do;
			call com_err_ (0, command, "Need ""r"" access to ^a^[>^]^a", dn, dn ^= ">", en);
			call hcs_$terminate_noname (segp, code);
			go to CLOSE;
		     end;
		text_length = divide (bitcnt+8, 9, 17, 0);
		chars = text_length;
		if text_length>4096 then do;
		     call com_err_ (0, command, "Message cannot be longer than 1 record.");
		     go to CLOSE;
		end;
		count = 1;
NL_LOOP:		i = index (substr (segp -> segment, count, chars), newline);
		if i>0 then do;
		     count = count+i;
		     chars = chars-i;
		     nlines = nlines+1;		/* count newlines in input segment */
		     go to NL_LOOP;
		end;
	     end;
	end;

	allocate mail_format in (area) set (mail_format_ptr);
	header_length = size (mail_format)-divide (text_length, 4, 17, 0);
	mail_format.version = MAIL_FORMAT_VERSION_4;
	mail_format.sent_from = sender_name;		/* login name */
	mail_format.lines = nlines;
	mail_format.acknowledge = acknowledge;
	mail_format.wakeup, mail_format.urgent, mail_format.seen, mail_format.others = "0"b;
	mail_format.text = substr (segp -> segment, 1, text_length);
	msg_bitcnt = bitcnt+36*header_length;		/* total bit count includes header */

	call mailbox_$add_index (mseg_index, mail_format_ptr, msg_bitcnt, id, code); /* try to add the message */
	if code ^= 0 then
	     if code = error_table_$bad_segment then go to ERROR1;
	     else do;
		call com_err_ (code, command,
		     "Unable to add message to mailbox ^a^[>^]^a", dn, dn ^= ">", en);
		call save;
	     end;

	else if notify_sw then call send_message_$notify_mail (name, proj, code); /* send notification */

NEXT:	argno = argno+2;				/* on to the next pair */
	call mailbox_$close (mseg_index, code);
	go to SEND_LOOP;
						/*  */
						/* save a message in working_dir>unsent_mail */

save:	proc;

	     if saved then return;			/* do not save twice */
	     if ^console | ^got_input then return;
	     if text_length = 0 then return;
	     saved = "1"b;
	     dn = get_wdir_ ();

	     on condition (record_quota_overflow) begin;	/* from unsent_mail */
		call hcs_$delentry_file (dn, "unsent_mail", code);
		if ^pdir_flag then go to TRY_PDIR;
		call com_err_ (error_table_$rqover, command,
		     "Unable to save message in unsent_mail.");
		go to CLEANUP;
	     end;

CREATE:	     call hcs_$make_seg (dn, "unsent_mail", "", 1011b, mbxp, code);
	     if mbxp = null then do;
		if ^pdir_flag then go to TRY_PDIR;
		call com_err_ (code, command, "Unable to save message in unsent_mail.");
		go to CLOSE;
	     end;

	     on condition (no_write_permission) begin;
		if ^pdir_flag then go to TRY_PDIR;
	     end;

	     substr (mbxp -> segment, 1, text_length) = substr (segp -> segment, 1, text_length);

	     bitcnt = text_length*9;
	     call hcs_$set_bc_seg (mbxp, bitcnt, code);

	     if pdir_flag then call ioa_ ("Text was saved in unsent_mail in process directory.");
	     else call ioa_ ("Text was saved in unsent_mail.");

	     return;


TRY_PDIR:	     pdir_flag = "1"b;
	     dn = get_pdir_ ();
	     go to CREATE;

	end save;
						/*  */
ERROR1:	if code = error_table_$bad_segment then do;
	     call com_err_ (code, command,
		"^a^[>^]^a^/Mailbox has been salvaged. Try again.", dn, dn ^= ">", en);
	     call save;
	end;
	else call com_err_ (code, command, "^a^[>^]^a", dn, dn ^= ">", en);
	go to CLOSE;

ERROR2:	call com_err_ (code, command, "^a", buffer);

CLOSE:	if ^my_mbx & mseg_index ^= 0 then call mailbox_$close (mseg_index, code);
	if seg_initiated then call hcs_$terminate_noname (segp, code);

RETURN:	return;


/* This procedure removes control characters (except backspace, tab,
   red ribbon shift, and black ribbon shift) and canonicalizes strings
   to prevent backspacing past the front of the string. */
canon: procedure (P_string, P_string_len) returns (char (*));
	dcl     P_string		 char (*) parm;
	dcl     P_string_len	 fixed bin (21) parm;
	dcl     output_string	 char (P_string_len);

	P_string = translate (P_string, alphabet);
	if index (P_string, BS) ^= 0 then do;
		output_string = "";
		call canonicalize_ (addr (P_string), length (P_string), addr (output_string), P_string_len, (0));
		return (output_string);
	     end;
	else return (P_string);
     end canon;

get_id_node: proc;

	     node_index = node_index+1;
	     if node_index>24 then do;		/* allocate another block of 24 */
		call cu_$grow_stack_frame (96, stack_ptr, code);
		stack_bits = "0"b;
		node_index = 1;
	     end;
	     node_ptr = addr (node (node_index));

	end get_id_node;


mail_cleanup: proc;

	     if mail_format_ptr ^= null then free mail_format in (area);
	     if mbxp ^= null then call hcs_$terminate_noname (mbxp, code);
	     if ^my_mbx & mseg_index ^= 0 then call mailbox_$close (mseg_index, code);
	     if seg_initiated then call hcs_$terminate_noname (segp, code);

	end mail_cleanup;

     end mail;
