/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


multi_decimal_op_:
	procedure(poperation,pop3,pdesc3,pop1,pdesc1);

dcl	poperation fixed bin,
	(pop3,pop1)	char(1) unal,
	(pdesc1,pdesc3)	bit(36) aligned;

dcl	cu_$arg_count entry(fixed bin),
	cu_$arg_ptr entry(fixed bin,ptr,fixed bin,fixed bin),
	decimal_op_ entry(fixed bin,char(1) unal, bit(36) aligned,
		char(1) unal, bit(36) aligned, char(1) unal, bit(36) aligned);

dcl	desc bit(36) aligned,
	desc_fix bit(36) aligned static init("100101000000000000000000000000111111"b),
	desc_flt bit(36) aligned static init("100100100000000000000000000000111111"b);

dcl	t char(1) unal defined(t1),
	t1 char(65) unaligned static init((65)"0");

dcl	op2 char(1) unal based(op2_ptr),
	desc2 bit(36) aligned based(desc2_ptr),
	(op2_ptr,desc2_ptr) ptr;

dcl	(code,i,junk,n) fixed bin;

dcl	addition fixed bin static init(1);

dcl	zero char(1) unal defined(z),
	z char(3) unal static init("+0"),
	zero_desc bit(36) aligned static init("100100100000000000000000000000000001"b);

	call cu_$arg_count(n);

	if substr(pdesc3,5,3) = "001"b		/* real fixed dec */
	then desc = desc_fix;
	else desc = desc_flt;

	call cu_$arg_ptr(6,op2_ptr,junk,code);
	call cu_$arg_ptr(7,desc2_ptr,junk,code);

	call decimal_op_(poperation,t,desc,pop1,pdesc1,op2,desc2);

	do i = 8 to n-1 by 2;

		call cu_$arg_ptr(i,op2_ptr,junk,code);
		call cu_$arg_ptr(i+1,desc2_ptr,junk,code);

		call decimal_op_(poperation,t,desc,t,desc,op2,desc2);

	end;

	call decimal_op_(addition,pop3,pdesc3,t,desc,zero,zero_desc);

end multi_decimal_op_;
