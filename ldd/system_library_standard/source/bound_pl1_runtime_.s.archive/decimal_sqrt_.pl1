/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


decimal_sqrt_:	procedure(presult,prdesc,parg,padesc);

/* procedure to get sqrt(parg) using decimal arithmetic */

dcl	presult char(1) unal,
	prdesc bit(36) aligned,
	parg char(1) unal,
	padesc bit(36) aligned;

dcl	1 adesc aligned,	/* argument descriptor */
		2 flag bit(1) unal,
		2 type bit(6) unal,
		2 packed bit(1) unal,
		2 number_dims bit(4) unal,
		2 scale bit(12) unal,
		2 precision bit(12) unal;

dcl	1 rdesc like adesc aligned;		/* result descriptor (full) */

dcl	desc_fix bit(36) aligned int static init("100100100000000000000000000000000000"b);

dcl	zero char(64)  internal static init("+000000000000000000000000000000000000000000000000000000000000000");
dcl	azero char(1) unal defined(zero);

dcl  (	addition 		init(1),
	subtraction	init(2)) fixed bin(17) int static;

dcl	(exp,scale,length,j,n2move) fixed bin(17);
dcl	aprec	fixed bin(17);	/* precision of argument */
dcl	iprec 	fixed bin(17);	/* precision of i */
dcl	rprec	fixed bin(17);	/* precision of result */
dcl	ip1	fixed bin(17);	/* short precision of i */
dcl	rp1	fixed bin(17);	/* short precision of result */

dcl	ch char(1) aligned;

dcl	(arg,atemp,istring,result) char(64) ;

dcl  (	a defined (arg),
	at defined (atemp),
	i defined (istring),
	r defined (result)) char(1) unal;

dcl	1 idesc like adesc aligned;
dcl	1 idesc1 like adesc aligned;
dcl 	1 rdesc1 like adesc aligned;

dcl  (	ad based(addr(adesc)),
	rd based(addr(rdesc)),
	id based(addr(idesc)),
	rd1 based(addr(rdesc1)),
	id1 based(addr(idesc1))) bit(36) aligned;

dcl  (	one init("+1"),
	two init("+2"),
	nine init("+9")) char(2) ;

dcl  (	c1 defined(one),
	c2 defined(two),
	c9 defined(nine)) char(1) unal;

dcl	cdesc bit(36) aligned int static init("100100100000000000000000000000000001"b);

/* Function definitions */

dcl 	code_ entry(fixed bin);
dcl	decimal_op_ entry(fixed bin,char(1),bit(36) aligned,char(1),bit(36) aligned,
			char(1),bit(36) aligned);

dcl	(addr,bit,divide,fixed,min,mod,substr,unspec) builtin;

/*  */

begin:
	ad = padesc;

/* Set up argument and descriptors */

	aprec = fixed(adesc.precision,12);
	length = aprec + 1;
	if substr(adesc.type,6,1) then
	do;	/* fixed decimal */
		scale = fixed(adesc.scale,12);
		if scale > 2047 then scale = scale - 4096;
		exp = -scale;
		adesc.scale = (12)"0"b;
	end;
	else
	do;	/* float decimal */
		ch = substr(parg,length+1,1);
		exp = fixed(unspec(ch),9);
		if exp >= 128 then exp = exp - 256;
		substr(adesc.type,5,2) = "01"b;
	end;

/* Move decimal point to left end of string */

	exp = exp + aprec;

/* Set up precisions and descriptors */

	rprec = aprec;
	aprec = min(aprec+2,63);
	adesc.precision = bit(fixed(aprec,12),12);
	result, arg = zero;
	rd = desc_fix;
	rdesc.precision = bit(fixed(rprec,12),12);

/* Normalize arg as we move it over */

	do j = 2 to length while (substr(parg,j,1) = "0");
	end;
	n2move = length + 1 - j;
	exp = exp - (j-2);
	if n2move > 0 then substr(arg,2,n2move) = substr(parg,j,n2move);
	else go to return;
	if substr(parg,1,1) = "-" then call code_(22);

/* Finish setting up descriptors */

	length = aprec + 1;
	iprec = aprec;
	id = ad;
	rd1 = rd;
	rdesc1.precision = "000000000001"b;
	rp1 = 1;
	id1 = id;
	idesc1.precision = "000000000010"b;
	ip1 = 2;

/* Initialize istring to +01000...0 */

	istring = zero;
	substr(istring,3,1) = "1";

/* Adjust if exponent is odd */

	if mod(exp,2) ^= 0 then
	do;
		exp = exp + 1;
		idesc1.precision = "000000000001"b;
		ip1 = 1;
		substr(istring,2,2) = "10";
	end;

/* Set exponent */

	exp = divide(exp,2,17,0);

/* Subtract-loop */

sloop:
	call decimal_op_(subtraction,at,ad,a,ad,i,id);
	if at = "+" then
do;
		substr(arg,1,length) = substr(atemp,1,length);
		call decimal_op_(addition,i,id1,i,id1,c2,cdesc);
		call decimal_op_(addition,r,rd1,r,rd1,c1,cdesc);
		go to sloop;
	end;

/* Shift precisions for next round */

	rp1 = rp1 + 1;
	if rp1 <= rprec then
	do;
		ip1 = ip1 + 1;
		idesc1.precision = bit(fixed(ip1,12),12);
		rdesc1.precision = bit(fixed(rp1,12),12);
		call decimal_op_(subtraction,i,id1,i,id1,c9,cdesc);
		iprec = iprec - 1;
		idesc.precision = bit(fixed(iprec,12),12);
		go to sloop;
	end;

	else

/* Return the result */

return:	do;
		exp = exp - rprec;	/* Move decimal point back to right end of string */
		scale = -exp;
		if scale < 0 then scale = scale + 4096;
		rdesc.scale = bit(fixed(scale,12),12);
		call decimal_op_(addition,presult,prdesc,r,rd,azero,rd);
		return;
	end;
end;
