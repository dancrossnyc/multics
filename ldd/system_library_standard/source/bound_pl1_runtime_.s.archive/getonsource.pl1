/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


getonsource:	proc() returns(char(*)) options(support);

%include on_data_;


	return(ondata_$onsource);

get_onfield:	entry() returns(char(*));

	return(ondata_$datafield);

get_onfile:	entry() returns(char(*));

	return(ondata_$onfile);

get_onkey:	entry() returns(char(*));

	return(ondata_$onkey);

/**/
get_onloc:	entry() returns(char(*));


dcl  i fixed bin;
dcl  segno fixed bin(18);
dcl  code fixed bin(35);

dcl  spno bit(18) aligned;

dcl  ename char(256) aligned;
dcl  lang char(8) aligned;

dcl  nsp ptr;

dcl (baseno, addr, null, index, substr) builtin;
dcl  find_condition_info_ entry(ptr, ptr, fixed bin(35));
dcl  find_condition_frame_ entry(ptr) returns(ptr);
dcl  get_entry_name_ entry(ptr, char(*) aligned, fixed bin(18), char(8) aligned, fixed bin(35));
dcl  error_table_$begin_block fixed bin(35) external;

%include condition_info;
declare 1 CI aligned like condition_info;

%include pl1_info;
%include condition_info_header;

/**/

%include stack_frame;


/**/
/* onloc is valid for all conditions.  This procedure looks for the  stack frame
   belonging to the most recent non-support procedure before the most recent condition
   and returns the entry name associated with the frame */

	sp = find_condition_frame_(null);		/* get ptr to stack frame */
	if sp = null then return ("");

	call find_condition_info_(sp, addr(CI), code);
	if code ^= 0 then return ("");

	nsp = sp;					/* initialize ptr to be used */
	if CI.loc_ptr ^= CI.user_loc_ptr then do;		/* look for non-support frame */
	     spno = baseno (sp);
	     do while (baseno(nsp -> stack_frame.prev_sp) = spno); /* look thru current stack */
		nsp = nsp -> stack_frame.prev_sp;
		if ^nsp -> stack_frame_flags.support then go to get_name; /* found one */
	     end;
	     nsp = sp;				/* can't find non-support; use condition frame */
	end;

get_name:
	call get_entry_name_(nsp -> stack_frame.entry_ptr, ename, segno, lang, code);
	if code ^= 0 then if code = error_table_$begin_block
	     then do;
		nsp = nsp -> stack_frame.prev_sp;
		go to get_name;
	     end;
	     else ename = " ";
	i = index(ename, " ") - 1;			/* need exact length for return */
	if i = -1 then i = 0;

	return (substr(ename, 1, i));

	end;
