/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


complex_decimal_op_: procedure(poperation, pop3, pdesc3, pop1, pdesc1, pop2, pdesc2);

/*	Program to implement PL/I Version II runtime complex decimal operators

	Initial Version:	28 April 1972 by Paul Green
	Modified:		19 October 1972 by Richard A. Barnes
*/

dcl	poperation fixed bin,
	pop3	char(1) unal,
	pdesc3	bit(36) aligned,
	pop1	char(1) unal,
	pdesc1	bit(36) aligned,
	pop2	char(1) unal,
	pdesc2	bit(36) aligned;

dcl (	desc1,desc2,desc3) bit(36) aligned;
dcl	operation fixed bin;
dcl	based_fb based fixed bin;
dcl	based_ch based char(1) unal;
dcl (	a based(p),
	b based(q),
	c based(r),
	d based(s),
	e based(t),
	f based(u)) char(1) unal;
dcl (	p,q,r,s,t,u) ptr;
dcl	zero char(65) internal static initial("+000000000000000000000000000000000000000000000000000000000000000");
dcl	adj(0:l1) char(1) based unal;
dcl (	l1,l2,l3) fixed bin;
dcl (	binary, substr, addr) builtin;
dcl	desc_fix bit(36) aligned int static init("100100100000000000000000000000000000"b);
dcl	desc_flt bit(36) aligned int static init("100101000000000000000000000000000000"b);
dcl	desc bit(36) aligned;
dcl	d1 bit(36) aligned defined(desc);
dcl	(d2,d3,d4) bit(36) aligned;
dcl	decimal_op_ entry(fixed bin,char(1)unal,bit(36)aligned,char(1)unal,bit(36)aligned,char(1)unal,bit(36)aligned);
dcl	decimal_sqrt_ entry(char(1),bit(36) aligned,char(1),bit(36) aligned);
dcl (	t1 defined (t11),
	t2 defined (t22),
	t3 defined (t33),
	t4 defined (t44),
	t5 defined (t55),
	t6 defined (t66)) char(1) unaligned;
dcl (	t11,t22,t33,t44,t55,t66) char(65) unaligned;
dcl	azero defined(zero) char(1) unal;
dcl (	comparision	initial(0),
	addition		initial(1),
	subtraction	initial(2),
	multiplication	initial(3),
	division		initial(4),
	negate		initial(5),
	real_fun		initial(6),
	imag_fun		initial(7),
	round_fun		initial(8),
	complex_fun	initial(9),
	abs_fun		initial(10),
	conjg_fun		initial(11)) fixed binary internal static;

/*	(e + fi) = pop3
	(a + bi) = pop1
	(c + di) = pop2

	(a + bi) + (c + di) = ((a + c) + (b + d)i)
	(a + bi) - (c + di) = ((a - c) + (b - d)i)
	(a + bi) * (c + di) = ((a*c - b*d) + (a*d + b*c)i)
	(a + bi) / (c + di) = ((__a*__c_+___b*__d)_ + (__b*__c_-___a*__d)__i)
			   (c*c + d*d)   (c*c + d*d)
	abs((a + bi)) = sqrt(a*a + b*b)
	round((a + bi),pdesc2) = (round(a,pdesc2) + (round(b,pdesc2)i)
	- (a + bi) = (-a - bi)
*/
begin:
	operation = poperation;
	desc3 = pdesc3;
	l3 = binary(substr(desc3,25,12),12) + 1;

	if substr(desc3,5,3) = "011"b		/* complex fixed dec */
	then do;
		substr(desc3,5,3) = "001"b;	/* real fixed decimal */
		desc = desc_fix;
	     end;
	else do;
		substr(desc3,5,3) = "010"b;	/* real float dec */
		desc = desc_flt;
		l3 = l3 + 1;
	     end;
	t = addr(pop3);
	u = addr(t->adj(l3));

	desc1 = pdesc1;
	l1 = binary(substr(desc1,25,12),12) + 1;
	if substr(desc1,5,3) = "011"b		/* complex fixed dec */
	then substr(desc1,5,3) = "001"b;	/* real fixed dec */
	else if substr(desc1,5,3) = "100"b	/* complex float dec */
	     then do;
		substr(desc1,5,3) = "010"b;	/* real float decimal */
		l1 = l1 + 1;
		end;
	     else if substr(desc1,5,3) = "001"b | substr(desc1,5,3) = "010"b	/* real (fixed|float) decimal */
		then do;
			p = addr(pop1);
			q = addr(zero);
			go to check_opnd2;
		     end;
	p = addr(pop1);
	q = addr(p->adj(l1));

check_opnd2:
	if operation < negate | operation = complex_fun
	then do;
		desc2 = pdesc2;
		l2 = binary(substr(desc2,25,12),12) + 1;
		if substr(desc2,5,3) = "011"b		/* complex fixed decimal */
		then substr(desc2,5,3) = "001"b;	/* real fixed decimal */
		else if substr(desc2,5,3) = "100"b	/* complex float dec */
		     then do;
			substr(desc2,5,3) = "010"b;	/* real float decimal */
			l2 = l2 + 1;
			end;
		     else if substr(desc2,5,3) = "001"b | substr(desc2,5,3) = "010"b /* real (fixed|float) dec */
			then do;
				r = addr(pop2);
				s = addr(zero);
				go to operate;
			     end;
		r = addr(pop2);
		s = addr(r->adj(l2));
	     end;

operate:
	if operation = negate
	then do;
		call decimal_op_(operation,e,desc3,a,desc1,a,desc1);
		call decimal_op_(operation,f,desc3,b,desc1,b,desc1);
		return;
	     end;

	if operation = addition | operation = subtraction
	then do;
		call decimal_op_(operation,e,desc3,a,desc1,c,desc2);
		call decimal_op_(operation,f,desc3,b,desc1,d,desc2);
		return;
	     end;

	if operation = multiplication | operation = division
	then do;
		d2 = d1;
		call decimal_op_(multiplication,t1,d1,a,desc1,c,desc2);
		call decimal_op_(multiplication,t2,d1,b,desc1,d,desc2);
		call decimal_op_(multiplication,t3,d1,a,desc1,d,desc2);
		call decimal_op_(multiplication,t4,d1,b,desc1,c,desc2);
	     end;

	if operation = multiplication
	then do;
		call decimal_op_(subtraction,e,desc3,t1,d1,t2,d1);
		call decimal_op_(addition,f,desc3,t3,d1,t4,d1);
		return;
	     end;

	if operation = division
	then do;
		d3,d4 = d2;
		call decimal_op_(multiplication,t5,d2,c,desc2,c,desc2);
		call decimal_op_(multiplication,t6,d2,d,desc2,d,desc2);
		call decimal_op_(addition,t5,d3,t5,d2,t6,d2);
		call decimal_op_(addition,t1,d4,t1,d1,t2,d1);
		call decimal_op_(subtraction,t3,d4,t4,d1,t3,d1);
		call decimal_op_(division,e,desc3,t1,d4,t5,d3);
		call decimal_op_(division,f,desc3,t3,d4,t5,d3);
		return;
	     end;

	if operation = round_fun
	then do;
		call decimal_op_(operation,e,desc3,a,desc1,a,pdesc2);
		call decimal_op_(operation,f,desc3,b,desc1,a,pdesc2);
		return;
	     end;

	if operation = real_fun then
	do;
		call decimal_op_(addition,e,desc3,a,desc1,azero,desc1);
		return;
	end;

	if operation = imag_fun then
	do;
		call decimal_op_(addition,e,desc3,b,desc1,azero,desc1);
		return;
	end;

	if operation = complex_fun then
	do;
		call decimal_op_(addition,e,desc3,a,desc1,azero,desc1);
		call decimal_op_(addition,f,desc3,c,desc2,azero,desc2);
		return;
	end;

	if operation = abs_fun
	then do;
		d2 = d1;
		call decimal_op_(multiplication,t1,d1,a,desc1,a,desc1);
		call decimal_op_(multiplication,t2,d1,b,desc1,b,desc1);
		call decimal_op_(addition,t1,d2,t1,d1,t2,d1);
		call decimal_sqrt_(e,desc3,t1,d2);
		return;
	     end;

	if operation = conjg_fun then
	do;
		call decimal_op_(addition,e,desc3,a,desc1,azero,desc1);
		call decimal_op_(negate,f,desc3,b,desc1,b,desc1);
		return;
	end;

	if operation = comparision
	then do;
		call decimal_op_(operation,addr(l1)->based_ch,desc1,a,desc1,c,desc2);
		call decimal_op_(operation,addr(l2)->based_ch,desc1,b,desc1,d,desc2);
		if l1 = 0 & l2 = 0
		then l3 = 0;		/* = */
		else l3 = 1;		/* /= */
		t -> based_fb = l3;
		return;
	     end;
end;
