/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Decimal arithmetic runtime routines for Version II PL/1
   These routines operate on floating decimal or fixed scaled decimal numbers
   with a maximum precision of 63 digits.  The length of the number as determined
   by the input descriptor does not include the leading sign or the trailing
   exponent character in the case of floating point numbers.

   Initial Version: 16 July 1971 by PG
	Modified: 19 October 1972 by RAB */

decimal_op_: proc(poperation,pop3,pdesc3,pop1,pdesc1,pop2,pdesc2);

dcl	poperation	fixed bin,	/* operation to perform
					   0 = comparsion of op1 and op2
					   1 is op3 = op1 + op2
					   2 is op3 = op1 - op2
					   3 is op3 = op1 * op2
					   4 is op3 = op1 / op2
					   5 is op3 = - op1
					   6 is op3 = ceil(op1)
					   7 is op3 = floor(op1)
					   8 is op3 = round(op1,desc2)
					   9 is op3 = sign(op1)
					  10 is op3 = abs(op1)
					  11 is op3 = trunc(op1)
					  12 is op3 = mod(op1,op2)
					  13 is op3 = min(op1,op2)
					  14 is op3 = max(op1,op2) */
	pop3		char(1) unal,	/* result if operation is not comparsion */
	pdesc3		bit(36) aligned,	/* descriptor of op3, result if comparison */
	pop1		char(1) unal,	/* left operand */
	pdesc1		bit(36) aligned,	/* descriptor */
	pop2		char(1) unal,	/* right operand */
	pdesc2		bit(36) aligned;	/* descriptor of op2, 2nd arg of round bif */

dcl (	ans,op1,op2,product(9),remainder) char(64) aligned;
dcl (	desc1,desc2,desc3) bit(36) aligned;
dcl	max_desc bit(36) aligned int static init("100101000000000000000000000000111111"b);
dcl	decimal_op_ entry(fixed bin,char(1) unal,bit(36) aligned,char(1) unal,bit(36) aligned,char(1) unal,bit(36) aligned);
dcl	c char(1) unal based(p);
dcl	p ptr;
dcl (	sch,ch,ci,sign,sign1,sign2) char(1) aligned;
dcl (	big,carry,col1,col2,exp,i,j,k,l0,l1,l2,l3,lg3,len1,len2,n,p1,p2,
	s1,s2,scale1,scale2,scale3,sc3,st(9),sum) fixed bin;
dcl (	addr,binary,bit,divide,fixed,length,max,min,null,substr,unspec) builtin;
dcl	info bit(36) initial("111011011100010010110010000101001001"b) internal static;
dcl (	zero_op1 init(13),zero_op2 init(22)) fixed bin int static;
dcl	bit3 bit(3) aligned;
dcl (	add,float,negate,no_round,product_calculated(9),signal_ufl) bit(1) aligned;
dcl	operation fixed bin;
dcl	based_fb based fixed bin;
dcl	negabs bit(1) aligned init("0"b);

dcl (	comparison	init(0),
	addition		init(1),
	subtraction	init(2),
	multiplication	init(3),
	division		init(4),
	negation		init(5),
	ceil_fun		init(6),
	floor_fun		init(7),
	round_fun		init(8),
	sign_fun		init(9),
	abs_fun		init(10),
	trunc_fun		init(11),
	mod_fun		init(12),
	min_fun		init(13),
	max_fun		init(14)) fixed bin int static;


dcl	plio2_signal_$s_ entry(ptr,char(*) aligned,char(*) aligned,fixed bin);
dcl	condition(5) char(13) aligned internal static
	initial("SIZE","OVERFLOW","UNDERFLOW","ZERODIVIDE","FIXEDOVERFLOW");
dcl	error_number(5) fixed bin internal static initial(158,159,160,120,121);

begin:
	desc3 = pdesc3;
	desc1 = pdesc1;
	negate,
	signal_ufl = "0"b;
	operation = poperation;
	if operation = min_fun then operation = comparison;
	if operation = max_fun then operation = comparison;
	if operation = negation | operation = abs_fun
	then do;

	     /* we use the fact that op3 will have the same attributes as op1 */

	     l1 = fixed(substr(desc1,25,12),12);
	     sch = substr(pop1,1,1);
	     if operation = negation
	     then if sch = "-"
		then sch = "+";
		else sch = "-";
	     else sch = "+";
	     if substr(desc1,13,12) = substr(desc3,13,12) then /* check for equal scales */
	     do;
		if substr(desc1,7,1) = "0"b then l1 = l1 + 1;	/* floating pt */
		substr(pop3,1,1) = sch;
		substr(pop3,2,l1) = substr(pop1,2,l1);
		return;
	     end;
	     else negabs = "1"b;
	     end;

	desc2 = pdesc2;
	float = ^ substr(desc3,7,1);

	l0 = fixed(substr(desc3,25,12),12);
	if l0 = 0 then call setdesc;
	lg3 = l0 + 1;


	if float then lg3 = lg3 + 1;
	else do;
	     sc3 = fixed(substr(desc3,13,12),12);
	     if sc3 > 2047 then sc3 = sc3 - 4096;
	     end;

	l1 = fixed(substr(desc1,25,12),12) + 1;

	if substr(desc1,7,1)
	then do;

	     /* fixed decimal */

	     scale1 = fixed(substr(desc1,13,12),12);
	     if scale1 > 2047 then scale1 = scale1 - 4096;
	     end;
	else do;

	     /* float decimal */

	     ch = substr(pop1,l1+1,1);
	     exp = fixed(unspec(ch),9);
	     if exp >= 128 then exp = exp - 256;
	     scale1 = -exp;
	     end;

	if operation >= negation & operation < mod_fun
	then go to skip_opnd_two;

	l2 = fixed(substr(desc2,25,12),12) + 1;

	if substr(desc2,7,1)
	then do;

	     /* fixed decimal */

	     scale2 = fixed(substr(desc2,13,12),12);
	     if scale2 > 2047 then scale2 = scale2 - 4096;
	     end;
	else do;

	     /* float decimal */

	     ch = substr(pop2,l2+1,1);
	     exp = fixed(unspec(ch),9);
	     if exp >= 128 then exp = exp - 256;
	     scale2 = -exp;
	     end;

	op2 = (64)"0";
	sign2 = substr(pop2,1,1);
	s2 = 66-l2;
	substr(op2,s2,l2-1) = substr(pop2,2,l2-1);

	do j = s2 to 64 while( substr(op2,j,1) = "0");
	end;
	s2 = j-1;					/* s2 = verify(op2,"0") - 1;	 */
	p2 = 65-j;				/* # digits */

skip_opnd_two:
	ans, op1 = (64)"0";
	sum, carry = 0;
	sign1 = substr(pop1,1,1);
	s1 = 66-l1;
	substr(op1,s1,l1-1) = substr(pop1,2,l1-1);

	do j = s1 to 64 while( substr(op1,j,1) = "0" );	/* find true number of digits */
	end;
	s1 = j-1;					/* s1 = position to left of first non-zero digit */
	p1 = 65 - j;

	if negabs then
	do;
		sign1 = sch;
		go to assign_op1;
	end;

	if operation = division then go to divide_op;

	if operation = ceil_fun
	then do;
ceil:
		if sign1 = "-"
		then do;
			negate = "1"b;
			sign1 = "+";
			go to floor;
		     end;

		if test_fractional() > 0		/* if fractional part ^= 0 */
		then do;
			l2 = s1 + len1;
ceil_loop:		ch = substr(ans,l2,1);
			sum = fixed(unspec(ch) & "00001111"b,17);
			sum = sum + 1;
			if sum < 10 then go to ceil_out;
			sum = sum - 10;
			unspec(ch) = substr(unspec(sum),28,9) | "000110000"b;
			substr(ans,l2,1) = ch;
			l2 = l2 - 1;
			go to ceil_loop;
ceil_out:			unspec(ch) = substr(unspec(sum),28,9) | "000110000"b;
			substr(ans,l2,1) = ch;
			if substr(ans,l3,1) ^= "0"	/* carry made it longer */
			then l3 = l3 - 1;
		     end;
neg_ck:
		if negate
		then if sign1 = "-"
		     then sign = "+";
		     else sign = "-";
		go to normalize;
	     end;

	if operation = floor_fun
	then do;
floor:
		if sign1 = "-"
		then do;
			negate = "1"b;
			sign1 = "+";
			go to ceil;
		     end;

		i = test_fractional();		/* just drop fractional part */
		go to neg_ck;

	     end;

	if operation = trunc_fun
	then do;
		if sign1 = "-"
		then go to ceil;
		else go to floor;
	     end;

test_fractional: procedure returns(fixed bin);	/* VERSION II needs () */

/* This procedure assigns the non-fractional (integer) part of op into ans.
   It then returns a code indicating whether or not
   the fractional part of op1 was > 0 or = 0. */


	i = min(scale1,p1);			/* # of fractional digits */
	if i < 0
	then i = 0;

	len1 = p1 - i;			/* # of integer digits */
	ans = (64)"0";
	substr(ans,s1+1,len1) = substr(op1,s1+1,len1);
	l3 = s1;
	scale3 = scale1;
	do k = 65-i to 64 while(substr(op1,k,1) = "0");
	end;
	if k = 65
	then return(0);			/* fractional part is zero */
	else return(1);			/* fractional part non-zero */

end test_fractional;

	if operation = round_fun
	then do;
		n = addr(pdesc2)->based_fb;		/* 2nd operand of round */
		sign = sign1;
		i = min(scale1,p1);			/* # of fractional digits */
		if i < 0
		then i = 0;
		len1 = p1 - i + n + 1;		/* number of digits to move (includes column to add .5) */
		if len1 <= 0 then go to assign_zero2;
		if len1 > 65-s1
		then do;
			no_round = "1"b;
			len1 = 65-s1;
		     end;
		l3 = s1;
		scale3 = scale1;
		s1 = s1 + 1;
		ans = (64)"0";
		substr(ans,s1,len1) = substr(op1,s1,len1);
		j,k = s1 + len1 - 1;		/* column to add .5 */

		if no_round then go to normalize;
		carry = 5;
		sum = 0;

		if substr(ans,k,1) >= "5"
		then do;
round_loop:		ch = substr(ans,k,1);
			sum = fixed(unspec(ch) & "00001111"b,17);
			sum = sum + carry;
			if sum < 10 then go to round_out;
			sum = sum - 10;
			unspec(ch) = substr(unspec(sum),28,9) | "000110000"b;
			substr(ans,k,1) = ch;
			k = k - 1;
			carry = 1;
			go to round_loop;
round_out:		unspec(ch) = substr(unspec(sum),28,9) | "000110000"b;
			substr(ans,k,1) = ch;
		     end;
		substr(ans,j,1) = "0";		/* zap down digit from +.5 */
		go to normalize;
	     end;

	if operation = sign_fun
	then do;
		if sign1 = "-"
		then i = -1;
		else if p1 = 0
		     then if substr(desc1,7,1)	/* fixed point zero */
			then i = 0;
			else if scale1 = -127	/* floating point zero */
			     then i = 0;
			     else i = 1;
		     else i = 1;
		addr(pop3)->based_fb = i;
		return;
	     end;

	if operation = mod_fun
	then do;
		p = addr(ans);
		call decimal_op_(division,c,max_desc,pop1,pdesc1,pop2,pdesc2);
		call decimal_op_(floor_fun,c,max_desc,c,max_desc,pop2,pdesc2);
		call decimal_op_(multiplication,c,max_desc,c,max_desc,pop2,pdesc2);
		call decimal_op_(subtraction,pop3,pdesc3,pop1,pdesc1,c,max_desc);
		return;
	     end;

	i = scale1;
	j = scale2;

	if operation ^= comparison
	then do;
		if p1 = 0
		then do;
			if operation = multiplication then go to assign_zero2;
			if p2 = 0 then go to assign_zero2;
			go to assign_op2;
		     end;
		if p2 = 0
		then do;
			if operation = multiplication then go to assign_zero2;
			go to assign_op1;
		     end;

		if operation = multiplication then go to multiply_op;
		if operation = addition then add = "1"b; else add = "0"b;
	     end;

	scale3 = max(scale1,scale2);				/* pl1 language rules for scale of result */
	col1 = s1 - scale3 + scale1 + 1;			/* re-align operands to account for scales */
	col2 = s2 - scale3 + scale2 + 1;
	len1 = min(65-col1,p1);
	len2 = min(65-col2,p2);

	if float 						/* force number to start in at least column 2 */
	then do;
		if col1 < 2
		then do;
			k = 2-col1;
again:			col1 = col1 + k;
			col2 = col2 + k;
			scale1 = scale1 - k;
			scale2 = scale2 - k;
			scale3 = scale3 - k;
		     end;
		if col2 < 2
		then do;
			k = 2-col2;
			go to again;
		     end;
	     end;
	else if operation ^= comparison
	     then do;
		if col1 < 2 then go to signal_size;
		if col2 < 2 then go to signal_size;
		end;

	if operation ^= comparison
	then do;
		if len1 < 1				/* operand one was zero */
		then do;
			if len2 < 1 then go to assign_zero2;	/* both are zero */
assign_op2:
			ans = (64)"0";
			substr(ans,s2+1,p2) = substr(pop2,l2-p2+1,p2);
			if operation = subtraction then if sign2 = "+" then sign2 = "-";
							else sign2 = "+";
			sign = sign2;
			l3 = s2;
			scale3 = j;
			go to normalize;
		     end;
		if len2 < 1				/* operand two was zero */
		then do;
assign_op1:
			ans = (64)"0";
			substr(ans,s1+1,p1) = substr(pop1,l1-p1+1,p1);
			sign = sign1;
			l3 = s1;
			scale3 = i;
			go to normalize;
		     end;
	     end;
	else do;
		if col1 ^= col2 then go to test;
		if col1 < 2
		then do;
			n = l1 - p1 + 1;
			k = l2 - p2 + 1;
compare_long_fixed_loop:
			ch = substr(op1,n,1);
			ci = substr(op2,k,1);
			if ch > ci			/* op1 > op2 */
			then do;
				big = 1;
				go to compare;
			     end;
			if ch < ci			/* op1 < op2 */
			then do;
				big = -1;
				go to compare;
			     end;
			if n = 64
			then do;				/* op1 is shorter */
				do n = k+1 to 64 while(substr(op2,n,1) = "0");
				end;
				if n = 65
				then do;			/* op1 = op2 */
compare_equal:				big = 0;
					go to compare;
				     end;
				big = -1;			/* op1 < op2 */
				go to compare;
			     end;
			if k = 64
			then do;				/* op2 shorter */
				do k = n+1 to 64 while(substr(op1,k,1) = "0");
				end;
				if k = 65 then go to compare_equal;	/* op1 = op2 */
				big = 1;			/* op1 > op2 */
				go to compare;
			     end;
			k = k + 1;
			n = n + 1;
			go to compare_long_fixed_loop;
		     end;
	     end;
	op1,op2 = (64)"0";
	substr(op1,col1,len1) = substr(pop1,l1-p1+1,len1);	/* final alignment prior to operation */
	substr(op2,col2,len2) = substr(pop2,l2-p2+1,len2);	/* takes care of lengths and scale.   */
	p1 = 65-col1;
	p2 = 65-col2;

/* Now determine which operand has the larger magnitude, and make it operand one. */

test:
	if len1 > len2
	then big = 1;
	else if len2 > len1
	     then big = -1;
	     else do;
		do n = col1 to 64 while(substr(op1,n,1) = substr(op2,n,1));
		end;
		if n = 65
		then big = 0;
		else if substr(op2,n,1) < substr(op1,n,1)
		     then big = 1;
		     else big = -1;
		end;

	if operation = comparison
	then do;
compare:
		if big ^= 0
		     then if sign1 = "+"
			     then if sign2 = "-"
				     then big = 1;
				     else;
			     else if sign2 = "+"
				     then big = -1;
				     else big = -big;

		if poperation = min_fun
		then if big <= 0
		     then go to assign_op1;
		     else go to assign_op2;
		if poperation = max_fun
		then if big <= 0
		     then go to assign_op2;
		     else go to assign_op1;

		addr(pdesc3)->based_fb = big;
		return;
	     end;

/* Simulate a 3-dimensional array, and use "info" to determine whether the operands
   must be switched, what the operation will be, and the sign of the result.	*/

	s1 = col1-1;
	s2 = col2-1;
	j = 1;
	if ^add
	then if sign2 = "-"
	     then sign2 = "+";
	     else sign2 = "-";
	if sign1 = "-" then j = j + 18;
	if sign2 = "-" then j = j + 9;
	if big = 0 then j = j + 3;
	else if big = 1 then j = j + 6;
	if j = zero_op1 | j = zero_op2 then go to assign_zero2;
	bit3 = substr(info,j,3);
	add = substr(bit3,3,1);
	if substr(bit3,1,1)					/* switch bit */
	then do;
		ans = op1;
		op1 = op2;
		op2 = ans;
		ans = (64)"0";
		k = s1;
		s1 = s2;
		s2 = k;
	     end;
	if substr(bit3,2,1)					/* sign bit */
	then sign = "+";
	else sign = "-";
	l1,l2,l3 = 64;

/* Loop to perform addition or subtraction. op2 <= op1 */

loop1:
	ch = substr(op2,l2,1);
	k = fixed(unspec(ch) & "000001111"b);		/* convert ASCII to BINARY */

loop2:
	ch = substr(op1,l1,1);
	i = fixed(unspec(ch) & "000001111"b,15,0);

	if add
	then do;
		sum = i + k + carry;
		carry = 0;
		if sum >= 10
		then do;
			sum = sum - 10;
			carry = 1;
		     end;
	     end;
	else do;
		sum = i - k - carry;
		carry = 0;
		if sum < 0
		then do;
			sum = sum + 10;
			carry = 1;			/* really borrow! */
		     end;
	     end;
	unspec(ch) = substr(unspec(sum),28,9) | "000110000"b;
	substr(ans,l3,1) = ch;

	l3 = l3-1;
	l2 = l2-1;
	l1 = l1-1;

	if s2 < l2 then go to loop1;
	k = 0;
	if s1 < l1 then go to loop2;
	if carry ^= 0
	then do;
		unspec(ch) = substr(unspec(carry),28,9) | "000110000"b;
		substr(ans,l3,1) = ch;
		l3 = l3 - 1;
		if l3 < 1 & ^float then go to signal_fixedoverflow;	/* result has > 63 digits */
	     end;
	go to normalize;

multiply_op:
	if sign1 = sign2
	then sign = "+";
	else sign = "-";
	l3 = 128 - s1 - s2;					/* precision of result. */

	if l3 >= 64
	then if ^float
	     then do;					/* product will have > 63 digits */
signal_fixedoverflow:
		i = 5;					/* fixedoverflow */
		go to signal;
		end;
	     else do;
		if s1 < 33
		then if s2 < 33
		     then do;
			k = 33 - s1;			/* truncate op1 & op2 */
			j = 33 - s2;
			end;
		     else do;
			k = 64 - s1 - s2;			/* truncate op1 */
			j = 0;
			end;
		else do;
			k = 0;				/* truncate op2 */
			j = 64 - s2 - s1;
		     end;

		if k ^= 0
		then do;
			col1 = s1 + 1 + k;
			len1 = 64 - s1 - k;
			scale1 = scale1 - k;
			op1 = (64)"0";
			substr(op1,col1,len1) = substr(pop1,l1+s1-63,len1);
			s1 = s1 + k;
		     end;
		if j ^= 0
		then do;
			col2 = s2 + 1 + j;
			len2 = 64 - s2 - j;
			scale2 = scale2 - j;
			op2 = (64)"0";
			substr(op2,col2,len2) = substr(pop2,l2+s2-63,len2);
			s2 = s2 + j;
		     end;
		end;

	scale3 = scale1 + scale2;
	ans = (64)" ";					/* \000 */

	do l2 = 64 to s2+1 by -1;
	     ch = substr(op2,l2,1);
	     k = fixed(unspec(ch) & "000001111"b,15,0);

	     do l1 = 64 to s1+1 by -1;
		ch = substr(op1,l1,1);
		i = fixed(unspec(ch) & "000001111"b,15,0);

		l3 = l1 + l2 - 64;
		ch = substr(ans,l3,1);
		j = fixed(unspec(ch),15,0);			/* stored as fixed bin(8) until addition finished. */

		sum = i*k + j + carry;
		carry = 0;
loop_carry:
		if sum >= 10
		then do;
			sum = sum - 10;
			carry = carry + 1;
			go to loop_carry;
		     end;

		unspec(ch) = substr(unspec(sum),28,9);
		substr(ans,l3,1) = ch;
	     end;

	     if carry ^= 0
	     then do;
		l3 = l3 - 1;
		sum = carry;
		carry = 0;
		unspec(ch) = substr(unspec(sum),28,9);
		substr(ans,l3,1) = ch;
		end;
	end;

	do i = 1 to 61 by 4;
	unspec(substr(ans,i,4)) = unspec(substr(ans,i,4)) | (4)"000110000"b;
	end;

	l3 = l3 - 1;					/* = l1 + l2 - 65 */
	go to normalize;

divide_op:
	if s2 = 64
	then do;
		i = 4;					/* zerodivide */
		go to signal;
	     end;
	if s1 = 64 then go to assign_zero2;
	if sign1 = sign2
	then sign = "+";
	else sign = "-";
	if float
	then l1 = lg3 - 2;
	else l1 = lg3 - 1;

	scale3 = s1 + scale1 - scale2;			/* scale of quotient */
	remainder = (64)"0";
	substr(remainder,1,64-s1) = substr(op1,s1+1,64-s1);	/* dividend */
	product(1) = op2;					/* divisor */
	product_calculated(1) = "1"b;
	do i = 2 to 9;
	product_calculated(i) = "0"b;
	end;
	substr(product(1),s2,1) = "0";			/* erase sign */
	st(1) = s2;
	j = 0;
	len2 = 64 - s2;					/* # digits in rem */
	if float
	then do;
		l3 = 1;
		scale3 = scale3 + len2 - 1;
	     end;
	else l3 = len2;

divide_estimate:
	col1 = 1;
	col2 = s2+1;
	i = 64-s2;					/* # digits in divisor */
	if len2 < i
	then do;
		l3 = l3 + i - len2;				/* zeros in result */
		if l3 >= l1
		then do;
			l3 = l1;
			go to divide_finish;
		     end;
		len2 = i;					/* make rem same length as divisor */
	     end;
	else if i < len2 then go to divide_est3;		/* rem is greater than divisor */
divide_est2:
	ch = substr(remainder,col1,1);
	ci = substr(op2,col2,1);

	if ch = ci					/* can't tell */
	then do;
		col1 = col1+1;
		col2 = col2+1;
		if 64 >= col1 & 64 >= col2 then go to divide_est2;
	     end;

	if ch < ci					/* won't divide */
	then do;
		if l3 >= l1 then go to divide_finish;
		l3 = l3 + 1;				/* digit = "0" */
		len2 = len2 + 1;				/* incr remainder length */
divide_est3:
		ch = substr(remainder,1,1);
		i = fixed(unspec(ch) & "000001111"b,15,0);
		ch = substr(remainder,2,1);
		i = 10*i + fixed(unspec(ch) & "000001111"b,15,0);
	     end;
	else do;
		ch = substr(remainder,1,1);
		i = fixed(unspec(ch) & "000001111"b,15,0);
	     end;

	ci = substr(op2,s2+1,1);
	k = fixed(unspec(ci) & "000001111"b,15,0);
	j = divide(i,k,15,0);
	if j >= 10 then j = 9;				/* it can happen! 1/11 for instance */

/* j is the guess for how many times the divisor will go into the dividend */
/* Now calculate the product of j and op2 */

divide_product:
	if ^product_calculated(j)
	then do;
		carry, sum = 0;
		product(j) = (64)"0";
		do l2 = 64 to s2+1 by -1;
			ch = substr(op2,l2,1);
			k = fixed(unspec(ch) & "000001111"b,15,0);
			sum = j*k + carry;
			carry = 0;
divide_carry_loop:
			if sum >= 10
			then do;
				sum = sum - 10;
				carry = carry + 1;
				go to divide_carry_loop;
			     end;
			unspec(ch) = substr(unspec(sum),28,9) | "0001100000"b;
			substr(product(j),l2,1) = ch;
		end;
		if carry ^= 0
		then do;
			sum = carry;
			carry = 0;
			unspec(ch) = substr(unspec(sum),28,9) | "000110000"b;
			substr(product(j),l2,1) = ch;
			l2 = l2 - 1;
		     end;
		st(j) = l2;
		product_calculated(j) = "1"b;
	     end;

/* test to see if we can subtract the partial product from the remainder. */

	i = 64 - st(j);
	if i < len2 then go to divide_subtract;			/* if # digits in partial product < # digits in rem. */
	if len2 < i then go to divide_fail;			/* partial product too big */
	l2 = 1;
divide_magnitude:
	ch = substr(remainder,l2,1);
	ci = substr(product(j),st(j)+l2,1);

	if ch = ci
	then do;
		l2 = l2+1;
		if 64 >= l2 & 64 >= st(j)+l2 then go to divide_magnitude;
	     end;

	if ch < ci
	then do;
divide_fail:
		j = j-1;
		go to divide_product;
	     end;

/* it will subtract, j is correct quotient digit. */

divide_subtract:
	sum = j;
	unspec(ch) = substr(unspec(sum),28,9) | "000110000"b;
	substr(ans,l3,1) = ch;
	sum,carry = 0;
	col2 = 64;

	do l2 = len2 to 1 by -1;
		ch = substr(remainder,l2,1);
		i = fixed(unspec(ch) & "000001111"b,15,0);
		ci = substr(product(j),col2,1);
		col2 = col2-1;
		k = fixed(unspec(ci) & "000001111"b,15,0);
		sum = i - k - carry;
		carry = 0;
		if sum < 0
		then do;
			sum = sum + 10;
			carry = 1;
		     end;

		unspec(ch) = substr(unspec(sum),28,9) | "000110000"b;
		substr(remainder,l2,1) = ch;
	end;

	do l2 = 1 to 64 while( substr(remainder,l2,1) = "0" );
	end;

	if l2 = 65					/* if remainder = 0 */
	then do;
		i = 64 - scale3;
		if l3 < i then l3 = i;			/* get minimum precision */
		go to divide_finish;
	     end;
	if l3 >= l1
	then do;
divide_finish:
		op1 = (64)"0";
		if float
		then do;
			col1 = 65 - l3;
			len1 = l3;
			scale3 = scale3 - 64 + l3;
		     end;
		else do;
			col1 = scale3 - sc3 + 1;		/* align to scale of answer */
			len1 = min(65-col1,64);
			if col1 < 1 then go to signal_size;
			if col1 >= 65 then go to assign_zero2;
			scale3 = sc3;
		     end;
		substr(op1,col1,len1) = ans;
		ans = op1;
		l3 = col1 - 1;
		go to normalize;
	     end;
	else do;
		remainder = substr(remainder,l2);
		substr(remainder,66-l2,l2-1) = (64)"0";
		l2 = l2 - 1;
		l3 = l3 + 1;
		len2 = len2 - l2;
		len2 = len2 + 1;				/* "bring down next digit" */
		go to divide_estimate;
	     end;

/* At this point, the answer is sitting in "ans". However, it still needs to be normalized,
   if it is floating point, and checked for overflow and underflow. If it is fixed point,
   it is only checked for exceeding the precision of the target (size condition). */

normalize:
	if float
	then do;
		i = max(66-l3-lg3,0);			/* difference in precisions */
		k = 64 - i;

		do j = k to l3+1 by -1 while(substr(ans,j,1) = "0");
		end;
		exp = -scale3;
		if j = l3
		then exp = 127;				/* normalize the zero */
		else do;
			k = 64 - j;
			exp = exp + k;
			col1 = l3 + k;			/* save last column for exp */
			len1 = 64 - l3 - k;
			op1 = (64)"0";
			substr(op1,col1,len1) = substr(ans,l3+1,len1);
			ans = op1;
		     end;

		if exp >= 128
		then do;
			i = 2;				/* overflow */
			go to signal;
		     end;
		if exp < -128
		then do;
			i = 3;				/* underflow */
			signal_ufl = "1"b;
			go to assign_zero;
		     end;
		if exp < 0 then exp = exp + 256;		/* 9 bit to 8 bit */
	     end;
	else
		if lg3 < 65-l3
		then do;
signal_size:		i = 1;				/* size */
			go to signal;
		     end;

/* Section to scale result if requested result scale is different from the one
		normally expected		*/

		else if sc3 < scale3 then
			do;
				col1 = l3 + 1 + scale3 - sc3;
				len1 = 64 - col1;
scale_fixed:			op1 = (64)"0";
				substr(op1,col1,len1) = substr(ans,l3+1,len1);
				ans = op1;
			end;
			else if sc3 > scale3 then
				do;
					col1 = l3 + 1 + scale3 - sc3;
					len1 = 64 - l3 - 1;
					if lg3 >= 64 - col1 then go to scale_fixed;
					go to signal_size;
				end;

assign:
	substr(pop3,1,lg3) = substr(ans,65-lg3,lg3);
	if float
	then do;
		unspec(ch) = substr(unspec(exp),28,9);
		substr(pop3,lg3,1) = ch;
	     end;
	substr(pop3,1,1) = sign;
	if ^signal_ufl then return;

signal:

/* Signal the relevant condition. The default handler will print a message
    indicating that the program is in error (except for underflow), and so
    if he returns, we will, too. (although we could really do anything we
    please!) */

	call plio2_signal_$s_(null,condition(i),"",error_number(i));

	return;

assign_zero:
	ans = (64)"0";

assign_zero2:
	sign = "+";
	exp = 127;
	go to assign;


/* BIG REL BITS SIGNS (definition of "info" bit string)
   -1   <   111  ++
    0   =   011  ++
    1   >   011  ++
   -1   <   100  +-
    0   =   010  +- Zero_op1
    1   >   010  +-
   -1   <   110  -+
    0   =   010  -+ Zero_op2
    1   >   000  -+
   -1   <   101  --
    0   =   001  --
    1   >   001  --

bit(1) = 1 if switch operands to make op1 > op2,
bit(2) = 1 if result is +,
bit(3) = 1 if operation is add. */



/* setdesc follows PL/I rules to calculate the precision and scale of the result
   when this has not been provided by the calling program */

setdesc:	proc;
	if operation = comparison then return;
	if operation > division then return;
	p1 = fixed(substr(desc1,25,12),12);
	p2 = fixed(substr(desc2,25,12),12);
	if float then
	do;
		l0 = max(p1,p2);
	end;
	else
	do;
		scale1 = fixed(substr(desc1,13,12),12);
		if scale1 > 2047 then scale1 = scale1 - 4096;
		scale2 = fixed(substr(desc2,13,12),12);
		if scale2 > 2047 then scale2 = scale2 - 4096;
		go to case(operation);

/* addition|subtraction */

case(1): case(2):	scale3 = max(scale1,scale2);
		l0 = min(63,max(p1-scale1,p2-scale2)+scale3+1);
		go to set_scale;

/* multiplication */

case(3):		l0 = min(63,p1+p2+1);
		scale3 = scale1 + scale2;
		go to set_scale;

/* division */

case(4):		l0 = 63;
		scale3 = 63 - p1 + scale1 - scale2;

set_scale:	if scale3 < 0 then scale3 = scale3 + 4096;
		substr(desc3,13,12) = bit(binary(scale3,12),12);
	end;

	substr(desc3,25,12) = bit(binary(l0,12),12);
	pdesc3 = desc3;
	return;
end;

	end;
