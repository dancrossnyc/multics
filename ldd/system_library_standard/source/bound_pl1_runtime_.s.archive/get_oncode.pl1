/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


get_oncode:	proc() returns(fixed bin(35)) options(support);

/* recoded by M. Weaver 1/14/74 for new pl1 signalling discipline */
/* BIM 10/82 to compile again */

dcl  code fixed bin(35);
dcl  err_count fixed bin;
dcl (sp, nsp) ptr;
dcl (addr, null) builtin;
dcl  find_condition_frame_ entry(ptr) returns(ptr);
dcl  find_condition_info_ entry (ptr, ptr, fixed bin(35));

%include pl1_info;
%include condition_info_header;
%include condition_info;
declare 1 CI aligned like condition_info;

/* */
/* There is a valid oncode for each condition.  If the oncode for the most
   recent condition on the stack has been explicitly set in a pl1 info structure
   then we return that value.  Otherwise we return 0. */

	sp, nsp = null;				/* initialize; start with most recent frame */
	err_count = 0;				/* count of error frames */

find_frame:
	nsp = find_condition_frame_ (sp);		/* get ptr to next condition frame */
	if nsp = null then return (0);		/* give up */

	call find_condition_info_ (nsp, addr(CI), code);
						/* get info for most recent condition */
	if code ^= 0 then return (0);			/* give up; can't really find anything */
	if CI.info_ptr ^= null
	then if CI.info_ptr -> pl1_info.id = "pliocond"
	then if CI.info_ptr -> pl1_info.oncode_sw
	then return (CI.info_ptr -> pl1_info.oncode);

/* if error was signalled because of some other condition (i.e. has no info structure)
   return oncode for other condition */

	if CI.condition_name = "error" then if err_count = 0 then do; /* skip first error frame */
	     err_count = 1;
	     sp = nsp;
	     go to find_frame;
	end;

	return (0);				/* no explicit oncode set */

	end get_oncode;
