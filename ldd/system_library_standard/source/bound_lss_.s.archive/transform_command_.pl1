/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


transform_command_: proc (name_ptr, name_len, table_ptr, code);

/* coded May 1970 by R. Frankston */

/* name_ptr and name_len are the pointer and the length for the command name.
   They are replaced by the pointer and length for the new command.
   The tranformation is made according to the table addressed by table_ptr.
   The code is 0 if the tranform is ok. Otherwise it is 1 and a message
   is typed.

   Modified Nov 1970 by Dan Bricklin
/* Updated 7/22/76 to current version PL/I by S. Herbst */

dcl (name_ptr, table_ptr) ptr;
dcl (name_len, temp) fixed bin;

dcl (code, error_table_$noentry ext) fixed bin (35);

dcl  ch char (100) based (name_ptr) unaligned;

dcl  command char (32) based (cptr) aligned,
     cptr pointer internal;

dcl 1 c,
    2 (c1, c2, c3, c4) fixed binary (71);

dcl 1 commands based (table_ptr) aligned,
    2 info fixed bin (71),
    2 nonames fixed bin (71),
    2 com_info (temp refer (commands.nonames)) char (32) aligned,
    2 more_info (temp refer (commands.nonames)),
      3 where fixed bin (17),
      3 len fixed bin (17),
    2 paths (100) char (1) unaligned;

dcl 1 comnames based (table_ptr) aligned,
    2 info fixed bin (71),
    2 nonames fixed bin (71),
    2 com_info (temp refer (comnames.nonames)),
      3 (n1, n2, n3, n4) fixed bin (71);

dcl  ioa_ entry options (variable);

dcl (addr, substr) builtin;

/*  */
          cptr = addr (c);
	command = substr (ch, 1, name_len);

	do temp = 1 to commands.nonames;

	     if n1 (temp) = c1 & n2 (temp) = c2 & n3 (temp) = c3 & n4 (temp) = c4 then do;
		name_ptr = addr (paths (where (temp)));
		name_len = len (temp);
		code = 0;
		return;
	     end;
	end;
	call ioa_ ("^a is not a legal command", command);
	code = error_table_$noentry;

     end transform_command_;
