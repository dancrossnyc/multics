/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


start_governor_: proc (ratiop, interval_lengthp);

/* This is the governor section of the LSS.  It is seperate
   so you can use it just to do the function of governing and
   have other functions done by other routines (such as
   accounting.

   Coded Nov 1970 by Dan Bricklin */
/* Updated 7/22/76 to current version PL/I by S. Herbst */

dcl
    (addr, divide, float) builtin,
	ioa_ ext entry options (variable),
	     clock_ ext entry returns (fixed bin (71)),
	     hcs_$usage_values ext entry (fixed bin (35), fixed bin (52)),
	     create_ips_mask_ ext entry (ptr, fixed bin (17), bit (36) aligned),
	     hcs_$set_ips_mask ext entry (bit (36) aligned, bit (36) aligned),
	     start_governor_$cput_int ext entry,
	     timer_manager_$sleep_lss ext entry (fixed bin (71), bit (2) aligned), /* timer_manager_ takes care */
	     timer_manager_$cpu_call_inhibit ext entry (fixed bin (71), bit (2) aligned, entry), /* of handling timer interrupts */
	     timer_manager_$reset_cpu_call ext entry (entry),
	     ((ratio, interval_length) int static, ratiop, interval_lengthp) fixed bin (17),
	     ((last_real, until) int static, now) fixed bin (71),
	     (cpu_last int static, cpu_now) fixed bin (52),
	     page_waits fixed bin (35),
	     cpu_allowed int static fixed bin (71),
	     ((quit_mask, all_mask) int static, mask) bit (36) aligned,
	     quited_in_cput bit (1) aligned int static,
	     time fixed bin (17),
	     quit condition,
	     all (1) char (32) aligned static int init ("-all"),
	     ips_names (1) char (32) aligned static int init ("quit");


	ratio = ratiop;				/* save these values */
	interval_length = interval_lengthp;
						/* prepare for ratio checking interrupts */

	if ratio > 0 & interval_length > 0 then do;	/* only do ratio checking if ratio is greater than zero */
	     call create_ips_mask_ (addr (ips_names), 1, quit_mask); /* get a mask for quits to be used later */
	     quit_mask = ^quit_mask;			/* make a mask for everything but quit and save */
	     call create_ips_mask_ (addr (all), 1, all_mask); /* get a mask for nothing */
	     all_mask = ^all_mask;
	     last_real = clock_ ();			/* get time and save it */
	     call hcs_$usage_values (page_waits, cpu_now);
	     cpu_last = cpu_now + 3000000;		/* save current cput plus extra for burst */
	     cpu_allowed = divide (interval_length*1000000, ratio, 71, 0);
						/* cpu time allowed in real interval */
	     call timer_manager_$cpu_call_inhibit (cpu_allowed+cpu_last, "00"b, start_governor_$cput_int); /* set timer */
	end;

	return;


/* This section of code is executed every "cpu_allowed" cpu seconds and checks to see */
/* if the amount of cpu time used per real time is in keeping with the ratio.  If it is, */
/* control is returned, after setting up the next interrupt to occur.  If it is too high a */
/* usage rate, the process is put to sleep long enough to bring the ratio to the acceptable level. */

cput_int:	entry;					/* entry on cpu time interrupt */

	quited_in_cput = "0"b;
	now = clock_ ();
	call hcs_$usage_values (page_waits, cpu_now);
	if divide (now - last_real, cpu_now - cpu_last, 17, 0) >= ratio then do;
						/* if not over using, then do */
	     last_real = now;
GOOD:	     cpu_last = cpu_now;
	     call timer_manager_$cpu_call_inhibit (cpu_allowed+cpu_now, "00"b, start_governor_$cput_int); /* set timer */
	     if quited_in_cput then do;
		call hcs_$set_ips_mask (all_mask, mask); /* restore mask to allow everything */
		revert condition (quit);
		signal condition (quit);		/* do a quit that the user wanted */
	     end;
	     return;
	end;
						/* if used too much cpu time */
	until = last_real + (cpu_now - cpu_last)*ratio;	/* 'till when to sleep */

	on condition (quit) begin;			/* set up quit handler */
	     now = clock_ ();
	     time = divide (until-now, 1000000, 35, 0);
	     if time>60 then call ioa_ ("Will quit in ^.1f minutes", float (time, 27)/60.e0);
	     else call ioa_ ("Will quit in ^d seconds", time);
	     quited_in_cput = "1"b;
	end;

	call hcs_$set_ips_mask (quit_mask, mask);	/* mask everything but quits */
	call timer_manager_$sleep_lss (until, "00"b);	/* go to sleep */
	last_real = clock_ ();
	go to GOOD;				/* set timer */



/* This entry stops the governing of cpu time */

stop_governor_: entry;

	call timer_manager_$reset_cpu_call (start_governor_$cput_int);
	return;


     end start_governor_;
