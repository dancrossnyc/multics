/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


/* format: style3,idind30,ll122,ifthenstmt */

abs_io_control:
     procedure (P_iocb_ptr, P_order, P_info_ptr, P_status);

/* Initial coding: 25 June 1979 by J. Spencer Love							*/
/* Modified: 12 June 1980 by J. Spencer Love to add sleep and close entrypoints, and to handle io_call orders		*/
/* Control order "no_set_bc" added for "ear -no_set_bit_count" 07/29/81 S. Herbst */
/* Incorrect COMMAND and FUNCTION labels sorted out 07/28/82 S. Herbst */
/* Recompiled for changed abs_data structure 04/12/83 S. Herbst */
/* Added "set_trace" control order to implement ec -trace 05/03/84 S. Herbst */

/* Parameters											*/

declare	P_iocb_ptr		ptr parameter,
	P_attach_data_ptr		ptr parameter,
	P_order			char (*) parameter,
	P_arg_array		(*) char (*) varying parameter,
	P_info_ptr		ptr parameter,
	P_first_arg		fixed bin parameter,
	P_status			fixed bin (35) parameter;

/* Builtin											*/

declare	(addr, fixed, hbound, lbound, length, null, substr, unspec)
				builtin;

declare	(area, any_other, bad_area_format, bad_area_initialization)
				condition;

/* Automatic											*/

declare	arg_array_ptr		ptr,
	arg_array_size		fixed bin,
	arg_idx			fixed bin,
	factor			float bin,
	first_arg			fixed bin,
	info_ptr			ptr,
	iocb_ptr			ptr,
	mask			bit (36),
	order			fixed bin,
	sleep_time		fixed bin (71),
	status			fixed bin (35);

/* External											*/

declare	(
	error_table_$badcall,
	error_table_$badopt,
	error_table_$no_operation,
	error_table_$noalloc,
	error_table_$notalloc,
	error_table_$unable_to_do_io,
	error_table_$undefined_order_request
	)			fixed bin (35) external,
	iox_$user_input		ptr external;
%page;
/* Based												*/

declare	attach_descrip		char (256) varying based;

declare	1 timed_input		based (info_ptr),
	  2 low_sleep_time		fixed bin (35),
	  2 sleep_time_range	fixed bin (35),
	  2 seed			fixed bin (35);

declare	1 arg_array		(arg_array_size) aligned based (arg_array_ptr),
	  2 ptr			ptr,
	  2 len			fixed bin (21),
	  2 quotes		fixed bin (21);

declare	arg_string		char (arg_array (arg_idx).len) based (arg_array (arg_idx).ptr);

declare	1 set_args		aligned based (info_ptr),
	  2 count			fixed bin,
	  2 e			(0 refer (set_args.count)),
	    3 ptr			ptr unaligned,
	    3 len			fixed bin (21);
%page;
/* Constants											*/

declare	Orders			(11) char (32) varying static options (constant)
				initial ("attach", "detach", "set_ec_data_ptr", "set_argument_ptrs",
				"set_arguments", "timed_input", "io_call", "io_call_af", "no_set_bc", "set_bc",
				"set_trace");

declare	Active			(11) bit (1) aligned static options (constant)
				initial ((3) ("1"b), (2) ("0"b), (6) ("1"b));

declare	Open			(11) bit (1) aligned static options (constant) initial ((11) ("1"b));

declare	Closed			(11) bit (1) aligned static options (constant) initial ((2) ("0"b), (9) ("1"b));

declare	Info			(0:11) bit (1) aligned static options (constant) initial ((3) ("0"b), (9) ("1"b));

declare	Null			(0:11) bit (1) aligned static options (constant)
				initial ((4) ("1"b), (5) ("0"b), (2) ("1"b), "0"b);

declare	Command			(0:11) bit (1) aligned static options (constant)
				initial ((3) ("1"b), (2) ("0"b), (7) ("1"b));

declare	Function			(0:11) bit (1) aligned static options (constant)
				initial ("1"b, (6) ("0"b), (5) ("1"b));

/* Entries											*/

declare	continue_to_signal_		entry (fixed bin (35)),
	hcs_$reset_ips_mask		entry (bit (36), bit (36)),
	hcs_$set_ips_mask		entry (bit (36), bit (36)),
	iox_$attach_ptr		entry (ptr, char (*), ptr, fixed bin (35)),
	iox_$detach_iocb		entry (ptr, fixed bin (35)),
	iox_$find_iocb		entry (char (*), ptr, fixed bin (35)),
	iox_$move_attach		entry (ptr, ptr, fixed bin (35)),
	random_$uniform		entry (fixed bin (35), float bin),
	terminate_process_		entry (char (*), ptr),
	timer_manager_$sleep	entry (fixed bin (71), bit (2));
%page;
/* abs_io_control:
        procedure (P_iocb_ptr, P_order, P_info_ptr, P_status);						*/

	iocb_ptr = P_iocb_ptr -> iocb.actual_iocb_ptr;
	abs_data_ptr = iocb_ptr -> iocb.attach_data_ptr;
	ec_data_ptr = abs_data.ec_data_ptr;
	info_ptr = P_info_ptr;
	mask = ""b;
	status = 0;

	order = interpret_order (P_order);
	if (info_ptr ^= null () & Info (order)) | (info_ptr = null () & Null (order)) then go to ORDER (order);

ORDER (0):					/* 0 subscript is for undefined order			*/
COMMAND (0):
FUNCTION (0):
COMMAND (7):					/* io_call order may not specify io_call or io_call_af	*/
FUNCTION (7):
COMMAND (8):					/* io_call_af order may not specify io_call or io_call_af	*/
FUNCTION (8):
FUNCTION (9):
FUNCTION (10):
NO_OPERATION:					/* Come here if operation cannot be performed now		*/
	status = error_table_$no_operation;

	go to EGRESS;

CALL_BACK_LATER:
	status = error_table_$undefined_order_request;

	go to EGRESS;

BAD_CALL:						/* Come here to reject input data structure		*/
	status = error_table_$badcall;

	go to EGRESS;

AREA_FULL:					/* come here for area condition			*/
	status = error_table_$noalloc;

	go to EGRESS;

BAD_AREA:						/* come here for bad_area_format or bad_area_initialization */
	status = error_table_$notalloc;

EGRESS:
	if substr (mask, 36, 1) then call hcs_$reset_ips_mask (mask, mask);

	P_status = status;

	return;
%page;
interpret_order:
     procedure (P_order) returns (fixed bin);

declare	P_order			char (*),
	order			fixed bin;

	do order = lbound (Orders, 1) to hbound (Orders, 1);
	     if Orders (order) = P_order
	     then if (iocb_ptr -> iocb.open_descrip_ptr = null () & ^Closed (order))
		     | (iocb_ptr -> iocb.open_descrip_ptr ^= null () & ^abs_data.active & ^Open (order))
		     | (abs_data.active & ^Active (order))
		then return (0);
		else return (order);
	end;

	return (0);

     end interpret_order;
%page;
/* ORDER = "set_ec_data_ptr"  This order is used to estabish communication between listeners and abs_io_.		*/

ORDER (3):
	if info_ptr ^= null
	then do;
		if info_ptr -> ec_data.version ^= ec_data_version_1 then go to BAD_CALL;
		if info_ptr -> ec_data.version_id ^= ec_data_version_id then go to BAD_CALL;
	     end;

	abs_data.ec_data_ptr = info_ptr;

	go to EGRESS;
%page;
/* ORDER = "timed_input"  This is used to simulate interactive usage by going blocked on each get_line call		*/

ORDER (6):
	if timed_input.sleep_time_range < 0 then go to BAD_CALL;

	abs_data.timed_input = (timed_input.low_sleep_time + timed_input.sleep_time_range > 0);

	if ^abs_data.timed_input then go to EGRESS;

	abs_data.low_sleep_time = timed_input.low_sleep_time;
	abs_data.sleep_time_range = timed_input.sleep_time_range;
	abs_data.seed = timed_input.seed;

	go to EGRESS;

COMMAND (6):
	if io_call_info.nargs ^= 1
	then do;
		call io_call_info.error (0, io_call_info.caller_name, "One of ""-on"" or ""-off"" must be given.");
		go to EGRESS;
	     end;

	if io_call_info.args (1) = "-off" then abs_data.timed_input = "0"b;
	else if io_call_info.args (1) = "-on"
	then abs_data.timed_input = (abs_data.low_sleep_time + abs_data.sleep_time_range > 0);
	else call io_call_info.error (error_table_$badopt, io_call_info.caller_name, "^a", io_call_info.args (1));

	go to EGRESS;

/* This entrypoint is used to simulate interactive waits.  Waits are uniformly distributed over a range.  The range can
   overlap zero so that some specified percentage of calls will result in no wait (to simulate type ahead).  The only
   thing it lacks is the priority boost that is caused by a real interaction.  This feature is used for benchmarking.	*/

abs_io_control$sleep:
     entry (P_attach_data_ptr);

	abs_data_ptr = P_attach_data_ptr;

	call random_$uniform (abs_data.seed, factor);
	sleep_time = fixed (factor * abs_data.sleep_time_range, 71) + abs_data.low_sleep_time;
	if sleep_time > 0 then call timer_manager_$sleep (sleep_time, "10"b);

	return;
%page;
attach:
     entry (P_attach_data_ptr, P_info_ptr, P_status);

	abs_data_ptr = P_attach_data_ptr;
	ec_data_ptr = abs_data.ec_data_ptr;
	info_ptr = P_info_ptr;
	mask = ""b;
	status = 0;

ORDER (1):
	on any_other call any_other_handler ();

	call hcs_$set_ips_mask (mask, mask);

	if ec_data_ptr = null () then go to NO_OPERATION;

	if abs_data.attach.target_ptr ^= null () then go to NO_OPERATION;

	if abs_data.attach.save_ptr = null ()
	then do;
		call iox_$find_iocb (ec_data.id_string || "." || abs_data.io_module_name, abs_data.attach.save_ptr,
		     status);
		if status ^= 0 then go to EGRESS;
	     end;

	abs_data.attach.victim_ptr = iox_$user_input;
	call iox_$move_attach (abs_data.attach.victim_ptr, abs_data.attach.save_ptr, status);
	if status ^= 0 then go to EGRESS;

	abs_data.attach.target_ptr = ec_data.switch_ptr;
	call iox_$attach_ptr (abs_data.attach.victim_ptr, "syn_ " || abs_data.attach.target_ptr -> iocb.name, null (),
	     status);
	if status ^= 0
	then do;
		call iox_$move_attach (abs_data.attach.save_ptr, abs_data.attach.victim_ptr, (0));
		abs_data.attach.target_ptr = null ();
		go to EGRESS;
	     end;

	call hcs_$reset_ips_mask (mask, mask);

	go to EGRESS;

COMMAND (1):
	if io_call_info.nargs > 0
	then do;
		call io_call_info.error (0, io_call_info.caller_name, "No arguments are permitted for ""attach"".");
		go to EGRESS;
	     end;

	go to ORDER (1);
%page;
abs_io_control$detach:
     entry (P_attach_data_ptr, P_info_ptr, P_status);

	abs_data_ptr = P_attach_data_ptr;
	info_ptr = P_info_ptr;
	mask = ""b;
	status = 0;

ORDER (2):
	on any_other call any_other_handler ();

	call hcs_$set_ips_mask (mask, mask);

	status = detach ();

	call hcs_$reset_ips_mask (mask, mask);

	go to EGRESS;



COMMAND (2):					/* "io control &ec_switch detach" */
	if io_call_info.nargs > 0
	then do;
		call io_call_info.error (0, io_call_info.caller_name, "No arguments are permitted for ""detach"".");
		go to EGRESS;
	     end;

	on any_other call any_other_handler ();

	call hcs_$set_ips_mask (mask, mask);

	status = detach ();

	call hcs_$reset_ips_mask (mask, mask);

	if status ^= 0 then call io_call_info.error (status, io_call_info.caller_name, "Detaching.");
	status = 0;

	go to EGRESS;



abs_io_control$close:
     entry (P_attach_data_ptr);

	abs_data_ptr = P_attach_data_ptr;

	status = detach ();

	call iox_$detach_iocb (abs_data.attach.save_ptr, (0));

	return;
%page;
detach:
     procedure () returns (fixed bin (35));

	if abs_data.attach.target_ptr = null () then return (error_table_$no_operation);

	if abs_data.attach.victim_ptr -> iocb.attach_descrip_ptr -> attach_descrip
	     ^= "syn_ " || abs_data.attach.target_ptr -> iocb.name
	then return (error_table_$badcall);

	call iox_$detach_iocb (abs_data.attach.victim_ptr, status);
	if status ^= 0 then return (status);

	call iox_$move_attach (abs_data.attach.save_ptr, abs_data.attach.victim_ptr, status);
	if status ^= 0
	then do;
		call iox_$attach_ptr (abs_data.attach.victim_ptr, "syn_ " || abs_data.attach.target_ptr -> iocb.name,
		     null (), (0));
		return (status);
	     end;

	abs_data.attach.target_ptr, abs_data.attach.victim_ptr = null ();

	return (0);

     end detach;
%page;
/* ORDER = "set_argument_ptrs"  Set ptrs and lengths of arguments from info structure without copying for efficiency	*/

ORDER (4):
	call release_args ();

	arg_array_size = set_args.count;
	call allocate_arg_array ();

	arg_array (*).len = set_args (*).len;
	arg_array (*).ptr = set_args (*).ptr;
	arg_array (*).quotes = -1;

	abs_data.arg_count = arg_array_size;
	abs_data.args_copied = "0"b;
	abs_data.arg_ptr = arg_array_ptr;

	go to EGRESS;

/* ORDER = "set_arguments"  Used to set arguments from structure of pointers and lengths, copying them into work_area	*/

ORDER (5):
	call release_args ();

	arg_array_size = set_args.count;
	call allocate_arg_array ();

	do arg_idx = 1 to arg_array_size;
	     arg_array (arg_idx).len = set_args (arg_idx).len;
	     arg_array (arg_idx).quotes = -1;
	     allocate arg_string in (abs_data.work_area);
	     arg_string = set_args (arg_idx).ptr -> arg_string;
	end;

	abs_data.arg_count = arg_array_size;
	abs_data.args_copied = "1"b;
	abs_data.arg_ptr = arg_array_ptr;

	go to EGRESS;

COMMAND (5):
	call release_args ();

	arg_array_size = io_call_info.nargs;
	call allocate_arg_array ();

	do arg_idx = 1 to arg_array_size;
	     arg_array (arg_idx).len = length (io_call_info.args (arg_idx));
	     arg_array (arg_idx).quotes = -1;
	     allocate arg_string in (abs_data.work_area);
	     arg_string = io_call_info.args (arg_idx);
	end;

	abs_data.arg_count = arg_array_size;
	abs_data.args_copied = "1"b;
	abs_data.arg_ptr = arg_array_ptr;

	go to EGRESS;
%page;
/* This entrypoint is used by abs_io_attach to set arguments which are given on in the attach description		*/

set_arguments:
     entry (P_attach_data_ptr, P_arg_array, P_first_arg, P_status);

	abs_data_ptr = P_attach_data_ptr;
	first_arg = P_first_arg;
	mask = ""b;
	status = 0;

	if first_arg <= 0 then go to EGRESS;

	call release_args ();

	arg_array_size = hbound (P_arg_array, 1) - first_arg + 1;
	call allocate_arg_array ();

	do arg_idx = 1 to arg_array_size;
	     arg_array (arg_idx).len = length (P_arg_array (arg_idx + first_arg - 1));
	     arg_array (arg_idx).quotes = -1;
	     allocate arg_string in (abs_data.work_area);
	     arg_string = P_arg_array (arg_idx + first_arg - 1);
	end;

	abs_data.arg_count = arg_array_size;
	abs_data.args_copied = "1"b;
	abs_data.arg_ptr = arg_array_ptr;

	go to EGRESS;
%page;
/* This internal procedure is used to allocate argument info with condition handlers				*/

allocate_arg_array:
     procedure ();

	if arg_array_size <= 0 then go to EGRESS;

	on area go to AREA_FULL;
	on bad_area_format go to BAD_AREA;
	on bad_area_initialization go to BAD_AREA;

	allocate arg_array in (abs_data.work_area);

	return;

     end allocate_arg_array;

/* This internal procedure is used by the argument setting routines to release storage that previously held arguments	*/

release_args:
     procedure ();

	arg_array_ptr = abs_data.arg_ptr;
	arg_array_size = abs_data.arg_count;
	abs_data.arg_ptr = null ();
	abs_data.arg_count = 0;
	if abs_data.args_copied
	then do arg_idx = 1 to arg_array_size;
		free arg_string;
	     end;
	if arg_array_ptr ^= null () then free arg_array;

	return;
     end release_args;
%page;
/* ORDER = "io_call"										*/

ORDER (7):
	io_call_infop = info_ptr;
	if io_call_info.version ^= 1 then go to NO_OPERATION;

	order = interpret_order ((io_call_info.order_name));
	if Command (order) then go to COMMAND (order);

	go to CALL_BACK_LATER;

/* ORDER = "io_call_af"										*/

ORDER (8):
	io_call_infop = info_ptr;
	if io_call_info.version ^= 1 then go to NO_OPERATION;

	order = interpret_order ((io_call_info.order_name));
	if Function (order) then go to FUNCTION (order);

	go to CALL_BACK_LATER;
%page;
/* ORDER = "no_set_bc" */

ORDER (9):
COMMAND (9):
	abs_data.open_data.no_set_bc = "1"b;

	go to EGRESS;


/* ORDER = "set_bc" */

ORDER (10):
COMMAND (10):
	abs_data.open_data.no_set_bc = "0"b;

	go to EGRESS;
%page;
/* ORDER = "set_trace" */

ORDER (11):
	call set_trace (info_ptr -> ec_trace_info.command_line, abs_data.command_line);
	call set_trace (info_ptr -> ec_trace_info.comment_line, abs_data.comment_line);
	call set_trace (info_ptr -> ec_trace_info.control_line, abs_data.control_line);
	call set_trace (info_ptr -> ec_trace_info.input_line, abs_data.input_line);

	go to EGRESS;
%page;
set_trace: proc (P_info_line, P_abs_line);

/* This internal procedure copies the elements of ec_trace_info into the trace portion of abs_data trace */

dcl 1 P_info_line aligned like ec_trace_info.command_line;
dcl 1 P_abs_line aligned like abs_data.command_line;

	if ^P_info_line.explicit_sw then return;	/* nothing to set for this type of line */

	P_abs_line.by_control_arg = "1"b;
	P_abs_line.on = P_info_line.on;
	P_abs_line.expand = P_info_line.expand;
	if unspec (P_info_line.iocb) = "0"b then P_abs_line.iocb = null;
	else P_abs_line.iocb = P_info_line.iocb;
	P_abs_line.prefix = P_info_line.prefix;

end set_trace;
%page;
any_other_handler:
     procedure ();

declare	1 ts			aligned,
	  2 version		fixed bin,
	  2 status_code		fixed bin (35);

	if substr (mask, 36, 1)
	then do;
		ts.version = 0;
		ts.status_code = error_table_$unable_to_do_io;
		call terminate_process_ ("fatal_error", addr (ts));
	     end;

	call continue_to_signal_ ((0));		/* We don't want it; pass it on			*/

	return;

     end any_other_handler;
%page;
%include abs_io_data;
%page;
%include ec_data;
%page;
%include ec_trace_info;
%page;
%include io_call_info;
%page;
%include iocb;


     end abs_io_control;
