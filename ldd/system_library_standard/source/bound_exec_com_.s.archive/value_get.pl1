/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
value_get: vg: proc;

/* Written 11/17/80 by S. Herbst */
/* Added -call 07/14/81 S. Herbst */
/* Changed to allow user to set value and restart if no value defined 01/25/82 S. Herbst */
/* Changed -df to -dft as short for -default 05/13/82 S. Herbst */
/* Added -pop 05/23/83 S. Herbst */


/****^  HISTORY COMMENTS:
  1) change(88-01-01,Gilcrease), approve(88-01-27,MCR7832),
     audit(88-05-25,Hunter), install(88-05-31,MR12.2-1049):
               Add -data control argument, to extract data-type names.
                                                   END HISTORY COMMENTS */


dcl arg char (arg_len) based (arg_ptr);
dcl call_string char (call_len) based (call_ptr);
dcl return_arg char (return_len) varying based (return_ptr);
dcl default_value char (default_value_len) based (default_value_ptr);
dcl name char (name_len) based (name_ptr);
dcl data char (data_size * 4) based (data_ptr);

dcl (seg_dn, seg_path) char (168);
dcl seg_en char (32);
dcl ME char (32) int static options (constant) init ("value_get");

dcl call_switches bit (36) aligned;
dcl (af_sw, call_sw, got_name_sw, default_sw, path_sw, pop_sw, data_sw) bit (1);

dcl (arg_ptr, call_ptr, default_value_ptr, name_ptr, return_ptr, seg_ptr, area_ptr, data_ptr) ptr;

dcl (arg_len, call_len, default_value_len, name_len, return_len) fixed (21);
dcl  data_size fixed binary (18);
dcl (arg_count, i) fixed;
dcl (code, code1) fixed (35);

dcl  error_table_$argerr fixed bin(35) ext static;
dcl error_table_$badopt fixed (35) ext;
dcl error_table_$not_act_fnc fixed (35) ext;
dcl error_table_$oldnamerr fixed (35) ext;

dcl complain entry variable options (variable);

dcl (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl cu_$af_return_arg entry (fixed, ptr, fixed (21), fixed (35));
dcl cu_$arg_ptr entry (fixed, ptr, fixed (21), fixed (35));
dcl cu_$evaluate_active_string entry (ptr, char (*), fixed, char (*) varying, fixed (35));
dcl expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed (35));
dcl get_temp_segment_ entry (char (*), ptr, fixed (35));
dcl  get_system_free_area_ entry() returns(ptr);
dcl hcs_$initiate entry (char (*), char (*), char (*), fixed (1), fixed (2), ptr, fixed (35));
dcl hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl ioa_ entry options (variable);
dcl release_temp_segment_ entry (char (*), ptr, fixed (35));
dcl value_$get entry options (variable);
dcl value_$get_path entry (char (*), fixed (35));
dcl value_$pop entry options (variable);
dcl value_$set entry options (variable);
dcl  value_$get_data entry options (variable);

dcl (index, length, null, substr) builtin;

dcl cleanup condition;
%page;
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = 0 then do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	end;
	else if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     complain = com_err_;
	     code = 0;
	end;
	else do;
	     call com_err_ (code, ME);
	     return;
	end;

	call_sw, default_sw, got_name_sw, path_sw, pop_sw, data_sw = "0"b;
	call_switches = "0"b;
	area_ptr, data_ptr = null ();

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if index (arg, "-") = 1 then
		if arg = "-call" then do;
		     i = i + 1;
		     if i > arg_count then do;
NO_CONTROL_VALUE:
			call complain (0, ME, "No value specified for ^a", arg);
			return;
		     end;
		     call_sw = "1"b;
		     call cu_$arg_ptr (i, call_ptr, call_len, code);
		end;

		else if arg = "-default" | arg = "-dft" | arg = "-df" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_CONTROL_VALUE;
		     default_sw = "1"b;
		     call cu_$arg_ptr (i, default_value_ptr, default_value_len, code);
		end;

		else if arg = "-name" | arg = "-nm" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_CONTROL_VALUE;
		     got_name_sw = "1"b;
		     call cu_$arg_ptr (i, name_ptr, name_len, code);
		end;

		else if arg = "-pathname" | arg = "-pn" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_CONTROL_VALUE;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
						/* How about a utility someday to find the dn>en */
						/* Maybe search rules, at least naming conventions */
		     call expand_pathname_$add_suffix (arg, "value", seg_dn, seg_en, code);
		     if code ^= 0 then do;
			call complain (code, ME, "^a", arg);
			return;
		     end;
		     path_sw = "1"b;
		end;

		else if arg = "-permanent" | arg = "-perm" then substr (call_switches, 2, 1) = "1"b;

		else if arg = "-perprocess" | arg = "-pp" then substr (call_switches, 1, 1) = "1"b;

		else if arg = "-pop" then pop_sw = "1"b;

		else if arg = "-data" then data_sw = "1"b;

		else do;
		     call complain (error_table_$badopt, ME, "^a", arg);
		     return;
		end;

	     else if got_name_sw then do;
USAGE:
		if af_sw then
		     call active_fnc_err_$suppress_name (0, ME, "Usage:  [value_get name {-control_args}]");
		else call com_err_$suppress_name (0, ME, "Usage:  value_get name {-control_args}");
		return;
	     end;

	     else do;
		got_name_sw = "1"b;
		name_ptr = arg_ptr;
		name_len = arg_len;
	     end;
	end;

	if ^got_name_sw then go to USAGE;

	if data_sw & (pop_sw | call_sw | default_sw | substr (call_switches, 1, 1)) = "1"b then do;
	     call complain (error_table_$argerr, ME, "
The -data argument is incompatible with -default, -perprocess, -pop or -call.");
	     return;
	end;

	if substr (call_switches, 1, 2) = "00"b then substr (call_switches, 1, 2) = "11"b;
						/* default is both */

	if call_sw & default_sw then do;
	     call complain (0, ME, "-call incompatible with -default.");
	     return;
	end;

	seg_ptr = null;				/* default: user's default seg if -perm */

	on cleanup
	     begin;
		if ^af_sw then call release_temp_segment_ ("value_get", return_ptr, code);

		if seg_ptr ^= null then call hcs_$terminate_noname (seg_ptr, 0);
	     end;

	if path_sw then do;
	     call hcs_$initiate (seg_dn, seg_en, "", 0, 0, seg_ptr, code);
	     if seg_ptr = null then do;
		call complain (code, ME, "Value segment ^a^[>^]^a", seg_dn, seg_dn ^= ">", seg_en);
		return;
	     end;
	end;

/* Do the work */

	if ^af_sw then do;
	     call get_temp_segment_ ("value_get", return_ptr, code);
	     return_len = WORDS_PER_SEGMENT;
	end;

GET:
	if pop_sw then call value_$pop (seg_ptr, call_switches, name, return_arg, code);

	else if ^data_sw then call value_$get (seg_ptr, call_switches, name, return_arg, code);

	else do;
	     area_ptr = get_system_free_area_ ();
	     call value_$get_data (seg_ptr, call_switches, name, area_ptr, data_ptr, data_size, code);
	end;

	if code ^= 0 then
	     if call_sw then do;
		call cu_$evaluate_active_string (null, call_string, NORMAL_ACTIVE_STRING, return_arg, code);
		if code ^= 0 then do;
		     call complain (code, ME, "Evaluating -call");
		     go to RETURN;
		end;

		call value_$set (seg_ptr, call_switches, name, substr (return_arg, 1, length (return_arg)), "", code);
		if code ^= 0 then call complain (code, ME, "Setting value with -call");
	     end;
	     else if default_sw then return_arg = default_value;
	     else do;
		if code = error_table_$oldnamerr then do;
		     call complain (code, ME, "^a", name);
		     if af_sw then go to GET;		/* in case user set a value while interrupted */
		end;
		else if seg_ptr = null then do;
		     call value_$get_path (seg_path, code1);
		     if code1 ^= 0 then seg_path = "";
		     call complain (code, ME, "Default value segment ^a", seg_path);
		end;
		else call complain (code, ME, "Value segment ^a^[>^]^a", seg_dn, seg_dn ^= ">", seg_en);
		go to RETURN;
	     end;

	if data_sw then return_arg = data;
	if ^af_sw then call ioa_ ("^a", return_arg);

RETURN:
	if ^af_sw then call release_temp_segment_ ("value_get", return_ptr, code);

	if seg_ptr ^= null then call hcs_$terminate_noname (seg_ptr, 0);

	return;
%page;
%include cp_active_string_types;
%page;
%include system_constants;
end value_get;
