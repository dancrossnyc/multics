/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/* format: style3,idind30,ll122,ifthenstmt */

abs_io_$abs_io_attach:
     procedure (P_iocb_ptr, P_attach_args, P_report_switch, P_status);


/****^  HISTORY COMMENTS:
  1) change(86-03-01,Gilcrease), approve(86-03-27,MCR7370),
     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
     Dummy comment for hcom.
     Initial coding: 25 June 1979 by J. Spencer Love
     -no_set_bit_count implemented 07/29/81 S. Herbst
     -login_channel November 1981 Benson I. Margulies
     Added $allocate_abs_data & $initialize_abs_data to be called by absentee_listen_$execute_handler 01/07/83 S. Herbst
     Added -trace, -no_trace, -trace_default to the exec_com command 03/20/84 S. Herbst
  2) change(86-03-27,Gilcrease), approve(86-03-27,MCR7370),
     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
     Add -truncate to absout files. SCP 6297.
  3) change(86-11-11,Gilcrease), approve(86-11-11,PBF7370),
     audit(86-11-12,Fawcett), install(86-11-12,MR12.0-1214):
      PBF: user_info_ should not be called if abs_io_ invoked as
           exec_com.
                                                   END HISTORY COMMENTS */


/* Parameters											*/

declare	P_iocb_ptr		ptr parameter,
	P_attach_args		(*) char (*) varying parameter,
	P_report_switch		bit (1) aligned parameter,
	P_opening_mode		fixed bin parameter,
	P_abs_data_ptr		ptr parameter,
	P_status			fixed bin (35) parameter;

/* Builtins											*/

declare	(addr, addrel, divide, empty, hbound, index, length, ltrim, maxlength, min, null, reverse, rtrim, search, size,
	stackbaseptr, string, substr, unspec, verify)
				builtin;

declare	(any_other, area, bad_area_format, bad_area_initialization, cleanup)
				condition;

/* Automatic											*/

declare	abs_entry			bit (1) aligned,
	arg_count			fixed bin,
	arg_str			char (100),
	attach_description_ptr	ptr,
	first_arg			fixed bin,
	idx			fixed bin,
	initialized		bit (1),
	iocb_ptr			ptr,
	login_channel_sw		bit (1),
	mask			bit (36),
	masked_sw			bit (1) init ("0"b),
	no_set_bc_sw		bit (1),
	output_arg		fixed bin,
	path_arg			fixed bin,
	status			fixed bin (35),
	whoami			char (32) varying;

declare	1 area_data		aligned like area_info;
%page;
/* Constants */

declare	NL			char (1) static options (constant) initial ("
");
declare	WHITE			char (5) static options (constant) initial ("
	 ");					/* FF VT NL TAB SPACE				*/

/* Static												*/

declare	1 unable_to_do_io		aligned static,
	  2 version		fixed bin initial (0),
	  2 status_code		fixed bin (35);

/* Based												*/

declare	attach_descrip		char (400) varying;
declare	attach_description		char (length (attach_descrip)) varying based (attach_description_ptr)
				initial (attach_descrip);
declare	allocated_chars		char (abs_data.allocated_chars_len) based (abs_data.allocated_chars_ptr);
declare	ec_path			char (abs_data.ec_path_len) based (abs_data.ec_path_ptr);
declare	input_file		char (input_string.len) based (input_string.ptr);
declare	sys_area			area based (get_system_free_area_ ());

/* External											*/

declare	abs_io_data_chain_ptr_	ptr external init (null ());

declare	(
	error_table_$noalloc,
	error_table_$notalloc,
	error_table_$bad_mode,
	error_table_$badopt,
	error_table_$badpath,
	error_table_$entlong,
	error_table_$inconsistent,
	error_table_$noarg,
	error_table_$not_detached,
	error_table_$unable_to_do_io,
	error_table_$unimplemented_version
	)			fixed bin (35) external;
%page;
declare	abs_io_control		entry (ptr, char (*), ptr, fixed bin (35));
declare	abs_io_control$close	entry (ptr);
declare	abs_io_control$set_arguments	entry (ptr, (*) char (*) varying, fixed bin, fixed bin (35));
declare	abs_io_put_chars		entry (ptr, ptr, fixed bin (21), fixed bin (35));
declare	abs_io_put_chars$close	entry (ptr, fixed bin (35));
declare	abs_io_put_chars$open	entry (ptr, char (*), char (*), bit (1), bit (1), fixed bin (35));
declare	abs_io_v1_get_line		entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
declare	abs_io_v2_get_line		entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
declare	cv_dec_check_		entry (char (*), fixed bin (35)) returns (fixed bin (35));
declare	cu_$set_cl_intermediary	entry (entry);
declare	define_area_		entry (ptr, fixed bin (35));
declare	expand_pathname_		entry (char (*), char (*), char (*), fixed bin (35));
declare	get_system_free_area_	entry () returns (ptr);
declare	hcs_$initiate_count		entry options (variable);
declare	hcs_$reset_ips_mask		entry (bit (36), bit (36));
declare	hcs_$set_ips_mask		entry (bit (36), bit (36));
declare	hcs_$set_max_length_seg	entry (pointer, fixed bin (19), fixed bin (35));
declare	hcs_$terminate_noname	entry (ptr, fixed bin (35));
declare	iox_$destroy_iocb		entry (ptr, fixed bin (35));
declare	iox_$propagate		entry (ptr);
declare	pathname_			entry (char (*), char (*)) returns (char (168));
declare	release_area_		entry (ptr);
declare	requote_string_		entry (char (*)) returns (char (*));
declare	user_info_$absout		entry (char (*));
declare	user_info_$absin		entry (char (*));
declare	user_info_$login_arg_count	entry (fixed bin, fixed bin (21), fixed bin (21));
declare	user_info_$login_arg_ptr	entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
%page;
/* abs_io_$abs_io_attach:
       procedure (P_iocb_ptr, P_attach_args, P_report_switch, P_status)					*/

	abs_entry = "1"b;
	whoami = "abs_io_";

	go to COMMON;

ec_input_$ec_input_attach:
     entry (P_iocb_ptr, P_attach_args, P_report_switch, P_status);

	abs_entry = "0"b;
	whoami = "ec_input_";

COMMON:
	if unable_to_do_io.status_code = 0 then unable_to_do_io.status_code = error_table_$unable_to_do_io;

	abs_data_ptr = null ();			/* Preset automatic before installing cleanup handler	*/
	initialized = "0"b;
	mask = ""b;

	on cleanup call clean_up ();

	call allocate_abs_data;
%page;
/* Fill in all pointers as null before enabling cleanup of things within abs_data				*/

	call initialize_abs_data;

	abs_data.allocated_chars_ptr, abs_data.else_clause_ptr, abs_data.chars_ptr = null;
	abs_data.instance_chain.prev_ptr, abs_data.instance_chain.next_ptr = null;
	abs_data.expand_data_ptr, abs_data.ec_data_ptr, abs_data.variables_ptr = null;
	abs_data.command_line.iocb, abs_data.comment_line.iocb,
	     abs_data.control_line.iocb, abs_data.input_line.iocb = null;
	abs_data.output_file.fcb_ptr, abs_data.output_file.seg_ptr, abs_data.input_string.ptr = null;

	arg_info.arg_ptr, arg_info.default_arg_ptr, arg_info.ec_name_ptr, arg_info.ec_path_ptr = null;

	initialized = "1"b;
%page;
/* Get some of the arguments */

	arg_count = hbound (P_attach_args, 1);		/* get size of option array				*/

	first_arg, output_arg, path_arg = 0;
	login_channel_sw, no_set_bc_sw = "0"b;

	do idx = 1 to arg_count while (first_arg = 0);

	     arg_str = P_attach_args (idx);
	     if index (arg_str, "-") = 1 then do;	/* control arg */

		if arg_str = "-argument" | arg_str = "-ag" then first_arg = idx + 1;

		else if arg_str = "-no_set_bit_count" | arg_str = "-nsbc" then no_set_bc_sw = "1"b;
		else if arg_str = "-set_bit_count" | arg_str = "-sbc" then no_set_bc_sw = "0"b;

		else if abs_entry & arg_str = "-login_channel" then login_channel_sw = "1"b;
		else if arg_str = "-output_file" | arg_str = "-of"
		then if output_arg ^= 0 then call error (0, whoami, "-output_file specified twice.");
		     else if idx = arg_count then call error (0, whoami, "No value specified for -output_file");
		     else output_arg, idx = idx + 1;

		else if arg_str = "-pathname" | arg_str = "-pn"
		then if path_arg ^= 0 then call error (0, whoami, "More than one pathname specified.");
		     else if idx = arg_count then call error (0, whoami, "No value specified for -pathname");
		     else path_arg, idx = idx + 1;

		else if abs_entry & (arg_str = "-single_segment_file" | arg_str = "-ssf") then open_data.ssf = "1"b;

		else if abs_entry & (arg_str = "-truncate" | arg_str = "-tc") then open_data.truncate = "1"b;

		else call error (error_table_$badopt, whoami, "^a", arg_str);
	     end;

	     else if path_arg = 0 then path_arg = idx;
	     else first_arg = idx;
	end;

	if login_channel_sw
	then if path_arg > 0 | first_arg > 0 | output_arg > 0
	     then call error (error_table_$inconsistent, whoami, "-login_channel and other arguments.");
	     else ;
	else if path_arg = 0 then call error (error_table_$noarg, whoami, "Input file pathname.");

	if first_arg = 0 then first_arg = arg_count + 1;

	on area call error (error_table_$noalloc, whoami, "In per-invocation area.");

	if abs_entry
	then do;
		if login_channel_sw
		then call initiate_input_file_login_channel;
		else do;
			if first_arg > arg_count then call error (error_table_$noarg, whoami, "Input file.");
			call initiate_input_path (first_arg);
			first_arg = first_arg + 1;
		     end;
	     end;
	else call initiate_input_path (path_arg);

/* Determine version of input file */

	if substr (input_file, 1, min (8, input_string.len)) ^= "&version" | search (input_file, WHITE) ^= 9
	then do;
		open_data.parser_version = 1 /* Default_version */;
		input_string.start, input_string.limit = 0;
	     end;
	else do;
		idx = index (substr (input_file, 9), NL);
		if idx = 0
		then call error (error_table_$unimplemented_version, whoami, "Newline must end &version statement.");
		if verify (substr (input_file, 9, idx - 1), WHITE) = 0
		then call error (error_table_$unimplemented_version, whoami,
			"No version given in &version statement.");
		open_data.parser_version =
		     cv_dec_check_ (ltrim (rtrim (substr (input_file, 10, idx - 2), WHITE), WHITE), status);
		if status ^= 0 | open_data.parser_version < 1 /* Lowest_version */ | open_data.parser_version > 2
						/* Highest_version */
		then call error (error_table_$unimplemented_version, whoami, "&version ""^a""",
			substr (input_file, 10, idx - 2));
		if open_data.parser_version = 1 then input_string.start, input_string.limit = idx + 8;
		else input_string.start, input_string.limit = idx + 9;  /* v2 likes to start at first char */
	     end;
%page;
	if ^login_channel_sw
	then if first_arg > 0 & first_arg <= arg_count
	     then do;
		     call abs_io_control$set_arguments (abs_data_ptr, P_attach_args (*), first_arg, status);
		     if status ^= 0
		     then call error (status, whoami, "Setting arguments:^vs^(^/^a^)", first_arg - 1,
			     P_attach_args (*));
		end;
	     else ;
	else call process_login_arguments;

/* Fill in defaults											*/

	abs_data.absentee = abs_entry;
	abs_data.login_channel = login_channel_sw;
	open_data.sio = abs_data.absentee;
	open_data.si = ^abs_data.sio;

	call set_trace_defaults ();

/* generate attach description									*/

	attach_descrip = whoami;
	if ^login_channel_sw then attach_descrip = attach_descrip || " " || requote_string_ (ec_path);
	if output_arg > 0
	then do;
		attach_descrip = attach_descrip || " -of ";
		if abs_data.output_dir ^= ">" then attach_descrip = attach_descrip || rtrim (abs_data.output_dir);
		attach_descrip = attach_descrip || ">";
		attach_descrip = attach_descrip || rtrim (abs_data.output_entry);
	     end;
	if open_data.truncate then attach_descrip = attach_descrip || " -truncate";
	if open_data.ssf then attach_descrip = attach_descrip || " -ssf";
	if login_channel_sw then attach_descrip = attach_descrip || " -login_channel";

	allocate attach_description in (abs_data.work_area);

	revert area;
%page;
/* Now mask down and diddle with IOCB...								*/

	on any_other call any_other_handler;

	call hcs_$set_ips_mask (mask, mask);
	masked_sw = "1"b;

	revert cleanup;

	iocb_ptr = P_iocb_ptr;

	if iocb_ptr -> iocb.attach_descrip_ptr ^= null ()
	then call error (error_table_$not_detached, whoami, "IOCB ""^a"" at ^p already attached.",
		iocb_ptr -> iocb.name, iocb_ptr);

	iocb_ptr -> iocb.attach_data_ptr = abs_data_ptr;
	iocb_ptr -> iocb.control = abs_io_control;
	iocb_ptr -> iocb.attach_descrip_ptr = attach_description_ptr;
						/* When this is done, we are attached, sort of		*/

	instance_chain.next_ptr = null ();
	instance_chain.prev_ptr = abs_io_data_chain_ptr_;
	abs_io_data_chain_ptr_ = abs_data_ptr;
	if instance_chain.prev_ptr = null ()
	then instance_chain.level = 1;
	else do;
		instance_chain.prev_ptr -> instance_chain.next_ptr = abs_data_ptr;
		instance_chain.level = instance_chain.prev_ptr -> instance_chain.level + 1;
	     end;

	if no_set_bc_sw
	then do;
		status = 0;
		call abs_io_control (iocb_ptr, "no_set_bc", null (), status);
		if status ^= 0 then call error (status);
	     end;

	iocb_ptr -> iocb.open = abs_io_$abs_io_open;
	iocb_ptr -> iocb.detach_iocb = abs_io_$abs_io_detach;

	call iox_$propagate (iocb_ptr);		/* Tell the world we are attached			*/

	call hcs_$reset_ips_mask (mask, mask);

	P_status = 0;

EGRESS:
	return;
%page;
abs_io_$abs_io_open:
     entry (P_iocb_ptr, P_opening_mode, P_report_switch, P_status);

	mask = ""b;

	on any_other call any_other_handler;

	call hcs_$set_ips_mask (mask, mask);

	iocb_ptr = P_iocb_ptr -> iocb.actual_iocb_ptr;
	abs_data_ptr = iocb_ptr -> iocb.attach_data_ptr;

	if ^((P_opening_mode = Stream_input & open_data.si) | (P_opening_mode = Stream_input_output & open_data.sio))
	then call error (error_table_$bad_mode);

	if P_opening_mode = Stream_input_output
	then do;
		call abs_io_put_chars$open (abs_data_ptr, open_data.output_dir, open_data.output_entry,
		     (open_data.truncate), ^open_data.ssf, status);
		if status ^= 0 then call error (status);
		open_data.truncate = "0"b;		/* Only truncate on first opening for stream_input_output	*/
	     end;

	if abs_data.allocated_chars_ptr ^= null () then free allocated_chars;
	unspec (abs_data.if_info) = "0"b;
	abs_data.chars_ptr, abs_data.else_clause_ptr, abs_data.prev_if_ptr = null ();
	abs_data.allocated_chars_len, abs_data.chars_len, abs_data.else_clause_len = 0;
	input_string.position = input_string.start;
	abs_data.unique_name = "";

	iocb_ptr -> iocb.close = abs_io_$abs_io_close;

	if open_data.parser_version = 1
	then iocb_ptr -> iocb.get_line = abs_io_v1_get_line;
	else iocb_ptr -> iocb.get_line = abs_io_v2_get_line;

	if P_opening_mode = Stream_input_output then iocb_ptr -> iocb.put_chars = abs_io_put_chars;

	abs_data.open_description = iox_modes (P_opening_mode);
	iocb_ptr -> iocb.open_descrip_ptr = addr (abs_data.open_description);
						/* When this is done, we are open			*/
	call iox_$propagate (iocb_ptr);		/* So tell the world, already				*/

	call hcs_$reset_ips_mask (mask, mask);

	P_status = 0;

	if abs_data.absentee & abs_data.login_channel
	then begin;				/* do special absentee environment stuff */
declare	print_abs_msg_$login	entry;

		call print_abs_msg_$login;

		call hcs_$set_max_length_seg (stackbaseptr (), (248 * 1024), (0));
		call cu_$set_cl_intermediary (reenter_environment);
	     end;

	return;
%page;
abs_io_$abs_io_close:
     entry (P_iocb_ptr, P_status);

	mask = ""b;

	on any_other call any_other_handler;

	call hcs_$set_ips_mask (mask, mask);

	iocb_ptr = P_iocb_ptr -> iocb.actual_iocb_ptr;
	abs_data_ptr = iocb_ptr -> iocb.attach_data_ptr;

	if output_file.seg_ptr ^= null ()
	then do;
		call abs_io_put_chars$close (abs_data_ptr, status);
		if status ^= 0 then call error (status);
	     end;

	if abs_data.attach.target_ptr ^= null () then call abs_io_control$close (abs_data_ptr);

	abs_data.active, abs_data.eof = "0"b;		/* Reinit per opening variables in case new opening	*/
	abs_data.nest_level, abs_data.expected_nest_level = 0;
						/* for Version 1 &if-&then-&else nesting */

	iocb_ptr -> iocb.open = abs_io_$abs_io_open;
	iocb_ptr -> iocb.detach_iocb = abs_io_$abs_io_detach;

	iocb_ptr -> iocb.open_descrip_ptr = null ();	/* When this is done, we are closed			*/

	call iox_$propagate (iocb_ptr);		/* So tell the world, already				*/

	call hcs_$reset_ips_mask (mask, mask);

	P_status = 0;

	return;
%page;
abs_io_$abs_io_detach:
     entry (P_iocb_ptr, P_status);

	mask = ""b;

	on any_other call any_other_handler;

	call hcs_$set_ips_mask (mask, mask);

	iocb_ptr = P_iocb_ptr;
	abs_data_ptr = iocb_ptr -> iocb.attach_data_ptr;

	iocb_ptr -> iocb.attach_descrip_ptr = null ();	/* When this is done, we are detached			*/

	call iox_$propagate (iocb_ptr);		/* So tell the world, already				*/

	if instance_chain.prev_ptr ^= null ()
	then instance_chain.prev_ptr -> instance_chain.next_ptr = instance_chain.next_ptr;
	if instance_chain.next_ptr ^= null ()
	then instance_chain.next_ptr -> instance_chain.prev_ptr = instance_chain.prev_ptr;
	else abs_io_data_chain_ptr_ = instance_chain.prev_ptr;

	initialized = "1"b;				/* For clean_up					*/

	on cleanup call clean_up ();			/* Do BEFORE unmasking to prevent race window		*/

	call hcs_$reset_ips_mask (mask, mask);

	call clean_up ();

	P_status = 0;

	return;
%page;
abs_io_$allocate_abs_data: entry (P_abs_data_ptr);

	call allocate_abs_data;

	P_abs_data_ptr = abs_data_ptr;

	return;




abs_io_$initialize_abs_data: entry (P_abs_data_ptr);

	abs_data_ptr = P_abs_data_ptr;
	whoami = "ec_input_";

	call initialize_abs_data;

	return;
%page;
reenter_environment: entry;

	call reenter ();
	return;
%page;
allocate_abs_data: proc;

	on area call error (error_table_$noalloc, whoami, "In system area.");
	on bad_area_format call error (error_table_$notalloc, whoami, "In system area.");
	on bad_area_initialization call error (error_table_$notalloc, whoami, "In system area.");

	allocate abs_data in (sys_area);

	revert area;
	revert bad_area_format;
	revert bad_area_initialization;

	unspec (abs_data) = "0"b;

	abs_data.version = abs_data_version_1;		/* This is version of STRUCTURE			*/

end allocate_abs_data;
%page;
any_other_handler:
     procedure ();

declare	continue_to_signal_		entry (fixed bin (35));
declare	terminate_process_		entry (char (*), ptr);

	if substr (mask, 36, 1)
	then call terminate_process_ ("fatal_error", addr (unable_to_do_io));
	else call continue_to_signal_ ((0));

	return;

end any_other_handler;
%page;
clean_up:
     procedure ();

declare	p			ptr;

	if abs_data_ptr ^= null ()
	then do;
		if initialized
		then do;
			if abs_data.attach.save_ptr ^= null ()
			then call iox_$destroy_iocb (abs_data.attach.save_ptr, status);
			p = input_string.ptr;	/* TEMP: this can be removed when terminate_noname is fixed */
			input_string.ptr = null ();
			if p ^= null () then call hcs_$terminate_noname (p, status);
			call release_area_ (addr (abs_data.work_area));
		     end;
		free abs_data;
	     end;

	return;

end clean_up;
%page;
error:
     procedure () options (variable);

declare	status_ptr		ptr;
declare	status_arg		fixed bin (35) based (status_ptr);
declare	arg_list_arg_count		fixed bin;
declare	message			character (256);

declare	com_err_			entry () options (variable);
declare	sub_err_			entry () options (variable);
declare	ioa_$general_rs		entry (pointer, fixed binary, fixed binary, character (*), fixed binary,
				bit (1) aligned, bit (1) aligned);
declare	cu_$arg_count		entry (fixed bin, fixed bin (35));
declare	cu_$arg_list_ptr		entry () returns (ptr);
declare	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin, fixed bin (35));
declare	cu_$generate_call		entry (entry, ptr);

	if masked_sw then call hcs_$reset_ips_mask (mask, mask);
						/* prevent calling com_err_ while masked */

	call cu_$arg_ptr (1, status_ptr, (0), (0));
	call cu_$arg_count (arg_list_arg_count, (0));
	P_status = status_arg;
	if arg_list_arg_count = 1 & P_report_switch then call com_err_ (P_status, whoami);
	else if P_report_switch then call cu_$generate_call (com_err_, cu_$arg_list_ptr ());
	else do;
		call ioa_$general_rs (cu_$arg_list_ptr (), 3, 4, message, (0), "1"b, "0"b);
		call sub_err_ (P_status, (whoami), "s", null (), (0), "^a", message);
	     end;
	call clean_up ();

	go to EGRESS;

end error;
%page;
initialize_abs_data: proc;

dcl (user_info_$absentee_restarted, user_info_$absout_truncation) entry (bit (1) aligned);
dcl (restarted, truncate) bit (1) aligned;

/* Initializes just the things that need to be initialized for any ec execution, including the
   execution of an &on unit by absentee_listen_$execute_handler. */

	abs_data.io_module_name = whoami;

	abs_data.labels_ptr, abs_data.first_xlabel_ptr, abs_data.last_xlabel_ptr = null;
	abs_data.current_lex_block_ptr, abs_data.current_proc_block_ptr = null;
	abs_data.last_block_ptr, abs_data.current_loop_ptr, abs_data.last_loop_ptr, abs_data.saved_state_ptr = null;
	abs_data.attach.target_ptr, abs_data.attach.victim_ptr, abs_data.attach.save_ptr = null;
	abs_data.cleanup_handler_ptr, abs_data.first_handler_ptr = null;
	if abs_entry then do;	/* Only call user_info_ if not exec_com invocation */
	     call user_info_$absentee_restarted (restarted);
	     call user_info_$absout_truncation (truncate);
	     if truncate then if ^restarted then abs_data.truncate = "1"b;
	end;

/* Fill in structure for call to make abs_data.work_area extensible						*/

	area_data.version = area_info_version_1;
	string (area_data.control) = ""b;
	area_data.extend = "1"b;
	area_data.zero_on_free = "1"b;
	area_data.owner = whoami;
	area_data.size = Work_area_size;
	area_data.areap = addr (abs_data.work_area);

	call define_area_ (addr (area_data), status);
	if status ^= 0 then call error (status, whoami, "Initializing work area.");

end initialize_abs_data;
%page;
initiate_input_path:
     procedure (path_idx);

declare	path_idx			fixed bin parameter;

declare	absin_len			fixed bin,
	arg_len			fixed bin (21),
	arg_ptr			ptr,
	arg			char (arg_len) based (arg_ptr),
	bit_count			fixed bin (24),
	input_dir			char (168),
	input_dir_len		fixed bin (21),
	input_entry		char (32),
	input_entry_len		fixed bin (21);

	arg_ptr = addrel (addr (P_attach_args (path_idx)), 1);
	arg_len = length (rtrim (P_attach_args (path_idx)));
	if arg_len = 0 then call error (error_table_$badpath, whoami, "Input filename blank.");
	call expand_pathname_ (arg, input_dir, input_entry, status);
	if status ^= 0 then call error (status, whoami, "Input file:  ^a", arg);
	go to common;

initiate_input_file_login_channel:
     entry;

declare	absin_path		character (168);
	call user_info_$absin (absin_path);

	call expand_pathname_ (absin_path, input_dir, input_entry, status);
	if status ^= 0 then call error (status, whoami, "Input file:  ^a", absin_path);

common:
	call hcs_$initiate_count (input_dir, input_entry, "", bit_count, 0, input_string.ptr, status);
	if input_string.ptr = null ()
	then call error (status, whoami, "Input file: ^a", pathname_ (input_dir, input_entry));

	input_string.len = divide (bit_count, 9, 21, 0);

/* Fill in &ec_path (&0), &ec_name									*/

	abs_data.ec_path_quotes, abs_data.ec_name_quotes = -1;

	input_dir_len = length (rtrim (input_dir));
	input_entry_len = length (rtrim (input_entry));
	if input_dir_len = 1
	then abs_data.ec_path_len = 1 + input_entry_len;
	else abs_data.ec_path_len = input_dir_len + 1 + input_entry_len;

	allocate ec_path in (abs_data.work_area);

	substr (ec_path, 1, input_dir_len) = substr (input_dir, 1, input_dir_len);
	if input_dir_len > 1
	then do;
		substr (ec_path, input_dir_len + 1, 1) = ">";
		input_dir_len = input_dir_len + 1;
	     end;
	abs_data.ec_name_ptr = addr (substr (ec_path, input_dir_len + 1));
	substr (ec_path, input_dir_len + 1, input_entry_len) = substr (input_entry, 1, input_entry_len);
	input_dir_len = input_dir_len + input_entry_len;

	abs_data.ec_name_len = input_entry_len - index (reverse (substr (input_entry, 1, input_entry_len)), ".");
	if abs_data.ec_name_len = 0 then call error (error_table_$badpath, whoami);

/* Fill in pathname of output file, in case needed.							*/

	if abs_entry
	then if login_channel_sw | output_arg > 0
	     then do;
		     if output_arg > 0
		     then call expand_pathname_ ((P_attach_args (output_arg)), open_data.output_dir,
			     open_data.output_entry, status);
		     else do;
			     call user_info_$absout (absin_path);
			     call expand_pathname_ (absin_path, open_data.output_dir, open_data.output_entry,
				status);
			end;
		     if status ^= 0
		     then call error (status, whoami, "Output file ""^a""", P_attach_args (output_arg));
		end;
	     else do;
		     abs_data.output_dir = input_dir;
		     input_entry_len =
			input_entry_len - index (reverse (substr (input_entry, 1, input_entry_len)), ".");
		     absin_len = length (".absin");
		     if input_entry_len > absin_len
		     then /* prevent name.absin.absout */
			if substr (input_entry, input_entry_len - absin_len + 1, absin_len) = ".absin"
			then input_entry_len = input_entry_len - absin_len;
		     if input_entry_len + length (".absout") > maxlength (input_entry)
		     then call error (error_table_$entlong, whoami);
		     substr (open_data.output_entry, 1, input_entry_len) = substr (input_entry, 1, input_entry_len);
		     substr (open_data.output_entry, input_entry_len + 1) = ".absout";
		end;
	else open_data.output_dir, open_data.output_entry = "";

	return;

end initiate_input_path;
%page;
process_login_arguments:
     procedure;

declare	n_args			fixed bin;
declare	arg_len			fixed bin (21);
declare	max_arg_len		fixed bin (21);
declare	argx			fixed bin;

	call user_info_$login_arg_count (n_args, max_arg_len, (0));
	if n_args = 0 then return;			/* Nuthin to do */

	begin;
declare	args			(n_args) char (max_arg_len) varying;
declare	arg_ptr			pointer;
declare	arg			character (arg_len) based (arg_ptr);

	     do argx = 1 to n_args;
		call user_info_$login_arg_ptr (argx, arg_ptr, arg_len, (0));
		args (argx) = arg;

	     end;
	     call abs_io_control$set_arguments (abs_data_ptr, args, 1, status);
	     if status ^= 0 then call error (status, whoami, "Setting arguments:^(^/^a^)", args);
	end;

end process_login_arguments;
%page;
reenter:
     procedure;

/* this procedure intercepts all attempts to reenter the environment
in an absentee process, the process is logged out with a
special message */

/* THERE IS CODE HERE COPIED FROM LOGOUT */
/* so that the special error code can be put in the structures. */
/* someday there should be logout_ */

declare	error_table_$abs_reenter	fixed bin (35) ext;
declare	convert_status_code_	entry (fixed binary (35), character (8) aligned, character (100) aligned);
declare	execute_epilogue_		entry (bit (1) aligned);
declare	print_abs_msg_$logout	entry;
declare	ioa_			entry () options (variable);
declare	terminate_process_		entry (character (*), pointer);
declare	signal_			entry options (variable);

declare	try_message		bit (1) aligned internal static init ("1"b);
declare	long			character (100) aligned;
declare	1 FINISH_INFO		aligned like finish_info;
dcl	1 term_structure		aligned,		/* action for process termination */
	  2 version		fixed bin init (0), /* indicates version of structure */
	  2 ec			fixed bin (35);

	if try_message
	then do;
		try_message = "0"b;
		call convert_status_code_ (error_table_$abs_reenter, "", long);
		call ioa_ ("^/^a", long);
		call print_abs_msg_$logout;
	     end;
	FINISH_INFO.length = size (FINISH_INFO);
	FINISH_INFO.version = 1;
	FINISH_INFO.info_string = "";
	unspec (FINISH_INFO.action_flags) = ""b;
	FINISH_INFO.status_code = error_table_$abs_reenter;
	call signal_ ("finish", null (), addr (FINISH_INFO));
	call execute_epilogue_ ("0"b);		/* The "0"b says not just a run unit */
	term_structure.ec = error_table_$abs_reenter;
	call terminate_process_ ("fatal_error", addr (term_structure));
						/* log the process out */
end reenter;
%page;
set_trace_defaults: proc;

/* Fills in default tracing modes */

dcl default_mode bit (1);

	if abs_data.ec_data_ptr = null then default_mode = "1"b;
	else if abs_data.ec_data_ptr -> ec_data.active_function then default_mode = "0"b;
	else default_mode = "1"b;

	call set_default (abs_data.command_line, default_mode, EXPANDED);
	call set_default (abs_data.comment_line, "0"b, UNEXPANDED);
	call set_default (abs_data.control_line, "0"b, UNEXPANDED);
	call set_default (abs_data.input_line, default_mode, EXPANDED);

	return;


set_default: proc (P_line, P_mode, P_expand);

dcl 1 P_line aligned like abs_data.command_line;
dcl P_mode bit (1);
dcl P_expand fixed bin;

	P_line.on = P_mode;
	P_line.expand = P_expand;
	P_line.prefix = "";

end set_default;

end set_trace_defaults;
%page;
%include abs_io_data;
%page;
%include area_info;
%page;
%include condition_info_header;
%page;
%include ec_data;
%page;
%include finish_info;
%page;
%include iocb;
%page;
%include iox_modes;


     end abs_io_$abs_io_attach;
