/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-04-14,Herbst), approve(86-04-14,MCR7377),
     audit(86-04-17,Kissel), install(86-04-22,MR12.0-1041):
     Fixed to apply equal convention correctly to -of argument.
                                                   END HISTORY COMMENTS */


/* format: off */

convert_ec: cvec: proc;

/* Converts a version 1 exec_com to version 2 */
/* Conversions of note are:	leading/trailing whitespace
				->  &SP, &HT, etc.	V2 ignores leading/trailing white
			&<whitespace>  ->  &-	new comment sequence
			&if [...]  -> &if &[...]	af expansion in control lines
			&&...&  ->  &&&&...&&	double strings of 2 or more &'s
			&(...)  ->  &&(...)		do command kludge
			&0  ->  &ec_path		&0 is obsolete in V2
			&NN     ->  &(NN)		2 or more digit params
			&command_line  ->  &trace &command
			&comment_line  ->  &trace &comment
			&control_line  -> &trace &control
			&input_line  ->  &trace &input
			&unknown (beginning of line)  ->  comment line  (causes warning unless -bf)
			&unknown -> &&unknown	(causes warning unless -bf)
/* Written 12/08/80 S. Herbst */
/* Converted to final MCR'd version 05/13/81 */
/* Changed to accept .absin suffix explicitly 12/17/81 S. Herbst */
/* Fixed to restore original if replacement is interrupted 01/03/84 S. Herbst */


/* Constants */

dcl KEYWORDS_STRING char (KEYWORDS_LEN) aligned based (addr (KEYWORDS));
dcl ME char (32) int static options (constant) init ("convert_ec");
dcl KEYWORDS (28) char (32) int static options (constant) init
	("&attach", "&command_line", "&comment_line", "&control_line", "&detach",
	 "&ec_dir", "&ec_name", "&ec_switch", "&else", "&f&n",
	 "&goto", "&if", "&input_line", "&is_absin", "&is_active_function",
	 "&is_af", "&is_attached", "&is_input_line", "&label", "&n",
	 "&print", "&q&n", "&quit", "&r&n", "&ready",
	 "&ready_proc", "&return", "&then");

dcl DIGITS char (10) int static options (constant) init ("0123456789");
dcl ALPHABET char (27) int static options (constant) init ("abcdefghijklmnopqrstuvwxyz_");
dcl (BRANCHES init (2), BRANCHES_AND_LINKS init (3)) fixed (2) int static options (constant);
dcl WHITE char (4) int static options (constant) init (" 	");  /* SP HT VT FF */
dcl SP char (1) int static options (constant) init (" ");
dcl NL char (1) int static options (constant) init ("
");

dcl PREFIXES (10) char (8) varying int static options (constant) init
	("q", "r", "f", "qf", "rf", "q&n", "r&n", "f&n", "qf&n", "rf&n");

dcl TAKES_ARG (10) bit (1) int static options (constant) init
	("1"b, "1"b, "1"b, "1"b, "1"b, "0"b, "0"b, "0"b, "0"b, "0"b);

/* Based */

dcl arg char (arg_len) based (arg_ptr);


/* Automatic */

dcl (dn1, dn2, temp_dn) char (168);
dcl (en1, en2, suffix, temp_en) char (32);

dcl (absin_sw, begin_line_sw, chase_sw, check_sw, force_sw, got_path1_sw, got_path2_sw, star_sw) bit (1);

dcl arg_ptr ptr;

dcl KEYWORDS_LEN fixed;
dcl (arg_count, i, severity) fixed;
dcl star_select fixed (2);
dcl arg_len fixed (21);
dcl code fixed (35);

dcl error_table_$action_not_performed fixed (35) ext;
dcl error_table_$badopt fixed (35) ext;
dcl error_table_$namedup fixed bin (35) ext;
dcl error_table_$segknown fixed (35) ext;
dcl error_table_$segnamedup fixed (35) ext;

dcl iox_$error_output ptr ext;

dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl check_star_name_$entry entry (char (*), fixed (35));
dcl cu_$arg_count entry (fixed, fixed (35));
dcl cu_$arg_ptr entry (fixed, ptr, fixed (21), fixed (35));
dcl cv_dec_check_ entry (char (*), fixed (35)) returns (fixed);
dcl delete_$ptr entry (ptr, bit (6), char (*), fixed bin (35));
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed (35));
dcl expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed (35));
dcl get_equal_name_ entry (char (*), char (*), char (*), fixed (35));
dcl get_pdir_ entry returns (char (168));
dcl get_system_free_area_ entry returns (ptr);
dcl get_temp_segment_ entry (char (*), ptr, fixed (35));
dcl hcs_$chname_seg entry (ptr, char (*), char (*), fixed (35));
dcl hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl hcs_$fs_get_path_name entry (ptr, char (*), fixed, char (*), fixed (35));
dcl hcs_$initiate_count entry (char (*), char (*), char (*), fixed (24), fixed (2), ptr, fixed (35));
dcl hcs_$make_seg entry (char (*), char (*), char (*), fixed (5), ptr, fixed (35));
dcl hcs_$set_bc_seg entry (ptr, fixed (24), fixed (35));
dcl hcs_$star_ entry (char (*), char (*), fixed (2), ptr, fixed, ptr, ptr, fixed (35));
dcl hcs_$terminate_noname entry (ptr, fixed (35));
dcl ioa_$ioa_switch entry options (variable);
dcl ioa_$rsnnl entry options (variable);
dcl nd_handler_ entry (char (*), char (*), char (*), fixed (35));
dcl pathname_ entry (char(*), char(*)) returns(char(168));
dcl release_temp_segment_ entry (char (*), ptr, fixed (35));

dcl (addr, copy, divide, hbound, fixed, index, length, null, rtrim, reverse, search, substr, verify) builtin;

dcl cleanup condition;
%page;
	KEYWORDS_LEN = length (KEYWORDS (1)) * hbound (KEYWORDS, 1);

	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME);
	     return;
	end;

/* Read control args */

	chase_sw, check_sw, force_sw = "0"b;
	got_path1_sw, got_path2_sw = "0"b;
	severity = 2;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if index (arg, "-") = 1 then
		if arg = "-chase" then chase_sw = "1"b;
		else if arg = "-check" | arg = "-ck" then check_sw = "1"b;
		else if arg = "-force" | arg = "-fc" then force_sw = "1"b;
		else if arg = "-no_chase" then chase_sw = "0"b;
		else if arg = "-no_check" | arg = "-nck" then check_sw = "0"b;
		else if arg = "-no_force" | arg = "-nfc" then force_sw = "0"b;

		else if arg = "-output_file" | arg = "-of" then do;
		     i = i + 1;
		     if i > arg_count then do;
			call com_err_ (0, ME, "No value specified for -output_file");
			return;
		     end;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

		     call expand_pathname_ (arg, dn2, en2, code);
		     if code ^= 0 then do;
ARG_ERR:			call com_err_ (code, ME, "^a", arg);
			return;
		     end;
		     got_path2_sw = "1"b;
		end;

		else if arg = "-severity" | arg = "-sv" then do;
		     i = i + 1;
		     if i > arg_count then do;
			call com_err_ (0, ME, "No value specified for -severity");
			return;
		     end;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     severity = cv_dec_check_ (arg, code);
		     if code ^= 0 then go to ARG_ERR;
		end;

		else do;
		     call com_err_ (error_table_$badopt, ME, "^a", arg);
		     return;
		end;

	     else if got_path1_sw then do;
USAGE:		call com_err_$suppress_name (0, ME, "Usage:  convert_ec path {-control_args}");
		return;
	     end;

	     else do;
		suffix = "ec";
		if length (arg) > 6 then
		     if substr (arg, length (arg) - 5, 6) = ".absin" then suffix = "absin";

		call expand_pathname_$add_suffix (arg, suffix, dn1, en1, code);
		if code ^= 0 then go to ARG_ERR;

		call check_star_name_$entry (en1, code);
		if code ^= 0 then
		     if code = 1 | code = 2 then star_sw = "1"b;
		     else do;
			call com_err_ (code, ME, "^a", pathname_ (dn2, en2));
			return;
		     end;
		else star_sw = "0"b;

		got_path1_sw = "1"b;
	     end;
	end;

	if ^got_path1_sw then go to USAGE;

	if got_path2_sw then

	     if star_sw then call convert_stars (dn1, en1, dn2, en2);

	     else call convert_one (dn1, en1, dn2, en2);

	else if star_sw then call convert_stars (dn1, en1, dn1, "===");

	else call convert_one (dn1, en1, dn1, en1);

RETURN:	return;
%page;
convert_stars: proc (P_dn1, P_en1, P_dn2, P_en2);

dcl (P_dn1, P_en1, P_dn2, P_en2) char (*);
dcl 1 entries (entry_count) aligned based (entries_ptr),
   2 pad bit (18) unaligned,
   2 nindex bit (18) unaligned;
dcl names (999) char (32) based (names_ptr);
dcl area area based (area_ptr);
dcl (area_ptr, entries_ptr, names_ptr) ptr;
dcl (entry_count, j) fixed;

	area_ptr = get_system_free_area_ ();
	entries_ptr, names_ptr = null;

	if chase_sw then star_select = BRANCHES_AND_LINKS;
	else star_select = BRANCHES;

	on cleanup call star_cleanup;

	call hcs_$star_ (P_dn1, P_en1, star_select, area_ptr, entry_count, entries_ptr, names_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a^[>^]^a", P_dn1, P_dn1 ^= ">", P_en1);
	     return;
	end;

	do j = 1 to entry_count;

	     call convert_one (P_dn1, names_ptr -> names (fixed (entries_ptr -> entries (j).nindex)), P_dn2, P_en2);
	end;

	call star_cleanup;

	return;

star_cleanup: proc;

	if entries_ptr ^= null then free entries in (area);
	if names_ptr ^= null then free names in (area);

end star_cleanup;

end convert_stars;
%page;
convert_one: proc (P_dn1, P_en1, P_dn2, P_en2);

dcl (P_dn1, P_en1, P_dn2, P_en2) char (*);
dcl seg1 char (len1) based (ptr1);
dcl seg2 char (len2) based (ptr2);
dcl (digit_str, target_en) char (32);
dcl keyword_name char (32) varying;
dcl next_char char (1);
dcl (errors_sw, found_sw, replacing_orig_sw) bit (1);
dcl (ptr1, ptr2, safe_copy_ptr, target_ptr) ptr;
dcl bit_count fixed (24);
dcl (len1, len2, pos1) fixed (21);
dcl (i, line_number) fixed;
dcl (code, safe_copy_code) fixed (35);

	call get_equal_name_ (P_en1, P_en2, target_en, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a for ^a", P_en2, P_en1);
	     go to RETURN;
	end;

/* Add suffix if necessary to target entry name */

	call expand_pathname_$add_suffix (target_en, suffix, (""), target_en, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a", target_en);
	     go to RETURN;
	end;

	ptr1, ptr2, safe_copy_ptr, target_ptr = null;
	replacing_orig_sw = "0"b;

	on cleanup call clean_up;

	call hcs_$initiate_count (P_dn1, P_en1, "", bit_count, 0, ptr1, code);
	if ptr1 = null then do;
	     call com_err_ (code, ME, "^a", pathname_ (P_dn1, P_en1));
	     return;
	end;

RETRY:	if ^check_sw then do;
	     call hcs_$make_seg (P_dn2, target_en, "", 01010b, target_ptr, code);
	     if target_ptr = null then do;
		call com_err_ (code, ME, "^a", pathname_ (P_dn2, target_en));
		go to RETURN;
	     end;
	     else if (code = error_table_$namedup | code = error_table_$segknown) & target_ptr ^= ptr1 then do;
		call nd_handler_ (ME, dn2, target_en, code);
		if code = error_table_$action_not_performed then return;
		else go to RETRY;
	     end;
	end;

	len1 = divide (bit_count, 9, 21, 0);
	line_number = 1;
	pos1 = verify (seg1, WHITE);

	len2 = 0;

	if substr (seg1, pos1, 8) = "&version" then do;
	     pos1 = pos1 + 8;
	     if substr (seg1, pos1, 1) ^= SP then do;
BAD_VERSION:	call com_err_ (0, ME, "Invalid &version statement on first line.");
CLEANUP_TARGET:	if target_ptr ^= null & target_ptr ^= ptr1 then call hcs_$delentry_seg (target_ptr, code);
		go to RETURN;
	     end;

	     i = verify (substr (seg1, pos1), WHITE);
	     if i = 0 then go to BAD_VERSION;
	     pos1 = pos1 + i - 1;
	     if substr (seg1, pos1, 1) = NL then go to BAD_VERSION;  /* no number */
	     if index (WHITE || NL, substr (seg1, pos1 + 1, 1)) = 0 then go to BAD_VERSION;  /* not 1 char */

	     if substr (seg1, pos1, 1) = "2" then do;
		call com_err_ (0, ME, "Segment is already version 2.  ^a",
		     pathname_ (P_dn1, P_dn2));
		go to CLEANUP_TARGET;
	     end;
	     else if substr (seg1, pos1, 1) ^= "1" then go to BAD_VERSION;

	     pos1 = pos1 + verify (substr (seg1, pos1 + 1), WHITE || NL);  /* skip the &version stmt */
	end;
	else pos1 = 1;				/* if no &version 1, don't strip leading white space */

	if ^check_sw then do;
	     call get_temp_segment_ (ME, ptr2, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "Temp segment.");
		go to CLEANUP_TARGET;
	     end;
	end;

	call output ("&version 2" || NL);

/* Convert the segment */

	errors_sw = "0"b;

	i = verify (seg1, WHITE);			/* look for initial leading whitespace */
	if i > 1 then do;

	     call convert_white (substr (seg1, 1, i - 1));

	     pos1 = i;
	end;

	do while (pos1 <= len1);

	     i = search (substr (seg1, pos1), "&" || NL);

	     if i = 0 then do;

		if index (WHITE, substr (seg1, len1, 1)) ^= 0 then

		     call convert_trailing_white (substr (seg1, pos1));

		else call output (substr (seg1, pos1));

		go to COPY_SEG;
	     end;

	     if substr (seg1, pos1 + i - 1, 1) = NL then do;  /* NL */
		if i > 1 then			/* some text in between */
		     if index (WHITE, substr (seg1, pos1 + i - 2, 1)) ^= 0 then

			call convert_trailing_white (substr (seg1, pos1, i - 1));

		     else call output (substr (seg1, pos1, i - 1));

		call output (NL);

		line_number = line_number + 1;
		pos1 = pos1 + i;			/* position past the NL */
		i = verify (substr (seg1, pos1), WHITE);  /* look for leading whitespace */
		if i > 1 then do;

		     call convert_white (substr (seg1, pos1, i - 1));

		     pos1 = pos1 + i - 1;
		end;

		go to NEXT;
	     end;

/*  &  */
	     if i > 1 then call output (substr (seg1, pos1, i - 1));  /* copy up to the & */

	     pos1 = pos1 + i - 1;			/* position of the & */

	     if pos1 = len1 | index (WHITE || NL, substr (seg1, pos1 + 1, 1)) ^= 0 then do;  /* comment */
		i = index (substr (seg1, pos1), NL);  /* take whole comment line */
		if i = 0 then do;
		     call warn (3, "Segment does not end in newline.");

		     if pos1 = len1 then call output ("&-");

		     else call output ("&-" || substr (seg1, pos1 + 1));

		     go to COPY_SEG;
		end;
		else if pos1 = 1 then do;

GOOD_COMMENT:	     call output ("&-" || substr (seg1, pos1 + 1, i - 1));

		     line_number = line_number + 1;
		     pos1 = pos1 + i;
		end;
		else if substr (seg1, pos1 - 1, 1) = NL then go to GOOD_COMMENT;
		else do;
		     call warn (1, "&<SP> does not begin line; converted to &&<SP>");

		     call output ("&& ");

		     pos1 = pos1 + 2;
		end;
	     end;

	     else if substr (seg1, pos1 + 1, 1) = "&" then do;  /* double 2 or more &'s */
		i = verify (substr (seg1, pos1), "&") - 1;
		if i = -1 then i = len1 - pos1 + 1;

		call output (copy ("&", i * 2));

		pos1 = pos1 + i;
	     end;

	     else do;				/* &keyword */

		if substr (seg1, pos1 + 1, 1) = "(" then do;  /* the do command kludge */
						/* change &(1) -> &&(1) */
		     call output ("&" || substr (seg1, pos1, 2));

		     pos1 = pos1 + 2;
		end;

		else do;

		     if pos1 = 1 then begin_line_sw = "1"b;
		     else if substr (seg1, pos1 - 1, 1) = NL then begin_line_sw = "1"b;
		     else begin_line_sw = "0"b;

		     pos1 = pos1 + 1;
		     next_char = substr (seg1, pos1, 1);

		     if index (DIGITS, next_char) ^= 0 then do;  /* &1 parameter */

			call output ("&");

PARAM:			i = verify (substr (seg1, pos1), DIGITS);
			if i = 0 then do;
			     call warn (3, "Segment does not end in newline.");
			     digit_str = substr (seg1, pos1);
			end;
			else digit_str = substr (seg1, pos1, i - 1);

			if length (rtrim (digit_str)) = 1 then

			     if digit_str = "0" then call output ("ec_path");

			     else call output (rtrim (digit_str));

			else call output ("(" || rtrim (digit_str) || ")");  /* &12 -> &(12) */

			pos1 = pos1 + length (rtrim (digit_str));
		     end;

		     else do;			/* some &keyword */

			if index ("fqr", next_char) ^= 0 then do;  /* might be &r, &q, &f something */

			     do i = hbound (PREFIXES, 1) by -1 to 1
				while (index (substr (seg1, pos1), PREFIXES (i)) ^= 1); end;

			     if i ^= 0 then do;	/* it is */
				if TAKES_ARG (i) then do;
				     if pos1 < len1 &
				       index (DIGITS, substr (seg1, pos1 + length (PREFIXES (i)), 1)) ^= 0 then do;

					call output ("&" || PREFIXES (i));

					pos1 = pos1 + length (PREFIXES (i));
					go to PARAM;
				     end;
				end;

				else do;		/* &f&n, &r&n, &q&n, &rf&n, &qf&n */

				     call output ("&" || PREFIXES (i));

				     pos1 = pos1 + length (PREFIXES (i));
				     go to NEXT;
				end;
			     end;
			end;

			keyword_name = "&";
			found_sw = "0"b;

			do while (^found_sw);

			     keyword_name = keyword_name || next_char;
			     pos1 = pos1 + 1;

			     if known (keyword_name) then do;

				found_sw = "1"b;

				if keyword_name = "&command_line" then call output ("&trace &command");
				else if keyword_name = "&input_line" then call output ("&trace &input");
				else if keyword_name = "&comment_line" then call output ("&trace &comment");
				else if keyword_name = "&control_line" then call output ("&trace &control");

				else do;

				     call output ((keyword_name));

				     if keyword_name = "&if" then do;  /* &if [ -> &if &[ */
					pos1 = pos1 + verify (substr (seg1, pos1), WHITE) - 1;
					if substr (seg1, pos1, 1) = "[" then do;
					     pos1 = pos1 + 1;

					     call output (" &[");
					end;

					else call output (" ");
				     end;

				     else if keyword_name = "&print" then do;  /* look for &print ^-^/^x etc. */
					i = index (substr (seg1, pos1), NL);
					if i = 0 then i = len1 - pos1 + 1;
					if index (substr (seg1, pos1, i), "^") ^= 0 then
					     call warn (3, "ioa_ controls in &print statement:  "
						|| rtrim (substr (seg1, pos1 + 1, i - 1), NL) || NL
						|| "Should be replaced by literals such as &SP");
				     end;
				end;
			     end;

			     else do;
				if pos1 > len1 | index (ALPHABET, substr (seg1, pos1, 1)) = 0 then do;

				     found_sw = "1"b;  /* stop the loop */

				     if begin_line_sw then do; /* &word  begins line; convert line to comment */
					call warn (2, "Invalid stmt " || keyword_name ||
					     " converted to comment.");
					i = index (substr (seg1, pos1), NL);
					if i = 0 then call output ("&-" || keyword_name || substr (seg1, pos1));

					else do;

					     call output ("&-" || keyword_name || substr (seg1, pos1, i - 1));

					     pos1 = pos1 + i - 1;  /* skip to NL at end of line */
					end;
				     end;
				     else do;
					call warn (1, "Invalid keyword " || keyword_name
					     || " converted to literal string.");

					call output ("&" || keyword_name);  /* convert to literal &&string */
				     end;
				end;

				else next_char = substr (seg1, pos1, 1);
			     end;
			end;
		     end;
		end;
	     end;
NEXT:	end;

COPY_SEG:
	if ^check_sw then do;			/* write the converted seg */

	     if errors_sw & ^force_sw then do;
		call hcs_$set_bc_seg (ptr2, len2 * 9, 0);

		call hcs_$fs_get_path_name (ptr2, temp_dn, 0, temp_en, code);
		if code ^= 0 then do;
		     temp_dn = get_pdir_ ();
		     go to TERMINATE;
		end;

RENAME_TEMP:	call hcs_$chname_seg (ptr2, temp_en, target_en, code);
		if code ^= 0 then do;
		     if code = error_table_$namedup | code = error_table_$segnamedup then do;
			call com_err_ (0, ME, "Errors found.");
			call nd_handler_ (ME, temp_dn, target_en, code);
			if code = 0 then go to RENAME_TEMP;
			if code = error_table_$action_not_performed then go to DELETE_OFILE;
		     end;
		     call com_err_ (code, ME, "Errors found; unable to rename temp copy in ^[^a^;[pd]^]",
			temp_dn ^= get_pdir_ (), temp_dn);
		end;
		else do;
TERMINATE:	     call hcs_$terminate_noname (ptr2, code);
		     ptr2 = null;			/* so release_temp_segments_ doesn't get it */

		     call com_err_ (code, ME, "Errors found; look for copy ^[^a;^s[pd]>^a^]",
			temp_dn ^= get_pdir_ (), pathname_ (temp_dn, temp_en), temp_en);
		end;

DELETE_OFILE:	if target_ptr ^= null & target_ptr ^= ptr1 then do;
		     call delete_$ptr (target_ptr, "000100"b, ME, 0);
		     target_ptr = null;
		end;
	     end;

	     else do;
		call get_temp_segment_ (ME, safe_copy_ptr, safe_copy_code);  /* keep copy of orig */
		if code = 0 then safe_copy_ptr -> seg1 = ptr1 -> seg1;  /* in case replacement is interrupted */
		else safe_copy_ptr = null;

		replacing_orig_sw = "1"b;

		target_ptr -> seg2 = ptr2 -> seg2;

		call hcs_$set_bc_seg (target_ptr, len2 * 9, code);
	     end;
	end;

	call finish_up;

	return;
%page;
convert_trailing_white: proc (P_str);

/* Outputs up to the trailing whitespace, then outputs
   literals instead of the trailing whitespace */

dcl P_str char (*);
dcl white_len fixed;

	if length (P_str) = 0 then return;

	white_len = verify (reverse (P_str), WHITE) - 1;
	if white_len = -1 then white_len = length (P_str);

	call output (substr (P_str, 1, length (P_str) - white_len));

	call convert_white (substr (P_str, length (P_str) - white_len + 1));

end convert_trailing_white;
%page;
convert_white: proc (P_str);

/* P_str is all whitespace; output as literals */

dcl P_str char (*);
dcl LITERAL (4) char (2) int static options (constant) init ("SP", "HT", "VT", "FF");
dcl literal_string char (32) varying;
dcl (count, i, type, type2) fixed;

	if length (P_str) = 0 then return;

	type = index (WHITE, substr (P_str, 1, 1));
	count = 1;

	do i = 2 to length (P_str);

	     type2 = index (WHITE, substr (P_str, i, 1));

	     if type2 = type then count = count + 1;
	     else do;
ADD_LITERAL:	call ioa_$rsnnl ("&^a(^d)", literal_string, length (literal_string),
		     LITERAL (type), count);

		call output ((literal_string));

		type = type2;
		count = 1;
		if i >= length (P_str) then return;
	     end;
	end;

	go to ADD_LITERAL;

end convert_white;
%page;
clean_up: proc;

	if target_ptr ^= null & target_ptr ^= ptr1 then do;
	     call delete_$ptr (target_ptr, "000100"b, ME, 0);
	     target_ptr = null;
	end;
	if replacing_orig_sw then
	     if safe_copy_ptr = null then
		call com_err_ (safe_copy_code, ME, "Unable to get temp seg; can't restore original.");
	     else ptr1 -> seg1 = safe_copy_ptr -> seg1;
	call finish_up ();

end clean_up;


finish_up: proc;

	if ptr1 ^= null then call hcs_$terminate_noname (ptr1, 0);
	if ptr2 ^= null then call release_temp_segment_ (ME, ptr2, 0);
	if safe_copy_ptr ^= null then call release_temp_segment_ (ME, safe_copy_ptr, 0);
	if target_ptr ^= null then call hcs_$terminate_noname (target_ptr, 0);
	ptr1, ptr2, safe_copy_ptr, target_ptr = null;
	replacing_orig_sw = "0"b;

end finish_up;


output: proc (P_str);

dcl P_str char (*);
dcl i fixed;

	if check_sw then return;
	i = length (P_str);
	len2 = len2 + i;
	substr (seg2, len2 - i + 1) = P_str;

end output;


warn: proc (P_severity, P_str);

dcl P_severity fixed;
dcl P_str char (*);

	if P_severity >= 2 then errors_sw = "1"b;
	if P_severity < severity then return;
	call ioa_$ioa_switch (iox_$error_output, "(sv ^d) Line ^d: ^a", P_severity, line_number, P_str);

end warn;

end convert_one;
%page;
known: proc (P_keyword) returns (bit (1));

dcl P_keyword char (*) varying;
dcl i fixed;

	i = index (KEYWORDS_STRING, P_keyword || " ");

	return (i > 0);

end known;

end convert_ec;
