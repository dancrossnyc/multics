/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(91-10-25,Schroth), approve(91-11-28,MECR0015),
     audit(91-11-25,WAAnderson), install(91-11-28,MR12.5-1001):
     Correct MR12.4 source code corruption.
  2) change(92-05-14,Schroth), approve(91-11-25,MCR8251),
     audit(92-09-22,WAAnderson), install(92-09-24,MR12.5-1016):
     Replace MECR0015: Correct MR12.4 source code corruption.
                                                   END HISTORY COMMENTS */



value_delete: vdl: proc;

/* Written 11/18/80 by S. Herbst */
/* Added -all, -brief, -data, -long 04/04/83 S. Herbst */
/* Fixed to reject name arg along with -match or -exclude 05/08/84 S. Herbst */

%include value_structures;

dcl ME char (32) int static options (constant) init ("value_delete");
dcl (REGULAR init ("0"b), DATA init ("1"b)) bit (1) int static options (constant);

dcl arg char (arg_len) based (arg_ptr);
dcl name char (name_len) based (name_ptr);

dcl based_area area based (area_ptr);

dcl (seg_dn, seg_path) char (168);
dcl seg_en char (32);

dcl call_switches bit (36) aligned;
dcl (all_sw, brief_sw, data_only_sw, got_name_sw, match_sw, match_arg_sw, path_sw, some_matches) bit (1);
dcl (name_ctl_arg_sw, name_nonctl_arg_sw) bit (1);
dcl (found_data, found_regular) bit (1);

dcl (area_ptr, arg_ptr, name_ptr, seg_ptr) ptr;

dcl (arg_len, name_len) fixed (21);
dcl (arg_count, i, name_index) fixed;
dcl (code, code1) fixed (35);

dcl error_table_$badopt fixed (35) ext;
dcl error_table_$nomatch fixed (35) ext;
dcl error_table_$not_act_fnc fixed (35) ext;
dcl error_table_$oldnamerr fixed (35) ext;


dcl active_fnc_err_ entry options (variable);
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl cu_$af_return_arg entry (fixed, ptr, fixed (21), fixed (35));
dcl cu_$arg_ptr entry (fixed, ptr, fixed (21), fixed (35));
dcl expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed (35));
dcl get_system_free_area_ entry returns (ptr);
dcl hcs_$initiate entry (char (*), char (*), char (*), fixed (1), fixed (2), ptr, fixed (35));
dcl value_$delete entry (ptr, bit (36) aligned, char (*), fixed (35));
dcl value_$delete_data entry (ptr, bit (36) aligned, char (*), fixed (35));
dcl value_$get_path entry (char (*), fixed (35));
dcl value_$list entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed (35));
dcl value_$list_data_names entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed (35));

dcl (index, max, null, rtrim, substr, unspec) builtin;
%page;
	call cu_$af_return_arg (arg_count, null, 0, code);
	if code ^= error_table_$not_act_fnc then do;
	     call active_fnc_err_ (0, ME, "Cannot be called as an active function.");
	     return;
	end;

	all_sw, brief_sw, data_only_sw, got_name_sw, match_sw, match_arg_sw, path_sw = "0"b;
	name_ctl_arg_sw, name_nonctl_arg_sw = "0"b;
	call_switches = "0"b;
	alloc_name_count, alloc_max_name_len = 0;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if index (arg, "-") = 1 then

		if arg = "-all" | arg = "-a" then do;
		     all_sw = "1"b;
		     data_only_sw = "0"b;
		end;

		else if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;

		else if arg = "-data" then do;
		     data_only_sw = "1"b;
		     all_sw = "0"b;
		end;

		else if arg = "-exclude" | arg = "-ex" | arg = "-match" then do;
		     name_ctl_arg_sw = "1"b;
		     if arg = "-match" then match_arg_sw = "1"b;
		     i = i + 1;
		     if i > arg_count then do;
NO_CONTROL_VALUE:		call com_err_ (0, ME, "No value specified for ^a", arg);
			return;
		     end;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     got_name_sw, match_sw = "1"b;
		     alloc_name_count = alloc_name_count + 1;
		     alloc_max_name_len = max (alloc_max_name_len, arg_len);
		end;

		else if arg = "-long" | arg = "-lg" then brief_sw = "0"b;

		else if arg = "-name" | arg = "-nm" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_CONTROL_VALUE;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     got_name_sw, name_nonctl_arg_sw = "1"b;
		     name_ptr = arg_ptr;
		     name_len = arg_len;
		end;

		else if arg = "-pathname" | arg = "-pn" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_CONTROL_VALUE;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     call expand_pathname_$add_suffix (arg, "value", seg_dn, seg_en, code);
		     if code ^= 0 then do;
			call com_err_ (code, ME, "^a", arg);
			return;
		     end;
		     path_sw = "1"b;
		end;

		else if arg = "-permanent" | arg = "-perm" then substr (call_switches, 2, 1) = "1"b;

		else if arg = "-perprocess" | arg = "-pp" then substr (call_switches, 1, 1) = "1"b;

		else do;
		     call com_err_ (error_table_$badopt, ME, "^a", arg);
		     return;
		end;

	     else if got_name_sw then do;
USAGE:		call com_err_$suppress_name (0, ME, "Usage:  value_delete {name} {-control_args}");
		return;
	     end;

	     else do;
		got_name_sw, name_nonctl_arg_sw = "1"b;
		name_ptr = arg_ptr;
		name_len = arg_len;
	     end;
	end;

	if ^got_name_sw then go to USAGE;

	if name_ctl_arg_sw & name_nonctl_arg_sw then do;
	     call com_err_ (0, ME, "Name argument is incompatible with -match and -exclude.");
	     return;
	end;

	if substr (call_switches, 1, 2) = "00"b then substr (call_switches, 1, 2) = "11"b;  /* default is both */

	if path_sw then do;
	     call hcs_$initiate (seg_dn, seg_en, "", 0, 0, seg_ptr, code);
	     if seg_ptr = null then do;
		call com_err_ (code, ME, "Value segment ^a^[>^]^a", seg_dn, seg_dn ^= ">", seg_en);
		return;
	     end;
	end;
	else seg_ptr = null;

/* Do the work */

	if ^match_sw then do;

	     if ^data_only_sw then call delete_one (name, REGULAR, found_regular);
	     else found_regular = "0"b;

	     if all_sw | data_only_sw then call delete_one (name, DATA, found_data);
	     else found_data = "0"b;

	     if ^found_regular & ^found_data then call com_err_ (error_table_$oldnamerr, ME, "^a", name);
	end;

	else do;					/* -match or -exclude specified */

						/* if only -exclude's specified, start by matching "**" */
	     if ^match_arg_sw then alloc_name_count = alloc_name_count + 1;

/* Allocate and fill the match structure */

	     area_ptr = get_system_free_area_ ();

	     allocate match_info in (based_area) set (match_info_ptr);

	     unspec (match_info) = "0"b;
	     match_info.version = match_info_version_1;
	     match_info.name_count = alloc_name_count;
	     match_info.max_name_len = alloc_max_name_len;
	     name_index = 0;

	     if ^match_arg_sw then do;
		name_index = 1;
		match_info.exclude_sw (1), match_info.regexp_sw (1) = "0"b;
		match_info.name (1) = "**";
	     end;

	     do i = 1 to arg_count;

		call cu_$arg_ptr (i, arg_ptr, arg_len, code);

		if arg = "-exclude" | arg = "-ex" then do;
		     name_index = name_index + 1;
		     match_info.exclude_sw (name_index) = "1"b;
MATCH_NAME:	     i = i + 1;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if substr (arg, 1, 1) = "/" & substr (arg, arg_len, 1) = "/" then do;
			match_info.regexp_sw (name_index) = "1"b;
			match_info.name (name_index) = substr (arg, 2, arg_len - 2);
		     end;
		     else do;
			match_info.regexp_sw (name_index) = "0"b;  /* starname */
			match_info.name (name_index) = arg;
		     end;
		end;

		else if arg = "-match" then do;
		     name_index = name_index + 1;
		     match_info.exclude_sw (name_index) = "0"b;
		     go to MATCH_NAME;
		end;
	     end;

	     some_matches = "0"b;

	     if data_only_sw then go to DELETE_DATA;

	     call value_$list (seg_ptr, call_switches, match_info_ptr, area_ptr, value_list_info_ptr, code);
	     if code ^= 0 then do;
		if code ^= error_table_$nomatch then do;
LIST_ERROR:	     if seg_ptr = null then call value_$get_path (seg_path, (0));
		     else if seg_dn = ">" then seg_path = ">" || seg_en;
		     else seg_path = rtrim (seg_dn) || ">" || seg_en;
		     call com_err_ (code, ME, "^a", seg_path);
		     return;
		end;
	     end;

	     else do;
		some_matches = "1"b;

		do i = 1 to value_list_info.pair_count;

		     call delete_one (substr (value_list_info.chars,
			value_list_info.name_index (i), value_list_info.name_len (i)), REGULAR, "0"b);
		end;
	     end;
DELETE_DATA:
	     if all_sw | data_only_sw then do;

		call value_$list_data_names (seg_ptr, call_switches, match_info_ptr, area_ptr, value_list_info_ptr, code);
		if code ^= 0 then do;
		     if code ^= error_table_$nomatch then go to LIST_ERROR;
		end;

		else do;
		     some_matches = "1"b;

		     do i = 1 to value_list_info.pair_count;

			call delete_one (substr (value_list_info.chars,
			     value_list_info.name_index (i), value_list_info.name_len (i)), DATA, "0"b);
		     end;
		end;
	     end;

	     if ^some_matches & ^brief_sw then call com_err_ (0, ME, "No matching names.");
	end;

RETURN: return;

%page;
delete_one: proc (P_name, P_data_sw, P_found_sw);

dcl P_name char (*);
dcl (P_data_sw, P_found_sw) bit (1);

	if P_data_sw then call value_$delete_data (seg_ptr, call_switches, P_name, code);
	else call value_$delete (seg_ptr, call_switches, P_name, code);

	if code = 0 then P_found_sw = "1"b;
	else if code = error_table_$oldnamerr then P_found_sw = "0"b;
	else do;					/* a problem with the value seg */
	     if seg_ptr = null then do;
		call value_$get_path (seg_path, code1);
		if code1 ^= 0 then seg_path = "";
		call com_err_ (code, ME, "Default value segment ^a", seg_path);
	     end;
	     else call com_err_ (code, ME, "Value segment ^a^[>^]^a", seg_dn, seg_dn ^= ">", seg_en);
	     go to RETURN;
	end;

end delete_one;

end value_delete;
