/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


value_set: vs: proc;

/* Written 11/17/80 by S. Herbst */
/* Fixed vs -add to correctly return the value set 05/13/82 S. Herbst */
/* Fixed vs -pn not to query if error other than $noentry 02/07/84 S. Herbst */

%include value_structures;
%include query_info;

dcl ME char (32) int static options (constant) init ("value_set");
dcl PERMANENT fixed int static options (constant) init (0);

dcl arg char (arg_len) based (arg_ptr);
dcl return_arg char (return_len) varying based (return_ptr);
dcl temp_str char (262114 /* max segment length */) varying based (temp_ptr);

dcl if_value char (if_value_len) based (if_value_ptr);
dcl name char (name_len) based (name_ptr);
dcl value char (value_len) based (value_ptr);

dcl based_area area based (area_ptr);

dcl (seg_dn, seg_path) char (168);
dcl (old_value_num_str, seg_en, value_num_str) char (32);

dcl call_switches bit (36) aligned;
dcl (add_sw, af_sw, explicit_value_sw, got_name_sw, got_value_sw) bit (1);
dcl (if_sw, match_sw, match_arg_sw, path_sw, pop_sw, push_sw, update_sw) bit (1);

dcl temp_ptr ptr;
dcl (area_ptr, arg_ptr, if_value_ptr, name_ptr, return_ptr, seg_ptr, value_ptr) ptr;

dcl add_num fixed (35);
dcl (arg_len, if_value_len, name_len, return_len, value_len) fixed (21);
dcl (arg_count, i, name_index) fixed;
dcl code fixed (35);

dcl error_table_$badopt fixed (35) ext;
dcl error_table_$bad_conversion fixed (35) ext;
dcl error_table_$noentry fixed (35) ext;
dcl error_table_$nomatch fixed (35) ext;
dcl error_table_$not_act_fnc fixed (35) ext;

dcl complain entry variable options (variable);

dcl (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl command_query_ entry options (variable);
dcl cu_$af_return_arg entry (fixed, ptr, fixed (21), fixed (35));
dcl cu_$arg_ptr entry (fixed, ptr, fixed (21), fixed (35));
dcl cv_dec_check_ entry (char (*), fixed (35)) returns (fixed (21));
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed (35));
dcl expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed (35));
dcl get_system_free_area_ entry returns (ptr);
dcl get_temp_segment_ entry (char (*), ptr, fixed (35));
dcl hcs_$initiate entry (char (*), char (*), char (*), fixed (1), fixed (2), ptr, fixed (35));
dcl hcs_$make_seg entry (char (*), char (*), char (*), fixed (5), ptr, fixed (35));
dcl hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl ioa_$rsnnl entry options (variable);
dcl release_temp_segment_ entry (char (*), ptr, fixed (35));
dcl value_$get entry options (variable);
dcl value_$get_path entry (char (*), fixed (35));
dcl value_$init_seg entry (ptr, fixed, ptr, fixed (19), fixed (35));
dcl value_$list entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed (35));
dcl value_$pop entry options (variable);
dcl value_$push entry options (variable);
dcl value_$set entry options (variable);
dcl value_$test_and_set entry options (variable);

dcl (addr, index, length, ltrim, max, null, rtrim, substr, unspec) builtin;

dcl cleanup condition;
%page;
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = 0 then do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	end;
	else if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     complain = com_err_;
	     code = 0;
	end;
	else do;
	     call com_err_ (code, ME);
	     return;
	end;

	add_sw, explicit_value_sw, got_name_sw, got_value_sw, if_sw, match_sw, match_arg_sw, path_sw, update_sw = "0"b;
	pop_sw, push_sw = "0"b;
	call_switches = "0"b;
	alloc_name_count, alloc_max_name_len = 0;

	do i = 1 to arg_count;			/* if -match etc. given, don't look for name arg */
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if arg = "-match" | arg = "-exclude" | arg = "-ex" then got_name_sw = "1"b;
	end;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if index (arg, "-") = 1 then
		if arg = "-add" then do;
		     i = i + 1;
		     if i > arg_count then do;
NO_CONTROL_VALUE:
			call complain (0, ME, "No value specified for ^a", arg);
			return;
		     end;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     add_num = cv_dec_check_ (arg, code);
		     if code ^= 0 then do;
			call complain (code, ME, "^a", arg);
			return;
		     end;
		     add_sw, got_value_sw = "1"b;
		     value_ptr = arg_ptr;
		     value_len = arg_len;
		end;

		else if arg = "-exclude" | arg = "-ex" | arg = "-match" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_CONTROL_VALUE;
		     match_sw = "1"b;
		     match_arg_sw = (arg = "-match");
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     alloc_name_count = alloc_name_count + 1;
		     alloc_max_name_len = max (alloc_max_name_len, arg_len);
		end;

		else if arg = "-if" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_CONTROL_VALUE;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if_sw = "1"b;
		     if_value_ptr = arg_ptr;
		     if_value_len = arg_len;
		end;

		else if arg = "-name" | arg = "-nm" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_CONTROL_VALUE;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if got_value_sw & got_name_sw then go to USAGE;
		     else if got_name_sw then do;
			explicit_value_sw, got_value_sw = "1"b;
			value_ptr = arg_ptr;
			value_len = arg_len;
		     end;
		     else do;
			got_name_sw = "1"b;
			name_ptr = arg_ptr;
			name_len = arg_len;
		     end;
		end;

		else if arg = "-pathname" | arg = "-pn" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_CONTROL_VALUE;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     call expand_pathname_$add_suffix (arg, "value", seg_dn, seg_en, code);
		     if code ^= 0 then do;
			call complain (code, ME, "-pathname arg ^a", arg);
			return;
		     end;
		     path_sw = "1"b;
		end;

		else if arg = "-perprocess" | arg = "-pp" then substr (call_switches, 1, 1) = "1"b;

		else if arg = "-permanent" | arg = "-perm" then substr (call_switches, 2, 1) = "1"b;

		else if arg = "-pop" then pop_sw = "1"b;
		else if arg = "-push" then push_sw = "1"b;

		else if arg = "-update" | arg = "-ud" then update_sw = "1"b;
		else if arg = "-no_update" | arg = "-nud" then update_sw = "0"b;

		else if arg = "-value" | arg = "-val" then do;
		     i = i + 1;
		     if i > arg_count then go to NO_CONTROL_VALUE;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     explicit_value_sw, got_value_sw = "1"b;
		     value_ptr = arg_ptr;
		     value_len = arg_len;
		end;

		else do;
		     call complain (error_table_$badopt, ME, "^a", arg);
		     return;
		end;

	     else if got_value_sw & got_name_sw then do;
USAGE:
		if af_sw then
		     call active_fnc_err_$suppress_name (0, ME, "Usage:  [value_set {name} {value} {-control_args}]");
		else call com_err_$suppress_name (0, ME, "Usage:  value_set {name} {value} {-control_args}");
		return;
	     end;

	     else if got_name_sw then do;
		explicit_value_sw, got_value_sw = "1"b;
		value_ptr = arg_ptr;
		value_len = arg_len;
	     end;

	     else do;
		got_name_sw = "1"b;
		name_ptr = arg_ptr;
		name_len = arg_len;
	     end;
	end;

	if ^got_name_sw then go to USAGE;

	if pop_sw & got_value_sw then do;
	     call complain (0, ME, "-pop is incompatible with specifying a value.");
	     return;
	end;
	else if pop_sw then do;			/* set up a dummy for calling value_set_push_pop */
	     value_ptr = name_ptr;
	     value_len = name_len;
	end;
	else if ^got_value_sw then go to USAGE;

	if if_sw & (pop_sw | push_sw) then do;
	     call complain (0, ME, "-if is incompatible with -push or -pop");
	     return;
	end;

	if pop_sw & push_sw then do;
	     call complain (0, ME, "-push is incompatible with -pop");
	     return;
	end;

	if add_sw & explicit_value_sw then do;
	     call complain (0, ME, "-add incompatible with specifying a value.");
	     return;
	end;

	if substr (call_switches, 1, 2) = "00"b then substr (call_switches, 1, 2) = "11"b;
						/* default is both */

	match_info_ptr, seg_ptr, temp_ptr, value_list_info_ptr = null ();

	on cleanup
	     begin;
		if temp_ptr ^= null () then call release_temp_segment_ ("value_set", temp_ptr, code);
		if match_info_ptr ^= null () then free match_info in (based_area);
		if value_list_info_ptr ^= null () then free value_list_info in (based_area);
		if seg_ptr ^= null () then call hcs_$terminate_noname (seg_ptr, 0);
	     end;

	if path_sw then do;				/* user_specified value segment */
	     call hcs_$initiate (seg_dn, seg_en, "", 0, 0, seg_ptr, code);
	     if seg_ptr = null then do;
		if code = error_table_$noentry then do;
		     if query_create (seg_dn, seg_en, seg_ptr) then go to SEG_OK;
		end;
		else call complain (code, ME, "Value segment ^a^[>^]^a", seg_dn, seg_dn ^= ">", seg_en);
		return;
	     end;
	end;

	if af_sw & match_sw then do;			/* more than one return value to concatenate */
	     call get_temp_segment_ ("value_set", temp_ptr, code);
	end;

/* Do the work */

SEG_OK:
	if ^match_sw then
	     call set_value (name, "");

	else do;					/* -match or -exclude specified */

/* if only -exclude's specified, start by matching "**" */
	     if ^match_arg_sw then alloc_name_count = alloc_name_count + 1;

/* Allocate and fill the match structure */

	     area_ptr = get_system_free_area_ ();

	     allocate match_info in (based_area) set (match_info_ptr);

	     unspec (match_info) = "0"b;
	     match_info.version = match_info_version_1;
	     match_info.name_count = alloc_name_count;
	     match_info.max_name_len = alloc_max_name_len;
	     name_index = 0;

	     if ^match_arg_sw then do;
		name_index = 1;
		match_info.exclude_sw (1), match_info.regexp_sw (1) = "0"b;
		match_info.name (1) = "**";
	     end;

	     do i = 1 to arg_count;

		call cu_$arg_ptr (i, arg_ptr, arg_len, code);

		if arg = "-exclude" | arg = "-ex" then do;
		     name_index = name_index + 1;
		     match_info.exclude_sw (name_index) = "1"b;
MATCH_NAME:
		     i = i + 1;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if substr (arg, 1, 1) = "/" & substr (arg, arg_len, 1) = "/" then do;
			match_info.regexp_sw (name_index) = "1"b;
			match_info.name (name_index) = substr (arg, 2, arg_len - 2);
		     end;
		     else do;
			match_info.regexp_sw (name_index) = "0"b;
						/* starname */
			match_info.name (name_index) = arg;
		     end;
		end;

		else if arg = "-match" then do;
		     name_index = name_index + 1;
		     match_info.exclude_sw (name_index) = "0"b;
		     go to MATCH_NAME;
		end;
	     end;

	     call value_$list (seg_ptr, call_switches, match_info_ptr, area_ptr, value_list_info_ptr, code);
	     if code ^= 0 then do;
		if code = error_table_$nomatch then
		     call complain (0, ME, "No matching names.");
		else do;
		     if seg_ptr = null then call value_$get_path (seg_path, (0));
		     else if seg_dn = ">" then seg_path = ">" || seg_en;
		     else seg_path = rtrim (seg_dn) || ">" || seg_en;
		     call complain (code, ME, "^a", seg_path);
		end;
		return;
	     end;

	     do i = 1 to value_list_info.pair_count;

		call set_value (
		     substr (value_list_info.chars, value_list_info.name_index (i), value_list_info.name_len (i)),
		     substr (value_list_info.chars, value_list_info.value_index (i), value_list_info.value_len (i)));
	     end;
	end;

RETURN:
	if temp_ptr ^= null () then call release_temp_segment_ ("value_set", temp_ptr, code);
	if match_info_ptr ^= null () then free match_info in (based_area);
	if value_list_info_ptr ^= null () then free value_list_info in (based_area);
	if seg_ptr ^= null () then call hcs_$terminate_noname (seg_ptr, 0);
%page;
query_create:
     proc (A_dn, A_en, A_seg_ptr) returns (bit (1));

dcl (A_dn, A_en) char (*);
dcl A_seg_ptr ptr;
dcl 1 qi aligned like query_info;
dcl answer char (32) varying;
dcl code fixed (35);

	unspec (qi) = "0"b;
	qi.version = query_info_version_5;
	qi.yes_or_no_sw = "1"b;
	qi.question_iocbp, qi.answer_iocbp = null;

	call command_query_ (addr (qi), answer, ME, "Do you want to create the value segment ^a^[>^]^a ?", A_dn,
	     A_dn ^= ">", A_en);

	if answer = "no" then go to RETURN;

	call hcs_$make_seg (A_dn, A_en, "", 01010b, A_seg_ptr, code);
	if code ^= 0 then do;
ERR:
	     call complain (code, ME, "^a^[>^]^a", A_dn, A_dn ^= ">", A_en);
	     go to RETURN;
	end;

	call value_$init_seg (A_seg_ptr, PERMANENT, null, 0, code);
	if code ^= 0 then go to ERR;

	return ("1"b);

     end query_create;
%page;
set_value:
     proc (P_name, P_old_value);

/* Sets a single value, modified by the control argument options. */

dcl (P_name, P_old_value) char (*);
dcl old_value_num fixed (35);

RETRY:
	if add_sw then do;
	     if match_sw then
		old_value_num_str = P_old_value;
	     else do;
		call value_$get (seg_ptr, call_switches, name, old_value_num_str, code);
		if code ^= 0 then do;
BAD_OLD:
		     call complain (code, ME, "^a", P_name);
		     return;
		end;
	     end;

	     if update_sw & af_sw then return_arg = rtrim (old_value_num_str);

	     old_value_num = cv_dec_check_ (old_value_num_str, code);
	     if code ^= 0 then do;
		code = error_table_$bad_conversion;
		go to BAD_OLD;
	     end;
	     call ioa_$rsnnl ("^d", value_num_str, length (value_num_str), old_value_num + add_num);
	     call value_$test_and_set (seg_ptr, call_switches, name, rtrim (value_num_str), rtrim (old_value_num_str),
		code);
	     value_ptr = addr (value_num_str);
	     value_len = length (rtrim (value_num_str));
	     go to TEST_CODE;
	end;

	if if_sw then
	     if match_sw then do;
		if if_value ^= P_old_value then return;
	     end;
	     else do;
		call value_$test_and_set (seg_ptr, call_switches, name, value, if_value, code);
		go to TEST_CODE;
	     end;

	if update_sw & af_sw then
	     if match_sw then do;
		call value_set_push_pop (seg_ptr, call_switches, P_name, value, temp_str, code);
		return_arg = ltrim (return_arg || " " || temp_str);
	     end;
	     else call value_set_push_pop (seg_ptr, call_switches, P_name, value, return_arg, code);

	else call value_set_push_pop (seg_ptr, call_switches, P_name, value, "", code);
TEST_CODE:
	if code ^= 0 then do;
	     if ^path_sw then do;
		call value_$get_path (seg_path, (0));
		call expand_pathname_ (seg_path, seg_dn, seg_en, (0));
	     end;
	     if code = error_table_$noentry then do;

		if query_create (seg_dn, seg_en, seg_ptr) then go to RETRY;
	     end;
	     else call complain (code, ME, "^a^[>^]^a", seg_dn, seg_dn ^= ">", seg_en);
	     return;
	end;

	if af_sw & ^update_sw then
	     if match_sw then
		return_arg = ltrim (return_arg || " " || value);
	     else return_arg = value;

	return;
%page;
value_set_push_pop:
	proc (P_seg_ptr, P_switches, P_name, P_value, P_old_value, P_code);

dcl P_seg_ptr ptr;
dcl P_switches bit (36) aligned;
dcl (P_name, P_value) char (*);
dcl P_old_value char (*) varying;
dcl P_code fixed (35);

	     if pop_sw then call value_$pop (P_seg_ptr, P_switches, P_name, P_old_value, P_code);

	     else if push_sw then call value_$push (P_seg_ptr, P_switches, P_name, P_value, P_old_value, P_code);

	     else call value_$set (P_seg_ptr, P_switches, P_name, P_value, P_old_value, P_code);

	end value_set_push_pop;

     end set_value;

end value_set;
