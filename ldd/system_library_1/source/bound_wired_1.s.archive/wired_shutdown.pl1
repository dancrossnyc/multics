/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


wired_shutdown$wired_emergency: procedure;

/* Created by Bernard Greenberg, 03/29/76, when he removed
   wired_shutdown from wired_shutdown and unwired it. What is left
   is a pl1-coded transitional interface between
   ESD and shutdown */

/*  Modified 06/07/76 by Greenberg for vtoc_man$stabilize */
/*  Modified 03/14/77 by Greenberg for ESD with drive down */
/*  Modified 02/28/82 by J. Bongiovanni to eliminate use of FSDCT, reset PVT entries */
/*  Modified March 1982 by J. Bongiovanni to call shutdown_file_system */
/*  Modified August 1982 by J. Bongiovanni to reset scavenge */
/*  Modified 830620 for new ocdcm_$drain_io call... -E. A. Ranzenbach */
/*  Modified 8/83 for pmut$bce - K. Loepere */
/*  Modified  84-01-17 BIM for get_pvtx$reset. */

dcl  pc$flush entry;
dcl  page$reset_pvte entry (ptr);
dcl  pmut$bce entry;
dcl  ocdcm_$drain_io entry ();
dcl  syserr entry options (variable);
dcl  vtoc_man$stabilize entry;
dcl  get_pvtx$reset entry;
dcl  pmut$set_mask entry (fixed bin (71), fixed bin (71));
dcl  fsout_vol entry (fixed bin, fixed bin);
dcl  shutdown_file_system entry;
dcl  control char (8) static internal init ("tooearly");


dcl  scs$open_level fixed bin (71) ext;

dcl  pvt$shutdown_state fixed bin external,
     pvt$esd_state fixed bin external,
     pvt$n_entries fixed bin external,
     sst$root_pvtx fixed bin external;
			  

dcl  save_mask fixed bin (71);
dcl  condition_ entry (char (*), entry);
dcl  pvtx fixed bin;

/* This portion of emergency shutdown gets entered on the
   shutdown_stack after preliminary resetting has been
   accomplished.					 */

	call condition_ ("any_other", handler);
	call pmut$set_mask (scs$open_level, save_mask);	/* Open mask to allow I/O interrupts. */

	if control = "tooearly" | sst$root_pvtx = 0 then do;
	     call syserr (0, "esd before fs enabled");
shut:	     call syserr (0, "shutdown complete");
	     call ocdcm_$drain_io;					/* quies the console...		*/
	     do while ("1"b);
		call pmut$bce;
	     end;
	end;

	pvt_arrayp = addr (pvt$array);

	if ^pvt_array (sst$root_pvtx).used then do;
	     call syserr (0, "system already shut down");
	     go to shut;
	end;

	vtoc_buffer_segp = addr (vtoc_buffer_seg$);	/* Mark trouble pv, perhaps */
	if vtoc_buffer.unsafe_pvtx > 0 then do;
	     pvt_array (vtoc_buffer.unsafe_pvtx).vol_trouble_count = pvt_array (vtoc_buffer.unsafe_pvtx).vol_trouble_count + 1;
	     vtoc_buffer.unsafe_pvtx = 0;
	end;

	do pvtx = 1 to pvt$n_entries;
	     pvtep = addr (pvt_array (pvtx));
	     if pvte.used
		then do;
		pvte.scav_check_address = "0"b;
		pvte.scavenger_block_rel = ""b;
		call page$reset_pvte (pvtep);
	     end;
	end;

	call get_pvtx$reset; /* mark trouble for all held pvte's 
			    and release all held pvtes. */

	call syserr (0, "begin emergency shutdown part 1.");


	pvt$shutdown_state = 1;			/* Indicate that esd part 1 started */
	pvt$esd_state = 1;				/* System in ESD */
	call fsout_vol (sst$root_pvtx, 0);		/* Get this fact out */

	call pc$flush;				/* Flush out all pages in core. */
	pvt$shutdown_state = 2;			/* Indicate that emergency shutdown part 1 is successful. */
	pvt$esd_state = 2;
	call fsout_vol (sst$root_pvtx, 0);

	call syserr (0, "emergency shutdown part 1 complete.");

	call vtoc_man$stabilize;			/* Get VTOC buffers in shape */
	call shutdown_file_system;			/* Try to complete a normal shutdown now. */
	return;					/* Should never happen */

enable:	entry;
	control = "enabled";
	return;

handler:	proc (mcptr, condname, coptr, infoptr, cont);

dcl (mcptr, coptr, infoptr) ptr;
dcl  condname char (*);
dcl  cont bit (1);

	     call syserr (1, "wired_shutdown: ^a fault during emergency shutdown", condname);

	end handler;

	 %include pvte;
	 %include vtoc_buffer;



/* BEGIN MESSAGE DOCUMENTATION

   Message:
   esd before fs enabled

   S: $info

   T: Emergency shutdown

   M: The system crashed before the storage system was accessed by
   Multics. An ESD was attempted, but no ESD is necessary.
   The "shutdown complete" message will always follow.

   A: Reboot the system.

   Message:
   shutdown complete

   S: $info

   T: Emergency shutdown

   M: Emergency shutdown is complete; this message was
   preceded by either "esd before fs enabled" or
   "system already shut down":
   no ESD was necessary.

   A: Reboot the system.

   Message:
   system already shut down

   S: $info

   T: Emergency shutdown

   M: An attempt to perform emergency shutdown was made after
   a previous attempt, or normal shutdown, succeeded. No ESD
   is necessary in this case. The "shutdown complete" message
   follows.

   A: $ignore

   Message:
   begin emergency shutdown part 1

   S: $info

   T: Emergency shutdown

   M: The system emergency shutdown environment has been
   successfully established. An attempt will be made to write
   out all of memory and flush the paging device.

   A: $ignore

   Message:
   emergency shutdown part 1 complete

   S: $info

   T: Emergency shutdown

   M: All of memory has been written out once, and those
   pages on the paging device which could be written out to
   operative drives flushed. All segments and directories will
   now be deactivated, and all drives shut down.

   A: $ignore

   Message:
   wired_shutdown: FFF fault during emergency shutdown

   S: $crash

   T: Emergency shutdown

   M: An unexpected fault has occured during emergency
   shutdown.  Emergency shutdown
   cannot complete.

   A: Get a dump for system programmers. If an disk dump was taken
   of the preceding crash, get a dump to paper via the bce dump facility.
   Re-attempt ESD as many times as necessary.

   END MESSAGE DOCUMENTATION */


     end;
