/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-06-25,Rauschelbach), approve(87-06-29,MCR7736),
     audit(87-07-21,Farley), install(87-08-06,MR12.1-1063):
     System error message documentation was added.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_cancel_id_:
     proc (a_reservation_id, a_group_id, a_code);

/*
   *       This subroutine will implement the privileged reservation cancelling
   *  function needed by the operator and initializer process.  It uses
   *  the reservation_id to cancel the reservations of all the resources
   *  associated with that id.  The group_id is used to help guarantee
   *  that the reservation_id was correctly entered, it must match the
   *  reserved_for field of the reservation.
   *       This subroutine will be used by the absentee manager when
   *  terminating a process for which a reservation was made; and also
   *  by the operator, if some terrible calamity befalls the initializer
   *  process, to clean up leftover reservations.
*/

/*
   Written by R.J.C. Kissel 5/78.
   Modified by R.J.C. Kissel 1/79 to handle rcp_ gate calls and ambiguous request ids.
   Modified by Chris Jones 1/85 to stop using magic numbers.
*/

/* Arguments */

dcl  a_reservation_id fixed bin (71);
dcl  a_group_id char (*);
dcl  a_code fixed bin (35);

/* Local Variables */

dcl  string bit (1);
dcl  system bit (1);

dcl  rstr_id char (19);
dcl  prc_id bit (36);
dcl  res_id fixed bin (71);
dcl  log_res_id char (19);
dcl  grp_id char (32) aligned;
dcl  code fixed bin (35);
dcl  i fixed bin;					/* Index in rcpd. */
dcl  any_found bit (1);

dcl  caller_level fixed bin;

/* Local Constants */

/* Local Overlays */

/* External Entries */

dcl  cu_$level_get entry (fixed bin);
dcl  cu_$level_set entry (fixed bin);
dcl  get_ring_ entry returns (fixed bin);
dcl  rcp_cancel_resource_
     entry (char (*), char (*), fixed bin (35));
dcl  rcp_pointers_$data entry returns (ptr);
dcl  rcp_pointers_$com_seg
     entry returns (ptr);
dcl  rcp_lock_$lock entry (ptr, fixed bin (35));
dcl  rcp_lock_$unlock entry (ptr);
dcl  rcp_match_user_name_
     entry (char (32) aligned, char (32) aligned) returns (bit (1));
dcl  request_id_ entry (fixed bin (71)) returns (char (19));
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  admin_gate_$syserr entry options (variable);
dcl  get_process_id_ entry () returns (bit (36));
dcl  match_request_id_ entry (fixed bin (71), char (*)) returns (bit (1) aligned);

/* External Constants */

dcl  error_table_$noentry
     fixed bin (35) external;
dcl  error_table_$badcall
     fixed bin (35) external;
dcl  error_table_$request_id_ambiguous
     fixed bin (35) external;
dcl  error_table_$invalid_resource_state
     fixed bin (35) external;

/* Builtin Functions and Conditions */

dcl (addr, clock, rel, unspec)
     builtin;
dcl (cleanup) condition;

	string = "0"b;
	system = "0"b;
	goto START;
	
string:
	entry (a_res_id, a_code);

dcl  a_res_id char (*);

	string = "1"b;
	system = "0"b;
	goto START;
	
sys:
	entry (a_reservation_id, a_group_id, a_code);

	string = "0"b;
	system = "1"b;
	goto START;
	
sys_string:
	entry (a_res_id, a_group_id, a_code);

	string = "1"b;
	system = "1"b;
	goto START;

START:
	if string
	then rstr_id = a_res_id;
	else res_id = a_reservation_id;

	if system
	then grp_id = a_group_id;
	else prc_id = get_process_id_ ();

	call cu_$level_get (caller_level);

	on cleanup
	     call cleanup_handler;

	call cu_$level_set (get_ring_ ());

	rcpd_ptr = rcp_pointers_$data ();
	rcs_ptr = rcp_pointers_$com_seg ();

	call rcp_lock_$lock (addr (rcpd.lock_info), code);

	if code ^= 0
	then goto BAD_ERROR;

/*
   *       Loop through the rcp data base looking for the reservation
   *  id.  Then cancel the reservation.
*/

	any_found = "0"b;

	if string
	then do;					/* Check for ambiguous res id, and state not reserved. */
	     res_id = 0b;

	     do i = 1 to rcpd.tot_devices;
		if match_request_id_ (rcpd.device (i).reservation_id, rstr_id)
		then do;				/* Only check ones that match. */
		     any_found = "1"b;

		     if rcpd.device (i).state ^= RESERVED
						/* Not reserved. */
		     then code = error_table_$invalid_resource_state;

		     if res_id = 0b
		     then res_id = rcpd.device (i).reservation_id;

		     else if res_id ^= rcpd.device (i).reservation_id
		     then goto BAD_RID;

		     else ;
		end;				/* Only check ones that match. */
	     end;

	     do i = 1 to rcpd.last_volume;
		if match_request_id_ (rcpd.volume (i).reservation_id, rstr_id)
		then do;				/* Only check ones that match. */
		     any_found = "1"b;

		     if rcpd.volume (i).state ^= RESERVED
						/* Not reserved. */
		     then code = error_table_$invalid_resource_state;

		     if res_id = 0b
		     then res_id = rcpd.volume (i).reservation_id;

		     else if res_id ^= rcpd.volume (i).reservation_id
		     then goto BAD_RID;

		     else ;
		end;				/* Only check ones that match. */
	     end;

	     if ^any_found
	     then goto NONE_FOUND;

	     if code ^= 0
	     then goto ALREADY_ASSND;

	     any_found = "0"b;
	end;					/* Check for ambiguous res id, and state not reserved. */

	log_res_id = request_id_ (res_id);

	do i = 1 to rcpd.tot_devices;
	     if rcpd.device (i).reservation_id = res_id
	     then do;

		if system
		then do;
		     if ^rcp_match_user_name_ (rcpd.device (i).group_id, grp_id)
		     then goto BAD_GROUP;
		end;

		else do;
		     if rcpd.device (i).process_id ^= prc_id
		     then goto BAD_PRC;
		end;
              
		any_found = "1"b;
		device_ptr = addr (rcpd.device (i));

		call rcp_cancel_resource_ (DEVICE_TYPE (device.dtypex), (device.device_name), code);
                    if code ^= 0 then
                       goto BAD_ERROR;

		call admin_gate_$syserr (JUST_LOG, "RCP: Cancelled device ^a for ^a (id=^a)", device.device_name,
		     device.group_id, log_res_id);

		call ACCOUNT_WAKEUP (device_ptr, RCP_ACCTMSG_unassign);

		if device.volume_name = ""
		then device.group_id = "";		/* Only if not preloaded. */

		device.reservation_id = 0;
		device.reserved_by = "";
		device.process_id = "0"b;
		device.state_time = clock ();
		device.state = FREE;		/* Free. */
	     end;
	end;

	do i = 1 to rcpd.last_volume;
	     if rcpd.volume (i).reservation_id = res_id
	     then do;

		if system
		then do;
		     if ^rcp_match_user_name_ (rcpd.volume (i).group_id, grp_id)
		     then goto BAD_GROUP;
		end;

		else do;
		     if rcpd.volume (i).process_id ^= prc_id
		     then goto BAD_PRC;
		end;

		any_found = "1"b;
		volume_ptr = addr (rcpd.volume (i));

		call admin_gate_$syserr (JUST_LOG, "RCP: Cancelled volume ^a for ^a (id=^a)", volume.volume_name,
		     volume.group_id, log_res_id);

		call rcp_cancel_resource_ (VOLUME_TYPE (volume.vtypex), (volume.volume_name), code);
						/* Ignore the code. */

		volume.group_id = "";
		volume.reservation_id = 0;
		volume.reserved_by = "";
		volume.process_id = "0"b;
		volume.state_time = clock ();
		volume.state = FREE;		/* Free. */
	     end;
	end;

	if ^any_found
	then goto NONE_FOUND;

	a_code = 0b;
	call rcp_lock_$unlock (addr (rcpd.lock_info));
	call cu_$level_set (caller_level);
	return;

remove_schedule:
	entry (a_resource_desc_ptr, resource_no, registry_dir, reserver_info_ptr, reserver_chain, a_code);

/* This entry is called by rcprm_find_resource_$cancel to finish the cancellation of a resource once it
   has made sure that the cancellation may be requested by the caller (access control function.) */
/* Right now it is a no-op-- in fact, I would be surprised if anyone ever called rcprm_find_resource_$cancel. */

dcl (
     a_resource_desc_ptr pointer,
     resource_no fixed bin,
     registry_dir char (*),
     reserver_info_ptr pointer,
     reserver_chain bit (18) unaligned
     ) parameter;

	a_code = 0;				/* I'm OK, you're OK */
	return;

BAD_ERROR:
	call cleanup_handler;
	a_code = code;
	return;

BAD_GROUP:
	call cleanup_handler;
	a_code = error_table_$badcall;
	return;

BAD_PRC:
	call cleanup_handler;
	a_code = error_table_$badcall;
	return;

BAD_RID:
	call cleanup_handler;
	a_code = error_table_$request_id_ambiguous;
	return;

NONE_FOUND:
	call cleanup_handler;
	a_code = error_table_$noentry;
	return;

ALREADY_ASSND:
	call cleanup_handler ();
	a_code = code;
	return;

ACCOUNT_WAKEUP:
	procedure (a_devptr, a_action);

/*	This procedure is called to format an accounting message, and send it to the
   *	accounting process.  If the accounting event channel has not been set up, no message is sent.
*/


dcl  a_devptr ptr;					/* Pointer to rcp_data entry */
dcl  a_action fixed bin;				/* Accounting action */

dcl  wakeup_buf fixed bin (71);
dcl 1 auto_rcpamsg like rcp_account_msg aligned;

	     unspec (auto_rcpamsg) = "0"b;

	     auto_rcpamsg.device_user_procid = a_devptr -> device.process_id;
	     auto_rcpamsg.rcp_data_relp = rel (a_devptr);
	     auto_rcpamsg.devtype = a_devptr -> device.dtypex;
	     auto_rcpamsg.action = a_action;

	     unspec (wakeup_buf) = unspec (auto_rcpamsg);
	     if rcpd.accounting_chan ^= 0
	     then call hcs_$wakeup (rcpd.accounting_pid, rcpd.accounting_chan, wakeup_buf, (0));

	end ACCOUNT_WAKEUP;

cleanup_handler:
	proc;

	     call rcp_lock_$unlock (addr (rcpd.lock_info));
	     call cu_$level_set (caller_level);

	end cleanup_handler;

/* Include Files */

%include rcp_data;
%page;
%include rcp_com_seg;
%page;
%include rcp_account_msg;
%page;
%include rcp_resource_types;
%page;
%include rcp_resource_states;
%page;
%include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   RCP: Cancelled device devX_MM for GRP_ID (id=RES_ID)

   S:	$log

   T:	$run

   M:	A device reservation has been cancelled by the operator, the
	absentee manager or the Initializer.

   A:	$ignore


   Message:
   RCP: Cancelled volume volume_name for GRP_ID (id=RES_ID)

   S:	$log

   T:	$run

   M:	A volume reservation has been cancelled by the operator, the
	absentee manager or the Initializer.

   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end rcp_cancel_id_;
