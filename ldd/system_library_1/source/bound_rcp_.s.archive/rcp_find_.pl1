/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_find_: procedure;

/*	This program is an internal interface of RCP.
   *	Created on 12/04/74 by Bill Silver.
   *	Modified 6/79 by Michael R. Jordan for MR7.0R.
   *
   *	This program is called to find a device that is already assigned
   *	or attached to the calling process.  If successful we will return
   *	the offset of the RCS entry that corresponds to this device.
   *	This program has the following entry points:
   *	     1.	attached   -  Find a device or volume that is attached.
   *	     2.	device	 -  Find a device that is assigned given its name.
   *	     3.	unattached -  Find a device that is assigned and not attached.
*/

/*		ARGUMENT  DATA		*/

dcl  arg_device_name char (*);			/* (I) name of device to find. */
dcl  arg_rcse_ptr ptr;				/* (I) Pointer to RCS entry to match. */
dcl  arg_trcse_off bit (18);				/* (O) Offset of RCS entry that matched. */


/*		AUTOMATIC  DATA		*/

dcl  match_list (16) ptr;				/* List of devices that match. */

dcl  assign_off bit (18);				/* Offset of first assignment RCS entry. */
dcl  attach_off bit (18);				/* Offset of first attachment RCS entry. */
dcl  device_name char (32);				/* Name of device we are looking for. */
dcl  match_flag bit (1);				/* ON => matching attach RCS entries. */
dcl  num_assign fixed bin;				/* Number of devices assigned to process. */
dcl  num_attach fixed bin;				/* Number of devices attached to process. */
dcl  num_match fixed bin;				/* Number of devices that match. */
dcl  trcse_off bit (18);				/* Offset  of a test RCS entry. */
dcl  trcse_ptr ptr;					/* Pointer to a test RCS entry. */


/*		BASED  DATA		*/

dcl 1 trcse based (trcse_ptr) like rcse aligned;		/* Used to reference a test RCS entry. */


/*		EXTERNAL ENTRIES CALLED	*/

dcl (addr, ptr, rel) builtin;

dcl  rcp_match_$match entry (ptr, ptr) returns (bit (1));
dcl  rcp_match_$select entry (ptr, fixed bin, char (*) aligned, ptr);
dcl  rcp_pointers_$com_seg entry returns (ptr);
dcl  rcp_rcse_$info entry (bit (18), fixed bin, bit (18), fixed bin);

%include rcp_com_seg;

attached:	entry (arg_rcse_ptr, arg_trcse_off);

/*	This entry point will look for an attachment RCS entry that matches
   *	the specified RCS entry.  If we are looking for a volume or a
   *	specific device and we find either of them then we will have
   *	found a matching entry.
*/
	rcse_ptr = arg_rcse_ptr;			/* Get pointer to RCS entry to match. */
	rcs_ptr = rcp_pointers_$com_seg ();

/* Get list of devices attached to process. */
	call rcp_rcse_$info (attach_off, num_attach, assign_off, num_assign);

	match_flag = "0"b;				/* Assume no matching attach entry. */
	trcse_off = attach_off;			/* Start with first attachment RCS entry. */

	do while (trcse_off ^= "0"b);			/* Test all attachment RCS entries. */
	     trcse_ptr = ptr (rcs_ptr, trcse_off);
	     call MATCH_ATTACH;			/* See if this RCS entry matches. */
	     if match_flag				/* Did it match? */
	     then do;				/* Yes, return offset of entry that matched. */
		arg_trcse_off = trcse_off;
		return;
	     end;
	     trcse_off = trcse.user_off;		/* Get next attachment RCS entry. */
	end;

	arg_trcse_off = "0"b;			/* No matching attachment. */
	return;

device:	entry (arg_device_name, arg_trcse_off);

/*	This entry is called to find a device that is assigned.  We are
   *	looking for a specific device name and will not bother matching any
   *	other device characteristics.  We do not care if the device is also
   *	attached.
*/
	device_name = arg_device_name;		/* Initialize. */
	rcs_ptr = rcp_pointers_$com_seg ();

/* Get list of devices assigned to process. */
	call rcp_rcse_$info (attach_off, num_attach, assign_off, num_assign);

	trcse_off = assign_off;			/* Start with first device in the list. */
	do while (trcse_off ^= "0"b);			/* Test each device in assignment list. */
	     trcse_ptr = ptr (rcs_ptr, trcse_off);	/* Get pointer to device to test. */
	     if device_name = trcse.device_name		/* Is this the device we are looking for? */
	     then do;				/* Yes, return its RCS entry. */
		arg_trcse_off = trcse_off;
		return;
	     end;
	     trcse_off = trcse.user_off;		/* Get next device in assignment list. */
	end;

	arg_trcse_off = "0"b;			/* We did not find the specified device. */
	return;

unattached: entry (arg_rcse_ptr, arg_trcse_off);

/*	This entry is called to find a device that is assigned to the calling
   *	process but is not attached.  The input RCS entry is used to specify
   *	the characteristics of the device that we are looking for.  We will
   *	generate a list of all assigned but unattached devices that match
   *	these characteristics.  From that list we will choose the best device.
*/
	rcse_ptr = arg_rcse_ptr;			/* Initialize. */
	rcs_ptr = rcp_pointers_$com_seg ();

/* Get list of devices assigned to process. */
	call rcp_rcse_$info (attach_off, num_attach, assign_off, num_assign);

	num_match = 0;				/* No devices match yet. */
	trcse_off = assign_off;			/* Start with first device on the list. */

	do while (trcse_off ^= "0"b);			/* Test all devices in assignment list. */
	     trcse_ptr = ptr (rcs_ptr, trcse_off);
	     call MATCH_ASSIGN;			/* See if this device matches. */
	     trcse_off = trcse.user_off;		/* Get next device in the assignment list. */
	end;

	if num_match = 0				/* Did any devices match? */
	then do;					/* No. */
	     arg_trcse_off = "0"b;
	     return;
	end;

/* Yes, select the best one. */
	call rcp_match_$select (addr (match_list), num_match, rcse.volume_name, trcse_ptr);
	arg_trcse_off = rel (trcse_ptr);		/* Return offset of selected device. */
	return;

MATCH_ATTACH: procedure;

/*	This procedure is called to see if the current attached device matches
   *	the device name or volume name of the device that is being attached.
*/
	     if (rcse.flags.device) &			/* Are we looking for a specific device? */
	     (rcse.device_name = trcse.device_name)
	     then do;				/* Yes, and this is it. */
		match_flag = "1"b;			/* Tell caller that we found a match. */
		return;
	     end;

	     if rcse.flags.volume			/* Are we looking for a volume? */
	     then if (rcse.volume_name ^= "scratch") &
		(rcse.volume_name = trcse.volume_name)
		then match_flag = "1"b;		/* Yes, a non scratch volume that matches. */

	end MATCH_ATTACH;

MATCH_ASSIGN: procedure;

/*	This procedure is called to see if the current assigned device matches
   *	the requirements of the specified device.  Only devices that are not
   *	attached can match.
*/
	     if rcse.dtypex ^= trcse.dtypex		/* No match if not same device type. */
	     then return;

	     if trcse.state ^= 5			/* Is assignment complete? */
	     then return;				/* No, then no match. */

	     if trcse.rcse_off ^= "0"b		/* Is device attached? */
	     then return;				/* Yes, no match. */

/* See if device characteristics match. */
	     match_flag = rcp_match_$match (rcse_ptr, trcse_ptr);
	     if match_flag				/* Do they match? */
	     then do;				/* Yes. */
		num_match = num_match + 1;		/* Up count of devices that have matched. */
		match_list (num_match) = trcse_ptr;	/* Save pointer to this device in our list. */
	     end;

	end MATCH_ASSIGN;

     end rcp_find_;
