/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_validate_:  procedure  (arg_rcp_id,arg_caller_level,arg_rcse_ptr,arg_ecode);

/*	This program is an internal interface of RCP.
*	Created on 10/15/74 by Bill Silver.
*
*	This program is called to validate an rcp_id.  If the rcp_id
*	is valid rcp_validate_ will return a pointer to the device
*	entry associated with this rcp_id.  The following tests are
*	made to validate the rcp_id.
*
*	     1.  Check that device offset is within valid bounds.
*	     2.  Check that rcp_id matches the one in the device entry.
*	     3.  Check that this is the process that has the device assigned.
*	     4.  Check that the caller's validation level is not too high.
*	     5.  Check that the RCS entry is in an active state.
*/

dcl	arg_caller_level	fixed bin;	/* (I) Caller's validation level. */
dcl	arg_rcse_ptr	ptr;		/* (O) Pointer to valid rcse entry. */
dcl	arg_ecode		fixed bin(35);	/* (O) error_table_ code. */
dcl	arg_rcp_id	bit(36)  aligned;	/* (I)  rcp_id to validate. */

dcl	dcode		fixed bin(35);	/* Dummy error_table_ code. */
dcl	ecode		fixed bin(35);	/* error_table_ code. */
dcl	process_id	bit(36);		/* ID of calling process. */
dcl	rcp_id		bit(36)  aligned;	/* rcp_id that we are to validate. */
dcl	rcse_off		bit(18);		/* RCS entry offset from rcp_id. */

dcl     (	addr, null, ptr, rel )	builtin;

dcl     (	error_table_$bad_arg,
	error_table_$force_unassign,
	error_table_$bad_index,
	error_table_$bad_processid,
	error_table_$bad_ring_brackets,
	error_table_$invalid_state )  fixed bin(35)  external;

dcl	get_process_id_	entry  returns(bit(36));
dcl	rcp_pointers_$com_seg  entry  returns (ptr);
/*	*/
%include rcp_com_seg;
/*	*/
	ecode = 0;			/* Initialize. */
	rcp_id = arg_rcp_id;		/* Get RCS entry offset from ID to test. */
	rcse_off = addr(rcp_id)->based_rcp_id.rcse_off;
	rcs_ptr = rcp_pointers_$com_seg ();	/* Get pointer to base of RCS. */

	if   (rcse_off = "0"b)  |		/* Test 1:  Check bounds. */
	     (rcse_off > rel(addr(rcs.end)))
	     then do;			/* Not a valid RCS entry offset. */
		ecode = error_table_$bad_index;
		rcse_ptr = null();
		goto VALIDATE_RETURN;
	     end;

	rcse_ptr = ptr(rcs_ptr,rcse_off);	/* Get pointer to RCS entry. */
	if   rcse.rcp_id ^= rcp_id		/* Test 2:  Does rcp_id match? */
	     then do;			/* No. */
		ecode = error_table_$bad_arg;
		goto VALIDATE_RETURN;
	     end;

	if   rcse.process_id ^= get_process_id_()
	     then do;			/* Test 3:  Process ID invalid. */
		ecode = error_table_$bad_processid;
		goto VALIDATE_RETURN;
	     end;

	if   rcse.caller_level < arg_caller_level
	     then do;			/* Test 4:  Level too high. */
		ecode = error_table_$bad_ring_brackets;
		goto VALIDATE_RETURN;
	     end;

	if   rcse.state = 0			/* Test 5:  RCS entry in invalid state. */
	     then if rcse.ecode = error_table_$force_unassign then ecode = rcse.ecode;
	     else ecode = error_table_$invalid_state;

VALIDATE_RETURN:
	arg_ecode = ecode;			/* Return aguments. */
	arg_rcse_ptr = rcse_ptr;		/* Return pointer to RCS entry. */

	end  rcp_validate_;
