/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-11,Fawcett), approve(85-09-11,MCR6979),
     audit(85-12-11,CLJones), install(86-03-21,MR12.0-1033):
     Add MCA support
                                                   END HISTORY COMMENTS */

/* format: style4 */

rcp_device_info_: procedure;

/*	This program is an internal interface of RCP.
   *	Created by Bill Silver on 12/12/74.
   *	Modified by D. Vinograd 6/76 to map model number 450 to 451
   *	Modified by Noel I. Morris on 01/20/77 for multiple tape controllers.
   *	Modified by D. Vinograd 2/77 to force access for Initializer process in ring 1.
   *	Modified by Michael R. Jordan on 11/17/78 to add version 2 tape_info structures and 6250 bpi.
   *	Modified by C. D. Tavares 04/27/79 for canonicalization.
   *	Modified by Michael R. Jordan 6/79 for MR7.0R.
   *	Modified by J. A. Bush 09/30/82 to return more tape info
   *	Modified by J. A. Bush 09/19/83 to fix a bug when using tape_info_version_3
   *	Modified by Chris Jones 03/05/85 to add copy entrypoint.
   *      Modified by Paul Farley & RAF 04/03/85 to add device_type (8) "MCA".
   *
   *	This program deals with the various RCP device info structures.
   *	It has the following entry points:
   *	     1.  get  -	Get data from a device info structure and put it into
   *			an RCSE.  Initialize the RCSE.
   *	     2.  put  -	Get data from an RCSE and put it into a device info structure.
   *	     3.  copy -	Copy data from one device info structure to another.
*/

/*		ARGUMENT  DATA		*/

dcl  arg_caller_level fixed bin;			/* (I) Caller's validation level. */
dcl  arg_device_info_ptr ptr;				/* (I) pointer to device info structure. */
dcl  arg_device_type char (*);			/* (I) Device type name. */
dcl  arg_ecode fixed bin (35);			/* (O) error_table_ code. */
dcl  arg_rcse_ptr ptr;				/* (I) Pointer to specified RCS entry. */


/*		AUTOMATIC  DATA		*/

dcl  access fixed bin (5);				/* Access to RCP system gate. */
dcl  am_initializer bit (1) initial ("0"b);		/* On if user is the Initializer */
dcl  caller_level fixed bin;				/* User's validation level. */
dcl  device_name char (32) aligned;			/* Device name. */
dcl  device_type char (32);				/* Device type name. */
dcl  dtypex fixed bin;				/* Index that => device type. */
dcl  ecode fixed bin (35);				/* error_table_ code. */
dcl  i fixed bin;
dcl  tracks fixed bin;				/* Tape tracks type qualifier. */

dcl  1 local_tape_info like tape_info;			/* A copy for handling version 1 structures. */


/*		BASED  DATA		*/

dcl  based_rcse (size (rcse)) bit (36) based (rcse_ptr);

dcl  1 version_1_tape_info based (device_info_ptr) aligned, /* O_L_D_ RCP device info structure for tapes. */
       2 version_num fixed bin,			/* Version number of this structure. */
       2 usage_time fixed bin,			/* Number of minutes drive will/may be used. */
       2 wait_time fixed bin,				/* Number of minutes user will/must wait. */
       2 system_flag bit (1),				/* ON => user wants to be a system process. */
       2 device_name char (8),			/* Tape drive name. */
       2 model fixed bin,				/* Tape drive model number. */
       2 tracks fixed bin,				/* Tracks type. */
       2 density bit (36),				/* Recording density: 200, 556, 800, 1600, 6250. */
       2 volume_name char (32),			/* Tape reel name. */
       2 write_flag bit (1),				/* ON => writing on tape reel. */
       2 position_index fixed bin (35);			/* Counter used to determine tape reel position. */

/*		EXTERNAL ENTRIES CALLED	*/

dcl  (addr, bit, null, size, string, substr) builtin;

dcl  (error_table_$bad_arg,
     error_table_$resource_unknown,
     error_table_$unimplemented_version) fixed bin (35) external;

dcl  get_group_id_ entry returns (char (32) aligned);
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  hcs_$get_user_effmode entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin,
	fixed bin (5), fixed bin (35));
dcl  rcp_pointers_$com_seg entry returns (ptr);
dcl  resource_info_$get_dtypex entry (char (*), char (*), fixed bin, fixed bin (35));

/*
   *
   *	This entry is called to get information out of a device info structure.
   *	We will interpret this information and put it into the specified RCS
   *	entry.  We will validate as much information in the structure as possible.
   *
*/


get: entry (arg_device_type, arg_device_info_ptr, arg_rcse_ptr, arg_caller_level, arg_ecode);


	device_type = arg_device_type;		/* Get arguments. */
	device_info_ptr = arg_device_info_ptr;
	rcse_ptr = arg_rcse_ptr;
	caller_level = arg_caller_level;

	call resource_info_$get_dtypex (device_type, device_type, dtypex, ecode);
	if ecode ^= 0 then goto RETURN_ERR;

	string (based_rcse) = "0"b;			/* Zero entire RCSE. */
	device_name,				/* Get name of device to assign. */
	     rcse.device_name = device_info.device_name;
	rcse.volume_name = " ";			/* Assume no volume. */
	rcse.dtypex = dtypex;			/* Remember device type. */
	rcse.model = device_info.model;		/* Every device type has a model number. */
	rcse.num_qualifiers = NUM_QUALIFIERS (dtypex);
	do i = 1 to rcse.num_qualifiers;		/* Fill in all qualifiers that device has. */
	     rcse.qualifiers (i) = device_info.qualifiers (i);
	end;

	rcse.caller_level = caller_level;		/* Fill in other data common to all device types. */
	rcse.process_id = get_process_id_ ();
	rcse.group_id = get_group_id_ ();
	rcse.version_num = device_info.version_num;
	rcse.workspace_ptr = null ();
	if device_name ^= " "			/* Not blank => looking for a specific device. */
	then rcse.flags.device = "1"b;
	rcse.flags.system = GET_SYSTEM_FLAG ();

	goto GET_DTYPE (dtypex);			/* Process according to device type. */


GET_DTYPE (1):					/* TAPE */
	if tape_info.version_num = 1 then do;		/* Convert old structures. */
	     local_tape_info.usage_time = version_1_tape_info.usage_time;
	     local_tape_info.wait_time = version_1_tape_info.wait_time;
	     local_tape_info.system_flag = version_1_tape_info.system_flag;
	     local_tape_info.device_name = version_1_tape_info.device_name;
	     local_tape_info.model = version_1_tape_info.model;
	     local_tape_info.tracks = version_1_tape_info.tracks;
	     local_tape_info.density = version_1_tape_info.density;
	     local_tape_info.speed = "0"b;
	     local_tape_info.pad = "0"b;
	     local_tape_info.volume_name = version_1_tape_info.volume_name;
	     local_tape_info.write_flag = version_1_tape_info.write_flag;
	     local_tape_info.position_index = version_1_tape_info.position_index;
	     device_info_ptr = addr (local_tape_info);	/* Switch to the temporary version 2 copy. */
	     rcse.qualifiers (3) = 0;			/* No speed in RCSE either. */
	end;
	else if tape_info.version_num ^= tape_info_version_3 & tape_info.version_num ^= tape_info_version_2
	then goto BAD_VERSION;
	call canon_name (DEVICE_TYPE (dtypex), device_name, rcse.device_name);
	if rcse.flags.device
	then do;					/* Specific device => no qualifier tests. */
	     if substr (device_name, 1, 3) ^= "tap"
	     then goto BAD_DEVICE;
	end;
	else do;					/* Any tape, check qualifiers. */
	     tracks = tape_info.tracks;		/* Get tracks type. */
	     if tracks ^= 0				/* If track qualifier specified validate it. */
	     then if (tracks ^= 9) &
		     (tracks ^= 7)
		then goto BAD_QUALIFIER;
	     if substr (tape_info.density, 6) ^= ""b	/* Extraneous bits set? */
	     then goto BAD_QUALIFIER;
	     if (tracks = 7) &			/* Did caller specify 7 track? */
		(substr (tape_info.density, 4, 2) ^= ""b)
						/* Then he can't specify possible 1600 or 6250 density. */
	     then goto BAD_QUALIFIER;
	     if substr (tape_info.speed, 4) ^= ""b	/* Extraneous bits set? */
	     then goto BAD_QUALIFIER;
	     if tape_info.pad ^= "0"b			/* This must be "0"b. */
	     then goto BAD_QUALIFIER;
	end;
	rcse.flags.writing = tape_info.write_flag;
	if tape_info.volume_name ^= " "		/* Is there a volume name? */
	then do;					/* Yes. */
	     rcse.volume_name = tape_info.volume_name;
	     rcse.flags.volume = "1"b;
	     if rcse.volume_name = "T&D_Volume"
	     then do;
		rcse.flags.t_and_d = "1"b;
		rcse.volume_name = "scratch";
	     end;
	     else call canon_name (VOLUME_TYPE (dtypex), rcse.volume_name, tape_info.volume_name);
	end;
	goto RETURN_OK;


GET_DTYPE (2):					/* DISK */
	if disk_info.version_num ^= 1
	then goto BAD_VERSION;
	call canon_name (DEVICE_TYPE (dtypex), device_name, rcse.device_name);
	if rcse.flags.device
	then if substr (device_name, 1, 3) ^= "dsk"
	     then goto BAD_DEVICE;
	rcse.flags.writing = disk_info.write_flag;
	if disk_info.volume_name ^= " "		/* Is there a volume name? */
	then do;					/* Yes. */
	     rcse.volume_name = disk_info.volume_name;
	     rcse.flags.volume = "1"b;
	     if rcse.volume_name = "T&D_Volume"
	     then do;
		rcse.flags.t_and_d = "1"b;
		rcse.volume_name = "scratch";
	     end;
	     else call canon_name (VOLUME_TYPE (dtypex), rcse.volume_name, disk_info.volume_name);
	end;
	if rcse.model = 191				/* Model number 191 replaced by 400. */
	then rcse.model = 400;
	if rcse.model = 450				/* then name been changed */
	then rcse.model = 451;
	goto RETURN_OK;


GET_DTYPE (3):					/* CONSOLE */
	if device_info.version_num ^= 1
	then goto BAD_VERSION;
	call canon_name (DEVICE_TYPE (dtypex), device_name, rcse.device_name);
	if rcse.flags.device			/* Does caller want a specific device? */
	then if substr (device_name, 1, 3) ^= "opc"	/* Then it must be this name: "opc". */
	     then goto BAD_DEVICE;
	rcse.model = 0;				/* Model number not used. */
	goto RETURN_OK;


GET_DTYPE (4):					/* PRINTER */
	if device_info.version_num ^= 1
	then goto BAD_VERSION;
	call canon_name (DEVICE_TYPE (dtypex), device_name, rcse.device_name);
	if rcse.flags.device
	then if substr (device_name, 1, 3) ^= "prt"
	     then goto BAD_DEVICE;
	goto RETURN_OK;


GET_DTYPE (5):					/* PUNCH */
	if device_info.version_num ^= 1
	then goto BAD_VERSION;
	call canon_name (DEVICE_TYPE (dtypex), device_name, rcse.device_name);
	if rcse.flags.device
	then if substr (device_name, 1, 3) ^= "pun"
	     then goto BAD_DEVICE;
	goto RETURN_OK;


GET_DTYPE (6):					/* READER */
	if device_info.version_num ^= 1
	then goto BAD_VERSION;
	call canon_name (DEVICE_TYPE (dtypex), device_name, rcse.device_name);
	if rcse.flags.device
	then if substr (device_name, 1, 3) ^= "rdr"
	     then goto BAD_DEVICE;
	goto RETURN_OK;


GET_DTYPE (7):					/* SPECIAL */
GET_DTYPE (8):					/* MCA */
	if device_info.version_num ^= 1
	then goto BAD_VERSION;
						/* Anything goes for name. */
	goto RETURN_OK;


RETURN_OK: arg_ecode = 0;
	device_info.device_name = rcse.device_name;	/* in case it was changed (canonicalized) */
	return;


RETURN_ERR:
	arg_ecode = ecode;
	return;


BAD_DEVICE:
	arg_ecode = error_table_$resource_unknown;
	return;


BAD_QUALIFIER:
	arg_ecode = error_table_$bad_arg;
	return;


BAD_VERSION:
	arg_ecode = error_table_$unimplemented_version;
	return;

canon_name: proc (resource_type, resource_name, copy_resource_name);


dcl  resource_type char (*);
dcl  (resource_name, copy_resource_name) char (*) aligned parameter,
     resource_info_$canonicalize_name ext entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (35));


	if am_initializer then
	     copy_resource_name = resource_name;	/* don't take chance RTDT nonexistent during reload */

	else do;
	     call resource_info_$canonicalize_name ((resource_type), resource_name, copy_resource_name, ecode);
	     if ecode ^= 0 then goto RETURN_ERR;
	end;

	resource_name = copy_resource_name;
	return;


     end canon_name;

/*
   *
   *	This entry is called to return information in a device info structure.
   *	The information about this device is take from the specified RCS entry.
   *
*/


set: entry (arg_device_info_ptr, arg_rcse_ptr, arg_ecode);


	device_info_ptr = arg_device_info_ptr;		/* Copy arguments. */
	rcse_ptr = arg_rcse_ptr;

	if device_info.version_num ^= rcse.version_num then /* verson number ^= */
	     if rcse.dtypex ^= TAPE_DRIVE_DTYPEX then	/* and not tapes */
		go to BAD_VERSION;
	     else if device_info.version_num ^= tape_info_version_3 & device_info.version_num ^= tape_info_version_2 then
		go to BAD_VERSION;

	device_info.usage_time,			/* Return common info. */
	     device_info.wait_time = 0;
	device_info.system_flag = rcse.flags.system;
	device_info.device_name = rcse.device_name;
	device_info.model = rcse.model;
	do i = 1 to rcse.num_qualifiers;
	     device_info.qualifiers (i) = rcse.qualifiers (i);
	end;

	goto SET_DTYPE (rcse.dtypex);			/* Process according to device type. */


SET_DTYPE (1):					/* TAPE */
	if device_info.version_num = 1 then do;		/* Old version version 1 structure. */
	     version_1_tape_info.volume_name = rcse.volume_name;
	     version_1_tape_info.write_flag = rcse.flags.writing;
	     version_1_tape_info.position_index = 1;	/* Feature not yet implemented. */
	end;
	else do;					/* Version 2 or > structure */
	     tape_info.volume_name = rcse.volume_name;
	     tape_info.write_flag = rcse.flags.writing;
	     tape_info.position_index = 1;		/* Feature not yet implemented. */
	     if tape_info.version_num = tape_info_version_3 then do; /* version 3 */
		tape_info.volume_density = rcse.volume_density_index;
		tape_info.volume_type = rcse.label_type;
		tape_info.opr_auth = rcse.need_auth;
	     end;
	end;
	arg_ecode = 0;
	return;


SET_DTYPE (2):					/* DISK */
	disk_info.volume_name = rcse.volume_name;
	disk_info.write_flag = rcse.flags.writing;
	arg_ecode = 0;
	return;


SET_DTYPE (3):					/* CONSOLE */
SET_DTYPE (4):					/* PRINTER */
SET_DTYPE (5):					/* PUNCH */
SET_DTYPE (6):					/* READER */
SET_DTYPE (7):					/* SPECIAL */
SET_DTYPE (8):					/* MCA */
	arg_ecode = 0;				/* No extra info to return. */
	return;

copy: entry (arg_device_type, arg_source_ptr, arg_dest_ptr, arg_ecode);

dcl  arg_source_ptr ptr parameter;
dcl  arg_dest_ptr ptr parameter;

dcl  source_ptr ptr;
dcl  dest_ptr ptr;
dcl  wordcount fixed bin;

dcl  based_bits (wordcount) bit (36) aligned based;

	device_type = arg_device_type;
	call resource_info_$get_dtypex (device_type, device_type, dtypex, ecode);
	if ecode ^= 0 then goto RETURN_ERR;

	source_ptr = arg_source_ptr;
	dest_ptr = arg_dest_ptr;
	wordcount = device_info_size (dtypex);
	dest_ptr -> based_bits = source_ptr -> based_bits;
	arg_ecode = 0;
	return;

/*
   *
   *	This procedure is called to determine whether or not the calling is to be
   *	considered a system process.  If it is a value of "1"b will be returned.
   *	Otherwise a value of "0"b will be returned.  In order to be considered
   *	a system process the following criteria must be satisified:
   *	     1.	The caller must want to be a system process.
   *	     2.	The caller must have access to the system RCP gate.
   *
   *	If the caller is the Initializer process in ring 1 then all is ok.
   *
*/


GET_SYSTEM_FLAG: procedure returns (bit (1));


	if rcse.group_id = "Initializer.SysDaemon.z" then do;
	     am_initializer = "1"b;
	     return ("1"b);
	end;

	if ^device_info.system_flag			/* Does caller want to be a system process? */
	then return ("0"b);				/* No. */

	rcs_ptr = rcp_pointers_$com_seg ();		/* Yes, see if caller has the necessary access. */
	call hcs_$get_user_effmode (rcs.sys_directory, rcs.sys_acs, rcse.group_id, caller_level,
	     access, ecode);
	if ecode ^= 0				/* Any error => no access. */
	then return ("0"b);

	if (bit (access, 5) & "00100"b) ^= "00100"b
	then return ("0"b);				/* Caller does not have "E" access. */

	return ("1"b);


     end GET_SYSTEM_FLAG;

%include rcp_com_seg;
%page;
%include rcp_resource_types;
%page;
%include rcp_device_info_structs;

     end rcp_device_info_;
