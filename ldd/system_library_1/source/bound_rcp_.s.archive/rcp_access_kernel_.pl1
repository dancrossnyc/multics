/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_access_kernel_:
     procedure (a_operation, a_requestor_info_ptr, a_resource_info_ptr, a_effmode, a_code);

/*     This program implements an access kernel for RCP
   *     Created 841024 by Maria M. Pozzo
   *
   *     The operation argument is used to determine the access rules
   *     to apply when calculating effective access of the user to
   *     the RCP resource.
*/


/****^  HISTORY COMMENTS:
  1) change(85-07-08,Pozzo), approve(86-02-21,MCR7346), audit(86-07-29,Farley),
     install(86-08-01,MR12.0-1108):
     Modified to return the correct error code from rcp_compute_bracket_mode.
  2) change(85-07-10,Pozzo), approve(86-02-21,MCR7346), audit(86-07-29,Farley),
     install(86-08-01,MR12.0-1108):
     Modified to audit attempt to access a multi-class volume from outside ring
     1 or without the rcp privilege turned on.
  3) change(86-08-07,Farley), approve(86-08-07,MCR7469),
     audit(86-10-19,Beattie), install(86-10-28,MR12.0-1200):
     Added validation level check for MCA attachments.
                                                   END HISTORY COMMENTS */


/*                    ARGUMENT DATA                           */

dcl	a_operation	   bit (36) aligned;	/* (I) RCP operation found in rcp_operations.incl.pl1 */
dcl	a_requestor_info_ptr   ptr;			/* (I) Contains information about the user requesting the RCP operation */
dcl	a_resource_info_ptr	   ptr;			/* (I) Contains information about the resource being requested */
dcl	a_effmode		   bit (3);		/* (O) Effective access mode of the requesting user to the RCP resource */
dcl	a_code		   fixed bin (35);		/* (O) Error code */

/*                    AUTOMATIC                            */

dcl	rcp_priv		   bit (1) aligned;		/* ON => rcp system_privilege is enabled */
dcl	rm_on		   bit (1) aligned;		/* Set if Resource Management is enabled */
dcl	(aim_mode, bracket_mode, effmode, raw_mode, temp_effmode)
			   bit (3);		/* access modes */
dcl	operation		   bit (36) aligned;
dcl	base_operation	   bit (36) aligned;

dcl	acs_path		   char (168);		/* ACS pathname */
dcl	owner		   char (32);		/* If RM is enabled this is the resource owner found in the registry */
dcl	who_am_i		   char (32);		/* Identifies this program. */

dcl	operation_ptr	   ptr;			/* RCP operation */

dcl	error_code	   fixed bin (35);		/* Internal error code */
dcl	input_code	   fixed bin (35);		/* Passed in error_code */
dcl	rbs		   (2) fixed bin (3);	/* Ring brackets of the ACS if it exists. */

dcl	1 en_access_op	   like encoded_access_op aligned based (operation_ptr);

dcl	addr		   builtin;

/*                    CONSTANTS                               */

dcl	RING_1		   fixed bin (3) static internal options (constant) init (1);

/*                    EXTERNAL                                */

dcl	error_table_$bad_ring_brackets
			   fixed bin (35) external;
dcl	error_table_$unsupported_multi_class_volume
			   fixed bin (35) external;

/*                    EXTERNAL ENTRIES                        */


dcl	rcp_audit		   entry (char (*), bit (36) aligned, ptr, ptr, char (*), bit (3), bit (3),
			   (2) fixed bin (3), bit (1), fixed bin (35));
dcl	rcp_merge_modes	   entry (bit (3), bit (3), fixed bin (35)) returns (bit (3));
dcl	rcp_access_kernel_setup
			   entry (bit (36) aligned, ptr, ptr, bit (1) aligned, char (168), bit (1) aligned,
			   char (32), bit (3), fixed bin (35));
dcl	rcp_compute_aim_mode   entry (ptr, ptr, bit (3), fixed bin (35));
dcl	rcp_compute_bracket_mode
			   entry (char (168), ptr, ptr, bit (3), (2) fixed bin (3), fixed bin (35));
dcl	rcp_compute_raw_mode   entry (bit (1) aligned, ptr, ptr, char (168), char (32), bit (3), fixed bin (35));
dcl	rcp_operation_access   entry (bit (36) aligned, char (32), bit (1) aligned, bit (3), fixed bin (35));
dcl	access_operations_$rcp_acquire
			   bit (36) aligned external;
dcl	access_operations_$rcp_register
			   bit (36) aligned external;
dcl	access_operations_$rcp_register_acquire
			   bit (36) aligned external;
%page;
/*  Copy input arguments */

	operation = a_operation;
	base_operation = operation;
	input_code = a_code;
	addr (base_operation) -> encoded_access_op.detailed_operation = 0;
	operation_ptr = addr (operation);
	requestor_info_ptr = a_requestor_info_ptr;
	resource_info_ptr = a_resource_info_ptr;

/*  Initializer local variables */

	who_am_i = "rcp_access_kernel_";
	rcp_priv, rm_on = "0"b;
	aim_mode, bracket_mode, effmode, raw_mode = ""b;
	temp_effmode = REW_ACCESS;
	owner = "";
	ops_ptr = addr (en_access_op.detailed_operation);
	error_code = 0;
	rbs = 0;
	rbs (1) = -1;				/* In case they don't exist. */

/*  Get setup - determine if this is a privileged user */

	call rcp_access_kernel_setup (operation, requestor_info_ptr, resource_info_ptr, rm_on, acs_path, rcp_priv,
	     owner, effmode, error_code);

	if error_code ^= 0 then
	     if error_code = error_table_$unsupported_multi_class_volume then
		goto AUDIT;
	     else goto MAIN_RETURN;

	if base_operation = access_operations_$rcp_register | base_operation = access_operations_$rcp_register_acquire
	     | base_operation = access_operations_$rcp_acquire then
	     goto MAIN_RETURN;			/* These ops have default access and are audited later. */

	if effmode ^= ""b then			/* Some operations have default access but get audited now. */
	     goto AUDIT;

/*  If the resource is an MCA, verify that the requestor's validation level is correct. */

	if resource_info.resource_type = DEVICE_TYPE (MCA_DTYPEX) then
	     if requestor_info.validation_level > RING_1 then do;
		error_code = error_table_$bad_ring_brackets;
		goto AUDIT;
	     end;
	     else ;
	else ;

/*  If this is a privileged gate call (rcp_sys_, rcp_admin_) bypass all discretionary access checks */

	if ^detailed_operation.priv_gate_call then do;

/*  Calculate the discretionary access mode of the subject to the object */

	     call rcp_compute_raw_mode (rm_on, requestor_info_ptr, resource_info_ptr, acs_path, owner, raw_mode,
		error_code);

/*  Calculate the ring bracket mode - if the acs path is null then
   this check is bypassed */

	     if acs_path ^= "" then do;
		call rcp_compute_bracket_mode (acs_path, requestor_info_ptr, resource_info_ptr, bracket_mode, rbs,
		     error_code);

/*  Determine the temporary effective mode without AIM factored in */

		temp_effmode = rcp_merge_modes (raw_mode, bracket_mode, error_code);

	     end;
	     else temp_effmode = raw_mode;

	end;

/*  If RM is enabled and RCP system privilege is off, must factor in the AIM access mode */

	if (rm_on & ^rcp_priv) then do;
	     call rcp_compute_aim_mode (requestor_info_ptr, resource_info_ptr, aim_mode, error_code);
	     effmode = rcp_merge_modes (temp_effmode, aim_mode, error_code);
	end;
	else effmode = temp_effmode;

/*  Now we know the access, see if we have enough to perform the requested operation */

	call rcp_operation_access (operation, resource_info.resource_type, rm_on, effmode, error_code);
	a_code = error_code;

/* Now let's audit the attempted operation. rcp_audit determines if auditing */
/* is enabled. */

AUDIT:
/**** If the error code passed in is not zero, then the operation failed due
      to reasons other than access (such as resource locked) and this call to
      the access kernel is to determine how much information to return.  We
      want to be sure to audit this as a denial of the operation even though
      the user may have access. */
	if input_code ^= 0 then
	     call rcp_audit (who_am_i, operation, requestor_info_ptr, resource_info_ptr, owner, ("000"b), raw_mode, rbs,
		(rm_on), (error_code));
	else call rcp_audit (who_am_i, operation, requestor_info_ptr, resource_info_ptr, owner, (effmode), raw_mode,
		rbs, (rm_on), (error_code));

MAIN_RETURN:
	a_operation = operation;
	a_effmode = effmode;
	a_code = error_code;
	return;
%page;
%include access_audit_encoded_op;
%page;
%include access_mode_values;
%page;
%include rcp_ops;
%page;
%include rcp_resource_info;
%page;
%include rcp_resource_types;
%page;
%include rcp_requestor_info;

     end rcp_access_kernel_;

