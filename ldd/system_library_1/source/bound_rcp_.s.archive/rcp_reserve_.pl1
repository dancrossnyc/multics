/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_reserve_:
     proc (a_resource_desc_ptr, a_resource_res_ptr, a_code);

/*
   *       This subroutine implements reservation in RCP.  It takes a
   *  reservation description and a resource description and manipulates
   *  rcp_data to make the reservations.
   *       This is a radical departure from RCP protocol which in the
   *  past required calling rcp_initializer_ to change rcp_data_.
*/

/*
   Written by R.J.C. Kissel 5/78.
   Modified by R.J.C. Kissel 1/79 to add unprivileged user reservations.
   Modified by R.J.C. Kissel 3/79 to allow multiple density requests.
   Modified 6/79 by Michael R. Jordan for MR7.0R.
   Modified 6/81 by C. D. Tavares to make scratch tapes re-usable.
   Modified 12/84 by Chris Jones for B2 security cleanup.
*/


/****^  HISTORY COMMENTS:
  1) change(85-07-12,Pozzo), approve(86-02-21,MCR7346), audit(86-07-29,Farley),
     install(86-08-01,MR12.0-1108):
     Modified to add auditing for denial of reservations of devices requested
     by name.
  2) change(85-07-24,ABall), approve(86-02-21,MCR7346), audit(86-07-29,Farley),
     install(86-08-01,MR12.0-1108):
     Fix bug involving validation level not being the caller's before calling
     rcprm_find_resource_$(reserve reserve_proxy).
  3) change(87-06-25,Rauschelbach), approve(87-06-29,MCR7736),
     audit(87-07-21,Farley), install(87-08-06,MR12.1-1063):
     System error message documentation was added.
                                                   END HISTORY COMMENTS */


/* Arguments */

dcl	a_resource_desc_ptr	   ptr;			/* The resource description structure. */
dcl	a_resource_res_ptr	   ptr;			/* The reservation description structure. */
dcl	a_code		   fixed bin (35);		/* A standard system status code. */

/* Local Variables */

/* See the resource_control_desc include file for local declarations of the input argument pointers. */

dcl	any_reserved	   bit (1) aligned;		/* Have any reservations been made. (for cleanup). */
dcl	attributes	   char (256) varying;	/* Storage for the attributes character string. */
dcl	authorization	   bit (72) aligned;	/* Authorization to be used for the reservation. */
dcl	caller_level	   fixed bin;		/* Caller's validation level. */
dcl	callers_resource_desc_ptr
			   ptr;			/* copy of caller supplied pointer */
dcl	callers_resource_res_ptr
			   ptr;			/* copy of caller supplied pointer */
dcl	code		   fixed bin (35);
dcl	density		   bit (5) aligned;		/* Density value for a tape drive. */
dcl	dtype_idx		   fixed bin;		/* Index into the dtype structure in rcpd. */
dcl	i		   fixed bin;		/* Current resource index. */
dcl	is_volume		   bit (1);		/* ON => resource type is a volume type */
dcl	log_res_id	   char (19);
dcl	model		   fixed bin (35);		/* Model number of a resource. */
dcl	num_free		   fixed bin;
dcl	operation		   bit (36) aligned;	/* RCP operation */
dcl	primary_type	   char (32);
dcl	process_id	   bit (36) aligned;
dcl	1 req_info	   aligned like requestor_info;
dcl	res_by		   char (32);
dcl	res_for		   char (32);		/* for cleanup handling. */
dcl	res_id		   fixed bin (71);		/* Copies of critical information needed */
dcl	1 res_info	   aligned like resource_info;
dcl	registry_directory	   char (64);		/* local var */
dcl	ret_ptr		   ptr;
dcl	rsc_name		   char (32);
dcl	rsc_type		   char (32);
dcl	saved_code	   fixed bin (35);		/* so we can remember we saw at least one error */
dcl	special_rdesc_ptr	   ptr;
dcl	special_resv_ptr	   ptr;
dcl	speed		   bit (3) aligned;		/* Allowable speeds */
dcl	system		   bit (1) aligned;		/* True if called through rcp_sys_ gate. */
dcl	tot_disk_drives	   fixed bin;		/* Number of tdisk drives requested. */
dcl	tot_tape_drives	   fixed bin;		/* Number of tape drives requested. */
dcl	tracks		   fixed bin (35);		/* Number of tracks for a tape drive. */

dcl	system_free_area	   area based (get_system_free_area_ ());

/* External Entries */

dcl	access_audit_r1_$log_general
			   entry options (variable);
dcl	admin_gate_$syserr	   entry options (variable);
dcl	cu_$level_get	   entry (fixed bin);
dcl	cu_$level_set	   entry (fixed bin);
dcl	cv_rcp_attributes_$to_string_rel
			   entry (char (*), bit (72) dim (4), char (*) varying, fixed bin (35));
dcl	get_authorization_	   entry () returns (bit (72) aligned);
dcl	get_ring_		   entry returns (fixed bin);
dcl	get_process_id_	   entry () returns (bit (36));
dcl	get_system_free_area_  entry () returns (ptr);
dcl	hcs_$wakeup	   entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl	mode_string_$parse	   entry (char (*), ptr, ptr, fixed bin (35));
dcl	rcp_access_kernel_	   entry (bit (36) aligned, ptr, ptr, bit (3), fixed bin (35));
dcl	rcp_pointers_$data	   entry returns (ptr);
dcl	rcp_pointers_$com_seg  entry returns (ptr);
dcl	rcp_lock_$lock	   entry (ptr, fixed bin (35));
dcl	rcp_lock_$unlock	   entry (ptr);
dcl	rcprm_find_resource_$reserve
			   entry (ptr, char (*), ptr, fixed bin (35));
dcl	rcprm_find_resource_$reserve_proxy
			   entry (ptr, char (*), ptr, char (*), bit (72) aligned, fixed bin (35));
dcl	request_id_	   entry (fixed bin (71)) returns (char (19));
dcl	resource_info_$get_type
			   entry (char (*), bit (1), fixed bin (35));
dcl	resource_info_$get_primary_type
			   entry (char (*), char (*), fixed bin (35));

/* External Constants */

dcl	error_table_$bad_conversion
			   fixed bin (35) external;
dcl	error_table_$badcall   fixed bin (35) external;
dcl	error_table_$resource_unknown
			   fixed bin (35) external;
dcl	error_table_$reservation_failed
			   fixed bin (35) external;
dcl	error_table_$unimplemented_version
			   fixed bin (35) external;
dcl	error_table_$device_limit_exceeded
			   fixed bin (35) external;

dcl	access_operations_$rcp_reserve
			   bit (36) aligned ext static;

/* Builtin Functions and Conditions */

dcl	(addr, clock, hbound, lbound, null, ptr, rel, rtrim, size, unspec)
			   builtin;
dcl	(cleanup)		   condition;

	authorization = get_authorization_ ();
	system = "0"b;
	goto START;

sys:
     entry (a_resource_desc_ptr, a_resource_res_ptr, a_authorization, a_code);

dcl	a_authorization	   bit (72) aligned;

	authorization = a_authorization;
	system = "1"b;
	goto START;

START:
	operation = access_operations_$rcp_reserve;

	any_reserved = "0"b;
	rcpd_ptr = null ();
	rcs_ptr = null ();
	registry_directory = ">sc1>rcp";
	resource_desc_ptr = null ();
	resource_res_ptr = null ();
	mode_string_info_ptr = null ();
	special_rdesc_ptr = null ();
	special_resv_ptr = null ();

	call cu_$level_get (caller_level);

	on cleanup call cleanup_handler;

	call cu_$level_set (get_ring_ ());

	call copy_resource_and_reservation_structures;

	rcpd_ptr = rcp_pointers_$data ();
	rcs_ptr = rcp_pointers_$com_seg ();

	res_for = reservation_description.reserved_for;
	res_by = reservation_description.reserved_by;
	res_id = clock ();
	log_res_id = request_id_ (res_id);
	process_id = get_process_id_ ();

/*
   *       The following code will do some consistency checks and
   *  limit checks on the input structures before actually trying
   *  to make the reservations.
*/

	if ^system & (res_for ^= res_by) then
	     goto BAD_NAME;

	if resource_descriptions.version_no ^= resource_desc_version_1
	     | reservation_description.version_no ^= resource_res_version_1 then
	     goto BAD_VERSION;

	if resource_descriptions.n_items ^= reservation_description.n_items | resource_descriptions.n_items = 0 then
	     goto BAD_CALL;

	tot_tape_drives = 0;
	tot_disk_drives = 0;

	saved_code = 0;
	do i = 1 to Resource_count;			/* Check device limits. */

	     call resource_info_$get_primary_type ((resource_descriptions.item (i).type), primary_type, code);

	     if code ^= 0 then do;
		rsc_type = resource_descriptions.item (i).type;
		saved_code, callers_resource_desc_ptr -> resource_descriptions.item (i).status_code = code;
	     end;
	     else callers_resource_desc_ptr -> resource_descriptions.item (i).type = primary_type;

	     if primary_type = DEVICE_TYPE (TAPE_DRIVE_DTYPEX) then
		tot_tape_drives = tot_tape_drives + 1;

	     else if primary_type = DEVICE_TYPE (DISK_DRIVE_DTYPEX) then
		tot_disk_drives = tot_disk_drives + 1;

	end;					/* Check device limits. */

	if saved_code ^= 0 then
	     goto BAD_RESOURCE;

	if ^system then do;				/* Check all device usage for this process. */
	     do device_ptr = ptr (rcpd_ptr, rcpd.dtype (TAPE_DRIVE_DTYPEX).first_off)
		repeat ptr (device_ptr, device.next_off) while (rel (device_ptr) ^= ""b);

		if device.state ^= FREE & device.process_id = process_id then
		     tot_tape_drives = tot_tape_drives + 1;

	     end;

	     do device_ptr = ptr (rcpd_ptr, rcpd.dtype (DISK_DRIVE_DTYPEX).first_off)
		repeat ptr (device_ptr, device.next_off) while (rel (device_ptr) ^= ""b);
		if device.state ^= FREE & device.process_id = process_id then
		     tot_disk_drives = tot_disk_drives + 1;

	     end;
	end;					/* Check all device usage for this process. */

	if rcpd.dtype (TAPE_DRIVE_DTYPEX).max_concurrent < tot_tape_drives
	     | rcpd.dtype (DISK_DRIVE_DTYPEX).max_concurrent < tot_disk_drives then
	     goto TOO_MANY_DEVICES;

/*
   *       Process each resource in turn, doing all the work ourselves.
   *  Rcp_initializer_ is not called to manipulate rcp_data.  This is a
   *  break with the past protocol for RCP.
   *       The cleanup handler will cancel any reservations already
   *  made if any one fails.  This makes the reservation of a group
   *  of resources appear as an indivisible operation to the caller
   *  of this subroutine.
*/

	call rcp_lock_$lock (addr (rcpd.lock_info), code);

	if code ^= 0 then
	     goto BAD_ERROR;

	allocate resource_descriptions in (system_free_area) set (special_rdesc_ptr);
	allocate reservation_description in (system_free_area) set (special_resv_ptr);
	call copy_rdesc_and_resv ();
	do i = 1 to resource_descriptions.n_items;

	     special_rdesc_ptr -> resource_descriptions.item (1) = resource_descriptions.item (i);
	     special_resv_ptr -> reservation_description.reservation_group (1) =
		reservation_description.reservation_group (i);
	     rsc_type = resource_descriptions.item (i).type;
	     rsc_name = resource_descriptions.item (i).name;

	     if rsc_type = DEVICE_TYPE (TAPE_DRIVE_DTYPEX) then
		dtype_idx = TAPE_DRIVE_DTYPEX;

	     else if rsc_type = DEVICE_TYPE (DISK_DRIVE_DTYPEX) then
		dtype_idx = DISK_DRIVE_DTYPEX;

	     else if rsc_type = VOLUME_TYPE (TAPE_VOL_VTYPEX) | rsc_type = VOLUME_TYPE (DISK_VOL_VTYPEX) then
		dtype_idx = 0;

	     else goto BAD_RESOURCE;

	     if dtype_idx ^= 0 then do;		/* Reserve a device. */
		dtype_ptr = addr (rcpd.dtype (dtype_idx));

		call select_device (ret_ptr);

		if ret_ptr = null then
		     goto RESERVATION_FAILED;

		device_ptr = ret_ptr;

/*
   The device.group_id will be set later after we know that the reservation
   is possible.  This will avoid destroying information needed for
   pre-loaded volumes if the reservation fails.
*/

		device.reservation_id = res_id;
		device.reserved_by = res_by;

		if system then
		     device.process_id = "0"b;
		else device.process_id = process_id;

		device.current_authorization = authorization;

		device.state_time = clock ();
		device.state = RESERVED;

		any_reserved = "1"b;

		if ^system			/* For system, call is in rcp_pre_claim_ */
		     then
		     call ACCOUNT_WAKEUP (device_ptr, RCP_ACCTMSG_assign);

		call admin_gate_$syserr (JUST_LOG, "RCP: Reserved device ^a for ^a (id=^a)", device.device_name,
		     res_for, log_res_id);
	     end;					/* Reserve a device. */

	     else do;				/* Reserve a volume. */

		call select_volume (ret_ptr);

		if ret_ptr = null then
		     goto RESERVATION_FAILED;

		volume_ptr = ret_ptr;

		volume.volume_name = rsc_name;
		volume.group_id = res_for;

		do volume.vtypex = lbound (VOLUME_TYPE, 1) to hbound (VOLUME_TYPE, 1)
		     while (rsc_type ^= VOLUME_TYPE (volume.vtypex));
		end;				/* Look up the volume type index. */

		if volume.volume_name = "scratch" then
		     volume.volume_name = "";

		volume.reservation_id = res_id;
		volume.reserved_by = res_by;

		if system then
		     volume.process_id = "0"b;
		else volume.process_id = process_id;

		volume.current_authorization = authorization;

		volume.state_time = clock ();
		volume.state = RESERVED;

		any_reserved = "1"b;

		call admin_gate_$syserr (JUST_LOG, "RCP: Reserved volume ^a for ^a (id=^a)", volume.volume_name,
		     volume.group_id, log_res_id);
	     end;					/* Reserve a volume. */

	     call copy_back_rdesc_and_resv (i);
	end;					/* do loop */

/* If these reservations would leave too few tape drives for system processes,
   the reservation must fail. */

	num_free = 0;

	do device_ptr = ptr (rcpd_ptr, rcpd.dtype (TAPE_DRIVE_DTYPEX).first_off)
	     repeat ptr (device_ptr, device.next_off) while (rel (device_ptr) ^= ""b);
	     if device.state = FREE then
		num_free = num_free + 1;
	end;

	if num_free < rcpd.dtype (TAPE_DRIVE_DTYPEX).num_reserved then
	     goto RESERVATION_FAILED;

	do i = 1 to rcpd.tot_devices;			/* Set group id's for a successful reservation. */
	     if rcpd.device (i).reservation_id = res_id then
						/* Set the group id and interact with preloaded volumes. */
		rcpd.device (i).group_id = res_for;
	end;

	call rcp_lock_$unlock (addr (rcpd.lock_info));
	call free_storage;
	callers_resource_res_ptr -> reservation_description.reservation_id = res_id;
	a_code = 0;				/* Everything went all right. */
	call cu_$level_set (caller_level);
	return;

approve_schedule:
     entry (a_resource_desc_ptr, resource_no, registry_dir, reserver_info_ptr, reserver_chain, a_code);

/* This entry is called by rcprm_find_resource_$reserve when it wants to ask if its choice of
   an appropriate and accessible resource happens to be available at the required time. */
/* Currently, only tape or disk volumes will be checked, devices are handled at other places in RCP. */

dcl	(
	resource_no	   fixed bin,
	registry_dir	   char (*),
	reserver_info_ptr	   pointer,
	reserver_chain	   bit (18) unaligned
	)		   parameter;

dcl	error_table_$resource_reserved
			   fixed bin (35) external;

	resource_desc_ptr = a_resource_desc_ptr;	/* special copying not necessary since caller has done it */
	rsc_name = resource_descriptions.item (resource_no).name;
	call resource_info_$get_type ((resource_descriptions.item (resource_no).type), is_volume, code);
	if code ^= 0 then do;
	     a_code, resource_descriptions.item (resource_no).status_code = code;
	     return;
	end;

	if is_volume then do;			/* Check rcpdata for these. */
	     rcpd_ptr = rcp_pointers_$data ();

	     do i = 1 to rcpd.last_volume while (rcpd.volume (i).volume_name ^= rsc_name);
	     end;

	     if i > rcpd.last_volume then
		a_code = 0;
	     else if rcpd.volume (i).state = FREE then
		a_code = 0;
	     else a_code = error_table_$resource_reserved;
	end;					/* Check rcp data for these. */

	else a_code = 0;

	return;

BAD_CALL:
	call cleanup_handler;
	a_code = error_table_$badcall;
	return;

BAD_VERSION:
	call cleanup_handler;
	a_code = error_table_$unimplemented_version;
	return;

TOO_MANY_DEVICES:
	call cleanup_handler;
	a_code = error_table_$device_limit_exceeded;
	return;

BAD_RESOURCE:
	call cleanup_handler;
	a_code = error_table_$resource_unknown;
	return;

BAD_ERROR:
	call admin_gate_$syserr (JUST_LOG,
	     "RCP: An error locking rcpd for reservation for ^a ^[^s^;^xby^x^a^] (id=^a).", res_for, res_for = res_by,
	     res_by, log_res_id);
	call cleanup_handler;
	a_code = code;
	return;

RESERVATION_FAILED:
	call cleanup_handler;
	a_code = error_table_$reservation_failed;
	return;

BAD_NAME:
	call cleanup_handler;
	a_code = error_table_$reservation_failed;
	return;

BAD_ATTRIBUTE:
	call cleanup_handler;
	a_code = error_table_$bad_conversion;
	return;

select_device:
     proc (dptr);

/* Arguments */

dcl	dptr		   ptr;			/* Pointer to device entry we eventurally select. */

/* Local Variables */

dcl	MAX_AVAILABLE	   fixed bin (17) static internal options (constant) init (128);
dcl	1 AA_array	   (MAX_AVAILABLE),
	  2 name		   char (8),
	  2 last_time	   fixed bin (71),
	  2 dptr		   ptr;
dcl	loop		   fixed bin;
dcl	current_AA	   fixed bin;
dcl	start		   fixed bin;
dcl	found		   bit (1);

	call get_attr_values ();

	dptr = null;
	current_AA = 0;

	do device_ptr = ptr (rcpd_ptr, dtype.first_off) repeat ptr (device_ptr, device.next_off)
	     while (rel (device_ptr) ^= ""b & (current_AA <= MAX_AVAILABLE));

	     if device.state = FREE then		/* It's available. */
		if (model = 0 | device.model = model) then
		     if (tracks = 0 | device.qualifiers (1) = tracks) then
			if (density = "0"b | (unspec (device.qualifiers (2)) & density) = density) then
			     if (speed = ""b | (unspec (device.qualifiers (3)) & speed) ^= "0"b) then
				if (rsc_name = "" | device.device_name = rsc_name) then do;
				     start = 1;
				     found = "0"b;
				     do start = 1 to current_AA while (^found);
					if device.state_time < AA_array.last_time (start) then
					     found = "1"b;
				     end;
				     if found & (start ^= 1) then
					start = start - 1;
				     do loop = current_AA to start by -1;
					AA_array.dptr (loop + 1) = AA_array.dptr (loop);
					AA_array.name (loop + 1) = AA_array.name (loop);
					AA_array.last_time (loop + 1) = AA_array.last_time (loop);
				     end;
				     AA_array.dptr (start) = device_ptr;
				     AA_array.name (start) = device.device_name;
				     AA_array.last_time (start) = device.state_time;
				     current_AA = current_AA + 1;
				end;
	end;

/* Now let's see if we have access to any of the AA devices. */
/* The AA_array is sorted with the device used the longest */
/* time ago first.  So they will be checked in order of when */
/* they were used last. */

	found = "0"b;
	do loop = 1 to current_AA while (^found);
	     if have_access (AA_array.name (loop)) then
		found = "1"b;
	end;

/*  If we found one that we have access to then it was also audited in */
/*  rcprm_find_resource_.  If a specific device was not asked for then */
/*  no auditing was needed.  However, if a specific device was requested */
/*  and we did not have access to it then the auditing still needs to be */
/*  done.  It can't be done in rcprm_find_resource_ since that routine has */
/*  no way of knowing if the name it recieves comes from rcp_reserve_ or */
/*  the user.  So we audit it here. */

	if found then
	     dptr = AA_array.dptr (loop - 1);
	else if rsc_name ^= "" then
	     call audit (rsc_name);

     end select_device;

audit:
     proc (P_rsc_name);

dcl	P_rsc_name	   char (*);
dcl	1 auto_event_flags	   like audit_event_flags aligned;

	unspec (auto_event_flags) = ""b;
	auto_event_flags.grant = "0"b;
	auto_event_flags.priv_op = system;
	call access_audit_r1_$log_general ("rcp_reserve_", caller_level, unspec (auto_event_flags),
	     access_operations_$rcp_reserve, (rtrim (rsc_type) || " " || P_rsc_name), (error_table_$reservation_failed),
	     null (), 0);
	return;
     end audit;
%page;
select_volume:
     proc (vptr);

/* Arguments */

dcl	vptr		   ptr;			/* Pointer to the volume entry we eventually select. */
dcl	i		   fixed bin;		/* Index for rcpd. */


	vptr = null;

	if rsc_name = "scratch" then
	     rsc_name = "";

	if ^have_access (rsc_name) then
	     return;				/* Make sure user has access to this volume. */

	do i = 1 to rcpd.last_volume;

	     volume_ptr = addr (rcpd.volume (i));

	     if volume.volume_name = rsc_name & rsc_name ^= "" then do;
		if volume.state = FREE then do;
		     vptr = volume_ptr;
		end;

		else do;
		     vptr = null;
		     return;
		end;
	     end;

	     else do;
		if volume.volume_name = "" & volume.state = FREE then do;
		     if vptr = null then
			vptr = volume_ptr;
		end;
	     end;
	end;

	if vptr = null then do;
	     if rcpd.last_volume < rcpd.tot_volumes then do;
		rcpd.last_volume = rcpd.last_volume + 1;
		vptr = addr (rcpd.volume (rcpd.last_volume));
	     end;
	end;

     end select_volume;

have_access:
     proc (resource_name) returns (bit (1));

dcl	resource_name	   char (*);		/* Name of the resource in question. */

/* Local Variables */

dcl	actual_access	   bit (3);
dcl	local_code	   fixed bin (35);

dcl	addr		   builtin;


	if rcpd.modes.resource_mgmt_enabled then do;
	     special_rdesc_ptr -> resource_descriptions.item (1).name = resource_name;
	     special_rdesc_ptr -> resource_descriptions.item (1).given.name = "1"b;
/**** Set the validation level back up so RCPRM will make the correct access decisions. ****/
	     call cu_$level_set (caller_level);
	     if system then
		call rcprm_find_resource_$reserve_proxy (special_rdesc_ptr, registry_directory, special_resv_ptr,
		     (reserved_for), authorization, local_code);
	     else call rcprm_find_resource_$reserve (special_rdesc_ptr, registry_directory, special_resv_ptr,
		     local_code);
/**** Now set the validation level back so we can get on with our work. ****/
	     call cu_$level_set (get_ring_ ());
	end;
	else do;
	     req_info.user_id = res_for;
	     req_info.current_authorization = authorization;
	     req_info.validation_level = caller_level;
	     res_info.registry_dir = "";
	     res_info.registry_record_ptr, res_info.registry_switch_ptr = null ();
	     res_info.resource_type = rsc_type;
	     res_info.resource_name = resource_name;
	     call rcp_access_kernel_ (operation, addr (req_info), addr (res_info), actual_access, local_code);
	end;

	return (local_code = 0);

     end have_access;

get_attr_values:
     proc;

/*
   This routine takes the caller's attribute string and turns it into
   a form suitable for the rest of RCP.
*/

dcl	mode_idx		   fixed bin;

	model = 0;
	tracks = 0;
	density = "0"b;
	speed = ""b;

	if resource_descriptions.item (i).given.desired_attributes then do;
						/* Use what the user set. */
	     call cv_rcp_attributes_$to_string_rel ((resource_descriptions.item (i).type),
		(resource_descriptions.item (i).desired_attributes (*)), attributes, code);
	     if code ^= 0 then
		goto BAD_ERROR;
	     call mode_string_$parse ((attributes), get_system_free_area_ (), mode_string_info_ptr, code);
	     if code ^= 0 then
		goto BAD_ERROR;

	     do mode_idx = 1 to mode_string_info.number;
		if ^mode_string_info.modes (mode_idx).numeric_valuep then
		     goto BAD_ATTRIBUTE;
		if mode_string_info.modes (mode_idx).mode_name = "model" then
		     call model_mode_proc;
		else if resource_descriptions.item (i).type = DEVICE_TYPE (TAPE_DRIVE_DTYPEX) then do;
		     if mode_string_info.modes (mode_idx).mode_name = "track" then
			call track_mode_proc;
		     else if mode_string_info.modes (mode_idx).mode_name = "den" then
			call den_mode_proc;
		     else if mode_string_info.modes (mode_idx).mode_name = "speed" then
			call speed_mode_proc;
		end;
	     end;
	end;					/* Use what the user set. */
	return;

model_mode_proc:
	proc;

	     if model ^= 0 then
		goto BAD_ATTRIBUTE;

	     model = mode_string_info.modes (mode_idx).numeric_value;

	end model_mode_proc;

track_mode_proc:
	proc;

	     if tracks ^= 0 then
		goto BAD_ATTRIBUTE;

	     tracks = mode_string_info.modes (mode_idx).numeric_value;

	end track_mode_proc;

den_mode_proc:
	proc;

dcl	den_conversion_idx	   fixed bin;

dcl	den_conversion_table   (5) fixed bin internal static options (constant) init (200, 556, 800, 1600, 6250);
dcl	density_in_bits	   (5) bit (5) aligned internal static options (constant)
			   init ("10000"b, "01000"b, "00100"b, "00010"b, "00001"b);

	     do den_conversion_idx = lbound (den_conversion_table, 1) to hbound (den_conversion_table, 1)
		while (mode_string_info.modes (mode_idx).numeric_value ^= den_conversion_table (den_conversion_idx));
	     end;
	     if den_conversion_idx > hbound (den_conversion_table, 1) then
		goto BAD_ATTRIBUTE;
	     density = density | density_in_bits (den_conversion_idx);

	end den_mode_proc;

speed_mode_proc:
	proc;

dcl	speed_conversion_idx   fixed bin;

dcl	speed_conversion_table (3) fixed bin internal static options (constant) init (75, 125, 200);

dcl	speed_in_bits	   (3) bit (3) aligned internal static options (constant) init ("100"b, "010"b, "001"b);

	     do speed_conversion_idx = lbound (speed_conversion_table, 1) to hbound (speed_conversion_table, 1)
		while (speed_conversion_table (speed_conversion_idx)
		^= mode_string_info.modes (mode_idx).numeric_value);
	     end;
	     if speed_conversion_idx > hbound (speed_conversion_table, 1) then
		goto BAD_ATTRIBUTE;

	     speed = speed | speed_in_bits (speed_conversion_idx);

	end speed_mode_proc;

     end get_attr_values;

ACCOUNT_WAKEUP:
     procedure (a_devptr, a_action);

/*	This procedure is called to format an accounting message, and send it to the
   *	accounting process.  If the accounting event channel has not been set up, no message is sent.
*/


dcl	a_devptr		   ptr;			/* Pointer to rcp_data entry */
dcl	a_action		   fixed bin;		/* Accounting action */

dcl	wakeup_buf	   fixed bin (71);
dcl	1 auto_rcpamsg	   like rcp_account_msg aligned;

	unspec (auto_rcpamsg) = "0"b;

	auto_rcpamsg.device_user_procid = a_devptr -> device.process_id;
	auto_rcpamsg.rcp_data_relp = rel (a_devptr);
	auto_rcpamsg.devtype = a_devptr -> device.dtypex;
	auto_rcpamsg.action = a_action;

	unspec (wakeup_buf) = unspec (auto_rcpamsg);
	if rcpd.accounting_chan ^= 0 then
	     call hcs_$wakeup (rcpd.accounting_pid, rcpd.accounting_chan, wakeup_buf, (0));

     end ACCOUNT_WAKEUP;

cleanup_handler:
     proc;

/*
   This subroutine will clean up everything and cancel any
   reservations which may have already been made so that the
   reservation of a group of resources can appear as an indivisible
   operation.
*/

/*
   *       Scan through all device and volume entries cleaning up the ones
   *  with the appropriate reservation_id.  We will ignore the group_id
   *  since the reservation_id is assumed to be right.
*/

	call free_storage;
	if any_reserved then do;
	     do i = 1 to rcpd.tot_devices;

		if rcpd.device (i).reservation_id = res_id then do;
		     device_ptr = addr (rcpd.device (i));
		     call admin_gate_$syserr (JUST_LOG, "RCP: Cancelled device ^a for ^a (id=^a)", device.device_name,
			device.group_id, log_res_id);

		     if device.volume_name = "" then
			device.group_id = "";	/* Might be preloaded. */

		     device.reservation_id = 0;
		     device.reserved_by = "";
		     device.process_id = "0"b;
		     device.state_time = clock ();
		     device.state = FREE;
		end;

	     end;

	     do i = 1 to rcpd.last_volume;

		if rcpd.volume (i).reservation_id = res_id then do;
		     volume_ptr = addr (rcpd.volume (i));
		     call admin_gate_$syserr (JUST_LOG, "RCP: Cancelled volume ^a for ^a (id=^a)", volume.volume_name,
			volume.group_id, log_res_id);
		     volume.group_id = "";
		     volume.reservation_id = 0;
		     volume.reserved_by = "";
		     volume.process_id = "0"b;
		     volume.state_time = clock ();
		     volume.state = FREE;
		end;

	     end;
	end;


	if rcpd_ptr ^= null () then
	     call rcp_lock_$unlock (addr (rcpd.lock_info));

	call cu_$level_set (caller_level);

	if callers_resource_res_ptr ^= null () then
	     callers_resource_res_ptr -> reservation_description.reservation_id = 0b;

     end cleanup_handler;

free_storage:
     proc;

	if resource_desc_ptr ^= null () then do;
	     free resource_descriptions;
	     resource_desc_ptr = null ();
	end;
	if resource_res_ptr ^= null () then do;
	     free reservation_description;
	     resource_res_ptr = null ();
	end;
	if mode_string_info_ptr ^= null () then do;
	     free mode_string_info;
	     mode_string_info_ptr = null ();
	end;
	if special_rdesc_ptr ^= null () then do;
	     free special_rdesc_ptr -> resource_descriptions;
	     special_rdesc_ptr = null ();
	end;
	if special_resv_ptr ^= null () then do;
	     free special_resv_ptr -> reservation_description;
	     special_resv_ptr = null ();
	end;

     end free_storage;

copy_resource_and_reservation_structures:
     proc;

/**** Routine to copy the resource and reservation structures from the caller's stack to ours.  It is done
      pretty carefully to ensure that we get a consistent copy (i.e. no fiddling by the caller can cause us
      to screw up). ****/

dcl	based_bits	   (wordcount) bit (36) aligned based;
dcl	wordcount		   fixed bin (21);

	callers_resource_desc_ptr = a_resource_desc_ptr;
	callers_resource_res_ptr = a_resource_res_ptr;
	Resource_count = callers_resource_desc_ptr -> resource_descriptions.n_items;
	wordcount = size (resource_descriptions);
	allocate resource_descriptions in (system_free_area);
	resource_desc_ptr -> based_bits = callers_resource_desc_ptr -> based_bits;
	resource_descriptions.n_items = Resource_count;	/* avoid any tomfoolery on caller's part */
	wordcount = size (reservation_description);
	allocate reservation_description in (system_free_area);
	resource_res_ptr -> based_bits = callers_resource_res_ptr -> based_bits;

     end copy_resource_and_reservation_structures;
%page;
copy_rdesc_and_resv:
     proc ();

	special_rdesc_ptr -> resource_descriptions.n_items = 1;
	special_resv_ptr -> reservation_description.n_items = 1;
	special_rdesc_ptr -> resource_descriptions.version_no = resource_descriptions.version_no;
	special_resv_ptr -> reservation_description.version_no = reservation_description.version_no;
	special_resv_ptr -> reservation_description.reserved_for = reservation_description.reserved_for;
	special_resv_ptr -> reservation_description.reserved_by = reservation_description.reserved_by;
	special_resv_ptr -> reservation_description.reservation_id = reservation_description.reservation_id;
	special_resv_ptr -> reservation_description.group_starting_time = reservation_description.group_starting_time;
	special_resv_ptr -> reservation_description.asap_duration = reservation_description.asap_duration;
	special_resv_ptr -> reservation_description.flags = reservation_description.flags;
     end copy_rdesc_and_resv;
%page;
copy_back_rdesc_and_resv:
     proc (ii);

dcl	ii		   fixed bin;

	resource_descriptions.item (ii) = special_rdesc_ptr -> resource_descriptions.item (1);
	reservation_description.reservation_group (ii) =
	     special_resv_ptr -> reservation_description.reservation_group (1);
     end copy_back_rdesc_and_resv;
%page;
%include access_audit_eventflags;
%page;
%include resource_control_desc;
%page;
%include rcp_com_seg;
%page;
%include rcp_data;
%page;
%include rcp_account_msg;
%page;
%include rcp_resource_types;
%page;
%include rcp_requestor_info;
%page;
%include rcp_resource_info;
%page;
%include rcp_resource_states;
%page;
%include mode_string_info;
%page;
%include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   RCP: Reserved device devX_MM for RESERVER (id=RES_ID)

   S:	$log

   T:	$run

   M:	Device devX_MM has been reserved for RESERVER.

   A:	$ignore

  Message:
   RCP: Reserved volume volume_name for RESERVER (id=RES_ID)

   S:	$log

   T:	$run

   M:	Volume volume_name has been reserved for RESERVER.

   A:	$ignore

   Message:
   RCP: An error locking rcpd for reservation for RESERVED_FOR
            by RESERVER [if they're not the same] (id=RES_ID).

   S:	$log

   T:	$run

   M:     An error was found in the locking data for the resource.

   A:	$ignore

   Message:
   RCP: Cancelled device devX_MM for GRP_ID (id=RES_ID)

   S:	$log

   T:	$run

   M:	The reservation for the named device has been cancelled.

   A:	$ignore

   Message:
   RCP: Cancelled volume volume_name for GRP_ID (id=RES_ID)

   S:	$log

   T:	$run

   M:	The reservation for the named volume has been cancelled.

   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end rcp_reserve_;
