/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_resource_info_: proc ();


/*
   *
   *   This procedure and its entries constitue the interfaces in RCP to return information to RCPRM from rcp_data.
   *   The entries currently defined are:
   *
   *   current_access_class
   *	returns the current access class of the resource in question.  If it is in use (assigned/reserved)
   *	a pair of bit(1)s are returned to identify who is using the resource.
   *
   *
   *   Initially coded 3/79 by Michael R. Jordan
   *   Modifed during B2 cleanup by Chris Jones to stop using magic numbers.
   *
*/

/*		PARAMETERS		*/


dcl  access_class bit (72) aligned;			/* If in use, the current access class. */
dcl  code fixed bin (35);				/* Error code. */
dcl  in_use bit (1) aligned;				/* ON => Resource is in use (assigned/reserved). */
dcl  in_use_by_other bit (1) aligned;			/* ON => Resource in use by another process. */
dcl  rsc_name char (*);				/* Resource name. */
dcl  rsct char (*);					/* Resource type. */


/*		AUTOMATIC			*/


dcl  device_off bit (18);				/* Offset into rcp_data of device entry. */
dcl  i fixed bin;					/* Temporary index. */
dcl  this_process bit (36);				/* Process id of the current process. */
dcl  vi fixed bin;					/* Volume index. */


/*		ERROR CODES		*/


dcl  error_table_$resource_type_unknown fixed bin (35) ext;
dcl  error_table_$resource_unknown fixed bin (35) ext;


/*		ENTRIES CALLED		*/


dcl  get_process_id_ entry () returns (bit (36));
dcl  rcp_pointers_$data entry () returns (ptr);


/*		BUILTIN FUNCTIONS		*/


dcl  addr builtin;
dcl  hbound builtin;
dcl  ptr builtin;

current_access_class: entry (rsct, rsc_name, in_use, in_use_by_other, access_class, code);


/*
   *
   *   This entry tells RCPRM whether a resource is in use and if by another process.
   *
   *   Input parameters are:
   *
   *	(I) rsct -- resource type.
   *	(I) rsc_name -- resource name.
   *	(O) in_use -- ON => resource is assigned/reserved.
   *	(O) in_use_by_other -- ON => resource in use by another process.
   *	(O) access_class -- if in use, the access class.
   *	(O) code -- error code.
   *
   *
*/


	in_use = "0"b;				/* Not in use. */
	in_use_by_other = "0"b;			/* Not in use by anyone. */
	access_class = (72)"0"b;			/* No current access class. */
	code = 0;					/* No error, yet. */

	this_process = get_process_id_ ();

	rcpd_ptr = rcp_pointers_$data ();


/*

   Let's see if this resource type is one of the types we know (and love).

*/


	do i = 1 to hbound (DEVICE_TYPE, 1) ;
	     if rsct = DEVICE_TYPE (i)
	     then do;				/* Found it! */
		do device_off = rcpd.dtype (i).first_off repeat device.next_off while (device_off ^= (18)"0"b);
		     device_ptr = ptr (rcpd_ptr, device_off);
		     if device.device_name = rsc_name
		     then do;
			in_use = (device.state ^= FREE);
			in_use_by_other = in_use & (device.process_id ^= this_process);
			access_class = device.current_authorization;
			return;
		     end;
		end;
		code = error_table_$resource_unknown;
		return;
	     end;
	end;

	do i = 1 to hbound (VOLUME_TYPE, 1);
	     if rsct = VOLUME_TYPE (i)
	     then do;				/* Found the right one. */
		do vi = 1 to rcpd.last_volume;
		     volume_ptr = addr (rcpd.volume (vi));
		     if volume.volume_name = rsc_name
		     & volume.vtypex = i
		     then do;
			in_use = (volume.state ^= FREE);
			in_use_by_other = in_use & (volume.process_id ^= this_process);
			access_class = volume.current_authorization;
			return;
		     end;
		end;
		return;
	     end;
	end;


	code = error_table_$resource_type_unknown ;
	return;

%include rcp_data;
%page;
%include rcp_com_seg;
%page;
%include rcp_resource_types;
%page;
%include rcp_resource_states;

     end rcp_resource_info_;
