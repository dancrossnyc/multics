/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-07-06,Rauschelbach), approve(87-08-07,MCR7748),
     audit(87-11-11,Farley), install(87-11-30,MR12.2-1004):
     Changed to return error_table_$ai_restricted when access is denied for
     all cases, not just one. Removed signal to vfile_error condition as it
     was erroneously left from debugging.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_compute_aim_mode:
     procedure (a_req_info_ptr, a_res_info_ptr, a_aim_mode, a_error_code);

/*            This internal subroutine implements mandatory access
   *	    control (AIM) for RCP.
   *            Created 841112 by Maria M. Pozzo
   *
*/

/*                 ARGUMENT DATA                             */

dcl	a_req_info_ptr	   ptr;			/* (I) Points to requestor info */
dcl	a_res_info_ptr	   ptr;			/* (I) Points to resoruce info */
dcl	a_aim_mode	   bit (3);		/* (O) Raw AIM mode */
dcl	a_error_code	   fixed bin (35);		/* (O) Error code */

/*                 AUTOMATIC DATA                            */

dcl	aim_mode		   bit (3);		/* Local AIM mode */
dcl	temp_range	   (2) bit (72) aligned;
dcl	based_bits	   bit (bl * 9) aligned based (bp);
dcl	bl		   fixed bin (21);
dcl	error_code	   fixed bin (35);		/* Local error code */
dcl	bp		   ptr;
dcl	(addr, null, unspec)   builtin;

/*                 EXTERNAL ENTRIES                          */

dcl	aim_check_$range_in_range
			   entry ((2) bit (72) aligned, (2) bit (72) aligned) returns (bit (1) aligned);
dcl	aim_check_$greater_or_equal
			   entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	aim_check_$equal	   entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	hcs_$get_authorization entry (bit (72) aligned, bit (72) aligned);
dcl	read_allowed_	   entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	write_allowed_	   entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);

dcl	error_table_$ai_invalid_range
			   ext fixed bin (35) static;
dcl	error_table_$ai_out_range
			   ext fixed bin (35) static;
dcl	error_table_$ai_restricted
			   ext fixed bin (35) static;
dcl	error_table_$action_not_performed
			   ext fixed bin (35) static;
%page;
/* Copy arguments */

	requestor_info_ptr = a_req_info_ptr;
	resource_info_ptr = a_res_info_ptr;
	record_ptr = resource_info.registry_record_ptr;
	user_auth = requestor_info.current_authorization;

/* Initialize local variables */

	aim_mode = REW_ACCESS;			/* Assume REW initially */
	error_code, bl = 0;
	bp = null ();

/* If the resource is free, get the potential aim range found in the */
/* registry record; otherwise get the real aim range found in the */
/* registry record. */

	if registry_record.free then
	     call chase (registry_record.potential_aim_range_desc, bp, bl, error_code);
	else call chase (registry_record.aim_range_desc, bp, bl, error_code);
	if error_code ^= 0 then
	     goto MAIN_RETURN;
	if bl > 0 then addr (temp_range) -> based_bits = based_bits;
	else unspec (temp_range) = ""b;		/* no range, set to lowest possible */

/* If the low end of the AIM range is higher than us, then R access (and */
/* thus all access) is denied since we can't read up */

	if ^read_allowed_ (user_auth, temp_range (1)) then do;
	     aim_mode = N_ACCESS;
	     error_code = error_table_$ai_restricted;
	     goto MAIN_RETURN;
	end;

/* If the current authorization is not at the low end of the AIM range */
/* then E access is denied since allowing it anywhere else in the range */
/* could be a potential covert channel.  E access allows writing of */
/* protected attributes. */

	if ^aim_check_$equal (user_auth, temp_range (1)) then
	     aim_mode = aim_mode & RW_ACCESS;

/* If the high end of the AIM range is lower or disjoint then W access */
/* is denied since we can't write down.  We can still have R access and */
/* that is preserved, however, we must also deny E access since that */
/* allows writing of protected attributes and we have just been denied */
/* write access. */

	if ^write_allowed_ (user_auth, temp_range (2)) then
	     aim_mode = aim_mode & R_ACCESS;

MAIN_RETURN:
	if error_code ^= 0 then
	     aim_mode = N_ACCESS;
	a_aim_mode = aim_mode;
	a_error_code = error_code;
	return;

%page;
/* --------------------------------------------- */
permissible_aim:
     entry (max_range, aim_range, code);

/* This entry takes a pair of AIM access classes and determines
   whether the user should be allowed to place these
   AIM range on some RCP resource. */

dcl	(aim_range, max_range) (2) bit (72) aligned parameter;
dcl	user_auth		   bit (72) aligned;
dcl	code		   fixed bin (35);
dcl	rcp_priv		   bit (1) aligned;


	call hcs_$get_authorization (user_auth, (""b));
	rcp_priv = addr (user_auth) -> aim_template.privileges.rcp;

/* First and simplest check-- the high bounds must be >= the low bounds. */

	if ^aim_check_$greater_or_equal (max_range (2), max_range (1)) then do;
	     code = error_table_$ai_invalid_range;
	     goto permissible_aim_return;
	end;

	if ^aim_check_$greater_or_equal (aim_range (2), aim_range (1)) then do;
	     code = error_table_$ai_invalid_range;
	     goto permissible_aim_return;
	end;

/* Now check that the desired range "fits within" the max bounds. */

	if (^aim_check_$range_in_range (aim_range, max_range)) then do;
	     code = error_table_$ai_out_range;
	     goto permissible_aim_return;
	end;

/* Now we know that the ranges are self-consistent. */

	code = 0;

/* Now check to see whether this user has the ability to set these ranges. */

	if rcp_priv then
	     goto permissible_aim_return;

/* Make sure a user at a high authorization is not making a resource "suddenly
   appear" to someone at a lower authorization. */

	if ^write_allowed_ (user_auth, aim_range (1)) then do;
	     code = error_table_$ai_restricted;
	     goto permissible_aim_return;
	end;

/* We don't check upper bound.  Like creating directories, you can register a
   resource with an upper bound higher than you-- just don't expect to do
   anything else with it afterwards! */

permissible_aim_return:
	return;
%page;
/* ------------------------ */
chase:
     proc (descriptor, bp, bl, a_error_code);

dcl	(
	descriptor	   fixed bin (35),
	a_error_code	   fixed bin (35),
	bp		   pointer,
	bl		   fixed bin (21)
	)		   parameter;

dcl	1 rs		   like rs_info aligned automatic;
dcl	local_code	   fixed bin (35);

	a_error_code = 0;
	if descriptor = 0 then do;
	     bp = addr (bp);			/* gotta point somewhere */
	     bl = 0;
	     return;
	end;

	unspec (rs) = ""b;
	rs.version = rs_info_version_2;
	rs.locate_sw = "1"b;
	rs.descriptor = descriptor;
	local_code = 0;

	call iox_$control (resource_info.registry_switch_ptr, "record_status", addr (rs), local_code);
	if local_code ^= 0 then do;
	     a_error_code = error_table_$action_not_performed;
	     return;
	end;
	bl = rs.record_length;
	bp = rs.record_ptr;
	return;
     end chase;					/* ------------------------------- */
%page;
%include access_mode_values;
%page;
%include aim_template;
%page;
%include iox_dcls;
%page;
%include rcp_requestor_info;
%page;
%include rcp_resource_info;
%page;
%include rcp_registry;
%page;
%include rs_info;
     end rcp_compute_aim_mode;
