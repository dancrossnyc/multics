/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-11,Fawcett), approve(85-09-11,MCR6979),
     audit(85-12-02,CLJones), install(86-03-21,MR12.0-1033):
     Add MCA support
                                                   END HISTORY COMMENTS */

rcp_detach_:
     procedure;

/*	This program implements the rcp_$detach entry point.
   *	It is also an internal interface of RCP.
   *	Created on 12/11/74 by Bill Silver.
   *	Modified 1/79 by R.J.C. Kissel to fix the mount timer bug.
   *	Modified 830818 to delete admin_gate_$give_console... -E. A. Ranzenbach
   *	Modified 841005 to interface to rcp_control_ instead of rcp_initializer_ ... -M. M. Pozzo
   *      Modified 1985-04-03 by Paul Farley & RAF to add support for MCA as device_type (8).
   *
   *	This program contains the following entry points:
   *	     1.	detach  -  Detach and possible unassign a device.
   *	     2.	force_detach  -  Detach a device that is being forcedly unassigned.
*/

/*		ARGUMENT  DATA		*/

	dcl     arg_comment		 char (*);	/* (I) Caller's comment. */
	dcl     arg_disposition	 bit (*);		/* (I) ON => retain,  OFF => default. */
	dcl     arg_ecode		 fixed bin (35);	/* (O) error_table_ code. */
	dcl     arg_error_count	 fixed bin;	/* (I) User ring error count for attachment. */
	dcl     arg_rcp_id		 bit (36) aligned;	/* (I) ID used to identify RCS entry. */
	dcl     arg_rcse_ptr	 ptr;		/* (I) Pointer to attachment RCSE. */


/*		AUTOMATIC  DATA		*/

	dcl     disposition		 bit (1);		/* Assignment disposition. */
	dcl     device_off		 bit (18) aligned;
						/* Offset of RCSE device entry. */
	dcl     force_detach_entry	 bit (1);		/* set if force_detach entry */
	dcl     volume_off		 bit (18) aligned;
						/* Offset of RCSE volume entry. */
	dcl     rcp_id		 bit (36) aligned;	/* Used to copy rcp_id argument. */
	dcl     process_id		 bit (36) aligned;
						/* Process id requesting operation by RCP */

	dcl     device_name		 char (32);	/* Device name for rcp_control_ */
	dcl     operation		 bit (36) aligned;	/* Operation being requested of rcp_control_ */

	dcl     arcse_ptr		 ptr;		/* Pointer to assignment RCS entry. */
	dcl     caller_level	 fixed bin;	/* Caller's validation level. */
	dcl     dcode		 fixed bin (35);	/* A dummy error_table code. */
	dcl     ecode		 fixed bin (35);	/* error_table_ code. */
	dcl     error_count		 fixed bin (17);	/* Number of errors during attachment. */
	dcl     ioi_index		 fixed bin;	/* Used in final call to IOI. */


/*		BASED  DATA		*/

	dcl     1 arcse		 based (arcse_ptr) like rcse aligned;
						/* Used to reference assignment RCS entry. */


/*		EXTERNAL ENTRIES CALLED	*/

	dcl     cleanup		 condition;	/* Used to set up cleanup handler. */

	dcl     (addr, ptr)		 builtin;

	dcl     error_table_$bad_arg	 fixed bin (35) external;
	dcl     error_table_$force_unassign
				 fixed bin (35) external;

	dcl     access_operations_$rcp_error_count bit (36) aligned ext static;
	dcl     access_operations_$rcp_unassign bit (36) aligned ext static;

	dcl     admin_gate_$ioi_detach entry (fixed bin, fixed bin (35));
	dcl     admin_gate_$syserr	 entry options (variable);
	dcl     cu_$level_get	 entry (fixed bin);
	dcl     cu_$level_set	 entry (fixed bin);
	dcl     get_ring_		 entry returns (fixed bin);
	dcl     mca_attach_$finish_detach entry (fixed bin, bit (1), fixed bin (35));
	dcl     rcp_comment_	 entry (ptr);
	dcl     rcp_control_	 entry (bit (36) aligned, bit (18) aligned, bit (18) aligned, char (*), fixed bin (17),
				 bit (36) aligned, fixed bin (35));
	dcl     rcp_rcse_$free	 entry (ptr, fixed bin (35));
	dcl     rcp_validate_	 entry (bit (36) aligned, fixed bin, ptr, fixed bin (35));
	dcl     rcp_pointers_$data	 entry () returns (ptr);
	dcl     rcp_mount_timer_$reset entry (bit (18) aligned, fixed bin (35));
						/*						*/
%include rcp_data;
%include rcp_com_seg;

detach:
     entry (arg_rcp_id, arg_disposition, arg_error_count, arg_comment, arg_ecode);

/*	This entry implements the rcp_$detach entry point.  It is also called by
   *	RCP programs.  This entry point will detach the device associated with the
   *	specified RCSE entry.  Depending upon the disposition specified in the
   *	call and the disposition specified in the associated assignment RCSE we
   *	will also unassign the device.  In all cases where there is a volume
   *	attached on this drive we will unassign the volume.
*/

	call SETUP;
	force_detach_entry = "0"b;
	call cu_$level_get (caller_level);		/* Get caller's validation level. */
	on cleanup
	     begin;				/* Cleanup if any trouble. */
		call cu_$level_set (caller_level);	/* Reset validation level to caller level. */
	     end;
	call cu_$level_set (get_ring_ ());		/* Set validation level to RCP level. */

	rcp_id = arg_rcp_id;			/* Copy arguments. */
	disposition = arg_disposition;
	error_count = arg_error_count;

	call rcp_validate_ (rcp_id, caller_level, rcse_ptr, ecode);
	if ecode ^= 0				/* Is rcp_id OK? */
	then
	     if ecode = error_table_$force_unassign then
		;
	     else goto RETURN;			/* No. */

	if rcse.kind ^= 1				/* Is this an attachment entry? */
	then do;					/* No. */
		ecode = error_table_$bad_arg;
		goto RETURN;
	     end;

	if rcse.ioi_index ^= 0			/* Is device attached to IOI? */
	then do;					/* Yes, detach it. */
		call DETACH;			/* Detach and tell operator. */
		call admin_gate_$syserr (0, "RCP: Detached ^a from ^a", rcse.device_name, rcse.group_id);

		call rcp_mount_timer_$reset (rcse.device_off, dcode);
						/* Make sure and stop all check mount messages, ignore dcode. */

		if error_count > 0			/* Report any errors. */
		then
		     if rcse.volume_name = "" then
			call admin_gate_$syserr (0, "RCP: Errors (^a) = ^d", rcse.device_name, error_count);
		     else call admin_gate_$syserr (0, "RCP: Errors (^a, volume ^a) = ^d", rcse.device_name,
			     rcse.volume_name, error_count);
	     end;

	rcse.caller_comment = arg_comment;		/* Get comment argument. */
	call rcp_comment_ (rcse_ptr);			/* Type caller's comment. */

	arcse_ptr = ptr (rcse_ptr, rcse.rcse_off);	/* Get pointer to assignment RCS entry. */
	if ^disposition				/* Should we use default disposition? */
	then
	     disposition = arcse.disposition;		/* Yes, get it from assignment entry. */

	device_off,				/* No device or volume specified yet. */
	     volume_off = "0"b;

	if error_count > 0				/* Are there any errors to report? */
	then do;					/* Yes, for now just update error count. */
		operation = access_operations_$rcp_error_count;
		device_off = arcse.device_off;
	     end;

	if ^disposition				/* Should we unassign the device? */
	then do;					/* Yes, rcp_initializer_ will do it. */
		operation = access_operations_$rcp_unassign;
		device_off = arcse.device_off;	/* Get RCPD offset of device. */
		call rcp_rcse_$free (arcse_ptr, dcode);
		if ecode = 0			/* If no previous error use this error code. */
		then
		     ecode = dcode;
	     end;
	else do;
		arcse.rcse_off = "0"b;		/* No, just show that device no longer attached. */
		device_off = "0"b;			/* Don't unassign this device! */
	     end;

	if rcse.flags.volume			/* Is there a volume to unassign? */
	then do;					/* Yes, rcp_initializer_ will do it. */
		operation = access_operations_$rcp_unassign;
		volume_off = rcse.volume_off;		/* Get RCPD offset of volume. */
	     end;

	call rcp_rcse_$free (rcse_ptr, dcode);		/* Always free attachment entry. */
	if ecode = 0 then
	     ecode = dcode;

	if operation ^= ""b				/* Is there any reason to call rcp_control_? */
	then do;					/* Yes, something for it to do. */
		call rcp_control_ (operation, volume_off, device_off, device_name, error_count, process_id, ecode);
	     end;

RETURN:
	arg_ecode = ecode;
	call cu_$level_set (caller_level);
	return;					/*						*/
force_detach:
     entry (arg_rcse_ptr);

/*	This entry point is an internal interface of RCP.  It is called to
   *	detach a device that is being forcedly unassigned.  Freeing the
   *	attachment RCSE and the unassignment of the device and any volume
   *	mounted on it must be done by the caller.
*/

	call SETUP;
	force_detach_entry = "1"b;
	rcse_ptr = arg_rcse_ptr;			/* Get pointer to attachment RCSE. */

	if rcse.ioi_index = 0			/* Is device actually attached via IOI? */
	then
	     return;				/* No, we don't have to do anything. */

	call DETACH;				/* Now go and detach the device. */

/* Tell operator about force detachment. */
	call admin_gate_$syserr (0, "RCP: Force Detached ^a from ^a", rcse.device_name, rcse.group_id);
	return;





SETUP:
     procedure;

	device_off = ""b;
	volume_off = ""b;
	process_id = ""b;
	device_name = "";
	operation = ""b;
	error_count = 0;

     end SETUP;


DETACH:
     procedure;

/*	This procedure is called to perform the actual device detachment.
   *	What we have to do depends upon the device type.
*/
	ioi_index = rcse.ioi_index;			/* Save IOI index. */
	rcse.ioi_index = 0;				/* Make sure IOI never called again by RCP. */
	goto DTYPE (rcse.dtypex);			/* Process according to device type. */

DTYPE (1):					/* TAPE */
	call admin_gate_$ioi_detach (ioi_index, ecode);
	if rcp_pointers_$data () -> rcpd.modes.unload_on_detach then
	     call UNLOAD_DEVICE ();
	return;

DTYPE (2):					/* DISK */
	call admin_gate_$ioi_detach (ioi_index, ecode);
	call UNLOAD_DEVICE ();
	return;

DTYPE (8):					/* MCA */
	call mca_attach_$finish_detach (ioi_index, force_detach_entry, ecode);
DTYPE (3):					/* CONSOLE */
DTYPE (4):					/* PRINTER */
DTYPE (5):					/* PUNCH */
DTYPE (6):					/* READER */
DTYPE (7):					/* SPECIAL */
	call admin_gate_$ioi_detach (ioi_index, ecode);

     end DETACH;

/*

   This internal procedure gets the device_ptr for the device being detached
   and unloades that device by calling rcp_unload_.  This entry is
   normally called with rcp_data locked, but, in this case, the data base
   does not need to be locked.  This is due to the fact that no one can be
   using this device entry except this user until rcp_initializer_ resets
   its state.

*/


UNLOAD_DEVICE:
     proc ();


	dcl     rcp_pointers_$data	 entry () returns (ptr);
	dcl     rcp_unload_$unload_device
				 entry (ptr, bit (1));


	if rcse.rcse_off = "0"b then
	     return;				/* Cannot get to needed rcse. */
	arcse_ptr = ptr (rcse_ptr, rcse.rcse_off);	/* Get ptr to device rcse. */
	if arcse.device_off = "0"b then
	     return;				/* Cannot get to device entry. */
	device_ptr = ptr (rcp_pointers_$data (), rcse.device_off);
	device.flags.attached = "0"b;			/* Mark it as _n_o_t attached. */
	call rcp_unload_$unload_device (device_ptr, "0"b);/* Unload the device. */
	return;


     end UNLOAD_DEVICE;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   RCP: Detached DEVICE from PERSON.PROJ.T

   S:	$info

   T:	$run

   M:	The user of DEVICE has detached it.

   A:	If DEVICE is a disk drive, demount the volume on it and store it in the library.


   Message:
   RCP: Force Detached DEVICE from PERSON.PROJ.T

   S:	$info

   T:	$run

   M:	The user PERSON.PROJ.T has terminated abnormally.
   This may be due to an automatic logout or a process termination.

   A:	If DEVICE is a disk drive, demount the volume on it and store it in the library.


   Message:
   RCP: Errors (DEVICE) = NN

   S:	$info

   T:	$run

   M:	When DEVICE was detached, its error counter was nonzero.
   This may be due to a problem with DEVICE or with the user program.

   A:	$ignore


   Message:
   RCP: Errors (DEVICE, volume VOL) = NN

   S:	$info

   T:	$run

   M:	When DEVICE was detached, its error counter was nonzero.
   The errors may be due to a problem with DEVICE,
   with the volume VOLUME,
   or with the user program.

   A:	$ignore


   Message:
   RCP: Unloading volume VOLUME from device DEVICE

   S:	$info

   T:	$run

   M:	The specified VOLUME is being demounted by RCP.

   A:	Return the specified VOLUME to the library.


   Message:
   RCP: Manually unload volume VOLUME from device DEVICE

   S:	$beep

   T:	$run

   M:	RCP could not unload the specified volume from the device on which it was loaded.

   A:	Manually unload the volume from the device and return the volume to the library for storage.


   END MESSAGE DOCUMENTATION */

     end rcp_detach_;
