/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */

rcp_check_attach_:
     procedure (arg_rcp_id, arg_device_info_ptr, arg_comment, arg_ioi_index, arg_workspace_max, arg_timeout_max,
	arg_statex, arg_ecode);

/*	This program implements the rcp_$check_attach entry point.
   *	Created on 12/04/74 by Bill Silver.
   *	Accounting by B. Greenberg, 8/2/77.
   *	Modified on 09/19/77 by R.J.C. Kissel to check workspace.acs for big workspace access.
   *	Modified on 04/28/78 by Michael R. Jordan to allow preloaded volumes.
   *	Modified on 02/08/79 by Michael R. Jordan for MSS0500 support.
   *	Modified on 05/03/82 by E. N. Kittlitz to set ioi_timeout if UR device.
   *	Modified on 01/24/83 by J. A. Bush to copy the label type and density into the asignment rcse
   *	Modified 830818 to replace take_console call with console_free call... -E. A. Ranzenbach
   *      Modified 841009 to interface with rcp_control_ instead of rcp_initializer_... - M. M. Pozzo
   *      Modified 850131 general cleanup...M. M. Pozzo
*/

/****^  HISTORY COMMENTS:
  1) change(85-07-21,ABall), approve(86-02-21,MCR7346),
     audit(86-07-29,Farley), install(86-08-01,MR12.0-1108):
     Modified to check for null rcse_ptr before referencing through during
     error handling.
  2) change(85-09-11,Fawcett), approve(85-09-11,MCR6979),
     audit(85-12-02,CLJones), install(86-03-21,MR12.0-1033):
     Add MCA and FIPS support
                                                   END HISTORY COMMENTS */

/****^ The rcp_id is used to generate a pointer to the RCS entry that is
       associated with this attachment request.  We will look in this RCS
       entry to obtain the information that describes the results of the
       attachment operation.  In the current implementation any assignment
       needed is performed by the attach call.  The attachment itself involves
       setting up communication with IOI.  For some devices there is the
       additional problem of mounting volumes.  The caller may be told to go
       blocked and call us back when he wakes up.  When the attachment is
       finally completed we will call IOI to set the limits for this device
       and to promote the device to the caller's validation level.  Then we
       will return the information that he needs in order to perform I/O on
       this device.  */

/*		ARGUMENT  DATA		*/

dcl	arg_comment	   char (*);		/* (O) RCP comment. */
dcl	arg_device_info_ptr	   ptr;			/* (I) Pointer to device info structure. */
dcl	arg_ecode		   fixed bin (35);		/* (O) Return error_table_ code. */
dcl	arg_ioi_index	   fixed bin;		/* (O) Index used to communicate with IOI. */
dcl	arg_rcp_id	   bit (36) aligned;	/* (I) RCP ID. */
dcl	arg_statex	   fixed bin;		/* (O) Caller's attachment state index. */
dcl	arg_timeout_max	   fixed bin (71);		/* (O) Max time-out value in microseconds. */
dcl	arg_workspace_max	   fixed bin (19);		/* (O) max size of IOI workspace in words. */


/*		AUTOMATIC  DATA		*/

dcl	console_is_free	   bit (1);		/* ON => OK to attach console... */
dcl	volume_offset	   bit (18) aligned;	/* Offset to volume entry for rcp_control_ */
dcl	device_offset	   bit (18) aligned;	/* Offset to device entry for rcp_control_ . */
dcl	process_id	   bit (36) aligned;	/* Process id makin the request to RCP. */
dcl	rcp_id		   bit (36) aligned;	/* Used to copy rcp_id argument. */

dcl	device_name	   char (32);		/* Device name for rcp_control_ */
dcl	operation		   bit (36) aligned;	/* Type of operation being requested of rcp_control_ */

dcl	caller_level	   fixed bin;		/* Caller's validation level. */
dcl	dcode		   fixed bin (35);		/* Dummy error code. */
dcl	dtypex		   fixed bin;		/* Device type index. */
dcl	ecode		   fixed bin (35);		/* error_table_ code. */
dcl	error_count	   fixed bin (17);		/* Error count for attachments needed by rcp_control_. */
dcl	ioi_index		   fixed bin;		/* IOI internal device index. */
dcl	statex		   fixed bin;		/* Caller's attachment state index. */
dcl	timeout_max	   fixed bin (71);		/* Max time-out interval in microseconds. */
dcl	workspace_max	   fixed bin (19);		/* Max IOI workspace size in words. */

dcl	arcse_ptr		   ptr;			/* Pointer to assignment RCS entry. */
dcl	device_info_ptr	   ptr;			/* Pointer to device info */
dcl	device_pointer	   ptr;
dcl	device_vol_ptr	   ptr;
dcl	rcp_data_pointer	   ptr;

/*		BASED  DATA		*/

dcl	1 arcse		   based (arcse_ptr) like rcse aligned;
						/* Used to reference assignment RCS entry. */



/*		INTERNAL STATIC DATA	*/



/*		EXTERNAL ENTRIES CALLED	*/

dcl	cleanup		   condition;		/* Used to set up a cleanup handler. */

dcl	(null, ptr, substr)	   builtin;

dcl	(
	error_table_$bad_arg,
	error_table_$invalid_state
	)		   fixed bin (35) external;

dcl	access_operations_$rcp_account
			   bit (36) aligned ext static;

dcl	rcp_pointers_$data	   entry () returns (ptr);
dcl	admin_gate_$console_free
			   entry (char (4), bit (1));
dcl	admin_gate_$ioi_promote
			   entry (fixed bin, fixed bin, fixed bin (35));
dcl	admin_gate_$ioi_set_to_max
			   entry (fixed bin, fixed bin (71), fixed bin (35));
dcl	admin_gate_$ioi_set_ws_max
			   entry (fixed bin, fixed bin (19), fixed bin (35));
dcl	clock_		   entry returns (fixed bin (71));
dcl	cu_$level_get	   entry (fixed bin);
dcl	cu_$level_set	   entry (fixed bin);
dcl	get_ring_		   entry returns (fixed bin);
dcl	ioi_$timeout	   entry (fixed bin, fixed bin (71), fixed bin (35));
dcl	rcp_detach_$detach	   entry (bit (36) aligned, bit (*), fixed bin, char (*), fixed bin (35));
dcl	rcp_device_info_$set   entry (ptr, ptr, fixed bin (35));
dcl	rcp_disk_		   entry (ptr, fixed bin (35));
dcl	rcp_control_	   entry (bit (36) aligned, bit (18) aligned, bit (18) aligned, char (*), fixed bin (17),
			   bit (36) aligned, fixed bin (35));
dcl	rcp_ioi_attach_	   entry (ptr, fixed bin (35));
dcl	rcp_tape_		   entry (ptr, fixed bin (35));
dcl	rcp_validate_	   entry (bit (36) aligned, fixed bin, ptr, fixed bin (35));
						/*						*/
%include rcp_com_seg;
%include rcp_data;

	volume_offset = ""b;
	device_offset = ""b;
	process_id = ""b;
	device_name = "";
	error_count = 0;
	ecode = 0;

	call cu_$level_get (caller_level);		/* Save caller's validation level. */
	on cleanup
	     begin;				/* If trouble cleanup. */
	     call cu_$level_set (caller_level);		/* Reset validation level. */
	end;
	call cu_$level_set (get_ring_ ());		/* Set validation level to RCP level. */

	rcp_id = arg_rcp_id;			/* Copy arguments. */
	device_info_ptr = arg_device_info_ptr;

	call rcp_validate_ (rcp_id, caller_level, rcse_ptr, ecode);
	if ecode ^= 0				/* Is RCP ID OK? */
	     then
	     goto ERROR;				/* No. */

	if rcse.kind ^= 1				/* Is this a device attachment RCS entry? */
	then do;					/* No, can't go on. */
	     ecode = error_table_$bad_arg;
	     goto ERROR;
	end;

	ecode = rcse.ecode;				/* Get code generated by rcp_control_. */
	if ecode ^= 0				/* Was there any error. */
	     then
	     goto ERROR;

	arcse_ptr = ptr (rcse_ptr, rcse.rcse_off);	/* Get pointer to assignment RCSE. */

	goto ATTACHMENT_STATE (rcse.state);		/* Check current state of attachment. */

ATTACHMENT_STATE (0):				/* FREE */
ATTACHMENT_STATE (1):				/* ASSIGNING */
ATTACHMENT_STATE (4):				/* ATTACHED */
ATTACHMENT_STATE (5):				/* COMPLETED */
	ecode = error_table_$invalid_state;
	goto ERROR;

ATTACHMENT_STATE (2):				/* ASSIGNED */
	if arcse.state ^= 5				/* Has assignment been completed? */
	then do;					/* No. */
	     ecode = arcse.ecode;			/* Get assignment error code. */
	     if ecode ^= 0				/* Any error in assignment? */
		then
		goto ERROR;			/* Yes, abort attachment. */
	     arcse.state = 5;			/* Indicate that assignment has been checked. */
	     arcse.state_time = clock_ ();
	end;
	rcse.state = 3;				/* Now attaching. */
	rcse.device_name = arcse.device_name;		/* Get name of assigned device. */
	rcse.device_off = arcse.device_off;		/* Copy rcp_data offset of assigned device. */
	rcse.flags.fips = arcse.flags.fips;		/* Copy fips flag */
	rcse.flags.no_protect = arcse.flags.no_protect;	/* Copy no_protect flag */
	rcse.flags.opr_int_available = arcse.flags.opr_int_available;
						/* Copy opr_int_available flag */

ATTACHMENT_STATE (3):				/* ATTACHING */
	dtypex = rcse.dtypex;			/* Get device type. */
	call ATTACH;				/* Perform the actual attachment. */
	if ecode ^= 0 then
	     goto ERROR;
	if rcse.state = 3				/* Are we still attaching? */
	then do;					/* Yes. */
	     statex = 1;				/* Caller should block and then call back. */
	     goto RETURN;
	end;

	ioi_index = rcse.ioi_index;			/* No, we can now complete the attachment. *. */
	rcs_ptr = ptr (rcse_ptr, "0"b);

	if (rcse.flags.volume) &			/* Did we assign a volume? */
	     (rcse.volume_name ^= "scratch")		/* That was not a scratch volume? */
	then do;					/* Yes, remember volume in assignment RCS entry. */
	     arcse.flags.volume = "1"b;
	     arcse.volume_name = rcse.volume_name;
	     arcse.label_type = rcse.label_type;
	     arcse.volume_density_index = rcse.volume_density_index;
	     arcse.need_auth = rcse.need_auth;
	end;

/*	Now complete the attachment by calling IOI to set the workspace and
   *	time-out limits and to promote the device.
*/
	if rcse.flags.priv				/* If  privileged attachment,      */
	     | rcse.flags.system			/* Or  system user.      */
	     then
	     workspace_max = rcs.ws_pmaxs (dtypex);	/* Then  give user large IOI workspace max. */

	else do;					/* A normal user. */
	     if USER_ON_WS_ACS ("01010"b) then
		workspace_max = rcs.ws_pmaxs (dtypex);	/* Then  give user large IOI workspace max. */
	     else workspace_max = rcs.ws_maxs (dtypex);	/* Else  give user normal IOI workspace max. */
	end;

	rcse.workspace_max = workspace_max;
	call admin_gate_$ioi_set_ws_max (ioi_index, workspace_max, ecode);
	if ecode ^= 0 then
	     goto ERROR;

	rcse.timeout_max,				/* Get and set max IOI time-out interval. */
	     timeout_max = rcs.to_maxs (dtypex);
	call admin_gate_$ioi_set_to_max (ioi_index, timeout_max, ecode);
	if ecode ^= 0 then
	     goto ERROR;
	if dtypex = 4 |				/* PRINTER */
	     dtypex = 5 |				/* PUNCH */
	     dtypex = 6				/* READER */
	then do;
	     call ioi_$timeout (ioi_index, timeout_max, ecode);
	     if ecode ^= 0 then
		go to ERROR;
	end;

	call admin_gate_$ioi_promote (ioi_index, rcse.caller_level, ecode);
	if ecode ^= 0 then
	     goto ERROR;

/* Return info about assigned device.  Passing a copy of arg_device_info_ptr is
   OK since rcp_device_info_ uses it to base a write-only structure. */

	call rcp_device_info_$set (device_info_ptr, ptr (rcse_ptr, rcse.rcse_off), ecode);
	if ecode ^= 0 then
	     goto ERROR;

	rcse.state = 5;				/* Attachment is now completed. */
	statex = 0;				/* Tell caller that it is complete. */
	arg_ioi_index = ioi_index;			/* Now we can return all the other info. */
	arg_workspace_max = workspace_max;
	arg_timeout_max = timeout_max;

/* Prepare for calling rcp_control_ */
	operation = access_operations_$rcp_account;
	volume_offset = rcse.volume_off;
	device_offset = rcse.device_off;
	call rcp_control_ (operation, volume_offset, device_offset, device_name, error_count, process_id, ecode);

	goto RETURN;

ERROR:						/* Abort this attachment. */
	if rcse_ptr ^= null () then
	     call rcp_detach_$detach (rcse.rcp_id, "0"b, 0, "", dcode);
	statex = 3;				/* Return error state. */

RETURN:						/* Return command args, reset validation level. */
	arg_comment = " ";
	arg_statex = statex;
	arg_ecode = ecode;
	call cu_$level_set (caller_level);
	return;					/*						*/
ATTACH:
     procedure;

/*	This procedure is called to perform the actual attachment via IOI.
   *	The processing to be done depends upon the device type.
*/

	goto DEVICE_TYPE (dtypex);			/* Process depending upon device type. */

DEVICE_TYPE (1):					/* TAPE */
	rcse.model = arcse.model;			/* Need model for tape attachment/mounting. */

	if rcse.flags.volume			/* Determine if preloading is allowed for this attachement. */
	     & arcse.flags.volume & rcse.volume_name = arcse.volume_name then
	     rcse.flags.preloaded = arcse.preload_allowed;

	call rcp_tape_ (rcse_ptr, ecode);		/* Perform tape attachment and mounting. */
	rcp_data_pointer = rcp_pointers_$data ();
	device_pointer = ptr (rcp_data_pointer, rcse.device_off);
	device_pointer -> device.flags.attached = "1"b;
	if rcse.flags.volume then
	     device_vol_ptr = ptr (rcp_data_pointer, rcse.volume_off);
	return;

DEVICE_TYPE (2):					/* DISK */
	rcse.model = arcse.model;			/* Need model for tape attachment/mounting. */

	if rcse.flags.volume			/* Determine if preloading is allowed for this attachement. */
	     & arcse.flags.volume & rcse.volume_name = arcse.volume_name then
	     rcse.flags.preloaded = arcse.preload_allowed;

	rcse.flags.not_removable_media = arcse.flags.not_removable_media;
	call rcp_disk_ (rcse_ptr, ecode);		/* Perform disk attachment and mounting. */
	rcp_data_pointer = rcp_pointers_$data ();
	device_pointer = ptr (rcp_data_pointer, rcse.device_off);
	device_pointer -> device.flags.attached = "1"b;
	if rcse.flags.volume then
	     device_vol_ptr = ptr (rcp_data_pointer, rcse.volume_off);
	return;

DEVICE_TYPE (3):					/* CONSOLE */
	call admin_gate_$console_free (substr (rcse.device_name, 1, 4), console_is_free);
	if ^console_is_free then do;
	     ecode = error_table_$invalid_state;
	     return;
	end;
DEVICE_TYPE (4):					/* PRINTER */
DEVICE_TYPE (5):					/* PUNCH */
DEVICE_TYPE (6):					/* READER */
DEVICE_TYPE (7):					/* SPECIAL */
DEVICE_TYPE (8):					/* MCA */
	call rcp_ioi_attach_ (rcse_ptr, ecode);		/* Attach the device in ring 0 via IOI. */
	rcse.state = 4;				/* Actual attachment has been performed. */

     end ATTACH;

/**/

USER_ON_WS_ACS:
     proc (test_access) returns (bit (1));

dcl	test_access	   bit (5);		/* access we are testing for, normally "rw" */
dcl	actual_access	   fixed bin (5);		/* access returned by hcs_$get_user_effmode. */

dcl	hcs_$get_user_effmode  entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin, fixed bin (5),
			   fixed bin (35));

/* Note above that the "aligned" attributes are there only to get around the fact */
/* that the acs_directory and group_id are declared aligned in an include file.   */


dcl	bit		   builtin;

	call hcs_$get_user_effmode (rcs.acs_directory, "workspace.acs", rcse.group_id, rcse.caller_level, actual_access,
	     ecode);

	if ecode ^= 0 then do;
	     ecode = 0;				/* This isn't really an error */
	     return ("0"b);				/* Report failure */
	end;

	if (bit (actual_access, 5) & test_access) = test_access then
	     return ("1"b);				/* This process has at least "rw" access */
	else return ("0"b);				/* This process does not have "rw" access */

     end USER_ON_WS_ACS;

     end rcp_check_attach_;
