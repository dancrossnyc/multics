/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-06-08,Rauschelbach), approve(87-06-26,MCR7713),
     audit(87-07-08,Farley), install(87-07-15,MR12.1-1041):
     A check for access when changing potential attributes was added.  A fix to
     make the clear_resource command work was added.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_operation_access:
     procedure (a_operation, a_resource_type, a_rm_on, a_effmode, a_error_code);

/*     This program determines if the subject has enough access to
   *     the object to perform the requested RCP operation.
   *     Created 841109 by Maria M. Pozzo
   *
*/

/*                    ARGUMENT DATA                           */

dcl	a_operation	   bit (36) aligned;	/* (I) Requested RCP operation */
dcl	a_resource_type	   char (32);		/* (I) Resource type for requested operation */
dcl	a_rm_on		   bit (1);		/* (I) Resource Management enabled */
dcl	a_effmode		   bit (3);		/* (I/O) Current effective mode of the subject to the object(I) - resultant mode (O) */
dcl	a_error_code	   fixed bin (35);		/* (O) Error code */

/*                   AUTOMATIC DATA                           */

dcl	is_volume		   bit (1);
dcl	rm_on		   bit (1);		/* Resource management enabled */
dcl	effmode		   bit (3);		/* Subjects access to object depending on operation */
dcl	operation		   bit (36) aligned;
dcl	base_op		   bit (36) aligned;

dcl	resource_type	   char (32);		/* Resource type */

dcl	error_code	   fixed bin (35);		/* Internal error code */

dcl	operation_ptr	   ptr;

dcl	1 en_access_op	   like encoded_access_op based (operation_ptr) aligned;

dcl	addr		   builtin;

/*                       EXTERNAL ENTRIES             */

dcl	error_table_$insufficient_access
			   fixed bin (35) external;
dcl	error_table_$unsupported_operation
			   fixed bin (35) external;
dcl	access_operations_$rcp_deregister
			   bit (36) aligned external;
dcl	access_operations_$rcp_release
			   bit (36) aligned external;
dcl	access_operations_$rcp_reserve
			   bit (36) aligned external;
dcl	access_operations_$rcp_preload
			   bit (36) aligned external;
dcl	access_operations_$rcp_assign_read
			   bit (36) aligned external;
dcl	access_operations_$rcp_assign_write
			   bit (36) aligned external;
dcl	access_operations_$rcp_status
			   bit (36) aligned external;
dcl	access_operations_$rcp_set
			   bit (36) aligned external;
dcl	access_operations_$rcp_set_access
			   bit (36) aligned external;
dcl	access_operations_$rcp_clear
			   bit (36) aligned external;
dcl	access_operations_$rcp_delete_device
			   bit (36) aligned external;
dcl	access_operations_$rcp_add_device
			   bit (36) aligned external;

dcl	resource_info_$get_type
			   entry (char (*), bit (1), fixed bin (35));

/* Copy input arguments */

	operation = a_operation;
	base_op = basic_operation (operation);
	addr (base_op) -> encoded_access_op.detailed_operation = 0;
	operation_ptr = addr (operation);
	resource_type = a_resource_type;
	rm_on = a_rm_on;
	effmode = a_effmode;

/* Initialize local variables */

	error_code = 0;
	call resource_info_$get_type (resource_type, is_volume, error_code);
	ops_ptr = addr (en_access_op.detailed_operation);

/*  Is it a volume - most operations require R or RW to volumes */

	if is_volume then do;

/*  Need at least R to reserve a volume. */
/*  Need R to assign a volume for reading, need R to preload a volume. */

	     if base_op = access_operations_$rcp_reserve | base_op = access_operations_$rcp_assign_read
		| base_op = access_operations_$rcp_preload then do;
		call require_access (R_ACCESS);
		goto MAIN_RETURN;
	     end;

/*  Need at least RW to assign a volume for writing */

	     else if base_op = access_operations_$rcp_assign_write then do;
		call require_access (RW_ACCESS);
		goto MAIN_RETURN;
	     end;

	end;

	else do;

/* Need at least RW to reserve a device */
/* Need at least RW to assign a device */
/* Need at least RW to preload a device */
/* Need R to add or delete a device, this is a privileged operation. */

	     if base_op = access_operations_$rcp_reserve | base_op = access_operations_$rcp_assign_write
		| base_op = access_operations_$rcp_preload then do;
		call require_access (RW_ACCESS);
		goto MAIN_RETURN;
	     end;
	     else if base_op = access_operations_$rcp_delete_device | base_op = access_operations_$rcp_add_device
	     then do;
		call require_access (R_ACCESS);
		goto MAIN_RETURN;
	     end;

	end;

/*  The following operations are not resource-type specific. */

/*  SET_ACCESS */
/*  There are two kinds of set_access operations.  */
/*  The first type is the setting of access_class_range or */
/*  the potential access_class_range.  The call must have been */
/*  made through a privileged gate and have REW access. The second */
/*  type is setting the acs_path.  The caller either 1) must be the */
/*  resource owner and have REW access, or 2) have made the call through */
/*  a privileged gate and have REW access. */

	if base_op = access_operations_$rcp_set_access then do;
	     if detailed_operation.potential_aim_range | detailed_operation.aim_range then
		if detailed_operation.priv_gate_call then
		     call require_access (REW_ACCESS);
		else error_code = error_table_$insufficient_access;
	     else if detailed_operation.acs_path then
		if detailed_operation.owner | detailed_operation.priv_gate_call then
		     call require_access (REW_ACCESS);
		else error_code = error_table_$insufficient_access;
	end;

/* SET */
/* There are several other types of Set operations.  */
/* Setting of the comment requires E and therefore REW access */
/* Setting of release_lock, lock, location, or charge_type all */
/* require the call be made through a privileged gate and the */
/* user have E and therefore REW access.  All other sets require */
/* RW access. */


	else if base_op = access_operations_$rcp_set then do;
	     if detailed_operation.comment then
		call require_access (REW_ACCESS);
	     else if detailed_operation.release_lock | detailed_operation.usage_lock | detailed_operation.location
		| detailed_operation.charge_type | detailed_operation.potential_attributes then
		if detailed_operation.priv_gate_call then
		     call require_access (REW_ACCESS);
		else error_code = error_table_$insufficient_access;
	     else call require_access (RW_ACCESS);
	end;

/* RELEASE */
/* This operation requires 1) the user be the resource owner */
/* and have REW access OR 2) the call be made through a privileged gate */
/* and the user have REW. */

	else if base_op = access_operations_$rcp_release then do;
	     if detailed_operation.owner | detailed_operation.priv_gate_call then
		call require_access (REW_ACCESS);
	     else error_code = error_table_$insufficient_access;
	end;

/* DEREGISTER */
/* Must have REW to deregister or clear a resource. These are privileged operations. */

	else if base_op = access_operations_$rcp_deregister | base_op = access_operations_$rcp_clear then
	     call require_access (REW_ACCESS);

/* STATUS */
/* Only need R access to status a resource. */

	else if base_op = access_operations_$rcp_status then
	     call require_access (R_ACCESS);

	else error_code = error_table_$unsupported_operation;


MAIN_RETURN:
	if error_code ^= 0 then
	     a_effmode = "000"b;
	a_error_code = error_code;

	return;
%page;
require_access:
     proc (mode);

dcl	mode		   bit (3);

	if (effmode & mode) = mode then
	     return;
	else error_code = error_table_$insufficient_access;
	return;

     end require_access;
%page;
basic_operation:
     proc (oper) returns (bit (36) aligned);

dcl	oper		   bit (36) aligned;
dcl	return_arg	   bit (36) aligned;

	return_arg = oper;
	addr (return_arg) -> encoded_access_op.detailed_operation = 0;
	return (return_arg);

     end basic_operation;

%page;
%include access_audit_encoded_op;
%page;
%include access_mode_values;
%page;
%include rcp_ops;
%page;
%include rcp_resource_types;

     end rcp_operation_access;


