/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-07-10,EJSharpe), approve(86-02-20,MCR7304),
     audit(86-03-27,CLJones), install(86-04-23,MR12.0-1044):
     added security auditing
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_attach_lv_:
     procedure (arg_volume_info_ptr, arg_event_id, arg_rcp_id, arg_ecode);

/*	This program implements the rcp_$attach_lv entry point.
   *	Created on 06/08/76 by Bill Silver.
   *	Moddfied 09/13/76 by Bernard Greenberg for lv_request_.
   *	Modified 84-09-04 by EJ Sharpe - rename hdx refs to volume_registration_mgr_
   *	Modified 84-10-30 by EJ Sharpe - new volume_registration_mgr_$get_access uses bit(36) instead of fixed(5)
   *	Modified 12/84 by Chris Jones for B2 security cleanup.
*/

/*
   *	This program is called to attach one logical volume.
   *	The volume must be registered and this process must have RW access to it.
   *	The program rcp_lv_ will be call to add this lv to a list of lvs
   *	that are attached for this process.  The lv will be attached by rcp_attach_lv_.
   Calls to rcp$check_attach_lv interrogate the global table.
*/

/*		ARGUMENT  DATA		*/

dcl	arg_volume_info_ptr	   ptr;			/* (I) Pointer to logical volume info structure. */
dcl	arg_event_id	   fixed bin (71);		/* (I) Caller's event channel ID. */
dcl	arg_rcp_id	   bit (36) aligned;	/* (0) ID for this logical volume attachment. */
dcl	arg_ecode		   fixed bin (35);		/* (O) error_table_ code. */

/*		AUTOMATIC  DATA		*/

dcl	access		   bit (36) aligned;	/* Access mode to logical volume. */
dcl	1 auto_event_flags	   aligned like audit_event_flags;
dcl	1 auto_lv_info	   aligned like lv_info;	/* local copy of lv info */
dcl	caller_level	   fixed bin;		/* Caller's validation level. */
dcl	ecode		   fixed bin (35);		/* error_table_ code. */
dcl	event_id		   fixed bin (71);		/* Caller's event channel ID */
dcl	lvid		   bit (36) aligned;	/* ID that identifies logical volume. */
dcl	lv_access_range	   (2) bit (72) aligned;	/* access range of volume */
dcl	pub_bit		   bit (1) aligned;		/* from volume_registration_mgr_$get_access - we ignore it */
dcl	rcp_id		   bit (36) aligned;	/* ID for this attach request. */

/*		EXTERNAL ENTRIES CALLED	*/

dcl	access_operations_$attach_lv
			   bit (36) aligned external;
dcl	error_table_$resource_assigned
			   fixed bin (35) external;
dcl	error_table_$resource_bad_access
			   fixed bin (35) external;
dcl	error_table_$unimplemented_version
			   fixed bin (35) external;

dcl	access_audit_r1_$log_obj_class_range
			   entry options (variable);
dcl	cu_$level_get	   entry (fixed bin);
dcl	cu_$level_set	   entry (fixed bin);
dcl	get_ring_		   entry () returns (fixed bin (3));
dcl	volume_registration_mgr_$find_lvid
			   entry (char (*), bit (36) aligned, fixed bin (35));
dcl	volume_registration_mgr_$get_access_for_attach
			   entry (char (*), fixed bin, bit (36) aligned, bit (1) aligned, (2) bit (72) aligned,
			   fixed bin (35));
dcl	rcp_lv_$add_lv	   entry (char (*) aligned, bit (36) aligned, fixed bin (71), bit (36) aligned,
			   fixed bin (35));

/*	Builtins and conditions	*/

dcl	addr		   builtin;
dcl	null		   builtin;
dcl	string		   builtin;

dcl	cleanup		   condition;

/*	Begin rcp_attach_lv_ */

	call cu_$level_get (caller_level);		/* Save caller's validation level. */

	on cleanup call cu_$level_set (caller_level);

	call cu_$level_set (get_ring_ ());		/* Set validation level to RCP level. */

	rcp_id = "0"b;				/* Initialize RCP ID (rcp_id). */
	event_id = arg_event_id;			/* Copy caller's event channel */

	lv_info_ptr = addr (auto_lv_info);
	lv_info = arg_volume_info_ptr -> lv_info;	/* copy lv_info structure */
	if lv_info.version_num ^= rlvi_version_1 then do; /* Wrong version of lv info structure. */
	     ecode = error_table_$unimplemented_version;
	     goto RETURN;
	end;

	call volume_registration_mgr_$find_lvid ((lv_info.volume_name), lvid, ecode);
	if ecode ^= 0 then
	     goto RETURN;				/* Volume is not registered. */

	/*** here's the decision whether to proceed with the attach.  This
	     code really should be in an "lv_access_kernel_" */

	string (auto_event_flags) = ""b;
	call volume_registration_mgr_$get_access_for_attach ((lv_info.volume_name), caller_level, access, pub_bit,
	     lv_access_range, ecode);
	if ecode ^= 0 then do;
	     call audit_it;
	     goto RETURN;				/* Error getting access to volume. */
	end;

	if (access & RW_ACCESS) ^= RW_ACCESS then do;	/* Caller does not have RW access to volume. */
	     ecode = error_table_$resource_bad_access;
	     call audit_it;
	     goto RETURN;
	end;
	else do;
	     auto_event_flags.grant = "1"b;
	     call audit_it;
	end;

	call rcp_lv_$add_lv (lv_info.volume_name, lvid, event_id, rcp_id, ecode);
	if ecode ^= 0				/* Error adding lv to per-process list? */
	     then
	     if ecode = error_table_$resource_assigned then
		ecode = 0;			/* Ok if already attached. */


RETURN:
	arg_rcp_id = rcp_id;			/* Set return arguments. */
	arg_ecode = ecode;
	call cu_$level_set (caller_level);		/* Reset validation level to caller level. */
	return;

audit_it:
     procedure ();

dcl	volname_str	   char (64);

	volname_str = "logical volume " || lv_info.volume_name;

	call access_audit_r1_$log_obj_class_range ("rcp_attach_lv_", caller_level, string (auto_event_flags),
	     access_operations_$attach_lv, lv_access_range, volname_str, ecode, null (), (0));
	return;

     end audit_it;

%include access_mode_values;
%page;
%include rcp_lv_info;
%page;
%include access_audit_eventflags;

     end rcp_attach_lv_;
