/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rcp_set_lock_:  procedure;

/*	rcp_set_lock_ taken from set_lock_.
*	Will be made into the real set_lock_ later.
*/
/*	set_lock_ - This procedure allows a user to guarantee that two processes
		will not simultaneously execute the same critical section of code.
		A user provided lock word can be set to the lock identifier of
		only one process at a time thereby guaranteeing, assuming the proper
		conventions are followed, that only this process can be currently
		executing in the critical section of code.

	Originally coded by R. J. Feiertag on November 5, 1971
	Modified on April 6, 1972 by R. J. Feirtag to work in all rings.
	Modified on October 1, 1974 by J. Stern to eliminate message segment metering.
	Modified on December 7, 1974 by Bill Silver to add generalized metering.
*/

dcl	arg_code		fixed bin(35);	/* (O) error_table_ code. */
dcl	arg_lock		bit(36)  aligned;	/* (I) The lock to lock or unlock. */
dcl	arg_time_of_lock	fixed bin(71);	/* (I/O) Raw time lock locked. */
dcl	arg_time_locked	fixed bin(71);	/* (O) Raw time (duration) lock was locked. */
dcl	arg_time_waiting	fixed bin(71);	/* (O) Raw time waiting for lock. */
dcl	arg_wait_time	fixed bin;	/* (I) Time in seconds to wait for lock. */

	dcl lock_ptr ptr,	/* Pointer to lock. */
	    wait_time fixed bin, /* time in seconds to wait for lock to be unlocked */
	    code fixed bin(35), /* indicates success of call */
	    time_locked fixed bin(71), /* time locked locked. */
	    time_started fixed bin(71), /* time we started to wait for lock. */
	    alarm_time fixed bin(71), /* saved value of alarm timer */
	    alarm_channel fixed bin(71), /* saved value of alarm timer channel */
	    message(4) fixed bin(71), /* message from ipc */
	    failure_time fixed bin(71) init(0), /*  is the time at which this call will give up */
	    sleep_time fixed bin(71), /* is the number of microseconds until this call gives up */
	    ttul_code fixed bin, /* is the status from try_to_unlock_lock */
	    lock_id bit(36) aligned internal static init(""b); /* is the lock identifier of this process */

	dcl based_lock  bit(36) aligned  based(lock_ptr);

	dcl 1 wait_list aligned internal static, /* list of channels to wait on for ipc */
		2 channel_count fixed bin init(1), /* number of channels to wait on */
		2 channel fixed bin(71) init(0); /* channel for waiting */

	dcl error_table_$locked_by_other_process ext fixed bin(35),
	    error_table_$locked_by_this_process ext fixed bin(35),
	    error_table_$lock_not_locked ext fixed bin(35),
	    error_table_$invalid_lock_reset ext fixed bin(35),
	    error_table_$lock_wait_time_exceeded ext fixed bin(35);

	dcl get_lock_id_ ext entry(bit(36) aligned),
	    get_ring_ ext entry returns(fixed bin(3)),
	    get_initial_ring_ ext entry returns(fixed bin(3)),
	    ipc_$create_ev_chn ext entry(fixed bin(71),fixed bin(35)),
	    ipc_$block ext entry(ptr,ptr,fixed bin(35)),
	    stacq ext entry(ptr,bit(36) aligned,fixed bin(35)) returns (bit(1) aligned),
	    hcs_$get_alarm_timer ext entry(fixed bin(71),fixed bin(71)),
	    hcs_$set_alarm_timer ext entry(fixed bin(71),fixed bin,fixed bin(71)),
	    hcs_$try_to_unlock_lock ext entry(ptr,fixed bin),
	    clock_ ext entry returns(fixed bin(71)),
	    timer_manager_$sleep ext entry(fixed bin(71),bit(2));

	dcl (stac,min,addr) builtin;
/*	*/
/*	This entry attempts to set the lock word to the lock indentifier of the
*	calling process.  If the lock is already set by some other existing process
*	then it waits for some given period of time for the lock to be unlocked.
*	If the lock is not unlocked in the given time then set_lock_ gives up and returns.
*/
lock:  entry  (arg_lock,arg_wait_time,arg_code);

	lock_ptr = addr(arg_lock);		/* Get pointer to lock to lock. */
	wait_time = arg_wait_time;

	call LOCK;			/* Try to lock lock. */

	arg_code = code;
	return;





/*	This entry performs the same function as unlock except that it allows the
*	caller to perform metering on the lock.
*/
meter_lock:  entry  (arg_lock,arg_wait_time,arg_time_of_lock,arg_time_waiting,arg_code);

	lock_ptr = addr(arg_lock);		/* Get pointer to lock to lock. */
	wait_time = arg_wait_time;
	time_started = 0;			/* Initialize time waiting started. */

	call LOCK;			/* Try to lock the lock. */

	if   (code = 0)  |			/* Was lock set OK? */
	     (code = error_table_$invalid_lock_reset)
	     then do;			/* Yes, compute meters. */
		time_locked = clock_();
		if   time_started = 0
		     then time_started = time_locked;
	     end;
	     else do;			/* No, lock not locked. */
		time_locked,
		time_started = 0;
	     end;

	arg_time_of_lock = time_locked;	/* Return meter data. */
	arg_time_waiting = time_locked - time_started;
	arg_code = code;
	return;
/**/
LOCK:  procedure;

/*	This procedure is called to try to lock the lock.
*/

	if lock_id = ""b then call get_lock_id_(lock_id); /* get lock id if we don't already have it */
AGAIN:
	if stac(lock_ptr,lock_id) then do; /* locked successfully, we are done */
		code = 0; /* return successful code */
		return;
		end;
	call hcs_$try_to_unlock_lock(lock_ptr,ttul_code);
	if ttul_code = 3 then do; /* lock was invalid and was relocked */
		code = error_table_$invalid_lock_reset; /* return successful code */
		return;
		end;
	if time_started = 0 then time_started = clock_();
	if ttul_code = 2 then go to AGAIN; /* lock is not locked, try again */
	if based_lock = lock_id then do; /* already locked by this process */
		code = error_table_$locked_by_this_process;
		return;
		end;
	if failure_time = 0 then /* calculate when we will give up */
	 if wait_time < 0 then  /*  largest possible clock time */
	  failure_time = /* 2**52 */ 10000000000000000000000000000000000000000000000000000b;
	  else failure_time = clock_() + wait_time * 1000000; /* calculate time to give up */
	sleep_time = failure_time - clock_(); /* calculate time to sleep */
	if sleep_time <= 0 then do; /* time to give up */
		code = error_table_$lock_wait_time_exceeded; /* return unsuccessful code */
		return;
		end;
	if get_ring_() >= get_initial_ring_() then /* we can call timer_manager_ */
	 call timer_manager_$sleep(min(sleep_time,2000000),"10"b); /* sleep for some time */
	 else do; /* we cannot call timer_manager_ */
		if channel = 0 then do; /* a channel must be created */
			call ipc_$create_ev_chn(channel,code); /* create the channel */
			if code ^= 0 then return; /* if trouble then forget it */
			end;
		call hcs_$get_alarm_timer(alarm_time,alarm_channel); /* remember current alarm settings */
		call hcs_$set_alarm_timer(min(sleep_time,1000000),1,channel); /* get awakened later */
		call ipc_$block(addr(wait_list),addr(message),code); /* wait for wakeup */
		call hcs_$set_alarm_timer(alarm_time,2,alarm_channel); /* reset original timer settings */
		if code ^= 0 then return; /* if trouble then give up */
		end;
	go to AGAIN; /* try again */
	end  LOCK;
/**/
/*	This entry attempts to unlock the lock.
*/
unlock:  entry  (arg_lock,arg_code);

	lock_ptr = addr(arg_lock);		/* Get pointer to lock. */

	call UNLOCK;			/* Try to unlock lock. */

	arg_code = code;			/* Return error code. */
	return;





/*	This entry performs the same function as unlock except that it also
*	returns metering data.
*/
meter_unlock:  entry  (arg_lock,arg_time_of_lock,arg_time_locked,arg_code);

	lock_ptr = addr(arg_lock);		/* Get pointer to lock. */

	call UNLOCK;			/* Try to unlock lock. */

	if   code = 0			/* Was locked unlocked OK? */
	     then arg_time_locked = clock_() - arg_time_of_lock;
	     else arg_time_locked = 0;	/* No. */
	arg_code = code;
	return;





UNLOCK:  procedure;

/*	This procedure is called to try to unlock the lock.
*/

	if lock_id = ""b then call get_lock_id_(lock_id); /* get lock id if we don't already have it */
	if ^stacq(lock_ptr, lock_id, 0) then /* lock was not locked by this process */
		if based_lock = ""b then code = error_table_$lock_not_locked;
					/* lock was not locked */
		 else code = error_table_$locked_by_other_process;
					/* lock was set by another process */
	 else code = 0; /* everything OK - lock was locked by us and cleared by stacq */
	end  UNLOCK;

	end  rcp_set_lock_;
