/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-11,Farley), approve(85-09-11,MCR6979),
     audit(85-12-17,CLJones), install(86-03-21,MR12.0-1033):
     Add MCA support
                                                   END HISTORY COMMENTS */

rcp_get_scratch_volume_: proc (a_rcse_ptr, rsc_name, access, code);


/*	Modified Jan 1985 by Paul Farley to add device_type (8) "MCA". */
/*

   This procedure is called by RCP to get the name of a scratch volume from Resource Management.
   If Resource Management is not enabled, we will just return the old " " name and RW access.


*/

/*		PARAMETERS		*/


	dcl     a_rcse_ptr		 ptr;		/* Pointer to the RSCE of the volume in question. */
	dcl     access		 bit (3) aligned;	/* User's access to the reosurce. */
	dcl     code		 fixed bin (35);	/* Error code. */
	dcl     rsc_name		 char (*);	/* Name of the resource. */


/*		CONSTANTS			*/


	dcl     DEN_NAME		 (5) char (12) varying static internal options (constant) init (
				 ",den=200", ",den=556", ",den=800", ",den=1600", ",den=6250");
	dcl     RW		 bit (3) static internal options (constant) init ("101"b);


/*		AUTOMATIC STORAGE		*/


	dcl     attrs		 char (256) varying;
	dcl     i			 fixed bin;
	dcl     model_pic		 pic "zzz9";


/*		BUILTIN FUNTIONS		*/


	dcl     addr		 builtin;
	dcl     null		 builtin;
	dcl     size		 builtin;
	dcl     string		 builtin;


/*		ERROR CODES		*/


	dcl     error_table_$action_not_performed fixed bin (35) ext;


/*		ENTRIES CALLED		*/


	dcl     cv_rcp_attributes_$from_string_rel entry (char (*), (4) bit (72) aligned, char (*) varying, fixed bin (35));
	dcl     rcp_pointers_$com_seg	 entry () returns (ptr);
	dcl     rcp_pointers_$data	 entry () returns (ptr);
	dcl     rcprm_find_resource_$reserve entry (ptr, char (*), ptr, fixed bin (35));

%include rcp_data;

%include rcp_com_seg;

%include resource_control_desc;

%include rcp_resource_types;

/*

   First, get things set up and ready to go.

*/


	rcse_ptr = a_rcse_ptr;
	rsc_name = "";				/* Good enough for now. */
	access = RW;				/* " */
	code = 0;					/* No error. */


	rcpd_ptr = rcp_pointers_$data ();
	rcs_ptr = rcp_pointers_$com_seg ();


/*

   Now, if Resource Management is not enabled, we will simply return.

*/


	if ^rcpd.modes.resource_mgmt_enabled then return;


/*

   Resource Management must be queried.  Ask him for a system resource of the type specified.

*/


	Resource_count = 1;

	begin;

	     dcl	   garbage	      (size (resource_descriptions)) bit (36);

	     string (garbage) = "0"b;

	     resource_desc_ptr = addr (garbage);
	     resource_descriptions.version_no = resource_desc_version_1;
	     resource_descriptions.n_items = 1;
	     resource_descriptions.item (1).type = VOLUME_TYPE (rcse.dtypex);
	     goto MAKE_ATTRS (rcse.dtypex);


MAKE_ATTRS (1):					/* TAPE VOL */

	     if rcse.qualifiers (1) = 9
	     then attrs = "track=9";
	     else attrs = "track=7";

	     do i = 1 to hbound (DEN_NAME, 1);
		if substr (unspec (rcse.qualifiers (2)), i, 1)
		then attrs = attrs || DEN_NAME (i);
	     end;
	     goto MADE_ATTRS;


MAKE_ATTRS (2):					/* DISK VOL */

	     model_pic = rcse.model;
	     attrs = "model=" || ltrim (model_pic) || ",use=io";
	     goto MADE_ATTRS;


MAKE_ATTRS (3):					/* NOT USED */
MAKE_ATTRS (4):					/* NOT USED */
MAKE_ATTRS (5):					/* NOT USED */
MAKE_ATTRS (6):					/* NOT USED */
MAKE_ATTRS (7):					/* NOT USED */
MAKE_ATTRS (8):					/* NOT USED */

	     attrs = "";


MADE_ATTRS:

	     if attrs = ""
	     then resource_descriptions.item (1).desired_attributes (*) = "0"b;
	     else do;
		     call cv_rcp_attributes_$from_string_rel ((VOLUME_TYPE (rcse.dtypex)),
			resource_descriptions.item (1).desired_attributes (*), attrs, code);
		     if code ^= 0
		     then return;
		     resource_descriptions.item (1).given.desired_attributes = "1"b;
		end;

	     call rcprm_find_resource_$reserve (resource_desc_ptr, (rcs.acs_directory), null (), code);
	     if code = error_table_$action_not_performed then
		code = resource_descriptions.item (1).status_code;
	     if code ^= 0 then return;

	     rsc_name = resource_descriptions.item (1).name;
	     access = resource_descriptions.item (1).rew;

	end;

	return;


     end rcp_get_scratch_volume_;
