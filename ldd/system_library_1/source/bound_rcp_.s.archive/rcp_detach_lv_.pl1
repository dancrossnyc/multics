/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(85-07-10,EJSharpe), approve(86-02-20,MCR7304),
     audit(86-03-27,CLJones), install(86-04-23,MR12.0-1044):
     added security auditing
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcp_detach_lv_:
     procedure (arg_rcp_id, arg_ecode);

/*	This procedure implements the rcp_$detach_lv entry point.
   *	Created on 04/08/76 by Bill Silver.
   *	Modified for lv_request_ 09/16/76 by B. Greenberg.
   *	Modified for B2 security cleanup, December 1984 by Chris Jones.
*/

/*
   *	This program is called to detach one logical volume.
   *	We will check to see if this lv is already attached for this process.
   *	If so, we will detach it.  Then we will remove it from the
   *	per-process list of attached logical volumes.
*/

dcl	arg_rcp_id	   bit (36) aligned;	/* (I) ID of this attachment. */
dcl	arg_ecode		   fixed bin (35);		/* (O) error_table_ code. */

dcl	1 auto_event_flags	   aligned like audit_event_flags;
dcl	caller_level	   fixed bin;		/* Validation level of caller. */
dcl	ecode		   fixed bin (35);		/* error_table_code. */
dcl	ignore_mode	   bit (36) aligned;
dcl	ignore_pubbit	   bit (1) aligned;
dcl	lv_access_range	   (2) bit (72) aligned;	/* range of access to LV */
dcl	lvid		   bit (36) aligned;	/* ID of logical volume. */
dcl	rcp_id		   bit (36) aligned;	/* RCP ID of this attach. */
dcl	volume_name_str	   char (64);		/* passed to access_audit_ */

dcl	access_audit_r1_$log_obj_class_range
			   entry options (variable);
dcl	admin_gate_$detach_lv  entry (bit (36) aligned, fixed bin (35));
dcl	cu_$level_get	   entry entry (fixed bin);
dcl	cu_$level_set	   entry (fixed bin);
dcl	get_ring_		   entry () returns (fixed bin (3));
dcl	rcp_lv_$check	   entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin (35));
dcl	rcp_lv_$del_lv	   entry (bit (36) aligned, fixed bin (35));
dcl	volume_registration_mgr_$get_access_for_attach
			   entry (char (*), fixed bin (3), bit (36) aligned, bit (1) aligned, (2) bit (72) aligned,
			   fixed bin (35));
dcl	volume_registration_mgr_$find_lvname
			   entry (bit (36), char (*), fixed bin (35));

dcl	access_operations_$detach_lv
			   bit (36) aligned external;
dcl	error_table_$logical_volume_not_connected
			   fixed bin (35) external;
dcl	sys_info$access_class_ceiling
			   bit (72) aligned external;

dcl	cleanup		   condition;

dcl	null		   builtin;
dcl	string		   builtin;

/*	Begin rcp_detach_lv_.
*/

	call cu_$level_get (caller_level);		/* Save caller's validation level. */

	on cleanup call cu_$level_set (caller_level);

	call cu_$level_set (get_ring_ ());		/* Set validation level to RCP level. */

	rcp_id = arg_rcp_id;			/* Copy argument. */

	call rcp_lv_$check (rcp_id, lvid, (0), ecode);
	if ecode ^= 0 then
	     goto RETURN;				/* LV not attached for this process. */

	call admin_gate_$detach_lv (lvid, ecode);
	if ecode ^= 0 then
	     if ecode = error_table_$logical_volume_not_connected then
		ecode = 0;
	     else go to RETURN;			/* Unable to detach in ring 0. */

	/*** get information so we can audit the detachment.  This should all
	     be moved to a "lv_access_kernel_" module */
	call volume_registration_mgr_$find_lvname ((lvid), volume_name_str, ecode);
	if ecode ^= 0 then do;
	     volume_name_str = "logical volume UNKNOWN";
	     lv_access_range = sys_info$access_class_ceiling;
	end;
	else do;
	     call volume_registration_mgr_$get_access_for_attach (volume_name_str, (caller_level), ignore_mode,
		ignore_pubbit, lv_access_range, (0));
	     volume_name_str = "logical volume " || volume_name_str;
	end;

	string (auto_event_flags) = ""b;
	auto_event_flags.grant = "1"b;
	call access_audit_r1_$log_obj_class_range ("rcp_detach_lv_", caller_level, string (auto_event_flags),
	     access_operations_$detach_lv, lv_access_range, volume_name_str, (0), null (), (0));

	/*** and finally detach it */
	call rcp_lv_$del_lv (rcp_id, ecode);		/* Delete lv from process list. */

RETURN:
	arg_ecode = ecode;
	call cu_$level_set (caller_level);		/* Reset validation level. */

%page;
%include access_audit_eventflags;

     end rcp_detach_lv_;
