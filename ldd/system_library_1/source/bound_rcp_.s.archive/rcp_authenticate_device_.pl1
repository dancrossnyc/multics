/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-15,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-14,Farley), install(86-07-17,MR12.0-1097):
     Add support for subvolumes by setting a priority for authentication.
                                                   END HISTORY COMMENTS */


rcp_authenticate_device_: proc (a_device_name, a_oper_auth_code, a_code);

/*  This  program  takes  a  device name and an authentication code.  For tape
   drives   it  gets  the  user  specified  volume  name,  converts  it  with
   authenticate_  and checks it against the operator specified authentication
   code  ("***",  if permitted, matches any code).  For disk drives it checks
   the authentication code against the disk label type flags in the rcse.
*/
/*
   Written by R.J.C. Kissel in September 1977.
   Modified by R.J.C. Kissel 1/79 to handle disk authentication.
   Modified 05/79 by C. D. Tavares to handle new authentication levels.
   Modified 6/79 by Michael R. Jordan for MR7.0R.
*/

dcl  a_device_name char (*);
dcl  a_oper_auth_code char (*);
dcl  a_code fixed bin (35);

dcl  UPPER char (26) static internal options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl  LOWER char (26) static internal options (constant) init ("abcdefghijklmnopqrstuvwxyz");

dcl  device_name char (32);
dcl  oper_auth_code char (3);
dcl  code fixed bin (35);

dcl  user_label char (32);
dcl  caller_level fixed bin;
dcl  found bit (1);
dcl  i fixed bin;

dcl  authenticate_ entry (char (*)) returns (char (3) aligned);
						/* In upper case. */
dcl  rcp_pointers_$com_seg entry () returns (ptr);
dcl  rcp_pointers_$data entry () returns (ptr);
dcl  hcs_$wakeup entry (bit (36), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  get_ring_ entry () returns (fixed bin);
dcl  cu_$level_get entry (fixed bin);
dcl  cu_$level_set entry (fixed bin);
dcl  rcp_lock_$lock entry (ptr, fixed bin (35));
dcl  rcp_lock_$unlock entry (ptr);

dcl (error_table_$auth_incorrect,
     error_table_$auth_unknown,
     error_table_$dev_nt_assnd,
     error_table_$action_not_performed,
     error_table_$improper_data_format) external fixed bin (35);

dcl  cleanup condition;

dcl (translate, addr, substr, null) builtin;

	code = 0;
	lock_info_ptr = null ();

	call cu_$level_get (caller_level);

	on cleanup
	     call CLEANUP;

	call cu_$level_set (get_ring_ ());

	device_name = a_device_name;
	oper_auth_code = a_oper_auth_code;

	rcpd_ptr = rcp_pointers_$data ();
	rcs_ptr = rcp_pointers_$com_seg ();

	lock_info_ptr = addr (rcs.lock_info);
	call rcp_lock_$lock (lock_info_ptr, code);

	if code ^= 0
	then do;
	     call CLEANUP;
	     return;
	end;

	found = "0"b;

	do i = 1 to rcs.num_entries by 1 while (^found);
	     rcse_ptr = addr (rcs.entry (i));

	     if rcse.device_name = device_name /* Right device. */ & rcse.kind = 1 /* The attach entry. */ & rcse.state ^= 0
						/* Not free, i.e. probably attaching. */
	     then found = "1"b;
	end;

	if ^found
	then do;
	     code = error_table_$dev_nt_assnd;
	     call CLEANUP;
	     return;
	end;

	if ^rcse.flags.need_auth | (substr (device_name, 1, 3) ^= "tap" & substr (device_name, 1, 3) ^= "dsk")
	then do;
	     code = error_table_$action_not_performed;
	     call CLEANUP;
	     return;
	end;

	if substr (device_name, 1, 3) = "tap" then do;	/* Handle tape authentication. */

	     if rcpd.modes.authentication_level = No_authentication then
		goto auth_ok;

	     if rcpd.modes.authentication_level = Nominal_authentication then
		if oper_auth_code = "***" then goto auth_ok;

/* full auto or manual authentication */

	     if oper_auth_code = "***" then do;		/* don't allow this */
		code = error_table_$improper_data_format;
		call CLEANUP;
		return;
	     end;

	     user_label = rcse.volume_name;

	     if (translate (oper_auth_code, UPPER, LOWER) = authenticate_ (user_label)) then
auth_ok:		do;
		rcse.have_auth = "1"b;
		rcse.auth_set = "1"b;
		rcse.need_auth = "0"b;
	     end;

	     else do;
		rcse.have_auth = "0"b;
		rcse.auth_set = "1"b;
		rcse.need_auth = "0"b;
	     end;

	     call hcs_$wakeup ((rcse.process_id), rcse.event_id, 0, code);

	     call CLEANUP;
	     return;
	end;					/* Handle tape authentication. */

	else do;					/* Handle disk authentication. */
	     if oper_auth_code = "no"
	     then do;				/* Operator has denied authentication. */
		rcse.have_auth = "0"b;
		rcse.auth_set = "1"b;
		rcse.need_auth = "0"b;
	     end;				/* Operator has denied authentication. */

	     else if (oper_auth_code = "ss") | (oper_auth_code = "io") | (oper_auth_code = "urd") | (oper_auth_code = "urg")
	     then do;
		if (rcse.flags.disk_ss_pack | rcse.flags.disk_copy_of_ss_pack) & ^(oper_auth_code = "ss")
                    then goto wrong_auth_code;
		else if (rcse.flags.disk_io_pack & ^(oper_auth_code = "io"))
		then goto wrong_auth_code;
		else if (rcse.flags.disk_unreadable & ^(oper_auth_code = "urd"))
		then goto wrong_auth_code;
		else if (rcse.flags.disk_unregistered & ^(oper_auth_code = "urg"))
		then goto wrong_auth_code;
						/* Operator has authenticated the pack. */
	          rcse.have_auth = "1"b;
		rcse.auth_set = "1"b;
		rcse.need_auth = "0"b;
	     end;				          /* Operator has authenticated the pack. */
               else do;				/* Unknown authentication code. */
		code = error_table_$auth_unknown;
		call CLEANUP;
		return;
	     end;

	     call hcs_$wakeup ((rcse.process_id), rcse.event_id, 0, code);
						/* Inform user the operator is done. */

	     call CLEANUP;
	     return;
	end;					/* Handle disk authentication. */
wrong_auth_code:
       code = error_table_$auth_incorrect;
       call CLEANUP;
       return;
						/*  */
CLEANUP:
	proc;

	     if lock_info_ptr ^= null
	     then call rcp_lock_$unlock (lock_info_ptr);

	     call cu_$level_set (caller_level);
	     a_code = code;

	end CLEANUP;

%include rcp_data;

%include rcp_com_seg;


     end rcp_authenticate_device_;
