/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-06-25,Rauschelbach), approve(87-06-29,MCR7736),
     audit(87-07-21,Farley), install(87-08-06,MR12.1-1063):
     System error message documentation was added.
                                                   END HISTORY COMMENTS */


rcp_pre_claim_:
     proc (a_reservation_id, a_group_id, a_process_id, a_code);

/*
   *       This subroutine will implement the privileged pre-claiming of reservations.
   *  This function will only be used by the absentee manager in the
   *  initializer process.
   *       It is needed because when the absentee manager originally makes
   *  the reservation it does not know the process_id of the process
   *  it will create.  Because of this it is possible for a different
   *  job with the same group_id to claim the reservation.  This problem
   *  is avoided by having the absentee manager call res_pre_claim
   *  Which will fill in the process_id of the job for which the
   *  reservation was really made.
*/

/*
   Written by R.J.C. Kissel 5/78.
   Modfied by R.J.C. Kissel on 1/79 to do proper reservation accounting and log res id.
*/

/* Arguments */

dcl  a_reservation_id fixed bin (71);
dcl  a_group_id char (*);
dcl  a_process_id bit (36);
dcl  a_code fixed bin (35);

/* Local Variables */

dcl  res_id fixed bin (71);
dcl  log_res_id char (19);
dcl  grp_id char (32) aligned;
dcl  prc_id bit (36);
dcl  code fixed bin (35);
dcl  i fixed bin;					/* Index in rcpd. */
dcl  any_found bit (1);

dcl  caller_level fixed bin;

/* Local Constants */

/* Local Overlays */

/* Include Files */

%include rcp_data;
%include rcp_com_seg;
%include rcp_account_msg;
%include syserr_constants;

/* External Entries */

dcl  cu_$level_get entry (fixed bin);
dcl  cu_$level_set entry (fixed bin);
dcl  request_id_ entry (fixed bin (71)) returns (char (19));
dcl  get_ring_ entry returns (fixed bin);
dcl  rcp_pointers_$data entry returns (ptr);
dcl  rcp_pointers_$com_seg
     entry returns (ptr);
dcl  rcp_lock_$lock entry (ptr, fixed bin (35));
dcl  rcp_lock_$unlock entry (ptr);
dcl  rcp_match_user_name_
     entry (char (32) aligned, char (32) aligned) returns (bit (1));
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  admin_gate_$syserr entry options (variable);

/* External Constants */

dcl  error_table_$noentry
     fixed bin (35) external;
dcl  error_table_$badcall
     fixed bin (35) external;

/* Builtin Functions and Conditions */

dcl (addr, rel, unspec) builtin;
dcl (cleanup) condition;

	res_id = a_reservation_id;
	grp_id = a_group_id;
	prc_id = a_process_id;

	call cu_$level_get (caller_level);

	on cleanup
	     call cleanup_handler;

	call cu_$level_set (get_ring_ ());

	rcpd_ptr = rcp_pointers_$data ();
	rcs_ptr = rcp_pointers_$com_seg ();

	log_res_id = request_id_ (res_id);
						/* Set this for later use. */

	call rcp_lock_$lock (addr (rcpd.lock_info), code);

	if code ^= 0
	then goto BAD_ERROR;

/*
   *       Loop through the rcp data base looking for the reservation
   *  id.  Then change the entry by adding the process_id and
   *  leaving everything else the same.
*/
	any_found = "0"b;

	do i = 1 to rcpd.tot_devices;
	     if rcpd.device (i).reservation_id = res_id
	     then do;

		if ^rcp_match_user_name_ (rcpd.device (i).group_id, grp_id)
		then goto BAD_GROUP;

		any_found = "1"b;
		rcpd.device (i).process_id = prc_id;

		call ACCOUNT_WAKEUP (addr (rcpd.device (i)), RCP_ACCTMSG_assign);
						/* Take care of accting when done by the Initializer. */

		call admin_gate_$syserr (JUST_LOG, "RCP: Pre-claimed device ^a for ^a (prc_id=^o   res_id=^a)",
		     rcpd.device (i).device_name, grp_id, prc_id, log_res_id);
	     end;
	end;

	do i = 1 to rcpd.last_volume;
	     if rcpd.volume (i).reservation_id = res_id
	     then do;

		if ^rcp_match_user_name_ (rcpd.volume (i).group_id, grp_id)
		then goto BAD_GROUP;

		any_found = "1"b;
		rcpd.volume (i).process_id = prc_id;
		call admin_gate_$syserr (JUST_LOG, "RCP: Pre-claimed volume ^a for ^a (prc_id=^o   res_id=^a)",
		     rcpd.volume (i).volume_name, grp_id, prc_id, log_res_id);
	     end;
	end;

	if ^any_found
	then a_code = error_table_$noentry;
	else a_code = 0;

	call rcp_lock_$unlock (addr (rcpd.lock_info));
	call cu_$level_set (caller_level);
	return;

BAD_ERROR:
	call cleanup_handler;
	a_code = code;
	return;

BAD_GROUP:
	call cleanup_handler;
	a_code = error_table_$badcall;
	return;

ACCOUNT_WAKEUP:
	procedure (a_devptr, a_action);

/*	This procedure is called to format an accounting message, and send it to the
   *	accounting process.  If the accounting event channel has not been set up, no message is sent.
*/


dcl  a_devptr ptr;					/* Pointer to rcp_data entry */
dcl  a_action fixed bin;				/* Accounting action */

dcl  wakeup_buf fixed bin (71);
dcl 1 auto_rcpamsg like rcp_account_msg aligned;

	     unspec (auto_rcpamsg) = "0"b;

	     auto_rcpamsg.device_user_procid = a_devptr -> device.process_id;
	     auto_rcpamsg.rcp_data_relp = rel (a_devptr);
	     auto_rcpamsg.devtype = a_devptr -> device.dtypex;
	     auto_rcpamsg.action = a_action;

	     unspec (wakeup_buf) = unspec (auto_rcpamsg);
	     if rcpd.accounting_chan ^= 0
	     then call hcs_$wakeup (rcpd.accounting_pid, rcpd.accounting_chan, wakeup_buf, (0));

	end ACCOUNT_WAKEUP;

cleanup_handler:
	proc;

	     call rcp_lock_$unlock (addr (rcpd.lock_info));
	     call cu_$level_set (caller_level);

	end cleanup_handler;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message: 
   RCP: Pre-claimed device devX_MM for GRP_ID (prc_id= PRC_ID res_id= RES_ID)

   S:	$log

   T:	$run

   M:	An announcement that the absentee manager has preclaimed a device
	for its use.

   A:	$ignore

   Message: 
   RCP: Pre-claimed volume VOL_NAME for GRP_ID (prc_id= PRC_ID res_id= RES_ID)

   S:	$log

   T:	$run

   M:	An announcement that the absentee manager has preclaimed a volume
	for its use.

   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end rcp_pre_claim_;
