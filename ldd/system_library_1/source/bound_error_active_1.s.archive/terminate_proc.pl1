/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1986 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


terminate_proc: proc (a_code);

/*	Date Last Modified and Reason

   Modified by E. Stone 11/73 to convert to version 2 and to allow standard error codes to be passed as arg
   Modified by R.B.Snyder 08/08/74 to call tty_lock$cleanup_locks.
   Modified by T. Casey April 1976 to add the init_failure entry point.
   Modified by Mike Grady June 1979 for stack 0 sharing
   Modified by BIM 1984 for use of ext vars in tty_buf and sst.
*/

dcl (a_code, code, rcode) fixed bin;


dcl  state fixed bin,
     fb71 fixed bin (71) based,
     astep ptr,
     lockname char (4) aligned;

dcl  sb_num fixed bin int static init (7),
     sp fixed bin int static init (6),
     access fixed bin int static init (20);

declare sst$ptl bit (36) aligned external static;
declare tty_buf$slock bit (36) aligned external static;

dcl (error_table_$fim_fault, error_table_$no_handler, error_table_$not_ring_0, error_table_$unable_to_do_io,
     error_table_$signaller_fault, error_table_$bad_stack_access, error_table_$bad_linkage_access,
     error_table_$bad_handler_access, error_table_$no_fim_flag, error_table_$oob_stack,
     error_table_$bad_bar_sp, error_table_$termination_requested) fixed bin (35) ext;


dcl  pds$term_channel fixed bin (71) ext,
     pds$term_proc fixed bin ext,
     pds$processid bit (36) aligned ext,
     pds$stack_0_ptr ptr ext,
     tc_data$initializer_id bit (36) aligned ext,
     tc_data$apt_lock bit (36) aligned ext,
    (pds$signal_data, pds$fim_data) fixed bin ext,
    (pds$apt_ptr, prds$idle_ptr) pointer ext;

dcl  syserr ext entry options (variable),
     tty_lock$cleanup_locks entry,
     arg_count_ entry returns (fixed bin),
     verify_lock external entry,
     get_ptrs_$given_segno entry (fixed bin) returns (ptr),
     pc_wired$unwire entry (ptr, fixed bin, fixed bin),
     pxss$stop ext entry (bit (36) aligned, fixed bin),
     pxss$force_stop ext entry,
     pxss$wakeup ext entry (fixed bin, fixed bin (71), fixed bin (71), fixed bin);

dcl (addr, baseno, baseptr, fixed) builtin;

dcl 1 message aligned,
    2 p ptr,					/* force even */
    2 name char (4) aligned,
    2 code fixed bin;

% include stack_header;
% include mc;
% include its;


  


	message.name = "term";			/* send "term"xxxx wakeup to answering service; xxxx is an
						   error_table_ code, and "term" says to the answering service:
						   "Fatal process error. Please create a new process." */
	goto common;

init_failure: entry (a_code);				/* This entry point sends "init"xxxx wakeup */
	message.name = "init";			/* "init" says to the answering service:
						   Fatal error during process initialization. Don't bother
						   creating a new process, because it would fail in the same way."
						   This prevents some fatal process error loops. */
common:

	if arg_count_ () > 0 then code = a_code;	/* if arg given use it */
	else code = 0;				/* otherwise set code so
						   error_table_$termination_requested is used */

	if pds$processid = tc_data$initializer_id then
	     call syserr (1, "attempt to terminate initializer process");

	if pds$apt_ptr = prds$idle_ptr then
	     call syserr (1, "attempt to terminate an idle process");

	lockname = "none";
	call verify_lock;				/* check locks */
	if  sst$ptl = pds$processid then lockname = "ptl";
	else if tty_buf$slock = pds$processid then lockname = "tty";
	else if tc_data$apt_lock = pds$processid then lockname = "apt";
	if lockname ^= "none" then
	     call syserr (1, "attempt to terminate process with ^a lock set", lockname);

	call tty_lock$cleanup_locks;			/* make sure no per-process lock left locked */

	if code <= 0 then do;			/* If argument is non-positive, then code must be mapped */
	     if code = -1 then rcode = error_table_$fim_fault;
	     else if code = -2 then rcode = error_table_$no_handler;
	     else if code = -3 then rcode = error_table_$not_ring_0;
	     else if code = -4 then rcode = error_table_$signaller_fault;
	     else if code = -5 then rcode = error_table_$bad_stack_access;
	     else if code = -6 then rcode = error_table_$bad_handler_access;
	     else if code = -7 then rcode = error_table_$no_fim_flag;
	     else if code = -8 then rcode = error_table_$unable_to_do_io;
	     else if code = -9 then rcode = error_table_$termination_requested;
	     else if code = -10 then rcode = error_table_$bad_bar_sp;
	     else rcode = error_table_$termination_requested; /* default code */
	end;
	else rcode = code;				/* If argument was positive, assume it is a standard error code */
	if rcode = error_table_$fim_fault | rcode = error_table_$signaller_fault then do;
	     if rcode = error_table_$signaller_fault then
		mcp = addr (pds$signal_data);
	     else mcp = addr (pds$fim_data);
	     scup = addr (mcp -> mc.scu (0));
	     if fixed (scup -> scu.fi_num, 5) = access then do;
		if scup -> scu.fd.oosb then
		     if fixed (baseno (mcp -> mc.prs (sp)), 18) = fixed (scup -> scu.tpr.tsr, 15)
		     then rcode = error_table_$oob_stack;
		if fixed (baseno (mcp -> mc.prs (sb_num) -> stack_header.lot_ptr), 18) =
		fixed (scup -> scu.tpr.tsr, 15) then rcode = error_table_$bad_linkage_access;
	     end;
	end;
	message.code = rcode;
	call pxss$wakeup (pds$term_proc, pds$term_channel, addr (message.name) -> fb71, state);

	call pxss$stop (pds$processid, state);		/* first step at stopping process */

	astep = get_ptrs_$given_segno (fixed (baseno (pds$stack_0_ptr), 17));
	call pc_wired$unwire (astep, 0, -1);		/* unwire all stack pages */

	sb = baseptr (baseno (pds$stack_0_ptr));	/* ptr to base of stack seg */
	stack_header.stack_end_ptr = stack_header.stack_begin_ptr; /* dump stack history */

	call pxss$force_stop;


/* BEGIN MESSAGE DOCUMENTATION

   Message:
   attempt to terminate initializer process

   S:	$crash

   T:	$run

   M:	$err

   A:	$recover


   Message:
   attempt to terminate an idle process

   S:	$crash

   T:	$run

   M:	$err

   A:	$recover


   Message:
   attempt to terminate process with TYPE lock set

   S:	$crash

   T:	$run

   M:	$err

   A:	$recover


   END MESSAGE DOCUMENTATION */

     end terminate_proc;
