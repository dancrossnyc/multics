/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(76-01-01,Kobziar), approve(), audit(), install():
     Pre-hcom comments.
     written 1-76 by Kobziar
     Rewritten 7/77 by S.E. Barr
     Modified 16 August, 1981, W. Olin Sibert, to eliminate use of
        online_salvager_output
     Modified July 1982 by J. Bongiovanni to eliminate salv_data$console
     Modified 831111 BIM to not drop 4,5 on the floor
  2) change(86-11-11,Lippard), approve(86-12-08,MCR7590),
     audit(87-04-16,Dickson), install(87-04-28,MR12.1-1028):
     Stop going OOSB when given a standard (error_table_) error code.
                                                   END HISTORY COMMENTS */


/* format: style4 */

salv_err_msg: proc (a_severity);


/* * Logs messages in the syserr log. Translates salvager severity to
   * syserr severity.
   *
   *    Salv  Sys   Interpretation
   *    ---------------------------
   *	1 CRASH    After printing the message on the operator's console, crash the system.
   *	2 ANNOUNCE Print message on salvager output and operators's console.
   *	4,5 LOG    Print on console if log is full, else just log.
   *	6 JUST_LOG As the man said ...
*/

/* PARAMETERS */

dcl  a_severity fixed bin;				/* severity level for message */
dcl  a_path char (*);				/* pathname assoc. with message */
dcl  arg_msg_ptr ptr unal;				/* Multics standard error code */

/* AUTOMATIC */

dcl  severity fixed bin;				/* copy of severity level */
dcl  syserr_severity fixed bin;			/* correct syserr message code */
dcl  code fixed bin (35);
dcl  have_code bit (1) aligned;			/* ON, for code entry point. */
dcl  path char (170);				/* <path>:<new_line> */
dcl  line_len fixed bin;				/* number of characters in message */
dcl  line char (303);				/* 168 (path) +2 (:nl) +132 (message) +1 (nl) */
dcl  start fixed bin;				/* number of first argument for formline_ */
dcl  msg_ptr ptr unal;				/* packed ptr into error table */
dcl  msg_len fixed bin;				/* number of characters remaining in line for message. */

dcl  (addr, length, substr, rtrim, min, ptr, rel, unspec) builtin;

dcl  1 et aligned based (msg_ptr),			/* An error table message */
       2 len fixed bin (8) unal,			/* Length of the message */
       2 msg char (et.len) unal;			/* The message */

/* EXTERNAL */

dcl  error_table_$ fixed bin ext;
dcl  syserr entry options (variable);
dcl  formline_ entry (fixed bin, fixed bin, ptr, fixed bin, fixed bin);
dcl  utility_print entry (fixed bin, char (*));

/* CONSTANTS */

dcl  COLON_NEW_LINE char (2) int static options (constant) init (":
");
dcl  NEW_LINE int static options (constant) char (1) init ("
");

/* INTERNAL STATIC */

dcl  sys_last_path char (170) int static init ("");	/* Last path printed on console. */

/**/
	start = 2;
	path = "";
	have_code = "0"b;
	goto START;


path: entry (a_severity, a_path);

	start = 3;
	path = a_path;
	have_code = "0"b;
	goto START;


code: entry (a_severity, a_path, arg_msg_ptr);

	start = 4;
	path = a_path;
	have_code = (unspec (arg_msg_ptr) ^= "0"b);
	goto START;

START:

/* Format line and path */

	severity = a_severity;
	line_len = length (line);
	call formline_ (start, start + 1, addr (line), line_len, (0));

/* Get error table message. */

	if have_code then do;
	     msg_ptr = arg_msg_ptr;
	     if baseno (msg_ptr) = "007777"b3 then msg_ptr = ptr (addr (error_table_$), rel (msg_ptr));
	     msg_len = length (line) - line_len;
	     if msg_len > 0 then do;
		substr (line, line_len + 1, msg_len) = et.msg;
		line_len = line_len + et.len;
	     end;
	end;
	line_len = min (line_len + 1, length (line));	/* Make sure there is space for new-line */
	substr (line, line_len, 1) = NEW_LINE;

	if path ^= "" then path = rtrim (path) || COLON_NEW_LINE;

/* Online salvage already has pathname */

	if severity < 0 then severity = 0;
	if severity > 6 then severity = 6;
	if salv_data$rpv then if severity < 4 then severity = 2;

	go to SALV_SEVERITY (severity);

SALV_SEVERITY (1):
	syserr_severity = CRASH;
	go to SYSERR;
SALV_SEVERITY (3):					/* supposedly unused */
SALV_SEVERITY (0):
SALV_SEVERITY (2):
	syserr_severity = ANNOUNCE;
	go to SYSERR;
SALV_SEVERITY (4):
SALV_SEVERITY (5):
	syserr_severity = LOG;
	go to SYSERR;
SALV_SEVERITY (6):
	syserr_severity = JUST_LOG;

SYSERR:
	if path ^= "" & path ^= sys_last_path then do;
	     call syserr (syserr_severity, "^a^a", path, substr (line, 1, line_len - 1));
	     sys_last_path = path;
	end;
	else call syserr (syserr_severity, substr (line, 1, line_len - 1));

	return;

%page; %include salv_data;
%page; %include syserr_constants;

     end salv_err_msg;
