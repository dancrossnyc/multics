/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Written anonymously in time immemorial. */
/* Modified for salvager_severities BIM 831118 */

dir_dump: proc (a_dp, a_cur_len);
						/* dump directory during salvage */
dcl (dp, a_dp, print_ptr) ptr,
    i fixed bin (18),
    (cur_len, a_cur_len, start) fixed bin (17),
     for_vtoce bit (1) aligned,
     w (8) fixed bin (35) based (print_ptr),
     zero_line bit (36*8) based (print_ptr),
    (t_line, char_fmt) char (32) aligned,
     1 pad_stg aligned int static,
	2 pd1 bit (4*36) init ((16) "001111111"b),
	2 pd2 bit (4*36) init ((16) "001111111"b),
     tb_line bit (8*36) based (addr (t_line)),
     salv_err_msg ext entry options (variable),
    (addr, fixed, rel, ptr, translate, unspec, collate, substr) builtin;

dcl  first bit (1) aligned int static init ("1"b);
dcl map_string char (128) int static;			/* ascii translation table for dir printeng */

%include salv_data;
%include salvager_severities;

	dp = a_dp;
	cur_len = a_cur_len * 1024;			/* express in words */
	for_vtoce = "0"b;

doub:

/* Setup mask for dump_dir. */

	if first then do;
	     map_string = collate ();
	     substr (map_string, 1, 32) = (32) ".";
	     substr (map_string, 128, 1) = ".";
	     first = "0"b;
	end;
	if salv_data$on_line then return;
	if ^salv_data$dump then return;

	start = fixed (rel (dp));

	do i = start to (cur_len + start) -8 by 8;	/* print 8 word lines */
	     print_ptr = ptr (dp, i);
	     if zero_line ^= "0"b then do;
		call salv_err_msg (SALV_DEBUG, "^6o^4x^w^2x^w^2x^w^2x^w^2x^w^2x^w^2x^w^2x^w",
		     i, w (1), w (2), w (3), w (4), w (5), w (6), w (7), w (8));
		tb_line = zero_line & unspec (pad_stg);	/* set up for char printout */
		char_fmt = translate (t_line, map_string);
		call salv_err_msg (SALV_DEBUG, "^88x^a", char_fmt);
	     end;
loop_c:	end;

	return;

vtoce:	entry(a_vtocep);				/* dump only vtoce */
						/* now to print out vtoce */
dcl a_vtocep ptr;

	for_vtoce = "1"b;
	dp = a_vtocep;
	cur_len = 192;				/* vtoce is 192 words */
	goto doub;


     end dir_dump;
