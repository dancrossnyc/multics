/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,ifthenstmt,ifthen,indnoniterend,indend,^indproc */
/* format: off */
on_line_salvager:
     proc (a_dp, a_code);

/* Modified by Kobziar on 12-6-73 to delete only user from acl in dump */
/* Modified by Kobizar on 12-3-74 to give all users access under AI */
/* Modified by R. Bratt on 06/03/76 to call find_$finished */
/* Last modified by Greenberg 07/26/76 to terminate processes cleanly, also cleaned up AST length getting */
/* Modified by S. Barr 9/76 to use new hash table format. */
/* Modified by Greenberg 11/18/76 for setting AIM out of service. */
/* Modified by S. Barr 4/77 to force rebuild. */
/* Rewritten by S. Barr 7/77 to fix bugs and to call the new salvager primatives. */
/* Rewritten 7/77 by S. Barr for multiprocess salvaging. */
/* Modified 6/79 by Mike Grady for stack 0 sharing */
/* Modified 10 Aug 1981, W. Olin Sibert, to handle errors while creating dump copies */
/* Modified 25 February 1985, Keith Loepere, to use the real internal get_pathname_. */

dcl  a_dp pointer parameter;
dcl  a_code fixed bin (35) parameter;

dcl  dir_name char (168);
dcl  ename char (32);
dcl  path_name char (168) var;
dcl  set_sw fixed bin (35);
dcl  (i, l) fixed bin;
dcl  (root, old_modify) bit (1);
dcl  entry_time char (24);
dcl  (dir_name_len, save_level) fixed bin (17);
dcl  code fixed bin (35);
dcl  salvlp ptr;					/* ptr to salv_data$lock. */

dcl  unlock_parent bit (1) aligned;
dcl  rb (3) fixed bin (6) init (7, 7, 7);

dcl  1 args aligned like salv_args;

dcl  pds$process_group_id char (32) aligned external static;
dcl  pds$process_dir_name char (32) aligned external static;
dcl  pds$ fixed bin external static;
dcl  pds$processid bit (36) aligned external static;
dcl  pds$stack_0_ptr pointer external static;

dcl  error_table_$argerr fixed bin (35) external static;
dcl  error_table_$mylock fixed bin (35) external static;
dcl  error_table_$root fixed bin (35) external static;
dcl  error_table_$salv_pdir_procterm fixed bin (35) external static;

dcl  date_time_ entry (fixed bin (71), char (*));
dcl  get_pathname_			entry (fixed bin (17), char (*) varying, fixed bin (35));
dcl  level$get entry (fixed bin);
dcl  level$set entry (fixed bin);
dcl  lock$dir_unlock entry (pointer);
dcl  lock$unlock_fast entry (ptr);
dcl  lock$lock_fast entry (ptr);
dcl  salvager$online entry (ptr);
dcl  salv_directory$online_salvage entry (ptr, ptr, ptr, fixed bin (35));
dcl  salv_dump_copy entry (pointer, fixed bin, char (*));
dcl  salv_err_msg entry options (variable);
dcl  set_privileges$dir_priv_off entry (fixed bin (35));
dcl  set_privileges$dir_priv_on entry (fixed bin (35));
dcl  sum$getbranch_root_my entry (pointer, bit (36) aligned, pointer, fixed bin (35));
dcl  syserr entry options (variable);
dcl  syserr$error_code entry options (variable);
dcl  vtoc_attributes$get_info entry (bit (36) aligned, bit (36) aligned, fixed bin, ptr, fixed bin (35));

dcl  typelock bit (36) aligned options (constant) static init ("1"b);

dcl  WHOAMI char (32) internal static options (constant) init ("on_line_salvager");

dcl  cleanup condition;

dcl  (addr, clock, index, length, max, ptr, rel, reverse, segno, substr) builtin;



	a_code = 0;
	dp = a_dp;
	if rel (dp) ^= "0"b then do;
	     a_code = error_table_$argerr;
	     return;
	     end;

	root, unlock_parent = "0"b;

/* salv_data lock prevents two processes from online salvaging at the same time.  (Output would be mixed up.) */

	call level$get (save_level);
	set_sw = 1;

	salvlp = addr (salv_data$lock);
	on cleanup
	     begin;
		if salvlp -> lock.pid = pds$processid then call lock$unlock_fast (salvlp);
		call level$set (save_level);
		if set_sw = 0 then call set_privileges$dir_priv_off ((0));
		if unlock_parent then call lock$dir_unlock (ptr (ep, 0));
		end;

	call lock$lock_fast (salvlp);

/* Get ptr to branch and lock parent directory. */

	root = "0"b;
	call sum$getbranch_root_my (dp, typelock, ep, code);
	if code = 0 then unlock_parent = "1"b;
	else if code = error_table_$root then root = "1"b;
	else if code ^= error_table_$mylock then
	     call syserr$error_code (CRASH, code, "^a: error from sum on ^p", WHOAMI, dp);

/* Get pathname and print salvage message. */

	path_name, dir_name, ename = "";
	call get_pathname_ (segno (dp), path_name, code);
	if code ^= 0 then call syserr$error_code (CRASH, code, "^a: Getting pathname of ^p", WHOAMI, dp);

	i = index (reverse (path_name), ">");
	l = length (path_name);
	dir_name_len = max (l - i, 1);
	if dir_name_len = 1 then dir_name_len = 0;
	dir_name = substr (path_name, 1, dir_name_len);
	ename = substr (path_name, l + 2 - i, i - 1);

	call date_time_ (clock (), entry_time);

	args.pathname = path_name;
	call salvager$online (addr (args));
	call syserr (ANNOUNCE, "^a: Begin salvaging of directory ^a for ^a", WHOAMI, args.pathname,
	     pds$process_group_id);

/* Put out the first message */

	call salv_err_msg (SALV_JUST_LOG, "^a:Begin salvaging of directory ^a for ^a", entry_time, args.pathname,
	     pds$process_group_id);

	call get_dumps;
	old_modify = (dir.modify ^= "0"b);
	dir.modify = "0"b;

	call salv_directory$online_salvage (addr (args), ep, dp, a_code);

	if unlock_parent then call lock$dir_unlock (ptr (ep, 0));
	call salv_err_msg (SALV_ANNOUNCE, "on_line_salvager: salvaging completed.");

	call lock$unlock_fast (salvlp);

/* Terminate user's process if the process directory was salvaged. */

	if old_modify & (substr (args.pathname, 1, 16) = ">process_dir_dir" | substr (args.pathname, 1, 4) = ">pdd")
	then if ename = substr (pds$process_dir_name, 18, 15) then do;
		call salv_err_msg (SALV_LOG, "on_line_salvager: user process ^a terminated because of bad process directory",
		     pds$process_group_id);
		a_code = error_table_$salv_pdir_procterm;
						/* Cause verify lock to terminate the process */
		end;

	return;



/* * Copy the stack and the directory into segments in >dumps.  The validation level is temporarily set to zero for
   * these copies.  No dump is made for a bad root directory, since it would have to be used in order to find >dump.
   * No dump is made for level 1 directories, since the root is locked.
   * No dump is made for the directory dumps itself or for any directories in its subtree.
   *	stack		<date/time>stack
   *	directory		<date/time>name
*/

get_dumps:
     proc;

dcl  cname_prefix char (11);

/* The root and level 1 directories get a null dir_name from fs_get$path_name */

	if dir_name = "" | substr (args.pathname, 1, 6) = ">dumps" then return;

	call level$set (0);				/* to copy dir */
	call set_privileges$dir_priv_on (set_sw);	/* allow access to copy data into >dumps */

	cname_prefix =
	     substr (entry_time, 1, 2) || substr (entry_time, 4, 2) || substr (entry_time, 7, 2) || "."
	     || substr (entry_time, 11, 6) || ".";

	call vtoc_attributes$get_info ((entry.uid), (entry.pvid), (entry.vtocx), addr (sc_info), code);
	if code ^= 0 then
	     call syserr$error_code (LOG, code, "^a: cannot get activation info on ^p", WHOAMI, dp);
	else call salv_dump_copy (dp, sc_info.csl, cname_prefix || ename);

	call salv_dump_copy (pds$stack_0_ptr, 16384, cname_prefix || "stack");
	call salv_dump_copy (addr (pds$), 4096, cname_prefix || "pds");

	call level$set (save_level);
	if set_sw = 0 then call set_privileges$dir_priv_off ((0));

	return;
     end get_dumps;

/* format: style2 */
%page;
%include quota_cell;
%page;
%include salv_args;
%page;
%include salvager_severities;
%page;
%include dir_header;
%page;
%include dir_entry;
%page;
%include salv_data;
%page;
%include sc_info;
%page;
%include syserr_constants;
%page;
%include hc_lock;

/**/

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   on_line_salvager: lock error ERROMESSAGE

   S: $crash

   T: $run

   M: The on line salvager could not lock its data base.
   $err

   A: $inform
   $recover
   Be sure that a dump is taken.

   Message:
   on_line_salvager: error from sum on PPPPP ERRORMESSAGE

   S: $crash

   T: $run

   M: The on line salvager could not access the branch for a sdirectory
   to be salvaged.
   $err

   A: $inform
   $recover

   Message:
   on_line_salvager: cannot get activation info on PPPPP ERRORMESSAGE

   S: $info

   T: $run

   M: The on line salvager could not determine the length of a directory to be
   salvaged. A truncated copy will be made in >dumps.

   A: $inform

   Message:
   on_line_salvager: Getting pathname of PPPPP

   S: $crash

   T: $run

   M: The on line  salvager cannot obtain the pathname of a directory to be
   salvaged.
   $err

   A: Take a dump.
   $inform
   $recover

   END MESSAGE DOCUMENTATION */
     end on_line_salvager;
