/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
salv_directory:
     proc (arg_info_p, message, arg_old_dir_p, arg_old_dir_len, arg_code);

/* One directory is found and salvaged.
   *
   * salv_directory		hphcs_ gate entry.  Used to invoke salvager from ring 4.
   *
   * ring0_salvage		regular call from salvager for the ring 1 salv command.
   *
   * online_salvage		Online salvager call.
*/

/****^  HISTORY COMMENTS:
  1) change(77-07-01,Barr), approve(), audit(), install():
      Written by S.E. Barr.
  2) change(79-11-01,Grady), approve(), audit(), install():
      Modified by Mike Grady to add cleanup handler.
  3) change(81-11-12,Sibert), approve(), audit(), install():
      Modified by W. Olin Sibert to set the dir.uid properly to avoid an
      online salvage when locking.
  4) change(81-12-01,Hornig), approve(), audit(), install():
      Modified by C. Hornig for 205K directories.
  5) change(82-02-01,Margulies), approve(), audit(), install():
      Modified by BIM for new salv dir locking.
  6) change(82-03-01,Bongiovanni), approve(), audit(), install():
      Modified by J. Bongiovanni to eliminate use of FSDCT.
  7) change(82-03-01,Margulies), approve(), audit(), install():
      Modified for new vtoc_attributes info.
  8) change(84-07-01,Loepere), approve(), audit(), install():
      Modified by Keith Loepere to use the new dc_find.
  9) change(84-11-01,Loepere), approve(), audit(), install():
      Modified to clean up a little.
 10) change(84-12-05,EJSharpe), approve(), audit(), install():
      Modified to use access_audit_ instead of protection_audit_.
 11) change(86-05-23,Lippard), approve(86-06-17,MCR7433),
     audit(86-06-26,Hartogs), install(86-07-11,MR12.0-1091):
      Modified by Jim Lippard to establish cleanup handler before call to
      hold_segs.
 12) change(86-11-11,Lippard), approve(86-12-08,MCR7590),
     audit(87-04-16,Dickson), install(87-04-28,MR12.1-1028):
      Modified to copy caller name correctly for printing error messages.
                                                   END HISTORY COMMENTS */


/* Parameters */

dcl  arg_branch_p ptr;				/* ONLINE: ptr to branch for directory. */
dcl  arg_code fixed bin (35);				/* 0 = salvage completed. */
dcl  arg_dp ptr;					/* ONLINE: ptr to directory. */
dcl  arg_info_p ptr;				/* ptr to argument structure */
dcl  arg_old_dir_len fixed bin;			/* RING_4: Number of words in dump segment. */
dcl  arg_old_dir_p ptr;				/* RING_4: Buffer for copy of directory. */
dcl  message char (*) var;				/* RING_4: Error message segment. */

/* Automatic */

dcl  astep (4) ptr;					/* RING_4: ptrs for segments that were entry held. */
dcl  branch_p ptr;					/* ptr to branch for directory. */
dcl  caller fixed bin;				/* Identifies the entry point */
dcl  child_dirmod bit (1) aligned;			/* changed this dir */
dcl  code fixed bin (35);
dcl  1 copy_args aligned like salv_args;		/* Copy of args for ring 4. */
dcl  dir_uid bit (36) aligned;			/* The UID in the vtoce when the dir was made known */
dcl  1 event_flags aligned like audit_event_flags;	/* specifics of the operation */
dcl  info_p ptr;					/* Copy of argument structure ptr. */
dcl  new_dir_pages fixed bin;				/* Number of pages in rebuilt directory. */
dcl  parent_dirmod bit (1) aligned;			/* changed containing dir */
dcl  root bit (1) aligned;				/* ON, if root is being salaged. */
dcl  1 root_entry aligned like entry;			/* Dummy branch for the root. */
dcl  set_security_oosw bit (1) aligned;			/* ON, if the security_oosw in branch should be set. */
dcl  should_dump bit (1) aligned;			/* ON, if the directory has not yet been dumped. */
dcl  unlock_dir bit (1) aligned;			/* ON, if directory should be unlocked. */
dcl  unlock_parent bit (1) aligned;			/* ON, if parent directory should be unlocked. */

/* Based */

dcl  1 dir_branch aligned like entry based (branch_p);
dcl  1 info aligned like salv_args based (info_p);

/* Constants */

dcl  ME char (14) int static options (constant) init ("salv_directory");
dcl  MAX_MESSAGE_SIZE fixed bin (18) int static options (constant) init (16 * 1024);
dcl  NEW_LINE char (1) int static options (constant) init ("
");
dcl  ONLINE fixed bin int static options (constant) init (3);
dcl  RING_0 fixed bin int static options (constant) init (1);
dcl  RING_4 fixed bin int static options (constant) init (2);
dcl  packed_null ptr unal int static options (constant) init (null ());

/* External */

dcl  access_operations_$fs_obj_set_soos bit (36) aligned external;
dcl  error_table_$ external static;
dcl  error_table_$no_terminal_quota fixed bin (35) external;
dcl  error_table_$mylock fixed bin (35) external static;
dcl  pds$processid bit (36) aligned external static;
dcl  pvt$root_lvid bit (36) aligned external;
dcl  pvt$root_pvid bit (36) aligned external;
dcl  pvt$root_vtocx fixed bin (17) external;
dcl  sys_info$default_dir_max_length fixed bin (19) external;

/* Entries */

dcl  access_audit_$log_obj_class entry options (variable);
dcl  arg_count_ entry returns (fixed bin);
dcl  arg_list_ptr_ entry returns (pointer);
dcl  dir_dump entry (ptr, fixed bin);
dcl  formline_ entry (fixed bin, fixed bin, ptr, fixed bin, fixed bin (35));
dcl  grab_aste$prewithdraw entry (ptr, fixed bin (18), fixed bin (35)) returns (ptr);
dcl  grab_aste$release_prewithdraw entry (ptr);
dcl  level$get entry () returns (fixed bin);
dcl  lock$dir_unlock entry (pointer);
dcl  lock$dir_unlock_given_uid entry (bit (36) aligned);
dcl  salv_dir_checker_ entry (ptr, ptr, entry, bit (1) aligned, fixed bin);
dcl  salv_check_vtoce_ entry (ptr, char (*), bit (1) aligned, entry);
dcl  salv_err_msg$path entry options (variable);
dcl  sum$dirmod entry (pointer);
dcl  sum$getbranch_root_my entry (ptr, bit (1) aligned, ptr, fixed bin (35));
dcl  syserr entry options (variable);
dcl  truncate_vtoce entry (ptr, fixed bin, fixed bin (35));
dcl  vtoc_attributes$get_info entry (bit (36) aligned, bit (36) aligned, fixed bin, ptr, fixed bin (35));
dcl  vtoc_attributes$set_max_lth
	entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin (9), bit (1) aligned, fixed bin (35));

/* Misc */

dcl  cleanup condition;

dcl  (addr, baseno, divide, hbound, length, min, null, ptr, rel, rtrim, string, substr, unspec) builtin;
%page;
/* Copy arguments and entry hold segments. */

	call setup;
	caller = RING_4;
	arg_old_dir_len = 0;
	copy_args = arg_info_p -> salv_args;
	info_p = addr (copy_args);

	goto START;


ring0_salvage:
     entry (arg_info_p, arg_code);

	call setup;
	caller = RING_0;
	info_p = arg_info_p;
	goto START;


/* ONLINE:  Already have pointers to the branch and the directory. */
/*	  and the appropriate locks are locked */

online_salvage:
     entry (arg_info_p, arg_branch_p, arg_dp, arg_code);

	call setup;
	info_p = arg_info_p;
	branch_p = arg_branch_p;
	dp = arg_dp;
	caller = ONLINE;


START:
	arg_code = 0;


/* We do not want to allow verify_lock to salvage (again) the directory */
/* in which the salvager has just taken a fault. This can cause locking */
/* difficulties, and is generally not very useful. Since salvager.pl1 */
/* has an any_other handler that hand-calls verify_lock, we have to */
/* always have a cleanup handler to unlock our locks, so that verify_lock */
/* will not find them. salvager makes an explicit call to the unwinder */
/* to insure that our cleanup handler runs. */

	unlock_dir, unlock_parent = "0"b;

	on cleanup call clean_up;

	if caller = RING_4 then do;
	     call hold_segs (code);
	     if code ^= 0 then do;
		arg_code = code;
		call rel_segs;
		return;
		end;
	     end;

	call get_dir (code);
	if code = 0 then do;

/* Fill information for this directory: master_dir_uid, tree depth, branch_ptr. */
	     should_dump = info.dump;

	     if dir_branch.master_dir
	     then info.master_dir_uid = dir_branch.uid;
	     else info.master_dir_uid = ptr (branch_p, 0) -> dir.master_dir_uid;

	     if root
	     then info.tree_depth = 0;
	     else info.tree_depth = ptr (branch_p, 0) -> dir.tree_depth + 1;

	     info.branch_ptr = branch_p;

/* current length and quota */

	     call vtoc_attributes$get_info ((dir_branch.uid), (dir_branch.pvid), (dir_branch.vtocx), addr (sc_info),
		code);
	     if code = 0 then do;
		info.current_length = divide (sc_info.csl + 1023, 1024, 17, 0);
		if sc_info.msl ^= sys_info$default_dir_max_length then do;
		     call vtoc_attributes$set_max_lth ((dir_branch.uid), (dir_branch.pvid), (dir_branch.vtocx),
			divide (sys_info$default_dir_max_length, 1024, 9, 0), "0"b, code);
		     if code = 0
		     then call print (SALV_LOG, ME, "Changed max length in VTOCE from ^d to ^d.", sc_info.msl,
			     sys_info$default_dir_max_length);
		     else call print_code (SALV_LOG, ME, code, "Changing max length in VTOCE.");
		     end;

		call salv_dir_checker_ (dp, info_p, print, set_security_oosw, new_dir_pages);

/* If the directory was rebuilt (new_dir_pages > 0), then print error message and truncate the directory. */
		if new_dir_pages > 0 then do;
		     child_dirmod = "1"b;

		     if new_dir_pages < info.current_length then do;
			call truncate_vtoce (branch_p, new_dir_pages, code);
			if code ^= 0
			then call print_code (SALV_ANNOUNCE, ME, code, "truncate_vtoce to length ^d failed.",
				new_dir_pages);
			code = 0;
			end;
		     end;
		call check_upgraded_dir;
		if set_security_oosw then do;
		     dir_branch.security_oosw = "1"b;
		     parent_dirmod = "1"b;
		     end;

		if info.check_vtoce
		then call salv_check_vtoce_ (dp, (info.pathname), (info.delete_connection_failure), print_code);
						/* Call protection audit for any branches that are security out-of-service. */

		do ep = ptr (dp, dir.entryfrp) repeat ptr (dp, entry.efrp) while (rel (ep));

		     if entry.bs
		     then if entry.security_oosw then do;
			     call print (SALV_LOG, ME,
				"Branch is security out-of-service: " || addr (entry.primary_name) -> names.name);
			     string(event_flags) = ""b;
			     event_flags.special_op = "1"b;
			     event_flags.grant = "1"b; /* we're not doing anything but auditing */
			     if caller = RING_4
			     then event_flags.priv_op = "1"b;
			     call access_audit_$log_obj_class ("salv_directory", level$get(),
				string(event_flags), access_operations_$fs_obj_set_soos,
				entry.access_class, target (info.pathname,
				(addr(entry.primary_name)->names.name)), 0, null(), 0,
				"switch found already on");

			     end;

		end;
		end;
	     end;
	call clean_up;

	if code ^= 0 then do;			/* vtoc_attributes$get_info failed */
	     call print_code (SALV_ANNOUNCE, ME, code, "Could not read VTOCE attributes.");
	     arg_code = code;
	     end;

	return;
%page;
/* AIM - Upgraded directories must have non-zero quota.  If such a directory is found, it will be
   set security out-of-service */
check_upgraded_dir:
     proc;

dcl  1 quota_info aligned like quota_cell defined (sc_info.qcell (0));

	if root then return;
	if ptr (branch_p, 0) -> dir.access_class = dir.access_class then return;
	if quota_info.quota = 0 then do;
	     call print (SALV_ANNOUNCE, ME, "Upgraded dir set security out-of-service due to no quota.");
	     string(event_flags) = ""b;
	     event_flags.special_op = "1"b;
	     event_flags.grant = "1"b;
	     if caller = RING_4
	     then event_flags.priv_op = "1"b;
	     call access_audit_$log_obj_class ("salv_directory", level$get(),
		string(event_flags), access_operations_$fs_obj_set_soos, dir.access_class,
		info.pathname, error_table_$no_terminal_quota, null(), 0);
	     set_security_oosw = "1"b;
	     end;

     end check_upgraded_dir;
%page;
get_dir:
     proc (code);

dcl  code fixed bin (35) parameter;

	root = (info.pathname = ">");
	code = 0;


/* Directory and parent are already locked in the online case. */

	if caller = ONLINE then do;
	     if root then call setup_root_branch;
	     return;
	     end;

/* Find and lock directory.  If the directory is out-of-service, salvage anyway. */

	call dc_find$dir_salvage (info.pathname, dir_uid, dp, code);
	if code ^= 0 then return;
	unlock_dir = "1"b;

	dir.modify = pds$processid;

/* Lock the parent directory and get the branch.  The root needs a phony branch. */

	if root
	then call setup_root_branch;
	else do;
	     call sum$getbranch_root_my (dp, "1"b, branch_p, code);
	     if code = 0
	     then unlock_parent = "1"b;
	     else if code ^= error_table_$mylock then return;
	     end;

	return;

     end get_dir;
%page;
hold_segs:
     proc (code);

dcl  code fixed bin (35) parameter;

	astep (*) = null;

/* Message segment. */
	astep (1) = grab_aste$prewithdraw (addr (message), MAX_MESSAGE_SIZE, code);
	if code ^= 0 then return;

/* Copy of directory for the case of a dump */
	if info.dump then do;
	     astep (2) = grab_aste$prewithdraw (arg_old_dir_p, 255 * 1024, code);
	     if code ^= 0 then return;
	     end;

/* Storage image of the directory is 1/4th of the size of the directory. */

	astep (3) = grab_aste$prewithdraw (info.temp2_ptr, 64 * 1024, code);
	if code ^= 0 then return;

/* Rebuilt directory. */

	astep (4) = grab_aste$prewithdraw (info.temp1_ptr, 255 * 1024, code);
	return;

     end hold_segs;
%page;
clean_up:
     proc;

/* On non-RING_0 salvages we could leave it to verify_lock to */
/* clean things up, but that would produce salvages of parent dirs. */

	if dp ^= null then dir.modify = "0"b;

	if child_dirmod
	then call sum$dirmod (dp);
	else if parent_dirmod then call sum$dirmod (ptr (branch_p, 0));

	if unlock_dir then call lock$dir_unlock_given_uid (dir_uid);
	if unlock_parent then call lock$dir_unlock (ptr (branch_p, 0));
	if dp ^= null then call dc_find$finished (dp, "0"b);

	if caller = RING_4 then call rel_segs;

     end clean_up;



rel_segs:
     proc;

dcl  i fixed bin;

	do i = 1 to hbound (astep, 1);
	     if astep (i) ^= null then call grab_aste$release_prewithdraw (astep (i));
	end;

     end rel_segs;
%page;
print:
     procedure options (variable);


dcl  arg_list_arg_count fixed bin;
dcl  arg_list_ptr pointer;
dcl  caller_name char (32);
dcl  copy_len fixed bin;
dcl  have_code bit (1) aligned;			/* ON, if non-zero code was specified with call. */
dcl  line char (256);				/* Complete output line. */
dcl  line_len fixed bin;				/* Number of characters for output */
dcl  msg_len fixed bin;				/* Number of characters in error_table_message. */
dcl  msg_p ptr unal;				/* ptr to error_table_ message structure. */
dcl  pic pic "99";
dcl  severity fixed bin;				/* copy of severity level. */
dcl  start fixed bin;				/* index of 1st arg for message. */
dcl  string char (253) defined (line) pos (3);		/* Message from formline. */

dcl  based_code fixed bin (35) based;
dcl  based_severity fixed bin based;
dcl  based_caller_name char (32) based;
dcl  copy (copy_len) bit (36) based;
dcl  1 et aligned based (msg_p),			/* An error_table_ message */
       2 len fixed bin (8) unal,			/* Length of the message */
       2 msg char (et.len) unal;			/* The message */
%page;
	have_code = "0"b;
	start = 3;
	goto FORMAT;

print_code:
     entry options (variable);

	have_code = "1"b;				/* can correct later if code = 0 */
	start = 4;

FORMAT:						/* Format line:  <blank> <blank> <message> <new_line>    */
	arg_list_ptr = arg_list_ptr_ ();
	arg_list_arg_count = arg_count_ ();

	if arg_list_arg_count < 3 then call syserr (CRASH, "salv_directory: Invalid call to error message printer.");

	severity = arg_list_ptr -> arg_list_with_envptr.arg_ptrs (1) -> based_severity;
	caller_name = substr (arg_list_ptr -> arg_list_with_envptr.arg_ptrs (2) -> based_caller_name,
	     1, arg_list_ptr -> arg_list_with_envptr.desc_ptrs (2) -> arg_descriptor.size);
	if have_code
	then code = arg_list_ptr -> arg_list_with_envptr.arg_ptrs (3) -> based_code;
	else code = 0;
	if code = 0 then have_code = "0"b;		/* dont bother to print null message */

	line_len = length (string);
	call formline_ (start, start + 1, addr (string), line_len, (0));
	line_len = length (rtrim (substr (string, 1, line_len)));
	substr (line, 1, 2) = "";
	line_len = line_len + 2;

/* Add error_table_ message. Interpret code as a packed ptr that points to the error message. */

	if have_code then do;
	     unspec (msg_p) = unspec (code);
	     if baseno (msg_p) = baseno (packed_null) then do;
		msg_p = ptr (addr (error_table_$), rel (msg_p));
		msg_len = min (length (line) - line_len, et.len + 1);
		if msg_len > 0 then do;
		     substr (line, line_len + 1, msg_len) = " " || et.msg;
		     line_len = line_len + msg_len;
		     end;
		end;
	     end;


/* Put message in ring 4 segment or call hardcore print routine */

	if caller = RING_4 then do;
	     pic = severity;
	     if length (message) + line_len < MAX_MESSAGE_SIZE then do;
		message = message || pic;
		message = message || substr (line, 1, line_len) || NEW_LINE;
		if (severity = SALV_DEBUG) & should_dump then do;
		     copy_len, arg_old_dir_len = info.current_length * 1024;
		     arg_old_dir_p -> copy = dp -> copy;
		     should_dump = "0"b;
		     end;
		end;
	     end;
	else do;
	     call salv_err_msg$path (severity, info.pathname, rtrim (caller_name) || ": " || substr (line, 1, line_len));
	     if (severity = SALV_DEBUG) & should_dump then do;
		call dir_dump (dp, info.current_length);
		should_dump = "0"b;
		end;
	     end;

     end print;
%page;
setup_root_branch:
     procedure;

	branch_p = addr (root_entry);
	unspec (root_entry) = "0"b;
	root_entry.uid, root_entry.owner = (36)"1"b;
	root_entry.pvid = pvt$root_pvid;
	root_entry.sons_lvid = pvt$root_lvid;
	root_entry.vtocx = pvt$root_vtocx;
	root_entry.dirsw = "1"b;
	root_entry.master_dir = "1"b;
	root_entry.name_frp = rel (addr (root_entry.primary_name));
	addr (root_entry.primary_name) -> names.name = ">";
	root_entry.per_process_sw = "0"b;
	root_entry.bs = "1"b;
	root_entry.access_class = "0"b;

     end setup_root_branch;

setup:
     procedure;

/* Initialize here for benefit of handlers */

	dp, branch_p = null ();
	unlock_dir, unlock_parent = "0"b;
	parent_dirmod, child_dirmod = "0"b;
     end setup;
%page;
target: proc (dir, ent) returns (char (*));

dcl	dir	char (*) parameter;
dcl	ent	char (*) parameter;

	if dir = ">"
	then return (">"||ent);
	else return (rtrim(dir)||">"||ent);

     end target;
%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include dc_find_dcls;
%page;
%include dir_allocation_area;
%page;
%include dir_entry;
%page;
%include dir_header;
%page;
%include dir_name;
%page;
%include quota_cell;
%page;
%include salv_args;
%page;
%include salvager_severities;
%page;
%include sc_info;
%page;
%include syserr_constants;
%page;
%include access_audit_eventflags;
%page;

/* BEGIN MESSAGE DOCUMENTAION

   Message:
   AUDIT (salv_directory): GRANTED modification of security out-of-service ADDED_INFO switch found already on

   S:	$access_audit

   T:	Salvaging

   M:	At a previous time the system set the branch security out-of-service
   because of an AIM error.

   A:	$inform_ssa


   Message:
   AUDIT (salv_directory): GRANTED modification of security out-of-service ADDED_INFO

   S:	$access_audit

   T:	Salvaging

   M:	The directory has a different access class from its parent and
   it has no quota.  This is an AIM violation.

   A:	$inform_ssa

   Message:
   salv_directory: Changed max length in VTOCE from LENGTH to MAXLENGTH.

   S:     $log

   T:     Salvaging

   M:     The max length of a directory was changed to the system default.

   A:     $ignore


   Message:
   salv_directory: ERROR_MESSAGE. Changing max length in VTOCE.

   S:     $log

   T:     Salvaging

   M:     An error occurred while changing a dir's max length.

   A:     $inform


   Message:
   salv_directory: ERROR_MESSAGE. truncate_vtoce to length LENGTH failed.

   S:     $log

   T:     Salvaging

   M:     An error occurred while truncating a directory.

   A:     $inform


   Message:
   salv_directory: Branch is security out-of-service: BRANCH_NAME

   S:     $log

   T:     Salvaging

   M:     A branch is security out-of-service.

   A:     $inform_ssa


   Message:
   salv_directory: ERROR_MESSAGE. Could not read VTOCE attributes.

   S:     $log

   T:     Salvaging

   M:     An error occurred while reading the VTOCE.

   A:     $inform_sa


   Message:
   salv_directory: Upgraded dir set security out-of-service due to no quota.

   S:     $log

   T:     Salvaging

   M:     An upgraded directory was set soos due to not having terminal quota.

   A:     $inform_ssa


   Message:
   salv_directory: Invalid call to error message printer.

   S:     $log

   T:     Salvaging

   M:     An programming error resulted in an invalid call to the error
   message printing procedure.

   A:     $inform

   END MESSAGE DOCUMENTATION */

     end salv_directory;
