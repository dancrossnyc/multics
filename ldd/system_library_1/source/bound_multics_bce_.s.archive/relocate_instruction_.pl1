/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


relocate_instruction_: procedure (from, to, code);

/* Fixed to relocate tsxN and tspN instructions properly 04/25/84 S. Herbst */
/* Removed above fix, since it causes some after breaks after calls to be ignored 12/04/84 Steve Herbst */
/* Modified to move code into hardcore for bce, Keith Loepere, March 1985. */

dcl (from pointer,					/* to instruction to be relocated */
     to pointer,					/* location to relocate it to */
     p_delta fixed bin (17),				/* what to add to instr offset */
     p_instruction_len fixed bin,			/* length, with eis descr */
     p_special fixed bin,				/* eis descrs */
     code fixed bin (35)) parameter;			/* error code */

dcl  (op_index, tra_index, tra_target) fixed bin;
dcl  tra_modifier bit (6) unaligned;
dcl  (op_name, new_op_name) char (6);
dcl  delta fixed bin (17);				/* offset from "from" to "to" */
dcl  relocate_sw bit (1);
dcl  instruction_len fixed bin;
dcl  special fixed bin;
dcl  new_operand bit (36) aligned based (addr (operand));
dcl  i fixed bin;
dcl  (high_bound, low_bound) fixed bin;
dcl  word bit (36) aligned based;

dcl 1 instruction aligned,				/* overlay for normal instruction */
    2 address fixed bin (17) unaligned,
    2 opcode bit (10) unaligned,
    2 inst_pad bit (2) unaligned,
    2 modifier bit (6) unaligned;

dcl 1 eis_mod aligned,				/* format of the modifier */
    2 mod_pad bit (2) unaligned,
    2 indirect bit (1) unaligned,
    2 register bit (4) unaligned;

dcl 1 operand aligned,				/* overlay for descriptor or indirect word */
    2 operand_addr fixed bin (17) unaligned,
    2 op_pad bit (14) unaligned,
    2 operand_reg bit (4) unaligned;

dcl  mod_offset (3) fixed bin internal static options (constant) init
    (30, 12, 3);					/* offset of modifier fields in an EIS inst */

dcl  inst_length_ entry (ptr, fixed bin) returns (fixed bin);

dcl  error_table_$action_not_performed fixed bin (35) external static;

dcl (addr, addrel, bin, bit, fixed, hbound, lbound, rel, string, substr, unspec) builtin;

	delta = fixed (rel (from), 18, 0) - fixed (rel (to), 18, 0); /* compute for later */
	instruction_len = inst_length_ (from, special);
	if instruction_len = 0 then goto arrgh;

common:	unspec (instruction) = from -> word;
	op_index = fixed (instruction.opcode, 10, 0);
	op_name = op_mnemonic_$op_mnemonic (op_index).opcode;

	if instruction_len = 1 then do;		/* normal instruction, check for ic and ic* modifiers */
	     relocate_sw = "0"b;
	     if special = 0 then do;
		if instruction.modifier = "110100"b then  /* *ic, cannot relocate target */
		     goto arrgh;
		if instruction.modifier = "000100"b | instruction.modifier = "010100"b then do;
		     relocate_sw = "1"b;
		     instruction.address = instruction.address + delta;
		end;
	     end;

/* The following code is commented out because it causes breaks after call
   statements to be ignored. It was originally put here to prevent the
   following bug: Suppose you -
	1. Set a break after a call statement.
	2. Execute the call statement and stop in the called program.
	3. Reset the break.
	4. Return from the call.
   You return to the instruction in the break code after the instruction in
   the break code that actually made the call, but the break code is no longer
   there. This happened in rare cases to users and caused unsightly faults.

   One way to do a break after a tsxN or tspN instruction is to really set a
   before break at the next instruction, but mark it with a flag that tells
   the rest of probe to pretend that it's an after break at the right
   instruction. I leave this as a future change.  Steve Herbst 12/04/84 */

/*OUT	     if substr (op_name, 1, 3) = "tsp" | substr (op_name, 1, 3) = "tsx" then do;
/*OUT		tra_target = instruction.address;	/* save the computed target of transfer */
/*OUT		if relocate_sw then tra_target = tra_target - 1;
/*OUT		tra_modifier = instruction.modifier;
/*OUT		if substr (op_name, 1, 3) = "tsp" then new_op_name = "epp" || substr (op_name, 4, 1);
/*OUT		else new_op_name = "eax" || substr (op_name, 4, 1);
/*OUT
/*OUT		low_bound = lbound (op_mnemonic_$op_mnemonic, 1);
/*OUT		high_bound = hbound (op_mnemonic_$op_mnemonic, 1);
/*OUT						/* find out what number a "tra" is */
/*OUT		do i = low_bound to high_bound while
/*OUT		     (op_mnemonic_$op_mnemonic (i).opcode ^= "tra"); end;
/*OUT		if i > high_bound then go to NOT_TS;	/* should never happen */
/*OUT		tra_index = i;
/*OUT						/* now find out what number opcode we're creating */
/*OUT		do i = low_bound to high_bound while
/*OUT		     (op_mnemonic_$op_mnemonic (i).opcode ^= new_op_name); end;
/*OUT		if i > high_bound then go to NOT_TS;	/* tsxN with unrecognized N? */
/*OUT
/*OUT		unspec (instruction) = "0"b;
/*OUT		instruction.opcode = bit (bin (i, 10), 10);
/*OUT		instruction.address = fixed (rel (from), 18) + 1;
/*OUT		instruction.modifier = "000000"b;
/*OUT		to -> word = unspec (instruction);
/*OUT
/*OUT		instruction.opcode = bit (bin (tra_index, 10), 10);
/*OUT		instruction.address = tra_target;
/*OUT		instruction.modifier = tra_modifier;
/*OUT		addrel (to, 1) -> word = unspec (instruction);
/*OUT	     end;
/*OUT	     else  OUT*/

NOT_TS:		to -> word = unspec (instruction);	/* move it to its new home */
	end;

	else do;					/* EIS instruction	*/
	     to -> word = unspec (instruction);	/* first word requires no relocation */
	     do i = 1 to special;			/* process each descriptor */
		string (eis_mod) = substr (unspec (instruction), mod_offset (i), 7);
		string (new_operand) = addrel (from, i) -> word; /* pick up descriptor or indirect word */
		if indirect then do;		/* indirect word */
		     if register = "0100"b then	/* descriptor will ultimately have an ic mod */
			goto arrgh;		/* same problem as *ic */
		     if operand_reg = "0100"b then	/* indirect word has an ic modifier */
			operand_addr = operand_addr + delta;
		end;
		else if register = "0100"b then	/* descriptor with ic mod from instruction */
		     operand_addr = operand_addr + delta;
		addrel (to, i) -> word = string (new_operand); /* move this operand to new location */
	     end;

	     do i = special + 1 to instruction_len - 1;	/* process non-EIS descriptors, eg.: arg 100,ic */
		unspec (instruction) = addrel (from, i) -> word;
		if instruction.modifier = "110100"b then  /* relocate like a simple instruction */
		     goto arrgh;
		if instruction.modifier = "000100"b | instruction.modifier = "010100"b then
		     instruction.address = instruction.address + delta;
		addrel (to, i) -> word = unspec (instruction);
	     end;
	end;

	return;

arrgh:	code = error_table_$action_not_performed;
	return;
%page;
bce_relocate_instruction_: entry (from, to, p_delta, p_instruction_len, p_special, code);

	delta = p_delta;
	instruction_len = p_instruction_len;
	special = p_special;
	go to common;
%page;
%include op_mnemonic_format;


     end relocate_instruction_;

