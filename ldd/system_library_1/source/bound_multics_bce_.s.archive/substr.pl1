/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(80-10-31,Herbst), approve(), audit(), install():
     TR6700 Add uppercase -leading 10/31/80 S. Herbst
  2) change(83-10-03,Spitzer), approve(), audit(), install():
     TR11275 correct error msg for cpch 10/03/83 C. Spitzer
  3) change(84-01-03,Loepere), approve(), audit(), install():
     use ioa_ for bce compatibility 01/03/84 K. Loepere
  4) change(85-01-04,Lippard), approve(85-01-23,MCR7151),
     audit(85-11-07,Spitzer), install(86-02-21,MR12.0-1024):
     Add reverse_substr 01/04/85 Jim Lippard
                                                   END HISTORY COMMENTS */


substr:	procedure;

     dcl
	Larg (3)			fixed bin,
	Lret			fixed bin,
	Nargs			fixed bin,
	Npic			pic "(10)z9",
	Parg (3)			ptr,
	Pret			ptr,
	Scommand			bit (1) aligned,
	arg_ptr			entry (fixed bin, ptr, fixed bin, fixed bin(35)) variable,
	args_sw			bit (1),
	bit3			bit(3) aligned,
	bit4			bit(4) aligned,
	char3			char(3) aligned,
	char4			char(4) aligned,
         (cleanup, conversion)	condition,
	code			fixed bin(35),
	e			fixed bin,
	error			entry options (variable) variable,
         (i, j, n)			fixed bin,
	leading_sw		bit (1);
	
     dcl
	arg1			char(Larg(1)) based (Parg(1)),
	arg2			char(Larg(2)) based (Parg(2)),
	arg3			char(Larg(3)) based (Parg(3)),
	ret			char(Lret) varying based (Pret);

     dcl (addr, after, before, bit, bool, character, collate, collate9, convert, copy, decat,
	high, high9, index, length, low, ltrim, min, null, reverse, rtrim, search,
	substr, translate, verify)
				builtin;

     dcl
	active_fnc_err_		entry options (variable),
	com_err_			entry options (variable),
         (cu_$af_return_arg,
	cu_$af_arg_ptr,
	cu_$arg_ptr)		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	cu_$arg_count		entry returns (fixed bin),
         (get_temp_segment_,
	release_temp_segment_)	entry (char(*), ptr, fixed bin(35)),
	ioa_			entry() options(variable);

     dcl
	UP_A			char (2) int static options (constant) init ("^a"),
	UPPERCASE			char (26) aligned int static options (constant) init
					("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
	LOWERCASE			char (26) aligned int static options (constant) init
					("abcdefghijklmnopqrstuvwxyz"),
         (error_table_$bad_arg,
	error_table_$bad_conversion,
	error_table_$badopt,
	error_table_$wrong_no_of_args)
				fixed bin(35) ext static,

	ep (28)			char(15) int static options(constant) init (
				     "after",	/* Name of entry points supported herein.	*/
				     "before",
				     "bool",
				     "collate",
				     "collate9",
				     "copy_characters",
				     "decat",
				     "high",
				     "high9",
				     "index",
				     "length",
				     "low",
				     "lower_case",
				     "ltrim",
				     "reverse",
				     "reverse_after",
				     "reverse_before",
				     "reverse_decat",
				     "reverse_index",
				     "reverse_search",
				     "reverse_substr",
				     "reverse_verify",
				     "rtrim",
				     "search",
				     "substr",
				     "translate",
				     "upper_case",
				     "verify"),
	max_args (28)		fixed bin int static options(constant) init (
				     2,   2,   3,   0,   0,   2,   3,   1,   1,   2,  
				     1,   1, 999,   2,   1,   2,   2,   3,   2,   2,  
				     3,   2,   2,   2,   3,   3, 999,   2),  
	min_args (28)		fixed bin int static options(constant) init (
				     2, 2, 3, 0, 0, 2, 3, 1, 1, 2,
				     1, 1, 1, 1, 1, 2, 2, 3, 2, 2,
				     2, 2, 1, 2, 2, 2, 1, 2),
	options (28)		char(52) int static options(constant) init (
				     "source_string indexing_string",
				     "source_string indexing_string",
				     "bit_string bit_string 4_bit_string",
				     "",
				     "",
				     "string number_of_copies",
				     "source_string indexing_string 3_bit_string",
				     "number_of_copies",
				     "number_of_copies",
				     "source_string indexing_string",
				     "string",
				     "number_of_copies",
				     "strings",
				     "source_string search_string",
				     "string",
				     "source_string indexing_string",
				     "source_string indexing_string",
				     "source_string indexing_string 3_bit_string",
				     "source_string indexing_string",
				     "source_string search_string",
				     "string starting_index_number {length}",
				     "source_string verify_string",
				     "source_string search_string",
				     "source_string search_string",
				     "string starting_index_number {length}",
				     "string translate_to_string {translate_from_string}",
				     "strings",
				     "source_string verify_string"),
	sys_info$max_seg_size	fixed bin(35) ext static;

      dcl TRUE			bit (1) aligned internal static options (constant) init ("1"b),
	FALSE			bit (1) aligned internal static options (constant) init ("0"b);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	e = 25;					/* substr					*/
	go to COMMON;


after:  af:	entry;

	e = 1;
	go to COMMON;


before:  be:	entry;

	e = 2;
	go to COMMON;


bool:	entry;

	e = 3;
	go to COMMON;


collate:	entry;

	e = 4;
	go to COMMON;


collate9:	entry;

	e = 5;
	go to COMMON;


copy_characters:  cpch:	entry;

	e = 6;
	go to COMMON;


decat:	entry;

	e = 7;
	go to COMMON;


high:	entry;

	e = 8;
	go to COMMON;


high9:	entry;

	e = 9;
	go to COMMON;


index:	entry;

	e = 10;
	go to COMMON;


length:  ln:	entry;

	e = 11;
	go to COMMON;


low:	entry;

	e = 12;
	go to COMMON;


lower_case: lowercase:	entry;

	e = 13;
	go to COMMON;


ltrim:	entry;

	e = 14;
	go to COMMON;


reverse:  rv:	entry;

	e = 15;
	go to COMMON;


reverse_after:  rvaf:	entry;

	e = 16;
	go to COMMON;


reverse_before:  rvbe:	entry;

	e = 17;
	go to COMMON;


reverse_decat:  rvdecat:	entry;

	e = 18;
	go to COMMON;


reverse_index:  rvindex:	entry;

	e = 19;
	go to COMMON;


reverse_search:  rvsrh:	entry;

	e = 20;
	go to COMMON;

reverse_substr:  rvsubstr:	entry;

	e = 21;
	go to COMMON;

reverse_verify:  rvverify:	entry;

	e = 22;
	go to COMMON;


rtrim:	entry;

	e = 23;
	go to COMMON;


search:  srh:	entry;

	e = 24;
	go to COMMON;


translate:	entry;

	e = 26;
	go to COMMON;


upper_case: uppercase:	entry;

	e = 27;
	go to COMMON;


verify:	entry;

	e = 28;
	go to COMMON;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
COMMON:	call cu_$af_return_arg (Nargs, Pret, Lret, code);	/* get arg count, see how called, get ret val.	*/
	if code = 0 then do;			/* called as an active function.		*/
	     error = active_fnc_err_;
	     arg_ptr = cu_$af_arg_ptr;
	     Scommand = FALSE;
	     end;
	else do;					/* called as a command.			*/
	     error = com_err_;
	     arg_ptr = cu_$arg_ptr;
	     Scommand = TRUE;
	     Nargs = cu_$arg_count();
	     Pret = null;
	     on cleanup call janitor();
	     call get_temp_segment_ (ep(e), Pret, code);
	     if code ^= 0 then go to NO_TEMP_SEG;
	     Lret = (sys_info$max_seg_size - 1) * 4;
	     end;

	if Nargs < min_args(e) then			/* too few input arguments.			*/
	     go to wnoa;
	if Nargs > max_args(e) then			/* too many input arguments.			*/
	     go to wnoa;
	do i = 1 to min (Nargs, 3);			/* address input arguments.			*/
	     call arg_ptr (i, Parg(i), Larg(i), code);
	     end;		

	ret = "";					/* clear return arg.			*/
	go to do(e);				/* process according to input requirements.	*/

do( 1):						/* after.					*/
	ret = double_quotes(after(arg1,arg2));
	go to return;

do( 2):						/* before					*/
	ret = double_quotes(before (arg1, arg2));
	go to return;

do( 3):						/* bool					*/
	i = verify(arg1, "01");
	if i > 0 then do;
	     i = 1;
	     go to bad_conversion;
	     end;
	i = verify(arg2, "01");
	if i > 0 then do;
	     i = 2;
	     go to bad_conversion;
	     end;
	if Larg(3) ^= 4 then do;
	     i = 4;
	     go to bad_bit_string;
	     end;
	char4 = arg3;
	i = verify(char4, "01");
	if i > 0 then do;
	     i = 3;
	     go to bad_conversion;
	     end;
	bit4 = bit(char4, 4);
	ret = character(bool(bit(arg1), bit(arg2), bit4));
	go to return;

do( 4):						/* collate				*/
	if Scommand then				/* when invoked as a command, print collating seq	*/
	     ret = collate();
	else do;
	     ret = """";
	     ret = ret || substr (collate(),1,35);
	     ret = ret || substr (collate(),35);	/* double the quote in the quoted string.	*/
	     ret = ret || """";
	     end;
	go to return;

do( 5):						/* collate9				*/
	if Scommand then
	     ret = collate9();
	else do;
	     ret = """";
	     ret = ret || substr (collate(),1,35);
	     ret = ret || substr (collate9(),35);
	     ret = ret || """";
	     end;
	go to return;

do( 6):						/* copy					*/
	on conversion begin;
	     i = 2;
	     go to bad_conversion;
	     end;
	n = convert(n, arg2);
	revert conversion;
	if n < 0 then do;
	     i = 2;
	     go to nonnegative_arg;
	     end;
	else if n = 0 then;
	else
	     ret = double_quotes(copy (arg1, n));
	go to return;

do( 7):						/* decat					*/
	if Larg(3) ^= 3 then do;
	     i = 3;
	     go to bad_bit_string;
	     end;
	char3 = arg3;
	i = verify (char3, "01");
	if i > 0 then do;
	     i = 3;
	     go to bad_conversion;
	     end;
	bit3 = bit(char3, 3);
	ret = double_quotes(decat (arg1, arg2, bit3));
	go to return;

do( 8):						/* high					*/
do( 9):						/* high9					*/
do(12):						/* low					*/
	on conversion begin;
	     i = 1;
	     go to bad_conversion;
	     end;
	n = convert(n, arg1);
	revert conversion;
	if n < 0 then do;
	     i = 1;
	     go to nonnegative_arg;
	     end;
	else if n = 0 then
	     go to return;
	else go to do_hl(e);
do_hl(8):
	ret = high(n);
	go to return;
do_hl(9):
	ret = high9(n);
	go to return;
do_hl(12):
	ret = low(n);
	go to return;

do(10):						/* index					*/
	i = index (arg1, arg2);
ret_num:	Npic = i;
	ret = ltrim(Npic);
	go to return;

do(11):						/* length					*/
	i = Larg(1);
	go to ret_num;

do(13):						/* lower_case				*/
	do i = 1 to Nargs;
	     call arg_ptr (i, Parg (1), Larg (1), 0);
	     if ret ^= "" then ret = ret || " ";
	     ret = ret || double_quotes (translate (arg1, LOWERCASE, UPPERCASE));
	end;
	go to return;

do(14):						/* ltrim					*/
	if Nargs = 2 then
	     ret = double_quotes(ltrim(arg1, arg2));
	else ret = double_quotes(ltrim(arg1));
	go to return;

do(15):						/* reverse				*/
	if Larg(1) <= 0 then;
	else
	     ret = double_quotes(reverse (arg1));
	go to return;

do(16):						/* reverse after				*/
	if index(arg1, arg2) > 0 then
	     ret = double_quotes(reverse(before(reverse(arg1), reverse(arg2))));
	else ret = "";
	go to return;

do(17):						/* reverse before				*/
	if index(arg1, arg2) > 0 then
	     ret = double_quotes(reverse(after(reverse(arg1), reverse(arg2))));
	else ret = double_quotes(arg1);
	go to return;

do(18):						/* reverse decat				*/
	if Larg(3) ^= 3 then do;
	     i = 3;
	     go to bad_bit_string;
	     end;
	char3 = arg3;
	i = verify (char3, "01");
	if i > 0 then do;
	     i = 3;
	     go to bad_conversion;
	     end;
	bit3 = bit(char3, 3);
	if index(arg1, arg2) > 0 then
	     ret = double_quotes(reverse(decat(reverse(arg1), reverse(arg2), reverse(bit3))));
	else ret = double_quotes(decat(arg1, arg2, bit3));
	go to return;

do(19):						/* reverse_index				*/
	i = index (reverse(arg1), reverse(arg2));
	if i > 0 then
	     i = Larg(1) - i + 2 - Larg(2);
	go to ret_num;

do(20):						/* reverse_search				*/
	i = search (reverse(arg1), arg2);
	if i > 0 then
	     i = Larg(1) - i + 1;
	go to ret_num;

do(21):						/* reverse_substr				*/
	on conversion begin;
	     i = 2;
	     go to bad_conversion;
	     end;
	i = convert(i, arg2);
	revert conversion;
	if Nargs = 3 then do;
	     on conversion begin;
		i = 3;
		go to bad_conversion;
		end;
	     j = convert(j, arg3);
	     revert conversion;
	     end;
	else
	     j = Larg(1);
	if i <= 0 then do;
	     i = 2;
	     go to positive_arg;
	     end;
	else if i > Larg(1) then;
	else if j < 0 then do;
	     i = 3;
	     go to nonnegative_arg;
	     end;
	else if j = 0 then;
	else do;
	     if i+j-1 > Larg(1) then
	          j = Larg(1) - i + 1;
	     ret = double_quotes(reverse (substr (reverse (arg1), i, j)));
	     end;
	go to return;

do(22):						/* reverse_verify				*/
	i = verify (reverse(arg1), arg2);
	if i > 0 then
	     i = Larg(1) - i + 1;
	go to ret_num;

do(23):						/* rtrim					*/
	if Nargs = 2 then
	     ret = double_quotes(rtrim(arg1, arg2));
	else ret = double_quotes(rtrim(arg1));
	go to return;

do(24):						/* search					*/
	i = search (arg1, arg2);
	go to ret_num;

do(25):						/* substr					*/
	on conversion begin;
	     i = 2;
	     go to bad_conversion;
	     end;
	i = convert(i, arg2);
	revert conversion;
	if Nargs = 3 then do;
	     on conversion begin;
		i = 3;
		go to bad_conversion;
		end;
	     j = convert(j, arg3);
	     revert conversion;
	     end;
	else
	     j = Larg(1);
	if i <= 0 then do;
	     i = 2;
	     go to positive_arg;
	     end;
	else if i > Larg(1) then;
	else if j < 0 then do;
	     i = 3;
	     go to nonnegative_arg;
	     end;
	else if j = 0 then;
	else do;
	     if i+j-1 > Larg(1) then
		j = Larg(1) - i + 1;
	     ret = double_quotes(substr (arg1, i, j));
	     end;
	go to return;

do(26):						/* translate				*/
	if Nargs = 2 then
	     ret = double_quotes(translate (arg1, arg2));
	else
	     ret = double_quotes(translate (arg1, arg2, arg3));
	go to return;

do(27):						/* upper_case				*/
	args_sw, leading_sw = "0"b;
	do i = 1 to Nargs;
	     call arg_ptr (i, Parg (1), Larg (1), 0);
	     if ^args_sw & substr (arg1, 1, 1) = "-" then
		if arg1 = "-leading" then leading_sw = "1"b;
		else if arg1 = "-arguments" | arg1 = "-ag" then args_sw = "1"b;
		else do;
		     call error (error_table_$badopt, "uppercase", "^a", arg1);
		     return;
		end;
	     else do;
		args_sw = "1"b;
		if leading_sw then do;
		     if ret ^= "" then ret = ret || " ";
		     ret = ret || double_quotes (arg1);
		end;
		else do;
		     if ret ^= "" then ret = ret || " ";
		     ret = ret || double_quotes (translate (arg1, UPPERCASE, LOWERCASE));
		end;
	     end;
	end;

	if leading_sw then do;
	     substr (ret, 1, 1) = translate (substr (ret, 1, 1), UPPERCASE, LOWERCASE);
	     do i = 2 to length (ret);
		if index (LOWERCASE, substr (ret, i, 1)) ^= 0 then
		     if index (UPPERCASE || LOWERCASE || "'-", substr (ret, i - 1, 1)) = 0 then
						/* lowercase alpha preceded by nonalpha -> upper */
			substr (ret, i, 1) = translate (substr (ret, i, 1), UPPERCASE, LOWERCASE);
	     end;
	end;
	go to return;

do(28):						/* verify					*/
	i = verify (arg1, arg2);
	go to ret_num;

return:	if Scommand then do;
	     call ioa_ (UP_A, ret);
	     call release_temp_segment_ (ep(e), Pret, code);
	     end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


positive_arg:
	j = 1;
	go to bad_arg;
nonnegative_arg:
	j = 2;
bad_arg:	Parg(1) = Parg(i);
	Larg(1) = Larg(i);
	call error (error_table_$bad_arg, ep(e), " ^a
  Argument ^d must be a ^[positive^;nonnegative^] integer.", arg1, i, j);
	call janitor();
	return;

wnoa:	call error (error_table_$wrong_no_of_args, ep(e), "
  Usage:  ^[[^]^a ^a^[]^]", ^Scommand, ep(e), options(e), ^Scommand);
	call janitor();
	return;

NO_TEMP_SEG:
	call error (code, ep(e), "^/While obtaining a temporary segment.");
	return;

bad_bit_string:
	call error (error_table_$bad_arg, ep(e), " ^a
  Third argument must be a bit string of length ^d.
  Usage:	^[[^]^a ^a^[]^]", arg3, i, ^Scommand, ep(e), options(e), ^Scommand);
	call janitor();
	return;

bad_conversion:
	Parg(1) = Parg(i);
	Larg(1) = Larg(i);
	call error (error_table_$bad_conversion, ep(e), " ^a
  Usage:  ^[[^]^a ^a^[]^]", arg1, ^Scommand,ep(e), options(e), ^Scommand);
	call janitor();
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


double_quotes:	procedure (string) returns (char(*) varying);
						/* internal procedure to double all quotes in	*/
						/* a string.				*/

     dcl	string			char(*);

     dcl (i, j)			fixed bin;


     dcl 	copied_string		char(length(string)*2+2) varying;

     dcl	string_begin		char(i-1) based (addr(string_array(j))),
	string_end		char(length(string)-(j-1)) based(addr(string_array(j))),
	string_array (length(string))	char(1) based (addr(string));

	if Scommand then return (string);
	i = search(string,"""");
	if i = 0 then return("""" || string || """");
	j = 1;
	copied_string = """";
	do while (i > 0);
	     copied_string = copied_string || string_begin;
	     copied_string = copied_string || """""";
	     j = i+j;
	     i = search (string_end, """");
	     end;
	copied_string = copied_string || string_end;
	copied_string = copied_string || """";
	return (copied_string);


	end double_quotes;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


janitor: procedure;

	if  Scommand  &  Pret ^= null  then
	     call release_temp_segment_ (ep(e), Pret, code);

	end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	end substr;
