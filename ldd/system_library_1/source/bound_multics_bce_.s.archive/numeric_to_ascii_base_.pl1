/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
numeric_to_ascii_base_: proc (Aval, Aprec, Base, ans);

dcl  Aval float dec (59),				/* value to be converted. (In)		*/
     Aprec fixed bin,				/* precision of result. (In)			*/
						/*      0 ==> as many digits as a required will	*/
						/*            appear in final result.		*/
						/*     <0 ==> truncate to specified no of digits	*/
						/*     >0 ==> round to specified number of digits	*/
						/*   see numeric_to_ascii_ for description of	*/
						/*   allowed values.			*/
     Base fixed bin,				/* base to which conversion is to be done */
     ans char (72) varying;				/* resulting number. (Out)		*/

/* This is copied from numeric_to_ascii_ */
/* Modified: 10/24/83 by C Spitzer. phx15636, replace out_of_bounds condition
	   with call to sub_err_ */

dcl (new_quotient, product, quotient, saved_val, val)
     float dec (59),
    (Isignificant, exp, n, nzeros, ndigits, prec)
     fixed bin (17),
     char1 char (1),
     chars char (200) varying,
     char_exp pic "999";
dcl  sub_err_ entry() options(variable);
dcl  dig_ch (0:15) char (1) int static init (
     "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");
dcl  base float dec (3);

dcl 1 val_overlay aligned based (addr (val)),
    2 sign char (1) unal,
    2 digits char (59) unal,
    2 skip bit (1) unal,
    2 exponent fixed bin (7) unal;

dcl (abs, divide, index, length, mod, null, reverse, substr, trunc, verify) builtin;

dcl  move_r_or_t_ entry (float dec (59), float dec (59), fixed bin);

%include sub_err_flags;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	if (Base < 2)
	| (Base > 16)
	then do;
	     call sub_err_ (0, "numeric_to_ascii_base_", ACTION_CANT_RESTART, null, 0,
		"The base ""^d"" is outside of the range 2 to 16.", Base);
	end;
	base = convert (base, Base);
	prec = Aprec;
	if prec ^= 0 then do;
	     call move_r_or_t_ (val, Aval, prec);
	     prec = abs (prec);
	end;
	else do;
	     val = Aval;
	     prec = 59;
	end;

	if val = 0 then ans = "0";
	else do;

	     if val > 0 then ans = "";
	     else do;
		val = abs (val);
		ans = "-";
	     end;

	     n = verify (digits, "0");
	     nzeros = verify (reverse (digits), "0");
	     ndigits = 61 - n - nzeros;
	     exp = exponent + nzeros - 1;

	     if exp >= 0 then do;			/*	 integer value			*/
		quotient = val;
		chars = "";
		do while (quotient >= 1);		/* use method of dividing successive		*/
						/*     quotients by radix, using remainders as	*/
						/*     digits of result (low-order first).	*/
		     new_quotient = trunc (divide (quotient, base, 59));
		     char1 = dig_ch (quotient - (base * new_quotient));
		     chars = chars || char1;
		     quotient = new_quotient;
		end;
		chars = reverse (chars);

		if length (chars) > prec then call e_format ();
		else ans = ans || chars;
	     end;

	     else do;				/*	integer/fractional value		*/
		nzeros = ndigits + exp;

		if nzeros <= 0 then do;		/*	fraction only value			*/
		     product = val;
		     ans = ans || "0.";
		     do n = 1 to prec;
			product = base * product;
			char1 = dig_ch (trunc (product));
			product = product - trunc (product);
			ans = ans || char1;
		     end;
		     n = verify (reverse (ans), "0");
		     if n > 1 then ans = substr (ans, 1, length (ans) - (n-1));
		end;

		else do;				/*	both integer and fraction parts	*/
		     saved_val = val;

		     substr (val_overlay.digits, nzeros+n) = (59)"0";
		     quotient = val;
		     chars = "";
		     do while (quotient >= 1);
			new_quotient = trunc (divide (quotient, base, 59));
			char1 = dig_ch (quotient - (base * new_quotient));
			chars = chars || char1;
			quotient = new_quotient;
		     end;
		     chars = reverse (chars);
		     chars = chars || ".";

		     val = saved_val;
		     substr (val_overlay.digits, 1, nzeros+n-1) = (59)"0";
		     product = val;
		     do n = 1 to prec - (length (chars)-1);
			product = base * product;
			char1 = dig_ch (trunc (product));
			product = product - trunc (product);
			chars = chars || char1;
		     end;
		     n = verify (reverse (chars), "0");
		     if n > 1 then chars = substr (chars, 1, length (chars) - (n-1));

		     if length (chars)-1 > prec then call e_format ();
		     else ans = ans || chars;
		end;
	     end;
	end;
	return;

e_format:	procedure;

	     exp = index (chars, ".") - 1;
	     if exp = -1 then exp = length (chars);
	     else chars = substr (chars, 1, exp) || substr (chars, exp+2);

	     ans = ans || substr (chars, 1, 1);
	     ans = ans || ".";
	     ans = ans || substr (chars, 2, prec-1);

	     ans = ans || "e";
	     if exp-1 < 0 then
		ans = ans || "-";
	     else ans = ans || "+";
	     char_exp = exp-1;
	     Isignificant = verify (char_exp, "0");
	     ans = ans || substr (char_exp, Isignificant);

	end e_format;

     end numeric_to_ascii_base_;
