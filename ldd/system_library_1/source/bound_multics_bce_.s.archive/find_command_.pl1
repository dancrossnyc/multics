/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-07-18,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to call object_lib_$initiate to initiate segments and object MSFs
     when executing commands specified by pathname.
                                                   END HISTORY COMMENTS */


/* This subroutine interprets a character string as the name of an entrypoint and returns a pointer to that entry.  It is
   intended to be called by command processors to find commands and active functions.

   An associative memory of recently used commands is maintained in order to avoid using the linker when possible */

/* Initial coding:  December 1969 by R. C. Daley */
/* Rewritten:  August 1978 by G. Palter to eliminate past changes made for fast command loop */
/* Modified:  8 May 1980 by G. Palter to fix metering to avoid calling hcs_$make_ptr if metering is not enabled when first
   invoked */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
find_command_:
     procedure (a_input_name_ptr, a_input_name_lth, a_entrypoint_ptr, a_code);


/* Parameters */

dcl  a_input_name_ptr pointer;			/* -> input string to interpret */
dcl  a_input_name_lth fixed binary (21);		/* length of same */
dcl  a_entrypoint_ptr pointer;			/* -> entrypoint found (Output) */
dcl  a_code fixed binary (35);

dcl  a_input_name character (a_input_name_lth) based (a_input_name_ptr);


/* Remaining declarations */

dcl  input_name character (input_name_lth) based (input_name_ptr);
dcl  input_name_ptr pointer;
dcl  input_name_lth fixed binary (21);

dcl  (
     pathname_sw,					/* ON if pathname used */
     entrypoint_sw,					/* ON if entrypoint given */
     print_sw
     ) bit (1) aligned;				/* ON if should prin errors */

dcl  full_name character (256) varying;			/* complete name given */
dcl  1 full_name_value aligned based (addr (full_name)),
       2 lth fixed binary (21),
       2 str character (0 refer (full_name_value.lth)) unaligned;

dcl  directory_name character (168);			/* directory supplied (if any) */
dcl  segment_name character (32);			/* segment name given */
dcl  entrypoint_name character (32);			/* entrypoint suplied or "segment_name" */

dcl  code fixed binary (35);
dcl  segment_ptr pointer;
dcl  (am_idx, idx) fixed binary;


/* The associative memory */

dcl  1 memory aligned internal static,
       2 e (0:15),					/* 16 entries */
         3 name character (32) initial ((16) ("")),
         3 entrypoint_ptr pointer initial ((16) null ()),	/* -> entry for this name */
         3 usage fixed binary initial ((16) 0);		/* least-recently used counter */

dcl  HIT fixed binary static options (constant) initial (16);
						/* usage counter of just used entry */


dcl  SPACES character (2) static options (constant) initial (" 	");
						/* SP HT */
dcl  BREAKS character (3) static options (constant) initial ("<>$");

dcl  NAME character (18) static options (constant) initial ("command_processor_");
dcl  BlankCommand character (19) static options (constant) initial ("Blank command name.");
dcl  SegNotFound character (21) static options (constant) initial ("Segment ^a not found.");
dcl  NoEntryPoint character (39) static options (constant) initial ("Entry point ^a not found in segment ^a.");

dcl  (
     error_table_$bad_command_name,
     error_table_$badpath,
     error_table_$dirseg,
     error_table_$entlong,
     error_table_$namedup,
     error_table_$no_ext_sym,
     error_table_$noentry,
     error_table_$seg_not_found
     ) fixed binary (35) external;

dcl  (
     com_err_,
     com_err_$suppress_name
     ) entry () options (variable);
dcl  continue_to_signal_ entry (fixed binary (35));
dcl  find_condition_info_ entry (pointer, pointer, fixed binary (35));
dcl  expand_pathname_ entry (character (*), character (*), character (*), fixed binary (35));
dcl  get_group_id_$tag_star entry () returns (character (32) aligned);
dcl  hcs_$initiate
	entry (character (*), character (*), character (*), fixed binary (1), fixed binary (2), pointer,
	fixed binary (35));
dcl  hcs_$make_ptr entry (pointer, character (*), character (*), pointer, fixed binary (35));
dcl  hcs_$terminate_noname entry (pointer, fixed binary (35));
dcl  object_lib_$init_no_clear entry (char(*), char(*), char(*), bit(1), ptr, fixed bin(24), bit(1), fixed bin(35));

dcl  any_other condition;

dcl  (addr, hbound, lbound, length, null, reverse, rtrim, search, substr) builtin;
%page;
/* find_command_: procedure (a_input_name_ptr, a_input_name_lth, a_entrypoint_ptr, a_code); */

	print_sw = "1"b;

	go to COMMON;


/* This entry is identical to find_command_, but does not print error messages */

fc_no_message:
     entry (a_input_name_ptr, a_input_name_lth, a_entrypoint_ptr, a_code);

	print_sw = "0"b;


COMMON:
	a_code = 0;				/* initialize it sometime */

	input_name_ptr = a_input_name_ptr;		/* get input arguments */

	input_name_lth = length (rtrim (a_input_name, SPACES));
						/* strip trailing whitespace right away */
	if input_name_lth = 0 then do;		/* blank command name */
	     if print_sw then call com_err_ (0, NAME, BlankCommand);
	     a_code = error_table_$seg_not_found;	/* for lack of something better */
	     return;
	     end;


/* Parse input name into segment name, entrypoint (optional), and pathname (optional) */

	if search (input_name, BREAKS) = 0 then do;	/* simple case, a segment name only */
	     if input_name_lth > length (segment_name) then call abort (error_table_$entlong, input_name);
	     pathname_sw, entrypoint_sw = "0"b;
	     segment_name = input_name;		/* make compiler generate better code */
	     entrypoint_name = input_name;
	     full_name = input_name;			/* for error messages later on */
	     end;

	else call parse_complex_name ();		/* out of main path for efficiency */
%page;
	call meter_usage (segment_name);		/* meter its usage whether or not it works */


	if ^pathname_sw
	then					/* No pathname was supplied:  This is the simple case and is handled completely by the internal
						   procedure search_entry */
	     call search_entry ();


	else do;

/* A pathname was supplied:  It may be necessary to terminate some other segment if the reference
   name "segment_name" is already in use.  In addition, it may be necessary to clear the associative
   memory to reflect this termination. */

	     call object_lib_$init_no_clear (directory_name, segment_name, segment_name, ""b, segment_ptr, 0, (""b), code);
	     if code ^= 0
	     then if code ^= error_table_$namedup then call abort (code, full_name_value.str);

		else if search_am (segment_name, am_idx) then call set_am (am_idx, "", null (), 0);
						/* clear this entry */
	     call search_entry ();			/* now try to find the entrypoint */
	     end;


/* Here only if the entrypoint was found */

	a_code = 0;				/* a_entrypoint_ptr already set */

RETURN:
	return;
%page;
/* Clear the associative memory:  It should be called after changes are made to the address space */

clear:
     entry ();

	do idx = lbound (memory.e, 1) to hbound (memory.e, 1);
	     call set_am (idx, "", null (), 0);
	end;

	return;
%page;
/* This internal procedure parses a command name containing pathnames and entrypoints */

parse_complex_name:
     procedure ();

dcl  (entry_idx, segment_lth, entrypoint_idx, entrypoint_lth) fixed binary (21);
dcl  pathname character (entry_idx + segment_lth - 1) unaligned based (input_name_ptr);


	entry_idx = search (reverse (input_name), "<>");	/* find end of pathname */

	if entry_idx = 0 then do;			/* no pathname */
	     entry_idx = 1;
	     pathname_sw = "0"b;
	     entrypoint_sw = "1"b;			/* tentatively must have an entrypoint */
	     end;

	else do;					/* pathname given */
	     if entry_idx = 1
	     then if input_name = ">"
		then				/* trap the root right here */
		     call abort (error_table_$dirseg, input_name);
		else call abort (error_table_$badpath, input_name);
	     pathname_sw = "1"b;
	     entry_idx = input_name_lth + 2 - entry_idx;	/* index of first char after > */
	     entrypoint_sw = (search (substr (input_name, entry_idx), "$") ^= 0);
	     end;


/* Check validity of syntax of entrypoint and pathname now that it is known
   what was supplied */

	if entrypoint_sw then do;
	     segment_lth = search (substr (input_name, entry_idx), "$") - 1;
	     entrypoint_idx = entry_idx + segment_lth + 1;
	     entrypoint_lth = input_name_lth - entrypoint_idx + 1;
	     if (segment_lth = 0) | (entrypoint_lth = 0) then call abort (error_table_$bad_command_name, input_name);
	     if entrypoint_lth > length (entrypoint_name)
	     then call abort (error_table_$entlong, substr (input_name, (entrypoint_idx - 1)));
	     end;

	else segment_lth = input_name_lth - entry_idx + 1;


	if pathname_sw then do;
	     call expand_pathname_ (pathname, directory_name, segment_name, code);
						/* expand, but exclude entrypoint */
	     if code ^= 0 then call abort (code, input_name);
	     end;

	else do;
	     if segment_lth > length (segment_name)
	     then call abort (error_table_$entlong, substr (input_name, 1, segment_lth));
	     segment_name = substr (input_name, entry_idx, segment_lth);
	     end;


/* Fill in the entrypoint name, defaulting to the segment name if necessary */

	if entrypoint_sw then do;
	     entrypoint_name = substr (input_name, entrypoint_idx);
	     if search (entrypoint_name, "$") ^= 0 then call abort (error_table_$bad_command_name, input_name);
	     end;
	else entrypoint_name = segment_name;

	if entrypoint_name = segment_name then entrypoint_sw = "0"b;
						/* insure off in case he said foo$foo */


/* Set full name to include the pathname only if pathname explicitly given */

	if pathname_sw
	then if directory_name = ">"
	     then full_name = ">";
	     else do;
		full_name = rtrim (directory_name);	/* separate for better code */
		full_name = full_name || ">";
		end;
	else full_name = "";

	if entrypoint_sw then do;			/* separate statements for better code */
	     full_name = full_name || rtrim (segment_name);
	     full_name = full_name || "$";
	     full_name = full_name || entrypoint_name;
	     end;
	else full_name = full_name || segment_name;

	return;

     end parse_complex_name;
%page;
/* This internal procedure does the main work of find_command_.  It attempts to find the specified entrypoint, first
   searching the associative memory, if possible */

search_entry:
     procedure ();

dcl  am_idx fixed binary;


/* Try the assocate memory first */

	if ^entrypoint_sw
	then if search_am (segment_name, am_idx) then do;
		a_entrypoint_ptr = memory.e (am_idx).entrypoint_ptr;
		return;
		end;


/* Must call the linker */

	call hcs_$make_ptr (null (), segment_name, entrypoint_name, a_entrypoint_ptr, code);
	if code ^= 0 then call abort (code, full_name_value.str);


/* Place entry into associative memory if no entrypoint was given */

	if ^entrypoint_sw then call set_am (am_idx, segment_name, a_entrypoint_ptr, HIT);

	return;

     end search_entry;
%page;
/* These two internal procedures manage the associative memory */

/* This internal procedure searches the associative memory, returning "1"b if the given name is in the memory.  In all
   cases it returns an index, which when the entry is not found, is the index of the least-recently used entry */

search_am:
     procedure (name, am_idx) returns (bit (1) aligned);

dcl  name character (32);
dcl  am_idx fixed binary;
dcl  (oldest, idx, jdx) fixed binary;

	oldest = hbound (memory.e, 1) + 1;

	do idx = lbound (memory.e, 1) to hbound (memory.e, 1);

	     if memory.e (idx).name = name then do;
		am_idx = idx;
		memory.e (idx).usage = HIT;
		do jdx = idx + 1 to hbound (memory.e, 1);
		     memory.e (jdx).usage = memory.e (jdx).usage - 1;
		end;				/* decrement usage of rest */
		return ("1"b);			/* success */
		end;

	     memory.e (idx).usage = memory.e (idx).usage - 1;
						/* miss */
	     if memory.e (idx).usage < oldest then do;
		oldest = memory.e (idx).usage;
		am_idx = idx;
		end;
	end;

	return ("0"b);				/* not found */

     end search_am;



/* This internal procedure sets an entry in the associative memory */

set_am:
     procedure (am_idx, name, entrypoint_ptr, usage);

dcl  (am_idx, usage) fixed binary;
dcl  name character (32);
dcl  entrypoint_ptr pointer;

	memory.e (am_idx).name = name;
	memory.e (am_idx).entrypoint_ptr = entrypoint_ptr;
	memory.e (am_idx).usage = usage;

	return;

     end set_am;
%page;
/* This internal procedure aborts find_command_, printing an error message if print_sw is ON */

abort:
     procedure (code, text);

dcl  code fixed binary (35);
dcl  text character (*);

	a_entrypoint_ptr = null ();
	a_code = code;

	if print_sw
	then if (code = error_table_$seg_not_found) | (code = error_table_$noentry)
	     then call com_err_$suppress_name (0, NAME, SegNotFound, segment_name);
	     else if code = error_table_$no_ext_sym
	     then call com_err_$suppress_name (0, NAME, NoEntryPoint, entrypoint_name, segment_name);
	     else call com_err_ (code, NAME, "^a", text);

	go to RETURN;

     end abort;
%page;
/* This internal procedure enters the current segment name into the command usage metering information */

meter_usage:
     procedure (command_name);

dcl  command_name character (32);

dcl  first_call bit (1) aligned internal static initial ("1"b);
dcl  metering bit (1) aligned internal static initial ("1"b);
						/* ON => metering still in operation */

dcl  user_name character (32) internal static;

dcl  (usage_list_ptr, usage_totals_ptr) pointer internal static;
dcl  user_list_ptr pointer;

dcl  UsageList character (19) static options (constant) initial ("command_usage_list_");
dcl  UsageTotals character (21) static options (constant) initial ("command_usage_totals_");

dcl  code fixed binary (35);
dcl  idx fixed binary;
dcl  found bit (1) aligned;

%include command_usage;


	if ^metering then return;			/* metering was turned off */


	if first_call then do;			/* must initialize */

	     call hcs_$make_ptr (null (), UsageList, "", usage_list_ptr, code);
	     if code ^= 0 then do;
disable_metering:
		metering = "0"b;			/* shut off metering on an error */
		return;
		end;

	     call hcs_$make_ptr (null (), UsageTotals, "", usage_totals_ptr, code);
	     if code ^= 0 then go to disable_metering;

	     user_name = get_group_id_$tag_star ();	/* if metering by user name */
	     first_call = "0"b;			/* initialized */
	     end;


/* Search command/alias list to see if this name is being metered */

	on any_other call check_for_error ();		/* disable metering on faults */

	found = "0"b;

	do idx = 1 to usage_list.n_commands while (^found);
	     if usage_list.commands (idx).name = command_name then found = "1"b;
	end;

	if found
	then idx = idx - 1;				/* will be one too large from loop */
	else return;				/* not being metered */


/* This name is being metered */

	if ^usage_list.commands (idx).primary then idx = usage_list.commands (idx).slot;
						/* this is an alias */

	usage_totals (usage_list.commands (idx).slot) = usage_totals (usage_list.commands (idx).slot) + 1;
						/* count it */

	if ^usage_list.commands (idx).count_users then return;
						/* recording finished */

	call hcs_$initiate (usage_list.directory, (usage_list.commands (idx).name || ".usage"), "", 0b, 01b,
	     user_list_ptr, (0));
	if user_list_ptr = null () then return;

	found = "0"b;

	do idx = 1 to user_list_size while (^found);
	     if user_list (idx).name = user_name then found = "1"b;
	     else if user_list (idx).count = 0 then do;	/* not in list, add in new slot */
		user_list (idx).name = user_name;
		found = "1"b;
		end;
	end;

	if found then user_list (idx - 1).count = user_list (idx - 1).count + 1;

	call hcs_$terminate_noname (user_list_ptr, (0));

	return;


/* This internal procedure of meter_usage is called on an error to decide
   if metering should be disabled */

check_for_error:
	procedure ();

dcl  code fixed binary (35);

dcl  1 info aligned,
%include cond_info;


	     info.version = 1;

	     call find_condition_info_ (null (), addr (info), code);
	     if code ^= 0 then go to disable_metering;	/* can't get info, bad error */

	     if (info.condition_name = "alrm") | (info.condition_name = "cput") | (info.condition_name = "finish")
		| (info.condition_name = "mme2") | (info.condition_name = "program_interrupt")
		| (info.condition_name = "quit") | (info.condition_name = "trm_") | (info.condition_name = "sus_")
	     then call continue_to_signal_ ((0));	/* these conditions are allright */

	     go to disable_metering;			/* fault: turn of metering */

	end check_for_error;

     end meter_usage;

     end find_command_;
