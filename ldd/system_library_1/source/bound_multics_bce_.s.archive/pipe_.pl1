/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-07-08,GWMay), approve(87-07-08,MCR7730), audit(87-08-10,JRGray),
     install(87-09-10,MR12.1-1104):
     Created as a service routine for "command_processor_".
  2) change(87-09-10,GWMay), approve(87-09-10,MCR7730), audit(87-09-10,GDixon),
     install(87-09-10,MR12.1-1104):
     Added any_other handlers and ips interrupt masking. Added the get_word
     function for more complete analysis of the attach description. Simplified
     the pipe_info structure. Changed the pipe_info structure pointer to be
     internal static. Combined the get_string routines into one routine with a
     command branch.
                                                   END HISTORY COMMENTS */
/* format: off */
%page;
pipe_:	proc options (main);
/* ***************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
******************************************************************************

   Name: pipe_

   Function:  This subroutine supplies a set of I/O service entrypoints for
	    use by the command processor.  All iox_ calls needed to provide
	    the Multics pipe_ facility reside within this module.

   Entrypoints:

   pipe_$attach_pipe
      on the first entry per-process, creates the pipe storage area.
      Initializes variables and calls the iox_ entries that will attach the
      target attach description given as a parameter.

   pipe_$close_pipe
      calls the iox_ entrys to move the standard input or output switch to the
      attach state they were in before the pipe_$open_pipe entry was called.

   pipe_$copy
      performs a simple loop of calls to iox_ entries to get characters from
      standard input and put characters to standard output.

   pipe_$detach_pipe
      calls the iox_ entries that detach and destroy the io control block
      created by the pipe_$attach_pipe entrypoint.  Frees the information that
      was used to describe the attachment that is being released.

   pipe_$get_return_string
      calls iox_ to get characters from the specified input attachment and
      adds the information as is to a string defined by parameter input.

   pipe_$get_return_string_nnl
      same as pipe_$get_return_string except strips new_line characters.

   pipe_$initiate
      builds and returns a unique file name for use as a pipe temporary file.

   pipe_$open_pipe
      opens the target attachment made by the pipe_$attach_pipe entry, saves
      the current attachment of the standard switch in use and attaches the
      standard switch to the target attachment.

   pipe_$terminate
      deletes the pipe temporary files named by the pipe_$initiate entry and
      reinitializes name values

******************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
*************************************************************************** */
%page;
/* ***************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
******************************************************************************

entryname:  attach_pipe

   syntax:  pipe_$attach_pipe (char(*), bit(1) aligned, bit(1) aligned,
	     ptr, fixed bin(35));

  summary:  1) If the user is attempting to attach to user_input or
	     user_output, return an error.
            2) Create the pipe data area in system free area and set
	     the pointer to it.
            3) Allocate and initiate the pipe_info for this attachment.
	  4) Call iox_ to make the attachment to the parameter
	     attach description. Default to vfile_ or set the -extend
	     argument based on the parameter control.

******************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
*************************************************************************** */

attach_pipe: entry (atd,		/* (input)  - target attachment     */
	          Sdefault_to_vfile,	/* (input)  - ON = add "vfile_"     */
		Sextend,		/* (input)  - ON = odd "-extend"    */
		Ppipe_info,	/* (output) - pointer to pipe_info  */
		code);		/* (output) - error status	      */

       dcl atd			char(*) parameter;
       dcl Sdefault_to_vfile		bit (1) aligned parameter;
       dcl Sextend			bit (1) aligned parameter;
       dcl match_switch		char (32) varying;

       code = 0;
       Ppipe_info = null;

       if atd = "" then return;

       match_switch = get_word (atd, 2);
       if match_switch = "user_input" | match_switch = "user_output" then do;
	code = error_table_$cyclic_syn;
	return;
	end;

       pipe_area_info_ptr_ = get_system_free_area_ ();

       on cleanup
	call detach_pipe (Ppipe_info, ignore_code);
%page;
       allocate pipe_info in (pipe_storage_area) set (Ppipe_info);
       pipe_info.old.Piocb = null;
       pipe_info.old.switch = SPACE;
       pipe_info.old.Sdo_not_close = FALSE;
	
/* A unique string is used for the pipe switch to make the mechanism
   resemble the one use by the command environment when pushing an
   execution level. */

       unique_string = unique_chars_ ("0"b);
       pipe_info.new.Piocb = null;
       pipe_info.new.switch =	"pipe_new_" || unique_string;
       pipe_info.new.Sdo_not_close = FALSE;
	
       pipe_info.save.switch = "pipe_save_" || unique_string;
       call iox_$find_iocb (pipe_info.save.switch, pipe_info.save.Piocb, code);
       pipe_info.save.Sdo_not_close = FALSE;
       pipe_info.Spipe_file = FALSE;

       if index (atd, "pipe_file_!") > 0 then
	pipe_info.Spipe_file = TRUE;

       if Sdefault_to_vfile then do;
	if Sextend then
	   call iox_$attach_name (pipe_info.new.switch, pipe_info.new.Piocb,
	      "vfile_ " || before (ltrim(atd), SPACE) || " -extend "
	      || after (ltrim(atd), SPACE), null(), code);
          else 
	   call iox_$attach_name (pipe_info.new.switch, pipe_info.new.Piocb,
	      "vfile_ " || ltrim(atd),  null(), code);
	end;
       else
	call iox_$attach_name (pipe_info.new.switch, pipe_info.new.Piocb,
	   atd, null(), code);

       return;
%page;
/* Internal to attach_pipe.  This routine returns a given word in the
   character string word_list.  The string is always a Multics attach
   description. */

get_word: proc    (word_list,
	         word_to_return)
          returns (char (32) varying);

       dcl  word_list		char (*) unaligned,
	  word_to_return		fixed bin,
	  work_list		char (1024) varying,
	  word			char (32) varying,
	  i			fixed bin;

/* If the attach description has a target attach, use only the target
   portion of the string. */

       work_list = ltrim (after (word_list, "-target "));
       if work_list = "" then work_list = ltrim (word_list);
       do i = 1 to word_to_return;
	word = before (work_list, SPACE);
	work_list = after (work_list, SPACE);
	work_list = ltrim (work_list);
	end;

       return (word);
       end get_word;
%page;
/* ***************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
******************************************************************************

entryname:  close_pipe
   syntax:  pipe_$close_pipe (ptr, bit(1) aligned, fixed bin(35));

  summary:  1) Mask interrupts because we are moving standard I/O switches.
	  2) If the standard switch was attached when we started,
	     move it back to where it was before the open.
            3) If the target attachment was opened by the pipe_ subroutine,
	     close it.
            4) If the attachment is a pipe temporary file and the truncate
	     option is given, truncate the file.
            5) Unmask interrupts.

******************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
*************************************************************************** */

close_pipe: entry (Ppipe_info,	/* (input) - points to pipe_info    */
	         Struncate,		/* (input) - ON = truncate pipe file*/
 	         code);		/* (output)- error status           */

       dcl Struncate		bit(1) aligned parameter;

       code = 0;
       if Ppipe_info = null then return;
       if pipe_info.old.Piocb = null then return;

       if (pipe_info.save.Piocb -> iocb.open_descrip_ptr ^= null
	& pipe_info.old.Piocb -> iocb.open_descrip_ptr ^= null) then do;

	ips_mask = ""b;
	on any_other
	   call hcs_$reset_ips_mask (ips_mask, ips_mask);

	call hcs_$set_ips_mask ("0"b, ips_mask);

	call iox_$detach_iocb (pipe_info.old.Piocb, ignore_code);

	call iox_$move_attach
	   (pipe_info.save.Piocb, pipe_info.old.Piocb, ignore_code);

	call hcs_$reset_ips_mask (ips_mask, ips_mask);
	end;
       
       if pipe_info.new.Sdo_not_close then;
       else
	call iox_$close (pipe_info.new.Piocb, code);
%page;
       if code = 0 then do;
	if pipe_info.Spipe_file & Struncate then do;

	   call iox_$open (pipe_info.new.Piocb, Stream_input_output,
	      FALSE, code);

	   if code = 0 then do;
	      call iox_$position (pipe_info.new.Piocb, 0, 0, code);
	      if code = 0 then
	         call iox_$control (pipe_info.new.Piocb, "truncate",
	         null, ignore_code);
	   
	      call iox_$close (pipe_info.new.Piocb, ignore_code);
	      end;
	   end;
	end;

       return;
%page;
/* ***************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
******************************************************************************

entryname:  copy
   syntax:  pipe_$copy (ptr, ptr, fixed bin(35))

  summary:  1) If the input or output source is missing, return.
	  2) Get a temp segment to hold the data from the input source.
	  3) While there is more data available from the input source,
	     get a block of characters from the input source and
	     output it to the output source.
	  4) Release the temp segment.
 
******************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
*************************************************************************** */

copy:	entry (Pinput,		/* (input) - ptr pipe_info of input */
	       Poutput,		/* (input) - ptr pipe_info of output*/
	       code);		/* (output)- error status           */

       code = 0;
       if Pinput = null | Poutput = null then
	return;

       Pbuffer = null;
       on cleanup
	call release_temp_segment_ ("pipe_get_string", Pbuffer,
	   ignore_code);

       call get_temp_segment_ ("pipe_copy", Pbuffer, ignore_code);
       Lbuffer = CHARS_PER_SEGMENT;
       EOF = FALSE;
%page;
       do while (code = 0 & ^EOF);
	call iox_$get_chars (Pinput -> pipe_info.new.Piocb,
	   Pbuffer, Lbuffer, Lrecord, code);

	if code = error_table_$short_record then
	   code = 0;

	if code = error_table_$end_of_info then do;
	   code = 0;
	   EOF = TRUE;
	   end;

	if Lrecord > 0 then

/* If the get_chars operation did not return an error write with code
   and return any write errors. */

	   if code = 0 then call iox_$put_chars (Poutput ->
	      pipe_info.new.Piocb, Pbuffer, Lrecord, code);

/* Otherwise, flush the buffer and return the get_chars error. */

	   else call iox_$put_chars (Poutput -> pipe_info.new.Piocb,
	      Pbuffer, Lrecord, ignore_code);
	end;

       call release_temp_segment_ ("pipe_copy", Pbuffer, ignore_code);
       return;
%page;
/* ***************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
******************************************************************************

entryname:  detach_pipe
   syntax:  pipe_$detach_pipe (ptr, fixed bin(35))

  summary:  1) If not attached, return.
	  2) Detach the target attachment established by the attach_pipe
	     entry.
            3) Destroy any work io control blocks.
	  4) Free the pipe_info structure for the attachment.

******************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
*************************************************************************** */

detach_pipe: entry (Ppipe_info,	/* (input) - ptr to pipe_info to det*/
	          code);		/* (output)- error status	      */

      code = 0;

      if Ppipe_info = null then return;

      if unspec (pipe_info.new.Piocb) ^= ""b then do;
         if pipe_info.new.Piocb ^= null then do;
	  if pipe_info.new.Piocb -> iocb.attach_descrip_ptr ^= null then
	     call iox_$detach_iocb (pipe_info.new.Piocb, code);
	  call iox_$destroy_iocb (pipe_info.new.Piocb, ignore_code);
	  end;
         end;

      if unspec (pipe_info.new.Piocb) ^= ""b then
         call iox_$destroy_iocb (pipe_info.save.Piocb, ignore_code);

      free pipe_info in (pipe_storage_area);
      Ppipe_info = null;
      return;
%page;
/* ***************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
******************************************************************************

entryname:  get_return_string
	  get_return_string_nnl

   syntax:  get_return_string (ptr, ptr, fixed bin(21), fixed bin(35))
	  get_return_string_nnl (ptr, ptr, fixed bin(21), fixed bin(35))

 function:  gets characters from an input source and adds them to a character
	  string.

  summary:  1) Get a temp segment to hold the data from the input source.
	  2) While there is more data available from the input source,
	     get a block of characters from the input source and,
               a) If the remove new line control is on remove the new
	        line character from the input string.
               b) If there is room in the return string, add the input
	        character string.  Otherwise, set the error status.
	  3) Release the temp segment.

******************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
*************************************************************************** */

get_return_string: entry (Pinput,	/* (input) - ptr to pipe_info of src*/
		      Pret_string,	/* (input) - ptr to string storage  */
		      Lret_string,	/* (input) - available length of str*/
		      code);	/* (input) - error status	      */

       Sremove_new_lines = FALSE;
       go to GET_STRING_COMMON;
       

get_return_string_nnl: entry (Pinput,	/* same as get_return_string        */
		          Pret_string,
			Lret_string,
			code);

       Sremove_new_lines = TRUE;
%page;
GET_STRING_COMMON:
        
       code = 0;
       if Pinput = null then
	return;

       Pbuffer = null;
       on cleanup
	call release_temp_segment_ ("pipe_get_string", Pbuffer,
	   ignore_code);

       call get_temp_segment_ ("pipe_get_string", Pbuffer, ignore_code);
       Lbuffer = CHARS_PER_SEGMENT;
       EOF = FALSE;

       do while (code = 0 & ^EOF);

	call iox_$get_line (Pinput -> pipe_info.new.Piocb,
	   Pbuffer, Lbuffer, Lrecord, code);

	if code = error_table_$short_record then
	   code = 0;
	else
	   if code = error_table_$end_of_info then do;
	      code = 0;
	      EOF = TRUE;
	      end;

	if length(record) > 0 then do;

	   if Sremove_new_lines then do;

	      if length(ret_string) > 0 then
	         ret_string = ret_string || SPACE;

	      if substr (record, length(record), length (NL)) = NL then
	         Lrecord = Lrecord - length (NL);
	      end;

	   if (length(ret_string) + length(record))
	      > maxlength(ret_string) then
	      code = error_table_$command_line_overflow;
	   else
	      ret_string = ret_string || record;
	   end;
	end;

       call release_temp_segment_ ("pipe_get_string", Pbuffer, ignore_code);
       return;
%page;
/* ***************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
******************************************************************************

entryname:  initiate
   syntax:  pipe_$initiate (ptr)

  summary:  1) Build a unique pipe temporary file name.

******************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
*************************************************************************** */

initiate:  entry (Ppipe_atd);		/* (input) - ptr to storage for the */
				/*           pipe temp file pathname*/

dcl Ppipe_atd ptr parameter;
dcl pipe_atd char(58) based (Ppipe_atd);

       if Ppipe_atd = null then
	return;

       pipe_atd = 
	rtrim(get_pdir_ ()) || ">pipe_file_" || rtrim(unique_chars_ ("0"b));

       return;
%page;
/* ***************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
******************************************************************************

entryname:  open_pipe
   syntax:  pipe_$open_pipe (ptr, bit(1) aligned, fixed bin(35))

  summary:  1) Determine which standard I/O switch to use based on the
	     INPUT control parameter.
            2) Locate the io control block of the switch to be opened.
	     If the iocb cannot be located, there is something wrong,
	     return.
            3) Open the target attachment.
	  4) Save the current attach description of the standard switch
	     so that it can restored by the close_pipe entrypoint.
	  5) Attach the standard switch "syn_" to the target attachment.

******************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
*************************************************************************** */

open_pipe: entry (Ppipe_info,		/* (input) - ptr to pipe_info of src*/
	        INPUT,		/* (input) - ON = open for input    */
	        code);		/* (output)- error status	      */

       dcl INPUT			bit(1) aligned parameter;
       dcl mode			fixed bin;

       code = 0;
       if Ppipe_info = null then
	return;

       if INPUT then do;
	pipe_info.old.switch = "user_input";
	mode = Stream_input;
	end;
       else do;
	pipe_info.old.switch = "user_output";
	mode = Stream_output;
	end;

       call iox_$look_iocb (pipe_info.old.switch, pipe_info.old.Piocb, code);

       if code ^= 0 then return;
%page;	
       on cleanup
	call iox_$close(pipe_info.new.Piocb, code);

       call iox_$open (pipe_info.new.Piocb, mode, "0"b, code);

       if code = error_table_$file_already_opened |
	code = error_table_$not_closed then do;
	pipe_info.new.Sdo_not_close = TRUE;
	code = 0;
	end;

       if code ^= 0 then return;

       on cleanup
	call close_pipe (Ppipe_info, FALSE, ignore_code);

       ips_mask = ""b;
       on any_other
	call hcs_$reset_ips_mask (ips_mask, ips_mask);

       call hcs_$set_ips_mask ("0"b, ips_mask);

       call iox_$move_attach (pipe_info.old.Piocb, pipe_info.save.Piocb, code);

       if code = 0 then do;

	call iox_$attach_ptr (pipe_info.old.Piocb,
	   "syn_ " || pipe_info.new.switch, null(), code);

	if code ^= 0 then
	   call close_pipe (Ppipe_info, FALSE, ignore_code);

	revert cleanup;
	end;

       else
	call iox_$close(pipe_info.new.Piocb, code);

       call hcs_$reset_ips_mask (ips_mask, ips_mask);
       return;
%page;
/* ***************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
******************************************************************************

entryname:  terminate
   syntax:  pipe_$terminate (ptr, ptr, fixed bin(35))

  summary:  1) If there in an input path, expand the pathname and
	     delete it. Set the pathname to SPACE.
	  2) If there in an output path, expand the pathname and
	     delete it. Set the pathname to SPACE.

******************************************************************************
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---
*************************************************************************** */

terminate: entry (Ppipein_path,	/* (input) - ptr to input path      */
	        Ppipeout_path,	/* (input) - ptr to output path     */
	        code);		/* (output)- error status	      */

       dcl Ppipein_path		ptr parameter,
	 Ppipeout_path		ptr parameter;

       dcl pipe_path		char (58) based;

       code = 0;

       if Ppipein_path ^= null then
	if Ppipein_path -> pipe_path ^= SPACE then do;
	   call delete_$path (Ppipein_path -> pipe_path, "",
	      FILES_ONLY_FORCE_NO_QUERY, "", code);
	   Ppipein_path -> pipe_path = SPACE;
	   end;

       if Ppipeout_path ^= null then
	if Ppipeout_path -> pipe_path ^= SPACE then do;
	   call delete_$path (Ppipeout_path-> pipe_path, "",
	      FILES_ONLY_FORCE_NO_QUERY, "", code);
	   Ppipeout_path -> pipe_path = SPACE;
	   end;
       return;
%page;
       dcl Lret_string		fixed bin parameter,
	 Pinput			ptr parameter,
	 Poutput			ptr parameter,
           Pret_string		ptr parameter,
	 code			fixed bin(35) parameter,
	 Ppipe_info		ptr parameter;

       dcl pipe_area_info_ptr_	ptr internal static init (null),
	 pipe_storage_area		area based (pipe_area_info_ptr_);

       dcl 1 pipe_info		aligned based (Ppipe_info),
	   2 old,
	     3 Piocb		ptr,
	     3 switch		char(32) unaligned,
	     3 Sdo_not_close	bit (1),
             2 new			aligned like old,
	   2 save			aligned like old,
	   2 Spipe_file		bit (1);

       dcl ret_string		char (Lret_string) varying 
				based (Pret_string);

       dcl Pbuffer			ptr,
	 Lbuffer			fixed bin(21),
	 Lrecord			fixed bin(21),
	 record			char (Lrecord) based (Pbuffer);

       dcl EOF			bit (1) aligned;
       dcl Sremove_new_lines		bit (1) aligned;
       dcl ignore_code		fixed bin (35);
       dcl ips_mask			bit(36) aligned;
       dcl unique_string		char (15);

       dcl (after, before, index, length, ltrim, maxlength, null, rtrim,
	 substr, unspec)		builtin;

       dcl (any_other, cleanup)	condition;

       dcl FALSE			bit (1) aligned internal static
				options (constant) init ("0"b),
	 NL			char (1) aligned internal static
				options (constant) init ("
"),
           FILES_ONLY_FORCE_NO_QUERY	bit (36) aligned internal static
				options (constant) init
           ("100100000000000000000000000000000000"b),
           SPACE			char (1) aligned internal static
				options (constant) init (" "),
           TRUE			bit (1) aligned internal static
				options (constant) init ("1"b);
%page;
      dcl (error_table_$command_line_overflow,
	error_table_$cyclic_syn,
	error_table_$end_of_info,
	error_table_$file_already_opened,
	error_table_$not_closed,
	error_table_$short_record)
				fixed bin(35) ext static;

      dcl	delete_$path		entry (char(*), char(*), bit(36) aligned, char(*), fixed bin(35)),
	get_pdir_			entry() returns(char(168)),
	get_system_free_area_	entry() returns(ptr),
	get_temp_segment_		entry (char(*), ptr, fixed bin(35)),
	hcs_$reset_ips_mask		entry (bit(36) aligned, bit(36) aligned),
	hcs_$set_ips_mask		entry (bit(36) aligned, bit(36) aligned),
	release_temp_segment_	entry (char(*), ptr, fixed bin(35)),
	unique_chars_		entry (bit(*)) returns(char(15));
%page;
%include iocb;
%page;
%include iox_dcls;
%page;
%include iox_modes;
%page;
%include system_constants;

end pipe_;
