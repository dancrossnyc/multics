/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* Various internal interfaces of the tape_ioi_ software */
/* Written May 1982 by Chris Jones */
/* Modified 12/2/82 by Chris Jones to break out bad density from other MPC device attention errors. */
/* Modified 12/17/82 by Chris Jones to put more things into the "SI" and "DN" categories. */
/* Modified 1/5/83 by Chris Jones to look harder for valid status. */
/* Modified 2/4/83 by Chris Jones to break out blank tape on read from EOT */
/* Modified St. Valentine's day, 1983 by Chris Jones to look more carefully for status. */
/* Modified 8 March 1983 by Chris Jones to fix bug in last_status_entry_offset. */

/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
tape_ioi_utils:
     proc;

/* Parameters */

dcl	p_buffer_data_ptr	   ptr parameter;		/* (I) pointer to the data area of a buffer */
dcl	p_status_ptr	   ptr parameter;		/* (I) pointer to a ioi status structure */
dcl	p_tioi_id		   bit (36) aligned;	/* (I) tape_ioi_ activation ID */
dcl	p_wksp		   ptr parameter;		/* (I/O) pointer to the tape_ioi_ workspace */

/* Automatic variables */

dcl	buffer_data_ptr	   ptr;
dcl	buffer_idx	   fixed bin;
dcl	buffer_ptr	   ptr;
dcl	done		   bit (1) aligned;
dcl	status_entry_idx	   fixed bin (9) unsigned;
dcl	test_read		   fixed bin (35);

/* Based variables */

dcl	based_integer	   fixed bin (35) based;
dcl	1 based_tioi_id	   aligned based,
	  2 segno		   bit (18) unal,
	  2 actid		   fixed bin (18) unsigned unal;

/* Builtins and Conditions */

dcl	(addr, addrel, baseptr, mod, null, ptr, size, unspec)
			   builtin;

dcl	any_other		   condition;

/* Entry to return a pointer to the buffer header of a buffer given its data pointer */

get_buffer_ptr:
     entry (p_wksp, p_buffer_data_ptr) returns (ptr);

	wksp = p_wksp;
	buffer_data_ptr = p_buffer_data_ptr;
	if tai.buffer_count = 0 then
	     return (null ());			/* can't be for real */
	else do;
	     buffer_ptr = ptr (wksp, tai.buffer_list_offset);
	     do buffer_idx = 1 to tai.buffer_count while (ptr (wksp, buffer_ptr -> tbi.data_offset) ^= buffer_data_ptr);
		buffer_ptr = ptr (wksp, buffer_ptr -> tbi.next_buf_offset);
	     end;
	     if ptr (wksp, buffer_ptr -> tbi.data_offset) = buffer_data_ptr then
		return (buffer_ptr);
	     else return (null ());
	end;

/* entry to return a pointer to the workspace given a tape_ioi_ activation ID */
get_workspace_ptr:
     entry (p_tioi_id, p_wksp);

	on any_other
	     begin;
		goto CANT_RETURN_PTR;
	     end;

	wksp = baseptr (addr (p_tioi_id) -> based_tioi_id.segno);
	if p_tioi_id ^= unspec (tai.tioi_id) then
	     goto CANT_RETURN_PTR;

/* Make sure we can read the last word of the buffer, and write any word.  The any_other handler will trap errors. */

	test_read = ptr (wksp, tai.workspace_len) -> based_integer;
	p_wksp = wksp;
	return;

CANT_RETURN_PTR:
	p_wksp = null ();
	return;

/* entry which tells whether or not I/O is in progress on the device */


io_in_progress:
     entry (p_wksp) returns (bit (1) aligned);

	wksp = p_wksp;
	return (tai.read_queued | tai.write_queued | tai.order_queued);

/* entry which returns a two character status class based on the given status */
/* These status classes are described in MTB-383, Appendix D */

get_status_class:
     entry (p_status_ptr) returns (char (2));

	isp = p_status_ptr;
	io_status_word_ptr = addr (istat.iom_stat);

/* Now just brute force the status lookup. */
/* This code works for type 500, 501, 601, 610, and 650 (DIPPER) tape controllers.  Much of the weird
   masking is to maintain compatibility between the various controllers. */

	if io_status_word.power then			/* power off */
	     return ("UE");
	else if istat.level = 1 then			/* system fault */
	     return ("UE");
	else if io_status_word.central_stat ^= "0"b3 then do;
	     if io_status_word.central_stat = "7"b3 then	/* parity error, data from channel */
		return ("DA");
	     else return ("UE");
	end;
	else if io_status_word.channel_stat ^= "0"b3 then do;
	     if io_status_word.channel_stat = "7"b3 then
		return ("IP");			/* parity error, data to channel */
	     else if io_status_word.channel_stat = "3"b3 then
		return ("BL");			/* incorrect DCW on list service */
	     else return ("UE");
	end;
	else if io_status_word.major = "0000"b then do;	/* peripheral subsystem ready */
	     if (io_status_word.sub & "111010"b) = "000010"b then
		return ("AB");			/* at beginning */
	     else if (io_status_word.sub & "111011"b) = "001000"b then
		return ("CA");			/* ASCII alert */
	     else return ("OK");
	end;
	else if io_status_word.major = "0001"b then do;	/* device busy */
	     if (io_status_word.sub & "000101"b) ^= "000000"b then
						/* rewinding or loading */
		return ("SI");			/* wait for special interrupt */
	     else return ("UE");			/* unrecoverable error */
	end;
	else if io_status_word.major = "0010"b then	/* device attention */
	     return ("UE");
	else if io_status_word.major = "0011"b then do;	/* device data alert */
	     if io_status_word.sub = "000010"b then	/* blank tape on read */
		return ("BT");			/* blank tape */
	     else if io_status_word.sub = "100000"b then	/* EOT */
		return ("ET");			/* end of tape */
	     else if (io_status_word.sub & "100000"b) = "100000"b then
						/* if EOT is set */
		return ("DE");			/* data alert, at end */
	     else return ("DA");			/* data alert */
	end;
	else if io_status_word.major = "0100"b then	/* EOF */
	     return ("EF");
	else if io_status_word.major = "0101"b then do;	/* command reject */
	     if io_status_word.sub = "001000"b then	/* at BOT */
		return ("AB");
	     else if io_status_word.sub = "000000"b then	/* invalid density */
		return ("DN");
	     else return ("UE");
	end;
	else if io_status_word.major = "1010"b then do;	/* MPC device attention */
	     if io_status_word.sub = "010000"b | (io_status_word.sub & "111100"b) = "001100"b then
		return ("DA");
	     else if io_status_word.sub = "001000"b then	/* incompatible mode */
		return ("DN");
	     else return ("UE");
	end;
	else if io_status_word.major = "1011"b then do;	/* MPC device data alert */
	     if io_status_word.sub = "001000"b |	/* ID burst write error */
		io_status_word.sub = "010011"b |	/* NRZI CCC error */
		io_status_word.sub = "001001"b |	/* preamble error */
		io_status_word.sub = "010010"b |	/* postamble error */
		io_status_word.sub = "010000"b |	/* multi-track error */
		io_status_word.sub = "100000"b then	/* marginal condition */
		return ("DA");
	     else if io_status_word.sub = "010100"b then	/* code alert */
		return ("CA");
	     else return ("UE");
	end;
	else if io_status_word.major = "1101"b then do;	/* MPC command reject */
	     if io_status_word.sub = "000011"b then	/* Illegal suspended L.C. number */
		return ("SI");
	     else return ("UE");
	end;
	else return ("UE");				/* should never happen, but... */

/* entry to return a pointer to the next status entry if it is valid */

get_status:
     entry (p_wksp) returns (ptr);

	wksp = p_wksp;
	status_entry_idx = tai.status_entry_idx;	/* save where we started */
	done = "0"b;
	do while (^done);				/* until we've had enough */
	     isp = ptr (wksp, tai.status_queue_offset + tai.status_entry_idx * size (istat));
						/* point to next status entry */
	     if istat.completion.st then do;		/* found one, get set to look again */
		if istat.level = IO_SPECIAL_INTERRUPT_LEVEL then
		     istat.completion.st = "0"b;	/* should never happen... */
		else done = "1"b;
	     end;
	     if ^done then
		tai.status_entry_idx = mod (tai.status_entry_idx + 1, tai.status_entry_count);
	     if ^done & tai.status_entry_idx = status_entry_idx then
		return (null ());			/* we've checked them all */
	end;

/* Since a status may have landed behind us after we had already checked, scan forward again to find the first */

	tai.status_entry_idx = status_entry_idx;
	do isp = ptr (wksp, tai.status_queue_offset + size (istat) * tai.status_entry_idx)
	     repeat ptr (wksp, tai.status_queue_offset + size (istat) * tai.status_entry_idx)
	     while (^istat.completion.st);
	     tai.status_entry_idx = mod (tai.status_entry_idx + 1, tai.status_entry_count);
	end;
	tai.status_entry_idx = mod (tai.status_entry_idx + 1, tai.status_entry_count);
	istat.completion.st = "0"b;			/* so we don't hit this again */
	return (isp);

/* Entry to return the offset of the last status entry. */

last_status_entry_offset:
     entry (p_wksp) returns (fixed bin (18) unsigned);

	wksp = p_wksp;
	return (tai.status_queue_offset + size (istat) * mod (tai.status_entry_idx - 1, tai.status_entry_count));

%include tape_ioi_workspace;
%page;
%include ioi_stat;
%page;
%include io_status_word;
%page;
%include interrupt_levels;

     end tape_ioi_utils;
