/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* Mode setting and getting routines for tape_ioi_ */
/* Written 7 May 1982 by Chris Jones */

/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
tape_ioi_modes:
     proc;

/* Parameters */

dcl	p_code		   fixed bin (35) parameter;	/* (O) system status code */
dcl	p_data_ptr	   ptr parameter;		/* (I) pointer to the data for the mdoe */
dcl	p_mode		   char (*) parameter;	/* (I) name of the mode in question */
dcl	p_tioi_id		   bit (36) aligned parameter;/* (I) tape_ioi_ activation ID */

/* Automatic variables */

dcl	code		   fixed bin (35);
dcl	mode_idx		   fixed bin;

/* Based variables */

dcl	align_value	   bit (1) based (p_data_ptr);/* "0"=>left, "1"=>right */
dcl	cif_value		   bit (6) based (p_data_ptr);/* channel instruction (ignored if error recovery on) */
dcl	data_value	   char (4) based (p_data_ptr);
						/* data encoding (e.g. bcd, ascii) */
dcl	event_value	   fixed bin (71) based (p_data_ptr);
						/* IPC event channel */
dcl	length_value	   bit (1) based (p_data_ptr);/* "0"b=>normal, "1"b=>special */
dcl	recovery_value	   bit (1) based (p_data_ptr);/* "0"b=>off, "1"b=>on */
dcl	req_len_value	   bit (1) based (p_data_ptr);/* "0"b=>off, "1"b=on */
dcl	wait_value	   bit (1) based (p_data_ptr);/* "0"b=>simplex, "1"b=>multiplex */

/* Static storage */

dcl	MODE_NAMES	   (8) char (8) static options (constant)
			   init ("align", "cif", "data", "event", "length", "recovery", "wait", "req_len");

/* Externals */

dcl	ioi_$set_event	   entry (fixed bin, fixed bin (71), fixed bin (35));
dcl	tape_ioi_utils$get_workspace_ptr
			   entry (bit (36) aligned, ptr);

dcl	error_table_$bad_arg   fixed bin (35) ext static;
dcl	error_table_$bad_mode_value
			   fixed bin (35) ext static;
dcl	error_table_$undefined_mode
			   fixed bin (35) ext static;

/* Builtins */

dcl	(hbound, null)	   builtin;

set_mode:
     entry (p_tioi_id, p_mode, p_data_ptr, p_code);

	call setup;
	call get_mode_idx (mode_idx);			/* doesn't return if the mode is invalid */

	goto MODE_SET (mode_idx);

MODE_SET (1):					/* align */
	tai.align = align_value;
	return;

MODE_SET (2):					/* cif */
	tai.cif_code = cif_value;
	return;

MODE_SET (3):					/* data */
	if data_value = "bin" then
	     tai.data_code = "05"b3;
	else if data_value = "bcd" then
	     tai.data_code = "04"b3;
	else if data_value = "tap9" then
	     tai.data_code = "03"b3;
	else if data_value = "asc" then
	     tai.data_code = "27"b3;
	else if data_value = "ebc" then
	     tai.data_code = "24"b3;
	else if data_value = "a/e" then
	     tai.data_code = "25"b3;
	else call quit (error_table_$bad_mode_value);
	return;

MODE_SET (4):					/* event */
	call ioi_$set_event (tai.ioi_index, event_value, code);
	if code ^= 0 then
	     call quit (code);
	tai.event_id = event_value;
	return;

MODE_SET (5):					/* length */
	tai.modes.length = length_value;
	return;

MODE_SET (6):					/* recovery */
	tai.modes.recovery = recovery_value;
	return;

MODE_SET (7):					/* wait */
	tai.modes.wait = wait_value;
	return;
MODE_SET (8):					/* req_len */
	tai.modes.req_len = req_len_value;
	return;

get_mode:
     entry (p_tioi_id, p_mode, p_data_ptr, p_code);

	call setup;
	call get_mode_idx (mode_idx);			/* doesn't return if the mode is invalid */

	goto MODE_GET (mode_idx);

MODE_GET (1):					/* align */
	align_value = tai.align;
	return;

MODE_GET (2):					/* cif */
	cif_value = tai.cif_code;
	return;

MODE_GET (3):					/* data */
	if tai.data_code = "05"b3 then
	     data_value = "bin";
	else if tai.data_code = "04"b3 then
	     data_value = "bcd";
	else if tai.data_code = "03"b3 then
	     data_value = "tap9";
	else if tai.data_code = "27"b3 then
	     data_value = "asc";
	else if tai.data_code = "24"b3 then
	     data_value = "ebc";
	else if tai.data_code = "25"b3 then
	     data_value = "a/e";
	else data_value = "****";			/* how did this happen? */
	return;

MODE_GET (4):					/* event */
	event_value = tai.event_id;
	return;

MODE_GET (5):					/* length */
	length_value = tai.modes.length;
	return;

MODE_GET (6):					/* recovery */
	recovery_value = tai.modes.recovery;
	return;

MODE_GET (7):					/* wait */
	wait_value = tai.modes.wait;
	return;

MODE_GET (8):					/* req_len */
	req_len_value = tai.modes.req_len;
	return;

setup:
     proc;

	call tape_ioi_utils$get_workspace_ptr (p_tioi_id, wksp);
	if wksp = null () then
	     call quit (error_table_$bad_arg);

	p_code = 0;

     end setup;

get_mode_idx:
     proc (mode_idx);

dcl	mode_idx		   fixed bin;

dcl	mode_name		   char (8);

	mode_name = p_mode;
	do mode_idx = 1 to hbound (MODE_NAMES, 1);
	     if MODE_NAMES (mode_idx) = mode_name then
		return;
	end;

	call quit (error_table_$undefined_mode);

     end get_mode_idx;

quit:
     proc (code);

dcl	code		   fixed bin (35);

	p_code = code;
	goto ERROR_RETURN;

     end quit;

ERROR_RETURN:
	return;

%include tape_ioi_workspace;

     end tape_ioi_modes;
