/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,ifthen */
tape_mult_util_:
     procedure;

/*	This program is part of the Multics standard tape I/O module, tape_mult_.
   *
   *	Created on 10/28/74 by Bill Silver.
   *	Modified 4/79 by R.J.C. Kissel to handle 6250 bpi.
   *	Modified 7/81 by J. A. Bush to add the boot_program control order.
   *	Modified 8/81 by J. A. Bush to add get_boot_program control order.
   *      Modified 8/82 by S. Krupp for change from tdcm_ to tape_ioi_ interface.
   *      Modified 1985-03-18, BIM: added get_buffer_size for async support.
   *      Modified 1985-03-28, BIM: return device_end, not end_of_into, on EOT on write.
   *
   *	This program also contains a set of unrelated utility entries
   *	that are used by tape_mult_ itself.  A complete list of the entries
   *	contained in this program is given below:
   *
   *	control:		- implements the tape_mult_ control order call.
*/


/*		ARGUMENTS			*/

dcl  arg_error_code fixed bin (35),			/* (O) Standard system error code. */
     arg_info_ptr ptr,				/* (I) Pointer to control order return data. */
     arg_iocb_ptr ptr,				/* (I) Pointer to I/O control block. */
     arg_order_name char (*),				/* (I) Control order name. */
     arg_rx fixed bin,
     arg_tioi_id bit (36) aligned;			/* (I) Ids tape_ioi activation. */

/*		AUTOMATIC  DATA		*/

dcl  error_code fixed bin (35),			/* Standard system error code. */
     info_ptr ptr,					/* Pointer to control order return data. */
     iocb_ptr ptr,					/* Pointer to I/O control block. */
     segp ptr,					/* Temp ptr for initiate_count */
     bc fixed bin (24),				/* storage for bit count from initiate_count */
     (boot_path, boot_dir) char (168),			/* storage for boot program directory name */
     boot_entry char (32),				/* storage for boot program entry name */
     bd_len fixed bin,				/* length of boot_dir */
     rl fixed bin,					/* temporary  length storage */
     order_name char (16),				/* Control order name. */
     error_count fixed bin (35),			/* storage for error_count control order */
     tioi_id bit (36) aligned;			/* Id for tape_ioi_ activation. */

dcl  1 auto_error_tally aligned like tec;



/*		BASED  DATA		*/

dcl  based_error_count fixed bin based;			/* Returned by "error_count" control order. */
dcl  1 oi like object_info aligned;
dcl  1 bpi like boot_program_info based (info_ptr) aligned;
dcl  based_seg (bpi.boot_program_text_length) bit (36) based aligned;

/*		EXTERNAL ENTRIES		*/

dcl  (addr, before, bin, currentsize, divide, hbound, null, ptr, rel, reverse, rtrim, size, substr) builtin;

dcl  (
     error_table_$bigarg,
     error_table_$device_not_active,
     error_table_$device_parity,
     error_table_$device_end,
     error_table_$no_operation,
     error_table_$not_closed,
     error_table_$not_open,
     error_table_$wrong_no_of_args
     ) external fixed bin (35);
declare  error_table_$null_info_ptr fixed bin (35) ext static;


dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35)),
     expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
     hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
     hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     object_info_$brief entry (ptr, fixed bin (24), ptr, fixed bin (35)),
     tape_mult_write_$flush entry (ptr, fixed bin (35));	/*						*/
%include iocb;
%page;
%include tmdb;
%page;
%include mstr;
%page;
%include iom_stat;
%page;
%include tape_mult_boot_info;
%page;
%include object_info;
%page;
%include tape_ioi_dcls;
%page;
%include tape_ioi_error_counts;
%page;
%include tape_ioi_result_indexes;
%page;

control:
     entry (arg_iocb_ptr, arg_order_name, arg_info_ptr, arg_error_code);

/*	This entry implements the tape_mult_ order call.  the following
   *	order calls are currently supported:
   *
   *	error_count:	If the tape is opened for reading, an error is
   *			returned.  If the tape is opened for writing then all
   *			output data currently buffered will be written and the
   *			up-to-date error count will be returned.
   *
   *
   *	boot_program:	Copies a user specified boot program into
   *			a temporary segment for subsequent writing
   *			onto the tape label record.  The I/O switch
   *			must be closed when this control order is
   *			issued.  info_ptr  should  point  to   a
   *			structure       as       defined      by
   *			tape_mult_boot_info.incl.pl1.
   *
   *	get_boot_program:	Returns  information  as to the location, length
   *			and  entry  name of the tape label boot program,
   *			as  read  from the tape which must be opened for
   *			input.   This  control  order  must  be executed
   *			after  a tape is opened for input and before the
   *			first     read     is    performed,    otherwise
   *			error_table_$no_operation  is  returned  to  the
   *			user.  If the tape does not contain a boot label
   *			program,  then the location ptr is returned as a
   *			null pointer and the length is returned as 0.
   *
   *      get_buffer_size:    Returns the amount of data that can be held
   *			unwritten in asynchronous output.
   *
   *	io_call:		perform an order on behalf of the io_call command.
*/
	iocb_ptr = arg_iocb_ptr;			/* Copy arguments. */
	order_name = arg_order_name;
	arg_error_code = 0;
	info_ptr = arg_info_ptr;

	iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;	/* Initialize pointers. */
	tmdb_ptr = iocb_ptr -> iocb.attach_data_ptr;
	tioi_id = tmdb.tioi_id;

	if order_name = "get_buffer_size"		/* how much stuff? */
	then do;
	     if arg_info_ptr = null () then do;
		arg_error_code = error_table_$null_info_ptr;
		return;
	     end;
	     begin;
declare  buffer_size fixed bin (35) based (arg_info_ptr);
		buffer_size = tmdb.n_bufs * 1024 * 4;	/* Characters */
		return;
	     end;
	end;

	if order_name = "io_call" then
	     call control_io_call;			/* Special subroutine for this one */

	else if order_name = "error_count" then
	     if iocb_ptr -> iocb.open_descrip_ptr ^= null then do;
						/* switch must be open */

		error_count = 0;			/* Set default error count. */

		if tmdb.open.description ^= "stream_output" then do;
						/* Error count order valid only if writing. */
		     error_code = error_table_$no_operation;
		     goto return_error_count;
		end;

		call tape_mult_write_$flush (tmdb_ptr, error_code);
						/* Write all buffered output. */
		if error_code ^= 0 then
		     goto return_error_count;
		call wait_for_write_proc (tioi_id, (0), error_code);
		if error_code ^= 0 then
		     goto return_error_count;

		auto_error_tally.version = TEC_VERSION_1;
		call tape_ioi_$get_statistics (tioi_id, addr (auto_error_tally), error_code);
		if error_code ^= 0 then
		     go to return_error_count;

		error_count = auto_error_tally.writes.errors;

		if tmdb.head.flags.eot then		/* If at End of Tape tell caller. */
		     error_code = error_table_$device_end;

return_error_count:
		info_ptr -> based_error_count = error_count;
	     end;
	     else do;				/* I/O switch not open, complain */
		info_ptr -> based_error_count = 0;
		error_code = error_table_$not_open;
	     end;
	else if order_name = "boot_program" then	/* if user wants to write boot label */
	     if iocb_ptr -> iocb.open_descrip_ptr = null then do;
						/* switch must be closed */
		call get_temp_segment_ ("tape_mult_", mstrp, error_code);
		if error_code ^= 0 then		/* if no problem continue */
		     go to ret_err;
		mst_label.boot_pgm_len = bpi.boot_program_text_length;
						/* copy text length */
		if currentsize (mst_label) > size (mstr) then do;
						/* if boot pgm too big, complain */
		     error_code = error_table_$bigarg;
		     go to ret_err;
		end;

		mst_label.boot_pgm = bpi.boot_program_ptr -> based_seg;
						/* copy boot pgm text */
		call hcs_$fs_get_path_name (bpi.boot_program_ptr, boot_dir, bd_len, boot_entry, error_code);
		if error_code = 0 then do;		/*  only put  path in if  we get it */
		     if bpi.boot_program_name = "" then /* Use entry name from hcs_$fs_get_path_name? */
			mst_label.boot_pgm_path = substr (boot_dir, 1, bd_len) || ">" || boot_entry;
		     else mst_label.boot_pgm_path = substr (boot_dir, 1, bd_len) || ">" || bpi.boot_program_name;
		end;
		else if bpi.boot_program_name ^= "" then/* use boot_program_name on error if not blank */
		     mst_label.boot_pgm_path = bpi.boot_program_name;
		else mst_label.boot_pgm_path = "";

		tmdb.opt.tbpp = mstrp;		/* save temp seg ptr for tape_mult_open_ */
	     end;
	     else error_code = error_table_$not_closed;	/* I/O switch must be closed, complain */
	else if order_name = "get_boot_program" then	/* if user wants to get boot label from tape */
	     if iocb_ptr -> iocb.open_descrip_ptr ^= null then do;
						/* switch must be open */
		arg_error_code = 0;
		if tmdb.open.description ^= "stream_input" | ^tmdb.opt.flags.begin then do;
						/* must be open for input, before first data read is done */
		     error_code = error_table_$no_operation;
						/* not legal */
		     go to ret_err;
		end;
		if tmdb.work.label_version < 3 | tmdb.blp = null then do;
						/* not bootable label or label not there */
		     bpi.boot_program_ptr = null;	/* return null ptr */
		     bpi.boot_program_text_length = 0;	/* and zero length */
		     bpi.boot_program_name = "";	/* and null name */
		     return;			/* and return */
		end;

/* We now know that we have a valid boot label in buffer */

		mstrp = tmdb.blp;			/* set tape label ptr */
		bpi.boot_program_ptr = addr (mst_label.boot_pgm);
						/* return boot pgm ptr to user */
		bpi.boot_program_name = rtrim (reverse (before (reverse (mst_label.boot_pgm_path), ">")));
		rl = divide (mst_label.head.data_bits_used, 36, 17, 0) + hbound (mst_label.xfer_vector, 1) * 2
		     + size (mstr_header);		/* compute real record length */
		bpi.boot_program_text_length = rl - bin (rel (addr (ptr (mstrp, 0) -> mst_label.boot_pgm)), 18);
						/* compute length of boot pgm */
		return;				/* and return */
	     end;
	     else error_code = error_table_$not_open;
	else error_code = error_table_$no_operation;	/* Not recognized */
ret_err:
	arg_error_code = error_code;
	return;

/* Procedure to perform the io_call order on behalf of the io_call command. */

control_io_call:
     proc;

dcl  error_count fixed bin (35);
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));

%include io_call_info;

	io_call_infop = info_ptr;

	if io_call_info.order_name = "error_count" then do;
	     error_code, error_count = 0;
	     if io_call_info.nargs ^= 0 then do;	/* no args allowed */
		call io_call_info
		     .
		     error (error_table_$wrong_no_of_args, io_call_info.caller_name,
		     "No additional arguments allowed for the ""error_count"" control order");
		return;
	     end;
	     call iox_$control (iocb_ptr, "error_count", addr (error_count), error_code);
	     if error_code ^= 0 then do;
		call io_call_info.error (error_code, io_call_info.caller_name, "Error count = ^d.", error_count);
		error_code = 0;
	     end;
	     else call io_call_info.report ("^a: Error count = ^d.", io_call_info.caller_name, error_count);
	end;

	if io_call_info.order_name = "get_buffer_size" then do;
	     if io_call_info.nargs ^= 0 then do;	/* no args allowed */
		call io_call_info
		     .
		     error (error_table_$wrong_no_of_args, io_call_info.caller_name,
		     "No additional arguments allowed for the ""get_buffer_size"" control order");
		return;
	     end;
	     call iox_$control (iocb_ptr, "get_buffer_size", addr (error_count), error_code);
	     if error_code ^= 0 then do;
		arg_error_code = error_code;
		return;
	     end;
	     else call io_call_info.report ("^a: Buffer size: ^d chars.", io_call_info.caller_name, error_count);
	end;


	else if io_call_info.order_name = "boot_program" then do;
						/* user wants to write a boot label */
	     error_code = 0;
	     if io_call_info.nargs ^= 1 then do;
		call io_call_info
		     .
		     error (error_table_$wrong_no_of_args, io_call_info.caller_name,
		     "The ""boot_program"" control order must have a path argument");
		return;
	     end;
	     boot_path = io_call_info.args (1);		/* pick up the boot pgm name */
	     call expand_pathname_ (boot_path, boot_dir, boot_entry, error_code);
	     if error_code ^= 0 then do;		/* can't find it */
		call io_call_info
		     .
		     error (error_code, io_call_info.caller_name,
		     "expanding pathname of ""boot_program"" argument (""^a"")", boot_path);
		return;
	     end;
	     call hcs_$initiate_count (boot_dir, boot_entry, "", bc, 0, segp, error_code);
	     if segp = null then do;			/* can't find it */
		call io_call_info
		     .
		     error (error_code, io_call_info.caller_name,
		     "getting bit count of ""boot_program"" argument (""^a"")", boot_path);
		error_code = 0;
		return;
	     end;
	     oi.version_number = object_info_version_2;	/* set proper version # */
	     call object_info_$brief (segp, bc, addr (oi), error_code);
	     if error_code ^= 0 then do;		/* can't find it */
		call io_call_info
		     .
		     error (error_code, io_call_info.caller_name,
		     "getting object info of ""boot_program"" argument (""^a"")", boot_path);
		error_code = 0;
		return;
	     end;
	     boot_program_info.version = BOOT_PROGRAM_INFO_VERSION_1;
						/* set version */
	     boot_program_info.boot_program_name = boot_entry;
	     boot_program_info.boot_program_ptr = oi.textp;
						/* copy ptr to text section */
	     boot_program_info.boot_program_text_length = oi.tlng;
						/* and length of text */
	     call iox_$control (iocb_ptr, "boot_program", addr (boot_program_info), error_code);
	     if error_code ^= 0 then do;		/* can't do it */
		call io_call_info
		     .error (error_code, io_call_info.caller_name, "executing the ""boot_program"" control order");
		error_code = 0;
	     end;
	     call hcs_$terminate_noname (segp, (0));	/* terminate the boot program */

	end;
	else if io_call_info.order_name = "get_boot_program" then do;
						/* user wants to write a boot label */
	     error_code = 0;

	     boot_program_info.version = BOOT_PROGRAM_INFO_VERSION_1;
						/* set version */
	     call iox_$control (iocb_ptr, "get_boot_program", addr (boot_program_info), error_code);
	     if error_code ^= 0 then do;		/* can't do it */
		call io_call_info
		     .
		     error (error_code, io_call_info.caller_name, "executing the ""get_boot_program"" control order");
		error_code = 0;
	     end;
	     else if boot_program_info.boot_program_ptr = null then
		call io_call_info
		     .report ("^a: This tape does not contain a tape label boot program", io_call_info.caller_name);
	     else call io_call_info
		     .
		     report ("^a:^-Boot program info:^/Pointer:^-^p^/Length:^-^o^/Name:^-^a",
		     io_call_info.caller_name, boot_program_info.boot_program_ptr,
		     boot_program_info.boot_program_text_length, boot_program_info.boot_program_name);
	end;
	else error_code = error_table_$no_operation;
	return;

     end control_io_call;

wait_for_write:
     entry (arg_tioi_id, arg_rx, arg_error_code);

	tioi_id = arg_tioi_id;
	call wait_for_write_proc (tioi_id, arg_rx, arg_error_code);
	return;

wait_for_write_proc:
     proc (tioi_id, rx, error_code);

dcl  tioi_id bit (36) aligned parameter;
dcl  rx fixed bin;
dcl  error_code fixed bin (35) parameter;

	rx = 0;
	error_code = 0;
	do while (error_code = 0 & rx = 0);
	     call tape_ioi_$check_write (tioi_id, (null), rx, error_code);
	end;
	if error_code = error_table_$device_not_active then do;
	     error_code = 0;
	     rx = 0;
	end;
	else if rx = TAPE_IO_EOT then
	     ;
	else if rx ^= 0 & error_code = 0 then
	     error_code = error_table_$device_parity;

     end wait_for_write_proc;

     end tape_mult_util_;
