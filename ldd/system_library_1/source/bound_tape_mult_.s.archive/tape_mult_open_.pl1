/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-10-13,GWMay), approve(86-10-13,MCR7552),
     audit(86-10-13,Martinson), install(86-10-20,MR12.0-1189):
     Added support for the use of rcp_ in  determining the density and format
     type of a tape.  Changes mounted tape message to include the format type
     and recording density of the mounted tape as determined by rcp_.
  2) change(86-10-23,GWMay), approve(86-10-23,PBF7552),
     audit(86-11-11,Martinson), install(86-11-21,MR12.0-1223):
     History comment correction.   Please disregard the previous comment.  The
     rcp_ density determining support was added to tape_mult_.pl1.  This module
     was modified to remove the density determining read loop which was moved
     to tape_mult_read_$label.  Howwever, the initial value returned by rcp_ is
     assigned within this routine.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,ifthen */
tape_mult_open_:
     procedure;

/*	This program is part of the Multics standard tape I/O module, tape_mult_.
   *
   *	Created on 10/28/74 by Bill Silver.
   *	Modified 4/79 by R.J.C. Kissel to handle 6250 bpi.
   *	Modified 1/12/81 by J. A. Bush for bootable tape labels
   *      Modified 8/82 by S. Krupp for change from tdcm_ to tape_ioi_ interface.
   *	This program implements the iox_$open entry point.
*/


/*			ARGUMENT  DATA	*/

dcl  arg_error_code fixed bin (35),			/* (O) Standard error code. */
     arg_extend_flag bit (1),				/* (I) ON => extend file - illegal for tape_mult_ */
     arg_iocb_ptr ptr,				/* (I) Pointer to I/O control block. */
     arg_open_mode fixed bin;				/* (I) Index that => opening mode. */


/*			AUTOMATIC  DATA	*/

dcl  density fixed bin,				/* Density of tape: 800, 1600, or 6250. */
     error_code fixed bin (35),			/* Standard system error code. */
     iocb_ptr ptr,					/* Pointer to I/O control block. */
     open_mode fixed bin,				/* Index that => opening mode. */
     rdy_status bit (36) aligned,			/* Rdy status returned here. */
     tioi_id bit (36) aligned,			/* Id for this tape_ioi_ activation. */
     volid char (16);				/* Tape reel ID. */


/*		INTERNAL STATIC DATA	*/

dcl  stream_input_mode fixed bin init (1) internal static,
     stream_output_mode fixed bin init (2) internal static;


/*		EXTERNAL  ENTRIES		*/

dcl  (addr, null) builtin;

dcl  (
     error_table_$bad_arg,
     error_table_$bad_mode
     ) external fixed bin (35);

dcl  iox_$err_not_closed entry options (variable),
     iox_$propagate entry (ptr),
     tape_mult_close_$close entry options (variable),
     tape_mult_labeler_$read entry (ptr, char (*), fixed bin (35)),
     tape_mult_labeler_$write entry (ptr, fixed bin (35)),
     tape_mult_read_$get_chars entry options (variable),
     tape_mult_read_$position entry options (variable),
     tape_mult_write_$put_chars entry options (variable);
%page;
%include tmdb;
%page;
%include mstr;
%page;
%include tape_ioi_dcls;
%page;
%include iocb;
%page;
open:
     entry (arg_iocb_ptr, arg_open_mode, arg_extend_flag, arg_error_code);

	iocb_ptr = arg_iocb_ptr;			/* Copy arguments. */
	open_mode = arg_open_mode;

	iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;	/* Initialize pointers and work variables. */
	tmdb_ptr = iocb_ptr -> iocb.attach_data_ptr;
	tioi_id = tmdb.work.tioi_id;

	tmdb.open.length = 18;			/* Set up default open mode. */
	tmdb.open.description = "uninitialized_mode";

	if arg_extend_flag				/* tape_mult_ does not support extend. */
	then do;					/* We will not allow it to be specified. */
	     error_code = error_table_$bad_arg;
	     goto OPEN_ERROR;
	end;

	if open_mode = stream_input_mode		/* Are we opening for input or output? */
	then do;					/* Input. */
	     tmdb.open.length = 12;
	     tmdb.open.description = "stream_input";
	     goto SETUP_REEL;
	end;

	if open_mode = stream_output_mode		/* If not input it must be output. */
	then do;
	     if ^tmdb.opt.flags.ring			/* Is write ring in? */
		then
		goto BAD_MODE;			/* No, we must abort the open. */
	     tmdb.open.length = 13;
	     tmdb.open.description = "stream_output";
	     goto SETUP_REEL;
	end;

BAD_MODE:						/* We cannot open with this mode. */
	error_code = error_table_$bad_mode;
	goto OPEN_ERROR;

/*	Now we must get the tape reel ready for I/O processing.  We must set
   *	the density and process the tape label.
*/
SETUP_REEL:


	if open_mode = stream_output_mode		/* Are we writing or reading? */
	then do;					/* Writing. */
 	     density = tmdb.opt.density;		/* Get user specified density. */
	     call REWIND (error_code);		/* rewind before setting density */
	     if error_code ^= 0 then
		goto OPEN_ERROR;
	     call tape_ioi_$order (tioi_id, "den", 1, addr (density), (0), (0), error_code);
	     if error_code ^= 0 then
		goto OPEN_ERROR;
	     tmdb.opt.write_sw = "1"b;
	     call tape_mult_labeler_$write (tmdb_ptr, error_code);
	end;
	else do;					/* Reading. */
	     density = tmdb.volume_density;		/* use rcp determined density */
	     tmdb.opt.write_sw = "0"b;
	     call tape_mult_labeler_$read (tmdb_ptr, volid, error_code);
	end;
	if error_code ^= 0 then
	     goto OPEN_ERROR;

/*	Now we must fill in the iocb.  It will be set up so an error will occur
   *	if any attempt is made to open the switch again or to detach it before
   *	it is closed.  Depending upon the opening mode we will set up the
   *	put_chars or get_chars entry point.
*/
	iocb_ptr -> iocb.open_descrip_ptr = addr (tmdb.open);
	iocb_ptr -> iocb.open = iox_$err_not_closed;
	iocb_ptr -> iocb.close = tape_mult_close_$close;
	iocb_ptr -> iocb.detach_iocb = iox_$err_not_closed;

/*	The I/O operations supported by tape_mult_ depends upon the opening mode.
   *	     stream_input:
   *		get_chars
   *		position
   *	     stream_output:
   *		put_chars
   *		control (error_count order)
*/
	if open_mode = stream_output_mode		/* Set up I/O entry and tseg write switch. */
	     then
	     iocb_ptr -> iocb.put_chars = tape_mult_write_$put_chars;
						/* Writing. */
	else do;					/* Reading. */
	     iocb_ptr -> iocb.get_chars = tape_mult_read_$get_chars;
	     iocb_ptr -> iocb.position = tape_mult_read_$position;
	end;

	call iox_$propagate (iocb_ptr);

	arg_error_code = 0;				/* Open completed successfully. */
	return;

OPEN_ERROR:					/* Fatal error during opening. */
	arg_error_code = error_code;
	return;
%page;
REWIND:
     proc (code);

/*        This procedure signals the tape rewind order and the waits until
   *      the tape is actually rewound (device is ready for processing).
*/

dcl  code fixed bin (35);

	call tape_ioi_$order (tioi_id, "rdy", 1, addr (rdy_status), (0), (0), code);
						/* Wait til device is ready. */
	if code ^= 0 then
	     return;
	call tape_ioi_$order (tioi_id, "rew", 1, (null), (0), (0), code);
						/* Rewind tape. */
	if code ^= 0 then
	     return;
	call tape_ioi_$order (tioi_id, "rdy", 1, addr (rdy_status), (0), (0), code);
						/* Wait til rewound. */

     end REWIND;

     end tape_mult_open_;
