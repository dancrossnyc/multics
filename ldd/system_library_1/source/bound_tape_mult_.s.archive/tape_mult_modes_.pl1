/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */
/* tape_mult_modes_ -- modes entrypoint for tape_mult_.
    Implemented for the unfortunate but unavoidable "async" mode.*/

/* format: style2 */

tape_mult_modes_:
     procedure (p_iocb_ptr, p_new_modes, p_old_modes, p_code);

/**** Modification history:
      Created 1985-03-18.
*/

	declare p_iocb_ptr		 pointer;
	declare (p_new_modes, p_old_modes)
				 char (*);
	declare p_code		 fixed bin (35);

	declare iocb_ptr		 pointer;
	declare error_table_$bad_mode	 fixed bin (35) ext static;


	iocb_ptr = p_iocb_ptr -> iocb.actual_iocb_ptr;
	tmdb_ptr = iocb_ptr -> iocb.attach_data_ptr;

	p_code = 0;

/**** Note that the following is not a "general" modes entrypoint.
      We never expect to add another mode to tape_mult_, because
      we intend to replace it with mtape_. If we do add, the resources
      to code mode_string_ calls and the like can be spent at a later time */

	if tmdb.async_sw
	then p_old_modes = "async.";			/* old mode string is trivial to construct */
	else p_old_modes = "^async.";

	if p_new_modes = "" | p_new_modes = "."
	then return;

	if p_new_modes = "async" | p_new_modes = "async."
	then tmdb.async_sw = "1"b;

	else if p_new_modes = "^async" | p_new_modes = "^async."
	then tmdb.async_sw = "0"b;

	else p_code = error_table_$bad_mode;
	return;

%include tmdb;
%include mstr;
%include iocb;

     end tape_mult_modes_;
