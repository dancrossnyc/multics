/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* format: style4,delnl,insnl,^ifthendo */
tty_area_manager:
     procedure ();

/* Set of entries for allocating and freeing in tty_area under control of a
   lock, kept in tty_buf. The lock_fast mechanism is used.
*/

/* Written November 1984 by Robert Coren */

dcl  Size fixed bin parameter;
dcl  Result_ptr pointer parameter;
dcl  Free_ptr pointer parameter;

dcl  locked bit (1);
dcl  alloc_size fixed bin;
dcl  alloc_ptr pointer;

dcl  tty_area$ area external static;
dcl  1 tty_buf$tty_area_lock like hc_fast_lock external static;

dcl  words (alloc_size) based (alloc_ptr);

dcl  lock$lock_fast entry (pointer);
dcl  lock$unlock_fast entry (pointer);

dcl  cleanup condition;

dcl  (addr, null) builtin;

%page;
/* allocate: allocates space of a specified size in tty_area */
/* it's up to the caller to handle area conditions */

allocate:
     entry (Size, Result_ptr);

	locked = "0"b;
	on cleanup call UNLOCK (locked);
	call LOCK (locked);

	alloc_size = Size;
	allocate words in (tty_area$) set (alloc_ptr);

	call UNLOCK (locked);
	Result_ptr = alloc_ptr;

	return;

%page;
/* free: frees the specified number of words in tty_area */

free:
     entry (Size, Free_ptr);

	locked = "0"b;
	on cleanup call UNLOCK (locked);
	call LOCK (locked);

	alloc_size = Size;
	alloc_ptr = Free_ptr;
	free words in (tty_area$);

	call UNLOCK (locked);
	Free_ptr = null ();
	return;

%page;
/* lock_area and unlock_area: called by programs that aren't just doing a single
   allocate or free operation (e.g., sty_mpx, whose allocations are done within
   calls to mode_string_$parse)
*/

lock_area:
     entry ();

	locked = "0"b;
	call LOCK (locked);
	return;


unlock_area:
     entry ();

	locked = "1"b;
	call UNLOCK (locked);
	return;

%page;
/* LOCK and UNLOCK: the internal procedures that actually call the hc_lock entries */

LOCK:
     procedure (locked);

dcl  locked bit (1) parameter;

	call lock$lock_fast (addr (tty_buf$tty_area_lock));
	locked = "1"b;
	return;					/* short and sweet */

     end LOCK;



UNLOCK:
     procedure (locked);

dcl  locked bit (1) parameter;

	if locked
	then do;					/* this test is in case the cleanup handler ran when we weren't locked */
	     call lock$unlock_fast (addr (tty_buf$tty_area_lock));
	     locked = "0"b;
	end;

	return;

     end UNLOCK;
%page;
%include hc_fast_lock;

     end tty_area_manager;
