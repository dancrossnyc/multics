/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


make_branches: proc (pathp, namep, bitcnt, aclp, rb, access, dirsw);

/* Modified 741115 by PG to turn off safety switch before trying to delete branch. */
/* Modified 751104 by BSG for NSS: to trek around deleting stuff on non-RPV volume */
/* Modified 3/82 BIM acl cleanup */

dcl  bitcnt fixed bin (24),
    (pnl, pcnt, i, j) fixed bin (17),
     ercode fixed bin (35),
    (rb (3), nrb (3)) fixed bin (6),
     access bit (3),
     dirsw fixed bin (1),
     mode fixed bin (5);

dcl 1 seg_access_string unaligned,
    2 zero1 bit (1) unaligned,
    2 rew bit (3) unaligned,
    2 zero2 bit (1) unaligned;

dcl 1 dir_access_string unaligned,
    2 zero1 bit (1) unaligned,
    2 s bit (1) unaligned,
    2 zero2 bit (1) unaligned,
    2 m bit (1) unaligned,
    2 a bit (1) unaligned;

dcl 1 dir_access_bit_string unaligned,
    2 s bit (1) unaligned,
    2 m bit (1) unaligned,
    2 a bit (1) unaligned;


dcl (error_table_$namedup, error_table_$noaccess) fixed bin (35) external;
dcl  error_table_$pvid_not_found fixed bin (35) external;


dcl 1 nename aligned,				/* name structure for recursive call */
    2 count fixed bin (17),
    2 names,
      3 size fixed,
      3 name char (32) unaligned;

dcl (addr, null, substr) builtin;


dcl  asd_$replace_sall entry (char (*), char (*), ptr, fixed bin, bit (1) aligned, fixed bin (35)),
     append$branchx entry (char (*), char (*), fixed bin (5), (3) fixed bin (6), char (*),
     fixed bin (1), fixed bin, fixed bin (24), fixed bin (35)),
     chname$cfile entry (char (*), char (*), char (*), char (*), fixed bin (35)),
     delentry$dfile entry (char (*), char (*), fixed bin (35)),
     set$safety_sw_path entry (char (*), char (*), bit (1), fixed bin (35)),
     syserr ext entry options (variable),
     syserr$error_code entry options (variable),
     unique_chars_ entry (bit (*)) returns (char (15));

%include slt;
%include access_mode_values;


/* program */

	if dirsw = 0 /* segment */ then do;
	     unspec (seg_access_string) = ""b;
	     seg_access_string.rew = access;
	     mode = bin (string (seg_access_string), 5);
	end;
	else do;
	     unspec (dir_access_string) = ""b;
	     string (dir_access_bit_string) = access;
	     dir_access_string = dir_access_bit_string, by name;
	     mode = bin (string (dir_access_string), 5);
	end;

rpt:
	pnl = pathp -> path.size;			/* Grab length of pathname. */
	call append$branchx (pathp -> path.name, namep -> segnam.names (1).name,
	     mode, rb, "*.*.*", dirsw, 0, bitcnt, ercode); /* Try to append. */
	if ercode ^= 0 then do;			/* Check for errors. */
	     if ercode = error_table_$namedup then do;	/* Name dup. */
		call delete (pathp -> path.name, namep -> segnam.names (1).name); /* Go delete. */
		go to rpt;			/* Try again. */
	     end;
	     else if ercode = error_table_$noaccess then do; /* See if dir. does not exist. */
		do i = pnl to 1 by -1 while (substr (pathp -> path.name, i, 1) ^= ">");
		end;
		if i = 1 then
		     if substr (pathp -> path.name, 1, 1) ^= ">" then
			call syserr (1, "make_branches: bad path name ^a", pathp -> path.name);
		     else pcnt = 1;
		else pcnt = i - 1;
		nename.names.name = substr (pathp -> path.name, i + 1, pnl - i);
		nrb (1), nrb (2), nrb (3) = 5;
		nename.count = 1;
		pathp -> path.size = pcnt;		/* This KLUDGE is worthy of Charles Garman. */
		call make_branches (pathp, addr (nename), 0, aclp, nrb, SMA_ACCESS, 1);
		pathp -> path.size = pnl;		/* However, it was perpetrated by NIM. */
		go to rpt;
	     end;
	     call syserr$error_code (1, ercode, "make_branches: error from append on ^a>^a:",
		pathp -> path.name, namep -> segnam.names (1).name);
	end;
	if aclp ^= null then do;			/* must append an acl to the branch */

	     call asd_$replace_sall (pathp -> path.name, namep -> segnam.names (1).name,
		addr (aclp -> acls.acl), aclp -> acls.count, "1"b, ercode);
	     if ercode ^= 0 then call syserr$error_code (1, ercode,
		"make_branches: error from asd_$replace_sall on ^a>^a:", pathp -> path.name, namep -> segnam.names (1).name);
	end;
	do j = 2 to namep -> segnam.count;		/* Add all other names. */
repeat:	     call chname$cfile (pathp -> path.name, namep -> segnam.names (1).name, "",
		namep -> segnam.names (j).name, ercode); /* Add a name. */
	     if ercode ^= 0 then do;
		if ercode = error_table_$namedup then do;
		     call delete (pathp -> path.name, namep -> segnam.names (j).name);
		     go to repeat;			/* Try again. */
		end;
		call syserr$error_code (1, ercode, "make_branches: error from chname on ^a>^a:",
		     pathp -> path.name, namep -> segnam.names (1).name);
	     end;
	end;
	return;

delete:	entry (pathname, entryname);			/* Entry to delete something. */

dcl (pathname, entryname) char (*);
dcl  newname char (32);
dcl  ustr char (15);

	call set$safety_sw_path (pathname, entryname, "0"b /* OFF */, ercode);
	if ercode ^= 0 then if ercode = error_table_$pvid_not_found then go to nopv; /* online inst */
	     else call syserr$error_code (1, ercode, "make_branches: delete: could not turn ^a>^a safety switch off:",
		pathname, entryname);

	call delentry$dfile (pathname, entryname, ercode);
	if ercode ^= 0 then if ercode = error_table_$pvid_not_found then do;
nopv:		ustr = unique_chars_ ("0"b);		/* Make up new name */
		newname = ustr || entryname;
		call syserr (0, "make_branches: delete: renaming ^a to ^a in ^a", entryname, newname, pathname);
		call chname$cfile (pathname, entryname, entryname, newname, ercode);
		if ercode ^= 0 then call syserr$error_code (1, ercode, "make_branches: delete: failed to rename");
	     end;
	     else call syserr$error_code (1, ercode, "make_branches: could not delete ^a>^a:", pathname, entryname);
	return;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   make_branches: bad path name PATH

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   make_branches: error from append on PATH: ERROR_MESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   make_branches: error from chname on PATH: ERROR_MESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   make_branches: error from asd_$replace_sall on PATH: ERROR_MESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   make_branches: delete: could not turn PATH safety switch off: ERROR_MESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   make_branches: delete: renaming NAME to UNIQUE in DIRNAME

   S:	$info

   T:	$init

   M:	A segment which
   is being loaded from the system tape
   encountered a previous copy
   on a physical volume which
   is not now mounted.
   The old version of the segment is being renamed
   so that the new copy can be loaded.

   A:	$note
   The system programmers will want to delete the unique-named segment.


   Message:
   make_branches: delete: failed to rename

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   make_branches: could not delete PATH: ERROR_MESSAGE

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   END MESSAGE DOCUMENTATION */

     end make_branches;
