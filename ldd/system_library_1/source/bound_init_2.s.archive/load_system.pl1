/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* LOAD_SYSTEM - Load Collection 3 from Multics System Tape. */
/* to v2pl1, RE Mullen, Nov 73 */
/* last modified 3/76 by N. I. Morris & S. H. Webber for new reconfig */
/* broken acl manipulations fixed BIM 3/82 */
/* Modified October 1983 by Keith Loepere for warm boot from disk. */
/* Modified January 1985 by Keith Loepere to set entry bounds on gates. */

load_system: procedure;

/* Variables */

dcl  access			bit (3);
dcl  bitcount			fixed bin (24);
dcl  count			fixed bin (18);
dcl  cp				ptr;
dcl  1 cw				aligned,		/* Control word. */
     ( 2 type			fixed bin (18) uns,
       2 count			fixed bin (18) uns) unaligned;
dcl  1 del_acl			(1) aligned like delete_acl_entry;
dcl  dir_name			char (168);
dcl  entry_bound			fixed bin (14);
dcl  entryname			char (32);
dcl  ercode			fixed bin (35);
dcl  header_area			(1000) fixed bin (35);
dcl  hp				ptr;
dcl  lastword			ptr;
dcl  mapword			fixed bin (18);
dcl  must_delete_acl		bit (1) aligned;
dcl  must_set_acl			bit (1) aligned;
dcl  object_map_ptr			ptr;
dcl  old_mode			bit (36);
dcl  1 seg_acl_struc		aligned,
       2 version			fixed bin,
       2 count			fixed bin,
       2 seg_acl			(1) aligned like segment_acl_entry;
dcl  segp				ptr;
dcl  wordcount			fixed bin (18);

/* Based */

dcl  just_reference			fixed bin (35) based;

/* Misc */

dcl  (addr, addrel, bit, divide, fixed, null, size, substr)	builtin;

/* External */

dcl  pds$process_group_id		ext static char (32) aligned;

/* Entries */

dcl  asd_$add_sentries		entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  asd_$del_sentries		entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  asd_$r_list_sall		entry (char (*), char (*), ptr, ptr, fixed bin (35));
dcl  disk_reader			entry (ptr, fixed bin (18));
dcl  init_branches$branch		entry (ptr, ptr, ptr, bit (3), ptr);
dcl  set$entry_bound_ptr		entry (ptr, fixed bin (14), fixed bin (35));
dcl  syserr			entry options (variable);
dcl  syserr$error_code		entry options (variable);
%page;
	hp = addr (header_area);			/* Pointer to header area in stack. */
	cp = addr (cw);				/* Pointer to control word. */

	seg_acl_struc.version = ACL_VERSION_1;
	seg_acl_struc.count = 1;
	seg_acl_struc.seg_acl (1).access_name = pds$process_group_id;

loop:	call disk_reader (cp, 1);			/* Read in next control word from disk. */
	if cw.type = 2 then do;			/* Check for collection mark. */
	     call disk_reader (cp, 1);		/* It is, get it out of the way. */
	     return;				/* End of collection..quit. */
	end;
	if cw.type ^= 0 then call syserr (CRASH, "load_system: illegal type in mst source");
	count = cw.count;				/* Copy count of header. */
	if count > 1000 then call syserr (CRASH, "load_system: illegal header length in mst source");

	call disk_reader (hp, count);			/* Suck in the header. */
	namep = addrel (hp, size (slte));		/* Set ptr to names */
	pathp = addrel (namep, namep -> segnam.count * 9 + 1); /* ptr to path name */
	access = bit (hp -> slte.access, 3);		/* Set access from header, mask off P bit */
	bitcount = hp -> slte_uns.bit_count;

	call init_branches$branch (pathp, namep, hp, access, segp); /* Go set up branch. */

	dir_name = pathp -> path.name;
	entryname = namep -> segnam.names (1).name;

	must_set_acl, must_delete_acl = "0"b;
	old_mode = ""b;

	call asd_$r_list_sall (dir_name, entryname, null (), addr (seg_acl_struc), ercode);

	if ercode ^= 0 then call syserr$error_code (CRASH, ercode, "load_system: error from asd_$r_list_sall on ^a>^a.", dir_name, entryname);

	if seg_acl_struc.seg_acl (1).status_code = 0 then if ^substr (seg_acl_struc.seg_acl (1).mode, 3, 1) then do; /* no w */
		must_set_acl = "1"b;
		must_delete_acl = "0"b;
		old_mode = seg_acl_struc.seg_acl (1).mode;
	     end;
	     else must_set_acl, must_delete_acl = "0"b;	/* already have w */
	else must_set_acl, must_delete_acl = "1"b;

	if must_set_acl then do;
	     seg_acl_struc.seg_acl (1).mode = RW_ACCESS;
	     call asd_$add_sentries (dir_name, entryname, addr (seg_acl_struc.seg_acl), 1, ercode);
	     if ercode ^= 0 then
asd_error:	call syserr$error_code (CRASH, ercode, "load_system: error from asd_$add_sentries on ^a>^a.", dir_name, entryname);
	end;

	call disk_reader (cp, 1);			/* Get next control word for seg. */
	if cw.type ^= 1 then call syserr (CRASH, "load_system: illegal type in mst source");

	call disk_reader (segp, (cw.count));		/* Suck in the segment. */

/* Find entry bound in object map; see if entry bound should be set. */

	if bitcount = 0 then go to no_entry_bound;
	wordcount = divide (bitcount + 35, 36, 18, 0);
	lastword = addrel (segp, wordcount - 1);
	mapword = fixed (lastword -> map_ptr, 18);	/* will want to see if value is in reasonable range */

	if mapword <= 0 then go to no_entry_bound;	/* last word won't point to new format map */
	if mapword >= wordcount then go to no_entry_bound;
	object_map_ptr = addrel (segp, lastword -> map_ptr); /* get ptr to map */
	if object_map_ptr -> object_map.identifier ^= "obj_map " then goto no_entry_bound;
	if object_map_ptr -> object_map.decl_vers ^= 2 then go to no_entry_bound;

	entry_bound = fixed (object_map_ptr -> object_map.entry_bound, 18);
	if entry_bound > 0 then do;
	     call set$entry_bound_ptr (segp, entry_bound, ercode);
	     if ercode ^= 0 then
		call syserr$error_code (CRASH, ercode, "load_system: error from set$entry_bound_ptr for ^a>^a.", dir_name, entryname);
	end;

no_entry_bound:
	if must_set_acl & ^must_delete_acl then do;	/* must_restore_acl ... */
	     seg_acl_struc.seg_acl (1).mode = old_mode;
	     call asd_$add_sentries (dir_name, entryname, addr (seg_acl_struc.seg_acl), 1, ercode);
	     if ercode ^= 0 then go to asd_error;
	end;

	if must_delete_acl then do;
	     del_acl (1).access_name = pds$process_group_id;
	     call asd_$del_sentries (dir_name, entryname, addr (del_acl), 1, ercode);
	     if ercode ^= 0 then
		call syserr$error_code (CRASH, ercode, "load_system: error from asd_$delete_sentries for ^a>^a.", dir_name, entryname);
	end;


	ercode = segp -> just_reference;		/* make it active again */
	ercode = 0;
	go to loop;
%page; %include access_mode_values;
%page; %include acl_structures;
%page; %include object_map;
%page; %include slt;
%page; %include slte;
%page; %include syserr_constants;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   load_system: illegal type in mst source

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   load_system: error from asd_$add_sentries
   The system could not remove the write access it had set to load the
   contents of a segment from the mst source.

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   load_system: illegal header length in mst source

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   load_system: illegal type in mst source

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape


   Message:
   load_system: error from set$entry_bound_ptr

   S:	$crash

   T:	$init

   M:	$err

   A:	$recover
   $boot_tape

   END MESSAGE DOCUMENTATION */

     end;
