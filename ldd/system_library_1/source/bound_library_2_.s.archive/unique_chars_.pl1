/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


unique_chars_:
	proc(in_bits, out_chars);

/* function to return a unique character string as in BY.15.01.
The character string is 15 characters long.
The given bit string is either a unique string or null in which
 case the function unique_bits_ is used to obtain the bit string.

Last modified: (Date and reason)
84-08-10 by E. A. Ranzenbach to remove "unique_chars" entry per MCR6634.
11/12/73 by RE Mullen, converted to v2pl1
08/08/72 by C Garman to use explicit assignment to output parameter, instead of "return(...);"
06/26/72 by D. M. Wells to get rid of "aligned"ness of strings to conform with documentation
07/17/71 by Richard H. Gumpertz to make "charsi" automatic
Coded 1/15/70			JW Gintell
*/

dcl	in_bits bit(*),
	out_chars char(15),

	table char(32) static init("BCDFGHJKLMNPQWXZbcdfghjklmnpqwxz"),

	charsi char(15),
	bit70 bit(70),

	unique_bits_ entry returns(bit(70)),
	i fixed bin(17);

dcl	(bin, bit, fixed, index, substr) builtin;

	bit70 = in_bits;		/* copy argument */

	if bit70 = (70)"0"b then bit70 = unique_bits_();

	substr(charsi, 1, 1) = "!";

	do i = 1 to 14;

	  substr(charsi,i+1,1) = substr(table,fixed(substr(bit70,i*5-4,5),5)+1,1);
	end;

	out_chars = charsi;
	return;

/* 
   entry to convert unique_character string back to bit string */

bits:
	entry(in_chars, out_bits);

dcl	in_chars char(15),
	out_bits bit(70),
	j fixed bin(5);

	out_bits = (70)"0"b;
	charsi = in_chars;

	if substr(charsi,1,1) ^= "!" then return;

	do i = 1 to 14;

	  j = index(table,substr(charsi,i+1,1));
	  if j = 0 then return;
	  else substr(bit70,i*5-4,5) = bit(bin(j-1,5),5);

	end;

	out_bits = bit70;

end unique_chars_;
