/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* format: style2 */

/* format: off */
/*
   IPC_VALIDATE_:  A collection of utilities available to both hardcore
   and user-ring IPC for event channel name validation support.  The
   following entries are provided:

   encode_event_channel_name:  Given the values for the R-offset, R-factor,
   event channel index, event channel flags, ring number, event channel
   type, and event channel unique id, returns an encoded event channel
   name of datatype fixed bin (71).

   decode_event_channel_name: Given an event channel name of datatype 
   fixed bin (71), and the values of R-offset and R_factor, decodes the
   values of the event channel index, the event channel flags, ring
   number, event channel type, and event channel unique id.  It returns
   error_table_$invalid channel if the supplied event channel name is
   incorrectly formatted or invalidly encoded.

   validate_event_channel_name:  This entry is similar to 
   decode_event_channel_name and exists for efficiency.  It verifies that
   the encoded index and verify are correct for the event channel specified
   and decodes the index and flags.  It does nothing with the rest of the
   unencoded portion of the event channel name.  It is used by hc_ipc.
*/
/* format: on */

/* Written 1984-11-14 by E. Swenson */


/****^  HISTORY COMMENTS:
  1) change(86-08-09,Kissel), approve(86-08-12,MCR7479),
     audit(86-10-20,Fawcett), install(86-11-03,MR12.0-1206):
     Changed to move the structure declaration for encoded_index into the
     event_channel_name include file.  Also, renamed some automatic variables
     for clarity.  NOTE:  the algorithm for decoding the encoded_index is
     duplicated in pxss in ALM.  Therefore, any change must also be reflected
     there.
                                                   END HISTORY COMMENTS */


ipc_validate_:
     procedure ();
	return;

/* Parameters */

	dcl     P_code		 fixed bin (35) parameter;
	dcl     P_ev_chn_index	 fixed bin (15) parameter;
	dcl     P_ev_chn_flags	 bit (3) aligned parameter;
	dcl     P_ev_chn_ring	 fixed bin (3) parameter;
	dcl     P_ev_chn_type	 bit (1) aligned parameter;
	dcl     P_ev_chn_unique_id	 fixed bin (18) parameter;
	dcl     P_event_channel_name	 fixed bin (71) parameter;
	dcl     P_r_offset		 fixed bin (18);
	dcl     P_r_factor		 fixed bin (35);

/* Automatic */

	dcl     decoded_index_binary	 fixed bin (18) unsigned;
	dcl     1 auto_decoded_index	 structure aligned like decoded_index;
	dcl     1 ev_chn_name	 structure aligned like event_channel_name;
	dcl     r_offset		 fixed bin (18) unsigned;
	dcl     r_factor		 fixed bin (35) unsigned;
	dcl     temp		 fixed bin (71);	/* temporary; large enough to avoid overflows */

/* External */

	dcl     error_table_$invalid_channel
				 fixed bin (35) external;
						/* Builtin */

	dcl     (binary, mod, substr, unspec)
				 builtin;

%page;
encode_event_channel_name:
     entry (P_r_offset, P_r_factor, P_ev_chn_flags, P_ev_chn_index, P_ev_chn_ring, P_ev_chn_type, P_ev_chn_unique_id,
	P_event_channel_name);

/* This entry encodes an event channel name given the various values
   which make up an event channel name.  It uses the IPC event channel
   name validation algorithm to encode the supplied index and flags. */

	auto_decoded_index.flags = P_ev_chn_flags;
	auto_decoded_index.index = P_ev_chn_index;
	decoded_index_binary = binary (substr (unspec (auto_decoded_index), 1, 18));

	r_offset = P_r_offset;
	r_factor = P_r_factor;

	unspec (ev_chn_name) = ""b;

	temp = decoded_index_binary + r_offset;
	ev_chn_name.encoded_index = substr (unspec (temp), 55, 18);

	temp = decoded_index_binary * r_factor;
	ev_chn_name.verifier = substr (unspec (temp), 37, 18);

	ev_chn_name.ring = P_ev_chn_ring;
	ev_chn_name.type = P_ev_chn_type;
	ev_chn_name.unique_id = P_ev_chn_unique_id;

	unspec (P_event_channel_name) = unspec (ev_chn_name);
	return;
%page;
decode_event_channel_name:
     entry (P_r_offset, P_r_factor, P_event_channel_name, P_ev_chn_flags, P_ev_chn_index, P_ev_chn_ring, P_ev_chn_type,
	P_ev_chn_unique_id, P_code);

/* This entry decodes an event channel name into its constituent parts.
   At the same time, it validates the event channel name. */

	unspec (ev_chn_name) = unspec (P_event_channel_name);

	if ev_chn_name.mbz ^= ""b
	then do;
		P_code = error_table_$invalid_channel;
		return;
	     end;

	r_offset = P_r_offset;
	r_factor = P_r_factor;
	temp = binary (ev_chn_name.encoded_index, 18);
	decoded_index_binary = mod (temp - r_offset, ENCODED_INDEX_CONSTANT);
	temp = decoded_index_binary * r_factor;

	if ev_chn_name.verifier ^= substr (unspec (temp), 37, 18)
	then do;
		P_code = error_table_$invalid_channel;
		return;
	     end;

	unspec (auto_decoded_index) = substr (unspec (decoded_index_binary), 19, 18);
	P_ev_chn_index = auto_decoded_index.index;
	P_ev_chn_flags = auto_decoded_index.flags;

	P_ev_chn_ring = ev_chn_name.ring;
	P_ev_chn_type = ev_chn_name.type;
	P_ev_chn_unique_id = ev_chn_name.unique_id;
	P_code = 0;
	return;
%page;
validate_event_channel_name:
     entry (P_r_offset, P_r_factor, P_event_channel_name, P_ev_chn_flags, P_ev_chn_index, P_code);


	r_offset = P_r_offset;			/* change to unsigned data type */
	r_factor = P_r_factor;
	unspec (ev_chn_name) = unspec (P_event_channel_name);
	temp = binary (ev_chn_name.encoded_index, 18);
	decoded_index_binary = mod (temp - r_offset, ENCODED_INDEX_CONSTANT);
	temp = decoded_index_binary * r_factor;

	if ev_chn_name.verifier ^= substr (unspec (temp), 37, 18)
	then do;
		P_code = error_table_$invalid_channel;
		return;
	     end;

	unspec (auto_decoded_index) = substr (unspec (decoded_index_binary), 19, 18);
	P_ev_chn_index = auto_decoded_index.index;
	P_ev_chn_flags = auto_decoded_index.flags;
	P_code = 0;
	return;

/* format: off */
%page; %include event_channel_name;
/* format: on */

     end ipc_validate_;
