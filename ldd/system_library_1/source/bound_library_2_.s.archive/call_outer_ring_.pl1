/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/* format: style2 */
/* call_outer_ring_ -- prepares faked outward call via rtcd */
/* From outward_call_handler Benson I. Margulies April 1981 */

/* 830529 BIM Fixed not to try to set validation level < execution level. */

call_outer_ring_:
     procedure (a_ref_ptr, a_segname, a_entrypoint, a_ring_to_call, a_code);

	declare a_ref_ptr		 pointer;
	declare (a_segname, a_entrypoint)
				 character (*);
	declare a_ring_to_call	 fixed bin (3);
	declare a_code		 fixed bin (35);

	dcl     1 arglist_and_ptr	 aligned based,	/* argument list header FOUR WORDS LONG */
		2 arg_count	 fixed bin (17) unal,
		2 code		 fixed bin (17) unal,
		2 desc_count	 fixed bin (17) unal,
		2 pad		 fixed bin (17) unal,
		2 rtcd_ptr	 aligned like its_unsigned;

	dcl     1 given_its		 aligned like its_unsigned;

/* goodies in case we are in ring 0 */

	dcl     pds$highest_ring	 fixed bin (3) external;
						/* highest permissable ring for process */
	dcl     pds$initial_ring	 fixed bin (3) ext; /* initial non-hardcore ring for process */
	dcl     pds$ips_mask	 (0:7) bit (36) aligned ext;
						/* IPS mask for each ring */
	dcl     pds$stacks		 (0:7) pointer external;
	dcl     pds$first_call	 fixed bin ext;	/* non-zero until first call from Ring 0 */
	dcl     active_all_rings_data$stack_base_segno
				 fixed bin (18) ext;/* segno of base of array of 8 stacks */

	dcl     get_ring_		 entry () returns (fixed bin (3));
	dcl     hcs_$level_set	 entry (fixed bin (3));
	dcl     hcs_$get_max_length_seg
				 entry (pointer, fixed bin (19), fixed bin (35));
	dcl     hcs_$level_get	 entry returns (fixed bin (3));
	dcl     hcs_$set_ips_mask	 entry (bit (36) aligned, bit (36) aligned);
	dcl     hcs_$make_ptr	 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     rtcd_util_		 entry (pointer, pointer);

	dcl     (addrel, addr, baseptr, max, null)
				 builtin;

	dcl     ref_ptr		 pointer;
	dcl     segname		 character (32);
	dcl     entrypoint		 character (32);
	dcl     thing_to_call	 pointer;
	dcl     ring_to_call	 fixed bin (3);
	dcl     ap		 pointer;
	dcl     calling_ring	 fixed bin (3);
	dcl     calling_level	 fixed bin (3);
	dcl     code		 fixed bin (35);
	dcl     r			 fixed bin (3);
	dcl     stack_segno		 fixed bin;
	dcl     target_sb		 pointer;
	dcl     bit36		 bit (36) aligned;
	dcl     based_bit36		 based bit (36) aligned;

	dcl     (
	        error_table_$badringno,
	        error_table_$action_not_performed,
	        error_table_$outward_call_failed
	        )			 external static fixed bin (35);

	dcl     cleanup		 condition;
	dcl     any_other		 condition;
%page;
%include stack_header;
%include its;

	ref_ptr = a_ref_ptr;
	segname = a_segname;
	entrypoint = a_entrypoint;
	ring_to_call = a_ring_to_call;
	code = 0;

	calling_ring = get_ring_ ();
	calling_level = hcs_$level_get ();
	on cleanup call clean_up;

	if ring_to_call <= calling_ring
	then do;
		code = error_table_$badringno;
		go to return_;
	     end;

	if calling_ring = 0
	then do;					/* Call out from ring 0 */

/* A process may make only one outward call from Ring 0 during its existence.
   The target ring number of this call must be no less than the value
   contained in pds$initial_ring.
*/

		if pds$first_call = 0
		then /* If this is not the first call from Ring 0 ... */
		     do;
			code = error_table_$action_not_performed;
			go to return_;
		     end;
		pds$first_call = 0;			/* Indicate first call from Ring 0 is being accomplished. */
		if ring_to_call < pds$initial_ring
		then do;
			code = error_table_$badringno;
			go to return_;

/* Don't allow call inside initial ring. */
		     end;
	     end;

/* first insure existence of outer ring stack so we can snap links */

	stack_segno = active_all_rings_data$stack_base_segno + ring_to_call;
	target_sb = baseptr (stack_segno);
	bit36 = target_sb -> based_bit36;

/* now run make_ptr to get a link snapped to it so it has linkage in the 
   right ring */

	call hcs_$level_set (ring_to_call);
	thing_to_call = null ();
	call hcs_$make_ptr (ref_ptr, segname, entrypoint, thing_to_call, code);
	if thing_to_call = null ()			/* no such luck */
	then go to return_;
	code = 0;
	call hcs_$level_set (calling_ring);		/* back in for a while */
	do r = calling_ring to ring_to_call - 1;	/* mask IPS signals in all lower rings */
	     call hcs_$level_set (r);
	     call hcs_$set_ips_mask (""b, (""b));
	end;

	call hcs_$level_set (ring_to_call);

/* once we enter this do loop we cannot return, regardless of
   what happens. There is no stack history behind us. Oh well ... */

	on any_other go to terminate_the_process;

	do r = calling_ring to ring_to_call;
	     if calling_ring = 0
	     then sb = pds$stacks (r);
	     else do;
		     stack_segno = active_all_rings_data$stack_base_segno + r;
		     sb = baseptr (stack_segno);
		     call hcs_$get_max_length_seg (sb, (0), code);
		     if code ^= 0
		     then do;
			     sb = null ();
			     code = 0;
			end;
		end;
	     if sb ^= null ()
	     then /* If stack exists for ring ... */
		sb -> stack_header.stack_end_ptr = sb -> stack_header.stack_begin_ptr;
						/* Reset stack. */
	end;

	ap = target_sb;				/* There are four words at the beginning reserved for this */

	ap -> arglist_and_ptr.arg_count, ap -> arglist_and_ptr.desc_count, ap -> arglist_and_ptr.pad = 0;
	ap -> arglist_and_ptr.code = 4;		/* Make a null argument list. */

	unspec (given_its) = unspec (thing_to_call);
	ap -> arglist_and_ptr.rtcd_ptr = given_its;	/* we must set ringno to tell rtcd where to go */
	ap -> arglist_and_ptr.rtcd_ptr.ringno = ring_to_call;
						/* we go there */

/* This program should be bound together with rtcd_util_ to insure
       this call works. */

	call rtcd_util_ (addr (ap -> arglist_and_ptr.rtcd_ptr), ap);

	go to terminate_the_process;

return_:
	call clean_up;
	a_code = code;
	return;
clean_up:
     procedure;
	call hcs_$level_set (calling_level);
     end clean_up;

terminate_the_process:
	begin;

	     declare (baseptr, pointer)     builtin;
	     declare other_deadly_reference fixed bin (35) based;
	     declare deadly_reference	      fixed bin (35);

nowhere_fast:
	     deadly_reference = pointer (baseptr (-2), -5) -> other_deadly_reference;
						/* bang */
	     go to nowhere_fast;			/* what else is there to do? */

	end terminate_the_process;

     end call_outer_ring_;
