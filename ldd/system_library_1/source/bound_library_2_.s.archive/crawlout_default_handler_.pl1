/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */
crawlout_default_handler_:
     proc (mcptr, cond_name, wcptr, infoptr, retsw);

/* This procedure is called by signal_ before crawlouts in case the condition can
   be handled in the lower ring.  This is necessary for pl1 conditions */
/* coded 8 November 1973 by M. Weaver */
/* Quiet restart support added by BIM August 1981 */
/* Error condition signalling improved BIM same time */

	declare (mcptr, wcptr, infoptr)
				 ptr;

	declare i			 fixed bin;

	declare retsw		 bit (1) aligned;

	declare conname		 character (32);
	declare cond_name		 character (*);

	declare return_conditions	 (4) character (32)
				 init ("command_error", "stringsize", "underflow", "command_question")
				 internal static options (constant);

	declare error_conditions	 (14) character (32)
				 init ("area", "storage", "endfile", "undefinedfile", "overflow", "fixedoverflow",
				 "zerodivide", "size", "conversion", "key", "record", "transmit", "stringrange",
				 "subscriptrange") internal static options (constant);

	declare based_file		 file variable based;

	declare signal_		 entry options (variable);

%include condition_info_header;
	declare 1 pl1_info_struc	 aligned like pl1_info based (infoptr);
%include pl1_info;

	declare 1 error_info	 aligned like condition_info_header;
						/* thie minimal info structure */

	declare (currentsize, hbound, lbound, null, string)
				 builtin;



	retsw = "0"b;				/* only return if we set this bit */

	if infoptr ^= null ()
	then if infoptr -> condition_info_header.quiet_restart /* this is obvious */
		| infoptr -> condition_info_header.default_restart
						/* The semantics say "print a message and continue." */
						/* If they didnt think continuing was important, they would not set, */
						/* and so we restart */
	     then do;
		     retsw = "1"b;
		     return;
		end;

	conname = cond_name;			/* copy for ease of comparing */
						/* preserve special cases in case there is no info */

	do i = lbound (return_conditions, 1) to hbound (return_conditions, 1);
	     if conname = return_conditions (i)
	     then do;
		     retsw = "1"b;			/* don't crawl out */
		     return;
		end;
	end;

	do i = lbound (error_conditions, 1) to hbound (error_conditions, 1);
	     if conname = error_conditions (i)
	     then do;

/* By setting the quiet restart bit, we force another invocation of
    ourself to return, eventually to us. Then we can go ahead and let
    the original condition signal out, instead of the useless and
    uninformative "error". This PL/I programs that have handlers for
    the error condition catch the signal if they are there, and we
    signal out the original condition otherwise. */

		     error_info.version = 1;
		     error_info.length = currentsize (error_info);
		     string (error_info.action_flags) = ""b;
		     error_info.quiet_restart = "1"b;
		     error_info.info_string = "";	/* This is never allowed to get to default error handler */
		     error_info.status_code = 0;

		     call signal_ ("error", null /* No MC */, addr (error_info));
		     return;			/* crawl out with original equipment */
		end;
	end;

/* below code for endpage stolen from Belmont's pl1_signal_,
   but we don't support V1 PL/I running in an Inner Ring. Tough. */

	if conname = "endpage"
	then if infoptr ^= null
	     then if pl1_info_struc.content_flags.file_ptr_sw
		then do;
			put page file (pl1_info_struc.file_ptr -> based_file);
			retsw = "1"b;		/* finished handling condition */
			return;
		     end;

	return;					/* can't handle any other condition in this ring */
     end crawlout_default_handler_;
