" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1985 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(85-06-03,Pandolf), approve(86-08-13,MCR7511),
"     audit(86-08-13,EJSharpe), install(86-08-19,MR12.0-1120):
"      Fix $greater operation.
"                                                      END HISTORY COMMENTS

" This procedure is the centralized interpreter of the access isolation mechanism.
" Entries are segdef'ed since we don't make calls or need lp.

	name	aim_check_

"	7/74	A. Kobziar
"	Modified  84-03-26 BIM to add $in_range
"	Modified  85-01-16 Chris Jones to add $range_in_range
"
" ----------------------------------------------------------------
"
" Given the authorization of the subject and the access class of the object,
" return a bit(1) answer as to whether read, write, or read-write is permitted.
"
" dcl aim_check_$xxx entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
" 	if aim_check_$xxx (subject, object) then ...
"
	segdef	write_allowed_
	segdef	read_allowed_
	segdef	read_write_allowed_
	segdef	equal
	segdef	greater
	segdef	greater_or_equal
"
" dcl aim_check_$in_range entry (bit (72) aligned,(2) bit (72) aligned) returns bit (1) aligned;
"      if aim_check_$in_range (subject, object_range) then ...
"
	segdef	in_range
"
" dcl aim_check_$range_in_range entry ((2) bit (72) aligned, (2) bit (72) aligned) returns (bit (1) aligned);
"      if aim_check_$range_in_range (range1, range2) then ...
"
	segdef	range_in_range
"
	include	aim_template

" This code depends on the fact that aim_template.categories = 0!

write_allowed_:
	eax1	aim_template.level  "offset for IR mod
	ldx2	pr0|4,*x1		"pick up level of object
	cmpx2	pr0|2,*x1		"compare to subject
	tmi	no		"object must be >= subject
	lda	pr0|2,*		"pick up category (no IR, offset is 0)
	ana	pr0|4,*		"and with object category
	cmpa	pr0|2,*		"compare with subject category
	tze	yes		"subject is in subset of object category
	tra	no		"otherwize fail

read_allowed_:
greater_or_equal:
	eax1	aim_template.level  
	ldx2	pr0|2,*x1		"pick up subject level
	cmpx2	pr0|4,*x1		"compare to object level
	tmi	no		"subject must be >= object
	lda	pr0|2,*		"get subject category
	ana	pr0|4,*		"and with object
	cmpa	pr0|4,*		"compare to object
	tze	yes		"object must be subset of subject
	tra	no		"else fail

equal:
read_write_allowed_:
	eax1	aim_template.level
	ldx2	pr0|2,*1		"get subject level
	cmpx2	pr0|4,*1		"compare to object level
	tnz	no		"must be equal
	lda	pr0|2,*		"get subject category
	cmpa	pr0|4,*		"compare with object category
	tze	yes		"must match
	tra	no		"else fail

greater:
	lda	pr0|2,*		"subject category
	ana	pr0|4,*		"object category
	cmpa	pr0|4,*		"is object in subject subset?
	tnz	no		"must be in subject subset
	eax1	aim_template.level
	ldx2	pr0|2,*1		"subject level
	cmpx2	pr0|4,*1		"compare to object's level
	tmi	no		"can't be less
	tpnz	yes		"subject level greater than object
	cmpa	pr0|2,*		"object still in a reg
	tze	no		"must be unequal for true subset
	tra	yes		"else pass

" This entrypoint is equivalent to a pair of greater_or_equals.

in_range:
	epp1	pr0|2,*		"point to subject
	epp2	pr0|4,*		"point to object (min)
				"pr1 -> subject, pr2 -> min
	tsx3      range_one_compare
	epp3	pr1|0		"save it.
	epp1	pr2|2		"pr1 -> object (max)
	epp2	pr3|0		"pr2 -> subject
	tsx3	range_one_compare
	tra	yes

" This entrypoint ensures that its first arg's range is a subset of its second

range_in_range:
	epp1	pr0|2,*		" point to first range
	epp2	pr0|4,*		" point to second range
	tsx3	range_one_compare	" doesn't return if answer is no
	epp3	pr2|2		" point to high end of second range
	epp2	pr1|2		" point to high end of first range
	epp1	pr3|0		" set up correct comparison
	tsx3	range_one_compare
	tra	yes		" passed both tests

" pr1 -> ACC >=? pr2 -> ACC

range_one_compare:
	ldx2	pr1|aim_template.level " first level (DU!)
	cmpx2	pr2|aim_template.level " bigger than second?
	tmi	no		   " fails (subject must be >= min)
	lda	pr1|aim_template.categories
	ana	pr2|aim_template.categories
	cmpa	pr2|aim_template.categories "second subset of first?
	tnz	no
	tra	0,x3	"return for another test (YES)
	
yes:
	ldq	=o400000,du
	stq	pr0|6,*
	short_return

no:
	stz	pr0|6,*
	short_return


	end
