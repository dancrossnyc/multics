/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* object_info_ - procedure to return structural control information
   extracted from an object segment. Coded for compatibility with obsolete
   procedure decode_object_.

   Designed and coded February 8, 1972 by Michael J. Spier		*/
/* modified 5/75 and 6/75  by M. Weaver for version 2 structure */
/* modified 1/77 by M. Weaver to initialize rel ptrs in non-standard object case */
/* modified 5/77 by M. Weaver to set perprocess_static flag */
/* modified 9/81 by M. Weaver to correct userid offset and check for not_in_read_bracket */

object_info_$long: procedure (seg_ptr, bitcount, arg_ptr, code);

declare (seg_ptr, arg_ptr) pointer, bitcount fixed bin (24), code fixed bin (35);

/* DECLARATION OF EXTERNAL SYMBOLS */

declare (error_table_$bad_segment, error_table_$zero_length_seg, error_table_$bad_ring_brackets) external fixed bin (35);
declare  decode_definition_$init external entry (pointer, fixed bin (24));
declare  decode_definition_ external entry (pointer, pointer) returns (bit (1) aligned);

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare (p, mapp, segp, oip, lastword, sblkp) pointer;
declare (i, lng, defcount) fixed bin;
declare (wordcount, len, base18) fixed bin (18);
declare  base21 fixed bin (21);
declare  bitlng fixed bin (24);
declare  entrypoint char (8) aligned;

declare 1 dd aligned,
        2 next_def pointer,
        2 dum1 pointer,
        2 dum2 pointer,
        2 section char (4) aligned,
        2 offset fixed bin,
        2 entrypoint fixed bin,
        2 defname char (32) aligned;


/* DECLARATION OF BUILTIN FUNCTIONS */

declare (addr, addrel, bin, bit, divide, fixed, mod, null, substr, unspec) builtin;
declare  not_in_read_bracket condition;

/* DECLARATION OF BASED STRUCTURES */

%include object_info;

declare 1 oi aligned based (oip) like object_info;

/* version 1 structure for object_info_ */

declare 1 old_oi aligned based (oip),			/* structure containing object info, returned by object_info_ */
        2 version_number fixed bin,			/* version number of current structure format */
        2 textp pointer,				/* pointer to beginning of text section */
        2 defp pointer,				/* pointer to beginning of definition section */
        2 linkp pointer,				/* pointer to beginning of linkage section */
        2 symbp pointer,				/* pointer to beginning of symbol section */
        2 bmapp pointer,				/* pointer to beginning of break map (may be null) */
        2 tlng fixed bin,				/* length in words of text section */
        2 dlng fixed bin,				/* length in words of definition section */
        2 llng fixed bin,				/* length in words of linkage section */
        2 slng fixed bin,				/* length in words of symbol section */
        2 blng fixed bin,				/* length in words of break map */
        2 format,					/* word containing bit flags about object type */
	3 old_format bit (1) unaligned,		/* on if segment isn't in new format, i.e. has old style object map */
	3 bound bit (1) unaligned,			/* on if segment is bound */
	3 relocatable bit (1) unaligned,		/* on if seg has relocation info in its first symbol block */
	3 procedure bit (1) unaligned,		/* on if segment is an executable object program */
	3 standard bit (1) unaligned,			/* on if seg is in standard format (more than just standard map) */
	3 gate bit (1) unaligned,			/* on if segment is a gate */
        2 call_delimiter fixed bin,			/* call delimiter if segment is a gate */

/* LIMIT OF BRIEF STRUCTURE */

        2 compiler char (8) aligned,			/* name of processor which generated segment */
        2 compile_time fixed bin (71),			/* clock reading of date/time object was generated */
        2 userid char (32) aligned,			/* standard Multics id of creator of object segment */
        2 cvers aligned,				/* generator version name in printable char string form */
	3 offset bit (18) unaligned,			/* offset of name in words relative to base of symbol section */
	3 length bit (18) unaligned,			/* length of name in characters */
        2 comment aligned,				/* printable comment concerning generator or generation of seg */
	3 offset bit (18) unaligned,			/* offset of comment in words rel to base of symbol section */
	3 length bit (18) unaligned,			/* length of comment in characters */
        2 source_map fixed bin,			/* offset, rel to base of symbol section, of source map structure */

/* LIMIT OF DISPLAY STRUCTURE */

        2 rel_text pointer,				/* offset rel to base of symbol section of text sect. relocation info */
        2 rel_def pointer,				/* offset relative to symbp of definition section relocation info */
        2 rel_link pointer,				/* offset relative to symbp of linkage section relocation info */
        2 rel_symbol pointer,				/* offset relative to symbp of symbol section relocation info */
        2 text_boundary fixed bin,			/* specifies mod  of text section base boundary */
        2 static_boundary fixed bin,			/* specifies mod of internal static base boundary */
        2 default_truncate fixed bin,			/* offset rel to symbp for binder to automatically trunc. symb sect. */
        2 optional_truncate fixed bin;			/* offset rel to symbp for binder to optionally trunc. symb sect. */

% include object_map;

/* version 1 object map structure */

declare 1 map1 aligned based (mapp),			/* structure describing version 1 standard object map */
        2 decl_vers fixed bin,			/* version number of current structure format */
        2 identifier char (8) aligned,			/* must be the constant "obj_map" */
        2 text_offset bit (18) unaligned,		/* offset rel to base of object segment of base of text section */
        2 text_length bit (18) unaligned,		/* length in words of text section */
        2 def_offset bit (18) unaligned,		/* offset rel to base of object seg of base of definition section */
        2 def_length bit (18) unaligned,		/* length in words of definition section */
        2 link_offset bit (18) unaligned,		/* offset rel to base of object seg of base of linkage section */
        2 link_length bit (18) unaligned,		/* length in words of linkage section */
        2 symb_offset bit (18) unaligned,		/* offset rel to base of object seg of base of symbol section */
        2 symb_length bit (18) unaligned,		/* length in words of symbol section */
        2 bmap_offset bit (18) unaligned,		/* offset rel to base of object seg of base of break map */
        2 bmap_length bit (18) unaligned,		/* length in words of break map */
        2 format aligned,				/* word containing bit flags about object type */
	3 bound bit (1) unaligned,			/* on if segment is bound */
	3 relocatable bit (1) unaligned,		/* on if seg has relocation info in its first symbol block */
	3 procedure bit (1) unaligned,		/* on if segment is an executable object program */
	3 standard bit (1) unaligned,			/* on if seg is in standard format (more than just standard map) */
	3 unused bit (14) unaligned;			/* not currently used */


declare 1 old_map aligned based (mapp),
        2 sentinel1 bit (72) aligned,
        2 sentinel2 bit (72) aligned,
        2 info (4),
	3 offset fixed bin,
	3 length fixed bin (24);

% include symbol_block;


declare 1 osb aligned based (sblkp),
        2 gen_name_boff fixed bin,
        2 dum1 bit (18) unaligned,
        2 gen_name_blength bit (18) unaligned,
        2 gen_vers_boff fixed bin,
        2 dum2 bit (18) unaligned,
        2 gen_vers_blength bit (18) unaligned,
        2 gen_creation_time fixed bin (71),
        2 obj_creation_time fixed bin (71),
        2 symb_tree bit (18) unaligned,
        2 extension bit (18) unaligned,
        2 hmap bit (18) unaligned,
        2 n bit (18) unaligned,
        2 next_header bit (18) unaligned,
        2 bind_flag bit (18) unaligned,
        2 text_lng bit (18) unaligned,
        2 link_lng bit (18) unaligned,
        2 obj_name_boff fixed bin,
        2 dum3 bit (18) unaligned,
        2 obj_name_blength bit (18) unaligned;

declare  old_map_ptr fixed bin (18) based (lastword);
declare  string char (1048576) based (sblkp);

%include linkdcl;


/*  */

	entrypoint = "long    ";
	goto start;

object_info_$display: entry (seg_ptr, bitcount, arg_ptr, code);

	entrypoint = "display ";
	goto start;

object_info_$brief: entry (seg_ptr, bitcount, arg_ptr, code);

	entrypoint = "brief   ";
start:
	if bitcount = 0 then do;			/* if bitcount is 0 we have nothing */
	     code = error_table_$zero_length_seg;
	     return;
	end;

	segp = seg_ptr;
	oip = arg_ptr;
	code = 0;
	wordcount = divide (bitcount+35, 36, 18, 0);
	if oi.version_number = 2 then unspec (oi.format) = "0"b;
						/* reset indicators and entry bound */
	else unspec (old_oi.format) = "0"b;

	on not_in_read_bracket go to access_error_return;

	lastword = addrel (segp, wordcount-1);
	i = fixed (lastword -> map_ptr, 18);		/* will want to see if value is in reasonable range */

	revert not_in_read_bracket;

	if i <= 0 then go to old_format;		/* last word won't point to new format map */
	if i >= wordcount then go to old_format;
	mapp = addrel (segp, lastword -> map_ptr);	/* get ptr to map */
	if mapp -> object_map.identifier ^= "obj_map " then goto old_format;

	if oi.version_number = 2 then do;		/* fill in version 2 structure */
	     if mapp -> object_map.decl_vers = 2 then do; /* have version 2 object map */
		oi.textp = addrel (segp, mapp -> object_map.text_offset);
		oi.defp = addrel (segp, mapp -> object_map.definition_offset);
		oi.linkp = addrel (segp, mapp -> object_map.linkage_offset);
		oi.statp = addrel (segp, mapp -> object_map.static_offset);
		oi.symbp = addrel (segp, mapp -> object_map.symbol_offset);
		if mapp -> object_map.break_map_offset then oi.bmapp = addrel (segp, mapp -> object_map.break_map_offset);
		else oi.bmapp = null;		/* don't have break map & don't want ptr to beg */
		oi.tlng = fixed (mapp -> object_map.text_length, 18);
		oi.dlng = fixed (mapp -> object_map.definition_length, 18);
		oi.llng = fixed (mapp -> object_map.linkage_length, 18);
		oi.ilng = fixed (mapp -> object_map.static_length, 18);
		oi.slng = fixed (mapp -> object_map.symbol_length, 18);
		oi.blng = fixed (mapp -> object_map.break_map_length, 18);
		oi.format.old_format = "0"b;		/* at least we seem to have standard obj. map */
		oi.format.procedure = mapp -> object_map.format.procedure;
		oi.format.bound = mapp -> object_map.format.bound;
		oi.format.relocatable = mapp -> object_map.format.relocatable;
		oi.format.standard = mapp -> object_map.format.standard; /* could have standard obj. map but not std. seg. */
		oi.format.gate = (mapp -> object_map.entry_bound ^= "0"b);
		oi.format.separate_static = mapp -> object_map.format.separate_static;
		oi.format.links_in_text = mapp -> object_map.format.links_in_text;
		oi.format.perprocess_static = mapp -> object_map.format.perprocess_static;
		oi.entry_bound = fixed (mapp -> object_map.entry_bound, 18);
		oi.textlinkp = addrel (segp, mapp -> object_map.text_link_offset);
	     end;
	     else do;				/* have version 1 map */
		oi.textp = addrel (segp, map1.text_offset);
		oi.defp = addrel (segp, map1.def_offset);
		oi.linkp = addrel (segp, map1.link_offset);
		oi.symbp = addrel (segp, map1.symb_offset);
		if map1.bmap_offset then oi.bmapp = addrel (segp, map1.bmap_offset);
		else oi.bmapp = null;		/* don't have break map & don't want ptr to beg */
		oi.tlng = fixed (map1.text_length, 18);
		oi.dlng = fixed (map1.def_length, 18);
		oi.llng = fixed (map1.link_length, 18);
		oi.slng = fixed (map1.symb_length, 18);
		oi.blng = fixed (map1.bmap_length, 18);
		oi.format.old_format = "0"b;		/* at least we seem to have standard obj. map */
		oi.format.procedure = map1.format.procedure;
		oi.format.bound = map1.format.bound;
		oi.format.relocatable = map1.format.relocatable;
		oi.format.standard = map1.format.standard; /* could have standard obj. map but not std. seg. */
		call fill_in_new_items (oi.linkp, oi.llng); /* fill in items not directly available from obj seg */
	     end;
	end;					/* end of section for version 2 oi structure */

	else do;					/* fill in version 1 structure */
	     if mapp -> object_map.decl_vers = 2 then do; /*   have version 2 object map */
		old_oi.textp = addrel (segp, mapp -> object_map.text_offset);
		old_oi.defp = addrel (segp, mapp -> object_map.definition_offset);
		old_oi.linkp = addrel (segp, mapp -> object_map.linkage_offset);
		old_oi.symbp = addrel (segp, mapp -> object_map.symbol_offset);
		if mapp -> object_map.break_map_offset then old_oi.bmapp = addrel (segp, mapp -> object_map.break_map_offset);
		else old_oi.bmapp = null;		/* don't have break map & don't want ptr to beg */
		old_oi.tlng = fixed (mapp -> object_map.text_length, 18);
		old_oi.dlng = fixed (mapp -> object_map.definition_length, 18);
		old_oi.llng = fixed (mapp -> object_map.linkage_length, 18);
		old_oi.slng = fixed (mapp -> object_map.symbol_length, 18);
		old_oi.blng = fixed (mapp -> object_map.break_map_length, 18);
		old_oi.format.old_format = "0"b;	/* at least we seem to have standard obj. map */
		old_oi.format.procedure = mapp -> object_map.format.procedure;
		old_oi.format.bound = mapp -> object_map.format.bound;
		old_oi.format.relocatable = mapp -> object_map.format.relocatable;
		old_oi.format.standard = mapp -> object_map.format.standard; /* could have standard obj. map but not std. seg. */
		old_oi.format.gate = (mapp -> object_map.entry_bound ^= "0"b);
		old_oi.call_delimiter = fixed (mapp -> object_map.entry_bound, 18);
	     end;
	     else do;				/* have version 1 object map */
		old_oi.textp = addrel (segp, map1.text_offset);
		old_oi.defp = addrel (segp, map1.def_offset);
		old_oi.linkp = addrel (segp, map1.link_offset);
		old_oi.symbp = addrel (segp, map1.symb_offset);
		if map1.bmap_offset then old_oi.bmapp = addrel (segp, map1.bmap_offset);
		else old_oi.bmapp = null;		/* don't have break map & don't want ptr to beg */
		old_oi.tlng = fixed (map1.text_length, 18);
		old_oi.dlng = fixed (map1.def_length, 18);
		old_oi.llng = fixed (map1.link_length, 18);
		old_oi.slng = fixed (map1.symb_length, 18);
		old_oi.blng = fixed (map1.bmap_length, 18);
		old_oi.format.old_format = "0"b;	/* at least we seem to have standard obj. map */
		old_oi.format.procedure = map1.format.procedure;
		old_oi.format.bound = map1.format.bound;
		old_oi.format.relocatable = map1.format.relocatable;
		old_oi.format.standard = map1.format.standard; /* could have standard obj. map but not std. seg. */
	     end;
	end;

	if entrypoint = "brief   " then goto return;

/* The following section has only 2 versions because it copies stuff from
   the symbol section, which has not been changed along with the mapp->object_map. */

	if oi.version_number = 2 then do;		/* fill in version 2 structure */
	     sblkp = oi.symbp;
	     oi.compiler = sb.generator;
	     oi.compile_time = fixed (unspec (sb.obj_creation_time), 71); /* if archived, may not be on double word */
	     base21 = fixed (sb.uid_offset, 18) * 4 + 1;	/* get offset in terms of characters */
	     len = fixed (sb.uid_length, 18);
	     oi.userid = substr (string, base21, len);	/* copy userid */
	     oi.cvers.offset = bit (fixed (sb.gen_name_offset, 18), 18); /* first symbol block is at beg of symbol section */
	     oi.cvers.length = sb.gen_name_length;
	     oi.comment.offset = bit (fixed (sb.comment_offset, 18), 18);
	     oi.comment.length = sb.comment_length;
	     oi.source_map = fixed (sb.source_map, 18);
	     if entrypoint = "display " then goto return;

	     if oi.format.relocatable = "1"b then
		do;
		oi.rel_text = addrel (sblkp, sb.rel_text);
		oi.rel_def = addrel (sblkp, sb.rel_def);
		oi.rel_link = addrel (sblkp, sb.rel_link);
		oi.rel_symbol = addrel (sblkp, sb.rel_symb);
	     end;
	     else do;
		oi.rel_text,
		     oi.rel_def,
		     oi.rel_link,
		     oi.rel_symbol = null;
	     end;
	     oi.rel_static = null;			/* there aren't ant rel bits for static yet */
	     oi.text_boundary = fixed (sb.tbound, 18);
	     oi.static_boundary = fixed (sb.stat_bound, 18);
	     oi.default_truncate = fixed (sb.default_truncate, 18);
	     oi.optional_truncate = fixed (sb.optional_truncate, 18);
	end;

	else do;					/* fill in version 1 structure */
	     sblkp = old_oi.symbp;
	     old_oi.compiler = sb.generator;
	     old_oi.compile_time = fixed (unspec (sb.obj_creation_time), 71);
						/* if archived, may not be on double word */
	     base21 = fixed (sb.uid_offset, 18) * 4 + 1;	/* get offset in terms of characters */
	     len = fixed (sb.uid_length, 18);
	     old_oi.userid = substr (string, base21, len);	/* copy userid */
	     old_oi.cvers.offset = bit (fixed (sb.gen_name_offset, 18), 18);
						/* first symbol block is at beg of symbol section */
	     old_oi.cvers.length = sb.gen_name_length;
	     old_oi.comment.offset = bit (fixed (sb.comment_offset, 18), 18);
	     old_oi.comment.length = sb.comment_length;
	     old_oi.source_map = fixed (sb.source_map, 18);
	     if entrypoint = "display " then goto return;

	     if old_oi.format.relocatable = "1"b then
		do;
		old_oi.rel_text = addrel (sblkp, sb.rel_text);
		old_oi.rel_def = addrel (sblkp, sb.rel_def);
		old_oi.rel_link = addrel (sblkp, sb.rel_link);
		old_oi.rel_symbol = addrel (sblkp, sb.rel_symb);
	     end;
	     else do;
		old_oi.rel_text,
		     old_oi.rel_def,
		     old_oi.rel_link,
		     old_oi.rel_symbol = null;
	     end;
	     old_oi.text_boundary = fixed (sb.tbound, 18);
	     old_oi.static_boundary = fixed (sb.stat_bound, 18);
	     old_oi.default_truncate = fixed (sb.default_truncate, 18);
	     old_oi.optional_truncate = fixed (sb.optional_truncate, 18);
	end;

return:
	return;

access_error_return:
	code = error_table_$bad_ring_brackets;
	return;

/*  */

/* object_info_ was called for a non-standard object segment */

old_format:
	if old_map_ptr <= 0 then go to bad_obj_map;	/* last word can't point to map */
	if old_map_ptr >= wordcount then go to bad_obj_map;
	mapp = addrel (segp, old_map_ptr);		/* get ptr to object map */
	if old_map.sentinel1 ^= (36)"10"b then goto bad_obj_map;
	if old_map.sentinel2 ^= (36)"10"b then
	     if old_map.sentinel2 ^= (36)"01"b then
		do;
bad_obj_map:
		code = error_table_$bad_segment;
		return;
	     end;

	if oi.version_number = 2 then do;		/* fill in version 2 structure */
	     oi.textp = addrel (segp, old_map.info (1).offset);
	     p,
		oi.linkp = addrel (segp, old_map.info (2).offset);
	     oi.symbp = addrel (segp, old_map.info (3).offset);
	     lng = old_map.info (2).offset;
	     oi.llng = old_map.info (3).offset - lng;
	     oi.slng = divide (old_map.info (3).length+35, 36, 17, 0);
	     oi.tlng = fixed (p -> virgin_linkage_header.def_offset, 18);
	     if p -> virgin_linkage_header.defs_in_link = "010000"b then do; /* defs in linkage section */
		oi.dlng = old_map.info (3).offset - lng - oi.tlng;
						/* length of defs is length of linkage - defoffset */
		oi.defp = addrel (p, oi.tlng);
		oi.tlng = lng;
	     end;
	     else do;				/* defs in text section, separate */
		oi.defp = addrel (segp, oi.tlng);
		oi.dlng = lng - oi.tlng;
	     end;
	     if old_map.info (4).offset ^= old_map_ptr then do; /* break map has been added */
		oi.bmapp = addrel (segp, old_map.info (4).offset);
		oi.blng = divide (old_map.info (4).length, 76, 17, 0);
	     end;
	     else do;				/* there is no break map */
		oi.bmapp = null;
		oi.blng = 0;
	     end;
	     sblkp = oi.symbp;			/* pointer to symbol section header */
	     oi.old_format = "1"b;			/* segment has old style object map */
	     base18 = divide (osb.gen_name_boff, 9, 18, 0) +1;
	     lng = divide (fixed (osb.gen_name_blength, 18), 9, 17, 0);

	     if substr (string, base18, lng) = "binder" then oi.format.bound = "1"b;

	     call fill_in_new_items (oi.linkp, oi.llng);	/* fill in items not directly available from obj seg */

	     if entrypoint = "brief   " then goto return; /* relocatable flag only set for $long */

	     oi.compiler = substr (string, base18, lng);
	     oi.compile_time = fixed (unspec (osb.obj_creation_time), 71); /* if archived, may not be on double word */
	     oi.userid = "";
	     base18 = divide (osb.gen_vers_boff, 36, 17, 0);
	     oi.cvers.offset = bit (fixed (base18, 18), 18);
	     oi.cvers.length = bit (bin (divide (fixed (osb.gen_vers_blength, 18), 9, 18, 0), 18), 18);
	     oi.comment.offset,
		oi.comment.length = ""b;
	     oi.source_map = 0;
	     if entrypoint = "display " then goto return;

	     oi.text_boundary,
		oi.static_boundary = 2;
	     unspec (oi.default_truncate) = ""b;
	     oi.rel_text,				/* initialize rel ptrs to null in case seg is bound */
		oi.rel_def,
		oi.rel_link,
		oi.rel_symbol = null;
	     call decode_definition_$init (segp, bitcount);
	     dd.next_def = oi.defp;			/* initialize decode_definition_ calls */
	     defcount = 0;				/* count relevant defs, for acceleration */
follow_defs:
	     if decode_definition_ (dd.next_def, addr (dd)) = "1"b then goto return;
	     if dd.section ^= "symb" then goto follow_defs;
	     if dd.defname = "rel_text" then
		do;
		oi.rel_text = addrel (oi.symbp, dd.offset);
		oi.default_truncate,
		     oi.optional_truncate = dd.offset;
		defcount = defcount +1;
	     end;
	     else if dd.defname = "rel_link" then
		do;
		oi.rel_link = addrel (oi.symbp, dd.offset);
		defcount = defcount +1;
	     end;
	     else if dd.defname = "rel_symbol" then
		do;
		oi.rel_symbol = addrel (oi.symbp, dd.offset);
		defcount = defcount +1;
	     end;
	     if defcount = 3 then do;
		oi.format.relocatable = "1"b;		/* at least this might help the binder */
		go to table_check;
	     end;
	     goto follow_defs;

table_check:
	     if oi.compiler = "PL/I"
	     | oi.compiler = "v2pl1"
	     | oi.compiler = "fortran"
	     | oi.compiler = "pl1"
	     then do;				/* may have a symbol table which can be truncated */
		base18 = bin (sblkp -> osb.symb_tree, 18); /* get rel ptr to symbol table */
						/* assume that these segs have only 1 symbol block */
		if base18 ^= 0 then oi.optional_truncate = base18;
	     end;
	     oi.rel_static = null;			/* there are no rel bits for static */
	end;



	else do;					/* fill in version 1 structure */
	     old_oi.textp = addrel (segp, old_map.info (1).offset);
	     p,
		old_oi.linkp = addrel (segp, old_map.info (2).offset);
	     old_oi.symbp = addrel (segp, old_map.info (3).offset);
	     lng = old_map.info (2).offset;
	     old_oi.llng = old_map.info (3).offset - lng;
	     old_oi.slng = divide (old_map.info (3).length+35, 36, 17, 0);
	     old_oi.tlng = fixed (p -> virgin_linkage_header.def_offset, 18);
	     if p -> virgin_linkage_header.defs_in_link = "010000"b then do; /* defs in linkage section */
		old_oi.dlng = old_map.info (3).offset - lng - old_oi.tlng;
						/* length of defs is length of linkage - defoffset */
		old_oi.defp = addrel (p, old_oi.tlng);
		old_oi.tlng = lng;
	     end;
	     else do;				/* defs in text section, separate */
		old_oi.defp = addrel (segp, old_oi.tlng);
		old_oi.dlng = lng - old_oi.tlng;
	     end;
	     if old_map.info (4).offset ^= old_map_ptr then do; /* break map has been added */
		old_oi.bmapp = addrel (segp, old_map.info (4).offset);
		old_oi.blng = divide (old_map.info (4).length, 76, 17, 0);
	     end;
	     else do;				/* there is no break map */
		old_oi.bmapp = null;
		old_oi.blng = 0;
	     end;
	     sblkp = old_oi.symbp;			/* pointer to symbol section header */
	     old_oi.old_format = "1"b;		/* segment has old style object map */
	     base18 = divide (osb.gen_name_boff, 9, 18, 0) +1;
	     lng = divide (fixed (osb.gen_name_blength, 18), 9, 17, 0);

	     if substr (string, base18, lng) = "binder" then old_oi.format.bound = "1"b;
	     if entrypoint = "brief   " then goto return; /* relocatable flag only set for $long */

	     old_oi.compiler = substr (string, base18, lng);
	     old_oi.compile_time = fixed (unspec (osb.obj_creation_time), 71);
						/* if archived, may not be on double word */
	     old_oi.userid = " ";
	     base18 = divide (osb.gen_vers_boff, 36, 17, 0);
	     old_oi.cvers.offset = bit (fixed (base18, 18), 18);
	     old_oi.cvers.length = bit (bin (divide (fixed (osb.gen_vers_blength, 18), 9, 18, 0), 18), 18);
	     old_oi.comment.offset,
		old_oi.comment.length = "0"b;
	     old_oi.source_map = 0;
	     if entrypoint = "display " then goto return;

	     old_oi.text_boundary,
		old_oi.static_boundary = 2;
	     unspec (old_oi.default_truncate) = "0"b;
	     old_oi.rel_text,			/* initialize rel ptrs to null in case seg is bound */
		old_oi.rel_def,
		old_oi.rel_link,
		old_oi.rel_symbol = null;
	     call decode_definition_$init (segp, bitcount);
	     dd.next_def = old_oi.defp;		/* initialize decode_definition_ calls */
	     defcount = 0;				/* count relevant defs, for acceleration */
follow_defs_2:
	     if decode_definition_ (dd.next_def, addr (dd)) = "1"b then goto return;
	     if dd.section ^= "symb" then goto follow_defs_2;
	     if dd.defname = "rel_text" then
		do;
		old_oi.rel_text = addrel (old_oi.symbp, dd.offset);
		old_oi.default_truncate,
		     old_oi.optional_truncate = dd.offset;
		defcount = defcount +1;
	     end;
	     else if dd.defname = "rel_link" then
		do;
		old_oi.rel_link = addrel (old_oi.symbp, dd.offset);
		defcount = defcount +1;
	     end;
	     else if dd.defname = "rel_symbol" then
		do;
		old_oi.rel_symbol = addrel (old_oi.symbp, dd.offset);
		defcount = defcount +1;
	     end;
	     if defcount = 3 then do;
		old_oi.format.relocatable = "1"b;	/* at least this might help the binder */
		go to table_check_2;
	     end;
	     goto follow_defs_2;

table_check_2:
	     if old_oi.compiler = "PL/I"
	     | old_oi.compiler = "v2pl1"
	     | old_oi.compiler = "fortran"
	     | old_oi.compiler = "pl1"
	     then do;				/* may have a symbol table which can be truncated */
		base18 = bin (sblkp -> osb.symb_tree, 18); /* get rel ptr to symbol table */
						/* assume that these segs have only 1 symbol block */
		if base18 ^= 0 then old_oi.optional_truncate = base18;
	     end;
	end;
	go to return;

/*  */
fill_in_new_items: proc (link_ptr, link_len);

/* This procedure fills in items in the version 2 oi structure which
   are not available from the object segment. */

declare  link_ptr ptr;
declare  link_len fixed bin;

	     if fixed (link_ptr -> virgin_linkage_header.link_begin, 18) <= 8 then do; /* no static section */
		oi.statp = null;
		oi.ilng = 0;
	     end;
	     else do;
		oi.statp = addrel (link_ptr, 8);
		oi.ilng = fixed (link_ptr -> virgin_linkage_header.link_begin, 18) - 8;
	     end;
	     oi.entry_bound = 0;
	     oi.textlinkp = null;

	     return;
	end;
						/*  */

decode_object_: entry (seg_ptr, bitcount, index, sect_ptr, sect_lng, sect_bc);

declare (index, sect_lng) fixed bin, sect_ptr pointer;
declare  sect_bc fixed bin (24);

	sect_ptr = null;				/* preset error return */
	i = index;				/* copy section index into stack);
						   if i <= 0 then return;
						   if i > 3 then return;	/* index out og bounds */

	segp = seg_ptr;
	if bitcount <= 287 then return;		/* absolute minimum for a 1-component, 1-word object */
	if mod (bitcount, 18) ^= 0 then return;		/* want bitcount to include map pointer */
	wordcount = divide (bitcount+35, 36, 18, 0);
	lastword = addrel (segp, wordcount-1);
	if old_map_ptr <= 0 then go to new_format;	/* out of range */
	if old_map_ptr >= wordcount then go to new_format; /* also out of range */
	mapp = addrel (segp, old_map_ptr);		/* get ptr to object map */
	if old_map.sentinel1 ^= (36)"10"b then goto new_format;
	if old_map.sentinel2 ^= (36)"10"b then
	     if old_map.sentinel2 ^= (36)"01"b then goto new_format; /* this is acceptable too */

/* perform some more consistency checks */
	base18 = old_map.info (i).offset;
	if base18  < 0 then go to new_format;		/* section not within object */
	if base18 >= old_map_ptr then go to new_format;	/*  "  */

	bitlng = old_map.info (i).length;
	if bitlng < 0 then go to new_format;
	len = old_map.info (i+1).offset - base18;		/* this method is more accurate for word length */
	if len < 0 then go to new_format;

	sect_ptr = addrel (segp, old_map.info (i).offset); /* pointer to specified section */
	sect_bc = bitlng;
	sect_lng = len;
	return;


new_format:
	len = fixed (lastword -> map_ptr, 18);		/* find "offset" of obj map */
	if len <= 0 then return;			/* map ptr is out of bounds */
	if len >= wordcount then return;		/*     "   */
	mapp = addrel (segp, lastword -> map_ptr);
	if mapp -> object_map.identifier ^= "obj_map " then return;

	if mapp -> object_map.decl_vers = 2 then do;	/* have version 2 map */
	     if i = 1 then
		do;				/* text section */
		sect_ptr = addrel (segp, mapp -> object_map.text_offset);
		sect_lng = fixed (mapp -> object_map.text_length, 18) + fixed (mapp -> object_map.definition_length, 18);
	     end;
	     else if i = 2 then
		do;				/* linkage section */
		sect_ptr = addrel (segp, mapp -> object_map.linkage_offset);
		sect_lng = fixed (mapp -> object_map.linkage_length, 18);
	     end;
	     else if i = 3 then
		do;				/* symbol section */
		sect_ptr = addrel (segp, mapp -> object_map.symbol_offset);
		sect_lng = fixed (mapp -> object_map.symbol_length, 18);
	     end;
	     sect_bc = sect_lng * 36;
	end;
	else do;					/* have version 1 map */
	     if i = 1 then
		do;				/* text section */
		sect_ptr = addrel (segp, map1.text_offset);
		sect_lng = fixed (map1.text_length, 18) + fixed (map1.def_length, 18);
	     end;
	     else if i = 2 then
		do;				/* linkage section */
		sect_ptr = addrel (segp, map1.link_offset);
		sect_lng = fixed (map1.link_length, 18);
	     end;
	     else if i = 3 then
		do;				/* symbol section */
		sect_ptr = addrel (segp, map1.symb_offset);
		sect_lng = fixed (map1.symb_length, 18);
	     end;
	     sect_bc = sect_lng * 36;
	end;



     end object_info_$long;
