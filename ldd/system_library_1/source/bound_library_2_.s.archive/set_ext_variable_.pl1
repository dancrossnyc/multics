/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396), audit(86-11-13,Zwick),
     install(86-11-20,MR12.0-1222):
     added the entrypoint star_heap to perform the look up and allocation of
     heap links. This is called by the user and by link_snap. Reorganized this
     routine to allow the changes to follow the existing methodology used in
     the program.
  2) change(86-06-24,DGHowe), approve(86-06-24,MCR7420), audit(86-11-13,Zwick),
     install(86-11-20,MR12.0-1222):
     changed the calling sequence of list_init_ to include a segment pointer.
     changed the parameter list of the following entrypoints (for_linker
     star_heap) to include a segment pointer. Added an entrypoint named pointer
     to allow system links to have pointer initialization.
  3) change(86-06-24,DGHowe), approve(86-06-24,MCR7421), audit(86-11-13,Zwick),
     install(86-11-20,MR12.0-1222):
     removed the entrypoint allocate as it was not being used by the routine it
     was meant for.
                                                   END HISTORY COMMENTS */


/* MODIFICATION NOTICES -------------------------------------

   Written by M. Weaver in 1976.
   Modified by M. Jordan 1981 to add $locate
   Modified by M. Weaver December 1982 to call fortran_storage_manager_ for
    	LIST_TEMPLATE_INIT and to add entries for the linker and the trap 
	procedure
   Modified by T. Oke January 27 1983 to fix list_init_ ref to node_ptr to ref
	  p (which is the real pointer to the node at that point).
   Modified by M. Weaver February 1983 to set have_vla_variables flag
   Modified by M. Weaver December 1984 to catch the 
	  malformed_list_template_entry_ condition
   ------------------------------------------------------------ */


/* format: style3,^indnoniterdo */

/* ENTRYPOINTS in set_ext_variable_
   set_ext_variable_ called by users to find or allocate *system variables
   locate		 called to find *system links on the name table
   for_linker	 called by link snap to allocate or find *system links
   star_heap	 called by link snap to allocate or find *heap links.
   pointer	 called by the user to allcoate or find *system variables
		 allows for pointer initialization via list_init_
*/

set_ext_variable_:
     proc (a_ext_name, a_init_info_ptr, a_sb, a_found_sw, a_node_ptr, a_code);



/* This procedure looks up the *system link symbol name in the name table.
   If the name is not found, the variable is added.
   If the requested size is larger, an error is returned.

   This entry is not called in ring 0 because it calls fortran_storage_manager_
   directly to allocate the variable if the size > sys_info_$max_seg_size.
   This entry is intended to be called by set_fortran_common and by
   fortran_storage_ in the normal case.
*/

/* parameters */

dcl	a_ext_name	char (*) parameter;		/* variable name */
dcl	a_found_sw	bit (1) aligned parameter;	/* is it found */
dcl	a_code		fixed bin (35) parameter;	/* system error code */
dcl	a_def_ptr		pointer parameter;		/* ptr to the def for the lk */
dcl	a_node_ptr	pointer parameter;		/* returned ptr to the target*/
dcl	a_link_ptr	pointer parameter;		/* */
dcl	a_mc_ptr		pointer parameter;		/* ptr to the machine conds */
dcl	a_seg_ptr		pointer parameter;		/* ptr to segmetn containing the reference */
dcl	a_type_ptr	pointer parameter;		/* ptr to type pair */

dcl	a_init_info_ptr	pointer parameter;		/* pointer to init info */
dcl	a_sb		pointer parameter;		/* pointer to stack header */

/* local vars */

dcl	found		bit (1);			/* temp found bit */
dcl	hash_index	fixed bin (6);		/* index into hash table for the ext name */
dcl	heap_header_ptr	pointer;			/* ptr to heap header */
dcl	is_heap_link	bit (1) init ("0"b);	/* specifies we are working on a heap link */
dcl	i		fixed bin;		/* used in loop to init hash table */
dcl	called_by_linker	bit (1) aligned;		/* bits specifying called info */
dcl	loop_count	fixed bin;		/* number of times we have performed a look up loop */
dcl	nchars		fixed bin;		/* length of ext name */
dcl	(new_ptr, table_ptr)
			pointer;			/* ptr to variable and var table */
dcl	ring_no		fixed bin;
dcl	seg_ptr		pointer automatic;		/* autmatic var for seg ptr value */
dcl	(t1, t2, t3, t4)	fixed bin (71);		/* clock times for calculating meters */
dcl	var_ptr		pointer;			/* points to variable_node */
dcl	vsize		fixed bin (35);		/* size of variable to allocate */
dcl	where_to_allocate_ptr
			pointer automatic;		/* ptr to area where we should allocate our structs */



/* based */

dcl	based_area	area (vsize) based;		/* an overlay area to allocate in */
dcl	variable		(vsize) fixed bin (35) based; /* the actual variable */

/* conditions */

dcl	area		condition;
dcl	bad_area_format	condition;


/* external routines */

dcl	cu_$level_get	entry (fixed bin);
dcl	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), pointer, fixed bin (35));
dcl	unique_chars_	entry (bit (*)) returns (char (15));
dcl	fortran_storage_manager_$alloc
			entry (fixed bin, pointer, pointer);
dcl	heap_manager_$create_heap_for_set_ext_var
			entry (pointer, fixed bin, pointer, fixed bin (35));
dcl	list_init_$variable_already_zero
			entry (pointer, pointer, fixed bin (35), pointer, pointer, fixed bin (35));
dcl	trap_caller_caller_ entry (pointer, pointer, pointer, pointer, pointer, pointer, fixed bin (35));

/* external variables */

dcl	(
	error_table_$invalid_heap,
	error_table_$invalid_heap_var_size,
	error_table_$bigger_ext_variable,
	error_table_$notalloc,
	error_table_$noalloc,
	error_table_$defs_loop,
	error_table_$no_ext_sym,
	error_table_$bad_link_target_init_info
	)		ext fixed bin (35);
dcl	sys_info$max_seg_size
			fixed bin (19) ext;
dcl	pl1_operators_$VLA_words_per_seg_
			fixed bin (19) ext;



/*		BUILTIN FUNCTIONS		*/


dcl	(addr, bin, clock, divide, empty,  hbound, lbound,
	 length, max, multiply, null, ptr, rtrim, substr,
	 unspec, vclock)		builtin;


/* set_ext_variable_ starts here .. set initial values for check bits */

	called_by_linker = "0"b;			/* this entry called outside ring 0 */
	is_heap_link = "0"b;
	seg_ptr = null ();				/* can't do ptr init */
	where_to_allocate_ptr = a_sb -> stack_header.user_free_ptr;
	table_ptr = a_sb -> stack_header.sys_link_info_ptr;

/* this is a block of common code used by set_ext_var$allocate and 
   set_ext_var$for_linker and set_ext_var$star_heap.

   we check for no var table and make sure the init info passed to us is
   valid
*/

JOIN:
	a_found_sw = "0"b;
	a_node_ptr = null;
	a_code = 0;


	on bad_area_format, area
	     begin;
		a_code = error_table_$notalloc;
		goto ERROR;
	     end;

	nchars = length (rtrim (a_ext_name));
	hash_index = HASH ();

/* check init info setting vsize if 0 no init and we set an error
   after allocating the table if it doesnot exist
*/

	if a_init_info_ptr ^= null
	then do;
	     vsize = a_init_info_ptr -> init_info.size;
	     if a_ext_name = "blnk*com"
	     then vsize = max (sys_info$max_seg_size - 50, vsize);
	     if vsize < 0
	     then do;
		a_code = error_table_$bad_link_target_init_info;
		return;
	     end;
	end;
	else vsize = 0;				/*  = a_def_ptr indicates no init info, don't create */

/* If invoked from the user ring, there is a small window here.  The
   user can quit while we are in the trap procedure and invoke a
   program which causes the variable (or one with the same name) to be
   allocated.  However the same thing can happen (with a smaller
   window) when set_ext_variable_ is called in the user ring.  I don't
   think that this will be a problem in practice. 
*/


	if table_ptr = null ()
	then do;
	     allocate variable_table_header in (where_to_allocate_ptr -> based_area) set (table_ptr);
	     if ^is_heap_link
	     then a_sb -> stack_header.sys_link_info_ptr = table_ptr;
	     else heap_header_ptr -> heap_header.heap_name_list_ptr = table_ptr;

/* initialize table  */

	     do i = lbound (table_ptr -> variable_table_header.hash_table, 1)
		to hbound (table_ptr -> variable_table_header.hash_table, 1);
		table_ptr -> variable_table_header.hash_table (i) = null;
	     end;
	end;
	else do;					/* search only if table was already initialized */
	     call LOOKUP ();
	     if a_code ^= 0
	     then return;
	     a_found_sw = found;
	     if found
	     then do;
		if vsize > var_ptr -> variable_node.vbl_size
		then a_code = error_table_$bigger_ext_variable;
		return;
	     end;
	end;

/* no existing variable by this name; must allocate */

	if vsize = 0 & ^is_heap_link
	then do;					/* no init info; can't create */
	     a_code = error_table_$no_ext_sym;
	     return;
	end;
	else if ((vsize = 0) | (vsize > (sys_info$max_seg_size - 50))) & is_heap_link
	then do;
	     a_code = error_table_$invalid_heap_var_size;
	     return;
	end;


/* Check for valid initialization types before allocating and threading so
   we won't have to undo the allocation. */

	if (a_init_info_ptr -> init_info.type ^= NO_INIT) & (a_init_info_ptr -> init_info.type ^= TEMPLATE_INIT)
	     & (a_init_info_ptr -> init_info.type ^= EMPTY_AREA_INIT)
	     & (a_init_info_ptr -> init_info.type ^= LIST_TEMPLATE_INIT)
	then do;
	     a_code = error_table_$bad_link_target_init_info;
	     return;
	end;


/* allocate the var node and check for valid init type. call out if
   we have a vla -- to fortran_storage_manager (this will not return to here)
   if doen via trap caller caller. other wise allocate the variable it self and
   add it to the variable name list at its hash index
*/

	t3 = vclock ();

	allocate variable_node in (where_to_allocate_ptr -> based_area) set (var_ptr);

	if vsize > sys_info$max_seg_size
	then do;
	     if (a_init_info_ptr -> init_info.type ^= NO_INIT)
		& (a_init_info_ptr -> init_info.type ^= LIST_TEMPLATE_INIT)
	     then do;				/* multi_seg variable can't have template or be an area */
		free var_ptr -> variable_node;
		a_code = error_table_$bad_link_target_init_info;
		return;
	     end;
	     if called_by_linker
	     then call trap_caller_caller_ (a_mc_ptr, null, a_def_ptr, a_type_ptr, a_link_ptr, null, a_code);
	     else call fortran_storage_manager_$alloc (
		     divide (vsize + pl1_operators_$VLA_words_per_seg_ - 1, pl1_operators_$VLA_words_per_seg_, 17),
		     var_ptr, new_ptr);
	end;

	else if vsize > (sys_info$max_seg_size - 50)
	then do;
	     call hcs_$make_seg ("", unique_chars_ (""b) || "linker", "", 01110b, new_ptr, a_code);
	     if a_code ^= 0
	     then do;
		free var_ptr -> variable_node;
		a_code = error_table_$noalloc;
		return;
	     end;
	end;

/* *heap links should always come here as they can not be bigger than 
   mxsegsiz-50 */

	else allocate variable in (where_to_allocate_ptr -> based_area) set (new_ptr);

	var_ptr -> variable_node.forward_thread = table_ptr -> variable_table_header.hash_table (hash_index);
	table_ptr -> variable_table_header.hash_table (hash_index) = var_ptr;
	var_ptr -> variable_node.name_size = nchars;
	var_ptr -> variable_node.name = substr (a_ext_name, 1, nchars);
	var_ptr -> variable_node.vbl_ptr = new_ptr;
	var_ptr -> variable_node.vbl_size = vsize;
	var_ptr -> variable_node.init_type = a_init_info_ptr -> init_info.type;
	var_ptr -> variable_node.init_ptr = a_init_info_ptr;
	if seg_ptr ^= null ()
	then var_ptr -> variable_node.seg_ptr = ptr (seg_ptr, 0);
	else var_ptr -> variable_node.seg_ptr = null ();
	if vsize > sys_info$max_seg_size
	then table_ptr -> variable_table_header.flags.have_vla_variables = "1"b;
						/* let run_ know to clean up */

/* Initialize the variable.
*/

	if a_init_info_ptr -> init_info.type ^= 0
	then do;
	     if a_init_info_ptr -> init_info.type = EMPTY_AREA_INIT
	     then var_ptr -> variable_node.vbl_ptr -> based_area = empty ();
	     else if a_init_info_ptr -> init_info.type = TEMPLATE_INIT
	     then var_ptr -> variable_node.vbl_ptr -> variable = a_init_info_ptr -> init_info.init_template;
	     else if a_init_info_ptr -> init_info.type = LIST_TEMPLATE_INIT
	     then do;
		call list_init_$variable_already_zero (var_ptr -> variable_node.vbl_ptr,
		     addr (a_init_info_ptr -> list_init_info.template), vsize, a_sb, seg_ptr, a_code);
		if a_code ^= 0
		then go to FINISH_METERS;		/* might as well fill in meters */
	     end;
	end;

FINISH_METERS:					/* complete the metering information. generally this is the number of ext vars
   and how long it takes to work on them
*/
	t4 = vclock ();
	table_ptr -> variable_table_header.total_allocation_time =
	     table_ptr -> variable_table_header.total_allocation_time + t4 - t3;
	table_ptr -> variable_table_header.total_allocated_size =
	     table_ptr -> variable_table_header.total_allocated_size + vsize;
	table_ptr -> variable_table_header.number_of_variables =
	     table_ptr -> variable_table_header.number_of_variables + 1;
	table_ptr -> variable_table_header.cur_num_of_variables =
	     table_ptr -> variable_table_header.cur_num_of_variables + 1;
	var_ptr -> variable_node.time_allocated = clock ();
	a_node_ptr = var_ptr;


ERROR:						/* nonlocal label for condition handlers */
	return;

/* NOTE the code removed from the following space was documented out
   for the following reason and was deleted to clean up the code.

   Following is the code  that was used to automatically reallocate
   the variable's storage if the new size is larger than the old size.
   It was removed because it had bad side effects-- programs saved 
   pointers to the original storage and got faults at some indefinite
   time after the reallocation.

  It is impossible to guarantee that a user will not reference the 
  reallocated area via an automatic pointer.

*/

/* this fuction performs the hashing alogorithm */

HASH:
     proc () returns (fixed bin (6));


dcl	tname		char (16);
dcl	w		(4) fixed bin (30) based (addr (tname));
dcl	hash_temp		fixed bin (71);
dcl	hash_index	fixed bin (6);


	tname = a_ext_name;
	hash_temp = multiply ((w (1) + w (2)), (w (3) + w (4)), 71);
	hash_index = bin (substr (unspec (hash_temp), 31, 6), 6);

	return (hash_index);


     end HASH;

/* this funciton looks through a index into the hash table for a specific name
   it expects a_ext_name and table_ptr to be set elsewhere. it sets found and 
   a_node_ptr if the name is found on the name list
*/
LOOKUP:
     proc ();


	found = "0"b;

	table_ptr -> variable_table_header.number_of_searches =
	     table_ptr -> variable_table_header.number_of_searches + 1;
	t1 = vclock ();
	loop_count = 0;
	do var_ptr = table_ptr -> variable_table_header.hash_table (hash_index)
	     repeat (var_ptr -> variable_node.forward_thread) while (var_ptr ^= null ());
	     loop_count = loop_count + 1;
	     if loop_count > 200
	     then do;
		a_code = error_table_$defs_loop;
		return;
	     end;
	     table_ptr -> variable_table_header.number_of_steps =
		table_ptr -> variable_table_header.number_of_steps + 1;
	     if var_ptr -> variable_node.name_size = nchars
	     then if var_ptr -> variable_node.name = a_ext_name
		then do;
		     t2 = vclock ();		/* done searching */
		     table_ptr -> variable_table_header.total_search_time =
			table_ptr -> variable_table_header.total_search_time + t2 - t1;
		     a_node_ptr = var_ptr;
		     found = "1"b;
		     return;
		end;
	end;					/* of searching */

	t2 = vclock ();
	table_ptr -> variable_table_header.total_search_time =
	     table_ptr -> variable_table_header.total_search_time + t2 - t1;

	return;


     end LOOKUP;

/* END LOCAL ROUTINES ------------------------------------------------- */

/* EXTERNAL ENTRYPOINTS ----------------------------------------------- */

/* locate is used to find ext vars on the external var list and returns a ptr
   to them in a_node_ptr; It expects the var to exist as well as the var table

   parameters
   a_ext_name       variable name to be found
   a_sb		stack base ptr of callers stack
   a_node_ptr	ptr to variable (Output)
   a_code		system error code

*/

locate:
     entry (a_ext_name, a_sb, a_node_ptr, a_code);


	a_node_ptr = null ();
	a_code = 0;
	table_ptr = a_sb -> stack_header.sys_link_info_ptr;

	if table_ptr = null ()
	then do;
NOT_FOUND:
	     a_code = error_table_$no_ext_sym;
	     return;
	end;

	nchars = length (rtrim (a_ext_name));
	hash_index = HASH ();
	call LOOKUP ();				/* now try to find the variable */
	if a_code ^= 0
	then return;				/* some error has occured */
	if ^found
	then goto NOT_FOUND;			/* the symbol was not found */

	return;


/* for_linker
   This entry must be called when in ring 0 and only in ring 0.
   If a multi_segment variable is to be created, this entry traps out
   to fortran_storage_ in the user ring, which in turn calls
   set_ext_variable_$allocate.

   parameters
     a_ext_name      the name of the variable (Input)
     a_init_info_ptr a pointer to initialization informatio for the 
		 variable (Input)
     a_sb		 a pointer to the targets stack header ie in the
		 ring where the link was faulted (Input)
     a_seg_ptr	 pointer to the seg containing the ext reference (Input)
     a_found_sw	 specifies if the variable was found (Output)
     a_node_ptr	 a pointer to the target variable (Output)
     a_code	 a system error_code (Output)
     a_mc_ptr	 a pointer to the machine conditions for 
		 trap_caller_caller_
     a_def_ptr	 passed on to trap_caller_caller_
     a_type_ptr	 passed on to trap_caller_caller_
     a_link_ptr	 passed on to trap_caller_caller_
*/

for_linker:
     entry (a_ext_name, a_init_info_ptr, a_sb, a_seg_ptr, a_found_sw, a_node_ptr, a_code, a_mc_ptr, a_def_ptr, a_type_ptr,
	a_link_ptr);

	called_by_linker = "1"b;
	is_heap_link = "0"b;
	seg_ptr = a_seg_ptr;
	where_to_allocate_ptr = a_sb -> stack_header.user_free_ptr;
	table_ptr = a_sb -> stack_header.sys_link_info_ptr;

	goto JOIN;

/* star_heap
   allocates and initializes heap variables or finds them on the
   existing heap list and returns a pointer to the target in a_node_ptr

   paramters
     a_ext_name      the name of the variable (Input)
     a_init_info_ptr a pointer to initialization information for the 
		 variable (Input)
     a_sb		 a pointer to the targets stack header ie in the
		 ring where the link was faulted (Input)
     a_seg_ptr	 pointer to the seg containing the ext reference (Input)
     a_found_sw	 specifies if the variable was found (Output)
     a_node_ptr	 a pointer to the target variable (Output)
     a_code	 a system error_code (Output)
*/

star_heap:
     entry (a_ext_name, a_init_info_ptr, a_sb, a_seg_ptr, a_found_sw, a_node_ptr, a_code);

/* initialize values required by the general code */

	called_by_linker = "0"b;
	is_heap_link = "1"b;
	a_found_sw = "0"b;
	a_node_ptr = null;
	seg_ptr = a_seg_ptr;
	vsize = 0;
	a_code = 0;

	on bad_area_format, area
	     begin;
		a_code = error_table_$notalloc;
		goto ERROR;
	     end;


/* check and see if we have a heap area defined 
*/

	heap_header_ptr = a_sb -> stack_header.heap_header_ptr;
	if heap_header_ptr = null ()
	then do;

/* if we do not have a heap it means we have been entered either from a non
   C program or someone is executing a C program without using main_.
   This is not nice but we set up a heap level 0 anyway....
   This is similar to heap_manager_$push_heap_level but not quite the
   same in that it is using level 0....
*/
	     a_code = 0;
	     call cu_$level_get (ring_no);		/* get ring no for Heap area owner name */
	     call heap_manager_$create_heap_for_set_ext_var (a_sb, ring_no, heap_header_ptr, a_code);
	     if a_code ^= 0 then
		return;
	end;
	if (heap_header_ptr -> heap_header.version ^= heap_header_version_1)
	then do;
	     a_code = error_table_$invalid_heap;
	     return;
	end;

	where_to_allocate_ptr = a_sb -> stack_header.heap_header_ptr -> heap_header.area_ptr;

	table_ptr = heap_header_ptr -> heap_header.heap_name_list_ptr;

	goto JOIN;

/* allows *system variable to have pointer initialization using 
   the list_init_template structure. finds or allocates *system variables.

   paramters
     a_ext_name      the name of the variable (Input)
     a_init_info_ptr a pointer to initialization information for the 
		 variable (Input)
     a_sb		 a pointer to the targets stack header ie in the
		 ring where the link was faulted (Input)
     a_seg_ptr	 pointer to the seg containing the ext reference (Input)
     a_found_sw	 specifies if the variable was found (Output)
     a_node_ptr	 a pointer to the target variable (Output)
     a_code	 a system error_code (Output)
*/

pointer:
     entry (a_ext_name, a_init_info_ptr, a_sb, a_seg_ptr, a_found_sw, a_node_ptr, a_code);


	called_by_linker = "0"b;			/* this entry called outside ring 0 */
	is_heap_link = "0"b;
	seg_ptr = a_seg_ptr;
	where_to_allocate_ptr = a_sb -> stack_header.user_free_ptr;
	table_ptr = a_sb -> stack_header.sys_link_info_ptr;
	goto JOIN;


/* END EXTERNAL ENTRYPOINTS --------------------------------------- */

/* INCLUDE FILES -------------------------------------------------- */
%include system_link_names;
%page;
%include system_link_init_info;
%page;
%include stack_header;

     end set_ext_variable_;
