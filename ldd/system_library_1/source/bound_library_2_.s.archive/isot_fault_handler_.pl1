/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


isot_fault_handler_: proc (mcptr, cname, d1, d2) returns (bit (1) aligned);

/* modified September 1976 by M. Weaver  to use area package allocation */
/* modified December 1976 by M. Weaver to handle isot faults from ring 0 */

dcl  mcptr ptr,
     cname char (*),
    (d1, d2) ptr,
    (isotpp, statp, new_statp) ptr,
    (ring, level) fixed bin (3),
     area condition,
     statlen fixed bin (17),
     segno fixed bin (17),
     copy_static (statlen) fixed bin (35) aligned based,
     based_ptr ptr unaligned based,
     based_area area based,
     hcs_$level_get entry returns (fixed bin (3)),
     hcs_$level_set entry (fixed bin (3)),
     pds$stacks (0:7) ptr ext;
dcl (addr, baseptr, bin, ptr, rel) builtin;

	scup = addr (mcptr -> mc.scu(0));
	ring = bin (scup -> scu.trr, 3);
	level = hcs_$level_get ();
	if level ^= ring then call hcs_$level_set (ring);
	if bin (scup -> scu.prr, 3) = 0 then sb = pds$stacks (ring);	/* can only reference pds in ring 0 */
	else sb = ptr (mcptr -> mc.prs (6), 0);
	segno = bin (scup -> scu.ca, 18) - bin (rel (sb -> stack_header.isot_ptr), 18);
	isotpp = ptr (baseptr (bin (bin (scup -> scu.tsr, 15), 18)), scup -> scu.ca);
	statp = ptr (baseptr (segno), rel (isotpp -> based_ptr));
	statlen = bin (sb -> stack_header.lot_ptr -> lot.lp (segno) -> header.static_length);
	on area goto error;
	allocate copy_static in (sb -> stack_header.combined_stat_ptr -> based_area) set (new_statp);
	if level ^= ring then call hcs_$level_set (level);
	new_statp -> copy_static = statp -> copy_static;
	isotpp -> based_ptr = new_statp;
	return ("0"b);


error:	if level ^= ring then call hcs_$level_set (level);
	return ("1"b);
						/*
						   
						   */
%include lot;
/*
   
*/
%include linkdcl;
/*
   
*/
%include stack_header;
/*
   
*/
% include mc;

     end isot_fault_handler_;
