/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* The mode_string_ subroutine is a general way to handle mode strings.
   It was described in MCR 4670, and approved 15 October 1980

   Designed, Coded by James R. Davis
   Modified 12 January 1981 by J. Spencer Love for quoted strings

   modes are separated from each other by commas
   the first nonwhite character in the string is the beginning of the first mode
   the end of the last mode precedes the first unquoted period or is the last nonwhite character

   A mode may be one of these forms:

   MODE             boolean mode (true)
   ^MODE            boolean mode (false)
   MODE=XXX         XXX may be char or decimal digits, XXX may be quoted
   MODEnnn          nnn must be decimal digits
*/

/* format:  style3,ll122,idind30,ifthenstmt */

mode_string_$parse:
     procedure (P_string, P_areap, P_mode_string_info_ptr, P_status);

declare	P_areap			ptr parameter,
	P_status			fixed bin (35) parameter,
	P_excludes		(*) char (*) parameter,
	P_mode_name		char (*) parameter,
	P_mode_value_ptr		ptr parameter,
	P_mode_string_info_ptr	ptr parameter,
	P_mode_string_info_ptr2	ptr parameter,
	P_string			char (*) parameter;

declare	(addr, addrel, char, hbound, index, lbound, length, ltrim, maxlength, null, substr, reverse, rtrim, unspec,
	verify)			builtin;

declare	cleanup			condition;

declare	(counting_modes, dummy)	bit (1) aligned,
	modes2			ptr,
	modex			fixed bin,
	must_cleanup		bit (1) aligned,
	status			fixed bin (35),
	string_len		fixed bin (21),
	string_pos		fixed bin (21);	/* length of P_string used */

declare	1 auto_mode		aligned like mode_value;

declare	based_area		area based (areap),
	areap			ptr;

declare	BREAKS			char (10) static options (constant) initial (".,=^""
	 "),					/* DOT COMMA EQUALS INVERT QUOTE NL VT FF TAB SPACE */
	NUMERIC			char (12) static options (constant) init ("0123456789+-"),
	LEGAL_CHARS		char (89) static options (constant)
				initial (
				"!#$%&'()*+-/0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]_`abcdefghijklmnopqrstuvwxyz{|}~"
				),
	QUOTE			char (1) static options (constant) initial ("""");

declare	(
	error_table_$bad_mode_syntax,
	error_table_$mode_string_truncated,
	error_table_$undefined_mode,
	error_table_$unimplemented_version
	)			fixed bin (35) external;

declare	cv_dec_check_		entry (char (*), fixed bin (35)) returns (fixed bin (35)),
	get_system_free_area_	entry () returns (ptr),
	requote_string_		entry (char (*)) returns (char (*));
%page;
%include mode_string_info;
%page;
/* mode_string_$parse:
   procedure (P_string, P_areap, P_mode_string_info_ptr, P_status); */

	areap = P_areap;
	if areap = null () then areap = get_system_free_area_ ();

	must_cleanup = "1"b;
	mode_string_info_ptr = null ();

	number_of_modes = 0;
	string_len = length (rtrim (P_string));
	string_pos = 0;				/* scan from beginning of string */

	counting_modes = "1"b;
	do while (parse_mode (auto_mode));
	end;					/* count modes -- don't do hard work */
	counting_modes = "0"b;

	on cleanup call parse_cleanup ();

	allocate mode_string_info in (based_area);
	mode_string_info.version = mode_string_info_version_2;

	string_pos = 0;				/* start over from beginning for second scan */
	number_of_modes = 0;			/* mode count used to permit special case "." */

	do modex = 1 to mode_string_info.number;
	     dummy = parse_mode (mode_string_info.modes (modex));
	end;					/* ignore "more left" result, already have mode count */

	P_mode_string_info_ptr = mode_string_info_ptr;
	P_status = 0;

	return;

parse_cleanup:
     procedure ();

	P_mode_string_info_ptr = null ();		/* if we are here, caller gets nothing */
	if mode_string_info_ptr ^= null then free mode_string_info;

	return;

     end parse_cleanup;
%page;
mode_string_$get:
     entry (P_mode_string_info_ptr, P_string, P_status);

	mode_string_info_ptr = P_mode_string_info_ptr;

	if mode_string_info.version ^= mode_string_info_version_2 then call unsupported_version ();

	string_pos = 0;
	do modex = 1 to mode_string_info.number;
	     call cons (mode_string_info.modes (modex));
	end;

(nostringsize):
	substr (P_string, string_pos + 1) = ".";	/* clear out rest of string */
	P_status = 0;

	return;



mode_string_$get_error:
     entry (P_mode_string_info_ptr, P_string, P_status);

	mode_string_info_ptr = P_mode_string_info_ptr;

	if mode_string_info.version ^= mode_string_info_version_2 then call unsupported_version ();

	string_pos = 0;
	do modex = 1 to mode_string_info.number;
	     if mode_string_info.modes (modex).code ^= 0 then call cons (mode_string_info.modes (modex));
	end;

(nostringsize):
	substr (P_string, string_pos + 1) = ".";	/* clear out rest of string */
	P_status = 0;

	return;
%page;
mode_string_$delete:
     entry (P_mode_string_info_ptr, P_excludes, P_string, P_status);

	mode_string_info_ptr = P_mode_string_info_ptr;
	if mode_string_info.version ^= mode_string_info_version_2 then call unsupported_version ();

	string_pos = 0;
	do modex = 1 to mode_string_info.number;
	     if ^excludep (mode_string_info.modes (modex).mode_name) then call cons (mode_string_info.modes (modex));
	end;

(nostringsize):
	substr (P_string, string_pos + 1) = ".";
	P_status = 0;

	return;

excludep:
     procedure (name) returns (bit (1) aligned);

declare	name			char (32) parameter;
declare	idx			fixed bin;

	do idx = lbound (P_excludes, 1) to hbound (P_excludes, 1);
	     if P_excludes (idx) = name then return ("1"b);
	end;

	return ("0"b);

     end excludep;
%page;
/* This entrypoint finds the value of a single mode.  The value is returned in a mode_value structure which
   is allocated by our caller.  If the pointer is null, just the error code is returned indicating whether or
   not the mode named could be found in the mode string.  Otherwise, full info is returned.  The version
   number must be filled in by our caller. */

mode_string_$get_mode:
     entry (P_string, P_mode_name, P_mode_value_ptr, P_status);

	mode_value_ptr = P_mode_value_ptr;

	if mode_value_ptr ^= null ()
	then if mode_value.version ^= mode_value_version_3 then call unsupported_version ();

	counting_modes, must_cleanup = "0"b;
	number_of_modes = 0;
	string_len = length (rtrim (P_string));
	string_pos = 0;

	do while (parse_mode (auto_mode));
	     if auto_mode.mode_name = P_mode_name then go to FOUND_MODE;
	end;

	if number_of_modes > 0
	then if auto_mode.mode_name = P_mode_name then go to FOUND_MODE;

	P_status = error_table_$undefined_mode;

	return;

FOUND_MODE:
	if mode_value_ptr ^= null () then mode_value = auto_mode;

	P_status = 0;

	return;
%page;
mode_string_$combine:
     entry (P_mode_string_info_ptr, P_mode_string_info_ptr2, P_string, P_status);

	mode_string_info_ptr = P_mode_string_info_ptr;
	modes2 = P_mode_string_info_ptr2;

	if mode_string_info_ptr ^= null ()
	then if mode_string_info.version ^= mode_string_info_version_2 then call unsupported_version ();

	if modes2 ^= null ()
	then if modes2 -> mode_string_info.version ^= mode_string_info_version_2 then call unsupported_version ();

	string_pos = 0;
	if mode_string_info_ptr ^= null ()
	then if modes2 ^= null ()
	     then do modex = 1 to mode_string_info.number;
		     if ^present_in_second (mode_string_info.modes (modex).mode_name)
		     then call cons (mode_string_info.modes (modex));
		end;				/* loop thru first */
	     else do modex = 1 to mode_string_info.number;
		     call cons (mode_string_info.modes (modex));
		end;

	if modes2 ^= null ()
	then do modex = 1 to modes2 -> mode_string_info.number;
		call cons (modes2 -> mode_string_info.modes (modex));
	     end;

(nostringsize):
	substr (P_string, string_pos + 1) = ".";
	P_status = 0;

	return;

present_in_second:
     procedure (mn) returns (bit (1) aligned);
declare	mn			char (32) parameter;
declare	mx			fixed bin;

	do mx = 1 to modes2 -> mode_string_info.number;
	     if mn = modes2 -> mode_string_info.modes (mx).mode_name then return ("1"b);
	end;

	return ("0"b);				/* fell out */

     end present_in_second;
%page;
parse_mode:
     procedure (P_mode) returns (bit (1) aligned);

declare	1 P_mode			parameter aligned like mode_value,
	1 mode_name		aligned,
	  2 len			fixed bin (21),
	  2 pos			fixed bin (21),
	1 value			aligned like mode_name,
	break			fixed bin,
	(bool_value, bool_valuep, more_left, two_tokens)
				bit (1) aligned,
	char_value_overlay		char (length (P_mode.char_value)) based (addrel (addr (P_mode.char_value), 1));

	unspec (P_mode) = ""b;			/* Initialize */
	P_mode.version = mode_value_version_3;
	bool_value, bool_valuep, two_tokens = "0"b;
	mode_name.len = 0;

GET_MODE_NAME:
	call get_token (mode_name);
	go to FIRST_TOKEN (break);

FIRST_TOKEN (-1):					/* ILLEGAL CHAR */
	call syntax_error ();

FIRST_TOKEN (0):					/* DOT, legal as first char but not after COMMA */
	if string_pos < string_len then call syntax_error ();
	more_left = "0"b;
	if mode_name.len > 0 then go to HAVE_ATOMIC_MODE;
	if number_of_modes > 0 | bool_valuep then call syntax_error ();
	return ("0"b);

FIRST_TOKEN (1):					/* COMMA */
	if mode_name.len = 0 then call syntax_error ();
	go to HAVE_ATOMIC_MODE;

FIRST_TOKEN (2):					/* EQUALS */
	if mode_name.len = 0 then call syntax_error ();
	number_of_modes = number_of_modes + 1;
	two_tokens = "1"b;
	value.len = 0;
	go to GET_VALUE;

FIRST_TOKEN (3):					/* INVERT */
	if mode_name.len > 0 then call syntax_error ();
	bool_valuep = "1"b;
	bool_value = ^bool_value;
	go to GET_MODE_NAME;

FIRST_TOKEN (4):					/* QUOTE */
	call syntax_error ();

FIRST_TOKEN (5):					/* NEWLINE */
FIRST_TOKEN (6):					/* VERTICAL TAB */
FIRST_TOKEN (7):					/* FORMFEED */
FIRST_TOKEN (8):					/* TAB */
FIRST_TOKEN (9):					/* SPACE */
	go to GET_MODE_NAME;
%page;
GET_VALUE:
	call get_token (value);
	go to SECOND_TOKEN (break);

SECOND_TOKEN (-1):					/* ILLEGAL_CHAR */
	call syntax_error ();

SECOND_TOKEN (0):					/* DOT */
	if string_pos < string_len then call syntax_error ();
	more_left = "0"b;

SECOND_TOKEN (1):					/* COMMA */
	if counting_modes then return (more_left);
	if value.len > 0
	then if verify (substr (P_string, value.pos + 1, value.len), NUMERIC) - 1 < 0 then P_mode.numeric_valuep = "1"b;
	go to HAVE_VALUE;

SECOND_TOKEN (2):					/* EQUALS */
SECOND_TOKEN (3):					/* INVERT */
	call syntax_error ();

SECOND_TOKEN (4):					/* QUOTE */
	if value.len > 0 then call syntax_error ();

	P_mode.char_valuep = "1"b;

	do while ("1"b);
	     value.len = index (substr (P_string, string_pos + 1), QUOTE) - 1;
	     if value.len < 0 then call syntax_error ();	/* Punt if no matching quote */

	     if value.len + length (P_mode.char_value) > maxlength (P_mode.char_value) then call syntax_error ();
	     P_mode.char_value = P_mode.char_value || substr (P_string, string_pos + 1, value.len);
	     string_pos = string_pos + value.len + 1;	/* Gobble up everything to quote and step over it */

	     if string_pos >= string_len then go to AT_END_OF_STRING;
	     if substr (P_string, string_pos + 1, 1) ^= QUOTE
	     then do while ("1"b);			/* Have whole string, now get break character */
		     call get_token (mode_name);	/* get error if token_len > 0 */
		     if break = 0 /* DOT */ & string_pos >= string_len then go to AT_END_OF_STRING;
		     if break = 1 /* COMMA */ then go to HAVE_MODE;
		     if break < 5 /* not WHITESPACE */ then call syntax_error ();
		end;

	     if length (P_mode.char_value) >= maxlength (P_mode.char_value) then call syntax_error ();
	     P_mode.char_value = P_mode.char_value || QUOTE;
	     string_pos = string_pos + 1;		/* Double quote.  Append a quote and look again */
	end;

AT_END_OF_STRING:
	more_left = "0"b;
	go to HAVE_MODE;

SECOND_TOKEN (5):					/* NEWLINE */
SECOND_TOKEN (6):					/* VERTICAL TAB */
SECOND_TOKEN (7):					/* FORMFEED */
SECOND_TOKEN (8):					/* TAB */
SECOND_TOKEN (9):					/* SPACE */
	go to GET_VALUE;
%page;
HAVE_ATOMIC_MODE:
	number_of_modes = number_of_modes + 1;

	if counting_modes then return (more_left);

	value.len = verify (reverse (substr (P_string, mode_name.pos + 1, mode_name.len)), NUMERIC) - 1;
	if value.len < 0 then call syntax_error ();	/* Forbid numeric mode names */
	else if value.len = 0
	then do;					/* Boolean is the default */
		P_mode.boolean_valuep = "1"b;
		P_mode.boolean_value = ^bool_value;	/* started out false */
		go to HAVE_MODE;
	     end;

	value.pos = mode_name.pos + mode_name.len - value.len;
	mode_name.len = mode_name.len - value.len;
	P_mode.numeric_valuep = "1"b;

HAVE_VALUE:
	if bool_valuep then call syntax_error ();	/* have ^MODEnnn or ^MODE=XXX */

	if value.len > maxlength (P_mode.char_value) then call syntax_error ();
	if value.len > 0 then P_mode.char_value = substr (P_string, value.pos + 1, value.len);

	if P_mode.numeric_valuep
	then begin;				/* All numeric, lets see if its a number */
		P_mode.numeric_value = cv_dec_check_ (char_value_overlay, status);
		if status ^= 0			/* we have MODE2+2 or numeric overflow */
		then if two_tokens
		     then do;			/* Permit foo=+ to be a character value */
			     P_mode.char_valuep = "1"b;
			     P_mode.numeric_valuep = "0"b;
			end;
		     else call syntax_error ();	/* Make foo+ an error */
	     end;
	else P_mode.char_valuep = "1"b;

HAVE_MODE:
	if mode_name.len > maxlength (P_mode.mode_name) then call syntax_error ();
	P_mode.mode_name = substr (P_string, mode_name.pos + 1, mode_name.len);

	return (more_left);
%page;
get_token:
     procedure (P_token);

declare	1 P_token			aligned parameter like mode_name;
declare	1 token			aligned like mode_name;

	token.pos = string_pos;

	token.len = verify (substr (P_string, string_pos + 1, string_len - string_pos), LEGAL_CHARS) - 1;
	if token.len < 0
	then do;
		token.len = string_len - string_pos;
		string_pos = string_len;
		break = 0;			/* DOT - end of mode string */
		more_left = "0"b;
	     end;
	else do;
		break = index (BREAKS, substr (P_string, string_pos + token.len + 1, 1)) - 1;
		string_pos = string_pos + token.len + 1;
		more_left = "1"b;
	     end;

	if token.len = 0 then return;			/* Just return break character */
	if P_token.len > 0 then call syntax_error ();	/* Only one token to a token */

	P_token = token;

	return;

     end get_token;

     end parse_mode;
%page;
cons:
     procedure (P_mode);

declare	1 P_mode			like mode_value aligned parameter,
	char_value_overlay		char (length (P_mode.char_value)) based (addrel (addr (P_mode.char_value), 1)),
	modestr			char (101) varying; /* comma + invert + 32 + equals + 66 */

	if string_pos = 0
	then modestr = "";
	else modestr = ",";

	if P_mode.boolean_valuep & ^P_mode.boolean_value then modestr = modestr || "^";

	modestr = modestr || rtrim (P_mode.mode_name);

	if P_mode.numeric_valuep
	then do;
		modestr = modestr || "=";
		modestr = modestr || rtrim (ltrim (char (P_mode.numeric_value)));
	     end;
	else if P_mode.char_valuep
	then do;
		modestr = modestr || "=";
		if verify (P_mode.char_value, LEGAL_CHARS) - 1 ^< 0 | verify (P_mode.char_value, NUMERIC) - 1 < 0
		then modestr = modestr || requote_string_ (char_value_overlay);
		else modestr = modestr || P_mode.char_value;
	     end;

	if string_pos + length (modestr) > maxlength (P_string)
	then do;
(nostringsize):
		substr (P_string, string_pos + 1) = ".";/* clear out rest of string */
		P_status = error_table_$mode_string_truncated;
		go to EGRESS;
	     end;

	substr (P_string, string_pos + 1, length (modestr)) = modestr;
	string_pos = string_pos + length (modestr);

	return;

     end cons;
%page;
/* The following internal procedures are to facilitate debugging:
   If an error occurs a breakpoint set in one of them will permit the site of
   the error to be derived from a stack trace.  This code is left in the
   production version since it isn't much less efficient than a GOTO and
   the error cases needn't be superfast anyway.  */

syntax_error:
     procedure ();

	if must_cleanup then call parse_cleanup ();
	P_status = error_table_$bad_mode_syntax;

	go to EGRESS;

     end syntax_error;


unsupported_version:
     procedure ();

	P_status = error_table_$unimplemented_version;

	go to EGRESS;

     end unsupported_version;


EGRESS:
	return;

     end mode_string_$parse;
