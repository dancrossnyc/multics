/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-07-18,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to trap damaged_object_msf_ condition and return a code to
     caller.
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */
link_trap_caller_:
     proc (dummy_ptr, mcptr, header_ptr, def_ptr, type_ptr, link_ptr, ecode_ptr);

/* This procedure is "called" from the linker so that it can call trap procedures
   in the original faulting ring.  It is always called with 7 arguments, but
   only mcptr and header_ptr are relevant for traps-at-first-reference.
   Only mcptr is really necessary, but the others are
   needed at some point and the linker already had their values.
*/
/* coded by M. B. Weaver 5/17/73 */
/* modified 1/2/83 by M. Weaver to handle traps for VLA common */
/* modified 2/5/85 by M. Weaver to reset aborted first reference traps */

declare	dummy_ptr		ptr;			/* dummy pointer so that mcptr is second arg so cleanup handler will work */
declare	(mcptr, header_ptr, def_ptr, type_ptr, link_ptr, ecode_ptr)
			ptr;
declare	(trap_ptr, call_ptr_ptr, arg_ptr_ptr, fr_ptr, nsp)
			ptr;
declare	call_ptr		ptr based;

declare	trap_proc		entry variable options (variable);
declare	cu_$make_entry_value
			entry (pointer, entry);
declare	i		fixed bin;
declare	indirect		bit (6) aligned static init ("010000"b) options (constant);
declare	ecode		fixed bin (35) based;
declare	ec		fixed bin (35);
declare	(
	error_table_$bad_first_ref_trap,
	error_table_$bad_trap_before_link,
	error_table_$inconsistent_object_msf,
	error_table_$no_vla_support
	)		ext fixed bin (35);


declare	(addr, addrel, baseptr, null)
			builtin;

declare	cleanup		condition;
declare	object_msf_damaged_ condition;

declare	cu_$stack_frame_ptr entry () returns (ptr);
declare	nonlocal_goto_$same_ring
			entry (ptr, ptr);
declare	signal_		ext entry options (variable);
declare	hcs_$make_entry	entry (ptr, char (*), char (*), entry, fixed bin (35));
declare	term_$nomakeunknown entry (ptr, fixed bin (35));

declare	1 fr_traps	based aligned,		/* describes first reference trap array */
	  2 dcl_vers	fixed bin,
	  2 n_traps	fixed bin,
	  2 trap_ptrs	(1000) aligned,
	    3 call_ptr	bit (18) unaligned,
	    3 arg_ptr	bit (18) unaligned;

declare	1 instr		(0:1) based aligned,
	  2 address	bit (18) unal,
	  2 op_code	bit (12) unal,
	  2 mod		bit (6) unal;

/*  */
	if def_ptr = null
	then do;					/* first reference trap case */
						/* here header_ptr points to the base of the linkage section being
						   linked to */

	     fr_ptr =
		addrel (header_ptr, header_ptr -> header.original_linkage_ptr -> virgin_linkage_header.first_ref_relp)
		;				/* get ptr to trap structure */

	     header_ptr -> its.pad4 = "0"b;		/* don't want to go through this again */

	     if fr_ptr -> fr_traps.dcl_vers ^= 1
	     then do;				/* not something we know about */
		ec = error_table_$bad_first_ref_trap;
sig_err:
		if mcptr ^= null
		then do;				/* must abort; signal linkage_error */
		     mcptr -> mc.errcode = ec;
		     call signal_ ("linkage_error", mcptr);
		end;
		else ecode_ptr -> ecode = ec;		/* linker was called; can return code */
	     end;

	     else do;
		on cleanup call term_$nomakeunknown (baseptr (header_ptr -> header.stats.segment_number), ec);
						/* reset first ref trap if aborted */
		on object_msf_damaged_ begin;
		  ec = error_table_$inconsistent_object_msf;
		  goto sig_err;
		end;
		
		do i = 1 to fr_ptr -> fr_traps.n_traps; /* call all trap procedures */
		     call_ptr_ptr = addrel (header_ptr, fr_ptr -> fr_traps.call_ptr (i));
		     if fr_ptr -> fr_traps.arg_ptr (i) ^= ""b
		     then arg_ptr_ptr = addrel (header_ptr, fr_ptr -> fr_traps.arg_ptr (i));
		     else arg_ptr_ptr = null;
		     call cu_$make_entry_value (call_ptr_ptr -> call_ptr, trap_proc);
		     call trap_proc (arg_ptr_ptr);
		end;
		revert object_msf_damaged_;
	     end;

	end;

	else if header_ptr = null			/* VLA common trap */
	then do;
	     call hcs_$make_entry (null, "fortran_storage_", "resolve_VLA_COMMON_link", trap_proc, ec);
	     if ec ^= 0
	     then do;
		ec = error_table_$no_vla_support;
		go to sig_err;
	     end;
	     call trap_proc (link_ptr, def_ptr, type_ptr, ec);
	     if ec ^= 0
	     then go to sig_err;
	     else if mcptr ^= null			/* following code should be the same */
	     then do;				/* as adjust_mc proc in link_snap */

/* This code modifies the hardware machine conditions so that they may be
   restarted without retaking the linkage fault. */

		scup = addr (mcptr -> mc.scu (0));	/* get ptr to SCU data */
		addr (scu.even_inst) -> instr (0).address = scu.ca;
		addr (scu.even_inst) -> instr (0).mod = indirect;
	     end;
	end;

	else do;					/* trap before link case */
	     trap_ptr = addrel (def_ptr, type_ptr -> type_pair.trap_ptr);
	     call_ptr_ptr = addrel (header_ptr, trap_ptr -> trap_word.call_ptr);
	     if trap_ptr -> trap_word.arg_ptr ^= ""b
	     then arg_ptr_ptr = addrel (header_ptr, trap_ptr -> trap_word.arg_ptr);
	     else arg_ptr_ptr = null ();
	     call cu_$make_entry_value (call_ptr_ptr -> call_ptr, trap_proc);
	     call trap_proc (arg_ptr_ptr, mcptr, link_ptr);
	     if link_ptr -> link.ft2 ^= "100011"b
	     then do;				/* link was not snapped; will loop if try to restart */
		ec = error_table_$bad_trap_before_link;
		go to sig_err;
	     end;
	end;

/* now return to proc that invoked linker; if there was a fault,
   restore mc (refetch bit has already been turned on); otherwise just "return" */

	if mcptr = null
	then do;					/* return to caller of linker */
	     sp = cu_$stack_frame_ptr ();		/* get ptr to current stack frame */
	     nsp = sp -> stack_frame.prev_sp -> stack_frame.prev_sp;
	     call nonlocal_goto_$same_ring (nsp, nsp -> stack_frame.return_ptr);
	end;

	else return;				/* and let signaller restore mc */
						/*  */
%include mc;
/*  */
%include linkdcl;


%include its;

/*  */
%include stack_frame;


     end link_trap_caller_;
