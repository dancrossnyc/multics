/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


lot_fault_handler_:
     proc (mcptr, condname, infoptr, wcptr, continue_sw);

/* This procedure is invoked when a reference to the LOT causes a lot_fault.  This usually happens in a run
   unit when a segment has had its LOT entry reset to a lot_fault but there are already snapped links to it,
   so that it gets executed without the intervention of the linker.
*/

/* coded March 1977 by Melanie Weaver */
/* modified October 1979 by Melanie Weaver  to call link_trap_caller_ */



	dcl     (mcptr, infoptr, wcptr)
				 ptr;
	dcl     condname		 char (*);
	dcl     continue_sw		 bit (1) aligned;

	dcl     (ring, level)	 fixed bin;

	dcl     segno		 fixed bin (18);
	dcl     header_ptr		 ptr;
	dcl     segptr		 ptr;
	dcl     code		 fixed bin (35);
	dcl     (addr, baseptr, bin, null, ptr, rel)
				 builtin;

	dcl     get_ring_		 entry () returns (fixed bin);
	dcl     hcs_$combine_linkage	 entry (ptr, fixed bin, fixed bin (35));
	dcl     hcs_$level_get	 entry () returns (fixed bin);
	dcl     hcs_$level_set	 entry (fixed bin);
	dcl     link_trap_caller_	 entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr);
	dcl     pds$stacks		 (0:7) ptr ext;


	scup = addr (mcptr -> mc.scu (0));
	ring = bin (scup -> scu.trr, 3);
	if bin (scup -> scu.prr, 3) = 0
	then do;
		if get_ring_ () = 0
		then sb = pds$stacks (ring);		/* can only reference pds in ring 0 */
		else do;				/* shouldn't happen--would be crawlout from ring 0 */
			continue_sw = "1"b;
			return;
		     end;
	     end;
	else sb = ptr (mcptr -> mc.prs (6), 0);

	level = hcs_$level_get ();
	if level > ring
	then call hcs_$level_set (ring);

	segno = bin (scup -> scu.ca, 18) - bin (rel (sb -> stack_header.lot_ptr), 18);
	segptr = baseptr (segno);

	call hcs_$combine_linkage (segptr, ring, code);

	if level ^= ring
	then call hcs_$level_set (level);

	if code ^= 0
	then continue_sw = "1"b;

	else if (level = ring) & (ring ^= 0)
	then do;

/* If there is a trap at first reference and we are not in ring 0,
   call link_trap_caller_ to handle it.  If it becomes necessary to handle
   this in ring 0, hcs_$combine_linkage will have to be changed to 
   call trap_caller_caller_ when there is a trap at first reference. */

		header_ptr = sb -> stack_header.lot_ptr -> lot.lp (segno);
						/* get ptr to beginning of linkage section */
		if header_ptr -> virgin_linkage_header.first_ref_relp ^= "0"b
		then call link_trap_caller_ (null, mcptr, header_ptr, null, null, null, null);
	     end;

	return;

/*  */
%include mc;

%include stack_header;


%include lot;

%include linkdcl;


     end;
