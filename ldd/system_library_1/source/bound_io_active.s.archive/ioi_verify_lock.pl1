/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */

ioi_verify_lock:
     proc () returns (bit (1) aligned);

/* Program to unlock any locks a process has when it crawls out. */
/* Written 1 August 1983 by Chris Jones. */
/* Modified 1985-03-28, EJ Sharpe: log unlocks, return bit(1) */


/****^  HISTORY COMMENTS:
  1) change(85-10-01,Farley), approve(86-07-18,MCR7439),
     audit(86-08-18,Fawcett), install(86-10-20,MR12.0-1189):
     Changed to execute in the BCE environment.
                                                   END HISTORY COMMENTS */


dcl	dtx		   fixed bin;
dcl	gtx		   fixed bin;

dcl	unlocked_something	   bit (1) aligned;

dcl	addr		   builtin;

dcl	lock$unlock_fast	   entry (ptr);
dcl	syserr		   entry () options (variable);

dcl	pds$process_id	   external bit (36) aligned;
dcl	pds$process_group_id   external char (32);

dcl	sys_info$service_system
			   bit (1) aligned external static;

dcl	stacq		   builtin;


	unlocked_something = "0"b;
	if ^sys_info$service_system then
	     return (unlocked_something);		/* not up far enough to worry about it */
	idp = addr (ioi_data$);
	if unlock_needed (ioi_data.reconfig_lock) then
	     call syserr (SYSERR_LOG_OR_PRINT, "ioi_verify_lock: Force unlocked reconfigure lock for ^a.",
		pds$process_group_id);

	do dtx = 1 to ioi_data.ndt;
	     dtep = addr (ioi_data.dt (dtx));
	     if unlock_needed (dte.lock) then
		call syserr (SYSERR_LOG_OR_PRINT, "ioi_verify_lock: Force unlocked device entry lock #^d for ^a.",
		     dtx, pds$process_group_id);
	end;

	do gtx = 1 to ioi_data.ngt;
	     gtep = addr (ioi_data.gt (gtx));
	     if gte.lock = pds$process_id then do;
		if stacq (gte.lock, ""b, pds$process_id) then
		     ;
		call syserr (SYSERR_LOG_OR_PRINT, "ioi_verify_lock: Force unlocked group entry lock #^d for ^a.", gtx,
		     pds$process_group_id);
		unlocked_something = "1"b;
	     end;
	end;

	return (unlocked_something);

/* Procedure which does the actual unlocking.  It assumes all locks it is called with are fast locks,
   and unlocks the lock if it is held by this process. */

unlock_needed:
     proc (lock_in_question) returns (bit (1) aligned);

dcl	1 lock_in_question	   like lock aligned parameter;

	lock_ptr = addr (lock_in_question);
	if lock.pid = pds$process_id then do;
	     call lock$unlock_fast (lock_ptr);
	     unlocked_something = "1"b;
	     return ("1"b);
	end;
	else return ("0"b);

     end unlock_needed;

%include ioi_data;

%include syserr_constants;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   ioi_verify_lock: Force unlocked reconfigure lock for USERID.

   S:	$info

   T:	$run

   M:	$err
   The process encountered a condition in ring-0 which forced a
   crawlout.  IOI unlocks all locks for the process.

   A:	$notify


   Message:
   ioi_verify_lock: Force unlocked device entry lock #N for USERID.

   S:	$info

   T:	$run

   M:	$err
   The process encountered a condition in ring-0 which forced a
   crawlout.  IOI unlocks all locks for the process.

   A:	$notify


   Message:
   ioi_verify_lock: Force unlocked group entry lock for USERID.

   S:	$info

   T:	$run

   M:	$err
   The process encountered a condition in ring-0 which forced a
   crawlout.  IOI unlocks all locks for the process.

   A:	$notify

   END MESSAGE DOCUMENTATION */

     end ioi_verify_lock;
