/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
/* Written July 1983 by Chris Jones (from ioi_get_special_status). */

/* Program to return either the special status or the detailed status from a given device.  A flag is set
   indicating whether there was any such status to return. */
/* Modified March 1985 by Keith Loepere to properly copy arguments. */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
ioi_get_status:
     proc;

dcl	p_dtx		   fixed bin parameter;	/* (I) device table index */
dcl	p_valid		   bit (1) aligned parameter; /* (O) returned status is valid */
dcl	p_special_status	   bit (36) aligned parameter;/* (O) special status */
dcl	p_detailed_status	   bit (216) parameter;	/* (O) detailed status */
dcl	p_code		   fixed bin (35) parameter;	/* (O) status code */

dcl	code		   fixed bin (35);
dcl	detailed_status	   bit (216);
dcl	dtx		   fixed bin;
dcl	special_status	   bit (36) aligned;
dcl	valid		   bit (1) aligned;

dcl	ioi_device$get_dtep	   entry (fixed bin, ptr, fixed bin (35));
dcl	ioi_device$unlock	   entry (ptr);

dcl	unspec		   builtin;

special_status:
     entry (p_dtx, p_valid, p_special_status, p_code);

	call setup;
	if dte.special_interrupt then do;		/* If special interrupt has occurred ... */
	     dte.special_interrupt = "0"b;		/* Clear the flag in table entry. */
	     valid = "1"b;				/* Tell caller special occurred. */
	     special_status = dte.special_status;	/* Give him back the special status. */
	end;

	else do;					/* No special occurred. */
	     valid = "0"b;
	     special_status = "0"b;
	end;
	call ioi_device$unlock (dtep);

	p_valid = valid;
	p_special_status = special_status;
	return;

/* return detailed status */

detailed_status:
     entry (p_dtx, p_valid, p_detailed_status, p_code);

	call setup;
	if dte.detailed_status_valid then do;
	     detailed_status = unspec (dte.detailed_status);
	     valid = "1"b;
	end;
	else do;
	     detailed_status = "0"b;
	     valid = "0"b;
	end;
	call ioi_device$unlock (dtep);

	p_valid = valid;
	p_detailed_status = detailed_status;
	return;

setup:
     proc;

	p_code, code = 0;
	dtx = p_dtx;
	call ioi_device$get_dtep (dtx, dtep, code);
	if code ^= 0 then
	     goto QUIT;

     end setup;

QUIT:
	p_valid = "0"b;
	p_code = code;
	return;

%include ioi_data;

     end ioi_get_status;
