/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */

ioi_workspace:
     proc;

/* ioi_workspace--creation, deletion, and ring bracket setting entries for the IOI workspace */
/* Written March 1983 by Chris Jones (based on ioi_buffer) */


/****^  HISTORY COMMENTS:
  1) change(85-10-01,Farley), approve(86-07-18,MCR7439),
     audit(86-08-18,Fawcett), install(86-10-20,MR12.0-1189):
     Changed to execute in the BCE environment.
  2) change(86-11-17,Farley), approve(86-11-20,MECR0002),
     audit(86-11-19,Fawcett), install(86-11-20,MR12.0-1222):
     Added check to unwire any active workspace pages before releasing the
     workspace in the set_max_size entry.
  3) change(86-12-19,Farley), approve(86-12-19,MCR7587),
     audit(86-12-19,Fawcett), install(87-01-05,MR12.0-1253):
     Formal installation to close out above MECR0002.
  4) change(87-04-27,Farley), approve(87-07-06,MCR7717),
     audit(87-07-13,Lippard), install(87-07-17,MR12.1-1043):
     Changed code to use bce_early_ioi_workspace when the bootload_temp_N
     segments are not yet available.
                                                   END HISTORY COMMENTS */


dcl	p_code		   fixed bin (35);		/* error code (O) */
dcl	p_dtep		   ptr;			/* pointer to dte (I) */

dcl	code		   fixed bin (35);		/* local error code */
dcl	dname		   char (168);		/* workspace segment directory name */
dcl	ename		   char (32);		/* workspace segment name */
dcl	rba		   (3) fixed bin (3);	/* ring bracket array */
dcl	workspace_segno	   fixed bin (17);		/* seg# for finding astep */
dcl	validation_level	   fixed bin (3);		/* current validation level */

dcl	bce_early_ioi_workspace$
			   bit (36) aligned external static;
dcl	dseg$		   (0:1023) fixed bin (71) external static;
dcl	pds$process_dir_name   char (32) ext;
dcl	sys_info$service_system
			   bit (1) aligned external static;

dcl	append$branch	   entry (char (*), char (*), fixed bin (5), fixed bin (35));
dcl	delentry$dseg	   entry (ptr, fixed bin (35));
dcl	fs_get$path_name	   entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	get_ptrs_$given_astep  entry (ptr) returns (fixed bin (71));
dcl	get_ptrs_$given_segno  entry (fixed bin (17)) returns (ptr);
dcl	get_temp_segment_	   entry (char (*), ptr, fixed bin (35));
dcl	grab_aste$grab_aste_io entry (ptr, fixed bin (19), fixed bin (35)) returns (ptr);
dcl	grab_aste$release_io   entry (ptr);
dcl	initiate		   entry (char (*), char (*), char (*), fixed bin (1), fixed bin (1), ptr, fixed bin (35));
dcl	ioi_wire$unwire	   entry (ptr);
dcl	level$get		   entry returns (fixed bin (3));
dcl	level$set		   entry (fixed bin (3));
dcl	release_temp_segment_  entry (char (*), ptr, fixed bin (35));
dcl	ringbr_$set	   entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
dcl	sdw_util_$get_valid	   entry (ptr) returns (bit (1) aligned);
dcl	set$max_length_ptr	   entry (ptr, fixed bin (19), fixed bin (35));
dcl	slt_manager$get_seg_ptr
			   entry (char (32) aligned) returns (ptr);
dcl	unique_chars_	   entry (bit (*)) returns (char (15));

dcl	(addr, baseno, fixed, null)
			   builtin;

	return;

create:
     entry (p_dtep, p_code);

	dtep = p_dtep;
	p_code = 0;

	if ^sys_info$service_system then do;		/* at BCE */
	     if ^(sdw_util_$get_valid (addr (dseg$ (fixed (baseno (slt_manager$get_seg_ptr ("bootload_temp_1")), 18)))))
		then
		dte.workspace_ptr = addr (bce_early_ioi_workspace$);
						/* temp segments not yet available */
	     else do;
		call get_temp_segment_ ("ioi_workspace", dte.workspace_ptr, code);
						/* bootload_temp_XX segment */
		if code ^= 0 then do;		/* unable to continue */
		     p_code = code;
		     return;
		end;
	     end;

	     workspace_segno = fixed (baseno (dte.workspace_ptr), 17);
	     dte.workspace_astep = get_ptrs_$given_segno (workspace_segno);
	     dte.workspace_sdw = get_ptrs_$given_astep (dte.workspace_astep);
	     return;
	end;

	dname = pds$process_dir_name;			/* the workspace lives in our process directory */
	ename = unique_chars_ ("0"b) || ".ioi";		/* create unique workspace segment name. */

	validation_level = level$get ();		/* save current validation level */
	call level$set (0);				/* set hardcore ring validation level */

	call append$branch (dname, ename, RW_ACCESS_BIN, code);
	call quit_if_error;
	call initiate (dname, ename, "", 0b, 1b, dte.workspace_ptr, code);
	call quit_if_error;
	call set_rb_proc;				/* set the ring brackets */
	call set$max_length_ptr (dte.workspace_ptr, dte.max_bound, code);
	call grab;
	call quit_if_error;

	call level$set (validation_level);		/* restore original validation level */
	return;

destroy:
     entry (p_dtep, p_code);

	dtep = p_dtep;
	p_code = 0;

	if ^sys_info$service_system then do;		/* at BCE */
	     if sdw_util_$get_valid (addr (dseg$ (fixed (baseno (slt_manager$get_seg_ptr ("bootload_temp_1")), 18))))
	     then do;
		if dte.workspace_wired then		/* if segment is active */
		     call ioi_wire$unwire (dtep);	/* unwire the pages NOW */
		call release_temp_segment_ ("ioi_workspace", dte.workspace_ptr, code);
						/* bootload_temp_XX segment */
		if code ^= 0 then do;
		     p_code = code;
		     return;
		end;
	     end;

	     dte.workspace_ptr = null ();
	     dte.workspace_astep = null ();
	     dte.workspace_sdw = 0;
	     return;
	end;

	if dte.workspace_wired then			/* if segment is active */
	     call ioi_wire$unwire (dtep);		/* unwire the pages NOW */

	if dte.workspace_ptr ^= null () then do;	/* if workspace exists... */
	     validation_level = level$get ();		/* save current validation level */
	     call level$set (0);			/* set hardcore ring validation level */

	     call release;
	     call delentry$dseg (dte.workspace_ptr, code);
	     call quit_if_error;
	     dte.workspace_ptr = null ();

	     call level$set (validation_level);		/* restore original validation level */
	end;

	return;

release_aste:
     entry (p_dtep);

	dtep = p_dtep;
	if ^sys_info$service_system then
	     dte.workspace_astep = null ();
	else call release;
	return;

set_max_size:
     entry (p_dtep, p_code);

	dtep = p_dtep;
	p_code = 0;

	if ^sys_info$service_system then
	     return;				/* No need at BCE */

	if dte.workspace_ptr ^= null () then do;	/* if workspace exists */
	     if dte.workspace_wired then
		call ioi_wire$unwire (dtep);		/* unwire active pages */
	     validation_level = level$get ();
	     call level$set (0);
	     call release;
	     call set$max_length_ptr (dte.workspace_ptr, dte.max_bound, code);
	     call quit_if_error;
	     call grab;
	     call level$set (validation_level);
	end;
	return;

set_rb:
     entry (p_dtep, p_code);

	dtep = p_dtep;
	p_code = 0;

	if ^sys_info$service_system then
	     return;				/* No need at BCE */

	if dte.workspace_ptr ^= null () then do;	/* if workspace exists */
	     validation_level = level$get ();
	     call level$set (0);
	     call fs_get$path_name (dte.workspace_ptr, dname, (0), ename, code);
	     call quit_if_error;
	     call set_rb_proc;
	     call level$set (validation_level);
	end;
	return;

set_rb_proc:
     proc;

	rba (*) = dte.ring;				/* set up ring bracket array */
	call ringbr_$set (dname, ename, rba, code);	/* change the ring brackets of the workspace segment */
	call quit_if_error;

     end set_rb_proc;

/* routine to grab the aste and get the sdw */

grab:
     proc;

	if dte.max_bound ^= 0 then do;
	     dte.workspace_astep = grab_aste$grab_aste_io (dte.workspace_ptr, dte.max_bound, code);
	     call quit_if_error;
	     dte.workspace_sdw = get_ptrs_$given_astep (dte.workspace_astep);
	end;

     end grab;

/* routine to release the aste */

release:
     proc;

	if dte.workspace_astep ^= null () then do;
	     call grab_aste$release_io (dte.workspace_astep);
	     dte.workspace_astep = null ();
	end;

     end release;

quit_if_error:
     proc;

	if code ^= 0 then
	     call quit (code);

     end quit_if_error;

quit:
     proc (code);

dcl	code		   fixed bin (35) parameter;

	call level$set (validation_level);
	p_code = code;
	goto QUIT;

     end quit;

QUIT:
	return;

%include ioi_data;
%page;
%include access_mode_values;

     end ioi_workspace;
