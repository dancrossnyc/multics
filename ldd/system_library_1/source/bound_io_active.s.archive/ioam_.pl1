/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1976 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: off */

ioam_: proc;

/* The I/O assignment manager - maintains a table of devices
   owned by various subsystems so that the subsystem can be
   notified if the process dies without properly detaching
   its devices.

   Rewritten 4/14/76 by Mike Grady.
*/


/****^  HISTORY COMMENTS:
  1) change(86-09-17,Farley), approve(86-07-18,MCR7439),
     audit(86-09-24,Fawcett), install(86-10-20,MR12.0-1189):
     Changed to execute in the BCE environment.
                                                   END HISTORY COMMENTS */


dcl  devx fixed bin,
     handler entry,
     code fixed bin (35),
     pid bit (36) aligned;

dcl  ioat_uidc char (4) int static init ("ioat") options (constant),
     ioat_uid bit (36) based (addr (ioat_uidc));

dcl  pds$processid bit (36) ext,
    (error_table_$bad_index,
     error_table_$dev_nt_assnd,
     error_table_$already_assigned,
     error_table_$ioat_err) fixed bin (35) ext;

dcl  sys_info$service_system
     bit (1) aligned external static;

dcl  ignore fixed bin (35),
     isize fixed bin,
     i fixed bin;

dcl (addr, baseno, divide, fixed, hbound, rel, size) builtin;

dcl  syserr_sw bit (1) int static init ("0"b);

dcl  syserr entry options (variable),
     lock$wait entry (ptr, bit (36), fixed bin (35)),
     lock$unlock entry (ptr, bit (36));

dcl (ioatp, ioatep) ptr,
    (dseg$, ioat$) fixed bin ext;

dcl 1 ioat aligned based (ioatp),			/* The IO assigment table */
      2 lock bit (36),				/* lock while doing updates */
      2 last_entry fixed bin,				/* highest entry used in table */
      2 max_entries fixed bin,			/* highest entry we can use in table */
      2 entries (2048) like ioate;			/* the ioat entries */

dcl 1 ioate aligned based (ioatep),			/* declaration of ioat entries */
      2 pid bit (36),				/* process id of this devices owner */
      2 devx fixed bin,				/* device index assigned by dstint */
      2 handler entry (fixed bin, fixed bin (35));	/* routine to call when process dies */

%include sdw;

assign: entry (devx, handler, code);			/* entry to assign a device to a process */

	call setup;				/* init some stuff and set ptrs */

	call find_device (code);			/* attempt to see if already assigned */
	if code = 0 then				/* it is already assigned to us */
	     ioate.handler = handler;			/* just update detach handler */
	else if code = error_table_$dev_nt_assnd then do; /* if not assigned, then assign it */
	     call find_free;			/* assign new block in ioat */

	     ioate.pid = pds$processid;		/* use this processid */
	     ioate.devx = devx;			/* fill in devx and */
	     ioate.handler = handler;			/* the unassign_handler */
	     code = 0;				/* no error */
	end;

	if sys_info$service_system then
	     call lock$unlock (ioatp, ioat_uid);	/* unlock IOAT */
	return;



unassign: entry (devx, code);				/* entry to unassign a device from this process */

	call setup;
	call find_device (code);			/* it had better be our device */
	if code = 0 then				/* it was ours, unassign */
	     ioate.pid = "0"b;			/* clear processid to indicate entry free */

	if sys_info$service_system then
	     call lock$unlock (ioatp, ioat_uid);
	return;

preempt: entry (pid, devx, code);			/* entry to force the unassign of a device */

	call setup;				/* setup stuff */
	call find_device (code);			/* locate the device, it had better be assigned */
	if code ^= error_table_$dev_nt_assnd then do;	/* if it was assigned at all, dump it */
	     call ioate.handler (ioate.devx, code);	/* call the detach handler */

	     ioate.pid = "0"b;			/* mark entry free */
	end;

	if sys_info$service_system then
	     call lock$unlock (ioatp, ioat_uid);
	return;



process_release: entry (pid);				/* entry to release all devices from a process */

	ioatp = addr (ioat$);			/* make ptr, can't call setup */
	if sys_info$service_system then do;
	     call lock$wait (ioatp, ioat_uid, ignore);	/* lock the IOAT lock */
	     if ignore ^= 0 then return;		/* some locking error has occured */
	end;

	do i = 1 to ioat.last_entry;			/* search the table for this processid */
	     ioatep = addr (ioat.entries (i));		/* get entry ptr */

	     if (ioate.pid ^= "0"b) & (ioate.pid = pid) then do; /* if owned and owned by this guy then */
		call ioate.handler (ioate.devx, ignore); /* call unassign handler, ignore code */
		ioate.pid = "0"b;			/* free the slot */
	     end;
	end;

	if sys_info$service_system then
	     call lock$unlock (ioatp, ioat_uid);
	return;

setup: proc;					/* proc to setup ptrs and validate devx */

	if (devx < 0) | (devx > hbound (ioat.entries, 1)) then do;	/* validate the devx */
	     code = error_table_$bad_index;
	     goto RETURN;
	end;

	code = 0;					/* initialize the code */
	ioatp = addr (ioat$);			/* get ptr  to the IOAT */

	if ioat.max_entries = 0 then do;		/* init the max size of the IOAT */
	     sdwp = addr (dseg$);
	     sdwp = addr (sdwa (fixed (baseno (ioatp), 17))); /* get ptr to sdw */
	     isize = fixed (sdw.bound, 17) * 16;	/* get size of seg */

	     isize = isize - fixed (rel (addr (ioat.entries)), 17); /* minus the header */
	     ioat.max_entries = divide (isize, size (ioate), 17, 0); /* divided by size of an entry */
	end;

	if sys_info$service_system then do;
	     call lock$wait (ioatp, ioat_uid, code);	/* lock the IOAT */
	     if code ^= 0 then goto RETURN;		/* some locking error */
	end;
	return;

   end;


RETURN:	return;					/* non-local return */


find_device: proc (acode);				/* proc to find the device in the IOAT */

dcl acode fixed bin (35);

	acode = 0;				/* init the return code */
	do i = 1 to ioat.last_entry;			/* loop over whole IOAT */
	     ioatep = addr (ioat.entries (i));		/* get ptr to entry */

	     if ioate.devx = devx then		/* if we found devx then */
		if ioate.pid = pds$processid then return; /* and it is this process, we got it */
		else if ioate.pid = "0"b then do;	/* else if not assigned, say so */
		     acode = error_table_$dev_nt_assnd;
		     return;
		end;
		else do;				/* else it is assigned, but not to us */
		     acode = error_table_$already_assigned;
		     return;
		end;
	end;

	acode = error_table_$dev_nt_assnd;		/* devx not in table at all */
	return;

   end;



find_free: proc;

	do i = 1 to ioat.last_entry;			/* search the IOAT for a free slot */
	     ioatep = addr (ioat.entries (i));		/* get ptr to this slot */
	     if ioate.pid = "0"b then return;		/* found a free slot */
	end;

	if ioat.last_entry < ioat.max_entries then do;	/* if still room in IOAT at end, take one */
	     ioat.last_entry = ioat.last_entry + 1;	/* bump counter */
	     ioatep = addr (ioat.entries (ioat.last_entry)); /* set ptr */
	     return;
	end;

	if ^syserr_sw then				/* no more room in table, type message */
	     call syserr (3, "ioam_: The IOAT is too small, use TBLS config card to increase size.");
	syserr_sw = "1"b;				/* message goes out only once */
	code = error_table_$ioat_err;
	goto RETURN;				/* jump back to caller */

   end;


/* BEGIN MESSAGE DOCUMENTATION

Message:
ioam_: The IOAT is too small, use TBLS config card to increase size.

S:	$beep

T:	$init

M:	The system was unable to make an entry in the IO Assignment Table.
One or more devices may be unattachable.

A:	$inform
Correct the configuration deck before the next bootload.


END MESSAGE DOCUMENTATION */

end;
