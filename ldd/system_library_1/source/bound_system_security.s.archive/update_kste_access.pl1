/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


update_kste_access: proc (a_kstep, a_ep, a_mode);

/*

   Modified March 29, 1976 by R. Bratt for initiated mode
   Modified 01/15/79 by C. D. Tavares to fix problem with dir extended ring brackets.

*/

dcl  a_kstep ptr,
     a_ep ptr,
     a_mode bit (36) aligned;
dcl (mode, ex_mode) bit (36) aligned;
dcl  ignore fixed bin (35);

dcl  access_mode$authorization entry (ptr, bit (36) aligned, bit (36) aligned, fixed bin (35));
dcl  access_mode$effective entry (ptr, bit (36) aligned, bit (36) aligned, fixed bin (35));
dcl  access_mode$raw entry (ptr, bit (36) aligned, bit (36) aligned, fixed bin (35));

dcl  null builtin;

/*  */
% include kst;

% include dir_entry;

/*  */
	kstep = a_kstep;
	ep = a_ep;

	if kstep -> kste.dirsw then do;
	     call access_mode$authorization (ep, mode, ex_mode, ignore);
	     if ep ^= null
	     then do;
		kstep -> kste.ex_rb (1) = ep -> entry.ex_ring_brackets (1);
		kstep -> kste.ex_rb (2), kstep -> kste.ex_rb (3) = ep -> entry.ex_ring_brackets (2);
		kstep -> kste.dtbm = ep -> entry.dtem;
	     end;
	     else do;
		kstep -> kste.ex_rb = "111"b;		/* 7 */
		kstep -> kste.dtbm = (36)"0"b;
	     end;
	end;
	else do;
	     if kstep -> kste.priv_init
	     then call access_mode$raw (ep, mode, ex_mode, ignore);
	     else call access_mode$authorization (ep, mode, ex_mode, ignore);
	     kstep -> kste.dtbm = ep -> entry.dtem;
	end;
	kstep -> kste.access = mode;
	kstep -> kste.extended_access = ex_mode;
	a_mode = mode;
	return;

     end update_kste_access;
