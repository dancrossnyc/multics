/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

access_mode: proc;					/* This computes any of three modes to a segment: */
						/* raw, access_authorization factored, and effective
						   (authorization and ring bracket factored) */

/* modified by Kobziar on 11-12-73 to skip CACLs */
/* modification to original access_mode for the 3 entry version by Kobziar July 74 */
/* modified by DRV 8/76  to add entry user_effmode */
/* Modified by MJG 8/79  to fix root dir special case */
/* Modified by Keith Loepere 10/84 to return non-extended modes for dirs for 
   which the process is not on the ACL */


/****^  HISTORY COMMENTS:
  1) change(87-01-16,Farley), approve(87-02-25,MCR7613),
     audit(87-03-03,Lippard), install(87-03-30,MR12.1-1018):
     Changed to make Initializer go through entry checks like everybody else
     when the entry is a directory.  This will stop the Initializer from
     thinking that it is ok to treat directories like segments in some
     respects.
                                                   END HISTORY COMMENTS */


dcl (pds$processid,
     tc_data$initializer_id) ext fixed bin (35);

dcl  pds$access_name aligned ext,
     pds$access_authorization bit (72) aligned ext;

dcl  acc_name_$elements entry (ptr, ptr, fixed bin (35)),
     usage_values entry (fixed bin, fixed bin (71)),
     level$get entry returns (fixed bin),
    (read_allowed_, read_write_allowed_, write_allowed_) entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);

dcl (addr, max, null, ptr, rel, fixed) builtin;
dcl  bad_dir_ condition;

dcl (a_ep,
     authp,
     np) ptr;

dcl (a_auth,
     auth) bit (72) aligned;

dcl 1 uname aligned,
    2 person char (32),
    2 project char (32),
    2 tag char (1) unaligned;

dcl (cpu1,
     cpu2) fixed bin (71);

dcl (a_code,
     code) fixed bin (35);

dcl (esw,
     i,
     nacls,
     a_val,
     val,
     pf1,
     pf2) fixed bin;

dcl  a_user_name char (32) aligned;

dcl (a_exmode,
     exmode, mode,
     a_mode) bit (36) aligned;

dcl (persrp,
     projrp) bit (18) aligned;

dcl  sys_control bit (1) aligned;

dcl 1 name aligned based,
    2 person char (32),
    2 project char (32),
    2 tag char (1) unaligned;

dcl (raw init (0),
     authorization init (1),
     effective init (2)) fixed bin static;

dcl  error_table_$obsolete_function ext fixed bin (35);

dcl (active_hardcore_data$total_cpu_ac,
     active_hardcore_data$max_cpu_ac) ext fixed bin (71);

dcl (active_hardcore_data$total_ac,
     active_hardcore_data$total_pf_ac,
     active_hardcore_data$pf_long_ac,
     active_hardcore_data$nacls_long_ac,
     active_hardcore_data$max_pf_ac,
     active_hardcore_data$max_acls_ac,
     active_hardcore_data$acls_ac (13)) ext fixed bin;

	% include fs_types;
	% include aim_template;
	% include dir_header;
	% include dir_entry;
	% include dir_acl;

/*  */
raw:	entry (a_ep, a_mode, a_exmode, a_code);		/* want raw mode */
	esw = raw;
	go to initializer_check;

authorization: entry (a_ep, a_mode, a_exmode, a_code);	/* factor in access_authorization */
	esw = authorization;
	go to initializer_check;

effective: entry (a_ep, a_mode, a_exmode, a_code);	/* factor ring brackets also */
	esw = effective;
	val = level$get ();
						/* initializer_check next */
initializer_check:
	if pds$processid = tc_data$initializer_id then sys_control = "1"b; /* this is the initializer process */
	else sys_control = "0"b;			/* not the initializer */

	np = addr (pds$access_name);			/* get ptr to name */

	if esw ^= raw then do;
	     authp = addr (auth);
	     auth = pds$access_authorization;
	end;
	go to common;

user_effmode: entry (a_ep, a_user_name, a_auth, a_val, a_mode, a_exmode, a_code);

	val = a_val;
	auth = a_auth;
	authp = addr (auth);
	esw = effective;
	goto split_user_name;

user:	entry (a_ep, a_user_name, a_mode, a_exmode, a_code); /* entry to compute mode for another user */

	esw = raw;				/* skip authorization checks, as caller is responsible for this */

split_user_name:
	sys_control = "0"b;				/* don't allow access to be calculated for system control */
	np = addr (uname);				/* get ptr to name */
	call acc_name_$elements (addr (a_user_name), np, code); /* break up user name into 3 part access name */
	if code ^= 0 then go to invalid_name;


common:	ep = a_ep;
	code = 0;					/* clear error code */

	if rel (ep) = "0"b then do;			/* no more cacls */
	     code = error_table_$obsolete_function;
	     a_mode, a_exmode = "0"b;
	     goto st_ret;
	end;

	if ep = null then do;			/* special case the root */
	     if sys_control then a_exmode = "111"b;	/* if initializer calling on its own behalf */
						/* give it SMA access to the root */
	     else a_exmode = "100"b;			/* give everyone S access to the root */
	     if esw = effective then do;		/* if we must factor ring brackets */
		if val = 0 then			/* Ring 0, */
		     a_mode = "101"b;		/*  give RW access */
		else a_mode = "000"b;		/* otherwise, no access at all */
	     end;
	     else a_mode = "101"b;			/* raw check, say RW */
	     goto st_ret;
	end;


	call usage_values (pf1, cpu1);		/* start metering time */

	nacls = 0;				/* set number of acl entries examined to zero */

	if sys_control & entry.dirsw then do;		/* give initializer access to all directories */
	     mode = "101"b;
	     exmode = "111"b;
	     goto entry_check;
	end;


	i = 0;
	do aclep = ptr (ep, entry.acl_frp) repeat ptr (ep, acl_entry.frp) while (rel (aclep));
	     i = i + 1;
	     if i > entry.acle_count
	     | acl_entry.owner ^= entry.uid
	     | acl_entry.type ^= ACLE_TYPE then signal bad_dir_;
	     nacls = nacls + 1;			/* count number of ACL entries examined */
	     persrp = acl_entry.name.pers_rp;		/* get rp to person name */
	     if persrp ^= "0"b then do;		/* if person name ^= "*" */
		if ptr (ep, persrp) -> access_name.name ^= np -> name.person then go to skip;
	     end;

	     projrp = acl_entry.name.proj_rp;		/* get rp to project name */
	     if projrp ^= "0"b then do;		/* if project ^= "*" */
		if ptr (ep, projrp) -> access_name.name ^= np -> name.project then go to skip;
	     end;

	     if acl_entry.name.tag ^= "*" then		/* compare tags */
		if np -> name.tag ^= "*" then		/* allow access name to contain tag of "*" */
		     if acl_entry.name.tag ^= np -> name.tag then
			go to skip;

	     mode = acl_entry.mode;			/* names match - return mode */
	     exmode = acl_entry.ex_mode;		/* and extended mode */
	     go to entry_check;			/* see if finished */

skip:	end;

	if entry.dirsw then do;			/* not on ACL but everyone can read dirs */
	     mode = "101"b;
	     exmode = "0"b;
	     go to entry_check;
	end;

err:
	mode,					/* return null modes if no match */
	     exmode = "0"b;
	go to meter;				/* gather numbers */

entry_check:
	if esw = raw then go to meter;

	if entry.dirsw then do;			/* see what access left */
	     if authp -> aim_template.privileges.dir then go to factor_rb;
	     if (exmode & "011"b) = "000"b then go to check_read; /* if cannot modify or append
						   * then skip read/write check */
	end;

	else do;					/* a segment */
	     if authp -> aim_template.privileges.seg then go to factor_rb;
	     if (mode & "001"b) = "000"b then go to check_read; /* if cannot write, skip read-write check */
						/* w only mode must also clear security read-write check */
	end;

	if read_write_allowed_ (auth, entry.access_class) then go to factor_rb;

check_read:
	if read_allowed_ (auth, entry.access_class) then do;
	     if entry.dirsw then exmode = exmode & "100"b;
	     else mode = mode & "110"b;		/* must zero w because previous test could have failed */
	     go to factor_rb;
	end;

/* write up only on special system segments */
	if ^entry.dirsw then
	     if entry.multiple_class then		/* system segment */
		if fixed (entry.ring_brackets (3), 3) <= 1 then /* only valid if in security permiter */
		     if write_allowed_ (auth, entry.access_class) then go to factor_rb;
						/* allow full access */

	go to err;				/* otherwise return null access */

factor_rb:
	if esw = authorization then go to meter;	/* skip rb part */

	if entry.dirsw then do;
	     if val <= fixed (entry.ex_ring_brackets (1), 3) then go to seg_rb_check;
	     if val > fixed (entry.ex_ring_brackets (2), 3) then exmode = "0"b;
	     else exmode = exmode & "100"b;		/* s only  */
	end;
seg_rb_check:					/* do this factoring in dir case also */
	if val = fixed (entry.ring_brackets (1), 3) then go to meter;
	if val < fixed (entry.ring_brackets (1), 3) then mode = mode & "101"b;
	else if val <= fixed (entry.ring_brackets (2), 3) then mode = mode & "110"b;
	else if val <= fixed (entry.ring_brackets (3), 3) then mode = mode & "010"b;
	else mode = "0"b;				/* return null */

meter:						/* update access computation statistics */
	call usage_values (pf2, cpu2);
	pf2 = pf2 - pf1;				/* get number of page faults */
	cpu2 = cpu2 - cpu1;				/* get cpu time */

	active_hardcore_data$total_ac =		/* update total number of access computations */
	     active_hardcore_data$total_ac + 1;

	active_hardcore_data$total_pf_ac =		/* update total page faults taken in access computation */
	     active_hardcore_data$total_pf_ac + pf2;

	active_hardcore_data$total_cpu_ac =		/* update total cpu time */
	     active_hardcore_data$total_cpu_ac + cpu2;

	if active_hardcore_data$max_cpu_ac < cpu2 then do; /* update data on longest access computation */
	     active_hardcore_data$max_cpu_ac = cpu2;
	     active_hardcore_data$pf_long_ac = pf2;
	     active_hardcore_data$nacls_long_ac = nacls;	/* update number of acl entries searched */
	end;

	if nacls > 15 then i = 13;			/* calc index for histogram of number of acl entries */
	else if nacls > 10 then i = 12;		/* searched in an access computation */
	else i = nacls + 1;
	active_hardcore_data$acls_ac (i) =		/* update histogram */
	     active_hardcore_data$acls_ac (i) + 1;

	active_hardcore_data$max_pf_ac =		/* update max page faults taken in access computation */
	     max (active_hardcore_data$max_pf_ac, pf2);

	active_hardcore_data$max_acls_ac =		/* update max number of acls searched */
	     max (active_hardcore_data$max_acls_ac, nacls);

return:
	a_mode = mode;
	a_exmode = exmode;
st_ret:
	a_code = code;
	return;

invalid_name:
	a_mode, a_exmode = "0"b;			/* you loose */
	go to st_ret;

     end access_mode;
