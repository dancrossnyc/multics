/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

fs_modes: proc (a_segptr, a_mode, a_ex_mode, a_rings, a_code);

/*	Created 10/11/84 from fs_get by Keith Loepere.
	Modified 4/9/85 to keep mode/ex_mode straight by Keith Loepere.
*/


/****^  HISTORY COMMENTS:
  1) change(86-08-08,GDixon), approve(86-08-08,MCR7388),
     audit(86-09-02,Farley), install(86-09-08,MR12.0-1150):
     Add warning to fs_modes$locked entrypoint on requirements for properly
     calling the entry.
                                                   END HISTORY COMMENTS */


/* This program is used by internal interfaces to look-up access modes
on objects.  It makes no access checks.  Also, it is optimized to examine
kst and sdw fields for access. */

/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_ex_mode			bit (36) aligned parameter; /* extended access  bits EX ACC */
dcl  a_mode			bit (36) aligned parameter;
dcl  a_rings			(3) fixed bin (3) parameter;
dcl  a_segptr			ptr parameter;

/* Constants */

dcl  read_lock			bit (36) aligned static options (constant) init ("0"b);

/* Variables */

dcl  code				fixed bin (35);
dcl  dirsw			bit (1) aligned;
dcl  dp				ptr;
dcl  ex_mode			bit (36) aligned;
dcl  have_ep			bit (1) aligned;
dcl  lock_sw			bit (1) aligned;
dcl  mode				bit (36) aligned;
dcl  rb				(3) fixed bin (3);
dcl  ring				fixed bin;
dcl  segno			fixed bin (17);
dcl  segptr			ptr;

/* External */

dcl  dseg$			(0:1) fixed bin (71) external;
dcl  error_table_$mylock		fixed bin (35) external;

/* Entries */

dcl  get_kstep			entry (fixed bin, ptr, fixed bin (35));
dcl  level$get			entry returns (fixed bin);
dcl  lock$dir_unlock		entry (ptr);
dcl  sum$getbranch_root_my		entry (ptr, bit (36) aligned, ptr, fixed bin (35));
dcl  update_kste_access		entry (ptr, ptr, bit (36) aligned);

/* Misc */

dcl  (addr, baseno, binary, fixed, null, ptr) builtin;
%page;
	have_ep = "0"b;
	go to join;

locked: entry (a_segptr, a_mode, a_ex_mode, a_rings, a_code);

	have_ep = "1"b;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* WARNING:  When calling fs_modes$locked, sum$getbranch or		       */
/* sum$getbranch_root_my must have been called to obtain a pointer to the    */
/* directory entry corresponding to a_segptr.  This call to sum will lock    */
/* the directory and validate kste.entryp (the pointer to the dir entry      */
/* which is stored within the segment's KST entry).  The directory must      */
/* remain locked until after fs_modes$locked returns, since fs_modes$locked  */
/* uses kste.entryp to obtain a pointer to the dir entry.  Otherwise, the    */
/* dir entry could be moved within the directory by another processor,       */
/* causing fs_modes to reference a garbage location within the directory.    */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


join:	segptr = a_segptr;				/* copy arg */

	call get_kstep (fixed (baseno (segptr), 17), kstep, code); /* get kst entry ptr for this seg */
	if code ^= 0 then go to RETURN;

	if have_ep then ep = kste.entryp;		/* dir locked => entryp valid */
	else ep = null;

	dirsw = kstep -> kste.dirsw;			/* pick up directory flag from kst */

	if kstep -> kste.uid = (36)"1"b then do;	/* special case the root */
	     lock_sw = "0"b;
	     dp = null;				/* get access to root */
	     if kstep -> kste.dtbm = (36)"1"b then call update_kste_access (kstep, ep, mode);
	     mode = RW_ACCESS;			/* raw mode */
	     ex_mode = kstep -> kste.extended_access;	/* pick up directory access */
	     rb (1), rb (2), rb (3) = 7;
	end;

	else do;					/* if a non directory try to get access from sdw */
	     if dirsw = "0"b then do;			/* before locking the parent */
		dp = null;
		lock_sw = "0"b;
		segno = fixed (baseno (segptr), 17);
		sdwp = addr (dseg$ (segno));
		if sdwp -> sdw.df = "1"b then call get_sdw_access; /* access in sdw is ok, since no setfaults done */
		else do;				/* lock parent to validate the dtbm in kste */
		     call lock_dir;
						/* must update access in kste and change sdw access */
		     if kstep -> kste.dtbm ^= ep -> entry.dtem then
			call update_kste_access (kstep, ep, mode);
		     else mode = kstep -> kste.access;	/* access in kste okay */
		     rb (*) = binary (ep -> entry.ring_brackets (*), 3);
		end;
		ex_mode = kstep -> kste.extended_access;
	     end;
	     else do;
		call lock_dir;
		if kstep -> kste.dtbm ^= ep -> entry.dtem then call update_kste_access (kstep, ep, mode);
		mode = RW_ACCESS;
		ex_mode = kstep -> kste.extended_access;
		rb (*) = binary (kstep -> kste.ex_rb (*), 3); /* factor in extended ring brackets */
	     end;
	end;

	call compute_effective_mode;
	if dirsw then call compute_effective_dir_mode;

	if lock_sw then call lock$dir_unlock (dp);

	a_rings = rb;
	a_mode = mode;
	a_ex_mode = ex_mode;

RETURN:	a_code = code;
	return;
%page;
get_sdw_access: proc;
	mode = kstep -> kste.access;
	rb (1) = fixed (sdwp -> sdw.r1, 3);
	rb (2) = fixed (sdwp -> sdw.r2, 3);
	rb (3) = fixed (sdwp -> sdw.r3, 3);
     end get_sdw_access;

lock_dir: proc;

	lock_sw = "0"b;
	if ^have_ep then do;
	     call sum$getbranch_root_my (segptr, (read_lock), ep, code); /* lock parent and get pointer to entry */
	     if code ^= 0 then
		if code ^= error_table_$mylock then go to RETURN;
		else code = 0;			/* allow parent to be locked by us */
	     else lock_sw = "1"b;
	end;
	dp = ptr (ep, 0);				/* get pointer to parent directory */

     end lock_dir;

compute_effective_mode: proc;

	ring = level$get ();
	if ring = rb (1) then ;
	else if ring < rb (1) then mode = mode & "101"b;
	else if ring <= rb (2) then mode = mode & "110"b;
	else if ring <= rb (3) then mode = mode & "010"b;
	else mode = "0"b;

     end compute_effective_mode;

compute_effective_dir_mode: proc;

	ring = level$get ();
	if ring <= rb (1) then ;
	else if ring <= rb (2) then ex_mode = ex_mode & "100"b;
	else ex_mode = "0"b;

     end compute_effective_dir_mode;
%page; %include access_mode_values;
%page; %include dir_entry;
%page; %include fs_types;
%page; %include kst;
%page; %include sdw;
     end fs_modes;
