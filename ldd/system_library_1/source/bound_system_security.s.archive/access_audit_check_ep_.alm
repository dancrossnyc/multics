

" HISTORY COMMENTS:
"  1) change(88-05-17,Fawcett), approve(88-05-02,MCR7881),
"     audit(88-06-21,Farley), install(88-08-02,MR12.2-1074):
"     This change implements the always audit entry changes. As soon as we see
"     that we have an entry (entry pointer non-null), the entry.audit_flag
"     switch is checked. If on, return true. This is valid for directories,
"     segments and links (if the switch could be set for links).
"  2) change(88-08-08,Farley), approve(88-08-08,PBF7881),
"     audit(88-08-09,Martinson), install(88-08-09,MR12.2-1084):
"     Changed always audit to exclude links and ring-1 objects.  The
"     entry.audit_flag is not valid for links and ring-1 objects will be
"     selectively audited by the ring-1 controlling programs..
"                                                      END HISTORY COMMENTS


	name	access_audit_check_ep_
	entry	self
	entry	user

" Hand coded version of access_audit_$check_entry_(ptr ptr_user).
" Keith Loepere, March 1985, from access_audit_, Ed Sharpe.
" Removed extra auditing for ring 1 ops by same, April 1985.
"
" call access_audit_check_ep_$self (event_flags, oper_code, entry_ptr) 
"	returns (bit (1) aligned);
"
" call access_audit_check_ep_$user (event_flags, oper_code, entry_ptr, 
"	process_auth, process_audit_flags) returns (bit (1) aligned);
"
" dcl  entry_ptr			ptr parameter;
" dcl  event_flags			bit (36) aligned parameter;
" dcl  oper_code			bit (36) aligned parameter;
" dcl  process_audit_flags		bit (36) aligned parameter;
" dcl  process_auth			bit (72) aligned parameter;
"
	include	access_audit_encoded_op
"
	include	access_audit_eventflags
"
	include	access_audit_flags
"
	include	aim_template
"
	include	dir_entry
"
	include	dir_header
"
	equ	a_event_flags,2
	equ	a_oper_code,4
	equ	a_entry_ptr,6
	equ	a_process_auth,8
	equ	a_process_audit_flags,10

	equ	entry_ptr,1		" pr1 -> entry
	equ	dir_ptr,2			" pr2 -> dir (for link only)
	equ	event_flags,1		" x1 = event_flags
	equ	work,3			" x3 - work reg
	equ	tcb_obj,4			" x4 ^= 0 => tcb object
	equ	process_audit_flags_dl,5	" x5 = special audit flags
"					  x7 = return arg offset
	tempd	obj_class
	tempd	process_auth
	temp	oper_code
	temp	process_audit_flags

	macro	within_threshold
	lda	&1+aim_template.categories
	ana	&2+aim_template.categories
	tnz	4,ic			" categories in common
	ldx	work,&2+aim_template.level
	sbx	work,&1+aim_template.level
	tmi	&3			" >= level
	&end
"
user:	push
	eax7	a_process_audit_flags+2	" place for return arg

	epp1	ap|a_process_auth,*		" process_auth
	lda	pr1|0
	ldq	pr1|1
	staq	process_auth

	lda	ap|a_process_audit_flags,*	" process_audit_flags

	tra	join

self:	push
	eax7	a_entry_ptr+2		" place for return arg

	ldaq	pds$access_authorization	" process_auth
	staq	process_auth

	lda	pds$audit_flags		" process_audit_flags

join:	sta	process_audit_flags
	eax	process_audit_flags_dl,0,al

	ldx	event_flags,ap|a_event_flags,* " event_flags

	lda	ap|a_oper_code,*		" oper_code
	sta	oper_code

	epp	entry_ptr,ap|a_entry_ptr,*	" entry_ptr
	epp	entry_ptr,entry_ptr|0,*

	eax	tcb_obj,0			" assume not TCB object
	epaq	entry_ptr|0		" find obj_class
	arl	18
	cmpa	=o77777,dl		" null ptr?
	tnz	have_entry
	ldaq	sys_info$access_class_floor	" root
	tra	have_class
have_entry:
	szn	entry_ptr|entry.bs_word	" else need to look deeper
	tmi	have_branch
	epbp	dir_ptr,entry_ptr|0		" link, get class from dir
	lda	dir_ptr|dir.access_class
	ldq	dir_ptr|dir.access_class+1
	tra	have_class
have_branch:
	szn	pds$no_audit_ring1_fs_object_ops " ring 1 - get ring brackets
	tze	get_class

	szn	entry_ptr|entry.dirsw_word
	tmi	get_class			" dirs aren't ring 1 objects

	lda	entry_ptr|entry.ring_brackets_word
	arl	entry.ring_brackets_shift-6	" rb (3)
	ana	entry.ring_brackets_mask,dl
	cmpa	1,dl			" all rbs <= 1
	tpnz	get_class
	eax	tcb_obj,1			" object is being audited by ring 1
	
get_class:
	lda	entry_ptr|entry.access_class	" get class from entry
	ldq	entry_ptr|entry.access_class+1

have_class:
	staq	obj_class
"
" With setup done, start considering the special cases.

	canx	event_flags,audit_event_flags.special_op,du
	tnz	return_true

" covert channel?

	canx	event_flags,audit_event_flags.cc_1_10+audit_event_flags.cc_10_100,du
	tze	not_covert
	szn	sys_info$audit_covert_channel
	tze	not_covert

	canx	event_flags,audit_event_flags.receiver,du
	tnz	covert			" always audit receivers
	within_threshold	sys_info$covert_channel_threshold,process_auth,not_covert

covert:	canx	event_flags,audit_event_flags.cc_1_10,du
	tze	large_cc
	canx	process_audit_flags_dl,audit_flags.cc_1_10,du
	tnz	return_true
	tra	not_covert
large_cc:
	canx	process_audit_flags_dl,audit_flags.cc_10_100,du
	tnz	return_true

" admin, priv?

not_covert:
	canx	event_flags,audit_event_flags.admin_op,du
	tze	not_admin
	canx	process_audit_flags_dl,audit_flags.admin_ops,du
	tnz	return_true

not_admin:
	canx	event_flags,audit_event_flags.priv_op,du
	tze	not_priv
	canx	process_audit_flags_dl,audit_flags.priv_ops,du
	tnz	return_true

" now we check to see if this is a ring 1 operation that needs no audit
" by virtue of the in TCB flag

not_priv:
	eax	tcb_obj,0,tcb_obj		" set indicators
	tze	not_ring_1
	canx	event_flags,audit_event_flags.priv_op+audit_event_flags.admin_op,du
	tnz	not_ring_1		" must see admin/priv ops
	tra	return_false		" else will be audited by ring 1

" now we check to see if this is an entry whose always audit flag is on,
" this does not include links..

not_ring_1:
	epaq	entry_ptr|0		" check for valid entry_ptr
	arl	18
	cmpa	=o77777,dl
	tze	not_always_audit		" skip check if null
	szn	entry_ptr|entry.bs_word	" check branch switch
	tpl	not_always_audit		" exclude links from check
          lda	entry_ptr|entry.audit_flag_word " check audit by entry flag
	cana      entry.audit_flag,du
	tze	not_always_audit		" skip if flag is off
	lda	entry_ptr|entry.ring_brackets_word
	arl	entry.ring_brackets_shift-6	" rb (3)
	cmpa	=o000111,dl		" all rbs = 1
	tnz	return_true		" audit if not ring-1 object

" now for the real successful/unsuccessful access type checks

not_always_audit:
	canx	event_flags,audit_event_flags.grant,du
	tze	check_system_deny

	szn	sys_info$audit_successful_access
	tze	return_false
	within_threshold	sys_info$successful_access_threshold,obj_class,return_false
	tra	check_op_code		" within threshold

check_system_deny:
	szn	sys_info$audit_unsuccessful_access
	tze	return_false
	within_threshold	sys_info$unsuccessful_access_threshold,obj_class,return_false

" finally check the user's audit flags */

check_op_code:
	lda	oper_code
	lrl	access_op.object_type_shift
	qrl	36-(access_op.object_type_shift-access_op.access_type_shift)
	llr	36			" swap a/q
	ana	access_op.access_type_mask,dl	" oper_level in al
	sta	oper_code			" save it
	anq	access_op.object_type_mask,dl	" object_index in ql
	tpnz	check_audit		" some cases allow no object

	canx	event_flags,audit_event_flags.cc_1_10+audit_event_flags.cc_10_100+audit_event_flags.priv_op+audit_event_flags.admin_op,du
	tnz	return_false

check_audit:
	mpy	2*audit_flags.grant_or_deny_shift,dl " size (grant_level) + size (deny_level) times
	eax	work,-2*audit_flags.grant_or_deny_shift,ql " (object_type - 1)
	canx	event_flags,audit_event_flags.grant,du
	tnz	2,ic
	eax	work,audit_flags.grant_or_deny_shift,work " extra shift to get deny level

	lda	process_audit_flags
	als	36-(audit_flags.grant_deny_shift+2*audit_flags.grant_or_deny_shift),work
	arl	36-audit_flags.grant_or_deny_shift " grant/deny level into al
	cmpa	oper_code			" process grant/deny level
	tpl	return_true		" >= oper_code.oper_level

return_false:
	stz	ap|0,x7*
	return

return_true:
	lda	=o400000,du
	sta	ap|0,x7*
	return
	end
