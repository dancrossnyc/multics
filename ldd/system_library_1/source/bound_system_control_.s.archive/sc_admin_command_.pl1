/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
  2) change(87-04-05,GDixon), approve(87-05-28,MCR7707),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Allow force_reset and reset requests via sac sc_command. (phx20281)
  3) change(91-03-11,Vu), approve(91-03-11,MCR8241), audit(91-12-06,Zimmerman),
     install(92-03-03,MR12.5-1010):
     The sc_admin_command_ misidenfies itself as sc_admin_comamnd.
                                                   END HISTORY COMMENTS */


/* format: style2,idind30 */

sc_admin_command_:
     procedure (ASR_info_ptr, ASR_sender_ptr);

/**** This program handles requests from administrators for
      commands to be executed in the initializer process. */


/* Modified May 1982, E. N. Kittlitz. Cleanup */
/* Modified June 1982, E. N. Kittlitz. Fix command trailing NL handling */
/* Modified 1984-10-04 BIM to convert to as_request_ from old mechanism */
/* Modified 1984-11-03 BIM for new system control (ssu_) */
/* Modified 1984-12-20 BIM to unmask IPC in here. */
/* Modified 1985-01-07 BIM for access_control_name in sc_subsystem_info. */
/* Modified 1985-03-13 E. Swenson to make use Initializer.SysDaemon.* for 
   for access control checking during sac commands */
/* Modified 1985-03-25 EJ Sharpe, use flush_pending_output control rather
   than forcing it with null message after admin command completion. */
/* Modified 1985-04-23 E. Swenson to fix signal_io_ handler to not catch
   signals not caused by the sc_admin_command_ command line. */
/* Modified 1985-05-13 E. Swenson to fix the above fix.  Credits go to Mr.
   Sibert. */

/**** This procedure depends on sc_process_command_line_ to 
      reattach switches and do all that other complex stuff.
      However, this procedure has its own signal_io_ handler
      to over-ride the normal one. This handler traps input
      and logs output.

      Furthermore, this procedure has other condition handlers
      to handle other problems.

      NOTE
      Some provisions are made for a "dialog" mode.
      dialog mode is intended to be a two-way channel utilizing
      message segments. 

      dialog mode is intended to enter admin mode, NOT allow a 
      user process to dial up and become a message coordinator source.
*/

	declare (ASR_info_ptr, ASR_sender_ptr)
				        pointer parameter;

	dcl     acs_mode		        bit (36) aligned;
	dcl     code		        fixed bin (35);
	dcl     capture_output_ptr	        pointer;
	dcl     capture_output_length	        fixed bin (21);
	dcl     capture_overran	        bit (1) aligned;
	dcl     completion_string	        char (200);
	dcl     prev_iocb_name	        char (32);
	dcl     finish_signalled	        bit (1) aligned;
	dcl     evidence_of_error	        bit (1) aligned;
	dcl     ignore_io		        bit (1) aligned;
	dcl     sci_ptr		        pointer;
	dcl     message_string	        char (1000);
	dcl     test_switches	        bit (1) aligned;
	dcl     error_string	        char (100) aligned;
	dcl     unmask_count	        fixed bin;

	dcl     as_send_user_mail_	        entry (character (*), character (*), character (*), character (*),
				        character (*), bit (72) aligned, character (*));
	dcl     as_send_user_message_	        entry (character (*), character (*), character (*), character (*),
				        bit (72) aligned, character (*), bit (1) aligned);
	dcl     com_err_		        entry () options (variable);
	dcl     continue_to_signal_	        entry (fixed bin (35));
	dcl     convert_status_code_	        entry (fixed binary (35), character (8) aligned, character (100) aligned);
	dcl     cu_$get_cl_intermediary       entry (entry);
	dcl     cu_$set_cl_intermediary       entry (entry);
	dcl     cu_$reset_cl_intermediary     entry;
	dcl     default_error_handler_$wall   entry;
	dcl     find_condition_info_	        entry (pointer, pointer, fixed binary (35));
	dcl     get_group_id_	        entry () returns (char (32));
	dcl     get_temp_segment_	        entry (character (*), pointer, fixed binary (35));
	dcl     hcs_$wakeup		        entry (bit (36) aligned, fixed bin (71), bit (72) aligned, fixed bin (35))
				        ;
	dcl     ioa_		        entry () options (variable);
	dcl     ioa_$ioa_switch_nnl	        entry () options (variable);
	dcl     ioa_$ioa_switch	        entry () options (variable);
	dcl     ioa_$rsnnl		        entry () options (variable);
	dcl     ioa_$rsnp		        entry () options (variable);
	dcl     release_temp_segment_	        entry (character (*), pointer, fixed binary (35));
	dcl     sc_create_sci_	        entry (pointer, fixed binary (35));
	dcl     sc_create_sci_$destroy        entry (pointer);
	dcl     sc_process_command_line_$multics_command
				        entry (ptr, ptr, fixed bin (21));
	dcl     sc_ipc_mask_$unmask	        entry (fixed binary);
	dcl     sc_ipc_mask_$remask	        entry (fixed binary);
	dcl     ssu_$get_info_ptr	        entry (ptr) returns (ptr);
	dcl     sys_log_		        entry options (variable);
	dcl     sys_log_$error_log	        entry options (variable);
	dcl     up_sysctl_$check_acs	        entry (character (*), character (*), fixed binary, bit (36) aligned,
				        fixed binary (35));


	dcl     error_table_$recoverable_error
				        fixed bin (35) ext static;
	dcl     error_table_$as_sac_command_read
				        fixed bin (35) external static;
	dcl     error_table_$insufficient_access
				        fixed bin (35) ext static;
	dcl     error_table_$unimplemented_version
				        fixed bin (35) ext static;
	dcl     error_table_$unexpected_condition
				        fixed bin (35) ext static;
	dcl     error_table_$undefined_order_request
				        fixed bin (35) ext static;

	dcl     cleanup		        condition;
	dcl     command_error	        condition;
	dcl     any_other		        condition;
	dcl     finish		        condition;
	dcl     signal_io_		        condition;

	dcl     addcharno		        builtin;
	dcl     addr		        builtin;
	dcl     length		        builtin;
	dcl     min		        builtin;
	dcl     null		        builtin;
	dcl     substr		        builtin;
	dcl     unspec		        builtin;

	dcl     MAX_CAPTURE_LENGTH	        fixed bin (21) init (1024 * 240 * 4) int static options (constant);


	test_switches = "0"b;
	asr_admin_command_info_ptr = ASR_info_ptr;
	as_request_sender_ptr = ASR_sender_ptr;
	asr_replyp = addr (as_request_sender.reply_message);
	asr_reply_admin_command.code = 0;
	asr_reply_admin_command.flags = "0"b;

	if asr_admin_command_info.version ^= ASR_AC_VERSION_1
	then do;
		asr_reply_admin_command.code = error_table_$unimplemented_version;
		go to ERROR_NO_EXECUTION;
	     end;

/**** Does the user have access to do this? */

	call up_sysctl_$check_acs ("send_admin_command.acs", as_request_sender.group_id,
	     (as_request_sender.validation_level), acs_mode, code);
	if code ^= 0
	then do;
		call sys_log_$error_log (SL_LOG_SILENT, code, "sc_admin_command_", "Failed to check access for ^a.",
		     as_request_sender.group_id);
		asr_reply_admin_command.code = error_table_$insufficient_access;
		go to ERROR_NO_EXECUTION;
	     end;
	if (acs_mode & RW_ACCESS) ^= RW_ACCESS
	then do;
		call sys_log_ (SL_LOG_SILENT, "sc_admin_command_: Denied send_admin_command for ^a in ring ^d.",
		     as_request_sender.group_id, as_request_sender.validation_level);
		asr_reply_admin_command.code = error_table_$insufficient_access;
		go to ERROR_NO_EXECUTION;
	     end;

/**** Okay, the sucker is authorized. Now log the command line. */

	call sys_log_ (SL_LOG, "sc_admin_command_: ^a: ^a", as_request_sender.group_id, asr_admin_command_info.command);

	if ^(asr_admin_command_info.send_start_wakeup | asr_admin_command_info.send_completion_wakeup)
	then asr_admin_command_info.header.reply_channel = 0;
						/* inhibit as_request_sender_ reply wakeups in this case. */


	call ioa_$ioa_switch (sc_stat_$admin_log_iocb, "sc_admin_command_: ^a: ^a", as_request_sender.group_id,
	     asr_admin_command_info.command);


	ignore_io = "1"b;
	finish_signalled = "0"b;
	on signal_io_ call IO_SIGNAL_HANDLER;

/**** Okay, we are now signalling whenever I/O on user_i/o tries to happen */

	on finish
	     begin;
		finish_signalled = "1"b;
		code = error_table_$unexpected_condition;
		go to UNWIND_LABEL;
	     end;

	call cu_$set_cl_intermediary (CL_ENTRY);
	evidence_of_error = "0"b;
	on command_error
	     begin;
		evidence_of_error = "1"b;
	     end;

	ignore_io = "0"b;				/* all set */

	if asr_admin_command_info.send_start_wakeup
	then call SEND_START_WAKEUP;

	capture_output_ptr = null ();
	if asr_admin_command_info.send_completion_mail
	then call SETUP_CAPTURE_OUTPUT;

	begin;
	     declare 1 restrictions		   aligned like rcodebits;
	     restrictions = "1"b;			/* all powers */
	     restrictions.admin_mode = "0"b;		/* silly to allow sac to enter admin mode */
	     call sc_create_sci_ (sci_ptr, code);
	     if code ^= 0
	     then do;
		     call sys_log_$error_log (SL_LOG_SILENT, code, "sc_admin_command_",
			"Failed to create sci for execution of that command.");
		     go to UNWIND_NO_REMASK_LABEL;
		end;
	     sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);
	     sc_subsystem_info.source_name = "sc_admin_command_";
	     sc_subsystem_info.restriction_flags = unspec (restrictions);
	     sc_subsystem_info.no_real_tty = "1"b;
	     sc_subsystem_info.real_iocb = null ();
	     sc_subsystem_info.mc_atep = null ();
	     sc_subsystem_info.access_control_name = get_group_id_ ();
	end;

	prev_iocb_name = "user_output";		/* assume vanilla output */
	call sc_ipc_mask_$unmask (unmask_count);
	on any_other call ANY_OTHER_HANDLER ();

	call sc_process_command_line_$multics_command (sci_ptr, addr (asr_admin_command_info.command),
	     length (asr_admin_command_info.command));	/* Execute the command. */
	call sc_ipc_mask_$remask (unmask_count);
	asr_reply_admin_command.code = 0;
	asr_reply_admin_command.flags = ""b;
	asr_reply_admin_command.command_completed = "1"b;
	asr_reply_admin_command.command_had_errors = evidence_of_error;
	go to RESTORE_RETURN;

UNWIND_LABEL:
	call sc_ipc_mask_$remask (unmask_count);
UNWIND_NO_REMASK_LABEL:
	if code ^= 0
	then asr_reply_admin_command.code = code;
	asr_reply_admin_command.flags = ""b;
	asr_reply_admin_command.flags.command_completed = "1"b;
	asr_reply_admin_command.flags.command_aborted = "1"b;


RESTORE_RETURN:
	ignore_io = "1"b;
	revert any_other;
	call cu_$reset_cl_intermediary;
	call sc_create_sci_$destroy (sci_ptr);
	if test_switches
	then do;
		call com_err_ (code, "sc_admin_command_$test_signal_handling", "Returned via unwind.");
		return;
	     end;

	if ^asr_admin_command_info.send_completion_wakeup
	then asr_admin_command_info.header.reply_channel = 0;
						/* prevent as_request_server_ from returning any wakeup */
	if code ^= 0
	then call convert_status_code_ (code, "", error_string);
	else error_string = "";
	call ioa_$rsnnl (
	     "Completed command^[ with errors^].^[ Finish condition signalled.^]^[ ^a^/^;^s^]^[ Command line aborted by error.^]",
	     completion_string, (0), asr_reply_admin_command.flags.command_had_errors, finish_signalled, code ^= 0,
	     error_string, asr_reply_admin_command.flags.command_aborted);

	call iox_$control (sc_stat_$admin_log_iocb, "flush_pending_output", null (), (0));
	call ioa_$ioa_switch (sc_stat_$admin_log_iocb, "sc_admin_command_: ^a", completion_string);
						/* log completion text */
	if asr_admin_command_info.send_completion_message
	then do;
		call ioa_$rsnnl (
		     "Completed command ^a^[ with errors^].^[ Finish condition signalled.^]^[ ^a^/^;^s^]^[ Command line aborted by error.^]",
		     message_string, (0),
		     substr (asr_admin_command_info.command, min (length (asr_admin_command_info.command), 50)),
		     asr_reply_admin_command.flags.command_had_errors, finish_signalled, code ^= 0, error_string,
		     asr_reply_admin_command.flags.command_aborted);

		call SEND_MESSAGE (asr_admin_command_info.mail_destination, completion_string);
	     end;
	if asr_admin_command_info.send_completion_mail
	then call SEND_COMPLETION_MAIL (completion_string);
						/* complex enough for a proc */
						/* this frees capture segment */

	return;

CL_ENTRY:
     procedure;
	code = error_table_$unexpected_condition;
	go to UNWIND_LABEL;
     end CL_ENTRY;
%page;
IO_SIGNAL_HANDLER:
     procedure;
	declare 1 CI		        aligned like condition_info;


/**** Check if this signal_io_ is for us.  If not, let someone else handle
      it. */

	if sc_stat_$admin_sci_ptr ^= sci_ptr
	then do;
		call continue_to_signal_ ((0));
		return;
	     end;

	if ignore_io
	then return;

	CI.version = condition_info_version_1;
	call find_condition_info_ (null (), addr (CI), (0));
	signal_io_info_ptr = CI.info_ptr;
	signal_io_info.returned_error_code = 0;

	if signal_io_info.operation = SGI_OP_GET_LINE
	then call GET_LINE;
	else if signal_io_info.operation = SGI_OP_GET_CHARS
	then call GET_CHARS;
	else if signal_io_info.operation = SGI_OP_PUT_CHARS
	then call PUT_CHARS;
	else if signal_io_info.operation = SGI_OP_POSITION
	then call POSITION;
	else if signal_io_info.operation = SGI_OP_CONTROL
	then call CONTROL;
	else if signal_io_info.operation = SGI_OP_MODES
	then call MODES;

	return;					/* If we get here, then we needn't unwind */

%page;

GET_LINE:
     procedure;

	call INPUT;
	return;
     end GET_LINE;

GET_CHARS:
     procedure;
	call INPUT;
	return;
     end GET_CHARS;

POSITION:
     procedure;
	call INPUT;
	return;
     end POSITION;

INPUT:
     procedure;

	code = error_table_$as_sac_command_read;
	go to UNWIND_LABEL;
     end INPUT;

MODES:
     procedure;

	signal_io_old_modes = "";
	return;
     end MODES;

PUT_CHARS:
     procedure;

	declare window_ptr		        pointer;
	declare window_length	        fixed bin (21);
	declare window		        char (window_length) based (window_ptr);

	if signal_io_info.iocb_ptr = iox_$error_output
	then evidence_of_error = "1"b;
	if test_switches
	then do;
		call ioa_ ("sc_admin_command_$test_signal_handling: ^a: ^a", signal_io_info.iocb_name,
		     signal_io_io_buffer);
		return;
	     end;
	if prev_iocb_name ^= signal_io_info.iocb_name
	then call ioa_$ioa_switch_nnl (sc_stat_$admin_log_iocb, "^/^a:^/^a", signal_io_info.iocb_name,
		signal_io_io_buffer);
	else call ioa_$ioa_switch_nnl (sc_stat_$admin_log_iocb, "^a", signal_io_io_buffer);
	prev_iocb_name = signal_io_info.iocb_name;	/* log it */
	if capture_output_ptr = null () /* not capturing */ | capture_overran
						/* more than we can mail */
	then return;

	window_ptr = addcharno (capture_output_ptr, capture_output_length);
	window_length = length (signal_io_io_buffer);
	capture_output_length = capture_output_length + window_length;
	if capture_output_length > MAX_CAPTURE_LENGTH
	then do;
		capture_overran = "1"b;		/* don't capture this message at all */
		capture_output_length = capture_output_length - window_length;
	     end;
	else window = signal_io_io_buffer;
	return;
     end PUT_CHARS;

CONTROL:
     procedure;

	if signal_io_order_name = "hangup"
	then return;
	if signal_io_order_name = "listen"
	then return;
	if signal_io_order_name = "quit_enable"
	then return;
	if signal_io_order_name = "quit_disable"
	then return;
	if signal_io_order_name = "start"
	then return;
	if signal_io_order_name = "printer_on"
	then return;
	if signal_io_order_name = "printer_off"
	then return;
	if signal_io_order_name = "read_status"
	then call INPUT;
	signal_io_info.returned_error_code = error_table_$undefined_order_request;
	return;
     end CONTROL;
     end IO_SIGNAL_HANDLER;


SEND_START_WAKEUP:
     procedure;

	if asr_admin_command_info.header.reply_channel = 0
	then return;
	declare 1 l_reply		        aligned like asr_reply_admin_command;
	l_reply.code = 0;
	l_reply.flags = ""b;
	l_reply.command_started = "1"b;

	call hcs_$wakeup (as_request_sender.process_id, asr_admin_command_info.header.reply_channel, unspec (l_reply),
	     (0));
	return;
     end SEND_START_WAKEUP;


test_signal_handling:
     entry;
	declare test_iocb		        pointer;
	declare default_cl_intermediary       entry (1 aligned, 2 bit (1) unaligned, 2 bit (35) unaligned) variable;
	declare 1 cli_flags		        aligned,
		2 reset		        bit (1) unaligned,
		2 pad		        bit (35) unaligned;

	test_switches = "1"b;
	ignore_io = "0"b;
	on signal_io_ call IO_SIGNAL_HANDLER;
	call iox_$attach_name ("test_sc_admin_command", test_iocb, "signal_io_", null (), (0));
	call iox_$open (test_iocb, Stream_input_output, "0"b, (0));
	call cu_$get_cl_intermediary (default_cl_intermediary);
	call cu_$set_cl_intermediary (NEW_COMMAND_LEVEL);
	cli_flags = "0"b;
	on cleanup call cu_$set_cl_intermediary (default_cl_intermediary);
	call default_cl_intermediary (cli_flags);
	return;

NEW_COMMAND_LEVEL:
     procedure (cl_flags);

	declare 1 cl_flags		        aligned,
		2 reset		        bit (1) unaligned,
		2 pad		        bit (35) unaligned;

	on signal_io_ call IO_SIGNAL_HANDLER;
	call default_cl_intermediary (cl_flags);
	return;
     end NEW_COMMAND_LEVEL;


ERROR_NO_EXECUTION:
	call NOTIFY_REFUSAL;
	return;

NOTIFY_REFUSAL:
     procedure;

/**** If the sender set ^start_wakeup, then perhaps we can notify
      of the problem via an interactive message or mail. */

	if asr_admin_command_info.send_start_wakeup
	then return;				/* Let as_request_server_ pother about it. */

	asr_admin_command_info.reply_channel = 0;	/* prevent reply */

	call convert_status_code_ (asr_reply_admin_command.code, "", error_string);
	message_string = "";
	call ioa_$rsnnl ("^a Admin command line refused. Command line was:^/ ^a^/", message_string, (0), error_string,
	     asr_admin_command_info.command);
	if asr_admin_command_info.send_completion_message
	then call SEND_MESSAGE (asr_admin_command_info.mail_destination, message_string);
	if asr_admin_command_info.send_completion_mail
	then call SEND_MAIL (asr_admin_command_info.mail_destination, "Admin command execution refused" /* subject */,
		message_string);
	if ^(asr_admin_command_info.send_completion_mail | asr_admin_command_info.send_completion_message)
	then call SEND_MESSAGE ("", message_string);	/* pick a destination out of the air */
	return;
     end NOTIFY_REFUSAL;

SEND_MESSAGE:
     procedure (Destination, Message);

	declare (Destination, Message)        char (*);

	call as_send_user_message_ ("sc_admin_command_", Destination, as_request_sender.group_id, Message,
	     as_request_sender.authorization, "Admin command server", "0"b);
	return;
     end SEND_MESSAGE;

SEND_MAIL:
     procedure (Destination, Subject, Message) options (non_quick);

	declare (Destination, Subject, Message)
				        char (*);

	declare format_document_$string       entry (character (*), character (*), fixed binary (21), pointer,
				        fixed binary (35));
	declare 1 fdo		        aligned like format_document_options;

	declare formatted_message	        char (1000);
	declare formatted_message_length      fixed bin (21);
	declare message_to_send	        char (formatted_message_length) based (addr (formatted_message));

	unspec (fdo) = ""b;
	fdo.version_number = format_document_version_2;
	fdo.indentation = 0;
	fdo.line_length = 65;
	fdo.switches.adj_sw = "1"b;
	fdo.switches.galley_sw = "1"b;
	fdo.switches.dont_compress_sw = "1"b;

	call format_document_$string (Message, formatted_message, formatted_message_length, addr (fdo), code);
	if code = error_table_$recoverable_error
	then code = 0;
	if code ^= 0
	then do;
		formatted_message = Message;
		formatted_message_length = length (Message);
	     end;

	call as_send_user_mail_ ("sc_admin_command_", Destination, as_request_sender.group_id, Subject, message_to_send,
	     as_request_sender.authorization, "Admin command server");
	return;
     end SEND_MAIL;

SEND_COMPLETION_MAIL:
     procedure (Trailer);

	declare Trailer		        char (*);	/* end to tack on to message */
	declare remaining_string	        char (MAX_CAPTURE_LENGTH + 1000 - capture_output_length)
				        based (remaining_ptr);
						/* the max is small enough that we always have some extra room */
	declare remaining_ptr	        pointer;
	declare added_length	        fixed bin (21);
	declare total_message	        char (capture_output_length) based (capture_output_ptr);
	declare subject		        char (asr_admin_command_info.command_length + 20);
						/* room for "succeeded: " */

	remaining_ptr = addcharno (capture_output_ptr, capture_output_length);
	call ioa_$rsnp ("^/^a^[^/The output (above) was truncated because it was too long to fit^/ in a mail message.",
	     remaining_string, added_length, Trailer, capture_overran);
	capture_output_length = capture_output_length + added_length;
						/* total in message */

	call ioa_$rsnnl ("^[Succeeded^;Failed^]: ^a", subject, (0),
	     ^asr_reply_admin_command.flags.command_aborted & asr_reply_admin_command.code = 0,
	     asr_admin_command_info.command);
	call as_send_user_mail_ ("sc_admin_command_", asr_admin_command_info.mail_destination,
	     as_request_sender.group_id, subject, total_message, as_request_sender.authorization,
	     "Admin command server");
	call release_temp_segment_ ("sc_admin_command_", capture_output_ptr, (0));
	return;
     end SEND_COMPLETION_MAIL;

SETUP_CAPTURE_OUTPUT:
     procedure;

	declare initial_message	        char (10000) aligned based (capture_output_ptr);
	call get_temp_segment_ ("sc_admin_command_", capture_output_ptr, (0));
	capture_output_length = 0;
	capture_overran = "0"b;
	call ioa_$rsnp ("Output of execution of admin command:^/^a^/", initial_message, capture_output_length,
	     asr_admin_command_info.command);
	return;
     end SETUP_CAPTURE_OUTPUT;
%page;
ANY_OTHER_HANDLER:
     procedure ();

/**** We really want the operation of default_error_handler_$wall for
      all conditions, except signal_io_, where we want the normal 
      signal_io_ handlers action.  So we peek at the condition being
      signaled -- if it is signal_io_, then we continue to signal.
      Otherwise we pass our work off to default_error_handler_$wall. */

	dcl     1 CI		        aligned like condition_info;
	dcl     code		        fixed bin (35);

	CI.version = condition_info_version_1;
	call find_condition_info_ (null (), addr (CI), code);
	if code = 0
	then if CI.condition_name = "signal_io_"
	     then do;
		     call continue_to_signal_ ((0));
		     return;
		end;
	call default_error_handler_$wall;		/* But note the CL intermediary */
	return;
     end ANY_OTHER_HANDLER;				/* format: off */
%page; %include as_data_;
%page; %include format_document_options;
%page; %include sc_stat_;
%page; %include sc_subsystem_info_;
%page; %include sys_log_constants;
%page; %include access_mode_values;
%page; %include as_request_header;
%page; %include as_requests;
%page; %include as_request_sender_;
%page; %include condition_info_header;
%page; %include signal_io_info;
%page; %include condition_info;
%page; %include iox_modes;
%page; %include iox_entries;
%page; %include mc_restriction_codes;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   sc_admin_command_: PERSON: COMMANDLINE

   S:	$sc

   T:	$run

   M:	A system administrator has sent a special command to the
   Initializer, which executes it in admin mode.

   A:	$ignore


   Message:
   sc_admin_command_: Failed to check access for USER.

   S:	$sc

   T:	$run

   M:	User USER requested the system to execute an admin command,
   but the system cound not determine their access to the admin_command
   acs.

   A:	$ignore


   Message:
   sc_admin_command_: Denied send_admin_command for USER in ring RING.

   S:	$sc

   T:	$run

   M:	User USER requested the system to execute an admin command,
   but lacked access to >sc1>admin_acs>admin_command.acs.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

     end sc_admin_command_;
