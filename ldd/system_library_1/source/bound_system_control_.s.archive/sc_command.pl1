/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,indcomtxt,idind30 */


sc_command:
     procedure options (variable);

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* SC_COMMAND - command level interface to system control.		       */
/*    Concatenates its arguments and calls system_control_ subroutines to    */
/* execute.  Naturally, only works in the initializer process.	       */
/*    Used for commands executed from				       */
/*    .	system_start_up.ec					       */
/*    .	admin.ec						       */
/*    .	admin mode					       */
/*    .	send_admin_command					       */
/*							       */
/* This command is to be called ONLY in the system control admin	       */
/* environment. It insists that sc_stat_$admin_sci_ptr is non_null,	       */
/* defining the source of the x command or admin mode. Note that	       */
/* sc_admin_command_ sets admin_sci_ptr as well, so that sac sc_command      */
/* works.							       */
/*							       */
/* This procedure assumes that all I/O switches and handlers are already in  */
/* place. It handles no conditions, and just call ssu_$execute_line.	       */
/*							       */
/* This procedure creates a subsystem invocation all its own so that error   */
/* messages are prefaced with the actual request name.		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* Created by THVV in antiquity. */
/* Modified to not add trailing blank by C. Hornig, November 1979 */
/* Cleaned up by E. N. Kittlitz, May 1982 */
/* 1984-12, BIM: SSU_ system control. */


/****^  HISTORY COMMENTS:
  1) change(87-02-19,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Correct coding standard violations.  Use an automatic sc-command-line
     buffer instead of a based (allocated) buffer.
                                                   END HISTORY COMMENTS */


	dcl     arg_count		        fixed bin;
	dcl     al		        fixed bin (21);
	dcl     ap		        ptr;
	dcl     arg_list_ptr	        ptr;
	dcl     argument		        char (al) based (ap);
	dcl     argx		        fixed bin;
	dcl     buffer_length	        fixed bin (21);
	dcl     code		        fixed bin (35);
	dcl     sci_ptr		        pointer;
	dcl     test		        bit (1) aligned;

	dcl     com_err_		        entry () options (variable);
	dcl     cu_$arg_count	        entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_list_ptr	        entry returns(ptr);
	dcl     cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$arg_ptr_rel	        entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr);
	dcl     sc_create_sci_	        entry (pointer, fixed binary (35));
	dcl     sc_create_sci_$destroy        entry (ptr);
	dcl     ssu_$execute_line	        entry (ptr, ptr, fixed bin (21), fixed bin (35));

	dcl     (addr, addwordno, length, null)
				        builtin;

	dcl     cleanup		        condition;

	dcl     SP		        char (1) int static options (constant) init (" ");

	test = "0"b;
	if sc_stat_$admin_sci_ptr = null ()
	then do;
		call com_err_ (0, "sc_command", "This command may only be called in the system control environment.");
		return;
	     end;
	sci_ptr = sc_stat_$admin_sci_ptr;
	go to COMMON;

test:
     entry;

	test = "1"b;
	sci_ptr = null;
	on cleanup call sc_create_sci_$destroy (sci_ptr);
	call sc_create_sci_ (sci_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, "sc_command", "Failed to create test subsystem info.");
		return;
	     end;

COMMON:
	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, "sc_command");
		return;
	     end;

	buffer_length = 0;
	do argx = 1 to arg_count;
	     call cu_$arg_ptr (argx, ap, al, (0));
	     if argx > 1
	     then buffer_length = buffer_length + length (SP);
	     buffer_length = buffer_length + al;
	end;
	arg_list_ptr = cu_$arg_list_ptr();

DCL_BLOCK:
	begin;

	     dcl	   buffer			   char (buffer_length) varying;

	     buffer = "";
	     do argx = 1 to arg_count;
		call cu_$arg_ptr_rel (argx, ap, al, (0), arg_list_ptr);
		buffer = buffer || argument;
		buffer = buffer || SP;
	     end;

	     call ssu_$execute_line (sci_ptr, addwordno (addr (buffer), 1), length (buffer), code);
	     if test
	     then if code ^= 0
		then call com_err_ (code, "sc_command", "Error from ssu_$execute_line.");
	end DCL_BLOCK;

	if test
	then call sc_create_sci_$destroy (sci_ptr);

%include sc_stat_;
     end sc_command;
