/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,idind30 */

sc_init_:
     procedure ();

/* SC_INIT_ - initialize system control */
/* probably removed from system_control_ by THVV sometime in the dim past.
   Updated to remove tty console support for new iox_, April 1981, Benson I. Margulies */
/* Changed to heed iox_ error codes for all streams, August 1981, E. N. Kittlitz */
/* added back >unb to search rules after it was backed out once. 8/26/81 Holmstedt */
/* pit_ refname added Benson I. Margulies 81/12. */
/* call_bce change Keith Loepere 8/83 */
/* 09/23/84 by R. Michael Tague:  Set up handler for system_shutdown_scheduled_
   and dm_system_shutdown_ IPS signals */
/* Modified 1984-10-08 BIM for demise of communications */
/* Modified 1984-10-27 by E. Swenson to rename >sc1>admin_log to >sc1>as_logs
   since this is what sc_stat_$log_dir says this directory is supposed to be
   called. */
/* Modified 1984-11-01 BIM for ssu_ */
/* 12/11/84 by R. Michael Tague:  Changed to use dm_misc_util_$shutdown_handler
   for the dm_system_shutodown_ IPS signal. */
/* Modified 1985-01-15, BIM: fixed to use syserr, not sys_log_, before
   as log is available. */
/* Modified 1985-03-27, E. Swenson: for forced emergency listener. */
/* Modified 1985-04-16, EJ Sharpe: for attempting log salvage on bad logs */

/****^  HISTORY COMMENTS:
  1) change(85-11-27,Herbst), approve(87-05-25,MCR7680),
     audit(87-01-08,GDixon), install(87-08-04,MR12.1-1055):
     Added static handler for system_message_.
  2) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
  3) change(86-06-27,Swenson), approve(87-05-25,MCR7680),
     audit(87-01-08,GDixon), install(87-08-04,MR12.1-1055):
     Modified to support a test system control environment.
  4) change(86-12-03,Fawcett), approve(87-05-25,MCR7680),
     audit(87-01-08,GDixon), install(87-08-04,MR12.1-1055):
     Merged 2) with 1) & 3) DSA to MR12 conversion.
  5) change(87-01-08,GDixon), approve(87-01-08,PBF7479),
     audit(87-01-08,Fawcett), install(87-01-12,MR12.0-1268):
     Make Initializer properly handle asynchronous event call channels (to
     prevent wkp_ signals from causing as_dumps).
  6) change(87-02-06,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Replace calls to the nonexistent kill_sc_process_ subroutine with calls to
     hphcs_$syserr_error_code.  Corrected error message documentation, and
     code which creates log and admin_log if they are not found.  Correct
     coding standard violations.
  7) change(90-09-24,Schroth), approve(90-09-24,MCR8212), audit(90-10-10,Vu),
     install(90-10-17,MR12.4-1047):
     Correct possible fatal linkage error if booting nosc.
                                                   END HISTORY COMMENTS */
%page;

/* DECLARATION OF EXTERNAL SYMBOLS */

	dcl     active_all_rings_data$initializer_tty
				        ext char (32);
						/* TTY channel ID for operator tty from boot deck. */
	dcl     active_all_rings_data$initializer_dim
				        ext char (32);
						/* always ocd_ */


/* DECLARATION OF BUILTIN FUNCTIONS */

	dcl     (addr, codeptr, hbound, max, null, rtrim, substr, unspec)
				        builtin;

/* Entries */

	dcl     com_err_		        entry () options (variable);
	dcl     config_$find	        entry (char (4) aligned, ptr);
	dcl     copy_on_write_handler_        entry ();
	dcl     cu_$cl		        entry options (variable);
	dcl     dm_misc_util_$shutdown_handler
				        entry ();
	dcl     get_pdir_		        entry () returns (char (168));
	dcl     hcs_$append_branchx	        entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*),
				        fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
	dcl     hcs_$chname_file	        entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$fs_search_set_wdir       entry (char (*), fixed bin (35));
	dcl     hcs_$initiate	        entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				        fixed bin (35));
	dcl     hcs_$initiate_search_rules    entry (ptr, fixed bin (35));
	dcl     hcs_$status_minf	        entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				        fixed bin (35));
	dcl     hphcs_$call_bce	        entry;
	dcl     hphcs_$set_mask_ring	        entry;
	dcl     hphcs_$syserr	        entry options (variable);
	dcl     hphcs_$syserr_error_code      entry options (variable);
	dcl     ioa_		        entry () options (variable);
	dcl     ioa_$rsnnl		        entry () options (variable);
	dcl     iox_$init_standard_iocbs      entry;
	dcl     log_salvage_	        entry (char (*), char (*), ptr, fixed bin (35));
	dcl     log_write_$open	        entry (character (*), character (*), bit (1) aligned, pointer,
				        fixed binary (35));
	dcl     pathname_		        entry (char (*), char (*)) returns (char (168));
	dcl     pl1_resignaller_$establish_handlers
				        entry;
	dcl     sc_create_sci_	        entry (pointer, fixed binary (35));
	dcl     sct_manager_$set	        entry (fixed bin, entry, fixed bin (35));
	dcl     ssu_$get_info_ptr	        entry (ptr) returns (ptr);
	dcl     system_message_handler_       entry ();
	dcl     timer_manager_$cpu_time_interrupt
				        entry ();
	dcl     timer_manager_$alarm_interrupt
				        entry ();
	dcl     system_shutdown_handler_      entry ();
	dcl     wkp_signal_handler_	        entry ();
	dcl     unique_chars_	        entry (bit (*)) returns (char (15));

	dcl     (
	        error_table_$noentry,
	        error_table_$notadir
	        )			        fixed bin (35) ext static;

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

	dcl     atd		        char (200); /* Attach description for master console */
	dcl     1 auto_log_salvage_arg        aligned like log_salvage_arg;
	dcl     code		        fixed bin (35);
						/* iox errcode */
	dcl     invoke_emergency_listener     bit (1);	/* should emergency listener be invoked */
	dcl     log_salv_code	        fixed bin (35);
						/* returned from log_salvage_ */
	dcl     log_salv_err_cnt	        fixed bin;	/* count of errors occurring on each log */
	dcl     log_salv_name	        char (32);	/* name of log being salvaged */
	dcl     type		        fixed bin (2);
						/* for status_minf */

/* Constant */

/* Here are the search rules used by the initializer process. */

	dcl     1 search_rules	        int static options (constant) aligned,
						/* The search rules structure from SWS */
		2 number		        fixed bin init (7),
		2 dirs		        (7) char (168)
				        init ("initiated_segments", "referencing_dir", "working_dir",
				        ">system_library_standard", ">system_library_1", ">system_library_tools",
						/* Important. answering service & opr cons */
				        ">system_library_unbundled");
						/* bound_mcs_init_ */

	declare DIR_RINGS		        (3) fixed bin (3) init (4, 5, 5) int static options (constant);
	dcl     ME		        char (32) initial ("sc_init_") internal static options (constant);
%page;
/* Program */

	invoke_emergency_listener = INVOKE_EMERGENCY_LISTENER ();
	if ^sc_stat_$test_mode
	then do;
		call pl1_resignaller_$establish_handlers;
		call sct_manager_$set (cput_sct_index, timer_manager_$cpu_time_interrupt, code);
		call sct_manager_$set (alrm_sct_index, timer_manager_$alarm_interrupt, code);
		call sct_manager_$set (no_write_permission_sct_index, copy_on_write_handler_, code);
		call sct_manager_$set (not_in_write_bracket_sct_index, copy_on_write_handler_, code);
		call sct_manager_$set (wkp_sct_index, wkp_signal_handler_, code);
		if ^invoke_emergency_listener
		then do;
			call sct_manager_$set (system_shutdown_scheduled_sct_index, system_shutdown_handler_, code);
			call sct_manager_$set (dm_shutdown_scheduled_sct_index, dm_misc_util_$shutdown_handler,
			     code);
			call sct_manager_$set (system_message_sct_index, system_message_handler_, code);
		     end;
	     end;

	code = 0;					/* ignore it */
	begin;
	     declare pp			   pointer;
	     pp = null ();
	     call hcs_$initiate (get_pdir_ (), "pit", "pit_", (0), (0), pp, code);
						/* the refname is important */
	     if pp = null ()
	     then do while ("1"b);
		     if ^sc_stat_$test_mode
		     then do;
			     call hphcs_$syserr_error_code (BEEP, code,
				"sc_init_: Could not initiate the PIT for the Initializer.");
			     call hphcs_$call_bce;
			end;
		     else do;
			     call com_err_ (code, ME, "Could not initiate the PIT for the Initializer.");
			     call cu_$cl ();
			end;
		end;
	     code = 0;
	end;

/**** make sure we are in >sc1 */
	call hcs_$fs_search_set_wdir ((sc_stat_$sysdir), code);
	if code ^= 0
	then if ^sc_stat_$test_mode
	     then call hphcs_$syserr_error_code (BEEP, code, "sc_init_: Could not set working directory to ^a.",
		     sc_stat_$sysdir);
	     else call com_err_ (code, ME, "Could not set working directory to ^a.", sc_stat_$sysdir);

	if sc_stat_$test_mode
	then do;
		call iox_$find_iocb ("master_i/o", sc_stat_$master_iocb, code);
		if code ^= 0
		then do;
			call com_err_ (code, ME, "Could not create master_i/o switch.");
			return;
		     end;
		call iox_$close (iox_$user_io, code);
		if code ^= 0
		then do;
			call com_err_ (code, ME, "Could not close user_i/o switch.");
			return;
		     end;
/**** Can't print an error message if any of these fail.  */
		call iox_$move_attach (iox_$user_io, sc_stat_$master_iocb, code);
		call iox_$open (sc_stat_$master_iocb, Stream_input_output, ""b, code);
		call iox_$attach_ptr (iox_$user_io, "syn_ master_i/o", codeptr (sc_init_), code);
	     end;
	else do;
		call hphcs_$set_mask_ring;		/* Set "initial ring" to 4 so timer_manager_ work */
		call hcs_$initiate_search_rules (addr (search_rules), code);
		if code ^= 0
		then call hphcs_$syserr_error_code (BEEP, code, "sc_init_: Error from initiate_search_rules");

		call iox_$init_standard_iocbs;
/**** sc_stat_$master_channel is only declared as a char(6) while
      active_all_rings_data$initializer_tty is declared char(32).  Note
      that the value of these character strings is always "otw_". */
		sc_stat_$master_channel = substr (active_all_rings_data$initializer_tty, 1, 6);

		atd = rtrim (active_all_rings_data$initializer_dim) || " " || sc_stat_$master_channel;
		call iox_$attach_name ("master_i/o", sc_stat_$master_iocb, atd, codeptr (sc_init_), code);
		if code ^= 0
		then call hphcs_$syserr_error_code (CRASH, code, "sc_init_: Error from iox_$attach master_i/o ^a",
			atd);			/* attach to console. */
		call iox_$open (sc_stat_$master_iocb, Stream_input_output, ""b, code);
		if code ^= 0
		then call hphcs_$syserr_error_code (CRASH, code,
			"sc_init_: Error from iox_$open master_i/o stream_input_output");

		call iox_$attach_name ("user_i/o", iox_$user_io, "syn_ master_i/o", codeptr (sc_init_), code);
		if code ^= 0
		then call hphcs_$syserr_error_code (CRASH, code,
			"sc_init_: Error from iox_$attach user_i/o syn_ master_i/o");
	     end;

/**** Here we check to see if the "nosc" parameter was specified on
      the BCE boot command line.  If so, we invoke the emergency
      listener.  This is useful in case we have problems with the
      logging software later on. */

	if invoke_emergency_listener
	then do;
		call hphcs_$syserr (BEEP,
		     "sc_init_: Invoking emergency listener because ""nosc"" parameter specified.");
		call EMERGENCY_LISTENER ();
	     end;

	call iox_$attach_name ("severity3", sc_stat_$sv3_iocb, "syn_ user_i/o", codeptr (sc_init_), code);
	if code ^= 0
	then go to SEVERITY_ERROR;
	call iox_$attach_name ("severity2", sc_stat_$sv2_iocb, "syn_ user_i/o", codeptr (sc_init_), code);
	if code ^= 0
	then go to SEVERITY_ERROR;
	call iox_$attach_name ("severity1", sc_stat_$sv1_iocb, "syn_ user_i/o", codeptr (sc_init_), code);
	if code ^= 0
	then go to SEVERITY_ERROR;

	call hcs_$status_minf (sc_stat_$sysdir, "as_logs", 1, type, (0), code);
	if code = 0 & type ^= 2
	then code = error_table_$notadir;
	if code ^= 0
	then do;
		if ^sc_stat_$test_mode
		then call hphcs_$syserr_error_code (BEEP, code,
			"sc_init_: ^a>as_logs does not exist or is not a directory.", sc_stat_$sysdir);
		else call com_err_ (code, ME, "^a>as_logs does not exist or is not a directory.", sc_stat_$sysdir);

		call hcs_$chname_file (sc_stat_$sysdir, "as_logs", "as_logs", "as_logs." || unique_chars_ (""b), code)
		     ;				/* rename if its there */
		if code = 0
		then if ^sc_stat_$test_mode
		     then call hphcs_$syserr (ANNOUNCE, "sc_init_: Renamed non-directory object ^a>as_logs.",
			     sc_stat_$sysdir);
		     else call com_err_ (code, ME, "Renamed non-directory object ^a>as_logs.", sc_stat_$sysdir);

		call hcs_$append_branchx (sc_stat_$sysdir, "as_logs", SMA_ACCESS_BIN, DIR_RINGS, "*.SysDaemon.*", 1,
		     0, 0, code);
		if code = 0
		then if ^sc_stat_$test_mode
		     then call hphcs_$syserr (ANNOUNCE, "sc_init_: Created ^a>as_logs", sc_stat_$sysdir);
		     else call ioa_ ("^a: Created ^a>as_logs.", ME, sc_stat_$sysdir);
	     end;

	sc_stat_$as_log_write_ptr = null ();
	call log_write_$open (sc_stat_$log_dir, "log", "0"b /* don't create */, sc_stat_$as_log_write_ptr, code);
	if code ^= 0
	then do;
		if code ^= error_table_$noentry
		then do;
			log_salv_err_cnt = 0;	/* for the benefit of ... */
			log_salv_name = "log";	/* ... print_log_salv_error */
			unspec (auto_log_salvage_arg) = ""b;
			log_salvage_arg_ptr = addr (auto_log_salvage_arg);
			log_salvage_arg.version = LOG_SALVAGE_ARG_VERSION_1;
			log_salvage_arg.reporter_proc = print_log_salv_error;
			call log_salvage_ (sc_stat_$log_dir, log_salv_name, log_salvage_arg_ptr, log_salv_code);
		     end;
		else log_salv_code = 0;
		if log_salv_code = 0
		then do;				/* try again */
			call log_write_$open (sc_stat_$log_dir, "log", "1"b /* create */, sc_stat_$as_log_write_ptr,
			     code);
		     end;
		if code ^= 0
		then do;				/* still didn't fly */
			if ^sc_stat_$test_mode
			then call hphcs_$syserr_error_code (BEEP, code,
				"sc_init_: Failed to open the AS log (^a>log).", sc_stat_$log_dir);
			else call com_err_ (code, ME, "Failed to open the AS log (^a>log).", sc_stat_$log_dir);
			call EMERGENCY_LISTENER;
		     end;

	     end;

/**** At this point we probably could use sys_log_, but syserr is surer */

	call ioa_$rsnnl ("log_output_ ^a>admin_log -no_create", atd, (0), sc_stat_$log_dir);
	sc_stat_$admin_log_iocb = null ();
	call iox_$attach_name ("admin_log_", sc_stat_$admin_log_iocb, (atd), codeptr (sc_init_), code);
	if code ^= 0				/* switches are set, we can sys_log_ */
	then do;
		if ^sc_stat_$test_mode
		then call hphcs_$syserr_error_code (BEEP, code, "sc_init_: Failed to attach admin_log log.");
		else call com_err_ (code, ME, "Failed to attach admin_log log.");
		call EMERGENCY_LISTENER;
	     end;

	call iox_$open (sc_stat_$admin_log_iocb, Stream_output, "1"b, code);
	if code ^= 0
	then do;
		if code ^= error_table_$noentry
		then do;
			log_salv_err_cnt = 0;	/* for the benefit of ... */
			log_salv_name = "admin_log";	/* ... print_log_salv_error */
			unspec (auto_log_salvage_arg) = ""b;
			log_salvage_arg_ptr = addr (auto_log_salvage_arg);
			log_salvage_arg.version = LOG_SALVAGE_ARG_VERSION_1;
			log_salvage_arg.reporter_proc = print_log_salv_error;
			call log_salvage_ (sc_stat_$log_dir, log_salv_name, log_salvage_arg_ptr, log_salv_code);
		     end;
		else log_salv_code = 0;
		if log_salv_code = 0
		then do;				/* try again */
			call iox_$detach_iocb (sc_stat_$admin_log_iocb, (0));
			sc_stat_$admin_log_iocb = null ();
			call ioa_$rsnnl ("log_output_ ^a>admin_log -create", atd, (0), sc_stat_$log_dir);
			call iox_$attach_name ("admin_log_", sc_stat_$admin_log_iocb, (atd), codeptr (sc_init_),
			     code);
			if code ^= 0		/* switches are set, we can sys_log_ */
			then do;
				if ^sc_stat_$test_mode
				then call hphcs_$syserr_error_code (BEEP, code,
					"sc_init_: Failed to attach admin_log log.");
				else call com_err_ (code, ME, "Failed to attach admin_log log.");
				call EMERGENCY_LISTENER;
			     end;
			call iox_$open (sc_stat_$admin_log_iocb, Stream_output, "1"b, code);
		     end;
		if code ^= 0
		then do;				/* still didn't fly */
			if ^sc_stat_$test_mode
			then call hphcs_$syserr_error_code (BEEP, code, "sc_init_: Failed to open admin_log log.");
			else call com_err_ (code, ME, "Failed to open admin_log log.");
			call iox_$detach_iocb (sc_stat_$admin_log_iocb, (0));
			call EMERGENCY_LISTENER;
		     end;
	     end;
	call iox_$control (sc_stat_$admin_log_iocb, "get_log_write_data_ptr", addr (sc_stat_$admin_log_write_ptr), code)
	     ;
	if code ^= 0
	then do;
		if ^sc_stat_$test_mode
		then call hphcs_$syserr_error_code (BEEP, code,
			"sc_init_: Failed to get log_write_ ptr for admin_log.");
		else call com_err_ (code, ME, "Failed to get log_write_ ptr for admin_log.");
		call EMERGENCY_LISTENER;
	     end;

	call sc_create_sci_ (sc_stat_$master_sci_ptr, code);
	if code ^= 0
	then do;
		if ^sc_stat_$test_mode
		then call hphcs_$syserr_error_code (BEEP, code,
			"sc_init_: Failed to create ssu invocation for system control.");
		else call com_err_ (code, ME, "Failed to create ssu invocation for system control.");
		call EMERGENCY_LISTENER;
	     end;

	sc_subsystem_info_ptr = ssu_$get_info_ptr (sc_stat_$master_sci_ptr);
	sc_subsystem_info.source_name = "otw_";
	sc_subsystem_info.real_iocb = sc_stat_$master_iocb;
	sc_subsystem_info.the_system_console = "1"b;
	return;

SEVERITY_ERROR:
	if ^sc_stat_$test_mode
	then call hphcs_$syserr (BEEP, "sc_init_: Failed to attach one of the severityN (1, 2, 3) switches.");
	else call com_err_ (code, ME, "Failed to attach one of the severityN (1, 2, 3) switches.");
	call EMERGENCY_LISTENER;
	return;
%page;
print_log_salv_error:
     procedure (P_msg);

	dcl     P_msg		        char (*) parameter;
	dcl     msg		        char (1024) varying;

	msg = P_msg;

	log_salv_err_cnt = log_salv_err_cnt + 1;

	if log_salv_err_cnt = 1
	then if ^sc_stat_$test_mode
	     then call hphcs_$syserr (SYSERR_PRINT_ON_CONSOLE, "sc_init_: Messages from log salvage of ^a:",
		     pathname_ (sc_stat_$log_dir, log_salv_name));
	     else call com_err_ (code, ME, "Messages from log salvage of ^a:",
		     pathname_ (sc_stat_$log_dir, log_salv_name));
	if ^sc_stat_$test_mode
	then call hphcs_$syserr (SYSERR_PRINT_ON_CONSOLE, "sc_init_ (log_salvage_): ^a", msg);
	else call com_err_ (code, ME, "^a", msg);
	return;
     end print_log_salv_error;

EMERGENCY_LISTENER:
     procedure;

/**** We have enough I/O switches for a primitive ADMIN mode. */

	declare default_error_handler_$wall   entry;
	declare any_other		        condition;
	declare listen_		        entry (character (*) var);

	on any_other call default_error_handler_$wall;

	call ioa_ ("sc_init_: A serious error was encountered setting up the system control");
	call ioa_ (" environment. The system will attempt to establish a Multics");
	call ioa_ (" listener level. You should repair the problem, and then type:");
	call ioa_ ("     ""hphcs_$shutdown"", and reboot the system.");


	call listen_ ("");
     end EMERGENCY_LISTENER;
%page;
INVOKE_EMERGENCY_LISTENER:
     procedure () returns (bit (1) aligned);

	dcl     i			        fixed bin;	/* loop index */

	if sc_stat_$test_mode
	then return ("0"b);
	intk_cardp = null ();
	call config_$find (INTK_CARD_WORD, intk_cardp);
	if intk_cardp = null ()
	then /* no INTK card? */
	     return ("0"b);				/* then no emergency listener */

/**** INTK card found, check for "nosc" parameter */

	do i = 1 to hbound (intk_card_array.parms, 1);
	     if intk_card.parms (i) = "nosc"
	     then return ("1"b);			/* yes, it was specified */
	end;

	return ("0"b);				/* parameter not found */

     end INVOKE_EMERGENCY_LISTENER;

/* format: off */
%page; %include access_mode_values;
%page; %include config_intk_card;
%page; %include iox_entries;
%page; %include iox_modes;
%page; %include log_salvage_arg;
%page; %include sc_stat_;
%page; %include sc_subsystem_info_;
%page; %include sys_log_constants;
%page; %include syserr_constants;
%page; %include static_handlers;
/* format: on */
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   sc_init_:  ERROR_MESSAGE.  Error from iox_$attach master_i/o ATD

   S: $crash

   T: $init

   M: Some error was detected while attaching the master_i/o switch.
   ATD is the text of the attach description.  This error is usually caused
   by a hardware failure in the operator's console.  Correct the failure
   and reboot the system.

   A: $contact


   Message:
   sc_init_:  ERROR_MESSAGE.  Error from iox_$open master_i/o stream_input_output

   S: $crash

   T: $init

   M: Some error was detected while opening the master_i/o switch.
   This is usually caused by a hardware failure in the operator's console.
   Correct the failure and reboot the system.

   A: $contact

   Message:
   sc_init_:  ERROR_MESSAGE.  Error from iox_$attach user_i/o syn_ master_i/o

   S: $crash

   T: $init

   M: Some error was detected while attaching user_i/o as a synonym for the
   master_i/o switch in the Initializer process.  This is usually caused by a 
   hardware failure in the operator's console.  Correct the failure and reboot
   the system.

   A: $contact


   Message:
   sc_init_:  Invoking emergency listener because "nosc" parameter specified.

   S: $info

   T: $init

   M: The parm config card specified nosc (no system control).  This parameter
   requests that an emergency listener be entered to allow repair of >sc1 or
   other parts of the system hierarchy at the earliest possible point during 
   system initialization.  Once the repairs are made, shutdown the system by
   typing:  "hphcs_$shutdown" and then reboot the system.

   A: Repair the problem, shutdown the system, then reboot.


   Message:
   sc_init_:  Messages from log salvage of LOG_PATHNAME:

   S: $info

   T: $init

   M: Some error was detected in opening the admin or answering service
   log specified by LOG_PATHNAME.  A salvage was invoked to attempt
   correction of the problem.  One or more messages will succeed this
   message which describe inconsistancies found in the log, repairs
   which were made, or conditions which prevent automatic repair.
   These will be of the form "sc_init_: (log_salvage_) MESSAGE".

   A: $contact


   Message:
   sc_init_: Failed to attach one of the severityN (1, 2, 3) switches.

   S: $info

   T: $init

   M: The Initializer failed to make a syn_ for one of the three switches
   severity1, severity2, or severity3. There may be a problem with the
   system tape, the libraries, or the hardware.

   A: The system attempts to enter a primitive listener environment on
   the bootload console. You should diagnose and/or correct the problem
   and then reboot the system.

  
   Message: 
   sc_init_: A serious error was encountered setting up the system control
   environment. The system will attempt to establish a Multics
   listener level. You should repair the problem, and then type:
         "hphcs_$shutdown", and reboot the system.

   S: $info
 
   T: $init

   A: $contact


   Message:
   sc_init_: Cound not initiate the PIT for the Initializer.

   S:    $crash

   T:    $init

   M:    The Initializer has failed to initiate the segment "pit" in its
   process directory.  This could indicate problems with the bootload
   tape, the online libraries, or the hardware.

   A:    $contact


   Message:
   sc_init_: ERROR_MESSAGE.  Error from initiate_search_rules.

   S:	$beep

   T:	$init

   M:	The Initializer is attempting to set its search rules
   and has encountered an error.  This message may occur
   if an error has been introduced into the system tape,
   or it may indicate that one of the directories searched
   by the Initializer has been destroyed.

   A:	$contact

   Message:
   sc_init_: ERROR_MESSAGE.  Could not set working directory to PATH.

   S:     $beep

   T:	$init

   M:	Either some program is in error, or the directory
   PATH does not exist.

   A:	$contact
   Correct the problem, shut down, and reboot.


   Message:
   sc_init_: ERROR_MESSAGE.  >system_control_dir>as_logs does not exist or is not a directory.

   S:  $beep

   T:  $init

   M:  The directory >sc1>as_logs must exist for the ring 4 environment to
   be set up. 

   A:  The system continues operation, trying to repair the situation. 
   Subsequent messages indicate the success or failure of repairs.


   Message:
   sc_init_: Created >system_control_dir>as_logs

   S:  $beep

   T:  $init

   M:  The system has successfully created a new directory >sc1>as_logs.

   A: $ignore
   If this is not the first bootload of the system under MR11 or later,
   you may need to retrieve log segments lost in a crash into the new
   directory.


   Message:
   sc_init_: Renamed non-directory object >system_control_dir>as_logs.

   S:  $beep

   T:  $init

   M:  The system found something that was not a directory in the place
   of the directory >sc1>as_logs, and renamed it to permit a new directory
   to be created.

   A: $ignore


   Message:
   sc_init_: ERROR_MESSAGE.  Failed to attach admin_log log.

   S:  $beep

   T:  $init

   M:  The system failed to attach a switch to write information to the 
   admin log, >sc1>as_logs>admin_log. The segment >sc1>as_logs>admin_log may be
   damaged. The system enters a primitive Multics listener on the bootload
   console.

   A:  Repair the problem. You may have to delete or rename the segment
   >sc1>as_logs>admin_log.   Then shutdown and reboot.

   Message:
   sc_init_:  ERROR_MESSAGE.  Failed to open admin_log log.

   S:  $beep

   T:  $init

   M: The system failed to iox open the switch for the log >sc1>as_logs>admin_log.
   The segment >sc1>as_logs>admin_log may be damaged. The system enters
   a primitive Multics listener on the bootload console.   

   A:  Repair the problem.
   You may need to rename or delete the segment >sc1>as_logs>admin_log.
   Then shutdown and reboot.


   Message:
   sc_init_: ERROR_MESSAGE.  Failed to get log_write_ ptr for admin_log.

   S:  $beep

   T:  $init

   M:  This indicated an internal programming error. The online libraries
   may be damaged.

   A:  $contact


   Message:
   sc_init_: ERROR_MESSAGE.  Failed to open the AS log (>system_control_dir>as_logs>log).

   S:  $beep

   T:  $init

   M:  The system was unable to open the log >sc1>as_logs>log. This may 
   indicate damage to the segment >sc1>as_logs>log. The system enters a 
   primitive Multics listener on the bootload console.

   A:  Repair the problem. You may have to rename or delete >sc1>as_logs>log.
   Then shutdown and reboot.


   Message:
   sc_init_: Failed to create ssu invocation for system control.

   S:  $beep

   T:  $init

   M:  The system failed to set up the subsystem data structure for
   the bootload console. This indicates a programming error or trouble
   with the system libraries.

   A:  $contact

   END MESSAGE DOCUMENTATION */

     end sc_init_;
