/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-02-05,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Correct coding standard violations, and remove unnecessary statements.
                                                   END HISTORY COMMENTS */


/**** The initializer's ring four base-of-stack handler.
      In admin mode proper, this is pre-empted by default_error_handler_$wall,
      and should never be called. That is, when sc_stat_$admin_listener_switch
      is "1"b. In the admin environment (sc_stat_$admin_sci_ptr ^= null)
      this is still the handler. This uses ssu_$abort_line to abort execution
      of a command, not the "abort" condition.
*/

/**** Written by the hidden Imam. */
/* Modified 1984-10-08 BIM for new admin mode */

/* format: style2,idind30,indcomtxt */

sc_signal_handler_:
     procedure;

	dcl     error_switch	        ptr;	/* Switch to write message on. */
	dcl     mp		        ptr;	/* ptr to allocated message */
	dcl     ml		        fixed bin (21);
						/* lth of message */
	dcl     msg_area		        area (512); /* area in which condition_interpreter puts message */
	dcl     string		        char (64) aligned;
						/* Basic fault message. */

	dcl     (addr, empty, null)	        builtin;

	dcl     as_$dump		        entry (char (*) aligned);
	dcl     condition_interpreter_        entry (ptr, ptr, fixed bin (21), fixed bin, ptr, char (*), ptr, ptr);
	dcl     find_condition_info_	        entry (ptr, ptr, fixed bin (35));
	dcl     ioa_$ioa_switch	        entry () options (variable);
	dcl     restart_mc_ttys_	        entry;
	dcl     ssu_$abort_line	        entry () options (variable);
	dcl     ssu_$get_info_ptr	        entry (ptr) returns (ptr);
	dcl     sys_log_		        entry options (variable);

/* First locate the condition frame which caused us to be invoked. */

	CI.version = condition_info_version_1;
	call find_condition_info_ (null (), addr (CI), (0));

	condition_info_header_ptr = CI.info_ptr;
	if condition_info_header_ptr ^= null ()
	then if condition_info_header.quiet_restart
	     then return;

/* QUIT signals are handled specially. We don't quit out of anything we can't restart. */

	if CI.condition_name = "quit"
	then return;

	if sc_stat_$admin_sci_ptr ^= null ()
	then do;
		sc_subsystem_info_ptr = ssu_$get_info_ptr (sc_stat_$admin_sci_ptr);
		if sc_subsystem_info.no_real_tty
		then error_switch = sc_stat_$admin_log_iocb;
		else error_switch = sc_subsystem_info.real_iocb;

	     end;
	else if sc_stat_$mc_is_on
	then error_switch = sc_stat_$mc_iocb;
	else error_switch = sc_stat_$master_iocb;

	if condition_info_header_ptr ^= null ()
	then if condition_info_header.default_restart
	     then do;
		     call get_message_string;
		     call iox_$put_chars (error_switch, mp, ml, (0));
		     return;
		end;

/**** There is no need to muck with switches, since sc_process_command_line_
      saves and restores. */

/* Make up error message. */

	string = "error: " || CI.condition_name;
	if sc_stat_$mc_is_on
	then call sys_log_ (SL_LOG_BEEP, "sc_signal_handler_: ^a", string);
	else call ioa_$ioa_switch (error_switch, "^a", string);

	if sc_stat_$Multics
	then call as_$dump (string);			/* Take nice dump. */

	call get_message_string;
	call iox_$put_chars (error_switch, mp, ml, (0));

/* The message is printed. Now try to reset the system control environment and bust out of here */

	call iox_$control (sc_stat_$master_iocb, "start", null, (0));
						/* Make sure we aren't missing a wakeup. */
	if sc_stat_$mc_is_on
	then call restart_mc_ttys_ ();		/* .. or set of wakeups */

	if sc_stat_$admin_sci_ptr ^= null ()
	then call ssu_$abort_line (sc_stat_$admin_sci_ptr, 0, "Execution aborted by error signal.");
	else go to sc_stat_$master_abort_label;		/* Return to console listener loop */

get_message_string:
     procedure;

	call condition_interpreter_ (addr (msg_area), mp, ml, 3, CI.mc_ptr, (CI.condition_name), CI.wc_ptr, CI.info_ptr)
	     ;
     end get_message_string;

%include condition_info_header;
%include condition_info;
	declare 1 CI		        aligned like condition_info;

%include iox_entries;

%include sc_stat_;

%include sc_subsystem_info_;

%include sys_log_constants;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   sc_signal_handler_: error: CONDITION_NAME

   S:	as (severity2)

   T:	$run

   M:	A CONDITION_NAME condition occurred while running an operator
	command.  An answering service dump has been taken to further
	describe the cause of the condition.

   A:	$notify_sa

   END MESSAGE DOCUMENTATION */

     end sc_signal_handler_;
