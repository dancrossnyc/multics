/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/*  format: style2,idind30,indcomtxt */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Name: sys_log_						       */
/*    This procedure is used by the Answering Service to report errors.      */
/* 							       */
/* There are two modes of operation:				       */
/*    command-mode, in which errors are reported on behalf of an operator    */
/*       command, on the terminal which issued the command		       */
/*       (sc_stat_$real_iocb), and/or logged in the admin log;	       */
/*    as-mode, in which errors are reported on one of the answering service  */
/*       severity I/O switches (severity1, severity2 or severity3), and/or   */
/*       logged in the as log.				       */
/*							       */
/* The severity parameter determines which I/O switch is used (in as-mode)   */
/* and how the error is presented, as follows:			       */
/*							       */
/* 		 as-mode					       */
/*    severity	I/O switch	logging/printing operation	       */
/*       0			log message, only		       */
/*       1	severity1		log & print message		       */
/*       2	severity2		log & print message with banner      */
/*       3	severity3		log & print message with banner,     */
/*				kill the system by returning to bce  */
/*							       */
/* Releases prior to MR11.0 allowed a negative severity value.  Now, the     */
/* absolute value of the severity parameter determines the action, as shown  */
/* above.							       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* as-mode Entrypoints:					       */
/*							       */
/*    call sys_log_ (severity, ioa_ctl, args);			       */
/*    call sys_log_$binary (severity, data_ptr, data_lth, data_class,	       */
/*		        ioa_ctl, args);			       */
/*    call sys_log_$error_log (severity, code, caller, ioa_ctl, args);       */
/*       Log caller's name, expanded error table code, ioa-formatted message */
/*       and binary data, according to parameters supplied with the	       */
/*       entrypoint.					       */
/*							       */
/* command-mode Entrypoints:					       */
/*							       */
/*    call sys_log_$command (severity, ioa_ctl, args);		       */
/*    call sys_log_$command_error (severity, code, caller, ioa_ctl, args);   */
/*       Log caller's name, expanded error table code, and ioa-formatted     */
/*       message, according to parameters supplied with the entrypoint.      */
/*							       */
/* general Entrypoint:					       */
/*							       */
/*    call sys_log_$general (info_ptr);				       */
/*       Log caller's name, expanded error table code, message and optional  */
/*       binary data in either as-mode or command-mode.  Options controlled  */
/*       by info structure pointed to by info_ptr.  Message data can	       */
/*       optionally come from a caller-supplied argument list.  See comments */
/*       for sl_info structure in sys_log_constants.incl.pl1.	       */
/*							       */
/* Entry: sys_log_$type_sv_zero				       */
/*							       */
/*    call sys_log_$type_sv_zero ();				       */
/*       Causes severity 0 messages to be logged and also printed on the     */
/*       console, even though messages of this severity calls only for       */
/*       logging of messages.					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

sys_log_:
     proc (Severity);

/****   THVV 11/70
      Modified October 1977 by T. Casey to add type_sv_zero entry point for debugging.
      Modified May 1978 by T. Casey to lengthen message buffer to 256 chars to avoid truncating long messages.
      Modified August 1982 by E. N. Kittlitz, at the insistence of S. Harris and A. Haggett of Calgary,
      to not use MC streams before the MC is enabled.
      Modified August 1983 by K. Loepere for call_bce.
      Rewritten 1984-10-31 BIM
      Modified 1985-01-15 by E. Swenson for sys_log_$binary */


/****^  HISTORY COMMENTS:
  1) change(86-08-01,Swenson), approve(87-05-25,MCR7680),
     audit(87-02-08,GDixon), install(87-08-04,MR12.1-1055):
     Modified to print messages on the terminal when running in system control
     test mode and no as log exists.
  2) change(87-02-08,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
      A) Fixed coding standard violations.
      B) Added back the facility to crash the system, if need be.
  3) change(87-05-04,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
      A) Fix sys_log_$error_code formatting problem.
  4) change(87-05-06,GDixon), approve(87-06-10,MCR7708),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
      A) Added sys_log_$general entrypoint.
                                                   END HISTORY COMMENTS */


/* Parameters */

	dcl     Severity		        fixed bin (17) parameter;
						/* First arg.  How bad things are. */
	dcl     Data_class		        char (10) varying parameter;
						/* Class of supplied data */
	dcl     Data_lth		        fixed bin (17) parameter;
						/* length of supplied data */
	dcl     Data_ptr		        ptr parameter;
						/* pointer to supplied data */
	dcl     Code		        fixed bin (35) parameter;
						/* Error code */
	dcl     Caller		        char (*) parameter;
						/* Caller name */
	dcl     Sl_info_ptr		        ptr parameter;
						/* pointer to sl_info structure for $general */

/* Automatic */

	dcl     arg_string		        char (500);
	dcl     arg_string_lth	        fixed bin(21);
	dcl     based_arg_ptr	        ptr;
	dcl     based_arg_len	        fixed bin(21);
	dcl     binary		        bit (1) aligned;
	dcl     code		        fixed bin (35);
	dcl     command		        bit (1) aligned;
	dcl     count		        fixed bin;
	dcl     data_ptr		        ptr;	/* pointer to binary data supplied */
	dcl     data_lth		        fixed bin (17);
						/* length of binary data supplied */
	dcl     data_class		        char (10) varying;
						/* class of binary data */
	dcl     (fmtx, argx)	        fixed bin;	/* general_rs args telling where format etc */
	dcl     ioa_ctl_string	        char (100) aligned;
	dcl     long		        char (100) aligned;
						/* error message */
	dcl     (masked_ev_calls_code, unmasked_ev_calls_code)
				        fixed bin (35);
	dcl     severity		        fixed bin;
	dcl     temp_line		        char (500) varying;

/* Based */

	dcl     based_caller	        char (based_arg_len) based (based_arg_ptr);
	dcl     based_class		        char (based_arg_len) based (based_arg_ptr);
	dcl     based_code		        fixed bin(35) based (based_arg_ptr);
	dcl     based_data_lth	        fixed bin(21) based (based_arg_ptr);
	dcl     based_data_ptr	        ptr based (based_arg_ptr);
	dcl     based_fixed_bin	        fixed bin based (based_arg_ptr);

/* Entries */

	dcl     convert_status_code_	        entry (fixed binary (35), character (8) aligned, character (100) aligned);
	dcl     cu_$arg_list_ptr	        entry returns (ptr);
	dcl     cu_$arg_count_rel	        entry (fixed bin, ptr, fixed bin(35));
	dcl     cu_$arg_ptr_rel	        entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr);
	dcl     date_time_$format	        entry (character (*), fixed binary (71), character (*), character (*))
				        returns (character (250) var);
	dcl     hcs_$block		        entry ();
	dcl     hphcs_$call_bce	        entry ();
	dcl     ioa_		        entry () options (variable);
	dcl     ioa_$general_rs	        entry (ptr, fixed bin, 
				        fixed bin, char (*),
				        fixed bin(21), bit (1) aligned,
				        bit (1) aligned);
	dcl     ioa_$general_rs_control_string
				        entry (ptr, char(*), fixed bin,
				        char(*), fixed bin(21),
				        bit(1) aligned, 
				        bit(1) aligned);
	dcl     ioa_$ioa_switch	        entry () options (variable);
	dcl     ioa_$rsnnl		        entry options (variable);
	dcl     iox_$control	        entry (ptr, char (*), ptr, fixed bin (35));
	dcl     ipc_$mask_ev_calls	        entry (fixed bin (35));
	dcl     ipc_$unmask_ev_calls	        entry (fixed bin (35));
	dcl     log_write_$data	        entry (ptr, fixed bin, char (*), ptr, fixed bin, char (10) var, ptr,
				        fixed bin (35));
	dcl     log_write_$message	        entry (pointer, fixed binary, character (*), pointer, fixed binary (35));
	dcl     phcs_$ring_0_message	        entry (char(*));
	dcl     signal_		        entry (char(*), ptr, ptr, ptr);
	dcl     ssu_$get_info_ptr	        entry (ptr) returns (ptr);

/* Conditions */ 

	dcl     cleanup		        condition;

/* Builtin */

	dcl     (abs, addr, clock, length, max, null, rtrim, size, substr)
				        builtin;

/* External */

          dcl     (error_table_$bad_arg,
	         error_table_$null_info_ptr,
	         error_table_$unimplemented_version,
	         error_table_$wrong_no_of_args)	fixed bin(35) ext static;

/* Static */

	dcl     type_sv0		        bit (1) aligned int static init (""b);
						/* print Severity zero messages for debugging */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


/* sys_log_: entry (Severity); */

	command = "0"b;
	binary = "0"b;
	go to no_error_common;

command:  entry (Severity);

	command = "1"b;
	binary = "0"b;

no_error_common:
	argx = 3;					/* set indices for loc of args */
	fmtx = 2;					/* and format */

	call ioa_$general_rs (cu_$arg_list_ptr (), fmtx, argx, arg_string,
	   arg_string_lth, "0"b, "0"b);
	temp_line = substr (arg_string, 1, arg_string_lth);
	go to join;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


binary:	entry (Severity, Data_ptr, Data_lth, Data_class);

	data_ptr = Data_ptr;			/* copy args */
	data_lth = Data_lth;			/* copy args */
	data_class = Data_class;			/* copy args */

	argx = 6;					/* location of the ioa args */
	fmtx = 5;					/* location of the ioa format string */

	command = "0"b;				/* regular non-command entrypoint */
	binary = "1"b;				/* we have binary data supplied */

	call ioa_$general_rs (cu_$arg_list_ptr (), fmtx, argx, arg_string,
	   arg_string_lth, "0"b, "0"b);
	temp_line =  substr(arg_string, 1, arg_string_lth);
	goto join;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


error_log:
	entry (Severity, Code, Caller);		/* like com_err_ for initializer */

	command = "0"b;
	binary = "0"b;
	go to error_common;

command_error:
	entry (Severity, Code, Caller);

	command = "1"b;
	binary = "0"b;
	go to error_common;

error_common:
	argx = 5;
	fmtx = 4;

	long = "";				/* blank reason */
	if Code ^= 0
	then /* convert user error code to string */
	     call convert_status_code_ (Code, "", long);	/* find explanation of errcode */
	call ioa_$general_rs (cu_$arg_list_ptr (), fmtx, argx, arg_string,
	     arg_string_lth, "0"b, "0"b);
	call ioa_$rsnnl ("^a: ^a ^a", temp_line, (0), Caller, long,
	     substr(arg_string,1,arg_string_lth));
	go to join;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

general:	entry (Sl_info_ptr);

	sli_ptr = Sl_info_ptr;
	if sli_ptr = null then do;
	   sys_log_error_info.info_string =
	      "Null pointer passed to sys_log_$general.";
	   sys_log_error_info.status_code = error_table_$null_info_ptr;
GEN_BAD_IN:  sys_log_error_info.length = size(sys_log_error_info);
	   sys_log_error_info.version = SYS_LOG_ERROR_INFO_version_1;
	   sys_log_error_info.action_flags = "0"b;
	   sys_log_error_info.action_flags.cant_restart = "1"b;
	   sys_log_error_info.sl_info_ptr = sli_ptr;
	   call signal_ (SYS_LOG_ERROR_name, null,
	      addr(sys_log_error_info), null);
	   return;
	   end;
	if sli.version ^= SL_INFO_version_1 then do;
	   sys_log_error_info.info_string =
	      "Structure passed to sys_log_$general has version " ||
	      sli.version || ", expected version " || SL_INFO_version_1 || ".";
	   sys_log_error_info.status_code = error_table_$unimplemented_version;
	   go to GEN_BAD_IN;
	   end;

	if sli.arg_list_ptr ^= null then do;
	   call cu_$arg_count_rel (count, sli.arg_list_ptr, 0);
	   if max (sli.loc.mode, sli.loc.severity, sli.loc.code, 
		 sli.loc.caller, sli.loc.data+1, sli.loc.class,
		 sli.loc.ioa_msg) > count then do;
	      sys_log_error_info.info_string =
	         "Structure input to sys_log_$general references args not in arg list.";
	      sys_log_error_info.status_code = error_table_$wrong_no_of_args;
	      go to GEN_BAD_IN;
	      end;
	   end;
	else if max (sli.loc.mode, sli.loc.severity, sli.loc.code,
		   sli.loc.caller, sli.loc.data, sli.loc.class,
		   sli.loc.ioa_msg) > 0 then do;
	   sys_log_error_info.info_string = 
	      "Structure input to sys_log_$general references args, but arg_list_ptr is null.";
	   sys_log_error_info.status_code = error_table_$bad_arg;
	   go to GEN_BAD_IN;
	   end;

	if sli.loc.code > 0 then do;		
	   call cu_$arg_ptr_rel (sli.loc.code,		
	      based_arg_ptr, 0, code, sli.arg_list_ptr);
	   if code = 0 then 
	      sli.code = based_code;
	   else
	      sli.code = -1;
	   end;
	else if sli.loc.code = SL_INFO_arg_not_given then
	   sli.code = 0;
	if sli.loc.code ^= SL_INFO_arg_not_given then 
	   if sli.code = 0 then return;		/*  0 -> no err  */
	if sli.code = 0 | sli.code = -1 then		/* -1 -> err, no */
	   long = "";				/*       code    */
	else 
	   call convert_status_code_ (sli.code, "", long);

	if sli.loc.mode > 0 then do;
	   call cu_$arg_ptr_rel (sli.loc.mode, based_arg_ptr,
	      0, 0, sli.arg_list_ptr);
	   sli.mode = based_fixed_bin;
	   end;
	else if sli.loc.mode = SL_INFO_arg_not_given then
	   sli.mode = SL_INFO_as_mode;
	command = sli.mode=SL_INFO_command_mode;

	if sli.loc.severity > 0 then do;
	   call cu_$arg_ptr_rel (sli.loc.severity, based_arg_ptr,
	      0, 0, sli.arg_list_ptr);
	   sli.severity = based_fixed_bin;
	   end;
	else if sli.loc.severity = SL_INFO_arg_not_given then
	   sli.severity = SL_LOG;
	severity = abs(sli.severity);

	if sli.loc.caller > 0 then do;
	   call cu_$arg_ptr_rel (sli.loc.caller, based_arg_ptr,
	      based_arg_len, 0, sli.arg_list_ptr);
	   sli.caller = based_caller;
	   end;
	else if sli.loc.caller = SL_INFO_arg_not_given then
	   sli.caller = "";

	if sli.loc.data > 0 then do;
	   call cu_$arg_ptr_rel (sli.loc.data, based_arg_ptr,
	      0, 0, sli.arg_list_ptr);
	   sli.data_ptr = based_data_ptr;
	   call cu_$arg_ptr_rel (sli.loc.data+1, based_arg_ptr,
	      0, 0, sli.arg_list_ptr);
	   sli.data_lth = based_data_lth;
	   end;
	if sli.loc.data = SL_INFO_arg_not_given then
	   binary = "0"b;
	else do;
	   data_ptr = sli.data_ptr;
	   data_lth = sli.data_lth;
	   binary = "1"b;
	   end;

	if sli.loc.class > 0 then do;
	   call cu_$arg_ptr_rel (sli.loc.class, based_arg_ptr,
	      based_arg_len, 0, sli.arg_list_ptr);
	   sli.class = based_class;
	   end;
	else if sli.loc.class = SL_INFO_arg_not_given then
	   sli.class = "";
	if binary then data_class = sli.class;

	if sli.loc.ioa_msg > 0 then do;
	   if sli.flags.ioa_msg_is_error_code then do;
	      call cu_$arg_ptr_rel (sli.loc.ioa_msg, based_arg_ptr, 0, 0,
	         sli.arg_list_ptr);
	      call convert_status_code_ (based_code, "", ioa_ctl_string);
	      if length(rtrim(ioa_ctl_string)) > 0 then 
	         call ioa_$general_rs_control_string (sli.arg_list_ptr,
		  rtrim(ioa_ctl_string), sli.loc.ioa_msg+1,
		  arg_string, arg_string_lth, "0"b, "0"b);
	      else arg_string_lth = 0;
	      end;
	   else
	      call ioa_$general_rs (sli.arg_list_ptr, sli.loc.ioa_msg,
	      sli.loc.ioa_msg+1, arg_string, arg_string_lth, "0"b, "0"b);
	   sli.ioa_msg = substr(arg_string, 1, arg_string_lth);
	   end;
	else if sli.loc.ioa_msg = SL_INFO_arg_not_given then
	   sli.ioa_msg = "";

	temp_line = "";
	if sli.loc.caller ^= SL_INFO_arg_not_given then do;
	   temp_line = temp_line || rtrim(sli.caller);
	   temp_line = temp_line || ": ";
	   end;
	if long ^= "" then do;
	   temp_line = temp_line || rtrim(long);
	   temp_line = temp_line || " ";
	   end;
	if sli.loc.ioa_msg ^= SL_INFO_arg_not_given then
	   temp_line = temp_line || sli.ioa_msg;
	go to join_general;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


join:
	severity = Severity;			/* copy Severity */
	severity = abs (severity);

join_general:
	masked_ev_calls_code, unmasked_ev_calls_code = -1;
	on cleanup
	     begin;
		if masked_ev_calls_code = 0 & unmasked_ev_calls_code ^= 0
		then call ipc_$unmask_ev_calls ((0));
	     end;
	call ipc_$mask_ev_calls (masked_ev_calls_code);

	if sc_stat_$test_mode & (sc_stat_$as_log_write_ptr = null ())
	then do;
		call ioa_ ("LOG: ^a", temp_line);
		goto RETURN;
	     end;

/**** First deposit in appropriate logs */

	if ^command
	then do;

		if ^binary
		then call log_write_$message (sc_stat_$as_log_write_ptr, severity, (temp_line), (null ()), code);
		else call log_write_$data (sc_stat_$as_log_write_ptr, severity, (temp_line), data_ptr, data_lth,
			data_class, (null ()), code);

		if severity > 3
		then severity = 3;
		if severity = 1 | type_sv0
		then call ioa_$ioa_switch (sc_stat_$sv1_iocb, "^[ ^4a   as   ^;^s^]^a", ^sc_stat_$mc_is_on,
			as_time (), temp_line);
		else if severity = 2
		then call ioa_$ioa_switch (sc_stat_$sv2_iocb, "^[^/********************^/ ^4a   as   ^;^s^]^a",
			^sc_stat_$mc_is_on, as_time (), temp_line);
		else if severity = 3
		then call ioa_$ioa_switch (sc_stat_$sv3_iocb, "^[^/********************^/ ^4a   as   ^]^a",
			^sc_stat_$mc_is_on, as_time (), temp_line);
	     end;
	else do;					/* treat as command output */
		call iox_$control (sc_stat_$admin_log_iocb, "flush_pending_output", null (), (0));
		call log_write_$message (sc_stat_$admin_log_write_ptr, severity, (temp_line), (null ()), code);

		sc_subsystem_info_ptr = ssu_$get_info_ptr (sc_stat_$admin_sci_ptr);
		if (severity > 0 | type_sv0) & sc_subsystem_info.real_iocb ^= null ()
						/* if null, logging will suffice */
		then call ioa_$ioa_switch (sc_subsystem_info.real_iocb, "^a", temp_line);
	     end;

	if severity > 2 then do;			/* should we kill system? */
	     if sc_stat_$mc_is_on then
	        call ioa_$ioa_switch (sc_stat_$sv3_iocb,
	        "^/sys_log_: KILLING ANSWERING SERVICE. DUMP INITIALIZER & REBOOT.");
	     if sc_stat_$test_mode then go to RETURN;
	     call phcs_$ring_0_message ((temp_line));
	     call phcs_$ring_0_message ("sys_log_: Returning to BCE. Dump Initializer and reboot.");
	     call hphcs_$call_bce;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* If we return here, it is because the operator has warned users to cleanup */
/* & logout.  The initializer is non-operational, so no logins, logouts, or  */
/* accounting updates will work. The initializer should block and stay       */
/* blocked, so users can run.					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	     do while ("1"b);
		call hcs_$block;			/* just as if we had logged out */
	     end;
	end;

RETURN:
	call ipc_$unmask_ev_calls (unmasked_ev_calls_code);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


type_sv_zero:
     entry;					/* to set switch to type sv zero messages for debugging */

	type_sv0 = ^type_sv0;			/* flip the switch, turning it off or on */
	call ioa_ ("sys_log_: sv zero typing turned ^[on^;off^].", type_sv0);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


as_time:
     procedure returns (char (4));

	return (date_time_$format ("^Hd^MH", clock (), "", ""));
     end as_time;


%include condition_info_header;
%include sc_subsystem_info_;
%include sc_stat_;
%include sys_log_error_info;
%include sys_log_constants;

	dcl	1 sli		aligned like sl_info based (sli_ptr);
	dcl	sli_ptr		ptr;

     end sys_log_;
