/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-01-09,Fawcett), approve(86-03-26,MCR7359),
     audit(86-09-05,Lippard), install(86-09-16,MR12.0-1159):
     Allow the MCA operator interface to be  either disabled (locked) or
     enabled (unlocked). Main part of code taken from bce_lock_mca.pl1
                                                   END HISTORY COMMENTS */


/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

lock_mca: proc;

dcl  Me				char (10);
dcl  P99				pic "99" based;
dcl  V1				char (4) static options (constant) init ("1.00");
dcl  MCA_LOW_NUM			fixed bin (17) static options (constant) init (0);
dcl  MCA_HIGH_NUM			fixed bin (17) static options (constant) init (31);
dcl  a_sci_ptr			ptr parameter;
dcl  arg_count			fixed bin;
dcl  arg				char (arg_len) based (arg_ptr);
dcl  arg_len			fixed bin (21);
dcl  arg_ptr			ptr;
dcl  args_expected			fixed bin;
dcl  code				fixed bin (35);
dcl  entry_var			entry variable;
dcl  lock_mca			bit (1);
dcl  mca_number			fixed bin (35);
dcl  mca_to_unlock			char (4);
dcl  sci_ptr			ptr;
dcl  standalone_invocation		bit (1);

dcl  com_err_			entry () options (variable);
dcl  cv_dec_check_			entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  hphcs_$ocdcm_reconfigure		entry (char (4), fixed bin, fixed bin (35));
dcl  ssu_$abort_line		entry () options (variable);
dcl  ssu_$print_message		entry () options (variable);
dcl  ssu_$arg_count			entry (ptr, fixed bin);
dcl  ssu_$arg_ptr			entry (ptr, fixed bin, ptr, fixed bin (21));
dcl  ssu_$destroy_invocation		entry (ptr);
dcl  ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));


dcl  (convert, null)		builtin;
dcl  error_table_$wrong_no_of_args	fixed bin (35) ext static;
dcl  error_table_$not_privileged	fixed bin (35) ext static;


dcl  MAX_MCA			fixed bin (17) init (31) internal static options (constant);
dcl  MIN_MCA			fixed bin (17) init (0) internal static options (constant);


dcl  cleanup			condition;
dcl  linkage_error			condition;
%page;
	Me = "lock_mca";
	lock_mca = "1"b;
	standalone_invocation = "0"b;
	args_expected = 0;
	sci_ptr = null;
	goto common_standalone;

lock_mca$sc_lock_mca:
     entry (a_sci_ptr);

	Me = "lock_mca";
	standalone_invocation = "0"b;
	lock_mca = "1"b;
	args_expected = 0;
	sci_ptr = a_sci_ptr;
	goto join;

lock_mca$unlock_mca:
     entry;

	Me = "unlock_mca";
	standalone_invocation = "0"b;
	lock_mca = "0"b;
	sci_ptr = null;
	args_expected = 1;

common_standalone:

	on cleanup begin;
	     if sci_ptr ^= null then call ssu_$destroy_invocation (sci_ptr);
	end;
	call ssu_$standalone_invocation (sci_ptr, Me, V1, null (), abort_entry, code);
	if code ^= 0 then do;
	     call com_err_ (code, Me, "Could not create ssu_ invocation.");
	     goto DONE;
	end;
	standalone_invocation = "1"b;
	on linkage_error
	     call ssu_$abort_line (sci_ptr, error_table_$not_privileged, "^/Access to hphcs_ gate is required.");

	entry_var = hphcs_$ocdcm_reconfigure;
	revert linkage_error;

	goto join;

lock_mca$sc_unlock_mca:
     entry (a_sci_ptr);

	Me = "unlock_mca";
	standalone_invocation = "0"b;
	lock_mca = "0"b;
	args_expected = 1;
	sci_ptr = a_sci_ptr;
join:

	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count ^= args_expected then do;
	     if lock_mca then call ssu_$abort_line (sci_ptr, error_table_$wrong_no_of_args, "This command takes NO arguments.^/Usage: lock_mca");
	     else call ssu_$abort_line (sci_ptr, error_table_$wrong_no_of_args, "This command requires one argument.^/Usage: unlock_mca MCA_NUMBER");
	end;

	if lock_mca then do;
	     call hphcs_$ocdcm_reconfigure ("", LOCK_MCA_INPUT, code);
	     call ssu_$print_message (sci_ptr, code, "MCA interface^[ NOT^] locked.", (code ^= 0));
	     goto DONE;
	end;
	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_len);
	mca_number = cv_dec_check_ (arg, code);
	if code ^= 0 | mca_number < MCA_LOW_NUM | mca_number > MCA_HIGH_NUM then
	     call ssu_$abort_line (sci_ptr, 0, "Illegal MCA number. ^[^a is not a decimal number.^] Range is ^d - ^d.", (code ^= 0), arg, MIN_MCA, MAX_MCA);

	mca_to_unlock = "M_" || convert (P99, mca_number);
	call hphcs_$ocdcm_reconfigure (mca_to_unlock, UNLOCK_MCA_INPUT, code);
	if code = 0 then
	     call ssu_$print_message (sci_ptr, code, "MCA(^a) interface unlocked.",
		convert (P99, mca_number));
	else call ssu_$abort_line (sci_ptr, code, "MCA(^a) interface NOT unlocked.",
		convert (P99, mca_number));

DONE:
	if standalone_invocation then
	     call ssu_$destroy_invocation (sci_ptr);
	return;


abort_entry:
     proc;

	goto DONE;

     end abort_entry;
%page; %include sc_subsystem_info_;
%page; %include opc_reconfig_options;
     end lock_mca;
