/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* format: style2,idind30 */

/**** sc_signal_io_handler_
   Handler for signal_io_ in the system control environment.
   This program performs and logs the I/O requested via the signal.
*/

/**** Written 1984-11-01 BIM */
/**** Modified 1985-04-01, E. Swenson: add NL to "(printer masked)" entries. */


/****^  HISTORY COMMENTS:
  1) change(87-02-06,GDixon), approve(87-05-25,MCR7680),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Correct coding standards violations.
                                                   END HISTORY COMMENTS */


sc_signal_io_handler_:
     procedure;

	declare 1 CI		        aligned like condition_info;
	declare code		        fixed bin (35);
	declare real_iocb		        pointer;

	declare (addr, null)	        builtin;

	declare find_condition_info_	        entry (pointer, pointer, fixed binary (35));
	declare ioa_$ioa_switch	        entry () options (variable);
	declare ioa_$ioa_switch_nnl	        entry () options (variable);
	declare ssu_$get_info_ptr	        entry (ptr) returns (ptr);

	declare error_table_$io_no_permission fixed bin (35) ext static;


	CI.version = condition_info_version_1;
	call find_condition_info_ (null (), addr (CI), code);
	if code ^= 0
	then return;
	if sc_stat_$admin_sci_ptr = null ()
	then return;
	sc_subsystem_info_ptr = ssu_$get_info_ptr (sc_stat_$admin_sci_ptr);
	real_iocb = sc_subsystem_info.real_iocb;
	if real_iocb = null ()
	then return;

	signal_io_info_ptr = CI.info_ptr;

	if signal_io_info.operation = SGI_OP_GET_LINE
	then call GET_LINE;
	else if signal_io_info.operation = SGI_OP_GET_CHARS
	then call GET_CHARS;
	else if signal_io_info.operation = SGI_OP_PUT_CHARS
	then call PUT_CHARS;
	else if signal_io_info.operation = SGI_OP_POSITION
	then call POSITION;
	else if signal_io_info.operation = SGI_OP_CONTROL
	then call CONTROL;
	else if signal_io_info.operation = SGI_OP_MODES
	then call MODES;

	return;					/* If we get here, then we needn't unwind */

%page;

GET_LINE:
     procedure;


	declare returned_string	        char (signal_io_info.returned_data_length)
				        based (signal_io_info.data_ptr);

	call ioa_$ioa_switch_nnl (sc_stat_$admin_log_iocb, "^/");
						/* in case of prompt */
	call iox_$get_line (real_iocb, signal_io_info.data_ptr, signal_io_info.data_length,
	     signal_io_info.returned_data_length, signal_io_info.returned_error_code);
	if signal_io_info.returned_error_code = 0 & signal_io_info.returned_data_length > 0
	then if ^sc_subsystem_info.printer_offed
	     then call ioa_$ioa_switch_nnl (sc_stat_$admin_log_iocb, "input: ^a", returned_string);
	     else call ioa_$ioa_switch (sc_stat_$admin_log_iocb, "input: (printer masked)");
	call check_hangup;
	return;
     end GET_LINE;

GET_CHARS:
     procedure;
	declare returned_string	        char (signal_io_info.returned_data_length)
				        based (signal_io_info.data_ptr);

	call iox_$get_chars (real_iocb, signal_io_info.data_ptr, signal_io_info.data_length,
	     signal_io_info.returned_data_length, signal_io_info.returned_error_code);
	if signal_io_info.returned_error_code = 0 & signal_io_info.returned_data_length > 0
	then if ^sc_subsystem_info.printer_offed
	     then call ioa_$ioa_switch_nnl (sc_stat_$admin_log_iocb, "input: ^a", returned_string);
	     else call ioa_$ioa_switch (sc_stat_$admin_log_iocb, "input: (printer masked)");
	call check_hangup;
	return;
     end GET_CHARS;

POSITION:
     procedure;
	call iox_$position (real_iocb, signal_io_info.position_type, (signal_io_info.position_amount),
	     signal_io_info.returned_error_code);
	call check_hangup;
	return;
     end POSITION;

MODES:
     procedure;

	call iox_$modes (real_iocb, signal_io_new_modes, signal_io_old_modes, signal_io_info.returned_error_code);
	call check_hangup;
	return;
     end MODES;

PUT_CHARS:
     procedure;

	call iox_$put_chars (real_iocb, signal_io_info.data_ptr, signal_io_info.data_length,
	     signal_io_info.returned_error_code);
	call ioa_$ioa_switch_nnl (sc_stat_$admin_log_iocb, "^a", signal_io_io_buffer);
	call check_hangup;
	return;
     end PUT_CHARS;

CONTROL:
     procedure;

	if signal_io_order_name = "printer_off"
	then sc_subsystem_info.printer_offed = "1"b;
	if signal_io_order_name = "printer_on"
	then sc_subsystem_info.printer_offed = "0"b;

	call iox_$control (real_iocb, signal_io_order_name, signal_io_info.control_order_info_ptr,
	     signal_io_info.returned_error_code);
	call check_hangup;
	return;
     end CONTROL;

check_hangup:
     procedure;

	if signal_io_info.returned_error_code = error_table_$io_no_permission
	then call sc_subsystem_info.hangup_entry (sc_stat_$admin_sci_ptr);
	return;
     end check_hangup;

%include condition_info;

%include condition_info_header;

%include iocb;

%include iox_entries;

%include signal_io_info;

%include sc_subsystem_info_;

%include sc_stat_;

     end sc_signal_io_handler_;
