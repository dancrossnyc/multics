/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
log_segment_:
     procedure ();

/* *	LOG_SEGMENT_
   *
   *	This procedure is the lowest level of the new logging mechanism.
   *	It is responsible for the creation of messages within a single
   *	log segment. If the segment becomes full, or is damaged, log_segment_
   *	returns an appropriate error code, and its caller must take appropriate
   *	action.  This procedure can be called from any ring, in any environment.
   *	This is the only procedure that can intepret the allocation information
   *	in the log segment header; other procedures must call this one to
   *	create messages, take the segment in and out of service, etc.
   *
   *	Modification history:
   *	1984-05-04, W. Olin Sibert, after the style of Benson's log_prim_
   *	1984-12-21, WOS: Changed to make data class 16 chars as it should be
   */

declare	P_log_segment_ptr pointer parameter;
declare	P_text_lth fixed bin parameter;
declare	P_data_lth fixed bin parameter;
declare	P_data_class char (16) varying parameter;
declare	P_message_number fixed bin (35) parameter;
declare	P_last_offset fixed bin (18) parameter;
declare	P_log_message_ptr pointer parameter;
declare	P_service_bit bit (1) aligned parameter;
declare	P_code fixed bin (35) parameter;

declare	message_size fixed bin (18);
declare	message_number fixed bin (35);

declare 1 sequence_info aligned automatic,
	2 pad bit (17) unaligned,
	2 number fixed bin (35) unaligned,		/* NOTE: This value spans a word boundary */
	2 in_service bit (1) unaligned,
	2 words_used fixed bin (18) unsigned unaligned;

declare	error_table_$action_not_performed fixed bin (35) external static;
declare	error_table_$bigarg fixed bin (35) external static;
declare	error_table_$log_out_of_service fixed bin (35) external static;
declare	error_table_$log_segment_damaged fixed bin (35) external static;
declare	error_table_$log_segment_full fixed bin (35) external static;

declare   log_data_$new_message_flag bit (36) aligned external static;
declare   log_data_$complete_message_flag bit (36) aligned external static;

declare  (addr, length, null, size, stacq, unspec, wordno) builtin;

/* */

MAIN_RETURN:
	return;					/* Only exit from this subroutine */



finished:
     procedure (P_return_code);

declare	P_return_code fixed bin (35) parameter;


	P_code = P_return_code;

	goto MAIN_RETURN;

	end finished;

/* */

log_segment_$create_message_number:
     entry (P_log_segment_ptr, P_text_lth, P_data_lth, P_data_class, P_message_number, P_log_message_ptr, P_code);

/* This entry reserves space for a message in the log segment, assigns
   the next sequence number to it, and returns a pointer to the message
   which will be filled in by the caller. It is only used for things
   like copying selected messages from one log segment to another. */

	message_number = P_message_number;
	goto CREATE_MESSAGE_COMMON;


log_segment_$create_message:
     entry (P_log_segment_ptr, P_text_lth, P_data_lth, P_data_class, P_log_message_ptr, P_code);

/* This entry reserves space for a message in the log segment, assigns
   the next sequence number to it, and returns a pointer to the message
   which will be filled in by the caller. This is the usual way of
   creating log messages. */

	message_number = -1;			/* We assign it ourselves */


CREATE_MESSAGE_COMMON:
	log_message_text_lth = P_text_lth;
	log_message_data_class_lth = length (P_data_class);
	log_message_data_lth = P_data_lth;
	P_log_message_ptr = null ();

	call copy_log_segment_ptr ();			/* Copy parameter and check header */

	message_size = size (log_message);

	if (message_size > log_segment.max_size) then	/* Too big ever to be allocated. This is a fatal */
	     call finished (error_table_$bigarg);	/* error; our caller shouldn't ever do this. */

	do while (^allocate_message ());		/* Make space for the message and assign its number; this */
	     end;					/* returns with log_message_ptr and message_number set */

          unspec (log_message.header) = ""b;                /* Initialize it (header only, because of refer extents) */
	log_message.text_lth = log_message_text_lth;  /* Copy in vital information */

	if (log_message_data_lth ^= 0) then do;
	     log_message.data_lth = log_message_data_lth;  /* These values must not be changed */
	     log_message.data_class_lth = log_message_data_class_lth;
	     log_message.data_class = P_data_class;
	     end;

	log_message.sequence = message_number;
          log_message.sentinel = log_data_$new_message_flag; /* Mark it as incomplete, but with correct size info */

	P_log_message_ptr = log_message_ptr;	/* All done */
	call finished (0);

/* */

log_segment_$finish_message:
     entry (P_log_segment_ptr, P_log_message_ptr, P_code);

/* This entry just pops in the appropriate sentinel for a completed message
   and updates discretionary values in the header */

	call copy_log_segment_ptr_no_check ();		/* It's OK to FINISH a message in an out-of-service log */

	log_message_ptr = P_log_message_ptr;

          if (log_message.sentinel ^= log_data_$new_message_flag) then
               call finished (error_table_$log_segment_damaged);
          if (log_message.time = 0) then
               call finished (error_table_$log_segment_damaged);

	call update_header_limits ();

          log_message.sentinel = log_data_$complete_message_flag;

	call finished (0);

/* */

log_segment_$initialize_sequence:
     entry (P_log_segment_ptr, P_message_number, P_code);

/* This is called only by log_initialize_, which has not finished setting up
   the log header at this point, so we can't call copy_log_segment_ptr. */


	log_segment_ptr = P_log_segment_ptr;

	unspec (sequence_info) = ""b;
	sequence_info.number = P_message_number;
	unspec (log_segment.alloc_info) = unspec (sequence_info);

	call finished (0);



log_segment_$last_message_info:
     entry (P_log_segment_ptr, P_message_number, P_last_offset, P_code);

/* This is used primarily by log_position_, to find out what's really 
   in the log before it goes to validate messages. */


	call copy_log_segment_ptr_no_check ();

	unspec (sequence_info) = unspec (log_segment.alloc_info);
	P_message_number = sequence_info.number;
	P_last_offset = wordno (addr (log_segment.data (sequence_info.words_used)));

	call finished (0);


/* */

log_segment_$place_in_service:
     entry (P_log_segment_ptr, P_code);

	call copy_log_segment_ptr_no_check ();
	call set_service_bit ("1"b);

	call finished (0);



log_segment_$remove_from_service:
     entry (P_log_segment_ptr, P_code);

	call copy_log_segment_ptr_no_check ();
	call set_service_bit ("0"b);

	call finished (0);



log_segment_$get_service_bit:
     entry (P_log_segment_ptr, P_service_bit, P_code);

	call copy_log_segment_ptr_no_check ();

	unspec (sequence_info) = unspec (log_segment.alloc_info);

	P_service_bit = sequence_info.in_service;

	call finished (0);

/* */

/* *	The procedure on the next page performs the complicated STACQ hack
   *	for assigning storage. Basically, the idea is to assign storage AND
   *	increment the sequence number in one simple operation. This is done
   *	by having a single word that is shared: 18 bits for the low end of
   *	the sequence number, and 18 bits for the number of words used in the
   *	data area. The upper 18 bits of the fixed bin (35) sequence number
   *	are in the previous word.  See the declaration of sequence_info, at
   *	the front, for details.
   *
   *	The sequence_info in the log header always contains the last sequence
   *	number already used, and the number of words already used. The number
   *	of words already used is, of course, the offset (from the beginning of
   *	the data area) of the next word to be used; the sequence number is the
   *	sequence number of the previous message.
   *
   *	This procedure works by picking up the current contents of the two-word
   *	alloc_info structure in the log header, updating it to include the new
   *	message number and the new number of words used, and trying to STACQ the
   *	second word back into the header. Only the second word is of interest for
   *	this operation, because it is the only one that is modified except when
   *	the sequence numbers cross a 256K boundary. When that happens, the first
   *	word must be updated as well. This happens so rarely that there cannot be
   *	a mis-sequencing, since the only time that word is updated is when it is
   *	actually being changed.
   *
   *	This strategy *could* fail for the create_message_number entrypoint,
   *	in which our caller supplies the new sequence number, but even that is
   *	very unlikely, and, in any case, that entrypoint should only be used by
   *	a process that is sure it is the only writer to the log segment in
   *	question; this is true for the applications where it is used, such as
   *	copying syserr messages from one place to another and trimming and
   *	consolidating log segments.
   *
   *	The strategy used here uses four temporary copies of the two-word
   *	alloc_info structure, two each in two different formats: one format for
   *	doing the arithmetic, the other for doing the STACQ. This is done for
   *	code clarity; because the temporaries can be manipulated with LDAQ/STAQ,
   *	this scheme is as efficient as using based overlays.
   */

/* */

allocate_message:
     procedure () returns (bit (1) aligned);

declare	temp fixed bin (71);			/* Forces doubleword alignment for the four temp */
						/* values, so they can be unspec'd with ldaq/staq */
declare 1 old_sequence_info aligned like sequence_info automatic;
declare 1 new_sequence_info aligned like sequence_info automatic;
declare 1 old_alloc_info aligned like log_segment_header.alloc_info automatic;
declare 1 new_alloc_info aligned like log_segment_header.alloc_info automatic;


	unspec (old_sequence_info) = unspec (log_segment.alloc_info);	/* Get the current values */
	unspec (new_sequence_info) = unspec (old_sequence_info);	/* Make a copy which will be incremented */

	if ((old_sequence_info.words_used + message_size) > log_segment.max_size) then
	     call finished (error_table_$log_segment_full);    /* No room left. This check must be made each time through */

	new_sequence_info.words_used = new_sequence_info.words_used + message_size; /* Reserve space */

	if (message_number < 0) then			/* We assign (increment) this one ourselves */
	     new_sequence_info.number = new_sequence_info.number + 1;
	else new_sequence_info.number = message_number;	/* Otherwise, use the caller's idea */

	unspec (old_alloc_info) = unspec (old_sequence_info); /* Copy back into format used for STACQ */
	unspec (new_alloc_info) = unspec (new_sequence_info);

	if ^stacq (log_segment.alloc_info.word_2, new_alloc_info.word_2, old_alloc_info.word_2)
	     then return ("0"b);			/* Allocation failed, make our caller retry */

	if (old_alloc_info.word_1 ^= new_alloc_info.word_1) then	/* Update first word only if it changes, */
	     log_segment.alloc_info.word_1 = new_alloc_info.word_1;	/* thus avoiding sequencing race */

	log_message_ptr = addr (log_segment.data (1 + old_sequence_info.words_used));
	if (message_number < 0) then			/* Tell our caller where it is, and what  */
	     message_number = new_sequence_info.number;	/* its number is, if he doesn't know already */

	return ("1"b);

	end allocate_message;

/* */

update_header_limits:
     procedure ();

declare	new_time fixed bin (71);
declare	new_sequence fixed bin (35);
declare	test_time fixed bin (71);
declare	test_sequence fixed bin (35);
declare	replaced bit (1) aligned;


	new_time = log_message.time;		/* Copy these for efficiency */
	new_sequence = log_message.sequence;	/* and to get them properly aligned */

	replaced = "0"b;				/* IF (first_time = 0) then SET first_time */
	do while (^replaced);			/* IF (new_time < first_time) then SET first_time */
	     test_time = log_segment.first_time;
	     if (test_time = 0) then
		call replace_time (log_segment.first_time);
	     else if (new_time < test_time) then
		call replace_time (log_segment.first_time);
	     else replaced = "1"b;
	     end;

	replaced = "0"b;				/* IF (new_time > last_time) then SET last_time */
	do while (^replaced);			/* Also catches IF (last_time = 0) automatically */
	     test_time = log_segment.last_time;
	     if (new_time > test_time) then
		call replace_time (log_segment.last_time);
	     else replaced = "1"b;
	     end;

	replaced = "0"b;				/* IF (first_sequence = 0) then SET first_sequence */
	do while (^replaced);			/* IF (new_sequence < first_sequence) then SET first_sequence */
	     test_sequence = log_segment.first_sequence;
	     if (test_sequence = 0) then
		call replace_sequence (log_segment.first_sequence);
	     else if (new_sequence < test_sequence) then
		call replace_sequence (log_segment.first_sequence);
	     else replaced = "1"b;
	     end;

	replaced = "0"b;				/* IF (new_sequence > last_sequence) then SET last_sequence */
	do while (^replaced);			/* Also catches IF (last_sequence = 0) automatically */
	     test_sequence = log_segment.last_sequence;
	     if (new_sequence > test_sequence) then
		call replace_sequence (log_segment.last_sequence);
	     else replaced = "1"b;
	     end;

	return;

/* */

/* *	This procedure is an attempt at a two-word STACQ. It cannot always
   *	work, but it should usually succeed, for extremely large values of
   *	usually.
   *
   *	The window is only ten microseconds long, or thereabouts, and it can
   *	onle be exploited every 20 hours or so, as the upper word of the clock
   *	is turning over. So, in order for this to fail, there would have to
   *	be two processes, less than ten microseconds apart, attempting to
   *	update the header of the log segment.
   *
   *	While this, in itself, is not terribly unlikely (occurring, perhaps,
   *	one out of every 10,000 update attempts), the failure will only occur
   *	if this already unlikely circumstance happens to fall within the
   *	once-a-day window, itself representing a roughly one in 6,000,000,000
   *	chance. So, we can, with considerable justification, dismiss this as a
   *	vanishingly small possibility. And, even if it does happen, the damage
   *	will very likely be benign.  */

replace_time:
     procedure (P_time);

declare	P_time fixed bin (71) parameter;

declare	time_words_ptr pointer;
declare 1 time_words aligned based (time_words_ptr),
	2 word_1 bit (36) aligned,
	2 word_2 bit (36) aligned;

declare 1 test_words aligned like time_words automatic;
declare 1 new_words aligned like time_words automatic;


	unspec (test_words) = unspec (test_time);
	unspec (new_words) = unspec (new_time);
	time_words_ptr = addr (P_time);

	replaced = stacq (time_words.word_2, new_words.word_2, test_words.word_2);

	if ^replaced then return;

	if (test_words.word_1 ^= new_words.word_1) then	/* If the upper word changed, too, just set it */
	     time_words.word_1 = new_words.word_1;	/* and hope for the best. */

	return;
	end replace_time;

/* */

/* This is much simpler, since it replaces only one word at a time. */

replace_sequence:
     procedure (P_sequence);

declare	P_sequence fixed bin (35) parameter;

declare	number_word_ptr pointer;
declare	number_word bit (36) aligned based (number_word_ptr);
declare	test_word bit (36) aligned;
declare	new_word bit (36) aligned;


	unspec (test_word) = unspec (test_sequence);
	unspec (new_word) = unspec (new_sequence);
	number_word_ptr = addr (P_sequence);

	replaced = stacq (number_word, new_word, test_word);

	return;
	end replace_sequence;

	end update_header_limits;

/* */

set_service_bit:
     procedure (P_bit);

declare	P_bit bit (1) aligned parameter;

declare	temp fixed bin (71);			/* Forces doubleword alignment for the four temp */
						/* values, so they can be unspec'd with ldaq/staq */
declare 1 old_sequence_info aligned like sequence_info automatic;
declare 1 new_sequence_info aligned like sequence_info automatic;
declare 1 old_alloc_info aligned like log_segment_header.alloc_info automatic;
declare 1 new_alloc_info aligned like log_segment_header.alloc_info automatic;

/* This has to do similar things to the allocate_message procedure (see the
   comment there for details. However, since it never changes the upper word,
   and doesn't care about running out of space, its processing loop is much
   simpler. It never returns normally, but always exits by calling "finished",
   either indicating success (meaning that it was this process, and no other,
   that changed the state of the service bit, or returning action_not_performed
   indicating that someone else did it. */


	do while ("1"b);				/* Keep trying until we succeed */
	     unspec (old_sequence_info) = unspec (log_segment.alloc_info);
	     unspec (new_sequence_info) = unspec (old_sequence_info);

	     if (P_bit = old_sequence_info.in_service) then
		call finished (error_table_$action_not_performed);

	     new_sequence_info.in_service = P_bit;
	     unspec (old_alloc_info) = unspec (old_sequence_info);
	     unspec (new_alloc_info) = unspec (new_sequence_info);

	     if stacq (log_segment.alloc_info.word_2, new_alloc_info.word_2, old_alloc_info.word_2) then
		return;				/* Return only when successful */
	     end;

	end set_service_bit;

/* */

copy_log_segment_ptr:
     procedure ();

	log_segment_ptr = P_log_segment_ptr;
	log_message_ptr = null ();

	if (log_segment.version ^= LOG_SEGMENT_VERSION_1) then call finished (error_table_$log_segment_damaged);

	unspec (sequence_info) = unspec (log_segment.alloc_info);
	if ^sequence_info.in_service then call finished (error_table_$log_out_of_service);

	return;
	end copy_log_segment_ptr;



copy_log_segment_ptr_no_check:
     procedure ();

/* As above, but doesn't check in-service flag */


	log_segment_ptr = P_log_segment_ptr;
	log_message_ptr = null ();

	if (log_segment.version ^= LOG_SEGMENT_VERSION_1) then call finished (error_table_$log_segment_damaged);

	return;
	end copy_log_segment_ptr_no_check;

%page; %include log_segment;
%page; %include log_message;

	end log_segment_;
