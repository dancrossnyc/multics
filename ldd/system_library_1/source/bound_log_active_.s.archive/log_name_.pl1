/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
log_name_:
     procedure ();

/* *	LOG_NAME_
   *
   *	This procedure deals with log segment names and the date/time suffix.
   *	The log_name_$name entrypoint, given a clock reading and a name,
   *	returns the name with the appropriate suffix.  The log_name_$time
   *	entrypoint, given a suffixed name, returns the time stamp by converting
   *	it back from GMT. These names have a fixed format, and all the log_read_
   *	code depends on that format.
   *
   *	Modification history:
   *	84-06-01, W. Olin Sibert: Initial coding
   *	84-10-16, WOS: Added log_name_$starname
   *	84-10-30, WOS: Converted to use date_time_$format
   */

declare	P_ename char (*) parameter;
declare	P_time fixed bin (71) parameter;

declare	code fixed bin (35);
declare	name_lth fixed bin;
declare	return_str char (32);

declare 1 suffix_rep	unaligned automatic,
	2 period_1	char (1),
	2 yc		pic "9999",
	2 my		pic "99",
	2 dm		pic "99",
	2 period_2	char (1),
	2 Hd		pic "99",
	2 MH		pic "99",
	2 SM		pic "99";

declare 1 suffix_time	aligned like time_value automatic;
declare	suffix_clock fixed bin (71);

declare	error_table_$bigarg fixed bin (35) external static;
declare	error_table_$improper_data_format fixed bin (35) external static;
declare	error_table_$smallarg fixed bin (35) external static;

declare	date_time_$format entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) varying);
declare	date_time_$to_clock entry (pointer, fixed bin (71), fixed bin (35));
declare	sub_err_ entry options (variable);

declare	WHOAMI char (32) internal static options (constant) init ("log_name_");
declare	PERIOD char (1) internal static options (constant) init (".");
declare	GMT char (3) internal static options (constant) init ("gmt");

declare	conversion condition;

declare  (addr, length, null, rtrim, string, substr, unspec) builtin;

/* */

log_name_$name:
     entry (P_ename, P_time) returns (char (32));

	call check_ename ();

	substr (return_str, 1, name_lth) = substr (P_ename, 1, name_lth);
	substr (return_str, name_lth + 1) = date_time_$format (".^9999yc^my^dm.^Hd^MH^SM", P_time, GMT, "");
	return (return_str);



log_name_$starname:
     entry (P_ename) returns (char (32));

	call check_ename ();

	return_str = substr (P_ename, 1, name_lth) || ".????????.??????";
	return (return_str);

/* */

log_name_$time:
     entry (P_ename) returns (fixed bin (71));

	name_lth = length (rtrim (P_ename));
	code = error_table_$improper_data_format;	/* For sub_err_ calls */
	if (name_lth <= length (string (suffix_rep))) then goto INVALID_SUFFIX;

	string (suffix_rep) = substr (P_ename, 1 + name_lth - length (string (suffix_rep)));

	if ((suffix_rep.period_1) ^= PERIOD) then goto INVALID_SUFFIX;
	if ((suffix_rep.period_2) ^= PERIOD) then goto INVALID_SUFFIX;

	on condition (conversion) goto INVALID_SUFFIX;

	unspec (suffix_time) = ""b;
	suffix_time.version = Vtime_value_3;
	suffix_time.za = GMT;

	suffix_time.yc = suffix_rep.yc;		/* Convert the character fields for consumption */
	suffix_time.my = suffix_rep.my;		/* by date_time_$to_clock. */
	suffix_time.dm = suffix_rep.dm;
	suffix_time.Hd = suffix_rep.Hd;
	suffix_time.MH = suffix_rep.MH;
	suffix_time.SM = suffix_rep.SM;

	call date_time_$to_clock (addr (suffix_time), suffix_clock, code);

	if (code ^= 0) then do;
INVALID_SUFFIX:
	     call sub_err_ (code, WHOAMI, ACTION_CANT_RESTART, null (), "",
		"Cannot convert suffix of ""^a"" to time value.", P_ename);
	     end;

	return (suffix_clock);

/* */

check_ename:
     procedure ();

	name_lth = length (rtrim (P_ename));
	if ((name_lth + length (string (suffix_rep))) > 32) then
	     code = error_table_$bigarg;
	else if (name_lth = 0) then
	     code = error_table_$smallarg;
	else return;

	call sub_err_ (code, WHOAMI, ACTION_CANT_RESTART, null (), "",
	     "Cannot add YYYYMMDD.HHMMSS suffix to ""^a"".", P_ename);

	end check_ename;

%page; %include sub_err_flags;
%page; %include time_value;

	end log_name_;
