/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* The following entry is called in order to allow non-hardcore procedures
   to unlock a lock if it was originally locked by a process that no longer
   exists. If  the process associated with the lock id in the lock no longer
   exists the lock is set to the lock id of the calling process.

   Originally coded by R. J. Feiertag on March 9, 1971
   Modified by P. M. Haber on June 15,1971
   Modified by R. J. Feiertag on November 3, 1971 to set a bad lock to caller lock id
   Modified by S.Webber June, 1973 to change locking strategy to use stacq function */

try_to_unlock_lock: proc (a_lock_ptr, a_code);

dcl  a_lock_ptr ptr,				/* pointer to lock that is to be unlocked */
     a_code fixed bin,				/* returned status code */
     lock_ptr ptr,					/* internal copy of lock pointer */
     entrysw fixed bin,				/* indicates which entry has been invoked */
     lock bit (36) aligned based (lock_ptr),		/* lock to be unlocked */
     test_lock bit (36) aligned,			/* copy to make sure lock id is not changed while search is on */
     i fixed bin;					/* misc. index */

dcl (addr, addrel) builtin;

dcl  tc_data$apt_entry_size ext fixed bin,		/* length of an APT entry */
     tc_data$apt_size ext fixed bin,			/* number of entries in APT */
     tc_data$apt ext,				/* the APT */
     pds$process_id ext bit (36) aligned,		/* this process's id */
     pds$apt_ptr ptr ext;				/* points to process's APT entry */

dcl  stacq entry (ptr, bit (36) aligned, bit (36) aligned) returns (bit (1) aligned);

%include apte;
/*  */
	lock_ptr = a_lock_ptr;			/* copy pointer to lock into ring 0 */
	entrysw = 0;				/* this is unlocking entry */
	goto check;				/* join common code */

/* The following entry is called in order to verify that a lock is locked by an existing
   process. No attempt is made to unlock the lock. The status codes returned are:

   1 - the lock was validly locked
   2 - the lock was not locked
   3 - the lock was not validly locked
   */

check_lock: entry (a_lock_ptr, a_code);

	lock_ptr = a_lock_ptr;			/* copy the lock pointer into ring 0 */
	entrysw = 1;				/* this is check only entry */

check:						/* common code */
	test_lock = lock;				/* make copy of lock id */
	if test_lock = ""b then do;			/* lock is not  locked */
	     a_code = 2;				/* return proper status code */
	     return;				/* we are done */
	end;
	aptep = addr (tc_data$apt);			/* get pointer to first APT entry */
	do i = 1 to tc_data$apt_size;			/* look at all APT entries */
	     if (aptep -> apte.lock_id = test_lock) &     /* we have found entry for this process, lock is valid */
	        (bin(aptep ->apte.flags.state,18) ^= 5)
	     then do;
		a_code = 1;			/* return proper code */
		return;				/* we are done */
	     end;
	     aptep = addrel (aptep, tc_data$apt_entry_size); /* goto next APT entry */
	end;
	if ^stacq (lock_ptr, test_lock, pds$apt_ptr -> apte.lock_id) then do;
	     a_code = 1;				/* if not the same as test_lock then lock is valid */
	     return;
	end;
	a_code = 3;				/* lock didn't change and is still bad ... the stacq set it to caller */
	return;

     end try_to_unlock_lock;
