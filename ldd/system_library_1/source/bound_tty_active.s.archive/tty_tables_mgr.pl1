/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


tty_tables_mgr: proc;

/* A program to manage the addition and deletion of tables
   to and from the tty_tables segment.  This segment must be
   locked before performing modifications.
*/

/* Coded by J. Stern 3/14/77 */


/* parameters */

dcl  a_new_table_ptr ptr;				/* ptr to table to be added (Input) */
dcl  a_new_table_size fixed bin;			/* size (in chars) of table to be added (Input) */
dcl  a_type fixed bin;				/* type of table to be added (Input) */
dcl  a_table_rel bit (18);				/* rel ptr to stored table (Output) (Input) */
dcl  a_code fixed bin;				/* standard error code (Output) */


/* automatic */

dcl  new_table_ptr ptr;
dcl  new_table_size fixed bin;
dcl  type fixed bin;
dcl (next_tdp, prev_tdp) ptr;
dcl (td_rel, next_td_rel, prev_td_rel) bit (18);
dcl  code fixed bin (35);
dcl  saved_count fixed bin;
dcl  saved_ref_count fixed bin;
dcl  changing_threads bit (1) aligned;


/* based */

dcl  new_table (new_table_size) bit (36) aligned based (new_table_ptr);


/* conditions */

dcl (cleanup, area) condition;


/* static */

dcl (error_table_$bad_index,
     error_table_$no_table,
     error_table_$notalloc) fixed bin (35) ext static;
dcl  pds$processid bit (36) aligned ext static;
dcl  crash_system fixed bin int static options (constant) init (1);


/* builtins */

dcl (addr, null, ptr, rel, bin, bit, unspec) builtin;


/* entries */

dcl  lock$lock_fast entry (ptr);
dcl  lock$unlock_fast entry (ptr);
dcl  syserr entry options (variable);

%include tty_tables;

add:	entry (a_new_table_ptr, a_new_table_size, a_type, a_table_rel, a_code);

	ttytp = addr (tty_tables$);
	new_table_ptr = a_new_table_ptr;
	new_table_size = a_new_table_size;
	type = a_type;
	code = 0;

	if type < 1 | type > 6
	then do;
	     call syserr ((crash_system), "tty_tables_mgr$add:  Invalid table type.  ^d", type);
	     a_code = error_table_$bad_index;
	     return;
	end;

	tdp = null;
	changing_threads = "0"b;
	saved_count = tty_tables_hdr.count (type);
	on cleanup begin;
	     if changing_threads
	     then do;
		call unthread_td;
		tty_tables_hdr.count (type) = saved_count;
	     end;
	     else if tdp ^= null
	     then call free_td;
	     if tty_tables_hdr.lock = pds$processid
	     then call lock$unlock_fast (ttytp);
	end;
	call lock$lock_fast (ttytp);

	on area begin;
	     code = error_table_$notalloc;
	     go to add_unlock;
	end;

	table_alloc_len = new_table_size * 36;
	allocate table_descriptor in (table_area) set (tdp);
	revert area;

	td_rel = rel (tdp);
	addr (table_descriptor.table_contents) -> new_table = new_table;

	prev_td_rel = ""b;
	prev_tdp = null;
	do next_td_rel = tty_tables_hdr.first_table (type) repeat next_tdp -> table_descriptor.next_table
		while (next_td_rel ^= ""b);
	     next_tdp = ptr (ttytp, next_td_rel);
	     if table_descriptor.table_contents < next_tdp -> table_descriptor.table_contents
	     then go to insert_td;
	     if table_descriptor.table_contents = next_tdp -> table_descriptor.table_contents
	     then if table_descriptor.len = next_tdp -> table_descriptor.len
		then do;
		     call free_td;
		     next_tdp -> table_descriptor.ref_count = next_tdp -> table_descriptor.ref_count + 1;
		     tdp = next_tdp;
		     go to add_unlock;
		end;
		else if table_descriptor.len < next_tdp -> table_descriptor.len
		then go to insert_td;

	     prev_td_rel = next_td_rel;
	     prev_tdp = next_tdp;
	end;
	next_tdp = null;

insert_td: table_descriptor.pattern = (18) "10"b;
	table_descriptor.type = type;
	table_descriptor.next_table = next_td_rel;
	table_descriptor.prev_table = prev_td_rel;
	table_descriptor.ref_count = 1;

	changing_threads = "1"b;
	call thread_td;

	tty_tables_hdr.count (type) = tty_tables_hdr.count (type) + 1;
add_unlock: call lock$unlock_fast (ttytp);
	revert cleanup;
	a_code = code;
	if code = 0
	then a_table_rel = rel (addr (table_descriptor.table_contents));
	return;

delete:	entry (a_table_rel, a_code);

	ttytp = addr (tty_tables$);
	td_rel = bit (bin (bin (a_table_rel, 18) -6, 18), 18); /* table desc offset = table offset - 6 */
	tdp = ptr (ttytp, td_rel);
	type = table_descriptor.type;

	if table_descriptor.pattern ^= (18) "10"b
	then do;
	     call syserr ((crash_system), "tty_tables_mgr$delete:  Invalid table offset.  ^6o", bin (td_rel, 18));
	     a_code = error_table_$no_table;
	     return;
	end;
	changing_threads = "0"b;
	saved_ref_count = table_descriptor.ref_count;
	saved_count = tty_tables_hdr.count (type);
	on cleanup begin;
	     if tdp = null				/* if table already freed */
	     then tty_tables_hdr.count (type) = saved_count -1;
	     else do;
		if changing_threads
		then call thread_td;
		table_descriptor.ref_count = saved_ref_count;
	     end;
	     if tty_tables_hdr.lock = pds$processid
	     then call lock$unlock_fast (ttytp);
	end;
	call lock$lock_fast (ttytp);

	table_descriptor.ref_count = table_descriptor.ref_count -1;
	if table_descriptor.ref_count > 0
	then go to del_unlock;

	prev_td_rel = table_descriptor.prev_table;
	if prev_td_rel = ""b
	then prev_tdp = null;
	else prev_tdp = ptr (ttytp, prev_td_rel);
	next_td_rel = table_descriptor.next_table;
	if next_td_rel = ""b
	then next_tdp = null;
	else next_tdp = ptr (ttytp, next_td_rel);

	changing_threads = "1"b;
	call unthread_td;
	tty_tables_hdr.count (type) = tty_tables_hdr.count (type) -1;
del_unlock: call lock$unlock_fast (ttytp);
	revert cleanup;
	a_code = 0;
	return;

unthread_td: proc;					/* unthreads and deallocates a table descriptor */

	     if prev_tdp = null
	     then tty_tables_hdr.first_table (type) = next_td_rel;
	     else prev_tdp -> table_descriptor.next_table = next_td_rel;
	     if next_tdp = null
	     then;
	     else next_tdp -> table_descriptor.prev_table = prev_td_rel;


free_td:	     entry;				/* deallocates a table descriptor */

	     free table_descriptor in (table_area);
	     tdp = null;

	end unthread_td;




thread_td: proc;					/* threads in a table descriptor */

	     if prev_tdp = null
	     then tty_tables_hdr.first_table (type) = td_rel;
	     else prev_tdp -> table_descriptor.next_table = td_rel;
	     if next_tdp = null
	     then;
	     else next_tdp -> table_descriptor.prev_table = td_rel;

	end thread_td;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   tty_tables_mgr$add:  Invalid table type.  N

   S:  $crash

   T:  $run

   M:  An attempt to add a table to the tty_tables segment has
   failed due to an invalid table type of N.

   A:  $inform


   Message:
   tty_tables_mgr$delete:  Invalid table offset.  N

   S:  $crash

   T:  $run

   M:  An attempt to delete a table from the tty_tables segment
   has failed due to an invalid table offset of N.

   A:  $inform

   END MESSAGE DOCUMENTATION */




     end tty_tables_mgr;
