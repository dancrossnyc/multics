/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */

/* Truncate stacks past their end_ptr ; called from fast_hc_ipc */
/* BIM 1/82 */
/* Modified March 1982 by J. Bongiovanni, not to truncate stack_0 */
/* Modified May 1982 by J. Bongiovanni to check stack SDW before touching stack */
/* Modified November 1982 BIM to check the PTW for the stack header as well. */

truncate_stacks:
     procedure;


/* ASSUME --- no active stack history inside val level */


	declare pds$stacks		 (0:7) pointer ext;
	declare pc$truncate_count	 entry (pointer, fixed bin (18), fixed bin (18));
	declare lock$lock_ast	 entry;
	declare lock$unlock_ast	 entry;
	declare get_ptrs_$given_segno	 entry (fixed bin (18)) returns (pointer);
	declare ptw_util_$get_add_type entry (ptr, bit (4) unaligned);
	declare sdw_util_$dissect	 entry (ptr, ptr);

	declare pageno		 fixed bin (18);
	declare n_in_core		 fixed bin (18);
	declare stkx		 fixed bin;

	declare 1 stack_sdw_info	 aligned like sdw_info;

	declare dseg$		 (0:1023) fixed bin (71) aligned ext;
	declare sst$stk_pages_truncated
				 fixed bin (35) ext;
	declare sst$stk_pages_truncated_in_core
				 fixed bin (35) ext;

	declare (addr, baseno, bin, divide, null, rel, size)
				 builtin;


	call lock$lock_ast;

	do stkx = 1 to 7;
	     if pds$stacks (stkx) ^= null
	     then call DO (pds$stacks (stkx), "0"b);
	end;

	call lock$unlock_ast;
	return;

DO:
     procedure (segp, stack_0);

	declare segp		 pointer;
	declare stack_0		 bit (1) aligned;
	declare at		 bit (4);
	declare ptp		 pointer;

	call sdw_util_$dissect (addr (dseg$ (bin (baseno (segp)))), addr (stack_sdw_info));
	if stack_sdw_info.flags.faulted | ^stack_sdw_info.access.read
	then goto RETURN;
	astep = get_ptrs_$given_segno (bin (baseno (segp), 18));

	if astep = null
	then go to RETURN;

	ptp = addrel (astep, size (aste));
	call ptw_util_$get_add_type (ptp, at);
	if at ^= add_type.core
	then go to RETURN;

	if stack_sdw_info.size <= bin (rel (addr (segp -> stack_header.stack_end_ptr))) + 2
	then goto RETURN;

	pageno = divide (bin (rel (segp -> stack_header.stack_end_ptr)) + 1023, 1024, 19, 0);
	if stack_0
	then pageno = pageno + 1;

	sst$stk_pages_truncated = sst$stk_pages_truncated + bin (aste.csl, 9) - pageno + 1;
						/* pageno is 1-origin */

	call pc$truncate_count (astep, pageno, n_in_core);

	sst$stk_pages_truncated_in_core = sst$stk_pages_truncated_in_core + n_in_core;

RETURN:
     end DO;

%include add_type;
%include aste;
%include dir_entry;
%include sdw_info;
%include stack_header;

     end truncate_stacks;
