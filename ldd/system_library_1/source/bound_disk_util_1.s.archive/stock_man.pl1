/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
stock_man$allocate_record_stock:
     proc (Pvtep, Record_stockp);

/* Routine to manage the allocation and deletion of stocks.
   Initially, only record stocks are supported. Later, VTOCE stocks
   will also be supported.

   This implementation of record stocks is fairly simple. All record stocks 
   are the same size, and there is sufficient wired space in stock_seg
   for all of them. The record stocks form an array, whose elements
   parallel the PVTE array. The knowledge of the internal structure
   of stock_seg is known only to this procedure, so the allocation
   mechanism can be changed fairly simply. If it is get_io_segs must
   also be changed to get sufficient space in stock_seg. Similarly, VTOCE
   stocks form an array, whose elements parallel the PVTE array, and
   are all of the same size.

   Written March 1982 by J. Bongiovanni

*/

/*  Parameter  */

	dcl     Pvtep		 ptr;		/* Pointer to PVTE */
	dcl     Record_stockp	 ptr;		/* Pointer to record stock */
	dcl     Vtoce_stockp	 ptr;		/* Pointer to VTOCE stock */

/*  Automatic  */

	dcl     p99		 pic "99";
	dcl     pvtx		 fixed bin;
	dcl     stockx		 fixed bin;

/*  Entry  */

	dcl     syserr		 entry options (variable);

/*  Builtin  */

	dcl     addr		 builtin;
	dcl     addrel		 builtin;
	dcl     bin		 builtin;
	dcl     bit		 builtin;
	dcl     convert		 builtin;
	dcl     divide		 builtin;
	dcl     null		 builtin;
	dcl     rel		 builtin;
	dcl     size		 builtin;
	dcl     unspec		 builtin;

%page;
	pvtep = Pvtep;
	pvtx = divide (bin (rel (pvtep)) - bin (rel (addr (pvt$array))), size (pvte), 17) + 1; /* PVTE index */

	stock_segp = addr (stock_seg$);

	n_in_record_stock = stock_seg.record_stock_entries;
	n_volmap_pages = N_OLD_VOLMAP_PAGES;

	record_stockp = addrel (stock_seg.record_stock_arrayp, (pvtx - 1) * stock_seg.record_stock_size);

	record_stock.pvtep = pvtep;
	record_stock.n_in_stock = n_in_record_stock;
	record_stock.n_volmap_pages = N_OLD_VOLMAP_PAGES;
	record_stock.n_free_in_stock = 0;
	record_stock.n_os_in_stock = 0;
	record_stock.low_threshold = divide (n_in_record_stock, 4, 18);
	record_stock.high_threshold = n_in_record_stock - record_stock.low_threshold;
	record_stock.target = divide (record_stock.high_threshold + record_stock.low_threshold, 2, 18);
	record_stock.stock_offset = bit (bin (bin (rel (addr (record_stock.stock))) - bin (rel (record_stockp)), 18), 18);
	record_stock.n_words_in_stock = divide (n_in_record_stock + 1, 2, 18);
	record_stock.search_index = 0;

	unspec (record_stock.old_volmap_page) = ""b;
	unspec (record_stock.volmap_page) = ""b;
	unspec (record_stock.stock) = ""b;

	pvte.volmap_stock_ptr = record_stockp;

	Record_stockp = record_stockp;

	return;
%page;
stock_man$free_record_stock:
     entry (Pvtep, Record_stockp);

	pvtep = Pvtep;
	record_stockp = Record_stockp;

	if pvte.volmap_stock_ptr = null () then return;	/* For ESD, since may crump in the middle of demount */

	if pvte.volmap_stock_ptr ^= record_stockp | record_stock.pvtep ^= pvtep
	then do;
		pvte.volmap_stock_ptr = null ();	/* Let ESD work next time */
		call syserr (CRASH, "stock_man: PVTE out of synch with record stock on ^a_^a: pvtep=^p record_stockp=^p", pvte.devname, convert (p99, pvte.logical_area_number), pvtep, record_stockp);
	     end;


	if record_stock.n_free_in_stock ^= 0 | record_stock.n_os_in_stock ^= 0
	     | unspec (record_stock.stock) ^= ""b
	then do;
		pvte.volmap_stock_ptr = null ();	/* Let ESD work next time */
		call syserr (CRASH, "stock_man: Attempt to free non-empty stock on ^a_^a: pvtep=^p record_stockp = ^p", pvte.devname, convert (p99, pvte.logical_area_number), pvtep, record_stockp);
	     end;

	pvte.volmap_stock_ptr = null ();
	unspec (record_stock) = ""b;

	return;
%page;
stock_man$allocate_vtoce_stock:
     entry (Pvtep, Vtoce_stockp);

	pvtep = Pvtep;
	pvtx = divide (bin (rel (pvtep)) - bin (rel (addr (pvt$array))), size (pvte), 17) + 1; /* PVTE index */


	stock_segp = addr (stock_seg$);

	n_in_vtoce_stock = stock_seg.vtoce_stock_entries;

	vtoce_stockp = addrel (stock_seg.vtoce_stock_arrayp, (pvtx - 1) * stock_seg.vtoce_stock_size);

	vtoce_stock.pvtep = pvtep;
	vtoce_stock.n_in_stock = n_in_vtoce_stock;
	vtoce_stock.n_free_in_stock = 0;
	vtoce_stock.target = divide (n_in_vtoce_stock, 2, 18);
	vtoce_stock.search_index = 0;

	unspec (vtoce_stock.stock) = ""b;

	do stockx = 1 to vtoce_stock.n_in_stock;
	     vtoce_stock.stock (stockx) = -1;
	end;

	pvte.vtoc_map_stock_ptr = vtoce_stockp;
	Vtoce_stockp = vtoce_stockp;

	return;
%page;
stock_man$free_vtoce_stock:
     entry (Pvtep, Vtoce_stockp);

	pvtep = Pvtep;
	vtoce_stockp = Vtoce_stockp;

	if pvte.vtoc_map_stock_ptr = null () then return; /* For ESD, since may crump in the middle of a dismount */

	if pvte.vtoc_map_stock_ptr ^= vtoce_stockp | vtoce_stock.pvtep ^= pvtep
	then do;
		pvte.vtoc_map_stock_ptr = null ();	/* Let ESD work */
		call syserr (CRASH, "stock_man: PVTE out of synch with VTOCE stock on ^a_^a: pvtep=^p vtoce_stockp=^p",
		     pvte.devname, convert (p99, pvte.logical_area_number), pvtep, vtoce_stockp);
	     end;

	if vtoce_stock.n_free_in_stock ^= 0
	then do;
NON_EMPTY_STOCK:
		pvte.vtoc_map_stock_ptr = null ();	/* Let ESD work */
		call syserr (CRASH, "stock_man: Attempt to free non-empty stock on ^a_^a: pvtep=^p vtoce_stockp=^p",
		     pvte.devname, convert (p99, pvte.logical_area_number), pvtep, vtoce_stockp);
	     end;

	do stockx = 1 to vtoce_stock.n_in_stock;
	     if vtoce_stock.stock (stockx) ^= -1
	     then goto NON_EMPTY_STOCK;
	end;

	pvte.vtoc_map_stock_ptr = null ();
	unspec (vtoce_stock) = ""b;

	return;


%page; %include pvte;
%page; %include stock_seg;
%page; %include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   stock_man: PVTE out of synch with record stock on dskX_NN: pvtep = XXX|XXXXXX record_stockp = YYY|YYYYYY

   S:     $crash

   T:	During initialization immediately before the File System is
   activated, or when demounting a physical disk volume.

   M:	The supervisor databases pvt and stock_seg are not in proper
   synchronization. The pointers printed are the locations of the databasse
   elements for which this condition has been detected. These pointers are
   useful to the site system programmers for analyzing the problem, which is
   probably a software malfunction. dskX_NN is the physical volume whose
   tables are affected.

   A:     $recover
   The free addresses which are lost may be recovered by a physical volume salvage.


   Message:
   stock_man: Attempt to free non-empty stock on dskX_NN: pvtep=XXX|XXXXXX record_stockp=YYY|YYYYYY

   S:     $crash

   T:	During initialization immediately before the File System is
   activated, or when demounting a physical disk volume.

   M:     Not all free addresses have been deposited to the Volume Map
   successfully for the disk volume indicated. This is indicative of a software
   malfunction. The pointers printed are useful to site system programmers in 
   analyzing the problem.

   A:     $recover
   The free addresses which are lost may be recovered by a physical volume salvage.

   Message:
   stock_man: PVTE out of synch with VTOCE stock on dskX_NN: pvtep = XXX|XXXXXX vtoce_stockp = YYY|YYYYYY

   S:     $crash

   T:     When demounting a physical disk volume.

   M:	The supervisor databases pvt and stock_seg are not in proper
   synchronization. The pointers printed are the locations of the databasse
   elements for which this condition has been detected. These pointers are
   useful to the site system programmers for analyzing the problem, which is
   probably a software malfunction. dskX_NN is the physical volume whose
   tables are affected. Some free VTOCEs may be lost.

   A:     $recover
   The lost VTOCEs can be recovered by a physical volume salvage.

   Message:
   stock_man: Attempt to free non-empty stock on dskX_NN: pvtep=XXX|XXXXXX vtoce_stockp=YYY|YYYYYY

   S:     $crash

   T:     When demounting a physical disk volume.

   M:     Not all free VTOCEs have been deposited to the VTOC Map
   successfully for the disk volume indicated. This is indicative of a software
   malfunction. The pointers printed are useful to site system programmers in 
   analyzing the problem.

   A:     $recover
   The free VTOCEs which are lost may be recovered by a physical volume salvage.


   END MESSAGE DOCUMENTATION */
     end stock_man$allocate_record_stock;
