/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-14,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-12,Farley), install(86-07-17,MR12.0-1097):
     Add support for devices using 512_WORD_IO
  2) change(87-02-04,Farley), approve(87-04-15,MCR7660),
     audit(87-04-16,Lippard), install(87-04-28,MR12.1-1028):
     Changed to correct the calculation of vtoc_offset.
                                                   END HISTORY COMMENTS */


bce_create_sstnt: proc (sst_abs_start, sst_abs_end);

/* Program to generate the sst_names_ segment for Multics within bce.
Written August 1984 by Keith Loepere. */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* The sst_names_ segment gives the name of the segment corresponding to each 
aste.  The segment may be maintained by Multics, by specifying the "astk"
parm, or by this program.  The sst_names_ maintained by this program fetches
the name for an aste from the corresponding vtoce. */

/* Parameters */

dcl  sst_abs_end			fixed bin (26) parameter;
dcl  sst_abs_start			fixed bin (26) parameter;

/* Constants */

dcl  ME				char (12) init ("create_sstnt") static options (constant);
dcl  page_table_sizes		(0:3) fixed bin init (4, 16, 64, 256) static options (constant);

/* Entries */

dcl  bce_appending_simulation$get_absolute entry (fixed bin (26), fixed bin (18), ptr, fixed bin (35));
dcl  bce_appending_simulation$get_virtual entry (ptr, fixed bin (26), fixed bin (18), ptr, fixed bin (35));
dcl  bce_appending_simulation$new_segment entry (fixed bin (15), ptr, fixed bin (35));
dcl  bce_appending_simulation$put_virtual entry (ptr, fixed bin (26), fixed bin (18), ptr, fixed bin (35));
dcl  bce_check_abort		entry;
dcl  com_err_			entry () options (variable);
dcl  ioa_				entry () options (variable);
dcl  read_disk$read_disk_no_test	entry (fixed bin, fixed bin (18), ptr, fixed bin (35));

/* Variables */

dcl  aste_num			fixed bin;	/* loop index on astes in a pool */
dcl  aste_pool			fixed bin;	/* loop index on aste pools */
dcl  code				fixed bin (35);
dcl  1 my_aste			aligned like aste;	/* read in aste */
dcl  1 my_sstnt_seg_info		aligned like seg_info; /* description of sstnt */
dcl  sst_buffer			bit (36 * 1024) aligned; /* fetch the sst a page at a time for efficiency */
dcl  sst_buffer_offset		fixed bin (18);	/* this ptr shows how much of page buffer we've processed */
dcl  sst_name			char (32) var;	/* element of sst_names_ */
dcl  sst_seg_offset			fixed bin (26);	/* of data in sst_buffer */
dcl  sst_sizes			(0:3) fixed bin;	/* size of pools */
dcl  sstnt_buffer			bit (36 * 1024) aligned; /* write the sstnt a page at a time for efficiency */
dcl  sstnt_buffer_offset		fixed bin (18);	/* this ptr shows how much of page buffer we've processed */
dcl  sstnt_header_size		fixed bin (18);	/* everything before the names */
dcl  sstnt_seg_offset		fixed bin (26);	/* of start of data in sstnt_buffer */
dcl  vtoc_offset			fixed bin;	/* offset of desired vtoce within page */
dcl  vtoc_record			bit (36 * 1024) aligned; /* for reading vtoces */
dcl  vtoc_record_num		fixed bin (18);	/* page number holding vtoce */

/* Misc */

dcl  addr				builtin;
dcl  addrel			builtin;
dcl  currentsize			builtin;
dcl  divide			builtin;
dcl  max				builtin;
dcl  min				builtin;
dcl  mod				builtin;
dcl  rtrim			builtin;
dcl  segno			builtin;
dcl  size				builtin;
dcl  substr			builtin;
dcl  unspec			builtin;
dcl  wordno			builtin;
%page;
	seg_info_ptr = addr (my_sstnt_seg_info);
	call bce_appending_simulation$new_segment (segno (addr (sst_names_$)), seg_info_ptr, code);
	if code ^= 0 then go to sstnt_error;

	sstnp = addr (sstnt_buffer);			/* fetch current sst_names_ header */
	sstnt_header_size = wordno (addr (sstnt.names)) - wordno (sstnp);
	call bce_appending_simulation$get_virtual (seg_info_ptr, 0, sstnt_header_size, sstnp, code);
	if code ^= 0 then go to sstnt_error;

/* Now for some validity checks on sst_names_. */

	if sstnt.valid & sstnt.multics_or_bce = "mult" then return;
	if sstnt.ast_sizes (0) ^= page_table_sizes (0) + size (aste) |
	     sstnt.ast_sizes (1) ^= page_table_sizes (1) + size (aste) |
	     sstnt.ast_sizes (2) ^= page_table_sizes (2) + size (aste) |
	     sstnt.ast_sizes (3) ^= page_table_sizes (3) + size (aste) then return; /* not initialized */

	sst_sizes (0) = sstnt.ast_name_offsets (1);	/* size of pools */
	sst_sizes (1) = sstnt.ast_name_offsets (2) - sstnt.ast_name_offsets (1);
	sst_sizes (2) = sstnt.ast_name_offsets (3) - sstnt.ast_name_offsets (2);
	sst_sizes (3) = sstnt.nentries - sstnt.ast_name_offsets (3);

	if sstnt.ast_offsets (1) ^= sstnt.ast_offsets (0) + /* check pool sizes versus supplied offsets */
	     sst_sizes (0) * (page_table_sizes (0) + size (aste)) then return;
	if sstnt.ast_offsets (2) ^= sstnt.ast_offsets (1) +
	     sst_sizes (1) * (page_table_sizes (1) + size (aste)) then return;
	if sstnt.ast_offsets (3) ^= sstnt.ast_offsets (2) +
	     sst_sizes (2) * (page_table_sizes (2) + size (aste)) then return;
	if sst_abs_end - sst_abs_start + 1 < sstnt.ast_offsets (3) +
	     sst_sizes (3) * (page_table_sizes (3) + size (aste)) then return;
	if seg_info.size < currentsize (sstnt) then return; /* sstnt not big enough for names - not made paged yet? */

/* We keep a (1 page) buffer of the sst at all times for efficiency.  For our
purposes, we don't need the sst header.  We'll start reading with the start
of the astes.  So, we start by fetching that buffers' worth of the sst that
contains the start of the astes. */

	sst_seg_offset = sstnt.ast_offsets (0);
	sst_buffer_offset = mod (sst_seg_offset, size (sst_buffer));
	call bce_appending_simulation$get_absolute (sst_abs_start + sst_seg_offset - sst_buffer_offset, size (sst_buffer), addr (sst_buffer), code);

/* We also keep a (1 page) buffer of the sstnt waiting to be written.  Start
us out as writing after the header (which we'll write later). */

	sstnt_buffer_offset = sstnt_header_size;
	sstnt_seg_offset = 0;

	sstnt.multics_or_bce = "bce";
	sstnt.valid = "1"b;

	call ioa_ ("Filling sst_names_");
%page;
	astep = addr (my_aste);

/* Read each aste.  For all valid ones, grab the name from the vtoce. */

	pvt_arrayp = addr (pvt$array);

	do aste_pool = 0 to 3;
	     do aste_num = 1 to sst_sizes (aste_pool);
		sst_name = "";
		call get_next_aste (page_table_sizes (aste_pool));
		if aste.uid = "0"b then go to next_aste;
		if aste.uid = "777777777777"b3 then do;
		     sst_name = ">";
		     go to next_aste;
		end;
		if aste.hc then go to next_aste;
		if aste.vtocx = -1 then go to next_aste;
		if aste.pvtx > pvt$max_n_entries then goto next_aste;
		pvtep = addr (pvt_array (aste.pvtx));
		vtoc_record_num = VTOC_ORIGIN + divide (aste.vtocx, VTOCES_PER_RECORD (pvte.device_type), 17);
		vtoc_offset = sect_per_vtoc (pvte.device_type) * words_per_sect (pvte.device_type) * mod (aste.vtocx, VTOCES_PER_RECORD (pvte.device_type));
		call read_disk$read_disk_no_test ((aste.pvtx), vtoc_record_num, addr (vtoc_record), code);
		if code ^= 0 then go to next_aste;
		vtocep = addrel (addr (vtoc_record), vtoc_offset);
		sst_name = rtrim (vtoce.primary_name);

next_aste:	call add_name_to_sstnt;
		call bce_check_abort;
	     end;
	end;
	call add_name_to_sstnt$flush;
	return;

sstnt_error:
	call com_err_ (code, ME);
	return;
%page;
add_name_to_sstnt: proc;

/* This subproc adds sst_name to the end of sstnt_buffer.  If this
runs off the end, the current buffer is written and the excess added to the
new buffer's worth. */

dcl  sst_name_bits			bit (size (sst_name) * 36) aligned based (addr (sst_name));
dcl  words_in_current_page		fixed bin;
dcl  words_in_new_page		fixed bin;

	words_in_current_page = min (size (sstnt_buffer) - sstnt_buffer_offset, size (sst_name));
	substr (sstnt_buffer, 1 + sstnt_buffer_offset * 36, words_in_current_page * 36) =
	     substr (sst_name_bits, 1, words_in_current_page * 36);
	sstnt_buffer_offset = sstnt_buffer_offset + words_in_current_page;

	if sstnt_buffer_offset = size (sstnt_buffer) then do;
	     call bce_appending_simulation$put_virtual (seg_info_ptr, sstnt_seg_offset, size (sstnt_buffer), addr (sstnt_buffer), code);
	     sstnt_seg_offset = sstnt_seg_offset + size (sstnt_buffer);

	     words_in_new_page = size (sst_name) - words_in_current_page;
	     substr (sstnt_buffer, 1, words_in_new_page * 36) =
		substr (sst_name_bits, 1 + words_in_current_page * 36, words_in_new_page * 36);
	     sstnt_buffer_offset = words_in_new_page;
	end;
	return;

add_name_to_sstnt$flush: entry;

	call bce_appending_simulation$put_virtual (seg_info_ptr, sstnt_seg_offset, sstnt_buffer_offset, addr (sstnt_buffer), code);
	return;
     end add_name_to_sstnt;
%page;
get_next_aste: proc (page_table_size);

/* This subproc returns the next aste in the sst.  It skips over the page 
table.  It reads in the next page of sst if necessary to do this. */

dcl  page_table_size		fixed bin parameter;

dcl  aste_size			fixed bin;
dcl  words_in_current_page		fixed bin;
dcl  words_in_page_to_be_fetched	fixed bin;
dcl  words_to_copy			fixed bin;

	aste_size = page_table_size + size (aste);
	words_in_current_page = min (size (sst_buffer) - sst_buffer_offset, aste_size);
	words_to_copy = min (words_in_current_page, size (aste));
	substr (unspec (aste), 1, words_to_copy * 36) =
	     substr (sst_buffer, 1 + sst_buffer_offset * 36, words_to_copy * 36);
	sst_seg_offset = sst_seg_offset + words_in_current_page;
	sst_buffer_offset = sst_buffer_offset + words_in_current_page;

	if sst_buffer_offset >= size (sst_buffer) then do;
	     call bce_appending_simulation$get_absolute (sst_abs_start + sst_seg_offset, size (sst_buffer), addr (sst_buffer), code);

	     words_in_page_to_be_fetched = aste_size - words_in_current_page;
	     words_to_copy = max (size (aste) - words_in_current_page, 0);
	     substr (unspec (aste), 1 + words_in_current_page * 36, words_to_copy * 36) =
		substr (sst_buffer, 1, words_to_copy * 36);
	     sst_seg_offset = sst_seg_offset + words_in_page_to_be_fetched;
	     sst_buffer_offset = words_in_page_to_be_fetched;
	end;
	return;
     end get_next_aste;
%page; %include bce_appending_seg_info;
%page; %include disk_pack;
%page; %include fs_dev_types_sector;
%page; %include ptw_info;
%page; %include pvte;
%page; %include sstnt;
%page; %include vtoce;
     end bce_create_sstnt;
