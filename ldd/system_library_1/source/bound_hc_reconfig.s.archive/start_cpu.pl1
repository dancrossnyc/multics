/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-10-23,Fawcett), approve(86-10-23,MCR7517),
     audit(86-10-30,Beattie), install(86-11-03,MR12.0-1206):
     Changed to remove the word BOS from Error message documentation.
                                                   END HISTORY COMMENTS */


/* START_CPU - Start Up a Processor.
   Last Modified: (Date and Reason)
   10/04/83 by Keith Loepere for paged idle_dsegs.
   04/09/84 by Chris Jones to update config deck to its partition when changed.
   04/09/82 by J. Bongiovanni to check data switches on non-bootload CPU
   12/30/81 by J. A. Bush to interagate cpu switches when cpu types are different
   11/11/81 by J. A. Bush to not check ID PROM on the bootload CPU
   10/22/81 by J. Bongiovanni for set_procs_required
   03/05/81 by J. Bongiovanni to set segment bound and access for prds
   on non-bootload CPUs
   09/08/80 by J. A. Bush for the DPS8/70M CPU
   02/05/79 by B. Greenberg for port expanders.
   02/05/76 by Steve Webber & Noel Morris as part of reconfiguration rewrite
   08/12/71 by Richard H. Gumpertz to take out the call to move subroutine
   7/14/72 by Craig Jensen to convert for the follow-on 645.
*/

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
start_cpu:
     proc (tag, rcode);

dcl	tag		   fixed bin (3),
	rcode		   fixed bin (35);

dcl	abs_ptr		   ptr,			/* pointer to abs_seg$ */
	prds_sdwp		   ptr,			/* pointer to SDW for new prds */
	prds_sdw		   bit (72) aligned,	/* SDW for new prds */
	prds_astep	   ptr,			/* AST entry pointer for new prds */
	prds_no		   fixed bin (18),		/* segment number of prds */
	pdp		   ptr,			/* pointer to processor data for new CPU */
	old_pdp		   ptr,			/* pointer to processor data for CPU losing mask */
	old_tag		   fixed bin (3),		/* tag of CPU losing mask */
	found_mask	   bit (1) aligned,		/* "1"b when CPU with mask found */
	ptp		   ptr,			/* temporary for wire_and_mask */
	mask_temp		   fixed bin (71),		/* temporary for wire_and_mask */
	int_vec_save	   bit (36) aligned,	/* for saving interrupt vector */
	trouble_save	   bit (36) aligned,	/* for saving trouble fault vector */
	startup_save	   bit (36) aligned,	/* for saving startup fault vector */
	onc_save		   bit (36) aligned,	/* for saving onc fault vector */
	lockup_save	   bit (36) aligned,	/* for saving lockup fault vector */
	i		   fixed bin,		/* iteration variable */
	abs_seg_p		   ptr,			/* pointer to abs_seg */
	fv_iv_p		   ptr,			/* pointer to fault/interrupt vector template */
	switch_rel	   fixed bin (18),		/* place in template for switch readings */
	switchp		   ptr,			/* pointer to switch readings */
	rsw1_68p		   ptr,			/* points to rsw1 data for L68, for switch checking */
	rsw1_8p		   ptr,			/* points to rsw1 data for DPS8M, for switch checking */
	rsw4p		   ptr,			/* points to rsw4 data for switch checking */
	cmpp		   ptr,			/* points to rsw1 discrepancy data for switch checking */
	trgp		   ptr,			/* points to add target rsw1 data, for switch checking */
	(tbase, tsize)	   fixed bin (24),		/* port base and size in words, for switch checking */
	L68_prt_sze	   fixed bin (24),		/* used for computing true port size of L68 port */
	found		   bit (1) aligned,		/* useful flag */
	dps8_add		   bit (1) aligned,		/* cpu type flag for switch checking */
	remember		   (0:7) fixed bin,		/* base of controllers with vector template */
	base		   fixed bin,		/* base address of controller */
	tcode		   fixed bin (35),		/* temporary for error code */
	cpu_mask		   bit (8) aligned,		/* for set_procs_required */
	cpu_model		   char (13) aligned,	/* storage for cpu model number (from ID PROM) */
	cpu_serial	   char (13) aligned,	/* storage for cpu serial number (from ID PROM) */
	cpu_ship_date	   char (8) aligned;	/* storage for cpu ship date (from ID PROM) */

dcl	1 tsdw		   (0:7) aligned like sdw,	/* for saving abs_seg SDW's */
	1 tsdw1		   aligned like sdw,	/* automatic copy of SDW */
	fv_iv_copy	   (2048) fixed bin based (fv_iv_p),
						/* for copying vector template */
	based_switches	   (0:4) bit (36) aligned based (switchp);
						/* for checking switch readings */


dcl	LETTERS		   char (8) static options (constant) init ("ABCDEFGH");

dcl	abs_seg$		   ext,
	sst_seg$		   ext,
	idle_dsegs$	   (0:8 * 1024 - 1 /* max size */) bit (72) aligned ext,
	prds$		   ext,
	dseg$		   ext,
	fault_vector$	   ext,
	pds$processid	   bit (36) aligned ext,
	prds$idle_ptr	   ptr ext,
	prds$processor_tag	   fixed bin (3) ext,
	prds$processor_pattern bit (8) aligned ext,
	tc_data$prds_length	   fixed bin (18) ext,
	tc_data$ncpu	   fixed bin ext,
	fv_iv_template$fv_iv_template
			   ext,
	fv_iv_template$rsw_data
			   (4) bit (36) aligned ext,
	init_processor$wait_flag
			   fixed bin (35) ext,
	init_processor$new_dbr fixed bin (71) ext,
	init_processor$first_tra
			   bit (36) aligned ext,
	init_processor$trouble_tra
			   bit (36) aligned ext,
	init_processor$startup_tra
			   bit (36) aligned ext,
	init_processor$onc_tra bit (36) aligned ext,
	init_processor$lockup_tra
			   bit (36) aligned ext,
	init_processor$controller_data
			   bit (8) aligned ext,
	sys_info$system_type   fixed bin ext;

dcl	init_processor$start_bootload_cpu
			   entry,
	stop_cpu$destroy_1	   entry (fixed bin (3), fixed bin (35)),
	scr_util$reassign_mask entry (fixed bin (3), fixed bin (3)),
	scr_util$set_mask	   entry (fixed bin (3), fixed bin (3), bit (72) aligned),
	scr_util$set_port_enable
			   entry (fixed bin (3), bit (1) unal),
	scr_util$update_export_xipmsk
			   entry (fixed bin (3)),
	scr_util$set_export_enable
			   entry (fixed bin (3), fixed bin (3), bit (1) aligned),
	mask_instruction$smcm  entry returns (bit (36) aligned),
	mask_instruction$rmcm  entry returns (bit (36) aligned),
	config_$find_2	   entry (char (4) aligned, fixed bin, ptr),
	config_$update	   entry (),
	syserr		   entry options (variable),
	syserr$error_code	   entry options (variable),
	privileged_mode_ut$swap_sdw
			   entry (ptr, ptr),
	privileged_mode_ut$smic
			   entry (bit (36) aligned),
	privileged_mode_ut$cioc
			   entry (ptr),
	privileged_mode_ut$wire_and_mask
			   entry (fixed bin (71), ptr),
	privileged_mode_ut$unwire_unmask
			   entry (fixed bin (71), ptr),
	privileged_mode_ut$read_id_prom
			   entry (char (*) aligned, fixed bin),
	validate_cpu_card	   entry (fixed bin (3), ptr),
	wire_proc$wire_me	   entry,
	get_ptrs_$given_astep  entry (ptr) returns (bit (72)),
	wire_proc$unwire_me	   entry,
	set_procs_required	   entry (bit (8) aligned, fixed bin (35)),
	pc_wired$wire_wait	   entry (ptr, fixed bin, fixed bin),
	pc_abs$remove_core	   entry (fixed bin, fixed bin, fixed bin (35)),
	freecore		   entry (fixed bin),
	prds_init		   entry (ptr, fixed bin (3), ptr),
	pxss$thread_in_idle	   entry (ptr);

dcl	1 pdata		   like scs$processor_data based (pdp) aligned;
						/* single element of processor data */
dcl	1 opdata		   like scs$processor_data based (old_pdp) aligned;
						/* Old interrupt CPU's pdata */

dcl	(addr, baseno, bin, bit, bool, divide, fixed, ptr, rel, stac, stacq, string, substr, unspec)
			   builtin;
%page;
	abs_ptr = addr (abs_seg$);			/* set pointer to abs_seg$ */
	prds_sdwp = addr (prds_sdw);

	fgbxp = addr (flagbox$);			/* Get pointer to flagbox. */


/* Fill in APT entry for idle process. */

	aptep = scs$idle_aptep (tag);			/* get pointer to previously allocated APTE */
	apte.processid = rel (aptep) || (6)"101"b;	/* set process ID */
	apte.flags.loaded = "1"b;			/* loaded and elegible */
	apte.flags.eligible = "1"b;
	apte.flags.idle = "1"b;			/* it is idle proc */
	apte.flags.default_procs_required = "0"b;	/* not system default */
	apte.procs_required = "0"b;
	substr (apte.procs_required, tag + 1, 1) = "1"b;	/* the CPU we want */
	apte.flags.state = bit (bin (2, 18));		/* set state to ready */
	apte.timax = 16000000;			/* low priority */
	call pxss$thread_in_idle (aptep);		/* thread entry into ready list */


/* Initialize PRDS. */

	if tag = scs$bos_processor_tag then
	     prds$idle_ptr = aptep;
	else do;					/* cpu is not bootload-cpu */
	     prds_astep = ptr (addr (sst_seg$), apte.prds);
	     prds_sdw = get_ptrs_$given_astep (prds_astep);
	     addr (prds_sdw) -> sdw.access = addr (dseg$) -> sdwa.access (fixed (baseno (addr (prds$)), 18));
	     addr (prds_sdw) -> sdw.bound = bit (divide (tc_data$prds_length - 1, 16, 14), 14);
	     call pc_wired$wire_wait (prds_astep, 0, divide (tc_data$prds_length + 1023, 1024, 17, 0));
						/* wire down prds */
	     prds_no = bin (baseno (addr (prds$)), 18);
	     do i = 0 to tag - 1;
		if scs$processor_data (i).offline | scs$processor_data (i).online then
		     if sys_info$system_type = ADP_SYSTEM then
			prds_no = prds_no + 1024;
		     else prds_no = prds_no + 512;	/* size of dsegs reserved for them */
	     end;
	     idle_dsegs$ (prds_no) = prds_sdw;
	     call privileged_mode_ut$swap_sdw (abs_ptr, prds_sdwp);
						/* abs_seg is the new prds. */
	     call prds_init (abs_ptr, tag, aptep);	/* Initialize prds. */
	end;
%page;
/* Assign a system controller mask to the processor. */

	pdp = addr (scs$processor_data (tag));		/* Get pointer to processor data. */
	found_mask = "0"b;				/* Initialize flag. */
	if ^pdata.interrupt_cpu then do;		/* If processor does not have a mask ... */
	     do old_tag = 0 to 7 while (^found_mask);
		old_pdp = addr (scs$processor_data (old_tag));
						/* Get pointer to other processor data. */
		if opdata.interrupt_cpu &		/* If this one gets interrupts and not BCE CPU ... */
		     (old_tag ^= scs$bos_processor_tag) then do;
		     found_mask = "1"b;		/* Got a candidate. */

		     if opdata.online then do;	/* If candidate is running now ... */
			cpu_mask = "0"b;
			substr (cpu_mask, old_tag + 1, 1) = "1"b;
			call set_procs_required (cpu_mask, tcode);
						/* Run on that CPU */
			if tcode ^= 0 then do;	/* Shouldn't happen */
			     rcode = rcerr_sprq_failed;
			     return;		/* Give up */
			end;
			call wire_proc$wire_me;	/* Don't allow page faults. */
			call privileged_mode_ut$wire_and_mask (mask_temp, ptp);
		     end;				/* Don't allow interrupts. */
		     opdata.interrupt_cpu = "0"b;	/* Take interrupts away from candidate. */
		     scs$mask_ptr (old_tag) = scs$mask_ptr (tag);
						/* Set mask pointer to simulated cell. */
		     scs$set_mask (old_tag) = scs$set_mask (tag);
						/* Make SMCM into STAQ. */
		     scs$read_mask (old_tag) = scs$read_mask (tag);
						/* Make RMCM into LDAQ. */
		     if opdata.online then do;	/* If we wired and masked before ... */
			call privileged_mode_ut$unwire_unmask (mask_temp, ptp);
			call wire_proc$unwire_me;
			call set_procs_required ("0"b, (0));
		     end;
		     if opdata.expanded_port & opdata.online then
			call scr_util$update_export_xipmsk ((opdata.controller_port));
		     call scr_util$reassign_mask (old_tag, tag);
						/* Reassign the mask now. */
		end;
	     end;

	     if ^found_mask then			/* If no mask was found for new processor ... */
		call scr_util$reassign_mask (-1, tag);	/* There must be a spare mask. */

	     scs$mask_ptr (tag) = addr (scs$port_addressing_word (scs$interrupt_controller));
						/* Set pointer for masking. */
	     scs$set_mask (tag) = mask_instruction$smcm ();
						/* Set SMCM instruction. */
	     scs$read_mask (tag) = mask_instruction$rmcm ();
						/* Set RMCM instruction. */
	     pdata.interrupt_cpu = "1"b;		/* We can now take interrupt on this CPU. */
	end;

/* Set up expected switch readings for processor. */

	rswp = addr (scs$processor_switch_template (2));	/* Get pointer to expected data. */
	dps_rsw_2.cpu_num = tag;			/* Set correct processor ID. */
%page;
/* Try to get the processor running. */

	init_processor$new_dbr = apte.dbr;		/* Set DBR value for new idle process. */

	if tag ^= scs$bos_processor_tag then do;	/* If not the bootload CPU ... */

/* Lay down dummy fault and interrupt vectors in any SCU's we can */

	     remember = 0;				/* array is cleared */
	     string (tsdw1) = "0"b;
	     tsdw1.df = "1"b;
	     tsdw1.read = "1"b;
	     tsdw1.write = "1"b;
	     tsdw1.bound = bit (bin (127, 14), 14);
	     tsdw1.unpaged = "1"b;
	     abs_seg_p = addr (abs_seg$);
	     fv_iv_p = addr (fv_iv_template$fv_iv_template);

	     do i = 0 to 7;
		base = scs$controller_data (i).base;
		if (base ^= 0) & scs$controller_data (i).online then do;
		     call pc_abs$remove_core (base, 2, tcode);
		     if tcode = 0 then do;		/* we got the pages */
			tsdw (i) = tsdw1;
			tsdw (i).add = bit (bin (base * 1024, 24), 24);
			call privileged_mode_ut$swap_sdw (abs_seg_p, addr (tsdw (i)));
			abs_seg_p -> fv_iv_copy = fv_iv_p -> fv_iv_copy;
			remember (i) = base;
		     end;
		end;
	     end;

/* Mask interrupts for new processor and enable all controller ports to new processor. */

	     call scr_util$set_mask (scs$interrupt_controller, (pdata.controller_port), scs$sys_level);
						/* Allow no interrupts. */
	     call scr_util$set_port_enable ((pdata.controller_port), "1"b);
						/* Set port enaobled on all controllers. */
	     if pdata.expanded_port then do;		/* Update port expander bits */
		call scr_util$set_export_enable ((pdata.controller_port), (pdata.expander_port), "1"b);
		call scr_util$update_export_xipmsk ((pdata.controller_port));
						/* Make mask from pdata.interrupt_cpu's */
	     end;
%page;
/* Initialize variables in init_processor. */

	     init_processor$wait_flag = rcerr_addcpu_no_response;
						/* Set flag to await processor startup. */
	     init_processor$controller_data = "0"b;	/* Clear controller bits. */
	     do i = 0 to 7;				/* Set bit for each online controller. */
		substr (init_processor$controller_data, i + 1, 1) = scs$controller_data (i).online;
	     end;

/* Send connects to make all other processors suspend normal operation. */

	     call privileged_mode_ut$wire_and_mask (mask_temp, ptp);
	     call wire_proc$wire_me;			/* Take no interrupts or page faults here. */

	     do while (^stac (addr (scs$connect_lock), pds$processid));
	     end;					/* Lock up the connect lock. */

	     scs$processor_start_wait = scs$processor & ^prds$processor_pattern;
						/* Stop all other processors. */
	     do i = 0 to 7;				/* Loop through all processors. */
		old_pdp = addr (scs$processor_data (i));/* Get pointer to data for processor. */
		if (i ^= prds$processor_tag) & old_pdp -> pdata.online then
		     call privileged_mode_ut$cioc (addr (scs$cow (i).cow));
						/* Send connects to other processors. */
	     end;

	     do while (scs$processor_start_wait);	/* Wait for other processors to respond. */
	     end;

/* Set up fault and interrupt vectors for starting CPU. */

	     fvp = addr (fault_vector$);		/* Get pointer to fault vector. */
	     int_vec_save = fv.ipair (scs$processor_start_int_no).scu;
	     fv.ipair (scs$processor_start_int_no).scu = init_processor$first_tra;
						/* Set up TRA for CPU start interrupt. */
	     trouble_save = fv.fpair (FAULT_NO_TRB).scu;
	     fv.fpair (FAULT_NO_TRB).scu = init_processor$trouble_tra;
						/* Set up TRA for trouble fault. */
	     startup_save = fv.fpair (FAULT_NO_SUF).scu;
	     fv.fpair (FAULT_NO_SUF).scu = init_processor$startup_tra;
						/* Set up TRA for startup fault. */
	     onc_save = fv.fpair (FAULT_NO_ONC).scu;
	     fv.fpair (FAULT_NO_ONC).scu = init_processor$onc_tra;
						/* Set up TRA for onc fault. */
	     lockup_save = fv.fpair (FAULT_NO_LUF).scu;
	     fv.fpair (FAULT_NO_LUF).scu = init_processor$lockup_tra;
						/* Set up TRA for lockup fault. */
%page;
/* Send processor start interrupt, open processor's mask, and wait for it to respond. */

	     call privileged_mode_ut$smic (scs$processor_start_pattern);
						/* Send interrupt to start processor. */
	     call scr_util$set_mask (scs$interrupt_controller, (pdata.controller_port), scs$processor_start_mask);
						/* Let new CPU get the interrupt. */
to_loop:
	     do i = 1 to 5000 while (init_processor$wait_flag = rcerr_addcpu_no_response);
	     end;					/* Wait for flag to change. */
	     rcode = init_processor$wait_flag;		/* Get error code, if any. */

/* If init_processor returns a bad switch code, this could be because we are attempting to add a processor that
   is of a different type (i.e.  L68 vs DPS8M or vis-a-versa) than what the scs$processor_switch_template was set up
   from (usally the bootload processor).  When this happens, the values of the rsw (1) memory size and the assignment
   switches must be computed for equality, since there values on the L68 and DPS8M processors are potentially
   different.  This is also true of the interlace info bits (rsw (2) bits 0 - 3 for the DPS8M, rsw (4) for the L68). */

	     if rcode = rcerr_addcpu_bad_switches then do;
		scs$processor_switch_compare = scs$processor_switch_compare & scs$processor_switch_mask;
		cmpp = addr (scs$processor_switch_compare (2));
						/* look at rsw 2 descrepencies */
		if cmpp -> dps8_rsw_2.cpu_type ^= 0 &	/* if adding a different kind of cpu */
		     scs$processor_switch_compare (3) = "0"b then do;
						/* no rsw3 data on mixed system */
		     if dps_rsw_2.cpu_type = 0 then do; /* template cpu is L68, cpu we are adding is dps8 */
			dps8_add = "1"b;		/* set switch indicating adding dps8 */
			rsw4p = addr (scs$processor_switch_template (4));
						/* set rsw 4 ptr */
			rsw1_68p = addr (scs$processor_switch_template (1));
						/* set L68 rsw1 ptr */
			rsw1_8p = addr (scs$processor_switch_data (1));
						/* set dps8 rsw1 ptr */
			switchp = addr (scs$processor_switch_data (2));
						/* set dps8 rsw2 ptr */
		     end;
		     else do;			/* template cpu is dps8, cpu we are adding is L68 */
			dps8_add = "0"b;		/* set switch indicating not adding dps8 */
			rsw4p = addr (scs$processor_switch_data (4));
						/* set rsw 4 ptr */
			rsw1_68p = addr (scs$processor_switch_data (1));
						/* set L68 rsw1 ptr */
			rsw1_8p = addr (scs$processor_switch_template (1));
						/* set dps8 rsw1 ptr */
			switchp = addr (scs$processor_switch_template (2));
						/* set dps8 rsw2 ptr */
			rswp = addr (scs$processor_switch_data (2));
						/* set L68 rsw2 ptr */
		     end;
		     cmpp = addr (scs$processor_switch_compare (1));
						/* set compare ptr */
		     trgp = addr (scs$processor_switch_data (1));
						/* set add target RSW1 ptr */
		     found = "0"b;
		     do i = 0 to 3;			/* go through each port */
			if scs$controller_data (i).online |
						/* check port only if mem */
			     scs$controller_data (i).offline then do;
						/* card in config deck */
			     L68_prt_sze = dps_mem_size_table (rsw1_68p -> rsw_1_3.port_info (i).mem_size);
			     if rsw4p -> rsw_4.port_info (i).half then
						/* if half switch is on... */
				L68_prt_sze = divide (L68_prt_sze, 2, 24, 0);
						/* divide patch plug size by 2 */
			     if L68_prt_sze ^= dps8_mem_size_table (rsw1_8p -> rsw_1_3.port_info (i).mem_size) then
				found = "1"b;	/* memory sizes are not = */
			     else cmpp -> rsw_1_3.port_info (i).mem_size = 0;
						/* reset compare data in case other switch error */
			     tbase = scs$controller_data (i).base * 1024;
						/* get abs base */
			     if dps8_add then	/* get target memory size */
				tsize = dps8_mem_size_table (trgp -> rsw_1_3.port_info (i).mem_size);
			     else tsize = dps_mem_size_table (trgp -> rsw_1_3.port_info (i).mem_size);

			     if trgp -> rsw_1_3.port_info (i).port_assignment
				^= bit (divide (tbase, tsize, 3, 0), 3) then
				found = "1"b;	/* port assignment switch error */
			     else cmpp -> rsw_1_3.port_info (i).port_assignment = "0"b;
						/* reset compare data in case other switch error */
			end;
			else do;			/* memory not there, reset compare data */
			     cmpp -> rsw_1_3.port_info (i).mem_size = 0;
			     cmpp -> rsw_1_3.port_info (i).port_assignment = "0"b;
			end;
			if cmpp -> rsw_1_3.port_info (i).port_enable then
			     found = "1"b;		/* port_enable  not set correctly */
			if cmpp -> rsw_1_3.port_info (i).initialize_enable then
			     found = "1"b;		/* initialize enable not set correctly */
			if cmpp -> rsw_1_3.port_info (i).interlace_enable then
			     found = "1"b;		/* interlace enable not set correctly */
			if rsw1_68p -> rsw_1_3.port_info (i).interlace_enable then
			     if rsw4p -> rsw_4.port_info (i).four ^= switchp -> dps8_rsw_2.interlace_info (i) then
				found = "1"b;	/* interlace types not equal */
		     end;
		     if ^found then do;		/* no error, return to init_processor */
			init_processor$wait_flag = rcerr_addcpu_no_response;
						/* allow init_processor to continue */
			go to to_loop;		/* and wait for completion */
		     end;
		end;
		init_processor$wait_flag = -1;	/* allow init_processor to die in a DIS */
	     end;


/* Restore original fault and interrupt vector contents. */

	     fv.ipair (scs$processor_start_int_no).scu = int_vec_save;
	     fv.fpair (FAULT_NO_TRB).scu = trouble_save;	/* Restore fault and interrupt vectors. */
	     fv.fpair (FAULT_NO_SUF).scu = startup_save;
	     fv.fpair (FAULT_NO_ONC).scu = onc_save;
	     fv.fpair (FAULT_NO_LUF).scu = lockup_save;

	     if ^stacq (scs$connect_lock, (36)"0"b, scs$connect_lock) then
		;				/* just reset lock, null then cluse */

	     call wire_proc$unwire_me;		/* Can unwire now. */
	     call privileged_mode_ut$unwire_unmask (mask_temp, ptp);

/* Perform error checking. */

	     if rcode = rcerr_addcpu_no_response then do; /* If CPU did not respond ... */
		switch_rel = bin (rel (addr (fv_iv_template$rsw_data)), 18) - bin (rel (fv_iv_p), 18);
		switchp = ptr (abs_seg_p, switch_rel);	/* See if CPU responded in another controller. */
		found = "0"b;			/* Clear switch. */
		do i = 0 to 7 while (^found);		/* Search the base of all controllers. */
		     if remember (i) ^= 0 then do;
			call privileged_mode_ut$swap_sdw (abs_seg_p, addr (tsdw (i)));
			if unspec (based_switches) then do;
			     scs$processor_switch_compare =
				bool (scs$processor_switch_template, based_switches, "0110"b);
			     scs$processor_switch_compare =
				scs$processor_switch_compare & scs$processor_switch_mask;
			     rcode = rcerr_addcpu_bad_switches;
						/* Change the error code. */
			     init_processor$wait_flag = -1;
						/* allow init_processor to die in a DIS */
			     found = "1"b;
			end;
		     end;
		end;
	     end;
%page;
/* Now give back the double pages we borrowed */

	     do i = 0 to 7;
		base = remember (i);
		if base > 0 then do;
		     call freecore (base);
		     call freecore (base + 1);
		end;
	     end;

	     string (tsdw1) = "0"b;
	     call privileged_mode_ut$swap_sdw (abs_seg_p, addr (tsdw1));
	     if rcode ^= 0 then do;			/* If an error occurred ... */
		call stop_cpu$destroy_1 (tag, tcode);	/* Clean up the mess we made. */
		return;
	     end;
	end;					/* Mask the discrepancy data. */

/* If initializing the bootload CPU, make simple call out. */

	else do;					/* If bootload CPU ... */
	     call init_processor$start_bootload_cpu;	/* Start up idle process. */
	     fgbx.hc_dbr = unspec (apte.dbr);		/* Place idle process DBR in flagbox. */
	end;

/* Update the config card for this processor. */

	call config_$find_2 (CPU_CARD_WORD, tag + 1, cpu_cardp);
						/* Find correct CPU card. */
	cpu_card.state = "on  ";			/* Set correct processor state. */
	call config_$update ();
	scs$nprocessors = scs$nprocessors + 1;		/* Count number of CPU's. */
	tc_data$ncpu = tc_data$ncpu + 1;
	rswp = addr (scs$processor_switch_data (2));	/*  lets look at cpu type */
	pdata.cpu_type = dps_rsw_2.cpu_type;		/* copy cpu type to processor data */
	call validate_cpu_card (tag, rswp);		/* validate cpu type and model */

	if tag ^= scs$bos_processor_tag then do;	/* If not during system initialization ... */
	     call syserr (ANNOUNCE, "start_cpu: Added CPU ^a.", substr (LETTERS, tag + 1, 1));
	     if pdata.cpu_type > 0 then		/* if DPS8 cpu... */
		if addr (scs$processor_switch_data (2)) -> dps8_rsw_2.id_prom then do;
						/* and id prom present */
		     cpu_mask = "0"b;
		     substr (cpu_mask, tag + 1, 1) = "1"b;
		     call set_procs_required (cpu_mask, tcode);
						/* Run on that CPU. */
		     if tcode ^= 0 then
			call syserr$error_code (CRASH, tcode, "start_cpu: Unable to run on CPU ^a",
			     substr (LETTERS, tag + 1, 1));
		     call privileged_mode_ut$read_id_prom (cpu_model, 0);
						/* get cpu model from ID PROM */
		     call privileged_mode_ut$read_id_prom (cpu_serial, 13);
						/* get cpu serial # from ID PROM */
		     call privileged_mode_ut$read_id_prom (cpu_ship_date, 26);
						/* get ship date from ID PROM */
		     call set_procs_required ("0"b, (0));
		     call syserr (LOG, "start_cpu: CPU ^a: Model #: ^a; Serial #: ^a; Ship date: ^a.",
			substr (LETTERS, tag + 1, 1), cpu_model, cpu_serial, cpu_ship_date);
						/* log info from ID PROM */
		end;
	     if scs$processor_switch_data (0) ^= scs$processor_data_switch_value then
		call syserr (ANNOUNCE, "start_cpu: CPU ^a data switches are ^w, should be ^w",
		     substr (LETTERS, tag + 1, 1), scs$processor_switch_data (0), scs$processor_data_switch_value);
	end;
	rcode = 0;
	return;
%page;
%include rcerr;
%page;
%include config_cpu_card;
%page;
%include flagbox;
%page;
%include scs;
%page;
%include rsw;
%page;
%include apte;
%page;
%include sdw;
%page;
%include fault_vector;
%page;
%include syserr_constants;
%page;
%include system_types;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   start_cpu: Added CPU CPUTAG

   S: $info

   T: In response to an operator "rcf add cpu CPUTAG" command, or at bootload
   time.

   M: The system has successfully added the CPU whose tag is CPUTAG to the
   configuration.

   A: $ignore

   Message:
   start_cpu: CPU CPUTAG: Model #: MODEL; Serial #: SERIAL; Ship date: YY/MM/DD.

   S: $log

   T: When a DPS8 CPU, whose tag is CPUTAG is added to the system.

   M: The MODEL, SERIAL and YY/MM/DD information is read from the DPS8 cpu's ID PROM.
   It is intended to be used as historical information
   for identifing CPUs, regardless of what their current tag is assigned as.

   A: $ignore

   Message:
   start_cpu: CPU CPUTAG data switches are XXXXXXXXXXXX, should be YYYYYYYYYYYY

   S: $info

   T: In response to an "rcf add cpu CPUTAG" command

   M: The data switches on the CPU indicated are not set properly. The proper
   value is given.

   A: The incorrect value will prevent returning to BCE on that CPU by means
   of EXECUTE SWITCHES. Certain incorrect values will activate software
   debugging traps. The switches should be corrected. This can be done
   while the CPU is running.

   Message:
   start_cpu: Unable to run on CPU x ERRORMESSAGE

   S: $crash

   T: In response to an "rcf add cpu CPUTAG" command or at bootload

   M: After adding a CPU, the system was unable to run on that CPU.
   This indicates hardware or software failure.

   A: $recover

   END MESSAGE DOCUMENTATION */
     end start_cpu;
