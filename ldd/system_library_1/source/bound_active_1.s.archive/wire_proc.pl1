/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

wire_proc: proc (wireptr, code);

/* This procedure is used to temporarily wire down a hardcore procedure and its linkage
   section.  It is assumed that ALL such wiring/unwiring is done by calls to this
   procedure.   A data base in the SST header is used to prevent conflicts between different
   processes wiring/unwiring tha same segment, and between calls for procedures contained
   in the same bound segment.  Linkage segments may be in a combined linkage
   segment.  It is assumed that no procedure or linkage has segment number of zero.

   Coded September 1970 by Roger R. Schell
   09/10/72, RB Snyder for follow-on
   09/18/74, SH Webber to repair locking problems.
   08/03/76, N. I. Morris to fix bug referencing linkage header
   04/06/81, W. Olin Sibert, for ADP conversion, stacq builtin
   10/12/83, Keith Loepere, for paged unpaged segments.
   */

	dcl     wireptr		 ptr parameter;	/* pointer to the procedure to be wired */
	dcl     code		 fixed bin (35) parameter; /* an error code that is returned to caller */

	dcl     linkno		 fixed bin (18);	/* segment number of linkage */
	dcl     linkoff		 fixed bin (18);	/* offset of our linkage */
	dcl     segno		 fixed bin (18);	/* segment number of procedure */
	dcl     tseg		 fixed bin (18);	/* segment number temporary */

	dcl     sdwp		 pointer;		/* Must declare here, 'cause include file can't */
	dcl     callptr		 pointer;		/* pointer into calling procedure */
	dcl     freep		 pointer;		/* pointer to a free entry */
	dcl     ip		 pointer;		/* pointer to entry of current index */
	dcl     linkptr		 pointer;		/* pointer to start of linkage */

	dcl     fp		 fixed bin;	/* first page being wired */
	dcl     freei		 fixed bin;	/* index of a free entry */
	dcl     i			 fixed bin;	/* loop index */
	dcl     lp		 fixed bin;	/* last page being wired */
	dcl     np		 fixed bin;	/* number of pages being wired */
	dcl     size		 fixed bin;	/* size of array of entries */
	dcl     temp_fp		 fixed bin;	/* temporary */
	dcl     temp_lp		 fixed bin;	/* temporary */
	dcl     increment		 fixed bin;	/* incrementing value for count of wiring */

	dcl     wire_call		 bit (1) aligned;	/* flag on if this was a call to wire */
	dcl     repeated_call	 bit (1) aligned;	/* on if are other outstanding calls */
	dcl     locked		 bit (1) aligned;	/* flag used during locking process */

	dcl     pds$process_id	 bit (36) aligned external static; /* id for locking */
	dcl     dseg$		 (0:1023) fixed bin (71) aligned external static;
	dcl     unpaged_page_tables$	 external;

	dcl     sys_info$system_type	 fixed bin external static;
	dcl     sst$wire_proc_data	 bit (36) aligned external static;
	dcl     sst$temp_w_event	 bit (36) aligned external static;

	dcl     1 lot$		 aligned like lot external static;

	dcl     error_table_$nolinkag	 fixed bin (35) external static; /* error code for no entry in lot */

	dcl     pxss$wait		 entry;
	dcl     pxss$addevent	 entry (bit (36) aligned);
	dcl     pxss$delevent	 entry (bit (36) aligned);
	dcl     pxss$notify		 entry (bit (36) aligned);
	dcl     get_ptrs_$given_segno	 entry (fixed bin (18)) returns (ptr); /* gets astep for a segment number */
	dcl     pc_wired$wire_wait	 entry (ptr, fixed bin, fixed bin); /* to read into core and wire pages */
	dcl     pc_wired$unwire	 entry (ptr, fixed bin, fixed bin); /* unwire pages */
	dcl     syserr		 entry options (variable); /* prints error message and crashes system */
	dcl     wired_utility_$caller	 entry () returns (ptr); /* procedure to get pointer to our caller */

	dcl     (addr, baseptr, bin, divide, hbound, max, null, ptr, stac, stacq) builtin;

/*  */

	wire_call = "1"b;				/* primary entry is a call to wire */
	increment = 1;				/* add to count for wire call */
	goto join_not_me;


wire_proc$unwire_proc: entry (wireptr, code);		/* entry to unwire specified procedure */

	wire_call = "0"b;				/* Unwiring. */
	increment = -1;				/* Decrement counts */

join_not_me:
	code = 0;					/* initialize error code to no error */
	callptr = wireptr;				/* copy argument */
	go to join;				/* join common code */


wire_proc$wire_me: entry ();				/* entry to wire the caller */

	wire_call = "1"b;				/* primary entry is a call to wire */
	increment = 1;				/* when wiring we add 1 to counts */
	goto join_me;


wire_proc$unwire_me: entry ();			/* entry to unwire the caller */

	wire_call = "0"b;				/* Unwiring. */
	increment = -1;				/* Decrement counts */

join_me:	callptr = wired_utility_$caller ();		/* get pointer to our caller */
						/* and fall through to common code */

join:	wpdp = addr (sst$wire_proc_data);		/* get pointer to data for wire_proc */
	upt_ptr = addr (unpaged_page_tables$);

	segno = bin (baseno (callptr), 18);		/* get caller's segment number */

	locked = stac (addr (wpd.temp_w_lock), pds$process_id); /* try to lock */
	do while (^locked);
	     call pxss$addevent (sst$temp_w_event);	/* tell TC event to wait on */
	     locked = stac (addr (wpd.temp_w_lock), pds$process_id); /* try to lock again */
	     if ^locked then call pxss$wait;		/* still locked, wait for it */
	     else call pxss$delevent (sst$temp_w_event);	/* locked, clean un unnecessary addevent */
	end;
	size = wpd.temp_w_max;			/* find how far we must search for a match */
	repeated_call = "0"b;			/* initialize */
	freei = hbound (wpd.temp_w, 1) + 1;		/* initialize to null value -- max of 7 entries */
	twep = null;				/* initialize */
	do i = size + 1 to 1 by -1;			/* search for the entry we will use */
	     ip = addr (wpd.temp_w (i));		/* get pointer to current entry */
	     tseg = bin (ip -> twe.segno, 18);		/* find who owns this entry */
	     if tseg = segno			/* is it us? */
	     then do;
		     twep = ip;			/* remember that this is our entry */
		     if wire_call			/* check if wire/unwire call */
		     then repeated_call = "1"b;	/* this is repeated call to wire */
		     else if bin (twe.count, 18) ^= 1	/* for unwire, check number of calls outstanding */
		     then repeated_call = "1"b;	/* there are other outstanding calls */
		end;
	     if tseg = 0				/* check for free entry */
	     then do;				/* rememper the free entry */
		     freep = ip;			/* remember the free index */
		     freei = i;
		end;
	end;

	linkno = binary (baseno (lot$.lp (segno)), 18);	/* get linkage segment number */
	if linkno = 0				/* check for segment that is not valid */
	then code = error_table_$nolinkag;		/* return error code */
	else do;					/* there is a linkage segment */
		if ^repeated_call			/* check if wired state is already set up */
		then do;
			if twep = null		/* check if we already have an entry */
			then do;			/* this is the first request to wire procedure */
				linkoff = binary (rel (lot$.lp (segno)), 18); /* get linkage starting offset */
				linkptr = ptr (baseptr (linkno), linkoff); /* make pointer to linkage header */
				if freei > hbound (wpd.temp_w, 1) /* make certain end of array not passed */
				then call syserr (1, "wire_proc: too many temp wired segments."); /* crash */
				else wpd.temp_w_max = max (size, freei); /* update count of wired segs */
				twep = freep;	/* use a free entry */

				twe.seg_w = check_unpaged (addr (dseg$ (segno))); /* unpaged is always wired */
				twe.link_w = check_unpaged (addr (dseg$ (linkno))); /* remember linkage wired */

				twe.segno = bit (segno, 18); /* fill in our segment number */
				twe.linkno = bit (linkno, 18); /* and for our linkage */
				twe.flp = bit (divide (linkoff, 1024, 8, 0), 8); /* compute the first link page */
						/* compute last page from link length */
				temp_lp = linkoff - 1 + bin (linkptr -> header.block_length, 18);
				twe.llp = bit (divide (temp_lp, 1024, 8, 0), 8);
			     end;

			if ^twe.link_w		/* check if linkage was initially wired */
			then do;			/* linkage is not initially wired */
				fp, temp_fp = bin (bin (twe.flp, 8), 17); /* get first page number in linkage */
				lp, temp_lp = bin (bin (twe.llp, 8), 17); /* and last page */
				do i = 1 to size;	/* check for overlap of linkage pages */
				     ip = addr (wpd.temp_w (i)); /* get pointer to entry */
				     if ip ^= twep	/* skip our own entry */
				     then if linkno = bin (ip -> twe.linkno, 18) /* if same linkage segment */
					then if fp = bin (ip -> twe.llp, 8) /* check for conflict with our first page */
					     then fp = temp_fp + 1; /* this page is taken care of by someone else */
					     else if lp = bin (ip -> twe.flp, 8) /* check for conflict with our last page */
					     then lp = temp_lp - 1; /* taken care of , so we skip last page */
				end;

				if fp <= lp	/* check if all linkage pages already wired */
				then do;
					astep = get_ptrs_$given_segno (linkno); /* get AST pointer for linkage segment */
					np = lp - fp + 1; /* compute number of pages */
					if wire_call /* check if wire or unwire */
					then call pc_wired$wire_wait (astep, fp, np); /* wire down linkage pages */
					else call pc_wired$unwire (astep, fp, np); /* unwire linkage pages */
				     end;
			     end;

			if ^twe.seg_w		/* check if procedure was initially wired */
			then do;
				astep = get_ptrs_$given_segno (segno); /* get AST pointer for procedure segment */
				if wire_call	/* check if wire or unwire */
				then call pc_wired$wire_wait (astep, 0, -1); /* wire all pages of procedure */
				else call pc_wired$unwire (astep, 0, -1); /* unwire all pages of procedure */
			     end;

			if ^wire_call		/* check if we just unwired */
			then do;			/* if unwired, then release our entry */
				twe.segno = (18)"0"b; /* clear procedure segment number */
				twe.linkno = (18)"0"b; /* and linkage segment number */
				if twep = addr (wpd.temp_w (size)) /* check if we have the last entry */
				then wpd.temp_w_max = size - 1; /* reduce count of active entry max */
			     end;
		     end;

/* bump counter of outstanding calls */
		twe.count = bit (bin (bin (twe.count, 18) + increment, 18), 18);
	     end;
	if stacq (wpd.temp_w_lock, "0"b, pds$process_id) then call pxss$notify (sst$temp_w_event);
	else call syserr (1, "wire_proc: lock not locked");
	return;
%page;
check_unpaged: proc (sdw_ptr) returns (bit (1) aligned);

/* See if the sdw pointed to is unpaged (not page control paged) */

	dcl     sdw_ptr		 pointer;

	if sys_info$system_type = ADP_SYSTEM then	/* Examine the appropriate SDW */
	     return ((bin (sdw_ptr -> adp_sdw.add, 26) < upt.sst_absloc)
		| (upt.sst_last_loc < bin (sdw_ptr -> adp_sdw.add, 26)));
	else
	     return ((bin (sdw_ptr -> l68_sdw.add, 24) < upt.sst_absloc)
		| (upt.sst_last_loc < bin (sdw_ptr -> l68_sdw.add, 24)));
     end;
%page; %include wire_proc_data;
%page; %include linkdcl;
%page; %include lot;
%page; %include aste;
%page; %include system_types;
%page; %include "sdw.l68";
%page; %include "sdw.adp";
%page; %include unpaged_page_tables;
/*  */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   wire_proc: too many temp wired segments.

   S: $crash

   T: $run

   M: A request has been made to the supervisor to temp-wire an
   eighth hardcore segment. Only seven are allowed. Temp-wiring is used for
   supervisor programs, not I/O buffers.
   $err

   A: $recover
   $boot_tape

   Message:
   wire_proc: lock not locked

   S: $crash

   T: $run

   M: The lock on temp-wiring in the SST was found unlocked at the time
   an attempt was made to unlock it.  The SST may be damaged.
   $err

   A: $recover

   END MESSAGE DOCUMENTATION */
     end wire_proc;
