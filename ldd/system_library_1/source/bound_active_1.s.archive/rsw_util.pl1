/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* RSW_UTIL - Procedures to Read and Interpret the Processor Switches.
   coded 4/12/76 by Noel I. Morris
   Modfified 9/04/80 by J. A. Bush for the DPS8/70M CPU
*/


/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */




rsw_util: proc;

dcl  tag fixed bin (3),				/* system controller tag */
     enabled bit (1) aligned,				/* "1"b if processor port enabled */
     base fixed bin (17),				/* base address of memory in controller */
     size fixed bin (17),				/* size of memory in controller */
     interlace fixed bin (3);				/* memory interlace type */

dcl  rsw_1_3_data bit (36) aligned,
     rsw_2_data bit (36) aligned,
     rsw_4_data bit (36) aligned,
    (rsw2p, rsw4p) ptr,
     rsw fixed bin (3);

dcl  privileged_mode_ut$rsw entry (fixed bin (3), bit (36) aligned);

dcl (addr, bin, divide) builtin;

dcl  pip ptr;					/* pointer to port info */

dcl 1 pi like rsw_1_3.port_info based (pip) unal;		/* port info */

% include rsw;

% include scs;



port_info: entry (tag, enabled, base, size, interlace);	/* entry to return info about a port */


	rsw2p = addr (rsw_2_data);			/* Set pointer. */
	rswp = addr (rsw_1_3_data);			/* Set pointer. */
	call privileged_mode_ut$rsw (2, rsw_2_data);	/* get the cpu type. */
	if rsw2p -> dps8_rsw_2.cpu_type = 1 then do;	/* if DPS8 cpu... */
	     if tag > 3 then do;			/*  can't have for than 4 scus on dps8 so... */
		enabled = "0"b;			/* tell caller this port disabled */
		return;
	     end;
	     pip = addr (rsw_1_3.port_info (tag));	/* there can only be 4 SCUs... */
	     call privileged_mode_ut$rsw (1, rsw_1_3_data); /* Read port info. */
	     size = divide (dps8_mem_size_table (pi.mem_size), 1024, 17, 0);
	     base = bin (pi.port_assignment, 3) * size;	/* Compute base address of memory. */
	     if pi.interlace_enable then		/* If interlace is enabled ... */
		if rsw2p -> dps8_rsw_2.interlace_info (tag) then /* If two-word interlace... */
		     interlace = 2;
		else interlace = 4;			/* If four-word interlace ... */
	     else interlace = 0;			/* If no interlace ... */
	end;
	else do;					/* must be a DPS or L68 cpu */
	     rsw4p = addr (rsw_4_data);		/* Set pointer to data. */
	     if tag < 4 then do;			/* Decide on RSW 1 or RSW 3 data. */
		rsw = 1;
		pip = addr (rsw_1_3.port_info (tag));
	     end;
	     else do;
		rsw = 3;
		pip = addr (rsw_1_3.port_info (tag - 4));
	     end;
	     call privileged_mode_ut$rsw (rsw, rsw_1_3_data); /* Read port info. */
	     call privileged_mode_ut$rsw (4, rsw_4_data); /* Read half/full and interlace type data. */
	     size = divide (dps_mem_size_table (pi.mem_size), 1024, 17, 0);
	     base = bin (pi.port_assignment, 3) * size;	/* Compute base address of memory. */
	     if rsw4p -> rsw_4.half (tag) then
		size = divide (size, 2, 17, 0);	/* Halve the size if so indicated. */
	     if pi.interlace_enable then		/* If interlace is enabled ... */
		if rsw4p -> rsw_4.four (tag) then	/* If two-word interlace ... */
		     interlace = 2;
		else interlace = 4;			/* If four-word interlace ... */
	     else interlace = 0;			/* If no interlace ... */
	end;
	enabled = pi.port_enable;			/* Return port enabled bit. */

	return;


set_rsw_mask: entry (tag, enabled);			/* entry to set mask for checking CPU switches */


	if tag < 4 then do;				/* Set appropriate RSW data. */
	     rswp = addr (scs$processor_switch_mask (1));
	     pip = addr (rsw_1_3.port_info (tag));
	end;
	else do;
	     rswp = addr (scs$processor_switch_mask (3));
	     pip = addr (rsw_1_3.port_info (tag - 4));
	end;

	pi.port_enable = enabled;			/* Set or clear enabled bit. */

	return;



init_rsw_mask: entry (tag, enabled);			/* entry to set initial mask for switch checking */


	if tag < 4 then do;				/* Set appropriate RSW data. */
	     rswp = addr (scs$processor_switch_mask (1));
	     pip = addr (rsw_1_3.port_info (tag));
	end;
	else do;
	     rswp = addr (scs$processor_switch_mask (3));
	     pip = addr (rsw_1_3.port_info (tag - 4));
	end;

	pi.port_assignment = "111"b;			/* Compare port assignment switches. */
	pi.interlace_enable = "1"b;			/* Compare interlace enable switches. */
	pi.mem_size = 7;				/* Compare mem size switches. */
	pi.port_enable = enabled;			/* Compare enable switch only if enabled. */

	rswp = addr (scs$processor_switch_mask (4));
	rsw_4.four (tag) = "1"b;			/* Compare four-word interlace switches. */
	rsw_4.half (tag) = "1"b;			/* Compare half/full switches. */

	if tag < 4 then do;				/* Set appropriate RSW data. */
	     rswp = addr (scs$processor_switch_template (1));
	     pip = addr (rsw_1_3.port_info (tag));
	end;
	else do;
	     rswp = addr (scs$processor_switch_template (3));
	     pip = addr (rsw_1_3.port_info (tag - 4));
	end;

	pi.port_enable = "1"b;			/* If compared, this bit must be ON. */

	return;



     end rsw_util;
