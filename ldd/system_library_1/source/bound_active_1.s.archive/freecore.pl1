/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* This is an procedure to add a block of free core to the used list.
   This is called during initialization and reconfiguration
   Modified 3/2/76 by Noel I. Morris for new reconfig
   Modified 6/21/82 by E. N. Kittlitz to move core map.
   Modified 4/11/84 by Keith Loepere for thread entrypoint.
   Modified 1985-03-11, BIM: call check_parity_for_add. */

freecore: proc (page_no);

	dcl     page_no		 fixed bin,	/* number of the page being added */
	        page		 fixed bin,	/* copy of page number */
	        code		 fixed bin (35),
	        saved_mask		 fixed bin (71),	/* saved interrupt mask */
	        stk_ptwp		 ptr,		/* pointer to wired stack page page table word */
	        usedptr		 ptr;		/* pointer to first entry on used list */

	dcl     pmut$lock_ptl	 entry (fixed bin (71), ptr),
	        syserr		 entry options (variable),
	        pmut$check_parity_for_add entry (fixed bin, fixed bin (35)),
	        pmut$unlock_ptl	 entry (fixed bin (71), ptr),
	        wire_proc$wire_me	 entry,
	        wire_proc$unwire_me	 entry;

	dcl     (addr, bin, ptr, rel)	 builtin;

	dcl     sst$cmp		 ptr ext;
	dcl     sst$first_core_block	 fixed bin ext;
	dcl     sst$last_core_block	 fixed bin ext;
	dcl     sst$nused		 fixed bin ext;
	dcl     sst$usedp		 bit (18) ext;
	dcl     sst$wusedp		 bit (18) aligned ext;
%page; %include scs;
%page; %include cmp;
%page; %include syserr_constants;
%page;
	page = page_no;				/* copy argument to (soon to be wired) stack */
	call wire_proc$wire_me;			/* wire ourself down before we lock page table */
	call pmut$lock_ptl (saved_mask, stk_ptwp);	/* lock and mask */

	cmep = addr (sst$cmp -> cma (page));		/* get pointer to core map entry */
	if cme.bp = (18)"1"b then do;			/* only free what's not being used */

/* Check for any parity errors reading the memory */

		call pmut$check_parity_for_add (page, code);
		if code ^= 0 then call syserr (ANNOUNCE, "freecore: parity error in frame ^o of memory.", page);
		else do;
			call thread_into_cmes;

			cmep -> cme.ptwp = (18)"0"b;	/* mark this entry as free */

			cmep -> cme.abs_w, cmep -> cme.removing = "0"b; /* clear flags for entry */
			if scs$controller_data (bin (cmep -> cme.contr)).abs_wired /* check if pages in this controller are abs_wired */
			then cmep -> cme.abs_usable = "1"b; /* mark this page */

		     end;
	     end;
	call pmut$unlock_ptl (saved_mask, stk_ptwp);	/* unlock and unmask */
	call wire_proc$unwire_me;			/* unwire this procedure */
	return;
%page;
thread_into_cmes: proc;

	if sst$usedp				/* check if list has any entries */
	then do;					/* add block to existing list */
		usedptr = ptr (sst$cmp, sst$usedp);	/* get pointer to first entry */
		cmep -> cme.bp = usedptr -> cme.bp;	/* thread at end of list */
		cmep -> cme.fp = rel (usedptr);
		ptr (sst$cmp, usedptr -> cme.bp) -> cme.fp, usedptr -> cme.bp = rel (cmep);
		if page > sst$last_core_block then sst$last_core_block = page;
		else if page < sst$first_core_block then sst$first_core_block = page;
	     end;
	else do;					/* first entry to go on the list */
		cmep -> cme.bp, cmep -> cme.fp = rel (cmep); /* thread first entry to self */
		sst$first_core_block, sst$last_core_block = page; /* initialize core bounds */
		sst$wusedp = rel (cmep);		/* init write pointer */
	     end;
	if sst$usedp = sst$wusedp
	then sst$wusedp = rel (cmep);			/* dont let wusedp get out of sync */
	sst$usedp = rel (cmep);			/* update list pointer to start here */
	sst$nused = sst$nused + 1;			/* record that one page was added */
	return;
     end;
%page;
thread: entry (page_no);

/* Don't fiddle with page or cme, just thread into cme list */

	page = page_no;				/* copy argument to (soon to be wired) stack */
	call wire_proc$wire_me;			/* wire ourself down before we lock page table */
	call pmut$lock_ptl (saved_mask, stk_ptwp);	/* lock and mask */

	cmep = addr (sst$cmp -> cma (page));		/* get pointer to core map entry */

	call thread_into_cmes;

	call pmut$unlock_ptl (saved_mask, stk_ptwp);	/* unlock and unmask */
	call wire_proc$unwire_me;			/* unwire this procedure */
	return;
%page;

/* BEGIN MESSAGE DOCUMENTATION

Message:
freecore: parity error in frame XXX of memory.

S:	$info

T:	$init

M:	A memory parity error has been detected in page XXX of memory.
The page will not be put in use.

A:	$ignore


END MESSAGE DOCUMENTATION */

     end freecore;
