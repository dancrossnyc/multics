" ******************************************************
" *                                                    *
" * Copyright, (C) Honeywell Bull Inc., 1987           *
" *                                                    *
" * Copyright (c) 1986 by Massachusetts Institute of   *
" * Technology and Honeywell Information Systems, Inc. *
" *                                                    *
" * Copyright (c) 1972 by Massachusetts Institute of   *
" * Technology and Honeywell Information Systems, Inc. *
" *                                                    *
" ******************************************************

"
"	search_ast.alm	-fast AST searcher
"	Jan. 19, 1976 by Bernard Greenberg
"	Modified December 1981 by J. Bongiovanni for new hash table
"	Modified May 1983 by E. N. Kittlitz for check entry.
"
"""	search_ast entry
"	astep = search_ast (uid);
"
"	astep = null if UID not active.
"
"
"""	check entry
"	astep = search_ast$check (uid, pvid, vtocx, code);
"
"	if astep ^= null, code is 0
"	if astep = null then
"		if code = 0, segment is just not active
"		else uid was matched by search, but pvid or vtocx of aste
"			did not match supplied pvid/vtocx.

	name	search_ast
	entry	search_ast,check,hash_in,hash_out

search_ast:			"astep = search_ast (uid);
	eax1	4
	tra	search_ast_join

check:				"astep = search_ast (uid, pvid, vtocx, code);
	eax1	10
	stz	ap|8,*		zero code

search_ast_join:
	lda	ap|2,*		get uid
	tsx0	search		look it up
	tra	search_ast_fails	not there
	cmpx1	=4,du		search_ast entry?
	tze	search_ast_succeeds sure enough
	lda	bp|aste.vtocx	double-check the aste
	ana	=o777777,dl	just vtocx...
	cmpa	ap|6,*		compare with desired vtocx
	tnz	search_ast_fails_check oh dear, fooled by scrambled uid
	ldq	bp|aste.pvtx_word	and now triple-check
	qrl	aste.pvtx_shift	ASTE PVTX in QL
	anq	aste.pvtx_mask,dl	nice and tidy
	mpy	pvte_size,dl	index into array
	lda	pvt$array+pvte.pvid-pvte_size,ql pvt is (1:n). get pvid
	cmpa	ap|4,*		compare with pvid supplied
	tnz	search_ast_fails_check tricky fellow

search_ast_succeeds:
	spribp	ap|0,x1*		found astep
	short_return

search_ast_fails:
	eppbp	null,*		not found
	spribp	ap|0,x1*		
	short_return

search_ast_fails_check:
	lda	error_table_$vtoce_connection_fail
	sta	ap|8,*		return code
	eppbp	null,*		null return value
	spribp	ap|0,x1*
	tra	alm_syserr_caller$search_ast_double_uid " returns to our caller


hash_in:		"call search_ast$hash_in (astep), uid having been set.

	eppbp	ap|2,*
	eppbp	bp|0,*		arg is ptr
	lda	bp|aste.uid
	tsx0	search		look it up
	tra	*+2		not found
	tra	err		found, this is wrong
	ldx2	lb|0,3		get current list head
	sarbp	lb|0,3		set new guy
	stx2	bp|aste.ht_fp	splice in
	short_return


hash_out:		"call search_ast$hash_out (astep), uid having been set

	eppbp	ap|2,*
	eppbp	bp|0,*
	lda	bp|aste.uid
	tsx0	search
	tra	err		must be found
	ldx2	bp|aste.ht_fp	save next ptr
	eax4	0,4		were we first?
	tze	were_first
	stx2	bb|aste.ht_fp,4	thread last to next, not first
	eax4	0
	stx4	bp|aste.ht_fp	clear thread
	short_return

were_first:
	stx4	bp|aste.ht_fp	clear thread
	stx2	lb|0,3		thread out
	short_return


"
"	search -internal procedure to do actual search
"	Called with uid in A, returns to call + 1 if not found
"	Returns to call + 2 if found, bp and x6 point to ASTE,
"	x4 is 0 if first, otherwise x4 -> previous. bb -> sst
"	lb -> AST hash table, x3 -> slot in table

search:	eppbb	sst$
	epplb	sst$ast_ht_ptr
	epplb	lb|0,*		lb -> AST hash table
	eaq	0,al
	qrl	18
	anq	sst$ast_ht_uid_mask
	eax3	0,ql		get hash index in x3
	eax4	0		set first time sw

	ldx6	lb|0,3		start at head
	tze	0,0		if 0, nothing in list
lp:	cmpa	bb|aste.uid,6	is this the one?
	tze	found		yes
	eax4	0,6		save prev ptr
	ldx6	bb|aste.ht_fp,6	move up
	tnz	lp		if stuff, loop
	tra	0,0		no stuff, not found
found:	eppbp	bb|0,6
	tra	1,0

err:	call	alm_syserr_caller$search_ast_hash_error,(null_argl)
	tra	err

	even
null:	its	-1,1
null_argl:zero	0,0
	zero	0,0

	include	aste

	include	pvte

	end
