/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/*
			deactivate (astep, code)
			deactivate$for_delete (astep, code)



FUNCTION -

The procedure "deactivate" deactivates the segment whose ASTE is pointed  to  by
the  input argument "astep".  If the deactivation is successful, it returns with
code=0; if the deactivation fails, it returns with code=0, or ehs=1.

The procedure "deactivate" does not concern itself with the AST lock. It assumes
there is no race condition.  It is the responsibility of the caller to make sure
there is no race condition. The initializer  or  shutdown  of  course  may  call
deactivate  without  locking  the AST. For normal processes, however, the caller
must make sure the AST is locked before the call  is  issued,  and  it  will  be
unlocked upon return as soon as it is safe to do so.

The  ASTE  is  left  in  the  circular list associated with the size of the page
table, at the first position, so that it will be found right away should an ASTE
of this size be needed.

The ASTE is removed from the uid hash table.

All items of the ASTE are zeroed except fp, bp, ptsi and marker. All  PTW's  are
initialized with a page not in core flag and a coded null disk address.

deactivate$for_delete does not update the VTOCE

MODIFICATIONS -

10/13/82  J. Bongiovanni, to check number of pages in core after cleanup
09/17/82  J. Bongiovanni, for deactivate$for_delete
03/21/81	W. Olin Sibert, for ADP PTWs (or, rather, lack of them in this program)
04/19/81	W. Olin Sibert   - Eliminated maintenance of aste.ic
11/18/80  E. N. Kittlitz   - Modified for new dtu/dtm calculation.
04/10/75	Andre Bensoussan - Modified for the new storage system.

*/



deactivate        : proc  (a_astep, a_code);

dcl  a_astep	ptr,
     a_code	fixed bin (35);



dcl  pastep	ptr,
    (last, relp)	bit (18) aligned,
     code		fixed bin (35),
     for_delete_call 
                    bit (1);



dcl (error_table_$illegal_deactivation, error_table_$deact_in_mem)	fixed bin (35) ext;

dcl sst_seg$ external static;
dcl  sst$deact_count fixed bin (35) external static;
dcl sstp pointer;

dcl
     pc$cleanup		entry (ptr),
     setfaults		entry (ptr, bit(1) aligned),
     update_vtoce$deact	entry (ptr, fixed bin (35)),
     put_aste		entry (ptr),
     search_ast$hash_out	entry (ptr);

dcl (addr, binary, bit, fixed, max, ptr, rel) builtin;

/*  */

          for_delete_call = "0"b;
          goto COMMON;

for_delete:
	entry (a_astep, a_code);

	for_delete_call = "1"b;

COMMON:	

	a_code = 0;				/* zero return code */
	sstp   = addr (sst_seg$);			/* get a pointer to the SST */
	astep  = a_astep;				/* copy arguments */

	if (aste.infp ^= ""b) | aste.ehs | (aste.par_astep = ""b) | fixed (aste.np, 9) > 256 then do;
	     a_code = error_table_$illegal_deactivation;
	     return;
	     end;

	call setfaults (astep, "0"b);			/* set faults in all SDW's */

	call pc$cleanup (astep);			/* cleanup the segment (page control) */
	if aste.np ^= ""b then do;			/* cleanup failed */
	     a_code = error_table_$deact_in_mem;
	     return;
	end;

	if ^for_delete_call then do;
	     call update_vtoce$deact (astep, code);	/* update the vtoc entry */
	     if code ^= 0 then do;
		a_code = code;
		return;
	     end;
	end;
	

	pastep = ptr (sstp, astep -> aste.par_astep);	/* get a pointer to the parent AST entry */

	last = "0"b;				/* delete the entry from the list of inferior entries */
	relp = pastep -> aste.infp;			/* get pointer to inferior chain */
	do while (relp ^= rel(astep));		/* loop until end of list (shouldn't get to end ^= rel(astep)) */
	     last = relp;				/* go to next entry (but save pointer to previous one) */
	     relp = ptr (sstp, relp) -> aste.infl;
	end;
	if last = "0"b then pastep -> aste.infp = astep -> aste.infl;
	     else ptr (sstp, last) -> aste.infl = astep -> aste.infl;

						/* set dtu of parent to smallest reasonable value */
	pastep -> aste.dtu = bit (max (binary (pastep -> aste.dtu, 36),
	     binary (pastep -> aste.dtm, 36), binary (astep -> aste.dtu, 36)), 36);

	call search_ast$hash_out (astep);

	call put_aste (astep);

	sst$deact_count = sst$deact_count + 1; /* meter */

	return;

%page; %include aste;

     end deactivate;
