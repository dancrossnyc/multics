/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* OUTWARD_CALL_HANDLER - Handle Calls to Outer Rings.
   Modified 6/79 by Mike Grady for stack 0 sharing
   modified 11/5/76 by M. Weaver for stack header extension
   9/12/72 - Noel I. Morris			*/

outward_call_handler: proc (mc_ptr);

dcl  mc_ptr ptr;					/* pointer to machine conditions */

dcl (caller_ringno,					/* ring in which fault occurred */
     called_ringno) fixed bin (3),			/* target ring of call */
     called_segno fixed bin (15),			/* target procedure of call */
     r fixed bin (3),				/* ring number */
     i fixed bin,					/* iteration variable */
     ap ptr;					/* pointer to argument list */

dcl 1 arglist_header based (ap) aligned,		/* argument list header */
    2 arg_count fixed bin (17) unal,
    2 code fixed bin (17) unal,
    2 desc_count fixed bin (17) unal,
    2 pad fixed bin (17) unal;

dcl  dseg$ ext;					/* descriptor segment */

dcl (pds$highest_ring,				/* highest permissable ring for process */
     pds$initial_ring) fixed bin (3) ext,		/* initial non-hardcore ring for process */
     pds$ips_mask (0:7) bit (36) aligned ext,		/* IPS mask for each ring */
     pds$first_call fixed bin ext,			/* non-zero until first call from Ring 0 */
     pds$validation_level fixed bin (3) ext,		/* user vaildation level */
     pds$stacks (0:7) ptr ext,			/* pointers to stacks for each ring */
     active_all_rings_data$stack_base_segno fixed bin (18) ext; /* segno of base of array of 8 stacks */

dcl (addr,
     addrel,
     baseptr,
     bit,
     min,
     null,
     ptr,
     size,
     substr) builtin;


	% include mc;

	% include sdw;

	% include its;

	% include stack_header;
	% include lot;

	% include stack_frame;


/*  */

/* Examine the machine conditions to determine the calling and target ring numbers.
   The highest ring in which this process may run is found in pds$highest_ring.
   The target ring number may not exceed this value.  An inner ring procedure
   is not permitted to pass any arguments to an outer ring.  (The outer ring
   procedure would not be able to reference such arguments anyway.)		*/

	mcp = mc_ptr;				/* Copy pointer to machine conditions. */
	scup = addr (mcp -> mc.scu (0));		/* Generate pointer to SCU information. */

	sdwp = addr (dseg$);			/* Generate pointer to descriptor segment. */

	caller_ringno = fixed (scup -> scu.ppr.prr, 3);	/* Get ring in which fault occurred. */
	called_segno = fixed (scup -> scu.tpr.tsr, 15);	/* Get target procedure of call. */
	called_ringno = fixed (sdwp -> sdwa (called_segno).r1, 3);
						/* Get target ring number from SDW. */
	if called_ringno > pds$highest_ring then	/* Don't allow calls too far out. */
	     go to error_8;

	if caller_ringno = 0 then do;			/* Call out from ring 0 */

/* A process may make only one outward call from Ring 0 during its existence.
   The target ring number of this call must be no less than the value
   contained in pds$initial_ring.  The stack history contained in the Ring 0
   stack will automatically be "forgotten" when the FIM returns to the outer ring.	*/

	     if pds$first_call = 0 then		/* If this is not the first call from Ring 0 ... */
		go to error_1;			/* ... don't allow another. */
	     pds$first_call = 0;			/* Indicate first call from Ring 0 is being accomplished. */
	     called_ringno = max (called_ringno, pds$initial_ring);
						/* Don't allow call inside initial ring. */
	end;
	else do;

	     ap = mcp -> mc.prs (apx);		/* Get pointer to argument list. */
	     if ap -> arglist_header.arg_count ^= 0 then	/* Don't allow any arguments to be passed out. */
		go to error_8;

/* The caller ring's stack, as well as the stacks belonging to all
   intermediate rings, must be reset.  No ring lower than the target ring
   will contain any stack history.					*/

	     do r = caller_ringno to called_ringno;	/* Fudge all intermediate stacks. */
		sb = pds$stacks (r);		/* Get pointer to this ring's stack. */
		if sb ^= null then			/* If stack exists for ring ... */
		     sb -> stack_header.stack_end_ptr = sb -> stack_header.stack_begin_ptr;
						/* Reset stack. */
	     end;
	end;

/* Now modify the machine conditions.  Set sp and sb to the target
   ring's stack.  Set the ring number to the target ring.  Make
   a dummy argument list containing no arguments, and set ap to point
   to it.  Finally, return to the FIM.					*/

	sb = baseptr (active_all_rings_data$stack_base_segno + called_ringno); /* Compute pointer to target ring's stack. */
	mcp -> mc.prs (spx) = null;			/* Set null pointer in sp ... */
	mcp -> mc.prs (sbx) = sb;			/* ... and correct sb in machine conditions. */

	scup -> scu.tpr.trr,
	     scup -> scu.ppr.prr = bit (called_ringno, 3); /* Change ring number in machine conditions. */

	substr (scup -> scu.even_inst, 19, 10),		/* Modify both even and odd instructions to be ... */
	     substr (scup -> scu. odd_inst, 19, 10)	/* ... TRA (710(0)).  The CALL instruction would cause ... */
	     = "1110010000"b;			/* ... SB segno to be loaded into SP segno. */

	pds$validation_level = called_ringno;		/* Set the validation level to called ring. */

	ap = ptr (sb, size (stack_header));		/* Make a dummy arglist in stack (after header) */
	ap -> arglist_header.arg_count, ap -> arglist_header.desc_count, ap -> arglist_header.pad = 0;
	ap -> arglist_header.code = 4;		/* Make a null argument list. */

	mcp -> mc.prs (apx) = ap;			/* Set ap in machine conditions. */

	do i = 0 to 7;				/* Set the ring number in all pointer registers. */
	     addr (mcp -> mc.prs (i)) -> its.ringno = bit (called_ringno, 3);
	end;					/* PR's may not point to an inner ring. */

	do i = 0 to called_ringno - 1;		/* mask IPS signals in all lower rings */
	     pds$ips_mask (i) = (36)"0"b;		/* set masks to zero */
	end;

	return;					/* And return to caller. */


/* Error returns. */

error_1:
	mcp -> mc.errcode = 1;			/* Return error code. */
	return;

error_8:
	mcp -> mc.errcode = 8;
	return;




     end outward_call_handler;
