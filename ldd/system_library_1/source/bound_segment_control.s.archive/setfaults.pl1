/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
setfaults: proc (a_astep, a_recalculate_access);

/* Modified by B. Greenberg 4/24/74 for cache and v2pl1 */
/* Rewritten by R. Bratt 2/4/75 to restructure the code, clear associative memories, and add the disconnect entry */
/* Modified by R. Bratt 10/9/75  to adhere to nss locking strategies */
/* Modified by E. Stone 5/75 to retain access in the sdw, ie just to zero the df bits and the address */
/* Modified by D. Vinograd 6/76 to allow setfaulting of hardcore segs - used by the volume dumper */
/* Modified 03/21/81, W. Olin Sibert, for ADP SDW formats */
/* Reorganized, 04/17/81, WOS */
/* Modified 02/15/83, E. N. Kittlitz, added if_256K. */
/* Modified 08/09/83, E. N. Kittlitz, setfaults$if_active added pvid, vtocx args */
/*
   setfaults contains four entry points

   ---> setfaults$setfaults allows a process to disconnect all sdws from an active segment.
   As an optimization, if the setfaults is to cause access recalculation then the connected
   sdws have their fault bits set but they remain on the trailer. The associative memories
   of all processors are cleared. The ast is assumed to be locked.
   USAGE: call setfaults (astep, recalculate_access);

   ---> setfaults$if_active is used to setfaults when given a uid. It searches
   the ast and if the segment is active all connected sdws are faulted. See setfaults$setfaults.
   The ast is presumed to be unlocked.
   USAGE: call setfaults$if_active (uid, pvid, vtocx, recalculate_access);

   ---> setfaults$deltrailer is used to clean up a dead process.
   The ast is presumed to be locked!
   USAGE: call setfaults$deltrailer (astep, segno, dstep);

   ---> setfaults$disconnect is used to disconnect a segment number in the calling
   process from its aste. This code depends on  pmut$swap_sdw to clear this processors'
   sdw associative memory. The ast is assumed to be unlocked.
   USAGE: call setfaults$disconnect (segno);

   ---> setfaults$cache is used to set cache bits in all the sdws connected to an aste.
   The associative memories of all processors are cleared. The ast must be locked.
   USAGE: call setfaults$cache (astep, cache_bit);

   astep ptr --- aste pointer
   segno fixed bin(17) --- segment number to be disconnected
   uid bit (36) aligned --- unique identifier of segment of interest
   dstep fixed bin(17) --- relative descriptor segment aste pointer
   recalculate_access bit(1) aligned ---  set to cause access recalculation
   cache_bit bit(1) aligned --- bit to stuff into sdw cache bit

*/

/**/

dcl  a_astep ptr parameter;
dcl  a_cache_bit bit (1) aligned parameter;
dcl  a_segno fixed bin (17) parameter;
dcl  a_uid bit (36) aligned parameter;
dcl  a_pvid bit (36) aligned parameter;
dcl  a_rdstep fixed bin (17) parameter;
dcl  a_recalculate_access bit (1) aligned parameter;
dcl  a_vtocx fixed bin parameter;

dcl  dstep ptr;
dcl  (segno, rdstep) fixed bin (17);
dcl  uid bit (36) aligned;
dcl  pvid bit (36) aligned;
dcl  vtocx fixed bin;
dcl  cache_bit bit (1) aligned;
dcl  disconnect_any_msl bit (1) aligned;
dcl  sdwp pointer;

dcl  (set_cache_bit, process_all_trailers, recalculate_access) bit (1) init ("0"b);

dcl  pds$dstep bit (18) aligned external static;
dcl  sst$tfreep pointer external static;
dcl  sst$setfaults_acc fixed bin (35) external static;
dcl  sst$setfaults_all fixed bin (35) external static;
dcl  sys_info$system_type fixed bin external static;

dcl  sst_seg$ external static;
dcl  ds_seg$ (0:1023) fixed bin (71) external static;
dcl  dseg$ (0:1023) fixed bin (71) external static;

dcl  get_ptrs_$given_astep entry (ptr) returns (fixed bin (71));
dcl  get_ptrs_$given_segno entry (fixed bin) returns (ptr);
dcl  lock$lock_ast entry ();
dcl  lock$unlock_ast entry ();
dcl  page$cam entry ();
dcl  pmut$swap_sdw entry (ptr, ptr);
dcl  search_ast$check entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin (35)) returns (ptr);
dcl  syserr ext entry options (variable);
dcl  thread$out ext entry (ptr, bit (18) aligned);

dcl  (addr, baseno, binary, null, ptr, rel) builtin;

/**/

	astep = a_astep;				/* copy the arguments */
	recalculate_access = a_recalculate_access;
	process_all_trailers = "1"b;
	set_cache_bit = "0"b;

	call process_trailers ();
	call page$cam ();
	return;					/* End of setfaults$setfaults */



setfaults$if_active: entry (a_uid, a_pvid, a_vtocx, a_recalculate_access);

	uid = a_uid;				/* copy these as service to caller */
	pvid = a_pvid;				/* avoid segfaults on directory */
	vtocx = a_vtocx;				/* if that's where formals are */
	recalculate_access = a_recalculate_access;
	process_all_trailers = "1"b;
	set_cache_bit = "0"b;

	call lock$lock_ast ();

	astep = search_ast$check (uid, pvid, vtocx, (0)); /* ignore double-uid error */
	if astep ^= null () then do;
	     call process_trailers ();
	     call page$cam ();
	end;

	call lock$unlock_ast ();
	return;					/* End of setfaults$if_active */


setfaults$cache: entry (a_astep, a_cache_bit);

	astep = a_astep;				/* copy arguments */
	cache_bit = a_cache_bit;			/* AST is locked */

	if sys_info$system_type = ADP_SYSTEM then do;	/* Oh yeah? */
	     call syserr (5, "setfaults: Ignoring setfaults$cache call for aste @ ^o on ADP system", astep);
	     return;
	end;

	recalculate_access = "0"b;
	set_cache_bit = "1"b;
	process_all_trailers = "1"b;

	if astep -> aste.strp = (18)"0"b then		/* should be trailers  */
	     call syserr (1, "setfaults: illegal cache  access trailer.");

	call process_trailers ();
	call page$cam ();
	return;					/* End of setfaults$cache */

/**/

setfaults$deltrailer: entry (a_astep, a_segno, a_rdstep);

	astep = a_astep;				/* copy arguments */
	segno = a_segno;
	rdstep = a_rdstep;

	recalculate_access = "0"b;
	process_all_trailers = "0"b;
	set_cache_bit = "0"b;

	call process_trailers ();
	return;					/* End of setfaults$deltrailer */



setfaults$disconnect: entry (a_segno);

	disconnect_any_msl = "1"b;
	go to disconnect_common;

setfaults$if_256K: entry (a_segno);

	disconnect_any_msl = "0"b;

disconnect_common:
	segno = a_segno;

	recalculate_access = "0"b;
	process_all_trailers = "0"b;
	set_cache_bit = "0"b;

	astep = get_ptrs_$given_segno (segno);		/* Does it seem active? */
	if astep = null () then return;

	rdstep = binary (pds$dstep, 18);

	call lock$lock_ast ();

	astep = get_ptrs_$given_segno (segno);		/* Still active ? */
	if astep ^= null () then
	     if disconnect_any_msl | bin (aste.msl) = 256 then
		call process_trailers ();

	call lock$unlock_ast ();
	return;

/**/

process_trailers: proc ();

dcl  thrtmp bit (18) aligned;				/* temporary for unthreading */
dcl  trp pointer;
dcl  next_trp pointer;

	if astep -> aste.hc then return;

	if ^set_cache_bit & process_all_trailers then do; /* if turning off access for all */
	     if ^astep -> aste.inhibit_cache then do;	/* let cache control know */
		astep -> aste.any_access_on = "0"b;
		astep -> aste.write_access_on = "0"b;
	     end;
	end;

	strp = ptr (sst$tfreep, 0);			/* get a pointer to the trailer segment */

	do trp = ptr (strp, astep -> aste.strp) repeat (next_trp) while (rel (trp));
	     next_trp = ptr (trp, trp -> str.fp);
	     dstep = ptr (addr (sst_seg$), trp -> str.dstep); /* get the DSEG ASTEP for this trailer */

	     if rel (dstep) = (18)"1"b then		/* check for bad trailer entry */
		call syserr (1, "setfaults: deleted trailer.");

	     if ^(dstep -> aste.ehs | (dstep -> aste.bp = "0"b)) then
		call syserr (1, "setfaults: illegal trailer");

	     if process_all_trailers
		| (binary (trp -> str.dstep, 18) = rdstep & binary (trp -> str.segno, 18) = segno)
	     then do;
		segno = binary (trp -> str.segno, 18);	/* get segno of the SDW of interest */

		call flush_this_sdw ();		/* Perform appropriate manipulations */

		if recalculate_access then do;	/* Meter */
		     sst$setfaults_acc = sst$setfaults_acc + 1;
		     sst$setfaults_all = sst$setfaults_all + 1;
		end;

		if (^recalculate_access) & (^set_cache_bit) then do; /* Must actually remove this one */
		     sst$setfaults_all = sst$setfaults_all + 1; /* Meter */

		     thrtmp = astep -> aste.strp;	/* thread this trailer out */
		     call thread$out (trp, thrtmp);	/* and zero its threads */
		     astep -> aste.strp = thrtmp;

		     trp -> str.fp = rel (sst$tfreep);	/* thread entry into free list */
		     sst$tfreep = trp;		/* set new free list pointer */
		     trp -> str.bp = "0"b;		/* for neatness */
		     trp -> str.dstep = "777777"b3;	/* wipe out the old dstep so check_trailer works */
		end;

		if ^process_all_trailers then return;	/* Got the one we wanted */
	     end;
	end;

	if ^process_all_trailers then call syserr (1, "setfaults: Missing trailer.");
						/* Looked everywhere and failed to find it */
	return;
     end process_trailers;

/**/

flush_this_sdw: proc ();

/* This procedure does whatever is appropriate to a single SDW. It sets up the abs_seg
   (we use ds_seg$) for this, modifies the SDW, and cleans it up. It expect dstep and
   segno to be set, to tell it what to do. */

dcl  ds_sdw fixed bin (71);


	ds_sdw = get_ptrs_$given_astep (dstep);		/* set up the address field of the SDW */
	call pmut$swap_sdw (addr (ds_seg$), addr (ds_sdw)); /* store the SDW into the DSEG abs_seg */

	sdwp = addr (ds_seg$ (segno));		/* The SDW in question */

	if sys_info$system_type = ADP_SYSTEM then do;
	     if set_cache_bit then ;			/* Oh yeah? -- ignore it */

	     else if recalculate_access then		/* Just turn it off */
		adp_sdw.valid = "0"b;

	     else do;
		adp_sdw.valid = "0"b;		/* Kill it completely */
		adp_sdw.add = ""b;
	     end;
	end;					/* of ADP SDW modifications */

	else do;
	     l68_sdw.df_no = "00"b;			/* For safety's sake */

	     if set_cache_bit then
		l68_sdw.cache = cache_bit;

	     else if recalculate_access then		/* Just turn it off */
		l68_sdw.valid = "0"b;

	     else do;
		l68_sdw.valid = "0"b;		/* Kill it completely */
		l68_sdw.add = ""b;
	     end;
	end;					/* of L68 SDW modifications */

	dseg$ (binary (baseno (addr (ds_seg$)), 17)) = 0; /* cleanup the abs_seg */

	return;
     end flush_this_sdw;

%page; %include system_types;
%page; %include aste;
%page; %include str;
%page; %include "sdw.l68";
%page; %include "sdw.adp";

/**/

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   setfaults: illegal cache access trailer

   S: $crash

   T: $run

   M: It was found that no record of processes connected to a
   segment (trailers) existed when the encacheability state of a segment
   had to be changed. Such change can only occur if processes are
   connected to the segment. $err

   A: Be sure to get a dump. $recover
   $notify

   Message:
   setfaults: deleted trailer

   S: $crash

   T: $run

   M: A trailer entry (record of a process's connection to a segment)
   for some segment was marked as free. $err


   A: $recover
   $inform

   Message:
   setfaults: illegal trailer

   S: $crash

   T: $run

   M: A trailer  entry (record of a process's connection to a segment)
   for some segment specifies a second segment as the descriptor
   segment for some process connected to that segment, but that second segment
   does not have certain bits on in its AST entry which would be on in the
   AST entry of a descriptor segment.
   $err

   A: $recover
   $inform

   Message:
   setfaults: missing trailer

   S: $crash

   T: $run

   M: Upon terminating a segment, it was found that
   no record of the process's connection to that segment (trailer)
   existed, even though an SDW for that segment appeared in
   the process's descriptor segment (i.e., the process was connected to it).
   $err

   A: $recover
   $notify

   END MESSAGE DOCUMENTATION */

     end setfaults;
