/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


private_logical_volume: proc ();

/*

   Written Janurary 1976 by R. Bratt

   Last modified:

   private_logical_volume maintains a per-process list of those LVs  to which a process is
   connected. The connect entry point enters a LV in this list.  The disconnect entry point
   removes an entry from this list. To prevent a process from using a LV after it disconnects  from
   it, the disconnect entry point setfaults all segments in the process' address space which reside
   upon the LV it is disconnecting.  Naturally seg_fault must not reconnect a sdw unless
   the appropriate LV is mounted for the process. The lvt entry point is used by ring zero
   to determine whether the process has the LV mounted.

*/

dcl  a_lvid bit (36) aligned,
     a_code fixed bin (35),
     a_lvx fixed bin (8);

dcl  lvid bit (36) aligned,
     kstex fixed bin (17),
     lvx fixed bin (8);

dcl (error_table_$nrmkst, error_table_$logical_volume_not_connected,
     error_table_$logical_volume_is_connected) ext fixed bin (35);

dcl  setfaults$disconnect entry (fixed bin (17));

/*  */

connect:	entry (a_lvid, a_code);
	lvid = a_lvid;
	a_code = 0;
	kst.lv (find_hole (lvid)) = lvid;
	kst.lvs = kst.lvs + 1;
	return;

lvx:	entry (a_lvid, a_lvx, a_code);
	a_lvx = 0;
	a_code = 0;
	a_lvx = find ((a_lvid));
	return;

disconnect: entry (a_lvid, a_code);
	lvid = a_lvid;
	a_code = 0;
	lvx = find (lvid);
						/* kung-fu segments connected to LV */
	do kstex = kst.lowseg to kst.highseg;
	     kstep = addr (kst.kst_entry (kstex));
	     if ^kste.dirsw
	     then if kste.infcount = lvx
		then do;
		     call setfaults$disconnect ((kste.segno)); /*  fault him */
		     kste.infcount = 0;		/* mark as no longer connected to private  LV */
		end;
	end;
	kst.lv (lvx) = "0"b;
	kst.lvs = kst.lvs - 1;
	return;

/*  */

find_hole: proc (lvid /* , kstp */) returns (fixed bin (8));
dcl  lvid bit (36) aligned,
     lvx fixed bin (8),
     lvs fixed bin (8),
     hashx fixed bin (8),
     holex fixed bin (8),
     find bit (1) aligned init ("1"b);

	     find = "0"b;

find:	     entry (lvid /* , kstp */) returns (fixed bin (8));
	     kstp = pds$kstp;
	     holex = 0;
	     lvs = kst.lvs;
	     hashx = mod (bin (bin (lvid), 35), dimension (kst.lv, 1));
	     do lvx = hashx to dimension (kst.lv, 1),
		     1 to hashx while (lvs > 0);
		if kst.lv (lvx) ^= "0"b
		then do;
		     if kst.lv (lvx) = lvid
		     then if find
			then return (lvx);
			else call abort (error_table_$logical_volume_is_connected);
		     lvs = lvs - 1;
		end;
		else if holex = 0 then holex = lvx;
	     end;
	     if find
	     then call abort (error_table_$logical_volume_not_connected);
	     else if holex ^= 0
	     then return (holex);
	     else call abort (error_table_$nrmkst);
	end find_hole;

abort:	proc (code);
dcl  code fixed bin (35);
	     a_code = code;
	     go to return_to_caller;
	end abort;

return_to_caller:
	return;

/*  */

% include kst;

     end private_logical_volume;
