/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1992   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(92-09-16,WAAnderson), approve(92-09-16,MCR8261),
     audit(92-09-24,Vu), install(92-10-23,MR12.5-1040):
     The values sst$fw_none and sst$force_pwrites were not being updated
     correctly due to the uninitialized variable num_writ in WRITE_ONE_SEGMENT.
     It was possible to use the value to determine the actions taken by a
     conditional statement and used in a calculation before it was ever set.
                                                   END HISTORY COMMENTS */


/* format: style3 */
force_write:
     proc (Segp, Fwf, Code);

/* Force_write-- procedure to force I/O on a segment from user ring.

   Bernard Greenberg  2/3/77 */
/* Bob Mullen made this program a lot better, several times in '77, '78 */
/* pds limit, BSG 8/18/78 */
/* Modified for ADP PTWs, SDWs, 03/21/81, W. Olin Sibert */
/* Modified for consecutive, list entries, November 1982, J. Bongiovanni */
/* Modified to work on segments which are currently not connected to the caller's process, 30mar83, M.Pandolf */

/* Note: we do not use search_ast$check, to avoid the expense of deriving the
   pvid and vtocx for the segment.  If there is actually a double-uid conflict,
   we are either going to write the correct segment, or harrass some other segment.
   In either case, we end up with the pages of the 'correct' segment on disk,
   if at all possible. */

/*  Parameter  */

dcl	Code		fixed bin (35) parameter;	/* Standard error code */
dcl	Flush_Consecp	ptr parameter;		/* -> structure describing segments to be flushed */
dcl	Flushp		ptr parameter;		/* -> structure describing pages to be flushed */
dcl	Fwf		bit (36) unaligned parameter; /* Flags - see force_write_flags.incl.pl1 */
dcl	Segp		pointer parameter;		/* -> segment to be written */
dcl	Write_Limit	fixed bin parameter;	/* Maximum outstanding I/Os for this val level on force-write */

/*  Automatic  */

dcl	code		fixed bin (35);
dcl	done_list		bit (1) aligned;
dcl	done_seg		bit (1) aligned;
dcl	first_page	fixed bin;
dcl	1 fwf		like force_write_flags aligned;
dcl	have_list		bit (1) aligned;
dcl	n_pages		fixed bin;
dcl	page_list		(0:255) fixed bin;
dcl	page_no		fixed bin;
dcl	pagex		fixed bin;
dcl	seg_no		fixed bin;
dcl	seg_pagex		fixed bin;
dcl	segp		ptr;
dcl	segx		fixed bin;
dcl	write_limit	fixed bin;

/*  Based  */

dcl	1 Flush_Consec	aligned like flush_consec based (Flush_Consecp);
dcl	1 Flush		aligned like flush based (Flushp);

/*  External  */

dcl	error_table_$argerr fixed bin (35) external static;
dcl	error_table_$dirseg fixed bin (35) external static;
dcl	error_table_$invalidsegno
			fixed bin (35) external static;
dcl	error_table_$unimplemented_version
			fixed bin (35) external static;
dcl	pds$force_write_limit
			(0:7) fixed bin external static;
dcl	pds$validation_level
			fixed bin external static;
dcl	sst$astsize	fixed bin external static;
dcl	sst$force_pwrites	fixed bin (35) external static;
dcl	sst$force_swrites	fixed bin (35) external static;
dcl	sst$force_updatevs	fixed bin (35) external static;
dcl	sst$fw_none	fixed bin (35) external static;
dcl	sst$fw_retries	fixed bin (35) external static;

/*  Entry  */

dcl	get_ptrs_$given_segno
			entry (fixed bin (17)) returns (ptr);
dcl	lock$lock_ast	entry ();
dcl	lock$unlock_ast	entry ();
dcl	pc_wired$write_wait_uid
			entry (ptr, fixed bin, fixed bin, bit (36) aligned);
dcl	pc_wired$write_wait_uid_list
			entry (ptr, ptr, fixed bin, fixed bin, bit (36) aligned);
dcl	ptw_util_$get_phm	entry (pointer, bit (1) aligned);
dcl	search_ast	entry (bit (36) aligned) returns (ptr);
dcl	update_vtoce	entry (ptr);

/*  Builtin  */

dcl	addr		builtin;
dcl	addrel		builtin;
dcl	baseno		builtin;
dcl	baseptr		builtin;
dcl	fixed		builtin;
dcl	hbound		builtin;
dcl	min		builtin;
dcl	null		builtin;
dcl	string		builtin;
dcl	unspec		builtin;

%page;

	segp = Segp;
	string (fwf) = Fwf;
	have_list = "0"b;
	n_pages = -1;

	call WRITE_ONE_SEGMENT (code);

	Code = code;
	return;
%page;
consecutive:
     entry (Flush_Consecp, Code);

	Code = 0;
	unspec (fwf) = ""b;
	have_list = "1"b;

	if Flush_Consec.version ^= FLUSH_CONSEC_VERSION_1
	then do;
		Code = error_table_$unimplemented_version;
		return;
	     end;

	do segx = 1 to Flush_Consec.n_segs;
	     segp = baseptr (Flush_Consec.seg (segx).segno);
	     first_page = Flush_Consec.seg (segx).first_page;
	     n_pages = Flush_Consec.seg (segx).n_pages;
	     if first_page < 0 | (first_page + n_pages) > 255
	     then do;
		     Code = error_table_$argerr;
		     return;
		end;
	     unspec (page_list) = ""b;
	     do pagex = 0 to n_pages - 1;
		page_list (pagex) = first_page + pagex;
	     end;

	     call WRITE_ONE_SEGMENT (Code);
	     if Code ^= 0
	     then return;
	end;

	return;
%page;
list:
     entry (Flushp, Code);

	Code = 0;
	unspec (fwf) = ""b;
	have_list = "1"b;

	if Flush.version ^= FLUSH_VERSION_1
	then do;
		Code = error_table_$unimplemented_version;
		return;
	     end;

	done_list = "0"b;
	seg_pagex = 1;
	do while (^done_list);
	     if seg_pagex > Flush.n_pages
	     then done_list = "1"b;
	     else do;
		     seg_no = Flush.seg_page (seg_pagex).seg_no;
		     segp = baseptr (seg_no);
		     pagex = 0;
		     done_seg = "0"b;
		     do while (^done_seg);
			if seg_pagex > Flush.n_pages
			then done_seg = "1"b;
			else if Flush.seg_page (seg_pagex).seg_no ^= seg_no
			then done_seg = "1"b;
			else do;
				page_no = Flush.seg_page (seg_pagex).page_no;
				if page_no < 0 | page_no > 255
				then do;
ARGERR:
					Code = error_table_$argerr;
					return;
				     end;
				if pagex > hbound (page_list, 1)
				then goto ARGERR;
				page_list (pagex) = page_no;
				pagex = pagex + 1;
				seg_pagex = seg_pagex + 1;
			     end;
		     end;
		     n_pages = pagex;
		     call WRITE_ONE_SEGMENT (Code);
		     if Code ^= 0
		     then return;
		end;
	end;

	return;


%page;

set_force_write_limit:
     entry (Write_Limit, Code);


	write_limit = Write_Limit;

	if write_limit < 1 | write_limit > 256
	then code = error_table_$argerr;
	else do;
		pds$force_write_limit (pds$validation_level) = write_limit;
		code = 0;
	     end;

	Code = code;
	return;

%page;
/*  Internal Procedure to do the work for one segment  */

WRITE_ONE_SEGMENT:
     proc (Code);

dcl	Code		fixed bin (35) parameter;

dcl	first_page	fixed bin;
dcl	force_write_limit	fixed bin;
dcl	i		fixed bin;
dcl	increment		fixed bin;
dcl	last_page		fixed bin;
dcl	lp		fixed bin;
dcl	num_writ		fixed bin;
dcl	page_no		fixed bin;
dcl	phm_bit		bit (1) aligned;
dcl	ptp		pointer;
dcl	segno		fixed bin (17);
dcl	tuid		bit (36) aligned;



	Code = 0;
	num_writ = 0;
	segno = fixed (baseno (segp));		/* Get segno */
	kstp = pds$kstp;
	force_write_limit = pds$force_write_limit (pds$validation_level);

	if segno < kst.lowseg | segno > kst.highest_used_segno
	then do;					/* Validate segno range */
segno_is_bad:
		Code = error_table_$invalidsegno;
		return;
	     end;

	sst$force_swrites = sst$force_swrites + 1;	/* Meter */

	kstep = addr (kst.kst_entry (segno));
	if unspec (kste.entryp) = ""b
	then goto segno_is_bad;			/* Verify that seg is initiated */
	if kste.dirsw
	then do;					/* Don't force write dirs */
		Code = error_table_$dirseg;
		return;
	     end;

	tuid = kste.uid;
	astep = get_ptrs_$given_segno (segno);		/* Get astep via dseg */

	if astep = null
	then do;					/* Segment is not connected */

		call lock$lock_ast;
		astep = search_ast (tuid);
		call lock$unlock_ast;

		if astep = null			/* Segment is not active */
		then goto ret;

	     end;

	if aste.uid = ""b
	then do;
		Code = error_table_$invalidsegno;
		goto ret;				/* No soap on hc segs */
	     end;

RETRY:
	ptp = addrel (astep, sst$astsize);

	num_writ = 0;				/* nothing written yet */
	first_page = -1;
	if force_write_limit < 2
	then fwf.serial_write = "1"b;

	if have_list
	then lp = n_pages - 1;
	else lp = fixed (aste.csl, 9) - 1;
	do i = 0 to lp;
	     if have_list
	     then page_no = page_list (i);
	     else page_no = i;
	     call ptw_util_$get_phm (addrel (ptp, page_no), phm_bit);
						/* Modified anytime? */
	     if phm_bit				/* See if page needs writing, */
	     then do;				/* and do so if we are to write serially */
		     last_page = i;
		     if first_page = -1
		     then first_page = i;
		     num_writ = num_writ + 1;
		     if fwf.serial_write
		     then call pc_wired$write_wait_uid (astep, page_no, 1, tuid);
		end;
	end;


	if ^fwf.serial_write & num_writ ^= 0		/* If parallel write and we have pages */
	then do;					/* then write the lot out */
		if num_writ <= force_write_limit
		then increment = last_page - first_page + 1;
		else increment = force_write_limit;
		do i = first_page to last_page by increment;
		     if have_list
		     then call pc_wired$write_wait_uid_list (astep, addr (page_list), i,
			     min ((last_page - i + 1), increment), tuid);
		     else call pc_wired$write_wait_uid (astep, i, min ((last_page - i + 1), increment), tuid);
		end;
	     end;

	if aste.uid ^= tuid
	then do;					/* check race with segmove */
		call lock$lock_ast;
		astep = search_ast (tuid);
		call lock$unlock_ast;
		if astep ^= null ()
		then do;
			sst$fw_retries = sst$fw_retries + 1;
			goto RETRY;
		     end;
		else goto ret;			/* deactivated seg means all done */
	     end;

/* if here then valid astep and aste.uid = tuid */

	if ^aste.fmchanged				/* no change in aste? */
	then if aste.uid = tuid			/* and still same aste? */
	     then goto ret;				/* then this is the EZ case */

	call lock$lock_ast;				/* If here then looks like vtoce needs updating */

	if aste.uid ^= tuid				/* Has aste moved? */
	then astep = search_ast (tuid);		/* If so then find it */
	if astep ^= null
	then if aste.fmchanged			/* no one else did update */
	     then do;
		     sst$force_updatevs = sst$force_updatevs + 1;
		     call update_vtoce (astep);
		end;

	call lock$unlock_ast;

ret:
	if num_writ = 0
	then sst$fw_none = sst$fw_none + 1;
	else sst$force_pwrites = sst$force_pwrites + num_writ;

	return;

     end WRITE_ONE_SEGMENT;


/* format: off */
%page; %include aste;
%page; %include flush_structures;
%page; %include force_write_flags;
%page; %include kst;

	end force_write;
