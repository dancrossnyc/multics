/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
        /* use: pl1_macro hc_tune.pl1.pmac */

hc_tune: proc ();

/* *	HC_TUNE
   *
   *	This procedure manages the getting and setting of system tuning parameters.
   *	It is organized in a somewhat unusual fashion for a PL/I program, in order to
   *	make the addition of new tuning parameters as simple as possible. All the tuning
   *	parameters appear in a section of code at the very end of this program. A complex
   *	mechanism of gotos and label variables is used to minize the size of the program,
   *	and, more importantly, to make the description of individual tuning parameters
   *	as simple and straightforward as possible. Each tuning parameter must be a single
   *	word quantity at some known address in the supervisor, and is described by a
   *	block of code like this:
   *
   *	dcl  tc_data$post_purge_switch fixed bin (35) external static;
   *	%set NUM to NUM + 1;
   *	TP (NUM):	call tp_init (addr (tc_data$post_purge_switch),
   *		     "post_purge", "pp", TP_ON_OFF);
   *
   *		call on_or_off ();
   *		goto RETURN;
   *
   *	The parameters to tp_init are:
   *	   1) The location of the value in the supervisor address space.
   *	   2) The long name of the tuning parameter.
   *	   3) The short name. If the short name is "", it will be the same as the long name.
   *	   4) The type, as defined in tuning_parameter_info.incl.pl1
   *
   *	Additionally, the value tp_special may be set to "1"b to indicate that this parameter
   *	is not to be listed by a normal listing operation. It is intended for internal system
   *	parameters, solely in order to make them easy to set by other than patching.
   *
   *	There are two procedures available to insure that an input value is acceptable. The
   *	range procedure is called with two limits, and aborts an attempt to set if the value
   *	falls outside the limits of the specified range. The on_or_off procedure aborts if
   *	an attempt is made to set an on/off parameter to an invalid value. Additionally, the
   *	procedure abort may be called if it is necessary to invalid a n attempt to set a
   *	tuning parameter for some other, more complex, reason.
   *
   *	The existing examples in this program should be used as guidelines for how to add
   *	and name new tuning parameters.
   *
   *	04/21/81, W. Olin Sibert
   *	Modified 10/24/81, J. Bongiovanni, to fix bug in maxabs
   *	Modified February 1982, BIM, for stack truncation parameters
   *	Modified March 1982, J. Bongiovanni, for trap_invalid_masked, wsf bug fix
   *	Modified April 1982, J. Bongiovanni, gv_integration
   *	Modified July 1982, J. Bongiovanni, meter_ast_locking
   *	Modified August 1982, J. Bongiovanni, realtime_io parameters
   *	Modified October 1982, J. Bongiovanni, checksum_filemap
   *	Modified February 1983, E. N. Kittlitz, default_256K_enable
   *	Modified October 1984, M. Pandolf, dirlock_writebehind
   */

/*  */

dcl  P_input_name char (32) parameter;			/* Name of parameter to get or set */
dcl  P_old_value bit (36) aligned parameter;		/* Current value for parameter */
dcl  P_new_value bit (36) aligned parameter;		/* New value, for setting */
dcl  P_tp_ptr pointer parameter;			/* Its address (in ring zero) */
dcl  P_long_name char (*) parameter;			/* Long name, for output */
dcl  P_short_name char (*) parameter;			/* Short name, for output */
dcl  P_error char (*) parameter;			/* Description of error while setting, if any */
dcl  P_tp_type fixed bin parameter;			/* Its type */
dcl  P_area_ptr pointer parameter;			/* Pointer to area for parameter list allocation */
dcl  P_special_flag bit (1) aligned parameter;		/* Whether to return "special" values, in a listing */
dcl  P_tp_count fixed bin parameter;			/* Number of defined tuning parameters */
dcl  P_tp_list_ptr pointer parameter;			/* Pointer to returned array of info */
dcl  P_code fixed bin (35) parameter;			/* Error code */

dcl  input_name char (32);
dcl  function fixed bin;				/* What we are supposed to do */
dcl  return_label label variable internal local;		/* Used for our pseudo-subroutine call mechanism */
dcl  lookup_return_label variable label internal local;
dcl  severity fixed bin;				/* Severity code for syserr call */
dcl  code fixed bin (35);
dcl  return_special bit (1) aligned;			/* Whether to list "special" parameters */
dcl  error_reason char (128);				/* Description of error encountered in setting */

dcl  based_value bit (36) aligned based;		/* For parameter assignment */

dcl  list_area area based (list_area_ptr);
dcl  list_area_ptr pointer;

dcl 1 tp_list (tp_list_size) based (tp_list_ptr) like tp_info;
dcl  tp_list_ptr pointer;
dcl  tp_list_size fixed bin;
dcl  list_idx fixed bin;

dcl  tp_ptr pointer;				/* Pointer to tuning parameter currently of interest */
dcl  tp_type fixed bin;				/* Type of this tuning parameter */
dcl  tp_idx fixed bin;				/* Its index */
dcl  tp_short_name char (16); 			/* Short and long names */
dcl  tp_long_name char (32);
dcl  tp_special bit (1) aligned;			/* Whether it is "special" */

dcl  tp_value bit (36) aligned;			/* Current value, as bits */
dcl  binary_value fixed bin (35) aligned;		/* unspec equivalent of tp_value */
dcl  scaled_value fixed bin (35, 18) aligned;		/* unspec equivalent of tp_value */
dcl  char_value char (4) aligned;			/* unspec equivalent of tp_value */
dcl  float_value float bin (27) aligned;		/* unspec equivalent of tp_value */

dcl  new_value bit (36) aligned;			/* New value, as above */
dcl  new_binary_value fixed bin (35) aligned;
dcl  new_scaled_value fixed bin (35, 18) aligned;
dcl  new_char_value char (4) aligned;
dcl  new_float_value float bin (27) aligned;

dcl  pds$process_group_id char (32) aligned external static;

dcl  error_table_$unknown_tp fixed bin (35) external static;
dcl  error_table_$invalid_tp_value fixed bin (35) external static;

dcl  syserr entry options (variable);

dcl  ONE_SECOND fixed bin (35) internal static options (constant) init (1000000); /* Assorted limits in microseconds */
dcl  ONE_MINUTE fixed bin (35) internal static options (constant) init (60000000);
dcl  TEN_MINUTES fixed bin (35) internal static options (constant) init (600000000);
dcl  FIVE_HOURS fixed bin (35) internal static options (constant) init (18000000000);

dcl  SCALE fixed bin (35) internal static options (constant) init (262144); /* Converts fixed bin (35) to (35,18) */

dcl  LIST init (1) fixed bin internal static options (constant);
dcl  GET init (2) fixed bin internal static options (constant);
dcl  SET init (3) fixed bin internal static options (constant);

dcl (addr, decimal, divide, float, hbound, round, trunc, unspec) builtin;

/*  */

hc_tune$get: entry (P_input_name, P_tp_type, P_old_value, P_tp_ptr, P_long_name, P_short_name, P_code);

/* This entrypoint returns the address and present value of the named tuning parameter.
   It will return an error code if the tuning parameter does not exist. It is accessed
   via metering_gate_$get_tuning_parameter */

	input_name = P_input_name;			/* Copy input parameter */
	function = GET;				/* Say what we're doing */
	code = 0;

	return_label = GET_LOOKUP_RETURNS;
	goto LOOKUP;				/* Find it, set idx & code */

GET_LOOKUP_RETURNS:
	if code ^= 0 then do;			/* Couldn't find it */
	     P_code = code;
	     return;
	     end;

	P_old_value = tp_value;			/* Return value and address */
	P_tp_ptr = tp_ptr;
	P_tp_type = tp_type;
	P_long_name = tp_long_name;
	P_short_name = tp_short_name;

	P_code = 0;
	return;					/* End of hc_tune$get */

/*  */

hc_tune$set: entry (P_input_name, P_new_value, P_old_value, P_tp_ptr, P_error, P_code);

/* This entry sets a tuning parameter, also returning its old value and address. The change
   is announced on the BOS console. It is accessed via hphcs_$set_tuning_parameter */

	severity = ANNOUNCE;
	goto SET_COMMON;


hc_tune$set_silent: entry (P_input_name, P_new_value, P_old_value, P_tp_ptr, P_error, P_code);

/* This entry sets a tuning parameter, as above, but logs the change without typing it out.
   Used only by the Initializer, it is accessed via initializer_gate_$set_tuning_parameter */

	severity = LOG;
	goto SET_COMMON;


SET_COMMON:
	code = 0;
	input_name = P_input_name;			/* Copy input parameter */
	new_value = P_new_value;
	unspec (new_binary_value) = new_value;		/* Make it available in all its forms */
	unspec (new_scaled_value) = new_value;
	unspec (new_char_value) = new_value;
	unspec (new_float_value) = new_value;
	
	function = GET;				/* First, find it */
	return_label = SET_LOOKUP_RETURNS;
	goto LOOKUP;				/* Find it, set idx & code */

SET_LOOKUP_RETURNS:
	if code ^= 0 then do;			/* Can't set it */
	     P_code = code;
	     P_error = error_reason;
	     return;
	     end;

	P_old_value = tp_value;			/* Return value and address */
	P_tp_ptr = tp_ptr;

	function = SET;				/* Next, check whether the new value is valid */
	return_label = SET_CHECK_RETURNS;
	goto TP (tp_idx);

SET_CHECK_RETURNS:
	if code ^= 0 then do;			/* Can't set it */
	     P_code = code;
	     P_error = error_reason;
	     return;
	     end;

/*  */

	if tp_type = TP_CHAR then			/* Call syserr to announce the change */
	     call syserr (severity, "hc_tune: Changing ^a from ""^4a"" to ""^4a"" for ^a",
		tp_long_name, char_value, new_char_value, pds$process_group_id);

	else if tp_type = TP_INTEGER then
	     call syserr (severity, "hc_tune: Changing ^a from ^d to ^d for ^a",
		tp_long_name, binary_value, new_binary_value, pds$process_group_id);

	else if tp_type = TP_SCALED_INTEGER then
	     call syserr (severity, "hc_tune: Changing ^a from ^f to ^f for ^a",
		tp_long_name, round (decimal (scaled_value), 4),
		round (decimal (new_scaled_value), 4), pds$process_group_id);

	else if tp_type = TP_MICROSECONDS then
	     call syserr (severity, "hc_tune: Changing ^a from ^f to ^f seconds for ^a",
		tp_long_name, (float (binary_value) / 1.0e6),
		(float (new_binary_value) / 1.0e6), pds$process_group_id);

	else if tp_type = TP_ON_OFF then
	     call syserr (severity, "hc_tune: Changing ^a from ^[on^;off^] to ^[on^;off^] for ^a",
		tp_long_name, (binary_value ^= 0), (new_binary_value ^= 0), pds$process_group_id);

	else if tp_type = TP_FLOAT
	then call syserr (severity, "hc_tune: Changing ^a from ^f to ^f for ^a.",
	          tp_long_name, float_value, new_float_value, pds$process_group_id);

	else call syserr (severity, "hc_tune: Changing ^a from ^w to ^w for ^a",
		tp_long_name, tp_value, new_value, pds$process_group_id);


	tp_ptr -> based_value = new_value;		/* Do it */

	P_code = 0;
	P_error = "";
	return;					/* End of hc_tune$get */

/*  */

hc_tune$list: entry (P_area_ptr, P_special_flag, P_tp_count, P_tp_list_ptr);

/* This entrypoint returns a list of all the defined tuning parameters, and their current
   values. If P_special_flag is set, it returns all parameters, including special ones.
   It is accessed via metering_gate_$list_tuning_parameters. */

	input_name = "";
	code = 0;

	list_area_ptr = P_area_ptr;
	return_special = P_special_flag;

	function = LIST;

	return_label = LIST_COUNT_RETURNS;		/* "return" to our label, below */
	tp_list_size = 0;				/* start out empty */
	do tp_idx = 1 to hbound (TP, 1); 		/* First, count them */
	     goto TP (tp_idx); 			/* "call" */
LIST_COUNT_RETURNS:
	     if return_special | (^tp_special) then tp_list_size = tp_list_size + 1;
	     end;

	allocate tp_list in (list_area) set (tp_list_ptr); /* Make room to return to our caller */

	return_label = LIST_LISTING_RETURNS;		/* "return" to our label, below */
	list_idx = 1;				/* start out with the first one */
	do tp_idx = 1 to hbound (TP, 1);		/* Get info for each parameter, again */
	     goto TP (tp_idx); 			/* "call" to get info on this parameter */
LIST_LISTING_RETURNS:				/* and "return" here */
	     if tp_special & (^return_special) then goto LIST_NOT_RETURN_THIS_ONE;

	     tp_list (list_idx).type = tp_type;
	     tp_list (list_idx).long_name = tp_long_name;
	     tp_list (list_idx).short_name = tp_short_name;
	     tp_list (list_idx).ptr = tp_ptr;
	     tp_list (list_idx).value = tp_value;
	     tp_list (list_idx).special = tp_special;
	     list_idx = list_idx + 1;

LIST_NOT_RETURN_THIS_ONE:
	     end;

	P_tp_count = tp_list_size;			/* Return info */
	P_tp_list_ptr = tp_list_ptr;

	return;					/* End of hc_tune$list */

/*  */

tp_init: proc (P_tp_ptr, P_long_name, P_short_name, P_type);

dcl  P_tp_ptr pointer parameter;
dcl  P_long_name char (*) parameter;
dcl  P_short_name char (*) parameter;
dcl  P_type fixed bin;

/* This procedure initializes values for a single tuning parameter */

	tp_ptr = P_tp_ptr;
	tp_long_name = P_long_name;
	tp_short_name = P_short_name;
	tp_type = P_type;
	if tp_short_name = "" then tp_short_name = tp_long_name;

	tp_special = "0"b;
	code = 0;

	tp_value = tp_ptr -> based_value;		/* Get the value from ring zero */

	unspec (binary_value) = tp_value;
	unspec (scaled_value) = tp_value;
	unspec (char_value) = tp_value;
	unspec (float_value) = tp_value;

	return;
	end tp_init;

/*  */

/* This portion of the program decides whether a particular tuning parameter exists, and
   sets code and tp_idx appropriately. */

LOOKUP:	lookup_return_label = return_label;		/* Save return label, for "recursion" */

	return_label = LOOKUP_INTERNAL_RETURN;
	do tp_idx = 1 to hbound (TP, 1); 		/* Try each one in its turn */
	     goto TP (tp_idx); 			/* "call" */
LOOKUP_INTERNAL_RETURN:
	     if tp_long_name = input_name then goto lookup_return_label; /* This is the one we want */
	     if tp_short_name = input_name then goto lookup_return_label;
	     end;

	code = error_table_$unknown_tp;		/* Sorry, no sale */
	error_reason = "";
	tp_idx = -1;
	goto lookup_return_label;			/* "return" */



/* This part of the program finishes off the lookup/checking of each individual tuning parameter */

RETURN:	goto return_label;				/* Set all values, etc. */




/* This label is used to indicate that a parameter cannot be set to the requested value
   for some reason. No attempt is made to describe the reason, however. */

ABORT_SETTING:
	code = error_table_$invalid_tp_value;

	goto return_label;

/*  */

range: proc (P_lower, P_upper, P_range_description);

/* This procedure insures that, for set attempts only, the specified value is within range */

dcl  P_lower fixed bin (35) parameter;
dcl  P_upper fixed bin (35) parameter;
dcl  P_range_description char (*) parameter;


	if function ^= SET then return;		/* Not setting, ignore it */

	if new_binary_value < P_lower then call abort (P_range_description);
	if new_binary_value > P_upper then call abort (P_range_description);

	return;					/* All OK */
	end range;



need_integer: proc ();

/* This procedure aborts if a scaled "integer" is not actually an integral value */

	if function ^= SET then return;

	if trunc (new_scaled_value) ^= new_scaled_value then
	     call abort ("an integer value");

	return;
	end need_integer;



on_or_off: proc ();

/* This procedure rejects attempts to set on/off parameters to invalid values */

	if function ^= SET then return;		/* Not setting, ignore it */

	if new_binary_value ^= 0 then
	     if new_binary_value ^= 1 then
		call abort ("Not ""on"" or ""off""");

	return;					/* All OK */
	end on_or_off;


/* COMMENT THIS IN WHEN A FLOATING POINT PARM IS DEFINED */


/* float_range:
/* 	procedure (P_lower, P_upper, P_range_description);
/*
/*	declare (P_lower, P_upper) float bin (27) aligned;
/*	declare P_range_description character (*);

/*	if function ^= SET then return;

/*	if new_float_value < P_lower | new_float_value > P_upper
/*	then call abort (P_range_description);

/*	return;
/*	end float_range;
*/
scaled_range:
          procedure (P_lower, P_upper, P_range_description);

	declare (P_lower, P_upper) fixed bin (35, 18);
	declare P_range_description character (*);

	if function ^= SET
	then return;

	if new_scaled_value < P_lower | new_scaled_value > P_upper
	then call abort (P_range_description);

	return;
	end scaled_range;


abort: proc (P_reason);

/* This procedure just performs an abort -- it would be used anywhere the
   valid values cannot be tested by either of the above procedures. It is a
   procedure only in order to retain the general procedural structure of this
   program. */

dcl  P_reason char (*);


	error_reason = P_reason;

	goto ABORT_SETTING;

	end abort;

/*  */

/* At last, the tuning parameters themselves: */

%set NUM to 0;

dcl  tc_data$tefirst fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$tefirst),
	     "tefirst", "", TP_MICROSECONDS);

	call range (500, ONE_MINUTE, "between 500 us. and one minute");
	goto RETURN;



dcl  tc_data$telast fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$telast),
	     "telast", "", TP_MICROSECONDS);

	call range (500, ONE_MINUTE, "between 500 us. and one minute");
	if function = SET
	     then if ^tc_data$gv_integration_set
	          then tc_data$gv_integration = 4 * new_binary_value;
	goto RETURN;



dcl  tc_data$timax fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$timax),
	     "timax", "", TP_MICROSECONDS);

	call range (500, ONE_MINUTE, "between 500 us. and one minute");
	goto RETURN;



dcl  tc_data$priority_sched_inc fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$priority_sched_inc),
	     "priority_sched_inc", "psi", TP_MICROSECONDS);

	call range (100000, FIVE_HOURS, "between 100 ms. and five hours");
	goto RETURN;



dcl  tc_data$ncpu fixed bin (35) external static;
dcl  tc_data$max_max_eligible fixed bin (35) external static;
dcl  tc_data$min_eligible fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$min_eligible),
	     "min_eligible", "mine", TP_SCALED_INTEGER);

	call need_integer ();
	call range ((tc_data$ncpu * SCALE), (tc_data$max_eligible), "at least as large as the number of cpus");
	call range (0, (tc_data$max_eligible), "not greater than max_eligible");
	goto RETURN;				/* up to the maximum allowed */



dcl  tc_data$max_eligible fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$max_eligible),
	     "max_eligible", "maxe", TP_SCALED_INTEGER);

	call need_integer ();
	call range ((tc_data$min_eligible), (tc_data$max_max_eligible), "between min_eligible and max_max_eligible");
	goto RETURN;				/* up to the maximum allowed */



dcl  tc_data$max_batch_elig fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$max_batch_elig),
	     "max_batch_elig", "maxabs", TP_INTEGER);

	call range (0, (tc_data$max_eligible), "between 0 and max_eligible");
	goto RETURN;



dcl  tc_data$working_set_factor fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$working_set_factor),
	     "working_set_factor", "wsf", TP_SCALED_INTEGER);

	call range (0, (2 * SCALE), "between 0 and 2");
	goto RETURN;



dcl  tc_data$working_set_addend fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$working_set_addend),
	     "working_set_addend", "wsa", TP_INTEGER);

	call range (-1000, 1000, "between -1000 and 1000");
	goto RETURN;



dcl  tc_data$deadline_mode fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$deadline_mode),
	     "deadline_mode", "dmode", TP_ON_OFF);

	call on_or_off ();				/* only two possible values */
	goto RETURN;



dcl  tc_data$int_q_enabled fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$int_q_enabled),
	     "int_q_enabled", "intq", TP_ON_OFF);

	call on_or_off ();				/* only two possible values */
	goto RETURN;



dcl  tc_data$post_purge_switch fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$post_purge_switch),
	     "post_purge", "pp", TP_ON_OFF);

	call on_or_off ();				/* only two possible values */
	goto RETURN;



dcl  tc_data$pre_empt_sample_time fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$pre_empt_sample_time),
	     "pre_empt_sample_time", "pest", TP_MICROSECONDS);

	call range (500, ONE_SECOND, "between 500 us. and one second");
	goto RETURN;



dcl  tc_data$gp_at_notify fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$gp_at_notify),
	     "gp_at_notify", "gpn", TP_ON_OFF);

	call on_or_off ();				/* only two possible values */
	goto RETURN;



dcl  tc_data$gp_at_ptlnotify fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$gp_at_ptlnotify),
	     "gp_at_ptlnotify", "gpp", TP_ON_OFF);

	call on_or_off ();				/* only two possible values */
	goto RETURN;



dcl  tc_data$process_initial_quantum fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$process_initial_quantum),
	     "process_initial_quantum", "piq", TP_MICROSECONDS);

	call range (100000, (30 * ONE_SECOND), "between 100 ms. and 30 seconds");
	goto RETURN;



dcl  tc_data$quit_priority fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$quit_priority),
	     "quit_priority", "qp", TP_SCALED_INTEGER);

	call range (0, (2 * SCALE), "between zero and two");
	goto RETURN;



dcl  tc_data$nto_delta fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$nto_delta),
	     "notify_timeout_interval", "nto_delta", TP_MICROSECONDS);

	call range (ONE_SECOND, TEN_MINUTES, "between one second and ten minutes");
	goto RETURN;



dcl  tc_data$time_out_severity fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (tc_data$time_out_severity),
	     "notify_timeout_severity", "nto_severity", TP_INTEGER);

	call range (-1, 5, "any of -1, 0, 1, 3, 4, or 5");	/* Disallow 2 */
	if new_binary_value = 2 then call abort ("any of -1, 0, 1, 3, 4, or 5");
	goto RETURN;



dcl  sst$nused fixed bin (35) external static;
dcl  sst$write_limit fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (sst$write_limit),
	     "write_limit", "wlim", TP_INTEGER);

	call range (30, divide (sst$nused, 2, 35, 0), "between 30 pages and half of memory");
	goto RETURN;

%set NUM to NUM + 1;
declare tc_data$stk_truncate bit (1) ext static;
TP (NUM): call tp_init (addr (tc_data$stk_truncate),
   "stack_truncation", "stkt", TP_ON_OFF);

	tp_special = "1"b;
	call on_or_off ();
	goto RETURN;

declare tc_data$stk_truncate_always bit (1) aligned ext;

%set NUM to NUM + 1;
TP (NUM): call tp_init (addr (tc_data$stk_truncate_always),
       "stack_truncation_always", "stta", TP_ON_OFF);

	tp_special = "1"b;
	call on_or_off;
	goto RETURN;

%set NUM to NUM + 1;
declare tc_data$stk_trunc_avg_f1 aligned fixed bin (35, 18) ext static;
declare tc_data$stk_trunc_avg_f2 aligned fixed bin (35, 18) ext static;

TP (NUM): call tp_init (addr (tc_data$stk_trunc_avg_f1),
	     "stk_trunc_block_avg_factor", "stk_baf",
              TP_SCALED_INTEGER);

           tp_special = "1"b;
	 call scaled_range (0b, 1b, "between zero and one.");

	if function = SET
	then tc_data$stk_trunc_avg_f2 = 1b - tc_data$stk_trunc_avg_f1;

	 goto RETURN;


%set NUM to NUM + 1;
declare wired_hardcore_data$trap_invalid_masked bit (1) aligned ext static;
TP (NUM): call tp_init (addr (wired_hardcore_data$trap_invalid_masked),
   "trap_invalid_masked", "", TP_ON_OFF);

          tp_special = "1"b;
          call on_or_off ();
	goto RETURN;

%set NUM to NUM + 1;
declare tc_data$gv_integration fixed bin (35) external static;
declare tc_data$gv_integration_set bit (1) aligned external static;

TP (NUM): call tp_init (addr (tc_data$gv_integration),
   "gv_integration", "", TP_MICROSECONDS);

          call range ((tc_data$telast), FIVE_HOURS, "between telast and 5 hours");

	if function = SET
	     then tc_data$gv_integration_set = "1"b;
	goto RETURN;
	

dcl  sst$meter_ast_locking fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM): call tp_init (addr (sst$meter_ast_locking),
               "meter_ast_locking", "", TP_ON_OFF);

	tp_special = "1"b;
	call on_or_off ();
	goto RETURN;


dcl  tc_data$realtime_io_priority_switch fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM): call tp_init (addr (tc_data$realtime_io_priority_switch),
	     "realtime_io_priority", "io_prior", TP_ON_OFF);

          call on_or_off ();
	goto RETURN;


dcl  tc_data$realtime_io_deadline fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM): call tp_init (addr (tc_data$realtime_io_deadline),
	     "realtime_io_deadline", "io_deadline", TP_MICROSECONDS);

          call range (500, ONE_MINUTE, "between 500 us. and one minute");
	goto RETURN;


dcl  tc_data$realtime_io_quantum fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM): call tp_init (addr (tc_data$realtime_io_quantum),
	     "realtime_io_quantum", "io_quantum", TP_MICROSECONDS);

          call range (500, ONE_MINUTE, "between 500 us. and one minute");
	goto RETURN;

dcl  sst$checksum_filemap fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM): call tp_init (addr (sst$checksum_filemap),
	     "checksum_filemap", "", TP_ON_OFF);

	tp_special = "1"b;
	call on_or_off ();
	goto RETURN;

dcl  sys_info$default_256K_enable bit (1) aligned ext static;
%set NUM to NUM + 1;
TP (NUM): call tp_init (addr (sys_info$default_256K_enable),
   	     "default_256K_enable", "", TP_ON_OFF);
	tp_special = "1"b;
	call on_or_off ();
	go to RETURN;

dcl  sst$dirlock_writebehind fixed bin (35) external static;
%set NUM to NUM + 1;
TP (NUM):	call tp_init (addr (sst$dirlock_writebehind),
	     "dirlock_writebehind", "dirw", TP_ON_OFF);
	call on_or_off ();
	goto RETURN;

%page; %include tuning_parameter_info;
%page; %include syserr_constants;

	end hc_tune;
