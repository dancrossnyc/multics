/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* File System Interface Module. */
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

file:						/* For multisegment file, read delimiters. */
     procedure;

/* Modified 13 August 1972, M J Grady.  */
/* Modified July 1973 by E. Stone to work for both 64k and 256k MSFs */
/* Modified September 1974 by E. Stone to pass expand_path_ a maximum of 168 char pathname */
/* Modified 750915 by PG and MJG to eliminate incorrect validation of arguments to read */

/* internal static */

dcl (reading initial ("0"b),
     writing initial ("1"b)) bit (1) aligned internal static;

/* declarations */

dcl (ioname1, type, ioname3, mode4) character (*);
dcl  status5 bit (72) aligned;
dcl  get_system_free_area_ entry returns (ptr);
dcl  free_area area based (fareap),
     fareap ptr init (null) int static;
dcl  pibp6 pointer;
dcl (buffer_bit_offset,				/* Bit offsets and lengths. */
     bits_requested,
     total_bits,
     seg_bit_offset,
     bits_to_move,
     bits_moved,
     current_bit) fixed binary (24);
dcl (ptrbit2,					/* Temporaries for pointer manipulation. */
     ptrbit3,
     offset) fixed binary (35);
dcl (buffer,					/* Pointer to workspace. */
     p,						/* Pointer to file control block. */
     sp,						/* Pointer to status string. */
     seg) pointer;					/* Pointer to file segment. */
dcl  base fixed binary;				/* Base of incremental bit search. */
dcl  byte bit (9) aligned;				/* Temporary for element during short delimiter search. */
dcl  mode character (4) aligned;			/* Copy of mode string. */
dcl  no_delimiter bit (1) aligned;			/* Flag to show we found a delimiter. */
dcl  pointer_name character (8) aligned;		/* Copy of pointer names. */
dcl (i, j) fixed bin (24),				/* Index. */
    (comp,					/* component number for test. */
     switch) fixed binary;
dcl  code fixed binary (35);				/* error code for routines. */
dcl  temp bit (72) aligned;				/* Temporary for delimiter search. */
dcl  infinity static fixed binary (35) initial (34359738367); /* 2 .P. 35 - 1 */
dcl  bits_per_seg fixed bin (24);
dcl (error_table_$badcall,
     error_table_$boundviol,
     error_table_$change_first,
     error_table_$invalid_backspace_read,
     error_table_$invalid_elsize,
     error_table_$invalid_read,
     error_table_$invalid_seek_last_bound,
     error_table_$invalid_setdelim,
     error_table_$invalid_write,
     error_table_$negative_nelem,
     error_table_$ionmat,				/* Ioname already attached. */
     error_table_$negative_offset,
     error_table_$new_offset_negative,
     error_table_$no_room_for_dsb,			/* Can't allocate file control block. */
     error_table_$too_many_read_delimiters,
     error_table_$undefined_order_request,
     error_table_$undefined_ptrname) external fixed binary (35);
dcl  string based bit (9437184) aligned;		/* Overlay of segment and workspace (buffer). */
dcl  chars based character (1048576) aligned;		/* Segment overlay for fast delimiter searches. */
dcl  char1 character (1) aligned;			/* Copy of delimiter table element. */
dcl 1 status based aligned,				/* I/O system status string. */
    2 code fixed binary (35),				/* Overall error code. */
    2 successful bit (4) unaligned,			/* Logical/physical initiation/termination. */
    2 transaction_terminated bit (1) unaligned,		/* No further status change. */
    2 unassigned bit (4) unaligned,
    2 end_of_data bit (1) unaligned,			/* Obvious. */
    2 pad bit (5) unaligned,
    2 ioname_detached bit (1) unaligned,		/* .. */
    2 pad2 bit (2) unaligned,
    2 transaction_index bit (18) unaligned;		/* IO system transaction index. */
dcl  file_util$attach_file entry (pointer, fixed binary (35));
dcl  file_util$detach_file entry (pointer, fixed binary (35));
dcl  file_util$find_seg_ptr entry (pointer, bit (1) aligned, fixed binary, pointer, fixed binary (35));

dcl (add, addr, addrel, bit, divide, fixed, index, length, min, mod, multiply, null, rel, substr, unspec) builtin;

dcl 1 fcb static aligned like pib;			/* First file control block, allocated at translation time */

/* Additional file control blocks, allocated as needed. */
% include file_pib;


dcl (msegp, mbufp) ptr,
    (msegoff, mbufoff, mmove) fixed bin (24),
     mchrarray (0:1) char (1) based,
     mwords (mmove) fixed bin (35) aligned based,
     mchars char (1000) based aligned;

/*  */
file_attach:					/* entry to attach file. */
	entry (ioname1, type, ioname3, mode4, status5, pibp6);
	sp = addr (status5);			/* Set up pointer to status string. */
	if pibp6 ^= null then			/* Is this name already attached? */
	     do;					/* Yes. */
	     code = error_table_$ionmat;		/* Set error code. */
	     go to set_detached_bit;			/* Give up. */
	end;
	if fareap = null then
	     fareap = get_system_free_area_ ();		/* get area to alloc in */
	if fcb.busy then				/* Is the first block in use? */
	     do;					/* Yes. */
	     allocate pib in (free_area) set (p);	/* Get another. */
	     if p = null then			/* Successful? */
		do;				/* No. */
		code = error_table_$no_room_for_dsb;	/* Set error code. */
		go to set_detached_bit;		/* Give up. */
	     end;
	end;
	else
	p = addr (fcb);				/* Use internal block. */
						/* Insert path name of file into control block. */
	p -> pib.device_name.name_size = min (length (ioname3), length (p -> pib.device_name.name_string));
	p -> pib.device_name.name_string = ioname3;	/* .. */
	mode = mode4;				/* Copy mode string. */
	p -> pib.r, p -> pib.w = ""b;			/* Clear both permission flags. */
	if mode = "r   " then			/* Read only? */
	     p -> pib.r = "1"b;			/* Yes, set read permission flag. */
	if mode = "w   " then			/* Write only? */
	     p -> pib.w = "1"b;			/* Yes, set write permission flag. */
	if p -> pib.r | p -> pib.w then go to mode_out;	/* If any set now jump out. */

	if index (mode4, "read") = 0
	& index (mode4, "write") = 0
	then do;
	     p -> pib.r, p -> pib.w = "1"b;
	     go to mode_out;
	end;

	i = index (mode4, "read");
	if i ^= 0 then do;
	     if i > 1 then
		if substr (mode4, i-1, 1) ^= "^"
		then p -> pib.r = "1"b;		/* set read on */
		else;
	     else p -> pib.r = "1"b;
	end;

	i = index (mode4, "write");
	if i ^= 0 then do;
	     if i > 1 then
		if substr (mode4, i-1, 1) ^= "^"
		then p -> pib.w = "1"b;		/* set write on */
		else;
	     else p -> pib.w = "1"b;			/* also set write */
	end;

mode_out:
	call file_util$attach_file (p, code);		/* Initialize data block. */
	if code ^= 0 then				/* Successful? */
	     go to delete_fcb;			/* No, deallocate the control block. */
	p -> pib.outer_module_name = type;		/* Insert our name. */
	p -> pib.device_name_list = addr (p -> pib.device_name); /* Insert pointer for IOS. */
	p -> pib.device_name.next_device = null;	/* Clear pointer to next list bead. */
	p -> pib.busy = "1"b;			/* Mark block as in use. */
	pibp6 = p;				/* Give pointer to block to IOS. */
	go to good;				/* Attach successfully completed. */
						/*  */
file_detach:
	entry (pibp1, ioname2, disposal, status4);
dcl  pibp1 pointer;
dcl (ioname2, disposal) character (*);
dcl  status4 bit (72) aligned;

	p = pibp1;
	sp = addr (status4);
	call file_util$detach_file (p, code);		/* Clean up and free data block. */
	if code = 0 then				/* Successful? */
	     go to delete_fcb;			/* Yes, deallocate control block. */
	if disposal ^= "h" then			/* No, are we requested to hold the control block? */
	     do;					/* No. */
delete_fcb:    p -> pib.busy = ""b;			/* Clear the use flag. */
	     if p ^= addr (fcb) then			/* Is it the original block? */
		free p -> pib in (free_area);		/* No, return it to free storage. */
	     sp -> status.ioname_detached = "1"b;	/* Set detached bit. */
	end;
	if code ^= 0 then				/* Which exit should we take? */
	     go to bad;				/* Erroneous operation, report code. */
	go to good;
						/*  */
file_order:
	entry (pibp1, request, argptr, status4);
dcl  request character (*) aligned;			/* The name of the request. */
dcl  argptr pointer;				/* Pointer to arguments. */

	sp = addr (status4);			/* Get pointer to status string. */
	p = pibp1;				/* Copy pointer to control block. */
	if request = "backspace_read" then		/* Examine request name. */
	     do;					/* This is it. */
	     if ^ p -> pib.r then			/* Is file readable? */
		do;				/* No. */
		code = error_table_$invalid_read;	/* Set error code. */
		go to bad;			/* Give error return. */
	     end;
	     if argptr ^= null then			/* No arguments. */
		do;				/* But some supplied. */
		code = error_table_$badcall;		/* Set error code. */
		go to bad;			/* Give error return. */
	     end;
	     if p -> pib.nreads = 0 then		/* Are there any delimiters? */
		do;				/* No. */
scan (0): scan_none: code = error_table_$invalid_backspace_read; /* No, set error code. */
		go to bad;			/* Return to caller. */
	     end;
	     p -> pib.readbit = add (p -> pib.readbit, - 2 * p -> pib.elsize, 35, 0); /* Back up two bytes. */
try_scan:	     if p -> pib.readbit <= 0 then		/* At beginning of file? */
		do;				/* Yes. */
		p -> pib.readbit = 0;		/* Make sure nonnegative. */
		go to good;			/* Give normal return. */
	     end;
	     bits_per_seg = p -> pib.bits_per_segment;
	     seg_bit_offset = mod (p -> pib.readbit, bits_per_seg); /* Get offset in current segment. */
	     comp = divide (p -> pib.readbit, bits_per_seg, 17, 0); /* get component number */
	     if comp ^= p -> pib.lastcomp then do;	/* check to see if same as last time. */
		call file_util$find_seg_ptr (p, (reading), comp, seg, code); /* Get segment. */
		if code ^= 0 then			/* Successful? */
		     go to bad;			/* Give error return. */
		p -> pib.lastcomp = comp;		/* set new component number. */
		p -> pib.lastseg = seg;		/* save new seg number */
	     end;
	     else seg = p -> pib.lastseg;		/* else set seg to be same as last time. */
	     do current_bit = seg_bit_offset by - p -> pib.elsize to 0; /* Scan backwards. */
		temp = substr (seg -> string, current_bit + 1, p -> pib.elsize); /* Extract one byte. */
		go to scan (p -> pib.search_type);	/* Dispatch to proper scan. */

scan (2): scan_bit_table: if substr (p -> pib.readlist, fixed (substr (temp, 1, 9), 9) + 1, 1) then /* Is this a break? */
		     go to scan_done;		/* Yes, terminate the scan. */
		go to scan_loop;			/* No, get next. */

scan (1): scan_1_char:				/* Can't handle special case; treat as packed. */
scan (3): scan_packed: j = 0;				/* Reset array index. */
		do i = 1 to p -> pib.nreads;		/* Compare with each delimiter. */
		     if temp = substr (p -> pib.readlist, j + 1, p -> pib.elsize) then /* Does this match? */
			go to scan_done;		/* Yes, stop. */
		     j = j + p -> pib.elsize;		/* Bump array index. */
		end;
scan_loop:     end;
						/* Adjust read pointer to end of previous segment. */
	     p -> pib.readbit = add (p -> pib.readbit, - seg_bit_offset - p -> pib.elsize, 35, 0);
	     go to try_scan;			/* Go check for file beginning, get next segment. */

/* Adjust read pointer to place we found. */
scan_done:     p -> pib.readbit = add (p -> pib.readbit, - seg_bit_offset + current_bit + p -> pib.elsize, 35, 0);
	     go to good;				/* Give normal return. */
	end;
	if request = "call" then			/* Is request for file system call? */
	     do;					/* Yes. */
	     argptr -> status.code = p -> pib.call;	/* Give it to caller. */
	     go to good;				/* Return to caller. */
	end;
	code = error_table_$undefined_order_request;	/* Unrecognized request. */
	go to bad;				/* Give error return. */
						/*  */
file_getsize:
	entry (pibp1, elsize, status3);
dcl  elsize fixed binary (24);
dcl  status3 bit (72) aligned;

	p = pibp1;
	sp = addr (status3);
	elsize = p -> pib.elsize;
	go to good;

file_setsize:
	entry (pibp1, elsize, status3);

	p = pibp1;
	sp = addr (status3);
	if elsize < 1 then
	     do;
	     code = error_table_$invalid_elsize;
	     go to bad;
	end;
	bits_per_seg = p -> pib.bits_per_segment;
	if elsize > bits_per_seg then			/* Is it too big? */
	     do;					/* Yes. */
	     code = error_table_$invalid_elsize;	/* Set code. */
	     go to bad;				/* Give error return. */
	end;
	p -> pib.elsize = elsize;
						/* Round pointers to integral element. */
	call round (p -> pib.readbit);
	call round (p -> pib.writebit);
	call round (p -> pib.lastbit);
	call round (p -> pib.highbit);
	call round (p -> pib.boundbit);
	p -> pib.search_type, p -> pib.nreads = 0;	/* Flush any read delimiters. */
	go to good;
						/*  */
file_read:
	entry (pibp1, workspace, offset3, nelem, nelemt, status6);
dcl  workspace pointer;
dcl (offset3, nelem, nelemt) fixed binary (24);
dcl  status6 bit (72) aligned;

	p = pibp1;
	sp = addr (status6);
	nelemt, total_bits = 0;			/* Nothing transmitted yet. */
	if ^ p -> pib.r then
	     do;					/* Improper mode. */
	     code = error_table_$invalid_read;		/* Give error return. */
	     go to bad;
	end;
	buffer = workspace;				/* Copy workspace pointer. */
	buffer_bit_offset = multiply (offset3, p -> pib.elsize, 24, 0); /* Copy workspace offset. */
	if buffer_bit_offset < 0 then			/* It must be non-negative. */
	     do;					/* Bad offset. */
	     code = error_table_$negative_offset;	/* Give error return. */
	     go to bad;
	end;
	bits_requested = multiply (nelem, p -> pib.elsize, 24, 0); /* Copy number of elements desired. */
	if bits_requested < 0 then			/* It, too must be non-negative. */
	     do;					/* Bad buffer size. */
	     code = error_table_$negative_nelem;	/* Give error return. */
	     go to bad;
	end;
	bits_per_seg = p -> pib.bits_per_segment;
	call round (p -> pib.lastbit);		/* Round last pointer to element boundary. */
	no_delimiter = "1"b;			/* Set flag for retry. */
try_read:	seg_bit_offset = mod (p -> pib.readbit, bits_per_seg); /* Get bit offset in current segment. */
	bits_to_move = min (add (p -> pib.lastbit, - p -> pib.readbit, 35, 0), bits_requested); /* Get bits to move. */
	bits_moved = min (bits_per_seg - seg_bit_offset, bits_to_move); /* Get bits we can move out of cur seg. */
	comp = divide (p -> pib.readbit, bits_per_seg, 17, 0); /* get component number */
	if comp ^= p -> pib.lastcomp then do;		/* check to see if same as last time. */
	     call file_util$find_seg_ptr (p, (reading), comp, seg, code); /* Get segment. */
	     if code ^= 0 then go to good;		/* Not an error...this is an EOF condition */
	     p -> pib.lastcomp = comp;		/* set new component number. */
	     p -> pib.lastseg = seg;			/* save new seg number */
	end;
	else seg = p -> pib.lastseg;			/* else set seg to be same as last time. */
	go to read (p -> pib.search_type);		/* Dispatch to proper delimiter search. */

read (2):						/* READ BIT TABLE */
	current_bit = 0;				/* Reset bit count. */
	do while (current_bit < bits_moved);		/* Fill buffer if possible. */
						/* Move one byte for comparison. */
	     byte = substr (seg -> string, seg_bit_offset + current_bit + 1, p -> pib.elsize);
	     current_bit = current_bit + p -> pib.elsize; /* Count the element. */
	     if substr (p -> pib.readlist, fixed (byte, 9) + 1, 1) then /* Is this it? */
		go to read_delimiter_found;		/* Yes. */
	end;
	go to read_move;				/* Go move the entire string. */

read (3):						/* READ PACKED */
	current_bit = 0;				/* Reset bit count. */
	do while (current_bit < bits_moved);		/* Fill buffer if possible. */
						/* Move one byte for comparison. */
	     temp = substr (seg -> string, seg_bit_offset + current_bit + 1, p -> pib.elsize);
	     current_bit = current_bit + p -> pib.elsize; /* Count the element. */
	     j = 0;				/* Reset array index. */
	     do i = 1 to p -> pib.nreads;		/* Search the delimiter list. */
		if temp = substr (p -> pib.readlist, j + 1, p -> pib.elsize) then /* Is this it? */
		     go to read_delimiter_found;	/* Yes. */
		j = j + p -> pib.elsize;		/* Update array index. */
	     end;
	end;
	go to read_move;				/* Go move the entire string. */

read (1):						/* READ 1 CHAR */
	i = divide (seg_bit_offset, 9, 17, 0);		/* Compute index of first character in file segment. */
	j = divide (bits_moved, 9, 17, 0);		/* Compute length of rest of segment in characters. */
	unspec (char1) = substr (p -> pib.readlist, 1, 9); /* Copy the delimiter. */
	current_bit = 9 * index (substr (seg -> chars, i + 1, j), char1); /* Look for the break. */
	if current_bit ^= 0 then			/* Any found? */
	     do;					/* Yes. */
read_delimiter_found:
	     no_delimiter = ""b;			/* Clear flag. */
	     bits_moved = current_bit;		/* Correct size of move. */
	end;
read (0):						/* Case of no read delimiters. */
read_move:
	if p -> pib.elsize = 36 then do;
	     msegoff = divide (seg_bit_offset, p -> pib.elsize, 24, 0);
	     msegp = addrel (seg, msegoff);
	     mbufoff = divide (buffer_bit_offset, p -> pib.elsize, 24, 0);
	     mbufp = addrel (buffer, mbufoff);
	     mmove = divide (bits_moved, p -> pib.elsize, 24, 0);
	     mbufp -> mwords = msegp -> mwords;
	end;
	else if p -> pib.elsize = 9 then do;
	     msegoff = divide (seg_bit_offset, p -> pib.elsize, 24, 0);
	     mbufoff = divide (buffer_bit_offset, p -> pib.elsize, 24, 0);
	     mmove = divide (bits_moved, p -> pib.elsize, 24, 0);
	     substr (buffer -> mchars, mbufoff+1, mmove) = substr (seg -> mchars, msegoff+1, mmove);
	end;
	else do;
	     substr (buffer -> string, buffer_bit_offset + 1, bits_moved) =
		substr (seg -> string, seg_bit_offset + 1, bits_moved);
	end;
	total_bits = total_bits + bits_moved;		/* Count total bits transmitted. */
	nelemt = divide (total_bits, p -> pib.elsize, 24, 0);
	p -> pib.readbit = add (p -> pib.readbit, bits_moved, 35, 0);
	if no_delimiter then			/* Was the delimiter found? */
	     if bits_moved < bits_to_move then		/* No, is more data in other segment? */
		do;				/* Yes. */
		buffer_bit_offset = buffer_bit_offset + bits_moved; /* Move up in buffer. */
		bits_requested = bits_requested - bits_moved; /* Decrease "demand". */
		go to try_read;			/* Go try again. */
	     end;
	go to good;
						/*  */
file_write:
	entry (pibp1, workspace, offset3, nelem, nelemt, status6);

	p = pibp1;
	sp = addr (status6);
	nelemt, total_bits = 0;			/* Clear for accumulation of bits transmitted. */
	if ^ p -> pib.w then
	     do;					/* Improper mode. */
	     code = error_table_$invalid_write;		/* Give error return. */
	     go to bad;
	end;
	buffer = workspace;				/* Copy pointer to caller's buffer. */
	buffer_bit_offset = multiply (offset3, p -> pib.elsize, 24, 0);
	if buffer_bit_offset < 0 then			/* Check range. */
	     do;					/* Bad. */
	     code = error_table_$negative_offset;	/* Set up code. */
	     go to bad;				/* Give error return. */
	end;
	bits_requested = multiply (nelem, p -> pib.elsize, 24, 0);
	if bits_requested < 0 then			/* Check range. */
	     do;					/* Bad. */
	     code = error_table_$negative_nelem;	/* Set up code. */
	     go to bad;				/* Give error return. */
	end;
	bits_per_seg = p -> pib.bits_per_segment;
						/* Might we get bounds fault accessing buffer? */
	if fixed (rel (buffer), 18) * 36 + buffer_bit_offset + bits_requested > bits_per_seg then
	     do;					/* Yes. */
	     code = error_table_$boundviol;		/* Off end of buffer. */
	     go to bad;				/* Give error return. */
	end;
	call round (p -> pib.writebit);		/* Round write pointer to element boundary. */
try_write:
	seg_bit_offset = mod (p -> pib.writebit, bits_per_seg); /* Get offset in current segment. */
	bits_to_move = min (add (p -> pib.boundbit, - p -> pib.writebit, 35, 0), bits_requested);
	bits_moved = min (bits_per_seg - seg_bit_offset, bits_to_move); /* Get bits we can move. */
	comp = divide (p -> pib.writebit, bits_per_seg, 17, 0); /* get component number */
	if comp ^= p -> pib.lastcomp then do;		/* check to see if same as last time. */
	     call file_util$find_seg_ptr (p, (writing), comp, seg, code); /* Get segment. */
	     if code ^= 0 then			/* Successful? */
		go to bad;			/* Give error return. */
	     p -> pib.lastcomp = comp;		/* set new component number. */
	     p -> pib.lastseg = seg;			/* save new seg number */
	end;
	else seg = p -> pib.lastseg;			/* else set seg to be same as last time. */
	if p -> pib.elsize = 36 then do;
	     msegoff = divide (seg_bit_offset, p -> pib.elsize, 24, 0);
	     msegp = addrel (seg, msegoff);
	     mbufoff = divide (buffer_bit_offset, p -> pib.elsize, 24, 0);
	     mbufp = addrel (buffer, mbufoff);
	     mmove = divide (bits_moved, p -> pib.elsize, 24, 0);
	     msegp -> mwords = mbufp -> mwords;
	end;
	else if p -> pib.elsize = 9 then do;
	     msegoff = divide (seg_bit_offset, p -> pib.elsize, 24, 0);
	     mbufoff = divide (buffer_bit_offset, p -> pib.elsize, 24, 0);
	     mmove = divide (bits_moved, p -> pib.elsize, 24, 0);
	     substr (seg -> mchars, msegoff+1, mmove) = substr (buffer -> mchars, mbufoff+1, mmove);
	end;
	else do;
	     substr (seg -> string, seg_bit_offset + 1, bits_moved) =
		substr (buffer -> string, buffer_bit_offset + 1, bits_moved);
	end;
	total_bits = total_bits + bits_moved;		/* Count this batch. */
	nelemt = divide (total_bits, p -> pib.elsize, 24, 0);
	p -> pib.writebit = add (p -> pib.writebit, bits_moved, 35, 0);
	if p -> pib.writebit > p -> pib.lastbit then	/* Was file size increased? */
	     do;					/* Yes. */
	     p -> pib.lastbit = p -> pib.writebit;	/* Increase pointer to indicate it. */
	     p -> pib.highbit = p -> pib.lastbit;	/* set high water mark */
	     p -> pib.changed = "1"b;			/* Mark it for setting bit count. */
	end;
	if bits_moved < bits_to_move then		/* Is more data in other segment? */
	     do;					/* Yes. */
	     buffer_bit_offset = buffer_bit_offset + bits_moved; /* Move up in buffer. */
	     bits_requested = bits_requested - bits_moved; /* Decrease "demand". */
	     go to try_write;			/* Go try again. */
	end;
	go to good;
						/*  */
file_setdelim:
	entry (pibp1, nbreaks, breaklist, nreads, readlist, status6);
dcl  nbreaks, nreads;				/* Numbers of elements. */
dcl (breaklist, readlist) bit (*) aligned;

	sp = addr (status6);			/* Get pointer to status string. */
	p = pibp1;				/* Copy pointer to control data. */
	if p -> pib.elsize > length (temp) then		/* Will delimiter search work? */
	     do;					/* No. */
	     code = error_table_$invalid_setdelim;	/* Refuse call. */
	     go to bad;
	end;
	bits_per_seg = p -> pib.bits_per_segment;
	if mod (bits_per_seg, p -> pib.elsize) ^= 0 then	/* Will elements span segment boundaries? */
	     do;					/* Yes, delimiter search will not always work. */
	     code = error_table_$invalid_setdelim;	/* Give error code. */
	     go to bad;				/* Refuse call. */
	end;
	if nreads < 0 then				/* Check validity. */
	     do;					/* Bad. */
	     code = error_table_$badcall;		/* Refuse call. */
	     go to bad;
	end;
	if p -> pib.elsize > 9 then			/* Will we have to store the bytes? */
	     do;					/* Yes. */
	     total_bits = nreads * p -> pib.elsize;	/* Compute number of bits required. */
	     if total_bits > length (p -> pib.readlist) then /* Make sure not too many. */
		do;				/* Bad. */
		code = error_table_$too_many_read_delimiters; /* Refuse call. */
		go to bad;
	     end;
	end;
	p -> pib.nreads = nreads;			/* Save the total number of delimiters. */
	if p -> pib.nreads = 1 then			/* Is there only one? */
	     if p -> pib.elsize = 9 then		/* Is it a character? */
		do;				/* Yes, special case. */
		p -> pib.search_type = 1;		/* Set dispatch code. */
		substr (p -> pib.readlist, 1, 9) = substr (readlist, 1, 9); /* Copy the character. */
		go to good;			/* Return to caller. */
	     end;
	if p -> pib.nreads = 0 then			/* Are there no delimiters specified? */
	     do;					/* Yes. */
	     p -> pib.search_type = 0;		/* Set up dispatch code. */
	end;
	else
	if p -> pib.elsize > 9 then			/* Must we use packed array? */
	     do;					/* Yes. */
	     p -> pib.search_type = 3;		/* Remember dispatch code. */
	     substr (p -> pib.readlist, 1, total_bits) = substr (readlist, 1, total_bits); /* Copy the string. */
	end;
	else					/* Element size less than 9 bits. */
	do;					/* We may use bit table. */
	     p -> pib.search_type = 2;		/* Set dispatch code. */
	     p -> pib.readlist = ""b;			/* Clear the table. */
	     j = 0;				/* Set up index of first delimiter. */
	     do i = 1 to p -> pib.nreads;		/* Start copy loop. */
		byte = substr (readlist, j + 1, p -> pib.elsize); /* Extract the byte. */
		substr (p -> pib.readlist, fixed (byte, 9) + 1, 1) = "1"b; /* Mark the table entry. */
		j = j + p -> pib.elsize;		/* Move index to next delimiter. */
	     end;
	end;
	go to good;				/* Give happy return. */
						/*  */
file_getdelim:
	entry (pibp1, nbreaks, breaklist, nreads, readlist, status6);

	sp = addr (status6);			/* Get pointer to status string. */
	p = pibp1;				/* Copy pointer to control data. */
	nbreaks = 0;				/* We have no break characters. */
	go to get (p -> pib.search_type);		/* Dispatch on delimiter code. */

get (0): get_none:					/* Case of no delimiters. */
	nreads = 0;				/* Set caller's count. */
	go to good;				/* Return to caller. */

get (1): get_1_char:				/* Special case. */
	nreads = 1;				/* Give caller number of delimiters. */
	substr (readlist, 1, 9) = substr (p -> pib.readlist, 1, 9); /* Give caller the character. */
	go to good;				/* Return to caller. */

get (2): get_bit_table:				/* Case of 256-entry bit table. */
	base, j = 0;				/* Reset bit and byte indices. */
	do nreads = 0 by 1;				/* Count bytes returned. */
	     i = index (substr (p -> pib.readlist, base + 1), "1"b); /* Find next marked entry. */
	     if i = 0 then				/* No more? */
		go to good;			/* Return to caller. */
	     substr (readlist, j + 1, p -> pib.elsize) = bit (base + i - 1, 9); /* Form matching code. */
	     j = j + p -> pib.elsize;			/* Update output array index. */
	     base = base + i;			/* Update search base. */
	end;
	go to good;				/* Return to caller. */

get (3): get_packed:				/* Case of packed array of bytes. */
	nreads = p -> pib.nreads;			/* Give caller the number of read delimiters. */
	total_bits = p -> pib.nreads * p -> pib.elsize;	/* Compute number of bits required. */
	substr (readlist, 1, total_bits) = substr (p -> pib.readlist, 1, total_bits); /* Give them to caller. */
	go to good;				/* Give happy return. */
						/*  */
file_seek:
	entry (pibp1, ptrname2, ptrname3, offset4, status5);
dcl (ptrname2, ptrname3) character (*);
dcl  offset4 fixed binary (35);

	p = pibp1;
	sp = addr (status5);
	pointer_name = ptrname3;			/* Copy name of reference pointer. */
	call pointerdecode (pointer_name, ptrbit3, switch);
	if switch = 0 then				/* Was name recognizable? */
	     do;
	     code = error_table_$undefined_ptrname;	/* Unrecognizable ptrname3. */
	     go to bad;
	end;
	offset = add (ptrbit3, multiply (offset4, p -> pib.elsize, 35, 0), 35, 0); /* Compute new pointer value. */
	if offset < 0 then
	     do;
	     code = error_table_$new_offset_negative;	/* Resultant offset improper. */
	     go to bad;
	end;
	pointer_name = ptrname2;			/* Copy name of pointer to be set. */
	call pointerdecode (pointer_name, ptrbit2, switch);
	go to seek (switch);			/* Dispatch on pointer name. */

seek (0): seek_0:
	code = error_table_$undefined_ptrname;		/* Improper ptrname2. */
	go to bad;

seek (1): seek_first:
	code = error_table_$change_first;		/* Attempt to change value of first pointer. */
	go to bad;				/* Give error return. */

seek (2): seek_read:
	if ^ p -> pib.r then			/* Do we have read permission? */
	     do;					/* No. */
	     code = error_table_$invalid_read;		/* Set Error code. */
	     go to bad;				/* Give error return. */
	end;
	p -> pib.readbit = min (offset, p -> pib.lastbit);
	go to good;

seek (3): seek_write:
	if ^ p -> pib.w then			/* Do we have write permission? */
	     do;					/* No. */
	     code = error_table_$invalid_write;		/* Set error code. */
	     go to bad;				/* Give error return. */
	end;
	p -> pib.writebit = min (offset, p -> pib.lastbit);
	go to good;

seek (4): seek_last:
	if ^ p -> pib.w then			/* May we write on this file? */
	     do;					/* No. */
	     if offset > p -> pib.highbit then do;
		code = error_table_$invalid_seek_last_bound; /* Give error return. */
		go to bad;
	     end;
	     p -> pib.lastbit = offset;
	     go to good;
	end;
	p -> pib.lastbit = min (offset, p -> pib.boundbit);
	p -> pib.highbit = p -> pib.lastbit;
	go to truncate;

seek (5): seek_bound:
	if ^ p -> pib.w then			/* Do we have write permission? */
	     do;					/* No. */
	     code = error_table_$invalid_seek_last_bound; /* Give error return. */
	     go to bad;
	end;
	p -> pib.boundbit = offset;
	if p -> pib.lastbit > offset then		/* Does change to bound necessitate change to last? */
	     do;					/* Yes. */
	     p -> pib.lastbit = offset;		/* Perform necessary truncation. */
truncate:	     p -> pib.changed = "1"b;			/* Mark for later setting bit count. */
	end;
						/* Truncate read, write pointers if necessary. */
	p -> pib.readbit = min (p -> pib.readbit, p -> pib.lastbit);
	p -> pib.writebit = min (p -> pib.writebit, p -> pib.lastbit);
	go to good;
						/*  */
file_tell:
	entry (pibp1, ptrname2, ptrname3, offset4, status5);

	p = pibp1;
	sp = addr (status5);
	pointer_name = ptrname3;			/* Copy name of reference pointer. */
	call pointerdecode (pointer_name, ptrbit3, switch);
	if switch = 0 then				/* Was name recognizable? */
	     do;
	     code = error_table_$undefined_ptrname;	/* Unrecognizable ptrname3. */
	     go to bad;				/* Give error return. */
	end;
	pointer_name = ptrname2;			/* Copy name of pointer whose value is wanted. */
	call pointerdecode (pointer_name, ptrbit2, switch);
	if switch = 0 then				/* Was name recognizable? */
	     do;
	     code = error_table_$undefined_ptrname;	/* Unrecognizable ptrname2. */
	     go to bad;				/* Give error return. */
	end;
	offset4 = divide (add (ptrbit2, - ptrbit3, 35, 0), p -> pib.elsize, 35, 0);
	go to good;
						/*  */
set_detached_bit:
	sp -> status.ioname_detached = "1"b;		/* Indicate detachment. */
bad:	sp -> status.code = code;
	go to done;

good:	sp -> status.successful = "1111"b;		/* Indicate initiation/termination. */
	sp -> status.code = 0;			/* set return code to zero */
done:	sp -> status.transaction_terminated = "1"b;	/* Indicate we are done. */
	if sp -> status.ioname_detached then		/* Was this a detach call? */
	     return;
	if p -> pib.readbit >= p -> pib.lastbit then
	     sp -> status.end_of_data = "1"b;		/* Set EOF indicator. */
	return;					/* Return to caller. */
						/*  */
pointerdecode:					/* Procedure to decode pointer name. */
	procedure (pointername, pointerbit, switch);	/* Returns pointer value and dispatch index. */
dcl  pointername character (8) aligned;			/* Symbolic pointer name. */
dcl  pointerbit fixed binary (35);			/* Returned value of the pointer. */
dcl  switch fixed binary;				/* Label index. */

	     if pointername = "first   " then
		do;
		pointerbit = 0;
		switch = 1;
	     end;
	     else
	     if pointername = "read    " then
		do;
		pointerbit = p -> pib.readbit;
		switch = 2;
	     end;
	     else
	     if pointername = "write   " then
		do;
		call round (p -> pib.writebit);	/* Round write pointer to integral element. */
		pointerbit = p -> pib.writebit;
		switch = 3;
	     end;
	     else
	     if pointername = "last    " then
		do;
		call round (p -> pib.lastbit);	/* Round last pointer to integral elements. */
		pointerbit = p -> pib.lastbit;
		switch = 4;
	     end;
	     else
	     if pointername = "bound   " then
		do;
		pointerbit = p -> pib.boundbit;
		switch = 5;
	     end;
	     else
	     pointerbit, switch = 0;
	end pointerdecode;				/* Return to caller. */
						/*  */
round:	procedure (offset);				/* Procedure to round subject to upper limit. */
dcl  offset fixed binary (35);			/* Bit offset in file. */
dcl (overage, underage) fixed binary (24);		/* Element size and errors. */

	     overage = mod (offset, p -> pib.elsize);	/* Calculate amount of offset over integral elements. */
	     if overage ^= 0 then			/* If zero, we are OK. */
		do;
		underage = p -> pib.elsize - overage;	/* Get amount of increase necessary. */
		if add (infinity, - offset, 35, 0) >= underage then /* Is there room for increase? */
		     offset = add (offset, underage, 35, 0); /* Yes, round up. */
		else
		offset = add (offset, - overage, 35, 0); /* No, truncate down. */
	     end;
	end round;
     end file;
