/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2,ind3 */
make_msf_:
   proc (dirname_arg, ename_arg, rbs, code);

/* Modified July 1973 by E. Stone to work for both 64k and 256k MSFs */
/* Modified Jan 1976 by Vinograd to work if linkage error on delete_ (for ring 1 reload) */
/* Modified 7/26/77 by M. Asherman to respect safety_sw on msf components
   by not allowing reversion to ssf in this case */
/* Modified 05/05/78 by C. D. Tavares to use hcs_$create_branch_, propagating
   safety_sw, copy_sw, and priv_upgrade_sw, on SSF -> MSF and MSF -> SSF */
/* Modified 01/09/78 by CDT to set extended ring brackets on dir portion
   of MSF to match ring brackets of components */
/* Modified 11/26/80 W. Olin Sibert to use automatic area for status_long names because of extensible area problem */
/* Modified:

01/25/82 by Lindsey Spratt: to create an MSF when no SSF exists.  Also,
	  changed to always add status permission to *.*.* on the directory
	  portion of the MSF.
03/24/82 by Lindsey Spratt: Changed error code analysis following call
	  of get_link_target.
06/24/82 by Lindsey Spratt: Changed to use access_mode_values include file.
12/27/84 by Keith Loepere: Version 2 create_branch_info.
02/05/85 by Steve Herbst: Changed to set "s *.*.*" only if there is not already
	  a *.*.* entry on the ACL.
*/

      dcl	    (
	    dirname_arg	       char (*),
	    ename_arg	       char (*),
	    rbs		       (3) fixed bin (6),	/* really an output arg??? */
	    code		       fixed bin (35)
	    )		       parameter;

/* automatic */

      dcl	    acl_count	       fixed bin,
	    aclp		       ptr init (null),
	    acl_area_ptr	       pointer,
	    copysw	       bit (1),
	    cur_ring	       fixed bin,
	    dac		       fixed bin,
	    dap		       ptr init (null),
	    dir_rings	       (2) fixed bin (6),
	    dirname	       char (168),
	    ename		       char (32),
	    (i, ii)	       fixed bin,
	    known		       bit (1) aligned,
	    max_length	       fixed bin (19),
	    path		       char (168),
	    remember_ptr	       ptr,
	    safety_sw	       bit (1) aligned,
	    star_star_sw	       bit (1) aligned,
	    temp_acc	       bit (72) aligned,
	    component_0_existed    bit (1) aligned,
	    SSF_existed	       bit (1) aligned,
	    unique	       char (32),
	    unique_dir	       char (168);

/* This area is used to hold the nams returned by hcs_$status_long. Because it is automatic, things need
   not ever be freed from it. It must be used because hcs_$status_ and extensible areas do not interact
   at all well, due to the 18 bit rel ptrs in the status return structure. 
   It has room for 500 names, which I trust will be sufficient.
   */

      dcl	    names_area	       area (2000) automatic;

/* static */

      dcl	    sys_areap	       pointer internal static initial (null);

/* based */

      dcl	    free_area	       area based (sys_areap);

/* external static */

      dcl	    (
	    error_table_$safety_sw_on,
	    error_table_$noentry,
	    error_table_$segknown
	    )		       ext fixed bin (35) static;

/* entries */

      dcl	    cu_$level_get	       entry returns (fixed bin),
	    delete_$path	       entry (char (*), char (*), bit (6), char (*), fixed bin (35)),
	    get_group_id_$tag_star entry returns (char (32)),
	    get_system_free_area_  entry returns (ptr),
	    get_authorization_     entry () returns (bit (72) aligned),
	    hcs_$add_acl_entries   entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
	    hcs_$add_dir_acl_entries
			       entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
	    hcs_$add_inacl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin, fixed bin (35)),
	    hcs_$append_branch     entry (char (*), char (*), fixed bin (5), fixed bin (35)),
	    hcs_$append_branchx    entry (char (*), char (*), fixed bin (5), (3) fixed bin (6), char (*), fixed bin (1),
			       fixed bin (1), fixed bin (24), fixed bin (35)),
	    hcs_$chname_file       entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	    hcs_$create_branch_    ext entry (char (*), char (*), pointer, fixed bin (35)),
	    hcs_$delentry_file     entry (char (*), char (*), fixed bin (35)),
	    hcs_$fs_move_file      entry (char (*), char (*), fixed bin (2), char (*), char (*), fixed bin (35)),
	    hcs_$get_access_class  ext entry (char (*), char (*), bit (72) aligned, fixed bin (35)),
	    hcs_$get_link_target   entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	    hcs_$get_max_length_seg
			       entry (ptr, fixed bin (19), fixed bin (35)),
	    hcs_$get_safety_sw     entry (char (*), char (*), bit (1) aligned, fixed bin (35)),
	    hcs_$get_safety_sw_seg entry (ptr, bit (1) aligned, fixed bin (35)),
	    hcs_$initiate	       entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
			       fixed bin (35)),
	    hcs_$initiate_count    entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr,
			       fixed bin (35)),
	    hcs_$list_acl	       entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35)),
	    hcs_$list_inacl	       entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin, fixed bin (35)),
	    hcs_$set_bc	       entry (char (*), char (*), fixed bin (24), fixed bin (35)),
	    hcs_$set_dir_ring_brackets
			       entry (char (*), char (*), (2) fixed bin (6), fixed bin (35)),
	    hcs_$set_max_length    entry (char (*), char (*), fixed bin (19), fixed bin (35)),
	    hcs_$set_safety_sw     ext entry (char (*), char (*), bit (1) aligned, fixed bin (35)),
	    hcs_$status_long       entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35)),
	    hcs_$terminate_file    entry (char (*), char (*), fixed bin (1), fixed bin (35)),
	    unique_chars_	       entry (bit (*)) returns (char (15));

/* builtins and conditions */

      dcl	    (addr, binary, empty, max, null, pointer, prod, rtrim, substr, unspec)
			       builtin;

      dcl	    (cleanup, linkage_error)
			       condition;

/* structures */

      dcl	    1 s_acl	       (acl_count) based (aclp) aligned,
	      2 userid	       char (32),
	      2 mode	       bit (4) unaligned,
	      2 mbz1	       bit (32) unaligned,
	      2 mbz2	       bit (36),
	      2 err_code	       fixed bin (35);

      dcl	    1 d_acl	       (dac) based (dap) aligned,
	      2 userid	       char (32),
	      2 mode	       bit (3) unaligned,
	      2 mbz1	       bit (33) unaligned,
	      2 err_code	       fixed bin (35);

%include create_branch_info;

      dcl	    1 cbi		       like create_branch_info aligned automatic;

%include status_structures;
%include access_mode_values;

      dcl	    1 branch	       like status_branch aligned automatic;

      unspec (cbi) = ""b;
      cbi.version = create_branch_version_2;
      cbi.chase_sw = "1"b;

      if sys_areap = null
      then sys_areap = get_system_free_area_ ();
      status_area_ptr = addr (names_area);
      acl_area_ptr = sys_areap;
      status_ptr = addr (branch);
      unspec (branch) = ""b;

      on cleanup call free_allocated_storage;

      call hcs_$get_link_target (dirname_arg, ename_arg, dirname, ename, code);
						/* get real path name */
      if code = 0
      then
         do;
	  SSF_existed = "1"b;
	  call hcs_$initiate_count (dirname, ename, "", cbi.bitcnt, 0, remember_ptr, code);
						/* find out about seg */

	  if code = 0
	  then known = "0"b;
	  else if code = error_table_$segknown
	  then known = "1"b;
	  else goto error_return;
         end;
      else if code = error_table_$noentry
      then
         do;
	  dirname = dirname_arg;
	  ename = ename_arg;
	  SSF_existed = "0"b;
	  known = "0"b;
         end;
      else goto error_return;

      cur_ring = cu_$level_get ();

      if SSF_existed
      then
         do;
	  call hcs_$status_long (dirname, ename, 1, status_ptr, status_area_ptr, code);
						/* do status get names	*/
	  if code ^= 0
	  then go to error_return;


	  rbs (*) = branch.ring_brackets (*);
	  cbi.rings (*) = branch.ring_brackets (*);
	  cbi.mode = substr (branch.raw_mode, 2, 3);
	  cbi.userid = get_group_id_$tag_star ();
	  cbi.copy_sw = branch.copy_switch;		/* who are we to judge?? */
         end;
      else
         do;
	  rbs (*) = cur_ring;
	  cbi.rings (*) = rbs (*);
	  cbi.mode = SMA_ACCESS;
	  cbi.userid = get_group_id_$tag_star ();
	  cbi.copy_sw = "0"b;
         end;

      if SSF_existed
      then
         do;
	  call hcs_$get_safety_sw (dirname, ename, safety_sw, code);
	  if code ^= 0
	  then goto error_return;
         end;
      else safety_sw = "0"b;

      if SSF_existed
      then
         do;
	  call hcs_$get_access_class (dirname, ename, cbi.access_class, code);
	  if code ^= 0
	  then goto error_return;
         end;
      else cbi.access_class = get_authorization_ ();
      if prod (cbi.rings) = 1 & SSF_existed
      then
         do;					/* ring brackets are 1, 1, 1 */
	  call hcs_$get_access_class (dirname, "", temp_acc, code);
	  if code = 0
	  then if temp_acc ^= cbi.access_class
	       then cbi.priv_upgrade_sw = "1"b;
         end;

      cbi.parent_ac_sw = ^cbi.priv_upgrade_sw;

/* DRV - get volume backup switch from SSF here */

      if SSF_existed
      then
         do;
	  call hcs_$list_acl (dirname, ename, acl_area_ptr, aclp, null, acl_count, code);
						/* get acl on segment */
	  if code ^= 0
	  then
	     do;
	        acl_count = 0;
	        if aclp ^= null
	        then free s_acl in (free_area);
	     end;
         end;
      else
         do;
	  call hcs_$list_inacl (dirname, "", acl_area_ptr, aclp, null, acl_count, cur_ring, code);
	  if code ^= 0
	  then
	     do;
	        acl_count = 0;
	        if aclp ^= null
	        then free s_acl in (free_area);
	     end;
         end;
      if SSF_existed
      then unique = unique_chars_ (""b);		/* make up a unique name */
      else unique = ename;
      unique_dir = rtrim (dirname, " ") || ">" || unique;


      call hcs_$append_branchx (dirname, unique, 01111b, (7), (cbi.userid), 1, 0, 1, code);
						/* make a directory */
      if code ^= 0
      then go to error_return;


      call hcs_$add_inacl_entries (dirname, unique, aclp, acl_count, cur_ring, code);
						/* put seg acl on initial acl */

      dac = acl_count + 1;				/* set to make dir acl */
      allocate d_acl in (free_area) set (dap);		/* allocate room for it */

      star_star_sw = "0"b;
      do ii = 1 to dac - 1;				/* convert acl to dir acl */
         d_acl (ii).userid = s_acl (ii).userid;		/* copy user name */
         if d_acl (ii).userid = "*.*.*" then do;
	  star_star_sw = "1"b;
	  d_acl (ii).mode = d_acl (ii).mode | "100"b;	/* need at least s access to *.*.*    */
         end;
         substr (d_acl (ii).mode, 1, 1) = substr (s_acl (ii).mode, 1, 1);
						/* copy mode bits */
         substr (d_acl (ii).mode, 2, 1) = substr (s_acl (ii).mode, 3, 1);
         substr (d_acl (ii).mode, 3, 1) = substr (s_acl (ii).mode, 3, 1);
         d_acl (ii).mbz1 = "0"b;
      end;

      if ^star_star_sw then do;			/* add "s *.*.*" if not already a *.*.* entry */
         d_acl (dac).userid = "*.*.*";
         d_acl (dac).mode = "100"b;
         d_acl (dac).mbz1 = "0"b;
      end;
      else dac = dac - 1;

      call hcs_$add_dir_acl_entries (dirname, unique, dap, dac, code);

      free d_acl in (free_area);
      free s_acl in (free_area);


      call hcs_$set_safety_sw (dirname, unique, safety_sw, code);
      if code ^= 0
      then goto error_return;

      dir_rings (1) = cbi.rings (1);
      dir_rings (2) = cbi.rings (3);
      call hcs_$set_dir_ring_brackets (dirname, unique, dir_rings, code);
      if code ^= 0
      then goto error_return;

      call hcs_$create_branch_ (unique_dir, "0", addr (cbi), code);
						/* create component "0" */
      if code ^= 0
      then
         do;					/* if can't do it 	*/
del_dir:
	  call hcs_$delentry_file (dirname, unique, 0);	/* delete the unique directory */
	  go to error_return;			/* give up */
         end;

      if SSF_existed
      then
         do;
	  call hcs_$get_max_length_seg (remember_ptr, max_length, code);
						/* Get the max length of the SSF. */
	  if code ^= 0
	  then go to del_zero;			/* Cleanup - delete component zero and the directory. */

	  call hcs_$set_max_length (unique_dir, "0", max_length, code);
						/* Set the max length of component zero. */
	  if code ^= 0
	  then go to del_zero;			/* Cleanup */

/* DRV - set component volume backup switch here */

	  call hcs_$fs_move_file (dirname, ename, 0, unique_dir, "0", code);
						/* move the SSF into component zero */
	  if code ^= 0
	  then
	     do;					/* if can't do it 	*/
del_zero:
	        call hcs_$delentry_file (unique_dir, "0", 0);
						/* delete the component zero, don't save code */
	        go to del_dir;			/* and delete the directory, and give up */
	     end;

	  call hcs_$terminate_file (dirname, ename, binary (known, 1), code);
						/* terminate the SSF, saving the segno if
						   it was known */
	  if code ^= 0
	  then go to error_return;

/* If reloading in ring 1, delete_ may not be found. If so try deleting with hcs */
	  on condition (linkage_error)
	     begin;
	        call hcs_$delentry_file (dirname, ename, code);
	        goto revert_it;
	     end;
	  call delete_$path (dirname, ename, "100111"b, "", code);
						/* delete the SSF */
revert_it:
	  revert linkage_error;
	  if code ^= 0
	  then go to error_return;

	  if known
	  then
	     do;					/* if it was known */
	        call hcs_$initiate (unique_dir, "0", "", 1, 0, remember_ptr, code);
						/* initiate new on with old segno */
	        if code ^= 0
	        then go to error_return;
	     end;

	  do i = 1 to branch.nnames;			/* add all the names */
	     call hcs_$chname_file (dirname, unique, "", (status_entry_names (i)), code);
	     if code ^= 0
	     then go to error_return;
	  end;

	  call hcs_$chname_file (dirname, unique, unique, "", code);
						/* delete the unique name */

         end;
      call hcs_$set_bc (dirname, ename, 1, code);		/* remember that we have one already in MSF */

      go to return_statement;

/*  Entry unmake_msf takes MSF path, and makes component zero
   if it exists into an SSF with the same name.  Otherwise,
   it leaves a new, zero length segment, after deleting the MSF.  */

unmake_msf_:
   entry (dirname_arg, ename_arg, copysw, rbs, code);

      cur_ring = cu_$level_get ();

      unspec (cbi) = ""b;
      cbi.version = create_branch_version_2;
      cbi.chase_sw = "1"b;
      cbi.parent_ac_sw = "1"b;			/* for now */
      cbi.rings = cur_ring;
      cbi.userid = get_group_id_$tag_star ();
      cbi.mode = "101"b;

      if sys_areap = null
      then sys_areap = get_system_free_area_ ();
      status_area_ptr = addr (names_area);
      acl_area_ptr = sys_areap;
      unspec (branch) = ""b;
      status_ptr = addr (branch);

      on cleanup call free_allocated_storage;

      call hcs_$get_link_target (dirname_arg, ename_arg, dirname, ename, code);
						/* get real path name */
      if code ^= 0
      then go to error_return;

      path = rtrim (dirname, " ") || ">" || ename;

      call hcs_$initiate_count (path, "0", "", cbi.bitcnt, 0, remember_ptr, code);
						/* see about component zero */

      if code ^= 0
      then if code ^= error_table_$segknown
	 then
	    do;
	       component_0_existed = "0"b;		/* not there */
	       known = "0"b;
	       cbi.bitcnt = 0;			/* zero bitcount */
	    end;
	 else
	    do;
	       component_0_existed = "1"b;		/* did exist */
	       known = "1"b;			/* and was known in the process */
	    end;
      else
         do;
	  component_0_existed = "1"b;			/* existed */
	  known = "0"b;				/* but wasn't known */
         end;

      if component_0_existed				/* component zero exists */
      then
         do;					/* make sure safety_sw is off */
	  call hcs_$get_safety_sw_seg (remember_ptr, safety_sw, code);
	  if code = 0
	  then if safety_sw				/* mustn't delete msf components */
	       then code = error_table_$safety_sw_on;
	  if code ^= 0				/* error has occurred */
	  then go to error_return;			/* abort */

	  call hcs_$get_access_class (path, "0", cbi.access_class, code);
	  if code ^= 0
	  then goto error_return;

	  call hcs_$get_access_class (path, "", temp_acc, code);
	  if code ^= 0
	  then goto error_return;

	  if cbi.access_class ^= temp_acc
	  then cbi.priv_upgrade_sw = "1"b;
	  cbi.parent_ac_sw = ^cbi.priv_upgrade_sw;

/* DRV - get volume backup switch from component 0 here */

         end;

      call hcs_$list_inacl (dirname, ename, acl_area_ptr, aclp, null, acl_count, cur_ring, code);
						/* get initial acl */

      call hcs_$status_long (dirname, ename, 1, addr (branch), status_area_ptr, code);
						/* find out names */
      if code ^= 0
      then go to error_return;

      unique = unique_chars_ (""b);			/* make up a unique name */

      call hcs_$create_branch_ (dirname, unique, addr (cbi), code);
      if code ^= 0
      then go to error_return;

      call hcs_$add_acl_entries (dirname, unique, aclp, acl_count, code);
						/* put initial acl back on again */

      if component_0_existed
      then
         do;					/* if comp. 0 used to exist */
	  call hcs_$get_max_length_seg (remember_ptr, max_length, code);
	  if code ^= 0
	  then go to del_comp;			/* Get max length of comp. 0. */

	  call hcs_$set_max_length (dirname, unique, max_length, code);
	  if code ^= 0
	  then go to del_comp;			/* Transfer max length of comp. 0 to SSF. */


	  if copysw
	  then
	     do;					/* We want to save contents of comp. 0. */
	        call hcs_$fs_move_file (path, "0", 0, dirname, unique, code);
						/* move the old one into the new */
	        if code ^= 0
	        then
		 do;				/* error and recovery */
del_comp:
		    call hcs_$delentry_file (dirname, unique, 0);
		    go to error_return;
		 end;

	     end;

/* DRV - set SSF volume backup switch here */

         end;

      call delete_$path (dirname, ename, "100111"b, "", code);
						/* delete the old MSF */
      if code ^= 0
      then go to error_return;

      do i = 1 to branch.nnames;			/* move in old names */
         call hcs_$chname_file (dirname, unique, "", (status_entry_names (i)), code);
         if code ^= 0
         then go to error_return;
      end;

      call hcs_$chname_file (dirname, unique, unique, "", code);
						/* delete unique name */

      if known
      then
         do;					/* if it was known */
	  call hcs_$initiate (dirname, ename, "", 1, 0, remember_ptr, code);
						/* initiate with old segno */
	  if code ^= 0
	  then go to error_return;
         end;



return_statement:
error_return:
      call free_allocated_storage;

      return;

/*  Internal proc free_allocated_storage looks at all the pointers used by this
						   subroutine to point to free storage, and frees everything that
						   hasn't been freed yet.  */

free_allocated_storage:
   proc;

      if aclp ^= null
      then free s_acl in (free_area);

      if dap ^= null
      then free d_acl in (free_area);

      return;

   end free_allocated_storage;

   end make_msf_;
