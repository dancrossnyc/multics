/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


file_util: procedure;				/* File System Interface Module utility procedures. */

/* Modified 13 August 1972, M J Grady - Honeywell. */
/* Modified July 1973 by E. Stone to work both for 64k and 256k MSFs */
/* Modified 750915 by PG to be able to attach to branches with many names */

dcl  code2 fixed binary (35);				/* Error code (returned). */
dcl  pibp pointer;					/* Pointer to file control block. */
dcl  ap pointer;					/* Temporary pointer. */
dcl  b36 (0: 1) based fixed binary (35);		/* Overlay to access thirtysix-bit elements (words). */
dcl  bit_count fixed binary (24);			/* Bits in segment or segments in directory. */
dcl  bits_per_seg fixed bin (24);
dcl  dname based character (168) aligned;		/* Overlay for directory path name. */
dcl  ename based character (32) aligned;		/* Overlay for entry name. */
dcl  entry character (32) aligned;			/* Temporary for lower level entry name. */
dcl  ep pointer;					/* Pointer to entry structure. */
dcl  error_table_$bad_ms_file external fixed binary (35);
dcl  error_table_$moderr external fixed binary (35);	/* File system error codes. */
dcl  error_table_$noentry external fixed binary (35);
dcl  error_table_$toomanylinks external fixed binary (35);
dcl  error_table_$seg_unknown external fixed bin (35);
dcl  i fixed bin;					/* Index. */
dcl  infinity static fixed binary (35) initial (34359738367); /* 2 .P. 35 - 1 */
dcl  kind fixed binary (2);				/* Entry type. */
dcl  max_length fixed bin (19);			/* max length of component in words */
dcl  msf_sw bit (3) aligned;				/* bit switch for msf_manager_$adjust. */
dcl  n fixed bin;					/* Temporary length. */
dcl  p pointer;					/* Pointer to file control block. */
dcl  path character (168) aligned;			/* Aligned storage for path name. */
dcl  suffix fixed binary;				/* Suffix of desired segment. */
dcl  sys_info$max_seg_size ext fixed bin (19);		/* system maximum segment size in words */
dcl  expand_path_ entry (pointer, fixed binary, pointer, pointer, fixed binary (35));
dcl  hcs_$get_max_length entry (char (*) aligned, char (*) aligned, fixed bin (19), fixed bin (35));
dcl  hcs_$status_long entry (character (*) aligned, character (*) aligned, fixed binary (1), pointer,
     pointer, fixed binary (35));
dcl  hcs_$status_minf entry (character (*) aligned, character (*) aligned, fixed binary (1),
     fixed binary (2), fixed binary (24), fixed binary (35));
dcl  ioa_$rsnnl entry options (variable);		/* Variable argument list. */
dcl  msf_manager_$open entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35)),
     msf_manager_$get_ptr entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35)),
     msf_manager_$adjust entry (ptr, fixed bin, fixed bin (24), bit (3) aligned, fixed bin (35)),
     msf_manager_$close entry (ptr);

dcl (addr, baseno, baseptr, bit, divide, fixed, empty, mod, null, substr) builtin;

dcl 1 branch,					/* Branch structure filled by status_long. */
    2 ((dir, seg) bit (1), nnames bit (16), nrp bit (18)),	/* Type, number of names, pointer to names. */
    2 dtm bit (36),					/* Date-time segment modified. */
    2 dtu bit (36),					/* Date-time used. */
    2 ((t, r, e, w, a) bit (1), pad1 bit (13), records bit (18)), /* Mode, number of records. */
    2 dtd bit (36),					/* Date-time dumped. */
    2 dtem bit (36),				/* Date-time entry modified. */
    2 acct bit (36),				/* Account ID. */
    2 (curlen bit (12), bit_count bit (24)),		/* Current length, bit count. */
    2 ((did, mdid) bit (4), copysw bit (1), pad2 bit (9), rb (3) bit (6)), /* Dev. ID's, copy sw., rings. */
    2 uid bit (36);					/* Unique ID. */

/* Single element from file control block. */
% include file_pib;
dcl 1 seg1 based aligned,				/* Overlay for word of ring memory. */
    2 (no bit (18), used bit (1), key bit (17)) unaligned;
						/*  */
file_util$attach_file:				/* Entry to attach file */
	entry (pibp, code2);
	p = pibp;					/* Copy pointer to file control block. */
	ap = addr (p -> pib.device_name.name_string);	/* Get pointer to input string. */
	n = p -> pib.device_name.name_size;		/* Compute total number of characters. */
	ep = addr (branch);				/* Get pointer to branch structure. */
	call expand_path_ (ap, n, addr (p -> pib.dir_name), addr (p -> pib.entry_name), code2);
	if code2 ^= 0 then				/* Error in path name? */
	     do;					/* Yes. */
	     p -> pib.call = 1;			/* Mark place of failure. */
	     return;				/* Give error return. */
	end;
	call hcs_$status_long (p -> pib.dir_name, p -> pib.entry_name, 1, ep, null, code2);
	if code2 ^= 0 then				/* Some error? */
	     do;					/* Yes. */
	     if code2 = error_table_$noentry then	/* Is the entry missing? */
		if p -> pib.w then			/* Can we create it? */
		     do;				/* Yes. */
		     p -> pib.level = ""b;		/* File is at top level. */
						/* Initialize actual length. */
		     p -> pib.writebit, p -> pib.lastbit = 0;
		     p -> pib.bits_per_segment = sys_info$max_seg_size * 36;
		     go to attach_common;		/* Go do common stuff. */
		end;
	     p -> pib.call = 2;			/* Mark point of failure. */
	     return;				/* Call foul. */
	end;
	if branch.seg then				/* Is the entry a segment? */
	     do;					/* Yes. */
						/* Check for requested mode. */
	     if ^ branch.r & p -> pib.r | ^ branch.w & p -> pib.w then
		do;				/* No. */
		code2 = error_table_$moderr;		/* Report discrepancy. */
		return;
	     end;
	     p -> pib.level = ""b;			/* File is at upper level. */
						/* Set write, last pointers according to bit count. */
	     p -> pib.writebit, p -> pib.lastbit = fixed (branch.bit_count, 35);
	     call hcs_$get_max_length (p -> pib.dir_name, p -> pib.entry_name, max_length, code2);
	     if code2 ^= 0 then do;
		p -> pib.call = 3;
		return;
	     end;
	     p -> pib.bits_per_segment = max_length * 36;
	     go to attach_common;			/* Go set other initial values. */
	end;
	if branch.dir then				/* Is the entry a directory? */
	     do;					/* Yes. */
	     suffix = fixed (branch.bit_count, 24) - 1;	/* Get suffix of last segment. */
	     if suffix < 0 then			/* Was "bit count" zero? */
		do;				/* Yes. */
		suffix = 0;			/* Set number of complete segments to zero. */
		go to attach_length_zero;		/* Continue attach of zero-length file. */
	     end;
	     call create_lower_level_names (null, suffix, addr (path), addr (entry));
						/* Examine statistics. */
	     call hcs_$status_minf (path, entry, 0, kind, bit_count, code2);
	     if code2 ^= 0 then			/* Successful? */
		do;				/* No. */
		if code2 = error_table_$noentry then	/* Is segment missing? */
		     if p -> pib.w then		/* May we create it? */
			do;			/* Yes. */
attach_length_zero:		bit_count = 0;		/* Assume zero bits in this segment. */
			max_length = sys_info$max_seg_size; /* And system maximum for max length */
			go to attach_lower_level;	/* Go compute total bit count. */
		     end;
		p -> pib.call = 4;			/* Mark point of failure. */
		return;				/* Reflect error. */
	     end;
	     if kind ^= 1 then			/* Is this a segment? */
		do;				/* No. */
		code2 = error_table_$bad_ms_file;	/* Set error code. */
		return;				/* Give error return. */
	     end;
	     call hcs_$get_max_length (path, entry, max_length, code2);
	     if code2 ^= 0 then do;
		p -> pib.call = 5;
		return;
	     end;
attach_lower_level: p -> pib.level = "1"b;		/* File is at lower level. */
						/* Set up current size. */
	     p -> pib.bits_per_segment = max_length * 36;
	     p -> pib.writebit, p -> pib.lastbit = p -> pib.bits_per_segment * suffix + bit_count;
	     go to attach_common;			/* Do common initialization. */
	end;
	code2 = error_table_$toomanylinks;
	return;

attach_common:					/* Some of this initialization should be moved to caller. */
	p -> pib.changed = ""b;			/* Mark bit count as as yet unchanged. */
	p -> pib.elsize = 9;			/* Default size is one character. */
	p -> pib.readbit = 0;			/* Begin reading from beginning. */
	p -> pib.highbit = p -> pib.lastbit;
	p -> pib.boundbit = infinity - mod (infinity, 9); /* Default bound is 2 .P. 35 - 1. */
	p -> pib.lastcomp = -1;			/* init lastcomp to null */
	p -> pib.lastseg = null;			/* init ptr null too */
	ap = addr (p -> pib.seg);			/* Get pointer to ring memory. */
	do i = 0 to 9;				/* Initialize each element. */
	     ap -> b36 (i) = 011111111111111111b;	/* Not used, null key. */
	end;
	p -> pib.search_type = 1;			/* Special case of delimiter search. */
	p -> pib.nreads = 1;			/* Default is one read delimiter.. */
	substr (p -> pib.readlist, 1, 9) = "000001010"b;	/* .. a new-line character. */

	call msf_manager_$open (p -> pib.dir_name, p -> pib.entry_name, p -> pib.fcb_ptr,
	     code2);
	if code2 = error_table_$noentry then code2 = 0;

	return;					/* Return to caller. */
						/*  */
file_util$detach_file:				/* Entry to detach file. */
	entry (pibp, code2);			/* Returns IO system formatted codes. */
	p = pibp;					/* Copy pointer to control data. */
	bits_per_seg = p -> pib.bits_per_segment;
	suffix = divide (p -> pib.lastbit, bits_per_seg, 17, 0); /* calc number of last segment. */
	bit_count = mod (p -> pib.lastbit, bits_per_seg); /* bit count for last seg */
	msf_sw = p -> pib.changed || p -> pib.changed || "1"b; /* this switch controls $adjust */

	call msf_manager_$adjust (p -> pib.fcb_ptr, suffix, bit_count, msf_sw, code2);
						/* call to adjust last bit count and terminate all segs */
	if code2 ^= 0 then
	     if code2 ^= error_table_$seg_unknown
	     & code2 ^= error_table_$noentry then return;

	call msf_manager_$close (p -> pib.fcb_ptr);
	p -> pib.fcb_ptr = null;

	code2 = 0;				/* Detach successful. */
	return;					/* Return to caller. */
						/*  */
find_seg_ptr:					/* Entry to get pointer to segment. */
	entry (pibp, bv_can_create, which, seg, code5);	/* Returns raw codes. */

/* parameters */

dcl  bv_can_create bit (1) aligned parameter;		/* ON if missing component can be created */
dcl  which fixed binary;				/* Number of desired segment in file. */
dcl  seg pointer;					/* Pointer to segment (returned). */
dcl  code5 fixed binary (35);				/* Error code (returned). */

	p = pibp;					/* Copy pointer to control block. */
	i = mod (which, 10);			/* Look in the ring memory. */
	ap = addr (p -> pib.seg (i));			/* Get pointer to appropriate word. */
	if ^ap -> seg1.used then goto skip_ck;		/* Is this entry in use? */
	if fixed (ap -> seg1.key, 17) = which then	/* Is this it? */
	     do;					/* Yes. */
	     seg = baseptr (ap -> seg1.no);		/* Make up pointer to segment. */
	     go to have_seg;			/* Give normal return. */
	end;
skip_ck:						/* Call msf_manager_ to get ptr to component */

	call msf_manager_$get_ptr (p -> pib.fcb_ptr, which, (bv_can_create & p -> pib.w), seg, bit_count, code5);
	if seg = null then return;			/* Return with code5 set to reason */

	ap = addr (p -> pib.seg (i));
	ap -> seg1.no = baseno (seg);
	ap -> seg1.key = bit (which, 17);

/* set entry in ring memory */

have_seg:	ap -> seg1.used = "1"b;			/* Indicate recent use of this segment. */
	code5 = 0;				/* No error: clear code. */
	return;					/* Return to caller. */
						/*  */
create_lower_level_names:				/* Procedure to make up names of "multi"-segments. */
	procedure (enp1, suffix, path, entry);
dcl  enp1 pointer,					/* Pointer to entry name to append to directory name. */
     suffix fixed binary,				/* Suffix desired on entry name. */
    (path,					/* Pointer to storage for directory path name. */
     entry) pointer,				/* Pointer to storage for entry name. */
     n fixed bin,					/* Length of resultant string (ignored). */
     enp pointer;					/* Pointer to entry name in control block. */

	     if path ^= null then			/* Is directory path name wanted? */
		do;				/* Yes. */
		enp = enp1;			/* Copy pointer to desired entry name. */
		if enp = null then			/* If none, use entry name in control block. */
		     enp = addr (p -> pib.entry_name);	/* .. */
		if substr (p -> pib.dir_name, 1, 4) = ">   " then /* Is it the root directory? */
		     call ioa_$rsnnl (">^a", path -> dname, n, enp -> ename);
		else
		call ioa_$rsnnl ("^a>^a", path -> dname, n, p -> pib.dir_name, enp -> ename);
	     end;
	     if entry ^= null then			/* Is entry name desired? */
		call ioa_$rsnnl ("^d", entry -> ename, n, suffix);
	end create_lower_level_names;			/* Return to caller. */
     end file_util;
