/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
syserr_log_daemon:
     procedure ();

/* *	SYSERR_LOG_DAEMON
   *
   *	This is the procedure always run by the SyserrLogger.SysDaemon HPROC.
   *	It deals with copying between the wired syserr buffer and the log
   *	segments in the paged LOG partition.  It is called once when the 
   *	syserr daemon is created, and never returns.  It is one of the 
   *	few programs in the system to go blocked in ring zero. It sets up
   *	some automatic variables and then enters a block loop awaiting wakeups
   *	indicating that there may be something in the wired buffer to copy out
   *	into the paged log. It should be run only by the syserr logger HPROC.
   *
   *	Modification history:
   *	73-10-05, Bill Silver: Initial coding
   *	74-06-09, Bill Silver: Added copy entry
   *	74-11-12, Lee Scheffler: Log copying added
   *	75-11-15, Larry Johnson: Moved most of the code in this module to
   *	   a non-wired procedure (syserr_copy_paged)
   *	76-01-10, Larry Johnson: Modified to lock paged syserr log
   *	76-03-22, Steve Webber: Modified to use logger HPROC
   *	79-05-03, Mike Grady: Modified for ring 0 stack sharing-- hproc has
   *	   own stack and pxss$block now has no args.
   *	84-08-24, W. Olin Sibert: Reorganized for new syserr log mechanism:
   *	   use pmut$wire_and_mask instead of options (validate), use
   *	   syserr_log_data for locking, handle conditions and restart, change
   *	   name from syserr_logger to syserr_log_daemon.
   *    1984-11-26, BIM: moved the guts of this to syserr_copy_wired_log,
		which can be called outside the Daemon.
   *    1985-01-25, Keith Loepere, to fix race in async log copying.
   *	85-02-19, Keith Loepere, for making the paged syserr log the 
		highest paged lock.
   */

	declare wire_arg		 bit (72) aligned;
	declare wire_ptr		 pointer;

	declare pmut$wire_and_mask	 entry (bit (72) aligned, pointer);
	declare pmut$unwire_unmask	 entry (bit (72) aligned, pointer);
	declare pxss$block		 entry;
	declare syserr_copy_wired_log	 entry;

	declare addr		 builtin;

/* */

	syserr_log_data_ptr = addr (syserr_log_data$);
	sd_ptr = addr (syserr_data$syserr_area);
	wlog_ptr = addr (syserr_data$wired_log_area);

/* This process remains wired and masked for all its life EXCEPT when it is
   actually putting messages into the paged log (which it has already extracted
   from the wired log).  This is done in order to reduce the possibility that
   it will be unable to operate; essentially, it eliminates all but the pages
   of the paged log itself from consideration as sources of error.  This is
   not entirely true, since the stack is unwired whilst calling. */

LOGGER_LOOP:
	call pmut$wire_and_mask (wire_arg, wire_ptr);

	do while ("1"b);
	     if ^syserr_log_data.test_mode then do;
		     call pxss$block ();		/* wait for something to happen */
		end;
	     call pmut$unwire_unmask (wire_arg, wire_ptr);/* Permit faults to occur and be handled */

	     call syserr_copy_wired_log;

	     call pmut$wire_and_mask (wire_arg, wire_ptr);/* Turn faults off again */

	     if syserr_log_data.test_mode then
		return;
	end;

/* */


/* */


%page; %include syserr_data;
%page; %include syserr_log_dcls;
%page; %include syserr_constants;

     end syserr_log_daemon;
