/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,indcomtxt */
dn355_boot_interrupt:
     proc (a_fnp_no);

/* This procedure is called by dn355 when it receives an interrupt from an FNP
   *  whose "bootloading" flag is on. This program interprets the bootload status
   *  and wakes up the process that initiated the bootload to inform it of the results
   *  of the bootload.
   *
   *  Written 5/19/76 by Robert S. Coren
   *  Modified 79 June 8 by Art Beattie to handle new config_messages.
   *  Modified 08/26/80 by Robert Coren to ignore spurious bootload interrupts.
   *  Modified 07/14/83 BIM to remove the $emergency entrypoint -- all
   *            its work is done elsewhere. Also assumed that all unwiring
   *            will be done by fnp_util$abort when called from
   *            user ring upon notification of boot failure.
   *  Modified 1984-07-27 BIM for system_fault entrypoint.
*/


/* PARAMETER */

dcl  a_fnp_no fixed bin;


/* AUTOMATIC */

dcl  fnp_no fixed bin;
dcl  astep ptr;
dcl  fnp_tag char (1);
dcl  igcode fixed bin (35);
dcl  stat_ptr ptr;
dcl  major fixed bin;
dcl  sub_stat fixed bin;
dcl  event_message fixed bin (71);			/* event message used to report result */
dcl  offset fixed bin;


/* ENTRIES */

dcl  syserr options (variable);
dcl  pxss$ring_0_wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));

/* BASED */

dcl  fb fixed bin (35) based;

dcl  1 fnp_boot_status aligned based (stat_ptr),		/* structure of bootload status */
       2 real_status bit (1) unaligned,			/* must be "1"b in valid status */
       2 pad1 bit (2) unaligned,
       2 major_status bit (3) unaligned,
       2 pad2 bit (3) unaligned,
       2 substatus fixed bin (8) unal,			/* code set by 355, only interesting if major_status is 4 */
       2 channel_no fixed bin (17) unaligned;		/* channel no. of LSLA in case of config error */


/* INTERNAL STATIC CONSTANTS */

dcl  TELL fixed bin int static options (constant) init (0); /* code for syserr -- print on console only */
dcl  BOOTLOAD_OK fixed bin int static options (constant) init (0);
dcl  CHECKSUM_ERROR fixed bin int static options (constant) init (1);
dcl  READ_ERROR fixed bin int static options (constant) init (2);
dcl  GICB_ERROR fixed bin int static options (constant) init (3);
dcl  INIT_ERROR fixed bin int static options (constant) init (4);
dcl  UNWIRE_STATUS fixed bin int static options (constant) init (5);
dcl  MAX_STATUS fixed bin int static options (constant) init (5);

dcl  FNP_UP fixed bin int static options (constant) init (4);
dcl  FNP_DOWN fixed bin int static options (constant) init (2);


/* BUILTINS */

dcl  (addr, bin, hbound, max, ptr, substr) builtin;


/* INCLUDE FILES */

%include dn355_messages;

%include dn355_data;

%include dn355_mailbox;

%include fnp_mpx_msg_;



	fnp_no = a_fnp_no;
	infop = addr (dn355_data$);
	fnpp = addr (datanet_info.per_datanet (fnp_no));
	mbxp = fnp_info.mbx_pt;
	fnp_msg_ptr = addr (event_message);
	fnp_tag = fnp_info.fnp_tag;

	fnp_msg.fnp_no = fnp_no;

	stat_ptr = addr (datanet_mbx.crash_data);	/* this is where bootload status goes */

	if ^fnp_boot_status.real_status		/* bad news, status is not for real */
	then do;
	     call syserr (TELL, "Invalid bootload interrupt for FNP ^a, status ^w", fnp_tag, stat_ptr -> fb);
	     go to down;
	     end;

	major = bin (fnp_boot_status.major_status, 3);	/* get major status */
	/*** BOOTLOAD_OK now comes in for WIRED fnp's, since unwiring is done
	     by user ring in response to bootload completion, or on timeout. */

	if major < 0 | major > MAX_STATUS then do;
	     call syserr (TELL, "Unrecognized bootload status ^w for FNP ^a", stat_ptr -> fb, fnp_tag);
	     go to down;
	     end;

	if major = UNWIRE_STATUS then return;		/* this was just to tell us I/O was finished */

	offset = dn355_messages$boot_messages (major);	/* get message describing major status */
	reasonp = ptr (addr (dn355_messages$boot_messages), offset);
	call syserr (TELL, dn355_reason.msg, fnp_tag);

	if major = INIT_ERROR			/* more info in this case */
	then do;
	     sub_stat = max (0, fnp_boot_status.substatus);
	     if sub_stat > hbound (dn355_messages$config_messages, 1) then sub_stat = 0;

	     offset = dn355_messages$config_messages (sub_stat);
	     reasonp = ptr (addr (dn355_messages$config_messages), offset);
	     call syserr (TELL, dn355_reason.msg, fnp_boot_status.channel_no - 9, stat_ptr -> fb);
	     end;

	if major = BOOTLOAD_OK			/* good news */
	then do;
	     fnp_msg.state = FNP_UP;
	     fnp_info.running = "1"b;
	     end;

	else do;					/*  bad news */
down:
	     call syserr (TELL, "FNP ^a not loaded.", fnp_tag);
	     fnp_msg.state = FNP_DOWN;
	     end;

/* now tell process that started bootload */

	fnp_info.bootloading = "0"b;			/* done now */
	call pxss$ring_0_wakeup (fnp_info.boot_process_id, fnp_info.boot_ev_chan, event_message, igcode);

	return;

system_fault:
     entry (a_fnp_no);
	fnp_no = a_fnp_no;
	infop = addr (dn355_data$);
	fnpp = addr (datanet_info.per_datanet (fnp_no));
	mbxp = fnp_info.mbx_pt;
	fnp_msg_ptr = addr (event_message);
	fnp_tag = fnp_info.fnp_tag;

	fnp_msg.fnp_no = fnp_no;

	stat_ptr = addr (datanet_mbx.crash_data);	/* this is where bootload status goes */
	go to down;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   Invalid bootload interrupt for FNP X, status N

   S:	$info

   T:	When bootloading an FNP

   M:	The FNP responded to the bootload attempt with an interrupt, but the high-order
   bit of the reported status was not on. N is the reported status (in octal).

   A:	$inform


   Message:
   Unrecognized bootload status N for FNP X

   S:	$info

   T:	When bootloading an FNP

   M:	The status reported by an FNP in response to a bootload attempt was not one of the ones
   recognized. N is the reported status (in octal).

   A:	$inform


   Message:
   FNP X loaded successfully

   S:	$info

   T:	When bootloading an FNP

   M:	The FNP bootload has completed successfully.

   A:	This message is for informational purposes only.


   Message:
   checksum error in core image for FNP X

   S:	$info

   T:	When bootloading an FNP

   M:	The core image received for loading in the FNP had a checksum error.

   A:	Try to load the FNP again. If the error recurs, either the DIA hardware
   is failing, or the core image in the Multics hierarchy is damaged. In the
   latter case, the core image must be rebound.


   Message:
   error reading core image for FNP X

   S:	$info

   T:	When bootloading an FNP

   M:	An I/O error was detected by the FNP bootload program while attempting to read
   the core image into FNP memory. A hardware failure of either the DIA or the Multics IOM is indicated.

   A:	Try the FNP load again. If it fails again, consult Field Engineering.


   Message:
   configuration error reported by bootloading program for FNP X

   S:	$info

   T:	When bootloading an FNP

   M:	The FNP bootload program, gicb, found an inconsistency in the FNP configuration.

   A:	$inform


   Message:
   configuration error reported by FNP X: DETAILS

   S:	$info

   T:	When bootloading an FNP

   M:	The FNP initialization program detected an error or inconsistency in
   the FNP configuration.  DETAILS is a more specific description of the error.

   A:	If possible, correct the error, either by updating the CDT to reflect the
   actual configuration, or recabling the FNP. If the error cannot be corrected
   or is not understood, inform the systems programming staff.


   Message:
   FNP X not loaded.

   S:	$info

   T:	When bootloading an FNP

   M:	The attempted bootload was not successful. This message is always preceded by one of the
   above error messages.

   A:	This message is for informational purposes only.

   END MESSAGE DOCUMENTATION */

     end /* dn355_boot_interrupt */;
