/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* format: style3,linecom,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indnoniterend,indcomtxt,^inditerdo,indend,idind30 */
mcs_trace:
     procedure (Devx);

/* Routine for tracing events in ring 0 MCS. */
/* Written by C. Hornig, September 1979. */

dcl	Devx			fixed bin parameter;
dcl	Chainp			pointer parameter;

%include mcs_trace_data;

dcl	formline_			entry (fixed bin, fixed bin, pointer, fixed bin (21), fixed bin);

dcl	initialized		bit aligned internal static init ("0"b);
dcl	mapc			character (512) aligned internal static init ("");

dcl	(my_idx, next_idx)		fixed bin (35) aligned;
dcl	(bsize, i)		fixed bin;

dcl	bwords			(256) bit (36) aligned based (blockp);

dcl	(addr, binary, bit, clock, length, pointer, stacq)
				builtin;

/* * * * * * * * * * * * * * * * * * * */

	call setup;
	call get_entry;
	call formline_ (2, 3, addr (trace_entry.message), length (trace_entry.message), 1);
return_to_caller:
	return;

/* * * * * * * * * * BUFFER_CHAIN * * * * * * * * * */

buffer_chain:
     entry (Devx, Chainp);

	call setup;
	do blockp = Chainp repeat (pointer (ttybp, buffer.next)) while (rel (blockp) ^= ""b);
	     bsize = 16 * (1 + buffer.size_code);
	     call fill_in (" ^d words at ^6.3b; ^d chars; flags: ^[eop,^]^[conv,^]^[break^]", bsize, rel (blockp),
		buffer.tally, buffer.flags.end_of_page, buffer.flags.converted, buffer.flags.break);
	     do i = 1 by 2 to bsize;
		if (bwords (i) | bwords (i + 1)) ^= ""b then
		     call fill_in (" ^2d: ^w ^w ^8a", (i - 1) * 4, bwords (i), bwords (i + 1),
			translate (substr (string (buffer.chars), i * 4 - 7, 8), mapc));
		end;
	     end;
	return;

/* * * * * * * * * * INIT * * * * * * * * * */

setup:
     procedure;
	ttybp = addr (tty_buf$);
	if ^initialized then do;
	     mapc = copy (".", 32) || substr (collate9 (), 33, 95) || copy (".", 385);
	     initialized = "1"b;
	     end;
	if ^tty_buf.trace.enable then goto return_to_caller;
	if tty_buf.trace.data_offset = ""b then goto return_to_caller;
	trace_array_ptr = pointer (ttybp, tty_buf.trace.data_offset);
	if trace_array.num_entries = 0 then goto return_to_caller;
	lctep = addr (tty_buf.lct_ptr -> lct.lcte_array (Devx));
	if lcte.flags.trace = (tty_buf.trace.default_mode & ^lcte.flags.trace_force) then goto return_to_caller;
     end setup;

/* * * * * * * * * * GET_ENTRY * * * * * * * * * */

get_entry:
     procedure;
snarf_trace_entry:
	my_idx = binary (trace_array.idx);		/* idx is where our message will go */
	next_idx = my_idx + 1;
	if next_idx > trace_array.num_entries then next_idx = 1;
						/* where next entry will go */
	if ^stacq (trace_array.idx, unspec (next_idx), unspec (my_idx)) then goto snarf_trace_entry;
						/* now grab the entry */
	trace_entry_ptr = addr (trace_array.entry (my_idx));
	trace_entry.time = clock ();
	trace_entry.devx = Devx;
     end get_entry;

/* * * * * * * * * * FILL_IN * * * * * * * * * */

fill_in:
     procedure options (variable, non_quick);
	call get_entry;
	call formline_ (1, 2, addr (trace_entry.message), length (trace_entry.message), 1);
     end fill_in;

%include tty_buf;
%include lct;
%include tty_buffer_block;

     end;
