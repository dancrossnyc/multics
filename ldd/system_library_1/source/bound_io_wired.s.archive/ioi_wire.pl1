/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */

ioi_wire:
     procedure;

/* IOI buffer wiring and unwiring routines */
/* Finished August 1982 by Chris Jones from what Charlie Hornig left me */
/* Modified 1984-08-09 BIM for dia support */


/****^  HISTORY COMMENTS:
  1) change(86-03-03,Farley), approve(86-07-18,MCR7439),
     audit(86-08-18,Fawcett), install(86-10-20,MR12.0-1189):
     Changed to execute in the BCE environment.
                                                   END HISTORY COMMENTS */


dcl	p_dtep		   ptr parameter;		/* (I) pointer to a device table entry */

dcl	sys_info$service_system
			   bit (1) aligned external static;

dcl	ioi_page_table$fill	   entry (fixed bin, ptr, fixed bin (35));

dcl	pc_abs$wire_abs	   entry (ptr, fixed bin (9), fixed bin (9), fixed bin (35));
dcl	pc_abs$wire_abs_contig entry (ptr, fixed bin (9), fixed bin (9), fixed bin (35));
dcl	pc_abs$unwire_abs	   entry (ptr, fixed bin (9), fixed bin (9));
dcl	code		   fixed bin (35);
dcl	np		   fixed bin (9);

dcl	(divide)		   builtin;

/* This entry is called to wire the caller's IOI workspace.
   it will be wired in memory connected to the
   bootload SCU and a page table will be built to point to it. */
wire:
     entry (p_dtep);

	dtep = p_dtep;
	if dte.workspace_wired then
	     return;

	np = divide (dte.bound + 1023, 1024, 9, 0);	/* number of pages to wire */
	if sys_info$service_system then
	     call pc_abs$wire_abs (dte.workspace_astep, 0, np, code);
	else call pc_abs$wire_abs_contig (dte.workspace_astep, 0, np, code);
	if code ^= 0 then do;
error:						/* syserr here? */
	     return;
	end;

	call ioi_page_table$fill (dte.ptx, dte.workspace_astep, code);
	if code ^= 0 then
	     goto error;

	dte.workspace_wired = "1"b;
	return;

/* This entry is called to unwire the user's workspace.  For performance reasons, the workspace is left wired
   for a while after the I/O completes in it (since another I/O will most likely start soon, and wiring and
   unwiring is expensive).  Thus, this entry is called by the check_timeout routine when it determines that
   the workspace has been idle  long enough. */
unwire:
     entry (p_dtep);

	dtep = p_dtep;
	if ^dte.workspace_wired then
	     return;

	np = divide (dte.bound + 1023, 1024, 9, 0);	/* number of pages to unwire */
	call pc_abs$unwire_abs (dte.workspace_astep, 0, np);
	dte.workspace_wired = "0"b;
	return;

%include ioi_data;

     end ioi_wire;
