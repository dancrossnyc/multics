/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(85-11-27,Fawcett), approve(85-11-27,MCR6979),
     audit(85-12-11,CLJones), install(86-03-21,MR12.0-1033):
     Change support of 127 channels to 63, dipper support
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
io_chnl_util:
     procedure;

/* Convert I/O channel names to old CONFIG card format */
/* Written by C. Hornig, March 1981. */
/* Fixed to work in wired environment, 10 July, 1981, W. Olin Sibert */
/* Canonicalize entry added by Chris Jones, January 1984 */

dcl	Iom		   fixed bin (3) parameter;
dcl	Channel		   fixed bin (7) parameter;
dcl	Name		   char (8) aligned parameter;
dcl	Code		   fixed bin (35) parameter;

dcl	digit		   fixed bin;
dcl	value		   fixed bin;

dcl	MAX_CHANNEL_NUMBER	   fixed bin static options (constant) init (63);

dcl	(character, index, length, ltrim, rtrim, substr, translate)
			   builtin;

io_chnl_util$canonicalize_chanid:
     entry (Name) returns (char (8) aligned);

	return (translate (Name, "ABCD", "abcd"));

io_chnl_util$iom_to_name:
     entry (Iom, Channel, Name, Code);

	Name = "";
	Code = 0;

	if (Iom < 1) | (Iom > 4) | (Channel < 0) | (Channel > MAX_CHANNEL_NUMBER) then do;
	     Code = 1;
	     return;
	end;

	Name = substr ("ABCD", Iom, 1) || ltrim (character (Channel));
	return;


io_chnl_util$name_to_iom:
     entry (Name, Iom, Channel, Code);

	Code, Iom, Channel = 0;

	Iom = index ("ABCD", translate (substr (Name, 1, 1), "ABCD", "abcd"));
	if Iom < 1 then
	     goto bad_name;

	if length (rtrim (Name)) < 2 then
	     goto bad_name;

/* This conversion must be done inline because there is no wired procedure
   for converting from character strings to binary, and this code is wired.
*/

	do digit = 2 to length (rtrim (Name));
	     value = index ("0123456789", substr (Name, digit, 1));
	     if value = 0 then
		goto bad_name;
	     Channel = 10 * Channel + (value - 1);
	end;

	if Channel > MAX_CHANNEL_NUMBER then
	     goto bad_name;

	return;

bad_name:
	Iom, Channel = 0;
	Code = 1;					/* An error */
	return;

     end io_chnl_util;
