/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style3,linecom,ifthenstmt,indthenelse,^indnoniterdo,indnoniterend,initcol3,dclind5,idind32 */

wkp_signal_handler_:
     procedure;

/*****************************************************************************/
/*							       */
/*   This is the default handler for the "wkp_" IPS signal.  Its job is to   */
/*   make one pass through the pending IPC events, and run any event call    */
/*   handlers that have wakeups.				       */
/*							       */
/*****************************************************************************/

/* Written by C. Hornig, January 1979. (to do nothing) */


/****^  HISTORY COMMENTS:
  1) change(86-08-12,Kissel), approve(86-08-12,MCR7479),
     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
     Modified to do its thing to support async event channels.
                                                   END HISTORY COMMENTS */


dcl  quit_signalled		       bit (1) aligned;

dcl  ipc_$run_event_calls	       entry (fixed bin, fixed bin (35));

dcl  quit			       condition;

/*
   If any of the call handlers that are run during this time signal quit, we
   will remember it, and signal it ourself when they are all done.  This is
   because ipc_ currently has a flag which prevents event call handlers from
   being run recursively.  In particular, for DSA this means that we can't have
   two quits in a row because it is the event call handler which signals quit.
   If there are ever event call handlers that want to signal other things, this
   code should be changed to catch those conditions and signal them later as
   well.
*/

	quit_signalled = "0"b;

	on quit quit_signalled = "1"b;

/* Just run the handlers for any asynchronous type of event call channels which have pending wakeups. */

	call ipc_$run_event_calls (ASYNC_CALL_EVENT_CHANNEL_TYPE, (0));

/* Signal quit if anyone wanted us to, but revert first to avoid self-flagellation. */

	revert quit;

	if quit_signalled then signal quit;

	return;

%include ipc_create_arg;

     end wkp_signal_handler_;
