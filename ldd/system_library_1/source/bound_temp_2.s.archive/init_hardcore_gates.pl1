/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* INIT_HARDCORE_GATES - Initialize all gates into the hardcore ring. */

/* This program is called to set up the linkage pointers stored in all hardcore gates.
   The only reason is efficiency, i.e. to make normal execution thru the gate faster.
   The program also sets up the entry bounds (call limiters) within the SDWs for
   the hardcore gates.
   Ring brackets are also put in the hardcore descriptors for
   restart_fault and return_to_ring_0_. */

/****^  HISTORY COMMENTS:
  1) change(77-06-01,Morris), approve(), audit(), install():
      Library maintenance installation.
      Rewritten to determine hardcore gates automatically from
      ring brackets in the SLT.  6/77 by Noel I. Morris
                                                   END HISTORY COMMENTS */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


init_hardcore_gates: proc;

dcl  tsdw fixed bin (71),				/* temporary for SDW */
     segno fixed bin (18),				/* gate segment number */
     segp ptr,					/* pointer to gate segment */
     lp ptr,					/* pointer to gate's linkage */
     dp ptr,					/* pointer to gate's definitions */
     lp_ptr ptr,					/* pointer to linkage pointer within gate */
     tv_ptr ptr;					/* pointer to call limiter within gate */

dcl  based_ptr ptr based,				/* based pointer */
     tv_end bit (14) aligned based;			/* based call limiter value */

dcl 1 segname_acc aligned,
   (2 l fixed bin (8),
    2 s char (31)) unal;

dcl 1 my_lp_acc static aligned options (constant),
   (2 l fixed bin (8) init (6),
    2 s char (6) init (".my_lp")) unal;

dcl 1 tv_end_acc static aligned options (constant),
   (2 l fixed bin (8) init (7),
    2 s char (7) init (".tv_end")) unal;

dcl  lot$ (0: 1023) ptr unaligned ext,
     dseg$ (0: 1) fixed bin (71) ext,
     slt$ ext,
     restart_fault$ ext,
     return_to_ring_0_$ ext;

dcl  pmut$swap_sdw entry (ptr, ptr),
     get_defptr_ entry (ptr, ptr, ptr, ptr, fixed bin (35));

dcl (addr, baseno, baseptr, bin, length, ptr, rtrim, substr, unspec) builtin;



% include sdw;



% include slt;



% include slte;



% include definition;



	sltp = addr (slt$);				/* Get ptr to slt */
	sdwp = addr (tsdw);				/* and pointer to temporary SDW */

	do segno = slt.first_sup_seg to slt.last_sup_seg; /* Iterate through all supervisor segments. */
	     sltep = addr (slt.seg (segno));		/* Get pointer to SLT entry. */
	     if slte.ringbrack (3) ^= "0"b3 &		/* If a hardcore gate ... */
		slte.ringbrack (2) = "0"b3 &
		slte.ringbrack (1) = "0"b3 then do;

		segp = baseptr (segno);		/* Get pointer to base of segment. */
		lp = lot$ (segno);			/* Get pointer to linkage for gate. */
		dp = lp -> based_ptr;		/* Get pointer to definitions. */

		namep = ptr (slt.name_seg_ptr, slte.names_ptr);  /* Get name of segment. */
		unspec (segname_acc) = "0"b;		/* Clear name ACC string. */
		segname_acc.l = length (rtrim (segnam.names (1).name));
		substr (segname_acc.s, 1, length (rtrim (segnam.names (1).name))) = segnam.names (1).name;

		lp_ptr = getadr (addr (my_lp_acc));	/* Get pointer to lp to be filled in. */
		tv_ptr = getadr (addr (tv_end_acc));	/* Get pointer to call limiter. */

		tsdw = dseg$ (segno);		/* Grab the SDW for segment. */
		sdw.write = "1"b;			/* Give write access. */
		call pmut$swap_sdw (segp, sdwp);

		lp_ptr -> based_ptr = lp;		/* Set linkage pointer in segment. */
		sdw.entry_bound_sw = "0"b;		/* Enable call limiter. */
		sdw.entry_bound = tv_ptr -> tv_end;	/* Set call limiter. */

		sdw.write = "0"b;			/* Take away write access. */
		call pmut$swap_sdw (segp, sdwp);	/* Insert new SDW in descriptor segment. */
	     end;
	end;

/* Now set the ringbrackets in the SDWs for
   restart_fault and return_to_ring_0_.		*/

	call set_sdw (addr (restart_fault$));		/* Set ring brackets and put in dseg */
	call set_sdw (addr (return_to_ring_0_$));

	return;



set_sdw:	procedure (segptr);				/* This procedure inserts ring brackets
						   from the SLT into hardcore descriptors */
dcl  segptr ptr;

	segno = bin (baseno (segptr), 18);		/* Get number of segment. */
	sltep = addr (slt.seg (segno));		/* access SLT entry */
	tsdw = dseg$ (segno);			/* grab the SDW */

	sdwp -> sdw.r1 = slte.ringbrack (1);		/* copy ring brackets */
	sdwp -> sdw.r2 = slte.ringbrack (2);
	sdwp -> sdw.r3 = slte.ringbrack (3);

	call pmut$swap_sdw (segptr, sdwp);		/* actually place SDW */

     end set_sdw;



getadr: proc (accp) returns (ptr);			/* procedure to search for definition symbol */

dcl  accp ptr;

dcl  defsp ptr,
     code fixed bin (35);

	call get_defptr_ (dp, addr (segname_acc), accp, defsp, code);

	return (ptr (segp, defsp -> definition.value));

     end getadr;


     end;
