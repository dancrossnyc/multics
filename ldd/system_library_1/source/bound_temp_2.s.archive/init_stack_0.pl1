/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


init_stack_0:
     proc;

/* Program to build stack 0 segs to be shared by users */
/* Created May 79 by Mike Grady */
/* Modified June 81 by J. Bongiovanni to call update_vtoce for each stack,
     retry by deleting on error */
/* Modified December 1981 by J. Bongiovanni to clear usage count in ASTE */
/* Modified November 1984 by Keith Loepere to rename terminate to terminate_ */

dcl  append$branchx entry (char (*), char (*), fixed bin (5), (*) fixed bin, char (*), fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  chname$cfile entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  delentry$dfile entry (char (*), char (*), fixed bin (35));
dcl  initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  truncate$trseg entry (ptr, fixed bin, fixed bin (35));
dcl  asd_$replace_sall entry (char (*), char (*), ptr, fixed bin, bit (1), fixed bin (35));
dcl  terminate_$noname entry (ptr, fixed bin (35));
dcl  grab_aste$prewithdraw entry (ptr, fixed bin, fixed bin (35)) returns (ptr);
dcl  get_ptrs_$given_astep entry (ptr) returns (bit (72) aligned);
dcl  syserr$error_code entry options (variable);
dcl  syserr entry options (variable);
dcl  unique_chars_ entry (bit(*)) returns(char(15));
dcl  update_vtoce entry (ptr);

dcl  error_table_$namedup fixed bin (35) ext;
dcl  dseg$ fixed bin ext;
dcl  active_all_rings_data$stack_base_segno fixed bin ext;
dcl  pds$apt_ptr ptr aligned ext;
dcl  pds$stack_0_sdwp ptr ext;
dcl  pds$stack_0_ptr ptr ext;

dcl  indx fixed bin;
dcl  count fixed bin;
dcl  stk_no fixed bin;
dcl  stk_segp ptr;
dcl  dirname char (20) int static options (constant) init (">system_library_1");
dcl  stack_name char (32);
dcl  pic picture "999";
dcl  new_stkp ptr;
dcl  code fixed bin (35);
dcl 1 tsdw like sdw;
dcl  seg_rb (3) fixed bin init (0, 0, 0) static options (constant);
dcl  retry bit (1);

dcl 1 acl (1) aligned,
    2 name char (32),
    2 mode bit (36),
    2 zp bit (36) init ("0"b),
    2 code fixed bin (35);

dcl 1 stack aligned based (sb),
    2 header like stack_header,
    2 frame_start fixed bin;

dcl  (addr, baseno, baseptr, fixed, null, ptr, rel, size, string) builtin;

/*  */

	new_stkp = baseptr (active_all_rings_data$stack_base_segno);
	sdtp = addr (stack_0_data$);

	count = sdt.num_stacks;
	indx = 1;					/* setup count and index for stack creation */
	stk_no = 1;
	stk_segp = null ();

	do while (count ^= 0);			/* build stack segs */
	     sdtep = addr (sdt.stacks (indx));		/* ptr to this entry */
	     retry = "1"b;				/* retry by deleting on error			*/

	     pic = stk_no;
	     stack_name = "stack_0." || pic;

retry_stack:
	     call append$branchx (dirname, stack_name, 01010b, seg_rb, "*.*.*", 0, 0, 0, code);
	     if code ^= 0 then do;
		if code = error_table_$namedup then;
		else call error ("append", code);
	     end;

	     acl.name = "Initializer.SysDaemon.*";
	     acl.mode = "101"b;
	     call asd_$replace_sall (dirname, stack_name, addr (acl), 1, "1"b, code);
	     if code ^= 0 then
		call error ("asd_", code);

	     call initiate (dirname, stack_name, "", 0, 0, stk_segp, code);
	     if code ^= 0 then
		call error ("initiate", code);

	     call truncate$trseg (stk_segp, 0, code);
	     if code ^= 0 then
		call error ("truncate", code);

	     astep = grab_aste$prewithdraw (stk_segp, 16*1024, code); /* get the correct aste */
	     if code ^= 0 then
		call error ("grab_aste", code);

	     seg_aste.usage = 0;			/* counts only meaningful since bootload, anyway */

	     call update_vtoce (astep);

	     string (tsdw) = get_ptrs_$given_astep (astep); /* get a real SDW for the stack seg */
	     tsdw.cache = "1"b;			/* stacks go in the cache */

	     sdte.sdw = string (tsdw);		/* fill in the sdte */
	     sdte.astep = rel (astep);
	     sdte.nextp = sdt.freep;			/* thread this guy into list */
	     sdt.freep = rel (sdtep);			/* and point free to this */

	     stk_segp -> stack_header_overlay = pds$stack_0_ptr -> stack_header_overlay;
	     sb = stk_segp;				/* for header re_build */
	     stack_header.stack_begin_ptr,
		stack_header.stack_end_ptr = ptr (new_stkp, rel (addr (stack.frame_start)));

	     call terminate_$noname (stk_segp, code);	/* we don't need this anymore */
	     stk_segp = null ();
	     call asd_$replace_sall (dirname, stack_name, addr (acl), 0, "1"b, code); /* delete ACL */

	     count = count - 1;
	     indx = indx + 1;

try_again:     stk_no = stk_no + 1;
	end;


	sdtep = ptr (sdtp, sdt.freep);		/* take first stack for Initializer */
	sdt.freep = sdte.nextp;			/* re-thread free list */
	sdte.nextp = "0"b;				/* claim this one */
	sdte.aptep = rel (pds$apt_ptr);		/* Initializers APTE */
	pds$apt_ptr -> apte.flags.shared_stack_0 = "1"b;	/* Has a shared ring-0 stack */

	sdwp = addr (dseg$);
	pds$stack_0_sdwp = addr (sdwa (fixed (baseno (new_stkp))));
	pds$stack_0_ptr = new_stkp;

	sdwp = pds$stack_0_sdwp;
	string (sdw) = sdte.sdw;			/* fill in correct SDW for Initializer's stack 0 */
	return;



error:	proc (who, code);

dcl  who char (*);
dcl  code fixed bin (35);

dcl  ecode fixed bin (35);
dcl  temp_stack_name char (32);

	if retry then do;
	     retry = "0"b;
	     call syserr (0, "init_stack_0: Error creating >sl1>^a from ^a. Retrying.",
		stack_name, who);
	     call syserr$error_code (0, code, "init_stack_0: ");
	     if stk_segp ^= null () then do;
		call terminate_$noname (stk_segp, ecode);
		stk_segp = null ();
	     end;
	     temp_stack_name = "stack_0." || unique_chars_ (""b);
	     call chname$cfile (dirname, stack_name, stack_name, temp_stack_name, ecode);
	     if ecode ^= 0 then call error ("chname", ecode);
	     call delentry$dfile (dirname, temp_stack_name, ecode);
	     if ecode ^= 0 then call error ("delentry", ecode);
	     goto retry_stack;
	end;
	else do;
	     call syserr (3, "init_stack_0: Error creating >sl1>^a from ^a. Stack skipped.", stack_name, who);
	     call syserr$error_code (0, code, "init_stack_0: ");
	     go to try_again;
	end;

	end;



%include apte;
%include aste;
%include stack_0_data;
%include sdw;
%include stack_header;

%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   init_stack_0: Error creating >sl1>XXXXXX from YYYYY. Retrying.

   S: $info

   T: $init

   M: An error was encountered in creating the stack_0 segment XXXXXX.  The 
   error was returned by module YYYYYY, and is described in detail in the
   following message.  init_stack_0 will attempt to correct the problem
   by renaming the segment XXXXXX to stack_0.<unique name>, deleting it,
   and retrying the creation of segment XXXXXX once.

   A: No action is required if the above actions correct the problem.
   If the message persists, it may be symptomatic of hardware or
   software problems, and it should be brought to the attention of
   the System Programming Staff.

   Message:
   init_stack_0: Error creating >sl1>XXXXXX from YYYYYY. Stack skipped.

   S: $info

   T: $init

   M: An error was encountered in creating the stack_0 segment XXXXXX.
   The error was returned by module YYYYYY, and is described in detail in the
   following message.  This error could not be corrected by renaming 
   the segment XXXXXX to stack_0.<unique name>, deleting it, and retrying
   the creation of segment XXXXXX once.  The stack_0 represented by
   segment XXXXXX is skipped, and there will be one fewer stack_0 than
   specified by the max_max_eligible tuning parameter for each message of
   this sort.

   A: This message may be symptomatic of hardware or software problems.
   It should be brought to the attention of the System Programming Staff.

   END MESSAGE DOCUMENTATION */

     end;
