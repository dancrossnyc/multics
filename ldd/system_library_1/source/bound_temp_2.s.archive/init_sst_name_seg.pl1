/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


init_sst_name_seg: procedure;

/* This procedure is called by initialization to set up the names of the hardcore
   segments in the SST name table, if selected via the DEBG card.

   The SLT is scanned, and the names of all segments who are IN FACT (not necessarily in the SLT)
   paged are placed in the SST name table.  This must be done before the
   first seg_fault to tell BOS of the validity of this segment.

   Last Modified and Reason:

   Coded by Bernard Greenberg, 10/10/74
   Modified 03/21/81, W. Olin Sibert, for ADP PTWs and get_ptrs_$given_sdw
   Modified 9/83, Keith Loepere for paged, wired segs.
   Modified 8/84, Keith Loepere to rename sstnt.multics_or_bos.
   */

	dcl     slt$		 external static;
	dcl     sst_seg$		 external static;
	dcl     dseg$		 (0:1023) fixed bin (71) external static;
	dcl     sst$ast_track	 bit (1) aligned external static;
	dcl     sst$pts		 (0:3) fixed bin external static;
	dcl     unpaged_page_tables$	 external static;
	dcl     get_ptrs_$given_sdw	 entry (pointer) returns (pointer);
	dcl     sdw_util_$dissect	 entry (pointer, pointer);

	dcl     (pts, ptsi, segnum, segnam_size) fixed bin;

	dcl     1 sdwi		 aligned like sdw_info aligned automatic;

	dcl     (addr, bin, divide, ptr, rel, reverse, segno, substr, verify) builtin;


	if ^sst$ast_track then return;		/* No work called for */
	sstnp = addr (sst_names_$);			/* get ptr to SLT's name table seg */
	sltp = addr (slt$);				/* and the current 'name table */
	names_ptr = sltp -> slt.name_seg_ptr;		/* Get SLT name seg ptr. */

	sstnp -> sstnt.valid = "1"b;			/* Signify to BOS not to fill in */
	sstnp -> sstnt.multics_or_bce = "mult";
	upt_ptr = addr (unpaged_page_tables$);

	do segnum = sltp -> slt.first_sup_seg to sltp -> slt.last_sup_seg,
	     sltp -> slt.first_init_seg to sltp -> slt.last_init_seg;

	     sltep = addr (sltp -> slt.seg (segnum));	/* get ptr to SLTE of segment */
	     namep = ptr (names_ptr, sltep -> slte.names_ptr); /* get ptr to seg name block */
	     call sdw_util_$dissect (addr (dseg$ (segnum)), addr (sdwi));
	     if ^sdwi.faulted & sdwi.paged & (upt.sst_absloc <= sdwi.address & sdwi.address <= upt.sst_last_loc) then do; /* process segs with page tables in sst */
		     astep = get_ptrs_$given_sdw (addr (dseg$ (segnum))); /* Get the AST entry ptr */
		     ptsi = bin (astep -> aste.ptsi, 3);/* get pt size index from ASTE */
		     pts = sst$pts (ptsi);		/* and real Page Table size. */
		     segnam_size = 32 - verify (reverse (namep -> segnam.name (1)), " ") + 1;
		     sstnp -> sstnt.names (divide (bin (rel (astep), 18) - sstnp -> sstnt.ast_offsets (ptsi),
			sstnp -> sstnt.ast_sizes (ptsi), 17, 0) + sstnp -> sstnt.ast_name_offsets (ptsi))
			= substr (namep -> segnam.name (1), 1, segnam_size);
						/* Copy primary name into SST name table */
		end;
	end;

%page; %include sstnt;
%page; %include aste;
%page; %include slt;
%page; %include slte;
%page; %include sdw_info;
%page; %include unpaged_page_tables;
     end;
