/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-06-14,Berno), approve(88-07-13,MCR7928),
     audit(88-06-14,Parisek), install(88-07-19,MR12.2-1061):
     Add support for the uncp multiplexer to implement the DSA gateway
     interface.
  2) change(89-03-20,Parisek), approve(89-06-01,MCR8110),
     audit(89-10-09,Farley), install(89-10-25,MR12.3-1100):
     Add support of protocol mpx.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
fnp_init:
     procedure;					/* FNP initialization for hardcore */

/* extracted from fnp_init on 5/11/76 by Robert S. Coren */
/* Modified 9/12/78 by J. Stern to initialize tty_buf, tty_area, and tty_tables */
/* Modified January 1980 by C. Hornig for MCM tracing */
/* Modified April 1981 by Chris Jones for io_manager conversion */
/* Modified February 1982 by C. Hornig for MR10 io_manager */
/* Modified November 1982 by Robert Coren to explicitly clear dn355_mailbox */
/* Modified 83-12-14 BIM to leave iom_manager assignment for FNP bootload time. */
/* Modified 84-07-09 MMP (and BIM) to insert model in prph fnp card. */
/* Modified 1984-07-30 BIM for paged mode IOM. */
/* Modified 1984-10-18 BIM to abs_wire tty_buf. *BLUSH!* */
/* Modified November 1984 by Robert Coren to initialize tty_area_lock.event. */
/*                         UNCP MPX                                         */ 
/* Report modifications for the Datanet 7100, August 85 */

/**** NOTE: two undocumented parameters are checked here:

      dfnp turns on dn355_data.debug_stop,
      tfnp turns on dn533_data.trace.

      See the code of fnp_util and fnp_multiplexer to see what they do. */


dcl  astep pointer;
dcl  i fixed bin;
dcl  j fixed bin;
dcl  bufsize fixed bin;
dcl  cptr ptr;
dcl  prot_ptr ptr;
dcl  p ptr;
dcl  tsdw fixed bin (71);
dcl  tty_area_size fixed bin (18);
dcl  code fixed bin (35);
dcl  cl fixed bin;
dcl  ptp pointer;
dcl  modelx fixed bin (17);
dcl  uncp_fnp_configured bit (1);

dcl  syserr entry options (variable);
dcl  syserr$error_code entry options (variable);
dcl  config_$find_2 entry (character (4) aligned, character (4) aligned, pointer);
dcl  config_$find_parm entry (char (*), ptr);
dcl  make_sdw$unthreaded entry (fixed bin (18), fixed bin (71), ptr, ptr);
dcl  pc_abs$wire_abs entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  pmut$swap_sdw entry (ptr, ptr);
dcl  get_fnp_name_ entry (fixed bin) returns (char (32));
dcl  tty_space_man$get_perm_space entry (fixed bin, ptr);

dcl  slt$ external;
dcl  sys_info$page_size fixed bin external;

dcl  (addr, addrel, bin, currentsize, divide, empty, hbound, lbound,
     mod, null, pointer, ptr, rel, segno, size, string, substr, unspec) builtin;

dcl  1 prot_parm aligned based (prot_ptr),
       2 name char (4),
       2 size fixed bin;

dcl  1 tty_parm aligned based (cptr),
       2 name char (4),
       2 size fixed bin;

dcl  dn355_mailbox$ fixed bin ext;

dcl  1 dn355mbx_array (max_no_355s) based (addr (dn355_mailbox$)) aligned,
       2 actual_mbx (192) fixed bin (35);		/* allow 300(8) per mbx */

dcl  tty_area area (tty_area_size) based (addr (tty_area$));
dcl  tty_area$ external;

declare  FNP_CONFIG_EVENT char (4) aligned init ("fnpc");

/* CONSTANTS */

dcl  DEFAULT_BUFSIZE fixed bin int static options (constant) init (5120);
dcl  MAX_PROT_CHNLS fixed bin int static options (constant) init (128);
dcl  MIN_BUFSIZE fixed bin int static options (constant) init (256);
dcl  TTY_PERM_SPACE fixed bin int static options (constant) init (2048);
dcl  UNCP_CQ_SIZE fixed bin int static options (constant) init (2000);
dcl  EXPECTED_FIELDS fixed bin int static options (constant) init (5);
dcl  PAGE fixed bin int static options (constant) init (1024);
dcl  WORD15 fixed bin int static options (constant) init (15);
dcl  BIT36 fixed bin int static options (constant) init (36);
dcl  TRACE_INDEX bit (36) int static options (constant) init ("000000000001"b3);
     


	ttybp = addr (tty_buf$);			/* get ptrs to tty_buf and dn355_data */
	infop = addr (dn355_data$);

/* allocate and setup tty_buf now. */

	call config_$find_parm ("ttyb", cptr);		/* get ptr to ttyb parameter */
	if cptr = null
	then bufsize = DEFAULT_BUFSIZE;		/* default size of tty_buf is 5K */
	else bufsize = tty_parm.size;			/* unless TTYB nnnn was given */
	sltp = addr (slt$);
	sltep = addr (slt.seg (segno (ttybp)));

	cl = divide (bufsize + sys_info$page_size - 1, sys_info$page_size, 18, 0);

	slte_uns.bit_count = cl * BIT36 * PAGE;
	slte_uns.max_length, slte_uns.cur_length = cl;
	slte_uns.wired = "0"b;			/* make_sdw will not wire the right way */

	call make_sdw$unthreaded (segno (ttybp), tsdw, astep, ptp);
	call pc_abs$wire_abs (astep, 0, cl, code);
	if code ^= 0 then call syserr$error_code (CRASH, code, "fnp_init: Unable to abs_wire tty_buf.");

	call pmut$swap_sdw (ttybp, addr (tsdw));	/* swap in the sdw setup by get_main */
	begin;
declare  tty_buf_pages (slte_uns.cur_length, 1024) bit (36) aligned based (ttybp);
	     tty_buf_pages = ""b;
	end;

	tty_buf.absorig = sys_info$page_size * FIRST_TTY_BUF_PAGEX;
						/* origin in IO segment */
	tty_buf.lct_ptr = null;

	p = addr (tty_buf.free_space);		/* get ptr to start of free space */

/**** tty_buf is not at location 0 of the I/O segment */

	i = bin (rel (p), 18);			/* mod pointer to next 16 words */

	string (tty_buf.trace) = ""b;
	call config_$find_parm ("ttyt", cptr);		/* need a trace table be allocated */
	if cptr ^= null () then do;
	     i = i + mod (i, 2);			/* must be at even word */
	     trace_array_ptr = pointer (ttybp, i);
	     trace_array.num_entries = tty_parm.size;
	     trace_array.idx = TRACE_INDEX;
	     tty_buf.trace.data_offset = rel (trace_array_ptr);
	     i = bin (rel (addrel (trace_array_ptr, currentsize (trace_array))));
	     end;

	i = i + WORD15;
	i = i - mod (i, WORD15+1);
	p = ptr (p, i);
	tty_buf.borig, tty_buf.free = rel (p);		/* free list of blocks starts here */

	tty_buf.bleft = bufsize - bin (tty_buf.borig);
	if tty_buf.bleft < MIN_BUFSIZE
	then call syserr (CRASH, "fnp_init: Less than 256 words of free space in tty_buf:  ^d", tty_buf.bleft);
	free_blockp = p;
	free_block.next = "0"b;			/* one block */
	free_block.size = tty_buf.bleft;

	tty_buf.tty_area_lock.event = TTY_AREA_LOCK_EVENT;

/* initialize tty_area */

	tty_area_size = get_seg_size (addr (tty_area$));
	tty_area = empty ();

/* initialize tty_tables segment */

	ttytp = addr (tty_tables$);
	tty_tables_hdr.event = tty_ev;		/* init wait event for tty_tables lock */
	tty_tables_hdr.table_area_size = get_seg_size (ttytp) - currentsize (tty_tables_hdr);
	tty_tables_hdr.table_area = empty ();		/* init table area */

/* search for protocol "prot" parameter in the config deck then do
   allocation/initialization of protocol_data if one is found */ 

	call config_$find_parm ("prot", prot_ptr);	/* get ptr to PROT parameter */
	if prot_ptr = null				/* site not running "protocol_mpx" software */
	     then datanet_info.protocol_datap = null;
	else do;
               if prot_parm.size > MAX_PROT_CHNLS then
	          call syserr (CRASH, "fnp_init: The number of configured protocol channels of ^d^/^-exceeds the maximum allowed of ^d.",
                         prot_parm.size, MAX_PROT_CHNLS);
               else protocol_channels = prot_parm.size;
	     call tty_space_man$get_perm_space (size (protocol_data), protocol_data_ptr);
	     protocol_data.max_channels = protocol_channels;
	     datanet_info.protocol_datap = protocol_data_ptr;
          end;


/* read FNP cards and do init */

	tty_buf.fnp_config_flags (*) = "0"b;		/* start with no fnps configured */
	datanet_info.configuration_lock.pid = ""b;
	datanet_info.configuration_lock.event = unspec (FNP_CONFIG_EVENT);
	datanet_info.configuration_lock.flags = "0"b;
	uncp_fnp_configured = "0"b;
	do i = 1 to max_no_355s;			/* set up la indices */
	     fnpp = addr (datanet_info.per_datanet (i));
	     fnp_info.mbx_pt = null;			/* start null */
	     fnp_info.lcte_ptr = null;
	     do j = lbound(fnp_info.lsla_idx, 1) to hbound(fnp_info.lsla_idx, 1);
						/* initialize HSLA/LSLA indices */
		if j <= hbound(fnp_info.hsla_idx, 1) then
		     fnp_info.hsla_idx (j) = -1;
		fnp_info.lsla_idx (j) = -1;
	     end;

	     mbxp = addr (dn355mbx_array (i));		/* get addr of this mbx */
	     unspec (datanet_mbx) = ""b;		/* make sure whole mailbox starts out 0 */

	     prph_fnp_cardp = null ();
	     call config_$find_2 ("prph", "fnp" || substr (get_fnp_name_ (i), 1, 1), prph_fnp_cardp);
	     if prph_fnp_cardp ^= null () then do;
		if prph_fnp_card.n_fields ^= EXPECTED_FIELDS | (prph_fnp_card.field_type (5) ^= CONFIG_STRING_TYPE)
		     | (prph_fnp_card.state ^= "on" & prph_fnp_card.state ^= "off")
		then call syserr (CRASH, "fnp_init: Invalid state on prph ^a card.", prph_fnp_card.name);

		do modelx = 1 to hbound (fnp_models, 1) while (prph_fnp_card.model ^= fnp_models (modelx));
		end;
		if modelx > hbound (fnp_models, 1) | ^supported_fnp (modelx)
		     then call syserr (CRASH, "fnp_init: Invalid model # (^d) on prph ^a card.",
		     prph_fnp_card.model, prph_fnp_card.name);
		if modelx = DN7100 then uncp_fnp_configured = "1"b;

		fnpp = addr (datanet_info.per_datanet (i));
		tty_buf.fnp_config_flags (i) = "1"b;	/* its in the config deck */
		fnp_info.available = prph_fnp_card.state = "on";
		fnp_info.mbx_pt = mbxp;		/* place ptr to mbx in per dn slot */
		fnp_info.fnp_number = i;
		fnp_info.fnp_tag = substr (get_fnp_name_ (i), 1, 1);
		fnp_info.ptx = -1;			/* not yet known */
		fnp_info.ptp = null ();		/* don't allocate until/unless loaded */
		datanet_info.no_of_355s = datanet_info.no_of_355s + 1;

		call io_chnl_util$iom_to_name (prph_fnp_card.iom, (prph_fnp_card.chan), fnp_info.io_chanid, code);
		if code ^= 0 then call syserr (CRASH, "fnp_init: code ^o from io_chnl_util$iom_to_name.", code);
						/* something wrong here... */

		end;
	end;
	if datanet_info.no_of_355s = 0 then call syserr (ANNOUNCE, "fnp_init: Warning: no FNP's configured.");

 /* Add for the Datanet 7100. */

	if uncp_fnp_configured then do;
	     call tty_space_man$get_perm_space (TTY_PERM_SPACE, datanet_info.uncp_bufp);

	     uncpbp = datanet_info.uncp_bufp;
	     uncp_buf.cq_max_size = UNCP_CQ_SIZE;
	     uncp_buf.cq_free = uncp_buf.cq_max_size;	/* Start of the free space */
	     uncp_buf.cq_hbound = uncp_buf.cq_max_size - 1;
						/* The circular queue is a table (0:cq_max_size - 1) */
	end;
	else datanet_info.uncp_bufp = null ();

	cptr = null ();
	call config_$find_parm ("tfnp", cptr);
	datanet_info.trace = (cptr ^= null ());
	cptr = null ();
	call config_$find_parm ("dfnp", cptr);
	datanet_info.debug_stop = (cptr ^= null ());

	return;
%page;
get_seg_size:
     proc (segp) returns (fixed bin (18));		/* gets segment sizes from the slt */

dcl  segp ptr;					/* ptr to seg whose size is wanted */
dcl  seg_no fixed bin (18);


	seg_no = segno (segp);
	sltp = addr (slt$);
	sltep = addr (slt.seg (seg_no));

	return (slte_uns.max_length * sys_info$page_size);

     end get_seg_size;
%page;
%include tty_buf;
%include uncp_buf;
%include mcs_trace_data;
%include tty_buffer_block;
%include tty_tables;
%include config_deck;
%include config_prph_fnp_card;
%include dn355_data;
%include slt;
%include slte;
%include syserr_constants;
%include dn355_mailbox;
%include io_chnl_util_dcls;
%include fnp_types;
%include protocol_data;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   fnp_init: Less than 256 words of free space in tty_buf:  N

   S:  $crash

   T:  $init

   M:  Only N words of free space remain in tty_buf after
   allocating the header and circular queue.  A minimum of
   256 words is required and ordinarily more free
   space is desirable.  Either the size of tty_buf, as specified
   by the PARM TTYB config card, must be increased or the
   circular queue size, as specified by the PARM TTYQ config
   card, must be decreased.

   A:  Correct the config deck and reboot the system.


   Message:
   fnp_init: no fnp cards in config deck

   S:  $info

   T:  $init

   M:  There are no fnp cards in the config deck and therefore,
   no FNP will be initialized.  Usually this indicates an error,
   although it is possible to run Multics without an FNP.

   A:  If an FNP is wanted, reboot the system with an appropriate
   config deck.


   Message:
   fnp_init: FNP number N > max allowed number (MAX) of FNPs

   S:  $crash

   T:  $init

   M:  An fnp card from the config deck specifies an FNP tag
   other than A, B, C, D, E, F, G, or H.

   A:  Replace the bad fnp card and reboot.


   Message:
   fnp_init: inconsistent fnp cards.

   S:  $crash

   T:  $init

   M:  Two or more fnp cards from the config deck specify the same
   FNP tag.

   A:  Replace or remove the bad fnp card(s) and reboot.


   Message:
   fnp_init: Unable to abs_wire tty_buf. ERROR_CODE_MESSAGE

   S:  $crash

   T:  $init

   M:  The call to allocate memory in the bootload memory controller
   for tty_buf failed.

   A:  $contact


   Message:
   fnp_init: Invalid state on prph fnpX card.

   S:  $crash

   T:  $init

   M:  The only valid states are "on" or "off".

   A:  $contact


   Message:
   fnp_init: Invalid model # (MODELN) on prph fnpX card.

   S:  $crash

   T:  $init

   M:  The current fnp model number MODELN, is not a supported number.

   A:  $contact


   Message:
   fnp_init: The number of configured protocol channels of N
   exceeds the maximum allowed of N.

   S:  $crash

   T:  $init

   M:  The prot parm from the config deck specifies too many protocol channels.

   A:  $contact

   END MESSAGE DOCUMENTATION */


     end fnp_init;
