/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
create_root_dir:
     procedure (Dp);

dcl  Dp ptr parameter;

/* Written by C. Hornig, February 1982. */

dcl  active_hardcore_data$alloc_sizes (2) fixed bin external;
dcl  active_hardcore_data$nalloc_sizes fixed bin external;
dcl  active_hardcore_data$cold_boot_switch bit (1) aligned external;
dcl  active_hardcore_data$dir_arearp fixed bin (18) external;
dcl  pvt$root_lvid bit (36) aligned external;
dcl  pvt$root_pvid bit (36) aligned external;
dcl  sys_info$default_dir_max_length fixed bin external;

dcl  allocate_dir_ht_ entry (ptr, fixed bin, fixed bin (35));
dcl  fs_alloc$init entry (pointer, fixed bin, pointer, fixed bin);
dcl  lock$dir_lock_write entry (pointer, fixed bin (35));
dcl  lock$dir_unlock entry (pointer);
dcl  syserr$error_code entry options (variable);

dcl  code fixed bin (35);
%page;
	dp = Dp;
	dir.uid = "777777777777"b3;
	call lock$dir_lock_write (dp, code);		/* Lock the root. */
	if code ^= 0 then call syserr$error_code (1, code, "create_root_dir: lock error on ^p.", dp);

	active_hardcore_data$cold_boot_switch = "1"b;	/* set flag indicating cold boot */
	dir.pvid = pvt$root_pvid;			/* get info left by init_pvt */
	dir.sons_lvid = pvt$root_lvid;
	dir.master_dir = "1"b;

/* The below calculations set the relative pointers in the directory structure. They are based
   on the assumption that directories have a max length of ROOT_MAX_SIZE and that
   the relative pointers in the directory have been set in active_hardcore_data.
*/
	dir.arearp = bit (active_hardcore_data$dir_arearp, 18);
	call fs_alloc$init (pointer (dp, dir.arearp),
	     (sys_info$default_dir_max_length - active_hardcore_data$dir_arearp),
	     addr (active_hardcore_data$alloc_sizes), active_hardcore_data$nalloc_sizes);
	call allocate_dir_ht_ (dp, 0, code);
	if code ^= 0 then call syserr$error_code (1, code, "create_root_dir: allocating hash table");
	call lock$dir_unlock (dp);			/* Unlock the root */
	return;
%page;
%include dir_header;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   create_root_dir: lock error on PPP

   S:	$crash

   T:	$init

   M:	The supervisor was unable to lock the root.
   $err

   A:	$recover
   $boot_tape


   Message:
   create_root_dir: allocating hash table ERROR_MESSAGE

   S:	$crash

   T:	Cold boot of Multics hierarchy.

   M:	$err
   An error has occurred allocating the hash table for the root directory.

   A:	Reboot with a different version of the system.


   END MESSAGE DOCUMENTATION */

     end create_root_dir;
