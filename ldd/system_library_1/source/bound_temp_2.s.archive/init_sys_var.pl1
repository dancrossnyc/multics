/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */
init_sys_var:
     procedure;

/* Updated for NSS 4/75 THVV */
/* Modified by E. Stone 10/73 to correct bug in construction of initializer's channel */
/* OPTY support removed April 1981 by Benson I. Margulies */
/* Modified for ADP SDWs, 05/01/81, W. Olin Sibert */
/* Modified by J. Bongiovanni, December 1981, to remove sst$asthtp setup */
/* Modified by J. Bongiovanni, February 1982, to eliminate FSDCT */
/* Modified by J. Bongiovanni, October 1982, for sst$checksum_filemap */
/* Modified BIM 830312 to move dir_lock initialization to its own program. */
/* Modified by Keith Loepere, January 1985 for sst$seg_state_chg_operation. */

/* This program used to parse a channel name like tty_NNN off of
   the now undocumented config card OPTY. Channel names do not look
   like that any more. FNP's are not loaded from BOS. 
   Therefore this has been decommissioned. If it is restored
   it should use config and not find to look at the deck. */

	dcl     dbrp		 pointer;
	dcl     stack_base		 fixed bin (14) unsigned;
	dcl     chn_name		 char (12);
	dcl     parm_ptr		 ptr;

	dcl     sst$seg_state_chg_operation
				 bit (36) aligned external static;
	dcl     sst$pvhtp		 pointer unaligned external static;
	dcl     sst$rqover		 fixed bin (35) external static;
	dcl     sst$checksum_filemap	 fixed bin external static;

	dcl     sys_info$system_type	 fixed bin external static;
	dcl     sys_info$time_of_bootload
				 fixed bin (71) ext;
	dcl     pvt$time_of_bootload	 fixed bin (71) ext;
	dcl     pds$apt_ptr		 ptr ext;
	dcl     active_all_rings_data$hcscnt
				 fixed bin ext;
	dcl     tc_data$max_hproc_segno
				 fixed bin ext;
	dcl     active_all_rings_data$stack_base_segno
				 fixed bin (18) ext;
	dcl     dseg$		 (0:1024) fixed bin (71) ext;
	dcl     access_operations_$excessive_seg_state_chg
				 bit (36) aligned external;
	dcl     error_table_$rqover	 fixed bin (35) external;
	dcl     slt$		 fixed bin ext;


	dcl     (addr, bin, mod, bit, divide, segno, size)
				 builtin;

	dcl     get_pvtx$ret_pvhtp	 entry returns (ptr);
	dcl     config_$find_parm	 entry (char (4) aligned, ptr);
	dcl     syserr		 entry options (variable);
%include syserr_constants;


	sltp = addr (slt$);
	stack_base = slt.last_sup_seg;		/* calculate hard core seg count */
	stack_base = 8 + stack_base - mod (stack_base, 8);/* Make it 0 mod 8 (for stack segno's). */
	active_all_rings_data$stack_base_segno, active_all_rings_data$hcscnt = stack_base;

	if tc_data$max_hproc_segno < stack_base
	then /* make sure hproc dsegs will be large enough */
	     call syserr (CRASH, "init_sys_var: max_hproc_segno < hcscnt of ^o.", stack_base);

	dbrp = addr (dseg$ (segno (addr (dseg$))));
	if sys_info$system_type = ADP_SYSTEM
	then do;					/* Set the stack base in the DSBR. */
		dbrp -> adp_dbr.stack_base_segno = divide (stack_base, 8, 14, 0);
		addr (pds$apt_ptr -> apte.dbr) -> adp_dbr.stack_base_segno = dbrp -> adp_dbr.stack_base_segno;
	     end;

	else do;
		dbrp -> l68_dbr.stack_base_segno = divide (stack_base, 8, 14, 0);
		addr (pds$apt_ptr -> apte.dbr) -> l68_dbr.stack_base_segno = dbrp -> l68_dbr.stack_base_segno;
	     end;					/* Set the stack base in the DSBR. */

	sys_info$time_of_bootload = pvt$time_of_bootload; /* get bootload time */

	sst$pvhtp = get_pvtx$ret_pvhtp ();

	sst$rqover = error_table_$rqover;		/* set up RQO error code */
	sst$seg_state_chg_operation = access_operations_$excessive_seg_state_chg;

	call config_$find_parm ("nock", parm_ptr);
	if parm_ptr = null ()
	then sst$checksum_filemap = 1;

	return;

/* format: off */
%page; %include apte;
%page; %include slt;
%page; %include "dbr.l68";
%page; %include "dbr.adp";
%page; %include system_types;



/* BEGIN MESSAGE DOCUMENTATION

Message:
init_sys_var: max_hproc_segno < hcscnt of XXX

S:	$crash

T:	$init

M:	The upper bound of the descriptor segment for hardcore processes is too small.
$err

A:	$recover
$boot_tape


END MESSAGE DOCUMENTATION */

     end init_sys_var;
