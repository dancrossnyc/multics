/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(89-02-02,Huen), approve(89-02-02,MCR8057), audit(89-05-24,RWaters),
     install(89-05-31,MR12.3-1051):
     Fix Bug 203 in qedx
     editor - Set up the wakeup table on the user_input switch when entering
     append mode.
                                                   END HISTORY COMMENTS */

/* format: off */

/* Utility functions for Multics qedx Editor: handles input streams and manages buffers. */

/* Initial coding by R. C. Daley,  August 1970 */
/* Latest change to use the search builtin and for large segments by M. A. Meer, August 1975 */
/* Modified 9/9/81 by E. N. Kittlitz to remove b.default_len, clean up */
/* Modifications to make qx efficient and change buffer operation by T. Oke, June 1980 */
/* Modification to twbuf size to utilize the 512 character buffer length which is available. T. Oke 81-05-19 */
/* Changes merged and edited 03/03/82 S. Herbst */
/* Changed $list_buffers to list only modified buffers for quit query 04/16/82 S. Herbst */
/* Fixed $read_ptr to use whole temp seg and not flush for long_record 04/29/82 S. Herbst */
/* Modified: January 1983 by G. Palter as part of making qedx reentrant (includes using get/release_temp_segment_) */
/* Modified April 1983 by K. Loepere to make run in Bootload Multics */
/* Modified August 1983 by K. Loepere for new bce switches */
/* Modified March 1985 by Keith Loepere to run in bce and Multics. */
/* Modified Feb 1989 by S. Huen to set up the wakeup table on the user_input switch instead of the user_i/o switch when entering append mode. */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */

edx_util_:
     procedure;

dcl  atp ptr;					/* pointer to caller's input buffer */
dcl  code fixed bin (35);
dcl  i fixed bin (21);
dcl  indx fixed bin (17);				/* index for special character after conceal */
dcl  j fixed bin (21);
dcl  k fixed bin (21);
dcl  ka fixed bin (21);
dcl  ki fixed bin (21);
dcl  kik fixed bin (21);
dcl  kx fixed bin (21);				/* check for special characters */
dcl  nelem fixed bin (21);				/* maximum number of characters to read */
dcl  nelemt fixed bin (21);				/* number of characters actually read (output) */
dcl  p ptr;					/* temporary storage */
dcl  te fixed bin (21);
dcl  ti fixed bin (21);
dcl  tline char (512);				/* NOTE: This variable can be no shorter than qedx's iline */
dcl  tp ptr;

dcl  1 edx_data aligned based (qid.edx_util_data_ptr),
       2 cbname character (16),			/* current buffer name */
       2 curp pointer,				/* -> current input control block */
       2 level fixed binary,				/* buffer recursion counter */
       2 top pointer,				/* -> top of buffer stack (null for level 0) */
       2 swt aligned like swt_info;			/* set_wakeup_table data */

dcl  NL char (1) static options (constant) init ("
");

dcl  special_char_string char (5) static options (constant) aligned init ("
\");						/* the string is \012 || \ || \c || \b || \r */

dcl  a_string char (sys_info$max_seg_size * 4) based aligned;
dcl  wstring (sys_info$max_seg_size * 4) char (1) based;	/* for use with iox_$put_chars */

dcl  error_table_$long_record fixed bin (35) ext;
dcl  sys_info$max_seg_size fixed bin (18) external;
dcl  sys_info$service_system bit (1) aligned external;
dcl  bce_data$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)) external variable;
dcl  bce_data$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35)) external variable;
dcl  iox_$user_output external ptr;
dcl  iox_$user_input external ptr;

dcl  bce_check_abort entry;
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  (
     ioa_,
     ioa_$ioa_switch,
     com_err_
     ) entry options (variable),
     iox_$control entry (ptr, char (*), ptr, fixed bin (35)),
     iox_$modes entry (ptr, char (*), char (*), fixed bin (35)),
     get_temp_segment_ entry (char (*), ptr, fixed bin (35)),
     release_temp_segment_ entry (char (*), ptr, fixed bin (35));

dcl  (addr, divide, index, length, min, null, search, substr, string, unspec) builtin;
dcl  (program_interrupt, sub_request_abort_) condition;
%page;
/* Initialize data required by an invocation of edx_util_: also initializes input stream, buffer 0, teletype buffer, and
   gets the temporary segment used for buffer 0 */

edx_init:
     entry (P_qid_ptr, atwp, aifp, abp, acode);		/* entry to initialize input stream and buffers */

dcl  P_qid_ptr pointer,				/* -> qedx per-invocation data */
     atwp ptr,					/* pointer to typewriter buffer (char(512)) */
     aifp ptr,					/* pointer to buffer input file (output) */
     abp ptr,					/* pointer to control block for buffer "0" (output) */
     acode fixed bin (35);				/* error status code (output) */

	qid_ptr = P_qid_ptr;

	allocate edx_data in (editor_area) set (qid.edx_util_data_ptr);

	call get_temp_segment_ (qid.editor_name, aifp, acode);
	if acode ^= 0 then do;			/* could not create buffer 0 buffer */
	     call com_err_ (acode, qid.editor_name, "Obtaining temporary space for buffer 0.");
	     return;
	end;

	top = null ();				/* indicate buffer recursion stack is empty */
	level = 0;				/* and set buffer level to 0 */
	cbname = "0";				/* set initial buffer name */

	b0.name = "0";				/* give it a name */
	b0.tw_sw = "0"b;
	b0.next = null ();				/* buffer "0" is first and only buffer on chain */
	b0.dp = aifp;				/* initialize buffer "0" to input buffer file */
	b0.lb = 0;				/* indicate that no data exists */
	if sys_info$service_system then
	     b0.de = 4 * 1024 * 4;			/* indicate buffer empty */
	else b0.de = 4 * sys_info$max_seg_size;		/* in bce, no need to grow buffers */
	b0.ft = b0.de + 1;
	b0.default_path = "";			/* .. */
	b0.li = 1;				/* no current line either */
	b0.le = 0;
	b0.callers_idx = 0;
	string (b0.flags) = ""b;

	curp = addr (tw);				/* set console typewriter as current input buffer */
	tw.name = "typewriter";
	tw.next = null ();
	tw.dp = atwp;				/* initialize pointer to tw buffer */
	tw.default_path = "";			/* no default path */
	tw.lb = 0;
	tw.ft = 513;				/* no top section */
	tw.de = 512;				/* maximum tw buffer size */
	tw.li = 0;				/* not used for tw */
	tw.le = 0;				/* not used for tw */
	tw.ti = 1;				/* force read by indicating buffer exhaust condition */
	tw.te = 0;				/* .. */
	tw.tw_sw = "1"b;				/* typewriter buffer switch (ON) */
	tw.callers_idx = 0;
	string (tw.flags) = ""b;

	if sys_info$service_system then do;
	     unspec (swt) = ""b;			/* setup for cheap input later */
	     swt.version = swt_info_version_1;
	     swt.new_table.wake_map (24),		/* eb, octal 030 */
		swt.new_table.wake_map (25),		/* ec, octal 031 */
		swt.new_table.wake_map (28),		/* ef, octal 034 */
		swt.new_table.wake_map (30),		/* er, octal 036 */
		swt.new_table.wake_map (92) = "1"b;	/* backslash, octal 134 */
	     call iox_$control (iox_$user_input, "set_wakeup_table", addr (swt), code);
	end;

	abp = addr (b0);				/* return pointer to buffer "0" control block */
	acode = 0;				/* indicate successful initialization */

	return;
%page;
/* Prime the terminal input buffer from the supplied string: setup length and pointer */

prime:
     entry (P_qid_ptr, pptr, plen);

dcl  pptr ptr,					/* pointer to string to place in tw input buffer */
     plen fixed bin (21);				/* length of string to place in tw input buffer */

	qid_ptr = P_qid_ptr;

	substr (tw.dp -> a_string, 1, plen) = substr (pptr -> a_string, 1, plen);
						/* initialize tw input buffer */
	tw.ti = 1;				/* .. */
	tw.te = plen;				/* .. */
	tw.lb = plen;				/* fill in first section */
	tw.ft = tw.de + 1;				/* empty top */
	return;
%page;
/* Cleanup all data managed by edx_util_ */

edx_cleanup:
     entry (P_qid_ptr);

	qid_ptr = P_qid_ptr;
	if qid.edx_util_data_ptr = null () then return;	/* nothing there */

	do while (level ^= 0);			/* unwind buffer recursion stack */
	     p = top;				/* get pointer to top of stack */
	     top = p -> sv.prev;			/* find previous level */
	     curp = p -> sv.bp;			/* find previous buffer control block */
	     free p -> sv in (editor_area);		/* release top level of stack */
	     level = level - 1;			/* decrement recursion level count */
	end;

	bp = addr (b0);				/* start with buffer 0 */
	do while (bp ^= null ());			/* delete auxiliary buffers and free control blocks */
	     p = b.next;				/* pointer to next control block (if any) */
	     call release_temp_segment_ (qid.editor_name, b.dp, (0));
	     if bp ^= addr (b0) then free bp -> b in (editor_area);
	     bp = p;				/* repeat for next buffer in chain (if any) */
	end;

	if sys_info$service_system then do;
	     swt.new_table = swt.old_table;		/* put back old table */
	     call iox_$control (iox_$user_input, "set_wakeup_table", addr (swt), code);
	end;

	free qid.edx_util_data_ptr -> edx_data in (editor_area);
	qid.edx_util_data_ptr = null ();

	return;
%page;
/* Read_ptr is a moderately complex routine which will read data either
   from the terminal, or from the supplied buffer.

   Read_ptr will also pop a buffer level with resetread if it empties the
   buffer.

   Gap modifications are done to have the buffer divided into a lower and
   upper half.  Initially the lower half is processed, and when this is
   exhausted, the upper half is tried.  */


read_ptr:
     entry (P_qid_ptr, atp, nelem, nelemt);

	qid_ptr = P_qid_ptr;

	tp = atp;					/* get pointer to caller's input buffer */
	te = nelem;				/* also, get maximum characters to be read */
	if ^ sys_info$service_system then
	     on condition (sub_request_abort_) begin;
		call resetread (qid_ptr);
		go to restart;
	     end;
restart:
	bp = curp;				/* get pointer to current buffer control block */
	b.modified = b.modified & (b.default_path ^= ""); /* reading makes buffer unmodified if it has no pathname */
	ti = 1;					/* start input into top of buffer */
retry:
	if ^ sys_info$service_system then call bce_check_abort; /* stop infinite loop */
	if b.ti > b.te then do;			/* check if buffer being read is exhausted */
	     if b.ti > b.lb & b.ti <= b.ft then do;	/* move to top half */
		b.te = b.de;
		b.ti = b.ft;
		if b.ft <= b.de then goto retry;	/* continue processing top half */
	     end;

	     if b.tw_sw then do;			/* was input from console typewriter (level 0) */
		if sys_info$service_system then
		     call iox_$get_line (iox_$user_input, b.dp, sys_info$max_seg_size * 4, b.te, code);
		else call bce_data$get_line (addr (bce_data$get_line), b.dp, 256, b.te, code);
						/* if so, refresh line from typewriter */
		if code ^= 0 then
		     if code ^= error_table_$long_record then do;
			call com_err_ (code, qid.editor_name, "edx_util_$read_ptr");
			if sys_info$service_system then
			     call iox_$control (iox_$user_input, "resetread", null (), (0));
			b.ti = 1;			/* re-start buffer */
			b.te = 0;			/* setup to read again */
			go to retry;
		     end;

		if b.te > b.de then b.de = 1024 * (divide (b.te, 1024, 21, 0) + 2);
		b.ft = b.de + 1;			/* make top section empty */
		b.lb = b.te;			/* all text in bottom section */
		b.ti = 1;				/* reset current read index */
		go to retry;			/* and try again to read data to caller */
	     end;
	     else do;				/* here on end of buffer */
		call end_buffer (qid_ptr, (0));	/* pop buffer recursion level by one */
		bp = curp;			/* re-establish previous buffer control block */
		go to retry;			/* resume reading from previous buffer */
	     end;
	end;
	k = search (substr (b.dp -> a_string, b.ti, (b.te - b.ti + 1)), special_char_string);
	if k = 0 then do;
	     ki = (b.te - b.ti + 1);
copy_string:
	     substr (tp -> a_string, ti, ki) = substr (b.dp -> a_string, b.ti, ki);
	     ti = ti + ki;				/* update input index */
	     b.ti = b.ti + ki;			/* update output index */
	     if ki < k then
		go to end_read;			/* end of input buffer */
	     else go to retry;			/* get more */
	end;

	if ti + k - 1 > te then do;
	     ki = te - ti + 1;
	     go to copy_string;
	end;

	kx = index (special_char_string, substr (b.dp -> a_string, b.ti + k - 1, 1));
						/* found which one */
	go to rd_case (kx);

rd_case (1):					/* found an new line */
	substr (tp -> a_string, ti, k) = substr (b.dp -> a_string, b.ti, k);
						/* copy thru new line */
	ti = ti + k - 1;				/* update input index */
	b.ti = b.ti + k;				/* update output index */
	nelemt = ti;
	return;

rd_case (2):					/* found an escape character "\" */
	if b.ti + k <= b.te then do;
	     ka = 1;				/* possible two character symbol */
	     kik = index ("cbrCBR", substr (b.dp -> a_string, b.ti + k, 1));
						/* if so, what is second character */
	     if kik = 0 then do;
		ki = k;
		go to copy_string;
	     end;
	     go to rd_action (kik);			/* go take appropriate action */
	end;
	else go to past_end_of_input;

rd_case (3):					/* single character conceal */
	ka = 0;
rd_action (1):
rd_action (4):
rd_conceal:
	if b.ti + k + ka > b.te then do;		/* beyond end of input */
past_end_of_input:
	     k = 0;
	     ki = b.te - b.ti + 1;			/* ignore action */
	     go to copy_string;
	end;

	indx = index (special_char_string, substr (b.dp -> a_string, b.ti + k + ka, 1));

	if indx = 2 then do;			/* found \ */
						/* is this a two character special */
	     if index ("bcfrBCFR", substr (b.dp -> a_string, b.ti + k + ka + 1, 1)) ^= 0 then
		ki = k + ka + 1;			/* set for two character special */
	     else ki = k + ka;			/* not a special */
	     go to copy_string;
	end;

	else if indx = 3 then do;			/* single character conceal */
	     ki = k + ka + 1;			/* keep it */
	     go to copy_string;
	end;

	else if indx ^= 0				/* some other special ? */
	     then
	     go to add_special;			/* single character special */

	else do;					/* no special */
	     ki = k + ka;				/* set copy length */
	     go to copy_string;
	end;


add_special:
	substr (tp -> a_string, ti, k) =
	     substr (b.dp -> a_string, b.ti, k - 1) || substr (b.dp -> a_string, b.ti + k + ka, 1);
						/* copy thru special character */
	b.ti = b.ti + k + ka + 1;			/* update input index */
	ti = ti + k;				/* update output index */
	go to retry;				/* try for more */


rd_case (4):					/* insert contents of buffer */
	ka = 0;
rd_action (2):
rd_action (5):
rd_exp_buff:
	substr (tp -> a_string, ti, k - 1) = substr (b.dp -> a_string, b.ti, k - 1);
						/* copy up to buffer expansion */
	ti = ti + k - 1;				/* update output index */
	b.ti = b.ti + k + ka;			/* update input index */
rd_buff:
	call find_buffer (b.dp, b.ti, b.te, p, "0"b);	/* try to find named buffer */
	if p = null () then do;			/* error if named buffer does not already exist */
rd_err:
	     call resetread (qid_ptr);		/* reset back to typewriter level (level 0) */
	     go to restart;				/* and restart this call from scratch */
	end;
	if level > 500 then go to rd_err;		/* check buffer recursion level */
	level = level + 1;				/* bump recursion level */
	curp = p;					/* make new buffer control block the current block */
	allocate sv in (editor_area) set (p);		/* save current level of buffer recursion */
	p -> sv.prev = top;				/* save current ptr to top of stack */
	p -> sv.bp = bp;				/* save ptr to current buffer control block */
	p -> sv.ti = b.ti;				/* save current position in current buffer */
	p -> sv.te = b.te;				/* .. */
	top = p;					/* push buffer recursion stack */
	bp = curp;				/* set ptr to new current buffer control block */
	b.ti = 1;					/* initialize buffer read index */
	b.te = b.lb;				/* set index of last character in lower half of buffer */
	b.modified = b.modified & (b.default_path ^= ""); /* reading makes buffer unmodified if it has no pathname */
	go to retry;				/* resume reading after processing */


rd_case (5):					/* read from console one line */
	ka = 0;
rd_action (3):
rd_action (6):
rd_read:
	substr (tp -> a_string, ti, k - 1) = substr (b.dp -> a_string, b.ti, k - 1);
						/* copy up to special symbol */
	b.ti = b.ti + k + ka;			/* update input index */
	ti = ti + k - 1;				/* update output index */

	if sys_info$service_system then
	     call iox_$modes (iox_$user_input, "^wake_tbl", "", (0));
						/* exit cheap input */
read_one_line:					/* NOTE modification here limits amount able to be read to remainder possible in
						   buffer. */
	if sys_info$service_system then
	     call iox_$get_line (iox_$user_input, addr (tline), min (length (tline), te - ti + 1), j, code);
	else call bce_data$get_line (addr (bce_data$get_line), addr (tline), min (length (tline), te - ti + 1), j, code);
	if code ^= 0				/* error reading from typewriter */
	then do;
	     call com_err_ (code, qid.editor_name, "edx_util_$read_ptr read one line - PLEASE RE-ENTER LINE");
	     if sys_info$service_system then
		call iox_$control (iox_$user_input, "resetread", null (), (0));
	     go to read_one_line;
	end;

	substr (tp -> a_string, ti, j) = tline;		/* move as much as will fit to caller's buffer */
	te = ti + j - 1;				/* number of characters moved */
	go to end_read;				/* and terminate the read call */

end_read:
	nelemt = te;				/* here if caller's buffer full, return characters read */
	return;					/* and return */
%page;
/* Pops the buffer recursion level by one and returns the new (old) buffer */

end_buffer:
     entry (P_qid_ptr, ecode);

dcl  ecode fixed bin;				/* error code, 1= already at level 0, 0= ok */

	qid_ptr = P_qid_ptr;

	if level = 0 then do;			/* check recursion level */
	     ecode = 1;				/* error if level already 0 */
	     return;				/* return error condition to caller */
	end;
	level = level - 1;				/* decrement recursion level */
	p = top;					/* pop buffer stack one level */
	top = p -> sv.prev;				/* .. restore previous level */
	curp, bp = p -> sv.bp;			/* .. restore previous buffer control block */
	b.ti = p -> sv.ti;				/* .. restore current line index within buffer */
	b.te = p -> sv.te;				/* .. */
	free p -> sv in (editor_area);		/* release current stack level */
	ecode = 0;				/* indicate that all is ok */
	return;					/* and return to caller */
%page;
/* Flush read-ahead: output unexecuted portion of current buffer (if any), revert input back to the terminal, and
   perform a resetread on the terminal itself */

resetread:
     entry (P_qid_ptr);

	qid_ptr = P_qid_ptr;

	if level ^= 0 then do;			/* if buffer recursion level > 0 */
	     bp = curp;				/* get pointer to current buffer control block */
	     call ioa_ ("Error in buffer (^a) at level ^d.", b.name, level);
	     if sys_info$service_system then 
		on condition (program_interrupt) go to prskip;
	     else on condition (sub_request_abort_) go to prskip;
						/* set up program interrupt handler */

	     if b.ti > b.lb & b.ti < b.ft then b.ti = b.ft;
						/* move across gap */
	     if b.de > b.ft then
		b.te = b.de;
	     else b.te = b.lb;
	     if b.te <= b.lb | b.ti >= b.ft then do;	/* portion addressed is purely in bottom or top */
		i = b.te - b.ti + 1;
		if i > 0 then do;
		     call ioa_ ("Unexecuted lines in buffer:");
		     if sys_info$service_system then
			call iox_$put_chars (iox_$user_output, addr (b.dp -> wstring (b.ti)), i, code);
		     else call bce_data$put_chars (addr (bce_data$put_chars), addr (b.dp -> wstring (b.ti)), i, code);
		end;				/* print specified portion of buffer on user's console */
	     end;
	     else if b.ti <= b.lb then do;		/* top in top, bottom in bottom */
		i = b.te - b.ft + 1 + b.lb - b.ti;
		if i > 0 then do;
		     call ioa_ ("Unexecuted lines in buffer:");
		     if sys_info$service_system then do;
			call iox_$put_chars (iox_$user_output, addr (b.dp -> wstring (b.ti)), b.lb - b.ti + 1, code);
			call iox_$put_chars (iox_$user_output, addr (b.dp -> wstring (b.ft)), b.te - b.ft + 1, code);
		     end;
		     else do;
			call bce_data$put_chars (addr (bce_data$put_chars), addr (b.dp -> wstring (b.ti)), b.lb - b.ti + 1, code);
			call bce_data$put_chars (addr (bce_data$put_chars), addr (b.dp -> wstring (b.ft)), b.te - b.ft + 1, code);		
		     end;				/* print specified portion of buffer on user's console */
		end;				/* print specified portion of buffer on user's console */
	     end;
prskip:
	     if sys_info$service_system then
		revert condition (program_interrupt);
	     else revert condition (sub_request_abort_);
	     do while (level ^= 0);			/* release buffer recursion stack */
		p = top;				/* get pointer to top of stack */
		top = p -> sv.prev;			/* find previous level */
		curp = p -> sv.bp;			/* find previous buffer control block */
		free p -> sv in (editor_area);	/* release top level of stack */
		level = level - 1;			/* decrement recursion level */
	     end;
	     call ioa_ ("^/Current buffer is (^a) at level 0. ^/", cbname);
	end;

	bp = curp;				/* get pointer to level 0 control block */
	b.ti = 1;					/* reset current line index */
	b.te = 0;					/* .. to give buffer exhaust and re-read from typwriter */

	if sys_info$service_system then
	     call iox_$control (iox_$user_input, "resetread", null (), code);
						/* reset "user_input" I/O stream */
	return;
%page;
/* Get a buffer from existing buffers or create one */

get_buffer:
     entry (P_qid_ptr, gtp, gti, gte, gtname, gtbp);

dcl  gtp ptr,					/* pointer to string containing buffer name */
     gti fixed bin (21),				/* index of first character of buffer name */
     gte fixed bin (21),				/* index of last character in string */
     gtname char (16),				/* buffer name (returned) */
     gtbp ptr;					/* pointer to buffer control block (returned) */

	qid_ptr = P_qid_ptr;

	call find_buffer (gtp, gti, gte, bp, "1"b);	/* find (or create) buffer control block */
	if bp = null () then do;			/* reflect errors to caller if any */
	     gtbp = null ();			/* .. */
	     return;				/* and return */
	end;
	gtbp = bp;				/* otherwise, return pointer to buffer control block */
	gtname = b.name;				/* return buffer name */
	cbname = b.name;				/* save it here also */

	return;
%page;
/* Locate the specified buffer creating it if necessary */

locate_buffer:
     entry (P_qid_ptr, gtname, gtbp);

	qid_ptr = P_qid_ptr;

	call locate_buffer (gtname, bp, "1"b);		/* find (or create) buffer control block */
	if bp = null () then do;			/* reflect errors to caller if any */
	     gtbp = null ();			/* .. */
	     return;				/* and return */
	end;
	gtbp = bp;				/* otherwise, return pointer to buffer control block */
	cbname = b.name;				/* save it here also */

	return;
%page;
dcl  P_current_buffer character (16) parameter;
dcl  (P_iocb_ptr, P_bp) pointer parameter;
dcl  list_only_modified bit (1) aligned;


/* List status of all buffers */

list_buffers:
     entry (P_qid_ptr, P_current_buffer, P_iocb_ptr);

	list_only_modified = "0"b;
	go to BEGIN_LIST_BUFFERS;


/* List status of only those buffers which have been modified since the last write */

list_modified_buffers:
     entry (P_qid_ptr, P_current_buffer, P_iocb_ptr);

	list_only_modified = "1"b;
	go to BEGIN_LIST_BUFFERS;

BEGIN_LIST_BUFFERS:
	qid_ptr = P_qid_ptr;

	bp = addr (b0);				/* get pointer to first buffer control block */
	do while (bp ^= null ());			/* list status of all buffers */
	     call list_one_buffer ();
	     bp = b.next;				/* get pointer to next control block (if any) */
	end;
	return;					/* return to caller */
%page;
/* List status of  a single buffer */

list_single_buffer:
     entry (P_qid_ptr, P_current_buffer, P_iocb_ptr, P_bp);

	qid_ptr = P_qid_ptr;
	list_only_modified = "0"b;
	bp = P_bp;

	call list_one_buffer ();			/* does all the work */

	return;

/* Internal procedure which lists a single buffer (called by several different entrypoints) */

list_one_buffer:
     procedure ();

dcl  (n_lines, start, nl_idx) fixed binary (21);

	n_lines = 0;

	if (b.de < b.ft) & (b.lb < 1) then		/* don't need to count lines in an empty buffer */
	     go to DISPLAY_BUFFER_STATUS;

	start = 1;				/* count lines in the buffer */
	do while (start <= b.de);
	     if (start > b.lb) & (start < b.ft) then	/* switch to upper half of buffer */
		start = b.ft;
	     if start >= b.ft then			/* search for next newline */
		nl_idx = index (substr (b.dp -> a_string, start, (b.de - start)), NL);
	     else nl_idx = index (substr (b.dp -> a_string, start, (b.lb - start)), NL);
	     if nl_idx ^= 0 then			/* found a newline: move past it */
		start = start + nl_idx;
	     else if start >= b.ft then		/* no more newlines in upper half: terminate the loop */
		start = b.de + 1;
	     else start = b.ft;			/* no more newlines in lower half: move to upper */
	     n_lines = n_lines + 1;			/* count the line */
	end;

DISPLAY_BUFFER_STATUS:
	if b.modified | ^list_only_modified then
	     call ioa_$ioa_switch (P_iocb_ptr, "^6d ^[->^;^2x^] ^[mod^;^3x^] (^a) ^[[untrusted] ^]^a", n_lines,
		(b.name = P_current_buffer), (b.modified & ^list_only_modified), b.name, b.default_untrusted,
		b.default_path);

	return;

     end list_one_buffer;
%page;
/* Check for modified buffers */

modified_buffers:
     entry (P_qid_ptr) returns (bit (1));

	qid_ptr = P_qid_ptr;

	bp = addr (b0);				/* start with the standard buffer */

	do while (bp ^= null ());

	     if (b.de < b.ft) & (b.lb < 1) then		/* ignore empty buffers */
		go to IGNORE_THIS_BUFFER;

	     if b.modified then do;			/* a candidate... */
		if b.callers_idx ^= 0 then
		     if qid.qedx_info_ptr -> qedx_info.buffers (b.callers_idx).auto_write then
			go to IGNORE_THIS_BUFFER;	/* ... but it's gonna get written automaticaly */
		return ("1"b);			/* ... found one */
	     end;

IGNORE_THIS_BUFFER:					/* try next buffer */
	     bp = b.next;
	end;

	return ("0"b);				/* can only get here if all not modified */
%page;
/* Extract buffer name and find (or create) buffer */

find_buffer:
     procedure (ftp, fti, fte, fbp, crsw);

dcl  ftp ptr,					/* pointer to string containing buffer name */
     fti fixed bin (21),				/* index in string to first character of buffer name */
     fte fixed bin (21),				/* index of last character of string */
     fbp ptr,					/* pointer to buffer control block if found (returned) */
     crsw bit (1),					/* create switch ("1"b = create if not found) */
     p_name char (16);				/* used by locate_buffer entrypoint */

dcl  lbp ptr,					/* temporary storage */
     (i, j, l) fixed bin (21),
     tch char (1),
     tname char (16);

	do fti = fti to fte;			/* skip blanks */
	     tch = substr (ftp -> a_string, fti, 1);	/* get a character */
	     if tch ^= " " then go to get_name;		/* jump out on first non-blank character */
	end;
buf_err:
	call ioa_ ("Syntax error in buffer name.");
	fbp = null ();				/* indicate error by returning null pointer */
	return;					/* return to caller */

get_name:
	if tch ^= "("				/* if one character buffer name given */
	     then
	     if tch ^= NL then do;
		tname = tch;			/* pick up single character name */
		fti = fti + 1;			/* skip index over buffer name */
	     end;
	     else go to buf_err;
	else do;					/* if multiple characters in name */
	     l = fte - fti;				/* find end of buffer name */
	     if l < 2 then go to buf_err;		/* by looking for matching ")" */
	     i = fti + 1;				/* start search next character after " (" */
	     j = index (substr (ftp -> a_string, i, l), ")");
						/* look for ")" */
	     if j < 2 then go to buf_err;		/* error if not found or null buffer name */
	     fti = i + j;				/* move line index after ")" */
	     tname = substr (ftp -> a_string, i, (j - 1));/* pick up buffer name */
	end;
	go to SKIP_LOCATE_BUFFER_ENTRY;


/* Locates the buffer whose name is given */

locate_buffer:
     entry (p_name, fbp, crsw);

	tname = p_name;

SKIP_LOCATE_BUFFER_ENTRY:
	fbp = addr (b0);				/* search existing buffers for buffer name */
	do while (fbp ^= null ());			/* .. */
	     if fbp -> b.name = tname then return;	/* if found, return pointer to buffer's control block */
	     lbp = fbp;				/* save pointer to this control block */
	     fbp = fbp -> b.next;			/* and move to next buffer (if any) in list */
	end;
	if ^crsw then do;				/* not found, take error return if crsw = "0"b */
	     call ioa_ ("Buffer (^a) not found.", tname);
	     return;				/* return with control block ptr (fbp) = null */
	end;
	allocate b in (editor_area) set (fbp);		/* otherwise, try to create new buffer */
	call get_temp_segment_ (qid.editor_name, fbp -> b.dp, code);
	if code ^= 0 then do;			/* if failed to create buffer */
	     free fbp -> b in (editor_area);		/* free buffer control block */
	     call com_err_ (code, qid.editor_name, "Obtaining temporary space for buffer ^a.", tname);
	     fbp = null ();				/* indicate failure by returning null pointer to caller */
	     return;				/* return to caller */
	end;
	lbp -> b.next = fbp;			/* buffer created, thread with previous control block */
	fbp -> b.name = tname;			/* initialize new buffer control block */
	fbp -> b.next = null ();			/* .. (now last block in chain) */
	fbp -> b.lb = 0;				/* buffer is empty low */
	if sys_info$service_system then
	     fbp -> b.de = 4 * 4 * 1024;		/* .. current buffer size */
	else fbp -> b.de = 4 * sys_info$max_seg_size;	/* don't grow bce segs */
	fbp -> b.li = 1;				/* .. current line index */
	fbp -> b.ft = fbp -> b.de + 1;		/* buffer is empty high */
	fbp -> b.le = 0;				/* .. current line end */
	fbp -> b.tw_sw = "0"b;			/* .. current typewriter switch */
	fbp -> b.default_path = "";			/* .. current default pathname */
	fbp -> b.callers_idx = 0;			/* .. don't know if caller asked us to create it yet */
	string (fbp -> b.flags) = ""b;		/* .. all flags are off in the default state */

	return;

     end find_buffer;
%page;
%include qedx_internal_data;
%page;
%include qedx_info;
%page;
%include set_wakeup_table_info;

     end edx_util_;
