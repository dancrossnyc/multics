/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: off */

/* search_file_ ... qedx utility procedure to search addressed portion of buffer with specified regular expression */

/*	This procedure parses a regular expression and stores an executable version of same in its internal storage.
   A regular expression can contain up to 132 characters and up to 20 subexpressions as defined below.
   Certain special cases are recognized and optimized. The follow subexpressions are currently supported:

   Type	Meaning

   0	The first string search of the regular expression.
   1	The first string search of the regular expression has an initial newline. Anchor search to the
	beginning of a line.
   2	A string search following a dot-star subexpression.
   3	A string search following a star or dot subexpression.
   4	A star subexpression.
   5	A dot subexpression. */

/*	The following non-standard error codes are returned by search_file_:
   1	Search failed.
   2	Invalid syntax in a regular expression. (A message is always printed.)
*/

/* Initial coding by R. C. Daley,  August 1970 */
/* Recoded in V2 PL/I by D. S. Levin, August 1974 */
/* Modified for gapped buffer first line detection by T. Oke 80-07-14. */
/* Changes merged and edited 03/03/82 S. Herbst */
/* Fixed argument reference bug 11/03/82 S. Herbst */
/* Added $silent 11/12/82 S. Herbst */
/* Modified: January 1983 by G. Palter to make reentrant and always return standard codes for $silent entrypoint */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */

/* Previous compatability entry point for mail system use */

search_file_:
     proc (atp, ati, atl, afp, afi, afe, ami, ame, acode);

dcl  atp ptr,					/* Pointer to string containing regular expression. */
     ati fixed bin (21),				/* Index of first character of regular expression. */
     atl fixed bin (21),				/* Length of regular expression. */
     afp ptr,					/* Pointer to buffer file to be searched. */
     afi fixed bin (21),				/* Index of first character to be searched. */
     afe fixed bin (21),				/* Index of last character to be searched. */
     ami fixed bin (21),				/* Index of first character of string matched (Output). */
     ame fixed bin (21),				/* Index of last character of string matched (Output). */
     alb fixed bin (21),				/* start of lower buffer */
     aft fixed bin (21),				/* start of upper buffer */
     acode fixed bin (35),				/* Error status code (Output) */
     P_qid_ptr pointer parameter;			/* -> qedx internal data */

dcl  (tp, fp) ptr,					/* Automatic storage. */
     silent_sw bit (1),				/* ON for search_file_$silent */
     (lb, ft, ti, tl, te, fi, fe, j) fixed bin (21),
     match_start (20) fixed bin (21),			/* Index of first character of match. */
     reentry_point (20) fixed bin (21),			/* Restart or reentry stack. Reenter if element ^= 0. */
     (i, l, type, st, last_string, last_star) fixed bin;

dcl  1 rd aligned based (rd_ptr),			/* completely describes a regular expression */
       2 reg_info (20),
         3 search_char char (1) unal,
         3 len fixed bin (8) unaligned,
         3 start fixed bin (8) unaligned,
         3 search_type fixed bin (8) unaligned,
       2 regl fixed binary (21),			/* length of the regular expression */
       2 omit_newline bit (1) aligned,			/* differentiates between $ and \cNL */
       2 reg character (132);				/* string accumulator */
dcl  rd_ptr pointer;

dcl  1 external_rd static aligned like rd;		/* for use by non-qedx entrypoints */
dcl  first_call bit (1) aligned static initial ("1"b);	/* ... so non-qedx entrypoints can initialize above */

dcl						/* Constants. */
     special_char char (5) aligned internal static initial (".*\$"),
						/* 5th character is \c. */
     nl char (1) aligned internal static initial ("
");

dcl  exp char (te) based aligned;
dcl  text char (fe) based aligned;

dcl  error_table_$nomatch fixed binary (35) external;
dcl  error_table_$regexp_invalid_star fixed bin (35) ext;
dcl  error_table_$regexp_too_complex fixed bin (35) ext;
dcl  error_table_$regexp_too_long fixed bin (35) ext;
dcl  error_table_$regexp_undefined fixed bin (35) ext;

dcl  ioa_ entry options (variable);

dcl  (hbound, index, length, search, substr, unspec, verify) builtin;
%page;
	silent_sw = "0"b;				/* normal entry point prints error messages */
	go to RETAINED_COMMON;

silent:
     entry (atp, ati, atl, afp, afi, afe, ami, ame, acode);

	silent_sw = "1"b;

RETAINED_COMMON:
	lb = afe;					/* presets lb and ft for single buffer */
	ft = lb + 1;				/* first section full, second section empty */

	rd_ptr = addr (external_rd);			/* use non-qedx saved expression (if any) */
	if first_call then do;			/* ... need to initialize the expression */
	     first_call = "0"b;
	     rd.regl = 0;				/* ... no initial saved expression */
	end;
	go to COMMON;


/* qedx only */

qx_search_file_:
     entry (P_qid_ptr, atp, ati, atl, afp, afi, afe, ami, ame, alb, aft, acode);


	silent_sw = "0"b;				/* qedx relies on this entrypoint to print error messages */
	lb = alb;
	ft = aft;

	qid_ptr = P_qid_ptr;			/* get saved regular expression (if any) */
	rd_ptr = qid.regexp_data_ptr;

COMMON:
	tp = atp;					/* Pointer to string containing regular expression. */
	ti = ati;					/* Index of first character of regular expression. */
	tl = atl;					/* Length of regular expression. */
	fp = afp;					/* Pointer to buffer area to be searched. */
	fi = afi;					/* Index of first character of area to be searched. */
	fe = afe;					/* Index of last character of area to be searched. */

	if tl = 0					/* Check for null regular expression "//". */
	then if rd.regl > 0				/* "//" given, use previous regular expression if any. */
	     then go to match;
	     else do;
		if silent_sw then
		     acode = error_table_$regexp_undefined;
		else call ioa_ ("// undefined in regular expression.");
						/* Error, // and no previous regular expression. */
fatal:
		rd.regl = 0;			/* No previous regular expression. */
		if ^silent_sw then acode = 2;		/* Fatal error. Cannot be retried. */
		return;
	     end;
	te = ti + tl - 1;				/* Get index of last character of regular expression. */
	st = 1;					/* Initialize string accumulator length to zero. */
	l = 0;					/* Initialize sub-expression string length to zero. */
	type = 0;					/* Assume simple expression until we know otherwise. */

	if substr (tp -> exp, ti, 1) = "^"		/* Anchor to the beginning of line? */
	then do;					/* Yes, make first character a newline. */
	     type = 1;				/* String must begin at newline. */
	     ti = ti + 1;				/* Get next character. */
	     substr (rd.reg, 1, 1) = nl;		/* First character is a newline. */
	     st = st + 1;				/* Length does not include newline. */
	end;

	rd.regl = 0;				/* Initialize to no subexpressions. */
	last_string = 0;				/* Index to immediately previous string search. */
	last_star = 0;				/* Index to immediately previous star subexpression. */
	rd.omit_newline = "0"b;			/* No "$" found. Do not shorten matched string. */

parse_expression:					/* Parse the regular expression, forming subexpressions. */
	tl = te - ti + 1;				/* Get the length of the remainder of the RE. */
	if tl <= 0 then goto expression_parsed;		/* No more regular expr. Go execute what we have. */
	i = search (substr (tp -> exp, ti, tl), special_char) - 1;
						/* Find first special character. */
	if i < 0 then i = tl;			/* None found. Get number of remaining characters. */
	if i > 0					/* If count is nonzero, add those characters to string. */
	then do;
	     if st + l + i > length (rd.reg) then go to long_string;
						/* Can't store all those characters. */
	     substr (rd.reg, st + l, i) = substr (tp -> exp, ti, i);
						/* Add the characters to the string. */
	     l = l + i;				/* Bump the string length. */
	     ti = ti + i;				/* Skip those characters in the regular expression. */
	     if ti > te then go to expression_parsed;	/* If no special characters then done parsing. */
	end;

	go to special_case (index (special_char, substr (tp -> exp, ti, 1)));
						/* Go to appropriate routine. */

special_case (1):					/* Period or dot. */
	call end_sub_expression;			/* Previous string search must be terminated. */
	i = 0;					/* Initialize to only one occurance of dot. */
	tl = te - ti + 1;				/* Get the length of the remainder of the RE. */
	if tl - 1 > 0 then i = verify (substr (tp -> exp, ti + 1, tl - 1), ".");
						/* Count all following dots. */
	if i = 0 then i = tl;			/* This equals the total number of dots. */
	ti = ti + i;				/* Skip over all the dots. */
	if ti <= te then
	     if substr (tp -> exp, ti, 1) = "*"		/* Last dot is part of ".*". */
	     then do;
		type = 2;				/* Indicates next string search is preceeded by ".*". */
		ti = ti + 1;			/* Skip over "*". */
		i = i - 1;			/* Reduce dot count by one. */
	     end;
	if i > 0 then call builder (5, i);		/* Dot subexpression. Dot-star stored by end_sub_expression */
	if type ^= 2 then type = 3;			/* No dot-star, just a normal string search. */
	go to parse_expression;			/* Continue. */

special_case (2):					/* Asterisk or star. */
	if l = 0					/* No character precedes the star. */
	then do;
	     if silent_sw then
		acode = error_table_$regexp_invalid_star;
	     else call ioa_ ("Invalid use of * in regular expression.");
	     go to fatal;
	end;
	l = l - 1;				/* The character must be removed from previous string. */
	ti = ti + 1;				/* Skip the star. */
	call end_sub_expression;			/* Build search subexpression for previous string. */
	if type = 2 then go to parse_expression;	/* Do not build if star preceded by dot-star. */
	if rd.regl > 0 & rd.regl = last_star		/* Do not build if previous subexpression is identical. */
	then if rd.reg_info (last_star).search_char = substr (rd.reg, st, 1) then go to parse_expression;
	call builder (4, 0);			/* A star subexpression. */
	last_star = rd.regl;			/* This is now the most recent star subexpression. */
	rd.reg_info (last_star).search_char = substr (rd.reg, st, 1);
						/* Store character for star subexpression. */
	type = 3;					/* No dot-star, just a normal string search. */
	go to parse_expression;			/* Continue the parse. */

special_case (3):					/* Backslash. Could be part of \c or \C. */
	if ti = te then go to store_char;		/* Obviously no character follows it. */
	if substr (tp -> exp, ti + 1, 1) ^= "c" & substr (tp -> exp, ti + 1, 1) ^= "C" then go to store_char;
	ti = ti + 1;				/* Found "\c" or "\C". Skip the backslash. */

special_case (5):					/* Backslash-c as single character. */
	ti = ti + 1;				/* Skip the "\c", or skip "c" from above. */

store_char:					/* Add a single character to the string being created. */
	if st + l = length (rd.reg)			/* Check for string overflow. */
	then do;

long_string:					/* Expression has too many characters. */
	     if silent_sw then
		acode = error_table_$regexp_too_long;
	     else call ioa_ ("Regular expression is too long.");
	     go to fatal;
	end;
	substr (rd.reg, st + l, 1) = substr (tp -> exp, ti, 1);
						/* Add the character. */
	ti = ti + 1;				/* Continue scan with next character. */
	l = l + 1;				/* Bump string length. */
	go to parse_expression;			/* Continue parse. */

special_case (4):					/* Dollar sign or end of line anchor. */
	if ti ^= te then go to store_char;		/* Special meaning only at end of expression. */
	rd.omit_newline = "1"b;			/* Found a "$". Omit newline at end of string. */
	if st + l = length (rd.reg) then go to long_string;
						/* No room. */
	substr (rd.reg, st + l, 1) = nl;		/* Store a newline to provide the anchor. */
	l = l + 1;				/* Adjust string length. */
	ti = ti + 1;				/* Now we are done. */

/* End of parsing loop. */

expression_parsed:
	call end_sub_expression;			/* Create final search subexpression, if any. */
	if type = 2 then call builder (2, 0);		/* Dot-star is last subexpression of RE. */
%page;
match:
	if fe = 0 | fi > fe then go to fail;		/* Search fails on empty buffer. */
	do i = 1 to rd.regl;			/* Reset the reentry stack to no reentry points. */
	     reentry_point (i) = 0;
	end;

restart_search:					/* Match the entire regular expression. */
	match_start (1) = fi;			/* Assume expression is anchored. */
	i = 1;					/* Initialize to first subexpression. */
	st = 1;					/* Start at the beginning of the string accumulator. */
	te = fi - 1;				/* Initialize to zero length string. */

search_loop:
	tl = fe - fi + 1;				/* Get length of remainder of the text buffer. */
	l = rd.reg_info (i).len;			/* Get length field. */
	go to string_search (rd.reg_info (i).search_type);/* Execute the subexpression. */

string_search (0):					/* Initial search without initial newline. */
	if l > tl then go to fail;			/* Not enough characters to satisfy the match. */
	j = index (substr (fp -> text, fi, tl), substr (rd.reg, 1, l)) - 1;
						/* Find occurance of the string. */
	if j < 0 then go to fail;			/* Not there. Search fails. */
	st = st + l;				/* Skip over string in accumulator. */
	go to found_first_match;			/* Go save all information about first match. */

string_search (1):					/* Initial search with initial newline. */
	if fi > 1 & (lb > 0 | fi ^= ft) then do;	/* not first line of buffer */
	     if (lb > 0 & fi = ft) then do;		/* pointers will be valid for check */
		if substr (fp -> text, lb, 1) = nl then goto nl_found;
						/* nl end of first section */
	     end;
	     else if substr (fp -> text, fi - 1, 1) = nl then goto nl_found;
						/* nl is previous char */
	     j = index (substr (fp -> text, fi, tl), nl); /* Search for newline. */
	     if j = 0 then go to fail;		/* No more lines. Search fails. */
	     fi = fi + j;				/* Go to first character after newline. */
	     tl = tl - j;				/* Reduce the buffer length. */
	     if tl <= 0 then go to fail;		/* That newline was the last character in buffer. */
	end;
nl_found:
	st = st + l + 1;				/* Point to next string. Skip this string and newline. */
	j = 0;					/* Offset if string matches the current line. */
	if l = 0 then go to found_first_match;		/* Just had to find the beginning of a line. */
	if l > tl then go to fail;			/* Not enough characters to satisfy the match. */
	if substr (fp -> text, fi, l) ^= substr (rd.reg, 2, l)
						/* Check this line but omit newline. */
	then do;					/* Not in current line. Search remainder of buffer. */
	     j = index (substr (fp -> text, fi, tl), substr (rd.reg, 1, l + 1));
						/* Include the newline in the search. */
	     if j = 0 then go to fail;		/* Not found in buffer. Search fails. */
	end;

found_first_match:
	match_start (1) = fi + j;			/* This is first search. The match starts here. */
	go to found_field;				/* Get next subexpression. */

string_search (2):					/* Dot-star string search. Match as few characters as possible. */
	if l = 0					/* If length is zero, then RE ends with ".*". */
	then do;					/* Treat like ".*$". */
	     te = fi + index (substr (fp -> text, fi, tl), nl) - 2;
						/* Find end of the current line, without newline. */
	     if te < fi - 1 then te = fe;		/* No newline, take the rest of the buffer. */
	     go to next_field;			/* Pretend there is something next. */
	end;
	if l > tl then go to fail_reset;		/* Must have enough characters for the match. */
	j = index (substr (fp -> text, fi, tl), substr (rd.reg, st, l)) - 1;
						/* Find a match. */
	if j < 0 then go to fail_reset;		/* None found. Could be someone else's fault. */
	te = 0;					/* If offset is zero, there is no newline. */
	if j > 0 then te = index (substr (fp -> text, fi, j), nl);
						/* Dot does not match a newline. */
	if te > 0					/* At least one intervening newline. */
	then do;					/* Advance one line and try again. */
	     fi = fi + te;				/* Point to next line. */
	     reentry_point (i) = 0;			/* Remove from stack until needed. */
	     go to restart_search;			/* Try to match entire RE. */
	end;
	reentry_point (i) = fi + j + 1;		/* Stack a reentry point if future subexpression fails. */
	st = st + l;				/* Advance string offset pointer. */
	go to found_field;				/* Tell everyone we found something. */

string_search (3):					/* Search subexpression. Match string at current buffer position. */
	if l > tl then go to fail_retry;		/* Cannot match if not enough characters. */
	j = 0;					/* Offset if the following is a match. */
	if substr (fp -> text, fi, l) ^= substr (rd.reg, st, l) then go to fail_retry;
						/* Do they match? */
	st = st + l;				/* Skip over string in accumulator. */
	go to found_field;				/* Get next subexpression. */

string_search (4):					/* Star subexpression. Match as many of a particular character as possible. */
	reentry_point (i) = 0;			/* Assume a match on zero length string. */
	if tl <= 0 then go to next_field;		/* Match a zero length string. */
	match_start (i) = fi;			/* Match starts at current buffer position. */
	l = verify (substr (fp -> text, fi, tl), rd.reg_info (i).search_char) - 1;
						/* Count the occurances. */
	if l < 0 then l = tl;			/* Rest of buffer is a match. */
	if l = 0 then go to next_field;		/* Matches a zero length string. */
	reentry_point (i) = fi + l - 1;		/* Restart point matches one fewer characters. */
	j = 0;					/* String offset for the match. */
	go to found_field;

string_search (5):					/* Dots. */
	if tl < l then go to fail_retry;		/* Must have enough characters. */
	j = 0;					/* Offset. */
	if index (substr (fp -> text, fi, l), nl) ^= 0	/* Dot does not match a newline. */
	then go to fail_retry;			/* Dot does not match a newline. */

found_field:					/* Code to store a match. */
	fi = fi + j + l;				/* Next search will begin immediately after match. */
	te = fi - 1;				/* Address of last matched character. */

next_field:					/* Get next subexpression. */
	i = i + 1;				/* Bump subexpression counter. */
	if i <= rd.regl then go to search_loop;		/* Execute next subexpression or match SUCCEEDS! */
	if rd.omit_newline				/* If last char is "$", do not match final newline. */
	then te = te - 1;				/* Match the line without the newline character. */
	ami = match_start (1);			/* Return index of first character matched. */
	ame = te;					/* Return index of last character matched. */
	acode = 0;
	return;

fail_reset:					/* A reentry point is no longer valid. Reset it. */
	reentry_point (i) = 0;

fail_retry:					/* A subexpression failed.  Iterate if possible. */
	i = i - 1;				/* Try previous subexpression. */
	if i <= 0 then do;
	     match_start (1) = match_start (1) + 1;	/* Restart one character further in. */
	     if match_start (1) > fe			/* Search fails on empty buffer. */
	     then do;
fail:						/* Regular expression cannot be matched. */
		if silent_sw then
		     acode = error_table_$nomatch;	/* always return standard codes for search_file_$silent */
		else acode = 1;
		return;
	     end;
	     fi = match_start (1);			/* Get new starting offset. */
	     go to restart_search;
	end;
	fi = reentry_point (i);			/* Pick up a potential restart point. */
	if fi = 0 then go to fail_retry;		/* Must be a useful restart point. */
	st = rd.reg_info (i).start;			/* It's OK.  Reset the string accumulator offset. */
	if rd.reg_info (i).search_type = 2 then go to search_loop;
						/* It's ".*". Go find next occurrence of string. */
	if reentry_point (i) < match_start (i) then go to fail_reset;
						/* It's "a*". No restart if no a's matched. */
	reentry_point (i) = reentry_point (i) - 1;	/* Decrement number of a's matched. */
	go to next_field;
%page;
/* Initializes qedx per-invocation regular expression data */

init:
     entry (P_qid_ptr);

	qid_ptr = P_qid_ptr;

	allocate rd in (editor_area) set (rd_ptr);
	rd.regl = 0;				/* no saved regular expression yet */

	qid.regexp_data_ptr = rd_ptr;

	return;


/* Terminates qedx per-invocation regular expression data */

cleanup:
     entry (P_qid_ptr);

	qid_ptr = P_qid_ptr;

	if qid.regexp_data_ptr ^= null () then do;
	     free qid.regexp_data_ptr -> rd in (editor_area);
	     qid.regexp_data_ptr = null ();
	end;

	return;
%page;
/* Creates current search subexpression */

end_sub_expression:
     procedure ();

dcl  (dot_count, ir) fixed bin;

	if l > 0 | type = 1				/* If current search string subexpression outstanding. */
	then do;
	     if type = 2				/* A string search preceded by ".*". */
	     then do;
		dot_count = 0;			/* initialize to no dots. */
		do ir = rd.regl to last_string + 1 by -1;
						/* Scan the RE. */
		     if rd.reg_info (ir).search_type = 5/* A dot subexpressionn. */
		     then dot_count = dot_count + rd.reg_info (ir).len;
						/* Add in its count. */
		     else if rd.reg_info (ir).search_type ^= 4
						/* A star subexpression. */
		     then go to done_dot_star;
		     rd.regl = rd.regl - 1;		/* Remove dot or star subexpression from RE. */
		end;
done_dot_star:
		if dot_count > 0 then call builder (5, dot_count);
						/* Build dot subexpression if necessary. */
		last_star = 0;			/* Forget about those star subexpressions. */
	     end;
	     if last_string = rd.regl - 1 & last_star = rd.regl
						/* Optimize ab*b to abb*. Also b*b to bb*. */
	     then do;
		ir = verify (substr (rd.reg, st, l), rd.reg_info (last_star).search_char) - 1;
		if ir < 0 then ir = l;		/* Entire string matches the character. */
		if ir > 0				/* Move the matches to the previous string. */
		then do;
		     if last_string = 0		/* Oops, there was really no previous string. */
		     then do;			/* Guess we'll have to make one. */
			last_string = 1;		/* String search is first subexpression. */
			unspec (rd.reg_info (2)) = unspec (rd.reg_info (1));
						/* Copy star subexpression. */
			last_star = last_star + 1;	/* Remember that. */
			rd.reg_info (2).start = ir + 1;
						/* Set the correct accumulator offset. */
			rd.reg_info (1).search_type = 0;
						/* First subexpression is a string search. */
			rd.regl = 2;		/* Now there are two subexpressions. */
		     end;
		     rd.reg_info (last_string).len = rd.reg_info (last_string).len + ir;
						/* Add to previous string length. */
		     st = st + ir;			/* Bump offset pointer. */
		     l = l - ir;			/* Reduce string length. */
		     if l = 0 then return;		/* String is eliminated. */
		end;
	     end;
	     call builder (type, l);			/* Any type of search string subexpression. */
	     type = 3;				/* Set to 3 in case it was 0, 1, or 2. */
	     last_string = rd.regl;			/* Remember position of last string. */
	     st = st + l;				/* Bump accumulator offset. */
	     l = 0;				/* Initialize string length to zero. */
	end;

	return;

     end end_sub_expression;
%page;
/* Creates any subexpression */

builder:
     procedure (id, size);

dcl  (id, size) fixed bin;

	if rd.regl = hbound (rd.reg_info, 1)		/* Insure we have not exceeded the stack. */
	then do;
	     if silent_sw then
		acode = error_table_$regexp_too_complex;
	     else call ioa_ ("Regular expression is too complex.");
	     go to fatal;
	end;
	rd.regl = rd.regl + 1;			/* Bump stack size. */
	rd.reg_info (rd.regl).search_type = id;		/* Store type of subexpression. */
	rd.reg_info (rd.regl).len = size;		/* Store length of the subexpression. */
	rd.reg_info (rd.regl).start = st;		/* Store accumulator offset. */

	return;

     end builder;
%page;
%include qedx_internal_data;

     end search_file_;
