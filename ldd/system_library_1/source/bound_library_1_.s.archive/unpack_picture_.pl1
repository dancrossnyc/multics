/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Program to picture unpacking, packing, and validation for PL/I

   Initial Version:  22 November 1973 by BLW
	Modified: 27 April 1974 by BLW to fix bugs 1063, 1068, 1071, 1072, 1089
	Modified: 16 July 1974 by BLW to fix bug 1172
	Modified:	17 November 1976 by RAB to fix 1550
	Modified: 7 February 19885 by Steve Herbst to prevent
		zero-suppressing a decimal point.
*/

unpack_picture_: proc(target_value,picture,source_value);

dcl	(target_value,source_value) char(1) unaligned,
	picture fixed bin;

dcl	(tp,pp,sp) ptr,
	(i,j,k,last_non_zero,picture_pos,source_pos,type,prec,scale,dr1,dr2,start,
	 scalefactor,picture_length,source_length,target_pos,exp_sign,exp,code,delta) fixed bin,
	(had_exponent,zero_surpression,first_z,first_star,negative,no_digit,have_drift) bit(1) aligned,
	digits char(64) aligned,
	exponent fixed dec(3),
	(pc,sc,drift) char(1) aligned,
	source(source_length) char(1) unaligned based(sp),
	input char(source_length) unaligned based(sp),
	target char(64) unaligned based(tp),
	target_array(0:1) char(1) unaligned based(tp);

dcl	(addr,index,null,substr) builtin;

dcl	ALPHABETIC char(53) int static
	init(" abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");

dcl	plio2_signal_$s_ entry(ptr,aligned char(*),aligned char(*),fixed bin),
	plio2_signal_$conversion_error_ entry(ptr,char(*),fixed bin,ptr,fixed bin,fixed bin,fixed bin),
	cu_$grow_stack_frame entry(fixed bin,ptr,fixed bin),
	adjust_float_ entry(ptr,ptr,fixed dec(3));

dcl	fudge(24:28) fixed bin int static init(0,1,1,2,2);

dcl	1 float_decimal	unaligned based(tp),
	2 sign		char(1),
	2 mantissa	char(prec),
	2 skip		bit(1),
	2 exponent	fixed bin(7);

dcl	decimal_value char(prec + 1) unaligned based(sp);

dcl	1 info	aligned based(pp) like picture_image;

%include picture_image;
%include picture_types;

	call open_picture;

	sp = addr(source_value);
	tp = addr(target_value);

	call unpack;

	if type = cplx_fixed_picture | type = cplx_float_picture
	then do;
	     sp = addr(source(source_length + 1));
	     tp = addr(target_array(prec + fudge(type)));
	     call unpack;
	     end;

	return;

pl1_valid_picture_: entry(picture_value,picture,answer);

dcl	picture_value char(1) unal,
	answer bit(1) aligned;

	call open_picture;

	sp = addr(picture_value);

	call validate;

	if code = 0
	then if type = cplx_fixed_picture | type = cplx_float_picture
	     then do;
		sp = addr(source(source_length + 1));
		call validate;
		end;

	answer = code = 0;
	return;

validate_picture_: entry(picture_value,picture,error_code,error_index);

dcl	(error_code,error_index) fixed bin;

	call open_picture;

	sp = addr(picture_value);

	delta = 0;

	call validate;

	if code = 0
	then if type = cplx_fixed_picture | type = cplx_float_picture
	     then do;
		delta = source_length;
		sp = addr(source(source_length + 1));
		call validate;
		end;

	error_code = code;
	error_index = source_pos + delta;
	return;

pack_picture_: entry(target_value,picture,source_value);

	call open_picture;

	sp = addr(source_value);
	tp = addr(target_value);

	if type = char_picture then call pack_char;
	else do;
	     call pack;

	     if type = cplx_fixed_picture | type = cplx_float_picture
	     then do;
		sp = addr(addr(source_value) -> source(prec + fudge(type) + 1));
		tp = addr(target_array(source_length));
		call pack;
		end;
	     end;

	return;

open_picture:  proc;

	     pp = addr(picture);

	     type = info.type;
	     prec = info.prec;
	     scale = info.scale;
	     picture_length = info.piclength;
	     source_length = info.varlength;
	     scalefactor = info.scalefactor;

	     end;

pack:	     proc;

	     if fudge(type) = 2
	     then do;

		/* have floating point value, we have to copy because we may have
		   been called with constant value */

		substr(digits,1,prec+2) = substr(input,1,prec+2);
		sp = addr(digits);

		/* now adjust the floating decimal value */

		call adjust_float_(sp,pp,exponent);
		end;

	     negative = source(1) = "-";
	     source_pos = 2;
	     zero_surpression, have_drift = "0"b;
	     first_z, first_star, no_digit = "1"b;

	     start, target_pos = 1;

	     do picture_pos = 1 to picture_length;
		pc = substr(info.chars,picture_pos,1);
		goto case(index("9y*z$s+-cd/.,bvek",pc));

		/* 9 */

case(1):		call put_digit;
		source_pos = source_pos + 1;
		goto place;

		/* y */

case(2):		if source(source_pos) = "0"
		then pc = " ";
		else call put_digit;

		zero_surpression = "0"b;
		source_pos = source_pos + 1;
		goto place;

		/* * */

case(3):		if first_star
		then do;
		     zero_surpression = "1"b;
		     first_star = "0"b;
		     end;

		if zero_surpression & (source(source_pos) = "0")
		then pc = "*";
		else call put_digit;

		source_pos = source_pos + 1;
		goto place;

		/* z */

case(4):		if first_z
		then do;
		     zero_surpression = "1"b;
		     first_z = "0"b;
		     end;

		if zero_surpression & (source(source_pos) = "0")
		then pc = " ";
		else call put_digit;

		source_pos = source_pos + 1;
		goto place;

		/* $ */

case(5):		if info.drift_character ^= "$" then goto place;

		if ^ no_digit then goto case(1);

		if have_drift then goto case(4);

		drift = "$";
		zero_surpression, have_drift = "1"b;
		pc = " ";
		goto place;

		/* s */

case(6):		pc = source(1);
		call drifting_sign;

		/* + */

case(7):		if negative then pc = " ";
		call drifting_sign;

		/* - */

case(8):		if ^ negative then pc = " ";
		call drifting_sign;

		/* c */

case(9):		if negative then substr(target,target_pos,2) = "cr";
		else substr(target,target_pos,2) = "  ";

		picture_pos = picture_pos + 1;
		goto step;

		/* d */

case(10):		if negative then substr(target,target_pos,2) = "db";
		else substr(target,target_pos,2) = "  ";

		picture_pos = picture_pos + 1;
		goto step;

		/* / . , */

case(11):
case(12):
case(13):		if zero_surpression
		then if substr(target,target_pos - 1,1) = "*"
		     then pc = "*";
		     else if pc ^= "." then pc = " ";	/* don't want to suppress the decimal point */

		goto place;

		/* b */

case(14):		if zero_surpression
		then if substr(target,target_pos - 1,1) = "*"
		     then pc = "*";
		     else pc = " ";
		else pc = " ";

		goto place;

		/* v */

case(15):		if zero_surpression
		then if search(decimal_value,"123456789") ^= 0
		     then call force_significance;

		goto step;

		/* e */

case(16):		call switch_to_exp;
		goto place;

		/* k */

case(17):		call switch_to_exp;
		goto step;

		/* place character pc in target string */

place:		substr(target,target_pos,1) = pc;
		target_pos = target_pos + 1;

step:		end;

	     if no_digit then substr(target,start,target_pos - start) = " ";

drifting_sign:	proc;

		if start ^= 1 then goto place;

		if info.drift_character ^= substr(info.chars,picture_pos,1) then goto place;

		if ^ no_digit then goto case(1);

		if have_drift then goto case(4);

		drift = pc;
		have_drift, zero_surpression = "1"b;
		pc = " ";
		goto place;
		end;

put_digit:	proc;

		pc = source(source_pos);

force_significance: entry;

		if have_drift
		then do;
		     substr(target,target_pos - 1,1) = drift;
		     have_drift = "0"b;
		     end;

		zero_surpression, no_digit = "0"b;
		end;

switch_to_exp:	proc;

		if no_digit then substr(target,1,target_pos - 1) = " ";

		start = target_pos;
		sp = addr(exponent);
		negative = source(1) = "-";
		zero_surpression, have_drift = "0"b;
		first_z, no_digit = "1"b;
		source_pos = 2;

		end;

	     end;

pack_char:     proc;

dcl	     p ptr,
	     (code,errno) fixed bin;

start:	     do source_pos = 1 to source_length;
		sc = source(source_pos);
		pc = substr(info.chars,source_pos,1);

		if pc = "9"
		then if index(" 0123456789",sc) = 0
		     then do;
			errno = 312;
			goto edit_err;
			end;
		     else;
		else if pc = "a"
		     then if index(ALPHABETIC,sc) = 0
			then do;
			     errno = 313;
			     goto edit_err;
			     end;

		substr(target,source_pos,1) = sc;
		end;

	     return;

edit_err:	     if sp = addr(source_value)
	     then do;

		/* copy source for use in signalling conversion */

		call cu_$grow_stack_frame(4*source_length,p,code);

		p -> source = sp -> source;
		sp = p;
		end;

	     call plio2_signal_$conversion_error_(null,"pack_picture_",errno,sp,1,source_length,source_pos);
	     goto start;
	     end;

unpack:	     proc;

	     last_non_zero = 0;
	     source_pos, target_pos = 0;
	     substr(target,1,1) = "+";
	     had_exponent = "0"b;
	     digits = (64)"0";

	     do picture_pos = 1 to picture_length;
		k = index("9y*z$s+-cd/.,bvek",substr(info.chars,picture_pos,1));

		if k >= 16
		then do;

		     /* process exponent field */

		     had_exponent = "1"b;
		     exp = 0;
		     exp_sign = 1;
		     if k = 16 then source_pos = source_pos + 1;
	
		     do while(source_pos < source_length);
			source_pos = source_pos + 1;

			sc = source(source_pos);
			j = index(" 0123456789+-",sc);
			if j > 12 then exp_sign = -1;
			if j < 12
			then if j > 1
			     then exp = exp * 10 + j - 2;
			end;
	
		     goto end_picture;
		     end;

		if k = 15 then goto loop;

		source_pos = source_pos + 1;

		if k > 10 then goto loop;

		sc = source(source_pos);
		if sc = " " then sc = "0";
		j = index("0123456789$+-cd",sc);

		if k > 4
		then do;

		     /* $ or sign */

		     if j > 12 then substr(target,1,1) = "-";

		     if k > 8
		     then do;

			/* skip over cr or db */

			source_pos = source_pos + 1;
			picture_pos = picture_pos + 1;
			goto loop;
			end;

		     if j = 0 then goto loop;
		     if j > 10 then goto loop;
		     end;

		target_pos = target_pos + 1;

		if j > 1
		then do;
		     last_non_zero = target_pos;
		     substr(digits,target_pos,1) = sc;
		     end;

loop:		end;

end_picture:   i = target_pos - prec;
	     last_non_zero = last_non_zero - i;
	     i = i + 1;
     
	     if had_exponent
	     then do;
		if last_non_zero < prec then substr(target,2,prec-last_non_zero) =
		 substr((64)"0",1,prec-last_non_zero);
     
		if last_non_zero > 0 then substr(target,prec-last_non_zero+2,last_non_zero)
		 = substr(digits,i,last_non_zero);
     
		exp = exp * exp_sign;
		exp = exp - scale + prec - last_non_zero + scalefactor;
     
		if exp > 127 then call signal_and_return("overflow",289);
		if exp < -128 then call signal_and_return("underflow",290);
     
		float_decimal.exponent = exp;
		end;
	     else substr(target,2,prec) = substr(digits,i,prec);

signal_and_return:	proc(name,erno);

dcl		name char(9) aligned,
		erno fixed bin;

		call plio2_signal_$s_(null,name,"pic",erno);
		goto exit;
		end;

	     end;

validate:      proc;

	     if type = char_picture
	     then do;

		do source_pos = 1 to source_length;
		     sc = source(source_pos);
		     pc = substr(info.chars,source_pos,1);

		     if pc = "9"
		     then if index(" 0123456789",sc) = 0
			then goto ve12;
			else;
		     else if pc = "a"
			then if index(ALPHABETIC,sc) = 0
			     then goto ve13;

		     end;

		code = 0;
		return;
		end;

	     if input = " "
	     then do;
		source_pos = index(info.chars,"9");
		if source_pos ^= 0 then goto ve14;

		code = 0;
		return;
		end;

	     zero_surpression = "0"b;
	     first_z, first_star = "1"b;

	     if info.drift_character = " " then dr1, dr2 = 0;
	     else do;
		dr1 = index(info.chars,info.drift_character);

		if info.drift_character = "$"
		then do;
		     dr2 = index(input,"$");
		     if dr2 = 0 then goto ve1;
		     end;
		else do;
		     dr2 = search(input,"+-");

		     if info.drift_character = "s"
		     then if dr2 = 0
			then goto ve2;
			else;
		     else if dr2 ^= 0
			then if substr(input,dr2,1) ^= info.drift_character
			     then goto ve2;
		     end;

		if dr2 = 0 then dr1 = 0;
		else do;
		     if dr2 > dr1
		     then if substr(input,dr1,dr2-dr1) ^= " "
			then goto ve3;

		     if substr(input,dr2+1,1) = " " then goto ve3;
		     end;
		end;

	     source_pos = 0;

	     do picture_pos = 1 to picture_length;
		pc = substr(info.chars,picture_pos,1);
		k = index("9yz*$s+-cd/.,bvek",pc);

		if k < 15
		then do;
		     source_pos = source_pos + 1;

		     if source_pos = dr1 then sc = source(dr2);
		     else if source_pos = dr2 then sc = " ";
			else sc = source(source_pos);

		     j = index(" 0123456789*$+-cd/.,",sc);
		     if j = 0 then goto ve5;
		     end;

		if k < 4
		then if j > 11
		     then goto ve11;

		goto case(k);

		/* 9 */

case(1):		if sc = " " then goto ve10;
		zero_surpression = "0"b;
		goto loop;

		/* y */

case(2):		if sc = "0" then goto ve10;
		if j > 2 then zero_surpression = "0"b;
		goto loop;

		/* z */

case(3):		if first_z
		then do;
		     zero_surpression = "1"b;
		     first_z = "0"b;
		     end;

		if sc = " "
		then if zero_surpression
		     then goto loop;
		     else goto ve9;

		goto valid_star;

		/* * */

case(4):		if first_star
		then do;
		     zero_surpression = "1"b;
		     first_star = "0"b;
		     end;

		if sc = "*"
		then if zero_surpression
		     then goto loop;
		     else goto ve9;

valid_star:	if sc = "0"
		then if zero_surpression
		     then goto ve9;
		     else goto loop;

		if j > 2 then zero_surpression = "0"b;
		goto loop;

		/* $ */

case(5):		if dr1 = 0 | source_pos <= dr1
		then if sc ^= "$"
		     then goto ve8;
		     else goto loop;

		goto case(3);

		/* s */

case(6):		if dr1 = 0 | source_pos <= dr1
		then if search(sc,"+-") = 0
		     then goto ve8;
		     else goto loop;

		goto case(3);

		/* + - */

case(7):
case(8):		if info.drift_character = " " | source_pos <= dr1
		then if (sc ^= pc) & (sc ^= " ")
		     then goto ve8;
		     else goto loop;

		goto case(3);

		/* c d */

case(9):
case(10):		if substr(input,source_pos,2) = "  "
		then do;
		     picture_pos = picture_pos + 2;
		     source_pos = source_pos + 2;
		     end;
		else do;
		     if sc ^= pc then goto ve7;

		     picture_pos = picture_pos + 1;
		     source_pos = source_pos + 1;

		     if source(source_pos) ^= substr(info.chars,picture_pos,1) then goto ve7;
		     end;

		goto loop;

		/* / . , b */

case(11):
case(12):
case(13):
case(14):		if zero_surpression
		then do;
		     if source(source_pos - 1) = "*"
		     then if sc ^= "*"
			then goto ve6;
			else;
		     else if sc ^= " "
			then goto ve6;
		     end;
		else if (j - 17) ^= (k - 10)
		     then if sc ^= " " | pc ^= "b"
			then goto ve6;

		goto loop;

		/* v */

case(15):		if search(input,"123456789") ^= 0 then zero_surpression = "0"b;
		goto loop;

		/* e */

case(16):		source_pos = source_pos + 1;

		if source(source_pos) ^= "e"
		then do;
		     if substr(input,source_pos) ^= " " then goto ve4;
		     if index(substr(info.chars,picture_pos+1),"9") ^= 0 then goto ve14;

		     code = 0;
		     return;
		     end;

		/* k */

case(17):		zero_surpression = "0"b;
		first_z, first_star = "1"b;
		dr1 = 0;

loop:		end;

	     code = 0;
	     return;

	     /* "$" not present in picture variable */

ve1:	     code = 301;

	     do source_pos = dr1 to source_length while(source(source_pos) = " ");
		end;

	     source_pos = source_pos - 1;
	     return;

	     /* "+" or "-" not present in variable */

ve2:	     code = 302;
	     source_pos = dr2;
	     return;

	     /* Drifting character not preceded by blank */

ve3:	     code = 303;
	     source_pos = dr2;
	     return;

	     /* "e" not present where expected */

ve4:	     code = 304;
	     return;

	     /* illegal character in variable */

ve5:	     code = 305;
	     return;

	     /* Insertion character error */

ve6:	     code = 306;
	     return;

	     /* "cr" or "db" not found where expected */

ve7:	     code = 307;
	     return;

	     /* Drifting character not found where expected */

ve8:	     code = 308;
	     return;

	     /* Blank or asterisk found instead of digit */

ve9:	     code = 309;
	     return;

	     /* "$" not present in variable */

	     /* zero surpression error */

ve10:	     code = 310;
	     return;

	     /* non-digit found where digit expected */

ve11:	     code = 311;
	     return;

	     /* non-digit found in "9" position in char variable */

ve12:	     code = 312;
	     return;

	     /* non-alphabetic found in "a" position in char variable */

ve13:	     code = 313;
	     return;

	     /* picture all blank when digit expected */

ve14:	     code = 314;
	     end;

exit:	end;
