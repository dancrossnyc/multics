/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-07-16,Farley), approve(87-07-17,MCR7735),
     audit(87-07-20,Fawcett), install(87-07-22,MR12.1-1044):
     Corrected handling of input escape sequences..
                                                   END HISTORY COMMENTS */


/* format: style2 */
oc_trans_input_:
     procedure (tptr, mnum, tlen, iptr, ilen);


/* format: off */
/*	Originally coded by  Bill Silver  July, 73.
*	Modified by N. I. Morris, March 1974 for ASCII input.
*	Modified by Bill Silver, May 1976 to fix EMC bugs.
*         BCD support expunged BIM 8/82.
*
*	This procedure is called to transliterate an operator's console input string
*	into a canonicalized ASCII string.
*
*		 ASCII   INPUT
*
*	The ASCII string will be examined character by character.  This will be done
*	with the help of a state transition table:  "state_table".   While we are converting
*	the input string we are always in one of three possible states.  The ASCII
*	character set has been divided into five groups.   For each group, depending upon
*	the current state, there is a routine which will process the current character.
*
*	The three states are:
*	1.  DIRECT  (D)	The preceding character has no relationship to this character.
*	2.  ESCAPE  (E)	The preceding character was an escape character: "\".
*	2.  OCTAL   (O)	We are currently processing an octal escape sequence.
*
*	The five character groups or types are:
*	1.  KILL		The kill   character "@".
*	2.  ERASE		The erase  character "#".
*	3.  ESCAPE	The escape character "\".
*	4.  OCTAL		The eight  octal digits.
*	5.  OTHERS	All other  characters.
*
*	The seven routines that can be used and the states that they return to are:
*	1.  (K)  -> (D)	KILL   - kill the whole line.
*	2.  (E)  -> (D)	ERASE  - delete the last character.
*	3.  (D)  -> (D)	DIRECT - convert directly from BCD to OCTAL.
*	4.  (SE) -> (E)	SET ESCAPE - just switch to the escape  (E) state.
*	5.  (CE) -> (D)	CONVERT ESCAPE - convert to ASCII acording to escape mapping.
*	6.  (O)  -> (O)	OCTAL - convert one octal digit.
*	7.  (OE) -> (D)	OCTAL END - end the octal conversion.
*
*	A more symbolic representation of the state transition table "state_table":
*
*		| KILL  | ERASE | ESCAPE| OCTAL | OTHERS
*	__________|_______|_______|_______|_______|_______
*	DIRECT	|   K   |   E   |   SE  |   D   |   D
*	__________|_______|_______|_______|_______|_______
*	ESCAPE	|   CE  |   CE  |   CE  |   O   |   CE
*	__________|_______|_______|_______|_______|_______
*	OCTAL	|   K   |   OE  |   OE  |   O   |   OE
*/
/* format: on */


/*		PARAMETER  DATA		*/

	dcl     tptr		 ptr,		/* (I) Pointer to the translated ASCII string.  */
	        mnum		 fixed bin,	/* (I) Max num of ASCII chars caller will accept.  */
	        tlen		 fixed bin,	/* (O) Num of ASCII characters in translated string. */
	        iptr		 ptr,		/* (I) Pointer to the INPUT  (ASCII)  string.  */
	        ilen		 fixed bin;	/* (I) Length  of the INPUT string in characters.  */



/*		AUTOMATIC  DATA		*/

	dcl     bindex		 fixed bin (35),	/* Binary form  of an ASCII character. */
	        charx		 fixed bin,	/* character group number. */
	        icount		 fixed bin,	/* The number of the input character being processed. */
	        ocount		 fixed bin,	/* Num of octal digits processed for an ASCII char. */
	        statex		 fixed bin,	/* state number. */
	        oct		 fixed bin,	/* Used to build an ASCII char from octal input. */
	        temp_char		 char (1) aligned;	/* Used to hold ASCII character. */



/*		BASED  DATA		*/

	dcl     tstring		 char (mnum) based (tptr);
						/* An overlay of the translated ASCII string. */

	dcl     astring		 char (80) based (iptr) unal;
						/* Used to reference the input ASCII string. */



	dcl     (byte, max, rank, substr)
				 builtin;


/*		INTERNAL STATIC DATA	*/

/*	This is the state transition table.  There are 3 states and 5 character
*	types.  For each state and character type there is a number which represents
*	a routine which will process that combination.
*/
	dcl     state_table		 (3, 5) fixed bin internal static options (constant) init (
						/** */
				 1, 2, 4, 3, 3,	/* STATE 1 */
				 5, 5, 5, 6, 5,	/* STATE 2 */
				 1, 7, 7, 6, 7);	/* STATE 3 */


/*	This table contains the character types.  */

	dcl     char_types		 (0:127) fixed bin (8) unaligned internal static options (constant) init (
						/** **/
				 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
						/* 000 - 017 */
				 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
						/* 020 - 037 */
				 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
						/* 040 - 057 */
				 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
						/* 060 - 077 */
				 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
						/* 100 - 117 */
				 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5,
						/* 120 - 137 */
				 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
						/* 140 - 157 */
				 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5);
						/* 160 - 177 */



	tlen, icount = 0;				/* Initialize counters. */

	statex = 1;				/* Start out in DIRECT state. */
	call RESET_OCTAL;

LOOP:						/* Each iteration of loop will process 1 char. */
	if (tlen = mnum) |				/** Have we got all caller wants (less new line)? */
	     (icount = ilen)			/* Have we got all there is? */
	then goto END_OF_TRANS;			/* YES. */

	icount = icount + 1;			/* Work on next character. */
	temp_char = substr (astring, icount, 1);

	bindex = rank (temp_char);
	charx = char_types (bindex);			/* Get appropriate character type code. */

/*	Using state transition table go to correct routine for this character type
*	and current state.
*/
	goto ACTION (state_table (statex, charx));

/*	We come here when we have finished processing the input string.
*	We have to do two more tasks:
*	1.  Strip off all white space (blanks and tabs) from the end of the translated
*	    ASCII string.
*	2.  Put a new line character at the end of the ASCII string.
*/
END_OF_TRANS:
STRIP_LOOP:					/* Each iteration processes one ASCII character. */
	if tlen = 0				/* Check for null string. */
	then goto ADD_NEW_LINE;

	if (substr (tstring, tlen, 1) ^= " ") &		/** If not a blank or tab. */
	     (substr (tstring, tlen, 1) ^= "	")
	then goto ADD_NEW_LINE;			/* Then we are all done stripping. */

	tlen = tlen - 1;				/* Delete this white space character. */
	goto STRIP_LOOP;				/* Process next character at end of string. */

ADD_NEW_LINE:
	tlen = tlen + 1;				/* Add new line at end of string. */
	substr (tstring, tlen, 1) = "
";

	return;					/* Now we are all done. */



ACTION (1):					/* KILL */
	tlen = 0;					/* Delete all the ASCII characters. */
	statex = 1;				/* Now in DIRECT state. */
	call RESET_OCTAL;
	goto LOOP;


ACTION (2):					/* ERASE */
	tlen = max (tlen - 1, 0);			/* Delete last translated char, never go below zero. */
	statex = 1;				/* Now in DIRECT state. */
	call RESET_OCTAL;
	goto LOOP;


ACTION (3):					/* DIRECT */
	call SET_CHAR;				/* Place character directly in output. */
	goto LOOP;


ACTION (4):					/* SET ESCAPE */
	statex = 2;				/* Go to escape state. */
	goto LOOP;


ACTION (5):					/* CONVERT ESCAPE */
	statex = 1;				/* Go to direct state. */
	if (charx ^= 5)				/* a special character. */
	then call SET_CHAR;				/* just copy it. */
	else do;
	     temp_char = "\";			/* insert leading ESCAPE */
	     call SET_CHAR;
	     temp_char = substr (astring, icount, 1);	/* now add character. */
	     call SET_CHAR;
	end;
	goto LOOP;


ACTION (6):					/* OCTAL */
	statex = 3;				/* Go to octal state. */


/* Shift octal digits left one place and
*  add new digit in low order position. */


	oct = (oct * 8) + (bindex - rank ("0"));
	ocount = ocount + 1;			/* Up count of octal digits processed. */
	if ocount = 3				/* Is this the third and last octal digit? */
	then do;					/* YES. */
		call SET_OCTAL;			/* Now we can set up the ASCII character. */
		statex = 1;			/* Leave octal state. */
	     end;
	goto LOOP;				/* Go process the next character. */


ACTION (7):					/* OCTAL END */
	call SET_OCTAL;				/* Use all the digits we have. */
	statex = 1;				/* Go back to direct state. */
	icount = icount - 1;			/* Last char not really processed - try again. */
	goto LOOP;


SET_CHAR:
     procedure;

/*	This procedure is called to move one character into
*	the output string.
*/
	tlen = tlen + 1;
	substr (tstring, tlen, 1) = temp_char;

     end SET_CHAR;



SET_OCTAL:
     procedure;

/*	This procedure is called to set up one ASCII character from the octal digits
*	that have been put into  "oct".
*/
	tlen = tlen + 1;				/* Build the translated ASCII character  from
					*  the three octal digits we have. */
	temp_char = byte (oct);
	substr (tstring, tlen, 1) = temp_char;		/* Then into translated string. */
	call RESET_OCTAL;				/* Make sure everything is reset. */
     end SET_OCTAL;



RESET_OCTAL:
     procedure;

/*	 This procedure is called to reset the octal work array and the octal count.
*/
	oct = 0;
	ocount = 0;

     end RESET_OCTAL;

     end oc_trans_input_;
