/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
get_temp_segments_:
     proc (a_caller, a_ptrs, a_code);

/* This program implements the temporary segment management features as used by the
   get_temp_segments_, release_temp_segments_, get_temp_segment_, release_temp_segment_,
   and list_temp_segments interfaces.  All of these entries are included in this
   external procedure as they must share static.

   Last Modified: (date and reason):

   11/21/75	by S. Webber (Initial coding)
   11/15/76	by Larry Johnson to add arguments to list_temp_segments
   08/29/77	by Melanie Weaver to add entry list_segnos
   11/2/77	by Richard A. Barnes to add get_temp_segment_ & release_temp_segment_
   03/20/81	by S. Herbst to clean up lts interface and make gts turn on safety switches.
   07/14/81	by S. Herbst to resinstate listing all when given no args.
   03/14/83	by E. N. Kittlitz to reset max length to sys_info$max_seg_size.
   04/14/83	by K. Loepere for bootload Multics
   83-12-01         by BIM to only reset max_length if neccessary.
   83-12-20	by C Spitzer. use copy of caller id for tests.
*/


/****^  HISTORY COMMENTS:
  1) change(87-04-27,Farley), approve(87-07-06,MCR7717),
     audit(87-07-13,Lippard), install(87-07-17,MR12.1-1043):
     Changed get_new_segments to return a non-zero error code when unable to
     get a good pointer to one of the bootload_temp_N segments.
                                                   END HISTORY COMMENTS */


/* Parameters */

dcl  a_caller char (*);
dcl  a_ptrs (*) ptr;
dcl  a_code fixed bin (35);

/* Automatic */

dcl  max_length fixed bin (19);
dcl  new_block_ptr ptr;
dcl  caller char (32);
dcl  array_ptr ptr;
dcl  j fixed bin;
dcl  n_segs fixed bin;
dcl  new_blocks fixed bin;
dcl  i fixed bin;
dcl  n_found fixed bin;
dcl  old_blocks fixed bin;
dcl  code fixed bin (35);
dcl  ename char (20);
dcl  ename2 char (32);
dcl  segno (4) char (1) defined (ename2) pos (22);
dcl  segment_number fixed bin;
dcl  found_it bit (1);
dcl  arg_count fixed bin;
dcl  arg_list_ptr ptr;
dcl  arg_ptr ptr;
dcl  arg_len fixed bin;
dcl  bootload_sw bit (1) aligned;

/* Based */

dcl  ptrs (n_segs) ptr based (array_ptr);
dcl  arg char (arg_len) based (arg_ptr);
dcl  1 octal_digits aligned based (addr (segment_number)),
       2 filler bit (24) unal,
       2 digit (4) bit (3) unal;
dcl  1 new_block (new_blocks) aligned based (new_block_ptr) like block;
dcl  1 block (n_blocks) aligned based (block_ptr),
       2 caller char (32),
       2 segptr ptr,
       2 name char (25),
       2 used bit (1);
dcl  area area based (areap);

/* Static */

dcl  block_ptr ptr static init (null);
dcl  areap ptr static init (null);
dcl  n_blocks fixed bin static init (0);

/* Builtin */

dcl  (addr, baseno, bin, character, dim, index, length, ltrim, max, null, substr) builtin;

/* Entries */

dcl  com_err_ entry options (variable);
dcl  hcs_$chname_seg entry (ptr, char (*), char (*), fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  unique_bits_ entry returns (bit (70));
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_safety_sw_seg entry (ptr, bit (1), fixed bin (35));
dcl  hcs_$get_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  hcs_$set_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  slt_manager$get_seg_ptr entry (char (32) aligned) returns (ptr);

/* External */

dcl  error_table_$argerr fixed bin (35) ext;
dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$illegal_activation fixed bin (35) ext;
dcl  sys_info$max_seg_size fixed bin (18) ext static;
dcl  sys_info$service_system bit (1) aligned ext;

/**/

/* Execution of get_temp_segments_ begins here */

	n_segs = dim (a_ptrs, 1);			/* get number of segments wanted */
	array_ptr = addr (a_ptrs);			/* get ptr to the array of ptrs */

gts_join:
	bootload_sw = ^sys_info$service_system;
	caller = a_caller;
	a_code = 0;
	n_found = 0;				/* initialize indicating we've found no free entries */
	if block_ptr = null then do;			/* we haven't yet gotten any segments */
	     n_blocks = n_segs;			/* so get the exact amount requested */
	     areap = get_system_free_area_ ();		/* get pointer to standard area to use */
	     allocate block in (area) set (block_ptr);	/* get the needed storage */
	     old_blocks = 0;			/* needed by get_new_segments routine */
	     call get_new_segments;			/* do the work in this subr */
	     return;
	     end;

	do i = 1 to n_blocks while (n_found < n_segs);	/* search for the necessary free segments */
	     if ^block (i).used then do;		/* we found another free one */
		block (i).used = "1"b;		/* mark entry as being used */
		block (i).caller = caller;		/* save name of whose using it */
		n_found = n_found + 1;
		ptrs (n_found) = block (i).segptr;
		end;
	end;
	if n_found < n_segs then do;			/* there weren't enough free ones */
	     new_blocks = n_blocks + n_segs - n_found;	/* get more storage, just large enough */
	     old_blocks = n_blocks;
	     if areap = null then areap = get_system_free_area_ ();
						/* get pointer to area */
	     allocate new_block in (area) set (new_block_ptr);
						/* get the needed storage */
	     new_block_ptr -> block = block;		/* copy the current structure */
	     free block in (area);
	     n_blocks = new_blocks;
	     block_ptr = new_block_ptr;
	     call get_new_segments;			/* get the needed segments */
	     end;

	return;

get_new_segments:
     proc;

dcl  (i, j) fixed bin;

	do i = old_blocks + 1 to n_blocks;		/* initialize the new entries */
	     block (i).used = "1"b;			/* the caller will use these blocks */
	     block (i).caller = caller;		/* ditto */
	     if bootload_sw then do;
		ename2 = "bootload_temp_" || ltrim (character (i));
		block (i).segptr = slt_manager$get_seg_ptr ((ename2));
		if block (i).segptr = null then do;
		     code = error_table_$illegal_activation;
		     call undo;
		     return;
		     end;
		end;
	     else do;
		ename2 = unique_chars_ (unique_bits_ ()) || ".temp.";
		ename = substr (ename2, 1, length (ename));
		call hcs_$make_seg ("", ename, "", 01110b, block (i).segptr, code);
		if code ^= 0 then do;
		     call undo;
		     return;
		     end;
		segment_number = bin (baseno (block (i).segptr), 18);
		do j = 1 to 4;
		     segno (j) = substr ("01234567", bin (digit (j), 3) + 1, 1);
		end;
		call hcs_$chname_seg (block (i).segptr, ename, ename2, code);
		if code ^= 0 then do;
		     call undo;
		     return;
		     end;

		call hcs_$set_safety_sw_seg (block (i).segptr, "1"b, code);
		end;

	     block (i).name = substr (ename2, 1, length (block (i).name));
	     n_found = n_found + 1;
	     ptrs (n_found) = block (i).segptr;
	end;

undo:
	proc;

	     a_code = code;
	     n_blocks = old_blocks;			/* reset to the way things were */
	     if ^bootload_sw
	     then do j = old_blocks + 1 to i - 1;	/* clean up the segments we already got */
		call hcs_$delentry_seg (block (j).segptr, code);
	     end;

	end;
     end;						/*						*/
get_temp_segment_:
     entry (a_caller, a_ptr, a_code);

dcl  a_ptr ptr parameter;

	n_segs = 1;				/* only 1 segment is being processed */
	array_ptr = addr (a_ptr);
	go to gts_join;				/*						*/

release_temp_segments_:
     entry (a_caller, a_ptrs, a_code);

	n_segs = dim (a_ptrs, 1);			/* get number of segments wanted */
	array_ptr = addr (a_ptrs);			/* get ptr to the array of ptrs */

rts_join:
	bootload_sw = ^sys_info$service_system;
	caller = a_caller;
	a_code = 0;
	do i = 1 to n_segs;				/* release each segment passed in */
	     if ptrs (i) ^= null then do;
		found_it = "0"b;			/* flag says we've not yet found this segment */
		do j = 1 to n_blocks while (^found_it); /* search for segment in array */
		     if block (j).used then do;	/* candidate, see if right one */
			if ptrs (i) = block (j).segptr then do;
						/* we found the given segment */
			     if block (j).caller ^= caller
			     then a_code = error_table_$argerr;
			     else do;		/* the right guy (as far as we care) */
				if ^bootload_sw then do;
				     call hcs_$truncate_seg (block (j).segptr, 0, code);
						/* truncate now */
				     if code ^= 0 then a_code = code;
						/* accumulate error */
				     call hcs_$get_max_length_seg (block (j).segptr, max_length, code);
				     if code ^= 0 then a_code = code;
				     if max_length ^= sys_info$max_seg_size then do;
					call hcs_$set_max_length_seg (block (j).segptr, (sys_info$max_seg_size),
					     code);
						/* ensure no funny business */
					if code ^= 0 then a_code = code;
						/* accumulate error */
					end;
				     end;
				block (j).used = "0"b;
						/* ditto */
				block (j).caller = "";
				ptrs (i) = null;
				found_it = "1"b;
				end;
			     end;
			end;
		end;
		if ^found_it then a_code = error_table_$argerr;
		end;
	end;
	return;

/**/
release_temp_segment_:
     entry (a_caller, a_ptr, a_code);

	n_segs = 1;				/* only 1 segment is being processed */
	array_ptr = addr (a_ptr);
	goto rts_join;				/*						*/


list_temp_segments:
     entry;

	if n_blocks = 0 then do;			/* nothing ever allocated */
	     call ioa_ ("No temporary segments.");
RETURN:
	     return;
	     end;
	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, "list_temp_segments");
	     return;
	     end;
	call cu_$arg_list_ptr (arg_list_ptr);

	begin;					/* to allocate storage */

dcl  treq char (32);
dcl  req (max (1, arg_count)) char (32);
dcl  nreq fixed bin;				/* number of names requested */
dcl  all_sw bit (1);				/* set if -all given */
dcl  (i, j, cnt) fixed bin;
dcl  dup_sw bit (1);

	     nreq = 0;
	     all_sw = "0"b;
	     do i = 1 to arg_count;			/* get table of requests */
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, arg_list_ptr);

		if index (arg, "-") = 1
		then if arg = "-all" | arg = "-a"
		     then all_sw = "1"b;
		     else do;
			call com_err_ (error_table_$badopt, "list_temp_segments", "^a", arg);
			go to RETURN;
			end;

		else do;
		     dup_sw = "0"b;			/* be sure not given dup args */
		     treq = arg;
		     do j = 1 to nreq;
			if req (j) = treq then dup_sw = "1"b;
		     end;
		     if ^dup_sw then do;		/* new one */
			nreq = nreq + 1;
			req (nreq) = treq;
			end;
		     end;
	     end;

	     if all_sw then do;
		if nreq > 0 then do;
		     call com_err_ (0, "list_temp_segments", "-all is inconsistent with name arguments.");
		     go to RETURN;
		     end;
		end;

	     if nreq = 0 then do;			/* if no special requests */
		cnt = 0;
		do i = 1 to n_blocks;		/* count free segs */
		     if ^block.used (i) then cnt = cnt + 1;
		end;
		call ioa_ ("^/^-^d Segment^[s^],  ^d Free^/", n_blocks, (n_blocks ^= 1), cnt);
		end;
	     else do;				/* count segments that match requests */
		cnt = 0;
		do i = 1 to n_blocks;
		     if block.used (i)
		     then do j = 1 to nreq;
			if block.caller (i) = req (j) then cnt = cnt + 1;
		     end;
		end;
		call ioa_ ("^/^-^d Segment^[s^] used.^/", cnt, (cnt ^= 1));
		end;

	     do i = 1 to n_blocks;			/* now print them */
		if all_sw then go to print_it;
		else if block.used (i) then do;
		     if nreq = 0
		     then go to print_it;
		     else do j = 1 to nreq;
			if block.caller (i) = req (j) then go to print_it;
		     end;
		     end;
		go to next_block;
print_it:
		call ioa_ ("^a  ^[^a^;(free)^]", block.name (i), block.used (i), block.caller (i));
next_block:
	     end;
	     call ioa_ ("");
	end;
	return;

/**/

list_segnos:
     entry (struc_ptr);

dcl  struc_ptr ptr;
dcl  1 segno_struc aligned based (struc_ptr),
       2 num_segs fixed bin,
       2 segno (n_blocks) fixed bin;


	if (block_ptr = null) | (areap = null) then do;
	     struc_ptr = null;
	     return;
	     end;

	allocate segno_struc in (area) set (struc_ptr);
	segno_struc.num_segs = n_blocks;
	do i = 1 to n_blocks;
	     segno_struc.segno (i) = bin (baseno (block (i).segptr), 15);
	end;

	return;


     end get_temp_segments_;
