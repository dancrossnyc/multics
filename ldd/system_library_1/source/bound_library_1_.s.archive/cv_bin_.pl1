/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/* cv_bin .......... procedure to convert binary integer to ascii in decimal, octal or other specified base */
/* Converted to v2pl1, Nov 73, RE Mullen */


cv_bin_:	procedure(a_n, a_string, a_base);


declare	a_n fixed bin(17),				/* binary integer to be converted */
	a_string char(12) aligned,			/* character string in which to return ascii */
	a_base fixed bin(17);				/* conversion base */

declare (addr, divide, fixed, mod) builtin;

declare	base fixed bin(17),				/* temporary storage */
	p ptr,
	(n, i, z) fixed bin(17),
	(minus bit(1),
	bin_4 fixed bin (4)) aligned;

declare   digits (0:15) char (1) unal init ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f") static options (constant);

declare	word(3) char(4) based aligned;			/* based array for initializing a_string */

declare 1 c based aligned,				/* based, aligned, packed character array */
	2 a(0:11) char(1) unaligned;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


	base = a_base;				/* primary entry, initialize conversion base */
/*	if base > 10 | base <= 0
	then signal condition(cv_bin_base_error); */
	go to common;


dec:	entry(a_n, a_string);			/* entry to convert to decimal base */

	base = 10;				/* initialize conversion base to 10 */
	go to common;


oct:	entry(a_n, a_string);			/* entry to convert to octal base */

	base = 8;				/* initialize conversion base to 8 */


common:	p = addr(a_string);				/* get pointer to string (must be alligned) */
	p -> word(1), p -> word(2), p -> word(3) = "    ";	/* initialize output string to blanks */
	n = a_n;

	if n < 0					/* check for and adjust negative number */
	then do;

	     n = -n;
	     minus = "1"b;
	     end;

	else minus = "0"b;

	z = -1;					/* Initialize to force at least one traversal of loop */

	do i = 11 by -1 to 0 while(n ^= z);			/* convert into string, last digit(11) first */

	bin_4 = fixed(mod(n,base),4);
	p -> c.a(i) = digits (bin_4);
	n = divide(n, base, 17, 0);

	z = 0;			/* Clear flag that forces "0" if zero value */

	end;

	if minus
	then if i >= 0		/* value of "i" is correct for insertion of "-" */
	     then p -> c.a(i) = "-";		/* magnitude converted, add - sign if necessary */
/*	     else signal condition(cv_bin_minus_or_size); */

end cv_bin_;
