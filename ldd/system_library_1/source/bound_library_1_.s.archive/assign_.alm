" ******************************************************
" *                                                    *
" * Copyright, (C) Honeywell Bull Inc., 1987           *
" *                                                    *
" * Copyright (c) 1987 by Massachusetts Institute of   *
" * Technology and Honeywell Information Systems, Inc. *
" *                                                    *
" * Copyright (c) 1972 by Massachusetts Institute of   *
" * Technology and Honeywell Information Systems, Inc. *
" *                                                    *
" ******************************************************

"
"	Modified: 01/04/79 by PCK to fix bug 1809
"	Modified: 12 July 79 by JRD to add computational_ entry pt.
"	Modified: 12 Nov 79 by JRD fix overpunched table entries

"     Following 23 Jan 84 Modifications covered by MTB672

"	Modified: 23 Jan 84 by TGO fix get_picture_type (pict_type_to_etype has length 0)
"	Modified: 23 Jan 84 by TGO update computational_ to use re-written
"	     any_to_any_ which understands uns, ts_overp, ls_overp.
"	Modified: 23 Jan 84 by TGO to use desc9a, rather than desc6a.
"	Modified: 23 Jan 84 by TGO to recover lp correctly using * tag modification
"	Modified: 23 Jan 84 by TGO to utilize picture's precision and scale
"	     for ata call.  Otherwise we blow conversion to common type.

	entry	arith_to_char_
	entry	arith_to_bit_
	entry	bit_to_char_
	entry	char_to_bit_
	entry	arith_to_arith_
	entry	char_to_arith_
	entry	bit_to_arith_
	entry	assign_
	entry	assign_round_
	entry	assign_truncate_
	entry	char_to_numeric_
	entry	computational_
"
	tempd	work(100)

" the following temps are only used by the computational_ entry pt.
" although I dont object if others use them, too.
"
	temp	src_temp(256)	"if source must go to int. form
	temp	tar_temp(256)	"if target must go to int. form
	temp	type_save		"save internal type of target
	temp	temp1		"a temp target for EIS instructions
	tempd	str_ptr_save	"save one of the structure ptrs
	tempd	arglist(4)	"for calling picture conversion  utils
"Include Files
	include	stack_frame
	include	stack_headerConversion Calls.


arith_to_char_:
arith_to_bit_:
	push
	lda	stack_frame.support_bit,dl
	orsa	sp|stack_frame.flag_word
	lda	0|4,*		target descriptor
	lrl	28
	ana	=o177,dl
	eax6	0,al
	lda	0,dl
	qls	4
	lls	24
	sta	work
	lda	0|8,*		source descriptor
	lrl	28
	ana	=o177,dl
	eax7	0,al
	lls	28+12
	lrs	24
	qrs	6
	lls	18
go:	sta	work+1
	epp1	0|2,*		target
	epp3	0|6,*		source
	epp5	work
	epp2	*
	spbp2	sp|38		text base ptr
	ldaq	work
	tsx0	lp|ata,*
	epbp7	sp|0
	return




bit_to_char_:
char_to_bit_:
	push
	lda	stack_frame.support_bit,dl
	orsa	sp|stack_frame.flag_word
	lda	0|4,*		target descriptor
	lrl	28
	ana	=o177,dl
	eax6	0,al
	lda	0,dl
	qls	4
	lls	24
	sta	work
	lda	0|8,*		source descriptor
	lrl	28
	ana	=o177,dl
	eax7	0,al
	lda	0,dl
	qls	4
	lls	24
	tra	go
"



arith_to_arith_:
	push
	lda	stack_frame.support_bit,dl
	orsa	sp|stack_frame.flag_word
	lda	0|4,*		target descriptor
	lrl	28
	ana	=o177,dl
	eax6	0,al
	lls	28+12
	lrs	24
	qrs	6
	lls	18
	sta	work
	lda	0|8,*		source descriptor
	lrl	28
	ana	=o177,dl
	eax7	0,al
	lls	28+12
	lrs	24
	qrs	6
	lls	18
	tra	go




char_to_arith_:
bit_to_arith_:
	push
	lda	stack_frame.support_bit,dl
	orsa	sp|stack_frame.flag_word
	lda	0|4,*		target descriptor
	lrl	28
	ana	=o177,dl
	eax6	0,al
	lls	28+12
	lrs	24
	qrs	6
	lls	18
	sta	work
	lda	0|8,*		source descriptor
	lrl	28
	ana	=o177,dl
	eax7	0,al
	lda	0,dl
	qls	4
	lls	24
	tra	go
"


assign_:	eax0	ata
	push
	lda	stack_frame.support_bit,dl
	orsa	sp|stack_frame.flag_word
	lxl6	ap|4,*		target type
	lxl7	ap|10,*		source type
	lda	ap|6,*		target length
	ldq	ap|12,*		source length
	epp1	ap|2,*		target ptr
	epp1	1|0,*
	epp3	ap|8,*		source ptr
	epp3	3|0,*
	epp5	work
	cmpb	(x6),(0)		is target varying
	descb	varying_info,1
	zero
	tze	2,ic
	epp1	1|1		yes, skip over length
	cmpb	(x7),(0)		is source varying
	descb	varying_info,1
	zero
	tze	2,ic
	epp3	3|1		yes, skip over length
	epp2	*
	spbp2	sp|38
	tsx0	lp|0,0*
	epbp7	sp|0
	return
"
assign_round_:
	eax0	ata_round
	tra	assign_+1
"
assign_truncate_:
	eax0	ata_truncate
	tra	assign_+1
"
char_to_numeric_:
	push
	lda	stack_frame.support_bit,dl
	orsa	sp|stack_frame.flag_word
	epp3	ap|8,*		source ptr
	epp3	3|0,*
	epp1	ap|2,*		target ptr
	epp1	1|0,*
	ldq	ap|10,*		source length
	epp5	work
	epp2	*
	spbp2	sp|38
	tsx0	lp|ctn_link,*
	epbp7	sp|0
	epp0	sp|26,*
	sta	ap|6,*		precision & scale
	stz	ap|4,*
	sxl7	ap|4,*		type
	return
"
varying_info:
	oct	0,031400000000,0
"
	link	ata,<any_to_any_>|[any_to_any_]
	link	ata_round,<any_to_any_>|[any_to_any_round_]
	link	ata_truncate,<any_to_any_>|[any_to_any_truncate_]
	link	ctn_link,<any_to_any_>|[char_to_numeric_]

"

" Convert any computational type to any other computational type

" Most types are handled directly by any_to_any_, but certain types are
" handled by us.  If the source is "special" we convert it to a type that
" any_to_any_ can handle.  If the target is "special", we convert to a close
" type, then convert to final type ourself.

" Because there is certain to be one call to any_to_any_, we need not worry
" about scale any_to_any_ will deal with it for us.



	equ	target_str_ptr_arg,2	" offset from ap for arg
	equ	source_str_ptr_arg,4
	equ	error_code_arg,6

"     The computational_ entry point has three arguments, the first
" two args, are each a structure given by computational_data.incl.pl1.  The
" last argument is a standard error code.
"
"     dcl 1 computational_data 	aligned based,
"           2 address		ptr aligned,
"           2 data_type		fixed bin (17),
"           2 flags			aligned,
"             3 packed		bit (1) unal,
"             3 pad			bit (35) unal,
"           2 prec_or_length		fixed bin (24),
"           2 scale			fixed bin (35),
"           2 picture_image_ptr	ptr aligned;

"
	equ	address_offset,0
	equ	data_type_offset,2
	equ	flags_offset,3
	equ	prec_or_length_offset,4
	equ	scale_offset,5
	equ	picture_image_ptr_offset,6



"REGISTER USAGE
				"x0 random
				"x1 random
				"x2 random
				"x3 random
	equ	maj_call,4	"x4 return offset for major subroutines
	equ	min_call,5	"x5 return offset for minor subroutines
	equ	tar_type,6	"x6 type code of target
	equ	src_type,7	"x7 type code of source

				"pr0 is ap
	equ	tar_ptr,1		"pr1 -> target
	equ	src_str_pr,2	"pr2 -> source structure
	equ	src_ptr,3		"pr3 -> source
				"pr4 is lp
	equ	tar_str_pr,5	"pr5 -> target structure
				"pr6 is sp
				"pr7 is sb

" A holds target precision, Q holds source precision


" There are two levels of subroutines in this program - major and minor.  Each
" level has a dedicated index register used for saving return linkage.  No "
" minor routine calls any other routine, no major routine calls any but a "
" minor routine.  Scale and precision for source and target are setup in the "
" target buffer, permitting special source/target handling to modify initial
" settings.  This is used for PICTURE processing.


arg_header:
	oct	000006000004		" 3 args, inter_seg call
	oct	0			" no descriptors


	link	ata,any_to_any_$any_to_any_
"Computational assignment/source

"     This entry will accept any valid MULTICS type for a source or target,
"     including picture items.


computational_:
	push

	stz	ap|error_code_arg,*			" optimism
	epp	src_str_pr,ap|source_str_ptr_arg,*	" ptr to arg (ptr to str)
	epp	src_str_pr,src_str_pr|0,*		" get ptr to str

	lxl	0,src_str_pr|data_type_offset
	tsx	min_call,get_internal_type		"into x0

"     Pre-set source precision and scale.

	ldq	src_str_pr|scale_offset
	qls	18
	orq	src_str_pr|prec_or_length_offset
	stq	tar_temp+1			" save scale/prec
	epp	src_ptr,src_str_pr|address_offset,*
	tsx	maj_call,source_dispatch_table,x0*

"source has been converted, if necessary
"src_ptr and src_type are LIVE - they must be preserved
"the prec and scale are that of the source

	epp	tar_str_pr,ap|target_str_ptr_arg,*
	epp	tar_str_pr,tar_str_pr|0,*

	lxl	0,tar_str_pr|data_type_offset
	tsx	min_call,get_internal_type
	stx	0,type_save

"     Pre-set target precision and scale.

	lda	tar_str_pr|scale_offset
	als	18			" get scale in high half
	ora	tar_str_pr|prec_or_length_offset	" this could be > 16383 for string
	sta	tar_temp
	epp	tar_ptr,tar_str_pr|address_offset,*
	tsx	maj_call,target_dispatch_table,x0*

"tar_ptr and tar_type are LIVE
" it is known that any_to_any_ can handle what we have
"now set up for the call to any_to_any_
"
" pr1 -> target		pr3 -> source
"  x6    target type	 x7    source type
"   A    target encoded prec.   Q    source encoded prec
"                    pr5 -> work area
"
"  a data type to any_to_any_ is a standard Multics type * 2
" with the LSB set if the data is 'packed'
"    we must shift tar_type and src_type

	stx	tar_type,temp1
	adlx	tar_type,temp1		" times 2
	szn	tar_str_pr|flags_offset	"packed is in MSB
	tpl	2,ic
	adx	tar_type,1,du		"set LSB for unaligned

	stx	src_type,temp1
	adlx	src_type,temp1
	szn	src_str_pr|flags_offset
	tpl	2,ic
	adx	src_type,1,du

	epp	5,*
	spbp	5,sp|38			"calling a pl1 operator!
	epp	5,work
	lda	tar_temp			" pick up target scale/len
	ldq	tar_temp+1		" pick up source scale/len
	tsx0	lp|ata,*			"use x0 for pl1_operator callProcessing after any_to_any_ conversion.

"everything but ap and sp is now clobbered - recover

	epbpsb	sp|0

	epp	tar_str_pr,ap|target_str_ptr_arg,*
	epp	tar_str_pr,tar_str_pr|0,*
	lda	tar_str_pr|prec_or_length_offset
	epp	tar_ptr,tar_str_pr|address_offset,*
	ldx	0,type_save
	tra	final_dispatch_table,x0*



"
"	here are the dispatch tables
"

	equ	normal_,0
	equ	varying,1
	equ	picture,2
	equ	not_com,3


source_dispatch_table:
	arg normal_src			"any_to_any_ can handle it
	arg varying_src			"must bump address past varying word
	arg picture_src
	arg not_comput_type

target_dispatch_table:
	arg normal_tar
	arg varying_tar
	arg picture_tar
	arg not_comput_type

final_dispatch_table:
	arg just_go
	arg just_go
	arg cnv_to_picture
	arg not_comput_type
"Major processing routines.

" Now come the major routines - first those that convert from source to
" intermediate.  Then those that prepare for any_to_any_ to convert to
" intermediate.  Then those tra'd to to finish up.


not_comput_type:
	lda	error_table_$bad_conversion
	sta	ap|error_code_arg,*
	return


varying_src:
	epp	src_ptr,src_ptr|1
normal_src:
	lxl	src_type,src_str_pr|data_type_offset
	tra	0,maj_call


picture_src:

	ldaq	arg_header
	staq	arglist
	spri5	str_ptr_save		"must preserve 2
	epp5	src_temp
	spri5	arglist+2
	epp5	src_str_pr|picture_image_ptr_offset,*
	spri5	arglist+4
	epp5	src_str_pr|address_offset,*
	spri5	arglist+6

	call	unpack_picture_$unpack_picture_(arglist)

	epp5	str_ptr_save,*
	ldx	3,picture_image.type_word,du
	ldq	src_str_pr|picture_image_ptr_offset,*3
	tsx	min_call,get_picture_type
	eax	src_type,0,ql		"what was pic converted to?
	epp	src_ptr,src_temp

"     Get precision and scale of source.

	epp2	src_str_pr|picture_image_ptr_offset,*	" pointer to picture_image
	lda	pr2|picture_image.prec_word
	ars	picture_image.prec_shift	" position
	ana	picture_image.prec_mask,dl	" isolate
	sta	tar_temp+1
	lda	pr2|picture_image.scale_word
	ars	picture_image.scale_shift	" position
	ana	picture_image.prec_mask,dl	" isolate
	als	18
	orsa	tar_temp+1			" integrate
	tra	0,maj_call
"Conversion of any_to_any_ output to final target

"  routines to set up for any_to_any_ call to int. target


varying_tar:
	epp	tar_ptr,tar_ptr|1
normal_tar:
	lxl	tar_type,tar_str_pr|data_type_offset
	tra	0,maj_call


picture_tar:
	ldx	3,picture_image.type_word,du
	ldq	tar_str_pr|picture_image_ptr_offset,*x3
	tsx	min_call,get_picture_type	"what is most like the target?
	eax	tar_type,0,ql
	epp	tar_ptr,tar_temp

"     Get precision and scale of target.

	epp2	tar_str_pr|picture_image_ptr_offset,*	" pointer to picture_image
	lda	pr2|picture_image.prec_word
	ars	picture_image.prec_shift	" position
	ana	picture_image.prec_mask,dl	" isolate
	sta	tar_temp
	lda	pr2|picture_image.scale_word
	ars	picture_image.scale_shift	" position
	ana	picture_image.prec_mask,dl	" isolate
	als	18
	orsa	tar_temp			" integrate
	tra	0,maj_call

"
" now the final routines
"  note that lp must be restored - any_to_any_ has clobbered it
"

just_go:
	return				"target was reachable by any_to_any_



cnv_to_picture:


" 	we must carefully avoid clobberring pr5 it is the tar_str_pr
	epp	lp,sp|stack_frame.lp_ptr,*	"must reload, been clobbered

	ldaq	arg_header
	staq	arglist
	spri1	arglist+2			"target ptr
	epp2	tar_str_pr|picture_image_ptr_offset,*
	spri2	arglist+4
	epp	2,tar_temp
	spri2	arglist+6

	call	pack_picture_$pack_picture_(arglist)

	return

"Minor routines for conversion of data types and picture types.

get_internal_type:

"given external data type in x0
"return internal type in x0

	stz	temp1
	cmpx0	type_index_limit,du		See if we know it
	tpnz	not_comput_type		Too big for table
	mlr	(x0),(pr)
	desc9a	type_index,1
	desc9a	temp1(1),1
	ldx	0,temp1
	tra	0,min_call

get_picture_type:
"	call with picture_image.type_word in Q
"	return equivalent external type in QL

	qrs	picture_image.type_shift
	stz	temp1
	cmpq	pict_type_to_etype_limit,dl	Is it in table?
	tpnz	not_comput_type
	mlr	(ql),(pr)
	desc9a	pict_type_to_etype,1
	desc9a	temp1(3),1
	ldq	temp1
	tra	0,min_call

pict_type_to_etype:
"	4 entries per word
"	in octal 
"
	macro	pict_type
	vfd	9/&1,9/&2,9/&3,9/&4
	&endm

	maclist	object

	pict_type	00,00,00,00	" 0 - 3
	pict_type 00,00,00,00	" 4 - 7
	pict_type 00,00,00,00	" 8 - 11
	pict_type 00,00,00,00	" 12 - 15
	pict_type 00,00,00,00	" 16 - 19
	pict_type 00,00,00,00	" 20 - 23
	pict_type 21,09,11,10	" 24 - 27
	pict_type 12,00,00,00	" 28 - 31
	pict_type 00,00,00,00	" 32 - 35
	pict_type 00,00,00,00	" 36 - 39
	pict_type 00,00,00,00	" 40 - 43
	pict_type 00,00,00,00	" 44 - 47
	pict_type 00,00,00,00	" 48 - 51
	pict_type 00,00,00,00	" 52 - 55
	pict_type 00,00,00,00	" 56 - 59
	pict_type 00,00,00,00	" 60 - 63
	pict_type 00,00,00,00	" 64 - 67
	pict_type 00,00,00,00	" 68 - 71
	pict_type 00,00,00,00	" 72 - 75
	pict_type 00,00,00,00	" 76 - 79
	pict_type 00,00,00,00	" 80 - 83
	pict_type 00,00,00,00	" 84 - 87

	equ	pict_type_to_etype_limit,87Type conversion and picture defintion


"	map all data types (0 -87)
"	into internal type code
"	4 bits per code
"	internal type is used as index into dispatch tables

	macro	type_table
	vfd	9/&1,9/&2,9/&3,9/&4
	&endm

type_index:
	type_table normal_,normal_,normal_,normal_	" 00 - 03
	type_table normal_,normal_,normal_,normal_	" 04 - 07
	type_table normal_,normal_,normal_,normal_	" 08 - 11
	type_table normal_,not_com,not_com,not_com	" 12 - 15
	type_table not_com,not_com,not_com,normal_	" 16 - 19
	type_table varying,normal_,varying,not_com	" 20 - 23
	type_table not_com,not_com,not_com,not_com	" 24 - 27
	type_table not_com,normal_,normal_,not_com	" 28 - 31
	type_table not_com,normal_,normal_,normal_	" 32 - 35
	type_table normal_,normal_,normal_,normal_	" 36 - 39
	type_table normal_,normal_,normal_,normal_	" 40 - 43
	type_table normal_,normal_,normal_,normal_	" 44 - 47
	type_table normal_,normal_,normal_,not_com	" 48 - 51
	type_table not_com,not_com,not_com,not_com	" 52 - 55
	type_table not_com,not_com,not_com,not_com	" 56 - 59
	type_table not_com,not_com,not_com,picture	" 60 - 63
	type_table not_com,not_com,not_com,not_com	" 64 - 67
	type_table not_com,not_com,not_com,not_com	" 68 - 71
	type_table not_com,not_com,not_com,not_com	" 72 - 75
	type_table not_com,not_com,not_com,not_com	" 76 - 79
	type_table not_com,normal_,normal_,normal_	" 80 - 83
	type_table normal_,normal_,normal_,not_com	" 84 - 87

	equ	type_index_limit,87

	include	picture_image

	end
