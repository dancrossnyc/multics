" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"
"	T  R  A  N  S  L  A  T  E    B  C  D    T  O    A  S  C  I  I
"
"
"  This routine will translate a number of bcd characters to ascii. It
"  takes three parameters. Parameter 1 is a pointer to an aligned
"  bcd string. Parameter 2 is the length of that string (number of bcd
"  characters). Parameter 3 is a pointer to an aligned receiving field
"  for the translated ascii output.
"
"  The entry point, bcd_to_ascii_, takes a bit string as input,
"  and produces a character string of length divide(length(input), 6, 24)
"  as output.
"
"  PL/I Usage:
"  dcl bcd_to_ascii_ entry(bit(*), char(*))
"  call bcd_to_ascii_ (input bits, output chars)
"
"  The entry point, ascii_to_bcd_, takes a character string
"  as input and produces a bit string of length divide (length (output),6,24)
"  as output. If the output string has more bcd char positions
"  than there are input chars to convert, then the output is blank filled.
"
"  PL/1 Usage:
"
"  dcl  ascii_to_bcd_ entry (char (*), bit (*));
"  call ascii_to_bcd_ (input_chars, output_bits);
"
"	WRITTEN BY DICK SNYDER JANUARY 3,1972
"	MODIFIED BY T. CASEY JUNE 1974, AUGUST 1974
"	REWRITTEN BY D. KAYDEN DECEMBER 1974
"         ENTRY POINT ADDED BY R.J.C.KISSEL 11/09/76
"	MODIFIED BY R.H. MORRISON  5/19/76
"	MODIFIED BY R.J.C. KISSEL 09/19/77 to pad with blanks
"	MODIFIED BY J. A. BUSH 11/10/82 to add ascii_to_bcd_ entry point
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	name	bcd_to_ascii_
	entry	gcos_cv_gebcd_ascii_
	segdef	bcd_to_ascii_
	segdef	ascii_to_bcd_

gcos_cv_gebcd_ascii_:
	eppbp	ap|2,*		bp->input data
	eppbp	bp|0,*
	lda	ap|4,*		get char count
	eppap	ap|6,*		ap->output buffer
	eppap	ap|0,*
	mvt	(pr,rl),(pr,rl)
	desc6a	bp|0,al
	desc9a	ap|0,al
	arg	bta_tab
	short_return
bcd_to_ascii_:
	epp1	ap|2,*		address of source string to pr1
	epp3	ap|4,*		address of target string to pr3
	ldx3	0,du		set x3 not to skip parent pointer if none
	lxl2	ap|0		load arg list code value
	canx2	=o0000004,du	check for no parent pointer (code 4)
	tnz	*+2		transfer if no parent pointer
	ldx3	2,du		parent pointer, set x3 to skip it
	ldq	ap|6,x3*		load source string descriptor
	anq	mask		drop all but string size  bits
	div	6,dl		get length of input in BCD characters
	lda	ap|8,x3*		load target string descriptor
	ana	mask		drop all but string size bits
	even			"EIS address must be even
	mvt	(pr,rl),(pr,rl),fill(020)	now do the bcd to ascii
	desc6a	1|0,ql
	desc9a	3|0,al
	arg	bta_tab
	short_return

ascii_to_bcd_:			" ascii to bcd entry
	epp1	ap|2,*		address of source string to pr1
	epp3	ap|4,*		address of target string to pr3
	ldx3	0,du		set x3 not to skip parent pointer if none
	lxl2	ap|0		load arg list code value
	canx2	=o0000004,du	check for no parent pointer (code 4)
	tnz	*+2		transfer if no parent pointer
	ldx3	2,du		parent pointer, set x3 to skip it
	ldq	ap|8,x3*		load target string descriptor
	anq	mask		drop all but string size  bits
	div	6,dl		get length of target in BCD characters
	lda	ap|6,x3*		load source string descriptor
	ana	mask		drop all but string size bits
	even			"EIS address must be even
	mvt	(pr,rl),(pr,rl),fill(040)	now do the ascii to bcd
	desc9a	1|0,al
	desc6a	3|0,ql
	arg	atb_tab
	short_return

mask:	oct	000077777777
	even

bta_tab:	aci	X0123456789[#@:>?X
	aci	X abcdefghi&.](<\X
	aci	X^jklmnopqr-$*);'X
	aci	X+/stuvwxyz_,%="!X

atb_tab:
" ascii chars 000 - 037 (8) - invalid bcd chars set to bcd "?" (ignore char)
	oct	017017017017,017017017017,017017017017,017017017017
	oct	017017017017,017017017017,017017017017,017017017017
" ascii chars 040 - 057 (8) = " !"#$%&'()*+,-./"
	oct	020077076013,053074032057,035055054060,073052033061
" ascii chars 060 - 077 (8) = "0123456789:semicolon<=>?"
	oct	000001002003,004005006007,010011015056,036075016017
" ascii chars 100 - 117 (8) = "@ABCDEFGHIJKLMNO"
	oct	014021022023,024025026027,030031041042,043044045046
" ascii chars 120 - 137 (8) = "PQRSTUVWXYZ[\]^_"
	oct	047050051062,063064065066,067070071012,037034040072
" ascii chars 140 - 157 (8) = "`abcdefghijklmno"
	oct	017021022023,024025026027,030031041042,043044045046
" ascii chars 160 - 177 (8) = "pqrstuvwxyz{|}~PAD"
	oct	047050051062,063064065066,067070071012,040034017017
	end
