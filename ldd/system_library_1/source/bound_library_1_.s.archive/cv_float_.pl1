/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-28,Vu), approve(89-04-28,MCR8099), audit(89-06-12,Lee),
     install(89-09-29,MR12.3-1074):
     Modify cv_float_.pl1 to accept a string that contains a decimal
     point followed by an exponential character.
     The following builtin functions are now declared explicitly:
     addr, divide, fixed, float, length, mod, substr.
                                                   END HISTORY COMMENTS */


cv_float_:	proc(string, code) returns (float bin);

	/* This procedure converts a number in character string form into floating point form */
	/* initially coded by M Weaver 23 June 1970 */
	/* last modified by M. Weaver 28 August 1970 18:25 */
	/* minor bug fix by steve tepper 24 nov 71 */
	/* Modified 09/04/84 by Jim Lippard to use returns (float bin) */

	dcl (len, i, j, k, cstart, exp, digit) fixed bin;
	dcl code fixed bin (35);
	dcl cv_dec_check_ entry (char(*), fixed bin(35)) returns (fixed bin);
	dcl fltval float bin(63);			/* tempoary for accumulating number */
	dcl rflt1 float bin, rflt2 float bin(63);	/* return arguments */

	dcl fxval fixed bin(35);
	dcl (neg_bit, dbsw) bit(1) aligned;		/* indicates positive or negative number */
	dcl lsw bit(1) aligned int static init("1"b);	/* indicates whether to initialize labels */
	dcl p ptr;
	dcl string char(*) parm;			/* contains input string */

	dcl retlab(0:1) label local int static;
	dcl fini(0:1) label local int static;
	dcl 1 c based,				/* used to reference string and digit */
		2 s(0:63) char(1);

	dcl (max, rank, verify) builtin;
          dcl (addr, divide, fixed, float, length, mod, substr) builtin;


/* * * * * * * * * * * * * * * * * * * * * * * * * * */

	rflt1 = 0.0e0;
	dbsw = "0"b;			/* single precision argument */
	go to init;

cv_float_double_:	entry(string, code) returns (float bin(63));

	rflt2 = 0.0e0;
	dbsw = "1"b;			/* double precision argument */

	/* initialize */
init:	p = addr(digit);

	if lsw then do;
		retlab(0) = ret0;		retlab(1) = ret1;
		fini(0) = finish;		fini(1) = ret1;
		lsw = "0"b;
		end;

	digit, code, fltval, exp = 0;
	neg_bit = "0"b;			/* assume positive */
	len = length(string) - 1;		/* get length of input string */
	p = addr(string);
	cstart = verify (string, " ") - 1;	/* skip over leading blanks */
	cstart = max (0, cstart);
	k = 0;				/* want first set of labels */
	go to convert;	/* evaluate part of number before decimal point, if any, or before exponent */

ret0:			/* get here if we are still in the middle of string */
	if p->c.s(i) ^= "." then go to tryexp;	/* here the only non-digit can be "." */
	k = 1;				/* use second set of labels */
	cstart = i + 1;			/* continue with next character */
	go to convert;

ret1:
	if i > cstart then exp = cstart - i;		/* had a fraction */
	if i > len then go to reduce;			/* there is no explicit exponent */
	if p->c.s(i) = " " then go to reduce;

tryexp:	if p->c.s(i) ^= "e" then go to error;		/* explicit exponent must start with "e" */

/**** vp: phx19667; a string that contains the decimal point followed
       immediately by an exponential character (ie. 1.e3) is valid.     ****/

	if i=len then go to error;	                    /* can't have a number ending in "e" */
          if i=cstart then do;                              /* can't have a number starting in "e" or ".e" or "+.e" or "-.e" */
             if i=0 | i =1 then go to error;              
	   if i=2 & (p->c.s(0) = "-" | p->c.s(0) = "+") then go to error;
          end;
     
	digit = cv_dec_check_(substr(string, i+2), code);	/* get value of exponent which is an integer */
	if code > 0 then do;			/* check code from cv_dec_check_ */
		code = i + code + 1;	/* set code to appropriate value for floating pt. number */
		return ((0));
		end;
	exp = exp + digit;			/* add explicit to implicit exponent */

reduce:				/* finish evaluating the number */
	if fltval < 1.0e8 then do;		/* temporary value is single precision */
	/* many fractions, such as .25 and .0625, can be expressed exactly in binary form but
	   this won't happen with ordinary floating point conversion; thus for up to 5 iterations,
	   we will divide by 5 (fixed point), multiply by 10 and divide by 2 (floating point) */

		fxval = fixed(fltval, 35);
		do j = 1 to 5 while(mod(fxval,5) = 0);
			fxval = divide(fxval,5,35,0);
			exp = exp + 1;
			end;
		fltval = float(fxval, 63);
		end;
	else j = 1;			/* number can't necessarily be represented  exactly
					   as a floating point number in binary form */

	/* Because the decimal places are kept in the exponent, and because of the above adjustment
	   for even powers of 2, the exponent may appear to be out of range even though the input
	   number is within range.  In this case, the number is partially evaluated first.  */

	if exp > 38 then do;
		fltval = fltval * 10.0e0 ** 38;
		exp = exp - 38;
		end;
	if exp < -38 then do;
		fltval = fltval * 10.0e0 ** -38;
		exp = exp + 38;
		end;

	/* finish evaluating number;  using the expontiation operator, **, produces results different
		from dividing ot multiplying by 10. */
	if exp ^= 0 then fltval = fltval * 10.0e0 ** exp;
	if j > 1 then fltval = fltval / 2.0e0 ** (j-1);


finish:
	if neg_bit then fltval = -fltval;
	if dbsw then do;
	     rflt2 = fltval;			/* return double precision */
	     return (rflt2);
	end;
	else do;
	     rflt1 = fltval;			/* return single precision */
	     return (rflt1);
	end;

/* section to actually do the conversion from character string to floating point */

convert:
	do i = cstart to len;
		digit = rank (p->c.s(i));		/* copy character into digit */
		if digit >= 48 then do;		/* could be a digit */
			if digit > 57 then if digit = 101 then go to retlab(k);	/* "e" */
					else go to error;		/* not a digit */
			fltval = fltval * 10 + digit - 48;	/* update temporary */
			end;
		else do;			/* not a digit; check for special characters */
			if digit = 46 then go to retlab(k);	/* decimal point or error */
			if digit = 32 /* blank */ then if substr(string,i+1) = " "	/* ignore trailing blanks */
						then go to fini(k);
						else go to error;
			if k = 0 then if i = cstart then do;	/* look for + or - only at beg of number */
				if digit = 45 then neg_bit = "1"b;	/* minus */
				else if digit ^= 43 /* plus */ then go to error;
				go to end_conv;			/* continue processing string */
				end;
			go to error;		/* bad character */
			end;
end_conv:	end;			/* end of loop on characters */
	go to fini(k);

error:	code = i + 1;			/* set error code */
	return ((0));

	end cv_float_;
