/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Input Conversion Procedures:

   cv_dec_   cv_dec_check_     Converts decimal string to fixed bin (35).
   cv_oct_   cv_oct_check_     Converts octal string to fixed bin (35) or fixed bin (36) unsigned.
   cv_hex_   cv_hex_check_     Converts hexadecimal string to fixed bin (35) or fixed bin (36) unsigned.
   cv_binary_ cv_binary_check_ Converts binary string to fixed bin (35) or fixed bin (36) unsigned.

   Recoded 25 August 1976 by Noel I. Morris
   Modified 21 January 1981 by J. Spencer Love to detect overflow and sign without digits. 
   Modified 16 November 1983 by Keith Loepere for cv_binary_ and cv_binary_check_. */

/* format:  style3,ll122,idind30,ifthenstmt */

cv_dec_:
     procedure (P_string) returns (fixed bin (35));

declare	P_string			char (*),		/* input string */
	P_status			fixed bin (35);	/* error code:  index of losing character */

declare	(index, length, substr, subtract, unspec, verify)
				builtin;

declare	base			fixed bin (5),	/* number base for conversion */
	digit			fixed bin (5),	/* current integer value */
	dp_number			fixed bin (39),	/* result of multiply may be too big for number */
	maximum			fixed bin (36),	/* Largest magnitude before overflow */
	minus			bit (1) aligned,	/* "1"b if final result is negative */
	number			fixed bin (35),	/* resultant number */
	report_error		bit (1) aligned,	/* "1"b if error code returned */
	string_pos		fixed bin (21),	/* zero based index of current character to examine */
	valid_digits		fixed bin (5);	/* for character string scan */

declare	DIGITS			char (22) static options (constant) initial ("0123456789abcdefABCDEF");
%page;
/* cv_dec_:
        procedure (P_string) returns (fixed bin (35)); */

	base = 10;
	report_error = "0"b;			/* P_status parameter not given. */
	go to COMMON;

cv_dec_check_:
     entry (P_string, P_status) returns (fixed bin (35));

	base = 10;
	report_error = "1"b;			/* P_status parameter given. */
	go to COMMON;

cv_oct_:
     entry (P_string) returns (fixed bin (35));

	base = 8;
	report_error = "0"b;			/* P_status parameter not given. */
	go to COMMON;

cv_oct_check_:
     entry (P_string, P_status) returns (fixed bin (35));

	base = 8;
	report_error = "1"b;			/* P_status parameter given. */
	go to COMMON;

cv_hex_:
     entry (P_string) returns (fixed bin (35));

	base = 16;
	report_error = "0"b;			/* P_status parameter not given. */
	go to COMMON;

cv_hex_check_:
     entry (P_string, P_status) returns (fixed bin (35));

	base = 16;
	report_error = "1"b;			/* P_status parameter given. */
	go to COMMON;

cv_binary_:
     entry (P_string) returns (fixed bin (35));

	base = 2;
	report_error = "0"b;			/* P_status parameter not given. */
	go to COMMON;

cv_binary_check_:
     entry (P_string, P_status) returns (fixed bin (35));

	base = 2;
	report_error = "1"b;			/* P_status parameter given. */
	go to COMMON;
%page;
COMMON:
	minus = "0"b;				/* Default is positive. */
	if length (P_string) = 0
	then do;					/* Trivial case: return zero */
		number = 0;
		go to VALID_NUMBER;
	     end;

	string_pos = 0;				/* Zero base index saves instructions. */
	valid_digits = base;			/* Set number of characters to compare. */
	if valid_digits = 16 then valid_digits = 22;	/* Allow both lower and upper case for HEX. */

	if base = 10
	then maximum = 34359738367;			/* 2**35-1 (max for fixed bin (35)) */
	else maximum = 68719476735;			/* 2**36-1 (max for fixed bin (36) unsigned) */

GET_FIRST_DIGIT:
	number = index (substr (DIGITS, 1, valid_digits), substr (P_string, string_pos + 1, 1)) - 1;
	if number < 0
	then do;					/* Is this character a valid digit? */
		number = 0;			/* No digits yet. */
		if index (" -+", substr (P_string, string_pos + 1, 1)) - 1 = 0
		then do;				/* Space:  skip over all leading whitespace */
			string_pos = verify (P_string, " ") - 1;
			if string_pos >= 0
			then go to GET_FIRST_DIGIT;	/* Try again; will never come back here. */
			else go to VALID_NUMBER;	/* No nonblank characters; return zero. */
		     end;				/* Next:  punt for invalid char or solitary sign */
		else if index (" -+", substr (P_string, string_pos + 1, 1)) - 1 < 0
			| substr (P_string, string_pos + 2) = ""
		then go to BAD_DIGIT;
		else if index (" -+", substr (P_string, string_pos + 1, 1)) - 1 = 1
		then do;				/* Minus sign. */
			minus = "1"b;
			maximum = 34359738368;	/* -2**35 (max for negative number) */
		     end;
		else maximum = 34359738367;		/* 2**35-1 (max for positive number) */
	     end;
	else if number > 15 then number = subtract (number, 6, 35, 0);
						/* Using the subtract builtin prevents the compiler from
						   emitting 3 gratuitious scaling instructions (SIGH). */
%page;
/* Now build up the number.  We already have the first digit, or at least the sign, so gobble up digits until
   we 1) run out, 2) encounter an invalid digit, or 3) the number gets too large.  Note that trailing spaces
   are handled as a special case of invalid digit since we assume that most numbers we get will be rtrimmed.
   In the case of an invalid digit, we return its position by way of indicating an error.  When the number gets
   too large, we treat the first digit that could not be accomodated as if it were an illegal character.  */

	do string_pos = string_pos + 1 to length (P_string) - 1;

	     digit = index (substr (DIGITS, 1, valid_digits), substr (P_string, string_pos + 1, 1)) - 1;
	     if digit < 0
	     then if substr (P_string, string_pos + 1) = ""
		then go to VALID_NUMBER;		/* Check if only trailing whitespace. */
		else go to BAD_DIGIT;		/* Otherwise have illegal character. */
	     else if digit > 15 then digit = digit - 6;	/* Adjust for uppercase HEX. */

/* The following statements shift in a digit.  The multiply and add step generates a 72 bit number.  This number
   may be too large to assign to a fixed bin (35) number.  However, we permit several cases that would require
   such an invalid assignment.  1) -34359738368 (decimal) can be input.  We read negative numbers in a digit at
   a time and negate them afterwards.  This won't work for this value.  2) In octal and hexadecimal, we permit
   unsigned input.  Positive values between 34359738368 and 68719476735 are too large to fit in fixed bin (35).
   So we use unspec to make sure these numbers don't cause size conditions and the like.  Next time around, if
   number is negative, we know that we already have one of these oversized numbers and thus this digit is one
   too many.  At VALID_NUMBER, we also check the number to see if it is already "negative" and don't negate
   -34359738368 since it would cause an overflow.  Unsigned numbers (case 2) could never have minus = "1"b.  */

	     if number < 0 then goto BAD_DIGIT;		/* Too many digits; punt */
	     dp_number = number * base + digit;		/* So what would new number be... */
	     if dp_number > maximum then go to BAD_DIGIT; /* if it fits? */
	     unspec (number) = substr (unspec (dp_number), 37);
	end;

VALID_NUMBER:
	if report_error then P_status = 0;		/* Indicate no error */
	if minus & number > 0
	then return (-number);			/* Can't negate 2**35, but that's OK, it already is. */
	else return (number);

BAD_DIGIT:
	if report_error then P_status = string_pos + 1;	/* Tell caller where we lost */
	if minus & number > 0
	then return (-number);			/* Can't negate 2**35, but that's OK, it already is. */
	else return (number);

     end cv_dec_;
