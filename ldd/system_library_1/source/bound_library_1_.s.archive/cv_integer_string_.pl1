/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* routines to convert strings to integers */
/* Written May 1984 by Chris Jones */
/* Modified November 1984 by Keith Loepere to explictly validate radix base.
   (avoids signalling condition in bce).  Also for negative octal values. */
/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
cv_integer_string_:
     proc (p_string, p_default_base) returns (fixed bin (35)) options (support);

dcl	p_string		   char (*) parameter;	/* (I) string to be converted */
dcl	p_default_base	   fixed bin parameter;	/* (I) base to use if none is specified */
dcl	p_code		   fixed bin (35) parameter;	/* (O) system status code */

dcl	base		   fixed bin;
dcl	char_idx		   fixed bin;
dcl	check_entry	   bit (1) aligned;
dcl	digit		   fixed bin;
dcl	negative		   bit (1) aligned;		/* set if the result is to be negative */
dcl	reason		   char (128);
dcl	result		   fixed bin (71);
dcl	return_result	   fixed bin (35);

dcl	digits_string	   char (digits_string_length) based (digits_string_ptr);
dcl	digits_string_ptr	   ptr;
dcl	digits_string_length   fixed bin (21);

dcl	MINUS_SIGN	   char (1) static options (constant) init ("-");
dcl	PLUS_SIGN		   char (1) static options (constant) init ("+");
dcl	UNDERSCORE	   char (1) static options (constant) init ("_");
dcl	WHITESPACE	   char (2) static options (constant) init (" 	");
						/* SP HT */
dcl	VALID_DECIMAL_DIGITS   char (10) static options (constant) init ("0123456789");
dcl	VALID_DIGITS	   char (22) static options (constant) init ("0123456789AaBbCcDdEeFf");
dcl	digit_value	   (22) fixed bin static options (constant)
			   init (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15);

dcl	RADIX_INDICATORS	   char (4) static options (constant) init ("bodx");
dcl	RADIX_INDICATORS_UPPER_CASE
			   char (4) static options (constant) init ("BODX");
dcl	base_values	   (4) fixed bin static options (constant) init (2, 8, 10, 16);

dcl	error_table_$bad_conversion
			   fixed bin (35) ext static;

dcl	(addcharno, addr, convert, index, length, null, reverse, search, string, substr, translate,
	unspec, verify)	   builtin;

dcl	(conversion, fixedoverflow)
			   condition;

dcl	signal_		   entry () options (variable);

	check_entry = "0"b;
	goto COMMON;

cv_integer_string_check_:
     entry (p_string, p_default_base, p_code) returns (fixed bin (35));

	check_entry = "1"b;
	on conversion, fixedoverflow go to BADNUM;

COMMON:
	digits_string_length = length (p_string);	/* setup to point at string */
	digits_string_ptr = addr (p_string);
	call trim_whitespace;

	if substr (digits_string, 1, 1) = MINUS_SIGN then do;
	     negative = "1"b;
	     call adjust_from_left (1);
	     call trim_whitespace;
	end;
	else if substr (digits_string, 1, 1) = PLUS_SIGN then do;
	     negative = "0"b;
	     call adjust_from_left (1);
	     call trim_whitespace;
	end;
	else negative = "0"b;			/* implicit positive number */

	call get_base;

	result = 0;
	do char_idx = 1 to length (digits_string);
	     digit = digit_value (index (VALID_DIGITS, substr (digits_string, char_idx, 1)));
	     result = result * base + digit;
	end;
	if negative then
	     result = -result;
	if check_entry then
	     p_code = 0;

	if result < -34359738368			/* 2**35 (max for fixed bin (35)) */
	     | result > 68719476735			/* 2**36-1 (max for fixed bin (36) unsigned) */
	then do;
	     reason = "The converted string does not fit in 36 bits.";
	     go to BADNUM;
	end;

/* The above, plus the unspec assignment below, is to allow the input of
   (mostly octal) values up to 777777777777o. */

	unspec (return_result) = substr (unspec (result), 37, 36);
	return (return_result);

get_base:
     proc;

/**** This is actually where the most interesting work takes place.  If no radix indicator exists to tell us otherwise,
      we'll use the default base.  Radix indicators can be specified by a single character (b, o, d, x), or by the
      construct r<number> (<number is interpreted as decimal>).  Both are optionally preceded by an underscore.
      If there's a possibility that a character is a valid digit as well as a radix indicator (as is the case with
      b and d with a base of 16), we assume the character is a digit. ****/

dcl	radix_string	   char (radix_string_length) based (radix_string_ptr);
dcl	radix_string_ptr	   ptr;
dcl	radix_string_length	   fixed bin (21);

dcl	radix_char	   char (1);
dcl	radix_char_valid	   bit (1) aligned;

	base = p_default_base;			/* start out assuming there's no radix indicator */
	char_idx = search (reverse (digits_string), "Rr");
	if char_idx ^= 0 then do;			/* there MUST be a radix indicator */
	     radix_string_ptr = addcharno (digits_string_ptr, digits_string_length - char_idx + 1);
	     radix_string_length = char_idx - 1;
	     call adjust_from_right (char_idx);
	     if substr (digits_string, length (digits_string), 1) = UNDERSCORE then
		call adjust_from_right (1);
	     if verify (radix_string, VALID_DECIMAL_DIGITS) > 0 then
		go to BADNUM;
	     base = convert (base, radix_string);
	end;
	else do;
	     radix_char =
		translate (substr (digits_string, length (digits_string), 1), RADIX_INDICATORS,
		RADIX_INDICATORS_UPPER_CASE);
	     if search (RADIX_INDICATORS, radix_char) ^= 0 then do;
						/* this MIGHT be a radix character */
		if substr (digits_string, length (digits_string) - 1, 1) = UNDERSCORE then do;
		     call adjust_from_right (2);	/* strip off the underscore and indicator */
		     radix_char_valid = "1"b;
		end;
		else do;
		     if (base <= 10) | (base <= 12 & radix_char ^= "b")
			| (base <= 14 & radix_char ^= "b" & radix_char ^= "d") then do;
			call adjust_from_right (1);
			radix_char_valid = "1"b;
		     end;
		     else radix_char_valid = "0"b;
		end;
		if radix_char_valid then
		     base = base_values (search (RADIX_INDICATORS, radix_char));
	     end;
	end;

	if base < 2 | base > 16 then do;
	     reason = "The base is not in the range 2-16.";
	     goto BADNUM;
	end;
	if base <= 10 then
	     char_idx = base;
	else char_idx = base + base - 10;
	if verify (digits_string, substr (VALID_DIGITS, 1, char_idx)) ^= 0 then do;
	     reason = "The string contains invalid digits.";
	     goto BADNUM;
	end;

     end get_base;

BADNUM:
	if check_entry then do;
	     p_code = error_table_$bad_conversion;
	     return (0);
	end;
	else begin options (non_quick);

dcl	1 auto_pl1_info	   like pl1_info;

dcl	size		   builtin;

	     pl1_info_ptr = addr (auto_pl1_info);
	     unspec (pl1_info.header) = ""b;
	     pl1_info.header.length = size (pl1_info);
	     pl1_info.header.version = 1;
	     pl1_info.header.action_flags.cant_restart = "1"b;
	     pl1_info.header.info_string = reason;
	     pl1_info.header.status_code = error_table_$bad_conversion;

	     pl1_info.id = "pliocond";
	     string (pl1_info.content_flags) = ""b;
	     pl1_info.oncode_sw = "1"b;
	     pl1_info.oncode = 720;			/* see oncode_messages_ */
	     pl1_info.onsource_sw = "1"b;
	     pl1_info.onsource = p_string;
	     call signal_ ("conversion", null (), pl1_info_ptr);
	     return (0);
	end;

trim_whitespace:
     proc;

	char_idx = verify (digits_string, WHITESPACE);
	if char_idx = 0 then do;
	     reason = "The string consists only of whitespace.";
	     goto BADNUM;				/* consisted only of whitespace characters */
	end;
	call adjust_from_left (char_idx - 1);
	char_idx = verify (reverse (digits_string), WHITESPACE);
	if char_idx = 0 then do;
	     reason = "The string consists only of whitespace.";
	     goto BADNUM;
	end;
	call adjust_from_right (char_idx - 1);
	call quit_if_empty_string;

     end trim_whitespace;

quit_if_empty_string:
     proc;

	if digits_string_length = 0 then do;
	     reason = "There are no digits to process.";
	     goto BADNUM;
	end;

     end quit_if_empty_string;

adjust_from_left:
     proc (count);

dcl	count		   fixed bin parameter;

	digits_string_ptr = addcharno (digits_string_ptr, count);

adjust_from_right:
     entry (count);

	digits_string_length = digits_string_length - count;

     end adjust_from_left;

%include pl1_info;
%include condition_info_header;

     end cv_integer_string_;
