" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

%;
"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************

	name	condition_



"	condition_ - This procedure establishes a handler for a
"		specified condition.
"
"	declare condition_ entry(char(*),entry);
"
"	call condition_(name, handler);
"
"	1. name	is the name of the condition. (Input)
"
"	2. handler is the entry to be called when the specified
"		 condition is raised. (Input)
"

	include	stack_frame
	include	stack_header


	equ	on_name,0		pointer to name of condition
	equ	on_body,2		pointer to handler for this condition
	equ	on_size,4		length of condition name in chars
	equ	on_next,5		thread to next condition

null:	its	-1,1		null pointer
blanks:	aci	"    "		word of blanks
masks1:	oct	000777777777	masks for lookin at individual chars
	oct	777000777777
	oct	777777000777
	oct	777777777000
masks2:	oct	000777777777	masks for comparing strings
	oct	000000777777
	oct	000000000777
	oct	000000000000
char_count:
	oct	1		number of chars in last word
	oct	2
	oct	3
	oct	4

"	The following conventions are used with respect to index registers:
"	x0 reserved for subroutine calls
"	x1 contains relative pointer to on unit
"	x2 indicates number of words to grow stack frame
"	x3 contains bit offset of name
"	x4 for use by subroutines
"	x5 contains number of chars in last word of condition name
"	x6 contains the number of words in condition name minus one
"	x7 reserved for subroutine calls
"
"	pr3 used for pointer to condition name
"
"	Completely recoded by R. J. Feiertag on November 13, 1971
"	Modified by R. J. Feiertag on January 13, 1972
"	Modified by C. Jensen on July 28, 1972 for the follow-on 645.
"	Modified by M. Weaver on November 7, 1973 to make entries for the
"		special handlers act like the main entries
"
	entry	condition_
condition_:
	eppbp	ap|2,*		get pointer to condition name
	lxl6	ap|6,*		get number of chars in name
	eppbb	ap|4,*		get pointer to handler
	lda	ap|3		get bit offset of name
	ars	9		..
	ana	=o777,dl		..
	eax3	0,al		remember bit offset 
join:	tsx7	find_unit		look for unit for this condition
	tra	found_condition	have found unit for this condition
	eax2	6+1,6		must create unit so grow stack frame
	tsx0	grow_stack_frame	..
	stz	lp|on_size	fill in length of condition name
	sxl5	lp|on_size	..
	eaa	0,6		..
	ars	16		..
	asa	lp|on_size	..
	eax3	0,3		is the name aligned
	tze	aligned		if so use aligned code
copy_more:
	lda	bp|0,6		copy name
	ldq	bp|1,6		..
	lls	0,3		..
	sta	lp|6,6		..
	eax6	-1,6		..
	tpl	copy_more		..
	tra	fill_on_unit	skip aligned code
aligned:
	lda	bp|0,6		copy condition name into stack
	sta	lp|6,6		..
	eax6	-1,6		..
	tpl	aligned		..
fill_on_unit:
	eppbp	lp|6		place pointer to name in unit
	spribp	lp|on_name	..
	stz	lp|on_next	thread into condition stack
	ldx1	sp|stack_frame.on_unit_rel_ptrs	..
	stx1	lp|on_next	..
	eaa	sp|0		..
	neg	0		..
	eax1	lp|0,au		..
	stx1	sp|stack_frame.on_unit_rel_ptrs	..
found_condition:
	eppbp	bb|0,*		place pointer to handler in unit
	spribp	sp|on_body,1	..
return:
	short_return
"
"	reversion_ - This procedure reverts the given condition.
"
"	declare reversion_ entry(char(*));
"
"	call reversion_(name);
"
"	1. name	name of condition to be reverted. (Input)

	entry	reversion_

reversion_:
	eppbp	ap|2,*		get pointer to condition name
	lxl6	ap|4,*		get length of condition name
	lda	ap|3		get bit offset of name
	ars	9		..
	ana	=o777,dl		..
	eax3	0,al		..
	tsx7	find_unit		look for on unit
	stz	sp|on_size,1	unit found so revert it
	short_return		return to caller
"
"	default_handler_$set,establish_cleanup_proc_ -
"		These procedures establish the named handlers and procedures.
"
"	declare (default_handler_$set,establish_cleanup_proc_)
"		entry(entry);
"
"	call default_handler_$set(handler);
"	call establish_cleanup_proc_(handler);
"
"	1. handler	is the entry to be invoked. (Input)

any_other:
	aci	'any_other   '
cleanup:
	aci	'cleanup '

	entry	set

set:
	eppbp	any_other		get ptr to condition name
	eax6	9		get no. of chars in name
	eppbb	ap|2,*		get ptr to handler
	eax3	0		bit offset = 0
	tra	join		use rest of code for condition_

	entry	establish_cleanup_proc_

establish_cleanup_proc_:
	eppbp	cleanup		get ptr to condition name
	eax6	7		get no. of chars in name
	eppbb	ap|2,*		get ptr to handler
	eax3	0		bit offset of name = 0
	tra	join		use rest of code for condition_

"	The following entries were originally intended to revert
"	the special handlers and are called with no arguments.

	entry	revert

revert:
	eppbp	any_other		get ptr to condition name
	eax6	9		get length of name
	eax3	0		bit offset of name = 0
	tsx7	find_unit		look for on unit
	stz	sp|on_size,1	unit found so revert it
	short_return		return to caller

	entry	revert_cleanup_proc_

revert_cleanup_proc_:
	eppbp	cleanup		get ptr to condition name
	eax6	7		get length of name
	eax3	0		bit offset of name = 0
	tsx7	find_unit		look for on unit
	stz	sp|on_size,1	unit found so revert it
	short_return		return to caller

"
"	The following subroutine grows the stack frame by the amount
"	indicated in x2. Much of this code was copied from rest_of_cu_$grow_stack_frame

grow_stack_frame:
	epplp	sb|stack_header.stack_end_ptr,*	set lp to point to next available space
	eax2	15,2		round to next mod 16 location
	anx2	=o777760,du	..
	adlx2	sb|stack_header.stack_end_ptr+1  Add increm. to stack end ptr.
	stx2	sb|stack_header.stack_end_ptr+1  Save new stack end ptr.
	stx2	sp|stack_frame.next_sp+1	Reset current stack frame's ptr. to the next stack frame.

	ldq	ap|0		Is this a pl1 frame?
	canq	=o14,dl		..
	tze	0,0		No, return to caller.
	stx2	sp|5		record growth in pl1 frame
	tra	0,0		return to caller
"
"	This subroutine tries to find the unit for the given condition.

find_unit:
	lda	stack_frame.condition_bit,dl		make sure this is a condition stack
	cana	sp|stack_frame.condition_word		..
	tnz	get_length			..
	stz	sp|stack_frame.on_unit_rel_ptrs	..
	orsa	sp|stack_frame.condition_word		..
get_length:
	eaa	0,6		get length of name in chars
	tze	return		if zero then done
	lrs	20		convert to words
	eax6	0,al		place number of words in x6
	qrl	16		get extra chars
	eax5	1,qu		place extra chars in x5
	eax3	0,3		set indicators according to value in x3
	tnz	unaligned		if non zero bit offset use unaligned code
previous_char:
	eax5	-1,5		reduce chars by 1
	tnz	next_word		have we gone over word boundary
	eax6	-1,6		if so reduce number of words
	tmi	return		name of all blanks
	eax5	4		have four chars in new word
next_word:
	lda	bp|0,6		get word and check for blanks
	ldq	masks1-1,5	..
	cmk	blanks		..
	tze	previous_char	if blank reduce length by 1
	ldx1	sp|stack_frame.on_unit_rel_ptrs	get offset of first on unit
	tra	next_length	..
next_on_unit:
	ldx1	sp|on_next,1	get offset of next on unit
next_length:
	tze	1,7		cannot find unit
	eaa	0,6		compute length of name
	ars	16		..
	ada	char_count-1,5	..
	cmpa	sp|on_size,1	are names the same length
	tnz	next_on_unit	if not go to next on unit
	epplp	sp|on_name,1*	get pointer to name for this unit
	lda	bp|0,6		compare extra chars
	ldq	masks2-1,5	..
	cmk	lp|0,6		..
	tnz	next_on_unit	no match, try next
	eax4	0,6		compare rest of name
compare_next_word:
	eax4	-1,4		..
	tmi	0,7		match, we are done
	lda	bp|0,4		..
	cmpa	lp|0,4		..
	tze	compare_next_word	..
	tra	next_on_unit	no match, try next

unaligned:
	eax5	-1,5		strip off trailing blanks
	tnz	unal_next_word	..
	eax6	-1,6		..
	tmi	return		..
	eax5	4		..
unal_next_word:
	lda	bp|0,6		..
	ldq	bp|1,6		align string
	lls	0,3		..
	ldq	masks1-1,5	..
	cmk	blanks		..
	tze	unaligned		..
	ldx1	sp|stack_frame.on_unit_rel_ptrs	get offset of first on unit
	tra	unal_next_length	..
unaligned_next_on_unit:
	ldx1	sp|on_next,1	get offset of next on unit
unal_next_length:
	tze	1,7		cannot find unit
	eaa	0,6		compute length of name
	ars	16		..
	ada	char_count-1,5	..
	cmpa	sp|on_size,1	are names the same length
	tnz	unaligned_next_on_unit if not go to next on unit
	epplp	sp|on_name,1*	get pointer to name for this unit
	lda	bp|0,6		align this word of string
	ldq	bp|1,6		..
	lls	0,3		..
	ldq	masks2-1,5	compare extra chars
	cmk	lp|0,6		..
	tnz	unaligned_next_on_unit continue comparison
	tnz	unaligned_next_on_unit no match, try next unit
	eax4	0,6		compare rest of name
unal_compare_next:
	eax4	-1,4		..
	tmi	0,7		match, done
	lda	bp|0,4		align word of string
	ldq	bp|1,4		..
	lls	0,3		..
	cmpa	lp|0,4		compare word
	tze	unal_compare_next	continue comparison
	tra	unaligned_next_on_unit no match, try next unit

	end
