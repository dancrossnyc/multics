/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */

/* UNWINDER - This procedure performs all non-local goto's.
   It is passed a label that specifies the location and stack frame
   to which to return.  The stack is popped one frame at a time
   until the correct frame is reached.  As each frame is popped,
   its condition stack is checked for a cleanup condition.
   Unwinding across rings is handled in a manner similar to signal_,
   except that the non-local goto required by this technique
   is performed with the aid of an ALM utility program.

   Coded in PL/1 on July 21, 1970 by R. J. Feiertag
   Code added for special handlers on November 14, 1971 by R. J. Feiertag
   Code modified on January 13, 1972 by R. J. Feiertag
   Modified for 645F and combined with signal_ - September 20, 1972 by N. I. Morris	*/
/* Recoded 6 November 1973 by M. Weaver to separate from signal_ again, divide into 2
   pieces (other is unwind_stack_) and signal cleanup */
/* Modified March 9, 1978 by M. Weaver to not set stack end pointer when unwinding in same ring */
/* Modified 1985-04-05, E. Swenson to zero out unused condition info flags */

unwinder_: proc (a_target_label);

dcl  (a_target_label, target_label) label;		/* target of non-local goto */

dcl  target_loc ptr,				/* target location of non-local goto */
     target_sp ptr,					/* target stack level of non-local goto */
     p_target_sp ptr;

dcl  (prev_sp, my_sp, labelp) ptr;
dcl  label_variable label;
dcl  code fixed bin (35);

dcl  (addr, addrel, baseno, baseptr, bit, divide, fixed, index, length, null, ptr, rel, size, substr) builtin;

dcl  1 label based (labelp),				/* overlay for label variable */
       2 target ptr,				/* target of label */
       2 stack ptr;					/* stack offset for label */


dcl  1 unwinder_caller_frame based (sp) aligned,		/* stack frame for caller of unwinder_ */
       2 frame_header like stack_frame,			/* stack frame header */
       2 target_label label,				/* target of non-local goto. */
       2 arglist,					/* argument list to unwinder_ */
         3 arg_count fixed bin (17) unal,		/* 2 * number of args */
         3 flag fixed bin (17) unal,			/* =4 for pl/1 call */
         3 desc_count fixed bin (17) unal,		/* 2 * number of descriptors */
         3 pad fixed bin (17) unal,
         3 target_label_ptr ptr;			/* pointer to label variable */

dcl  unwinder_caller_frame_size fixed bin;		/* size of created frame */

dcl  1 unwind_err aligned,				/* structure for signalling unwinder_error */
       2 header like condition_info_header,
       2 label label;				/* copy of offending label */


dcl  nonlocal_goto_$different_ring ext entry (ptr, ptr),
     nonlocal_goto_$same_ring ext entry (ptr, ptr),
     unwind_stack_ entry (ptr, ptr, fixed bin (35)),
     signal_ entry (char (*), ptr, ptr);
%page;

/* Program */

	target_label = a_target_label;
begin:	labelp = addr (target_label);			/* Get pointer to target. */
	target_loc = labelp -> label.target;		/* Extract target of non-local goto. */
	target_sp = labelp -> label.stack;		/* Extract target stack pointer. */


/* do the actual unwinding */

	labelp = addr (label_variable);
	label_variable = sig_error;			/* set to something to get sp */
	my_sp = labelp -> label.stack;
	my_sp -> stack_frame_flags.support = "1"b;	/* turn on support bit */

/* see whether we unwind all or part of stack */

	if baseno (my_sp) ^= baseno (target_sp) then do;	/* unwind all of this stack first */
	     sp = ptr (my_sp, 0) -> stack_header.stack_begin_ptr -> stack_frame.prev_sp;
						/* get ptr to previous stack */
	     if sp = null then go to sig_error;		/* no other stack; will never find target */
	     p_target_sp = null;
	end;
	else sp, p_target_sp = target_sp;		/* look for target in this stack */

	call unwind_stack_ (my_sp, p_target_sp, code);	/* unwind ... */
	if code ^= 0 then go to sig_error;		/* couldn't find target frame */

/**/
	if p_target_sp ^= null then do;		/* target is on this stack */

/* Arrive here when the target stack frame for the non-local goto has been reached.
   Must restore the indicators; get them from the mc if the frame was faulted out of
   and from the return pointer otherwise.
   Set the target frame's return pointer to the target of the goto and call
   an ALM utility program to perform a return sequence.			*/

	     sp -> stack_frame_flags.signaller = "0"b;	/* erase FIM flag */
	     sp -> stack_frame_flags.old_signaller = "0"b;/* erase old FIM flag */

	     sp -> stack_frame.return_ptr = target_loc;	/* Set return pointer to target. */
	     call nonlocal_goto_$same_ring (sp, sp -> stack_frame.return_ptr); /* Let utility program do the return */
	end;

/* Arrive here when switching stacks on a non-local goto. */
/* Construct a new stack frame on the outer ring stack.  This frame will contain
   an argument list and arguments for a call to signal_. 			*/

	sb = ptr (sp, "0"b);			/* Get pointer to base of outer ring stack. */
	prev_sp = sp;				/* Save pointer to last frame on that stack. */
	sp = sb -> stack_header.stack_end_ptr;		/* Get pointer to new frame. */
	unwinder_caller_frame_size = divide (size (unwinder_caller_frame) + 15, 16, 18, 0) * 16;
						/* Compute length of unwinder_caller stack frame.
						   Round size up to nearest 16. */

	sb -> stack_header.stack_end_ptr,		/* set new pointers to end of stack */
	     sp -> stack_frame.next_sp = addrel (sp, unwinder_caller_frame_size);
	sp -> stack_frame.prev_sp = prev_sp;		/* Thread new frame in. */
	sp -> stack_frame_flags.condition = "0"b;	/* "prev_sp" may have had condition bit set. */
	sp -> stack_frame_flags.crawl_out = "1"b;	/* indicate we're doing a crawl out */
	sp -> stack_frame_flags.old_crawl_out = "1"b;
	sp -> stack_frame_flags.support = "1"b;		/* indicate support frame */





/* Construct an argument list to unwinder_ and simulate an unwinder_ call
   on the target stack in a manner similar to signal_'s call for crawlouts */

set_unwinder_arglist:
	labelp -> label.target = target_loc;		/* Reconstruct label passed to unwinder_. */
	labelp -> label.stack = target_sp;		/* .. */

	unwinder_caller_frame.target_label = label_variable;
						/* Set label in stack frame. */

	unwinder_caller_frame.entry_ptr = null;		/* so won't be confused by garbage */

	unwinder_caller_frame.arglist.arg_count = 2;	/* Indicate 1 argument. */
	unwinder_caller_frame.arglist.flag = 4;
	unwinder_caller_frame.arglist.desc_count = 0;	/* Indicate no descriptors. */
	unwinder_caller_frame.arglist.pad = 0;

	unwinder_caller_frame.arglist.target_label_ptr = addr (unwinder_caller_frame.target_label);
						/* Set pointer to label in stack. */


/* Set operator pointer in caller frame to point to argument list.
   The ALM utility routine will place this value in pr0 when it performs
   the non-local goto.  Beware -- this is a KLUDGE */

	stack_frame.operator_and_lp_ptr = addr (unwinder_caller_frame.arglist);

	sp -> stack_frame.return_ptr = sb -> stack_header.unwinder_ptr;
						/* Set return info to call unwinder_. */


/* Perform the non-local goto to call the unwinder_ by calling
   an ALM utility routine.  This program will abandon the stack
   that we are currently running on.					*/


	call nonlocal_goto_$different_ring (sp, sp -> stack_frame.return_ptr); /* See you in the next stack */


	return;
%page;
sig_error:					/* code for signalling unwinder_error */
	unwind_err.header.length = size (unwind_err);
	unwind_err.header.version = 1;
/**** Zero out all flags.  We do not allow any restarting. */
	unspec (unwind_err.header.action_flags) = ""b;
	unwind_err.header.info_string = "Attempt to perform non-local goto to invalid label.";
	unwind_err.header.status_code = 0;
	unwind_err.label = target_label;		/* fill in offending label */

	call signal_ ("unwinder_error", null, addr (unwind_err)); /* tell user */

	target_label = unwind_err.label;		/* assume if restart that label has been fixed */
	go to begin;				/* start over */

/* format: off */
%page; %include condition_info_header;
%page; %include mc;
%page; %include stack_frame;
%page; %include stack_header;

	end unwinder_;
