" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"	Routine to compute exclusive-or checksums of the used 
"	portion of the file map
"
"
"	Written January 1982 by J. Bongiovanni
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 

	name	filemap_checksum_
	entry	filemap_checksum_


	temp	checksum_temp	


"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"	filemap_checksum_ - external entry
"
"	call filemap_checksum_ (addr (begin_word), csl, cksum)
"
"	where:
"	
"		begin_word is the first word to checksum
"
"		csl is the current segment length
"
"		cksum is the returned checksum value
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 

filemap_checksum_:
	push
	epplb	ap|2,*		" lb -> ptr -> first word
	epplb	lb|0,*		" lb -> first word
	lda	ap|4,*		" Areg = current segment length
	ada	1,dl		" Compute number of words in file map
	arl	1
	eax0	0,al		" Number of words
	tsx7	checksum		" compute the checksum
	sta	ap|6,*		" Areg = computed checksum
	return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
"
"	checksum - Internal subroutine
"
"	tsx7	checksum
"
"	On entry
"		lb -> first word to checksum
"		x0 = number of words to checksum
"
"	On exit
"		Areg = computed checksum
"		x1, Qreg destroyed
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 

	even
zero_value:
	dec	0,0

checksum:

	ldaq	zero_value	" Initially zero
	eax0	0,x0		" Number of words
	tze	checksum_returns 	" Easy case

	eax1	lb|0,x0		" x1 = offset of word beyond end
	canx1	1,du		" Is last word to checksum at odd offset
	tze	checksum_loop	" Yes
	lda	lb|-1,x0		" No, adjust so that it is
	eax0	-1,x0
	tze	checksum_returns	" first is last

checksum_loop:
	eax0	-2,x0		" Setup for next double word
	tze	checksum_even	" Next double word exhausts list
	tmi	checksum_odd	" Next word exhausts list
	eraq	lb|0,x0		" Exclusive-or next double word
	tra	checksum_loop	" And continue

checksum_even:
	eraq	lb|0		" Fold in first double word
	tra	checksum_returns

checksum_odd:
	era	lb|0		" Fold in first word

checksum_returns:
	stq	checksum_temp	" Fold Qreg into Areg
	era	checksum_temp
	tra	0,x7		" And return

	end
