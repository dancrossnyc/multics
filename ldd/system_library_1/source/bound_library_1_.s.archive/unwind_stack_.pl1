/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */

unwind_stack_:
     proc (a_start_sp, a_target_sp, code);

/* This procedure actually does the unwinding for the unwinder.
   It examines all the stack frames from the frame before start_sp to target_sp
   looking for cleanup handlers.  When one is found, cleanup is signalled
   (signal_ is sure to find the handler).
   If target_sp is null, the whole stack is unwound. */

/* coded 1 November 1973 by M. Weaver (much of code copied from signal_) */
/* modified to protect against terminated cleanup handlers, Benson I. 
   Margulies, December 1981 */

	dcl     a_start_sp		 ptr,
	        a_target_sp		 ptr,
	        code		 fixed bin (35);

	dcl     (start_sp, target_sp, entryp, onlistp, oldp)
				 ptr;
	dcl     based_p		 ptr based;

	dcl     loops		 fixed bin init (0);
	dcl     ou_count		 fixed bin;
	dcl     error_table_$not_done	 ext fixed bin (35);

	dcl     onlistrel		 bit (18) aligned;
	dcl     allsw		 bit (1) aligned;

	dcl     char_string		 char (onlistp -> on_unit.size) aligned based (onlistp -> on_unit.name);

	dcl     (addrel, baseno, baseptr, bin, length, null, rel)
				 builtin;

	dcl     entry_variable	 variable entry (ptr, char (*), ptr, ptr, bit (1) aligned);

	dcl     1 label		 based aligned,	/* template for label or entry variable */
		2 target		 ptr,
		2 stack		 ptr;

%include on_unit;

%include stack_frame;

/*  */
	start_sp = a_start_sp;			/* copy aRGS */
	target_sp = a_target_sp;
	code = 0;

	if target_sp = null
	then allsw = "1"b;				/* unwind whole stack */
	else allsw = "0"b;

	entryp = addr (entry_variable);		/* set pointer to entry */
	sp = start_sp -> stack_frame.prev_sp;		/* start from previous frame */

stack_loop:					/* check to determine if target stack level has been reached */
	if target_sp = sp
	then return;				/* all done; don't unwind target */

/* see if we have already passed the target frame;
   this could happen if target_sp does not point to the beginning of a stack frame */
	if bin (rel (target_sp), 18) > bin (rel (sp), 18)
	then if ^allsw
	     then do;
		     code = error_table_$not_done;	/* caller can better signal unwinder_error */
		     return;
		end;

/* Search the condition stack for a cleanup on unit. If found, signal cleanup. */
	if sp -> stack_frame_flags.condition
	then do;					/* have on units in this frame */
		onlistrel = sp -> stack_frame.on_unit_relp1;
						/* pick up ptr to on unit thread */
		ou_count = 0;			/* keep track of on units to check for loops */
		oldp = null;			/* works as back thread */

		do while (onlistrel);		/* search the on unit thread */
		     onlistp = addrel (sp, onlistrel);	/* get pr to next on unit */
		     if onlistp -> on_unit.size = length ("cleanup")
		     then if char_string = "cleanup"
			then do;			/* unthread on unit and call handler */
				if oldp = null
				then /* test for beginning of condition thread */
				     sp -> stack_frame.on_unit_relp1 = onlistp -> on_unit.next;
				else /* unthread cleanup on unit */
				     oldp -> on_unit.next = onlistp -> on_unit.next;
				entryp -> label.target = onlistp -> on_unit.body;
						/* fill in entry variable */
				entryp -> label.stack = sp;

/**** The following block contains all the error trapping stuff to avoid
      bad pointers as cleanup handlers. The code just above does not
      actually reference through any pointers to the program handler. */

				begin;

				     declare (seg_fault_error, no_read_permission, no_execute_permission,
					   not_in_read_bracket, null_pointer, undefined_pointer, illegal_opcode,
					   illegal_modifier, not_in_call_bracket, illegal_procedure,
					   linkage_error)	      condition;

				     on seg_fault_error, no_read_permission, no_execute_permission,
					not_in_read_bracket, null_pointer, undefined_pointer, illegal_opcode,
					illegal_modifier, not_in_call_bracket, illegal_procedure, linkage_error
					goto THIS_HANDLER_DONT;

				     call entry_variable (null (), "cleanup", null (), null, ("0"b));
						/* call this cleanup handler procedure            */
THIS_HANDLER_DONT:
				end;
				go to end_loop;	/* done with this frame */
			     end;

		     oldp = onlistp;		/* save pointer to previous on unit */
		     onlistrel = onlistp -> on_unit.next;
						/* step to the next on unit and continue */
		     ou_count = ou_count + 1;		/* increment count of on units found */
		     if ou_count > 200
		     then ptr (baseptr (-2), -2) -> based_p = sp;
						/* term process if too many */
		end;
	     end;

end_loop:
	sp -> stack_frame_flags.condition = "0"b;	/* frame has disappeared as far as
						   condition mechanism is concerned */
	sp = sp -> stack_frame.prev_sp;		/* step stack ptr back to previous frame */
	loops = loops + 1;				/* increment count of stack frames found */
	if loops > 5000
	then ptr (baseptr (-2), -2) -> based_p = sp;	/* term process if too many */
	if baseno (start_sp) = baseno (sp)
	then go to stack_loop;			/* continue search if on same stack */

	return;					/* caller will continue on another stack */

     end unwind_stack_;
