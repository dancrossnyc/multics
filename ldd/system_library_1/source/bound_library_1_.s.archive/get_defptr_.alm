" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"
"	get_defptr_
"
"	Usage:
"
"	call get_defptr_ (defp, segnamep, extnamep, definitionp, code)
"
"	where
"
"	defp	is a pointer to definition section for segment whose defs are
"		to be searched
"	segnamep	is a pointer to the segment name of segment
"
"	extnamep	is a pointer to the symbol being searched for
"
"	definitionp  returned pointing to the definition containing the matched name
"
"	code	returned error code.
"
"	First written by Steve Webber.
"	Calling seq. changed 8/18/76, B. Greenberg
"	Further modified 8/24/76 by Noel I. Morris
"	Modified for defs hash table 12/6/76 by Noel I. Morris
"	Modified to get around hardware bug 095 10/13/77 by Richard A. Barnes
"
" 
"	The following code searches in the external segment's
"	definition section for an offset designated by an external symbol.
"	It does this in one or two passes.  For the new object format (new
"	format bit on), a pass is made over the definitions for the
"	designated segment name, and, if it is found, a search is made in its
"	definition block for the designated external symbol.  If either of
"	segment name or the external symbol name is not found, then in a
"	second pass, a search is made of all external symbols in the
"	definition section for the designated external symbol.
"	This external symbol name mustt be unique.
"
"
"	The following register assignments are used:
"
"	ab	points to the extname or segname.
"	lp	points to the current definition we are looking at.
"	bp	points to the definitions header.
"	bb	points to a definitions hash table.
"	lb	is a temporary used for string copies and compares.
"	lp	points to the definition.
"
"	X0	holds count and first char of extname or segname.
"	X1	is loop counter.
"	X2	is used to save def ptr.
"	X3	has the length of the extname or segname.
"	X4	has the offset of the next definition.
"	X5	is definitions thread offset index.
"	X6	is 0 for new format defs, 2 for old.
"	X7	is used for internal calls.
"

" 

	segdef	get_defptr_

get_defptr_:
	eppbp	ap|2,*		bp -> definitions section
	eppbp	bp|0,*		..

	eax6	0		turn off old format flag
	lxl0	bp|1		old or new format?
	tpl	old_format	TRA if old format
	canx0	=o200000,du	first def an ignore def?
	tze	no_hash		if not, cannot have hash table

	ldx0	bp|1		get addr of symbol hash table
	tze	no_hash		if zero, no hash table

" Look for symbol in hash table.

	eppbb	bp|0,0		bb -> sym hash table

	eppab	ap|6,*		ab -> symbol name ptr
	tsx7	acc_setup		get pointer and length

	tsx7	hash_search	search for symbol
	tra	no_sym		if not found, return error

	eax2	0,6		was name unique?
	tze	found		if so, found definition

" Look for segment name in hash table.

	lxl0	bb|0		get size of sym hash table
	eppbb	bb|1,0		bb -> segment name hash table

	eppab	ap|4,*		ab -> segment name ptr
	tsx7	acc_setup		get pointer and length

	tsx7	hash_search	search for segment name
	tra	dup_name		if not found, ambiguous name

" Look for definition matching segment name.

	lda	bb|1,al		head segname def pointer in AL
	eppbb	bp|0,2		bb -> list of duplicate symbol defs
	ldq	bb|0		get count of duplicates in Q
	qls	36-8		shift to position for RPT
	eax0	64,qu		place in X0 with TZE bit

	ldq	=o777777,du	comparison mask in Q
	eax6	1		initialize index
	rptx	0,1		search list
	cmk	bb|0,6		..
	ttn	dup_name		if not found, give error

	ldx4	bb|-1,6		get def pointer in X4
	epplp	bp|0,4		lp -> definition
	tra	found		got it

" 

"	The following internal subroutine is called to search
"	a symbol definition or segment name definition hash table.
"	It is used as follows:
"
"	eppbb	hash_table_head
"	tsx7	hash_search
"	tra	notfound
"

hash_search:
	ldq	ab|0		first word of symbol in Q
	div	bb|0		compute hash code in A
	lxl1	bb|0		X1 is loop counter

hash_loop:
	ldx4	bb|1,al		pick up hash table entry
	tze	0,7		if zero, name not found

	eax1	-1,1		count interations
	tmoz	defs_loop		error if too many

	ldx6	bp|0,4		look at definition forward pointer
	tze	dup_hash		if zero, we have duplicate names
	eax6	0		if unique name, clear X6
	tra	no_dup_hash	and continue
dup_hash:
	eax6	0,4		save offset of duplicate table
	ldx4	bp|1,4		use first duplicate name def
no_dup_hash:
	epplp	bp|0,4		lp -> definition

	ldq	lp|2		get name ptr from definition
	epplb	bp|0,qu		lb -> name
	cmpx0	lb|0		quicky compare of first word
	tnz	hash_next		if not equal, try another
	cmpc	(pr,rl),(pr,rl)	now do full compare
	desc9a	ab|0,x3
	desc9a	lb|0,x3
	tze	1,7		if equal, success

hash_next:
	ada	1,dl		bump hash index
	cmpa	bb|0		check for end of table
	tmi	hash_loop		if not, continue search
	lda	0,dl		go back to top of table
	tra	hash_loop		..

" 

" Look for first class 3 def.

old_format:
	eax6	2		old format, set index
no_hash:
	eax4	0		start at beginning of defs
	eax5	0		follow thread at lp|0
	tsx7	searchd		look for first class 3 def
	tra	pass_2		if none, do second pass
	tra	*+1		wrest control from subroutine
	tnz	nextd		if not class 3, keep looking

" Now look for segment name.

	eppab	ap|4,*		ab -> segment name pointer
	tsx7	acc_setup		get pointer and length

	eax5	1		follow thread at lp|1
	tsx7	searchd3		follow thread of class 3 defs
	tra	pass_2		at end of thread, do second pass
	tnz	pass_2		if non class 3 encountered, do second pass

" Segment name found.  Search for symbol.

	eppab	ap|6,*		ab -> external symbol pointer
	tsx7	acc_setup		make ab -> external name

	lxl4	lp|2		get pointer to defs for this seg
	eax5	0		follow thread at lp|0
	tsx7	searchd		search them
	tra	pass_2		if not found, do second pass
	tze	pass_2		if another class 3 found, do second pass

	tra	found		gotcha!

" Do second pass over definitions.

pass_2:	eppab	ap|6,*		ab -> external symbol pointer
	tsx7	acc_setup		make ap -> external name

	eax4	0		start at beginning of defs
	eax5	0		follow thread at lp|0
	tsx7	searchd		and search all of them
	tra	no_sym		to the end of the thread
	tze	nextd		ignore class 3 defs

	eax2	0,4		save def ptr in X2
	tsx7	nextd		continue search to check for dup
	tra	unique		success, if never found again
	tze	nextd		ignore class 3 defs
	tra	dup_name		if found, we have a name conflict

unique:	epplp	bp|0,2		lp -> unique definition
	tra	found		definition found

" 

"	The following internal subroutine is called to follow a definitions
"	thread.  It is used as follows:
"
"	eppab	name		pointer to segname or extname
"	lxl3	length		length of segname or extname
"	eax4	defoffset		offset from base of defs to start search
"	tsx7	searchd
"	tra	endofthread	return here at end of thread
"	...			execute this if class 3 def
"	...			name found, normal return
"

searchd:	eax1	8192		initialize infinite loop counter
	tra	nextd1		enter loop

nextd:	ldx4	lp|0,5		step to next def
	eax1	-1,1		check for infinite loop
	tmoz	defs_loop		..

nextd1:	epplp	bp|0,4		lp -> next def
	szn	lp|0		at end of thread?
	tze	0,7		take return if so

	lda	lp|1		look at class
	cana	=o200000,dl	ignore bit on?
	tnz	nextd		if so, try next def
	ana	=o7,dl		mask the class
	cmpa	3,dl		class 3?
	xec	1,7		take appropriate action

searchd3:
	even			"GET AROUND HARDWARE BUG 095
	xed	point_to_name,6	make lb point to name
	cmpx0	lb|0		quicky compare first
	tnz	nextd		..
	cmpc	(pr,rl),(pr,rl),fill(040)  compare names
	desc9a	ab|0,x3
	desc9a	lb|0,x3
	tnz	nextd		not found, keep looking
	tra	2,7		name found, return



	even
point_to_name:
	ldq	lp|2		new format, use pointer
	epplb	bp|0,qu

	epplb	lp|2		old format, name follows def
	nop	0,du

" 

acc_setup:
	eppab	ab|0,*		ab -> acc string
	lda	ab|0		first word in A
	eax0	0,au		count and first char retained in X0
	arl	27		extract character count
	eax3	1,al		in X3
	tra	0,7		return to caller



found:	sprilp	ap|8,*		return def pointer
	stz	ap|10,*		clear error code

	short_return



no_sym:	getlp
	lda	error_table_$no_ext_sym
	tra	error

dup_name:	getlp
	lda	error_table_$dup_ent_name
	tra	error

defs_loop:getlp
	lda	error_table_$defs_loop

error:	sta	ap|10,*		return error code
	epplp	=its(-1,1),*	make lp null
	sprilp	ap|8,*		return null pointer
	short_return



	end
