/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-04-11,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-13,LJAdams), install(86-07-17,MR12.0-1097):
     special case the root and part card for subvolume implementation.
                                                   END HISTORY COMMENTS */


/* CV_CONFIG_CARD_.PL1 -- translates a putative config card to */
/* a binary image. This is a syntactic translation only; no checks */
/* are made that the specified fields make any sense for the particular */
/* card. */
/* format: style2 */
/* BIM 8/82 */
/* Modified by RAF May 1985 special case the root card for subvolume implementation */
/* Modified by RAF Jul 1985 special case the part card for subvolume implementation */
cv_config_card_:
     procedure (text, card_ptr, code);

	declare (
	        text		 char (*),
	        card_ptr		 pointer,
	        code		 fixed bin (35)
	        )			 parameter;


/* format: off */
/*  *  *	*  *  *  *  *  *  *  *  *  *	*  *  *  *  *  *  *  *  *  *	*  *  *  *  *  *  * */
/*									*/
/* declare cv_config_card_ entry (char (*), pointer, fixed bin (35)); 		*/
/* call cv_config_card_ (text_config, bin_card_ptr, code);				*/
/*	code = 1 for null card						*/
/*	code = 2 for invalid format card					*/
/*									*/
/*  *  *	*  *  *  *  *  *  *  *  *  *	*  *  *  *  *  *  *  *  *  *	*  *  *  *  *  *  * */
/* format: on */


	declare 1 single_card	 like config_card aligned automatic;

	declare i			 fixed bin;
	declare is_special		 bit (1);
	declare (line_left, pos, new_pos, token_end, comment)
				 fixed bin (21);
	declare token		 char (32) varying;
	declare four_char		 char (4);

	declare Useful		 char (60)
				 init ("abcdefghijklmnnopqrstuvwxyz1234567890.*!@#$%^&()_-+=~`\|?,:;") int
				 static options (constant);
	declare Upper		 char (26) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ") int static options (constant);
	declare Lower		 char (26) init ("abcdefghijklmnopqrstuvwxyz") int static options (constant);
	declare Whitespace		 char (4) init (" 	") /* SP TAB FF VT */ int static options (constant);

	declare (bit, length, min, rank, rtrim, substr, translate, index, verify, search, unspec)
				 builtin;


	if verify (text, Useful || Whitespace) > 0
	then
INVALID_CARD:
	     do;
		code = 2;
		return;
	     end;

	pos = search (text, Useful);
	if pos = 0
	then
NULL_CARD:
	     do;
		code = 1;
		return;
	     end;

	line_left = length (text) - pos + 1;
	single_card.data_field (*) = "777777777777"b3;	/* Initialize it */
	unspec (single_card.type_word) = ""b;

	begin;
	     declare left		      char (line_left) defined (text) position (pos);

	     line_left = length (rtrim (left));
	     if line_left = 0
	     then goto NULL_CARD;
	end;					/* begin block */

	begin;
	     declare left		      char (line_left) defined (text) position (pos);

	     comment = index (text, "*");
	     if comment = 0
	     then comment = length (left);
	     else comment = comment - 1;		/* toss the * */
	     line_left = min ((line_left), comment);	/* trim off comment */
	     if line_left = 0
	     then goto NULL_CARD;
	end;					/* begin block */

	begin;
	     declare left		      char (line_left) defined (text) position (pos);

	     if verify (left, Whitespace) = 0
	     then goto NULL_CARD;
	     line_left = line_left - verify (reverse (left), Whitespace) + 1;
						/* and any training whiteness */
	end;					/* now we have a good starting pos and line_left */

/*  */

	single_card.n_fields = 0;
PARSE:
	do i = 0 to 14 while (line_left > 0);
LEFT_BLOCK:
	     begin;
		declare left		 char (line_left) defined (text) position (pos);

		token_end = search (left, Whitespace) - 1;
						/* do not include the space */
		if token_end < 0
		then token_end = line_left;
TOKEN_BLOCK:
		begin;
		     declare a_token	      char (token_end) defined (text) position (pos);
						/* just what we want */

		     token = "";
		     token = translate (a_token, Lower, Upper);
						/* Lower Case */

		     if i = 0
		     then do;			/* word card */
			     if length (token) > 4
			     then /* some simple checks */
				goto INVALID_CARD;
			     if verify (token, VALID_CARD_WORD_CHARACTERS) > 0
			     then goto INVALID_CARD;

			     single_card.word = substr (token, 1, min (length (token), 4));
			     if single_card.word = "root" | single_card.word = "part"
			     then /* special case the root */
				is_special = "1"b;
			     else is_special = "0"b;
			end;

		     else do;
			     single_card.n_fields = single_card.n_fields + 1;
			     if is_special
			     then /* all fileds on the root are STRING type but may look like oct or dec */
				goto special_case;
			     else if /* case */ octal_field (token, single_card.data_field (i))
			     then single_card.field_type (i) = CONFIG_OCTAL_TYPE;
			     else if decimal_field (token, single_card.data_field (i))
			     then single_card.field_type (i) = CONFIG_DECIMAL_TYPE;
			     else if single_char_field (token, single_card.data_field (i))
			     then single_card.field_type (i) = CONFIG_SINGLE_CHAR_TYPE;
			     else do;
special_case:
				     if length (token) > 4
				     then goto INVALID_CARD;

				     four_char = token;
						/* this will pad with SPACE */
				     unspec (single_card.data_field (i)) = unspec (four_char);
				     single_card.field_type (i) = CONFIG_STRING_TYPE;
				end;
			end;
		end TOKEN_BLOCK;			/* begin block */

		new_pos = search (left, Whitespace) - 1;/* find some whitespace */
		if new_pos < 0
		then new_pos = line_left;
		pos = pos + new_pos;
		line_left = line_left - new_pos;
	     end LEFT_BLOCK;			/* begin block */

	     begin;
		declare left		 char (line_left) defined (text) position (pos);
						/* now find beginning of next token */
		new_pos = verify (left, Whitespace) - 1;/* anybody home ? */
		if new_pos < 0
		then new_pos = line_left;
		pos = pos + new_pos;
		line_left = line_left - new_pos;
	     end;					/* begin block */

	end PARSE;

	card_ptr -> config_card = single_card;		/* copy out our result */
	code = 0;
	return;					/* All done converting */

/*  */

octal_field:
     procedure (token, value) returns (bit (1));

	dcl     token		 char (*) varying;
	dcl     value		 bit (36) aligned;
	dcl     odigits		 char (8) init ("01234567") int static options (constant);

	if verify (token, odigits) ^= 0
	then return (""b);

	else begin;
		declare f_value		 fixed bin (35);
		declare power_of_8		 fixed bin (35);
		declare one_char		 char (1);
		declare charx		 fixed bin;
		f_value = 0;
		power_of_8 = 1;
		do charx = length (rtrim (token)) to 1 by -1;
		     one_char = substr (token, charx, 1);
		     f_value = f_value + (power_of_8 * (rank (one_char) - rank ("0")));
		     power_of_8 = power_of_8 * 8;
		end;
		value = "0"b || bit (f_value, 35);
		return ("1"b);
	     end;


decimal_field:
     entry (token, value) returns (bit (1));

	dcl     ddigits		 char (10) init ("0123456789") int static options (constant);
	dcl     point		 char (1) init (".") int static options (constant);

	if verify (token, ddigits) = 0
	     | (substr (reverse (token), 1, 1) = point & verify (substr (token, 1, length (token) - 1), ddigits) = 0)
	then begin;
		declare f_value		 fixed bin (35);
		declare power_of_10		 fixed bin (35);
		declare charx		 fixed bin;
		declare one_char		 char (1);
		charx = length (rtrim (token));
		if substr (token, charx, 1) = point
		then charx = charx - 1;
		f_value = 0;
		power_of_10 = 1;
		do charx = charx to 1 by -1;
		     one_char = substr (token, charx, 1);
		     f_value = f_value + (power_of_10 * (rank (one_char) - rank ("0")));
		     power_of_10 = power_of_10 * 10;
		end;

		value = "0"b || bit (f_value, 35);
		return ("1"b);
	     end;

	return (""b);				/* no dice */


single_char_field:
     entry (token, value) returns (bit (1));

	dcl     a_to_h		 char (8) init ("abcdefgh") int static options (constant);
	dcl     tag		 fixed bin (4);

	if length (token) > 1
	then return (""b);				/* easy case */
	tag = index (a_to_h, token);			/* find our victim */
	if tag = 0
	then return (""b);
	value = (32)"0"b || bit (tag, 4);
	return ("1"b);

     end octal_field;

%page;
%include config_deck;

     end cv_config_card_;				/* Main procedure */
