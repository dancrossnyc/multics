/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2 */

fill_vol_extents_:
     procedure (a_labelp, interlace, a_nvtoce, a_baseadd, a_num_pages, a_defaultsw, a_device_type, a_code);


/* fill_vol_extents_: excerpted by BSG from init_disk_pack_, commoned with
   disk_rebuild_caller, as per MCR 2105   08/31/76 */
/* Used to be called "get_special_vol_data". Also made mandantory at this time. */
/* Modified by Mike Grady 9/79 to fix really trivial bug */
/* Modified April 1982 by J. Bongiovanni to print low partition address correctly */
/* Modified 821018 BIM parameterize, bootload entry, simple_command_processor_ */
/* Modified 2/83 by Keith Loepere to use bce_command_processor_ and environment */
/* Modified 9/83 by Keith Loepere for bce and file partitions. */
/* Modified 2/84 by Keith Loepere to fix asl <-> vtoc_size computations. */

/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(85-12-02,CLJones), install(86-03-21,MR12.0-1033):
     Support of FIPS by not allow vtoc_size to go over the max.
  2) change(86-01-07,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-13,LJAdams), install(86-07-17,MR12.0-1097):
     Add support for MSU3380 and MSU3390 512_word_io one vtoc per sector.
  3) change(86-04-22,Farley), approve(86-07-18,MCR7439),
     audit(86-08-18,Fawcett), install(86-10-20,MR12.0-1189):
     Changed to initialize all possible ss_info.flags.
                                                   END HISTORY COMMENTS */

	dcl     a_code		 fixed bin (35);
	dcl     a_device_type	 fixed bin;
	dcl     a_labelp		 ptr;
	dcl     (a_num_pages, a_baseadd, a_nvtoce)
				 fixed bin;
	dcl     a_defaultsw		 bit (1) aligned;
	dcl     interlace		 fixed bin;
	dcl     loc_dev_type	 fixed bin;	/* the index for things in fs_dev_types constants */

	dcl     bootload_sw		 bit (1) aligned;	/* controls get/put */

	dcl     inbuf		 char (120);
	dcl     1 my_ss_info	 aligned like ss_info;
	dcl     (asl_given, vtoc_constrained)
				 bit (1);
	dcl     (ioa_$nnl, ioa_)	 entry options (variable);
	dcl     bce_query		 entry options (variable);
	dcl     iox_$get_line	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
	dcl     iox_$user_input	 ptr ext static;
	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_count_rel	 entry (fixed bin, ptr, fixed bin (35));
	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	dcl     bce_command_processor_ entry (char (*), entry (ptr, char (*), fixed bin (35)) returns (entry), ptr,
				 fixed bin (35));

	dcl     conversion		 condition;
	dcl     ec		 fixed bin (35);
	dcl     num_pages		 fixed bin (18);
	dcl     NORMAL_ASL		 float bin static init (5.0e0) options (constant);
	dcl     RPV_ASL		 float bin static init (2.0e0) options (constant);
	dcl     (
	        DEFAULT_RPV_HC_SIZE_char
				 char (4) init ("2500"),
	        DEFAULT_RPV_CONF_SIZE_char
				 char (1) init ("4"),
	        DEFAULT_RPV_LOG_SIZE_char
				 char (3) init ("256"),
	        DEFAULT_RPV_BOS_SIZE_char
				 char (3) init ("270"),
	        DEFAULT_RPV_FILE_SIZE_char
				 char (3) init ("255"),
	        DEFAULT_RPV_DUMP_SIZE_char
				 char (4) init ("2000")
	        )			 internal static options (constant);
	dcl     baseadd		 fixed bin (18);
	dcl     rebuild_call	 bit (1);
	dcl     nrec		 fixed bin;
	dcl     (hibase, lobase)	 fixed bin;
	dcl     asl		 float;
	dcl     (put, put_nnl)	 entry options (variable) variable;
	dcl     code		 fixed bin (35);
	dcl     j			 fixed bin;
	dcl     addr		 builtin;
	dcl     ceil		 builtin;
	dcl     char		 builtin;
	dcl     convert		 builtin;
	dcl     divide		 builtin;
	dcl     hbound		 builtin;
	dcl     length		 builtin;
	dcl     ltrim		 builtin;
	dcl     min		 builtin;
	dcl     null		 builtin;
	dcl     string		 builtin;

	rebuild_call = (interlace > 0);
	labelp = a_labelp;
	loc_dev_type = a_device_type;
	bootload_sw = "0"b;
	put = ioa_;
	put_nnl = ioa_$nnl;
	call startover_rq (null);
	if a_defaultsw
	then call end_rq (null);			/* finish up, say nothing */
	if rebuild_call
	then call list_rq (null);
	go to LISTEN;

cold_rpv:
     entry (a_labelp, interlace, a_nvtoce, a_baseadd, a_num_pages, a_defaultsw, a_device_type);
						/* DIFFERENT FROM MAIN ENTRY ! */
	labelp = a_labelp;
	put = ioa_;
	put_nnl = ioa_$nnl;
	bootload_sw = "1"b;
	loc_dev_type = a_device_type;

	call ioa_ ("^/Default RPV layout: (Respond ""end"" to use it.)^/");

	call default_rq (null);
	call list_rq (null);

LISTEN:
	ss_info_ptr = addr (my_ss_info);
	ss_info.request_table_ptr = null ();		/* we find our own commands */
	ss_info.abort_label = LISTEN_again;
	ss_info.name = "fill_vol_extents_";
	ss_info.arg_list_ptr = null ();
	ss_info.info_ptr = null ();
	string (ss_info.flags) = ""b;
	ss_info.flags.forbid_semicolons = "1"b;

	do while ("1"b);				/* exit via nonlocal goto */
LISTEN_again:
	     call prompt_read ("request: ", inbuf);
	     call bce_command_processor_ (inbuf, Find_Request, ss_info_ptr, code);
	     if code ^= 0 & code ^= 100
	     then call put ("Syntax error in request. Please reenter.");
	end;

startover_rq:
     procedure (Info_ptr);
	dcl     Info_ptr		 ptr;
	label.nparts = 0;
	baseadd = -1;
	vtoc_constrained, asl_given = "0"b;
	interlace = 2;
	hibase, num_pages = label.vol_size;
	asl = NORMAL_ASL;
	lobase = 0;
     end startover_rq;


/* These are RPV Cold Boot defaults! */
/* This should not be called from the non-bootload entrypoints */

default_rq:
     procedure (Info_ptr);
	dcl     Info_ptr		 ptr;

	call startover_rq (null);
	asl = RPV_ASL;
	call part_side_door ("hc", "low", DEFAULT_RPV_HC_SIZE_char);
	call part_side_door ("conf", "low", DEFAULT_RPV_CONF_SIZE_char);
	if needs_alt_part (loc_dev_type)
	then call part_side_door ("alt", "high",
		ltrim (
		char (
		divide (last_alt_sect_num (loc_dev_type) - first_alt_sect_num (loc_dev_type) + 1,
		sect_per_cyl (loc_dev_type), 17) * rec_per_cyl (loc_dev_type))));
	call part_side_door ("bos", "high", DEFAULT_RPV_BOS_SIZE_char);
	call part_side_door ("dump", "high", DEFAULT_RPV_DUMP_SIZE_char);
	call part_side_door ("log", "high", DEFAULT_RPV_LOG_SIZE_char);
	call part_side_door ("file", "high", DEFAULT_RPV_FILE_SIZE_char);
	call part_side_door ("bce", "high", ltrim (char (BCE_PART_LTH)));
     end default_rq;

end_rq:
     procedure (Info_ptr);
	declare Info_ptr		 pointer;
	declare 1 found		 aligned,
		2 hc		 bit (1) unaligned,
		2 conf		 bit (1) unaligned,
		2 bos		 bit (1) aligned,
		2 bce		 bit (1) aligned,
		2 file		 bit (1) aligned;

	string (found) = ""b;

	call eval_vtoc_size;			/* Call place to order */
	num_pages = num_pages - vtoc_size;
	if vtoc_size > label.vol_size
	then do;
		call put ("not enough room for vtoc. start over");
		call startover_rq (null);
		go to LISTEN_again;
	     end;
	if baseadd = -1
	then baseadd = vtoc_size + lobase;
	else baseadd = vtoc_size;
	do j = 1 to label.nparts;
	     if label.parts (j).part = "hc"
	     then found.hc = "1"b;
	     else if label.parts (j).part = "bos"
	     then found.bos = "1"b;
	     else if label.parts (j).part = "conf"
	     then do;
		     found.conf = "1"b;
		     if label.parts (j).nrec ^= 4
		     then do;
			     call put ("The size of the conf partition must be 4 records.");
			     return;
			end;
		end;
	     else if label.parts (j).part = "bce"
	     then do;
		     found.bce = "1"b;
		     if label.parts (j).nrec < BCE_PART_LTH
		     then do;
			     call put ("The size of the bce partition must be at least ^d records.", BCE_PART_LTH);
			     return;
			end;
		end;
	     else if label.parts (j).part = "file"
	     then do;
		     found.file = "1"b;
		     if label.parts (j).nrec < 30 | label.parts (j).nrec > 255
		     then do;
			     call put ("The size of the file partition must be between 30 and 255 records.");
			     return;
			end;
		end;

	     if label.parts (j).frec < lobase
	     then label.parts (j).frec = label.parts (j).frec + vtoc_size;
	     if label.parts (j).frec + label.parts (j).nrec > label.vol_size
	     then do;
		     call put ("Not enough room for part ^a. start over", label.parts (j).part);
		     call startover_rq (null);
		     go to LISTEN_again;
		end;
	end;

	if bootload_sw
	then do;
		if ^found.hc | ^found.conf | ^found.bce | ^found.file
		then do;
			call put ("Hardcore (hc), config (conf), bootload file system (file), and");
			call put ("bootload command environment (bce) partitions required on rpv.");
			return;
		     end;

	     end;

	label.vtoc_size = vtoc_size;
	a_baseadd = baseadd;
	a_num_pages = num_pages;
	a_nvtoce = (vtoc_size - VTOC_ORIGIN) * VTOCES_PER_RECORD (loc_dev_type);
	if ^bootload_sw
	then a_code = 0;
	go to RETURN;
     end end_rq;


asl_rq:
     procedure (Info_ptr);
	declare Info_ptr		 pointer;
	declare arg_count		 fixed bin;
	declare arg_list_ptr	 pointer;
	declare ap		 ptr,
	        al		 fixed bin (21),
	        arg		 char (al) based (ap);

	arg_list_ptr = Info_ptr -> ss_info.arg_list_ptr;
	call cu_$arg_count_rel (arg_count, arg_list_ptr, (0));
	if arg_count ^= 1
	then do;
		call put ("Usage: asl FLOAT_AVG");
		return;
	     end;
	call cu_$arg_ptr_rel (1, ap, al, (0), arg_list_ptr);

	on conversion go to badavg;
	asl = convert (asl, arg);
	revert conversion;
	if asl < 0e0
	then do;					/* could be less than 1 */
badavg:
		call put ("Bad average ^a", arg);
		return;
	     end;
	if vtoc_constrained
	then call put ("Using segment length constraint instead of VTOC size.");
	vtoc_constrained = "0"b;
	asl_given = "1"b;
     end asl_rq;


lace_rq:
     procedure (Info_ptr);
	declare Info_ptr		 pointer;
	declare arg_count		 fixed bin,
	        arg_list_ptr	 pointer,
	        ap		 ptr,
	        al		 fixed bin (21),
	        arg		 char (al) based (ap);

	arg_list_ptr = Info_ptr -> ss_info.arg_list_ptr;
	call cu_$arg_count_rel (arg_count, arg_list_ptr, (0));
	if arg_count ^= 1
	then do;
		call put ("Usage: lace LACE_COUNT");
		return;
	     end;

	call cu_$arg_ptr_rel (1, ap, al, (0), arg_list_ptr);

	j = cv_dec_check_ (arg, ec);
	if ec ^= 0 | j < 1
	then do;
		call put ("Bad interlace: ^a", arg);
		return;
	     end;
	interlace = j;
     end lace_rq;

list_rq:
     procedure (Info_ptr);
	declare Info_ptr		 pointer;

	call eval_vtoc_size;			/* Get right stuff */
	call put ("Average seg length = ^.2f", asl);
	call put ("VTOC size = ^d pages, ^d vtoces.", vtoc_size,
	     (vtoc_size - VTOC_ORIGIN) * VTOCES_PER_RECORD (loc_dev_type));
	call put ("^d paging records.", num_pages - vtoc_size);
	call put ("Constrained by ^[VTOC size^;average seg length^].", vtoc_constrained);
	do j = 1 to label.nparts;
	     call put ("part ^a ^[^1s^d.^;^d.^1s^] ^d.", label.parts (j).part, (label.parts (j).frec < lobase),
		label.parts (j).frec, label.parts (j).frec + vtoc_size, label.parts (j).nrec);
	end;
     end list_rq;

quit_rq:
     procedure (Info_ptr);
	dcl     Info_ptr		 ptr;
	dcl     error_table_$action_not_performed
				 fixed bin (35) ext static;
	a_code = error_table_$action_not_performed;
	go to RETURN;
     end quit_rq;

part_side_door:
     procedure (Name, High_Low, Size) options (non_quick);
	declare arg_list_ptr	 ptr;
	declare (Name, High_Low, Size) char (*);
	declare 1 local_ss_info	 aligned like ss_info;

	call cu_$arg_list_ptr (arg_list_ptr);
	local_ss_info.arg_list_ptr = arg_list_ptr;
	call part_rq (addr (local_ss_info));
	return;
     end part_side_door;

part_rq:
     procedure (Info_ptr);
	declare Info_ptr		 pointer;
	declare arg_count		 fixed bin,
	        arg_list_ptr	 ptr,
	        al		 fixed bin (21),
	        ap		 ptr,
	        arg		 char (al) based (ap);

	arg_list_ptr = Info_ptr -> ss_info.arg_list_ptr;
	call cu_$arg_count_rel (arg_count, arg_list_ptr, (0));
	if arg_count ^= 3
	then do;
		call put ("usage: part name high/low nrec.");
		return;
	     end;
	call cu_$arg_ptr_rel (1, ap, al, (0), arg_list_ptr);
	do j = 1 to label.nparts while (label.parts (j).part ^= arg);
	end;
	if j <= label.nparts
	then do;
		call put ("Cannot redefine part ^a (^d. for ^d.)^/Type ""startover"" if necessary.", arg,
		     label.parts (j).frec, label.parts (j).nrec);
		return;
	     end;

	if label.nparts >= hbound (label.parts, 1)
	then do;
		call put ("No more room in label for partitions");
		return;
	     end;

	label.parts (j).part = arg;
	call cu_$arg_ptr_rel (3, ap, al, (0), arg_list_ptr);
						/* NREC */
	nrec = cv_dec_check_ (arg, ec);
	if ec ^= 0 | nrec < 1
	then do;
		call put ("Bad nrec ^a.", arg);
		return;
	     end;

	call cu_$arg_ptr_rel (2, ap, al, (0), arg_list_ptr);
	if arg = "low"
	then do;
		if lobase + nrec > label.vol_size
		then do;
			call put ("part ^a ^a ^d too big for volume", label.parts (j).part, arg, nrec);
			return;
		     end;
		label.parts (j).frec = lobase;
		lobase = lobase + nrec;
		baseadd = -1;
	     end;
	else if arg = "high"
	then do;
		if hibase - nrec < lobase + VTOC_ORIGIN
		then do;				/* doesn't account for vtoc */
			call put ("part ^a ^a ^d too big for volume", label.parts (j).part, arg, nrec);
			return;
		     end;
		hibase = hibase - nrec;
		label.parts (j).frec = hibase;
	     end;
	else do;
		call put ("^a neither high nor low", arg);
		return;
	     end;
	num_pages = num_pages - nrec;
	label.parts (j).nrec = nrec;
	if j > label.nparts
	then label.nparts = j;
     end part_rq;

vtoc_rq:
     procedure (Info_ptr);

	declare Info_ptr		 pointer;
	declare vtoc_entry		 bit (1) aligned;
	declare arg_count		 fixed bin,
	        arg_list_ptr	 pointer,
	        al		 fixed bin (21),
	        ap		 pointer,
	        arg		 char (al) based (ap);

	vtoc_entry = "1"b;
	go to COMMON;

nvtoce_rq:
     entry (Info_ptr);

	vtoc_entry = "0"b;

COMMON:
	arg_list_ptr = Info_ptr -> ss_info.arg_list_ptr;
	call cu_$arg_count_rel (arg_count, arg_list_ptr, (0));

	if arg_count ^= 1
	then do;
		call put ("Usage: ^[nvtoce N_VTOCEs^;vtoc N_VTOC_RECORDS^]", vtoc_entry);
		return;
	     end;

	call cu_$arg_ptr_rel (1, ap, al, (0), arg_list_ptr);
	j = cv_dec_check_ (arg, ec);
	if ec ^= 0 | j < VTOC_ORIGIN + 1
	then do;
		call put ("Bad vtoc size: ^a", arg);
		return;
	     end;

	if ^vtoc_entry				/* nvtoces */
	then j = ceil (j / VTOCES_PER_RECORD (loc_dev_type)) + VTOC_ORIGIN;

	if (j - VTOC_ORIGIN) * VTOCES_PER_RECORD (loc_dev_type) > MAX_VTOCE_PER_PACK
	then do;
		if vtoc_entry
		then call put ("Input value too large, max vtoc size is ^d records.",
			(MAX_VTOCE_PER_PACK / VTOCES_PER_RECORD (loc_dev_type)) + VTOC_ORIGIN);
		else call put ("Input value to large, max nvtoce is ^d.", MAX_VTOCE_PER_PACK);
		return;
	     end;
	if asl_given
	then do;
		asl_given = "0"b;
		call put ("Using VTOC size constraint instead of seg. length constraint.");
	     end;

	vtoc_constrained = "1"b;

	vtoc_size = j;
     end vtoc_rq;

help_rq:
     procedure (Info_ptr);
	dcl     Info_ptr		 ptr;

	call put ("Requests are:^/^5xstartover, ^[default^;quit^], part, list, avg, vtoc, nvtoce, ^[lace, ^]or end.",
	     bootload_sw, rebuild_call);

     end help_rq;


Find_Request:
     procedure (Info_ptr, Command, Code) returns (entry);

	declare Command		 character (*);
	declare Code		 fixed bin (35);	/* not used -- we nonlocal goto instead */
	declare Info_ptr		 pointer;

	Code = 0;

	if Command = "part"
	then return (part_rq);
	else if Command = "startover"
	then return (startover_rq);
	else if Command = "list" | Command = "ls"
	then return (list_rq);
	else if Command = "avg" | Command = "asl"
	then return (asl_rq);
	else if Command = "vtoc"
	then return (vtoc_rq);
	else if Command = "nvtoce"
	then return (nvtoce_rq);
	else if rebuild_call & Command = "lace"
	then return (lace_rq);
	else if ^bootload_sw & Command = "quit"
	then return (quit_rq);
	else if bootload_sw & Command = "default"
	then return (default_rq);
	else if Command = "end"
	then return (end_rq);
	else if Command = "help"
	then return (help_rq);
	else do;
		call put ("Unknown request ""^a""", Command);
		return (help_rq);
	     end;
     end Find_Request;

eval_vtoc_size:
     proc;

	if vtoc_constrained
	then asl = (num_pages - vtoc_size) / ((vtoc_size - VTOC_ORIGIN) * VTOCES_PER_RECORD (loc_dev_type));
	else do;
		vtoc_size =
		     (num_pages + asl * VTOCES_PER_RECORD (loc_dev_type) * VTOC_ORIGIN)
		     / (1 + asl * VTOCES_PER_RECORD (loc_dev_type)) + .5;
						/* I got A's in algebra */
		vtoc_size = min (vtoc_size, (MAX_VTOCE_PER_PACK / VTOCES_PER_RECORD (loc_dev_type)) + VTOC_ORIGIN);
	     end;
     end eval_vtoc_size;

prompt_read:
     procedure (prompt, result);
	dcl     prompt		 char (*);
	dcl     result		 char (*);

	if bootload_sw
	then call prompt_read_bootload (prompt, result);
	else call prompt_read_iox (prompt, result);
	return;

prompt_read_bootload:
     procedure (prompt, result);
	dcl     prompt		 char (*);
	dcl     result		 char (*);

	call bce_query (result, "^a ", prompt);		/* sp cause ^a rtrims */
	return;
     end prompt_read_bootload;

prompt_read_iox:
     procedure (prompt, result);
	dcl     prompt		 char (*);
	dcl     result		 char (*);
	dcl     code		 fixed bin (35);
	dcl     n_read		 fixed bin (21);
	dcl     error_table_$long_record
				 fixed bin (35) ext static;

REREAD:
	call ioa_$nnl ("^a", prompt);
	result = "";
	call iox_$get_line (iox_$user_input, addr (result), length (result), n_read, code);
	if code = error_table_$long_record
	then do;
		call ioa_ ("Line too long. Please reenter.");
		go to REREAD;
	     end;
	else if n_read = 0
	then go to REREAD;
	return;
     end prompt_read_iox;
     end prompt_read;

RETURN:
	return;

/* format: off */
%page; %include bce_partition_layout;
%page; %include bce_subsystem_info_;
%page; %include disk_pack;
%page; %include fs_dev_types;
%page; %include fs_vol_label;

     end fill_vol_extents_;
