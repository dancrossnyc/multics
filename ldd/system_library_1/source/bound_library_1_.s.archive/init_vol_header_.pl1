/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-01-16,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-13,LJAdams), install(86-07-17,MR12.0-1097):
     Add support for subvolumes, and 512_WORD_IO, 3380 and 3390.
                                                   END HISTORY COMMENTS */


init_vol_header_: procedure (a_pvtx, a_dev_type, a_pagep, a_write_routine, a_errpart, a_nvtoces, a_baseadd, a_numpag, a_code);

/* Routine to initialize VTOC, Vol Map, and rest of header, given a label.
   Commoned from init_empty_root and init_disk_pack_, 06/25/76, Bernard Greenberg.
   General map generator `a la fsout_vol added at this time too. 
   Modified March 1982 by J. Bongiovanni for VTOC Map

*/

dcl (pvtx, a_pvtx) fixed bin;
dcl (pagep, a_pagep) ptr;
dcl (dev_type, a_dev_type) fixed bin;
dcl (n_vtoces, a_nvtoces) fixed bin;
dcl (baseadd, a_baseadd) fixed bin;
dcl (num_pages, a_numpag) fixed bin;
dcl  a_errpart char (*), thing char (20);
dcl  null builtin;

dcl (code, a_code) fixed bin (35);

dcl (a_write_routine, write_disk) entry (fixed bin, fixed bin, ptr, fixed bin (35)) variable;

dcl  tablen fixed bin;
dcl  Srel fixed bin;
dcl (i, j) fixed bin;

dcl  page bit (36*1024) based (pagep);

dcl (vtoc_end, current, vtoc_size, last, recno, map_addr) fixed bin;


dcl  ALL_FREE bit (36) static options (constant) init ("011111111111111111111111111111111000"b);

	        
dcl (addr, addrel, divide, fixed, mod, rel, substr) builtin;
	        
%page;


	write_disk = a_write_routine;
	pvtx = a_pvtx;
	dev_type = a_dev_type;
	pagep = a_pagep;
	labelp = pagep;
	n_vtoces = a_nvtoces;
	baseadd = a_baseadd;
	num_pages = a_numpag;

	if n_vtoces > MAX_VTOCE_PER_PACK then do;
	     a_code = 99;
	     a_errpart = "vtoc too big";
	     return;
	end;


/* Write the label to the disk */

	label.volmap_version = 1;
	thing = "label";
	call write_disk (pvtx, LABEL_ADDR, labelp, code);
	if code ^= 0 then go to ERR;

/* Initialize the volume map */

	page = "0"b;
	labelp = null;
	vol_mapp = pagep;				/* New Pointer */
	vol_map.base_add = baseadd;
	vol_map.n_rec = num_pages;
	vol_map.n_free_rec = num_pages;
	tablen = divide (num_pages + 31, 32, 17, 0);
	vol_map.bit_map_n_words = tablen;
	Srel = fixed (rel (addr (vol_map.bit_map)), 18) - fixed (rel (vol_mapp), 18);

	map_addr = VOLMAP_ADDR;

	do i = 1 to tablen;
	     if mod (i, 1024) = 1025 - Srel then do;
		call write_disk (pvtx, map_addr, pagep, code);
		if code ^= 0 then go to ERR;
		map_addr = map_addr + 1;
		vol_mapp = addrel (vol_mapp, -1024);
		page = "0"b;
	     end;
	     vol_map.bit_map (i) = ALL_FREE;
	end;

	j = mod (num_pages, 32);
	if j ^= 0 then substr (vol_map.bit_map (tablen), j + 2) = "0"b; /* Truncate the tail */

	do map_addr = map_addr to DUMPER_BIT_MAP_ADDR - 1 by 1; /* Clear out last buf, zeros to rest. */
	     call write_disk (pvtx, map_addr, pagep, code);
	     if code ^= 0 then go to ERR;
	     page = "0"b;
	end;

	vol_mapp = null;

/* Initialize the VTOC header (for compatibility with pre-MR10) */

	page = "0"b;
	vtoc_headerp = pagep;

	vtoc_size = VTOC_ORIGIN + divide (n_vtoces + VTOCES_PER_RECORD (dev_type) - 1, VTOCES_PER_RECORD (dev_type), 17, 0);
	vtoc_end = vtoc_size - 1;

	vtoc_header.version = 1;
	vtoc_header.n_vtoce = n_vtoces;
	vtoc_header.vtoc_last_recno = vtoc_end;
	vtoc_header.n_free_vtoce = n_vtoces;
	vtoc_header.first_free_vtocx = 0;

	thing = "vtoc hdr";
	call write_disk (pvtx, DUMPER_BIT_MAP_ADDR, pagep, code);
	if code ^= 0 then goto ERR;

	page = "0"b;
	do recno = DUMPER_BIT_MAP_ADDR + 1 to VTOC_ORIGIN -1;
	     call write_disk (pvtx, recno, pagep, code);
	     if code ^= 0 then go to ERR;
	end;

/* Initialize the VTOC Map */

	page = ""b;
	vtoc_mapp = pagep;
	vtoc_map.n_vtoce = n_vtoces;
	vtoc_map.n_free_vtoce = n_vtoces;
	vtoc_map.vtoc_last_recno = vtoc_end;
	vtoc_map.bit_map_n_words = divide (n_vtoces + 31, 32, 17);
	
	do i = 0 to vtoc_map.bit_map_n_words - 1;
	     vtoc_map.bit_map (i) = ALL_FREE;
	end;
	j = mod (n_vtoces, 32);
	if j ^= 0 then substr (vtoc_map.bit_map (vtoc_map.bit_map_n_words - 1), j + 2) = ""b;
	
	thing = "vtoc map";
	call write_disk (pvtx, VTOC_MAP_ADDR, vtoc_mapp, code);
	if code ^= 0 then goto ERR;
	

/* Initialize the VTOC array from record 8 to the last record assigned to the VTOC. */
/* The VTOCE's are all zero. */

	thing = "vtoc";
	current = 0;
	last = n_vtoces - 1;
	page = ""b;

	do recno = VTOC_ORIGIN to vtoc_end;
	     call write_disk (pvtx, recno, pagep, code);
	     if code ^= 0 then goto ERR;
	end;


	a_code = 0;
	return;

ERR:	a_errpart = thing;
	a_code = code;
	return;


%page; %include disk_pack;
%page; %include fs_vol_label;
%page; %include vtoc_header;
%page; %include vol_map;
%page; %include vtoc_map;
     end;
