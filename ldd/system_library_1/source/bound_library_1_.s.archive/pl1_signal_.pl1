/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-05-21,RBarstad), approve(87-07-13,MCR7710),
     audit(87-05-21,GDixon), install(87-08-04,MR12.1-1055):
     Add quit_info structure if quit condition.
                                                   END HISTORY COMMENTS */


pl1_signal_:	proc options(support);

/* This procedure is called to signal all pl1 conditions.
   It was originally coded by P. A. Belmont and also contained a default handler
   for the pl1 conditions.    It was recoded by M. Weaver 12/27/73 to delete the
   handler portion and the entry for version 1 programs and to call signal_
   with the new structure for pl1 conditions.  The old method of storing ondata in
   an external data base must also be maintained temporarily for compatibility. */

/* Modified April 81 Benson I. Margulies for quiet_restart of stringsize */
/* Modified Febrary 84 Tom Oke to accept 415 code (invalid or unimp conversion)
   from any_to_any_. */
%page;

dcl  psp ptr;
dcl (fsbp, file_p, fabptr) ptr;
dcl  based_ptr ptr based;
dcl  cond_ptr ptr;

dcl  tc256v char(256) var;
dcl  cname char(*);
dcl  conname char(32);
dcl  where char(4) aligned;
dcl  vchar256 char(256) var;
dcl  vchar256p char(256) var;
dcl  filename33 char(33) aligned;

dcl  based_bit bit(36) aligned based;

dcl  tc256vsw fixed bin;
dcl (codex, code) fixed bin(35);
dcl (file_related, numb, numbp, j) fixed bin;
dcl  save_ondata_based(ondata_$ondatalength) fixed bin(35) based;
dcl  save_ondata(300) fixed bin(35);

dcl (addr, index, size, substr, null, unspec) builtin;

dcl  signal_ entry options(variable);
dcl  pl1_signal_$help_plio2_signal_ entry(char(*), ptr, fixed bin(35), char(256) var, fixed bin);
dcl cleanup condition;

dcl 1 v2fab aligned  based,
	2 sw bit(36),
	2 name char(32);

declare 1 auto_pl1_info aligned like pl1_info automatic;

dcl 1 pl1_quit_info aligned like quit_info;

dcl TRUE bit(1) int static options (constant) init ("1"b);
%page;
	return;					/* this entry used to be for area */

math_error_:	entry (code);
	where = "math";
	pl1_info_ptr = addr (auto_pl1_info);
	codex = code;
	if codex < 1 | codex > 100 then go to bad_oncode;
	file_p = null;
	file_related = 0;
	conname = "error";
	go to copy_ondata;

pl1_signal_from_ops_:	entry (cname256, cnamelen, qualifier, code, fileaddr);

/* format:off */
/* oncode usage:
   1000 - signal statement
   415 - invalid or unimp
   701 - stringrange
   702 - stringsize
   703 - size
   704 - subscriptrange
   710 - undefined pl1_operator_
*/
/* format:on */

dcl (fileaddr, qualifier) ptr;
dcl  cname256 char(256) unaligned;
dcl  cnamelen fixed bin;

	pl1_info_ptr = addr (auto_pl1_info);
	numb = 1;
	vchar256 = "";
	file_p = fileaddr;
	codex = code;
	if (codex < 701 & codex ^= 415) | codex > 1000
	then go to bad_oncode;
	conname = substr(cname256, 1, cnamelen);
	where = "ops ";
	go to copy_ondata;

help_plio2_signal_:	entry(cname, qualifier, code, vchar256p, numbp);

	pl1_info_ptr = addr (auto_pl1_info);
	vchar256 = vchar256p;
	numb = numbp;
	if code = -1 then codex = 600;		/* stringsize sends the code -1 */
	else codex = code + 200;		/* convention to place the version 2 oncodes
						   in the range 301 - 600 */
	if codex < 301 | codex > 600 then go to bad_oncode;
	where = "ver2";
	conname = cname;

	/* ASSERT that qualifier = addr(PS) */
	if qualifier = null then fsbp = null;
	else do;
	     fsbp = qualifier -> ps.fsbp;
	     if cname ^= "undefinedfile" /* protect open statements */
	     then if qualifier -> ps.job.string then fsbp = null; /* since job bits are trash for open statements */
	end;
	if fsbp ^= null then file_p = qualifier -> ps.file_p;
				/* if file_p ^= null then status_code = fsbp->fsbr.lnzc */
	else file_p = null;
	go to copy_ondata;

pl1_ops_join:

	cond_ptr = null;

	if numb = -1 | (conname = "key" & where = "ops ")
	then do;
	     pl1_info.onkey_sw = "1"b;
	     ondata_$onkey, pl1_info.onkey_onfield = vchar256;
	end;
  
          if conname = "stringsize" then pl1_info.action_flags.quiet_restart = "1"b;

	if conname = "conversion" then do;
	     ondata_$onsource, pl1_info.onsource = vchar256;
	     ondata_$oncharindex = numb + 3;		/* 1st char becomes offset 4 in var char string */
	     pl1_info.oncharindex = numb;		/* newer routines use substr */
	     pl1_info.onsource_sw, pl1_info.onchar_sw = "1"b;
	end;

	else if conname = "name" then do;
	     pl1_info.onkey_onfield,
	     ondata_$datafield = vchar256;
	     pl1_info.onfield_sw = "1"b;
	end;

	if file_p ^= null then file_related = 2;
	else file_related = 0;

	if conname = "endpage"				/* see if we need a file */
	| conname = "endfile"
	| conname = "transmit"
	| conname = "record"
	| conname = "undefinedfile"
	| conname = "name"
	| conname = "key"
	then do;
	     file_related = 1;				/* must have a file */
	     if file_p = null then call pl1_signal_$help_plio2_signal_ ("error", null, 169, "", 0);
						/* 169 + 200 = 369 - a v2 error code */
						/* no one should restart this */
	     ondata_$fileptr = file_p;		/* preserve old fileptr unless have new one */
	     pl1_info.file_ptr_sw = "1"b;
	     pl1_info.file_ptr = file_p;
	end;

signal_it:
	if (conname = "quit")
	     then do;
	     cond_ptr = addr (pl1_quit_info); /* special info for quit */
	     unspec(pl1_quit_info) = "0"b;
	     pl1_quit_info.header.length = size (pl1_quit_info);
	     pl1_quit_info.header.version = condition_info_version_1;
	     pl1_quit_info.switches.ips_quit = TRUE; /* this is the important switch */
 	     end;

	else do; /* as before */
	cond_ptr = addr(pl1_info);
	ondata_$oncode, pl1_info.oncode = codex;
	pl1_info.oncode_sw = "1"b;
	if file_related = 1 | (file_related = 2 & conname = "conversion") then do;
	     fabptr = file_p -> based_ptr;
	     filename33 = fabptr -> v2fab.name;
	     j = index(filename33, " ");
	     ondata_$onfile, pl1_info.onfile = substr(filename33, 1, j-1);
	     pl1_info.onfile_sw = "1"b;
	end;

	ondata_$condition_name = conname;
	ondata_$onloc = "?";			/* don't set for old procs--make them recompile */
	pl1_info.length = size(pl1_info);
	pl1_info.version = 1;
	pl1_info.info_string = "";
	pl1_info.status_code = 0;
	pl1_info.id = "pliocond";
	end;

	call signal_(conname, null, cond_ptr);	/* signal at last */

	if conname = "conversion" then if where = "ver2" then vchar256p = ondata_$onsource;

	call restoreondata();
	return;

copy_ondata:
	addr(pl1_info.action_flags) -> based_bit,
	addr(pl1_info.content_flags) -> based_bit = "0"b;
	addr(save_ondata) -> save_ondata_based = addr(ondata_$fileptr) -> save_ondata_based;
	on cleanup call restoreondata();
	if where = "math" then go to signal_it;
	go to pl1_ops_join;

bad_oncode:
	call pl1_signal_$help_plio2_signal_ ("error", null, 174, "", 0);
	return;				/* illegal oncode value */

restoreondata:	proc;
	if ondata_$condition_name ^= "conversion" then do;
	     tc256v = ondata_$onsource;
	     tc256vsw = 1;
	end;
	else tc256vsw = 0;

	addr(ondata_$fileptr) -> save_ondata_based = addr(save_ondata) -> save_ondata_based;

	if tc256vsw = 1 then ondata_$onsource = tc256v;

	end;
%page;
%include condition_info;
%page;
%include condition_info_header;
%page;
%include pl1_info;
%page;
%include quit_info;
%page;
%include on_data_;
%page;
%include plio2_ps;

	end;
