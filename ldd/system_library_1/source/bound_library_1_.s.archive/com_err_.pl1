/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
com_err_:
     procedure options (variable);

/* com_err_ formats error messages and signals the condition "command_error".
   Its calling sequence is of the form: call com_err_(code, callername, ioa_control, arg1, arg2,...);.
   If code > 0, the corresponding error_table_ message is included.  Callername is the name of the
   calling procedure and is inserted with a colon at the beginning of the error message.
   It may be either varying or fixed length; if it is null, the colon is omitted.
   The rest of the arguments are optional; however, if arg1, etc. are present, ioa_control
   must also be present.  ioa_control is a regular ioa_ control string and the argi are the
   format arguments to ioa_.  If print_sw = "1"b after signalling "command_error", the
   error message is printed.
   Several other entry points are included in this procedure.  The active_fnc_err_
   entry is similar to com_err_ except that the condition "active_function_error" is
   signalled.  The suppress_name entry is identical to com_err_ except that the
   callername is omitted from the error message.
   There is an entry point for convert_status_code_, which simply looks up the code and
   returns the error_table_ message.
*/
/* initially coded by M Weaver June 1969 */
/* recoded in PL/I  with several facilities added by M Weaver 2 June 1970 */
/* major surgery by J. Stern on 9/3/71 */
/* minor bug fixes by M. Weaver 3 November 1971 */
/* completely changed error code format and fixed a bug, D. Reed 6/21/72 */
/* fixed bug in argument passing to command_error signalled procedure, D. Reed 7/20/71 */
/* changed check_fs_errcode_ entry to convert_status_code_, R. Mullen 12/13/72 */
/* modified to pass info structures with standard headers, M. Weaver 8/73 */
/* Entry point active_fnc_err_$af_suppress_name added by S. Herbst 8/25/78 */
/* Modified 781203 by PG to accept any computational data type for arg 1. */
/* Modified: 8 August 1980 by G. Palter to recognize error_table_$active_function as a special case and signal
   active_function_error rather than command_error */
/* Modified: June 1981 to use new include file and set quiet_restart, B. Margulies */
/* Modified: February 1982 to establish any_other handler while reading error table, E. N. Kittlitz */
/* Modified: May 1984 for calling within bce, Keith Loepere */

/* Automatic */

dcl  save_code fixed bin (35);
dcl  (active_fnc_sw, suppress_name_sw, convert_sw, packed) bit (1) aligned;
dcl  (ndims, scale, len, lng, type, bi, hi, lo) fixed bin (17);
dcl  (code, ec) fixed bin (35);
dcl  (q, arg_list_ptr, tp) ptr;
dcl  arg_ptr ptr;
dcl  prec fixed bin;
dcl  buffer char (256) aligned,
     retstring char (256);

%include condition_info_header;
%include com_af_error_info;
%include mc;

dcl  1 error_info aligned like com_af_error_info;

/* based */

dcl  strlng bit (9) aligned based (tp);			/* used to reference long message length */
dcl  char8 char (8) aligned based;			/* used to reference short message */
dcl  num fixed bin (17) based;
dcl  based_code fixed bin (35) based;
dcl  callername char (error_info.name_lth) based (error_info.name_ptr),
     work_string char (lng) aligned based;

dcl  1 code_format aligned based (addr (code)),
       2 segno bit (18) unal,
       2 offset bit (18) unal;

/* builtins */

dcl  (addr, addrel, baseno, baseptr, bin, binary, bit, fixed, length, null, rtrim, size, string, substr, ptr) builtin;

dcl  request_abort_ condition;  /* for aborting bootload active functions */

/* entries */

dcl
     bce_error$com_err entry options (variable),
     condition_ entry (char (*), entry),
     reversion_ entry (char (*)),
     cu_$arg_list_ptr ext entry (ptr),
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cu_$arg_count ext entry returns (fixed bin),
     cu_$generate_call entry (entry, ptr),
     decode_descriptor_ ext entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin),
     hcs_$high_low_seg_count entry (fixed bin, fixed bin),
     ioa_$rsnnl ext entry options (variable),
     ioa_$general_rs ext entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned),
     iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35)),
     signal_ ext entry (char (*), ptr, ptr, ptr);

/* external static */

dcl  error_table_$ ext fixed bin aligned;
dcl  error_table_$active_function fixed binary (35) external;
dcl  iox_$error_output ptr external static;
dcl  sys_info$service_system bit (1) aligned external static;

/* internal static */

dcl  nl char (1) aligned static init ("
");

/* include files */

%include desc_dcls;
%include std_descriptor_types;

/* program */

	active_fnc_sw,
	     suppress_name_sw = "0"b;
	go to join;

suppress_name:
     entry options (variable);

	active_fnc_sw = "0"b;
	suppress_name_sw = "1"b;
	go to join;

active_fnc_err_:
     entry options (variable);

	active_fnc_sw = "1"b;
	suppress_name_sw = "0"b;
	go to join;

af_suppress_name:
     entry options (variable);

	active_fnc_sw, suppress_name_sw = "1"b;

join:
	call cu_$arg_list_ptr (arg_list_ptr);

	if ^sys_info$service_system then do;  /* let bootload routine do it */
	     call cu_$generate_call (bce_error$com_err, arg_list_ptr);
	     if active_fnc_sw then signal request_abort_;
	     return;
	end;

	call cu_$arg_ptr (1, arg_ptr, (0), ec);
	call decode_descriptor_ (arg_list_ptr, 1, type, packed, ndims, prec, scale);

	if (type = real_fix_bin_1_dtype) & (packed = "0"b)
	then code = arg_ptr -> based_code;
	else do;
	     intype = 2 * type + bin (packed, 1);

	     if (type >= bit_dtype) & (type <= varying_char_dtype)
	     then inclength = prec;
	     else do;
		info.inscale = scale;
		info.inprec = prec;
	     end;
	     outtype = 2 * real_fix_bin_1_dtype;
	     outfo.outscale = 0;
	     outfo.outprec = 35;
	     call assign_ (addr (code), outtype, outscale_prec, arg_ptr, intype, inscale_prec);
	end;

/* save status code because it will be clobbered by the statements that address the error table. */

	save_code = code;

/* get callername */

	call cu_$arg_ptr (2, error_info.name_ptr, error_info.name_lth, ec);
	call decode_descriptor_ (arg_list_ptr, 2, type, packed, ndims, error_info.name_lth, scale);
	if type = varying_char_dtype then		/* varying string: use current length */
	     error_info.name_lth = addrel (error_info.name_ptr, -1) -> num;

	if suppress_name_sw then do;
	     bi = 1;
	     go to no_name;
	end;

	if error_info.name_lth ^= 0 then do;		/* put caller name into buffer */
	     buffer = rtrim (callername) || ": ";
	     bi = length (rtrim (buffer)) + 2;		/* index of next character */
	     if bi = 3 then bi = 1;			/* caller name was blank */
	end;
	else bi = 1;				/* null callername */

/* get system message */

no_name:	if code ^= 0 then do;			/* get message from error_table_ */
	     convert_sw = "0"b;			/* this is not the convert_status_code_ entry point */
	     go to find;				/* get pointer to correct message */
continue:	     bi = bi + lng - 1;
	end;

/* get user message */

	if cu_$arg_count () > 2 then do;
	     if code ^= 0 then do;			/* put a blank between system message and caller message */
		substr (buffer, bi, 1) = " ";		/* append blank */
		bi = bi + 1;			/* update length */
	     end;
	     call ioa_$general_rs (arg_list_ptr, 3, 4, retstring, len, "0"b, "0"b); /* add new line later */
	     do len = len by -1 to 1 while (substr (retstring, len, 1) = " "); /* Strip off trailing blanks */
	     end;
	     if len ^= 0
	     then do;
		substr (buffer, bi, len) = substr (retstring, 1, len);
		bi = bi + len;
	     end;
	     else bi = bi - 1;			/* Kill the space we just put in! */
	end;

	substr (buffer, bi, 1) = nl;			/* always add new-line */
	bi = bi + 1;				/* for the last time... */

/* fill in the rest of error_info structure */

	string (error_info.action_flags) = ""b;
	error_info.length = size (error_info);
	error_info.version = com_af_error_info_version_3;
	error_info.status_code = save_code;		/* the unclobbered code is passed to signal */
	error_info.action_flags.quiet_restart = "1"b;	/* will be diddled below */
	error_info.errmess_ptr = addr (buffer);
	error_info.errmess_lth = bi - 1;
	error_info.max_errmess_lth = 256;
	error_info.info_string = substr (buffer, 1, error_info.errmess_lth);
	error_info.print_sw = "1"b;

/* signal the error condition */

	if (active_fnc_sw | (error_info.status_code = error_table_$active_function)) then do;
	     error_info.quiet_restart = "0"b;
	     error_info.action_flags.default_restart = "0"b;
	     call signal_ ("active_function_error", null, addr (error_info), null);
	end;
	else do;
	     error_info.action_flags.default_restart = "1"b;
	     call signal_ ("command_error", null, addr (error_info), null);
	end;

	if error_info.print_sw
	then call iox_$put_chars (iox_$error_output, error_info.errmess_ptr, error_info.errmess_lth, ec);

	return;

/* section to look up code in error_table_; "returns" pointer to message */
check_fs_errcode_:					/* this entry is obsolete name */
convert_status_code_: entry (P_code, shortinfo, longinfo);

dcl  P_code fixed bin (35),
     shortinfo char (8) aligned,
     longinfo char (100) aligned;

	code, save_code = P_code;
	if code = 0 then do;
	     shortinfo = "";
	     longinfo = "";
	     return;
	end;
	convert_sw = "1"b;

find:						/* Figure out what sort of message to give back */
	call hcs_$high_low_seg_count (hi, lo);		/* Have to call every time, since high-seg is dynamic */
	hi = hi + lo;				/* Get highest valid segment number */
	if code_format.segno = "000111111111111111"b then /* 077777(8) segno means code comes from system error table */
	     code_format.segno = bit (binary (baseno (addr (error_table_$)), 18, 0), 18);
	else if bin (code_format.segno, 18) <= lo	/* Don't want to access supervisor segs */
	then go to errdoc;
	else if bin (code_format.segno, 18) > hi then go to errdoc; /* Similar for large values */
	else if code_format.segno & "111"b then go to errdoc; /* negative and large codes too */
	q = baseptr (code_format.segno);
	tp = ptr (q, code_format.offset);		/* get location of long string message */

	call condition_ ("any_other", any_other_handler);

	lng = fixed (tp -> strlng, 9) + 1;
	if convert_sw then
	     do;
	     shortinfo = addrel (tp, -2) -> char8;
	     longinfo = substr (tp -> work_string, 2);
	     return;
	end;
	else do;
	     substr (buffer, bi, lng) = substr (tp -> work_string, 2);
	     call reversion_ ("any_other");
	     go to continue;
	end;

errdoc:						/* couldn't find code in error_table_ */
	call reversion_ ("any_other");
	code = save_code;				/* may have been diddled */
	if code < 0				/* I/O code? */
	then call ioa_$rsnnl (" I/O status ^w", retstring, lng, code);
	else call ioa_$rsnnl (" Code ^d.", retstring, lng, code);
						/* Insert a blank in front so that retstring can be referenced the same as an acc string */
	if convert_sw then do;			/* convert_status_code_ case */
	     if code < 0
	     then shortinfo = "iostatus";		/* Return different short message */
	     else shortinfo = "xxxxxxxx";
	     longinfo = substr (retstring, 2);
	     return;
	end;
	else do;					/* com_err_ case */
	     tp = addr (retstring);
	     substr (buffer, bi, lng) = substr (tp -> work_string, 2);
	     go to continue;			/* continue processing */
	end;

unpack_system_code_: entry (packed_code, bin_code);

dcl  packed_code bit (*) unaligned,
     bin_code fixed bin (35) aligned;

	if packed_code = "0"b then bin_code = 0;	/* if zero, then no error */
	else bin_code = binary (packed_code, 35) + 111111111111111000000000000000000b;
						/* add in the magic constant */
	return;


/* condition hander.  This handler is ONLY active when convert_status_code_
   or com_err_ is attempting to reference the text of the error table.
   If it is probable that the fault occured as a result of such a reference,
   we punt picking up text, and will instead generate a "Code xxx" message. */

any_other_handler: proc (mc_ptr, cname, coptr, infoptr, continue);

dcl  cname char (*);
dcl  mc_ptr ptr;
dcl  coptr ptr;
dcl  infoptr ptr;
dcl  continue bit (1);

	mcp = mc_ptr;
	scup = addr (mc.scu);
	if cname = "cleanup" then return;		/* already squeaky */
	if binary (baseno (tp), 18) = binary (scu.tsr, 15) then /* talking about the right segment? */
	     if cname = "out_of_bounds" |		/* is it a reasonable fault? */
		cname = "seg_fault_error" |
		cname = "not_in_read_bracket" |
		cname = "no_read_permission" then
		go to errdoc;			/* yep - bogus error code */
	continue = "1"b;				/* not for us */
     end;

     end;
