/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* format: style4 */

fsout_vol: proc (tx, SHUT);

/* FSOUT_VOL - Update the volume map, VTOC header, and label
   for one physical volume.

   This program is called at volume demount time, which includes shutdown, and
   at the time that a volume  is accepted.  All calls except SHUT calls cause
   the label to indicate that volume inconsistencies exist.

   WARNING: This program uses read_disk.

   First coding by Tom VanVleck.

   Modified by Greenberg for dynamic demount, large volume maps, cross-bootload
   paging device management, and disk table location, at various times.
   Modified by D. Vinograd 6/76 to write out volume dumper bit map into volume header
   Modified by R. Holmstedt 10/80 to use fsdisk_error_message in syserr message.
   Modified by J. Bongiovanni, March 1982, for record stocks and VTOCE stocks
   Modified by J. Bongiovanni, August 1982, to update vol_trouble_count in label
   always (for scavenger)
   Modified '82 for english error codes
   Modified by E. N. Kittlitz, September 1983, clear label pad fields.
*/


/****^  HISTORY COMMENTS:
  1) change(88-05-27,GWMay), approve(88-05-27,MCR7883),
     audit(88-06-14,Beattie), install(88-07-19,MR12.2-1061):
     Added assignment of the inconsistent volume dumper bit map flag.
  2) change(88-09-07,Beattie), approve(88-09-19,MCR7989),
     audit(88-10-06,Farley), install(88-10-10,MR12.2-1155):
     Fix so that PV label information is not displayed in error messages
     until it is read from the disk.
                                                   END HISTORY COMMENTS */


/* =================================================== */

	labelp, vtoc_headerp, vol_mapp = null;		/* Init variables */
	have_pv_label = "0"b;			/* Don't have a PV label to display. */
	pvt_arrayp = addr (pvt$array);

	pvtep = addr (pvt_array (tx));		/* Get ptr to the subject pvte. */

/* If shutting the volume down, write out maps and dumper bit map */

	if SHUT = 1 then do;

/* If the volmap_seg exists, update the header and write it to disk.
   It may not exist because of crashes during mount/demount or
   ESD failures */

	     if pvte.volmap_astep ^= null ()
	     then do;

		astep = pvte.volmap_astep;

		call pmut$swap_sdw (addr (volmap_abs_seg$), addr (pvte.volmap_seg_sdw));

		if pvte.vtoc_map_stock_ptr ^= null ()
		then do;

		     call vtoce_stock_man$drain_stock (pvtep);
		     vtoc_mapp = ptr (addr (volmap_abs_seg$), pvte.vtoc_map_offset);

		     on page_fault_error begin;
			call dsker (WRITE, VTOC_MAP);
			goto END_VTOC_MAP_UPDATE;
		     end;

		     vtoc_map.n_free_vtoce = pvte.n_free_vtoce;
END_VTOC_MAP_UPDATE:
		     vtoce_stockp = pvte.vtoc_map_stock_ptr;
		     call stock_man$free_vtoce_stock (pvtep, vtoce_stockp);

		     revert page_fault_error;
		end;

		if pvte.volmap_stock_ptr ^= null ()
		then do;

		     call page$drain_record_stock (pvtep);
		     vol_mapp = addr (volmap_abs_seg$);

		     on page_fault_error begin;
			call dsker (WRITE, VOL_MAP);
			goto END_VOLMAP_UPDATE;
		     end;

		     vol_map.n_free_rec = pvte.nleft;
		     vol_map.n_rec = pvte.totrec;

END_VOLMAP_UPDATE:
		     record_stockp = pvte.volmap_stock_ptr;
		     call stock_man$free_record_stock (pvtep, record_stockp);

		     revert page_fault_error;
		end;

		tsdw = 0;
		call pmut$swap_sdw (addr (volmap_abs_seg$), addr (tsdw));

	     end;

	     if pvte.volmap_astep ^= null () then do;
		pvte.volmap_seg_sdw = 0;
		astep = pvte.volmap_astep;
		call page$cleanup (astep);
		call lock$lock_ast;
		call put_aste (astep);
		call lock$unlock_ast;
		aste.volmap_seg = "0"b;
		pvte.volmap_astep = null ();
	     end;

/* Not get the dumber bit map back to disk */

	     vtoc_headerp = addr (buffer);		/* Re-use the buffer */
	     call read_disk (tx, DUMPER_BIT_MAP_ADDR, vtoc_headerp, ec); /* Must read in old VTOC header */
	     if ec = 0 then do;			/* header successfully read, so merge new items */
		do i = 0, 1;
		     call dbm_man$free_map (tx, addr (buffer), i, ec);
		     call write_disk (tx, DUMPER_BIT_MAP_ADDR + i, addr (buffer), ec);
		     if ec ^= 0 then call dsker (WRITE, VOL_MAP);
		     clearbuf = "0"b;
		end;
	     end;

	     else do;				/* Otherwise, complain and discard old dumper maps */
		call dsker (READ, VTOC_HEADER);
		call syserr (ANNOUNCE, "fsout_vol: Discarding old dumper bit maps for ^a_^a^[^a^;^1s^].",
		     pvte.devname, convert (p99, pvte.logical_area_number), pvte.is_sv, pvte.sv_name);

		do i = 0, 1;
		     call dbm_man$free_map (tx, addr (buffer), i, ec);
		     clearbuf = "0"b;
		end;
	     end;
	     vtoc_headerp = null;			/* Done with VTOC head */
	end;

/* set the time map updated and the time unmounted in the label. */


	labelp = addr (buffer);			/* Again re-use buffer */
	call read_disk (tx, LABEL_ADDR, labelp, ec);	/* Read in old label. */
	if ec ^= 0 then call dsker (READ, VOL_LABEL);
	else do;
	     have_pv_label = "1"b;			/* Now we know what PV is mounted here. */
	     label.flagpad = ""b;			/* clear all pad fields */
	     unspec (label.pad1) = ""b;
	     unspec (label.pad6) = ""b;
	     unspec (label.pad1a) = ""b;
	     unspec (label.pad2) = ""b;
	     label.root.pad7 = ""b;
	     unspec (label.pad3) = ""b;
	     do i = 1 to hbound (label.parts, 1);
		unspec (label.parts (i).pad5) = ""b;
	     end;
	     unspec (label.pad4) = ""b;		/* end pad clear */
	     now = clock ();
	     if label.pvid ^= pvte.pvid then		/* A simple check.. */
		call syserr (ANNOUNCE, "fsout_vol: label for ^a (^a_^a^[^a^;^1s^]) uid does not match pvt.",
		     label.pv_name, pvte.devname, convert (p99, pvte.logical_area_number),
		     pvte.is_sv, pvte.sv_name);
	     else do;
		label.time_map_updated = now;		/* unless vol_trouble later */
		if tx = pvt$root_pvtx then do;	/* Root case */
		     label.disk_table_vtocx = pvt$disk_table_vtocx;
		     label.disk_table_uid = pvt$disk_table_uid;
		     label.root.shutdown_state = pvt$shutdown_state;
		     label.root.esd_state = pvt$esd_state;
		end;
		label.time_of_boot = pvt$time_of_bootload;
		label.vol_trouble_count = pvte.vol_trouble_count;
		label.inconsistent_dbm = pvte.inconsistent_dbm;

		if SHUT = 1 then do;		/* If shutting down volume, */
		     label.time_unmounted = now;
		     label.last_pvtx = 0;		/* No need to salvage or flush pd */
		     if (pvte.vol_trouble_count > 0) & (pvte.lvid = pvt$root_lvid) then do;
			if pvte.nleft < MIN_RECORDS | pvte.n_vtoce < MIN_VTOCES
			then severity = ANNOUNCE;
			else severity = LOG;
			call syserr (severity, "fsout_vol: ^d volume inconsistenc^[y^;ies^] on ^a (^a_^a^[^a^;^1s^]). ^d free records. ^d free VTOCEs",
			     pvte.vol_trouble_count, (pvte.vol_trouble_count = 1), label.pv_name,
			     pvte.devname, convert (p99, pvte.logical_area_number), pvte.is_sv, pvte.sv_name,
			     pvte.nleft, pvte.n_free_vtoce);
		     end;
		end;
		else label.last_pvtx = tx;		/* Needed for pdflush */
		call write_disk (tx, LABEL_ADDR, labelp, ec); /* Write new label */
		if ec ^= 0 then call dsker (WRITE, VOL_LABEL);
	     end;
	end;
	labelp = null;				/* Thru with buffer */
	return;


/* --------------------------------------------------- */

dsker: proc (rw, database);

dcl  rw fixed bin,					/* 0 = read, 1 = write */
     database fixed bin;				/* what data we failed on */

dcl  pv_name_from_label char (32);
dcl  RW (0:1) char (4) static init ("read", "writ");
dcl  DATA (1:4) char (12) static init ("vol map", "vtoc header", "vol label", "vtoc map");

	if have_pv_label then pv_name_from_label = label.pv_name;
	else pv_name_from_label = "";			/* prevent null ptr reference */
	call syserr$error_code (ANNOUNCE, ec, "fsout_vol: Error ^aing ^a for ^a_^a^[^a^;^1s^]^[ (^a)^;^s^]",
	     RW (rw), DATA (database),
	     pvte.devname, convert (p99, pvte.logical_area_number), pvte.is_sv, pvte.sv_name, have_pv_label, pv_name_from_label);

     end;
%page;
dcl  tx fixed bin,					/* PVT index for disk to shut */
     SHUT fixed bin;				/* INPUT argument. 1 to dismount all volumes */

dcl  ec fixed bin (35),				/* errcode */
     now fixed bin (52),
     tsdw fixed bin (71),
     severity fixed bin,
     p99 pic "99",
     i fixed bin,
     have_pv_label bit (1);

dcl  (MIN_RECORDS init (200),
     MIN_VTOCES init (100),
     READ init (0),
     WRITE init (1),
     VOL_MAP init (1),
     VTOC_HEADER init (2),
     VOL_LABEL init (3),
     VTOC_MAP init (4))
	fixed bin int static options (constant);

dcl  pvt$disk_table_vtocx fixed bin external;
dcl  pvt$disk_table_uid bit (36) aligned external;
dcl  pvt$esd_state fixed bin external;
dcl  pvt$root_lvid bit (36) aligned external;
dcl  pvt$root_pvtx fixed bin external;
dcl  pvt$shutdown_state fixed bin external;
dcl  pvt$time_of_bootload fixed bin (71) external;
dcl  volmap_abs_seg$ external;

dcl  dbm_man$free_map entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  lock$lock_ast entry;
dcl  lock$unlock_ast entry;
dcl  page$cleanup entry (ptr);
dcl  page$drain_record_stock entry (ptr);
dcl  pmut$swap_sdw entry (ptr, ptr);
dcl  put_aste entry (ptr);
dcl  read_disk entry (fixed bin, fixed bin (17), ptr, fixed bin (35));
dcl  stock_man$free_record_stock entry (ptr, ptr);
dcl  stock_man$free_vtoce_stock entry (ptr, ptr);
dcl  (syserr, syserr$error_code) ext entry options (variable);
dcl  vtoce_stock_man$drain_stock entry (ptr);
dcl  write_disk entry (fixed bin, fixed bin (17), ptr, fixed bin (35));

dcl  (addr, clock, convert, hbound, null, ptr, unspec) builtin;

dcl  buffer (512) fixed bin (71) aligned;
dcl  clearbuf bit (36864) aligned based (addr (buffer));

dcl  page_fault_error condition;
%page; %include aste;
%page; %include disk_pack;
%page; %include fs_vol_label;
%page; %include pvte;
%page; %include stock_seg;
%page; %include syserr_constants;
%page; %include vol_map;
%page; %include vtoc_header;
%page; %include vtoc_map;
%page;
/* BEGIN MESSAGE DOCUMENTATION
   Message:
   fsout_vol: Discarding old dumper bit maps for dskX_NNS.

   S: $info

   T: System shutdown and volume demounting.

   M: An error occurred attempting to read the VTOC header from physical volume
   on dskX_NNS.  Writing of the dumper bit maps to disk will be
   bypassed.  The dumper bit maps will be freed and the system will attempt
   to continue, however, the dumper bit maps may not be accurate on disk.

   A: $inform

   Message:
   fsout_vol: label for PVNAME (dskX_NNS) uid does not match pvt.

   S: $info

   T: System shutdown, volume mounting and demounting.

   M: The unique physical volume ID in the label of the pack on dskX_NNS
   (PVNAME) does not compare with the value it had when the pack was first
   mounted.  Damage to the pack has probably occurred.

   A: Attempt to demount the volume if this has not already been done.
   Save the pack for inspection and dumping by the system programming staff.
   Initiate volume recovery procedures.

   Message:
   fsout_vol: {REASON} Error OPERATION OBJECT_TYPE for dskX_NNS {(PVNAME)}

   S: $info

   T: System shutdown and volume mounting and demounting.

   M: A physical device error has occured while attempting
   to read or write (OPERATION) volume header information (OBJECT_TYPE) of the
   pack (PVNAME) on dskX_NNS.

   A: If this message occurs at volume mounting time, check
   the drive specified for write-protect or standby status, and retry
   the add_lv command for the logical volume. If this message occurs at
   shutdown or demount time, the volume may contain inconsistencies
   (lost free records or free VTOCEs). These inconsistencies can be
   corrected by a physical volume salvage.

   Message:
   fsout_vol: XXX volume inconsistenices on PVNAME (dskX_NNS). YYYYY free records. ZZZZZ free VTOCEs.

   S: Logged only if the number of free records and the number of free
   VTOCEs are both above threshold values. Printed and logged if either
   is below threshold.

   T: Volume demounting and system shutdown time.

   M: At some time during the use of volume PVNAME (on drive dskX_NNS),
   the system encountered problems which left the volume in
   an inconsistent state. The effect of this is that some free records
   and/or free VTOCEs are unavailable (lost) to the system. These
   inconsistencies can be corrected by a volume salvage. The number
   of unused records and VTOCEs which are available for use is printed.

   A: If the number of free records or free vtoces is low, a physical
   volume salvage should be done on the volume prior to mounting it
   again to recover the lost items.

   END MESSAGE DOCUMENTATION */
     end fsout_vol;
