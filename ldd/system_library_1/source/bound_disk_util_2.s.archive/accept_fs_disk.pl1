/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/*
   This procedure is used to accept a storage system disk into the
   mounted hierarchy. It is called by the outer ring when the latter has
   fully checked and verified the label information, as read by
   whatever means. As this program uses read_disk,
   it must obey the necessary constraints on the use of that program.

   Bernard Greenberg, 10/16/75
   Removed PD flush stuff to salvage_pv, BSG 5/13/76
   modified 9/30/76 by Noel I. Morris for flagbox bit
   modified 07/21/78 by Greenberg for RLV acceptance by ring 0.
   removed RPV acceptance August 1980 by C. Hornig.
   modified March 1982 by J. Bongiovanni for new PVTE, record and VTOCE stocks
   modified '82 for english error codes.
*/

/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
  2) change(86-05-19,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-20,Coppola), install(86-07-17,MR12.0-1097):
     Add support for printing subvolume name.
  3) change(88-05-26,GWMay), approve(88-05-26,MCR7883),
     audit(88-06-14,Beattie), install(88-07-19,MR12.2-1061):
     Added setting of a bit in the pvt to indicate that the dumper bit maps are
     inconsistent.
                                                   END HISTORY COMMENTS */

accept_fs_disk:
     procedure (a_pvtx, a_code);

/* Initialize the PVT entry */

          a_code = 0;

          pvt_arrayp = addr (pvt$array);

	pvtx = a_pvtx;				/* We are a gate, must copy args */

	if (pvtx < 0) | (pvtx > pvt$n_entries) then do;
	     a_code = error_table_$fsdisk_pvtx_oob;
	     return;
	     end;

	pvtep = addr (pvt_array (pvtx));		/* address the pvte */
	if pvte.used | pvte.being_mounted then do;
	     a_code = error_table_$fsdisk_drive_in_use;
	     return;
	     end;
	if ^pvte.storage_system then do;
	     a_code = error_table_$fsdisk_not_storage;
	     return;
	     end;

	pvte.being_mounted = "1"b;			/* Just to mark the pvte */

/* Read the label */

	labelp = addr (buffer);
	call read_disk (pvtx, LABEL_ADDR, labelp, code);	/* Read it */
	if code ^= 0 then goto eg;			/* couldn't read it */
	if label.version ^= 1 then do;		/* Refuse to deal with old disk. */
	     code = error_table_$fsdisk_old_label;
	     goto eg;
	     end;

	if label.volmap_version ^= 1 & label.volmap_version ^= 2
	     then do;				/* Pre-MR10 pack */
	     call salvager$convert_vtoc (pvtx, ""b, code);
	     if code ^= 0 then goto eg;
	     call read_disk (pvtx, LABEL_ADDR, labelp, code);  /* Changed by convert_vtoc */
	     if code ^= 0 then goto eg;
	     end;
	if label.volmap_version >= 2 then do;		/* MR 10.x */
	     call salvager$volume_salvage (pvtx, ""b, code);
	     if code ^= 0 then goto eg;
	     call read_disk (pvtx, LABEL_ADDR, labelp, code);  /* Changed by salvage_pv */
	     if code ^= 0 then goto eg;
	     end;
	     

	pvte.vol_trouble_count = label.vol_trouble_count;

	if (label.time_map_updated ^= label.time_unmounted)
	   & ((label.time_map_updated ^= label.time_salvaged) | (label.time_unmounted > label.time_salvaged)) then do;
	   pvte.vol_trouble_count = pvte.vol_trouble_count + 1;
	   pvte.inconsistent_dbm = "1"b;
	   end;
	else
	   if label.inconsistent_dbm then
	      pvte.inconsistent_dbm = "1"b;
	else
	   pvte.inconsistent_dbm = "0"b;

/* Copy params into PVT - protected by used and being mounted bits */

	pvte.pvid = label.pvid;
	pvte.lvid = label.lvid;
	pvte.brother_pvtx = 0;

/* Now load the volume map and VTOC map. This routine also determines whether
   a salvage is required for the volume before it can be accepted. */

RETRY_AFTER_SALVAGE:
	
	call init_volmap_seg (pvtx, (label.pv_name), code);
	if code ^= 0
	     then if code = error_table_$fsdisk_not_salv then do;
		call salvager$volume_salvage (pvtx, ""b, code);
		if code ^= 0 then goto eg;
		goto RETRY_AFTER_SALVAGE;
	     end;
	     else goto eg;
	     

/* Check the free storage map against the partitions. */

	do i = 1 to label.nparts;
	     if (label.parts (i).frec < (pvte.baseadd + pvte.totrec))
						/* if part begins low */
		& ((label.parts (i).frec + label.parts (i).nrec) > pvte.baseadd)
						/* .. must end low */
	     then call syserr (ANNOUNCE, "accept_fs_disk: part ^a on ^a (^a_^d^[^a^;^1s^]) from ^d for ^d overlaps pages from ^d",
		     label.parts (i).part, label.pv_name, pvte.devname, pvte.logical_area_number,pvte.is_sv,pvte.sv_name,
		     label.parts (i).frec, label.parts (i).nrec, pvte.baseadd);
	end;

/* Now we are in business */

	pvt$n_in_use = pvt$n_in_use + 1;
	call fsout_vol (pvtx, 0);			/* get the label back out */
	pvte.used = "1"b;
	pvte.being_mounted = "0"b;
	return;

eg:
	pvte.used = "0"b;
	pvte.being_mounted = "0"b;
	pvte.pvid = "0"b;
	a_code = code;
	return;
%page;
ss_io_reconfigure:
     entry (a_pvtx, a_direction, a_code);

	pvtx = a_pvtx;
	direction = a_direction;
	code = 0;

	pvt_arrayp = addr (pvt$array);
	if (pvtx < 0) | (pvtx > pvt$n_entries) then do;
	     a_code = error_table_$fsdisk_pvtx_oob;
	     return;
	     end;

	pvtep = addr (pvt_array (pvtx));

	if pvte.storage_system ^= direction then do;
	     a_code = error_table_$fsdisk_not_storage;
	     return;
	     end;

	if (pvte.permanent | pvte.used) & direction then do;
	     a_code = error_table_$fsdisk_drive_in_use;
	     return;
	     end;

	pvte.storage_system = ^direction;
	return;
%page;
dcl  fsout_vol entry (fixed bin, fixed bin);
dcl  init_volmap_seg entry (fixed bin, char (*), fixed bin (35));
dcl  read_disk entry (fixed bin, fixed bin, ptr, fixed bin (35));
dcl  salvager$convert_vtoc entry (fixed bin, bit (36) aligned, fixed bin (35));
dcl  salvager$volume_salvage entry (fixed bin, bit (36) aligned, fixed bin (35));
dcl  syserr entry options (variable);

dcl  pvt$n_entries fixed bin external;
dcl  pvt$n_in_use fixed bin external;

dcl  (a_pvtx, pvtx) fixed bin;			/* physical volume index */
dcl  (a_code, code) fixed bin (35);

dcl  i fixed bin;
dcl  (direction, a_direction) bit (1) aligned;
dcl  1 buffer aligned like label;			/* I/O Buffer */

dcl  addr builtin;

declare (error_table_$fsdisk_pvtx_oob,
         error_table_$fsdisk_drive_in_use,
         error_table_$fsdisk_old_label,
         error_table_$fsdisk_not_storage,
         error_table_$fsdisk_not_salv) ext static fixed bin (35);
%page;
%include disk_pack;
%include fs_vol_label;
%include pvte;
%include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   accept_fs_disk: part NAME on PVNAME (dskX_NNS) from AAA for BBB overlaps pages from CCC

   S:	$info

   T:	When accepting a disk volume.

   M:      The supervisor checks the partitions defined in the volume label
   against the beginning of the paging partition when it accepts a volume.
   The partition NAME overlaps the paging area.  The volume label may have
   been damaged.

   A:	Be careful not to destroy the contents of part NAME,
   since this will destory the contents of user segments.
   $note

   END MESSAGE DOCUMENTATION */

     end accept_fs_disk;
