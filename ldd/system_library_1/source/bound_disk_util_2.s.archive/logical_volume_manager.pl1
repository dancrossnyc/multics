/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


logical_volume_manager: proc ();

/*

   Written on Janurary 26, 1976 by R. Bratt

   Last modified:

   March 1982, J. Bongiovanni, for new PVTE
   June 1982, J. Bongiovanni, for deactivate_for_demount

   logical_volume_manager manages the ring zero logical volume table (LVT). The add, delete, and add_pv
   entry points are intended to be used exclusively by ring one RCP. These operations are assumed to be
   performed under the protection of a global RCP lock. As a result, no lock is provided in the LVT.
   When mounting a LV, RCP should call ring zero to mount each PV in the LV and finally it should
   call logical_volume_manager$add to define the LV for segment control. At this time the physical
   volume table (PVT) is scanned and all PVs belonging to the LV are threaded from the LVTE.
   If a LV is grown then RCP should call the add_pv entry point to logically add the PV to the LV.
   Before demounting a LV, RCP should call logical_volume_manager$delete to remove segment control's knowledge
   of the LV before any PVs of the LV are demounted. The final entry point, logical_volume_manager$lvtep,
   is called to locate information about a LV. Programs using this entry point must be prepared to have the LVTE
   disappear from under there noses. This program does not demount physical volumes,
   but must be called before any physical volumes in a logical volume are demounted.

*/

dcl  a_lvtep ptr,
     a_lvid bit (36) aligned,
     a_code fixed bin (35),
     a_pvid bit (36) aligned;

dcl 1 local_lvte aligned like lvte,
     must_exist bit (1) aligned static init ("1"b),
     must_not_exist bit (1) aligned static init ("0"b),
     code fixed bin (35),
    (pvtex, next_pvtex) fixed bin (8),
     lvid bit (36) aligned,
     prev_lvtep ptr;

dcl (error_table_$logical_volume_table_full, error_table_$logical_volume_is_defined,
     error_table_$pv_is_in_lv, error_table_$argerr,
     error_table_$logical_volume_not_defined) ext fixed bin (35);

dcl  pvt$n_entries fixed bin external;

dcl  syserr entry options (variable),
     deactivate_for_demount$lv entry (bit (36) aligned, fixed bin (35)),
     get_pvtx entry (bit (36) aligned, fixed bin (35)) returns (fixed bin (8));

/*  */
add:	entry (a_lvtep, a_code);
	local_lvte = a_lvtep -> lvte;
	a_code = 0;
	call find (local_lvte.lvid, (must_not_exist));
	call get_lvte ();
	lvte = local_lvte;
	lvte.lvtep = null ();			/* initialize threads in lvte */
	lvte.pvtex = 0;
	pvt_arrayp = addr (pvt$array);		/* collect PV thread */
	do pvtex = 1 to pvt$n_entries;
	     if (pvt_array (pvtex).lvid = lvte.lvid) & pvt_array (pvtex).used
	     then do;
		if pvt_array (pvtex).brother_pvtx ^= 0
		then call syserr (1, "logical_volume_manager: nonzero brother pvt thread");
		pvt_array (pvtex).brother_pvtx = lvte.pvtex;
		lvte.pvtex = pvtex;
	     end;
	end;
	prev_lvtep -> lvte.lvtep = lvtep;		/* attach LV to hash  thread */
	return;

lvtep:	entry (a_lvid, a_lvtep, a_code);
	a_code = 0;
	a_lvtep = null ();
	call find ((a_lvid), (must_exist));
	a_lvtep = lvtep;
	return;

delete:	entry (a_lvid, a_code);
	a_code = 0;
	lvid = a_lvid;
	call find (lvid, (must_exist));
	lvte.lvid = "0"b;				/* stop find from locating this LV */
	pvt_arrayp = addr (pvt$array);		/* cleanup all PVs of this LV */
	do pvtex = lvte.pvtex repeat (pvt_array (pvtex).brother_pvtx) while (pvtex ^= 0);
	     pvt_array (pvtex).being_demounted = "1"b;
	end;
	call deactivate_for_demount$lv (lvid, code);	/* deactivate all segments on the LV */
	if code ^= 0 then do;			/* error -back out */
	     lvte.lvid = lvid;
	     do pvtex = lvte.pvtex repeat (pvt_array (pvtex).brother_pvtx) while (pvtex ^= 0);
		pvt_array (pvtex).being_demounted = "0"b;
	     end;
	     call abort (code);
	end;

	do pvtex = lvte.pvtex repeat (pvt_array (pvtex).brother_pvtx) while (pvtex ^= 0);
	     pvt_array (pvtex).brother_pvtx = 0;
	end;
	prev_lvtep -> lvte.lvtep = lvte.lvtep;		/* thread out of hash class */
	lvte.lvtep = lvt.free_lvtep;			/* thread onto free list */
	lvt.free_lvtep = lvtep;
	return;

add_pv:	entry (a_lvid, a_pvid, a_code);
	a_code = 0;
	lvid = a_lvid;
	pvtex = get_pvtx ((a_pvid), code);
	if code ^= 0 then call abort (code);
	pvt_arrayp = addr (pvt$array);
	if pvt_array (pvtex).lvid ^= lvid
	then call abort (error_table_$argerr);
	if pvt_array (pvtex).brother_pvtx ^= 0
	then call abort (error_table_$pv_is_in_lv);
	call find (lvid, (must_exist));
	pvt_array (pvtex).brother_pvtx = lvte.pvtex;
	lvte.pvtex = pvtex;
	return;

/*  */
find:	proc (lvid, match_desired /* ,lvtp, prev_lvtep, lvtep */);
dcl  lvid bit (36) aligned,
     match_desired bit (1) aligned,
     hashx fixed bin (35);

	     lvtp = addr (lvt$);
	     hashx = mod (bin (bin (lvid), 35), dimension (lvt.ht, 1));
	     prev_lvtep = addr (lvt.ht (hashx));
	     do lvtep = lvt.ht (hashx) repeat (lvte.lvtep) while (lvtep ^= null ());
		if lvte.lvid = lvid
		then if match_desired
		     then return;
		     else call abort (error_table_$logical_volume_is_defined);
		prev_lvtep = lvtep;
	     end;
	     if match_desired
	     then call abort (error_table_$logical_volume_not_defined);
	     else return;
	end find;

get_lvte:	proc ( /* lvtp, lvtep */);
	     if lvt.free_lvtep ^= null ()
	     then do;
		lvtep = lvt.free_lvtep;
		lvt.free_lvtep = lvte.lvtep;
		return;
	     end;
	     else if lvt.high_water_lvtex < lvt.max_lvtex
	     then do;
		lvt.high_water_lvtex = lvt.high_water_lvtex + 1;
		lvtep = addr (lvt.lvtes (lvt.high_water_lvtex));
		return;
	     end;
	     else call abort (error_table_$logical_volume_table_full);
	end get_lvte;

abort:	proc (code);
dcl  code fixed bin (35);
	     a_code = code;
	     go to return_to_caller;
	end abort;

return_to_caller:
	return;
						/*
						   
						   */

%  include lvt;
/*
   
*/

% include pvte;

/* BEGIN MESSAGE DOCUMENTATION

Message:
logical_volume_manager: nonzero brother pvt thread

S:	$crash

T:	$run

M:	$err

A:	$recover


END MESSAGE DOCUMENTATION */

     end logical_volume_manager;
