/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/*

   Writtten March 1975 by R. Bratt

   Last modified by:
   L. Scheffler 760317 to accept mylock
   K. Loepere 841123 for PAM that uses uid's.

   ---> get_pathname_ obtains a pathname for the  object  associated with  a  given   segment
   number. It first calls upon the pathname associative memory to map the segment number into
   a  pathname.   If  no   pathname   is   known   to  the  pathname associative memory, then
   get_pathname_ locates  the  branch  of  the  object  and   extracts   its  primary   name.
   get_pathname_   then  recursively  invokes  itself  to  obtain a pathname for the object's
   parent.  A  pathname  for  the object   is   then   formed   by  concatenating  these  two
   peices.  This pathname  is  then  added  to  the  pathname  associative  memory (currently
   this is done only for directories) and returned.
   USAGE:  call get_pathname_ (segno, pathname, code);

   segno fixed bin (17) --- segment number of object (input)
   pathname char (*) varying --- pathname of object (output)
   code fixed bin (35) --- status code (output)

*/
get_pathname_: proc (a_segno, a_pathname, a_code);
dcl (a_segno, segno, i) fixed bin (17),
     a_pathname char (*) varying,
     pathname char (528) varying,
    (a_code, code) fixed bin (35),
    (dirsw, locksw) bit (1) aligned,
     ename char (32) aligned,
    (error_table_$mylock, error_table_$root) ext fixed bin (35);

dcl  get_pathname_ ext entry (fixed bin (17), char (*) varying, fixed bin (35)),
     pathname_am$get_path ext entry (char (*) varying, fixed bin (17)),
     pathname_am$set ext entry (char (*) varying, fixed bin (17)),
     sum$getbranch_root_my ext entry (ptr, bit (36) aligned, ptr, fixed bin (35)),
     lock$dir_unlock ext entry (ptr);

%include dir_header;
%include dir_entry;
%include dir_name;

	a_code = 0;
	a_pathname = "";
	segno = a_segno;
	call pathname_am$get_path (pathname, segno);
	if length (pathname) > 0
	then do;
	     a_pathname = pathname;
	     return;
	end;
	locksw = "1"b;
	call sum$getbranch_root_my (baseptr (segno), (36)"0"b, ep, code);
	if code ^= 0
	then if code = error_table_$mylock
	     then locksw = "0"b;			/* Don't bother unlocking */
	     else do;
		if code = error_table_$root then a_pathname = ">";
		else a_code = code;			/* Return anything else */
		return;
	     end;
	dirsw = ep -> entry.dirsw;
	ename = ptr (ep, ep -> entry.name_frp) -> name;
	if locksw then call lock$dir_unlock (ptr (ep, 0));
	call get_pathname_ (fixed (baseno (ep), 17), pathname, code);
	if code ^= 0 then do;
	     a_code = code;
	     return;
	end;
	i = 33 - verify (reverse (ename), " ");
	if length (pathname) > 1 then pathname = pathname || ">";
	pathname = pathname || substr (ename, 1, i);
	if dirsw then call pathname_am$set (pathname, segno);
	a_pathname = pathname;
	return;
     end get_pathname_;
