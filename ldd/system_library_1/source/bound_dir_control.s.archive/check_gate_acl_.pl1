/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


check_gate_acl_: proc (pass_ptr, acl_sw, acl_count, user_project, code);

/* Modified 07/77 by THVV for bad_dir_ check */
/* Converted by E. Stone to version 2 06/74 */

/* subroutine used to check if an access list has only the user's project
   or SysDaemon as the project field of all access names. */

dcl (list_ptr, anp, in_aclp, pass_ptr) ptr;
dcl (acl_count, i) fixed bin;
dcl  code fixed bin (35);
dcl  acle_seen fixed bin;
dcl  acl_sw bit (1) aligned ;
dcl (aclrp, projrp, own_projrp) bit (18) aligned;
dcl (process_name, project_on_acl, user_project) char (32) aligned ;

dcl 1 a_n aligned,
    2 person char (32),
    2 project char (32),
    2 tag char (1),
    2 pad72 bit (72);

dcl 1 acl (acl_count) based (list_ptr) aligned,
    2 access_name char (32),
    2 mode bit (36),
    2 pad bit (36),
    2 error_code fixed bin (35) ;

dcl  error_table_$invalid_project_for_gate ext fixed bin (35) ;

dcl (addr, ptr) builtin;
dcl  bad_dir_ condition;

dcl 1 pds$access_name aligned ext,
    2 person char (32) aligned,
    2 project char (32) aligned,
    2 tag char (1) aligned;
dcl  acc_name_$elements entry (ptr, ptr, fixed bin (35));

%include dir_acl;
%include dir_header;
%include fs_types;

/*  */
	code = 0;					/* initialize code before check is begun */
	dp = ptr (pass_ptr, 0);
	user_project, process_name = pds$access_name.project; /* get name of caller's project */

	if acl_sw then do;				/* check for consistency will be made on an acl */
	     own_projrp = "0"b;			/* save rel ptr to caller's project */
	     aclep = pass_ptr;			/* copy pointer to start of acl */
	     acle_seen = 0;
	     do aclrp = aclep -> acl_entry.frp repeat aclep -> acl_entry.frp while (aclrp);
		aclep = ptr (aclep, aclrp);		/* get address of acl */
		acle_seen = acle_seen + 1;
		if acle_seen > dir.acle_total then signal bad_dir_;
		if aclep -> acl_entry.type ^= ACLE_TYPE then signal bad_dir_;
		projrp = aclep -> acl_entry.name.proj_rp; /* pick up rp to project name */
		if projrp = (18)"0"b then goto bad_proj; /* if project = "*", this should not be a gate */
		if projrp ^= own_projrp then do;	/* cannot do it the easy way so drag out the project name */
		     project_on_acl = ptr (aclep, projrp) -> access_name.name;
		     if project_on_acl ^= "SysDaemon" then
			if project_on_acl ^= process_name then go to bad_proj;
			else own_projrp = projrp;	/* remember rp to user's project name */
		end;
	     end;
	end;

	else do;					/* name list supplied, like input to acl_ */
	     anp = addr (a_n);			/* get address of temp to hold 3 part access name */
	     list_ptr = pass_ptr;			/* copy pointer to start of name list */
	     do i = 1 to acl_count;			/* check access_name structure for gate consistency */
		in_aclp = addr (list_ptr -> acl (i));
		call acc_name_$elements (in_aclp, anp, code); /* break name into person, project and tag components */
		if code ^= 0 then go to ret;
		if a_n.project ^= "SysDaemon" then
		     if a_n.project ^= process_name then go to bad_proj;
	     end;
	end;

ret:	return;

bad_proj:	code = error_table_$invalid_project_for_gate;
	go to ret;

     end check_gate_acl_;
