/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


acc_name_: proc;

/* Modified 1/14/83 Jay Pattin to make $elements reject null access name components */
/* Modified 07/77 by THVV for bad_dir_ check */
/* Modified by E. Stone April 1974 - re-written with v2 EIS compiler in mind */

/*
   entry:
   get(stg_ptr, char_name_ptr, code) 		given addr of name ptrs, return a 32 char access name
   delete(stg_ptr, code)			givin addr of name ptrs, delete the names if this is
   .					is the last reference to the name, else decrement usage count.
   encode(stg_ptr, acl_entry_ptr, code)		given an access str addr and addr of where rel name ptrs go,
   .					insert rel ptrs and tag char, and encode name.
   elements(char_name_ptr, acl_entry_ptr, code)	given a 32 char access name, break it up into its 3
   .					components, check if all chars are valid ascii,
   .					and put into acl structure. The directory need not be
   .					locked for this operation.

   1. stg_ptr ptr	pts to the representation of an access name in a directory,
   .		as defined by the structure acl_name.
   2. char_name_ptr ptr pts to a 32 char access name.
   3. acl_entry_ptr ptr pts to the structure defined by acl_info.
   4. code fixed bin(35) is a standard error code .
   */
dcl  char_name_ptr ptr;				/* points to 32 char access name of the form pers.proj.tag */
						/* (Input) */
dcl  stg_ptr ptr;					/* points to the structure defined by acl_name */
						/* i.e. the representation of an access name in a directory */
						/* (Input) */
dcl  acl_entry_ptr ptr;				/* points to the structure defined by acl_info */
						/* i.e. to the structure used as input to the utility acl_ */
						/* or the access name already parsed into per, proj and tag */
						/* (Input) */
dcl  fp ptr;					/* points to the head of a list of access names */
dcl  bp ptr;					/* points to the tail of a list of access names */
dcl  anp ptr;					/* points to the access name to be deleted, */
						/* or to the access name a new name is to be inserted before, */
						/* or to the access name at the end of a list */
dcl  name_rp bit (18) aligned;			/* rel pointer to access name to be deleted or which was inserted */
dcl  rp bit (18) aligned;				/* rel pointer used in looping thru list while adding a name */
dcl  thread bit (18) unaligned based;			/* used to obtain value of head or tail of access name list */
dcl  len_pers fixed bin;				/* length of person name */
dcl  len_proj fixed bin;				/* length of project name */
dcl  len fixed bin;					/* length of access name */
dcl  start fixed bin;				/* character position of first non blank in access name */

dcl  acc_name char (32) aligned based;			/* overlay of access name */

dcl  access_id char (32) varying;			/* used to construct concatenated access name */

dcl 1 acl_name based,				/* the encoded form of an access name, author, bit count author */
    2 pers_rp bit (18) unaligned,			/* rel pointer to person name */
    2 proj_rp bit (18) unaligned,			/* rel pointer to project name */
    2 tag char (1) unaligned;				/* instance tag */

dcl 1 acl_info based aligned,				/* form of access name already parsed into three components */
    2 person char (32),
    2 project char (32),
    2 tag char (1);

dcl  code fixed bin (35);				/* storage system status */

dcl  person char (32) aligned;			/* person name in an access name */
dcl  project char (32) aligned;			/* project name in an access name */
dcl  name char (32) aligned;				/* access name to be parsed into three elements */
						/* or a person or project name to be added to a list */
dcl  name_in_list char (32) aligned;			/* access name in a list to be compared with new name */

dcl  proj_rp bit (18) aligned;			/* rel pointer to project access name */
dcl  pers_rp bit (18) aligned;			/* rel pointer to person access name */

dcl  np ptr;					/* pointer to access name entry newly allocated */
dcl  area_ptr ptr;					/* pointer to start of directory allocation area */

dcl 1 check_for_ascii aligned static options (constant),	/* bit string to be used to check access names for non-ascii */
    2 part1 bit (9 * 16) init ((16)"110000000"b),
    2 part2 bit (9 * 16) init ((16)"110000000"b);

dcl (addr, index, null, ptr, rel, substr, ltrim, rtrim, unspec) builtin;
dcl  bad_dir_ condition;

dcl (fs_alloc$alloc, fs_alloc$free) ext entry (ptr, fixed bin (17), ptr);

dcl error_table_$notalloc ext fixed bin (35);
dcl (error_table_$bad_name, error_table_$invalid_ascii) ext fixed bin (35);

dcl  active_hardcore_data$ensize ext fixed bin;

dcl 1 pds$access_name aligned ext,			/* current user's access name */
    2 person char (32),
    2 project char (32),
    2 tag char (1) unaligned,
    2 pad char (3) unaligned;

%include fs_types;
% include dir_header;
% include dir_acl;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get:	entry (stg_ptr, char_name_ptr);		/* given rel ptrs, return char name */


	dp = ptr (stg_ptr, 0);			/* get ptr to directory in which rel ptrs are stored */

	pers_rp = stg_ptr -> acl_name.pers_rp;		/* pick up rel ptr to person name */

	if pers_rp then do;				/* If name is not "*" */
	     anp = ptr (dp, pers_rp);
	     if anp -> access_name.type ^= ACCESS_NAME_TYPE
	     | anp -> access_name.owner ^= dir.uid then signal bad_dir_;
	     person = anp -> access_name.name;		/* get name and find its length */
	end;
	else do;					/* special case name = "*" */
	     person = "*";
	end;

	proj_rp = stg_ptr -> acl_name.proj_rp;		/* pick up rel ptr to project name */

	if proj_rp then do;				/* If name is not "*" */
	     anp = ptr (dp, proj_rp);
	     if anp -> access_name.type ^= ACCESS_NAME_TYPE
	     | anp -> access_name.owner ^= dir.uid then signal bad_dir_;
	     project = anp -> access_name.name;		/* get name and find its length */
	end;
	else do;					/* special case name = "*" */
	     project = "*";
	end;

	access_id = rtrim (person) || ".";
	access_id = access_id || rtrim (project);
	access_id = access_id || ".";
	access_id = access_id || stg_ptr -> acl_name.tag;
	char_name_ptr -> acc_name = access_id;		/* return constructed access name to caller */

	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  */

delete:	entry (stg_ptr);				/* given ptrs, remove name or decrement name count */
						/* if more than one reference to name */

	dp = ptr (stg_ptr, 0);			/* get ptr to directory where name is stored */
	area_ptr = ptr (dp, dp -> dir.arearp);		/* get ptr to directory allocation area */

	name_rp = stg_ptr -> acl_name.pers_rp;		/* get rel ptr to person name  */

	if name_rp then do;				/* if person not "*", update person person list */
	     fp = addr (dp -> dir.pers_frp);
	     bp = addr (dp -> dir.pers_brp);
	     call delete_name;
	end;

	name_rp = stg_ptr -> acl_name.proj_rp;		/* get rel ptr to project name */

	if name_rp then do;				/* if project not "*", update project project list */
	     fp = addr (dp -> dir.proj_frp);
	     bp = addr (dp -> dir.proj_brp);
	     call delete_name;
	end;

	return;



/*  *  *  *  *  *  *  *  *  *  *  *  *  *  */

encode:	entry (stg_ptr, acl_entry_ptr, code);		/* given name, return rptrs and update count */

/* code is returned 0 or error_table_$notalloc */

	code = 0;


	dp = ptr (stg_ptr, 0);			/* get start of dir */
	area_ptr = ptr (dp, dp -> dir.arearp);		/* start of allocations */

	name = acl_entry_ptr -> acl_info.person;	/* pick up person name */
	fp = addr (dp -> dir.pers_frp);
	bp = addr (dp -> dir.pers_brp);
	call add_name;				/* add to person name list */

	stg_ptr -> acl_name.pers_rp = name_rp;		/* return rel ptr to person name */

	name = acl_entry_ptr -> acl_info.project;	/* pick up project name */
	fp = addr (dp -> dir.proj_frp);
	bp = addr (dp -> dir.proj_brp);
	call add_name;				/* add to project name list */

	stg_ptr -> acl_name.proj_rp = name_rp;		/* return rel ptr to project name */
						/* copy tag into access name */
	stg_ptr -> acl_name.tag = acl_entry_ptr -> acl_info.tag;

	return;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

elements:	entry (char_name_ptr, acl_entry_ptr, code);	/* given a 32 char ac-name, break up into components */

/* code is returned 0 if successful
   .	error_table_$bad_name if invalid syntax
   .	error_table_$invalid_ascii if non-ascii chars */

	code = 0;
	name = char_name_ptr -> acc_name;		/* local store for fast compare */

	if name = "" then do;			/* if given a null name, return current user's access name */
	     acl_entry_ptr -> acl_info.person = pds$access_name.person;
	     acl_entry_ptr -> acl_info.project = pds$access_name.project;
	     acl_entry_ptr -> acl_info.tag = pds$access_name.tag;
	end;

	else do;					/* make sure name contains ascii chars */
	     if (unspec (name) & unspec (check_for_ascii)) then go to not_ascii;

	     name = ltrim (name);			/* strip leading blanks */

	     len = length (rtrim (name));		/* find length of access name */

	     len_pers = index (name, ".") - 1;		/* find length of person name */
	     if len_pers < 0 then go to nam_err;
						/* leave room for tag and two "."s */
	     len_proj = index (substr (name, len_pers + 2), ".") - 1; /* ditto for project name */
	     if len_proj < 1 then go to nam_err;	/* no null project-ids */
	     if (len_proj + len_pers + 3) ^= len then go to nam_err;
						/* allow blank person name for ".sys_control" */
	     if len_pers = 0 then
		if name ^= ".sys_control.a" then go to nam_err;
		else acl_entry_ptr -> acl_info.person = "";
	     else acl_entry_ptr -> acl_info.person = substr (name, 1, len_pers);

	     acl_entry_ptr -> acl_info.project = substr (name, len_pers + 2, len_proj);

	     acl_entry_ptr -> acl_info.tag = substr (name, len, 1);
	end;

	return;

/*  *  *  *  *  *  *  *  *  *  *  */

alloc_err: code = error_table_$notalloc;
	return;

nam_err:	code = error_table_$bad_name;
	return;

not_ascii: code = error_table_$invalid_ascii;
	return;



/*  *  *  *  *  *  *  *  *  *  */

delete_name: proc;

	     anp = ptr (dp, name_rp);			/* get pointer to access name */
	     if anp -> access_name.type ^= ACCESS_NAME_TYPE
	     | anp -> access_name.owner ^= dir.uid
	     | anp -> access_name.usage < 1 then signal bad_dir_;

	     if anp -> access_name.usage > 1 then	/* just decrement count */
		anp -> access_name.usage = anp -> access_name.usage - 1;

	     else do;				/* thread out name and free it */
		if anp -> access_name.brp then
		     ptr (anp, anp -> access_name.brp) -> access_name.frp = anp -> access_name.frp;

		if anp -> access_name.frp then
		     ptr (anp, anp -> access_name.frp) -> access_name.brp = anp -> access_name.brp;

		if name_rp = fp -> thread then
		     fp -> thread = anp -> access_name.frp;

		if name_rp = bp -> thread then
		     bp -> thread = anp -> access_name.brp;

		call fs_alloc$free (area_ptr, active_hardcore_data$ensize, anp);

	     end;

	end delete_name;

add_name:	proc;

dcl  i fixed bin;
dcl  max_acl_names fixed bin;

	     if name = "*" then name_rp = "0"b;
	     else do;
		i = 0;
		max_acl_names = 4681;		/* 64K dir. use dir.access_name_total when avail */
		do rp = fp -> thread repeat anp -> access_name.frp while (rp);
		     anp = ptr (dp, rp);
		     i = i + 1;
		     if i > max_acl_names
		     | anp -> access_name.type ^= ACCESS_NAME_TYPE
		     | anp -> access_name.owner ^= dir.uid then signal bad_dir_;
		     name_in_list = anp -> access_name.name;

		     if name < name_in_list then do;
			call new;			/* insert name entry before name in access list */
			return;
		     end;

		     else if name = name_in_list then do; /* just increment usage count */
			name_rp = rel (anp);
			anp -> access_name.usage = anp -> access_name.usage + 1;
			return;
		     end;

		end;
		call new;				/* insert name entry after last entry in list */
	     end;

	end add_name;

new:	proc;
						/* allocate space for access name in directory */
	     call fs_alloc$alloc (area_ptr, active_hardcore_data$ensize, np);
	     if np = null then go to alloc_err;

	     np -> access_name.name = name;		/* fill in standard things */
	     np -> access_name.usage = 1;
	     np -> access_name.type = ACCESS_NAME_TYPE;
	     np -> access_name.size = active_hardcore_data$ensize;
	     np -> access_name.owner = dir.uid;

	     name_rp = rel (np);			/* save rel ptr to new name */

	     if fp -> thread = "0"b then do;		/* list was empty */
		fp -> thread,
		     bp -> thread = name_rp;
	     end;

	     else if rp = "0"b then do;		/* adding to end of list */
		np -> access_name.brp = rel (anp);
		anp -> access_name.frp,
		     bp -> thread = name_rp;
	     end;

	     else do;				/* thread new name entry in */
		np -> access_name.frp = rel (anp);
		np -> access_name.brp = anp -> access_name.brp;
		if fp -> thread = rel (anp) then
		     fp -> thread = name_rp;
		else ptr (anp, anp -> access_name.brp) -> access_name.frp = name_rp;
		anp -> access_name.brp = name_rp;
	     end;

	end new;

     end acc_name_;
