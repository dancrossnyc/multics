/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/*
   Written April 1975 by R. Bratt

   Last modified by:

   R. Bratt October 1975 to initialize kstes as needed
   R. Bratt June 1975 to differentiate segno_in_use and invalidsegno conditions
   R. Bratt May 1976 to call garbage_collect_kst in an attempt to avoid kst overflow
   R. Bratt June 1976 to cause access to be recalculated when priv_init or allow_write are set
   M. Weaver March 1977 to add use_count parameter
   E. N. Kittlitz December 1980 to immediately activate directories.
   J. Bongiovanni, January 1983, to fix stack initiation bug
   E. N. Kittlitz, February 1983, for kst_util.
   E. N. Kittlitz, 831130, suspend vcpu during call to activate
   K. Loepere, October 1984, for control over directory activations (for
   performance; also has to do with centralizing references to
   validate_entryp).  Also deleted hdr and unused notion of object
   undetectability.
*/


/****^  HISTORY COMMENTS:
  1) change(86-08-09,GDixon), approve(86-08-09,MCR7388),
     audit(86-09-02,Farley), install(86-09-08,MR12.0-1150):
     Copy makeknown_info.entryp into kstep.entryp in every call, rather just in
     those calls which create the kst entry.  In calls which activate the
     segment, seg_fault$makeknown_activate will use this kste.entryp to
     reference the directory entry for the segment.  Also, document the
     restrictions which callers of makeknown_ must adhere to.
                                                   END HISTORY COMMENTS */


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Function: makeknown_ is responsible for obtaining a segment number for    */
/* an object.  Whenever possible makeknown_ returns a segment number which   */
/* was previously assigned to the object.			       */
/*							       */
/* WARNING: In order to call makeknown_:			       */
/*  a) the directory containing the entry pointed to by		       */
/*     makeknown_info.entryp must be locked by the caller throughout the     */
/*     call to makeknown_.					       */
/*  b) after locking the directory and before calling makeknown_, the	       */
/*     caller must have validated makeknown_info.entryp to ensure that it    */
/*     points to the dir entry whose uid equals makeknown_.info.uid.	       */
/* One way to perform both functions is to call sum$getbranch or	       */
/* sum$getbranch_root_my.					       */
/*							       */
/* USAGE:  call makeknown_ (infop, segno, use_count, code);		       */
/*							       */
/* infop                [ptr] --- pointer to the makeknown_info structure    */
/*			    describing the object (input)	       */
/* segno     [fixed bin (17)] --- segment number (input/output)	       */
/* use_count [fixed bin (17)] --- updated usage count (output)	       */
/* code      [fixed bin (35)] --- status code (output)		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* format: style4 */
makeknown_:
     procedure (a_makeknown_infop, a_segno, a_use_count, a_code);

/* Parameters */

dcl  a_code fixed bin (35);
dcl  a_makeknown_infop ptr;
dcl  a_segno fixed bin (17);
dcl  a_use_count fixed bin (17);

/* Variables */

dcl  code fixed bin (35);
dcl  hash_bucket fixed bin (17);
dcl  pkstep ptr;
dcl  ring fixed bin (3);
dcl  1 sdwi aligned like sdw_info;
dcl  segno fixed bin (17);
dcl  valid bit (1) aligned;
dcl  vcpu_suspend_1 fixed bin (71);
dcl  vcpu_suspend_2 fixed bin (71);

/* External */

dcl  dseg$ (0:4095) fixed bin (71) external;
dcl  error_table_$invalidsegno fixed bin (35) external static;
dcl  error_table_$nrmkst fixed bin (35) ext static;
dcl  error_table_$segknown fixed bin (35) external static;
dcl  error_table_$segno_in_use fixed bin (35) external static;
dcl  1 pds$transparent external aligned,
       2 tms bit (1) unaligned,
       2 tus bit (1) unaligned,
       2 tpd bit (1) unaligned;

/* Entries */

dcl  fim_util$fim_v_time_calc_ext entry (fixed bin (71), fixed bin (71));
dcl  fim_util$fim_v_time_init_ext entry (fixed bin (71), fixed bin (71));
dcl  kst_util$garbage_collect entry (fixed bin (35));
dcl  kst_util$initialize_region entry (fixed bin);
dcl  kst_util$unthread_kste entry (ptr);
dcl  kstsrch entry (bit (36) aligned, fixed bin (17), ptr);
dcl  level$get entry () returns (fixed bin (3));
dcl  makeunknown_ entry (fixed bin, bit (36) aligned, bit (1) aligned, fixed bin (35));
dcl  sdw_util_$construct entry (ptr, ptr);
dcl  sdw_util_$dissect entry (ptr, ptr);
dcl  sdw_util_$get_valid entry (ptr, bit (1) aligned);
dcl  seg_fault$makeknown_activate entry (ptr, fixed bin (35));
dcl  setfaults$disconnect entry (fixed bin (17));

/* Misc */

dcl  (addr, baseno, fixed, null, ptr, rel, string, unspec) builtin;
%page;
	makeknown_infop = a_makeknown_infop;
	segno = a_segno;
	a_use_count = 0;
	a_code = 0;
	kstp = pds$kstp;
	ring = level$get ();
	call kstsrch (makeknown_info.uid, hash_bucket, kstep);
	if kstep ^= null () then do;			/* got kste */
	     a_code = error_table_$segknown;
	     a_segno = kste.segno;
	     if (^kste.priv_init & makeknown_info.priv_init) | (^kste.allow_write & makeknown_info.allow_write) then do;
						/* access may increase -- could do this better */
		call setfaults$disconnect ((kste.segno));
		kste.dtbm = (36)"1"b;		/* force access recomputation at next seg_fault */
	     end;
	end;
	else do;					/* get kste */
	     if makeknown_info.rsw then do;		/* reserved segment switch */
		if segno - kst.lowseg < ring |	/* lower ring stack or hardcore */
		     segno > kst.highseg then call abort (error_table_$invalidsegno);
		if segno > kst.highest_used_segno then call kst_util$initialize_region (segno);
		kstep = addr (kst.kst_entry (segno));
		if unspec (kste.entryp) ^= "0"b then call abort (error_table_$segno_in_use);
		if kste.fp ^= (18)"1"b then call kst_util$unthread_kste (kstep);
	     end;
	     else do;
		if kst.free_list = "0"b		/* the cupboard was bare */
		then if kst.highest_used_segno < kst.highseg
		     then call kst_util$initialize_region (kst.highest_used_segno + 1);
		     else do;
			call kst_util$garbage_collect (code);
			if code ^= 0 then call abort (code);
		     end;
		if kst.free_list = ""b
		then				/* can't happen */
		     call abort (error_table_$nrmkst);
		kstep = ptr (kstp, kst.free_list);	/* set kst entry pointer to first free entry */
		kst.free_list = kste.fp;		/* remove from free list */
		a_segno = kste.segno;		/* return segment number */
	     end;					/* thread into hash class */
	     kste.fp = kst.uid_hash_bucket (hash_bucket);
	     kst.uid_hash_bucket (hash_bucket) = rel (kstep);
						/* if this is not the root increment parent infcount */
	     if makeknown_info.entryp ^= null () then do;
		pkstep = addr (kst.kst_entry (fixed (baseno (makeknown_info.entryp), 17)));
		pkstep -> kste.infcount = pkstep -> kste.infcount + 1;
	     end;					/* set up new kste */
	     kste.dirsw = makeknown_info.dirsw;
	     kste.uid = makeknown_info.uid;
	     kste.dtbm = (36)"1"b;			/* force access computation at first seg_fault */

/* force no access in sdw */

	     call sdw_util_$dissect (addr (dseg$ (kste.segno)), addr (sdwi)); /* Take it apart to set access */

	     sdwi.r1, sdwi.r2, sdwi.r3 = "0"b;
	     string (sdwi.access) = "0"b;

	     call sdw_util_$construct (addr (dseg$ (kste.segno)), addr (sdwi)); /* Put it back together */
	end;
	kste.tus = pds$transparent.tus;
	kste.tms = pds$transparent.tms | kste.dirsw;	/* THIS IS CRUCIAL to proper maintenance of dtcm for dirs */
	kste.tpd = pds$transparent.tpd;
	kste.allow_write = kste.allow_write | makeknown_info.allow_write;
	kste.priv_init = kste.priv_init | makeknown_info.priv_init;
	kste.entryp = makeknown_info.entryp;
	kste.audit = makeknown_info.audit;
	if kste.usage_count (ring) ^< 0		/* mark kste as known in proper ring */
	then kste.usage_count (ring) = kste.usage_count (ring) + 1;
	a_use_count = kste.usage_count (ring);

	if makeknown_info.activate then do;
	     call sdw_util_$get_valid (addr (dseg$ (kste.segno)), valid);
	     if ^valid then do;
		call fim_util$fim_v_time_init_ext (vcpu_suspend_1, vcpu_suspend_2);
		call seg_fault$makeknown_activate (kstep, code);
						/* seg_fault/connect as required */
		if code = 0 then			/* make activate vcpu free  */
		     call fim_util$fim_v_time_calc_ext (vcpu_suspend_1, vcpu_suspend_2);
		else do;				/* something really awful? */
		     a_code = code;			/* override any other error code */
		     call makeunknown_ ((kste.segno), "01"b, ("0"b), code);
						/* force terminate */
		end;
	     end;
	end;

	return;


abort:
     proc (code);
dcl  code fixed bin (35);
	a_code = code;
	go to non_local_return;
     end abort;

non_local_return:
	return;
%page;
%include kst;
%page;
%include makeknown_info;
%page;
%include sdw_info;
%page;
%include stack_header;
     end makeknown_;
