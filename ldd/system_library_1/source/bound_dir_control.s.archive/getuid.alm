" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " "
"
"	getuid -- Procedure to return a unique identifier as a 36 bit
"	quantity.
"	The call is:
"
"	call getuid(bit36)
"
"	The init entry point is called during initialization and does
"	an initial clock reading.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " "

"	Converted for the follow-on 645 by Craig Jensen on 7/14/72.
"	Modified to make the uids more random by Keith Loepere on 11/25/84.

	name	getuid
	entry	getuid
	entry	init


	include	stack_header


" " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	init
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

init:
	eax1	15
	rccl	<sys_info>|[clock_],* read the clock
	lrs	15		Set resolution to 32 milleseconds
init_loop:
	stq	<tc_data>|[uid_array],x1	Store it in tc_data
	adq	1,dl
	eax1	-1,x1
	tpl	init_loop
	stq	<tc_data>|[id]	Store it in tc_data
	short_return

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " ""
"
"	getuid
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" getuid works by keeping an array of uids handy.  A request for a uid
" takes one at random from this array.  However, the taker must put a new
" value into this empty place in the array - so, we must first generate a
" new unique value (tc_data$id).

getuid:
	rccl	<sys_info>|[clock_],* read the clock
	lrs	15		Set resolution
	cmpq	<tc_data>|[id]	Have we gone past?
	tze	getuid		Repeat until acceptible

id_loop:
	ldq	<tc_data>|[id]	get id value to use
	stq	sb|stack_header.stack_end_ptr,*
	lda	sb|stack_header.stack_end_ptr,*
	adla	1,dl		generate new id
	stacq	<tc_data>|[id]	store it away if hasn't changed
	tnz	id_loop		try again if someone beat us
"				it is a loop lock.
" stack end holds the value of id we generated.  We need to place this
" in a random spot in the uid_array and grab the value that is there.
"
	rccl	<sys_info>|[clock_],*
	qls	32
	qrl	32		low 4 clock bits => uid_array index
	eax1	0,ql
	lda	sb|stack_header.stack_end_ptr,*
array_loop:
	ldq	<tc_data>|[uid_array],x1
	stacq	<tc_data>|[uid_array],x1
	tnz	array_loop	someone already got this slot
	stq	ap|2,*

	short_return

	end
