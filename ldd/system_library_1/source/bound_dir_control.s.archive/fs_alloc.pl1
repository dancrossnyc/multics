/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



fs_alloc: proc;					/* Procedure to allocate things. */

/*
   NAME:	fs_alloc

   This program is a general purpose file system allocation proceedure.

   ENTRY:	fs_alloc$init

   This entry is called once per allocation area to set up the sizes of elements
   to be allocated and the size of the area.

   USAGE:	call fs_alloc$init (areap, areasize, arrayp, nosize);

   1) areap (pointer)			pointer to the area to be initialized (Input)
   2) areasize (fixed bin (17))		size of the area to be initialized (Input)
   3) arrayp (pointer)			pointer to  an arry  of sizes of elements which
   may be allocated in the area (Input)
   4) nosize (fixed bin (17))		number of different sizes to be allocated (Input)

   ENTRY:	fs_alloc$alloc

   This entry is called to allocate space in the area.

   USAGE:	call fs_alloc$alloc (areap, size, ptr);

   1) areap (pointer)			pointer to the base of the area where space is
   to be allocated (Input)
   2) size (fixed bin (17))			size of space to allocate (Input)
   3) ptr (pointer)			pointer to the allocated space (Output)

   NOTE:	The argument ptr is null if space cannot be allocated.
   All allocation is done mod 2 and starts on an even word boundary.

   ENTRY:	fs_alloc$free

   This entry is called to free previously allocated space.

   USAGE:	call fs_alloc$free (areap, size, ptr);

   The arguments are as for the alloc entry except that here ptr is input.

   */
/* Modified 3/77 by S.E. Barr to clear the size/type word in blocks that are freed. This prevents the salvager
   from recovering these blocks later. */
/* Modified 07/77 by THVV for bad_dir_ check */


dcl  arrayp ptr,
     nbits fixed bin,
    (size, nsizes) fixed bin (17);

% include dir_allocation_area;

dcl  last_free_rp bit (18) based (arrayp) aligned;
dcl  clear bit (nbits) aligned based;
dcl  ia (100) fixed bin (17) aligned based (arrayp);
dcl  word (2) bit (36) aligned based;			/* 2nd word of all blocks contains size/type fields */


dcl  i fixed bin (17);				/* convenient index */


dcl (addr, bin, divide, null, ptr, rel) builtin;
dcl bad_dir_ condition;


init:	entry (ap, s, arp, ns);			/* Entry to init. the area. */

dcl (ap, arp) ptr,
    (s, ns) fixed bin (17);

	areap = ap;				/* Copy args. */
	size = s;
	arrayp = arp;
	nsizes = ns;

	do i = 1 to nsizes;				/* Loop over all slots. */
	     areap -> area.array (i).size = arrayp -> ia (i); /* Set size in area. */
	     areap -> area.array (i).fptr = "0"b;	/* Clear free pointer. */
	end;
	areap -> area.nsizes = nsizes;		/* Set number of diff. sizes to allocate. */
	areap -> area.lw = bin (rel (areap), 18) + size -1; /* Set rel. ptr to last good word. */
	areap -> area.lu = divide (bin (rel (addr (areap -> area.array (nsizes+1))), 18)+1, 2, 17, 0) * 2;
						/* Set rel. ptr to next good even word. */
	return;

alloc:	entry (ap, s, rp);				/* Entry to allocate some things. */

dcl  rp ptr;

	size = s;					/* Copy args. */
	areap = ap;

allocate: 
	do i = 1 to areap -> area.nsizes;		/* Loop over all size slots. */
	     if areap -> area.array (i).size = size then do; /* Look for right one. */
		if areap -> area.array (i).fptr then do; /* See if one is free. */
		     rp = ptr (areap, areap -> area.array (i).fptr); /* Set return ptr. */
		     areap -> area.array (i).fptr = rp -> last_free_rp; /* Rethread free list. */
		end;
		else do;				/* Nothing free..get more. */
		     if areap -> area.lu + size - 1 > areap -> area.lw
			then do;			/* return null ptr if empty */
			rp = null;
			return;
		     end;
		     else do;
			rp = ptr (areap, areap -> area.lu); /* Set return ptr to enw space. */
			areap -> area.lu = areap -> area.lu + divide (size+1, 2, 17, 0) * 2;
							/* Bump last used ptr. */
		     end;
		end;

		nbits = size * 36;			/* Clear newly allocated words. */
		rp -> clear = "0"b;			/* Best way to zero out space - Sept 1974 */
		return;
	     end;
	end;
	signal bad_dir_;				/* Used to crash system here with illegal allocation */

free:	entry (ap, s, rp);				/* Entry to free up space. */

	areap = ap;				/* Copy args. */
	size = s;

	do i = 1 to areap -> area.nsizes;		/* Look for right slot. */
	     if areap -> area.array (i).size = size then do; /* ... */
		rp -> last_free_rp = areap -> area.array (i).fptr; /* Thread onto free list. */
		areap -> area.array (i).fptr = rel (rp);
		rp -> word (2) = "0"b;
		return;
	     end;
	end;
	signal bad_dir_;				/* used to crash system with illegal freeing */

     end fs_alloc;
