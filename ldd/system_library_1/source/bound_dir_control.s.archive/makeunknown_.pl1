/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
makeunknown_: proc (a_segno, a_switches, zero_lot, a_code);

/*

   Written March 1975 by R. Bratt

   Last modified by:

   R. Bratt July 13 1975 to not report segno_in_use
   R. Bratt Janurary 26 1976 for nss
   M. Weaver April 22 1977 to indicate zero usage count
   B. Margulies to protect nonnull-refnames when terminating null ones
   E. N. Kittlitz February 1983 for kst_util$unthread_kste.
   K. Loepere November 1984 to rename to makeunknown_.

   --->  makeunknown_ removes the KST  entry  for  a   segment   given   its  segment   number.
   makeunknown_  operates  as  follows.  If the kste has a positive usage count in the caller's
   ring then the usage  count is  decremented  unless the caller specified  force,  in  which
   case  the  usage  count  is  forcably  zeroed.  If  all usage counts  are  not zero,  then
   makeunknown_  returns.  Otherwise, makeunknown_ verifies that  the  segment   has   no   known
   inferiors.   If   this  condition obtains  then  makeunknown_  unbinds  the  segment  number
   from the object. If rsw is set then the freed  segment  number  is  marked   as  reserved.
   Otherwise,  the segment number is returned to the pool of free segment numbers.
   USAGE: call makeunknown_ (segno, switches, zero_lot, code)

   segno fixed bin(17) - - - segment number of the segment
   switches bit(36) aligned - - - switches
   1 - - - reserve switch
   x1 - - - force switch
   zero_lot bit (1) aligned - - - indicates whether lot entry should be zeroed
   code fixed bin (35) - - - error code (output)

   ---> CALL makeunknown_$protect_names (segno, n_names, switches, zero_lot, code);
   This is as makeunknown_, but there must be at least n_names+1 references
   or a code is returned.

*/

dcl  a_segno fixed bin (17),
     a_switches bit (36) aligned,
     zero_lot bit (1) aligned,
     a_code fixed bin (35);
dcl  a_n_names fixed bin;

dcl  pkstep ptr,
     ring fixed bin,
     code fixed bin (35),
     segno fixed bin (17);
dcl  n_names fixed bin;

dcl  1 switches aligned,
       2 rsw bit (1) unal,
       2 force bit (1) unal,
       2 pad bit (34) unal;

dcl  setfaults$disconnect ext entry (fixed bin (17)),
     pathname_am$clear ext entry (fixed bin (17)),
     get_kstep ext entry (fixed bin (17), ptr, fixed bin (35)),
     kst_util$unthread_kste ext entry (ptr),
     level$get ext entry returns (fixed bin);

dcl  (error_table_$known_in_other_rings, error_table_$infcnt_non_zero) ext fixed bin (35);
dcl  error_table_$no_null_refnames fixed bin (35) ext static;

dcl  (addr, baseno, baseptr, binary, fixed, null, rel, substr, unspec) builtin;

%include kst;


	n_names = 0;
	go to Join;

protect_names:
     entry (a_segno, a_n_names, a_switches, zero_lot, a_code);
	n_names = a_n_names;

Join:
	string (switches) = a_switches;
	segno = a_segno;
	zero_lot = "0"b;
	a_code = 0;
	kstp = pds$kstp;
	ring = level$get ();
						/* make sure segno is good */
	call get_kstep (segno, kstep, code);
	if code ^= 0 then call abort (code);
						/* update usage count */
						/* Force_switch is not permitted with n_names > 0 */

	if n_names > 0
	then if kste.usage_count (ring) ^> n_names	/* see only null */
	     then do;
		a_code = error_table_$no_null_refnames;
		return;
	     end;

	if switches.force
	then kste.usage_count (ring) = 0;
	else if kste.usage_count (ring) > 0
	then kste.usage_count (ring) = kste.usage_count (ring) - 1;
						/* don't terminate if still in use */

/*	LOT, ISOT entries should be zeroed when usage count goes to 0 */
	if kste.usage_count (ring) = 0 then if (ring > 0) & (^kste.dirsw) then zero_lot = "1"b;

	if unspec (kste.usage_count) ^= "0"b
	then if switches.force
	     then call abort (error_table_$known_in_other_rings);
	     else return;
						/* don't terminate if known inferiors */
	if kste.infcount ^= 0 & kste.flags.dirsw
	then call abort (error_table_$infcnt_non_zero);
						/* decrement parent's inferior count */
	if kste.entryp ^= null
	then do;
	     pkstep = addr (kst.kst_entry (fixed (baseno (kste.entryp), 17)));
	     pkstep -> kste.infcount = pkstep -> kste.infcount - 1;
	end;
						/* hash out of uid hash thread */
	call kst_util$unthread_kste (kstep);
						/* let the world know its gone */
	call setfaults$disconnect (segno);
	if kste.flags.dirsw then call pathname_am$clear (segno);
						/* make kste look nice */
	unspec (kste) = "0"b;
	kste.segno = segno;
						/* thread kste on to free chain */
	if switches.rsw
	then kste.fp = (18)"1"b;
	else do;
	     kste.fp = kst.free_list;
	     kst.free_list = rel (kstep);
	end;
	return;

abort: proc (code);
dcl  code fixed bin (35);
	a_code = code;
	go to non_local_return;
     end abort;

non_local_return:
	return;

     end makeunknown_;
