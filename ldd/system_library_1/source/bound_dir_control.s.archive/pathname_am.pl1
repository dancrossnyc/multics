/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/*
   Written March 1975 by R. Bratt

   Last Modified:

   Janurary 30 1976 by R. Bratt to flush pam on directory renames and deletions
   May 31 1976 by R. Bratt to implement kst garbage collection
   November 1984 by Keith Loepere to move pam flush buffer to 
     active_hardcore_data.  Also to change to using uid based flushing,
     instead of hierarchy depth.

   pathname_am  provides an associative memory to remember the correspondence
   between pathnames and directory segment numbers in a process. This associative
   memory is  managed by an lru algorithm.

   pathname_am$set places a pathname, segment number pair in the associative memory
   USAGE: call pathname_am$set (pathname, segnum);

   pathname_am$get_segno gets the segment number given a pathname
   USAGE: call pathname_am$get_segno (pathname, segnum);
   NOTE: since segment number associations kept in the pathname associative
   memory are not immune to garbage collection we increment a segment number's
   usage count before returning it.  

   pathname_am$get_path gets the pathname given a segment number
   USAGE: call pathname_am$get_path (pathname, segnum);

   pathname_am$clear clears all associations between pathnames and a given segment number
   USAGE: call pathname_am$clear (segnum);

   pathname_am$flush causes a global flush from a given uid
   USAGE: call pathname_am$flush (uid);

   pathname char(*) varying --- pathname (no trailing blanks allowed)
   segnum fixed bin(17) --- segment number
   uid bit (36) aligned --- uid of directory

*/
pathname_am: proc;

/* Parameters */

dcl  a_pname			char (*) varying parameter;
dcl  a_segnum			fixed bin (17) parameter;
dcl  a_uid			bit (36) aligned parameter;

/* Variables */

dcl  flush_level			fixed bin (35);
dcl  hash_slot			fixed bin;
dcl  pam_index			fixed bin;
dcl  plen				fixed bin;
dcl  prevp			ptr;

/* Entries */

dcl  kstsrch			entry (bit (36) aligned, fixed bin (17), ptr);
dcl  segno_usage$increment		entry (fixed bin (17), fixed bin (35));

/* Misc */

dcl  (addr, baseptr, dimension, length, mod, null, segno, stacq, substr) builtin;
%page;
initialize: entry ();

	amp = addr (pds$pathname_am);
	call empty_pam;
	pam.sets, pam.gets, pam.hits, pam.getps, pam.hitps, pam.rejects = 0;
	pam.clears, pam.flushes, pam.overflows, pam.overflow_uids, pam.flushed = 0;
	pam.initial_flush_level, pam.flush_level = active_hardcore_data$pam_flush_level;
	return;
%page;
get_segno: entry (a_pname, a_segnum);

	call update_to_current_flush_level ();
	plen = length (a_pname);
	a_segnum = -1;
	pam.gets = pam.gets + 1;
	if plen > PAM_name_max_lth then return;
	do amep = amp -> ame.fp repeat (ame.fp) while (amep ^= amp);
	     if plen = ame.name_len then
		if a_pname = substr (ame.name, 1, ame.name_len) then do;
		     pam.hits = pam.hits + 1;
		     call segno_usage$increment ((ame.segno), (0)); /* prevent garbage collection */
		     a_segnum = ame.segno;
		     call thread_to_head ();
		     return;
		end;
	end;
	return;
%page;
get_path: entry (a_pname, a_segnum);

	call update_to_current_flush_level ();
	pam.getps = pam.getps + 1;
	do amep = amp -> ame.fp repeat (ame.fp) while (amep ^= amp);
	     if a_segnum = ame.segno then do;
		pam.hitps = pam.hitps + 1;
		a_pname = substr (ame.name, 1, ame.name_len);
		call thread_to_head ();
		return;
	     end;
	end;
	a_pname = "";
	return;
%page;
set: entry (a_pname, a_segnum);

	call update_to_current_flush_level ();
	pam.sets = pam.sets + 1;
	plen = length (a_pname);
	if plen > PAM_name_max_lth then do;
	     pam.rejects = pam.rejects + 1;
	     return;
	end;
	amep = amp -> ame.bp;			/* take LRU entry */
	ame.segno = a_segnum;
	substr (ame.name, 1, plen) = a_pname;
	ame.name_len = plen;
	call thread_to_head ();
	return;
%page;
clear: entry (a_segnum);

	amp = addr (pds$pathname_am);
	pam.clears = pam.clears + 1;
	do pam_index = 1 to dimension (pam.search, 1);
	     if pam.search (pam_index).segno = a_segnum then do;
		pam.cleared = pam.cleared + 1;
		amep = addr (pam.search (pam_index));
		ame.segno = 0;
		ame.name_len = 0;
		call thread_to_tail ();
	     end;
	end;
	return;
%page;
flush: entry (a_uid);

/* The idea is to record in the circular pam_flush_buffer the uid of the 
directory that was deleted/renamed.  Everyone must make sure no path in
their pam contains this uid before they can use their pam again. */

	amp = addr (pds$pathname_am);
	do flush_level = active_hardcore_data$pam_flush_level + 1 repeat (active_hardcore_data$pam_flush_level + 1) while (^set_flush_level ());
						/* get a flush buffer slot all to myself */
	end;					/* set associated depth */
	active_hardcore_data$pam_flush_buffer
	     (mod (flush_level, dimension (active_hardcore_data$pam_flush_buffer, 1))) = a_uid;
						/* make sure  others haven't caught up and eaten our slot */
	do while (active_hardcore_data$pam_flush_level - flush_level
	     > dimension (active_hardcore_data$pam_flush_buffer, 1));
	     flush_level = active_hardcore_data$pam_flush_level; /* DAMN!!!! - system will have lost track of uids to flush */
	     active_hardcore_data$pam_flush_buffer
		(mod (flush_level, dimension (active_hardcore_data$pam_flush_buffer, 1))) = (36)"1"b; /* make sure the world knows */
	end;
	return;

set_flush_level: proc () returns (bit (1) aligned);	/* try to store new flush_level */

dcl  flush_level_minus_1		fixed bin (35);

dcl  new_value			bit (36) aligned based (addr (flush_level));
dcl  old_value			bit (36) aligned based (addr (flush_level_minus_1));
dcl  word				bit (36) aligned based (addr (active_hardcore_data$pam_flush_level));

	flush_level_minus_1 = flush_level - 1;
	return (stacq (word, new_value, old_value));
     end;
%page;
empty_pam: proc;

	prevp = addr (pds$pathname_am);
	do pam_index = 1 to dimension (pam.search, 1);
	     amep = addr (pam.search (pam_index));
	     prevp -> ame.fp = amep;
	     ame.bp = prevp;
	     ame.segno = 0;
	     ame.name_len = 0;
	     prevp = amep;
	end;
	prevp -> ame.fp = amp;
	amp -> ame.bp = prevp;
	return;
     end;

thread_to_head: proc;

	ame.fp -> ame.bp = ame.bp;			/* thread out */
	ame.bp -> ame.fp = ame.fp;
	ame.fp = amp -> ame.fp;			/* thread back in */
	ame.bp = amp;
	ame.bp -> ame.fp = amep;
	ame.fp -> ame.bp = amep;
	return;
     end thread_to_head;

thread_to_tail: proc;

	ame.fp -> ame.bp = ame.bp;			/*  thread out */
	ame.bp -> ame.fp = ame.fp;
	ame.bp = amp -> ame.bp;			/* thread back in */
	ame.fp = amp;
	ame.bp -> ame.fp = amep;
	ame.fp -> ame.bp = amep;
	return;
     end thread_to_tail;
%page;
update_to_current_flush_level: proc;			/* catch up to global flush level */

/* Actually, this sub-proc implements the logic to make sure that our pam
doesn't contain any paths which contain a directory that was deleted or 
renamed.  This is done by checking the uidpaths of the paths in our pam against
the list of uids of directories that have been deleted/renamed system wide.
If this list of uids is small enough, we can flush only certain paths.  If
too many directories were deleted/renamed system wide to keep up with, we 
are stuck flushing our entire pam. */

dcl  ahd_flush_buffer_index		fixed bin;
dcl  current_flush_level		fixed bin (35);
dcl  entryp			ptr;
dcl  num_uids_to_flush		fixed bin;
dcl  pam_index			fixed bin;
dcl  uid				bit (36) aligned;
dcl  uids_to_flush			(15) bit (36) aligned; /* if more than this many uids match in addr space, not worth not flushing all */
dcl  uids_to_flush_index		fixed bin;

	amp = addr (pds$pathname_am);
	current_flush_level = active_hardcore_data$pam_flush_level;
	if current_flush_level = pam.flush_level then return;

	if current_flush_level - pam.flush_level ^> dimension (active_hardcore_data$pam_flush_buffer, 1) then do;
						/* not too many uids - looks like we can selectively flush */
	     num_uids_to_flush = 0;
	     do ahd_flush_buffer_index = pam.flush_level + 1 to current_flush_level;
		uid = active_hardcore_data$pam_flush_buffer (mod (ahd_flush_buffer_index, dimension (active_hardcore_data$pam_flush_buffer, 1)));
		if uid = (36)"1"b then go to overflow;
		call kstsrch (uid, hash_slot, kstep);	/* quick check to see if we should consider uid */
		if kstep ^= null then do;		/* appears in our addr space */
		     if num_uids_to_flush >= dimension (uids_to_flush, 1) then do;
			pam.overflow_uids = pam.overflow_uids + 1;
			go to overflow;
		     end;
		     num_uids_to_flush = num_uids_to_flush + 1; /* add to list */
		     uids_to_flush (num_uids_to_flush) = uid;
		end;
	     end;
	     if active_hardcore_data$pam_flush_level - pam.flush_level
		> dimension (active_hardcore_data$pam_flush_buffer, 1) then go to overflow; /* system overwrote where we were looking - sigh */
	end;
	else do;
overflow:						/* complete flush required */
	     pam.overflows = pam.overflows + 1;
	     call empty_pam;
	     pam.flush_level = current_flush_level;
	     return;
	end;

	if num_uids_to_flush > 0 then do;
	     kstp = pds$kstp;
	     pam.flushes = pam.flushes + 1;
	     do pam_index = 1 to dimension (pam.search, 1);
		if pam.search (pam_index).segno > 0 then
		     do entryp = baseptr (pam.search (pam_index).segno) repeat kste.entryp while (entryp ^= null);
						/* check uid paths of all pam entries */
		     kstep = addr (kst.kst_entry (segno (entryp)));
		     do uids_to_flush_index = 1 to num_uids_to_flush;
			if kste.uid = uids_to_flush (uids_to_flush_index) then do;
			     amep = addr (pam.search (pam_index));
						/* pam entry has a uid => directory in path that was deleted/renamed */
			     pam.flushed = pam.flushed + 1;
			     ame.segno = 0;
			     ame.name_len = 0;
			     call thread_to_tail ();
			     go to next_pam_entry;
			end;
		     end;
		end;
next_pam_entry:
	     end;
	end;
	pam.flush_level = current_flush_level;
	return;
     end update_to_current_flush_level;
%page; %include kst;
%page; %include pathname_am;
     end pathname_am;
