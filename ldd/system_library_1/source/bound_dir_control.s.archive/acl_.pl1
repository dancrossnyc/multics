/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


acl_: proc;					/* performs function on a specified acl entry */

/* Converted to v2 by E. Stone 12/73 */
/* Modified by e Stone Nov 1974 to fix a bug in deleting whole acl */
/* perm acls removed and new fields set 6/76 THVV */
/* Modified 07/77 by THVV for bad_dir_ check */

/*
   entry:

   add_entry(acl_start_ptr, acl_entry_ptr, a_add_sw, uid, code)

   .  given the addr of the entry acl frp and the acl entry str , add to acl list or insert new mode.

   del_entry(acl_start_ptr, acl_entry_ptr, code)

   .  given the addr of the entry acl frp and the acl str (name components are used here) delete the
   .  acl entry if it exists.

   del_acl(acl_start_ptr, code)

   .  delete the entire acl specified by the addr of the entry acl frp.

   list_entry(acl_start_ptr, acl_entry_ptr, offset, code)

   .  given the addr of the entry acl frp, then if offset ^= 0 then list the
   .  offset'th acl entry in the str pointed to by acl_entry_ptr, else match the access name given
   .  in the acl_entry_ptr structure and return the mode and ex_mode if a match exists.

   Arguments:

   1. acl_start_ptr ptr	points to the acl forward rel ptr in the entry.
   2. acl_entry_ptr ptr	points to the following structure:
   |	dcl 1 acl1 based aligned,
   |	    2 ac_name,
   |	    3 person char(32),
   |	    3 project char(32),
   |	    3 tag char(1),
   |	    2 mode bit(36),
   |	    2 ex_mode bit(36);
   3. offset fixed bin	is used to specify which acl entry to list if the ac_name isn't used
   .			as a matching criterion.
   4. a_add_sw bit(1) aligned	used to indicate if added an acl entry (= "1"b) or just replaced mode (="0"b).
   5. uid bit (36)		uid of owning entry
   6. code fixed bin(35)	standard error code.

*/

dcl  a_offset fixed bin;				/* parameter */
dcl  entry_uid bit (36) aligned;			/* parameter */
dcl  entry_acl_count fixed bin;			/* Parameter */
dcl  code fixed bin (35);				/* parameter */
dcl (acl_start_ptr, acl_entry_ptr) ptr;			/* parameter */
dcl  a_add_sw bit (1);				/* parameter */

dcl 1 ptr_list based aligned,				/* dummy overlay for frp and brp */
    2 frp bit (18) unaligned,
    2 brp bit (18) unaligned;

dcl 1 acl1 based (acl_entry_ptr) aligned,
    2 ac_name,
      3 person char (32),
      3 project char (32),
      3 tag char (1),
    2 mode bit (36),
    2 ex_mode bit (36);

dcl (i, offset, point) fixed bin;
dcl  np ptr;
dcl  area_ptr ptr;
dcl (rp, next_aclrp) bit (18) aligned;

dcl  acc_list_$match ext entry (fixed bin, bit (36) aligned, ptr, ptr, ptr, fixed bin, fixed bin (35));
dcl  acc_name_$delete ext entry (ptr);
dcl  acc_name_$encode ext entry (ptr, ptr, fixed bin (35));
dcl (fs_alloc$alloc, fs_alloc$free) ext entry (ptr, fixed bin, ptr);

dcl (error_table_$user_not_found, error_table_$empty_acl) ext fixed bin (35);
dcl (error_table_$argerr, error_table_$noalloc) ext fixed bin (35) ext;
dcl  active_hardcore_data$aclsize ext fixed bin;

dcl (addr, addrel, null, rel, ptr, unspec) builtin;
dcl  bad_dir_ condition;

%include fs_types;
%include dir_header;
% include dir_acl;
/*  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

list_entry: entry (entry_acl_count, entry_uid, acl_start_ptr, acl_entry_ptr, a_offset, code);

	code = 0;
	point = a_offset;

	if point = 0 then do;			/* want to match entry */
	     call acc_list_$match (entry_acl_count, entry_uid, acl_start_ptr, acl_entry_ptr,
		aclep, a_offset, code);
	     if code ^= 0 then return;
						/* a normal match return */
	     acl_entry_ptr -> acl1.mode = aclep -> acl_entry.mode;
	     acl_entry_ptr -> acl1.ex_mode = aclep -> acl_entry.ex_mode;
	     return;

	end;
						/* now for given index case */
	aclep = acl_start_ptr;

	do i = 1 to point;
	     if aclep -> acl_entry.frp = "0"b then do;
		a_offset = i;
		code = error_table_$argerr;
		return;
	     end;

	     aclep = ptr (aclep, aclep -> acl_entry.frp); /* move to next entry */
	end;


	if aclep -> acl_entry.name.pers_rp = "0"b then acl_entry_ptr -> acl1.ac_name.person = "*";
	else acl_entry_ptr -> acl1.ac_name.person = ptr (aclep, aclep -> acl_entry.name.pers_rp) -> access_name.name;
	if aclep -> acl_entry.name.proj_rp = "0"b then acl_entry_ptr -> acl1.ac_name.project = "*";
	else acl_entry_ptr -> acl1.ac_name.project = ptr (aclep, aclep -> acl_entry.name.proj_rp) -> access_name.name;
	acl_entry_ptr -> acl1.ac_name.tag = aclep -> acl_entry.name.tag;
	acl_entry_ptr -> acl1.mode = aclep -> acl_entry.mode;
	acl_entry_ptr -> acl1.ex_mode = aclep -> acl_entry.ex_mode;

	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  */
del_entry: entry (entry_acl_count, entry_uid, acl_start_ptr, acl_entry_ptr, code);

/* First the correct acl entry is found, then if it
   is allocated the space is freed, while special casing
   last, only, and first acl entry. */

	code = 0;

	dp = ptr (acl_start_ptr, 0);
	area_ptr = ptr (dp, dp -> dir.arearp);

	call acc_list_$match (entry_acl_count, entry_uid, acl_start_ptr, acl_entry_ptr, aclep, point, code);
						/* point has the offset value of where match occured */
	if code ^= 0 then return;

	call acc_name_$delete (addr (aclep -> acl_entry.name));

	if aclep -> acl_entry.frp = "0"b then do;	/* End of list. */
	     if aclep -> acl_entry.brp = "0"b then do;	/* only reset acl frp if no prev slots */
		acl_start_ptr -> ptr_list.frp,
		     acl_start_ptr -> ptr_list.brp = "0"b;
	     end;
	     else do;
		ptr (aclep, aclep -> acl_entry.brp) -> acl_entry.frp = "0"b;
		acl_start_ptr -> ptr_list.brp = aclep -> acl_entry.brp;
	     end;
	end;
	else do;
	     ptr (aclep, aclep -> acl_entry.frp) -> acl_entry.brp = aclep -> acl_entry.brp;
	     if aclep -> acl_entry.brp = "0"b then acl_start_ptr -> ptr_list.frp = aclep -> acl_entry.frp;
	     else ptr (aclep, aclep -> acl_entry.brp) -> acl_entry.frp = aclep -> acl_entry.frp;
	end;

	call fs_alloc$free (area_ptr, active_hardcore_data$aclsize, aclep);

	return;

/*  *  *  *  *  *  *  *  *  *  *  *  */

del_acl:	entry (entry_acl_count, entry_uid, acl_start_ptr); /* delete whole acl */

	if acl_start_ptr -> ptr_list.brp = "0"b then return; /* empty acl */

	dp = ptr (acl_start_ptr, 0);
	area_ptr = ptr (dp, dp -> dir.arearp);

	i = 0;
	do rp = acl_start_ptr -> acl_entry.frp repeat next_aclrp while (rp);
	     aclep = ptr (dp, rp);
	     i = i + 1;
	     if i > entry_acl_count
	     | aclep -> acl_entry.owner ^= entry_uid
	     | aclep -> acl_entry.type ^= ACLE_TYPE then signal bad_dir_;
	     call acc_name_$delete (addr (aclep -> acl_entry.name));

	     next_aclrp = aclep -> acl_entry.frp;	/* get offset of next acl before freeing */

	     call fs_alloc$free (area_ptr, active_hardcore_data$aclsize, aclep);

	end;					/* i loop */

	acl_start_ptr -> ptr_list.frp,		/* adjust start ptrs */
	     acl_start_ptr -> ptr_list.brp = "0"b;
	return;

/*  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

add_entry: entry (entry_acl_count, entry_uid, acl_start_ptr, acl_entry_ptr, a_add_sw, code);
						/* add or replace an acl */

/* First an empty acl is handled, then adding to the bottom
   of the list, then inserting into the list. */

	code = 0;
	dp = ptr (acl_start_ptr, 0);
	area_ptr = ptr (dp, dp -> dir.arearp);
	a_add_sw = "0"b;

	call acc_list_$match (entry_acl_count, entry_uid, acl_start_ptr, acl_entry_ptr, np, (0), code);
	if code = 0 then do;			/* a normal replacement of mode */
	     np -> acl_entry.mode = acl_entry_ptr -> acl1.mode;
	     np -> acl_entry.ex_mode = acl_entry_ptr -> acl1.ex_mode;
	     return;
	end;
	else if code = error_table_$empty_acl | code = error_table_$user_not_found then do;
	     call fs_alloc$alloc (area_ptr, active_hardcore_data$aclsize, aclep);
	     if aclep = null then go to alloc_err;
	     if code = error_table_$empty_acl then do;
		acl_start_ptr -> ptr_list.frp, acl_start_ptr -> ptr_list.brp = rel (aclep);
		aclep -> acl_entry.frp, aclep -> acl_entry.brp = "0"b;
	     end;
	     else if np = null then do;		/* must add to end of list */
		np = ptr (dp, acl_start_ptr -> ptr_list.brp);
						/* move to last entry */
		acl_start_ptr -> ptr_list.brp = rel (aclep);
		np -> acl_entry.frp = rel (aclep);
		aclep -> acl_entry.frp = "0"b;
		aclep -> acl_entry.brp = rel (np);
	     end;
	     else do;				/* an insertion, add before entry ptd to */
		aclep -> acl_entry.frp = rel (np);
		aclep -> acl_entry.brp = np -> acl_entry.brp;
		if aclep -> acl_entry.brp = "0"b then acl_start_ptr -> ptr_list.frp = rel (aclep);
		else ptr (aclep, aclep -> acl_entry.brp) -> acl_entry.frp = rel (aclep);
		np -> acl_entry.brp = rel (aclep);
	     end;
	end;
	else return;				/* some other code */

	a_add_sw = "1"b;				/* set to indicate entry added */
	aclep -> acl_entry.type = ACLE_TYPE;
	aclep -> acl_entry.size = active_hardcore_data$aclsize;
	aclep -> acl_entry.owner = entry_uid;
	call acc_name_$encode (addr (aclep -> acl_entry.name), acl_entry_ptr, code);
	if code ^= 0 then return;

	aclep -> acl_entry.mode = acl_entry_ptr -> acl1.mode;
	aclep -> acl_entry.ex_mode = acl_entry_ptr -> acl1.ex_mode;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

alloc_err:
	code = error_table_$noalloc;
	return;

     end acl_;
