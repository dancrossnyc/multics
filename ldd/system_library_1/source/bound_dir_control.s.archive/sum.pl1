/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,indcomtxt */

sum:
     procedure;

/* Totally rewritten March 1975 by R. Bratt for new kst, to restructure to code, and to fix a horrid bug in dirmod */
/* Mod 4/25/75 by BSG for NSS */
/* Modified by Kobziar to drop get_ring entry */
/* Last modified 760310 by LJS to use info-only entry in dir_control_error */
/* Modified by Mike Grady 9/79 to stop using dir_control_error */
/* Modified 12 August 1981, W. Olin Sibert, to move error code generation into validate_entryp */
/* Modified 3/82 BIM for change_pclock in the dir header */
/* Modified 84-03-14 BIM to make pc$updates actually do something for dirmod */
/* Modified 84-10-15 Keith Loepere to move validate_entryp in here. */
/* Modified 85-01-21 Keith Loepere for dtm setting covert event. */

/* ---> sum$getbranch locks the directory and returns the branch pointer for
   a given segment.

   USAGE: call sum$getbranch (segptr, type_lock, aep, code);

   1) segptr ptr - - - pointer to a segment
   2) type_lock bit(36) aligned - - - string indicating whether lock is read or write lock (input)
   3) aep ptr - - - pointer to the branch of that segment (output)
   4) code fixed bin - - - error code (output)

   ---> sum$dirmod sets the file modified switch on a directory and reflects it up, and bumps the pclock in the dir.

   USAGE: call sum$dirmod (adp);

   1) adp ptr - - - pointer to the directory that has been modified
*/

/* Parameters */

	dcl     a_code		 fixed bin (35);
	dcl     a_dp		 ptr;
	dcl     a_ep		 ptr;
	dcl     a_segptr		 ptr;
	dcl     a_type_lock		 bit (36) aligned;

/* Variables */

	dcl     code		 fixed bin (35);
	dcl     dtm_changed		 bit (1) aligned;
	dcl     lsw		 bit (1) aligned;
	dcl     my_lock_entry	 bit (1) aligned init ("0"b);
	dcl     old_dtm		 bit (36) aligned;
	dcl     segptr		 ptr;
	dcl     target_dp		 ptr;
	dcl     type_lock		 bit (36) aligned;

/* External */

	dcl     error_table_$mylock	 fixed bin (35) ext;
	dcl     error_table_$root	 fixed bin (35) ext;
	dcl     error_table_$seg_deleted
				 fixed bin (35) external static;
	dcl     pds$throttle_segment_state_changes
				 bit (1) aligned external static;
	dcl     1 pds$transparent	 external aligned,
	        ( 2 m		 bit (1),
		2 u		 bit (1)
		)		 unaligned;

/* Entries */

	dcl     activate		 ext entry (ptr, fixed bin (35)) returns (ptr);
	dcl     get_kstep		 ext entry (fixed bin (17), ptr, fixed bin (35));
	dcl     limit_covert_channel	 entry (fixed bin);
	dcl     lock$dir_unlock	 external entry (ptr);
	dcl     lock$dir_wait	 external entry (ptr, bit (36) aligned, fixed bin (35));
	dcl     lock$lock_ast	 entry;
	dcl     lock$unlock_ast	 entry;
	dcl     pc$updates		 external entry (ptr);
	dcl     syserr		 external entry options (variable);

/* Misc */

	dcl     (addr, baseno, fixed, null, pointer, ptr)
				 builtin;

	dcl     (bad_dir_, fixedoverflow)
				 condition;
%page;
getbranch_root_my:
     entry (a_segptr, a_type_lock, a_ep, a_code);

/* same as getbranch but returns the mylock error code. */

	my_lock_entry = "1"b;

getbranch:
     entry (a_segptr, a_type_lock, a_ep, a_code);

/* entry to lock the directory and return the branch pointer for a given segment */

	segptr = a_segptr;
	type_lock = a_type_lock;
	a_code = 0;
	a_ep = null ();
	call get_kstep (fixed (baseno (segptr), 17), kstep, code);
	if code ^= 0
	then call abort (code);

	if kstep -> kste.uid = (36)"1"b		/* is this the root */
	then call abort (error_table_$root);		/* set the root code */

	dp = ptr (kste.entryp, 0);
	lsw = "1"b;				/* set lock switch */
	call lock$dir_wait (dp, type_lock, code);	/* lock the directory */
	if code ^= 0
	then if code ^= error_table_$mylock		/* not mylock */
	     then call abort (code);			/* then done */
	     else if my_lock_entry			/* old getbranch entry */
	     then do;
		     lsw = "0"b;
		     a_code = code;			/* be sure caller knows not to unlock */
		end;
	     else call syserr (CRASH, "sum: mylock error on ^p", dp);

	ep = validate_entryp (kstep, code);
	if ep = null ()
	then do;
		call unlock ();
		call abort (code);
	     end;
	a_ep = ep;
	return;
%page;
dirmod:
     entry (a_dp);

/* entry to set the file modified switch on a directory and reflect it up */

	if pds$transparent.m = "1"b
	then return;				/* Do nothing if in transparent modification mode. */
	target_dp = a_dp;
	on fixedoverflow
	     begin;
		target_dp -> dir.change_pclock = 0;
		go to clocked;
	     end;

(fixedoverflow):
	target_dp -> dir.change_pclock = target_dp -> dir.change_pclock + 1;

clocked:
	call get_kstep (fixed (baseno (target_dp), 17), kstep, code);
	if code ^= 0
	then return;				/* if segno invalid, skip it */
	if kstep -> kste.uid = (36)"1"b
	then do;					/* this is the root */
		call lock$lock_ast;			/* so we can change gtms safely */
		astep = addr (sst_seg$) -> sst.root_astep;
						/* if so get the astep from the sst */
	     end;
	else do;
		ep = validate_entryp (kstep, (0));	/* We don't care what is wrong, and code is already zero */
		if ep = null
		then return;			/* if it was deleted, skip it */
		astep = activate (ep, code);		/* Get pointer to ASTE of dir */
						/* Dir oughtta have been locked, can't delete */
		if astep = null
		then call syserr (CRASH, "sum: dirmod failed to activate ^p", ep);
	     end;
	aste.gtms = "0"b;				/* tell page control that we really mean it */
	old_dtm = aste.dtm;
	call pc$updates (astep);			/* set the fms switch on */
	dtm_changed = (old_dtm ^= aste.dtm);
	aste.gtms = "1"b;				/* shut the door */
	call lock$unlock_ast;
	if pds$throttle_segment_state_changes 
	then if dtm_changed
	     then call limit_covert_channel (1);	/* setting dtm propogates up thru aim boundaries */
	return;
%page;
unlock:
     proc ();
	if lsw
	then call lock$dir_unlock (dp);
     end unlock;

abort:
     proc (code);
	dcl     code		 fixed bin (35);
	a_code = code;
	go to non_local_return;
     end abort;

non_local_return:
	return;
%page;
validate_entryp:
     procedure (a_kstep, a_code) returns (pointer);

/* *	VALIDATE_ENTRYP
   *
   *	This procedure is used to ensure a kste entry pointer is valid; that is,
   *	that the directory salvager has not moved it, and that repeated entry
   *	deletions and creations have not rendered it invalid.
   *
   *	If the kste entry pointer points to an entry which passes a few simple
   *	checks, it is assumed to be valid, and is returned. Otherwise, the
   *	entire directory is searched for an entry with the proper matching UID,
   *	and a pointer to that entry is returned. If this, too, fails, a null
   *	pointer is returned, and an error code appropriate to the purpose,
   *	depending on access.
   *
   *	The initial check avoids touching anything other than the entry structure
   *	itself, to minimize page faults on the directory.
   *
   *	The caller of this procedure is assumed to have the directory already
   *	locked. This procedure is capable of signalling bad_dir_.
   *
   *	Written April 1975 for new KST/RNT system by R. Bratt
   *	Modified 8/76 by S.E. Barr for new hash table format
   *	Modified 07/77 by THVV for bad_dir_ check
   *	Modified 12 August 1981, W. Olin Sibert, to move the code for generation
   *	  of the error code here, from sum, and to change the calling sequence from
   *	  (entryp, uid) to (kstep, code).
   *	Modified 23 March 1984, K. Loepere to check entry.bs
*/

/* Parameters */

	dcl     a_code		 fixed bin (35) parameter;
	dcl     a_kstep		 pointer parameter;

/* Variables */

	dcl     dp		 pointer;
	dcl     entries_in_dir	 fixed bin;
	dcl     entries_seen	 fixed bin;
	dcl     ep		 pointer;
	dcl     kstep		 pointer;
	dcl     np		 pointer;
	dcl     rep		 bit (18) aligned;
	dcl     uid		 bit (36) aligned;
%page;
	kstep = a_kstep;
	uid = kstep -> kste.uid;
	ep = kstep -> kste.entryp;			/* What we think it is now... */
	dp = pointer (ep, 0);
	np = addr (ep -> entry.primary_name);

/* Consistency check:  UID matches in entry and in primary name; and type is valid. */
/* Also ensure entry.bs is on for branches */

	if uid = ep -> entry.uid
	then if (ep -> entry.type = SEG_TYPE) | (ep -> entry.type = DIR_TYPE)
	     then if ep -> entry.bs = "1"b  /* Must have entry.bs on. */
		then if np -> names.owner = uid
		     then do;
			     a_code = 0;		/* Looks OK */
			     return (ep);
			end;

/* If it fails the check, then it has moved. We must go hunting for it. */
/* We should probably meter these events in active_hardcore_data.... */

	entries_in_dir = dp -> dir.seg_count + dp -> dir.dir_count + dp -> dir.lcount;
	entries_seen = 0;

	do rep = dp -> dir.entryfrp repeat (ep -> entry.efrp) while (rep ^= "0"b);
	     ep = pointer (dp, rep);			/* get a pointer to the next entry */
	     entries_seen = entries_seen + 1;

	     if entries_seen > entries_in_dir
	     then signal condition (bad_dir_);

	     if ep -> entry.bs
	     then if (ep -> entry.owner ^= dp -> dir.uid)
		     | (ep -> entry.type ^= SEG_TYPE & ep -> entry.type ^= DIR_TYPE)
		then signal condition (bad_dir_);

	     if ep -> entry.uid = uid
	     then do;				/* match is found */
		     kstep -> kste.entryp = ep;	/* Update KSTE, so this will work next time */
		     a_code = 0;			/* Success */
		     return (ep);
		end;
	end;					/* Of loop through directory */

/* Branch is no longer there.  Since this (sum) is just an internal interface,
   we simply return error_table_$seg_deleted.  The gate entries (within
   dc_find) will return a better (censored) error code. */

	a_code = error_table_$seg_deleted;
	return (null ());				/* Indicate failure */
     end validate_entryp;
%page;
%include aste;
%page;
%include dir_entry;
%page;
%include dir_header;
%page;
%include dir_name;
%page;
%include fs_types;
%page;
%include kst;
%page;
%include sst;
%page;
%include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   sum: mylock error on XXX|0

   S:	$crash

   T:	$run

   M:	A directory which should not be locked
   is found locked.
   $err

   A:	$recover

   Message:
   sum: dirmod failed to activate XXX|0

   S:	$crash

   T:	$run

   M:	Directory control could not activate a directory.
   $err
   It is possible that the AST is damaged.

   A:	$recover

   END MESSAGE DOCUMENTATION */

     end sum;
