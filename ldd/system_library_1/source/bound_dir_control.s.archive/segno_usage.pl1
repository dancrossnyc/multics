/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

segno_usage: proc;

/*

   Designed and written by R. Bratt, May 31, 1976

   Last modified:
   Added increment_other_ring, Keith Loepere, January 22, 1985.

   This module provides an external interface for incrementing and decrementing
   segment number usage counts.  This facility allows the creation and resurection
   of "truely worthless objects" (segment numbers).

   Note: once a usage count exceeds the declared precision it is never altered.
   Also, a usage count of zero is never decremented. The appropriate usage count
   is determined by the process' validation level.

*/

/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_ring			fixed bin (3) parameter;
dcl  a_segno			fixed bin (17) parameter;

/* Variables */

dcl  code				fixed bin (35);
dcl  ring				fixed bin (3);

/* Entries */

dcl  level$get			returns (fixed bin (3));
dcl  get_kstep			entry (fixed bin (17), ptr, fixed bin (35));
%page;
increment: entry (a_segno, a_code);

	ring = level$get ();
incr:	call setup;
	if kste.usage_count (ring) >= 0 then
	     kste.usage_count (ring) = kste.usage_count (ring) + 1;
	return;

increment_other_ring: entry (a_segno, a_ring, a_code);

	ring = a_ring;
	go to incr;

decrement: entry (a_segno, a_code);

	ring = level$get ();
	call setup;
	if kste.usage_count (ring) > 0 then
	     kste.usage_count (ring) = kste.usage_count (ring) - 1;
	return;
%page;
setup: proc;

	call get_kstep ((a_segno), kstep, code);
	if code ^= 0 then do;
	     a_code = code;
	     go to return_to_caller;
	end;
	return;
     end setup;

return_to_caller:
	return;

%page; %include kst;
     end segno_usage;
