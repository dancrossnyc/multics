/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



acc_list_: proc;

/* Modified by E. Stone 05/74 to convert to version 2 pl1 */
/* Modified by E Stone Nov 1974 to correct declaration of acl_input */
/* Modified 07/77 by THVV for bad_dir_ check */


/*
   entry:	match(count,owner,acl_start_ptr,acl_entry_ptr,list_match_ptr,offset,code)
   This entry is used to indicate where to add an acl or if match occurs ,in which acl to replace mode.


   1. count is max length of acl, used for loop detection
   2. owner is uid needed in each acle
   3. acl_start_ptr	pts to the acl frp in the entry (Input)
   4. acl_entry_ptr	pts to the following structure (Input)
   dcl 1 acl_input based aligned,
   2 person char(32),
   2 project char(32),
   2 tag char(1),
   2 mode bit(36),
   2 ex_mode bit(36);

   5. list_match_ptr	pts to acl entry on match - see below (Output)
   6. offset		is the number of the acl entry where searching for match stopped
   7. code		is a standard error code used with list_match_ptr to give info on match

   _c_o_d_e
   0			list_match_ptr pts to the matching acl entry
   error_table_$empty_acl	no acl exists and list_match_ptr will be null
   error_table_$user_not_found	if list_match_ptr is null then add acl entry to bottom of list ,
   .			else list_match_ptr pts to acl entry where matching failed; i.e. the
   .			entry before which acl should be added.
   anything else		error.
*/

dcl 1 acl_input based aligned,
    2 person char (32),
    2 project char (32),
    2 tag char (1),
    2 mode bit (36),
    2 ex_mode bit (36);

dcl  count fixed bin;				/* parameter */
dcl  owner bit (36);				/* parameter */
dcl (acl_start_ptr, acl_entry_ptr, list_match_ptr) ptr;	/* parameter */

dcl  person char (32) aligned;
dcl  project char (32) aligned;
dcl  nnp ptr;
dcl (i, offset, len) fixed bin;
dcl  code fixed bin (35);

dcl (rtrim, length, null, ptr) builtin;
dcl  bad_dir_ condition;

dcl (error_table_$empty_acl, error_table_$user_not_found) ext fixed bin (35);
dcl  error_table_$argerr ext fixed bin (35);

dcl (star_pers, star_proj, star_tag) bit (1) aligned;
dcl (pers_eq, proj_eq, tag_eq) bit (1) aligned;
dcl (persrp, projrp, rp) bit (18) aligned;

%include dir_acl;
%include fs_types;

/*  */

/*  *  *  *  *  *  *  *  *  *  */

match:	entry (count, owner, acl_start_ptr, acl_entry_ptr, list_match_ptr, offset, code);

/* first check if list is empty */
/* brp is used as frp may point to start of perm slots
   in an entry */

	code, offset = 0;
	list_match_ptr = null;
	aclep = acl_start_ptr;			/* copy pointer to head of acl */

	if aclep -> acl_entry.brp = "0"b then do;
	     code = error_table_$empty_acl;
	     return;
	end;

/* do checks on person name */
	person = acl_entry_ptr -> acl_input.person;	/* copy person name into local string */
	if length (rtrim (person)) > 28 then goto bad_name;
	if person = "*" then star_pers = "1"b;
	else star_pers = "0"b;			/* flag if person name is "*" */

	project = acl_entry_ptr -> acl_input.project;	/* copy project name into local string */
	if project = "" | length (rtrim (project)) > 28 then go to bad_name;
	if project = "*" then star_proj = "1"b;
	else star_proj = "0"b;			/* flag if project is "*" */

	if acl_entry_ptr -> acl_input.tag = "*" then star_tag = "1"b; /* flag if tag is "*" */
	else star_tag = "0"b;

/* first put into local store the list's acl names,
   then check if thens names are "*", if so then check
   input acl for "*", else lengths are checked, and if
   equal, then the character strings */

	i = 0;
	do rp = aclep -> acl_entry.frp repeat aclep -> acl_entry.frp while (rp);

	     offset = offset + 1;			/* offset in acl list */
	     aclep = ptr (aclep, rp);			/* get pointer to acl */
	     i = i + 1;
	     if i > count
	     | aclep -> acl_entry.owner ^= owner
	     | aclep -> acl_entry.type ^= ACLE_TYPE then signal bad_dir_;
	     pers_eq, proj_eq, tag_eq = "0"b;		/* set flags to say components not equal */

	     persrp = aclep -> acl_entry.name.pers_rp;	/* get rp to person name of acl entry */
	     if persrp ^= "0"b then
		if ^star_pers then do;		/* if neither input name nor acl name = "*", compare them */
		     nnp = ptr (aclep, persrp);
		     if nnp -> access_name.type ^= ACCESS_NAME_TYPE then signal bad_dir_;
		     if nnp -> access_name.name = person then pers_eq = "1"b; /* person names match */
		     go to compare_project;
		end;
		else go to next_acl;		/* if input name = "*", look at next acl */
	     else if ^star_pers then go to no_eq;	/* if have reached a "*" in acl, not a match */
	     pers_eq = "1"b;			/* both person names are "*" */
compare_project:
	     projrp = aclep -> acl_entry.name.proj_rp;	/* get rp to project on acl entry */
	     if projrp ^= "0"b then			/* if neither input name nor acl name = "*", */
		if ^star_proj then do;		/* compare them */
		     nnp = ptr (aclep, projrp);
		     if nnp -> access_name.type ^= ACCESS_NAME_TYPE then signal bad_dir_;
		     if nnp -> access_name.name = project then proj_eq = "1"b; /* project names match */
		     go to compare_tag;
		end;
		else go to next_acl;		/* if input name = "*", look at next acl */
	     else if ^star_proj then go to no_eq;	/* if have reached a "*" in acl, not a match */
	     proj_eq = "1"b;			/* both project names are "*" */
compare_tag:
	     if aclep -> acl_entry.name.tag ^= "*" then
		if ^star_tag then			/* compare both tags if not "*" */
		     if aclep -> acl_entry.name.tag = acl_entry_ptr -> acl_input.tag then do;
			tag_eq = "1"b;		/* tags match */
			if pers_eq then if proj_eq then go to mate;
		     end;
		     else go to next_acl;		/* tags are unequal */
		else go to next_acl;		/* if input tag = "*", look at next acl entry */
	     else if ^star_tag then go to no_eq;	/* if acl tag is "*", no possible match */
	     else do;				/* both "*" */
		tag_eq = "1"b;			/* tags match */
		if pers_eq then if proj_eq then go to mate;
	     end;

next_acl:	end;

/* no matches have occured and bottom of list has been
   reached */
	code = error_table_$user_not_found;		/* returning bottom of list condition */
	return;

no_eq:	code = error_table_$user_not_found;
	list_match_ptr = aclep;
	return;

mate:	list_match_ptr = aclep;
	return;

bad_name:	code = error_table_$argerr;
	return;

     end acc_list_;
