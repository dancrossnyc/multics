/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,indcomtxt */

change_dtem:
     proc (a_ep);

/**** Coded by E. Stone Nov. 1975 to KST re-do.
      This procedure to called by any directory control
      primitive to assure that the dtem of a branch is
      altered.  The caller has changed to value of an
      attribute in a directory entry which affects the
      data in the KST entry for that segment, e.g. access,
      ring brackets.  Usually the new dtem will be set
      to the storage system time equivalent of the current
      clock reading immediately.  If the clock reading equals
      the dtem, the dtem is incremented by 1.  Care is taken
      that dtem does not go too far in the future and
      that the value of the dtem always increases.
      If necessary the clock is read until these conditions are met.
      If the old time is manifestly out to lunch, bad_dir_ is signalled. */
/* Modified 83-12-22 BIM for bad_dir_ signal */

	dcl     a_ep		 ptr;
	dcl     continue		 bit (1) aligned;
	dcl     i			 fixed bin;
	dcl     (old_dtem, new_dtem)	 fixed bin (36);
	dcl     time		 fixed bin (71);
	dcl     1 CLOCK		 aligned like clock_value;
	dcl     1 OLD_DTEM		 aligned like clock_value;
	dcl     clock		 builtin;
	dcl     bin		 builtin;
	dcl     bad_dir_		 condition;

%page;
%include system_clock_value_;
%include dir_entry;

	ep = a_ep;				/* copy entry pointer */
	old_dtem = bin (ep -> entry.dtem, 36);		/* save current dtem for fast comparison */
	unspec (OLD_DTEM) = ""b;
	OLD_DTEM.fs_time = ep -> entry.dtem;
	unspec (time) = unspec (OLD_DTEM);
	if (time - clock ()) > 2 * 1000 * 1000		/* 2 seconds */
	then signal bad_dir_;			/* dtem cannot possibly be that far off */

	continue = "1"b;				/* set flag so that loop is executed at least once */

	do while (continue);
	     continue = "0"b;			/* usually will change dtem without further ado */
	     time = clock ();
	     unspec (CLOCK) = unspec (time);		/* unspec (clock()) not valid */
	     new_dtem = bin (CLOCK.fs_time, 36);
	     if new_dtem ^> old_dtem
	     then do;				/* must take atypical action */
		     if (new_dtem + 5) < old_dtem
		     then /* if branch dtem has gone too far in future */
			continue = "1"b;		/* read clock again */
		     else new_dtem = old_dtem + 1;	/* otherwise or if equal just increment */
		end;
	end;
	ep -> entry.dtem = bit (new_dtem, 36);		/* set new and different dtem */
     end change_dtem;
