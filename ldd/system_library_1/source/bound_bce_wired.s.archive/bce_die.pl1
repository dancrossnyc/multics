/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
bce_die: proc (P_ss_info_ptr);

/* kill ourselves off.
Keith Loepere, January 1984. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  P_ss_info_ptr		        ptr parameter;
dcl  arg			        char (arg_len) based (arg_ptr);
dcl  arg_count		        fixed bin;
dcl  arg_len		        fixed bin (21);
dcl  arg_ptr		        ptr;
dcl  bce_alm_die		        entry;
dcl  bce_query$yes_no	        entry options (variable);
dcl  code			        fixed bin (35);
dcl  com_err_		        entry () options (variable);
dcl  cu_$arg_count_rel	        entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_ptr_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  me			        char (3) static options (constant) init ("die");
dcl  request_abort_		        condition;
dcl  yes_no		        bit (1);

	ss_info_ptr = P_ss_info_ptr;
	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	if code ^= 0 then go to arg_error;
	if arg_count > 0 then do;
	     call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     if arg = "-force" | arg = "-fc" then call bce_alm_die;
	     else go to arg_error;
	     if arg_count > 1 then do;
arg_error:	call com_err_ (code, me, "Usage is: die {-force | -fc}");
		return;
	     end;
	end;
	call bce_query$yes_no (yes_no, "Do you really wish bce to die? ");
	if yes_no then call bce_alm_die;
	else signal request_abort_;
%page; %include bce_subsystem_info_;
     end;

