/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-02-26,Farley), approve(87-04-15,MCR7661),
     audit(87-04-21,Fawcett), install(87-04-28,MR12.1-1028):
     Added check for fgbx.io_reconfig that is turned on whenever an I/O
     reconfiguration can cause memory to be corrupted.  Thus no emergency
     shutdown should be attempted, because it would only propagate the
     corruption.
                                                   END HISTORY COMMENTS */


bce_esd: proc (info_ptr);

/* Routine to modify machine conditions so as to invoke esd.
Written August 1983 by Keith Loepere. */
/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  bce_continue		        entry (ptr);
dcl  com_err_		        entry options (variable);
dcl  emergency_shutdown$	        entry;
dcl  info_ptr		        ptr parameter;
dcl  1 toehold$		        aligned external like toe_hold;
dcl  (addr, bin, bit, codeptr, segno, string, wordno) builtin;
%page; %include collection_1_phases;
%page; %include flagbox;
%page; %include toe_hold;

	fgbxp = addr (flagbox$);
	if ^fgbx.ssenb then do;
	     call com_err_ (0, "esd", "Storage system not enabled.  esd not performed.");
	     return;
	end;

	if fgbx.io_reconfig then do;
	     call com_err_ (0, "esd", "Emergency shutdown is prohibited due to possible memory corruption.");
	     sys_info$collection_1_phase = BOOT_INITIALIZATION;
	     toehold$.memory_state = At_bce__boot;
	     return;
	end;

	mc_state_ptr = addr (toehold$.multics_state);
	mcp = addr (mc_state.mc_);
	scup = addr (mc.scu);
	scu.ppr.prr = "000"b;
	scu.ppr.psr = bit (bin (segno (codeptr (emergency_shutdown$)), 15), 15);
	scu.ppr.p = "1"b;
	string (scu.apu) = "0"b;
	scu.fault_cntr = "0"b;

	scu.ilc = bit (bin (wordno (codeptr (emergency_shutdown$)), 18), 18);
	string (scu.ir) = "0"b;
	scu.ir.bm = "1"b;

	mc_state.interrupt = "0"b;
	mc_state.cfg = "0"b;

	call bce_continue (info_ptr);			/* won't return */
     end;
