/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* Question asking utility for bootload command environment */
/* This is like a VERY simple command_query_ */
/* BIM 10/82 */
/* Modified by Keith Loepere in 8/83 for new bce switches */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

/* declare bce_query entry options (variable) */
/* call bce_query (answer, cs, arg1, arg2, arg3, ...) */
/* Where:             */
/*         answer   (Output) is a NONvarying string */
/*         cs       (Input) is the control string */
/*         argN     (Input) are the ioa args */

/* If only one argument is given, then this is equivalent to get_line */
/* The entry bce_query$get_line is a direct way of asking for that */

/* declare bce_query$yes_no entry options (variable) */
/* call bce_query$yes_no (yes_or_no, cs, arg1, ..., argN) */

/* declare bce_query$get_line entry (char (*)); */
/* call bce_query$get_line (response); */

bce_query:
     procedure (Answer) /* options (variable) */;

declare  arg_count_			  entry returns (fixed bin);
declare  cu_$arg_list_ptr		  entry returns (pointer);
declare  ioa_$general_rs		  entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
				  bit (1) aligned);
declare  bce_data$error_put_chars	  ext entry (ptr, ptr, fixed bin, fixed bin (35)) variable;
declare  bce_data$get_line		  ext entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35)) variable;

declare  Answer			  char (*);
declare  Yes_No			  bit (1);

declare  requery 			  char (25) static options (constant) init ("Please answer yes or no: ");

declare  buffer			  char (256);
declare  used			  fixed bin (21);
declare  yes_no			  bit (1);
declare  just_get			  bit (1) aligned;
declare  n_read			  fixed bin;
declare  (substr, length, addr)	  builtin;

declare  arg_list_ptr		  pointer;
%page;

	yes_no = "0"b;
	just_get = (arg_count_ () < 2);
	go to COMMON;


get_line:
     entry (Answer);

	yes_no = "0"b;
	just_get = "1"b;
	go to COMMON;

yes_no:
     entry (Yes_No);

	yes_no = "1"b;
	just_get = (arg_count_ () < 2);

COMMON:
	arg_list_ptr = cu_$arg_list_ptr ();
	if ^just_get
	then do;
	     buffer = "";
	     call ioa_$general_rs (arg_list_ptr, 2, 3, buffer, used, "0"b, "0"b);
	     call bce_data$error_put_chars (addr (bce_data$error_put_chars), addr (buffer), (used), (0));
	end;

	buffer = "";				/* wont hurt if ^yes_no */

	if yes_no
	then do while (buffer = "");
	     call bce_data$get_line (addr (bce_data$get_line), addr (buffer), length (buffer), n_read, (0));
	     buffer = substr (buffer, 1, n_read - 1 /* strip NL*/);
	     if buffer = "yes" | buffer = "y"
	     then go to RETURN_YES;
	     else if buffer = "no" | buffer = "n"
	     then go to RETURN_NO;
	     call bce_data$error_put_chars (addr (bce_data$error_put_chars), addr (requery), length (requery), (0));
	     buffer = "";
	end;

/* Here on only if ^yes_no */

	Answer = "";
	buffer = "";
	call bce_data$get_line (addr (bce_data$get_line), addr (buffer), length (buffer), n_read, (0));
	Answer = substr (buffer, 1, n_read - 1 /* strip NL */);
	return;

RETURN_YES:
	Yes_No = "1"b;
	return;
RETURN_NO:
	Yes_No = "0"b;
	return;
     end bce_query;
