/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-02-26,Farley), approve(87-04-15,MCR7661),
     audit(87-04-21,Fawcett), install(87-04-28,MR12.1-1028):
     Added check for fgbx.io_reconfig, which will be on when an attempted I/O
     reconfiguration may corrupt memory (e.g. adding an IOM).
                                                   END HISTORY COMMENTS */


bce_continue: proc;

/* return to Multics; also return to bos.
Keith Loepere, January 1984. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  addr			        builtin;
dcl  com_err_		        entry () options (variable);
dcl  pmut$special_bce_return	        entry (bit (72) aligned);
dcl  ssenb		        bit (1) aligned;
dcl  sys_boot_info$assume_config_deck bit (1) aligned external;
dcl  1 toehold$		        aligned like toe_hold external;
dcl  unspec		        builtin;

	if ^ (sys_info$collection_1_phase = CRASH_INITIALIZATION | sys_info$collection_1_phase = BCE_CRASH_INITIALIZATION) then do;
	     call com_err_ (0, "continue", "No image to restart.");
	     return;
	end;
	fgbxp = addr (flagbox$);
	if fgbx.io_reconfig then do;
	     call com_err_ (0, "continue", "Not allowed to restart. Memory may have been corrupted.");
	     return;
	end;

	ssenb = fgbx.rtb.ssenb;		/* zero all rtb except ssenb */
	unspec (fgbx.rtb) = "0"b;
	fgbx.rtb.ssenb = ssenb;
	call pmut$special_bce_return (toehold$.entry_sequences (TOE_HOLD_RESTART_ENTRY));
	return;

bce_bos: entry;

	if ^sys_boot_info$assume_config_deck then do;
	     call com_err_ (0, "bos", "BOS is not present.");
	     return;
	end;
	call pmut$special_bce_return (toehold$.entry_sequences (TOE_HOLD_BOS_MULTICS_ENTRY));
	return;

%page; %include collection_1_phases;
%page; %include flagbox;
%page; %include toe_hold;
     end;
