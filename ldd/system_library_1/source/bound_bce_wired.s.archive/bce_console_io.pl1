/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
/* BCE_CONSOLE_IO.PL1 bootload command environment console io */
/* Wrapper for odcdm_ for the command environment */
/* Written by BIM sometime in '82 */
/* Modified 830620 for new ocdcm_ interface... -E. A. Ranzenbach
/* Simplified 8/83 by Keith Loepere, for new bce switches */
/* Modified 11/83 by Keith Loepere to loop waiting for non-zero input line */
/* Modified 12/83 by Keith Loepere for put_chars_alert */
/* Modified 840418 to zero console io before filling... -E. A. Ranzenbach */
/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

bce_console_io:
     procedure;

/* Entrypoints are get_line, put_chars */

/* This program loops on the console by calling ocdcm until */
/* it returns success */

dcl  Buffer_ptr		        ptr parameter;
dcl  Buffer_len		        fixed bin parameter;
dcl  Buffer		        char (Buffer_len) based (Buffer_ptr);
dcl  Code			        fixed bin (35) parameter;
dcl  Switch_ptr		        ptr parameter;
dcl  N_read		        fixed bin parameter;

dcl  bce_check_abort	        entry;
dcl  oc_trans_input_	        entry (ptr, fixed bin, fixed bin, ptr, fixed bin);
dcl  oc_trans_output_	        entry (ptr, fixed bin (21), fixed bin (21), ptr, fixed bin (19), fixed bin (17), bit (1) aligned);
dcl  ocdcm_$priority_io	        entry (ptr);

dcl  alert		        bit (1) aligned;
dcl  cont			        bit (1) aligned;
dcl  cur_ptr		        pointer;
dcl  internal_buffer	        char (256) aligned;
dcl  1 my_console_io	        aligned like console_io;
dcl  n_done		        fixed bin (21);
dcl  n_to_send		        fixed bin (19);
dcl  n_to_write		        fixed bin (21);

dcl  addcharno		        builtin;
dcl  addr			        builtin;
dcl  length		        builtin;
dcl  min			        builtin;
dcl  substr		        builtin;
dcl  unspec		        builtin;
%page;

/* For now, assume that we will always be called with a big enough */
/* buffer to hold an entire input line, converted. */

get_line:
     entry (Switch_ptr, Buffer_ptr, Buffer_len, N_read, Code);
	Code = 0;

read:	unspec (my_console_io) = ""b;
	console_io_ptr = addr (my_console_io);
	console_io.event_chan = 0;			/* build the I/O..*/
	console_io.read = "1"b;
	console_io.alert = "0"b;
	console_io.sequence_no = 0;

	call ocdcm_$priority_io (console_io_ptr);	/* do the input...*/
	if console_io.leng = 0 then go to read;	/* wait for non-null line */

	call oc_trans_input_ (addr (internal_buffer), length (internal_buffer), N_read, addr (console_io.text), (console_io.leng));

	substr (Buffer, 1, min (length (Buffer), N_read)) =
	     substr (internal_buffer, 1, min (length (Buffer), N_read));

	return;

put_chars:
     entry (Switch_ptr, Buffer_ptr, Buffer_len, Code);

	alert = "0"b;
	go to put;

put_chars_alert:
     entry (Switch_ptr, Buffer_ptr, Buffer_len, Code);

	alert = "1"b;
put:
	internal_buffer = "";
	n_to_write = length (Buffer);			/* so they want trailing blanks ! */
	cont = "0"b;
	cur_ptr = addr (Buffer);
	do while (n_to_write > 0);

/* The unused arguments are an output word count and a type flag */

	     call bce_check_abort;
	     call oc_trans_output_ (cur_ptr, n_to_write, n_done, addr (internal_buffer), n_to_send, 80, cont);
						/* cont is input_output */

	     unspec (my_console_io) = ""b;
	     console_io_ptr = addr (my_console_io);

	     console_io.event_chan = 0;		/* build the I/O..*/
	     console_io.read = "0"b;
	     console_io.alert = alert;
	     console_io.sequence_no = 0;
	     console_io.leng = n_to_send;
	     console_io.text = substr (internal_buffer, 1, n_to_send * 4);

	     call ocdcm_$priority_io (console_io_ptr);	/* do the output */

	     n_to_write = n_to_write - n_done;
	     cur_ptr = addcharno (cur_ptr, n_done);
	end;
	Code = 0;
	return;
%page;
%include oc_data;
     end bce_console_io;
