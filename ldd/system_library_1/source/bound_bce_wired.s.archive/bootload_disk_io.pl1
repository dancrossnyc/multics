/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-17,Fawcett), approve(86-01-17,MCR7220),
     audit(86-06-17,Farley), install(86-07-17,MR12.0-1097):
     Keith Loepere for async operation, support of bce_copy_disk.
  2) change(86-05-20,Fawcett), approve(86-05-20,MCR7383),
     audit(86-06-17,Farley), install(86-07-17,MR12.0-1097):
     Changed to add support for MSU3380 and MUS3390
                                                   END HISTORY COMMENTS */

bootload_disk_io$read: proc (a_pvtx, a_record_num, a_n_records, a_buffer_ptr, a_code);

/* Routine to use dctl to perform a disk read/write for bce performance.
Written February 1985 by Keith Loepere.
Modified March 1985 by Keith Loepere for async operation. */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* Parameters */

dcl  a_buffer_num			fixed bin parameter;/* disk_post slot, actually */
dcl  a_buffer_ptr			ptr parameter;	/* to wired memory area, must be at a page boundary */
dcl  a_code			fixed bin (35) parameter;
dcl  a_n_records			fixed bin parameter;/* must be 1-4 */
dcl  a_pvtx			fixed bin parameter;
dcl  a_record_num			fixed bin (18) parameter;

/* Variables */

dcl  async			bit (1) aligned;
dcl  buffer_address			fixed bin (26);
dcl  buffer_num			fixed bin;
dcl  code				fixed bin (35);
dcl  last_poll_time			fixed bin (71) static;
dcl  n_sectors			fixed bin;
dcl  old_mask			bit (72) aligned;
dcl  pvtx				fixed bin;
dcl  read_not_write			bit (1) aligned;
dcl  record_num			fixed bin (18);

/* Entries */

dcl  absadr			entry (ptr, fixed bin (35)) returns (fixed bin (24));
dcl  dctl$bootload_read		entry (fixed bin, fixed bin (26), bit (18) aligned, fixed bin, fixed bin);
dcl  dctl$bootload_write		entry (fixed bin, fixed bin (26), bit (18) aligned, fixed bin, fixed bin);
dcl  disk_control$disk_run		entry;
dcl  pmut$set_mask			entry (bit (72) aligned, bit (72) aligned);

/* Constants */

dcl THIRTY_SEC fixed bin (35) init (30000000) static options(constant);
		   

/* External */

dcl  error_table_$fsdisk_phydev_err	fixed bin (35) ext static;
dcl  error_table_$not_done		fixed bin (35) ext static;
dcl  scs$sys_level			bit (72) aligned ext;

/* Misc */

dcl  (addr, bit, clock)		builtin;
%page;
	read_not_write = "1"b;
	buffer_num = 1;
	async = "0"b;
	go to join;

bootload_disk_io$write: entry (a_pvtx, a_record_num, a_n_records, a_buffer_ptr, a_code);

	read_not_write = "0"b;
	buffer_num = 1;
	async = "0"b;
	go to join;

bootload_disk_io$queue_read: entry (a_pvtx, a_record_num, a_n_records, a_buffer_ptr, a_buffer_num, a_code);

	read_not_write = "1"b;
	buffer_num = a_buffer_num;
	async = "1"b;
	go to join;

bootload_disk_io$queue_write: entry (a_pvtx, a_record_num, a_n_records, a_buffer_ptr, a_buffer_num, a_code);

	read_not_write = "0"b;
	buffer_num = a_buffer_num;
	async = "1"b;

join:

/* get those args into wired storage! */

	a_code = 0;
	pvtx = a_pvtx;
	pvt_arrayp = addr (pvt$array);
	pvtep = addr (pvt_array (pvtx));
	record_num = a_record_num;
	n_sectors = sect_per_rec (pvte.device_type) * a_n_records;

	buffer_address = absadr (a_buffer_ptr, code);

	disk_post_area_ptr = addr (bootload_disk_post_seg$);

	if ^async then disk_post_area.number = buffer_num;
	disk_post_area.buffer_coreadd (buffer_num) = buffer_address;
	disk_post_area.disk_complete (buffer_num) = "0"b;
	disk_post_area.disk_error_code (buffer_num) = 0;

/* wire down for dctl call */

	call pmut$set_mask (scs$sys_level, old_mask);	/* <+><+><+><+> */

	if read_not_write then call dctl$bootload_read (pvtx, buffer_address, bit (record_num, 18), 0, n_sectors);
	else call dctl$bootload_write (pvtx, buffer_address, bit (record_num, 18), 0, n_sectors);

	call pmut$set_mask (old_mask, (""b));		/* <-><-><-><-> */

	last_poll_time = clock;			/* start running timeout from now */

	if async then do;
	     a_code = 0;
	     return;
	end;

/* wait for i/o */

	do while (^disk_post_area.disk_complete (buffer_num));
	     if clock > last_poll_time + THIRTY_SEC then do;
		call pmut$set_mask (scs$sys_level, old_mask); /* <+><+><+><+> */

		call disk_control$disk_run;		/* poll disk for lost interrupt */

		call pmut$set_mask (old_mask, (""b));	/* <-><-><-><-> */

		last_poll_time = clock;
	     end;
	end;

	code = disk_post_area.disk_error_code (buffer_num);
	if code ^= 0 then code = error_table_$fsdisk_phydev_err;
	disk_post_area.number = 0;

	a_code = code;
	return;
%page;
bootload_disk_io$test_done: entry (a_buffer_num, a_code);

	buffer_num = a_buffer_num;

/* look for done */

	disk_post_area_ptr = addr (bootload_disk_post_seg$);
	if ^disk_post_area.disk_complete (buffer_num) then
	     if clock > last_poll_time + THIRTY_SEC then do;
		call pmut$set_mask (scs$sys_level, old_mask); /* <+><+><+><+> */

		call disk_control$disk_run;		/* poll disk for lost interrupt */

		call pmut$set_mask (old_mask, (""b));	/* <-><-><-><-> */

		last_poll_time = clock;
	     end;

	if ^disk_post_area.disk_complete (buffer_num) then code = error_table_$not_done;
	else do;
	     code = disk_post_area.disk_error_code (buffer_num);
	     if code ^= 0 then code = error_table_$fsdisk_phydev_err;
	end;

	a_code = code;
	return;
%page; %include bootload_post_area;
%page; %include pvte;
%page; %include fs_dev_types_sector;
     end;
