/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
bce_fwload: proc (p_ss_info_ptr);

/* bce routine to load, upon command, a given mpc.
Keith Loepere, January 1984. */

/* modified October of 1984 to add -channel argument - Allen Ball. */

/* format: style4,initcol1,indattr,declareind8,dclind4,idind36,ifthenstmt,ifthen,^indproc,delnl,insnl */

dcl addr				builtin;
dcl arg				char (arg_len) based (arg_ptr);
dcl arg_count			fixed bin;	/* number of mpcs */
dcl arg_len			fixed bin (21);
dcl arg_num			fixed bin;	/* loop counter */
dcl arg_ptr			ptr;
dcl baseno			builtin;
dcl bin				builtin;
dcl character			builtin;
dcl code				fixed bin (35);
dcl com_err_			entry () options (variable);
dcl config_$find			entry (char (4) aligned, ptr);
dcl config_$find_2			entry (char (4) aligned, char (4) aligned, ptr);
dcl cu_$arg_count_rel		entry (fixed bin, ptr, fixed bin (35));
dcl cu_$arg_ptr_rel			entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl cv_dec_check_			entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl dimension			builtin;
dcl divide			builtin;
dcl fw_modules			(16) char (8);	/* names of fw modules to load */
dcl fw_module_count			fixed bin;	/* number of modules */
dcl hc_load_mpc			entry (char (8) aligned, ptr, fixed bin (18), char (*), fixed bin (35));
dcl hc_load_mpc$urc			entry (char (8) aligned, (*) ptr, (*) fixed bin (18), char (*), fixed bin (35));
dcl increment			fixed bin;
dcl index				builtin;
dcl ioa_				entry () options (variable);
dcl ltrim				builtin;
dcl max				builtin;
dcl me				char (6) static options (constant) init ("fwload");
dcl mpc_chanid			char (8) aligned;	/* iom/channel name */
dcl mpc_name			char (4) aligned;	/* as in mspa */
dcl null				builtin;
dcl p_ss_info_ptr			ptr parameter;
dcl preferred_mpc_chanid		char (8) aligned;
dcl slt$				external;
dcl slt_manager$get_seg_ptr		entry (char (32) aligned) returns (ptr);
dcl substr			builtin;
dcl translate			builtin;
%page;
	ss_info_ptr = p_ss_info_ptr;
	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	if code ^= 0 | arg_count < 1 then do;
usage:
	     call com_err_ (code, me, "Usage: fwload mpc_names {args}");
	     return;
	end;
	do arg_num = 1 repeat arg_num + increment while (arg_num <= arg_count);
	     preferred_mpc_chanid = "";
	     increment = 1;
	     call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
	     mpc_name = arg;
	     if arg_num + 2 <= arg_count then do;
		call cu_$arg_ptr_rel (arg_num + 1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
		if substr (arg, 1, 1) = "-" then do;	/* It must be a control argument. */
		     if arg = "-channel" | arg = "-chnl" then do;
			call cu_$arg_ptr_rel (arg_num + 2, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
			if code = 0 then do;
			     preferred_mpc_chanid = arg;
			     increment = 3;
			end;
			else do;
			     call ioa_ ("^a: A channel must be specified.", me);
			     return;
			end;
		     end;
		     else do;
			call ioa_ ("^a: ^a is not a recognized option.", me, arg);
			return;
		     end;
		end;
	     end;
	     if find_mpc (mpc_chanid, mpc_name, fw_modules, fw_module_count, mpc_cardp) then do;
		if preferred_mpc_chanid ^= "" then do;
		     if validate_primary_channel (preferred_mpc_chanid, mpc_cardp) then
			call load_mpc (preferred_mpc_chanid, mpc_name, fw_modules, fw_module_count);
		     else do;
			call ioa_ ("^a: Channel ^a is not a primary channel for ^a.", me, preferred_mpc_chanid,
			     mpc_name);
			return;
		     end;
		end;
		else call load_mpc (mpc_chanid, mpc_name, fw_modules, fw_module_count);
	     end;
	     else do;
		call ioa_ ("^a: ^a is not a valid mpc.", me, mpc_name);
		return;
	     end;
	end;
	return;
%page;
find_mpc:
     proc (mpc_chanid, mpc_name, fw_modules, fw_module_count, p_mpc_cardp) returns (bit (1) aligned);

/* search the config deck for an mpc so as to know what channel and module is
   needed - also find peripherals for urcs */

dcl code				fixed bin (35);
dcl fw_modules			(16) char (8) parameter;
dcl fw_module_count			fixed bin parameter;
dcl fw_module_num			fixed bin;	/* loop counter */
dcl mpc_chanid			char (8) aligned parameter;
						/* iom/channel */
dcl mpc_name			char (4) aligned parameter;
						/* as in mspa */
dcl mpc_type_letter			char (1);		/* code letter for mpc type, d t or u */
dcl overlay_name			char (4);		/* firmware module type to overlay */
dcl p_mpc_cardp			ptr parameter;

/* find the mpc */

	mpc_cardp = null;
	call config_$find_2 (MPC_CARD_WORD, mpc_name, mpc_cardp);
	if mpc_cardp = null then go to mpc_error;
	p_mpc_cardp = mpc_cardp;

	call io_chnl_util$iom_to_name ((mpc_card.port (1).iom), (mpc_card.port (1).chan), mpc_chanid, code);
	if code ^= 0 then do;
mpc_error:
	     call com_err_ (0, me, "No such mpc ^a.", mpc_name);
	     return ("0"b);
	end;

/* find the firmware type */

	fw_module_count = 1;
	if substr (mpc_name, 1, 3) = "msp" then mpc_type_letter = "d";
	else if substr (mpc_name, 1, 3) = "mtp" then mpc_type_letter = "t";
	else if substr (mpc_name, 1, 3) = "urp" then mpc_type_letter = "u";
	else do;
	     call com_err_ (0, me, "Unrecognizable mpc type for mpc ^a", mpc_name);
	     return ("0"b);
	end;
	fw_modules (1) = mpc_type_letter || ltrim (character (mpc_card.model));
	if mpc_type_letter ^= "u" then return ("1"b);	/* non urcs have just the main firmware */

/* urc - we must find peripherals on it */

	fw_module_count = 1 + mpc_card.port (1).nchan;
	do fw_module_num = 2 to fw_module_count;
	     fw_modules (fw_module_num) = "none";	/* for now */
	end;

	prph_cardp = null;
	call config_$find ("prph", prph_cardp);
	do while (prph_cardp ^= null);
	     if (prph_card.iom = mpc_card.port (1).iom) &
		((mpc_card.port (1).chan <= prph_card.chan)
		& (prph_card.chan < mpc_card.port (1).chan + mpc_card.port (1).nchan)) then do;
						/* prph on this mpc */
		if substr (prph_card.name, 1, 3) = "prt" then overlay_name = "pr4";
		else if substr (prph_card.name, 1, 3) = "rdr" then overlay_name = "crz";
		else if substr (prph_card.name, 1, 3) = "pun" then overlay_name = "cpz";
		else if substr (prph_card.name, 1, 3) = "ccu" then overlay_name = "crp";
		else overlay_name = "none";
		fw_module_num = prph_card.chan - mpc_card.port (1).chan + 2;
		if fw_modules (fw_module_num) ^= "ccu" then fw_modules (fw_module_num) = overlay_name;
						/* ccu over-rides crz crp */
	     end;
	     call config_$find ("prph", prph_cardp);
	end;
	return ("1"b);
     end;
%page;
load_mpc:
     proc (mpc_chanid, mpc_name, fw_modules, fw_module_count);

dcl controller_fwid			char (32) aligned;	/* name of firmware object */
dcl fw_module_count			fixed bin parameter;
dcl fw_modules			(16) char (8) parameter;
dcl fw_seg_lengths			(16) fixed bin (18);/* argument to hc_load_mpc of firmware object lengths */
dcl fw_seg_num			fixed bin;	/* loop counter */
dcl fw_seg_ptrs			(16) ptr;		/* arg to hc_load_mpc */
dcl mpc_chanid			char (8) aligned parameter;
						/* iom/channel */
dcl mpc_model			fixed bin;	/* decimal mpc type */
dcl mpc_name			char (4) aligned parameter;
						/* as in mspa */
dcl mpc_overlay			char (8);		/* firmware code for overlay */
dcl mpc_type			char (8);		/* model in ascii, with model and type letter code */
dcl mpc_type_index			fixed bin;	/* loop counter */
dcl problem			char (64);	/* load failure message */
dcl var_fw_seg_lengths		(fw_module_count) fixed bin (18) based (addr (fw_seg_lengths));
						/* arrays so as to pass (*) dim to hc_load_mpc */
dcl var_fw_seg_ptrs			(fw_module_count) ptr based (addr (fw_seg_ptrs));

/* find the real firmware objects */

	do fw_seg_num = 1 to fw_module_count;
	     if fw_seg_num = 1 then do;		/* main firmware */
		mpc_type = fw_modules (1);
		mpc_model = cv_dec_check_ (substr (mpc_type, 2), code);
		if code ^= 0 then go to bad_mpc;
		if substr (mpc_type, 1, 1) = "d" then do;
		     do mpc_type_index = 1 to config_data_$mpc_msp_model_names.count
			while (mpc_model ^= config_data_$mpc_msp_model_names.names (mpc_type_index).model);
		     end;
		     if mpc_type_index > config_data_$mpc_msp_model_names.count then go to bad_mpc;
		     controller_fwid = "fw." || config_data_$mpc_msp_model_names.names (mpc_type_index).fw_tag;
		end;
		else if substr (mpc_type, 1, 1) = "t" then do;
		     do mpc_type_index = 1 to config_data_$mpc_mtp_model_names.count
			while (mpc_model ^= config_data_$mpc_mtp_model_names.names (mpc_type_index).model);
		     end;
		     if mpc_type_index > config_data_$mpc_mtp_model_names.count then go to bad_mpc;
		     controller_fwid = "fw." || config_data_$mpc_mtp_model_names.names (mpc_type_index).fw_tag;
		end;
		else if substr (mpc_type, 1, 1) = "u" then do;
		     do mpc_type_index = 1 to config_data_$mpc_urp_model_names.count
			while (mpc_model ^= config_data_$mpc_urp_model_names.names (mpc_type_index).model);
		     end;
		     if mpc_type_index > config_data_$mpc_urp_model_names.count then go to bad_mpc;
		     controller_fwid = "fw." || config_data_$mpc_urp_model_names.names (mpc_type_index).fw_tag;
		end;
		else do;
bad_mpc:
		     call com_err_ (0, me, "Unrecognizable mpc type ^a for mpc ^a", mpc_type, mpc_name);
		     return;
		end;
	     end;
	     else do;				/* urc overlay */
		mpc_overlay = fw_modules (fw_seg_num);
		if mpc_overlay = "none" then
		     controller_fwid = "none";
		else do;
		     if mpc_overlay = "pr4" then controller_fwid = "fw.urcmpc.u400";
		     else if mpc_overlay = "crp" | mpc_overlay = "crz" | mpc_overlay = "cpz" then
			controller_fwid = "fw.urcmpc.ucrp";
		     else do;
			call com_err_ (0, me, "Unrecogniable overlay name ^a for mpc ^a", mpc_overlay, mpc_name);
			return;
		     end;
		end;
	     end;

/* name found, find object */

	     if controller_fwid ^= "none" then do;
		fw_seg_ptrs (fw_seg_num) = slt_manager$get_seg_ptr (controller_fwid);
		if fw_seg_ptrs (fw_seg_num) = null then do;
		     call com_err_ (0, me, "Firmware ^a not available for model ^a mpc.", controller_fwid, mpc_type);
		     return;
		end;
		sltp = addr (slt$);
		sltep = addr (slt.seg (bin (baseno (fw_seg_ptrs (fw_seg_num)), 18)));
		fw_seg_lengths (fw_seg_num) = divide (slte_uns.bit_count, 36, 24, 0) - 1;
	     end;
	     else do;
		fw_seg_ptrs (fw_seg_num) = null;
		fw_seg_lengths (fw_seg_num) = 0;
	     end;
	end;

/* load it! */

	if fw_module_count = 1 then
	     call hc_load_mpc (mpc_chanid, fw_seg_ptrs (1), fw_seg_lengths (1), problem, code);
	else call hc_load_mpc$urc (mpc_chanid, var_fw_seg_ptrs, var_fw_seg_lengths, problem, code);
	if code ^= 0 then call com_err_ (code, me, "^a booting mpc ^a", problem, mpc_name);
	return;
     end;
%page;
validate_primary_channel:
     proc (p_mpc_chanid, p_mpc_cardp) returns (bit (1));

dcl channel			fixed bin (8);
dcl code				fixed bin (35);
dcl iom				fixed bin (3);
dcl mpc_chanid			char (8) aligned;
dcl mpc_port_index			fixed bin;
dcl p_mpc_chanid			char (8) aligned parameter;
dcl p_mpc_cardp			ptr parameter;

	mpc_chanid = p_mpc_chanid;
	mpc_cardp = p_mpc_cardp;
	iom = index ("ABCD", translate (substr (mpc_chanid, 1, 1), "ABCD", "abcd"));
	channel = cv_dec_check_ (substr (mpc_chanid, 2), code);
	if code ^= 0 then return ("0"b);
	do mpc_port_index = 1 to dimension (mpc_card_array.port, 1);
	     if (mpc_card_array.port (mpc_port_index).iom = iom) & 
		(mpc_card_array.port (mpc_port_index).chan = channel) then return ("1"b);
	end;
	return ("0"b);
     end;
%page;
%include bce_subsystem_info_;
%page;
%include config_data_dcls;
%page;
%include config_mpc_card;
%page;
%include config_prph_card;
%page;
%include io_chnl_util_dcls;
%page;
%include slt;
%page;
%include slte;
     end;

