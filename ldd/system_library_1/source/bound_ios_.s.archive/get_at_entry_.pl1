/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Last modified (date and reason):
   Aug 10, 1977 by S. Webber to remove references to obsolete dims
*/

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
get_at_entry_:
     proc (stream, dim, device, mode) returns (fixed (35));


/* Parameters. */

dcl  dim char (*);
dcl  device char (*);
dcl  mode char (*);
dcl  stream char (*);

/* Automatic. */

dcl  (i, j) fixed;
dcl  (p, iocb_ptr) ptr;
dcl  1 ics aligned,
       2 sdbptr ptr,
       2 dimptr ptr,
       2 entry fixed;
dcl  1 status aligned,
       2 code fixed (35),
       2 bits bit (36);

/* Procedures. */

dcl  iox_$ios_call ext entry options (variable);
dcl  iox_$look_iocb ext entry (char (*), ptr) returns (fixed (35));
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));

/* Constants. */

dcl  changemode_offset fixed int static init (14);
dcl  error_table_$ioname_not_found fixed (35) ext;
dcl  error_table_$missent fixed (35) ext;
dcl  error_table_$multiple_io_attachment fixed (35) ext;

/* Builtin. */

dcl  (addr, index, null, substr, verify) builtin;

/* Based. */

dcl  1 vcs aligned based,
       2 len fixed,
       2 str char (0 refer (vcs.len));
dcl  1 sdb aligned based (ics.sdbptr),
       2 dim char (32),
       2 device_list_ptr ptr;
dcl  1 device_list aligned based (ics.sdbptr -> sdb.device_list_ptr),
       2 next_ptr ptr,
       2 name_size fixed,
       2 name char (0 refer (device_list.name_size));
%include iocbx;

/* End of declarations. */





	status.code = iox_$look_iocb (stream, iocb_ptr);
	if status.code ^= 0 then return (error_table_$ioname_not_found);
	p = iocb_ptr -> iocb.attach_descrip_ptr;
	if p = null () then return (error_table_$ioname_not_found);
	if iocb_ptr -> actual_iocb_ptr = iocb_ptr
	then if iocb_ptr -> iocb.ios_compatibility ^= null () then do;

/* This is an old IOS-style DIM, hence we can return literally identical results
   to the old "get_at_entry_". */

		ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
		ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
		ics.entry = changemode_offset;
		dim = ics.sdbptr -> sdb.dim;
		device = ics.sdbptr -> sdb.device_list_ptr -> device_list.name;
		call iox_$ios_call (addr (ics), "", mode, status);
		if status.code ^= 0 then mode = "";
		if status.code = error_table_$missent then status.code = 0;
		if ics.sdbptr -> sdb.device_list_ptr -> device_list.next_ptr ^= null ()
		then status.code = error_table_$multiple_io_attachment;
		return (status.code);
		end;

/* The DIM in question is not an old-style DIM so we must do the best we
   can, or else this is a SYN attachment and thus not handled by the DIM.  To begin
   with, we assume that the DIM name is the first word of the attach description. */

	i = index (p -> vcs.str, " ") - 1;
	if i < 0 then i = p -> vcs.len;
	dim = substr (p -> vcs.str, 1, i);
	if dim = "tty_" then dim = "tw_";
	else if dim = "syn_" then dim = "syn";
	else if dim = "netd_" then dim = "ntw_";
	else if dim = "mr_" then dim = "mrd_";
	else if dim = "ocd_" then dim = "oc_";
	else if dim = "discard_" then dim = "discard_output_";

/* Next we assume that the device is the second word of the attach description. */

	j = verify (substr (p -> vcs.str, i + 1), " ") - 1;
	if j < 0 then j = p -> vcs.len - i;
	i = i + j;
	j = index (substr (p -> vcs.str, i + 1), " ") - 1;
	if j < 0 then j = p -> vcs.len - i;
	device = substr (p -> vcs.str, i + 1, j);

/* If this is a SYN attachment, then the mode is null.  Otherwise, we obtain the mode
   by issuing a "modes" call. */

	mode = "";
	if iocb_ptr -> iocb.actual_iocb_ptr = iocb_ptr then do;
	     call iox_$modes (iocb_ptr, "", mode, (0));
	     end;
	return (0);





     end get_at_entry_;
