/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* Last modified (Date and Reason):
   Aug 9, 1977 by S. Webber to make better use of static storage and remove refences to obsolete dims.
   August 1981 by C. Hornig to make it compile again.
   19 August 1982 by G. Palter to make ios_$attach work as "documented"
*/

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

ios_:
     procedure;

/* A replacement for the old I/O switch 'ios_' which implements most of its calls
   via write-arounds to the new I/O system 'iox_'.  However, unknown DIMs continue to
   be supported in a straight-through fashion for compatibility. */


/* Declarations. */

/* Parameters. */

dcl  amount fixed (21);
dcl  breaklist (*) bit (*);
dcl  delimlist (*) bit (*);
dcl  device char (*);
dcl  dim char (*);
dcl  elemsize fixed (21);
dcl  infptr ptr;
dcl  iocb_ptr_ ptr;
dcl  mode char (*);
dcl  name1 char (*);
dcl  name2 char (*);
dcl  nbreaks fixed;
dcl  ndelims fixed;
dcl  nelem fixed (21);
dcl  nelemt fixed (21);
dcl  newmode char (*);
dcl  offset fixed (21);
dcl  oldmode char (*);
dcl  1 oldstatus aligned like status;
dcl  order char (*);
dcl  1 status aligned,
       2 code fixed (35),
       2 bits bit (36);
dcl  stream char (*);
dcl  wsptr ptr;

/* Automatic. */

dcl  actual_iocb_ptr ptr;
dcl  arg0 (zero) char (0) varying;
dcl  blkptr ptr;
dcl  caller_ptr ptr;
dcl  code fixed (35);
dcl  i fixed;
dcl  1 ics aligned,
       2 sdbptr ptr,
       2 dimptr ptr,
       2 entry fixed;
dcl  iocb_ptr ptr;
dcl  mask fixed (35);
dcl  1 mystatus aligned like status;
dcl  old_attachment pointer;
dcl  p ptr;
dcl  1 ti aligned,
       2 version fixed,
       2 code fixed (35);

/* Internal Static. */

dcl  free_blks_ptr ptr int static init (null ());
dcl  system_storage_ptr ptr int static init (null ());


/* Procedures. */

dcl  cu_$arg_list_ptr ext entry () returns (ptr);
dcl  cu_$caller_ptr entry (ptr);
dcl  cu_$grow_stack_frame ext entry (fixed, ptr) returns (fixed (35));
dcl  default_handler_$set ext entry (entry);
dcl  hcs_$make_ptr ext entry (ptr, char (*), char (*), ptr) returns (fixed (35));
dcl  get_system_free_area_ entry (ptr);
dcl  hcs_$set_ips_mask ext entry (fixed (35), fixed (35));
dcl  hcs_$reset_ips_mask ext entry (fixed (35), fixed (35));
dcl  discard_$discard_attach ext entry (ptr, (*) char (*) varying, bit (1), fixed bin (35));
dcl  mr_$mr_attach ext entry (ptr, (*) char (*) varying, bit (1), fixed bin (35));
dcl  netd_$netd_attach ext entry (ptr, (*) char (*) varying, bit (1), fixed bin (35));
dcl  ocd_$ocd_attach ext entry (ptr, (*) char (*) varying, bit (1), fixed bin (35));
dcl  syn_$syn_attach ext entry (ptr, (*) char (*) varying, bit (1), fixed bin (35));
dcl  tty_$tty_attach ext entry (ptr, (*) char (*) varying, bit (1), fixed bin (35));
dcl  iox_$init_standard_iocbs entry;
dcl  iox_$ios_call ext entry options (variable);
dcl  iox_$ios_call_attach ext entry options (variable);
dcl  ios_signal_ ext entry (char (32), fixed (35));
dcl  terminate_process_ ext entry (char (*), ptr);
dcl  unique_chars_ entry (bit (*)) returns (char (15));

/* Constants. */

dcl  zero fixed int static init (0);
dcl  detached_status bit (36) int static init ("0000000000000001"b);
dcl  error_table_$end_of_info fixed (35) ext;
dcl  error_table_$ioname_not_active fixed (35) ext;
dcl  error_table_$long_record fixed (35) ext;
dcl  error_table_$ioname_not_found fixed (35) ext;
dcl  error_table_$ionmat fixed (35) ext;
dcl  error_table_$missent fixed (35) ext;
dcl  error_table_$typename_not_found fixed (35) ext;
dcl  iox_$err_old_dim ext entry options (variable);
dcl  ios_write_around_$ios_write_around_get_line ext entry options (variable);
dcl  ios_write_around_$ios_write_around_get_chars ext entry options (variable);
dcl  ios_write_around_$ios_write_around_put_chars ext entry options (variable);
dcl  ios_write_around_$ios_write_around_control ext entry options (variable);
dcl  ios_write_around_$ios_write_around_modes ext entry options (variable);
dcl  ios_write_around_$ios_write_around_position ext entry options (variable);
dcl  detach_offset fixed int static init (1);
dcl  read_offset fixed int static init (2);
dcl  write_offset fixed int static init (3);
dcl  abort_offset fixed int static init (4);
dcl  order_offset fixed int static init (5);
dcl  resetread_offset fixed int static init (6);
dcl  resetwrite_offset fixed int static init (7);
dcl  setsize_offset fixed int static init (8);
dcl  getsize_offset fixed int static init (9);
dcl  setdelim_offset fixed int static init (10);
dcl  getdelim_offset fixed int static init (11);
dcl  seek_offset fixed int static init (12);
dcl  tell_offset fixed int static init (13);
dcl  changemode_offset fixed int static init (14);
dcl  readsync_offset fixed int static init (19);
dcl  writesync_offset fixed int static init (20);
dcl  stream_output_mode fixed int static init (2);
dcl  stream_input_output_mode fixed int static init (3);

/* Built-in. */

dcl  (addr, divide, length, min, null, size, substr, unspec) builtin;

/* Based. */

dcl  system_storage area based (system_storage_ptr);
dcl  1 aligned_based aligned based,
       2 char (0:9999) char (1) unaligned;
dcl  arg (1) char (length (device)) varying based (p);
dcl  1 args aligned based (p),
       2 nargs fixed (16) unaligned,
       2 other fixed,
       2 arg (0 refer (args.nargs)) ptr;
dcl  fixed_aligned_based fixed (35) aligned based;
dcl  1 blk aligned based (blkptr),
       2 sdbptr ptr,
       2 dimptr ptr,
       2 attach char (234) varying,
       2 open char (50) varying;
%include iocbx;

/* End of declarations. */





/* Beginning of entry point ..... ios_$attach(stream,dim,device,mode,status) ..... */

attach:
     entry (stream, dim, device, mode, status);

	if system_storage_ptr = null then call get_system_free_area_ (system_storage_ptr);
	unspec (status) = "0"b;
	call iox_$find_iocb (stream, iocb_ptr, status.code);
	if status.code ^= 0 then return;
	mask = 0;
	call default_handler_$set (handler);
	if dim = "syn" then go to new;
	else if dim = "tw_" then go to new;
	else if dim = "ntw_" then go to new;
	else if dim = "mrd_" then go to new;
	else if dim = "oc_" then go to new;
	else if dim = "discard_output_" then go to new;
	call cu_$caller_ptr (caller_ptr);
	i = hcs_$make_ptr (caller_ptr, dim, rtrim (dim) || "module", ics.dimptr);
	call hcs_$set_ips_mask (0, mask);
	if ics.dimptr = null () then status.code = error_table_$typename_not_found;
	else if iocb_ptr -> iocb.attach_descrip_ptr = null () then ics.sdbptr = null ();
	else if iocb_ptr -> iocb.actual_iocb_ptr ^= iocb_ptr then ics.sdbptr = null ();
	else if iocb_ptr -> iocb.ios_compatibility ^= ics.dimptr then status.code = error_table_$ionmat;
	else ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	call hcs_$reset_ips_mask (mask, mask);
	if status.code ^= 0 then return;
	call iox_$ios_call_attach (stream, dim, device, mode, status, addr (ics));
	if status.bits & detached_status then return;
	call hcs_$set_ips_mask (0, mask);
	if iocb_ptr -> iocb.attach_descrip_ptr = null () then go to fill_iocb;
	else if iocb_ptr -> iocb.actual_iocb_ptr ^= iocb_ptr then do;
	     call iocb_ptr -> iocb.detach_iocb (iocb_ptr, (0));
fill_iocb:
	     blkptr = free_blks_ptr;
	     if blkptr ^= null ()
	     then free_blks_ptr = blkptr -> blk.sdbptr;
	     else do;
		allocate blk in (system_storage) set (blkptr);
		end;
	     if blkptr = null () then do;
		call hcs_$reset_ips_mask (mask, mask);
		return;
		end;
	     blkptr -> blk.sdbptr = ics.sdbptr;
	     blkptr -> blk.dimptr = ics.dimptr;
	     blkptr -> blk.attach = rtrim (dim) || " " || substr (device, 1, min (201, length (device)));
	     blkptr -> blk.open = "IOS compatibility";
	     if mode ^= ""
	     then blkptr -> blk.open = blkptr -> blk.open || " " || substr (mode, 1, min (32, length (mode)));
	     iocb_ptr -> iocb.attach_descrip_ptr = addr (blkptr -> blk.attach);
	     iocb_ptr -> iocb.attach_data_ptr = blkptr;
	     iocb_ptr -> iocb.open_descrip_ptr = addr (blkptr -> blk.open);
	     iocb_ptr -> iocb.open_data_ptr = ics.sdbptr;
	     iocb_ptr -> iocb.detach_iocb = iox_$err_old_dim;
	     iocb_ptr -> iocb.open = iox_$err_old_dim;
	     iocb_ptr -> iocb.close = iox_close;
	     iocb_ptr -> iocb.get_line = ios_write_around_$ios_write_around_get_line;
	     iocb_ptr -> iocb.get_chars = ios_write_around_$ios_write_around_get_chars;
	     iocb_ptr -> iocb.put_chars = ios_write_around_$ios_write_around_put_chars;
	     iocb_ptr -> iocb.modes = ios_write_around_$ios_write_around_modes;
	     iocb_ptr -> iocb.position = ios_write_around_$ios_write_around_position;
	     iocb_ptr -> iocb.control = ios_write_around_$ios_write_around_control;
	     iocb_ptr -> iocb.read_record = iox_$err_old_dim;
	     iocb_ptr -> iocb.write_record = iox_$err_old_dim;
	     iocb_ptr -> iocb.rewrite_record = iox_$err_old_dim;
	     iocb_ptr -> iocb.delete_record = iox_$err_old_dim;
	     iocb_ptr -> iocb.seek_key = iox_$err_old_dim;
	     iocb_ptr -> iocb.read_key = iox_$err_old_dim;
	     iocb_ptr -> iocb.read_length = iox_$err_old_dim;
	     iocb_ptr -> iocb.ios_compatibility = ics.dimptr;
	     call iox_$propagate (iocb_ptr);
	     end;
	call hcs_$reset_ips_mask (mask, mask);
	return;

/* We know about this kind of DIM.  Use write-arounds to the new I/O system to simulate it. */

new:
	status.code = cu_$grow_stack_frame (divide (length (device) + 7, 4, 17, 0), p);
	if status.code ^= 0 then return;
	p -> arg (1) = device;
	call hcs_$set_ips_mask (0, mask);
	old_attachment = null ();
	if iocb_ptr -> iocb.actual_iocb_ptr ^= iocb_ptr then do;
	     call iox_$find_iocb (unique_chars_ (""b), old_attachment, status.code);
	     if status.code ^= 0 then return;
	     call iox_$move_attach (iocb_ptr, old_attachment, status.code);
	     if status.code ^= 0 then return;
	     end;					/* leaves iocb_ptr detached */
	if iocb_ptr -> iocb.attach_descrip_ptr ^= null () then status.code = error_table_$ionmat;
	else if dim = "syn" then do;
	     call syn_$syn_attach (iocb_ptr, arg, "0"b, status.code);
	     end;
	else if dim = "tw_" then do;
	     call tty_$tty_attach (iocb_ptr, arg, "0"b, status.code);
	     if status.code = 0 then call iox_$open (iocb_ptr, stream_input_output_mode, "0"b, (0));
	     if status.code = 0 then call iox_$modes (iocb_ptr, mode, "", status.code);
	     end;
	else if dim = "ntw_" then do;
	     call netd_$netd_attach (iocb_ptr, arg, "0"b, status.code);
	     if status.code = 0 then call iox_$open (iocb_ptr, stream_input_output_mode, "0"b, (0));
	     if status.code = 0 then call iox_$modes (iocb_ptr, mode, "", (0));
	     end;
	else if dim = "mrd_" then do;
	     call mr_$mr_attach (iocb_ptr, arg, "0"b, status.code);
	     if status.code = 0 then call iox_$open (iocb_ptr, stream_input_output_mode, "0"b, (0));
	     if status.code = 0 then call iox_$modes (iocb_ptr, mode, "", (0));
	     end;
	else if dim = "oc_" then do;
	     call ocd_$ocd_attach (iocb_ptr, arg, "0"b, status.code);
	     if status.code = 0 then call iox_$open (iocb_ptr, stream_input_output_mode, "0"b, (0));
	     if status.code = 0 then call iox_$modes (iocb_ptr, mode, "", (0));
	     end;
	else if dim = "discard_output_" then do;
	     call discard_$discard_attach (iocb_ptr, arg0, "0"b, status.code);
	     if status.code = 0 then call iox_$open (iocb_ptr, stream_output_mode, "0"b, (0));
	     end;
	else status.code = error_table_$typename_not_found;
	if old_attachment ^= null () then do;
	     if status.code = 0
	     then call iox_$detach_iocb (old_attachment, (0));
	     else call iox_$move_attach (old_attachment, iocb_ptr, (0));
	     call iox_$destroy_iocb (old_attachment, (0));
	     end;
	call hcs_$reset_ips_mask (mask, mask);
	return;

/* End of entry point ..... ios_$attach(stream,dim,device,mode,status) ..... */






/* Beginning of entry point ..... ios_$detach(stream,device,mode,status) ..... */

detach:
     entry (stream, device, mode, status);
	unspec (status) = "0"b;
	call iox_$look_iocb (stream, iocb_ptr, status.code);
	mask = 0;
	call default_handler_$set (handler);
	call hcs_$set_ips_mask (0, mask);
	if status.code ^= 0 then status.code = error_table_$ioname_not_found;
	else if iocb_ptr -> iocb.attach_descrip_ptr = null () then status.code = error_table_$ioname_not_found;
	else if iocb_ptr -> iocb.actual_iocb_ptr ^= iocb_ptr then do;
	     call iocb_ptr -> iocb.detach_iocb (iocb_ptr, status.code);
	     if status.code = 0 then status.bits = detached_status;
	     end;
	else if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     blkptr = iocb_ptr -> iocb.attach_data_ptr;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = detach_offset;
	     call hcs_$reset_ips_mask (mask, mask);
	     call iox_$ios_call (addr (ics), device, mode, status);
	     call hcs_$set_ips_mask (0, mask);
	     if iocb_ptr -> iocb.attach_descrip_ptr = null () then status.code = error_table_$ioname_not_found;
	     else if iocb_ptr -> iocb.actual_iocb_ptr ^= iocb_ptr then status.code = error_table_$ionmat;
	     else if iocb_ptr -> iocb.ios_compatibility = null () then status.code = error_table_$ionmat;
	     else if status.bits & detached_status then do;
		blkptr -> blk.sdbptr = free_blks_ptr;
		free_blks_ptr = blkptr;
		iocb_ptr -> iocb.attach_descrip_ptr, iocb_ptr -> iocb.attach_data_ptr,
		     iocb_ptr -> iocb.open_descrip_ptr, iocb_ptr -> iocb.open_data_ptr = null ();
		iocb_ptr -> iocb.detach_iocb = iox_$err_not_attached;
		iocb_ptr -> iocb.open = iox_$err_not_attached;
		iocb_ptr -> iocb.close = iox_$err_not_open;
		iocb_ptr -> iocb.get_line = iox_$err_not_open;
		iocb_ptr -> iocb.get_chars = iox_$err_not_open;
		iocb_ptr -> iocb.put_chars = iox_$err_not_open;
		iocb_ptr -> iocb.control = iox_$err_not_open;
		iocb_ptr -> iocb.modes = iox_$err_not_open;
		iocb_ptr -> iocb.read_record = iox_$err_not_open;
		iocb_ptr -> iocb.write_record = iox_$err_not_open;
		iocb_ptr -> iocb.rewrite_record = iox_$err_not_open;
		iocb_ptr -> iocb.delete_record = iox_$err_not_open;
		iocb_ptr -> iocb.position = iox_$err_not_open;
		iocb_ptr -> iocb.seek_key = iox_$err_not_open;
		iocb_ptr -> iocb.read_key = iox_$err_not_open;
		iocb_ptr -> iocb.read_length = iox_$err_not_open;
		iocb_ptr -> iocb.ios_compatibility = null ();
		call iox_$propagate (iocb_ptr);
		end;
	     end;
	else do;
	     if iocb_ptr -> iocb.open_descrip_ptr ^= null () then call iocb_ptr -> iocb.close (iocb_ptr, status.code);
	     if iocb_ptr -> iocb.attach_descrip_ptr ^= null ()
	     then call iocb_ptr -> iocb.detach_iocb (iocb_ptr, status.code);
	     if iocb_ptr -> iocb.attach_descrip_ptr = null () then status.bits = detached_status;
	     end;
	call hcs_$reset_ips_mask (mask, mask);
	return;

/* End of entry point ..... ios_$detach(stream,device,mode,status) ..... */





/* Beginning of entry point ..... ios_$read(stream,wsptr,offset,nelem,nelemt,status) ..... */

read:
     entry (stream, wsptr, offset, nelem, nelemt, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = read_offset;
	     call iox_$ios_call (addr (ics), wsptr, offset, nelem, nelemt, status);
	     end;
	else do;
	     call iox_$get_line (iocb_ptr, addr (wsptr -> aligned_based.char (offset)), nelem, nelemt, status.code);
	     if status.code = error_table_$long_record then status.code = 0;
	     end;
	return;

/* End of entry point ..... ios_$read(stream,wsptr,offset,nelem,nelemt,status) ..... */





/* Beginning of entry point ..... ios_$write(stream,wsptr,offset,nelem,nelemt,status) ..... */

write:
     entry (stream, wsptr, offset, nelem, nelemt, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = write_offset;
	     call iox_$ios_call (addr (ics), wsptr, offset, nelem, nelemt, status);
	     end;
	else do;
	     call iox_$put_chars (iocb_ptr, addr (wsptr -> aligned_based.char (offset)), nelem, status.code);
	     if status.code = 0
	     then nelemt = nelem;
	     else nelemt = 0;
	     end;
	return;

/* End of entry point ..... ios_$write(stream,wsptr,offset,nelem,nelemt,status) ..... */





/* Beginning of entry point ..... ios_$abort(stream,oldstatus,status) ..... */

abort:
     entry (stream, oldstatus, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = abort_offset;
	     call iox_$ios_call (addr (ics), oldstatus, status);
	     end;
	else call iox_$control (iocb_ptr, "abort", null (), status.code);
	return;

/* End of entry point ..... ios_$abort(stream,oldstatus,status) ..... */





/* Beginning of entry point ..... ios_$order(stream,order,infptr,status) ..... */

order:
     entry (stream, order, infptr, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = order_offset;
	     call iox_$ios_call (addr (ics), order, infptr, status);
	     end;
	else call iox_$control (iocb_ptr, order, infptr, status.code);
	return;

/* End of entry point ..... ios_$order(stream,order,infptr,status) ..... */





/* Beginning of entry point ..... ios_$resetread(stream,status) ..... */

resetread:
     entry (stream, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = resetread_offset;
	     call iox_$ios_call (addr (ics), status);
	     end;
	else call iox_$control (iocb_ptr, "resetread", null (), status.code);
	return;

/* End of entry point ..... ios_$resetread(stream,status) ..... */





/* Beginning of entry point ..... ios_$resetwrite(stream,status) ..... */

resetwrite:
     entry (stream, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = resetwrite_offset;
	     call iox_$ios_call (addr (ics), status);
	     end;
	else call iox_$control (iocb_ptr, "resetwrite", null (), status.code);
	return;

/* End of entry point ..... ios_$resetwrite(stream,status) ..... */





/* Beginning of entry point ..... ios_$setsize(stream,elemsize,status) ..... */

setsize:
     entry (stream, elemsize, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = setsize_offset;
	     call iox_$ios_call (addr (ics), elemsize, status);
	     end;
	else status.code = error_table_$missent;
	return;

/* End of entry point ..... ios_$setsize(stream,elemsize,status) ..... */





/* Beginning of entry point ..... ios_$getsize(stream,elemsize,status) ..... */

getsize:
     entry (stream, elemsize, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = getsize_offset;
	     call iox_$ios_call (addr (ics), elemsize, status);
	     end;
	else elemsize = 9;
	return;

/* End of entry point ..... ios_$getsize(stream,elemsize,status) ..... */





/* Beginning of entry point ..... ios_$setdelim(stream,nbreaks,breaklist,ndelims,delimlist,status) ..... */

setdelim:
     entry (stream, nbreaks, breaklist, ndelims, delimlist, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = setdelim_offset;
	     call iox_$ios_call (addr (ics), nbreaks, breaklist, ndelims, delimlist, status);
	     end;
	else status.code = error_table_$missent;
	return;

/* End of entry point ..... ios_$setdelim(stream,nbreaks,breaklist,ndelims,delimlist,status) ..... */





/* Beginning of entry point ..... ios_$getdelim(stream,nbreaks,breaklist,ndelims,delimlist,status) ..... */

getdelim:
     entry (stream, nbreaks, breaklist, ndelims, delimlist, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = getdelim_offset;
	     call iox_$ios_call (addr (ics), nbreaks, breaklist, ndelims, delimlist, status);
	     end;
	else status.code = error_table_$missent;
	return;

/* End of entry point ..... ios_$getdelim(stream,nbreaks,breaklist,ndelims,delimlist,status) ..... */





/* Beginning of entry point ..... ios_$seek(stream,name1,name2,amount,status) ..... */

seek:
     entry (stream, name1, name2, amount, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = seek_offset;
	     call iox_$ios_call (addr (ics), name1, name2, amount, status);
	     end;
	else status.code = error_table_$missent;
	return;

/* End of entry point ..... ios_$seek(stream,name1,name2,amount,status) ..... */





/* Beginning of entry point ios_$tell(stream,name1,name2,amount,status) ..... */

tell:
     entry (stream, name1, name2, amount, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = tell_offset;
	     call iox_$ios_call (addr (ics), name1, name2, amount, status);
	     end;
	else status.code = error_table_$missent;
	return;

/* End of entry point ..... ios_$tell(stream,name1,name2,amount,status) ..... */





/* Beginning of entry point ..... ios_$changemode(stream,newmode,oldmode,status) ..... */

changemode:
     entry (stream, newmode, oldmode, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = changemode_offset;
	     call iox_$ios_call (addr (ics), newmode, oldmode, status);
	     end;
	else call iox_$modes (iocb_ptr, newmode, oldmode, status.code);
	return;

/* End of entry point ..... ios_$changemode(stream,newmode,oldmode,status) ..... */





/* Beginning of entry point ..... ios_$readsync(stream,mode,amount,status) ..... */

readsync:
     entry (stream, mode, amount, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = readsync_offset;
	     call iox_$ios_call (addr (ics), mode, amount, status);
	     end;
	else status.code = error_table_$missent;
	return;

/* End of entry point ..... ios_$readsync(stream,mode,amount,status) ..... */






/* Beginning of entry point ..... ios_$writesync(stream,mode,amount,status) ..... */

writesync:
     entry (stream, mode, amount, status);
	call setup ();
	if iocb_ptr -> iocb.ios_compatibility ^= null () then do;
	     ics.sdbptr = iocb_ptr -> iocb.open_data_ptr;
	     ics.dimptr = iocb_ptr -> iocb.ios_compatibility;
	     ics.entry = writesync_offset;
	     call iox_$ios_call (addr (ics), mode, amount, status);
	     end;
	else status.code = error_table_$missent;
	return;

/* End of entry point ..... ios_$writesync(stream,mode,amount,status) ..... */









/* Internal procedure called by most entry points of the IOS write-arounds to clear
   the status argument, look up the IOCB pointer, and verify that the IOCB is attached
   and open.  If there are any errors, a non-local go-to causes the write-around
   to return immediately to its caller. */

setup:
     proc;
	unspec (status) = "0"b;
	call iox_$look_iocb (stream, iocb_ptr, status.code);
	if status.code ^= 0 then status.code = error_table_$ioname_not_found;
	else if iocb_ptr -> iocb.attach_descrip_ptr = null () then status.code = error_table_$ioname_not_found;
	else if iocb_ptr -> iocb.open_descrip_ptr = null () then status.code = error_table_$ioname_not_active;
	else return;
	go to return;
     end setup;

/* End of internal procedure ..... setup() ..... */





return:
	return;





/* Internal procedure to handle faults while IPS interrupts
   are masked.  While not masked, any signals are simply
   passed on up the stack to their normal handlers.  For a
   fault while masked, the process is terminated (with the
   reason "unable to do critical I/O") because the I/O
   control blocks are in an inconsistent state, and we can
   tolerate neither spawning a command loop with interrupts
   masked nor a restart with a possibly changed mask. */

handler:
     proc (p1, name, p2, p3, continue);

dcl  (p1, p2, p3) ptr;
dcl  name char (*);
dcl  continue bit (1) aligned;
dcl  error_table_$unable_to_do_io fixed (35) ext;
dcl  addr builtin;

	if mask ^= 0 then do;
	     ti.version = 0;
	     ti.code = error_table_$unable_to_do_io;
	     call terminate_process_ ("fatal_error", addr (ti));
	     end;
	if name ^= "cleanup" then continue = "1"b;

     end handler;





/* Handler for the 'close' I/O operation--the only new I/O call permitted to an
   old DIM.  It closes and detaches the IOCB. */

iox_close:
     entry (iocb_ptr_) returns (fixed);
	mask = 0;
	call default_handler_$set (handler);
	call hcs_$set_ips_mask (0, mask);
	if iocb_ptr_ -> iocb.close ^= iox_close then do;
	     call hcs_$reset_ips_mask (mask, mask);
	     call iox_$close (iocb_ptr_, code);
	     return (code);
	     end;
	actual_iocb_ptr = iocb_ptr_ -> iocb.actual_iocb_ptr;
	blkptr = actual_iocb_ptr -> iocb.attach_data_ptr;
	ics.sdbptr = blkptr -> blk.sdbptr;
	ics.dimptr = blkptr -> blk.dimptr;
	ics.entry = detach_offset;
	call hcs_$reset_ips_mask (mask, mask);
	call iox_$ios_call (addr (ics), "", "", mystatus);
	call hcs_$set_ips_mask (0, mask);
	if iocb_ptr_ -> iocb.close ^= iox_close then do;
	     call hcs_$reset_ips_mask (mask, mask);
	     call iocb_ptr -> iocb.close (iocb_ptr_, code);
	     return (code);
	     end;
	if mystatus.bits & detached_status then do;
	     blkptr -> blk.sdbptr = free_blks_ptr;
	     free_blks_ptr = blkptr;
	     actual_iocb_ptr -> iocb.attach_descrip_ptr, actual_iocb_ptr -> iocb.attach_data_ptr,
		actual_iocb_ptr -> iocb.open_descrip_ptr, actual_iocb_ptr -> iocb.open_data_ptr = null ();
	     actual_iocb_ptr -> iocb.detach_iocb = iox_$err_not_attached;
	     actual_iocb_ptr -> iocb.open = iox_$err_not_attached;
	     actual_iocb_ptr -> iocb.close = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.get_line = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.get_chars = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.put_chars = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.modes = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.position = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.control = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.read_record = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.write_record = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.rewrite_record = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.delete_record = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.seek_key = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.read_key = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.read_length = iox_$err_not_open;
	     actual_iocb_ptr -> iocb.ios_compatibility = null ();
	     call iox_$propagate (actual_iocb_ptr);
	     mystatus.code = 0;
	     end;
	call hcs_$reset_ips_mask (mask, mask);
	return (mystatus.code);

/* End of 'close' handler. */





/* Beginning of entry point ..... ios_$no_entry( ... ,status) ..... */

no_entry:
     entry;
	p = cu_$arg_list_ptr ();
	i = p -> args.nargs;
	if i ^= 0 then p -> args.arg (i) -> fixed_aligned_based = error_table_$missent;
	return;

/* End of entry point ..... ios_$no_entry( ... ,status) ..... */





/* Beginning of entry point ..... ios_$read_ptr(wsptr,nelem,nelemt) ..... */

read_ptr:
     entry (wsptr, nelem, nelemt);
rloop:
	call iox_$get_line (iox_$user_input, wsptr, nelem, nelemt, code);
	if code ^= 0
	then if code ^= error_table_$long_record & code ^= error_table_$end_of_info then do;
		call ios_signal_ ("user_input", code);
		go to rloop;
		end;
	return;

/* End of entry point ..... ios_$read_ptr(wsptr,nelem,nelemt) ..... */





/* Beginning of entry point ..... ios_$write_ptr(wsptr,offset,nelem) ..... */

write_ptr:
     entry (wsptr, offset, nelem);
wloop:
	call iox_$put_chars (iox_$user_output, addr (wsptr -> aligned_based.char (offset)), nelem, code);
	if code ^= 0 then do;
	     call ios_signal_ ("user_output", code);
	     go to wloop;
	     end;
	return;

/* End of entry point ..... ios_$write_ptr(wsptr,offset,nelem) ..... */





/* Beginning of entry point ..... ios_$ios_quick_init() ..... */

ios_quick_init:
     entry;

	call iox_$init_standard_iocbs;
	return;

/* End of entry point ..... ios_$ios_quick_init() ..... */
%page;
%include iox_dcls;

     end ios_;
