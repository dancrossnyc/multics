/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
bce_shutdown_state: proc (P_ss_info_ptr);

/* Fetch the shutdown state from the rpv. Keith Loepere, January 1984. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  P_ss_info_ptr		        ptr parameter;
dcl  active_fnc_err_	        entry options (variable);
dcl  active_function	        bit (1) aligned;	/* as opposed to command usage */
dcl  addr			        builtin;
dcl  af_return		        char (af_return_len) based (af_return_ptr) var; /* return for active function */
dcl  af_return_len		        fixed bin (21);
dcl  af_return_ptr		        ptr;
dcl  arg_count		        fixed bin;
dcl  character		        builtin;
dcl  code			        fixed bin (35);
dcl  com_err_		        entry options (variable);
dcl  cu_$af_return_arg_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  error		        variable entry options (variable);
dcl  ioa_			        entry options (variable);
dcl  ltrim		        builtin;
dcl  me			        char (14) init ("shutdown_state") static options (constant); /* program name */
dcl  pvt$root_pvtx		        fixed bin external;
dcl  1 my_label		        aligned like label;
dcl  read_disk		        entry (fixed bin, fixed bin, ptr, fixed bin (35));

	ss_info_ptr = P_ss_info_ptr;
	arg_list_ptr = ss_info.arg_list_ptr;
	call cu_$af_return_arg_rel (arg_count, af_return_ptr, af_return_len, code, arg_list_ptr);
	active_function = (code = 0);
	if active_function then error = active_fnc_err_;
	else error = com_err_;
	if arg_count ^= 0 then do;
	     call error (0, me, "Usage is: ^a", me);
	     return;
	end;

	labelp = addr (my_label);
	call read_disk (pvt$root_pvtx, 0, labelp, code);
	if code ^= 0 then call error (code, me);

	if active_function then af_return = ltrim (character (label.shutdown_state));
	else call ioa_ ("^d", label.shutdown_state);
	return;
%page; %include bce_subsystem_info_;
%page; %include fs_vol_label;
     end;
