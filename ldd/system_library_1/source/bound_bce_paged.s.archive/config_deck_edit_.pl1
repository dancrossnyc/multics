/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
config_deck_edit_: proc (ss_info_ptr);

/* Program to use qedx_ to edit config decks.  config_deck_parse_ is used for 
ascii/binary conversions.
  
       In the ascii form, each field is considered to be of two types, 
labeled and unlabeled.  Labeled fields are fields preceeded by a label, 
such as "-port 7" ("-port" is the label; "7" is the value).  Unlabeled 
fields are fields not so labeled; the config card name is considered the 
first of these.  Normal text editing operations are performed on this 
source form within qedx_.  Writing the config deck out performs a per card
validity check in the process of conversion to binary form.

      Buffer 0 is wired (default path set) to <config deck>.  Reads and 
writes without a pathname operate on the binary config deck. */

/* Initially coded February 1983 by Keith Loepere */
/* Modified August 1983 by Keith Loepere for new bce switches */
/* Modified November 1983 by Keith Loepere to use qedx_. */
/* Modified March 1984 by Keith Loepere to accept a command line deck name */
/* Modified January 1985 by Keith Loepere to run at crash time. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  NL			        char (1) static options (constant) init ("
");
dcl  addr			        builtin;
dcl  arg			        char (arg_lth) based (arg_ptr);
dcl  arg_count		        fixed bin;
dcl  arg_lth		        fixed bin (21);
dcl  arg_ptr		        ptr;
dcl  bootload_fs_$get	        entry (char (*), ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  bootload_fs_$get_ptr	        entry (char (*), ptr, fixed bin (21), fixed bin (35));
dcl  bootload_fs_$put	        entry (char (*), ptr, fixed bin (21), bit (1) aligned, fixed bin (35));
dcl  code			        fixed bin (35);
dcl  com_err_		        entry () options (variable);
dcl  config_deck_parse_$ascii_to_binary entry (char (256) var, ptr, fixed bin);
dcl  config_deck_parse_$binary_to_ascii entry (ptr, char (256) var);
dcl  cu_$arg_count_rel	        entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_ptr_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  disk_config_deck$	        (4096) bit (36) aligned external static;
dcl  error_table_$recoverable_error   fixed bin (35) ext static;
dcl  get_ptrs_$given_segno	        entry (fixed bin (15)) returns (pointer);
dcl  index		        builtin;
dcl  ioa_			        entry () options (variable);
dcl  length		        builtin;
dcl  me			        char (11) static options (constant) init ("config_edit");
dcl  null			        builtin;
dcl  1 my_qedx_info		        aligned,
       2 header		        like qedx_info.header,
       2 buffers		        (1) like qedx_info.buffers;
dcl  pc_wired$write_wait	        entry (pointer, fixed bin, fixed bin);
dcl  qedx_		        entry (ptr, fixed bin (35));
dcl  segno		        builtin;
dcl  string		        builtin;
dcl  substr		        builtin;
dcl  sys_boot_info$config_has_been_modified bit (1) aligned external static;
%page;
	if ss_info_ptr ^= null () then do;
	     call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
	     if code ^= 0 then go to TERMINATE;		/* active function? */
	end;
	else arg_count = 0;
	if arg_count > 1 then do;
	     call ioa_ ("Usage is: config_edit {file_name}");
	     go to TERMINATE;
	end;

	else if arg_count = 1 then begin;

dcl  buffer_lth		        fixed bin (21);
dcl  buffer_ptr		        ptr;

	     call cu_$arg_ptr_rel (1, arg_ptr, arg_lth, code, ss_info.arg_list_ptr);
	     call bootload_fs_$get_ptr (arg, buffer_ptr, buffer_lth, code);
	     if code ^= 0 then do;
		call com_err_ (code, me, "^a", arg);
		go to TERMINATE;
	     end;
	     call write_config_deck (buffer_ptr, buffer_lth);
	     return;
	end;

/* Enter config deck editor */

	config_max_cards, config_n_cards = 256;
	qedx_info_ptr = addr (my_qedx_info);
	qedx_info.header.version = QEDX_INFO_VERSION_1;
	qedx_info.editor_name = me;
	qedx_info.buffer_io = config_deck_io;
	string (qedx_info.header.flags) = ""b;
	qedx_info.header.query_if_modified = "1"b;
	qedx_info.caller_does_io = "1"b;
	qedx_info.n_buffers = 1;
	qedx_info.buffers (1).buffer_name = "0";
	qedx_info.buffers (1).buffer_pathname = "<config deck>";
	string (qedx_info.buffers (1).flags) = ""b;
	qedx_info.buffers (1).locked_pathname, qedx_info.buffers (1).default_read_ok, qedx_info.buffers (1).default_write_ok = "1"b;

	call qedx_ (qedx_info_ptr, code);
	if code ^= 0 then
	     if code ^= error_table_$recoverable_error then call com_err_ (code, me, "from qedx_");
TERMINATE:
	return;
%page;
config_deck_io: proc (qedx_buffer_io_info_ptr, io_okay) options (non_quick);

/* The routine to fetch data from ascii files.  It also knows how to read
and write the binary config deck. */

dcl  io_okay		        bit (1) aligned parameter; /* read or write successful */
dcl  qedx_buffer_io_info_ptr	        ptr parameter;

	qbii_ptr = qedx_buffer_io_info_ptr;
	if qedx_buffer_io_info.version ^= QEDX_BUFFER_IO_INFO_VERSION_1 then do;
	     call com_err_ (0, me, "Incorrect version of qedx_buffer_io_info supplied.");
	     go to TERMINATE;
	end;
	if qedx_buffer_io_info.pathname ^= "<config deck>" then do;
	     if qedx_buffer_io_info.direction = QEDX_READ_FILE then
		call bootload_fs_$get (qedx_buffer_io_info.pathname, qedx_buffer_io_info.buffer_ptr, qedx_buffer_io_info.buffer_max_lth, qedx_buffer_io_info.buffer_lth, code);
	     else call bootload_fs_$put (qedx_buffer_io_info.pathname, qedx_buffer_io_info.buffer_ptr, qedx_buffer_io_info.buffer_lth, "0"b, code);
	     if code ^= 0 then call com_err_ (code, me, "^a", qedx_buffer_io_info.pathname);
	     io_okay = (code = 0);
	end;
	else do;
	     if qedx_buffer_io_info.direction = QEDX_READ_FILE then do;
		call read_config_deck (qedx_buffer_io_info.buffer_ptr, qedx_buffer_io_info.buffer_max_lth, qedx_buffer_io_info.buffer_lth);
		io_okay = "1"b;
	     end;
	     else if sys_info$collection_1_phase = CRASH_INITIALIZATION then do;
		     call com_err_ (0, me, "The config deck cannot be modified with a saved crash image present.");
		     io_okay = "0"b;
		end;
		else do;
		     call write_config_deck (qedx_buffer_io_info.buffer_ptr, qedx_buffer_io_info.buffer_lth);
		     io_okay = "1"b;
		end;
	end;
	return;
     end;
%page;
read_config_deck: proc (buffer_ptr, buffer_max_lth, buffer_lth);

/* read in the current config deck into the area supplied by qedx */

dcl  ascii_config_card	        char (256) var;
dcl  buffer		        char (buffer_max_lth) based (buffer_ptr);
dcl  buffer_max_lth		        fixed bin (21) parameter;
dcl  buffer_lth		        fixed bin (21) parameter;
dcl  buffer_ptr		        ptr parameter;
dcl  cards_to_read		        fixed bin;
dcl  config_card_num	        fixed bin;		/* counter to card */

	configp = addr (disk_config_deck$);		/* using real deck easy */
	config_max_cards, config_n_cards = 256;
	do config_card_num = 1 to 256 while (config_deck.cards (config_card_num).word ^= FREE_CARD_WORD);
	end;					/* found last true card */
	cards_to_read = config_card_num - 1;

/* here we convert the config deck to an ascii form */

	buffer_lth = 0;
	do config_card_num = 1 to cards_to_read;
	     cardp = addr (config_deck.cards (config_card_num));
	     call config_deck_parse_$binary_to_ascii (cardp, ascii_config_card);
	     if buffer_lth + length (ascii_config_card) + 1 /* nl */ > buffer_max_lth then do;
		call com_err_ (0, me, "Converted config deck does not fit in file.");
		return;
	     end;
	     substr (buffer, buffer_lth + 1, length (ascii_config_card)) = ascii_config_card;
	     buffer_lth = buffer_lth + length (ascii_config_card) + 1;
	     substr (buffer, buffer_lth, 1) = NL;
	end;
	return;
     end;
%page;
write_config_deck: proc (buffer_ptr, buffer_lth);

/* Convert the supplied ascii text into a binary deck. */

dcl  ascii_config_card	        char (256) var;
dcl  buffer		        char (buffer_lth) based (buffer_ptr);
dcl  buffer_lth		        fixed bin (21) parameter;
dcl  buffer_pos		        fixed bin (21);	/* starting pos in buffer for this new line */
dcl  buffer_ptr		        ptr parameter;
dcl  card_len		        fixed bin (21);	/* length of text in card (minus nl) */
dcl  output_card_num	        fixed bin;

	configp = addr (disk_config_deck$);
	sys_boot_info$config_has_been_modified = "1"b;

	config_max_cards, config_n_cards = 256;
	output_card_num = 0;
	buffer_pos = 1;
	do while (buffer_pos <= buffer_lth);
	     output_card_num = output_card_num + 1;
	     cardp = addr (config_deck.cards (output_card_num));
	     card_len = index (substr (buffer, buffer_pos), NL);
	     if card_len = 0 then card_len = buffer_lth - buffer_pos + 1;
	     else card_len = card_len - 1;
	     ascii_config_card = substr (buffer, buffer_pos, card_len);
	     buffer_pos = buffer_pos + card_len + 1;
	     call config_deck_parse_$ascii_to_binary (ascii_config_card, cardp, output_card_num);
	end;
	do output_card_num = output_card_num + 1 to config_max_cards; /* blank out rest of deck */
	     config_deck.cards (output_card_num).word = FREE_CARD_WORD;
	end;

/*	call total_config_deck_check;  */

	call pc_wired$write_wait (get_ptrs_$given_segno (segno (addr (disk_config_deck$))), 0, 4); /* save on disk */
	return;
     end;
%page; %include bce_subsystem_info_;
%page; %include collection_1_phases;
%page; %include config_deck;
%page; %include qedx_buffer_io_info;
%page; %include qedx_info;
     end;
