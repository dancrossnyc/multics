/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-01-17,Fawcett), approve(86-01-17,MCR7220),
     audit(86-05-14,Farley), install(86-07-17,MR12.0-1097):
     Extracted from bce_test_disk (Allen Ball) by Keith Loepere,
     This is used by bce_copy_disk, and bce_test_disk.
  2) change(86-01-17,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-14,Farley), install(86-07-17,MR12.0-1097):
     Changed to support subvolumes by using last_sv_rec_num (device_type)
     instead of last_rec_num (device_type).
                                                   END HISTORY COMMENTS */

bce_parse_disk_spec: proc (caller, arg_list_ptr, arg_num, device_type, p_labelp, f_record, l_record, caller_arg_parser, info_ptr, code);

/* Routine to parse a bce specification of a disk range, interspersed with
other control arguments.
Extracted from bce_test_disk (Allen Ball) by Keith Loepere, March 1985.
*/

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* Parameters */

dcl  arg_list_ptr			ptr parameter;	/* to arg list for calling program */
dcl  arg_num			fixed bin parameter;/* arg pos in arg list to start with */
dcl  caller			char (32) parameter;/* name for error messages */
dcl  caller_arg_parser		entry (ptr, fixed bin, ptr, fixed bin (35)) parameter; /* routine to pass of to for a non disk spec arg */
dcl  code				fixed bin (35) parameter;
dcl  device_type			fixed bin parameter;/* as in fs_dev_types */
dcl  f_record			fixed bin (18) parameter; /* first rec in range */
dcl  info_ptr			ptr parameter;	/* passed to caller_arg_parser */
dcl  l_record			fixed bin parameter;/* last rec in range */
dcl  p_labelp			ptr parameter;	/* to label for disk */

/* Constants */

dcl  First			fixed bin (18) static options (constant) init (-1);
dcl  Last				fixed bin (18) static options (constant) init (-2);
dcl  Octal			fixed bin static options (constant) init (8);
dcl  Unassigned			fixed bin (18) static options (constant) init (-3);

/* Variables */

dcl  arg_count			fixed bin;
dcl  arg_len			fixed bin (21);
dcl  arg_ptr			ptr;
dcl  n_record			fixed bin (18);	/* number of records to be read or written after f_record or before l_record */
dcl  number			fixed bin (35);
dcl  partition			char (4);
dcl  parts_index			fixed bin;	/* index of part in label list */

/* Based */

dcl  arg				char (arg_len) based (arg_ptr);

/* Entries */

dcl  com_err_			entry () options (variable);
dcl  cu_$arg_count_rel		entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  cv_integer_string_check_		entry (char (*), fixed bin, fixed bin (35)) returns (fixed bin (35));

/* External */

dcl  error_table_$bad_arg		fixed bin (35) ext static;
dcl  error_table_$dev_offset_out_of_bounds fixed bin (35) ext static;
dcl  error_table_$fsdisk_not_storage	fixed bin (35) ext static;
dcl  error_table_$noarg		fixed bin (35) ext static;
dcl  error_table_$nopart		fixed bin (35) ext static;
%page;
	f_record = Unassigned;
	l_record = Unassigned;
	n_record = Unassigned;
	partition = "";
	labelp = p_labelp;

	call cu_$arg_count_rel (arg_count, arg_list_ptr, code);
	do arg_num = arg_num to arg_count;
	     call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len, code, arg_list_ptr);
	     if arg = "-partition" | arg = "-part" then do;
		if label.Multics ^= Multics_ID_String then do;
		     code = error_table_$fsdisk_not_storage;
		     call com_err_ (code, caller, "partition");
		     return;
		end;
		call get_next_arg ("partition");
		partition = arg;
	     end;
	     else if arg = "-record" | arg = "-rec" then do;
		if f_record ^= Unassigned | l_record ^= Unassigned then go to bad_rec_spec;
		call get_next_arg ("record");
		number = cv_integer_string_check_ (arg, Octal, code);
		if code = 0 then do;
		     if number < 0 then goto no_neg_rec_nums;
		     else do;
			f_record = number;
			l_record = number;
		     end;
		end;
		else do;
		     if arg = "first" then do;
			f_record = First;
			l_record = First;
		     end;
		     else if arg = "last" then do;
			f_record = Last;
			l_record = Last;
		     end;
		     else goto bad_arg;
		end;
	     end;
	     else if arg = "-first_record" | arg = "-frec" then do;
		call get_next_arg ("first_record");
		if f_record ^= Unassigned then goto bad_rec_spec;
		number = cv_integer_string_check_ (arg, Octal, code);
		if code = 0 then do;
		     if number < 0 then goto no_neg_rec_nums;
		     else f_record = number;
		end;
		else do;
		     if arg = "first" then f_record = First;
		     else if arg = "last" then f_record = Last;
		     else goto bad_arg;
		end;
	     end;
	     else if arg = "-n_records" | arg = "-nrec" then do;
		if n_record ^= Unassigned then goto bad_rec_spec;
		call get_next_arg ("n_records");
		number = cv_integer_string_check_ (arg, Octal, code);
		if code = 0 then do;
		     if number <= 0 then goto no_neg_rec_nums;
		     n_record = number;
		end;
		else goto bad_arg;
	     end;
	     else if arg = "-last_record" | arg = "-lrec" then do;
		if l_record ^= Unassigned then goto bad_rec_spec;
		call get_next_arg ("last_record");
		number = cv_integer_string_check_ (arg, Octal, code);
		if code = 0 then do;
		     if number < 0 then do;
no_neg_rec_nums:		code = error_table_$dev_offset_out_of_bounds;
			call com_err_ (code, caller, "^d", number);
			return;
		     end;
		     else l_record = number;
		end;
		else do;
		     if arg = "first" then l_record = First;
		     else if arg = "last" then l_record = Last;
		     else goto bad_arg;
		end;
	     end;
	     else do;
		call caller_arg_parser (arg_list_ptr, arg_num, info_ptr, code);
		if code ^= 0 then return;		/* routine printed error */
	     end;
next_arg: end;
%page;

/* Now figure out what f_record and l_record  are. */

	if f_record ^= Unassigned & l_record ^= Unassigned & n_record ^= Unassigned then goto bad_rec_spec; /* -frec, -lrec, and -nrec are (all three) incompatible */
	if partition ^= "" then do;
	     do parts_index = 1 to label.nparts while (label.parts (parts_index).part ^= partition);
	     end;
	     if parts_index > label.nparts then do;
		code = error_table_$nopart;
		call com_err_ (code, caller, "^a", partition);
		return;
	     end;
	     if n_record = Unassigned then do;
		if f_record = Unassigned | f_record = First then f_record = label.parts (parts_index).frec;
		else if f_record = Last then f_record = label.parts (parts_index).frec + label.parts (parts_index).nrec - 1;
		else f_record = f_record + label.parts (parts_index).frec;
		if l_record = Unassigned | l_record = Last then l_record = label.parts (parts_index).frec + label.parts (parts_index).nrec - 1;
		else if l_record = First then l_record = label.parts (parts_index).frec;
		else l_record = l_record + label.parts (parts_index).frec;
	     end;
	     else do;
		if f_record ^= Unassigned then do;
		     if f_record = First then f_record = label.parts (parts_index).frec;
		     else if f_record = Last then f_record = label.parts (parts_index).frec + label.parts (parts_index).nrec - 1;
		     else f_record = f_record + label.parts (parts_index).frec;
		     l_record = f_record + n_record - 1;
		end;
		else if l_record ^= Unassigned then do;
		     if l_record = First then l_record = label.parts (parts_index).frec;
		     else if l_record = Last then l_record = label.parts (parts_index).frec + label.parts (parts_index).nrec - 1;
		     else l_record = l_record + label.parts (parts_index).frec;
		     f_record = l_record - n_record + 1;
		end;
	     end;
	end;
%page;
	else do;
	     if n_record = Unassigned then do;
		if f_record = Unassigned | f_record = First then f_record = first_rec_num (device_type);
		else if f_record = Last then f_record = last_sv_rec_num (device_type);
		if l_record = Unassigned | l_record = Last then l_record = last_sv_rec_num (device_type);
		else if l_record = First then l_record = first_rec_num (device_type);
	     end;
	     else do;
		if f_record ^= Unassigned then do;
		     if f_record = First then f_record = first_rec_num (device_type);
		     else if f_record = Last then f_record = last_sv_rec_num (device_type);
		     l_record = f_record + n_record - 1;
		end;
		else if l_record ^= Unassigned then do;
		     if l_record = First then l_record = first_rec_num (device_type);
		     else if l_record = Last then l_record = last_sv_rec_num (device_type);
		     f_record = l_record - n_record + 1;
		end;
	     end;
	end;
%page;

/* Out of range checks */

	if f_record < first_rec_num (device_type) | f_record > first_rec_num (device_type) + rec_per_dev (device_type) - 1 then do;
	     code = error_table_$dev_offset_out_of_bounds;
	     call com_err_ (code, caller, "^d", f_record);
	     return;
	end;
	if l_record < first_rec_num (device_type) | l_record > first_rec_num (device_type) + rec_per_dev (device_type) - 1 then do;
	     code = error_table_$dev_offset_out_of_bounds;
	     call com_err_ (code, caller, "^d", l_record);
	     return;
	end;
	if l_record < f_record then do;
	     code = error_table_$dev_offset_out_of_bounds;
	     call com_err_ (code, caller, "^d is less than ^d", l_record, f_record);
	     return;
	end;

	code = 0;					/* passes all tests */
RETURN:	return;
%page;
get_next_arg: proc (arg_needed);

dcl  arg_needed			char (32);

	arg_num = arg_num + 1;
	if arg_num > arg_count then do;
	     code = error_table_$noarg;
	     call com_err_ (code, caller, arg_needed);
	     go to RETURN;
	end;
	call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len, code, arg_list_ptr);
	return;
     end get_next_arg;

bad_rec_spec:
	code = error_table_$dev_offset_out_of_bounds;
	call com_err_ (0, caller, "Incompatible use of record specifiers.");
	return;

bad_arg:
	code = error_table_$bad_arg;
	call com_err_ (code, caller, "^a", arg);
	return;
%page; %include fs_dev_types;
%page; %include fs_vol_label;
     end bce_parse_disk_spec;
