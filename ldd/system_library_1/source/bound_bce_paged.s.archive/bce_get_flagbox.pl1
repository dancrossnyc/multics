/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
bce_get_flagbox: proc (P_ss_info_ptr);

/* Version of get_flagbox for bce.  Stolen by Keith Loepere, December 1983. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  P_ss_info_ptr		        ptr parameter;
dcl  active_fnc_err_	        entry options (variable);
dcl  active_function	        bit (1) aligned;	/* as opposed to command usage */
dcl  addbitno		        builtin;
dcl  addr			        builtin;
dcl  af_return		        char (af_return_len) based (af_return_ptr) var; /* return for active function */
dcl  af_return_len		        fixed bin (21);
dcl  af_return_ptr		        ptr;
dcl  arg			        char (arg_len) based (arg_ptr); /* command line arg */
dcl  arg_count		        fixed bin;
dcl  arg_len		        fixed bin (21);
dcl  arg_ptr		        ptr;
dcl  bit_ptr		        ptr;		/* to bit in flagbox to examine/set */
dcl  code			        fixed bin (35);
dcl  com_err_		        entry options (variable);
dcl  cu_$af_return_arg_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  cu_$arg_ptr_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  cv_dec_check_		        entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  error		        variable entry options (variable);
dcl  error_table_$badopt	        fixed bin (35) ext;
dcl  flag_num		        fixed bin;		/* which flag bit in flagbox */
dcl  flagbox_bit		        bit (1) based (bit_ptr); /* bit in flagbox flags */
dcl  ioa_			        entry options (variable);
dcl  me			        char (11);		/* program name */
dcl  old_value		        char (256) var;	/* result of command */
dcl  option		        char (12);		/* value desired */
dcl  requote_string_	        entry (char (*)) returns (char (*));
dcl  rtrim		        builtin;
dcl  set			        bit (1) aligned;	/* as opposed to get operation */

	set = "0"b;
	me = "get_flagbox";
	go to join;

bce_set_flagbox: entry (P_ss_info_ptr);

	set = "1"b;
	me = "set_flagbox";
join:
	ss_info_ptr = P_ss_info_ptr;
	arg_list_ptr = ss_info.arg_list_ptr;
	call cu_$af_return_arg_rel (arg_count, af_return_ptr, af_return_len, code, arg_list_ptr);
	active_function = (code = 0);
	if active_function then error = active_fnc_err_;
	else error = com_err_;
	if set then
	     if arg_count ^= 2 then do;
		call error (0, me, "Usage is: set_flagbox name old_value");
		return;
	     end;
	     else ;
	else if arg_count ^= 1 then do;
	     call error (0, me, "Usage is: get_flagbox name");
	     return;
	end;

	fgbxp = addr (flagbox$);
	call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, arg_list_ptr);
	option = arg;
	if option = "bce_command" then old_value = rtrim (fgbx.return_to_bce_command);
	else do;
	     flag_num = cv_dec_check_ (option, code);
	     if code ^= 0 then do;
		do flag_num = 1 to 36 while (option ^= flagbox_flag_names (flag_num));
		end;
	     end;

	     if flag_num <= 36 then bit_ptr = addbitno (addr (fgbx.flags), flag_num - 1);
	     else if option = "ssenb" then bit_ptr = addr (fgbx.ssenb);
	     else if option = "manual_crash" then bit_ptr = addr (fgbx.manual_crash);
	     else if option = "call_bce" then bit_ptr = addr (fgbx.call_bce);
	     else if option = "shut" then bit_ptr = addr (fgbx.shut);
	     else go to fail1;
	     if flagbox_bit then old_value = "true";
	     else old_value = "false";
	end;

	if set then do;
	     call cu_$arg_ptr_rel (2, arg_ptr, arg_len, code, arg_list_ptr);
	     if option = "bce_command" then fgbx.return_to_bce_command = arg;
	     else do;
		if arg = "true" then flagbox_bit = "1"b;
		else if arg = "false" then flagbox_bit = "0"b;
		else do;
		     code = error_table_$badopt;
		     go to fail;
		end;
	     end;
	end;

	if active_function then af_return = requote_string_ ((old_value));
	else if ^set then call ioa_ (old_value);
	return;

fail1:	code = error_table_$badopt;
fail:	call error (code, me, "^a", arg);
	return;
%page; %include bce_subsystem_info_;
%page; %include flagbox;
%page; %include flagbox_flags;
     end;
