/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
/* Centralized module to convert between various versions of the backup_control structure */

/* Created:  July 1982 by G. Palter */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


backup_control_mgr_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_backup_control_ptr pointer parameter;		/* -> caller's possibly older backup_control structure */

dcl  P_code fixed binary (35) parameter;


/* Remaining declarations */

dcl  1 tape_entry_overlay aligned based,		/* I wish PL/I had nulle */
       2 environmentptr pointer,
       2 codeptr pointer;

dcl  system_area area based (system_area_ptr);
dcl  system_area_ptr pointer;

dcl  idx fixed binary;

/* format: off */
dcl  (error_table_$noalloc, error_table_$unimplemented_version)
	fixed binary (35) external;
/* format: on */

dcl  get_system_free_area_ entry () returns (pointer);

dcl  (addr, null, string) builtin;

dcl  area condition;
%page;
/* Older versions of the backup_control structure */

dcl  1 v1_backup_control aligned based (backup_control_ptr),
       2 header,
         3 backup_control_version fixed binary,
         3 tape_entry entry (char (*)) variable,
         3 options aligned,
	 4 map_sw bit (1) unaligned,
	 4 debug_sw bit (1) unaligned,
	 4 no_reload_sw bit (1) unaligned,
	 4 hold_sw bit (1) unaligned,
	 4 must_be_zero bit (32) unaligned,
         3 request_count fixed binary,
       2 requests (0 refer (v1_backup_control.request_count)),
         3 path character (168) unaligned,
         3 new_path character (168) unaligned,
         3 found bit (1) aligned,
         3 loaded bit (1) aligned,
         3 status_code fixed binary (35),
         3 error_name character (65) unaligned;

dcl  1 v2_backup_control aligned based (backup_control_ptr),
       2 header,
         3 backup_control_version fixed binary,
         3 tape_entry entry (char (*)) variable,
         3 options aligned,
	 4 map_sw bit (1) unaligned,
	 4 debug_sw bit (1) unaligned,
	 4 no_reload_sw bit (1) unaligned,
	 4 hold_sw bit (1) unaligned,
	 4 must_be_zero bit (32) unaligned,
         3 request_count fixed binary,
       2 requests (0 refer (v2_backup_control.request_count)),
         3 path character (168) unaligned,
         3 new_path character (168) unaligned,
         3 switches aligned,
	 4 no_primary_sw bit (1) unaligned,
	 4 trim_sw bit (1) unaligned,
	 4 zero_pad bit (34) unaligned,
         3 found bit (1) aligned,
         3 loaded bit (1) aligned,
         3 status_code fixed binary (35),
         3 error_name character (65) unaligned;

dcl  1 v3_backup_control aligned based (backup_control_ptr),
       2 header,
         3 backup_control_version fixed binary,
         3 tape_entry entry (character (*)) variable,
         3 data_iocb pointer,
         3 options aligned,
	 4 map_sw bit (1) unaligned,
	 4 debug_sw bit (1) unaligned,
	 4 no_reload_sw bit (1) unaligned,
	 4 hold_sw bit (1) unaligned,
	 4 preattached bit (1) unaligned,
	 4 error_file bit (1) unaligned,
	 4 first bit (1) unaligned,
	 4 caller_handles_conditions bit (1) unaligned,
	 4 allow_dir_overwrite bit (1) unaligned,
	 4 pad bit (27) unaligned,
         3 request_count fixed binary,
       2 requests (0 refer (v3_backup_control.request_count)),
         3 path character (168) unaligned,
         3 new_path character (168) unaligned,
         3 switches aligned,
	 4 no_primary_sw bit (1) unaligned,
	 4 trim_sw bit (1) unaligned,
	 4 pad bit (34) unaligned,
         3 found bit (1) aligned,
         3 loaded bit (1) aligned,
         3 status_code fixed binary (35),
         3 error_name character (65) unaligned;

dcl 1 v4_backup_control aligned based (backup_control_ptr),
    2 header,					/* allows people to use like (!) */
      3 backup_control_version character (8) unaligned,
      3 tape_entry entry (character (*)) variable,	/* returns next tape label */
      3 data_iocb pointer,				/* -> I/O switch to use for dumping/loading if preattached */
      3 maximum_access_class bit (72) aligned,		/* maximum access class for anything to be dumped */
      3 maximum_dir_access_class bit (72) aligned,	/* no directory above this access class is dumped */
      3 user_for_access_check,			/* data required to validate user's access */
        4 id character (32) unaligned,			/* Person.Project.tag */
        4 authorization bit (72),			/* the user's process authorization */
        4 ring fixed binary,				/* the user's ring o execution */
      3 minimum_ring fixed binary,			/* no ring bracket is set below this value */
      3 aim_translations,				/* data required to translate AIM attributes on the tape */
        4 source_attributes_ptr pointer,
        4 target_attributes_ptr pointer,
      3 options aligned,
        4 map_sw  bit(1) unaligned,			/* ON to write map segment */
        4 debug_sw bit (1) unaligned,			/* ON to check quotas and not trim subtrees */
        4 no_reload_sw bit (1) unaligned,		/* ON to not load for backup_load_ */
        4 hold_sw bit (1) unaligned,			/* ON to not demount tape afterwards */
        4 preattached bit (1) unaligned,		/* ON => perform loading/dumping to supplied I/O switch */
        4 error_file bit (1) unaligned,			/* ON => generate an error file anyway */
        4 first bit (1) unaligned,			/* ON => for reload, stop after all requests satisfied */
        4 caller_handles_conditions bit (1) unaligned,	/* ON => caller of backup_dump_ handles faults */
        4 allow_dir_overwrite bit (1) unaligned,		/* ON => allow reloaded seg to overwrite a dir */
        4 enforce_max_access_class bit (1) unaligned,	/* ON => do not dump anything above given access class */
        4 dont_dump_upgraded_dirs bit (1) unaligned,	/* ON => do not dump directories above given access class */
        4 check_effective_access bit (1) unaligned,	/* ON => do not dump branches specified user can't touch */
        4 restore_access_class bit (1) unaligned,		/* ON => restore AIM attributes even in debug mode */
        4 enforce_minimum_ring bit (1) unaligned,		/* ON => do not give anything ring bracket below minimum */
        4 translate_access_class bit (1) unaligned,	/* ON => translate access classes read from tape */
        4 pad bit (21) unaligned,
      3 request_count fixed binary,			/* # of entries to load or dump */
    2 requests (0 refer (v4_backup_control.request_count)),
      3 path character (168) unaligned,			/* pathname of object to be dumped/loaded */
      3 new_path character (168) unaligned,		/* pathname for object when reloading if not same as above */
      3 switches aligned,
        4 no_primary_sw bit (1) unaligned,		/* do not use primary pathname */
        4 trim_sw bit (1) unaligned,			/* trim target directories */
        4 pad bit (34) unaligned,
      3 found bit(1) aligned,				/* ON => found on tape by backup_load_ (output) */
      3 loaded bit (1) aligned,			/* ON => loaded by backup_load_ (output) */
      3 status_code fixed binary (35),			/* ON => per-entry status code (output) */
      3 error_name character (65) unaligned;		/* ON => some information about what happened (output) */

dcl BACKUP_CONTROL_VERSION_4 character (8) static options (constant) initial ("hbc_0004");
%page;
/* Converts the supplied input structure to the current version (if necessary) */

initiate:
     entry (P_backup_control_ptr, P_code);

	backup_control_ptr = P_backup_control_ptr;

	P_code = 0;				/* assume success */

	if backup_control.version = BACKUP_CONTROL_VERSION_5 then do;
	     bk_ss_$control_ptr = backup_control_ptr;	/* no problems: it's the current version */
	     return;
	end;

	if v1_backup_control.backup_control_version = 1 then
	     backup_control_request_count = v1_backup_control.request_count;

	else if v2_backup_control.backup_control_version = 2 then
	     backup_control_request_count = v2_backup_control.request_count;

	else if v3_backup_control.backup_control_version = 3 then
	     backup_control_request_count = v3_backup_control.request_count;

	else if v4_backup_control.backup_control_version = BACKUP_CONTROL_VERSION_4 then
	     backup_control_request_count = v4_backup_control.request_count;

	else do;					/* unrecognized version */
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	system_area_ptr = get_system_free_area_ ();

	on condition (area)
	     begin;				/* just in case we can't allocate it */
		P_code = error_table_$noalloc;
		go to RETURN_FROM_INITIATE;
	     end;

	allocate backup_control in (system_area) set (bk_ss_$control_ptr);

	revert condition (area);

	bk_ss_$control_ptr -> backup_control.version = BACKUP_CONTROL_VERSION_5;

	string (bk_ss_$control_ptr -> backup_control.options) = ""b;
						/* make sure all new options are off */

	addr (bk_ss_$control_ptr -> backup_control.tape_entry) -> tape_entry_overlay = null ();
	bk_ss_$control_ptr -> backup_control.data_iocb = null ();
	bk_ss_$control_ptr -> backup_control.maximum_access_class = ""b;
	bk_ss_$control_ptr -> backup_control.minimum_access_class = ""b;
	bk_ss_$control_ptr -> backup_control.maximum_dir_access_class = ""b;
	bk_ss_$control_ptr -> backup_control.user_for_access_check.id = "";
	bk_ss_$control_ptr -> backup_control.user_for_access_check.authorization = ""b;
	bk_ss_$control_ptr -> backup_control.user_for_access_check.ring = 0;
	bk_ss_$control_ptr -> backup_control.minimum_ring = 0;
	bk_ss_$control_ptr -> backup_control.aim_translations.source_attributes_ptr = null ();
	bk_ss_$control_ptr -> backup_control.aim_translations.target_attributes_ptr = null ();
						/* and give everything else reasonable default values */

	if v1_backup_control.backup_control_version = 1 then do;
	     bk_ss_$control_ptr -> backup_control.header = v1_backup_control.header, by name;
	     do idx = 1 to bk_ss_$control_ptr -> backup_control.request_count;
		string (bk_ss_$control_ptr -> backup_control.requests (idx).switches) = ""b;
		bk_ss_$control_ptr -> backup_control.requests (idx) = v1_backup_control.requests (idx), by name;
	     end;
	end;

	if v2_backup_control.backup_control_version = 2 then do;
	     bk_ss_$control_ptr -> backup_control.header = v2_backup_control.header, by name;
	     do idx = 1 to bk_ss_$control_ptr -> backup_control.request_count;
		string (bk_ss_$control_ptr -> backup_control.requests (idx).switches) = ""b;
		bk_ss_$control_ptr -> backup_control.requests (idx) = v2_backup_control.requests (idx), by name;
	     end;
	end;

	if v3_backup_control.backup_control_version = 3 then do;
	     bk_ss_$control_ptr -> backup_control.header = v3_backup_control.header, by name;
	     do idx = 1 to bk_ss_$control_ptr -> backup_control.request_count;
		string (bk_ss_$control_ptr -> backup_control.requests (idx).switches) = ""b;
		bk_ss_$control_ptr -> backup_control.requests (idx) = v3_backup_control.requests (idx), by name;
	     end;
	end;

	if v4_backup_control.backup_control_version = BACKUP_CONTROL_VERSION_4 then do;
	     bk_ss_$control_ptr -> backup_control.header = v4_backup_control.header, by name;
	     do idx = 1 to bk_ss_$control_ptr -> backup_control.request_count;
		string (bk_ss_$control_ptr -> backup_control.requests (idx).switches) = ""b;
		bk_ss_$control_ptr -> backup_control.requests (idx) = v4_backup_control.requests (idx), by name;
	     end;
	end;

RETURN_FROM_INITIATE:
	return;
%page;
/* Destroys the internal control structure (if any) but first copies the results into the caller's structure */

terminate:
     entry (P_backup_control_ptr);

	if P_backup_control_ptr = bk_ss_$control_ptr then /* nothing to do: caller supplied proper version */
	     return;

	backup_control_ptr = P_backup_control_ptr;

	system_area_ptr = get_system_free_area_ ();

	if v1_backup_control.backup_control_version = 1 then do;
	     do idx = 1 to bk_ss_$control_ptr -> backup_control.request_count;
		v1_backup_control.requests (idx).found = bk_ss_$control_ptr -> backup_control.requests (idx).found;
		v1_backup_control.requests (idx).loaded = bk_ss_$control_ptr -> backup_control.requests (idx).loaded;
		v1_backup_control.requests (idx).status_code =
		     bk_ss_$control_ptr -> backup_control.requests (idx).status_code;
		v1_backup_control.requests (idx).error_name =
		     bk_ss_$control_ptr -> backup_control.requests (idx).error_name;
	     end;
	end;

	if v2_backup_control.backup_control_version = 2 then do;
	     do idx = 1 to bk_ss_$control_ptr -> backup_control.request_count;
		v2_backup_control.requests (idx).found = bk_ss_$control_ptr -> backup_control.requests (idx).found;
		v2_backup_control.requests (idx).loaded = bk_ss_$control_ptr -> backup_control.requests (idx).loaded;
		v2_backup_control.requests (idx).status_code =
		     bk_ss_$control_ptr -> backup_control.requests (idx).status_code;
		v2_backup_control.requests (idx).error_name =
		     bk_ss_$control_ptr -> backup_control.requests (idx).error_name;
	     end;
	end;

	if v3_backup_control.backup_control_version = 3 then do;
	     do idx = 1 to bk_ss_$control_ptr -> backup_control.request_count;
		v3_backup_control.requests (idx).found = bk_ss_$control_ptr -> backup_control.requests (idx).found;
		v3_backup_control.requests (idx).loaded = bk_ss_$control_ptr -> backup_control.requests (idx).loaded;
		v3_backup_control.requests (idx).status_code =
		     bk_ss_$control_ptr -> backup_control.requests (idx).status_code;
		v3_backup_control.requests (idx).error_name =
		     bk_ss_$control_ptr -> backup_control.requests (idx).error_name;
	     end;
	end;

	if v4_backup_control.backup_control_version = BACKUP_CONTROL_VERSION_4 then do;
	     do idx = 1 to bk_ss_$control_ptr -> backup_control.request_count;
		v4_backup_control.requests (idx).found = bk_ss_$control_ptr -> backup_control.requests (idx).found;
		v4_backup_control.requests (idx).loaded = bk_ss_$control_ptr -> backup_control.requests (idx).loaded;
		v4_backup_control.requests (idx).status_code =
		     bk_ss_$control_ptr -> backup_control.requests (idx).status_code;
		v4_backup_control.requests (idx).error_name =
		     bk_ss_$control_ptr -> backup_control.requests (idx).error_name;
	     end;
	end;

	free bk_ss_$control_ptr -> backup_control in (system_area);
	bk_ss_$control_ptr = null ();			/* all gone */

	return;
%page;
%include backup_control;
%page;
%include bk_ss_;

     end backup_control_mgr_;
