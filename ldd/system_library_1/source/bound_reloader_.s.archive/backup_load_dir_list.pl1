/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* Creates entries for the hierarhcy reloader/retriever and also processes the "directory_list" record */

/* Modified: 17 June 1970 by R. H. Campbell */
/* Modified: 16 November 1972 by M. A. Meer */
/* Modified: 20 December 1972 by A. Downing to make calls to old area package */
/* Modified: 21 October 1974 by A. Kobziar to add access_class arg to $build_tree */
/* Modified: 21 July 1975 by R. Bratt to fix bug in setting code and to remove pre 18-0 stuff */
/* Modified: Fall 1975 by R. E. Mullen for interim NSS reloader */
/* Modified: Winter 1976 by R. E. Mullen to speed up reloading for NSS by calling list_dir_fast */
/* Modified: February 1976 by T. VanVleck to remove change made by A. Kobziar to move quota on retrievals */
/* Modified: April 1976 by R. Bratt to reload sons_lvid and to expunge dir quota reloading krock */
/* Modified: 9 November 1977 by Steve Herbst */
/* Modified: 21 January 1982 by S. Herbst to not cross-retrieve a segment in place of an existing directory */
/* Modified: July 1982 by G. Palter to add features for IMFT support of AIM: enforce a minimum ring for all created
   branches, restore the access class of the branch even if in debug mode, and translate access classes between systems */
/* Fixed to use default rb's of 7,7 for dirs, 5,5,5 for segs 01/03/83 S. Herbst */
/* Modified to set dir_quota when appending on 12/84 by Keith Loepere. */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


backup_load_dir_list:
     procedure (hp1, code2) options (rename ((area_, old_area_), (alloc_, old_alloc_), (freen_, old_freen_)));

dcl  hp1 ptr,					/* Pointer to preamble header structure. */
     code2 fixed bin (35);				/* Returned error code. */

dcl  dname char (168) aligned,			/* Directory path name. */
     ename char (32) aligned,				/* entry name */
     pname char (*) aligned,				/* Link path name if link. */
     (code3, saved_code) fixed bin (35),		/* Error code */
     bit_count fixed bin (24),			/* segment bit count */
     optionsw fixed bin (2);				/* Entry option switch. */

dcl  dtp fixed bin (52);				/* Times. */

dcl  access_class bit (72) aligned;
dcl  (access_class_octal, tape_access_class_octal) character (32) aligned;
dcl  (access_class_text, tape_access_class_text) character (256);

dcl  (
     hp,						/* Pointer to preamble header. */
     pp,						/* Pointer to link path name. */
     dqip,					/* Pointer to dirquota info */
     nip,						/* pointer to nss_info */
     sys_bp,
     tape_bp,					/* Pointers to branch info arrays. */
     sys_lp,
     tape_lp,					/* Pointers to link info arrays. */
     sys_links,
     tape_links,					/* Pointers to chained link names. */
     sys_dirs,
     tape_dirs,					/* Pointers to chained directory names. */
     sys_segs,
     tape_segs,					/* Pointers to chained segment names. */
     tape_ix,
     tape_np
     ) ptr;					/* Pointers to current link info, name array. */

dcl  (
     sys_bc,
     tape_bc,					/* Number of branches in directory. */
     sys_lc,
     tape_lc,					/* Number of links in directory. */
     sys_segs_names,
     tape_segs_names,				/* Number of segments in array. */
     sys_dirs_names,
     tape_dirs_names,				/* Number of directories in array. */
     sys_links_names,
     tape_links_names,				/* Number of links in array. */
     tape_i,					/* Index into link array for reload. */
     rtype,					/* Type of record for rebuild */
     j
     ) fixed bin;

dcl  code fixed bin (35);

dcl  listp ptr static initial (null),			/* Pointer to area for list_dir. */
     list_area (65536) based (listp);			/* Area for list_dir. */

dcl  blank_time fixed bin (52) static options (constant) initial (-1);

%include bk_ss_;
%include bk_nss_info;

dcl  (
     error_table_$noaccess,
     error_table_$namedup,
     error_table_$badpath,
     error_table_$root,
     error_table_$no_dir,
     error_table_$no_info,
     error_table_$incorrect_access,
     error_table_$ai_restricted
     ) fixed bin (35) ext;

dcl  sys_info$access_class_ceiling ext static bit (72) aligned;

dcl  name1_np based bit (18) aligned,			/* Overlay to chain entry names. */
     chars (0:8) fixed bin based;			/* Overlay for comparison of names. */

dcl  attempt fixed binary init (0);			/* Counter to prevent loops. */

dcl  rings (3) static fixed binary (6);			/* Ring bracket array. */

dcl  ETYPE_SEG fixed bin static options (constant) init (0);
dcl  ETYPE_LINK fixed bin static options (constant) init (1);
dcl  ETYPE_DIR fixed bin static options (constant) init (2);
dcl  ETYPE_PARENT_DIR fixed bin static options (constant) init (3);
dcl  ETYPE_UPGRADED_SEG fixed bin static options (constant) init (4);
dcl  ETYPE_UPGRADED_DIR fixed bin static options (constant) init (5);

dcl  routine (0:5) static options (constant) char (34) aligned
	initial ("append_seg", "append_link", "append_dir", "append_par_dir", "append_sp_seg", "append_up_dir");

dcl  creating_directory static options (constant) character (19) initial ("Creating directory:");

dcl  current_user char (32) aligned;
dcl  current_ring fixed bin;

dcl  old_area_ entry (fixed bin, ptr);			/* call old_area_ instead of area_ */

dcl  backup_load_dir_list$build_tree
	entry (char (168) aligned, char (32) aligned, fixed bin, fixed bin (24), fixed bin (2), char (*) aligned,
	bit (72) aligned, fixed bin (35)),
     backup_map_$detail_line2
	entry (char (32) aligned, fixed bin (9), char (20) aligned, fixed bin (52), fixed bin (52), fixed bin (52),
	fixed bin (52), fixed bin (52)),
     backup_map_$directory_line entry (ptr, fixed bin),
     backup_map_$error_line entry () options (variable),
     backup_map_$fs_error_line entry (fixed bin (35), char (*) aligned, char (*) aligned, char (*) aligned),
     backup_util$add_names entry (char (168) aligned, char (32) aligned, ptr, fixed bin, fixed bin (1)),
     (
     backup_util$delete_name,
     backup_util$give_access
     ) entry (char (168) aligned, char (32) aligned, fixed bin (35));

dcl  cu_$level_get returns (fixed bin (6)),
     get_group_id_ ext entry returns (char (32) aligned),
     expand_pathname_ entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (35)),
     convert_authorization_$to_string_short entry (bit (72) aligned, char (*), fixed bin (35)),
     convert_aim_attributes_ entry (bit (72) aligned, char (32) aligned),
     aim_check_$equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned),
     hcs_$append_branchx
	entry (char (*) aligned, char (*) aligned, fixed bin (5), (3) fixed bin (6), char (*) aligned, fixed bin (1),
	fixed bin (2), fixed bin (24), fixed bin (35)),
     hcs_$create_branch_ entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35)),
     hcs_$quota_move entry (char (*) aligned, char (*) aligned, fixed bin, fixed bin (35)),
     hcs_$append_link entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (35)),
     hcs_$list_dir entry (char (*) aligned, (*) fixed bin, ptr, fixed bin, ptr, fixed bin, fixed bin (35)),
     hcs_$list_dir_fast entry (char (*) aligned, (*) fixed bin, ptr, fixed bin, ptr, fixed bin, fixed bin (35)),
     hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
     hphcs_$set_backup_times
	entry (char (*) aligned, char (*) aligned, 1, 2 fixed bin (52), 2 fixed bin (52), 2 fixed bin (52),
	2 fixed bin (52), fixed bin (35)),
     hcs_$status_ entry (char (*) aligned, char (*) aligned, fixed bin (1), ptr, ptr, fixed bin (35)),
     hcs_$status_minf
	entry (char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)),
     hcs_$get_access_class entry (char (*) aligned, char (*) aligned, bit (72) aligned, fixed bin (35)),
     hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));

dcl  hphcs_$quota_reload
	entry (char (*) aligned, fixed bin, fixed bin (35), fixed bin (35), fixed bin, fixed bin (1), fixed bin (35)),
     hphcs_$dir_quota_restor
	entry (char (*) aligned, fixed bin, fixed bin (71), bit (36) aligned, fixed bin, fixed bin (1), fixed bin (35)),
     hphcs_$set_auth external entry (char (*) aligned, char (*) aligned, fixed bin, char (*) aligned, fixed bin (35)),
     hphcs_$set_sons_lvid entry (char (*) aligned, char (*) aligned, bit (36) aligned, fixed bin (35)),
     mdc_$find_lvname entry (bit (36) aligned, char (*), fixed bin (35)),
     ioa_$rsnnl entry options (variable),
     pathname_ entry (char (*), char (*)) returns (char (168)),
     system_privilege_$aim_check_soos external entry (char (*) aligned, char (*) aligned, fixed bin (35));


dcl  (addr, bit, char, divide, fixed, length, max, null, pointer, ptr, rel, rtrim, substr, unspec) builtin;

%include backup_record_types;
%include backup_dir_list;
%include backup_fs_times;
%include backup_preamble_header;

/**/
/* ENTRY to backup_load_dir_list      it begins here */

	code2 = 0;
	hp = hp1;					/* Copy pointer to preamble header. */
	current_user = get_group_id_ ();
	current_ring = cu_$level_get ();

	rtype = hp -> h.record_type;
	if rtype = ETYPE_DIR | rtype = ETYPE_PARENT_DIR | rtype = ETYPE_UPGRADED_DIR then
	     rings (1), rings (2), rings (3) = 7;	/* default for directories */
	else rings (1), rings (2), rings (3) = 5;	/* default for segments */

	dtp = hp -> h.dtd;				/* Copy time dumped from header. */
	tape_bp = pointer (hp, hp -> h.bp);		/* Make pointer to branch array. */
	tape_bc = hp -> h.bc;			/* Copy branch count from header. */
	tape_lp = pointer (hp, hp -> h.lp);		/* Make pointer to link array. */

	tape_lc = hp -> h.lc;			/* Copy link count from header. */

	if bk_ss_$trimsw then do;			/* Are we to prune excess entry names? */
	     if listp = null then do;			/* Have we been had before? */
		call hcs_$make_seg ("", "reload_area", "", 01011b, listp, code);
						/* Get segment for area. */
		if listp = null then do;		/* Successful? */
		     code2 = code;			/* Return error code. */
		     go to check_ac_class;		/* Skip to check parent section. */
		end;
	     end;
	     call old_area_ (65536, listp);		/* Clear area and get contents of system directory. */
	     call hcs_$list_dir_fast (hp -> h.dname, listp -> list_area, sys_bp, sys_bc, sys_lp, sys_lc, code);
	     if code = 0 then do;			/* Was call successful? */
		if sys_lc > 0 then do;		/* Are there any links in the system? */
		     call chain_links (sys_lp, sys_lc, sys_links, sys_links_names, 0);
						/* Chain all their names together. */
		     call chain_links (tape_lp, tape_lc, tape_links, tape_links_names, 1);
						/* Chain the names from the tape. */
		     call prune (sys_links, sys_links_names, tape_links, tape_links_names);
						/* Compare them and remove excess. */
		end;
		if sys_bc > 0 then do;		/* Are there any branches in the system? */
		     call chain_branches (sys_bp, sys_bc, sys_dirs, sys_dirs_names, sys_segs, sys_segs_names, 0);
						/* Chain names into two lists. */
		     call chain_branches (tape_bp, tape_bc, tape_dirs, tape_dirs_names, tape_segs, tape_segs_names, 1)
			;			/* Chain names from tape. */
		     if sys_dirs ^= null then
			if bk_ss_$dir_trim then	/* Are there any directory names on line */
			     call prune (sys_dirs, sys_dirs_names, tape_dirs, tape_dirs_names);
		     if sys_segs ^= null then		/* Are there any segments in the system? */
			call prune (sys_segs, sys_segs_names, tape_segs, tape_segs_names);
						/* Yes, examine and prune them. */
		end;
	     end;
	     else if code ^= error_table_$no_dir then	/* Gripe if unsuccessful (no access: no directory). */
		call backup_map_$fs_error_line (code, "hcs_$list_dir_fast", hp -> h.dname, "");
	     code2 = code;				/* Save error code. */
	     call hcs_$truncate_seg (listp, 0, code);	/* Free up pages of segment. */
	end;

/**/

check_ac_class:					/* See if should do the work */
	if (hp -> h.access_class & (^sys_info$access_class_ceiling)) ^= "0"b then do;
	     hp -> h.access_class, hp -> h.multiple_class = "0"b;
						/* old values */
	end;
	rtype = ETYPE_DIR;				/* assume regular directory */
	if hp -> h.record_type = ndc_directory_list then
	     if hp -> h.multiple_class then rtype = ETYPE_UPGRADED_DIR;
						/* an upgraded directory */
	call hcs_$get_access_class (hp -> h.dname, "", access_class, code);
	if code ^= 0 then do;			/* try creating parent(s) */
	     if hp -> h.record_type = ndc_directory_list then
		access_class = hp -> h.access_class;
	     else access_class = "0"b;
	     call backup_load_dir_list$build_tree (hp -> h.dname, "", rtype, 0, 0, "", access_class, code);
	     if code ^= 0 then do;			/* print error and give up */
		call backup_map_$fs_error_line (code, "backup_load_dir_list$build_tree", hp -> h.dname, "");
		code2 = code;			/* return code */
		go to bldl_ret;
	     end;
	end;
	else if (current_ring <= 1) | bk_ss_$restore_access_class then do;
						/* insure that online branch has the same access class */
	     if hp -> h.record_type = ndc_directory_list then do;
		if ^aim_check_$equal (hp -> h.access_class, access_class) then do;
		     call convert_authorization_$to_string_short (access_class, access_class_text, code);
		     if code ^= 0 then do;
			call convert_aim_attributes_ (access_class, access_class_octal);
			access_class_text = access_class_octal;
		     end;
		     call convert_authorization_$to_string_short (bk_ss_$hp -> h.access_class, tape_access_class_text,
			code);
		     if code ^= 0 then do;
			call convert_aim_attributes_ (bk_ss_$hp -> h.access_class, tape_access_class_octal);
			tape_access_class_text = tape_access_class_octal;
		     end;
		     call backup_map_$error_line (error_table_$ai_restricted, bk_ss_$myname,
			"Access class of branch ^a online (^[^a^;^ssystem_low^]) is not equal to access class on (^[^a^;^ssystem_low^])."
			, hp -> h.dname, (access_class_text ^= ""), access_class_text,
			(tape_access_class_text ^= ""), tape_access_class_text);
		     code2 = error_table_$ai_restricted;
		     go to bldl_ret;		/* can't do this */
		end;
		else go to reload_links;		/* great match! */
	     end;					/* use the access class in the parent */
	end;

/**/

reload_links:
	do tape_i = 1 to tape_lc;			/* Reload each link. */
	     tape_ix = addr (tape_lp -> lk (tape_i));	/* Get pointer to this element. */
	     tape_np = pointer (tape_lp, tape_ix -> lk (1).namerp);
						/* Get first name. */
	     pp = pointer (tape_lp, tape_ix -> lk (1).pathnamerp);
						/* Get path name. */
	     call backup_load_dir_list$build_tree (hp -> h.dname, tape_np -> name (1).string, ETYPE_LINK, 0, 0,
		substr (pp -> path.name, 1, fixed (path.size, 17)), access_class, code);
	     if code ^= 0 then do;			/* If unsuccessful, print error comment. */
		call backup_map_$fs_error_line (code, "backup_load_dir_list$build_tree", hp -> h.dname,
		     tape_np -> name (1).string);
		go to next_link;			/* Go get next link. */
	     end;

	     call backup_util$add_names (hp -> h.dname, tape_np -> name (1).string, tape_np,
		fixed (tape_ix -> lk (1).nnames, 17), 0);
						/* if no_reload will simply print names in the map */

	     if ^bk_ss_$no_reload then do;
		times.dtem = fixed (tape_ix -> lk (1).dtm, 52);
						/* Copy time entry modified. */
		times.dtd = dtp;			/* Get new dump time. */
		if ^bk_ss_$debugsw then
		     call hphcs_$set_backup_times (hp -> h.dname, tape_np -> name (1).string, times, code);
		else code = 0;			/* don't try */
		if code ^= 0 then
		     call backup_map_$fs_error_line	/* If error reported, give comment. */
			(code, "hphcs_$set_backup_times", hp -> h.dname, tape_np -> name (1).string);
		if hp -> h.record_type = ndc_directory_list then
		     if ^(bk_ss_$debugsw) then do;
			call hphcs_$set_auth (hp -> h.dname, tape_np -> name (1).string, 0, pp -> path.author, code)
			     ;
			if code ^= 0 then
			     call backup_map_$fs_error_line (code, "hphcs_$set_auth", hp -> h.dname,
				tape_np -> name (1).string);
		     end;
	     end;

next_link:
	end;

	if ^bk_ss_$no_reload & ^bk_ss_$debugsw then do;
	     if (hp -> h.nss_info_relp ^= "0"b) & hp -> h.master_dir & ^bk_ss_$no_setlvid then do;
						/* must set sons lvid */
		nip = ptr (hp, hp -> h.nss_info_relp);
		call mdc_$find_lvname (nip -> bk_nss_info.lvid, (""), code);
		if code = 0 then call hphcs_$set_sons_lvid (hp -> h.dname, "", nip -> bk_nss_info.lvid, code);
		if code ^= 0 then call backup_map_$fs_error_line (code, "hphcs_$set_sons_lvid", hp -> h.dname, "");
	     end;
	     if bk_ss_$quotasw then do;		/* Are we to restor quotas? */
		call hphcs_$quota_reload (hp -> h.dname, hp -> h.quota,
						/* Reload secondary storage quotas. */
		     hp -> h.trp, hp -> h.tlu, hp -> h.inf_acct, hp -> h.term_acct, code);
		if code ^= 0 then call backup_map_$fs_error_line (code, "hphcs_$quota_reload", hp -> h.dname, "");
		if hp -> dq_info_relp ^= ""b then do;	/* if dirquota info is on tape */
		     dqip = ptr (hp, hp -> h.dq_info_relp);
						/* get ptr to dirquota info */
		     call hphcs_$dir_quota_restor (hp -> h.dname, dqip -> bk_dq_info.quota, dqip -> bk_dq_info.ltrp,
			dqip -> bk_dq_info.tlu, dqip -> bk_dq_info.inf_acct, dqip -> bk_dq_info.term_acct, code);
		end;
		if code ^= 0 then call backup_map_$fs_error_line (code, "hphcs_$dir_quota_restor", hp -> h.dname, "");
	     end;
	     else if hp -> h.quota ^= 0 then do;	/* -noquota was specified */
		call ioa_$rsnnl ("Created directory ^a, quota should be ^d but -noquota specified", access_class_text,
		     j, hp -> h.dname, hp -> h.quota);
		call backup_map_$directory_line (addr (access_class_text), j);
	     end;
	     if rtype = ETYPE_UPGRADED_DIR then do;	/* a upgraded directory, created oos, so turn off now */
		call system_privilege_$aim_check_soos (hp -> h.dname, "", code);
		if code ^= 0 then
		     call backup_map_$fs_error_line (code, "system_privilege_$aim_check_soos", hp -> h.dname, "");
	     end;
	end;

bldl_ret:
	return;					/* Return to caller. */


/**/
/* Make branch in heirarchy for reloader * * * * * * * * * * * * */


build_tree:
     entry (dname, ename, type, bit_count, optionsw, pname, class, code3);

dcl  blank char (1) init (""),			/* For blank line on map */
     dir character (168) aligned,			/* New directory path name. */
     entry character (32) aligned,			/* New entry name. */
     dirsw fixed binary (1),
     class bit (72) aligned,				/* access_class for append */
     sys_type fixed binary (2),			/* 0 = link, 1 = segment, 2 = directory. */
     type fixed bin,
     branch_ptr pointer;

dcl  1 status_info aligned,				/* structure filled by hcs_$status_ */
       (
       2 type bit (2),
       2 nnames bit (16),
       2 nrp bit (18),
       2 dtm bit (36),
       2 dtu bit (36),
       2 mode bit (5),
       2 pad bit (13),
       2 records bit (18)
       ) unal;

/* type : 0=seg, 1=link, 2=dir, 3=parent_dir, 4=upgraded_segment, 5=upgraded_directory */

%include create_branch_info;
dcl  1 branch_info like create_branch_info aligned;	/* need auto stor for the structure */
	current_user = get_group_id_ ();
	current_ring = cu_$level_get ();
	if type = ETYPE_DIR | type = ETYPE_PARENT_DIR | type = ETYPE_UPGRADED_DIR then
	     rings (1), rings (2), rings (3) = 7;	/* default for directories */
	else rings (1), rings (2), rings (3) = 5;	/* default for segments */

	dirsw = fixed ((type = ETYPE_DIR) | (type = ETYPE_UPGRADED_DIR), 1);
						/* get dirsw into bin (1) format */
	if type = ETYPE_PARENT_DIR then go to no_access;	/* Is only superior directory wanted? */

retry:
	attempt = attempt + 1;			/* Count this call to append. */

	if bk_ss_$no_reload then do;			/* If debuging on line, skip below */

	     code3 = 0;				/* Zero out code before returning */
	     go to bt_ret;
	end;

	if attempt > 3 then go to failed;		/* Too many (noaccess, namedup, success)? */
	if type ^= ETYPE_LINK then do;		/* Try to append in specified directory */
	     if (current_ring > 1) & ^bk_ss_$restore_access_class then do;
		if bk_ss_$enforce_minimum_ring then do;
		     rings (1) = max (bk_ss_$minimum_ring, rings (1));
		     rings (2) = max (bk_ss_$minimum_ring, rings (2));
		     rings (3) = max (bk_ss_$minimum_ring, rings (3));
		end;
		call hcs_$append_branchx (dname, ename, 01111b, rings, current_user, dirsw, optionsw, bit_count,
		     code3);
	     end;
	     else do;
		unspec (branch_info) = "0"b;
		branch_info.version = create_branch_version_2;
		branch_info.mode = "111"b;
		if type = ETYPE_SEG | type = ETYPE_UPGRADED_SEG then do;
						/* segment */
		     if bk_ss_$hp = null then go to default_rb;
		     branch_ptr = ptr (bk_ss_$hp, bk_ss_$hp -> h.bp);
		     if branch_ptr -> br (1).rb1 = "0"b then go to default_rb;
		     branch_info.rings (1) = fixed (branch_ptr -> br (1).rb1, 6);
		     branch_info.rings (2) = fixed (branch_ptr -> br (1).rb2, 6);
		     branch_info.rings (3) = fixed (branch_ptr -> br (1).rb3, 6);
		end;
		else do;
default_rb:
		     branch_info.rings (1) = rings (1);
		     branch_info.rings (2) = rings (2);
		     branch_info.rings (3) = rings (3);
		end;
		if bk_ss_$enforce_minimum_ring then do;
		     branch_info.rings (1) = max (bk_ss_$minimum_ring, branch_info.rings (1));
		     branch_info.rings (2) = max (bk_ss_$minimum_ring, branch_info.rings (2));
		     branch_info.rings (3) = max (bk_ss_$minimum_ring, branch_info.rings (3));
		end;
		branch_info.userid = current_user;
		branch_info.switches.dir_sw = bit (dirsw, 1);
		branch_info.switches.copy_sw = substr (bit (optionsw, 2), 1, 1);
		branch_info.switches.chase_sw = "0"b;	/* don't chase links */
		if (type = ETYPE_UPGRADED_SEG) | (type = ETYPE_UPGRADED_DIR) then
						/* set for upgraded creation */
		     branch_info.switches.priv_upgrade_sw = "1"b;
		else branch_info.switches.priv_upgrade_sw = "0"b;
		branch_info.quota = 0;
		branch_info.dir_quota = 0;
		branch_info.bitcnt = bit_count;
		branch_info.access_class = class;
		call hcs_$create_branch_ (dname, ename, addr (branch_info), code3);
		if code3 ^= 0 then
		     if code3 = error_table_$ai_restricted then do;
			call convert_authorization_$to_string_short (class, access_class_text, code);
			if code ^= 0 then do;
			     call convert_aim_attributes_ (class, access_class_octal);
			     access_class_text = access_class_octal;
			end;
			call backup_map_$error_line (code3, bk_ss_$myname,
			     "Can not create branch ^a with access class ^[^a^;^ssystem_low^].",
			     pathname_ ((dname), (ename)), (access_class_text ^= ""), access_class_text);
			go to bt_ret;
		     end;
	     end;
	end;
	else call hcs_$append_link (dname, ename, pname, code3);
						/* No, it's a link, try to append it. */

	if code3 = error_table_$no_dir then do;
no_access:
	     if char (dname, 4) = ">   " then do;	/* Is it the root directory? */
		code3 = error_table_$root;		/* Set error code3. */
		go to bt_ret;			/* Give up. */
	     end;
	     call expand_pathname_ (dname, dir, entry, code);
						/* Separate last entry from path */
	     if code ^= 0 then do;			/* OK? */
		call backup_map_$fs_error_line (code, "expand_pathname_", dname, ename);
						/* Gripe. */
		go to bt_ret;			/* Give up. */
	     end;
	     if type ^= ETYPE_PARENT_DIR then
		if bk_ss_$mapsw then do;		/* Is request to create superior directory? */
		     call backup_map_$directory_line (addr (blank), 1);
						/* Skip a line. */
		     call backup_map_$directory_line (addr (creating_directory), length (creating_directory));
		     call backup_map_$directory_line (addr (dname), length (rtrim (dname)));
		end;
	     call backup_load_dir_list$build_tree (dir, entry, ETYPE_DIR, 0, 0, "", class, code3);
						/* Try creating directory */
	     if code3 = 0 then do;			/* Successful? */
		if type = ETYPE_PARENT_DIR then go to bt_ret;
						/* Do we have to create an entry? */
		code3 = error_table_$noaccess;	/* Set up error code3. */
		go to retry;			/* Retry creating original branch. */
	     end;
	     else if code3 = error_table_$root then code3 = error_table_$badpath;
	end;

	else if code3 = error_table_$namedup then do;	/* Did name already exist in directory? */
	     saved_code = code3;
	     if (type = ETYPE_DIR) | (type = ETYPE_UPGRADED_DIR) then do;
						/* Were we trying to create directory? */
		call hcs_$status_ (dname, ename, 0, addr (status_info), null (), code3);
						/* Don't chase links. */
		sys_type = fixed (status_info.type);
		if code3 ^= 0 then			/* Was call successful? */
		     if code3 = error_table_$no_info | code3 = error_table_$incorrect_access then do;
give_acc:						/* If no access, then recurse to get it. */
			call backup_util$give_access (dname, ename, code3);
			if code3 = 0 then
			     go to retry;		/* Recurse to give ourselves access. */
			else do;
			     code3 = saved_code;
			     go to bt_ret;
			end;
		     end;
		     else do;
			code3 = saved_code;
			go to bt_ret;		/* Don't muddle about, it may be a directory. */
		     end;
		if sys_type = ETYPE_DIR then		/* If name conflict, then dir already created. */
		     if (status_info.mode & "01011"b) ^= "01011"b then
			go to give_acc;		/* If no access, then recurse to get it. */
		     else go to bt_ret;		/* Directory is there. */
	     end;
	     if bk_ss_$retrievesw & bk_ss_$cross_retrievesw & ^bk_ss_$allow_dir_overwrite then do;
		call hcs_$status_minf (dname, ename, 1, sys_type, 0, 0);
		if sys_type = ETYPE_DIR then do;
		     call backup_map_$fs_error_line (code3,
			rtrim (bk_ss_$myname) || ": Attempt to cross-retrieve a segment in place of a directory or
	link to a directory.", dname, ename);
		     go to bt_ret;
		end;
	     end;
	     if ^bk_ss_$no_reload then		/* really loading something */
		call backup_util$delete_name (dname, ename, code3);
						/* Not a directory, try to remove name. */
	     else code3 = 0;			/* Don't create errors if not reloading. */
	     if code3 = 0 then do;			/* Was name removed successfully? */
		code3 = error_table_$namedup;		/* Set up error code3 */
		go to retry;			/* Try append again. */
	     end;
	end;

	else if code3 = error_table_$no_info | code3 = error_table_$incorrect_access then do;
	     saved_code = code3;
	     call backup_load_dir_list$build_tree (dname, "", ETYPE_PARENT_DIR, 0, 0, "", class, code3);
	     if code3 = 0 then
		go to retry;			/* Recurse to get access to parent. */
	     else code3 = saved_code;			/* end of recursion */
	end;

	else if code3 ^= 0 then			/* Was, perchance, all OK? */
failed:
	     call backup_map_$fs_error_line (code3, routine (type), dname, ename);

bt_ret:
	return;

/**/
chain_branches:
     procedure (abp, bc, dir_root, dir_root_count, seg_root, seg_root_count, sys_tape_sw);
						/* proc to chain two branch lists */

dcl  (abp, bp, dir_root, seg_root, prev_dir, prev_seg, ix, np, jx) pointer;

dcl  (bc, i, j, dir_root_count, seg_root_count, sys_tape_sw, sw, ic, dc, sc) fixed binary;

	bp = abp;					/* Copy pointer to branch array. */
	dc, sc = 0;				/* Initialize directory, segment counts. */
	if sys_tape_sw = 0 then
	     sw = bc + 1;				/* names from system */
	else sw = 0;				/* names from tape */
	prev_dir, prev_seg = null;			/* Indicate no previous names. */
	do i = 1 to bc;				/* Scan all branches. */
	     if sw = 0 then
		ic = i;				/* link foward if from tape */
	     else ic = sw - i;			/* link backward if in system */
	     ix = addr (bp -> br (ic));		/* Get pointer to this entry. */
	     np = pointer (ix, ix -> br (1).namerp);	/* Get pointer to name array. */
	     if ix -> br (1).dirsw then		/* Is this a directory? */
		do j = 1 to fixed (ix -> br (1).nnames, 17);
						/* Yes, scan all its names. */
		jx = addr (np -> name (j));		/* Get pointer to this name. */
		if prev_dir = null then
		     dir_root = jx;			/* Were there any previous names? */
		else prev_dir -> name1_np = rel (jx);	/* Yes, point previous name to this. */
		prev_dir = jx;			/* Save this pointer for next time. */
		dc = dc + 1;			/* Count one directory name. */
	     end;
	     else do j = 1 to fixed (ix -> br (1).nnames, 17);
						/* No, scan all its names. */
		jx = addr (np -> name (j));		/* Get pointer to this name. */
		if prev_seg = null then
		     seg_root = jx;			/* Were there any previous names? */
		else prev_seg -> name1_np = rel (jx);	/* Yes, chain previous name to this one. */
		prev_seg = jx;			/* Save this pointer for next time. */
		sc = sc + 1;			/* Count one segment name. */
	     end;
	end;
	if prev_dir = null then
	     dir_root = null;			/* Were there any directory names? */
	else prev_dir -> name1_np = ""b;		/* Yes, clear pointer in last name. */
	if prev_seg = null then
	     seg_root = null;			/* Were there any segment names? */
	else prev_seg -> name1_np = ""b;		/* Yes, clear pointer in last name. */
	dir_root_count = dc;			/* Return count of directory names. */
	seg_root_count = sc;			/* Return count of segment names. */

     end chain_branches;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


chain_links:
     procedure (alp, lc, root, root_count, sys_tape_sw);	/* Proc to chain one link list */

dcl  (alp, lp, root, previous, ix, np, jx) pointer;

dcl  (i, j, lc, root_count, sys_tape_sw, sw, ic, rc) fixed bin;

	lp = alp;					/* Copy pointer to link array. */
	rc = 0;					/* Initialize count of number of names. */
	if sys_tape_sw = 0 then
	     sw = lc + 1;				/* names from system */
	else sw = 0;				/* names from tape */
	previous = null;				/* Indicate no previous name. */
	do i = 1 to lc;				/* Scan all links. */
	     if sw = 0 then
		ic = i;				/* names from tape thread foward */
	     else ic = sw - i;			/* names in system thread backward */
	     ix = addr (lp -> lk (ic));		/* Get pointer to this entry. */
	     np = pointer (ix, ix -> lk (1).namerp);	/* Extract pointer to its name array. */
	     do j = 1 to fixed (ix -> lk (1).nnames, 17); /* Scan each name. */
		jx = addr (np -> name (j));		/* Get pointer to this name. */
		if previous = null then
		     root = jx;			/* Any prevoius name? */
		else previous -> name1_np = rel (jx);	/* Yes, chain it to this one. */
		previous = jx;			/* Save this name for next time. */
		rc = rc + 1;			/* Count one name. */
	     end;
	end;
	if previous = null then
	     root = null;				/* Were there any names? */
	else previous -> name1_np = ""b;		/* Yes, clear final pointer. */
	root_count = rc;				/* Return count of number of names. */

     end chain_links;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


prune:
     procedure (sys_root, sys_count, tape_root, tape_count);/* Procedure to prune excess entry names. */

dcl  (
     sys_root,
     tape_root,					/* Pointers to the name lists. */
     sys_np,
     tape_np
     ) pointer;					/* Pointers to current names. */

dcl  (k, sys_count, tape_count) fixed bin;
dcl  code fixed bin (35);

	if sys_root ^= null then do;			/* If there are system names, */
	     if tape_root = null then do;		/* If there are names on the tape, */
		sys_np = sys_root;			/* Copy pointer to system names. */
		tape_np = pointer (tape_root, ""b);	/* Fix pointer for end-of-names condition. */
		go to force_delete;			/* Start removal of all names in system. */
	     end;
	     call sort_name_list (sys_root, sys_count);	/* We must sort both lists. */
	     call sort_name_list (tape_root, tape_count); /* .. */
	     sys_np = sys_root;			/* Copy pointer to system names. */
	     tape_np = tape_root;			/* Copy pointer to names from tape. */
compare:
	     do while (rel (sys_np));			/* Examine all system names. */
		if rel (tape_np) then
		     do k = 1 to 8;			/* Have we finished all tape names? */
		     if sys_np -> chars (k) < tape_np -> chars (k) then do;
						/* If true, name in system not on tape */
force_delete:
			if bk_ss_$no_reload then
			     code = 0;		/* Not really reloading */
			else call backup_util$delete_name (hp -> h.dname, sys_np -> name (1).string, code);
			if code ^= 0 then
			     call backup_map_$fs_error_line
						/* If unsuccessful, error comment. */
				(code, "backup_util$delete_name", hp -> h.dname, sys_np -> name (1).string);
			else if bk_ss_$mapsw then	/* If all OK, write map_ if enabled. */
			     call backup_map_$detail_line2 (sys_np -> name (1).string, -1, "deleted", dtp,
				blank_time, -1, blank_time, blank_time);
			sys_np = pointer (sys_np, sys_np -> name1_np);
						/* Walk to next system name. */
			go to compare;		/* Go check for termination condition. */
		     end;
		     if sys_np -> chars (k) > tape_np -> chars (k) then do;
						/* Name on tape not in system. */
			tape_np = pointer (tape_np, tape_np -> name1_np);
						/* Walk to next tape name. */
			go to compare;		/* Go check terminating condition. */
		     end;
		end;				/* No more names on tape, */
		else go to force_delete;		/* Force deletion of remaining system names. */
						/* Name in system matches name on tape; leave it. */
		sys_np = pointer (sys_np, sys_np -> name1_np);
						/* Walk to next name in system. */
		tape_np = pointer (tape_np, tape_np -> name1_np);
						/* Walk to next name on tape. */
	     end;
	end;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


sort_name_list:
	procedure (root, count);			/* Procedure to sort chained name list. */

dcl  root ptr,
     (count, i, j, k, l, m, n, q, xi, xj, xk, xl, xq) fixed bin,
     (
     vxi,
     vxj,
     vxk,
     vxq,
     v (count),
     np
     ) ptr,
     Cut fixed bin int static init (12),
     x (count) fixed bin,
     stacki (18) fixed bin,
     stackj (18) fixed bin;


dcl  1 name_structure based aligned,
       2 relnp bit (18) aligned,			/* relative pointer to next name */
       2 name_string char (32) aligned;			/* this is the name */


/* Set up arrays of pointers to names and indices of pointers */



	     if root = null then go to sort_ret;

	     np = root;				/* get pointer to first name structure */

	     if count = 1 then do;			/* Not much to do here */
		np -> relnp = ""b;
		go to sort_ret;			/* Return */
	     end;

	     do n = 1 to count;
		v (n) = np;
		x (n) = n;
		np = ptr (np, np -> name1_np);
	     end;


	     n = count;

	     if n <= 15 then do;			/* Do a fast shell sort for few names */

		i = n;				/* Initialize interval for shell sort */
		do;
down:
		     i = 2 * divide (i, 4, 17, 0) + 1;	/* Set the interval size for the sort */
		     do j = 1 to n - i;		/* In steps of i so don't overshoot array */
			k = j + i;		/* Next higher index */
			xk = x (k);		/* Index from index array */
			vxk = v (xk);		/* Pointer for name comparison */
up:
			l = k - i;		/* Lower index (will change inside the loop) */
			xl = x (l);		/* Lower index from index array */
			if v (xl) -> name_string <= vxk -> name_string then go to in_order;
			x (k) = xl;		/* Out of order so swap in index array */
			k = l;			/* Check next lower element in steps of size i */
			if k > i then go to up;	/* If there is a lower element then try it */
in_order:
			x (k) = xk;		/* Put highest index away */
		     end;

		     if i > 1 then go to down;	/* Try next smaller interval size */

		     go to thread;			/* Now thread the names */

		end;

	     end;


	     i, m = 1;
	     j = n;

/* Now sort */

/* Start by getting and ordering first middle and last elements in current list */
/* Arrange indices accordingly since only they get sorted and set test value to middle value */

sloop:
	     k = i;
	     l = j;
	     q = divide (i + j, 2, 17, 0);

	     xi = x (i);
	     xj = x (j);
	     xq = x (q);

	     vxi = v (xi);
	     vxj = v (xj);
	     vxq = v (xq);



	     if vxq -> name_string < vxi -> name_string then
		if vxj -> name_string < vxi -> name_string then
		     if vxq -> name_string < vxj -> name_string then do;
			x (i) = xq;
			x (q) = xj;
			x (j) = xi;
			vxq = vxj;
		     end;

		     else do;
			x (i) = xj;
			x (j) = xi;
		     end;

		else do;
		     x (i) = xq;
		     x (q) = xi;
		     vxq = vxi;
		end;

	     else if vxj -> name_string < vxq -> name_string then
		if vxi -> name_string < vxj -> name_string then do;
		     x (q) = xj;
		     x (j) = xq;
		     vxq = vxj;
		end;

		else do;
		     x (q) = xi;
		     x (i) = xj;
		     x (j) = xq;
		     vxq = vxi;
		end;

/* Now order into lists above and below the test value  */

lloop:
	     l = l - 1;
	     xl = x (l);



	     if v (xl) -> name_string > vxq -> name_string then go to lloop;

kloop:
	     k = k + 1;
	     xk = x (k);



	     if v (xk) -> name_string < vxq -> name_string then go to kloop;



	     if k <= l then do;
		x (k) = xl;
		x (l) = xk;
		go to lloop;
	     end;



	     if l - i < j - k then do;
		stacki (m) = k;
		stackj (m) = j;
		j = l;
	     end;

	     else do;
		stacki (m) = i;
		stackj (m) = l;
		i = k;
	     end;

	     m = m + 1;


test:
	     if j - i > Cut then go to sloop;



	     if i = 1 then
		if i < j then go to sloop;

/* Bubble sort if small number of names in this list */
/*  Note that we do this for the lists headed by stacki(n) */

	     do i = i + 1 by 1 while (i <= j);
		k = i;
		xk = x (k);
		vxk = v (xk);
bubble:
		l = k - 1;
		xl = x (l);
		if v (xl) -> name_string <= vxk -> name_string then go to ok;
		x (k) = xl;
		x (l) = xk;
		k = l;
		go to bubble;
ok:
	     end;

/* Start work on the next list */


	     m = m - 1;


	     if m = 0 then go to thread;



	     i = stacki (m);

	     j = stackj (m);



	     go to test;



thread:						/* rethread the names in correct order */
	     xi = x (1);				/* get first index */

	     np = v (xi);				/* get first pointer */

	     root = np;				/* point root to first name */



	     do i = 1 to n;				/* now loop doing the rethread */

		xi = x (i);

		np -> relnp = rel (v (xi));		/* np points to current and v(xi) points to next */

		np = v (xi);

	     end;




	     np -> relnp = ""b;			/* zero out last */



sort_ret:
	     return;


	end sort_name_list;

     end prune;

     end backup_load_dir_list;
