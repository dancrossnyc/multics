/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(87-03-03,GWMay), approve(87-03-03,MCR7627), audit(87-03-13,Farley),
     install(87-03-30,MR12.1-1018):
     removed on any_other condition. added a switch for handling dumper
     invokations vs reloader.
                                                   END HISTORY COMMENTS */


/* Routines to format and write hierarchy backup/reload map lines */

/* Modified: 4 April 1970 by R. H. Campbell */
/* Modified: June 1971 by R. A. Tilden to add line counter */
/* Modified: 28 February 1980 by S. Herbst to write errors on error_output */
/* Modified: November 1980 by A. R. Downing to provide entry points to be used by the copy_dump_tape command to produce
   backup-like maps */
/* Modified: 19 October 1980 by G. Palter to create error file for subroutine entries if desired */
/* Modified: 21 January 1982 by S. Herbst to fix call to convert_status_code_ */
/* Modified: 7 May 1982 by G. Palter to make all entries respect the map flag */
/* Modified: July 1982 by G. Palter to add error_line entry */
/* Modified: 1985-03-19, BIM; any_other handler that gets out to level 2,
   detect error_table_$no_move */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


backup_map_:
     procedure (pointer, count);

	return;					/* not a real entry */


dcl  pointer pointer,
     count fixed binary,
     string character (count) based (pointer);

dcl  (addr, index, length, max, min, null, rtrim, substr, unspec) builtin;

dcl  i,
     n,
     nt,
     (ap, sp) pointer;

dcl  long_info character (100) aligned;

dcl  ignore character (8);

dcl  dir char (168) aligned internal static,		/* settable by copy_dump_tape */
     map_name character (32) internal static initial (""),
     dirname char (12),
     ent char (32),
     rings (3) fixed binary (3),
     code fixed binary (35);

dcl  (
     error_table_$namedup,
     error_table_$ioname_not_found
     ) fixed binary (35) external;

dcl  backup_map character (32) init ("");		/* Entry name of map segment. */

dcl  unique_chars_ entry (bit (*) aligned) returns (character (15) aligned);
						/* Get unique name. */

dcl  backup_map_$error_line entry () options (variable),
     backup_map_$heading_line entry,
     com_err_ entry options (variable),
     convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned),
     cu_$arg_count entry (fixed binary),
     cu_$arg_list_ptr entry (pointer),
     cv_bin_$dec entry (fixed binary, character (*) aligned),
     date_time_ entry (fixed binary (52), character (*) aligned),
     (
     ioa_,
     ioa_$rs
     ) entry options (variable),			/* Various arguments. */
     ioa_$general_rs
	entry (pointer, fixed binary, fixed binary, character (*), fixed binary (21), bit (1) aligned, bit (1) aligned),
     ios_$attach entry (character (*), character (*), character (*), character (*), bit (72) aligned),
     ios_$detach entry (character (*), character (*), character (*), bit (72) aligned),
     ios_$write entry (character (*), pointer, fixed binary, fixed binary, fixed binary, bit (72) aligned),
     ios_$write_ptr entry (pointer, fixed binary, fixed binary),
     pathname_ entry (character (*), character (*)) returns (character (168));

dcl  iox_$error_output ptr ext;
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));

/* For making a map or error file */
dcl  hcs_$append_branchx
	entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*) aligned, fixed bin (1), fixed bin (1),
	fixed bin (24), fixed bin (35)),
     hcs_$acl_add1
	entry (char (*) aligned, char (*), char (*) aligned, fixed bin (5), (3) fixed binary (3), fixed bin (35)),
     get_group_id_$tag_star returns (char (32) aligned),
     hcs_$fs_search_get_wdir entry (ptr, fixed bin),
     expand_pathname_ entry (char (*), char (*) aligned, char (*), fixed bin (35)),
     cu_$level_get returns (fixed bin);

dcl  not_initialized bit (1) static initial ("1"b),	/* Initialization switch. */
     page_size fixed bin static initial (55);		/* Number of lines on a page */

dcl  (
     old_blocks fixed binary,				/* Last values on detail line. */
     (old_dtp, old_dtd, old_dtu, old_dtem, old_dtsm) fixed binary (52)
     ) static initial (-1);

dcl  line character (200) static,			/* Output buffer. */
     linep pointer static,				/* Pointer to it. */
     lines fixed bin static;				/* How many have been written on current page */

dcl  1 p based (ap) aligned,				/* Overlay for faster processing. */
       2 c (0:1) character (1) unaligned;		/* Packed synchronous character array. */

dcl  ascii character (12) aligned;			/* Return string for call to cv_bin_$dec. */

dcl  calendar_line character (24) aligned;		/* Return string for call to date_time_. */

dcl  (nl, eject, ht) static character (1);

dcl  1 header1 static,				/* First header line contains tape id */
       2 top character (1),				/* New page character, usually */
       2 eol character (1),				/* Skip a line */
       2 tapenames character (100) init (""),		/* Text given to tapes entry */
     length_hdr1 static fixed bin init (2);

dcl  1 header2 static,				/* Column headings. */
       2 name character (30) initial (" ENTRY NAME"),
       2 blocks character (7) initial ("BLOCKS"),
       2 type character (11) initial ("REC_TYPE"),
       2 dtp character (7) initial ("TIME"),
       2 dtem character (17) initial ("ENTRY_MODIFIED"),
       2 dtd character (16) initial ("LAST_DUMPED"),
       2 dtu character (17) initial ("LAST_USED"),
       2 dtsm character (13) initial ("SEG._MODIFIED"),
       2 eol character (1),				/* End of line */
     detail_ptr pointer static,			/* Pointer to detail line. */
     1 detail static,				/* Format for map detail lines. */
       2 sp character (1) init (""),			/* Blank, col 0. */
       2 (
       name character (32),				/* Entry(name, col. 1 - 32. */
       blocks character (3),				/* Number of 1024-word blocks, col. 33 - 35. */
       sp1 character (1),				/* Blank, col. 36. */
       record_type character (10)
       ) initial (""),				/* Logical record type, col. 37 - 46. */
       2 dtp,					/* Time entry processed. */
         3 (
         sp1 character (1),				/* Blank, col. 47. */
         time character (6)
         ) initial (""),				/* Time, col. 48 - 53. */
       2 dtem,					/* Date and time entry modified. */
         3 (
         sp character (1),				/* Blank, col. 54. */
         date character (8),				/* Date, col. 55 - 62. */
         sp1 character (1),				/* Blank, col. 63. */
         time character (6)
         ) initial (""),				/* Time, col. 64 - 69. */
       2 dtd,					/* Date and time last dumped. */
         3 (
         sp2 character (2),				/* Blanks, col. 70 - 71. */
         date character (8),				/* Date, col. 72 - 79. */
         sp1 character (1),				/* Blank, col. 80. */
         time character (6)
         ) initial (""),				/* Time, col. 81 - 86. */
       2 dtu,					/* Date and time entry used. */
         3 (
         sp character (1),				/* Blank, col. 87. */
         date character (8),				/* Date, col. 88 - 95. */
         sp1 character (1),				/* Blank, col. 96. */
         time character (6)
         ) initial (""),				/* Time, col. 97 - 102. */
       2 dtsm,					/* Date and time segment modified. */
         3 (
         sp2 character (2),				/* Blanks, col. 103 - 104. */
         date character (8),				/* Date, col. 105 - 112. */
         sp1 character (1),				/* Blank, col. 113. */
         time character (6)
         ) initial ("");				/* Time, col. 114 - 119. */

/**/

%include io_status;
%page;
%include backup_control;
%page;
%include bk_ss_;

/**/

initializer:					/* Initialize static storage. */
     procedure;
	unspec (ht) = "000001001"b;			/* Initialize character constants. */
	unspec (nl) = "000001010"b;			/* .. */
	header1.eol, header2.eol = nl;		/* .. */
	unspec (eject) = "000001100"b;		/* .. */
	linep = addr (line);			/* Set addresses compiler refuses to */
	detail_ptr = addr (detail);			/* .. */
	not_initialized = ""b;			/* Indicate our work is done. */
     end initializer;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

update:
     procedure (old, new, date, time);			/* Update stored times and place in detail line. */

dcl  (old, new) fixed binary (52),			/* The times. */
     date character (8),
     time character (6);				/* Date and time structure elements. */
	old = new;				/* Save for next time. */
	date, time = "";				/* Blank the fields */
	if old > 0 then do;				/* Is it a "real" time? */
	     call date_time_ (old, calendar_line);	/* Convert the value. */
	     date = substr (calendar_line, 1, 8);	/* Rearrange the date and time. */
	     time = substr (calendar_line, 11, 6);
	end;
	else if old = 0 then time = "ZERO";		/* Has it ever been set? */
     end update;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

trim:
     procedure (inp1, in_length);			/* Procedure to replace blank strings with HT's. */

dcl  (inp1, inp, outp) pointer;			/* Pointers to aligned strings, may be same. */

dcl  (
     in_length,					/* Number of characters in input string. */
     nl_count,					/* Number of NL's found at end of line. */
     line_length,					/* Temporary storage. */
     field_begin,					/* Beginning of 10-col. field. */
     field_end,					/* End of 10-col. field. */
     last_non_blank,				/* Last non-blank character in field. */
     char_count
     ) fixed binary;				/* Accumulating character count. */

dcl  sample character (1);				/* Sample character for comparisons. */
	inp = inp1;				/* Copy pointers to buffers. */
	outp = linep;				/* .. */
	char_count = 0;				/* Output string empty now. */
	line_length = in_length;			/* Get supplied line length. */
	line_length = min (length (line), line_length) - 1;
						/* Convert to synchronous subscript. */
	nl_count = 0;				/* Clear count of NL characters. */
	do line_length = line_length by -1 to 0;	/* Trim off trailing blanks. */
	     sample = inp -> p.c (line_length);		/* Get current character. */
	     if sample = nl then			/* Is it a new-line? */
		nl_count = nl_count + 1;		/* Yes, count it. */
	     else if sample ^= ht then		/* No, is it a tabulate? */
		if sample ^= " " then		/* No, is it a space? */
		     go to end_of_line;		/* No, it is the last graphic. */
	end;
end_of_line:
	field_begin = 0;				/* Set pointer to beginning of first field. */
	do field_end = 9 by 10 to line_length;		/* Consider each 10-col. field in turn. */
						/* Search back for non-blank character. */
	     do last_non_blank = field_end by -1 to field_begin while (inp -> p.c (last_non_blank) = " ");
	     end;
	     do field_begin = field_begin to last_non_blank;
						/* Copy initial string. */
		outp -> p.c (char_count) = inp -> p.c (field_begin);
		char_count = char_count + 1;		/* Count this character. */
	     end;
	     if field_end - last_non_blank > 1 then do;	/* More than one blank? */
		outp -> p.c (char_count) = ht;	/* Insert a tabulate character. */
		char_count = char_count + 1;		/* Bump for one character. */
	     end;
	     else if field_end - last_non_blank = 1 then do;
						/* Only one character blank? */
		outp -> p.c (char_count) = " ";	/* Insert a blank. */
		char_count = char_count + 1;		/* Count it. */
	     end;
	     field_begin = field_end + 1;		/* Set pointer to beginning of next field. */
	end;
	do field_begin = field_begin to line_length;	/* Copy remaining partial field. */
	     outp -> p.c (char_count) = inp -> p.c (field_begin);
						/* Move it. */
	     char_count = char_count + 1;		/* Count this character. */
	end;
append_nl:
	outp -> p.c (char_count) = nl;		/* Append NL character. */
	char_count = char_count + 1;			/* Bump character count. */
	if nl_count > 1 then do;			/* More to do? */
	     nl_count = nl_count - 1;			/* Count this one. */
	     go to append_nl;			/* Put on another one. */
	end;
	n = char_count;				/* Return output string length to caller. */
     end trim;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

try_write:
     procedure (linep, n);				/* Procedure to write a line */

dcl  linep pointer,
     n fixed bin;					/* its location and length */

dcl  sub_err_ entry () options (variable);
dcl  error_table_$no_move fixed bin (35) ext static;

	bk_ss_$writing_map = "1"b;			/* make map faults go to level 2, not silently get caught by backup_dump's wierd handler */

	sp = addr (status);				/* Set up pointer to status string. */
try_write:
	if lines > page_size then			/* check if new page needed */
	     call backup_map_$heading_line;
	call ios_$write ("map", linep, 0, n, nt, sp -> status_bits);
						/* Try to write the line. */
	if status.code = error_table_$no_move then do;
	     call sub_err_ (status.code, "backup_map_", ACTION_CAN_RESTART, null (), (0),
		"Possible record quota overflow converting the map from an SSF or an MSF. Type ""start"" to retry.");
	     go to try_write;
	end;
	if status.code = error_table_$ioname_not_found then do;
						/* Was map attached? */
try_attach:
	     backup_map = unique_chars_ (""b) || ".backup.map";
						/* Make up new map name. */
	     map_name = backup_map;			/* static copy */
	     rings (1), rings (2), rings (3) = max ((cu_$level_get ()), 4);
	     call hcs_$fs_search_get_wdir (addr (dir), length (dir));
	     call hcs_$append_branchx ((dir), (backup_map), 01011b, rings, (get_group_id_$tag_star ()), 0b, 0b, 0b, (0))
		;
	     call hcs_$acl_add1 (dir, backup_map, "*.SysDaemon.*", 01011b, rings, (0));
	     call ios_$attach ("map", "file", backup_map, "w", sp -> status_bits);
	     if status.code = 0 then do;		/* Was attach successful? */
		call ioa_ ("Map attached to file ""^a"".", backup_map);
		go to try_write;			/* Now write the line. */
	     end;
	end;
	if status.code ^= 0 then do;			/* Was write successful? */
discontinue_map:
	     call com_err_ (status.code, "backup_map_", "^[^a^[>^]^a^]^/Map discontinued.", backup_map ^= "", dir,
		dir ^= ">", backup_map);
	     bk_ss_$mapsw = ""b;
	     go to exit;
	end;
	else if nt ^= n then do;			/* Were all characters "transmitted"? */
	     call ioa_ ("backup_map_: Partial transmission; map will be detached.");
	     call ios_$detach ("map", "", "", sp -> status_bits);
						/* Detach the map. */
	     if status.code = 0 then			/* Detached OK? */
		go to try_attach;			/* Yes, get new segment and reattach. */
	     go to discontinue_map;			/* No, gripe and clear switch. */
	end;
	lines = lines + 1;				/* Count this line */
	bk_ss_$writing_map = "0"b;
	return;					/* Return to caller. */
%include sub_err_flags;
     end try_write;

/**/

directory_line:
     entry (pointer, count);				/* Entry to write map line. */
	if bk_ss_$mapsw then do;
	     call trim (pointer, count);		/* Move line to buffer, trim it, append NL. */
	     call try_write (linep, n);		/* Write the line */
	end;
	go to exit;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

on_line:
     entry (pointer, count);				/* Entry to write on and off line. */
	if not_initialized then call initializer;	/* Set us up if necessary. */
	call trim (pointer, count);			/* Move, trim, and format line. */
write_on_line:
	if ^bk_ss_$sub_entry then call ios_$write_ptr (linep, 0, n);
	if ^bk_ss_$mapsw then go to exit;		/* Finished if no map */
	call try_write (addr (nl), 1);		/* Skip a line */
	call try_write (linep, n);			/* Write the message */
	go to exit;				/* Finished */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

beginning_line:
     entry (time, pointer, count);			/* Entry to write and type beginning comment. */

dcl  time fixed binary (52);				/* Time processing began. */
	if not_initialized then call initializer;	/* Set us up if necessary. */
	call date_time_ (time, calendar_line);		/* Convert the time. */
	if ^bk_ss_$sub_entry then call ioa_ ("Begin at ^a", calendar_line);
	lines = 1;				/* We are starting new page */
	if ^bk_ss_$mapsw then go to exit;		/* finished if no map */
	call ioa_$rs ("^a^[. ^]Begin at ^a", line, n, pointer -> string, count ^= 0, calendar_line);
	if bk_ss_$brief_mapsw then do;		/* skip two lines if -brief_map */
	     call try_write (addr (nl), 1);
	     lines = lines + 1;			/* extra nl */
	end;
	else do;
	     call try_write (addr (eject), 1);		/* Else skip to new page. */
	     lines = 1;
	end;
	call try_write (linep, n);			/* Write the line */
	header1.top = nl;				/* Disable eject in header */
	go to try_head;				/* Go emit page headings */

/* * * * ** * * * * * * * * * * * * * * * * * * * * * * * * */

terminal_line:
     entry (time, flag);				/* Entry to write and type termination comment. */

dcl  flag fixed binary;				/* Error code. */
	if not_initialized then call initializer;	/* Rare, but possible */
	call date_time_ (time, calendar_line);		/* Convert the time. */
	if flag = 0 then				/* Make up appropriate comment. */
	     call ioa_$rs ("Normal termination ^a.", line, n, calendar_line);
	else call ioa_$rs ("Error ^d; Abnormal termination ^a.", line, n, flag, calendar_line);
	if ^bk_ss_$sub_entry then call ios_$write_ptr (linep, 0, n);
	if ^bk_ss_$mapsw then go to exit;		/* Write map if specified */
	call try_write (addr (nl), 1);		/* Blank line */
	call try_write (linep, n);			/* Terminate line */
	lines = page_size + 1;			/* If they add to map, they'll start new page */
	go to exit;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

heading_line:
     entry;					/* Entry to write heading line. */
	if ^bk_ss_$mapsw then go to exit;
	lines = 0;				/* Reset line count */
	header1.top = eject;			/* Ensure new page */
try_head:
	lines = lines + 1;				/* Number of <NL> chars in header */
	call try_write (addr (header1), length_hdr1);	/* First header line */
	call try_write (addr (header2), 119);		/* Second one */
	go to exit;				/* All done */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

detail_line2:
     entry					/* Entry to write detail line. */
	(name, blocks, type, dtp, dtem, dtd, dtu, dtsm);

dcl  name character (32) aligned,			/* Entry name. */
     blocks fixed binary (9),				/* Number of blocks if segment. */
     type character (10) aligned,			/* Record type. */
     (dtp, dtd, dtu, dtem, dtsm) fixed binary (52);	/* Date/times. */
	if ^bk_ss_$mapsw then go to exit;
	if dtd ^= old_dtd then			/* Is previous dump time the same? */
	     call update (old_dtd, dtd, detail.dtd.date, detail.dtd.time);
						/* No, update printed version. */
	detail.name = name;				/* Copy the entry name. */
	if blocks ^= old_blocks then do;		/* Same blocks entry as before? */
	     old_blocks = blocks;			/* Remember for next time. */
	     if old_blocks >= 0 then do;		/* Real number of blocks? */
		call cv_bin_$dec (old_blocks, ascii);	/* Convert the value. */
		detail.blocks = substr (ascii, 10, 3);	/* Insert in detail line. */
	     end;
	     else detail.blocks = "";			/* No, blank out field. */
	end;
	detail.record_type = type;			/* Copy logical record type. */
	if dtp ^= old_dtp then			/* Is the time processed the same? */
	     call update (old_dtp, dtp, ignore, detail.dtp.time);
						/* No, update printed version. */
	if dtu ^= old_dtu then			/* Is time used different? */
	     call update (old_dtu, dtu, detail.dtu.date, detail.dtu.time);
						/* Yes, update it. */
	if dtem ^= old_dtem then			/* Update time entry modified if different. */
	     call update (old_dtem, dtem, detail.dtem.date, detail.dtem.time);
	if dtsm ^= old_dtsm then			/* Update time segment modified if different. */
	     call update (old_dtsm, dtsm, detail.dtsm.date, detail.dtsm.time);
	call trim (detail_ptr, 120);			/* Move to line buffer and trim blanks. */
	call try_write (linep, n);			/* Go write the line. */
	go to exit;				/* Finished */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

name_line:
     entry (pointer, count);				/* Entry to write additional names indented. */
	if ^bk_ss_$mapsw then go to exit;
	ap = pointer;				/* Copy input pointer. */
	linep -> p.c (0) = ht;			/* Prefix line with HT. */
	do i = 0 to min (length (line) - 1, count) - 1;	/* Scan the characters. */
	     linep -> p.c (i + 1) = ap -> p.c (i);	/* Move this character. */
	end;
	call trim (linep, i + 1);			/* Compute total character count. */
	call try_write (linep, n);			/* Go write the line. */
	go to exit;				/* Finished */

/**/

/* Write an error message to the error file, the map, and online: calling sequence identical to com_err_ */

error_line:
     entry (P_code, P_module_name);

dcl  P_code fixed binary (35) parameter;
dcl  P_module_name character (*) parameter;

dcl  message_buffer character (1024);
dcl  user_message_lth fixed binary (21);
dcl  message_lth fixed binary;

dcl  arg_list_ptr pointer;
dcl  n_arguments fixed binary;
dcl  sname character (16);
dcl  efile_name character (64) static;			/* name of the error file */

dcl  date_name_ entry (character (*), character (*), character (*), character (*), fixed binary (35));


	if bk_ss_$mapsw | ^bk_ss_$sub_entry | bk_ss_$sub_entry_errfile then do;
	     if not_initialized then call initializer ();

	     message_lth = 0;

	     call cu_$arg_count (n_arguments);

	     if P_module_name ^= "" then do;
		call add_text (rtrim (P_module_name));
		if (P_code ^= 0) | (n_arguments > 2) then call add_text (": ");
	     end;

	     if P_code ^= 0 then do;
		call convert_status_code_ (P_code, ((8)" "), long_info);
		call add_text (rtrim (long_info));
		if n_arguments > 2 then call add_text (" ");
	     end;

	     if n_arguments > 2 then do;
		call cu_$arg_list_ptr (arg_list_ptr);
		begin;
dcl  rest_of_message_buffer character (length (message_buffer) - message_lth) unaligned defined (message_buffer)
	position (message_lth + 1);
		     call ioa_$general_rs (arg_list_ptr, 3, 4, rest_of_message_buffer, user_message_lth, "0"b, "1"b);
		end;
		message_lth = message_lth + user_message_lth;
	     end;
	     else call add_text (nl);			/* make sure it ends with a newline */

	     if bk_ss_$sub_entry then do;		/* record lossage in data structure */
		bk_ss_$control_ptr -> backup_control.status_code (bk_ss_$path_index) = P_code;
		bk_ss_$control_ptr -> backup_control.error_name (bk_ss_$path_index) = P_module_name;
		if bk_ss_$sub_entry_errfile then go to WRITE_ERROR_FILE;
		else if bk_ss_$mapsw then go to WRITE_MAP_LINE;
		else go to RETURN_FROM_ERROR_LINE;	/* skip writing online */
	     end;

	     if bk_ss_$err_onlinesw then do;		/* write the message online */
WRITE_ONLINE:
		call iox_$put_chars (iox_$error_output, addr (message_buffer), message_lth, code);
		if ^bk_ss_$mapsw then
		     go to RETURN_FROM_ERROR_LINE;
		else go to WRITE_MAP_LINE;
	     end;

	     else do;				/* write the message into the error file */
WRITE_ERROR_FILE:
		sp = addr (status);
		call ios_$write ("err_file", addr (message_buffer), 0, message_lth, nt, sp -> status_bits);

		if status.code = error_table_$ioname_not_found then do;
		     dirname = "";			/* no error file: try to create one */
		     efile_name = "";
		     sname = bk_ss_$myname;
		     if ^bk_ss_$debugsw then
			if (bk_ss_$myname = "reload") | (bk_ss_$myname = "iload") then dirname = ">reload_dir";
ATTACH_ERROR_FILE:
		     call date_name_ (dirname, sname, "ef", efile_name, code);
		     if code ^= 0 then go to STOP_ERROR_FILE;
		     if dirname = ">reload_dir" then
			efile_name =
			     ">reload_dir>"
			     || substr (efile_name, 1, length (efile_name) - length (">reload_dir>"));
		     i = index (efile_name, " ") - 1;
		     rings (1), rings (2), rings (3) = max ((cu_$level_get ()), 4);
		     call expand_pathname_ (substr (efile_name, 1, i), dir, ent, code);
		     call hcs_$append_branchx ((dir), (ent), 01011b, rings, (get_group_id_$tag_star ()), 0b, 0b, 0b,
			code);
		     if (code = 0) | (code = error_table_$namedup) then
			call hcs_$acl_add1 (dir, ent, "*.SysDaemon.*", 01011b, rings, code);
		     call ios_$attach ("err_file", "file", efile_name, "w", sp -> status_bits);
		     if status.code = 0 then do;	/* inform user that there's an error file */
			call ioa_ ("Error file attached to file ""^a"".", efile_name);
			go to WRITE_ERROR_FILE;	/* and try again */
		     end;
		end;
		if status.code ^= 0 then do;		/* couldn't write to the file: switch to online */
STOP_ERROR_FILE:
		     call com_err_ (status.code, "backup_map_", "Error file discontinued.");
		     bk_ss_$err_onlinesw = "1"b;
		     go to WRITE_ONLINE;
		end;
		else if nt ^= message_lth then do;	/* didn't put everyhting into the file */
		     call ioa_ ("backup_map_: Partial transmission; error file ^a will be detached.", efile_name);
		     call ios_$detach ("err_file", "", "", sp -> status_bits);
		     if status.code = 0 then go to ATTACH_ERROR_FILE;
						/* try again if we detached it */
		     go to STOP_ERROR_FILE;		/* otherwise, go online */
		end;
	     end;

WRITE_MAP_LINE:
	     if bk_ss_$mapsw then do;			/* put it into the map */
		call try_write (addr (nl), 1);
		call try_write (addr (message_buffer), message_lth);
	     end;
	end;

RETURN_FROM_ERROR_LINE:
	return;



/* Older entry to print error messages */

fs_error_line:
     entry (fs_code, fs_comment, fs_dir, fs_entry);

dcl  fs_code fixed binary (35) parameter;
dcl  fs_comment character (*) aligned parameter;		/* offending procedure */
dcl  fs_dir character (*) aligned parameter;		/* offending directory path name */
dcl  fs_entry character (*) aligned parameter;		/* offending entry */

	if substr (fs_entry, 1, 1) = ">" then		/* some routines call us incorrectly */
	     call backup_map_$error_line (fs_code, (fs_comment), fs_entry);

	else if fs_entry = "" then			/* not really a pathname */
	     call backup_map_$error_line (fs_code, (fs_comment), fs_dir);

	else call backup_map_$error_line (fs_code, (fs_comment), pathname_ ((fs_dir), (fs_entry)));

	return;




/* Adds a piece of text to the message buffer */

add_text:
     procedure (p_text);

dcl  p_text character (*) parameter;

dcl  rest_of_message_buffer character (length (message_buffer) - message_lth) unaligned defined (message_buffer)
	position (message_lth + 1);

	if length (p_text) <= length (rest_of_message_buffer) then do;
	     substr (rest_of_message_buffer, 1, length (p_text)) = p_text;
	     message_lth = message_lth + length (p_text);
	end;

	else do;
	     rest_of_message_buffer = substr (p_text, 1, length (rest_of_message_buffer));
	     message_lth = message_lth + length (rest_of_message_buffer);
	end;

	return;

     end add_text;

/**/

tapes:
     entry (pointer, count);				/* Entry to specify first (tape info) header */
	if not_initialized then call initializer;	/* Set us up if necessary */
	call ioa_$rs ("^a", header1.tapenames, n, pointer -> string);
						/* Insert info */
	if substr (header1.tapenames, 1, 4) = " " then
	     length_hdr1 = 2;
	else length_hdr1 = n + 2;			/* Set size */
	lines = page_size + 1;			/* Cause new page */
exit:
	bk_ss_$writing_map = "0"b;
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

get_map_name:					/* for copy_dump_tape */
     entry () returns (character (32));
	return (map_name);

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

init_for_cdt:					/* for copy_dump_tape */
     entry (tape_list);

dcl  (save_debug_sw, save_mapsw, save_sub_entry, save_tape_sw, save_bf_mapsw) bit (1) internal static;
dcl  tape_list character (128) varying;
dcl  get_wdir_ entry () returns (character (168));

	lines = 0;

	if tape_list ^= "" then			/* set of tapes used by copy_dump_tape for output map */
	     header1.tapenames = tape_list;

	save_debug_sw = bk_ss_$debugsw;		/* will be changing these while copy_dump_tape running */
	save_mapsw = bk_ss_$mapsw;
	save_sub_entry = bk_ss_$sub_entry;
	save_tape_sw = bk_ss_$tapesw;
	save_bf_mapsw = bk_ss_$brief_mapsw;

	bk_ss_$sub_entry, bk_ss_$debugsw, bk_ss_$mapsw = "1"b;
	bk_ss_$brief_mapsw, bk_ss_$tapesw = "0"b;

	not_initialized = "1"b;			/* force backup_map_ to reinitialize itself */

	dir = get_wdir_ ();				/* use working directory for the map */

	header1.top = "";

	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

detach_for_cdt:					/* for copy_dump_tape */
     entry (a_code);

dcl  a_code fixed binary (35) parameter;

	sp = addr (status);				/* establish where the bits go */
	call ios_$detach ("map", "", "", sp -> status_bits);
						/* detach the map */
	a_code = status.code;

	bk_ss_$debugsw = save_debug_sw;		/* restore items saved during copy_dump_tape */
	bk_ss_$mapsw = save_mapsw;
	bk_ss_$sub_entry = save_sub_entry;
	bk_ss_$tapesw = save_tape_sw;
	bk_ss_$brief_mapsw = save_bf_mapsw;

	return;

     end backup_map_;
