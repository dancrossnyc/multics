/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



lv_request_communicator_$alloc_lvate: proc (a_ec) returns (ptr);

/* Bernard Greenberg 9/8/76 */
/* Called by user-process RCP in ring 1, this procedure intermediates conversation with the
   lv_attach_table, talking to wdx in the Initializer process */


dcl 1 message based (addr (fixedmessage)),
    2 text char (4) unal,
    2 lvax fixed bin (17) unal,
    2 other fixed bin (17) unal;

dcl  SYSDIR char (168) static init (">lv");
dcl  LVAT_NAME char (32) static init ("lv_attach_table") options (constant);

dcl (error_table_$action_not_performed, error_table_$noalloc) fixed bin (35) ext;
dcl  error_table_$resource_unassigned fixed bin (35) ext;

dcl  fixedmessage fixed bin (71) aligned;
dcl  vhighest_used fixed bin (35);

dcl  hcs_$wakeup ext entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (1), ptr, fixed bin (35));
dcl  get_process_id_ entry (bit (36) aligned);
dcl  admin_gate_$syserr entry options (variable);
dcl  stac builtin;
dcl  stacq entry (ptr, bit (36) aligned, bit (36) aligned) returns (bit (1) aligned);
dcl  lvname char (32);
dcl  code fixed bin (35);
dcl  s_lvatp ptr static init (null);
dcl  processid bit (36) aligned static;
dcl  ec fixed bin (35);
dcl  lvax fixed bin;

dcl  a_lvatep ptr;
dcl  a_evch fixed bin (71) aligned;
dcl  a_lvname char (*);
dcl  a_ec fixed bin (35);
dcl  a_state fixed bin;

dcl (null, rel, addr) builtin;



/*  */
	if s_lvatp = null then do;
	     call get_process_id_ (processid);
	     call hcs_$initiate (SYSDIR, LVAT_NAME, "", 0, 0, lvatp, ec);
	     if lvatp = null then do;
		a_ec = ec;
		return (null);
	     end;
	     s_lvatp = lvatp;
	end;

	lvatp = s_lvatp;
	do lvax = 1 to lvat.max_n_entries;
	     lvatep = addr (lvat.array (lvax));
	     if stac (addr (lvate.pid), processid) then do;

lll:		vhighest_used = lvat.highest_used;
		if lvax > vhighest_used then if ^stacq (addr (lvat.highest_used), unspec (vhighest_used), unspec (lvax))
		     then go to lll;
		string (lvate.flags) = "0"b;
		a_ec = 0;
		return (lvatep);
	     end;
	end;
	a_ec = error_table_$noalloc;
	return (null);

intent_to_mount: entry (a_lvatep, a_lvname, a_evch, a_ec);

	lvatep = a_lvatep;
	lvatp = s_lvatp;
	lvname = a_lvname;

	if lvate.pid ^= processid then go to unas;

	string (lvate.flags) = "0"b;

	lvate.lvname = lvname;			/* copy stuff first, */
	lvate.evchn = a_evch;
	lvate.state = 0;
	lvate.code = 0;
	lvate.pending_mount = "1"b;			/* flag is last */
	call transmit ("moun");			/* give guy a zetz */

	a_ec = 0;
	return;


check:	entry (a_lvatep, a_state, a_ec);

	lvatep = a_lvatep;
	lvatp = s_lvatp;

	if lvate.pid ^= processid then do;		/* got snarfed */
unasa:	     a_state = 3;
unas:	     a_ec = error_table_$resource_unassigned;
	     return;
	end;

	if lvate.invalidated then go to unasa;
	if lvate.mount_req_answered then do;
	     if lvate.waiting then a_state = 1;
	     else if lvate.code ^= 0 then a_state = 3;
	     else a_state = 0;
	     a_ec = lvate.code;
	end;
	else do;					/* No answer thru yet */
	     if lvate.pending_mount then a_state = 1;
	     else a_state = 3;
	     a_ec = 0;
	end;

	return;


intent_to_detach: entry (a_lvatep, a_ec);

	lvatep = a_lvatep;
	lvatp = s_lvatp;

	if lvate.pid ^= processid | lvate.invalidated then go to unas;
	lvate.detach_requested = "1"b;
	call transmit ("demo");
	a_ec = 0;
	return;

abandon:	entry (a_lvatep);

	lvatep = a_lvatep;
	lvatp = s_lvatp;

	string (lvate.flags) = "0"b;
	lvate.lvname = "";
	if ^stacq (addr (lvate.pid), processid, "0"b) then
	     call admin_gate_$syserr (0, "lv_request_communicator_: lock ^= processid lvate ^p", lvatep);

	return;

transmit:	procedure (m);

dcl  m char (*);

	     message.text = m;
	     message.lvax = 1 + divide (fixed (rel (lvatep), 18) - fixed (rel (addr (lvat.array)), 18),
		size (lvate), 17, 0);
	     message.other = 0;

	     call hcs_$wakeup (lvat.master_pid, lvat.master_evchn, fixedmessage, ec);
	     if ec ^= 0 then do;
		call admin_gate_$syserr (0, "lv_request_communicator_: code ^o from wakeup", code);
		a_ec = error_table_$action_not_performed;
		go to nlx;
	     end;
	end transmit;
nlx:	return;

test:	entry (testdir);

dcl  testdir char (*);
	SYSDIR = testdir;
	return;
						/*  */
%include lv_atttbl;


/* BEGIN MESSAGE DOCUMENTATION

   Message:
   lv_request_communicator_: lock ^= processid lvate PPP

   S: $info

   T: In response to a user's detach_lv command

   M: A logical volume attachment table entry became disassociated
   from a user to whom it had been assigned.
   $err

   A: $notify
   Be prepared to demount logical volumes manually which might otherwise
   have been demounted automatically.

   Message:
   lv_request_communicator_: code CCC from wakeup

   S: $info

   T: $run

   M: A wakeup could not be sent to the initializer process in order to
   perform communication about attachment/detachment of logical volumes.

   A: $notify

   END MESSAGE DOCUMENTATION */

     end;
