/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


salv_caller: procedure;
	return;

/* salv_caller	-- Module to implement administrative salvager commands */
/* Bernard Greenberg, April 6 1976 */
/* Modified 7/77 by S.E. Barr to delete branch checking. */

dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  code fixed bin (35);
dcl  arg char (argl) based (argp);
dcl  argp ptr, argl fixed bin;
dcl  SALV_RING fixed bin static init (1);
dcl  cv_dec_check_ entry (char (*), fixed bin (35), fixed bin);
dcl  i fixed bin;
dcl  n fixed bin;


dcl  disk_table_$general_mhv entry (fixed bin (35));
dcl  disk_table_$accept_rlv entry (fixed bin (35));
dcl  disk_table_$rbld_disk entry (char (*), char (*), char (*), bit (36) aligned, fixed bin (35));
dcl  disk_table_$volsalv entry (char (*), char (*), bit (36) aligned, fixed bin (35));
dcl  disk_table_$volsalvall entry (bit (36) aligned, fixed bin (35));
dcl  disk_table_$volrlvcheck entry (char (*), char (*), char (*), bit (36) aligned, fixed bin (35));
dcl  initializer_gate_$salvager entry (bit (36) aligned, fixed bin, fixed bin (35));

dcl  cu_$level_get entry returns (fixed bin);
dcl (ioa_, com_err_) entry options (variable);
dcl  isvol bit (1);
dcl (copysw, allsw, drivesw, packsw, rbldsw) bit (1) init ("0"b);
dcl (drive, copyarg, pvname) char (32);

dcl (error_table_$action_not_performed, error_table_$badopt, error_table_$noarg) fixed bin (35) ext;
dcl  active_all_rings_data$max_tree_depth fixed bin ext;


	

%include salv_options;

dirsalv:	entry;
	isvol = "0"b;				/* directory salvage */
	go to join;
packsalv:	entry;
	isvol = "1"b;				/* pack salvage */
	go to join;
rbld_disk: entry;
	isvol = "1"b;
	rbldsw = "1"b;
join:	salv_opt_bits = "0"b;			/* clear all flags */
	if ^isvol then do;
	     if cu_$level_get () > SALV_RING then do;
		call com_err_ (0, "salvage_dirs", "must be in ring ^d for dir salv", SALV_RING);
		return;
	     end;
	     n = active_all_rings_data$max_tree_depth;
	end;

	do i = 1 to cu_$arg_count ();;
	     call cu_$arg_ptr (i, argp, argl, code);
	     if arg = "-console" then salv_opts.console = "1"b;
	     else if arg = "-debug" | arg = "-db" then salv_opts.debug = "1"b;
	     else if arg = "-dump" then salv_opts.dump = "1"b;
	     else if arg = "-nodump" then salv_opts.ndump = "1"b;
	     else if arg = "-nodebug" then salv_opts.ndebug = "1"b;
	     else if arg = "-noconsole" then salv_opts.nconsole = "1"b;
	     else if isvol then do;
		if arg = "-all" then do;
		     if ^rbldsw then allsw = "1"b;
		     else do;
			call com_err_ (error_table_$badopt, "rebuild disk", arg);
			return;
		     end;
		end;
		else if arg = "-copy" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, argp, argl, code);
		     if code ^= 0 then do;
nocopyarg:
			call com_err_ (code, "salvage_vol", "need copy drive name");
			return;
		     end;
		     if substr (arg, 1, 1) = "-" then do;
			code = error_table_$noarg;
			go to nocopyarg;
		     end;
		     copyarg = arg;
		     copysw = "1"b;
		end;
		else if i = 1 & substr (arg, 1, 1) ^= "-" then do; /* pack name */
		     pvname = arg;
		     packsw = "1"b;
		end;
		else if i = 2 & packsw & substr (arg, 1, 1) ^= "-" then do; /* drive name */
		     drive = arg;
		     drivesw = "1"b;
		end;
		else do;
		     call com_err_ (error_table_$badopt, "salvage_vol", arg);
		     return;
		end;
	     end;
	     else do;				/* dir salv */
		if arg = "-rebuild" then salv_opts.rbld = "1"b;
		else if arg = "-pathname" then salv_opts.pnames = "1"b;
		else if arg = "-long" then salv_opts.rbld, salv_opts.check, salv_opts.pnames = "1"b;
		else if arg = "-check_vtoce" then salv_opts.check = "1"b;
		else if arg = "-delete_connection_failure" | arg = "-dcf" then salv_opts.dcf = "1"b;
		else if arg = "-norebuild" then salv_opts.nrbld = "1"b;
		else if arg = "-nopathname" then salv_opts.npnames = "1"b;
		else if arg = "-nocheck_vtoce" then salv_opts.ncheck = "1"b;
		else if arg = "-nodelete_connection_failure" | arg = "-nodcf" then salv_opts.ndcf = "1"b;
		else if arg = "-level" then do;
		     i = i + 1;
		     call cu_$arg_ptr (i, argp, argl, code);
		     if code ^= 0 then do;
levnoarg:			call com_err_ (code, "salvage_dirs", "level number required");
			return;
		     end;
		     if substr (arg, 1, 1) = "-" then do;
			code = error_table_$noarg;
			go to levnoarg;
		     end;
		     call cv_dec_check_ (arg, code, n);
		     if code ^= 0 then do;
			call com_err_ (0, "salvage_dirs", "decimal number required for level, not ^a", arg);
			return;
		     end;
		     if n < 0 | n > active_all_rings_data$max_tree_depth then do;
			call com_err_ (0, "salvage_dirs", "depth must be between ^d and ^d", 0,
			     active_all_rings_data$max_tree_depth);
			return;
		     end;
		end;
		else do;
		     call com_err_ (error_table_$badopt, "salvage_dirs", arg);
		     return;
		end;
	     end;
	end;


	if substr (salv_opt_bits, 1, 18) & substr (salv_opt_bits, 19, 18) then do;
	     if isvol then call com_err_ (0, "salvage_vol", "Inconsistent arguments have been specified");
	     else call com_err_ (0, "salvage_dirs", "Inconsistent arguments have been specified");
	     return;
	end;

	if salv_opts.ncheck & salv_opts.dcf then do;

	     call com_err_ (0, "salvage_dirs", "VTOC checking is required for connection failure deletion.");
	     return;
	end;
	salv_opts.check = salv_opts.check | salv_opts.dcf;


	if ^isvol then do;
	     call disk_table_$accept_rlv (code);
	     if code ^= 0 then do;
		call com_err_ (0, "salvage_dirs", "will not salvage until root complete");
		return;
	     end;
	     if salv_opts.check then do;
		call disk_table_$general_mhv (code);
		if code ^= 0 then do;
		     call com_err_ (0, "salvage_dirs", "Will not salvage");
		     return;
		end;
	     end;
	end;

	if copysw & allsw then do;
	     call com_err_ (0, "salvage_vol", "-all and -copy arguments cannot be used together");
	     return;
	end;

	if allsw & drivesw then do;
	     call com_err_ (0, "salvage_vol", "no drive may be specified for -all");
	     return;
	end;

	if isvol & ^allsw & ^(packsw & drivesw) then do;
	     call com_err_ (error_table_$noarg, "salvage_vol", "first two args must be phys vol name and drive name");
	     return;
	end;


	if rbldsw & ^(drivesw & copysw) then do;
	     call com_err_ (error_table_$noarg, "rebuild_disk",
		"args are: pack name dirve name -copy drive name");
	     return;
	end;

	if rbldsw then call disk_table_$rbld_disk (pvname, drive, copyarg, salv_opt_bits, code);
	else if copysw then call disk_table_$volrlvcheck (pvname, drive, copyarg, salv_opt_bits, code);
	else if allsw then call disk_table_$volsalvall (salv_opt_bits, code);
	else if isvol then call disk_table_$volsalv (pvname, drive, salv_opt_bits, code);
	else call initializer_gate_$salvager (salv_opt_bits, n, code);

	if code ^= 0 then do;
	     if code < 100 then code = error_table_$action_not_performed;
	     if isvol then call com_err_ (code, "salvage_vol");
	     else call com_err_ (code, "salvage_dirs");
	end;
	return;

test:	entry;
	SALV_RING = cu_$level_get ();
	return;


/* BEGIN MESSAGE DOCUMENTATION

Message:
rebuild_disk: Expected argument missing.

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
rebuild_disk: Specified control argument is not implemented by this command. BLAH

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_dirs: ERROR_MESSAGE

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_dirs: ERROR_MESSAGE. level number required

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_dirs: Inconsistent arguments have been specified

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_dirs: Specified control argument is not implemented by this command. BLAH

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_dirs: Will not salvage

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_dirs: decimal number required for level, not BLAH

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_dirs: depth must be between 0 and 15

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_dirs: must be in ring 1 for dir salv

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_dirs: will not salvage until root complete

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_vol: -all and -copy arguments cannot be used together

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_vol: ERROR_MESSAGE

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_vol: ERROR_MESSAGE. need copy drive name

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_vol: Expected argument missing. first two args must be phys vol name and drive name

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_vol: Inconsistent arguments have been specified

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_vol: Specified control argument is not implemented by this command. BLAH

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn


Message:
salvage_vol: no drive may be specified for -all

S:	$initializer_io

T:	$response

M:	Incorrect arguments were specified.

A:	$tryagn



Message:
salvage_dirs: VTOC checking is required for connection failure deletion.

S:	$initializer_io

T:	$response

M:	An attempt was made to specify directory salvage with connection failure
	deletion, but no VTOC checking.

A:	$tryagn

END MESSAGE DOCUMENTATION */
     end;
