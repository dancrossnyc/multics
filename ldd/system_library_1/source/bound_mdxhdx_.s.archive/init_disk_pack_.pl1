/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-16,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-29,LJAdams), install(86-07-17,MR12.0-1097):
     Add support for subvolumes, and 512_WORD_IO, 3380 and 3390.
                                                   END HISTORY COMMENTS */


/* format: style3 */
init_disk_pack_$parse_args:
     proc (Arg_list_ptr, Drive_id, Pvname, Copy_flag, RLV_flag, Code);

/*  This procedure initializes a disk from Ring 1.  Two cases are covered,
   either the disk is mounted, but not accepted, or a copy is being made of an
   accepted disk.  It is passed the PVT index and a pointer to the disk_table entry.
   This procedure prepares the label from the disk table entry and data derived
   from interrogation of the operator, and calls init_vol_header_ to
   write the disk based on this info. 

   Revised for init_vol_header_, fixing several bugs, BSG 06/25/76 
   Revised for fill_vol_extents_, forcing the latter to do all calculation, BSG 08/31/76 
   Revised for countervalidate_label_ BSG 12/1/76 
   Fixed not to assume pvtx and dtep correspond for Vol Backup, BSG 3/9/77 
   Modified by Mike Grady 9/79 to improve above fix 
   Modified by J. Bongiovanni, April 1982, to add parse_args entry, general cleanup 
   Modified '82 for english error codes
   Modified 84-09-24 by EJ Sharpe for "-rlv" arg and RLV_flag
   Modified 84-10-30 by EJ Sharpe to user convert_status_code_ and some minor fixes
   Modified 85-04-29 by EJ Sharpe to fix uninitialized copy_sw
*/

/*  Parameter  */

dcl	Arg_list_ptr	ptr parameter;		/* Command arg list pointer */
dcl	Drive_id		char (*) parameter;		/* Drive identifier (dskX_NN) */
dcl	Pvname		char (*) parameter;		/* Physical volume name */
dcl	Copy_flag		bit (1) aligned parameter;	/* ON => -copy specified */
dcl       RLV_flag            bit (1) aligned parameter;
dcl	Dtp		ptr;			/* -> disk table */
dcl	Dtep		ptr;			/* -> disk table entry */
dcl	Pvtx		fixed bin;		/* PVT index */
dcl	Code		fixed bin (35);

/*  Automatic  */

dcl	argl		fixed bin (21);
dcl	argp		ptr;
dcl	baseadd		fixed bin;
dcl	conversation	bit (1) aligned;
dcl	copy_sw		bit (1) aligned;
dcl	dev_type		fixed bin;
dcl	longerr		char (100) aligned;
dcl	n_vtoce		fixed bin;
dcl	no_reg_sw		bit (1) aligned;
dcl	num_pages		fixed bin;
dcl	pagep		ptr;
dcl	pv_name		char (32);
dcl       rlv_sw              bit (1) aligned;
dcl	shorterr		char (8) aligned;
dcl	thing		char (20);

/*  Static  */

dcl	myname		char (20) init ("init_disk_pack_") static options (constant);

/*  Based  */

dcl	arg		char (argl) based (argp);
dcl	1 buffer		aligned like label;
dcl	page		bit (36 * 1024) based (pagep);

/*  External  */

dcl	error_table_$badopt fixed bin (35) external;
dcl       error_table_$bad_label fixed bin (35) external;
dcl	sys_info$access_class_ceiling
			bit (72) aligned external;

/*  Builtin  */

dcl	addr		builtin;
dcl	clock		builtin;
dcl	null		builtin;

/*  Entry  */

dcl	com_err_		entry options (variable);
dcl	config_$find	entry (char(4) aligned, ptr);
dcl	convert_status_code_ entry (fixed bin(35), char(8) aligned, char(100) aligned);
dcl	countervalidate_label_$query
			entry (ptr, char (*), char (*), char (*)) returns (bit (1));
dcl	cu_$arg_ptr_rel	entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl	fill_vol_extents_	entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin, bit (1) aligned, fixed bin (17),
			fixed bin (35));
dcl       get_ring_           entry() returns(fixed bin(3));
dcl	init_vol_header_	entry (fixed bin, fixed bin, ptr, entry, char (*), fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl	initializer_gate_$write_disk
			entry (fixed bin, fixed bin, ptr, fixed bin (35));
dcl	initializer_gate_$read_disk
			entry (fixed bin, fixed bin, ptr, fixed bin (35));
dcl	ioa_		entry options (variable);






%page;
/*  Parse command arguments and return information to disk_table_  */

	Code = 0;

	call cu_$arg_ptr_rel (1, argp, argl, Code, Arg_list_ptr);
	if Code ^= 0
	then do;
		call com_err_ (Code, myname, "pvname");
		return;
	     end;

	Pvname = arg;

	call cu_$arg_ptr_rel (2, argp, argl, Code, Arg_list_ptr);
	if Code ^= 0
	then do;
		call com_err_ (Code, myname, "drive_id");
		return;
	     end;

	Drive_id = arg;

	call PARSE_ARGS;

	Copy_flag = copy_sw;
	RLV_flag = rlv_sw;
	return;

%page;
/*  Entry to do the work  */
init_disk_pack_:
     entry (Dtp, Dtep, Pvtx, Arg_list_ptr, Code);


	dtp = Dtp;
	dtep = Dtep;
	labelp = addr (buffer);

	call PARSE_ARGS;

	pv_name = "read";
	thing = "label";
	call initializer_gate_$read_disk (Pvtx, LABEL_ADDR, labelp, Code);
	if Code ^= 0
	then do;
		call com_err_ (Code, myname, "Cannot read current label of ^a.", (dt.array (Pvtx).drive_name));
		return;
	     end;
	if ^countervalidate_label_$query (labelp, (dte.pvname), myname, (dt.array (Pvtx).drive_name))
	then do;
	          Code = error_table_$bad_label; 
		return;
	     end;


	pagep = addr (buffer);
	page = "0"b;

	dev_type = dte.device_type;

	label.version = 1;
	label.mfg_serial = dte.pvname;		/* Good enough for a start */
	pv_name, label.pv_name = dte.pvname;
	label.time_registered = clock ();
	if dte.is_sub_vol
	then do;
		label.vol_size = rec_per_sv (dte.device_type);
		label.number_of_sv = dte.num_of_sv;
		label.this_sv = dte.sv_num;
		label.sub_vol_name = valid_sv_array (dte.sv_num);
	     end;
	else do;
		label.vol_size = rec_per_dev (dte.device_type);
						/* use whole pack */
		label.number_of_sv = 0;
		label.this_sv = 0;
	     end;

	if ^no_reg_sw
	then do;
		label.pvid = dte.pvid;		/* disk_table_ made this up */
		lvep = addr (dt.lv_array (dte.lvx));
		label.lvid = lve.lvid;		/* Get from disk_table_. who searched. */
		label.lv_name = lve.lvname;
		label.min_access_class = lve.min_access_class;
		label.max_access_class = lve.max_access_class;
		label.private = ^lve.public;
	     end;
	else do;
		label.pvid, label.lvid = (36)"1"b;
		label.lv_name = "";
		label.max_access_class = sys_info$access_class_ceiling;
		label.min_access_class = ""b;
	     end;

	label.Multics = Multics_ID_String;
	label.password = ""b;
	label.root.disk_table_vtocx = -1;
	label.root.disk_table_uid = ""b;
	label.root_vtocx = 0;
	label.shutdown_state = 0;
	label.esd_state = 0;



/* Fill volume defaults. Hold a dialogue if requested. */

	call fill_vol_extents_ (labelp, -1, n_vtoce, baseadd, num_pages, ^conversation, dev_type, Code);
						/* -1 = no "lace" */
	if Code ^= 0
	then return;

/* Write out the actual disk */

	call init_vol_header_ (Pvtx, dev_type, pagep, initializer_gate_$write_disk, thing, n_vtoce, baseadd, num_pages,
	     Code);

	if Code ^= 0
	then do;
	     call convert_status_code_ (Code, shorterr, longerr);
	     call ioa_ ("^a: ^a ^a disk err ""^a"" on ^a", myname, dte.drive_name, pv_name, longerr, thing);
	end;

	else call ioa_ ("volume ^a ^d records", pv_name, num_pages);
	return;


%page;

/*  Internal Procedure to do argument parsing  */

PARSE_ARGS:
     proc;

dcl	code		fixed bin (35);
dcl	arg_no		fixed bin;



	conversation, no_reg_sw, rlv_sw, copy_sw = "0"b;

	code = 0;
	do arg_no = 3 repeat arg_no + 1 while (code = 0);
	     call cu_$arg_ptr_rel (arg_no, argp, argl, code, Arg_list_ptr);
	     if code = 0
	     then do;
		     if arg = "-special"
		     then conversation = "1"b;
		     else if arg = "-copy"
		     then conversation, copy_sw = "1"b;
		     else if arg = "-no_reg"
		     then conversation, no_reg_sw = "1"b;
		     else if arg = "-rlv"
			then if ^( (get_ring_() = 1)  &  BOOTED_COLD () ) then do;
				Code = error_table_$badopt;
				call com_err_ (Code, myname, """-rlv"" allowed only at ring 1 during cold boot.");
				return;
			     end;
			     else rlv_sw = "1"b;
		     else do;
			     Code = error_table_$badopt;
			     call com_err_ (Code, myname, arg);
			     return;
			end;
		end;
	end;

     end PARSE_ARGS;
%page;

/* Internal procedure to determine if we're in middle of cold boot */

BOOTED_COLD:
     proc () returns (bit (1) aligned);

	intk_cardp = null ();
	call config_$find ("intk", intk_cardp);
	if intk_cardp = null () then do;
	     call com_err_ (0, myname, "INTK card missing from config deck.");
	     return ("0"b);
	end;
	else return (intk_card.warm_or_cold = "cold");

     end BOOTED_COLD;
%page;
%include config_intk_card;
%page;
%include disk_pack;
%page;
%include disk_table;
%page;
%include fs_dev_types;
%page;
%include fs_vol_label;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   init_disk_pack_: Cannot read current label of DRIVE: ERROR_MESSAGE

   S:	$initializer_io

   T:	$response

   M:	A disk error prevents checking the label of the pack on DRIVE.
   The pack may need to be formatted before it can be initialized.

   A:	Take appropriate action.


   Message:
   init_disk_pack_: INTK card missing from config deck.

   S:	$initializer_io

   T:	$response

   M:	When the operator specifies the "-rlv" control argument to
   "init_vol" this program attempts to verify that the system is in cold
   boot by inspecting the INTK card in the config deck.  When this message
   appears, there is some difficulty in locating that card.

   A:	If really trying to boot cold, try again.


   Message:
   init_disk_pack_:  Specified control argument not accepted.  "-rlv"
   allowed only at ring-1 during a cold boot.

   S:	$initializer_io

   T:	$response

   M:	Automatic registration of root PVs is allowed only during
   a cold boot of Multics.

   A:	Use the "add_volume_registration" administrative command to
   register the PV before attempting to initialize it.


   Message:
   init_disk_pack_: DRIVE PVNAME disk err WWWW on ITEM

   S:	$initializer_io

   T:	$response

   M:	A disk error prevents writing the ITEM section of the disk volume PVNAME.

   A:	Fix the drive, or use a new pack.


   Message:
   init_disk_pack_: Volume on DRIVE is Multics Storage System Volume "PVNAME",
   .br
   last used DATE_TIME. Do you wish to overwrite it?

   S:	$initializer_io

   T:	$response

   M:	The init_disk command specifed a disk pack
   which has a valid Multics label.
   Initializing this pack will destroy all data contained on it.

   A:	Do not answer yes unless you are sure that the pack contents should be destroyed.
   Check the pack serial number.


   Message:
   init_disk_pack_: Volume on DRIVE is a copy of Multics Storage System Volume "PVNAME",
   .br
   last used DATE_TIME. Do you wish to overwrite it?

   S:	$initializer_io

   T:	$response

   M:	The init_disk command specifed a disk pack
   which has a valid Multics label.
   Another copy of PVNAME is currently in use.
   Initializing this pack will destroy all data contained on it.

   A:	Do not answer yes unless you are sure that the pack contents should be destroyed.
   Check the pack serial number.


   Message:
   init_disk_pack_: Volume on DRIVE is a copy of pv "PVNAME",
   .br
   last used DATE_TIME. Do you wish to overwrite it?

   S:	$initializer_io

   T:	$response

   M:	The init_disk command specifed a disk pack
   which has a valid Multics label.
   It appears to be a copy of a mounted pack.
   Initializing this pack will destroy all data contained on it.

   A:	Do not answer yes unless you are sure that the pack contents should be destroyed.
   Check the pack serial number.


   Message:
   init_disk_pack_: Volume on DRIVE is an earlier instance of pv "PVNAME",
   .br
   last used DATE_TIME. Do you wish to overwrite it?

   S:	$initializer_io

   T:	$response

   M:	The init_disk command specifed a disk pack
   which has a valid Multics label.
   Initializing this pack will destroy all data contained on it.

   A:	Do not answer yes unless you are sure that the pack contents should be destroyed.
   Check the pack serial number.


   Message:
   init_disk_pack_: Volume on DRIVE is an unregistered pack named "PVNAME",
   .br
   last used DATE_TIME. Do you wish to overwrite it?

   S:	$initializer_io

   T:	$response

   M:	The init_disk command specifed a disk pack
   which has a valid Multics label.
   Initializing this pack will destroy all data contained on it.

   A:	Do not answer yes unless you are sure that the pack contents should be destroyed.
   Check the pack serial number.


   Message:
   init_disk_pack_: unrecognized argument: BLAH

   S:	$initializer_io

   T:	$response

   M:	Illegal input was typed.

   A:	$tryagn


   Message:
   volume PVNAME XX records

   S:	$initializer_io

   T:	$response

   M:	The physical volume PVNAME has been successfully initialized.
   There are XX (decimal) records in the paging area.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

     end init_disk_pack_$parse_args;
