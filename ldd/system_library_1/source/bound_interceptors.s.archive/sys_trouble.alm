" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(87-01-19,Fawcett), approve(87-01-19,MCR7531),
"     audit(87-01-19,Martinson), install(87-01-20,MR12.0-1288):
"     Change to set the bb pointer before it is used. Also add segdef sys_trouble.
"                                                      END HISTORY COMMENTS


inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>

	use	main


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Before spinning waiting for console I/O to die, and before going to
"	bce, the fault vector for lockup is patched to do an SCU/RCU
"	in absolute mode. This must be in absolute mode, in case the lockup
"	happens in early bce. The target of the SCU/RCU is in this program
"	rather than prds$ignore_data, since the latter may not be in the
"	low-order 256K.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
	eight
ignore_data:
	bss	,8		" SCU data for SCU/RCU on lockup fault

ignore_scu_rcu:
	scu	0		" Put into fault vector for lockup fault
	rcu	0		" after absolute address inserted into Y-field

" 
	segdef	sys_trouble
sys_trouble:
	lda	prds$processor_pattern  get bit pattern for this CPU
	cana	scs$bos_restart_flags  are we restarting this processor?
	tnz	restart		if so, get it running again


"	If this is the first processor to enter this code,
"	a system trouble connect must be sent to all other
"	processors to stop them too.

	lda	scs$processor	get flags for all running CPU's
	stac	scs$trouble_flags	are we the first processor?
	tnz	*+2		if not, skip broadcast
	tsx0	broadcast		broadcast system trouble connects to others

	tsx0	fim_util$set_mask	save mask and mask down

" 

"	Copy the machine conditions into prds$sys_trouble_data.
"	This prevents overwriting the data when another
"	system trouble interrupt is used to restart CPU's.

	lda	bp|mc.scu+scu.fi_num_word  get fault code
	ana	scu.fi_num_mask,dl	mask fault code
	arl	scu.fi_num_shift	right-justify
	cmpa	FAULT_NO_CON,dl	connect fault?
	tnz	no_copy		if not, conditions already in trouble_data

	eppap	prds$sys_trouble_data  ap -> cache for machine conditions
	tsx0	fim_util$copy_mc	copy the machine conditions
no_copy:

	eppbb	pds$history_reg_data	bb -> place to store history regs
	tsx0	fim_util$check_mct		go copy cpu type into machine conditions
	tsx0	fim_util$force_hist_regs	save the history registers in pds

	lda	prds$processor_tag	CPU tag in A
	als	1		multiply by 2
	sdbr	scs$trouble_dbrs,al	save DBR for debugging


"	If this is the bootload CPU, enter bce.
"	Otherwise, die gracefully.

	lca	1,dl		all one's in A
	era	prds$processor_pattern  CPU pattern mask in A
	ansa	scs$processor	indicate that this CPU is stopped

	lda	prds$processor_tag	processor tag in A
	cmpa	scs$bos_processor_tag  is this the bootload CPU?
	tze	enter_bce		if so, go to bce

die:
	dis	-1,du		stop 
	tra	*-1		I said stop!

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	The second trouble connect for restarting processors
"	causes control to be transferred here.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

restart:
	lda	prds$processor_pattern  get bit for this processor
	orsa	scs$processor	indicate CPU is running again
	era	=-1		complement to make a mask
	ansa	scs$bos_restart_flags  indicate processor has been restarted
	ansa	scs$sys_trouble_pending  turn off trouble flag for this processor

	eppbp	wired_fim$trouble_prs,*  bp -> system trouble m.c. area
	tsx0	fim_util$restore_mask  restore original controller mask

	szn	scs$faults_initialized  see if system ready for cache
	tze	trouble_exit	transfer if not
	tsx0	fim_util$reset_mode_reg  restore mode and cache mode regs

	odd
trouble_exit:
	tsx0	fim_util$v_time_calc  start virtual time meters again

	lpl	bp|mc.eis_info	restore ptrs and lgths
	lreg	bp|mc.regs_word	and regs
	lpri	bp|mc.prs		and prs
	rcu	wired_fim$trouble_scuinfo,*	get running again

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	The following code copies an error message into the bce
"	flagbox message buffer.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

enter_bce:
	lda	scs$sys_trouble_pending  get flags
	als	18		extract low-order
	ars	18		could be negative number
	neg	0		or zero
	tze	rtb_no_message	if zero, no messag
	eppbb	flagbox$		bb -> bce flagbox
	cmpa	trbl_exec_flt,dl
	tnz	not_manual_crash	execute fault?
	ldq	fgbx.manual_crash,du
	orsq	bb|fgbx.rtb
not_manual_crash:
	mlr	(),(pr)		copy program ID
	desc9a	sys_trouble_name,13
	desc9a	bb|fgbx.message,13

	mlr	(id),(pr),fill(040)	copy error message
	arg	trouble_messages-1,al
	desc9a	bb|fgbx.message+3(1),64-13

	cmpa	trbl_r0_drl_flt,dl	is it a ring-0 derail?
	tnz	non_drl		nope, that's all 
	szn	scs$drl_message_pointer augment the message
	tze	non_drl		nothing to say
	lprplb	scs$drl_message_pointer 
	lda	lb|0		acc length in upper 9
	arl	27		lower 9, now
	mlr	(pr,rl),(pr),fill(040) Your life story in 32 characters.
	desc9a	lb|0(1),al
	desc9a	bb|fgbx.message+8,64-32

non_drl:	ldq	fgbx.mess+fgbx.alert,du  set flags for message printing
	orsq	bb|fgbx.rtb	..

	tra	rtb_no_message	no, go back to bce


sys_trouble_name:
	aci	"sys_trouble: "

" 

	macro	message
	desc9a	&U,&l1
	maclist	off,save
	use	message
	maclist	restore
&U:
	aci	"&1"
	maclist	off,save
	use	main
	maclist	restore
	&end

trouble_messages:
	message	(Page fault while on prds.)

	message	(Fault/interrupt while on prds.)

	message	(Fault in idle process.)

	message	(Fault/interrupt with PTL set.)

	message	(Unrecognized fault.)

	message	(Unexpected fault.)

	message	(Execute fault by operator.)

	message	(Out-of-Segment-Bounds on prds.)

	message	(Fault while in masked environment.)	

	message	(Fault while in bound_interceptors.)

	message	(Ring 0 derail.)

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	The following code enters bce by placing the two
"	absolute mode instructions needed to enter bce
"	into the fault vector slot for the derail fault.
"	NOTE: bp must be preserved  across call to bce since
"	we use it to restore pointer registers upon return.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

rtb_no_message:
	eppbb	fault_vector$+0	bb -> fault vector segment
	ldaq	bb|2*FAULT_NO_LUF+fv.fpair
	staq	lp|save_lockup_fault  save SCU/TRA
	absa	ignore_data	abs addr in 0-23
	als	6		abs addr in 0-17 of Areg
	eaq	0,au		abs addr in 0-17 of Qreg
	oraq	ignore_scu_rcu	replace lockup fault vector
	staq	bb|2*FAULT_NO_LUF+fv.fpair

	szn	scs$processor	all CPU's stopped?
	tnz	*-1		if not, wait here

	lda	4,du		wait for operator's console output to finish
	odd
	sba	1,dl		to allow I/O to drain off
	tnz	*-1		..

" 

" Here is the channel masking code.

	epp0	iom_data$
	eax1	pr0|iom_data.per_device
	lxl0	pr0|iom_data.n_devices
mask.next_device:
	lda	pr0|per_device.flags,x1
	cana	per_device.in_use,du
	tze	mask.skip_device		" not in use now.

	ldq	pr0|per_device.iom,x1	" which iom?
	mpy	per_iom_size,dl		 
	eax2	-per_iom_size+iom_data.per_iom,ql " pr0|per_iom.XXX,x2 
	ldq	pr0|per_device.iom,x1
	mpy	iom_mailbox_size,dl		" address iom mbx
	epp1	iom_mailbox$+iom_mailbox_seg.iom_mailbox-iom_mailbox_size,ql
				          " pr1|mailbox

	ldq	pr0|per_device.channel,x1
	cmpq	=o10,dl			" it has to be bigger than this
	tmi	mask.skip_device		" overhead

	qls	27			" channel position
	oraq	MASK_PCW
	staq	pr1|connect.pcw
	ldq	pr0|per_iom.connect_lpw,x2	" take template PCW
	stq	pr1|connect.lpw		" set up for real
	lda	50,dl
	cioc	pr0|per_iom.cow,x2		" BANG
	odd	
mask.connect_loop:
	cmpq	pr1|connect.lpw		" connect taken yet?
	tnz	mask.skip_device		" nope, wait it out.
	sba	1,dl
	tnz	mask.connect_loop		" keep waiting

mask.skip_device:
	eax1	per_device_size,x1		" next device
	sbx0	1,du			" how many done?
	tnz	mask.next_device		" not all

" 
	

		

	ldaq	bb|2*FAULT_NO_DRL+fv.fpair  grab SCU-TRA pair from fault vector
	staq	lp|save_derail_fault
	ldaq	toehold$+2*TOE_HOLD_MULTICS_ENTRY pick up code to enter bce
	staq	bb|2*FAULT_NO_DRL+fv.fpair  set it in fault vector

drl:	drl	0		****** bce is entered here ******

	szn	scs$connect_lock	did we enter through pmut call?
	tze	drl		if not, cannot restart

	ldac	scs$trouble_flags	get and clear trouble flags
	sta	scs$bos_restart_flags  set for restarting CPU's

	ldaq	lp|save_derail_fault
	staq	bb|2*FAULT_NO_DRL+fv.fpair  ..
	ldaq	lp|save_lockup_fault  restore lockup faults
	staq	bb|2*FAULT_NO_LUF+fv.fpair  ..

	tsx0	broadcast		send trouble connects to start CPU's

	tra	restart		restart the bootload CPU

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	BROADCAST - Send system trouble connects to all other
"		processors.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

broadcast:
	ldq	hbound_processor_data,dl	initialize the Q with maximum configurable CPUs
broadcast_loop:
	cmpq	prds$processor_tag	test for ourselves
	tze	broadcast_next	don't hit ourselves
	lda	scs$processor_data,ql  get processor data for this CPU
	cana	processor_data.online,du  is it configured?
	tze	broadcast_next	if not, don't hit it

	cioc	scs$cow_ptrs,ql*	Zap

broadcast_next:
	sbq	1,dl		step to next CPU
	tpl	broadcast_loop	if more, get the others
	tra	0,0		return to caller

"


	maclist 	off
	include	make_data_macros
	include	iom_word_macros
	maclist	on

	make_pcw	MASK_PCW,0,0,0,record,terminate,0,0,mask

" 

	use	internal_static
	join	/link/internal_static

	even
save_lockup_fault:
	bss	,2		place to save lockup fault SCU and TRA

save_derail_fault:
	bss	,2		place to save derail fault SCU and TRA



" 

	include	scs

	include	flagbox

	include	sys_trouble_codes

	include	fault_vector

	include	toe_hold

	include	iom_data

	equ	connect.pcw,connect_channel*channel_mailbox_size+channel_mailbox.scw
	equ	connect.lpw,connect_channel*channel_mailbox_size+channel_mailbox.lpw


" 

" BEGIN MESSAGE DOCUMENTATION
"
" Message:
" sys_trouble: Page fault while on prds.
"
" S:	$crash
"
" T:	$run
"
" M:	$err
"
" A:	$recov
"
"
" Message:
" sys_trouble: Fault/interrupt while on prds.
"
" S:	$crash
"
" T:	$run
"
" M:	$err
"
" A:	$recov
"
"
" Message:
" sys_trouble: Fault in idle process.
"
" S:	$crash
"
" T:	$run
"
" M:	$err
"
" A:	$recov
"
"
" Message:
" sys_trouble: Fault/interrupt with ptl set.
"
" S:	$crash
"
" T:	$run
"
" M:	$err
"
" A:	$recov
"
"
" Message:
" sys_trouble: Unrecognized fault.
"
" S:	$crash
"
" T:	$run
"
" M:	Unexpected or unrecognized fault subcondition.
"	Probable hardware malfunction.
"
" A:	$contact
"
"
" Message:
" sys_trouble: Unexpected fault.
"
" S:	$crash
"
" T:	$init
"
" M:	$err
"
" A:	$recov
"
"
" Message:
" sys_trouble: Execute fault by operator.
"
" S:	$crash
"
" T:	$run
"
" M:	Operator depressed execute pushbutton on processor.
"
" A:	$recov
"
"
" Message:
" sys_trouble:  Out-of-Segment-Bounds on prds.
"
" S:	$crash
"
" T:	$run
"
" M:	While running with the prds as a stack, an attempt was
"	made to reference beyond the end of the prds.  The likely
"	cause was stack overflow, due either to a recursive loop
"	in the procedures running on the prds or insufficient
"	space allocated for the prds.  If the latter, the size of
"	the prds should be increased by means of the TBLS Configuration
"	Card.
"
" A:	$recover
"
"
" Message:
" sys_trouble: Interrupts Masked in User Ring.
"
" S:	$crash
"
" T:	$run
"
" M:	During processing of a fault, it was noticed that interrupts
"	were masked in user-ring, an invalid condition. This is a
"	debug trap crash, enabled by the hidden tuning parameter
"	trap_invalid_masked.
"
" A:	Contact the Multics System Development staff.
"
"
" Message:
" sys_trouble: Fault in bound_interceptors.
"
" S:	$crash
"
" T:	$run
"
" M:	A fault occured while handling another fault.
"
" A:	$recov
"
"
" Message:
" sys_trouble: Ring 0 derail. {MESSAGE}
"
" S:	$crash
"
" T:	$run
"
" M:	A supervisor software module discovered an untenable situation, and
"	crashed the system by executing a derail (DRL) instruction.
"	If MESSAGE is also present, it will be of the form:
"         "module: explanation", and further details can be found in
"	this documentation in the description of "module".
"
" A:	$recov
"
" END MESSAGE DOCUMENTATION



	end
