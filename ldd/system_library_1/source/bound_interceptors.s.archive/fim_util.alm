" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1983 *
" *                                                         *
" ***********************************************************


" FIM_UTIL - Utility subroutines for the fim, wired_fim, and ii.
"	consolidated 10/18/76 by Noel I. Morris
"	Modified 1 Feb 79 by D. Spector for new scs format for 8-cpu cioc
"	Modified 8/27/79 by J. A. Bush to reorganize the check_fault subroutine
"	Modified 8/25/80 by J. A. Bush for the DPS8/70M CPU
"	Modified 2/23/81 by J. Bongiovanni for fast connect code
"	Modified 3/5/81 by J. Bongiovanni for OOSB on prds
"	Modified 3/23/81 by J. A. Bush to dump extended APU history reg. for DPS8/70M.
"	Modified 9/23/81 by J. A. Bush to not use QU mode when saving AMs
"	Modified 10/28/81 by J. Bongiovanni for bug in check_fault
"	Modified 2/8/82 by J. Bongiovanni to trap on masked in user ring (conditionally)
"	Modified 02/16/82 by J. A. Bush to not trash mc.fault_reg for sys_trouble crash
"	Modified 07/30/82 by J. Bongiovanni for scs$trouble_processid
"	Modified 10/13/82 by E. N. Kittlitz to clear indicators in v_time_init.
"	Modified sometime by B. I. Margulies for bootload multics.
"	Modified 4/7/83 by E. N. Kittlitz for drl_fault_trouble.
"	Modified 10/8/83 by J. A. Bush to dump extended fault register
"	Modified 10/18/83 by R. Coppola to meter per-processor cache errors 
"	Modified 11/27/83 by E. N. Kittlitz for ext vcpu entries
"         Modified 83-12-05 by BIM for checking fault-masked always.


" HISTORY COMMENTS:
"  1) change(88-05-24,Farley), approve(88-06-30,MCR7927),
"     audit(88-07-12,Fawcett), install(88-08-02,MR12.2-1076):
"     Added checking in force_hist_regs for the new prds$hregs_last_saved time
"     and in save_fault_reg for prds$fault_reg_last_saved.  This is to prevent
"     multiple attempts to save the data, resulting in the data becoming zero.
"                                                      END HISTORY COMMENTS


	name	fim_util


	segdef	check_fault	validate a fault
	segdef	check_interrupt	validate an interrupt
	segdef	fault_trouble	illegal fault condition
	segdef	drl_fault_trouble   illegal fault, you say what it is
	segdef	copy_mc		copy machine conditions
	segdef	push_stack	push stack frame
	segdef	push_stack_32	push stack frame with grace area
	segdef	set_mask		set controller mask to sys level
	segdef	restore_mask	restore previous controller mask
	segdef	hist_regs		save history regs and AMs
	segdef	force_hist_regs	force save history regs and AMs
	segdef	check_mct		check and trace machine conditions and hregs
	segdef	reset_mode_reg	turn on hist reg and cache
	segdef	v_time_init	start virtual time meter
	segdef	fim_v_time_init	save virtual time for FIM
	segdef	v_time_calc	stop virtual time meter
	segdef	fim_v_time_calc	compute virtual time for FIM

	entry	fim_v_time_calc_ext	externally callable fim_v_time_calc
	entry	fim_v_time_init_ext	externally callable fim_v_time_init

	link	prds_link,prds$+0


	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Procedure to check validity of faults and interrupts
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

check_fault:
	ldaq	pds$apt_ptr	get pointer to our APT entry
	cmpaq	prds$idle_ptr	are we in idle process?
	tze	idle_trouble	if so, stop the entire system at once

	lxl1	prds$processor_tag
	lprpab	scs$mask_ptr,1
	xec	scs$read_mask,1
	cmpaq	scs$sys_level	masked to system level
	tze       fault_masked_trouble

check_interrupt:
	lda	bp|mc.scu.ppr.prr_word  check whether running in ring-0
	cana	scu.ppr.prr_mask,du	ring number in ppr
	tnz	not_invalid	not ring-0

	eax7	0		nothing invalid yet
	lda	bp|mc.prs+6*2	1st word of stack pointer
	ldq	=o77777,dl	mask to check seg-no and val. ring
	cmk	lp|prds_link	is stack=prds and ring-0
	tnz	not_on_prds	no
	ldx7	-trbl_prds_fi,du	fault on prds

	lda	bp|mc.scu.tpr.tsr_word	now check for stack overflow
	ldq	=o777777,dl	ring number, segment number in TSR
	cmk	lp|prds_link	was target prds
	tnz	not_on_prds	no
	lda	bp|mc.scu.fault_data_word  stack overflow is OOSB
	cana	scu.fd.oosb,du	is it possibly OOSB (must also be acv)
	tze	not_on_prds	not at all
	ana	scu.fi_num_mask+scu.fi_flag_mask,dl  check fault type
	cmpa	2*FAULT_NO_ACV+1,dl	fault/access violation
	tze	oosb_prds_trouble	on the prds!
	
not_on_prds: 
	lda	pds$processid	do we have ptr locked
	cmpa	sst$ptl
	tnz	not_ptl_locked	no
	ldx7	-trbl_ptl_fi,du	f/i with ptl locked
	
not_ptl_locked:
	eaa	0,7		any invalid condition found
	tze	not_invalid	no
	ars	18		set up sys_trouble_pending
	tra	check_fault_trouble ..
	
not_invalid: 		
	lca	scu.ir.parm+1,dl	turn OFF parity mask
	ansa	bp|mc.scu.indicators_word

	tra	0,0		return to caller

idle_trouble:
	lca	trbl_idle_flt,dl	fault while in idle process
	tra	check_fault_trouble	..

fault_masked_trouble:
	lca	trbl_fault_masked,dl fault while masked to system level
	tra	check_fault_trouble

oosb_prds_trouble:
	lca	trbl_oosb_prds,dl	yes--oosb on prds (stack overflow)
	tra	check_fault_trouble ..

fault_trouble:
	lca	trbl_illeg_flt,dl	unrecognized fault
	tra	check_fault_trouble

drl_fault_trouble:
	lca	trbl_r0_drl_flt,dl  ring 0 derail
	tra	check_fault_trouble

check_fault_trouble:
	sta	scs$sys_trouble_pending  set trouble flags

	lda	pds$processid		save our process ID
	stac	scs$trouble_processid	if we're the first

	tsx1	save_fault_reg		save fault reg and cpu type

	lda	sys_info$initialization_state Too early for connect?
	cmpa	=2,dl			Multiprocessing?
	tmoz	sys_trouble$sys_trouble	Go directly to jail ...

	lxl1	prds$processor_tag	prepare to send connect
	cioc	scs$cow_ptrs,1* 	ZAP

	dis	*		cannot inhibit connects at a DIS
	tra	-1,ic		STOP
" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	COPY_MC - Procedure to copy machine conditions
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

copy_mc:
	mlr	(pr),(pr)		copy machine conditions
	desc9a	bp|0,48*4
	desc9a	ap|0,48*4
	eppbp	ap|0		make bp -> copied conditions

	tra	0,0		return to caller



" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	PUSH_STACK - Procedure to create a stack frame
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

push_stack:
	eppap	sb|stack_header.stack_end_ptr,*  ap -> place for frame
push_join:
	sprisp	ap|stack_frame.prev_sp	save current sp
	eppsp	ap|0			set sp to new frame
	eppap	sp|0,7			ap -> end of frame
	spriap	sp|stack_frame.next_sp	save next sp
	spriap	sb|stack_header.stack_end_ptr	save end pointer
	sprilp	sp|stack_frame.lp_ptr	save our linkage ptr

	tra	0,0			return to caller


push_stack_32:
	eppap	sb|stack_header.stack_end_ptr,*  ap -> place for frame
	eppap	ap|32		leave room for push in progress
	tra	push_join		join common code

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Procedures to save and restore controller masks
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

set_mask:
	lxl1	prds$processor_tag	processor tag in X1
	lprpab	scs$mask_ptr,1	get pointer for masking
	xec	scs$read_mask,1	read mask, if assigned
	staq	bp|mc.mask	save it

	lxl1	prds$processor_tag	CPU tag in X1
	lprpab	scs$mask_ptr,1	get pointer for masking
	ldaq	scs$sys_level	going to mask all interrupts
	xec	scs$set_mask,1	only if mask is assigned

	tra	0,0



restore_mask:
	lxl1	prds$processor_tag	CPU tag in X1
	lprpab	scs$mask_ptr,1	get pointer for masking
	ldaq	bp|mc.mask	get original mask
	oraq	channel_mask_set	make sure channel mask is correct
	anaq	scs$open_level	..
	xec	scs$set_mask,1	restore the mask

	tra	0,0		return to caller


	even
channel_mask_set:
	oct	17,17

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Procedures to save history regs. Enter with bb -> place to store history regs.
"	hist_regs - 	save history regs only if per-system 
"			(wired_hardcore_data$global_hregs) or per-process
"			(pds$save_history_regs) flags are set.
"	force_hist_regs -	save history regs unconditionaly
"
"	X4 is set  with the cpu type (0 = L68/DPS, 1 = DPS8) by the
"	save_fault_reg subroutine  which is called by the check_mct subroutine
"	which is called by all callers of this subroutine.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

hist_regs:
	szn	wired_hardcore_data$global_hregs is global history reg save flag on?
	tmi	force_hist_regs		xfer if yes
	szn	pds$save_history_regs	no, is per_process hregs switch on?
	tmi	force_hist_regs		xfer if yes
	stz	pds$hregs_saved		no, zero switch for signaller
	tra	0,0			and return to caller

force_hist_regs:
	ldaq	bp|mc.fault_time		check fault time
	ana	=o777777,dl		only lower 54 bits
	cmpaq	prds$hregs_last_saved 	against last time saved
	tmoz	0,0			return if already saved
	staq	prds$hregs_last_saved	set to fault time if not
	lda	=o400000,du		set hreg saved switch
	sta	pds$hregs_saved		for signaller
	tsx1	save_am			go save associative memory
	ldq	2,du			get a 2 for stepping address
	eax6	4			4 blocks of
scpr1:	eax7	16			16 history registers
	eax3	0			set up for L68 CPU type initally
	cmpx4	1,du			is this a DPS8/70M CPU?
	tnz	scpr2			xfer if no, it is L68
	eax3	48			yes, set up to skip first 48 hregs
scpr2:	lda	scpr-1,6			get correct instruction
	sta	bp|mc.fim_temp		save in stack
scpr3:	xec	bp|mc.fim_temp		execute the instruction
	cmpx3	0,du			are we through skipping hregs?
	tze	scpr4			yes, go increment address
	eax3	-1,3			no, skip another
	tra	scpr3			and go execute scpr again

scpr4:	asq	bp|mc.fim_temp		increment address of instruction
	eax7	-1,7			count down
	tnz	scpr3			more of this 16 double word block
	eax6	-1,6			count down
	tnz	scpr1			another kind of hreg

	eax7	64			initially set clear count to 64
	cmpx4	1,du			is this a DPS8/70M CPU?
	tze	*+2			yes, clear all 64 hregs
	eax7	16			no, clear only 16 hregs
	lcpr	0,03			set all history regs to zero
	eax7	-1,7			count down
	tpnz	*-2			xfer if more to do
	tra	0,0			return to caller

scpr:	scpr	bb|0,40			OU History Regs for L68, OU/DU for DPS8
	scpr	bb|32,20			CU History Regs
	scpr	bb|64,10			DU History Regs for L68, extended APU for DPS8
	scpr	bb|96,00			APU History Regs

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Internal subroutine for saving fault register, extended fault 
"	register and CPU type (from RSW (2)), int the machine condition area.
"	entry via tsx1 save_fault_reg. Exit with x4 containing the CPU type
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

save_fault_reg:
	ldaq	bp|mc.fault_time		check fault time
	ana	=o777777,dl		only lower 54 bits
	cmpaq	prds$fault_reg_last_saved 	against last time saved
	tmoz	0,1			return if already saved
	staq	prds$fault_reg_last_saved	set to fault time if not
	scpr	bp|mc.fim_temp,01		store the fault register
	ldaq	bp|mc.fim_temp
	sta	bp|mc.fault_reg		save M.S. 36 bits
	rsw	2			get cpu type in a
	arl	30			position in al
	ana	3,dl	
	eax4	0,al			save cpu type in x4
	lrl	mc.cpu_type_shift		merge with ext. fault reg
	stcq	bp|mc.cpu_type_word,70	and save in M.C.
	lda	prds$processor_tag		get cpu num
	xec	cache_ctr_tab,al		lb=> per-cpu cache err ctrs	
	lda	bp|mc.fault_reg		reload PFR
	ana	=o10,dl			cache dir parity (bit 32)?
	tze	check_efr			no, go check EFR
	aos	lb|1			yes, increment the per-cpu ctr
check_efr:
	anq	mc.ext_fault_reg_mask,du	mask unwanted bits OFF
	tze	0,1			no bits on, return
	qls	2			get EFR bits in Q 1-17
	eaa	0			set up A as incrementer
efr_loop:
	ada	1,dl			increment EFR slot number
	qls	1			is this bit on?
	tpnz	efr_loop			no, but some other bit on
	tze	0,1			no more EFR bits, return
	aos	lb|1,al			increment EFR counter
	tra	efr_loop			look for nxt EFR bit

cache_ctr_tab:
	epplb	wired_hardcore_data$cpu_a_cache_err_ctr_array
	epplb	wired_hardcore_data$cpu_b_cache_err_ctr_array
	epplb	wired_hardcore_data$cpu_c_cache_err_ctr_array
	epplb	wired_hardcore_data$cpu_d_cache_err_ctr_array
	epplb	wired_hardcore_data$cpu_e_cache_err_ctr_array
	epplb	wired_hardcore_data$cpu_f_cache_err_ctr_array
	epplb	wired_hardcore_data$cpu_g_cache_err_ctr_array
	epplb	wired_hardcore_data$cpu_h_cache_err_ctr_array
" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Internal subroutine for saving associative memory in the prds
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

save_am:
	eax3	4			4 instructions to execute
	eax6	3			initialy set for DPS8 (4 sets of 16)
	cmpx4	1,du			is it a DPS8 CPU?
	tze	sam1			yes, go execute code
	eax6	0			no, only 1 set for each type on L68

sam1:	xec	samt1-1,3			load LB with proper AM type
	lda	samt2-1,3			load instruction to execute in A
	sta	bp|mc.fim_temp		and save
	eax7	0,6			initialize counter
sam2:	eaq	0,7			copy to qu
	qls	4			multiply by 16
	cmpx3	2,du			is it for sdw_am_regs?
	tnz	*+2			xfwr if no
	qls	1			yes, make it times 32
	stcq	bp|mc.fim_temp,30		set quad offset
	xec	bp|mc.fim_temp		execute instruction
	eax7	-1,7			count down
	tpl	sam2			do next set
	eax3	-1,3			count down instructions to exucute
	tnz	sam1			go do next instuction set
	tra	0,1			return to caller

samt1:	epplb	prds$sdw_am_ptrs
	epplb	prds$sdw_am_regs
	epplb	prds$ptw_am_ptrs
	epplb	prds$ptw_am_regs

samt2:	ssdp	lb|0
	ssdr	lb|0
	sptp	lb|0
	sptr	lb|0

"

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Procedure to check if conditions are met for machine condition tracing
"	if conditions are not true for machine condition tracing, return is ic +1 (tra	0,0)
"	if conditions are met for machine condition tracing, then
"	return is ic +2 (tra   1,0), bb -> place to pick up history regs and
"	lb -> place to pick up machine conditions directly from machine condition trace buffer
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

check_mct:
	tsx1	save_fault_reg		save fault reg and get CPU type in x4
	szn	pds$mc_trace_sw		is this process tracing machine conditions?
	tpl	0,0			return to caller if no
	szn	pds$mc_trace_seg		Does user want to trace all M. Cs?
	tze	cp_hregs			xfer if seg number zero
	lda	bp|mc.scu.ppr.psr_word	look at the psr
	ana	scu.ppr.psr_mask,du		and out  everything except psr
	cmpa	pds$mc_trace_seg		compare psr to object we are tracing
	tze	cp_hregs			xfer if psr = object we are tracing
	lda	bp|mc.scu.tpr.tsr_word	look at tsr
	ana	scu.tpr.tsr_mask,du		and out everthing except tsr
	cmpa 	pds$mc_trace_seg		compare tsr to object we are tracing
	tnz	0,0			return to caller if psr or tsr don't have seg
cp_hregs:
	lprplb	pds$mc_trace_buf		get packed ptr to wired trace buffer
	stx0	lb|mctseg.x0save		safe store return address
	lxl5	lb|mctseg.hr_nxtad		x5 = rel ptr to next H. R. storage location
	cmpx5	lb|mctseg.hr_lim		do we have to roll over the trace?
	tmi	hr_roll			xfer if no
	ldx5	lb|mctseg.hr_strt		yes, pick up initial storage location
	sxl5	lb|mctseg.hr_nxtad		store new location
hr_roll:
	eax5	mctseg.hr_size,5		increment storage location
	sxl5	lb|mctseg.hr_nxtad		set rel ptr to next H. R. storage location
	eppbb	lb|-mctseg.hr_size,5	bb -> current HR storage location
	tsx0	force_hist_regs		go save history regs in mc_trace buf
	lprplb	pds$mc_trace_buf		get packed ptr to wired trace buffer
	ldx0	lb|mctseg.x0save		restore return address
	lxl5	lb|mctseg.mc_nxtad		x5 = rel ptr to next M. C. storage location
	cmpx5	lb|mctseg.mc_lim		do we have to roll over the trace?
	tmi	mc_roll			xfer if no
	ldx5	lb|mctseg.mc_strt		yes, pick up initial storage location
	sxl5	lb|mctseg.mc_nxtad		store new location
mc_roll:
	eax5	mctseg.mc_size,5		increment storage location
	sxl5	lb|mctseg.mc_nxtad		set rel ptr to next M. C. storage location
	epplb	lb|-mctseg.mc_size,5	lp -> current MC storage location
	mlr	(pr),(pr)			move the data to wired buffer
	desc9a	bp|0,mctseg.mc_size*4
	desc9a	lb|0,mctseg.mc_size*4
	tra	1,0			return to caller at ic +2


" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Procedure to reset mode registers to continue strobing
"	data into the history registers.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

reset_mode_reg:
	epplb	prds$cache_luf_reg	point to cache/luf reg setting
	lcpr	lb|0,02		set cache enable and full luf time

	lda	prds$mode_reg	retrieve template mode reg
	ora	mr.enable_mr+mr.enable_hist,dl  enable mode reg and enable hist regs
	sta	prds$mode_reg_enabled	save this mode reg value
	epplb	prds$mode_reg_enabled	get pointer to temp mode reg value
	lcpr	lb|0,04		reload the mode register
	tra	0,0			return to caller

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Procedures to suspend virtual time metering
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	even			anyone know why we do this?
v_time_init:
	tsx7	get_times		get fault time and virtual time

	ldi	0,dl		clear indicators as a service to our caller
	aos	pds$vtime_count	step virtual time count
	tpnz	0,0		if already set, don't meter

	staq	pds$time_v_temp	save for later
	tra	0,0



	odd			or this? actually, just why are they different?
fim_v_time_init:
	tsx7	get_times		get times

	ldi	0,dl		clear indicators as a service to our caller
	szn	pds$vtime_count	metering already?
	tpl	0,0		if so, return

	staq	pds$fim_v_temp	save current virtual time
	ldaq	pds$virtual_delta	save current delta
	staq	pds$fim_v_delta	..
	tra	0,0		and return to caller


fim_v_time_init_ext:
	eppbp	ap|2,*		let get_times clobber first arg
	eppbp	bp|-mc.fault_time	...
	tsx0	fim_v_time_init
	ldaq	pds$fim_v_temp	now, just like pds copies pds cells to stack...
	staq	ap|2,*		we drop them as output arguments
	ldaq	pds$fim_v_delta
	staq	ap|4,*
	short_return


	even
get_times:
	rccl	sys_info$clock_,*	read the clock
	staq	bp|mc.fault_time	save time of fault/interrupt
	sbaq	pds$cpu_time	compute virtual time
	tra	0,7		return to caller

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Procedures to reinstate virtual time metering
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	even
v_time_calc:
	lca	1,dl		decrement virtual time count
	asa	pds$vtime_count	..
	tpl	0,0		if others, don't meter

v_calc_join:
	rccl	sys_info$clock_,*	read the clock
	adl	96,dl		add in correction delta
	sbaq	pds$cpu_time	get current value of CPU time
	sbaq	pds$time_v_temp	get time we used
	staq	pds$time_v_temp	save temporarily

	adaq	pds$virtual_delta	compute virtual time increment
	staq	pds$virtual_delta	and save

	ldaq	pds$time_v_temp	time used in AQ again
	adaq	tc_data$delta_vcpu	compute total vcpu time
	staq	tc_data$delta_vcpu	..

	tra	0,0



	even
fim_v_time_calc:
	szn	pds$vtime_count	metering virtual time?
	tpl	0,0		if not, just return

	ldaq	pds$virtual_delta	get current virtual delta
	sbaq	pds$fim_v_delta	subtract original delta
	adaq	pds$fim_v_temp	correct FIM time
	staq	pds$time_v_temp	store corrected time
	tra	v_calc_join	join common code


fim_v_time_calc_ext:
	ldaq	ap|2,*		copy automatic values back to pds just like fim
	staq	pds$fim_v_temp
	ldaq	ap|4,*
	staq	pds$fim_v_delta
	tsx0	fim_v_time_calc
	short_return
" 

	include	stack_frame

" 

	include	stack_header
	include	mctseg

" 

	include	sys_trouble_codes

	include	mode_reg

	include	mc

" 

	include	fault_vector



	end
