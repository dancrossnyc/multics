" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" iom_interrupt:  IOM interrupt handler
" Stolen from iom_manager and ii November 1980 by C. Hornig
" Added loop protocol for IOM switch checking, January 1985 by M. Pandolf
"	see iom_connect$connect_and_identify for the other half of the protocol

	name	iom_interrupt

	segdef	interrupt_entry	" interrupt vector transfers here
	segdef	iilink		" ITS ptr to linkage section
	segdef	prds_prs		" ITS ptr to space for spri
	segdef	prds_scu		" ITS ptr to space for SCU

	tempd	hlr_arglist(4)	" argument list for interrupt handler
	tempd	time		" time handler called
	tempd	imw_save		" current IMW for scan
	temp	int_level		" interrupt level for handler (1 3 5 7)
	temp	index		" index for this channel
	temp	chantab_base	" offset in chantab for this IOM
	temp	device		" offset in per_device for this channel
	temp	chx		" channel index from chantab
	temp	int_count		" handlers called this time around

" Index register conventions:

"	X0 - internal subroutine calls.
"	X1 - index into devtab.
"	X2 - index into mailbox.
"	X3 - Used to index iomd.per_iom.
"	X4 - interrupt cell #.
"	X5 - interrupt level #.
"	X6 - index in status queue

" Pointer Register Conventions:

"	AP -> machine conditions
"	AB -> inetrnal calls
"	BP -> <iom_data>|0
"	BB -> mailbox for this IOM.
"	LP -> linkage section
"	LB -> status queue


" These are initialized by initialize_faults

	even
iilink:	its	-1,1		" our LP
prds_prs:	its	-1,1		" where to store PRs
prds_scu:	its	-1,1		" and CU info

three_args_nd:
	zero	6,4
zero:	zero	0

push_value:
	push

chanpos:				" table of chantab offsets
	zero	0,0*4*per_iom_size+32
	zero	0,1*4*per_iom_size+32
	zero	0,2*4*per_iom_size+32
	zero	0,3*4*per_iom_size+32
	zero	0,0*4*per_iom_size
	zero	0,1*4*per_iom_size
	zero	0,2*4*per_iom_size
	zero	0,3*4*per_iom_size
" 
" This entry is transferred to by the interrupt vector.
" It is responsible for calling the interrupt handlers of various DIM's
" for which interrupts have been stored in the IMW array.
" It calls the interrupt routine as follows:
"	call int_proc (idx, int_level, data_word)
" where int_level (1 3 5 7) corresponds to the level passed by the channel
" to the IOM and data_word in the system fault or special status word.

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+>

interrupt_entry:
	spri	prds_prs-*,ic*	" save pointer registers
	eppbp	prds_prs-*,ic*	" ab -> machine conditions
	sreg	bp|mc.regs	" save registers
	lxl7	bp|mc.scu.indicators_word
	canx7	scu.ir.mif,du	" check for EIS
	tze	2,ic		" so we can save
	spl	bp|mc.eis_info	" the pointers and lengths

	epplp	iilink-*,ic*	" set up LP

	tsx0	fim_util$v_time_init " meter virtual time

	tsx0	fim_util$check_interrupt " make sure we're not not prds

	tsx0	fim_util$check_mct	" go save M.C.s and hregs
				" if trace is on
	nop			" return ic +1

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Establish a stack frame and mask interrupts.
"
	epbpsb	prds$		" use prds
	ldx7	push_value-*,ic	" get size of stack frame
	tsx0	fim_util$push_stack	" push the frame

	tsx0	fim_util$set_mask	" mask to sys level

	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

	tsx0	fim_util$reset_mode_reg
				" turn on hist regs and cache
	ldq	bp|mc.scu.fault_data_word
	anq	scu.fi_num_mask,dl	" get the interrupt number
	qrl	scu.fi_num_shift
	eax4	0,ql		" interrupt cell in X4
" 
	anq	=7,dl		" get base channel table position
	lda	chanpos,ql
	sta	chantab_base	" save it for later

	eaa	0,x4		" get interrupt cell
	arl	18+2		" interrupt level in AL
	ora	=1,dl		" always odd
	sta	int_level		" save for handler

	ldaq	three_args_nd-*,ic	" Build argument list for handler
	staq	hlr_arglist	" call handler (index, int_level, ""b)
	epplb	index
	sprilb	hlr_arglist+2
	epplb	int_level
	sprilb	hlr_arglist+4
	epplb	zero-*,ic
	sprilb	hlr_arglist+6
"
"	set up to search IMW area
"
	eppbp	iom_data$
	stz	int_count		" no interrupts yet

"
"	wait until any IOM switch checking is completed
"

imw_wait:
	odd
	ldac	bp|iom_data.imw_lock
	tze	-1,ic		" loop while lock in transition
	tpl	imw_read
	sta	bp|iom_data.imw_lock" restore -1 into lock
	tra	imw_wait		" and continue looping

imw_read:
	aos	bp|iom_data.n_intr_procs " bump number of cpus handling interrupts
	aos	bp|iom_data.imw_lock " was 0 from ldac, now is 1

	ldac	iom_mailbox$+iom_mailbox_seg.imw_array_word,x4
	tze	null_int-*,ic	" no IMW bit set

	ldq	0,du		" make a fake float number
	lde	0,du
	lrl	1
	tra	imw_begin-*,ic	" start scanning

" Scan the IMW for any bits on and process these interrupts.

imw_retry:
	dfld	imw_save		" get back remaining bits
	tze	interrupt_return	" no bits left

imw_begin:
	ldi	0,dl		" clear hex and overflow bits
	fno
	era	=o200000,du	" clear the bit
	dfst	imw_save

	lda	imw_save		" get channel number
	ars	36-8		" in AL
	neg	0
	ada	chantab_base	" add chantab offset
	sta	index		" store in case of error

	mrl	(pr,al),(pr),fill(0) " Reference the channel table.
	desc9a	bp|iom_data.per_iom+per_iom.chantab_word,1
	desc9a	chx,4		" Word will be leading zero padded.

	eppap	hlr_arglist

	ldq	chx		" chx in QL
	tze	invalid_int-*,ic	" Ignore interrupt if channel not assigned.
	mpy	per_device_size,dl
	eax1	-per_device_size,ql	" index into per_device

	lda	bp|iom_data.per_device+per_device.flags,x1
				" is there a handler?
	cana	per_device.in_use,du
	tze	invalid_int-*,ic	" Return if no handler assigned.

	lda	bp|iom_data.per_device+per_device.index,x1
	sta	index		" save the handler's index
	stx1	device		" save per_device index for ext. call

	rccl	sys_info$clock_,*	" Get int_time now.
	staq	time		" And save it.

	short_call bp|iom_data.per_device+per_device.handler,x1*
				" Call handler.

	rccl	sys_info$clock_,*	" Get int_time again.
	sbaq	time		" Compute delta.

	eppbp	iom_data$		" re-establish addressability
	ldx1	device		" restore per_device offset
	adaq	bp|iom_data.per_device+per_device.interrupt_time,x1
	staq	bp|iom_data.per_device+per_device.interrupt_time,x1
	ldaq	bp|iom_data.per_device+per_device.interrupts,x1
	adl	=1,dl		" update meters
	staq	bp|iom_data.per_device+per_device.interrupts,x1
	aos	int_count		" count interrupts

	tra	imw_retry-*,ic	" find more interrupts


invalid_int:
	aos	bp|iom_data.invalid_interrupts
				" meter unexpected interrupts
	short_call iom_error$invalid_interrupt
				" and tell the world
	eppbp	iom_data$		" re-establish addressability
	tra	imw_retry-*,ic	" find more channels
" 
null_int:				" meter interrupts with null IMW
	aos	bp|iom_data.null_interrupts

interrupt_return:
	lda	int_count		" meter multiple interrupts
	cmpa	=1,dl
	tmoz	2,ic
	aos	bp|iom_data.multiple_interrupts

	ldaq	tc_data$interrupt_count
	adl	1,dl		" count interrupts
	staq	tc_data$interrupt_count

	odd
	ldac	bp|iom_data.imw_lock
	tze	-1,ic		" loop while lock in transition

	lcq	1,dl		" decrement count of cpus in interrupt handler
	asq	bp|iom_data.n_intr_procs

	sta	bp|iom_data.imw_lock

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Relinquish stack frame and open interrupt mask.
"
	eppbp	prds_prs-*,ic*	" restore MC ptr

	tsx0	fim_util$restore_mask
	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>

	epbpsb	sp|0		get ptr to base of stack
	sprisp	sb|stack_header.stack_end_ptr  pop our stack frame

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Perform interrupt metering and exit.
"
	ldaq	bp|mc.fault_time	" get fault time
	ana	=o777777,dl	" clear CPU type
	staq	prds$iitemp	" save for now
	rccl	sys_info$clock_,*	" read the clock
	sbaq	prds$iitemp	" compute real time spent
	adaq	tc_data$interrupt_time " add in to total
	staq	tc_data$interrupt_time "	..

	odd
	tsx0	fim_util$v_time_calc " compute virtual time

	lxl1	bp|mc.scu.indicators_word
	canx1	scu.ir.mif,du	" check for EIS if not don't reload pl
	tze	2,ic
	lpl	bp|mc.eis_info	restore pointers and lengths
	lreg	bp|mc.regs	and registers
	lpri	prds_prs-*,ic*	restore prs
	rcu	prds_scu-*,ic*	and dismiss the interrupt
" 
	include	iom_data
	include	mc
	include	stack_header

	end
