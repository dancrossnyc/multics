/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


deactivate_segs: proc (a_pds_astep);

/* DEACTIVATE_SEGS -- remove all traces of a stopped process from the system */

/* Modified by R. Bratt 2/11/75 to lock the ast before attempting to delete trailers
   and to avoid attempting to delete trailers for hardcore segment numbers
   modified April 1975 by R. Bratt for new KST / RNT system
   modified April 1975 by R. Bratt for new access in KST / SDW scheme
   modified June 1976 by B. Greenberg to leave KST visible in trailer crashes.
   modified 06/76 by D. Vinograd to handle backup_abs_seg.
   modified Oct 31 76 by Greenberg for pc$truncate_deposit_all (stop losing dseg pages).
   modified 02/22/77 by THVV for dsegs with branches
   Modified 03/21/81, W. Olin Sibert, for ADP PTWs and get_ptrs_$given_sdw
   Modified 04/16/81, WOS, for sdw_util_, and to remove obsolete PDS unwiring code.
   Modified March 1982, J. Bongiovanni, to make sure KST exists before using it
   */

dcl  a_pds_astep pointer parameter;

dcl  asp pointer;					/* Pointer to abs_seg$ (overlays assorted segmets) */
dcl  drsp pointer;					/* Pointer to dir_seg$ (overlays the dead KST) */
dcl (dstep, kst_astep, pds_astep, seg_astep) pointer;	/* Assorted ASTEPs */
dcl  tsdw fixed bin (71);
dcl  tsdwp pointer;
dcl  rdstep bit (18) aligned;
dcl (highseg, hcscnt, rel_dstep, i) fixed bin;
dcl  sdw_address fixed bin (26);
dcl  sdwp pointer;

dcl  bit18 bit (18) aligned based;
dcl  based_ptr ptr based;
dcl  sdwa (0 : 1023) fixed bin (71) aligned based;	/* DSEG overlay */

dcl  abs_seg$ fixed bin external static;
dcl  backup_abs_seg$ external static;
dcl  dir_seg$ fixed bin ext external static;

dcl  pds$dstep bit (18) external static;
dcl  sst_seg$ external static;

dcl  check_trailer entry (fixed bin) returns (bit (1) aligned);
dcl  get_ptrs_$given_astep entry (ptr) returns (fixed bin (71));
dcl  get_ptrs_$given_sdw entry (pointer) returns (pointer);
dcl  grab_aste$release entry (ptr);
dcl  grab_aste$release_prewithdraw entry (ptr);
dcl  lock$lock_ast entry ();
dcl  lock$unlock_ast entry ();
dcl  pmut$swap_sdw entry (ptr, ptr);
dcl  setfaults$deltrailer entry (ptr, fixed bin (17), fixed bin (17));
dcl  sdw_util_$get_address entry (pointer, fixed bin (26));
dcl  syserr entry options (variable);

dcl (baseno, ptr, rel, addr, fixed, null) builtin;

/*  */

	pds_astep = a_pds_astep;			/* copy argument */
	asp = addr (abs_seg$);			/* get needed pointers */
	drsp = addr (dir_seg$);
	tsdwp = addr (tsdw);
	tsdw = get_ptrs_$given_astep (pds_astep);	/* get pointer to PDS of process being deactivated */
	call pmut$swap_sdw (asp, tsdwp);		/* make abs_seg point to the PDS */

	rdstep = ptr (asp, rel (addr (pds$dstep))) -> bit18; /* get dstep from the PDS */
	dstep = ptr (addr (sst_seg$), rdstep);		/* get a pointer to the DSEG ASTE */
	kstp = ptr (asp, rel (addr (pds$kstp))) -> based_ptr; /* get pointer in HIS process to KST */

	tsdw = get_ptrs_$given_astep (dstep);		/* look at the DSEG */
	call pmut$swap_sdw (asp, tsdwp);		/* make the ABS-SEG work */

	if kstp ^= null () then do;
	     kst_astep = get_ptrs_$given_sdw (addr (asp -> sdwa (fixed (baseno (kstp), 18))));
	     tsdw = get_ptrs_$given_astep (kst_astep);	/* make abs_seg point to the KST */
	     call pmut$swap_sdw (drsp, tsdwp);
	     highseg = drsp -> kst.highest_used_segno;	/* copy highseg from the KST header */
	     hcscnt = drsp -> kst.lowseg;		/* get the hardcore seg count for later */
	     call grab_aste$release (kst_astep);		/* Release the KST aste */
	end;

/* Used to unwire any wired PDS pages here, but since the PDS is no longer used as a ring zero stack,
   there is no need to do this any more. First page won't be wired, either, because process is stopped,
   and has been unloaded. */

	call grab_aste$release_prewithdraw (pds_astep);	/* Release the PDS aste */

	if kstp ^= null () then do;
	     rel_dstep = fixed (rdstep, 18);		/* get rel(dstep) for deltrailer call */
	     tsdw = get_ptrs_$given_astep (dstep);	/* make the abs_seg point to the descriptor segment */
	     call pmut$swap_sdw (asp, tsdwp);
	     call lock$lock_ast;
	     do i = hcscnt + 1 to highseg,		/* loop through the KST entries */
		fixed (baseno (addr (backup_abs_seg$)), 18); /* And the backup_abs_seg, just in case */

		sdwp = addr (asp -> sdwa (i));
		call sdw_util_$get_address (sdwp, sdw_address);
		if sdw_address ^= 0 then do;
		     seg_astep = get_ptrs_$given_sdw (sdwp);
		     call setfaults$deltrailer (seg_astep, i, rel_dstep); /* delete the trailer */
		end;
	     end;

/* this check has been disabled for efficiency considerations, and beecause the
   class of software problems which caused it to go off have all been fixed.
   It should be made enablable by a tuning parameter if it is felt to be
   needed in the future.
   */

	     if "0"b then
		if check_trailer (rel_dstep) then
		     call syserr (1, "deactivate_segs: unflushed trailer");

	     call lock$unlock_ast;
	end;

/* Done with dseg */

	call grab_aste$release_prewithdraw (dstep);	/* release the DSEG aste */

	tsdw = 0;
	call pmut$swap_sdw (asp, tsdwp);		/* Clean up dseg */
	call pmut$swap_sdw (drsp, tsdwp);
	return;

%page; %include aste;
%page; %include kst;

/*  */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   deactivate_segs: unflushed trailer

   S: $crash

   T: $run

   M: After destroying a process, the system found that some system trailer
   (specifying connection of that process to some segment) still exists
   for that process in str_seg. This indicates that some segment was
   improperly disconnected from the process at some time. $err

   A: $recover

   END MESSAGE DOCUMENTATION */

     end deactivate_segs;
