/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

initialize_kst: proc ();

/* Initialize_kst is called during system initialization and process creation
   to initialize the Known Segment Table and the Reference Name Table.

   LAST MODIFIED:
   Feb 1983 by E. N. Kittlitz to set kst.allow_256K_connect for inzr
   Nov 1979 by Mike Grady to set pds$max_lot_size to kst size for inzr
   June 1979 by Mike Grady to not set stack_base_segno to pds for stack sharing
   September 1977 by B. Greenberg to keep Initialhzer KST below initsegs during initialization.
   March 1977 by M. Weaver to move rnt, search rule initialization to makestack
   October 1975 by R. Bratt to not preinitialize all kstes
   October 1975 by R. Bratt for prelinking
   March 1975 by R. Bratt for the new KST / RNT

   USAGE: - - - call initialize_kst();

   */

% include kst;
% include slt;

dcl (baseno, addr, fixed, string) builtin;


dcl  first_time bit (1),
     this_is_initializer bit (1),
     highseg fixed bin,
     i fixed bin;

dcl  kst_seg$ ext,
     slt$ ext,
     pds$max_lot_size (0:7) fixed bin ext,
     pds$processid bit (36) aligned ext,
     tc_data$initializer_id bit (36) aligned ext,

     dseg$ (0: 1) fixed bin (71) ext,
     active_all_rings_data$stack_base_segno fixed bin (18) ext, /* segno of first stack segment */
    (active_all_rings_data$hcscnt, active_all_rings_data$max_segno) ext fixed bin (17),
     pds$ fixed bin ext;


	kstp = addr (kst_seg$);			/* Get a pointer to the KST seg */
	this_is_initializer = (pds$processid = tc_data$initializer_id); /* set initializer flag */

	if this_is_initializer then
	     if kst.lowseg ^= 0 then
	          first_time = "0"b;
	     else first_time = "1"b;

	if this_is_initializer & first_time then do;
	     highseg = addr (slt$) -> slt.first_init_seg - 1;
	     kst.allow_256K_connect = "1"b;
	end;
	else highseg = active_all_rings_data$max_segno;

	if this_is_initializer & ^first_time then do;
	     kst.highseg = highseg;			/* Expand mx limit, init segs gone. */
	     pds$max_lot_size (*) = highseg + 1;
	     return;
	end;

	pds$kstp = kstp;				/* initialize pointer to kst */
	if string (kst.prelinked_ring) = "0"b
	then do;					/* only initialize if not prelinked process */
	     kst.lowseg = active_all_rings_data$hcscnt;
	     if kst.highseg = 0 then kst.highseg = highseg;
	     kst.highest_used_segno = kst.lowseg + 7;
	     kst.free_list = "0"b;
						/* reserve kstes for stacks */
	     do i = kst.lowseg to kst.lowseg + 7;
		kst.kst_entry (i).fp = (18)"1"b;
		kst.kst_entry (i).segno = i;
	     end;
	end;

	return;



     end initialize_kst;
