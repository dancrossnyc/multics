/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
init_proc: proc;

/* This program is the first program executed (in ring 0) in a user, absentee, or
   daemon process. It is entered from special code in pxss via a return pointer
   left in the stack by build_template_pds. It is also called explicitly during
   initialization to get the initializer process into the user ring.

   Last modified (date and reason):
   8/15/74  by S.Webber --  completely recoded to make references to the pit.

   76/04/29 by T. Casey to fix bug in implementation of "-initproc path,direct",
   *		allow path to be relative to homedir,
   *		and to replace all instances of call syserr (2,...) (print with alarm and terminate process) by
   *		call syserr (4,...) or (3,...) (log, or print with alarm), followed by
   *		direct calls to terminate_proc$init_failure with a relevant error_table_ code.
   77/03/29 by M. Weaver to call makestack explicitly because of moving search rules to user ring
   79/03/01 by B. Margulies to set the working dir BEFORE calling makestack
   79/03/05 by B. Margulies to never set the working directory for users without
   v_init_proc.
   79/17/06 by B. Margulies to fix uninitialized variable bug introduced by
   above.
   79/07/14 by Mike Grady for ring 0 stack sharing
   81/10/05 by B. Margulies for new call_out mechanism.
   81/11/23 by B. Margulies for new initial procedure.
   84/11/05 by K. Loepere to rename terminate to terminate_.
   Modified 1984-11-11 by E. Swenson for IPC event channel validation.
   Here we set the value of apte.ipc_r_factor.
*/

/* Automatic */

dcl  (pp, caller_ptr) ptr;
dcl  (i, j) fixed bin;
dcl  (d_len, e_len, hd_len, less_thans, po_len) fixed bin;
dcl  code fixed bin (35);
dcl  dirname char (168);
dcl  initial_proc char (32);
dcl  temp fixed bin (71);

/* Entries */

dcl  makestack entry (fixed bin);
dcl  fs_search$set_wdir entry (char (*), fixed bin (35));
dcl  terminate_$noname entry (ptr, fixed bin (35));
dcl  pmut$set_mask entry (fixed bin (71), fixed bin (71));
dcl  level$set entry (fixed bin);
dcl  (syserr, syserr$error_code) entry options (variable);
dcl  terminate_proc$init_failure entry (fixed bin (35));
dcl  initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  initialize_kst entry;
dcl  pathname_am$initialize ext entry;
dcl  call_outer_ring_ entry (ptr, char (*), char (*), fixed bin (3), fixed bin (35));

/* External */

dcl  scs$open_level fixed bin (71) ext;
dcl  pds$stack_0_ptr ptr ext;
dcl  pds$stacks (0:7) ptr ext;
dcl  pds$process_dir_name char (32) aligned ext;
dcl  pds$process_group_id char (32) aligned ext;
dcl  pds$initial_ring fixed bin ext;
dcl  pds$apt_ptr pointer external;
dcl  error_table_$badpath ext fixed bin (35);
dcl  error_table_$bad_process_type ext fixed bin (35);

/* Constants */

dcl  (addr, index, length, null, reverse, rtrim, search, substr, verify) builtin;
%page;
/* First get a pointer to the PIT. Do this with a call to initiate since we know our process directory name */

	call pathname_am$initialize ();		/* initialize associative memory before doing anything */
	call initialize_kst;			/* before initiate can be called we must have a KST */

	pds$stacks (0) = pds$stack_0_ptr;

	call level$set (pds$initial_ring);		/* set user ring validation level before initiating */
	call pmut$set_mask (scs$open_level, temp);
						/* Now dispatch on the process type */

/* our goal is to establish wdir before calling makestack, so as to allow
   the user to substitute a signal_ or unwinder_ if she has v_init_proc.
   In order to do this we must initiate pit to check attribute.
   Luckily, if you call initiate without a refname it doesnt attempt to
   use the rnt, which isnt there yet. We would like to call initiate with
   the refname of "pit_", but as it is we will have to leave that for the
   user ring to do. */

	call initiate ((pds$process_dir_name), "pit", "", (0), (0), pp, code);
	if pp = null then do;
	     call syserr$error_code (3, code, "init_proc: could not get pointer to pit for ^a", pds$process_group_id);
	     call terminate_proc$init_failure (code);
	end;

	if pp -> pit.process_type = 0 then		/* initializer */
	     initial_proc = "system_startup_";

	else if pp -> pit.process_type < 4 then		/* interactive, absentee, or daemon */
	     initial_proc = "initialize_process_";

	else do;
	     call syserr$error_code (3, "init_proc: bad process type (^d) given for ^a",
		pp -> pit.process_type, pds$process_group_id);
	     call terminate_proc$init_failure (error_table_$bad_process_type);
	end;

	if initial_proc ^= "system_startup_" then	/* skip this setting for initializer as vol may not be there */
	     if pp -> pit.at.vinitproc then		/* if user is allowed to have his own process overseer */
		call fs_search$set_wdir (pp -> pit.homedir, (0)); /* set initial working dir to homedir */
						/* Otherwise avoid
						   * setting wdir, so user can't violate vinitproc restriction
						   * by putting a copy of xxxx_init_admin_ in his homedir */

/* The error code from fs_search is ignored; if we can't
   * set a working dir we do the best we can without one */

	call makestack (pds$initial_ring);		/* create stack, RNT and search rules */


/* Now initialize more of the process */

/* * Now get a pointer to the initial procedure - the first one to be executed in the user's initial ring.
   *
   * The default initial procedure for a user is user_init_admin_ for an interactive process, or absentee_init_admin_
   * for an absentee process. The proper one was selected above (its name being stored in initial_proc) as a function
   * of the process type. The initial procedure calls the login responder (also known as the process overseer).
   *
   * The default process overseer for a user is process_overseer_.
   *
   * It is possible for a procedure to be specified, either in the user's pdt entry, or by the user on the login line,
   * to be called instead of one of these two default procedures. The keyword "initproc" is used to identify this
   * procedure in both cases, and the keyword "direct" is used to indicate that the procedure is to be called directly,
   * in place of the default initial procedure, rather than being called by the default initial procedure
   * in place of the default process overseer. It is the "direct" case which we must check for here.
   *
   * By default, we do not use the referencing_dir search rule when searching for the initial procedure. This
   * allows a user to have an initial procedure of the same name as the default, in his home directory, and have
   * it used instead of the installed one. This will only happen if the user has the vinitproc attribute,
   * since, to enforce vinitproc, we put off setting his working directory to his home directory until
   * after we get the pointer to the initial procedure, if he does not have that attribute.
*/

	caller_ptr = null;				/* caller_ptr points to something in the referencing directory */

/* * The implementation of the "direct" feature is being changed, in stages.
   * Originally, this procedure was to scan for the string ",direct" at the end of the process overseer name,
   * and upon finding it, eliminate that string, and call the procedure specified by the remainder of the pathname, directly.
   * Then, the switch, pit.dont_call_init_admin was defined, and parts of the answering service were changed to
   * check for the string ",direct", and upon finding it, eliminate it from the pathname and turn on that switch.
   * However, some parts of the answering service do not check for the string or set the switch, so for now,
   * this procedure must check for both indications, and must be sure to eliminate the string ",direct" from the pathname
   * before attempting to get a pointer to the segment, even when the switch is found to be on.
   * The lines that check for ",direct" may be deleted after all parts of the answering service have been changed to
   * eliminate that string from the pathname and turn on the switch.
*/

	po_len = -1 + index (pp -> pit.login_responder, ",direct"); /* look for ",direct" */
	if po_len >= 0 then goto direct;		/* ",direct" is there, and
						   po_len is the length of the pathname that preceeds it */

	if pp -> pit.dont_call_init_admin then do;	/* check for the "direct" option */
						/* compute length of pathname without trailing blanks */
	     po_len = length (rtrim (pp -> pit.login_responder));

direct:						/* come here if ",direct" is in the process overseer pathname */

/* If string contains any ">" or "<" characters, it is a pathname */
	     e_len = -1 + search (reverse (substr (pp -> pit.login_responder, 1, po_len)), "<>"); /* see if it does */

	     if e_len >= 0 then do;			/* it is a pathname, and e_len is the length of the entryname */
		d_len = po_len - e_len - 1;		/* compute length of dirname part */

/* * Since expand_path_ is not available in ring zero, and it does not have
   * an ideal interface for use in this stage of process initialization anyway,
   * we do the equivalent pathname parsing in-line. This algorithm is copied from
   * expand_path_, modified to avoid unnecessary generality.
*/

		initial_proc = substr (pp -> pit.login_responder, d_len + 2, e_len); /* copy the entryname */
		if substr (pp -> pit.login_responder, 1, 1) = ">" then /* if we have a full pathname */
		     dirname = substr (pp -> pit.login_responder, 1, d_len); /* just copy the directory portion */

		else do;				/* relative pathname - build dirname, using pit.homedir */
		     hd_len = length (pp -> pit.homedir) - verify (reverse (pp -> pit.homedir), " ") + 1;
						/* compute length of home directory */
		     less_thans = -1 + verify (substr (pp -> pit.login_responder, 1, d_len + 2), "<");
						/* count leading "<"s */
						/* if there is nothing but "<"s before the entry name, the verify
						   gives the index of the first char of the entry name,
						   and the -1 makes the less_than count correct */
		     if index (substr (pp -> pit.login_responder, 1 + less_thans, d_len - less_thans + 1), "<") > 0 then do;
						/* if any non-leading less thans, bad syntax in path */
bad_path:			call syserr (4, "init_proc: bad syntax in initial procedure name: ^a for ^a",
			     pp -> pit.login_responder, pds$process_group_id);
			call terminate_proc$init_failure (error_table_$badpath);
		     end;

		     do i = 1 to less_thans;		/* if there are no less thans, this loop is skipped */
			j = index (reverse (substr (pp -> pit.homedir, 1, hd_len)), ">");
						/* back up thru "less_thans" components and ">"s */
			if j = 0 then		/* if no more left, too many "<"s */
			     goto bad_path;		/* just say bad path - don't bother with details */
			hd_len = hd_len - j;	/* shorten hd len by length of component and its leading ">" */
		     end;				/* end less thans loop */

		     if hd_len > 166 then		/* just a formality */
			goto bad_path;
		     if hd_len + d_len - less_thans + e_len + 2 > 168 then /* not just a formality */
			goto bad_path;		/* path too long */

/* now build the directory portion of the pathname */

		     if hd_len > 0 then		/* if the less thans did not get us back to the root */
			substr (dirname, 1, hd_len) = substr (pp -> pit.homedir, 1, hd_len);
		     if d_len - less_thans > 0 then do; /* if <dir>ent rather than <ent */
			substr (dirname, hd_len + 1, 1) = ">"; /* fill in ">dir" */
			substr (dirname, hd_len + 2) = substr (pp -> pit.login_responder, less_thans + 1, d_len - less_thans);
		     end;

		end;				/* end relative pathname */


/* * Try to initiate the segment specified by that pathname. Note that the pointer to it goes into caller_ptr,
   * which is used below, in the call to call_outer_ring_, to indicate the referencing directory.
*/

		call initiate (dirname, initial_proc, initial_proc, 0, 0, caller_ptr, code);
		if caller_ptr = null then do;		/* code could be error_table_$segknown if process is prelinked */
		     call syserr$error_code (4, code, "init_proc: can not get pointer to initial procedure: ^a>^a for ^a",
			dirname, initial_proc, pds$process_group_id);
		     call terminate_proc$init_failure (code);
		end;
	     end;					/* end pathname */

/* End of in-line expand_path_   */

	     else initial_proc = substr (pp -> pit.login_responder, 1, po_len); /* must be an entry name */

	end;					/* end dont_call_init_admin (call process overseer directly) */

	call terminate_$noname (pp, code);		/* terminate the pit */

/**** The following code sets the value of apte.ipc_r_factor used in
      conjunction with apte.ipc_r_offset for IPC event channel
      validation.  apte.ipc_r_offset was set in act_proc, and
      apte.ipc_r_factor is set here to allow for an unpredictable delay
      between setting the two values.  This makes it difficult to
      guess the value of apte.ipc_r_factor given the value of
      apte.ipc_r_offset.

      Note we are modifying our own apte here.  This should be ok since
      we can be sure that no one else will attempt to modify this value,
      and that the apte is not going anywhere while we are executing
      here in ring-0. */

	aptep = pds$apt_ptr;
	apte.ipc_r_factor =
	     binary (substr (bit (binary (clock (), 54), 54), 19, 36), 35);

/* Now call out. this program does all the work of snapping the link */
/* caller_ptr will be nonnull if there was a pathname */

	call call_outer_ring_ (caller_ptr, initial_proc, initial_proc, (pds$initial_ring), code);

	if code ^= 0 then do;
	     call syserr$error_code (4, code, "init_proc: can not call out to initial procedure: ^a for ^a",
		initial_proc, pds$process_group_id);
	     call terminate_proc$init_failure (code);
	end;

/* format: off */
%page; %include apte;
%page; %include pit;
%page; %include user_attributes;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   init_proc: could not get pointer to pit for PERSON.PROJ.T ERROR_MESSAGE

   S:	$beep

   T:	$run

   M:	The answering service has created
   the process directory for a new process incorrectly.
   The user cannot be logged in.

   A:	$contact


   Message:
   init_proc: bad process type (N) given for PERSON.PROJ.T

   S:	$beep

   T:	$run

   M:	The answering service has specified an
   unknown integer in the process type field.
   Incorrect arguments were passed to hphcs_$create_proc.
   The user cannot be logged in.

   A:	$contact


   Message:
   init_proc: bad syntax in initial procedure name: STRING for PERSON.PROJ.T

   S:	$log

   T:	$run

   M:	An illegal initial procedure name was specified for the user.
   The user may have given an incorrect -po argument, or the project's PDT may be wrong.
   No process is created.

   A:	$ignore


   Message:
   init_proc: can not get pointer to initial procedure: PATH for PERSON.PROJ.T ERROR_MESSAGE

   S:	$log

   T:	$run

   M:	The supervisor could not initiate the specified initial procedure PATH.
   The process overseer may be in invalid form, inaccessible, or missing.
   The user may have given an incorrect -po argument, or the project's PDT may be incorrect.

   A:	$ignore


   Message:
   init_proc: can not call out to initial procedure: NAME for PERSON.PROJ.T ERROR_MESSAGE

   S:	$log

   T:	$run

   M:	The supervisor could not snap a link to NAME$NAME.
   The process overseer may be in invalid form, inaccessible, or missing.
   The user may have given an incorrect -po argument, or the project's PDT may be incorrect.

   A:	$ignore


   END MESSAGE DOCUMENTATION */
/* format: on */

     end init_proc;
