/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


get_process_usage:
     procedure (process_usage_pointer, code);

/*

   Last Modified:

   09/17/76 by R. Bratt to add seg_fault, bound_fault, vtoc_read, and vtoc_write meters.
   01/08/85 by Keith Loepere to delete pd_page_faults.
*/

declare  code fixed bin (35),
         pds$apt_ptr ext pointer,
         pds$cpu_time fixed bin (71) ext,
         pds$virtual_delta fixed bin (71) ext,
         pds$page_waits fixed bin (35) ext,
         pds$segment_faults fixed bin (35) ext,
         pds$bounds_faults fixed bin (35) ext,
         pds$vtoc_reads fixed bin (35) ext,
         pds$vtoc_writes fixed bin (35) ext,
         clock_ entry returns (fixed bin (52));

/*  */

	process_usage.number_can_return = 9;		/* current number we can return */
	code = 0;					/* currently no error code can be returned */
	aptep = pds$apt_ptr;

	if number_wanted < 1 then return;
	process_usage.cpu_time = clock_ ()-pds$cpu_time;

	if number_wanted < 2 then return;
	process_usage.paging_measure = apte.paging_measure;

	if number_wanted < 3 then return;
	process_usage.page_faults = pds$page_waits;

	if number_wanted < 4 then return;
	process_usage.pd_faults = 0;			/* paging device */

	if number_wanted < 5 then return;
	process_usage.virtual_cpu_time = clock_ () - pds$cpu_time - pds$virtual_delta;

	if number_wanted < 6 then return;
	process_usage.segment_faults = pds$segment_faults;

	if number_wanted < 7 then return;
	process_usage.bounds_faults = pds$bounds_faults;

	if number_wanted < 8 then return;
	process_usage.vtoc_reads = pds$vtoc_reads;

	if number_wanted < 9 then return;
	process_usage.vtoc_writes = pds$vtoc_writes;


	return;

/*  */

%include apte;

/*  */

%include process_usage;

     end;
