/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


copy_stack_0:
	proc (processid, to_ptr, code);
	
/*     Copies the stack_0 assigned to a specified process

       This routine examines stack_0_data for an active stack_0
       assigned to the specified apte.  If found, it is copied
       to the specified location using initializer_abs_seg;
       otherwise, an error code is returned.

       Written March 1981 by J. Bongiovanni							*/
	
	
/* Parameter */

	dcl processid bit (36) aligned;		/* process id which owns stack		*/
	dcl to_ptr ptr;				/* where to copy stack_0			*/
	dcl code fixed bin (35);			/* error code				*/
	
/* Automatic */

	dcl paptep bit (18);
	dcl sdte_found bit (1);
	dcl sdte_inx fixed bin;
	dcl stack_ptr ptr;
	dcl stack_sdw bit (72) aligned;
	dcl stack_sdw_ptr ptr;
	dcl stack_size fixed bin (19);
	
/* Based */

	dcl stack_copy (stack_size) fixed bin (35) aligned based;
	
/* The following include files are referenced at the end of the program:

	sdw
          stack_0_data
*/
	
/* External */

	dcl initializer_abs_seg$ external;
	dcl error_table_$bad_arg fixed bin (35) external;
	dcl error_table_$stack_not_active fixed bin (35) external;
	dcl sst$ external;
	
/* Entry */

	dcl get_ptrs_$given_astep entry (ptr) returns (bit (72) aligned);
	dcl privileged_mode_ut$swap_sdw entry (ptr, ptr);
	dcl sdw_util_$get_size entry (pointer, fixed bin (19));
	
	%page;
/* Check sdt for a stack belonging to this processid						*/
	
	code = 0;
	sdtp = addr (stack_0_data$);
	paptep = substr (processid, 1, 18);		/* apte offset				*/
	if paptep="0"b then do;			/* null offset - invalid			*/
	     code = error_table_$bad_arg;
	     return;
	end;
	
	     
	
	sdte_found = "0"b;
	do sdte_inx = 1 repeat sdte_inx + 1
	     while (sdte_inx<=sdt.num_stacks&^sdte_found);
	     if stacks (sdte_inx).aptep=paptep then sdte_found = "1"b;
	end;
	
	if ^sdte_found then do;
	     code = error_table_$stack_not_active;
	     return;
	end;
	
	sdtep = addr (sdt.stacks (sdte_inx-1));
	stack_ptr = addr (initializer_abs_seg$);
	stack_sdw_ptr = addr (stack_sdw);
	stack_sdw = get_ptrs_$given_astep (ptr (addr (sst$), sdte.astep));	/* build sdw for stack	*/
	call sdw_util_$get_size (addr (stack_sdw), stack_size);
	
	call privileged_mode_ut$swap_sdw (stack_ptr, stack_sdw_ptr);	/* initializer_abs_seg is now stack	*/
	
	to_ptr -> stack_copy = stack_ptr -> stack_copy;
	
	stack_sdw = "0"b;
	call privileged_mode_ut$swap_sdw (stack_ptr, stack_sdw_ptr);
	
	return;
	
	%page;
	%include stack_0_data;
	
end copy_stack_0;

	
	
	
	