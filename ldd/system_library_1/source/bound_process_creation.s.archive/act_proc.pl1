/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-05-09,Fawcett), approve(88-05-10,MCR7904),
     audit(88-06-24,Farley), install(88-08-22,MR12.2-1087):
     This change provides a cleanup based on the evolution of process creation.
                                                   END HISTORY COMMENTS */


/* format: style4 */

/* ACT_PROC -	Procedure to create and/or activate a process
   .		This procedure assumes that the calling process has directory privileges,
   .		so that it can create the KST, PDS, and PIT in the new, upgraded process directory.

   Last Modified: (Date and reason)
   08/05/71 by Richard H. Gumpertz to combine pds, pdf
   08/10/72 by Richard G. Bratt to implement "no permanent storage" users
   740726 by PG to add AIM & audit info
   741210 by PG to use privileged initiate on KST, PDS, and PIT.
   750601 by RE Mullen (for priority scheduler) to call set_work_class
   10/13/75 by R. Bratt for prelinking
   760101 by REM for for deadline scheduler
   03/23/76 by S. Webber for new reconfiguration
   02/22/77 by THVV for dsegs with branches
   May 1978 by T. Casey to use active_hardcore_data$pdir_quota as a default value rather than an upper limit on pdir quotas,
   .		giving system and project administrators complete flexibility in using the per-user pdir quota mechanism.
   August 1978 by Greenberg for variable-size DSEG's and KST's.
   May 1979 by Mike Grady for ring 0 stack sharing.
   Modified July 1979 by T. Casey for MR8.0 to add set_pit_tty_info entry point for process preservation across hangups.
   Modified January 1981 by Benson I. Margulies for change of outer module on reconnection.
   Modified February 1983 by E. N. Kittlitz for default kst 256k connection enabling.
   Modified October 1984 by Keith Loepere to use fs_modes.
   Modified 1984-11-11 by E. Swenson for IPC event channel validation;
   act_proc$create initializes apte.ipc_r_offset.
   Modified December 1984 by Keith Loepere to set pds$throttle_segment_state_changes.
   Modified December 1984 by Keith Loepere for pdir_dir_quota.
*/

act_proc: procedure;

/* Variables */

dcl  PRELINKED_DIR char (64);
dcl  abs_ptr ptr;
dcl  bc fixed bin (24);
dcl  evolution fixed bin (17);			/* tracks the creation of a process */
dcl  1 branch_info like create_branch_info aligned;	/* need auto store for this structure  */
dcl  clr_size fixed bin;
dcl  code fixed bin (35);
dcl  ignore_code fixed bin (35);
dcl  cp ptr;
dcl  daemon_sw bit (1) aligned;
dcl  dbr fixed bin (71);
dcl  1 dir_acl (3) aligned,				/* structure for placing 3 ACLs on directories */
       2 userid char (32),
       2 mode bit (36),
       2 status_code fixed bin (35);
dcl  dir_aclp ptr;
dcl  dseg_ptr ptr;
dcl  dseg_size fixed bin (19);
dcl  dstep ptr;
dcl  esw fixed bin;
dcl  hd char (32);
dcl  i fixed bin;
dcl  is_absentee bit (1) aligned;
dcl  kst_ptr ptr;
dcl  kst_size fixed bin (19);
dcl  local_audit_event_flags bit (36) aligned;
dcl  lot_size fixed bin;
dcl  max_authorization bit (72) aligned;
dcl  max_lot fixed bin;
dcl  n fixed bin;
dcl  p ptr;
dcl  p1 ptr;
dcl  p2 ptr;
dcl  pdir_dir_quota fixed bin (17);
dcl  pdir_entry char (15);
dcl  pdir_path char (32);
dcl  pdir_quota fixed bin (17);
dcl  pds_astep ptr;
dcl  pds_ptr ptr;
dcl  pid bit (36) aligned;
dcl  process_authorization bit (72) aligned;
dcl  process_group char (32) aligned;
dcl  rings (3) fixed bin (3);
dcl  savring fixed bin;
dcl  1 seg_acl (3) aligned,				/* structure for placing 3 ACLs on segments */
       2 userid char (32),
       2 mode bit (36),
       2 exmode bit (36),
       2 status_code fixed bin (35);
dcl  seg_aclp ptr;
dcl  seg_rb (3) fixed bin;
dcl  segno fixed bin;
dcl  stop_type bit (1) aligned;
dcl  template_dsegp ptr;
dcl  template_kstp ptr;
dcl  tsdw fixed bin (71);
dcl  work_class fixed bin;

/* Based */

dcl  1 ack_name aligned based,
       2 person char (32),
       2 project char (32),
       2 tag char (1);
dcl  based_dseg (0:n) fixed bin (71) based;
dcl  copy_audit bit (36) aligned based;
dcl  copy_authorization bit (72) aligned based;
dcl  copy_chn_name fixed bin (71) based;
dcl  copy_data (n) fixed bin based;
dcl  copy_dir_name char (32) aligned based;
dcl  copy_dstep bit (18) aligned based;
dcl  copy_event_count fixed bin based;
dcl  copy_group_id char (32) aligned based;
dcl  copy_home_dir char (64) aligned based;
dcl  copy_id bit (36) aligned based;
dcl  copy_prelinked_ring (7) bit (1) unaligned based;
dcl  copy_ptr ptr based;
dcl  copy_ring fixed bin based;
dcl  copy_size (0:7) fixed bin based;
dcl  copy_throttle_seg_state_chg bit (1) aligned based;
dcl  copy_time fixed bin (71) based;
dcl  1 stack aligned based (sb),
       2 header like stack_header,
       2 first_frame fixed bin;

/* External */

dcl  abs_seg$ fixed bin ext;
dcl  active_all_rings_data$default_max_segno fixed bin (17) ext;
dcl  active_all_rings_data$hcscnt fixed bin (18) ext;
dcl  active_all_rings_data$max_segno fixed bin (17) ext;
dcl  active_all_rings_data$stack_base_segno fixed bin (18) ext;
dcl  active_hardcore_data$pdir_dir_quota fixed bin ext;
dcl  active_hardcore_data$pdir_quota fixed bin ext;
dcl  dseg$ fixed bin ext;
dcl  error_table_$ai_restricted fixed bin (35) external static;
dcl  error_table_$apt_full fixed bin (35) external static;
dcl  error_table_$invalid_subsystem fixed bin (35) ext;
dcl  error_table_$smallarg fixed bin (35) external static;
dcl  kst_seg$ fixed bin ext;
dcl  pds$ fixed bin ext;
dcl  pds$access_authorization bit (72) aligned external static;
dcl  1 pds$access_name aligned external,
       2 person char (32),
       2 project char (32),
       2 tag char (1);
dcl  pds$account_id bit (36) aligned external;
dcl  pds$apt_ptr ptr ext;
dcl  pds$audit_flags bit (36) aligned external static;
dcl  pds$clr_stack_size (0:7) fixed bin ext;
dcl  pds$covert_event_count fixed bin ext;
dcl  pds$dstep bit (18) aligned ext;
dcl  pds$first_covert_event_time fixed bin (71) ext;
dcl  pds$highest_ring fixed bin ext;
dcl  pds$home_dir char (168) aligned external;
dcl  pds$initial_procedure ptr ext;
dcl  pds$initial_ring fixed bin ext;
dcl  pds$interrupt_ring fixed bin ext;
dcl  pds$last_sp ptr ext aligned;
dcl  pds$lock_id bit (36) aligned ext;
dcl  pds$lot_stack_size (0:7) fixed bin ext;
dcl  pds$max_access_authorization bit (72) aligned external static;
dcl  pds$max_lot_size (0:7) fixed bin ext;
dcl  pds$prelinked_ring (7) bit (1) unaligned ext;
dcl  pds$process_dir_name char (32) aligned ext;
dcl  pds$process_group_id char (32) aligned ext;
dcl  pds$processid bit (36) aligned ext;
dcl  pds$term_channel fixed bin (71) ext;
dcl  pds$term_proc bit (36) aligned external;
dcl  pds$throttle_segment_state_changes bit (1) aligned ext;
dcl  sst$seg_state_change_limit fixed bin external;
dcl  sys_info$access_class_ceiling bit (72) aligned external static;
dcl  sys_info$default_256K_enable fixed bin ext;
dcl  sys_info$page_size fixed bin ext;
dcl  sys_info$time_of_bootload fixed bin (71) ext;
dcl  tc_data$pdscopyl fixed bin ext;
dcl  tc_data$stat (0:5) fixed bin ext;
dcl  tc_data$timax fixed bin ext;
dcl  template_pds$ fixed bin ext;

/* Entries */

dcl  acc_name_$elements entry (ptr, ptr, fixed bin (35));
dcl  access_audit_$check_general_user entry (bit (36) aligned, bit (36) aligned, bit (72) aligned, bit (36) aligned) returns (bit (1) aligned);
dcl  aim_check_$greater_or_equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  append$branchx entry (char (*), char (*), fixed bin (5), (3) fixed bin, char (*) aligned, fixed bin, fixed bin, fixed bin (24), fixed bin (35));
dcl  append$create_branch_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  asd_$replace_dall entry (char (*), char (*), ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  asd_$replace_sall entry (char (*), char (*), ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  chname$cfile entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  delentry$dfile entry (char (*), char (*), fixed bin (35));
dcl  del_dir_tree entry (char (*), char (*), fixed bin (35));
dcl  fs_modes entry (ptr, bit (36) aligned, bit (36) aligned, (3) fixed bin (3), fixed bin (35));
dcl  get_ptrs_$given_astep ext entry (ptr) returns (fixed bin (71));
dcl  getuid ext entry returns (bit (36) aligned);
dcl  grab_aste entry (ptr, fixed bin (18), fixed bin (35)) returns (ptr);
dcl  grab_aste$prewithdraw entry (ptr, fixed bin (18), fixed bin (35)) returns (ptr);
dcl  init_proc entry;
dcl  initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  initiate$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  initiate$priv_init entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  level$get ext entry (fixed bin);
dcl  level$set ext entry (fixed bin);
dcl  pxss$empty_t ext entry (ptr);
dcl  pxss$get_entry ext entry (ptr);
dcl  pxss$set_work_class ext entry (bit (36) aligned, fixed bin, fixed bin, fixed bin (35));
dcl  syserr$error_code entry options (variable);
dcl  terminate_$noname ext entry (ptr, fixed bin (35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));

/* constants */

dcl  CREATE init (0) fixed bin static options (constant);
dcl  INFO init (1) fixed bin static options (constant);
dcl  NORMAL_EVOLUTION_TERMINATION init (1) fixed bin static options (constant);
dcl  REW_bit bit (5) static options (constant) init ("1110"b);
dcl  RW_mode fixed bin (5) initial (01010b) static options (constant); /* mode bits for segments we create */
dcl  SMA_bit bit (5) static options (constant) init ("111"b);
dcl  SMA_mode fixed bin (5) initial (01011b) static options (constant); /* mode bits for directories we create */
dcl  dir_rb (3) fixed bin static options (constant) init (7, 7, 7);

/* builtins */

dcl  (addr, baseno, baseptr, binary, bin, bit, clock, divide, fixed, length, max, min, null, ptr, rel, rtrim, size, string, substr, unspec) builtin;

/* Parameters */

dcl  a_code fixed bin (35) parameter;
dcl  ci_ptr ptr parameter;
%page;
create: entry (ci_ptr, a_code);


	evolution = NORMAL_EVOLUTION_TERMINATION;	/* the normal evolution exit */

	esw = CREATE;				/* set entry switch indicating create entry */
	cp = ci_ptr;				/* copy input pointer */
	call level$get (savring);			/* save validation level */
	call level$set (0);				/* and reset to zero */

/* Validate the process authorization & max authorization against the system access_ceiling */

	process_authorization = cp -> create_info.process_authorization;
	max_authorization = cp -> create_info.max_process_authorization;

	if ^aim_check_$greater_or_equal (sys_info$access_class_ceiling, max_authorization)
	then go to return_ai_error;

	if ^aim_check_$greater_or_equal (max_authorization, process_authorization) then do;

return_ai_error:
	     code = error_table_$ai_restricted;		/* auth <= max <= ceiling */
	     go to EVOLUTION_CLEANUP (evolution);
	end;

	call pxss$get_entry (aptep);			/* get an APT entry for the new process */
	if aptep = null then do;			/* if null, no more room */
	     code = error_table_$apt_full;		/* return non-zero code */
	     go to EVOLUTION_CLEANUP (evolution);
	end;

	evolution = evolution + 1;			/* ADD apte removal */

	cp -> create_info.processid.rel_apte = rel (aptep); /* return rest of processid */
	pid = string (cp -> create_info.processid);	/* copy the processid */
	pdir_entry = unique_chars_ ((pid));
	pdir_path = ">process_dir_dir>" || pdir_entry;	/* get path name */

	process_group = cp -> create_info.process_group_id; /* copy process group id */

	stop_type = "1"b;				/* assume this is answering service 7.4 or higher */

/* Create an upgraded process directory */

	pdir_quota = cp -> create_info.record_quota;
	if pdir_quota = 0 then			/* if they blow it with the new pdir quota mechanism */
	     pdir_quota = active_hardcore_data$pdir_quota;/* be reasonable */
	pdir_quota = max (pdir_quota, 20);		/* make sure it's enough to get running */

	pdir_dir_quota = cp -> create_info.dir_quota;
	if pdir_dir_quota = 0 then
	     pdir_dir_quota = active_hardcore_data$pdir_dir_quota;
	pdir_dir_quota = max (pdir_dir_quota, 10);	/* make sure it's enough to get running */

	unspec (branch_info) = "0"b;
	branch_info.version = create_branch_version_2;
	branch_info.mode = substr (SMA_bit, 1, length (branch_info.mode));
	branch_info.rings (1) = dir_rb (1);
	branch_info.rings (2) = dir_rb (2);
	branch_info.rings (3) = dir_rb (3);
	branch_info.userid = pds$process_group_id;
	branch_info.switches.dir_sw = "1"b;
	branch_info.switches.copy_sw = "0"b;
	branch_info.switches.chase_sw = "0"b;		/* don't chase links */
	branch_info.parent_ac_sw = "0"b;		/* Upgrade the dir */
	branch_info.switches.priv_upgrade_sw = "0"b;	/* really move quota from >pdd */
	branch_info.bitcnt = 0;
	branch_info.quota = pdir_quota;
	branch_info.dir_quota = pdir_dir_quota;
	branch_info.access_class = process_authorization;

	call append$create_branch_ (">process_dir_dir", pdir_entry, addr (branch_info), code);
	if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);


	do i = 1 to 3;				/* set up access control lists */
	     seg_acl (i).mode = REW_bit;		/* Default access for process dir segments is REW */
	     seg_acl (i).exmode = "0"b;		/* and no extended mode set */
	     dir_acl (i).mode = SMA_bit;		/* Default access for process dir is SMA */
	end;

	evolution = evolution + 1;			/* increment the evolution to include the process_dir */

	seg_acl (1).userid = process_group;		/* give access to created process first */
	dir_acl (1).userid = process_group;
	seg_acl (2).userid = pds$process_group_id;	/* give access to system control */
	dir_acl (2).userid = pds$process_group_id;
	seg_acl (3).userid = "*.*.*";			/* ... everybody else */
	dir_acl (3).userid = "*.*.*";
	seg_acl (3).mode,				/* give null access to everyone else */
	     dir_acl (3).mode = "0"b;

	seg_aclp = addr (seg_acl (1).userid);		/* get pointer to segment ACL */
	dir_aclp = addr (dir_acl (1).userid);		/* get pointer to directory ACL */

	daemon_sw = "1"b;				/* Don't add "*.SysDaemon.*" to ACLs */
	call asd_$replace_dall (">process_dir_dir", pdir_entry, dir_aclp, 3, daemon_sw, code); /* directory branch acl */
	if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);

	call create_hardcore_seg ("dseg", dseg_ptr);	/* create descriptor segment */
	if dseg_ptr = null then go to EVOLUTION_CLEANUP (evolution);

	evolution = evolution + 1;			/* increment the evolution to show the creation of segments */

	call create_hardcore_seg ("kst", kst_ptr);	/* create known segment table KST */
	if kst_ptr = null then go to EVOLUTION_CLEANUP (evolution);


	call create_hardcore_seg ("pds", pds_ptr);	/* create process data segment (PDS) */
	if pds_ptr = null then go to EVOLUTION_CLEANUP (evolution);

	n = tc_data$pdscopyl;			/* copy the template PDS */
	pds_ptr -> copy_data = addr (template_pds$) -> copy_data;

	if cp -> create_info.version > 4
	then PRELINKED_DIR = cp -> create_info.subsystem;
	else PRELINKED_DIR = "";

	if PRELINKED_DIR ^= "" then do;
	     template_dsegp, template_kstp = null ();	/* init for cleanup */
	     call initiate (PRELINKED_DIR, "template_kst", "", 0, 0, template_kstp, code);
	     if template_kstp = null ()
	     then do;
bad_subsystem:
		code = error_table_$invalid_subsystem;
		go to EVOLUTION_CLEANUP (evolution);
	     end;
	     evolution = evolution + 1;		/* Need to terminate reference to template_kst if abort */
	     if template_kstp -> kst.time_of_bootload ^= sys_info$time_of_bootload | ^template_kstp -> kst.template
	     then go to bad_subsystem;
	     call fs_modes (template_kstp, ("0"b), ("0"b), rings, code);
	     if code ^= 0 | rings (1) ^= 0 then go to bad_subsystem;
	     n = bin (rel (addr (template_kstp -> kst.kst_entry (template_kstp -> kst.highseg + 1))));
	     kst_ptr -> copy_data = template_kstp -> copy_data;
	     ptr (pds_ptr, rel (addr (pds$prelinked_ring))) -> copy_prelinked_ring = kst_ptr -> kst.prelinked_ring;
	     call terminate_$noname (template_kstp, code);
	     if code ^= 0 then go to bad_subsystem;
	     evolution = evolution - 1;		/* decrement because reference to template_kst terminated */
	end;
						/* Compute the sizes and locations of the LOT and CLR */

	lot_size = cp -> create_info.lot_size;
	clr_size = cp -> create_info.cls_size;
	max_lot = cp -> create_info.kst_size;
	if max_lot = 0 then max_lot = active_all_rings_data$default_max_segno + 1;
	max_lot = min (max_lot, active_all_rings_data$max_segno + 1);
	if max_lot <= active_all_rings_data$hcscnt
	then do;
	     code = error_table_$smallarg;
	     call syserr$error_code (LOG, code, "act_proc: KST size specified (^d) less than minimum (^d). Creating process for ^a.", max_lot, active_all_rings_data$hcscnt, cp -> create_info.process_group_id);
	     go to EVOLUTION_CLEANUP (evolution);
	end;

/* Now fill in the per-process variables into the new pds */
	if cp -> create_info.lot_in_stack then do;
	     p = ptr (pds_ptr, rel (addr (pds$lot_stack_size (0))));
	     do i = 0 to 7;
		p -> copy_size (i) = lot_size;
	     end;
	end;

	if cp -> create_info.cls_in_stack then do;
	     p = ptr (pds_ptr, rel (addr (pds$clr_stack_size (0))));
	     do i = 0 to 7;
		p -> copy_size (i) = clr_size;
	     end;
	end;

	p = ptr (pds_ptr, rel (addr (pds$max_lot_size (0))));
	do i = 0 to 7;
	     p -> copy_size (i) = max_lot;
	end;

	p = ptr (pds_ptr, rel (addr (pds$processid)));	/* fill in process id */
	p -> copy_id = pid;

	p = ptr (pds_ptr, rel (addr (pds$lock_id)));
	p -> copy_id = getuid ();			/* Get lock ID */

	p = ptr (pds_ptr, rel (addr (pds$apt_ptr)));	/* fill in APT entry pointer */
	p -> copy_ptr = aptep;

	p = ptr (pds_ptr, rel (addr (pds$account_id)));	/* initialize pds$account id */
	p -> copy_id = pds$account_id;

	p = ptr (pds_ptr, rel (addr (pds$process_dir_name))); /* initialize pds$process_dir_name */
	p -> copy_dir_name = pdir_path;

	p = ptr (pds_ptr, rel (addr (pds$process_group_id))); /* initialize pds$process_group_id */
	p -> copy_group_id = process_group;

	p = ptr (pds_ptr, rel (addr (pds$initial_ring))); /* copy intial ring into pds */
	p -> copy_ring = cp -> create_info.initial_ring;

	p = ptr (pds_ptr, rel (addr (pds$initial_procedure)));
	p -> copy_ptr = addr (init_proc);		/* Set initial procedure for process. */

	p = ptr (pds_ptr, rel (addr (pds$last_sp)));
	sb = baseptr (active_all_rings_data$stack_base_segno);
	p -> copy_ptr = addr (stack.first_frame);	/* Setup first time stack ptr */

	p = ptr (pds_ptr, rel (addr (pds$interrupt_ring))); /* copy interrupt ring into pds */
	p -> copy_ring = cp -> create_info.initial_ring;	/* use initial ring for users */

	p = ptr (pds_ptr, rel (addr (pds$highest_ring))); /* copy highest ring into pds */
	p -> copy_ring = cp -> create_info.highest_ring;

	p = ptr (pds_ptr, rel (addr (pds$access_name)));	/* fill in 3 part access name in pds */
	call acc_name_$elements (addr (process_group), p, code);
	if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);
	if p -> ack_name.tag = "m" then is_absentee = "1"b;
	else is_absentee = "0"b;

	p1 = ptr (pds_ptr, rel (addr (pds$term_proc)));	/* copy terminate process id into pds */
	p1 -> copy_id = cp -> create_info.term_processid;

	p1 = ptr (pds_ptr, rel (addr (pds$term_channel)));/* copy terminate channel name into pds */
	p1 -> copy_chn_name = cp -> create_info.term_channel;

	p = ptr (pds_ptr, rel (addr (pds$access_authorization)));
	p -> copy_authorization = process_authorization;

	p = ptr (pds_ptr, rel (addr (pds$max_access_authorization)));
	p -> copy_authorization = max_authorization;

	p = ptr (pds_ptr, rel (addr (pds$audit_flags)));
	p -> copy_audit = cp -> create_info.audit;

	seg_rb (1) = 0;				/* create pit with rb of (0, 5, 5) */
	seg_rb (2), seg_rb (3) = cp -> create_info.highest_ring;
	pit_ptr = null;
	call append$branchx (pdir_path, "pit", (RW_mode), seg_rb, process_group, 0, 0, 0, code);
	if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);

	call asd_$replace_sall (pdir_path, "pit", seg_aclp, 3, daemon_sw, code);
	if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);

	call initiate$priv_init (pdir_path, "pit", "", 0, 0, pit_ptr, code);
	if pit_ptr = null then go to EVOLUTION_CLEANUP (evolution);
	n = cp -> create_info.words_of_pit;		/* copy the pit template */
	pit_ptr -> copy_data = cp -> create_info.pit_ptr -> copy_data;
	p2 = ptr (pds_ptr, rel (addr (pds$home_dir)));
	if substr (ptr (pit_ptr, cp -> create_info.homedir) -> copy_home_dir, 1, 5) ^= "[pd]>"
	then p2 -> copy_home_dir = ptr (pit_ptr, cp -> create_info.homedir) -> copy_home_dir;
	else do;
	     hd = substr (ptr (pit_ptr, cp -> create_info.homedir) -> copy_home_dir, 6, 32);
	     call append$branchx (pdir_path, hd, (SMA_mode), dir_rb, process_group, 1, 0, 0, code);
	     if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);
	     call asd_$replace_dall (pdir_path, hd, dir_aclp, 3, daemon_sw, code); /* directory acl */
	     if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);
						/* fill in true home directory in PIT */
	     p2 -> copy_home_dir = rtrim (pdir_path) || ">" || rtrim (hd);
	     ptr (pit_ptr, cp -> create_info.homedir) -> copy_home_dir = p2 -> copy_home_dir;
	end;

	call terminate_$noname (pit_ptr, code);		/* terminate copy */
	if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);

	aptep -> apte.processid = pid;		/* set up process id in KPT entry */

	aptep -> apte.access_authorization = cp -> create_info.process_authorization;
	work_class = cp -> create_info.work_class;	/* Yes */
	call pxss$set_work_class (pid, work_class, 0, code); /* Set it */
	if code ^= 0 then go to EVOLUTION_CLEANUP (evolution); /* Unable to set it */

/*	go to common;				/* go to activate this process */
/**/
/* activate: entry(aaptep, a_code);			/* entry to activate an inactive process */

/* dcl  aaptep ptr;					/* pointer to KPT (APT) entry */
/* dcl  ACTIVATE init (2) fixed bin static options (constant); */

/*	esw = ACTIVATE;				/* set entry switch for activate entry */
/*        evolution = NORMAL_EVOLUTION_TERMINATION */
/*	stop_type = "1"b;				/* I guess. */
/*	aptep = aaptep;				/* pick up pointer to KPT entry */
/*	pid = aptep -> apte.processid;		/* pick up process id */
/*	call level$get(savring);			/* save validation level */
/*	call level$set(0);				/* reset validation level to zero */
/*	pdir_entry = unique_chars_((pid));		/* compute process directory entry name */
/*	pdir_path = ">process_dir_dir>" || pdir_entry; */
/*	call initiate$priv_init (pdir_path, "dseg", "", 0, 0, dseg_ptr, code); /* initiate dseg */
/*	if dseg_ptr = null then go to EVOLUTION_CLEANUP (evolution); */
/*	call initiate$priv_init (pdir_path, "kst", "", 0, 0, kst_ptr, code); /* initiate KST */
/*	if kst_ptr = null then go to EVOLUTION_CLEANUP (evolution); */
/*	call initiate$priv_init (pdir_path, "pds", "", 0, 0, pds_ptr, code); /* initiate PDS */
/*	if pds_ptr = null then go to  EVOLUTION_CLEANUP (evolution); */
/* COMMENTED OUT BECAUSE IT'S NOT PRESENTLY USED. */
/* CAUTION: if the activate entry point is ever revieved then PRELINKED_DIR */
/*          must be stored in the guys pds.  Some where the segments need to */
/*	  be terminated if the activation is aborted. This should be in  */
/*	  EVOLUTION_CLEANUP condition by the value of esw */

common:	abs_ptr = addr (abs_seg$);			/* create process code joins activate code here */
	n = active_all_rings_data$hcscnt - 1;		/* Set up descriptor segment for new process. */
						/* copy all SDW's up to first stacks (ring 0) SDW */
	dseg_ptr -> based_dseg = addr (dseg$) -> based_dseg;
	dseg_size = size (sdw) * max_lot;
	call set_ehs (dseg_ptr, "1"b, divide (dseg_size + sys_info$page_size - 1, sys_info$page_size, 17, 0));
	segno = bin (baseno (addr (dseg$)), 18);	/* Get segno of dseg */
	dseg_ptr -> sdwa (segno).add = addr (tsdw) -> sdw.add; /* Fill in page table addr */
	dseg_ptr -> sdwa (segno).bound = bit (fixed (divide (dseg_size + 15, 16, 17, 0) - 1, 14), 14);
	dseg_ptr -> sdwa (segno).entry_bound = bit (divide (active_all_rings_data$stack_base_segno, 8, 14, 0), 14);
	dstep = astep;				/* Save ptr to ASTE for dseg */
	unspec (dbr) = string (dseg_ptr -> sdwa (segno));

	if PRELINKED_DIR ^= "" then do;
	     call initiate$initiate_count (PRELINKED_DIR, "template_dseg", "", bc, 0, template_dsegp, code);
	     if template_dsegp = null () then go to bad_subsystem;
	     evolution = evolution + 1;		/* Need to terminate reference to template_dseg if abort */
	     call fs_modes (template_dsegp, ("0"b), ("0"b), rings, code);
	     if code ^= 0 then go to bad_subsystem;
	     if rings (1) ^= 0 then go to bad_subsystem;
	     n = divide (bc, 72, 17, 0) - active_all_rings_data$hcscnt;
	     if n <= 0 then go to bad_subsystem;
	     addr (dseg_ptr -> sdwa (active_all_rings_data$hcscnt)) -> based_dseg =
		addr (template_dsegp -> sdwa (active_all_rings_data$hcscnt)) -> based_dseg;
	     call terminate_$noname (template_dsegp, code);
	     evolution = evolution - 1;		/* decrement because reference to template_dseg terminated */
	end;

	p = ptr (pds_ptr, rel (addr (pds$dstep)));	/* save pointer to hardcore DST entry */
	p -> copy_dstep = rel (dstep);
	kst_size = size (kst) + size (kste) * (max_lot - active_all_rings_data$hcscnt + 1);
	if kst_ptr -> kst.highseg = 0 then kst_ptr -> kst.highseg = max_lot - 1;
	kst_ptr -> kst.allow_256K_connect = sys_info$default_256K_enable ^= 0;
						/* Init for non pre-linked process */
	call set_ehs (kst_ptr, "0"b, divide (kst_size + sys_info$page_size - 1, sys_info$page_size, 17, 0));
	segno = bin (baseno (addr (kst_seg$)), 18);
	dseg_ptr -> based_dseg (segno) = tsdw;

	call set_ehs (pds_ptr, "1"b, 4);		/* Force PDS active and prewithdraw */
	segno = bin (baseno (addr (pds$)), 18);
	dseg_ptr -> based_dseg (segno) = tsdw;
	pds_astep = astep;

	aptep -> apte.timax = tc_data$timax;		/* initialize to default timax */
	aptep -> apte.flags.state = bit (bin (4, 18), 18);/* set execution state to blocked */
	tc_data$stat (4) = tc_data$stat (4) + 1;	/* up count of blocked processes */
	aptep -> apte.asteps.pds = rel (pds_astep);	/* save ptr to PDS-AST entry */
	aptep -> apte.asteps.dseg = rel (dstep);	/* save ptr to hardcore DST entry */
	aptep -> apte.dbr = dbr;			/* save descriptor segment base register value */
	aptep -> apte.flags2.batch = is_absentee;	/* DIGS wants to know .. */
	aptep -> apte.lock_id = ptr (pds_ptr, rel (addr (pds$lock_id))) -> copy_id;
						/* Place in pds as well */
	aptep -> apte.ws_size = 0;			/* assume no pages to start */
	aptep -> apte.term_processid = ptr (pds_ptr, rel (addr (pds$term_proc))) -> copy_id;
	aptep -> apte.term_channel = ptr (pds_ptr, rel (addr (pds$term_channel))) -> copy_chn_name;
	aptep -> apte.deadline,			/* set deadline here */
	     aptep -> apte.state_change_time = clock ();	/* Initialize it */

	local_audit_event_flags = "0"b;		/* set throttle_segment_state_changes */
	addr (local_audit_event_flags) -> audit_event_flags.grant = "1"b;
	addr (local_audit_event_flags) -> audit_event_flags.cc_10_100 = "1"b;
	ptr (pds_ptr, rel (addr (pds$throttle_segment_state_changes))) -> copy_throttle_seg_state_chg =
	     access_audit_$check_general_user (local_audit_event_flags, "0"b, process_authorization, cp -> create_info.audit);

	ptr (pds_ptr, rel (addr (pds$covert_event_count))) -> copy_event_count = -sst$seg_state_change_limit; /* page_fault counts up to 0 */
	ptr (pds_ptr, rel (addr (pds$first_covert_event_time))) -> copy_time = clock ();

/**** Here we set up apte.ipc_r_offset.  This is an 18-bit unsigned
      integer used by IPC to validate event channel names in conjunction
      with apte.ipc_r_factor.  This latter number is determined later,
      when the process first runs, to provide an indeterminate delay between
      the creation of these values.  The delay is necessary to make it
      difficult to guess the value of apte.ipc_r_factor given the value
      of apte.ipc_r_offset. */

	aptep -> apte.ipc_r_offset =
	     binary (substr (bit (binary (clock (), 54), 54), 37, 18), 18);

/**** Set the value of apte.ipc_r_factor to zero for debugging purposes
      so that we can determine whether it is getting set or not later. */

	aptep -> apte.ipc_r_factor = 0;

	call terminate_$noname (dseg_ptr, code);	/* Terminate dseg */
	if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);
	call terminate_$noname (kst_ptr, code);		/* terminate KST */
	if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);
	call terminate_$noname (pds_ptr, code);		/* terminate PDS */
	if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);

	if esw = CREATE then do;			/* some special stuff left to do if create entry */

	     if cp -> create_info.timax > 0 then aptep -> apte.timax = cp -> create_info.timax;
	     if cp -> create_info.user_processid ^= " " then do; /* additional name for process directory */
		call chname$cfile (">process_dir_dir", pdir_entry, "", (cp -> create_info.user_processid), code);
		if code ^= 0 then go to EVOLUTION_CLEANUP (evolution);
	     end;

	end;

	code = 0;

	go to EVOLUTION_CLEANUP (NORMAL_EVOLUTION_TERMINATION); /* go set level and return */


EVOLUTION_CLEANUP (5):
	if esw = CREATE then do;
	     if template_kstp ^= null ()
	     then call terminate_$noname (template_kstp, ignore_code);
	     if template_dsegp ^= null ()
	     then call terminate_$noname (template_dsegp, ignore_code);
	end;

EVOLUTION_CLEANUP (4):				/* delete any segments that have been created */
	if esw = CREATE then
	     call del_dir_tree (">process_dir_dir", pdir_entry, ignore_code);

EVOLUTION_CLEANUP (3):				/* delete the process dir */
	if esw = CREATE then
	     call delentry$dfile (">process_dir_dir", pdir_entry, ignore_code);

EVOLUTION_CLEANUP (2):				/* Give back the APTE */
	if esw = CREATE then
	     call pxss$empty_t (aptep);

EVOLUTION_CLEANUP (1):				/* restore validation level */
	call level$set (savring);
						/* tell caller what went wrong if any thing did. */
	a_code = code;
	return;

set_pit_tty_info: entry (a_pid, a_pitp, a_code);

dcl  a_pid bit (36) aligned parameter;
dcl  a_pitp ptr parameter;

dcl  pitp ptr;

	esw = INFO;

/* Copy args */
	pid = a_pid;
	pitp = a_pitp;
	code = 0;
						/* Bookkeeping */

	call level$get (savring);			/* save current validation level and set it to zero */
	call level$set (0);
	evolution = NORMAL_EVOLUTION_TERMINATION;
	pdir_entry = unique_chars_ ((pid));		/* compute entry name of user's pdir */
	pdir_path = ">process_dir_dir>" || pdir_entry;	/* get full pathname of pdir */
	pit_ptr = null;
	call initiate$priv_init (pdir_path, "pit", "", 0, 0, pit_ptr, code); /* initiate exiting pit */
	if pit_ptr = null then go to EVOLUTION_CLEANUP (evolution);

/* Copy new tty info from template pit into user's pit */

	pit_ptr -> pit.tty = pitp -> pit.tty;
	pit_ptr -> pit.old_tty = pitp -> pit.old_tty;
	pit_ptr -> pit.terminal_access_class = pitp -> pit.terminal_access_class;
	pit_ptr -> pit.line_type = pitp -> pit.line_type;
	pit_ptr -> pit.term_type_name = pitp -> pit.term_type_name;
	pit_ptr -> pit.service_type = pitp -> pit.service_type;
	pit_ptr -> pit.charge_type = pitp -> pit.charge_type;
	pit_ptr -> pit.tty_answerback = pitp -> pit.tty_answerback;
	pit_ptr -> pit.tty_type = pitp -> pit.tty_type;
	pit_ptr -> pit.outer_module = pitp -> pit.outer_module;

/* Clean up and return */

	call terminate_$noname (pit_ptr, code);
	go to EVOLUTION_CLEANUP (evolution);		/* go set level and return */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



create_hardcore_seg: procedure (seg_name, seg_ptr);	/* internal procedure to create hardcore segments */

dcl  seg_name char (*) parameter;			/* segment branch name */
dcl  seg_ptr ptr parameter;				/* pointer to segment (returned) */

	seg_rb (1), seg_rb (2), seg_rb (3) = 0;		/* ring brackets of 0-0-0 on pds and kst */
	seg_ptr = null;
	call append$branchx (pdir_path, seg_name, (RW_mode), seg_rb, process_group, 0, 0, 0, code); /* create branch */
	if code ^= 0 then return;

	call asd_$replace_sall (pdir_path, seg_name, seg_aclp, 3, daemon_sw, code);
	if code ^= 0 then return;

	call initiate$priv_init (pdir_path, seg_name, "", 0, 0, seg_ptr, code); /* initiate created segment */

     end create_hardcore_seg;

set_ehs: proc (segptr, prw, size1);

dcl  prw bit (1) aligned parameter;
dcl  segptr ptr parameter;
dcl  size1 fixed bin parameter;

dcl  size2 fixed bin (18);

	size2 = 1024 * size1;
	if prw then astep = grab_aste$prewithdraw (segptr, size2, code);
	else astep = grab_aste (segptr, size2, code);	/* force activate the entry */
	if code ^= 0 then call syserr$error_code (1, code, "act_proc: from grab_aste");
	tsdw = get_ptrs_$given_astep (astep);
	addr (tsdw) -> sdw.cache = "1"b;		/* KST and PDS are non-shared */
	return;

     end set_ehs;

/* format: off */
%page; %include access_audit_eventflags;
%page; %include apte;
%page; %include aste;
%page; %include create_branch_info;
%page; %include create_info;
%page; %include kst;
%page; %include pit;
%page; %include sdw;
%page; %include stack_header;
%page; %include syserr_constants;
%page; %include user_attributes;
%page;
/* BEGIN MESSAGE DOCUMENTATION
   Message:
   act_proc: from grab_aste ERRORMESSAGE

   S: $crash

   T: $run

   M: In attempting to create a process, the system could not force the
   PDS or descriptor segment of that process to be activated and held active.
   ERRORMESSAGE is an error_table_ message.
   $err

   A: $recover


   Message:
   act_proc: KST size specified (SIZE) less than minimum (MIN_SIZE).
   Creating process for GROUPID.

   S: $log

   T: $run

   M: The project administrator (or system administrator) for user GROUPID
   set the kst_size parameter in the PDT to SIZE, which is less than
   the valid minimum MIN_SIZE. The process is not created. Note that
   a process with MINIMUM KST size will probably not be of any use. The
   minimum useful KST size is on the order of MINIMUM + 50.

   A: Change the PMF/PDT.

   END MESSAGE DOCUMENTATION */
/* format: on */

     end act_proc;
