/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */

create_hproc: proc (access_id, loaded, aptep, initial_procedure) returns (fixed bin (35));

/* Created by Webber for 29-0 (= MR5.0) */
/* Modified by VanVleck, Greenberg for in-hierarchy and hardcore-seg per-proc segments 4/77 */
/* Modified by Mike Grady for stack 0 sharing. May 1979 */
/* Modified by J. Bongiovanni to create a stack for non-early hprocs. December 1982 */
/* Modified 1984-11-16 by E. Swenson for IPC event channel validation.  The
   values of R-Offset and R-Factor are initialized here for hprocs. */
/* Modified 1984-11-20 by Keith Loepere to rename terminate to terminate_. */
/* Modified 1984-12-11, BIM: give *.*.* RW In ring zero to segments.
   this permits ring_zero_peek_ and allows this to work outside
   of the Initializer. */

/* Parameters */

dcl  access_id char (*) aligned;
dcl  loaded bit (1) aligned;
dcl  initial_procedure ptr;

dcl  adsp ptr;
dcl  apdsp ptr;
dcl  astkp ptr;

/* Automatic */

dcl  save_level uns fixed bin (3);
dcl  highseg fixed bin (18);
dcl  dseg_no fixed bin (18);
dcl  dsp ptr;
dcl  pds_ptr ptr;
dcl  stk_ptr ptr;
dcl  stk_astep ptr;
dcl  tcode fixed bin (35);
dcl  dseg_ptr ptr;
dcl  1 pds_sdw aligned like sdw;
dcl  1 dbr aligned like sdw;
dcl  1 stk_sdw aligned like sdw;
dcl  dstep ptr;
dcl  astep ptr;
dcl  proc_id bit (36) aligned;
dcl  lock_id bit (36) aligned;
dcl  pds_no fixed bin;
dcl  append_entry bit (1);

/* External */

dcl  active_all_rings_data$hcscnt fixed bin (18) ext;
dcl  active_all_rings_data$stack_base_segno fixed bin (18) ext;
dcl  (dseg$, slt$) external;
dcl  error_table_$namedup fixed bin (35) external;
dcl  pds$apt_ptr ptr ext;
dcl  pds$stack_0_sdwp ptr ext;
dcl  pds$stack_0_ptr ptr ext;
dcl  pds$stacks (0:7) ptr ext;
dcl  pds$last_sp ptr ext;
dcl  pds$initial_procedure ptr ext;
dcl  pds$processid bit (36) aligned ext;
dcl  pds$lock_id bit (36) aligned ext;
dcl  pds$dstep bit (18) aligned ext;
dcl  pds$process_group_id char (32) aligned ext;
dcl  template_pds$ ext;
dcl  tc_data$pdscopyl fixed bin ext;

/* Based */

dcl  copy_pds (tc_data$pdscopyl) fixed bin based;
dcl  copy_id bit (36) aligned based;
dcl  copy_ptr ptr based;
dcl  copy_group_id char (32) aligned based;
dcl  copy_dstep bit (18) aligned based;
dcl  1 based_dseg (0:highseg) aligned like sdw based;
dcl  1 stack aligned based (sb),
       2 header like stack_header,
       2 first_frame fixed bin;

/* Constant */

dcl  seg_rb (3) fixed bin init (0, 0, 0) static options (constant);
dcl  dseg_size fixed bin static options (constant) init (3 * 1024);
dcl  PDS_SIZE fixed bin internal static options (constant) init (4096);
dcl  STACK_SIZE fixed bin internal static options (constant) init (16384);

/* Entries */

dcl  unique_chars_ entry (bit (*) aligned) returns (char (15));
dcl  append$branchx entry (char (*), char (*), fixed bin (5), (3) fixed bin, char (*) aligned,
	fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl  (level$get, level$set) entry (uns fixed bin (3));
dcl  grab_aste$prewithdraw entry (ptr, fixed bin, fixed bin (35)) returns (ptr);
dcl  get_ptrs_$given_astep entry (ptr) returns (1 aligned like sdw);
dcl  get_ptrs_$given_segno entry (fixed bin (18)) returns (ptr);
dcl  initiate$priv_init entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  terminate_$noname ext entry (ptr, fixed bin (35));
dcl  truncate$trseg entry (ptr, fixed bin (19), fixed bin (35));
dcl  pxss$get_entry entry (ptr);
dcl  getuid entry returns (bit (36) aligned);
dcl  pc_wired$wire_wait entry (ptr, fixed bin, fixed bin);

/* Builtins */

dcl  (addr, baseno, baseptr, bin, bit, divide, null, ptr, rel, size, unspec) builtin;

dcl  cleanup condition;

/**/
/* First get a segment to be used as the PDS */

	append_entry = "1"b;
	call pxss$get_entry (aptep);
	if aptep = null then return (1);
	proc_id = rel (aptep) || "666666"b3;

	call level$get (save_level);
	on cleanup call level$set (save_level);
	call level$set (0);

	call get_unique_segment ("pds", pds_ptr, astep, PDS_SIZE, tcode);
	if tcode ^= 0 then do;
RETURN_ERROR:
	     call level$set (save_level);
	     return (tcode);
	end;

/* Now get a descriptor segment */

	call get_unique_segment ("dseg", dseg_ptr, dstep, dseg_size, tcode);
	if tcode ^= 0 then goto RETURN_ERROR;

/* Now get a stack segment */

	call get_unique_segment ("stack", stk_ptr, stk_astep, STACK_SIZE, tcode);
	if tcode ^= 0 then goto RETURN_ERROR;

	highseg = active_all_rings_data$hcscnt - 1;
	call level$set (save_level);
	revert cleanup;

/* Develop the DBR from the dstep. */

join:
	dbr = get_ptrs_$given_astep (dstep);
	dsp = addr (dseg$);
	dseg_no = bin (baseno (dsp), 18);

	dseg_ptr -> based_dseg = dsp -> based_dseg;
	unspec (dseg_ptr -> sdwa (dseg_no)) = unspec (dbr);

/* Fill in the stack base segno in the DBR so BOS will dump it. */

	if append_entry then
	     dbr.entry_bound = bit (divide (active_all_rings_data$stack_base_segno, 8, 14, 0), 14);

/* Now get an APT entry and fill it in */

	apte.hproc = "1"b;
	apte.state = bit (bin (4, 18), 18);		/* initial state is blocked */
	apte.timax = 4000000;
	apte.wct_index = pds$apt_ptr -> apte.wct_index;	/* use parent's water closet */
	apte.processid = proc_id;
	lock_id = getuid ();
	apte.lock_id = lock_id;
	apte.dseg = rel (dstep);
	apte.pds = rel (astep);
	unspec (apte.dbr) = unspec (dbr);

/**** Here we set up apte.ipc_r_offset for the hardcore process.  This
      is an 18-bit unsigned integer used by IPC to validate event channel
      names in conjunction with apte.ipc_r_factor.  This latter number
      is determined later, in init_proc.  This is done on order to provide
      an undeterministic delay between the initialization of these two
      numbers in order to make it difficult to guess one given the other. */

	apte.ipc_r_offset = binary (substr (bit (binary (clock (), 54), 54), 37, 18), 18);

/**** We defer the setting of R-Factor until after we take a few pages
      faults in order to make guessing R-Factor given R-Offset more
      difficult. */

/* Now initialize the PDS and fill in its SDW into the DSEG */

	pds_no = bin (baseno (addr (pds$processid)), 18);
	pds_sdw = get_ptrs_$given_astep (astep);
	pds_sdw.cache = "1"b;
	dseg_ptr -> based_dseg (pds_no) = pds_sdw;

	pds_ptr -> copy_pds = addr (template_pds$) -> copy_pds;

	ptr (pds_ptr, rel (addr (pds$processid))) -> copy_id = proc_id;
	ptr (pds_ptr, rel (addr (pds$lock_id))) -> copy_id = lock_id;
	ptr (pds_ptr, rel (addr (pds$apt_ptr))) -> copy_ptr = aptep;
	ptr (pds_ptr, rel (addr (pds$process_group_id))) -> copy_group_id = access_id;
	ptr (pds_ptr, rel (addr (pds$dstep))) -> copy_dstep = rel (dstep);
	ptr (pds_ptr, rel (addr (pds$initial_procedure))) -> copy_ptr = initial_procedure;

	sdwp = addr (dseg$);
	if append_entry then do;			/* fill in pds stack info with correct stuff */
	     stk_sdw = get_ptrs_$given_astep (stk_astep);
	     unspec (dseg_ptr -> sdwa (active_all_rings_data$stack_base_segno)) =
		unspec (stk_sdw);
	     ptr (pds_ptr, rel (addr (pds$stack_0_sdwp))) -> copy_ptr =
		addr (sdwa (active_all_rings_data$stack_base_segno));
	     ptr (pds_ptr, rel (addr (pds$stack_0_ptr))) -> copy_ptr,
		ptr (pds_ptr, rel (addr (pds$stacks (0)))) -> copy_ptr,
		sb = ptr (baseptr (active_all_rings_data$stack_base_segno), 0);
	     stk_ptr -> stack_header_overlay = pds$stack_0_ptr -> stack_header_overlay;
	     stk_ptr -> stack_header.stack_begin_ptr,
		stk_ptr -> stack_header.stack_end_ptr = ptr (sb, rel (addr (stack.first_frame)));
	end;
	else do;					/* or for early hprocs */
	     ptr (pds_ptr, rel (addr (pds$stack_0_sdwp))) -> copy_ptr =
		addr (sdwa (bin (baseno (stk_ptr), 18)));
	     ptr (pds_ptr, rel (addr (pds$stack_0_ptr))) -> copy_ptr,
		ptr (pds_ptr, rel (addr (pds$stacks (0)))) -> copy_ptr,
		sb = ptr (stk_ptr, 0);
	end;

	ptr (pds_ptr, rel (addr (pds$last_sp))) -> copy_ptr =
	     addr (stack.first_frame);

/* Now load the process if it must be loaded */

	if loaded then do;				/* the process is always to be loaded */
	     apte.loaded = "1"b;
	     apte.always_loaded = "1"b;
	     call pc_wired$wire_wait (astep, 0, 1);	/* wire first page of PDS */
	     call pc_wired$wire_wait (dstep, 0, 1);	/* wire first page of DSEG */
	end;

	if append_entry then do;
	     call terminate_$noname (pds_ptr, (0));
	     call terminate_$noname (dseg_ptr, (0));
	     call terminate_$noname (stk_ptr, (0));
	end;

/**** Now, after taking some page faults, we set R-Factor.  The clock
      value should be unpredictably more advanced. */

	apte.ipc_r_factor =
	     binary (substr (bit (binary (clock (), 54), 54), 19, 36), 35);

	return (0);

/**/
early_hproc: entry (access_id, loaded, aptep, initial_procedure, adsp, apdsp, astkp) returns (fixed bin (35));

/* This entry is called during initialization, when segments cannot be created via append. Pointers
   to two hardcore segments, adsp and apdsp, are supplied to specify segments to be used as the DSEG and PDS
   of the new process.  These segments should be hardcore if this process is never to be deleted,
   or deciduous if they are later to be deleted. */


	append_entry = "0"b;
	dseg_ptr = adsp;				/* Copy args for common code. */
	pds_ptr = apdsp;
	stk_ptr = astkp;

	astep = get_ptrs_$given_segno (bin (baseno (pds_ptr), 18)); /* Get dseg-seg ptr */
	dstep = get_ptrs_$given_segno (bin (baseno (dseg_ptr), 18)); /* Ditto the pds */
	call pxss$get_entry (aptep);
	if aptep = null then return (1);
	proc_id = rel (aptep) || "666666"b3;		/* Fabricate process ID */
	sltp = addr (slt$);
	highseg = slt.last_sup_seg;
	go to join;				/* Do all the rest */

%page;
/* Internal Procedure to create, initiate, and entry-activate a segment. */

get_unique_segment:
     proc (segment_suffix, segment_ptr, aste_ptr, segment_size, rcode);

dcl  segment_suffix char (*);
dcl  segment_ptr ptr;
dcl  aste_ptr ptr;
dcl  segment_size fixed bin;
dcl  rcode fixed bin (35);

dcl  seg_name char (32);


	seg_name = unique_chars_ (proc_id) || "." || segment_suffix;
	call append$branchx (">system_library_1", seg_name, RW_ACCESS_BIN, seg_rb, "*.*.*", /* The acl term effects us if this is not the Initializer */
	     0, 0, 0, rcode);
	if rcode ^= 0 then
	     if rcode ^= error_table_$namedup then return;

	call initiate$priv_init (">system_library_1", seg_name, "", 0, 0, segment_ptr, rcode);
	if rcode ^= 0 then return;

	call truncate$trseg (segment_ptr, 0, rcode);
	if rcode ^= 0 then return;

	aste_ptr = grab_aste$prewithdraw (segment_ptr, segment_size, rcode);
	if rcode ^= 0 then return;


     end get_unique_segment;

/* format: off */
%page; %include access_mode_values;
%page; %include sdw;
%page; %include apte;
%page; %include slt;
%page; %include stack_header;
/* format: on */
     end create_hproc;
