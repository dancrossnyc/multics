/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


grab_aste: procedure (segptr, a_len, rcode) returns (ptr);

/*  This  procedure  is  responsible for forcibly activating segments.  The I/O
Buffer  Manager  uses  the  _io entries, which also clean up the segment w.r.t.
cache  control.   The  directory containing the segment must not be locked when
grab_aste is called.

Bernard Greenberg,   May 10, 1974

*/
/* 5/8/75 by BSG for NSS */
/* 4/26/77 by BSG for aste.ddnp */
/* 12/1/78 by BSG for not crashing on activate errors */
/* 1/82 BIM for dir write lock to get exclusive lock */

dcl	(segptr,				/* pointer to segment.   KST-recognized segment number */
	 a_astep) pointer;			/* argument astep of segment  on release calls. */

dcl	(rcode,				/* return error code */
	 code,				/* code from called routines */
	 word) fixed bin (35);		/* used for touching  seg */

dcl	do_io bit (1);			/* flag for _io entry */
dcl	prewithdraw bit (1);		/* flag for page prewithdrawing */
dcl	segno fixed bin (17);		/* segno for syserr calls */
dcl	dp ptr;				/* ptr to dir */

dcl	(null, baseno, ptr, fixed) builtin;

dcl	based_word (0:262143) fixed bin (35) based;
dcl	(len, a_len) fixed bin (18);
dcl	pno fixed bin;				/* Page number when prewithdrawing seg */

dcl	error_table_$dirseg fixed bin (35)  ext;

dcl	sum$getbranch entry (ptr, bit (36) aligned,  ptr, fixed bin (35)),
	lock$unlock_ast entry,
	activate entry (ptr, fixed bin (35)) returns (ptr),
	lock$dir_unlock entry (ptr),
	setfaults$cache entry (ptr, bit (1) aligned),
	syserr entry options (variable),
	syserr$error_code entry options (variable);

/**/
%include dir_entry;
%include aste;
/**/


	do_io = "0"b;				/* set flag for no  cache  business */
	prewithdraw = "0"b;
	go to grab_join;

grab_aste_io: entry (segptr, a_len, rcode) returns (ptr);

	do_io = "1"b;				/* set cache flags flag */
	prewithdraw = "0"b;
	go to grab_join;

prewithdraw: entry (segptr, a_len, rcode) returns (ptr);

	do_io = "0"b;
	prewithdraw = "1"b;

grab_join:
	segno = fixed (baseno (segptr), 17);		/* get segment number forr syserr calls */

	len = divide (a_len + 1023, 1024, 17, 0);	/* len = NUMBER OF PAGES in request */


	call sum$getbranch (segptr, (36)"1"b /* WRITE */, ep, code);	/* access  entry, and lock dir. Root and
						  mylock are not acceptable */

/* The point of locking the directory is so that nobody else can try to activate the
	segment while we try. Boundfaults and segfaults in this state are acceptable. */

	if code ^= 0 then do;			/* no errors are acceptable */
	     rcode = code;				/* pass the buck */
	     return (null());
	end;
	dp = ptr (ep, 0);				/* get dir ptr for unlock call */
	if ep -> entry.dirsw then do;			/* we do not take kindly to ehs'ing dirs */
	     call lock$dir_unlock (dp);
	     rcode = error_table_$dirseg;		/* operation not allowed for dirs */
	     return (null());
	end;

	astep = activate (ep, code);			/* Force to be active. Must have
						   large enough ASTE. */

	if astep = null then do;			/* Could be disk offline, etc. */
	     call lock$dir_unlock (dp);
	     rcode = code;
	     return (null ());
	end;

	if astep -> aste.ehs then
		call syserr (1, "grab_aste: Attempt to re-use seg ^o", segno);

	astep -> aste.ddnp = "1"b;			/* Don't deposit null pages- this protects
						   against deactivation, but boundsfaults go thru,
						   and segment moves reproduce the withdrawals! */

	call lock$unlock_ast;			/* Unlock AST to allow segmoves and boundsfaults */

	if prewithdraw then pno = 1;
	else pno = len;				/* Get prewithdraw range */

	do pno = pno to len by 1;			/* Touch all pages */
	     word = segptr -> based_word ((pno - 1) * 1024);	/* Cause allocation */
						/* aste.ddnp prevents against deallocation */
	end;

	astep = activate (ep, code);
	if astep = null then call syserr$error_code (1, code, "grab_aste: failed to reactivate ^p", ep);

	astep -> aste.ddnp = prewithdraw;		/* Conditionally turn off ddnp */

	astep -> aste.ehs = "1"b;			/* set entry hold active */

	if do_io then do;				/* if used for i/o, must disencache  */
	     astep -> aste.any_access_on = "0"b;	/* put in non-encached state */
	     astep -> aste.write_access_on,
	     astep -> aste.inhibit_cache = "1"b;	/* and make sure it stays there. */
	     call setfaults$cache (astep, "0"b);	/* take it out of current caches */
	end;

	call lock$unlock_ast;
	call lock$dir_unlock (dp);	/* unlock dir, now that ehs is on */
	rcode = 0;				/* all is ok */

	return (astep);				/* return ast entry  ptr */

/**/
release_io:	entry (a_astep);			/* entry to un-disencache and de-ehs */
	do_io  = "1"b;
	prewithdraw = "0"b;
	go to release_join;

release_prewithdraw: entry (a_astep);			/* Release nondepositable segments as ssch */

	prewithdraw = "1"b;
	do_io = "0"b;
	go to release_join;

release:	entry (a_astep);
	do_io = "0"b;
	prewithdraw = "0"b;

release_join:
	astep = a_astep;				/* copy arg */
	if ^astep -> aste.ehs then
	     call syserr (1, "grab_aste: Unprotected segment:  astep = ^p", astep);
						/* must have ehs on */
	astep -> aste.ehs = "0"b;			/* turn off ehs */
	if do_io then astep -> aste.inhibit_cache = "0"b; /* resume standard cache control */
	if prewithdraw then astep -> aste.ddnp = "0"b;
	return;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   grab_aste: Attempt to reuse segno SSS

   S: $crash

   T: $run

   M: A call has been made to force active a segment already forced active.
   This indicates an inconsistency in the programming of the supervisor.
   $err

   A: $recover
   $notify

   Message:
   grab_aste: failed to reactivate PPPP ERRORMESSAGE

   S: $crash

   T: $run

   M: $err

   A: $recover
   $notify

   Message:
   grab_aste: Unprotected segment: astep = AAA

   S: $crash

   T: $run

   M: An attempt was made to release from forced activity a segment (whose
   AST entry is at AAA) which was not even in a state of forced activity.
   $err

   A: $inform
   $recover

   END MESSAGE DOCUMENTATION */

end;
