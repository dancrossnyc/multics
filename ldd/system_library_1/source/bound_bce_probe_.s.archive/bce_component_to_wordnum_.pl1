/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

bce_component_to_wordnum_: proc (p_segnum, p_segname, p_component, return_segnum, return_wordnum, p_code);

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* Program to take a segment number and an entry name which will return a word number relative to the beginning of the segment. */

/* Coded June of 1984 by Allen Ball. */

dcl  bce_get_defptr_		entry (ptr, ptr, ptr, ptr, fixed bin (35));
dcl  code				fixed bin (35);
dcl  1 component_acc		aligned,
       2 num_chars			fixed bin (9) unsigned unaligned,
       2 string			char (32) unaligned;
dcl  crash_definitions_$		external;
dcl  crash_lot$			external;
dcl  error_table_$no_ext_sym		external;
dcl  p_code			fixed bin (35) parameter;
dcl  p_component			char (32) parameter;
dcl  p_segname			char (32);
dcl  p_segnum			fixed bin (15) parameter;
dcl  return_segnum			fixed bin (15) parameter;
dcl  return_wordnum			fixed bin (26) parameter;
dcl  1 segname_acc			aligned like component_acc;

dcl  (addr, addrel, length, rtrim, segno, substr, unspec, wordno) builtin;

	code = 0;
	p_code = 0;
	unspec (component_acc) = "0"b;		/* Set up acc strings for get_defptr_ */
	component_acc.num_chars = length (rtrim (p_component));
	substr (component_acc.string, 1, component_acc.num_chars) = rtrim (p_component);
	unspec (segname_acc) = "0"b;
	segname_acc.num_chars = length (rtrim (p_segname));
	substr (segname_acc.string, 1, segname_acc.num_chars) = rtrim (p_segname);
	lotp = addr (crash_lot$);
	definitions_ptr = addr (crash_definitions_$);
	def_header_ptr = addrel (definitions_ptr, definitions.dot (p_segnum).offset);
	call bce_get_defptr_ (def_header_ptr, addr (segname_acc), addr (component_acc), def_ptr, code);
	if code ^= 0 then do;
	     p_code = code;
	     return;
	end;
	if definition.class = CLASS_TEXT then do;
	     return_segnum = p_segnum;
	     return_wordnum = definition.thing_relp;
	end;
	else if definition.class = CLASS_LINKAGE then do;
	     return_segnum = segno (lot.lp (p_segnum));
	     return_wordnum = wordno (lot.lp (p_segnum)) + definition.thing_relp;
	end;

/* Otherwise class is equal to CLASS_SYMBOL, CLASS_SEGNAME, or CLASS_STATIC and we are not interested in it. */

	else p_code = error_table_$no_ext_sym;
	return;

%include definition_dcls;
%include hc_definitions_seg;
%include lot;

     end /* bce_component_to_wordnum */;
