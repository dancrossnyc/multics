/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

bce_get_defptr_: proc (p_def_header_ptr, segname_acc_ptr, symbol_acc_ptr, returned_def_ptr, code);

/* 06/05/84 Program by A.Ball to replace get_defptr_.alm for use later in bce_probe. */
/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  addrel		        builtin;
dcl  code			        fixed bin (35) parameter; /* Standard error code. */
dcl  counter		        fixed bin;
dcl  1 def_name		        like acc_string based (def_name_ptr); /* Definition name we are looking for. */
dcl  def_name_ptr		        ptr;
dcl  1 def_segname_acc	        aligned like acc_string based (def_segname_acc_ptr);
dcl  def_segname_acc_ptr	        ptr;
dcl  duplicate_table_index	        fixed bin;
dcl  error_table_$no_ext_sym	        external fixed bin (35); /* Error code "External symbol not found." */
dcl  hash_index		        fixed bin;
dcl  mod			        builtin;
dcl  null			        builtin;
dcl  out_of_bounds		        condition;
dcl  p_def_header_ptr	        ptr parameter;	/* Pointer to definition section. */
dcl  returned_def_ptr	        ptr parameter;	/* Pointer to found definition. */
dcl  1 segname_acc		        aligned like acc_string based (segname_acc_ptr);
dcl  segname_acc_ptr	        ptr parameter;	/* Pointer to seg name being searched for. */
dcl  1 symbol_acc		        aligned like acc_string based (symbol_acc_ptr);
dcl  symbol_acc_ptr		        ptr parameter;	/* Pointer to symbol name being searched for. */
dcl  word			        fixed bin (36) unsigned unaligned based;

%page;
	def_header_ptr = p_def_header_ptr;
	on out_of_bounds goto no_match;
	code = 0;
	counter = 0;				/* Initiate "sanity" counter. */
	if definition_header.hash_table_relp = 0 then do;

/* Go here if there is no hash table.  First check class 3 defs for segname. */

	     def_ptr = null;
	     do segname_ptr = addrel (def_header_ptr, definition_header.def_list_relp) repeat addrel (def_header_ptr, segname_definition.next_segname_relp) while (segname_ptr -> word ^= 0);
		counter = counter + 1;
		if counter > 1000 then goto no_match;
		def_segname_acc_ptr = addrel (def_header_ptr, segname_definition.name_relp);
		if def_segname_acc.string = segname_acc.string then do;
		     def_ptr = addrel (def_header_ptr, segname_definition.forward_relp);
		     goto start_def_search_loop;
		end;
	     end;

	     def_ptr = addrel (def_header_ptr, definition_header.def_list_relp);

start_def_search_loop:
	     do def_ptr = def_ptr repeat addrel (def_header_ptr, definition.forward_relp) while (def_ptr -> word ^= 0 & counter < 1000);
						/* forwrd_relp -> (zero word) marks the end of the thread. */
		counter = counter + 1;
		if ^definition.flags.ignore then do;
		     def_name_ptr = addrel (def_header_ptr, definition.name_relp); /* Get the name associated with the definition. */
		     if symbol_acc.string = def_name.string then goto found_def;
		end;
	     end;
	end;
%page;
	else do;
	     def_ht_ptr = addrel (def_header_ptr, definition_header.hash_table_relp); /* Have pointer to beginning of hash table. */
						/* Hash index is determined by the length of the name string and the first three characters (the first word) mod divided by the size the table plus one. */
	     do hash_index = mod (symbol_acc_ptr -> word, definition_ht.n_entries) + 1 repeat hash_index + 1 while (definition_ht.table (hash_index).def_relp ^= 0 & hash_index < 1000); /* Sanity check in case definition_ht.n_entries is trashed. */
		def_ptr = addrel (def_header_ptr, definition_ht.table (hash_index).def_relp); /* Get the pointer to the definition for this entry. */
		if definition.forward_relp = 0 then do; /* If true there is pointing to a duplicate name table and not a definition. */
		     dup_table_ptr = def_ptr;
		     if duplicate_table.n_names < 1 | duplicate_table.n_names > 999 then goto no_match;
		     do duplicate_table_index = 1 to duplicate_table.n_names; /* Linear search through the duplicate name table. */
			def_ptr = addrel (def_header_ptr, duplicate_table.table (duplicate_table_index).def_relp);
			def_name_ptr = addrel (def_header_ptr, definition.name_relp);
			segname_ptr = addrel (def_header_ptr, definition.segname_relp);
			def_segname_acc_ptr = addrel (def_header_ptr, segname_definition.name_relp);
			if symbol_acc.string = def_name.string & segname_acc.string = def_segname_acc.string then goto found_def; /* Make the comparision. */
		     end;
		end;
		else do;				/* It is just a normal definition. */
		     def_name_ptr = addrel (def_header_ptr, definition.name_relp); /* Get pointer to name associated with this definition. */
		     if symbol_acc.string = def_name.string then goto found_def; /* Make the comparision. */
		end;
	     end;
	end;
%page;
no_match:
	returned_def_ptr = null ();			/* Return null pointer. */
	code = error_table_$no_ext_sym;		/* Appropriate error code. */
	return;

found_def:
	returned_def_ptr = def_ptr;			/* Return the found pointer. */
	return;

%page; %include definition_dcls;

     end /* get_def_ptr */;

