/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* RING-0-PEEK --- Procedure to return to a user in arbitrary ring
   the contents of arbitrary supervisor segments.

   Converted from EPL to PL/I by C Garman, December 1970
   VTOCE dumping by BSG 4/20/76
   New PVTE include file by J. Bongiovanni, March 1982
   Support 256K segments, E. N. Kittlitz, March 1983
   Removed access check (let hardware do it), Keith Loepere, October 1984.

   */

ring_0_peek: proc (a_from_ptr, a_to_ptr, a_num_words);

/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_from_ptr			ptr parameter;
dcl  a_message			char (*) parameter;
dcl  a_num_words			fixed bin (19) parameter;
dcl  a_pvtx			fixed bin parameter;
dcl  a_to_ptr			ptr parameter;
dcl  a_vtocx			fixed bin parameter;
dcl  a_vtocep			ptr parameter;

/* Variables */

dcl  code				fixed bin (35);
dcl  from_ptr			ptr;
dcl  i				fixed bin (18);
dcl  1 local_vtoce			like vtoce aligned;
dcl  num_words			fixed bin (19);
dcl  patch_mem			bit (1) aligned;
dcl  pvid				bit (36) aligned;
dcl  pvtx				fixed bin;
dcl  rel_from_ptr			fixed bin (18);
dcl  rel_to_ptr			fixed bin (18);
dcl  vtocx			fixed bin;
dcl  to_ptr			ptr;

/* Entries */

dcl  pmut$cam			entry;
dcl  syserr			entry options (variable);
dcl  vtoc_man$get_vtoce		entry (bit (36) aligned, fixed bin, fixed bin, bit (3) aligned, ptr, fixed bin (35));

/* External */

dcl  error_table_$invalid_pvtx	fixed bin (35) ext;
dcl  pds$process_group_id		char (32) aligned ext;
dcl  pvt$n_entries			fixed bin ext;
dcl  sys_info$seg_size_256K		fixed bin (19) ext static;

/* Based */

dcl  move_array			(num_words) fixed bin (35) based;

/* Misc */

dcl  (addr, fixed, max, rel, size)	builtin;
%page;
	patch_mem = "0"b;
	go to common;

patch: entry (a_from_ptr, a_to_ptr, a_num_words);		/* Explicit patch, inhibit mode checking */

	patch_mem = "1"b;

common:	from_ptr = a_from_ptr;			/* Copy arguments */
	to_ptr = a_to_ptr;
	if patch_mem then addr (to_ptr) -> its.ringno = ""b;
	else addr (from_ptr) -> its.ringno = ""b;	/* force ringno of from ptr to 0 */
	num_words = a_num_words;

	if num_words <= 0 then return;		/* A few gullibility tests */

	rel_from_ptr = fixed (rel (from_ptr), 18);
	rel_to_ptr = fixed (rel (to_ptr), 18);

	if (max (rel_to_ptr, rel_from_ptr) + num_words) > sys_info$seg_size_256K then return; /* Protect the guy from himself */

	if patch_mem then do;

	     call syserr (0, "^a:  ^d words @ ^p", pds$process_group_id, num_words, to_ptr);
						/* Print header on console */

	     do i = 1 to num_words;

		call syserr (0, "^6o^14w to ^w", i - 1, (to_ptr -> move_array (i)), (from_ptr -> move_array (i)));
						/* Print before & after, take fault here if no access */

	     end;
	     call pmut$cam;				/* clear caches */
	end;

	to_ptr -> move_array (*) = from_ptr -> move_array (*); /* Use PL/I array copy */

	return;					/* All paths use this return */
%page;
message: entry (a_message);				/* Print message from user */

	call syserr (3, "^a:  ^a", pds$process_group_id, (a_message)); /* Print message, turning on bleeper */

	return;					/* Return to caller */
%page;
vtoce_peek: entry (a_pvtx, a_vtocx, a_vtocep, a_code);

	num_words = size (vtoce);
	vtocep = a_vtocep;				/* Set up for copy */

	pvtx = a_pvtx;
	vtocx = a_vtocx;

	if pvtx <= 0 | pvtx > pvt$n_entries then go to bad_pvtx;

	pvt_arrayp = addr (pvt$array);
	pvtep = addr (pvt_array (pvtx));

	if ^pvte.storage_system | ^pvte.used then do;
bad_pvtx:	     a_code = error_table_$invalid_pvtx;
	     return;
	end;

	pvid = pvte.pvid;
	call vtoc_man$get_vtoce (pvid, pvtx, vtocx, "111"b, addr (local_vtoce), code); /* vtoc_man will validate vtocx */
	if code = 0 then
	     vtocep -> move_array = addr (local_vtoce) -> move_array;
	a_code = code;
	return;
%page; %include disk_pack;
%page; %include its;
%page; %include pvte;
%page; %include vtoce;
%page;

/* BEGIN MESSAGE DOCUMENTATION

Message:
PERSON.PROJ.T:  NN words @ SSS|XXX
.br
  XXX  WWWWWWWWWWWW to YYYYYYYYYYYY
.br
  XXX  WWWWWWWWWWWW to YYYYYYYYYYYY

S:	$beep

T:	$run

M:	A privileged user has patched the hardcore supervisor.

A:	$ignore


Message:
PERSON.PROJ.T:  MESSAGE

S:	$beep

T:	$run

M:	A privileged user has sent a message to be printed on the SYSERR console.

A:	Read the message and take appropriate action.


END MESSAGE DOCUMENTATION */

     end ring_0_peek;
