/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/* format: style2,indcomtxt */
set_privileges:
     procedure;

/* Modified 1985-03-04, EJ Sharpe: remove special_op event flags and auditing for ring-1 TCB calls */
/* Modified 1985-01-21, BIM: ring 1 (admin) privilege manipulation. */
/* Modified 84-12-05 by EJ Sharpe to use access_audit_ instead of protection_audit_ */
/* Modified 84-11 BIM, changed to set all privs in apte */
/* Modified May 1983 by E. N. Kittlitz to add communication privilege */
/* Modified 760309 by L.Scheffler to fix excessive auditing calls */
/* Modified by E. Stone on Sept 1975 to change kst when setting directory privileges */
/* Coded 16 Oct. 1974 by D. H. Hunt */

/* This ring 0 procedure is expected to be invoked only by the */
/* system security administrator and by certain SysDaemon processes */
/* which need to bypass the access isolation mechanism (AIM) checks */

/* A process grants itself a particular privilege to bypass AIM checks */
/* by calling one of the "---priv_on" entry points.  This sets the */
/* corresponding privilege bit on (="1"b) */

/* A process rescinds a particular privilege for bypassing AIM checks */
/* by calling one of the "---priv_off" entry points.  This sets the */
/* corresponding privilege bit off (="0"b) */


	declare access_audit_$log_general
				 entry external options (variable);
	declare access_operations_$system_privilege_modify
				 bit (36) aligned external;
	declare 1 pds$access_authorization
				 aligned like aim_template external;
	declare pds$admin_privileges	 bit (36) aligned external;
	declare pds$apt_ptr		 pointer external;
	declare 1 event_flags	 aligned like audit_event_flags;
	declare level$get		 entry returns (fixed bin (3));
	declare ring_alarm$reset	 entry;
	declare setfaults$disconnect	 entry (fixed bin);
	declare ME		 char (14) aligned internal static initial ("set_privileges") options (constant);
	declare P_code		 fixed bin (35) parameter;
	declare P_set_privs		 bit (36) aligned parameter;
	declare P_old_privs		 bit (36) aligned parameter;

	declare changed		 bit (1) aligned;
	declare set_privs		 bit (36) aligned;
	declare old_privs		 bit (36) aligned;

	declare (addr, bit, bool, hbound, length, null, rtrim, string, substr)
				 builtin;
%page;

admin_set:
     entry (P_set_privs, P_old_privs);

	set_privs = P_set_privs;
	call set_admin_privileges (set_privs, old_privs); /* fixes the KST */
	P_old_privs = old_privs;
	return;

admin_reset:
     entry (P_set_privs);

	set_privs = P_set_privs;
	call reset_admin_privileges (set_privs);	/* fixes the KST */
	P_set_privs = set_privs;
	return;


admin_ring_alarm:					/* Called on a ring alarm to get rid of these */
     entry;

	set_privs = bit (string (pds$access_authorization.privileges), 36) & ^pds$admin_privileges;
						/* construct appropriate priv set */
	substr (set_privs, 36, 1) = "1"b;		/* Give it something to do */
	call reset_admin_privileges (set_privs);
	pds$admin_privileges = ""b;			/* double sure */
	return;
%page;

/* In managing its log buffers, syserr may send a wakeup to the initializer */
/* process.  Everything will work OK, since if the wakeup is sent from the */
/* initializer to itself, the wakeup will be allowed regardless of the state */
/* of the IPC privilege bits.  If another process sends the wakeup to the */
/* initializer, it will be allowed since the initializer will have IPC privilege */
/* on before other processes are allowed to log in. */

ipc_priv_on:					/* disables the AIM check for interprocess communication */
     entry (P_code);

	call set_one_privilege (IPC_PRIVILEGE_X, IPC_PRIVILEGE, changed);

	if changed
	then P_code = 0;
	else P_code = 1;
	return;


ipc_priv_off:					/* enables the AIM check for interprocess communication */
     entry (P_code);

	call clear_one_privilege (IPC_PRIVILEGE_X, ^IPC_PRIVILEGE, changed);

	if changed
	then P_code = 0;
	else P_code = 1;
	return;

dir_priv_on:					/* disables the AIM checks for directories */
     entry (P_code);

	call set_one_privilege (DIR_PRIVILEGE_X, DIR_PRIVILEGE, changed);
	if changed
	then do;
		call fix_kst;			/* cause access to directories to be recalculated */
		P_code = 0;
	     end;
	else P_code = 1;
	return;

dir_priv_off:					/* enables the AIM checks for directories */
     entry (P_code);

	call clear_one_privilege (DIR_PRIVILEGE_X, ^DIR_PRIVILEGE, changed);

	if changed
	then do;
		call fix_kst;			/* cause access to directories to be recalculated */
		P_code = 0;
	     end;
	else P_code = 1;
	return;

seg_priv_on:					/* disables the AIM checks for segments */
     entry (P_code);

	call set_one_privilege (SEG_PRIVILEGE_X, SEG_PRIVILEGE, changed);

	if changed
	then do;
		P_code = 0;
		call fix_kst_seg;
	     end;
	else P_code = 1;
	return;

seg_priv_off:					/* enables the AIM checks for segments */
     entry (P_code);

	call clear_one_privilege (SEG_PRIVILEGE_X, ^SEG_PRIVILEGE, changed);
	if changed
	then do;
		P_code = 0;
		call fix_kst_seg;
	     end;
	else P_code = 1;

	return;

soos_priv_on:					/* prevents access to directories which have the */
     entry (P_code);				/* security out of service attribute turned on */

	call set_one_privilege (SOOS_PRIVILEGE_X, SOOS_PRIVILEGE, changed);
	if changed
	then P_code = 0;
	else P_code = 1;
	return;

soos_priv_off:					/* allows access to directories which have the */
     entry (P_code);				/* security out of service attribute turned on */
	call clear_one_privilege (SOOS_PRIVILEGE_X, ^SOOS_PRIVILEGE, changed);

	if changed
	then P_code = 0;
	else P_code = 1;
	return;

ring1_priv_on:					/* disables the interpretive AIM */
     entry (P_code);				/* checks in ring one */
	call set_one_privilege (RING1_PRIVILEGE_X, RING1_PRIVILEGE, changed);
	if changed
	then P_code = 0;
	else P_code = 1;
	return;

ring1_priv_off:					/* enables the interpretive AIM */
     entry (P_code);				/* checks in ring one */

	call clear_one_privilege (RING1_PRIVILEGE_X, ^RING1_PRIVILEGE, changed);
	if changed
	then P_code = 0;
	else P_code = 1;
	return;

rcp_priv_on:					/* disables the interpretive AIM */
     entry (P_code);				/* checks in RCP */

	call set_one_privilege (RCP_PRIVILEGE_X, RCP_PRIVILEGE, changed);
	if changed
	then P_code = 0;
	else P_code = 1;
	return;

rcp_priv_off:					/* enables the interpretive AIM */
     entry (P_code);				/* checks in RCP */
	call clear_one_privilege (RCP_PRIVILEGE_X, ^RCP_PRIVILEGE, changed);
	if changed
	then P_code = 0;
	else P_code = 1;
	return;

comm_priv_on:					/* disables the interpretive AIM */
     entry (P_code);				/* checks in TCP and dial_ctl_ */

	call set_one_privilege (COMM_PRIVILEGE_X, COMM_PRIVILEGE, changed);
	if changed
	then P_code = 0;
	else P_code = 1;
	return;

comm_priv_off:					/* enables the interpretive AIM */
     entry (P_code);				/* checks in comm */
	call clear_one_privilege (COMM_PRIVILEGE_X, ^COMM_PRIVILEGE, changed);
	if changed
	then P_code = 0;
	else P_code = 1;
	return;
%page;

fix_kst:
     procedure;

	dcl     segno		 fixed bin;
	dcl     seg_flag		 bit (1) aligned;
	dcl     faulted_one		 bit (1) aligned;

	seg_flag = "0"b;
	go to COMMON;

fix_kst_seg:
     entry;

	seg_flag = "1"b;

COMMON:
	kstp = pds$kstp;				/* get pointer to kst  */
	faulted_one = "0"b;
	do segno = kstp -> kst.lowseg to kstp -> kst.highest_used_segno;
						/* whip thru kst looking for dirs */
	     kstep = addr (kstp -> kst.kst_entry (segno));
	     if kste.uid ^= ""b
	     then if (kste.dirsw & ^seg_flag) | (^kste.dirsw & ^kste.priv_init & seg_flag)
		then do;
			kstep -> kste.dtbm = (36)"1"b;/* set dtbm so that access will be recalculated as needed */
			if seg_flag
			then call setfaults$disconnect (segno);
		     end;

	end;

     end fix_kst;
%page;

set_one_privilege:
     procedure (privilege_index, privilege_mask, changed);

	declare changed		 bit (1) aligned;
	declare privilege_index	 fixed bin;
	declare privilege_mask	 bit (36) aligned;
	declare new_privs		 bit (18) aligned;
	declare old_privs		 bit (18) aligned;
	declare apte_auth_ptr	 pointer;
	declare 1 apte_auth		 aligned like aim_template based (apte_auth_ptr);
	declare turn_on		 bit (1) aligned;

	turn_on = "1"b;
	go to COMMON;

clear_one_privilege:
     entry (privilege_index, privilege_mask, changed);

	turn_on = "0"b;

COMMON:
	changed = "0"b;
	old_privs = string (pds$access_authorization.privileges);
						/* starts same as old */
	if turn_on
	then new_privs = old_privs | privilege_mask;
	else new_privs = old_privs & privilege_mask;	/* caller ^'s to get ^'ed form in as text constant */

	if new_privs = old_privs
	then return;				/* with changed = "0"b */

	changed = "1"b;
	apte_auth_ptr = addr (pds$apt_ptr -> apte.access_authorization);
	string (apte_auth.privileges), string (pds$access_authorization.privileges) = new_privs;
	string (event_flags) = ""b;
	event_flags.grant = "1"b;
	event_flags.priv_op = "1"b;
	call access_audit_$log_general (ME, level$get (), string (event_flags),
	     access_operations_$system_privilege_modify, "", 0, null (), 0, "^a turned ^[on^;off^]",
	     system_privilege_names (privilege_index).long, turn_on);
	return;

     end set_one_privilege;

set_admin_privileges:
     procedure (new_privileges, old_privileges);

	declare (new_privileges, old_privileges)
				 bit (36) aligned;
	declare apte_auth_ptr	 pointer;
	declare 1 apte_auth		 aligned like aim_template based (apte_auth_ptr);
	declare priv_value		 bit (18);
	declare name_string		 char (100) varying;
	declare x			 fixed bin;
	declare privs_before_set	 bit (18) aligned;
	declare different_privs_mask	 bit (18) aligned;

	old_privileges = string (pds$access_authorization.privileges);
	substr (old_privileges, 36, 1) = "1"b;		/* Mark the setting */
	priv_value = substr (old_privileges, 1, 18) | substr (new_privileges, 1, 18);
						/* Turn on the new ones */
	name_string = "";
	do x = 1 to hbound (system_privilege_names, 1);
	     if substr (new_privileges, x, 1)
	     then do;
		     if length (name_string) > 0
		     then name_string = name_string || ",";
		     name_string = name_string || rtrim (system_privilege_names.short (x));
		end;
	end;

	apte_auth_ptr = addr (pds$apt_ptr -> apte.access_authorization);
	privs_before_set = string (pds$access_authorization.privileges);

	different_privs_mask = bool (privs_before_set, new_privileges, "0110"b);
						/* XOR */
	pds$admin_privileges = pds$admin_privileges | (new_privileges & different_privs_mask);
						/* mark */
	call ring_alarm$reset;

	string (apte_auth.privileges), string (pds$access_authorization.privileges) = priv_value;

	if ((priv_value & DIR_PRIVILEGE) ^= ""b) /* We only turn ON here */ & ((privs_before_set & DIR_PRIVILEGE) = ""b)
	then call fix_kst;
	if ((priv_value & SEG_PRIVILEGE) ^= ""b) & ((privs_before_set & SEG_PRIVILEGE) = ""b)
	then call fix_kst_seg;

/**** The following code would usually audit the event.  However, setting
      /****  privileges temporarily is a normal function of the ring-1 TCB.
      /****  Therefore, we elect to avoid many unnecessary audit messages.
      /****  Besides, there's no associated object or event flag on which to decide
      /****  upon auditing.
      /****	string (event_flags) = ""b;
      /****	event_flags.grant = "1"b;
      /****	event_flags.WHAT? = "1"b;	HAVE to have an event flag here - admin_op is NOT the correct one
      /****	call access_audit_$log_general (ME, level$get (), string (event_flags),
      /****	     access_operations_$system_privilege_modify, "", 0, null (), 0, "^a turned on", name_string);
      / ****/
	return;


reset_admin_privileges:
     entry (old_privileges);

	if ^substr (old_privileges, 36, 1)
	then return;				/* Not anything to reset. */

	substr (old_privileges, 36, 1) = "0"b;
	privs_before_set = string (pds$access_authorization.privileges);
	priv_value = substr (old_privileges, 1, 18);

	apte_auth_ptr = addr (pds$apt_ptr -> apte.access_authorization);

	different_privs_mask = bool (privs_before_set, old_privileges, "0110"b);
						/* XOR */
	pds$admin_privileges = pds$admin_privileges & ^(^old_privileges & different_privs_mask);
						/* Zero out privs zero'd out by the reset */

	string (apte_auth.privileges), string (pds$access_authorization.privileges) = priv_value;
	call ring_alarm$reset;

	if (priv_value & DIR_PRIVILEGE) ^= (privs_before_set & DIR_PRIVILEGE)
	then call fix_kst;
	if (priv_value & SEG_PRIVILEGE) ^= (privs_before_set & SEG_PRIVILEGE)
	then call fix_kst_seg;

	name_string = "";
	do x = 1 to hbound (system_privilege_names, 1);
	     if substr (privs_before_set, x, 1) ^= substr (priv_value, x, 1)
	     then do;
		     if length (name_string) > 0
		     then name_string = name_string || ",";
		     name_string = name_string || rtrim (system_privilege_names (x).short);
		     if substr (priv_value, x, 1)
		     then name_string = name_string || "(set)";
		     else name_string = name_string || "(reset)";
		end;
	end;


/**** The following code would usually audit the event.  However, setting
      /****  privileges temporarily is a normal function of the ring-1 TCB.
      /****  Therefore, we elect to avoid many unnecessary audit messages.
      /****  Besides, there's no associated object or event flag on which to decide
      /****  upon auditing.
      /****	string (event_flags) = ""b;
      /****	event_flags.grant = "1"b;
      /****	event_flags.WHAT? = "1"b;	HAVE to have an event flag here - admin_op is NOT the correct one
      /****	call access_audit_$log_general (ME, level$get (), string (event_flags),
      /****	     access_operations_$system_privilege_modify, "", 0, null (), 0, "change: ^a", name_string);
      / ****/
	return;

     end set_admin_privileges;

/* format: off */
%page; %include aim_privileges;
%page; %include aim_template;
%page; %include apte;
%page; %include kst;
%page; %include system_privileges;
%page; %include access_audit_eventflags;
/* format: on */
%page;
/* BEGIN MESSAGE DOCUMENTATION


   Message:
   AUDIT (set_privileges): GRANTED modification of system AIM privilege ADDED_INFO

   S:	$access_audit

   T:	$run

   M:	The specified user made a privileged call for modifying the
   process AIM privileges

   A:	$ignore


   END MESSAGE DOCUMENTATION */

     end set_privileges;
