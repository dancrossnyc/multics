/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-07-18,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to add extra indirection when applying the referencing_dir rule
     if the referencing segment is an object MSF component, and to add the
     same_directory entrypoint for object MSF link snapping.
                                                   END HISTORY COMMENTS */


/* format: style2,indcomtxt */

fs_search:
     procedure (a_refptr, a_refname, a_MSF_sw, a_segptr, a_code);

/****
      Modified 85-04-09 by Keith Loepere to remove extraneous error codes from set_wdir.
      Modified 85-02-25 by Keith Loepere for name lookup error I missed last time.
      Modified 84-10-15 by Keith Loepere for auditing.  Also to not beep
      console on RNT damage.
      Modified 84-06-25 by Keith Loepere to use the new dc_find.
      Modified 83-12-08 BIM to protect against bad user ring pointers,
      flush get_rel_segment, and clean up pigsties.
      Modified 1/83 by Keith Loepere for object on unmounted logical volume.
      Modified 2/79 W. Olin Sibert to make fs_search return correct error code for error_table_$moderr
      Modified 3/77 by M. Weaver to use search rules in user ring and not zero lot entry
      Modified 8/76 by M. Weaver to initialize LOT entry directly
      Init search rules for ring 8/76 THVV
      Modified June 1976 by R. Bratt to dereference old wdirs
      Massively reorganized April 1975 by R. Bratt for new kst
      8/7/75	by S. Webber to remove get_seg_count, get_seg_ptr, and get_segment entries and
      to add fs_search entry

*/

/* Parameters */

	dcl     a_code		 fixed bin (35) parameter;
						/* returned status code */
	dcl     a_pathcnt		 fixed bin (17) parameter;
	dcl     a_pathptr		 ptr parameter;
	dcl     a_refname		 char (*) parameter;/* segment referenced */
	dcl     a_refptr		 ptr parameter;	/* pointer to segment attempting to link */
	dcl     a_segptr		 ptr parameter;	/* returned pointer to segment referenced */
	dcl     a_MSF_sw		 bit (1) aligned parameter;
						/* on if refp refers to an MSF */
	dcl     a_wdir		 char (*) parameter;/* path name of new working directory */

/* Variables */

	dcl     bc		 fixed bin (24);
	dcl     code		 fixed bin (35);
	dcl     dirname		 char (168);
	dcl     i			 fixed bin;
	dcl     old_ep		 ptr;
	dcl     pathname		 char (168) varying;
	dcl     refname		 char (32);
	dcl     refptr		 ptr;		/* temporary storage */
	dcl     ring		 fixed bin (3);	/* variable for validation level */
	dcl     segment_number	 fixed bin;
	dcl     segment_uid		 bit (36) aligned;
	dcl     segptr		 ptr;		/* temporary storage */
	dcl     srp		 ptr;		/* pointer to search rules in current use */
	dcl     test_stack_reference	 bit (36) aligned;
	dcl     type		 fixed bin (2);
	dcl     MSF_sw		 bit (1) aligned;
	dcl     wdir		 char (168);
	dcl     wdp		 ptr;		/* working directory pointer */

/* Based */

	dcl     based_reference	 bit (36) aligned based;
	dcl     dname		 char (168) based aligned;
	dcl     1 sr		 (22) based aligned,/* search rule declaration */
	        ( 2 base		 bit (18),	/* segment number */
		2 off		 bit (18),	/* offset or code */
		2 uid		 bit (36)
		)		 unaligned;	/* unique id */

/* External */
	dcl     error_table_$dirseg	 ext fixed bin (35);
	dcl     error_table_$inconsistent_rnt
				 ext fixed bin (35);
	dcl     error_table_$logical_volume_not_defined
				 ext fixed bin (35);
	dcl     error_table_$moderr	 ext fixed bin (35);
	dcl     error_table_$root	 ext fixed bin (35);
	dcl     error_table_$seg_not_found
				 ext fixed bin (35);
	dcl     error_table_$segknown	 ext fixed bin (35);
	dcl     pds$stacks		 (0:7) ptr ext;
	dcl     pds$process_group_id	 char (32) ext static;
	dcl     pds$wdir		 (0:7) ptr ext;	/* pointers to working directories (per ring) */
	dcl     pds$wdir_uid	 (0:7) ext bit (36);

/* Entries */

	dcl     get_kstep		 entry (fixed bin (17), ptr, fixed bin (35));
	dcl     get_pathname_	 entry (fixed bin (17), char (*) varying, fixed bin (35));
	dcl     initiate$initiate_count
				 entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr,
				 fixed bin (35));
	dcl     initiate$initiate_seg_count
				 entry (ptr, char (*), char (*), fixed bin (24), fixed bin (2), ptr,
				 fixed bin (35));
	dcl     level$get		 entry returns (fixed bin);
	dcl     lock$dir_unlock	 entry (ptr);
	dcl     ref_name_$get_segno	 entry (char (32) varying, fixed bin (17), fixed bin (35));
	dcl     segno_usage$decrement	 entry (fixed bin (17), fixed bin (35));
	dcl     status_$minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				 fixed bin (35));
	dcl     syserr		 entry options (variable);
	dcl     terminate_proc	 entry (fixed bin (35));

/* Misc */

	dcl     any_other		 condition;

	dcl     (addr, baseptr, hbound, length, null, ptr, rtrim, segno)
				 builtin;
%page;
	refptr = a_refptr;				/* copy arguments */
	refname = a_refname;
	MSF_sw = a_MSF_sw;
	segptr = null;

	code = 0;
	ring = level$get ();
	test_stack_reference = pds$stacks (ring) -> based_reference;
						/* in a new ring this will fault on stack which
						   will cause makestack to be invoked which
						   will init rnt and search rules */
	on any_other call USER_RING_DAMAGED ("stack_header.rnt_ptr", ring);
						/* now, however, a fault is evidence of a real problem */
	rntp = pds$stacks (ring) -> stack_header.rnt_ptr;
	on any_other call USER_RING_DAMAGED ("rnt.srulep", ring);
	srp = rnt.srulep;				/* get pointer to search rules */
	on any_other call USER_RING_DAMAGED ("the RNT", ring);

/* start the search */

	do i = 1 to hbound (srp -> sr, 1);

	     if srp -> sr (i).off
	     then do;				/* special code */

/* do this for special codes */

		     if srp -> sr (i).off = INITIATED_RULE
		     then do;			/* search RNT */
			     call ref_name_$get_segno ((refname), segment_number, code);
			     if code = 0
			     then do;
				     segptr = baseptr (segment_number);
				     addr (segptr) -> its_unsigned.ringno = 0;
						/* writearound for compiler bug to force ring num = ring of exec (i.e., 0) */
				     go to return;
				end;
			end;

		     else if srp -> sr (i).off = REFERENCING_DIR_RULE
		     then do;			/* search parent of referencing proceedure */
			     if refptr ^= null
			     then do;		/* must have pointer to referencing proceedure */
				     call get_kstep (segno (refptr), kstep, code);
				     if code = 0
				     then do;	/* see if we have to go up another level for an MSF */
					     if MSF_sw
						then call get_kstep (segno (kste.entryp), kstep, code);
					     dp = ptr (kste.entryp, 0);
					     go to init_seg;
					end;
				end;
			end;

		     else if srp -> sr (i).off = WDIR_RULE
		     then do;			/* search the working directory */
			     dp = pds$wdir (ring);	/* get the working directory for this ring */
			     if dp ^= null
			     then do;
				     call get_kstep (segno (dp), kstep, code);
				     if code = 0
				     then if pds$wdir_uid (ring) = kstep -> kste.uid
						/* check uid to make sure */
					then go to init_seg;
				end;
			end;

		     else if srp -> sr (i).off = END_RULE
		     then do;			/* not found */
			     code = error_table_$seg_not_found;
			     goto return;
			end;

		     else if srp -> sr (i).off = BAD_RULE
		     then ;			/* ignore bad rule */
		end;

/* come here for fixed directory search rules */

	     else do;
		     dp = baseptr (srp -> sr (i).base); /* set up pointer to directory */
		     call get_kstep (segno (dp), kstep, code);
		     if code = 0
		     then if srp -> sr (i).uid = kstep -> kste.uid
			then do;			/* check uid to make sure */
init_seg:
				call initiate$initiate_seg_count (dp, refname, refname, (0), 1b, segptr, code);
				if segptr ^= null
				then do;
					if code = error_table_$segknown
					then code = 0;
						/* Clear residual code */
					go to return;
				     end;
				else if code = error_table_$moderr
				     | code = error_table_$logical_volume_not_defined
				then go to return;
				else if code = error_table_$dirseg
				then do;
					call dc_find$obj_existence_ptr (dp, ep, code);
					if code = 0
					then do;
						call get_pathname_ (segno (dp), pathname, code);
						call dc_find$finished (ep, DC_FIND_UNLOCK_DIR);
					     end;
					if code = 0
					then do;
						dirname = pathname;
						call status_$minf (dirname, refname, 1, type, bc, code);
					     end;
					if code = 0 & bc > 0 & type = 2
					then do;
						dirname = rtrim (pathname) || ">" || refname;
						call initiate$initiate_count (dirname, "0", refname,
						     (0), 1, segptr, code);
						if segptr ^= null
						then do;
							if code = error_table_$segknown
							then code = 0;
						/* Clear residual code */
							go to return;
						     end;
						else if code = error_table_$moderr
						     | code = error_table_$logical_volume_not_defined
						then go to return;
					     end;
				     end;
			     end;
		end;
	end;

	code = error_table_$seg_not_found;		/* If fall through, indicate not found */

return:
	a_segptr = segptr;				/* return segptr to caller */
	a_code = code;
	return;					/* and return */
%page;
same_directory:
     entry (a_refptr, a_refname, a_segptr, a_code);

	refptr = a_refptr;
	refname = a_refname;

/* preset return values */

	segptr = null;
	code = 0;

	if refptr ^= null
	then do;
		call get_kstep (segno (refptr), kstep, code);
		if code = 0
		then do;
			dp = ptr (kste.entryp, 0);
			call initiate$initiate_seg_count (dp, refname, "", 0, 1b, segptr, code);
			if code = error_table_$segknown
			then code = 0;
		     end;
	     end;
	else code = error_table_$seg_not_found;

	a_segptr = segptr;
	a_code = code;

	return;
%page;
set_wdir:
     entry (a_wdir, a_code);

	wdir = a_wdir;				/* copy args */

	call dc_find$dir_initiate (wdir, dp, code);
	if code = 0				/* user has access to see object */
	then do;
		ring = level$get ();		/* which ring is this for */
		segment_number = segno (pds$wdir (ring));
		segment_uid = pds$wdir_uid (ring);

		pds$wdir (ring) = dp;		/* save the pointer */
		pds$wdir_uid (ring) = dp -> dir.uid;	/* and the uid */
		call lock$dir_unlock (dp);

		call get_kstep (segment_number, kstep, code);
		if code = 0
		then if segment_uid = kstep -> kste.uid
		     then do;			/* dereference old wdir */
			     call dc_find$obj_terminate_ptr (baseptr (segment_number), old_ep, code);
						/* audit termination */
			     if code = 0
			     then call lock$dir_unlock (ptr (old_ep, 0));
			     if code = error_table_$root
			     then code = 0;
			     if code = 0
			     then call segno_usage$decrement (segment_number, (0));
			end;
		code = 0;
	     end;
	a_code = code;
	return;
%page;
get_wdir:
     entry (a_pathptr, a_pathcnt);			/* to return the path name of the working directory */

	pathname = "";				/* in case of error */
	ring = level$get ();			/* which ring is this for */
	wdp = pds$wdir (ring);
	call get_kstep (segno (wdp), kstep, code);
	if code = 0
	then if pds$wdir_uid (ring) = kstep -> kste.uid
	     then do;
		     call dc_find$obj_existence_ptr (wdp, ep, code);
		     if code = 0
		     then do;
			     call get_pathname_ (segno (wdp), pathname, code);
			     call dc_find$finished (ep, DC_FIND_UNLOCK_DIR);
			end;
		     else if code = error_table_$root
		     then do;
			     code = 0;
			     pathname = ">";
			end;
		end;
	a_pathptr -> dname = pathname;
	a_pathcnt = length (pathname);
	return;
%page;
USER_RING_DAMAGED:
     procedure (Damaged_thing, Ring);

	dcl     Damaged_thing	 char (*) parameter;
	dcl     Ring		 fixed bin (3) parameter;

	call syserr (JUST_LOG, "fs_search: Fatal damage detected to ^a in ring ^d for ^a.", Damaged_thing, Ring,
	     pds$process_group_id);
	call terminate_proc (error_table_$inconsistent_rnt);
     end USER_RING_DAMAGED;
%page;
%include dc_find_dcls;
%page;
%include dir_entry;
%page;
%include dir_header;
%page;
%include its;
%page;
%include kst;
%page;
%include rnt;
%page;
%include search_rule_flags;
%page;
%include stack_header;
%page;
%include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   fs_search: Fatal damage detected to WHAT in ring RING for USER.

   S:	$log

   T:	$run

   M:	Some object crucial to the operation of the dynamic linker in ring
   RING was detected damaged. Since the dynamic linker cannot operate
   in the process, it is terminated.

   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end fs_search;
