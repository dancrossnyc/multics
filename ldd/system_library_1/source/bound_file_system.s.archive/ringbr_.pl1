/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
ringbr_: proc;					/* list or set ring brackets */

/*        Modified by E. Swenson 02/21/85 to add get_ring_brackets_seg entry */
/*	Modified by Keith Loepere 10/22/84 to audit operation as an access change. */
/*	Modified by Keith Loepere 6/12/84 to call the new dc_find. */
/*	Modified by Lindsey Spratt 2/22/84 to change DM ringno check from the read bracket to the write bracket */
/*	Modified by E. N. Kittlitz 8/8/83 for setfaults$if_active pvid, vtocx args */
/*	Modified by Jay Pattin 6/9/83 to not require status permission if you have non-null on the branch
   for get_ring_brackets */
/*        Modified by J. Bongiovanni, September 1982, for Data Management */
/*	Modified by C. D. Tavares on 16 March 1979 to correct error codes */
/* 	Modified by R. Bratt on 06/01/76 to call find_$finished */
/*	Modified by BSG, 4/28/75 */
/* 	Modified by E. Stone 06/74 to convert to version 2 */

/* The entries to this routine are:
   name
   ringbr_$get
   $set
   $get_dir
   $set_dir

   arguments:
   1) a_dirname char(*)		a directory pathname (Input)
   2) a_ename char(*)		an entry name (Input)
   3) a_rb(3) fixed bin(3)		are seg ring brackets (Input for set, Output for get)
   3) a_drb(2) fixed bin(3)		are dir ringbrackets ( Input for dir_set, Output for dir_get)
   4) a_code fixed bin(35)		a standard error code (Output)
*/
dcl  a_code fixed bin (35) parameter;
dcl  a_dirname char (*) parameter;
dcl  a_drb (2) fixed bin (3) parameter;
dcl  a_ename char (*) parameter;
dcl  a_rb (3) fixed bin (3) parameter;
dcl  a_segptr ptr parameter;

dcl  directory fixed bin static options (constant) init (2);
dcl  get fixed bin static options (constant) init (1);
dcl  segment fixed bin static options (constant) init (1);
dcl  set fixed bin static options (constant) init (2);

dcl  code fixed bin (35);
dcl  d_s bit (1) aligned;
dcl  drbr (2) fixed bin (3);
dcl  dirname char (168);
dcl  entryname char (32);
dcl  function fixed bin;
dcl  i fixed bin;
dcl  lev fixed bin;
dcl  1 local_sc_info aligned like sc_info;
dcl  pathname_supplied bit (1) aligned;
dcl  pvid bit (36) aligned;
dcl  rbr (3) fixed bin (3);
dcl  segptr ptr;
dcl  type fixed bin;
dcl  uid bit (36) aligned;
dcl  username char (32) aligned;
dcl  vtocx fixed bin;

dcl  change_dtem ext entry (ptr);
dcl  check_gate_acl_ ext entry (ptr, bit (1) aligned, fixed bin, char (32) aligned, fixed bin (35));
dcl  level$get ext entry (fixed bin);
dcl  lock$dir_unlock ext entry (ptr);
dcl  setfaults$if_active ext entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (1) aligned);
dcl  sum$dirmod ext entry (ptr);
dcl  vtoc_attributes$get_info ext entry (bit (36) aligned, bit (36) aligned, fixed bin, ptr, fixed bin (35));

dcl  error_table_$ai_restricted ext fixed bin (35);
dcl  error_table_$dirseg ext fixed bin (35);
dcl  error_table_$invalid_ring_brackets ext fixed bin (35);
dcl  error_table_$lower_ring ext fixed bin (35);
dcl  error_table_$not_dm_ring ext fixed bin (35);
dcl  error_table_$notadir ext fixed bin (35);
dcl  error_table_$null_info_ptr ext fixed bin (35);
dcl  pds$processid bit (36) aligned ext;
dcl  sys_info$data_management_ringno fixed bin ext;

dcl  (addr, bit, fixed, null, ptr) builtin;
%page;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get: entry (a_dirname, a_ename, a_rb, a_code);		/* return segment ring brackets */

	function = get;
	type = segment;
	pathname_supplied = "1"b;
	go to start_proc;

get_ring_brackets_seg:
     entry (a_segptr, a_rb, a_code);

	function = get;
	type = segment;
	pathname_supplied = "0"b;
	go to start_proc;

get_dir: entry (a_dirname, a_ename, a_drb, a_code);	/* return directory ring brackets */

	function = get;
	type = directory;
	pathname_supplied = "1"b;
	go to start_proc;

set: entry (a_dirname, a_ename, a_rb, a_code);		/* set segment ring brackets  */

	function = set;
	type = segment;
	pathname_supplied = "1"b;
	go to start_proc;

set_dir: entry (a_dirname, a_ename, a_drb, a_code);	/* set directory ring brackets  */

	function = set;
	type = directory;
	pathname_supplied = "1"b;
	go to start_proc;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  */

start_proc:					/* initialization and argument copying */

	dp, ep = null ();

	if pathname_supplied then
	     do;
	     dirname = a_dirname;
	     entryname = a_ename;
	end;
	else do;
	     segptr = a_segptr;
	     if segptr = null then
		go to segptr_null_err;
	end;

	code = 0;
	call level$get (lev);

	if function = set then do;			/* copy input rb & perform consistency checks on them */
	     if type = segment then do;
		rbr = a_rb;
		do i = 1 to 3;
		     if rbr (i) < lev then go to low_ring_err;
		     if rbr (i) > 7 then go to brack_err;
		end;
		if rbr (1) > rbr (2) then go to brack_err;
		if rbr (2) > rbr (3) then go to brack_err;
	     end;

	     else do;
		drbr = a_drb;
		do i = 1 to 2;
		     if drbr (i) < lev then go to low_ring_err;
		     if drbr (i) > 7 then go to brack_err;
		end;
		if drbr (1) > drbr (2) then go to brack_err;
	     end;
	end;

	if pathname_supplied then
	     do;
	     if function = set then
		call dc_find$obj_access_write (dirname, entryname, 1, FS_OBJ_RING_MOD, ep, code);
	     else call dc_find$obj_attributes_read (dirname, entryname, 1, ep, code); /* chase */
	end;

/**** Note that we do not handle set_ring_brackets_ptr-type entrypoints
      in the following code.  It is assumed that if these entrypoints are
      ever added, that the appropriate changes will be made below.  There
      is currently no dc_find$obj_access_write_ptr entrypoint, which, of
      course, would be necessary if a ringbr_$set_ring_brackets_ptr entry
      were added. */

	else					/* can only get here if the entry is get_ring_brackets_ptr */
	     call dc_find$obj_attributes_read_ptr (segptr, ep, code);

	if code ^= 0 then go to error_return;

	dp = ptr (ep, 0);				/* get pointer to directory */

	d_s = ep -> entry.dirsw;			/* pick up directory switch from branch */

	if type = directory then			/* make sure correct entry (seg or dir) called */
	     if ^d_s then do;
		code = error_table_$notadir;		/* already checked access, ok to return this code */
		go to error_return;
	     end;

	if type = segment then
	     if d_s then do;
		code = error_table_$dirseg;		/* already checked access, ok to return this code */
		go to error_return;
	     end;

	if function = get then do;			/* copy rb from branch into stack array */
	     if type = segment then rbr = fixed (ep -> entry.ring_brackets, 3);
	     else do;
		drbr (1) = fixed (ep -> entry.ex_ring_brackets (1), 3);
		drbr (2) = fixed (ep -> entry.ex_ring_brackets (2), 3);
	     end;
	end;

	else do;					/* setting rb */
	     if type = segment then do;		/* check level with write bracket */
		if lev > fixed (ep -> entry.ring_brackets (1), 3) then go to low_ring_err;

		if (rbr (2) ^= rbr (3))		/* if turning this into a gate check projects on acl */
		     & lev > 1
		     & ep -> entry.acl_frp ^= "0"b then do;
		     call check_gate_acl_ (addr (ep -> entry.acl_frp), "1"b, (ep -> entry.acle_count), username, code);
		     if code ^= 0 then go to error_return;
		end;

		if ep -> entry.multiple_class		/* see if multiclass AIM seg */
		     & rbr (3) > 1 then go to aim_err;

		if (fixed (ep -> entry.ring_brackets (1), 3) <= sys_info$data_management_ringno)
		     & (rbr (1) > sys_info$data_management_ringno)
		then do;
		     uid = ep -> entry.uid;
		     pvid = ep -> entry.pvid;
		     vtocx = ep -> entry.vtocx;
		     call vtoc_attributes$get_info (uid, pvid, vtocx, addr (local_sc_info), code);
		     if code ^= 0 then goto error_return;
		     if local_sc_info.flags.synchronized
		     then goto dm_ring_error;
		end;

	     end;

/* for dir rb's, check level with modify bracket of directory */
	     else if lev > fixed (ep -> entry.ex_ring_brackets (1), 3) then go to low_ring_err;

	     dir.modify = pds$processid;		/* About to mod directory */
	     call change_dtem (ep);
						/* set segment rb */
	     if type = segment then ep -> entry.ring_brackets = bit (rbr, 3);
	     else do;
		ep -> entry.ex_ring_brackets (1) = bit (drbr (1), 3);
		ep -> entry.ex_ring_brackets (2) = bit (drbr (2), 3);
	     end;

	     call setfaults$if_active ((ep -> entry.uid), (ep -> entry.pvid), (ep -> entry.vtocx), "1"b);
						/* set the dates for backup */
	     dir.modify = "0"b;
	     call sum$dirmod (dp);
	end;					/* all done setting rb */

	if pathname_supplied then
	     call dc_find$finished (dp, DC_FIND_UNLOCK_DIR); /* unlock and unuse directory */
	else call lock$dir_unlock (dp);		/* unlock directory */

	if function = get then do;			/* copy rb into caller's space after unlocking dir */
	     if type = segment then a_rb = rbr;
	     else a_drb = drbr;
	end;

	a_code = code;				/* copy status code to caller */
	return;
%page;
brack_err:					/* input ring brackets were in error */
	code = error_table_$invalid_ring_brackets;
	go to error_common;

low_ring_err:
	code = error_table_$lower_ring;
	go to error_common;

aim_err:
	code = error_table_$ai_restricted;
	goto error_common;

dm_ring_error:
	code = error_table_$not_dm_ring;
	goto error_common;

segptr_null_err:
	code = error_table_$null_info_ptr;
	goto error_common;

error_return:
error_common:
	if dp ^= null then do;
	     if function = set then dir.modify = "0"b;
	     call lock$dir_unlock (dp);
	     if pathname_supplied then
		call dc_find$finished (dp, "0"b);
	end;

	a_code = code;
	return;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include fs_obj_access_codes;
%page; %include quota_cell;
%page; %include sc_info;
     end;
