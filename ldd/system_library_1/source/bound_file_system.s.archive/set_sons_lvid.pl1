/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */
set_sons_lvid: proc (a_dirname, a_ename, a_sons_lvid, a_code);

/*
   Last modified:

   06/03/76 by R. Bratt to call find_$finished
   02/28/82 by J. Bongiovanni to eliminate use of FSDCT
   08/06/83 by E. N. Kittlitz for search_ast$check
   831219   by E. N. Kittlitz for set_pdir_sons_lvid
   07/03/84 by Keith Loepere to use the new dc_find.
   10/15/84 by Keith Loepere for auditing info; also explicit activate of dir.
   12/17/84 by E. Swenson to not violate the locking protocol.
*/

/* Parameters */

dcl  a_code fixed bin (35) parameter;
dcl  a_dirname char (*) parameter;
dcl  a_ename char (*) parameter;
dcl  a_sons_lvid bit (36) parameter;

/* Variables */

dcl  code fixed bin (35);
dcl  dir_locked bit (1) aligned;			/* indicates we have the directory locked */
dcl  dirname char (168);
dcl  ename char (32);
dcl  ignore fixed bin (35);
dcl  1 my_makeknown_info aligned like makeknown_info;
dcl  pdir bit (1) aligned;
dcl  ring fixed bin;
dcl  seg_pvid bit (36) aligned;
dcl  seg_uid bit (36) aligned;
dcl  seg_vtocx fixed bin;
dcl  segnum fixed bin (17);
dcl  segptr ptr;
dcl  set_lvid bit (1);
dcl  sons_lvid bit (36);
dcl  target_locked bit (1) aligned;			/* indicates we have the target directory locked */
dcl  write_lock bit (36) aligned init ("1"b);

/* External */

dcl  error_table_$argerr fixed bin (35) ext;
dcl  error_table_$bad_ring_brackets fixed bin (35) ext;
dcl  error_table_$fulldir fixed bin (35) ext;
dcl  error_table_$notadir fixed bin (35) ext;
dcl  error_table_$segknown fixed bin (35) ext;
dcl  pvt$root_lvid bit (36) aligned ext;

/* Entries */

dcl  level$get entry returns (fixed bin);
dcl  lock$dir_lock_write entry (ptr, fixed bin (35));
dcl  lock$dir_unlock entry (ptr);
dcl  lock$lock_ast entry;
dcl  lock$unlock_ast entry;
dcl  makeknown_ entry (ptr, fixed bin (17), fixed bin, fixed bin (35));
dcl  makeunknown_ entry (fixed bin, bit (36) aligned, bit (1) aligned, fixed bin (35));
dcl  search_ast$check entry (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin (35)) returns (ptr);
dcl  sum$dirmod entry (ptr);

/* Misc */

dcl  (addr, baseptr, fixed, ptr, null, unspec) builtin;
%page;
	sons_lvid = a_sons_lvid;			/* Copy arg */
	set_lvid = "1"b;
	pdir = "0"b;
	go to join;

set_pdir_sons_lvid: entry (a_dirname, a_ename, a_sons_lvid, a_code);

	sons_lvid = a_sons_lvid;
	set_lvid = "1"b;
	pdir = "1"b;
	go to join;

set_rpv: entry (a_dirname, a_ename, a_code);		/* Force segs to be created on rpv */

	pdir = "0"b;
	set_lvid = "0"b;
join:
	dirname = a_dirname;			/* copy arguments */
	ename = a_ename;

	ring = level$get ();			/* get validation level */

	target_locked = "0"b;
	dir_locked = "0"b;
	segptr = null;

	call dc_find$obj_status_write (dirname, ename, DC_FIND_NO_CHASE, FS_OBJ_SONS_LVID_MOD, ep, code); /* get ptr to entry + lock dir for writing */
	if code ^= 0 then go to finale;
	dp = ptr (ep, 0);
	dir_locked = "1"b;

	if ^ep -> entry.dirsw then do;
	     code = error_table_$notadir;
	     go to finale;
	end;

	if ring > fixed (ep -> entry.ex_ring_brackets (1), 3)
	then do;
	     code = error_table_$bad_ring_brackets;	/* ringbrackets must be consistent with validation level */
	     go to finale;
	end;

	seg_uid = entry.uid;

	makeknown_infop = addr (my_makeknown_info);	/* activate target dir */
	unspec (makeknown_info) = "0"b;
	makeknown_info.activate, makeknown_info.dirsw, makeknown_info.allow_write = "1"b;
	makeknown_info.uid = seg_uid;
	makeknown_info.entryp = ep;
	call makeknown_ (makeknown_infop, segnum, (0), code);
	if code ^= 0 then
	     if code ^= error_table_$segknown then go to finale;
	segptr = baseptr (segnum);

	call dc_find$finished (dp, "1"b);		/* unlock so we can lock child */
	dir_locked = "0"b;

	call lock$dir_lock_write (segptr, code);	/* Lock the dir to be modified */
	if code ^= 0 then go to finale;
	target_locked = "1"b;

	call dc_find$obj_status_write (dirname, ename, DC_FIND_NO_CHASE, FS_OBJ_SONS_LVID_MOD, ep, code); /* refind and relock parent */
	if code ^= 0 then go to finale;
	dp = ptr (ep, 0);				/* just in case it changed */
	dir_locked = "1"b;				/* remember to unlock it */

	if set_lvid then do;
	     if segptr -> dir.sons_lvid ^= sons_lvid then do; /* If this is really a change */
		if segptr -> dir.seg_count ^= 0 & ^pdir then do;
		     code = error_table_$fulldir;
		     go to finale;
		end;

		if ^pdir then do;
		     segptr -> dir.master_dir = "1"b;
		     segptr -> dir.master_dir_uid = seg_uid;
		     entry.master_dir = "1"b;
		end;
		segptr -> dir.sons_lvid = sons_lvid;	/* Tudo bem. Set the directory header */
		entry.sons_lvid = sons_lvid;		/* Set into branch for the dir too. */
		seg_pvid = entry.pvid;		/* no page fault with dir & ast locked */
		seg_vtocx = entry.vtocx;		/* ... */
		if ^pdir then do;
		     call lock$lock_ast;		/* turn on ast bit */
		     astep = search_ast$check (seg_uid, seg_pvid, seg_vtocx, (0)); /* ignore double-uid error */
		     if astep ^= null () then astep -> aste.master_dir = "1"b;
		     call lock$unlock_ast;
		end;
	     end;
	end;
	else do;					/* Setting RPV */
	     if segptr -> dir.sons_lvid ^= pvt$root_lvid then do;
		code = error_table_$argerr;
		go to finale;
	     end;
	     segptr -> dir.force_rpv = "1"b;
	end;
	call sum$dirmod (dp);			/* Indicate parent dir modified */

finale:	if segptr ^= null then do;
	     if target_locked then
		call lock$dir_unlock (segptr);
	     call makeunknown_ (segnum, "0"b, ("0"b), ignore);
	end;
	if dir_locked then
	     call dc_find$finished (dp, "1"b);
	a_code = code;
	return;

/* format: off */

%page; %include aste;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include dir_name;
%page; %include fs_obj_access_codes;
%page; %include makeknown_info;
     end set_sons_lvid;
