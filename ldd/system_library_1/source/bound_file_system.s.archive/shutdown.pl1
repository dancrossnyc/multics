/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
shutdown:
     procedure ();

/* Procedure to stop the system in preparation for File System Shutdown.
   This can be called only from the Initializer. After setting CPU
   required to the bootload CPU, it stops all CPUs and disables traffic
   control. It calls shutdown_file_system, switching stacks along the
   way to inzr_stk0.

   This is called only during normal shutdown.  During emergency shutdown,
   shutdown_file_system is called directly.

   For the new Storage System, Bernard Greenberg, 10/20/75
   For demountable volumes, BSG 03/26/76
   For new flags in flagbox, 9/30/76 by Noel I. Morris
   For shutdown with downed drives, BSG 02/26/77
   For shutdown which doesn't give up, W. Olin Sibert, 05/18/81
   For set_procs_required, J. Bongiovanni, October 1981
   To remove Page Multilevel, C. Hornig, December 1981.
   To remove File System shutdown, J. Bongiovanni, March 1982
   To shutdown scavenger, J. Bongiovanni, September 1982
   To call stop_cpu$shutdown instead of stop_cpu, Chris Jones, April 1984
*/


/****^  HISTORY COMMENTS:
  1) change(86-09-23,Beattie), approve(86-08-11,MCR7517),
     audit(86-10-23,Fawcett), install(86-11-03,MR12.0-1206):
     No BOS support for MR12.
                                                   END HISTORY COMMENTS */


dcl	pds$processid	   bit (36) aligned external;

dcl	condition_	   entry (char (*), entry);
dcl	disk_emergency$test_all_drives
			   entry;
dcl	scavenger$shutdown	   entry;
dcl	set_procs_required	   entry (bit (8) aligned, fixed bin (35));
dcl	stop_cpu$shutdown	   ext entry (fixed bin (2), fixed bin (35));
dcl	switch_shutdown_file_system
			   entry;
dcl	syserr		   entry options (variable);
dcl	syserr$error_code	   entry options (variable);
dcl	tc_shutdown	   ext entry;

dcl	tc_data$initializer_id bit (36) aligned external;

dcl	code		   fixed bin (35);
dcl	i		   fixed bin (2);
dcl	cpu_mask		   bit (8) aligned;

dcl	LETTERS		   char (8) internal static options (constant) init ("ABCDEFGH");
dcl	my_name		   char (8) internal static options (constant) init ("shutdown");

dcl	(null, stackbaseptr, substr)
			   builtin;

/**/

	if pds$processid ^= tc_data$initializer_id then
	     return;				/* Only initializer can perform shutdown (trad.) */


	stackbaseptr () -> stack_header.stack_begin_ptr -> stack_frame.prev_sp = null ();
						/* Guarantee that we shall never leave ring zero again */

	call condition_ ("any_other", shutdown_failed);	/* Don't let anything untoward happen, either */

/* Now stop all CPU's other than the bootload one we are returning to */

	cpu_mask = "0"b;
	substr (cpu_mask, scs$bos_processor_tag + 1, 1) = "1"b;
	call set_procs_required (cpu_mask, code);
	if code ^= 0 then				/* Couldn't run on bootload CPU */
	     call syserr$error_code (CRASH, code, "^a: Cannot run on CPU ^a (bootload CPU). Dump and try ESD.", my_name,
		substr (LETTERS, scs$bos_processor_tag + 1, 1));

	do i = 0 to 7;
	     if i ^= scs$bos_processor_tag then do;
		if scs$processor_data (i).online then do;
		     call stop_cpu$shutdown (i, code);
		     if code ^= 0 then
			call syserr (ANNOUNCE, "^a: Could not stop CPU ^a.", my_name, substr (LETTERS, i + 1, 1));
		end;
	     end;
	end;

/* Determine downed drives. Done in wired_shutdown in ESD case */

	call disk_emergency$test_all_drives;

/* Now stop other processes */

	call tc_shutdown;

/*  After traffic control is shut down, reset any scavenges in progress  */

	call scavenger$shutdown;

/* Switch stacks to inzr_stk0 and shutdown File System */

	call switch_shutdown_file_system;

/**/

shutdown_failed:
     proc (a_mcptr, a_condition, a_coptr, a_infoptr, a_continue) options (non_quick);

dcl	a_mcptr		   pointer parameter;
dcl	a_condition	   char (*) parameter;
dcl	a_coptr		   pointer parameter;
dcl	a_infoptr		   pointer parameter;
dcl	a_continue	   bit (1) aligned parameter;

/* This procedure is called if any signallable faults occur in shutdown,
   and simply crashes the system, in the hope that an ESD will be more
   successful. */

	do while ("1"b);
	     call syserr (CRASH,
		"^a: Condition ^a signalled during shutdown. Normal shutdown failed. Get a dump, and try an ESD.",
		my_name, a_condition);
	end;

     end shutdown_failed;

%page;
%include scs;
%page;
%include stack_frame;
%page;
%include stack_header;
%page;
%include syserr_constants;

/**/

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   shutdown: Could not stop CPU TAG.

   S: $info

   T: System shutdown.

   M: Shutdown stops all but the bootload processor. The CPU whose
   tag is TAG could not be stopped.

   A: $note
   If shutdown fails, put all CPU's other than the
   bootload processor in step, return to BCE manually, and
   attempt an ESD.

   Message:
   shutdown: Condition CCCC signalled during shutdown. Normal shutdown
   failed. Get a dump, and try an ESD.

   S: $crash

   T: System shutdown

   M: During the attempt to shut down the system, an unexpected condition
   has been signalled. This may result from hardware problems, or a logic
   error in the supervisor. The system crashes and returns to BCE, whereupon
   an ESD should be attempted in order to finish flushing Multics
   information from main memory. Because of the difference in implementation
   between normal shutdown and ESD, it is possible that ESD will not
   encounter the same problem, and instead be successful.

   Message:
   shutdown: Cannot run on CPU X (bootload CPU). Dump and try ESD. ERRORMESSAGE

   S: $crash

   T: System shutdown

   M: During an attempt to shut down the system, the system could not run
   on the bootload CPU. This problem may be due to hardware or software
   problems.  The system will attempt to crash, which it may not complete.

   A: If the system does not complete its attempt to crash, it should
   be crashed manually. It may be necessary to change the bootload CPU
   manually. This can be done by putting all CPUs into STEP mode, manually
   assigning an interrupt mask to the new bootload CPU from the bootload SCU
   maintenance panel, taking only the new bootload CPU out of STEP mode, and
   doing an EXECUTE SWITCHES on that CPU.  Once the system has crashed
   successfully, an ESD should be attempted.  This will most likely succeed.

   END MESSAGE DOCUMENTATION */

     end;
