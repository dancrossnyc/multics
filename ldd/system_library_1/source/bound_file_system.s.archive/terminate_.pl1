/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

terminate_: proc (a_segptr, a_rsw, a_code);

/* This procedure provides a variety of entries to remove names and segments 
   from the RNT and KST.

   Written October 1974 by R. Bratt as a write around for the old terminate

   Last modified:

   R. Bratt 06/03/76 to call find_$finished
   M. Weaver 04/77 to ignore code r0_refname and to zero lot entry when appropriate
   B. Margulies May 1982 to not trash refnames with noname terminations.
   Keith Loepere July 1984 to use the new dc_find.
   Keith Loepere November 1984 to rename to terminate_; add auditing support;
	also to remove unused directory undetectability.

   -- ->  terminate_$teseg remove the KST entry for a segment given its segment pointer.
   USAGE: call terminate_$teseg, call hcs_$terminate_seg (segptr, rsw, code)

   -- ->  terminate_$tefile removes a segments KST entry, given its directory pathname and entry name
   USAGE: call terminate_$tefile, call hcs_$terminate_file (dirname, ename, rsw, code);

   -- ->  terminate_$noname removes a single null name from a segment given its segment pointer.
   USAGE: call terminate_$noname call hcs_$terminate_noname (segptr, code)

   -- ->  terminate_$name removes a reference name from a segment.
   USAGE: call terminate_$name, call hcs_$terminate_name (name, code)
   note: these last two entries will also remove the KST entry if they have
   deleted the segments last name.

   -- ->  terminate_$id removes a segment from the kst by uid.  It is an 
   internal interface to be used by delentry.
   USAGE: call terminate_$id (uid, rsw, code);

   1) segptr ptr - - - pointer to the segment
   2) rsw fixed bin(1) - - - =1 reserve this segment number for later use, = 0 don't bother
   3) code fixed bin - - - error code (output)
   4) dirname char(*) - - - pathname of superior directory
   5) ename char(*) - - - entry name of segment
   6) name char(*) - - - reference name of segment
   7) uid bit (36) aligned - - - unique identifier of segment

   */

/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_dirname			char (*) parameter;
dcl  a_ename			char (*) parameter;
dcl  a_name			char (*) parameter;
dcl  a_rsw			fixed bin (1) parameter;
dcl  a_segptr			ptr parameter;
dcl  a_uid			bit (36) aligned parameter;

/* Variables */

dcl  code				fixed bin (35);
dcl  dirname			char (168);
dcl  ename			char (32);
dcl  hash_bucket			fixed bin (17);
dcl  n_names			fixed bin;
dcl  refname			char (32) var;
dcl  rsw				fixed bin (1);
dcl  segno			fixed bin (17);
dcl  segptr			ptr;
dcl  uid				bit (36) aligned;

/* External */

dcl  error_table_$r0_refname		ext fixed bin (35);
dcl  error_table_$root		ext fixed bin (35);
dcl  error_table_$seg_deleted		ext fixed bin (35);
dcl  pds$stacks			(0:7) ptr ext;

/* Misc */

dcl  (baseno, baseptr, bit, dim, fixed, mod, ptr, rel) builtin;

/* Entries */

dcl  level$get			ext entry () returns (fixed bin);
dcl  lock$dir_unlock		ext entry (ptr);
dcl  makeunknown_			ext entry (fixed bin (17), bit (36) aligned, bit (1) aligned, fixed bin (35));
dcl  makeunknown_$protect_names	ext entry (fixed bin, fixed bin, bit (36) aligned, bit (1) aligned, fixed bin (35));
dcl  ref_name_$delete		ext entry (char (32) varying, fixed bin (17), fixed bin (35));
dcl  ref_name_$delete_segno		ext entry (fixed bin (17), fixed bin (35));
dcl  ref_name_$get_count		ext entry (fixed bin (17), fixed bin (17), fixed bin (35));
dcl  ref_name_$get_segno		ext entry (char (32) varying, fixed bin (17), fixed bin (35));
%page;
teseg: entry (a_segptr, a_rsw, a_code);

	segptr = a_segptr;
	rsw = a_rsw;
	segno = fixed (baseno (segptr), 17);
	call dc_find$obj_terminate_ptr (segptr, ep, code);
	if code = 0 then call lock$dir_unlock (ptr (ep, 0));
	if code = error_table_$root then code = 0;
	if code = error_table_$seg_deleted then code = 0;
	if code = 0 then call term_seg;
	a_code = code;
	return;
%page;
tefile: entry (a_dirname, a_ename, a_rsw, a_code);

	dirname = a_dirname;
	ename = a_ename;
	rsw = a_rsw;
	call dc_find$obj_terminate (dirname, ename, DC_FIND_CHASE, ep, code);
	if code = 0 then do;
	     uid = entry.uid;
	     call dc_find$finished (ptr (ep, 0), "1"b);
	     call term_uid;
	end;
	a_code = code;
	return;
%page;
noname: entry (a_segptr, a_code);

	segptr = a_segptr;
	segno = fixed (baseno (segptr), 17);
	call dc_find$obj_terminate_ptr (segptr, ep, code);
	if code = 0 then call lock$dir_unlock (ptr (ep, 0));
	if code = error_table_$root then code = 0;
	if code = error_table_$seg_deleted then code = 0;
	if code = 0 then do;
	     call ref_name_$get_count (segno, n_names, code);
	     if code ^= 0 then				/* r0_refname */
		n_names = 0;				/* no refnames */
	     if n_names > 0 then
		call terminate_and_zero_lot$$protect (segno, ""b, n_names, code);
	     else call terminate_and_zero_lot (segno, ""b, code);
	end;
	a_code = code;
	return;
%page;
name: entry (a_name, a_code);

	refname = a_name;
	call ref_name_$get_segno (refname, segno, code);
	if code = 0 then do;
	     segptr = baseptr (segno);
	     call dc_find$obj_terminate_ptr (segptr, ep, code);
	     if code = 0 then call lock$dir_unlock (ptr (ep, 0));
	     if code = error_table_$root then code = 0;
	     if code = error_table_$seg_deleted then code = 0;
	     if code = 0 then do;
		call ref_name_$delete (refname, segno, code);
		if code = 0 then call terminate_and_zero_lot (segno, "0"b, (0));
	     end;
	end;
	a_code = code;
	return;
%page;
id:  entry (a_uid, a_rsw, a_code);			/* called from hardcore */

	uid = a_uid;
	rsw = a_rsw;
	code = 0;
	call term_uid;
	a_code = code;
	return;
%page;
term_seg: proc;

	call ref_name_$delete_segno (segno, code);
	if (code = 0) | (code = error_table_$r0_refname) then
	     call terminate_and_zero_lot (segno, bit (rsw, 1) || "1"b, code);
	return;
     end;

term_uid: proc;

	kstp = pds$kstp;
	hash_bucket = mod (fixed (uid), dim (kst.uid_hash_bucket, 1));
	do kstep = ptr (kstp, kst.uid_hash_bucket (hash_bucket))
	     repeat (ptr (kstp, kste.fp)) while (rel (kstep) ^= "0"b);
	     if uid = kste.uid then do;
		segno = kste.segno;
		call term_seg;
		return;
	     end;
	end;
	return;
     end;
%page;
terminate_and_zero_lot: proc (segnum, switches, ecode);

dcl  ecode			fixed bin (35) parameter;
dcl  segnum			fixed bin (17) parameter;
dcl  switches			bit (36) aligned parameter;

dcl  n_names			fixed bin;
dcl  ring				fixed bin;
dcl  zero_lot			bit (1) aligned;

	call makeunknown_ (segnum, switches, zero_lot, ecode);
	go to Join;

terminate_and_zero_lot$$protect:
     entry (segnum, switches, n_names, ecode);

	call makeunknown_$protect_names (segnum, n_names, switches, zero_lot, ecode);
	if ecode ^= 0 then return;

Join:
	if zero_lot then do;
	     ring = level$get ();

	     if segnum <= pds$stacks (ring) -> stack_header.cur_lot_size then do;
						/* don't wipe out locations not in lot, isot */
		pds$stacks (ring) -> stack_header.lot_ptr -> lot.lp (segnum) = baseptr (0);
		pds$stacks (ring) -> stack_header.isot_ptr -> isot.isp (segnum) = baseptr (0);
	     end;
	end;
     end;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include kst;
%page; %include lot;
%page; %include stack_header;
     end;
