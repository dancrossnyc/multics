/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* The make_seg procedure creates a branch in a
   specified directory with a specified entry name.  Once
   the branch is created, the segment is made known to the
   process by a call to "initiate" and a pointer to the
   segment is returned to the caller. */

make_seg: procedure (adirname, aentry, arefname, amode, asegptr, acode);

/* Modified by R. Bratt 04/76 to make "" and " " equivalent arguments for dname/ename */
/* Modified by E. Stone 10/73 to remove the $stack entry point */

dcl  adirname char (*),				/* is the directory in which to create "entry". */
     aentry char (*),				/* is the entry name in question. */
     arefname char (*),				/* is the desired reference name, or "". */
     amode fixed bin (5),				/* specifies the mode for this user. */
     asegptr ptr,					/* is an ITS pointer to the created segment.
						   (Output) */
     acode fixed bin;				/* is a standard File System status code.
						   (Output) */

dcl  dirname char (168),				/* copy of directory name */
     entry char (32),				/* copy of entry name */
    (code1, code2) fixed bin (35);			/* error codes */

dcl  pds$process_dir_name char (32) ext,		/* name of process directory */
     error_table_$namedup fixed bin (35) ext;		/* error code for name duplication */

dcl (null, length) builtin;

dcl  unique_chars_ ext entry (bit (*) aligned) returns (char (15)),
     append$branch entry (char (*), char (*), fixed bin (5), fixed bin (35)),
     initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));


/*  */

	asegptr = null;				/* Initialize pointer. */

	dirname = adirname;
	if dirname = ""				/* If supplied directory name is null ... */
	then dirname = pds$process_dir_name;		/* Use process directory name. */

	entry = aentry;
	if entry = ""				/* If supplied entry name is null ... */
	then entry = unique_chars_ ("0"b);		/* Use unique name. */

	call append$branch (dirname, entry, amode, code1); /* Now create segment branch in hierarchy. */
	if code1 ^= 0 then				/* If error ... */
	     if code1 ^= error_table_$namedup then	/* If not a name duplication ... */
		go to make_rtn;			/* Return the error code2. */

	call initiate (dirname, entry, arefname, 0, 0, asegptr, code2);
						/* Initiate the segment. */

	if code2 ^= 0 then				/* If error in initiate ... */
	     acode = code2;				/* Return error code from initiate. */
	else					/* Otherwise ... */
make_rtn:
	acode = code1;				/* Return error code from append. */
	return;					/* Return to caller. */




     end make_seg;
