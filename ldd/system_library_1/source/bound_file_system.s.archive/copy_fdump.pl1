/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* COPY_FDUMP - Make Copy of Information in Dump Partition:

   This program creates a toe-hold into the dump partition.
   This partition may contain dump information left by
   the bce dump program. This information is copied into
   multiple segments in the directory >dumps. These segments
   are force-deactivated as a hedge against crashes.

   4/7/71 - N. I. Morris & S. H. Webber
   9/28/71 - modified to allow setting erf no and to add error codes - D. M. Jordan
   3/2/73 - modified for 6180 and v2pl1 - RE Mullen
   7/11/73 - modified to copy dn355 core image out of part dump and added get_erf_no entry - RE Mullen
   10/08/75 - modified for multiple 355s - Robert Coren
   02/01/79 - modified to allow more than 10 segnos - F. W. Martinson
   08/25/80 - Modified to announce copy in syserr log -- W. Olin Sibert
   11/11/80 - modified for the DPS8/70M CPU -- J. A. Bush
   03/21/81, W. Olin Sibert, for ADP PTWs and ptw_util_.
   02/26/82 - J. Bongiovanni, to eliminate use of FSDCT, force deactivate
             dump segments.
   11/05/84, Keith Loepere to change terminate to terminate_.
   01/22/85, Keith Loepere for new find_partition.

   */


/****^  HISTORY COMMENTS:
  1) change(86-10-23,Fawcett), approve(86-10-23,MCR7517),
     audit(86-10-30,Beattie), install(86-11-03,MR12.0-1206):
     Changed to remove the word BOS from message.
                                                   END HISTORY COMMENTS */


copy_fdump: proc (a_code);

	dcl     i			 fixed bin,	/* page table index */
	        p			 ptr,		/* handy pointer */
	        ptp		 ptr,		/* Pointer to page table of abs-seg */
	        (dt, dt_dn355)	 char (24),	/* date and time strings */
	        (ename, a_ename, xname, ename_dn355, a_ename_dn355) char (32), /* dump segment entry names */
	        erf		 char (12),	/* converted ERF number */
	        (erf_no, a_erf_no)	 fixed bin,	/* number to set next dump to */
	        ptsi		 fixed bin,	/* page table size index */
	        code		 fixed bin (35),	/* error code */
	        a_code		 fixed bin (35),	/* error code to return to caller */
	        rb		 (3) fixed bin (6) init (7, 7, 7), /* ring brackets for call to append */
	        seqno		 fixed bin,	/* dump sequence number */
	        esw		 fixed bin,	/* entry switch */
	        dumpadd		 fixed bin (18),	/* address within dump partition */
	        nrecs		 fixed bin (18),	/* number of records in PART DUMP */
	        next_part_add	 fixed bin,	/* dumpadd of rec following PART DUMP */
	        first		 fixed bin (20),	/* first address within dump partition */
	        (length, a_length)	 fixed bin (35),	/* length dump info */
	        (a_valid, a_valid_dn355) bit (1),	/* = 1 if dumps are valid */
	        word_count		 fixed bin (18),	/* number of words to copy from dump partition at one time */
	        copy		 (word_count) fixed bin (35) based, /* structure to allow copying of dump data */
	        dump_pvtx		 fixed bin,
	        dump_pvid		 bit (36) aligned,
	        tsdwp		 ptr,		/* pointer to SDW */
	        tsdw		 bit (72);	/* temporary for SDW */

	dcl     (max_size, max_pages, dn355_size) fixed bin; /* max for output segs */
	dcl     single_dn355_size	 fixed bin (35);	/* number of bits in 355 core image */
	dcl     words_per_image	 fixed bin;
	dcl     pg_size		 fixed bin;

	dcl     (dumping_Multics, dumping_dn355) bit (1); /* to keep track of what we want to dump */

	dcl     (hdr_size, rest_size)	 fixed bin;	/* sizes in words */

	dcl     dn355_copy		 bit (single_dn355_size) aligned based; /* for copying 355 dump */

	dcl     1 din		 based aligned,	/* structure of first 64K of PART DUMP */
		2 header		 (hdr_size) fixed bin (35), /* registers, rel locs of segs, etc */
		2 dn355_images	 (4),
		  3 dn355_core	 bit (single_dn355_size) aligned, /* dn355 core image put here by FD355 */
		2 rest		 (rest_size) fixed bin (35); /* start of segments dumped by FDUMP */


	dcl     (error_table_$noaccess fixed bin (35),
	        error_table_$dmpinvld	 fixed bin (35),
	        error_table_$noprtdmp	 fixed bin (35),
	        error_table_$bdprtdmp	 fixed bin (35),
	        error_table_$dmpvalid	 fixed bin (35),
	        error_table_$nopart	 fixed bin (35),
	        sys_info$default_max_length fixed bin (35),
	        sys_info$page_size	 fixed bin (35),
	        pds$process_group_id	 char (32) aligned,
	        abs_seg$)		 ext;

	dcl     sst$astsize		 fixed bin external static;
	dcl     1 sst$level		 (0:3) aligned external static,
		2 ausedp		 bit (18) unaligned,
		2 no_aste		 bit (18) unaligned;

	dcl     privileged_mode_ut$swap_sdw ext entry (ptr, ptr),
	        thread$out		 entry (ptr, bit (18) unal),
	        lock$lock_ast	 entry,
	        lock$unlock_ast	 entry,
	        get_ptrs_$given_astep	 ext entry (ptr) returns (bit (72) aligned),
	        syserr		 ext entry options (variable),
	        condition_		 ext entry (char (*), entry),
	        reversion_		 ext entry (char (*)),
	        date_time_		 ext entry (fixed bin (71), char (*)),
	        append$branchx	 ext entry (char (*), char (*), fixed bin (5), (3) fixed bin (6), char (*),
				 fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35)),
	        initiate		 ext entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
	        pc$cleanup		 entry (ptr),
	        get_aste		 ext entry (fixed bin) returns (ptr),
	        put_aste		 ext entry (ptr),
	        cv_bin_$dec		 ext entry (fixed bin (17)) returns (char (12) aligned),
	        demand_deactivate$force_given_segno entry (ptr, fixed bin (35)),
	        terminate_$noname	 entry (ptr, fixed bin (35)),
	        find_partition	 entry (char (*), fixed bin, bit (36) aligned, fixed bin (18), fixed bin (18), fixed bin (35)),
	        ptw_util_$make_disk	 entry (pointer, fixed bin (20));

	dcl     (addr, addrel, bit, char, divide, fixed, ltrim, min, null, size, substr) builtin;

/*  */

	esw = 0;
	go to setup;

set_erf_no:
     entry (a_erf_no, a_code);
	erf_no = a_erf_no;
	esw = 1;
	go to setup;

get_erf_no:
     entry (a_length, a_valid, a_ename, a_valid_dn355, a_ename_dn355, a_code);
	esw = 2;
	a_length = 0;
	a_valid, a_valid_dn355 = "0"b;
	a_ename, a_ename_dn355 = "                                ";

setup:
	a_code = 0;
	p = null ();				/* So any_other handler wins */
	pg_size = sys_info$page_size;			/* number of words per page */
	max_size = sys_info$default_max_length;		/* max number of words in segs copy_fdump creates */
	max_pages = divide (max_size + pg_size - 1, pg_size, 17, 0);
	dn355_size = 16384 * 4;			/* words equaling 32K of 18bit words for up to 4 355s */
	single_dn355_size = 16384 * 36;		/* bits for one 355 core image */
	words_per_image = 16384;			/* same in words */
	hdr_size = size (dump);			/* number of words in dump header */

/* Determine location and size of the dump partition. */

	call find_partition ("dump", dump_pvtx, dump_pvid, dumpadd, nrecs, code);
	if code ^= 0 then do;
		if code = error_table_$nopart then a_code = error_table_$noprtdmp;
		else a_code = code;
		return;
	     end;

	first = dumpadd;

	if nrecs = 0 then do;
		a_code = error_table_$bdprtdmp;
		return;
	     end;

	next_part_add = first + nrecs;		/*  Stop before here */

/* Now create an abs_seg through which to look at the dump */

	dumpptr = addr (abs_seg$);			/* get pointer to abs_seg */
	tsdwp = addr (tsdw);			/* get a pointer to the SDW to be used */
	call lock$lock_ast;
	astep = get_aste (max_pages);			/* get a large page table / ASTE */
	ptsi = fixed (aste.ptsi, 2);
	call thread$out (astep, sst$level.ausedp (ptsi));
	call lock$unlock_ast;
	ptp = addrel (astep, sst$astsize);		/* get a pointer to the page table */
	tsdw = get_ptrs_$given_astep (astep);		/* get the actual SDW to use */
	call privileged_mode_ut$swap_sdw (dumpptr, tsdwp);/* make abs_seg point to the dump seg */
	aste.pvtx = dump_pvtx;
	aste.csl = bit (fixed (max_pages,9), 9);		/* Set correct current length in AST entry. */
	aste.nqsw = "1"b;				/* indicate no quota for this segment */
						/*  */
						/* Set up a condition in case we bomb out. */
	call condition_ ("any_other", handler);
	if esw = 1 then go to set_num;		/* just set the erf number in the dump partition */
	if esw = 2 then go to get_num;		/* just return info in dump header */

/* Attempt to copy the dump information into the hierarchy. */

	do seqno = 0 by 1;				/* Keep going until we run out of information. */
	     do i = 0 to (max_pages - 1) while (i < next_part_add - dumpadd);
		call ptw_util_$make_disk (addrel (ptp, i), (dumpadd + i)); /* The disk record */
	     end;
	     if seqno = 0 then do;			/* were making our first seg in >dumps */
		     call check_dump_header;		/* Initialize some variables and see whats in PART DUMP */
		     length = min (length, nrecs * pg_size - dn355_size - hdr_size);
		     if dumping_dn355 then do;	/* we want to make a special seg in >dumps for 355core image */
			     xname = ename_dn355;	/* will have ".355" suffix */
			     word_count = dn355_size; /* clearly */
			     call get_branch;	/* get and initiate a branch */
			     do i = 1 to 4;		/* copy up to four 355 core images */
				if substr (dumpptr -> dump.dumped_355s, i, 1) /* there is an image for this one */
				then p -> dn355_copy = dumpptr -> din.dn355_images (i).dn355_core; /* copy it */
				else p -> dn355_copy = "0"b;

				p = addrel (p, words_per_image); /* bump to next core image */
			     end;

			     dumpptr -> dump.valid_355 = "0"b; /*  turn off the valid bit */
			end;
		     if dumping_Multics then do;	/* need to skip over the dn355 stuff */
			     call pc$cleanup (astep); /* Force all pages from core. */
			     aste.npfs = "0"b;	/* turn off no page fault switch */
			     do i = 0 to 1;		/* fill in first 2 ptws */
				call ptw_util_$make_disk (addrel (ptp, i), (dumpadd + i)); /* The disk record */
			     end;
			     dumpadd = dumpadd + divide (dn355_size, pg_size, 18, 0); /* skip over dn355 data */
			     do i = 2 to (max_pages - 1) while (i < next_part_add - dumpadd);
				call ptw_util_$make_disk (addrel (ptp, i), (dumpadd + i)); /* The disk record */
			     end;
			     rest_size = min (max_size - hdr_size, length); /* does not include header */
			     word_count = hdr_size + rest_size; /* the number of words to this branch */
			     xname = ename;		/* the name of the branch we will create */
			     call get_branch;	/* get and initiate the branch */
			     p -> copy = dumpptr -> copy; /* copy the header and some Multics segs */
			     length = length - rest_size; /* remaining length is less now */
			end;
		end;
	     else do;				/* no need to worry about dn355 stuff */
		     substr (ename, 13) = ltrim (char (seqno)) || "." || ltrim (erf);
		     word_count = min (length, max_size); /* take what we can */
		     xname = ename;			/* a standard name */
		     call get_branch;
		     p -> copy = dumpptr -> copy;	/* copy the data */
		     length = length - word_count;	/* shorten remaining length */
		end;
	     call pc$cleanup (astep);			/* Force all pages from core. */
	     aste.npfs = "0"b;			/* Turn off the no page fault switch. */
	     dumpadd = dumpadd + max_pages;		/* Step partition address to next max_pagesK. */
	     if ^dumping_Multics then go to endup;	/* dn355 core is copied already */
	     if length <= 0 then go to cleanup;		/* Check for completion of Multics dump copying */
	end;					/* Continue loop until dump info exhausted. */
						/*  */
cleanup:
	call ptw_util_$make_disk (ptp, first);		/* Insert toe-hold to first record */
	dumpptr -> dump.valid = "0"b;			/* Turn off valid bit. */
	call syserr (LOG, "copy_fdump: Copied fdump image of erf ^d (^a) for ^a", /* let anyone who cares know about this */
	     dumpptr -> dump.erfno, dt, pds$process_group_id);

endup:
	call pc$cleanup (astep);			/* Force all pages from core. */

exit:
	call reversion_ ("any_other");
	if p ^= null () then do;			/* terminate and force-deactivate */
		call demand_deactivate$force_given_segno (p, code);
		call terminate_$noname (p, code);
	     end;


	call lock$lock_ast;
	call put_aste (astep);			/* return the AST entry */
	call lock$unlock_ast;
	tsdw = ""b;
	call privileged_mode_ut$swap_sdw (dumpptr, tsdwp);
	return;

set_num:						/* CODE to reset the erf number in PART DUMP */
	call ptw_util_$make_disk (ptp, first);		/* Establish address for first page */

	if (dumpptr -> dump.valid | dumpptr -> dump.valid_355)
	then do;					/* Previous dump hasn't been picked up */
		a_code = error_table_$dmpvalid;
		go to endup;
	     end;

	dumpptr -> dump.erfno = erf_no - 1;		/* set the dump number */
	go to endup;

get_num:						/* CODE to get the erf number in PART DUMP */
	call ptw_util_$make_disk (ptp, first);		/* get address of first page */

	call check_dump_header;			/* internal proc to decode header info */

	if dumping_Multics then do;
		a_length = length;
		a_valid = dumping_Multics;
		a_ename = ename;
	     end;
	if dumping_dn355 then do;
		a_valid_dn355 = dumping_dn355;
		a_ename_dn355 = ename_dn355;
	     end;

	go to endup;




/*  */

/* INTERNAL PROC to examine the dump header */
check_dump_header: proc;
	if esw ^= 1 then /* previously checked that it's invalid for set_erf_no entry */
	     if dumpptr -> dump.valid = "0"b then
		if dumpptr -> dump.valid_355 = "0"b then do;
			a_code = error_table_$dmpinvld; /* No valid dumps so scram */
			go to endup;
		     end;
	dumping_Multics = dumpptr -> dump.valid;	/* want to copy valid Multics dump */
	dumping_dn355 = dumpptr -> dump.valid_355;	/* want to copy valid 355 dump */
	length = dumpptr -> dump.words_dumped;		/* keep this number handy */
						/* Now fabricate a name for the dump. The names look like ...
						   MMDDYY.TTTT.N.EEE
						   MMDDYY	= month, day, year
						   TTTT	= time of day
						   N	= sequence number of dump segment
						   EEE	= ERF number
						   */
	erf = cv_bin_$dec ((dumpptr -> dump.erfno));	/* Convert the ERF number. */
	if dumping_Multics then do;
		call date_time_ (dumpptr -> dump.time, dt); /* Convert the date and time of dump. */
		ename = substr (dt, 1, 2) || substr (dt, 4, 2) || substr (dt, 7, 2) || "."
		     || substr (dt, 11, 5) || "0." || ltrim (erf);
	     end;
	if dumping_dn355 then do;
		call date_time_ (dumpptr -> dump.time_355, dt_dn355); /* setup name for 355 segs in >dumps similarly */
		ename_dn355 = substr (dt_dn355, 1, 2) || substr (dt_dn355, 4, 2) || substr (dt_dn355, 7, 2) || "."
		     || substr (dt_dn355, 11, 5) || "0." || ltrim (erf) || ".355";
	     end;
     end check_dump_header;

/* INTERNAL PROC to create a seg in >dumps, and initiate it */
get_branch: proc;					/* share stack frame */
append:
	if p ^= null () then do;			/* terminate and force-deactivate */
		call demand_deactivate$force_given_segno (p, code);
		call terminate_$noname (p, code);
	     end;

	call append$branchx (">dumps", xname, RW_ACCESS_BIN, rb, (pds$process_group_id), 0, 0, 36 * word_count, code);
	if code ^= 0 then do;
		if code = error_table_$noaccess then do;/* >dumps is not there */
			call append$branchx (">", "dumps", A_ACCESS_BIN, rb, "*.*.*", 1, 0, 0, code); /* create it */
			if code ^= 0 then do;
				a_code = code;
				go to endup;
			     end;
			go to append;		/* loop back to try again */
		     end;
		else do;				/* Branch cannot be created. */
			a_code = code;
			go to endup;
		     end;
	     end;
	call initiate (">dumps", xname, "", 0, 0, p, code); /* get a pointer to the new seg */
	if p = null then do;			/* If initiation failed ... */
		a_code = code;
		go to endup;
	     end;
     end get_branch;
						/*  */

/* INTERNAL PROC to handle unclaimed signals */

handler: proc (mc_ptr, name);

	dcl     mc_ptr		 ptr,		/* pointer to machine conditions (not used) */
	        name		 char (*);	/* name of the condition */


	call syserr (ANNOUNCE, "copy_fdump: unexpected ^a signal.", name);
	go to exit;				/* Print comment, and then clean up and exit. */
     end handler;

%page; %include access_mode_values;
%page; %include aste;
%page; %include bos_dump;
%page; %include syserr_constants;
/*  */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   copy_fdump: unexpected NAME signal.

   S:	$info

   T:	$run

   M:	An attempt to copy the dump from the DUMP partition with
   copy_fdump resulted in an unclaimed signal. This may be due to
   damage to the DUMP partition contents, a malfunction of the BCE
   dump command, a supervisor error, or a simple difficulty
   like running out of space in >dumps. The system continues operation.
   The copied dump may be only partly valid.

   A:	$notify


   Message:
   copy_fdump: Copied fdump image of erf NNN (MM/DD/YY HHMM.M) for USERNAME

   S:	$info

   T:	$run

   M:	The user identified by USERNAME has successfully copied the
   FDUMP image for the specified ERF out of the DUMP partition. The time
   the FDUMP was taken is also included in the message. This message is
   informational only, and is intended only as an aid in tracking system
   progress by perusing the syserr log.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

     end copy_fdump;
