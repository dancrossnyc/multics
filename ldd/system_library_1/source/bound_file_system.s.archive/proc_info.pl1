/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* 	Procedure to return certain per-process info previously in process_info */
/*	Initially coded by R. J. Feiertag, Dec. 10,1969 */
/* 	Last modified by Kobziar July 74 to add authorization entry */

proc_info:	proc(process_id,process_group_id,process_dir_name,lock_id_);

	declare process_id bit(36) aligned,
		process_group_id char(32) aligned,
		process_dir_name char(32) aligned,
		lock_id_ bit(36) aligned,
		((pds$processid, pds$lock_id, tc_data$initializer_id) bit(36),
		 (pds$process_group_id, pds$process_dir_name) char(32)) aligned ext;


	process_id = pds$processid;		/* pick up process id */
	lock_id_ = pds$lock_id;		/* pick up lock id */
	process_group_id = pds$process_group_id;
	process_dir_name = pds$process_dir_name;
	return;

get_initial_ring: entry(iring);

dcl (pds$initial_ring ext, iring) fixed bin;

	iring = pds$initial_ring;

	return;			/* That was rather difficult! */

set_mask_ring: entry;			/* hphcs_ entry */

	if pds$processid = tc_data$initializer_id
	then pds$initial_ring = 4;		/* Initializer now wants to be masked in lower rings */
	return;

authorization: entry(auth, max_auth);

	declare (auth, max_auth) bit(72) aligned,
		(pds$access_authorization, pds$max_access_authorization) ext static aligned bit(72);

	auth = pds$access_authorization;
	max_auth = pds$max_access_authorization;
	return;

end proc_info;
