/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/*			MAKESTACK
   *
   *	This is a  ring (0)  procedure which is called to make a stack for a ring.
   *	The number of the ring for which the stack is being made is passed as an argument to
   *	makestack.    All of the operations performed by  makestack  will be in behalf of this
   *	 ring.
   *
   * Last modified (date and reason):
   *		3/85 by Keith Loepere to not append stacks through links.
   *		6/79 by C. Hornig to do less for prelinked rings
   *		11/77 by M. Weaver to set aside a special area for ref names
   *		6/77 by M. Weaver to set static handlers for isot_fault and lot_fault
   *		3/77 by M. Weaver to add initialize_rnt code and to initialize ect_ptr
   *		11/76 by M. Weaver to extend stack header
   *		10/75 by R. Bratt for prelinking and to cleanup
   *		9/74    by S.Webber as part of combining stacks, lots, and clrs
   *		Modified 12/73 by E. Stone to remove assumption that pl1_operators_ is the same in all rings
   *		,i.e. the placing of pointers to the alm operators in the stack header.
   *		Modified 10/73 by E. Stone to set the max_length of the stack less than 256K
   *		and to terminate the process if the stack exists or if the segment number has been used
   *		and to place a pointer to operator_pointers_ in the stack header for B. Wolman
   *		Recoded to include new stack format  -  3/72  by  Bill Silver
   *		Recoded in  PL/I  -  8/70  by  N. I. Morris
   */


makestack: procedure (a_ring_num);


dcl  a_ring_num fixed bin (3);			/* ring number for stack */

dcl 1 instruction based aligned,
    2 tra_offset bit (18) unaligned,			/* References  offset  portion of  tra  instruction
						   *  in transfer vector table in pl1_operators_.   These
						   *  tra   instructions transfer to  ALM linkage operators. */
    2 rest bit (18) unaligned;


dcl  ring_num fixed bin (3),				/* Work variable where the   ring number argument
						   is  copied.  */
     save_val fixed bin (3),				/* Used to save the current validation level when the
						   procedure is entered.  */
     segno fixed bin,				/* segment number of new stack */
     dirname char (168),
     stack_name char (8),				/* The reference name  ( and entry name ) of the new
						   stack  segment.  */
     pl1_op_ptr ptr,				/* A pointer to the pl1 operators table. */
     workptr ptr,					/* A work pointer used in calls to  link_snap$make_ptr */
						/* And to construct ptrs to operators in the stack header. */
     sctp (0:1) ptr unaligned based,
     1 local_create_branch_info aligned like create_branch_info,
     code fixed bin (35);				/* An internal  error  code.  */


/*	The following declarations are made in order to reference data in the
   *	process  data  segment.
   */

dcl  pds$stacks (0:7) pointer external;			/* An array of stack pointers for all possible rings. */
dcl  pds$prelinked_ring (7) bit (1) unaligned ext;
dcl  active_all_rings_data$stack_base_segno fixed bin (18) ext; /* Segment number of ring 0 stack. */
dcl  pds$process_dir_name char (32) ext;
dcl  pds$process_group_id char (32) ext;
dcl 1 pds$useable_lot aligned ext,
    2 flags (0:7) bit (1) unal;



/*	MAKESTACK uses the following external  entry points.
   */

dcl  level$get ext entry (fixed bin (3)),
     level$set ext entry (fixed bin (3)),
     link_man$get_initial_linkage entry (fixed bin (3)),
     link_snap$make_ptr ext entry (ptr, char (*), char (*), ptr, fixed bin (35)),
     append$create_branch_ ext entry (char (*), char (*), ptr, fixed bin (35)),
     initiate ext entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     ref_name_$insert entry (char (32) varying, fixed bin, fixed bin (35)),
     set$max_length_ptr ext entry (ptr, fixed bin (19), fixed bin (35)),
     syserr$error_code ext entry options (variable),
     terminate_proc ext entry (fixed bin (35));

dcl  sys_info$default_stack_length fixed bin (19) ext;
dcl  error_table_$invalid_stack_creation ext fixed bin (35);

dcl (addr,
     addrel,
     baseno,
     baseptr,
     fixed,
     null,
     ptr,
     rel,
     size,
     string,
     substr,
     unspec) builtin;
%page;
	ring_num = a_ring_num;
	sb, pds$stacks (ring_num)
	     = baseptr (ring_num + active_all_rings_data$stack_base_segno); /* Compute expected stack pointer. */
	segno = fixed (baseno (sb), 17);

	if pds$prelinked_ring (ring_num)
	then do;
	     stack_header.null_ptr = null ();		/* force the stack to be copied */
	     pds$useable_lot.flags (ring_num) = "1"b;	/* this saves trouble later */
	     return;
	end;

	call level$get (save_val);
	call level$set (ring_num);
	dirname = pds$process_dir_name;
	stack_name = "stack_" || substr ("1234567", ring_num, 1);

	unspec (local_create_branch_info) = "0"b;	/* describe new stack, no chasing allowed */
	local_create_branch_info.version = create_branch_version_2;
	local_create_branch_info.parent_ac_sw = "1"b;
	local_create_branch_info.mode = REW_ACCESS;
	local_create_branch_info.rings (*) = ring_num;
	local_create_branch_info.userid = pds$process_group_id;

	call append$create_branch_ (dirname, stack_name, addr (local_create_branch_info), code);
	if code ^= 0 then do;			/* User cannot make his own stack */
	     call syserr$error_code (4, code, "makestack: error appending ^a", stack_name);
	     call terminate_proc (error_table_$invalid_stack_creation);
	end;
	call initiate (dirname, stack_name, "", 1, 1, sb, code);
						/* can't use reference names yet */
	if code ^= 0 then do;			/* Prevent user from using reserved segment number */
	     call syserr$error_code (4, code, "makestack: error initiating ^a", stack_name);
	     call terminate_proc (error_table_$invalid_stack_creation);
	end;
	call set$max_length_ptr (sb, sys_info$default_stack_length, code);
	if code ^= 0
	then call syserr$error_code (2, code, "makestack: error from set$max_length_ptr on ^a.", stack_name);

	stack_header.null_ptr,
	     stack_header.ect_ptr = null ();
	stack_header.stack_begin_ptr,
	     stack_header.stack_end_ptr = ptr (sb, size (stack_header));
	call link_man$get_initial_linkage (ring_num);
	pds$useable_lot.flags (ring_num) = "1"b;
	unspec (stack_header.lot_ptr -> lot.lp (segno)) = lot_fault;
	call initialize_rnt;			/* allocate RNT and set search rules */
	call ref_name_$insert ((stack_name), segno, code); /* now we can add reference name */

/*	Now fill in the fields in the  header  of the  new  stack.  */

	stack_header.signal_ptr = get_ptr ("signal_", "signal_");
	stack_header.unwinder_ptr = get_ptr ("unwinder_", "unwinder_");
	stack_header.trans_op_tv_ptr = get_ptr ("operator_pointers_", "operator_pointers_");
	pl1_op_ptr = get_ptr ("pl1_operators_", "operator_table");



/*	Get the following pl1 operator pointers from offsets within the pl1 operator table transfer vector */

	workptr = addrel (pl1_op_ptr, tv_offset);

	stack_header.pl1_operators_ptr = pl1_op_ptr;
	stack_header.call_op_ptr =
	     ptr (workptr, addrel (workptr, call_offset) -> instruction.tra_offset);
	stack_header.push_op_ptr =
	     ptr (workptr, addrel (workptr, push_offset) -> instruction.tra_offset);
	stack_header.return_op_ptr =
	     ptr (workptr, addrel (workptr, return_offset) -> instruction.tra_offset);
	stack_header.return_no_pop_op_ptr =
	     ptr (workptr, addrel (workptr, return_no_pop_offset) -> instruction.tra_offset);
	stack_header.entry_op_ptr =
	     ptr (workptr, addrel (workptr, entry_offset) -> instruction.tra_offset);

/*	set up essential static handlers */

	call link_snap$make_ptr (null (), "copy_on_write_handler_", "copy_on_write_handler_", workptr, code);
	ptr (sb, rel (stack_header.sct_ptr)) -> sctp (no_write_permission_sct_index) = workptr;
	ptr (sb, rel (stack_header.sct_ptr)) -> sctp (not_in_write_bracket_sct_index) = workptr;
	call link_snap$make_ptr (null (), "isot_fault_handler_", "isot_fault_handler_", workptr, code);
	ptr (sb, rel (stack_header.sct_ptr)) -> sctp (isot_fault_sct_index) = workptr;
	call link_snap$make_ptr (null (), "lot_fault_handler_", "lot_fault_handler_", workptr, code);
	ptr (sb, rel (stack_header.sct_ptr)) -> sctp (lot_fault_sct_index) = workptr;

/*	We have finished setting up the header of the new  stack.   There are no more calls to be
   *	made  so we will reset the validation level of this procedure to what it was when the procedure
   *	was  called.    Then we will set up the two thread pointers in the first stack frame of the
   *	new  stack.   Note the previous frame pointer is null since there is no previous frame.
   *	The pointer to the first stack frame has been set up above in the stack_begin_ptr.
   */

	call level$set (save_val);
	sp = stack_header.stack_end_ptr;
	sp -> stack_frame.prev_sp = null;
	sp -> stack_frame.next_sp = addrel (stack_header.stack_end_ptr, stack_frame_min_length);


get_ptr:	proc (refname, defname) returns (ptr);
dcl (refname, defname) char (*);
	     call link_snap$make_ptr (null (), refname, defname, workptr, code);
	     if code ^= 0 then do;
		call syserr$error_code (0, code, "makestack: error finding ^a$^a for ^a.", refname, defname, stack_name);
		call terminate_proc (error_table_$invalid_stack_creation);
	     end;
	     return (workptr);
	end get_ptr;
%page;
initialize_rnt: proc;

dcl  rnt_space (2048) bit (36) aligned based;
dcl 1 ainfo aligned like area_info;

dcl  size builtin;

dcl  error_table_$termination_requested ext fixed bin (35);
dcl  terminate_proc entry (fixed bin (35));
dcl  define_area_ entry (ptr, fixed bin (35));
dcl  pds$processid bit (36) aligned ext;
dcl  initiate_search_rules$init_ring entry (ptr, fixed bin (35));
dcl  syserr$error_code entry options (variable);

%include rnt;

%include area_info;

dcl 1 default_rules static options (constant) aligned,
    2 number fixed bin init (1),
    2 name char (168) init ("default");
%page;
/* obtain an rnt area */

	     ainfo.version = area_info_version_1;
	     string (ainfo.control) = "0"b;
	     ainfo.control.zero_on_free = "1"b;
	     ainfo.control.system = "1"b;
	     ainfo.owner = "rnt";
	     ainfo.size = size (rnt_space);
	     allocate rnt_space in (stack_header.clr_ptr -> based_rnt_area) set (ainfo.areap);
	     call define_area_ (addr (ainfo), code);
	     if code ^= 0 then call terminate_proc (error_table_$termination_requested);


/*	initialize the RNT itself */

	     allocate rnt in (ainfo.areap -> based_rnt_area) set (rntp);
	     unspec (rnt) = "0"b;
	     rnt.areap = ainfo.areap;
	     rnt.rnt_area_size = ainfo.size;
	     rnt.name_hash_table (*) = null ();
	     rnt.segno_hash_table (*) = null ();
	     rnt.srulep = null;
	     stack_header.rnt_ptr = rntp;

/*	initialize the search rules */

	     call initiate_search_rules$init_ring (addr (default_rules), code);
	     if code ^= 0 then do;
		call syserr$error_code (0, code, "makestack: error from initiate_search_rules.");
		call terminate_proc (error_table_$termination_requested);
		end;

	     return;
	end initialize_rnt;
%page;
% include access_mode_values;
% include create_branch_info;
% include lot;
% include stack_frame;
% include stack_header;
% include static_handlers;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   makestack: error from set$max_length_ptr on STACKNAME.

   S:	$term

   T:	$init
   Process/ring initialization.  Just prior to using a new ring.

   M:	The process directory is probably messed up.

   A:	Ignore unless it's the initializer, in which case bring the system back up.
   If problem persists, contact the system administrator.

   Message:
   makestack: error appending STACKNAME

   S:	$term

   T:	$init
   Process/ring initialization.  Just prior to using a new ring.

   M:	The process directory is probably messed up.

   A:	Ignore unless it's the initializer, in which case bring the system back up.
   If problem persists, contact the system administrator.

   Message:
   makestack: error getting bit count for original prelinked STACK_NAME

   S:	$term

   T:	$init
   Process/ring initialization.  Just prior to using a new ring.

   M:	A directory containing a prelinked subsystem is probably messed up.

   A:	The directory should be prelinked again.

   Message:
   makestack: error initiating STACKNAME

   S:	$term

   T:	$init
   Process/ring initialization.  Just prior to using a new ring.

   A:	Ignore unless it's the initializer, in which case bring the system back up.
   If problem persists, contact the system administrator.

   Message:
   makestack: error finding DIRNAME>ENAME for STACKNAME.

   S:	$term

   T:	$init
   Process/ring initialization.

   A:	Ignore unless it's the initializer, in which case bring the system back up.
   If problem persists, contact the system administrator.

   Message:
   makestack: error from initiate_search_rules.

   S:	$term

   T:	Process/ring initialization.  Just prior to using new ring.

   M:	The default search rules are missing from ahd (active hardcore data).
   These are usually loaded by the command set_system_search_rules.

   A:	$contact_sa

   END MESSAGE DOCUMENTATION */

     end makestack;
