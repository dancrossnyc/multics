" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(87-09-03,GDixon), approve(87-09-10,MECR0006),
"     audit(87-09-30,Farley), install(87-09-10,MR12.1-1104):
"      A) Change $reset_ips_mask to only reset the mask if the control bit
"         is on in the incoming mask.  Otherwise, it will only return the
"         current mask value.
"  2) change(87-10-07,GDixon), approve(87-10-07,MCR7770),
"     audit(87-11-02,Farley), install(87-11-30,MR12.2-1004):
"      A) Formally install changes covered by MECR0006 (change 1 above).
"                                                      END HISTORY COMMENTS

" Name:  ips_
" 
"      The procedure "ips_" controls the enabling and disabling of
" interprocess signal (IPS) interrupts.  Each ring of each process
" has an IPS mask and an automatic IPS mask stored in the "pds".
" Individual bits of the mask words correspond to specific IPS
" interrupts.  The correspondence is defined by the procedure
" "create_ips_mask_".  The following "ips_" entries inspect or
" modify the IPS mask or the automatic IPS mask of the calling
" process's current validation level.  Entries that change a mask
" return the former value of the mask.  The entries are all
" accessible via the hardcore gate "hcs_".
" 
"      The last (thirty-sixth) bit of an IPS mask does not
" correspond to an interrupt, but is instead a control bit.  The
" control bit of each IPS mask and each automatic IPS mask stored
" in the "pds" is always zero.  On mask values input to procedure
" "ips_", the control bit is ignored.  On masks returned from
" "ips_", the control bit is set to either "0"b or "1"b, as
" specified in the individual entry descriptions below, to notify
" the user that the requested action has been performed.  No
" process interrupts can occur in the time interval between the
" requested mask modification and the return of the old mask and
" control bit.  Hence, each call on an "ips_" entry behaves as an
" atomic operation.
" 
" 
" 
" Entry:  ips_$get_ips_mask
" 
"      This entry returns the value of the current IPS mask without
" modifying it.  The control bit is returned as "0"b.
" 
" Usage:
" 
" dcl ips_$get_ips_mask entry(bit(36)aligned);
" 
" call ips_$get_ips_mask(oldmask);
" 
" 1) oldmask          is the current value of the IPS mask, with a
"                     control bit of "0"b (output).
" 
" 
" 
" Entry:  ips_$set_ips_mask
" 
"      This entry replaces the entire IPS mask with a supplied
" value and returns the previous value of the mask with a control
" bit of "1"b.
" 
" Usage:
" 
" dcl ips_$set_ips_mask entry(bit(36)aligned,bit(36)aligned);
" 
" call ips_$set_ips_mask(mask,oldmask);
" 
" 1) mask             is the new value to replace the IPS mask
"                     (input).
" 
" 2) oldmask          is the former value of the IPS mask, with a
"                     control bit of "1"b (output).
" 
" 
" 
" Entry:  ips_$reset_ips_mask
" 
"      This entry is exactly the same as "ips_$set_ips_mask" except
" that the control bit in the returned former mask is "0"b.  These
" two entries can be used to bracket sections of critical code
" during which interrupts must be masked.  The control bit then
" serves as rigorous identification of whether control is in a
" critical section.
" 
" Usage:
" 
" dcl ips_$reset_ips_mask entry(bit(36)aligned,bit(36)aligned);
" 
" call ips_$reset_ips_mask(mask,oldmask);
" 
" 1) mask             is the new value to replace the IPS mask
"                     (input).
" 
" 2) oldmask          is the former value of the IPS mask, with a
"                     control bit of "0"b (output).
" 
" 
" 
" Entry:  ips_$unmask_ips
" 
"      This entry disables specified IPS interrupts.  Bits in the
" supplied mask value cause corresponding bits of the IPS mask to
" be reset.  The former value of the IPS mask is returned with a
" control bit of "1"b.  Warning: for historical reasons, this entry
" is misnamed (it masks rather than unmasks).
" 
" Usage:
" 
" dcl ips_$unmask_ips entry(bit(36)aligned,bit(36)aligned);
" 
" call ips_$unmask_ips(mask,oldmask);
" 
" 1) mask             for each bit on in this word, the
"                     corresponding bit in the IPS mask is turned
"                     off--i.e., the corresponding IPS interrupt is
"                     disabled (input).
" 
" 2) oldmask          is the former value of the IPS mask, with a
"                     control bit of "1"b (output).
" 
" 
" 
" Entry:  ips_$mask_ips
" 
"      This entry enables specified IPS interrupts.  Bits in the
" supplied mask value cause corresponding bits of the IPS mask to
" be set.  The former value of the IPS mask is returned with a
" control bit of "0"b.  Entry "ips_$unmask_ips" and this entry can
" be used to bracket sections of critical code during with certain
" interrupts must be masked.  The control bit then serves as
" rigorous identification of whether control is in a critical
" section.  Warning: for historical reasons, this entry is misnamed
" (it unmasks rather than masks).
" 
" Usage:
" 
" dcl ips_$mask_ips entry(bit(36)aligned,bit(36)aligned);
" 
" call ips_$mask_ips(mask,oldmask);
" 
" 1) mask             for each bit on in this word, the
"                     corresponding bit in the IPS mask is turned
"                     on--i.e., the corresponding IPS interrupt is
"                     enabled (input).
" 
" 2) oldmask          is the former value of the IPS mask, with a
"                     control bit of "0"b (output).
" 
" 
" 
" Entry:  ips_$set_automatic_ips_mask
" 
"      This entry replaces the entire automatic IPS mask with a
" supplied value and returns the previous value of the mask with a
" control bit of "1"b.
" 
" Usage:
" 
" dcl ips_$set_automatic_ips_mask
" entry(bit(36)aligned,bit(36)aligned);
" 
" call ips_$set_automatic_ips_mask(mask,oldmask);
" 
" 1) mask             is the new value to replace the automatic IPS
"                     mask (input).
" 
" 2) oldmask          is the former value of the automatic IPS
"                     mask, with a control bit of "1"b (output).
"
"
"
"
"	Modified August 1981 by J. Bongiovanni for IPS signals to take
"		immediately when unmasked (or shortly thereafter)
"

	entry	get_ips_mask		Inspect IPS mask without changing it.
	entry	set_ips_mask		Replace entire IPS mask.
	entry	reset_ips_mask		Replace entire IPS mask.
	entry	unmask_ips		Disable specific IPS interrupts.
	entry	mask_ips			Enable specific IPS interrupts.
	entry	set_automatic_ips_mask	Replace entire auto IPS mask.
"
"
"
" Entry:  ips_$get_ips_mask(oldmask)
"
get_ips_mask:
	lxl7	pds$validation_level	Validation level to X7.
	ldq	pds$ips_mask,7		Save old IPS mask in the Q.
	anq	=o777777777776		Make sure control bit is 0.
	stq	ap|2,*			Pass it back to caller.
	short_return			Return to caller.
"
"
"
" Entry:  ips_$set_ips_mask(mask,oldmask)
"
set_ips_mask:
	lxl7	pds$validation_level	Validation level to X7.
	ldq	pds$ips_mask,7		Save old IPS mask in the Q.
	lda	ap|2,*			Caller's desired new mask.
	ana	=o777777777776		Control bit must be off.
	sta	pds$ips_mask,7		Set new IPS mask.
ret1:	orq	=o1,dl			Set control bit 1 in old mask.
	stq	ap|4,*			Pass it back to caller.
	tra	check_ips_pending		Make pending, unmasked IPS take
"					And return to caller.
"
"
"
" Entry:  ips_$reset_ips_mask(mask,oldmask)
"
reset_ips_mask:
	lxl7	pds$validation_level	Validation level to X7.
	ldq	pds$ips_mask,7		Save old IPS mask in the Q.
	lda	ap|2,*			Caller's desired new mask.
	cana	1,dl			Check if control bit is on.
	tze	ret0			No, don't reset mask.
	ana	=o777777777776		Control bit must be off.
	sta	pds$ips_mask,7		Set new IPS mask.
ret0:	anq	=o777777777776		Set control bit 0 in old mask.
	stq	ap|4,*			Pass it back to caller.
	tra	check_ips_pending		Make pending, unmasked IPS take
"					And return to caller.
"
"
"
" Entry:  ips_$unmask_ips(mask,oldmask)
"
unmask_ips:
	lxl7	pds$validation_level	Validation level to X7.
	ldq	pds$ips_mask,7		Save old IPS mask in the Q.
	lda	ap|2,*			Get bits to be cleared.
	era	=o777777777776		Change bits to zeros for logical AND.
	ansa	pds$ips_mask,7		Clear selected bits of IPS mask.
	tra	ret1			Return old mask with control bit 1.
"
"
"
" Entry:  ips_$mask_ips(mask,oldmask)
"
mask_ips:
	lxl7	pds$validation_level	Validation level to X7.
	ldq	pds$ips_mask,7		Save old IPS mask in the Q.
	lda	ap|2,*			Get bits to be set.
	ana	=o777777777776		Control bit must remain off.
	orsa	pds$ips_mask,7		Set selected bits of IPS mask.
	tra	ret0			Return old mask with control bit 0.
"
"
"
" Entry:  ips_$set_automatic_ips_mask(mask,oldmask)
"
set_automatic_ips_mask:
	lxl7	pds$validation_level	Validation level to X7.
	ldq	pds$auto_mask,7		Save old auto IPS mask in the Q.
	lda	ap|2,*			Caller's desired new mask.
	ana	=o777777777776		Control bit must be off.
	sta	pds$auto_mask,7		Set new auto IPS mask.
	tra	ret1			Return old auto mask with control bit 1.
"
"
"
"
"	Internal procedure to check for pending IPS signals which are unmasked
"	as a result of this call.  If any are found, ring_alarm is called
"	to determine and set an appropriate value of the ring_alarm register
"	so that the recently unmasked IPS signal will take within a short
"	amount of time.
"
"	On entry, x7 = current validation level
"
"	This routine will exit to the caller of ips_
"

check_ips_pending:
	eppbp	pds$apt_ptr,*		bp -> APTE for this process
	lda	bp|apte.ips_message		Get pending IPS signals
	ana	pds$ips_mask,7		Check for unmasked in ring of validation
	tnz	set_ring_alarm		Pending IPS found
	short_return			None found -- return to caller
set_ring_alarm:
	push			        "	For call out
	call	ring_alarm$reset
	return				Return to caller
"
	include	apte

	end
