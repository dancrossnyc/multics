/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

get_defname_: proc (a_linkptr, a_defptr, a_offset, a_section, a_ename, a_code);

/*  Get_defname is a routine which is given an entry offset
   .    and returns a pointer to the corresponding entry name in acc format.

   USAGE:	dcl get_defname ext entry (ptr, bit(18) aligned, ptr, fixed bin);

   call get_defname (linkptr, offset, acc_name_ptr, code);

   1) linkptr	a pointer to the linkage section for the entry (Input)

   2) defptr	a ptr to the def section or to the seg if seg is a gate

   3) offset	the offset of the entry (Input)

   4) section	the object section offset is relative to

   5) ename	the entry name from the defs

   6) code	a standard file system status code (Output)


   Converted for the follow-on 645 by Craig Jensen on 6/27/72.
   Recoded as get_def_name_ by M. Weaver 12 June 1973
   Modified 8/76 by M. Weaver to reference kst_info instead of unsnap_service
   Modified 10/84 by Keith Loepere to restructure so as to avoid access checks.

   */


/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_defptr			ptr parameter;
dcl  a_ename			char (*) parameter;
dcl  a_linkptr			ptr parameter;
dcl  a_offset			bit (18) aligned parameter;
dcl  a_section			fixed bin parameter;

/* Variables */

dcl  acc_name_ptr			ptr;
dcl  bitcnt			fixed bin (24);
dcl  class			fixed bin;
dcl  code				fixed bin (35);
dcl  def_count			fixed bin;
dcl  defptr			ptr;
dcl  first_defptr			ptr;
dcl  link_count			fixed bin;
dcl  linkptr			ptr;
dcl  offset			bit (18) aligned;
dcl  1 oi				aligned like object_info;
dcl  old_flag			fixed bin;
dcl  savering			fixed bin (3);
dcl  section			fixed bin;
dcl  type				fixed bin (2);

/* Entries */

dcl  level$get			entry () returns (fixed bin (3));
dcl  level$set			entry (fixed bin (3));
dcl  link_man$get_lp		entry (ptr, ptr);
dcl  object_info_$brief		entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  status_$mins			entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));

/* Misc */

dcl  (addr, addrel, bin, null, rel, unspec) builtin;

/* External */

dcl  error_table_$defs_loop		ext fixed bin (35);
dcl  error_table_$no_ext_sym		ext fixed bin (35);

/* Based */

dcl  1 acc			aligned based,	/* template for acc string */
       2 count			fixed bin (8) unaligned,
       2 string			char (0 refer (count)) unaligned;

/* OLD DEFINITION FORMAT */

dcl  1 ext_sym_definition		based aligned,	/* external symbol definition block */
       2 next_ext_ptr		bit (18) unal,	/* pointer to next definition */
       2 trap_ptr			bit (18) unal,	/* pointer to  trap information */
       2 value			bit (18) unal,	/* value of the defined symbol */
       2 class			bit (18) unal,	/* says what value is relative to */
       2 nchars			bit (9) unaligned,	/* number of characters in external def */
       2 char_string		bit (279) unaligned;/* external symbol */
%page;
	code = 0;					/* first do some initialization */
	link_count = 0;
	def_count = 0;
	linkptr = a_linkptr;
	defptr = a_defptr;
	offset = a_offset;
	section = a_section;
	savering = level$get ();

	if defptr ^= null then
	     if rel (defptr) ^= "0"b then ;		/* user could find definitions in user ring */
	     else do;

/* must find definitions given pointer to object */
/* This program used to handle cases where the segment was a
hardcore segment (segno < stack_0) in which the user's validation
level was within the call bracket.  However, the only two such
segments are return_to_ring_0_ and restart_fault, neither of which
has anything to look up. */

		call dc_find$obj_linkage_ring_ptr (defptr, code); /* let user read through call bracket */
		if code ^= 0 then go to no_name;

		call status_$mins (defptr, type, bitcnt, code);
		if code ^= 0 then go to no_name;

		oi.version_number = object_info_version_2;
		call object_info_$brief (defptr, bitcnt, addr (oi), code);
		if code = 0 then defptr = oi.defp;
		else if addr (defptr) -> its_unsigned.ringno ^= 0 then go to no_name;
		else do;

/* hardcore objects had their definitions removed - use get_lp to find them */

		     call level$set (0);		/* allow get_lp to work */
		     call link_man$get_lp (defptr, linkptr);
		     call level$set (savering);

		     if linkptr ^= null then		/* can still find defs from linakge */
			if unspec (linkptr -> header.def_ptr) = "0"b then go to no_name;
			else defptr = linkptr -> header.def_ptr; /* pointer to base of definition section */
		end;
	     end;
	else do;					/* must find definitions via linkage info */
	     if unspec (linkptr -> header.def_ptr) = "0"b then go to no_name;
	     defptr = linkptr -> header.def_ptr;	/* pointer to base of definition section */
	     call dc_find$obj_linkage_ring_ptr (defptr, code);
	     if code ^= 0 then do;
no_name:		code = error_table_$no_ext_sym;
		go to return;
	     end;
	end;

	first_defptr = defptr;
	if defptr -> definition.flags.new then do;	/* this is new format */
	     old_flag = 0;
	     if defptr -> definition.flags.ignore then	/* skip header in std obj segs */
		defptr = addrel (first_defptr, defptr -> definition.forward);
	end;
	else old_flag = 1;				/* this is old format */
	go to test;				/* got good def so skip next */

next:	defptr = addrel (first_defptr, defptr -> definition.forward);

next3:	if defptr -> definition.forward = "0"b then	/* no more definitions */
	     goto no_name;

	def_count = def_count + 1;			/* increment definition count */
	if def_count >= 4000 then do;			/* too many definitions */
	     code = error_table_$defs_loop;
	     go to return;
	end;

test:	if old_flag = 0 then do;			/* new_format */
	     if defptr -> definition.class = "011"b then do; /* check for class 3 */
		defptr = addrel (first_defptr, defptr -> definition.segname); /* get to first def quickly */
		go to next3;
	     end;
	end;

	if defptr -> definition.value ^= offset then go to next; /* no match */

	if section > -1 then do;			/* use only defs for proper section */
	     if old_flag = 0 then class = bin (defptr -> definition.class, 3);
	     else class = bin (defptr -> ext_sym_definition.class, 18);
	     if section ^= class then go to next;
	end;

	if old_flag = 0 then			/* new format */
	     acc_name_ptr = addrel (first_defptr, defptr -> definition.symbol);

	else acc_name_ptr = addrel (defptr, 2);		/* old format */

	a_ename = acc_name_ptr -> acc.string;		/* fill in name */

return:	a_code = code;
	return;
%page; %include dc_find_dcls;
%page; %include definition;
%page; %include its;
%page; %include linkdcl;
%page; %include object_info;
     end;
