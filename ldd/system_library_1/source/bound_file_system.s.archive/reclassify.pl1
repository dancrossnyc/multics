/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Initial coding by Kobziar July 74 */
/* Modified 750523 by LJS to add protection auditing */
/* Modified June 1, 1976 by R. Bratt to call find_$finished */
/* Modified Nov 30 76 by B. Greenberg for setting dtem */
/* Modified September 1981 by J. Bongiovanni for better error codes */
/* Modified March 1983 by E. N. Kittlitz to not set dtem back */
/* Modified August 1983 by E. N. Kittlitz for setfaults$if_active pvid, vtocx args */
/* Modified 83-10-10 by E. N. Kittlitz to fix locking problems */
/* Modified 83-12-07 by E. N. Kittlitz to audit setting node oos */
/* Modified July 1984 by Keith Loepere to use the new dc_find.  Also to flush
   PAM on dir reclassify. */
/* Modified November 1984 by Keith Loepere for access_audit_ and for PAM using
   uid's. */
/* Modified 84-12-05 by EJ Sharpe to actually use access_audit_ (also new sys_seg_priv entry) */
/* Modified 85-04-01 by Keith Loepere for access_audit_check_ep_. */

/* format: style4 */
reclassify: proc;

/* Parameters */

dcl  a_access_class bit (72) aligned;
dcl  a_code fixed bin (35);
dcl  a_dirname char (*);
dcl  a_ename char (*);

/* Variables */

dcl  access_class bit (72) aligned;
dcl  branch_name char (32);
dcl  branchp ptr;
dcl  code fixed bin (35);
dcl  dep ptr;
dcl  dep_locked bit (1) aligned;
dcl  dirname char (168);
dcl  dirpath char (168);
dcl  ename char (32);
dcl  ep_locked bit (1) aligned;
dcl  1 event_flags aligned like audit_event_flags;
dcl  has_zero_quota bit (1);
dcl  1 local_vtoce like vtoce aligned;
dcl  oosw_err bit (1) aligned;
dcl  parent_access_class bit (72) aligned;
dcl  pvtx fixed bin (17);
dcl  1 qcell like quota_cell aligned;
dcl  quota_err bit (1) aligned;
dcl  relp bit (18);
dcl  set_soos bit (1) aligned;
dcl  targp ptr;
dcl  targp_locked bit (1) aligned;
dcl  whoami char (24) aligned;

/* Entries */

dcl  access_audit_check_ep_$self entry (bit (36) aligned, bit (36) aligned, ptr) returns (bit (1));
dcl  access_audit_$log_entry_ptr entry options (variable);
dcl  access_audit_$log_obj_class entry options (variable);
dcl  aim_check_$equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  aim_check_$greater entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  aim_check_$greater_or_equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  change_dtem entry (ptr);
dcl  display_access_class_ entry (bit (72) aligned) returns (char (32) aligned);
dcl  get_pvtx entry (bit (36) unaligned, fixed bin (35)) returns (fixed bin (17));
dcl  level$get entry () returns (fixed bin);
dcl  lock$dir_unlock entry (ptr);
dcl  lock$lock_ast entry;
dcl  lock$unlock_ast entry;
dcl  logical_volume_manager$lvtep entry (bit (36) aligned, ptr, fixed bin (35));
dcl  pathname_am$flush entry (bit (36) aligned);
dcl  setfaults$if_active entry (bit (36) aligned, bit (36) aligned, fixed bin, bit (1) aligned);
dcl  sum$dirmod entry (ptr);
dcl  sum$getbranch entry (ptr, bit (36) aligned, ptr, fixed bin (35));
dcl  syserr$error_code entry options (variable);
dcl  vtoc_attributes$get_quota entry (bit (36) aligned, bit (36) aligned, fixed bin (17), ptr, fixed bin, fixed bin (35));
dcl  vtoc_man$get_vtoce entry (bit (36) aligned, fixed bin (17), fixed bin (17), bit (3) aligned, ptr, fixed bin (35));
dcl  vtoc_man$put_vtoce entry (bit (36) aligned, fixed bin (17), fixed bin (17), bit (3) aligned, ptr, fixed bin (35));

/* External */

dcl  access_operations_$fs_obj_reclassify bit (36) aligned ext static;
dcl  access_operations_$fs_obj_set_soos bit (36) aligned ext static;
dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  error_table_$ai_out_range fixed bin (35) ext static;
dcl  error_table_$ai_parent_greater fixed bin (35) ext static;
dcl  error_table_$ai_son_less fixed bin (35) ext static;
dcl  error_table_$argerr fixed bin (35) ext static;
dcl  error_table_$bad_ring_brackets fixed bin (35) ext static;
dcl  error_table_$dirseg fixed bin (35) ext static;
dcl  error_table_$no_terminal_quota fixed bin (35) ext static;
dcl  error_table_$nondirseg fixed bin (35) ext static;
dcl  error_table_$not_a_branch fixed bin (35) ext static;
dcl  error_table_$rqover fixed bin (35) ext static;
dcl  error_table_$soos_set fixed bin (35) ext static;
dcl  error_table_$vtoce_connection_fail fixed bin (35) ext static;
dcl  pds$processid bit (36) aligned ext;
dcl  sys_info$access_class_ceiling bit (72) aligned ext static;

/* Misc */

dcl  (addr, fixed, null, ptr, rtrim, string) builtin;
%page;
/* change branch's access_class to value of parent, called through system_privilege_ gate */

branch: entry (a_dirname, a_ename, a_access_class, a_code);

	whoami = "reclassify$branch";
	call setup;				/* process args and get ptrs */
	if ep -> entry.dirsw then do;
	     code = error_table_$dirseg;
	     go to unlock_all;
	end;
	dir.modify = pds$processid;
	call set_access_class (ep, parent_access_class, dirname, ename); /* Set the access class */
	if code = 0 then				/* Force ring 1 multiclass bit off */
	     call set_r1mc (ep -> entry.multiple_class, "0"b, dirname, ename);
	go to finish_seg;
%page;
/* change seg to be multi class, called through system_privilege_ gate */

sys_seg_priv: entry (a_dirname, a_ename, a_access_class, a_code);

	whoami = "reclassify$sys_seg_priv";
	goto sys_seg_join;


/* change seg to be multi class, called through admin_gate_ from ring 1 */

sys_seg: entry (a_dirname, a_ename, a_access_class, a_code);

	whoami = "reclassify$sys_seg";
sys_seg_join:
	call setup;
	if ^aim_check_$greater (access_class, parent_access_class) then do; /* must be higher */
	     code = error_table_$action_not_performed;
	     go to unlock_all;
	end;
	if ep -> entry.dirsw then do;
	     code = error_table_$dirseg;
	     go to unlock_all;
	end;
	if ep -> entry.ring_brackets (3) ^= "001"b then do; /* must be ring 1 */
	     code = error_table_$bad_ring_brackets;
	     go to unlock_all;
	end;
	dir.modify = pds$processid;
	call set_access_class (ep, access_class, dirname, ename); /* Set the access class */
	if code = 0 then				/* Force ring 1 multiclass bit on */
	     call set_r1mc (ep -> entry.multiple_class, "1"b, dirname, ename);
finish_seg:
	call setfaults$if_active ((ep -> entry.uid),	/* be conservative, call even if code ^= 0 */
	     (ep -> entry.pvid), (ep -> entry.vtocx), "1"b);
	dir.modify = "0"b;
	if code = 0 then
	     call sum$dirmod (dp);			/* reflect modification up for backup to find */
						/* note: we don't soos parent if this failed */
	call dc_find$finished (dp, "1"b);		/* unlock and unuse */
	go to ret;
%page;
/* change access class of directory and contents */

node: entry (a_dirname, a_ename, a_access_class, a_code);

	whoami = "reclassify$node";
	call setup;
	if ^ep -> entry.dirsw then do;
	     code = error_table_$nondirseg;
	     go to unlock_all;
	end;

	call vtoc_attributes$get_quota (ep -> entry.uid, (ep -> entry.pvid), (ep -> entry.vtocx),
	     addr (qcell), 0, code);
	if code ^= 0 then go to unlock_all;
	has_zero_quota = ^qcell.terminal_quota_sw;

	call lock$dir_unlock (dp);			/* all done with dp for now (will re-get via sum when done with node) */
						/* see if dir will be upgraded */
	ep_locked = "0"b;

	if aim_check_$greater (access_class, parent_access_class) then
	     if has_zero_quota then do;		/* refuse to do operation */
		code = error_table_$no_terminal_quota;
		go to unlock_all;
	     end;
	     else ;				/* ok upgraded dir */
	else if ^aim_check_$equal (access_class, parent_access_class) then do; /* don't accept lower than parent */
	     code = error_table_$action_not_performed;
	     go to unlock_all;
	end;
%page;
/* now reset access class and check multi class bit */
/* must go to completion in the following loop for a consistent directory */

	targp -> dir.modify = pds$processid;
	relp = targp -> dir.entryfrp;
	do while (relp ^= "0"b);			/* reset access_class if necessary */
	     branchp = ptr (targp, relp);
	     branch_name = ptr (targp, branchp -> entry.name_frp) -> names.name;
	     if ^branchp -> entry.dirsw then if branchp -> entry.bs then do; /* a segment */
		     if aim_check_$greater (branchp -> entry.access_class, access_class) then
			if branchp -> entry.multiple_class then go to fine;
						/* all other segments get access class reset (or corrected) */
		     call set_access_class (branchp, access_class, dirpath, branch_name);
		     call set_r1mc (branchp -> entry.multiple_class, "0"b, dirpath, branch_name);
		     call setfaults$if_active ((branchp -> entry.uid), (branchp -> entry.pvid),
			(branchp -> entry.vtocx), "1"b);
		end;
						/* now for directories */
	     if branchp -> entry.dirsw then if aim_check_$equal (branchp -> entry.access_class, access_class)
		then call set_r1mc (branchp -> entry.multiple_class, "0"b, dirpath, branch_name);
		else if aim_check_$greater (branchp -> entry.access_class, access_class)
		then call set_r1mc (branchp -> entry.multiple_class, "1"b, dirpath, branch_name);
		else do;				/* this directory doesn't fit */
		     if ^branchp -> entry.security_oosw then do;
			if access_audit_check_ep_$self (string (event_flags), access_operations_$fs_obj_set_soos, branchp) then
			     call access_audit_$log_entry_ptr (whoami, level$get (), string (event_flags),
			     access_operations_$fs_obj_set_soos, branchp, error_table_$ai_parent_greater, null (), 0,
			     "Parent class: ^a", display_access_class_ (access_class));
		     end;
		     branchp -> entry.security_oosw = "1"b;
		     oosw_err = "1"b;
		end;
fine:
	     relp = branchp -> entry.efrp;
	end;

	if set_soos then go to finish_node;
	targp -> dir.access_class = access_class;
%page;
/* now check all upgraded directories for quota */
/* this loop seperate from above since locking failure not critical */

	relp = targp -> dir.entryfrp;
	do while (relp ^= "0"b);
	     branchp = ptr (targp, relp);
	     if branchp -> entry.dirsw then
		if aim_check_$greater (branchp -> entry.access_class, access_class) then do;
		     call vtoc_attributes$get_quota (branchp -> entry.uid, (branchp -> entry.pvid),
			(branchp -> entry.vtocx), addr (qcell), 0, code);
		     if code ^= 0 then go to q_err;
		     if ^qcell.terminal_quota_sw then do;
q_err:			if ^branchp -> entry.security_oosw then
			     if access_audit_check_ep_$self (string (event_flags), access_operations_$fs_obj_set_soos, branchp) then
				call access_audit_$log_entry_ptr (whoami, level$get (), string (event_flags),
				access_operations_$fs_obj_set_soos, branchp, error_table_$no_terminal_quota,
				null (), 0);
			branchp -> entry.security_oosw = "1"b;
			quota_err = "1"b;
		     end;
		end;
	     relp = branchp -> entry.efrp;
	end;
%page;
/* fix branch in parent */

finish_node:
	call sum$getbranch (targp, "1"b, ep, code);	/* get ep again (could change via on-line salvage) */
	if code ^= 0 then do;			/* stop the world, I want to get off */
	     call syserr$error_code (CRASH, code, "reclassify: err locking parent");
	     go to unlock_all;			/* just in case we come back... */
	end;
	ep_locked = "1"b;
	dp = ptr (ep, 0);				/* reaffirm dp */
	dir.modify = pds$processid;
	if set_soos then do;
	     if access_audit_check_ep_$self (string (event_flags), access_operations_$fs_obj_set_soos, ep) then
		call access_audit_$log_entry_ptr (whoami, level$get (), string (event_flags),
		access_operations_$fs_obj_set_soos, ep, error_table_$ai_son_less, null (), 0);
	     entry.security_oosw = "1"b;		/* zap main dir */
	end;
	call set_access_class (ep, access_class, dirname, ename);
	if code = 0 then
	     call set_r1mc (ep -> entry.multiple_class, aim_check_$greater (access_class, parent_access_class), dirname, ename); /* Set multi-class bit */
	if code = 0 then if quota_err then code = error_table_$rqover;
	     else if oosw_err | set_soos then code = error_table_$soos_set; /* signal oosw problem */
	targp -> dir.modify = "0"b;
	call sum$dirmod (targp);
	call pathname_am$flush (ep -> entry.uid);
	dir.modify = "0"b;
	call sum$dirmod (dp);
	call lock$dir_unlock (dp);
	call dc_find$finished (targp, "1"b);		/* unlock and unuse */

ret:
	a_code = code;
	return;

unlock_all:
						/* we come here only if the operation is denied due
						   to some aim restriction or improper operation */
	event_flags.grant = "0"b;
	call access_audit_$log_obj_class (whoami, level$get (), string (event_flags),
	     access_operations_$fs_obj_reclassify, access_class, target (dirname, ename), code, null (), 0);

	if targp_locked then do;			/* dirs held by targp */
	     if dep_locked then
		call lock$dir_unlock (ptr (dep, 0));
	     if ep_locked then do;
		dp -> dir.modify = "0"b;
		call lock$dir_unlock (ptr (ep, 0));
	     end;
	     targp -> dir.modify = "0"b;
	     call dc_find$finished (targp, "1"b);
	end;
	else do;
	     if dep_locked then call lock$dir_unlock (ptr (dep, 0));
	     dir.modify = "0"b;
	     call dc_find$finished (dp, "1"b);		/* unlock and unuse */
	end;
	go to ret;
%page;
/* get entry and check access */

setup: proc;

dcl  lvid bit (36) aligned;

	string (event_flags) = ""b;
	event_flags.special_op = "1"b;
	event_flags.grant = "1"b;			/* for now */

	if whoami ^= "reclassify$sys_seg"		/* this one's refed through admin_gate_ */
	then event_flags.priv_op = "1"b;

	pvt_arrayp = addr (pvt$array);
	dep_locked, ep_locked, oosw_err, quota_err, set_soos, targp_locked = "0"b;
	access_class = a_access_class;		/* copy args */
	if aim_check_$greater_or_equal (sys_info$access_class_ceiling, access_class) then code = 0;
	else do;					/* check arg */
	     code = error_table_$argerr;
	     go to ret;
	end;
	dirname = a_dirname;
	ename = a_ename;

/* the calls to dc_find below may generate an audit message
   thus, it's OK to simply return without additional auditing
   if either fails. */
	if whoami = "reclassify$node" then do;
	     if dirname = ">" then dirpath = ">" || ename;/* now check out the directory */
	     else dirpath = rtrim (dirname) || ">" || ename;
	     call dc_find$dir_reclassify (dirpath, dep, ep, targp, code);
	     if code ^= 0 then go to ret;
	     targp_locked = "1"b;
	end;
	else do;
	     call dc_find$obj_reclassify (dirname, ename, dep, ep, code);
	     if code ^= 0 then go to ret;
	end;
	ep_locked = "1"b;
	dp = ptr (ep, 0);
	if dep ^= null then dep_locked = "1"b;

	if ^ep -> entry.bs then do;			/* this is a link */
	     code = error_table_$not_a_branch;
	     go to unlock_all;
	end;
	if whoami = "reclassify$node" then lvid = entry.sons_lvid; /* check AIM for volume */
	else do;
	     pvtx = get_pvtx (entry.pvid, code);
	     if code ^= 0 then go to unlock_all;
	     lvid = pvt_array (pvtx).lvid;
	end;
	call logical_volume_manager$lvtep (lvid, lvtep, code); /* check lv mounted, AIM range */
	if code ^= 0 then go to unlock_all;		/* oh well */
	if ^aim_check_$greater_or_equal (access_class, lvte.access_class.min) |
	     ^aim_check_$greater_or_equal (lvte.access_class.max, access_class) then do;
	     code = error_table_$ai_out_range;
	     go to unlock_all;
	end;
	if dep_locked then do;
	     parent_access_class = dep -> entry.access_class;
	     call lock$dir_unlock (ptr (dep, 0));
	     dep_locked = "0"b;			/* remember not to do this again when finishing */
	end;
	else parent_access_class = "0"b;

     end setup;


%page;
set_access_class: proc (set_ep, to_this, dirname, ename);

dcl  dirname char (168) parameter;
dcl  ename char (32) parameter;
dcl  set_ep ptr parameter;
dcl  to_this bit (72) aligned parameter;

dcl  pvid bit (36);
dcl  uid bit (36) aligned;
dcl  vtocx fixed bin (17);



/* reclassify$(branch sys_seg sys_seg_priv) call this to
   set the new access class of the segment in its entry and
   vtoce.  reclassify$node calls this once for each segment
   in the dir being reclassified, and finally once for the
   directory itself.  "set_soos" is set if the operation
   failed so reclassify$node will set security-out-of-service
   on the containing dir that is being reclassified. */

	if access_audit_check_ep_$self (string (event_flags), access_operations_$fs_obj_reclassify, set_ep) then
	     call access_audit_$log_entry_ptr (whoami, level$get (), string (event_flags),
	     access_operations_$fs_obj_reclassify, set_ep, 0, null (), 0, "New class: ^a",
	     display_access_class_ (to_this));

	pvid = set_ep -> entry.pvid;			/* do vtoce first */
	uid = set_ep -> entry.uid;
	vtocx = set_ep -> entry.vtocx;		/* copy args before ASTlocking */
	call lock$lock_ast;
	pvtx = get_pvtx (pvid, code);
	if code ^= 0 then go to bust;
	call vtoc_man$get_vtoce ((pvid), pvtx, vtocx, "101"b, addr (local_vtoce), code);
						/* read activation + part 3 */
	if code ^= 0 then go to bust;
	if local_vtoce.uid ^= uid then do;
	     code = error_table_$vtoce_connection_fail;
	     go to bust;
	end;
	addr (local_vtoce) -> vtoce.access_class = to_this;
	call vtoc_man$put_vtoce ((pvid), pvtx, vtocx, "001"b, addr (local_vtoce), code);
						/* but only write part 3 */

bust:	call lock$unlock_ast;
	if code = 0 then do;
	     set_ep -> entry.access_class = to_this;
	     call change_dtem (set_ep);		/* Cause access recomputation */
	end;
	else set_soos = "1"b;
	return;
     end set_access_class;
%page;

set_r1mc: proc (set_this, to_this, dirname, ename);

dcl  dirname char (168) parameter;
dcl  ename char (32) parameter;
dcl  set_this bit (1) parameter;
dcl  to_this bit (1) parameter;

dcl  type (0:1) char (12) aligned static options (constant) init ("single-class", "upgraded");

	if set_this ^= to_this
	then do;
						/* we'll already have logged with entry data by reclassifying,
						   so here we'll just log a text message, no binary */
	     call access_audit_$log_obj_class (whoami, level$get (), string (event_flags),
		access_operations_$fs_obj_reclassify, access_class, target (dirname, ename),
		0, null (), 0, "Changed to ^a", type (fixed (to_this, 1)));
	end;

	set_this = to_this;

	return;
     end set_r1mc;
%page;
target: proc (dir, ent) returns (char (*));

dcl  dir char (*) parameter;
dcl  ent char (*) parameter;

	if dir = ">"
	then return (">" || ent);
	else return (rtrim (dir) || ">" || ent);

     end target;

/* format: off */
%page; %include access_audit_eventflags;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include dir_name;
%page; %include lvt;
%page; %include pvte;
%page; %include quota_cell;
%page; %include vtoce;
%page; %include syserr_constants;
%page;
/* format: on */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   reclassify: err locking parent. ERROR_CODE

   S:	$crash

   T:	$run

   M:	$err
   $crashes

   A:	$recover


   Message:
   AUDIT (reclassify$ENTRY): GRANTED modification of security out-of-service ADDED_INFO

   S:	$access_audit

   T:	$run

   M:	An AIM error was found in respect to the specified directory.
   There was a disagreement in access class between the directory
   and one of it's sons, or there was an upgraded directory with
   non-terminal quota.

   A:	$ignore


   Message:
   AUDIT (reclassify$ENTRY): GRANTED|DENIED modification of fs_obj access class ADDED_INFO

   S:	$access_audit

   T:	$run

   M:	Indicates whether an attempt to reclassify the specified file
   system object was granted or denied.  In the case of
   reclassify$node, a message will be generated for each
   entry in the directory being reclassified.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

     end reclassify;
