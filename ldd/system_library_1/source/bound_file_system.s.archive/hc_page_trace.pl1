/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,indcomtxt */

/**** hc_page_trace: user interface to pds trace buffer
      Written at an unknown time by an unknown party.
      Modified 83-12-03 BIM for pgt_ signal. */

/* Entries:

   declare hc_page_trace entry (pointer);
   call hc_page_trace (data_ptr);

   Where: data_ptr points to the structure "trace" in
   sys_trace.incl.pl1. The entry array is declared
   with a bound of 1024, and the last_available field
   is used to tell the size.


   declare hc_page_trace$get_signal entry (bit (1) aligned, fixed bin (17));
   call hc_page_trace$get_signal (ips_signal_enabled, threshold_percent);

   Where: ips_signal_enabled is "1"b is pgt_ is sent when the buffer
   is threshold_percent filled.
   threshold_percent (between 50 and 100) is the % threshold at
   which a pgt_ is sent.

   declare hc_page_trace$set_signal entry (bit (1) aligned, fixed bin (17), bit (1) aligned, fixed bin (35));
   call hc_page_trace$set_signal (ips_signal_enabled, threshold_percent, changed, old_enabled, old_threshold, code);

   Where:
   ips_signal_enabled (Input)  is as in get_signal
   threshold_percent (Input)   is as in get_signal
   if it is < 0, then threshold is not changed.
   changed (Output) is "1"b if either value was changed.
   old_enabled (Output) is the old value of signal_enabled
   old_threshold (Output) is the old value of threshold
   code (Output) is error_table_$bigarg or error_table_$smallarg
   if threshold_percent is not between 50 and 100.
*/


hc_page_trace$get_page_trace:
     procedure (Data_ptr);

	declare (
	        Data_ptr		 pointer,
	        Old_signal		 bit (1) aligned,
	        New_signal		 bit (1) aligned,
	        Old_threshold	 fixed bin (17),
	        New_threshold	 fixed bin (17),
	        Changed		 bit (1) aligned,
	        Code		 fixed bin (35)
	        )			 parameter;

	declare dp		 pointer;
	declare copy_data		 (copy_length) bit (36) aligned based;
	declare copy_length		 fixed bin (19);
	declare signal_enabled	 bit (1) aligned;
	declare threshold_percent	 fixed bin (17);
	declare threshold		 fixed bin (16);
	declare code		 fixed bin (35);

	declare error_table_$bigarg	 fixed bin (35) ext static;
	declare error_table_$smallarg	 fixed bin (35) ext static;
	declare pds$trace		 bit (36) aligned external static;
	declare pds$process_group_id   char (32) external static;

          declare syserr		 entry options (variable);

	declare (addr, decimal, fixed, float, round, wordno)
				 builtin;

%include sys_trace;


	dp = Data_ptr;				/* copy argument */
	trace_ptr = addr (pds$trace);
	copy_length = wordno (addr (trace.data)) + (2 * trace.last_available);
						/* entries are doublewords */

	/*** if user supplied insufficient space, tough! */

	dp -> copy_data = trace_ptr -> copy_data;	/* copy the trace data */
	return;


get_signal:
     entry (Old_signal, Old_threshold);

	call setup_get_old;
	return;

set_signal:
     entry (New_signal, New_threshold, Changed, Old_signal, Old_threshold, Code);

	code = 0;
	call setup_get_old;

	signal_enabled = New_signal;
	threshold_percent = New_threshold;

	if threshold_percent ^< 0			/* changing threshold */
	then do;
		if threshold_percent < 50
		then code = error_table_$smallarg;
		else if threshold_percent > 100
		then code = error_table_$bigarg;
		if code ^= 0
		then go to RETURN;
	     end;
	else threshold_percent = get_threshold_percent ();

	threshold =
	     round (fixed (float (decimal (threshold_percent)) / 1.0e2 * float (decimal (trace.last_available)), 17, 1),
	     0);					/* calculate in decimal to make 100 work right */
	Changed = (signal_enabled ^= trace.send_ips) | (threshold ^< 0 & threshold ^= trace.threshold);
	trace.send_ips = signal_enabled;
	trace.threshold = threshold;
RETURN:
	Code = code;
	return;

setup_get_old:
     procedure;
	trace_ptr = addr (pds$trace);
	Old_signal = trace.send_ips;
	Old_threshold = get_threshold_percent ();
	return;
     end setup_get_old;

get_threshold_percent:
     procedure returns (fixed bin (17));

	if trace.threshold = 0
	then call syserr (TERMINATE_PROCESS, "hc_page_trace: pds$trace.threshold found zero for ^a.",
		pds$process_group_id);
	else return (
		round (
		fixed (float (decimal (trace.threshold)) / float (decimal (trace.last_available)) * 1.00e2, 17, 1), 0)
		);
     end get_threshold_percent;

%include syserr_constants;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   hc_page_trace: pds$trace.threshold found zero for USER.

   M:  The signalling threshold for page tracing was found to be
   zero for USER. This indicates that the user's pds has been
   damaged.

   S:  $term

   T:  $run

   A:  Investigate the saved dead process.


   END MESSAGE DOCUMENTATION */

     end hc_page_trace$get_page_trace;
