/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */

list_inacl_all:
     proc (a_dirname, a_area_ptr, a_acl_ptr, a_info_ptr, a_code);

/* Modified 06/11/84 by Keith Loepere to use the new dc_find. */
/* Modified 05/10/79 by B Margulies to remove xmode check */
/* Modified 07/77 by THVV for bad_dir_ check */
/* modified by R. Bratt 06/01/76 to call find_$finished */
/* modified by Kobziar 1/24/75 to accept a null area ptr and return only counts */
/* coded RE Mullen: 4/13/74 */

	dcl     a_acl_ptr		 ptr parameter;
	dcl     a_area_ptr		 ptr parameter;
	dcl     a_code		 fixed bin (35) parameter;
	dcl     a_dirname		 char (*) parameter;
	dcl     a_info_ptr		 ptr parameter;

	dcl     1 acl_arrays	 aligned based (acl_ptr),
		2 seg_aclsa	 (alloc_seg_acl_count) aligned like segment_acl_entry,
		2 dir_aclsa	 (alloc_dir_acl_count) aligned like directory_acl_entry;
	dcl     1 dir_acls		 (dir_acl_count) aligned like directory_acl_entry based (da_ptr);
	dcl     1 inacl_info	 aligned based (info_ptr) like list_inacl_all_info;
						/* Our structure */
	dcl     1 list		 aligned based,
		2 frp		 bit (18) unal,
		2 brp		 bit (18) unal;
	dcl     1 seg_acls		 (seg_acl_count) aligned like segment_acl_entry based (sa_ptr);
	dcl     user_area		 area based (area_ptr);

	dcl     1 a_n		 aligned,
		2 ac_name,
		  3 person	 char (32),
		  3 project	 char (32),
		  3 tag		 char (1),
		2 mode		 bit (36),
		2 ex_mode		 bit (36);
	dcl     acls_listed		 fixed bin (17);
	dcl     alloc_dir_acl_count	 fixed bin;
	dcl     alloc_seg_acl_count	 fixed bin;
	dcl     area_ptr		 pointer;
	dcl     called_find		 bit (1) aligned;
	dcl     code		 fixed bin (35);
	dcl     d_s		 bit (1) aligned;
	dcl     da_ptr		 pointer;
	dcl     dir_acl_count	 fixed bin;
	dcl     dir_aclx		 fixed bin;
	dcl     dirname		 char (168);
	dcl     i			 fixed bin (17);
	dcl     info_ptr		 pointer;
	dcl     lev		 fixed bin (17);
	dcl     list_ptr		 pointer;
	dcl     locked		 bit (1) aligned;
	dcl     return_the_acls	 bit (1) aligned;
	dcl     sa_ptr		 pointer;
	dcl     saved_dir_change_pclock
				 fixed bin (35);
	dcl     seg_acl_count	 fixed bin;
	dcl     seg_aclx		 fixed bin;

	dcl     (area, bad_dir_, cleanup, seg_fault_error)
				 condition;

	dcl     acl_$list_entry	 entry (fixed bin, bit (36) aligned, ptr, ptr, fixed bin (17), fixed bin (35));
	dcl     lock$dir_lock_read	 entry (ptr, fixed bin (35));
	dcl     lock$dir_unlock	 entry (ptr);

	dcl     error_table_$noalloc	 ext fixed bin (35);
	dcl     error_table_$null_info_ptr
				 ext fixed bin (35);

	dcl     (addr, bin, bit, max, rtrim, null, ptr, rel, sum, unspec)
				 builtin;
%page;
	dirname = a_dirname;			/* copy args  befor locking dir */
	area_ptr = a_area_ptr;
	info_ptr = a_info_ptr;

RESTART:
	acl_ptr = null;
	locked, called_find = "0"b;
	sa_ptr, da_ptr = null;
	on cleanup call cleanup_;

	if info_ptr = null
	then call fatal_error (error_table_$null_info_ptr);

	return_the_acls = (area_ptr ^= null);

/* Find the directory and lock it. */

	call dc_find$dir_read (dirname, dp, code);
	if code ^= 0
	then call fatal_error (code);
	called_find = "1"b;
	locked = "1"b;

/* See how much info to return */

	seg_acl_count = sum (dir.iacl_count.seg);
	dir_acl_count = sum (dir.iacl_count.dir);

	if seg_acl_count + dir_acl_count = 0
	then do;
		unspec (inacl_info) = ""b;
		call unlock_dir;
		a_acl_ptr = null;
		a_code = 0;
		go to RETURN;
	     end;


	if return_the_acls
	then do;

		saved_dir_change_pclock = dir.change_pclock;

		call lock$dir_unlock (dp);
		locked = "0"b;

		on area call fatal_error (error_table_$noalloc);

		alloc_seg_acl_count = max (1, seg_acl_count);
		alloc_dir_acl_count = max (1, dir_acl_count);

		allocate acl_arrays in (user_area) set (acl_ptr);

		revert area;

		sa_ptr = addr (seg_aclsa);		/* avoid expensive runtime adress preparation */
		da_ptr = addr (dir_aclsa);

		on seg_fault_error signal bad_dir_;
		call lock$dir_lock_read (dp, code);
		revert seg_fault_error;
		locked = "1"b;

		if code ^= 0
		then call fatal_error (code);

		if dir.change_pclock ^= saved_dir_change_pclock
		then do;
			call unlock_dir;
			call free_storage;
			go to RESTART;
		     end;
	     end;

/* Call internal proc for seg and dir iacls per ring */

	seg_aclx, dir_aclx = 1;
	acls_listed = 0;

	d_s = "0"b;				/* set switch for internal proc */

	do lev = 0 to 7;				/* do all rings */

	     call do_one_list (addr (dp -> dir.iacl (lev).seg_frp), dir.iacl_count (lev).seg);
	end;

	d_s = "1"b;
	do lev = 0 to 7;
	     call do_one_list (addr (dp -> dir.iacl (lev).dir_frp), dir.iacl_count (lev).dir);
	end;

	if acls_listed < (seg_acl_count + dir_acl_count)
	then signal bad_dir_;			/* make sure we found all we were supposed to */

	call unlock_dir;

	a_code = 0;
	a_acl_ptr = acl_ptr;
	return;
%page;
do_one_list:
     proc (acl_start_ptr, a_n_iacls);

	dcl     a_n_iacls		 fixed bin unal parameter;
	dcl     acl_start_ptr	 pointer parameter;

	dcl     access_name		 character (32);
	dcl     n_iacls		 fixed bin;

	n_iacls = a_n_iacls;
	i = 0;
	list_ptr = acl_start_ptr;
	if n_iacls = 0
	then do;
		if list_ptr -> list.frp ^= ""b
		then signal bad_dir_;
		else if d_s
		then do;
			inacl_info.dia_relp (lev) = ""b;
			inacl_info.dia_count (lev) = 0;
		     end;
		else do;
			inacl_info.sia_relp (lev) = ""b;
			inacl_info.sia_count (lev) = 0;
		     end;
		return;
	     end;

	if d_s
	then do;
		inacl_info.dia_relp (lev) = rel_to_acl_ptr (addr (dir_acls (dir_aclx)));
		inacl_info.dia_count (lev) = n_iacls;
	     end;
	else do;
		inacl_info.sia_relp (lev) = rel_to_acl_ptr (addr (seg_acls (dir_aclx)));
		inacl_info.sia_count (lev) = n_iacls;
	     end;

	do while (list_ptr -> list.frp ^= ""b);
	     list_ptr = ptr (list_ptr, list_ptr -> list.frp);
	     i = i + 1;
	     if i > n_iacls
	     then signal bad_dir_;

	     if return_the_acls
	     then do;				/* want all the info */

		     call acl_$list_entry (n_iacls, dir.uid, acl_start_ptr, addr (a_n), i, code);
		     if code ^= 0
		     then call fatal_error (code);

		     acls_listed = acls_listed + 1;

		     access_name =
			rtrim (a_n.ac_name.person) || "." || rtrim (a_n.ac_name.project) || "." || a_n.ac_name.tag;

		     if d_s
		     then do;
			     if dir_aclx > dir_acl_count
			     then signal bad_dir_;
			     dir_acls (dir_aclx).access_name = access_name;
			     dir_acls (dir_aclx).mode = a_n.ex_mode;
			     dir_acls (dir_aclx).status_code = 0;
						/* no per user errors on list */
			     dir_aclx = dir_aclx + 1;
			end;
		     else do;
			     if seg_aclx > seg_acl_count
			     then signal bad_dir_;
			     seg_acls (seg_aclx).access_name = access_name;
			     seg_acls (seg_aclx).mode = a_n.mode;
			     seg_acls (seg_aclx).extended_mode = a_n.ex_mode;
			     seg_acls (seg_aclx).status_code = 0;
			     seg_aclx = seg_aclx + 1;
			end;
		end;
	     else acls_listed = acls_listed + 1;	/* just count */
	end;
	if i < n_iacls
	then signal bad_dir_;

rel_to_acl_ptr:
     procedure (aptr) returns (bit (18)) reducible;

	dcl     aptr		 pointer parameter;

	dcl     relf		 fixed bin (18) uns;

	relf = bin (rel (aptr), 18) - bin (rel (acl_ptr), 18);
	return (bit (relf, 18));
     end rel_to_acl_ptr;

     end do_one_list;

fatal_error:
     procedure (c);
	dcl     c			 fixed bin (35);

	call unlock_dir;
	call free_storage;
	a_code = c;
	go to ERR_RETURN;
     end fatal_error;
RETURN:
ERR_RETURN:
	return;

unlock_dir:
     procedure;
	if called_find
	then call dc_find$finished (dp, locked);
	else if locked
	then call lock$dir_unlock (dp);
     end unlock_dir;

free_storage:
     procedure;
	if acl_ptr ^= null
	then free acl_arrays;
     end free_storage;

cleanup_:
     procedure;
	call free_storage;
	if called_find
	then call dc_find$finished (dp, "0"b);		/* leave locked for verify lock */
     end cleanup_;
%page;
%include acl_structures;
%page;
%include dc_find_dcls;
%page;
%include dir_header;
%page;
%include list_inacl_all_info;
     end list_inacl_all;
