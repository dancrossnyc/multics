/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-08-08,GDixon), approve(86-08-08,MCR7388),
     audit(86-09-02,Farley), install(86-09-08,MR12.0-1150):
     Remove the include of kst.incl.pl1, since reference to variables in the
     program was removed in an early release.
  2) change(86-08-20,Lippard), approve(86-09-08,MCR7539),
     audit(86-10-15,Farley), install(86-10-20,MR12.0-1189):
     Modified by Jim Lippard to fix ref names allocation bug, fix supplied
     by Steve Harris (UNCA).
  3) change(90-07-26,WAAnderson), approve(90-07-26,MCR8182),
     audit(90-08-10,Schroth), install(90-08-21,MR12.4-1030):
     Replaced call to ref_name_$get_refnames with call to
     ref_name_$get_refname.  This change reduces stack space requirements
     and corrects the list_ref_names infinite loop bug.
                                                   END HISTORY COMMENTS */


/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

fs_get: proc;

/*	Modified 03/05/85 by Melanie Weaver to remove entry label  $call_name */
/*	Modified 02/25/85 by Keith Loepere to use dc_find for name lookup check for path_name. */
/*	Modified 10/16/84 by Keith Loepere to use dc_find for access computations. */
/*	Modified 7/17/84 by Keith Loepere to use the new dc_find. */
/*	Modified 5/17/83 by E. N. Kittlitz to decrement ref on get_link_target.
/*	Modified 1/3/83 by Jay Pattin to add access_modes entry */
/*	Modified 01/15/79 by C. D. Tavares to compute access correctly w.r.t. dir extended ring brackets */
/* 	Modified March 1977 by M. Weaver to get rntp from stack */
/*	Modified March 1976 by R. Bratt for initiated_mode and to fix get_search_rules bug */
/*	Modified April 1975 by E. Stone to put access info in kst */
/*	Modified April 1975 by R. Bratt for new kst */
/*	Modified  Feb 1975 by R. Bratt to use get_pathname_ */
/* 	Modified by Kobziar July 74 to call appropriate entry point in access_mode */
/*
   -- ->  fs_get$brackets returns the mode and ring brackets of the current
   user for the segment specified by segptr.

   USAGE: call fs_get$brackets (segptr, mode, rings, code);

   1) segptr ptr - - - pointer to segment
   2) mode fixed bin(5) - - - mode of user (output)
   3) rings (3) fixed bin(6) - - - ring brackets of user (output)
   4) code fixed bin - - - error code (output)

   -- ->  fs_get$ex_mode_name returns the mode, brackets, extended access, and
   primary name of a segment for the current user.

   USAGE: call fs_get$ex_mode_name(segptr,mode,rings,ex_mode,name,code);

   4) ex_mode is the extended access mode.

   5) name is the primary name of the segment.

   All other arguments same as fs_get$brackets.

   -- ->  fs_get$mode returns the mode of the current user at the current
   validation level for the segment specified by segptr.

   USAGE: call fs_get$mode (segptr, mode, code);

   The arguments are the same as for fs_get$brackets.

   -- ->  fs_get$access_modes returns both mode and extended modes.

   USAGE:  call fs_get$access_modes (segptr, mode, exmodes, code);

   -- ->  fs_get$segptr returns a pointer to a segment given its reference name.

   USAGE: call fs_get$segptr (refname, segptr, code);

   1) refname char(*) - - - refernce name of segment
   2) segptr ptr - - - pointer to segment (output)
   3) code fixed bin - - - error code (output)

   -- ->  fs_get$search_rules  returns in a space provided by the user a list of
   of the search rules currently in use by the user for his validation level.

   USAGE:call fs_get$search_rules (search_rules_ptr);

   1) search_rules_ptr ptr - - - is a pointer to the space where the list of names will be stored.

   The names are stored in a structure of the form:

   dcl 1 ret_struc aligned,
   2 num fixed bin,	number of rules
   2 names(21) char(168) aligned;


   -- ->  fs_get$path_name returns the pathname of the directory immediately superior
   to, and the entry name of the segment specified by segptr.

   USAGE: call fs_get$path_name (segptr, dirname, lnd, ename, code);

   1) segptr ptr - - - pointer to the segment
   2) dirname char(168) - - - pathname of superior directory (output)
   3) lnd fixed bin - - - number of significant chars in pathname (output)
   4) ename char(32) - - - entry name of segment (output)
   5) code fixed bin - - - error code (output)

   -- ->  fs_get$dir_name returns the pathname of the directory immediatetly superior
   to the segment specified by segptr.

   USAGE: call fs_get$dir_name (segptr, dirname, lnd, code);

   The arguments are the same as fs_get$path_name.

   -- ->  fs_get$ref_name returns the reference name corresponding to namecnt for
   the segment specified by segptr.

   USAGE: call fs_get$ref_name (segptr, namecnt, refname, code);

   1) segptr ptr - - - pointer to the segment
   2) namecnt fixed bin(17) - - - number of the reference name desired
   3) refname char(*) - - - reference name (output)
   4) code fixed bin - - - error code (output)

   -- ->  fs_get$trans_sw returns the current value of the transparent usage/modification
   switch and sets it to a new value.

   USAGE: call fs_get$trans_sw (newsw, oldsw)

   1) newsw fixed bin - - - new value for switch, if > 3, don't set switch
   2) oldsw fixed bin - - - old value of switch (output)

   */

/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_dirname			char (*) parameter;
dcl  a_ename			char (*) parameter;
dcl  a_ex_mode			bit (*) parameter;	/* extended access  bits EX ACC */
dcl  a_ex_modes			bit (36) aligned parameter;
dcl  a_ldir			char (*) parameter;
dcl  a_lentry			char (*) parameter;
dcl  a_lnd			fixed bin (17) parameter;
dcl  a_mode			fixed bin (5) parameter;
dcl  a_name			char (*) parameter; /* name of segment EX ACC */
dcl  a_namecnt			fixed bin (17) parameter;
dcl  a_new_mode			bit (36) aligned parameter;
dcl  a_newsw			fixed bin (17) parameter;
dcl  a_oldsw			fixed bin (17) parameter;
dcl  a_ptr			ptr parameter;
dcl  a_refname			char (*) parameter;
dcl  a_rings			(3) fixed bin (3) parameter;
dcl  a_rname			char (*) parameter;
dcl  a_segptr			ptr parameter;

/* Constants */

dcl  access_modes			fixed bin static options (constant) init (5);
dcl  brackets			fixed bin static options (constant) init (3);
dcl  ex_mode_name			fixed bin static options (constant) init (4);
dcl  just_mode			fixed bin static options (constant) init (0);

/* Variables */

dcl  aptr				ptr;
dcl  code				fixed bin (35);
dcl  dirsw			bit (1) aligned;
dcl  dlen				fixed bin (17);
dcl  end_rule			fixed bin (17);
dcl  entry_point			fixed bin;
dcl  extended_mode			bit (36) aligned;
dcl  i				fixed bin;
dcl  l				fixed bin;
dcl  ldir				char (168);
dcl  lentry			char (32);
dcl  mode				bit (36) aligned;
dcl  namecnt			fixed bin (17);
dcl  newsw			fixed bin (17);
dcl  oldsw			fixed bin (17);
dcl  pathname			char (201) varying;
dcl  rb				(3) fixed bin (3);
dcl  return_ename			bit (1) aligned;
dcl  ring				fixed bin;
dcl  rname			char (32) varying;
dcl  segnum			fixed bin (17);
dcl  segptr			ptr;
dcl  srpp				ptr;

/* Based */

dcl  1 ret_struc			based aligned,
       2 num			fixed bin,
       2 names			(21) char (168);

dcl  1 sr				(22) based aligned,
       2 segno			fixed bin (17) unaligned,
       2 offset			fixed bin (17) unaligned,
       2 uid			bit (36);

/* External */

dcl  error_table_$dirseg		fixed bin (35) external;
dcl  error_table_$noentry		fixed bin (35) external;
dcl  error_table_$root		fixed bin (35) external;
dcl  pds$stacks			(0:7) ptr external;
dcl  pds$transparent		bit (2) external aligned;

/* Entries */

dcl  get_pathname_			entry (fixed bin (17), char (*) varying, fixed bin (35));
dcl  level$get			entry returns (fixed bin);
dcl  ref_name_$get_refname		entry (fixed bin (17), fixed bin (17), char (*) varying, fixed bin (35));
dcl  ref_name_$get_segno		entry (char (32) varying, fixed bin (17), fixed bin (35));

/* Misc */

dcl  (baseno, baseptr, binary, fixed, hbound, index, lbound, length, max, null, reverse, segno, substr) builtin;
%page;
mode: entry (a_segptr, a_mode, a_code);

	entry_point = just_mode;			/* Set entry switch */
	go to join_mode;

brackets: entry (a_segptr, a_mode, a_rings, a_code);

	entry_point = brackets;			/* Set entry switch */
	go to join_mode;

access_modes:
     entry (a_segptr, a_new_mode, a_ex_modes, a_code);	/* new_mode because has correct dcl */

	entry_point = access_modes;			/* Set entry switch */
	go to join_mode;

ex_mode_name:
     entry (a_segptr, a_mode, a_rings, a_ex_mode, a_name, a_code); /* extended acess entry EX ACC */

	entry_point = ex_mode_name;			/* set entry switch EX ACC */
join_mode:
	segptr = a_segptr;				/* copy arg */

	call dc_find$obj_modes_ptr (segptr, mode, extended_mode, rb, code);
	if code ^= 0 then
	     if code = error_table_$dirseg then do;
		code = 0;
		dirsw = "1"b;
	     end;
	     else go to err0;
	else dirsw = "0"b;

	if (entry_point = brackets) | (entry_point = ex_mode_name) then do;
	     a_rings = rb;
	     if entry_point = ex_mode_name then do;
		a_ex_mode = extended_mode;
		a_name = "";
	     end;
	end;
	if entry_point = access_modes then do;
	     if dirsw then code = error_table_$dirseg;
	     else do;
		a_new_mode = mode;
		a_ex_modes = extended_mode;
	     end;
	end;
	else do;
	     if dirsw then mode = substr (mode, 1, 1) || "1"b || substr (mode, 2, 2);
	     a_mode = fixed (substr (mode, 1, 4), 5);
	end;

err0:
	a_code = code;
	return;
%page;

/* * * * * * * * * * * * * * * * * * * */

seg_ptr: entry (a_rname, a_segptr, a_code);

	call ref_name_$get_segno ((a_rname), segnum, code);
	if code = 0 then a_segptr = baseptr (segnum);
	else a_segptr = null ();
	a_code = code;
	return;

/* * * * * * * * * * * * * * * * * * * * */
search_rules: entry (a_ptr);

	aptr = a_ptr;				/* copy arg */
	ring = level$get ();
	rntp = pds$stacks (ring) -> stack_header.rnt_ptr;
	srpp = rntp -> rnt.srulep;
	end_rule = binary (END_RULE);			/* pull computation out of loop */
	do i = lbound (srpp -> sr, 1) to hbound (srpp -> sr, 1) while (srpp -> sr (i).offset ^= end_rule); /* now get the search rule names */
	     if srpp -> sr (i).offset ^= 0 then aptr -> ret_struc.names (i) = search_rule_names (srpp -> sr (i).offset);
	     else do;
		segnum = srpp -> sr (i).segno;
		segptr = baseptr (segnum);
		call dc_find$obj_existence_ptr (segptr, ep, code);
		if code ^= 0 then aptr -> ret_struc.names (i) = "invalid search rule pointer";
		else do;
		     call get_pathname_ (segnum, pathname, code);
		     if code ^= 0 then aptr -> ret_struc.names (i) = "invalid search rule pointer";
		     else aptr -> ret_struc.names (i) = pathname; /* copy name */
		     call dc_find$finished (ep, DC_FIND_UNLOCK_DIR);
		end;
	     end;
	end;
	aptr -> ret_struc.num = i - 1;
	return;

/* * * * * * * * * * * * * * * * * * * * */

get_link_target:
     entry (a_ldir, a_lentry, a_dirname, a_ename, a_code);

	ldir = a_ldir;				/* copy input arguments */
	lentry = a_lentry;

	a_dirname = "";				/* set default values for return arguments */
	a_ename = "";

	call dc_find$link_target (ldir, lentry, code);

	if code = 0 | code = error_table_$noentry then do;
	     a_dirname = ldir;
	     a_ename = lentry;
	end;

	a_code = code;
	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

path_name: entry (a_segptr, a_dirname, a_lnd, a_ename, a_code);
	return_ename = "1"b;
	goto name_join;

dir_name: entry (a_segptr, a_dirname, a_lnd, a_code);
	return_ename = "0"b;

name_join:
	code = 0;
	segptr = a_segptr;
	call dc_find$obj_existence_ptr (segptr, ep, code);
	if code = 0 then do;
	     call get_pathname_ (segno (segptr), pathname, code);
	     call dc_find$finished (ep, DC_FIND_UNLOCK_DIR);
	end;
	else if code = error_table_$root then do;
	     code = 0;
	     pathname = ">";
	end;
	else goto name_return;

	i = index (reverse (pathname), ">");
	l = length (pathname);
	dlen = max (l - i, 1);
	if return_ename then if dlen = 1 then dlen = 0;
	a_dirname = substr (pathname, 1, dlen);
	a_lnd = dlen;
	if return_ename then a_ename = substr (pathname, l + 2 - i, i - 1);
name_return:
	a_code = code;
	return;

/* * * * * * * * * * * * * * * * * * */

ref_name: entry (a_segptr, a_namecnt, a_refname, a_code);

          namecnt = max(a_namecnt, 1);

          segnum = fixed (baseno (a_segptr), 17);
          call ref_name_$get_refname (segnum, namecnt, rname, code);
	if code = 0 then do;
	   a_refname = rname;
	   a_code = 0;
	end;
	else a_code = code;

	return;

/* * * * * * * * * * * * * * * * * * */

trans_sw: entry (a_newsw, a_oldsw);

	newsw = a_newsw;
	oldsw = fixed (pds$transparent, 2);
	if newsw > 3 then go to fin2;			/* newsw > 3 means only go to fin2 oldsw, don't change newsw */
	if newsw < 0 then go to fin2;
	if newsw = 0 then pds$transparent = "0"b;
	else if newsw = 1 then pds$transparent = "01"b;
	else pds$transparent = "11"b;			/* can't have modified transparent without used */

fin2:	a_oldsw = oldsw;
	return;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_name;
%page; %include fs_types;
%page; %include rnt;
%page; %include sdw;
%page; %include search_rule_flags;
%page; %include stack_header;
     end fs_get;
