/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Modified June 1984 by Keith Loepere to use the new dc_find. */
/* Modified by C. Hornig to no longer use system_free_seg */
/* Modified May 1981 by C. Hornig to compress link pathnames */
/* Modified Jul 79 by Greenberg for another oversize stack problem. */
/* Modified Oct 1978 by B. Greenberg to fix oversize stack problem. */
/* Modified May 1978 by T. Casey to fix bug in list_dir entry point when returning link authors */
/* Modified 04/78 by G. Palter to fix bug when asking for links only */
/* Modified 07/77 by THVV for bad_dir_ check */
/* modified 06/77 by THVV to combine star and dc_pack */
/* modified 04/77 by THVV to use system_free_seg better */
/* modified 05/31/76 by R. Bratt to call find_$finished */
/* modified 04/20/76 by R. Bratt to return partial  info if not mounted */
/* modified Dec 75 by REM and TAC to add dir_list_ entry for NSS performance */
/* Modified 4/75 for NSS by THVV */
/* modified by Kobziar on 11-12-73 to drop setting of append bit on segs  */
/* modified by Ackerman-Lewis on 12-03-74 to return correct count of names matching star name  */
/* modified by Kobziar on 741203 to call new entry in access_mode */
/* Modified 750117 by PG to eliminate $no_acc_ck entry & clean up program */


/****^  HISTORY COMMENTS:
  1) change(86-08-18,JSLove), approve(86-08-18,MCR7518),
     audit(86-09-29,Parisek), install(86-10-02,MR12.0-1174):
     Changed to call check_star_name_ with control mask CHECK_STAR_IGNORE_ALL
     rather than check_star_name_$entry. This bypasses syntactic checks which
     ring zero is not responsible for enforcing.  Also changed to use named
     constants defined in check_star_name.incl.pl1.
  2) change(87-06-01,GDixon), approve(87-07-13,MCR7740),
     audit(87-07-24,Hartogs), install(87-08-04,MR12.1-1055):
      A) Modified to properly declare check_star_name_.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */

star_:
     procedure (a_dirname, a_star_name, a_pbl, a_areap, a_ecount, a_eptr, a_nptr, a_code);

dcl  a_areap ptr parameter;
dcl  a_bcount fixed bin parameter;
dcl  a_bptr ptr parameter;				/* for dc_pack */
dcl  a_code fixed bin (35) parameter;
dcl  a_dirname char (*) parameter;
dcl  a_ecount fixed bin parameter;
dcl  a_eptr ptr parameter;
dcl  a_lcount fixed bin parameter;
dcl  a_lptr ptr parameter;				/* for dc_pack */
dcl  a_nptr ptr parameter;
dcl  a_pbl fixed bin (3) parameter;
dcl  a_star_name char (*) parameter;
dcl  dcpack_area area parameter;

dcl  branch_count fixed bin;
dcl  call_find_finish bit (1) aligned;
dcl  code fixed bin (35);
dcl  dc_pack bit (1) aligned;
dcl  dirname char (168);
dcl  eptr ptr;
dcl  fast_listing bit (1) aligned;
dcl  just_return_totals bit (1) aligned;
dcl  locked bit (1) aligned;
dcl  n_branches_match fixed bin;
dcl  n_links_match fixed bin;
dcl  need_vtoc bit (1) aligned;
dcl  nptr ptr;
dcl  number_of_entries fixed bin;
dcl  pbl fixed bin (3);
dcl  priv bit (1) aligned;
dcl  return_link_path bit (1) aligned;
dcl  saved_dir_change_pclock fixed bin (35);
dcl  star_list_entry bit (1) aligned;
dcl  star_name char (32);
dcl  starname_type fixed bin (2);
dcl  u_areap ptr;
dcl  want_branches bit (1) aligned;
dcl  want_links bit (1) aligned;
dcl  vtoc_available bit (1) aligned;

dcl  error_table_$argerr fixed bin (35) external;
dcl  error_table_$nomatch fixed bin (35) external;
dcl  error_table_$notalloc fixed bin (35) external;

dcl  acc_name_$get entry (ptr, ptr);
dcl  access_mode$effective entry (pointer, bit (36) aligned, bit (36) aligned, fixed bin (35));
dcl  alloc_ external entry (fixed bin, pointer, pointer);
dcl  check_star_name_ entry (char(*), bit(36), fixed bin(2), fixed bin(35));
dcl  freen_ entry (pointer);
dcl  hash$search entry (ptr, ptr, ptr, fixed bin (35));
dcl  lock$dir_lock_read entry (ptr, fixed bin (35));
dcl  lock$dir_unlock entry (ptr);
dcl  match_star_name_ entry (char(*) aligned, char(*), fixed bin(35));
dcl  mountedp entry (bit (36) aligned) returns (fixed bin (35));
dcl  vtoc_attributes$get_info entry (bit (36) aligned, bit (36), fixed bin, ptr, fixed bin (35));

dcl  (addr, addrel, binary, bit, divide, max, mod, null, rel, size, substr, unspec) builtin;

dcl  (area, bad_dir_, seg_fault_error) condition;
%page;
/*
   star_:
   procedure (a_dirname, a_star_name, a_pbl, a_areap, a_ecount, a_eptr, a_nptr, a_code);
*/

	dc_pack, priv, fast_listing, star_list_entry = "0"b;
	go to common;

star_priv:
     entry (a_dirname, a_star_name, a_pbl, a_areap, a_ecount, a_eptr, a_nptr, a_code);

	dc_pack, fast_listing, star_list_entry = "0"b;
	priv = "1"b;
	go to common;

list_dir:
     entry (a_dirname, dcpack_area, a_bptr, a_bcount, a_lptr, a_lcount, a_code);

	priv, fast_listing, star_list_entry = "0"b;
	dc_pack = "1"b;
	go to common;

list_dir_fast:
     entry (a_dirname, dcpack_area, a_bptr, a_bcount, a_lptr, a_lcount, a_code);

	priv, star_list_entry = "0"b;
	dc_pack, fast_listing = "1"b;
	go to common;

dir_list_:
     entry (a_dirname, a_star_name, a_pbl, a_areap, a_bcount, a_lcount, a_eptr, a_nptr, a_code);

	dc_pack, priv = "0"b;
	fast_listing, star_list_entry = "1"b;
	go to common;

list_:
     entry (a_dirname, a_star_name, a_pbl, a_areap, a_bcount, a_lcount, a_eptr, a_nptr, a_code);

	dc_pack, priv, fast_listing = "0"b;
	star_list_entry = "1"b;
	go to common;

list_priv:
     entry (a_dirname, a_star_name, a_pbl, a_areap, a_bcount, a_lcount, a_eptr, a_nptr, a_code);

	dc_pack, fast_listing = "0"b;
	priv, star_list_entry = "1"b;
	go to common;
%page;
common:
	code = 0;
	want_branches, want_links, return_link_path, need_vtoc = "0"b;
	call_find_finish, locked = "0"b;
	dirname = a_dirname;

/*	      Make sure we always return consistent values.		*/

	n_branches_match, n_links_match = 0;
	dc_branch_arrayp, dc_link_arrayp, eptr, nptr = null ();
	code = 0;

/* Analyze starname type */

	if dc_pack then do;
	     starname_type = STAR_TYPE_MATCHES_EVERYTHING;
	     want_branches, want_links = "1"b;
	     u_areap = addr (dcpack_area);
	     end;
	else do;
	     star_name = a_star_name;
	     u_areap = a_areap;
	     pbl = a_pbl;
	     if pbl > 3 then do;			/* pathname desired */
		return_link_path = "1"b;
		pbl = mod (pbl, 4);			/* trim the pathname option */
		end;

	     if /* case */ pbl = 1 then want_links = "1"b;
	     else if pbl = 2 then want_branches = "1"b;
	     else if pbl = 3 then want_branches, want_links = "1"b;
	     else do;
		code = error_table_$argerr;
		go to finish;
		end;

	     call check_star_name_ (star_name, CHECK_STAR_IGNORE_ALL, starname_type, code);
	     if code ^= 0 then go to finish;
	     end;

RESCAN_DIR:
	eptr, nptr, dc_branch_arrayp, dc_link_arrayp = null ();
	call_find_finish, locked = "0"b;

	if priv
	then call dc_find$dir_read_priv (dirname, dp, code);
	else call dc_find$dir_read (dirname, dp, code);
	if code ^= 0 then go to finish;

	call_find_finish, locked = "1"b;

	if starname_type = STAR_TYPE_USE_PL1_COMPARE	/* Special case names with no * or ? */
	then branch_count, number_of_entries = 1;	/* .. since at most one item can match */
	else do;
	     branch_count = dir.seg_count + dir.dir_count;
	     number_of_entries = branch_count + dir.lcount;
	     end;


	if u_areap = null () then do;			/* Just wants totals */
	     if starname_type = STAR_TYPE_MATCHES_EVERYTHING then do;
		if want_branches then n_branches_match = branch_count;
		if want_links then n_links_match = dir.lcount;
		go to finish;
		end;
	     else just_return_totals = "1"b;		/* No vtoc needed, but must scan thru dir */
	     end;
	else just_return_totals = "0"b;

	if ^fast_listing
	then					/* Never need VTOC for fast list */
	     if dc_pack | (want_branches & star_list_entry & ^just_return_totals) then do;
		need_vtoc = "1"b;			/* See if need any info from VTOC */
		code = mountedp (dir.sons_lvid);	/* volume may not be mounted */
		vtoc_available = (code = 0);		/* sorry, force fast list, N.B. code must stay set */
		end;

	call SCAN_DIR;				/* Internal proc does the two scans */
%page;
finish:
	if call_find_finish then call dc_find$finished (dp, locked);

	if star_list_entry | dc_pack then do;		/* Copy values back to caller args */
	     a_bcount = n_branches_match;
	     a_lcount = n_links_match;
	     end;
	else do;
	     a_ecount = n_branches_match + n_links_match;
	     end;

	if dc_pack then do;
	     a_bptr = dc_branch_arrayp;
	     a_lptr = dc_link_arrayp;
	     end;
	else do;
	     a_eptr = eptr;
	     a_nptr = nptr;
	     end;

	a_code = code;
	return;
%page;
SCAN_DIR:
     procedure;

dcl  alloc_size fixed bin;
dcl  ec fixed bin (35);
dcl  entry_list (number_of_entries) uns fixed bin (18);
dcl  entry_rel bit (18);
dcl  link_path_blocks fixed bin;
dcl  n_entries_in_list fixed bin;
dcl  n_names_match fixed bin;
dcl  name_rel bit (18);
dcl  total_names_seen fixed bin;

dcl  u_narray (n_names_match + link_path_blocks) char (32) aligned based (nptr);
dcl  user_area area based (u_areap);


	n_branches_match, n_links_match, total_names_seen = 0;
	n_entries_in_list, n_names_match, link_path_blocks = 0;

	call MAKE_ENTRY_LIST;

	if n_links_match + n_branches_match = 0 then do;
	     if ^dc_pack then code = error_table_$nomatch;
	     go to done;
	     end;

	if just_return_totals then go to done;		/* If all we want is counts, we got them */

/* Allocate room in user area for copying it out */
/* We have to unlock the dir first */

	saved_dir_change_pclock = dir.change_pclock;

	call lock$dir_unlock (dp);
	locked = "0"b;

	on area go to set_no_alloc;

	if dc_pack then do;
	     dc_n_branches = max (branch_count, 1);
	     allocate dcpack_branch_array in (user_area);

	     dc_n_links = max (n_links_match, 1);
	     allocate dcpack_link_array in (user_area);
	     allocate dcpack_grand_link_pathname_array in (user_area);
	     dc_grand_n_names = max (total_names_seen, 1);
	     allocate dcpack_grand_name_array in (user_area);

	     end;

	else do;
	     if n_names_match + link_path_blocks > 0
	     then allocate u_narray in (user_area) set (nptr);
	     else nptr = null;

	     if star_list_entry
	     then alloc_size = size (star_list_link) * n_links_match + size (star_list_branch) * n_branches_match;
	     else alloc_size = n_links_match + n_branches_match;
						/* size (entries) = 1 */
	     if alloc_size = 0
	     then eptr = null;
	     else do;
		on area go to free_nptr;
		call alloc_ (alloc_size, u_areap, eptr);/* entries */
		if eptr = null then go to free_nptr;
		end;
	     end;

/* Now relock the dir */

	on seg_fault_error signal bad_dir_;
	call lock$dir_lock_read (dp, code);
	if code ^= 0 then go to finish;
	locked = "1"b;
	revert seg_fault_error;

	if dir.change_pclock ^= saved_dir_change_pclock then do;
	     if dc_pack then do;
		free dcpack_branch_array;
		free dcpack_link_array;
		free dcpack_grand_name_array;
		free dcpack_grand_link_pathname_array;
		end;
	     else do;
		free u_narray;
		if eptr ^= null () then call freen_ (eptr);
		end;
	     call dc_find$finished (dp, locked);
	     go to RESCAN_DIR;
	     end;

	call SORT_ENTRY_LIST;

	call RETURN_INFO;

	goto done;


free_nptr:
	free u_narray in (user_area);
set_no_alloc:
	code = error_table_$notalloc;

done:
	return;					/* normal exit from SCAN_DIR */
%page;
MAKE_ENTRY_LIST:
	procedure;

dcl  dir_nwords fixed bin (18);
dcl  entry_names_match_star fixed bin;
dcl  n_entries_seen fixed bin;
dcl  n_names_seen fixed bin;


	     dir_nwords = addrel (dp, dir.arearp) -> area.lu;

	     if starname_type ^= STAR_TYPE_USE_PL1_COMPARE then do;
		n_entries_seen = 0;			/* if there may be several entries */
		do entry_rel = dir.entryfrp repeat (entry.efrp) while (entry_rel ^= ""b);
		     ep = addrel (dp, entry_rel);
		     n_entries_seen = n_entries_seen + 1;
		     if (n_entries_seen > number_of_entries) | (binary (entry_rel, 18) > dir_nwords)
		     then signal bad_dir_;		/* check for loop */


		     call CHECK_VALID_ENTRY;

		     if (entry.bs & want_branches) | (^entry.bs & want_links) then do;
						/* Type is correct */
			entry_names_match_star = 0;	/* Does a name match? */
			n_names_seen = 0;
			do name_rel = entry.name_frp repeat (np -> names.fp) while (name_rel ^= ""b);
			     np = addrel (dp, name_rel);
			     n_names_seen = n_names_seen + 1;
			     if (n_names_seen > entry.nnames)
						/* check for loop */
				| (binary (name_rel, 18) > dir_nwords) | (np -> names.owner ^= entry.uid)
				| (np -> names.type ^= NAME_TYPE) | (np -> names.entry_rp ^= entry_rel)
			     then signal bad_dir_;


			     if NAME_MATCHES () then do;
				entry_names_match_star = entry_names_match_star + 1;
						/* This name will be listed */
				n_names_match = n_names_match + 1;
				end;
			end;

			if entry_names_match_star > 0 then call TAKE_ENTRY;
			end;
		end;				/* end of loop on ep */
		end;

	     else do;				/* STAR_TYPE_USE_PL1_COMPARE:  Return one or none */
		call hash$search (dp, addr (star_name), ep, ec);
		if ec = 0 then do;			/* Special case for efficiency. use hash table */
		     call CHECK_VALID_ENTRY;		/* Found the entry */
		     n_names_match = 1;		/* Found desired name */
		     call TAKE_ENTRY;
		     end;
		end;

	     return;

/* ---------------------------------------- */

TAKE_ENTRY:
	     procedure;

		n_entries_in_list = n_entries_in_list + 1;
		entry_list (n_entries_in_list) = binary (rel (ep), 18);
		total_names_seen = total_names_seen + n_names_seen;
		if ^entry.bs then do;		/* link */
		     n_links_match = n_links_match + 1;
		     if return_link_path
		     then link_path_blocks = link_path_blocks + divide (link.pathname_size + 31, 32, 17, 0);
		     end;
		else n_branches_match = n_branches_match + 1;

		return;

	     end TAKE_ENTRY;

/* ----------------------------------------------------- */

CHECK_VALID_ENTRY:
	     procedure;

		if entry.bs
		then if (entry.owner ^= dir.uid) | ((entry.type ^= SEG_TYPE) & (entry.type ^= DIR_TYPE))
		     then signal bad_dir_;
		     else ;
		else if (link.owner ^= dir.uid) | (link.type ^= LINK_TYPE) then signal bad_dir_;

		return;

	     end CHECK_VALID_ENTRY;
%page;
%include dir_allocation_area;

	end MAKE_ENTRY_LIST;
%page;
SORT_ENTRY_LIST:
	procedure ();

/* Someday, this should sort the entry list by rel(ep). */

	     return;

	end SORT_ENTRY_LIST;
%page;
RETURN_INFO:
	procedure;

dcl  code fixed bin (35);
dcl  earrayx fixed bin;
dcl  exmode bit (36) aligned;
dcl  grand_larrayx fixed bin;
dcl  grand_narrayx fixed bin;
dcl  larrayx fixed bin;
dcl  link_author char (32) aligned;
dcl  mode bit (36) aligned;
dcl  narrayx fixed bin;
dcl  ret_mode bit (5) aligned;
dcl  1 sci aligned like based_sc_info;
dcl  tx fixed bin;
dcl  vtoc_code fixed bin (35);

	     narrayx, larrayx, earrayx = 1;
	     grand_narrayx, grand_larrayx = 1;

	     do tx = 1 to n_entries_in_list;
		ep = addrel (dp, entry_list (tx));

		if entry.bs then do;
		     call access_mode$effective (ep, mode, exmode, code);
		     if entry.dirsw
		     then ret_mode = "0"b || substr (exmode, 1, 1) || "1"b || substr (exmode, 2, 2);
		     else ret_mode = "0"b || substr (mode, 1, 4);

		     if need_vtoc then do;
			unspec (sci) = ""b;		/* clear out old junk */
			vtoc_code = code;
			if vtoc_available then do;
			     call vtoc_attributes$get_info (entry.uid, entry.pvid, (entry.vtocx), addr (sci),
				vtoc_code);
			     if ^dc_pack & (vtoc_code ^= 0) & (code = 0) then code = vtoc_code;
			     end;
			end;
		     end;
		else call acc_name_$get (addr (link.author), addr (link_author));

		if dc_pack
		then call RETURN_DCPACK_INFO;
		else call RETURN_STAR_INFO;
	     end;

	     return;
%page;

RETURN_DCPACK_INFO:
	     procedure;

declare  first_name_relp bit (18);

/* in this program earrayx goes up by 1 for each branch.
   larrayx goes up by 1 for each link, and narrayx by 1 for each name on an entry (resets each time) */

		if entry.bs then do;
		     dc_branchp = addr (dcpack_branch_array (earrayx));
		     earrayx = earrayx + 1;
		     unspec (dcpack_branch) = ""b;
		     dcpack_branch.vtoc_error = (vtoc_code ^= 0);
		     dcpack_branch.uid = entry.uid;
		     dcpack_branch.dtu = sci.dtu;
		     dcpack_branch.dtm = sci.dtm;
		     dcpack_branch.dtd = entry.dtd;
		     dcpack_branch.dtem = entry.dtem;
		     dcpack_branch.dirsw = entry.dirsw;
		     dcpack_branch.optsw = entry.copysw;
		     dcpack_branch.bc = bit (entry.bc, 24);
		     dcpack_branch.cl = bit (divide (sci.csl, 1024, 9, 0), 9);
		     dcpack_branch.ml = bit (divide (sci.msl, 1024, 9, 0), 9);
		     dcpack_branch.nnames = entry.nnames;
		     dcpack_branch.mode = ret_mode;

		     if entry.dirsw then do;
			dcpack_branch.rb1 = (3)"0"b || entry.ex_ring_brackets (1);
			dcpack_branch.rb2 = (3)"0"b || entry.ex_ring_brackets (2);
			dcpack_branch.rb3 = dcpack_branch.rb2;
			end;
		     else do;
			dcpack_branch.rb1 = (3)"0"b || entry.ring_brackets (1);
			dcpack_branch.rb2 = (3)"0"b || entry.ring_brackets (2);
			dcpack_branch.rb3 = (3)"0"b || entry.ring_brackets (3);
			end;
		     end;

		else do;				/* link */

		     dc_linkp = addr (dcpack_link_array (larrayx));
		     larrayx = larrayx + 1;
		     unspec (dcpack_link) = ""b;
		     dcpack_link.uid = link.uid;
		     dcpack_link.dtu = ""b;
		     dcpack_link.dtem = link.dtem;
		     dcpack_link.dtd = link.dtd;
		     dcpack_link.nnames = link.nnames;
		     dc_pnp = null ();
		     if grand_larrayx > dc_n_links then signal bad_dir_;
		     dc_pnp = addr (dcpack_grand_link_pathname_array (grand_larrayx));
		     grand_larrayx = grand_larrayx + 1;
		     dcpack_path.size = link.pathname_size;
		     dcpack_path.name = link.pathname;
		     dcpack_path.author = link_author;
		     dcpack_link.pathnamerp = rel (dc_pnp);

		     end;				/* links */

		first_name_relp = rel (addr (dcpack_grand_name_array (grand_narrayx)));

		do name_rel = entry.name_frp repeat (np -> names.fp) while (name_rel ^= ""b);

		     if grand_narrayx > dc_grand_n_names then signal bad_dir_;
		     dc_namep = addr (dcpack_grand_name_array (grand_narrayx));
		     grand_narrayx = grand_narrayx + 1;
		     np = addrel (dp, name_rel);
		     dcpack_ename.name = np -> names.name;
		     dcpack_ename.size = 32;
		end;

		if entry.bs
		then dcpack_branch.namerp = first_name_relp;
		else dcpack_link.namerp = first_name_relp;


		return;

	     end RETURN_DCPACK_INFO;
%page;
RETURN_STAR_INFO:
	     procedure;

dcl  full_pathname char (168) aligned based;

/* In this program, earrayx is in WORDS not entries. It goes up a different amount
   depending on whether(a) star_ was called, (b) star_list_ was called and it's a branch,
   (c) star_list_ was called and it's a link. Also, narrayx goes up by 1 for each name
   and 6 for each link path. */

		esp = addrel (eptr, earrayx - 1);
		star_entry.nindex = narrayx;
		star_entry.nnames = 0;
		if entry.bs
		then if entry.dirsw
		     then star_entry.type = "10"b;	/* dir */
		     else star_entry.type = "01"b;	/* seg */
		else star_entry.type = "00"b;		/* link */

		do name_rel = entry.name_frp repeat (np -> names.fp) while (name_rel ^= ""b);
		     np = addrel (dp, name_rel);
		     if NAME_MATCHES () then do;
			u_narray (narrayx) = np -> names.name;
			narrayx = narrayx + 1;
			star_entry.nnames = star_entry.nnames + 1;
			end;
		end;

		if ^star_list_entry
		then earrayx = earrayx + size (star_entry);
		else do;
		     if entry.bs then do;		/* branch */
			earrayx = earrayx + size (star_list_branch);
			if entry.dirsw then star_list_branch.master_dir = entry.master_dir;
			star_list_branch.mode = ret_mode;

			if need_vtoc then do;
			     star_list_branch.dtm_or_dtem = sci.dtm;
			     star_list_branch.dtu = sci.dtu;
			     star_list_branch.rec_or_bc = sci.records;
			     end;
			else do;			/* didn't access vtoce */
			     star_list_branch.dtu = ""b;
			     star_list_branch.dtm_or_dtem = entry.dtem;
			     star_list_branch.rec_or_bc = entry.bc;
			     end;
			end;

		     else do;			/* link */
			earrayx = earrayx + size (star_list_link);
			if return_link_path then do;	/* copy path name */
			     star_list_link.pln = link.pathname_size;
			     substr (addr (u_narray (narrayx)) -> full_pathname, 1, link.pathname_size) =
				link.pathname;
			     star_list_link.pindex = narrayx;
			     narrayx = narrayx + divide (link.pathname_size + 31, 32, 17, 0);
			     end;
			else do;
			     star_list_link.pln = 0;
			     star_list_link.pindex = 0;
			     end;

			star_list_link.dtm = link.dtem;
			star_list_link.dtd = link.dtd;
			end;
		     end;

	     end RETURN_STAR_INFO;

	end RETURN_INFO;
%page;
NAME_MATCHES:
	procedure returns (bit (1) aligned);

dcl  code fixed bin (35);

	     if starname_type = STAR_TYPE_MATCHES_EVERYTHING then return ("1"b);
	     call match_star_name_ (np -> names.name, star_name, code);
	     return (code = 0);

	end NAME_MATCHES;

     end SCAN_DIR;
%page;
%include check_star_name;
%page;
%include dc_find_dcls;
%page;
%include dcpack_info;
%page;
%include dir_entry;
%page;
%include dir_header;
%page;
%include dir_link;
%page;
%include dir_name;
%page;
%include fs_types;
%page;
%include quota_cell;
%page;
%include sc_info;
%page;
%include star_info;
     end star_;
