/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(89-02-27,TLNguyen), approve(89-02-27,MCR8049),
     audit(89-02-28,Parisek), install(89-03-15,MR12.3-1025):
     a. removed create_branch_version_1.
     b. fixed size error.
     c. fixed stringsize error.
  2) change(89-03-31,TLNguyen), approve(89-03-31,PBF8049),
     audit(89-03-31,Farley), install(89-04-24,MR12.3-1031):
     Reinstated the check for create_branch_version_1 in order to retain
     binary compatibility.
                                                   END HISTORY COMMENTS */


/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

append: procedure;

/* Modified 85-04-01 by Keith Loepere for new access_audit_check_ep_. */
/* Modified 85-01-30 by Keith Loepere to get dtem right. */
/* Modified 84-02-11 by Greg Texada to reference the arguments correctly in retv entry */
/* Modified 84-12-14 by Keith Loepere to allow setting dir quota for dirs */
/* Modified 84-11-27 by EJ Sharpe to change access_audit_ arg list */
/* Modified 10/15/84 by Keith Loepere to explicitly activate dir being created.
   Also to prevent creation of upgraded MSFs.  Also for audit info.  Also for
   admin_gate_$create_branch_ */
/* Modified 1984-10-01 BIM to fix retv max_auth for ^ac_sw case. */
/* Modified 07/10/84 by Keith Loepere to use the new dc_find. */
/* Modified 04/02/84 by K. Loepere to restrict link pathnames to valid 7-bit ASCII characters. */
/* Modified 84-03-16 BIM to make retv work with AIM.
	  this includes TEMPORARY change to set soos on multi-class
	  objects retrieved. */
/* Modified 05/07/82 by J. Bongiovanni to fix bug in cross-retrieval */
/* Modified 02/15/82 by J. Bongiovanni to fix bug in duplicate uid check */
/* Modified 11/01/79 by Mike Grady to set sons lvid for retv case (used by adopt seg) */
/* Modified 02/19/79 by C. D. Tavares to set dir ex ring brackets and to correct several bad_ring_brackets err codes */
/* modified 6/77 by D. Vinograd to check for duplicate uids in volume retriever case */
/* modified 4/77 by M. Weaver to replace makeknown with makeknown_ */
/* modified by D. Vinograd 9/76 to add entry retv. This entry used by the volume
   retriever to append an entry structure passed in by the caller. */
/* modified by S.E. Barr 8/76 to use variable sized hash tables */
/* modified by R. Bratt May 31, 1976 to call find_$finished */
/* modified by L. Scheffler March 1976 to use info-only entry in dir_control_error */
/* modified by Larry Johnson March 1976 for appending master dirs */
/* modified by Bernard S. Greenberg, 4-24-75 for NSS */
/* modified by Kobziar 4-11-75 to filter unused bits from access class */
/* modified by Kobziar 10-20-74 to add new entry: create_branch */
/* modified by Kobziar on 6-20-74 to copy  access_class from parent to branch */
/* modified by Kobziar on 11-15-73 to take out "a" mode on segs */

/*
   append$branch: Creates a non directory branch in the hierarchy and places
   the current user on the acl with the specified mode.

   USAGE: call append$branch(directory_name, entry_name, access_mode, error_code)

   1. directory_name char(*) - - - directory path name of new branch
   2. entry_name char(*) - - - created branch's name
   3. access_mode fixed bin(5) - - - mode desired on the created branch
   4. error_code fixed bin(35) - - - file system error code (Output)

   Default values are:
   1. Ringbrackets set from users validation level.
   2. User id set to creator User id with tag = "*".
   3. Copy switch set to off.
   4. Bit count set to 0.

   append$link: Creates a link in a specified directory with a given name
   to an other specified segment.

   USAGE: call append$link(directory_name, entry_name, link_to_name, error_code)

   1. directory_name char(*) - - - directory path name of new link
   2. entry_name char(*) - - - created link name
   3. link_to_name char(*) - - - path name of segment to be linked to
   4. error_code fixed bin(17) - - - file system error code (Output)

   append$branchx: Creates either a directory or non directory entry as specified with
   all the attributes described below as specified.

   USAGE: call append$branhcx(directory_name, entry_name, access_mode, ringbrackets,
   user_id, directory_switch, copy_switch, bit_count,
   error_code)

   1. directory_name char(*) - - - directory path name of new branch
   2. entry_name char(*) - - - created branch's entry name
   3. acces_mode fixed bin(5) - - - mode desired on the created branch
   4. ringbrackets arry(3) - - - fixed bin(6) - - - ring brackets desired on the created branch
   5. user_id char(*) - - - user_id desired on the acl
   6. directory_switch fixed bin(1) - - - directory branch switch
   7. copy_switch fixed bin(1) - - - segment copy switch
   8. bit_count fixed bin(24) - - - segment length in bits
   9. error_code fixed bin(17) - - - file system error code (Output)

   append$master_dir: create a master directory for a logical volume.
   Called from ring 1 after setting things up with the vol registration stuff.

   USAGE: call append$master_dir(directory_name, entry_name, access_mode, ringbrackets,
   user_id, sons_lvid, error_code);

   1-5. Same as branchx
   6. sons_lvid bit (36) - - - logical vol ID for sons
   7. error_code fixed bin - - - error code (output)

   append$create_branch_: Allows the setting of the access class field in a branch and  and the setting of
   quota in new directories.  admin_create_branch_ is the same but allows creation in lower class dirs.

   USAGE: call append$create_branch_(directory_name, entry_name, arg_ptr, code)

   1. - 2. as in branchx
   3. arg_ptr  ptr - - - pointer to a create_branch_info as given in
					create_branch_info.incl.pl1
   4. error_code as above.
*/
%page;

/* Parameters */

dcl  a_arg_ptr			ptr parameter;
dcl  a_bitcnt			fixed bin (24) parameter;
dcl  a_code			fixed bin (35) parameter;
dcl  a_copysw			fixed bin (2) parameter;
dcl  a_dirname			char (*) parameter;
dcl  a_dirsw			fixed bin (1) parameter;
dcl  a_ename			char (*) parameter;
dcl  a_linkname			char (*) parameter;
dcl  a_mode			fixed bin (5) parameter;
dcl  a_retv_append_argp		ptr parameter;
dcl  a_ringbrack			(3) fixed bin (6) parameter;
dcl  a_sons			bit (36) parameter;
dcl  a_uid_path			(0:15) bit (36) aligned parameter;
dcl  a_userid			char (*) parameter;

/* static variable */
dcl  create_branch_version_1            fixed bin int static options (constant) init (1);

/* Variables */

dcl  ac_sw			bit (1) aligned;
dcl  acbr_version			fixed bin;
dcl  access_class			bit (72) aligned;
dcl  acl_count			fixed bin;
dcl  acl_start_ptr			ptr;
dcl  add_sw			bit (1);
dcl  admin_append			bit (1) aligned;
dcl  areap			ptr;
dcl  arg_ptr			ptr;
dcl  asize			fixed bin;
dcl  audit_eventflags		bit (36) aligned;
dcl  authp			ptr;
dcl  bcount			fixed bin;
dcl  bitcnt			fixed bin (24);
dcl  bmode			bit (3) aligned;
dcl  branch_sw			bit (1);
dcl  chase_sw			bit (1) aligned;
dcl  code				fixed bin (35);
dcl  copysw			fixed bin (1);
dcl  default_sw			bit (1);
dcl  dep				ptr;
dcl  dir_quota			fixed bin (18);
dcl  dirl				bit (1) aligned;
dcl  dirname			char (168);
dcl  dirp				ptr;
dcl  dirsw			fixed bin (1);
dcl  dtem				bit (36) aligned;
dcl  dumcode			fixed bin (35);
dcl  dummy			char (32) aligned;
dcl  ename			char (32);
dcl  ename_aligned			char (32) aligned;
dcl  i				fixed bin;
dcl  iacl_start_ptr			ptr;
dcl  iaclp			ptr;
dcl  1 initial_acl			aligned like input_acl;
dcl  level			fixed bin;
dcl  linkname			char (168) aligned;
dcl  llngth			fixed bin (18);
dcl  1 local_entry			like entry aligned;
dcl  max_access_authorization		bit (72) aligned;
dcl  1 mk_info			aligned like makeknown_info;
dcl  1 my_audit_user_info		aligned like audit_user_info;
dcl  n_iacls			fixed bin;
dcl  newuid			bit (36) aligned;
dcl  nwords			fixed bin;
dcl  parent_access_class		bit (72) aligned;
dcl  prevep			ptr;
dcl  prior_dir_acl_count		fixed bin;
dcl  priv_mqsw			bit (1) aligned;
dcl  project			char (32) aligned;
dcl  quota			fixed bin (18);
dcl  read_lock			bit (36) aligned;
dcl  retv				bit (1) aligned;
dcl  retv_cross_segment		bit (1) aligned;
dcl  ringbrack			(3) fixed bin (6);
dcl  segno			fixed bin;
dcl  1 service_acl			aligned,
       2 person			char (32) init ("*"),
       2 project			char (32) init ("SysDaemon"),
       2 tag			char (1) init ("*"),
       2 mode			bit (36) init ("101"b),
       2 exmode			bit (36) init ("0"b);
dcl  sons				bit (36) aligned;
dcl  sonsw			bit (1) aligned;
dcl  sp_sw			bit (1) aligned;
dcl  sysl				bit (1) aligned;
dcl  temp_b4			bit (4) aligned;
dcl  uid_path			(0:15) bit (36) aligned;
dcl  1 user_acl			aligned,
       2 person			char (32),
       2 project			char (32),
       2 tag			char (1),
       2 mode			bit (36) init ("111"b),
       2 exmode			bit (36) init ("0"b);
dcl  userid			char (32) aligned;
dcl  vtocx_temp			fixed bin;
dcl  xsize			fixed bin;

/* Based */

dcl  1 acbr			like create_branch_info based (arg_ptr) aligned;
dcl  1 input_acl			based aligned,
       2 person			char (32),
       2 project			char (32),
       2 tag			char (1),
       2 mode			bit (36),
       2 exmode			bit (36);

/* External */

dcl  active_all_rings_data$max_tree_depth external fixed bin;
dcl  active_hardcore_data$alloc_sizes	(6) external fixed bin;
dcl  active_hardcore_data$dir_arearp	ext fixed bin (35);
dcl  active_hardcore_data$dir_hdrsize	external fixed bin;
dcl  active_hardcore_data$elcsize	external fixed bin;
dcl  active_hardcore_data$ensize	external fixed bin;
dcl  active_hardcore_data$esize	external fixed bin;
dcl  active_hardcore_data$nalloc_sizes	external fixed bin;
dcl  error_table_$ai_restricted	external fixed bin (35);
dcl  error_table_$argerr		external fixed bin (35);
dcl  error_table_$invalid_mode	external fixed bin (35);
dcl  error_table_$invalid_project_for_gate external fixed bin (35);
dcl  error_table_$invalid_ring_brackets external fixed bin (35);
dcl  error_table_$lower_ring		external fixed bin (35);
dcl  error_table_$max_depth_exceeded	external fixed bin (35);
dcl  error_table_$namedup		external fixed bin (35);
dcl  error_table_$noalloc		external fixed bin (35);
dcl  error_table_$noentry		external fixed bin (35);
dcl  error_table_$unimplemented_version external fixed bin (35);
dcl  1 pds$access_authorization	aligned like aim_template external;
dcl  1 pds$access_name		aligned external,
       2 person			char (32),
       2 project			char (32),
       2 tag			char (1);
dcl  pds$max_access_authorization	bit (72) aligned external;
dcl  pds$processid			bit (36) aligned external;
dcl  sys_info$access_class_ceiling	external bit (72) aligned;
dcl  sys_info$default_dir_max_length	fixed bin (19) external;

/* Entries */

dcl  acc_name_$elements		entry (ptr, ptr, fixed bin (35));
dcl  acc_name_$encode		entry (ptr, ptr, fixed bin (35));
dcl  access_audit_check_ep_$self	entry (bit (36) aligned, bit (36) aligned, ptr) returns (bit (1));
dcl  access_audit_check_ep_$user	entry (bit (36) aligned, bit (36) aligned, ptr, bit (72) aligned, bit (36) aligned) returns (bit (1));
dcl  access_audit_$log_entry_ptr	entry (char (*), fixed bin, bit (36) aligned, bit (36) aligned, ptr, fixed bin (35), ptr, fixed bin (18), char (*));
dcl  access_audit_$log_entry_ptr_user	entry (char (*), fixed bin, bit (36) aligned, bit (36) aligned, ptr, fixed bin (35), ptr, fixed bin (18), ptr, char (*));
dcl  acl_$add_entry			entry (fixed bin, bit (36) aligned, ptr, ptr, bit (1), fixed bin (35));
dcl  acl_$del_acl			entry (fixed bin, bit (36) aligned, ptr);
dcl  acl_$list_entry		entry (fixed bin, bit (36) aligned, ptr, ptr, fixed bin, fixed bin (35));
dcl  aim_check_$equal		entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  aim_check_$greater		entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  aim_check_$greater_or_equal	entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  allocate_dir_ht_		entry (ptr, fixed bin, fixed bin (35));
dcl  check_gate_acl_		entry (ptr, bit (1) aligned, fixed bin, char (32) aligned, fixed bin (35));
dcl  create_vtoce			entry (ptr, bit (36), fixed bin (17), fixed bin (35));
dcl  delete_vtoce			entry (ptr, fixed bin (35));
dcl  fs_alloc$alloc			entry (ptr, fixed bin, ptr);
dcl  fs_alloc$free			entry (ptr, fixed bin, ptr);
dcl  fs_alloc$init			entry (ptr, fixed bin, ptr, fixed bin);
dcl  getuid			entry () returns (bit (36) aligned);
dcl  hash$in			entry (ptr, ptr, fixed bin (35));
dcl  hash$out			entry (ptr, ptr, ptr, fixed bin (35));
dcl  hash$search			entry (ptr, ptr, ptr, fixed bin (35));
dcl  level$get			entry returns (fixed bin);
dcl  lock$dir_unlock		entry (ptr);
dcl  makeknown_			entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  makeunknown_			entry (fixed bin, bit (36) aligned, bit (1) aligned, fixed bin (35));
dcl  mountedp			entry (bit (36) aligned) returns (fixed bin (35));
dcl  quota$append_mdir_set		entry (ptr, fixed bin (18), fixed bin (35));
dcl  quota$check			entry (ptr, fixed bin (18), fixed bin (35));
dcl  quota$qmove_mylock		entry (ptr, ptr, fixed bin (18), bit (1) aligned, fixed bin (35));
dcl  sum$dirmod			entry (ptr);
dcl  syserr$error_code		entry options (variable);
dcl  truncate$trentry		entry (ptr);
dcl  uid_path_util$get		entry (ptr, dim (0:15) bit (36) aligned, fixed bin (35));

/* Misc */

dcl  (addr, baseptr, bin, bit, clock, collate, divide, fixed, length, null, ptr, rel, rtrim, substr, unspec, verify) builtin;

dcl  bad_dir_			condition;
%page;
master_dir: entry (a_dirname, a_ename, a_arg_ptr, a_sons, a_uid_path, a_code);

	call setup;

	sons = a_sons;
	sonsw = "1"b;

	max_access_authorization = pds$max_access_authorization;
	go to cbcomm;

retv: entry (a_dirname, a_ename, a_arg_ptr, a_retv_append_argp, a_code);

	call setup;

	retv = "1"b;

	retv_append_argp = a_retv_append_argp;
	if retv_append_args.version ^= RETV_APPEND_ARGS_VERSION_1 then do;
	     a_code = error_table_$unimplemented_version;
	     return;
	end;

	level = retv_append_args.level;
	max_access_authorization = retv_append_args.max_access_authorization;

	arg_ptr = addr (a_arg_ptr -> acbr);		/* prevent indirections and tallys */
	acbr_version = acbr.version;
	if acbr_version < create_branch_version_1 |
	     acbr_version > create_branch_version_2 then go to arg_err;

	audit_user_info_ptr = addr (my_audit_user_info);
	unspec (audit_user_info) = "0"b;

	audit_user_info.version = audit_user_info_version_1;
	audit_user_info.user_id = acbr.userid;		/* we'll have to trust our caller for this, 
						the retriever is good about this */
	audit_user_info.process_id = "0"b;		/* unknown whether logged in */
	audit_user_info.authorization = retv_append_args.access_authorization; /* in non-retv case, access_mode gets from the pds */
	audit_user_info.authorization_range(2) = retv_append_args.max_access_authorization;
	audit_user_info.audit_flags = (36)"1"b;		/* audit anything until we get real audit_flags */
	audit_user_info.ring = retv_append_args.level;

	if retv_append_args.link then linkname = retv_append_args.ep -> link.pathname;
	else local_entry = retv_append_args.ep -> entry;

	if retv_append_args.link then goto join_link;

	retv_cross_segment = retv_append_args.cross_segment;
	goto cbcomm2;

admin_create_branch_: entry (a_dirname, a_ename, a_arg_ptr, a_code);

	call setup;

	admin_append = "1"b;

	max_access_authorization = sys_info$access_class_ceiling;
	go to cbcomm;

create_branch_: entry (a_dirname, a_ename, a_arg_ptr, a_code);

	call setup;

	max_access_authorization = pds$max_access_authorization;

cbcomm:	arg_ptr = addr (a_arg_ptr -> acbr);		/* prevent indirections and tallys */
	acbr_version = acbr.version;
	if acbr_version < create_branch_version_1 |
	     acbr_version > create_branch_version_2 then go to arg_err;

cbcomm2:	ac_sw = ^acbr.parent_ac_sw;			/* if no ac specified, have to get parent's entry point */
	if ac_sw then do;
	     access_class = acbr.access_class;		/* If ac was specified, copy it */
	     if ^aim_check_$greater_or_equal (max_access_authorization, access_class) then do;
		code = error_table_$ai_restricted;
		go to fin;
	     end;
	end;
	copysw = fixed (acbr.switches.copy_sw, 1);
	bmode = acbr.mode;
	dirsw = fixed (acbr.switches.dir_sw, 1);
	ringbrack (1) = acbr.rings (1);
	ringbrack (2) = acbr.rings (2);
	if dirsw = 1 then ringbrack (3) = ringbrack (2);	/* ignore third bracket */
	else ringbrack (3) = acbr.rings (3);
	userid = acbr.userid;
	bitcnt = acbr.bitcnt;
	chase_sw = acbr.switches.chase_sw;
	priv_mqsw = acbr.switches.priv_upgrade_sw;
	quota = acbr.quota;
	if acbr_version > create_branch_version_1 then dir_quota = acbr.dir_quota;
	go to comm2;

branchx: entry (a_dirname, a_ename, a_mode, a_ringbrack, a_userid, a_dirsw, a_copysw, a_bitcnt, a_code);

	call setup;

	if a_copysw = 0 then copysw = 0;
	else copysw = 1;
	if a_dirsw = 0 then dirsw = 0; else dirsw = 1;
	if dirsw = 0 then bmode = substr (bit (fixed (a_mode, 4), 4), 1, 3);
	else do;					/* map rewa to sma */
	     temp_b4 = bit (fixed (a_mode, 4), 4);
	     bmode = substr (temp_b4, 1, 1) || substr (temp_b4, 3, 2);
	end;

	userid = a_userid;				/* copy process group id */
	ringbrack = a_ringbrack;			/* pick up all three */
	if dirsw = 1 then ringbrack (3) = ringbrack (2);	/* except for dirs */
	bitcnt = a_bitcnt;				/* and bitcount */
comm2:
	branch_sw = "1"b;				/* indicate that we are appending a branch */
	default_sw = "0"b;				/* turn off default attribute switch */
	do i = 1 to 3;				/* check input brackets */
	     if ringbrack (i) >= 8 then go to inv_rb_err;
	     if ringbrack (i) < 0 then go to inv_rb_err;
	end;
	if ^retv then
	     level = level$get ();			/* Get current validation level */
	if ^retv | (retv & ^local_entry.dirsw) then
	     if ringbrack (1) < level then goto lower_ring_err;
	     else if ringbrack (1) > ringbrack (2)
		     | ringbrack (2) > ringbrack (3) then
		go to inv_rb_err;

	call acc_name_$elements (addr (userid), addr (user_acl), code); /* convert userid to 3 part access name */
	if code ^= 0 then go to arg_err;
	go to join;

branch: entry (a_dirname, a_ename, a_mode, a_code);

	call setup;

	branch_sw,				/* indicate that we are appending a branch */
	     default_sw = "1"b;			/* indicate that we will select the default attributes */

	dirsw,					/* Set dirsw off -- can't be a directory */
	     copysw,				/* And no copying */
	     bitcnt = 0;				/* Bit count starts at zero */

	user_acl.person = pds$access_name.person;	/* set up final acl to be caller with a tag of "*" */
	user_acl.project = pds$access_name.project;
	user_acl.tag = "*";
	level,					/* save validation level */
	     ringbrack (*) = level$get ();		/* set brackets to V, V, V */

	bmode = substr (bit (fixed (a_mode, 4), 4), 1, 3);/* strip off trap bit */
	go to join;

link: entry (a_dirname, a_ename, a_linkname, a_code);

	call setup;

	linkname = a_linkname;			/* copy and check linkname */
join_link:
	branch_sw = "0"b;				/* indicate that we are appending a link */
	if substr (linkname, 1, 1) ^= ">" then go to arg_err;

/* find length of linkname - allow embedded blanks */
	llngth = length (rtrim (linkname));
	if verify (substr (linkname, 1, llngth), collate ()) > 0 then go to arg_err; /* link must be all ascii */
join:
	dirl = "0"b;
	code = 0;					/* clear error code */
	if retv then authp = addr (user_acl);
	else authp = addr (pds$access_name);		/* get pointer to 3 part access name */

	dirname = a_dirname;			/* copy directory and entry name arguments */
	ename = a_ename;

	if branch_sw then do;			/* if appending a branch */

/* set up ACLS with proper mode */
/* convert fixed bin(5) mode into new modes */
	     if dirsw = 0 then user_acl.mode = bmode;

	     else do;
		user_acl.exmode = bmode;
		if (user_acl.exmode & "11"b) = "01"b then /* don't allow M without S access */
		     go to invalid_mode;
		service_acl.mode = "111"b;		/* set access field for directories */
		service_acl.exmode = "111"b;		/* set extended mode for .SysDaemon access */

	     end;
	end;

	if ^branch_sw then chase_sw = "0"b;		/* don't chase when adding links */

	if retv then do;
	     call dc_find$dir_for_retrieve_append
		(dirname, ename, bin (chase_sw, 1), audit_user_info_ptr, dep, dp, code);
	     if code ^= 0 then go to fin;
	     dirl = "1"b;
	end;
	else do;
	     if admin_append then
		call dc_find$dir_for_append_raw (dirname, ename, bin (chase_sw, 1), dep, dp, code);
	     else call dc_find$dir_for_append (dirname, ename, bin (chase_sw, 1), dep, dp, code);
	     if code ^= 0 then go to fin;
	     dirl = "1"b;
	end;

	if dep = null then parent_access_class = "0"b;	/* assume root at  0 access class */
	else do;
	     if branch_sw then parent_access_class = dep -> entry.access_class;
	     call lock$dir_unlock (ptr (dep, 0));
	     dep = null;
	end;

	code = 0;
	ename_aligned = ename;

	if branch_sw then do;			/* make sure not lower than parent */
	     if ac_sw then call check_aim_access;
	     else access_class = parent_access_class;	/* make it same as parent */
	end;

	if retv then do;				/* check for duplicate uids */
	     if ^retv_append_args.link then do;
		i = 0;
		bcount = dir.dir_count + dir.seg_count + dir.lcount;
		do ep = ptr (dp, dir.entryfrp) repeat (ptr (dp, entry.efrp)) while (rel (ep) ^= "0"b);
		     i = i + 1;
		     if i > bcount then signal bad_dir_;
		     if entry.uid = local_entry.uid then goto name_dup;
		end;
	     end;
	end;

	if dirsw = 1 & dir.tree_depth >= active_all_rings_data$max_tree_depth then do;
	     code = error_table_$max_depth_exceeded;
	     go to unlock;
	end;

	call hash$search (dp, addr (ename_aligned), ep, code); /* See if the entry is already there */
	if code = 0 then go to name_dup;		/* indicates that name already on another entry */
	if code ^= error_table_$noentry then signal bad_dir_; /* another code says that hash table is messed up */

	if ^branch_sw | (dirsw = 1) then code = 0;	/* Always ok to create links or dirs */
	else code = mountedp (dir.sons_lvid);		/* Can we create a VTOCE? */
	if code ^= 0 then go to unlock;

	areap = ptr (dp, dir.arearp);			/* start to allocate */
	dir.modify = pds$processid;

	if retv then newuid = local_entry.uid;
	else newuid = getuid ();			/* Get the unique ID */
	if branch_sw then do;			/* if appending a branch */
	     if dirsw = 1 then do;
		iacl_start_ptr = addr (dir.iacl (level).dir_frp); /* get ptr to dir Initial ACL for V */
		n_iacls = dir.iacl_count (level).dir;
	     end;
	     else do;
		iacl_start_ptr = addr (dir.iacl (level).seg_frp); /* get ptr to seg IACl at validation level */
		n_iacls = dir.iacl_count (level).seg;
		if ringbrack (2) ^= ringbrack (3) then	/* check for valid project if creating gate seg */
		     if level > 1 then do;		/* in rings greater than administrative ring */
			if retv then project = user_acl.project;
			else project = pds$access_name.project;
			if user_acl.project ^= project then
			     if user_acl.project ^= "SysDaemon" then do;
				code = error_table_$invalid_project_for_gate;
				go to unlock;
			     end;
			call check_gate_acl_ (iacl_start_ptr, "1"b, 0, dummy, code); /* check Initial ACL for project */
			if code ^= 0 then go to unlock;
		     end;
	     end;
	     xsize = active_hardcore_data$esize;	/* store size of an entry */
	     call fs_alloc$alloc (areap, xsize, ep);	/* allocate the entry */
	     if ep = null then go to alloc_err;
	     if retv then do;
		entry = local_entry;
		entry.acl_frp, entry.acl_brp = "0"b;
		entry.acle_count = 0;
		dtem = entry.dtem;			/* save for later */
	     end;
	     if dirsw = 1 then entry.type = DIR_TYPE;
	     else entry.type = SEG_TYPE;
	     entry.size = xsize;
	     entry.owner = dir.uid;

	     acl_count = 0;
	     acl_start_ptr = addr (entry.acl_frp);	/* fill in items before call to acl_ */
	     prior_dir_acl_count = dir.acle_total;	/* save total number of acl entries in directory */
						/* put SysDaemon on ACL */
	     if ^retv | retv_cross_segment then do;
		call acl_$add_entry (0, newuid, acl_start_ptr, addr (service_acl), add_sw, code);
		if code ^= 0 then go to cleanup_acl;

/* This loop adds acls to the branch.  (code = error_table_$argerr is set when the end of the acl thread is passed) */

		acl_count = 1;			/* add on Initial ACL */
		dir.acle_total = dir.acle_total + 1;
		iaclp = addr (initial_acl);
		do i = 1 by 1 while (code = 0);
		     call acl_$list_entry (n_iacls, dir.uid, iacl_start_ptr, iaclp, i, code);
		     if code = 0 then do;
			call acl_$add_entry (acl_count, newuid, acl_start_ptr, iaclp, add_sw, code);
			if code ^= 0 then goto cleanup_acl;
			if add_sw then do;		/* If actually added */
			     acl_count = acl_count + 1;
			     dir.acle_total = dir.acle_total + 1;
			end;
		     end;
		     else if code ^= error_table_$argerr then go to cleanup_acl;
		end;
						/* now put on ACL for user */
		if ^retv_cross_segment then do;
		     call acl_$add_entry (acl_count, newuid, acl_start_ptr, addr (user_acl), add_sw, code);
		     if code ^= 0 then goto cleanup_acl;
		end;
		if add_sw then do;
		     acl_count = acl_count + 1;
		     dir.acle_total = dir.acle_total + 1;
		end;
		entry.acle_count = acl_count;		/* set acl count for entry */
	     end;

	end;

	else do;					/* if appending a link, allocate the link */
	     nwords = active_hardcore_data$elcsize + 3 + divide (llngth + 3, 4, 17, 0); /* first get number of words for link */

/* find appropriate allocation size */
	     do i = active_hardcore_data$nalloc_sizes - 1 to 1 by -1
		while (nwords <= active_hardcore_data$alloc_sizes (i));
	     end;
	     xsize = active_hardcore_data$alloc_sizes (i + 1);

	     call fs_alloc$alloc (areap, xsize, ep);
	     if ep = null then go to alloc_err;
	     link.type = LINK_TYPE;
	     link.size = xsize;
	     link.pathname_size = llngth;
	     link.pathname = linkname;
	     link.owner = dir.uid;			/* Pathname size MUST be set for 'refer' to be correct */

	end;

	call acc_name_$encode (addr (entry.author), authp, code); /* set author */
	if code ^= 0 then go to cleanup_acl;

	np = addr (entry.primary_name);		/* first name is in the branch */
	entry.name_frp,				/* fill in name info before hashing */
	     entry.name_brp = rel (np);
	entry.nnames = 1;
	np -> names.entry_rp = rel (ep);
	np -> names.name = ename;
	np -> names.type = NAME_TYPE;
	np -> names.size = active_hardcore_data$ensize;
	np -> names.owner = newuid;

	call hash$in (dp, np, code);			/* have already checked for name dup */
	if code ^= 0 then goto cleanup_acl;

/* Fill in general entry info */

	entry.uid = newuid;				/* Fill in the unique ID */
          entry.dtem = substr (bit (fixed (clock, 52), 52), 1, 36);
	if ^branch_sw then dir.lcount = dir.lcount + 1;	/* link */
	else do;
	     entry.bs = "1"b;			/* Entry is a branch */
	     entry.per_process_sw = dir.per_process_sw;
	     entry.bc = bitcnt;			/* set bit count */
	     entry.dirsw = bit (dirsw, 1);		/* Can't append segs to segs, you know! */
	     entry.access_class = access_class & sys_info$access_class_ceiling;
	     entry.multiple_class = sp_sw;		/* indicates class higher than parent */

/**** Set the security oos for backup-retrieved multi-class segments.
       This is a temporary fix to circumvent the lack of information
       on authorization/max authorization in the volume dumper. */

	     if retv then if entry.multiple_class then do;
		     if ^pds$access_authorization.soos then entry.security_oosw = "1"b;
		end;
	     entry.master_dir = sonsw;

	     call acc_name_$encode (addr (entry.bc_author), authp, code); /* set bc author */
	     if code ^= 0 then go to make_err;

	     call uid_path_util$get (dp, uid_path, code); /* get uid pathname of parent */
	     if code ^= 0 then go to make_err;
	     uid_path (dir.tree_depth + 1) = entry.uid;	/* last component */

	     if ^retv then do;
		call create_vtoce (ep, entry.pvid, vtocx_temp, code);
		if code ^= 0 then go to make_err;	/* problems. */
		entry.vtocx = vtocx_temp;		/* Store in unal fld in branch */
		if dirsw = 1 then call setup_directory;
		else do;				/* link */
		     entry.ring_brackets (1) = bit (fixed (ringbrack (1), 3), 3);
		     entry.ring_brackets (2) = bit (fixed (ringbrack (2), 3), 3);
		     entry.ring_brackets (3) = bit (fixed (ringbrack (3), 3), 3);
		     entry.copysw = bit (copysw, 1);	/* copy sw */
		     dir.seg_count = dir.seg_count + 1; /* and update segment count in directory */
		end;
	     end;
	     else do;				/* retv case. */
		if retv_cross_segment then do;
		     call create_vtoce (ep, entry.pvid, vtocx_temp, code);
		     if code ^= 0 then goto make_err;
		     entry.vtocx = vtocx_temp;
		end;
		if dirsw = 1 then do;
		     dir.dir_count = dir.dir_count + 1;
		     if ^entry.master_dir then
			entry.sons_lvid = dir.sons_lvid; /* propagate the correct sons lvid */
		end;
		else dir.seg_count = dir.seg_count + 1;
	     end;
	end;

	if dir.entryfrp = ""b then
	     do;					/* first entry in directory */
	     dir.entryfrp, dir.entrybrp = rel (ep);
	     entry.efrp, entry.ebrp = ""b;
	end;
	else do;
	     prevep = ptr (ep, dir.entrybrp);		/* get pointer to previous entry */
	     entry.ebrp = rel (prevep);		/* set back pointer of entry */
	     prevep -> entry.efrp = rel (ep);		/* set forward pointer of prev. entry */
	     entry.efrp = ""b;			/* set forward pointer of entry */
	     dir.entrybrp = rel (ep);			/* reset dir rel back pointer */
	end;


	if retv then entry.dtem = dtem;
	dir.modify = "0"b;
	call sum$dirmod (dp);			/* We've modified this directory */

	audit_eventflags = "0"b;
	addr (audit_eventflags) -> audit_event_flags.grant = "1"b;
	if retv then				/* audit the new object */
	     if access_audit_check_ep_$user
		(audit_eventflags, access_operations_$fs_obj_create, ep, audit_user_info.authorization, audit_user_info.audit_flags) then
		call access_audit_$log_entry_ptr_user
		     ("append", level, audit_eventflags, access_operations_$fs_obj_create, ep, 0, null, 0, audit_user_info_ptr, "");
	     else ;
	else if access_audit_check_ep_$self
		(audit_eventflags, access_operations_$fs_obj_create, ep) then
	     call access_audit_$log_entry_ptr
		("append", level, audit_eventflags, access_operations_$fs_obj_create, ep, 0, null, 0, "");

	call dc_find$finished (dp, dirl);

fin:
	a_code = code;

	return;

arg_err:
	code = error_table_$argerr; go to fin;
lower_ring_err:
	code = error_table_$lower_ring; goto fin;
inv_rb_err:
	code = error_table_$invalid_ring_brackets; go to fin;
invalid_mode:
	code = error_table_$invalid_mode; go to fin;
name_dup:
	code = error_table_$namedup; go to unlock;
alloc_err:
	code = error_table_$noalloc; go to unlock;
free_vtoce:
	call delete_vtoce (ep, dumcode);
	if dumcode ^= 0 then call syserr$error_code (4, dumcode, "append: err from delete_vtoce for ^a>^a:", dirname, ename);
make_err:
	call hash$out (dp, addr (ename_aligned), np, dumcode);
	if dumcode ^= 0 then call syserr$error_code (4, dumcode, "append: error from hash$out for ^a>^a:", dirname, ename);
cleanup_acl:
	if branch_sw then do;
	     call acl_$del_acl (acl_count, newuid, acl_start_ptr);
	     dir.acle_total = prior_dir_acl_count;	/* restore the acl count in the directory */
	end;
	call fs_alloc$free (areap, xsize, ep);
unlock:
	if dep ^= null then call lock$dir_unlock (ptr (dep, 0));
	dir.modify = "0"b;
	call dc_find$finished (dp, dirl);
	go to fin;
%page;
check_aim_access: proc;

	if aim_check_$greater (access_class, parent_access_class) then do;
	     if dirsw = 1 then do;			/* see if privileged oos creation */
		if quota <= 0 then if level > 1 then goto ai_err;
		     else if ^priv_mqsw then goto ai_err;

		if bitcnt ^= 0 then if level > 1 then goto ai_err; /* no upgraded non-multiclass MSFs */
		sp_sw = "1"b;			/* this sets entry.multiple_class */
	     end;
	     else do;				/* will be a multiclass segment */
		if ringbrack (3) > 1 then go to ai_err; /* can only create multi class seg from ring 1 */
		if priv_mqsw then sp_sw = "1"b;
		else go to ai_err;			/* wasn't reall wanted, wrong access class passed */
	     end;
	end;
	else if ^aim_check_$equal (access_class, parent_access_class) then do;
ai_err:	     code = error_table_$ai_restricted;		/* ok to return as have at least append mode */
	     goto unlock;
	end;

     end check_aim_access;

setup: proc;

	ac_sw = "0"b;
	admin_append = "0"b;
	chase_sw = "1"b;
	dir_quota = 0;
	priv_mqsw = "0"b;
	quota = 0;
	read_lock = "0"b;
	retv = "0"b;
	retv_cross_segment = "0"b;
	sonsw = "0"b;
	sp_sw = "0"b;
	sysl = "0"b;
	return;
     end setup;
%page;

/* This procedure fills in the directory header and moves quota down. */

setup_directory: proc;

	if sonsw then entry.sons_lvid = sons;		/* Master dir? */
	else entry.sons_lvid = dir.sons_lvid;		/* if not, inherit */
						/* set extended rb, normal rb are 0,0,0 */
	entry.ex_ring_brackets (1) = bit (bin (ringbrack (1), 3), 3);
	entry.ex_ring_brackets (2) = bit (bin (ringbrack (2), 3), 3);

	if ^sonsw then do;
	     call quota$check (ep, quota, code);	/* check if quota can take quota more pages */
	     if code ^= 0 then go to free_vtoce;
	end;

/* make the new directory segment known */
/* Turn the modify switch OFF in the parent while initializing the inferior directory. Note that there is a window
   until it is turned on again during which the modify   switch is OFF although the operation is not finished */

	dir.modify = "0"b;

	unspec (mk_info) = "0"b;
	mk_info.uid = entry.uid;
	mk_info.entryp = ep;
	mk_info.dirsw = "1"b;
	mk_info.allow_write = "1"b;
	mk_info.activate = "1"b;
	dirp = null;
	call makeknown_ (addr (mk_info), segno, (0), code);
	if code ^= 0 then go to free_vtoce;
	dirp = baseptr (segno);

	unspec (dirp -> dir) = "0"b;			/* Zero the header */
	dirp -> dir.type = DIR_HEADER_TYPE;		/* Fill in constants */
	dirp -> dir.size = active_hardcore_data$dir_hdrsize;
	dirp -> dir.version_number = version_number_2;
	dirp -> dir.owner = dir.uid;
	dirp -> dir.uid = entry.uid;			/* Fill in the unique id */
	dirp -> dir.arearp = bit (fixed (active_hardcore_data$dir_arearp, 18), 18);
	dirp -> dir.pvid = entry.pvid;
	dirp -> dir.per_process_sw = entry.per_process_sw;
	dirp -> dir.sons_lvid = entry.sons_lvid;
	dirp -> dir.master_dir = entry.master_dir;
	if entry.master_dir then dirp -> dir.master_dir_uid = entry.uid;
	else dirp -> dir.master_dir_uid = dir.master_dir_uid; /* Inherit */
	dirp -> dir.access_class = entry.access_class;
	dirp -> dir.vtocx = entry.vtocx;
	asize = sys_info$default_dir_max_length - fixed (dirp -> dir.arearp, 18);
	call fs_alloc$init (ptr (dirp, dirp -> dir.arearp), asize,
	     addr (active_hardcore_data$alloc_sizes), active_hardcore_data$nalloc_sizes);

	call allocate_dir_ht_ (dirp, 0, (0));
	dirp -> dir.tree_depth = dir.tree_depth + 1;	/* set tree depth */

	if quota > 0 then				/* Set quota */
	     if ^sonsw then do;			/* non-master dir, move */
		call quota$qmove_mylock (ep, dirp, quota, "0"b, code);
		if code ^= 0 then do;		/* drop this hot potato */
						/* used to unlock new dir here */
qerr:		     call truncate$trentry (ep);	/* and header page */
		     call makeunknown_ (segno, "0"b, ("0"b), dumcode);
		     if dumcode ^= 0 then call syserr$error_code (4, dumcode,
			     "append: makeunknown_ err after quota err for ^a>^a:", dirname, ename);
		     go to free_vtoce;		/* leave in kst if makeunknown_ fails */
		end;
	     end;
	     else do;				/* master dir. */
		call quota$append_mdir_set (ep, quota, code); /* set the quuota */
		if code ^= 0 then go to qerr;
	     end;
	else if priv_mqsw & ac_sw then do;		/* path for reloader to create upgraded dirs with no quota */
	     if aim_check_$greater (access_class, parent_access_class) then
		ep -> entry.security_oosw = "1"b;	/* by leaving entry oosw */
	end;

	if dir_quota > 0 then do;			/* Set quota */
	     call quota$qmove_mylock (ep, dirp, dir_quota, "1"b, code);
	     if code ^= 0 then go to qerr;		/* drop this hot potato */
	end;

	call sum$dirmod (dirp);			/* indicate that it has been modified */
	call makeunknown_ (segno, "0"b, ("0"b), code);
	if code ^= 0 then call syserr$error_code (4, code, "append: error from makeunknown_ for ^a>^a:", dirname, ename);

	dir.modify = pds$processid;			/* Turn modify sw back on again to complete the creation
						   of the branch. This call will terminate the window
						   referred to above and created at the beginning of the
						   initialization of the inferior directory. */

	dir.dir_count = dir.dir_count + 1;		/* up directory count in parent */
	if sonsw then a_uid_path = uid_path;		/* return uid pathname to ring 1 */

	return;

     end setup_directory;
%page; %include access_audit_eventflags;
%page; %include access_audit_user_info;
%page; %include aim_template;
%page; %include create_branch_info;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include dir_ht;
%page; %include dir_link;
%page; %include dir_name;
%page; %include fs_obj_access_codes;
%page; %include fs_types;
%page; %include makeknown_info;
%page; %include null_addresses;
%page; %include retv_append_args;
%page;

/* BEGIN MESSAGE DOCUMENTATION


   Message:
   append: error from delete_vtoce for PATH: ERROR_MESSAGE

   S:	$log

   T:	$run

   M:	While deleting a VTOC entry
   to clean up an unsuccessful attempt to create an branch,
   append got an error.
   $err

   A:	$note


   Message:
   append: error from hash$out for PATH: ERROR_CODE

   S:	$log

   T:	$run

   M:	While removing a name
   to clean up an unsuccessful attempt to create a branch,
   append got an error.
   $err

   A:	$note


   Message:
   append: makeunknown_ err after quota err for PATH: ERROR_CODE

   S:	$log

   T:	$run

   M:	During the creation of a new directory, append encountered an error moving quota.
   While cleaning up from this error a further error was encountered.
   The system continues to operate.
   $err

   A:	$note


   Message:
   append: error from makeunknown_ for PATH: ERROR_CODE

   S:	$log

   T:	$run

   M:	Append made the new directory PATH unknown after initializing its header.
   While doing so it encountered an error.
   $err

   A:	$note

   END MESSAGE DOCUMENTATION */

     end append;
