/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-05-01,Parisek), approve(88-05-27,MCR7907),
     audit(88-06-02,Fawcett), install(88-09-27,MR12.2-1122):
     Changed to NOT set pc_vacating in the pvte. This flag would inhibit any
     new pages being withdrawed from this pv. The concept of inhibit is to
     inhibit any new segments. If pc_vacating is set and a segment like the
     kst needs one more page, the system loop trying to get a page on the pv.
     The kst cannot be moved.
                                                   END HISTORY COMMENTS */


/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

vacate_pv: proc (a_pvtx, a_pvid, a_code);


/* vacate_pv     Bernard Greenberg 05/24/76

   Procedure to segmove all of the segments on a given physical volume.
   Must be driven by pathname from outer ring. */

/* modified 4/77 by M. Weaver to change calling sequences to makeknown_ and terminate_ */
/* Modified March 1982, J. Bongiovanni, for new PVTE, demand_segmove */
/* Modified 84-10-17, BIM, TEMPORARILY set pvte.pc_vacating */
/* Modified July 1984 by Keith Loepere to use the new dc_find. */
/* Modified November 1984 by Keith Loepere for auditing. */

/* Parameters */

dcl  a_code			fixed bin (35);
dcl  a_dirname			char (*);
dcl  a_ename			char (*);
dcl  a_pvid			bit (36) aligned;
dcl  a_pvtx			fixed bin;
dcl  a_segptr			ptr;

/* External */

dcl  error_table_$argerr		fixed bin (35) ext;
dcl  error_table_$bad_index		fixed bin (33) ext;
dcl  error_table_$segknown		fixed bin (35) ext;
dcl  pvt$n_entries			fixed bin ext;

/* Variables */

dcl  called_find			bit (1) aligned init ("0"b);
dcl  code				fixed bin (35);
dcl  dir				char (168);
dcl  dp				ptr;
dcl  ent				char (32);
dcl  1 mkinf			aligned like makeknown_info;
dcl  pvid				bit (36) aligned;
dcl  pvtx				fixed bin;
dcl  segno			fixed bin;
dcl  segptr			ptr;

/* Entries */

dcl  activate			entry (ptr, fixed bin (35)) returns (ptr);
dcl  lock$dir_unlock		entry (ptr);
dcl  makeknown_			entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  makeunknown_			entry (fixed bin, bit (36) aligned, bit (1) aligned, fixed bin (35));
dcl  segment_mover$demand_segmove	entry (ptr, ptr, fixed bin, fixed bin (35));

/* Misc */

dcl  (addr, ptr, unspec)		builtin;
%page;

/* These entries are not protected by any form of lock. It is assumed that the
   caller is cooperating with the demounter in the setting of these bits. */
	pvtx = a_pvtx;
	pvt_arrayp = addr (pvt$array);
	pvid = a_pvid;
	code = 0;
	if pvtx <= 0 | pvtx > pvt$n_entries then do;
	     a_code = error_table_$bad_index;
	     return;
	end;
	pvtep = addr (pvt_array (pvtx));		/* Address pvte */

	if pvte.being_demounted | (pvte.pvid ^= pvid) then
	     code = error_table_$argerr;
	else if pvte.storage_system & pvte.used & pvid = pvte.pvid then
	     pvte.vacating = "1"b;
	else code = error_table_$argerr;

	a_code = code;
	return;

stop_vacate: entry (a_pvtx, a_pvid, a_code);

	pvt_arrayp = addr (pvt$array);
	pvid = a_pvid;
	pvtx = a_pvtx;
	code = 0;
	if pvtx <= 0 | pvtx > pvt$n_entries then do;
	     a_code = error_table_$bad_index;
	     return;
	end;
	pvtep = addr (pvt_array (pvtx));
	if pvte.used & pvte.storage_system & pvte.vacating & (pvte.pvid = pvid) then
	     pvte.vacating = "0"b;
	else code = error_table_$argerr;
	a_code = code;
	return;
%page;
move_seg_file: entry (a_dirname, a_ename, a_code);

/* This entry starts a segmove on a seg given the name */

	dir = a_dirname;
	ent = a_ename;
	code = 0;

	call dc_find$obj_status_write_priv (dir, ent, DC_FIND_CHASE, FS_OBJ_SEG_MOVE, ep, code);
	if code ^= 0 then go to finale;
	called_find = "1"b;
	go to join;				/* Merge with seg entry */

move_seg_seg: entry (a_segptr, a_code);

	segptr = a_segptr;
	code = 0;
	call dc_find$obj_status_write_priv_ptr (segptr, FS_OBJ_SEG_MOVE, ep, code);
	if code ^= 0 then go to finale;

join:	dp = ptr (ep, 0);

	makeknown_infop = addr (mkinf);		/* Get local makeknown info */
	unspec (makeknown_info) = ""b;		/* Clear all things we don't know about */
	makeknown_info.uid = entry.uid;
	makeknown_info.dirsw = entry.dirsw;
	makeknown_info.entryp = ep;			/* Set up for makeknown */
	call makeknown_ (makeknown_infop, segno, (0), code);
	if code = 0 | code = error_table_$segknown then do;
	     astep = activate (ep, code);
						/* Get AST entry */
	     if code = 0 then do;
		aste.pack_ovfl = "1"b;		/* Cause seg mover to do thing */
		call segment_mover$demand_segmove (astep, ep, segno, code);
	     end;
	     call makeunknown_ (segno, "0"b, ("0"b), (0));
	end;
	if called_find then call dc_find$finished (dp, "1"b);
	else call lock$dir_unlock (dp);
finale:	a_code = code;
	return;
%page; %include aste;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include fs_obj_access_codes;
%page; %include makeknown_info;
%page; %include pvte;
     end;
