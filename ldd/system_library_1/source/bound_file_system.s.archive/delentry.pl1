/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

delentry: proc;

/* modified by Kobziar on 11-15-73 not to require "w" on seg in order to delete */
/* last modified April 1975 by R. Bratt for new RNT/KST system             */
/* last modified Feb. 1976 by R. Bratt for pam flush     */
/* last modified April 20, 1976 by R. Bratt to check mountedness of volume */
/* modified 760324 by L. Scheffler to fix call to dir_control_error to call with dp, not ep */
/* last modified April 24, 1976 by R. Bratt to swallow known_in_other_rings code from makeunknown */
/* last modified June 1, 1976 by R. Bratt to call find_$finished when done   */
/* Modified by D.Vinograd 6/76 to add entry retv, used by volume retriever, which deletes without access checking */
/* Modified 4/77 by M. Weaver to replace makeknown by makeknown_ */
/* Modified April 1979 by D. Spector to remove logging of privileged deletions */
/* Modified June 1981 by J. Bongiovanni to call pathname_am$clear when deleting
      per-process directory */
/* Modified June 30 1981 by M. Pierret to remove access checking for priviledged entry.*/
/* Modified 2/82 BIM for new name of side-door dir unlocker. */
/* Modified 9/83 E. N. Kittlitz to handle makeknown_ returning connection_fail */
/* Modified 6/84 Keith Loepere to use the new dc_find. */
/* Modified 10/84 Keith Loepere for auditing of deletions. */
/* Modified 84-11-27 to change access_audit_ arg lists */
/* Modified 85-04-01 Keith Loepere for new access_audit_check_ep_. */
/* Modified 85-05-08 EJ Sharpe: renamed priv_duid to duid_mdir_priv, added duid_mdir entry */
/* Modified 85-05-15 EJ Sharpe: fix so hpdl can delete master dirs */

/*
   The delentry routine implements the user callable primitives for deleting
   an entry in a directory.

   Entry: delentry$dfile

   This entry deletes the entry designamed by the directory pathname, dirname,
   and the entry name, ename.

   Usage: call delentry$dfile (dirname, ename, code);

   1) dirname (character (168))		parent directory pathname (Input)

   2) ename (character(32)			entryname to be deleted (Input)

   3) code (fixed bin)			return error code (Output)


   Entry: delentry$dseg

   This entry deletes the entry designated by the pointer sp.

   Usage: call delentry$dseg (sp, code);

   1) sp (pointer)				pointer to segment to be deleted (Input)

   2) code (fixed bin)			error code (Output)

   Note:  If the entry is a segment, then the contents of the segment are deleted

   before the entry is deleted.  If it is a directory entry then  an error code is returned and
   del_dir_tree must be called.
   */

/* Parameters */

dcl  a_code			fixed bin (35) parameter;
dcl  a_dirname			char (*) parameter;
dcl  a_ename			char (*) parameter;
dcl  a_ep				ptr parameter;
dcl  a_sp				ptr parameter;
dcl  a_trp			fixed bin (71) parameter; /* to return time-record product */
dcl  a_uidpath			(0:15) bit (36) aligned parameter;

/* Variables */

dcl  acl_count			fixed bin;
dcl  aclep			ptr;
dcl  areap			ptr;
dcl  asize			fixed bin;
dcl  audit_eventflags		bit (36) aligned;
dcl  code				fixed bin (35);
dcl  damaged			bit (1) init ("0"b);/* TRUE if dir uid is 0 */
dcl  dirl				bit (1) init ("0"b);
dcl  dirname			char (168);
dcl  e_sw				fixed bin;
dcl  ename			char (32);
dcl  ignore			fixed bin (35);
dcl  1 mk_info			aligned like makeknown_info;
dcl  mkunk_uid			bit (36) aligned init ("0"b);
dcl  ncnt				fixed bin;
dcl  nnames			fixed bin (18);
dcl  nrp				bit (18) aligned;
dcl  onp				ptr;
dcl  priv_entry			bit (1) init ("0"b);
dcl  pvid				bit (36) aligned;
dcl  1 qcell			like quota_cell aligned automatic;
dcl  ring				fixed bin;
dcl  seg_uid			bit (36) aligned;
dcl  segl				bit (1) init ("0"b);
dcl  segno			fixed bin;
dcl  segptr			ptr init (null);
dcl  sp				ptr;
dcl  trp				fixed bin (71);
dcl  type				fixed bin;
dcl  uidpath			(0:15) bit (36) aligned;
dcl  vtocx			fixed bin;

/* Constants */

dcl  directory			init (2) fixed bin static;
dcl  link_br			init (0) fixed bin static;
dcl  file				init (0) fixed bin static;
dcl  read_lock			bit (36) aligned init ("0"b);
dcl  retv				init (3) fixed bin static;
dcl  seg				init (1) fixed bin static;
dcl  segment			init (1) fixed bin static;
dcl  uid_mdir			init (2) fixed bin static;

/* External */

dcl  active_hardcore_data$ensize	fixed bin external;
dcl  active_hardcore_data$esize	fixed bin external;
dcl  error_table_$copy_sw_on		fixed bin (35) external;
dcl  error_table_$dirseg		fixed bin (35) external;
dcl  error_table_$fulldir		fixed bin (35) external;
dcl  error_table_$infcnt_non_zero	fixed bin (35) external;
dcl  error_table_$invalidsegno	fixed bin (35) external;
dcl  error_table_$known_in_other_rings	fixed bin (35) external;
dcl  error_table_$lower_ring		fixed bin (35) external;
dcl  error_table_$master_dir		fixed bin (35) external;
dcl  error_table_$safety_sw_on	fixed bin (35) external;
dcl  error_table_$seg_unknown		fixed bin (35) external;
dcl  error_table_$segknown		fixed bin (35) external;
dcl  error_table_$vtoce_connection_fail fixed bin (35) external; ;
dcl  pds$access_authorization		bit (72) aligned external;
dcl  pds$process_group_id		char (24) ext;
dcl  pds$processid			bit (36) aligned ext;

/* Entries */

dcl  acc_name_$delete		entry (ptr);
dcl  access_audit_check_ep_$self	entry (bit (36) aligned, bit (36) aligned, ptr) returns (bit (1));
dcl  access_audit_$log_entry_ptr	entry (char (*), fixed bin, bit (36) aligned, bit (36) aligned, ptr, fixed bin (35), ptr, fixed bin (18), char (*));
dcl  acl_$del_acl			entry (fixed bin, bit (36) aligned, ptr);
dcl  aim_check_$equal		entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  delete_vtoce			entry (ptr, fixed bin (35));
dcl  fs_alloc$free			entry (ptr, fixed bin, ptr);
dcl  hash$out			entry (ptr, ptr, ptr, fixed bin (35));
dcl  level$get			entry returns (fixed bin);
dcl  lock$dir_lock_write		entry (ptr, fixed bin (35));
dcl  lock$dir_unlock		entry (ptr);
dcl  lock$dir_unlock_given_uid	entry (bit (36) aligned);
dcl  makeknown_			entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  makeunknown_			entry (fixed bin, bit (36) aligned, bit (1) aligned, fixed bin (35));
dcl  mountedp			entry (bit (36) aligned) returns (fixed bin (35));
dcl  pathname_am$clear		entry (fixed bin (17));
dcl  pathname_am$flush		entry (bit (36) aligned);
dcl  sum$dirmod			entry (ptr);
dcl  syserr			entry options (variable);
dcl  syserr$error_code		entry options (variable);
dcl  terminate_$id			entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  vtoc_attributes$get_quota	entry (bit (36) aligned, bit (36) aligned, fixed bin, ptr, fixed bin, fixed bin (35));

/* Misc */

dcl  (addr, fixed, ptr, rel, null, baseptr, unspec) builtin;

dcl  bad_dir_			condition;
dcl  seg_fault_error		condition;
%page;
salv_delete_branch: entry (a_ep, a_code);		/* Make branch go awayy */

	ep = a_ep;
	dp = ptr (ep, 0);
	dirl = "0"b;				/* Don't unlock dir */
	code = 0;
	damaged = "1"b;				/* Couldnt get inferior dir */
	segptr = null;				/* didn't touch inferior */
	segl = "0"b;				/* or lock it */
	if ^entry.bs then type = link_br;
	else if entry.dirsw then type = directory;
	else type = segment;
	go to remove;				/* Remove the branch */

retv: entry (a_dirname, a_ename, a_code);

	e_sw = retv;
	goto set_code;


priv_dfile: entry (a_dirname, a_ename, a_code);
	priv_entry = "1"b;

dfile: entry (a_dirname, a_ename, a_code);
	e_sw = file;				/* indicate through which entry point entered */

set_code: code = 0;					/* clear return status code */
	dirname = a_dirname;			/* copy arguments */
	ename = a_ename;

	if e_sw ^= retv & ^priv_entry then call dc_find$obj_delete (dirname, ename, DC_FIND_NO_CHASE, ep, code);
	else call dc_find$obj_delete_priv (dirname, ename, DC_FIND_NO_CHASE, ep, code); /* get ptr to entry + lock dir for writing */
	if code ^= 0 then go to ret;
	go to common;


dseg: entry (a_sp, a_code);

	code = 0;					/* clear return status code */
	e_sw = seg;				/* indicate through entry point we entered */
	sp = a_sp;				/* copy arg */
	call dc_find$obj_delete_ptr (sp, ep, code);	/* get ptr to entry + lock for write */
	if code ^= 0 then go to ret;
	go to common;

duid_mdir_priv: entry (a_uidpath, a_trp, a_code);		/* entry to delete given uidpathname */

	e_sw = uid_mdir;				/* name type entry */
	uidpath = a_uidpath;			/* copy path */
	call dc_find$obj_delete_priv_uid (uidpath, dirname, ename, ep, code); /* find the thing */
	if code ^= 0 then go to ret;
	priv_entry = "1"b;
	trp = 0;
	goto common;

duid_mdir: entry (a_uidpath, a_trp, a_code);		/* entry to delete given uidpathname */

	e_sw = uid_mdir;				/* name type entry */
	uidpath = a_uidpath;			/* copy path */
	call dc_find$obj_delete_uid (uidpath, dirname, ename, ep, code); /* find the thing */
	if code ^= 0 then go to ret;
	trp = 0;

common:
	dp = ptr (ep, 0);
	dirl = "1"b;
	if ^ep -> entry.bs then do;			/* link case */
	     type = link_br;			/* set type of entry */
	     go to remove;
	end;
	else if ^ep -> entry.dirsw then type = segment;	/* non-directory branch */
	else type = directory;			/* directory branch */

	if e_sw ^= retv & ^priv_entry then do;
	     ring = level$get ();			/* get validation level */
	     if (type = segment & ring > fixed (ep -> entry.ring_brackets (1), 3)) |
		(type ^= segment & ring > fixed (ep -> entry.ex_ring_brackets (1), 3)) then do;
		code = error_table_$lower_ring;	/* ringbrackets must be consistent with validation level */
		go to finale;
	     end;

	     if entry.copysw then do;			/* branch cannot be deleted if copy on */
		code = error_table_$copy_sw_on;
		go to finale;
	     end;
	     if entry.safety_sw then do;		/* branch may not be deleted if safety switch on */
		code = error_table_$safety_sw_on;
		go to finale;
	     end;
	end;
						/* If ename is a directory branch, be sure there are */
	if type = directory then do;			/* no entries in that directory before deleting it */
	     if e_sw = seg then do;			/* Forbid use of ptr entry */
		code = error_table_$dirseg;
		go to finale;
	     end;
	     seg_uid = entry.uid;			/* Make sure nobody deletes it */
	     segptr = null;
	     on seg_fault_error begin;
		damaged = "1"b;
		goto dir_glop;
	     end;
	     unspec (mk_info) = "0"b;
	     mk_info.uid = seg_uid;
	     mk_info.entryp = ep;
	     mk_info.dirsw = "1"b;
	     mk_info.allow_write = "1"b;
	     mk_info.activate = "1"b;
	     call makeknown_ (addr (mk_info), segno, (0), code);
	     if code = 0 | code = error_table_$segknown then
		segptr = baseptr (segno);
	     else if code = error_table_$vtoce_connection_fail then damaged = "1"b;
	     else goto finale;
	     call dc_find$finished (dp, "1"b);		/* unlock and unreference (initiated dir will hold parent) - allows seg_fault to work */
	     dirl = "0"b;
	     if damaged then goto dir_glop;		/* skip segfault on next statement */

	     if segptr -> dir.uid = "0"b then do;	/* If the directory's UID is 0 we cant lock it */
		call syserr (4, "delentry: deleting damaged dir ^a>^a for ^a",
		     dirname, ename, pds$process_group_id);
		damaged = "1"b;			/* .. but then, nobody else can either */
	     end;
	     else do;
		call lock$dir_lock_write (segptr, code);/* Lock the dir to be deleted */
		if code ^= 0 then go to finale;
		segl = "1"b;
	     end;
dir_glop:	     revert seg_fault_error;
	     if e_sw = seg then call dc_find$obj_delete_ptr (sp, ep, code); /* refind dir */
	     else if e_sw = retv | priv_entry then call dc_find$obj_delete_priv (dirname, ename, DC_FIND_NO_CHASE, ep, code);
	     else call dc_find$obj_delete (dirname, ename, DC_FIND_NO_CHASE, ep, code);
	     if code ^= 0 then do;
		if segptr ^= null then do;
		     call lock$dir_unlock (segptr);	/* Gack. How does this happen */
		     call makeunknown_ (segno, "0"b, ("0"b), ignore); /* .. ayway cleanup */
		end;
		go to ret;
	     end;
	     dp = ptr (ep, 0);			/* Regenerate dp just in case */
	     dirl = "1"b;
	     if seg_uid ^= entry.uid then do;		/* Check that our access check above .. */
		code = error_table_$invalidsegno;	/* .. hasn't been interfered with */
		go to finale;			/* nasty */
	     end;
	     if ^damaged then do;			/* Various validity checks. skip for bad dir */
		if segptr -> dir.master_dir then
		     if e_sw ^= uid_mdir & ^priv_entry then do;
			code = error_table_$master_dir; /* Do not delete master directory */
			go to finale;
		     end;
		if segptr -> dir.seg_count ^= 0	/* check if directory has any branches */
		     | segptr -> dir.dir_count ^= 0
		     | segptr -> dir.lcount ^= 0 then do;

		     code = error_table_$fulldir;
		     if /* tree */ ^aim_check_$equal (pds$access_authorization, segptr -> dir.access_class) then /* audit possible covert channel */
			if ^addr (pds$access_authorization) -> aim_template.privileges.dir then do;
			     audit_eventflags = "0"b;
			     addr (audit_eventflags) -> audit_event_flags.cc_10_100 = "1"b;
			     if access_audit_check_ep_$self (audit_eventflags, access_operations_$fs_obj_delete, ep) then
				call access_audit_$log_entry_ptr
				     ("delentry", level$get (), audit_eventflags, access_operations_$fs_obj_delete, ep, code, null, 0, "");
			end;
		     go to finale;
		end;
		if e_sw = uid_mdir then do;		/* caller wants a time record product */
		     pvid = entry.pvid;
		     vtocx = entry.vtocx;
		     qcp = addr (qcell);
		     call vtoc_attributes$get_quota (seg_uid, pvid, vtocx, qcp, 0, code);
		     if code = 0 then trp = quota_cell.trp; /* save it if i got it */
		end;
	     end;
	end;



/* Everything AOK. Remove segment and branch and go to finale. */

	if type ^= link_br then do;
	     if priv_entry | type = directory then code = 0; /* only check if unpriv or segment */
	     else code = mountedp (dir.sons_lvid);
	     if code = 0 then do;
		call delete_vtoce (ep, code);
		if code ^= 0 then call syserr$error_code (LOG, code, "delentry: failed to delete_vtoce for ^w ^o.", ep -> entry.pvid, ep -> entry.vtocx);
	     end;
	     if code ^= 0 then			/* error from delete_vtoce prob volume not up */
		if ^priv_entry | code = error_table_$infcnt_non_zero then /* unprivileged attempt or dir contains known inferior segments */
		     go to finale;			/* leave branch intact and return error code */
						/*		else call syserr$error_code (4, code,
						   "delentry: priv_dfile error deleting vtoce for ^a>^a for ^a",
						   dirname, ename, pds$process_group_id);
						   -- Priv deletions used to be logged */
	end;

remove:
	dir.modify = pds$processid;			/* mark dir unstable */
	nrp = entry.name_brp;			/* get rp to last name */
	areap = ptr (dp, dir.arearp);			/* get ptr to area */
	nnames = fixed (entry.nnames, 18);		/* pick up count of names */
	ncnt = 0;

name_loop:
	ncnt = ncnt + 1;				/* keep track of number of names deleted */
	if ncnt > nnames then signal bad_dir_;		/* too many times through the loop */
	np = ptr (dp, nrp);				/* get ptr to name entry to be removed */
	if np -> names.type ^= NAME_TYPE
	     | np -> names.owner ^= entry.uid
	     | np -> names.entry_rp ^= rel (ep) then signal bad_dir_;
	call hash$out (dp, addr (np -> names.name), onp, code); /* remove name from hash table */
	if code ^= 0 then call syserr$error_code (4, code, "delentry: error from hash$out on ""^a"" for ^a",
		np -> names.name, pds$process_group_id);

	if np ^= onp then signal bad_dir_;		/* check that hash table entry and name entry are consistent */

	nrp = np -> names.bp;			/* get rp to previous name on list */
	if nrp then do;				/* if not primary name stored in the entry */
	     entry.name_brp = nrp;			/* thread name list to entry */
	     call fs_alloc$free (areap, active_hardcore_data$ensize, np); /* free name entry */
	     go to name_loop;			/* continue removing names */
	end;
	entry.name_frp, entry.name_brp = "0"b;		/* clear name threads */
	entry.nnames = 0;				/* zero name count */

	if type ^= link_br then do;			/* in the branch case free the storage of the acl */
	     aclep = addr (entry.acl_frp);		/* get pointer to start of acl */
	     acl_count = fixed (entry.acle_count, 18);	/* get count of acls assoc with this entry */
	     call acl_$del_acl (acl_count, entry.uid, aclep); /* remove entire acl */

	     dir.acle_total =			/* decrease count of acl entries in dir header */
		dir.acle_total - acl_count;

	     entry.acl_frp, entry.acl_brp = "0"b;	/* zero out acl threads */
	     entry.acle_count = 0;			/* zero out acl count in entry */

	     asize = active_hardcore_data$esize;	/* size of area to be freed is entry size */
						/* delete bc author and update pers and proj name lists */
	     call acc_name_$delete (addr (entry.bc_author));

	     mkunk_uid = entry.uid;			/* get it unknown later */
	     segptr = null;
	end;
	else do;					/* in link case set pathname size to zero */
	     ep -> link.pathname_size = 0;
	     asize = ep -> link.size;			/* pick up number of words in link entry (for freeing) */
	end;

	call acc_name_$delete (addr (entry.author));	/* delete author and update pers and proj name lists */

	if entry.ebrp then ptr (ep, entry.ebrp) -> entry.efrp = entry.efrp; /* unthread the entry */
	if entry.efrp then ptr (ep, entry.efrp) -> entry.ebrp = entry.ebrp;
	if rel (ep) = dir.entrybrp then dir.entrybrp = entry.ebrp;
	if rel (ep) = dir.entryfrp then dir.entryfrp = entry.efrp;
	entry.ebrp, entry.efrp = "0"b;
	if type = link_br then dir.lcount = dir.lcount - 1; /* fix seg, dir, or link_br count in dir */
	else if type = segment then dir.seg_count = dir.seg_count - 1;
	else dir.dir_count = dir.dir_count - 1;
	entry.uid = "0"b;				/* clear uid */
	entry.pvid = "0"b;
	call fs_alloc$free (areap, asize, ep);		/* free the entry */
	if type = directory & ^damaged then do;
	     if ^entry.per_process_sw then call pathname_am$flush (mkunk_uid);
	     else call pathname_am$clear (segno);
	     call lock$dir_unlock_given_uid (seg_uid);
	     segl = "0"b;
	end;
	if dirl then dir.modify = "0"b;		/* If we locked dir, mark as ok now. */
	call sum$dirmod (dp);


finale:
	if segl then call lock$dir_unlock_given_uid (seg_uid); /* may not be all there */
	if dirl then do;
	     dir.modify = "0"b;
	     if e_sw ^= seg then call dc_find$finished (dp, "1"b);
	     else call lock$dir_unlock (dp);
						/* dont touch lot unless we locked dir */
	     if segptr ^= null then call makeunknown_ (segno, "0"b, ("0"b), ignore); /* implies dir */
	     else if mkunk_uid ^= "0"b then do;
		call terminate_$id (mkunk_uid, 0, code);
		if code ^= 0 then if code = error_table_$seg_unknown
			| code = error_table_$invalidsegno
			| code = error_table_$known_in_other_rings then code = 0;
		     else call syserr$error_code (4, code, "delentry: error from terminate_ for ^a", pds$process_group_id);
	     end;
	end;
	if e_sw = uid_mdir then a_trp = trp;
ret:
	a_code = code;
	return;

/* format: off */

%page; %include access_audit_eventflags;
%page; %include aim_template;
%page; %include dc_find_dcls;
%page; %include dir_entry;
%page; %include dir_header;
%page; %include dir_link;
%page; %include dir_name;
%page; %include fs_obj_access_codes;
%page; %include fs_types;
%page; %include makeknown_info;
%page; %include quota_cell;
%page; %include syserr_constants;
%page;
/* format: on */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   delentry: deleting damaged dir PATH for USERID

   S:	$log

   T:	$run

   M:	An attempt to delete a directory
   found that the directory header had a zero UID.
   The directory was deleted anyway.

   A:	$ignore

   Message:
   delentry: priv_dfile error deleting vtoce for PATH for USERID. ERROR_CODE

   S:	$log

   T:	$run

   M:	A privileged call to delete a segment
   discovered a branch with not VTOC entry.
   This situation is called a "connection failure."
   The branch was deleted anyway.

   A:	$ignore

   Message:
   delentry: error from hash$out on "NAME" for USERID. ERROR_CODE

   S:	$log

   T:	$run

   M:	An attempt to delete the entry name NAME from the directory
   hash table failed.
   $err

   A:	$ignore

   Message:
   delentry: error from terminate_ for USERID. ERROR_CODE

   S:	$log

   T:	$run

   M:	An error code was returned while trying to
   make a directory unknown
   while deleting it.
   $err

   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end delentry;
