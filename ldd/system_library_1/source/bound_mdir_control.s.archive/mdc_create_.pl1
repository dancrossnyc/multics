/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-02-27,TLNguyen), approve(89-02-27,MCR8049),
     audit(89-02-28,Parisek), install(89-03-15,MR12.3-1025):
     a. removed references to create_branch_version_1.
     b. fixed a stringsize error.
  2) change(89-03-31,TLNguyen), approve(89-03-31,PBF8049),
     audit(89-03-31,Farley), install(89-04-24,MR12.3-1031):
     Reinstated the check for create_branch_version_1 in order to retain
     binary compatibility.
                                                   END HISTORY COMMENTS */


/* format: style3,indcomtxt */
/* MDC_CREATE_: Procedure to create a master directory */

/* Written March 1976 by Larry Johnson */
/* Modified September 1977 by Larry Johnson */
/* Modified 83-12-07 BIM for correct quota precisions */
/* Modified 84-11-01 by EJ Sharpe for new dirx_acct entry */
/* Modified 84-12-27 by Keith Loepere for dir_quota */

mdc_create_:
     proc;

dcl	arg_dir		char (*);			/* Name of containing directory */
dcl	arg_ename		char (*);			/* Name of new directory */
dcl	arg_volume	char (*);			/* Logical volume name */
dcl	arg_mode		bit (36) aligned;		/* Mode needed on new directory */
dcl	arg_rings		(3) fixed bin (3);		/* Ring brackets of new directory */
dcl	arg_userid	char (*);			/* Name to be added to acl */
dcl	arg_quota		fixed bin (18);		/* Quota of new directory */
dcl	arg_acct_id	char (*);			/* quota account to use for this mdir */
dcl	arg_owner_id	char (*);			/* user_id who'll be the owner of this mdir */
dcl	arg_info_ptr	ptr;			/* Pointer to create_branch_info structure */
dcl	arg_code		fixed bin (35);		/* Status code */

/* static storage */

dcl       create_branch_version_1
                              fixed bin int static options (constant) init (1);

/* Automatic storage */

dcl	dir		char (168);		/* Copy of arg_dir */
dcl	ename		char (32);		/* Copy of arg_ename */
dcl	volume		char (32);		/* Copy of arg_volume */
dcl	cbip		ptr;			/* Copy of create branch_info structure */
dcl	aip		ptr;			/* Copy of arg_info_ptr */
dcl	code		fixed bin (35);		/* Status code */
dcl	quota_left	fixed bin (35);		/* Quota left in account */
dcl	quota_used	fixed bin (35);		/* Updated quota used */
dcl	owner_person	char (22);
dcl	owner_project	char (9);
dcl	owner_id		char (32);
dcl	acct_person	char (22);
dcl	acct_project	char (9);
dcl	acct_id		char (32);
dcl	access		bit (36) aligned;		/* Access to logical volume */
dcl	uid_pathname	(0:15) bit (36) aligned;	/* UID pathaneme of master directory */
dcl	voluid		bit (36) aligned;		/* UID of logical volume */
dcl	current_quota	fixed bin (18);
dcl	trp		fixed bin (71);		/* Time record product */

/* External things */

dcl	admin_gate_$append_master_dir
			entry (char (*), char (*), ptr, bit (36) aligned, dim (0:15) bit (36) aligned,
			fixed bin (35));
dcl	admin_gate_$delete_master_dir
			entry (dim (0:15) bit (36) aligned, fixed bin (71), fixed bin (35));
dcl	admin_gate_$get_uidpath
			entry (char (*), char (*), dim (0:15) bit (36) aligned, fixed bin (35));
dcl	admin_gate_$mdir_status
			entry (char (*), char (*), dim (0:15) bit (36) aligned, bit (36) aligned, fixed bin (18),
			fixed bin (35));
dcl	admin_gate_$syserr	entry options (variable);
dcl	get_authorization_	entry returns (bit (72) aligned);
dcl	get_group_id_	entry() returns(char(32));
dcl	mdc_lock_$cleanup	entry;
dcl	mdc_lock_$reset	entry;
dcl	mdc_lock_$set	entry (fixed bin (35));
dcl	mdc_parse_acct_$star entry (char (*), char (*), char (*), fixed bin (35));
dcl	mdc_util_$check_pathent
			entry (bit (18) aligned, dim (0:15) bit (36) aligned, fixed bin (35));
dcl	mdc_util_$find_matching_acctent
			entry (ptr, char (*), char (*), ptr);
dcl	mdc_util_$find_mdirent
			entry (ptr, dim (0:15) bit (36) aligned, ptr);
dcl	mdc_util_$free_mdirent
			entry (ptr);
dcl	mdc_util_$get_mdirent
			entry (ptr, ptr, fixed bin (35));
dcl	mdc_util_$thread_mdirent
			entry (ptr);
dcl	mdcs_util_$find_mdcs
			entry (char (*), ptr, bit (36) aligned, fixed bin (35));
dcl	mdcs_util_$find_mdcs_uid
			entry (bit (36) aligned, ptr, bit (36) aligned, fixed bin (35));
dcl	mdcs_util_$term_mdcs
			entry (ptr);


dcl	error_table_$argerr ext fixed bin (35);
dcl	error_table_$noentry
			ext fixed bin (35);
dcl	error_table_$mdc_bad_quota
			ext fixed bin (35);
dcl	error_table_$mdc_no_quota
			ext fixed bin (35);
dcl	error_table_$mdc_no_quota_account
			ext fixed bin (35);
dcl	error_table_$mdc_unregistered_mdir
			ext fixed bin (35);
dcl	error_table_$mdc_illegal_owner
			ext fixed bin (35);
dcl	error_table_$mdc_exec_access
			ext fixed bin (35);
dcl	cleanup		condition;

dcl	(ptr, rel, addr, bin, null, substr)
			builtin;

%include create_branch_info;


dcl	1 auto_branch_info	like create_branch_info aligned automatic;
dcl	1 cbi		like create_branch_info aligned based (cbip);

%include mdcs;

%include access_mode_values;

/* Entry to create master directory with out info structure */

dir:
     entry (arg_dir, arg_ename, arg_volume, arg_mode, arg_rings, arg_userid, arg_quota, arg_code);

	owner_id, acct_id = "";			/* default to caller id */
	cbip = addr (auto_branch_info);		/* Pointer to build param list */
	dir = arg_dir;				/* Copy parameters */
	ename = arg_ename;
	volume = arg_volume;
	cbi.mode = substr (arg_mode, 1, 3);
	cbi.rings = arg_rings;
	cbi.userid = arg_userid;
	cbi.quota = arg_quota;
	cbi.dir_quota = 0;

	cbi.version = create_branch_version_2;		/* Complete info structure */
	cbi.dir_sw = "1"b;
	cbi.copy_sw = "0"b;
	cbi.chase_sw = "1"b;
	cbi.priv_upgrade_sw = "0"b;
	cbi.parent_ac_sw = "1"b;
	cbi.mbz1 = "0"b;
	cbi.mbz2 = "0"b;
	cbi.bitcnt = 0;
	cbi.access_class = get_authorization_ ();

	go to common;


/* Entry to create master directory with info structure */

dirx:
     entry (arg_dir, arg_ename, arg_volume, arg_info_ptr, arg_code);

	owner_id, acct_id = "";			/* default to caller's user_id */

dirx_join:
	cbip = addr (auto_branch_info);		/* Pointer to my copy of info structure */
	dir = arg_dir;				/* Copy params */
	ename = arg_ename;
	volume = arg_volume;
	aip = arg_info_ptr;				/* Pointer to callers info structure */
	cbi = aip -> cbi;				/* Copy entrure structuee */

	if cbi.version < create_branch_version_1 | cbi.version > create_branch_version_2 /* Check some requirements */
	     | ^cbi.dir_sw | cbi.priv_upgrade_sw | cbi.mbz1 ^= "0"b | cbi.mbz2 ^= "0"b
	then do;
		arg_code = error_table_$argerr;
		return;
	     end;

	go to common;


/* Entry same as "dirx" but with added arguments to specify quota account and/or mdir owner */

dirx_acct:
	entry (arg_dir, arg_ename, arg_volume, arg_info_ptr, arg_acct_id, arg_owner_id, arg_code);

	owner_id = arg_owner_id;		/* copy our special args */
	if owner_id = get_group_id_ ()
	     then owner_id = "";		/* caller really did'nt need this */
	acct_id = arg_acct_id;
	if acct_id = get_group_id_ ()
	     then acct_id = "";		/* caller really did'nt need this */
	if acct_id = "" then acct_id = owner_id;	/* use owner for matching an account */
	goto dirx_join;

/* Common coding for all create entries */

common:
	mdcsp = null;
	on cleanup call clean_up;
	call mdc_lock_$set (code);
	if code ^= 0
	then go to return_code;			/* Unable to set lock */

	call mdcs_util_$find_mdcs (volume, mdcsp, access, code);
						/* Find control segment */
	if code ^= 0
	then go to unlock_return;

	if (owner_id ^= "") & (acct_id ^= "")	/* caller specified owner/acct ? */
	then if ((access & E_ACCESS) ^= E_ACCESS)	/* then better be a volume administrator */
	     then do;
		code = error_table_$mdc_exec_access;
		goto term_return;
	     end;

	call mdc_parse_acct_$star (acct_id, acct_person, acct_project, code); /* Find out who i am */
	if code ^= 0
	then go to term_return;

	call mdc_parse_acct_$star (owner_id, owner_person, owner_project, code);
	if code ^= 0
	then go to term_return;
	if owner_person = "*" | owner_project = "*"
	then do;
	     code = error_table_$mdc_illegal_owner;
	     goto term_return;
	end;

	call mdc_util_$find_matching_acctent (mdcsp, acct_person, acct_project, acctp);
						/* And find my quota account */
	if acctp = null
	then do;
		code = error_table_$mdc_no_quota_account;
		go to term_return;
	     end;

	if (acctent.restrict_path ^= "0"b) | (mdcs.default_path ^= "0"b)
	then do;					/* Check pathname restrictions */
		call admin_gate_$get_uidpath (dir, "", uid_pathname, code);
						/* Get parents uid path */
		if code ^= 0
		then go to term_return;
		if acctent.restrict_path
		then call mdc_util_$check_pathent (acctent.restrict_path, uid_pathname, code);
		else call mdc_util_$check_pathent (mdcs.default_path, uid_pathname, code);
		if code ^= 0
		then go to term_return;
	     end;

	if cbi.quota ^> 0
	then do;					/* Now some quota checks */
		code = error_table_$mdc_bad_quota;
		go to term_return;
	     end;
	quota_left = acctent.quota - acctent.quota_used;
	if cbi.quota > quota_left
	then do;
		code = error_table_$mdc_no_quota;
		go to term_return;
	     end;

	call mdc_util_$get_mdirent (mdcsp, mdirp, code);	/* Get new directory entry */
	if code ^= 0
	then go to term_return;

	mdirent.owner.person = owner_person;		/* Initialize it */
	mdirent.owner.project = owner_project;
	mdirent.quota_offset = rel (acctp);
	mdirent.quota = cbi.quota;

	quota_used = acctent.quota_used + cbi.quota;
	call admin_gate_$append_master_dir (dir, ename, cbip, mdcs.uid, mdirent.uidpath, code);
	if code ^= 0
	then do;
		call mdc_util_$free_mdirent (mdirp);
		go to term_return;
	     end;
	acctent.quota_used = quota_used;
	call mdc_util_$thread_mdirent (mdirp);

good_return:
	code = 0;
term_return:
	call mdcs_util_$term_mdcs (mdcsp);
unlock_return:
	call mdc_lock_$reset;
return_code:
	arg_code = code;
	return;

/* Entry to delete a master directory */

delete:
     entry (arg_dir, arg_ename, arg_code);

	dir = arg_dir;
	ename = arg_ename;
	mdcsp = null;

	call admin_gate_$mdir_status (dir, ename, uid_pathname, voluid, current_quota, code);
	if code ^= 0
	then go to return_code;

	on cleanup call clean_up;
	call mdc_lock_$set (code);			/* Set mdcs lock */
	if code ^= 0
	then go to return_code;
	call mdcs_util_$find_mdcs_uid (voluid, mdcsp, access, code);
						/* Find MDCS */
	if code = error_table_$noentry
	then do;					/* MDCS is gone */
		call admin_gate_$delete_master_dir (uid_pathname, trp, code);
		if code ^= 0
		then go to unlock_return;
		call admin_gate_$syserr (4, "mdc_create_$delete: No MDCS for ^a^[>^]^a. Directory deleted.", dir,
		     (dir ^= ">"), ename);
		code = 0;
		go to unlock_return;
	     end;
	else if code ^= 0
	then go to unlock_return;

	call mdc_util_$find_mdirent (mdcsp, uid_pathname, mdirp);
						/* Find my directorys entry */
	if mdirp = null
	then do;
		code = error_table_$mdc_unregistered_mdir;
		go to term_return;
	     end;
	acctp = ptr (mdcsp, mdirent.quota_offset);	/* Pointer to quota account entry */
	quota_used = acctent.quota_used - mdirent.quota;	/* Calc new quota, in case delete works */
	if quota_used < 0
	then quota_used = 0;
	call admin_gate_$delete_master_dir (uid_pathname, trp, code);
						/* Now delete it */
	if code ^= 0
	then go to term_return;
	call mdc_util_$free_mdirent (mdirp);		/* Don't need directry entry */
	acctent.quota_used = quota_used;		/* Update quota account */
	if trp < 0
	then call admin_gate_$syserr (4, "mdc_create_$delete: TRP for ^a^v(>^)^a on ^a negative (^d).", dir,
		bin (dir ^= ">", 1), ename, mdcs.volume, trp);
	else acctent.trp = fb71_add ((acctent.trp), trp); /* Update time record prodcut */
	go to good_return;

/* Cleanup handler */

clean_up:
     proc;

	if mdcsp ^= null
	then call mdcs_util_$term_mdcs (mdcsp);
	call mdc_lock_$cleanup;
	return;

     end clean_up;


/* Procedure to do fixed bin(71) adds without overflow */

fb71_add:
     proc (a, b) returns (fixed bin (71));

dcl	(a, b, c)		fixed bin (71);
dcl	fb71_max		fixed bin (71) int static options (constant)
			init (11111111111111111111111111111111111111111111111111111111111111111111111b);

	c = fb71_max - a;
	if b <= c
	then return (a + b);
	else return (fb71_max);

     end fb71_add;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   mdc_create_$delete: TRP for DIRNAME on LVNAME negative.

   S: $log

   T: $run

   M: While deleting master directory DIRNAME, an invalid negative
   time-record product was found.
   The invalid number has been ignored, but volume accounting data
   may have been lost.

   A: $ignore

   Message:
   mdc_create_$delete: No MDCS for DIRNAME.

   S: $log

   T: $run

   M: When deleting master directory DIRNAME, the master directory
   control segment (MDCS) could not found.
   The directory was deleted anyway.

   A: $ignore

   END MESSAGE DOCUMENTATION */


     end mdc_create_;
