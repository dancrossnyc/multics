/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,indcomtxt */

/* MDC_CHECK_MDCS_: Procedure that validates the contents of a master directory control segment. */

/* Written April 1976 by Larry Johnson */
/* Modified 8303-12-07 BIM for correct quota precision */

mdc_check_mdcs_:
     proc (mdcsp, code);

	dcl     code		 fixed bin (35);	/* Stanard status code */
	dcl     quota_used		 fixed bin (18);
	dcl     (p, q)		 ptr;
	dcl     (i, j)		 fixed bin;

	dcl     1 list		 aligned based,	/* Format of lined list */
		2 next		 bit (18) unal,
		2 fill		 bit (18) unal;

	dcl     admin_gate_$syserr	 entry options (variable);
	dcl     clock_		 entry returns (fixed bin (71));

	dcl     error_table_$bad_segment
				 ext fixed bin (35);

	dcl     (addr, bin, ptr, rel, unspec)
				 builtin;

%include mdcs;

/* All lists are checked for proper threading */

	call check_thread (mdcs.acct_offset);
	call check_thread (mdcs.dir_offset);
	call check_thread (mdcs.restrict_path);
	call check_thread (mdcs.default_path);

/* Check that things that should be zero are */

	if mdcs.free_bits ^= "0"b
	then do;
		call admin_gate_$syserr (4, "mdc_check_mdcs_: Volume ^a had non-zero mdcs.free_bits.", mdcs.volume);
		mdcs.free_bits = "0"b;
	     end;
	if unspec (mdcs.fill) ^= "0"b
	then do;
		call admin_gate_$syserr (4, "mdc_check_mdcs_: Volume ^a had non-zero mdcs.fill.", mdcs.volume);
		unspec (mdcs.fill) = "0"b;
	     end;

/* Check that each directory entry points to a valid account entry */

	mdirp = ptr (mdcsp, mdcs.dir_offset);		/* Start of directory list */
	do while (rel (mdirp) ^= "0"b);		/* Scan list */
	     call check_ascii ("directory", mdirent.owner, mdirp);
	     if mdirent.quota < 1
	     then do;				/* bad quota */
		     call admin_gate_$syserr (4,
			"mdc_check_mdcs_: Invalid master directory quota changed from ^d to 1 on ^a.",
			mdirent.quota, mdcs.volume);
		     mdirent.quota = 1;
		end;
	     acctp = ptr (mdcsp, mdcs.acct_offset);	/* Scan down qccount list */
	     do while (rel (acctp) ^= "0"b);
		if rel (acctp) = mdirent.quota_offset
		then go to next_mdir;
		acctp = ptr (mdcsp, acctent.next);
	     end;
	     call admin_gate_$syserr (4, "mdc_check_mdcs_: Invalid quota account offset at ^a|^o", mdcs.volume,
		bin (rel (mdirp), 18));
	     go to return_code;
next_mdir:
	     mdirp = ptr (mdcsp, mdirent.next);
	end;


/* Now check that each quota account has the correct quota used */

	i = 0;					/* For checking order of entries */
	acctp = ptr (mdcsp, mdcs.acct_offset);
	do while (rel (acctp) ^= "0"b);
	     call check_thread (acctent.restrict_path);
	     call check_ascii ("account", acctent.name, acctp);
	     j = 0;				/* Compute sort code of entry */
	     if acctent.name.person = "*"
	     then j = j + 2;
	     if acctent.name.project = "*"
	     then j = j + 1;
	     if j < i
	     then do;				/* Error */
		     call admin_gate_$syserr (4, "mdc_check_mdcs_: Account entry at ^a|^o for ^a.^a out of sequence.",
			mdcs.volume, bin (rel (acctp), 18), acctent.name.person, acctent.name.project);
		     go to return_code;
		end;
	     else i = j;				/* For next one */
	     quota_used = 0;			/* A counter */
	     mdirp = ptr (mdcsp, mdcs.dir_offset);	/* Scan directory list */
	     do while (rel (mdirp) ^= "0"b);
		if mdirent.quota_offset = rel (acctp)
		then /* If account owns directory */
		     quota_used = quota_used + mdirent.quota;
		mdirp = ptr (mdcsp, mdirent.next);
	     end;
	     if quota_used ^= acctent.quota_used
	     then do;				/* If in error */
		     call admin_gate_$syserr (4, "mdc_check_mdcs_: Quota used of ^a for ^a.^a changed from ^d to ^d.",
			mdcs.volume, acctent.name.person, acctent.name.project, acctent.quota_used, quota_used);
		     acctent.quota_used = quota_used;	/* Set it right */
		end;
	     if acctent.trp < 0
	     then do;				/* Bad time record product */
		     call admin_gate_$syserr (4, "mdc_check_mdcs_: TRP of ^a.^a on ^a changed from ^d to 0.",
			acctent.person, acctent.project, mdcs.volume, acctent.trp);
		     acctent.trp = 0;
		end;
	     acctp = ptr (mdcsp, acctent.next);
	end;

	code = 0;
	mdcs.time_checked = clock_ ();
	return;

return_code:
	code = error_table_$bad_segment;
	return;


/* Procedure to check list threading. Each entry is checked to see that it falls within the segment,
   and there are no circular threads */

check_thread:
     proc (head);

	dcl     head		 bit (18) aligned;	/* Pointer to list head */

	if head = "0"b
	then return;				/* Empty list */
	p = ptr (mdcsp, head);			/* Head of list */
check3:
	if p -> list.fill ^= "0"b
	then do;
		call admin_gate_$syserr (4, "mdc_check_mdcs_: Fill bits zeroed at ^a|^o", mdcs.volume,
		     bin (rel (p), 18));
		p -> list.fill = "0"b;
	     end;
	if p -> list.next = "0"b
	then return;				/* End */
	q = ptr (mdcsp, head);			/* Start at beginning again */
check2:
	if rel (p) = rel (q)
	then go to check1;				/* Caught up to current point */
	if rel (q) = p -> list.next
	then do;					/* Loop */
		call admin_gate_$syserr (4, "mdc_check_mdcs_: Circular list pointer at ^a|^o", mdcs.volume,
		     bin (rel (p), 18));
		go to return_code;
	     end;
	q = ptr (mdcsp, q -> list.next);
	go to check2;
check1:
	p = ptr (mdcsp, p -> list.next);
	go to check3;

     end check_thread;




/* Procedure to check strings for ASCII. */

check_ascii:
     proc (type, name, p);

	dcl     type		 char (*);
	dcl     p			 ptr;
	dcl     1 name		 aligned,
		2 person		 char (22) unal,
		2 project		 char (9) unal;

	dcl     bit_person		 bit (198) unal based;
	dcl     bit_project		 bit (81) unal based;

	if addr (name.person) -> bit_person & (22)"110000000"b
	then do;
		call admin_gate_$syserr (4, "mdc_check_mdcs_: Non ascii person name in ^a entry at ^a|^o", type,
		     mdcs.volume, bin (rel (p), 18));
		go to return_code;
	     end;
	if addr (name.project) -> bit_project & (9)"110000000"b
	then do;
		call admin_gate_$syserr (4, "mdc_check_mdcs_: Non ascii project name in ^a entry at ^a|^o", type,
		     mdcs.volume, bin (rel (p), 18));
		go to return_code;
	     end;
	return;

     end check_ascii;


     end mdc_check_mdcs_;
