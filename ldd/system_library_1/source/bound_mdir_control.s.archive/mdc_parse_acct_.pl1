/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* MDC_PARSE_ACCT_: Contains entries for parsing user.project.tag strings */

/* Written April 1976 by Larry Johnson */

mdc_parse_acct_: proc (arg_acct, arg_person, arg_project, arg_code);

dcl  arg_acct char (*);				/* Account name to parse */
dcl  arg_person char (*);				/* Person will be returned here */
dcl  arg_project char (*);				/* Project will be returned here */
dcl  arg_code fixed bin (35);

dcl  acct char (32);
dcl  person char (22);
dcl  project char (9);
dcl  tag char (1);
dcl  i fixed bin;
dcl  star_sw bit (1);				/* Set if "*" should be substituted for "" */

dcl  check_ascii (4) bit (72) int static options (constant) init ((4) (8)"110000000"b);

dcl  get_group_id_$tag_star entry returns (char (32));

dcl  error_table_$mdc_illegal_account ext fixed bin (35);

dcl (index, length, substr, unspec) builtin;

/* The normal entry starts here. Stars are not substituted for blank components */

	star_sw = "0"b;
	go to start;

/* Enter here to have stars substituted for missing components */

star:	entry (arg_acct, arg_person, arg_project, arg_code);

	star_sw = "1"b;

/* Now parse it */

start:
	if length (arg_acct) > length (acct) then	/* If given long string, be sure it isn't truncated */
	     if substr (arg_acct, length (acct) + 1) ^= "" then go to bad;

	acct = arg_acct;
	if acct = "" then acct = get_group_id_$tag_star (); /* A standard default */

	if unspec (acct) & unspec (check_ascii) then go to bad; /* Crude test for good ascii */

	i = index (acct, " ");			/* Check for imbedded blanks */
	if i > 0 then if substr (acct, i) ^= "" then go to bad;

	call next_component (person);			/* Remove person */
	call next_component (project);		/* Remove project */
	call next_component (tag);			/* Remove tag */

	if acct ^= "" then go to bad;			/* String should be exhausted by now */

	if star_sw then do;				/* Substitute stars for blanks */
	     if person = "" then person = "*";
	     if project = "" then project = "*";
	end;

	arg_person = person;			/* Done */
	arg_project = project;
	arg_code = 0;
	return;

bad:	arg_person, arg_project = "";
	arg_code = error_table_$mdc_illegal_account;
	return;

/* This entry just returns the name of the default account */

default:	entry (arg_person, arg_project);

	arg_person = "Initializer";
	arg_project = "SysDaemon";
	return;

/* Internal procedure that strips the next component off the input string */

next_component: proc (s);

dcl  s char (*);

	     if acct = "" then do;			/* If string is exhausted */
		s = "";
		return;
	     end;

	     i = index (acct, ".");			/* Find bounds of component */

	     if i = 0 then do;			/* No more points */
		i = index (acct, " ");		/* Find end of word */
		if i = 0 then i = length (acct) + 1;
		if i - 1 > length (s) then go to bad;	/* Too long */
		s = acct;				/* Use rest of string */
		acct = "";			/* String exhausted */
	     end;
	     else if i = 1 then do;			/* Point is first */
		s = "";				/* This component is null */
		acct = substr (acct, 2);		/* Strip off point */
	     end;
	     else do;				/* Something before point */
		if i - 1 > length (s) then go to bad;	/* Too  much */
		s = substr (acct, 1, i - 1);		/* Copy it */
		if i + 1 > length (acct) then acct = ""; /* Finished out string */
		else acct = substr (acct, i + 1);	/* Save rest */
	     end;

	     return;

	end next_component;

     end mdc_parse_acct_;
