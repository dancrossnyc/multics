/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2,indcomtxt */
/* MDC_REPAIR_: This modules contains a collection of privlidged and/or repair entries */

/* Written March 1976 by Larry Johnson */
/* Modified 83-12-07 BIM for quota repair when validating uidpaths */
/* Modified 84-08-29 by EJ Sharpe - new param lists for make_mdcs, rename_mdcs, update_hvid, and delete_mdcs */
/* Modified 84-09-04 by EJSharpe to change refs to hdx to volume_registration_mgr_
   change "hvid" to "lvid"
   change "hvname" to "lvname"
*/
/* Modified 84-10-30 by EJ Sharpe to use pl1 area instead of area_ and some minor fixes */
/* Modified 84-11-08 by EJ Sharpe to use based bit array for copying MDCS */
/* Modified 85-02-21 by EJ Sharpe to use syserr_constants.incl.pl1 and fix bad call to admin_gate_$syserr_binary */
/* Modified 85-05-13 by EJ Sharpe to use admin_gate_$mdir_status_uid_priv,
   also to set dir privileges on validate_uidpaths entry. */

mdc_repair_:
     procedure;

/* Arguments */

	dcl     arg_volume		 char (*);
	dcl     arg_code		 fixed bin (35);
	dcl     arg_dir		 char (*);
	dcl     arg_ename		 char (*);
	dcl     arg_ptr		 ptr;
	dcl     arg_uid		 bit (36) aligned;
	dcl     arg_new_uid		 bit (36) aligned;
	dcl     arg_newvol		 char (*);

/* Automatic */

	dcl     volume		 char (32);
	dcl     r0_volume		 bit (36) aligned;
	dcl     temp_lvname		 char (32);
	dcl     code		 fixed bin (35);
	dcl     voluid		 bit (36) aligned;
	dcl     uidpath		 (0:15) bit (36) aligned;
	dcl     quota		 fixed bin (18);
	dcl     dir		 char (168);
	dcl     dirl		 fixed bin;
	dcl     ename		 char (32);
	dcl     access		 bit (36) aligned;
	dcl     p			 ptr;
	dcl     newvol		 char (32);
	dcl     new_voluid		 bit (36) aligned;
	dcl     person		 char (22);
	dcl     project		 char (9);
	dcl     msg		 char (50);
	dcl     call_check		 bit (1);
	dcl     paths_deleted	 bit (1);
	dcl     next_rel		 bit (18);
	dcl     set_privileges	 bit (1) init ("0"b);
						/* tells cleanup to reset the privileges */
	dcl     old_privileges	 bit (36) aligned;	/* save privileges for restoration */
	dcl     based_seg_size	 fixed bin (18);
	dcl     based_seg_bit_array	 (based_seg_size) bit (36) aligned based;
	dcl     1 status_struc	 aligned like status_branch;

/* External things */

	dcl     admin_gate_$decode_uidpath
				 entry (dim (0:15) bit (36) aligned, char (*), char (*), fixed bin (35));
	dcl     admin_gate_$mdir_status
				 entry (char (*), char (*), dim (0:15) bit (36) aligned, bit (36) aligned,
				 fixed bin (18), fixed bin (35));
	dcl     admin_gate_$mdir_status_uid_priv
				 entry ((0:15) bit (36) aligned, character (*), character (*), bit (36) aligned,
				 fixed binary (18), fixed binary (35));
	dcl     admin_gate_$reset_privileges
				 entry (bit (36) aligned);
	dcl     admin_gate_$set_privileges
				 entry (bit (36) aligned, bit (36) aligned);
	dcl     admin_gate_$syserr	 entry options (variable);
	dcl     admin_gate_$syserr_binary
				 entry options (variable);
	dcl     hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     volume_registration_mgr_$find_lvname
				 entry (bit (36) aligned, char (*), fixed bin (35));
	dcl     mdc_check_mdcs_	 entry (ptr, fixed bin (35));
	dcl     mdc_lock_$cleanup	 entry;
	dcl     mdc_lock_$reset	 entry;
	dcl     mdc_lock_$set	 entry (fixed bin (35));
	dcl     mdc_lock_$set_test_mode
				 entry;
	dcl     mdc_parse_acct_$default
				 entry (char (*), char (*));
	dcl     mdc_util_$find_acctent entry (ptr, char (*), char (*), ptr);
	dcl     mdc_util_$find_mdirent entry (ptr, dim (0:15) bit (36) aligned, ptr);
	dcl     mdc_util_$free_mdirent entry (ptr);
	dcl     mdc_util_$free_pathent entry (bit (18) aligned, ptr);
	dcl     mdc_util_$get_acctent	 entry (ptr, ptr, fixed bin (35));
	dcl     mdc_util_$get_mdirent	 entry (ptr, ptr, fixed bin (35));
	dcl     mdc_util_$thread_acctent
				 entry (ptr);
	dcl     mdc_util_$thread_mdirent
				 entry (ptr);
	dcl     mdcs_util_$create_mdcs entry (char (*), bit (36) aligned, fixed bin (35));
	dcl     mdcs_util_$delete_mdcs entry (char (*), bit (36) aligned, fixed bin (35));
	dcl     mdcs_util_$find_mdcs	 entry (char (*), ptr, bit (36) aligned, fixed bin (35));
	dcl     mdcs_util_$find_mdcs_and_check
				 entry (char (*), ptr, bit (36) aligned, fixed bin (35));
	dcl     mdcs_util_$find_mdcs_uid
				 entry (bit (36) aligned, ptr, bit (36) aligned, fixed bin (35));
	dcl     mdcs_util_$rename_mdcs entry (char (*), bit (36) aligned, char (*), fixed bin (35));
	dcl     mdcs_util_$set_mdcsdir entry (char (*));
	dcl     mdcs_util_$term_mdcs	 entry (ptr);
	dcl     mdcs_util_$update_lvid entry (char (*), bit (36) aligned, bit (36) aligned, fixed bin (35));

	dcl     error_table_$namedup	 ext fixed bin (35);
	dcl     error_table_$bad_uidpath
				 ext fixed bin (35);

	dcl     cleanup		 condition;

	dcl     (addr, rtrim, bin, ptr, null, rel)
				 builtin;
%page;
/* Entry to create a master directory control segment (MDCS) */

make_mdcs:
     entry (arg_volume, arg_uid, arg_code);

/* This entry is called by volume_registration_mgr_$add_lvr when a new LV is registered */

	volume = arg_volume;
	voluid = arg_uid;

	on cleanup call mdc_lock_$cleanup;
	call mdc_lock_$set (code);
	if code ^= 0
	then go to return_code;

	call mdcs_util_$create_mdcs (volume, voluid, code);
						/* Try to create it */
	go to unlock_return;

/* Most entries return to one of the following labels to exit. */

good_return:
	code = 0;
term_return:
	call mdcs_util_$term_mdcs (mdcsp);
unlock_return:
	call mdc_lock_$reset;
return_code:
	arg_code = code;
	return;



/* Special entry call from ring1 during system initiaization to create a mdcs.
   It performs the same function as make_mdcs, but does not set locks or call any volume registration entries. */

recreate_mdcs:
     entry (arg_volume, arg_uid, arg_code);

	volume = arg_volume;
	voluid = arg_uid;
	call mdcs_util_$create_mdcs (volume, voluid, code);
	go to return_code;
%page;
/* Entry that will copy the mdcs to an outer ring */

copy_mdcs:
     entry (arg_volume, arg_ptr, arg_code);

	volume = arg_volume;
	p = arg_ptr;
	arg_code = 0;

	mdcsp = null;
	on cleanup call reg_cleanup;
	call mdc_lock_$set (code);
	if code ^= 0
	then go to return_code;

	call mdcs_util_$find_mdcs (volume, mdcsp, access, code);
	if code ^= 0
	then go to unlock_return;

	call hcs_$fs_get_path_name (mdcsp, dir, dirl, ename, code);
	if code ^= 0
	then goto term_return;

	call hcs_$status_long (dir, ename, 0, addr (status_struc), null (), code);
	if code ^= 0
	then goto term_return;

	based_seg_size = status_struc.current_length * 1024;
	p -> based_seg_bit_array = mdcsp -> based_seg_bit_array;

	go to good_return;
%page;
/* Entry to rename a mdcs */

rename_mdcs:
     entry (arg_volume, arg_uid, arg_newvol, arg_code);

/* This entry is called by volume_registrtaion_mgr_$change_lvr when the name of an LV is changed */

	volume = arg_volume;
	newvol = arg_newvol;
	voluid = arg_uid;
	on cleanup call mdc_lock_$cleanup;
	call mdc_lock_$set (code);
	if code ^= 0
	then go to return_code;
	call mdcs_util_$rename_mdcs (volume, voluid, newvol, code);
	go to unlock_return;


/* Entry to store a new unique id for a logical volume */

update_lvid:
     entry (arg_volume, arg_uid, arg_new_uid, arg_code);

/* This entry is called by volume_registration_mgr_$change_lvr when the UID of an LV is changed */

	volume = arg_volume;
	voluid = arg_uid;				/* Old uid */
	new_voluid = arg_new_uid;
	on cleanup call mdc_lock_$cleanup;
	call mdc_lock_$set (code);
	if code ^= 0
	then go to return_code;
	call mdcs_util_$update_lvid (volume, voluid, new_voluid, code);
	go to unlock_return;


/* Entry to delete a mdcs. It will fail if the mdcs is not empty */

delete_mdcs:
     entry (arg_volume, arg_uid, arg_code);

/* THis entry is called by volume_registration_mgr_$delete_lvr when an LV registration is deleted */

	volume = arg_volume;
	voluid = arg_uid;
	on cleanup call mdc_lock_$cleanup;
	call mdc_lock_$set (code);
	if code ^= 0
	then go to return_code;
	call mdcs_util_$delete_mdcs (volume, voluid, code);
	go to unlock_return;


/* Debugging entry that changes the name of the mdcs directory */

set_mdcsdir:
     entry (arg_dir);

	dir = arg_dir;
	call mdcs_util_$set_mdcsdir (dir);
	call mdc_lock_$set_test_mode;
	return;
%page;
/* This entry, given a pathname of maybe a master directory, updates ring1 to be consistent */

register_mdir:
     entry (arg_dir, arg_ename, arg_code);

	dir = arg_dir;
	ename = arg_ename;
	arg_code = 0;
	call admin_gate_$mdir_status (dir, ename, uidpath, voluid, quota, code);
						/* Be sure its a master dir */
	if code ^= 0
	then go to return_code;

	mdcsp = null;
	on cleanup call reg_cleanup;
	call mdc_lock_$set (code);
	if code ^= 0
	then go to return_code;

	call mdcs_util_$find_mdcs_uid (voluid, mdcsp, access, code);
						/* This finds the MDCS, given uid */
	if code ^= 0
	then go to unlock_return;

	call mdc_util_$find_mdirent (mdcsp, uidpath, mdirp);
						/* See if directry registered */
	if mdirp ^= null
	then do;					/* It is */
		call fix_mdirent_quota (mdirp, dir, ename, quota, code);
		if code = 0
		then code = error_table_$namedup;
		go to term_return;
	     end;

	call mdc_util_$get_mdirent (mdcsp, mdirp, code);	/* Get free directory entry */
	if code ^= 0
	then go to term_return;
	mdirent.uidpath = uidpath;			/* Initialize it */
	mdirent.quota = quota;
	call mdc_parse_acct_$default (person, project);	/* Get name of default account */
	mdirent.owner.person = person;
	mdirent.owner.project = project;

	call mdc_util_$find_acctent (mdcsp, person, project, acctp);
						/* Find default quota account */
	if acctp = null
	then do;					/* Must make one */
		call mdc_util_$get_acctent (mdcsp, acctp, code);
		if code ^= 0
		then go to term_return;
		acctent.name.person = person;
		acctent.name.project = project;
		call mdc_util_$thread_acctent (acctp);
	     end;
	mdirent.quota_offset = rel (acctp);		/* Mdir entry complete */
	call mdc_util_$thread_mdirent (mdirp);

	call admin_gate_$syserr (LOG, "mdc_repair_$register_mdir: ^a^[>^]^a registered on ^a, quota=^d.", dir,
	     bin (dir ^= ">", 1), ename, mdcs.volume, quota);
	call mdc_check_mdcs_ (mdcsp, code);		/* This will repair quota accpunt */
	go to term_return;
%page;
/* This entry checks all the uid pathnames in an mdcs and deletes any that do not point at real directorys anymore. */

validate_uidpaths:
     entry (arg_volume, arg_code);

	volume = arg_volume;
	arg_code = 0;
	mdcsp = null;
	on cleanup call reg_cleanup;
	call mdc_lock_$set (code);
	if code ^= 0
	then go to return_code;

	call mdcs_util_$find_mdcs_and_check (volume, mdcsp, access, code);
	if code ^= 0
	then go to unlock_return;			/* Cant find volume */
	call admin_gate_$set_privileges (DIR_PRIVILEGE, old_privileges);
	set_privileges = "1"b;
	paths_deleted, call_check = "0"b;
	msg = "volume path restriction list";
	call check_restrict (mdcs.restrict_path);
	msg = "volume default path restriction list";
	call check_restrict (mdcs.default_path);

	do mdirp = ptr (mdcsp, mdcs.dir_offset) repeat (ptr (mdcsp, next_rel)) while (rel (mdirp) ^= "0"b);
						/* Scan all master directory entries  */
	     next_rel = mdirent.next;			/* Save in case this entry deleted */
	     call admin_gate_$mdir_status_uid_priv (mdirent.uidpath, dir, ename, r0_volume, quota, code);
	     if code = error_table_$bad_uidpath
	     then do;				/* Found a bad entry */
		     /*** decode_uidpath returns as much as is available */
		     call admin_gate_$decode_uidpath (mdirent.uidpath, dir, ename, code);
		     call admin_gate_$syserr_binary (LOG, addr (mdirent.uidpath), SB_mdc_del_uidpath,
			SBL_mdc_del_uidpath,
			"mdc_repair_$validate_uidpaths: Master directory entry with bad uidpath deleted from ^a. ^a>??",
			volume, dir);
		     call mdc_util_$free_mdirent (mdirp);
		     call_check = "1"b;		/* Must call mdc_check_mdcs to fix quota */
		     paths_deleted = "1"b;
		end;
	     else if r0_volume ^= mdcs.uid
	     then do;				/* it exists, but does not belong to us */
		     temp_lvname = "";
		     call volume_registration_mgr_$find_lvname (r0_volume, temp_lvname, (0));

		     call admin_gate_$syserr_binary (LOG, addr (mdirent.uidpath), SB_mdc_del_uidpath,
			SBL_mdc_del_uidpath,
			"mdc_repair_$validate_uidpaths: Master directory ^a^[>^]^a entry for wrong logical volume (^w ^a) deleted from ^a.",
			dir, (dir ^= ">"), ename, r0_volume, temp_lvname, volume);
		     call mdc_util_$free_mdirent (mdirp);

		     call_check = "1"b;
		     paths_deleted = "1"b;
		end;
	     else /* valid path, lets check some more */
		call fix_mdirent_quota (mdirp, dir, ename, quota, code);
						/* ignore code */
	end;

	do acctp = ptr (mdcsp, mdcs.acct_offset) repeat (ptr (mdcsp, acctent.next)) while (rel (acctp) ^= "0"b);
	     msg = "path restriction for " || rtrim (acctent.person) || "." || rtrim (acctent.project);
	     call check_restrict (acctent.restrict_path);
	end;

	if call_check
	then call mdc_check_mdcs_ (mdcsp, code);
	if paths_deleted
	then code = error_table_$bad_uidpath;
	else code = 0;
	call admin_gate_$reset_privileges (old_privileges);
	go to term_return;

check_restrict:
     proc (head);					/* Check each entry in a restriction list */

	dcl     head		 bit (18) aligned;

	do pathp = ptr (mdcsp, head) repeat (ptr (mdcsp, next_rel)) while (rel (pathp) ^= "0"b);
	     next_rel = pathent.next;			/* Save in case this entry deleted */
	     call admin_gate_$decode_uidpath (pathent.uidpath, dir, ename, code);
	     if code = error_table_$bad_uidpath
	     then do;				/* Found a bad one */
		     call admin_gate_$syserr_binary (LOG, addr (pathent.uidpath), SB_mdc_del_uidpath,
			SBL_mdc_del_uidpath,
			"mdc_repair_$validate_uidpaths: Bad uidpath name deleted from ^a for ^a. ^a>??", msg,
			volume, dir);
		     call mdc_util_$free_pathent (head, pathp);
		     paths_deleted = "1"b;
		end;
	end;
	return;

     end check_restrict;

fix_mdirent_quota:
     procedure (Mdirp, Dir_name, Ename, Quota, Code);

	declare Mdirp		 pointer;
	declare Quota		 fixed bin (18);
	declare Dir_name		 char (168);
	declare Ename		 char (32);
	declare Code		 fixed bin (35);

	if Quota < 1
	then do;					/* this is bad */
		call admin_gate_$syserr (LOG,
		     "mdc_repair_: Quota of ^d reported by ring 0 for ^a^[>^]^a on ^a. 1 assumed.", Quota, Dir_name,
		     Dir_name ^= ">", Ename, Mdirp -> mdcs.volume);
		Quota = 1;
	     end;
	if Quota ^= Mdirp -> mdirent.quota
	then do;					/* Check quota */
		call admin_gate_$syserr (LOG, "mdc_repair_: Quota for ^a^[>^]^a on ^a changed from ^d to ^d.",
		     Dir_name, Dir_name ^= ">", Ename, mdcs.volume, Mdirp -> mdirent.quota, Quota);
		mdirent.quota = Quota;		/* Fix it */
		call mdc_check_mdcs_ (mdcsp, Code);	/* This repairs quota account */
	     end;
     end fix_mdirent_quota;
%page;
/* Cleanup handler */

reg_cleanup:
     proc;

	if mdcsp ^= null
	then call mdcs_util_$term_mdcs (mdcsp);

	if set_privileges
	then call admin_gate_$reset_privileges (old_privileges);

	call mdc_lock_$cleanup;
	return;

     end reg_cleanup;				/* format: off */
%page;
%include mdcs;
%page;
%include syserr_constants;
%page;
%include syserr_binary_def;
%page;
%include status_structures;
%page;
%include aim_privileges;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   mdc_repair_$register_mdir: Quota of N reported by ring 0 for DIRNAME on LVNAME. 1 assumed.

   S: $log

   T: $run

   M: The master directory DIRNAME for volume LVNAME has been found
   to have an invalid quota. The quota has been assumed to be 1.
   The message can only appear as a result of a register_mdir command
   performed by a system administrator.

   A: $ignore

   Message:
   mdc_repair_$register_mdir: Quota for DIRNAME on LVNAME changed from OLD to NEW.

   S: $log

   T: $run

   M: The quota of master directory DIRNAME was found be different from the
   quota recorded in the MDCS. The real quota is assumed to be correct and
   the MDCS is updated to reflect this quota. This may happen if a set_quota
   command had been used on a master directory.
   This message can only appear as a result of a register_mdir command
   performed by a system administrator.

   A: $ignore

   Message:
   mdc_repair_$register_mdir: DIRNAME registered on LVNAME, quota=N.

   S: $log

   T: $run

   M: The master directory DIRNAME has been found which had not been
   recorded in the MDCS for volume LVNAME. The master directory has been
   registered and the quota of N has been charged to the Initializer.SysDaemon
   quota account.
   This problem may have been caused by the loss and subsequent retreival of the
   master directory control segment, or by retreving a master directory.
   This message can only appear as a result of a register_mdir command
   performed by a system administrator.

   A: $ignore

   Message:
   mdc_repair_:validate_uidpaths: Master directory entry with bad uidpath deleted from LVNAME. PARTIAL-PATHNAME.

   S: $log

   T: $run

   M: The master directory control segment for LVNAME contains an
   entry for a mastr directory which no longer exists. The entry has been deleted and
   the quota is returned to the account from which it was drawn.
   This can happen if a master directory control segment has been lost and retreived,
   or if a mastr directory has been lost.

   A: $ignore

   END MESSAGE DOCUMENTATION */

     end mdc_repair_;
