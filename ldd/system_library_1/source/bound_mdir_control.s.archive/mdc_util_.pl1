/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* MDC_UTIL_:  Collection of primitives for maintaining Master Directory Control Segments */
/* All the functions of allocating and freeing items in an MDCS, or threading and unthreading them,
   are located in this module */

/* Written March 1976 by Larry Johnson */

mdc_util_: proc;


/* Parameters */

dcl  arg_code fixed bin (35);				/* A standard status code */
dcl  arg_mdcsp ptr;					/* Pointer to MDCS */
dcl  arg_mdirp ptr;					/* Pointer to directory entry in mdcs */
dcl  arg_acctp ptr;					/* Pointer to account entry in mdcs */
dcl  arg_person char (*);				/* Person part of quota account name */
dcl  arg_project char (*);				/* Project part of quota account name  */
dcl  arg_uidpath (0:15) bit (36) aligned;		/* UID pathname of master directory */
dcl  arg_pathhead bit (18) aligned;			/* Rel pointer to first entry in pathname  list */
dcl  arg_pathp ptr;

/* Automatic storage */

dcl (i, j) fixed bin;
dcl  tacctp ptr;					/* Temp pointer to account entry */
dcl  prev_offset bit (18);				/* Used while following threads */



dcl (addr, null, ptr, unspec, rel) builtin;

dcl  error_table_$file_is_full ext fixed bin (35);
dcl  error_table_$mdc_path_restrict ext fixed bin (35);

dcl  area condition;



%include mdcs;

/* Entry to get a free directory entry in the mdcs */

get_mdirent: entry (arg_mdcsp, arg_mdirp, arg_code);

	mdcsp = arg_mdcsp;
	arg_mdirp = null;				/* In case error return */

	on area go to full_file;
	allocate mdirent in (mdcs.area) set (mdirp);	/* Create new directory entry */

	unspec (mdirent) = "0"b;			/* Return an empty entry */
	arg_mdirp = mdirp;				/* Set return pointer */
	arg_code = 0;
	return;
full_file: arg_code = error_table_$file_is_full;
	return;


/* Entry to thread in a completed directory entry */

thread_mdirent: entry (arg_mdirp);

	mdirp = arg_mdirp;
	mdcsp = ptr (mdirp, 0);			/* Header at start of segment */
	mdirent.next = mdcs.dir_offset;		/* Make next old list head */
	mdcs.dir_offset = rel (mdirp);		/* And set new head */
	return;

/* Entry to find the directory entry for a given uid pathname */

find_mdirent: entry (arg_mdcsp, arg_uidpath, arg_mdirp);

	mdcsp = arg_mdcsp;
	arg_mdirp = null;
	mdirp = ptr (mdcsp, mdcs.dir_offset);		/* Head of list */
	do while (rel (mdirp) ^= "0"b);
	     if unspec (mdirent.uidpath) = unspec (arg_uidpath) then do;
		arg_mdirp = mdirp;			/* Found it */
		return;
	     end;
	     mdirp = ptr (mdcsp, mdirent.next);
	end;
	return;

/* Entry to free a directory entry */

free_mdirent: entry (arg_mdirp);

	mdirp = arg_mdirp;
	mdcsp = ptr (mdirp, 0);

	call unthread (mdcs.dir_offset, mdirp);		/* Unthread if from list */

	unspec (mdirent) = "0"b;			/* Clear out entry */
	free mdirent in (mdcs.area);
	arg_mdirp = null;				/* Invalidate callers pointer */
	return;

/* Entry to get a free account entry */

get_acctent: entry (arg_mdcsp, arg_acctp, arg_code);

	mdcsp = arg_mdcsp;
	arg_acctp = null;

	on area go to full_file;
	allocate acctent in (mdcs.area) set (acctp);

	unspec (acctent) = "0"b;			/* Clear new entry */
	arg_acctp = acctp;
	arg_code = 0;
	return;

/* Entry to free an account entry */

free_acctent: entry (arg_acctp);

	acctp = arg_acctp;
	mdcsp = ptr (acctp, 0);

	call unthread (mdcs.acct_offset, acctp);	/* Remove from list */

	unspec (acctent) = "0"b;			/* Clear free entry */
	free acctent in (mdcs.area);
	arg_acctp = null;
	return;

/* Entry to thread an account entry into the list according to the account name.
   Account names are divided into classes as for acls:
   0. Person.Project
   1. Person.*
   2. *.Project
   3. *.*
   All entries are ordered by class, and new entries go at the end of their class. */

thread_acctent: entry (arg_acctp);

	acctp = arg_acctp;
	mdcsp = ptr (acctp, 0);

	if mdcs.acct_offset = "0"b then do;		/* If list is empty, thread at head */
	     acctent.next = "0"b;			/* This is last */
	     mdcs.acct_offset = rel (acctp);
	     return;
	end;

	i = 0;					/* Compute class of new account name */
	if acctent.name.person = "*" then i = i + 2;
	if acctent.name.project = "*" then i = i + 1;

	prev_offset = "0"b;				/* Save previous pointer here when scanning list */
	tacctp = ptr (mdcsp, mdcs.acct_offset);		/* Head of list */
thacct_loop: j = 0;					/* Compute class of entry  */
	if tacctp -> acctent.name.person = "*" then j = j + 2;
	if tacctp -> acctent.name.project = "*" then j = j + 1;
	if i < j then do;				/* New class less than old, so  it goes here */
	     acctent.next = rel (tacctp);		/* Next pointer of new entry */
	     if prev_offset = "0"b then		/* If inserting at head of list */
		mdcs.acct_offset = rel (acctp);
	     else do;				/* Inserting in middle */
		tacctp = ptr (mdcsp, prev_offset);
		tacctp -> acctent.next = rel (acctp);
	     end;
	end;
	else if tacctp -> acctent.next = "0"b then do;	/* Reached end of list  */
	     acctent.next = "0"b;			/* Thread on end */
	     tacctp -> acctent.next = rel (acctp);
	end;
	else do;					/* Step to next one */
	     prev_offset = rel (tacctp);
	     tacctp = ptr (mdcsp, tacctp -> acctent.next);
	     go to thacct_loop;
	end;
	return;

/* Entry to find an account entry in the mdcs */

find_acctent: entry (arg_mdcsp, arg_person, arg_project, arg_acctp);

	arg_acctp = null;
	mdcsp = arg_mdcsp;

	acctp = ptr (mdcsp, mdcs.acct_offset);
	do while (rel (acctp) ^= "0"b);
	     if acctent.name.person = arg_person &
	     acctent.name.project = arg_project then do;
		arg_acctp = acctp;
		return;
	     end;
	     acctp = ptr (mdcsp, acctent.next);
	end;
	return;


/* Entry to find the proper quota account given person and project names */

find_matching_acctent: entry (arg_mdcsp, arg_person, arg_project, arg_acctp);

	mdcsp = arg_mdcsp;
	arg_acctp = null;
	acctp = ptr (mdcsp, mdcs.acct_offset);		/* First in list */
	do while (rel (acctp) ^= "0"b);
	     if (arg_person = acctent.person | acctent.person = "*") &
	     (arg_project = acctent.project | acctent.project = "*") then do;
		arg_acctp = acctp;
		return;
	     end;
	     acctp = ptr (mdcsp, acctent.next);
	end;
	return;

/* Entry to get a free pathname entry */

get_pathent: entry (arg_mdcsp, arg_pathp, arg_code);

	mdcsp = arg_mdcsp;
	arg_pathp = null;

	on area go to full_file;

	allocate pathent in (mdcs.area) set (pathp);

	unspec (pathent) = "0"b;
	arg_code = 0;
	arg_pathp = pathp;
	return;

/* Entry to thread in a new pathname entry */

thread_pathent: entry (arg_pathhead, arg_pathp);

	pathp = arg_pathp;

	pathent.next = arg_pathhead;			/* Make new entry point at current head */
	arg_pathhead = rel (pathp);			/* And make the head the new entry */
	return;

/* Entry that will search a pathent list for a given pathname */

find_pathent: entry (arg_pathhead, arg_uidpath, arg_pathp);

	arg_pathp = null;
	mdcsp = ptr (addr (arg_pathhead), 0);
	pathp = ptr (mdcsp, arg_pathhead);		/* First in list */
	do while (rel (pathp) ^= "0"b);		/* Scan entire list */
	     if unspec (pathent.uidpath) = unspec (arg_uidpath) then do;
		arg_pathp = pathp;			/* Go it */
		return;
	     end;
	     pathp = ptr (mdcsp, pathent.next);
	end;
	return;					/* Failed */

/* Entry to unthread and free a pathname entry */

free_pathent: entry (arg_pathhead, arg_pathp);

	pathp = arg_pathp;

	mdcsp = ptr (pathp, 0);
	call unthread (arg_pathhead, pathp);
	unspec (pathent) = "0"b;
	free pathent in (mdcs.area);
	arg_pathp = null;
	return;

/* Entry to check a pathname to see if it matches some element in a list */

check_pathent: entry (arg_pathhead, arg_uidpath, arg_code);

	arg_code = 0;
	if arg_pathhead = "0"b then return;		/* Everything matches an empty list */
	mdcsp = ptr (addr (arg_pathhead), 0);

	pathp = ptr (mdcsp, arg_pathhead);		/* First element in list */
	do while (rel (pathp) ^= "0"b);
	     do i = 0 to 15 while (pathent.uidpath (i) ^= "0"b);
		if pathent.uidpath (i) ^= arg_uidpath (i) then go to check_next;
	     end;
	     return;
check_next:    pathp = ptr (mdcsp, pathent.next);
	end;
	arg_code = error_table_$mdc_path_restrict;
	return;

/* Internal procedure that unthreads something from a list */

unthread:	proc (head, p);

dcl  head bit (18) aligned;				/* Rel pointer to head of list */
dcl  p ptr;					/* The element to unthread */
dcl  q ptr;

dcl 1 list aligned based,				/* All lists look like this */
    2 next bit (18) unal,
    2 fill bit (18) unal;

	     if head = "0"b then return;		/* Empty list is no problem */

	     if head = rel (p) then do;		/* Unthreading first thing in list */
		head = p -> list.next;		/* Make head second thing list */
		return;
	     end;

	     q = ptr (mdcsp, head);			/* Start of list */
	     do while (q -> list.next ^= "0"b);		/* Do until end */
		if q -> list.next = rel (p) then do;	/* Found entry before the one being removed */
		     q -> list.next = p -> list.next;	/* This does the unthreading */
		     return;			/* Done */
		end;
		q = ptr (mdcsp, q -> list.next);
	     end;
	     return;				/* Wasn't in list */

	end unthread;

     end mdc_util_;
