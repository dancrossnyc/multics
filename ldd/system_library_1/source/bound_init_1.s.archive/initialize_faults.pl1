/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* This procedure is called three times by the Multics initializer.
   It initializes the fault and interrupt mechanism by setting pointers
   in the fim, the wired_fim, the iom_interrupt, the pds, the prds, and the fault vector.
   The procedures restart_fault, and emergency_shutdown
   are also initialized.

   Last Modified: (Date and reason)

   01/06/84 by Keith Loepere for drl special drls in bce (breakpoints) and for pmut$cam_both.
   10/21/83 by Keith Loepere for hardcore_sct_seg$hardcore_sct_seg (in bound seg).
   05/17/83 by E. N. Kittlitz for drl_entry.
   09/22/82 by BIM to reorganize to signal in collection 1.
   08/10/82 by BIM to eliminate the zero out entirely.
   07/14/82 by BIM to change bootstrap1 to bound_bootload_1.
   06/25/82 by E. N. Kittlitz to move core map.
   03/19/81 by J. A. Bush during DPS8/70M debug to 0 out bootstrap1's SDW
   02/23/81 by J. Bongiovanni for fast connect code
   12/01/80 by C. Hornig for new interrupt mechanism.
   08/27/80 by J. A. Bush for  DPS8/70M
   08/13/79 by J. A. Bush for new signal_entry & parity_entry of fim
   05/10/79 by BSG for shared stack_0's.
   08/09/77 by Bernard Greenberg to reinstate derail fault  vector
   06/10/77 by Melanie Weaver to set up signaller and sct handler
   2/08/76 by Noel I. Morris for new reconfig
   01/06/75 at 21:07:50 by R F Mabee.  Removed crock setting signal_ptr in stack.
   4/25/74 by B. Greenberg for cache system
   2/74 by S. Webber for privileged-mode page control
   8/10/73 by R.Snyder to read switches to get bootload memory rather than believe MEM card.
   5/18/73 by R.Snyder to cause initialize interrupts to be ignored in general.
   7/26/71 by rhg to divert sys_trouble interrupts to special ii entry
   7/26/71 by RHG to make cell number reading off config deck be mod 64
   rather than pds$page_fault_data+32
   7/24/71 by RHG to use ii$paging_interrupt_entry, ii$pageable_interrupt_entry, scs$interrupt_state
   7/16/71 by Richard H. Gumpertz to fix initialization of pointers in prds, pds
   coded May 1970 by Roger R. Schell
*/


/* format: style2,^indattr */
initialize_faults:
     procedure;

/* Declaration of external references we want to get pointers to */

	dcl     sctptr ptr;
	dcl     sctp (0:1023) ptr unal based;

	dcl     core_map$ ext bit (36);
	dcl     copy_on_write_handler_$copy_on_write_handler_ ext entry;
	dcl     dseg$ (0:4095) fixed bin (71) ext;
	dcl     emergency_shutdown$ ext bit (36);
	dcl     fault_vector$ ext bit (36);
	dcl     fim$drl_entry entry ext;
	dcl     fim$onc_start_shut_entry entry ext;
	dcl     fim$parity_entry entry ext;
	dcl     fim$signal_entry entry ext;
	dcl     fim$access_violation_entry entry ext;
	dcl     fim$primary_fault_entry entry ext;
	dcl     hardcore_sct_seg$hardcore_sct_seg ext fixed bin;
	dcl     iom_interrupt$interrupt_entry entry ext;
	dcl     isot_fault_handler_$isot_fault_handler_ ext entry;
	dcl     lot_fault_handler_$lot_fault_handler_ ext entry;
	dcl     pds$stack_0_ptr ptr ext;
	dcl     1 pds$fim_data aligned like mc external;
	dcl     1 pds$page_fault_data aligned like mc external;
	dcl     1 pds$signal_data aligned like mc external;
	dcl     1 prds$fim_data aligned like mc external;
	dcl     prds$fast_connect_code entry external;
	dcl     1 prds$ignore_data aligned like scu external;
          dcl     prds$ignore_pl (8) bit (36) aligned external;
	dcl     1 prds$interrupt_data aligned like mc external;
	dcl     1 prds$sys_trouble_data aligned like mc external;
	dcl     return_to_ring_0_$restart_fault_ptr ptr ext;
	dcl     signal_$signal_ entry external;
	dcl     tc_data$ bit (36) aligned external;
	dcl     wired_fim$xec_fault entry external;
	dcl     wired_fim$unexp_fault entry external;
	dcl     wired_fim$ignore entry external;
	dcl     page_fault$fault entry external;
	dcl     wired_fim$timer_runout entry external;

	dcl     (
	        emergency_shutdown$lp,
	        emergency_shutdown$pp,
	        fim$prs,
	        fim$scu,
	        fim$sig_prs,
	        fim$sig_scu,
	        fim$lp,
	        iom_interrupt$iilink,
	        iom_interrupt$prds_prs,
	        iom_interrupt$prds_scu,
	        page_fault$my_lp,
	        pds$apt_ptr,
	        restart_fault$,
	        restart_fault$lp,
	        restart_fault$scu,
	        wired_fim$prs,
	        wired_fim$scuinfo,
	        wired_fim$trouble_prs,
	        wired_fim$trouble_scuinfo,
	        wired_fim$int_scuinfo,
	        wired_fim$ignore_pl,
	        wired_fim$ignore_scuinfo,
	        wired_fim$my_linkage_ptr,
	        page_fault$cme_offsets,
	        page_fault$pf_prs,
	        page_fault$pf_scuinfo
	        ) pointer external;


	dcl     cme_offsets (0:size (cme) - 1) ptr based (addr (page_fault$cme_offsets));

	dcl     lot$ (0:1023) pointer unaligned external static;

	dcl     privileged_mode_ut$cam_both ext entry,	/* to clear our associative memory */
	        privileged_mode_ut$set_mask entry (bit (72) aligned, fixed bin (71)),
						/* to set memory controller masks */
	        privileged_mode_ut$ldt ext entry (fixed bin);
						/* to load timer register */
	dcl     sdw_util_$get_access entry (ptr, bit (4) unaligned);
	dcl     sdw_util_$set_access entry (ptr, bit (4) unaligned);


	dcl     (
	        ignore_ptr,				/* pointer to FIM entry to ignore */
	        ignore_d_ptr,			/* pointer to place in PRDS for ignored SCU data */
	        primary_trap,
	        primary_scup,
	        signal_trap,
	        signal_scup,
	        onc_trap,
	        onc_scup,
	        unexp_trap,
	        unexp_scup,
	        p
	        ) ptr;

	dcl     i fixed bin (5);			/* loop index */
	dcl     access bit (4);			/* saved access of procedure segment */

	dcl     (addr, baseno, baseptr, codeptr, fixed, null, ptr, size) builtin;

	declare (
	        initialize_faults_data$primary_one,
	        initialize_faults_data$primary_two,
	        initialize_faults_data$signal_one,
	        initialize_faults_data$signal_two,
	        initialize_faults_data$onc_one,
	        initialize_faults_data$onc_two
	        ) (0:31) bit (1) unaligned ext static;



/* FAULT_INIT_ONE - Initialize Fault and Interrupt Mechanism
   and Set Up Fault Vector for Remainder of Initialization */

fault_init_one:
     entry;

/* initialize pointers that we will need */

	call GET_STANDARD_POINTERS;


	do i = 0 to 31;				/* first set up all faults and interrupts the same */

	     if initialize_faults_data$primary_one (i)
	     then do;
		     fv.f_tra_ptr (i) = primary_trap;
		     fv.f_scu_ptr (i) = primary_scup;
		end;
	     else if initialize_faults_data$signal_one (i)
	     then do;
		     fv.f_tra_ptr (i) = signal_trap;
		     fv.f_scu_ptr (i) = signal_scup;
		end;
	     else if initialize_faults_data$onc_one (i)
	     then do;
		     fv.f_tra_ptr (i) = onc_trap;
		     fv.f_scu_ptr (i) = onc_scup;
		end;
	     else do;				/* otherwise unaccounted for */
		     fv.f_tra_ptr (i) = unexp_trap;
		     fv.f_scu_ptr (i) = unexp_scup;
		end;


	     fv.i_tra_ptr (i) = ignore_ptr;		/* ignore all interrupts */
	     fv.i_scu_ptr (i) = ignore_d_ptr;		/* put SCU data where we can find it */

	end;

	fv.f_tra_ptr (FAULT_NO_LUF) = ignore_ptr;	/* ignore lockup faults */
	fv.f_scu_ptr (FAULT_NO_LUF) = ignore_d_ptr;	/* put SCU data where we can find it */

	fv.f_tra_ptr (FAULT_NO_TRO) = ignore_ptr;
	fv.f_scu_ptr (FAULT_NO_TRO) = ignore_d_ptr;

/* Execute faults have special meaning. */
	fv.f_tra_ptr (FAULT_NO_EXF) = codeptr (wired_fim$xec_fault);
	fv.f_scu_ptr (FAULT_NO_EXF) = addr (prds$sys_trouble_data.scu);

/* set up for page faults */
	fv.f_tra_ptr (FAULT_NO_DF1) = codeptr (page_fault$fault);
	fv.f_scu_ptr (FAULT_NO_DF1) = addr (pds$page_fault_data.scu);

/* set up for df0 (seg faults) */
	fv.f_tra_ptr (FAULT_NO_DF0) = codeptr (fim$primary_fault_entry);
	fv.f_scu_ptr (FAULT_NO_DF0) = addr (addr (pds$fim_data) -> mc.scu (0));

/* entry for connect faults */
	fv.f_tra_ptr (FAULT_NO_CON) = codeptr (prds$fast_connect_code);
	fv.f_scu_ptr (FAULT_NO_CON) = addr (prds$fim_data.scu);

/* direct derail faults to a special entry */

	fv.f_tra_ptr (FAULT_NO_DRL) = addr (fim$drl_entry);

/* initialize the FIM */

	call set_access (fim$prs);
	fim$prs = addr (pds$fim_data);		/* Set pointer to place for pointer regs. */
	fim$scu = addr (pds$fim_data.scu);		/* Set pointer to place for SCU data. */
	fim$sig_prs = addr (pds$signal_data);		/* Set ptr for signal_data ptr regs. */
	fim$sig_scu = addr (pds$signal_data.scu);	/* Set ptr for signal_data SCU data. */
	call set_lp (fim$lp);			/* Store linkage pointer and set access. */

/* initialize the Interrupt Interceptor */

	call set_access (iom_interrupt$prds_prs);

	iom_interrupt$prds_prs = addr (prds$interrupt_data);
						/* Set pointer for SPRI in the PRDS */
	iom_interrupt$prds_scu = addr (prds$interrupt_data.scu);
						/* Set pointer for SCU in the PRDS */
	call set_lp (iom_interrupt$iilink);		/* Store linkage ptr. */

/* initialize wired_fim */

	call set_access (wired_fim$prs);

	wired_fim$prs = addr (prds$fim_data);		/* Set pointer to place for pointer registers. */
	wired_fim$scuinfo = addr (prds$fim_data.scu);	/* Set pointer to place for SCU data. */

/* Set machine condition pointer for wired_sys_trouble. */
	wired_fim$trouble_prs = addr (prds$sys_trouble_data);
						/* Set pointer to place for pointer registers. */
	wired_fim$trouble_scuinfo = addr (prds$sys_trouble_data.scu);
						/* Set pointer to place for SCU data. */

	wired_fim$int_scuinfo = addr (pds$page_fault_data.scu);
						/* Set pointer in wired_fim. */

	wired_fim$ignore_pl = addr (prds$ignore_pl);
	wired_fim$ignore_scuinfo = ignore_d_ptr;	/* Set pointer for ignoring faults. */

	call set_lp (wired_fim$my_linkage_ptr);		/* store linkage pointer */

/* initialize Page Fault Handler */

	call set_access (page_fault$my_lp);

	page_fault$pf_prs = addr (pds$page_fault_data);	/* save pointer to place for pointer registers */
	page_fault$pf_scuinfo = addr (pds$page_fault_data.scu);
						/* save pointer to place for SCU data */
	cmep = null;
	do i = 0 to size (cme) - 1;			/* set up C.M. ITS pointers */
	     cme_offsets (i) = ptr (addr (core_map$), i);
	end;
	call set_lp (page_fault$my_lp);		/* store linkage pointer for page */

/* initialize restart_fault */

	call set_access (restart_fault$scu);
	restart_fault$scu = addr (pds$signal_data.scu);	/* Set RCU pointer for restart_fault. */
	call set_lp (restart_fault$lp);		/* store linkage pointer */

/* initialize emergency_shutdown */

	call set_access (emergency_shutdown$lp);
	emergency_shutdown$pp = addr (emergency_shutdown$);
						/* save pointer to itself */
	call set_lp (emergency_shutdown$lp);		/* store linkage pointer */

	pds$apt_ptr = addr (tc_data$);		/* set pointer so that pxss can work */


/* Initialize return_to_ring_0_$restart_fault_ptr for returns to ring zero */

	call set_access (return_to_ring_0_$restart_fault_ptr);
						/* allow stores to rr0_ */
	return_to_ring_0_$restart_fault_ptr = addr (restart_fault$);
						/* store pointer to restart_fault */
	call restore_access;			/* restore old rr0_ access */

/* What follows used to be signal_init */

/* Fill in inzr_stk0 stack base. init_stack_0 will fill in others */

	pds$stack_0_ptr = stackbaseptr ();		/* Allow fim to work, interim. */
	stackbaseptr () -> stack_header.signal_ptr = codeptr (signal_$signal_);
	stackbaseptr () -> stack_header.unwinder_ptr = null;
						/* take a fault */
	stackbaseptr () -> stack_header.sct_ptr = addr (hardcore_sct_seg$hardcore_sct_seg);

/* Put a standard for scu/tra pair in the vector for derail. Bootstrap1 has been leaving it lying around
   as an immediate RTB up till now for clean crashes. */

	fv.fpair (FAULT_NO_DRL).scu = rel (addr (fv.f_scu_ptr (FAULT_NO_DRL))) || "657220"b3;
						/* fv seg is at 0 abs. */
	fv.fpair (FAULT_NO_DRL).tra = rel (addr (fv.f_tra_ptr (FAULT_NO_DRL))) || "710220"b3;

	scs$faults_initialized = "1"b;		/* Mark faults as initialized. */
	return;


/* INTERRUPT_INIT - Set Up Interrupt Vector for Multics Operation. */

interrupt_init:
     entry;

/* initialize pointers */

	fvp = addr (fault_vector$);			/* Get pointer to fault vector. */

/* turn off all interrupts */

	call privileged_mode_ut$set_mask (scs$sys_level, 0);
						/* Make sure no interrupts come in. */
						/* set up SCU pointer for the PRDS */
	fv.i_tra_ptr (*) = codeptr (iom_interrupt$interrupt_entry);
	fv.i_scu_ptr (*) = addr (prds$interrupt_data.scu);

/* Open the memory controller mask */

	call privileged_mode_ut$set_mask (scs$open_level, 0);
						/* Open mask for all interrupts. */

	return;					/* Interrupts are under weigh. */


/* FAULT_INIT_TWO -- reset some fault vector assignments for file system */
/*	           operations */

fault_init_two:
     entry;


	call GET_STANDARD_POINTERS;

/* set the timer to give us time to change fault vector */

	call privileged_mode_ut$ldt (-1);		/* Load the timer register. */

/* Direct most faults to the FIM. */

	do i = 0 to 31;				/* Loop. */

	     if initialize_faults_data$primary_two (i)
	     then do;
		     fv.f_tra_ptr (i) = primary_trap;
		     fv.f_scu_ptr (i) = primary_scup;
		end;
	     else if initialize_faults_data$signal_two (i)
	     then do;
		     fv.f_tra_ptr (i) = signal_trap;
		     fv.f_scu_ptr (i) = signal_scup;
		end;
	     else if initialize_faults_data$onc_two (i)
	     then do;
		     fv.f_tra_ptr (i) = onc_trap;
		     fv.f_scu_ptr (i) = onc_scup;
		end;
		else if i > 25 & i < 31
		then do;
			fv.f_tra_ptr (i) = unexp_trap;
			fv.f_scu_ptr (i) = unexp_scup;
		     end;		     
	end;

/* direct access violations to a special entry */

	fv.f_tra_ptr (FAULT_NO_ACV) = codeptr (fim$access_violation_entry);
	fv.f_scu_ptr (FAULT_NO_ACV) = primary_scup;

/* direct derail faults to a special entry */

	fv.f_tra_ptr (FAULT_NO_DRL) = addr (fim$drl_entry);

/* Direct timer runouts to special handler. */

	fv.f_tra_ptr (FAULT_NO_TRO) = codeptr (wired_fim$timer_runout);
	fv.f_scu_ptr (FAULT_NO_TRO) = addr (prds$fim_data.scu);

/* direct parity errors to a special entry */

	fv.f_tra_ptr (FAULT_NO_PAR) = codeptr (fim$parity_entry);
	fv.f_scu_ptr (FAULT_NO_PAR) = primary_scup;

/* Fill in the ring zero static handlers. This can only be called after */
/* collection 2 is loaded */

	sctptr = addr (hardcore_sct_seg$hardcore_sct_seg);

	sctptr -> sctp (no_write_permission_sct_index) = codeptr (copy_on_write_handler_$copy_on_write_handler_);
	sctptr -> sctp (isot_fault_sct_index) = codeptr (isot_fault_handler_$isot_fault_handler_);
	sctptr -> sctp (lot_fault_sct_index) = codeptr (lot_fault_handler_$lot_fault_handler_);

	return;
%page;
/* SET_LP - Store Linkage Pointer and Set Proper Access. */

set_lp:
     proc (link_ptr);				/* Entry to set text-embedded linkage pointers */

	dcl     link_ptr ptr;			/* cell to contain linkage pointer */

	dcl     segno fixed bin (15);			/* segment number of segment */
	dcl     target_ptr ptr;			/* pointer to segment whose linkage we want */

	target_ptr = addr (link_ptr);			/* for set_lp we want our own linkage */

	segno = fixed (baseno (target_ptr), 18);	/* compute segment number */
	link_ptr = lot$ (segno);			/* Generate pointer to linkage section. */


	call restore_access;			/* restore proper seg access */

	return;

     end set_lp;



/* SET_ACCESS/RESTORE_ACCESS - Set Write Access to Procedure and Reset Later. */

set_access:
     procedure (textp);				/* proc to set write access */

	dcl     segno fixed bin (15);
	dcl     textp ptr;				/* any pointer residing in text segment */

	segno = fixed (baseno (addr (textp)), 18);	/* get segment number */
	call sdw_util_$get_access (addr (dseg$ (segno)), access);
						/* save old access */
	call sdw_util_$set_access (addr (dseg$ (segno)), access | RW_ACCESS);
						/* allow writing */
	call privileged_mode_ut$cam_both;		/* make sure it takes */

	return;


restore_access:
     entry;					/* to be called after set_access has been called */

	call sdw_util_$set_access (addr (dseg$ (segno)), access);
						/* restore old access */
	call privileged_mode_ut$cam_both;		/* make sure that takes */

	return;


     end set_access;


GET_STANDARD_POINTERS:
     procedure;

	fvp = addr (fault_vector$);
	ignore_ptr = codeptr (wired_fim$ignore);
	ignore_d_ptr = addr (prds$ignore_data);

/* initialize SCU and TRA pointers for faults and interrupts */

	primary_trap = codeptr (fim$primary_fault_entry);
	primary_scup = addr (pds$fim_data.scu);
	signal_trap = codeptr (fim$signal_entry);
	signal_scup = addr (pds$signal_data.scu);
	onc_trap = codeptr (fim$onc_start_shut_entry);
	onc_scup = primary_scup;
	unexp_trap = codeptr (wired_fim$unexp_fault);
	unexp_scup = addr (prds$sys_trouble_data.scu);
     end;

%page;
%include cmp;
%include fault_vector;
%include mc;
%include scs;
%include static_handlers;
%include stack_header;
%include access_mode_values;
     end initialize_faults;
