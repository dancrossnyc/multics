/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
map_onto_disk: proc (pvtx, first_record, num_records, seg_ptr, contents_valid);

/* Utility procedure to map a segment onto a specified area of disk.
Written October 1983, Keith Loepere. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  addr			        builtin;
dcl  bin			        builtin;
dcl  bit			        builtin;
dcl  contents_valid		        bit (1) aligned parameter; /* 0 => contents of disk are not important, map using nulled addresses */
dcl  first_record		        fixed bin (20) parameter; /* first record on disk to map */
dcl  make_sdw$no_pages	        entry (fixed bin (15), fixed bin (71), ptr, ptr);
dcl  num_records		        fixed bin parameter;	/* num records to map */
dcl  page			        fixed bin;		/* loop index */
dcl  page_table		        (0:num_records - 1) bit (36) aligned based (ptp);
dcl  partition_sdw		        fixed bin (71);	/* for created segment */
dcl  pmut$swap_sdw		        entry (ptr, ptr);
dcl  ptp			        pointer;		/* to page table for segment */
dcl  ptw_util_$make_disk	        entry (ptr, fixed bin (20));
dcl  ptw_util_$make_null_disk	        entry (ptr, fixed bin (20));
dcl  pvtx			        fixed bin parameter;	/* pvtx of disk to map */
dcl  seg_ptr		        ptr parameter;	/* ptr to resultant segment */
dcl  segno		        builtin;
%page;

/* Get an ASTE that describes the segment, with a page table full of null 
addresses. Then make it point to the disk. */

	call make_sdw$no_pages (segno (seg_ptr), partition_sdw, astep, ptp);

	aste.pvtx = pvtx;
	aste.msl, aste.csl, aste.records = bit (bin (num_records, 9), 9);

	do page = 0 to num_records - 1;
	     if contents_valid then call ptw_util_$make_disk (addr (page_table (page)), page + first_record);
	     else call ptw_util_$make_null_disk (addr (page_table (page)), page + first_record);
	end;

	call pmut$swap_sdw (seg_ptr, addr (partition_sdw));
	return;
%page; %include aste;
     end;
