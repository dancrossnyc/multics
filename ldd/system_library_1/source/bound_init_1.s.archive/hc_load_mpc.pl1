/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

hc_load_mpc: procedure (MPC_chanid, FW_seg_ptr, FW_seg_length, Reason, Code);

/* HC_LOAD_MPC -- given a chanid and firmware segment, */
/*                use io_manager or IOI to boot an mpc */
/* Modified for urc support, Keith Loepere 1/84 */
/* Modified for test_controller, Keith Loepere 3/84 */
/* Modified for IMU power off retries, Paul Farley 7/84 */
/* Modified to not hang when supplied a non-existant MPC, Keith Loepere, 3/85 */

/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(86-02-25,Coppola), install(86-03-21,MR12.0-1033):
     extend POF retries to 20 seconds, (add POF to test_controller entry).
  2) change(86-03-27,Farley), approve(86-07-18,MCR7471),
     audit(86-08-18,Fawcett), install(86-10-20,MR12.0-1189):
     Convert to use IOI when necessary, now that it is at BCE.
  3) change(86-07-07,Farley), approve(86-07-18,MCR7471),
     audit(86-08-18,Fawcett), install(86-10-20,MR12.0-1189):
     Changed to check DAU after firmware load to see if really operational. DAU
     continues to do initialization after good FW load terminate, so OPI may
     not be up yet.
  4) change(86-08-14,Farley), approve(86-10-24,MCR7529),
     audit(86-10-28,Fawcett), install(86-10-28,MR12.0-1200):
     Extended post firmware load status test to ALL DISK MPCs, as it has been
     found that they all have the timing window, but very small.
  5) change(87-05-06,Farley), approve(87-07-07,MCR7725),
     audit(87-07-09,Rauschelbach), install(87-07-15,MR12.1-1041):
     Corrected the placement of port_mask in the io_buffer. Was getting 13/03
     (check sum errors) from the URP MPCs. Also changed the "Data" structure in
     BOOT_SECTION to be zero based, since "fw_seg" is zero based.
  6) change(87-05-29,Farley), approve(87-07-07,MCR7725),
     audit(87-07-09,Rauschelbach), install(87-07-15,MR12.1-1041):
     Changed to only use io_buffer (removed all references to dcw_list). Now
     have IO_buf_data_wds variable to define the size of the io_buffer.
  7) change(88-02-23,Farley), approve(88-02-23,MCR7793),
     audit(88-02-24,Fawcett), install(88-03-01,MR12.2-1029):
     Changed the DISK_MPC procedure to return TRUE if no MPC card is found,
     when the initialization state is 1 (in BCE @ collection 1).  This is
     because very early in the boot cycle there is no MPC card, but a wait is
     still needed for the disk mpc.
                                                   END HISTORY COMMENTS */

dcl  Code				fixed bin (35) parameter;
dcl  FW_seg_length			fixed bin (18) parameter;
dcl  FW_seg_lengths			(*) fixed bin (18) parameter;
dcl  FW_seg_ptr			pointer parameter;
dcl  FW_seg_ptrs			(*) ptr parameter;
dcl  MPC_chanid			char (8) aligned parameter;
dcl  Reason			character (*) parameter;

dcl  EIGHT_PAGES			fixed bin init (8192) static options (constant);
dcl  FIVE_SECOND			fixed bin (71) init (5000000) static options (constant);
dcl  HALF_SECOND			fixed bin (71) init (500000) static options (constant);
dcl  MPCW				character (4) aligned init ("MPCw") internal static options (constant);
dcl  ONE_SECOND			fixed bin (71) init (1000000) static options (constant);
dcl  PRIV				bit (1) aligned init ("1"b) static options (constant);
dcl  TEST_CONTROLLER_EVENT		char (4) init ("tsdc") static options (constant);
dcl  TWENTY_SECOND			fixed bin (71) init (20000000) static options (constant);
dcl  ZERO_PAGES			fixed bin init (0) static options (constant);

dcl  FWID				character (8);
dcl  FWOVERLAY			character (8);
dcl  FWREV			character (8);
dcl  IOI_attached			bit (1);
dcl  IOI_chnl			fixed bin (7);
dcl  IOI_event			fixed bin (71);
dcl  IOI_index			fixed bin;
dcl  IOI_iom			fixed bin (3);
dcl  IOI_pcw			bit (36) aligned;
dcl  IO_buf_data_wds		fixed bin;
dcl  IO_buf_wired			bit (1);
dcl  MPC_name			char (8) aligned;
dcl  astep			pointer;
dcl  control_store_length		fixed bin (18);
dcl  control_store_ptr		pointer;
dcl  event			fixed bin (35);
dcl  finish			fixed bin (71);
dcl  fw_overlay			fixed bin;
dcl  fw_seg_count			fixed bin;
dcl  fw_seg_length			fixed bin (18);
dcl  fw_seg_lengths_ptr		ptr;
dcl  fw_seg_num			fixed bin;
dcl  fw_seg_ptr			ptr;
dcl  fw_seg_ptrs_ptr		ptr;
dcl  groupx			fixed bin;
dcl  1 ima			aligned like io_manager_arg;
dcl  io_buffer_ptr			pointer;
dcl  max_wait			fixed bin (71);
dcl  needs_booting			(2:17) bit (1);	/* overlay for this la hasn't been booted (org of 2 since "la" 1 is main firmware) */
dcl  portx			fixed bin;	/* mpc card port index */
dcl  read_write			bit (1) aligned;
dcl  read_write_length		fixed bin (18);
dcl  read_write_ptr			pointer;
dcl  time				fixed bin (71);

dcl  fw_seg			(0:fw_seg_length) bit (36) based (fw_seg_ptr);
dcl  fw_seg_lengths			(fw_seg_count) fixed bin (18) based (fw_seg_lengths_ptr);
dcl  fw_seg_ptrs			(fw_seg_count) ptr based (fw_seg_ptrs_ptr);
dcl  1 io_buffer			aligned based (io_buffer_ptr),
						/* The ioi workspace */
       2 idcw			bit (36),
       2 dcw			(2) bit (36),
       2 pad			(5) bit (36),
       2 status			like istat,	/* mod-8 */
       2 port_mask			bit (36),		/* Urmpc port mask for device firmware */
						/* NOTE: port_mask must be just prior to data */
       2 data			(IO_buf_data_wds) bit (36);

dcl  absadr			entry (ptr, fixed bin (35)) returns (fixed bin (26));
dcl  bcd_to_ascii_			entry (bit (*), character (*));
dcl  config_$find			entry (char (4) aligned, ptr);
dcl  get_ptrs_$given_segno		entry (fixed bin (15), pointer);
dcl  io_chnl_util$name_to_iom
				entry (char (8) aligned, fixed bin (3), fixed bin (7), fixed bin (35));
dcl  ioa_				entry options (variable);
dcl  ioa_$rsnnl			entry options (variable);
dcl  ioi_assignment$assign
				entry (fixed bin, char (*) aligned, fixed bin (71), bit (1) aligned, fixed bin (35));
dcl  ioi_assignment$unassign
				entry (fixed bin, fixed bin (35));
dcl  ioi_connect			entry (fixed bin, fixed bin (18), fixed bin (35));
dcl  ioi_connect$ioi_connect_pcw	entry (fixed bin, fixed bin (18), bit (36) aligned, fixed bin (35));
dcl  ioi_set$channel_required
				entry (fixed bin, fixed bin (3), fixed bin (7), fixed bin (35));
dcl  ioi_set$max_workspace
				entry (fixed bin, fixed bin (18), fixed bin (35));
dcl  ioi_set$status			entry (fixed bin, fixed bin (18), fixed bin (8), fixed bin (35));
dcl  ioi_set$workspace		entry (fixed bin, ptr, fixed bin (18), fixed bin (35));
dcl  pc_abs$unwire_abs		entry (ptr, fixed bin (9), fixed bin (35));
dcl  pc_abs$wire_abs_contig		entry (ptr, fixed bin (9), fixed bin (9), fixed bin (35));
dcl  pxss$addevent			entry (fixed bin (35));
dcl  pxss$notify			entry;
dcl  pxss$wait			entry;
dcl  syserr			entry options (variable);

dcl  cleanup			condition;

dcl  error_table_$bad_arg		fixed bin (35) external static;
dcl  error_table_$bad_channel		fixed bin (35) external static;
dcl  error_table_$device_not_active	fixed bin (35) external static;
dcl  error_table_$io_no_permission	fixed bin (35) ext static;
dcl  error_table_$seg_not_found	fixed bin (35) ext static;
dcl  error_table_$timeout		fixed bin (35) external static;
dcl  sys_info$initialization_state	fixed bin external static;

dcl  (addr, addrel, baseno, binary, bin, bit, clock, dimension, divide, lbound,
     hbound, max, min, null, rel, size, string, substr, unspec) builtin;
%page;
	fw_seg_count = 1;
	fw_seg_ptrs_ptr = addr (FW_seg_ptr);
	fw_seg_lengths_ptr = addr (FW_seg_length);
	go to join;

urc: entry (MPC_chanid, FW_seg_ptrs, FW_seg_lengths, Reason, Code);

	fw_seg_count = dimension (FW_seg_ptrs, 1);
	fw_seg_ptrs_ptr = addr (FW_seg_ptrs);
	fw_seg_lengths_ptr = addr (FW_seg_lengths);

join:
	Code = 0;
	Reason = "";
	needs_booting (*) = "1"b;

/***** ATTACH THE MPC ******/

	unspec (ima) = ""b;
	unspec (event) = unspec (MPCW);
	ima.ptp, ima.dcw_pair_ptr = null;
	io_buffer_ptr = null;
	IOI_attached = "0"b;
	IOI_pcw = ""b;
	IO_buf_wired = ""b;
	IO_buf_data_wds = EIGHT_PAGES;		/* Most that can be loaded with 2 DCW's */
	on cleanup call CLEANUP;

	call io_manager$assign (ima.chx, MPC_chanid, pxss$notify, event, io_status_word_ptr, Code);
	if Code ^= 0 then
	     if Code = error_table_$io_no_permission then do; /* iom_data.per_device.in_use = "1"b */
		call IOI_ATTACH;
		if Code ^= 0 then return;
		IOI_attached = "1"b;
	     end;
	     else return;

	if IOI_attached then pcwp = addr (IOI_pcw);
	else pcwp = addr (ima.pcw);
	pcw.code = "7"b3;
	pcw.mask = "1"b;
	pcw.control = "11"b;

	if ^IOI_attached then do;
	     allocate io_buffer set (io_buffer_ptr);
	     if sys_info$initialization_state > 1 /* guaranteed A-W-C in collection 1 */ then do;
		call get_ptrs_$given_segno (binary (baseno (io_buffer_ptr), 15), astep);
		call pc_abs$wire_abs_contig (astep, divide (bin (rel (io_buffer_ptr), 18), 1024, 9, 0),
		     divide (1023 + size (io_buffer), 1024, 9, 0), Code);
		if Code ^= 0 then call syserr (CRASH, "hc_load_mpc: Could not abs_wire buffer.");
		IO_buf_wired = "1"b;
	     end;
	end;

	unspec (io_buffer) = ""b;

	idcwp = addr (io_buffer.idcw);
	idcw.code = "7"b3;
	idcw.chan_cmd = "02"b3;

	if IOI_attached then call IOI_DC_RESET;
	else do;
	     ima.listp = addr (io_buffer.idcw);

	     call CONNECT_NO_WAIT;			/* we get no status back */
	end;

/* Now we need to spin for a second. How long is that ? */

	finish = clock () + ONE_SECOND;		/* set 1 sec timer */
	max_wait = clock () + TWENTY_SECOND;		/* set 20 second timer */

	do while (clock () < finish);			/* TickTock */
	end;

/**** So much for the DC_RESET/BTLT phase */

	do fw_seg_num = 1 to fw_seg_count;
	     fw_seg_ptr = fw_seg_ptrs (fw_seg_num);
	     fw_seg_length = fw_seg_lengths (fw_seg_num);
	     if fw_seg_ptr = null then go to next_overlay;

	     if fw_seg (fw_seg_length) ^= MPCBOT /* small gullibility check */ then do;
		Code = error_table_$bad_arg;		/* ?? */
		go to RETURN;
	     end;

/**** the - 1, in the following line, is there since we are starting
      at the last word of the structure, not the word afterwards */

	     trailer_ptr = addrel (addr (fw_seg (fw_seg_length)), -(size (fw_trailer) - 1));

	     unspec (io_buffer) = ""b;

	     control_store_ptr = fw_seg_ptr;
	     if fw_seg_num > 1 then do;		/* urc overlays */
		if ^needs_booting (fw_seg_num) then go to next_overlay;
		io_buffer.port_mask = "0"b;
		do fw_overlay = fw_seg_num to fw_seg_count;
		     if needs_booting (fw_overlay) & (fw_seg_ptr = fw_seg_ptrs (fw_overlay)) then do;
			substr (io_buffer.port_mask, fw_overlay, 1) = "1"b; /* this la uses this overlay */
			needs_booting (fw_overlay) = "0"b;
		     end;
		end;
		control_store_length = fw_seg_length - 9;
		read_write_ptr = null;
		read_write = "0"b;
	     end;
	     else if fw_trailer.rw_start = 0 then do;
		control_store_length = fw_seg_length - 9;
		read_write_ptr = null;
		read_write = "0"b;
	     end;
	     else do;
		read_write = "1"b;
		control_store_length = fw_trailer.rw_start;
		read_write_ptr = addr (fw_seg (fw_trailer.rw_start));
		read_write_length = fw_seg_length - fw_trailer.rw_start - 9; /* -10 + 1, actually */
	     end;

/* We will assume correct checksum in this implementation. */

	     call bcd_to_ascii_ (fw_trailer.id_name, FWID);
	     call bcd_to_ascii_ (fw_trailer.rev_level, FWREV);
	     call bcd_to_ascii_ (fw_trailer.overlay, FWOVERLAY);

	     if sys_info$initialization_state <= 1 then
		call ioa_ ("hc_load_mpc: Booting channel ^a with ^a Revision ^a^[ Overlay ^a^;^s^].", MPC_chanid,
		     FWID, substr (FWREV, 5, 2), fw_seg_num ^= 1, substr (FWOVERLAY, 1, 4));
	     else call syserr (ANNOUNCE, "hc_load_mpc: Booting channel ^a with ^a Revision ^a^[ Overlay ^a^;^s^].",
		     MPC_chanid, FWID, substr (FWREV, 5, 2), fw_seg_num ^= 1, substr (FWOVERLAY, 1, 4));

/**** Time to do the actual load */

	     idcwp = addr (io_buffer.idcw);
	     idcw.code = "7"b3;

	     if fw_seg_num = 1 then do;
		idcw.command = "10"b3;
	     end;
	     else do;				/* urc overlay */
		idcw.command = "36"b3;
		idcw.device = "01"b3;
		idcw.chan_cmd = "40"b3;
	     end;
	     call BOOT_SECTION ("Control Store", control_store_ptr, control_store_length, fw_seg_num ^= 1);

	     if read_write then do;
		unspec (io_buffer) = ""b;
		idcwp = addr (io_buffer.idcw);
		idcw.code = "7"b3;
		idcw.command = "11"b3;
		call BOOT_SECTION ("Read Write", read_write_ptr, read_write_length, "0"b);
	     end;
next_overlay:
	end;

	if DISK_MPC ()				/* special test for disk mpcs */
	     then call TEST_MPC (TWENTY_SECOND);

RETURN:
	call CLEANUP;
	return;

BOOT_SECTION: procedure (Name, Data_ptr, Data_length, Urc);

dcl  Data_length			fixed bin (18) parameter;
dcl  Data_ptr			ptr parameter;
dcl  Name				char (*) parameter;
dcl  Urc				bit (1) aligned parameter;

dcl  Data				(0:Data_length) bit (36) based;

dcl  data_absadr			fixed bin (26);
dcl  tally_length			fixed bin (12);
dcl  to_do			fixed bin;

	string (ima.pcw) = ""b;

	addr (io_buffer.data) -> Data = Data_ptr -> Data; /* Copy to low 256 K */

	dcwp = addr (io_buffer.dcw (1));

	if Urc then do;
	     to_do = Data_length + 1;
	     data_absadr = absadr (addr (io_buffer.port_mask), (0));
	end;
	else do;
	     to_do = Data_length;
	     data_absadr = absadr (addr (io_buffer.data), (0));
	end;
	if data_absadr + to_do > 1024 * 256 then call syserr (CRASH, "hc_load_mpc: data buffer not in low 256K");
	if IOI_attached then data_absadr = data_absadr - absadr (addr (io_buffer), (0));
						/* relatize for IOI */
	do while (to_do > 0);
	     string (dcw) = ""b;
	     dcw.address = bit (bin (data_absadr, 18), 18);
	     tally_length = min (to_do, 4096);
	     to_do = to_do - tally_length;
	     data_absadr = data_absadr + tally_length;
	     if tally_length = 4096 then tally_length = 0;
	     dcw.tally = bit (tally_length, 12);
	     dcw.type = "01"b;			/* IOTP */
	     if to_do > 0 then dcwp = addr (io_buffer.dcw (2));
	end;
	dcw.type = "00"b;				/* IOTD */

/***** The buffer is set up */

retry_the_connect:
	ima.listp = addr (io_buffer.idcw);

	unspec (io_status_word) = ""b;
	if IOI_attached then call IOI_CONNECT;
	else call CONNECT;

	if ^io_status_word.t then do;
	     Code = error_table_$timeout;
	     Reason = Name;
	     go to RETURN;
	end;
	if io_status_word.power then do;
	     if clock () < max_wait then do;		/* retry power offs for awhile */
		finish = clock () + HALF_SECOND;	/* 1/2 second pause */
		do while (clock () < finish);		/* TickTock */
		end;
		goto retry_the_connect;
	     end;
	     Code = -1;
	     Reason = "Power off status booting " || Name;
	     go to RETURN;
	end;

	if (io_status_word.major ^= ""b) | (io_status_word.sub ^= ""b) | (io_status_word.channel_stat ^= ""b)
	     | (io_status_word.central_stat ^= ""b) then do;
	     call ioa_$rsnnl ("IOM status ^.3b booting ^a.", Reason, (0), string (io_status_word), Name);
	     Code = -2;
	     go to RETURN;
	end;

	return;
     end BOOT_SECTION;

CONNECT: procedure;

dcl  wait_flag			bit (1) aligned;

	wait_flag = "1"b;
	go to COMMON;

CONNECT_NO_WAIT: entry;

	wait_flag = "0"b;

COMMON:
	unspec (io_status_word) = ""b;

	call io_manager$connect_abs (ima);

	if ^wait_flag then return;

	do while (^io_status_word.t);			/* Noel swears something will come back */
	     call pxss$addevent (event);
	     call pxss$wait;
	end;
	return;
     end CONNECT;
%page;
CLEANUP:
     procedure;

	if IOI_attached then call IOI_DETACH;
	else do;
	     if ima.chx ^= 0 then call io_manager$unassign (ima.chx, (0));
	     if io_buffer_ptr ^= null then do;
		if IO_buf_wired then call pc_abs$unwire_abs (astep, divide (bin (rel (io_buffer_ptr), 18), 1024, 9, 0),
			divide (1023 + size (io_buffer), 1024, 9, 0));
		free io_buffer;
	     end;
	end;
	return;
     end CLEANUP;
%page;
/**** Procedure to locate the "mpc" card that has a BASE iom/channel equal
      to the one being loaded. Once found, if the name = "mspX" TRUE is
      returned.  Else if the system is in an early state then TRUE is
      returned, else FALSE. */

DISK_MPC:
     procedure returns (bit (1));

	if ^IOI_attached then call io_chnl_util$name_to_iom (MPC_chanid, IOI_iom, IOI_chnl, Code);
						/* break down chanid if not already done */
	mpc_cardp = null;
	call config_$find (MPC_CARD_WORD, mpc_cardp);
	do while (mpc_cardp ^= null);
	     do portx = 1 to hbound (mpc_card.port, 1) while (mpc_card.iom (portx) ^= -1);
		if mpc_card.iom (portx) = IOI_iom & mpc_card.chan (portx) <= IOI_chnl
		     & mpc_card.chan (portx) + mpc_card.nchan (portx) > IOI_chnl then do;
		     if substr (mpc_card.name, 1, 3) = "msp" then return ("1"b);
		     else return (""b);
		end;
	     end;
	     call config_$find (MPC_CARD_WORD, mpc_cardp);
	end;
	if sys_info$initialization_state <= 1 then return ("1"b);
	else return (""b);
     end DISK_MPC;
%page;
test_controller: entry (MPC_chanid, Code);

	unspec (ima) = ""b;
	IOI_attached = ""b;
	IO_buf_wired = ""b;				/* won't use data area, so don't need to wire */
	IO_buf_data_wds = ZERO_PAGES;			/* no data required */
	unspec (event) = unspec (TEST_CONTROLLER_EVENT);
	call io_manager$assign (ima.chx, MPC_chanid, pxss$notify, event, io_status_word_ptr, Code);
	if Code ^= 0 then
	     if Code = error_table_$io_no_permission then do; /* iom_data.per_device.in_use = "1"b */
		call IOI_ATTACH;
		if Code ^= 0 then return;
		IOI_attached = "1"b;
	     end;
	     else return;

	io_buffer_ptr = null ();

	on cleanup call CLEANUP;

	if ^IOI_attached then allocate io_buffer set (io_buffer_ptr);

	call TEST_MPC (FIVE_SECOND);

	call CLEANUP;
	return;
%page;
/**** Procedure to issue request status connects to an MPC to check to
      see if it is operational. It will retry power-off statuses for upto
      P_pof_retry_time micro seconds. */

TEST_MPC:
     procedure (P_pof_retry_time);
dcl  P_pof_retry_time		fixed bin (71) parameter;

	max_wait = clock () + P_pof_retry_time;		/* set POF timer */

try_test_connect:
	unspec (io_buffer) = ""b;
	idcwp = addr (io_buffer.idcw);
	idcw.command = "40"b3;			/* request status */
	idcw.code = "7"b3;
	idcw.chan_cmd = "02"b3;			/* nondata */

	ima.ptp, ima.dcw_pair_ptr = null ();
	ima.listp = addr (io_buffer.idcw);

	unspec (io_status_word) = ""b;

	if IOI_attached then call IOI_CONNECT;
	else do;
	     call io_manager$connect_abs (ima);

	     time = clock ();
	     do while (^io_status_word.t & (clock () < (time + ONE_SECOND)));
	     end;					/* a second should be enough to wait for status */
	end;

	if io_status_word.t & io_status_word.power & (clock () < max_wait) then goto try_test_connect; /* retry POFs */

	Code = error_table_$device_not_active;		/* assume for now */
	if io_status_word.t then
	     if io_status_word.power = "0"b & io_status_word.major = "0"b4 & io_status_word.sub = "00"b3
		& io_status_word.central_stat = "0"b3 & io_status_word.channel_stat = "0"b3 then Code = 0;
	return;
     end TEST_MPC;
%page;
/**** Procedure to attach the MPC though IOI. This is required after
      ioi_init has assigned all the IOM channels to IOI. */

IOI_ATTACH:
     procedure;

	call SETUP_IOI_POSTING;
	if Code ^= 0 then return;

	unspec (IOI_event) = ""b;
	substr (unspec (IOI_event), 37, 36) = unspec (event);
	call io_chnl_util$name_to_iom (MPC_chanid, IOI_iom, IOI_chnl, Code);
						/* break down channel ID */
	if Code ^= 0 then return;
	MPC_name = FIND_MPC_NAME ();			/* find subsystem name for this channel */
	if MPC_name = "" then do;			/* oops, none found */
	     Code = error_table_$bad_channel;
	     return;
	end;
	call ioi_assignment$assign (IOI_index, MPC_name, IOI_event, PRIV, Code);
	if Code ^= 0 then return;

	call ioi_set$max_workspace (IOI_index, size (io_buffer), Code);
	if Code ^= 0 then goto error_detach;

	call ioi_set$workspace (IOI_index, io_buffer_ptr, size (io_buffer), Code);
						/* create the workspace */
	if Code ^= 0 then goto error_detach;

	call ioi_set$channel_required (IOI_index, IOI_iom, IOI_chnl, Code);
	if Code ^= 0 then goto error_detach;

	call ioi_set$status (IOI_index, bin (rel (addr (io_buffer.status)), 18), 1, Code);
	if Code ^= 0 then goto error_detach;

	io_status_word_ptr = addr (io_buffer.status.iom_stat);
	return;
%skip (5);
/**** Entry to detach the MPC. */

IOI_DETACH:
     entry;

error_detach:
	call ioi_assignment$unassign (IOI_index, (0));	/* don't worry about error code */
	ioi_post_area.number = 0;			/* reset IOI posting */
	return;
     end IOI_ATTACH;
%page;
/* Procedure to issue the firmware load connect via IOI. */

IOI_CONNECT:
     procedure;
dcl  send_pcw_to_IOI		bit (1);

	send_pcw_to_IOI = ""b;
	goto connect_common;

/**** Entry to issue the mask/reset (pcw) connect. */

IOI_DC_RESET:
     entry;
	send_pcw_to_IOI = "1"b;

connect_common:
	call SETUP_POST_BUF;
	if send_pcw_to_IOI
	     then call ioi_connect$ioi_connect_pcw (IOI_index, bin (rel (addr (io_buffer.idcw)), 18), IOI_pcw, Code);
						/* Do mask/reset connect */
	else call ioi_connect (IOI_index, bin (rel (addr (io_buffer.idcw)), 18), Code); /* Do normal connect */
	if Code ^= 0 then return;
	call WAIT_FOR_STATUS;
	return;
     end IOI_CONNECT;
%page;
/**** Procedure to locate either the "prph" or "chnl" card that has a
      BASE iom/channel equal to the one desired. Once found the subsystem
      name concatinated with "_00" is returned. */

FIND_MPC_NAME:
     procedure returns (char (8));

	prph_cardp = null;
	call config_$find (PRPH_CARD_WORD, prph_cardp);
	do while (prph_cardp ^= null);
	     if prph_card.iom = IOI_iom & prph_card.chan = IOI_chnl then do;
						/* base chnl on this mpc */
		return (prph_card.name || "_00");
	     end;
	     call config_$find (PRPH_CARD_WORD, prph_cardp);
	end;

	chnl_cardp = null;
	call config_$find (CHNL_CARD_WORD, chnl_cardp);
	do while (chnl_cardp ^= null);
	     do groupx = lbound (chnl_card_array.group, 1) to hbound (chnl_card_array.group, 1);
		if chnl_card.group (groupx).iom = IOI_iom & chnl_card.group (groupx).chan = IOI_chnl then do;
						/* base chnl on this mpc */
		     return (chnl_card.name || "_00");
		end;
	     end;
	     call config_$find (CHNL_CARD_WORD, chnl_cardp);
	end;

	return ("");				/* Not found.. */
     end FIND_MPC_NAME;
%page;
/**** Procedure to locate the IOI posting segment and get it setup for
      handling the firmware load interrupts. */

SETUP_IOI_POSTING:
     procedure;

	ioi_post_area_ptr = addr (bce_ioi_post_seg$);
	if ioi_post_area_ptr = null () then do;
	     Code = error_table_$seg_not_found;
	     return;
	end;
	unspec (ioi_post_area) = ""b;
	ioi_post_area.number = 1;
	Code = 0;
	return;
     end SETUP_IOI_POSTING;
%skip (2);
/**** Procedure to setup a posting buffer for an IO that is going to
      be issued. */

SETUP_POST_BUF:
     procedure;


	io_post_buffer_ptr = addr (ioi_post_area.buffer (1));
	unspec (io_post_buffer) = ""b;
	io_post_buffer.ev_chn = IOI_event;
	io_post_buffer.state = IO_OUTSTANDING;
	return;
     end SETUP_POST_BUF;
%skip (2);
/**** Procedure to wait for a terminate interrupt from an I/O connect. */

WAIT_FOR_STATUS:
     procedure;

	io_post_buffer_ptr = addr (ioi_post_area.buffer (1));
	do while (io_post_buffer.state ^= IO_COMPLETE);
	end;
	return;
     end WAIT_FOR_STATUS;
%page; %include bce_ioi_post_area;
%page; %include config_chnl_card;
%page; %include config_mpc_card;
%page; %include config_prph_card;
%page; %include firmware_trailer;
%page; %include io_manager_dcls;
%page; %include io_status_word;
%page; %include ioi_stat;
%page; %include iom_dcw;
%page; %include iom_pcw;
%page; %include syserr_constants;
%page;
/*	BEGIN MESSAGE DOCUMENTATION

Message:
hc_load_mpc: Could not abs_wire buffer.

S:	$crash

T:	$init

M:	$err

A:	$contact

Message:
hc_load_mpc: Booting channel CHNL with FWID Revision REV
hc_load_mpc: Booting channel CHNL with FWID Revision REV Overlay FWOVERLAY

S:	$info

T:	$init

M:	$ignore

A:	$config

Message:
hc_load_mpc: data buffer not in low 256K

S:	$crash

T:	$init

M:	$err

A:	$contact

	END MESSAGE DOCUMENTATION */

     end hc_load_mpc;
