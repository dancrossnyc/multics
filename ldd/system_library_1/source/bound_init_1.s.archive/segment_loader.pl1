/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2 */
segment_loader:
     proc;

/* format: off */

/* SEGMENT_LOADER - Loader for Multics Initialization.

   The segment loader will be called to load a collection from
   the Multics System Tape (MST).
   All segments contained in the MST collection
   will be loaded. When a collection mark is found on MST,
   the segment loader will return to its caller.

   Written 06/05/67, Noel I. Morris
   Modified 03/29/76, Noel I. Morris for loading separate defs.
   Modified 08/02/77, Bernard S. Greenberg for aste.gtpd and flush.
   Modified 04/06/81, W. Olin Sibert, to update for ADP SDWs and sdw_util_
   Modified 6/82 BIM boot_tape_io, hc_linkage_seg, hc_definitions_seg.
   Modified '82 CAH to have pre linking done externally, also slt_manager change.
   Modified 10/83 by Keith Loepere for warm boot from disk.
   */

/* format: on */
	dcl     header_area		 (1000) fixed bin (35);
						/* area into which segment header is read */
	dcl     header_ptr		 ptr;		/* pointer to header area */
	dcl     type		 fixed bin (17);	/* type of record on MST */
	dcl     count		 fixed bin (17);	/* length of record on MST */
	dcl     seg_ptr		 ptr;		/* pointer to segment being loaded */
	dcl     text_ptr		 ptr;		/* pointer to text segment */
	dcl     text_no		 fixed bin (18);	/* text segment number */
	dcl     link_ptr		 ptr;		/* pointer to linkage section */
	dcl     seg_number		 fixed bin (18);	/* segment number of segment being loaded */
	dcl     expect_link		 bit (1) aligned;	/* linkage section expected switch */
	dcl     expect_defs		 bit (1) aligned;	/* definitions expected switch */
	dcl     control_ptr		 ptr;		/* pointer to control word */
	dcl     last_sltep		 ptr;		/* pointer to previous slt entry */
	dcl     tsdw		 fixed bin (71);
	dcl     reading_sdw		 fixed bin (71);
	dcl     ptp		 ptr;

	dcl     1 control_word	 aligned,		/* MST control word */
	        ( 2 type		 fixed bin (17),	/* control word type */
		2 count		 fixed bin (17)
		)		 unaligned;	/* count of words following */


	dcl     as_linkage$		 external static;	/* combined linkage segments */
	dcl     ws_linkage$		 external static;
	dcl     ai_linkage$		 external static;
	dcl     wi_linkage$		 external static;

	dcl     slt$		 external static;

	dcl     1 lot$		 ext like lot;	/* linkage offset table */

	dcl     definitions_$	 ext;		/* definitions segment */

	dcl     make_sdw		 entry (fixed bin (18), fixed bin (71), ptr, ptr);
	dcl     pc_wired$write	 entry (ptr, fixed bin, fixed bin);
	dcl     pmut$swap_sdw	 entry (ptr, ptr);
	dcl     sdw_util_$set_access	 entry (pointer, bit (4) unaligned);
	dcl     slt_manager$build_entry
				 entry (ptr) returns (ptr);
	dcl     syserr		 entry options (variable);
	dcl     disk_reader		 entry (ptr, fixed bin (17));

	dcl     (addr, addrel, baseno, bin, mod, null, rel, size)
				 builtin;


	expect_defs = "0"b;				/* Initialize the control switches */
	expect_link = "0"b;

	sltp = addr (slt$);				/* Get a pointer to SLT structure. */
	lotp = addr (lot$);				/* Get a pointer to the LOT. */
	definitions_ptr = addr (definitions_$);

	header_ptr = addr (header_area);		/* Generate pointer to header area. */

	control_ptr = addr (control_word);		/* Generate pointer to control word. */

/* Read control word and dispatch on it. */

loop:
	call read_control_word (type, count);		/* Read a control word. */
	if type = 2
	then go to collection;
	else if type ^= 0
	then call syserr (CRASH, "segment_loader: unknown control type ^d", type);

/* Process header record. */

	if count > size (header_area)
	then /* Error if header is too large ... */
	     call syserr (CRASH, "segment_loader: bad header size ^d", count);
						/* ... or too small. */

	call disk_reader (header_ptr, count);		/* Read in the header. */

	call read_control_word (type, count);		/* Read in next control word. */
	if type ^= 1
	then /* It must be a segment control word. */
	     call syserr (CRASH, "segment_loader: unexpected control type ^d", type);

	if header_ptr -> slte.link_sect
	then do;					/* If this is a linkage segment... */
		if ^expect_link
		then /* If unexpected ... */
		     call syserr (CRASH, "segment_loader: Unexpected linkage.");
		expect_link = "0"b;			/* Turn off switch. */
		expect_defs = "1"b;			/* Defs should come next. */

		if last_sltep -> slte.combine_link
		then do;				/* If linkage may be combined ... */
			if last_sltep -> slte.link_sect_wired
			then /* If linkage is wired ... */
			     if last_sltep -> slte.init_seg
			     then /* If text is init seg ... */
				hclsp = addr (wi_linkage$);
						/* Use wired_init_linkage. */
			     else /* If text is sup seg ... */
				hclsp = addr (ws_linkage$);
						/* Use wired_sup_linkage. */
			else /* If linkage is not wired ... */
			     if last_sltep -> slte.init_seg
			then /* If text is init seg ... */
			     hclsp = addr (ai_linkage$);
						/* Use active_init_linkage. */
			else /* If text is sup seg ... */
			     hclsp = addr (as_linkage$);
						/* Use active_sup_linkage. */

			seg_ptr = hclsp -> hc_linkage_seg.next_free_ptr;
						/* Get pointer to end of combined linkage. */
			hclsp -> hc_linkage_seg.next_free_ptr = addrel (seg_ptr, count + mod (count, 2));
						/* Update pointer to next free even loc. */

			call disk_reader (seg_ptr, count);
						/* Read in the linkage section into place. */
		     end;

		else /* If linkage not to be combined ... */
		     call load_segment;		/* Load in the segment. */

		link_ptr = seg_ptr;			/* Save pointer to linkage. */
		lot.lp (text_no) = link_ptr;		/* Set LOT entry. */
		link_ptr -> linkage_header.segment_number = text_no;
						/* Save text segment number in linkage header. */
	     end;

	else if header_ptr -> slte.defs
	then do;					/* If this is a definitions segment ... */
		if ^expect_defs
		then /* If unexpected ... */
		     call syserr (CRASH, "segment_loader: Unexpected defs.");
		expect_defs = "0"b;

		seg_ptr = definitions.next_free_ptr;	/* Get pointer to end of definitions. */
		definitions.next_free_ptr = addrel (seg_ptr, count);
						/* Update pointer to next free. */

		call disk_reader (seg_ptr, count);	/* Read definitions into place. */

		definitions.dot (text_no).offset = bin (rel (seg_ptr), 18);
		definitions.dot (text_no).length = count;
						/* Fill in offset table entry. */

		link_ptr -> linkage_header.def_ptr = seg_ptr;
						/* Set correct defs pointer. */
	     end;

	else do;					/* Must be text, or something. */
		if expect_link | expect_defs
		then /* Must not expect anything else. */
		     call syserr (CRASH, "segment_loader: Missing linkage or defs.");
		expect_link = header_ptr -> slte.link_provided;
						/* Set switch. */

		call load_segment;			/* Load in the segment. */
		text_ptr = seg_ptr;			/* Save pointer to the text. */
		text_no = bin (baseno (text_ptr), 18);	/* Also, get text segment number. */
	     end;

	last_sltep = sltep;				/* Save pointer to last SLT entry. */

	go to loop;				/* Continue. */

/* Process collection record. */

collection:
	call read_control_word (type, count);		/* Read the collection mark. */

	return;					/* Return to caller. */
%page;
/* LOAD_SEGMENT - Build a segment and read it in from disk. */

load_segment:
     proc;

	seg_ptr = slt_manager$build_entry (header_ptr);	/* Build new entry in SLT. */
	if seg_ptr = null ()
	then call syserr (CRASH, "segment_loader: error from slt_manager$build_entry");

	seg_number = bin (baseno (seg_ptr), 15);	/* Get segment number of new segment. */

	sltep = addr (slt.seg (seg_number));

	call make_sdw (seg_number, tsdw, astep, ptp);	/* Get an AST entry */
	if astep = null ()
	then return;				/* abs-seg */

	reading_sdw = tsdw;				/* get copy of SDW for disk reader */
	call sdw_util_$set_access (addr (reading_sdw), "1010"b);
						/* Force RW access while we're reading */
	call pmut$swap_sdw (seg_ptr, addr (reading_sdw)); /* place SDW in DSEG */

	aste.gtpd = "1"b;				/* Keep off PD until flushed */

	call disk_reader (seg_ptr, count);		/* Slurp in the new segment. */

	call pmut$swap_sdw (seg_ptr, addr (tsdw));	/* store real SDW in DSEG */

	call pc_wired$write (astep, 0, -1);		/* Flush to disk */

	aste.gtpd = "0"b;				/* PD migration ok now */

	return;


     end load_segment;


/* READ_CONTROL_WORD - Read a control word from MST. */

read_control_word:
     proc (type, count);

	dcl     type		 fixed bin (17),	/* control word type */
	        count		 fixed bin (17);	/* count of following record */


	call disk_reader (control_ptr, 1);		/* Read in the control word. */

	type = control_word.type;			/* Return the type. */
	count = control_word.count;			/* Return the count. */

	return;


     end read_control_word;				/* format: off */

%page; %include hc_linkage_seg; %include hc_definitions_seg;
%page; %include aste;
%page; %include slt;
%page; %include slte;
%page; %include object_link_dcls;
%page; %include lot;
%page; %include syserr_constants;

  

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   segment_loader: unknown control type TTT

   S: $crash

   T: $init

   M: A bad segment control word was found in the mst source.

   A: $recover
   $boot_tape

   Message:
   segment_loader: bad header size: SSS

   S: $crash

   T: $init

   M: A bad segment header was found in the mst source.

   A: $recover
   $boot_tape

   Message:
   segment_loader: unexpected control type: TTT

   S: $crash

   T: $init

   M: A segment control word was found out of sequence in the mst source.

   A: $recover
   $boot_tape

   Message:
   segment_loader: Unexpected DEFS/LINKAGE

   S: $crash

   T: $init

   M: A linkage or definitions section was found out of sequence in the mst source.

   A: $recover
   $boot_tape

   Message:
   segment_loader: Missing linkage or defs.

   S: $crash

   T: $init

   M: A linkage or definitions section which should be in the
   mst source appears to be missing.

   A: $recover
   $boot_tape

   Message:
   segment_loader: error from slt_manager$build_entry

   S: $crash

   T: $init

   M: $err

   A: $recover
   $boot_tape

   END MESSAGE DOCUMENTATION */


     end segment_loader;
