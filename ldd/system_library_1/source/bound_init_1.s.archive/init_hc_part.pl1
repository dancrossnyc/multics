/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


init_hc_part:
     proc (pvtx, frec, nrec);

/* Hardcore Partition Management

   init_hc_part establishes all structures necessary for paging to
          operate against the Hardcore Partition on a specified
	device. These structures include the PVTE, volmap_seg,
	and record_stock. One or more records at the beginning
	of the partition are used as a fake Volume Map.

   init_hc_part$terminate_hc_part terminates allocation against the
          Hardcore Partition. It is called immediately before
	enabling the File System.

  This program will require modification for the new Volume Map
  format. To facilitate this, those functions which are dependent
  on Volume Map format are embodied in separate subroutines.


  Written March 1982 by J. Bongiovanni
*/

/*  Parameter  */

	dcl     pvtx		 fixed bin;	/* Index of PVTE for device */
	dcl     frec		 fixed bin (18);	/* First record of HC PART of device */
	dcl     nrec		 fixed bin (18);	/* Number of records in HC PART */

/*  Automatic  */

	dcl     null_sdw		 fixed bin (71);	/* To clear volmap_abs_seg when done */
	dcl     p99		 pic "99";
	dcl     ptp		 ptr;		/* Pointer to page table */
	dcl     temp_sdw		 fixed bin (71);	/* SDW for volmap_abs_seg */
	dcl     vol_pagex		 fixed bin;

/*  Static  */

	dcl     ALL_FREE		 bit (36) aligned int static options (constant) init ("377777777770"b3);
	dcl     RECORDS_PER_PAGE	 fixed bin int static options (constant) init (1024 * 32);

/*  External  */

	dcl     sst$pts		 (0:3) fixed bin external;
	dcl     1 sst$level		 (0:3) aligned external,
		2 ausedp		 bit (18) unal,
		2 no_aste		 bit (18) unal;
	dcl     volmap_abs_seg$	 external;

/*  Entry  */

	dcl     make_sdw$unthreaded	 entry (fixed bin, fixed bin (71), ptr, ptr);
	dcl     page$cleanup entry (ptr);
	dcl     page$drain_record_stock entry (ptr);
	dcl     pmut$swap_sdw	 entry (ptr, ptr);
	dcl     ptw_util_$make_null_disk entry (ptr, fixed bin (17));
	dcl     stock_man$allocate_record_stock entry (ptr, ptr);
	dcl     stock_man$free_record_stock	 entry (ptr, ptr);
	dcl     syserr		 entry options (variable);
	dcl     thread$cin		 entry (ptr, bit (18));

/*  Builtin  */

	dcl     addr		 builtin;
	dcl     addrel		 builtin;
	dcl     baseno		 builtin;
	dcl     bin		 builtin;
	dcl     convert		 builtin;
	dcl     divide		 builtin;
	dcl     null		 builtin;
	dcl     substr		 builtin;

%page;
	pvt_arrayp = addr (pvt$array);
	pvtep = addr (pvt_array (pvtx));
	vol_mapp = addr (volmap_abs_seg$);
	null_sdw = 0;

	n_volmap_pages = get_volmap_size ();
	if nrec < n_volmap_pages
	then call syserr (CRASH, "init_hc_part: HC PART on dsk^a_^a too small",
		pvte.devname, convert (p99, pvte.logical_area_number));

	call make_sdw$unthreaded (bin (baseno (addr (volmap_abs_seg$))), temp_sdw, astep, ptp);
	if astep = null ()
	then call syserr (CRASH, "init_hc_part: Unable to get ASTE for HC PART volmap");
	call pmut$swap_sdw (addr (volmap_abs_seg$), addr (temp_sdw));
	if sst$pts (bin (aste.ptsi)) < n_volmap_pages
	then call syserr (CRASH, "init_hc_part: volmap_abs_seg size too small");
	aste.pvtx = pvtx;
	aste.volmap_seg = "1"b;
	pvte.volmap_astep = astep;
	pvte.volmap_seg_sdw = temp_sdw;

	call stock_man$allocate_record_stock (pvtep, record_stockp);

/* Withdraw addresses for the Volume Map by hand */

	do vol_pagex = 1 to n_volmap_pages;
	     call ptw_util_$make_null_disk (addrel (ptp, vol_pagex - 1), frec - 1 + vol_pagex);
	end;

	pvte.baseadd = frec + n_volmap_pages;
	pvte.totrec = nrec - n_volmap_pages;
	pvte.nleft = nrec - n_volmap_pages;

	call init_record_stock;
	call init_volmap;

	call pmut$swap_sdw (addr (volmap_abs_seg$), addr (null_sdw));

	return;
%page;
terminate_hc_part: entry (pvtx);

	pvt_arrayp = addr (pvt$array);
	pvtep = addr (pvt_array (pvtx));
	astep = pvte.volmap_astep;
	record_stockp = pvte.volmap_stock_ptr;

	call page$drain_record_stock (pvtep);
	call stock_man$free_record_stock (pvtep, record_stockp);

	call page$cleanup(astep);

	aste_part.two = "0"b;
	call thread$cin (astep, sst$level (bin (aste.ptsi)).ausedp);

	pvte.nleft, pvte.baseadd, pvte.totrec = 0;
	pvte.volmap_astep = null ();
	pvte.volmap_seg_sdw = 0;

	return;


%page;
/* Internal procedure to compute the number of pages needed for the
   Volume Map  */

get_volmap_size:
     proc returns (fixed bin);

	return (divide (bin (rel (addr (vol_map.bit_map (divide (nrec + 31, 32, 17) + 1)))) + 1023, 1024, 17));

     end get_volmap_size;
%page;
/* Internal procedure to initialize the record stock */

init_record_stock:
     proc;

	dcl     base		 fixed bin;
	dcl     bias		 fixed bin;
	dcl     left		 fixed bin;
	dcl     ox		 fixed bin;


	record_stock.n_volmap_pages = n_volmap_pages;
	record_stock.target = record_stock.n_in_stock;	/* Withdraw only, no deposit */
	
	do ox = 1 to hbound (record_stock.old_volmap_page, 1);
	     record_stock.old_volmap_page (ox).last = 0;
	end;

	base = frec + n_volmap_pages;
	left = nrec - n_volmap_pages;
	bias = 64 * 32;				/* Old Volume Map kludge */
	do ox = 1 repeat ox + 1 while (ox <= n_volmap_pages & left > 0);
	     record_stock.volmap_page (ox).n_free = min (RECORDS_PER_PAGE - bias, left);
	     record_stock.volmap_page (ox).baseadd = base - bias;
	     left = left - record_stock.volmap_page (ox).n_free;
	     base = base + RECORDS_PER_PAGE;
	     bias = 0;				/* Kludge for first page */
	end;

     end init_record_stock;
%page;
/* Internal procedure to initialize the fake Volume Map, indicating
   that all records in the Hardcore Partition (except those subverted
   for the Map itself) are free */

init_volmap:
     proc;

	dcl     bmx		 fixed bin;
	dcl     n_bitmap_words	 fixed bin;
	dcl     n_rem_bits		 fixed bin;


	n_bitmap_words = divide (nrec - n_volmap_pages, 32, 17);

	do bmx = 1 to n_bitmap_words;
	     vol_map.bit_map (bmx) = ALL_FREE;
	end;

	n_rem_bits = mod (nrec - n_volmap_pages, 32);
	if n_rem_bits > 0
	then do bmx = 1 to n_rem_bits;
		substr (vol_map.bit_map (n_bitmap_words + 1), bmx + 1, 1) = "1"b;
	     end;

	return;

     end init_volmap;
%page; %include aste;
%page; %include pvte;
%page; %include stock_seg;
%page; %include syserr_constants;
%page; %include vol_map;

%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   init_hc_part: HC PART on dskX_NN too small

   S:     $crash

   T:     $init

   M:	The Hardcore Partition on the device indicated is unreasonably
   small, as it does not contain sufficient space to hold the bit map
   describing it.

   A:	Recreate the partition and reboot.


   Message:
   init_hc_part: volmap_abs_seg size too small

   T:     $init

   S:	$crash

   M:	The maximum length of volmap_abs_seg on the MST header is not
   sufficient to access an entire Volume Map.

   A:	Recreate the MST with a larger maximum length for volmap_abs_seg
   and reboot.

   END MESSAGE DOCUMENTATION */

     end init_hc_part;
