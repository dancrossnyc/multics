/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
iom_unassign:
     procedure (Chx, Code);

/* Unassign an IOM channel. */
/* Stolen from iom_manager November 1980 by C. Hornig */
/* Modified for channel reconfiguration January 1984 by Chris Jones */
/* Modified to not mask overhead channels, February 1985 by Chris Jones */

dcl	Chx		   fixed bin (35) parameter;
dcl	Code		   fixed bin (35) parameter;


dcl	chx		   fixed bin (35);
dcl	delete_entry	   bit (1) aligned;

dcl	(addr, hbound, lbound) builtin;

/* * * * * * * * * * * * * * * * * * * */

	delete_entry = "0"b;
	goto common;

delete_channel:
     entry (Chx, Code);

	delete_entry = "1"b;
common:
	Code = 0;
	iom_data_ptr = addr (iom_data$);
	iom_mailbox_seg_ptr = addr (iom_mailbox$);

	chx = Chx;				/* copy argument */
	if (chx < lbound (iom_data.per_device, 1)) | (chx > hbound (iom_data.per_device, 1)) then do;
bad_chx:
	     Code = 1;				/* called on PRDS during ESD */
	     return;
	end;

	if ^iom_data.per_device (chx).flags.in_use then
	     goto bad_chx;

	if (iom_data.per_device (chx).channel ^= system_fault_channel)
	     & (iom_data.per_device (chx).channel ^= special_status_channel) then do;
	     call io_manager$mask (chx);		/* reset and mask channel */

	     iom_mailbox_seg.iom_mailbox (iom_data.per_device (chx).iom)
		.channel_mailbox (iom_data.per_device (chx).channel).scw = iom_data.stop_scw;
						/* reset for status processing */
	     iom_mailbox_seg.iom_mailbox (iom_data.per_device (chx).iom)
		.channel_mailbox (iom_data.per_device (chx).channel).lpw = iom_data.stop_lpw;
	end;

	if delete_entry then
	     iom_data.per_device (chx).flags.on_line = "0"b;
	iom_data.per_device (chx).flags.in_use = "0"b;
	return;

%include iom_data;
%page;
%include io_manager_dcls;

     end iom_unassign;
