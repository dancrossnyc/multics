/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: off */

/* Written 1st quarter 1981 by Charles Hornig */


/****^  HISTORY COMMENTS:
  1) change(87-11-13,Farley), approve(88-03-01,MCR7814),
     audit(88-03-01,Parisek), install(88-03-08,MR12.2-1032):
     Changed invalid_overhead entry point to recognize the data word passed to
     it and to change the syserr message to contain this word when non-zero.
                                                   END HISTORY COMMENTS */


iom_error$invalid_interrupt:
     procedure (Channel, Level, Dummy);

dcl  Iom fixed bin (3) parameter;
dcl  Channel fixed bin (35) parameter;
dcl  Level fixed bin (3) parameter;
dcl  Data_word bit (36) aligned parameter;
dcl  Dummy bit (36) aligned parameter;

dcl  syserr entry options (variable);

dcl  data_word bit (36) aligned;
dcl  iom_no fixed bin (3);
dcl  chan_no fixed bin (7);
dcl  chan_id char (8) aligned;
dcl  code fixed bin (35);

dcl (divide, mod, size) builtin;

dcl  Max_Channel fixed bin (17) internal static options (constant) init (64);
dcl  Max_Iom fixed bin (17) internal static options (constant) init (4);

/* * * * * * * * * * INVALID_INTERRUPT * * * * * * * * * */

	iom_no = 1 + divide (Channel, Max_Iom * size (per_iom), 3, 0);
	chan_no = mod (Channel, Max_Channel);
	data_word = "0"b;
	goto common;

/* * * * * * * * * * INVALID_OVERHEAD * * * * * * * * * */

invalid_overhead:
	entry (Iom, Channel, Level, Data_word);

	iom_no = Iom;
	chan_no = Channel;
	data_word = Data_word;

common:
	call io_chnl_util$iom_to_name (iom_no, chan_no, chan_id, code);
	if code ^= 0 then chan_id = "?";
	call syserr (JUST_LOG, "iom_error: Unexpected level ^d interrupt from channel ^a^[ (iom ^d, chan ^d)^;^2s^].^[^/^- Status word - ^12.3b^;^s^]", Level, chan_id, (chan_id = "?"), iom_no, chan_no, (data_word ^= "0"b), data_word);
	return;
%page;
%include iom_data;
%include io_chnl_util_dcls;
%include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION


   Message:
   iom_error: Unexpected level LEVEL_NUM interrupt from channel CHNL
   [Status word - OOOOOOOOOOOO]

   S: $info

   T: $run

   M: The specified level interrupt has occured on channel CHNL, either no
   channel assignment was found for the specified channel or there was no
   handler specified for the channel.  If CHNL is a "?", this indicates an
   error occured converting the iom and channel numbers, which are displayed
   in parenthesis "(iom N, chan_no N)" after the question mark.  The status
   word associated with the interrupt will be displayed when non-zero.

   A: $notify

   END MESSAGE DOCUMENTATION */

     end iom_error$invalid_interrupt;
