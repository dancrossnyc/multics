/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
iom_assign:
     procedure (Chx, Channel, Handler, Index, Statusp, Code);

/* iom_assign: Assign an IOM chanel. */
/* Taken from iom_manager November 1980 by C. Hornig */
/* Modified for channel reconfiguration January 1984 by Chris Jones */

dcl	(
	Chx		   fixed bin (35),
	Channel		   char (8) aligned,
	Index		   fixed bin (35),
	Handler		   entry,
	Statusp		   ptr,
	Code		   fixed bin (35)
	)		   parameter;

dcl	error_table_$bad_arg   fixed bin (35) ext static;
dcl	error_table_$io_no_permission
			   fixed bin (35) ext static;
dcl	error_table_$io_not_configured
			   fixed bin (35) ext static;
dcl	error_table_$noalloc   fixed bin (35) ext static;

dcl	add_entry		   bit (1) aligned;
dcl	chx		   fixed bin (35);
dcl	iom		   fixed bin (3);
dcl	channel		   fixed bin (7);
dcl	handler		   entry variable;
dcl	index		   fixed bin (35);

dcl	(addr, binary, bit, hbound, lbound, null, stac, substr)
			   builtin;

	add_entry = "0"b;
	goto common;

add_channel:
     entry (Chx, Channel, Handler, Index, Statusp, Code);

	add_entry = "1"b;
common:
	Chx, Code = 0;
	Statusp = null ();
	handler = Handler;
	index = Index;
	iom_data_ptr = addr (iom_data$);

	call io_chnl_util$name_to_iom (Channel, iom, channel, Code);
	if Code ^= 0 then
	     return;

/* validate IOM/channel */

	if (iom < lbound (iom_data.per_iom, 1)) | (iom > hbound (iom_data.per_iom, 1))
	     | (channel < lbound (iom_data.per_iom.chantab, 2)) | (channel > hbound (iom_data.per_iom.chantab, 2))
	then do;
	     Code = error_table_$bad_arg;
	     return;
	end;

	if ^iom_data.per_iom (iom).flags.on_line then
	     goto bad_dev;

	chx = iom_data.per_iom (iom).chantab (channel);

	if chx = 0 then do;				/* must assign new chx */
	     do chx = lbound (iom_data.per_device, 1) to hbound (iom_data.per_device, 1)
		while (^stac (addr (iom_data.per_device (chx).iom), bit (binary (iom, 36))));
	     end;
	     if chx > hbound (iom_data.per_device, 1) then do;
		Code = error_table_$noalloc;
		return;
	     end;

	     iom_data.per_iom (iom).chantab (channel) = chx;
						/* make the assignment */

	     iom_data.per_device (chx).iom = iom;
	     iom_data.per_device (chx).channel = channel;
	     iom_data.per_device (chx).on_line = "1"b;
	end;

	if iom_data.per_device (chx).flags.in_use then do;
	     Code = error_table_$io_no_permission;
	     return;
	end;

	if add_entry then
	     iom_data.per_device (chx).on_line = "1"b;
	else if ^iom_data.per_device (chx).on_line then do;
bad_dev:
	     Code = error_table_$io_not_configured;
	     return;
	end;

	iom_data.per_device (chx).handler = handler;
	iom_data.per_device (chx).index = index;
	iom_data.per_device (chx).pcw, iom_data.per_device (chx).lpw, iom_data.per_device (chx).status,
	     iom_data.per_device (chx).ext_status = ""b;
	substr (iom_data.per_device (chx).pcw, 40, 6) = bit (binary (channel, 6));
	iom_data.per_device (chx).flags.in_use = "1"b;

	Chx = chx;
	Statusp = addr (iom_data.per_device (chx).status);

	return;

%include iom_data;
%page;
%include io_chnl_util_dcls;

     end iom_assign;
