" ******************************************************
" *                                                    *
" * Copyright, (C) Honeywell Bull Inc., 1987           *
" *                                                    *
" * Copyright (c) 1987 by Massachusetts Institute of   *
" * Technology and Honeywell Information Systems, Inc. *
" *                                                    *
" * Copyright (c) 1972 by Massachusetts Institute of   *
" * Technology and Honeywell Information Systems, Inc. *
" *                                                    *
" ******************************************************

" Transfer vector and data segment for IOX.
" This Program was found on a doorstep, its parenthood and birthdate unrecorded.
" Largely recoded for hashing and new initialization April 1981 by Benson I. Margulies.
" Sentinel checking June 1981 Benson I. Margulies
" Hash table removed January 1982 by C. Hornig.
" Modified 11/82 by S. Krupp to add new transfer vectors for open_file,
"   close_file, detach, and attach_loud entries.  Changed version number
"   to 2.

	name	iox_
	perprocess_static
	maclist	off

	" Table of contents

	" iox_ i/o operation transfer vectors entries

	" IOCB version/sentinel constant

	" iox_ utility operation transfer vectors

	" iox_ error entrypoints

	" IOCB hash table and hit meter

	" iox_ standard attachment pointers
	"      and switch names

	" IOS writeround entries that map calls from IOX to IOS.



" The I/O entrypoints are defined below with the following macros

	macro	iocb_tv
	maclist	on,save
	" Entry point "iox_$&1"
	maclist	off
	segdef	&1
&1:	getlp
	maclist	restore
	ldx1	iocb.&1,du
	tra	iocb_tv_join
	&end

" The error entrypoints are defined with this macro

	macro	error	Error segdef.
	maclist 	on,save
	" Entry point "iox_$err_&1"
	maclist	restore
	segdef	err_&1
err_&1:   getlp
	maclist	on
	ldq	error_table_$&1
	tra	error_join
	maclist	restore
	&end

" This macro defines a utility procedure known to be bound in
" with this segment, and "callable" with tra.

	macro	tv	
	maclist	on,save
	" Utility entrypoint "iox_$&2"
	maclist	off
	segdef	&2
&2:	getlp
	maclist	restore
	tra	&1$&2
	&end

	iocb_tv	detach_iocb
	iocb_tv	open
	iocb_tv	close
	iocb_tv	get_line
	iocb_tv	get_chars
	iocb_tv	put_chars
	iocb_tv	modes
	iocb_tv	position
	iocb_tv	control
	iocb_tv	read_record
	iocb_tv	write_record
	iocb_tv	rewrite_record
	iocb_tv	delete_record
	iocb_tv	seek_key
	iocb_tv	read_key
	iocb_tv	read_length

	error	no_iocb
	error	no_operation
	error	not_attached
	error	not_closed
	error	not_open
	error	old_dim

	tv	iox_attach_name,attach_name
	tv	iox_attach_name,attach_ioname
	tv	iox_attach_name,attach_ptr
	tv	iox_attach_name,attach_iocb
	tv	iox_attach_name,attach_loud
	tv	iox_open_file,open_file
	tv	iox_close_file,close_file
	tv	iox_detach,detach
	tv	iox_find_iocb,find_iocb
	tv	iox_find_iocb,look_iocb
	tv 	iox_find_iocb,move_attach
	tv	iox_find_iocb,destroy_iocb
	tv	iox_find_iocb,find_iocb_n
	tv	iox_propagate,propagate
	tv	iox_init_,init_standard_iocbs

	" Common code for the error entrypoints

error_join: 
	ldx7	ap|0		Get number of arguments called with.
	tmoz	no_arguments
	stq	ap|0,7*		Store error code as last argument.
no_arguments:
	short_return

	" Common code for the io transfer vectors
iocb_tv_join:
	epp2	ap|2,*		Get pointer to pointer to IOCB
	epp2	pr2|0,*		Get pointer to IOCB
	epaq	pr2|0
	ana	-1,du		The bottom half is and'd with 0
          cmpa	=o077777,du
	tze	null_iocb_ptr
	lda	pr2|iocb.version
	cmpa	iocb_version_sentinel
	tnz	not_a_valid_iocb	Sentinel missing
	call6	pr2|0,x1*		Call the appropriate frob.

not_a_valid_iocb:
	ldq	error_table_$not_a_valid_iocb
	tra	error_join

null_iocb_ptr:
	ldq	error_table_$no_iocb  " null pointer certainly isn't an iocb
	tra	error_join	  " join the return-last-arg code	

	segdef	iocb_version_sentinel
iocb_version_sentinel:
	aci	~IOX2~		" externally available


	" Hash Table
	segdef	hash_table
	segdef	hash_table_ptr
	segdef	hash_hit_count
	segdef	hash_table_size

" hash_index_ produces numbers from 0 through the
" table size, though it divides by the specified
" size. So we divide by 127, a prime, but the table
" is 128 long. 

	use	hash
hash_table_size:
	dec	1		" will be grown later if necessary
hash_hit_count:
	dec	0
hash_table_ptr:
	its	-1,1		" set by iox_init_, updated by find_iocb.
hash_table:
	its	-1,1		" initial hash table

	join	/static/hash



" standard attachment iocbs

	segdef	n_standard_iocbs
	segdef	standard_iocb_info
	segdef	standard_iocb_ptrs	

	macro	iocb		Define standard switch "&1"
	use	text
	set	n_iocbs,n_iocbs+1
	use	iocb_names
	segdef	&1	" name of the entrypoint
	maclist	on,save
	aci	~&2~,32	" name of the switch
	aci	~&3~,72     " attach description if constant
	use	iocb_ptrs
	even
&1:	its	-1,1
"		IOCB &2 attached as &3
	maclist   restore
	&end

	set	n_iocbs,0

" Standard IOCB definitions
	
	use	iocb_names
standard_iocb_info:
	use	iocb_ptrs
standard_iocb_ptrs:

	iocb	user_io,(user_i/o),()
	iocb	user_input,user_input,(syn_ user_i/o -inhibit close put_chars)
	iocb	user_output,user_output,(syn_ user_i/o -inhibit get_chars get_line close)
	iocb	error_output,error_output,(syn_ user_i/o -inhibit get_line get_chars close)

	use	text
n_standard_iocbs:
	vfd	36/n_iocbs

	use	text
	join	/text/iocb_names
	join	/static/iocb_ptrs


	" IOS writearound
	segdef	ios_call
	segdef	ios_call_attach

" iox_$ios_call: proc(p,...other args...,status);
"
" dcl 1 ics aligned based(p),		IOS-call communication structure.
"	2 sdbptr ptr,		Address of SDB for attachment.
"	2 dimptr ptr,		Address of DIM's transfer vector.
"	2 segdef_offset fixed.:	1=detach, 2=read, ..., 20=writesync.
"
" After clearing 'status' for the DIM, this routine re-maps its call into
"
"	lxl6 segdef_offset
"	call dimptr(sdbptr,...other args...,status);
"
" by altering the first argument pointer of the caller's argument list and passing the
" call on.  Note that all descriptors are correct and need not be changed or moved.
" This routine is used by the new "iox_" write-arounds to call the segdef points of
" old "ios_"-style DIMs.

ios_call:	ldx6	ap|0		Get offset of 'status' argument pointer.
	epp2	ap|0,6*		Get address of 'status' itself.
	stz	pr2|0		Clear 'status' because some DIMs do not do it
	stz	pr2|1		for themselves.
	epp2	ap|2,*		Get address of pointer to 'ics'='ics.sdbptr'.
	epp2	pr2|0,*		Get address of 'ics'='ics.sdbptr' itself.
	spri2	ap|2		First argument is now 'sdbptr'.
	lxl6	pr2|4		Get offset of desired DIM segdef.
	tra	pr2|2,*		Go to transfer vector of DIM.
"
" End of segdef point ..... iox_$ios_call(p,...other args...,status) .....



" iox_$ios_call_attach: proc(...four other args...,status,p);
"
" This routine re-maps its call into
"
"	lxl6 0,dl
"	call dimptr(...other args...,status,sdbptr);
"
" by altering the last argument pointer of the caller's argument list and passing the
" call on.  This routine is used to call the "attach" segdef point of an old-style DIM,
" which has a different convention regarding the SDB pointer than the other entries.
"
ios_call_attach:
	epp2	ap|10,*		Get address of 'status'.
	stz	pr2|0		Clear 'status'.
	stz	pr2|1		..
	epp2	ap|12,*		Get address of pointer to 'ics'='ics.sdbptr'.
	epp2	pr2|0,*		Get address of 'ics'='ics.sdbptr' itself.
	spri2	ap|12		Last argument is now 'sdbptr'.
	lxl6	0,dl		Get offset of 'attach' segdef to DIM.

	tra	pr2|2,*		Go to transfer vector of DIM.
"
" End of segdef point ..... iox_$ios_call_attach(...other args...,status,p) .....




	include	iocbx
	end
