/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
decimal_string:					/* routine to convert fixed bin(35) number to its decimal string representation,
						   as a varying string of max length 12. Digits are generated
						   by successive remainders, from right to left in a temporary string, then
						   copied into the argument.
						   Modified 7/28/71 by David Reed */
						/* Modified 9/19/74 by Steve Herbst to special-case for 100...0b */
     proc (integer, string);

dcl  (integer, number, position, scan) fixed bin (35);
dcl  (long_integer, long_number) fixed bin (71);
dcl  bits_of_arg bit (72);
dcl  oct_string char (13) varying;
dcl  long_oct_string char (25) varying;
dcl  long_dec_string char (23) varying;
dcl  lower fixed bin (63),
     lower_quotient fixed bin (35),
     (upper_quotient, upper) fixed bin (35),
     upper_word fixed bin (35) based;
dcl  negative bit (1);
dcl  string char (12) varying;
dcl  temp_string char (25);
dcl  1 temp_string_ovly aligned based (addr (temp_string)),
       2 bit9_string (0:24) bit (9) unaligned;
dcl  (substr, fixed, divide, bit, unspec, addr, mod) builtin;
						/*
						   /* decimal_string:
						   proc(integer, string);	*/

	if unspec (integer) = "1"b then do;
	     string = "-34359738368";
	     return;
	     end;

	negative = "0"b;				/* set flag saying number is not negative yet */
	number = integer;				/* copy argument */
	if number = 0 then do;			/* if arg = 0 then return "0" immediate */
	     string = "0";
	     return;
	     end;

	if number < 0
	then					/* if number is negative then remember to put out sign */
	     do;
	     number = -number;			/* and make number positive */
	     negative = "1"b;
	     end;

	do position = 11 by -1 while (number ^= 0);	/* generate digits into temp string in reverse */
	     bit9_string (position) = "00011"b || bit (fixed (mod (number, 10), 4), 4);
						/* make a digit by prefixing */
						/* appropriate bits for 9-bit code */
	     number = divide (number, 10, 35);
	end;

	if negative
	then					/* if we rembered to put out minus sign, do so */
	     do;
	     substr (temp_string, position + 1, 1) = "-";
	     position = position - 1;
	     end;
	string = substr (temp_string, position + 2, 11 - position);
						/* copy temp string into output argument */
	return;					/*						   /* entry to convert fixed bin(35) to octal varying string representation */

octal_string:
     entry (integer, oct_string);


	if unspec (integer) = "1"b then do;
	     oct_string = "-400000000000";
	     return;
	     end;

	position = 0;				/*	start at beginning of string */
	number = integer;				/* copy argument number */
	if number < 0
	then					/* make number positive, and output sign if necessary */
	     do;
	     number = -number;
	     position = 1;
	     substr (temp_string, 1, 1) = "-";
	     end;

	substr (bits_of_arg, 1, 36) = unspec (number);	/* move number into bit string */
	do scan = 0 to 10 while (substr (bits_of_arg, 1, 3) = ""b);
						/* scan for first non-zero 3 bit byte */
	     substr (bits_of_arg, 1, 36) = substr (bits_of_arg, 4, 33);
						/* shift bit representation left */
						/* one octal digit */
	end;
	do scan = scan to 11;			/* loop over rest of number, outputting each byte as a digit */
	     bit9_string (position) = "000110"b || substr (bits_of_arg, 1, 3);
						/* make octal digit */
	     substr (bits_of_arg, 1, 36) = substr (bits_of_arg, 4, 33);
						/* shift bit representation of number */
						/* 3 bits (an octal digit) left */
	     position = position + 1;
	end;


	oct_string = substr (temp_string, 1, position);	/* copy result into result string */
	return;



/*   /* routine to convert fixed bin(71) to octal representation as varying string */

long_octal_string:
     entry (long_integer, long_oct_string);


	if unspec (long_integer) = "1"b then do;
	     long_oct_string = "-400000000000000000000000";
	     return;
	     end;

	position = 0;				/* start at left end of temp string */
	long_number = long_integer;			/* copy argument number */

	if long_number < 0
	then					/* make sign positive, outputting minus sign if negation is necessary */
	     do;
	     long_number = -long_number;
	     position = position + 1;
	     substr (temp_string, 1, 1) = "-";
	     end;

	bits_of_arg = unspec (long_number);		/* copy number into bit string */
	do scan = 0 to 22 while (substr (bits_of_arg, 1, 3) = ""b);
						/* scan for first non-zero 3 bit byte */
	     bits_of_arg = substr (bits_of_arg, 4);	/* shift number left one octal digit */
	end;

	do scan = scan to 23;			/* scan rest of digits, making output as we go */
	     bit9_string (position) = "000110"b || substr (bits_of_arg, 1, 3);
						/* make octal digit */
	     bits_of_arg = substr (bits_of_arg, 4);	/* shift number left one octal digit */
	     position = position + 1;
	end;

	long_oct_string = substr (temp_string, 1, position);
						/* copy temp string into output string */
	return;





/*   /* convert fixed bin(71) to a decimal string representation as a varying string */

long_decimal_string:
     entry (long_integer, long_dec_string);

	if unspec (long_integer) = "1"b then do;
	     long_dec_string = "-2361183233875680165888";
	     return;
	     end;

	negative = ""b;				/* remember we have not yet found number < 0 */
	long_number = long_integer;			/* copy argument for convenience */

	if long_number = 0
	then					/* if number = 0 then return 1 char string */
	     do;
	     long_dec_string = "0";
	     return;
	     end;

	if long_number < 0
	then					/* if number is negative, remember it was negative, and make it positive */
	     do;
	     long_number = -long_number;
	     negative = "1"b;
	     end;					/* The following loop is needed because the current Multics hardware cannot
						   handle division of fixed bin(71) numbers. Thus, we handle the division
						   in two halves until the number being divided by 10 is less than 2 ** 63,
						   at which point, we may use standard pl1 division. */

	upper = addr (long_number) -> upper_word;	/* upper gets upper half of double word integer */
	lower = long_number - 68719476736 * upper;	/* lower gets lower half */

	do position = 22 by -1 while (upper >= 134217728);/* generate digits by hard division
						   until upper is <= 2**27 */
	     upper_quotient = divide (upper, 10, 35);
	     lower = lower + 68719476736 * (upper - 10 * upper_quotient);
	     lower_quotient = divide (lower, 10, 63);
	     bit9_string (position) = "00011"b || bit (fixed (lower - 10 * lower_quotient, 4), 4);
						/* make digit from number */
	     upper = upper_quotient;
	     lower = lower_quotient;
	end;

/* end of hard division. now number is less than 2**63 */

	lower = lower + 68719476736 * upper;		/* make lower contain the total result */

	do position = position by -1 while (lower ^= 0);	/* now convert to decimal string by normal algorithm */
	     bit9_string (position) = "00011"b || bit (fixed (mod (lower, 10), 4), 4);
	     lower = divide (lower, 10, 63);
	end;

	if negative
	then					/* if we must precede nuber by a sign character, prefix it now */
	     do;
	     substr (temp_string, position + 1, 1) = "-";
	     position = position - 1;
	     end;

	long_dec_string = substr (temp_string, position + 2, 22 - position);
						/* copy result into return arg */
	return;
     end;
