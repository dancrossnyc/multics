/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
iox_propagate: proc();

          return;					/* Not a legal entry. */

/* Pointers. */

dcl  (iocb_ptr, a_iocb_ptr, father_iocb_ptr) ptr;

/* Based. */

%include iocbx;

/* Constants. */


dcl  iox_$err_no_operation ext entry options (variable);
dcl  iox_$err_not_attached ext entry options (variable);
dcl  iox_$err_not_closed ext entry options (variable);
dcl  iox_$err_not_open ext entry options (variable);
dcl  iox_$err_old_dim ext entry options (variable);
dcl  open_bit bit (36) int static init ("100000000000000"b);
dcl  close_bit bit (36) int static init ("010000000000000"b);
dcl  get_line_bit bit (36) int static init ("001000000000000"b);
dcl  get_chars_bit bit (36) int static init ("000100000000000"b);
dcl  put_chars_bit bit (36) int static init ("000010000000000"b);
dcl  modes_bit bit (36) int static init ("000001000000000"b);
dcl  position_bit bit (36) int static init ("000000100000000"b);
dcl  control_bit bit (36) int static init ("000000010000000"b);
dcl  read_record_bit bit (36) int static init ("000000001000000"b);
dcl  write_record_bit bit (36) int static init ("000000000100000"b);
dcl  rewrite_record_bit bit (36) int static init ("000000000010000"b);
dcl  delete_record_bit bit (36) int static init ("000000000001000"b);
dcl  seek_key_bit bit (36) int static init ("000000000000100"b);
dcl  read_key_bit bit (36) int static init ("000000000000010"b);
dcl  read_length_bit bit (36) int static init ("000000000000001"b);

/* Built-in. */

dcl  null builtin;

/* End of declarations. */





/* Beginning of entry point ..... iox_$propagate(iocb_ptr) ..... */

propagate: entry(a_iocb_ptr);

	iocb_ptr = a_iocb_ptr;
	if iocb_ptr = null () then return;
	if iocb_ptr -> iocb.version ^= iox_$iocb_version_sentinel then return;
	if iocb_ptr -> iocb.actual_iocb_ptr = iocb_ptr then do;
						/* Not a SYN attachment, ensure IOCB consistent. */
	     if iocb_ptr -> iocb.attach_descrip_ptr = null () then do;
						/* IOCB is detached. */
		iocb_ptr -> iocb.attach_data_ptr, iocb_ptr -> iocb.open_descrip_ptr,
						/* "open_data_ptr" is reset below. */
		     iocb_ptr -> iocb.ios_compatibility = null ();
		iocb_ptr -> iocb.event_channel = "0"b;
		iocb_ptr -> iocb.detach_iocb = iox_$err_not_attached;
		iocb_ptr -> iocb.open = iox_$err_not_attached;
		iocb_ptr -> iocb.modes = iox_$err_not_attached;
		iocb_ptr -> iocb.control = iox_$err_not_attached;
		end;
	     else if iocb_ptr -> iocb.open_descrip_ptr = null () then do;
						/* IOCB is closed. */
		if iocb_ptr -> iocb.open = iox_$err_not_attached | iocb_ptr -> iocb.open = iox_$err_not_closed
		then iocb_ptr -> iocb.open = iox_$err_no_operation;
		if iocb_ptr -> iocb.control = iox_$err_no_operation | iocb_ptr -> iocb.control = iox_$err_not_attached
		then iocb_ptr -> iocb.control = iox_$err_not_open;
		if iocb_ptr -> iocb.modes = iox_$err_no_operation | iocb_ptr -> iocb.modes = iox_$err_not_attached
		then iocb_ptr -> iocb.modes = iox_$err_not_open;
		end;
	     if iocb_ptr -> iocb.open_descrip_ptr = null () then do;
						/* IOCB is detached or closed. */
		iocb_ptr -> iocb.open_data_ptr = null ();
		if iocb_ptr -> iocb.close ^= iox_$err_old_dim then iocb_ptr -> iocb.close = iox_$err_not_open;
		if iocb_ptr -> iocb.get_line ^= iox_$err_old_dim then iocb_ptr -> iocb.get_line = iox_$err_not_open;
		if iocb_ptr -> iocb.get_chars ^= iox_$err_old_dim then iocb_ptr -> iocb.get_chars = iox_$err_not_open;
		if iocb_ptr -> iocb.put_chars ^= iox_$err_old_dim then iocb_ptr -> iocb.put_chars = iox_$err_not_open;
		if iocb_ptr -> iocb.position ^= iox_$err_old_dim then iocb_ptr -> iocb.position = iox_$err_not_open;
		if iocb_ptr -> iocb.read_record ^= iox_$err_old_dim
		then iocb_ptr -> iocb.read_record = iox_$err_not_open;
		if iocb_ptr -> iocb.write_record ^= iox_$err_old_dim
		then iocb_ptr -> iocb.write_record = iox_$err_not_open;
		if iocb_ptr -> iocb.rewrite_record ^= iox_$err_old_dim
		then iocb_ptr -> iocb.rewrite_record = iox_$err_not_open;
		if iocb_ptr -> iocb.delete_record ^= iox_$err_old_dim
		then iocb_ptr -> iocb.delete_record = iox_$err_not_open;
		if iocb_ptr -> iocb.seek_key ^= iox_$err_old_dim then iocb_ptr -> iocb.seek_key = iox_$err_not_open;
		if iocb_ptr -> iocb.read_key ^= iox_$err_old_dim then iocb_ptr -> iocb.read_key = iox_$err_not_open;
		if iocb_ptr -> iocb.read_length ^= iox_$err_old_dim
		then iocb_ptr -> iocb.read_length = iox_$err_not_open;
		end;
	     else do;				/* IOCB is open. */
		if iocb_ptr -> iocb.detach_iocb ^= iox_$err_old_dim
		then iocb_ptr -> iocb.detach_iocb = iox_$err_not_closed;
		if iocb_ptr -> iocb.open ^= iox_$err_old_dim then iocb_ptr -> iocb.open = iox_$err_not_closed;
		if iocb_ptr -> iocb.get_line = iox_$err_not_open
		then iocb_ptr -> iocb.get_line = iox_$err_no_operation;
		if iocb_ptr -> iocb.get_chars = iox_$err_not_open
		then iocb_ptr -> iocb.get_chars = iox_$err_no_operation;
		if iocb_ptr -> iocb.put_chars = iox_$err_not_open
		then iocb_ptr -> iocb.put_chars = iox_$err_no_operation;
		if iocb_ptr -> iocb.modes = iox_$err_not_open then iocb_ptr -> iocb.modes = iox_$err_no_operation;
		if iocb_ptr -> iocb.position = iox_$err_not_open
		then iocb_ptr -> iocb.position = iox_$err_no_operation;
		if iocb_ptr -> iocb.control = iox_$err_not_open then iocb_ptr -> iocb.control = iox_$err_no_operation;
		if iocb_ptr -> iocb.read_record = iox_$err_not_open
		then iocb_ptr -> iocb.read_record = iox_$err_no_operation;
		if iocb_ptr -> iocb.write_record = iox_$err_not_open
		then iocb_ptr -> iocb.write_record = iox_$err_no_operation;
		if iocb_ptr -> iocb.rewrite_record = iox_$err_not_open
		then iocb_ptr -> iocb.rewrite_record = iox_$err_no_operation;
		if iocb_ptr -> iocb.delete_record = iox_$err_not_open
		then iocb_ptr -> iocb.delete_record = iox_$err_no_operation;
		if iocb_ptr -> iocb.seek_key = iox_$err_not_open
		then iocb_ptr -> iocb.seek_key = iox_$err_no_operation;
		if iocb_ptr -> iocb.read_key = iox_$err_not_open
		then iocb_ptr -> iocb.read_key = iox_$err_no_operation;
		if iocb_ptr -> iocb.read_length = iox_$err_not_open
		then iocb_ptr -> iocb.read_length = iox_$err_no_operation;
		end;
	     end;

	father_iocb_ptr = iocb_ptr;
	go to skip;

recurse:
     entry (a_iocb_ptr);

	father_iocb_ptr = a_iocb_ptr;

/* Propagate corrected IOCB fields to all SYN offspring. */

skip:
	do iocb_ptr = father_iocb_ptr -> iocb.syn_son repeat iocb_ptr -> iocb.syn_brother while (iocb_ptr ^= null ());
	     iocb_ptr -> iocb.actual_iocb_ptr = father_iocb_ptr -> iocb.actual_iocb_ptr;
						/* Update each son. */
	     iocb_ptr -> iocb.open_descrip_ptr = father_iocb_ptr -> iocb.open_descrip_ptr;
	     iocb_ptr -> iocb.open_data_ptr = father_iocb_ptr -> iocb.open_data_ptr;
	     iocb_ptr -> iocb.event_channel = father_iocb_ptr -> iocb.event_channel;
	     iocb_ptr -> iocb.ios_compatibility = father_iocb_ptr -> iocb.ios_compatibility;
	     if iocb_ptr -> iocb.syn_inhibits & open_bit
	     then iocb_ptr -> iocb.open = iox_$err_no_operation;
	     else iocb_ptr -> iocb.open = father_iocb_ptr -> iocb.open;
	     if iocb_ptr -> iocb.syn_inhibits & close_bit
	     then iocb_ptr -> iocb.close = iox_$err_no_operation;
	     else iocb_ptr -> iocb.close = father_iocb_ptr -> iocb.close;
	     if iocb_ptr -> iocb.syn_inhibits & get_line_bit
	     then iocb_ptr -> iocb.get_line = iox_$err_no_operation;
	     else iocb_ptr -> iocb.get_line = father_iocb_ptr -> iocb.get_line;
	     if iocb_ptr -> iocb.syn_inhibits & get_chars_bit
	     then iocb_ptr -> iocb.get_chars = iox_$err_no_operation;
	     else iocb_ptr -> iocb.get_chars = father_iocb_ptr -> iocb.get_chars;
	     if iocb_ptr -> iocb.syn_inhibits & put_chars_bit
	     then iocb_ptr -> iocb.put_chars = iox_$err_no_operation;
	     else iocb_ptr -> iocb.put_chars = father_iocb_ptr -> iocb.put_chars;
	     if iocb_ptr -> iocb.syn_inhibits & modes_bit
	     then iocb_ptr -> iocb.modes = iox_$err_no_operation;
	     else iocb_ptr -> iocb.modes = father_iocb_ptr -> iocb.modes;
	     if iocb_ptr -> iocb.syn_inhibits & position_bit
	     then iocb_ptr -> iocb.position = iox_$err_no_operation;
	     else iocb_ptr -> iocb.position = father_iocb_ptr -> iocb.position;
	     if iocb_ptr -> iocb.syn_inhibits & control_bit
	     then iocb_ptr -> iocb.control = iox_$err_no_operation;
	     else iocb_ptr -> iocb.control = father_iocb_ptr -> iocb.control;
	     if iocb_ptr -> iocb.syn_inhibits & read_record_bit
	     then iocb_ptr -> iocb.read_record = iox_$err_no_operation;
	     else iocb_ptr -> iocb.read_record = father_iocb_ptr -> iocb.read_record;
	     if iocb_ptr -> iocb.syn_inhibits & write_record_bit
	     then iocb_ptr -> iocb.write_record = iox_$err_no_operation;
	     else iocb_ptr -> iocb.write_record = father_iocb_ptr -> iocb.write_record;
	     if iocb_ptr -> iocb.syn_inhibits & rewrite_record_bit
	     then iocb_ptr -> iocb.rewrite_record = iox_$err_no_operation;
	     else iocb_ptr -> iocb.rewrite_record = father_iocb_ptr -> iocb.rewrite_record;
	     if iocb_ptr -> iocb.syn_inhibits & delete_record_bit
	     then iocb_ptr -> iocb.delete_record = iox_$err_no_operation;
	     else iocb_ptr -> iocb.delete_record = father_iocb_ptr -> iocb.delete_record;
	     if iocb_ptr -> iocb.syn_inhibits & seek_key_bit
	     then iocb_ptr -> iocb.seek_key = iox_$err_no_operation;
	     else iocb_ptr -> iocb.seek_key = father_iocb_ptr -> iocb.seek_key;
	     if iocb_ptr -> iocb.syn_inhibits & read_key_bit
	     then iocb_ptr -> iocb.read_key = iox_$err_no_operation;
	     else iocb_ptr -> iocb.read_key = father_iocb_ptr -> iocb.read_key;
	     if iocb_ptr -> iocb.syn_inhibits & read_length_bit
	     then iocb_ptr -> iocb.read_length = iox_$err_no_operation;
	     else iocb_ptr -> iocb.read_length = father_iocb_ptr -> iocb.read_length;
	     if iocb_ptr -> iocb.syn_son ^= null then call recurse (iocb_ptr);
	end;
	return;

     end iox_propagate;
