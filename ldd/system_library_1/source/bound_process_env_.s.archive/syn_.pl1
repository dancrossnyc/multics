/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */

/* Modified 05/15/84 by Jim Lippard to free attach data on detach */
syn_$syn_attach:
     proc (p1, args, loud_sw_param, Code);

/* Parameters. */

dcl  args (*) char (*) varying parameter;
dcl  p1 ptr parameter;
dcl  loud_sw_param bit (1) aligned parameter;
dcl  Code fixed bin (35) parameter;

/* Automatic. */

dcl  blkptr ptr;
dcl  code fixed (35);
dcl  i fixed;
dcl  inhibit_sw bit (1);
dcl  inhibits bit (36);
dcl  loud_sw bit (1);
dcl  mask fixed (35);
dcl  (p2, p3) ptr;

/* Procedures. */

dcl  com_err_ ext entry options (variable);
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$set_ips_mask ext entry (fixed bin (35), fixed bin (35));
dcl  hcs_$reset_ips_mask ext entry (fixed bin (35), fixed bin (35));
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$propagate entry (ptr);

/* Based. */

dcl  based_area area based;

dcl  1 blk aligned based (blkptr),
       2 attach char (189) varying;
%include iocbx;

/* Constants. */

dcl  error_table_$cyclic_syn fixed (35) ext;
dcl  error_table_$not_detached fixed (35) ext;
dcl  error_table_$noarg fixed (35) ext;
dcl  error_table_$badopt fixed (35) ext;
dcl  iox_$err_no_operation ext entry options (variable);
dcl  iox_$err_not_attached ext entry options (variable);
dcl  iox_$err_not_open ext entry options (variable);
dcl  open_bit bit (36) int static init ("100000000000000"b);
dcl  close_bit bit (36) int static init ("010000000000000"b);
dcl  get_line_bit bit (36) int static init ("001000000000000"b);
dcl  get_chars_bit bit (36) int static init ("000100000000000"b);
dcl  put_chars_bit bit (36) int static init ("000010000000000"b);
dcl  modes_bit bit (36) int static init ("000001000000000"b);
dcl  position_bit bit (36) int static init ("000000100000000"b);
dcl  control_bit bit (36) int static init ("000000010000000"b);
dcl  read_record_bit bit (36) int static init ("000000001000000"b);
dcl  write_record_bit bit (36) int static init ("000000000100000"b);
dcl  rewrite_record_bit bit (36) int static init ("000000000010000"b);
dcl  delete_record_bit bit (36) int static init ("000000000001000"b);
dcl  seek_key_bit bit (36) int static init ("000000000000100"b);
dcl  read_key_bit bit (36) int static init ("000000000000010"b);
dcl  read_length_bit bit (36) int static init ("000000000000001"b);

/* Built-ins. */

dcl  (addr, hbound, index, null) builtin;

dcl  cleanup condition;

/* End of declarations. */
%page;
/* Beginning of entry point ..... syn_$syn_attach(p1,args,loud_sw_param,Code) ..... */

	loud_sw = loud_sw_param;
	mask = 0;					/* used by cleaner which is called by error */
	
	if hbound (args, 1) < 1 then call error (error_table_$noarg);

	call iox_$find_iocb ((args (1)), p2, code);
	if code ^= 0 then call error (code);

	inhibits, inhibit_sw = "0"b;
	do i = 2 to hbound (args, 1);
	     if /* case */ (args (i) = "-inh") | (args (i) = "-inhibit") then inhibit_sw = "1"b;
	     else if ^inhibit_sw then go to badopt;
	     else if args (i) = "open" then inhibits = inhibits | open_bit;
	     else if args (i) = "close" then inhibits = inhibits | close_bit;
	     else if args (i) = "get_line" then inhibits = inhibits | get_line_bit;
	     else if args (i) = "get_chars" then inhibits = inhibits | get_chars_bit;
	     else if args (i) = "put_chars" then inhibits = inhibits | put_chars_bit;
	     else if args (i) = "modes" then inhibits = inhibits | modes_bit;
	     else if args (i) = "position" then inhibits = inhibits | position_bit;
	     else if args (i) = "control" then inhibits = inhibits | control_bit;
	     else if args (i) = "read_record" then inhibits = inhibits | read_record_bit;
	     else if args (i) = "write_record" then inhibits = inhibits | write_record_bit;
	     else if args (i) = "rewrite_record" then inhibits = inhibits | rewrite_record_bit;
	     else if args (i) = "delete_record" then inhibits = inhibits | delete_record_bit;
	     else if args (i) = "seek_key" then inhibits = inhibits | seek_key_bit;
	     else if args (i) = "read_key" then inhibits = inhibits | read_key_bit;
	     else if args (i) = "read_length" then inhibits = inhibits | read_length_bit;
	     else
badopt:
		call error (error_table_$badopt);
	end;

	if p1 -> iocb.attach_descrip_ptr ^= null () then call error (error_table_$not_detached);
	if p2 -> iocb.actual_iocb_ptr = p1 then call error (error_table_$cyclic_syn);

	allocate blk in (get_system_free_area_ () -> based_area) set (blkptr);
	blk.attach = "syn_ " || rtrim (p2 -> iocb.name);
	if inhibits ^= ""b then do;
	     blk.attach = blk.attach || " -inh";
	     if inhibits & open_bit then blk.attach = blk.attach || " open";
	     if inhibits & close_bit then blk.attach = blk.attach || " close";
	     if inhibits & get_line_bit then blk.attach = blk.attach || " get_line";
	     if inhibits & get_chars_bit then blk.attach = blk.attach || " get_chars";
	     if inhibits & put_chars_bit then blk.attach = blk.attach || " put_chars";
	     if inhibits & modes_bit then blk.attach = blk.attach || " modes";
	     if inhibits & position_bit then blk.attach = blk.attach || " position";
	     if inhibits & control_bit then blk.attach = blk.attach || " control";
	     if inhibits & read_record_bit then blk.attach = blk.attach || " read_record";
	     if inhibits & write_record_bit then blk.attach = blk.attach || " write_record";
	     if inhibits & rewrite_record_bit then blk.attach = blk.attach || " rewrite_record";
	     if inhibits & delete_record_bit then blk.attach = blk.attach || " delete_record";
	     if inhibits & seek_key_bit then blk.attach = blk.attach || " seek_key";
	     if inhibits & read_key_bit then blk.attach = blk.attach || " read_key";
	     if inhibits & read_length_bit then blk.attach = blk.attach || " read_length";
	     end;

	mask = 0;
	on cleanup call cleaner;
	call hcs_$set_ips_mask (0, mask);

	p1 -> iocb.actual_iocb_ptr = p2 -> iocb.actual_iocb_ptr;
	p1 -> iocb.attach_descrip_ptr = addr (blk.attach);
	p1 -> iocb.attach_data_ptr = blkptr;
	p1 -> iocb.open_descrip_ptr = p2 -> iocb.open_descrip_ptr;
	p1 -> iocb.open_data_ptr = p2 -> iocb.open_data_ptr;
	p1 -> iocb.detach_iocb = syn_detach;
	if inhibits & open_bit
	then p1 -> iocb.open = iox_$err_no_operation;
	else p1 -> iocb.open = p2 -> iocb.open;
	if inhibits & close_bit
	then p1 -> iocb.close = iox_$err_no_operation;
	else p1 -> iocb.close = p2 -> iocb.close;
	if inhibits & get_line_bit
	then p1 -> iocb.get_line = iox_$err_no_operation;
	else p1 -> iocb.get_line = p2 -> iocb.get_line;
	if inhibits & get_chars_bit
	then p1 -> iocb.get_chars = iox_$err_no_operation;
	else p1 -> iocb.get_chars = p2 -> iocb.get_chars;
	if inhibits & put_chars_bit
	then p1 -> iocb.put_chars = iox_$err_no_operation;
	else p1 -> iocb.put_chars = p2 -> iocb.put_chars;
	if inhibits & modes_bit
	then p1 -> iocb.modes = iox_$err_no_operation;
	else p1 -> iocb.modes = p2 -> iocb.modes;
	if inhibits & position_bit
	then p1 -> iocb.position = iox_$err_no_operation;
	else p1 -> iocb.position = p2 -> iocb.position;
	if inhibits & control_bit
	then p1 -> iocb.control = iox_$err_no_operation;
	else p1 -> iocb.control = p2 -> iocb.control;
	if inhibits & read_record_bit
	then p1 -> iocb.read_record = iox_$err_no_operation;
	else p1 -> iocb.read_record = p2 -> iocb.read_record;
	if inhibits & write_record_bit
	then p1 -> iocb.write_record = iox_$err_no_operation;
	else p1 -> iocb.write_record = p2 -> iocb.write_record;
	if inhibits & rewrite_record_bit
	then p1 -> iocb.rewrite_record = iox_$err_no_operation;
	else p1 -> iocb.rewrite_record = p2 -> iocb.rewrite_record;
	if inhibits & delete_record_bit
	then p1 -> iocb.delete_record = iox_$err_no_operation;
	else p1 -> iocb.delete_record = p2 -> iocb.delete_record;
	if inhibits & seek_key_bit
	then p1 -> iocb.seek_key = iox_$err_no_operation;
	else p1 -> iocb.seek_key = p2 -> iocb.seek_key;
	if inhibits & read_key_bit
	then p1 -> iocb.read_key = iox_$err_no_operation;
	else p1 -> iocb.read_key = p2 -> iocb.read_key;
	if inhibits & read_length_bit
	then p1 -> iocb.read_length = iox_$err_no_operation;
	else p1 -> iocb.read_length = p2 -> iocb.read_length;
	p1 -> iocb.ios_compatibility = p2 -> iocb.ios_compatibility;
	p1 -> iocb.syn_inhibits = inhibits;
	p1 -> iocb.syn_father = p2;
	p1 -> iocb.syn_brother = p2 -> iocb.syn_son;
	p2 -> iocb.syn_son = p1;
	call iox_$propagate (p1);
	call cleaner;
	Code = 0;
	return;
%page;
/* Handler for the 'detach_iocb' I/O operation. */

syn_detach:
     entry (p1, Code);

	mask = 0;
	on cleanup call cleaner;
	call hcs_$set_ips_mask (0, mask);

	blkptr = p1 -> iocb.attach_data_ptr;
	p1 -> iocb.actual_iocb_ptr = p1;
	p1 -> iocb.attach_descrip_ptr = null ();
	p1 -> iocb.attach_data_ptr = null ();
	p1 -> iocb.open_descrip_ptr = null ();
	p1 -> iocb.open_data_ptr = null ();
	p1 -> iocb.detach_iocb = iox_$err_not_attached;
	p1 -> iocb.open = iox_$err_not_attached;
	p1 -> iocb.close = iox_$err_not_open;
	p1 -> iocb.get_line = iox_$err_not_open;
	p1 -> iocb.get_chars = iox_$err_not_open;
	p1 -> iocb.put_chars = iox_$err_not_open;
	p1 -> iocb.modes = iox_$err_not_open;
	p1 -> iocb.position = iox_$err_not_open;
	p1 -> iocb.control = iox_$err_not_open;
	p1 -> iocb.read_record = iox_$err_not_open;
	p1 -> iocb.write_record = iox_$err_not_open;
	p1 -> iocb.rewrite_record = iox_$err_not_open;
	p1 -> iocb.delete_record = iox_$err_not_open;
	p1 -> iocb.seek_key = iox_$err_not_open;
	p1 -> iocb.read_key = iox_$err_not_open;
	p1 -> iocb.read_length = iox_$err_not_open;
	p1 -> iocb.ios_compatibility = null ();
	p1 -> iocb.syn_inhibits = "0"b;
	p3 = p1 -> iocb.syn_father;
	if p3 -> iocb.syn_son = p1
	then p3 -> iocb.syn_son = p1 -> iocb.syn_brother;
	else do;
	     do p3 = p3 -> iocb.syn_son repeat p3 -> iocb.syn_brother while (p3 -> iocb.syn_brother ^= p1);
	     end;
	     p3 -> iocb.syn_brother = p1 -> iocb.syn_brother;
	     end;
	p1 -> iocb.syn_father, p1 -> iocb.syn_brother = null ();
	call iox_$propagate (p1);
	call cleaner;
	Code = 0;
	free blkptr -> blk;
	return;
%page;
error:
     procedure (c);
dcl  c fixed bin (35) parameter;

	call cleaner;
	if loud_sw then call com_err_ (c, "syn_");
	code = c;
	go to return;
     end error;

return:
	Code = code;
	return;


cleaner:
     procedure;
	if mask ^= 0 then call hcs_$reset_ips_mask (mask, mask);
	return;
     end cleaner;

     end syn_$syn_attach;
