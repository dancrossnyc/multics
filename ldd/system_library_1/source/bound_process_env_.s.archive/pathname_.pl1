/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Construct pathnames and archive component pathnames.

   Written 9 April 1981 by M. N. Davidoff.
*/
/* format: style2 */
pathname_:
     procedure (P_dirname, P_entryname) returns (char (168));

	declare P_code		 fixed binary (35);
	declare P_component_name	 char (*);
	declare P_dirname		 char (*);
	declare P_entryname		 char (*);
	declare P_pathname		 char (*);

/* automatic */

	declare component_name	 char (32) varying;
	declare dirname		 char (168) varying;
	declare entryname		 char (32) varying;
	declare have_code		 bit (1) aligned;
	declare pathname		 char (194) varying;
	declare return_length	 fixed binary (21);

/* builtin */

	declare (after, index, length, maxlength, min, reverse, rtrim, substr)
				 builtin;

/* internal static */

	declare ARCHIVE_SUFFIX	 char (8) internal static options (constant) initial (".archive");
	declare PATHLONG		 char (20) internal static options (constant) initial (" <PATHNAME TOO LONG>");

/* external static */

	declare error_table_$pathlong	 fixed binary (35) external static;

/* P_dirname		(Input)
   P_entryname		(Input) */

	component_name = "";
	return_length = maxlength (dirname);
	have_code = "0"b;
	goto join;

/* P_dirname		(Input)
   P_entryname		(Input)
   P_component_name		(Input) */

component:
     entry (P_dirname, P_entryname, P_component_name) returns (char (194));

	component_name = rtrim (P_component_name);
	return_length = maxlength (pathname);
	have_code = "0"b;
	goto join;

/* P_dirname		(Input)
   P_entryname		(Input)
   P_component_name		(Input)
   P_pathname		(Output)
   P_code			(Output) */

component_check:
     entry (P_dirname, P_entryname, P_component_name, P_pathname, P_code);

	component_name = rtrim (P_component_name);
	return_length = min (length (P_pathname), maxlength (pathname));
	have_code = "1"b;
	P_pathname = "";
	P_code = 0;

join:
	dirname = rtrim (P_dirname);
	entryname = rtrim (P_entryname);

	if component_name ^= "" & index (reverse (entryname), reverse (ARCHIVE_SUFFIX)) = 1
	then entryname = reverse (after (reverse (entryname), reverse (ARCHIVE_SUFFIX)));

	if dirname = ">"
	then pathname = dirname || entryname;

	else begin;
		declare max_pathname_length	 fixed binary (21);

		if component_name = ""
		then max_pathname_length = return_length;
		else max_pathname_length = return_length - length ("::") - length (component_name);

		pathname = dirname || ">" || entryname;

		if length (dirname) + length (">") + length (entryname) > max_pathname_length
		then if have_code
		     then P_code = error_table_$pathlong;
		     else pathname = substr (pathname, 1, max_pathname_length - length (PATHLONG)) || PATHLONG;
	     end;

	if component_name ^= ""
	then pathname = pathname || "::" || component_name;

	if have_code
	then P_pathname = pathname;
	else return (pathname);
     end pathname_;
