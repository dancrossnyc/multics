/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* procedure to initialize the user ring iox_ environment */
/* The process is terminated in this program on failure so that stack history
   will be useful. It this program returned a code it would be
   lose the information of what attachment failed. Already_attached
   switches are not considered to be errors so that calling this
   program twice will not kill the process. */

/* format: style2 */

iox_init_:
     procedure;
	return;

/*
This procedure attached the switches specified in the constant
data in iox_.alm for a standard user ring io system.
*/

	declare iox_$n_standard_iocbs	 fixed bin (35) external static;
	declare iox_$standard_iocb_ptrs
				 bit (36) aligned external static;
	declare iox_$standard_iocb_info
				 bit (36) aligned external static;

	declare iocb_ptrs_ptr	 pointer;
	declare iocb_info_ptr	 pointer;
	declare i			 fixed bin;

	declare 1 iocb_info		 (iox_$n_standard_iocbs) aligned based (iocb_info_ptr),
		2 name		 character (32) unaligned,
		2 attach_description character (72) unaligned;

	declare iocb_ptrs		 (iox_$n_standard_iocbs) pointer aligned based (iocb_ptrs_ptr);

	declare code		 fixed bin (35);

	declare error_table_$not_detached
				 fixed bin (35) external static;

	declare iox_$attach_name	 entry (character (*), pointer, character (*), pointer, fixed bin (35));
	declare iox_$find_iocb	 entry (character (*), pointer, fixed bin (35));


init_standard_iocbs:
     entry;
	iocb_ptrs_ptr = addr (iox_$standard_iocb_ptrs);
	iocb_info_ptr = addr (iox_$standard_iocb_info);

	do i = 1 to iox_$n_standard_iocbs;
	     code = 0;
	     if iocb_info.attach_description (i) ^= ""
	     then call iox_$attach_name (iocb_info.name (i), iocb_ptrs (i), rtrim (iocb_info.attach_description (i)),
		     null (), code);		/* allow io modules in the home directory */
	     else call iox_$find_iocb (iocb_info.name (i), iocb_ptrs (i), code);
	     if code ^= 0 & code ^= error_table_$not_detached
	     then call failure (code, i, iocb_ptrs (i), iocb_info.name (i), rtrim (iocb_info.attach_description (i)));

	end;
	return;

failure:
     procedure (code, switchx, iocb_ptr, name, atd) options (non_quick);

	/*** the stack frame of this procedure is very informative
	     in a saved dead process */

	declare code		 fixed bin (35);
	declare switchx		 fixed bin;
	declare iocb_ptr		 pointer;
	declare name		 character (32);
	declare atd		 character (72);
	declare terminate_process_	 entry (char (*), ptr);

	declare 1 terminate_info	 aligned,
		2 version		 fixed bin,
		2 s_code		 fixed bin (35);

	terminate_info.version = 0;
	terminate_info.s_code = code;

	call terminate_process_ ("io_attach", addr (terminate_info));
     end failure;
     end iox_init_;
