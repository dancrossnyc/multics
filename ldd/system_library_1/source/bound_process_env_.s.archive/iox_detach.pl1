/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: style4,inddcls,^ifthendo,^indproc */
iox_detach: proc();

          return;					/* Not a legal entry. */

/* Written 11/29/82 by S. Krupp. */

/* Automatic */

	dcl  code fixed bin (35);
	dcl  description char(length(arg_descrip));
	dcl  entry_var entry (ptr, (*) char (*) var, fixed bin (35)) variable;
	dcl  iocb_ptr ptr;
	dcl  max_option_len fixed bin (21);
	dcl  n_options fixed bin (21);

/* Builtin */

	dcl  length builtin;

/* Entries */

	dcl  iox_get_options entry (char (*), (*) char (*) var, fixed bin (35));
	dcl  iox_measure_options entry (char (*), fixed bin (21), fixed bin (21), fixed bin (35));

/* Parameter */

	dcl  arg_code fixed bin (35);
	dcl  arg_descrip char (*);
	dcl  arg_iocb_ptr ptr;

%page;
%include iocb;
%page;

/*
   * This program, given a detach description, breaks up the description
   * into its elements and then calls the appropriate I/O module entry.
*/

detach: entry(arg_iocb_ptr, arg_descrip, arg_code);

	iocb_ptr = arg_iocb_ptr -> iocb.actual_iocb_ptr;
	description = arg_descrip;
	code = 0;

	call iox_measure_options (description, n_options, max_option_len, code);
	if code ^= 0
	then goto DETACH_RETURN;

	begin;

	     dcl	option_array (n_options) char (max_option_len) var;

	     call iox_get_options (description, option_array, code);
	     if code ^= 0
	     then goto DETACH_RETURN;

	     entry_var = iocb_ptr -> iocb.detach;
	     call entry_var (iocb_ptr, option_array, code);

	end;

DETACH_RETURN:

	arg_code = code;

     end iox_detach;
