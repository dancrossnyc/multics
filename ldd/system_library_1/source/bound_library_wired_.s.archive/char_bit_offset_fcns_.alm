" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" Subroutines to manipulate the word and bit numbers of an ITS pointer as
" either a character or bit offset from the base of the segment referenced
" by the ITS pointer
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

" Created: September 1980 by G. Palter


	name	char_bit_offset_fcns_

	segdef	char_offset_		" return character offset of pointer
	segdef	add_char_offset_		" increment the character offset
	segdef	set_char_offset_		" set the character offset

	segdef	bit_offset_
	segdef	add_bit_offset_		" as above but for bit offsets
	segdef	set_bit_offset_


" Constants

	even
word_bit_mask:				" mask to obtain word and bit offsets
	vfd	36/0			" nothing usefull in the A
	vfd	18/-1,3/0,6/-1,9/0


bit_to_char_offset:				" converts bit offset to character offset
	vfd	36/0,36/0,36/0,36/0,36/0,36/0,36/0,36/0,36/0
	vfd	36/1,36/1,36/1,36/1,36/1,36/1,36/1,36/1,36/1
	vfd	36/2,36/2,36/2,36/2,36/2,36/2,36/2,36/2,36/2
	vfd	36/3,36/3,36/3,36/3,36/3,36/3,36/3,36/3,36/3

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" char_offset_: Returns the character offset relative to the base of the
"	      segment of the character addressed by the given pointer
"
"    dcl  char_offset_ entry (pointer) returns (fixed binary (21)) reducible;
"    character_offset = char_offset_ (pointer_value);
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

char_offset_:
	ldaq	pr0|2,*			" pickup the pointer
	anaq	word_bit_mask		" clear unwanted bits from pointer
	llr	18+2			" puts character offset into A
	qrl	9+18+2			" puts bit offset into QL
	ada	bit_to_char_offset,ql	" add in converted bit offset
	sta	pr0|4,*			" and return it
	short_return


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" add_char_offset_: Constructs a pointer to a character relative to the
"		character referenced by the input pointer;" the
"		displacement to the new character may be positive/negative
"
"    dcl  add_char_offset_ entry (pointer, fixed binary (21)) returns (pointer)
"		       reducible;
"    new_pointer_value = add_char_offset_ (pointer_value, char_displacement);
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

add_char_offset_:
	epp3	pr0|2,*			" pick up pointer
	epp3	pr3|0,*
	lda	pr0|4,*			" get character displacement
	a9bd	pr3|0,al			" ZAP!
	spri3	pr0|6,*			" set output pointer
	short_return


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" set_char_offset_: Constructs a pointer to a character in the segment
"		referenced by the input pointer
"
"    dcl  set_char_offset_ entry (pointer, fixed binary (21)) returns (pointer)
"		       reducible;
"    new_pointer_value = set_char_offset_ (pointer_value, character_offset);
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

set_char_offset_:
	epp3	pr0|2,*			" get pointer to segment ...
	epbp3	pr3|0,*			" ... base of input pointer
	lda	pr0|4,*			" get new character offset
	a9bd	pr3|0,al			" ZAP!
	spri3	pr0|6,*			" store into output value
	short_return

" 

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" bit_offset_: Returns the bit offset relative to the base of the segment of
"	     the bit addressed by the given pointer
"
"    dcl  bit_offset entry (pointer) returns (fixed binary (24)) reducible;
"    bit_offset = bit_offset_ (pointer_value);
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

bit_offset_:
	ldaq	pr0|2,*			" pickup the pointer
	anaq	word_bit_mask		" mask out the useless bits
	llr	18			" puts word offset into A
	eax0	0,al			" copy word offset
	alr	5			" 32 * word offset into A
	qrl	9+18			" puts bit offset into QL
	stq	pr0|4,*			" save it here
	eaq	0,x0			" get back the word offset
	qrl	18-2			" 4 * word offset into Q
	asq	pr0|4,*			" add to bit offset in word
	asa	pr0|4,*			" add 32 * word offset to get 36*WO + BO
	short_return


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" add_bit_offset_: Constructs a pointer to a bit relative to the bit referenced
"	         by the input pointer;" the displacement to the new bit may
"	         be positive or negative
"
"    dcl  add_bit_offset_ entry (pointer, fixed binary (24)) returns (pointer)
"		      reducible;
"    new_pointer_value = add_bit_offset_ (pointer_value, bit_displacement);
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

add_bit_offset_:
	epp3	pr0|2,*			" pick up pointer
	epp3	pr3|0,*
	lda	pr0|4,*			" get bit displacement
	abd	pr3|0,al			" ZAP!
	spri3	pr0|6,*			" set output pointer
	short_return


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" set_bit_offset_: Constructs a pointer to a bit in the segment referenced by
"	         the input pointer
"
"    dcl  set_bit_offset_ entry (pointer, fixed binary (24)) returns (pointer)
"		      reducible;
"    new_pointer_value = set_bit_offset_ (pointer_value, bit_offset);
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

set_bit_offset_:
	epp3	pr0|2,*			" get pointer to segment ...
	epbp3	pr3|0,*			" ... base of input pointer
	lda	pr0|4,*			" get new bit offset
	abd	pr3|0,al			" ZAP!
	spri3	pr0|6,*			" store into output value
	short_return

	end
