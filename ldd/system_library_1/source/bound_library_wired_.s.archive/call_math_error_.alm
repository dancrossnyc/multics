" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(86-07-14,BWong), approve(86-07-14,MCR7413),
"     audit(86-07-16,Ginter), install(86-07-28,MR12.0-1104):
"     Fix fortran bug 495.
"                                                      END HISTORY COMMENTS


" This routine is called when an error is detected by an ALM math routine.
" Calling sequence is
"		ldq	error_code
"		tsx0	call_math_error_
" This routine must be bound with the other math routines in order to work!
"
" At entry,	pr0 -> pl1_operators_ | arglist of caller and must be preserved
" 		pr2 -> work area of math routines and must be preserved
"		pr3 -> return loc of real math routine which may be
"		in the PL/I program or in an alm write-around.
"
"	Modified by BW 86-03-18 to store PR3 in 'stack_frame.return_ptr'.
"		This is needed by 'trace_stack' and 'probe' to correctly
"		diagnose the line on which the math error occurs.  In
"		the case of a math routine calling another math routine,
"		the called math routine must not encounter an error
"		which requires a call to 'call_math_error_'.  It is up
"		to the math routine which calls the other math routine
"		to ensure this.  'double_square_root_' is currently the
"		only routine which is called by other math routines 
"		(arc_sine_ and double_arc_sine_).  Fixes Fortran error
"		number 495.
"	Modified by HH 84-01-13 to not store PR3 in 'stack_frame.return_ptr'.
"		This was of no value since control is always returned
"		through PR3, but was of great harm if the calling math
"		routine was called from another math routine, since that
"		would change the segment number in 'stack_frame.return_ptr'
"		from that of the owner of the stack frame to that of our
"		caller's caller (which means that the next call to
"		'pl1_operators_' could return to our caller's caller
"		at a random offset, rather than to the owner of the frame).
"
	segdef	call_math_error_
"
	tempd	work_ptr,ops_ptr,arglist(5)
	temp	code
"
	include	stack_frame
	include	stack_header
"
call_math_error_:
	epp4	2|0		save work ptr in pr4
	spri3	sp|stack_frame.return_ptr	save return pointer
	epbpsb	sp|0		get ptr to base of stack
	push
	stq	code		save error code
	ldq	stack_frame.support_bit,dl	set support bit
	orsq	sp|stack_frame.flag_word
	spri0	ops_ptr		save ptr to pl1_operators_
	epp2	<call_math_error_>|[error_in_math_routine_]+1	set entry ptr
	spri2	sp|stack_frame.entry_ptr
	spri4	work_ptr		save work ptr where we can get at it
	epp2	code		1st arg = code
	spri2	arglist+2
	fld	1*2048,dl
	staq	arglist
	epaq	*
	lprplp	sb|stack_header.lot_ptr,*au
	call	<math_error_>|[math_error_](arglist)
	epp2	work_ptr,*	restore work ptr
	epp0	ops_ptr,*		restore operator ptr
	sprisp	sb|stack_header.stack_end_ptr	pop stack
	eppsp	sp|stack_frame.prev_sp,*
	tra	0,0		and return to caller
"
"	this entry is here just so entry_pt field in stack
"	frame can point to an ALM entry.  it must be retained.
"
	entry	error_in_math_routine_
error_in_math_routine_:
	end
