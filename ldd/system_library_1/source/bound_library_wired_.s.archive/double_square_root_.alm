" ******************************************
" *                                        *
" * Copyright, (C) Honeywell Limited, 1985 *
" *                                        *
" ******************************************
	name	double_square_root_
" Modification history:
"	Written by H. Hoover, M. Mabey, and B. Wong, April 1985,
"	based on GCOS routine '7nau'.
"
" Function:  Approximate to double precision the square root of a number.
"
" Entry:	through the appropriately named entry point with:
" 	EAQ = the number whose square root is desired.
"	PR2 = the address of an 8 word, even-word aligned scratch area.
"	PR3 = the return address.
"
" Exit:	EAQ = the desired square root.
"
" Uses:	X0, X1
"	X0 = temporary storage for exponent of input argument
"	     and saves a return address from call_math_error_
"	X1 = index to scale table

	equ	root_m,0
	equ	x,2
	equ	m,4
	equ	e,6

	bool	P4.0H,002200	" yields HFP +4.0 under 'du' modification

	segdef	double_square_root_,hfp_double_square_root_


hfp_double_square_root_:
	fad	=0.0,du		" normalize input arg
	tze	pr3|0		" if x = 0 return (0)
	tpl	hfp_calc_square_root " if x < 0:
	  fneg	0		"   x = -x
	  dfst	pr2|x
	  ldq	22,dl
	  tsx0	<call_math_error_>|[call_math_error_]
	  dfld	pr2|x

hfp_calc_square_root:
	dfst	pr2|x		" store EAQ := input arg
	ldx0	pr2|x		" X0 := addr (x) -> expon
				" m = x
	lde	=0b25,du		" addr (m) -> expon = 0
	eax1	0		" scale = 0.5
	dfcmp	one_quarter
	tpl	3,ic		" if m >= .25:  scale = 0.5
	  eax1	2		"  else:         scale = 0.25
	  fmp	P4.0H,du		"                EAQ := m = 4*m

	canx0	=1b25,du		" calculate mod (e, 2)
	tze	2,ic		" if mod (e, 2) = 1:
	  adx1	=1,du		"   scale = 0.25*scale

	dfst	pr2|m		" store EAQ := m
	ldq	pr2|x		" Q := 8/expon,28/garbage
	qrs	28		" Q := 28/0,8/expon
	adq	=1,dl		" calculate e+1
	qrs	1		" calculate divide (e+1, 2, 7)
	qls	28		" position result in exponent field
	stq	pr2|e		" store Q := e = divide (e+1, 2, 7)
	dfld	pr2|m
	fmp	hfp_p2		" calculate root_m_top = p(m)
	fad	hfp_p1
	fmp	pr2|m
	fad	hfp_p0

	fst	pr2|root_m
	fdi	pr2|m		" calculate root_m = .5 * (root_m_top + m_top/root_m_top)
	fad	pr2|root_m
	fmp	=0.5,du

	dfrd	0
	dfst	pr2|root_m
	dfdi	pr2|m		" calculate root_m = .5 * (root_m + m/root_m)
	dfad	pr2|root_m
	fmp	=0.5,du

	dfrd	0
	dfst	pr2|root_m	" calculate root_m + m/root_m
	dfdi	pr2|m
	dfad	pr2|root_m
	fmp	scale,x1		" root_m = scale * (root_m + float (m, 63)/root_m)
				" root_x = root_m
	ade	pr2|e		" calculate addr (root_x) -> expon =
				"    addr (root_x) -> expon + divide (e+1, 2, 7)
	dfrd	0
	tra	pr3|0		" return (root_x)


double_square_root_:
	fad	=0.0,du		" normalize input arg
	tze	pr3|0		" if x = 0 return (0)
	tpl	calc_square_root	" if x < 0:
	  fneg	0		"   x = -x
	  dfst	pr2|x
	  ldq	22,dl
	  tsx0	<call_math_error_>|[call_math_error_]
	  dfld	pr2|x

calc_square_root:
	dfst	pr2|x		" store EAQ := input arg
	ldx0	pr2|x		" X0 := addr (x) -> expon
				" m = x
	lde	=0b25,du		" addr (m) -> expon = 0

	canx0	=1b25,du		" calculate mod (e, 2)
	tze	2,ic		" if mod (e, 2) = 1:
	  lde	=-1b25,du		"   EAQ := m = .5*m

	dfst	pr2|m		" store EAQ := m
	ldq	pr2|x		" Q := 8/expon,28/garbage
	qrs	28		" Q := 28/0,8/expon
	adq	=1,dl		" calculate e+1
	qrs	1		" calculate divide (e+1, 2, 7)
	qls	28		" position result in exponent field
	stq	pr2|e		" store Q := e = divide (e+1, 2, 7)
	dfld	pr2|m
	fmp	p2		" calculate root_m_top = p(m)
	fad	p1
	fmp	pr2|m
	fad	p0

	fst	pr2|root_m
	fdi	pr2|m		" calculate root_m = .5 * (root_m_top + m_top/root_m_top)
	fad	pr2|root_m
	fmp	=0.5,du

	dfrd	0
	dfst	pr2|root_m
	dfdi	pr2|m		" calculate root_m = .5 * (root_m + m/root_m)
	dfad	pr2|root_m
	fmp	=0.5,du

	dfrd	0
	dfst	pr2|root_m	" calculate root_m + m/root_m
	dfdi	pr2|m
	dfad	pr2|root_m
	ade	=-1b25,du		" root_m = .5 * (root_m + float (m, 63)/root_m)
				" root_x = root_m
	ade	pr2|e		" calculate addr (root_x) -> expon =
				"    addr (root_x) -> expon + divide (e+1, 2, 7)
	dfrd	0
	tra	pr3|0		" return (root_x)

	even
one_quarter:
	oct	000200000000,000000000000	" 0.25
p0:	dec	2.5927688d-1
hfp_p0:	oct	000204577702,000000000000
p1:	dec	1.0521212d0
hfp_p1:	oct	002041525750,000000000000
p2:	dec	-3.1632214d-1
hfp_p2:	oct	001536026031,000000000000
scale:	oct	000400000000	" 0.5
	oct	000100000000	" 0.25*0.5 = 0.125
	oct	000200000000	" 0.25
	oct	000040000000	" 0.25*0.25 = 0.0625

	end
