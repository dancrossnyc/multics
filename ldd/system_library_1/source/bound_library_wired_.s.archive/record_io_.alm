" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"	Operator to interface with record I/O programs. Entered with job in register a.
"	Bulk of code is to handle quick record i/o.
	name 	record_io_
	include	stack_frame
	include	iocbx
	include	plio2_psr
	include	plio2_fsb
	equ	io_arg_list,52	all equ's in this program come from pl1_operators_
	equ	tbp,38		loc of ptr to base of text
	equ	ps_ptr,42		loc of ptr to PS
	equ	t6,44
	equ	t7,45
	equ	double_temp,46
	equ	t3,51
"
"	The following declarations may be removed when a
"	fsbr include file is generated.
"
	equ	fsbr.recio,fsb.lsep	these overlay same word
	bool	fsbr.rec_valid,200000
"
	segdef	record_io
"
"	Program to filter "quick" record I/O operations from "slow" ones.
"	Calling sequence:
"		lda	job_bits
"		tsx0	ap|record_io_op
"
record_io:
	eppap	sp|ps_ptr,*
	spribp	ap|psr.ab_return
	sprisp	ap|psr.ab_return+2
	sta	ap|psr.job		save the job bits
	cana	psr.version_mask_inplace,dl	check version
	tze	slow		we only handle version>0
	ana	=v18/-1-psr.explicit_file-psr.varying_string,18/-1-psr.key-psr.keyto-psr.keyfrom-psr.version_mask_inplace
	cmpa	=v18/psr.read,18/psr.into
	tnz	3,ic
	eax1	0		= read stmnt
	tra	quick
	cmpa	=v18/psr.write,18/psr.from
	tnz	3,ic
	eax1	1		= write stmnt
	tra	quick
	cmpa	=v18/psr.rewrite,18/psr.from
	tnz	3,ic
	eax1	2		= rewrite stmnt
	tra	quick
	cmpa	psr.delete,dl
	tnz	slow
	eax1	3		= delete stmnt
"
quick:	epp4	ap|psr.source_p,*	now to get fsb bits
	epp4	pr4|2,*		fsb ptr is 2 wds up
	spri4	ap|psr.fsbp
	lda	pr4|fsb.switch
	ana	=v18/-1-fsb.zot1-fsb.zot2-fsb.not_used_1,18/-1-fsb.detach-fsb.iox_close
	ldq	ap|psr.job		we need unclobbered job bits
	canq	psr.key+psr.keyto+psr.keyfrom,dl
	tnz	keyed_job
"
good_key:
	eax6	0		x6=1 if stringvalue
	canq	psr.varying_string,du
	tze	not_var
	cana	fsb.stringvalue,du
	tze	slow
	eax6	1		stringvalue
"
not_var:	ana	=v18/-1-fsb.version_2-fsb.stringvalue,18/-1-fsb.implementation-fsb.internal-fsb.threaded
	cmpa	fsb_masks,1
	tze	action,1
	cmpx1	2,du		still could be read/update or write/update
	tpl	slow
	cmpa	fsb_masks+2	is it read or write update?
	tze	action,1
	tra	slow
"
fsb_masks:
	zero	fsb.open+fsb.input+fsb.notkeyed+fsb.record+fsb.sequential,fsb.emptyline
	zero	fsb.open+fsb.output+fsb.notkeyed+fsb.record+fsb.sequential,fsb.emptyline
	zero	fsb.open+fsb.update+fsb.notkeyed+fsb.record+fsb.sequential,fsb.emptyline
	oct	042700000020	open/update/threaded/emptyline	(NU)
"
action:	tra	quick_read
	tra	quick_write
	tra	quick_write
"
quick_delete:
	fld	2048*2,dl
	staq	sp|io_arg_list
	epp3	sp|t3
	tra	dl_too
"
quick_write:
	fld	2*1024*4,dl
	staq	sp|io_arg_list
	cmpx6	0,du		stringvalue?
	tze	simple_length
	epp3	ap|psr.variable_p,*		
	ldq	pr3|-1		length field
	tra	make_call
"
quick_read:
	fld	2*1024*5,dl	arg_list header = 2*number of args
	staq	sp|io_arg_list
	epp3	sp|t7		t7 = status code of read stmnt
	spri3	sp|io_arg_list+10
"
simple_length:
	ldq	ap|psr.variable_bitlen		
	div	9,dl		byte_length
"
make_call:
	stq	sp|t6		t6 = length (output to iox_)
	epp3	sp|t3		t3 = length(read stmnt),status(other)
	spri3	sp|io_arg_list+8
	epp3	sp|t6
	spri3	sp|io_arg_list+6
	epp3	ap|psr.variable_p		
"
dl_too:	spri3	sp|io_arg_list+4
	lprp5	pr4|fsb.iocb_p	p4->fsb, offset iocb_p (packed ptr)
	spri5	sp|double_temp	packed ptr must become unpacked
	epp3	sp|double_temp
	spri3	sp|io_arg_list+2
	eaa	0,1
	als	2		to multiply x1*4(4 words per entry var)
	eppbp	pr5|iocb.read_record,au*	bp -> the correct entry var. in iocb
	sreg	sp|8
	eppap	sp|io_arg_list
	stcd	sp|stack_frame.return_ptr
	callsp	bp|0
	lreg	sp|8
	cmpx1	0,du		read?
	tze	read_rtn
	lda	sp|t3		check status code(not read stmnt)
	tze	ret_to_caller
	epp3	sp|t3		get ptr to status for error call
"
error_call:
	spri3	sp|io_arg_list+4	2nd arg is status code
	sreg	sp|8		be prepared for a return from error
	fld	2*1024*2,dl
	staq	sp|io_arg_list
	eppbp	sp|ps_ptr		1st arg is ptr to ps
	spribp	sp|io_arg_list+2
	eppap	sp|io_arg_list
	tsx1	<pl1_operators_>|[get_our_lp]
	stcd	sp|stack_frame.return_ptr
	callsp	<plio2_recio_>|[error]
	lreg	sp|8
	tra	ret_to_caller
"
read_rtn:	
	lda	sp|t7
	tnz	read_error	if status^=0 its an error
	epp4	sp|ps_ptr,*	ap has been clobbered & we must get ps
	epp4	pr4|psr.fsbp,*
	lda	fsbr.rec_valid,du		since it was a successful read, set flag
	orsa	pr4|fsbr.recio
	lda	sp|t3		get returned length
	cmpx6	1,du		stringvalue?
	tnz	check_len
	epp3	sp|io_arg_list+4,*	get ptr to target variable
	epp3	pr3|0,*
	sta	pr3|-1		put returned length in length field of target var
"
ret_to_caller:
	eppap	sp|tbp,*0
	spriap	sp|stack_frame.return_ptr
	eppap	<pl1_operators_>|[operator_table]
	tra	sp|tbp,*0
"
check_len:
	cmpa	sp|t6		targ.len.=returned length?
	tze	ret_to_caller	if they're equal we're through
"
read_error:
	epp3	sp|t7		get ptr to status for error call
	tra	error_call
"
slow:	eax6	7
	tra	<pl1_operators_>|[plio4]
"
keyed_job:
	ana	=o077625573567	zero zots,v2,seq,dir,buf'd,str_val,env,threaded,detach,iox_closeHELP!!!
	canq	psr.keyto,dl
	tze	seek_key_call	cant be a read keyto
	eax1	4		table lookup for a read_keyto job string
	eax6	5		will be a call to read_key
	ldq	=v18/-1-psr.keyto_keyset,18/-1	turn keyset flag OFF
	ansq	ap|psr.pl1_ops_flags	keyset is zero till keytemp is filled
	tra	seek_key_call+1
"
seek_key_call:
	eax6	4		will be a call to seek_key
	cmpa	fsb_key_masks,1
	tze	key_call
	cmpx1	2,du		could be read/key or write/keyfrom on update file
	tmi	3,ic		
	cmpx1	4,du		could be read/keyto on update file
	tnz	slow
	cmpa	fsb_key_masks+2
	tze	key_call
	tra 	slow		give up
"
fsb_key_masks:
	zero	fsb.open+fsb.input+fsb.record+fsb.keyed,fsb.emptyline	READ KEY
	zero	fsb.open+fsb.output+fsb.record+fsb.keyed,fsb.emptyline	WRITE KEY
	zero	fsb.open+fsb.update+fsb.record+fsb.keyed,fsb.emptyline	REWRITE KEY
	zero	fsb.open+fsb.update+fsb.record+fsb.keyed,fsb.emptyline	DELETE KEY
	zero	fsb.open+fsb.input+fsb.record+fsb.keyed,fsb.emptyline	READ KEYTO
"
key_call:
	fld	2*1024*4,dl	4 arguments for seek_ or read_key
	staq	sp|io_arg_list
	epp3	ap|psr.keytemp+1	the addr of a var str is not its start
	spri3	sp|io_arg_list+4	arg2 is the key
	epp3	sp|t6
	spri3	sp|io_arg_list+6	arg3 is rtned length,we ignore
	lprp5	pr4|fsb.iocb_p	p4->fsb, offset iocb_p (packed ptr)
	spri5	sp|double_temp	packed ptr must become unpacked
	epp3	sp|double_temp
	spri3	sp|io_arg_list+2	arg1 \is iocb_ptr
	eaa	0,6		use x6 to get right entry var.
	als	2		to multiply x6*4(4 words per entry var)
	eppbp	pr5|iocb.read_record,au*	bp -> the correct entry var. in iocb
	epp3	sp|t3		status code
	spri3	sp|io_arg_list+8	arg4is of course status code
	sreg	sp|8
	eppap	sp|io_arg_list
	stcd	sp|stack_frame.return_ptr
	callsp	bp|0
	lreg	sp|8
	cmpx1	1,du		fancy  stuff only if a write
	tnz	not_key_write	handle non-writes differently
	tsx1	<pl1_operators_>|[get_our_lp]
	ldq	<error_table_>|[no_record]
	cmpq	sp|t3		must be new key to be right
	tnz	key_error		if key was there its an error
	eax1	1		restore x1 to 1 for write
	tra	key_ok
"
not_key_write:
	ldq	sp|t3		returned status code
	tnz	key_error		if not zero its an error
	cmpx1	4,du		read keyto?
	tze	keyto_done
"
key_ok:	eppap	sp|ps_ptr,*	restore the stuff we clobbered
	ldq	ap|psr.job
	epp4	ap|psr.fsbp,*	get fsbp again
	lda	pr4|fsb.switch
	ana	=o177726773767	zero zots,n_used1,dir,key,detach,iox_close	HELP!!!
	ora	fsb.notkeyed+fsb.sequential,du
	tra	good_key		now its looks like a unkeyed io op
"
keyto_done:
	eax1	0		if read-keyto restore x1 to 0 for read
	lda	psr.keyto_keyset,du
	eppap	sp|ps_ptr,*	ap has been clobbered,need to get at ps
	orsa	ap|psr.pl1_ops_flags	set keyset bit on, assgnmt has been made
	tra	key_ok+1
"
key_error:
	epp3	sp|t3		get ptr to status for error call
	tra	error_call
	end
