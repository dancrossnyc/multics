" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"	Modified 24 June 1980 by C R Davis to fix bug in which |b| < 1.0
"		causes overflow fault in power_integer_.
"	Modified 21 Dec 83 by HH to add HFP support.

"	evaluate a ** b in double precision
"	Note: the log routine uses index registers 0-4, so we must avoid using these
"
	segdef	integer_power_single_
	segdef	integer_power_double_
	segdef	single_power_single_
	segdef	single_power_double_
	segdef	double_power_single_
	segdef	double_power_double_
	segdef	hfp_integer_power_single_
	segdef	hfp_integer_power_double_
	segdef	hfp_single_power_single_
	segdef	hfp_single_power_double_
	segdef	hfp_double_power_single_
	segdef	hfp_double_power_double_
"
	equ	return,-2
	equ	work_size,2
	equ	a,0		same as in power_integer_
"
integer_power_single_:
	lda	0,dl		float a
	lde	=71b25,du
	fad	=0.0,du
"
single_power_single_:
double_power_single_:
	tsx5	common
	fmp	1|0
	fld	1|0
	fcmg	1|0
	tsp3	<double_logarithm_>|[double_log_base_e_]
	tra	<double_exponential_>|[double_exponential_]
"
integer_power_double_:
	lda	0,dl		float a
	lde	=71b25,du
	fad	=0.0,du
"
single_power_double_:
double_power_double_:
	tsx5	common
	dfmp	1|0
	dfld	1|0
	dfcmg	1|0
	tsp3	<double_logarithm_>|[double_log_base_e_]
	tra	<double_exponential_>|[double_exponential_]
"
hfp_integer_power_single_:
	lda	0,dl		float Q
	lde	=18b25,du
	fno
	fmp	=0.5,du
"
hfp_single_power_single_:
hfp_double_power_single_:
	tsx5	hfp_common
	fmp	1|0
	fld	1|0
	fcmg	1|0
	tsp3	<double_logarithm_>|[hfp_double_log_base_e_]
	tra	<double_exponential_>|[hfp_double_exponential_]
"
hfp_integer_power_double_:
	lda	0,dl		float Q
	lde	=18b25,du
	fno
	fmp	=0.5,du
"
hfp_single_power_double_:
hfp_double_power_double_:
	tsx5	hfp_common
	dfmp	1|0
	dfld	1|0
	dfcmg	1|0
	tsp3	<double_logarithm_>|[hfp_double_log_base_e_]
	tra	<double_exponential_>|[hfp_double_exponential_]
"
common:	fcmp	=0.0,du		check a
	tze	test		skip if a = 0
	dfst	2|a		save a
	xec	1,5		load b
	tze	spec		skip if b = 0
	fcmg	28*1024+256,du	is b < 2**27
	tpl	begin		no, skip
	fcmg	=1.0,du		is b > 1?
	tmi	begin		no, must use logs
	ufa	=35b25,du		get int(b) in a
	cmpq	0,dl		is it an integer
	tnz	begin		no, use logs
	cmpa	0,dl		set indicators from a
	tra	<power_integer_>|[power_integer_]
"
hfp_common:
	fcmp	=0.0,du		check a
	tze	test		skip if a = 0
	dfst	2|a		save a
	xec	1,5		load b
	tze	spec		skip if b = 0
	fcmg	=o016400,du	is abs(b) < 2**27?
	tpl	begin		no, skip
	fcmg	=-1.0,du		is abs(b) >= 1?
	tmi	begin		no, must use logs
	ufa	=9b25,du		get int(b) in A
	lls	1
	cmpq	0,dl		is it an integer?
	tnz	begin		no, use logs
	cmpa	0,dl		set indicators from A
	tra	<power_integer_>|[hfp_power_integer_]
"
begin:	dfld	2|a		not integer, restore a
	tmi	err1
	epp2	2|work_size	reserve work space for ourselves
	spri3	2|return		save our return
	xec	3,5		log(a)
	xec	0,5		b * log(a)
	epp3	2|return,*	restore return pt
	xec	4,5		exp(b*log(a))  (exit through exp)
"
spec:	fld	=0.5,du
	fad	=0.5,du
	tra	3|0
"
test:	fszn	1|0		special case when a = 0
	tze	err2		error if a = 0 & b = 0
	tpl	3|0		0 ** positive is 0
	ldq	18,dl
err:	tsx0	<call_math_error_>|[call_math_error_]
	fld	=0.0,du
	tra	3|0
"
err1:	ldq	16,dl
	tsx0	<call_math_error_>|[call_math_error_]
	dfld	2|a		evaluate for abs(a)
	fneg	0
	tra	begin+2
"
err2:	ldq	17,dl		0 ** 0
	tra	err
	end
