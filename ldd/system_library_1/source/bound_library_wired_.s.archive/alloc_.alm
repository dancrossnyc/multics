" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"
"	alloc_, freen_, area_
"
"	This module implements the Multics standard area programs.
"
"	Initial coding October 1975 by S Webber.
"	Modified 3 June 1976 by R Barnes for use with pl1_operators_
"		and to properly handle area condition.
"	Modified 16 August 1976 by R Barnes to fix more bugs and
"		implement extendable no_free areas
"	Modified September 1976 by M. Weaver to fix redef entrypoint
"	Modified 2 November 1976 by M. Weaver to fix zero_on_free bug
"	Modified 16 November 1976 by R. Barnes to fix bug in extensible areas
"	Modified 30 November 1976 by M. Asherman to fix bug causing excessive zeroing
"		on free, which may cause lockup fault
"	Modified 6 January 1977 to fix area retry for subr call
"	Modified 3/14/77 (Asherman) to prevent loop creating temp segs on large allocations
"	Modified 31 May 1977 by RAB to fix 1628
"	Modified 12 July 1977 by RAB to fix a bug in which "lcx3 bp|area.next_virgin"
"		got fixedoverflow
"	Modified 26 July 1977 by RAB to have alloc_ subr entry init sp|tbp
"	Modified 9 August 1977 by RAB to not allow allocations of greater than 2**18 words
"	Modified 10 August 1977 by RAB to change size of largest allocation by 2 words
"	Modified 13 September 1977 by RAB to fix bug in 9 Aug 1977 change which erroneously
"		limited allocations to 2**17 words
"	Modified 14 September 1977 by RAB to fix another fixedoverflow bug in freen_1
"	Modified 771018 by PG to add optimization to area_assign_ and fix bugs in it.
"	Modified 6 September 1978 by RAB to have no_free_alloc do a push if entered by
"		external call.  This is necessary so that area can be properly
"		signalled and get_next_area_ptr_ can be properly called.
"	Modified 800109 by PG to run MLR's in area_assign_ uninhibited (MCR 4292).
"	Modified September 1981 by J. Bongiovanni for IPS protection
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"	The following entries are included:
"
"	p = alloc_ (size, areap);
"	p = alloc_$storage_ (size, areap);
"	call freen_ (p);
"	call area_ (size, areap);
"	call area_$no_freeing (size, areap, extend);
"	call area_$redef (size, areap);
"	call area_assign_ (new_areap, old_areap);
"	call area_$extend (areap, flags);
"
"	The following segdef's are included for the use of
"	pl1_operators_:
"
"	op_alloc_
"	op_storage_
"	op_freen_
"	op_empty_
"
" " "  " " " " " " " " " " " " " " " " " " " " " "
"
"	NOTE	NOTE	NOTE	NOTE	NOTE
"
"
"	This routine is used by pl1_operators_ and MUST be bound in with
"	pl1_operators_. It makes references to code in pl1_operators_
"	without establishing its linkage pointer and vice versa.
"
"	NOTE	NOTE	NOTE	NOTE	NOTE
"
"	This routine assumes index register 6 (x6) is not changed by the
"	standard "push" operator. This is because we must remember a
"	value set before the push and used after the push and there
"	is no convenient place to save it.
"
"	NOTE	NOTE	NOTE	NOTE	NOTE
"
"	This routine protects itself from asynchronous reinvocations within
"	the same process (IPS signals which interrupt it, and which call
"	routines while allocate to the area in allocation at the
"	interruption).  It does this by maintaining a counter
"	(area.allocation_p_clock), which is incremented by 1 in routines
"	which could conflict with allocation if called asynchronously (other
"	allocations and frees).  After finding a suitable free block, the
"	saved value is checked in inhibited code against the current value in
"	the area header.  If different, allocation is retried.  If the same,
"	the free block is allocated, unthreaded, etc.  in inhibited code.
"
"	This routine is NOT protected against multiple invocations
"	on different CPUs against the same area. If this is possible
"	for a given area, it is the responsibility of the caller
"	to make allocation a critical section.
"
"
"	Strategy and conventions.
"
"	The following register assignments are used within this module:
"
"	x0	used to indicate whether or not called as an
"		operator from a PL/I program. If x0 = 0 then it was called
"		explicitly as an external entry. If x0 is nonzero, it is
"		the operator return offset used by standard pl1_operators_.
"	x1	used as a temporary at various times.
"	x2	always points to the block being allocated or freed.
"	x3	points to the block after the one pointed to by x2. Also used
"		as temporary in certain places.
"	x4	Used as a pointer to the block to be unthreaded by the
"		unthread subroutine. Also used as a temporary.
"	x5	Used to point to the second block after the one pointed to by x2.
"		Also used as a temporary.
"	x6	Used to indicate whether "area" or "storage" should be signalled.
"	x7	Used as temporary.
"
"	ap	points to argument list. Not changed.
"	ab	used to hold the return location for the freen_1 subroutine.
"	bp	points at base of area header during execution. At the interface
"		level, bp points to the block being freed and is returned as
"		a pointer to the allocated block (operators interface only).
"	bb	used to hold the return location for the unthread
"		subroutine.
"	lb	points at words containing ptr to block being freed
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"
"	Format of a block header:
"
"
"	|				|
"	|				|
"	_|________________________________________|  /_______  pointed to by x2
"	|		|		|  \
"	|  PREV SIZE	|  CURRENT SIZE	|
"	_|____________________|____________________|
"	|	| |	|		|
"	|   MBZ	|B| Q_NO	|   HEADER PTR	|
"	_|__________|__|________|____________________|  /_______  allocated storage starts here
"	|		|		|  \
"	|  FORWARD POINTER	| BACKWARD POINTER	|
"	_|____________________|____________________|
"	|				|
"	|				|
"
"
"	The FORWARD and BACKWARD pointers are only filled in and meaningful
"	if the block is free. If the block is not free, the storage for these
"	pointers is the first word available for use by the caller.
"	The flag "B" is the busy bit for the _p_r_e_v_i_o_u_s block.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	The following template is used to define area offsets as well as for intialization of a new area.

	include	area_structures
	include	stack_frame
	include	stack_header

"
"	The following must be the same as used by pl1_operators_.
"
	equ	tbp,38
	equ	buddy_area.size,2
	equ	buddy_area.inited,3

	entry	alloc_,storage_,freen_,area_,area_assign_,no_freeing,extend,redef
	entry	old_alloc_,old_freen_,old_area_
	segdef	op_alloc_,op_storage_,op_freen_,op_empty_

"
"	The following EQU's define stack variables used by this program. Since
"	the program is called as an operator as well as externally,
"	stack variables not used by pl1_operators_ at the time of the
"	invocation must be used. The regions chosen are the words from 8 to 15,
"	and 56 to 63.
"
"
	equ	lsize,8
	equ	rsize,9
	equ	blocksize,10
	equ	temp,11
	equ	save_x2,12	UPPER
	equ	save_x6,12	LOWER
	equ	save_x0,12	LOWER
	equ	max_size,13
	equ	save_bp,14
	equ	free_count,15
	equ	dtemp1,44		used only for buddy_alloc_op
	equ	dtemp2,46		..
	equ	arglist,56
	equ	saved_p_clock,56	shared with arglist
	equ	ret_bp,62
	equ	min_block_size,8	NOTE. this must be at least 8 because
				"area.freep has lbound of 4.
	equ	max_version,1	maximum expected version number
	equ	max_method,1	maximum expected allocation method


"
"
"	alloc_
"	storage_
"	op_alloc_
"	op_storage_
"
"	These entries allocate a block of the specified size in the specified
"	area. If there is not enough room in the area "area" is signalled
"	unless the area is extensible in which case a new component is found
"	and the block allocated therein.
"
"	The storage_ entries signal "storage" instead of "area" but are
"	otherwise identical.
"
"	The alloc_ (and storage_) entry is called as follows:
"
"	blockp = alloc_ (size, areap)
"
"	The operator op_alloc_ (and op_storage_) is called as follows:
"
"	retry:
"		ldq	size
"		eppbp	area_header
"		tsx0	pr0|allocate_op
"		tra	retry
"
"	a pointer to the allocated block is returned in pr2.
"
"          ________________________________________________
"
"	The size of the block allocated is increased by 2 to account
"	for the block header. A fill word may also be allocated in order
"	to insure that all blocks begin on even word boundaries.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+>
op_storage_:
	eax6	1		indicates we signal "storage" if need arises
	tra	*+2
op_alloc_:
	eax6	0		indicates we signal "area" if need arises
	eax0	1,0		we want to return one word later
	lda	bp|area.version	check for buddy system areas
	tze	buddy_alloc_op	it is buddy system, perform external call
	tmi	signal_area_3	"bad_area_format"
	cmpa	max_version,dl	check for expected version
	tpnz	signal_area_3	"bad_area_format"
	lda	bp|area.allocation_method
	tmi	signal_area_3	"bad_area_format"
	tze	standard_alloc_op	standard allocation method wanted
	cmpa	max_method,dl	check for expected allocation method
	tpnz	signal_area_3	"bad_area_format"
	tra	no_free_alloc_op

storage_:	eax6	1		indicates we signal "storage" if need arises
	tra	*+2
old_alloc_:
alloc_:	eax6	0		indicates we signal "area" if need arises
	eppbp	ap|4,*		get pointer to area header
	eppbp	bp|0,*		..
	lda	bp|area.version	check for old version
	tze	buddy_alloc	old version, transfer directly
	tmi	signal_area_p3	bad area format, signal "bad_area_format"
	cmpa	max_version,dl	see if expected version number
	tpnz	signal_area_p3	not expected, signal "bad_area_format"
	lda	bp|area.allocation_method dispatch on allocation method
	tmi	signal_area_p3	"bad_area_format"
	tze	standard_alloc	standard allocation method needed
	cmpa	max_method,dl	check for expected allocation method
	tpnz	signal_area_p3	"bad_area_format"

no_free_alloc:
	push	80		get stack frame
	lda	stack_frame.support_bit,dl
	orsa	sp|stack_frame.flag_word
	epbpbp	*		give sp|tbp a non-faulting value
	spribp	sp|tbp		..
	eppbp	ap|4,*		get area header pointer
	eppbp	bp|0,*		..
retry_no_free_alloc_after_area:
	eax0	0		indicates we are not an operator ref
	ldq	ap|2,*		fetch size of block to allocate

no_free_alloc_op:
	eax1	1,ql		force even word alignment
	anx1	-2,du		..
	lda	bp|area.next_virgin	get pointer to new block
	adlx1	bp|area.next_virgin	calculate what will be next next_virgin
	trc	no_room_no_free
	cmpx1	bp|area.last_usable	see if overflows
	trc	no_room_no_free	yes, overflows. Go handle it.
	stx1	bp|area.next_virgin update next_virgin pointer
	eppbp	bp|no_free_area.current_component,*au	generate return pointer
	cmpx0	0,du		see whether called as operator
	tnz	sp|tbp,*0		was operator, just return
	spribp	ap|6,*		external call. return blockp
	return

buddy_alloc:
	xec	get_ptr,6		get pointer to entry to forward call to
	callsp	bp|0		transfer forward...

get_ptr:	eppbp	<buddy_alloc_>|[buddy_alloc_]
	eppbp	<buddy_alloc_>|[buddy_storage_]

buddy_alloc_op:
"
"	We must make an external call to buddy_alloc_$whatever.
"
	spribp	sp|dtemp1		save pointer to area
	sreg	sp|8		save registers
	epbpsb	sp|0		get pointer to stack base so we can get lp
	epaq	*		get segno of this program
	lprplp	sb|stack_header.lot_ptr,*au get lp
	eppbp	sp|13		get pointer to block size (saved in q with regs)
	spribp	sp|arglist+2	save in argument list
	eppbp	sp|dtemp1		get pointer to area pointer
	spribp	sp|arglist+4	save in argument list
	eppbp	sp|dtemp2		we want  buddy_alloc_ to store blockp here
	spribp	sp|arglist+6
	fld	3*2048,dl		generate arg list header
	staq	sp|arglist	..
	xec	get_ptr,6		get pointer to routine to call
	eppap	sp|arglist	get pointer to argument list
	stcd	sp|stack_frame.return_ptr	standard call...
	callsp	bp|0		..
	lreg	sp|8		restore registers
	eppbp	sp|tbp,*		must restore return pointer for pl1 frame
	spribp	sp|stack_frame.return_ptr	..
	eppbp	sp|dtemp2,*	get blockp
	tra	sp|tbp,*0		return to object program
" 
standard_alloc:
	push	80		get stack frame large enough
	lda	stack_frame.support_bit,dl
	orsa	sp|stack_frame.flag_word
	epbpbp	*		give sp|tbp a non-faulting value
	spribp	sp|tbp		..
	eppbp	ap|4,*		get area header pointer
	eppbp	bp|0,*		..
retry_alloc_after_area:
	ldq	ap|2,*		get size of block to allocate
	tpnz	*+2		positive and nonzero is OK
	ldq	min_block_size,dl	if negative or zero use min size
	eax0	0		indicates not operator ref
standard_alloc_op:
	adlq	alloc_blkhdrsz+1,dl		1 for rounding
	canq	=o777777,du	is the requested block too large to be ever allocated?
	tnz	signal_area	yes, then give up.
	anq	-2,dl		complete the rounding function
	qls	18		left justify for compares
	cmpq	min_block_size,du	see if requested block is too small
	trc	*+2		large enough, use input value
	ldq	min_block_size,du	too small, use minimum value from header
	stq	sp|lsize		save in left justified form
	qrl	18		now right justify
	stq	sp|rsize		and save in right justified form

"	Increment and save a counter identifying this allocation
"	instance (uniquely over small intervals of time)

retry_alloc:
	lda	bp|area.allocation_p_clock	allocation instance
	adla	1,dl		this instance (overflows to 0)
	sta	bp|area.allocation_p_clock
	sta	sp|saved_p_clock

"
"	Now search for a large enough block on the free list.
"	First find the appropriate stratum number and save it.
"
	inhibit	off		<-><-><-><-><-><-><-><-><-><-><->

	fld	sp|rsize		get desired size
	lde	=26b25,du		convert to correct floating pt. value
	fad	=0.0e0,du		normalize to get correct exponent
	ste	sp|temp		get log2 (size)
	ldq	sp|temp		..
	qrl	28-18		leave in q-upper
	cmpq	16,du		clip value
	tmoz	stratum_loop	if too high
	ldq	16,du
stratum_loop:
	ldx2	bp|area.freep-3,qu	see if anything in free list
	tze	next_stratum	nothing on this free list, try next
	lxl3	bp|area.freep-3,qu	get max size for this stratum
	tze	try		if the field is zero, we don't know max
	cmpx3	sp|lsize		compare against size we want
	tnc	next_stratum	not a large enough block, goto next stratum
try:	stx2	sp|temp		save pointer to head of free list
	ldx1	40000,du		loop check...only allow 40000 steps
	stz	sp|max_size	initialize cell used in calculating max size
"
"	Before using the fields in any block, we will check for an IPS
"	race (asynchronous invocation).  The reason for this is that
"	an asynchronous invocation could have invalidated the block
"	we are about to examine.  If this happen, we will retry from
"	the beginning.

	lda	sp|saved_p_clock	to check for IPS race
test_size:
	cmpa	bp|area.allocation_p_clock	check for IPS race
	tnz	retry_alloc	one has occurred--retry
	lxl3	bp|block.cur_size,2	get size of this free block from header
	cmpx3	sp|lsize		see if large enough
	trc	large_enough	yes...
	cmpx3	sp|max_size	update max size value
	tnc	*+2		..
	stx3	sp|max_size	..
	ldx2	bp|block.fp,2	chain to next free block
	cmpx2	sp|temp		see if we're back to the beginning
	tze	next_stratum_1	yes, try the next stratum
	eax1	-1,1		count steps
	tpl	test_size		loop back if not too many steps
	tra	signal_area_3	signal "bad_area_format"

next_stratum_1:
	ldx1	sp|max_size	reset max size for this stratum list
	sxl1	bp|area.freep-3,qu	..
next_stratum:
	eaq	1,qu		skip to next stratum
	cmpq	17,du		see if we've done them all
	tnc	stratum_loop	no, keep searching
	tra	use_virgin	all used up, take from virgin territory

	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+>
large_enough:

"	Check for race with asynchronous invocation (IPS signal)
"	Race exists if saved allocation instance doesn't match
"	the one in the header.

	lda	sp|saved_p_clock	saved allocation instance
	cmpa	bp|area.allocation_p_clock	lose race?
	tnz	retry_alloc		yes--retry allocation

	lca	1,dl		update free count in header
	asa	bp|area.n_free	..
	eax4	0,2		needed by unthread routine
	tspbb	unthread		remove block from free list
	tra	*+2		don't save free pointer if nothing in list
	stx7	bp|area.freep-3,qu	implement roving pointer
free_merge:
	stz	sp|temp		save size of the block
	stx3	sp|temp		..
	eax4	sp|temp,*2	x4 -> next block after free block
	sblx3	sp|lsize		get left over size
	cmpx3	min_block_size,du	see if left over will be too small
	tmoz	correct_size	the block is the right size, take it
	stx3	bp|block.prev_size,4 save size of left over free block
"
"	Make a header for the left over block. Also update current header.
"
	ldx5	sp|lsize		get size of current block
	sxl5	bp|block.cur_size,2	save in current header
	eax5	sp|lsize,*2	get pointer to left over region
	lda	bp|block.header,2	calculate header ptr for new block
	ana	-1,dl		..
	sbla	sp|rsize		leaves size of left over region
	ora	block.prev_busy,du	turn on busy bit for preceding block
	sta	bp|block.header,5	assumes busy bit in same word with header ptr
	sxl3	bp|block.cur_size,5	save size of left over block
	ldx3	sp|lsize		get size of newly allocated block
	stx3	bp|block.prev_size,5 save in new header
"
"	Now make a call to the freen_1 subroutine to free up the left over
"	block. We must save bp and x2 which are used by that routine.
"
	sprpbp	sp|save_bp	save what gets wiped by freen_1
	stx2	sp|save_x2
	eax2	0,5		make x2 -> block to be freed
	tspab	freen_1		free it up
	lprpbp	sp|save_bp
	ldx2	sp|save_x2
	tra	return_ptr

correct_size:
	lda	block.prev_busy,du	turn on busy bit for this block
	orsa	bp|block.prev_busy_word,4	..
	tra	return_ptr

use_virgin:
	lda	bp|area.last_usable	get size of virgin storage remaining
	sbla	bp|area.next_virgin	..
	cmpa	sp|lsize		see if requested size is too large
	tnc	no_room		yes, overflow condition
	ldx2	bp|area.next_virgin	get index to last word used
	ldx3	bp|area.last_size	generate header for new block
	stx3	bp|block.prev_size,2 ..
	adlx3	bp|area.last_block	update pointer to last allocated block
	stx3	bp|area.last_block	..
	ldx3	bp|area.next_virgin	(we cannot complement 400000(8) in an xreg)
	cmpx3	=o400000,du
	tze	2,ic
	lcx3	bp|area.next_virgin	 ..
	sxl3	bp|block.header,2	 ..
	ldx3	block.prev_busy,du	turn busy bit on for previous block
	stx3	bp|block.prev_busy_word,2 ..
	lxl3	sp|rsize		now update area header
	stx3	bp|area.last_size	..
	sxl3	bp|block.cur_size,2
	adlx3	bp|area.next_virgin	update next available pointer
	stx3	bp|area.next_virgin	..

return_ptr:
	lda	1,du
	asa	bp|area.n_allocated
	stz	bp|2,2	always zero this word in case the area is being
			"zerod on free to get zero blocks
	lda	bp|area.flags	now see if we should zero the block
	cana	area.zero_on_alloc,du	..
	tze	dont_zero		no, just return pointer
	eppbb	bp|3,2		get pointer to first word to zero
	lda	sp|rsize		get number of words to clear
	sbla	3,dl		don't zero block header
	als	2		multiply by 4 for MLR

	inhibit	off		<-><-><-><-><-><-><-><-><-><-><->
	mlr	(),(pr,rl),fill(0)
	desc9a	0,0
	desc9a	bb|0,al
dont_zero:
	eppbp	bp|2,2		get actual pointer to block
	cmpx0	0,du		see if operator ref
	tnz	sp|tbp,*0	 	yes, return immediately
	spribp	ap|6,*		return it to caller
	return
"
"	Come here when there is no room in the current area component
"	for the requested allocation. Check to see if the area is
"	extensible, and, if so, call to get a pointer to the next
"	component of the area.
"
no_room:
	lda	bp|area.flags	get flags word from header
	cana	area.extend,du	see if the area is extensible
	tze	signal_area	no, we must signal "area"
	ldq	sp|rsize		see if allocation is impossibly large (rsize includes header size)
	cmpq	262144-1024-area_size-extend_block_size-alloc_blkhdrsz+1,dl  includes extend block and allocated block header overhead
	trc	signal_area	block too large even for empty area
"
"	The area is extensible. Get a pointer to the next component.
"
	sxl0	sp|save_x0
	epbpsb	sp|0		generate linkage pointer
	epaq	*		..
	lprplp	sb|stack_header.lot_ptr,*au
	spribp	sp|save_bp		prepare arglist
	lda	4,du			..
	ldq	0,du
	staq	sp|arglist
	eppbp	sp|save_bp	generate argument list
	spribp	sp|arglist+2
	eppbp	sp|ret_bp
	spribp	sp|arglist+4
	eppap	sp|arglist	..
	stcd	sp|stack_frame.return_ptr
	callsp	<get_next_area_ptr_>|[get_next_area_ptr_]

	lxl0	sp|save_x0
	eppbp	sp|tbp,*		must restore pl1 frame's return pointer
	spribp	sp|stack_frame.return_ptr
	eppbp	sp|ret_bp,*		get pointer to next component
	cmpx0	0,du		don't load ap if operator
	tnz	retry_alloc
	eppap	sp|stack_frame.arg_ptr,*	must restore argument list pointer
	tra	retry_alloc

no_room_no_free:
	lda	bp|area.flags	get flags word from header
	cana	area.extend,du	see if the area  is extendable
	tze	signal_area	no, we must signal "area"
	cmpq	262144-1024-area_size-extend_block_size+1,dl  is size too big for empty area?
	trc	signal_area	yes--abort
"
"	The no_free area area is extendable, get a pointer to the next component
"
	sreg	sp|8
	epbpsb	sp|0		generate linkage ptr
	epaq	*
	lprplp	sb|stack_header.lot_ptr,*au
	eppbp	bp|no_free_area.current_component generate arg list
	spribp	sp|arglist+2
	eppbp	sp|ret_bp
	spribp	sp|arglist+4
	fld	2*2048,dl
	staq	sp|arglist
	eppap	sp|arglist
	stcd	sp|stack_frame.return_ptr
	callsp	<get_next_area_ptr_>|[get_next_area_ptr_]

	lreg	sp|8
	eppbp	sp|tbp,*		must restore pl1 frame stuff
	spribp	sp|stack_frame.return_ptr
	cmpx0	0,du		don't load ap if operator
	tnz	2,ic
	eppap	sp|stack_frame.arg_ptr,*
"
"	Hook up new component to first component
"
	epplp	sp|ret_bp,*		get ptr to new component
	lda	lp|area.extend_info
	lprpbp	lp|extend_block.first_area,au	get ptr to first component
	sprilp	bp|no_free_area.current_component
	lda	lp|area.last_usable	refresh area info
	sta	bp|area.last_usable	..
	lda	lp|area.next_virgin	..
	sta	bp|area.next_virgin	..
	tra	no_free_alloc_op	and try again

" 
"
"	area_
"	op_empty_
"
"	These routines initialize a given area in the specified way.
"	The various calling sequences are:
"
"	call area_ (size, areap)
"	call area_$no_freeing (size, areap, extend)
"	call area_$extend (size, areap)
"	call area_$redef (size, areap);
"
"	The op_empty_ entry is called after loading the bp with a
"	pointer to the area and the q-reg with the size.
"
"		ldq	size
"		eppbp	area_header
"		tsx0	pr0|empty_operator
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+>
old_area_:
area_:	eax1	0		describes type of area being initialized
areajoin:	eax0	0		indicates not an operator call
	eppbp	ap|4,*		get a pointer to what will be the initialized header
	eppbp	bp|0,*		..
	ldq	ap|2,*		get size of the area
	tmoz	signal_area_p1	bad value
op_join:	qls	18		left justify

	eppbb	<template_area_header>|[template_area_header]
	mlr	(pr),(pr)
	desc9a	bb|0,area_size*4
	desc9a	bp|0,area_size*4

	stq	bp|area.last_usable	fill in variable items
	tra	*+1,1*		dispatch on initialization type
	arg	standard_area
	arg	no_free_area
	arg	extend_area

no_free_area:
	lda	area.dont_free,du	make sure free requests are ignored
	orsa	bp|area.flags	..
	spribp	bp|no_free_area.current_component
	aos	bp|area.allocation_method set method type to 1
	lda	ap|6,*		get extend flag
	tze	standard_area	extensible area not wanted
"
"	Now allocate a block large enough to hold the extend information.
"
extend_area:
	lda	area.extend,du	set extend flag ON in header
	orsa	bp|area.flags
	lda	extend_block_size+2,du get size for the extend block
	ldq	bp|area.next_virgin	get start of new last block
	asa	bp|area.next_virgin	update header for new block
	stq	bp|area.extend_info	..
	stq	bp|area.last_block	..
	sta	bp|area.last_size	..
	eppbb	=its(-1,1),*	initialize variables in extend block
	sprpbb	bp|extend_block.next_area,qu
	sprpbp	bp|extend_block.first_area,qu
standard_area:
	cmpx0	0,du		see if called as operator
	tnz	sp|tbp,*0		yes, return in standard way
	short_return

no_freeing:
	eax1	1		set initialization type
	tra	areajoin
extend:
	eax1	2		set initialization type
	tra	areajoin

op_empty_:
	eax1	0		set initialization type
	tra	op_join

redef:	eppbp	ap|4,*		get pointer to the area
	eppbp	bp|0,*		..
	lda	bp|area.version	check version of area
	tze	<buddy_area_>|[buddy_redef]

	lxl0	ap|2,*		get size to redefine area to have
	cmpx0	bp|area.next_virgin	see if we fit
	tnc	signal_area_p0	no, complain by signalling area
	stx0	bp|area.last_usable	reset end of area
	short_return

"
"
"	area_assign_
"
"	This entry copies one area into the storage of an already initialized other area.
"	If the receiving area is not large enough, "area" is signalled.
"
"	call is:
"
"	call area_assign_ (new_areap, old_areap)
"
"	where:
"		new_areap is the target, pointed to by bp.
"		old_areap is the source, pointed to by bb.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

area_assign_:
	eppbp	ap|2,*		get pointer to new area
	eppbp	bp|0,*		..
	eppbb	ap|4,*		get pointer to old area
	eppbb	bb|0,*		..

	lda	bp|area.version	check new for buddy or empty area
	tze	new_is_buddy_or_empty
new_is_new:
	lda	bb|area.version	check old for buddy or empty
	tze	old_is_buddy_or_empty
both_are_new:
	lda	bb|area.next_virgin	see if enough room
	cmpa	bp|area.last_usable	..
	tze	*+2		ok if equal
	trc	signal_area_p0
	ldq	bb|area.flags	check for need to zero past virgin portion
	canq	area.zero_on_free,du ..
	tnz	assign_and_fill	is zero_on_free...needs fill
	canq	area.zero_on_alloc,du check for NO_FREEING & zero_on_alloc
	tze	assign_no_fill	isn't zero_on_alloc...don't need fill
	ldq	bb|area.allocation_method
	cmpq	NO_FREEING_ALLOCATION_METHOD,dl
	tnz	assign_no_fill	isn't NO_FREEING...doesn't need fill
"				fall through...is both zero_on_alloc & NO_FREEING
"
assign_and_fill:
	ldq	bp|area.last_usable	get length of target (new)
	lrl	18-2		get char count in AL, QL
	inhibit	off		<-><-><-><-><-><-><-><-><-><-><->
	mlr	(pr,rl),(pr,rl),fill(000)
	desc9a	bb|0,al		source
	desc9a	bp|0,ql		target
	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+>
	qls	18-2		restore word count to QU
	stq	bp|area.last_usable	restore size of area
	short_return
"
assign_no_fill:
	ldq	bp|area.last_usable	hold length of target (new)
	arl	18-2		get char count in AL
	inhibit	off		<-><-><-><-><-><-><-><-><-><-><->
	mlr	(pr,rl),(pr,rl)
	desc9a	bb|0,al		source
	desc9a	bp|0,al		target
	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+>
	stq	bp|area.last_usable	restore size of area
	short_return
"
new_is_buddy_or_empty:
	lda	bp|buddy_area.inited see if empty
	tnz	new_is_buddy	not empty, is buddy
	eppab	<template_area_header>|[template_area_header]
	lda	bp|buddy_area.size
	als	18
	inhibit	off		<-><-><-><-><-><-><-><-><-><-><->
	mlr	(pr),(pr)
	desc9a	ab|0,area_size*4
	desc9a	bp|0,area_size*4
	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+>
	sta	bp|area.last_usable
	tra	new_is_new
new_is_buddy:
	lda	bb|area.version	check version of old area
	tnz	signal_area_p2	old is not buddy - error
	lda	bb|buddy_area.inited see if empty
	tnz	<buddy_area_assign_>|[buddy_area_assign_] both are buddy - ok
	tra	signal_area_p2	old is empty, new is buddy - error
old_is_buddy_or_empty:	"already know new is not buddy
	lda	bb|area.version	check if buddy or empty
	tnz	both_are_new
	lda	bb|buddy_area.inited
	tnz	signal_area_p2
	eppab	<template_area_header>|[template_area_header]
	lda	bb|buddy_area.size
	als	18
	inhibit	off		<-><-><-><-><-><-><-><-><-><-><->
	mlr	(pr),(pr)
	desc9a	ab|0,area_size*4
	desc9a	bb|0,area_size*4
	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+>
	sta	bb|area.last_usable
	tra	both_are_new

signal_area_p0:
	eax6	0		"area"
	tra	signal_area_p
signal_area_p1:
	eax6	2		"bad_area_initialization"
	tra	signal_area_p
signal_area_p2:
	eax6	3		"bad_area_assignment"
	tra	signal_area_p
signal_area_p3:
	eax6	4		"bad_area_format"
signal_area_p:
	push	80
	lda	stack_frame.support_bit,dl
	orsa	sp|stack_frame.flag_word
	eax0	0		indicates not pl1_operator_ call
	tra	signal_area

	inhibit	off		<-><-><-><-><-><-><-><-><-><-><->
" 
"
"	freen_
"	op_freen_
"
"	These entries free up the block pointed to by the input pointer.
"	The block is merged with adjacent blocks if they are free.
"
"	The call for the external entry is:
"
"	call freen_ (blockp)
"
"	The operator entry (op_freen_) is invoked as follows:
"
"		epplb	addr(pointer to block_to_free)
"		tsx0	pr0|free_op
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+>
old_freen_:
freen_:
	eppbp	ap|2,*		make a check for buddy area before doing push
	eppbp	bp|0,*		get pointer to block
	lda	bp|-1		see if buddy area
	tmi	<buddy_freen_>|[buddy_freen_] yes, forward the call
	push	80		now get a stack frame
	lda	stack_frame.support_bit,dl
	orsa	sp|stack_frame.flag_word
	epplb	ap|2,*		get pointer to block to free
	eppbp	lb|0,*		..
	eax0	0		not operator use
op_freen_join:
"
"	Get standard register values. x2 -> block, bp -> header.
"
	lxl2	bp|block.header-2	fetch header pointer from block header
	eppbp	bp|-2,2		make bp -> header
	erx2	-1,du		complement C(x2)
	adlx2	1,du		..

	lda	bp|area.flags	check if freeing is enabled
	cana	area.dont_free,du	..
	tnz	free_ret		disabled, skip freen_1 subroutine work
"
	lca	1,du		decrement used blocks
	asa	bp|area.n_allocated
	tspab	freen_1		do the work in this subroutine
free_ret:
	eppbb	=its(-1,1),*	null out return pointer
	spribb	lb|0		passed by caller
	cmpx0	0,du		perform appropriate return
	tnz	sp|tbp,*0	
	return

op_freen_:
	eppbp	lb|0,*		get pointer to block
	lda	bp|-1		check if buddy area
	tpl	op_freen_join	no, use standard code
"
"	We were called as operator to free up old style area's block.
"	We must make an external call to buddy_freen_.
"
	sprilb	sp|arglist+2	save pointer to block pointer
	sreg	sp|8		save registers
	epbpsb	sp|0		get pointer to stack base so we can get lp
	epaq	*		get segno of this program
	lprplp	sb|stack_header.lot_ptr,*au get lp
	lda	4,du		generate arg list header
	ldq	0,du		..
	staq	sp|arglist	..
	eppap	sp|arglist	get pointer to argument list
	stcd	sp|stack_frame.return_ptr	standard call...
	callsp	<buddy_freen_>|[buddy_freen_]
	lreg	sp|8		restore registers
	eppbp	sp|tbp,*		must restore return pointer for pl1 frame
	spribp	sp|stack_frame.return_ptr	..
	tra	sp|tbp,*0		return to object program

"
"
"	Subroutine to free the block pointed to by x2. The base
"	of the area is pointed to by bp.
"
freen_1:
	inhibit	off		<-><-><-><-><-><-><-><-><-><-><->

	lda	1,dl		keep track of how many blocks are freed
	sta	sp|free_count
	ldaq	bp|0,2		fetch entire header
	als	18		left justify
	sta	sp|blocksize	save for now in accumulating total
	ldx3	bp|area.flags	see if must zero block
	canx3	area.zero_on_free,du ..
	tze	not_zof		dont bother
	epplp	bp|0,2		pointer to block being freed
	eaa	-3,au		count of words to zero
	als 	2		count of bytes to zero
	mlr	(),(pr,rl)	zero block contents
	desc9a	0,0		zeroes
	desc9a	lp|3,au		bytes to be zeroed after block header
not_zof:
	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+>
	lda	bp|area.allocation_p_clock	guard against IPS race
	adla	1,dl			..
	sta	bp|area.allocation_p_clock	..
	eax3	sp|blocksize,*2	x3 -> nextblock
	canq	block.prev_busy,du	see if previous block is free
	tze	prev_free		no
	cmpx2	bp|area.last_block	see if freeing last block
	tze	free_last_block	yes, special case
	tra	check_next	no, see if next block is free
prev_free:
"
"	The previous block is free. Merge it with the current block.
"	Accumulate the size of the ultimate free block in blocksize.
"
	lca	1,dl		already free, undo previous subtraction
	asa	sp|free_count	..
	ldx4	bp|block.prev_size,2 get size of previous block
	stx4	sp|temp
	adlx4	sp|blocksize	update blocksize
	stx4	sp|blocksize	..
	stz	bp|0,2		in case of zero_on_free
	stz	bp|1,2		clear intervening header words
	stz	bp|2,2		 ..
"
"	Thread previous block out of its free list.
"
	eax4	0,2		make x4 point to previous block
	sblx4	sp|temp		..
	tspbb	unthread		thread block out of list
	nop			"ignore if just zerod list
	cmpx2	bp|area.last_block	see if we are freeing the last block
	tnz	not_last		no, proceed normally
	stx4	bp|area.last_block	yes, update header variables
	eax2	0,4		pretend we are freeing the merged block
	tra	free_last_block

not_last:	eax2	0,4		pretend we are freeing the merged block

"	See if next block is free.

check_next:
	cmpx3	bp|area.last_block	see if next block is last in area
	tze	next_busy		yes, it therefore can't be free
	ldaq	bp|0,3		get header for next block
	als	18		left justify current size
	sta	sp|temp		so we can generate a pointer to next header
	eax4	0,3		set x4 in case needed by unthread
	eax5	sp|temp,*3	get pointer to following header
	ldq	bp|block.prev_busy_word,5	check if block is free
	canq	block.prev_busy,du	..
	tnz	next_busy
"
"	Next block is free. Merge it with current block.
"
	lcq	1,dl
	asq	sp|free_count
	adla	sp|blocksize	update size of free block
	sta	sp|blocksize	..
	tspbb	unthread		thread the block out of the free list
	nop			"ignore if just zerod list
	eax3	0,5		x3 -> next block after free block
	stz	bp|0,4		in case zero_on_free
	stz	bp|1,4		clear header of unthreaded block
	stz	bp|2,4		 ..

next_busy:

	ldx1	sp|blocksize	get accumulated size of block being freed
	sxl1	bp|block.cur_size,2	update header of block being freed
	stx1	bp|block.prev_size,3	..
	lcx1	block.prev_busy+1,du	turn off busy bit
	ansx1	bp|block.prev_busy_word,3	..


"	Thread the block into free list.
"	First get stratum number for list to thread into.

	lda	sp|blocksize	get size of total block
	arl	18		convert to integer
	sta	sp|temp		save integer form
	fld	sp|temp		now perform conversion as in alloc_ entry
	lde	=26b25,du		..
	fad	=0.0e0,du		..
	ste	sp|temp		..
	ldq	sp|temp		..
	qrl	28-18		..
	cmpq	16,du		clip if too high
	tmoz	*+2
	ldq	16,du
	eppbb	bp|block.q_no_word,2 get pointer to header for storing q_no
	stcq	bb|0,10		save q_no in current header

	ldx1	bp|area.freep-3,qu	get free list pointer
	tze	empty		nothing there yet, special case
	lxl5	bp|block.bp,1
	sxl2	bp|block.bp,1
	stx1	bp|block.fp,2
	stx2	bp|block.fp,5
	sxl5	bp|block.bp,2
	stx2	bp|area.freep-3,qu	roving pointer ...
	lxl5	bp|area.freep-3,qu	update max size if needed
	tze	all_done	if zero, must recalculate next full search
	cmpx5	sp|blocksize	see if adding largest block
	trc	all_done	no, don't need to change max
	ldx5	sp|blocksize	get new max value
out:	sxl5	bp|area.freep-3,qu	update max size for this list
all_done:	ldq	sp|free_count	update count of free blocks
	asq	bp|area.n_free	..
	tra	ab|0

empty:	stx2	bp|area.freep-3,qu	set free ptr to single entry in list
	stx2	bp|block.fp,2	make entry point to itself
	sxl2	bp|block.bp,2	..
	ldx5	sp|blocksize	get set to update max free size for this list
	tra	out

"
"	The following subroutine is used to thread the block pointed to
"	by index 4 out of the free list. If this results in an empty free list,
"	the return is made to bb|0, otherwise, the return is made to
"	bb|1.
"
unthread:
	ldq	bp|block.q_no_word,4 get stratum number for this free block
	anq	block.q_no_mask,du	..
	lxl7	bp|area.freep-3,qu	get max entry in list to see if unthreading largest
	stx7	sp|temp		save for compare
	lxl7	bp|block.cur_size,4	see if unthreading largest entry
	cmpx7	sp|temp		..
	tnz	not_big		not largest, ok
	eax7	0		zero max size to indicate we don't know it
	sxl7	bp|area.freep-3,qu	..
not_big:	ldx7	bp|block.fp,4	x7 -> next link in free chain
	lxl1	bp|block.bp,4	x1 -> previous link in free chain
	cmpx4	bp|block.fp,4	are they the same?
	tze	last_free		yes, last free block in free list
	stx7	bp|block.fp,1	thread around the block
	sxl1	bp|block.bp,7	..
	cmpx4	bp|area.freep-3,qu	see if pointing to head of list
	tnz	bb|1		no, continue
	stx7	bp|area.freep-3,qu	yes, change head of list
	tra	bb|1

last_free:stz	bp|area.freep-3,qu	free list now empty, clear pointer word
	tra	bb|0		continue

"
"
"	Come here when freeing the last block before virgin territory.
"
free_last_block:
	lcq	1,dl		decrement count of free blocks
	asq	sp|free_count
	lda	bp|area.last_block	update header of area
	sta	bp|area.next_virgin	..
	ldx3	bp|block.prev_size,2	get size of previous block for header
	stx3	bp|area.last_size	save in header
	erx3	-1,du		complement C(x3)
	adlx3	1,du
	adlx3	bp|area.last_block	update pointer to last allocated block
	stx3	bp|area.last_block	..

	lda	sp|blocksize	get size of the block
	stz	bp|0,2		clear header words--they will be in virgin territory
	stz	bp|1,2		 ..
	stz	bp|2,2		 ..
	tra	all_done
	inhibit	off		<-><-><-><-><-><-><-><-><-><-><->



"

"
"	Come here when we must signal "area", "storage", or "bad_area_initialization"
"
signal_area_3:
	eax6	4		"bad_area_format"
	tra	signal_area
signal_area_2:
	eax6	3		"bad_area_assignment"
	tra	signal_area
signal_area_1:
	eax6	2		"bad_area_initialization"
signal_area:
	cmpx0	0,du		were we called as an operator?
	tze	signal_for_subr	yes, branch
	eax0	-1,0		subtract one to point to retry location in caller
	sxl0	sp|stack_frame.operator_ret_ptr	save for call_signal_
	tra	signal_join
signal_for_subr:
	sxl6	sp|save_x6	save for retry
	eax1	*		set up stack frame for call_signal_
	sxl1	sp|stack_frame.operator_ret_ptr
	epbpbp	*
	spribp	sp|tbp
signal_join:
	eppbp	name,6*		get pointer to name to signal
	ldx6	length,6		get length of name in x6
	ldq	1000,dl		get oncode in q
	tsx1	<pl1_operators_>|[call_signal_]
	stz	sp|stack_frame.operator_ret_ptr	clear after signal
	ldx0	sp|8		restore index 0 saved by call_signal_
	tnz	sp|tbp,*0		return to pl1 program to retry allocation
"
	lxl6	sp|save_x6	restore for retry
	eppap	sp|stack_frame.arg_ptr,*	restore arg pointer
	eppbp	ap|4,*		get area header pointer
	eppbp	bp|0,*		..
	lda	bp|area.allocation_method	see if no_freeing method used
	tze	retry_alloc_after_area	no, go retry it
	tra	retry_no_free_alloc_after_area

name:	arg	area_name
	arg	storage_name
	arg	area_init_name
	arg	bad_assign_name
	arg	bad_area_format_name
length:	zero	4,0
	zero	7,0
	zero	23,0
	zero	19,0
	zero	15,0
area_name:	aci	"area"
storage_name:	aci	"storage"
area_init_name:	aci	"bad_area_initialization"
bad_assign_name:	aci	"bad_area_assignment"
bad_area_format_name:
		aci	"bad_area_format"

	end
