" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1985 *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(86-07-15,Ginter), approve(86-07-15,MCR7287),
"     audit(86-07-16,Mabey), install(86-07-28,MR12.0-1104):
"     Change by M Mabey (installed by Ginter) to normalize input with frd.
"                                                      END HISTORY COMMENTS


name	arc_sine_
" Modification history:
"	Written by H. Hoover, M. Mabey, and B. Wong, April 1985,
"	based on the GCOS routine '7nah'.
"
"	Modified: May 10, 1985 by M Mabey - normalize input with a frd.
"
" Function:  Approximate to single precision the arcsine or arccosine of
"	a value in the range [-1:1].
"
" Entry:	through the appropriately named entry point with:
"	EAQ = a value in the range [-1:1]
"	PR2 = the address of a 20 word, even-word aligned scratch area.
"	      12 words are used in this program and another 8 are allocated
"	      for the double_square_root_ routine.
"	PR3 = the return address.
"
" Exit:	EAQ = the desired angle.
"
" Uses:	X2, X3, X4, PR5
"	X2 = indicates BFP or HFP mode - all the floating point math
"	     routines use this register for the same purpose.
"	X3 = saves a return address from arcsine.
"         X4 = saves a return address from part_arcsine.
"	PR5 = a temporary
"	The X register usage starts at X2 because this function calls
"	double_square_root_ which uses registers X0 through X2.  Register X2
"	is used for the same purpose in both routines.
"
"	Since double_square_root_ expects the return address in PR3,
"	this register must be saved before the call is made.  In addition,
"	double_square_root_ expects PR2 to point to an even-word aligned,
"	8 word long working storage area.

	segdef	arc_sine_radians_
	segdef	hfp_arc_sine_radians_
	segdef	arc_sine_degrees_
	segdef	hfp_arc_sine_degrees_
	segdef	arc_cosine_radians_
	segdef	hfp_arc_cosine_radians_
	segdef	arc_cosine_degrees_
	segdef	hfp_arc_cosine_degrees_

	segref	math_constants_,half_pi,hfp_half_pi,hfp_one_radian,one_radian,pi,quarter_pi

	equ	abs_x,0
	equ	arg_x,2
	equ	y,4
	equ	yy,6
	equ	p,8
	equ	space_used,10
	equ	pp,p
	equ	temp,abs_x
	equ	BFP,0
	equ	HFP,2

	bool	P90.0H,004264	" yields HFP +90.0 under 'du' modification

hfp_arc_sine_radians_:
	eax2	HFP		" 2 word offset for HFP constants
	tsx3	arcsine
	frd	0
	tra	pr3|0		" Return to caller

arc_sine_radians_:
	eax2	BFP
	tsx3	arcsine
	frd	0
	tra	pr3|0		" Return to caller

hfp_arc_sine_degrees_:
	eax2	HFP
	tsx3	arcsine
	dfmp	hfp_one_radian	" Convert to degrees
	frd	0
	tra	pr3|0		" Return to caller

arc_sine_degrees_:
	eax2	BFP
	tsx3	arcsine
	dfmp	one_radian	" Convert to degrees
	frd	0
	tra	pr3|0		" Return to caller

hfp_arc_cosine_radians_:
	eax2	HFP
	tsx3	arcsine
	fneg	0
	dfad	hfp_half_pi	" convert to cosine
	frd	0
	tra	pr3|0		" Return to caller

arc_cosine_radians_:
	eax2	BFP
	tsx3	arcsine
	fneg	0
	dfad	half_pi		" convert to cosine
	frd	0
	tra	pr3|0		" Return to caller

hfp_arc_cosine_degrees_:
	eax2	HFP
	tsx3	arcsine
	dfmp	hfp_one_radian	" convert to degrees
	fneg	0
	anq	kill_nine_bits	" clean out unnecessary bottom bits
	fad	P90.0H,du		" convert to cosine
	frd	0
	tra	pr3|0		" Return to caller

arc_cosine_degrees_:
	eax2	BFP
	tsx3	arcsine
	dfmp	one_radian,x2	" convert to degrees
	fneg	0
	dfrd	0		" clean out unnecessary bottom bits
	fad	=90.0,du		" convert to cosine
	frd	0
	tra	pr3|0		" Return to caller

arcsine:
	frd	0		" round and normalize input ("arg_x")
	fst	pr2|arg_x		" store sign of arg_x.
	tpl	2,ic		" abs_x=abs(arg_x)
	  fneg	0
	fst	pr2|abs_x

" determine what range abs_x is in.  A binary search is not used as
" each higher range is much smaller than the previous one.  Once the
" range is determined, perform the appropriate polynomial scaling to
" get abs_x into [0, .5], and then transfer to part_arcsine.
" Upon return, scale the result back.

	fcmg	=0.5,du		" is abs_x in the range [0,.5)
	tpl	above_bound_1	" no, find the correct range
	fld	pr2|arg_x
	tsx4	part_arcsine
	tra	0,x3		" Return to entry

above_bound_1:
	fcmg	bound_2,x2	" is abs_x in the range [.5, .866)
	tpl	above_bound_2	" no, find correct range
	fmp	pr2|abs_x		" EAQ = abs_x**2
	fmp	two,x2		" EAQ = 2 * abs_x**2
	fsb	one,x2		" EAQ = 2 * abs_x**2 - 1
	tsx4	part_arcsine
	dfad	half_pi,x2	" EAQ = part_asin + pi/2
	fmp	=0.5,du		" EAQ = .5*part_asin + pi/4
	fszn	pr2|arg_x		" was arg_x negative
	tpl	0,x3		" no, return to entry
	fneg	0		" EAQ = -EAQ
	tra	0,x3		" Return to entry

above_bound_2:
	fcmg	bound_3,x2	" is abs_x in the range [.866, .966)
	tpl	above_bound_3	" no, find correct range
	fmp	pr2|abs_x		" EAQ = abs_x**2
	dfst	pr2|temp
	fmp	eight,x2		" EAQ = 8*abs_x**2
	fsb	eight,x2		" EAQ = 8*abs_x**2 - 8
	dfmp	pr2|temp		" EAQ = 8*abs_x**4 - 8*abs_x**2
	fad	one,x2		" EAQ = 8*abs_x**4 - 8*abs_x**2 + 1
	tsx4	part_arcsine
	dfad	three_pi_by_two,x2	" EAQ = part_asin + 3*pi/2
	dfmp	one_quarter,x2	" EAQ = part_asin/4 + 3*pi/8
	fszn	pr2|arg_x		" was arg_x negative
	tpl	0,x3		" no, return to entry
	fneg	0		" EAQ = -EAQ
	tra	0,x3		" return to entry

above_bound_3:
	fcmg	bound_4,x2	" is abs_x in the range [.966, 1]
	tpnz	arcsine_domain_error
	fmp	=0.5,du		" EAQ = abs_x/2
	fneg	0		" EAQ = - abs_x/2
	fad	=0.5,du		" EAQ = .5 - abs_x/2 or (1-abs_x)/2

	epp5	pr3|0		" save the return address
	epp2	pr2|space_used	" increment PR2 for sqrt
	tsp3	square_root,x2	" call sqrt function
	epp2	pr2|-space_used	" restore PR2
	epp3	pr5|0		" restore PR3
	tsx4	part_arcsine	" EAQ = sqrt ((1 - abs_x)/2)
	fmp	two,x2		" EAQ = 2*part_asin
	fneg	0		" EAQ = - 2*part_asin
	dfad	half_pi,x2	" EAQ = pi/2 - 2*part_asin
	fszn	pr2|arg_x		" was arg_x negative
	tpl	0,x3		" no, return to entry
	fneg	0		" EAQ = -EAQ
	tra	0,x3		" return to entry

" Transfer Table

" We call double_square_root_ instead of square_root_ because we need
" the additional accuracy.  If we call the single precision version
" we can sometimes end up with a final result that will be wrong in the
" second last bit of the mantissa.

square_root:
	tra	<double_square_root_>|[double_square_root_]
	nop
	tra	<double_square_root_>|[hfp_double_square_root_]


arcsine_domain_error:		" abs_x > 1
	ldq	58,dl
	tsx0	<call_math_error_>|[call_math_error_]
	fld	=0.0,du
	tra	pr3|0		" return to caller

" This next subroutine calculates the arcsine of a value in the
" range [0, .5].

part_arcsine:
	fcmg	formula_bound,x2	" Can we use a short polynomial?
	tmi	small_formula	" Yup.

	dfst	pr2|y
	dfmp	pr2|y
	dfst	pr2|yy		" yy = y*y
	dfmp	p2,x2		" EAQ = yy*p2
	dfad	p1,x2		" EAQ = p1 + yy*p2
	dfmp	pr2|yy		" EAQ = yy*(p1 + yy*p2)
	dfad	p0,x2		" EAQ = p0 + yy*(p1 + yy*p2)
	dfst	pr2|p
	dfld	pr2|yy		" EAQ = yy
	dfad	q1,x2		" EAQ = q1 + yy
	dfmp	pr2|yy		" EAQ = yy*(q1 + yy)
	dfad	q0,x2		" EAQ = q0 + yy*(q1 + yy)
	dfdi	pr2|p		" EAQ = p/q
	dfmp	pr2|y		" EAQ = y*p/q
	tra	0,x4		" Return from part_arcsine

small_formula:
	fcmg	epsilon,x2	" Is any calculation necessary?
	tmi	0,x4		" No. Small number. Just return.

	dfst	pr2|y
	dfmp	pr2|y
	dfst	pr2|yy		" yy = y*y
	dfmp	pp1,x2		" EAQ = yy*pp1
	dfad	pp0,x2		" EAQ = pp0 + yy*pp1
	dfst	pr2|pp
	dfld	pr2|yy
	dfad	qq0,x2		" EAQ = qq0 + yy
	dfdi	pr2|pp		" EAQ = pp/qq
	dfmp	pr2|y		" EAQ = y*pp/qq
	tra	0,x4		" Return from part_arcsine


" Constants:  (Hex values are given in octal)

	even
p0:	dec	.5603629044813127d01
	oct	002263241667,336306551630
p1:	dec	-.46145309466645d01
	oct	003554253414,621544301723
p2:	dec	.49559947478731d00
	oct	000375576333,402012333277
pp0:	dec	-2.21393498174243d00
	oct	003671116707,231744233462
pp1:	dec	.63101484054356d00
	oct	000503050602,166633467044
q0:	dec	.5603629030606043d01
	oct	002263241667,241274777175
q1:	dec	-.554846659934668d01
	oct	003516345730,544667102152
qq0:	dec	-2.21393497792717d00
	oct	003671116707,252252114363

bound_2:	dec	.866025404d0
hfp_bound_2:
	oct	000673317272,000000000000	" sin(pi/3)
bound_3:	dec	.965925826d0
	oct	000756433521,000000000000	" sin(5*pi/12)
bound_4:	dec	1.0d0
	oct	002040000000,000000000000

three_pi_by_two:
	dec 	.471238898038468985787763d01
	oct	002226627617,714620722152
one_quarter:
	dec	0.25d0
	oct	000200000000,000000000000
one:	dec	1.0d0
	oct	002040000000,000000000000
two:	dec	2.0d0
	oct	002100000000,000000000000
eight:	dec	8d0
	oct	002400000000,000000000000
formula_bound:
	dec	0.13052619d0
	oct	000102650520,000000000000
epsilon:	dec	5.7031627d-10
	oct	762116304341,000000000000
kill_nine_bits:
	oct	777777777000

	end
