" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************



" HISTORY COMMENTS:
"  1) change(88-04-06,Huen), approve(88-04-06,MCR7871),
"     audit(88-04-19,RWaters), install(88-04-26,MR12.2-1043):
"     Fix PL/1 bug  2140 and 2152.
"                                                      END HISTORY COMMENTS


"
"	Operators for QUICK STREAM I/O
"
"	Modified:	03/01/78 by RAB to fix 1712
"	Modified:	04/04/78 by RAB to fix 1721
"	Modified: 02/16/84 by MBW to fix probe 13 / TR14172 
"	Modified: 04/06/88 by SH to fix 2140 and 2152
"
"
" Written during 1975 by R.Schoeman to reimplement pl1 stream output in the
" operators to improve performance.
"
	name	put_field_
	include	stack_header
	include	plio2_fsb
	include	plio2_ps
	include	stack_frame
	include	iocbx
	equ	tbp,38
	equ	ps_ptr,42
	equ	total_len,44
	equ	t6,45
	equ	x7_stored,46	upper half of word in storage
	equ	source_str_offset,46	lower half of word
	equ	t2,47
	equ	ctrl_ret_loc,47
	equ	output_request_type,48	0 - edit, 1 - list, other - control requests
"					that abort on endpage
	equ	storage_taken,49		known and set as extend_size in alloc
	equ	double_temp,52
	equ	orig_len,52		yes this conflicts with double_temp, but I'm short of space
	equ	io_arg_list,54
	equ	temp,62
	segdef	restore_regs_and_frame_and_ret
	segdef	put_control_from_format
	segdef	any_qs_error_no_ret
	segdef	set_no_ret_error
	segdef	put_field
	segdef	put_field_str
	segdef	put_field_chk
	segdef	put_field_from_format
	segdef	put_control
"	operator to put out a string, entered via put_list_eis with the
"	descriptor of the output item in sp|temp as well  as in the q
"
put_field_str:
	eppap	sp|ps_ptr,*
	sta	ap|ps.a_stored	we can't clobber  most regs
	stx7	sp|x7_stored
	lda	sp|temp		temp has  the desc, put there by put_list_eis
	sta	ap|ps.q_stored	since the desc was in the q on entry to put_list_eis
	sta	ap|ps.descr
	canq	=o004000,du
	tze	var_str		var_str handles both char & bit varying strs
	ana	=o000077777777	change descr  into length, blocking out type
	cmpq	=o114000,du
	tze	bit_str
	tra	char_str
var_str:
	lda	bp|-1		length word is adr(str) -1
	cmpq	=o120000,du	bit str?
	tnz	char_str
bit_str:
	ada	3,dl		add three to length, for leading&trailing quotes & "b"
	sta	sp|total_len	this will be the final length output
	ldq	sp|total_len
	tsx6	get_newbuf	we  must get a buffer big  enough for len(bit_str)+3 chars
	mlr	(),(pr),fill(042)		042 is ascii quote
	zero	0		only interested in fill char
	desc9a	bp|0,1		pr2 is  where to shove it
	lda	sp|total_len	at this point bp->final char string and pr3->source bit str
	sba	3,dl		this is how  many bits need conversion to "1" or "0"
bit_loop:
	sba	1,dl		loop through all bits converting them to char "1" or "0"
	tmi	bit_loop_done
	cmpb	(pr,al),()
	descb	pr3|0,1
	zero	0		remember, pr3 is pointing to the original bit str
	tze	bit_is_zero
	mlr	(),(pr,al),fill(061)	move in a "1" (061), since the bit is "on"
	zero	0
	desc9a	pr2|0(1),1	target is pr2 up on char since there is a quote in position 1
	tra	bit_loop
bit_is_zero:
	mlr	(),(pr,al),fill(060)	(060) is an ascii "0"
	zero	0
	desc9a	pr2|0(1),1
	tra	bit_loop
bit_loop_done:
	lda	sp|total_len	now to insert trailing quote
	sba	2,dl		trailing quote will be the second to last char
	mlr	(0),(pr,al),fill(142)	142 is ascii "b"
	desc9a	quote_char,1
	desc9a	bp|0,2		pr2 is  where to shove it
	ldq	sp|total_len	conversion to final form is done, put len in q & off we go
	tra	put_field_from_str	pr2->char string to put out, q has len, we're set up for put_field
"
"
char_str:
	epp4	ap|ps.fsbp,*	we have to  ask the fsb if its a print file
	ldq	pr4|fsb.switch	cause if not, we must  double quotes and enclose
	canq	fsb.print,du	the string in quotes.  If it is a print file,
	tze	not_print		a vanilla put_field will do.
	lrs	36		length is in a, move it to  q for put_field
	stz	sp|storage_taken	set sortage_taken
	tra	put_field_from_print	and off we go
not_print:
	sta	sp|orig_len	we must know orig len  to know when we're finished
	sta	sp|total_len
	lrs	35		get 2*total_len in the q
	adq	2,dl		output string, which would be all quotes. Each quote would
	tsx6	get_newbuf	be doubled and a quote on each end: total_len=2*orig_len+2
	epp7	pr2|0		now pr2->new buffer and pr3->source string(a side effect of get_newbuf)
	mlr	(0),(pr),fill(042)	042 is ascii quote, put in the leading one
	zero	0		only interested in fill char
	desc9a	bp|0,1		pr2 is  where to shove it
	aos	sp|total_len	and update the true total len
	ldq	sp|orig_len
"
copy_more:
	scm	(pr,rl),()	scan to find the first quote  in  source str
	desc9a	pr3|0,ql		string to scan(source)
	desc9a	quote_char,1	what to scan for
	arg	sp|temp		place to put offset of  first quote
	ttn	2,ic		tally on  if string has no more quotes
	aos	sp|temp		add  one cause we want to move the original quote  also
	lda	sp|temp		now temp is up to and including any quote found
	aos	sp|total_len	this one will be for the new doubled quote or trailing quote if none foundd
"
	mlr	(pr,rl),(pr,rl)	move up to and  including quote
	desc9a	pr3|0,al		pr3->source string
	desc9a	bp|0(1),al	pr2->target string, up 1 char for leading quote
	a9bd	bp|0,al		update pr2 to reflect new contents
	a9bd	pr3|0,al		update pr3 to point to as-yet unmoved string
	mlr	(0),(pr),fill(042)	insert quote at pr2|(1) cause pr2's always a byte behind
	zero	0		only interested in fill char
	desc9a	bp|0(1),1		pr2 is  where to shove it
	ttn	move_is_over	tally still set on if no quote was found
"
	lda	1,dl
	a9bd	bp|0,al		update target  to reflect new quote just doubled
	sbq	sp|temp		length  of string left to scan is decreased
	tra	copy_more
"
move_is_over:
	ldq	sp|total_len	put_field expects length in q,  pr2 must be reset to start of string
	epp2	pr7|0		reset pr2 to start of string
	tra	put_field_from_str	and off
"
"
get_newbuf:
	epp3	bp|0		we set pr3 to where pr2 was, and set pr2 to the new buffer
	tsx1	<pl1_operators_>|[alloc]	length of new buffer in bytes is in the a
	tra	0,6		and return
"
"	operator for put_field_chk
"	entered with pointer to datum in bp,offset to check for minus sign
"	in x6, length in q
"
put_field_chk:
	cmpc	(),(pr,x6)	check that offset x6 is not "-"
	desc9a	minus_sign,1
	desc9a	bp|0,1
	tnz	check_okay		if its a "-",e_format too small for value
	eppap	sp|ps_ptr,*
	sta	ap|ps.a_stored
	stx7	sp|x7_stored
	eppap	sp|ps_ptr
	spriap	sp|io_arg_list+2
	fld	1*2048,dl
	staq	sp|io_arg_list
	eppap	sp|tbp,*0			get ptr to inst that invoked op
	spriap	sp|stack_frame.return_ptr	reset return ptr so stack_frame_exit_
"					will know where we came from
	eppap	sp|io_arg_list
	tsx1	<pl1_operators_>|[get_our_lp]
	callsp	<plio2_>|[pve_error]

check_okay:
	eax1	1			this reg. needed for next instructtion
	a9bd	bp|0,1			get rid of extra "check" character
"
"	operator for put_field and continuation fo put_field_chk operator
"	entered withpointer to datum in bp,length of output string in q
"
"
"
put_field:
	eppap	sp|ps_ptr,*
	stq	ap|ps.q_stored	we can't clobber q,a,x7, which we use, so save for restoration
	sta	ap|ps.a_stored
	stx7	sp|x7_stored
	stz	sp|storage_taken	BUGFIX, format and print set it
put_field_from_format:
	eppap	sp|ps_ptr,*
put_field_from_print:
	stq	sp|total_len	total_len will be length of string to be put
put_field_from_str:
	spribp	ap|ps.value_p
	epp4	ap|ps.fsbp,*		pr4 will point to fsb
	epp3	pr4|fsb.bptr,*
	stz	sp|output_request_type	output_request_type =0 means edit_dir_out 
	eax6	0
	sxl6	sp|source_str_offset	source_str_offset is offset within string for putting to start
	cmpq	260,dl		we'll allow max string len of 260, cause bit strs add three to 256
	tmoz	3,ic		at this point q must have sp|total_len in it!!!
	lda	8,dl
	tra	any_qs_error_no_ret
	lda	ap|ps.job
	cana	ps.list,du
	tze	reput
	aos	sp|output_request_type	output_request_type =1 means list_dir_out 
	lda	pr4|fsb.switch		fsb_switch is at beginning of fsb
	cana	fsb.print,du		print_switch is bit five of fsb_switch
	tze	check_line	if not print, just check if there's space enough left  on the line
	ldq	pr4|fsb.kol	if it is print, might need leading tab
	div	10,dl		are we on a tab boundary?
	cmpa	0,dl
	tze	check_line	if so, no tab needed
	mpy	10,dl		is there room enough left on line?
	adq	10,dl		BUGFIX, next column position is 10 characters over
	cmpq	pr4|fsb.lsize
	tpnz	line_and_chk_print	if not, needs new_line
	stq	sp|t2		t2 is where the new column position will  be after tab
	lda	tab_char		a is what char should be inserted by insert_char sub-routine
	tsx6	insert_char	and insert the tab
	lda	sp|t2		set the column position
	sta	pr4|fsb.kol
	tsx7	set_fsb_limit	since the tab messes up the old  limit
"
check_line:
	lda	pr4|fsb.lsize	is there room enough on line for output item?
	sba	pr4|fsb.kol
	cmpa	sp|total_len
	tpl	reput		if there is, no more preliminaries neded, just put it out
"
"	now check for the unique case where although the line is not big enough, we do not
"	insert a newline because we are already at the 1st columnposition.
"
	ldq	pr4|fsb.kol
	tze	reput
"
line_and_chk_print:
	tsx6	insert_new_line	if not insert a new_line. This subroutine takes care of kol & pagesize,too
reput:
	ldq	sp|total_len
	adq	pr4|fsb.bnc	q+bnc is buffer_next_char after this io operation
	adq	sp|output_request_type	output_request_type is one iff ldo, this gives trailing blank
	sbq	1,dl		to get buf pos reached, not next free one
	cmpq	pr4|fsb.limit		future bnc>limit?
	tpnz	overlimit		if so, goto overlimit
	lda	pr4|fsb.bnc		get bnc for offset for mlr
	adq	1,dl
	stq	pr4|fsb.bnc		store future bnc into bnc
	sba	1,dl			offset is bnc minus 1
	ldq	sp|total_len
	adq	sp|output_request_type	this restores q to "length to be put"
	lxl7	sp|total_len	x7 will be length to be taken from source str
	asq	pr4|fsb.kol		set proper column
	lxl6	sp|source_str_offset	offset of source string
	mlr	(pr,rl,x6),(pr,rl,al),fill(040)	040=ascii blank,q might=x7+1,where we want trail blank
	desc9a	bp|0,x7		pr2 is source string to move
	desc9a	pr3|0,ql		pr3 is target string,i.e. fsb's buffer
restore_regs_and_frame_and_ret:
	lcq	sp|storage_taken	q is how much to collapse stack
	tze	reset_regs_and_return	if zero, we didn't extend  it and can  return
	epbp3	sp|0		else collapse it the amount we extended it
	asq	sp|stack_frame.next_sp+1
	asq	pr3|stack_header.stack_end_ptr+1
reset_regs_and_return:
	eppap	sp|ps_ptr,*
	ldq	ap|ps.q_stored	we changed the a,q, and x7 & were't allowed to clobber them,  so restore
	lda	ap|ps.a_stored
	ldx7	sp|x7_stored
	tra	<pl1_operators_>|[put_return]		and were finished
"				getting here means the requested job would violate the limit on
overlimit:
	ldq	pr4|fsb.bnc	the last permissable char position in the fsb.buffer, so
	sbq	1,dl		either bsize or lsize was exceeded. First task is to figure out how much
	stq	sp|t2		of the output request falls before the limit, and move those chars.
	lxl6	sp|source_str_offset	t2 now =bnc-1
	lda	pr4|fsb.limit	amount pre-limit will =limit-bnc-1, so subtract t2 from limit
	ssa	sp|t2
	lda	sp|t2		a is now number of chars before the limit
	asa	pr4|fsb.kol	update column index, bnc, and source offset
	asa	pr4|fsb.bnc
	asa	sp|source_str_offset
	mlr	(pr,rl,x6),(pr,rl,ql)	move from pr2 up source offset to fsb.buffer up bnc-1
	desc9a	bp|0,al		length to be moved is limit-bnc-1
	desc9a	pr3|0,al		which is in a
"
	ldq	pr4|fsb.limit	compare limit against bsize to see if bsize was violated
	cmpq	pr4|fsb.bsize	remember that limit represents a character position in the buffer
	tpl	overbuffer	go to overbuffer if buffer is full
	tsx6	insert_new_line	otherwise it must be linesize we exceeded
overmerge:
	ldq	sp|total_len	we get here after handling the limiting condition
	sbq	sp|t2		so figure out how much we must still put out
	stq	sp|total_len	t2 is the amount we put out, so total_len-t2 is the amount left to put
	tra 	reput		and put it out
overbuffer:
	tsx1	call_putchars	if buffer is full, we must put it out
	tra	overmerge		now the limiting condition is resolved, and we can continue
"
"				subroutine to empty the guarenteed-full fsb.buffer into the output stream
call_putchars:
	lda	ap|ps.job		check if its string-option
	cana	ps.string,du
	tnz	string_option_overflow	if it is, this is an error
	lprp5	pr4|fsb.iocb_p		now set up arg list for iox
	spri5	sp|double_temp
	epp3	sp|double_temp
	spri3	sp|io_arg_list+2
	epp3	pr4|fsb.bptr
	spri3	sp|io_arg_list+4
	epp3	pr4|fsb.bsize
	spri3	sp|io_arg_list+6
	epp3	pr4|fsb.lnzc	fsb.lnzc will be status code
	spri3	sp|io_arg_list+8
	sreg	sp|8
	fld	4*2048,dl
	staq	sp|io_arg_list
	eppap	sp|io_arg_list
	stcd	sp|stack_frame.return_ptr
	callsp	pr5|iocb.put_chars,*
	lreg	sp|8
	eppap	sp|ps_ptr,*		restore ptrs
	epp4	ap|ps.fsbp,*
	epp3	pr4|fsb.bptr,*
	eppbp	ap|ps.value_p,*
	stz	pr4|fsb.bnc	next_char must be 1, since we emptied buf
	aos	pr4|fsb.bnc
	lda	pr4|fsb.lnzc	status code
	tnz	put_char_error
	tsx7	set_fsb_limit
	tra	0,1
"
string_option_overflow:
	lda	7,dl			quick_condition_code
	tra	any_qs_error_no_ret
"
set_no_ret_error:
	lda	13,dl
"
any_qs_error_no_ret:
	eax6	set_no_ret_error
	stz	sp|output_request_type
	tra	any_qs_error
"
put_char_error:
	lda	0,dl
	eax6	reset_regs_and_return		x6 points to where to go on return from on-unit
"	label for raising a condition, reached with a code in reg a.
"	code = 0 :: error in xmitting
"	code = 1 :: endpage cond
"	code = 2 :: not a print file when must be
"	code = 3 :: line(n), n<= 0.
"	code = 4 :: control format with value <0, err437
"	code = 5 :: skip(0) requested on non-print file
"	code = 6 :: infinite num. of new-lines to fill page, err433
"	code = 7 :: "buffer" overflow on string-option put, err420
"	code = 8 :: string length over 260, err 242
"	code = 9 :: put_format_ (pfo) , line(0) requested, err 262
"	code = 10:: pfo, no param where needed, err 148
"	code = 11:: pfo, stu_ returned non-zero code, err 195
"	code = 12:: pfo, nesting depth for r_formats exceeded, = 10, err 197
"	code = 13:: attempt to restart after an ERROR or SIZE condition, err 266->OM 466
any_qs_error:
	sta	sp|t6
	spri2	sp|io_arg_list+6	not an argument but must be saved/restored
	epp5	sp|ps_ptr
	spri5	sp|io_arg_list+2
	epp5	sp|t6		t6 is condition code
	spri5	sp|io_arg_list+4
	sreg	sp|8
	tsx1	<pl1_operators_>|[get_our_lp]
	fld	2*2048,dl
	staq	sp|io_arg_list
	eppap	sp|io_arg_list
	stcd	sp|stack_frame.return_ptr
	callsp	<plio2_>|[quick_condition]
	lreg	sp|8
	eppap	sp|tbp,*0
	spriap	sp|stack_frame.return_ptr
	eppap	sp|ps_ptr,*
	epp4	ap|ps.fsbp,*
	epp3	pr4|fsb.bptr,*
	epp2	sp|io_arg_list+6,*
	lda	sp|output_request_type
	cmpa	2,dl
	tmi	0,6		if output_request_type<2, must be list/edit, not control
	tra	ret_from_control		if output_request_type=>2,must be a control so finish here
"
"		subroutine to set the fsb.limit=min(len_left_on_line,len_left_in_buffer)
set_fsb_limit:
	lda	pr4|fsb.lsize
	sba	pr4|fsb.kol
	ada	pr4|fsb.bnc
	sba	1,dl		a is now the pos in buffer of last char on present line
	cmpa	pr4|fsb.bsize	compare to pos in buffer of last char in buffer
	tnc	2,ic
	lda	pr4|fsb.bsize
	sta	pr4|fsb.limit	set limit to the greater of the two
	tra	0,7		and return
"
insert_new_line:
	lda	pr4|fsb.bnc
	sba	1,dl
	cmpa	pr4|fsb.bsize	check if there's room in the buffer for this char
	tmi	3,ic		if there is, no problem
	tsx1	call_putchars	if there isn't , put out the guaranteed-full buffer
	lda	0,dl		reset a to the buffer offset to put the char
	mlr	(pr),(pr,al),fill(012)	move the new_line
	zero	0
	desc9a	pr3|0,1
	aos	pr4|fsb.bnc	update the buffer index
	stz	pr4|fsb.kol	now set column to 0
	lda	=o777777777757	zero out bit32, "emptyline"
	ansa	pr4|fsb.switch	can't be emptyline any longer
	aos	pr4|fsb.lineno	increment lineno
	tsx7	set_fsb_limit	since we reset kol must recalculate the limit
	lda	pr4|fsb.psize	now we must check for possible pagesize violation
	tze	0,6		psize=0 means non-print file, so no ENDPAGE
	ada	1,dl
	cmpa	pr4|fsb.lineno	is lineno = pagesize + 1?
	tnz	0,6		if it is not, return
raise_endpage:
	lda	1,dl		this is the code fora pagesize error
	tra	any_qs_error	and raise the error
"
"	beginning of insert_char subroutine
"
insert_char:
	sta	sp|t6		a has the char to be inserted
	lda	pr4|fsb.bnc
	sba	1,dl
	cmpa	pr4|fsb.bsize	check if there's room in the buffer for this char
	tmi	3,ic		if there is, no problem
	tsx1	call_putchars	if there isn't , put out the guaranteed-full buffer
	lda	0,dl		reset a to the buffer offset to put the char
	mlr	(pr),(pr,al)	move the char
	desc9a	sp|t6,1		we squirreled it away in t6
	desc9a	pr3|0,1
	aos	pr4|fsb.bnc	update the buffer index
	tra	0,6
"
" end of insert_char subroutine
"
"	operator for put_control
"	entered with type of control index in x6,
"	number of times to do that control (or target for the control) in q
"
put_control:
	eppap	sp|ps_ptr,*
	epp1	reset_regs_and_return	pr1 will be where to go after we're done
	stq	ap|ps.q_stored	save the regs we can't clobber
	sta	ap|ps.a_stored
	stx7	sp|x7_stored
put_control_from_format:
	sprp1	sp|ctrl_ret_loc	call_putchars will clobber pr1, so save it here
	eppap	sp|ps_ptr,*	pr1 has been set by put_format
	epp4	ap|ps.fsbp,*
	epp3	pr4|fsb.bptr,*
	stc1	sp|output_request_type	this "I am a control" flag is for endpage
"					processing -- endpage aborts processing of
"					most controls
	cmpx6	3,du		3=page request, which has no value in q
	tze	check_print_file	so just check if its print file and go on from there
	cmpq	0,dl		otherwise see if count is >= 0
	tpl	3,ic		no control is allowed a negative count
	lda	4,dl		this is the error code for negative control count
	tra	any_qs_error	and raise the error
"
	cmpx6	1,du		1 is code for skip request
	tnz	check_x_format	if not, try next test
"
	cmpq	0,dl		skip is allowed a 0 count in the request
	tnz	skip_more		but only if it is a print file
	lda	pr4|fsb.switch	so test to see if print-file bit is on
	cana	fsb.print,du
	tnz	3,ic		if it is, were safe
	lda	5,dl		if not, set error code
	tra	any_qs_error	and raise the error
	lda	carr_rtn_char	skip(0) means give a carriage return but no line-feed
	tsx6	insert_char	so insert the carr-return
	stz	pr4|fsb.kol	kol is now 0
set_fsb_and_ret:
	tsx7	set_fsb_limit	we have to set the limit since control chars usually change it
ret_from_control:
	lprp1	sp|ctrl_ret_loc
	tra	pr1|0		and return,pr1 having been set on or prior to entry to put_control
skip_more:
	tsx6	insert_new_line	non-zero skip count, so insert a new_line
	sbq	1,dl		reset count, is it still > 0?
	tmoz	ret_from_control	if not, return, limit was set by insert_new_line
	tra	skip_more		count was not zero,so repeat
"
check_x_format:
	cmpx6	5,du		5 is request code for x_format,i.e. blank spaces
	tnz	check_q_gt_zero	x and skip formats are the only ones which allow a zero count
"
	stz	sp|output_request_type	endpage does not abort x format
put_q_blanks:
	adq	pr4|fsb.bnc	now put q blanks out
	sbq	1,dl		to get buffer position reached after operation, not next one
	cmpq	pr4|fsb.limit	see if we can move all the blanks in one move without violating the limit
	tmoz	easy_blanks	if we can, we save time & work
	sbq	pr4|fsb.bnc	restore q to original value with this subtraction
	adq	1,dl		compensate for earlier subtraction of 1 (fixes 1721)
"			now we put out the blanks one by one
repeat_blank:
	cmpq	0,dl		more to put out?
	tze	ret_from_control	if not, return. Blanks don't require resetting fsb.limit.
	lda	pr4|fsb.kol	first check if there's room for a char on this line
	cmpa	pr4|fsb.lsize
	tmi	2,ic		if kol<lsize, no problem
	tsx6	insert_new_line	if kol>=lsize, insert a new_line
	lda	pr4|fsb.bnc
	sba	1,dl
	cmpa	pr4|fsb.bsize
	tmi	3,ic
	tsx1	call_putchars
	lda	0,dl
	mlr	(pr),(pr,al),fill(040)
	zero	0
	desc9a	pr3|0,1
	aos	pr4|fsb.bnc
	aos	pr4|fsb.kol	we know we inserted a single char
	sbq	1,dl		decrement count by one
	tra	repeat_blank	and repeat
"
"			this means we dont have to watch out for the limit
easy_blanks:
	sbq	pr4|fsb.bnc	restore q to its original value,i.e. the number of blanks to be put
	adq	1,dl		we subtracted one before,so add 1 now
	lxl6	pr4|fsb.bnc	set up regs for the mlr
	sbx6	1,du
	mlr	(),(pr,rl,x6),fill(040)	040 is ascii blank
	zero	0
	desc9a	pr3|0,ql
	asq	pr4|fsb.bnc	correct indexes
	asq	pr4|fsb.kol
	tra	ret_from_control	and return
"
check_q_gt_zero:
	cmpq	0,dl		the rest of the controls forbid a zero count
	tnz	check_column	if q=0 error unless col  format
	cmpx6	2,du		is it col(0)?
	tze	column_zero	make it col(1),effectively
	lda	9,dl		the error code is 9
	tra	any_qs_error	and raise the error
"
"	now check for column, then page, format
check_column:
	cmpx6	2,du		request code=2 means column format
	tnz	check_print_file	page is only allowed for a print file
"
	stz	sp|output_request_type	endpage does not abort column format
	cmpq	pr4|fsb.kol	is the requested column less than the present one?
	tmoz	pre_column	if it is, we must produce a new-line first
	cmpq	pr4|fsb.lsize	is the column <= than the line size?
	tmoz	within_line	if so,we're ok
	tsx6	insert_new_line	else insert a new-line first
	tra	ret_from_control	we needn't set fsb.limit cause insert_new_line does
"
column_zero:
	tsx6	insert_new_line
	tra	ret_from_control	and were done
"			our task now is to put out enough blanks to reach the desired column
within_line:
	sbq	pr4|fsb.kol	how many more blanks needed?
	tra	pre_column+1	and put them out
pre_column:
	tsx6	insert_new_line	the rules say start with a new_line
	sbq	1,dl		since if we want kol 5 we need only 4 blanks to get there
	tra	put_q_blanks	and put out the blanks
"
check_print_file:
	lda	pr4|fsb.switch
	cana	fsb.print,du
	tnz	3,ic
	lda	2,dl		the page & line requests require a print file, if not, it is error code 2
	tra	any_qs_error	and raise the error
	cmpx6	3,du		page request?
	tnz	must_be_line	as the man says, if not it must be line
"
new_page:
	lda	pr4|fsb.lineno	in most cases pagemark must be preceeded by a newline
	cmpa	pr4|fsb.psize	unless lineno>psize & kol=0 & ^emptyline
	tmoz	new_page_and_line
	lda	pr4|fsb.kol
	tnz	new_page_and_line
	lda	fsb.emptyline,dl
	cana	pr4|fsb.switch
	tze	just_page
"
new_page_and_line:
	tsx6	insert_new_line
just_page:
	lda	pagemark_char
	tsx6	insert_char
	stz	pr4|fsb.kol	a pagemark resets the kol to 0
	ldq	1,dl		and sets lineno to one
	stq	pr4|fsb.lineno
	aos	pr4|fsb.pageno
	tra	set_fsb_and_ret	since kol was reset, fsb.limit must be
"
must_be_line:
	cmpq	pr4|fsb.psize	is the requested lineno>pagesize?
	tmoz	not_overp		iif not, go to not_overp
"
page_time:
	lda	pr4|fsb.lineno	if lineno is already>pagesize, just insert a new pagemark and return
	cmpa	pr4|fsb.psize
	tpnz	new_page
fill_pg_and_raise_ep:
	tsx1	<pl1_operators_>|[get_our_lp]	else we must fill the page with new_lines. which we don't
	ldq	<plio2_data_>|[max_page_size]	want to do if pagesize=max_page_size,i.e. is virtually infinite
	epp4	ap|ps.fsbp,*	but would rather print a message in that case
	cmpq	pr4|fsb.psize
	tnz	3,ic		is pagesize=max_page_size?
	lda	6,dl		if so, error code=6
	tra	any_qs_error	and raise the error
	ldq	pr4|fsb.lineno	otherwise, proceed to fill the page with new_lines
fill_more:
	tsx6	insert_new_line
	adq	1,dl
	cmpq	pr4|fsb.psize
	tpnz	raise_endpage
	tra	fill_more
"
not_overp:
	cmpq	pr4|fsb.lineno	if the requested lineno is <present lineno
	tmi	page_time		we must fill the page with new_lines and put out a new page
	tze	q_equ_lineno	if they are equal, we must check the column
	sbq	pr4|fsb.lineno	if requested lineno > present lineno, just skip the right number of lines
	tra	skip_more
q_equ_lineno:
	lda	pr4|fsb.kol	if kol is zero, we're where we want to be
	tze	ret_from_control
	tra	page_time		else we need to go to the next page
b_char:
	oct	142000000000
quote_char:
	oct	042000000000
blank_char:
	oct	040000000000
pagemark_char:
	oct	014000000000
minus_sign:
	oct	055000000000
new_line:
	oct	012000000000
tab_char:
	oct	011000000000
carr_rtn_char:
	oct	015000000000
	end
