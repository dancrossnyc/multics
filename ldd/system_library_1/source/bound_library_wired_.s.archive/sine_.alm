" ******************************************
" *                                        *
" * Copyright, (C) Honeywell Limited, 1985 *
" *                                        *
" ******************************************
	name	sine_
" Modification history:
"	Written by H. Hoover, M. Mabey, and B. Wong, April 1985,
"	based on GCOS routine '7nba'.
"
" Function:  Approximate to single precision the sine or cosine of an
"	angle given in degrees or radians.
"
" Entry:	through the appropriately named entry point with:
" 	EAQ = the angle whose sine or cosine is desired.
"	PR2 = the address of a 12 word, even-word aligned scratch area.
"	      4 words are used in this program and 12 are used by the
"	      routine "principal_angle_".  The storage for sine_ and
"	      principal_angle_ overlap.
"	PR3 = the return address.
"
" Exit:	EAQ = the desired sine or cosine.
"
" Uses:	X0, X1, X2.
"	X0 = saves a return address from principal_angle_ routines
"	X1 = shift (returned by principal_angle_ routines)
"	X2 = indicates BFP or HFP mode - all the floating point math
"	     routines use this register for the same purpose.
"	The principal_angle_ routines use registers X1 and X2.
"

	segref	math_constants_,half_pi,one_degree,pi
	segref	principal_angle_,principal_radians_,principal_degrees_

	equ	BFP,0
	equ	HFP,2
	equ	x,0
	equ	xx,2

	segdef	cosine_degrees_,hfp_cosine_degrees_
	segdef	cosine_radians_,hfp_cosine_radians_
	segdef	sine_degrees_,hfp_sine_degrees_
	segdef	sine_radians_,hfp_sine_radians_


hfp_cosine_degrees_:
	eax2	HFP		" 2 word offset for HFP constants
	tra	cosine_degrees

cosine_degrees_:
	eax2	BFP		" no offset for BFP constants

cosine_degrees:
	fad	=0.0,du		" normalize input
	fcmg	one_eighty,x2	" if abs_angle <= 180:
	tmi	case1_degrees	" then no angle reduction is necessary
	tsx0	principal_degrees_
	tra	case_degrees+1,x1	" select appropriate case


hfp_cosine_radians_:
	eax2	HFP		" 2 word offset for HFP constants
	tra	cosine_radians

cosine_radians_:
	eax2	BFP		" no offset for BFP constants

cosine_radians:
	fad	=0.0,du		" normalize input and set indicators
	fcmg	pi,x2		" if abs (angle) <= pi
	tmi	case1_radians	" then no angle reduction is necessary
	tsx0	principal_radians_
	tra	case_radians+1,x1	" select appropriate case
				

hfp_sine_degrees_:
	eax2	HFP		" 2 word offset for HFP constants
	tra	sine_degrees

sine_degrees_:
	eax2	BFP		" no offset for BFP constants

sine_degrees:
	fad	=0.0,du		" normalize input
	fcmg	ninety,x2		" if abs (angle) < pi/2
	tmi	case0_degrees	" then no angle reduction is necessary
	tsx0	principal_degrees_
	tra	case_degrees,x1	" select appropriate case


hfp_sine_radians_:
	eax2	HFP		" 2 word offset for HFP constants
	tra	sine_radians

sine_radians_:
	eax2	BFP		" no offset for BFP constants

sine_radians:
	fad	=0.0,du		" normalize input
	fcmg	half_pi,x2	" if abs (angle) <= pi/2
	tmoz	case0_radians	" then no angle reduction is necessary
	tsx0	principal_radians_
	tra	case_radians,x1	" Case select appropriate case_radians

case_radians:
	tra	case0_radians
	tra	case1_radians
	tra	case2_radians
	tra	case3_radians
	tra	case0_radians

case1_radians:
	fad	=0.0,du		" set indicators
	tmi	2,ic		" EAQ = - abs (EAQ)
	  negl	0		" fneg underflows at o400400000000

	dfad	half_pi1,x2
	dfad	half_pi2,x2
	tra	part_sine_radians

case2_radians:
	fneg	0
	tra	part_sine_radians

case3_radians:
	fad	=0.0,du		" set indicators
	tpl	2,ic		" EAQ = abs (EAQ)
	  fneg	0

	dfsb	half_pi1,x2
	dfsb	half_pi2,x2
	tra	part_sine_radians

case_degrees:
	tra	case0_degrees
	tra	case1_degrees
	tra	case2_degrees
	tra	case3_degrees
	tra	case0_degrees

case1_degrees:
	fad	=0.0,du		" set indicators
	tmi	2,ic		" EAQ = - abs (EAQ)
	  negl	0		" fneg underflows at o400400000000

	fad	ninety,x2
	tra	part_sine_degrees

case2_degrees:
	fneg	0
	tra	part_sine_degrees

case3_degrees:
	fad	=0.0,du		" set indicators
	tpl	2,ic		" EAQ = abs (EAQ)
	fneg

	fsb	ninety,x2
"	tra	part_sine_degrees

case0_degrees:			" case0_degrees is just part_sine_degrees

part_sine_degrees:
	dfcmg	eps2,x2		" if conversion to radians underflows
	tpl	2,ic
	  fld	=0.0,du		" then use zero
	dfmp	one_degree,x2	" convert to radians.
"	tra	part_sine_radians

case0_radians:			" case0_radians is just part_sine_radians


" Procedure part_sine_radians (x) calculates 'sin(x)' for 'x' in the range
" [-pi/2, pi/2] given 'x' in the EAQ.

part_sine_radians:
	dfcmg	eps3,x2		" if abs (x) < 5e-10:
	tpl	3,ic
	  frd	0
	  tra	pr3|0		"    sine is x for small x
	dfst	pr2|x
	dfmp	pr2|x		" calculate xx = x*x
	dfst	pr2|xx
	fmp	p5,x2		" calculate p(xx)
	dfad	p4,x2
	fmp	pr2|xx
	dfad	p3,x2
	fmp	pr2|xx
	dfad	p2,x2
	fmp	pr2|xx
	dfad	p1,x2
	dfmp	pr2|xx
	dfad	p0,x2
	dfmp	pr2|x		" return x*p(xx)
	frd	0
	tra	pr3|0


" Constants:

	even
eps1:	dec	1.886591d-8
	oct	764242035115,000000000000
eps2:	dec	8.418858142948452884d-38
	oct	402162456701,514360373670	" 2.670821537926801391d-154
eps3:	dec	5.0d-10
	oct	762104560276,404665512263
half_pi1:	oct	002622077325,042055060432	" 1.570796326794896619d0
	oct	002062207732,504205506043	" 1.570796326794896619d0
half_pi2:	oct	602611431424,270033407150	" 8.333742918520878328d-20
	oct	742461143142,427003340714	" 5.170182981794105568d-19
ninety:	dec	90.0d0
	oct	004264000000,000000000000
one_eighty:
	dec	180.0d0
	oct	004550000000,000000000000
p0:	dec	 9.999999999788d-1
	oct	000777777777,776426056601
p1:	dec	-1.6666666608826d-1
	oct	001652525252,575051425416
p2:	dec	 8.333330720556d-3
	oct	776104210413,351265306744
p3:	dec	-1.98408328231d-4
	oct	773137720534,017765224715
p4:	dec	 2.7523971068d-6
	oct	770134265644,770436615640
p5:	dec	-2.386834641d-8
	oct	765462761716,000402576424

	end
