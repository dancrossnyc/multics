" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1985 *
" *                                                         *
" ***********************************************************
	name	double_principal_angle_
" Modification history:
"	Written by H. Hoover, M. Mabey and B. Wong, April 1985.
"
" Function:  Scale an angle into the range -pi/4 to pi/4.
"
" Entry:  through the appropriately named entry point with:
"	EAQ = input angle to be scaled.
"	X0  = the return address.
"	X2  = a two word offset for HFP constants - this register is used
"	      by all of the floting point math_routines for the same thing.
"	PR2 = points to an even word aligned, 14 word long, scratch area.
"
" Exit:	EAQ = the scaled angle.
"	X1  = mod ((input EAQ)/HALF_PI + 0.5), 4)
"
" Uses:	X1
"	X1  = used to return mod ((input EAQ)/HALF_PI + 0.5), 4)

	segdef	double_principal_degrees_,double_principal_radians_

	segref	math_constants_,pi,half_pi,almost_one

	bool	P2.0H,002100		" yields HFP +2.0 under 'du' modification
	bool	P45.0H,004132		" yields HFP +45.0 under 'du' modification

	equ	angle,0
	equ	temp,angle
	equ	n1,2
	equ	n2,3
	equ	t1,4
	equ	t2,6
	equ	t3,8
	equ	t4,10
	equ	t5,12
	equ	HFP,2


double_principal_degrees_:
	cmpx2	HFP,du
	tze	hfp_principal_degrees

bfp_principal_degrees:
	dfrd	0
	dfcmg	two_pwr_54	" is the EAQ too large
	tpnz	angle_too_big	" Yup.

	dfst	pr2|angle
	dfdv	ninety		" EAQ = EAQ/90
	fad	=0.5,du		" EAQ = EAQ/90 + 0.5
	dufa	almost_one
	dufs	almost_one
	ufa	=71b25,du		" AQ = EAQ/90 + 0.5 in integer form

	eax1	0,ql
	anx1	=3,du		" X1 = mod(AQ,4)

	fad	=0.0,du		" EAQ = floor(EAQ/90 + 0.5) in floating point form
	fmp	=90.0,du		" EAQ = floor(EAQ/90 + 0.5)*90
	fneg	0		" EAQ = -floor(EAQ/90 + 0.5)*90
	dfad	pr2|angle		" EAQ = angle-floor(EAQ/90 + 0.5)*180
	tra	0,x0		" return to caller

hfp_principal_degrees:
	dfrd	0
	dfcmg	hfp_two_pwr_48	" is the EAQ too large
	tpnz	angle_too_big	" Yup.

	dfst	pr2|angle
	dfdv	ninety,x2		" EAQ = EAQ/90
	fad	=0.5,du		" EAQ = EAQ/90 + 0.5
	dufa	almost_one
	dufs	almost_one
	ufm	P2.0H,du
	ufa	=18b25,du		" AQ = EAQ/90 + 0.5

	eax1	0,ql
	anx1	=3,du		" X1 = mod(AQ,4)

	fad	=0.0,du		" EAQ = floor(EAQ/90 + 0.5)*2
	fmp	P45.0H,du		" EAQ = floor(EAQ/90 + 0.5)*90 in floating point form
	fneg	0		" EAQ = -floor(EAQ/90 + 0.5)*90
	dfad	pr2|angle		" EAQ = angle-floor(EAQ/90 + 0.5)*90
	tra	0,x0		" return to caller


double_principal_radians_:
	cmpx2	HFP,du
	tze	hfp_principal_radians

bfp_principal_radians:
	dfrd	0
	dfst	pr2|angle
	dfcmg	two_pwr_27	" is the EAQ too large
	tpnz	bfp_big_angle	" Yup.

	dfmp	one_over_half_pi	" EAQ = EAQ/half_pi
	fad	=0.5,du		" EAQ = EAQ/half_pi + 0.5
	dufa	almost_one
	dufs	almost_one
	ufa	=71b25,du		" AQ = EAQ/half_pi + 0.5 in integer form

	eax1	0,ql
	anx1	=3,du		" X1 = mod(AQ,4)

	fad	=0.0,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
	fst	pr2|n1		" n1 = EAQ
	tra	small_angle_join	" goto common code for HFP and BFP


hfp_principal_radians:
	dfrd	0
	dfst	pr2|angle
	dfcmg	hfp_two_pwr_24	" is the EAQ too large
	tpnz	hfp_big_angle	" Yup.

	dfmp	one_over_half_pi,x2	" EAQ = EAQ/half_pi
	fad	=0.5,du		" EAQ = EAQ/half_pi + 0.5
	dufa	almost_one
	dufs	almost_one
	ufm	P2.0H,du
	ufa	=18b25,du		" AQ = EAQ/half_pi + 0.5 in integer form

	eax1	0,ql
	anx1	=3,du		" X1 = mod(AQ,4)

	fad	=0.0,du		" EAQ = floor(EAQ/half_pi + 0.5)*2
	fmp	=0.5,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
	fst	pr2|n1		" n1 = EAQ

small_angle_join:
	fmp	half_pi1,x2
	dfst	pr2|t1		" t1 = n1*half_pi1

	fld	pr2|n1
	fmp	half_pi2,x2
	dfst	pr2|t2		" t2 = n1*half_pi2

	fld	pr2|n1
	fmp	half_pi3,x2
	dfst	pr2|t3		" t3 = n1*half_pi3

	fld	pr2|n1
	fmp	half_pi4,x2
	dfst	pr2|t4		" t4 = n1*half_pi4

	fld	pr2|n1
	dfmp	half_pi5,x2
	dfst	pr2|t5		" t5 = n1*half_pi5

	dfld	pr2|angle		" answer = angle - t1 - t2 - t3 - t4 - t5
	dfsb	pr2|t1
	dfsb	pr2|t2
	dfsb	pr2|t3
	dfsb	pr2|t4
	dfsb	pr2|t5
	tra	0,x0

hfp_big_angle:
	dfcmg	hfp_two_pwr_48	" is the EAQ too large?
	tpnz	angle_too_big	" Yup.

	dfmp	one_over_half_pi,x2	" EAQ = EAQ/half_pi
	fad	=0.5,du		" EAQ = EAQ/half_pi + 0.5
	dufa	almost_one
	dufs	almost_one
	ufm	P2.0H,du
	ufa	=18b25,du		" AQ = EAQ/half_pi + 0.5 in integer form

	eax1	0,ql
	anx1	=3,du		" X1 = mod(AQ,4)

	fad	=0.0,du		" EAQ = floor(EAQ/half_pi + 0.5)*2
	fmp	=0.5,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
	fst	pr2|n1		" n1 = EAQ
	tra	big_angle_join

bfp_big_angle:
	dfcmg	two_pwr_54	" is the EAQ too large?
	tpnz	angle_too_big	" Yup.

	dfmp	one_over_half_pi	" EAQ = EAQ/half_pi
	fad	=0.5,du		" EAQ = EAQ/half_pi + 0.5
	dufa	almost_one
	dufs	almost_one
	ufa	=71b25,du		" AQ = EAQ/half_pi + 0.5 in integer form

	eax1	0,ql
	anx1	=3,du		" X1 = mod(AQ,4)

	fad	=0.0,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
	fst	pr2|n1		" n1 = EAQ
	
big_angle_join:
	fsb	pr2|n1
	fst	pr2|n2		" n2 = n - n1

	fld	pr2|n1
	fmp	half_pi1,x2
	dfst	pr2|t1		" t1 = n1*half_pi1

	fld	pr2|n1		" calculate n1*half_pi2 + n2*half_pi1
	fmp	half_pi2,x2
	dfst	pr2|t2
	fld	pr2|n2
	fmp	half_pi1,x2
	dfad	pr2|t2
	dfst	pr2|t2		" t2 = (n1*half_pi2 + n2*half_pi1)

	fld	pr2|n1		" calculate n1*half_pi3 + n2*half_pi2
	fmp	half_pi3,x2
	dfst	pr2|t3
	fld	pr2|n2
	fmp	half_pi2,x2
	dfad	pr2|t3
	dfst	pr2|t3		" t3 = (n1*half_pi3 + n2*half_pi2)

	fld	pr2|n1		" calculate n1*half_pi4 + n2*half_pi3
	fmp	half_pi4,x2
	dfst	pr2|t4
	fld	pr2|n2
	fmp	half_pi3,x2
	dfad	pr2|t4
	dfst	pr2|t4		" t4 = (n1*half_pi4 + n2*half_pi3)

	fld	pr2|n1		" calculate n1*half_pi5 + n2*half_pi4
	dfmp	half_pi5,x2
	dfst	pr2|t5
	fld	pr2|n2
	fmp	half_pi4,x2
	dfad	pr2|t5
	dfst	pr2|t5		" t5 = (n1*half_pi5 + n2*half_pi4)

	dfld	pr2|angle		" answer = angle - t1 - t2 - t3 - t4 - t5
	dfsb	pr2|t1
	dfsb	pr2|t2
	dfsb	pr2|t3
	dfsb	pr2|t4
	dfsb	pr2|t5

	tra	0,x0		" return to caller.  The indicators are set.

angle_too_big:
	ldq	code,x2		" load the error code
	stx0	pr2|temp		" save X0
	tsx0	<call_math_error_>|[call_math_error_]
	ldx0	pr2|temp		" restore X0

	eax1	0		" X1 = 0
	fld	=0.0,du		" EAQ = 0, set indicators
	tra	0,x0		" return to caller


" Constants:

	even
ninety:	dec	90.0d0
	oct	004264000000,000000000000
one_over_half_pi:
	dec	6.3661977236758134307553d-1
	oct	000505746033,344710405225
hfp_two_pwr_24:
	oct	016040000000,000000000000
two_pwr_27:
	oct	070400000000,000000000000
hfp_two_pwr_48:
	oct	032040000000,000000000000
two_pwr_54:
	oct	156400000000,000000000000
	oct	034200000000,000000000000
half_pi1:	oct	002622077325,000000000000
	oct	002062207732,000000000000
half_pi2:	oct	706420550604,000000000000
	oct	766050420550,000000000000
half_pi3: oct	616646114314,000000000000
	oct	752060432304,000000000000
half_pi4: oct	526505600670,000000000000
	oct	736061461213,000000000000
half_pi5:	oct	434715045101,000000000000
	oct	722040156034,642244022341
code:	dec	72,0,73

	end
