" ******************************************
" *                                        *
" * Copyright, (C) Honeywell Limited, 1985 *
" *                                        *
" ******************************************
	name	logarithm_
" Modification history:
"	Written by H. Hoover, M. Mabey, and B. Wong, April 1985,
"	based on GCOS routine '7naf'.
"
" Function:  Calculates the logarithm functions log_base_e(x), log_base_2(x),
"	and log_base_10(x) to single precision accuracy in either BFP or
"	HFP mode.
"
" Entry:	through the appropriately named entry point with:
" 	EAQ = the argument x.
"	PR2 = the address of a 14 word, even-word aligned scratch area.
"	PR3 = the return address.
"
" Exit:	EAQ = the desired logarithm
"
" Uses:	X0, X1, X3
"	X0 = saves a return address from call_math_error_
"	     or saves a return address from log2
"	X1 = saves a return address from part_log2_of_ratio
"	X3 = address of second argument for part_log2_of_ratio

	segref	math_constants_,hfp_log_10_of_2,hfp_log_e_of_2,log_10_of_2,log_e_of_2,max_value

	equ	xe,0
	equ	xm,2
	equ	bias,4
	equ	shift,6
	equ	x_plus_y,8
	equ	z,10
	equ	zz,12

	segdef	log_base_10_,hfp_log_base_10_
	segdef	log_base_2_,hfp_log_base_2_
	segdef	log_base_e_,hfp_log_base_e_


log_base_10_:
	tsx0	log2		" calculate log2 (x)
	dfmp	log_10_of_2	" EAQ := log_10_of_2 * log2 (x)
	frd	0
	tra	pr3|0		" return to caller

log_base_2_:
	tsx0	log2		" calculate log2 (x)
	frd	0
	tra	pr3|0		" return to caller

log_base_e_:
	tsx0	log2		" calculate log2 (x)
	dfmp	log_e_of_2	" EAQ := log_e_of_2 * log2 (x)
	frd	0
	tra	pr3|0		" return to caller

hfp_log_base_10_:
	tsx0	hfp_log2		" calculate log2 (x)
	dfmp	hfp_log_10_of_2	" EAQ := hfp_log_10_of_2 * log2 (x)
	frd	0
	tra	pr3|0		" return to caller

hfp_log_base_2_:
	tsx0	hfp_log2		" calculate log2 (x)
	frd	0
	tra	pr3|0		" return to caller

hfp_log_base_e_:
	tsx0	hfp_log2		" calculate log2 (x)
	dfmp	hfp_log_e_of_2	" EAQ := hfp_log_e_of_2 * log2 (x)
	frd	0
	tra	pr3|0		" return to caller

log_of_negative:
	ldq	10,dl
	tsx0	<call_math_error_>|[call_math_error_]
	fld	max_value
	fneg	0
	tra	pr3|0

log_of_zero:
	ldq	9,dl
	tsx0	<call_math_error_>|[call_math_error_]
	fld	max_value
	fneg	0
	tra	pr3|0

log2:
	fad	=0.0,du		" normalize input and set indicators
	tmi	log_of_negative
	tze	log_of_zero

	fcmp	square_root_two	" check for x in the range [.707,1.414]
	tpl	6,ic
	  fcmp	square_root_half
	  tmi	4,ic		" if square_root_half >= x & x <= square_root_two
	    eax3	one		"   X3 := addr (1.0)
	    eax1	0,x0		"   copy return address
	    tra	part_log2_of_ratio	"   result = part_log2_of_ratio (x, 1)
				" else
	ste	pr2|xe		"   store addr (x) -> expon in xe 
	lde	=0,du		"   addr (xm) -> expon = 0
	fst	pr2|xm
	lda	pr2|xe		"   A := 8/xe,10/0,18/garbage
	lrs	72-18		"   AQ := 62/xe,10/0
	lde	=61b25,du		"   EAQ := unnormalized float(xe)
	fsb	=0.5,du		"   EAQ := float(xe) - 0.5
	fst	pr2|bias
	fld	pr2|xm
	eax3	square_root_half	"   X3 := addr (square_root_half)
	tsx1	part_log2_of_ratio	"   EAQ := part_log2_of_ratio (x, square_root_half)
          fad       pr2|bias            "   EAQ := part_log2_of_ratio (x, square_root_half) + bias  (= log2(x))
	tra	0,x0		"   return result


" part_log2_of_ratio (x, y) calculates log2(x/y), where x/y is in the
" range [0.5*2**0.5, 2**0.5], given x in the EAQ and the address of y in X3.

part_log2_of_ratio:

	dfad	0,x3		" EAQ := x + y
	dfst	pr2|x_plus_y
	dfsb	0,x3		" EAQ := x
	dfsb	0,x3		" EAQ := x - y
	dfdv	pr2|x_plus_y	" calculate z = (x - y) / (x + y)
	fcmg	eps
	tpnz	3,ic		" if abs(z) < 4.1968417d-11
	  dfmp	p0		"   EAQ := z * p0
	  tra	0,x1		"   return to caller
	dfst	pr2|z
	fmp	pr2|z		" calculate zz = z*z
	fst	pr2|zz		" calculate p(zz)
	fmp	p3
	dfad	p2
	fmp	pr2|zz
	dfad	p1
	fmp	pr2|zz
	dfad	p0
	dfmp	pr2|z		" calculate z*p(zz)

	tra	0,x1		" return to caller


hfp_log2:
	fad	=0.0,du		" normalize input and set indicators
	tmi	log_of_negative
	tze	log_of_zero

	fcmp	hfp_square_root_two	" check for x in the range [.707,1.414]
	tpl	6,ic
	  fcmp	hfp_square_root_half
	  tmi	4,ic		" if square_root_half >= x & x <= square_root_two
	    eax3	hfp_one		"   X3 := addr (1.0)
	    eax1	0,x0		"   copy return address
	    tra	hfp_part_log2_of_ratio
				"   result = hfp_part_log2_of_ratio (x, 1)
				" else
	ste	pr2|xe		"   store addr (x) -> expon in xe
	lde	=0,du		"   addr (xm) -> expon = 0
				"   EAQ := xm
	stz	pr2|shift		"   shift := 0

	even
do_while:				"   do while (xm < 0.5)
	fcmp	=0.5,du
	tpl	end_do_while
	lls	1		"      xm = 2*xm
          aos	pr2|shift		"      shift := shift + 1
	tra	do_while		"   end do_while
end_do_while:

	fst	pr2|xm
	lda	pr2|xe		"   A := 8/xe,10/0,18/garbage
	lrs	36-10		"   AQ := 36/4*xe,8/0,28/garbage
	sba	pr2|shift		"   AQ := 36/4*xe-shift,8/0,28/garbage
	lrs	29		"   AQ := 65/4*xe-shift,7/0
	lde	=16b25,du		"   EAQ := unnormalized float(4*xe-shift)
	fsb	=0.5,du		"   EAQ := float(4*xe-shift)-0.5
	fst	pr2|bias
	fld	pr2|xm
	eax3	hfp_square_root_half
				"   X3 := addr (square_root_half)
	tsx1	hfp_part_log2_of_ratio
				"   EAQ := hfp_part_log2_of_ratio (x, square_root_half)
	fad	pr2|bias		"   EAQ := hfp_part_log2_of_ratio (x, square_root_half) + bias
	tra	0,x0		"   return result


" hfp_part_log2_of_ratio (x, y) calculates log2(x/y), where x/y is in the
" range [0.5*2**0.5, 2**0.5], given x in the EAQ and the address of y in X3.

hfp_part_log2_of_ratio:

	dfad	0,x3		" EAQ := x + y
	dfst	pr2|x_plus_y
	dfsb	0,x3		" EAQ := x
	dfsb	0,x3		" EAQ := x - y
	dfdv	pr2|x_plus_y	" calculate z = (x - y) / (x + y)
	fcmg	hfp_eps
	tpnz	3,ic		" if abs(z) < 4.1968417d-11
	  dfmp	hfp_p0		"   EAQ := z * p0
	  tra	0,x1		"   return to caller
	dfst	pr2|z
	fmp	pr2|z		" calculate zz = z*z
	fst	pr2|zz		" calculate p(zz)
	fmp	hfp_p3
	dfad	hfp_p2
	fmp	pr2|zz
	dfad	hfp_p1
	fmp	pr2|zz
	dfad	hfp_p0
	dfmp	pr2|z		" calculate z*p(zz)

	tra	0,x1		" return to caller

	even
eps:	dec	4.1968417d-11
hfp_eps:	oct	760134224171,000000000000
one:	dec	1.0d0
hfp_one:	oct	002040000000,000000000000
p0:	dec	.288539007275213810d01
hfp_p0:	oct	002134252166,176530650277
p1:	dec	.961800759210250522d00
hfp_p1:	oct	000754342230,541156441462
p2:	dec	.576584541348266310d00
hfp_p2:	oct	000447154133,107411741772
p3:	dec	.434255940790007142d0
hfp_p3:	oct	000336255455,574455321266
square_root_half:
	dec	7.071067811865475244008d-01
hfp_square_root_half:
	oct	000552023631,477473631102
square_root_two:
	dec	1.414213562373095048801d+00
hfp_square_root_two:
	oct	002055202363,147747363110

	end
