" ******************************************
" *                                        *
" * Copyright, (C) Honeywell Limited, 1985 *
" *                                        *
" ******************************************
	name	double_tangent_
" Modification history:
"	Written by H. Hoover, M. Mabey, and B. Wong, April 1985,
"	based on GCOS routine '7nav'.
"
" Function:  Approximate to double precision the tangent or cotangent of an
"	angle given in degrees or radians.
"
" Entry:	through the appropriately named entry point with:
" 	EAQ = the angle whose tangent is desired.
"	PR2 = the address of a 14 word, even-word aligned scratch area.
"	      6 words are used in this program and 14 are used by the
"	      routine "double_principal_angle_".  The storage for
"	      double_tangent_ and double_principal_angle_ overlap.
"	PR3 = the return address.
"
" Exit:	EAQ = the desired tangent or cotangent.
"
" Uses:	X0, X1, X2, X3.
"	X0 = saves a return address from double_principal_angle_ routines
"	X1 = shift (returned by double_principal_angle_ routines)
"	X2 = indicates BFP or HFP mode - all of the floating point math
"	     routines use this register for the same thing.
"	X3 = indicates Tangent or Cotangent function
"	The double_principal_angle_ routines use registers X1 and X2.


	segref	math_constants_,max_value,one_degree,quarter_pi
	segref	double_principal_angle_,double_principal_radians_,double_principal_degrees_

	equ	BFP,0
	equ	HFP,2
	equ	Cotangent,-1
	equ	Tangent,1
	equ	sign,0
	equ	x,0
	equ	xx,2
	equ	q,4

	segdef	double_cotangent_degrees_,hfp_double_cotangent_degrees_
	segdef	double_cotangent_radians_,hfp_double_cotangent_radians_
	segdef	double_tangent_degrees_,hfp_double_tangent_degrees_
	segdef	double_tangent_radians_,hfp_double_tangent_radians_


hfp_double_cotangent_degrees_:
	eax2	HFP		" 2 word offset for HFP constants
	tra	cotangent_degrees

double_cotangent_degrees_:
	eax2	BFP		" no offset for BFP constants

cotangent_degrees:
	fad	=0.0,du		" normalize input
	eax1	0		" initialize X1 := shift = 1
	dfcmg	forty_five,x2
	tmoz	2,ic		" if abs (angle) > 45:
				"   call double_principal_degrees_
	  tsx0	double_principal_degrees_

	dfcmg	eps1,x2		" if conversion to radians underflows
	tmi	infinity		"   return (infinity (degrees))
				" else:
	dfmp	one_degree,x2	"   EAQ := degrees * one_degree

	canx1	=1,du
	tnz	3,ic		" if shift = 0 | shift = 2:
	  eax3	Cotangent		"   X3 := Cotangent
	  tra	part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, degrees*one_degree))
				" else if shift = 1 | shift = 3
	eax3	Tangent		"   X3 := Cotangent
	fneg	0		"   EAQ := -degrees*one_degree
	tra	part_tan_or_cot	"   return (part_tan_or_cot (Tangent, -(degrees*one_degree)))


hfp_double_cotangent_radians_:
	eax2	HFP		" 2 word offset for HFP constants
	tra	cotangent_radians

double_cotangent_radians_:
	eax2	BFP		" no offset for BFP constants

cotangent_radians:
	fad	=0.0,du		" normalize input
	dfcmg	quarter_pi,x2
	tpl	3,ic		" if abs (angle) > quarter_pi:
	  eax3	Cotangent		"   X3 := Cotangent
	  tra	part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, radians)
				" call double_principal_radians_
	tsx0	double_principal_radians_

	canx1	=1,du
	tnz	3,ic		" if shift = 0 | shift = 2:
	  eax3	Cotangent		"   X3 := Cotangent
	  tra	part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, radians))
				" else if shift = 1 | shift = 3
	eax3	Tangent		"   X3 := Cotangent
	fneg	0		"   EAQ := -radians
	tra	part_tan_or_cot	"   return (part_tan_or_cot (Tangent, -radians))


hfp_double_tangent_degrees_:
	eax2	HFP		" 2 word offset for HFP constants
	tra	tangent_degrees

double_tangent_degrees_:
	eax2	BFP		" no offset for BFP constants

tangent_degrees:
	fad	=0.0,du		" normalize input
	eax1	0		" initialize X1 := shift = 1
	dfcmg	forty_five,x2
	tmoz	2,ic		" if abs (angle) > 45:
				"   call double_principal_degrees_
	  tsx0	double_principal_degrees_

	dfcmg	eps1,x2		" if conversion to radians underflows
	tpl	2,ic
	  fld	=0.0,du	  	"   then use zero
				" else:
	dfmp	one_degree,x2	"   EAQ := degrees * one_degree

	canx1	=1,du
	tnz	3,ic		" if shift = 0 | shift = 2:
	  eax3	Tangent		"   X3 := Tangent
	  tra	part_tan_or_cot	"   return (part_tan_or_cot (Tangent, degrees*one_degree))
				" else if shift = 1 | shift = 3
	eax3	Cotangent		"   X3 := Cotangent
	fneg	0		"   EAQ := -radians
	tra	part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, -(degrees*one_degree)))


hfp_double_tangent_radians_:
	eax2	HFP		" 2 word offset for HFP constants
	tra	tangent_radians

double_tangent_radians_:
	eax2	BFP		" no offset for BFP constants

tangent_radians:
	fad	=0.0,du		" normalize input
	dfcmg	quarter_pi,x2
	tpl	3,ic		" if abs (angle) <= quarter_pi:
	  eax3	Tangent
	  tra	part_tan_or_cot	"   return (part_tan_or_cot (Tangent, radians))

				" call double_principal_radians_
	tsx0	double_principal_radians_

	canx1	=1,du
	tnz	3,ic		" if shift = 0 | shift = 2:
	  eax3	Tangent		"   X3 := Tangent
	  tra	part_tan_or_cot	"   return (part_tan_or_cot (Tangent, radians))
				" else if shift = 1 | shift = 3
	eax3	Cotangent		"   X3 := Cotangent
	fneg	0		"   EAQ := -radians
"	tra	part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, -radians))


" Procedure 'part_tan_or_cot' (function, x) calculates either 'tan(x)'
" or 'cot(x)' to double precision accuracy, for 'x' in [-pi/4, pi/4].
" Argument 'x' is given in the EAQ and the function to be calculated is
" given in X3.  X3=-1 indicates 'cot' and X3=1 indicates 'tan'.

part_tan_or_cot:
	fcmg	eps2		" if abs(x) < 5e-10:
	tpl	use_polynomial
	  cmpx3	Tangent,du	"   if function = Tangent
	  tnz	3,ic
	    dfrd	0		"     then return (result)
	    tra	pr3|0
	  dfcmg	eps3,x2		"   else if 1/result overflows
	    tmoz	infinity		"     then return (infinity (result))
	    dfdi  one,x2    	"     else return (1/result)
	    tra	pr3|0

use_polynomial:
	dfstr	pr2|x
	dfmp	pr2|x		" calculate xx = x*x
	dfstr	pr2|xx
	dfad	q3,x2		" calculate q = q(xx)
	dfmp	pr2|xx
	dfad	q2,x2
	dfmp	pr2|xx
	dfad	q1,x2
	dfmp	pr2|xx
	dfad	q0,x2
	dfstr	pr2|q
	dfld	pr2|xx		" calculate p(xx)
	dfmp	p4,x2
	dfad	p3,x2
	dfmp	pr2|xx
	dfad	p2,x2
	dfmp	pr2|xx
	dfad	p1,x2
	dfmp	pr2|xx
	dfad	p0,x2
	dfmp	pr2|x		" calculate p = x*p(xx)
	cmpx3	Tangent,du
	tnz	3,ic		" if function = Tangent
	  dfdv	pr2|q		" then return (p/q)
	  tra	pr3|0
	dfdi	pr2|q		" else return (q/p)
	tra	pr3|0


infinity:
	fst	pr2|sign
	fld	max_value
	fad	max_value		" signal overflow
	dfld	max_value
	fszn	pr2|sign		" if sign >= 0
	tpl	pr3|0		" then return (max_value)
	fneg	0		" else return (-max_value)
	tra	pr3|0


" Constants:

	even
eps1:	dec	8.418858142948452884d-38
	oct	402162456701,514360373670	" 2.670821537926801391d-154
eps2:	dec	5.0d-10
	oct	762104560277,000000000000
eps3:	oct	404400000000,000000000001
	oct	404040000000,000000000001
forty_five:
	dec	45.0d0
	oct	004132000000,000000000000
one:	dec	1.d0
	oct	002040000000,000000000000
p0:	dec	 7.61637646334745151d5
	oct	012563711322,566143202611
p1:	dec	-1.045644297708972282d5
	oct	013714742710,772421516417
p2:	dec	 2.990139654186652781d3
	oct	006565610740,140350661251
p3:	dec	-2.195407375452258719d1
	oct	005724057016,450513240522
p4:	dec	 2.229548191006262686d-2
	oct	776266512016,646767353442
q0:	dec	 7.61637646334745151d5
	oct	012563711322,566143202611
q1:	dec	-3.584436452158122785d5
	oct	013520765055,323105715467
q2:	dec	 2.091966854815805879d4
	oct	010243336531,137433252357
q3:	dec	-3.069448235422934591d2
	oct	007731503420,013262557251

	end
