/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-07-16,Farley), approve(87-07-17,MCR7735),
     audit(87-07-20,Fawcett), install(87-07-22,MR12.1-1044):
     Changed to allow PAD (\177) characters to pass through without being
     interpreted.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
oc_trans_output_:
     procedure (In_ptr, In_len, In_proc, Out_ptr, Out_words, Line_leng, Cont);

/* Written by C. Hornig, April 1982 */
/* Modified 830620 to support consoles with different line lengths and to 
   delete support of non-ASCII console types... -E. A. Ranzenbach */

dcl  (In_ptr, Out_ptr) ptr parameter;
dcl  (In_len, In_proc) fixed bin (21) parameter;
dcl  Out_words fixed bin (19) parameter;
dcl  Cont bit (1) aligned parameter;
dcl  Line_leng fixed bin (17) parameter;

dcl  in_string char (In_len) based (In_ptr);
dcl  out_string char (256) based (Out_ptr);

dcl  c char (1) aligned;
dcl  b fixed bin (9);
dcl  out_pos fixed bin;
dcl  out_proc fixed bin (21);
dcl  n fixed bin;
dcl  done bit (1) aligned;

dcl  (byte, copy, divide, hbound, lbound, length, mod, rank, string, substr, unspec) builtin;
%page;
	In_proc, Out_words = 0;
	out_proc, out_pos = 0;

	if In_len <= 0 then return;			/* ignore null string */

	if Cont then do;
	     substr (out_string, 1, 2) = "\c";
	     out_proc, out_pos = 2;
	     Cont = "0"b;
	     end;

	done = "0"b;
	do while ((In_proc < In_len) & ^done);
	     c = substr (in_string, In_proc + 1, 1);
	     b = rank (c);

	     if /* case */ (b >= 32) & (b <= 127) then do;
		call inc_pos (1);
		goto copy_char;
		end;

	     else if (b < lbound (cc, 1)) | (b > hbound (cc, 1)) then do;
cc (11):
cc (12):
		call inc_pos (4);
		call inc_proc (4);
		begin;
dcl  oe (4) char (1) unaligned;

		     oe (1) = "\";
		     unspec (oe (2)) = "06"b3 || substr (unspec (c), 1, 3);
		     unspec (oe (3)) = "06"b3 || substr (unspec (c), 4, 3);
		     unspec (oe (4)) = "06"b3 || substr (unspec (c), 7, 3);
		     substr (out_string, out_proc - 3, 4) = string (oe);
		end;
		goto done_cc;
		end;

	     else goto cc (b);

cc (8):						/* BS */
	     if out_pos > 0 then out_pos = out_pos - 1;
	     goto copy_char;

cc (9):						/* HT */
	     n = 1 + mod (-out_pos - 1, 10);
	     call inc_pos (n);
	     call inc_proc (n);
	     substr (out_string, out_proc - n + 1, n) = "";
	     goto done_cc;

cc (10):						/* NL */
	     call add_nl;
	     done = "1"b;
	     goto done_cc;

cc (13):						/* CR */
	     out_pos = 0;
	     goto copy_char;

cc (7):						/* BEL */
copy_char:
	     call inc_proc (1);
	     substr (out_string, out_proc, 1) = c;

done_cc:
	     In_proc = In_proc + 1;
	end;

finish_up:
	Out_words = divide (out_proc + 3, 4, 19, 0);
	n = 4 * Out_words - out_proc;
	substr (out_string, out_proc + 1, n) = copy (byte (127), n);

	return;

/* * * * * * * * * INC_PROC * * * * * * * * */

inc_proc:
     procedure (N);
dcl  N fixed bin parameter;

	if out_proc + N > length (out_string) then goto finish_up;
	out_proc = out_proc + N;
	return;
     end inc_proc;

/* * * * * * * * * * INC_POS * * * * * * * * * */

inc_pos:
     procedure (N);
dcl  N fixed bin parameter;

	if out_pos + N > Line_leng then do;
	     Cont = "1"b;
	     call add_nl;
	     goto finish_up;
	     end;
	out_pos = out_pos + N;
	return;
     end inc_pos;

/* * * * * * * * * * ADD_NL * * * * * * * * * * */

add_nl:
     procedure;
	call inc_proc (2);
	substr (out_string, out_proc - 1, 2) = byte (13) || byte (10);
	out_pos = 0;
	return;
     end add_nl;

     end oc_trans_output_;
