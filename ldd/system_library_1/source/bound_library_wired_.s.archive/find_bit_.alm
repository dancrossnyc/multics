" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1986 *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(86-05-08,GDixon), approve(86-05-16,MCR7357),
"     audit(86-07-10,Farley), install(86-07-17,MR12.0-1097):
"     Created find_bit_ subroutine.
"                                                      END HISTORY COMMENTS

" *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *
"
" Name:  find_bit_
"
"      This subroutine uses the EIS compare bit (CMPB) and test character and
" translate (TCT) instructions to search for an on or off bit in a bit string.
" The bit index of the first bit found in the desired state is returned.
" Searching is performed either from the left (beginning) or from the
" right-hand side (end) of the string.  The code uses a pre-defined
" test/translate table for the TCT portion of the scanning.
"
" Entry:	find_bit_$first_on
"
" Function:  This entrypoint returns the index (bit position) of the first
" (leftmost) bit which is on ("1"b) in a bit string.
" 
" Syntax:
"   dcl find_bit_$first_on entry (bit(*)) returns (fixed bin(24)) reducible;
"   index = find_bit_$first_on (bit_string);
" 
" Arguments:
" bit_string
"    is the bit string to be examined. (In)
" index
"    is the bit position of the first "1"b bit within the bit string.  If no
"    "1"b bits are found, then 0 is returned. (Out)
"
" Entry:	find_bit_$first_off
"
" Function:  This entrypoint returns the index (bit position) of the first
" (leftmost) bit which is off ("0"b) in a bit string.
" 
" Syntax:
"   dcl find_bit_$first_off entry (bit(*)) returns (fixed bin(24)) reducible;
"   index = find_bit_$first_off (bit_string);
" 
" Arguments:
" bit_string
"    is the bit string to be examined. (In)
" index
"    is the bit position of the first "0"b bit within the bit string.  If no
"    "0"b bits are found, then 0 is returned. (Out)
"
" Entry:	find_bit_$last_on
"
" Function:  This entrypoint returns the index (bit position) of the last
" (rightmost) bit which is on ("1"b) in a bit string.
" 
" Syntax:
"   dcl find_bit_$last_on entry (bit(*)) returns (fixed bin(24)) reducible;
"   index = find_bit_$last_on (bit_string);
" 
" Arguments:
" bit_string
"    is the bit string to be examined. (In)
" index
"    is the bit position of the last "1"b bit within the bit string.  If no
"    "1"b bits are found, then 0 is returned. (Out)
"
" Entry:	find_bit_$last_off
"
" Function:  This entrypoint returns the index (bit position) of the last
" (rightmost) bit which is on ("0"b) in a bit string.
" 
" Syntax:
"   dcl find_bit_$last_on entry (bit(*)) returns (fixed bin(24)) reducible;
"   index = find_bit_$last_off (bit_string);
" 
" Arguments:
" bit_string
"    is the bit string to be examined. (In)
" index
"    is the bit position of the last "0"b bit within the bit string.  If no
"    "0"b bits are found, then 0 is returned. (Out)
"
" *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *


	include	its	

" -----------------------------------------------------------------------------
" Segname definitions: 
" -----------------------------------------------------------------------------

	name	find_bit_

	segdef	first_on
	segdef	first_off
	segdef	last_on
	segdef	last_off

" -----------------------------------------------------------------------------
" Data Values and Register name assignments: 
" -----------------------------------------------------------------------------

	equ	arg_list,0	" pr0 -> argument list
	equ	bit_string,1	" pr1 -> bit_string
	equ	index,2		" pr2 -> result          (after return)
	equ	bit_length,2	" pr2 -> length(bit_string)
				"		    (before return)
	equ	byte_str,3	" pr3 -> 1st full byte of bit_string
	equ	table,4		" pr4 -> tct table
	equ	test_bit,5	" pr5 -> type of bit we are looking
				"        for (either on or off)
	equ	direction,0	  " x0 = entrypoint indicator.
	equ	 FIRST,0		  "        find first desired bit
	equ	 LAST,1		  "	 find last  desired bit
	equ	bits_prior_1st_byte,1 " x1 = bits prior to first full byte
				  "      of bit_string.
	equ	bits_after_Nth_byte,2 " x2 = bits after last full byte
				  "      of bit_string.
	equ	do_index,3	  " x3 = a do group index.
	equ	table_char,4	  " x4 = tctr translated result char.
	equ	BITS_PER_BYTE,9

	even			" Selected bit values: 
on_bit:				" on  bit ("1"b), one of the possible
	oct	400000000000	"   values we can search for.
off_bit:				" off bit ("0"b), the other possible
	oct	000000000000	"   value we can search for.

desc_length_mask:			" ANDing mask to extract char string
	oct	000077777777	"   length from an argument descriptor.
string_index_mask:			" ANDing mask to extract char offset
	oct	000777777777	"   from result of TCT instruction.

" -----------------------------------------------------------------------------
" Code for find_bit_$(first last)_(on off):
"    Setup entrypoint indicator, table pointer, and test bit pointer.
"
"  Out:	pr(table)    -> TCT test/translate table for selecting first/last 
"		      on/off bit from a string of full bytes.
"	pr(test_bit) -> type of bit we are looking for (on or off).
"	x(direction)  = choice of first/last, based upon entrypoint.
"
" -----------------------------------------------------------------------------
" first_on: entry (bit_string) returns(index);
" -----------------------------------------------------------------------------
first_on:	ldx	direction,FIRST,du
	epp	table,first_on_bit_table
	epp	test_bit,on_bit
	tra	common

" -----------------------------------------------------------------------------
" first_off: entry (bit_string) returns(index);
" -----------------------------------------------------------------------------
first_off:
	ldx	direction,FIRST,du 
	epp	table,first_off_bit_table
	epp	test_bit,off_bit
	tra	common

" -----------------------------------------------------------------------------
" last_on: entry (bit_string) returns(index);
" -----------------------------------------------------------------------------
last_on:	ldx	direction,LAST,du
	epp	table,last_on_bit_table
	epp	test_bit,on_bit
	tra	common

" -----------------------------------------------------------------------------
" last_off: entry (bit_string) returns(index);
" -----------------------------------------------------------------------------
last_off: ldx	direction,LAST,du
	epp	table,last_off_bit_table
	epp	test_bit,off_bit
	tra	common

" -----------------------------------------------------------------------------
" Get address of input and output parm.
"   In:	pr(arg_list)         -> the argument list.
"  Out:	pr(bit_string)       -> bit string to be searched (input parm).
"	pr(index)		 -> bit index within string  (output parm).
" -----------------------------------------------------------------------------
common:
	epp	bit_string,arg_list|2,* 
				" get addr(bit_string).
	epp	index,arg_list|4,*	" get addr(index).

" -----------------------------------------------------------------------------
" Since the TCT instruction is byte-oriented, we must special-case bits which
" precede the first full byte, and which follow the last full byte of
" bit_string.  Compute number of bits which precede the first full byte of the
" bit_string.
"   In:	pr(bit_string)        -> bit string to be searched.
"  Out:	x(bits_prior_1st_byte) = bits preceding first full byte of bit_string
" -----------------------------------------------------------------------------
	ldx	bits_prior_1st_byte,0,du
	epaq	bit_string|0	" get bit offset of addr(bit_string)
	anq	its.bit_offset_mask,dl	
				" QL now contains bit offset
	div	BITS_PER_BYTE,dl	" test if bit_string is byte_aligned
	cmpa	0,dl		" mod(bit_offset,9) = 0?
	tze	get_length	" yes.  There are no bits before byte
	neg
	ada	BITS_PER_BYTE,dl
	eax	bits_prior_1st_byte,0,al
				" number of bits in bit_string which
				" precede the first full byte.

" -----------------------------------------------------------------------------
" Get length (bit_string).  Because we don't want to pay the expense of pushing
" a stack frame, this program writes in only one word of memory, its output
" argument (index).  length(bit_string) will be saved temporarily in index.
"
" NB: bit_length and index are two names for the same pointer register 
"     (pr2).  When the location pointed by pr2 contains length(bit_string), it
"     is referenced as bit_length|0.  When it contains the resulting index
"     within bit_string, it is referenced as index|0.
"   In:	pr(arg_list)         -> the argument list.
"  Out:	pr(bit_length)       -> length(bit_string).
" -----------------------------------------------------------------------------
get_length: 
	lxl3	arg_list|0	" get length(bit_string):  
	cmpx3	4,du		"   compensate for arg lists which
	tze	no_parent		"   have a parent_ptr.
parent:	 			" bit_string descriptor is 1st in 
	ldq	arg_list|8,*	"   arg_list (after bit_string arg,
				"   index arg and parent_ptr).
	tra	compute_length
no_parent:
	ldq	arg_list|6,*	" bit_string descriptor is 1st in
				"   arg_list (after bit_string arg
				"   and index arg).
compute_length:
	anq	desc_length_mask	" mask out all but bit length from desc
	stq	bit_length|0

" -----------------------------------------------------------------------------
" Branch depending upon whether search is for first (left-to-right) or 
" last (right-to-left) on/off bit.
"   In:	x(direction) = choice of first/last.
" -----------------------------------------------------------------------------
	tra	direction_vector,direction
direction_vector:
	tra	find_first_in_lead_bits
	tra	find_last_in_trail_bits

" -----------------------------------------------------------------------------
" LOOKING FOR FIRST BIT (left-to-right search): 
" Loop thru bits prior to first full byte: check for desired (on or off) bit.
"   In:	x(bits_prior_1st_byte) = bits preceding first full byte of 
"			     bit_string.  These must be processed one at
"			     a time.  Full bytes are processed later.
"	pr(bit_length) 	  -> length(bit_string).
"	pr(bit_string)	  -> bit_string to be searched.
"	pr(test_bit)	  -> bit value searching for (on or off).
"  Out:	q-reg		   = index in bit_string of desired bit, if match
"			     occurs.
" -----------------------------------------------------------------------------
find_first_in_lead_bits:
fflb:	eaq	0,bits_prior_1st_byte
	tmoz	find_first_in_bytes " Byte-aligned bit string?  Skip
				"    checking of leading bits.
				" if bits_prior_first_byte > 0 then
	qrs	18		" do do_index = min(length(bit_string),
	cmpq	bit_length|0	"    bits_prior_1st_byte) to 0 by -1
	tmi	fflb_long_bit_string
	ldq	bit_length|0	
fflb_long_bit_string: 		
	eax	do_index,1,ql
	ldq	1,dl
fflb_loop: 
	sbx	do_index,1,du	
	tze	find_first_in_bytes	" Leading bits exhausted, no match.
	even
	cmpb	(pr,ql),(pr)	" Compare leading bit with test_bit.
	descb	bit_string|-1(35),1	"  substr(bit_string,q-reg,1)=test_bit?
	descb	test_bit|0,1
	tze	match		" Yes, match found.
	adq	1,dl		" No, match not found.  Continue loop.
	tra	fflb_loop	

" -----------------------------------------------------------------------------
" Desired bit not found.  Compute number of full bytes (byte-aligned bytes)
" in bit_string.
"   In:	x(bits_prior_1st_byte) = bits preceding first full byte of bit_string
"	pr(bit_length)	  -> length(bit_string).
"  Out:	x(bits_after_Nth_byte) = bits following last full byte of bit_string.
"	q-reg		   = count of full bytes in bit_string.
" -----------------------------------------------------------------------------
find_first_in_bytes: 		" Compute bits in full bytes in a-reg: 
	eaa	0,bits_prior_1st_byte
	ars	18		"   Put bits_prior_1st_byte into a-reg.
	neg			"   Negate value for subtraction.
	ada	bit_length|0	"   Subtract from length(bit_string).
	lrl	36		"   Put result in q-reg for division.
	div	BITS_PER_BYTE,dl
	eax	bits_after_Nth_byte,0,al
				" Remainder of division is bits after
				"   last byte.
	cmpq	0,dl		" Are there any full bytes?
	tze	find_first_in_trail_bits
				" No.  Branch to test trailing bits.

" -----------------------------------------------------------------------------
" Test full bytes to find first containing desired bit, using TCT instruction.
"   In:	pr(bit_length)	  -> length(bit_string).
"	pr(bit_string)	  -> bit_string.
"	x(bits_prior_1st_byte) = bits preceding first full byte of bit_string
"	q-reg		   = count of full bytes in bit_string.
"	pr(table)		  -> test/translate table appropriate for desired
"			     bit and direction.
"  Out:	pr(index)		  -> result of TCT instruction, if match found.
"	pr(bit_length)	  -> length(bit_string), if match not found.
" -----------------------------------------------------------------------------
	lda 	bit_length|0	" Save full length of bit_string in 
				"   a-reg while bit_length loc holds
				"   result of tct instruction.
	epp	byte_str,bit_string|0 
	abd	byte_str|0,bits_prior_1st_byte
				" Compute loc of first full byte
	even
	tct	(pr,rl),fill(000)	" Look for first instance of desired
	desc9a	byte_str|0,ql	"   (on/off) bit.
	arg	table|0
	arg	index|0		"    result goes into index loc
	ttf	store_tct_result	" Match found in some byte?  We won!
	sta	bit_length|0	" Restore length(bit_string) into 
				" storage to undo temp-save done above.

" -----------------------------------------------------------------------------
" Loop thru bits after last full byte, checking for desired (on/off) bit.
"   In:	x(bits_after_Nth_byte) = bits following last full byte of bit_string.
"	pr(bit_length)	  -> length(bit_string).
"	pr(bit_string)	  -> bit_string to be searched.
"	pr(test_bit)	  -> bit value searching for (on or off).
"  Out:	q-reg		   = index of desired bit, if match found.
" -----------------------------------------------------------------------------
find_first_in_trail_bits:
fftb:	eaa	0,bits_after_Nth_byte
				" Are there any bits after last byte?
	tmoz	no_match		" No, no match found.
	ars	18		" Yes, a-reg contains number of bits.
	neg			" a-reg = length(bit_string) - 
	ada	bit_length|0	"         bits_after_Nth_byte + 1
				"       = index of 1st bit after
	ada	1,dl		"         Nth byte.
	lrl	36		" Shift result to q-reg
	eax	do_index,1,bits_after_Nth_byte
fftb_loop: 			" do do_index = bits_after_Nth_byte
	sbx	do_index,1,du	"    to 0 by -1
				
	tze	no_match		" Trailing bits exhausted, no match.
	even
	cmpb	(pr,ql),(pr)	" Compare trailing bit with test_bit.
	descb	bit_string|-1(35),1	"  substr(bit_string,q-reg,1)=test_bit?
	descb	test_bit|0,1
	tze	match		" Match found.
	adq	1,dl
	tra	fftb_loop		" No match found-- loop.

" -----------------------------------------------------------------------------
" Matching bit found in full byte.
" Convert tct result to bit index, stored in q-reg.
"   In:	pr(index)		  -> result of TCT instruction.
"	x(bits_prior_1st_byte) = bits preceding first full byte of bit_string
"  Out:	q-reg		   = index in bit_string of desired bit.
" -----------------------------------------------------------------------------
store_tct_result: 
	ldq	index|0		" Match found, compute bit index: 
	anq	string_index_mask	"   Start with byte offset (not index)
	mpy	BITS_PER_BYTE,dl	"   * 9 = bit offset of selected byte
	lda	index|0		"   + translated byte value (index of
	arl	27		"     first desired bit within byte
	sta	index|0		"     copied from test/translate 
	adq	index|0		"     table by TCT into 1st byte of
				"     TCT result)
	stz	index|0		"   + bits prior to first byte.
	sxl	bits_prior_1st_byte,index|0
	adq	index|0

" -----------------------------------------------------------------------------
" Success return point:
"   In:	q-reg		   = index in bit_string of desired bit.
"  Out:	pr(index)		  -> index in bit_string of desired bit (result).
" -----------------------------------------------------------------------------
match: 	stq	index|0
	short_return

" -----------------------------------------------------------------------------
" Failure return point:
"  Out:	pr(index)		  -> 0 (desired bit not found).
" -----------------------------------------------------------------------------
no_match: stz	index|0
	short_return

" -----------------------------------------------------------------------------
" LOOKING FOR LAST BIT (right-to-left search): 
" Compute how many bits of bit_string follow the last full byte.
"   In:	x(bits_prior_1st_byte) = bits preceding first full byte of 
"			     bit_string.  These must be processed 
"			     separately from full (byte-aligned) bytes.
"	pr(bit_length) 	  -> length(bit_string).
"  Out:	x(bits_after_Nth_byte) = bits following last full byte of bit_string.
"	a-reg		   = count of full bytes in bit_string.
" -----------------------------------------------------------------------------
find_last_in_trail_bits:
fltb:	ldx	bits_after_Nth_byte,0,du   " assume no trailing bits.
	eaa	0,bits_prior_1st_byte      " length(bit_string) -
	ars	18		       "   bits_prior_1st_byte 
	neg
	ada	bit_length|0	       
	tmi	find_last_in_lead_bits     " Negative?  No bits follow.
	lrl	36
	div	BITS_PER_BYTE,dl	       " mod(length,9) =  
	eax	bits_after_Nth_byte,0,al   "   bits after last full byte
	lls	36		       " a-reg = number of full bytes

" -----------------------------------------------------------------------------
" Loop thru bits after last full byte, checking for a desired (on/off) bit
"   In:	pr(bit_length) 	  -> length(bit_string).
"  	x(bits_after_Nth_byte) = bits following last full byte of bit_string.
"	pr(bit_string)	  -> bit_string to be searched.
"	pr(test_bit)	  -> bit value searching for (on or off).
"  Out:	q-reg		   = index of desired bit, if match found.
" -----------------------------------------------------------------------------
	ldq	bit_length|0
	eax	do_index,1,bits_after_Nth_byte
fltb_loop: 			" do do_index = bits_after_Nth_byte
	sbx	do_index,1,du	"    to 0 by -1
	tze	find_last_in_bytes
				" Trailing bits exhausted, no match.
	even
	cmpb	(pr,ql),(pr)	" Compare trailing bit with test_bit.
	descb	bit_string|-1(35),1	"  substr(bit_string,q-req,1)=test_bit?
	descb	test_bit|0,1
	tze	match		" Match found.
	sbq	1,dl
	tra	fltb_loop		" No match found.  Continue loop.

" -----------------------------------------------------------------------------
" Test full bytes to find last containing desired bit, using TCTR instruction.
"   In:	a-reg		   = count of full bytes in bit_string.
"	pr(bit_length)	  -> length(bit_string).
"	pr(bit_string)	  -> bit_string.
"	x(bits_prior_1st_byte) = bits preceding first full byte of bit_string
"	pr(table)		  -> test/translate table appropriate for desired
"			     bit and direction.
"  Out:	pr(index)		  -> result of TCT instruction, if match found.
"	pr(bit_length)	  -> length(bit_string), if match not found.
"	q-reg		   = count of full bytes in bit_string.
" -----------------------------------------------------------------------------
find_last_in_bytes: 
	lrl	36		" put number full bytes in q-reg
	lda 	bit_length|0	" Save length (bit_string) in a-reg
				"   while bit_length holds tctr result.
	epp	byte_str,bit_string|0 
	abd	byte_str|0,bits_prior_1st_byte
				" Compute loc of first full byte.
	even
	tctr	(pr,rl),fill(000)	" Look for last instance of desired
	desc9a	byte_str|0,ql	"   (on/off) bit.
	arg	table|0
	arg	index|0		"    result goes into index location.
	ttf	store_tctr_result	" Match found in some byte?  We won!
	sta	bit_length|0	" Restore length(bit_string) into 
				" storage to undo temp-save done above.

" -----------------------------------------------------------------------------
" Loop thru bits prior to first full byte, checking for desired (on/off) bit.
"   In:	x(bits_prior_1st_byte) = bits preceding first full byte of 
"			     bit_string.
"	pr(bit_length) 	  -> length(bit_string).
"	pr(bit_string)	  -> bit_string to be searched.
"	pr(test_bit)	  -> bit value searching for (on or off).
"  Out:	q-reg		   = index in bit_string of desired bit, if match
"			     occurs.
" -----------------------------------------------------------------------------
find_last_in_lead_bits: 
fllb:	eaq	0,bits_prior_1st_byte
	tmoz	no_match		" No leading bits? Then desired bit
				"   not found.
	qrs	18
	cmpq	bit_length|0	" do q-reg = min (length(bit_string),
	tmi	fllb_long_bit_string"    bits_prior_to_1st_byte) to 0 by -1
	ldq	bit_length|0	
fllb_long_bit_string: 		
	adq	1,dl
fllb_loop: 
	sbq	1,dl
	tmoz	no_match		" Leading bits exhausted, no match.
	even
	cmpb	(pr,ql),(pr)	" Compare leading bit with test_bit.
	descb	bit_string|-1(35),1	"  substr(bit_string,q-reg,1)=test_bit?
	descb	test_bit|0,1
	tze	match		" Yes, match found.
	tra	fllb_loop		" No, match not found.  Continue loop.

" -----------------------------------------------------------------------------
" Matching bit found in full byte.
" Convert tctr result to bit index, stored in q-reg.
"   In:	pr(index)		  -> result of TCTR instruction.
"	x(bits_prior_1st_byte) = bits preceding first full byte of bit_string
"	q-reg		   = count of full bytes in bit_string.
"  Out:	q-reg		   = index in bit_string of desired bit.
" -----------------------------------------------------------------------------
store_tctr_result:
	ldx	table_char,index|0
				" Save selected char from
				"   test/translate table which TCTR
				"   instruction put in 1st byte of
				"   TCTR result.
	lda	index|0		" a-reg = byte_offset_from_right_end
	ana	string_index_mask	" 
	stq	index|0		" q-reg = full_bytes_in_bit_string
				"  (saved at find_last_in_bytes above)

	sba	index|0		"   full_bytes_in_bit_string
	neg			" - byte_offset_from_right_end
	sba	1,dl		" - 1
				" = bytes_before_wanted_byte

	lrl	36		" * 9 
	mpy	BITS_PER_BYTE,dl	" = bits_in_bytes_before_wanted_byte

	eaa	0,table_char	" + translated byte value (index of
	arl	27		"     first desired bit within byte)
	sta	index|0		" = bit index of wanted bit, excluding
	adq	index|0		"   bits prior to first byte.

	stz	index|0		" + bits prior to first byte.
	sxl	bits_prior_1st_byte,index|0
	adq	index|0		" = bit index of wanted bit (in q-reg)

	tra 	match

" -----------------------------------------------------------------------------
" TCT test/translate tables:
"
" Each of the following test/translate tables is designed to work with the
" TCT and TCTR instructions.  The bit string being examined is broken up into
" full bytes.  The byte value (rank) of each byte is used as an index into the
" 512 entry test/translate table.  The numeric value stored in the table entry
" gives the index within the byte of the desired bit (eg, the first on bit
" within the byte).
" 
" For example, when looking for the first on bit, suppose the byte being
" tested has the value 003 (octal).  Using PL/I bit string notation, this is
" expressed as "003"b3 = "000000011"b.  The index of the first on bit
" within the byte is 8.  8 (decimal) = "010"b3.
"
" Therefore, the number 8 (= "010"b3) is stored in the test/translate table
" entry corresponding to the byte "003"b in the table below.
" -----------------------------------------------------------------------------

	even
first_on_bit_table:
	oct	000011010010,007007007007	" 000-007  (entry 003
					"           has value 010)
	oct	006006006006,006006006006	" 010-017
	oct	005005005005,005005005005	" 020-027
	oct	005005005005,005005005005	" 030-037
	oct	004004004004,004004004004	" 040-047
	oct	004004004004,004004004004	" 050-057
	oct	004004004004,004004004004	" 060-067
	oct	004004004004,004004004004	" 070-077
	oct	003003003003,003003003003	" 100-107
	oct	003003003003,003003003003	" 110-117
	oct	003003003003,003003003003	" 120-127
	oct	003003003003,003003003003	" 130-137
	oct	003003003003,003003003003	" 140-147
	oct	003003003003,003003003003	" 150-157
	oct	003003003003,003003003003	" 160-167
	oct	003003003003,003003003003	" 170-177
	oct	002002002002,002002002002	" 200-207
	oct	002002002002,002002002002	" 210-217
	oct	002002002002,002002002002	" 220-227
	oct	002002002002,002002002002	" 230-237
	oct	002002002002,002002002002	" 240-247
	oct	002002002002,002002002002	" 250-257
	oct	002002002002,002002002002	" 260-267
	oct	002002002002,002002002002	" 270-277
	oct	002002002002,002002002002	" 300-307
	oct	002002002002,002002002002	" 310-317
	oct	002002002002,002002002002	" 320-327
	oct	002002002002,002002002002	" 330-337
	oct	002002002002,002002002002	" 340-347
	oct	002002002002,002002002002	" 350-357
	oct	002002002002,002002002002	" 360-367
	oct	002002002002,002002002002	" 370-377
	oct	001001001001,001001001001	" 400-407
	oct	001001001001,001001001001	" 410-417
	oct	001001001001,001001001001	" 420-427
	oct	001001001001,001001001001	" 430-437
	oct	001001001001,001001001001	" 440-447
	oct	001001001001,001001001001	" 450-457
	oct	001001001001,001001001001	" 460-467
	oct	001001001001,001001001001	" 470-477
	oct	001001001001,001001001001	" 500-507
	oct	001001001001,001001001001	" 510-517
	oct	001001001001,001001001001	" 520-527
	oct	001001001001,001001001001	" 530-537
	oct	001001001001,001001001001	" 540-547
	oct	001001001001,001001001001	" 550-557
	oct	001001001001,001001001001	" 560-567
	oct	001001001001,001001001001	" 570-577
	oct	001001001001,001001001001	" 600-607
	oct	001001001001,001001001001	" 610-617
	oct	001001001001,001001001001	" 620-627
	oct	001001001001,001001001001	" 630-637
	oct	001001001001,001001001001	" 640-647
	oct	001001001001,001001001001	" 650-657
	oct	001001001001,001001001001	" 660-667
	oct	001001001001,001001001001	" 670-677
	oct	001001001001,001001001001	" 700-707
	oct	001001001001,001001001001	" 710-717
	oct	001001001001,001001001001	" 720-727
	oct	001001001001,001001001001	" 730-737
	oct	001001001001,001001001001	" 740-747
	oct	001001001001,001001001001	" 750-757
	oct	001001001001,001001001001	" 760-767
	oct	001001001001,001001001001	" 770-777
	
	even
first_off_bit_table:
	oct	001001001001,001001001001	" 000-007
	oct	001001001001,001001001001	" 010-017
	oct	001001001001,001001001001	" 020-027
	oct	001001001001,001001001001	" 030-037
	oct	001001001001,001001001001	" 040-047
	oct	001001001001,001001001001	" 050-057
	oct	001001001001,001001001001	" 060-067
	oct	001001001001,001001001001	" 070-077
	oct	001001001001,001001001001	" 100-107
	oct	001001001001,001001001001	" 110-117
	oct	001001001001,001001001001	" 120-127
	oct	001001001001,001001001001	" 130-137
	oct	001001001001,001001001001	" 140-147
	oct	001001001001,001001001001	" 150-157
	oct	001001001001,001001001001	" 160-167
	oct	001001001001,001001001001	" 170-177
	oct	001001001001,001001001001	" 200-207
	oct	001001001001,001001001001	" 210-217
	oct	001001001001,001001001001	" 220-227
	oct	001001001001,001001001001	" 230-237
	oct	001001001001,001001001001	" 240-247
	oct	001001001001,001001001001	" 250-257
	oct	001001001001,001001001001	" 260-267
	oct	001001001001,001001001001	" 270-277
	oct	001001001001,001001001001	" 300-307
	oct	001001001001,001001001001	" 310-317
	oct	001001001001,001001001001	" 320-327
	oct	001001001001,001001001001	" 330-337
	oct	001001001001,001001001001	" 340-347
	oct	001001001001,001001001001	" 350-357
	oct	001001001001,001001001001	" 360-367
	oct	001001001001,001001001001	" 370-377
	oct	002002002002,002002002002	" 400-407
	oct	002002002002,002002002002	" 410-417
	oct	002002002002,002002002002	" 420-427
	oct	002002002002,002002002002	" 430-437
	oct	002002002002,002002002002	" 440-447
	oct	002002002002,002002002002	" 450-457
	oct	002002002002,002002002002	" 460-467
	oct	002002002002,002002002002	" 470-477
	oct	002002002002,002002002002	" 500-507
	oct	002002002002,002002002002	" 510-517
	oct	002002002002,002002002002	" 520-527
	oct	002002002002,002002002002	" 530-537
	oct	002002002002,002002002002	" 540-547
	oct	002002002002,002002002002	" 550-557
	oct	002002002002,002002002002	" 560-567
	oct	002002002002,002002002002	" 570-577
	oct	003003003003,003003003003	" 600-607
	oct	003003003003,003003003003	" 610-617
	oct	003003003003,003003003003	" 620-627
	oct	003003003003,003003003003	" 630-637
	oct	003003003003,003003003003	" 640-647
	oct	003003003003,003003003003	" 650-657
	oct	003003003003,003003003003	" 660-667
	oct	003003003003,003003003003	" 670-677
	oct	004004004004,004004004004	" 700-707
	oct	004004004004,004004004004	" 710-717
	oct	004004004004,004004004004	" 720-727
	oct	004004004004,004004004004	" 730-737
	oct	005005005005,005005005005	" 740-747
	oct	005005005005,005005005005	" 750-757
	oct	006006006006,006006006006	" 760-767
	oct	007007007007,010010011000	" 770-777

	even
last_on_bit_table: 
	oct	000011010011,007011010011	" 000-007
	oct	006011010011,007011010011	" 010-017
	oct	005011010011,007011010011	" 020-027
	oct	006011010011,007011010011	" 030-037
	oct	004011010011,007011010011	" 040-047
	oct	006011010011,007011010011	" 050-057
	oct	005011010011,007011010011	" 060-067
	oct	006011010011,007011010011	" 070-077
	oct	003011010011,007011010011	" 100-107
	oct	006011010011,007011010011	" 110-117
	oct	005011010011,007011010011	" 120-127
	oct	006011010011,007011010011	" 130-137
	oct	004011010011,007011010011	" 140-147
	oct	006011010011,007011010011	" 150-157
	oct	005011010011,007011010011	" 160-167
	oct	006011010011,007011010011	" 170-177
	oct	002011010011,007011010011	" 200-207
	oct	006011010011,007011010011	" 210-217
	oct	005011010011,007011010011	" 220-227
	oct	006011010011,007011010011	" 230-237
	oct	004011010011,007011010011	" 240-247
	oct	006011010011,007011010011	" 250-257
	oct	005011010011,007011010011	" 260-267
	oct	006011010011,007011010011	" 270-277
	oct	003011010011,007011010011	" 300-307
	oct	006011010011,007011010011	" 310-317
	oct	005011010011,007011010011	" 320-327
	oct	006011010011,007011010011	" 330-337
	oct	004011010011,007011010011	" 340-347
	oct	006011010011,007011010011	" 350-357
	oct	005011010011,007011010011	" 360-367
	oct	006011010011,007011010011	" 370-377
	oct	001011010011,007011010011	" 400-407
	oct	006011010011,007011010011	" 410-417
	oct	005011010011,007011010011	" 420-427
	oct	006011010011,007011010011	" 430-437
	oct	004011010011,007011010011	" 440-447
	oct	006011010011,007011010011	" 450-457
	oct	005011010011,007011010011	" 460-467
	oct	006011010011,007011010011	" 470-477
	oct	003011010011,007011010011	" 500-507
	oct	006011010011,007011010011	" 510-517
	oct	005011010011,007011010011	" 520-527
	oct	006011010011,007011010011	" 530-537
	oct	004011010011,007011010011	" 540-547
	oct	006011010011,007011010011	" 550-557
	oct	005011010011,007011010011	" 560-567
	oct	006011010011,007011010011	" 570-577
	oct	002011010011,007011010011	" 600-607
	oct	006011010011,007011010011	" 610-617
	oct	005011010011,007011010011	" 620-627
	oct	006011010011,007011010011	" 630-637
	oct	004011010011,007011010011	" 640-647
	oct	006011010011,007011010011	" 650-657
	oct	005011010011,007011010011	" 660-667
	oct	006011010011,007011010011	" 670-677
	oct	003011010011,007011010011	" 700-707
	oct	006011010011,007011010011	" 710-717
	oct	005011010011,007011010011	" 720-727
	oct	006011010011,007011010011	" 730-737
	oct	004011010011,007011010011	" 740-747
	oct	006011010011,007011010011	" 750-757
	oct	005011010011,007011010011	" 760-767
	oct	006011010011,007011010011	" 770-777

	even
last_off_bit_table: 
	oct	011010011007,011010011006	" 000-007
	oct	011010011007,011010011005	" 010-017
	oct	011010011007,011010011006	" 020-027
	oct	011010011007,011010011004	" 030-037
	oct	011010011007,011010011006	" 040-047
	oct	011010011007,011010011005	" 050-057
	oct	011010011007,011010011006	" 060-067
	oct	011010011007,011010011003	" 070-077
	oct	011010011007,011010011006	" 100-107
	oct	011010011007,011010011005	" 110-117
	oct	011010011007,011010011006	" 120-127
	oct	011010011007,011010011004	" 130-137
	oct	011010011007,011010011006	" 140-147
	oct	011010011007,011010011005	" 150-157
	oct	011010011007,011010011006	" 160-167
	oct	011010011007,011010011002	" 170-177
	oct	011010011007,011010011006	" 200-207
	oct	011010011007,011010011005	" 210-217
	oct	011010011007,011010011006	" 220-227
	oct	011010011007,011010011004	" 230-237
	oct	011010011007,011010011006	" 240-247
	oct	011010011007,011010011005	" 250-257
	oct	011010011007,011010011006	" 260-267
	oct	011010011007,011010011003	" 270-277
	oct	011010011007,011010011006	" 300-307
	oct	011010011007,011010011005	" 310-317
	oct	011010011007,011010011006	" 320-327
	oct	011010011007,011010011004	" 330-337
	oct	011010011007,011010011006	" 340-347
	oct	011010011007,011010011005	" 350-357
	oct	011010011007,011010011006	" 360-367
	oct	011010011007,011010011001	" 370-377
	oct	011010011007,011010011006	" 400-407
	oct	011010011007,011010011005	" 410-417
	oct	011010011007,011010011006	" 420-427
	oct	011010011007,011010011004	" 430-437
	oct	011010011007,011010011006	" 440-447
	oct	011010011007,011010011005	" 450-457
	oct	011010011007,011010011006	" 460-467
	oct	011010011007,011010011003	" 470-477
	oct	011010011007,011010011006	" 500-507
	oct	011010011007,011010011005	" 510-517
	oct	011010011007,011010011006	" 520-527
	oct	011010011007,011010011004	" 530-537
	oct	011010011007,011010011006	" 540-547
	oct	011010011007,011010011005	" 550-557
	oct	011010011007,011010011006	" 560-567
	oct	011010011007,011010011002	" 570-577
	oct	011010011007,011010011006	" 600-607
	oct	011010011007,011010011005	" 610-617
	oct	011010011007,011010011006	" 620-627
	oct	011010011007,011010011004	" 630-637
	oct	011010011007,011010011006	" 640-647
	oct	011010011007,011010011005	" 650-657
	oct	011010011007,011010011006	" 660-667
	oct	011010011007,011010011003	" 670-677
	oct	011010011007,011010011006	" 700-707
	oct	011010011007,011010011005	" 710-717
	oct	011010011007,011010011006	" 720-727
	oct	011010011007,011010011004	" 730-737
	oct	011010011007,011010011006	" 740-747
	oct	011010011007,011010011005	" 750-757
	oct	011010011007,011010011006	" 760-767
	oct	011010011007,011010011000	" 770-777

	end
