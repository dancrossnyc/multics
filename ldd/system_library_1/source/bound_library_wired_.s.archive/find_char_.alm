" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(74-07-01,GDixon), approve(), audit(), install():
"     Create initial version of the program, called tct_.
"  2) change(75-09-25,GDixon), approve(), audit(), install():
"     Add $quote table segdef.
"  3) change(76-03-12,GDixon), approve(), audit(), install():
"     Add $verify, $reverse_verify, $search, and $reverse_search entrypoints.
"  4) change(86-02-05,GDixon), approve(86-05-16,MCR7357),
"     audit(86-07-10,Farley), install(86-07-17,MR12.0-1097):
"     Renamed subr from tct_ to find_char_.  Renamed all entrypoints.
"     Added the $make_table_of_chars_in_list and
"     $make_table_of_chars_not_in_list entrypoints.
"     Also fixed bug which prevents find_char_$last_in_table,
"     $translate_last_in_table, $last_in_list and $last_not_in_list
"     from working properly.
"                                                      END HISTORY COMMENTS

" *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *
"
" Name:  find_char_
"
"      This subroutine uses the EIS test character and translate (TCT) 
" instruction to perform the function of the PL/I search and verify builtins.
" The code uses either a pre-defined test/translate table, or it constructs
" one "on the fly".
"
" Entry:  find_char_$first_in_table
"
" Function: This entry point implements the PL/I search builtin function 
" with a predefined test/translate table.
"
" Syntax: 
"      dcl find_char_$first_in_table entry (char(*), char(512) aligned)
"	 returns (fixed bin(21)) reducible;
"      index = find_char_$first_in_table (string, table);
"
" Arguments:
" string
"    is the character string to be searched. (In)
" table
"    is the translation table.  (See Notes below.) (In)
" index
"    is the result of the search.  It is a PL/I string index (character 
"    position). (Out)
"
" Entry: find_char_$last_in_table
"
" Function: This entry point is like find_char_$first_in_table, but searches
" the string in reverse, from last character to first.  A PL/I string index
" (character position relative to the beginning of the string) is returned.
" It performs the PL/I function:
"	i = length(string) - search (reverse(string), table_chars) + 1
"		[when char searched for is found in string]
"	i = 0     [when char searched for is not found.]
"
"
" Syntax: 
"      dcl find_char_$last_in_table entry (char(*), char(512) aligned) 
"         returns (fixed bin(21)) reducible;
"      index = find_char_$last_in_table (string, table);
"
" Arguments:
" string
"    is the character string to be searched. (In)
" table
"    is the translation table.  (See Notes below.) (In)
" index
"    is the result of the search.  It is a PL/I string index (character 
"    position). (Out)
"
" Entry: find_char_$translate_first_in_table
"
" Function: This entry point performs the PL/I search function, but also
" returns the translate table entry for the character which stopped the search.
" See Notes below for a more explicit description of the returned
" character.
"
" Syntax: 
"      dcl find_char_$translate_first_in_table entry (char(*), 
"	 char(512) aligned, fixed bin(21)) returns (char(1));
"      char = find_char_$translate_first_in_table (string, table, index);
"
" Arguments:
" string
"    is the character string to be searched. (In)
" table
"    is the translation table.  (See Notes below.) (In)
" index
"    is the result of the search.  It is a PL/I string index (character 
"    position). (Out)
" char
"    is the character from the translation table into which the indexed 
"    character of string has been translated. (Out)
"
" Entry: find_char_$translate_last_in_table
"
" Function: This entry is like find_char_$translate_first_in_table, but does
" the search function in reverse, from last char of string to first.
"
" Syntax: 
"      dcl find_char_$translate_last_in_table entry (char(*),
"          char(512) aligned, fixed bin(21)) returns (char(1));
"      char = find_char_$translate_last_in_table (string, table, index);
"
" Arguments:
" string
"    is the character string to be searched. (In)
" table
"    is the translation table.  (See Notes below.) (In)
" index
"    is the result of the search.  It is a PL/I string index (character 
"    position). (Out)
" char
"    is the character from the translation table into which the indexed 
"    character of string has been translated. (Out)
"
" Entry: find_char_$first_in_list
"
" Function:  This entry performs the PL/I function:
"	index = search (string, chars);
"
" Syntax:
"      dcl find_char_$first_in_list entry (char(*), char(*))
"	 returns(fixed bin(21)) reducible;
"      index = find_char_$first_in_list (string, search_list);
"	
" Arguments:
" string
"    is the character string to be searched. (In)
" search_list
"    are characters to be found in the string.  (In)
" index
"    is the result of the search.  It is the PL/I string index (character 
"    position) of the first occurrence of any of the search characters in
"    string. (Out)
"
" Entry:  find_char_$last_in_list
"
" Function: This entry returns the index (character position relative to the
" beginning of the string) of the rightmost occurrence of any of the characters
" being searched for.  It performs the PL/I function:
"     index = length(string) - search (reverse(string), chars) + 1
"		[when char searched for is found in string]
"     index = 0     [when char searched for is not found.]
"
" Syntax:
"      dcl find_char_$last_in_list entry (char(*), char(*))
"	 returns(fixed bin(21)) reducible;
"      i = find_char_$last_in_list (string, search_list);
"
" Arguments:
" string
"    is the character string to be searched. (In)
" search_list
"    are characters to be found in the string.  (In)
" index
"    is the result of the search.  It is the PL/I string index (character 
"    position) of the last occurrence of any of the search characters in
"    string. (Out)
"
" Entry:  find_char_$first_not_in_list
"
" Function:  This entry performs the PL/I function:
"	index = verify(string, chars)
"
" Syntax: 
"      dcl find_char_$first_not_in_list entry (char(*), char(*))
"	 returns(fixed bin(21)) reducible;
"      i = find_char_$first_not_in_list (string, verify_list);
"
" Arguments:
" string
"    is the character string to be searched. (In)
" verify_list
"    are characters whose existence in the string is to be verified.  (In)
" index
"    is the result of the verify.  It is the PL/I string index (character 
"    position) of the first occurrence of a string character which is not
"    an element in verify_list. (Out)
"
" Entry:  find_char_$last_not_in_list
"
" Function: This entry returns the index (character position relative to the
" beginning of the string) of the rightmost occurrence of a char in string
" which is not an element of verify_chars.  It performs the PL/I function:
"     index = length(string) - verify (reverse(string), chars) + 1
"		[when character not in chars is found in string]
"     index = 0     [when character not in chars is not found in string.]
"
" Syntax: 
"      dcl find_char_$last_not_in_list entry (char(*), char(*))
"	 returns(fixed bin(21)) reducible;
"      i = find_char_$last_not_in_list (string, verify_list);
"
" Arguments:
" string
"    is the character string to be searched. (In)
" verify_list
"    are characters whose existence in the string is to be verified.  (In)
" index
"    is the result of the verify.  It is the PL/I string index (character 
"    position) of the last occurrence of a string character which is not
"    an element in verify_list. (Out)
" 
" Entry:  find_char_$make_table_of_chars_in_list
" 
" Function:  This entry constructs a test/translate table for use with the
" find_char_$first_in_table and find_char_$last_in_table entrypoints.
" Table entries corresponding to characters of search_list are marked with
" \777 in the search table.  Other table entries are filled with \000.
" 
" Syntax:
"    dcl find_char_$make_table_of_chars_in_list (char(*), char(512) aligned);
"    call find_char_$make_table_of_chars_in_list (search_list, table);
" 
" Arguments:
" search_list
"    is a string of characters whose corresponding entries are to be marked in
"    the resulting translate table. (In)
" table
"    is the translate table. (Out)
"
" Entry:  find_char_$make_table_of_chars_not_in_list
" 
" Function:  This entry constructs a test/translate table for use with the
" find_char_$first_in_table and find_char_$last_in_table entrypoints.
" Table entries corresponding to characters of verify_list are marked with
" \000 in the search table.  Other table entries are filled with \777.
" 
" Syntax:
"    dcl find_char_$make_table_of_chars_not_in_list
"	(char(*), char(512) aligned);
"    call find_char_$make_table_of_chars_not_in_list (verify_list, table);
" 
" Arguments:
" verify_list
"    is a string of characters whose corresponding entries are to remain
"    unmarked in the resulting translate table. (In)
" table
"    is the translate table. (Out)
"
" Notes
"
"      The test/translate table is a fixed length character string.  It
" should be 512 characters long to cover all possible Multics
" 9-bit byte values.
"
"      The test/translate table consists of "\000" characters and
" characters which are not "\000".  The search progresses as follows:
"
" 1) Examine the first (or next) character of the source string.
"    If i is the index of the character being examined, then
"    	source_char = substr(string, i, 1)
" 2) For each source_char, examine its corresponding table_char:
"	table_char = substr(table,rank(source_char)+1,1)
" 3) If table_char = "\000", then the test fails and the search
"    continues with step 1.
" 4) If table_char ^= "\000", then the test succeeds and the search
"    stops.  The current value of i is returned as the index 
"    value.  For the $translate entry points, table_char is returned
"    as the char argument.
" 5) If the source string is exhausted before the test succeeds, then
"    a value of 0 is returned as the index argument, and for the
"    $translate entry point, "\000" is returned as the char argument.
"
" Table:  find_char_$not_ascii_table
"
"      This is a translation table which can be used to detect any
" non-ASCII characters in a character string.  Non-ASCII characters
" are those in which one or both of the 2 leftmost bits of the
" 9-bit character byte are "1"b (i.e., character > "\177").  The
" first 128 values in the table are "\000".  The next 384 table
" characters are set to their character offset within the table.
" This means that:
"      substr(table,n+1,1) = "\000", for n:  000 <= n <= 127
"      substr(table,n+1,1) = "\n",   for n:  128 <= n <= 511
"
" *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *

" -----------------------------------------------------------------------------
" Segname, and entrypoint definitions.
" -----------------------------------------------------------------------------

	name	find_char_

	segdef	first_in_table
	segdef	last_in_table
	segdef	translate_first_in_table
	segdef	translate_last_in_table

	entry	first_in_list
	entry	first_not_in_list
	entry	last_in_list
	entry	last_not_in_list
	entry	make_table_of_chars_in_list
	entry	make_table_of_chars_not_in_list

	segdef	not_ascii_table

" -----------------------------------------------------------------------------
" Code for find_char_$first_in_table, $translate_first_in_table,
" $last_in_table, and $translate_last_in_table, $first_in_list,
" $first_not_in_list, $last_in_list and $last_not_in_list.
" -----------------------------------------------------------------------------

" Register name assignments: 
	equ	arg_list,0	" pr0 -> argument list
	equ	string,1		" pr1 -> string to be searched.
	equ	search_list,2	" pr2 -> search_list, verify_list.
	equ	table,3		" pr3 -> test/translate table.
	equ	char,4		" pr4 -> value of test/translate table
				"        element corresponding to the
				"        string character found by tct.
	equ	search_list_char,4	" pr4 -> a char from search_list.
	equ	index,5		" pr5 -> character index of string
				"        character found by tct instr.
	equ	auto_storage,6	" pr6 -> stack frame, containing
				"        storage for automatic vars.

	equ	desc_offset,2	"   x2 = word offset of 1st arg
				"        descriptor in arg_list.
	equ	do_index,3	"   x3 = a do group index.
	equ	return_loc,6	"   x6 = subroutine return location.

	temp	table_var(128)	" automatic char(512) aligned table
				"   for use in tct/tctr instructions
				"   when $XXX_in_list make their
				"   own table.
	temp	search_list_char_var(1)
				" automatic char(1) aligned word to
				"   hold one search_list char at
				"   a time so its rank can be computed.

desc_length_mask:			" ANDing mask to extract char string
	oct	000077777777	"   length from an argument descriptor.
string_index_mask:			" ANDing mask to extract char offset
	oct	000777777777	"   from result of TCT instruction.

" -----------------------------------------------------------------------------
" find_char_$first_in_table: proc (string, table) returns (index);
" -----------------------------------------------------------------------------
first_in_table:
	ldx	desc_offset,8,du	" set offset of first argument 
				"   descriptor from head of arglist.
	tsx	return_loc,get_table_parms
				" get parm ptr/lengths
	tsx	return_loc,tct	" execute tct instruction
	ttf	first_in_table_match
				" Branch if tct found a match
	stz	index|0		" tct failed... store 0 in result
	short_return

first_in_table_match:		" tct succeeded
	tsx	return_loc,set_tct_index_parm
	short_return

" -----------------------------------------------------------------------------
" find_char_$last_in_table: entry (string, table) returns (index);
" -----------------------------------------------------------------------------
last_in_table:
	ldx	desc_offset,8,du	" set offset of 1st arg desc
	tsx	return_loc,get_table_parms
				" get parm ptr/lengths
	tsx	return_loc,tctr	" execute tctr instruction
	ttf	last_in_table_match	" Branch if tctr found a match.

	stz	index|0		" tctr failed... store 0 in result
	short_return

last_in_table_match:		" tctr succeeded
	tsx	return_loc,set_tctr_index_parm
	short_return

" -----------------------------------------------------------------------------
" find_char_$translate_first_in_table: entry (string, table, index)
"     returns (char);
" -----------------------------------------------------------------------------
translate_first_in_table:
	ldx	desc_offset,10,du	" set offset of first argument
				"   descriptor		
	tsx	return_loc,get_table_parms
				" get parm ptr/lengths
	tsx	return_loc,tct	" execute tct instruction
	ttf	translate_first_in_table_match
				" Branch if tct found a match.
	stz	index|0		" tct failed... store 0 in result
	tsx	return_loc,set_char_parm
				" move \000 from index into char parm.
	short_return		" tct failed.

translate_first_in_table_match:	" tct succeeded.
	tsx	return_loc,set_char_parm
				" move translated char into char parm.
	tsx	return_loc,set_tct_index_parm
	short_return

" -----------------------------------------------------------------------------
" find_char_$translate_last_in_table: entry (string, table, index)
"		      returns (char);
" -----------------------------------------------------------------------------
translate_last_in_table:
	ldx	desc_offset,10,du	" set offset of 1st arg desc
	tsx	return_loc,get_table_parms
				" get parm ptr/lengths
	tsx	return_loc,tctr	" execute tctr instruction
	ttf	translate_last_in_table_match
				" Branch if tctr found a match.
	stz	index|0		" tctr failed... store 0 in result
	tsx	return_loc,set_char_parm
				" move \000 from index into char parm.
	short_return

translate_last_in_table_match: 
	tsx	return_loc,set_char_parm
				" move translated char into char parm.
	tsx	return_loc,set_tctr_index_parm
	short_return

" -----------------------------------------------------------------------------
" make_table_of_chars_not_in_list: entry (verify_list, table);
" -----------------------------------------------------------------------------
make_table_of_chars_not_in_list: 
	push			" Need automatic variables when
				"   filling the search table.
	tsx	return_loc,get_make_table_parms
	tsx	return_loc,fill_table_from_list
	tsx	return_loc,invert_table_entries
	return

" -----------------------------------------------------------------------------
" make_table_of_chars_in_list: entry (search_list, table);
" -----------------------------------------------------------------------------
make_table_of_chars_in_list: 
	push			" Need automatic variables when
				"   filling the search table.
	tsx	return_loc,get_make_table_parms
	tsx	return_loc,fill_table_from_list
	return

" -----------------------------------------------------------------------------
" first_in_list: entry (string, search_list) returns (index);
" -----------------------------------------------------------------------------
first_in_list:
	push			" Need automatic variables when
				"   filling the search table.
	tsx	return_loc,get_list_parms
	tsx	return_loc,fill_table_from_list
				" build table from search_list
	tsx	return_loc,tct	" execute tct instruction
	ttf	first_in_list_match	" Branch if it succeeds.
	stz	index|0		" tct failed... store 0 result.
	return

first_in_list_match:		" tct succeeded
	tsx	return_loc,set_tct_index_parm
	return

" -----------------------------------------------------------------------------
" last_in_list: entry (string, search_list) returns (index);
" -----------------------------------------------------------------------------
last_in_list:
	push			" Need automatic variables when
				"   filling the search table.
	tsx	return_loc,get_list_parms
	tsx	return_loc,fill_table_from_list
				" build table from search_list
	tsx	return_loc,tctr	" execute tctr instruction
	ttf	last_in_list_match
				" Branch if it succeeds.
	stz	index|0		" tctr failed... store 0 result.
	return

last_in_list_match:			" tctr succeeded
	tsx	return_loc,set_tctr_index_parm
	return

" -----------------------------------------------------------------------------
" first_not_in_list: entry (string, verify_list) returns (index);
" -----------------------------------------------------------------------------
first_not_in_list:
	push			" Need automatic variables when
				"   filling the search table.
	tsx	return_loc,get_list_parms
				" get parms
	tsx	return_loc,fill_table_from_list
				" build table from verify_list
	tsx	return_loc,invert_table_entries
				" convert search table to verify table
	tsx	return_loc,tct	" execute tct instruction
	ttf	first_not_in_list_match
				" Branch if it succeeds.
	stz	index|0		" tct failed... store 0 result.
	return

first_not_in_list_match:		" tct succeeded
	tsx	return_loc,set_tct_index_parm
	return

" -----------------------------------------------------------------------------
" last_not_in_list: entry (string, verify_list) returns (index);
" -----------------------------------------------------------------------------
last_not_in_list:
	push			" Need automatic variables 
				"   filling the search table.
	tsx	return_loc,get_list_parms
	tsx	return_loc,fill_table_from_list
				" build table from verify_list
	tsx	return_loc,invert_table_entries
				" convert search table to verify table
	tsx	return_loc,tctr	" execute tctr instruction
	ttf	last_not_in_list_match
				" Branch if it succeeds.
	stz	index|0		" tctr failed... store 0 result.
	return

last_not_in_list_match:		" tctr succeeded
	tsx	return_loc,set_tctr_index_parm
	return

" =============================================================================
" QUICK-BLOCK SUBROUTINES WHICH ACTUALLY DO THE WORK
" =============================================================================

" -----------------------------------------------------------------------------
" Fill test/translate table, using specs in search_list string.
"   In:	pr(table)            -> translate/test table to be filled in.
"	pr(search_list)	 -> search_list character string to be turned
"			    into a table.
"	x(do_index)	  = length(search_list).
"	pr(search_list_char) -> space to hold one char from search list,
"			    so its rank can be computed.
"	x(return_loc)	  = location this subroutine should return to.
"  Out:	pr(table)            -> filled-in translate/test table.
" -----------------------------------------------------------------------------
fill_table_from_list: 
	even
	mlr	(pr),(pr),fill(000)	" fill table with 000's
	desc9a	table|0,0
	desc9a	table|0,512

	stz	search_list_char|0	" clear search_list_char variable
loop:	cmpx	do_index,0,du	" exit loop when search_list exhausted
	tze	0,return_loc
	sbx	do_index,1,du	" decrement length(search_list)
	even
	mlr	(pr,x3),(pr),fill(000) 
	desc9a	search_list|0,1	" search_list_char =
				"   substr(search_list,do_index,1)
	desc9a	search_list_char|0(3),1	
	ldq	search_list_char|0	
	even
	mlr	(pr),(pr,ql),fill(777)
	desc9a	table|0,0		" move 777 into 
	desc9a	table|0,1		"   table(rank(search_list_char))
	tra 	loop

" -----------------------------------------------------------------------------
" Get addr/length of string, search_list or verify_list and index parms
"   In:	pr(arg_list)         -> the argument list.
"	x(return_loc)	  = location this subroutine should return to.
"  Out:	pr(string)           -> string to be searched.
"	pr(search_list)      -> chars in search_list or verify_list.
"	pr(index)		 -> character index within string.
"	a-reg                 = length(string).
"	x(do-index)	  = length(search_list).
"	pr(table)            -> test/translate table.
"	pr(search_list_char) -> automatic variable to hold one
"			    search_list char.
" -----------------------------------------------------------------------------
get_list_parms:
	epp	string,arg_list|2,*	" get addr(string)      [arg1]
	epp	search_list,arg_list|4,*
				" get addr(search_list) [arg2]
	epp	index,arg_list|6,*	" get addr(index)  [arg3]
				" get length(string) into a-reg.
	ldx	desc_offset,8,du	"   offset of arg1 descriptor in
	lxl3	arg_list|0	"     arg_list.
	cmpx3	4,du		"   does arglist have parent ptr?
	tze	2,ic		"   4 means no parent ptr.
	adx	desc_offset,2,du	"   otherwise, skip parent ptr.
	lda	arg_list|0,desc_offset*
				"   get length of string in a-reg.
	ana	desc_length_mask	"   mask out all but length.
	ldq	arg_list|2,desc_offset* 
	anq	desc_length_mask	" get length(search_list) into q-reg.
	eax	do_index,0,ql	" get length(search_list) into x3.
	epp	table,auto_storage|table_var
	epp	search_list_char,auto_storage|search_list_char_var
				" get pointers to automatic variables
	tra	0,return_loc	

" -----------------------------------------------------------------------------
" Get addr/length of search_list or verify_list parm, and output table parm.
"   In:	pr(arg_list)         -> the argument list.
"	x(return_loc)	  = location this subroutine should return to.
"  Out:	pr(search_list)	 -> chars in search_list, verify_list.
"	pr(table)		 -> test/translate table.
"	pr(search_list_char) -> automatic variable to hold one search_list
"			    char.
"	x(do_index)	  = length(search_list).
" -----------------------------------------------------------------------------
get_make_table_parms: 
	epp	search_list,arg_list|2,*
				" get addr(search_list) [arg1]
	epp	table,arg_list|4,*	" get addr(table)       [arg2]
	ldx	desc_offset,6,du	" get length(search_list) from its arg
	lxl3	arg_list|0	"   descriptor into a-reg.
	cmpx3	4,du		"   compensate if arglist has parent
	tze	2,ic		"     ptr.  4 means no parent ptr.
	adx	desc_offset,2,du	"   if there, skip parent ptr.
	lda	arg_list|0,desc_offset*
				"   load 1st arg desc into a-reg.
	ana	desc_length_mask	"   mask off all but the length.
	eax	do_index,0,al	" get length(search_list) into x3.
	epp	search_list_char,auto_storage|search_list_char_var
				" get addr(search_list_char), making it
	tra	0,return_loc	"   point to an automatic variable.

" -----------------------------------------------------------------------------
" Get pointers/length of find_char_$XXX_in_table parm: string, table, index.
"   In:	pr(arg_list)         -> the argument list.
"	x(desc_offset)        = offset in arg list of arg1 descriptor.
"	x(return_loc)	  = location this subroutine should return to.
"  Out:	pr(string)           -> string to be searched.
"	pr(table)            -> test/translate table.
"	pr(index)		 -> character index within string.
"	a-reg                 = length(string).
" -----------------------------------------------------------------------------
get_table_parms:
	epp	string,arg_list|2,*	" get addr(string) [arg1]
	epp	table,arg_list|4,*	" get addr(table)  [arg2]
	epp	index,arg_list|6,*	" get addr(index)  [arg3]
				" get length(string) into a-reg.
	lxl3	arg_list|0	"   compensate if arg list has parent
	cmpx3	4,du		"     ptr.
	tze	2,ic		"   4 means no parent ptr.
	adx	desc_offset,2,du	"   else, skip over parent ptr.
	lda	arg_list|0,desc_offset*
				"   load descriptor for string.
	ana	desc_length_mask	"   mask out all but string length from
				"    descriptor.
	tra	0,return_loc

" -----------------------------------------------------------------------------
" Convert from a search table to a verify table by inverting all table bits.
"   In: 	pr(table)     -> the search table (char(512) aligned)
"	x(return_loc)  = location this subroutine should return to.
"  Out: 	pr(table)	    -> the verify table
" -----------------------------------------------------------------------------
invert_table_entries:	 	" invert bytes in test/translate table
	lxl7	(512*9),dl	" (make off bytes on, on bytes off)
	even			" since:  verify(x) <=> search(^x)
	bool	invert,014	
	csl	(pr,rl),(pr,rl),fill(0),bool(invert)
	descb	table|0,x7	" See fill_table_from_list below.
	descb	table|0,x7	" Remember that the search table has
	tra	0,return_loc	"   bytes containing either \000 or
				"   \777.  ^\777 = \000, ^\000 = \777

" -----------------------------------------------------------------------------
" Move translated char (char selected from table by tct/tctr instruction)
" from first byte of index (where tct/tctr put it) into translate table
" char output parm (arg4).
"   In:	pr(arg_list)   -> the argument list.
"	pr(index)	     -> result of TCT or TCTR instruction: character offset
"		        from right end of string, preceded by char
"		        from selected table entry.
"	x(return_loc)   = location this subroutine should return to.
"  Out:	pr(char)	     -> char parm in which table char is returned.
" -----------------------------------------------------------------------------
set_char_parm: 
	epp	char,arg_list|8,* 	" get addr(char) [arg4]
	even
	mlr	(pr),(pr),fill(000)	" move translated char to 4th arg
	desc9a	index|0,1		"   TCT result: 1st byte is trans_char
	desc9a	char|0,1		"   4th arg
	tra	0,return_loc

" -----------------------------------------------------------------------------
" Adjust index to remove translated char, and convert byte offset to a
" byte index.
"   In:	pr(index)	     -> result of TCT or TCTR instruction: character offset
"		        from right end of string, preceded by char
"		        from selected table entry.
"	x(return_loc)   = location this subroutine should return to.
"  Out:	pr(index)	     -> character index within string of selected char.
" -----------------------------------------------------------------------------
set_tct_index_parm: 
	ldq	index|0		" load string offset
	anq	string_index_mask	" mask away translated char
	adq	1,dl		" make string offset into index
	stq	index|0		" store index
	tra	0,return_loc

" -----------------------------------------------------------------------------
" Adjust index to remove translated char, convert byte offset to a
" byte index, and shift from byte-index-relative-to-right-end of string to
" byte-index-relative-to-left-end of string.
"   In:	pr(index)	     -> result of TCT or TCTR instruction: character offset
"		        from right end of string, preceded by char
"		        from selected table entry.
"	x(return_loc)   = location this subroutine should return to.
"  Out:	pr(index)	     -> character index within string of selected char.
" -----------------------------------------------------------------------------
set_tctr_index_parm: 
	ldq	index|0		" load string reverse_offset
	anq	string_index_mask	" mask away translated char
	adq	1,dl		" make string reverse_offset into
				"   reverse_index
	stq	index|0		" store reverse_index
	sba	index|0		" index = length(string) 
	ada	1,dl		"       - reverse_index + 1
	sta	index|0
	tra	0,return_loc

" -----------------------------------------------------------------------------
" Execute tct instruction on string, using table.
"   In:	pr(string)           -> string to be searched.
"	a-reg                 = length(string).
"	pr(table)            -> test/translate table.
"	x(return_loc)	  = location this subroutine should return to.
"  Out:	pr(index)		 -> result of TCT instruction: character offset
"			    within string, preceded by char from selected
"			    table entry.
" -----------------------------------------------------------------------------
	even
tct:	tct	(pr,rl),fill(000)	" test and translate, using the table
	desc9a	string|0,al	"   string,length-in-'a'-register
	arg	table|0		"   table
	arg	index|0		"   result of find_char_ stored in
				"     index parm
	tra	0,return_loc

" -----------------------------------------------------------------------------
" Execute tctr instruction on string, using table.
"   In:	pr(string)           -> string to be searched.
"	a-reg                 = length(string).
"	pr(table)            -> test/translate table.
"	x(return_loc)	  = location this subroutine should return to.
"  Out:	pr(index)		 -> result of TCTR instruction: character offset
"			    from right end of string, preceded by char
"			    from selected table entry.
" -----------------------------------------------------------------------------
	even
tctr:	tctr	(pr,rl),fill(000)	" test/translate in reverse
	desc9a	string|0,al	"   string, length in 'a'-reg
	arg	table|0		"   table
	arg 	index|0		"   result
	tra	0,return_loc

		even
not_ascii_table:	oct	000000000000,000000000000	" 000-007
		oct	000000000000,000000000000	" 010-017
		oct	000000000000,000000000000	" 020-027
		oct	000000000000,000000000000	" 030-037
		oct	000000000000,000000000000	" 040-047
		oct	000000000000,000000000000	" 050-057
		oct	000000000000,000000000000	" 060-067
		oct	000000000000,000000000000	" 070-077
		oct	000000000000,000000000000	" 100-107
		oct	000000000000,000000000000	" 110-117
		oct	000000000000,000000000000	" 120-127
		oct	000000000000,000000000000	" 130-137
		oct	000000000000,000000000000	" 140-147
		oct	000000000000,000000000000	" 150-157
		oct	000000000000,000000000000	" 160-167
		oct	000000000000,000000000000	" 170-177
		oct	200201202203,204205206207	" 200-207
		oct	210211212213,214215216217	" 210-217
		oct	220221222223,224225226227	" 220-227
		oct	230231232233,234235236237	" 230-237
		oct	240241242243,244245246247	" 240-247
		oct	250251252253,254255256257	" 250-257
		oct	260261262263,264265266267	" 260-267
		oct	270271272273,274275276277	" 270-277
		oct	300301302303,304305306307	" 300-307
		oct	310311312313,314315316317	" 310-317
		oct	320321322323,324325326327	" 320-327
		oct	330331332333,334335336337	" 330-337
		oct	340341342343,344345346347	" 340-347
		oct	350351352353,354355356357	" 350-357
		oct	360361362363,364365366367	" 360-367
		oct	370371372373,374375376377	" 370-377
		oct	400401402403,404405406407	" 400-407
		oct	410411412413,414415416417	" 410-417
		oct	420421422423,424425426427	" 420-427
		oct	430431432433,434435436437	" 430-437
		oct	440441442443,444445446447	" 440-447
		oct	450451452453,454455456457	" 450-457
		oct	460461462463,464465466467	" 460-467
		oct	470471472473,474475476477	" 470-477
		oct	500501502503,504505506507	" 500-507
		oct	510511512513,514515516517	" 510-517
		oct	520521522523,524525526527	" 520-527
		oct	530531532533,534535536537	" 530-537
		oct	540541542543,544545546547	" 540-547
		oct	550551552553,554555556557	" 550-557
		oct	560561562563,564565566567	" 560-567
		oct	570571572573,574575576577	" 570-577
		oct	600601602603,604605606607	" 600-607
		oct	610611612613,614615616617	" 610-617
		oct	620621622623,624625626627	" 620-627
		oct	630631632633,634635636637	" 630-637
		oct	640641642643,644645646647	" 640-647
		oct	650651652653,654655656657	" 650-657
		oct	660661662663,664665666667	" 660-667
		oct	670671672673,674675676677	" 670-677
		oct	700701702703,704705706707	" 700-707
		oct	710711712713,714715716717	" 710-717
		oct	720721722723,724725726727	" 720-727
		oct	730731732733,734735736737	" 730-737
		oct	740741742743,744745746747	" 740-747
		oct	750751752753,754755756757	" 750-757
		oct	760761762763,764765766767	" 760-767
		oct	770771772773,774775776777	" 770-777

		end
