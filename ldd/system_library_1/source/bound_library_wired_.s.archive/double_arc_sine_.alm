" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1985 *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(86-07-15,Ginter), approve(86-07-15,MCR7287),
"     audit(86-07-16,Mabey), install(86-07-28,MR12.0-1104):
"     Change by M Mabey (installed by Ginter) to do a dfcmg instead of fcmg
"     when testing for the upper bound on input (bound_4).
"                                                      END HISTORY COMMENTS


name	double_arc_sine_
" Modification history:
"	Written by H. Hoover, M. Mabey, and B. Wong, April 1985,
"	based on the GCOS routine '7nam'.
"
" Function:  Approximate to double precision the arcsine or arccosine of
"	a value in the range [-1:1].
"
"	Modified: May 10, 1985 by M Mabey - do a dfcmg instead of fcmg when
"		testing for the upper bound on input (bound_4).
"
" Entry:	through the appropriately named entry point with:
"	EAQ = a value in the range [-1:1]
"	PR2 = the address of a 20 word, even-word aligned scratch area.
"	      12 words are used in this program and another 8 are allocated
"	      for the double_square_root_ routine.
"	PR3 = the return address.
"
" Exit:	EAQ = the desired angle.
"
" Uses:	X2, X3, X4, PR5
"	X2 = indicates BFP or HFP mode - all the floating point math
"	     routines use this register for the same purpose.
"	X3 = saves a return address from arcsine.
"         X4 = saves a return address from part_arcsine.
"	PR5 = a temporary
"	The X register usage starts at X2 because this function calls
"	double_square_root_ which uses registers X0 through X2. Register
"	X2 is used for the same purpose in both routines.
"
"	Since double_square_root_ expects the return address in PR3,
"	this register must be saved before the call is made.  In addition,
"	double_square_root_ expects PR2 to point to an even-word aligned,
"	8 word long working storage area.

	segdef	double_arc_sine_radians_
	segdef	hfp_double_arc_sine_radians_
	segdef	double_arc_sine_degrees_
	segdef	hfp_double_arc_sine_degrees_
	segdef	double_arc_cosine_radians_
	segdef	hfp_double_arc_cosine_radians_
	segdef	double_arc_cosine_degrees_
	segdef	hfp_double_arc_cosine_degrees_

	segref	math_constants_,half_pi,hfp_half_pi,hfp_one_radian,one_radian,pi,quarter_pi

	equ	abs_x,0
	equ	arg_x,2
	equ	y,4
	equ	yy,6
	equ	q,8
	equ	space_used,10
	equ	qq,q
	equ	temp,abs_x
	equ	x_minus_one,temp
	equ	BFP,0
	equ	HFP,2
	equ	ACOS,0
	equ	ASIN,1

	bool	P1.0H,002040	" yields HFP +1.0 under 'du' modification
	bool	P2.0H,002100	" yields HFP +2.0 under 'du' modification
	bool	P90.0H,004264	" yields HFP +90.0 under 'du' modification

hfp_double_arc_sine_radians_:
	eax2	HFP		" 2 word offset for HFP constants
	tsx3	arcsine
	dfrd	0
	tra	pr3|0		" Return to caller

double_arc_sine_radians_:
	eax2	BFP
	tsx3	arcsine
	dfrd	0
	tra	pr3|0		" Return to caller

hfp_double_arc_sine_degrees_:
	eax2	HFP
	tsx3	arcsine
	dfmp	hfp_one_radian	" Convert to degrees
	dfrd	0
	tra	pr3|0		" Return to caller

double_arc_sine_degrees_:
	eax2	BFP
	tsx3	arcsine
	dfmp	one_radian	" Convert to degrees
	dfrd	0
	tra	pr3|0		" Return to caller

hfp_double_arc_cosine_radians_:
	eax2	HFP

	fcmp	hfp_bound_2	" is the number close to one?
	tmi	hfp_acos_rad_not_near_one
	dfcmg	hfp_bound_4	" is the number greater than one?
	tpnz	arcsine_domain_error
	fsb	P1.0H,du		" EAQ := x - 1
	dfst	pr2|x_minus_one
	fad	P2.0H,du		" EAQ := 1 + x
	fneg	0		" EAQ := -(1 + x)
	dfmp	pr2|x_minus_one	" EAQ := -(1+x)(x-1) = 1+x**2
	epp5	pr3|0		" save return pointer
	tsp3	<double_square_root_>|[hfp_double_square_root_]
	epp3	pr5|0		" restore return pointer
	tsx3	arcsine		" EAQ := asin (sqrt(1+x**2))
	dfrd	0
	tra	pr3|0		" return to caller

hfp_acos_rad_not_near_one:
	tsx3	arcsine
	fneg	0
	dfad	hfp_half_pi	" convert to cosine
	dfrd	0
	tra	pr3|0		" Return to caller

double_arc_cosine_radians_:
	eax2	BFP

	fcmp	bound_2		" is the number close to one?
	tmi	acos_rad_not_near_one
	dfcmg	bound_4		" is the number greater than one?
	tpnz	arcsine_domain_error
	fsb	=1.0,du		" EAQ := x - 1
	dfst	pr2|x_minus_one
	fad	=2.0,du		" EAQ := 1 + x
	fneg	0		" EAQ := -(1 + x)
	dfmp	pr2|x_minus_one	" EAQ := -(1+x)(x-1) = 1+x**2
	epp5	pr3|0		" save return pointer
	tsp3	<double_square_root_>|[double_square_root_]
	epp3	pr5|0		" restore return pointer
	tsx3	arcsine		" EAQ := asin (sqrt(1+x**2))
	dfrd	0
	tra	pr3|0		" return to caller

acos_rad_not_near_one:
	tsx3	arcsine
	fneg	0
	dfad	half_pi		" convert to cosine
	dfrd	0
	tra	pr3|0		" Return to caller

hfp_double_arc_cosine_degrees_:
	eax2	HFP

	fcmp	hfp_bound_2	" is the number close to one?
	tmi	hfp_acos_deg_not_near_one
	dfcmg	hfp_bound_4	" is the number greater than one?
	tpnz	arcsine_domain_error
	fsb	P1.0H,du		" EAQ := x - 1
	dfst	pr2|x_minus_one
	fad	P2.0H,du		" EAQ := 1 + x
	fneg	0		" EAQ := -(1 + x)
	dfmp	pr2|x_minus_one	" EAQ := -(1+x)(x-1) = 1+x**2
	epp5	pr3|0		" save return pointer
	tsp3	<double_square_root_>|[hfp_double_square_root_]
	epp3	pr5|0		" restore return pointer
	tsx3	arcsine		" EAQ := asin (sqrt(1+x**2))
	dfmp	hfp_one_radian	" convert to degrees
	dfrd	0
	tra	pr3|0		" return to caller

hfp_acos_deg_not_near_one:
	tsx3	arcsine
	dfmp	hfp_one_radian	" convert to degrees
	fneg	0
	fad	P90.0H,du		" convert to cosine
	dfrd	0
	tra	pr3|0		" Return to caller

double_arc_cosine_degrees_:
	eax2	BFP

	fcmp	bound_2		" is the number close to one?
	tmi	acos_deg_not_near_one
	dfcmg	bound_4		" is the number greater than one?
	tpnz	arcsine_domain_error
	fsb	=1.0,du		" EAQ := x - 1
	dfst	pr2|x_minus_one
	fad	=2.0,du		" EAQ := 1 + x
	fneg	0		" EAQ := -(1 + x)
	dfmp	pr2|x_minus_one	" EAQ := -(1+x)(x-1) = 1+x**2
	epp5	pr3|0		" save return pointer
	tsp3	<double_square_root_>|[double_square_root_]
	epp3	pr5|0		" restore return pointer
	tsx3	arcsine		" EAQ := asin (sqrt(1+x**2))
	dfmp	one_radian	" convert to degrees
	dfrd	0
	tra	pr3|0		" return to caller

acos_deg_not_near_one:
	tsx3	arcsine
	dfmp	one_radian	" convert to degrees
	fneg	0
	fad	=90.0,du		" convert to cosine
	dfrd	0
	tra	pr3|0		" Return to caller

arcsine:
	fad	=0.0,du		" normalize input ("arg_x")
	dfst	pr2|arg_x		" store sign of arg_x.
	tpl	2,ic		" abs_x=abs(arg_x)
	  fneg	0
	dfst	pr2|abs_x

" determine what range abs_x is in.  A binary search is not used as
" each higher range is much smaller than the previous one.  Once the
" range is determined, perform the appropriate polynomial scaling to
" get abs_x into [0, .5], and then transfer to part_arcsine.
" Upon return, scale the result back.

	fcmg	=0.5,du		" is abs_x in the range [0,.5)
	tpl	above_bound_1	" no, find the correct range
	dfld	pr2|arg_x
	tsx4	part_arcsine
	tra	0,x3		" Return to entry

above_bound_1:
	fcmg	bound_2,x2	" is abs_x in the range [.5, .866)
	tpl	above_bound_2	" no, find correct range
	dfmp	pr2|abs_x		" EAQ = abs_x**2
	fmp	two,x2		" EAQ = 2 * abs_x**2
	fsb	one,x2		" EAQ = 2 * abs_x**2 - 1
	tsx4	part_arcsine
	dfad	half_pi,x2	" EAQ = part_asin + pi/2
	fmp	=0.5,du		" EAQ = .5*part_asin + pi/4
	fszn	pr2|arg_x		" was arg_x negative
	tpl	0,x3		" no, return to entry
	fneg	0		" EAQ = -EAQ
	tra	0,x3		" Return to entry

above_bound_2:
	fcmg	bound_3,x2	" is abs_x in the range [.866, .966)
	tpl	above_bound_3	" no, find correct range
	dfmp	pr2|abs_x		" EAQ = abs_x**2
	dfstr	pr2|temp
	fmp	eight,x2		" EAQ = 8*abs_x**2
	fsb	eight,x2		" EAQ = 8*abs_x**2 - 8
	dfmp	pr2|temp		" EAQ = 8*abs_x**4 - 8*abs_x**2
	fad	one,x2		" EAQ = 8*abs_x**4 - 8*abs_x**2 + 1
	tsx4	part_arcsine
	dfad	three_pi_by_two,x2	" EAQ = part_asin + 3*pi/2
	dfmp	one_quarter,x2	" EAQ = part_asin/4 + 3*pi/8
	fszn	pr2|arg_x		" was arg_x negative
	tpl	0,x3		" no, return to entry
	fneg	0		" EAQ = -EAQ
	tra	0,x3		" return to entry

above_bound_3:
	dfcmg	bound_4,x2	" is abs_x in the range [.966, 1]
	tpnz	arcsine_domain_error
	fmp	=0.5,du		" EAQ = abs_x/2
	fneg	0		" EAQ = - abs_x/2
	fad	=0.5,du		" EAQ = .5 - abs_x/2 or (1-abs_x)/2

	epp5	pr3|0		" save the return address
	epp2	pr2|space_used	" increment PR2 for sqrt
	tsp3	double_square_root,x2
				" call sqrt function
	epp2	pr2|-space_used	" restore PR2
	epp3	pr5|0		" restore PR3
	tsx4	part_arcsine	" EAQ = sqrt ((1 - abs_x)/2)
	fmp	two,x2		" EAQ = 2*part_asin
	fneg	0		" EAQ = - 2*part_asin
	dfad	half_pi,x2	" EAQ = pi/2 - 2*part_asin
	fszn	pr2|arg_x		" was arg_x negative
	tpl	0,x3		" no, return to entry
	fneg	0		" EAQ = -EAQ
	tra	0,x3		" return to entry

" Transfer Table

double_square_root:
	tra	<double_square_root_>|[double_square_root_]
	nop
	tra	<double_square_root_>|[hfp_double_square_root_]


arcsine_domain_error:		" abs_x > 1
	ldq	65,dl
	tsx0	<call_math_error_>|[call_math_error_]
	fld	=0.0,du
	tra	pr3|0		" return to caller

" This next subroutine calculates the arcsine of a value in the
" range [0, .5].

part_arcsine:
	fcmg	formula_bound,x2	" Can we use a short polynomial?
	tmi	small_formula	" Yup.

	dfstr	pr2|y
	dfmp	pr2|y
	dfstr	pr2|yy		" yy = y*y
	dfad	q5,x2		" EAQ = q5+yy
	dfmp	pr2|yy		" EAQ = yy*(q5+yy)
	dfad	q4,x2		" EAQ = q4+yy*(q5+yy)
	dfmp	pr2|yy		" EAQ = yy*(q4+yy*(q5+yy))
	dfad	q3,x2		" EAQ = q3+yy*(q4+yy*(q5+yy))
	dfmp	pr2|yy		" EAQ = yy*(q3+yy*(q4+yy*(q5+yy)))
	dfad	q2,x2		" EAQ = q2+yy*(q3+yy*(q4+yy*(q5+yy)))
	dfmp	pr2|yy		" EAQ = yy*(q2+yy*(q3+yy*(q4+yy*(q5+yy))))
	dfad	q1,x2		" EAQ = q1+yy*(q2+yy*(q3+yy*(q4+yy*(q5+yy))))
	dfmp	pr2|yy		" EAQ = yy*(q1+yy*(q2+yy*(q3+yy*(q4+yy*(q5+yy)))))
	dfad	q0,x2		" EAQ = q0+yy*(q1+yy*(q2+yy*(q3+yy*(q4+yy*(q5+yy)))))
	dfstr	pr2|q
	dfld	pr2|yy
	dfmp	p6,x2		" EAQ = yy*p6
	dfad	p5,x2		" EAQ = p5+yy*p6
	dfmp	pr2|yy		" EAQ = yy*(p5+yy*p6)
	dfad	p4,x2		" EAQ = p4+yy*(p5+yy*p6)
	dfmp	pr2|yy		" EAQ = yy*(p4+yy*(p5+yy*p6))
	dfad	p3,x2		" EAQ = p3+yy*(p4+yy*(p5+yy*p6))
	dfmp	pr2|yy		" EAQ = yy*(p3+yy*(p4+yy*(p5+yy*p6)))
	dfad	p2,x2		" EAQ = p2+yy*(p3+yy*(p4+yy*(p5+yy*p6)))
	dfmp	pr2|yy		" EAQ = yy*(p2+yy*(p3+yy*(p4+yy*(p5+yy*p6))))
	dfad	p1,x2		" EAQ = p1+yy*(p2+yy*(p3+yy*(p4+yy*(p5+yy*p6))))
	dfmp	pr2|yy		" EAQ = yy*(p1+yy*(p2+yy*(p3+yy*(p4+yy*(p5+yy*p6)))))
	dfad	p0,x2		" EAQ = p0+yy*(p1+yy*(p2+yy*(p3+yy*(p4+yy*(p5+yy*p6)))))
	dfmp	pr2|y		" EAQ = y*p
	dfdv	pr2|q		" EAQ = y*p/q
	tra	0,x4		" Return from part_arcsine

small_formula:
	fcmg	epsilon,x2	" Is any calculation necessary?
	tmi	0,x4		" No. Small number. Just return.

	dfstr	pr2|y
	dfmp	pr2|y
	dfstr	pr2|yy		" yy = y*y
	dfad	qq3,x2		" EAQ = qq3+yy
	dfmp	pr2|yy		" EAQ = yy*(qq3+yy)
	dfad	qq2,x2		" EAQ = qq2+yy*(qq3+yy)
	dfmp	pr2|yy		" EAQ = yy*(qq2+yy*(qq3+yy))
	dfad	qq1,x2		" EAQ = qq1+yy*(qq2+yy*(qq3+yy))
	dfmp	pr2|yy		" EAQ = yy*(qq1+yy*(qq2+yy*(qq3+yy)))
	dfad	qq0,x2		" EAQ = qq0+yy*(qq1+yy*(qq2+yy*(qq3+yy)))
	dfstr	pr2|qq
	dfld	pr2|yy		" EAQ = yy
	dfmp	pp3,x2		" EAQ = yy*pp3
	dfad	pp2,x2		" EAQ = pp2+yy*pp3
	dfmp	pr2|yy		" EAQ = yy*(pp2+yy*pp3)
	dfad	pp1,x2		" EAQ = pp1+yy*(pp2+yy*pp3)
	dfmp	pr2|yy		" EAQ = yy*(pp1+yy*(pp2+yy*pp3))
	dfad	pp0,x2		" EAQ = pp0+yy*(pp1+yy*(pp2+yy*pp3))
	dfmp	pr2|y		" EAQ = y*pp
	dfdv	pr2|qq		" EAQ = y*pp/qq
	tra	0,x4		" Return from part_arcsine

" Constants:  (Hex values are given in octal)

	even
p0:	dec	.53849190607669366114d03
	oct	006103237366,616400151323
p1:	dec	-.15568739285411701684d04
	oct	007475310043,070061210252
p2:	dec	.16924399892857508174d04
	oct	006323434121,443221617414
p3:	dec	-.85268159839800034482d03
	oct	007625324301,304347124404
p4:	dec	.19645634637912159609d03
	oct	004610723230,734277152672
p5:	dec	-.17029424630829249399d02
	oct	005735741675,011634416260
p6:	dec	.27091596623264652521d00
	oct	000212552775,356736703045
pp0:	dec	.44005608326359226844d03
	oct	006067003455,571015755233
pp1:	dec	-.67036113799980663993d03
	oct	007654150706,165612763251
pp2:	dec	.28631086818069079154d03
	oct	006043623712,416472674304
pp3:	dec	-.30034170270689843770d02
	oct	005703735004,737634420665
q0:	dec	.53849190607669366114d03
	oct	006103237366,616400151323
q1:	dec	-.16466225795539524453d04
	oct	007462130117,240261166607
q2:	dec	.19264901929223241968d04
	oct	006360637276,510424163636
q3:	dec	-.10743064209874076849d04
	oct	007571554307,144720432455
q4:	dec	.28817015748752908509d03
	oct	006044012707,560730155410
q5:	dec	-.32508459966449899385d02
	oct	005676767254,425030557322
qq0:	dec	.44005608326359226844d03
	oct	006067003455,571015755233
qq1:	dec	-.74370381854373868468d03
	oct	007643022751,214210513617
qq2:	dec	.37725729835987782917d03
	oct	006057120357,116121765360
qq3:	dec	-.56777961133209015623d02
	oct	005616343274,240351671144

bound_2:	dec	.866025404d0
hfp_bound_2:
	oct	000673317272,000000000000	" sin(pi/3)

bound_3:	dec	.965925826d0
	oct	000756433521,000000000000	" sin(5*pi/12)

bound_4:	dec	1.0d0
hfp_bound_4:
	oct	002040000000,000000000000

three_pi_by_two:
	dec 	.471238898038468985787763d01
	oct	002226627617,714620722152
one_quarter:
	dec	0.25d0
	oct	000200000000,000000000000
one:	dec	1.0d0
	oct	002040000000,000000000000
two:	dec	2.0d0
	oct	002100000000,000000000000
eight:	dec	8d0
	oct	002400000000,000000000000
formula_bound:
	dec	0.13052619d0
	oct	000102650520,000000000000
epsilon:	dec	5.7031627d-10
	oct	762116304341,000000000000

	end
