/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Initially coded in May 1972 by V. Voydock */
/* Modified June 1974 by B. Wolman to not pad buffer */
/* Last modified:
   07/28/77 by S. Webber to merge with rest_of_ioa_
   10/28/77 by M. R. Jordan to correct call to ios_signal_ ,signalling of ioa_error,
   and padding of varying return strings.
   Modified August 1979 by Larry Johnson for unlimited ioa output.
   Modified November 1981 by Benson I. Margulies for better error message
		         and correct entrypoint declarations.
   Modified September 1982 by BIM for Bootload Multics.
   Modified August 1983 by Keith Loepere for new bce switches.
   Modified 840309 to call arg_list_ptr_ instead of cu_$arg_list_ptr... -E. A. Ranzenbach
*/


/****^  HISTORY COMMENTS:
  1) change(85-09-19,Coren), approve(85-09-19,MCR7266),
     audit(85-09-24,Margolin), install(86-02-20,MR12.0-1023):
     Add general_rs_control_string entry.
                                                   END HISTORY COMMENTS */


%page;
/* format: style2 */
ioa_:
     procedure options (variable);

/* This procedure is the PL/I portion of the standard Multics output string formatting
   routine; it provides varous interfaces to formline_, which is the ALM portion. */

/* Parameters */

	dcl     arg		 char (*);
	dcl     aiocbp		 ptr;
	dcl     a_arglist_ptr	 ptr;
	dcl     a_cs_argno		 fixed bin;
	dcl     a_ff_argno		 fixed bin;
	dcl     a_control_string	 char (*);
	dcl     retstring		 char (*);
	dcl     rlen		 fixed bin (21);
	dcl     padsw		 bit (1) aligned;
	dcl     nlsw		 bit (1) aligned;

/* Automatic */

	dcl     buffer_ptr		 ptr;
	dcl     buffer_length	 fixed bin (21);
	dcl     pad		 fixed bin;
	dcl     cs_argno		 fixed bin;
	dcl     ff_argno		 fixed bin;
	dcl     switch_name		 char (32);
	dcl     iocbp		 ptr;
	dcl     code		 fixed bin (35);
	dcl     number_of_args	 fixed bin;
	dcl     arg_list_arg_count	 fixed bin;
	dcl     orig_arg_list_ptr	 pointer;
	dcl     orig_ff_argno	 fixed bin;
	dcl     system_areap	 ptr;
	dcl     orig_arg		 fixed bin;
	dcl     this_arg		 fixed bin;
	dcl     cs_entry		 bit (1);
	dcl     output_length	 fixed bin (21);
	dcl     rs_type		 fixed bin;
	dcl     arg_list_ptr	 ptr;
          dcl     my_arg_list_ptr        ptr;
	dcl     add_nl		 bit (1) aligned;

/* Builtins */

	dcl     (addr, addrel, bin, currentsize, length, min, null, string, substr)
				 builtin;

	dcl     cleanup		 condition;

/* Static */

	dcl     nl		 char (1) internal static options (constant) initial ("
");						/* New line char */

/* Based */

	dcl     system_area		 area (1024) based (system_areap);

	dcl     1 rs_arg_list	 based (arg_list_ptr),
		2 header		 fixed bin (71),
		2 control_string_ptr ptr,
		2 return_string_ptr	 ptr,
		2 return_len_ptr	 ptr;

	dcl     return_string	 char (131071) based (buffer_ptr);
	dcl     return_string_length	 fixed bin based (rs_arg_list.return_len_ptr);
	dcl     varying_string_length	 fixed bin based (addrel (buffer_ptr, -1));


/* External */

	dcl     iox_$user_output	 ext static ptr;

/* Entries */

	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     iox_signal_		 entry (ptr, fixed bin (35));
	dcl     iox_$find_iocb	 entry (char (*), ptr, fixed bin (35));
	dcl     arg_list_ptr_	 entry returns (ptr);

	dcl     formline_		 entry (fixed bin, fixed bin, ptr, fixed bin (21), fixed bin, ptr);
	dcl     formline_$switch	 entry (fixed bin, fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     signal_		 entry () options (variable);

	dcl     sys_info$service_system
				 bit (1) aligned external;
	dcl     bce_data$put_chars	 external entry (ptr, ptr, fixed bin, fixed bin (35)) variable;


	add_nl = "1"b;
	go to COMMON;

nnl:
     entry options (variable);

	add_nl = "0"b;


COMMON:
	if sys_info$service_system
	then iocbp = iox_$user_output;
	else iocbp = addr (bce_data$put_chars);
	call formline_$switch (1, 2, iocbp, bin (add_nl), code);
	if code ^= 0
	then do;
		if ^sys_info$service_system
		then return;
		call iox_signal_ (iocbp, code);
		go to COMMON;
	     end;

	return;



/* The following entries return a formatted string */

rs:
     entry options (variable);
	add_nl = "1"b;
	pad = 1;
	goto COMMON_RS;
rsnnl:
     entry options (variable);
	add_nl = "0"b;
	pad = 1;
	goto COMMON_RS;
rsnp:
     entry options (variable);
	add_nl = "1"b;
	pad = 0;
	goto COMMON_RS;
rsnpnnl:
     entry options (variable);
	add_nl = "0"b;
	pad = 0;
	goto COMMON_RS;

COMMON_RS:
	arg_list_ptr = arg_list_ptr_ ();
	buffer_ptr = rs_arg_list.return_string_ptr;

	rs_type = GET_RETURN_TYPE ();

	if rs_type = varying_char_dtype
	then pad = 0;
	else if rs_type ^= char_dtype
	then call signal_error;

	call work_in_buffer (1, 4, pad, arg_list_ptr);

	return_string_length = output_length;
	if rs_type = varying_char_dtype
	then varying_string_length = output_length;
	return;
%page;
/* The following entry is the generalized entry for returning formatted strings */


general_rs:
     entry (a_arglist_ptr, a_cs_argno, a_ff_argno, retstring, rlen, padsw, nlsw);

	arg_list_ptr = a_arglist_ptr;
	cs_argno = a_cs_argno;
	ff_argno = a_ff_argno;
	cs_entry = "0"b;
	go to GENERAL_RS_JOIN;

/* The following entry is like general_rs except that the control string is passed
   explicitly, rather than being in the referenced argument list */

general_rs_control_string:
     entry (a_arglist_ptr, a_control_string, a_ff_argno, retstring, rlen, padsw, nlsw);

	orig_arg_list_ptr = a_arglist_ptr;
	orig_ff_argno = a_ff_argno;
	cs_argno = -1;
	cs_entry = "1"b;

GENERAL_RS_JOIN:
	buffer_ptr = addr (retstring);
	buffer_length = length (retstring);
	add_nl = nlsw;

	if cs_entry				/* control string supplied */
	then do;

/* We have to build a copy of the argument list (for passing to formline_) that contains
   the control string and the data args. */

		number_of_args = orig_arg_list_ptr -> arg_list.arg_count;
		system_areap = get_system_free_area_ ();
		arg_list_ptr = null ();
		on cleanup
		     begin;
			if arg_list_ptr ^= null ()
			then free arg_list_ptr -> arg_list;
		     end;

		arg_list_arg_count = number_of_args - orig_ff_argno + 2;
						/* the original data args, + 1 for the control string */
		allocate arg_list in (system_area) set (arg_list_ptr);

		arg_list_ptr -> arg_list.arg_count = arg_list_arg_count;
		arg_list_ptr -> arg_list.pad1 = "0"b;
		arg_list_ptr -> arg_list.call_type = Interseg_call_type;
		arg_list_ptr -> arg_list.desc_count = arg_list_arg_count;
		arg_list_ptr -> arg_list.pad2 = "0"b;

		arg_list_ptr -> arg_list.arg_ptrs (1) = addr (a_control_string);

		orig_arg = orig_ff_argno;
		do this_arg = 2 to arg_list_arg_count;	/* copy the other arg pointers */
		     arg_list_ptr -> arg_list.arg_ptrs (this_arg) = orig_arg_list_ptr -> arg_list.arg_ptrs (orig_arg);
		     orig_arg = orig_arg + 1;
		end;

/* Now copy the descriptor for the control string from *this entry's* argument list */

		my_arg_list_ptr = arg_list_ptr_ ();
		arg_list_ptr -> arg_list.desc_ptrs (1) = my_arg_list_ptr -> arg_list.desc_ptrs (2);

/* Now copy in the other descriptor pointers */

		orig_arg = orig_ff_argno;

		if orig_arg_list_ptr -> arg_list.call_type = Envptr_supplied_call_type
		then do this_arg = 2 to arg_list_arg_count;
			arg_list_ptr -> arg_list.desc_ptrs (this_arg) =
			     orig_arg_list_ptr -> arg_list_with_envptr.desc_ptrs (orig_arg);
			orig_arg = orig_arg + 1;
		     end;

		else do this_arg = 2 to arg_list_arg_count;
			arg_list_ptr -> arg_list.desc_ptrs (this_arg) =
			     orig_arg_list_ptr -> arg_list.desc_ptrs (orig_arg);
			orig_arg = orig_arg + 1;
		     end;

		cs_argno = 1;
		ff_argno = 2;
	     end;

	call work_in_buffer (cs_argno, ff_argno, bin (padsw, 1), arg_list_ptr);

	rlen = output_length;
	if cs_entry
	then free arg_list_ptr -> arg_list;
	return;
%page;
/* The following entries use an I/O switch or switch name as target */

ioa_switch:
     entry (aiocbp);
	add_nl = "1"b;
	iocbp = aiocbp;
	goto FOUND_SWITCH_PTR;
ioa_switch_nnl:
     entry (aiocbp);
	add_nl = "0"b;
	iocbp = aiocbp;
	goto FOUND_SWITCH_PTR;
ioa_stream:
     entry (arg);
	add_nl = "1"b;
	goto FIND_SWITCH_PTR;
ioa_stream_nnl:
     entry (arg);
	add_nl = "0"b;
	goto FIND_SWITCH_PTR;

FIND_SWITCH_PTR:
	switch_name = arg;
	if sys_info$service_system
	then call iox_$find_iocb (switch_name, iocbp, (0));
	else iocbp = addr (bce_data$put_chars);

FOUND_SWITCH_PTR:
	call formline_$switch (2, 3, iocbp, bin (add_nl), code);
	if code ^= 0
	then do;
		if ^sys_info$service_system
		then return;
		call iox_signal_ (iocbp, code);
		go to FOUND_SWITCH_PTR;
	     end;
	return;
%page;
/* Subroutine to do the actual work when the data is returned to the callers buffer */

work_in_buffer:
     proc (cs_arg_no, ff_arg_no, pad, ap);

	dcl     (cs_arg_no, ff_arg_no, pad)
				 fixed bin;
	dcl     ap		 ptr;


	output_length = buffer_length;
	call formline_ (cs_arg_no, ff_arg_no, buffer_ptr, output_length, pad, ap);

	if add_nl
	then do;
		output_length = min (output_length + 1, buffer_length);
		substr (return_string, output_length, 1) = nl;
	     end;

	return;

     end work_in_buffer;

signal_error:
     procedure;

%include condition_info_header;
	declare 1 CI		 aligned like condition_info_header;
	declare error_table_$bad_arg	 external static fixed bin (35);

	CI.length = currentsize (CI);
	CI.version = 1;
	string (CI.action_flags) = ""b;
	CI.cant_restart = "1"b;
	CI.info_string =
	     "A return string argument to an ioa_$rs* entrypoint was not a character or varying character string.";
	CI.status_code = error_table_$bad_arg;
	call signal_ ("ioa_error", null (), addr (CI));
	return;
     end signal_error;

/* This procedure sets buffer_length as a side effect */

GET_RETURN_TYPE:
     procedure returns (fixed bin);

	if arg_list_ptr -> arg_list.desc_count = 0
	then return (-1);
	if arg_list_ptr -> arg_list.call_type = Interseg_call_type
	then arg_descriptor_ptr = arg_list_ptr -> arg_list.desc_ptrs (2);
	else arg_descriptor_ptr = arg_list_ptr -> arg_list_with_envptr.desc_ptrs (2);
	buffer_length = arg_descriptor.size;
	return (arg_descriptor.type);
     end GET_RETURN_TYPE;


%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include std_descriptor_types;
     end ioa_;
