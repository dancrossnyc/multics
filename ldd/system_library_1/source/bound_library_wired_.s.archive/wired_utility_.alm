" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1983 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" 

	include	stack_header

" 

	include	stack_frame

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"							"
"	caller						"
"							"
"	Primitive to return a pointer to the caller of the	"
"	program which called this primitive.			"
"							"
"	Usage:						"
"							"
"	caller_ptr = wired_utility$caller ();			"
"							"
"							"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	caller

caller:	eppbp	sp|stack_frame.prev_sp,*	get ptr to previous stack frame
	eppbp	bp|stack_frame.return_ptr,*	get caller
	spribp	ap|2,*			return the pointer
	short_return

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"							"
"	stacq						"
"							"
"	Primitive to perform an stacq function analogous		"
"	to the stac builtin function.				"
"							"
"	Usage:						"
"							"
"	bit_1 = stacq (word_ptr, old_value, new_value);		"
"							"
"	word_ptr is a pointer to the word to change		"
"	new_value is the new value to place in the word if	"
"	old_value is the current contents of the word.		"
"							"
"	If the current contents of the word pointed to by word_ptr	"
"	is not the same as old_value the function returns "0"b,	"
"	if they match the function returns "1"b.		"
"							"
"							"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	stacq

stacq:	ldq	ap|4,*		fetch the expected old value
	lda	ap|6,*		fetch the new value to store in the cell
	eppbp	ap|2,*		get pointer to input pointer

	stacq	bp|0,*		try to store the new value in the cell
	tze	success		if zero indicator set, the store went through (matched old value)
	stz	ap|8,*		return "0"b
	short_return

success:
	lda	=o400000,du	return "1"b
	sta	ap|8,*
	short_return

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"							"
"	ldac						"
"							"
"	Primitive to use ldac instruction to load and clear a word	"
"	using one memory operation.				"
"							"
"	Usage:						"
"							"
"	word = ldac (word_ptr);				"
"							"
"	word_ptr is a pointer to the word to load and clear	"
"	word receives contents of the word pointed to by word_ptr	"
"							"
"							"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	ldac

ldac:	eppbp	ap|2,*		get pointer to input pointer
	ldac	bp|0,*		load and clear the word
	sta	ap|4,*		return the value of the word
	short_return

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"							"
"	get_sp						"
"							"
"	Primitive to return the current value of sp to the caller	"
"							"
"	Usage:						"
"							"
"	sp = wired_utility_$get_sp;				"
"							"
"	sp will receive the value of the stack pointer		"
"							"
"							"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	get_sp

get_sp:	sprisp	ap|2,*		return the value of sp to the caller
	short_return

" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"							"
"	grow_stack_frame					"
"	shrink_stack_frame					"
"							"
"	Primitives to increase and decrease the size of the	"
"	caller's stack frame.  Use these entries with care!	"
"							"
"	Usage:						"
"							"
"	p = wired_utility_$grow_stack_frame (size);		"
"	call wired_utility_$shrink_stack_frame (endp);		"
"							"
"	grow_stack_frame will increase the stack fame by size words	"
"	and return a pointer to the previous end of the frame.	"
"	shrink stack_frame will shrink the frame back to the	"
"	supplied endp.					"
"							"
"							"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	grow_stack_frame
	segdef	shrink_stack_frame

grow_stack_frame:
	eppbp	sb|stack_header.stack_end_ptr,*	bp -> end of frame
	spribp	ap|4,*		return end pointer

	lda	ap|2,*		get size to grow frame
	eaa	bp|0,al		AU is new end pointer
adjust_stack_frame:
	eaa	15,au		round to 0 mod 16
	ana	=o777760,du	..
	eawpbp	0,au		bp -> new end of frame
	spribp	sb|stack_header.stack_end_ptr	set new end of frame
	spribp	sp|stack_frame.next_sp
	spribp	sp|4		set for PL/1
	short_return

shrink_stack_frame:
	eppbp	sb|stack_header.stack_end_ptr,*	bp -> end of frame
	eppbb	ap|2,*		bb -> new end point
	eaa	bb|0,*		stack end offset in AU
	tra	adjust_stack_frame	use common code


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"
"	get_ring_ - this entry returns the number of the current ring
"
"	declare get_ring_ entry(fixed bin(3));
"	call get_ring_(ring);
"
"	1. ring	the number of the current ring. (Output)
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	get_ring_
get_ring_:
	epaq	*		get ring number from effective pointer
	ana	=o7,dl		leave only ring number in a-reg
	sta	ap|2,*		return to caller
	short_return



" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"
"	arg_count_ - this entry returns the number of arguments with which the
"		calling procedure was invoked.
"
"	declare arg_count_ entry(fixed bin);
"	call arg_count_(args);
"
"	1. args	the number of arguments. (Output)
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	arg_count_
arg_count_:
	lda	sp|stack_frame.arg_ptr,* get argument list header
	arl	18+1		shift right and divide by two
	sta	ap|2,*		store in argument
	short_return

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"         arg_list_ptr_
"
"         declare arg_list_ptr entry returns (pointer);
"         alp = arg_list_ptr_ ();
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	segdef	arg_list_ptr_
arg_list_ptr_:
	epp1	sp|stack_frame.arg_ptr,* Pointer to arglist header
	spri1	ap|2,*
	short_return

	end
