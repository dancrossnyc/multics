" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"	evaluate a ** k for integer k
"		fld	a	(or dfld)
"		epp1	k
"		epp2	work
"		tsp3	entry
"
"	Modified 770412 by PG to fix 1602 (overflow indicator not reset before rpt)
"	Modified 790904 by PES to fix fortran bug 231 (2**-127 takes overflow.
"	Modified 831221 by HH to work in both BFP and HFP modes.
"
	segdef	single_power_integer_
	segdef	double_power_integer_
	segdef	power_integer_
	segdef	hfp_single_power_integer_
	segdef	hfp_double_power_integer_
	segdef	hfp_power_integer_
"
	equ	a,0
	equ	f,2
	equ	k,4
	equ	sign_k,5
"
single_power_integer_:
double_power_integer_:
hfp_single_power_integer_:
hfp_double_power_integer_:
	fcmp	=0.0,du		set indicators for a
	dfst	2|a
	tze	test		transfer if a = 0
	lda	1|0		get k
	tze	fequ1		f = 1.0 if k = 0
"
"	power_ comes here when exponent is found to be integral
"	if entered here, k is in the a register--the value of k
"	is NOT valid at 1|0, and the work area at 2|<n> has been
"	set up.
"
power_integer_:
hfp_power_integer_:
	sta	2|sign_k		save k (not necessarily found at 1|0)
	tpl	invert_a		if k negative, invert a, get abs(k)
	fld	=0.5,du
	fad	=0.5,du
	dfdv	2|a		if this over-/under-flows, would have anyhow
	dfst	2|a
	lca	2|sign_k		this is abs(k)
invert_a:
	cmpa	20,dl
	trc	patha
	sba	1,dl
	tze	pathd		answer = a
	als	10		shift tally into position for rptx: C(X0)0,7
	eax0	1,al		set rptx to terminate on all overflows
	eax1	0		index 1 is a placeholder for RPT...make it zero
	dfld	2|a		initialize C(EAQ) to a
	teo	1,ic		clear exponent overflow indicator
	tov	1,ic		clear overflow indicator
	rptx	0,0		repeat dfmp until overflow or tally runout
	dfmp	2|a,1		multiply C(EAQ) by a
done:	fad	=0.0,du		set indicators
	tra	3|0
"
patha:	sta	2|k
	fld	=0.5,du
	fad	=0.5,du
	dfst	2|f
pathc:	lda	2|k
	cana	1,dl		is k even
	tze	even
	dfld	2|a
	dfmp	2|f
	dfst	2|f
even:	lda	2|k
	arl	1		k = k / 2
	tze	pathb
	sta	2|k
	dfld	2|a
	dfmp	2|a
	dfst	2|a		a = a * a
	tra	pathc
pathb:	dfld	2|f
	tra	done
pathd:	dfld	2|a
	tra	done
"
fequ1:	fld	=0.5,du
	fad	=0.5,du
	tra	3|0
"
test:	szn	1|0		special case if a = 0
	tze	err1
	tpl	3|0		0 ** k = 0
	ldq	4,dl		0 ** 0
err:	tsx0	<call_math_error_>|[call_math_error_]
	fld	=0.0,du
	tra	3|0
"
err1:	ldq	3,dl
	tra	err
"
	end
