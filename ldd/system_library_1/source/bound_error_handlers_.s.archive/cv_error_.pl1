/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/*
   Function to return an error code from an error name.  This entry can be called by programs written in languages
   which can not directly reference names of the form "reference$entry".
*/
/* Originally written 22 March 1982 by Chris Jones */
/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
cv_error_:
     proc;
	signal bad_call_;				/* not a valid entry */
	return;

name:
     entry (error_name, converted_code, code);

dcl	code		   fixed bin (35) parameter;	/* the result of this operation */
dcl	converted_code	   fixed bin (35) parameter;	/* the answer to the question */
dcl	error_name	   char (*) parameter;	/* the error name (e.g. "error_table_$bad_arg" */

dcl	et_ptr		   ptr;			/* pointer to the error code */

dcl	based_code	   fixed bin (35) based (et_ptr);
dcl	1 cc		   aligned based,		/* this structure is laid over converted_code */
	  2 segno		   bit (18) unal,
	  2 pad		   bit (18) unal;

dcl	cv_ptr_		   entry (char (*), fixed bin (35)) returns (ptr);
dcl	cv_ptr_$terminate	   entry (ptr);
dcl	hcs_$make_ptr	   entry (ptr, char (*), char (*), ptr, fixed bin (35));

dcl	error_table_$	   fixed bin (35) ext static;
dcl	error_table_$bad_arg   fixed bin (35) ext static;

dcl	any_other		   condition;
dcl	bad_call_		   condition;
dcl	cleanup		   condition;

dcl	(addr, after, baseno, before, null)
			   builtin;

	call hcs_$make_ptr (null (), before (error_name, "$"), after (error_name, "$"), et_ptr, code);
	if code ^= 0 then
	     return;

	et_ptr = null ();
	on cleanup call CLEAN_UP;

	et_ptr = cv_ptr_ (error_name, code);
	if code ^= 0 then do;
ERROR_RETURN:
	     call CLEAN_UP;
	     return;
	end;

	on any_other
	     begin;
		code = error_table_$bad_arg;
		goto ERROR_RETURN;
	     end;

	converted_code = based_code;
	if baseno (et_ptr) ^= baseno (addr (error_table_$)) then
	     addr (converted_code) -> cc.segno = baseno (et_ptr);
						/* put in segment number for non error_table_ codes */
	call CLEAN_UP;
	code = 0;
	return;

CLEAN_UP:
     proc;

	if et_ptr ^= null () then
	     call cv_ptr_$terminate (et_ptr);
	et_ptr = null ();

     end CLEAN_UP;

     end cv_error_;
