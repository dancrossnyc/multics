/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


special_messages_: proc (a_mcp, a_mtep, linfo, crlsw, no_restart);

/* this procedure formats special messages which contain dynamic information */
/* initially coded by M. Weaver 5 June 1971 */
/* modified by M. Weaver 16 August 1971 */
/* modified by M. Weaver 18 October 1973 */
/* modified by M. Weaver 17 June 1974 for storage */
/* modified by M. Weaver 2 May 1977 for lot_fault */
/* modified by Benson I. Margulies 1/82 for improved oobstk codes */

/* Parameters */

dcl  a_mcp ptr;
dcl  a_mtep ptr;
dcl  linfo char (500) var;
dcl  no_restart bit (1) aligned;

dcl 1 pr_err aligned based (pre_infop),			/* interpretation of errcode for page read error */
    2 device_addr bit (18) unal,
    2 add_type bit (4) unal,
    2 pad bit (5) unal,
    2 pvtx fixed bin (8) unal;

dcl (lng, i) fixed bin;
dcl  segno fixed bin (18);
dcl  ecode fixed bin (35);
dcl  segptr ptr;
dcl  error_table_$noentry ext fixed bin (35);
dcl  error_table_$stack_overflow ext fixed bin (35);
dcl (objp, pre_infop) ptr;

dcl  fslinfo char (100) aligned;			/* for convert_status_code_ */
dcl  sinfo char (8) aligned;
dcl (dirname, pathname) char (168);
dcl  ename char (32);

%include disk_table;
%include add_type;

dcl  string1 char (72) var;

dcl (ioa_$rs, ioa_$rsnnl) entry options (variable);
dcl  convert_status_code_ ext entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  disassemble ext entry (ptr, char (72) var, fixed bin);
dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  mdc_$read_disk_table entry (ptr, fixed bin (35));

dcl (addr, addrel, baseptr, bin, divide, fixed, null, ptr, substr) builtin;

dcl  crlsw bit (1) unal;

/*  */
	mcp = a_mcp;
	mtep = a_mtep;
	scup = addr (mc.scu);			/* get ptr to saved control unit */
	no_restart = "0"b;

	if mte.cur_inst then do;
	     if ^crlsw then objp = ptr (baseptr (bin (scup -> scu.ppr.psr, 15)),
		scup -> scu.ilc);			/* get inst from text */
	     else do;				/* must get instruction from scu itself */
		if substr (scup -> scu.ilc, 18, 1) = "1"b then i = 1;
		else i = 0;
		objp = addr (scup -> scux.instr (i));
	     end;
	     call disassemble (objp, string1, 0);	/* get inst in inst format */
	     call ioa_$rsnnl ("Current instruction is:^/^a", linfo, lng, string1);
	end;

	else if mte.segferr then do;
	     ecode = mc.errcode;
	     if ecode = error_table_$noentry then fslinfo = "Segment no longer exists.";
	     else call convert_status_code_ (ecode, sinfo, fslinfo);
	     linfo = fslinfo;
	end;

	else if mte.pagerr then do;			/* page fault error */
	     pre_infop = addr (mcp -> mc.errcode);	/* errcode is interpreted differently here */
	     if mcp -> mc.errcode = -1 then return;	/* no device */
	     if (pr_err.add_type & add_type.non_null) = "0000"b then return; /* null */
	     if pr_err.add_type & add_type.pd then do;
		call ioa_$rs ("from paging device address ^o.", linfo, lng, pr_err.device_addr);
		return;
	     end;
	     call hcs_$make_seg ("", "disk_table.copy", "", 1010b, dtp, ecode);
	     if dtp = null then return;
	     call mdc_$read_disk_table (dtp, ecode);
	     if ecode ^= 0 then return;
	     if pr_err.pvtx > dt.n_entries | pr_err.pvtx <= 0 then return;
	     dtep = addr (dt.array (pr_err.pvtx));
	     if dte.lvx > dt.n_lv_entries | dte.lvx <= 0 then return;
	     lvep = addr (dt.lv_array (dte.lvx));
	     call ioa_$rs ("from ^a address ^o. Volume ^a of lv ^a.", linfo, lng,
		dte.drive_name, bin (pr_err.device_addr, 18), dte.pvname, lve.lvname);
	end;

	else if mte.outbounds then do;
	     call convert_status_code_ ((mc.errcode), sinfo, fslinfo);
	     linfo = fslinfo;
	end;

	else if mte.store then do;
	     if scup -> scu.ir.bm
	     then linfo = "Possible attempt to reference nonexistent memory.";
	     else linfo = "Attempt to reference out of bounds in BAR mode.";
	end;

	else if mte.storage then do;
	     if mcp = null
	     then linfo = "System storage for based and controlled variables is full.";
	     else do;				/* detected by hardware on stack */
		call convert_status_code_ ((mc.errcode), sinfo, fslinfo);
		linfo = fslinfo;
		if mc.errcode = error_table_$stack_overflow /* noplace to put the info */
		then no_restart = "1"b;
		end;
	     end;


	else if mte.lotfault then do;
	     if crlsw then pathname = "";
	     else do;
		sb = ptr (mc.prs (6), 0);
		segno = bin (scup -> scu.ca, 18) - bin (rel (sb -> stack_header.lot_ptr), 18);
		segptr = baseptr (segno);
		call hcs_$fs_get_path_name (segptr, dirname, lng, ename, ecode);
		if ecode = 0 then call ioa_$rsnnl ("^a^[>^]^a", dirname, lng ^= 1, ename);
		else pathname = "";
	     end;
	     linfo = "Attempt to execute non-object segment " || pathname;
	end;

	return;
						/*  */

%include mc;
%include stack_header;
%include message_table_entry;
     end special_messages_;
