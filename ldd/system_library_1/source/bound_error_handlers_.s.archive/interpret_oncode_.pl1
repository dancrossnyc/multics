/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


interpret_oncode_:	proc(on_code, string);

/* This procedure returns the message corresponding to a given pl1 oncode value */
/* it references a list made up from P. Belmont's 3 lists */
/* coded  by M.B. Weaver 73/5/3 */
/* modified 77/03/08 by M. Weaver to increase size of oncode_messages_ */

declare	(lng, i, j, k) fixed bin;
declare	on_code fixed bin(35);
declare	(index, substr) builtin;
declare	nl char(1) int static init("
");
declare	nlnl char(2) aligned int static init("

");
declare	string char(150) var;
declare	oncode_messages_$ char(65536) ext aligned;
declare	oncode_message_string char (om_length) based (addr (oncode_messages_$));
declare	om_length fixed bin static init (65536);
declare	first bit (1) aligned static init ("1"b);
declare	ioa_$rs entry options(variable);
declare	convert_binary_integer_$decimal_string entry(fixed bin(35)) returns(char(12) var);

/* * * * * * * * * * * * * * * * * * * * * */

/* a typical message in oncode_messages_ follows:

205 [CTN]Character other than sign or digit follows
"e" of exponent field.

Messages are located by the oncode value and delimited by a double new-line.
The name in [] indicates the module signalling the error.
*/

	if first then do;				/* find real length of oncode_messages_$ */
	     om_length = index (oncode_messages_$, nl || "[END]");
	     first = "0"b;
	end;

	/*  find beginning of message */

	i = index(oncode_message_string, nl || convert_binary_integer_$decimal_string(on_code));

	if i = 0 then go to error_return;

	/* find length of message */

	j = index(substr(oncode_message_string, i, 300), nlnl);
	if j = 0 then go to error_return;

	/* find beginning of relevant part of message */

	k = index(substr(oncode_message_string, i, j), "]");
	if k = 0 then k = 1;			/* print whole message anyway */

	/* fill in string argument */

	string = substr(oncode_message_string, i+k, j - k - 1);

	return;

error_return:				/* let users know so it will be reported */
	call ioa_$rs("There is no message for oncode = ^d. Contact pl1 maintainence.",
	string, lng, on_code);

	return;

	end;
