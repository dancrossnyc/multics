/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7420), audit(86-11-12,Zwick),
     install(86-11-20,MR12.0-1222):
     special cased error code invalid_ptr_target to get a usefull message.
                                                   END HISTORY COMMENTS */


linkage_error_: proc (mcptr, lngsw, lsp, sptr, pname1, pname2, optr, lng);

/* last modified by M. Weaver 21 August 1970 */
/* last modified by M. Weaver 17 October 1973 */
/* modified 10/76 by M. Weaver  to improve messages for types 1 and 5 */
/* modified 11/77 by M. Weaver to improve messages for ext variables and ec = bigger_ext_variable in particular */
/* modified 21 Feb 80 JRDavis MCR 4347 remove red-shift */
/* Modified 831006 BIM to change call from hcs_$set_ext_variable to just set_ext_variable_ */

/* parameters */

	dcl     mcptr		 ptr parameter;	/* ptr to machine conditions */
	dcl     lngsw		 fixed bin parameter;
	dcl     lsp		 ptr parameter;	/* ptr to condition frame */
	dcl     sptr		 ptr parameter;	/* ptr to condition info structure */
	dcl     (pname1,
	        pname2)		 char (500) aligned parameter;
	dcl     optr		 ptr parameter;	/* ptr to output string */
	dcl     lng		 fixed bin (17) parameter;


/* automatic */

	dcl     (buf1, buf4)	 char (100) aligned automatic;
	dcl     (buf2, buf3)	 char (200) varying automatic;
	dcl     code		 fixed bin (35) automatic;
	dcl     def_section_ptr	 ptr automatic;	/* ptr to defs */
	dcl     dirname		 char (168) automatic;
	dcl     ec		 fixed bin (35) automatic; /* errcode from linker */
	dcl     exp		 char (12) var automatic; /* value of expression */
	dcl     entname		 char (32) automatic;
	dcl     ext_var_name	 char (65) automatic;
	dcl     ext_ptr		 ptr automatic;	/* ptr to symbol */
	dcl     found_sw		 bit (1) aligned automatic;
	dcl     header_ptr		 ptr automatic;	/* ptr to linkage block header */
	dcl     (i, tlng)		 fixed bin (17) automatic;
	dcl     linfo		 char (100) aligned
				 automatic;	/* for convert_status_code_ */
	dcl     link_ptr		 ptr automatic;	/* pointer to link */
	dcl     (n2, o2)		 varying char (32)
				 aligned automatic; /* printable names */
	dcl     nchars		 fixed bin (17) automatic; /* number of chars in name */
	dcl     nl		 char (1) aligned automatic;
	dcl     node_ptr		 ptr automatic;
	dcl     p			 ptr automatic;
	dcl     pname3		 char (500) aligned automatic;
	dcl     segptr		 ptr automatic;	/* ptr to seg name */
	dcl     sinfo		 char (8) aligned automatic;
	dcl     type		 fixed bin (17) automatic; /* type of link */
	dcl     texp		 char (12) aligned automatic;

/* constants */

	dcl     New_line		 char (1) static options (constant) init ("
");


/* external variables */

	dcl     (error_table_$bad_link_type,
	        error_table_$no_ext_sym,
	        error_table_$bad_entry_point_name,
	        error_table_$bigger_ext_variable,
	        error_table_$bad_self_ref,
	        error_table_$invalid_ptr_target)  ext fixed bin (35) aligned;

/* external entries */

	dcl     get_ppr_		 entry (fixed bin, ptr, ptr,
				 char (500) aligned, char (500) aligned,
				 char (500) aligned);
	dcl     (ioa_$rs, ioa_$rsnnl)	 ext entry options (variable);
	dcl     set_ext_variable_	 entry (char (*), ptr, ptr,
				 bit (1) aligned, ptr, fixed bin (35));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*),
				 fixed bin (35));
	dcl     convert_status_code_	 ext entry (fixed bin (35),
				 char (8) aligned, char (100) aligned);

/* builtins */

	dcl     (addr, addrel, baseptr, bin, fixed, index,
	        length, null, ptr, substr) builtin;

/* based */

	dcl     ostring		 char (1000) aligned based (optr);

	dcl     1 word		 based (p),	/* access structure for pickup */
		2 (one, two)	 fixed bin (35);

	dcl     1 init_info		 aligned based,
		2 length		 fixed bin,
		2 type		 fixed bin;



/* * * * * * * * * * * * * * * * * * * */


	linfo, nl, buf1, buf4 = " ";			/* initialize */
	n2, o2, buf2, buf3 = "";
	code = 0;

	scup = addr (mcptr -> mc.scu (0));		/* get ptr to scu; use real conditions */

	ec = mcptr -> mc.errcode;			/* extract linker code */

/* obtain ptr to link */

	link_ptr = ptr (baseptr (fixed (scup -> scu.tsr, 15)), scup -> scu.ca);
	if ec = error_table_$bad_entry_point_name then do;
ugh:		call ioa_$rsnnl ("^/Link is ^w  ^w at ^p.", buf1,
		     tlng, link_ptr -> word.one,
		     link_ptr -> word.two, link_ptr);
		go to exit;
	     end;

	if link_ptr -> object_link.tag ^= FAULT_TAG_2 then
	     go to ugh;

/* get pointers to the information concerning the link. ie.
   expression word, type_pair and link type
*/

	header_ptr = addrel (link_ptr, link_ptr -> object_link.header_relp);
	def_section_ptr = header_ptr -> linkage_header.def_ptr;
	exp_ptr = addrel (def_section_ptr, link_ptr -> object_link.expression_relp);
	type_ptr = addrel (def_section_ptr, exp_ptr -> exp_word.type_relp);
	type = type_ptr -> type_pair.type;

	if ec = error_table_$bad_link_type then do;
		call ioa_$rsnnl ("^/Illegal type number in type pair block.  Type = ^o.", buf1, tlng, type);
		go to last_exit;
	     end;


/* check the trap information it is either a pointer to a trap or
   it specifies the class information
*/

	if type_ptr -> type_pair.trap_relp ^= 0 then
	     if type = LINK_CREATE_IF_NOT_FOUND then
		call ioa_$rsnnl ("^/(with a create-if-not-found link)", buf1, tlng);

	if exp_ptr -> exp_word.expression ^= 0 then do;
		call ioa_$rsnnl ("^o", texp, tlng, exp_ptr -> exp_word.expression);
		exp = substr (texp, 1, lng);
	     end;
	else exp = "";

/* get the symbolic name of the link */

	if (type = LINK_SELF_BASE) | (type = LINK_SELF_OFFSETNAME) then do;
		if ec ^= error_table_$bad_self_ref
		then n2 = SYMBOLIC_SECTION_NAMES (type_ptr -> type_pair.segname_relp);
		else n2 = "*";
		if (type = LINK_SELF_OFFSETNAME) then
		     goto noent;
		else goto noext;
	     end;

	if (type = LINK_OBSOLETE_2) then do;		/* ITB link? */
		if ec = error_table_$no_ext_sym then do;
			call ioa_$rsnnl ("base ^o", n2, lng,
			     type_ptr -> type_pair.segname_relp);
			go to noent;
		     end;
		go to exit;
	     end;

/* get the link name information eg. either x$y or y or y|x */

	segptr = addrel (def_section_ptr, type_ptr -> type_pair.segname_relp);
	nchars = bin (segptr -> acc_string.count, 9);
	n2 = substr (segptr -> acc_string.string, 1, nchars);
	if (type = LINK_REFNAME_BASE) then do;		/* <seg>|exp,m ? */
noext:		if exp = "" then o2 = "0";
		else o2 = exp;
	     end;
	else do;
noent:		ext_ptr = addrel (def_section_ptr, type_ptr -> type_pair.offsetname_relp);
		nchars = fixed (ext_ptr -> acc_string.count, 9);
		if nchars = 0 then do;
			if (type = LINK_CREATE_IF_NOT_FOUND) then
			     o2 = "";
			else o2 = "0";
		     end;
		else o2 = substr (ext_ptr -> acc_string.string, 1, nchars);
		if exp ^= "" then o2 = o2 || "+" || exp;
	     end;

	call ioa_$rsnnl ("^/referencing ^a|^a", buf2, tlng, n2, o2);

/* get information concerning the initialization information 
   of *system *heap or create if not found links
 */

	if (type = LINK_SELF_OFFSETNAME) |
	     (type = LINK_CREATE_IF_NOT_FOUND) then do;
		ext_var_name = " ";
		if (type = LINK_SELF_OFFSETNAME) then do;
			if (type_ptr -> type_pair.segname_relp = CLASS_SYSTEM) |
			     (type_ptr -> type_pair.segname_relp = CLASS_HEAP)
			then ext_var_name = o2;
		     end;
		else do;				/* create if not found */
			if n2 = "stat_" then ext_var_name = o2;
			else if o2 = "" then do;	/* see if we have fortran common block */
				i = index (n2, ".com");
				if i = (length (n2) - 3) then do;
					ext_var_name = substr (n2, 1, i - 1);
					if ext_var_name = "b_" then ext_var_name = "blnk*com";
				     end;
			     end;
			else if n2 = "cobol_fsb_" then ext_var_name = n2 || o2;

			if ext_var_name ^= " " then buf1 = " "; /* create-if-not-found now irrelevant */
		     end;

		if ext_var_name ^= " "
		then buf2 = New_line || "referencing external variable or common block " || ext_var_name;
	     end;

	if ec = error_table_$bigger_ext_variable then do; /* print out more useful information */
		call ioa_$rsnnl ("^a (^d words)", buf2, tlng, buf2,
		     addrel (def_section_ptr, type_ptr -> type_pair.trap_relp)
		     -> init_info.length);

		buf4 = New_line || "Type ""help external_storage.gi"" for more information.";

		call set_ext_variable_ (ext_var_name, null,
		     ptr (addr (node_ptr), 0), found_sw, node_ptr, code);

		if code = 0 then if found_sw then do;
			     if node_ptr -> variable_node.init_ptr ^= null then do;
				     call hcs_$fs_get_path_name (ptr (node_ptr -> variable_node.init_ptr, 0), dirname, tlng, entname, code);
				     if code = 0 then call ioa_$rsnnl ("^/Original allocation (^d words) was by ^a>^a.",
					     buf3, tlng, node_ptr -> variable_node.init_ptr -> init_info.length, dirname, entname);
				     else call ioa_$rsnnl ("^/Original allocation was ^d words.", buf3, tlng,
					     node_ptr -> variable_node.init_ptr -> init_info.length);
				end;
			end;
	     end;
	else if ec = error_table_$invalid_ptr_target then
	     do;
		if ext_var_name ^= " "
		then buf2 = New_line || "referencing external variable " ||
			ext_var_name;
		buf3, buf4 = "";
	     end;


exit:	call convert_status_code_ (ec, sinfo, linfo);	/* get message */
	nl = "
";

last_exit:					/* format the information */
	call get_ppr_ (lngsw, lsp, sptr, pname1, pname2, pname3);
	call ioa_$rs ("Error:  Linkage error by ^a^a^a^a^a^a^a^a", ostring, lng, pname1, pname2, buf2, buf1, nl, linfo, buf3, buf4);

	return;					/* default_error_handler_ will decide what to do with the string */

%page;
/* INCLUDE FILES */

%include object_link_dcls;
%page;
%include definition_dcls;
%page;
%include its;
%page;
%include mc;
%page;
%include stack_header;
%page;
%include system_link_names;

     end;
