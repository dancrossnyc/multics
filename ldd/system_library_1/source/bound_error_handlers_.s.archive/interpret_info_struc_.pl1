/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */
interpret_info_struc_:
     procedure (conname, infoptr, linfo, retsw, no_restart, realsw, lngsw);


/* This procedure is used by default_error_handler_ to interpret the info
   structures passed with software signalled conditions */
/* Last modified by M. Weaver 2 December 1973 */
/* Changed 25 January 1979 B. Margulies to set print_sw on af errors */
/* Modified: 8 August 1980 by G. Palter to special case the code error_table_$active_function for the
	     active_function_error condition */
/* Modified: 10 September 1980 by G. Palter to rtrim command name in error_table_$active_function message */
/* Modified April 1981 by B. Margulies for quiet_restart and new includes */
/* Modified for program_interrupt BIM July 1981 */
/* Modified for quit_info E. N. Kittlitz December 1981 */
/* Modified to notice pl1-signal-statement info structures on non-pl1 */
/*          conditions 4/82 BIM */
/* Modified for malformed_list_template_entry_ November 29, 1984 by M. Weaver */

	dcl     conname		 char (32);	/* condition name */
	dcl     linfo		 char (500) var;	/* resulting info string */
	dcl     temp		 char (100) aligned;
	dcl     shortinfo		 char (8) aligned;
	dcl     temp2		 char (150) var;
	dcl     name		 char (afe_info.name_lth) based (afe_info.name_ptr);
						/* for active_function_error caller */
	dcl     errmsg		 char (afe_info.errmess_lth) based (afe_info.errmess_ptr);
						/* for new afe message */
          dcl     pl1_signalled_this     bit (1);
	dcl     tempchar		 char (1) aligned;
	dcl     (infoptr, lp)	 ptr;
	dcl     (lng, lngsw)	 fixed bin;
	dcl     toncode		 fixed bin (35);
	dcl     lv		 (4) fixed bin (35) based (lp);

	dcl     (retsw, realsw, no_restart)
				 bit (1) aligned;

	dcl     error_table_$active_function
				 fixed binary (35) external;

	dcl     (addr, rtrim, substr)	 builtin;
	dcl     (
	        ioa_$rs,
	        ioa_$ioa_stream
	        )			 ext entry options (variable);
	dcl     convert_status_code_	 ext entry (fixed bin (35), char (8) aligned, char (100) aligned);
	dcl     interpret_oncode_	 entry (fixed bin (35), char (150) var);

%include condition_info_header;

	dcl     1 cond_header	 aligned like condition_info_header based (infoptr);

	dcl     1 unwind_err	 aligned based (infoptr),
		2 header		 aligned like condition_info_header,
		2 target_label	 label;


%include com_af_error_info;
	dcl     1 afe_info		 like com_af_error_info based (infoptr);

%include io_error_info;
	dcl     1 io_err_info	 aligned like io_error_info based (infoptr);
%include sub_error_info;
	dcl     1 sub_error_struc	 aligned like sub_error_info based (infoptr);

%include pl1_info;
	dcl     1 pl1_info_struc	 aligned like pl1_info based (infoptr);

%include program_interrupt_info;
	dcl     1 pi_info		 aligned like program_interrupt_info based (infoptr);

%include quit_info;
	dcl     1 quit_info_struc	 aligned like quit_info based (infoptr);

%include malformed_list_template;

	dcl     1 template_info_struc	 aligned like template_info based (infoptr);



	pl1_signalled_this = pl1_info_struc.id = "pliocond";

	if cond_header.quiet_restart
	then do;
		retsw = "1"b;			/* restart the condition */
		return;				/* and that is all we do */
	     end;

	if ^retsw
	then retsw = cond_header.action_flags.default_restart;
	no_restart = cond_header.action_flags.cant_restart;

	if ^pl1_signalled_this
	then do;

		if conname = "sub_error_"
		then sub_error_struc.retval = 0;

		if conname = program_interrupt_condition_name
		then do;
			retsw = "1"b;
			pi_info.default_handler_restarted_this_signal = "1"b;
			return;			/* protocol is satisfied */
		     end;


		if conname = "active_function_error"
		then do;
			if realsw
			then call ioa_$ioa_stream ("error_output", errmsg);
			afe_info.print_sw = "0"b;	/* error message causing error must
						   be printed first, but only once */

			if afe_info.status_code = error_table_$active_function
			then linfo = "Error:  Attempt to invoke command " || rtrim (name)
				|| " as an active function." || byte (10) /* NL */;
			else linfo = "Error:  Bad call to active function " || rtrim (name) || byte (10) /* NL */;
						/* now fill in info string itself */
		     end;

		else if conname = "io_error"
		then do;
			call convert_status_code_ (io_err_info.status.code, shortinfo, temp);

			if shortinfo = (8)"x"
			then call ioa_$rs (" Cannot do I/O on switch ^a.^/Hardware status = ^w ^w", linfo, lng,
				io_err_info.switch_name, io_err_info.status.code,
				io_err_info.status.IOS_status_bits);

			else call ioa_$rs (" Cannot do I/O on stream ^a.^/^a", linfo, lng, io_err_info.switch_name,
				temp);

		     end;

		else if conname = "unwinder_error"
		then do;
			if lngsw = 1
			then linfo = unwind_err.info_string;
			else do;
				lp = addr (unwind_err.target_label);
						/* want to print label in octal */
				call ioa_$rs ("^a^/Label is:  ^w ^w  ^w ^w", linfo, lng, unwind_err.info_string,
				     lp -> lv (1), lp -> lv (2), lp -> lv (3), lp -> lv (4));
			     end;
		     end;

		else if conname = "quit"
		then do;				/* everything is done by default_error_handler_ */
		     end;

		else if conname = "malformed_list_template_entry_"
		then call ioa_$rs ("A compiler has generated incorrect list template initialization^/for an array or external variable.^/The template is at ^p.   The malformed entry is at ^p.",
		     linfo, lng, template_info_struc.template_p, 
		     template_info_struc.template_error_p);

		else do;				/* get what we can from structure header */
			if cond_header.status_code = 0
			then linfo = cond_header.info_string;
			else do;
				call convert_status_code_ (cond_header.status_code, shortinfo, temp);
				call ioa_$rs ("^a ^a", linfo, lng, temp, cond_header.info_string);
			     end;
		     end;
	     end;
	else do;					/* have a pl1 condition */
		if pl1_info_struc.content_flags.onfile_sw
		then call ioa_$rs ("occurred while doing I/O on file ^a", linfo, lng, pl1_info_struc.onfile);

		if pl1_info_struc.content_flags.onkey_sw
		then /* have a key to print */
		     if conname = "endfile" | conname = "transmit" | conname = "record" | conname = "key"
		     then call ioa_$rs ("^aonkey = ^a", linfo, lng, linfo, pl1_info_struc.onkey_onfield);

		if conname = "conversion"
		then if pl1_info_struc.content_flags.onsource_sw
		     then do;
			     if pl1_info_struc.content_flags.onchar_sw
			     then do;		/* print both onsource and onchar */
				     tempchar = substr (pl1_info_struc.onsource, pl1_info_struc.oncharindex, 1);
						/* must copy to get correct descriptor */
				     call ioa_$rs ("^aonsource = ""^a"", onchar = ""^1a""", linfo, lng, linfo,
					pl1_info_struc.onsource, tempchar);
				end;
			     else call ioa_$rs ("^aonsource = ""^a""", linfo, lng, linfo, pl1_info_struc.onsource);
			end;

		if conname = "name"
		then if pl1_info_struc.content_flags.onfield_sw
		     then call ioa_$rs ("^aonfield = ^a", linfo, lng, linfo, pl1_info_struc.onkey_onfield);

		if pl1_info_struc.content_flags.oncode_sw
		then do;
			toncode = pl1_info_struc.oncode;
			if toncode ^= 0 & toncode ^= 700
			then do;			/* determine source */
				if conname = "error" | conname = "conversion" | conname = "size"
				     | conname = "record" | conname = "key" | conname = "undefinedfile"
				then do;		/* want to print oncode */
					call interpret_oncode_ (toncode, temp2);
					linfo = linfo || temp2;
				     end;
			     end;
		     end;
		if linfo ^= ""
		then if substr (linfo, 1, 1) ^= byte (10)
						/* NL */
		     then linfo = byte (10) /* NL */ || linfo;
						/* don't add double newline */
	     end;

	return;

/*  */
no_message:
     entry (conname, infoptr);

/* this entry makes use of info struc but does not format message */

	dcl     based_ptrs		 (100) ptr based;
	dcl     based_bins		 (100) fixed bin (15) aligned based;
	dcl     based_file		 file variable based;

	if conname = "endpage"
	then if pl1_info_struc.id = "pliocond"
	     then if pl1_info_struc.content_flags.file_ptr_sw
		then do;
			if pl1_info_struc.content_flags.v1_sw
			then pl1_info_struc.file_ptr -> based_ptrs (2) -> based_bins (13) = 1;
			else put page file (pl1_info_struc.file_ptr -> based_file);
		     end;

	return;
     end interpret_info_struc_;
