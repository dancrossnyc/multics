/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1987 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */

/* Modified April 1981 by B. Margulies for quiet_restart, null_pointer,
   include file for find_pathname_info */
/* Further modified in August to fix the segfault-garbage bug */
/* Changed to use interpret_link_info.incl.pl1 05/12/83 S. Herbst */
/* format: style4,insnl,delnl */

get_tpr_:
     proc (asp, sptr, a_mtep, tname1, tname2);

dcl  a_mtep ptr;
dcl  (tname1, tname2) char (500) aligned;
dcl  ptemp character (500) aligned;
dcl  ename char (256) aligned;
dcl  op_seg_name char (32) aligned;
dcl  lang char (8) aligned;

dcl  (asp, tpr, sptr, sp, last_ptr, linkp, entryp) ptr;

dcl  lng fixed bin;
dcl  segno fixed bin (18);
dcl  code fixed bin (35);

/* Entries */

dcl  find_pathname_ entry (ptr, ptr, fixed bin (35));
dcl  (
     ioa_$rsnnl
     ) entry options (variable);
dcl  stack_frame_exit_ entry (ptr, ptr, ptr, bit (1), ptr, char (32) aligned, ptr);
dcl  get_link_ptr_ entry (ptr, ptr, ptr);
dcl  get_entry_name_ entry (ptr, char (*) aligned, fixed bin (18), char (8) aligned, fixed bin (35));
dcl  interpret_link_ entry (ptr, ptr, fixed bin (35));

dcl  (addr, baseno, baseptr, bin, hbound, lbound, null, ptr, substr) builtin;

%include condition_info;
declare  1 cond_info aligned like condition_info based (sptr);

%include find_pathname_info;
declare  1 name_info aligned like find_pathname_info;

%include interpret_link_info;

dcl 1 auto_interpret_link_info aligned like interpret_link_info;

dcl  1 situation aligned,				/* structure from stack_frame_exit_ */
       (
       2 bad_frame,
       2 exists_ppr,
       2 ppr_is_owner,
       2 ppr_is_ops,
       2 caller_is_owner,
       2 entry_ptr_invalid,
       2 ret_ptr_is_ops
       ) bit (1) unal,
       2 pad bit (29) unal;

	tname1, tname2, ptemp = "";
	sp = asp;
	mtep = a_mtep;

/* get referenced proc name if relevant and if it exists */

	if mte.with_tpr
	then if cond_info.mc_ptr ^= null then do;
		scup = addr (cond_info.mc_ptr -> mc.scu (0));
		tpr = ptr (baseptr (bin (bin (scup -> scu.tpr.tsr, 15), 18)), scup -> scu.ca);
		if cond_info.crawlout then do;	/* can't do anything fancy */
		     call find_pathname_ (tpr, addr (name_info), code);
		     ename = "";			/* not used here */
		     call format_name (tname1);
		end;
		else call try (cond_info.mc_ptr, tname1);
						/* see if we can get a better name from a link */
	     end;

	if cond_info.crawlout then do;		/* get last proc referenced in current ring */
	     if cond_info.wc_ptr ^= null
	     then call try (cond_info.wc_ptr, ptemp);
	     else do;				/* see if proc was called through link */
		call stack_frame_exit_ (sp, null, null, cond_info.crawlout, last_ptr, op_seg_name, addr (situation));
		if last_ptr = null
		then return;			/* don't know where frame was left */
		ename = "";
		call get_link_ptr_ (last_ptr, linkp, entryp);
		if linkp ^= null then do;		/* found a link */

		     auto_interpret_link_info.version = INTERPRET_LINK_INFO_VERSION_1;

		     call interpret_link_ (addr (auto_interpret_link_info), linkp, code);
						/* get name of link target */
		     if code = 0
		     then call ioa_$rsnnl ("^a^a^a^a^a", ename, lng, auto_interpret_link_info.segment_name,
			auto_interpret_link_info.entry_point_name, auto_interpret_link_info.expression,
			auto_interpret_link_info.modifier, auto_interpret_link_info.trap);
		end;
		else if entryp ^= null		/* text-text transfer; highly unlikely */
		then call get_entry_name_ (entryp, ename, segno, lang, code);

		ptemp = ename;
	     end;

	     if ptemp ^= ""
	     then tname2 = "
referencing " || ptemp;
	end;

	return;

format_name:
     proc (tname);

dcl  tname char (500) aligned;

	if name_info.component_ename ^= "" then do;	/* use name from bindmap */
	     call ioa_$rsnnl ("^a^a^a (^a^a^a^a^a)^a", tname, lng, name_info.component_ename, ename,
		name_info.adjusted_offset, name_info.dirname, name_info.gt_char, name_info.real_ename,
		name_info.real_offset, name_info.pdir_string, name_info.offset_msg);
	end;

	else do;
	     call ioa_$rsnnl ("^a^a^a^a^a^a^a", tname, lng, name_info.dirname, name_info.gt_char, name_info.real_ename,
		ename, name_info.real_offset, name_info.pdir_string, name_info.offset_msg);
	end;

	return;
     end;

try:
     proc (mp, tname);

dcl  no_name bit (1) aligned;

dcl  mp ptr;

dcl  error_table_$invalidsegno ext fixed bin (35);
dcl  i fixed bin;
dcl  op_code bit (10) aligned;
dcl  tname char (500) aligned;

dcl  tr_insts (35) bit (10) aligned
	init ("1110010110"b, "1100011000"b, "1100011010"b, "1100001000"b, "1100000100"b, "1100000010"b, "1100011110"b,
	"1100001010"b, "1100000110"b, "1110010000"b, "1100000000"b, "0101110000"b, "0101110010"b, "0101110100"b,
	"0101110110"b, "1101110000"b, "1101110010"b, "1101110100"b, "1101110110"b, "1110011010"b, "1110000000"b,
	"1110000010"b, "1110000100"b, "1110000110"b, "1110001000"b, "1110001010"b, "1110001100"b, "1110001110"b,
	"1100001110"b, "1100001100"b, "1100000011"b, "1100001001"b, "1100001011"b, "1100001101"b, "1100000001"b)
	internal static options (constant);

dcl  is_cls_ entry (ptr) returns (bit (1) aligned);


%include db_inst;

/**/
	ename = "";
	no_name = "0"b;
	scup = addr (mp -> mc.scu (0));
	tpr = ptr (baseptr (bin (bin (scup -> scu.tpr.tsr, 15), 18)), scup -> scu.ca);

	if mte.segferr & (mp -> mc.errcode = error_table_$invalidsegno) then do;
						/* symbolic name no longer available */
print_ptr:
	     call ioa_$rsnnl ("^p", tname, lng, tpr);
	     no_name = "1"b;
	end;

	else do;					/* get basic name info */
	     call find_pathname_ (tpr, addr (name_info), code);
	     if code ^= 0
	     then go to print_ptr;
	end;

/* see if an inter-segment transfer was involved to see if it's worth looking for a link */

	if scup -> scu.ppr.psr = scup -> scu.tpr.tsr
	then go to simple;				/* same segment */

	op_code = addr (scup -> scux.instr (bin (substr (scup -> scu.ilc, 18, 1), 1))) -> instr.opcode;
	do i = lbound (tr_insts, 1) to hbound (tr_insts, 1);
						/* see if a transfer instruction was being executed */
	     if op_code = tr_insts (i)
	     then if ^is_cls_ (cond_info.loc_ptr) then do;/* cond_info.loc_ptr might be near link ref */
		     call get_link_ptr_ (cond_info.loc_ptr, linkp, entryp);
		     if entryp = null
		     then go to simple;		/* no snapped link */
		     call get_entry_name_ (entryp, ename, segno, lang, code);
						/* this name should be good enough */
		     if code ^= 0
		     then go to simple;		/* don't bother looking for unsnapped link */
		     if segno ^= bin (baseno (tpr), 18)
		     then ename = "";		/* not same seg */
		     else if no_name
		     then go to add;		/* can't do normal formatting */
		     else do;			/* print name if not redundant */
			if name_info.component_ename ^= "" & ename = name_info.component_ename
			then ename = "";
			else if name_info.real_ename ^= "" & ename = name_info.real_ename
			then ename = "";
			else ename = "$" || ename;
		     end;
		end;
	end;

simple:
	if no_name
	then return;				/* have nothing to add */
	call format_name (tname);

	return;

add:						/* could not find real symbolic name  but found a name heuristically */
	if linkp ^= null then do;			/* if possible, replace ename with names from link */

	     auto_interpret_link_info.version = INTERPRET_LINK_INFO_VERSION_1;

	     call interpret_link_ (addr (auto_interpret_link_info), linkp, code);
	     if code ^= 0
	     then call ioa_$rsnnl ("^a^a", ename, lng, auto_interpret_link_info.segment_name,
		auto_interpret_link_info.entry_point_name);
	end;
	call ioa_$rsnnl ("^a^/(probably referencing ^a)", tname, lng, tname, ename);

	return;
     end;

%include mc;
%include message_table_entry;
     end get_tpr_;
