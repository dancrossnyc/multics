/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* Written by Lindsey Spratt, most likely */
/* Modified by Chris Jones, February 1985, to use privileges and to clean up. */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
record_status:
     proc (p_journal_control_block_ptr, p_info_ptr, p_code);

/* Parameter */

dcl	p_journal_control_block_ptr
			   ptr;
dcl	p_info_ptr	   ptr;
dcl	p_code		   fixed bin (35);

/* Automatic */

dcl	privileges_string	   bit (36) aligned;
dcl	temp_key		   char (256) varying;

/* Based */

dcl	dummy_record	   char (rs_info.record_length) based (rs_info.record_ptr);

/* Builtin */

dcl	length		   builtin;
dcl	null		   builtin;

/* Condition */

dcl	cleanup		   condition;

/* External */

dcl	rcprm_registry_util_$turn_off_privs
			   entry (bit (36) aligned);
dcl	rcprm_registry_util_$turn_on_privs
			   entry (bit (36) aligned);

dcl	error_table_$locked_by_this_process
			   fixed bin (35) ext;

	journal_control_block_ptr = p_journal_control_block_ptr;
	rs_info_ptr = p_info_ptr;
	privileges_string = ""b;

	on cleanup call clean_up;

	call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);
	if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
	     call clean_up;
	     return;
	end;

	if rs_info.lock_sw then
	     if rs_info.create_sw then do;
		if ^rs_info.locate_sw then do;
		     call iox_$read_key (journal_control_block.vfile_iocb_ptr, temp_key, 0, p_code);
		     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
			call clean_up;
			return;
		     end;

		     a_key_len = length (temp_key);
		end;

		else a_key_len = 0;

		a_rec_len = 0;

		allocate journal_entry in (journal_area);

		if a_key_len > 0 then
		     journal_entry.key_str = temp_key;
		journal_entry.type = RS_LOCK_CREATE;
	     end;

	     else if rs_info.inc_ref_count | rs_info.dec_ref_count then do;
		a_rec_len = rs_info.record_length;
		a_key_len = 0;

		allocate journal_entry in (journal_area);

		journal_entry.inc_ref_count = rs_info.inc_ref_count;
		journal_entry.dec_ref_count = rs_info.dec_ref_count;
		journal_entry.rec_str = dummy_record;
		journal_entry.type = RS_LOCK_COUNT;
	     end;

	     else do;
		a_rec_len = rs_info.record_length;
		a_key_len = 0;

		allocate journal_entry in (journal_area);

		journal_entry.rec_str = dummy_record;
		journal_entry.type = RS_LOCK;
	     end;

	else if rs_info.inc_ref_count | rs_info.dec_ref_count then do;
	     a_rec_len, a_key_len = 0;

	     allocate journal_entry in (journal_area);

	     journal_entry.inc_ref_count = rs_info.inc_ref_count;
	     journal_entry.dec_ref_count = rs_info.dec_ref_count;

	     journal_entry.type = RS_COUNT;
	end;

	else do;
	     call clean_up;
	     return;
	end;

	journal_entry.descriptor = rs_info.descriptor;
	journal_entry.next_ptr = null;
	journal_entry.prev_ptr = journal_control_block.latest_entry_ptr;
	if journal_control_block.latest_entry_ptr ^= null then
	     journal_control_block.latest_entry_ptr -> journal_entry.next_ptr = journal_entry_ptr;
	journal_control_block.latest_entry_ptr = journal_entry_ptr;
	call clean_up;
	return;

clean_up:
     proc;

	call rcprm_registry_util_$turn_off_privs (privileges_string);

     end clean_up;

%include journal_entry;
%include journal_control_block;
%include rs_info;
%include iox_dcls;
     end;
