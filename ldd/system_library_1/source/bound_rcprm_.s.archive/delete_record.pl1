/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
delete_record:
     proc (p_journal_control_block_ptr, p_code);

/* Deletes the current key, after recording it and its descriptor.

   Written  by  Lindsey Spratt 08/06/79
   Modified by Chris Jones 02/15/85 to clean up.
*/

/* Parameter */


dcl	p_journal_control_block_ptr
			   ptr;
dcl	p_code		   fixed bin (35);

/* Automatic */

dcl	privileges_string	   bit (36) aligned;
dcl	scratch_area_ptr	   ptr;

/* Based */

dcl	scratch_area	   area (4096) based (scratch_area_ptr);

/* Builtin */

dcl	null		   builtin;

/* Condition */

dcl	cleanup		   condition;

/* Entry */

dcl	iox_$control	   entry (ptr, char (*), ptr, fixed bin (35));
dcl	get_system_free_area_  entry returns (ptr);
dcl	rcprm_registry_util_$turn_off_privs
			   entry (bit (36) aligned);
dcl	rcprm_registry_util_$turn_on_privs
			   entry (bit (36) aligned);

/* External */

dcl	error_table_$locked_by_this_process
			   fixed bin (35) ext;

	journal_control_block_ptr = p_journal_control_block_ptr;
	gk_info_ptr, rs_info_ptr = null ();
	privileges_string = ""b;
	on cleanup call clean_up;

	scratch_area_ptr = get_system_free_area_ ();
	call rcprm_registry_util_$turn_on_privs (privileges_string);
	gk_key_len = 256;
	alloc gk_info in (scratch_area);

	gk_info.input_desc = "0"b;
	gk_info.input_key = "0"b;
	gk_info.desc_code = 0;
	gk_info.current = "1"b;
	gk_info.version = gk_info_version_0;

	call iox_$control (journal_control_block.vfile_iocb_ptr, "get_key", gk_info_ptr, p_code);
	if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
	     call clean_up;
	     return;
	end;

	alloc rs_info in (scratch_area);
	rs_info.version = rs_info_version_2;
	rs_info.locate_sw = "0"b;
	rs_info.inc_ref_count = "1"b;
	call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);
	if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
	     call clean_up;
	     return;
	end;
	call iox_$control (journal_control_block.vfile_iocb_ptr, "delete_key", null, p_code);
	if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
	     call clean_up;
	     return;
	end;

	a_key_len = gk_info.key_len;
	a_rec_len = 0;
	alloc journal_entry in (journal_area);
	journal_entry.inc_ref_count = "0"b;
	journal_entry.dec_ref_count = "0"b;
	journal_entry.key_str = gk_info.key;
	journal_entry.type = DELETE_RECORD;
	journal_entry.descriptor = gk_info.descrip;
	journal_entry.next_ptr = null;
	journal_entry.prev_ptr = journal_control_block.latest_entry_ptr;
	if journal_control_block.latest_entry_ptr ^= null then
	     journal_control_block.latest_entry_ptr -> journal_entry.next_ptr = journal_entry_ptr;
	journal_control_block.latest_entry_ptr = journal_entry_ptr;
	call clean_up;
	return;

clean_up:
     proc;

	if gk_info_ptr ^= null () then
	     free gk_info;
	if rs_info_ptr ^= null () then
	     free rs_info;
	call rcprm_registry_util_$turn_off_privs (privileges_string);

     end clean_up;

%include journal_control_block;
%include journal_entry;
%page;
%include ak_info;
%include rs_info;

     end delete_record;
