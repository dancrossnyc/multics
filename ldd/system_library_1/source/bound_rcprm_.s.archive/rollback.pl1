/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rollback:
     proc (p_journal_control_block_ptr, p_code);

/* Walk through the journal, starting at the latest entry and following the
   previous pointers.  At each entry, undo what that entry did.

   Written  by  Lindsey Spratt 08/06/79
   Modified by Chris Jones 02/14/85 to use privileges and to clean up properly.
*/
/* Parameter */

dcl	p_journal_control_block_ptr
			   ptr;
dcl	p_code		   fixed bin (35);


/* Automatic */

dcl	privileges_string	   bit (36) aligned;
dcl	scratch_area_ptr	   ptr;

/* Based */

dcl	scratch_area	   area (4096) based (scratch_area_ptr);

/* Builtin */

dcl	addr		   builtin;
dcl	length		   builtin;
dcl	null		   builtin;

/* Condition */

dcl	cleanup		   condition;

/* Entry */

dcl	get_system_free_area_  entry returns (ptr);
dcl	rcprm_registry_util_$turn_off_privs
			   entry (bit (36) aligned);
dcl	rcprm_registry_util_$turn_on_privs
			   entry (bit (36) aligned);

/* External */

dcl	error_table_$locked_by_this_process
			   fixed bin (35) ext;

	journal_control_block_ptr = p_journal_control_block_ptr;
	scratch_area_ptr = get_system_free_area_ ();

	journal_entry_ptr = journal_control_block.latest_entry_ptr;
	ak_info_ptr, gk_info_ptr, rs_info_ptr = null ();
	privileges_string = ""b;
	on cleanup call clean_up;

	call rcprm_registry_util_$turn_on_privs (privileges_string);
	do while (journal_entry_ptr ^= null);

	     goto ENTRY_TYPE (journal_entry.type);

ENTRY_TYPE (1):					/* RS_LOCK */
	     allocate rs_info in (scratch_area);
	     rs_info.version = rs_info_version_2;
	     rs_info.locate_sw = "1"b;
	     rs_info.descriptor = journal_entry.descriptor;

	     call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     call iox_$rewrite_record (journal_control_block.vfile_iocb_ptr, addr (journal_entry.rec_str),
		journal_entry.rec_len, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;
	     rs_info.lock_sw = "0"b;
	     rs_info.unlock_sw = "1"b;

	     rs_info.locate_sw = "0"b;
	     rs_info.inc_ref_count = "0"b;
	     rs_info.dec_ref_count = "0"b;
	     call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);

	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     free rs_info;
	     goto NEXT;

ENTRY_TYPE (2):					/* write_record */
	     gk_key_len = journal_entry.key_len;
	     alloc gk_info in (scratch_area);
	     gk_info.key = journal_entry.key_str;
	     gk_info.descrip = journal_entry.descriptor;
	     gk_info.input_desc = "1"b;
	     gk_info.input_key = "1"b;
	     gk_info.rel_type = 0;
	     gk_info.head_size = journal_entry.key_len;
	     gk_info.reset_pos = "0"b;
	     gk_info.version = gk_info_version_0;

	     call iox_$control (journal_control_block.vfile_iocb_ptr, "get_key", gk_info_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     call iox_$delete_record (journal_control_block.vfile_iocb_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     free gk_info;
	     goto NEXT;

ENTRY_TYPE (3):					/* delete_record */
	     ak_key_len = journal_entry.key_len;
	     alloc ak_info in (scratch_area);

	     ak_info.input_key = "1"b;
	     ak_info.input_desc = "1"b;
	     ak_info.descrip = journal_entry.descriptor;
	     ak_info.key = journal_entry.key_str;

	     call iox_$control (journal_control_block.vfile_iocb_ptr, "add_key", ak_info_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     free ak_info;
	     alloc rs_info in (scratch_area);
	     rs_info.locate_sw = "1"b;
	     rs_info.dec_ref_count = "1"b;
	     rs_info.descriptor = journal_entry.descriptor;
	     rs_info.version = rs_info_version_2;
	     call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;
	     free rs_info;
	     goto NEXT;


ENTRY_TYPE (4):					/* add_key */
	     ak_key_len = journal_entry.key_len;
	     alloc ak_info in (scratch_area);
	     ak_info.input_desc = "1"b;
	     ak_info.input_key = "1"b;
	     ak_info.descrip = journal_entry.descriptor;
	     ak_info.key = journal_entry.key_str;

	     call iox_$control (journal_control_block.vfile_iocb_ptr, "delete_key", ak_info_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     free ak_info;
	     goto NEXT;


ENTRY_TYPE (5):					/* delete_key */
	     ak_key_len = journal_entry.key_len;
	     alloc ak_info in (scratch_area);
	     ak_info.input_desc = "1"b;
	     ak_info.input_key = "1"b;
	     ak_info.descrip = journal_entry.descriptor;
	     ak_info.key = journal_entry.key_str;

	     call iox_$control (journal_control_block.vfile_iocb_ptr, "add_key", ak_info_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     free ak_info;
	     goto NEXT;

ENTRY_TYPE (6):					/* RS_COUNT */
	     allocate rs_info in (scratch_area);

	     rs_info.version = rs_info_version_2;
	     rs_info.locate_sw = "1"b;
	     rs_info.descriptor = journal_entry.descriptor;
	     rs_info.inc_ref_count = journal_entry.dec_ref_count;
	     rs_info.dec_ref_count = journal_entry.inc_ref_count;

	     call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);
	     free rs_info;
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     goto NEXT;

ENTRY_TYPE (7):					/* RS_LOCK_COUNT */
	     allocate rs_info in (scratch_area);

	     rs_info.version = rs_info_version_2;
	     rs_info.locate_sw = "1"b;
	     rs_info.descriptor = journal_entry.descriptor;
	     rs_info.inc_ref_count = journal_entry.dec_ref_count;
	     rs_info.dec_ref_count = journal_entry.inc_ref_count;

	     call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     call iox_$rewrite_record (journal_control_block.vfile_iocb_ptr, addr (journal_entry.rec_str),
		length (journal_entry.rec_str), p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     rs_info.locate_sw = "0"b;
	     rs_info.unlock_sw = "1"b;

	     call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);
	     free rs_info;
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then
		return;

	     goto NEXT;

ENTRY_TYPE (8):					/* RS_LOCK_CREATE */
	     if journal_entry.key_len > 0 then do;
		gk_key_len = journal_entry.key_len;

		allocate gk_info in (scratch_area);

		gk_info.version = gk_info_version_0;
		gk_info.input_key = "1"b;
		gk_info.input_desc = "1"b;
		gk_info.descrip = journal_entry.descriptor;
		gk_info.key = journal_entry.key_str;

		call iox_$control (journal_control_block.vfile_iocb_ptr, "get_key", gk_info_ptr, p_code);
		free gk_info;
		if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		     call clean_up;
		     return;
		end;
	     end;

	     allocate rs_info in (scratch_area);

	     rs_info.version = rs_info_version_2;

	     call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);
	     free rs_info;
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     call iox_$delete_record (journal_control_block.vfile_iocb_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then
		return;

	     goto NEXT;

NEXT:
	     journal_entry_ptr = journal_entry.prev_ptr;
	     journal_control_block.latest_entry_ptr = journal_entry_ptr;
	end;
	return;

clean_up:
     proc;

	if ak_info_ptr ^= null () then
	     free ak_info;
	if gk_info_ptr ^= null () then
	     free gk_info;
	if rs_info_ptr ^= null () then
	     free rs_info;
	call rcprm_registry_util_$turn_off_privs (privileges_string);

     end clean_up;

%include journal_entry;
%include journal_control_block;
%include ak_info;
%include rs_info;
%include iox_dcls;
     end;						/* end rollback */
