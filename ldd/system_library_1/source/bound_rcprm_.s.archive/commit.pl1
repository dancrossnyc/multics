/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
commit:
     proc (p_journal_control_block_ptr, p_code);

/* Complete whatever changes are in progress.

   Written  by  Lindsey Spratt 08/06/79
   Modified 11/21/79 by C. D. Tavares to commit in forward order instead of reverse.
   Modified 02/15/85 by Chris Jones for privileges and clean up.
*/
/* Parameter */

dcl	p_journal_control_block_ptr
			   ptr;
dcl	p_code		   fixed bin (35);

/* Automatic */

dcl	privileges_string	   bit (36) aligned;
dcl	scratch_area_ptr	   ptr;

/* Based */

dcl	scratch_area	   area (4096) based (scratch_area_ptr);

/* Controlled */
/* Builtin */

dcl	null		   builtin;

dcl	cleanup		   condition;

/* Entry */

dcl	iox_$control	   entry (ptr, char (*), ptr, fixed bin (35));
dcl	iox_$delete_record	   entry (ptr, fixed bin (35));
dcl	get_system_free_area_  entry returns (ptr);
dcl	rcprm_registry_util_$turn_off_privs
			   entry (bit (36) aligned);
dcl	rcprm_registry_util_$turn_on_privs
			   entry (bit (36) aligned);

/* External */

dcl	error_table_$locked_by_this_process
			   fixed bin (35) ext;

	journal_control_block_ptr = p_journal_control_block_ptr;
	scratch_area_ptr = get_system_free_area_ ();

	if journal_control_block.latest_entry_ptr = null then do;
	     p_code = 0;
	     return;
	end;

	do journal_entry_ptr = journal_control_block.latest_entry_ptr repeat (journal_entry.prev_ptr)
	     while (journal_entry.prev_ptr ^= null);
	end;					/* Find the first journal entry */

	rs_info_ptr = null ();
	privileges_string = ""b;
	on cleanup call clean_up;

	call rcprm_registry_util_$turn_on_privs (privileges_string);

	do while (journal_entry_ptr ^= null);

	     goto ENTRY_TYPE (journal_entry.type);

ENTRY_TYPE (1):					/* RS_LOCK */
ENTRY_TYPE (7):					/* RS_LOCK_COUNT */
ENTRY_TYPE (8):					/* RS_LOCK_CREATE */
	     alloc rs_info in (scratch_area);
	     rs_info.version = rs_info_version_2;
	     rs_info.unlock_sw = "1"b;
	     rs_info.lock_sw = "0"b;
	     rs_info.locate_sw = "1"b;
	     rs_info.descriptor = journal_entry.descriptor;
	     call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;
	     free rs_info;

	     goto NEXT;

ENTRY_TYPE (2):					/* write_record */
	     goto NEXT;

ENTRY_TYPE (3):					/* delete_record */
	     alloc rs_info in (scratch_area);
	     rs_info.version = rs_info_version_2;
	     rs_info.locate_sw = "1"b;
	     rs_info.descriptor = journal_entry.descriptor;

	     call iox_$control (journal_control_block.vfile_iocb_ptr, "record_status", rs_info_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     free rs_info;

	     call iox_$delete_record (journal_control_block.vfile_iocb_ptr, p_code);
	     if p_code ^= 0 & p_code ^= error_table_$locked_by_this_process then do;
		call clean_up;
		return;
	     end;

	     goto NEXT;


ENTRY_TYPE (4):					/* add_key */
	     goto NEXT;


ENTRY_TYPE (5):					/* delete_key */
	     goto NEXT;


ENTRY_TYPE (6):					/* RS_COUNT */
	     goto NEXT;

NEXT:
	     journal_entry_ptr = journal_entry.next_ptr;
	     if journal_entry_ptr ^= null then
		journal_entry.prev_ptr = null;
	end;
	call clean_up;
	return;

clean_up:
     proc;

	if rs_info_ptr ^= null () then
	     free rs_info;
	call rcprm_registry_util_$turn_off_privs (privileges_string);

     end clean_up;

%include journal_entry;
%include journal_control_block;
%include rs_info;
     end;						/* end commit */
