/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */
/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
rcprm_find_op:
     procedure (a_action, a_resource_desc_item_ptr, a_reconstruct_flag, a_priv_sw, a_operation, a_seek_attr_flag,
	a_error_code);

/*    This program determines the operation needed by rcp_access_kernel_
   *    given the action and the given attributes.
   *    Created 850110 by Maria M. Pozzo
   *
*/

/*                    ARGUMENT DATA                           */

dcl	a_action		   fixed bin;		/* (I) Action being performed */
dcl	a_resource_desc_item_ptr
			   ptr;			/* (I) Attributes that were selected by the user */
dcl	a_reconstruct_flag	   bit (1) aligned;		/* (I) True if this is a reconstruct operation. */
dcl	a_priv_sw		   bit (1) aligned;		/* (I) True if this is a privileged gate call. */
dcl	a_operation	   bit (36) aligned;	/* (O) Encoded RCP operation. */
dcl	a_seek_attr_flag	   bit (1) aligned;		/* (O) "1"b if seeking by attributes, "0"b if by name or uid */
dcl	a_error_code	   fixed bin (35);		/* (O) Error code */

/*                    AUTOMATIC DATA                          */

dcl	priv_sw		   bit (1) aligned;
dcl	reconstruct_flag	   bit (1) aligned;
dcl	seek_attr_flag	   bit (1) aligned;

dcl	operation		   bit (36) aligned;

dcl	action		   fixed bin;
dcl	error_code	   fixed bin (35);

dcl	resource_desc_item_ptr ptr;
dcl	operation_ptr	   ptr;

dcl	1 resource_desc_item   like resource_descriptions.item based (resource_desc_item_ptr) aligned;
dcl	1 en_access_op	   like encoded_access_op based (operation_ptr) aligned;

/*                      EXTERNAL ENTRIES                  */

dcl	error_table_$resource_spec_ambiguous
			   ext fixed bin (35) static;
dcl	error_table_$resource_not_free
			   ext fixed bin (35) static;
dcl	error_table_$resource_free
			   ext fixed bin (35) static;
dcl	error_table_$resource_not_modified
			   ext fixed bin (35) static;
dcl	access_operations_$rcp_register
			   bit (36) aligned external;
dcl	access_operations_$rcp_deregister
			   bit (36) aligned external;
dcl	access_operations_$rcp_register_acquire
			   bit (36) aligned external;
dcl	access_operations_$rcp_acquire
			   bit (36) aligned external;
dcl	access_operations_$rcp_release
			   bit (36) aligned external;
dcl	access_operations_$rcp_reserve
			   bit (36) aligned external;
dcl	access_operations_$rcp_cancel
			   bit (36) aligned external;
dcl	access_operations_$rcp_status
			   bit (36) aligned external;
dcl	access_operations_$rcp_set
			   bit (36) aligned external;
dcl	access_operations_$rcp_set_access
			   bit (36) aligned external;
dcl	access_operations_$rcp_clear
			   bit (36) aligned external;
dcl	access_operations_$rcp_reconstruct_registry
			   bit (36) aligned external;
%page;
/*  Copy arguments */

	action = a_action;
	resource_desc_item_ptr = a_resource_desc_item_ptr;
	reconstruct_flag = a_reconstruct_flag;
	priv_sw = a_priv_sw;

/*  Initialize local variables */

	operation = "0"b;
	operation_ptr = addr (operation);
	ops_ptr = addr (en_access_op.detailed_operation);
	seek_attr_flag = "1"b;
	error_code = 0;

/*  Find out if we're seeking for the resource by name or uid, or just */
/*  by attributes */

	if resource_desc_item.given.name | resource_desc_item.given.uid then
	     seek_attr_flag = "0"b;

/*  Check for register and acquire operation first */
/*  The resource name must be given and the uid must NOT be given */
/*  unless this is a reconstruct operation. If owner, release_lock */
/*  or aim_range is given then this is an implicit acquire.   */

	if action = Register then do;
	     if ^resource_desc_item.given.name then
		error_code = error_table_$resource_spec_ambiguous;
	     if resource_desc_item.given.uid & ^reconstruct_flag then
		error_code = error_table_$resource_spec_ambiguous;
	     if resource_desc_item.given.owner | resource_desc_item.given.release_lock
		| resource_desc_item.given.aim_range then
		operation = access_operations_$rcp_register_acquire;
	     else operation = access_operations_$rcp_register;
	end;
	else if action = Acquire then
	     operation = access_operations_$rcp_acquire;

/*  Check for the Set operation next */
/*  Cannot Set by attributes. */
/*  Cannot Set the owner. */
/*  If the acs_path is given or the access_class, this is a set_access */
/*  operation. All other requests are a set operation. */

	else if action = Set then do;
	     if seek_attr_flag then do;
		error_code = error_table_$resource_spec_ambiguous;
		goto MAIN_RETURN;
	     end;
	     if resource_desc_item.given.owner then do;
		error_code = error_table_$resource_not_modified;
		goto MAIN_RETURN;
	     end;
	     if (resource_desc_item.given.potential_aim_range | resource_desc_item.given.aim_range
		| resource_desc_item.given.acs_path) then
		operation = access_operations_$rcp_set_access;
	     else operation = access_operations_$rcp_set;
	end;

/* Check Status operation next. */
/* Cannot Status by attributes. */

	else if action = Status then do;
	     if seek_attr_flag then do;
		error_code = error_table_$resource_spec_ambiguous;
		goto MAIN_RETURN;
	     end;
	     operation = access_operations_$rcp_status;
	end;

/*  Check release operation next. */
/*  Cannot release the resource by attributes. */

	else if action = Release then do;
	     if seek_attr_flag then do;
		error_code = error_table_$resource_spec_ambiguous;
		goto MAIN_RETURN;
	     end;
	     operation = access_operations_$rcp_release;
	end;

/*  Check reserve operation next. */

	else if action = Reserve then
	     operation = access_operations_$rcp_reserve;

/*  Check cancel operation next. */
/*  Cannot cancel a resource by attributes. */

	else if action = Cancel then do;
	     if seek_attr_flag then do;
		error_code = error_table_$resource_spec_ambiguous;
		goto MAIN_RETURN;
	     end;
	     operation = access_operations_$rcp_cancel;
	end;

/* Check Deregister next. */
/* Cannot deregister resource by attributes. */

	else if action = Deregister then do;
	     if seek_attr_flag then do;
		error_code = error_table_$resource_spec_ambiguous;
		goto MAIN_RETURN;
	     end;
	     operation = access_operations_$rcp_deregister;
	end;

/* Clear operation */
/* Cannot clear a resource by attributes. */

	else if action = Clear then do;
	     if seek_attr_flag then do;
		error_code = error_table_$resource_spec_ambiguous;
		goto MAIN_RETURN;
	     end;
	     operation = access_operations_$rcp_clear;
	end;

/* Now set the selected given arguments for this operation from the */
/* given flags. */

	detailed_operation.given = resource_desc_item.given, by name;
	detailed_operation.priv_gate_call = priv_sw;
	detailed_operation.search = seek_attr_flag;

MAIN_RETURN:
	a_operation = operation;
	a_seek_attr_flag = seek_attr_flag;
	a_error_code = error_code;

	return;

%page;
%include access_audit_encoded_op;
%page;
%include rcp_ops;
%page;
%include rcprm_action_codes;
%page;
%include resource_control_desc;

     end rcprm_find_op;
