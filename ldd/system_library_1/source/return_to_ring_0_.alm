" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	return_to_ring_0_
"
"	This program is returned to upon a user ring attempt to
"	return and restart a signalled fault. It merely calls
"	<restart_fault>|0 to force the processor into ring zero.
"	return_to_ring_0_ is the program returned to upon
"	returning to a "signaller frame", the frame created by
"	the signaller in the faulting stack. The signaller has
"	placed a pointer to this program in the return pointer
"	in the signaller frame.
"
"	A second entry in this program is used by the signaller to
"	force the process to execute some uninhibited code in the user
"	ring so that any (necessary) ring alarm faults may be  processed.
"	This entry merely runs for a few instructions and then
"	invokes the signal_ procedure through the pointer in the
"	stack header.

"	The ring brackets on this program should be 0,7,7
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	include	stack_header
"
	name	return_to_ring_0_

	segdef	return_to_ring_0_
	segdef	restart_fault_ptr
	segdef	return_to_ring_n

return_to_ring_0_:
	callsp	restart_fault_ptr,*	call into ring zero

	even
restart_fault_ptr:
	its	-1,1		This pointer is filled in at system initialization
				"time to point to <restart_fault>|0.

return_to_ring_n:
	nop
	nop
	nop
	callsp	bb|0		bb left by signaller...

	end
