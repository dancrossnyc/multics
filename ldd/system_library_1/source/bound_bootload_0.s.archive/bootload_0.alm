" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" BOOTLOAD_0 -- First program to run appended in Bootload Multics
" This program is derived variously from FWLOAD and bootstrap1.
" 10/03/80, W. Olin Sibert
" 04/21/81, Chris Jones
" 1982-06-29 BIM
" 1982-11-17 CAH
" 84-05-17 KPL renamed from bootload_1

	name	bootload_0

	include	bootload_equs
" 
" Here is storage for a stack for calls in the collection 0 environment.
" The Bentry and Breturn macros in bootload_equs.incl.alm manage it,
" using id and di modifiers. Max depth is entry_stack_size.
" The segdef is provided for debuggers.

	equ	entry_stack_size,16

	segdef	entry_stack,entry_stack_ptr

	arg	-1			" make sure no one pops this
entry_stack:
	bss	,entry_stack_size

entry_stack_ptr:
	vfd	18/entry_stack,12/entry_stack_size,6/0
" 
" Here begins the main portion of collection 0 bootload. It basically falls
" through a set of subroutine calls until it is finally done and then
" transfers to bootload_1 to get the environment set up. Most of the real
" work is done outside this program -- bootload_0 is mostly just a driver.

	segdef	begin

begin:
	tsx2	bootload_io$preinit		" make sense of the bootload program

	tsx2	bootload_flagbox$preinit	" Make BOS work with us, not against us.

	tsx2	bootload_faults$init	" Set up fault_vector

	tsx2	bootload_slt_manager$init_slt	" set up an initial SLT,

	tsx2	bootload_io$init		" Set up primitive I/O mechanism

	tsx2	bootload_console$init	" and the console

	tsx2	bootload_loader$init	" we can now initialize it

	tsx2	bootload_tape_fw$boot	" boot tape F/W if needed

	tsx2	bootload_loader$load_collection " Load collection 1.0

	tsx2	bootload_loader$finish	" clean up linkage

	tsx2	bootload_linker$prelink	" snap all the links

" copy bootload_info

	sdbr	bootload_info$bce_dbr

	epbp6	bootload_info$sys_boot_info_ptr,*
	epp5	bootload_info$structure_start	
	lda	bootload_info$structure_size
	als	2			" Convert to character count
	mlr	(pr,rl),(pr,rl)		" Move the contents
	desc9a	pr5|0,al
	desc9a	pr6|0,al

	epplb	bootload_info$lot_ptr,*	" this is the one thing it can't do
	tra	bootload_info$bootload_1_ptr,* " Prepare to go on to the next segment

	end	bootload_0
