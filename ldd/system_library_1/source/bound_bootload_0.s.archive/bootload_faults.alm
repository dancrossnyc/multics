" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(86-04-03,Fawcett), approve(86-04-03,MCR7246),
"     audit(86-04-03,Farley), install(86-04-07,MR12.0-1036):
"     Correct ignore_fault to work in append mode.
"                                                      END HISTORY COMMENTS


"
"         BOOTLOAD_FAULTS
"
"         This module is used to initialize the fault and interrupt vectors
"         for running in bound_bootload_0. It ignores all interrupts, and
"         some faults. All other faults are directed to bootload_error.
"
" Created from bootstrap1 and FWLOAD, 10/04/80 W. Olin Sibert
" Cleaned up and modified for bootload_error, 12/14/80 WOS
"
" Entrypoint:       tsx2      bootload_faults$init
" Ignore SCU data at:         bootload_faults$ignore_scu
" Interrupts ignored by:      bootload_faults$ignore_fault
"

	name	bootload_faults
	decor	L68

          include   bootload_equs
          include   fault_vector

"

" Initialize all fault and interrupt pairs to SCU, TRA pair.
" Increment addresses in each instruction to reference different
" ITS pairs later in fault_vector.
"
          even

          inhibit   on                  <+><+><+><+><+><+><+><+><+><+><+><+><+><+>
interrupt_pair:                         " SCU/TRA pair for interrupts, executed in
          scu       fv.i_scu_ptr,*	 " absolute mode.
          tra       fv.i_tra_ptr,*
fault_pair:                             " and another pair for faults
          scu       fv.f_scu_ptr,*
          tra       fv.f_tra_ptr,*
          inhibit   off                 <-><-><-><-><-><-><-><-><-><-><-><-><-><->


          segdef    init
init:     Bpush

          eax7      0                   " X7 is offset of current vector. We set
                                        " up all the vectors and ITS pairs in parallel

loop:     eaa       0,x7                " Put the offset in the AQ, to and pick up the
          eaq       0,x7                " instruction pair. Each vector pair indirects
          adlaq     interrupt_pair      " through a different set of ITS pairs later in
          staq      fv|fv.ipair,x7      " the fault_vector, one for the SCU and one for
                                        " the transfer. The addresses in the vector
          eaa       0,x7                " instructions are all absolute, relative to the
          eaq       0,x7                " known absolute location of the fault_vector
          adlaq     fault_pair          " segment. These instructions never change from
          staq      fv|fv.fpair,x7      " now on -- only the pointers are modified.

          epp6      bootload_error$unexpected_scu " Now, initialize the ITS pointers for the
          spri6     fv|fv.f_scu_ptr,x7  " SCUs and transfers
          epp6      bootload_error$unexpected_fault
          spri6     fv|fv.f_tra_ptr,x7

          epp6      bootload_faults$ignore_scu " Fake external references, which will be
          spri6     fv|fv.i_scu_ptr,x7  " fixed up by the binder.
          epp6      bootload_faults$ignore_fault
          spri6     fv|fv.i_tra_ptr,x7

          adlx7     2,du                " On to the next vector
          cmpx7     64,du               " (of which there are but 32)
          tnz       loop

" 

          epp6      bootload_faults$ignore_scu " Now, change to treat lockup faults and
          spri6     fv|fv.f_scu_ptr+FAULT_NO_TRO*2 " timer runouts like interrupts

          epp6      bootload_faults$ignore_fault
          spri6     fv|fv.f_tra_ptr+FAULT_NO_TRO*2

	Breturn

"
" Following is the data area for ignoring faults, and the instruction to do it.
"

          segdef    ignore_scu
          segdef    ignore_fault

          eight                         " Align for SCU data
ignore_scu:
          bss       ,8
pointers_and_lengths:
	bss	,8

          inhibit   on                  <+><+><+><+><+><+><+><+><+><+><+><+><+><+><->
ignore_fault:                           " Come here to do nothing
	spl	pointers_and_lengths
	lpl	pointers_and_lengths
          rcu       ignore_scu	" Complicated, isn't it?
          inhibit   off                 <-><-><-><-><-><-><-><-><-><-><-><-><-><-><->

          end
