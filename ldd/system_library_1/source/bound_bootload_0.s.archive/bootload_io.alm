" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
"     audit(86-03-05,GDixon), install(86-03-21,MR12.0-1033):
"      Support IMU.
"  2) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
"     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
"     Correct error message documentation.
"  3) change(87-10-02,Farley), approve(88-02-26,MCR7794),
"     audit(88-03-04,Fawcett), install(88-03-15,MR12.2-1035):
"     Added code to set the new flag bootload_info$imu_style_iom.
"  4) change(88-02-12,Farley), approve(88-03-18,MCR7859),
"     audit(88-04-11,Fawcett), install(88-04-19,MR12.2-1037):
"     Added code to $init entry to properly setup the fault and special
"     interrupt channel mailboxes to handle the storing of statuses in the
"     proper places (instead of overwritting the interrupt vectors).
"                                                      END HISTORY COMMENTS

	name	bootload_io

" The bootload I/O package.
" Rewritten October 1982 by C. Hornig
" Modified September 1983 by Keith Loepere for adp.
" Modified July 1984 by Paul Farley for IMU.

	equ	imw_size,128
	equ	iom_mailbox_size,256
	equ	channel_mailbox.lpw,0
	equ	channel_mailbox.scw,2
	equ	channel_mailbox.dcw,3
	equ	fault_status_base,32
	equ	special_status_base,80
	equ	status_queue_size,12
	bool	IOTP,010000		" DU
	bool	cold_tape_mpc_mask,400000 	" DU
	bool	imu_bit_mask,200000 	" DU
	equ	imu_bit_shift,1

	mod	16
status:	bss	,16
ignore_status:
	bss	,16
save_regs:bss	,8

	even
pcw:	bss	,2

esw:	bss	,1
temp:	bss	,1
" 
" This routine copies the bootload program and sets up bootload_info
"
"	tsx2	bootload_io$preinit
"
	segdef	preinit

preinit:	epp	seg,bootload_info$iom_boot_info
	mlr	(pr),(pr),fill(0)		" copy the boot program
	desc9a	fv|0,64
	desc9a	seg|0,64

	lda	seg|0
	ana	=o770000,du	" check for adp vs l68 iom => system
	tnz	adp_init

	lda	L68_SYSTEM,dl
	sta	bootload_info$system_type

	lda	seg|2		" interrupt base
	ana	=o777770,dl
	cmpa	template_slt_$iom_mailbox_absloc
	tnz	bad_iom_interrupt_base

	lda	seg|2		" IOM number
	ana	=o7,dl
	sta	bootload_info$tape_iom_number
	aos	bootload_info$tape_iom_number
	als	8		" offset in mailbox
	ada	seg|2		" absolute address in AL
	ana	=o777770,dl
	eax7	imw_size,al
	cmpx7	seg|2		" compare with IOM base
	tnz	bad_iom_base

	lda	seg|3		" get the device number
	arl	24
	ana	=o77,dl
	sta	bootload_info$tape_device_number

	ldq	seg|1
	qrl	27		" and the channel
	anq	=o77,dl
	stq	bootload_info$tape_channel_number

	ldq	bootload_info$tape_iom_number
	lda	seg|1		" get the port number
	ana	=o7,dl
	sta	bootload_info$iom_port_table-1,ql

" Make initial guesses about the presence of BOS.  If thsi test succeeds,
" then bootload_flagbox will check the BOS flagbox for the sentinel.

	lda	seg|7		" get cold boot flag
	ana	cold_tape_mpc_mask,du
	sta	bootload_info$cold_tape_mpc
	era	=o400000,du	" not flag
	sta	bootload_info$assume_config_deck

	lda	seg|7		" get imu flag
	ana	imu_bit_mask,du
	als	imu_bit_shift
	sta	bootload_info$imu_style_iom

	tra	0,x2		" return

adp_init:
	lda	ADP_SYSTEM,dl
	sta	bootload_info$system_type

	lda	seg|4		" IOX number and channel
	sba	8,dl
	lrs	7
	ana	=o7,dl
	sta	bootload_info$tape_iom_number
	aos	bootload_info$tape_iom_number
	qrs	36-7
	stq	bootload_info$tape_channel_number

	lda	seg|0		" get the device number
	arl	24
	ana	=o77,dl
	sta	bootload_info$tape_device_number

	stz	bootload_info$cold_tape_mpc

	tra	0,x2		" return

bad_iom_interrupt_base:
	lda	=o777777000001
	dis
	tra	-1,ic

bad_iom_base:
	lda	=o777777000002
	dis
	tra	-1,ic
" 
" This routine initializes the bootload I/O package.
"
"	tsx2	bootload_io$init
"
	segdef	init

init:	sreg	save_regs
	lda	imw_size+4*64*4,dl
	mlr	(),(pr,rl),fill(0)		" clear everything
	desc9a	0,0
	desc9a	mb|0,al

	lda	bootload_info$tape_iom_number " IOM tag (1-4)
	als	8			" 256 words/mailbox
	eax3	imw_size-iom_mailbox_size,al	" X3 -> IOM mailbox
	ldq	bootload_info$tape_iom_number " IOM tag (1-4)
	mpy	status_queue_size,dl
	eax4	-status_queue_size,ql	" X4 -> status Q index

	absa	mb|fault_status_base,x4	" get address of status Q
	als	6
	ora	IOTP+status_queue_size,dl	" setup status DCW
	sta	mb|1*4+channel_mailbox.dcw,x3 " save DCW in fault chnl mbx
	sta	mb|1*4+channel_mailbox.scw,x3 " save DCW for refresh
	absa	mb|1*4+channel_mailbox.scw,x3 " get address of refresh DCW
	als	6
	ora	=o020001,dl		" setup LPW
	sta	mb|1*4+channel_mailbox.lpw,x3 " save LPW in fault chnl mbx

	absa	mb|special_status_base,x4	" get address of status Q
	als	6
	ora	IOTP+status_queue_size,dl	" setup status DCW
	sta	mb|6*4+channel_mailbox.dcw,x3 " save DCW in spec-stat mbx
	sta	mb|6*4+channel_mailbox.scw,x3 " save DCW for refresh
 	absa	mb|6*4+channel_mailbox.scw,x3 " get address of refresh DCW
	als	6
	ora	=o020001,dl		" setup LPW
	sta	mb|6*4+channel_mailbox.lpw,x3 " save LPW in spec-stat mbx

	lreg	save_regs
	tra	0,x2
" 
" This routine issues a connect to the IOM using the caller's PCW
" and DCW lists.  The caller must insure a spare word in front of the 
" dcw list so that, in the iox case, we can insert his pcw (made non-
" terminate) as another idcw in front.
"
"	tsx2	bootload_io$connect
"	arg	iom_no
"	arg	channel_no
"	arg	PCW_address
"	arg	DCW_address
"
"	tsx2	bootload_io$connect_timeout
"	arg	iom_no
"	arg	channel_no
"	arg	PCW_address
"	arg	DCW_address
"	tra	timeout_return
"
" The status from the IOM is returned in the AQ.
"
	equ	con.iom,0
	equ	con.channel,1
	equ	con.pcw,2
	equ	con.dcw,3
	equ	con.nargs,4
	equ	con_t.timeout,4
	equ	con_t.nargs,5

	segdef	connect

connect:	stc1	esw
	tra	join

	segdef	connect_timeout

connect_timeout:
	stz	esw

join:	sreg	save_regs
	lda	bootload_info$system_type
	cmpa	ADP_SYSTEM,dl
	tze	adp_connect

" Make check to see if the connect is for the console.
" If so we need to wait fifteen milliseconds after the status
" returns, so that the console adapter will have time
" to properly do the terminate interrupt.
" If not the console then set the wait time to one millisecond.

	stz	doing_console_io
	szn	bootload_info$console_available
	tze	not_console_io	" Haven't found one, yet!
	lda	con.iom,x2*
	cmpa	bootload_info$console_iom_number
	tnz	not_console_io
	lda	con.channel,x2*
	cmpa	bootload_info$console_channel_number
	tnz	not_console_io
	lda	fifteen_millisec
	sta	wait_time+1	" set wait time
	lda	=o400000,du
	sta	doing_console_io	" set console IO flag
	tra	connect_continue
not_console_io:
	lda	one_millisec
	sta	wait_time+1
connect_continue:
	lda	con.iom,x2*	" IOM tag (1-4)
	eax1	-1,al		" IOM number in X1
	als	8		" 256 words/mailbox
	eax3	imw_size-iom_mailbox_size,al
				" X3 -> IOM mailbox
	stx3	temp		" save it

	ldq	con.channel,x2*	" channel number
	qls	2		" 4 words/channel
	eax4	0,ql		" in X4
	adx4	temp

	qls	27-2		" now in high byte
	lda	con.pcw,x2*	" get caller's PCW
	staq	pcw		" save it

	absa	con.dcw,x2*	" get address of DCW list
	als	6		" in AU
	sta	mb|channel_mailbox.lpw,x4
	stz	mb|channel_mailbox.lpw+1,x4
				" store LPW

	absa	status		" get address of status area
	als	6		" in AU
	sta	mb|channel_mailbox.scw,x4
				" set SCW

	absa	pcw		" get address of PCW
	als	6		" in AU
	ora	=o020001,dl	" set bits for connect LPW
	sta	mb|2*4+channel_mailbox.lpw,x3

	stz	status
	ldx7	=o100000,du	" set status timer
	lda	pcw		" look at the PCW
	cana	=o040000,dl	" was it a mask?
	tze	connect_n_wait	" no, must wait for status
	cioc	bootload_info$iom_port_table,x1 " fire up the IOM
	tra	no_status		" don't wait for status
connect_n_wait:
	cioc	bootload_info$iom_port_table,x1 " fire up the IOM
status_wait:
	lda	status		" status yet?
	tmi	got_status
	adlx7	-1,du		" count down to timeout
	tnz	status_wait
	szn	esw		" timer running?
	tnz	status_wait

	stc1	esw		" pretend we are not $timeout

" IMU only does single precision stores, so after status word
" arrives we need to wait for the second word to be stored...
"
" IMU adapters also take awhile, after the status service, to do the
" status interrupt. Must wait for this, so a new connect will not cause
" the adapter to be faulted.
"
" The IMU console does not use PCWs and if the opcode in the IDCW causes
" a status return to have bit 16 (initiate) on then it needs to be processed.
" The LCC on an IOM does use the PCW, which has a opcode of reset-status, and
" the status will have bit 16 on. This status can be ignored and a better one,
" from the IDCW will come along.

got_status:
	szn	doing_console_io
	tze	pause_for_status	" not console IO

	szn	bootload_info$console_pcw_check
	tze	pause_for_status	" no...
	stz	bootload_info$console_pcw_check " reset the check flag
	era	initiate_status	" only sync & initiate bits ON?
	tze	pause_for_status	" yes, console uses the PCW
	stz	bootload_info$console_uses_pcw " no, console didn't use it.

pause_for_status:
	rscr	32		" get current time
	staq	status_time

	rscr	32
	sbaq	status_time
	cmpaq	wait_time
	tmi	-3,ic

	ldaq	status		" should be there now!!
	staq	save_regs+4	" save the status

	szn	doing_console_io
	tze	no_status
	szn	bootload_info$console_uses_pcw
	tze	no_status		" pcw isn't used, so don't worry.
	era	initiate_status	" only sync & initiate bits ON?
	tnz	no_status		" no, don't try for another one.
	stz	status		" zero out status
	ldx7	=o100000,du	" reset timer
	tra	status_wait	" and wait for good status

no_status:
	absa	ignore_status	" make sure no more status arrives
	als	6
	sta	mb|channel_mailbox.scw,x4

	lreg	save_regs
	szn	esw
	tnz	con.nargs,x2	" return
	tra	con_t.nargs,x2
"
adp_connect:
	eax0	con.dcw,x2*	" address of dcw list
	lda	con.pcw,x2*	" get pcw
	ora	=o020000,dl	" turn on proceed
	sta	-1,x0		" insert in front of list

	absa	-1,x0		" get address of DCW list
	als	8		" in AU
	sta	iox_mailbox_lpw	" store LPW

	lda	con.iom,x2*	" IOX tag (1-4)
	ada	-1,dl
	als	7		" 128 channels / iox
	ada	con.channel,x2*	" channel number
	ada	8,dl		" iox channel index
	ora	=o700000,du	" form cioc word

	stz	iox_mailbox_status	" zero status
	cioc	iox_mailbox	" fire up the IOM

	lda	con.pcw,x2*	" look at the PCW
	cana	=o040000,dl	" was it a mask?
	tnz	adp_no_status	" yes, no status

	ldx7	=o100000,du	" timer
adp_status_wait:
	ldaq	iox_mailbox_status	" status yet?
	tmi	adp_got_status
	adlx7	-1,du		" count down to timeout
	tnz	adp_status_wait
	szn	esw		" timer running?
	tnz	adp_status_wait

	stc1	esw		" pretend we are not $timeout

adp_got_status:
	staq	save_regs+4	" save the status

adp_no_status:
	lreg	save_regs
	szn	esw
	tnz	con.nargs,x2	" return
	tra	con_t.nargs,x2

	mod	8
iox_mailbox:
	vfd	36o/0		" base addresses for 256k blocks
	vfd	36o/1000000
	vfd	36o/2000000
	vfd	36o/3000000
	vfd	18o/777777,18o/777777
	vfd	18o/777777,18o/777777
	vfd	24/0,12o/5034
iox_mailbox_lpw:
	vfd	36/0		" lpw
iox_mailbox_status:
	bss	,16		" status

	even
status_time:
	bss	,2
wait_time:
	bss	,2
fifteen_millisec:
	dec	15000
one_millisec:
	dec	1000
doing_console_io:
	bss	,1
initiate_status:
	oct	400002000000	" sync and initiate bits
" 
	include	bootload_equs
	include	system_types

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"							"
"	Error message documentation.				"
"							"
"							"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

"BEGIN MESSAGE DOCUMENTATION


"         Message:
"         HALT with octal 777777000001 in the A register.

"         S:    $crash

"         T:    $init

"         M:    The interrupt base set on the bootload IOM is not 1200 octal.

"         A:    Set the switches correctly.


"         Message:
"         HALT with octal 777777000002 in the A register.

"         S:   $crash

"         T:   $init

"         M:   The iom base set on the bootload IOM is not correct. I.e.,
"         for IOM's 0, 1, 2 and 3 it should be 1400, 2000, 2400 and 3000 octal
"         respectively.

"         A:   Set the switches correctly.

"         END MESSAGE DOCUMENTATION

	end	bootload_io
