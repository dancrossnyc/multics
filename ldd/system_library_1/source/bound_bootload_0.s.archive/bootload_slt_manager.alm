" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" ***********************************************************
	name	bootload_slt_manager

" SLT management functions for bootload Multics.
" Stolen from slt_manager November 1982 by C. Hornig

	include	bootload_equs
	include	slt
	include	slte
" 
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"							"
"	Initialize the Segment Loading Table.			"
"							"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	init_slt

init_slt:
	epp	seg,template_slt_$t_slt

" Calculate size of header+sup segs

	lda	seg|slt.last_sup_seg	" this many 
	als 	4			" 4 words each
	ada	4*(slt.seg+4),dl		" header length (zero base adds 1)

	mlr	(pr,rl),(pr,rl)		copy SLT header and entries for sup segs
	desc9a	seg|0,al
	desc9a	slt|0,al

" Now get init segs

	lda	slt|slt.last_init_seg	" LENGTH
	sba	slt|slt.first_init_seg	" This many entries
	ada	1,dl			" at least one entry
	als	4			" 4 words, to chars

	ldq	slt|slt.last_sup_seg	" LOCATION FROM
	adq	1,dl			" this many entries
	qls	2			" this many words
	epp	seg,seg|slt.seg,ql		" gotcha
	
	ldq	slt|slt.first_init_seg	" LOCATION TO
	qls	2			" words
	epp	seg2,slt|slt.seg,ql		" gotcha

	mlr	(pr,rl),(pr,rl)
	desc9a	seg|0,al
	desc9a	seg2|0,al

" Name table

	epp	seg,template_slt_$t_name_table
	lda	template_slt_$name_table_length
	als	2			" chars

	mlr	(pr,rl),(pr,rl)		copy segment and path names
	desc9a	seg|0,al
	desc9a	nt|0,al

" compute free core size

	lda	bootload_info$bootload_mem_size
          sba       slt|slt.free_core_start       " Subtract those already used, and
          sta       slt|slt.free_core_size        " save it.

" now hash in names for these template segs

	lxl1	slt|slt.first_init_seg	" do init segs first
	lda	slt|slt.first_init_seg
init_seg_hash_loop:
	als	2			" length of slte
	epp	seg,slt|slt.seg,al		" slte to consider
	ldx3	seg|slte.names_ptr		" names ptr
	tze	next_init_seg_hash
	epp	seg,nt|0,x3
	tsx5	hash_in
next_init_seg_hash:
	eax1	1,x1			" next init_seg
	eaa	0,x1
	ars	18
	cmpa	slt|slt.last_init_seg
	tmoz	init_seg_hash_loop	

	lxl1	slt|slt.first_sup_seg	" now do sup segs
	lda	slt|slt.first_sup_seg
sup_seg_hash_loop:
	als	2			" length of slte
	epp	seg,slt|slt.seg,al		" slte to consider
	ldx3	seg|slte.names_ptr		" names ptr
	tze	next_sup_seg_hash
	epp	seg,nt|0,x3
	tsx5	hash_in
next_sup_seg_hash:
	eax1	1,x1			" next init_seg
	eaa	0,x1
	ars	18
	cmpa	slt|slt.last_sup_seg
	tmoz	sup_seg_hash_loop	

	tra	0,x2			" return
" 
"	tsx2	bootload_slt_manager$build_entry
"	arg	slte CW
"	arg	slte
"	tra	error
"	(pr1 -> segment base)
"	(pr6 -> new SLTE)

	segdef	build_entry

build_entry:
	epp	seg2,1,x2*		" seg2 -> SLTE

	lxl1	nt|name_seg.next_loc  X1 contains first unused location
	stx1	seg2|slte.names_ptr	set name pointer in SLT entry
	epp	seg,nt|0,x1

	lda	0,x2*		" get header control word
	sba	slte_size,dl	" size of names
	asa	nt|name_seg.next_loc" bump name table pointer
	als	18+2		" characters in AU

	mlr	(pr,rl),(pr,rl)	" copy the names & path
	desc9a	seg2|slte_size,au
	desc9a	seg|0,au

	lda	seg2|slte.init_seg_word is this an initialization segment?
	cana	slte.init_seg,dl	..
	tze	sup		if zero, supervisor segment

	aos	slt|slt.last_init_seg otherwise, init segment
	ldq	slt|slt.last_init_seg segment number in Q
	tra	jn		..

sup:	aos	slt|slt.last_sup_seg	supervisor segment
	ldq	slt|slt.last_sup_seg	segment number in Q
	cmpq	slt|slt.first_init_seg are we overlapping the init segs?
	trc	2,x2		fatal error if so

jn:
	eax0	0,ql		" save segment number
	sxl0	seg2|slte.segno	" in the SLTE
	mpy	slte_size,dl	multiply by length of SLT entry
	epp	seg,slt|slt.seg,ql	" get ptr to new SLTE

	mlr	(pr),(pr)		fill in the SLT entry
	desc9a	seg2|0,slte_size*4
	desc9a	seg|0,slte_size*4

	lda	seg|slte.branch_required_word Look for branch-required switch
	cana	slte.branch_required,dl Is path provided
	tze	no_copy_path

	ldq	seg2|slte_size+segnam.count	count of names in Q
	mpy	9,dl		multiply by length of each name
	eax7	1,ql		add 1 for name count itself
	adx7	seg|slte.names_ptr	" add offset of names
	sxl7	seg|slte.path_ptr	" save it

no_copy_path:

" now hash in names for segment

	ldx3	seg|slte.names_ptr	" at segnam
	epp	seg,nt|0,x3
	eax1	0,x0		" setup registers as needed
	tsx5	hash_in

	epp	seg2,0		" make a ring-0 pointer
	easp	seg2,0,x0		" to the segment
	eaq	0,x0		" now restore pr(seg) -> slte
	mpy	slte_size,dl
	epp	seg,slt|slt.seg,qu
	tra	3,x2		" return
" 
"	tsx2	bootload_slt_manager$get_seg_ptr
"	arg	name
"	tra	error
"	(seg -> segment)
"	(a = segment number)

	segdef	get_seg_ptr

get_seg_ptr:
	epp	seg2,0,x2*	" pts at name
	xec	spris+seg2	" done so can get spri seg2,name_arg
	tsx3	hash_index_
	arg	name_arg
	arg	=32
	arg	=0
	arg	=128
	arg	hash_value	" got where should hash
	epp	seg2,0,x2*	" restore pr(seg2) -> name
	lxl3	hash_value
	epp	seg,nt|name_seg.ht,x3*	" first entry in hash list
hash_search_loop:
	eax4	seg|0
	tze	1,x2		" ran off end => not found
	cmpc	(pr),(pr)
	desc9a	seg2|0,32		" does name match?
	desc9a	seg|1,32
	tze	get_seg_found
	ldx4	seg|0
	eawp	seg,0,x4		" next in list
	tra	hash_search_loop
get_seg_found:
	lda	seg|0		" get segno
	ana	segnam.segno_mask,dl
	epp	seg,0		" get a pointer
	easp	seg,0,al
	tra	2,x2		" return

spris:	spri0	name_arg		" table to xec to get spri seg2,name_arg
	spri1	name_arg
	spri2	name_arg
	spri3	name_arg
	spri4	name_arg
	spri5	name_arg
	spri6	name_arg
	spri7	name_arg
"
"   local routine hash_in
"	hashes in to lists all names for given segment
"   uses pr(seg), pr(seg2), x3, x4, x6, x7, a, q: tsx5'd to
"   assumes pr(seg) points to a segnam entry (from name table)
"   and x1 is segment number to put in slot
"

	even
name_arg:	its	0,0		place for address of name
hash_value: dec	0		place for hash return result

hash_in:
	lxl6	seg|segnam.count	get number of names to hash
	tze	0,x5		nothing to do
hash_in_loop:
	epp	seg2,seg|segnam.name
	xec	spris+seg2	point at name to hash
	tsx3	hash_index_	get hash value
	arg	name_arg
	arg	=32
	arg 	=0	
	arg	=128
	arg	hash_value
	lxl7	hash_value	thread into hash -list
	ldx3	nt|name_seg.ht,x7
	stx3	seg|segnam.hp
	eax3	seg|segnam.hp
	stx3	nt|name_seg.ht,x7
	eaa	0,x1		put segno onto right bits
	ars	18
	stca	seg|segnam.hp,03	save segno in segnam entry
	epp	seg,seg|9		advance to next segnam entry
	eax6	-1,x6
	tnz	hash_in_loop
	tra	0,x5		return to caller
"
"   local routine hash_index_
"   stolen from hash_index_.alm
"   for bootload0 environment
"   uses pr(seg2), x3, x4, a, q: tsx3'd to
"
"	tsx3	hash_index_
"	arg	string_ptr
"	arg	string_length
"	arg	bias
"	arg	hash_table_size
"	arg	hash_value
"
	set	string,0
	set	length,1
	set	bias,2
	set	tablesize,3
	set	index,4
hash_index_:
	epp	seg2,string,x3*	get pointer to pointer to string
	epp	seg2,seg2|0,*	get pointer to string
	szn	tablesize,x3*	check for zero divide
	tze	err		trouble
	eaa	0		clear the a register
	ldq	length,x3*	get length of string
	cmpq	=32,dl		is it an entry name?
	tnz	compare		no, go to compare
	qrs	2		yes, ignore trailing blanks
strip:	lda	seg2|-1,ql	get end word
	cmpa	blanks		all blanks?
	tnz	add1		no, go to compare
	sbq	=1,dl		yes, backup 1 word
	tra	strip		loop back and try again
compare:	llr	70		divide by 4 and save remainder
	arl	16		shift remainder to upper a
	eax4	0,au		divisible by 4?
	tze	add1		yes go to compare
	lda	seg2|0,ql		no, make blanks out of last chars
	ana	mask,4
	ora	bits,4
	tra	add2
add1:	eaa	0		zero a reg-init sum
add2:
	qls	0		set sign of q
	tze	noadd		no words to be added in
	adla	seg2|-1,ql
	sblq	1,dl		go to next word
	tpl	add2
noadd:	sta	index,x3*		save temporarily
	ldq	bias,x3*		get bias
	mpy	=99991,dl		multipy by large prime number
	adq	index,x3*		add in sum of the words
	div	tablesize,x3*	divide by hash table size
	als	0		set zero indicator from remainder (in a-reg)
	tpl	*+2		must be positive answer
	neg
	sta	index,x3*		return the remainder of the division
.rt:	tra	5,x3		return to caller

err:	stz	index,x3*		return zero as hash index if error
	tra	.rt

blanks:	aci	"    "
mask:	oct	0,777000000000,777777000000,777777777000
bits:	oct	0,000040040040,000000040040,000000000040

	end	bootload_slt_manager
