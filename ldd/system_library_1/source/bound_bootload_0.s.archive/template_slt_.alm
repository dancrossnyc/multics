" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1983 *
" *                                                         *
" ***********************************************************
	name	template_slt_

" Modified '82 for bootload Multics 10.2
" Modified '83 for adp by Keith Loepere.

	include	bootload_equs
	include	slt
	include	slte
	include	unpaged_page_tables
" 
	segdef	slt_length
	segdef	name_table_length
	segdef	t_slt
	segdef	t_name_table
	segdef	dseg,adp_dseg
	segdef	upt,init_upt,adp_upt,adp_init_upt
	segdef	dsbr,adp_dsbr

" This "program" generates the slt, name_table, dseg and unpaged page tables
" corresponding to the collection 0 segments.  All of this is done through 
" three main macros.  

" seg starts the declaration of a segment.  It takes two arguments.  One is
" the segment name.  The second is either "sup" or "init", specifying whether
" this is a supervisor (permanent) or initialization segment.

" paged_seg ends the declaration of a segment.  It takes three arguments.  The
" first is the repeat of the segment name.  The second is either "init" or 
" "sup", specifying whether the page table is permanent (corresponding to a
" "unpaged" supervisor segment) or is for initialization only.  The third 
" argument is either "norm" or "abs_seg".  A "norm" type is given a page table
" and is allocated memory according to the size of the segment.  An "abs_seg"
" type uses the max_length to determine the page table size (but cur_length to
" determine memory allocation).

" unpaged_seg ends the description of a segment whose sdw will specify it as
" unpaged.  The second argument here is ignored.

" Between the seg and either the unpaged_seg or the paged_seg calls appears 
" various calls that set attributes of the segment.

	macro	seg

" start the description of a segment

	set	s.1,0
	set	s.2,0
&=&2,sup&[

" use low segment nos for supervisor (permanent) segments

	set	sup_segno,sup_segno+1
	set	s.segno,sup_segno
&;
" initialization segments use high segnos

	set	init_segno,init_segno+1
	set	s.segno,init_segno
	set	s.2,s.2+slte_uns.init_seg
&]
	equ	&1_seg_num,s.segno

	use	names

" We just set one name for these template_slt_ segments.

	dec	1		" count
	vfd	18/0,1/0,5/0,12/s.segno
	aci	"&1",32

" Set up the defaults for this segment.  These are overridden by other macro
" calls.

	set	s.path,0
	set	s.rings,0
	set	s.max_length,0
	set	s.cur_length,0
	set	s.absloc,0
	set	s.access,0
	set	sf.abs_seg,0

	set	seg_index,seg_index+1
	equ	&1_index,seg_index
	&end


	bool	a.read,10
	bool	a.execute,04
	bool	a.write,02
	bool	a.privileged,01

	macro	access

" Set the bits to be set into slte.access

&R&(	set	s.access,s.access+a.&i
&)
	&end


	macro	flags

" Set the bits that will be set into slte.flags.

&R&(	set	s.1,s.1+slte_uns.&i
	set	sf.&i,1
&)
	&end


	macro	flags2

" Set the bits that will ve set into slte.flags2.

&R&(	set	s.2,s.2+slte_uns.&i
&)
	&end


	macro	absloc

" Declare the segment to have a fixed (absolute) memory range.  This macro
" used here in template_slt_ is the only way to achieve this.
" Arguments are the starting address and the length.

	set_o	s.cur_length,&2
	set	s.max_length,(s.cur_length/1024)
	set_o	s.absloc,&1
	&end


	macro	allocate

" Allocate a specified number of words, using the slt allocation pointers.
" (The slt header will receive the updated values later.)

	set_o	s.cur_length,&1
	set	s.max_length,(s.cur_length/1024)
	set	s.absloc,first_free_word
	set	first_free_word,first_free_word+s.cur_length
	&end


	macro	branch

" Remember a path to add to the name_table.  Assume rings of 0 5 5.

	set	s.2,s.2+slte_uns.branch_required
	set	s.path,name_seg_size
	set	s.rings,R055
	&end


	macro	unpaged_seg

" Generate the objects for an unpaged (sdw-wise) segment.

	maclist	on
	use	sltes
	maclist	object

" Generate the slt entry.

	zero	name_seg_size+sl1_path_size+10*seg_index,s.path
	vfd	4/s.access,14/s.1,18/s.2
	vfd	9/((s.cur_length+1023)/1024),9/s.rings,18/s.segno
	vfd	3/0,9/s.max_length,24/36*s.cur_length

	maclist	on

" Generate sdw's for both DPS-8 and ADP systems.

	use	template_dseg
	maclist	object
	vfd	24/s.absloc,9/s.rings,1/(1-sf.abs_seg),2/0
	vfd	1/0,14/(s.cur_length/16-1),4/s.access,1/1,1/1,1/0,14/0

	maclist	on
	use	adp_template_dseg
	maclist	object
	vfd	22/(s.absloc/16),4/0,1/(1-sf.abs_seg),9/s.rings
	vfd	14/(s.cur_length/16-1),4/0,12/0,4/s.access,1/1,1/1

	maclist	on
	use	definitions

" Add entries so collection zero programs can look up attributes of this
" segment.

	maclist	off
	segdef	&1_ptr
	segdef	&1_absloc
	segdef	&1_lth

	even
	maclist	on
&1_ptr:	its	s.segno,0
&1_absloc: vfd	36/s.absloc
&1_lth:	vfd	36/s.cur_length
	maclist	off
	&end


	macro	paged_seg

" Generate the objects for a paged (sdw-wise) segment.
" Start by finding the page table location.

&=&2,sup&[
	use	template_upt
	set	s.upt_address,upt_end+upt_absloc+upt_entry.ptws
&;
	use	template_init_upt
	set	s.upt_address,iupt_end+iupt_absloc+upt_entry.ptws
&]
	maclist	on
	use	sltes
	maclist	object

" Generate the slt entry.

	zero	name_seg_size+sl1_path_size+10*seg_index,s.path
	vfd	4/s.access,14/s.1,18/s.2
	vfd	9/((s.cur_length+1023)/1024),9/s.rings,18/s.segno
	vfd	3/0,9/s.max_length,24/36*s.cur_length

	maclist	off

" Find the page table length.

&^=&3,norm&[
	set	s.page_table_length,s.max_length
&;
	set	s.page_table_length,(s.cur_length/1024)
&]

" Generate the sdw's for the segment (DPS-8 and ADP).  The bound set 
" corresponds to the page table length.

	maclist	on
	use	template_dseg
	maclist	object
	vfd	24/s.upt_address,9/s.rings,1/1,2/0
	vfd	1/0,14/(s.page_table_length*64-1),4/s.access,1/0,1/1,1/0,14/0

	maclist	on
	use	adp_template_dseg
	maclist	object
	vfd	26/s.upt_address,1/1,9/s.rings
	vfd	8/(s.page_table_length-1),10/0,12/0,4/s.access,1/0,1/1

	maclist	off

" Update the unpaged page table running pointers and add entries to them
" to describe the page table to follow.

&=&2,init&[
	set	iupt_end,iupt_end+upt_entry.ptws+(((s.page_table_length)+1)/2)*2
	maclist	on
	use	template_init_upt
&;	set	upt_end,upt_end+upt_entry.ptws+(((s.page_table_length)+1)/2)*2
	maclist	on
	use	template_upt
&]	maclist	object
	vfd	36/s.page_table_length
	vfd	36/s.segno

" Generate the ptw's for this segment.  The two dups correspond to the ptws
" for which memory is allocated followed by those simply described by max 
" length.  As of this writing, all segments have either all of their ptws 
" describe memory locations or they have none of them do.  AT one time, though,
" a segment of mixed type did exist.

	maclist	off		
&^=&3,abs_seg&[
	set	s.running_absloc,s.absloc
	dup	(s.cur_length/1024)
	maclist	object
	vfd	18/(s.running_absloc/64),4o/10,1/1,1/0,2/0,1/0,1/0,1/0,1/0,1/0,1/1,1/0,1/1,2/1
	maclist	off
	set	s.running_absloc,s.running_absloc+1024
	dupend
&;&]
&^=&3,norm&[
	dup	(s.max_length-(s.cur_length/1024))
	maclist	object			" pad with bad pages
	vfd	18/0,4o/10,1/1,1/0,2/0,1/0,1/0,1/0,1/0,1/0,1/1,1/0,1/0,2/1
	dupend
&;&]
	even

	maclist	on
&=&2,init&[	use	adp_template_init_upt
&;	use	adp_template_upt
&]	maclist	object
	vfd	36/s.page_table_length
	vfd	36/s.segno
	maclist	off
&^=&3,abs_seg&[
	set	s.running_absloc,s.absloc
	dup	(s.cur_length/1024)
	maclist	object
	vfd	2/0,16/(s.running_absloc/1024),4/0,1/0,1/1,1/0,1/0,1/0,3/0,1/1,1/1,1/0,1/1,1/0,1/0
	maclist	off
	set	s.running_absloc,s.running_absloc+1024
	dupend
&;&]
&^=&3,norm&[
	dup	(s.max_length-(s.cur_length/1024))
	maclist	object			" pad with bad pages
	vfd	2/0,16/0,4/0,1/0,1/1,1/0,1/0,1/0,3/0,1/1,1/0,1/0,1/0,1/0,1/0
	dupend
&;&]
	even

	maclist	on

" Add entries here so that programs may look up the attributes of this segment.

	use	definitions
	maclist	off
	segdef	&1_ptr
	segdef	&1_absloc
	segdef	&1_lth

	even
	maclist	on
&1_ptr:	its	s.segno,0
&1_absloc: vfd	36/s.absloc
&1_lth:	vfd	36/s.cur_length
	maclist	off
	&end
" 
	equ	FIRST_SUP_SEG,0
	equ	FIRST_INIT_SEG,256
	bool	R055,055

" Initial values for counters.

	set	sup_segno,FIRST_SUP_SEG-1
	set	init_segno,FIRST_INIT_SEG-1
	set	upt_end,upt.first_entry
	set	iupt_end,upt.first_entry
	set	seg_index,-1
	set	first_free_word,prb_absloc+prb_lth

	use	template_dseg
dseg:
	use	adp_template_dseg
adp_dseg:

" Start unpaged page tables past the header.  We will go back and fill them in
" later.

	use	template_upt
	org	upt.first_entry

	use	template_init_upt
	org	upt.first_entry

	use	adp_template_upt
	org	upt.first_entry

	use	adp_template_init_upt
	org	upt.first_entry

	use	names
sl1_path:
	dec	17		" count
	aci	">system_library_1",17
	dec	0		" ACL
	equ	sl1_path_size,*-sl1_path

	maclist	off

" START of segment descriptions.

	seg	dseg,sup		" The DSEG must be segment 0.
	access	read,write
	flags	wired,paged,per_process
	allocate	2000
	set	s.max_length,8
	paged_seg	dseg,init,norm	" dseg is perm but page table is temp
				" since it becomes paged

" Generate the dbr's to be used.  These dbr's reflect the dseg sdw's.

	use	.text
dsbr:	vfd	24/s.upt_address,12/0
	vfd	1/0,14/(1024/16-1),4/0,1/0,4/0,12/0

adp_dsbr:	vfd	26/s.upt_address,10/0
	vfd	8/(1024/1024-1),6/0,4/0,12/0,4/0,1/0,1/0

	seg	bos_toehold,sup
	access	read,write
	flags	wired,layout_seg
	absloc	10000,2000
	paged_seg	bos_toehold,sup,norm

	seg	config_deck,sup
	access	read,write
	absloc	12000,10000
	flags	abs_seg,paged
	branch
	paged_seg	config_deck,init,norm	becomes paged

	seg	dn355_mailbox,sup
	access	read,write
	flags	wired,layout_seg
	absloc	3400,3000
	unpaged_seg dn355_mailbox,sup

	seg	fault_vector,sup
	access	read,write
	flags	wired,layout_seg
	absloc	0,600
	unpaged_seg fault_vector,sup

	seg	flagbox,sup
	access	read,write
	flags	wired,layout_seg
	absloc	fgbx_absloc,fgbx_lth
	paged_seg	flagbox,sup,norm

	seg	name_table,sup
	access	read,write
	flags	paged
	allocate	14000
	set	s.max_length,12
	branch
	paged_seg	name_table,init,norm

	seg	slt,sup		" The SLT must be segment 7.
	access	read,write
	flags	paged
	allocate	4000
	branch
	paged_seg	slt,init,norm

	seg	toehold_data,sup
	access	read,write
	flags	wired,layout_seg
	absloc	toedata_absloc,toedata_lth
	paged_seg	toehold_data,sup,norm

	seg	iom_mailbox,sup
	access	read,write
	flags	wired,layout_seg
	absloc	1200,2200
	unpaged_seg iom_mailbox,sup

	seg	unpaged_page_tables,sup
	access	read,write
	flags	wired,layout_seg
	absloc	upt_absloc,upt_lth
	paged_seg	unpaged_page_tables,sup,norm

	seg	toehold,sup
	access	read,write
	flags	wired,layout_seg
	absloc	toe_absloc,toe_lth
	paged_seg	toehold,sup,norm

	seg	breakpoint_page,sup
	access	read,write
	flags	wired,layout_seg
	absloc	bkpt_absloc,bkpt_lth
	paged_seg	breakpoint_page,sup,norm

	seg	bound_bootload_0,init
	access	read,execute,write,privileged
	flags	paged,abs_seg	" we destroy ourselves
	absloc	bbl0_absloc,bbl0_lth
	paged_seg	bound_bootload_0,init,norm

	seg	physical_record_buffer,init
	access	read,write
	flags	paged
	absloc	prb_absloc,prb_lth
	paged_seg	physical_record_buffer,init,norm

	seg	abs_seg0,init
	access	read,execute,write,privileged
	flags	abs_seg
	set	s.max_length,256
	set	s.cur_length,0
	paged_seg abs_seg0,init,abs_seg

	seg	int_unpaged_page_tables,init
	access	read,write
	flags	paged,abs_seg	" we destroy ourselves
	absloc	iupt_absloc,iupt_lth
	paged_seg	int_unpaged_page_tables,init,norm

	seg	early_dump,init
	access	read,execute,write,privileged
	flags	abs_seg
	set	s.max_length,1
	set	s.cur_length,0
	paged_seg early_dump,init,abs_seg

" Fill in the slt header.

	use	slt_header
t_slt:	its	name_table_seg_num,0
	vfd	36/first_free_word
	vfd	36/FIRST_SUP_SEG
	vfd	36/sup_segno
	vfd	36/FIRST_INIT_SEG
	vfd	36/init_segno
	dec	0

" And the name_table header.

	equ	name_words,name_seg_size+sl1_path_size+(seg_index+1)*10

	use	name_header
t_name_table:
	zero	0,name_words
	bss	,name_seg_size-1


	use	template_header
name_table_length:
	vfd	36/name_words
slt_length:
	vfd	36/slt.seg+(seg_index+1)*slte_size

" This is so the checker can find things in this segment.

	use	map
	even
	zero	t_slt,t_name_table
	zero	-1,-1

" unpaged page table's headers.

	use	template_upt
	org	0
upt:	vfd	36/0			" sst_absloc
	vfd	36/0			" sst_last_loc
	vfd	36/upt_absloc		" upt_absloc
	vfd	36/upt_absloc+upt_lth-1 	" upt_last_loc
	vfd	36/iupt_absloc		" iupt_absloc
	vfd	36/iupt_absloc+iupt_lth-1 	" iupt_last_loc
	vfd	36/upt_end
	vfd	36/upt_lth

	use	template_init_upt
	org	0
init_upt:	vfd	36/0			" sst_absloc
	vfd	36/0			" sst_last_loc
	vfd	36/upt_absloc		" upt_absloc
	vfd	36/upt_absloc+upt_lth-1 	" upt_last_loc
	vfd	36/iupt_absloc		" iupt_absloc
	vfd	36/iupt_absloc+iupt_lth-1 	" iupt_last_loc
	vfd	36/iupt_end
	vfd	36/iupt_lth

	use	adp_template_upt
	org	0
adp_upt:	vfd	36/0			" sst_absloc
	vfd	36/0			" sst_last_loc
	vfd	36/upt_absloc		" upt_absloc
	vfd	36/upt_absloc+upt_lth-1 	" upt_last_loc
	vfd	36/iupt_absloc		" iupt_absloc
	vfd	36/iupt_absloc+iupt_lth-1 	" iupt_last_loc
	vfd	36/upt_end
	vfd	36/upt_lth

	use	adp_template_init_upt
	org	0
adp_init_upt: vfd	36/0			" sst_absloc
	vfd	36/0			" sst_last_loc
	vfd	36/upt_absloc		" upt_absloc
	vfd	36/upt_absloc+upt_lth-1 	" upt_last_loc
	vfd	36/iupt_absloc		" iupt_absloc
	vfd	36/iupt_absloc+iupt_lth-1 	" iupt_last_loc
	vfd	36/iupt_end
	vfd	36/iupt_lth

" Put everything together.

	join	/text/template_header
	join	/text/slt_header,sltes
	join	/text/name_header,names
	join	/text/template_dseg
	join	/text/adp_template_dseg
	join	/text/definitions
	join	/text/template_upt
	join	/text/adp_template_upt
	join	/text/template_init_upt
	join	/text/adp_template_init_upt

	join	/text/map			" this MUST be last

	end
