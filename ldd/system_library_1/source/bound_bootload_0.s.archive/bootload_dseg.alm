" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

"
"	BOOTLOAD_DSEG
"
"	This program is called periodically to set up SDWs for the
"	collection 1 segments as they are read in.
"
" Created  10/04/80, W. Olin Sibert, from bootstrap1
" Modified 12/16/80, WOS, to construct both ADP and L68 SDWs, and for
"   bootload_dseg$make_sdw
" Modified 01/16/81, WOS, to remove references to processor_utility_segment, and fix bugs
" Modified sometime in May, 1981, by Chris Jones to cause it to accept system type in x0
" Modified BIM 8/82 to run appended as soon as possible, by receiving a
" bbl0-relative return address. All ic-rel's removed from make_sdw.
" Modified October 1982 by C. Hornig for canned dseg.
" Modified September 1983 by K. Loepere for adp and for make_core_ptw.

	name	bootload_dseg

	include	bootload_equs

	include	adp_sdw
	include	sdw_info
	include	l68_sdw
	include	system_types
"
"	tsx2	bootload_dseg$make_sdw
"
"	This entry is called by bootload_loader to create SDWs for collection 1
"	segments. It is entered via tsx2, and expects PR6 to point to an sdw_info
"	block. It returns with the SDW in the AQ.


ret_sdw:	bss	,2

	segdef	make_sdw

make_sdw:	stz	ret_sdw		" Clear the SDW to be returned
	stz	ret_sdw+1

	lda	pr6|sdw_info.bound	" Adjust the bound appropriately
	ldq	pr6|sdw_info.flags	" for paged or unpaged segment
	canq	sdw_info.paged,du
	tze	adjust_bound_unpaged
	ada	1023,dl			" Page boundary
	arl	10
	als	10
	tra	have_bound

adjust_bound_unpaged:
	ada	15,dl
	arl	4
	als	4

have_bound:
	ars	4			" Divide by 16
	tpnz	have_nonzero_bound	" Bound is positive
	lda	1,dl			" Pretend, instead
	ldq	sdw_info.faulted,du 	" but fault the SDW if bound was
	orsq	pr6|sdw_info.flags	" supposed to be zero

have_nonzero_bound:
	sba	1,dl			" subtract to convert to offset
	ldq	bootload_info$system_type
	cmpq	ADP_SYSTEM,dl
	tnz	l68_bound

	ldq	pr6|sdw_info.flags		" If it's paged, we should remove
	canq	sdw_info.paged,du		" the low order bits for the ADP
	tze	2,ic			" since bound is measured in pages.
	ana	=o777700,dl		" Bound was divided by 16 already.
	ana	adp_sdw.bound_mask,dl
	als	adp_sdw.bound_shift 	" Save it
	orsa	ret_sdw+adp_sdw.bound_word
	tra	bound_setup

l68_bound:
	ana	l68_sdw.bound_mask,dl
	als	l68_sdw.bound_shift 	" Save it
	orsa	ret_sdw+l68_sdw.bound_word
" 
bound_setup:
	lda	bootload_info$system_type
	cmpa	ADP_SYSTEM,dl
	tnz	l68_address

	lda	pr6|sdw_info.address	" Adjust and shift. Don't bother
	als	adp_sdw.add_shift		" masking this one because it's
	orsa	ret_sdw+adp_sdw.add_word " too large for a ,DL mask

	lda	pr6|sdw_info.access	" Pick up four access bits
	arl	36-4			" Put in low end of word
	als	adp_sdw.access_shift	" Must be in the order: REWP
	orsa	ret_sdw+adp_sdw.access_word

	lda	pr6|sdw_info.rings	" Pick up the ring brackets
	arl	36-3*3
	als	adp_sdw.rings_shift
	orsa	ret_sdw+adp_sdw.rings_word

	lda	pr6|sdw_info.gate_entry_bound " Is it a gate?
	tnz	set_adp_entry_bound

	ldq	adp_sdw.not_a_gate,dl	" Get the not-a-gate flag
	orsq	ret_sdw+adp_sdw.not_a_gate_word " and set it
	tra	set_adp_sdw_flags

set_adp_entry_bound:
	sba	1,dl			" Convert into actual offset
	ana	adp_sdw.entry_bound_mask,dl	" for entry bound in SDW
	als	adp_sdw.entry_bound_shift
	orsa	ret_sdw+adp_sdw.entry_bound_word

set_adp_sdw_flags:
	ldq	pr6|sdw_info.flags	" Get the flags (ignore cache for ADP)

	lda	adp_sdw.unpaged,dl		" Get the unpaged flag
	canq	sdw_info.paged,du
	tnz	2,ic			" If not paged, don't seg unpaged
	orsa	ret_sdw+adp_sdw.unpaged_word

	lda	adp_sdw.valid,dl		" Get the valid flag
	canq	sdw_info.faulted,du 	" See if it should NOT be set
	tnz	2,ic			" If faulted, don't set valid to 1.
	orsa	ret_sdw+adp_sdw.valid_word
	tra	address_setup
" 
l68_address:
	lda	pr6|sdw_info.address	" Adjust and shift. Don't bother
	als	l68_sdw.add_shift		" masking this one because it's
	orsa	ret_sdw+l68_sdw.add_word " too large for a ,DL mask

	lda	pr6|sdw_info.access	" Pick up four access bits
	arl	36-4			" Put in low end of word
	als	l68_sdw.access_shift	" Must be in the order: REWP
	orsa	ret_sdw+l68_sdw.access_word

	lda	pr6|sdw_info.rings	" Pick up the ring brackets
	arl	36-3*3
	als	l68_sdw.rings_shift
	orsa	ret_sdw+l68_sdw.rings_word

	lda	pr6|sdw_info.gate_entry_bound " Is it a gate?
	tnz	set_l68_entry_bound	" Not unless this is nonzero

	ldq	l68_sdw.not_a_gate,dl	" Get the not-a-gate flag
	orsq	ret_sdw+l68_sdw.not_a_gate_word " and set it
	tra	set_l68_sdw_flags

set_l68_entry_bound:
	sba	1,dl			" Convert into actual offset
	ana	l68_sdw.entry_bound_mask,dl	" for entry bound in SDW
	als	l68_sdw.entry_bound_shift
	orsa	ret_sdw+l68_sdw.entry_bound_word

set_l68_sdw_flags:
	ldq	pr6|sdw_info.flags	" Get the flags (ignore cache for ADP)

	lda	l68_sdw.unpaged,dl		" Get the unpaged flag
	canq	sdw_info.paged,du
	tnz	2,ic			" If not paged, don't seg unpaged
	orsa	ret_sdw+l68_sdw.unpaged_word

	lda	l68_sdw.valid,dl		" Since Level 68 segment fault is
	canq	sdw_info.faulted,du 	" DF0, there is no need to set df_no
	tnz	2,ic
	orsa	ret_sdw+l68_sdw.valid_word

	lda	l68_sdw.cache,dl		" Get the encacheability flag
	canq	sdw_info.cache,du
	tze	2,ic			" If not paged, don't seg unpaged
	orsa	ret_sdw+l68_sdw.cache_word

address_setup:
	ldaq	ret_sdw
	tra	0,x2
"
"	tsx2	bootload_dseg$make_core_ptw
"
" called with a memory address in a.  Returns a ptw for this in q.

	segdef	make_core_ptw

make_core_ptw:
	sta	core_addr
	ldq	bootload_info$system_type
	cmpq	ADP_SYSTEM,dl
	tnz	l68_ptw

	ldq	core_addr
	qls	18-10
	orq	=o010064,dl
	tra	0,x2

l68_ptw:	ldq	core_addr
	qls	18-6
	orq	=o420025,dl
	tra	0,x2

core_addr:
	dec	0
	end
