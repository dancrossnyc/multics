" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"
"
"    BOOTLOAD_FORMLINE
"
"
"    This is a primitive string mainpulator, on the lines of formline_,
"    for use before collection 1 is prelinked, and the real formline_
"    available.
"
"    It always formats into a supplied string, since console i/o is another
"    story.
"
"    Like the rest of bbl0, it is impure (we have no stack).
"
"    CALLING SEQUENCE
"    tsx2		bootload_formline
"    arg	control_string
"    arg  output_string
"    dec  maximum output string length
"    dec  nargs
"    arg  arg_one_addr   (offset in bound_bootload_0)
"    arg  arg_two_addr   (ditto)
"
"    areg contains length of rtrim'd string on return
"
"    actual invocation is with the formline macro ---
"
"    formline	(control string),output,arg1,arg2,arg3,...argN
"
"    SUPPORTED ^ thingies:
"
"     ^a one word of ascii chars
"     ^b one word of BCD chars    (^g for you bos fans)
"     ^A acc string
"     ^o octal number, leading zero suppression
"     ^w octal number, simple fullword
" 


	name	bootload_formline
	segdef	bootload_formline

	include	eis_micro_ops
	include	bootload_equs

" 

	mod	8
register_save_area:
	bss	,8
pointer_register_save_area:
	bss	,16


" Arg list definition
	equ	control_string,0
	equ	output_string,1
	equ	output_string_limit,2
	equ	n_args,3
	equ	args,4

	bss	return_address,1	" temp for calculation
	bss	arg_count,1	" to record usage of them
bootload_formline:
	sreg	register_save_area
	spri	pointer_register_save_area

" Calculate return address
" Don't push return address on stack until it has been bumped

	stx2	return_address
	lxl2	n_args,x2		" get n substitutions
	sxl2	arg_count		" for check of ^ count
	adlx2	return_address	" skip them
	eax2	4,x2		" skip fixed arguments

	Bpush

	ldx2	return_address	" restore to first arg

" Set up for input and output strings
" set registers that we will use

	epp5	control_string,x2*
	tsx7	get_input_char      " count in a
	ana	=o000777,dl	" go away, spaces
	eax1	0,al		" count in x1

	epp7	output_string,x2*   " assumed word aligned
	lxl4	output_string_limit,x2 " dont scribble randomly
	sxl4	return.output_length
	

	eax2	args,x2		" Advance X2 to first arg
 
" 

" Now we loop down characters
" This is dumb, but compact

main_char_loop:
	sbx1	1,du
	tmi	return_to_caller
	tze	main_char_loop.get_last_char
	tsx7	get_input_char

	cmpa	=o000136,dl		" ^
	tze	main_char_loop.special_char
main_char_loop.circumflex:
	tsx7	put_one_char
	tra	main_char_loop

main_char_loop.get_last_char:
	tsx7	get_input_char
main_char_loop.last_char_in_A:
	tsx7	put_one_char	" trailing ^ is just left
	tra	return_to_caller

main_char_loop.special_char:
	tsx7	get_input_char
	sbx1	1,du
	cmpa	=o000136,dl		" ^
	tze	main_char_loop.circumflex
	ldq	arg_count			 " progressively reduced
	tze	main_char_loop.unknown_control " just print it
	sbq	1,dl
	stq	arg_count		           " use one up

	cmpa	=o000141,dl		" a
	tze	main_char_loop.word_ascii
	cmpa	=o000101,dl		" A
	tze	main_char_loop.acc_string
	cmpa	=o000142,dl		" b
	tze	main_char_loop.word_bcd
	cmpa	=o000144,dl		" d
	tze	main_char_loop.word_decimal
	cmpa	=o000157,dl		" o
	tze	main_char_loop.octal_word_sup
	cmpa	=o000167,dl		" w
	tze	main_char_loop.octal_word

" no such thingie
	aos	arg_count			" don't use it up after all
main_char_loop.unknown_control:
	sta	main_char_loop.save_char
	lda	=o000136,dl		" ^
	tsx7	put_one_char
	lda	main_char_loop.save_char
	tsx7	put_one_char
	tra	main_char_loop

main_char_loop.save_char:
	bss	,1
" 

main_char_loop.word_ascii:

	tsx7	get_arg_address		" to x6
	epp1	0,x6*			" pr1 -> word of chars
	lda	4,dl		" count

	tra	ascii_common

main_char_loop.acc_string:

	tsx7	get_arg_address
	epp1	0,x6*			" word with count
	stz	acc_string.temp
	mlr	(pr),()
	desc9a	1|0,1
	desc9a	acc_string.temp(3),1	" grab count to LOWER
	eax3	1
	a9bd	1|0,x3			" skip count
	lda	acc_string.temp
	tra	ascii.no_trim

acc_string.temp:
	bss	,1

main_char_loop.word_bcd:

	tsx7	get_arg_address		" in x6
	epp1	0,x6*			" eis wants chars in index
	mvt	(pr),(),fill(040)
	desc6a	pr1|0,6
	desc9a	string_temp,6
	arg	bcd_to_ascii_table
	epp1	string_temp		" word aligned
	lda	6,dl	" length
	tra	ascii_common

main_char_loop.decimal_temp:
	bss	,3

main_char_loop.word_decimal:
	tsx7	get_arg_address
	epp1	0,x6*
	btd	(pr),()
	desc9a	pr1|0,4
	desc9ls	main_char_loop.decimal_temp,12

	mvne	(),(),()			" flush leading zeros
	desc9ls	main_char_loop.decimal_temp,12		
	desc9a	main_char_loop.decimal_mops,5
	desc9a	string_temp,12

	epp1	string_temp
	lda	12,dl	" length
	tra	ascii_common

	bool	blank,040
	macro	mop_string
	vfd	&R1&(0009/&i&<&x,&k&[,&]&)
	&end


main_char_loop.decimal_mops:
	mop_string  lte+3,blank,mfls,mfls,mfls


main_char_loop.octal_word_sup:
	eax0	1		" flag -- suppress
	tra	octal.common
main_char_loop.octal_word:
	eax0	0
octal.common:
	tsx7	get_arg_address
	ldq	0,x6*		" get the word
	tnz	octal.nonzero
	lda	=o000060,dl	" A zero
	tsx7	put_one_char	" and that's it
	tra	main_char_loop

octal.nonzero:
	eax5	12		" digits
	lda	0,dl
	
octal_loop:
	llr	3		" 3 bits into q
	canx0	1,du		" suppressing?
	tze	octal_loop.no_suppress
	cmpa	0,dl		" zero?
	tze	octal_loop.suppress
octal_loop.no_suppress:
	eax0	0		" turn off suppression
	ada	=o000060,dl	" Ascii !
	tsx7	put_one_char	" output directly
octal_loop.suppress:
	lda	0,dl		" clean
 	sbx5	1,du
	tze	main_char_loop
	cmpx5	6,du		" used up half?
	tnz	octal_loop
	canx0	1,du
	tnz	octal_loop	" if still suppressing, no need.
	lda	=o000040,dl	" space
	tsx7	put_one_char
	lda	0,dl
	tra	octal_loop

" 

" tra here with pr1 -> string to be trimmed and inserted,
" a contains length to be considered

ascii_common:

" LTRIM

	tct	(pr,rl)
	desc9a	pr1|0,al
	arg	ascii.tct_table
	arg	ascii.tct_count

	ldq	ascii.tct_count
	anq	=o000077777777  " remove trash
	stq	ascii.tct_count
	a9bd	1|0,ql	      " move past trash
	sba	ascii.tct_count " reduce length
	tze	ascii.just_spaces

" RTRIM

	tctr	(pr,rl)
	desc9a	pr1|0,al
	arg	ascii.tct_table
	arg	ascii.tct_count

	ldq	ascii.tct_count
	anq	=o000077777777
	stq	ascii.tct_count
	sba	ascii.tct_count	" trim length
	tnz	ascii.not_just_spaces
ascii.just_spaces:
	lda	=o000040,dl
	tsx7	put_one_char
	tra	main_char_loop

ascii.not_just_spaces:
ascii.no_trim:
	mvt	(pr,rl),(pr,rl),fill(040)     " we will do some useless filling
	desc9a	pr1|0,al
	desc9a	pr7|0,x4
	arg	ascii.bad_char_trans
	ttn	ascii.truncated

	a9bd	7|0,al
	als	18
	sta	ascii.tct_count	"  so we can subtract 
 	sbx4	ascii.tct_count	" cant be negative, since no truncation
	tmoz	return_to_caller	" but be safe
	tra	main_char_loop

ascii.truncated:
	eax4	0		" none left
	tra	return_to_caller.no_trim
ascii.tct_count:
	bss	,1
	macro	wc
	maclist	object,save
	vfd	&R1&(o9/&=&i,0&[000&;777&]&<&x,&k&[,&]&)
	maclist	restore
	&end
ascii.tct_table:
	wc	0,0,0,0	" 0 1 2 3
	wc	0,0,0,0	" 4 5 6 7
	wc	0,0,0,0	" 10 11 12 13
	wc	0,0,0,0	" 14 15 16 17
	wc	0,0,0,0	" 20 21 22 23
	wc	0,0,0,0	" 24 25 26 27
	wc	0,0,0,0	" 30 31 32 33
	wc	0,0,0,0	" 34 35 36 37
	wc	0,1,1,1	" 40 41 42 43  (space, ...)
	wc	1,1,1,1	" 44 45 46 47
	wc	1,1,1,1	" 50 51 52 53
	wc	1,1,1,1	" 54 55 56 57
	wc	1,1,1,1	" 60 61 62 63
	wc	1,1,1,1	" 64 65 66 67
	wc	1,1,1,1	" 70 71 72 73
	wc	1,1,1,1	" 74 75 76 77
	wc	1,1,1,1	" 100 101 102 103
	wc	1,1,1,1	" 104 105 106 107
	wc	1,1,1,1	" 110 111 112 113
	wc	1,1,1,1	" 114 115 116 117
	wc	1,1,1,1	" 120 121 122 123
	wc	1,1,1,1	" 124 124 126 127
	wc	1,1,1,1	" 130 131 132 133
	wc	1,1,1,1	" 134 135 136 137
	wc	1,1,1,1	" 140 141 142 143
	wc 	1,1,1,1	" 144 145 146 147
	wc	1,1,1,1	" 150 151 152 153
	wc	1,1,1,1	" 154 155 156 157
	wc	1,1,1,1	" 160 161 162 163
	wc	1,1,1,1	" 164 165 166 167
	wc	1,1,1,1	" 170 171 172 173
	wc	1,1,1,0	" 174 175 176 177
	dup	128/4
	wc	0,0,0,0
	dupend
ascii.bad_char_trans:
	dup	8
	oct	077077077077
	dupend
	set	char.c,32
	dup	95
	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
	set	char.c,char.c+4
	dupend
	vfd	o9/174,o9/175,o9/176,o9/077
	dup	128
	aci	"????"
	dupend

return_to_caller:
	mlr	(),(pr,rl),fill(040)
	desc9a	0
	desc9a	7|0,x4
return_to_caller.no_trim:
	sxl4	return.count_temp
	lda	return.output_length
	sba	return.count_temp
	sta	return.count_temp
	lreg	register_save_area
	lpri	pointer_register_save_area
	lda	return.count_temp
	Breturn
return.count_temp:
	bss	,1
return.output_length:
	bss	,1

" 

" Subroutine to fetch next input char into A

get_input_char:
	mlr	(pr),()
	desc9a	5|0,1
	desc9a	get_input_char.temp(3),1	" in bottom of word
	lda	1,dl
	a9bd	5|0,al			" add 1 to pr5
	lda	get_input_char.temp
	tra	0,x7			" and return
put_one_char.temp:
get_input_char.temp:
	dec	0

" Subroutine to stuff out the next character

put_one_char:
	sta	put_one_char.temp
	mlr	(),(pr)
	desc9a	put_one_char.temp(3),1
	desc9a	pr7|0,1
	lda	1,dl
	a9bd	7|0,al
	sbx4	1,du
	tze	return_to_caller	" no more space
	tra	0,x7

" Subroutine to use up an argument

get_arg_address:
	eax6	0,x2		" x6 -> actual location of arg pointer
	eax2	1,x2		" use up arg
	tra	0,x7

string_temp:
	aci	"",64
bcd_to_ascii_table:
	aci	X0123456789[#@:>?X
	aci	X abcdefghi&.](<\X
	aci	X^jklmnopqr-$*);'X
	aci	X+/stuvwxyz_,%="!X

	end
