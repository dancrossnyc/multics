" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(85-09-09,Fawcett), approve(85-09-09,MCR6979),
"     audit(86-01-31,GDixon), install(86-03-21,MR12.0-1033):
"     Support for FIPS.
"  2) change(87-04-14,Farley), approve(87-07-06,MCR7717),
"     audit(87-07-15,Fawcett), install(87-07-17,MR12.1-1043):
"     Added test for unequal dcw list lengths.  In some cases save_dcws will
"     be longer than handler_dcws.
"                                                      END HISTORY COMMENTS


	name	toehold

" This wired, privileged program resides in the low 256K
" of memory at a known absolute location (toe_absloc). It is
" 
" *** IMPURE
" *** MODIFIED BY OTHER PROGRAMS
" *** PRIVILEGED
" *** RUNS IN ABSOLUTE MODE
"  
" Started by Olin Sibert and Benson Margulies.
" Finished by Keith Loepere in the glow of a maintenance panel.
" Modified by Paul Farley and Rich Fawcett for large MSU3380 cylinders.
" Modified by Keith Loepere to delay (AAARGHHH!!!) after status for DAU.
	
"
	include	bootload_equs
"
	include	coll0_segnos
"
	include	fault_vector
"
	include	flagbox
"
	include	iom_data
"
	include	scr
"
	include	stack_frame
"
	include	toehold_save_dcls_

" *******************************************************************
" Enter at the following in ABSOLUTE MODE, via processor switches   *
" or derail.					        *
" *******************************************************************

	inhibit	on			<><><>ON<><><>

" Entry sequences: each one saves the machine state and then transfers to
" the correct code.  The ret instruction allows some indicators to be set
" at the same time so as to give us a flag saying what entry was made.

	org	TOE_HOLD_CRASH_ENTRY*2
	scu	toe_absloc+temp_scu		" Operator Crash
	ret	toe_absloc+switch_entry

	org	TOE_HOLD_ESD_ENTRY*2
	scu	toe_absloc+temp_scu		" ESD
	ret	toe_absloc+esd_entry

	org	TOE_HOLD_DUMP_ENTRY*2
	scu	toe_absloc+temp_scu		" DUMP entry
	ret	toe_absloc+dump_entry

	org	TOE_HOLD_MULTICS_ENTRY*2
	scu	toe_absloc+temp_scu		" Multics Crash
	ret	toe_absloc+multics_crash_entry

	org	TOE_HOLD_RESTART_ENTRY*2
	scu	toe_absloc+temp_scu		" Multics restart point
	ret	toe_absloc+multics_restart_entry

	org	TOE_HOLD_BOOT_ENTRY*2
	nop				" boot entry
	tra	bootload_abs_mode$0+toe_absloc

	org	toehold.flagbox
flagbox:	bss	,64

	org	toehold.handler_mc
handler_mc:
	bss	,48

	org	toehold.paths		" io paths to use to save/
	equ	n_paths,4			" restore Multics memory
paths:	bss	,io_path_size*n_paths	" (and read us in)

	org	toehold.n_paths_used
n_paths_used:
	bss	,1			" no of slots above used

	org	toehold.memory_state
memory_state:				" key state of memory/Multics
	dec	0

	org	toehold.bce_dbr
bce_dbr:	bss	,2			" used to restart bce

	org	toehold.bce_mode_reg
bce_mode_reg:
	bss	,2			" and cache_mode reg

	org	toehold.esd_segnum
esd_segnum:
	bss	,1

	org	toehold.dcw_list_size
dcw_list_size:
	bss	,1			" dcw_list_size in upper
					" dcws_per_cly in lower
	org	toehold.seeks_used
seeks_used: 
	bss	,1
	
	org	toehold.save_dcws
save_dcws:
	bss	,260			" dcw lists for saving memory

	org	toehold.handler_dcws
handler_dcws:
	bss	,260			" dcw lists for reading bce
"
	org	toehold.handler_code	" toehold code
	mod	16
status:	
	bss	,16			" iom status area
ignore_status:
	bss	,16			" undesired iom status area

temp_scu:					" scu data saved before we
	bss	,8			" know if we want to save it
save_regs:				" regs saved before we have 
	bss	,8			" decided to save state
temp_mode_reg:
	bss	,2			" mode reg save
temp:	bss	,2

pcw:	bss	,2			" for disk i/o

new_cfg:	bss	,2			" scu config info

cfg_mask_mask:
	oct	000777777777	Mask out Mask A and Mask B
	oct	000777777777

status_mask:				" iom mask for finding good 
	vfd	o36/370000770000,36/0	" status

io_timer:	bss	,2			" clock timer for timout

thirty_secs:
	dec	0,30000000		" in microseconds

cow:	oct	0			" connect operand word

turn_off_hregs:
	oct	0
turn_off_cache:
	oct	3

which_entry:
	bss	,1

seeks_done:
	bss	,1			" in disk i/o

operation_type:				" read/write disk i/o
	bss	,1

operation_not_mask:				" for removing operation
	oct	007777777777		" code from idcw's

low_memory_save_size_in_chars:
	vfd	36/4*2048

	equ_o	mbx_absloc,1200

	bool	scr_mr.id.4mw,000002	" id for a 4mw scu

" Index register usage

	equ	rscr_index,7
	equ	last_controller_mask,6	" for mask setting
	equ	zap_smcm_return_index,5

				" for per cylinder i/o
	equ	iom,6		" Index Register to mailbox array
	equ	seek_dcws_index,5 " index off toehold for dcw_list for this seek
	equ	chn,4		" Index Register to channel_mailbox
	equ	dcws_index,3	" index off toehold for dcw_list
	equ	seek_return_index,2 " return from connect_timeout
	equ	io_return_index,1	" return from perform_io
	equ	io_path_index,0	" to io_path
"
	even

bbl0_ptr:	its	bbl0_segno_,0	" for finding early dumper

" operands for return instructions in entry sequences

switch_entry:
	vfd	18/toe_absloc+save_machine_conditions,18/scu.neg+scu.bm+scu.abs

multics_crash_entry:
	vfd	18/toe_absloc+save_machine_conditions,18/scu.bm+scu.abs

esd_entry:
	vfd	18/toe_absloc+save_machine_conditions,18/scu.zero+scu.bm+scu.abs

multics_restart_entry:
	vfd	18/toe_absloc+restore_machine,18/scu.bm+scu.abs

dump_entry:
	vfd	18/toe_absloc+go_to_dump,18/scu.bm+scu.abs

go_to_dump:
	ldt	-1,du
	tra	bootload_early_dump$0+toe_absloc
"
" Main entry to toehold.  Temporarily save state.  See if we need to save this
" state.  If so, copy temporary state into machine state, continue saving.  
" Otherwise, throw away state and proceed to read in bce.

save_machine_conditions:
	scpr	toe_absloc+temp_mode_reg,06
	lcpr	toe_absloc+turn_off_hregs,04
	lcpr	toe_absloc+turn_off_cache,02
	sreg	toe_absloc+save_regs
	sti	toe_absloc+temp
	ldt	-1,du			" no tro, please

	lda	toe_absloc+temp		" extract indicators that
	arl	12			" say how we entered toehold
	ana	=o77,dl
	sta	toe_absloc+which_entry
	tnz	toe_absloc+no_ilc_bump
	lda	1,du		" if Multics entry, must skip drl
	adla	toe_absloc+temp_scu+scu.ilc
	sta	toe_absloc+temp_scu+scu.ilc
no_ilc_bump:

" check to see if we should save memory (and state)

	lda	toe_absloc+memory_state
	tze	toe_absloc+save_state   " will later go to early dump
	cmpa	At_bce__early,dl
	tze	toe_absloc+save_state	" early bce crash
	cmpa	At_bce__boot,dl
	tze	toe_absloc+save_state	" real bce crash
	cmpa	Multics,dl
	tze	toe_absloc+save_state	" service crash/shut
	cmpa	Undefined_saving_state,dl
	tze	toe_absloc+just_save_mbx	" forget state but save mem
	cmpa	Undefined_saving_mem,dl
	tze	toe_absloc+just_write_Multics " state saved

	tsx	zap_smcm_return_index,toe_absloc+zap_smcm
	tra	toe_absloc+read_bce		" just_read_bce

just_save_mbx:
	tsx	zap_smcm_return_index,toe_absloc+zap_smcm
	tra	toe_absloc+done_regs

just_write_Multics:
	tsx	zap_smcm_return_index,toe_absloc+zap_smcm
	tra	toe_absloc+write_Multics

save_state:				" save total state
	lda	toe_absloc+memory_state
	sta	toe_absloc+multics_state+mc_state.old_memory_state
	lda	Undefined_saving_state,dl
	sta	toe_absloc+memory_state

	spri	toe_absloc+multics_state+mc_state.mc_+mc.prs
	spl	toe_absloc+multics_state+mc_state.mc_+mc.eis_info

	lda	toe_absloc+which_entry
	tze	toe_absloc+non_manual_flag

	ldq	fgbx.manual_crash,du	" manual entry
	orsq	fgbx_absloc+fgbx.rtb	" let bce know

non_manual_flag:
	orsa	fgbx_absloc+fgbx.rtb	" bce_entry field

	rscr	SC_ETC*8		" Read clock
	staq	toe_absloc+multics_state+mc_state.mc_+mc.fault_time

	rscr	SC_IC*8		" Read interrupt cells
	staq	toe_absloc+multics_state+mc_state.interrupt

" Next project is to grab an scu mask

	eax	rscr_index,7*64
	eax	last_controller_mask,7*2	" for last controller mask

smcm_loop:
	rscr	2*8,rscr_index	" Read mask
	staq	toe_absloc+multics_state+mc_state.masks,last_controller_mask " save it
	fld	0,dl		" ldaq 0,dl
	sscr	2*8,rscr_index	" zonk it
	eax	rscr_index,-64,rscr_index	" reduce
	eax	last_controller_mask,-2,last_controller_mask " reduce
	tpl	toe_absloc+smcm_loop

	inhibit	off		<><><>OFF<><><>
				" Why not?  We're masked.

	fld	0,dl
	staq	toe_absloc+multics_state+mc_state.cfg
	rscr	SC_MR*8
	canq	scr_mr.id.4mw,du	" we always have mask on 6000 sc
	tze	toe_absloc+skip_mask_set

	rscr	SC_CFG*8		" proceed to set mask A to us, B off
	staq	toe_absloc+multics_state+mc_state.cfg
	anaq	toe_absloc+cfg_mask_mask
	staq	toe_absloc+new_cfg
	lrl	scr_cfg2.port_no_shift+36
	anq	scr_cfg2.port_no_mask,dl	" port no. to QL
	lda	=o400000,du		" Mask A to port 0
	arl	0,ql			" Mask A to our port
	ldq	=o001000,du		" Mask B off
	oraq	toe_absloc+new_cfg
	sscr	SC_CFG*8

skip_mask_set:
	mlr	(),()			" copy temp save state
	desc9a	toe_absloc+temp_scu,8*4	" into real state
	desc9a	toe_absloc+multics_state+mc_state.mc_+mc.scu,8*4
	mlr	(),()
	desc9a	toe_absloc+save_regs,8*4
	desc9a	toe_absloc+multics_state+mc_state.mc_+mc.regs_word,8*4
	ldaq	toe_absloc+temp_mode_reg
	staq	toe_absloc+multics_state+mc_state.mode_reg

	sbar	toe_absloc+multics_state+mc_state.bar
	scpr	toe_absloc+temp,01		" store two words
	ldaq	toe_absloc+temp
	sta	toe_absloc+multics_state+mc_state.mc_+mc.fault_reg
	rsw	2		" what kind of CPU?
	arl	30		" -- AL
	ana	=o000003,dl	" just type
	eax4	0,al		" following expects that in X4
	lrl	mc.cpu_type_shift
	stcq	toe_absloc+multics_state+mc_state.mc_+mc.cpu_type_word,70 " and store

" Save history registers.
" The following is stolen from fim_util.

	ldq	2,du			get a 2 for stepping address
	eax6	4			4 blocks of
scpr1:	eax7	16			16 history registers
	eax3	0			set up for L68 CPU type initally
	cmpx4	1,du			is this a DPS8/70M CPU?
	tnz	toe_absloc+scpr2		xfer if no, it is L68
	eax3	48			yes, set up to skip first 48 hregs
scpr2:	lda	toe_absloc+scpr-1,6		get correct instruction
	sta	toe_absloc+temp		save in stack
scpr3:	xec	toe_absloc+temp		execute the instruction
	cmpx3	0,du			are we through skipping hregs?
	tze	toe_absloc+scpr5		yes, go increment address
	eax3	-1,3			no, skip another
	tra	toe_absloc+scpr3		and go execute scpr again

scpr5:	asq	toe_absloc+temp		increment address of instruction
	eax7	-1,7			count down
	tnz	toe_absloc+scpr3		more of this 16 double word block
	eax6	-1,6			count down
	tnz	toe_absloc+scpr1		another kind of hreg

	eax7	64			initially set clear count to 64
	cmpx4	1,du			is this a DPS8/70M CPU?
	tze	2,ic			yes, clear all 64 hregs
	eax7	16			no, clear only 16 hregs
	lcpr	0,03			set all history regs to zero
	eax7	-1,7			count down
	tpnz	-2,ic			xfer if more to do
	tra	toe_absloc+do_ams

scpr:	scpr	toe_absloc+multics_state+mc_state.ou_history_registers,40
"				OU History Regs for L68, OU/DU for DPS8
	scpr	toe_absloc+multics_state+mc_state.cu_history_registers,20
"					CU History Regs
	scpr	toe_absloc+multics_state+mc_state.du_history_registers,10
"			DU History Regs for L68, extended APU for DPS8
	scpr	toe_absloc+multics_state+mc_state.apu_history_registers,00
"					APU History Regs

do_ams:	sptp	toe_absloc+multics_state+mc_state.ptwam_ptrs	" associative memories
	sptr	toe_absloc+multics_state+mc_state.ptwam_regs
	ssdp	toe_absloc+multics_state+mc_state.sdwam_ptrs
	ssdr	toe_absloc+multics_state+mc_state.sdwam_regs
	cmpx4	1,du
	tnz	toe_absloc+done_regs		for dps8, we must save other three banks
	sptp	toe_absloc+multics_state+mc_state.ptwam_ptrs+16
	sptp	toe_absloc+multics_state+mc_state.ptwam_ptrs+32
	sptp	toe_absloc+multics_state+mc_state.ptwam_ptrs+48

	sptr	toe_absloc+multics_state+mc_state.ptwam_regs+16
	sptr	toe_absloc+multics_state+mc_state.ptwam_regs+32
	sptr	toe_absloc+multics_state+mc_state.ptwam_regs+48

	ssdp	toe_absloc+multics_state+mc_state.sdwam_ptrs+16
	ssdp	toe_absloc+multics_state+mc_state.sdwam_ptrs+32
	ssdp	toe_absloc+multics_state+mc_state.sdwam_ptrs+48

	ssdr	toe_absloc+multics_state+mc_state.sdwam_regs+32
	ssdr	toe_absloc+multics_state+mc_state.sdwam_regs+64
	ssdr	toe_absloc+multics_state+mc_state.sdwam_regs+96
"

done_regs:

" A transfer here in the normal case means that we are done saving state.
" This is not strictly correct.  Normally, it would not matter (except for
" certain obvious exceptions) in what order we saved state.  However, in the 
" case in which the toehold itself is interrupted, we must be very careful.
" If the toehold is interrupted, in general, the state saved will not be 
" correct.  It will not be possible to perform a go.  We must ensure, however,
" that an esd is possible.  To this end, we save certain toehold invariant
" state (information which the toehold doesn't change for its own purposes (as
" opposed to index registers, for instance)) which must be saved and restored
" for a successful esd.

" The idea is to first save the iom_mailbox (two pages containing)
" and then "fix" it for this program's needs. The saved ones
" can then be saved in the image.

	sdbr	toe_absloc+multics_state+mc_state.dbr

	ldq	toe_absloc+low_memory_save_size_in_chars
	mlr	(rl),(rl)
	desc9a	0,ql
	desc9a	toedata_absloc,ql

	eax0	bootload_early_dump$0
	lda	toe_absloc+multics_state+mc_state.old_memory_state
	tze	toe_absloc+bbl0_ptr,*x0
				" not valid, perform an early
				" dump- re-enter appending mode

	lda	Undefined_saving_mem,dl
	sta	toe_absloc+memory_state

write_Multics:

" write out Multics memory image

	lda	=o310000,du		" write
	sta	toe_absloc+operation_type
	eax	dcws_index,save_dcws
	tsx	io_return_index,toe_absloc+perform_io

	lda	Undefined_reading_bce,dl
	sta	toe_absloc+memory_state

read_bce:
	lda	toe_absloc+which_entry
	als	12
	ana	scu.zero,dl
	tnz	toe_absloc+perform_esd

" read in bootload Multics memory image

	lda	=o250000,du		" read
	sta	toe_absloc+operation_type
	eax	dcws_index,handler_dcws
	tsx	io_return_index,toe_absloc+perform_io

" now return to bootload Multics

	ldt	-1,du

	ldq	toe_absloc+low_memory_save_size_in_chars " restore fault_vector
	mlr	(rl),(rl)				" iom_mailbox from
	desc9a	toedata_absloc,ql			" toehold_data
	desc9a	0,ql

	ldbr	toe_absloc+bce_dbr			" restore regs
	lpl	toe_absloc+handler_mc+mc.eis_info
	lpri	toe_absloc+handler_mc+mc.prs
	ldaq	toe_absloc+handler_mc+mc.scu+4
	staq	pr6|stack_frame.return_ptr	" save_handler_mc saved these
					" pointers here for us to
					" reload.  This was because
					" they were stored into the
					" stack after it was saved
					" to disk.
	ldaq	toe_absloc+handler_mc+mc.scu+6
	staq	pr6|stack_frame.operator_ptr

	ldq	At_bce__crash,dl		" new state = crash
	lda	toe_absloc+multics_state+mc_state.old_memory_state
	cmpa	Multics,dl		" (will be refined during
	tnz	toe_absloc+set_new_state	" collection 1)
	lda	fgbx_absloc+fgbx.rtb
	ana	fgbx.shut,du		" = shutdown only if shut
	tze	toe_absloc+set_new_state	" and old state = Multics
	ldq	At_bce__shutdown,dl
set_new_state:
	stq	toe_absloc+memory_state

	lreg	toe_absloc+handler_mc+mc.regs_word
	ldi	toe_absloc+handler_mc+mc.scu+2
	epp0	toe_absloc+handler_mc+mc.scu+0,*
	lcpr	toe_absloc+bce_mode_reg,04	" mode and cache mode reg
	lcpr	toe_absloc+bce_mode_reg+1,02
	tra	pr0|1			" go to short_return in
					" save_handler_mc
"
" esd from switches

perform_esd:
	lda	toe_absloc+esd_segnum	" force to emergency_shutdown|0
	als	scu.psr_shift
	ada	scu.p,dl
	sta	toe_absloc+multics_state+mc_state.mc_+mc.scu+scu.ppr_word

	lda	scu.bm,dl
	sta	toe_absloc+multics_state+mc_state.mc_+mc.scu+scu.ilc

	fld	0,dl
	staq	toe_absloc+multics_state+mc_state.interrupt

	staq	toe_absloc+multics_state+mc_state.cfg

	tra	toe_absloc+restore_machine
"
" Restore the memory image

	inhibit	on			<><><>ON<><><>

restore_machine:
	ldt	-1,du			" no timer runout
	lda	Undefined_continue,dl
	sta	toe_absloc+memory_state

	tsx	zap_smcm_return_index,toe_absloc+zap_smcm  "mask us

	inhibit	off			<><><>OFF<><><>

" Read back Multics

	lda	=o250000,du		" read
	sta	toe_absloc+operation_type
	eax	dcws_index,save_dcws
	tsx	io_return_index,toe_absloc+perform_io

" Restore the IOM Mailbox

	ldq	toe_absloc+low_memory_save_size_in_chars
	mlr	(rl),(rl)
	desc9a	toedata_absloc,ql
	desc9a	0,ql

	ldbr	toe_absloc+multics_state+mc_state.dbr	" restore regs

	ldt	-1,du
	lbar	toe_absloc+multics_state+mc_state.bar

" Turn on cache and hregs here

	lcpr	toe_absloc+multics_state+mc_state.mode_reg,04
	lcpr	toe_absloc+multics_state+mc_state.mode_reg+1,02

" Restore system controllers

	inhibit	on			<><><>ON<><><>

	ldaq	toe_absloc+multics_state+mc_state.cfg
	tze	2,ic
	sscr	SC_CFG*8

	ldaq	toe_absloc+multics_state+mc_state.interrupt
	sscr	SC_IC*8		" restore interrupt cells

	eax	rscr_index,7*64
	eax	last_controller_mask,7*2

restore_mcm_loop:
	ldaq	toe_absloc+multics_state+mc_state.masks,last_controller_mask
	sscr	2*8,rscr_index
	eax	rscr_index,-64,rscr_index
	eax	last_controller_mask,-2,last_controller_mask
	tpl	toe_absloc+restore_mcm_loop

	lpl	toe_absloc+multics_state+mc_state.mc_+mc.eis_info
	lpri	toe_absloc+multics_state+mc_state.mc_+mc.prs

	lda	toe_absloc+multics_state+mc_state.old_memory_state
	sta	toe_absloc+memory_state

	lda	scu.rfi,dl		refetch instruction interrupted
	sta	toe_absloc+multics_state+mc_state.mc_+mc.scu+scu.rfi_word

	lreg	toe_absloc+multics_state+mc_state.mc_+mc.regs_word
	lra	toe_absloc+multics_state+mc_state.mc_+mc.regs_word+7
	ldt	=o40000,dl		wake up soon
	rcu	toe_absloc+multics_state+mc_state.mc_+mc.scu

	inhibit	off			<><><>OFF<><><>
"
perform_io:

" internal procedure to perform io given a dcw_list.
" inputs are operation_type and dcws_index
" For now there are a maximum of 4 paths to try to use to do I/O

try_first_path:
	lda	toe_absloc+low_memory_save_size_in_chars
	mlr	(),(rl),fill(000)	" zero mailboxes
	desc9a	0,0
	desc9a	0,al

	ldq	toe_absloc+n_paths_used
	sbq	1,dl
	mpy	io_path_size,dl
	eax	io_path_index,0,ql	" point to last io_path

try_another_path:
	lda	toe_absloc+paths+io_path.port_number_word,io_path_index
	tze	toe_absloc+bad_path

	eax	seek_dcws_index,dcw_list.seek_addresses,dcws_index " point into structure at first
	stz	toe_absloc+seeks_done	" remember the number we have done.

next_seek:
	szn	toe_absloc+dcw_list.seek_idcw,seek_dcws_index " check for valid idcw
	tze	0,io_return_index		" must be done
	ldt	-1,du			" try i/o through a path
	tsx	seek_return_index,toe_absloc+connect_timeout

	ldaq	toe_absloc+status		" check for error
	tze	toe_absloc+bad_path
	anaq	toe_absloc+status_mask
	tze	toe_absloc+done_seek

bad_path:
	eax	io_path_index,-io_path_size,io_path_index " down
	tpl	toe_absloc+try_another_path
	tra	toe_absloc+try_first_path

done_seek:
	adx	seek_dcws_index,toe_absloc+dcw_list_size " point to next list
	lda	toe_absloc+seeks_done
	ada	1,dl
	sta	toe_absloc+seeks_done
	cmpa	toe_absloc+seeks_used
	tmi	toe_absloc+next_seek
	tra	0,io_return_index		" finished  all seeks
"
" Subroutine to do the I/O
" inputs are operation type, io_path_index, seek_dcws_index

connect_timeout:
	lda	toe_absloc+paths+io_path.iom_number_word,io_path_index	" IOM tag (1-4)
	arl	io_path.iom_number_shift	" upper half
	ana	io_path.iom_number_mask,dl	" mask out port num
	sba	1,dl		" (0-3)
	als	8		" 256 words/mailbox
	eax	iom,iom_mailbox_seg.iom_mailbox,al

	ldq	toe_absloc+paths+io_path.channel_number,io_path_index " channel number
	anq	=o777777,dl	" lower half
	qls	2		" 4 words/channel
	eax	chn,0,ql
	stx	iom,toe_absloc+pcw	" (temp)
	adx	chn,toe_absloc+pcw	" point to the channel_mailbox

	qls	27-2		" now in high byte (invent PCW w/chan)
	lda	toe_absloc+paths+io_path.pcw,io_path_index " get caller's PCW
	staq	toe_absloc+pcw	" save it

	lda	toe_absloc+dcw_list.data_idcw,seek_dcws_index
	ana	toe_absloc+operation_not_mask
	ora	toe_absloc+operation_type	" make into appropriate idcw
	sta	toe_absloc+dcw_list.data_idcw,seek_dcws_index

	absa	toe_absloc+dcw_list.seek_idcw,seek_dcws_index	 " get address of DCW list
	als	6		" in AU
	sta	mbx_absloc+channel_mailbox.lpw,chn	" set DCW addr, clear rest
	stz	mbx_absloc+channel_mailbox.lpw+1,chn	" Unused
				" store LPW

 	absa	toe_absloc+status	" get address of status area
	als	6		" in AU
	sta	mbx_absloc+channel_mailbox.scw,chn " status there
				" set SCW

	absa	toe_absloc+pcw	" get address of PCW
	als	6		" in AU
	ora	=o020001,dl	" set bits for connect LPW
	sta	mbx_absloc+(connect_channel*4)+channel_mailbox.lpw,iom

	lda	toe_absloc+paths+io_path.port_number_word,io_path_index
	arl	io_path.port_number_shift	" port number on scu of iom
	ana	io_path.port_number_mask,dl	" into cow
	sta	toe_absloc+cow

	stz	toe_absloc+status
	cioc	toe_absloc+cow	" fire up the IOM

	lda	toe_absloc+pcw	" look at the PCW
	cana	=o040000,dl	" was it a mask?
	tnz	toe_absloc+no_status " yes, no status

	rscr	SC_ETC*8		" current time
	adaq	toe_absloc+thirty_secs
	staq	toe_absloc+io_timer	" timeout time

status_wait:
	ldaq	toe_absloc+status	" status yet?
	tmi	toe_absloc+got_status

	rscr	SC_ETC*8		" watch time go by
	cmpaq	toe_absloc+io_timer	" count down to timeout
	tmi	toe_absloc+status_wait " fall through on timeout
				" caller detects since status is 0
no_status:
	fld	0,dl		" make sure status is 0 on timeout
got_status:			" or mask PCW, for that matter
	staq	toe_absloc+status

	absa	toe_absloc+ignore_status " make sure no more status arrives
	als	6
	sta	mbx_absloc+channel_mailbox.scw,chn

" delay after status return so DAU/Dipper can reset themselves

	rscr	SC_ETC*8		" current time
	staq	toe_absloc+io_timer

status_delay:
	rscr	SC_ETC*8		" watch time go by
	sbaq	toe_absloc+io_timer	" time gone by
	cmpq	150,dl		" 150 usecs is good
	tmi	toe_absloc+status_delay

	tra	0,seek_return_index
"
	inhibit	on			<><><>ON<><><>

zap_smcm:					" mask all controllers
	eax	rscr_index,7*64
	eax	last_controller_mask,7*2	" for last controller mask

zap_smcm_loop:				" mask us
	fld	0,dl			" ldaq 0,dl
	sscr	2*8,rscr_index		" zonk it
	eax	rscr_index,-64,rscr_index	" reduce
	eax	last_controller_mask,-2,last_controller_mask " reduce
	tpl	toe_absloc+zap_smcm_loop
	tra	0,zap_smcm_return_index

	inhibit	off			<><><>OFF<><><>
	
	org	toehold.multics_state	" machine state of Multics
multics_state:
	bss	,mc_state_size
	end
