" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************
	name	bootload_abs_mode

" Created, from fwload, bootstrap1, and assorted other oddments, on the
"   19th day of October, 1980, W. Olin Sibert.
" Modified April and May, 1981, by Chris Jones for simplified bootloader I/O
" Rewritten October 1982 by C. Hornig
" Modified September 1983 by Keith Loepere for adp and paged segments.
" Modified July 1984 by Keith Loepere to set breakpoint page sentinel.

" This is the first program in bound_bootload_0 to be invoked.
" Its purpose is to get into appending mode and to transfer to bootload_0.
" 
	include	bce_breakpoint_page
	include	bootload_equs
	include	slt
	include	unpaged_page_tables
" 
my_zero:
	lda	0
	ana	=o770000,du
	sta	system_type-*,ic	non-zero for IOX

" clear collection 0 segments to zero

	lda	template_slt_$dseg_absloc+bbl0_absloc
				" clear from dseg begin
clr_loop:	stz	0,al
	ada	1,dl		" on to next
	cmpa	template_slt_$t_slt+slt.free_core_start+bbl0_absloc
	tmi	clr_loop-*,ic	" done?

" Initialize descriptor segment

	szn	system_type-*,ic
	tnz	3,ic
	eax1	template_slt_$dseg+bbl0_absloc
				" X1 -> template dseg
	tra	2,ic
	eax1	template_slt_$adp_dseg+bbl0_absloc

	lxl2	template_slt_$dseg_absloc+bbl0_absloc
				" X2 -> dseg
	lxl3	template_slt_$t_slt+slt.last_sup_seg+bbl0_absloc
	adx3	1,du		" include dseg sdw itself
dseg_sup_loop:
	ldaq	0,x1
	staq	0,x2
	eax1	2,x1
	eax2	2,x2
	eax3	-1,x3
	tnz	dseg_sup_loop-*,ic

	lda	template_slt_$t_slt+slt.first_init_seg+bbl0_absloc
	als	1
	ada	template_slt_$dseg_absloc+bbl0_absloc
	eax2	0,al		" X2 -> init segs in dseg

	lda	template_slt_$t_slt+slt.last_init_seg+bbl0_absloc
	sba	template_slt_$t_slt+slt.first_init_seg+bbl0_absloc
	ada	1,dl
	eax3	0,al
dseg_init_loop:
	ldaq	0,x1
	staq	0,x2
	eax1	2,x1
	eax2	2,x2
	eax3	-1,x3
	tnz	dseg_init_loop-*,ic

" Copy unpaged_page_tables

	szn	system_type-*,ic
	tnz	adp_upt-*,ic

	lxl3	template_slt_$upt+bbl0_absloc+upt.current_length
	eax1	template_slt_$upt+bbl0_absloc	x1 -> upt template
	eax2	upt_absloc			x2 -> upt
	tra	move_upt-*,ic

adp_upt:	lxl3	template_slt_$adp_upt+bbl0_absloc+upt.current_length
	eax1	template_slt_$adp_upt+bbl0_absloc
	eax2	upt_absloc

move_upt:
	ldaq	0,x1
	staq	0,x2
	eax1	2,x1
	eax2	2,x2
	eax3	-2,x3
	tnz	move_upt-*,ic

	szn	system_type-*,ic
	tnz	adp_iupt-*,ic

	lxl3	template_slt_$init_upt+bbl0_absloc+upt.current_length
	eax1	template_slt_$init_upt+bbl0_absloc	x1 -> iupt template
	eax2	iupt_absloc			x2 -> iupt
	tra	move_iupt-*,ic

adp_iupt:	lxl3	template_slt_$adp_init_upt+bbl0_absloc+upt.current_length
	eax1	template_slt_$adp_init_upt+bbl0_absloc
	eax2	iupt_absloc

move_iupt:
	ldaq	0,x1
	staq	0,x2
	eax1	2,x1
	eax2	2,x2
	eax3	-2,x3
	tnz	move_iupt-*,ic

" zero the breakpoint_page

	eax1	bkpt_absloc
	eax2	bkpt_lth
	fld	0,dl
bkpt_loop:
	staq	0,x1
	eax1	2,x1
	eax2	-2,x2
	tnz	bkpt_loop-*,ic

	lda	BKPT_page_sentinel-*,ic	" sentinel into bkpt_page
	sta	bkpt_absloc+bkpt_page.sentinel

	tsx2	initial_prs-*,ic	" fill in the pointer registers

	eax0	*+2		" rel addr in segment of instr after tra
	tra	seg|0,x0		" start appending

" WE ARE NOW IN APPENDING MODE

	tra	bootload_0$begin

BKPT_page_sentinel:
	aci	"bkpt"
" 
"	tsx2	bootload_abs_mode$initial_prs
"
"	This entry loads up the pointer registers.
"
	segdef	initial_prs
initial_prs:
	szn	system_type-*,ic
	tnz	3,ic
	ldbr	template_slt_$dsbr+bbl0_absloc	" load up
	tra	2,ic
	ldbr	template_slt_$adp_dsbr+bbl0_absloc

	epp	ds,template_slt_$dseg_ptr+bbl0_absloc,*
	epp	mb,template_slt_$iom_mailbox_ptr+bbl0_absloc,*
	epp	slt,template_slt_$slt_ptr+bbl0_absloc,*
	epp	nt,template_slt_$name_table_ptr+bbl0_absloc,*
	epp	prb,template_slt_$physical_record_buffer_ptr+bbl0_absloc,*
	epp	seg,template_slt_$bound_bootload_0_ptr+bbl0_absloc,*
	epp	fv,template_slt_$fault_vector_ptr+bbl0_absloc,*
	tra	0,x2

system_type:
	oct	0

	end
