/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(89-08-28,Farley), approve(89-09-18,MCR8132),
     audit(89-10-10,WAAnderson), install(89-10-11,MR12.3-1091):
     Increased the size of the console output buffer (out_buf) from
     132 to 256 to be consistent with oc_trans_output_.
                                                   END HISTORY COMMENTS */


/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */
syserr_real:
     procedure (arg_code);

/*	This procedure completely recoded  June 28, 1973 by  Bill Silver. */
/* 	Modified 750227 by LJS to change max length of syserr messages */
/*	Modified August, 1975 by Larry Johnson to implement error_code and binary entries */
/*	Modified January 1976 by Larry Johnson to fix bugs in "=" message handling */
/*	Modified March 1976 by Steve Webber to use logger HPROC */
/*	Modified May 1976 by Larry Johnson to add "binary_mylock" entry for use by ocdcm_ */
/*	Modified November 1976 by Larry Johnson to stop logging "=" messages */
/*	Modified May 1977 by Noel I. Morris to shrink stack frame and implement panic */
/*	Modified August 1977 by Noel I. Morris to fix bug in *lost "=" messages */
/*	Modified August 1978 by Bernard S. Greenberg to eliminate calling ocdcm with syserr lock locked. */
/*	Modified April 1982 by C. Hornig to add NL to console messages. */
/*	Modified June 1982 by E. N. Kittlitz to not equalize alarm messages. */
/*   	Modified September 1982 by C. Hornig to use automatic buffer for console */
/*        Modified 830601 BIM to check for silly error codes. */
/* 	Modified 830622 for new ocdcm_ interface... -E. A. Ranzenbach */
/*        Modified 83-12-19 BIM for better call to terminate_proc */
/*	Modified 83-??-?? Keith Loepere for calls to bce. */
/*        Modified 1984-11-26, BIM: options (validate) changed to
	pmut$wire_and_mask, actually call the copy primitive if
	we are called unwired. */
/*	Modified 1984-12-20, BIM: avoid recursive copy attempts by checking
	the paged syserr log lock before actually copying. */
/*	Modified 1984-12-21, EJ Sharpe for multiple_binary entrypoint */
/*	Modified 1985-01-21, EJ Sharpe for 2047 char text (was 512),
	also added process_id to wired msg */
/*	Modified 1985-01-25, Keith Loepere, to fix race in log copying. */
/*	Modified 1985-02-15, Keith Loepere, to restructure syserr paged vs
	wired lock startegy; basically to make the paged lock the 
	highest paged lock in the system so that a copy into the paged lock 
	is always possible from any paged process. */
/*	Modified 1985-03-28, EJ Sharpe, avoid copy to paged log when process
	is to be terminated or system is to be crashed. */

/*	The syserr code which we receive as an argument is converted
   to an action code whose value is mod 10 of the original value.
   The meaning of the ten possible action codes is:
   0  =>  write message without alarm, log, and return.
   1  =>  write message with alarm, log, and CRASH system - allow bce to return.
   2  =>  write message with alarm, log, and terminate process.
   3  =>  write message with alarm, log, and return.
   4  =>  log message and return, don't write message unless message not logged.
   5  =>  log message and return, don't write message even if not logged.
   (6 - 9) not used, mapped into code 5.


   /*		PARAMETER DATA		*/

dcl  arg_code			fixed bin;	/* (I) The syserr code. */
dcl  arg_data_code			fixed bin;	/* (I) Format of binary data on $binary entry */
dcl  arg_data_len			fixed bin;	/* (I) Length of binary data on $binary entry */
dcl  arg_data_pieces_array_ptr	ptr;		/* ptr to array of ptrs and lengths of bin data */
dcl  arg_data_ptr			ptr;		/* (I) Pointer to binary data on $binary entry */
dcl  arg_error_code			ptr unal;		/* (I) error_table_$ code on $error_code entry */
dcl  arg_n_data_pieces		fixed bin;	/* number of pieces of bin data */
dcl  arg_panic_mess			char (*);		/* (I) message to panic entry */


/*		AUTOMATIC  DATA		*/

dcl  alarm_flag			bit (1) aligned;	/* ON => write message with alarm.  */
dcl  arg_list_ptr			ptr;		/* arg list to syserr_real */
dcl  1 auto_mbuf			aligned,		/* refer to DATA STRUCTURING below */
       2 header			like mbuf_header,
       2 equal			char (4) unal;
dcl  1 auto_wlog_header		aligned like wlog_header;
dcl  1 auto_wmess_header		aligned like wmess_header;
dcl  binary_call			bit (1);		/* ON => entered through $binary entry */
dcl  code				fixed bin;	/* copy of code passed to syserr */
dcl  cont_flag			bit (1) aligned;	/* Continuation line flag used by oc_trans_output_. */
dcl  copying_permitted		bit (1) aligned;	/* environment permits page faults */
dcl  cs_pos			fixed bin;	/* Position of ioa_ ccntrol string in param list */
dcl  data_code			fixed bin;	/* Data classification code */
dcl  data_len			fixed bin;	/* Length of binary data */
dcl  data_piece_len			fixed bin;	/* Length of piece of binary data */
dcl  data_piece_ptr			ptr;		/* Pointer to piece of binary data */
dcl  data_pieces_array_ptr		pointer;		/* pointer to array of ptrs and lengths of the pieces of the binary data */
dcl  data_ptr			ptr;		/* Pointer to binary data */
dcl  error_table_call		bit (1);		/* ON => entered through $error_code entry */
dcl  error_table_code		fixed bin (35);
dcl  etmsgp			ptr;		/* Pointer to error table message on $error_code call */
dcl  mbuf_ptr			ptr;		/* Pointer to ASCII message buffer. */
dcl  message_len			fixed bin (21);	/* length of syserr message in data */
dcl  n_data_pieces			fixed bin;	/* number of binary data parts */
dcl  nargs			fixed bin;
dcl  1 oc_io			aligned like console_io;
dcl  oc_line_leng			fixed bin;	/* line length of the console...	*/
dcl  oc_printed_leng		fixed bin;	/* how much we will print on console */
dcl  ocdcm_code			fixed bin (35);	/* returned by ocdcm_...		*/
dcl  old_mask			bit (72) aligned;	/* actually entry value of the mask */
dcl  old_wlog_ptr			ptr;		/* to copy of syserr_data$wired_log_area */
dcl  olen				fixed bin (19);	/* Length  of the output string in  WORDS.  */
dcl  optr				ptr;		/* Pointer to beginning of the output buffer. */
dcl  out_buf			char (256) aligned; /* console buffer */
dcl  piece_index			fixed bin;	/* index of binary data piece */
dcl  print_len			fixed bin (21);	/* number of chars to print on console */
dcl  print_ptr			ptr;		/* Pointer to beginning of expanded message for console */
dcl  print_this_line_len		fixed bin (21);	/* Number  of characters processed. */
dcl  rtime			fixed bin (71);	/* Raw time in microseconds. */
dcl  sys_code			fixed bin;	/* Syserr code of this message. */
dcl  tenths_min			fixed bin;	/* Number of tenths of a minute. */
dcl  wire_arg			bit (72) aligned;	/* mask with pmut's nasty note or'ed into it */
dcl  wired			bit (1) aligned;	/* wired and masked */
dcl  wired_wlog_ptr			ptr;		/* to syserr_data$wired_log_area */
dcl  wired_wmess_ptr		ptr;		/* to where we would add message to syserr_data */
dcl  wired_stack_ptr		pointer;		/* restore value for unwire_unmask */
dcl  wmess_len			fixed bin;	/* Size of current wired message entry. */
dcl  write_flag			bit (1) aligned;	/* ON => this message should be written. */


/*		BASED  DATA		*/

dcl  CR_NL			char (5) based (addr (CR_NL_bits));

/* DATA STRUCTURING:
     This program endeavors to avoid copying data many times.  As such,
it overlays various data structures such that the large data areas need be
copied as seldom as possible.  The idea is to build a wlog structure that
is acceptable to syserr_copy$wired_log.  However, the text in this wlog 
structure also wants to be part of a mbuf structure for console purposes.
So, we lay down the text and data as for a wlog structure, but not the
header.  Instead, we allow for enough room for either a wlog/wmess header,
or a mbuf header, but keep these headers in auto storage, and overlay them
in front of the text when necessary. */

dcl  binary_data			(data_len) bit (36) aligned based (data_ptr); /* binary data on $binary entry */
dcl  data_piece			(data_piece_len) bit (36) aligned based (data_piece_ptr); /* Binary data on $multiple_binary entry */

dcl  1 data_pieces_array		(n_data_pieces) aligned based (data_pieces_array_ptr),
						/* an array of pointers pieces of the binary data */
       2 ptr			pointer,		/* pointer to part of the binary data */
       2 len			fixed bin;	/* number of words */

dcl  1 et				aligned based (etmsgp), /* An error table message */
       2 len			fixed bin (8) unal, /* Length of the message */
       2 msg			char (et.len) unal; /* The message */

/* This buffer will hold the ASCII message.  When writing a message the string will
   start at either  mbuf.no_log or mbuf.time  and extend to and include mbuf.text. */

dcl  1 mbuf			aligned based (mbuf_ptr),
       2 header			aligned like mbuf_header,
       2 text			char (2047) unal;	/* Expanded syserr message in ASCII. */

dcl  1 mbuf_header			aligned based,
       2 no_log,					/* Special message written only if there is no room
						   in the wired log buffer for this message entry. */
         3 lost			char (6) unal,	/* "*lost " */
         3 seq_num			pic "9999" unal,
         3 comma			char (2) unal,	/* ", " */
         3 sys_code			pic "9" unal,
         3 pad			char (3) unal,
       2 time,					/* Time message logged.  Converted to:  "hhmm.t"
						   where t = tenths of minutes. */
         3 hh			pic "99" unal,
         3 mmt			pic "99.9" unal,
         3 pad			char (2) unal;

dcl  old_wlog			(syserr_data$wired_log_size) bit (36) aligned based (old_wlog_ptr);
						/* allocated copy of syserr_data$wired_log_area */

dcl  wmess_copy			(wmess_len) bit (36) aligned based; /* for copying wmess into syserr_data */


/*		EXTERNAL ENTRIES CALLED	*/

dcl  arg_count_			entry (fixed bin);
dcl  arg_list_ptr_			entry (ptr);
dcl  formline_			entry (fixed bin, fixed bin, ptr, fixed bin (21), fixed bin, ptr);
dcl  oc_trans_output_		entry (ptr, fixed bin (21), fixed bin (21), ptr, fixed bin (19), fixed bin, bit (1) aligned);
dcl  ocdcm_$console_info		entry (char (4), bit (36), char (8), fixed bin, fixed bin, fixed bin (35));
dcl  ocdcm_$drain_io		entry ();
dcl  ocdcm_$priority_io		entry (ptr);
dcl  pmut$bce_and_return		entry options (variable);
dcl  pmut$read_mask			entry (bit (72) aligned);
dcl  pmut$set_mask			entry (bit (72) aligned);
dcl  pmut$unwire_unmask		entry (bit (72) aligned, pointer);
dcl  pmut$wire_and_mask		entry (bit (72) aligned, pointer);
dcl  pxss$unique_ring_0_wakeup	entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  syserr			entry options (variable);
dcl  syserr_copy$lock		entry ();
dcl  syserr_copy$unlock		entry ();
dcl  syserr_copy$wired_log		entry (ptr);
dcl  syserr_real$syserr_real		entry options (variable);
dcl  terminate_proc			entry (fixed bin (35));
dcl  wired_utility_$grow_stack_frame	entry (fixed bin) returns (ptr);


/*		EXTERNAL DATA	 */

dcl  error_table_$			ext;
dcl  pds$process_group_id		char (32) aligned ext;
dcl  pds$processid			bit (36) aligned ext;
dcl  pds$apt_ptr			pointer ext;
dcl  prds$			ext;
dcl  prds$idle_ptr			pointer ext;
dcl  scs$open_level			bit (72) aligned ext;
dcl  sys_info$time_correction_constant	fixed bin (71) ext;
dcl  syserr_data$logger_ec		fixed bin (71) ext;
dcl  syserr_data$logger_proc_id	bit (36) aligned ext;
dcl  syserr_data$wired_log_size	fixed bin ext;


/*		MISCELANEOUS	*/

dcl  cleanup			condition;

dcl  (add, addcharno, addr, addrel, baseno, bin, bit, byte, clock, currentsize, divide, length, max, min, mod, multiply, ptr, rel, rtrim, segno, size, stac, stackbaseptr, stacq, string, substr, unspec, wordno) builtin;


/*		CONSTANTS		*/

dcl  CR_NL_bits			bit (45) static options (constant) init ("015012177177177"b3); /* cr, nl, 3 pads - 
					sufficient to add nl to console string */
dcl  bad_ring1_msg			char (24) static options (constant) init ("syserr: Bad ring 1 call.");
dcl  crash_msg			char (46) static options (constant) init ("Multics not in operation; control process: ^a.");
dcl  lock_msg			char (21) static options (constant) init ("syserr: Mylock error.");
dcl  terminate_msg			char (33) static options (constant) init ("Now terminating user process: ^a.");
%page;

/*	MAIN  SYSERR_REAL  ENTRY  -  CALLED BY  SYSERR */

	cs_pos = 2;				/* formline_ control string is second param */
	call ring0_setup;

syserr_start:
	data_len = 0;

	call arg_list_ptr_ (arg_list_ptr);
	call SETUP_AND_TEXT;
	go to COMMON;


/* Entry point if binary data is included */

binary:
     entry (arg_code, arg_data_ptr, arg_data_code, arg_data_len);

	cs_pos = 5;				/* formline_ control string is 5th param */
	call ring0_setup;

syserr_binary_start:
	data_len = arg_data_len;

	call arg_list_ptr_ (arg_list_ptr);
	call SETUP_AND_TEXT;
	if data_len > 0 then do;			/* If there is binary data */
	     binary_call = "1"b;			/* this is binary call */
	     data_code = arg_data_code;
	     data_ptr -> binary_data = arg_data_ptr -> binary_data; /* Copy to wired stack */
	end;

	go to COMMON;


/* Entry point if binary data is supplied in pieces */

multiple_binary:
     entry (arg_code, arg_data_pieces_array_ptr, arg_n_data_pieces, arg_data_code);

	cs_pos = 5;
	call ring0_setup;

syserr_multiple_binary_start:
	data_pieces_array_ptr = arg_data_pieces_array_ptr;
	n_data_pieces = arg_n_data_pieces;
	data_len = 0;
	do piece_index = 1 to n_data_pieces;
	     data_len = data_len + data_pieces_array (piece_index).len;
	end;

	call arg_list_ptr_ (arg_list_ptr);
	call SETUP_AND_TEXT;

	if data_len > 0 then do;
	     binary_call = "1"b;			/* there's something for us */
	     data_code = arg_data_code;
	     data_piece_ptr = data_ptr;
	     do piece_index = 1 to n_data_pieces;	/* copy it piece by piece */
		data_piece_len = data_pieces_array (piece_index).len;
		data_piece_ptr -> data_piece = data_pieces_array (piece_index).ptr -> data_piece;
		data_piece_ptr = addrel (data_piece_ptr, data_piece_len);
	     end;
	end;
	goto COMMON;


/* Enter here with error code to expand */

error_code:
     entry (arg_code, arg_error_code);

	cs_pos = 3;				/* formline_ control string is 3rd */
	call ring0_setup;

syserr_error_start:
	error_table_call = "1"b;
	data_len = 0;

	call arg_list_ptr_ (arg_list_ptr);
	call SETUP_AND_TEXT;
	go to COMMON;
%page;

/* Ring 1 entry points to syserr. These entries are the same as the corresponding ring 0
   entries, except that a ring 1 caller is not allowed to crash the system or terminate a process. */

ring1:
     entry (arg_code);

	cs_pos = 2;				/* control string is second */
	call arg_count_ (nargs);			/* get argument count */
	call ring1_setup;
	go to syserr_start;				/* normal ring0 entry starts here */


ring1_error_code:
     entry (arg_code, arg_error_code);

	cs_pos = 3;				/* control string is 3rd  */
	call arg_count_ (nargs);			/* get argument count */
	call ring1_setup;
	go to syserr_error_start;			/* ring0 entry starts here */


ring1_binary:
     entry (arg_code, arg_data_ptr, arg_data_code, arg_data_len);

	cs_pos = 5;				/* control string is 5th */
	call arg_count_ (nargs);			/* get argument count */
	call ring1_setup;
	go to syserr_binary_start;


ring1_multiple_binary:
     entry (arg_code, arg_data_pieces_array_ptr, arg_n_data_pieces, arg_data_code);
	cs_pos = 5;
	call arg_count_ (nargs);			/* get argument count */
	call ring1_setup;
	goto syserr_multiple_binary_start;
%page;
COMMON:
	wired = "0"b;
	on cleanup
	     begin;				/* locks will be unlocked by verify_lock */
	     if wired then call pmut$unwire_unmask (wire_arg, wired_stack_ptr);
	end;
	copying_permitted = "0"b;

	sd_ptr = addr (syserr_data$syserr_area);

	call pmut$read_mask (old_mask);
	if old_mask = scs$open_level then		/* allowing interrupts */
	     if pds$apt_ptr ^= prds$idle_ptr then	/* Not an idle process */
		if stackbaseptr () ^= addr (prds$) then /* Not on the PRDS */
		     if ^termp_flags (sys_code)
			& ^crash_flags (sys_code) then/* not if process/system will disappear */
			if sd.log_flag then		/* WARNING, this is a paged database. */
						/* The following tree touches it IFF all the other conditions are satisfied. */
			     if addr (syserr_log_data$) -> syserr_log_data.lock.pid ^= pds$processid then
						/* Not in the middle of copying the log already */
				copying_permitted = "1"b; /* All these pass? then we can copy here. */

	write_flag = write_flags (sys_code);		/* Set flag if message is to be written */
	alarm_flag = alarm_flags (sys_code);		/* set flag if alarm needed */

	rtime = clock ();				/* Get raw time in microseconds. */

	auto_wmess_header.code = code;		/* fill in wmess header that we can unwired */
	auto_wmess_header.time = rtime;
	auto_wmess_header.pad = "0"b;
	auto_wmess_header.process_id = pds$processid;
	auto_wmess_header.data_code = data_code;

	wired_wlog_ptr = addr (syserr_data$wired_log_area);
						/* place for old messages */
	if copying_permitted then do;			/* when we can copy, we get and hold the paged lock.
						   The wired area is emptied into the paged log, and then we add
						   our message to the paged log.  Our message never goes into the
						   wired area. */
	     call syserr_copy$lock ();
	     old_wlog_ptr = wired_utility_$grow_stack_frame (syserr_data$wired_log_size);
	end;

	call pmut$wire_and_mask (wire_arg, wired_stack_ptr);
	wired = "1"b;

/* Before we reference any data in syserr_data we may have to lock it.
   Note, this lock controls all the data in syserr_data including the wired_log_area. */

	if ^sd.ocdcm_init_flag then call panic (mbuf.text);

	call SR_LOCK ();

/* Now fill in the time of message string that goes before each message.
   It is in the form:  "hhmm.t  ". */

	print_ptr = addr (mbuf.time);			/* For now, console message starts with time. */
	print_len = message_len + length (string (mbuf.time)); /* Get total length of string being written. */

	tenths_min = mod (divide (rtime - sys_info$time_correction_constant, 6000000, 52, 0), 14400);
						/* Number of 10ths of minutes so far today */
	auto_mbuf.header.time.hh = divide (tenths_min, 600, 5);
	auto_mbuf.header.time.mmt = tenths_min - divide (tenths_min, 600, 5) * 600;
	auto_mbuf.header.time.pad = "";
%page;
	if ^sd.log_flag then			/* Is logging mechanism ON? */
						/* NO, can't log message. */
	     auto_wmess_header.seq_num = 0;		/* Thus there is no sequence number. */
	else if copying_permitted then do;

/* look for old messages to copy out */

	     if wired_wlog_ptr -> wlog.count > 0 then do;
		old_wlog_ptr -> old_wlog = wired_wlog_ptr -> old_wlog; /* copy out old messages */
		wired_wlog_ptr -> wlog.next = rel (addr (wired_wlog_ptr -> wlog.buffer)); /* reset wired log */
		wired_wlog_ptr -> wlog.count = 0;
	     end;
	     else old_wlog_ptr -> wlog.count = 0;	/* no old messages */

	     auto_wmess_header.seq_num, wired_wlog_ptr -> wlog.seq_num = wired_wlog_ptr -> wlog.seq_num + 1;
	end;
%page;

/* This code is entered to put the current syserr message into the wired log.
   Each time this procedure is called we want to wake up the syserr
   logger HPROC who takes the messages out of the wired log buffer. */

	else do;

/* Get pointer to this message entry.  We have to fill in the length of the
   text before we know where the end of the entry will be.  Assume for now that
   there is room for this message. */

	     wired_wmess_ptr = ptr (wired_wlog_ptr, wired_wlog_ptr -> wlog.next);

RETRY_ADD:					/* here to retry with a shrunk message */

/* Now check to see if there really is room for this message entry in the wired buffer.
   If not, we will have to write out the message with a special prefix:
   "*lost xxxxxx, z "
   where	 xxxxxx  is the sequence number of the message, and
   z       is the syserr code of the message. */

	     if wmess_len > (size (wlog_header) + wired_wlog_ptr -> wlog.bsize)
		- (bin (wired_wlog_ptr -> wlog.next, 18) - wordno (wired_wlog_ptr)) then do;
						/* Is entry too big?  Do this if YES. */
		if binary_call then do;		/* First try throwing away binary data */
		     binary_call = "0"b;		/* by making it no longer a binary call */
		     wmess_len = wmess_len - auto_wmess_header.data_size;
		     auto_wmess_header.data_size = 0;
		     go to RETRY_ADD;
		end;

		auto_wmess_header.seq_num,		/* Get sequence number of this message. */
		     wired_wlog_ptr -> wlog.seq_num = wired_wlog_ptr -> wlog.seq_num + 1; /* claim sequence number now. */

		if wifnl_flags (sys_code) then do;	/* If message should be written if not logged */
		     write_flag = "1"b;		/* causes message to be written */
		     print_ptr = addr (mbuf.no_log);	/* Now writing special note.  */
		     print_len = print_len + length (string (mbuf.no_log));
		     auto_mbuf.header.no_log.lost = "*lost"; /* initialize work area */
		     auto_mbuf.header.no_log.comma = ",";
		     auto_mbuf.header.no_log.pad = "";
		     auto_mbuf.header.no_log.seq_num = mod (auto_wmess_header.seq_num, 10000);
						/* edit sequence number */
		     auto_mbuf.header.no_log.sys_code = sys_code; /* edit code */
		end;
	     end;
	     else do;

/* There is room for this message in the wired log.  Thus we can fill in the entry. */

		auto_wmess_header.seq_num,		/* Get sequence number of this message. */
		     wired_wlog_ptr -> wlog.seq_num = wired_wlog_ptr -> wlog.seq_num + 1; /* now that we know for sure that we are sending it. */

		wired_wlog_ptr -> wlog.next = bit (add (bin (wired_wlog_ptr -> wlog.next, 18), wmess_len, 18), 18); /* Incr address of where next entry goes. */
		wired_wlog_ptr -> wlog.count = wired_wlog_ptr -> wlog.count + 1; /* Add message to log buffer. */

		wmess_ptr -> wmess.header = auto_wmess_header; /* construct wmess_header in front of message */
		wired_wmess_ptr -> wmess_copy = wmess_ptr -> wmess_copy; /* add wmess to syserr_data */
	     end;

	     call WAKEUP_DAEMON;			/* move these messages! */
	end;
%page;
/* If we don't have to write this message then we are all done.  If we must write it then
   we must first convert it for console output.   Note, a maximum of 80 characters can
   be typed on one line.  With the "no_log" and "time" strings at the beginning of the
   line and since ASCII characters may convert into more than one typed character, it is
   possible the output string will be too long.  In this case the line will be
   continued.  Note, the message itself may consist of more than one line. */

	if write_flag then do;			/*  write - code is (4 - 9). */

/* Check here for a non-alarm syserr message being the same as the last message written.
   If this is the case, only an "=" will be printed. */

	     if ^alarm_flag & mbuf.text = sd.prev_text_written then do;
						/* A match */
		print_len = print_len - message_len + 1;
		message_len = 1;			/* set length to 1 character */
		print_ptr = addrel (addr (auto_mbuf), wordno (print_ptr) - wordno (mbuf_ptr)); /* lie - tell ocdcm_ to print only this header */
		if mbuf.text ^= " " then auto_mbuf.equal = "=";
		else auto_mbuf.equal = "";
						/* substitute "=" unless blank message */
	     end;
	     else do;				/* New message */
		if message_len > length (sd.prev_text_written) then /* too long to save */
		     unspec (sd.prev_text_written) = "0"b;
						/* so clear out old message */
		else sd.prev_text_written = substr (mbuf.text, 1, message_len);
						/* save text */
		mbuf_ptr -> mbuf_header = auto_mbuf.header; /* get the real mbuf header in front of the message for printing */
	     end;
	end;
%page;
/* Syserr data has been globally updated.  Now we need to write the actual message, which is done from data in the stack. */

	call SR_UNLOCK;				/* Unlock syserr data */

	if write_flag then do;
	     optr = addr (out_buf);			/* Pointer to output buffer. */
	     cont_flag = "0"b;			/* => 1st line of message.  oc_trans_output_ turns
						   it ON in case of a continuation line.  */

/* Each iteration processes 1 console output line.
   There may be more than one line in the syserr
   message or there may be a continuation line. */


	     call ocdcm_$console_info ("", "0"b, "", 0, oc_line_leng, ocdcm_code);
						/* get console line length...		*/
	     if ocdcm_code ^= 0 then oc_line_leng = 80;	/* default line length...		*/

	     do while (print_len > 0);
		call oc_trans_output_ (print_ptr, print_len, print_this_line_len, optr, olen, oc_line_leng, cont_flag);
		oc_printed_leng = multiply (olen, 4, 17);

		oc_io.read = "0"b;
		oc_io.alert = alarm_flag;
		oc_io.sequence_no = auto_wmess_header.seq_num;
		oc_io.event_chan = 0;

		if print_this_line_len >= print_len then do; /* this is the last line - add CR NL */
		     oc_printed_leng = length (rtrim (substr (out_buf, 1, oc_printed_leng), byte (127))); /* actual last char */
		     substr (out_buf, oc_printed_leng + 1, 5) = CR_NL;
		     olen = divide (oc_printed_leng + 5, 4, 17); /* 2 for cr/nl, 3 for rounding up to word */
		     oc_printed_leng = multiply (olen, 4, 17);
		end;

/* advance for next line */
		print_ptr = addcharno (print_ptr, print_this_line_len);
		print_len = print_len - print_this_line_len;
		alarm_flag = "0"b;			/* Don't want alarm ON more than once. */

		oc_io.leng = olen;
		oc_io.text = substr (out_buf, 1, oc_printed_leng);

		call ocdcm_$priority_io (addr (oc_io)); /* do the I/O...*/
	     end;
%page;

/*	Now check to see if we have to terminate the process or CRASH the system.  */

	     if termp_flags (sys_code) then do;		/* If process to be terminated */
		call syserr_real$syserr_real (LOG, terminate_msg, pds$process_group_id);
		call pmut$set_mask (scs$open_level);	/* Unmask so that recursive call wires */
		call terminate_proc (error_table_code);
	     end;


	     else if crash_flags (sys_code) then do;	/* If system is to crash */

/* TOO BAD we must CRASH.  Before we call bce we must be sure that all of the messages on
   the ocdcm_ syserr write queue have been written.  We will call a special entry
   in  ocdcm_ which completes all pending I/O. */

		call syserr_real$syserr_real (ANNOUNCE, crash_msg, pds$process_group_id);

		call ocdcm_$drain_io ();		/* flush pending I/O...		*/

		call pmut$bce_and_return;
	     end;
	end;
%page;

/* Time to leave */

	call pmut$unwire_unmask (wire_arg, wired_stack_ptr);

	if copying_permitted then do;
	     if old_wlog_ptr -> wlog.count > 0 then call syserr_copy$wired_log (old_wlog_ptr);
	     wlog_ptr -> wlog_header = auto_wlog_header;	/* reconstruct wlog header before text */
	     wlog.count = 1;
	     wmess_ptr -> wmess_header = auto_wmess_header;
	     call syserr_copy$wired_log (wlog_ptr);	/* add in our new message */
	     call syserr_copy$unlock;
	end;
	return;
%page;
/* All this entry does is force the  sd.lock  OFF.  */

syserr_reset:
     entry;

	addr (syserr_data$syserr_area) -> sd.lock = "0"b;

	return;


/* This entry is called if syserr is called before the IOM and operator's
   console software has been initialized.  It is also called when trouble
   is encountered in syserr or ocdcm_. */

panic:
     entry (arg_panic_mess);

	fgbxp = addr (flagbox$);			/* Get pointer to bce flagbox. */
	fgbx.message = arg_panic_mess;		/* Copy the message. */
	fgbx.alert, fgbx.mess = "1"b;			/* Turn on flag bits. */

	do while ("1"b);				/* Back to bce. */
	     call pmut$bce_and_return;
	end;
%page;

/* common processing for ring 1 calls */

ring1_setup:
     proc;

	binary_call = "0"b;				/* defaults */
	data_code = 0;
	error_table_call = "0"b;

	if nargs < cs_pos then do;			/* if not enough */
	     call syserr (4, bad_ring1_msg);
	     go to ring1_return;
	end;
	code = arg_code;				/* copy the code */
	sys_code = mod (code, 10);			/* compute action code */
	code = divide (code, 10, 17, 0);		/* check sort code */
	if code < 0 | code > 24 then code = 24;		/* apply default if out of range */
	code = 10 * code + sys_code;			/* this is new code after errors removed */

     end ring1_setup;


ring1_return:
	return;					/* nonlocal return from ring1_setup */


ring0_setup: proc;

	binary_call = "0"b;				/* defaults */
	data_code = 0;
	error_table_call = "0"b;

	code = arg_code;				/* copy syserr code */
	sys_code = mod (code, 10);			/* compute action code */
	return;
     end ring0_setup;
%page;

/* This internal procedure is called to unlock the wired log.  */

SR_UNLOCK:
     procedure;

	if stacq (sd.lock, "0"b, sd.lock) then ;	/* Unlock unconditionally */

     end SR_UNLOCK;

SR_LOCK:
     procedure;

	if sd.lock = pds$processid then call panic (lock_msg);
	do while (^stac (addr (sd.lock), pds$processid));
	end;
	return;
     end SR_LOCK;

WAKEUP_DAEMON:
     procedure;

	call pxss$unique_ring_0_wakeup (syserr_data$logger_proc_id, syserr_data$logger_ec, 0, (0));
	return;
     end WAKEUP_DAEMON;
%page;
SETUP_AND_TEXT:
     proc;

/* allocate a wlog structure to hold our message;
   generate the text of the message */

dcl  len_for_et			fixed bin;
dcl  max_header_size		fixed bin;
dcl  text_and_data_size		fixed bin;
dcl  work_ptr			ptr;

	auto_wmess_header.text_len, message_len = 2047;	/* maximum */
	auto_wmess_header.data_size = data_len;

	text_and_data_size = currentsize (addr (auto_wmess_header) -> wmess); /* how much a wmess corresponding to this auto header would need */

	max_header_size = max (size (wlog_header) + size (wmess_header), size (mbuf_header));

	work_ptr = wired_utility_$grow_stack_frame (max_header_size + text_and_data_size); /* Allocate message buffer. */

	wlog_ptr = addrel (work_ptr, max_header_size - (size (wlog_header) + size (wmess_header)));
	wmess_ptr = addrel (wlog_ptr, size (wlog_header));
	mbuf_ptr = addrel (work_ptr, max_header_size - size (mbuf_header));

	call formline_ (cs_pos, cs_pos + 1, addr (wmess.text), message_len, 1, arg_list_ptr);
						/* Expand syserr message. */

	if message_len = 0 then do;			/* if asked to write null message, be careful */
	     substr (wmess.text, 1, 4) = "";		/* clear text buffer */
	     message_len = 1;			/* write 1 blank */
	end;

	error_table_code = -9;
	if error_table_call then do;			/* If passed an error table code */
	     etmsgp = arg_error_code;			/* Copy packed pointer. */
	     unspec (error_table_code) = unspec (arg_error_code);
	     if baseno (etmsgp) = "077777"b3 then	/* If segment is -1 ... */
		etmsgp = ptr (addr (error_table_$), rel (etmsgp));
						/* Use error_table_. */
	     if segno (etmsgp) = 0 then error_table_code = -9;
	     else do;
		len_for_et = auto_wmess_header.text_len - message_len;
						/* Amount of room left to insert message */
		len_for_et = min (len_for_et, et.len + 1);
		if len_for_et > 0 then do;
		     substr (wmess.text, message_len + 1, 1) = " ";
		     substr (wmess.text, message_len + 2, len_for_et - 1) = et.msg;
						/* Concatenate message on end */
		     message_len = message_len + len_for_et;
						/* Adjust message length */
		end;
	     end;
	end;

	auto_wmess_header.text_len = message_len;
	wmess_len = currentsize (addr (auto_wmess_header) -> wmess);
	data_ptr = addrel (wmess_ptr, wmess_len - data_len);
	return;
     end SETUP_AND_TEXT;
%page; %include flagbox;
%page; %include oc_data;
%page; %include syserr_actions;
%page; %include syserr_constants;
%page; %include syserr_data;
%page; %include syserr_log_dcls;
%page;
/*	BEGIN MESSAGE DOCUMENTATION

   Message:
   syserr: Mylock error.

   S:	$crash

   T:	$run

   M:	$err

   A:	$recover


   Message:
   Now terminating user process: PERSON.PROJ.

   S:	$info

   T:	$run

   M:	This line is always preceded by an explanation
   of the error which required the terminaation of the user process
   PERSON.PROJ.

   A:	$ignore


   Message:
   Multics not in operation; control process: PERSON.PROJ.

   S:	$crash

   T:	$run

   M:	This message is always preceded
   by an explanation of the error which crashed the system.

   A:	$recover


   Message:
   syserr: Bad ring 1 call.

   S:	$log

   T:	$run

   M:	A bad call to syserr was made from ring 1.
   The system keeps running.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

     end syserr_real;
