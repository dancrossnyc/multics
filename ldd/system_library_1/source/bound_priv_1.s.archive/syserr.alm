" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1984 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"
" SYSERR - Procedure to call syserr_real after setting up stack frame.
"	Modified August 1975 by Larry Johnson to add binary and error_code entries
"	Modified 3/76 by S. H. Webber for new reconfig
"	Modified 12/80 by J. J. Bongiovanni for multiplexed ring-0 stacks
"	Modified 4/81 by J. J. Bongiovanni to add checks for wired stack, interrupts masked
"	Modified 10/83 by Keith Loepere for paged unpaged segments.
"	Modified 12/21/84 by EJ Sharpe for multiple_binary

	name	syserr

	entry	syserr
	entry	binary
	entry	error_code
	entry	multiple_binary

	bool	die_offset,030000

" 

	include	ptw

" 

	include	sdw

" 

	include	stack_frame

" 

	include	stack_header
"
	include	unpaged_page_tables

"
"	The main syserr entry is called by ring 0 procedures to type a message on the
"	operator's console.  Its main functions is to transfer this call to syserr_real.
"	If all the conditions listed below are true then we will also adjust the current
"	stack so the next frame will be at a high location in the stack.  This is done so
"	the stack history of the procedures which have just returned to the caller of syserr
"	will not be destroyed.  This stack history may be useful in analyzing a dump of
"	the crash.  The conditions which must all be met before the stack is changed are:
"	1.  The syserr code must be (1).  This => a fatal error.
"	2.  The current stack must be the per-process stack.
"	3.  The per-process stack must be paged.
"	4.  The page table lock must NOT be locked.
"	5.  The current stack must not be wired
"	6.  Interrupts must not be masked

syserr:
	ldx7	0,du			set code to be syserr call
	tra	common
binary:
	ldx7	1,du			set code to be syserr$binary call
	tra	common
error_code:
	ldx7	2,du			set code to be syserr$error_code call
	tra	common

multiple_binary:
	ldx7	3,du			set code to be syserr$multiple_binary

common:
	lda	1,dl			check for kill call
	cmpa	ap|2,*			ARG 1 = 1
	tnz	no_reset			Not a kill call so don't reset

	epaq	sp|0			Ptr to stack to AQ
	eax1	0,au			Seg no to X1
	cmpx1	<pds>|[stack_0_ptr]	          Are we on the per-process stack?
	tnz	no_reset

	als	1			Segno * 2
	ldaq	<dseg>|0,au		Get SDW of stack
	arl	sdw.add_shift		abs addr of stack's page table

	cmpa	unpaged_page_tables$0+upt.sst_last_loc	check if unpaged
	tpl	no_reset			out of sst => unpaged
	sba	unpaged_page_tables$0+upt.sst_absloc	offset of stack's PT in SST
	tmi	no_reset

	lda	sst$,al			PTW for page 0 of stack
	cana	ptw.wired,dl		is it wired
	tnz	no_reset			yes
	
	szn	sst$ptl			is page table locked?
	tnz	no_reset			yes

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>
	lxl1	prds$processor_tag
	lprpab	scs$mask_ptr,1
	xec	scs$read_mask,1		read current mask
	cmpaq	scs$sys_level		are interrupts masked
	tze	no_reset			yes
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><->

	ldaq	sp|stack_frame.next_sp 	pick up foward ptr
	staq	sp|stack_frame.entry_ptr 	save a copy
	ldq	die_offset,du		Next frame way up in stack.
	stq	sp|stack_frame.next_sp+1 	Reset foward ptr
	stq	sb|stack_header.stack_end_ptr+1

no_reset:
	tra	*+1,7		transfer to correct syserr_real entry
	tra	<syserr_real>|[syserr_real]
	tra	<syserr_real>|[binary]
	tra	<syserr_real>|[error_code]
	tra	<syserr_real>|[multiple_binary]

	end
