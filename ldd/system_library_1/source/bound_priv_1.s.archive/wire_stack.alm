" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************
	name	wire_stack


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
" Calling Sequence:
"	call wire_stack
"
" This procedure is designed to be called only from PL/1 programs
" through the use of the validate option.
"
" wire_stack performs the following steps:
"	1. If the current stack is the PRDS, or if this is too
"	   early in initialization, return.  Too early in
"	   initialization means before the SCS is set up, as this
"	   is when the masking mechanism is operative.
"	2. A stack frame for wire_stack is created which
"	   overlays the caller's stack frame.
"	3. The memory mask is set to sys_level.
"	4. The current and next pages of the stack are wired down.
"	5. A cleanup condition is established.
"	6. A new stack frame is manfactured for the caller.
"	7. The caller is returned to in his new frame.
"
" The steps above are undone either when the caller returns
" or when a non-local goto occurs.
"
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


" 

	segref	scs,faults_initialized
	segref	scs,read_mask,mask_ptr,sys_level
	segref	prds,processor_tag
	segref	tc_data,system_shutdown
	segref	privileged_mode_ut,wire_and_mask,unwire_unmask
	segref	condition_,condition_

	link	prds_link,<prds>|0


	tempd	ptp		pointer to stack's page table
	tempd	save_mask		previous memory controller mask
	tempd	label(2)		label for cleanup condition
	tempd	arglist(5)	argument list for call to condition_

" 

	include	stack_header

	include	stack_frame

	include	scs
" 

	entry	wire_stack

wire_stack:

" Ignore this call if on the PRDS or if too early in initialization

	epaq	sp|0		segment # of stack in AU
	eax0	0,au		place in X0
	cmpx0	lp|prds_link	are we on the prds?
	tze	.rt		if so, just return
	ldq	prds$processor_tag
	lda	scs$processor_data,ql	get data for this CPU
	cana	processor_data.online+processor_data.offline,du	early initialization?
	tze	.rt			yes, ignore call

" Ignore this call if masked down.

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	lxl1	processor_tag	CPU tag in X1
	lprpab	mask_ptr,1	get pointer for masking
	xec	read_mask,1	read system controller mask
	eraq	sys_level		masked to sys level?
	anaq	=v16/-1,20/,16/-1,20/  ..
	tze	.rt		if so, ignore the call
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

" Make stack frame for wire_stack.

	eppap	sp|stack_frame.min_length	establish stack frame for wire stack
	sprisp	ap|stack_frame.prev_sp	leave only the bare minimum of old frame
	eppsp	ap|0			caller's old frame will be rethreaded later
	adwpap	push			ap -> new frame for caller
	spriap	sp|stack_frame.next_sp	set pointer to next frame
	eppbb	sb|stack_header.stack_end_ptr,*  save stack end ptr in bb
	spriap	sb|stack_header.stack_end_ptr	set pointer to new end of stack
	sprilp	sp|stack_frame.lp_ptr	save linkage pointer

" Call privileged_mode_ut$wire_and_mask to do the work.

	eppbp	save_mask		bp -> place for saved controller mask
	spribp	arglist+2		..
	eppbp	ptp		bp -> place for page table pointer
	spribp	arglist+4		..
	ldaq	=v18/4,18/4	set arglist header
	staq	arglist		..

	call	wire_and_mask(arglist) wire and mask

" Set up argument list and call condition_.

	szn	faults_initialized	have faults been initialized yet?
	tze	create_frame	if not, skip call to condition_

	szn	system_shutdown	are we shutting down?
	tnz	create_frame	if so, don't establish condition

	link	cleanup_link,<*text>|[cleanup_handler]
	eppap	lp|cleanup_link,*	make label for cleanup handler
	spriap	label		..
	sprisp	label+2		..

	eppap	lp|condition_name	ap -> character string
	spriap	arglist+2		set up argument list
	eppap	label		ap -> label
	spriap	arglist+4		..
	eppap	lp|condition_name_desc set up descriptor list
	spriap	arglist+6		..
	eppap	lp|label_desc	..
	spriap	arglist+8		..
	ldaq	=v18/4,18/4,18/4	set argument list header
	staq	arglist		..

	sprilp	sp|stack_frame.lp_ptr  be careful to save linkage pair

	call	condition_(arglist)  establish the condition

	epplp	sp|stack_frame.lp_ptr,*	restore the linkage pair now

" Create new stack frame for caller.

create_frame:
	eppbp	sb|stack_header.stack_end_ptr,*  bp -> caller's new frame
	eppap	sp|stack_frame.prev_sp,*	ap -> caller's old frame
	mlr	(pr),(pr)			copy the stack frame header
	desc9a	ap|0,stack_frame.min_length*4	
	desc9a	bp|0,stack_frame.min_length*4	

	eax1	bb|0			X1 contains offset of original end ptr
	sblx1	sp|stack_frame.prev_sp+1	compute length of caller's frame

	sprisp	ap|stack_frame.next_sp	set next sp in old frame
	sprisp	bp|stack_frame.prev_sp	set last sp in new frame
	eppap	bp|0,1			compute next sp for new frame
	spriap	bp|stack_frame.next_sp	and set it
	spriap	sb|stack_header.stack_end_ptr	save new stack end ptr

" Fill in wire_stack's frame with vital info.

	link	return_link,<*text>|[return]
	eppap	lp|return_link,*	ap -> return entry
	spriap	sp|stack_frame.return_ptr	set return control double info
	sprilp	sp|stack_frame.lp_ptr	save pointer so return op will work

" Switch to new frame and return to caller.

	eppsp	bp|0		sp -> new frame
	sprisp	sp|12		doctor the stored prs

.rt:
	eppap	sp|stack_frame.operator_ptr,*	restore pr to operators
	rtcd	sp|stack_frame.return_ptr	return to caller


" 

	entry	return

return:				"normal return from caller
	eppbp	sp|0		bp -> stack frame
	tsx7	undo		unwire and unmask

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	eppsp	sp|stack_frame.prev_sp,*	sp -> caller's old frame
	return			" return to caller's caller
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->


	entry	cleanup_handler

cleanup_handler:			"invoked by non-local goto
push:	push

	ldx0	ap|0		2 * number of args in X0
	eppbp	ap|2,0*		grab display pointer
	tsx7	undo		clean things up

	return			return to the unwinder


" Subroutine to perform unwiring and unmasking.

undo:
	eppap	bp|save_mask	ap -> save mask
	spriap	bp|arglist+2	..
	eppap	bp|ptp		ap -> page table pointer
	spriap	bp|arglist+4	..
	ldaq	=v18/4,18/4	set arglist header
	staq	bp|arglist	..

	call	unwire_unmask(bp|arglist) unwire and unmask

	tra	0,7		return to caller


" 

	even

null:
	its	-1,1		null pointer


	use	internal_static
	join	/link/internal_static

condition_name:
	aci	"cleanup"

condition_name_desc:
	vfd	o18/10121,18/7

label_desc:
	vfd	o18/172


	end
