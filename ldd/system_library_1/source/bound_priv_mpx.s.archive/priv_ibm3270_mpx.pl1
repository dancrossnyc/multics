/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* PRIV_IBM3270_MPX - Contains the portions of the ibm3270 multiplexer that need nt be wired */

/* Written May 1979 by Larry Johnson */
/* Modified June 1981 by Robert Coren to allocate and report meters */
/* Modified November 1984 by Robert Coren to use tty_area_manager to allocate and free meters */

/* format: style4,delnl,insnl,^ifthendo */
priv_ibm3270_mpx:
     proc;

/* Arguments */

dcl  arg_devx fixed bin;
dcl  arg_miip ptr;
dcl  arg_mdp ptr;
dcl  arg_infop ptr;
dcl  arg_order char (*);
dcl  arg_code fixed bin (35);

/* Automatic */

dcl  code fixed bin (35);
dcl  devx fixed bin;
dcl  (i, j) fixed bin;
dcl  name char (32) var;
dcl  sub_channel_flags (0:31) bit (1) unal;
dcl  infop ptr;
dcl  order char (32);

/* Internal static */

dcl  init_sw bit (1) int static init ("0"b);		/* Set on first ibm3270 load during multics bootload */

/* External */

dcl  tty_area_manager$allocate entry (fixed bin, ptr);
dcl  tty_area_manager$free entry (fixed bin, ptr);
dcl  ibm3270_mpx$crash entry (ptr);
dcl  ibm3270_mpx$dialup entry (ptr, fixed bin);
dcl  ibm3270_mpx$set_address_table entry (ptr);
dcl  ibm3270_mpx$start_general_poll entry (ptr);
dcl  ibm3270_mpx$init entry;

dcl  error_table_$bad_channel ext fixed bin (35);
dcl  error_table_$noalloc ext fixed bin (35);
dcl  error_table_$action_not_performed ext fixed bin (35);
dcl  error_table_$undefined_order_request ext fixed bin (35);
dcl  error_table_$bad_mpx_load_data ext fixed bin (35);
dcl  error_table_$unimplemented_version ext fixed bin (35);

dcl  pds$processid ext bit (36) aligned;
dcl  (area, cleanup) condition;

dcl  (addr, bin, index, length, low, null, reverse, rtrim, size, string, substr, unspec, verify) builtin;

/* Entry called at multiplexer creation time to build data bases */

init_multiplexer:
     entry (arg_devx, arg_miip, arg_mdp, arg_code);

	devx = arg_devx;
	miip = arg_miip;
	arg_mdp = null ();

	ttybp = addr (tty_buf$);
	lctp = tty_buf.lct_ptr;
	lcntp = lct.lcnt_ptr;

	md_nchan = mux_init_info.no_channels;
	string (sub_channel_flags) = "0"b;
	do i = 1 to md_nchan;
	     j = index (reverse (mux_init_info.name (i)), ".");
	     if j = 0
	     then go to bad_channel;
	     name = rtrim (substr (mux_init_info.name (i), length (mux_init_info.name (i)) - j + 2));
	     if length (name) ^= 3
	     then go to bad_channel;
	     if substr (name, 1, 1) ^= "p" & substr (name, 1, 1) ^= "d"
	     then go to bad_channel;
	     if verify (substr (name, 2, 2), "0123456789") ^= 0
	     then go to bad_channel;
	     j = bin (substr (name, 2, 2));
	     if j < 0 | j > 31
	     then go to bad_channel;
	     if sub_channel_flags (j)
	     then go to bad_channel;
	     sub_channel_flags (j) = "1"b;
	end;

	mdp = null ();
	on cleanup
	     begin;
		if mdp ^= null ()
		then call tty_space_man$free_space (size (md), mdp);
	     end;

	call tty_space_man$get_space (size (md), mdp);
	if mdp = null ()
	then do;
noalloc:
	     arg_code = error_table_$noalloc;
	     return;
	end;

	md.devx = devx;
	md.name = lcnt.names (devx);
	md.nchan = md_nchan;

	string (md.flags) = "0"b;
	md.error_stat = 0;
	md.chars = "";
	md.dialup_info = 0;
	md.address_tablep = null ();
	md.chan_map (*) = 0;
	md.last_select_address, md.last_poll_address = low (1);
	md.first_write_chan, md.last_write_chan = 0;
	md.first_poll_chan, md.last_poll_chan = 0;
	md.first_control_chan, md.last_control_chan = 0;
	md.cur_write_chan = 0;
	md.write_chain_ptr = null ();
	md.input_chain_ptr = null ();
	md.input_count = 0;

	on area
	     begin;
		call tty_space_man$free_space (size (md), mdp);
		go to noalloc;
	     end;

	call tty_area_manager$allocate (size (ibm3270_meters), md.saved_meters_ptr);
	revert area;

	do i = 1 to md.nchan;
	     mdep = addr (md.mde_entry (i));
	     mde.position = 0;
	     mde.line_size = 80;
	     mde.screen_size = 1920;
	     mde.next_write_chan = 0;
	     mde.next_poll_chan = 0;
	     mde.next_control_chan = 0;
	     mde.write_chain_ptr = null ();
	     string (mde.flags) = "0"b;
	     j = index (reverse (mux_init_info.name (i)), ".");
	     name = rtrim (substr (mux_init_info.name (i), length (mux_init_info.name (i)) - j + 2));
	     mdep = addr (md.mde_entry (i));
	     mde.devx = mux_init_info.devx (i);
	     mde.name = name;
	     j = bin (substr (name, 2, 2));
	     md.chan_map (j) = i;
	     mde.printer = (substr (name, 1, 1) = "p");
	     lctep = addr (lct.lcte_array (mde.devx));
	     lcte.subchannel = i;
	end;

	arg_mdp = mdp;
	if ^init_sw
	then do;					/* First caal of multics bootload */
	     call ibm3270_mpx$init;
	     init_sw = "1"b;
	end;

	arg_code = 0;

	return;

bad_channel:
	arg_code = error_table_$bad_channel;
	return;

/* Entry to free the multiplexer data base */

terminate_multiplexer:
     entry (arg_mdp, arg_code);

	mdp = arg_mdp;
	md_nchan = md.nchan;
	if md.write_chain_ptr ^= null
	then call tty_space_man$free_chain (md.devx, OUTPUT, (md.write_chain_ptr));
	md.write_chain_ptr = null ();
	if md.input_chain_ptr ^= null ()
	then call tty_space_man$free_chain (md.devx, INPUT, (md.input_chain_ptr));
	md.input_chain_ptr = null ();
	call tty_area_manager$free (size (ibm3270_meters), md.saved_meters_ptr);
	call tty_space_man$free_space (size (md), mdp);
	arg_mdp = null ();
	arg_code = 0;
	return;

/* Entry to allow dialups on the sub-channels */

start:
     entry (arg_mdp, arg_code);

	mdp = arg_mdp;
	if ^md.loaded
	then do;
	     arg_code = error_table_$action_not_performed;
	     return;
	end;

	md.started = "1"b;

	do i = 1 to md.nchan;			/* Look for hungup printers */
	     mdep = addr (md.mde_entry (i));
	     if mde.listen & ^mde.dialed & mde.printer
	     then call ibm3270_mpx$dialup (mdp, i);
	end;

	arg_code = 0;
	return;

/* Entry to dis-allow dialups on the sub-channels */

stop:
     entry (arg_mdp, arg_code);

	mdp = arg_mdp;
	if ^md.loaded
	then do;
	     arg_code = error_table_$action_not_performed;
	     return;
	end;

	md.started = "0"b;
	arg_code = 0;
	return;

/* Entry to do a forced shutdown (or crash) of the multiplexer */

shutdown:
     entry (arg_mdp, arg_code);

	mdp = arg_mdp;
	if md.loading | md.loaded
	then call channel_manager$control (md.devx, "hangup", null (), code);
	call ibm3270_mpx$crash (mdp);
	arg_code = 0;
	return;

/* Control orders */

priv_control:
     entry (arg_mdp, arg_order, arg_infop, arg_code);

	mdp = arg_mdp;
	order = arg_order;
	infop = arg_infop;

	if order = "copy_meters"
	then do;
	     md.saved_meters_ptr -> ibm3270_meters = md.error_stat;
	     call channel_manager$control (md.devx, order, infop, arg_code);
	end;

	else if order = "get_meters"
	then do;
	     if infop -> get_comm_meters_info.version ^= GET_COMM_METERS_INFO_VERSION_1
	     then arg_code = error_table_$unimplemented_version;
	     else do;
		meter_ptr = infop -> get_comm_meters_info.subchan_ptr;
		if meter_ptr ^= null ()
		then if meter_ptr -> ibm3270_meter_struc.version ^= IBM3270_METERS_VERSION_1
		     then arg_code = error_table_$unimplemented_version;
		     else do;
			meter_ptr -> ibm3270_meter_struc.current_meters = md.error_stat;
			meter_ptr -> ibm3270_meter_struc.saved_meters = md.saved_meters_ptr -> ibm3270_meters;
			call channel_manager$control (md.devx, order, infop, arg_code);
		     end;
	     end;
	end;

	else arg_code = error_table_$undefined_order_request;
	return;

hpriv_control:
     entry (arg_mdp, arg_order, arg_infop, arg_code);

	mdp = arg_mdp;
	order = arg_order;
	infop = arg_infop;

	if order = "load_mpx"
	then do;
	     load_infop = infop;
	     if md.loading | md.loaded
	     then code = error_table_$action_not_performed;
	     else do;
		call channel_manager$control (md.devx, "listen", null (), code);
		if code = 0
		then md.loading = "1"b;
		md.event_channel = load_info.event_channel;
		md.processid = pds$processid;
		md.ascii = load_info.ascii;
		md.debug = load_info.debug;
		md.allow_copy = load_info.allow_copy;
		md.allow_raw3270 = load_info.allow_raw3270;
		call ibm3270_mpx$set_address_table (mdp);
						/* Get right translation table */
		md.controller_address = load_info.controller_address;
						/* Default */
		md.controller_poll_address = address_table (md.controller_address);
		md.controller_select_address = address_table (md.controller_address + 32);
		md.general_poll_address = address_table (63);
		if md.nchan ^= load_info.nchan
		then do;				/* Something changed */
bad_load:
		     code = error_table_$bad_mpx_load_data;
		     go to control_return;
		end;
		do i = 1 to md.nchan;
		     mdep = addr (md.mde_entry (i));
		     chan_load_infop = addr (load_info.chan_info (i));
		     if mde.devx ^= chan_load_info.devx
		     then go to bad_load;
		     mde.screen_size = chan_load_info.screen_size;
		     mde.line_size = chan_load_info.line_size;
		     j = bin (substr (mde.name, 2, 2)); /* Poll address */
		     mde.device_address = address_table (j);
		end;
		if md.ascii
		then do;
		     unspec (md.nl) = "012"b3;
		     unspec (md.sba) = "021"b3;
		     unspec (md.stx) = "002"b3;
		     unspec (md.esc) = "033"b3;
		     unspec (md.write) = "061"b3;
		     unspec (md.erase_write) = "065"b3;
		     unspec (md.ic) = "023"b3;
		     unspec (md.etx) = "003"b3;
		     unspec (md.soh) = "001"b3;
		     unspec (md.eot) = "004"b3;
		     unspec (md.percent) = "045"b3;
		     unspec (md.slash) = "057"b3;
		     unspec (md.letter_R) = "122"b3;
		     unspec (md.etb) = "027"b3;
		     unspec (md.enter) = "047"b3;
		     unspec (md.clear) = "137"b3;
		     unspec (md.pa1) = "045"b3;
		     unspec (md.pa2) = "076"b3;
		     unspec (md.pa3) = "054"b3;
		     unspec (md.bs) = "010"b3;
		     unspec (md.cr) = "015"b3;
		     unspec (md.em) = "031"b3;
		     unspec (md.copy) = "067"b3;
		end;
		else do;
		     unspec (md.nl) = "025"b3;
		     unspec (md.sba) = "021"b3;
		     unspec (md.stx) = "002"b3;
		     unspec (md.esc) = "047"b3;
		     unspec (md.write) = "361"b3;
		     unspec (md.erase_write) = "365"b3;
		     unspec (md.ic) = "023"b3;
		     unspec (md.etx) = "003"b3;
		     unspec (md.soh) = "001"b3;
		     unspec (md.eot) = "067"b3;
		     unspec (md.percent) = "154"b3;
		     unspec (md.slash) = "141"b3;
		     unspec (md.letter_R) = "331"b3;
		     unspec (md.etb) = "046"b3;
		     unspec (md.enter) = "175"b3;
		     unspec (md.clear) = "155"b3;
		     unspec (md.pa1) = "154"b3;
		     unspec (md.pa2) = "156"b3;
		     unspec (md.pa3) = "054"b3;
		     unspec (md.bs) = "026"b3;
		     unspec (md.cr) = "015"b3;
		     unspec (md.em) = "031"b3;
		     unspec (md.copy) = "367"b3;
		end;
		if load_info.quit_key = PA1
		then md.quit_key = md.pa1;
		else if load_info.quit_key = PA2
		then md.quit_key = md.pa2;
		else if load_info.quit_key = PA3
		then md.quit_key = md.pa3;
		else md.quit_key = md.pa1;
		if load_info.formfeed_key = PA1
		then md.formfeed_key = md.pa1;
		else if load_info.formfeed_key = PA2
		then md.formfeed_key = md.pa2;
		else if load_info.formfeed_key = PA3
		then md.formfeed_key = md.pa3;
		else if load_info.formfeed_key = CLEAR
		then md.formfeed_key = md.clear;
		else md.formfeed_key = md.clear;
	     end;
	end;

	else if order = "start_mpx"
	then do;
	     if ^md.loaded
	     then do;
		code = error_table_$action_not_performed;
		go to control_return;
	     end;
	     line_ctl.val = 0;
	     call line_control (SET_3270_MODE);		/* Tell bisync I want the 3270 option */
	     line_ctl.val (1) = 3;
	     call line_control (SET_BID_LIMIT);
	     line_ctl.val (1) = 1;
	     call line_control (CONFIGURE);		/* Non-transparent ebcdic */
	     line_ctl.val (1) = 2;
	     line_ctl.val (2) = 2;
	     call line_control (SET_TTD_PARAMS);
	     i = 256;				/* input buffersize */
	     call channel_manager$control (md.devx, "set_input_message_size", addr (i), code);
	     if code ^= 0
	     then go to control_return;
	     call ibm3270_mpx$start_general_poll (mdp);
	end;

	else code = error_table_$undefined_order_request;

control_return:
	arg_code = code;
	return;

/* Internal procedure to perform a line control operation */

line_control:
     proc (op);

dcl  op fixed bin;

	line_ctl.op = op;
	call channel_manager$control (md.devx, "line_control", addr (line_ctl), code);
	if code ^= 0
	then go to control_return;
	return;

     end line_control;

%include tty_buf;
%include lct;
%include mux_init_info;
%include tty_space_man_dcls;
%include channel_manager_dcls;
%include bisync_line_data;
%include ibm3270_mpx_data;
%include ibm3270_mpx_load_data;
%include ibm3270_meters;
%include get_comm_meters_info;
     end priv_ibm3270_mpx;

