/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
boot_tape_io:
     procedure;

/* TAPE_IO - Magnetic Tape I/O Package for Multics Initialization
   9/9/68 - Noel I. Morris
   converted for IOM operation - 9/15/71 by N. I. Morris
   converted for MTS-500 operation - 8/27/73 by N. I. Morris
   converted to IOBM to avoid buffer split problem - 12/29/75 by B. Greenberg
   modified 1/25/76 by Noel I. Morris
   modified April 1981 by Chris Jones for io_manager conversion
   Modified March 1982 by C. Hornig for MR10 io_manager.
   Modified May   1982 by BIM for sys_boot_info as source of tape data.
   Modified April 1983 by K. Loepere for early entrypoint
   Modified October 1983 by Keith Loepere for loading mst in collection 1.
*/

dcl  chanid char (8) aligned;				/* name of tape channel */
dcl  rcode fixed bin (35);				/* error code */
dcl  op bit (6);					/* tape operation code */
dcl  buffabs1 fixed bin (26);				/* absolute address */
dcl  device_bits bit (6) aligned;			/* device number from PCW */
dcl  device fixed bin (6);

dcl  sys_boot_info$tape_device_number fixed bin (6) ext static;
dcl  sys_boot_info$tape_channel_number fixed bin (7) ext static;
dcl  sys_boot_info$tape_iom_number fixed bin (3) ext static;

dcl  TAPE_IO_EVENT fixed bin (35) static options (constant) init (15594741861);
						/* "tape" */

dcl  absadr entry (ptr, fixed bin (35)) returns (fixed bin (26));
dcl  pxss$addevent entry (fixed bin (35));
dcl  pxss$delevent entry (fixed bin (35));
dcl  pxss$notify entry (fixed bin (35));
dcl  pxss$wait entry;
dcl  syserr entry options (variable);

dcl  1 physical_record_buffer$ external,
       2 prb aligned,				/* give it an effective alias */
         3 bootload_loader_leftovers aligned,
	 4 buffer_index bit (18),			/* index to current buffer */
	 4 cur_buffer (1040) fixed bin,		/* record currently being processed */
         3 first_used_here aligned,
	 4 pad (33) fixed bin,
	 4 idcw like idcw,				/* IDCW for readingtape */
	 4 dcw1 like dcw,				/* IOTD DCW for tape read */
	 4 statp ptr,				/* pointer to status word */
	 4 ima like io_manager_arg,			/* args for connect */
	 4 flags,
	   5 reading_ahead bit (1) unaligned,		/* reading-ahead is in progress */
	   5 pad bit (35) unaligned,
	 4 ra_idcw like idcw,			/* IDCW for readingtape */
	 4 ra_dcw1 like dcw,			/* IOTD DCW for tape read */
	 4 ra_buffer (1040) fixed bin;		/* for read-ahead */

dcl  (addr, binary, bit, mod, null, rel, string, substr, unspec) builtin;
%page;
init_tape:
     entry;

/* INIT_TAPE/FINAL_TAPE - Initialize and Clean Up After Initialization Tape I/O. */

	unspec (prb.first_used_here) = ""b;		/* clear memory left from BOS */

	device = sys_boot_info$tape_device_number;
	device_bits = bit (device, 6);

	call io_chnl_util$iom_to_name (sys_boot_info$tape_iom_number, sys_boot_info$tape_channel_number, chanid, rcode);
	if rcode ^= 0 then call syserr (1, "boot_tape_io: code ^d from io_chnl_util$iom_to_name.", rcode);
	call io_manager$assign (prb.ima.chx, chanid, pxss$notify, TAPE_IO_EVENT, prb.statp, rcode);
	if rcode ^= 0				/* Tell the multiplexor we wish to use tape. */
	then call syserr (1, "boot_tape_io: Code ^d from io_manager$assign.", rcode);

	buffabs1 = absadr (addr (prb), rcode);
	if rcode ^= 0 then call syserr (1, "boot_tape_io: Code ^d from absadr.", rcode);

	prb.idcw.count = bit (binary (1, 6));		/* Set count field in IDCW. */
	prb.idcw.device = device_bits;		/* Copy the device code into instruction DCW. */
	prb.idcw.code = "111"b;			/* Make sure IDCW ID bits are on. */
	prb.idcw.ext = substr (bit (buffabs1), 3, 6);
	prb.idcw.ext_ctl = "1"b;
	string (prb.ra_idcw) = string (prb.idcw);
	prb.ra_idcw.command = "000101"b;		/* READ */

	prb.dcw1.address = bit (binary (mod (buffabs1 + binary (rel (addr (prb.cur_buffer)), 18), 1f18b), 18));
	prb.ra_dcw1.address = bit (binary (mod (buffabs1 + binary (rel (addr (prb.ra_buffer)), 18), 1f18b), 18));
						/* Set address in DCW's */
	prb.dcw1.tally, prb.ra_dcw1.tally = bit (binary (1040, 12));

	prb.ima.bound = 0;
	prb.ima.pcw = ""b;
	prb.ima.ptp = null ();			/* use absolute mode */
	return;

final_tape:
     entry;

	call io_manager$mask (prb.ima.chx);
	call io_manager$unassign (prb.ima.chx, (0));
	return;
%page;
/* GET_UNIT/SET_UNIT - Get Current Unit Number and Set New Unit Number. */

get_unit:
     entry (unit_no);

dcl  unit_no fixed bin (6);				/* tape unit device number */


	unit_no = binary (prb.idcw.device, 6);		/* Return the device code from IDCW. */

	return;

set_unit:
     entry (unit_no);


	prb.idcw.device = bit (unit_no);		/* Set the new tape unit number. */

	return;					/* All finished. Return to caller. */
%page;
/* Entries for Performing Tape I/O Operations. */

dcl  ret_status fixed bin (5);			/* major status from I/O operation */

read:
     entry (ret_status);

	op = "000101"b;
	go to connect;				/* Operation is Read Tape Binary. */

write:
     entry (ret_status);

	op = "001101"b;
	go to connect;				/* Operation is Write Tape Binary. */



backspace:
     entry (ret_status);

	op = "100110"b;
	go to connect;				/* Operation is Backspace Record. */



rewind:
     entry (ret_status);

	op = "111000"b;
	go to connect;				/* Operation is Rewind. */



unload:
     entry (ret_status);

	op = "111010"b;
	go to connect;				/* Operation is Rewind and Unload. */



skip_file:
     entry (ret_status);

	op = "100101"b;
	go to connect;				/* Operation is Forwardspace File. */



set_density_800:
     entry (ret_status);

	op = "110000"b;
	go to connect;				/* Operation is Set Density to 800. */



set_density_1600:
     entry (ret_status);

	op = "110101"b;
	go to connect;				/* Operation is Set Density to 1600. */
%page;
/* CONNECT - Issue Connect and Handle Status. */

connect:
	if prb.flags.reading_ahead then do;
	     call wait_for_status;
	     prb.flags.reading_ahead = "0"b;

	     if op = "000101"b then do;		/* did we guess right? */
		prb.cur_buffer = prb.ra_buffer;
		goto read_done;
		end;

/* We blew it. With luck it won't matter. */
	     end;

	prb.idcw.command = op;			/* Set tape operation in IDCW. */
	if (op = "000101"b) | (op = "001101"b)		/* If reading or writing tape ... */
	then prb.idcw.chan_cmd = "000000"b;		/* Set unit record transfer. */
	else prb.idcw.chan_cmd = "000010"b;		/* Set non-data transfer. */

	prb.ima.listp = addr (prb.idcw);
	call io_manager$connect_abs (prb.ima);		/* Fire up the device */
	call wait_for_status;
read_done:
	ret_status = binary (prb.statp -> io_status_word.power || prb.statp -> io_status_word.major, 5);
						/* Return the major status and the power bit. */

	if (op = "000101"b) & (ret_status = 0) then do;	/* if we just completed a read */
	     prb.ima.listp = addr (prb.ra_idcw);
	     call io_manager$connect_abs (prb.ima);	/* then lets keep going */
	     prb.flags.reading_ahead = "1"b;
	     end;

	return;


wait_for_status:
     procedure;

	call pxss$addevent (TAPE_IO_EVENT);
	do while (^prb.statp -> io_status_word.t);
	     call pxss$wait;
	     call pxss$addevent (TAPE_IO_EVENT);
	end;
	call pxss$delevent (TAPE_IO_EVENT);
	return;

     end wait_for_status;
%page;
%include iom_pcw;
%include iom_dcw;
%include io_status_word;
%include io_manager_dcls;
%include io_chnl_util_dcls;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   boot_tape_io: Code CODE from io_manager$assign

   S: $crash

   T: $init

   M: The bootload tape reading package could not assign the bootload
   tape drive to itself.
   $err

   A: $boot_tape

   Message:
   boot_tape_io: Unable to allocate buffer.

   S: $crash

   T: $init

   M: The bootload tape reading package could not allocate a wired-down buffer
   into which to read the bootload tape.
   $err

   A: $boot_tape

   Message:
   boot_tape_io: Code CODE from absadr.

   S: $crash

   T: $init

   M: boot_tape_io was unable to find the address of its buffer.
   $err

   A: $boot_tape

   END MESSAGE DOCUMENTATION */

     end boot_tape_io;
