/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,indattr,ifthen,declareind10,dclind10 */
get_io_segs:
     procedure;

/* GET_IO_SEGS - Compute Sizes for Wired I/O Databases.
   coded 1/25/77 by Noel I. Morris
   Modified by C. Hornig for paged IOM November 1980
   Modified by J. Bongiovanni for stock_seg, February 1982
   Modified March 1982 by C. Hornig for more paged IOM
   Modified BIM 10/82 (and CAH) -- use hbound instead of -1
   Modified 12/83 by Chris Jones to allow chnl cards for tapes as well as disks
   Modified BIM 83-12-15 for demise of FNP cards.
   Modified 1/84 by Chris Jones to add ites to ioi_data and to add
   io_config_data and allow it to run in user ring for debugging.
   Modified 3/84 by T. Oke for system wide free queue PARM DSKQ n.
   Added limit variables min_per_drive and max_per_drive (5 and 200).
   Added two warning messages.
   Modified 9/84 by Keith Loepere to choose good free_q_size for bce.
   Modified 9/84 by Chris Jones to set disk_channel_count correctly, and to correct documentation and messages.
   Modified 11/84 by Paul Farley to make room in ioi_data for MCAs.
   Modified 06/85 by Paul Farley to make room for FIPS controllers in io_config_data.
*/

/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(86-01-17,CLJones), install(86-03-21,MR12.0-1033):
     Add support for MCA
     and FIPS controllers.
  2) change(86-01-09,Fawcett), approve(86-04-11,MCR7383),
     audit(86-05-29,GDixon), install(86-07-17,MR12.0-1097):
     Add support for subvolumes that increase the size of pvt and stock_seg.
                                                   END HISTORY COMMENTS */

dcl	disk_subsystems	   fixed bin;		/* number of disk subsystems */
dcl	dev_idx		   fixed bin;
dcl	physical_volumes	   fixed bin;		/* number of storage system devices */
dcl	disk_channel_count	   fixed bin;		/* number of disk channels */
dcl	disk_drives	   fixed bin;		/* number of disk drives (including device 0) */
dcl	fptr		   ptr;			/* pointer to free_q parm */
dcl	1 dskq_parm	   aligned based (fptr),
	  2 name		   char (4),
	  2 size		   fixed bin;
dcl	free_q_size	   fixed bin;		/* number of free queue entries */
dcl	imus		   fixed bin;		/* number of IMU's */
dcl	controllers	   fixed bin;		/* number of MPCs and IPCs */
dcl	seg_size		   fixed bin (19);		/* size of segment */
dcl	subsystem_type	   char (4) aligned;
dcl	tsdw		   fixed bin (71);		/* temporary SDW */
dcl	i		   fixed bin;

dcl	config_$find	   entry (char (4) aligned, ptr);
dcl	config_$find_2	   entry (char (4) aligned, char (4) aligned, ptr);
dcl	config_$find_parm	   entry (char (*), ptr);

dcl	get_ring_		   entry () returns (fixed bin (3));
dcl	get_main		   entry (ptr, fixed bin (19), fixed bin (71));
dcl	ioa_		   entry () options (variable);
dcl	syserr		   entry options (variable);

dcl	min_per_drive	   fixed bin init (5) int static options (constant);
dcl	max_per_drive	   fixed bin init (200) int static options (constant);
dcl	ME		   char (32) init ("get_io_segs:") int static options (constant);
dcl	SYSERR_CONTROL_STRING  char (64) int static options (constant)
			   init ("^a Missing ndrives field on config card prph ^a.");
dcl	SYSERR_QUEUE_STRING_1  char (50) int static options (constant)
			   init ("^a DSKQ ^i. < ^i. per drive, forcing DSKQ ^i.");
dcl	SYSERR_QUEUE_STRING_2  char (50) int static options (constant)
			   init ("^a DSKQ ^i. > ^i. per drive, forcing DSKQ ^i.");

dcl	(addr, bin, hbound, lbound, max, min, null, ptr, rel, size, substr, wordno)
			   builtin;

/* Count how many of everything there are */

	ioi_subsystems, disk_subsystems, ioi_channels, ioi_devices, physical_volumes, disk_drives, ioi_multiplexers,
	     imus, controllers, disk_channel_count = 0;

/* * * * * * * * * PRPH cards * * * * * * * * * */

	prph_cardp = null ();
	call config_$find (PRPH_CARD_WORD, prph_cardp);	/* Search for PRPH cards. */
	do while (prph_cardp ^= null ());
	     ioi_subsystems = ioi_subsystems + 1;	/* Count an I/O subsystem. */

	     subsystem_type = substr (prph_card.name, 1, 3);
	     if /* case */ (subsystem_type = "tap") | (subsystem_type = "dsk") then do;
/**** NOTE THE ASSUMPTION THAT prph dsk AND prph tap CARDS ARE "like" ONE ANOTHER ****/
		prph_dsk_cardp = prph_cardp;
		prph_tap_cardp = prph_cardp;		/* do both for crossref purposes */
		if subsystem_type = "dsk" then do;
		     disk_subsystems = disk_subsystems + 1;
		     disk_channel_count = disk_channel_count + prph_dsk_card.nchan;
		end;
		ioi_channels = ioi_channels + prph_tap_card.nchan;
						/* count number of channels. */
		chnl_cardp = null ();
		call config_$find_2 (CHNL_CARD_WORD, prph_card.name, chnl_cardp);
		if chnl_cardp ^= null () then
		     do i = 1 to 3;			/* Count additional channels. */
		     if chnl_card.nchan (i) > 0 then do;
			ioi_channels = ioi_channels + chnl_card.nchan (i);
			if subsystem_type = "dsk" then
			     disk_channel_count = disk_channel_count + chnl_card.nchan (i);
		     end;
		end;
		ioi_devices = ioi_devices + 1;	/* Count drives plus controller. */
		do i = lbound (prph_tap_card.group, 1) to hbound (prph_tap_card.group, 1)
		     while (prph_tap_card.group (i).model ^= -1);
						/* count drives. */
		     if prph_tap_card.group (i).ndrives = -1 then
			if get_ring_ () = 0 then
			     call syserr (CRASH, SYSERR_CONTROL_STRING, ME, prph_card.name);
			else do;
			     call ioa_ (SYSERR_CONTROL_STRING, ME, prph_card.name);
			     return;
			end;

		     if subsystem_type = "dsk" then
			disk_drives = disk_drives + prph_dsk_card.group (i).ndrives;
		     if prph_tap_card.group (i).model ^= 0 then do;
			ioi_devices = ioi_devices + prph_tap_card.group (i).ndrives;
			if subsystem_type = "dsk" then do;
			     do dev_idx = 1 to hbound (MODEL, 1)
				while (prph_tap_card.group (i).model ^= MODEL (dev_idx));
			     end;
			     dev_idx = MODELX (dev_idx);
			     if number_of_sv (dev_idx) = 0 then
				physical_volumes = physical_volumes + prph_dsk_card.group (i).ndrives;
			     else physical_volumes =
				     physical_volumes
				     + (prph_dsk_card.group (i).ndrives * number_of_sv (dev_idx));
			end;
		     end;
		end;
	     end;

	     else do;				/* Other peripherals. */
		ioi_channels = ioi_channels + 1;
		ioi_devices = ioi_devices + 1;
	     end;
	     call config_$find (PRPH_CARD_WORD, prph_cardp);
						/* Search for PRPH cards. */
	end;

/* * * * * * * * * * MPC cards * * * * * * * * * */

	mpc_cardp = null ();
	call config_$find (MPC_CARD_WORD, mpc_cardp);

	do while (mpc_cardp ^= null ());
	     controllers = controllers + 1;

	     call config_$find (MPC_CARD_WORD, mpc_cardp);
	end;

/* * * * * * * * * * IPC FIPS cards * * * * * * * * * */

	ipc_cardp = null ();
	call config_$find (IPC_CARD_WORD, ipc_cardp);

	do while (ipc_cardp ^= null ());
	     if ipc_card.type = IPC_FIPS then
		controllers = controllers + 1;

	     call config_$find (IPC_CARD_WORD, ipc_cardp);
	end;

/* * * * * * * * * * IOM cards * * * * * * * * * */

	iom_cardp = null ();
	call config_$find (IOM_CARD_WORD, iom_cardp);

	do while (iom_cardp ^= null ());
	     ioi_multiplexers = ioi_multiplexers + 1;
	     if (iom_card.model = "iioc") | (iom_card.model = "imu") then
		imus = imus + 1;

	     call config_$find (IOM_CARD_WORD, iom_cardp);
	end;

/* * * * * * * * * * Allow for MCA in the IMUs * * * * * * * * * */

	ioi_subsystems = ioi_subsystems + imus;
	ioi_channels = ioi_channels + imus;
	ioi_devices = ioi_devices + imus;

/* * * * * * * * * * STOK card * * * * * * * * * */

	stok_cardp = null ();
	call config_$find (STOK_CARD_WORD, stok_cardp);
	if stok_cardp = null () then
	     n_in_record_stock = DEFAULT_N_IN_RECORD_STOCK;
	else if stok_card.type_word.n_fields < 1 then
	     n_in_record_stock = DEFAULT_N_IN_RECORD_STOCK;
	else if stok_card.n_record_stock_entries <= 0 then
	     n_in_record_stock = DEFAULT_N_IN_RECORD_STOCK;
	else n_in_record_stock = stok_card.n_record_stock_entries;
	if stok_cardp = null () then
	     n_in_vtoce_stock = DEFAULT_N_IN_VTOCE_STOCK;
	else if stok_card.type_word.n_fields < 2 then
	     n_in_vtoce_stock = DEFAULT_N_IN_VTOCE_STOCK;
	else if stok_card.n_vtoce_stock_entries <= 0 then
	     n_in_vtoce_stock = DEFAULT_N_IN_VTOCE_STOCK;
	else n_in_vtoce_stock = stok_card.n_vtoce_stock_entries;
	n_volmap_pages = 3;

/* * * * * * * * * * PARM DSKQ card * * * * * * * * * */

	if sys_info$collection_1_phase = SERVICE_INITIALIZATION then do;
	     free_q_size = 20 * physical_volumes;	/* set default */

	     call config_$find_parm ("dskq", fptr);	/* get ptr to dskq parameter */
	     if fptr ^= null () then do;
		free_q_size =
		     min (max (dskq_parm.size, min_per_drive * physical_volumes), max_per_drive * physical_volumes);
		if dskq_parm.size < (min_per_drive * physical_volumes) then
		     call syserr (ANNOUNCE, SYSERR_QUEUE_STRING_1, ME, dskq_parm.size, min_per_drive, free_q_size);
		else if dskq_parm.size > max_per_drive * physical_volumes then
		     call syserr (ANNOUNCE, SYSERR_QUEUE_STRING_2, ME, dskq_parm.size, max_per_drive, free_q_size);
	     end;
	end;
	else free_q_size = 64;			/* Don't let queue be large enough to grab all of bce's memory. */
%page;
/* Now allocate the databases */

/* * * * * * * * * * PVT * * * * * * * * * */

	pvtp = addr (pvt$);				/* Get pointer to PVT. */
	seg_size = bin (rel (addr (pvt.array))) + physical_volumes * size (pvte);
						/* Compute required size of PVT. */
	call install_segment (pvtp, seg_size, tsdw);
	pvt.max_n_entries = physical_volumes;		/* for init_pvt */


/* * * * * * * * * * STOCK_SEG * * * * * * * * * */

	stock_segp = addr (stock_seg$);
	seg_size = size (stock_seg) + physical_volumes * (size (record_stock) + size (vtoce_stock));
	call install_segment (stock_segp, seg_size, tsdw);
	stock_seg.record_stock_entries = n_in_record_stock;
	stock_seg.vtoce_stock_entries = n_in_vtoce_stock;
	stock_seg.record_stock_size = size (record_stock);
	stock_seg.vtoce_stock_size = size (vtoce_stock);
	stock_seg.n_stock_entries = physical_volumes;

/* * * * * * * * * * DISK_SEG * * * * * * * * * */

	disksp = addr (disk_seg$);			/* Get pointer to disk database segment. */
	seg_size =
	     size (disk_data) + free_q_size * size (quentry) + disk_subsystems * size (disktab)
	     + disk_drives * size (devtab) + disk_channel_count * size (chantab);
						/* Compute required size of disk_seg. */

	call install_segment (disksp, seg_size, tsdw);
	disk_data.free_q_size = free_q_size;

/* * * * * * * * * * IO_CONFIG_DATA * * * * * * * * * */

	io_config_data_ptr = addr (io_config_data$);
	io_config_device_table_ptr, io_config_channel_table_ptr, io_config_controller_table_ptr,
	     io_config_iom_table_ptr = io_config_data_ptr;/* base all of these so wordno gives the right answer */

	begin;

dcl	(device_table_length, channel_table_length, controller_table_length, iom_table_length, io_config_tables_length)
			   fixed bin (19);

	     device_table_length =
		wordno (addr (device_table.device_entry)) + size (device_entry_template) * ioi_devices;
	     channel_table_length =
		wordno (addr (channel_table.channel_entry)) + size (channel_entry_template) * ioi_channels;
	     controller_table_length =
		wordno (addr (controller_table.controller_entry)) + size (controller_entry_template) * controllers;
	     iom_table_length = wordno (addr (iom_table.iom_entry)) + size (iom_entry_template) * ioi_multiplexers;
	     io_config_tables_length =
		device_table_length + channel_table_length + controller_table_length + iom_table_length;
	     seg_size = wordno (addr (io_config_data.tables)) + io_config_tables_length;
	     call install_segment (io_config_data_ptr, seg_size, tsdw);

	     io_config_data.tables_length = io_config_tables_length;
	     io_config_data.device_table_offset = wordno (addr (io_config_data.tables));
	     io_config_data.channel_table_offset = io_config_data.device_table_offset + device_table_length;
	     io_config_data.controller_table_offset = io_config_data.channel_table_offset + channel_table_length;
	     io_config_data.iom_table_offset = io_config_data.controller_table_offset + controller_table_length;

	     io_config_device_table_ptr = ptr (io_config_data_ptr, io_config_data.device_table_offset);
	     io_config_channel_table_ptr = ptr (io_config_data_ptr, io_config_data.channel_table_offset);
	     io_config_controller_table_ptr = ptr (io_config_data_ptr, io_config_data.controller_table_offset);
	     io_config_iom_table_ptr = ptr (io_config_data_ptr, io_config_data.iom_table_offset);

	     device_table.n_devices = ioi_devices;
	     channel_table.n_channels = ioi_channels;
	     controller_table.n_controllers = controllers;
	     iom_table.n_ioms = ioi_multiplexers;
	end;

/* * * * * * * * * * IOI_DATA * * * * * * * * * */

	idp = addr (ioi_data$);			/* Get pointer to IOI data. */
	call install_segment (idp, size (ioi_data), tsdw);/* Make a wired segment. */

	ioi_data.ngt = ioi_subsystems;		/* Fill in real database. */
	ioi_data.nct = ioi_channels;
	ioi_data.ndt = ioi_devices;
	ioi_data.nit = ioi_multiplexers;

/* * * * * * * * * * IOM_DATA * * * * * * * * * */

	iom_data_ptr = addr (iom_data$);		/* Get pointer to IOM data. */
	n_devices = ioi_channels + ioi_multiplexers * 2 + imus;
						/* Compute number of channels needed */
	seg_size = size (iom_data);			/* Compute required length of iom_data. */

	call install_segment (iom_data_ptr, seg_size, tsdw);

	iom_data.n_devices = n_devices;		/* Remember this value. */

	return;

install_segment:
     proc (segptr, seglen, sdw);

dcl	segptr		   ptr;
dcl	seglen		   fixed bin (19);
dcl	sdw		   fixed bin (71);


dcl	pmut$swap_sdw	   entry (ptr, ptr);

	if get_ring_ () ^= 0 then
	     return;				/* already available */

	call get_main (segptr, seglen, sdw);
	call pmut$swap_sdw (segptr, addr (sdw));

     end install_segment;

/* format: off */
%include syserr_constants; %page;
%include config_chnl_card; %page;
%include config_deck; %page;
%include config_iom_card; %page;
%include config_ipc_card; %page;
%include config_mpc_card; %page;
%include config_prph_card; %page;
%include config_prph_dsk_card; %page;
%include config_prph_tap_card; %page;
%include config_stok_card; %page;
%include dskdcl; %page;
%include io_config_data; %page;
%include ioi_data; %page;
%include iom_data; %page;
%include pvt; %page;
%include pvte; %page;
%include stock_seg; %page;
%include access_mode_values;
%include collection_1_phases;
%include fs_dev_types;
/* format: on */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   get_io_segs: Missing ndrives field on config card prph NAME.

   S:	$crash

   T:	$init

   M:	The prph card for the NAME subsystem is missing an ndrives field.

   A:	$config


   Message:
   get_io_segs: DSKQ mmm. < xxx. per drive, forcing DSKQ nnn.

   S:	$beep

   T:	$init

   M:	The dskq card specifies less than 5 queue entries per configured
   drive.  This is considered too few for efficient operation and is
   forced to 5 entries per drive.

   A:	$config


   Message:
   get_io_segs: DSKQ mmm. > xxx. per drive, forcing DSKQ nnn.
   S:	$beep

   T:	$init

   M:	The dskq card specifies an excess of queue entries beyond that
   reasonably required for efficient operation.  The free queue will be
   limited to 100 entries per drive.

   A:	$config


   END MESSAGE DOCUMENTATION */

     end get_io_segs;
