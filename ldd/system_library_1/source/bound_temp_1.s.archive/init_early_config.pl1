/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* format: style2 */

init_early_config:
     procedure;

/* *	This procedure is called very early in initialization to construct a
   *	"template" config deck which can then be used to construct a version
   *	of the Multics environment with which the real config deck can readily
   *	be found. This config deck includes the following cards, which are
   *	constructed from information acquired from the bootload dialogue or
   *	from a survey of equipment.
   *
   *	A typical initial config deck might look like this:
   *
   *	  (c)   cpu   a  7	on  l68.  80.
   *	  (c)   mem   a  512.  on
   *	  (a)   iom   a  0  iom  on
   *	  (a)   prph  opca  a  20  6601.  80.  on
   *	  (b)   prph  dska	24.  1.  0.  6  451.  7
   *	  (b)   root  dska	7.
   *	  (d)   clok  0. gmt  0.
   *	  (d)   sst   50.  25.  10.  4.
   *	  (d)   tcd   4.  20.  20.
   *	  (d)   intk  warm	0  boot
   *        (b)   prph  tapa  a  20.  1.  0.  3.  610.  1.
   *
   *	Those cards marked (a) are generated from a "hardware survey"; that is, from
   *	information which is read from hardware registers or the IOM bootload program
   *	during the bootload process. Those cards marked (b) are constructed from
   *	information gathered during the bootload dialogue, or compiled into bootload_info.
   *	The cards marked (c) are modified after this program runs.
   *
   *	11/15/80, W. Olin Sibert
   *	Modified 01/07/81, WOS, to move some stuff to scs_and_clock_init.
   *      Updated BIM 9/82
   *	Modified 1/11/84, Keith Loepere, for new format opc prph card.
   *	Modified 7/30/84, Paul Farley, for FIPS support.
   *	Modified 8/84, Chris Jones, for new disk dim.
   *	Modified 9/84, Keith Loepere, to build prph dsk card correct for
   *		shared spindle devices.
   *	Modified 2/25/85, Paul Farley, to add "fips" card when needed.
   */

/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(86-01-17,CLJones), install(86-03-21,MR12.0-1033):
     FIPS support.
  2) change(86-01-09,Fawcett), approve(86-04-11,MCR7383),
     audit(86-07-07,GDixon), install(86-07-17,MR12.0-1097):
     Add subvolume support for MSU3380 and MSU3390.
  3) change(86-01-09,Fawcett), approve(86-04-11,MCR7351),
     audit(86-07-07,GDixon), install(86-07-17,MR12.0-1097):
     Change for iom_card model field from nsa to iom.
  4) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-12,Martinson), install(86-07-17,MR12.0-1091):
     Correct error message documentation.
  5) change(87-04-09,Farley), approve(87-07-06,MCR7717),
     audit(87-07-13,Lippard), install(87-07-17,MR12.1-1043):
     Changed default prph dska card to be "0. 62. 501. 2." instead of "0. 63.
     451. 1." to allow handling of the extra device for 500/501s.
  6) change(87-10-02,Farley), approve(88-02-26,MCR7794),
     audit(88-03-04,Fawcett), install(88-03-15,MR12.2-1035):
     Added code for the proper setting of the IOM model field on the IOM config
     card, based on the setting of the flag sys_boot_info$imu_style_iom.
  7) change(87-10-20,Farley), approve(88-02-26,MCR7795),
     audit(88-03-04,Fawcett), install(88-03-15,MR12.2-1035):
     Added code to set the clok card zone field to the value contained in
     sys_boot_info$default_time_zone.
  8) change(89-08-14,Farley), approve(89-09-18,MCR8133),
     audit(89-09-20,WAAnderson), install(89-10-03,MR12.3-1081):
     Added check for device zero when checking for FIPS tape devices. Looking
     for a "tape_mpc_fw_name" of "ipc" is not adequate, given that a change was
     made to skip the "Enter boot tape MPC model" question if the controller
     was found to be in an intelligent state.
                                                   END HISTORY COMMENTS */


	declare idx		 fixed bin;
	declare 1 card_image	 aligned like config_card;
	declare disk_iom		 fixed bin (3);
	declare disk_channel	 fixed bin (7);
	declare disk_num		 fixed bin;
	declare sub_num		 fixed bin;
	declare p99		 pic "99";
	declare part		 char (4) aligned;
	declare lowest_dev_number	 fixed bin (17);

	declare sys_boot_info$bootload_mem_size
				 fixed bin (35) ext;

	declare sys_boot_info$console_iom_number
				 fixed bin (3) ext;
	declare sys_boot_info$console_channel_number
				 fixed bin (6) ext;
	declare sys_boot_info$console_model
				 fixed bin (35) ext;
	declare sys_boot_info$default_time_zone
				 char (4) unaligned ext;
	declare sys_boot_info$tape_iom_number
				 fixed bin (3) ext;
	declare sys_boot_info$tape_channel_number
				 fixed bin (6) ext;
	declare sys_boot_info$tape_device_number
				 fixed bin (6) ext;
	declare sys_boot_info$tape_mpc_fw_name
				 char (32) ext;

	declare sys_boot_info$iom_port_table
				 (4) fixed bin (35) ext;
	declare sys_boot_info$imu_style_iom
				 bit (1) aligned external static;
	declare sys_boot_info$disk_mpc_chanid
				 character (8) aligned external static;
	declare sys_boot_info$disk_device_has_sv
				 bit (1) aligned external static;
	declare sys_boot_info$disk_device_sv
				 fixed bin (17) external static;
	declare sys_boot_info$disk_device_number
				 fixed bin (6) ext;
	declare sys_boot_info$disk_model_number
				 fixed bin (35) ext;



	declare config_$clear	 entry ();
	declare config_$add		 entry (pointer, pointer);
	declare config_$find_2	 entry (char (4) aligned, char (4) aligned, ptr);
	declare config_$find	 entry (char (4) aligned, ptr);
	declare config_$delete	 entry (ptr);
	declare cv_config_card_	 entry (char (*), pointer, fixed bin (35));
	declare syserr		 entry options (variable);

	declare (addr, convert, dimension, divide, null, round, substr)
				 builtin;

/* */

	call config_$clear ();			/* Clear out anything that's "there" now. */

	call make_card ("cpu a 0 on l68 80.", cpu_cardp); /* CPU card. Always CPU A. */
	call config_$add (cpu_cardp, null ());

	do idx = 1 to 4;
	     if sys_boot_info$iom_port_table (idx) >= 0
	     then do;
		     call make_card ("iom a 0 iom on", iom_cardp);
		     iom_card.tag = idx;
		     iom_card.port = sys_boot_info$iom_port_table (idx);
		     if sys_boot_info$imu_style_iom
		     then iom_card.model = "imu";
		     call config_$add (iom_cardp, null ());
		end;
	end;

	call make_card ("mem a 256. on", mem_cardp);	/* Bootload memory is always 256K first time through */
	mem_card.size = divide (sys_boot_info$bootload_mem_size, 1024, 26, 0);
	call config_$add (mem_cardp, null ());

	call make_card ("prph opca a 13. 6001. 80. on", prph_opc_cardp);
						/* OPC card for BOS console */
	prph_opc_card.chan = sys_boot_info$console_channel_number;
	prph_opc_card.iom = sys_boot_info$console_iom_number;
	prph_opc_card.model = sys_boot_info$console_model;

	call config_$add (prph_opc_cardp, null ());

	if substr (sys_boot_info$tape_mpc_fw_name, 1, 3) = "ipc" | sys_boot_info$tape_device_number = 0
	then do;					/* FIPS device */
		if sys_boot_info$tape_device_number = 0
		then call make_card ("prph tapa a 13. 1. 610. 1.", prph_tap_cardp);
		else do;
			call make_card ("prph tapa a 13. 1. 0. 0. 610. 1.", prph_tap_cardp);
			prph_tap_card.group (1).ndrives = sys_boot_info$tape_device_number;
		     end;
	     end;
	else do;					/* else devices start at 1. */
		if sys_boot_info$tape_device_number = 1
		then call make_card ("prph tapa a 13. 1. 610. 1.", prph_tap_cardp);
		else do;
			call make_card ("prph tapa a 13. 1. 0. 0. 610. 1.", prph_tap_cardp);
			prph_tap_card.group (1).ndrives = sys_boot_info$tape_device_number - 1;
		     end;
	     end;
	prph_tap_card.iom = sys_boot_info$tape_iom_number;
	prph_tap_card.chan = sys_boot_info$tape_channel_number;
	call config_$add (prph_tap_cardp, null ());

	call add_card ("prph dska a 13. 1. 0. 62. 501. 2.");
						/* make chantab slot and disk_seg devtab slots */

	call make_card ("clok 0. gmt 0.", clok_cardp);
	clok_card.zone = sys_boot_info$default_time_zone;
	call config_$add (clok_cardp, null ());


	call add_card ("sst 50. 25. 10. 4.");		/* Add the "constant" cards */
	call add_card ("tcd 4. 20. 20.");
	call add_card ("intk warm 0 boot");
	call add_card ("parm chwm hcpt");
	call add_card ("root dska 13");
	call make_card ("part dump dska 13", part_cardp);
	call config_$add (part_cardp, null ());
	do part = "bos", "conf", "log";
	     part_card.name = part;
	     call config_$add (part_cardp, null ());
	end;
	return;					/* All done */

/* Enter here after sys_boot_info is known to contain the good data */
/* on the RPV subsystem. */

disk:
     entry;

	root_cardp = null ();
	call config_$find (ROOT_CARD_WORD, root_cardp);
	disk_num = sys_boot_info$disk_device_number;
	sub_num = sys_boot_info$disk_device_sv;
	if sys_boot_info$disk_device_has_sv
	then root_card.volume (1).drive = convert (p99, disk_num) || valid_sv_array (sub_num);
	else root_card.volume (1).drive = convert (p99, disk_num);

	do part = "bos", "conf", "log", "dump";
	     part_cardp = null ();
	     call config_$find_2 (PART_CARD_WORD, part, part_cardp);
	     if sys_boot_info$disk_device_has_sv
	     then part_card.drive = convert (p99, disk_num) || valid_sv_array (sub_num);
	     else part_card.drive = convert (p99, disk_num);
	end;

	prph_dsk_cardp = null ();
	call config_$find_2 ("prph", "dska", prph_dsk_cardp);
						/* remove the dummy card put in to get channel slots */
	call config_$delete (prph_dsk_cardp);

	call io_chnl_util$name_to_iom (sys_boot_info$disk_mpc_chanid, disk_iom, disk_channel, (0));
						/* guaranteed ok */

/* Find RPV device type so we can see if the rpv is a shared spindle device
(requires defining both halves) */

	do idx = 1 to dimension (MODEL, 1) while (MODEL (idx) ^= sys_boot_info$disk_model_number);
	end;
	idx = MODELX (idx);				/* device type */
	if IS_FIPS_DEVICE ()
	then lowest_dev_number = 0;
	else lowest_dev_number = 1;

/* Of devices that are supported by Multics none are both fips and shared_spindle */

	if shared_spindle (idx)
	then do;
		if sys_boot_info$disk_device_number <= (lowest_dev_number + 1)
		then do;
			call make_card ("prph dska a 13. 1. 1. 2.", prph_dsk_cardp);
			prph_dsk_card.group (1).model = sys_boot_info$disk_model_number;
		     end;
		else do;
			call make_card ("prph dska a 13. 1. 0. 1. 1. 2.", prph_dsk_cardp);
			prph_dsk_card.group (1).ndrives =
			     round (sys_boot_info$disk_device_number, -1) - (lowest_dev_number + 1);
			prph_dsk_card.group (2).model = sys_boot_info$disk_model_number;
		     end;
	     end;
	else do;
		if sys_boot_info$disk_device_number = lowest_dev_number
		then do;
			call make_card ("prph dska a 13. 1. 1. 1.", prph_dsk_cardp);
			prph_dsk_card.group (1).model = sys_boot_info$disk_model_number;
		     end;
		else do;
			call make_card ("prph dska a 13. 1. 0. 1. 1. 1.", prph_dsk_cardp);
			prph_dsk_card.group (1).ndrives = sys_boot_info$disk_device_number - lowest_dev_number;
			prph_dsk_card.group (2).model = sys_boot_info$disk_model_number;
		     end;
	     end;
	prph_dsk_card.iom = disk_iom;
	prph_dsk_card.chan = disk_channel;
	call config_$add (prph_dsk_cardp, null ());

	return;


add_card:
     proc (P_card);

/* This procedure adds a single card to the config deck, by converting it and calling config_$add */

	declare (
	        P_card		 char (*) varying,
	        P_cardp		 pointer
	        )			 parameter;

	declare code		 fixed bin (35);


	call cv_config_card_ ((P_card), addr (card_image), code);
	if code ^= 0
	then call syserr (CRASH, "init_early_config: Cannot add card to config deck: ^a", P_card);

	call config_$add (addr (card_image), null ());

	return;					/* End of add_card */


make_card:
     entry (P_card, P_cardp);

/* This entry converts a string to a config card image, and sets P_cardp to point to it. */

	call cv_config_card_ ((P_card), addr (card_image), code);
	if code ^= 0
	then call syserr (CRASH, "init_early_config: Cannot add card to config deck: ^a", P_card);

	P_cardp = addr (card_image);
	return;					/* End of add_card */

     end add_card;


IS_FIPS_DEVICE:
     proc () returns (bit (1));

/*     The theory here is all drives on a channel must be either fips or non
       fips, but not mixed. Therefore look at sys_boot_info$disk_model_number
       and check config_data_ for device_0_valid  */

	dcl     i			 fixed bin;

	do i = 1 to config_data_$disk_drive_model_names.count;
	     if config_data_$disk_drive_model_names.names (i).model = sys_boot_info$disk_model_number
	     then return (config_data_$disk_drive_model_names.names (i).device_0_valid);
	end;
	return ("0"b);
     end IS_FIPS_DEVICE;				/* format: off */
%page; %include config_data_dcls;
%page; %include config_deck;
%page; %include config_clok_card;
%page; %include config_iom_card;
%page; %include config_intk_card;
%page; %include config_cpu_card;
%page; %include config_mem_card;
%page; %include config_part_card;
%page; %include config_prph_opc_card;
%page; %include config_prph_tap_card;
%page; %include config_prph_dsk_card;
%page; %include config_mpc_card;
%page; %include config_root_card;
%page; %include fs_dev_types;
%page; %include io_chnl_util_dcls;
%page; %include syserr_constants;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   init_early_config: Cannot add card to config deck: CARD.

   S: $crash

   T: $init

   M: The config_deck being generated during the early (hardware inspection)
   pass of bce is damaged.  This can be either a hardware or software
   problem.

   A: $reboot

   END MESSAGE DOCUMENTATION */

	end init_early_config;
