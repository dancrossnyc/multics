/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(86-01-16,CLJones), install(86-03-21,MR12.0-1033):
     Support FIPS and IMU.
                                                   END HISTORY COMMENTS */

/* IOI_INIT - Initialization for the I/O Interfacer. */
/* Rewritten March 1983 by Chris Jones. */
/* Modified January 1984 by Chris Jones for io reconfiguration. */
/* Modified May 1984 by Paul Farley for IPC cards (e.g. FIPS) */
/* Modified April 1984 by Tom Oke for dynamic channel table. */
/* Modified September 1984 by Chris Jones to init device_type for chnl cards */
/* Modified 1984-08-10 BIM for direct channels (sort of) */
/* Modified Nov 1984 by Paul Farley to be able to set the
   gte.detailed_status_cmd to "00"b3 when the IOM is a "imu" or "iioc".. */
/* Modified Jan 1985 by Paul Farley to add MCA (found in IMUs) entries. */
/* Modified Jan 1985 by Paul Farley to change IPC cards to FIPS cards. */
/* Modified June 1985 by Paul Farley to make sure a dte is created for device
   "00" of a FIPS string, when no device "00" is configured. */
/* Modified Sept 1985 by Paul Farley to add setting of a new dte.controller flag. */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
ioi_init:
     procedure;

dcl	adding_controller_dte  bit (1);
dcl	chanid		   char (8) aligned;	/* the converted name of a channel */
dcl	code		   fixed bin (35);		/* error code */
dcl	ctx		   fixed bin;		/* used to index thru ctes */
dcl	device_number	   fixed bin;
dcl	device_type	   char (4);		/* e.g. "dsk", "tap", or "rdr" */
dcl	gtx		   fixed bin;		/* used to index thru gtes */
dcl	itx		   fixed bin;		/* used to index thru ites */
dcl	high_ctx		   fixed bin;		/* index of the highest cte in use */
dcl	high_dtx		   fixed bin;		/* index of the highest dte in use */
dcl	high_gtx		   fixed bin;		/* index of the highest gte in use */
dcl	high_itx		   fixed bin;		/* index of the highest ite in use */
dcl	statusp		   ptr;			/* pointer to where io_manager stores status */
dcl	iom_model_array	   (8) char (4) aligned;	/* array of model numbers by TAG. */


dcl	config_$find	   entry (char (4) aligned, ptr);
dcl	ioi_config$find_base_channel
			   entry (char (8) aligned) returns (char (8) aligned);
dcl	ioi_config$find_controller_card
			   entry (char (8) aligned) returns (ptr);
dcl	ioi_masked$interrupt   entry (fixed bin (35), fixed bin (3), bit (36) aligned);
dcl	ioi_page_table$init	   entry;
dcl	syserr		   entry options (variable);
dcl	syserr$error_code	   entry options (variable);

dcl	ME		   char (32) static options (constant) init ("ioi_init");

dcl	(addr, bin, bit, divide, hbound, lbound, max, min, null, ptr, rel, string, substr, unspec)
			   builtin;

	idp = addr (ioi_data$);			/* get pointer to data base */
	io_config_data_ptr = addr (io_config_data$);
	io_config_iom_table_ptr = ptr (io_config_data_ptr, io_config_data.iom_table_offset);
	io_config_controller_table_ptr = ptr (io_config_data_ptr, io_config_data.controller_table_offset);
	io_config_channel_table_ptr = ptr (io_config_data_ptr, io_config_data.channel_table_offset);
	io_config_device_table_ptr = ptr (io_config_data_ptr, io_config_data.device_table_offset);
	disksp = addr (disk_seg$);

	high_ctx, high_dtx, high_gtx, high_itx = 0;

	iom_model_array (*) = "";
	iom_cardp = null ();
	call config_$find (IOM_CARD_WORD, iom_cardp);	/* start looking for all IOMs */
	do while (iom_cardp ^= null ());
	     high_itx = high_itx + 1;
	     itep = addr (ioi_data.it (high_itx));
	     unspec (ite) = ""b;
	     ite.tag = iom_card.tag;
	     ite.model = iom_card.model;
	     iom_model_array (ite.tag) = iom_card.model;
	     ite.deleted = (iom_card.state = "off");
	     ite.iom_table_idx = iom_table_idx_from_tag (ite.tag);
	     call config_$find (IOM_CARD_WORD, iom_cardp);/* on to the next one */
	end;

	prph_cardp = null ();
	call config_$find (PRPH_CARD_WORD, prph_cardp);	/* start looking for all devices */
	do while (prph_cardp ^= null ());
	     device_type = substr (prph_card.name, 1, 3);
	     prph_dsk_cardp, prph_tap_cardp = prph_cardp; /* base the special structures */
	     call allocate_gte (prph_card.name);	/* set up a group entry */
/**** At this point, all the constant information (that requiring none or little calculation) is set in the gte ****/
	     if (device_type = "dsk") | (device_type = "tap") then
		gte.mplex = "1"b;
	     call io_chnl_util$iom_to_name (prph_card.iom, (prph_card.chan), chanid, code);
	     if code ^= 0 then
		call syserr$error_code (CRASH, code, "^a: Unable to get the name of iom ^d channel ^d.", ME,
		     prph_card.iom, prph_card.chan);
	     gte.ipc = IS_ON_IMU (prph_card.iom);
	     mpc_cardp = ioi_config$find_controller_card (chanid);
	     if mpc_cardp ^= null () then do;		/* found the channel on a controller */
		gte.psia = "1"b;			/* the only interface we currently know */
		ipc_cardp = mpc_cardp;
		gte.fips = (ipc_card.word = IPC_CARD_WORD) & (ipc_card.type = IPC_FIPS);
	     end;
	     gte.detailed_status_cmd = extended_status_command ();
	     gte.ascii_dtst = ascii_detailed_status ();
	     call setup_log_status_info;
	     call allocate_dtes_from_prph_card;
	     call allocate_ctes_from_prph_card;
	     call config_$find (PRPH_CARD_WORD, prph_cardp);
						/* get next card */
	end;

/**** Now pick up all the channels described via chnl cards ****/

	chnl_cardp = null ();
	call config_$find (CHNL_CARD_WORD, chnl_cardp);
	do while (chnl_cardp ^= null ());
	     device_type = substr (chnl_card.name, 1, 3);
	     if find_gte () then
		call allocate_ctes_from_chnl_card;
	     call config_$find (CHNL_CARD_WORD, chnl_cardp);
	end;

/**** Next, find the base logical channel for every channel (we had to wait until they're all allocated). ****/

	do ctx = lbound (ioi_data.ct, 1) to hbound (ioi_data.ct, 1);
	     ctep = addr (ioi_data.ct (ctx));
	     chanid = ioi_config$find_base_channel (cte.chanid);
	     cte.base_ctep = cte_offset (chanid);
	     if cte.base_ctep = ""b then
		cte.base_ctep = rel (ctep);
	end;

/**** Now find all the storage system channels, devices, and groups and mark them as such ****/

	do gtx = lbound (ioi_data.gt, 1) to hbound (ioi_data.gt, 1);
	     gtep = addr (ioi_data.gt (gtx));
	     device_type = substr (gte.name, 1, 3);
	     if device_type = "dsk" then		/* found one */
		call setup_disk_sharing;
	end;

/**** Now assign all non-storage system channels which are multiplexed. ****/

	do gtx = lbound (ioi_data.gt, 1) to hbound (ioi_data.gt, 1);
	     gtep = addr (ioi_data.gt (gtx));
	     if gte.mplex & (gte.disk_data_subsystem_idx = 0) then do;
		do ctep = ptr (idp, gte.ctep) repeat ptr (idp, cte.next_ctep) while (rel (ctep));
		     if ^cte.deleted then do;
			call io_manager$assign (cte.chx, cte.chanid, ioi_masked$interrupt, bin (rel (ctep)),
			     statusp, code);
			if code ^= 0 then
			     call syserr$error_code (CRASH, code, "^a: Unable to assign channel ^a.", ME,
				cte.chanid);
			cte.statusp = statusp;
			cte.ioi_use = "1"b;
		     end;
		end;
	     end;
	end;

/**** Now create entries for all configured MCAs (in the IMUs). ****/

	do itx = lbound (ioi_data.it, 1) to hbound (ioi_data.it, 1);
	     itep = addr (ioi_data.it (itx));
	     if ite.model = "imu" | ite.model = "iioc" then do;
		call allocate_gte ("mca" || substr ("abcd", ite.tag, 1));
		gte.psia = "1"b;			/* works like psia */
		gte.n_devices = 1;
		call allocate_ctes (ite.tag, 3, 1);
		device_number = 1;
		adding_controller_dte = "0"b;
		call allocate_next_dte;
	     end;
	end;

/**** Set up the I/O page tables. ****/

	call ioi_page_table$init;

/* Set up the reset status IDCW */

	idcwp = addr (ioi_data.rss_idcw);
	string (idcw) = ""b;
	idcw.command = "40"b3;			/* reset status command */
	idcw.code = "7"b3;				/* identify this as an IDCW */
	idcw.chan_cmd = "02"b3;			/* non-data transfer type command */
	idcw.count = "01"b3;			/* only do this once at a time */

	ioi_data.setup = "1"b;			/* OK for polling to run now. */
	return;
%page;

/* Routine to allocate a group table entry.  It checks for the existence for the gte first, and complains
   if it already exists.  If not, it allocates one and fills in the easy stuff, returning with gtep
   pointing to the relevant gte. */

allocate_gte:
     proc (prph_name);


dcl	current_gtx	   fixed bin;
dcl	prph_name		   char (4) aligned;

	do current_gtx = 1 to high_gtx;
	     gtep = addr (ioi_data.gt (current_gtx));
	     if gte.name = prph_name then
		call syserr (CRASH, "^a: Duplicate ""prph ^a"" card found.", ME, gte.name);
	end;
	high_gtx = high_gtx + 1;
	gtep = addr (ioi_data.gt (high_gtx));
	gte.lock = ""b;				/* not locked */
	gte.name = prph_name;			/* get name from prph card */
	gte.dtep, gte.ctep = ""b;			/* no devices or channels yet */
	string (gte.flags) = ""b;			/* default all flags to off */
	gte.n_devices = 0;
	gte.pending_connects = 0;			/* no work to do yet */
	gte.disk_data_subsystem_idx = 0;		/* not necessarily a disk subsystem */

     end allocate_gte;

/* Routine to find an already allocated gte (it uses the name from a chnl card, which are processed after all
   prph cards).  Crashes if the gte not found.  In case we want to to something different, it pretends to carry on. */

find_gte:
     proc () returns (bit (1) aligned);

dcl	current_gtx	   fixed bin;

	do current_gtx = 1 to ioi_data.ngt;
	     gtep = addr (ioi_data.gt (current_gtx));
	     if chnl_card.name = gte.name then
		return ("1"b);			/* found it */
	end;
	call syserr (CRASH, "^a: No matching ""prph ^a"" found for ""chnl ^a"".", ME, chnl_card.name, chnl_card.name);
	return ("0"b);

     end find_gte;

/* Routine to return the extended status command to use for a given device type, if it knows it. */

extended_status_command:
     proc () returns (bit (6));

	if gte.fips then
	     return ("00"b3);
	else if device_type = "dsk" then
	     return ("22"b3);
	else if device_type = "tap" then
	     return ("50"b3);
	else if (device_type = "prt") | (device_type = "rdr") | (device_type = "pun") | (device_type = "ccu") then
	     return ("03"b3);
	else return ("00"b3);

     end extended_status_command;

/* Routine to return true if the device in question returns its extended status with the channel in ASCII
   mode.  If so, we re-pack it at interrupt side to resemble normal IOM channels.  Currently, EURCs
   are the only controllers which behave this way. */

ascii_detailed_status:
     proc () returns (bit (1) aligned);

dcl	i		   fixed bin;

	if mpc_cardp ^= null () then
	     if substr (mpc_card.name, 1, 3) = "urp" then /* a unit record mpc */
		do i = 1 to hbound (eurc_model_numbers, 1);
		if mpc_card.model = eurc_model_numbers (i) then
		     return ("1"b);
	     end;
	return ("0"b);

     end ascii_detailed_status;

/* Routine to setup the index to the log_status_info structure.  There is one of these per device type,
   telling whether or not a particular status is to be logged in the syserr log.  If, for some reason,
   there is no structure for this device type, the index is left at 0 and the interrupt side uses
   a heuristic to decide whether or not to log. */

setup_log_status_info:
     proc;

dcl	log_status_info_idx	   fixed bin;

	io_log_infop = addr (io_log_status_info$io_log_status_info);
	do log_status_info_idx = 1 to io_log_info.ndev;
	     logp = addr (io_log_info.log_entry (log_status_info_idx));
	     if log.dev_name = device_type then do;
		gte.io_log_info_index = log_status_info_idx;
		return;
	     end;
	end;
	gte.io_log_info_index = 0;

     end setup_log_status_info;

/* Routine which allocates the device table entries given a prph card and an already setup gte. */

allocate_dtes_from_prph_card:
     proc;

dcl	group_idx		   fixed bin;

	adding_controller_dte = "0"b;
	if gte.fips then
	     device_number = 0;			/* devices start at zero */
	else device_number = 1;			/* devices start at 1, controller at 0 */
	if (device_type = "tap") | (device_type = "dsk") then do;
						/* NOTE THE ASSUMPTION THAT THE CARDS LOOK ALIKE */
	     do group_idx = lbound (prph_tap_card_array.group, 1) to hbound (prph_tap_card_array.group, 1);
		if prph_tap_card_array.group (group_idx).model ^= 0 then do;
		     do device_number = device_number
			to device_number + prph_tap_card_array.group (group_idx).ndrives - 1;
			call allocate_next_dte;
		     end;
		end;
		else device_number = device_number + prph_tap_card_array.group (group_idx).ndrives;
	     end;
	     adding_controller_dte = "1"b;
	     device_number = 0;			/* make one for the controller */
	     call allocate_next_dte;
	end;
	else call allocate_next_dte;
	return;

     end allocate_dtes_from_prph_card;

allocate_next_dte:
     proc;

dcl	device_name	   char (32);
dcl	device_number_string   pic "99";

	if gte.mplex & ^(gte.fips & adding_controller_dte) then do;
	     device_number_string = device_number;
	     device_name = gte.name || "_" || device_number_string;
	end;
	else device_name = gte.name;
	high_dtx = high_dtx + 1;
	dtep = addr (ioi_data.dt (high_dtx));
/**** now fill in all of the info ****/
	unspec (dte) = ""b;				/* wipe it clean */
	if gte.dtep = ""b then do;			/* if this is the first device we've seen in this group */
	     gte.dtep = rel (dtep);			/* nowhere else it could point */
	     dte.next_dtep = rel (dtep);		/* circular list */
	end;
	else do;					/* link it into the circular list */
	     dte.next_dtep = ptr (dtep, gte.dtep) -> dte.next_dtep;
						/* thread it into the linked list */
	     ptr (dtep, gte.dtep) -> dte.next_dtep = rel (dtep);
	     gte.dtep = rel (dtep);			/* this is the new head */
	end;
	dte.gtep = rel (gtep);			/* remember our group */
	dte.channel_required = "";			/* no channel requirement by default */
	dte.workspace_ptr = null ();
	dte.workspace_astep = null ();
	dte.ptp = null ();
	dte.in_use = "1"b;				/* assume it's available for IOI */
	dte.device = bit (bin (device_number, 6), 6);	/* remember which device we are */
	dte.lock.event = unspec (IOI_DEVICE_LOCK_EVENT_TEMPLATE) || rel (dtep);
						/* set event for locking and unlocking */
	dte.device_table_idx = device_table_idx_from_name (device_name);
	if dte.device_table_idx = 0 then
	     call syserr (CRASH, "^a: Couldn't find device_table_idx for device ""^a"".", ME, device_name);

	dte.deleted = ^device_table.device_entry (dte.device_table_idx).configured;
	if device_type = "fnp" | device_type = "dia" then
	     dte.direct = "1"b;
	dte.controller = adding_controller_dte;

/**** Check for duplicate devices ****/
	do dtep = ptr (idp, dte.next_dtep) repeat ptr (idp, dte.next_dtep) while (rel (dtep) ^= gte.dtep);
	     if bit (bin (device_number, 6), 6) = dte.device & ^adding_controller_dte then
		call syserr (CRASH, "^a: Multiple definitions of device ^a found.", ME, device_name);
	end;

     end allocate_next_dte;

/* Routine to allocate the channel table entries described on a prph card */

allocate_ctes_from_prph_card:
     proc;

	if device_type = "tap" | device_type = "dsk" then /* NOTE THAT WE ASSUME THE CARDS ARE THE SAME FORMAT */
	     call allocate_ctes (prph_dsk_card.iom, prph_dsk_card.chan, prph_dsk_card.nchan);
	else call allocate_ctes (prph_card.iom, prph_card.chan, 1);

     end allocate_ctes_from_prph_card;

/* Routine to allocate the channel table entries described on a chnl card */

allocate_ctes_from_chnl_card:
     proc;

dcl	group_idx		   fixed bin;

	do group_idx = lbound (chnl_card_array.group, 1) to hbound (chnl_card_array.group, 1);
	     call allocate_ctes (chnl_card_array.group (group_idx).iom, chnl_card_array.group (group_idx).chan,
		chnl_card_array.group (group_idx).nchan);
	end;

     end allocate_ctes_from_chnl_card;

/* Routine which allocates the ctes.  gtep must be pointing at the group table entry for these channels. */

allocate_ctes:
     proc (iomno, channo, nchans);

dcl	channo		   fixed bin (8) parameter;
dcl	iomno		   fixed bin (3) parameter;
dcl	nchans		   fixed bin parameter;

dcl	ch_idx		   fixed bin;
dcl	iterp		   bit (18);
dcl	itx		   fixed bin;
dcl	this_channel	   fixed bin (7);

/**** Find the ite for this IOM. ****/

	do itx = 1 to high_itx while (ioi_data.it (itx).tag ^= iomno);
	end;
	if itx > high_itx then do;
	     call syserr (CRASH, "^a:  No iom card found for the ^a subsystem.", ME, gte.name);
	     iterp = ""b;				/* really won't help, but... */
	end;
	else iterp = rel (addr (ioi_data.it (itx)));

/**** We loop through the channels in descending order.  This is so the channels will end up
      on the queue in ascending order (we push them on one at a time).  This is necessary so
      that we will use the base channel of a physical channel first.  We must do THAT to
      ensure that it is unmasked when there is a possibility of a special interrupt happening. ****/

	do ch_idx = nchans - 1 to 0 by -1;
	     high_ctx = high_ctx + 1;			/* use next cte */
	     ctep = addr (ioi_data.ct (high_ctx));
	     unspec (cte) = ""b;			/* scrub it before using */
	     cte.next_ctep = gte.ctep;		/* link this cte onto the gte's list */
	     cte.itep = iterp;
	     gte.ctep = rel (ctep);
	     cte.gtep = rel (gtep);			/* remember our group */
	     this_channel = channo + ch_idx;
	     call io_chnl_util$iom_to_name (iomno, this_channel, cte.chanid, code);
	     if code ^= 0 then
		call syserr$error_code (CRASH, code, "^a: Unable to get the name of IOM ^d channel ^d.", ME, iomno,
		     this_channel);
	     cte.channel_table_idx = channel_table_idx_from_name (cte.chanid);
	     cte.deleted = ^channel_table.channel_entry (cte.channel_table_idx).configured;
	     cte.direct = (device_type = "fnp") | (device_type = "dia");

/**** Check for duplicate channels ****/
	     do ctep = ptr (idp, cte.next_ctep) repeat ptr (idp, cte.next_ctep) while (rel (ctep));
		if cte.chanid = ptr (idp, gte.ctep) -> cte.chanid then
		     call syserr (CRASH, "^a: Multiple definitions of channel ^a found for subsystem ^a.", ME,
			cte.chanid, gte.name);
	     end;
	end;

     end allocate_ctes;

cte_offset:
     proc (chanid) returns (bit (18));

dcl	chanid		   char (8) aligned parameter;

dcl	ctx		   fixed bin;

	do ctx = lbound (ioi_data.ct, 1) to hbound (ioi_data.ct, 1);
	     if (addr (ioi_data.ct (ctx)) -> cte.chanid) = chanid then
		return (rel (addr (ioi_data.ct (ctx))));
	end;
	return (""b);

     end cte_offset;

iom_table_idx_from_tag:
     proc (tag) returns (fixed bin);

dcl	tag		   fixed bin (3) parameter;

dcl	name		   char (1);
dcl	i		   fixed bin;

	name = substr ("ABCD", tag, 1);
	do i = lbound (iom_table.iom_entry, 1) to hbound (iom_table.iom_entry, 1);
	     if iom_table.iom_entry (i).name = name then
		return (i);
	end;
	return (lbound (iom_table.iom_entry, 1) - 1);

     end iom_table_idx_from_tag;

device_table_idx_from_name:
     proc (name) returns (fixed bin);

dcl	name		   char (*) parameter;

dcl	i		   fixed bin;

	do i = lbound (device_table.device_entry, 1) to hbound (device_table.device_entry, 1);
	     if device_table.device_entry (i).name = name then
		return (i);
	end;
	return (lbound (device_table.device_entry, 1) - 1);

     end device_table_idx_from_name;

channel_table_idx_from_name:
     proc (name) returns (fixed bin);

dcl	name		   char (8) aligned parameter;

dcl	i		   fixed bin;

	do i = lbound (channel_table.channel_entry, 1) to hbound (channel_table.channel_entry, 1);
	     if channel_table.channel_entry (i).name = name then
		return (i);
	end;
	return (lbound (channel_table.channel_entry, 1) - 1);

     end channel_table_idx_from_name;

/* Routine which returns TRUE if the PRPH is on an IMU */

IS_ON_IMU:
     proc (iomno) returns (bit (1));

dcl	iomno		   fixed bin (3) parameter;
dcl	itx		   fixed bin;

/**** Find the ite for this IOM. ****/

	do itx = 1 to high_itx while (ioi_data.it (itx).tag ^= iomno);
	end;
	if itx > high_itx then
	     return ("0"b);
	if ioi_data.it (itx).model = "imu" | ioi_data.it (itx).model = "iioc" then
	     return ("1"b);
	else return ("0"b);
     end IS_ON_IMU;

/* Routine which initializes the disk databases in ioi_data.  It assumes that disk_seg is already setup, and
   that disk_control has assigned to itself all channels for all disks.  It sets up so that later we can usurp
   any channels we need for udsk activity. gtep is assumed to be pointing to the gte for the disk subsystem */

setup_disk_sharing:
     proc;

dcl	ctx		   fixed bin;

	call find_disktab;				/* locate the disktab for this subsystem */
	mpc_cardp = null ();
	do ctx = lbound (null () -> disk_channel_table, 1) + disktab.nchan - 1
	     to lbound (null () -> disk_channel_table, 1) by -1;
						/* iterate in order of increasing priority */
	     cp = addr (ptr (diskp, disktab.channels) -> disk_channel_table (ctx));
	     if chantab.chanid ^= "" then do;		/* if the channel is known to disk_control */
		call find_matching_cte;		/* get ctep pointing to the right place */
		cte.statusp = chantab.statusp;	/* copy this info */
		cte.chx = chantab.chx;
		cte.disktab_ctx = ctx;		/* so we can find this later */
		chantab.ioi_ctx = bin (rel (ctep));	/* so disk_control can find us later */
		if mpc_cardp = null () then
		     mpc_cardp = ioi_config$find_controller_card (cte.chanid);
		else if mpc_cardp ^= ioi_config$find_controller_card (cte.chanid) then
		     gte.dual_controller = "1"b;
	     end;
	end;

find_disktab:
	proc;

dcl	dtx		   fixed bin;

	     do dtx = lbound (disk_data.array, 1) to hbound (disk_data.array, 1);
		if disk_data.array (dtx).name = gte.name then do;
		     gte.disk_data_subsystem_idx = dtx; /* so we can find this entry later */
		     diskp = ptr (disksp, disk_data.array (dtx).offset);
		     return;
		end;
	     end;
	     call syserr (CRASH, "^a: No entry for ^a found in disk_data.", ME, gte.name);

	end find_disktab;

find_matching_cte:
	proc;

	     do ctep = ptr (idp, gte.ctep) repeat ptr (idp, cte.next_ctep) while (rel (ctep));
		if cte.chanid = chantab.chanid then
		     return;
	     end;
	     call syserr (CRASH, "^a: No cte found for channel ^a.", ME, chantab.chanid);

	end find_matching_cte;

     end setup_disk_sharing;

%include ioi_data;
%page;
%include io_config_data;
%page;
%include config_iom_card;
%page;
%include config_mpc_card;
%page;
%include config_ipc_card;
%page;
%include config_prph_card;
%page;
%include config_prph_tap_card;
%page;
%include config_prph_dsk_card;
%page;
%include config_chnl_card;
%page;
%include dskdcl;
%page;
%include io_chnl_util_dcls;
%page;
%include io_manager_dcls;
%page;
%include io_log_status_info;
%page;
%include iom_pcw;
%page;
%include eurc_model_numbers;
%page;
%include syserr_constants;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   ioi_init: ERROR_CODE  Unable to get the name of name of iom IOMNO channel CHANNO.

   S:	$crash

   T:	$init

   M:	An attempt to generate the name of logical channel CHANNO of iom
   IOMNO failed.

   A:	$config


   Message:
   ioi_init: ERROR_CODE  Unable to assign channel CHANID.

   S:	$crash

   T:	$init

   M:	A logical channel could not be assigned to IOI.
   $err

   A:	$contact


   Message:
   ioi_init: Duplicate "prph NAME" card found.

   S:	$crash

   T:	$init

   M:	$msg

   A:	$config


   Message:
   ioi_init: No matching "prph NAME" found for "chnl NAME".

   S:	$crash

   T:	$init

   M:	$msg

   A:	$config


   Message:
   ioi_init: Multiple definitions of device NAME found.

   S:	$crash

   T:	$init

   M:	$msg

   A:	$config


   Message:
   ioi_init: Multiple definitions of channel CHANID found for subsystem NAME.

   S:	$crash

   T:	$init

   M:	$msg

   A:	$config


   Message:
   ioi_init: No entry for NAME found in disk_data.

   S:	$crash

   T:	$init

   M:	$err

   A:	$contact


   Message:
   ioi_init: No cte found for channel CHANID.

   S:	$crash

   T:	$init

   M:	$err

   A:	$contact


   END MESSAGE DOCUMENTATION */

     end ioi_init;
