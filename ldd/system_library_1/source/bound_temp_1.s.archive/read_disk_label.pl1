/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* format: style2 */

read_disk_label:
     procedure (a_pvtx, a_labelp, a_reason, a_code);

/* format: off */

/* *	This procedure reads the label of the disk owned by the specified pvt.
   *
   *	Modified 11/28/80, W. Olin Sibert, to extract from init_pvt and make standalone
   *	   also to add improved error diagnostics
   *     BIM 7/82 remove fixed bin (9), new pvte.
   *     BIM 10/82 no more crashes.
   */

/* format: on */

	dcl     (
	        a_pvtx		 fixed bin,
	        a_labelp		 pointer,
	        a_reason		 char (*),
	        a_code		 fixed bin (35)
	        )			 parameter;

	dcl     code		 fixed bin (35);
	dcl     n_tries		 fixed bin;

	dcl     sys_info$first_reasonable_time
				 fixed bin (71) external static;
	dcl     sys_info$last_reasonable_time
				 fixed bin (71) external static;

	dcl     cv_fsdisk_error_	 entry (fixed bin (35));
	dcl     read_disk		 entry (fixed bin, fixed bin, pointer, fixed bin (35));

	dcl     syserr$error_code	 entry options (variable);
	dcl     MAX_TRIES		 fixed bin internal static options (constant) init (5);
	dcl     ME		 char (32) internal static options (constant) init ("read_disk_label");

	dcl     addr		 builtin;

	declare (
	        error_table_$fsdisk_not_ready,
	        error_table_$fsdisk_phydev_err,
	        error_table_$fsdisk_bad_label,
	        error_table_$fsdisk_old_label
	        )			 fixed binary (35) external static;


	pvt_arrayp = addr (pvt$array);
	pvtep = addr (pvt_array (a_pvtx));
	labelp = a_labelp;

	n_tries = 0;
	a_code = 0;
	a_reason = "";

TRY_READING_AGAIN:
	n_tries = n_tries + 1;			/* Don't do it too many times */
	code = 0;

	call read_disk (a_pvtx, LABEL_ADDR, labelp, code);
	call cv_fsdisk_error_ (code);

/* retry device errors; the drive may not be all the way here yet */
	if code = error_table_$fsdisk_not_ready | code = error_table_$fsdisk_phydev_err
	then if n_tries < MAX_TRIES
	     then do;
		     do code = 100000 to 0 by -1;	/* wait a bit */
		     end;
		     goto TRY_READING_AGAIN;
		end;
	     else do;
		     a_reason = "Error persisted after retries.";
		     a_code = code;
		     return;
		end;
	else if code ^= 0
	then do;					/* some code that indicates logic error */
		call syserr$error_code (CRASH, code, "^a: Cannot read label of ^a ^d: ^a.", ME, pvte.devname,
		     pvte.logical_area_number);
	     end;

/* Label is read in */

	if label.Multics ^= Multics_ID_String
	then do;
		a_code = error_table_$fsdisk_bad_label;
		a_reason = "Label sentinel was incorrect.";
		return;
	     end;

	if label.version ^= 1
	then do;
		a_code = error_table_$fsdisk_old_label;
		return;
	     end;

	if (label.time_registered < sys_info$first_reasonable_time) /* Label probably damaged, or prehistoric */
	     | (label.time_registered > sys_info$last_reasonable_time)
	then do;
		a_code = error_table_$fsdisk_bad_label;
		a_reason = "Unreasonable time in label.";
		return;
	     end;

	return;					/* We have made it through all the obstacles */


/* format: off */
%page; %include disk_pack;
%page; %include fs_vol_label;
%page; %include pvte;
%page; %include syserr_constants;

	end read_disk_label;
