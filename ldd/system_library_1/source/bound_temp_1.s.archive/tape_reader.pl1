/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* TAPE_READER - Multics Standard Tape Reading Procedure for Initialization.
	recoded into PL/1 - 8/27/73 by N. I. Morris			*/
/* BIM 7/82 tape_io renamed to boot_tape_io */

tape_reader: proc (p, n);

	dcl     p			 ptr,		/* pointer to target data buffer */
	        n			 fixed bin (18);	/* # of words to read */

	dcl     (cur_p, cur_dp, cur_tp) ptr,		/* ptrs to current record header, data, trailer */
	        exprec		 fixed bin (18),	/* next expected record number */
	        datap		 ptr,		/* ptr to current position in target data */
	        count		 fixed bin (18),	/* # of words remaining to be transferred */
	        words_left		 fixed bin (18),	/* # of words remaining in tape buffer */
	        copy_words		 fixed bin (18),	/* # of words to be copied */
	        nrecs		 fixed bin,	/* # of records read before good record encountered */
	        retries		 fixed bin,	/* # of times tape backspaced to retry */
	        majstat		 fixed bin (5),	/* major status from tape I/O operation */
	        checksum		 bit (36) aligned,	/* tape record checksum */
	        i			 fixed bin;	/* iteration variable */

	dcl     tape_count		 fixed bin static;	/* count of tape drives used */

	dcl     data		 (copy_words) fixed bin (35) based; /* structure for copying data */

	dcl     1 physical_record_buffer$ ext,		/* physical record buffer */
	        ( 2 index		 fixed bin (17),	/* index into current buffer */
		2 pad		 fixed bin (17)) unal,
		2 cur_rec		 (1040) fixed bin;	/* current record */

	dcl     (addr, addrel, divide, min, substr) builtin;

	dcl     syserr		 ext entry options (variable),
	        (boot_tape_io$read,
	        boot_tape_io$backspace,
	        boot_tape_io$rewind,
	        tape_checksum_	 entry (ptr, ptr),
	        (boot_tape_io$init_tape,
	        boot_tape_io$final_tape)) entry;


%include mstr;



/*  */

	datap = p;				/* Get pointer to data target. */
	count = n;				/* Get # of words to be read. */

	cur_p = addr (physical_record_buffer$.cur_rec);	/* Get pointer to current record header. */
	cur_dp = addr (cur_p -> mstr.data);		/* Get pointer to current record data. */

reader_loop:
	words_left = divide (cur_p -> mstr_header.data_bits_used, 36, 18, 0) - physical_record_buffer$.index;
						/* Compute # of words remaining in tape buffer. */
	if words_left = 0 then do;			/* If current buffer is used up ... */
		cur_tp = addr (cur_p -> mstr.trail);	/* Get a pointer to current record trailer. */
		exprec = cur_tp -> mstr_trailer.tot_rec + 1; /* Compute next expected record number. */
		call get_next_buffer;		/* Refill the record buffer. */
		physical_record_buffer$.index = 0;	/* Reset index to buffer. */
		go to reader_loop;			/* Now use new record. */
	     end;

	copy_words = min (count, words_left);		/* Copy as many words as possible. */
	count = count - copy_words;			/* Decrement count of remaining words to copy. */
	if copy_words > 0 then datap -> data = addrel (cur_dp, physical_record_buffer$.index) -> data;
						/* Copy the data. */
	physical_record_buffer$.index = physical_record_buffer$.index + copy_words;
						/* Increment tape buffer index. */
	datap = addrel (datap, copy_words);		/* Bump the target data pointer. */
	if count > 0 then go to reader_loop;		/* Continue, if any words remaining. */

	return;					/* All finsihed.  Return to caller. */


/*  */

get_next_buffer: proc;


	retries = 0;				/* Initialize retry count. */

retry:	if retries > 64 then /* Give up after 64 tries. */
	     call syserr (1, "tape_reader: Unable to read system tape.");
	nrecs = 0;				/* Initialize record count. */

again:	nrecs = nrecs + 1;				/* Count one record. */

eof:	call do_io (boot_tape_io$read, "001100000010000"b); /* Read a tape record. */
	if majstat ^= 0 then do;			/* If non-zero major status ... */
		if majstat = 3 then /* If device data alert ... */
		     go to again;			/* Try reading again. */
		if majstat = 4 then /* If EOF ... */
		     go to eof;
		if majstat = 11 then /* If MPC device data alert ... */
		     go to again;
	     end;

	if cur_p -> mstr_header.c1 ^= header_c1 | /* Compare check bit patterns. */
	     cur_p -> mstr_header.c2 ^= header_c2 |
	     cur_tp -> mstr_trailer.c1 ^= trailer_c1 |
	     cur_tp -> mstr_trailer.c2 ^= trailer_c2 then
	     go to again;

	call tape_checksum_ (cur_p, addr (checksum));	/* Compute record checksum. */
	if checksum ^= cur_p -> mstr_header.checksum then
	     go to again;				/* Check the checksum. */
	if cur_p -> mstr_header.flags.admin then /* If administrative record ... */
	     go to admin_record;			/* Handle it properly. */
validate:
	if cur_tp -> mstr_trailer.tot_rec < exprec then
	     go to retry;				/* If we backspaced too much. */
	if cur_tp -> mstr_trailer.tot_rec > exprec then
	     go to back_up;				/* If we read too much. */

	return;					/* Record OK.  Return. */


admin_record:
	if cur_p -> mstr_header.flags.eor then /* If end of reel ... */
	     go to validate;
	go to again;				/* Otherwise, ignore as spurious. */


back_up:	retries = retries + 1;			/* Count another attempt. */
	do i = 1 to nrecs + 2;			/* Back the tape up. */
	     call do_io (boot_tape_io$backspace, "000110000000000"b);
	     if majstat = 5 then go to retry;		/* If at BOT, retry reading. */
	end;
	go to retry;

     end get_next_buffer;

/*  */

init: entry;

	call boot_tape_io$init_tape;			/* Initialize tape I/O package. */
	tape_count = 0;				/* Initialize count of tapes. */
	return;					/* Return to caller. */


final: entry;

	call do_io (boot_tape_io$rewind, (15)"0"b);	/* Rewind the last tape. */
	call boot_tape_io$final_tape;			/* Turn off the tape I/O package. */
	return;



do_io: proc (e, s);

	dcl     e			 entry (fixed bin (5)), /* boot_tape_io entry to call */
	        s			 bit (15) aligned;	/* control bits for examining major status */


call:	call e (majstat);				/* Call boot_tape_io routine. */

	if majstat ^= 0 then /* If tape error ... */
	     if majstat >= 16 then /* If power off bit is on ... */
		go to call;			/* Try over again. */
	     else if substr (s, majstat, 1) then /* If control bit on ... */
		return;				/* Let caller handle this. */
	     else if majstat <= 2 then /* If attention or busy ... */
		go to call;			/* Try again. */
	     else /* Otherwise ... */
		call syserr (1, "tape_reader: bad major status = ^o", majstat);

	return;


     end do_io;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   tape_reader: unable to read system tape

   S: $crash

   T: $init

   M: The bootload tape is unreadable.

   A: $boot_tape

   Message:
   tape_reader: bad_major_status: SSS

   S: $crash

   T: $init

   M: The bootload tape is unreadable.

   A: $boot_tape
   Try another tape drive.

   END MESSAGE DOCUMENTATION */

     end tape_reader;
