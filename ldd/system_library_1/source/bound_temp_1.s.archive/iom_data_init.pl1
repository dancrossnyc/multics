/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* iom_data_init - a system initialization routine to set up
   the data bases used by the iom_manager.
   First written in August 1971 by R F Mabee.
   Converted for followon hardware July 27, 1972 by R. F. Mabee
   Last modified 02/24/77 by Noel I. Morris
   Modified for paged IOM by C. Hornig November 1980.
   More paged IOM by C. Hornig, March 1982.
   Modified for channel reconfiguration by Chris Jones, January 1984.
   Modified to remove support for non-paged-mode IOMs by Chris Jones, August 1984
   Modified to init system fault channel of unconfigured IOMs by M. Pandolf, November 1984
   Modified to init iom_data$imw_lock and iom_data$n_intr_procs by M. Pandolf, January 1985
*/


/****^  HISTORY COMMENTS:
  1) change(86-01-06,Fawcett), approve(86-04-11,MCR7351),
     audit(86-06-07,GDixon), install(86-07-17,MR12.0-1097):
     Change iom_card model from "nsa" to "iom".
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
iom_data_init:
     procedure;

dcl	i		   fixed bin;
dcl	errcode		   fixed bin (35);
dcl	iom_no		   fixed bin (3);
dcl	iom_name		   char (1) aligned;
dcl	found_iom		   bit (1) aligned;

dcl	absadr		   entry (ptr, fixed bin (35)) returns (fixed bin (26));
dcl	config$find	   entry (char (4) aligned, ptr);
dcl	iom_overhead$init	   entry (fixed bin (3), fixed bin (35));
dcl	iom_overhead$init_without_assign
			   entry (fixed bin (3), fixed bin (35));
dcl	syserr		   entry options (variable);

dcl	1 cow		   based aligned,
	  2 unused	   bit (33) unaligned,
	  2 port		   uns fixed bin (3) unaligned;

dcl	iom_int_mask	   (4) bit (72) aligned static options (constant)
			   init ("088800000888800000"b4, "044400000444400000"b4, "022200000222200000"b4,
			   "011100000111100000"b4);

dcl	(addr, binary, bit, hbound, lbound, null, substr, unspec)
			   builtin;

	iom_data_ptr = addr (iom_data$);		/* Get pointer to iom_data segment. */
	iom_mailbox_seg_ptr = addr (iom_mailbox$);	/* Get pointer to iom_mailbox segment. */

/* Set up some constant items. */

	unspec (iom_mailbox_seg) = ""b;

	idcwp = addr (iom_data.stop_dcw);		/* Make DCW to stop any channel. */
	idcw.code = "111"b;				/* Make it an instruction DCW. */
	idcw.chan_cmd = "000010"b;			/* Non-data transfer. */

	lpwp = addr (iom_data.stop_lpw);		/* LPW to use iom_data.stop_dcw. */
	lpw.dcw_addr = abs_addr_18 (addr (iom_data.stop_dcw));
	lpw.nc = "1"b;				/* Keep reusing same DCW. */

	scwp = addr (iom_data.stop_scw);		/* SCW to use iom_data.stop_status */
	scw.address = abs_addr_18 (addr (iom_data.stop_status));

	iom_data.imw_lock = 1;			/* init to OK-to-process-interrupts */
	iom_data.n_intr_procs = 0;			/* no one in interrupt handler yet */

	do i = 1 to iom_data.n_devices;		/* initialize per_device */
	     scwp = addr (iom_data.per_device (i).scw);	/* SCW's */
	     scw.address = abs_addr_18 (addr (iom_data.per_device (i).status));
	end;

	do iom_no = lbound (iom_data.per_iom, 1) to hbound (iom_data.per_iom, 1);
	     lpwp = addr (iom_data.per_iom (iom_no).connect_lpw);
	     lpwp -> lpw.dcw_addr =
		abs_addr_18 (addr (iom_mailbox_seg.iom_mailbox (iom_no).channel_mailbox (connect_channel).scw));
	     lpwp -> lpw.tal = "1"b;			/* Allow tally update and tally runout recognition. */
	     lpwp -> lpw.tally = "0001"b3;		/* Each connect will start a single channel. */

/* Initialize each channel_table and mailbox entry. */

	     do i = lbound (iom_mailbox_seg.iom_mailbox.channel_mailbox, 2)
		to hbound (iom_mailbox_seg.iom_mailbox.channel_mailbox, 2);
		iom_mailbox_seg.iom_mailbox (iom_no).channel_mailbox (i).lpw = iom_data.stop_lpw;
		iom_mailbox_seg.iom_mailbox (iom_no).channel_mailbox (i).scw = iom_data.stop_scw;
	     end;
	     call iom_overhead$init_without_assign (iom_no, errcode);
	end;

/* Now loop through the IOM config cards. */

	found_iom = "0"b;
	iom_cardp = null ();

config_loop:
	call config$find (IOM_CARD_WORD, iom_cardp);
	if iom_cardp = null () then do;		/* done at last */
	     if ^found_iom then
		call syserr (CRASH, "iom_data_init: No valid IOM cards found.");
	     return;
	end;

/* Validate CONFIG IOM card */

	if (iom_card.tag < lbound (iom_data.per_iom, 1)) | (iom_card.tag > hbound (iom_data.per_iom, 1)) then do;
	     call syserr (CRASH, "iom_data_init: Bad IOM tag ^d. IOM card ignored.", iom_card.tag);
	     goto config_loop;
	end;

	iom_no = iom_card.tag;
	iom_name = substr ("ABCD", iom_no);

	if iom_data.per_iom (iom_no).flags.configured then do;
	     call syserr (CRASH, "iom_data_init: Duplicate IOM ^a in config deck.", iom_name);
	     goto config_loop;
	end;

	if (iom_card.port < 0) | (iom_card.port > 7) then do;
	     call syserr (CRASH, "iom_data_init: Illegal port number ^d for IOM ^a.", iom_card.port, iom_name);
	     goto config_loop;
	end;

	if scs$port_data (iom_card.port).assigned > 0 then do;
	     call syserr (CRASH, "iom_data_init: IOM ^a reuses port ^d.", iom_name, iom_card.port);
	     goto config_loop;
	end;
	if iom_card.model = "nsa" then do;
	     call syserr (ANNOUNCE, "iom_data_init:", "IOM model of ""nsa"" for IOM ^a will be changed to ""iom"".",
		iom_card.tag);
	     iom_card.model = "iom";
	end;
	if (iom_card.model ^= "iom") & (iom_card.model ^= "iioc") & (iom_card.model ^= "imu") then do;
	     call syserr (CRASH, "iom_data_init: Bad model ""^a"" for IOM ^a. IOM card ignored.", iom_card.model,
		iom_name);
	     goto config_loop;
	end;

	if (iom_card.state ^= "on") & (iom_card.state ^= "off") then do;
	     call syserr (CRASH, "iom_data_init: Bad state ""^a"" for IOM ^a. IOM card ignored.", iom_card.state,
		iom_name);
	     goto config_loop;
	end;

	found_iom = "1"b;
	iom_data.per_iom (iom_no).flags.configured = "1"b;
	iom_data.per_iom (iom_no).flags.on_line = (iom_card.state = "on");
	iom_data.per_iom (iom_no).model = iom_card.model;
	addr (iom_data.per_iom (iom_no).cow) -> cow.port, iom_data.per_iom (iom_no).port = iom_card.port;

	scs$port_data (iom_card.port).assigned = IOM_PORT;
	scs$port_data (iom_card.port).iom_number = iom_no;

/* enable the IOM ports and interrupt cells */

/* Do something to open up the port */

	scs$open_level = scs$open_level | iom_int_mask (iom_no);

/* Set up the handler and mailbox for the system fault channel. */

	if iom_data.per_iom (iom_no).on_line then do;
	     call iom_overhead$init (iom_no, errcode);
	     if errcode ^= 0 then
		call syserr (CRASH, "iom_data_init: Unable to assign overhead channel for IOM ^d.", iom_no);
	end;
	go to config_loop;


/* * * * * * * * * * ABS_ADDR_18 * * * * * * * * * */

abs_addr_18:
     procedure (P) returns (bit (18) aligned);
dcl	P		   ptr parameter;
dcl	address		   fixed bin (26);
dcl	ec		   fixed bin (35);

	address = absadr (P, ec);
	if ec ^= 0 then
	     call syserr (CRASH, "iom_data_init: Error from absadr.");
	if address > (262144 - 4096) then
	     call syserr (CRASH, "iom_data_init: Data not in low 256K.");
	return (bit (binary (address, 18)));
     end abs_addr_18;

%include config_iom_card;
%page;
%include iom_data;
%page;
%include iom_dcw;
%include iom_lpw;
%include iom_pcw;
%include iom_scw;
%page;
%include io_manager_dcls;
%page;
%include scs;
%page;
%include syserr_constants;

/*	BEGIN MESSAGE DOCUMENTATION

   Message:
   iom_data_init: No valid IOM cards found.

   S: $crash

   T: $init

   M: There were no valid IOM cards in the configuration deck.

   A: Correct configuration deck and reboot.


   Message:
   iom_data_init: Bad IOM tag TAG. IOM card ignored.

   S: $crash

   T: $init

   M: An IOM card contained an IOM tag other than A, B, C, or D.

   A: Correct configuration deck and reboot.


   Message:
   iom_data_init: Illegal port number PORT for IOM TAG.

   S: $crash

   T: $init

   M: The IOM card for IOM TAG contained an illegal port number.
   The port number must be between 0 and 7.

   A: Correct configuration deck and reboot.


   Message:
   iom_data_init: IOM TAG reuses port PORT.

   S: $crash

   T: $init

   M: IOM TAG has been given the same port as some other active module (CPU or IOM).

   A: Correct configuration deck and reboot.


   Message:
   iom_data_init: Bad model MODEL for IOM TAG.  IOM card ignored.

   S: $crash

   T: $init

   M: The model field for IOM TAG was not recognized.

   A: Correct configuration deck and reboot.


   Message:
   iom_data_init: Bad state STATE for IOM TAG.  IOM card ignored.

   S: $crash

   T: $init

   M: The state for IOM TAG was neither "on" or "off".

   A: Correct configuration deck and reboot.


   Message:
   IOM model of "nsa" for IOM TAG will be changed to "iom".

   S: $announce

   T: $init

   M: The model field of this IOM card should be "iom".  The system will
      correct it for this boot.

   A: Correct configuration deck before next boot.


   Message:
   iom_data_init: Error from absadr.

   S: $crash

   T: $init

   M: $err

   A: $contact


   Message:
   iom_data_init: Data not in low 256K.

   S: $crash

   T: $init

   M: The IOM data bases are not located in the low 256K of memory.
   $err

   A: Correct configuration deck and reboot.


   Message:
   iom_data_init: Duplicate IOM TAG in config deck.

   S: $crash

   T: $init

   M: Two IOM cards specifying IOM tag TAG were found
   in the configuration deck.

   A: Correct configuration deck and reboot.


   Message:
   iom_data_init: Unable to assign overhead channel for IOM TAG.

   S: $crash

   T: $init

   M: Could not set up overhead channel handlers for IOM TAG.
   $err

   A: $contact


   END MESSAGE DOCUMENTATION */

     end iom_data_init;
