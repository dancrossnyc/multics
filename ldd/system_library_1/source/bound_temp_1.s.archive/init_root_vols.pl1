/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(74-12-01,VanVleck), approve(), audit(), install():
      Modified by THVV for NSS.
  2) change(75-01-01,VanVleck), approve(), audit(), install():
      Modified throughout 1975 by THVV and BSG for NSS.
  3) change(77-03-01,VanVleck), approve(), audit(), install():
      Modified for more vol maps than will fit in one segment.
  4) change(78-07-01,Greenberg), approve(), audit(), install():
      Modified for MANY hardcore partitions.
  5) change(79-02-01,MJordan), approve(), audit(), install():
      Modified by Michael R. Jordan for MSU500 support.
  6) change(79-04-01,MJordan), approve(), audit(), install():
      Modified for proper MSU500/501/509 initialization, and to detect
      some configuration errors.
  7) change(80-11-27,Sibert), approve(), audit(), install():
      Modified by W. Olin Sibert to split from old init_pvt (to which
      earlier history refers).
  8) change(80-11-28,Sibert), approve(), audit(), install():
      Modified for Bootload Multics and more error detection.
  9) change(82-07-01,Margulies), approve(), audit(), install():
      Modified by BIM to remove references to fsmap and fsdct.
 10) change(82-10-01,Margulies), approve(), audit(), install():
      Modified to return error code if the RPV takes I/O errors.
 11) change(83-03-01,Loepere), approve(), audit(), install():
      Modified by KPL to find or create bce and file partitions.
 12) change(84-03-01,Loepere), approve(), audit(), install():
      Modified to do the right thing on bce passes wrt other hardcore part
      disks.
 13) change(84-09-01,ABall), approve(), audit(), install():
      Modified by Allen Ball to have it check in each pass that the rpv
      in sys_boot_info matched that on the config card.
 14) change(84-12-01,Loepere), approve(), audit(), install():
      Modified by Keith Loepere to add LOG partition to the list of partitions
      to be created on first bootload.
 15) change(85-03-28,Margulies), approve(), audit(), install():
      Modified for root pv's without partitions.
 16) change(85-12-05,Lippard), approve(85-12-02,MCR7309),
     audit(86-07-08,GDixon), install(86-07-17,MR12.0-1097):
      Modified by Jim Lippard to set new pvt bit (root_lv) for all
      root pv's so that accept_rpv will accept root pv's without
      partitions.
 17) change(85-12-20,Fawcett), approve(86-04-11,MCR7383),
     audit(86-07-08,GDixon), install(86-07-17,MR12.0-1097):
     Add subvolume support.
 18) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-17,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */

/* format: style2 */

init_root_vols:
     procedure (code);

	dcl     code		 fixed bin (35) parameter;

	dcl     1 root_vol_loc_info	 aligned,		/* Array of locations for root volumes */
		2 roots		 (20),
		  3 subsys	 char (4),	/* Subsystem and drive number for each volume */
		  3 drive		 fixed bin,
		  3 subvol	 fixed bin;	/* with an HC partition */

	dcl     subsys_name		 char (4) aligned;
	dcl     problem		 char (64);
	dcl     drive_name		 char (4) aligned;
	dcl     drive_no		 fixed bin (8) unal;
	dcl     sv_no		 fixed bin;
	dcl     n_roots_found	 fixed bin;	/* Number of volumes defined on ROOT card(s) */
	dcl     curtime		 fixed bin (71);	/* When we got started */
	dcl     sv_idx		 fixed bin;
	dcl     root_idx		 fixed bin;
	dcl     vol_idx		 fixed bin;

	dcl     tx		 fixed bin;

	dcl     1 LABEL		 aligned like label;


	dcl     sst$root_pvtx	 fixed bin external static;
	dcl     pvt$root_pvtx	 fixed bin external static;
	dcl     pvt$root_pvid	 bit (36) aligned external static;
	dcl     pvt$root_lvid	 bit (36) aligned external static;
	dcl     pvt$prev_shutdown_state
				 fixed bin external static;
	dcl     pvt$prev_esd_state	 fixed bin external static;
	dcl     pvt$disk_table_vtocx	 fixed bin external static;
	dcl     pvt$disk_table_uid	 bit (36) aligned external static;
	dcl     pvt$n_entries	 fixed bin external static;
	dcl     pvt$root_vtocx	 fixed bin external static;

	dcl     config_$find	 entry (char (4) aligned, pointer);

	dcl     init_empty_root	 entry (fixed bin, fixed bin (35));
	dcl     init_hc_part	 entry (fixed bin, fixed bin (18), fixed bin (18));
	dcl     make_sdw$thread_hcp	 entry (fixed bin);
	dcl     read_disk_label	 entry (fixed bin, ptr, char (*), fixed bin (35));
	declare write_disk		 entry (fixed bin, fixed bin (18), ptr, fixed bin (35));

	dcl     (
	        syserr,
	        syserr$error_code
	        )			 entry options (variable);
	dcl     create_rpv_partition	 entry (fixed bin, ptr, fixed bin, char (4), fixed bin (35));

	dcl     (
	        error_table_$bad_arg,
	        error_table_$bad_volid,
	        error_table_$invalid_elsize,
	        error_table_$noalloc,
	        error_table_$noarg,
	        error_table_$nopart,
	        error_table_$too_many_names
	        )			 fixed bin (35) ext static;

	dcl     sys_boot_info$assume_config_deck
				 bit (1) external;
	dcl     sys_boot_info$config_part_frec
				 fixed bin (18) external;
	dcl     sys_boot_info$disk_device_has_sv
				 bit (1) aligned external;
	dcl     sys_boot_info$disk_device_sv
				 fixed bin (17) external;
	dcl     sys_boot_info$disk_device_number
				 fixed bin (6) external;
	dcl     sys_boot_info$rpv_cold_boot
				 bit (1) aligned ext static;

	dcl     ME		 char (16) internal static options (constant) init ("init_root_vols");
	dcl     VALID_NUMBERS	 char (10) int static options (constant) init ("0123456789");


	dcl     (addr, bin, clock, convert, divide, hbound, index, null, rtrim, substr, verify)
				 builtin;


	code = 0;
	curtime = clock ();

	labelp = addr (LABEL);
	pvt_arrayp = addr (pvt$array);


/* Locate all the volumes to have HC parts to be used at bootload time. */

	n_roots_found = 0;
	root_cardp = null;
FIND_MORE_ROOT_CARDS:
	call config_$find (ROOT_CARD_WORD, root_cardp);
	if root_cardp = null
	then goto ALL_ROOT_CARDS_GOTTEN;

	do vol_idx = 1 to hbound (root_card_array.volume, 1);
						/* Scan the card. */
	     subsys_name = root_card.volume (vol_idx).subsystem;
						/* Pick up ssname */
	     drive_name = root_card.volume (vol_idx).drive;

	     sv_idx = verify (rtrim (drive_name), VALID_NUMBERS);
						/* check for non-numeric character */
	     if sv_idx = 0
	     then do;				/* non-subvolume device */
		     drive_no = bin (drive_name, 17);
		     sv_no = -1;
		end;
	     else if sv_idx > 1
	     then do;				/* possible subvolume device */
		     drive_no = bin (substr (drive_name, 1, sv_idx - 1), 17);
		     sv_no = index (valid_sv_string, substr (rtrim (drive_name), sv_idx)) - 1;
		     if sv_no = -1			/* bad subvolume indicator */
		     then goto invalid_drive;
		end;
	     else do;				/* no valid drive number */
invalid_drive:
		     call syserr (CRASH, "^a: Invalid device on root card ^a_^a.", ME, subsys_name, drive_name);
		     code = error_table_$bad_arg;	/* In case someone types GO */
		     goto RETURN;
		end;

	     n_roots_found = n_roots_found + 1;

	     if n_roots_found > hbound (root_vol_loc_info.roots, 1)
	     then do;
		     call syserr (CRASH, "^a: Maximum of ^d RLV vols has been exceeded.", ME, n_roots_found - 1);
		     code = error_table_$too_many_names;/* In case someone types GO */
		     goto RETURN;
		end;

	     do root_idx = 1 to n_roots_found - 1;	/* Check for duplications */
		if (subsys_name = root_vol_loc_info.roots (root_idx).subsys)
		     & (drive_no = root_vol_loc_info (root_idx).drive) & (sv_no = root_vol_loc_info (root_idx).subvol)
		then do;
			call syserr (CRASH, "^a: ^a_^a appears twice on root cards.", ME, subsys_name, drive_name);
			code = error_table_$bad_arg;	/* In case someone types GO */
			goto RETURN;
		     end;
	     end;

	     root_vol_loc_info.roots (n_roots_found).subsys = subsys_name;
						/* Copy to table. */
	     root_vol_loc_info.roots (n_roots_found).drive = drive_no;
	     root_vol_loc_info.roots (n_roots_found).subvol = sv_no;
						/* Check to make sure that it matches the one in sys_boot_info. */
	     if n_roots_found = 1
	     then if ^sys_boot_info$assume_config_deck
		     & ((sys_boot_info$disk_device_number ^= root_vol_loc_info.roots (1).drive)
		     | (sys_boot_info$disk_device_sv ^= root_vol_loc_info.roots (1).subvol))
		then do;

			call syserr (CRASH,
			     "^a: RPV specified in the configuration deck (^a) does not match sys_boot_info (^d^[^a^]).",
			     ME, drive_name, sys_boot_info$disk_device_number, sys_boot_info$disk_device_has_sv,
			     sys_boot_info$disk_device_sv);
			code = error_table_$bad_arg;	/* In case someone types GO */
			goto RETURN;
		     end;
	     if sys_info$collection_1_phase ^= SERVICE_INITIALIZATION
	     then go to ALL_ROOT_CARDS_GOTTEN;		/* only one root vol (rpv) for bce */
	end;

	goto FIND_MORE_ROOT_CARDS;


ALL_ROOT_CARDS_GOTTEN:
	if n_roots_found = 0
	then do;
		call syserr (CRASH, "^a: No root card.", ME);
		code = error_table_$noarg;		/* In case someone types GO */
		goto RETURN;
	     end;

	do root_idx = 1 to n_roots_found;		/* Now, find all the HC partitions */
	     subsys_name = root_vol_loc_info (root_idx).subsys;
						/* Copy out for easier reference */
	     drive_no = root_vol_loc_info (root_idx).drive;
	     sv_no = root_vol_loc_info (root_idx).subvol;
	     do tx = 1 to pvt$n_entries;		/* Find the right pvte */
		pvtep = addr (pvt_array (tx));
		if (pvte.devname = subsys_name) & (pvte.logical_area_number = drive_no) & (pvte.sv_num = sv_no)
		then goto FOUND_ROOT_VOL_PVTE;	/* This is the one */
	     end;

	     call syserr (CRASH, "^a: root card specifies nonexistent drive ^a.", ME,
		DEVICE_NAME (subsys_name, drive_no, sv_no));
	     code = error_table_$bad_arg;		/* In case someone types GO */
	     goto RETURN;

FOUND_ROOT_VOL_PVTE:
	     if root_idx = 1
	     then pvte.rpv = "1"b;			/* RPV is defined to be first vol named on */
						/* the first ROOT card. */
	     pvte.root_lv = "1"b;

	     call INIT_HC_PART;			/* Enable the supervisor paging partition */

	     if pvte.rpv
	     then call ENABLE_RPV;			/* Set special info if this is the RPV */
	end;					/* Of loop through root vol specs */

	if pvt$root_vtocx = -1
	then do;					/* Did we find the root? */
		call syserr (CRASH, "^a: RPV not found.", ME);
		code = error_table_$bad_arg;		/* In case someone types GO */
		goto RETURN;
	     end;
RETURN:
	return;					/* all done */


INIT_HC_PART:
     proc;

/* Seek out a hardcore partition on this volume.	There ought be one.  
   Allocate and initialize the map for that hc part, thread into PVT. */

	dcl     part_idx		 fixed bin;
	dcl     bce_part_idx	 fixed bin;
	dcl     file_part_idx	 fixed bin;
	dcl     log_part_idx	 fixed bin;
	dcl     baseadd		 fixed bin (18);
	dcl     totrec		 fixed bin (18);
	dcl     hc_part_idx		 fixed bin;
	dcl     DEFAULT_BCE_PART_SIZE	 fixed bin init (2200) static options (constant);
	dcl     DEFAULT_FILE_PART_SIZE fixed bin init (255) static options (constant);
	dcl     DEFAULT_LOG_PART_SIZE	 fixed bin init (256) static options (constant);

	if sys_boot_info$rpv_cold_boot & pvte.rpv
	then do;					/* Init the vol. */
		call init_empty_root (tx, code);
		if code ^= 0			/* I/O error on drive */
		then go to RETURN;

/* sys_boot_info$rpv_cold_boot is turned off in real_initializer, after */
/* the config deck is written onto the RPV. */

	     end;

READ_LABEL:
	call read_disk_label (tx, labelp, problem, code);
	if code ^= 0				/* guaranteed to mean that there was an I/O error */
	then do;
		call syserr$error_code (CRASH, code, "^a: Error reading ^a label. ^a", ME,
		     DEVICE_NAME (pvte.devname, pvte.logical_area_number, pvte.sv_num), problem);
		go to READ_LABEL;			/* retry read if "go" typed. */
	     end;
	hc_part_idx = PART_SEARCH ("hc", labelp);

	if hc_part_idx = -1 & pvte.rpv
	then do;
		call syserr (CRASH, "^a: No part hc on RPV volume ^a.", ME,
		     DEVICE_NAME (pvte.devname, pvte.logical_area_number, pvte.sv_num));
		code = error_table_$nopart;		/* In case someone types GO */
		goto RETURN;
	     end;

	if pvte.rpv
	then do;
		part_idx = PART_SEARCH ("conf", labelp);
		if part_idx = -1
		then call ADD_CONF_PART (hc_part_idx, labelp);
		else sys_boot_info$config_part_frec = labelp -> label.parts (part_idx).frec;

		bce_part_idx = PART_SEARCH ("bce ", labelp);
		if bce_part_idx ^= -1
		then if labelp -> label.parts (bce_part_idx).nrec < BCE_PART_LTH
		     then do;
			     call syserr (CRASH, "^a: bce partition is ^d records, must be ^d.", ME,
				labelp -> label.parts (bce_part_idx).nrec, BCE_PART_LTH);
			     code = error_table_$invalid_elsize;
						/* In case someone types GO */
			     goto RETURN;
			end;

		file_part_idx = PART_SEARCH ("file", labelp);

		log_part_idx = PART_SEARCH ("log ", labelp);

		if bce_part_idx = -1 | file_part_idx = -1 | log_part_idx = -1
		then call ADD_BM_PARTS;
	     end;

/* Copy parameters for HC part into PVT */

	if hc_part_idx > 0 /* yes, it has a partition */ & sys_info$collection_1_phase = SERVICE_INITIALIZATION
	then do;
		baseadd = label.parts (hc_part_idx).frec;
		totrec = label.parts (hc_part_idx).nrec;

		call init_hc_part (tx, baseadd, totrec);

/* Thread the hardcore part PVTE's. */

		call make_sdw$thread_hcp (tx);

		pvte.hc_part_used = "1"b;		/* See accept_fs_disk */
	     end;

	pvte.permanent = "1"b;			/* No demount. */
	return;


ADD_CONF_PART:
     procedure (hc_partx, labelp);
	declare hc_partx		 fixed bin;
	declare labelp		 pointer;
	declare conf_partx		 fixed bin;

	call syserr (ANNOUNCE, "^a: Adding config (conf) partition to rpv.", ME);

	conf_partx = labelp -> label.nparts + 1;
	if conf_partx > hbound (labelp -> label.parts, 1)
	then do;
		call syserr (CRASH, "^a: No room in rpv label for conf partition.", ME);
		code = error_table_$noalloc;		/* In case someone types GO */
		goto RETURN;
	     end;
	labelp -> label.nparts = conf_partx;
	labelp -> label.parts (conf_partx).part = "conf";
	labelp -> label.parts (conf_partx).frec =
	     (labelp -> label.parts (hc_partx).frec + labelp -> label.parts (hc_partx).nrec) - 4;
						/* shave off */
	labelp -> label.parts (conf_partx).nrec = 4;
	labelp -> label.parts (hc_partx).nrec = labelp -> label.parts (hc_partx).nrec - 4;
WRITE_LABEL:
	call write_disk (tx, (LABEL_ADDR), labelp, code);
	if code ^= 0
	then do;
		call syserr$error_code (CRASH, code, "^a: Error writing rpv label on ^a.", ME,
		     DEVICE_NAME (pvte.devname, pvte.logical_area_number, pvte.sv_num));
		goto WRITE_LABEL;			/* retry write, if "go" typed. */
	     end;
	sys_boot_info$config_part_frec = labelp -> label.parts (conf_partx).frec;
	return;
     end ADD_CONF_PART;

ADD_BM_PARTS:
     proc;
	dcl     first_new_part	 char (4);	/* name of first part to add */
	dcl     last_part_idx	 fixed bin;	/* index in label for last part to add */
	dcl     partition_start	 fixed bin;	/* record number thereof */
	dcl     total_part_size	 fixed bin;	/* to be added */

	call syserr (ANNOUNCE, "^a: Adding ^[bce ^;^]^[file ^;^]^[log ^;^]partition(s) to rpv.", ME, bce_part_idx = -1,
	     file_part_idx = -1, log_part_idx = -1);

	total_part_size = 0;
	first_new_part = "";
	last_part_idx = labelp -> label.nparts;
	if bce_part_idx = -1
	then do;
		total_part_size = total_part_size + DEFAULT_BCE_PART_SIZE;
		last_part_idx = last_part_idx + 1;
		if first_new_part = ""
		then first_new_part = "bce ";
	     end;
	if file_part_idx = -1
	then do;
		total_part_size = total_part_size + DEFAULT_FILE_PART_SIZE;
		last_part_idx = last_part_idx + 1;
		if first_new_part = ""
		then first_new_part = "file";
	     end;
	if log_part_idx = -1
	then do;
		total_part_size = total_part_size + DEFAULT_LOG_PART_SIZE;
		last_part_idx = last_part_idx + 1;
		if first_new_part = ""
		then first_new_part = "log ";
	     end;
	if last_part_idx > hbound (labelp -> label.parts, 1)
	then do;
		call syserr (CRASH, "^a: No room in rpv label for partitions.", ME);
		code = error_table_$noalloc;		/* In case someone types GO */
		goto RETURN;
	     end;

	call create_rpv_partition (tx, labelp, total_part_size, first_new_part, code);
	if code ^= 0
	then do;
		call syserr$error_code (CRASH, code, "^a: Error adding partitions to rpv on ^a.", ME,
		     DEVICE_NAME (pvte.devname, pvte.logical_area_number, pvte.sv_num));
		goto RETURN;			/* In case someone types GO */
	     end;

/* Trim space from one partition for others. */

	partition_start = labelp -> label.parts (labelp -> label.nparts).frec;
	labelp -> label.nparts = labelp -> label.nparts - 1;
	if bce_part_idx = -1
	then do;
		labelp -> label.nparts, bce_part_idx = labelp -> label.nparts + 1;
		labelp -> label.parts (bce_part_idx).nrec = DEFAULT_BCE_PART_SIZE;
		labelp -> label.parts (bce_part_idx).part = "bce ";
		labelp -> label.parts (bce_part_idx).frec = partition_start;
		partition_start = partition_start + DEFAULT_BCE_PART_SIZE;
	     end;
	if file_part_idx = -1
	then do;
		labelp -> label.nparts, file_part_idx = labelp -> label.nparts + 1;
		labelp -> label.parts (file_part_idx).nrec = DEFAULT_FILE_PART_SIZE;
		labelp -> label.parts (file_part_idx).part = "file";
		labelp -> label.parts (file_part_idx).frec = partition_start;
		partition_start = partition_start + DEFAULT_FILE_PART_SIZE;
	     end;
	if log_part_idx = -1
	then do;
		labelp -> label.nparts, log_part_idx = labelp -> label.nparts + 1;
		labelp -> label.parts (log_part_idx).nrec = DEFAULT_LOG_PART_SIZE;
		labelp -> label.parts (log_part_idx).part = "log ";
		labelp -> label.parts (log_part_idx).frec = partition_start;
		partition_start = partition_start + DEFAULT_LOG_PART_SIZE;
	     end;

WRITE_LABEL:
	call write_disk (tx, (LABEL_ADDR), labelp, code); /* show trimmed part to disk */
	if code ^= 0
	then do;
		call syserr$error_code (CRASH, code, "^a: Error writing rpv label on ^a.", ME,
		     DEVICE_NAME (pvte.devname, pvte.logical_area_number, pvte.sv_num));
		goto WRITE_LABEL;			/* retry write, if "go" typed. */
	     end;
     end ADD_BM_PARTS;
     end INIT_HC_PART;


ENABLE_RPV:
     procedure;

/* This procedure is called to set up the RPV */
/* Implicit  parameters: tx, device_type */
/* Also fills the location of the bce partition in sys_boot_info */


	dcl     bce_partx		 fixed bin;
	dcl     sys_boot_info$bce_part_frec
				 external fixed bin (18);
	dcl     sys_boot_info$bce_part_nrec
				 external fixed bin (18);

	pvt$root_pvtx = tx;
	sst$root_pvtx = tx;

READ_RPV_LABEL:
	call read_disk_label (tx, labelp, problem, code); /* Get label from disk pack */
	if code ^= 0
	then do;
		call syserr$error_code (CRASH, code, "^a: Error reading RPV label on ^a. ^a", ME,
		     DEVICE_NAME (pvte.devname, pvte.logical_area_number, pvte.sv_num), problem);
		go to READ_RPV_LABEL;		/* retry read if "go" typed. */
	     end;

	if ^label.root.here
	then do;
		call syserr (CRASH, "^a: ^a is not the rpv, but rather is ^a.", ME,
		     DEVICE_NAME (pvte.devname, pvte.logical_area_number, pvte.sv_num), label.pv_name);
		code = error_table_$bad_volid;	/* In case someone types GO */
		go to RETURN;
	     end;

	bce_partx = PART_SEARCH ("bce ", labelp);
	if bce_partx = -1
	then sys_boot_info$bce_part_frec = -1;		/* None defined */
	else do;
		sys_boot_info$bce_part_frec = label.parts (bce_partx).frec;
		sys_boot_info$bce_part_nrec = label.parts (bce_partx).nrec;
	     end;

	pvt$root_pvid = label.pvid;			/* This IS the root */
	pvte.pvid = label.pvid;
	pvte.lvid = label.lvid;
	pvt$root_vtocx = label.root.root_vtocx;
	pvt$root_lvid = label.lvid;

	pvt$prev_shutdown_state = label.root.shutdown_state;
	pvt$prev_esd_state = label.root.esd_state;

	pvt$disk_table_vtocx = label.root.disk_table_vtocx;
	pvt$disk_table_uid = label.root.disk_table_uid;

	return;
     end ENABLE_RPV;
%page;
DEVICE_NAME:
     procedure (subsys, drive, sv) returns (char (8));
	declare subsys		 char (4) aligned;
	declare drive		 fixed bin (8) unal;
	declare p99		 picture "99";
	declare sv		 fixed bin;
	if sv = -1
	then return (subsys || "_" || convert (p99, drive) || " ");
	else return (subsys || "_" || convert (p99, drive) || valid_sv_array (sv));
     end DEVICE_NAME;


PART_SEARCH:
     procedure (part, labelp) returns (fixed bin);
	declare part		 character (4);
	declare part_idx		 fixed bin;
	declare labelp		 pointer;

	do part_idx = 1 to labelp -> label.nparts while (labelp -> label.parts (part_idx).part ^= part);
						/* Seek out HC part. */
	end;
	if part_idx <= labelp -> label.nparts
	then return (part_idx);
	else return (-1);
     end PART_SEARCH;

/* format: off */
%page; %include disk_pack;
%page; %include pvt;
%page; %include pvte;
%page; %include collection_1_phases;
%page; %include config_root_card;
%page; %include syserr_constants;
%page; %include fs_vol_label;
%page; %include fs_dev_types;
%page; %include bce_partition_layout;

/* BEGIN MESSAGE DOCUMENTATION

     Message:
     init_root_vols: Invalid device on root card DISK_VOL.

     S: $crash

     T: $init

     M: A root card has been found with an invalid DISK_VOL.

     A: Change the config deck and try again.

     Message:
     init_root_vols: Maximum of LIMIT RLV vols has been exceeded.

     S: $crash

     T: $init

     M: The "root" card in the config deck specified more RLV volumes
     than the system can handle.

     A: Change the config deck and try again.

     Message:
     init_root_vols: DISK_VOL appears twice on root cards.

     S: $crash

     T: $init

     M: The volume DISK_VOL appears more than once on the ROOT
     config card(s).

     A: Fix the config deck and try again.

     Message:
     init_root_vols: RPV specified in the configuration deck (DRIVE) does not match sys_boot_info (DRIVE).

     S: $crash

     T: $init

     M: The RPV defined on the root card is not the same as the RPV
     that is currently being used.

     A: Fix the config deck and try again.

     Message:
     init_root_vols: No root card.

     S: $crash

     T: $init

     M: No "root" card(s) were found in the config deck. At least
     one must be present, defining the RPV and other RLV volumes.

     A: Fix the config deck and reboot.

     Message:
     init_root_vols: root card specifies nonexistent drive DISK_VOL.

     S: $crash

     T: $init

     M: The volume DISK_VOL, specified in the config deck, is not
     defined by the prph dskX cards.

     A: Fix the config deck and reboot.

     Message:
     init_root_vols: RPV not found.

     S: $crash

     T: $init

     M: None of the disk volumes specified in the "root" card(s)
     admitted to being the RPV.

     A: Check to be sure the drive on which the RPV is mounted is specified
     first on the "root" card(s).

     Message:
     init_root_vols: Error reading DISK_VOL label. PROBLEM ERROR_MESSAGE

     S: $crash

     T: $init

     M: An error has been detected attempting to read the label
     of DISK_VOL.

     A: Correct problem and type "go" to retry the read.

     Message:
     init_root_vols: No part hc on RPV volume DISK_VOL.

     S: $crash

     T: $init

     M: Disk DISK_VOL was specified on a "root" card as the RPV,
     but does not have a hardcore (hc) partition. 

     A: The "root" card is incorrect, or the wrong pack is mounted on
     the first drive described by the "root" cards.

     Message:
     init_root_vols: bce partition is XXX records, must be YYY.

     S: $crash

     T: $init

     M: The bce partition defined on the rpv is not sufficiently large.

     A: Rebuild the rpv to have a large enough bce partition.
     $contact

     Message:
     init_root_vols: Adding config (conf) partition to rpv.

     S: $info

     T: $init

     M: No conf partition was found on the rpv.  It will be created by
     extracting 4 records from the hc partition.

     A: $ignore

     Message:
     init_root_vols: No room in rpv label for conf partition.

     S: $crash

     T: $info

     M: The partition map for the rpv did not have sufficient room to
     add the conf partition.

     A: The rpv will need to be rebuilt.
     $contact

     Message:
     init_root_vols: Error writing rpv label on DISK_VOL. ERROR_MESSAGE

     S: $crash

     T: $init

     M: An i/o prevented updating the rpv label to show the new partitions.

     A: Correct problem and type "go" to retry the write.

     Message:
     init_root_vols: Adding {bce} {file} {log} partition(s) to rpv.

     S: $info

     T: $init

     M: The rpv does not contain the listed partitions.  The pages of
     the rpv are being arranged to add these partitions.  This operation
     takes several minutes.

     A: $ignore

     Message:
     init_root_vols: No room in rpv label for partitions.

     S: $crash

     T: $init

     M: The rpv label does not have enough room in the partition map for
     the new bce, file or log partitions.

     A: The rpv will need to be rebuilt.
     $contact

     Message:
     init_root_vols: Error adding partitions to rpv on DISK_VOL. ERROR_MESSAGE

     S: $crash

     T: $init

     M: It was not possible to add the new partitions to the rpv.  This
     message will be preceeded by a more informative message.

     A: Depending on the previous message, either a reboot should be
     attempted or the rpv will need to be rebuilt.

     Message:
     init_root_vols: Error reading RPV label on DISK_VOL. PROBLEM ERROR_MESSAGE

     S: $crash

     T: $init

     M: An error has been detected attempting to read the label
     of the RPV.

     A: Correct problem and type "go" to retry the read.

     Message:
     init_root_vols: DISK_VOL is not the rpv, but rather is VOLUME.

     S: $crash

     T: $init

     M: The label for the RPV is inconsistent. label.root.here
     does not agree with other data, or an incorrect pack is
     mounted on the first drive specified by the "root" card.

     A: Reload/restore, or patch the RPV label back together or
     correctly mount the RPV.

END MESSAGE DOCUMENTATION */

end init_root_vols;
