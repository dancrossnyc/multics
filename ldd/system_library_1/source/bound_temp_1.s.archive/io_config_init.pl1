/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(86-01-16,CLJones), install(86-03-21,MR12.0-1033):
     Support FIPS, and add
     a controller entry for FIPS devs.
  2) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */

/* Initialize io_config_data segment from config deck. */
/* Written March 1984 by Chris Jones. */
/* Modified July 1984 by Paul Farley for FIPS devices */
/* Modified June 1985 by Paul Farley to add a controller entry for FIPS devs */
/* Modified Sept 1985 by Paul Farley to add a channel & device entries for MCAs */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
io_config_init:
     proc;

dcl	chan_idx		   fixed bin;
dcl	dev_idx		   fixed bin;
dcl	iom_idx		   fixed bin;
dcl	mpc_idx		   fixed bin;

dcl	(i, j)		   fixed bin;

dcl	dev_num		   fixed bin;
dcl	dev_num_string	   pic "99";

dcl	config_$find	   entry (char (4) aligned, ptr);
dcl	config_$find_2	   entry (char (4) aligned, char (4) aligned, ptr);
dcl	ioi_config$find_base_channel
			   entry (char (8) aligned) returns (char (8) aligned);
dcl	ioi_config$find_controller_card
			   entry (char (8) aligned) returns (ptr);
dcl	syserr		   entry options (variable);


dcl	(addr, divide, hbound, lbound, max, min, null, ptr, substr, translate, unspec)
			   builtin;

/****
      The data structure is built by passing over the config deck.  First all the IOMs are found and put in the
      tables, then a pass is made over the MPCs, filling in controller entries.
      channel entries.  Then a pass is made over prph and chnl cards, filling in
      device entries and channel entries.
****/

	io_config_data_ptr = addr (io_config_data$);
	io_config_device_table_ptr = ptr (io_config_data_ptr, io_config_data.device_table_offset);
	io_config_channel_table_ptr = ptr (io_config_data_ptr, io_config_data.channel_table_offset);
	io_config_controller_table_ptr = ptr (io_config_data_ptr, io_config_data.controller_table_offset);
	io_config_iom_table_ptr = ptr (io_config_data_ptr, io_config_data.iom_table_offset);
	iom_idx, mpc_idx, chan_idx, dev_idx = 0;

	io_config_data.version = IO_CONFIG_DATA_VERSION_1;
	io_config_data.p_clock = 0;
	iom_table.version = IO_CONFIG_IOM_TABLE_VERSION_1;
	unspec (iom_table.iom_entry) = ""b;
	controller_table.version = IO_CONFIG_CONTROLLER_TABLE_VERSION_1;
	unspec (controller_table.controller_entry) = ""b;
	channel_table.version = IO_CONFIG_CHANNEL_TABLE_VERSION_1;
	unspec (channel_table.channel_entry) = ""b;
	device_table.version = IO_CONFIG_DEVICE_TABLE_VERSION_1;
	unspec (device_table.device_entry) = ""b;

/**** IOM loop ****/

	iom_cardp = null ();
	call config_$find (IOM_CARD_WORD, iom_cardp);
	do iom_idx = lbound (iom_table.iom_entry, 1) to hbound (iom_table.iom_entry, 1) while (iom_cardp ^= null ());
	     iom_table.iom_entry (iom_idx).name = substr ("ABCD", iom_card.tag, 1);
	     iom_table.iom_entry (iom_idx).comment = iom_card.model;
	     iom_table.iom_entry (iom_idx).configured = (iom_card.state = "on");
	     if iom_card.model = "imu" | iom_card.model = "iioc" then do;
						/* Create entries for the MCA */
		call fill_in_next_channel_entry (iom_card.tag, 3);
						/* make a channel entry */
		dev_idx = dev_idx + 1;		/* and a device entry */
		device_table.device_entry (dev_idx).name = "mca" || substr ("abcd", iom_card.tag, 1);
		device_table.device_entry (dev_idx).comment = "mca";
		device_table.device_entry (dev_idx).configured = iom_table.iom_entry (iom_idx).configured;
		device_table.device_entry (dev_idx).pchan_idx (1) = channel_idx_from_numbers (iom_card.tag, 3);
	     end;
	     call config_$find (IOM_CARD_WORD, iom_cardp);
	end;

/**** Controller loop */

	mpc_cardp = null ();
	call config_$find (MPC_CARD_WORD, mpc_cardp);
	do mpc_idx = lbound (controller_table.controller_entry, 1)
	     to hbound (controller_table.controller_entry, 1) while (mpc_cardp ^= null ());
	     controller_table.controller_entry (mpc_idx).name = mpc_card.name;
	     controller_table.controller_entry (mpc_idx).comment = "";
	     call config_$find (MPC_CARD_WORD, mpc_cardp);
	end;


/**** PRPH and CHNL loops ****/

/**** First fill in all the channel_table entries. ****/

	prph_cardp = null ();
	call config_$find (PRPH_CARD_WORD, prph_cardp);
	do while (prph_cardp ^= null ());
	     if (device_type (prph_cardp) = "dsk") | (device_type (prph_cardp) = "tap") then do;
/**** There is an assumption here that dsk and tap cards are identically laid out. ****/
		prph_dsk_cardp, prph_tap_cardp = prph_cardp;
		chnl_cardp = null ();
		call config_$find_2 (CHNL_CARD_WORD, prph_card.name, chnl_cardp);
		do i = 0 to prph_dsk_card.nchan - 1;
		     call fill_in_next_channel_entry (prph_dsk_card.iom, prph_dsk_card.chan + i);
		end;
		if chnl_cardp ^= null () then
		     do i = lbound (chnl_card_array.group, 1) to hbound (chnl_card_array.group, 1);
		     do j = 0 to chnl_card_array.group (i).nchan - 1;
			call fill_in_next_channel_entry (chnl_card_array.group (i).iom,
			     chnl_card_array.group (i).chan + j);
		     end;
		end;
	     end;
	     else call fill_in_next_channel_entry (prph_card.iom, prph_card.chan);
	     call config_$find (PRPH_CARD_WORD, prph_cardp);
	end;

	channel_table.n_channels = chan_idx;		/* get_io_segs may have allocated too many */
	call fill_in_base_channel_indices;

/**** Now the device portion of the loop ****/

	begin;

dcl	configured	   bit (1) aligned;
dcl	template_pchan_array   (lbound (null () -> device_entry_template.pchan_idx, 1):
			   hbound (null () -> device_entry_template.pchan_idx, 1)) fixed bin;
dcl	fips		   bit (1) aligned;
dcl	chanid		   char (8) aligned;
dcl	code		   fixed bin (35);

	     prph_cardp = null ();
	     call config_$find (PRPH_CARD_WORD, prph_cardp);
	     do while (prph_cardp ^= null ());
		call io_chnl_util$iom_to_name (prph_card.iom, (prph_card.chan), chanid, code);
		if code ^= 0 then
		     call syserr (CRASH, "io_config_init: Invalid iom or channel number on prph ^a card.",
			prph_card.name);
		ipc_cardp = ioi_config$find_controller_card (chanid);
		if ipc_cardp ^= null () then		/* There may be IPC cards that are not controllers and there for not fips */
		     fips = (ipc_card.type = IPC_FIPS);
		else fips = "0"b;
		prph_dsk_cardp, prph_tap_cardp = prph_cardp;
		chnl_cardp = null ();
		call config_$find_2 (CHNL_CARD_WORD, prph_card.name, chnl_cardp);

		call fill_in_pchan_array;
		configured = "0"b;
		do i = lbound (template_pchan_array, 1) to hbound (template_pchan_array, 1) while (^configured);
		     if template_pchan_array (i) ^= 0 then
			if channel_table.channel_entry (template_pchan_array (i)).configured then
			     configured = "1"b;
		end;

		if (device_type (prph_cardp) = "dsk") | (device_type (prph_cardp) = "tap") then do;
		     dev_idx = dev_idx + 1;
		     if fips then
			device_table.device_entry (dev_idx).name = prph_dsk_card.name;
		     else device_table.device_entry (dev_idx).name = prph_dsk_card.name || "_00";
		     device_table.device_entry (dev_idx).comment = "controller";
		     device_table.device_entry (dev_idx).pchan_idx (*) = template_pchan_array (*);
		     device_table.device_entry (dev_idx).configured = configured;
		     if fips then
			dev_num = 0;		/* devices start at 0 */
		     else dev_num = 1;		/* devices start at 1 */
		     do i = lbound (prph_dsk_card_array.group, 1) to hbound (prph_dsk_card_array.group, 1);
			if prph_dsk_card_array.group (i).model ^= 0 then
			     do dev_num = dev_num to dev_num + prph_dsk_card_array.group (i).ndrives - 1;
			     dev_idx = dev_idx + 1;
			     dev_num_string = dev_num;
			     device_table.device_entry (dev_idx).name = prph_dsk_card.name || "_" || dev_num_string;
			     device_table.device_entry (dev_idx).comment = "";
			     device_table.device_entry (dev_idx).pchan_idx (*) = template_pchan_array (*);
			     device_table.device_entry (dev_idx).configured = configured;
			end;
			else dev_num = dev_num + prph_dsk_card_array.group (i).ndrives;
		     end;
		end;
		else do;
		     dev_idx = dev_idx + 1;
		     device_table.device_entry (dev_idx).name = prph_card.name;
		     device_table.device_entry (dev_idx).comment = "";
		     device_table.device_entry (dev_idx).pchan_idx (*) = template_pchan_array (*);
		     device_table.device_entry (dev_idx).configured = configured;
		end;
		call config_$find (PRPH_CARD_WORD, prph_cardp);
	     end;

fill_in_pchan_array:
     proc;

dcl	pchan_array_idx	   fixed bin;

	template_pchan_array (*) = 0;
	pchan_array_idx = lbound (template_pchan_array, 1);
	if device_type (prph_cardp) = "tap" | device_type (prph_cardp) = "dsk" then do;
	     do j = 0 to prph_dsk_card.nchan - 1;
		call add_to_pchan_array (channel_idx_from_numbers (prph_dsk_card.iom, prph_dsk_card.chan + j));
	     end;
	     if chnl_cardp ^= null () then
		do i = lbound (chnl_card_array.group, 1) to hbound (chnl_card_array.group, 1);
		do j = 0 to chnl_card_array.group (i).nchan - 1;
		     call add_to_pchan_array (channel_table
			.
			channel_entry (
			channel_idx_from_numbers (chnl_card_array.group (i).iom, chnl_card_array.group (i).chan + j)
			).base_channel_idx);
		end;
	     end;
	end;
	else call add_to_pchan_array (channel_table
		.channel_entry (channel_idx_from_numbers (prph_card.iom, (prph_card.chan))).base_channel_idx);

add_to_pchan_array:
	proc (chan_idx);

dcl	chan_idx		   fixed bin parameter;

dcl	i		   fixed bin;
dcl	pchan_idx		   fixed bin;

	     pchan_idx = channel_table.channel_entry (chan_idx).base_channel_idx;
	     do i = lbound (template_pchan_array, 1) to pchan_array_idx - 1;
		if template_pchan_array (i) = pchan_idx then
		     return;
	     end;
	     template_pchan_array (pchan_array_idx) = pchan_idx;
	     pchan_array_idx = pchan_array_idx + 1;

	end add_to_pchan_array;

     end fill_in_pchan_array;

	end;

fill_in_next_channel_entry:
     proc (iom, chan);

dcl	iom		   fixed bin (3) parameter;
dcl	chan		   fixed bin (8) parameter;

dcl	chanid		   char (8) aligned;
dcl	i		   fixed bin;

	i = channel_idx_from_numbers (iom, (chan));
	if (i >= lbound (channel_table.channel_entry, 1)) & (i <= chan_idx) then
	     return;				/* already in table */

	chan_idx = chan_idx + 1;			/* use next entry */
	call io_chnl_util$iom_to_name (iom, (chan), chanid, (0));
	channel_table.channel_entry (chan_idx).name = chanid;
	channel_table.channel_entry (chan_idx).comment = "";
	channel_table.channel_entry (chan_idx).controller_idx = controller_idx_from_chanid (chanid);
	i = iom_idx_from_chanid (chanid);
	channel_table.channel_entry (chan_idx).iom_idx = i;
	if iom_table.iom_entry (i).configured then do;
	     channel_table.channel_entry (chan_idx).configured = "1"b;
	     iom_table.iom_entry (i).n_configured_channels = iom_table.iom_entry (i).n_configured_channels + 1;
	end;

     end fill_in_next_channel_entry;

fill_in_base_channel_indices:
     proc;

dcl	chan_idx		   fixed bin;
dcl	chanid		   char (8) aligned;

	do chan_idx = lbound (channel_table.channel_entry, 1) to hbound (channel_table.channel_entry, 1);
	     chanid = ioi_config$find_base_channel (channel_table.channel_entry (chan_idx).name);
	     if chanid = "" then
		chanid = channel_table.channel_entry (chan_idx).name;
	     channel_table.channel_entry (chan_idx).base_channel_idx = channel_idx_from_chanid (chanid);
	end;

     end fill_in_base_channel_indices;

iom_idx_from_chanid:
     proc (chanid) returns (fixed bin);

dcl	chanid		   char (8) aligned parameter;

dcl	iom_idx		   fixed bin;

dcl	iom_name		   char (8) aligned;

	iom_name = translate (substr (chanid, 1, 1), "ABCD", "abcd");
	do iom_idx = hbound (iom_table.iom_entry, 1) to lbound (iom_table.iom_entry, 1) by -1
	     while (iom_table.iom_entry (iom_idx).name ^= iom_name);
	end;
	return (iom_idx);

     end iom_idx_from_chanid;

controller_idx_from_chanid:
     proc (chanid) returns (fixed bin);

dcl	chanid		   char (8) aligned;

	mpc_cardp = ioi_config$find_controller_card (chanid);
	if mpc_cardp = null () then
	     return (lbound (controller_table.controller_entry, 1) - 1);

	do mpc_idx = hbound (controller_table.controller_entry, 1) to lbound (controller_table.controller_entry, 1)
	     by -1 while (controller_table.controller_entry (mpc_idx).name ^= mpc_card.name);
	end;
	return (mpc_idx);

     end controller_idx_from_chanid;

channel_idx_from_numbers:
     proc (iom, chan) returns (fixed bin);

dcl	iom		   fixed bin (3);
dcl	chan		   fixed bin (9);

dcl	chanid		   char (8) aligned;

	call io_chnl_util$iom_to_name (iom, (chan), chanid, (0));
	goto channel_idx_common;

channel_idx_from_chanid:
     entry (arg_chanid) returns (fixed bin);

dcl	arg_chanid	   char (8) aligned;

dcl	chan_idx		   fixed bin;

	chanid = arg_chanid;
channel_idx_common:
	do chan_idx = hbound (channel_table.channel_entry, 1) to lbound (channel_table.channel_entry, 1) by -1
	     while (chanid ^= channel_table.channel_entry (chan_idx).name);
	end;
	return (chan_idx);

     end channel_idx_from_numbers;

device_type:
     proc (cardp) returns (char (3));

dcl	cardp		   ptr parameter;

	return (substr (cardp -> prph_card.name, 1, 3));

     end device_type;

/* format: off */
%include config_chnl_card; %page;
%include config_iom_card; %page;
%include config_ipc_card; %page;
%include config_mpc_card; %page;
%include config_prph_card; %page;
%include config_prph_dsk_card; %page;
%include config_prph_tap_card; %page;
%include io_chnl_util_dcls; %page;
%include io_config_data; %page;
%include syserr_constants; %page;

/* BEGIN MESSAGE DOCUMENTATION


    Message:
    io_config_init: Invalid iom or channel number on prph NAME card.

    S:    $crash

    T:	$init

    M:    The iom number or the channel number is invalid on the prph card
    that defines NAME. 

    A:    Fix the config deck.

   END MESSAGE DOCUMENTATION */

/* format: on */

     end io_config_init;
