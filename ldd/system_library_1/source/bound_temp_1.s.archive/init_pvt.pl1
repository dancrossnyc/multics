/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(86-03-08,CLJones), install(86-03-21,MR12.0-1033):
     Add IPC FIPS card and
     allow FIPS device number zero.
  2) change(86-01-09,Fawcett), approve(86-04-11,MCR7383),
     audit(86-07-07,GDixon), install(86-07-17,MR12.0-1097):
     Add subvolume support for MSU3380 and MSU3390.
  3) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-17,MR12.0-1091):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* format: style2 */
init_pvt:
     procedure;

/* format: off */
/* *	INIT_PVT
   *
   *	This procedure initializes the Physical Volume Table to describe all the configured
   *	disk drives. It does this by looking at all the PRPH DSKx cards in the config deck.
   *	It expect the PVT to have already been allocated by get_io_segs, which went through
   *	much the same sort of drive-counting exercise to do so. This procedure does no I/O,
   *	but only sets up the table. It is equivalent in function to the early part of the
   *	old init_pvt, which was split into many separate programs.
   *
   *       HISTORY
   *      
   *	Keith Loepere 10/83 to not set write_limit for early initialization.
   *	E. N. Kittlitz 9/83 to allow drives up to 63, 32 drives per ss.
   *      BIM 7/82 to merge WOS's changes back against stocks and NPML.
   *      collect_free_core called from real_initializer, etc.
   *
   *      February 1982 by J. Bongiovanni for record stocks
   *      June 1981 by C. Hornig to eliminate PML.
   *      Modified 12/21/80 WOS to set sst.write_limit from number of disk subsystems (moved
   *        from make_segs_paged), and to zero fsmap SDWs on entry to allow for multiple calls.
   *	Modified 11/28/80, W. Olin Sibert, for Bootload Multics, and better error detection.
   *	Modified 11/27/80, WOS, to split from old init_pvt (to which earlier history refers)
   *	Modified	4/79, by Michael R. Jordan, for proper MSU500/501/509 initialization,
   *	   and to detect some configuration errors.
   *	Modified	2/79, by Michael R. Jordan, for MSU500 support.
   *	Modified	7/78, by BSG, for MANY hardcore partitions
   *	Modified	3/77, by THVV, for more vol maps than will fit in one segment
   *	Modified	6/76, by D. R. Vinograd, to initialize Volume Dumper variables
   *	Modified throughout 1975, by THVV & BSG, for NSS.
   *	Modified 12/74, by THVV, for NSS
   */
/* format: on */

	dcl     char4		 char (4) aligned;
	dcl     dcp		 (32) pointer unaligned;
						/* Array of pointers to PRPH DSKx card for each subsystem */

	dcl     device_type		 fixed bin;
	dcl     drive_idx		 fixed bin;
	dcl     driveno		 fixed bin;	/* Index of drive being configured */
	dcl     group_idx		 fixed bin;
	dcl     max_driveno		 fixed bin;
	dcl     nd		 fixed bin;	/* Number of disk subsystems */
	dcl     pri_pvtep		 ptr;
	dcl     pri_tx		 fixed bin;
	dcl     partition		 char (4);
	dcl     ss_drive_count	 fixed bin;	/* number of disks in subsystem under construction */
	dcl     subsys		 (32) char (4) aligned;
						/* Array of subsystem names */
	dcl     subsys_idx		 fixed bin;
	dcl     sv_cur		 fixed bin;
	dcl     swap		 bit (1) aligned;
	dcl     tx		 fixed bin;	/* PVTX of PVTE currently being assigned */

	dcl     sst$write_limit	 fixed bin (35) ext static;

	dcl     config_$find	 entry (char (4) aligned, ptr);
	dcl     config_$find_parm	 entry (char (4) aligned, ptr);

	dcl     page$init		 ext entry (fixed bin, ptr);
	dcl     syserr		 entry options (variable);

	dcl     WHOAMI		 char (32) internal static options (constant) init ("init_pvt");
	dcl     MAX_DRIVES_PER_SUBSYSTEM
				 fixed bin init (32) int static options (constant);

	dcl     (
	        VOLMAP_LOCK_WAIT_CONSTANT
				 init ("444000000000"b3),
	        VOLMAP_IDLE_WAIT_CONSTANT
				 init ("445000000000"b3),
	        VTOC_MAP_LOCK_WAIT_CONSTANT
				 init ("446000000000"b3)
	        )			 bit (36) aligned int static options (constant);


	dcl     (addr, addrel, clock, divide, hbound, max, null, ptr, size, substr)
				 builtin;


%page;
/* Check setting and operation of system clock */

/* Initialization */

	pvtp = addr (pvt$);				/* Also locate world */
	pvt_arrayp = addr (pvt.array);
	pvt.time_of_bootload = clock ();
	pvt.volmap_lock_wait_constant = VOLMAP_LOCK_WAIT_CONSTANT;
	pvt.volmap_idle_wait_constant = VOLMAP_IDLE_WAIT_CONSTANT;
	pvt.vtoc_map_lock_wait_constant = VTOC_MAP_LOCK_WAIT_CONSTANT;

	pvt.root_pvid = ""b;			/* Initialize root id */
	pvt.root_pvtx = -1;
	pvt.root_vtocx = -1;			/* not found it yet */

/* Find all PRPH DSKn cards, and generate the PVT indices. */

	nd = 0;					/* Count subsystems */
	prph_dsk_cardp = null;
NEXT_DISK_CARD:
	call config_$find (PRPH_CARD_WORD, prph_dsk_cardp);
						/* Find subsystem description */
	if prph_dsk_cardp ^= null
	then do;					/* Count up this subsystem */
		if substr (prph_dsk_card.name, 1, 3) ^= "dsk"
		then goto NEXT_DISK_CARD;

		do subsys_idx = 1 to nd;		/* Check for duplicates */
		     if subsys (subsys_idx) = prph_dsk_card.name
		     then call syserr (CRASH, "^a: Duplicate prph ^a card.", WHOAMI, prph_dsk_card.name);
		end;

		nd = nd + 1;			/* Found appropriate card. */
		if nd > hbound (subsys, 1)
		then /* Too many subsystems configured. */
		     call syserr (CRASH, "^a: Too many disk subsystems configured. Limit is ^d.", WHOAMI,
			hbound (subsys, 1));

		subsys (nd) = prph_dsk_card.name;	/* Save in scratch */
		dcp (nd) = prph_dsk_cardp;		/* .. */
		goto NEXT_DISK_CARD;		/* Scan whole deck. */
	     end;

	if nd = 0
	then /* Must be some subsystems */
	     call syserr (CRASH, "^a: no PRPH DSKn cards", WHOAMI);

/* Sort the subsystems into canonical order */

	swap = "1"b;				/* Simple interchange sort */
	do while (swap);				/* .. often there will be only one */
	     swap = "0"b;
	     do subsys_idx = 1 to nd - 1;
		if subsys (subsys_idx) > subsys (subsys_idx + 1)
		then do;
			swap = "1"b;		/* interchange */
			prph_dsk_cardp = dcp (subsys_idx);
			dcp (subsys_idx) = dcp (subsys_idx + 1);
			dcp (subsys_idx + 1) = prph_dsk_cardp;

			char4 = subsys (subsys_idx);
			subsys (subsys_idx) = subsys (subsys_idx + 1);
			subsys (subsys_idx + 1) = char4;
		     end;
	     end;
	end;


/* Setup pointers in stock_seg before initializing any hardcore partition */

	stock_segp = addr (stock_seg$);
	stock_seg.record_stock_arrayp = ptr (stock_segp, size (stock_seg));
	stock_seg.vtoce_stock_arrayp =
	     addrel (stock_seg.record_stock_arrayp, stock_seg.n_stock_entries * stock_seg.record_stock_size);


/* Generate PVT */

	tx = 0;					/* "tx" is the current PVT index */
SUBSYS_LOOP:
	do subsys_idx = 1 to nd;			/* Loop over subsystems */
	     prph_dsk_cardp = dcp (subsys_idx);		/* Get ptr to PRPH DSKn card */
	     if IS_FIPS_DEVICE ()
	     then do;
		     driveno = -1;			/* FIPS, will be zero. */
		     max_driveno = 31;
		end;
	     else do;
		     driveno = 0;			/* normal, will be one. */
		     max_driveno = 63;
		end;
	     ss_drive_count = 0;
GROUP_LOOP:
	     do group_idx = 1 to hbound (prph_dsk_card_array.group, 1);
						/* Loop through all its drives */
		if prph_dsk_card.group (group_idx).ndrives = -1
						/* An error on the config card. */
		then call syserr (CRASH, "^a: Missing ndrives field on config card for ^a subsystem.", WHOAMI,
			prph_dsk_card.name);

		if prph_dsk_card.group (group_idx).model = -1
		then call syserr (CRASH, "^a: Missing model field on config card for ^a subsystem.", WHOAMI,
			prph_dsk_card.name);
		if prph_dsk_card.group (group_idx).model = 0
		then do;				/* Nonexistent drive */

			driveno = driveno + prph_dsk_card.group (group_idx).ndrives;
			goto NEXT_DRIVE_GROUP;	/* Skip over the nonconfigured drives */
		     end;

		do device_type = 1 to hbound (MODEL, 1)
		     while (prph_dsk_card.group (group_idx).model ^= MODEL (device_type));
		end;
		if device_type > hbound (MODEL, 1)
		then do;				/* .. check model number */
			call syserr (CRASH, "init_pvt: Unknown model number ^d on prph ^a",
			     prph_dsk_card.group (group_idx).model, prph_dsk_card.name);
		     end;
		device_type = MODELX (device_type);	/* Set device type */

DRIVE_LOOP:
		do drive_idx = 1 to prph_dsk_card.group (group_idx).ndrives;
						/* Generate a PVTE for each possible drive */
		     driveno = driveno + 1;		/* Contiguous alloc of drive nos */

		     if driveno > max_driveno		/* check IDCW unit limit */
		     then call syserr (CRASH, "^a: ^a contains a drive number higher than ^d.", WHOAMI,
			     prph_dsk_card.name, max_driveno);
		     ss_drive_count = ss_drive_count + 1;
		     if ss_drive_count > MAX_DRIVES_PER_SUBSYSTEM
		     then call syserr (CRASH, "^a: More than ^d drives defined for ^a.", WHOAMI,
			     MAX_DRIVES_PER_SUBSYSTEM, prph_dsk_card.name);
		     tx = tx + 1;			/* Generate PVTX */
		     pvtep = addr (pvt_array (tx));	/* Get ptr to PVT entry */
		     pvte.devname = prph_dsk_card.name; /* .. and fill in */
		     pvte.logical_area_number = driveno;/* .. */
		     pvte.device_type = device_type;	/* .. */
		     pvte.storage_system = "1"b;	/* Until told otherwise */
		     pvte.curn_dmpr_vtocx (*) = -1;
		     pvte.volmap_stock_ptr = null ();
		     pvte.vtoc_map_stock_ptr = null ();
		     pvte.is_sv = (number_of_sv (device_type) >= 2);
		     pvte.num_of_svs = number_of_sv (device_type);
		     pvte.removable_pack = media_removable (device_type);
		     pvte.records_per_cyl = rec_per_cyl (device_type);
		     pri_tx = tx;
		     pri_pvtep = pvtep;
		     if pvte.is_sv
		     then do;			/* build first subvolume pvte */
			     pvte.sv_num = 0;	/* number of this subvolume */
			     pvte.sv_name = valid_sv_array (pvte.sv_num);
			     pvte.record_factor = pvte.sv_num * rec_per_cyl (device_type);
			     call page$init (pri_tx, prph_dsk_cardp);
						/* Turn on disk DIM for drive */
			     do sv_cur = 2 to number_of_sv (device_type);
				tx = tx + 1;	/* make another pvt entry */
				pvtep = addr (pvt_array (tx));
				pvte = pri_pvtep -> pvte;
						/* just like the first  except for */
				pvte.sv_num = sv_cur - 1;
						/* number of this subvolume */
				pvte.sv_name = valid_sv_array (pvte.sv_num);
				pvte.record_factor = pvte.sv_num * rec_per_cyl (device_type);

			     end;
			end;
		     else do;
			     pvte.sv_num = -1;
			     pvte.record_factor = 0;
			     pvte.sv_name = " ";
			     call page$init (pri_tx, prph_dsk_cardp);
						/* Turn on disk DIM for drive */
			end;

		end DRIVE_LOOP;
NEXT_DRIVE_GROUP:
	     end GROUP_LOOP;
	end SUBSYS_LOOP;


	pvt.n_entries = tx;				/* Set size of PVT */

	if sys_info$collection_1_phase = SERVICE_INITIALIZATION
	then do;					/* otherwise, use value set in init_sst */
		sst$write_limit = 53 + max (0, 47 * (nd - 1));
						/* Olin's magic formula for sst.write_limit */

		call config_$find_parm ("wlim", parm_ptr);
						/* See if the default should be overridden */
		if parm_ptr ^= null ()
		then /* A parameter was specified */
		     if (numeric_parm.value < 2000) & (numeric_parm.value > 4)
		     then /* And it looks plausible */
			sst$write_limit = numeric_parm.value;
		     else call syserr (BEEP, "^a: Invalid parm wlim value ^d. Default of ^d used.", WHOAMI,
			     numeric_parm.value, sst$write_limit);
	     end;
	return;					/* PVT is initialized */
						/* format: off */

%page;
IS_FIPS_DEVICE:
     proc () returns (bit (1));

/*     The theory here is all drives on a channel must be either fips or non
       fips, but not mixed. Therefore look at the first non-zero model number
       and check config_data_ for device_0_valid  */

dcl (i, j) fixed bin;

     do j = 1 to hbound (prph_dsk_card.group,1);
        if prph_dsk_card.group(j).model ^= 0 then do;
	 do i = 1 to config_data_$disk_drive_model_names.count;
	    if config_data_$disk_drive_model_names.names (i).model =
	       prph_dsk_card.group (j).model then
	       return (config_data_$disk_drive_model_names.names (i).device_0_valid);
	    end;
	 end;
        end;
     return ("0"b);
     end IS_FIPS_DEVICE;
%page; %include collection_1_phases;
%page; %include config_prph_dsk_card;
%include config_prph_card;
%include config_parm_card;
%page; %include config_data_dcls;
%page; %include fs_dev_types;
%page; %include pvt;
%page; %include pvte;
%page; %include stock_seg;
%page; %include syserr_constants;
%page;

/* BEGIN MESSAGE DOCUMENTATION


    Message:
    init_pvt: Duplicate prph DISK_NAME card.

    S:	$crash

    T:	$init

    M:	Two different PRPH cards define DISK_NAME. 

    A:	Fix the config deck.

    Message:
    init_pvt: no PRPH DSKn cards

    S:	$crash

    T:	$init

    M:	No PRPH cards describing disk subsystems were found in the CONFIG deck.

    A:	Correct the CONFIG deck to include the correct PRPH cards to describe
    the disk subsystems present, and reboot.


    Message:
    init_pvt: XXXX contains a drive number higher than N.

    S:	$crash

    T:	$init

    M:	The PRPH card for disk subsystem XXXX specified disk(s) with addresses 
    larger than tha maximum allowable device number, N.

    A:	$recover
    Correct the configuration deck and reboot.

    Message:
    init_pvt: More than N drives defined for XXXX.

    S:	$crash

    T:	$init

    M:	The PRPH card for disk subsystem XXXX specified more than the maximum
    allowable number of disk drives.

    A:	$recover
    Correct the configuration deck and reboot.

    Message:
    init_pvt: Too many disk subsystems configured. Limit is NUMBER.

    S:	$crash

    T:	$init

    M:	More than NUMBER subsystems are defined. Only NUMBER are allowed.

    A:	Rearrange the config deck for disks and try again.

    Message:
    init_pvt: Missing ndrives field on config card for DISK subsystem.

    S:	$crash

    T:	$init

    M:	The PRPH DSK card for DISK lacks the ndrives parameter for
    some model.

    A:	Fix the config deck.

    Message:
    init_pvt: Unknown model MODEL on PRPH DISK.

    S:	$crash

    T:	$init

    M:	The model number MODEL specified somewhere on the prph DISK card
    is not a legal model number.

    A:	Fix the config deck.


    Message:
    init_pvt: Missing model MODEL on PRPH DISK.

    S:	$crash

    T:	$init

    M:	There was no model number specified on the prph DISK card.

    A:	Fix the config deck.

    Message:
    init_pvt: Invalid parm wlim value WLIM. Default of DEFAULT used.

    S:	$beep

    T:	$init

    M:	An unreasonable value (WLIM) was found on a PARM WLIM
    card. DEFAULT has be substituted.

    A:	Fix the config deck.

   END MESSAGE DOCUMENTATION */

     end init_pvt;
