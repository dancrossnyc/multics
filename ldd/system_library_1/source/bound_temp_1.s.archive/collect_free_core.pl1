/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2 */

collect_free_core:
     procedure;

/*

   This procedure is called at the end of collection 1 initialization by
real_initializer.  It inspects the SDW's for all "unpaged" segments, and marks
all core map entries which describe page frames containing words of these
segments.  All core map entries are then scanned, and any unmarked page frames
are freed.

   Written by Bernard Greenberg,  3/19/74.   */
/* Last modified 8/12/74 by BSG to abs-wire toehold for IOBM system */
/* Modified 8/82 BIM for $early entrypoint that marks initsegs and sup segs */
/* Remodified 10/82 BIM to remove same -- it was unneccessary */
/* Modified 9/83, Keith Loepere to tolerate paged wired segs */
/* Modified 12/83, Keith Loepere for breakpoint page support */

	dcl     slt$		 bit (36) external static;
	dcl     dseg$		 (0:4095) fixed bin (71) ext static;

	dcl     sst$cmp		 pointer external static;
	dcl     sst$last_core_block	 fixed bin (18) external static;

	dcl     absadr		 external entry (ptr, fixed bin (35)) returns (fixed bin (26));
	dcl     freecore		 external entry (fixed bin (18));
						/* entry to free a core frame */
	dcl     sdw_util_$dissect	 entry (ptr, ptr);
	dcl     (i, j)		 fixed bin (18);	/* temporaries */

	declare 1 sdwi		 aligned like sdw_info;

	dcl     cmp		 pointer;		/* core map and dseg pointers */
	dcl     (addr, fixed, baseno, divide)
				 builtin;

	declare PAGE_SIZE		 fixed bin init (1024) int static options (constant);
	declare 1 CME		 (0:sst$last_core_block) aligned like cme based (cmp);

/* format: off */

%page; %include slt;
%page; %include slte;
%page; %include scs;
%page; %include cmp;
%page; %include sdw_info;
%page; %include unpaged_page_tables;

/* format: on */


	sltp = addr (slt$);

	cmp = sst$cmp;				/* get pointer to core map array */

	begin;
	     declare bound_bootload_0$      ext static bit (36) aligned;
	     declare int_unpaged_page_tables$ ext static bit (36) aligned;
	     declare unpaged_page_tables$   ext static;
	     declare segno		      builtin;

/* Force the memory for bound_bootload_0 to be reclaimed now.
Note, though, that the first two pages thereof (the toehold) will be claimed
by the toehold's sdw. */
/* Also, int_upt is no longer needed.  It was not made paged by make_segs_paged
(and memory claimed) since it was needed until that program finished. */

	     dseg$ (segno (addr (bound_bootload_0$))) = 0;
	     dseg$ (segno (addr (int_unpaged_page_tables$))) = 0;
	     addr (unpaged_page_tables$) -> upt.iupt_absloc = 0; /* for dump analyzers */
	     addr (unpaged_page_tables$) -> upt.iupt_last_loc = 0;
	end;

	do i = slt.first_sup_seg to slt.last_sup_seg;
	     call PROCESS_SEGMENT (i);
	end;

PROCESS_SEGMENT:
     procedure (segno);
	declare segno		 fixed bin (18);
	declare sdwp		 pointer;

	sdwp = addr (dseg$ (segno));			/* construct a pointer to the sdw for this seg */
	unspec (sdwi) = ""b;
	call sdw_util_$dissect (sdwp, addr (sdwi));
	sltep = addr (slt.seg (segno));
	if slte.breakpointable 
	then sdwi.size = sdwi.size - 1024;		/* subtract off bkpt page */
	if ^sdwi.faulted & ((^slte.paged) | slte.layout_seg) & ^slte.abs_seg
	then call mark_core (absadr (baseptr (segno), (0)), sdwi.size);/* mark the start of the remaining words as used */

	return;

mark_core:
     procedure (absadr, length);

/* This procedure marks a core page frame
   as in use by "unpaged" segments */

	dcl     absadr		 fixed bin (26);	/* absolute address  pointing into page to be marked */
	dcl     first_page		 fixed bin (18);
	dcl     last_page		 fixed bin (18);
	dcl     length		 fixed bin (19);

	first_page = divide (absadr, PAGE_SIZE, 26, 0);
	last_page = divide (absadr + length - 1, PAGE_SIZE, 26, 0);

	begin;
	     declare 1 CMES		      (last_page - first_page + 1) aligned like cme defined (CME (first_page));

	     declare aa		      fixed bin;
	     declare syserr		      entry options (variable);

	     declare 1 TEMPLATE_CME	      aligned like CME;

	     unspec (TEMPLATE_CME) = ""b;
	     TEMPLATE_CME.bp, TEMPLATE_CME.fp = (18)"0"b;
	     TEMPLATE_CME.abs_w = "1"b;
	     CMES (*) = TEMPLATE_CME;
	end;
     end mark_core;
     end PROCESS_SEGMENT;


	do i = 0 to 7;				/* loop through all controllers, scanning core */
	     if scs$controller_data (i).online
	     then do;
		     do j = scs$controller_data (i).base
			to scs$controller_data (i).base + scs$controller_config_size (i) - 1;
						/* loop over all pages in controller */
			if CME (j).fp = (18)"1"b
			then call freecore (j);	/* free if not being used */
		     end;
		end;
	end;

	return;

     end collect_free_core;
