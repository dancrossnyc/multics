/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

establish_config_deck: proc;

/* ESTABLISH_CONFIG_DECK -- set up segment that points over the config */
/* partition, and flush the in-memory config deck */
/* Modified April 1984 by Keith Loepere to wire config_deck */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  config_records		        fixed bin init (4) static options (constant);

dcl  config_deck_absadr	        fixed bin (26);
dcl  config_deck_page_num	        fixed bin;
dcl  old_intk_cardp		        ptr;
dcl  partition_sdw		        fixed bin (71) static init (0);

dcl  config_deck$		        ext static bit (36) aligned;
dcl  disk_config_deck$	        ext static bit (36) aligned;
dcl  page_num		        fixed bin;
dcl  ptp			        ptr;
dcl  ptw_ptr		        ptr;
dcl  pvt$root_pvtx		        fixed bin external static;
dcl  sst$abs_wired_count	        fixed bin (16) external static;
dcl  sst$cmp		        ptr external static;
dcl  sys_boot_info$bce_intk_card      external static;
dcl  sys_boot_info$config_part_frec   fixed bin (20) external static;

dcl  absadr		        entry (ptr, fixed bin (35)) returns (fixed bin (26));
dcl  config_$add		        entry (ptr, ptr);
dcl  config_$find		        entry (char (4) aligned, ptr);
dcl  freecore$thread	        entry (fixed bin);
dcl  make_sdw$no_pages	        entry (fixed bin (15), fixed bin (71), ptr, ptr);
dcl  pc_wired$write_wait	        entry (pointer, fixed bin, fixed bin);
dcl  pmut$swap_sdw		        entry (ptr, ptr);
dcl  ptw_util_$make_core	        entry (ptr, fixed bin (26));
dcl  ptw_util_$set_phm	        entry (ptr);
dcl  ptw_util_$set_wired	        entry (ptr);

dcl  addr			        builtin;
dcl  addrel		        builtin;
dcl  bin			        builtin;
dcl  bit			        builtin;
dcl  divide		        builtin;
dcl  null			        builtin;
dcl  rel			        builtin;
dcl  segno		        builtin;
dcl  size			        builtin;

dcl  deck			        (4096) bit (36) aligned based;
%page;
	if sys_info$collection_1_phase = SERVICE_INITIALIZATION then do;

/* During service, config_deck is a paged segment abs-wired onto the memory
location supplied for the config_deck during early initialization. It is not 
read again from the partition.  Writing it out is performed by config_$update, 
which does a pc_wired$write_wait. */

	     config_deck_absadr = absadr (addr (config_deck$), (0));
	     config_deck_page_num = divide (config_deck_absadr, 1024, 17);

/* Get an ASTE that describes config_deck (abs-seg), with a page table full 
of null addresses. */

	     call make_sdw$no_pages (segno (addr (config_deck$)), partition_sdw, astep, ptp);

	     aste.pvtx = pvt$root_pvtx;
	     aste.msl, aste.csl, aste.records = bit (bin (config_records, 9), 9);

	     do page_num = 0 to config_records - 1;
		ptw_ptr = addrel (ptp, page_num);
		call ptw_util_$make_core (ptw_ptr, config_deck_absadr + 1024 * page_num); /* make abs-seg ptw indicate memory */
		call ptw_util_$set_wired (ptw_ptr);
		call ptw_util_$set_phm (ptw_ptr);	/* for force write */

		cmep = addrel (sst$cmp, size (cme) * (config_deck_page_num + page_num)); /* make cme indicate disk */
		cmep -> mcme.record_no = bit (bin (sys_boot_info$config_part_frec + page_num, 18), 18);
		cmep -> mcme.add_type = add_type.disk;
		cmep -> cme.abs_w = "1"b;
		cmep -> cme.ptwp = rel (ptw_ptr);
		cmep -> cme.astep = rel (astep);

		call freecore$thread (config_deck_page_num + page_num);
	     end;
	     sst$abs_wired_count = sst$abs_wired_count + config_records;

	     call pmut$swap_sdw (addr (config_deck$), addr (partition_sdw)); /* make config_deck describe memory-disk abs-seg */

	     call pc_wired$write_wait (astep, 0, 4);	/* update disk copy with mem copy */
	end;

/* During bce, the config_deck is a wired segment, that describes the 
configuration used to attain a given bce command level.  The config deck 
editor actually updates disk_config_deck.  Here we must read this in for the
next pass. */

	else do;
	     addr (config_deck$) -> deck = addr (disk_config_deck$) -> deck;

/* Add bce's intk card (boot options) to deck */

	     intk_cardp = addr (sys_boot_info$bce_intk_card);
	     old_intk_cardp = null;
	     call config_$find (INTK_CARD_WORD, old_intk_cardp);
	     if old_intk_cardp = null then call config_$add (intk_cardp, null);
	     else old_intk_cardp -> intk_card = intk_card;	/* replace */
	end;
	return;
%page; %include add_type;
%page; %include aste;
%page; %include cmp;
%page; %include collection_1_phases;
%page; %include config_intk_card;
     end establish_config_deck;

