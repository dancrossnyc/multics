/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-15,Fawcett), approve(86-04-11,MCR7383),
     audit(86-06-03,GWMay), install(86-07-17,MR12.0-1097):
     Add support for 512_WORD_IO devices.
  2) change(91-11-12,Schroth), approve(91-12-02,MCR8253),
     audit(92-04-27,WAAnderson), install(92-04-27,MR12.5-1015):
     Corrected call to rldr_report_$error_output that failed to pass rldr_datap
     as first argument.  Change rldr_volume_map_$deposit entrypoint to check
     for nulled file map entries in all cases.
                                                   END HISTORY COMMENTS */


/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

rldr_volume_map_: proc;

/* This routine manages the volume map data base for the  volume  reloader. It provides a deposit and withdraw
   function and tries to follow the same withdrawal rules as does the system. */
/* Written in antiquity by Dave Vinograd.
   Modified: 03/83 by GA Texada to support multiple physical volume reloading.
*/

dcl code		     fixed bin (35);
dcl (wordx, bitx, ctl, n_read, i, pvindex) fixed bin;

dcl myname	     char (32) static init ("rldr_volume_map_") options (constant);

dcl error_table_$end_of_info ext fixed bin (35);

dcl iox_$position	     entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl iox_$get_chars	     entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl iox_$put_chars	     entry (ptr, ptr, fixed bin, fixed bin (35));
dcl rldr_report_$error_output entry options (variable);

dcl (size, bit, fixed, addr, divide, mod, substr) builtin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


open: entry (rldr_datap, pvindex, code);

/* This entry initializes the volume map data base from the volume map on the physical volume. */

    code = 0;
						/* position to sector */
    call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, sector (VOLMAP_ADDR), code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "Map position failed on pv ^a",
	   rldr_data_.pvname (pvindex));
        return;
      end;
						/* read volume map */
    call iox_$get_chars (rldr_data_.outputvol_iocbp (pvindex), rldr_data_.vol_mapp (pvindex), size (vol_map) * 4,
         n_read, code);
    if code ^= 0 then
      call rldr_report_$error_output (rldr_datap, code, myname, "Error reading volume map on pv ^a",
	 rldr_data_.pvname (pvindex));
						/* set static position indicators */
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


update: entry (rldr_datap, pvindex, code);
close: entry (rldr_datap, pvindex, code);

/* This entry updates the volume map data base onto the physical volume */

    code = 0;
						/* position to sector */
    call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, sector (VOLMAP_ADDR), code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "Map position failed on pv ^a",
	   rldr_data_.pvname (pvindex));
        return;
      end;
						/* write volume map */
    call iox_$put_chars (rldr_data_.outputvol_iocbp (pvindex), rldr_data_.vol_mapp (pvindex),
         size (vol_map) * 4, code);
    if code ^= 0 then
      call rldr_report_$error_output (rldr_datap, code, myname, "Error writing volume map on pv ^a",
	 rldr_data_.pvname (pvindex));
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


withdraw: entry (rldr_datap, pvindex, vtocep, ctl, code);

/* This entry withdraws pages from the volume map. If ctl is not -1 then only the ctl page is withdrawn. Otherwise
   sufficient pages to contain the entire object are withdrawn. */

    code = 0;
						/* get ptr to volume map */
    vol_mapp = rldr_data_.vol_mapp (pvindex);
    mapp = addr (vol_map.bit_map);
						/* if single page withdraw */
    if ctl ^= -1 then do;
        vtoce.fm (ctl) = mark_used_ ();
        return;
      end;
						/* else withdraw for non-null pages */
    do i = 0 to 255;
      if ^substr (vtoce.fm (i), 1, 1) then
        vtoce.fm (i) = mark_used_ ();
      else vtoce.fm (i) = volume_reloader_null_addr;
      if code ^= 0 then return;
    end;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


deposit: entry (rldr_datap, pvindex, vtocep, ctl, code);

/* This entry deposits pages into the volume map data base */

    code = 0;
						/* get ptr to volume map */
    vol_mapp = rldr_data_.vol_mapp (pvindex);
    mapp = addr (vol_map.bit_map);
						/* if single page deposit */
    if ctl ^= -1 then do;
        if ^substr (vtoce.fm (ctl), 1, 1) then
	vtoce.fm (ctl) = mark_unused_ (vtoce.fm (ctl));
        return;
      end;
						/* else deposit all non-null pages */
    do i = 0 to 255;
      if ^substr (vtoce.fm (i), 1, 1) then
        vtoce.fm (i) = mark_unused_ (vtoce.fm (i));
    end;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


mark_used_: proc returns (bit (18));

/* This proc scans the volume map from the last withdrawn address for the next withdrawn address. If there
   are nomore addresses to be found we return an error. If we get to the end of the volume map we start
   from the beginning. */

dcl add		     bit (18);
dcl rescan	     bit (1);
						/* set flag */
    rescan = "0"b;
						/* decrement number of records left and check if all gone */
    vol_map.n_free_rec = vol_map.n_free_rec - 1;
    if vol_map.n_free_rec < 0 then do;
        vol_map.n_free_rec = 0;
        code = error_table_$end_of_info;
        return ("0"b);
      end;

/* Scan the map from previous withdrawn record. Map words are 32 bits wide starting from bit 2. Take care
   not to run over the absolute record bound. */

scan: do wordx = rldr_data_.prev_wordx (pvindex) to vol_map.bit_map_n_words;
      do bitx = rldr_data_.prev_bitx (pvindex) to 33;
        if substr (fsmap.table (wordx), bitx, 1) then do;	/* an unused page */
	  add = bit (fixed ((wordx - 1) * 32 + (bitx - 2) + vol_map.base_add, 18), 18);
	  substr (fsmap.table (wordx), bitx, 1) = "0"b;
	  if fixed (add, 18) > vol_map.n_rec + vol_map.base_add then goto again;
	  rldr_data_.prev_wordx (pvindex) = wordx;
	  rldr_data_.prev_bitx (pvindex) = bitx;
	  return (add);
again:	end;
      end;
      rldr_data_.prev_bitx (pvindex) = 2;		/* reset since no pages in this word free */
    end;
						/* Try rescan only once */
    if ^rescan then do;
        rescan = "1"b;
        rldr_data_.prev_wordx (pvindex) = 1;
        goto scan;
      end;
    code = error_table_$end_of_info;
    return (volume_reloader_null_addr);

  end mark_used_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


mark_unused_: proc (add) returns (bit (18));

/* This proc marks a record as unused in the volume map. Care is taken not to over deposit the volume map,
   or to deposit a record in the vtoc area, or to deposit a free record. */

dcl add		     bit (18);
dcl fadd		     fixed bin (18);
dcl adj_add	     fixed bin;
						/* convert bit to fixed */
    fadd = fixed (add, 18);
						/* check if address within records availaible for deposit */
    if fadd > vol_map.base_add + vol_map.n_rec
         | fadd < vol_map.base_add then do;
        if rldr_data_.per_pv (pvindex).restart & fadd = 0 then ;
        else call rldr_report_$error_output (rldr_datap, 0, myname,
	        "Attempt to deposit out of range address ^o on pv ^a", fadd, rldr_data_.pvname (pvindex));
        return ("0"b);
      end;
						/* if volume map all free */
    if vol_map.n_free_rec = vol_map.n_rec then return ("0"b);
						/* increment free record count */
    vol_map.n_free_rec = vol_map.n_free_rec + 1;
						/* adjust address by base address of volume map */
    adj_add = fadd - vol_map.base_add;
						/* convert address to word and bit index */
    if adj_add = 0 then do;				/* special case */
        wordx = 1;
        bitx = 2;
      end;
    else do;					/* round up */
        wordx = divide (adj_add, 32, 17, 0) + 1;
        bitx = mod (adj_add, 32) + 2;
      end;
						/* if restarting  things may be confused */
    if ^rldr_data_.per_pv (pvindex).restart & substr (fsmap.table (wordx), bitx, 1) then
      call rldr_report_$error_output (rldr_datap, 0, myname, "Attempt to deposit free record on pv ^a",
	 rldr_data_.pvname (pvindex));
						/* mark record as unused */
    substr (fsmap.table (wordx), bitx, 1) = "1"b;
    return (volume_reloader_null_addr);

  end mark_unused_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


sector: proc (add) returns (fixed bin);

/* This proc converts a Multics record number to a sector number */
dcl add		     fixed bin;
dcl (dev_idx, sector)    fixed bin;

    dev_idx = rldr_data_.disk_type (pvindex);
    sector = add * SECTORS_PER_RECORD (dev_idx);
    sector = sector + divide (sector, rldr_data_.usable_sectors (pvindex), 17, 0) * rldr_data_.unusable_sectors (pvindex);
    return (sector * words_per_sect (dev_idx) * 4);

  end sector;

%include rldr_data_;

%include disk_pack;

%include vol_map;

%include fsmap;

%include fs_dev_types_sector;

%include vtoce;

%include null_addresses;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   rldr_volume_map_: Map position failed: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error was encountered during reload volume map construction. Reloading continues.

   A:	$ignore


   Message:
   rldr_volume_map_: Error reading volume map: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error was encountered during reload volume map construction. Reloading continues.

   A:	$ignore


   Message:
   rldr_volume_map_: Map position failed: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error was encountered during reload volume map construction. Reloading continues.

   A:	$ignore


   Message:
   rldr_volume_map_: Error writing volume map: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error was encountered during reload volume map construction. Reloading continues.

   A:	$ignore


   Message:
   rldr_volume_map_: Attempt to deposit out of range address WWW

   S:	$rld_out

   T:	$reload

   M:	An error was encountered during reload volume map construction. Reloading continues.

   A:	$ignore


   Message:
   rldr_volume_map_: Attempt to deposit free record

   S:	$rld_out

   T:	$reload

   M:	An error was encountered during reload volume map construction. Reloading continues.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

  end rldr_volume_map_;
