/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-15,Fawcett), approve(86-04-11,MCR7383),
     audit(86-06-03,GWMay), install(86-07-17,MR12.0-1097):
     Add support for 512_WORD_IO devices.
  2) change(88-10-05,GWMay), approve(88-10-05,MCR8005), audit(88-10-12,Farley),
     install(88-10-17,MR12.2-1173):
     Added administrative calls to support one additional temporary work
     segment. Changed the call to reload_volume_ to used the correct number of
     parameters.
  3) change(89-08-31,GWMay), approve(89-10-03,MCR8135),
     audit(89-10-04,Beattie), install(89-10-10,MR12.3-1089):
     Updated to process version 3 for backup_volume_log.incl.pl1 structures.
                                                   END HISTORY COMMENTS */


/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

reloader: proc;

/* This routine is the main control program of the volume reloader. We initialize  the control
   structure, and read and process the control arguments. We then get info about the physical volume to
   be reloaded and calculate some parameters that are used to convert disk sector address
   to Multics record numbers.  We then create the needed temp segs and set the external pointers.
   We then create the control seg which will be used to restart the reload if it should be interrupted. Next we
   determine the list of dump volumes that must be read and in what order to recreate the logical image the
   the physical volume to be reloaded. We then initialize the output attachment and initialize the label,
   volume map, and vtoc header data bases. Finally we compare the label info in the volume log with that on the
   pre-initialized output medium and if we find a problems we query the operator as to whether he wants
   to proceed. If so we reload the physical volume, build the VTOC map, and update
   the vtoc header, the volume map, and the label. Just a nice straigth foward program. */

/*
   Modified April 1982 by J. Bongiovanni for new pack layout
   Modified Feburary 1983 by E. N. Kittlitz for 256K segments.
   Modified 3/1/83 by GA Texada for multiple physical volume reloading.     
   Modified 3/5/84 by GA Texada to fix hardcore 630, which simply deletes the 
	  control seg when no -restart specified and one exisites. Changed 
	  to continue the reload and make restart a per pv attribute.
   Modified 3/6/84 by GA Texada to allow for reloading of 'stranger' physical volumes.

*/

reload_volume: entry;

dcl Area		     area based (areap);
dcl (areap, argp)	     ptr;
dcl (code, ignore)	     fixed bin (35);
dcl dev_idx	     fixed bin;
dcl lvname	     char (32) aligned;
dcl time_string	     char (24);
dcl (ename, control_name) char (32);
dcl (cln, enl, i, pvindex, vtocx) fixed bin;
dcl mounted_rpv_pvid     bit (36);
dcl time_unmounted	     fixed bin (71);
dcl (YES, found_restart, dont_query_restart, pvid_missing, version_1_found, volog_missing) bit (1);

dcl 1 local_vtoce	     like vtoce aligned;

dcl tp2		     (2) ptr;
dcl tp6		     (6) ptr;

dcl error_table_$entlong fixed bin (35) ext;
dcl error_table_$improper_data_format ext fixed bin (35);
dcl error_table_$namedup ext fixed bin (35);
dcl error_table_$segknown ext fixed bin (35);
dcl sys_info$seg_size_256K fixed bin (19) ext static;
dcl myname	     char (32) static int init ("reload_volume") options (constant);

dcl hcs_$initiate	     entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl hcs_$set_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl ioa_$rsnnl	     entry options (variable);
dcl hcs_$level_get	     entry returns (fixed bin);
dcl get_group_id_	     entry returns (char (32));
dcl get_system_free_area_ entry () returns (ptr);
dcl hcs_$delentry_seg    entry (ptr, fixed bin (35));
dcl hcs_$make_seg	     entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl hcs_$fs_search_get_wdir entry (ptr, fixed bin (35));
dcl hcs_$set_256K_switch entry (bit (2) aligned, bit (2) aligned, fixed bin (35));
dcl cu_$arg_list_ptr     entry (ptr);
dcl command_query_$yes_no entry options (variable);
dcl mdc_$pvname_info     entry (char (*) aligned, bit (36) aligned, char (*) aligned, bit (36) aligned,
		     fixed bin, fixed bin (35));
dcl rldr_arg_reader_     entry (ptr, ptr, fixed bin (35));
dcl rldr_check_pvol_     entry (ptr, fixed bin, fixed bin (35));
dcl rldr_label_$open     entry (ptr, fixed bin, fixed bin (35));
dcl rldr_label_$close    entry (ptr, fixed bin, fixed bin (35));
dcl get_temp_segments_   entry (char (*), (*) ptr, fixed bin (35));
dcl date_time_	     entry (fixed bin (71), char (*));
dcl rldr_input_$init_volume_list entry (ptr, fixed bin (35));
dcl rldr_output_$init    entry (ptr, fixed bin, fixed bin (35));
dcl reload_volume_	     entry (ptr, fixed bin (35));
dcl rldr_vtoc_header_$open entry (ptr, fixed bin, fixed bin (35));
dcl rldr_vtoc_header_$close entry (ptr, fixed bin, fixed bin (35));
dcl rldr_vtoc_header_$build_vtoc_map entry (ptr, fixed bin, fixed bin (35));
dcl rldr_volume_map_$open entry (ptr, fixed bin, fixed bin (35));
dcl rldr_volume_map_$close entry (ptr, fixed bin, fixed bin (35));
dcl rldr_finish_	     entry (ptr, ptr, fixed bin (35));
dcl rldr_report_$error_output entry options (variable);
dcl rldr_report_$online_output entry options (variable);
dcl rldr_output_$read_vtoce entry (ptr, fixed bin, ptr, fixed bin, fixed bin, fixed bin (35));

dcl (cleanup, seg_fault_error) condition;

dcl (addr, clock, divide, null, search, substr) builtin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


/* init control structure */
    areap, rldr_datap = null ();
						/* setup cleanup handler */
    on cleanup call rldr_finish_ (rldr_datap, areap, ignore);
						/* init local variables */
    call get_max_pvs (rldr_data_max_pvs, code);		/* get the pvt and set up for allocation	*/
    if code ^= 0 then rldr_data_max_pvs = 100;		/* just in case				*/
    areap = get_system_free_area_ ();
    allocate rldr_data_ in (Area) set (rldr_datap);
    rldr_data_.ptrs = null ();
    rldr_data_.bits = "0"b;
    rldr_data_.fixed = 0;
    rldr_data_.chars = "";
    rldr_data_.detach = "1"b;
    rldr_data_.first_volume = "1"b;
    rldr_data_.sys_dir,
         rldr_data_.default_sys_dir = ">daemon_dir_dir>volume_backup";
    rldr_data_.io_module = "tape_mult_";
    rldr_data_.old_256K_switch = ""b;

    do pvindex = 1 to rldr_data_max_pvs;		/* initialize the per pv info			*/
      rldr_data_.per_pv (pvindex) = rldr_data_nulled_pv;
      rldr_data_.prev_wordx (pvindex) = 1;
      rldr_data_.prev_bitx (pvindex) = 2;
    end;
    call hcs_$set_256K_switch ("11"b, rldr_data_.old_256K_switch, code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "Could not enable 256KW segments.");
        goto err;
      end;
    rldr_data_.data_init = "1"b;
    code = 0;
    query_info.version = query_info_version_5;
    call cu_$arg_list_ptr (argp);
    if argp = null () then do;			/* no, no, no, we need something!		*/
        call rldr_report_$error_output (rldr_datap, 0, myname, "This command requires arguments, please consult AM81 (MOH) for information.");
        goto err;
      end;
    call rldr_arg_reader_ (rldr_datap, argp, code);
    if code ^= 0 then goto err;
    rldr_data_.arg_init = "1"b;
    if rldr_data_.operator = "" | rldr_data_.npvs <= 0 then do;
        if ((rldr_data_.operator = "") & (rldr_data_.npvs <= 0)) then
	call rldr_report_$error_output (rldr_datap, 0, myname, "Operator name and physical volume name not specified");
        else if (rldr_data_.operator = "") then
	call rldr_report_$error_output (rldr_datap, 0, myname, "Operator name not specified");
        else call rldr_report_$error_output (rldr_datap, 0, myname, "Physical volume name not specified.");
        goto err;
      end;
    found_restart, volog_missing, version_1_found = "0"b;
    do i = 1 to rldr_data_.npvs;			/* just do this all at once			*/
      call find_volog (i);				/* or else we could have many many vologs missing */
    end;						/* user would have to reinvoke reload_volume once for each*/
    if volog_missing then do;				/* this is set by find_volog if it can't find	*/
        call rldr_report_$online_output (rldr_datap, 0, myname, "Please start volume log recovery procedure");
        goto finish;
      end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Here, if we have found any version 1 vologs, then everything MUST belong to the	*/
/* mounted RPV, except if we are reloading an rpv. In that case, it must be the only pv	*/
/* being reloaded. This is exactly a'la MR10.2. This support of version 1 volume logs	*/
/* will disappear in MR12.							*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

    if version_1_found then do;
        call mdc_$pvname_info ("rpv", rldr_data_.rpv_pvid, lvname, rldr_data_.rpv_lvid,
	   rldr_data_.rpv_disk_type, code);
        if code ^= 0 then do;
	  call rldr_report_$error_output (rldr_datap, code, myname, "Unable to get info about rpv");
	  goto err;
	end;
        mounted_rpv_pvid = rldr_data_.rpv_pvid;
        if rldr_data_.rpv then do;			/* ok if rpv being reloaded, be sure he's alone	*/
	  if rldr_data_.npvs > 1 then do;
	      call rldr_report_$error_output (rldr_datap, 0, myname,
		 "An implementation restriction when using version 1 volume logs.
This requires that the RPV be reloaded separately from other volumes.");
	      goto err;
	    end;
	  bvlp = rldr_data_.per_pv (1).bvlp;		/* if RPV then this is his volume log		*/
	  rldr_data_.rpv_pvid = backup_volume_log.info.pvid;
	  rldr_data_.rpv_lvid = backup_volume_log.info.lvid;
	  rldr_data_.disk_type (1) = rldr_data_.rpv_disk_type;
	  rldr_data_.lvname (1) = lvname;
	end;
        else do;					/* ok, not doing the RPV, all must belong to mounted RPV*/
	  do pvindex = 1 to rldr_data_.npvs;
	    pvid_missing = "0"b;			/* check if pvname registered and get type and pvid */
	    do i = 1 to rldr_data_.npvs;		/* do this once for the entire list		*/
	      call mdc_$pvname_info (rldr_data_.pvname (i), rldr_data_.pvid (i),
		 rldr_data_.lvname (i), rldr_data_.lvid (i), rldr_data_.disk_type (i), code);
	      if code ^= 0 then do;
		call rldr_report_$error_output (rldr_datap, code, myname, "Unable to determine pvid for ^a",
		     rldr_data_.pvname (i));
		pvid_missing = "1"b;
	        end;
	    end;
	    if pvid_missing then goto err;
	  end;
	end;
        rldr_data_.stranger = ^(rldr_data_.rpv_pvid = mounted_rpv_pvid);
						/* do rldr_input_ knows			*/
      end;					/* end version 1 stuff			*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* This is the section that allows for 'stranger' physical volume reloading. It is	*/
/* executed only if all volume logs were version 2.				*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
    else do;
        call mdc_$pvname_info ("rpv", rldr_data_.rpv_pvid, lvname, rldr_data_.rpv_lvid, rldr_data_.rpv_disk_type, code);
        if code ^= 0 then do;
	  call rldr_report_$error_output (rldr_datap, code, myname, "Unable to get info about rpv");
	  goto err;
	end;
        mounted_rpv_pvid = rldr_data_.rpv_pvid;
        rldr_data_.rpv_pvid = "0"b;
        if rldr_data_.sys_dir ^= rldr_data_.default_sys_dir then do; /* -working_dir specified			*/
	  if rldr_data_.rpv then do;			/* find the RPV				*/
	      do i = 1 to rldr_data_.npvs while (rldr_data_.per_pv (i).pvname ^= "rpv");
	      end;
	      bvlp = rldr_data_.per_pv (i).bvlp;	/* point to his volume log			*/
	      rldr_data_.rpv_pvid = backup_volume_log.pvid;
	      rldr_data_.rpv_lvid = backup_volume_log.info.lvid;
	      goto got_rpvid;
	    end;
	  else do;				/* RPV not in he list, pick the first		*/
	      bvlp = rldr_data_.per_pv (1).bvlp;	/* point to the volume log			*/
	      rldr_data_.rpv_pvid = backup_volume_log.rpv_pvid;
	    end;
	end;					/* end wd mode				*/
        if rldr_data_.rpv_pvid = "0"b then		/* must belong to mounted RPV			*/
	rldr_data_.rpv_pvid = mounted_rpv_pvid;
got_rpvid:
        if (validate_all_vologs ()) then ;		/* make sure all rpv_pvid's match in the vologs	*/
        else do;					/* forget it...				*/
	  call rldr_report_$error_output (rldr_datap, 0, myname, "The reload will be aborted.");
	  goto err;
	end;
        call fill_from_volog ();			/* puts in the necessary per pv info		*/
        rldr_data_.stranger = ^(rldr_data_.rpv_pvid = mounted_rpv_pvid);
						/* for rldr_input_				*/
      end;					/* end the version 2 stuff			*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
/*      Back to common code...								*/

    call get_temp_segments_ (myname, tp2, code);		/* create temp segs */
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "Error creating temp segs ");
        goto err;
      end;
    dont_query_restart = "0"b;
    do pvindex = 1 to rldr_data_.npvs;
      if rldr_data_.disk_model (pvindex) = "" then do;	/* if caller did not specify use registration info */
	dev_idx = rldr_data_.disk_type (pvindex);
	rldr_data_.usable_sectors (pvindex) = divide (sect_per_cyl (dev_idx), sect_per_rec (dev_idx), 17, 0) * sect_per_rec (dev_idx);
	rldr_data_.unusable_sectors (pvindex) =
	     sect_per_cyl (dev_idx) - rldr_data_.usable_sectors (pvindex);
        end;
      rldr_data_.vtocbp (pvindex) = tp2 (1);
      rldr_data_.labelp (pvindex) = tp2 (2);
      cln = search (rldr_data_.pvname (pvindex), " ") - 1;	/* create control seg to allow restart */
      if cln < 1 | cln > 24 then cln = 24;
      control_name = substr (rldr_data_.pvname (pvindex), 1, cln) || ".control";
remake_control_seg:
      call hcs_$make_seg (wdir_ (), control_name, "", 01010b, rldr_data_.controlp (pvindex), code);
      if code ^= 0 then do;
	if rldr_data_.common.restart & (code = error_table_$segknown | code = error_table_$namedup) then code = 0;
	else do;
	    call command_query_$yes_no (YES, 0, myname,
	         "A control segment was found for the specified physical volume, but -restart was not specified. 
Do you wish a restart on the specified physical volume?",
	         "Control segment ^a exists but -restart not specified. Do you want a restart on the physical volume? ",
	         control_name);
	    if YES then found_restart, rldr_data_.per_pv (pvindex).restart = "1"b;
	    else do;				/* ok, delete the old one, and make a new one	*/
	        dont_query_restart = "1"b;
	        call hcs_$delentry_seg (rldr_data_.controlp (pvindex), ignore);
	        goto remake_control_seg;
	      end;
	  end;
        end;					/* end each pv				*/
      if ((rldr_data_.common.restart) & (^found_restart) & (^dont_query_restart)) then do;
						/* -restart specified, but didn't find a control seg.*/
	call command_query_$yes_no (YES, 0, myname,
	     "The -restart control argument was specified, but no control segment was found.
A ""yes"" answer will continue with the reload, whereas a ""no"" answer will abort it. Continue the reload?",
	     "No control seg found for -restart control arg. Do you wish to continue with the reload?");
	if YES then rldr_data_.common.restart = "0"b;	/* turn this off for rldr_input_		*/
	else goto err;
        end;
    end;
    do pvindex = 1 to rldr_data_.npvs;			/* ok, let's go...				*/
      controlp = rldr_data_.controlp (pvindex);
      rldr_data_.vol_mapp (pvindex) = addr (rldr_control.vol_map);
      rldr_data_.vtoc_headerp (pvindex) = addr (rldr_control.vtoc_header);
      rldr_data_.labelp (pvindex) = addr (rldr_control.label);
      call rldr_output_$init (rldr_datap, pvindex, code);	/* initialize output attachment */
      if code ^= 0 then do;
	call rldr_report_$error_output (rldr_datap, code, myname, "Error initializing output medium, pv ^a",
	     rldr_data_.pvname (pvindex));
	goto err;
        end;
      if ^rldr_data_.per_pv.restart (pvindex) then do;	/* initialize physical volume label data base */
	call rldr_label_$open (rldr_datap, pvindex, code);
	if code ^= 0 then do;
	    call rldr_report_$error_output (rldr_datap, code, myname, "Label check failed for pv ^a",
	         rldr_data_.pvname (pvindex));
	    goto err;
	  end;
	call rldr_volume_map_$open (rldr_datap, pvindex, code); /* initialize volume map data base */
	if code ^= 0 then do;
	    call rldr_report_$error_output (rldr_datap, code, myname, "Error opening volume map for pv ^a",
	         rldr_data_.pvname (pvindex));
	    goto err;
	  end;
	call rldr_vtoc_header_$open (rldr_datap, pvindex, code); /* initialize vtoc header data base */
	if code ^= 0 then do;
	    call rldr_report_$error_output (rldr_datap, code, myname, "Unable to open vtoc header for pv ^a",
	         rldr_data_.pvname (pvindex));
	    goto err;
	  end;
	call rldr_check_pvol_ (rldr_datap, pvindex, code);/* cross check volume log and physical volume label */
	if code ^= 0 then do;
	    if code > 2 then do;
	        call rldr_report_$error_output (rldr_datap, 0, myname,
		   "Unable to reload volume ^a. Volog and volume label have fatal mismatch",
		   rldr_data_.pvname (pvindex));
	        goto err;
	      end;
	    else do;
	        call command_query_$yes_no (YES, 0, myname, "",
		   "Initialized physical volume ^a does not match online logical image. Do you wish to proceed",
		   rldr_data_.pvname (pvindex));
	        if ^YES then goto err;
	      end;
	  end;
	if rldr_data_.save then call update_control_seg ();
        end;
    end;						/* <- each physical volume			*/
    call get_temp_segments_ (myname, tp6, code);		/* a few more of these and we can start		*/
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "Error creating temp segs ");
        goto err;
      end;
    rldr_data_.volume_record_bp = tp6 (1);
    rldr_data_.data_object_bp = tp6 (2);
    rldr_data_.input_vol_lstp = tp6 (3);
    rldr_data_.infop = tp6 (4);
    rldr_data_.skip = tp6 (5);
    rldr_data_.input_buffer_ptr = tp6 (6);
    rldr_data_.input_buffer_len = 0;
    call hcs_$set_max_length_seg (rldr_data_.data_object_bp, sys_info$seg_size_256K, code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "Could not create 256KW temporary segment.");
        goto err;
      end;

    call hcs_$set_max_length_seg (rldr_data_.input_buffer_ptr,
         sys_info$seg_size_256K, code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "Could not create 256KW temporary segment.");
        goto err;
      end;

    call rldr_input_$init_volume_list (rldr_datap, code);	/* generate list of dump volumes */
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "Error initializing input volume list ");
        goto err;
      end;
						/* Inform the user */
    call rldr_report_$online_output (rldr_datap, 0, myname, "Begin reload of volume^[s^] ^v(^a ^) at ^a",
         (rldr_data_.npvs > 1), rldr_data_.npvs, rldr_data_.pvname (*), time_now_ ());
						/* do the actual job */
    call reload_volume_ (rldr_datap, code);		/* reload them all				*/
    if code ^= 0 then				/* if code ^=0 then pvindex is one who failed.	*/
      call rldr_report_$error_output (rldr_datap, code, myname, "Error reloading volume ^a", rldr_data_.pvname (pvindex));
    do pvindex = 1 to rldr_data_.npvs;			/* Build the VTOC Map, as init_vol set it to all-free */
      call rldr_vtoc_header_$build_vtoc_map (rldr_datap, pvindex, code);
      if code ^= 0 then
        call rldr_report_$error_output (rldr_datap, code, myname, "Unable to build VTOC map for pv ^a",
	   rldr_data_.pvname (pvindex));
						/* Update the vtoc header */
      call rldr_vtoc_header_$close (rldr_datap, pvindex, code);
      if code ^= 0 then
        call rldr_report_$error_output (rldr_datap, code, myname, "Error closing vtoc header for pv ^a",
	   rldr_data_.pvname (pvindex));
						/* Update the volume map */
      call rldr_volume_map_$close (rldr_datap, pvindex, code);
      if code ^= 0 then
        call rldr_report_$error_output (rldr_datap, code, myname, "Error closing volume map for pv ^a",
	   rldr_data_.pvname (pvindex));
						/* Update the label */
      call rldr_label_$close (rldr_datap, pvindex, code);
      if code ^= 0 then
        call rldr_report_$error_output (rldr_datap, code, myname, "Error closing volume label for pv ^a",
	   rldr_data_.pvname (pvindex));
						/* Inform the user */
      call rldr_report_$online_output (rldr_datap, 0, myname, "End reload of volume ^a at ^a",
	 rldr_data_.pvname (pvindex), time_now_ ());
      controlp = rldr_data_.controlp (pvindex);
      call rldr_report_$online_output (rldr_datap, 0, myname,
	 "Reloaded on volume ^a ^d records of ^d directories and  ^d records of ^d segments and ^d null vtoces",
	 rldr_data_.pvname (pvindex), rldr_control.dir_rec, rldr_control.dir_num, rldr_control.seg_rec,
	 rldr_control.seg_num, rldr_control.num_null_vtoce);

      call hcs_$delentry_seg (rldr_data_.controlp (pvindex), ignore); /* all done so delete control seg */
      if hcs_$level_get () = 1 & get_group_id_ () = "Initializer.SysDaemon.z"
	 & rldr_data_.default_sys_dir ^= rldr_data_.sys_dir
      then do;
	call hcs_$delentry_seg (rldr_data_.bvlp (pvindex), ignore); /* delete temp volog */
	rldr_data_.bvlp (pvindex) = null ();		/* and set for finish_			*/
        end;
    end;						/* for each physical volume			*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

end_reload_volume: entry;
finish:
						/* clean up */
    call rldr_finish_ (rldr_datap, areap, ignore);	/* releases temp segs and frees as required	*/
    return;

err:
    do pvindex = 1 to rldr_data_.npvs;
      if rldr_data_.controlp (pvindex) ^= null then call hcs_$delentry_seg (rldr_data_.controlp (pvindex), ignore);
    end;
    goto finish;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


time_now_: proc returns (char (6));

/* This proc returns a time string in a printable form */

    call date_time_ (clock (), time_string);
    return (substr (time_string, 11, 6));
  end time_now_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


wdir_: proc returns (char (168) aligned);

/* This proc returns the working directory */

dcl wdir		     char (168) aligned;
    call hcs_$fs_search_get_wdir (addr (wdir), ignore);
    return (wdir);
  end wdir_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

update_control_seg: proc;

/* This proc updates the control seg look aside memory as if the data had been loaded from an input
   volume via rldr_input_. Thus before the reload begins the control segment is up-to-date with
   the data on the pack */

    vtocep = addr (local_vtoce);
    labelp, old_labelp = rldr_data_.labelp (pvindex);
    if label.volmap_version = 1 | label.volmap_version = 2
         then time_unmounted = label.time_unmounted;
    else time_unmounted = old_label.time_unmounted;
    controlp = rldr_data_.controlp (pvindex);
    vtoc_headerp = rldr_data_.vtoc_headerp (pvindex);
    do vtocx = 0 to vtoc_header.n_vtoce - 1;
      call rldr_output_$read_vtoce (rldr_datap, pvindex, vtocep, vtocx, 1, code);
      if code ^= 0 then do;
	call rldr_report_$online_output (rldr_datap, 0, code, myname, "Unable to read VTOCE ^o on pv ^a", vtocx,
	     rldr_data_.pvname (pvindex));
	goto err;
        end;
      rldr_control (vtocx).uid = vtoce.uid;
      rldr_control (vtocx).time_dumped = time_unmounted;
    end;

  end update_control_seg;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


find_volog: proc (i);

/* This proc attempts to locate the volog for the volume to be reloaded */
dcl i		     fixed bin;

/* create volume log name */
    call ioa_$rsnnl ("^a.^a", ename, enl, rldr_data_.pvname (i), "volog");
    if enl > 32 then do;
        code = error_table_$entlong;
        goto vol_err;
      end;
						/* get ptr to volume log */
    call hcs_$initiate ((rldr_data_.sys_dir), ename, "", 0, 1, bvlp, code);
    if bvlp = null then do;
vol_err: call rldr_report_$online_output (rldr_datap, code, myname, "Unable to locate valid volume log ^a^[>^]^a",
	   rldr_data_.sys_dir, rldr_data_.sys_dir ^= ">", ename);
        volog_missing = "1"b;				/* set for caller to check			*/
        return;
      end;
						/* check if object is a log */
    on seg_fault_error goto vol_err;
    if (backup_volume_log.pvname = rldr_data_.pvname (i)) & ((backup_volume_log.version = backup_volume_log_version_1)
         | (backup_volume_log.version = backup_volume_log_version_2)
         | (backup_volume_log.version = backup_volume_log_version_3)) then
      if ^version_1_found then version_1_found = /* if its been set once, leave it alone		*/
	   (backup_volume_log.version = backup_volume_log_version_1);
      else do;
	code = error_table_$improper_data_format;
	goto vol_err;
        end;
    revert seg_fault_error;
						/* clear code and set ext ptr */
    code = 0;
    rldr_data_.bvlp (i) = bvlp;
  end find_volog;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


get_max_pvs: proc (maxpvs, ec);

dcl ec		     fixed bin (35),
  maxpvs		     fixed bin;

    ec = -1;					/* just for now				*/
  end get_max_pvs;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


fill_from_volog:
  proc ();

dcl i		     fixed bin;

    do i = 1 to rldr_data_.npvs;
      bvlp = rldr_data_.per_pv (i).bvlp;		/* point to the volume log			*/
      rldr_data_.per_pv (i).pvid = backup_volume_log.pvid;
      rldr_data_.per_pv (i).disk_type = backup_volume_log.disk_type;
      rldr_data_.per_pv (i).lvid = backup_volume_log.info.lvid;
      rldr_data_.per_pv (i).lvname = backup_volume_log.info.lv_name;
    end;

  end fill_from_volog;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


validate_all_vologs:
  proc () returns (bit (1));

dcl i		     fixed bin;
dcl mismatch	     bit (1) init ("0"b);


    do i = 1 to rldr_data_.npvs;
      bvlp = rldr_data_.per_pv (i).bvlp;		/* point at the volog			*/
      if backup_volume_log.rpv_pvid ^= rldr_data_.rpv_pvid then do;
	mismatch = "1"b;				/* flag to return				*/
	call rldr_report_$error_output (rldr_datap, 0, myname,
	     "The RPV pvid for physical volume ^a does not match the determined RPV pvid.",
	     rldr_data_.per_pv (i).pvname);
        end;
    end;
    return (^mismatch);
  end validate_all_vologs;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

%include rldr_data_;

%include backup_volume_log;

%include backup_volume_header;

%include backup_pvol_info;
%include rldr_control;

%include fs_dev_types;

%include fs_vol_label;

%include old_fs_vol_label;

%include vtoc_header;
%include vol_map;

%include vtoce;

%include query_info;

/* BEGIN MESSAGE DOCUMENTATION


   Message:
   reload_volume: Unable to locate a valid volume log for PATH: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M: The volue log at PATH was not found.  This message will always cause the
reload to be aborted.

   A:	$tryagn

   Message:
   reload_volume: Please start volume log recovery procedure.

   S:	$rld_out

   T:	$reload

   M: Use the recover_volume_log command to recover the specified physical
volumes volume log.

   A:	$tryagn

   Message:
   reload_volume: The RPV pvid for physical volume NAME does not match the
determined RPV pvid.

   S:	$rld_out

   T:	$reload

   M: The backup_volume_log.rpv_pvid for NAME does not match the reloader
determined RPV pvid.  This could be an invalid attempt to reload a stranger
physical volume.

   A:	$inform


   Message:
   reload_volume: An implementation restriction when using version 1 volume logs.
This requires that the RPV be reloaded separately from other volumes.

   S:     $rld_out

   T:	$reload

   M:     Using version 1 volume logs, all physical volumes must belong to the mounted RPV. An exception is when reloading the RPV itself, it must be reloaded separately, then a re-boot on the new RPV will allow the other volumes to be reloaded.

   A:	$tryagn


   Message:
   reload_volume: Operator name not specified.

   S:	$rld_out

   T:	$reload

   M:	Missing input.

   A:	$tryagn


   Message:
   reload_volume: Physical volume name not specified.

   S:	$rld_out

   T:	$reload

   M:	Missing input.

   A:	$tryagn

   Message:
   reload_volume: Could not enable 256KW segments: ERORR_MESS

   S:	$rld_out

   T:	$reload

   M:	The call to hcs_$set_256K_switch failed.

   A:	$inform


   Message:
   reload_volume: Begin reload of volume NAME at TIME

   S:	$rld_on

   T:	$reload

   M:	A volume reload is beginning.

   A:	$ignore


   Message:
   reload_volume: End reload of volume NAME at TIME
   .br
   reload_volume: Reloaded on volume NAME XX records of XX directories and XX records of XX segments and XX null vtoces

   S:	$rld_on

   T:	$reload

   M:	A volume reload has completed.
   The statistics printed indicate how many records were reloaded.

   A:	$ignore


   Message:
   reload_volume: arg err: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	Invalid input was given.

   A:	$tryagn


   Message:
   reload_volume: error closing volume label: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: error closing volume map: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: error closing vtoc header: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: error creating control seg: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: error creating temp segs: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: error initializing input volume list: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: error initializing output medium: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: error opening volume map: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: error reloading volume NAME: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: label check failed: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: Operator name and physical volume name not specified

   S:	$rld_out

   T:	$reload

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   reload_volume: unable to determine pvid for NAME: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M: The volume registration information does not contain the physical volume
NAME.  This could be an invalid attempt to reload a stranger physical volume.

   A:	$inform


   Message:
   reload_volume: unable to get info about rpv: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: unable to open vtoc header: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   Message:
   reload_volume: unable to build VTOC map: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	An error occurred while reloading.

   A:	$inform


   END MESSAGE DOCUMENTATION */

  end reloader;
