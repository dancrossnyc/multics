/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
  2) change(86-05-15,Fawcett), approve(86-04-11,MCR7383),
     audit(86-06-03,GWMay), install(86-07-17,MR12.0-1097):
     Add support for 512_WORD_IO devices.
  3) change(91-11-12,Schroth), approve(91-12-02,MCR8253),
     audit(92-04-27,WAAnderson), install(92-04-27,MR12.5-1015):
     Corrected call to rldr_report_$error_output that failed to pass rldr_datap
     as first argument.
                                                   END HISTORY COMMENTS */

/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

rldr_vtoc_header_: proc;

/* This routine manages  the vtoc header data base for the volume reloader.
   It also maintains the VTOC map.

   Probably written by Vinograd.
   Modified April 1982 by J. Bongiovanni for the VTOC Map
   Modified: 03/83 by GA Texada to support multiple physical volume reloading.
*/

dcl code		     fixed bin (35);
dcl old_vtocep	     ptr;
dcl (vtocx, prev_vtocx, n_read, wordx, bitx, pvindex) fixed bin;
dcl 1 free_vtoce	     like vtoce aligned;
dcl 1 old_vtoce	     like vtoce aligned;
dcl 1 l_vtoc_map	     aligned like vtoc_map;

dcl myname	     char (32) int static init ("rldr_vtoc_header_") options (constant);

dcl rldr_report_$error_output entry options (variable);
dcl iox_$position	     entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl iox_$get_chars	     entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl iox_$put_chars	     entry (ptr, ptr, fixed bin, fixed bin (35));

dcl (addr, divide, mod, size, substr, unspec) builtin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


open: entry (rldr_datap, pvindex, code);

/* This entry initializes the vtoc header data base. */

/* position to sector */
    call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, sector (DUMPER_BIT_MAP_ADDR), code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "VTOC header position failed on ^a",
	   rldr_data_.pvname (pvindex));
        return;
      end;
						/* read vtoc header */
    call iox_$get_chars (rldr_data_.outputvol_iocbp (pvindex), rldr_data_.vtoc_headerp (pvindex),
         size (vtoc_header) * 4, n_read, code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "VTOC header read failed on ^a",
	   rldr_data_.pvname (pvindex));
        return;
      end;
						/* set static variables */
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


update: entry (rldr_datap, pvindex, code);
close: entry (rldr_datap, pvindex, code);

/* This entry updates the vtoc header on the physical volume from the data base */

/* position to sector */
    call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, sector (DUMPER_BIT_MAP_ADDR), code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "VTOC header position failed on ^a",
	   rldr_data_.pvname (pvindex));
        return;
      end;
						/* write vtoc header */
    call iox_$put_chars (rldr_data_.outputvol_iocbp (pvindex), rldr_data_.vtoc_headerp (pvindex),
         size (vtoc_header) * 4, code);
    if code ^= 0 then
      call rldr_report_$error_output (rldr_datap, code, myname, "VTOC header write failed on ^a",
	 rldr_data_.pvname (pvindex));
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


build_vtoc_map: entry (rldr_datap, pvindex, code);

/* This entry builds the map of free VTOCEs. init_vol set the VTOC map to
   indicate that all VTOCEs are free. As this is likely no longer the case,
   the map must be built. Each VTOCE in the local control data base is
   examined. If it is not free, it is marked as in-use in the VTOC map. */

/* set control variables and init structures */
    controlp = rldr_data_.controlp (pvindex);
    prev_vtocx = 0;
    unspec (free_vtoce) = "0"b;
    unspec (old_vtoce) = "0"b;
    vtocep = addr (free_vtoce);
    old_vtocep = addr (old_vtoce);
    vtoc_headerp = rldr_data_.vtoc_headerp (pvindex);
    vtoc_header.n_free_vtoce, code = 0;
    call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, sector (VTOC_MAP_ADDR), code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "VTOC map position failed on ^a",
	   rldr_data_.pvname (pvindex));
        return;
      end;
    call iox_$get_chars (rldr_data_.outputvol_iocbp (pvindex), addr (l_vtoc_map), size (vtoc_map) * 4, n_read, code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "VTOC map read failed on ^a",
	   rldr_data_.pvname (pvindex));
        return;
      end;
    l_vtoc_map.n_free_vtoce = l_vtoc_map.n_vtoce;
						/* scan all free vtoces */
    do vtocx = 0 to vtoc_header.n_vtoce - 1;
      if rldr_control (vtocx).uid ^= "0"b then do;	/* VTOCE in use */
	l_vtoc_map.n_free_vtoce = l_vtoc_map.n_free_vtoce - 1;
	wordx = divide (vtocx, 32, 17);
	bitx = mod (vtocx, 32);
	bit_map_wordp = addr (l_vtoc_map.bit_map (wordx));
	substr (bit_map_word.bits, bitx + 1, 1) = "0"b;
        end;
    end;

    call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, sector (VTOC_MAP_ADDR), code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "VTOC map position failed on ^a",
	   rldr_data_.pvname (pvindex));
        return;
      end;
    call iox_$put_chars (rldr_data_.outputvol_iocbp (pvindex), addr (l_vtoc_map), size (vtoc_map) * 4, code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "VTOC map write failed on ^a",
	   rldr_data_.pvname (pvindex));
        return;
      end;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


sector: proc (add) returns (fixed bin);

/* This proc converts a Multics record number to a sector number */

dcl add		     fixed bin;
dcl (dev_idx, sector)    fixed bin;

    dev_idx = rldr_data_.disk_type (pvindex);
    sector = add * SECTORS_PER_RECORD (dev_idx);
    sector = sector + divide (sector, rldr_data_.usable_sectors (pvindex), 17, 0) * rldr_data_.unusable_sectors (pvindex);
    return (sector * words_per_sect (dev_idx) * 4);

  end sector;

%include rldr_data_;

%include rldr_control;

%include vtoce;

%include fs_dev_types_sector;

%include disk_pack;

%include fs_vol_label;

%include vtoc_header;
%include vol_map;
%include vtoc_map;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   rldr_vtoc_header_: VTOC header position failed

   S:	$rld_out

   T:	$reload

   M:	An error occurred writing out the VTOC header for an output volume.

   A:	$inform


   Message:
   rldr_vtoc_header_: VTOC header read failed

   S:	$rld_out

   T:	$reload

   M:	An error occurred writing out the VTOC header for an output volume.

   A:	$inform


   Message:
   rldr_vtoc_header_: VTOC header position failed

   S:	$rld_out

   T:	$reload

   M:	An error occurred writing out the VTOC header for an output volume.

   A:	$inform


   Message:
   rldr_vtoc_header_: VTOC header write failed

   S:	$rld_out

   T:	$reload

   M:	An error occurred writing out the VTOC header for an output volume.

   A:	$inform


   Message:
   rldr_vtoc_header_: VTOC map position failed

   S:     $rld_out

   T:	$reload

   M:	An error occurred writing out the VTOC map for an output volume.

   A:	$inform

   Message:
   rldr_vtoc_header_: VTOC map read failed

   S:     $rld_out

   T:	$reload

   M:	An error occurred reading the VTOC map for an output volume.

   A:	$inform

   Message:
   rldr_vtoc_header_: VTOC map write failed

   S:     $rld_out

   T:	$reload

   M:	An error occurred writing out the VTOC map for an output volume.

   A:	$inform



   END MESSAGE DOCUMENTATION */

  end rldr_vtoc_header_;
