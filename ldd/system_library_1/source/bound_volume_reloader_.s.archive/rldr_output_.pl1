/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-16,Fawcett), approve(86-04-11,MCR7383),
     audit(86-06-03,GWMay), install(86-07-17,MR12.0-1097):
     Add support for subvolumes, and 512_WORD_IO, 3380 and 3390.
                                                   END HISTORY COMMENTS */


/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

rldr_output_: proc;

/* This routine provides read and write functions for pages and vtoces on the physical volume being reloaded. */

/* Modified 5/79 by D. Vinograd to change attach description for disk, so
   that rdisk_ will use less wired buffer */
/* Modified: 03/83 by GA Texada to support multiple physical volume reloading.			 */

dcl att_desc	     char (256);
dcl code		     fixed bin (35);
dcl (idx, parts, csl, last_page_writ, pages_to_write, n_read, vtocx, record, pvindex) fixed bin;
dcl (datap, pagep)	     ptr;
dcl add		     bit (18);

dcl myname	     char (32) int static init ("rldr_output_") options (constant);

dcl vtoce_part_size	     (3) fixed bin int static init (64, 128, 192);
dcl sys_info$page_size   fixed bin ext;

dcl ioa_$rsnnl	     entry options (variable);
dcl iox_$attach_ioname   entry (char (*), ptr, char (*), fixed bin (35));
dcl iox_$position	     entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl iox_$get_chars	     entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl iox_$put_chars	     entry (ptr, ptr, fixed bin, fixed bin (35));
dcl iox_$open	     entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl rldr_report_$error_output entry options (variable);
dcl unique_chars_	     entry (bit (*)) returns (char (15));


dcl (fixed, divide, mod, ptr) builtin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


read_vtoce: entry (rldr_datap, pvindex, vtocep, vtocx, parts, code);

/* This entry reads a vtoc entry given its index. Parts 1, 1 and 2 or 1, 2 and 3  can be read. */

/* position to sector */
    call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, vtoce_sector (vtocx), code);
    if code ^= 0 then return;
						/* read vtoce */
    call iox_$get_chars (rldr_data_.outputvol_iocbp (pvindex), vtocep, vtoce_part_size (parts) * 4, n_read, code);

    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


write_vtoce: entry (rldr_datap, pvindex, vtocep, vtocx, parts, code);

/* This entry writes a vtoce given its index. Parts 1, 1 and 2, or 1, 2, and 3 can be written. */

/* position to sector */
    call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, vtoce_sector (vtocx), code);
    if code ^= 0 then return;
						/* write vtoce */
    call iox_$put_chars (rldr_data_.outputvol_iocbp (pvindex), vtocep, vtoce_part_size (parts) * 4, code);

    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


read_page: entry (rldr_datap, pvindex, pagep, add, code);

/* This entry reads a page given its Multics address. */

/* position to sector */
    call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, sector (add), code);
    if code ^= 0 then return;
						/* read page */
    call iox_$get_chars (rldr_data_.outputvol_iocbp (pvindex), pagep, sys_info$page_size * 4, n_read, code);
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


write_page: entry (rldr_datap, pvindex, pagep, add, code);

/* This entry writes a page given its Multics address */
/* position to sector */
    call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, sector (add), code);
    if code ^= 0 then return;
						/* write page */
    call iox_$put_chars (rldr_data_.outputvol_iocbp (pvindex), pagep, sys_info$page_size * 4, code);
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


write_seg: entry (rldr_datap, pvindex, vtocep, code);
    datap = rldr_data_.data_object_bp;
    csl = fixed (vtoce.csl);
    last_page_writ = -1;
    do while (last_page_writ < csl - 1);
      pages_to_write = 0;
      do idx = last_page_writ + 1 to csl - 1 while (sector (vtoce.fm (idx + 1)) = sector (vtoce.fm (idx)) + 16);
        pages_to_write = pages_to_write + 1;
      end;
      if pages_to_write = 0 then pages_to_write = 1;
      call iox_$position (rldr_data_.outputvol_iocbp (pvindex), 2, sector (vtoce.fm (last_page_writ + 1)), code);
      if code ^= 0 then return;
      call iox_$put_chars (rldr_data_.outputvol_iocbp (pvindex), datap, 4096 * pages_to_write, code);
      if code ^= 0 then return;
      last_page_writ = last_page_writ + pages_to_write;
      datap = ptr (datap, (last_page_writ + 1) * 1024);
    end;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


init: entry (rldr_datap, pvindex, code);

/* This entry attaches and opens the output switch */

    code = 0;
						/* set up attach description for output */
    if rldr_data_.output_volume_desc ^= "" then
      call ioa_$rsnnl (rldr_data_.output_volume_desc, att_desc, (0), rldr_data_.pvname (pvindex));

    else if rldr_data_.device_name (pvindex) = "" then
      call ioa_$rsnnl ("rdisk_ ^a ^a -write -size 20480 -system",
	 att_desc, (0), device_type_ (), rldr_data_.pvname (pvindex));

    else call ioa_$rsnnl ("rdisk_ ^a ^a -dv ^a -write -size 20480 -system",
	    att_desc, (0), device_type_ (), rldr_data_.pvname (pvindex),
	    rldr_data_.device_name (pvindex));
						/* setup attachment and open output */
    call iox_$attach_ioname (unique_chars_ ("0"b), rldr_data_.outputvol_iocbp (pvindex), att_desc, code);
    if code ^= 0 then do;
        call rldr_report_$error_output (rldr_datap, code, myname, "Output volume attachment failed for pv ^a",
	   rldr_data_.pvname (pvindex));
        return;
      end;

    call iox_$open (rldr_data_.outputvol_iocbp (pvindex), Stream_input_output, "0"b, code);
    if code ^= 0 then
      call rldr_report_$error_output (rldr_datap, code, myname, "Output volume opening failed fpr pv ^a",
	 rldr_data_.pvname (pvindex));
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


device_type_: proc returns (char (32));

/* This proc returns the device type of physical volume being reloaded */

    if rldr_data_.disk_model (pvindex) ^= "" then return (rldr_data_.disk_model (pvindex));
    else return (device_names (rldr_data_.disk_type (pvindex)));
  end device_type_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


vtoce_sector: proc (vtocx) returns (fixed bin);

/* This proc converts a vtoc index into a sector number */

dcl (dev_idx, sector, vtocx) fixed bin;
    dev_idx = rldr_data_.disk_type (pvindex);
    record = VTOC_ORIGIN + divide (vtocx, VTOCES_PER_RECORD (dev_idx), 17, 0);
    sector = record * SECTORS_PER_RECORD (dev_idx);
    sector = sector + divide (sector, rldr_data_.usable_sectors (pvindex), 17, 0)
         * rldr_data_.unusable_sectors (pvindex);
    sector = sector + mod (vtocx, VTOCES_PER_RECORD (dev_idx)) * SECTORS_PER_VTOCE (dev_idx);
    return (sector * words_per_sect (dev_idx) * 4);
  end vtoce_sector;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


sector: proc (add) returns (fixed bin);

/* This proc converts a Multics record number into a sector number */

dcl add		     bit (18);
dcl (dev_idx, sector)    fixed bin;

    dev_idx = rldr_data_.disk_type (pvindex);
    sector = fixed (add, 18) * SECTORS_PER_RECORD (dev_idx);
    sector = sector + divide (sector, rldr_data_.usable_sectors (pvindex), 17, 0)
         * rldr_data_.unusable_sectors (pvindex);
    return (sector * words_per_sect (dev_idx) * 4);
  end sector;

%include rldr_data_;

%include vtoce;

%include disk_pack;

%include fs_dev_types;

%include iox_modes;
%include backup_static_variables;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   rldr_output_: Output volume attachment failed: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	$err

   A:	Mount a different output volume and try again.


   Message:
   rldr_output_: Output volume opening failed: ERROR_MESS

   S:	$rld_out

   T:	$reload

   M:	$err

   A:	Mount a different output volume and try again.


   END MESSAGE DOCUMENTATION */

  end rldr_output_;
