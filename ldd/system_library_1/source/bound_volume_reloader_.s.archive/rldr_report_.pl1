/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

rldr_report_: proc;

/* This routine is used by the volume reloader to report and log error and status
   messages. It is modled after the system routine com_err_. When called for the first time in a volume reloader
   invocation, it creates, in the working directory, an error file, in which it logs all error and status messages.
   If requested it also writes error messages on the stream error_output. */
/* Written in antiquity by Dave Vinograd.					 */
/* Modified: 03/83 by GA Texada to receive rldr_datap as an argument instead of using external static. */

dcl (code, icode)	     fixed bin (35);
dcl tstring	     char (24);
dcl uname		     char (32);
dcl (caller, message)    char (*);
dcl argp		     ptr;
dcl ret_string	     char (168);
dcl control_string	     char (32) aligned;
dcl len		     fixed bin;
dcl error_output	     bit (1);
dcl short		     char (8) aligned;
dcl long		     char (100) aligned;

dcl iox_$error_output    ptr ext;

dcl error_file_attach_ok bit (1) int static init ("1"b);
dcl myname	     char (32) static init ("rldr_report_") options (constant);

dcl hcs_$level_get	     entry returns (fixed bin);
dcl get_group_id_	     entry returns (char (32));
dcl date_time_	     entry (fixed bin (71), char (*));
dcl cu_$arg_list_ptr     entry (ptr);
dcl ioa_$general_rs	     entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);
dcl iox_$attach_ioname   entry (char (*), ptr, char (*), fixed bin (35));
dcl iox_$open	     entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl ioa_$ioa_switch	     entry options (variable);
dcl rldr_report_$online_output entry options (variable);

dcl (null, clock, substr) builtin;

error_output: entry (rldr_datap, icode, caller, message);

/* If an error file is not attached then fabricate a name with a data/time stamp, attach and open it. If
   successsful then report via online mechanism. */

    if rldr_data_.disable_error_report then return;
    error_output = "1"b;

    if error_file_attach_ok & hcs_$level_get () = 1 & get_group_id_ () = "Initializer.SysDaemon.z" then
         error_file_attach_ok = "0"b;			/* don`t even try in ring 1 */
    if rldr_data_.error_iocbp = null & error_file_attach_ok then do; /* error file not attached */

        call date_time_ (clock, tstring);
        uname = "rldr_err." || substr (tstring, 1, 8) || "." || substr (tstring, 11, 4);
        call iox_$attach_ioname ("error_file", rldr_data_.error_iocbp, "vfile_ " || uname, code);
        if code ^= 0 then do;
	  call rldr_report_$online_output ((rldr_datap), code, myname, "Unable to attach error file");
	  error_file_attach_ok = "0"b;
	  goto common;
	end;
        call iox_$open (rldr_data_.error_iocbp, Stream_output, ""b, code);
        if code ^= 0 then do;
	  call rldr_report_$online_output ((rldr_datap), code, myname, "Error opening error file");
	  error_file_attach_ok = "0"b;
	  goto common;
	end;
        call rldr_report_$online_output ((rldr_datap), 0, myname, "Error file ^a created", uname);
      end;

common:
    if icode ^= 0 then do;
        call convert_status_code_ (icode, short, long);
        control_string = "^a:^x^a:^x^a";
      end;
    else do;
        short, long = "";
        control_string = "^a:^x^a";
      end;
    call cu_$arg_list_ptr (argp);
    call ioa_$general_rs (argp, 4, 5, ret_string, len, "0"b, "0"b);
    if error_output & error_file_attach_ok then
         call ioa_$ioa_switch (rldr_data_.error_iocbp, control_string, caller, substr (ret_string, 1, len), long);

/* Write online if requested, if args not initialized yet, or if online entry */

    if (error_output & rldr_data_.err_online) | ^error_output | ^rldr_data_.arg_init | ^error_file_attach_ok then
         call ioa_$ioa_switch (iox_$error_output, control_string, caller, substr (ret_string, 1, len), long);

    return;

online_output: entry (rldr_datap, icode, caller, message);

    error_output = "0"b;
    goto common;

%include rldr_data_;

%include iox_modes;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   rldr_report_: Unable to attach error file: ERROR_MESS

   S:	$rld_on

   T:	$reload

   M:	The reloader attempted to create an error file.

   A:	$ignore


   Message:
   rldr_report_: Error opening error file: ERROR_MESS

   S:	$rld_on

   T:	$reload

   M:	The reloader attempted to create an error file.

   A:	$ignore


   Message:
   rldr_report_: Error file NAME created

   S:	$rld_on

   T:	$reload

   M:	The reloader attempted to create an error file.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

  end rldr_report_;
