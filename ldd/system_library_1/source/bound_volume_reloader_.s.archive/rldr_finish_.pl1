/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-10-05,GWMay), approve(88-10-05,MCR8005), audit(88-10-12,Farley),
     install(88-10-17,MR12.2-1173):
     Changed to include administration of one additional temporary work file.
                                                   END HISTORY COMMENTS */


/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

rldr_finish_: proc (rldr_datap, areap, code);

/* This routine provides the cleanup function for the volume reloader subsystem. It detaches any
   switches still attached, releases the temp segs, and unlocks the  volume log. */
/* Written: In antiquity by Dave Vinograd.				 */
/* Modified: March 1983 by E. N. Kittlitz for 256K segments.	    */
/* Modified: 03/04/83 by GA Texada to support multiple physical volume reloading.*/

dcl Area		     area based (areap);
dcl areap		     ptr;
dcl i		     fixed bin;
dcl (ignore, code)	     fixed bin (35);
dcl tp		     (6) ptr;

dcl release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl set_lock_$unlock     entry (bit (36) aligned, fixed bin (35));
dcl hcs_$set_256K_switch entry (bit (2) aligned, bit (2) aligned, fixed bin (35));
dcl hcs_$set_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl hcs_$truncate_seg    entry (ptr, fixed bin (19), fixed bin (35));
dcl iox_$close	     entry (ptr, fixed bin (35));
dcl iox_$detach_iocb     entry (ptr, fixed bin (35));
dcl sys_info$max_seg_size fixed bin (35) ext static;
dcl null		     builtin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


    code = 0;

    if areap = null () then return;
    if rldr_datap = null () then return;
    if ^rldr_data_.data_init then do;			/* if data not initialized then don't trust */
        free rldr_data_ in (Area);			/* get rid of this			   */
        return;
      end;
						/* detach switches still attached as required */
    call detach (rldr_data_.error_iocbp);
    if rldr_data_.detach then do;
        call detach (rldr_data_.inputvol_iocbp);
        do i = 1 to rldr_data_.npvs;
	call detach (rldr_data_.outputvol_iocbp (i));
        end;
      end;
    tp (1) = rldr_data_.volume_record_bp;
    tp (2) = rldr_data_.data_object_bp;
    tp (3) = rldr_data_.input_vol_lstp;
    tp (4) = rldr_data_.skip;
    tp (5) = rldr_data_.infop;
    tp (6) = rldr_data_.input_buffer_ptr;

    call hcs_$truncate_seg (rldr_data_.data_object_bp, 0, ignore);
    call hcs_$set_max_length_seg (rldr_data_.data_object_bp, (sys_info$max_seg_size), ignore);
    call hcs_$truncate_seg (rldr_data_.input_buffer_ptr, 0, ignore);
    call hcs_$set_max_length_seg (rldr_data_.input_buffer_ptr, (sys_info$max_seg_size), ignore);

    call release_temp_segments_ ("reload_volume", tp, ignore);

    do i = 1 to rldr_data_.npvs;			/* get all the temp segs and 			*/
						/* unlock log if required */
      if rldr_data_.vtocbp (i) ^= null () then
        call release_temp_segment_ ("reload_volume", rldr_data_.vtocbp (i), ignore);
      if rldr_data_.bvlp (i) ^= null then do;
	bvlp = rldr_data_.bvlp (i);
	call unlock_log;
        end;
    end;
    call hcs_$set_256K_switch (rldr_data_.old_256K_switch, (""b), (0));
    free rldr_data_ in (Area);
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


detach: proc (iocbp);

/* This proc detaches the specified iocb. It ignores all errors. */

dcl iocbp		     ptr;

    if iocbp ^= null () then do;
        call iox_$close (iocbp, ignore);
        call iox_$detach_iocb (iocbp, ignore);
        iocbp = null;
      end;
    return;

  end detach;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


unlock_log: proc;

/* This proc unlocks the volume log */

    call set_lock_$unlock (backup_volume_log.lock, ignore);
    return;
  end unlock_log;

%include rldr_data_;

%include backup_volume_log;
%include backup_pvol_info;

%include backup_volume_header;

%include fs_vol_label;

  end rldr_finish_;
