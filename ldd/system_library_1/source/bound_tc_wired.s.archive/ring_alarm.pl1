/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1986 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* format: style2 */

/* RING_ALARM - The Ring Alarm Register Management Procedure.
	coded 10/2/72 by S. H. Webber and N. I. Morris		
	modified 2/26/76 by Noel I. Morris for new reconfig 
	modified 2/8/82 by J. Bongiovanni to set ralr to 1 if masked (conditionally) 

          modified 830518 BIM to correctly check pds */
/*        futher modified 8306 to revamp strategy -- call side polling added */

/* 830529 BIM to add poll entrypoint for call side ring alarm check */
/* Modified 1985-01-21, BIM: admin_privilege resetting. */

/* See level.alm for explanation of validation level protocols. */


ring_alarm:
     procedure;


	dcl     a_mcp		 ptr;		/* pointer to machine conditions */

	dcl     target_ring		 fixed bin (3);	/* target ring which caused ring alarm fault */
	dcl     i			 fixed bin;	/* ring number iteration variable */
	dcl     mask		 fixed bin (71);	/* interrupt mask */
	dcl     setting		 fixed bin (4);	/* new setting for ring alarm register */

	dcl     pds$admin_privileges	 bit (36) aligned ext;
	dcl     pds$alarm_ring	 fixed bin (3) ext; /* setting of ring alarm register */
	dcl     pds$apt_ptr		 ptr ext;		/* pointer to APT entry for this process */
	dcl     pds$connect_pending	 bit (1) aligned ext;
						/* non-zero if fim to do connect after return */
	dcl     pds$ips_mask	 (0:7) bit (36) aligned ext;
						/* mask for IPS signals in each ring */
	dcl     pds$ring_alarm_val	 (0:7) fixed bin (3) ext;

	dcl     pds$process_group_id	 char (32) ext static;
	dcl     pds$validation_level	 fixed bin (3) ext; /* current validation level */

	dcl     scs$sys_level	 fixed bin (71) ext;

	dcl     wired_hardcore_data$trap_invalid_masked
				 bit (1) aligned ext;
	dcl     severity		 fixed bin;
	dcl     (stop_flag, pre_empt_flag, ips_flag, check_ips, validation_flag, privileges_flag)
				 bit (1) aligned init ("0"b);
						/* flags to prevent resetting alarm after detecting condition */

	dcl     fs_get$path_name	 entry (ptr, char (*), fixed bin (21), char (*), fixed bin (35));
	dcl     pmut$lrar		 entry (fixed bin (3));
	dcl     pmut$read_mask	 entry (fixed bin (71));
	dcl     pxss$force_stop	 entry;
	dcl     set_privileges$admin_ring_alarm
				 entry;
	dcl     syserr		 entry options (variable);
	dcl     syserr$binary	 entry options (variable);
	dcl     (addr, codeptr, fixed, max, min, mod)
				 builtin;

	declare active_hardcore_data$validation_fix_severity
				 fixed bin external;
	dcl     any_other		 condition;


/* RING_ALARM$FAULT - The Ring Alarm Fault Handler. */

fault:
     entry (a_mcp);
	mcp = a_mcp;				/* copy arg */

	scup = addr (mcp -> mc.scu (0));		/* get pointer to SCU data */

/* Determine the target ring at the time of the fault. */

	target_ring = fixed (scup -> scu.tpr.trr, 3);

	call ANALYZE_RING_ALARM$$fault (target_ring);


	pds$connect_pending = pds$connect_pending | stop_flag | pre_empt_flag | ips_flag;
						/* On fault side we still take connects */

/* No other checks are made now.  We will drop into the code for
   ring_alarm$reset to compute and set a new value for the
   ring alarm register.					*/


/* RING_ALARM$RESET - Compute new setting for ring alarm register. */

reset:
     entry;

Reset_common:
	pds$alarm_ring = 0;				/* we do complete calculation, so */
	setting = 8;				/* Start with ring alarm reg turned off. */

	aptep = pds$apt_ptr;			/* Get a pointer to APT entry for this process. */
	check_ips = ^ips_flag & (apte.ips_message ^= ""b);


	do i = 0 to 7 while (setting = 8);		/* Iterate through all rings. */

	     if check_ips & ((apte.ips_message & pds$ips_mask (i)) ^= ""b)
						/** if pending IPS */
	     then setting = i;
	     else if pds$ring_alarm_val (i) ^= 0	/** or validation level was set to this ring ... */
		& (i < 7)				/** cant call into 7 */
	     then setting = i + 1;			/* if we go beyond this ring */
	end;

	if (pds$admin_privileges ^= ""b)		/* Can only happen in ring 0 */
	then setting = min (2, setting);		/* target ring is 2 */

/* Test for deferred pre-empt or stop. */

	if (apte.pre_empt_pending & ^pre_empt_flag)
	then setting = 1;
	else if (apte.stop_pending & ^stop_flag)
	then setting = 1;

/* Test for interrupts masked if debug parameter is set */

	if wired_hardcore_data$trap_invalid_masked
	then do;
		call pmut$read_mask (mask);
		if mask = scs$sys_level
		then setting = 1;
	     end;


/* Now, reset the ring alarm register if necessary. */

	setting = mod (setting, 8);			/* Compute new value for RAR. */
	call set (fixed (setting, 3));		/* And call recursively to set it. */

	return;

reset_no_pre_empt:
     entry;

	pre_empt_flag = "1"b;
	go to Reset_common;


/* SET - Entry to set the ring alarm ring. */

set:
     entry (ringno);

	dcl     ringno		 fixed bin (3);	/* ring number to which to set ring alarm */


	setting = pds$alarm_ring;			/* Get current RAR setting. */
	if setting = 0
	then setting = 8;				/* Set to 8 if RAR turned off. */
	setting = min (setting, ringno);		/* Set new RAR value. */
	pds$alarm_ring = mod (setting, 8);		/* .. */
	call pmut$lrar (pds$alarm_ring);		/* Call privileged procedure to load RAR. */

	return;


/* RING_ALARM$POLL -- on call side, check for ring alarms that we can avoid. */


poll:
     entry returns (bit (1) aligned);

	declare callerframe		 pointer;
	declare outer_ring_ptr	 pointer;
	declare its_ptr		 pointer;

	if wired_hardcore_data$trap_invalid_masked
	then do;
		call pmut$read_mask (mask);
		if mask = scs$sys_level
		then call syserr (CRASH, "ring_alarm$poll: processor is masked at exit from ring 0.");
	     end;


	callerframe = stackframeptr () -> stack_frame.prev_sp -> stack_frame.prev_sp;
						/* caller of the gate that called us */

	outer_ring_ptr = callerframe -> stack_frame.return_ptr;
						/* now, the ring number of outer_ring_ptr has to be first ring number of the caller's stack or larger */

	its_ptr = addr (outer_ring_ptr);
	target_ring = its_ptr -> its_unsigned.ringno;	/* get it as fb */

	call ANALYZE_RING_ALARM (target_ring);

	if ^pre_empt_flag & ^stop_flag
	then do;					/* Was either validation level, which ANALYZE fixed, */
						/* or privileges, which ANALYZE fixed, */
						/* or IPS, which we cannot handle yet, */
						/* or completely off the wall.  */
		call reset;			/* recurse: another ring may still need an rar */
		return ("0"b);			/* returns to outer ring for the gate */
	     end;


	if stop_flag
	then call pxss$force_stop;			/* This is supposed to be easy */

/* PRE-EMPT */

	if pre_empt_flag
	then do;
		call reset_no_pre_empt;		/* in case of val level or IPS */
		return ("1"b);
	     end;

	call syserr (CRASH, "ring_alarm$poll: Mysterious ring alarm.");


/* This procedure looks at the state in the PDS, and sets bits to indicate */
/* why the ring alarm register was set.  */


ANALYZE_RING_ALARM:
     procedure (Target_ring);

	declare Target_ring		 fixed bin (3);
	declare fault		 bit (1);
	declare old_validation_level	 fixed bin (3);

	fault = "0"b;
	go to Join;

ANALYZE_RING_ALARM$$fault:
     entry (Target_ring);

	fault = "1"b;

Join:
	old_validation_level = pds$validation_level;

	do i = 0 to Target_ring - 1;			/* check all rings up to the one being returned to */
	     if pds$ring_alarm_val (i) ^= 0
	     then do;
		     pds$validation_level = pds$ring_alarm_val (i);
		     pds$ring_alarm_val (i) = 0;	/* no longer important */
		end;
	end;

	pds$validation_level = max (Target_ring, pds$validation_level);
						/* never let it be < execution ring */
						/* do this LAST, to respect saved value if possible. */

	if old_validation_level ^= pds$validation_level & active_hardcore_data$validation_fix_severity >= 0
	then do;
		call syserr (active_hardcore_data$validation_fix_severity,
		     "ring_alarm: Fixed validation level^[ on fault^] from ^d to ^d.", fault, old_validation_level,
		     pds$validation_level);
		validation_flag = "1"b;
	     end;

	if pds$admin_privileges ^= ""b & Target_ring > 1
	then do;					/* Always call syserr, since this is always a bug */
		if active_hardcore_data$validation_fix_severity = -1
		then severity = JUST_LOG;
		else severity = active_hardcore_data$validation_fix_severity;
		call syserr (severity, "ring_alarm: Reset admin privileges^[ on fault^].", fault);
		call set_privileges$admin_ring_alarm;
		privileges_flag = "1"b;
	     end;

/* Check to see if a stop interrupt has been delayed */

	aptep = pds$apt_ptr;			/* Get pointer to our APT entry. */
	if apte.stop_pending
	then stop_flag = "1"b;

/* Check to see if a pre-empt interrupt has been delayed. */

	else if apte.pre_empt_pending
	then pre_empt_flag = "1"b;

/* Now check for any delayed IPS signals */

	else if apte.ips_message & pds$ips_mask (Target_ring)
	then ips_flag = "1"b;

	return;					/* Caller can now decide what to do with this mess */

     end ANALYZE_RING_ALARM;


/* BEGIN MESSAGE DOCUMENTATION

   Message: 
   ring_alarm$poll: processor is masked at exit from ring 0.

   S:  $crash

   T:  $run

   M:  A software bug has left interrupts masked to system level at
   exit from ring 0. 

   A:  $inform


   Message:
   ring_alarm$poll: Mysterious ring alarm.

   S:  $crash

   T:  $run

   M:  The ring alarm register was set on exit from ring zero, but no reason
   for it was recorded for the process.

   A:  $inform


   Message:
   ring_alarm: Fixed validation level {on fault} from OLD to NEW.

   S:   $beep

   T:   $run

   M:   On exit from ring zero, the validation level was less than the ring 
   that is being returned to. The validation level is corrected to its 
   value when it called into the inner ring. This indicates a benign
   bug in the inner ring entry called.

   A:   $inform


   Message:
   ring_alarm$fault: Reset admin privileges.

   S:   $log

   T:   $run

   M:   On exit from ring one, one or more AIM privileges were still set
   by privileged ring 1 code. These are reset, and the following
   log message from set_privileges lists them. This indicates
   a benign bug in the ring one program that was running.

   A:   $inform

END MESSAGE DOCUMENTATION */

/* format: off */

%page; %include mc;
%page; %include apte;
%page; %include syserr_constants;
%page; %include its;
%page; %include signaller_stack;
%page; %include stack_frame;
%page; %include stack_header;
%page; %include syserr_binary_def;
     end ring_alarm;
