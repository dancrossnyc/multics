/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */

/* SET_ALARM_TIMER - This procedure establishes a simulated wakeup at
   a designated clock time.

   declare set_alarm_timer ext entry(fixed bin(71),fixed bin,fixed bin(71));
   call set_alarm_timer(time,asw,event_channel);

   1. time		time of event or wakeup(Input).

   2. asw		1 if time is relative to current time, 2 if time is absolute(Input).

   3. event_channel	is event channel over which wakeup is to be sent; 0 if IPS signal
   is to be sent(Input).

   Modified January 1985 by Keith Loepere to fix argument copying while masked.
   Modified November 1984 by M. Pandolf to include hc_lock
   Modified Spring '77 by RE Mullen for concurrent scheduler
   Coded by R. J. Feiertag on July 25, 1971		*/

set_alarm_timer: proc (atime, asw, aevent);

/* Parameters */

dcl  aevent			fixed bin (71) parameter; /* event channel for wakeup */
dcl  asw				fixed bin parameter;/* absolute or relative time */
dcl  atime			fixed bin (71) parameter; /* time of wakeup */

/* Variables */

dcl  current_time			fixed bin (71);	/* current clock time */
dcl  esw				fixed bin;	/* internal copy of absolute-relative time switch */
dcl  event			fixed bin (71);	/* internal copy of event channel */
dcl  naptep			ptr;		/* pointer to APT entry of next process in list */
dcl  oaptep			ptr;		/* pointer to APT entry of last process in list */
dcl  time				fixed bin (71);	/* internal copy of time of wakeup */
dcl  wire_arg			bit (72) aligned;	/* mask with pmut's nasty note or'ed into it */
dcl  wired_stack_ptr		pointer;		/* ptp, actually */

/* Based */

dcl  bit20			bit (20) based;

/* External */

dcl  pds$apt_ptr			ext ptr;		/* pointer to APT entry of this process */
dcl  tc_data$			ext;		/* traffic controller data base */
dcl  tc_data$alarm_timer_list		ext bit (18) aligned; /* offset to list of processes with alarms pending */
dcl  tc_data$next_alarm_time		ext fixed bin (71); /* time of next simulated alarm */

/* Entries */

dcl  pxss$lock_apt			entry ();		/* only way to touch apt lock */
dcl  pxss$unlock_apt		entry ();		/* only way to touch apt lock */
dcl  pmut$unwire_unmask		entry (bit (72) aligned, pointer);
dcl  pmut$wire_and_mask		entry (bit (72) aligned, pointer);

/* Misc */

dcl  (addr, bit, clock, fixed, ptr, rel) builtin;
%page;
	esw = asw;				/* copy relative-absolute time switch */
	go to join;				/* join common code */

/* SET_ALARM - This procedure is identical to set_alarm_timer except that only
   absolute times are accepted.				*/

set_alarm: entry (atime, aevent);

	esw = 2;					/* only absolute times */

join:
	current_time = clock;			/* get current time */
	if esw = 1 then time = current_time + atime;	/* calculate absolute time from relative */
	else time = atime;
	if time < current_time then time = current_time;	/* make sure time is current */
	event = aevent;				/* copy event channel */

	call pmut$wire_and_mask (wire_arg, wired_stack_ptr);

	aptep = pds$apt_ptr;			/* get pointer to APT entry */
	tcmp = addr (tc_data$);			/* get pointer to traffic controller meters */
	call pxss$lock_apt ();			/* TRAFFIC CONTROLLER LOCKED */
	if aptep -> apte.alarm_time then do;		/* this process already has a timer pending */
	     if tc_data$alarm_timer_list = rel (aptep) then
		tc_data$alarm_timer_list = aptep -> apte.alarm_time_thread;
						/* if this process first on list then thread it out */
	     else do;				/* not first on list */
		naptep = ptr (aptep, tc_data$alarm_timer_list); /* get pointer to first entry */
		do while (naptep -> apte.alarm_time_thread ^= rel (aptep));
						/* find this process's position in list */
		     naptep = ptr (naptep, naptep -> apte.alarm_time_thread); /* go to next entry */
		end;
		naptep -> apte.alarm_time_thread = aptep -> apte.alarm_time_thread; /* thread out of list */
	     end;
	     aptep -> apte.alarm_time_thread = ""b;	/* no alarm pending */
	     aptep -> apte.alarm_time = ""b;
	end;
	if addr (time) -> bit20 then go to finish;	/* time too large */
	oaptep, naptep = ptr (aptep, tc_data$alarm_timer_list); /* get pointer to first entry on list */
	if time <= fixed (oaptep -> apte.alarm_time, 54) | rel (oaptep) = ""b then
	     tc_data$alarm_timer_list = rel (aptep);	/* thread in at head of list */
	else do;					/* not first on list */
	     naptep = ptr (oaptep, oaptep -> apte.alarm_time_thread); /* get pointer to next entry */
	     do while (time > fixed (naptep -> apte.alarm_time, 54) & rel (naptep) ^= ""b);
						/* find position in list for this entry */
		oaptep = naptep;			/* new last entry is current entry */
		naptep = ptr (naptep, naptep -> apte.alarm_time_thread); /* get next entry */
	     end;
	     oaptep -> apte.alarm_time_thread = rel (aptep); /* thread into list */
	end;
	aptep -> apte.alarm_time_thread = rel (naptep);	/* complete the thread */
	aptep -> apte.alarm_time = bit (fixed (time, 54));/* fill in time of alarm */
	aptep -> apte.alarm_event = event;		/* fill in event channel */
	if time < tc_data$next_alarm_time then tc_data$next_alarm_time = time;
						/* update time of next alarm */
finish:

	call pxss$unlock_apt ();			/* TRAFFIC CONTROLLER UNLOCKED */
	call pmut$unwire_unmask (wire_arg, wired_stack_ptr);
	return;
%page;

/* GET_ALARM_TIMER - This entry returns the current value of the pending timer
and the associated event channel.

   declare get_alarm_timer ext entry(fixed bin(71),fixed bin(71));
   call get_alarm_timer(time,event_channel);

   1. time		timer of alarm(Output).

   2. event_channel		event channel for wakeup(Output).
						   */

get_alarm_timer: entry (atime, aevent);

	call pmut$wire_and_mask (wire_arg, wired_stack_ptr);

	aptep = pds$apt_ptr;			/* get pointer to APT entry */
	tcmp = addr (tc_data$);			/* get pointer to traffic control meters */
	call pxss$lock_apt ();			/* TRAFFIC CONTROLLER LOCKED */
	time = fixed (aptep -> apte.alarm_time, 54);	/* get time of alarm */
	event = aptep -> apte.alarm_event;		/* get event channel */
	call pxss$unlock_apt ();			/* TRAFFIC CONTROLLER UNLOCKED */
	call pmut$unwire_unmask (wire_arg, wired_stack_ptr);

	atime = time;				/* return values */
	aevent = event;
	return;
%page; %include apte;
%page; %include hc_lock;
%page; %include tcm;
     end;
