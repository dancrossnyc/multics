" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(85-10-28,Fawcett), approve(86-04-03,MCR7277),
"     audit(86-04-03,Farley), install(86-04-07,MR12.0-1036):
"      Fix a looping problem that caused the system to hang
"                                                      END HISTORY COMMENTS


" " " " " " " " " " " " " " " " " " " " " " " " "
"
"	post_purge -- This entry contains the code to post purge a process.
"
"	Last Modified (Date and Reason)
"	4/8/74 by S.H.Webber to change decision tree and add scheduling trace
"	03/18/81, W. Olin Sibert, for ADP conversion
"	06/21/82, E. N. Kittlitz, to move core map.
"         83-12-03 BIM to sys_trace.incl.alm
"
"	This program was originally part of pre_page but has since been renamed
"	as we no longer do anything about pre_paging.
"
" " " " " " " " " " " " " " " " " " " " " " " " "

	name	post_purge
	segdef	post_purge

	include	pxss_page_stack
	include	add_type
	include	page_info
	include	sst
	include	sys_trace
	include	aste
	include	sdw
	include	ptw
	include	cmp
	include	apte

" 

"	The following is the decision tree used
"	at post-purge time.
"
"	The current algorithm is as follows:
"
"	post_purge		never
"	move			if per-process and in core
"	used bit off		never
"	working set		if used in quantum by some process
"
"
	bool	working_set,000010	" How to interpret the bits
	bool	used_bit_off,000004
	bool	post_purge_bit,000002
	bool	moved_bit,000001

	equ	ptw.pre_paged,ptw.er " Special use for this bit here

code_tree:
	oct	020042104200
	oct	020042104200
	oct	020042104200
	oct	020042104200
	oct	020042104200
	oct	062146314620
	oct	020042104200
	oct	062146314620

post_purge:
	push
	tsx6	page_fault$init_savex initialize x7 save stack
	lda	post_purge_entry,dl set entry switch
	sta	entry_sw
	tsx7	page_fault$lock_ptl lock the page table lock

	read_clock		meter post-purge time
	staq	pre_time		save start time in stack

	fld	0,dl		initialize counters
	staq	pre_temp
	staq	pre_temp+2
	staq	pre_temp+4

"
"	The post purge code starts searching the post purge trace list from "trace_index"
"	to "trace_size" -- watching out for possible wrap-around.
"
	eppap	pds$trace 	get pointer to trace data
	ldx0	ap|trace.index_word	get starting index
post_loop:
	cmpx0	ap|trace.next_free_word	are we done?
	tze	done_post 	yes, finish up
	increment sst|sst.post_list_size count number of pages in core at purge
	sxl0	pre_temp+1	save current index
	lda	ap|trace.data+1,0	get page number from entry
	cana	=o770000,du	this better be a page fault list entry
	tnz	next_entry	it isn't, skip it
	sta	temp		save it for a second
	ldx3	ap|trace.data,0	get current AST entry pointer
	eax2	aste_size,3	fabricate page table pointer
	adlx2	temp		add in word number to get ptwp
	eppbp	sst|0,2		get a pointer to the PTW
	lda	ptw.pre_paged,dl	check if we've already looked at this ptw
	cana	ptw|0		..
	tze	looked		we haven't, continue
	increment sst|sst.thrashing	count thrashing
	tra	next_entry	and skip this one
looked:
	orsa	ptw|0		turn on pre_paged bit (already looked)
	lda	ptw|0		refetch the ptw
"
"	Now get decision index
"
	ldq	0,dl		The object of this game is to make Q1, Q2,
	cana	ptw.phu1,dl	and Q3 contain PHU, PHM, and PHU1, resp.
	tze	*+2		We accomplish this by inspecting each PTW bit
	orq	=o040000,du	and setting the appropriate bit in Q.
	cana	ptw.phm+ptw.phm1,dl
	tze	*+2
	orq	=o100000,du
	cana	ptw.phu,dl
	tze	*+2
	orq	=o200000,du

	cana	add_type.core,dl	check if core address
	tze	not_in_core	if not skip cme stuff
"
"	It's in core, get CMEP
"
	orq	=o400000,du	turn on the in core bit for decision
	arl	3-1		compute core map entry pointer
	eax4	sst|sst.cmp,*au
	increment sst|sst.post_in_core meter
	lda	page_fault$cme_devadd,*4 extract device ID from core map entry
not_in_core:
	cana	add_type.pd,dl	is this on pd?
	tnz	pp.yes_pd
	eaa	0
	tra	*+2
pp.yes_pd:
	lda	1,dl
	lrl	1
	lda	ast|aste.per_process_word,3	get aste word
	cana	aste.per_process,du 	is it p/p?
	tnz	pp.yes_pp
	eaa	0
	tra	*+2
pp.yes_pp:
	lda	1,dl
	lrl	1		shift in mlsw bit to complete index
	qrl	30		right justify the decision index
	increment sst|sst.tree_count,ql meter the decision
	stq	pre_temp+5	save index in stack

	lls	33		split the index into wordno and shift value
	qrl	15
	lrl	3
	qrl	15
"
"	QU now contains the word offset
"	QL contains the shift index
"
	lda	code_tree,qu	get code word in a
	arl	code_shift,ql*	shift to lower a
	ana	=o17,dl		leave only decision bits
	sta	pre_temp

	cana	working_set,dl	should we count this page in working set ?
	tze	*+2		no, skip count instruction
	aos	pre_temp+4	yes, count it

	cana	post_purge_bit,dl	should we purge the page?
	tze	check_move	no, go check if we should move the core map entry

	lxl0	ptw|0		see if page is out of service
	canx0	ptw.os,du 	..
	tnz	check_move	yes, skip write request
	canx0	ptw.valid,du	see if page not in core
	tze	check_move	yes, skip write request
	increment sst|sst.post_purgings
	tsx7	page_fault$write_page see if must write the page and do so if must
	eppap	pds$trace get pointer to array again
check_move:
	lda	pre_temp		see if we should move in list
	cana	moved_bit,dl
	tze	check_used	no, look at next entry
	tsx7	page_fault$thread_to_lru yes, move in core map
check_used:
	lda	pre_temp		retrieve coded value again
	cana	used_bit_off,dl
	tze	next_entry
	lcq	ptw.phu+ptw.phu1+1,dl	turn OFF used bit in PTW
	ansq	ptw|0

next_entry:
	lxl0	pre_temp+1	get next free slot in pre-page list
	eax0	2,0		increment to next entry
	cmpx0	ap|trace.last_available_word
	tmi	*+2
	eax0	0		yes, reset index
	tra	post_loop 	loop back for another entry

done_post:
"
"	Now reset all pre-paged flags
"
	lca	ptw.pre_paged+1,dl	get mask to turn off flag
	ldx0	ap|trace.index_word	start at beginning of list again
turn_off: cmpx0	ap|trace.next_free_word are we done?
	tze	mtime		yes, abort loop
	ldq	ap|trace.data+1,0	get word 1 for page number
	canq	=o770000,du	see if page fault entry
	tnz	next_turn_off	no, skip the entry
	stq	temp		save for subtract
	ldx3	ap|trace.data,0	get astep
	eax2	aste_size,3	fabricate ptp
	adlx2	temp		..
	ansa	sst|0,2		turn off pre-paged bit
next_turn_off:
	eax0	2,0		go to next entry
	cmpx0	ap|trace.last_available_word wrap-around?
	tmi	*+2		no,
	eax0	0		yes
	tra	turn_off		loop back

mtime:
	ldx0	ap|trace.next_free_word reset pointer to start of active list
	stx0	ap|trace.index_word

	eppap	pds$apt_ptr,*	set pre-page-size in APT entry
	ldq	pre_temp+4
	mpy	tc_data$working_set_factor
	qrl	18
	adq	tc_data$working_set_addend
	stq	ap|apte.ws_size
	asq	sst|sst.pre_page_size

	read_clock		meter time
	sbaq	pre_time
	adaq	sst|sst.post_purge_time
	staq	sst|sst.post_purge_time
	increment sst|sst.post_purge_calls

	tsx7	page_fault$trace_scheduling
	tsx7	page_fault$unlock_ptl
	return

code_shift:
	arg	32
	arg	28
	arg	24
	arg	20
	arg	16
	arg	12
	arg	8
	arg	4


	end
