" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	stock
"
"	Record Stock Management Routines
"
"	Entries:
"	
"	  withdraw - withdraws a single record address from a stock
"
"	  withdraw_range - withdraws a single record address from
"	            a stock within a range of addresses
"
"	  withdraw_range_ext - same as withdraw_range, available
"	  	  outside ALM Page Control
"
"	  deposit - deposits a single record address into a stock
"
"	  reset_os - resets all out-of-service bits in a stock
"
"	  flush_os - removes all out-of-service entries from a stock.
"		  Called when there is an unrecoverable I/O error
"		  on a Volume Map page.
"
"	  check_low_threshold - checks for stock below threshold and 
"		  selects a volume map page to replenish it
"
"	  recover - adjust stock counts (called during ESD)
"
"	Written January 1982 by J. Bongiovanni
"	Modified July 1982, J. Bongiovanni, for withdraw_range_ext
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	name	stock
	segdef	deposit
	segdef	withdraw
	segdef	withdraw_range
	segdef	withdraw_range_ext
	segdef	reset_os
	segdef	flush_os
	segdef	check_low_threshold
	segdef	recover

	bool	live_address,377777
	bool	os_address,400000

reset_os_upper_bits:
	oct	377777777777		" reset_os
	oct	000000777777		" flush_os
reset_os_lower_bits:
	oct	777777377777		" reset_os
	oct	777777000000		" flush_os

high_record_address:
	oct	377777000000

"
	include	aste
"
	include	page_info
"
	include	ptw
"
	include	pvte
"
	include	pxss_page_stack
"

	include	stack_frame

	include	stock_seg
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	withdraw - routine to withdraw a single record address
"
"	tsx7	stock$withdraw
"	<return if no addresses in stock>
"	<return if succeed with withdrawal>
"
"	On entry
"	    ab -> stock_seg$meters
"	    bb -> stock of interest
"
"	On exit
"	    Areg contains address
"
"
"	withdraw_range - routine to withdraw a single record address
"	     within a range specified
"
"	Same as above, except on entry
"	    AU = high address (rec < high address)
"	    AL = low address  (rec >= low address)
"
"	withdraw_range_ext - withdraw range accessible outside
"	    ALM Page control
"
"	    call page$withdraw_range (pvtep, low_address, high_address, record_address)
"
"	No locks are required by this routine.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

withdraw_range_ext:
	push
	
	stz	ap|8,*			" Clear returned address
	tsx6	page_fault$init_savex

	eppbp	ap|2,*			" bp -> ptr -> PVTE
	eppbp	bp|0,*			" bp -> PVTE
	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> stock
	epbpab	bb|0			" ab -> base of stock_seg
	eppab	ab|stock_seg.meters		" ab -> meters

	lda	ap|6,*			" AL = high address
	als	18			" AU = high address
	ora	ap|4,*			" AU = high address, AL = low address
	tsx7	withdraw_range		" Try for an address
	tra	withdraw_range_ext_ret	" None

	eppap	sp|stack_frame.arg_ptr,*	" Restore argument list ptr
	sta	ap|8,*			" Record address

withdraw_range_ext_ret:
	return



withdraw:
	eax6	0			" withdraw
	stz	stock_temp_1		" low address
	lda	high_record_address
	sta	stock_temp_2		" high address
	increment	ab|rsmeters.n_withdraw_attempt
	tra	withdraw_join

withdraw_range:
	eax6	1			" withdraw_range
	increment	ab|rsmeters.n_withdraw_range
	sta	stock_temp_2		" high address
	ana	-1,dl
	als	18			" low address
	sta	stock_temp_1

withdraw_join:
	lxl0	bb|record_stock.stock_offset
	eppap	bb|0,x0			" ap -> stock

	eax6	0,x6			" withdraw_range?
	tnz	withdraw_set_begin		" Yes

	lxl0	bb|record_stock.search_index	" Roving pointer
	eax0	-1,x0
	tra	withdraw_common

withdraw_retry:
	eax6	0,x6			" withdraw_range?
	tze	withdraw_set_begin		" No
	eax6	1,x6			" Bump bail-out counter
	cmpx6	2,du			" Gone through once
	tpl	0,x7			" Yes -- once is enough

withdraw_set_begin:
	ldx0	-1,du			" Start at the beginning

withdraw_common:
	ldx1	bb|record_stock.n_free_in_stock " Any free?
	tze	0,x7			" No -- give up

withdraw_loop:
	increment	ab|rsmeters.withdraw_stock_steps " Meter
	eax0	1,x0			" Next 2 entires
	cmpx0	bb|record_stock.n_words_in_stock " Any left
	tpl	withdraw_retry		" No - retry from the top

withdraw_loop_retry:
	ldq	ap|0,x0			" Next 2 entries
	tze	withdraw_loop		" Both empty
	lda	ap|0,x0			" Protected by Q, stacq
	eax1	0,au			" Check upper address
	tmoz	withdraw_check_lower	" Empty or out-of-service
	cmpx1	stock_temp_1		" >= low address
	tmi	withdraw_check_lower	" No
	cmpx1	stock_temp_2		" < high address
	tpl	withdraw_check_lower	" No
	ana	-1,dl			" Mark upper as empty
	tra	withdraw_try		" And attempt lockless withdraw
withdraw_check_lower:
	eax1	0,ql			" Look at lower entry
	tmoz	withdraw_loop		" Empty or out-of-service
	cmpx1	stock_temp_1		" >= low address
	tmi	withdraw_loop		" No
	cmpx1	stock_temp_2		" < high address
	tpl	withdraw_loop		" No
	ana	-1,du			" Mark lower as empty

withdraw_try:				
	stacq	ap|0,x0			" Attempt lockless withdraw
	tze	withdraw_succeed		" Made it
	increment	ab|rsmeters.withdraw_stock_losses
	tra	withdraw_loop_retry		" Meter and retry

withdraw_succeed:
	eax6	0,x6			" withdraw_range ?
	tnz	withdraw_leave_pointer	" Yes -- don't adjust pointer
	sxl0	bb|record_stock.search_index	" Roving pointer
withdraw_leave_pointer:
	ldq	bb|record_stock.n_free_in_stock " Adjust count lockless
	lda	bb|record_stock.n_free_in_stock
	sba	1,du			" One fewer free record
	stacq	bb|record_stock.n_free_in_stock
	tnz	withdraw_leave_pointer	" Lost race, retry

	eaa	0,x1			" Record address
	arl	18			" Areg = record address
	increment	ab|rsmeters.n_pages_withdraw_stock
	tra	1,x7

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	deposit - routine to deposit a single address
"
"	tsx7	stock$deposit
"	<return if fail>
"	<return if succeed>
"
"	On entry,
"	    Areg = address to deposit
"	    ab -> stock_seg$meters
"	    bb -> stock of interest
"
"	No locks are required by this routine.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

deposit:
	cana	live_address,dl		" Valid record address
	tze	page_error$deposit_zero_address " No - bad lossage

	sta	stock_temp_1		" Record address
	als	18			" Into upper
	sta	stock_temp_2

	increment	ab|rsmeters.n_deposit_attempt

	lxl0	bb|record_stock.stock_offset
	eppap	bb|0,x0			  " ap -> stock
	lxl0	bb|record_stock.search_index	" Roving pointer
	eax0	1,x0			" Adjust for initial decrement
	tra	deposit_common

deposit_retry:
	ldx0	bb|record_stock.n_words_in_stock " Start at the top

deposit_common:
	lxl1	bb|record_stock.n_os_in_stock	" Check whether any free slots
	adlx1	bb|record_stock.n_free_in_stock "   exist
	cmpx1	bb|record_stock.n_in_stock	
	tpl	0,x7			" None free

deposit_loop:
	increment	ab|rsmeters.deposit_stock_steps
	eax0	-1,x0			" 2 entries/word
	tmi	deposit_retry		" None left

deposit_loop_retry:
	ldq	ap|0,x0			" Next 2 entries
	lda	ap|0,x0			" Protected by Qreg, stacq
	tze	deposit_try_upper		" Both entries free

	eax1	0,au			" Check upper entry
	tnz	deposit_check_lower		" Not free
deposit_try_upper:
	ora	stock_temp_2		" Dep address into upper
	tra	deposit_try

deposit_check_lower:
	eax1	0,al			" Check lower entry
	tnz	deposit_loop		" Not empty
	ora	stock_temp_1		" Dep address into lower

deposit_try:
	stacq	ap|0,x0			" Lockless deposit
	tze	deposit_succeed		" We win
	increment ab|rsmeters.deposit_stock_losses
	tra	deposit_loop_retry		" Lose - meter and retry

deposit_succeed:
	lda	1,dl			" Set up to increment number OS
	ldx1	stock_temp_2		" Address just deposited
	tmi	deposit_os		" An out-of-service address
	lda	1,du			" Set up to increment number free
	sxl0	bb|record_stock.search_index	" Roving pointer

deposit_os:
	sta	stock_temp_2		" Save for lost race
deposit_os_retry:
	ldq	bb|record_stock.n_free_in_stock
	lda	stock_temp_2		" Restore
	adla	bb|record_stock.n_free_in_stock
	stacq	bb|record_stock.n_free_in_stock  " Lockless update
	tnz	deposit_os_retry		" Lost - retry

	increment	ab|rsmeters.n_pages_deposit_stock
	tra	1,x7

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	reset_os - routine to reset all out-of-service bits
"
"	tsx7	stock$reset_os
"
"	On entry,
"	    ab -> stock_seg$meters
"	    bb -> stock of interest
"
"	No locks are required by this routine
"
"	flush_os - routine to remove all out-of-service entries
"	   from a stock.
"
"	On entry, same as above
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

reset_os:
	eax6	0			" reset_os
	tra	reset_os_common

flush_os:
	eax6	1			" flush_os

reset_os_common:
	increment	ab|rsmeters.reset_os_calls

	lxl0	bb|record_stock.stock_offset
	eppap	bb|0,x0			 " ap -> stock
	ldx0	bb|record_stock.n_words_in_stock

reset_os_loop:
	eax0	-1,x0			" One less
	tmi	0,x7			" Done - exit

reset_os_loop_retry:
	ldq	ap|0,x0			" Next 2 addresses
	ldx1	0,du			" Count of OS reset
	lda	ap|0,x0			" Protected by Qreg, stacq
	tze	reset_os_loop		" None in use
	tpl	reset_os_check_lower	" High address not OS
	ldx1	1,du			" Count of OS reset
	ana	reset_os_upper_bits,x6	" Reset/Flush
reset_os_check_lower:
	cana	=o400000,dl		" Low address OS
	tze	reset_os_try		" No
	adlx1	1,du			" Bump counter
	ana	reset_os_lower_bits,x6	" Reset/Flush

reset_os_try:
	eax1	0,x1			" Any to reset
	tze	reset_os_loop		" No
	stacq	ap|0,x0			" Lockless
	tze	reset_os_update_count	" Won
	increment	ab|rsmeters.reset_os_losses	" Lost - meter and retry
	tra	reset_os_loop_retry

reset_os_update_count:
	stz	stock_temp_1
	stz	stock_temp_2
	sxl1	stock_temp_2		" To decrement count of OS
	eax6	0,x6			" Flush call
	tnz	reset_os_update_retry	" Yes - don't increment free count
	stx1	stock_temp_1		" To increment count of free
reset_os_update_retry:
	ldq	bb|record_stock.n_free_in_stock " Change count of OS, free
	lda	bb|record_stock.n_free_in_stock " Lockless
	adla	stock_temp_1
	sbla	stock_temp_2
	stacq	bb|record_stock.n_free_in_stock
	tnz	reset_os_update_retry	" lost race
	tra	reset_os_loop


"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	check_low_threshold - routine to check whether a stock is below
"		threshold, and (if so) to select a volmap page to
"		replenish it
"
"	tsx7	stock$check_low_threshold
"	<return if within threshold or no page selected>
"	<return if below threshold and page selected>
"
"	On entry,
"	    ab -> stock_seg$meters
"	    bb -> stock of interest
"	    bp -> pvte
"
"	On exit,
"	    if page selected, page number is in Areg
"
"	This routine requires the Global Page Table Lock, the per-volume
"	volume map lock (with async state idle)
"
"	A volmap page is selected as follows:
"
"	1. If a page is in memory, it is selected
"	2. If no page is in memory, the lowest page which can replenish
"	   the stock to target is selected
"	3. Otherwise, the page with the largest number of free records
"	   is selected
"	
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

check_low_threshold:
	lxl0	bb|record_stock.n_os_in_stock
	adlx0	bb|record_stock.n_free_in_stock
	cmpx0	bb|record_stock.low_threshold	" Below threshold
	tpl	0,x7			" No

	aos	ab|rsmeters.low_thresh_detected " Meter
	stx0	stock_temp_1		" Free + OS
	ldx0	bb|record_stock.target	" Target for Free + OS
	sbx0	stock_temp_1		" Shortfall
	stx0	stock_temp_1

	lprpap	bp|pvte.volmap_astep	" ap -> ASTE for volmap_seg
	eppap	ap|aste_size		" ap -> Page Table for volmap_seg
	lxl0	bb|record_stock.n_volmap_pages
	stz	stock_temp_2
	sxl0	stock_temp_2
	lda	0,dl			" Page number
	ldx1	-1,du			" First page which can replenish
	ldx2	-1,du			" Page with largest number free

check_low_mem:
	ldx0	bb|record_stock.n_free,al	" Number free records this page
	tze	check_low_next		" None - skip
	ldq	ap|0,al			" Qreg = PTW
	canq	ptw.valid,dl		" In memory
	tnz	1,x7			" Yes - exit with page number in Areg
	cmpx0	stock_temp_1		" Enough to replenish to target
	tmi	check_low_not_enough	" No
	eax1	0,x1			" Found such yet
	tpl	check_low_next		" Yes - use first such
	eax1	0,al			" No - this is such
	tra	check_low_next

check_low_not_enough:
	eax2	0,x2			" Largest number records so far
	tpl	check_low_highest		" One such found
	eax2	0,al			" This is it
	tra	check_low_next
check_low_highest:
	cmpx0	bb|record_stock.n_free,x2	" Is this one higher
	tmoz	check_low_next		" No
	eax2	0,al			" Yes

check_low_next:
	ada	1,dl			" Bump page number
	cmpa	stock_temp_2		" Done all pages
	tmi	check_low_mem		" No
	eaa	0,x1			" First which can replenish
	tpl	check_low_got		" One was found
	eaa	0,x2			" Largest number records
	tpl	check_low_got		" Somebody found
	aos	ab|rsmeters.low_thresh_fails	" Nobody found - meter
	tra	0,x7			" And exit

check_low_got:
	arl	18			" Page number in AL
	tra	1,x7
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	recover - routine to recompute counts in the record stock for ESD.
"		The system may have crashed due to a stock inconsistency,
"		and this may allow ESD to succeed. Of course, major
"		trashage to the stock cannot be bypassed.
"
"	On entry,
"	    ab -> stock_seg$meters
"	    bb -> stock of interest
"	    bp -> pvte
"
"	This routine should be called only during ESD
"
"	
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

recover:
	stz	stock_temp_1		" Number free
	stz	stock_temp_2		" Number out-of-service

	sprpbp	bb|record_stock.pvtep	" Restore pointer to PVTE
	lxl0	bb|record_stock.stock_offset
	eppap	bb|0,x0			" ap -> stock array

	ldx0	bb|record_stock.n_words_in_stock

recover_loop:
	eax0	-1,x0			" Index into stock array
	tmi	recover_done		" None left
	lda	ap|0,x0			" Next 2 entries
	tze	recover_loop		" Both empty
	tpl	recover_check_upper		" Upper not out-of-service
	aos	stock_temp_2		" Upper out-of-service
	tra	recover_check_lower
recover_check_upper:
	cana	live_address,du		" Upper empty
	tze	recover_check_lower		" Yes
	aos	stock_temp_1		" No
recover_check_lower:
	cana	os_address,dl		" Lower out-of-service
	tze	recover_check_lower_inuse	" No
	aos	stock_temp_2		" Yes
	tra	recover_loop

recover_check_lower_inuse:
	cana	live_address,dl		" Lower empty
	tze	recover_loop		" Yes
	aos	stock_temp_1		" No
	tra	recover_loop

recover_done:
	lda	stock_temp_1		" Number free
	als	18			" Align
	ora	stock_temp_2		" Merge in number out-of-service
	sta	bb|record_stock.n_free_in_stock " And set count into stock

	tra	0,x7

	end
