" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"
"	GET_PTRS_ -- Program to remap page and segment control pointers
"
"	Modification history:
"	Modified for followon by Dick Snyder Aug 5, 1972
"	Modified to fix get_ptrs_$given_astep bugs by Dick Snyder Sept 6, 1972
"	New Storage System. given_cmep and given_ptp deleted. March 21, 1975 by BSG.
"	Modified to remove SDW alignment assumption, 5/14/75 by Mabee
"	Modified for ADP conversion, 03/17/81, W. Olin Sibert
"	Modified for $given_sdw, unpaged segment check, 03/21/81, WOS
"	Modified for $ptw_to_cmep, 04/17/81, WOS
"	Modified for paged unpaged segments, October 1983, Keith Loepere.
"

	name	get_ptrs_

	entry	given_astep	" ASTEP to SDW conversion
	entry	given_sdw 	" SDW to ASTEP conversion
	entry	given_segno	" SEGNO to ASTEP conversion
	entry	ptw_to_cmep	" PTWP to CMEP conversion

"
"	GET_PTRS_$GIVEN_ASTEP
"
"	   Returns an SDW containing the proper address for a segment, given
"	   its ASTE pointer. Call is:
"
"		sdw = get_ptrs_$given_astep (astep);

given_astep:
	epp1	sst$+0		get pointer to SST
	epp2	ap|2,*		get ptr to astep
	eaa	pr2|0,*		get word offset of aste in au

	ldq	pr1|aste.ptsi_word,au get page table size for bound field
	qrs	aste.ptsi_shift
	anq	aste.ptsi_mask,dl	leave only page table size index
	ldq	sst$pts,ql	pick up page table size from SST header
	qls	page_power-4	Convert to 16 word block count
	sblq	1,dl		Subtract 1 for bound field format
	qls	sdw.bound_shift	and put it in the right region of the SDW

	adla	aste_size,du	add in size of an AST entry
	arl	18		and put in AL to get page table offset

	adla	sst$ptwbase	add in absolute offset of page table array
	als	coreadd_to_sdw.ls	position page table address

	oraq	read_write_valid	set correct bits in sdw
	epp2	ap|4,*		return the SDW to the caller
	sta	pr2|0		in a possibly unaligned word pair
	stq	pr2|1

return:	short_return

" 
"
"	GET_PTRS_$GIVEN_SDW
"
"	   Given a pointer to an SDW, returns the AST entry pointer for the
"	   (necessarily paged) segment. Call is:
"
"		astep = get_ptrs_$given_sdw (sdw_ptr);
"
"	GET_PTRS_$GIVEN_SEGNO
"
"	   Like get_ptrs_$given_sdw, but returns an AST entry pointer when
"	   given a segment number. Call is:
"
"		astep = get_ptrs_$given_segno (segno);
"

given_sdw:
	epp2	ap|2,*		Get the pointer argument
	epp2	pr2|0,*

join_given_sdw:
	ldq	pr2|0		Get the first (address) word of the SDW
	epp1	sst$+0		get pointer to SST
	qrl	sdw_to_coreadd.rl	right justify address
	anq	=v36/coreadd_mask	and leave only the address portion
	tze	return_null

	cmpq	unpaged_page_tables$0+upt.sst_last_loc	test for pagedness -- 
	tpl	return_null	this call invalid for unpaged segments
	sbq	unpaged_page_tables$0+upt.sst_absloc	make relative to SST segment
	tmi	return_null

	epp3	pr1|-aste_size,ql	generate final pointer

return_sdwadd:
	spri3	ap|4,*		return to user
	short_return



given_segno:
	lda	ap|2,*		pick up the segment number
	als	1		multiply segno by sdw size
	epp2	dseg$+0,al	get a pointer to the SDW,
	tra	join_given_sdw	and join common code



return_null:
	epp3	=its(-1,1),*	get a null pointer
	spri3	ap|4,*		and return it
	short_return

" 

"	GET_PTRS_$PTW_TO_CMEP
"
"	   Returns a pointer to the CME describing the page frame for the given
"	   PTW, or returns null if the PTW is not a valid (in-core) PTW
"
"		cmep = get_ptrs_$ptw_to_cmep (ptwp);

ptw_to_cmep:
	epp1	ap|2,*		address ptw pointer
	lda	pr1|0,*		get the PTW
	cana	ptw.valid,dl	is the page in core?
	tze	return_null	nope.

	ana	ptw_add_mask,du	mask off all but the address
	arl	ptw_to_cmep_lower.rl and convert to a CMEP
	epp3	sst$cmp,*al	the CME pointer itself

	spri3	ap|4,*		return it
	short_return


" 

	even
read_write_valid:	" Bits for a valid (incore) SDW with read/write access

	iftarget	l68	" Bits are in different halfwords
	  vfd	18/0,18/sdw.valid
	  vfd	18/sdw.read+sdw.write,18/sdw.not_a_gate
	ifend

	iftarget	adp
	  vfd	18/0,18/sdw.valid
	  vfd	18/0,18/sdw.read+sdw.write+sdw.not_a_gate
	ifend



	include	page_info

	include	sdw
	include	ptw
	include	aste
	include	cmp
	include	unpaged_page_tables
	end
