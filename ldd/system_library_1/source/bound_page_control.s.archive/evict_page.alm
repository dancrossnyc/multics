" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

""""""""""""""""""""""""""""""""""""""""""""""""""
"
"	call page$evict (cmep, event);
"
"	forces current occupant out of core pointed to by cmep
"	Event returned non-zero if waiting necessary.
"
"	May take 2 calls for wired os page.
"
"	Bernard Greenberg, May 16, 1974
"	Adjusted for pc_recover_sst, BSG, 9/3/77
"	Modified for cam_cache by J. Bongiovanni 2/23/81
"	Modified 03/14/81, W. Olin Sibert, for ADP conversion
"	Modified for read_page_abs calling sequence by J. Bongiovanni 2/26/82
"	Modified to move core map, E. N. Kittlitz, 6/21/82.
"	Modified to call page_synch$move, Chris Jones, 05/09/84.
"
""""""""""""""""""""""""""""""""""""""""""""""""""


	include	ptw
	include	sdw
	include	aste
	include	stack_frame
	include	mc
	include	null_addresses
	include	add_type
	include	page_info
	include	sst
	include	cmp
	include	pxss_page_stack

" 

	name	evict_page


	segdef	evict,wire_abs


	link	abs_seg_link,abs_seg$

"
evict:	push	"		set up stack frame
	lda	evict_entry,dl	set up entry flag
	sta	entry_sw
	eppbp	ap|2,*		point to first arg
	eppbp	bp|0,*		point to cme of interest
	stz	ap|4,*		zero wait event
	eax4	bp|0		get cmep into x4
	epbpbb	sst$		bb -> SST through out page
	tsx6	page_fault$init_savex	set up for internal calls
	stx4	pre_temp		save cmep

	tsx6	make_ptw		compute coreadd
	stq	pre_temp+1	save coreadd
	stq	core_add

	ldx2	page_fault$cme_ptwp,*4 see if in use
	tze	.ret		no, can return
	lxl3	page_fault$cme_astep,*4 pick up astep
	stx2	ptp_astep		save page pointer
	sxl3	ptp_astep		and astep
	eppbp	sst|0,2		point to ptw with bp
	lda	ptw|0		now inspect ptw
	cana	ptw.os,dl		read or write going on?
	tnz	await_ptw		yes, must wait for ptw event
	cana	ptw.wired,dl	wired page, not out of service
	tnz	move_wired

	lca	ptw.valid+1,dl	set to turn off access
	ansa	ptw|0		turn off access
	tsx7	cam_cache$cam_cache	tell world, blast out of caches
				"core_add set by make_ptw call above
	lda	ptw|0		look at ptw now
	cana	ptw.phm+ptw.phm1,dl	see if modified at _a_n_y time previous
	tze	not_mod_ptw	no, very easy case

	tsx7	page_fault$find_core_	get a page to move into
	tsx7	set_up_abs_seg_2	get destination abs seg on ab
	tsx6	make_from_abs_seg	get ap abs seg together
	tsx7	move_page		move page into new location
	tsx7	swap_cme		fix core map
	lda	page_fault$cme_flags,*x5
	cana	cme.synch_held,dl
	tze	2,ic
	tsx7	page_synch$move	" update dm_journal_seg_
	tsx7	swap_ptw		change ptw and open it
	szn	dev_signal	did parity wipe page out?
	tnz	parity_destroys_page tough _.
.ret:	return	"		done
"

not_mod_ptw:	"		page was not modified - make find_core_ look guilty
	tsx7	page_fault$cleanup_page	do find-core wrap-up
	return


await_ptw:	"		come here to wait for out of service
	eppap	sp|stack_frame.arg_ptr,*	get ptr to arglist
	sxl2	ap|4,*		set wait event
	return


move_wired:	"		very hard case- move wired page
	tsx7	page_fault$find_core_	get new place for page
	tsx7	set_up_abs_seg_2	get ab-based abs-seg
	tsx6	make_from_abs_seg	set up 'from' abs seg
	ldx2	ptp_astep		restore original ptw ptr
	eppbp	sst|0,2

move_merge:
	lda	ptw|0		get ptw
	ana	ptw.phm,dl	isolate mod bit
	sta	sst|sst.evict_phmbit	save for pcrsst
	stx2	sst|sst.evict_ptp	now recoverable till stz, then ok.
	ersa	ptw|0		possibly turn off, in an RAR way
	eax5	0,al		save state of modified bit

	tsx7	cam_cache$cam_ptws		drive page out of cache and ptwams
	tsx7	move_page
	tsx7	cam_cache$cam_with_wait	stop the world
	lda	ptw|0		look at ptw once more now
	cana	ptw.phm,dl	see if moved any time in between
	tze	not_mod_during_move

	tsx7	move_page		move with world stopped
	increment	sst|sst.recopies	meter

not_mod_during_move:
	eaa	0,5		restore old mod bit
	arl	18
	orsa	ptw|0
	stz	sst|sst.evict_ptp	tell pcrsst its safe.
	tsx7	swap_cme		move core map data around.
	lda	page_fault$cme_flags,*x5
	cana	cme.synch_held,dl
	tze	2,ic
	tsx7	page_synch$move	" update dm_journal_seg_
	tsx7	swap_ptw		fix the ptw
	stz	scs$cam_wait	release everybody
	camp
	cams	4		CLEAR CACHE
	szn	dev_signal	did parity galumph the page?
	tnz	parity_destroys_page
	return	"		and we are done
"  "
"
"	Damage segment due to parity error.
"	Continue to use page.
"
parity_destroys_page:

	lda	aste.fmchanged,du
	orsa	ast|aste.fmchanged_word,3	"damage seg
	lda	aste.damaged,dl
	orsa	ast|aste.damaged_word,3

	lda	pre_temp+1	set up params for report call
	sta	core_add
	ldx4	pre_temp		old frame of interest

	lda	ptw|0		wired case?
	cana	ptw.wired,dl
	tnz	page_error$wired_parity_error crash

	tsx7	page_error$page_move_parity
	tsx7	page_fault$delete_mm_frame 	take mem out of use
	tra	.ret
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"							"
"							"
"	call page$wire_abs (cmep, event, astep, i);		"
"							"
"	wires page (astep, i) into core pointed to by cmep	"
"	may take up to 3 calls, as per convention.		"
"							"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

wire_abs:	push			"get stack together
	lda	abs_wire_entry,dl	set entry indr
	sta	entry_sw
	tsx6	page_fault$init_savex	set up call stack
	eppbp	ap|6,*		bp -> astep
	eppbp	bp|0,*		bp -> aste
	eax3	bp|0		set x3 to aste
	epbpbb	bp|0		bb		-> sst$+0
	lxl0	ap|8,*		x0 contains i
	eppbp	bp|aste_size,0	bp -> ptw
	eax2	bp|0		x2 -> ptw

	stz	ap|4,*		init wait event
	epplb	ap|2,*		lb -> cmep
	eax4	lb|0,*		x4 -> cme
	stx2	ptp_astep		save x2 similarly
	sxl3	ptp_astep		and astep

	lda	ptw.wired,dl	attempt to wire page wherever it is -
				"This deterministically  suppresses further writes,
				" causes page to stay in if os on read.

	cana	ptw|0		see if already wired
	tnz	already_wired	dont wire it, already wired
	orsa	ptw|0
	increment	sst|sst.wired	maintain meter

already_wired:
	lda	ptw|0		inspect the ptw
	cana	ptw.os,dl		see if reading or writing
	tnz	await_ptw		wait for ptw event
	cana	ptw.valid,dl	see if in core now
	tnz	in_core_now	already in - move if not already in place
	cana	ptw.er,dl		previous error?
	tze	absread.not_prev_error

	tsx7	page_fault$disk_offlinep
	 tra	absread.await_any
absread.not_prev_error:
	tsx7	page_fault$read_page_abs	attempt to read page in
	 tra	await_a		wait for event
	 tra	absread.no_wait
	 tra	absread.await_any	volmap event

"
"	If read_page_abs said no event, then page is in.
"
absread.no_wait:
	return

await_a:
	eax2	0,au		wait for event in a
	tra	await_ptw

absread.await_any:
	eppap	sp|stack_frame.arg_ptr,*
	sta	ap|4,*
	return



in_core_now:			"page already in core, might be in right place,
				"then again, might not
	tsx6	make_ptw		get current ptw for cme
	era	ptw|0		compare with real ptw
	ana	ptw_add_mask,du	look at only address
	tze	.ret		in core, right place, access on, abs wired. GREAT!

	tsx7	set_up_abs_seg_2	set up 'to' abs_seg
	lda	ptw|0		get current home of page
	ana	ptw_add_mask,du	get only address bits
	arl	ptw_to_coreadd.rl	align to coreadd (ADP/L68 OK)
	sta	core_add		set up for set_up_abs_seg
	als	coreadd_to_cmep.ls	get in cmep units (ADP/L68 OK)
	eaa	sst|sst.cmp,*au	get cmep
	sta	pre_temp
	tsx6	page_fault$set_up_abs_seg	set up 'from' abs seg
	tra	move_merge	move the page
" "
"
"
"	subroutines
"
move_page:	"		move a page from the ap abs seg to the ab abs seg
	stz	dev_signal	init parity check
	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	ldi	scu.ir.bm+scu.ir.parm,dl	clear out inds, set parmask
	lda	1024*4,dl
	mlr	(pr,rl),(pr,rl)
	desc9a	ap|0,al
	desc9a	ab|0,al
	nop	0
	nop	0		allow cp and cx boards to synchronize
	sti	temp
	ldi	scu.ir.bm,dl
	nop	0
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
	lda	temp		get ir
	ana	scu.ir.par,dl
	orsa	dev_signal	store it
	tra	0,7


set_up_abs_seg_2:			" set up abs seg on ab - assumes x4 -> cme
	ldx0	lp|abs_seg_link
	adlx0	lp|abs_seg_link	" get 2*segno in x0
	eaa	0,x4		" Get CMEP in A, and
	sbla	sst|sst.cmp+1	" convert to CME offset
	als	cmep_to_sdw.ls	" Convert to SDW address (ADP/L68 OK)

	eaq	0		" zero the q
	oraq	sdw_bits
	staq	dseg$+0,x0	" store in dseg

	iftarget	l68		" CAM is different on ADP/L68
	  cams	0		" clear am of segs
	  camp	0		" and poss abs-seg pages
	ifend
	iftarget	adp
	  cams	0		" clear am of segs
	  camp	0		" and poss abs-seg pages
	ifend

	eppab	lp|abs_seg_link,*	" Point PR1 at the abs_seg
	tra	0,x7		" and return

" 

swap_ptw:
				"makes ptw point at cme of x4
	tsx6	make_ptw
	ora	add_type.core,dl
	staddra	ptw|0		store in ptw
	lda	ptw.valid,dl	get access bit
	orsa	ptw|0		turn on access if not there already
	tra	0,7

swap_cme:	"			cleans up cme's for swap_ptw
	ldx2	ptp_astep		restore ptw if clobbered
	lxl3	ptp_astep		restore astep
	eppbp	sst|0,2
	ldx5	pre_temp		"old" cme

	lda	page_fault$cme_devadd,*5 get "old" (only) devadd
	staddra	page_fault$cme_devadd,*4 move to "new" cme, which is still free.
	sxl3	page_fault$cme_astep,*4 still unofficial
	eax0	0		get a zero ready.

"
"	The interval between the next two instructions is unsafe
"	with respect to pc_recover_sst. If somehow (only possibility is
"	operand cpu error on this cpu) we lose control between them, pcrsst
"	will clobber this page. This is not bad.
"
	even
	inhibit	on <+><+><+><+><+><+><+><+><+><+><+><+>
	stx0	page_fault$cme_ptwp,*5 It's not in old one,
	stx2	page_fault$cme_ptwp,*4 It's now in new one.
	inhibit	off <-><-><-><-><-><-><-><-><-><-><-><->

	sxl0	page_fault$cme_astep,*5 for cleanliness only.
	tra	0,7

make_ptw: 			" subr to make ptw (and addr in QL) from x4
	eaa	0,x4		get cmep
	sbla	sst|sst.cmp+1	get offset

	iftarget	l68		" L68 & ADP shift differently here
	  als	cmep_to_ptw.ls	" make PTW addr from cmep offset
	ifend
	iftarget	adp
	  arl	cmep_to_ptw.rl	" make PTW addr from cmep offset
	ifend

	eaq	0,au		make lower in q
	qrl	ptw_to_coreadd.rl (ADP/L68 OK)
	tra	0,x6

make_from_abs_seg:	" Common, TSX6 subroutine, relys on page_fault to TRA back
	ldq	pre_temp+1	get 'from' core_add
	stq	core_add		set for page_fault routine
	tra	page_fault$set_up_abs_seg	finish same


"  "
"
"	constants
"
	even
sdw_bits: 		" Bits for abs-seg SDW -- it is
			" Address 0, read/write, one unpaged page

	iftarget	L68	" SDW is different format for each
	  vfd	18/0,18/sdw.valid
	  vfd	1/0,14/(1024/16)-1,3/sdw.read+sdw.write,18/sdw.unpaged
	ifend

	iftarget	ADP
	  vfd	18/0,18/sdw.valid
	  vfd	14/(1024/16)-1,4/0,18/sdw.read+sdw.write+sdw.unpaged
	ifend

	end
