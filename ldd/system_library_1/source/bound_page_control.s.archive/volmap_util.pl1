/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
volmap_util$free_address_for_scavenge:
     proc (Pvtx, Record_Address);

/*  Volume Map Utilities

    free_address_for_scavenge   - ensures that a record address is not free
			    by removing from stock and volume map

    Written July 1982 by J. Bongiovanni
    Modified November 1982, J. Bongiovanni, to check stock under volmap lock
*/

/*  Parameter  */

	dcl     Pvtx		 fixed bin;	/* PVTE index */
	dcl     Record_Address	 fixed bin (18);

/*  Automatic  */

	dcl     bit_no		 fixed bin;
	dcl     page_no		 fixed bin;
	dcl     p99		 pic "99";
	dcl     record_address	 fixed bin (18);
	dcl     volmap_locked	 bit (1) aligned;
	dcl     vpage_ptr		 ptr;
	dcl     word_no		 fixed bin;

/*  Static  */

	dcl     NULL_SDW		 fixed bin (71) int static options (constant) init (0);
	dcl     RECORDS_PER_WORD	 fixed bin int static options (constant) init (32);

/*  Based  */

	dcl     1 vpage		 aligned based (vpage_ptr),
		2 word		 (0:1023) aligned,
		  3 pad1		 bit (1) unaligned,
		  3 bits		 (0:31) bit (1) unaligned,
		  3 pad2		 bit (3) unaligned;

/*  External  */

	dcl     volmap_abs_seg$	 external;

/*  Entry  */

	dcl     condition_		 entry (char (*), entry);
	dcl     page$grab_volmap_page_unwired entry (ptr, fixed bin, ptr);
	dcl     page$lock_volmap	 entry (ptr);
	dcl     page$unlock_volmap	 entry (ptr);
	dcl     page$withdraw_range	 entry (ptr, fixed bin (18), fixed bin (18), fixed bin (18));
	dcl     page$write_volmap_page_unwired entry (ptr, fixed bin);
	dcl     pmut$swap_sdw	 entry (ptr, ptr);
	dcl     syserr		 entry options (variable);
%page;
	record_address = Record_Address;

	page_no = -1;
	volmap_locked = "0"b;

	call SETUP_LOCK;

	call condition_ ("page_fault_error", PAGE_FAULT_ERROR);

	call FIND_VOLMAP_PAGE (record_address, page_no);

	call page$grab_volmap_page_unwired (pvtep, page_no - 1, vpage_ptr);

	call page$withdraw_range (pvtep, record_address, record_address + 1, (0));

	word_no = divide (record_address - record_stock.volmap_page (page_no).baseadd, RECORDS_PER_WORD, 17);
	bit_no = mod (record_address - record_stock.volmap_page (page_no).baseadd, RECORDS_PER_WORD);
	vpage.word (word_no).bits (bit_no) = "0"b;

	call page$write_volmap_page_unwired (pvtep, page_no);
	page_no = -1;

	call UNLOCK_RESET;

	return;
%page;
/*  Internal Procedure to setup pointers and lock the volume map  */

SETUP_LOCK:
     proc;

	pvtep = addr (addr (pvt$array) -> pvt_array (Pvtx));
	record_stockp = pvte.volmap_stock_ptr;

	call page$lock_volmap (pvtep);
	volmap_locked = "1"b;

	call pmut$swap_sdw (addr (volmap_abs_seg$), addr (pvte.volmap_seg_sdw));

     end SETUP_LOCK;



/*  Internal Procedure to reset and unlock  */

UNLOCK_RESET:
     proc;


	if page_no > 0
	then call page$write_volmap_page_unwired (pvtep, page_no - 1);
	page_no = -1;

	if volmap_locked
	then call page$unlock_volmap (pvtep);
	volmap_locked = "0"b;

	call pmut$swap_sdw (addr (volmap_abs_seg$), addr (NULL_SDW));

     end UNLOCK_RESET;
%page;
/* Internal Procedure to find the Volume Map page associated with a given
   address */

FIND_VOLMAP_PAGE:
     proc (Devadd, Page_no);

	dcl     Devadd		 fixed bin (18) parameter;
	dcl     Page_no		 fixed bin parameter;

	dcl     vpagex		 fixed bin;
	dcl     vpage_found		 bit (1);
	dcl     address		 fixed bin;


	vpage_found = "0"b;
	address = Devadd;

	if address < pvte.baseadd | address >= pvte.baseadd + pvte.totrec
	then call syserr (CRASH, "volmap_util: Address ^o out of paging region on ^a_^a.", address, pvte.devname,
		convert (p99, pvte.logical_area_number));

	do vpagex = record_stock.n_volmap_pages to 1 by -1 while (^vpage_found);
	     if address >= record_stock.volmap_page (vpagex).baseadd
	     then do;
		     vpage_found = "1"b;
		     Page_no = vpagex;
		end;
	end;

	if ^vpage_found
	then call syserr (CRASH, "volmap_util: Invalid address ^o on ^a_^a.", address, pvte.devname,
		convert (p99, pvte.logical_area_number));
	return;

     end FIND_VOLMAP_PAGE;
%page;
/*  Internal Procedure to clean up and continue signalling of
    page_fault_error
*/

PAGE_FAULT_ERROR:
     proc (Mcptr, Condition, Coptr, Infoptr, Continue) options (non_quick);

	dcl     Mcptr		 ptr;
	dcl     Condition		 char (*);
	dcl     Coptr		 ptr;
	dcl     Infoptr		 ptr;
	dcl     Continue		 bit (1) aligned;

	call UNLOCK_RESET;
	Continue = "1"b;

     end PAGE_FAULT_ERROR;
%page;
%include pvte;
%page;
%include stock_seg;
%page;
%include syserr_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   volmap_util: Address XXXXXX out of paging region on dskX_NN.

   S:     $crash

   T:	During a physical volume scavenge

   M:	The scavenger attempted to remove an invalid address from the
   volume map.

   A:     $recover

   Message:
   volmap_util: Invalid address XXXXXX on dskX_NN.

   S:     $crash

   T:	During a physical volume scavenge

   M:	In attempting to deposit address XXXXXX on device dskX_NN, an invalid
   volume map offset was computed. 

   A:	$recover


   END MESSAGE DOCUMENTATION */

     end volmap_util$free_address_for_scavenge;
