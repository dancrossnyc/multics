" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	volmap_page
"
"	Routines to act on single pages of a volume map
"
"	Entries:
"
"	    grap_volmap_page_unwired  - wires and reads in a volmap page
"                                         deposits excess stock to volume map
"
"	    write_volmap_page_unwired - writes and unwires a volmap page
"
"	    start_async_read          - starts an asynchronous read cycle to
"				  the volume map
"
"	    start_async_write         - starts an asynchronous write cycle to
"				  the volume map
"
"	    post_io                   - posts a volume map i/o
"
"	    poll_io                   - polls for complete volume map i/os
"
"	Written February 1982 by J. Bongiovanni
"	Modified September 1982, J. Bongiovanni, not to do read on OS page
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	name	volmap_page
	segdef	grab_volmap_page_unwired
	segdef	write_volmap_page_unwired
	segdef	start_async_read
	segdef	start_async_write
	segdef	post_io
	segdef	poll_io

	link	volmap_abs_seg_link,volmap_abs_seg$

	even
pc_wired_arg_list:
	vfd	18/6,18/4,36/0
pread_arg_list:
	vfd	18/6,18/4,36/0
pwrite_arg_list:
	vfd	18/4,18/4,36/0
notify_arg_list:
	vfd	18/2,18/4,36/0

one:	dec	1
"
	include	aste
"
	include	page_info
"
	include	ptw
"
	include	pvte
"
	include	pxss_page_stack
"
	include	stock_seg
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	grab_volmap_page_unwired
"
"	call page$grab_volmap_page_unwired (pvtep, page_no, page_ptr)
"
"	    pvtep = pointer to PVTE (Input)
"	    page_no = page number in volume map (Input)
"	    page_ptr = pointer to page in volume map (Output)
"
"	The volume map must be locked to this process with asynchronous
"	state of idle. volmap_abs_seg must be set to refer to this volume
"	map.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

grab_volmap_page_unwired:
	push
	tsx6	page_fault$init_savex	" Recursive use of x7
	
	eppbp	ap|2,*			" bp -> ptr -> PVTE
	eppbp	bp|0,*			" bp -> PVTE
	tsx6	check_valid_call		" Check lock, async state, abs seg

	lprpab	bp|pvte.volmap_astep	" ab -> ASTE for volume map
	spriab	arg+8
	eppab	arg+8
	spriab	arg+2
	eppab	ap|4,*			" Page number
	spriab	arg+4
	eppab	one			" Number of pages
	spriab	arg+6
	ldaq	pc_wired_arg_list
	staq	arg
	call	pc_wired$wire_wait(arg)

	lda	ap|4,*			" Page number
	als	page_power		" Offset in segment
	eppab	volmap_abs_seg$0,al		" ab -> page
	spriab	ap|6,*			" Return to caller

	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> record stock
	lxl0	bb|record_stock.high_threshold " Above high threshold
	cmpx0	bb|record_stock.n_free_in_stock
	tpl	grab_volmap_returns		" No
	epbpab	bb|0			" ab -> base of stock_seg
	eppab	ab|stock_seg.meters		" ab -> meters
	aos	ab|rsmeters.high_thresh_detected
	lda	ap|4,*			" Page number
	tsx7	volmap$deposit_to_volmap	" Deposit excess for this page

grab_volmap_returns:
	return
"

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	write_volmap_page_unwired
"
"	call page$write_volmap_page_unwired (pvtep, page_no)
"
"	    pvtep = pointer to PVTE (Input)
"	    page_no = page number in volume map (Input)
"
"	The volume map must be locked to this process with asynchronous
"	state of idle. volmap_abs_seg must be set to refer to this volume
"	map.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

write_volmap_page_unwired:
	push
	eppbp	ap|2,*			" bp -> ptr -> PVTE
	eppbp	bp|0,*			" bp -> PVTE
	tsx6	check_valid_call		" Check lock, async state, abs-seg

	lprpab	bp|pvte.volmap_astep	" ab -> ASTE for volmap_seg
	spriab	arg+8
	eppab	arg+8
	spriab	arg+2
	eppab	ap|4,*			" Page number
	spriab	arg+4
	eppab	one			" One page
	spriab	arg+6
	ldaq	pc_wired_arg_list
	staq	arg
	call	pc_wired$unwire_write_wait(arg)

	return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	start_async_read
"
"	tsx7	volmap_page$start_async_read
"	<return if page already in memory>
"	<return if page not in memory>
"
"	On entry,
"	    bp -> PVTE
"	    ab -> stock_seg.meters
"	    Areg = page number in volume map
"	    Volume map locked to this process, async state idle
"	    PTL locked to this process
"
"	On exit,
"	    Async state is Read
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

start_async_read:
	tsx6	page_fault$savex		" Recursive use of x7

	increment	ab|rsmeters.async_read_calls

	sta	volmap_page_temp		" Page number

	lda	pds$processid		" Check PTL
	cmpa	sst$ptl
	tnz	page_error$ptl_not_locked
	cmpa	bp|pvte.volmap_lock		" Volmap lock held
	tnz	page_error$volmap_page_invalid_call " No
	ldx0	bp|pvte.volmap_async_state	" State idle
	cmpx0	VOLMAP_ASYNC_IDLE,du
	tnz	page_error$volmap_page_invalid_call  " No
	lda	volmap_page_temp		" Page number
	ana	-1,dl			" Just to be sure
	ora	VOLMAP_ASYNC_READ,du	" New async state
	sta	bp|pvte.volmap_async_state

	lda	volmap_page_temp		" Page number
	lprpap	bp|pvte.volmap_astep	" ap -> ASTE for volmap_seg
	ldq	ap|aste_size,al		" PTW
	canq	ptw.valid,dl		" In memory
	tnz	page_fault$unsavex		" Yes
	canq	ptw.os,dl			" I/O already in progress?
	tnz	page_fault$unsavex_1	" Yes - should never happen

	increment	ab|rsmeters.async_page_reads
	increment	sst$volmap_seg_page_faults
	spriap	arg+8
	eppap	arg+8
	spriap	arg+2
	eppap	volmap_page_temp		" Page number
	spriap	arg+4
	eppap	arg+10
	spriap	arg+6
	ldaq	pread_arg_list
	staq	arg
	call	page_fault$pread(arg)

	tsx7	post_io_pvtep		" Check for screw case
	tra	page_fault$unsavex_1

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	start_async_write
"
"	tsx7	page_fault$start_async_write
"	<return if page is in memory>
"	<return if page in not in memory>
"
"	On entry,
"	    bp -> PVTE
"	    Volmap async state is Read
"	    PTL locked to process
"
"	On exit,
"	    Volmap async state is Write
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

start_async_write:
	tsx6	page_fault$savex		" Recursive use of x7

	sta	volmap_page_temp		" Page number
	lda	pds$processid
	cmpa	sst$ptl			" PTL held
	tnz	page_error$ptl_not_locked

	ldx0	bp|pvte.volmap_async_state
	cmpx0	VOLMAP_ASYNC_READ,du
	tnz	page_error$wrong_async_state

	lda	volmap_page_temp		" Page number
	ana	-1,dl			" Just in case
	ora	VOLMAP_ASYNC_WRITE,du	" New state
	sta	bp|pvte.volmap_async_state

	lda	volmap_page_temp		" Page number
	lprpap	bp|pvte.volmap_astep	" ap -> ASTE for volmap_seg
	ldq	ap|aste_size,al		" PTW
	canq	ptw.valid,dl		" In memory
	tze	page_fault$unsavex_1	" No
	canq	ptw.os,dl			" Someone else writing it?
	tnz	page_fault$unsavex		" Yes - skip call to pwrite

	spriap	arg+6			" astep
	eppap	arg+6
	spriap	arg+2
	eppap	volmap_page_temp		" Page number
	spriap	arg+4
	ldaq	pwrite_arg_list
	staq	arg
	call	page_fault$pwrite(arg)

	tsx7	post_io_pvtep		" Check for screw case
	tra	page_fault$unsavex
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	post_io
"
"	tsx7	volmap_page$post_io
"
"	On entry,
"	    Areg = pvtx
"	    PTL locked to process
"
"	post_io_pvtep - internal procedure, registers already setup
"
"	tsx7	post_io_pvtep
"
"	On entry,
"	    bp -> PVTE
"	    PTL locked to process
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


post_io:
	eax0	0			" Pvtx given
	sta	volmap_page_temp		" pvtx
	tra	post_io_join

post_io_pvtep:
	eax0	1			" Pvtep given

post_io_join:
	read_clock
	staq	post_io_start_time		" For metering

	eax0	0,x0			" Pvtep given
	tpnz	post_got_pvtep		" Yes
	ldq	pvte_size,dl		" Compute pvtep
	mpy	volmap_page_temp		" Offset in array, one too high
	eppbp	pvt$array
	eppbp	bp|-pvte_size,ql		" bp -> PVTE

post_got_pvtep:
	lda	bp|pvte.volmap_async_state	" State in AU, page in AL
	tra	post_io_state,au		" Do what's appropriate
post_io_state:
	tra	0,x7			" Idle
	tra	post_read			" Read
	tra	post_write		" Write

post_read:
	tsx6	page_fault$savex		" Recursive use of x7
	lprpap	bp|pvte.volmap_astep	" ap -> ASTE for volmap_seg
	ldq	ap|aste_size,al		" PTW
	canq	ptw.er,dl			" I/O Error
	tze	post_read_noerr		" No
	tsx7	io_error			" Yes - handle
	tra	post_idle			" Set state to idle and notify
post_read_noerr:
	canq	ptw.valid,dl		" In memory
	tnz	post_read_in_mem		" Yes
	canq	ptw.os,dl			" Did we lose the I/O?
	tnz	page_fault$unsavex		" No
	tra	post_idle			" Yes, reset it..time will cure all

post_read_in_mem:
	ana	-1,dl			" Page number
	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> record stock
	epbpab	bb|0			" ab -> base of stock seg
	eppab	ab|stock_seg.meters		" ab -> meters
	tsx7	volmap$withdraw_from_volmap	" Replenish stock

	lda	bp|pvte.volmap_async_page
	ana	-1,dl			" Page number
	tsx7	start_async_write		" Write it back
	tra	post_meter_exit
	tra	page_error$volmap_page_async_error " Not in memory

post_write:
	tsx6	page_fault$savex		" Recursive use of x7
	lprpap	bp|pvte.volmap_astep	" ap -> ASTE for volmap_seg
	ldq	ap|aste_size,al		" PTW
	canq	ptw.er,dl			" I/O Error
	tze	post_write_noerr		" No
	tsx7	io_error			" Yes - handle
	tra	post_idle			" Set state to idle and notify
post_write_noerr:
	canq	ptw.os,dl			" I/O finished
	tnz	page_fault$unsavex		" No

	canq	ptw.valid,dl		" In memory
	tze	post_write_not_mod		" No, write surely done
	canq	ptw.phm+ptw.phm1,dl		" Page modified
	tze	post_write_not_mod		" No, write completed

"	Write posted but page modified. Possibly a race, although the locking
"	strategy should prevent this. More likely, the disk went offline.
"	In this case, the write is notified with no error by page control.
"	We recover by re-issuing the I/O

	spriap	arg+6			" ptr -> ASTE of volmap_seg
	eppap	arg+6
	spriap	arg+2
	lda	bp|pvte.volmap_async_page	" Page number in lower
	ana	-1,dl
	sta	arg+8
	eppap	arg+8
	spriap	arg+4
	ldaq	pwrite_arg_list
	staq	arg
	call	page_fault$pwrite(arg)
	tra	page_fault$unsavex

post_write_not_mod:
	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> record stock
	epbpab	bb|0			" ab -> base of stock seg
	eppab	ab|stock_seg.meters		" ab -> meters
	tsx7	stock$reset_os		" Write finished, OK to use addresses

post_idle:
	stz	bp|pvte.volmap_async_state	" Idle
post_write_retry:
	ldq	bp|pvte.volmap_idle_notify_word " Anybody waiting for idle
	lda	bp|pvte.volmap_idle_notify_word
	cana	pvte.volmap_idle_notify,dl
	tze	post_meter_exit		" No
	era	pvte.volmap_idle_notify,dl	" Reset notify switch
	stacq	bp|pvte.volmap_idle_notify_word
	tnz	post_write_retry		" Lost race

	eaa	bp|0			" AU = PVTE offset
	arl	18			" AL = PVTE offset
	ora	pvt$volmap_idle_wait_constant " Areg = wait event
	sta	arg+4
	eppap	arg+4
	spriap	arg+2
	ldaq	notify_arg_list
	staq	arg
	call 	pxss$notify(arg)

post_meter_exit:
	increment	ab|rsmeters.async_post_io_calls
	read_clock
	sbaq	post_io_start_time
	adaq	ab|rsmeters.async_post_io_time
	staq	ab|rsmeters.async_post_io_time
	tra	page_fault$unsavex

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	poll_io
"
"	call page$poll_volmap_io
"
"	Called with no locks held, wired and masked
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

poll_io:
	push
	tsx6	page_fault$init_savex		" Recursive use of x7

	tsx7	page_fault$lock_ptl			" Spin lock

	ldq	pvte_size,dl			" Index to last PVTE
	mpy	pvt$n_entries
	eax0	0,ql				" x0 -> one beyond end
	stx0	volmap_page_temp_1			" Save
poll_loop:
	ldx0	volmap_page_temp_1			" Restore PVTE index
	eax0	-pvte_size,x0			" One fewer to go
	tmi	poll_done
	stx0	volmap_page_temp_1			" Save index to PVTE
	eppbp	pvt$array
	eppbp	bp|0,x0				" bp -> PVTE
	ldq	bp|pvte.used_word
	canq	pvte.used,dl			" PVTE in use
	tze	poll_loop				" No - skip
	ldx1	bp|pvte.volmap_async_state		" Asynchronous activity state
	cmpx1	VOLMAP_ASYNC_IDLE,du		" Idle
	tze	poll_loop				" Yes - skip

	sxl1	volmap_page_temp_1			" Save async state
	tsx7	post_io_pvtep			" Try to post the I/O
	lxl1	volmap_page_temp_1			" Restore async state
	cmpx1	bp|pvte.volmap_async_state		" Did state change?
	tze	poll_loop				" No
	tsx7	page_error$poll_state_change		" Yes - report it
	tra	poll_loop

poll_done:
	eppbb	sst$				" Needed by unlock_ptl
	tsx7	page_fault$unlock_ptl
	return


"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	io_error - internal procedure to handle unrecoverable I/O error
"
"	tsx7	io_error
"
"	On entry,
"	  bp -> PVTE
"	  Areg = page number in volmap_seg
"
"	The strategy is to lose all free addresses on the page with the
"	I/O error. Any OS pages are flushed from the stock, and the
"	count of free addresses on that page is set to zero.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

io_error:
	tsx6	page_fault$savex		" Recursive use of x7
	sta	volmap_page_temp
	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> Record stock
	epbpab	bb|0			" ab -> base of stock_seg
	eppab	ab|stock_seg.meters		" ab -> stock_seg$meters

	tsx7	stock$flush_os		" Flush any out-of-service addresses
	
	lda	volmap_page_temp		" Page number
	ldx0	bp|pvte.nleft		" Total number records left
	sblx0	bb|record_stock.volmap_page,al " Minus number free this page
	tpl	io_error_nleft_ok		" If positive
	eax0	0
io_error_nleft_ok:
	stx0	bp|pvte.nleft		" Becomes new number left
	eax0	0
	stx0	bb|record_stock.volmap_page,al " Clear count of free this page
	ldx0	bp|pvte.vol_trouble_count	" Increment the trouble count
	adlx0	1,du
	stx0	bp|pvte.vol_trouble_count

	tsx7	page_error$volmap_io_error	" Tell the world
	tra	page_fault$unsavex		" And return

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	check_valid_call - internal procedure to validate that
"	volume map is locked to this process, async state is idle,
"	and volmap_abs_seg is setup.
"
"	tsx6	check_valid_call
"
"	On entry,
"	    bp -> PVTE
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

check_valid_call:
	ldx0	lp|volmap_abs_seg_link	" Segment number of volmap_abs_seg
	adx0	lp|volmap_abs_seg_link	" Offset of SDW in DSEG
	ldaq	dseg$0,x0			" SDW
	cmpaq	bp|pvte.volmap_seg_sdw	" The right one
	tnz	page_error$volmap_page_invalid_call

	lda	pds$processid
	cmpa	bp|pvte.volmap_lock		" Volmap lock held
	tnz	page_error$volmap_page_invalid_call

	ldx0	bp|pvte.volmap_async_state	" State idle
	cmpx0	VOLMAP_ASYNC_IDLE,du
	tnz	page_error$volmap_page_invalid_call

	tra	0,x6




	end
