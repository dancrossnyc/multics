" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                    "
"	cam_cache					         "
"                                                                    "
"	Subroutine to clear ptw associative memory and (optionally)"
"	cache memory on this and all other processors.	         "
"	The subroutine will not return until this has been         "
"	accomplished.                                              "
"                                                                    "
"	This subroutine has two sets of entry points.  One set     "
"	consists of entry points callable only from within         "
"	bound_page_control (via tsx7).  For these, arguments are   "
"	passed via the pxss/page_fault stack frame.  The other     "
"	set consists of entry points callable externally (via      "
"	the transfer-module page.  For these, arguments are        "
"	passed in the usual (PL/1) manner.                         "
"                                                                    "
"	The only possible parameter to cam_cache entry points is   "
"	an absolute memory address for selective cache clearing    "
"	For calls from within bound_page_control, this address is  "
"	passed in cell core_add in the stack frame.  For external  "
"	calls, the PTW of the page containing the target address   "
"	for selective clearing is passed in Argument 1.            "
"                                                                    "
"	The functions performed by the subroutine are as follows,  "
"	with the internal and external entry points:               "
"                                                                    "
"	Clear all ptw associative memory, selectively clear cache  "
"		cam_cache	(internal)                             "
"		cam_cache_ext (external)                         "
"                                                                    "
"	Clear all ptw associative memory, clear all cache          "
"		cam (internal)                                   "
"		cam_ext (external)                               "
"                                                                    "
"	Clear all ptw associative memory                           "
"		cam_ptws (internal)	                             "
"		cam_ptws_ext (external)                          "
"                                                                    "
"	Clear all ptw associative memory, selectively clear cache, "
"	     set scs$cam_wait so that all other processors wait    "
"	     for scs$cam_wait to be cleared before resuming.       "
"		cam_with_wait (internal)                         "
"		cam_with_wait_ext (external)		         "
"                                                                    "
"
"                                                                    "
"	The protocol for multi-processor clearing is as follows:   "
"                                                                    "
"		This processor obtains the connect lock.         "
"                                                                    "
"		Under the connect lock, the processor            "
"		   1. sets scs$cam_pair to the instructions      "
"		      which do the clearing                      "
"		   2. sets the scs$fast_cam_pending cell         "
"		      non-zero for all other processors          "
"		   3. if this is a cam-with-wait call, sets      "
"		      the appropriate bit in scs$cam_wait for    "
"		      all other processors                       "
"		   4. sends a connect to all other processors    "
"		   5. XED's the code in scs$cam_pair             "
"		   6. waits for all scs$fast_cam_pending cells   "
"		      to clear (indicating clearing done by      "
"		      all other processors).                     "
"		   7. releases the connect lock and returns      "
"		Note - if only one processor is active, most     "
"		   of this is skipped.                           "
"                                                                    "
"		Upon receipt of a connect, all other processors  "
"		   1. if its scs$fast_cam_pending cell is set,   "
"		      XED the code in scs$cam_pending and        "
"		      clear it scs$fast_cam_pending cell         "
"		   2. if its bit in scs$cam_wait is set, wait    "
"		      for that bit to clear (this clearing is    "
"		      done by the caller of cam_cache on the     "
"		      originating processor).                    "
"                                                                    "
"                                                                    "
"	There are only two ways a conect fired to another          "
"	processor can be lost.  One is hardware failure, and the   "
"	other is a processor put into step mode before the connect "
"	and taken out of step mode after the connect.  There is    "
"	a hedge against the latter here.  If all processors have   "
"	not responded within an unreasonable amount of time, the   "
"	connects are re-issued, and the waiting begins anew.       "
"	This hedge should not be construed as implicitly condoning "
"	putting a cpu on a multi-processor in step mode.  It may   "
"	help in truly strange circumstances.                       "
"                                                                    "
"                                                                    "
"	This code was copied from page_fault and modified for      "
"	fast connects by J. Bongiovanni in February 1981.          "
"	Modified September 1983, E. N. Kittlitz per S. Harris      "
"	  (UNCA) to not destroy temp_2/x0 if lock contention       "
"                                                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	name	cam_cache
	segdef	cam_cache,cam_cache_ext
	segdef	cam,cam_ext
	segdef	cam_ptws,cam_ptws_ext
	segdef	cam_with_wait,cam_with_wait_ext

	iftarget	adp
	  warn	(WARNING: cam_cache has not been converted for the ADP.)
	ifend

channel_mask_set:
	oct	17,17

"
cam_cache_ext:			" external entry for coreadd cache clear
	stz	pds$temp_2		turn off wait flag
	lda	ap|2,*		PTW is passed in
	tsx7	cj1b		merge with common code
.rt:	short_return		" exit

cam_cache:			" entry to cam and clear cache
	stz	pds$temp_2		turn off wait flag
cj1a:	lda	core_add		put core_add in pds
	als	coreadd_to_ptw.ls	shift to AU
cj1b:	ana	ptw_add_mask,du	mask extraneous bits
	sta	pds$temp_1
	eax0	0		set flag for PTW clear with cache
	tra 	cam_join_1	join common code

cam_ext:	push

	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	lxl1	prds$processor_tag	get set for masking
	lprpab	scs$mask_ptr,1
	xec	scs$read_mask,1
	staq	temp	
	lxl1	prds$processor_tag	we may have lost the processor
	lprpab	scs$mask_ptr,1
	ldaq	scs$sys_level
	xec	scs$set_mask,1

	tsx7	cam		join common code

	ldaq	temp		retrieve previous mask
	oraq	channel_mask_set	turn on all channel mask
	anaq	scs$open_level	turn off unconfigured channel mask bits
	lxl1	prds$processor_tag
	lprpab	scs$mask_ptr,1
	xec	scs$set_mask,1
	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->

	return

cam:				"camp and cams, clear all cache
	eax0	4
	tra	cam_join_0	set switch not to full Cam

cam_with_wait_ext:
	stc1	pds$temp_2	" external entry issue a cam 
				" and set scs$cam_wait
	eax7	.rt
	lda	ap|2,*
	tra	cj1b

cam_with_wait:			" entry from evict_page
	stc1	pds$temp_2		set wait flag
	tra	cj1a

cam_ptws_ext:			" remove only PTWs from AMs
	eax7	.rt
cam_ptws:
	eax0	2

cam_join_0:
	stz	pds$temp_2		set no wait sw
cam_join_1:
	nop	0,du		allow for lockup fault reset, other CPU connect
	nop	0,du		ditto
	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
	lda	prds$processor_pattern  exclude this processor
	era	=-1		..
	ana	scs$processor	find which processors are running
	tnz	hard_cam		hard case, multiple processors

	ldx1	pds$temp_1		prepare for cache selective cam, if needed
	xed	cam_table,0	execute proper type of cam
	tra	0,7

hard_cam:
	lda	pds$processid	lock the connect lock
	stac	scs$connect_lock	..
	tnz	cam_join_1	wait on other CPU without destroying x0, temp_2
	szn	pds$temp_2		see if waiting case
	tze	wait_join		tra if no
	lda	prds$processor_pattern  set flags for other processor(s)
	era	=-1		..
	ana	scs$processor	but not for this processor
	sta	scs$cam_wait	set key word in scs

wait_join: 
	eax0	0,0		test xr0 for coreadd case
	tze	hard_cam_with_coreadd
	ldaq	cam_table,0	access proper cams
	tra	cam_join_2

hard_cam_with_coreadd:
	ldaq	cam_other_for_cache	get instructions for relocation
	ora	pds$temp_1		insert selective clear addr
cam_join_2:
	staq	scs$cam_pair	set up for all cpu's
repeat:
	eax0	0		start counting with 0
	ldq	0,dl		keep track of array size
	lda	prds$processor_pattern   set up for all processors
	era	=-1		except us
	ana	scs$processor	which are running
nextp:	stz	scs$fast_cam_pending,0  clear cell just in case
	tpl	missing		processor not running or am us
	stc1	scs$fast_cam_pending,0  flag for cam/cache clear
	cioc	scs$cow_ptrs,0*	send connect
missing:	eax0	1,0		bump to next processor
	adq	4,dl		bump array size in chars
	als	1		shift bit pattern to next cpu high
	tnz	nextp		more processors running
	xed	scs$cam_pair	clear our own

	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
	lda	1000,dl		bail-out of loop limit
	epplb	scs$fast_cam_pending array of check-off cells
wait:	sba	1,dl		one more loop
	tmi	repeat		try entire cycle again
	cmpc	(),(pr,rl),fill(0)	check entire array clear
	desc9a	0,0
	desc9a	lb|0,ql
	nop
	nop
	tnz	wait		all cells haven't cleared

	lda	0,dl		clear the connect lock now
	ansa	scs$connect_lock	..
	tra	0,7

	even
cam_table:			"table of appropriate CAM pairs
	camp	4,1		"clear selective cache and ptws
	nop

	camp			"clear just ptws
	nop

	camp			"clear ptws
	cams	4		"and all cache

cam_other_for_cache:
	camp	4		"clear selective cache and ptws
	nop	0,du

"
	include	pxss_page_stack
	include	page_info

	end
	
