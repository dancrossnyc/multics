" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************


" HISTORY COMMENTS:
"  1) change(87-02-18,Lippard), approve(87-03-16,MCR7640),
"     audit(87-06-17,Farley), install(87-07-17,MR12.1-1043):
"     Added volmap word validity check (fix by Swenson).
"                                                      END HISTORY COMMENTS


" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	volmap
"
"	Routines for manipulating the volume map, migrating record addresses
"	between the volume map and the stock. 
"
"	Entries:
"		withdraw_from_volmap - volmap into stock
"		deposit_to_volmap    - stock into volmap
"		drain_stock	 - empty stock into volmap
"		reset_pvte	 - reset lock, state for ESD
"
"	These routines are controlled by threshold values in the stock.
"
"	This version has some quick kludges for the old volmap format.
"	It will be changed for the new format.
"
"	Written February 1982 by J. Bongiovanni
"	Modified December 1982 by J. Bongiovanni to reset ovfl before fno
"	
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	name	volmap

	segdef	withdraw_from_volmap
	segdef	deposit_to_volmap
	segdef	drain_stock
	segdef	reset_pvte

	equ	word_to_record.ls,5
	equ	volmap_page_high,1024
	equ	volmap_first_page,64
	bool	high_record_address,377777
	bool	os_address,400000
	bool	volmap_word_mask,400000000007

	link	volmap_abs_seg_link,volmap_abs_seg$

"
	include	page_info
"
	include	pvte
"
	include	pxss_page_stack
"
	include	stock_seg
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	withdraw_from_volmap
"
"	tsx7	volmap$withdraw_from_volmap
"
"	On entry,
"	    bp -> pvte
"	    ab -> stock_seg$meters
"	    bb -> record_stock
"	    Areg contains page number in volmap_seg
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

withdraw_from_volmap:
	increment	ab|rsmeters.n_v_withdraw_attempts

	ldx0	bb|record_stock.volmap_page,al " Number free records this page
	tze	0,x7			" None to be had

	ldx0	bb|record_stock.target	" Is volume shut down
	tze	0,x7			" Yes

	tsx6	page_fault$savex
	sta	volmap_temp
	tsx6	setup_abs_seg		" To read volmap_seg

	lda	volmap_temp		" Page number in volmap_seg
	als	page_power		" Offset within segment
	eppap	volmap_abs_seg$		" ap -> base of volmap_seg
	eppap	ap|0,al			" ap -> page of volmap
	spriap	volmap_save_ptr

withdraw_loop:
	lca	1,dl			" Bail-out counter
	sta	volmap_temp+1

	lxl0	volmap_temp		" Page number
	ldx1	bb|record_stock.volmap_page,x0 " Records left this page
	tmoz	withdraw_returns		" None
	ldx1	bb|record_stock.old_volmap_page,x0 " Roving pointer
	eppap	volmap_save_ptr,*

	eax0	0,x0			" Page number
	tnz	withdraw_inner_loop		" Not first page
	cmpx1	volmap_first_page,du	" Kludge for old volmap
	tpl	withdraw_inner_loop		" Above bound
	ldx1	volmap_first_page,du	" Set to minimum value

withdraw_inner_loop:
	increment	ab|rsmeters.withdraw_volmap_steps
	lda	ap|0,x1			" Any free this word
	tnz	withdraw_got		" Yes
	eax1	1,x1			" Bump to next word
	cmpx1	volmap_page_high,du		" End of page
	tmi	withdraw_inner_loop		" No
	aos	volmap_temp+1		" Bump bail-out counter
	tpnz	page_error$volmap_inconsistent
	ldx1	0,du			" Start at the beginning
	eax0	0,x0			" Unless its page 0
	tnz	withdraw_inner_loop
	ldx1	volmap_first_page,du	
	tra	withdraw_inner_loop

withdraw_got:
	cana	=v36/volmap_word_mask	" Check validity of word
	tnz	page_error$invalid_volmap_word " mbz bits are not
	ldi	0,dl			" Let fno work as expected, not as advertised
	lde	0,du			" Find first bit on
	fno
	stz	volmap_temp_1
	ste	volmap_temp_1
	lda	volmap_temp_1
	neg
	arl	17-7			" Record within word
	sta	volmap_temp_1

	arl	18			" AL = Record within word
	eaq	0,x1			" QU = Word offset within volmap page
	lrl	18			" QU = Record within word
					" QL = Word offset within  volmap page

	eaa	0,x1			" Word offset within volmap page
	als	word_to_record.ls		" Record offset of begin of word
	asa	volmap_temp_1		" Record offset within volmap page
	lxl2	bb|record_stock.volmap_page,x0 " Base address of page
	adlx2	volmap_temp_1		" True address
	eaa	0,x2
	arl	18
	ora	os_address,dl		" Out-of-service until write completes
	stx1	bb|record_stock.old_volmap_page,x0 " Roving pointer
	stq	volmap_temp_1		" QU = Record within word
					" QL = Word offset within volmap page
	tsx7	stock$deposit
	tra	withdraw_returns		" Stock is full

	eppap	volmap_save_ptr,*		" ap -> page of volmap
	lda	volmap_temp_1		" AU = Record within word
					" AL = Word offset within volmap page
	ldq	=o200000,du		" Reset bit in volmap
	qrl	0,au
	ersq	ap|0,al

	increment	ab|rsmeters.n_pages_withdraw_async
	ldx0	bp|pvte.nleft
	sblx0	1,du
	tmi	page_error$volmap_inconsistent
	stx0	bp|pvte.nleft
	lxl1	volmap_temp
	ldx0	bb|record_stock.volmap_page,x1
	sblx0	1,du
	tmi	page_error$volmap_inconsistent
	stx0	bb|record_stock.volmap_page,x1
	lxl0	bb|record_stock.n_os_in_stock
	adlx0	bb|record_stock.n_free_in_stock
	cmpx0	bb|record_stock.target	" Are we there yet
	tmi	withdraw_loop		" No

withdraw_returns:
	tsx6	restore_abs_seg
	tsx6	page_fault$unsavex
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	deposit_to_volmap
"
"	tsx7	volmap$deposit_to_volmap
"
"	On entry,
"	    bp -> pvte
"	    ab -> stock_seg$meters
"	    bb -> record_stock
"	    Areg contains page number in volmap_seg
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

deposit_to_volmap:
	increment	ab|rsmeters.n_v_deposit_attempts

	tsx6	page_fault$savex

	eax0	0,al			" Page number
	stx0	volmap_temp
	tsx6	setup_abs_seg

	lda	volmap_temp		" Page number
	ana	-1,du			"   in AU
	arl	18-page_power		" Offset in AL
	eppap	volmap_abs_seg$
	eppap	ap|0,al			" ap -> base of page

	ldx0	volmap_temp		" Page number
	lda	bb|record_stock.volmap_page,x0
	ana	-1,dl			" AL = base address
	sta	volmap_temp+1

	ldx1	high_record_address,du	" Set for last page
	lxl2	bb|record_stock.n_volmap_pages " Number of pages in volmap
	sblx2	1,du			" Index of last page
	cmpx2	volmap_temp		" Is this page the last
	tze	deposit_last		" Yes
	lxl1	bb|record_stock.volmap_page+1,x0 " Pick up base address of next
deposit_last:
	stx1	volmap_temp+1		" Low address in lower/high address is upper
	spriap	volmap_save_ptr

deposit_loop:
	lxl0	bb|record_stock.n_os_in_stock
	adlx0	bb|record_stock.n_free_in_stock
	cmpx0	bb|record_stock.target	" Are we done
	tmoz	deposit_returns		" Yes
	
	lda	volmap_temp+1		" Range of addresses this page
	tsx7	stock$withdraw_range	" Get an address within the rage
	tra	deposit_returns		" None left

	eppap	volmap_save_ptr,*
	ldx0	volmap_temp		" Page number
	lxl1	bb|record_stock.volmap_page,x0 " Base address of page
	stz	volmap_temp_1
	stx1	volmap_temp_1
	sta	devadd			" Save address for page_error
	als	18			" Address in AU
	sbla	volmap_temp_1		" Relative address within page
	tmi	page_error$bad_volmap_address	" Bogus
	arl	18			" Address in AL
	ldq	0,dl
	lrl	word_to_record.ls		" Word offset in AL
	qrl	18-word_to_record.ls	" Bit within word in QU
	eax1	0,qu			" Bit within word in x1
	ldq	=o200000,du		" Mask to set bit
	qrl	0,x1			" Shift to the right bit
	cmpa	1024,dl			" Within a page
	tpl	page_error$bad_volmap_address	" No
	canq	ap|0,al			" Already marked as free
	tze	deposit_valid		" No
	szn	pvt$shutdown_state		" In ESD?
	tnz	deposit_loop		" Yes, this can happen normally
	ldx1	1,du
	asx1	bp|pvte.vol_trouble_count	" Add to inconsistency count
	tsx7	page_error$deposit_inuse_address " And tell the world
	tra	deposit_loop

deposit_valid:
	orsq	ap|0,al			" Mark address as free
	increment	ab|rsmeters.n_pages_deposit_volmap
	ldx0	1,du
	asx0	bp|pvte.nleft
	ldx1	volmap_temp
	asx0	bb|record_stock.volmap_page,x1
	tra	deposit_loop

deposit_returns:
	tsx6	restore_abs_seg
	tsx6	page_fault$unsavex
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	drain_stock
"
"	call page$drain_record_stock (pvtep)
"
"	Where
"	    pvtep -> PVTE
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

drain_stock:
	push
	tsx6	page_fault$init_savex

	eppbp	ap|2,*			" bp -> ptr -> PVTE
	eppbp	bp|0,*			" bp -> PVTE
	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> record stock
	epbpab	bb|0			" ab -> base of stock_seg
	eppab	ab|stock_seg.meters		" ab -> meters

drain_retry:
	tsx7	lock_volmap$lock_wired_wait	" Get lock, async idle
	tra	drain_waits		" Failed, wait event in APTE

	ldx0	0,du			" Succeeded
	stx0	bb|record_stock.low_threshold	" Clear thresholds
	sxl0	bb|record_stock.high_threshold " And deposit will do the rest
	stx0	bb|record_stock.target
	lda	bb|record_stock.n_volmap_pages
	ana	-1,dl			" Areg = number of pages in volmap
	sta	volmap_temp_2

drain_loop:
	lda	volmap_temp_2
	sba	1,dl			" Next page to drain
	sta	volmap_temp_2
	tmi	drain_returns		" Done
	tsx7	deposit_to_volmap		" Clear this page
	tra	drain_loop

drain_returns:
	tsx7	lock_volmap$unlock_wired	" Unlock
	return

drain_waits:
	call	pxss$wait			" APTE already has event
	tra	drain_retry

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	reset_pvte
"
"	call page$reset_pvte (pvtep)
"
"	Where
"	     pvtep -> PVTE
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

reset_pvte:
	push

	eppbp	ap|2,*			" bp -> ptr -> PVTE
	eppbp	bp|0,*			" bp -> PVTE

	stz	bp|pvte.volmap_lock		" Clear lock
	stz	bp|pvte.volmap_async_state	" Set state to Idle, page to 0
	stz	bp|pvte.vtoc_map_lock	" Clear lock

	lda	bp|pvte.volmap_stock_ptr	" See whether stock exists
	tze	reset_pvte_returns		" No
	ana	=o007777,du		" Check for null pointer
	cmpa	=o007777,du
	tze	reset_pvte_returns		" Is null - no stock

	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> record stock
	epbpab	bb|0			" ab -> base of stock seg
	eppap	ap|stock_seg.meters		" ab -> meter area

	tsx7	stock$recover		" Attempt to fix any damage
	tsx7	stock$reset_os		" Reset any out-of-service
					" Safe since ESD doesn't withdraw

reset_pvte_returns:
	return

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	Internal procedure to set up and restore the volmap_abs_seg
"
"	tsx6	setup_abs_seg
"		bp -> PVTE
"
"	tsx6	restore_abs_seg
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

setup_abs_seg:

	ldx0	lp|volmap_abs_seg_link	" Segment number in x0
	adlx0	lp|volmap_abs_seg_link	" Offset in dseg
	ldaq	dseg$0,x0			" Previous SDW
	staq	volmap_save_sdw		" Save into stack
	ldaq	bp|pvte.volmap_seg_sdw	" Volmap seg of interest
	staq	dseg$0,x0			" Set the SDW
	cams				" And the SDWAM
	camp				" And the PTWAM
	tra	0,x6

restore_abs_seg:

	ldx0	lp|volmap_abs_seg_link	" Segment number in x0
	adlx0	lp|volmap_abs_seg_link	" Offset in dseg
	ldaq	volmap_save_sdw		" Previous value
	staq	dseg$0,x0			" Set the SDW
	cams				" And the SDWAM
	tra	0,x6

	end
