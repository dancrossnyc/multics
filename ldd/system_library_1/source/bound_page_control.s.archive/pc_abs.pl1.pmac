/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
         /* use: pl1_macro pc_abs.pl1.pmac  -target l68 */
pc_abs:
     procedure;

/* This procedure is responsible for adding and removing blocks of memory
   and for abs-wiring memory for I/O segments.

   The original pc_abs was written by Roger R. Schell in September 1970.
   Rewritten 6/3/74 by Bernard S. Greenberg for evict_page and page$pwait.
   Abs-wire functions removed 6/3/74 by B. Greenberg for I/O Buffer manager.
   Totally rewritten for new cme protocols, no remove list, and 75% code reduction, 03/12/75, BSG.
   Modified to allow evict_page to delete, for automatic parity deletion, BSG, 05/11/78.
   Modified to handle case when pages to be deleted are already gone, Chris Jones, 8/84
   Modified 1984-10-26 BIM to pay attention to the first argument to 
	  wire/unwire.
   Modified 1984-12-07, Keith Loepere, to not avoid abs wiring in low 256K.
*/


/****^  HISTORY COMMENTS:
  1) change(86-10-07,Farley), approve(86-11-20,MECR0002),
     audit(86-11-19,Fawcett), install(86-11-20,MR12.0-1222):
     Added three checks to the unwire_abs entry. First verify that the Astep
     parameter is non-null. Second verify that the page table word does really
     define a wired/in-core page. Third verify that the CME is really abs wired.
     Crash if any of these are incorrect.
  2) change(86-12-19,Farley), approve(86-12-19,MCR7587),
     audit(86-12-19,Fawcett), install(87-01-05,MR12.0-1253):
     Formal installation to close out above MECR0002.
                                                   END HISTORY COMMENTS */


dcl	Code		   fixed bin (35) parameter;
dcl	Absaddr		   fixed bin (26) parameter;
dcl	Fpage		   fixed bin (9) parameter; /* zero based */
dcl	Npages		   fixed bin (9) parameter;
dcl	Fframe		   fixed bin (16) parameter;
dcl	Nframes		   fixed bin (16) parameter;
dcl	Modulus		   fixed bin (16) parameter;
dcl	Astep		   pointer parameter;

dcl	astep		   ptr;
dcl	(ind, aind)	   fixed bin (35);
dcl	(fframe, nframes, frame, modulus)
			   fixed bin (16);
dcl	(fp, np, page)	   fixed bin (9);
dcl	frames		   (0:255) fixed bin (16);

dcl	oldmask		   fixed bin (71) aligned;
dcl	sptp		   ptr;

dcl	based_word	   fixed bin (35) aligned based;

dcl	page$evict	   entry (ptr, fixed bin (35));
dcl	page$pwait	   entry (fixed bin (35));
dcl	page$wire_abs	   entry (ptr, fixed bin (35), ptr, fixed bin (9));
dcl	pmut$lock_ptl	   entry (fixed bin (71) aligned, ptr);
dcl	pmut$unlock_ptl	   entry (fixed bin (71) aligned, ptr);
dcl	syserr		   entry options (variable);

dcl	ALL_ONES		   fixed bin (35) static options (constant) init (-1);
dcl	CORE		   bit (4) static options (constant) init ("8"b4);

dcl	error_table_$out_of_main_memory
			   fixed bin (35) external static;
dcl	sst$abs_wired_count	   fixed bin (35) external;
dcl	sst$astsize	   fixed bin (17) external;
dcl	sst$cmp		   ptr external;
dcl	sst$first_core_block   fixed bin (16) external;
dcl	sst$last_core_block	   fixed bin (16) external;
dcl	sst$nused		   fixed bin (35) external;
dcl	sst$usedp		   bit (18) aligned external;
dcl	sst$wusedp	   bit (18) aligned external;
dcl	sst$wired		   fixed bin (35) external;
dcl	sys_info$page_size	   fixed bin (17) external static;

dcl	(addr, addrel, binary, max, mod, null, ptr, rel, wordno)
			   builtin;

remove_core:
     entry (Fframe, Nframes, Code);

	Code = 0;
	fframe = Fframe;
	nframes = Nframes;

	call lock;				/* wire and lock */

	do frame = 1 to nframes;			/* make sure it is not in use */
	     if sst$cmp -> cma (fframe + frame - 1).abs_w then do;
		call unlock;
		Code = 2;				/* return error code */
		return;
	     end;
	end;

	call remove_frames;				/* get rid of them */

	call unlock;
	return;
%skip (3);
remove_core_mod:
     entry (Nframes, Modulus, Absaddr, Code);

	nframes = Nframes;
	modulus = Modulus;
	Absaddr = -1;
	Code = 0;

	call lock;
	call find_frames;
	call remove_frames;
	call unlock;

	Absaddr = fframe * sys_info$page_size;
	return;

wire_abs_contig:
     entry (Astep, Fpage, Npages, Code);

	astep = Astep;				/* Copy args before locking page table lock */
	fp = Fpage;
	np, nframes = Npages;
	Code = 0;

	call lock;

	modulus = 1;
retry_contig:
	call find_frames;

	if fframe >= 256 then
	     goto noalloc;				/* must keep I/O buffers low */
						/* see iom_connect.alm for details. */

	do frame = 0 to nframes - 1;
	     frames (frame) = fframe + frame;
	end;

	if ^abs_wire_frames () then
	     goto retry_contig;

	call unlock;

	return;

wire_abs:
     entry (Astep, Fpage, Npages, Code);

	astep = Astep;
	fp = Fpage;
	np, nframes = Npages;
	Code = 0;

	call lock;

retry:
	page = 0;
	do fframe = max (sst$first_core_block, 256) to sst$last_core_block while (page < np);
						/* save low 256K for wire_abs_contig */
	     cmep = addr (sst$cmp -> cma (fframe));
	     if (cmep -> based_word ^= ALL_ONES) & ^cme.abs_w & ^cme.removing & cme.abs_usable
		& ((cme.fp ^= ""b) | (cme.ptwp ^= ""b)) then do;
		frames (page) = fframe;
		page = page + 1;
	     end;
	end;
	if page < np then do;
noalloc:
	     call unlock;
	     Code = error_table_$out_of_main_memory;
	     return;
	end;

	if ^abs_wire_frames () then
	     goto retry;

	call unlock;
	return;

unwire_abs:
     entry (Astep, Fpage, Npages);

	astep = Astep;
	fp = Fpage;
	np = Npages;

	if astep = null () then do;
	     call syserr (CRASH, "pc_abs$unwire_abs: Called with NULL astep.");
	     return;
	end;

	do page = fp to fp + np - 1;			/* unwire the pages */
	     ptp = addrel (astep, sst$astsize + page);
	     if (ptw.add_type = CORE) & ptw.wired then do;/* valid PTW */
		frame = core_ptw.frame;		/* find the core frame */

		cmep = addr (sst$cmp -> cma (frame));
		if ^cme.abs_w
		     then call syserr (CRASH, "pc_abs$unwire_abs: Attempt to unwire inconsistent CME at ^p.", cmep);

/* reset wired & abs_w here */

		ptw.phm = "1"b;			/* in case the IOM modified it */
		ptw.wired = "0"b;			/* not wired any more */

		cme.abs_w = "0"b;

		sst$wired = sst$wired - 1;
		sst$abs_wired_count = sst$abs_wired_count - 1;
	     end;
	     else call syserr (CRASH, "pc_abs$unwire_abs: Attempt to unwire inconsistent PTW at ^p.", ptp);
	end;

	return;

find_frames:
     procedure;

dcl	j		   fixed bin (16);

	do fframe = sst$first_core_block + mod (-sst$first_core_block, modulus) by modulus to sst$last_core_block;
						/* find a possible first page */
	     j = 0;
	     if mod (fframe + nframes - 1, 256) < (nframes - 1) then
		goto will_not_do;			/* and we won't cross 256K boundary */
	     do j = 0 to nframes - 1;			/* check each page */
		cmep = addr (sst$cmp -> cma (fframe + j));
						/* get ptr to cme */
		if (cmep -> based_word = ALL_ONES) | cme.abs_w | cme.removing | (^cme.abs_usable)
		     | ((cme.fp = ""b) & (cme.ptwp = ""b)) then
		     go to will_not_do;		/* OS are just fine, as long as... */
	     end;

	     return;

will_not_do:
	     fframe = fframe + j - mod (j, modulus);
	end;

	goto noalloc;

     end find_frames;

remove_frames:
     procedure;

	do frame = 1 to nframes;			/* mark all frames */
	     sst$cmp -> cma (fframe + frame - 1).removing = "1"b;
	end;

	ind = -1;					/* do at least one pass */
	do while (ind ^= 0);			/* loop until it's done */
	     ind = 0;
	     do frame = 1 to nframes;			/* for each frame to be evicted */
		cmep = addr (sst$cmp -> cma (fframe + frame - 1));
						/* find CME */
		if cmep -> based_word ^= ALL_ONES then do;
						/* it has not yet been deleted */
		     call page$evict (cmep, aind);	/* start it out */
		     if (cmep -> based_word ^= ALL_ONES) & (aind = 0) then do;
			ptr (cmep, cme.fp) -> cme.bp = cme.bp;
						/* unthread it */
			ptr (cmep, cme.bp) -> cme.fp = cme.fp;
			if sst$usedp = rel (cmep) then
			     sst$usedp = cme.fp;
			if sst$wusedp = rel (cmep) then
			     sst$wusedp = cme.fp;
			cmep -> based_word = ALL_ONES;/* mark it gone */
			cme.abs_usable, cme.removing = "0"b;
			sst$nused = sst$nused - 1;
		     end;
		     else if ind = 0 then
			ind = aind;		/* multiplex waits */
		end;
	     end;
	     if ind ^= 0 then
		call page$pwait (ind);
	end;

	if (fframe + nframes) > sst$last_core_block then
	     sst$last_core_block = fframe - 1;

	return;

     end remove_frames;

abs_wire_frames:
     procedure returns (bit (1) aligned);

/**** In this procedure, "page" is the index (from zero) 
      into the array of abs_usuable pages found in the core map,
      and fp + page is the index into the segment's page table. */

	do frame = 1 to nframes;			/* mark them used */
	     sst$cmp -> cma (frames (frame - 1)).abs_w = "1"b;
	end;

	ind = -1;
	do while (ind ^= 0);
	     ind, aind = 0;
	     do page = 0 to np - 1;
		cmep = addr (sst$cmp -> cma (frames (page)));
		if (wordno (astep) + sst$astsize + fp + page) ^= binary (cme.ptwp, 18) then
		     call page$evict (cmep, aind);

		if cmep -> based_word = ALL_ONES then do;
		     call syserr (CRASH, "pc_abs: Parity error in I/O buffer.");
		     return ("0"b);
		end;

		if aind = 0 then
		     call page$wire_abs (cmep, aind, astep, fp + page);

		if ind = 0 then
		     ind = aind;
	     end;

	     if ind ^= 0 then
		call page$pwait (ind);
	end;

	sst$abs_wired_count = sst$abs_wired_count + nframes;
	return ("1"b);

     end abs_wire_frames;

lock:
     procedure;

	call pmut$lock_ptl (oldmask, sptp);		/* lock the ptl */
	return;

     end lock;


unlock:
     procedure;

	call pmut$unlock_ptl (oldmask, sptp);		/* almost done */
	return;

     end unlock;

%include syserr_constants;
%page;
%include cmp;
%INCLUDE "ptw.macro";

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   pc_abs: Parity error in I/O buffer.

   S:	$crash

   T:	$run

   M:	$err

   A:	$recover

   Message:
   pc_abs$unwire_abs: Called with NULL astep.

   S:	$crash

   T:	$run

   M:	$err

   A:	$inform
   $recover

   Message:
   pc_abs$unwire_abs: Attempt to unwire inconsistent CME at CMEP.

   S:	$crash

   T:	$run

   M:	The core map entry for the page being abs unwired did not
   have the abs_w flag on, which indicates that it was properly abs wired.
   $err

   A:	$inform
   $recover

   Message:
   pc_abs$unwire_abs: Attempt to unwire inconsistent PTW at PTP.

   S:	$crash

   T:	$run

   M:	A page at PTP, within the range of pages being unwired for,
   was found to either not be wired or no longer in memory.
   $err

   A:	$inform
   $recover

   END MESSAGE DOCUMENTATION */

     end pc_abs;
