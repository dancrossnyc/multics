/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */
/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

/* UPDATE HISTORY						       */
/* EL#   date	TR	comments				       */
/* ___ 83-12-15 -------- JAFalksen: created			       */
/* --- 84-11-08 -------- jaf: always return the zone for dcv$dcv	       */
/* --- 84-11-13 -------- jaf: adjust to new form of time_offset.dw data      */
/* --- 84-12-03 //////// jaf:					       */
/*   END HISTORY						       */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* This is a write-thru into the new software.			       */
/*                                                                           */
/* Name: encode_clock_value_                                                 */
/*                                                                           */
/* This subroutine (obsolete) is a temporary replacement for correct         */
/* calling of the new date/time  facilities.  It relays data between         */
/* the user and the date/time system.                                        */
/*                                                                           */
/* ENTRY:  encode_clock_value_                                               */
/*                                                                           */
/* takes a  given month, day  of the month,  year, hour of  the day,         */
/* minute, second,  microsecond, and time zone  and returns a system         */
/* clock  reading.  When  given a  day of  the week,  it performs an         */
/* optional check  on the clock  reading to ensure that  it falls on         */
/* the given day.                                                            */
/*                                                                           */
/* A system clock  reading is encoded as the  number of microseconds         */
/* from  January 1,  1901 0000.0, Greenwich  mean time  (GMT) to the         */
/* given date, time, and time zone.                                          */
/*                                                                           */
/* USAGE:                                                                    */
/*    dcl encode_clock_value_ entry (fixed bin, fixed bin, fixed             */
/*       bin, fixed bin, fixed bin, fixed bin, fixed bin(71), fixed          */
/*       bin, char(4), fixed bin(71), fixed bin(35));                        */
/*    call encode_clock_value_ (month, dom, year, hour, minute, sec-         */
/*       ond, microsecond, dow, zone, clock, code);                          */
/*                                                                           */
/* ENTRY:  encode_clock_value_$offsets                                       */
/*                                                                           */
/* This entry point takes a system clock reading, a day of the week,         */
/* and  year,  month, day,  hour,  minute, second,  and microsecond,         */
/* offset values.   The offset values may  be positive, negative, or         */
/* zero.  It returns a clock reading  that has been adjusted to fall         */
/* on the  given day of  the week, and  which is then  offset by the         */
/* given number of years, months, days, hours, minutes, seconds, and         */
/* microseconds.                                                             */
/*                                                                           */
/* USAGE:                                                                    */
/*    dcl encode_clock_value_$offsets entry (fixed bin(71), fixed            */
/*       bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,         */
/*       fixed bin(71), fixed bin, char(4), fixed bin(71), fixed             */
/*       bin(35));                                                           */
/*    call encode_clock_value_$offsets (clock_in, month_off,                 */
/*       day_off, year_off, hour_off, minute_off, second_off,                */
/*       microsec_off, dow_offset, zone, clock_out, code);                   */

encode_clock_value_: proc (month, dom, year, hour, minute, second, microsecond,
      dow, zone, clock, code);

dcl (
    month		fixed bin,
    dom		fixed bin,
    year		fixed bin,
    hour		fixed bin,
    minute	fixed bin,
    second	fixed bin,
    microsecond	fixed bin (71),
    dow		fixed bin,
    zone		char (4),
    clock		fixed bin (71),
    code		fixed bin (35)
    )		parm;

      tv.version = Vtime_value_3;
      tv.yc = year;
      tv.my = month;
      tv.dm = dom;
      tv.Hd = hour;
      tv.MH = minute;
      tv.SM = second;
      tv.US = microsecond;
      tv.fw = 0;
      tv.dw = dow;
      tv.dy = 0;
      tv.dc = 0;
      tv.za = zone;
      tv.zone_index = 0;
      call date_time_$to_clock (addr (tv), clock, code);
      return; %page;
offsets: entry (clock_in, month_off, day_off, year_off, hour_off, minute_off,
      second_off, microsec_off, dow_offset, zone, clock_out, code);

dcl (
    clock_in	fixed bin (71),
    month_off	fixed bin,
    day_off	fixed bin,
    year_off	fixed bin,
    hour_off	fixed bin,
    minute_off	fixed bin,
    second_off	fixed bin,
    microsec_off	fixed bin (71),
    dow_offset	fixed bin,
/*  zone		char (4),					       */
    clock_out	fixed bin (71)
/*  code		fixed bin (35)				       */
    )		parm;

      tof.version = Vtime_offset_2;
      unspec (tof.flag) = "0"b;
      if (dow_offset > 0)
      then do;
         tof.dw.flag = AFTER;
         tof.dw.val = dow_offset;
      end;
      else tof.dw.flag = UNUSED;
      if (year_off ^= 0)
      then do;
         tof.flag.yr = USED;
         tof.val.yr = year_off;
      end;
      if (month_off ^= 0)
      then do;
         tof.flag.mo = USED;
         tof.val.mo = month_off;
      end;
      if (day_off ^= 0)
      then do;
         tof.flag.da = USED;
         tof.val.da = day_off;
      end;
      if (hour_off ^= 0)
      then do;
         tof.flag.hr = USED;
         tof.val.hr = hour_off;
      end;
      if (minute_off ^= 0)
      then do;
         tof.flag.min = USED;
         tof.val.min = minute_off;
      end;
      if (second_off ^= 0)
      then do;
         tof.flag.sec = USED;
         tof.val.sec = second_off;
      end;
      if (microsec_off ^= 0)
      then do;
         tof.flag.Usec = USED;
         tof.val.Usec = microsec_off;
      end;
      call date_time_$offset_to_clock (addr (tof), clock_in, zone, clock_out, code);
      return;%page;
/*                                                                           */
/* Name: decode_clock_value_                                                 */
/*                                                                           */
/* This subroutine (obsolete) is a temporary replacement for correct         */
/* calling of the new date/time  facilities.  It relays data between         */
/* the user and the date/time system.                                        */
/*                                                                           */
/* ENTRY:  decode_clock_value_                                               */
/*                                                                           */
/* takes a given system clock reading and returns the month, the day         */
/* of the month, the year, the time of day, the day of the week, and         */
/* the local time zone.                                                      */
/*                                                                           */
/* USAGE:                                                                    */
/*    dcl decode_clock_value_ entry (fixed bin(71), fixed bin, fixed         */
/*       bin, fixed bin, fixed bin(71), fixed bin, char(4));                 */
/*    call decode_clock_value_ (clock, month, dom, year, tod, dow,           */
/*       zone);                                                              */
/*                                                                           */
/* ARGUMENTS:                                                                */
/* clock (Input)                                                             */
/*    is the system clock value to be decoded.                               */
/* month (Output)                                                            */
/*    is the month (January = 1, ..., December = 12).                        */
/* dom (Output)                                                              */
/*    is the day of the month, i.e., 1 to 31.                                */
/* year (Output)                                                             */
/*    is the year, e.g., 1978.                                               */
/* tod (Output)                                                              */
/*    is the time of day (number of microseconds since midnight).            */
/* dow (Output)                                                              */
/*    is the day of the week (Monday = 1, ..., Sunday = 7).                  */
/* zone (Output)                                                             */
/*    is a three- or four-character lowercase abbreviation of  the time zone */
/*    currently used by this process (for example, mst, edt).                */
/*                                                                           */
/* NOTES:                                                                    */
/* If the clock value does not  lie within the range 0001-01-01 thru         */
/* 9999-12-31, then  zero values are returned  for month, dom, year,         */
/* tod, and dow.                                                             */
/*                                                                           */
/* ENTRY:  decode_clock_value_$date_time                                     */
/*                                                                           */
/* This entry point is given a  system clock reading and returns the         */
/* month, the day of the month,  the year, the hour, the minute, the         */
/* second, the  microseconds within a  second, the day  of the week.         */
/* The time zone in which the decoded clock reading is expressed may         */
/* be given as input, or the current time zone can be used.                  */
/*                                                                           */
/* USAGE:                                                                    */
/*    dcl decode_clock_value_$date_time entry (fixed bin(71), fixed          */
/*       bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,         */
/*       fixed bin(71), fixed bin, char(4), fixed bin(35));                  */
/*    call decode_clock_value_$date_time (clock, month, dom, year,           */
/*       hour, minute, second, microsecond, dow, zone, code);                */

decode_clock_value_: entry (clock, month, dom, year, tod, dow, zone);

dcl     tod		fixed bin(71);

      time_sw = "0"b;
      all_sw = "0"b;
      dcv_sw = "1"b;
      out_zone = "";

dcv_common:
      tv.version = Vtime_value_3;
      call date_time_$from_clock (clock, out_zone, addr (tv), lcode);
      if ^time_sw
      then do;
         month = tv.my;
         dom = tv.dm;
         year = tv.yc;
         dow = tv.dw;
      end;
      if ^dcv_sw
      then do;
         hour = tv.Hd;
         minute = tv.MH;
         second = tv.SM;
         microsecond = tv.US;
         code = lcode;
      end;
      else tod = tv.US
         + 1e6 * (tv.SM
         + 060 * (tv.MH
         + 060 * (tv.Hd)));
      if all_sw
      then do;
         days_in_clock = tv.dc - 693962;
         day_of_year = tv.dy;
      end;
      if (zone = "") | dcv_sw
      then zone = tv.za;
      return;%skip(2);
date_time: entry (clock, month, dom, year, hour, minute, second, microsecond,
	    dow, zone, code);
      time_sw = "0"b;
      all_sw = "0"b;
      dcv_sw = "0"b;
      out_zone = zone;
      goto dcv_common;

time: entry (clock, hour, minute, second, microsecond, zone, code);
      time_sw = "1"b;
      all_sw = "0"b;
      dcv_sw = "0"b;
      out_zone = zone;
      goto dcv_common;

all: entry (clock, month, dom, year, hour, minute, second, microsecond,
	dow, zone, days_in_clock, day_of_year, code);
dcl days_in_clock	fixed bin;
dcl day_of_year	fixed bin;
dcl lcode		fixed bin (35); 
      time_sw = "0"b;
      all_sw = "1"b;
      dcv_sw = "0"b;
      out_zone = zone;
      goto dcv_common;%page;
dcl time_sw	bit (1);
dcl all_sw	bit (1);
dcl dcv_sw	bit (1);
dcl out_zone	char (4);
		  
dcl date_time_$to_clock	entry (ptr, fixed bin(71), fixed bin(35));
dcl date_time_$offset_to_clock entry (ptr, fixed bin (71), char (*), fixed bin (71),
		fixed bin (35));
dcl date_time_$from_clock	entry (fixed bin(71), char(*), ptr, fixed bin(35));

dcl 1 tv		like time_value;
dcl 1 tof		like time_offset;

dcl (addr, unspec) builtin;

%include time_value;
%include time_offset;

   end encode_clock_value_;
