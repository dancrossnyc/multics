/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */
log_create_:
     procedure ();

/* *	LOG_CREATE_
   *
   *	This procedure is used primarily to create log segments. It is the
   *	major maintainer of the log_segment_info structure, and therefore
   *	also has an entrypoint for filling in such a structure.
   *
   *	Modification history:
   *	1984-06-02, W. Olin Sibert: Initial coding
   *	1984-12-20, WOS: Added mode values to segment_info structure
   *	1984-12-21, WOS: Changed to give better message for link entries
   *	1984-12-27, Keith Loepere: Modified for version 2 create_branch_info
   */

declare	P_log_segment_info_ptr pointer parameter;
declare	P_old_log_ptr pointer parameter;
declare	P_new_log_ptr pointer parameter;
declare	P_log_dname char (*) parameter;
declare	P_log_ename char (*) parameter;
declare	P_code fixed bin (35) parameter;

declare	code fixed bin (35);
declare	old_log_dname char (168);

declare   error_table_$link fixed bin (35) external static;
declare   error_table_$namedup fixed bin (35) external static;

declare	get_system_free_area_ entry () returns (pointer);
declare	get_group_id_$tag_star entry () returns (char (32));
declare	hcs_$create_branch_ entry (char (*), char (*), pointer, fixed bin (35));
declare	hcs_$fs_get_path_name entry (pointer, char (*), fixed bin, char (*), fixed bin (35));
declare	hcs_$get_max_length_seg entry (pointer, fixed bin (19), fixed bin (35));
declare	hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), pointer, fixed bin (35));
declare	hcs_$list_acl entry (char (*), char (*), pointer, pointer, pointer, fixed bin, fixed bin (35));
declare	hcs_$replace_acl entry (char (*), char (*), pointer, fixed bin, bit (1) aligned, fixed bin (35));
declare	hcs_$set_max_length entry (char (*), char (*), fixed bin (19), fixed bin (35));
declare	hcs_$status_for_backup entry (char (*), char (*), pointer, fixed bin (35));
declare	hcs_$status_long entry (char (*), char (*), fixed bin (1), pointer, pointer, fixed bin (35));
declare   hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
declare	log_initialize_ entry (pointer, pointer, fixed bin (19), char (*), fixed bin (35));

declare  (addr, null, substr, unspec) builtin;

/* */

/* This entrypoint just fills in a log_segment_info structure to describe the
   segment specified. This is used wby log_write_. */

log_create_$get_info:
     entry (P_log_segment_info_ptr, P_old_log_ptr, P_code);

	log_segment_info_ptr = P_log_segment_info_ptr;

	call get_log_status (P_old_log_ptr);
	call finished (0);




/* This entrypoint is used to create a brand new log segment, for which there 
   is no existing segment to copy. The caller must have completely filled in 
   the log_segment_info structure before calling this entrypoint.
   */

log_create_$new_segment:
     entry (P_log_segment_info_ptr, P_new_log_ptr, P_code);

	log_segment_info_ptr = P_log_segment_info_ptr;

	call make_log_segment (null (), "", P_new_log_ptr);
	call finished (0);

/* */

/* This entrypoint is used to duplicate an existing log segment. It copies
   all the attributes of the old segment onto the new one. The dname and
   ename are separately supplied for the new log, since of course we don't
   want to end up tryng to create the same segment over again. */

log_create_$duplicate_segment:
     entry (P_log_segment_info_ptr, P_log_dname, P_log_ename, P_old_log_ptr, P_new_log_ptr, P_code);

	log_segment_info_ptr = P_log_segment_info_ptr;

	call get_log_status (P_old_log_ptr);

/* Now, extract the old pathname and insert the new one */

	old_log_dname = log_segment_info.dname;

	log_segment_info.dname = P_log_dname;
	log_segment_info.ename = P_log_ename;

	call make_log_segment (P_old_log_ptr, old_log_dname, P_new_log_ptr);
	call finished (0);

/* */

get_log_status:
     procedure (P_log_ptr);

declare	P_log_ptr pointer parameter;

declare	log_dname char (168);
declare	log_ename char (32);
declare	log_max_lth fixed bin (19);
declare 1 sfb aligned like status_for_backup automatic;
declare 1 status aligned like status_branch automatic;


	call hcs_$fs_get_path_name (P_log_ptr, log_dname, (0), log_ename, code);
	call check_code ();

	sfb.version = status_for_backup_version_2;
	call hcs_$status_for_backup (log_dname, log_ename, addr (sfb), code);
	call check_code ();

	call hcs_$status_long (log_dname, log_ename, 1, addr (status), null (), code);
	call check_code ();

	call hcs_$list_acl (log_dname, log_ename, (get_system_free_area_ ()),
	     log_segment_info.acl_ptr, null (), log_segment_info.acl_count, code);
	call check_code ();

	call hcs_$get_max_length_seg (P_log_ptr, log_max_lth, code);
	call check_code ();

	log_segment_info.rings (*) = status.ring_brackets (*);
	log_segment_info.max_length = log_max_lth;	/* Not sfb.max_length, which is always 261120 */
	log_segment_info.multi_class = sfb.multiple_class;
	log_segment_info.access_class = sfb.access_class;

/* NOTE: This depends on the format of the old 5-bit mode values, usually
   seen as fixed bin (5) values. */

	log_segment_info.effective_mode = substr (status.mode, 2, 3);

	log_segment_info.dname = log_dname;
	log_segment_info.ename = log_ename;

	return;
	end get_log_status;

/* */

make_log_segment:
     procedure (P_old_log_ptr, P_old_log_dname, P_new_log_ptr);

declare	P_old_log_ptr pointer parameter;
declare	P_old_log_dname char (168) parameter;
declare	P_new_log_ptr pointer parameter;

declare	log_ptr pointer;
declare   entry_type fixed bin (2);

declare 1 cbi aligned like create_branch_info automatic;


	P_new_log_ptr = null ();

	unspec (cbi) = ""b;
	cbi.mode = RW_ACCESS;
	cbi.bitcnt = 36 * log_segment_info.max_length;
	cbi.access_class = log_segment_info.access_class;
	cbi.priv_upgrade_sw = log_segment_info.multi_class;
	cbi.rings (*) = log_segment_info.rings (*);
	cbi.userid = get_group_id_$tag_star ();
	cbi.version = create_branch_version_2;

	call hcs_$create_branch_ (log_segment_info.dname, log_segment_info.ename, addr (cbi), code);
	if (code = error_table_$namedup) then do;	/* Special-case error message for links */
	     entry_type = -1;			/* Initialize in case status_minf fails */
	     call hcs_$status_minf (log_segment_info.dname, log_segment_info.ename, 0, entry_type, (0), (0));
	     if (entry_type = 0) then			/* Link type */
		code = error_table_$link;
	     end;

	call check_code ();

	call hcs_$set_max_length (log_segment_info.dname, log_segment_info.ename, log_segment_info.max_length, (0));

	if (log_segment_info.acl_ptr ^= null ()) & (log_segment_info.acl_count ^= 0) then
	     call hcs_$replace_acl (log_segment_info.dname, log_segment_info.ename,
		log_segment_info.acl_ptr, log_segment_info.acl_count, "0"b, (0));

	call hcs_$initiate (log_segment_info.dname, log_segment_info.ename, "", 0, 0, log_ptr, code);
	if (log_ptr ^= null ()) then code = 0;
	call check_code ();

	call log_initialize_ (P_old_log_ptr, log_ptr, log_segment_info.max_length, P_old_log_dname, code);
	call check_code ();

	P_new_log_ptr = log_ptr;

	return;
	end make_log_segment;

/* */

check_code:
     procedure ();

	if (code = 0) then return;

	call finished (code);

	end check_code;



finished:
     procedure (P_return_code);

declare	P_return_code fixed bin (35) parameter;


	P_code = P_return_code;
	goto MAIN_RETURN;

	end finished;



MAIN_RETURN:
	return;

%page; %include log_write_data;
%page; %include status_for_backup;
%page; %include status_structures;
%page; %include create_branch_info;
%page; %include access_mode_values;

	end log_create_;
