/* *********************************************************
   *                                                       *
   * Copyright, (C) BULL HN Information Systems Inc., 1989 *
   *                                                       *
   * Copyright, (C) Honeywell Bull Inc., 1987              *
   *                                                       *
   ********************************************************* */

/* *	Multics System Tape Header File
   *
   *	84-07-20, R. Michael Tague:  Added dm_hphcs_
   *	84-07-28, BIM: Modified for new config decks
   *	84-09-25, BIM: Modified for paged tty_buf 
   *	84-10-17, WOS: Removed old syserr mechanism, added bound_log_*,
   *	   added new syserr abs-segs, deleted audit_gate_
   *	84-10-23, KPL: Rearranged bound_file_system, bound_priv_procs
   *	   and bound_system_faults into bound_dir_control, 
   *	   bound_file_system and bound_segment_control.
   *	84-10-26, ADB: Added bound_bce_paged.
   *	84-11-13, EJ Sharpe - added bound_system_security
   *	84-11-27, EJ Sharpe - added access_audit_gate_, increase size of definitions_
   *    1984-12-04, BIM: Added bound_system_control_.
   *	84-12-10, EJ Sharpe - added bound_library_3_
   *      85-01-11, Chris Jones, increase size of definitions
   *    1985-01-21, BIM: move dn355_util to BLW.
   *	85-01-22, Keith Loepere: moved around a lot of things to reduce wired
   *	   memory usage in bce.
   *    1985-02-28, C. Marker to increase the size of definitions again.
   *	85-03-14, Keith Loepere, moved all dual object bce/Multics modules to hardcore.
   *	85-03-27, Keith Loepere: moved around a lot of things to reduce wired
   *	   memory usage during service.
   *      85-05-16, R. Michael Tague:  Changed ring brackets on dm_journal_seg_
   *         from [0,2,2] to [0,0,0].
   */

/* HISTORY COMMENTS:
  1) change(86-03-06,Fawcett), approve(86-03-06,MCR6979),
     audit(86-03-08,GDixon), install(86-07-17,MR12.0-1097):
     Change the max_length of scavenger_data for MSU3380 support.
  2) change(86-04-24,Fawcett), approve(86-04-24,MCR7383),
     audit(86-05-06,Farley), install(86-07-17,MR12.0-1097):
     Change max_length of scavenger_data to be equal to the max
     subvolume size (subvolume support).
  3) change(86-07-28,Farley), approve(86-07-28,MCR7439),
     audit(86-09-25,Fawcett), install(86-10-20,MR12.0-1189):
     Move bound_io_active into collection 1.0, delete bound_io_init (as fnp_init
     is now in bound_temp_2 (collection 2.0) and ioi_init and io_config_init
     are now in bound_temp_1 (collection 1.0)). Add bce_io_page_table,
     bce_ioi_post_seg and bound_bce_save_.
  4) change(87-04-27,Farley), approve(87-07-06,MCR7717),
     audit(87-07-13,Lippard), install(87-07-17,MR12.1-1043):
     Added bce_early_ioi_workspace temp segment. It is needed for IOI to
     function properly before establish_temp_segs has had a chance to run.
  5) change(87-08-04,Brunelle), approve(87-08-04,MCR7741),
     audit(87-08-04,GDixon), install(88-03-01,MR12.2-1029):
     Modify cur_length and max_length of definitions_ and crash_definitions_ to
     accommodate added definitions for DSA.
  6) change(87-10-27,Farley), approve(87-10-27,MCR7769),
     audit(88-02-24,Fawcett), install(88-03-01,MR12.2-1029):
     Increased the max size of inzr_stk0 to 32K (was 20K).
  7) change(88-06-27,Parisek), approve(88-06-27,MCR7928),
     audit(88-07-08,Beattie), install(88-07-19,MR12.2-1061):
     Added bound_uncp_wired to support the DSA UNCP multiplexer interface.
     Increased max_length of definitions_ and cur_length of crash_definitions_
     to accomodate the added uncp modules.
  8) change(88-10-07,Fawcett), approve(88-10-12,MECR0002),
     audit(88-10-10,Farley), install(88-10-12,MR12.2-1162):
     This change is to remove bound_uncp_wired from the Multics System Boot
     Tape.  It should only be defined for sites that are running the DSA
     Gateway service.
  9) change(88-10-17,Brunelle), approve(88-10-17,MCR7813),
     audit(88-10-17,Farley), install(88-10-18,MR12.2-1171):
     Increased size of definitions_ and crash_definitions_ by 1 page to handle
     changes needed for special_chars SCP.
 10) change(88-11-15,Martinson), approve(88-11-15,MCR8016),
     audit(88-11-15,Fawcett), install(88-11-15,MR12.2-1215):
     Close out MECR0002.  Slight change made in that bound_uncp_wired_ is not
     commented out but changed from "wired yes" to "wired no" with apppropriate
     comment in header.
 11) change(89-10-24,Parisek), approve(89-10-25,MECR0012),
     audit(89-10-25,Farley), install(89-10-25,MR12.3-1100):
     Added bound_protocol_mpx and the protocol_ring0_iso_ gate to support
     the IP/X25 (protocol) multiplexer interface.
                                                   END HISTORY COMMENTS */

boot_program:	bootload_tape_label;	end;

text:		bound_bootload_0;		/* first two pages are toehold */
 access:		read, execute, write, privileged;
 temp_seg:	yes;
 sys_id:		sysid;
 generation_time:   creation_time;
 generation_time_string:
	          creation_time_string;
 paged:		no;
 wired:		yes;
end;

/* End Collection 0 */

data:	fw.mtp610.m610, fwid.t610;
 access:		read;
 firmware: 	yes;
 init_seg: 	yes;
end;

data:	fw.mtp601.m601, fwid.t601;
 access:		read;
 firmware: 	yes;
 init_seg: 	yes;
end;

data:	fw.mtc500.m500, fwid.t500;
 access:		read;
 firmware: 	yes;
 init_seg:	yes;
end;

collection:	0.5;


fabricate:	lot;	/* lot must be first thing in collection 1.0 */
 access:		read, write;
 cur_length:	1024;			/* actually 384 */
 wired:		yes;
end;

fabricate:	as_linkage, active_sup_linkage;    /* these four segments must follow */
 access:		read, execute, write;
 cur_length:	2048;
 max_length:	16;
end;

fabricate:	ws_linkage, wired_sup_linkage;
 access:		read, execute, write;
 cur_length:	3072;
 wired:		yes;
end;

fabricate:	ai_linkage, active_init_linkage;
 access:		read, execute, write;
 cur_length:	4096;
 max_length:	7;
 init_seg:	yes;
end;

fabricate:	wi_linkage, wired_init_linkage;
 access:		read, execute, write;
 cur_length:	1024;
 init_seg:	yes;
 wired:		yes;
 paged:		yes;
end;

fabricate:	definitions_;
 path_name:	>system_library_1;
 access:		read, write;
 ringbrack:	0, 5, 5;
 cur_length:	47104;
 max_length:	89;		/* max length MUST be the same as cur_length for crash_definitions_ */
end;

fabricate:	abs_seg;
 abs_seg:		yes;
end;

fabricate:	abs_seg1;
 abs_seg:		yes;
end;

fabricate:	backup_abs_seg;
 abs_seg:		yes;
end;

fabricate:	bce_early_ioi_workspace;      /* big enough for a firmware I/O buffer */
 cur_length:	9216;
 temp_seg:          yes;
end;

fabricate:	bce_io_page_table;		/* IOI Page Table while at BCE */
 access:		read, write;
 max_length:	1;
 cur_length:	1024;
 temp_seg:	yes;
end;

fabricate:	bce_ioi_post_seg;		/* IOI IO posting while at BCE */
 access:		read, write;
 max_length:	1;
 cur_length:	1024;
 temp_seg:	yes;
end;

fabricate:	bootload_disk_post_seg;	/* Area for disk posting */
 max_length:	1;
 cur_length:	1024;
 temp_seg:	yes;
 wired:		yes;
end;

fabricate:	bootload_file_partition;
 abs_seg:		yes;
 max_length:	255;
end;

fabricate:	bootload_temp_1;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_2;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_3;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_4;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_5;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_6;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_7;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_8;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_9;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_10;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_11;
 temp_seg:	yes;
 abs_seg:		yes;
end;

fabricate:	bootload_temp_12;
 temp_seg:	yes;
 abs_seg:		yes;
end;

name:		bound_hc_data_wired;	/* hardcore_sct_seg, */
 add_segnames;				/* scs and */
 access:		read, write;		/* wired_hardcore_data */
 wired:		yes;
linkage;
end;

fabricate:	fim_abs_seg;
 abs_seg:		yes;
end;

fabricate:	isolts_abs_seg;
 abs_seg:		yes;
end;

fabricate:	volmap_abs_seg;
 abs_seg:		yes;
 max_length:	4;			/* Must be large enough for map of HC partition */
end;

name:		bootload_1;
 access:		read, execute;
 temp_seg:	yes;
linkage;
end;

name:		bound_active_1;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_bce_wired;
 add_segnames;
 access:		read, execute, privileged;
 init_seg:	yes;
linkage;
end;

name:		bound_disk_util_1;
 add_segnames;
 access:		read, execute;
 paged:		yes;
linkage;
end;

name:		bound_error_active_1;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_init_1;
 add_segnames;
 access:		read, execute;
 init_seg:	yes;
linkage;
end;

name:		bound_interceptors;
 add_segnames;
 access:		read, execute, privileged;
 wired:		yes;
linkage;
end;

name:		bound_io_wired;
 add_segnames;
 access:		read, execute;
 wired:		yes;
linkage;
end;

name:		bound_io_active;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_iom_support;
 add_segnames;
 access:		read, execute, privileged;
 wired:		yes;
linkage;
end;

object:		bound_library_1_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	0, 5, 5;
linkage;
end;

object:		bound_library_wired_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	0, 5, 5;
 wired:		yes;
 paged:		yes;
linkage;
end;

name:		bound_page_control;
 add_segnames;
 access:		read, execute, privileged;
 wired:		yes;
linkage;
end;

name:		bound_priv_1;
 add_segnames;
 access:		read, execute, privileged;
 wired:		yes;
linkage;
end;

name:		bound_tc_priv;
 add_segnames;
 access:		read, execute, privileged;
 wired:		yes;
linkage;
end;

name:		bound_temp_1;
 add_segnames;
 access:		read, execute, privileged;
 temp_seg:	yes;
linkage;
end;

name:		bound_unencacheable;
 add_segnames;
 access:		read, execute, privileged;
 cache:		no;
 wired:		yes;
linkage;
end;

name:		bound_wired_1;
 add_segnames;
 access:		read, execute;
 wired:		yes;
linkage;
end;

fabricate:	core_map;
 cur_length:	0;
 access:		read, write;
 wired:		yes;
end;

fabricate:	dir_seg;
 abs_seg:		yes;
end;

fabricate:	disk_config_deck;
 abs_seg:		yes;
 max_length:	4;
 access:		read, write;
 init_seg:	yes;
end;

fabricate:	disk_mst_seg;
 abs_seg:		yes;
 max_length:	256;
 access:		read, write;
 init_seg:	yes;
end;

fabricate:	disk_post_queue_seg;
 cur_length:	500;
 access:		read, write;
 wired:		yes;
end;

fabricate:	disk_seg;
 access:		read, write;
 cur_length:	0;
 wired:		yes;
end;

fabricate:	dn355_data;
 access:		read, write;
 wired:		yes;
 cur_length:	456;		/* 8 word header + 56 words per FNP (8 FNPS) */
end;

fabricate:	ds_seg;
 abs_seg:		yes;
end;

fabricate:	dump_seg;		/* part of dump partition */
 abs_seg:		yes;
 access:		read, write;
 temp_seg:	yes;
 max_length:	256;
end;

name:		emergency_shutdown;
 access:		read, execute, write, privileged;
 wired:		yes;
linkage;
 wired:		yes;
 access:		read, execute, write;
 init_seg:	no;
end;

object:		error_table_;
 path_name:	>system_library_1;
 ringbrack:	0, 5, 5;
 paged:             yes;
 wired:	          yes;
linkage;
 access:		read;
end;

fabricate:	free_area_1;                  /* big enough for a firmware io buffer */
 cur_length:	9216;
 temp_seg:          yes;
 firmware:	yes;                          /* LOAD LOW */
end;

fabricate:	idle_dsegs;
 access:		read, write;
 wired:		yes;
end;

fabricate:	idle_pdses;
 access:		read, write;
 wired:		yes;
end;

name:		init_processor;
 access:		read, execute, write, privileged;
 wired:		yes;
linkage;
end;

name:		inzr_stk0;
 cur_length:	32768;
 access:		read, write;
end;

fabricate:	ioi_abs_seg;
 abs_seg:		yes;
 access:		read, write;
 wired:		yes;
end;

fabricate:	io_config_data;
 path_name:	>system_library_1;
 access:		read, write;
 acl:		r, *.*.*;
 ringbrack:	0, 5, 5;
end;

fabricate:	ioi_data;
 access:		read, write;
 wired:		yes;
end;

fabricate:	iom_data;
 access:		read, write;
 wired:		yes;
end;

fabricate:	kst_seg;			/* This is here so bce can find its segno easily. */
 path_name:	>process_dir_dir>!zzzzzzzbBBBBBB;
 access:		read, write;
 max_length:	64;
 per_process:	yes;
end;

fabricate:	multics_low_mem;		/* 1st 256k of saved memory */
 access:		read, write;
 abs_seg:		yes;
 max_length:	256;
 temp_seg:	yes;
end;

fabricate:	multics_high_mem;		/* 2nd 256k */
 access:		read, write;
 abs_seg:		yes;
 max_length:	256;
 temp_seg:	yes;
end;

fabricate:	oc_data;
 access:		read, write;
 cur_length:	2048;
 wired:		yes;
end;

name:		pds;
 path_name:	>process_dir_dir>!zzzzzzzbBBBBBB;
 access:		read, write;
 max_length:	4;
 per_process:	yes;
 wired:		yes;
 paged:		yes;
 wired_link:	no;
linkage;
 per_process:	no;
end;

name:		prds;	/* processor data segment for bootload cpu */
 path_name:	>system_library_1;	/* will be renamed by tc_init */
 access:		read, write, execute, privileged;
 cache:		yes;
 cur_length:	9216;
 wired:		yes;
 paged:		yes;
 wired_link:	no;
 acl:		r, Initializer.SysDaemon.*;
linkage;
end;

name:		pvt,
		physical_volume_table;
 path_name:	>system_library_1;
 access:		read, write;
 ringbrack:	0, 1, 1;
 wired:		yes;
 paged:		yes;
 linkage;
 cur_length:	0;
 acl:		r, *.SysDaemon.*;
end;

fabricate:	rdisk_seg;
 access:		read, write;
 abs_seg:		yes;
 cur_length:	0;
end;

name:		restart_fault;
 access:		read, execute, privileged;
 wired:		yes;
 ringbrack:	0, 0, 7;
linkage;
end;

name:		return_to_ring_0_;
 access:		read, execute;
 ringbrack:	0, 7, 7;
 wired:		yes;
linkage;
end;

fabricate:	safe_config_deck;	/* saved last known good config deck */
 access:		read, write;
 cur_length:	4096;
 temp_seg:	yes;
end;

fabricate:	scas;		/* system controller addressing segment */
 abs_seg:		yes;
 access:		read, write;
 cur_length:	32;
 wired:		yes;
end;

name:		signaller;
 access:		read, execute, privileged;
 wired:		yes;
linkage;
end;

fabricate:	sst_names_;
 cur_length:	32;
 max_length:	1;
 ringbrack:	0, 5, 5;
 access:		read, write;
 paged:		yes;
 path_name:	>system_library_1;
 acl:		rw, *.SysDaemon.*;
 acl:		r, *.SysMaint.*;
 acl:		r, *.SysAdmin.*;
 acl:		null, *.*.*;
end;

name:		sst_seg, sst;
 access:		read, write;
 wired:		yes;
linkage;
end;

fabricate:	stack_0_data;
 access:		read, write;
 wired:		yes;
end;

fabricate:	stock_seg;
 access:		read, write;
 cur_length:	0;
 wired:		yes;
end;


name:		sys_boot_info;	/* generated from bootload_info in collection 0 */
 access:		read, write;	/* It contains info about bootload configuration, etc. */
 wired:		no;		/* It also contains the size of the sst for bce. */
 paged:		yes;
 init_seg:	yes;
linkage;
end;

object:		sys_info;
 path_name:	>system_library_1;
 access:		read, write;
 ringbrack:	0, 5, 5;
 wired:		yes;
 paged:		yes;
 wired_link:	no;
linkage;
end;

name:		syserr_data;
 access:		read, write;
 wired:		yes;
linkage;
end;

fabricate:	syserr_log_data;
 abs_seg:		yes;
 access:		read, write;
 max_length:	1;
 cur_length:	0;
 paged:		yes;
end;

fabricate:	syserr_log_laurel;
 abs_seg:		yes;
 access:		read, write;
 max_length:	255;
 cur_length:	0;
 paged:		yes;
 path_name:	>system_library_1;
ringbrack:	4, 5, 5;
 acl:		rw, Initializer.SysDaemon.*;
 acl:		r, *.SysDaemon.*;
 acl:		r, *.SysMaint.*;
 acl:		r, *.SysAdmin.*;
 acl:		null, *.*.*;
end;

fabricate:	syserr_log_hardy;
 abs_seg:		yes;
 access:		read, write;
 max_length:	255;
 cur_length:	0;
 paged:		yes;
 path_name:	>system_library_1;
ringbrack:	4, 5, 5;
 acl:		rw, Initializer.SysDaemon.*;
 acl:		r, *.SysDaemon.*;
 acl:		r, *.SysMaint.*;
 acl:		r, *.SysAdmin.*;
 acl:		null, *.*.*;
end;

name:		tc_data;
 access:		read, write;
 wired:		yes;
 paged:		yes;
 wired_link:	no;
linkage;
end;

fabricate:	tc_data_header;
 access:		read;
 wired:		no;
 temp_seg:	yes;
 cur_length:	0;
end;

data:		fw.dsc500.d500;
 init_seg:	yes;
end;

data:		fw.dsc191.m191;
 init_seg:	yes;
end;

data:		fw.msp800.msp8;
 init_seg:	yes;
end;

collection:	1.0;

/* run coms, config decks */

data:		auto.ec;		/* standard auto run ec */
  temp_seg:	yes;
end;

data:		dump.ec;		/* default dump arguments */
  temp_seg:	yes;
end;

data:		go.ec;		/* restart auto mode after manual return to bce */
  temp_seg:	yes;
end;

data:		rtb.ec;		/* auto invoked ec at crash/shut */
  temp_seg:	yes;
end;

collection:	1.2;

/* bce paged commands */

name:		bound_bce_dump_;
 add_segnames;
 access:		read, execute;
 temp_seg:	yes;
linkage;
end;

name:		bound_bce_exec_com_;
 add_segnames;
 access:		read, execute;
 temp_seg:	yes;
linkage;
end;

name:		bound_bce_paged;
 add_segnames;
 access:		read, execute;
 temp_seg:	yes;
linkage;
end;

name:		bound_bce_probe_;
 add_segnames;
 access:		read, execute;
 temp_seg:	yes;
linkage;
end;

name:		bound_bce_save_;
 add_segnames;
 access:		read, execute;
 temp_seg:	yes;
linkage;
end;

object:		bound_date_time_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	0, 5, 5;
linkage;		/* NOTE: This is permanent and load_mst knows how to make it so */
end;

object:		bound_multics_bce_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	0, 5, 5;
linkage;		/* This is also permanent. */
end;

object:		bound_qedx_;
 add_segnames;
 delete_name:	qx_search_file_;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	0, 5, 5;
linkage;
end;

fabricate:	crash_definitions_;		/* copy of definitions_ from crash image */
 access:		read, write;
 cur_length:	91136;			/* must be same as max_length for definitions_ */
 temp_seg:	yes;
end;

fabricate:	crash_name_table;		/* copy of name_table definitions_ from crash image */
 access:		read, write;
 cur_length:	12288;			/* must be same as max_length for name_table */
 temp_seg:	yes;
end;

fabricate:	crash_slt;		/* copy of slt from crash image */
 access:		read, write;
 cur_length:	2048;			/* must be same as max_length for slt */
 temp_seg:	yes;
end;

fabricate:	crash_lot;		/* copy of lot from crash image */
 access:		read, write;
 cur_length:	1024;			/* must be the same as max length for lot */
 temp_seg:	yes;
end;

/* firmware images - We repeat tape so they don't hold memory from collection
0.5 onward.  Disk (above) must be in memory until disk is booted. */

data:		fw.mtc500.m500;
 temp_seg:	yes;
end;

data:		fw.mtp601.m601;
 temp_seg: 	yes;
end;

data:		fw.mtp610.m610;
 temp_seg: 	yes;
end;

data:		fw.urcmpc.u400;
 temp_seg:	yes;
end;

data:		fw.urcmpc.ucmn;
 temp_seg:	yes;
end;

data:		fw.urcmpc.ucrp;
 temp_seg:	yes;
end;

collection:	1.5;
/*  */

object:		active_all_rings_data,
		active_all_rings_data_;
 sys_id:		system_id;
 vers_id:		version_id;
 path_name:	>system_library_1;
 access:		read, write;
 ringbrack:	0, 5, 5;
linkage;
end;

name:		active_hardcore_data,
		ahd;
 access:		read, write;
linkage;
 init_seg:	yes;
end;

object:		admin_gate_,
		admin_ring_zero_peek_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.*.*;
 ringbrack:	0, 0, 1;
linkage;
end;

object:		ast_lock_meter_seg;
 access:		read, write;
 max_length:	10;
 paged:		yes;
end;

name:		bound_355_wired;
 add_segnames;
 access:		read, execute;
 wired:		yes;
linkage;
 paged:		yes;
end;

/*  bound_uncp_wired should appear as "wired" in the header for a site 
     running DSA Gateway.  It is left here  as a place holder to avoid
     errors when running check_mst against a generated a hardcore tape */

name:		bound_uncp_wired,
		uncp,
		uncp_multiplexer,
		uncp_boot_interrupt,
		uncp_util;
 access:		read, execute;
 wired:		no;
linkage;
 paged:		yes;
end;
       
/*  End of the bound_uncp_wired section. */

name:		bound_dir_control;
 add_segnames;
 access:		read, execute;
 linkage;
end;

name:		bound_disk_util_2;
 add_segnames;
 access:		read, execute;
 paged:		yes;
linkage;
end;

name:		bound_error_active_2;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_error_wired_2;
 add_segnames;
 access:		read, execute, privileged;
 wired:		yes;
linkage;
end;

name:		bound_file_system;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_hc_backup;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_hc_reconfig;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_hc_tuning;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_init_2;
 add_segnames;
 init_seg:	yes;
 access:		read, execute;
linkage;
end;

object:		bound_library_2_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	0, 5, 5;
linkage;
end;

object:		bound_log_active_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:         0, 5, 5;
linkage; 
end;

name:		bound_mcs_util;
 add_segnames;
 access:		read, execute;
 ringbrack:	0;
linkage;
end;

name:		bound_priv_mpx;
 add_segnames;
 access:		read, execute;
 ringbrack:	0;
linkage;
end;

name:		bound_process_creation;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_protocol_mpx,
                    protocol_mpx;
 access:		read, execute;
 wired:             no;
linkage;
 paged:             yes;
end;

name:		bound_salvager;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_scavenger;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_segment_control;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_system_security;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_tc_wired;
 add_segnames;
 access:		read, execute;
 wired:		yes;
linkage;
end;

name:		bound_temp_2;
 add_segnames;
 access:		read, execute;
 temp_seg:	yes;
linkage;
end;

name:		bound_tty_active;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_vtoc_man;
 add_segnames;
 access:		read, execute;
linkage;
end;

name:		bound_x25_mpx;
 add_segnames;
 access:		read, execute;
 wired:		no;
linkage;
 wired:		yes;
end;

fabricate:	dbm_seg;
 access:		read, write;
 ringbrack:	0;
 max_length:	0;
end;

fabricate:	dir_lock_seg;
 access:		read, write;
 cur_length:	0;
 max_length:	0;
end;

object:		dm_hcs_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.*.*;
 ringbrack:	0, 0, 2;
linkage;
end;

fabricate:	dm_journal_seg_;
 path_name:	>system_library_1;
 access:		read, write;
 acl:		r, *.*.*;
 ringbrack:	0, 0, 0;
 max_length:	0;
end;

fabricate:	fnp_dump_seg;
 access:		read, write;
 cur_length:	1024;
end;

name:		hasp_mpx;
 access:		read, execute;
 wired:		no;
linkage;
 wired:		yes;
end;

object:		hc_backup_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.SysDaemon.*;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysMaint.*;
 acl:		re, Volume_Dumper.Daemon.*;
 acl:		re, Volume_Reloader.Daemon.*;
 acl:		re, Volume_Retriever.Daemon.*;   /* No other users besides these should be added   */
 ringbrack:	0, 0, 5;
linkage;
end;

object:		hcs_,
		cpu_time_and_paging_,
		cpu_time_and_paging_op_,
		total_cpu_time_,
		virtual_cpu_time_,
		virtual_cpu_time_op_,
		xhcs_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.*.*;
 ringbrack:	0, 0, 5;
linkage;
end;

object:		hphcs_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysMaint.*;
 acl:		re, *.SysDaemon.*;
 ringbrack:	0, 0, 5;
linkage;
end;

object:		access_audit_gate_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysDaemon.*;
 acl:		re, *.SysMaint.*;
 ringbrack:	0, 0, 5;
linkage;
end;

object:		dm_hphcs_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, Data_Management.Daemon.*;
 acl:		re, *.SysDaemon.*;
 ringbrack:	0, 0, 2;
linkage;
end;

name:		ibm3270_mpx;
 access:		read, execute;
 wired:		no;
linkage;
 wired:		yes;
end;

fabricate:          initializer_abs_seg;
 access:		read, write;
 abs_seg:		yes;
end;

object:		initializer_gate_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, Initializer.SysDaemon.z;
 ringbrack:	0, 0, 5;
linkage;
end;

fabricate:	io_page_table_seg;
 access:		read, write;
 paged:		yes;
 max_length:	16;		/* constant in io_page_tables.incl.pl1 */
 wired:		no;		/* wired by ioi_page_table$init */
end;

fabricate:	ioat;
 access:		read, write;
 max_length:	4;
end;

object:		ioi_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.*.*;
 ringbrack:	0, 0, 5;
linkage;
end;

fabricate:	lvt;
 access:		read, write;
 cur_length:	256;
end;

object:		mhcs_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.*.*;
 ringbrack:	0, 0, 5;
linkage;
end;

object:		phcs_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysMaint.*;
 acl:		re, *.SysDaemon.*;
 ringbrack:	0, 0, 5;
linkage;
end;

name:		polled_vip_mpx;
 access:		read, execute;
 wired:		no;
linkage;
 wired:		yes;
end;

object:		protocol_ring0_iso_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysMaint.*;
 acl:		re, *.SysDaemon.*;
 acl:		re, Internet.Daemon.*;  /* Make sure he has access 01/22/91 WA */
 ringbrack:	0, 0, 5;
linkage;
end;

fabricate:	pv_salv_seg;
end;

fabricate:	salv_abs_seg_00;
 abs_seg:		yes;
 access:		read, write;
 wired:		yes;
end;

fabricate:	salv_abs_seg_01;
 abs_seg:		yes;
 access:		read, write;
 wired:		yes;
end;

fabricate:	salv_abs_seg_02;
 abs_seg:		yes;
 access:		read, write;
 wired:		yes;
end;

fabricate:	salv_abs_seg_03;
 abs_seg:		yes;
 access:		read, write;
 wired:		yes;
end;

fabricate:	salv_abs_seg_04;
 abs_seg:		yes;
 access:		read, write;
 wired:		yes;
end;

fabricate:	salv_dir_space;
 access:		read, write;
 max_length:	52;
end;

name:		salv_data;
 access:		read, write;
 max_length:	64;
linkage;
 init_seg:	yes;
end;

fabricate:	salv_temp_dir;
 access:		read, write;
 max_length:	205;
end;

fabricate:	scavenger_data;
 access:		read, write;
 max_length:	76;
end;

fabricate:	str_seg;
 access:		read, write;
 max_length:	16;
 cur_length:	16384;
end;

fabricate:	syserr_daemon_dseg;
 access:		read, write;
 cur_length:	1024;
end;

fabricate:	syserr_daemon_pds;
 access:		read, write;
 cur_length:	2048;
end;

fabricate:	syserr_daemon_stack;
 access:		read, write;
 cur_length:	16384;
end;

object:		shcs_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.SysDaemon.*;
 acl:		re, *.SysMaint.*;
 acl:		re, *.SysAdmin.*;
 ringbrack:	0, 0, 5;
linkage;
end;

object:		system_privilege_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysMaint.*;
 acl:		re, *.SysDaemon.*;
 ringbrack:	0, 0, 5;
linkage;
end;

object:		tandd_;
 path_name:	>system_library_1;
 access:		read, execute;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysMaint.*;
 acl:		re, *.SysDaemon.*;
 ringbrack:	0, 0, 5;
linkage;
end;

name:		template_pds;
 access:		read, write;
 max_length:	16;
 paged:		yes;
linkage;
end;

fabricate:	tty_area;
 access:		read, write;
 max_length:	128;
end;

name:		tty_buf;
 access:		read, write;
 wired:		yes;
 paged:             yes;
 linkage;
end;

fabricate:	tty_tables;
 access:		read, write;
 max_length:	64;
end;

fabricate:	vtoc_buffer_seg;
 access:		read, write;
end;


collection:	2.0;


/*  */

name:		bound_error_handlers_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_expand_path_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_fsim_,
		file;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_hc_initlzr_auxl_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_ios_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_ipc_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_library_3_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_log_support_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:         1, 5, 5;
end;

name:		bound_mdir_control;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_mdxhdx_;
 add_segnames;
 path_name:	>system_library_1;
 ringbrack:	1, 5, 5;
 access:		read, execute;
end;

name:		bound_oc_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_process_env_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_rcp_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_rcprm_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_reloader_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_system_control_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_system_startup_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_tape_label_util_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_tape_mult_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_volume_reloader_;
 add_segnames;
 delete_name:	reloader;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		bound_volume_rldr_ut_;
 add_segnames;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

data:		default_rtmf.rtdt;
 path_name:	>system_library_1;
 access:		read;
 ringbrack:	1, 5, 5;
end;

name:		initializer_mdc_;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 1, 5;
 acl:		re, Initializer.SysDaemon.z;
end;

name:		mdc_;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 1, 5;
 acl:		re, Initializer.SysDaemon.z;
 acl:		re, *.*.*;
end;

name:		mdc_priv_;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 1, 5;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysMaint.*;
 acl:		re, *.SysDaemon.*;
end;

name:		operator_pointers_;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		trace_operator_pointers_;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 5, 5;
end;

name:		rcp_;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 1, 5;
 acl:		re, *.*.*;
end;

name:		rcp_priv_,
		rcp_meter_;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 1, 5;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysMaint.*;
 acl:		re, *.SysDaemon.*;
end;

name:		rcp_sys_;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 1, 5;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysMaint.*;
 acl:		re, *.SysDaemon.*;
 acl:		re, Volume_Dumper.Daemon.*;
 acl:		re, Volume_Reloader.Daemon.*;
 acl:		re, Volume_Retriever.Daemon.*;
end;

name:		rcp_admin_;
 path_name:	>system_library_1;
 access:		read, execute;
 ringbrack:	1, 1, 5;
 acl:		re, *.SysAdmin.*;
 acl:		re, *.SysMaint.*;
 acl:		re, *.SysDaemon.*;
end;

data:		ring_zero_meter_limits_ASCII_,     /* For compatibility */
                    ring_zero_meter_limits.ascii;
 path_name:	>system_library_1;
 ringbrack:	1, 5, 5;
 access:		read;
end;

fabricate:          ring_zero_meter_limits.table;
 path_name:	>system_library_1;
 ringbrack:	1, 5, 5;
 acl:               rw, Initializer.SysDaemon.z;
 acl:		r, *.*.*;
end;

text:		template_pit, pit;
 path_name:	>process_dir_dir>!zzzzzzzbBBBBBB;
 access:		read, write;
 ringbrack:	1, 5, 5;
end;

collection:	3.0;
fini;
