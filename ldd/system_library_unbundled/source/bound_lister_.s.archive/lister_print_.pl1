/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* This program prints a Lister file using a format table */

/* Modified 740605 by PG to be able to print found_list.
   Modified 741110 by PG for center format item.
   Modified 761105 by PG to rename from assist_print_ to lister_print_.
   Modified 770923 by PG to always truncate field values on right.
   Modified 781010 by PG to get :argN to work.
   Modified 790329 by PG to get <:record_count,N> to work (bug 24).
   Modified 791128 by PG to fix 039 (pls counted chars, not print positions).
   Modified 800411 by PB to make <:arg> honor justification request.
   Modified 800813 by PB to print <:uid>.
   Modified 800923 by PB to fix bug where no args given in command line but
   asked for in listform.
   Modified 801008 by PB to requote strings for display_list.
   Modified 810128 by PB to fix bug when requoting null field.
   Modified 810226 by PB to report pathname with missing arg.
*/

/* format: style3 */
lister_print_:
     procedure (bv_in_file_ptr, bv_format_table_ptr, bv_output_ptr, bv_outx, bv_select_all, bv_selected_records_ptr,
	     bv_arg_list_ptr, bv_arg_position, bv_brief_errors, bv_display, bv_listform_path) options (packed_decimal);

/* parameters */

declare (
         bv_arg_list_ptr ptr,
         bv_arg_position fixed bin,
         bv_brief_errors bit (1) aligned,
         bv_display bit (1) aligned,
         bv_format_table_ptr ptr,
         bv_in_file_ptr ptr,
         bv_listform_path char (*),
         bv_output_ptr ptr,
         bv_outx fixed bin (21),
         bv_select_all bit (1) aligned,
         bv_selected_records_ptr
         ptr
         ) parameter;

/* automatic */

declare (i, left_padding, outx, right_padding)
         fixed bin (21);
declare (n_records, start) fixed bin;
declare (output_ptr, selected_records_ptr)
         ptr;
declare  uid_chars char (6) varying;

/* entries */

declare  com_err_ entry options (variable);
declare  convert_binary_integer_$decimal_string
         entry (fixed) returns (char (13) varying);
declare  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
declare  date_time_ entry (fixed bin (71), char (*) aligned);
declare  requote_string_ entry (char (*)) returns (char (*));

/* based */

dcl  outstring char (1044480) based (output_ptr);
dcl  q_outstring char (outx - 1) based (output_ptr);

/* builtins */

dcl (bin, char, clock, copy, divide, hbound, index, lbound, length, ltrim, max, min, null, substr, rel)
     builtin;

/* include files */

%include lister_structures;

/* program */

	in_file_ptr = bv_in_file_ptr;
	format_table_ptr = bv_format_table_ptr;
	output_ptr = bv_output_ptr;
	outx = bv_outx;
	selected_records_ptr = bv_selected_records_ptr;

	ltp = format_table.literal_table;
	n_records = 0;

	start = format_table.before;
	call interpret_format;

	start = format_table.record;

	if bv_select_all				/* Select all records */
	then do;
	     do recordp = input_file.record_head repeat input_record.next while (recordp ^= null);
		n_records = n_records + 1;
		call interpret_format;
	     end;
	end;
	else if selected_records_ptr ^= null		/* Otherwise, if there are any records to print */
	then do;
	     do i = lbound (selected_records_ptr -> list_node.list (*), 1)
		     to hbound (selected_records_ptr -> list_node.list (*), 1);
		recordp = selected_records_ptr -> list_node.list (i);
		n_records = n_records + 1;
		call interpret_format;
	     end;
	end;
	else ;					/* Else, nothing to print */

	start = format_table.after;
	call interpret_format;
	bv_outx = outx;
	return;

interpret_format:
	procedure ();

/* automatic */

dcl (columns, delta, first, i, j, jump_index, l, w)
     fixed bin (21);
dcl  code fixed bin (35);
dcl  justify bit (2) aligned;
dcl  temp char (13) varying aligned;
dcl  date_time char (24) aligned;
dcl  arg_number fixed bin,
     arg_len fixed bin (21),
     arg_ptr ptr,
     contains_BS bit (1) aligned;

/* based */

dcl  arg_string char (arg_len) based (arg_ptr);

/* internal static */

declare  BS char (1) internal static init ("");

/* program */

	     if start = 0
	     then return;

	     do i = start by 1;

		j = item (i).action;
		w = item (i).width;
		justify = item (i).justification;

		if j < 0
		then jump_index = -j;
		else jump_index = 0;

		go to jump (jump_index);

jump (0):						/* print field */
		atomp = input_record.field (j);

		contains_BS = "0"b;

		if atomp = null			/* if no field */
		then l = 0;			/* set atom length to zero */
		else if index (atom, BS) ^= 0
		then do;
		     l = print_positions (atom);
		     contains_BS = "1"b;
		end;
		else l = length (atom);

		if bv_display			/* called by display_list af. */
		then do;
		     if atomp = null 
			then call add_requoted (requote_string_ (""));
		     else call add_requoted (requote_string_ ((atom)));
		     goto next;
		end;

		if w = 0				/* if no field width specified */
		then w = l;			/* use default length */

		delta = w - l;			/* >0 --> #spaces,  <0 --> #truncate */

		if delta > 0			/* if field fits in window */
		then do;
		     columns = l;			/* print whole field */
		     right_padding = delta;		/* and fill rest of window */
		end;
		else do;
		     columns = w;			/* print as much of field as will fit in window */
		     right_padding = 0;		/* no fill */
		end;

		left_padding = 0;			/* default value for flush_left */

		if justify = flush_right
		then do;
		     if delta > 0			/* need fill */
		     then left_padding = delta;

		     right_padding = 0;		/* don't need any right padding */
		end;
		else if justify = center
		then do;
		     if delta > 0			/* if field fits in window */
		     then do;
			left_padding = divide (delta, 2, 21, 0);
			right_padding = w - columns - left_padding;
		     end;
		     else ;			/* field doesn't fit; padding values are ok */
		end;

/* At this point everything has been arranged to that the following equality holds:
   w = left_padding + columns + right_padding
*/

		if left_padding > 0			/* need padding? */
		then do;
		     substr (outstring, outx, left_padding) = "";
		     outx = outx + left_padding;
		end;

		if columns > 0			/* if atom exists */
		then do;
		     if contains_BS
		     then columns = measure (atom, columns);

		     substr (outstring, outx, columns) = substr (atom, 1, columns);
		     outx = outx + columns;
		end;

		if right_padding > 0		/* finish up flush_left or center item. */
		then do;
		     substr (outstring, outx, right_padding) = "";
		     outx = outx + right_padding;
		end;

		go to next;

jump (1):						/* print literal */
		atomp = literal (w);
		atom_length = length (atom);
		substr (outstring, outx, atom_length) = atom;
		outx = outx + atom_length;
		go to next;

jump (2):						/* print spaces */
		substr (outstring, outx, w) = "";
		outx = outx + w;
		go to next;

jump (4):						/* print date */
		if w = 0
		then w = 8;
		else w = max (min (w, 24), 0);
		call date_time_ (clock (), date_time);
		substr (outstring, outx, w) = date_time;
		outx = outx + w;
		go to next;

jump (5):						/* print time */
		if w = 0
		then w = 6;
		else w = max (min (w, 14), 0);
		call date_time_ (clock (), date_time);
		substr (outstring, outx, w) = substr (date_time, 11, w);
		outx = outx + w;
		go to next;

jump (6):						/* print number of records printed (output_count) */
		temp = convert_binary_integer_$decimal_string (n_records);

		if w = 0
		then w = length (temp);		/* if user didn't specify, use default */

		if justify = flush_right & length (temp) < w
		then substr (outstring, outx, w) = copy (" ", w - length (temp))||temp;
		else if justify = center & length (temp) < w
		then do;
		     left_padding = divide (w - length (temp), 2, 17, 0);
		     right_padding = w - left_padding;
		     substr (outstring, outx, w) = copy (" ", left_padding)||temp||copy (" ", right_padding);
		end;
		else substr (outstring, outx, w) = temp;
		outx = outx + w;
		go to next;

jump (7):						/* print argument N */
		if bv_arg_position = 0
		then do;
		     if ^bv_brief_errors
		     then call com_err_ (0, "process_list",
			"Argument ^d specified in listform segment but not present in command line. ^a",
			item (i).argument_number, bv_listform_path);
		     goto jump (2);			/* use null string. */
		end;

		arg_number = item (i).argument_number;
		call cu_$arg_ptr_rel (bv_arg_position + arg_number, arg_ptr, arg_len, code, bv_arg_list_ptr);
		if code ^= 0
		then do;
		     if ^bv_brief_errors
		     then call com_err_ (0, "process_list",
			"Argument ^d specified in listform segment but not present after -ag. ^a",
			arg_number, bv_listform_path);

		     go to jump (2);		/* use null string */
		end;

		if w = 0
		then w = arg_len;			/* set default length */

		if justify = flush_right & arg_len < w
		then substr (outstring, outx, w) = copy (" ", w - arg_len)||arg_string;
		else if justify = center & arg_len < w
		then do;
		     left_padding = divide (w - arg_len, 2, 17, 0);
		     right_padding = w - left_padding;
		     substr (outstring, outx, w) = copy (" ", left_padding)||arg_string||copy (" ", right_padding);
		end;
		else substr (outstring, outx, w) = arg_string;
		outx = outx + w;
		go to next;

jump (8):
		uid_chars = ltrim (char (input_record.uid)); /* print uid */

		if bv_display			/* called by display_list af. */
		then do;
		     substr (outstring, outx, length (uid_chars) + 2) = """" || uid_chars || """";
		     outx = outx + length (uid_chars) + 2;
		     goto next;
		end;

		if w = 0
		then w = length (uid_chars);		/* set default length */

		if justify = flush_right & length (uid_chars) < w
		then substr (outstring, outx, w) = copy (" ", w - length (uid_chars))||uid_chars;
		else if justify = center & length (uid_chars) < w
		then do;
		     left_padding = divide (w - length (uid_chars), 2, 17, 0);
		     right_padding = w - left_padding;
		     substr (outstring, outx, w) = copy (" ", left_padding)||uid_chars||copy (" ", right_padding);
		end;
		else substr (outstring, outx, w) = uid_chars;
		outx = outx + w;
		go to next;

next:
	     end;

jump (3):						/* end of format list */
	     return;

add_requoted:  procedure (q_string);

dcl  q_string char (*) parameter;

		outx = outx + length (q_string);
		substr (q_outstring, outx - length (q_string)) = q_string;
	     end add_requoted;

print_positions:
	     procedure (P_atom) returns (fixed bin (21));

/* parameters */

declare  P_atom char (*) varying aligned;

/* automatic */

declare  ascii_value fixed bin (9),
         n_chars fixed bin (21),
         n_cols fixed bin (21),
         strx fixed bin (21);

/* builtins */

declare (length, rank, substr)
         builtin;

/* internal static */

declare  BS fixed bin (9) internal static init (8);

/* program */

		n_cols = 0;

		do strx = 1 to length (P_atom);
		     ascii_value = rank (substr (P_atom, strx, 1));

		     if ascii_value = BS
		     then n_cols = n_cols - 1;
		     else n_cols = n_cols + 1;
		end;

		return (n_cols);

measure:
		entry (P_atom, P_width) returns (fixed bin (21));

/* parameters */

declare  P_width fixed bin (21) parameter;

/* program */

		n_cols = 0;
		n_chars = 0;

		do strx = 1 to length (P_atom);
		     ascii_value = rank (substr (P_atom, strx, 1));

		     if ascii_value = BS
		     then do;
			n_chars = n_chars + 1;
			n_cols = n_cols - 1;
		     end;
		     else do;
			if n_cols = P_width
			then return (n_chars);	/* no room to add one more char */

			n_chars = n_chars + 1;
			n_cols = n_cols + 1;
		     end;
		end;

		return (n_chars);			/* they all fit */

	     end print_positions;

	end interpret_format;

     end;
