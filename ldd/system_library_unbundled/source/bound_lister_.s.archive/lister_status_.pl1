/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* LISTER_STATUS_ - Program to report selected information about a lister segment.
   *   Written 800702 by Paul W. Benjamin
   Modified 800923 by PB to fix bug where long output is truncated.
   * */

lister_status_:
     proc (bv_in_file_ptr, bv_in_ename, bv_select_all, bv_status_info_ptr)
	     options (packed_decimal);
						/* parameters */

declare (
         bv_in_file_ptr ptr,				/* Input - ptr to lister segment. */
         bv_in_ename char (*),			/* Input - entryname of lister segment. */
         bv_select_all bit (1) aligned,			/* Input - user wants all records. */
         bv_status_info_ptr ptr			/* Input - ptr to status info structure. */
         ) parameter;

/* automatic */

declare  code fixed bin (35),
         fname_len fixed bin (21),
         fname_ptr ptr,
         i fixed bin,
         in_ename char (32),
         now char (24),
         out_len fixed bin (21),
         out_ptr ptr,
         select_all bit (1) aligned,
         selected_records_ptr ptr,
         status_info_ptr ptr,
         verbosity fixed bin;

						/* based */

declare 1 status_info based (status_info_ptr),
        2 print_switches,
	3 print_fdelim bit (1),
	3 print_fnames bit (1),
	3 print_rdelim bit (1),
	3 print_totals bit (1),
        2 af bit (1) aligned,
        2 total fixed bin,
        2 retlen fixed bin (21),
        2 retptr ptr,
        2 header bit (1) aligned,
        2 header_specified bit (1) aligned;

declare  fnames_out char (fname_len) based (fname_ptr),
         out_string char (out_len) based (out_ptr),
         ret_string char (retlen) varying based (retptr);

/* builtins */

declare (clock, fixed, hbound, null, pointer, substr) builtin;

/* conditions */

declare  cleanup condition;

/* entries */

declare  date_time_ entry (fixed bin (71), char (*)),
         get_temp_segment_ entry (char (*), ptr, fixed bin (35)),
        (ioa_, ioa_$rsnpnnl) entry () options (variable),
         release_temp_segment_ entry (char (*), ptr, fixed bin (35));

/* external static */

declare  sys_info$max_seg_size fixed bin (19) ext static;

						/* include files */
%include lister_entries;
%include lister_structures;


/* program */

	in_file_ptr = bv_in_file_ptr;
	in_ename = bv_in_ename;
	select_all = bv_select_all;
	status_info_ptr = bv_status_info_ptr;

	out_ptr = null ();
	fname_ptr = null ();

	on cleanup begin;
	     if out_ptr ^= null ()
	     then call release_temp_segment_ ("lister_status_", out_ptr, code);
	     if fname_ptr ^= null ()
	     then call release_temp_segment_ ("lister_status_", fname_ptr, code);
	end;

	call get_temp_segment_ ("lister_status_", out_ptr, code);

	field_table_ptr = input_file.field_table_offset;

	if af
	then verbosity = 0;
	else verbosity = fixed (print_fdelim) + fixed (print_rdelim) + fixed (print_totals) + fixed (print_fnames);

	if ^header_specified
	then if verbosity = 4
	     then header = "1"b;
	     else header = "0"b;

	if print_fnames
	then do;
	     call get_temp_segment_ ("lister_status_", fname_ptr, code);
	     fname_len = 0;
	     do i = 0 to hbound (field_table.index_to_field_id (*), 1);
		fidp = pointer (field_table.index_to_field_id (i), input_file.area);
		if i ^= 0 & verbosity > 1
		then do;
		     fname_len = fname_len + 1;
		     substr (fnames_out, fname_len, 1) = ",";
		end;
		if i ^= 0
		then do;
		     fname_len = fname_len + 1;
		     substr (fnames_out, fname_len, 1) = " ";
		end;
		fname_len = fname_len + field_identifier.size;
		substr (fnames_out, fname_len + 1 - field_identifier.size, field_identifier.size) = field_identifier.string;
	     end;
	end;

	if header
	then call date_time_ (clock (), now);

	out_len = sys_info$max_seg_size * 4;
	call ioa_$rsnpnnl (
	     "^[^21t^a^41t^a^2/^;^2s^]" ||		/* Header.     */
	     "^[^[Total ^[Selected ^]Records:^25t^;^s^]^i^[^/^;^x^]^;^4s^]" ||
	     "^[^[Record_delimiter:^25t^]^a^[^[;^]^/^;^x^s^]^;^4s^]" ||
	     "^[^[Field_delimiter:^25t^]^a^[^[;^]^/^;^x^s^]^;^4s^]" ||
	     "^[^[Field_names:^25t^]^a^[^[;^]^/^;^x^]^]",
	     out_string,
	     out_len,
	     (header = "1"b),			/* Only print header if all fields printed. */
	     in_ename,
	     now,
	     (print_totals = "1"b),
	     (verbosity > 1),
	     (select_all = "0"b),
	     total,
	     (af = "0"b),
	     (print_rdelim = "1"b),
	     (verbosity > 1),
	     field_table.record_delimiter,
	     (af = "0"b),
	     (verbosity > 1),
	     (print_fdelim = "1"b),
	     (verbosity > 1),
	     field_table.field_delimiter,
	     (af = "0"b),
	     (verbosity > 1),
	     (print_fnames = "1"b),
	     (verbosity > 1),
	     fnames_out,
	     (af = "0"b),
	     (verbosity > 1)
	     );

	if af
	then ret_string = out_string;
	else call ioa_ ("^a", out_string);

	call release_temp_segment_ ("lister_status_", out_ptr, code);
	if fname_ptr ^= null ()
	then call release_temp_segment_ ("lister_status_", fname_ptr, code);

     end;

