/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style3 */
lister_hash_fid_:
     procedure (bv_in_file_ptr, field_id, return_field_index) options (packed_decimal);

/* Modified 791221 by PG to use rank builtin */

/* parameters */

dcl (
     bv_in_file_ptr ptr,
     field_id char (*),
     return_field_index fixed bin,
     return_field_ptr ptr
     ) parameter;

/* automatic */

dcl  main_entry bit (1) aligned;
dcl (i, j, k) fixed bin;
dcl  mod_2_sum bit (36) aligned;
dcl  hash_index fixed bin;
dcl (p, old_fidp) ptr;

/* builtins */

dcl (addr, binary, bool, dim, divide, length, mod, null, offset, pointer, rank, substr)
     builtin;

/* based */

dcl  string_bit_array dim (0:65536) bit (36) unal based (p);

/* internal static */

dcl  mask dim (3) bit (36) aligned int static init ((9)"1"b, (18)"1"b, (27)"1"b);

/* include files */

%include lister_structures;

/* program */

	main_entry = "1"b;
	go to begin;

lister_hash_fid_$enter:
	entry (bv_in_file_ptr, field_id, return_field_ptr);

	main_entry = "0"b;
begin:
	in_file_ptr = bv_in_file_ptr;
	n = length (field_id);
	if n = 1
	then hash_index = mod (rank (substr (field_id, 1, 1)), dim (hash_field_id_to_index, 1));
	else do;
	     p = addr (field_id);
	     mod_2_sum = "0"b;
	     j = divide (n - 1, 4, 17, 0);
	     k = n - 4 * j;
	     if k ^= 4
	     then string_bit_array (j) = string_bit_array (j) & mask (k);
	     do i = 0 to j;
		mod_2_sum = bool (mod_2_sum, string_bit_array (i), "0110"b);
	     end;
	     hash_index = mod (binary (mod_2_sum, 35), dim (hash_field_id_to_index, 1));
	end;

	old_fidp = null;
	field_table_ptr = input_file.field_table_offset;
	do fidp = pointer (field_table.hash_field_id_to_index (hash_index), input_file.area)
		repeat pointer (fidp -> field_identifier.next, input_file.area) while (fidp ^= null);

	     if n < fidp -> field_identifier.size
	     then go to not_found;
	     if n = fidp -> field_identifier.size
	     then if field_id = fidp -> field_identifier.string
		then do;
		     if main_entry
		     then return_field_index = fidp -> field_identifier.field_index;
		     else return_field_ptr = null;	/* it already exists */
		     return;
		end;
	     old_fidp = fidp;
	end;

not_found:
	if main_entry
	then do;
	     return_field_index = -1;			/* not found */
	     return;
	end;

	p = fidp;
	allocate field_identifier in (input_file.area) set (fidp);
	fidp -> field_identifier.next = offset (p, input_file.area);
	fidp -> field_identifier.field_index = -1;
	fidp -> field_identifier.string = field_id;

	if old_fidp = null
	then field_table.hash_field_id_to_index (hash_index) = offset (fidp, input_file.area);
	else old_fidp -> field_identifier.next = offset (fidp, input_file.area);

	return_field_ptr = fidp;
	return;

     end						/* lister_hash_fid_ */;
