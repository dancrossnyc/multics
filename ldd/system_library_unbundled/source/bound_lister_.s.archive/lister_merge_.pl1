/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Procedure to merge two Lister files into a new Lister file.
   Written 760415 by PG after several false starts.
   Modified 761116 by PG to rename from assist_merge_ to lister_merge_.
   Modified 800522 by PB to abort processing when 2 files don't have same fields
   in the same order.  This is an interim fix, future
   implementation will resolve differences.
   Modified 800523 by PB to make field comparison case-insensitive.
   Modified 800825 by PB to handle unique ids.
   Modified 800923 by PB to allow update file to have a subset of master file's
   fields and to have fields in different order.
*/

/* format: style3 */
lister_merge_:
     procedure (bv_input_file_ptr, bv_update_file_ptr, bv_output_file_ptr, bv_field_list, bv_n_fields, bv_merge_type, bv_code)
	     returns ((3) fixed bin) options (packed_decimal);

/* external static */

dcl  lister_codes_$master_not_like_update ext static fixed bin (35);

						/* parameters */

dcl (
    (bv_input_file_ptr, bv_output_file_ptr, bv_update_file_ptr)
     ptr,
     bv_field_list fixed bin dim (*),
     bv_n_fields fixed bin,
     bv_merge_type fixed bin,
     bv_code fixed bin (35)
     ) parameter;

/* automatic */

dcl (ifp, inftptr, irp, equiv_table_ptr, previous_irp, ufp, upftptr, urp)
     ptr,
     counts (3) fixed bin,
    (flx, fx, i, j, equiv, merge_type, n_fields, rel)
     fixed bin;

/* based */

dcl  equiv_table (0:inftptr -> field_table.max_field_index)
     fixed bin based (equiv_table_ptr);

/* builtin */

dcl (hbound, lbound, length, null, pointer, translate)
     builtin;

/* internal static */

dcl (
    (
     LESS_THAN initial (1),
     EQUAL initial (2),
     GREATER_THAN initial (3)
     ) fixed bin,
    (
     lower_case initial ("abcdefghijklmnopqrstuvwxyz"),
     upper_case initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
     ) char (26) aligned
     ) internal static options (constant);

/* include files */

%include lister_entries;
%include lister_structures;

/* program */

	in_file_ptr = bv_input_file_ptr;
	up_file_ptr = bv_update_file_ptr;
	out_file_ptr = bv_output_file_ptr;
	merge_type = bv_merge_type;
	n_fields = bv_n_fields;
	bv_code = 0;

	counts (1) = 0;
	counts (2) = 0;
	counts (3) = 0;
	previous_irp = null;			/* old value of irp */
	inftptr = input_file.field_table_offset;
	upftptr = update_file.field_table_offset;
	allocate equiv_table;
	do i = 0 to inftptr -> field_table.max_field_index;
	     equiv_table (i) = -1;
	end;
	call compare_field_tables;
	if bv_code ^= 0 then do;
	     free equiv_table;
	     return (counts);
	end;

	call lister_copy_file_head_ (in_file_ptr, out_file_ptr);

	output_file.next_uid = input_file.next_uid;

	irp = input_file.record_head;
	urp = update_file.record_head;

merge_loop:
	if irp ^= null
	then if urp ^= null
	     then do;
		do flx = lbound (bv_field_list, 1) to n_fields;
		     fx = bv_field_list (flx);
		     ifp = irp -> input_record.field (fx);
		     if equiv_table (fx) = -1
		     then ufp = null;
		     else ufp = urp -> update_record.field (equiv_table (fx));

		     if ifp = null
		     then if ufp = null
			then ;
			else do;
			     rel = LESS_THAN;
			     go to no_match (merge_type);
			end;
		     else if ufp = null
		     then do;
			rel = GREATER_THAN;
			go to no_match (merge_type);
		     end;
		     else do;
			rel = compare (ifp, ufp);
			if rel ^= EQUAL
			then go to no_match (merge_type);
		     end;
		end;

		rel = EQUAL;
		go to match (merge_type);
	     end;
	     else rel = LESS_THAN;			/* irp ^= null, urp = null */
	else if urp = null				/* irp = null, urp = null */
	then do;
	     free equiv_table;
	     return (counts);			/* ALL DONE. */
	end;
	else rel = GREATER_THAN;			/* irp = null, urp ^= null */

	go to no_match (merge_type);

match (0):					/* ADD */
match (1):					/* AND */
write_input:
	call copy_record (in_file_ptr, irp, "1"b);

match (2):					/* OR  */
match (3):					/* SUBTRACT */
discard_input:
	previous_irp = irp;				/* save old value */
	irp = irp -> input_record.next;		/* step to next input record */
	counts (1) = counts (1) + 1;			/* one more input record processed. */
	go to merge_loop;

no_match (0):					/* ADD */
no_match (2):					/* OR  */
	if rel = LESS_THAN
	then go to write_input;

	call copy_record (up_file_ptr, urp, "0"b);	/* write_update */
	go to discard_update;

no_match (1):					/* AND */
	if rel = LESS_THAN
	then go to discard_input;

	go to discard_update;

no_match (3):					/* SUBTRACT */
	if rel = LESS_THAN
	then go to write_input;

discard_update:
	urp = urp -> update_record.next;
	counts (2) = counts (2) + 1;			/* one more update record processed. */
	go to merge_loop;

compare_field_tables:
	proc;
dcl (infidp, upfidp) ptr;
	     if inftptr -> field_table.max_field_index < upftptr -> field_table.max_field_index
	     then bv_code = lister_codes_$master_not_like_update;
	     else do i = 0 to upftptr -> field_table.max_field_index;
		upfidp = pointer (upftptr -> field_table.index_to_field_id (i), update_file.area);
		equiv = -1;
		do j = 0 to inftptr -> field_table.max_field_index;
		     infidp = pointer (inftptr -> field_table.index_to_field_id (j), input_file.area);
		     if infidp -> field_identifier.string = upfidp -> field_identifier.string
		     then do;
			equiv = j;
			j = inftptr -> field_table.max_field_index;
		     end;
		end;
		if equiv = -1
		then do;
		     bv_code = lister_codes_$master_not_like_update;
		     return;
		end;
		equiv_table (equiv) = i;
	     end;
	end;


compare:
	procedure (p1, p2) returns (fixed bin);

/* parameters */

dcl (p1, p2) ptr parameter;

/* automatic adjustable */

dcl  s1 char (length (p1 -> atom)) aligned,
     s2 char (length (p2 -> atom)) aligned;

/* program */

	     s1 = translate (p1 -> atom, lower_case, upper_case);
	     s2 = translate (p2 -> atom, lower_case, upper_case);

	     if s1 = s2
	     then return (EQUAL);
	     else if s1 < s2
	     then return (LESS_THAN);
	     else return (GREATER_THAN);

	end compare;

copy_record:
	procedure (bv_file_ptr, bv_record_ptr, bv_retain_uid);

/* parameters */

dcl (bv_file_ptr, bv_record_ptr)
     ptr parameter,
     bv_retain_uid bit (1) aligned parameter;

/* automatic */

dcl (filep, out_rp, out_atomp)
     ptr,
     fieldx fixed bin;

/* program */

	     recordp = bv_record_ptr;
	     filep = bv_file_ptr;

	     if bv_retain_uid
	     then out_rp = lister_create_record_$retain_uid (out_file_ptr, input_record.uid);
	     else out_rp = lister_create_record_ (out_file_ptr);

/* The following reference to input_record should really to be to a declaration of
   a record that references "filep" , not input_file. */

	     do fieldx = lbound (input_record.field, 1) to hbound (input_record.field, 1);
		if bv_file_ptr = up_file_ptr
		then do;
		     if equiv_table (fieldx) = -1
		     then atomp = null;
		     else atomp = pointer (input_record.field (equiv_table (fieldx)), filep -> input_file.area);
		end;
		else atomp = pointer (input_record.field (fieldx), filep -> input_file.area);
		if atomp ^= null
		then do;
		     atom_length = length (atom);
		     allocate atom in (output_file.area) set (out_atomp);
		     out_atomp -> atom = atom;
		     out_rp -> output_record.field (fieldx) = out_atomp;
		end;
	     end;

	     counts (3) = counts (3) + 1;		/* one more output record */
	     return;

	end copy_record;

     end;
