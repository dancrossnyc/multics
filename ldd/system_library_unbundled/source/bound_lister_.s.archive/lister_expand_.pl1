/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* This program converts a Lister file into a Lister ASCII input segment. */

/* Written by Paul A. Green on September 2, 1974. */
/* Modified 770923 by PG to rename from assist_expand_ to lister_expand_.
   Modified 791128 by PG to requote fields if necessary. (sugg 003)
   Modified 800318 by PG to add output_all_fieldnames control for MJG.
*/

/* format: style3 */
lister_expand_:
     procedure (P_in_file_ptr, P_output_ptr, P_output_index, P_width, P_output_all_fieldnames) returns (fixed bin)
	     options (packed_decimal);

/* parameters */

declare (
         P_in_file_ptr ptr,				/* (input) ptr to ASSIST file */
         P_output_ptr ptr,				/* (input) ptr to output segment */
         P_output_index fixed bin (21),			/* (in/out) 1-origin character index of next free char. */
         P_width fixed bin,				/* (input) line width to use */
         P_output_all_fieldnames
         bit (1) aligned				/* (input) ON if we should always put out =fieldname */
         ) parameter;

/* automatic */

declare  atomx fixed bin (21),
         fd char (1),
         n_chars fixed bin (21),
         out_ptr ptr,
         output_all_fieldnames
         bit (1) aligned,				/* ON if we should always put out =fieldname */
         quote bit (1) aligned,			/* ON if atom needs to be quoted */
         rd char (1),
         sp_fd char (2) aligned,
        (fi, line_index, line_length, out)
         fixed bin (21),
         n_records fixed bin;

/* based */

declare  out_string char (1044480) based (out_ptr) unaligned;

/* builtin */

declare (hbound, index, lbound, length, null, pointer, substr)
         builtin;

/* internal static */

declare (
         NL char (1) init ("
"),
         QUOTE char (1) init (""""),
         QUOTE_QUOTE char (2) init (""""""),
         NL_HT_SP_VT_NP char (5) init ("
	 "),
         SEMI_NL char (2) init (";
")
         ) internal static options (constant);

/* include files */

%include lister_structures;

/* program */

	in_file_ptr = P_in_file_ptr;
	out_ptr = P_output_ptr;
	out = P_output_index;
	output_all_fieldnames = P_output_all_fieldnames;

	field_table_ptr = input_file.field_table_offset;

	if P_width <= 0
	then line_length = 0;			/* will put one field per line... */
	else line_length = P_width;

	rd = field_table.record_delimiter;
	fd = field_table.field_delimiter;
	sp_fd = "  ";
	substr (sp_fd, 2, 1) = fd;

/* initialize some variables */

	n_records = 0;
	line_index = 0;

/* Put out the field & record delimiters */

	call put ("Record_delimiter: ");
	call put (rd);
	call put (SEMI_NL);

	call put ("Field_delimiter: ");
	call put (fd);
	call put (SEMI_NL);

/* put out the names of the fields */

	line_index = 0;
	call put ("Field_names: ");

	fidp = pointer (field_table.index_to_field_id (0), input_file.area);
	call put (field_identifier.string);

	do fi = 1 to hbound (field_table.index_to_field_id (*), 1);
	     fidp = pointer (field_table.index_to_field_id (fi), input_file.area);
	     call put (",");

	     if (line_length = 0 & line_index > 132) | (line_length > 0 & line_index > line_length)
	     then do;
		call put (NL);
		line_index = 0;
	     end;
	     else call put (" ");

	     call put (field_identifier.string);
	end;

/* end the list of names with a semi-colon, and put in a blank line. */

	call put (";

Records:
");

/* now copy each record into the output segment */

	do recordp = input_file.record_head repeat input_record.next while (recordp ^= null);

/* we assume that there are no null records */

	     n_records = n_records + 1;		/* count up number of records */

	     substr (out_string, out, 1) = rd;
	     out = out + 1;
	     line_index = 1;

	     do fi = lbound (field_table.index_to_field_id (*), 1) to hbound (field_table.index_to_field_id (*), 1);
		atomp = input_record.field (fi);

		if atomp ^= null | output_all_fieldnames
		then do;
		     if atomp = null
		     then atom_length = 0;
		     else atom_length = length (atom);

		     fidp = pointer (field_table.index_to_field_id (fi), input_file.area);
		     n = length (field_identifier.string);

/* See if length(chars_to_far) + length(fid)+1 + length (atom) + length(sp_fd) + length(two_quotes) > line_length */

		     if line_index + n + atom_length + 5 > line_length
		     then do;
			substr (out_string, out, 1) = NL;
			out = out + 1;
			line_index = 0;
		     end;

		     substr (out_string, out, 2) = sp_fd;
		     out = out + 2;

		     substr (out_string, out, n + 1) = field_identifier.string;
						/* pad with a space */
		     out = out + n + 1;
		end;

		if atomp ^= null
		then do;
		     n_chars = index (atom, QUOTE) - 1;
		     if n_chars = -1
		     then do;
			n_chars = length (atom);
			quote = "0"b;
		     end;
		     else quote = "1"b;

		     if ^quote
		     then if index (atom, rd) ^= 0 | index (atom, fd) ^= 0
			then quote = "1"b;

		     if ^quote
		     then if length (atom) > 0
			then if index (NL_HT_SP_VT_NP, substr (atom, 1, 1)) ^= 0
			     | index (NL_HT_SP_VT_NP, substr (atom, length (atom), 1)) ^= 0
			     then quote = "1"b;
			     else ;
			else quote = "1"b;		/* zero-length token */

		     if quote
		     then do;
			substr (out_string, out, 1) = QUOTE;
			out = out + 1;
			line_index = line_index + 1;
		     end;

		     atomx = 1;
		     do while (atomx <= length (atom));
			substr (out_string, out, n_chars) = substr (atom, atomx, n_chars);
			out = out + n_chars;
			atomx = atomx + n_chars;
			line_index = line_index + n_chars;

			if atomx <= length (atom)
			then do;			/* must have stopped on QUOTE */
			     atomx = atomx + 1;
						/* step over quote */
			     substr (out_string, out, 2) = QUOTE_QUOTE;
			     out = out + 2;
			     line_index = line_index + 2;
			     n_chars = index (substr (atom, atomx), QUOTE) - 1;
			     if n_chars = -1
			     then n_chars = length (substr (atom, atomx));
			end;
		     end;

		     if quote
		     then do;
			substr (out_string, out, 1) = QUOTE;
			out = out + 1;
			line_index = line_index + 1;
		     end;
		end;
	     end;

	     substr (out_string, out, 1) = NL;
	     out = out + 1;
	end;

	P_output_index = out;
	return (n_records);

put:
	procedure (P_string);

/* parameters */

declare  P_string char (*) parameter;

/* program */

	     substr (out_string, out, length (P_string)) = P_string;
	     out = out + length (P_string);
	     line_index = line_index + length (P_string);
	     return;

	end put;

     end						/* lister_expand_ */;
