/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* LISTER_CREATE_RECORD_ - Program to create a new, empty record in a specified file.
   Written by PG.
   Modified 760427 by PG to add $after entry.
   Modified 770707 by PG to keep output_file.n_records accurate, and to rename
   from assist_create_record_ to lister_create_record_.
   Modified 800825 by PB to assign uid.
*/

/* format: style3 */
lister_create_record_:
     procedure (bv_in_file_ptr) returns (ptr) options (packed_decimal);

/* parameters */

declare (bv_in_file_ptr, bv_previous_record_ptr)
         ptr parameter,
         bv_retained_uid fixed bin (24) unsigned unaligned parameter;

/* builtins */

declare (hbound, null) builtin;

/* automatic */

declare  flx fixed bin,
         previous_record_ptr ptr,
         retained_uid fixed bin (24) unsigned unaligned;

/* include files */

%include lister_structures;

/* program */

	retained_uid = 0;
main:
	call allocate_record;

	if input_file.record_tail = null
	then input_file.record_head = recordp;
	else input_file.record_tail -> input_record.next = recordp;

	input_file.record_tail = recordp;
	input_record.next = null;
	return (recordp);

retain_uid:
	entry (bv_in_file_ptr, bv_retained_uid) returns (ptr);

	retained_uid = bv_retained_uid;
	goto main;

						/* LISTER_CREATE_RECORD_$AFTER: - Entry to create a new, empty record that is
						   threaded into a specific place in the output file.  Used by lister_merge_.
						   Written 760427 by PG.
						*/

assist_create_record_$after:
	entry (bv_in_file_ptr, bv_previous_record_ptr) returns (ptr);

	previous_record_ptr = bv_previous_record_ptr;
	retained_uid = 0;
	call allocate_record;

	if previous_record_ptr = null			/* make new record 1st in file */
	then do;
	     input_record.next = input_file.record_head;
	     input_file.record_head = recordp;

	     if input_file.record_tail = null
	     then input_file.record_tail = recordp;
	end;
	else do;					/* put new record before "previous_record" */
	     input_record.next = previous_record_ptr -> input_record.next;
	     previous_record_ptr -> input_record.next = recordp;
	end;

	return (recordp);

allocate_record:
	procedure;

	     in_file_ptr = bv_in_file_ptr;
	     field_table_ptr = input_file.field_table_offset;

	     allocate input_record in (input_file.area) set (recordp);
	     input_file.n_records = input_file.n_records + 1;

	     if retained_uid = 0
	     then do;
		input_record.uid = input_file.next_uid;
		input_file.next_uid = input_file.next_uid + 1;
	     end;
	     else input_record.uid = retained_uid;

	     do flx = MIN_FIELD_INDEX to hbound (input_record.field, 1);
		input_record.field (flx) = null;
	     end;

	     return;

	end allocate_record;

     end;
