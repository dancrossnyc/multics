/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* LISTER_COMPILE_SELECT_ - Program to parse a select expression into a structure that drives
   lister_select_.

   Written 761104 by PG
   Modified 770818 by PG to cleanup error handling (bugs 1 and 9)
   Modified 770921 by PG to make implementation agree with revised documentation
   Modified 791210 by PG to implement sugg 37 (numeric selection), and to fix bugs 10 (null select expr
   gets wrong error msg) and 19 (must accept singular and plural comparison ops).
   Modified 800813 by PB to recognize :uid.
   Modified 840523 by PB to add begins and ends operators.
*/

/* format: style3 */
lister_compile_select_:
     procedure (bv_select_string, bv_input_ptr, bv_area_ptr, bv_select_ptr, bv_error_token, bv_code) options (packed_decimal);

/* parameters */

dcl (
     bv_area_ptr ptr,
     bv_code fixed bin (35),
     bv_error_token char (*),
     bv_input_ptr ptr,
     bv_select_ptr ptr,
     bv_select_string char (*)
     ) parameter;

/* automatic */

dcl  op_table (3) bit (9) aligned initial (SELECT_AND, SELECT_OR, SELECT_NOT);

dcl  comparison_opcode (14) bit (9) aligned
     initial (SELECT_EQ, SELECT_EQ, SELECT_LT, SELECT_GT, SELECT_FIND, SELECT_FIND, SELECT_NEQ,
     SELECT_NEQ, SELECT_NLT, SELECT_NGT, SELECT_BEG, SELECT_BEG, SELECT_END, SELECT_END);

dcl  code fixed bin (35),
     i fixed bin,
     ltx fixed bin,
     selx fixed bin,
     token_temp_seg_ptr ptr;

/* builtins */

dcl (addr, collate, convert, hbound, lbound, length, null, substr, translate)
     builtin;

/* conditions */

dcl  conversion condition;

/* entries */

dcl  lex_string_$init_lex_delims
     entry (char (*), char (*), char (*), char (*), char (*), bit (*), char (*) varying aligned,
     char (*) varying aligned, char (*) varying aligned, char (*) varying aligned),
     lex_string_$lex entry (ptr, fixed bin (21), fixed bin (21), ptr, bit (*), char (*), char (*), char (*),
     char (*), char (*), char (*) varying aligned, char (*) varying aligned,
     char (*) varying aligned, char (*) varying aligned, ptr, ptr, fixed bin (35)),
     translator_temp_$get_segment
     entry (char (*), ptr, fixed bin (35)),
     translator_temp_$release_all_segments
     entry (ptr, fixed bin (35));

/* external static */

declare (
         error_table_$zero_length_seg,
         lister_codes_$expression_too_complicated,
         lister_codes_$incomplete_select_expression,
         lister_codes_$invalid_op_null,
         lister_codes_$invalid_op_numeric,
         lister_codes_$missing_right_paren,
         lister_codes_$null_select_expr,
         lister_codes_$select_syntax_error,
         lister_codes_$too_many_literals,
         lister_codes_$undefined_fieldname,
         lister_codes_$unknown_comparison_op
         ) fixed bin (35) external static;

/* internal static */

dcl  comparison_op (14) char (8) varying internal static
     initial ("equal", "equals", "less", "greater", "contain", "contains", "nequal", "nequals",
     "nless", "ngreater", "begins", "begin", "ends", "end");

dcl (
    (BREAKS, IGBREAKS, LEXCTL, LEXDLM)
     char (128) varying aligned,
     first_time bit (1) aligned initial ("1"b),
     lower_case char (26) initial ("abcdefghijklmnopqrstuvwxyz"),
     upper_case char (26) initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
     ) internal static;

/* include files */

%include lister_entries;
%include lister_structures;
%include lex_descriptors_;

/* program */

/* The syntax of the select string is:

   {<fieldname>|anyfield} [not] {<literal>|null}
*/

	area_ptr = bv_area_ptr;
	select_ptr = null;
	in_file_ptr = bv_input_ptr;
	bv_code = 0;
	selx = 0;
	ltx = 0;

	n = 100;
	allocate literal_table in (system_area) set (ltp);

	n = 100;
	allocate select_expression in (system_area) set (select_ptr);
	select_expression.literal_table_ptr = ltp;
	select_expression.last_element = 0;

	if first_time
	then do;
	     IGBREAKS = substr (collate (), 1, 8) || substr (collate (), 10, 24);
	     BREAKS = IGBREAKS || "()";
	     call lex_string_$init_lex_delims ("""", """", "", "", "", "11"b, BREAKS, IGBREAKS, LEXDLM, LEXCTL);
	     first_time = "0"b;
	end;

	call translator_temp_$get_segment ("lister", token_temp_seg_ptr, code);
	if token_temp_seg_ptr = null
	then do;
	     bv_error_token = "Making temporary segment in process directory.";
	     bv_code = code;
	     return;
	end;

	call lex_string_$lex (addr (bv_select_string), length (bv_select_string), 0, token_temp_seg_ptr, "0000"b, """",
	     """", "", "", "", BREAKS, IGBREAKS, LEXDLM, LEXCTL, Pstmt, Ptoken, code);
	if code ^= 0
	then do;
	     if code = error_table_$zero_length_seg
	     then code = lister_codes_$null_select_expr;

	     bv_error_token = "";
	     bv_code = code;
	     return;
	end;

	on conversion
	     go to recover_from_bad_literal;

	n = expression_parse (code);			/* parse the expression */
	select_expression.last_element = selx;
	if (code = 0) & (Ptoken ^= null)		/* Make sure we have scanned all input */
	then do;
	     bv_error_token = "At """ || token_value || """";
	     code = lister_codes_$select_syntax_error;
	end;

finish:
	if code ^= 0
	then do;
	     free literal_table in (system_area);
	     ltp = null;
	     free select_expression in (system_area);
	     select_ptr = null;
	end;

	bv_select_ptr = select_ptr;
	call translator_temp_$release_all_segments (token_temp_seg_ptr, (0));
	bv_code = code;
	return;

recover_from_bad_literal:
	bv_error_token = token_value || " is not a number.";
	code = lister_codes_$select_syntax_error;
	go to finish;

expression_parse:
	procedure (bv_code) returns (fixed bin);	/* parameters */

dcl  bv_code fixed bin (35) parameter;

/* automatic */

dcl (i, si) fixed bin,
     opindex fixed bin (5),
     stack (0:12) fixed bin;

/* internal static */

dcl  precedence (3) fixed bin internal static initial (2,
						/* and */
     1,						/* or */
     4);						/* not */

dcl  op_names (3) char (4) varying internal static initial ("and", "or", "not");

/*	This procedure parses expressions using a simple operator
   precedence technique.  The syntax parsed is

   <expression> ::= <primitive> [<operator> <primitive>]...

   where the nth operator and its operands are stacked if the
   n+1st operator has higher precedence.  The primitive is parsed by
   the internal entry called "primitive".  The primitives include
   parenthesized expressions, prefix operators, and exponentiation. */

	     bv_code = 0;
	     si = 0;
	     stack (0) = primitive ();

fetchop:
	     if Ptoken ^= null
	     then do;
		do i = lbound (op_names, 1) to hbound (op_names, 1) while (token_value ^= op_names (i));
		end;

		if i <= hbound (op_names, 1)
		then do;
		     if si ^= 0			/* If past first op then check prec. */
		     then do;
			opindex = stack (si - 1);
			if precedence (opindex) >= precedence (i)
			then go to unstack;
		     end;

		     si = si + 1;
		     stack (si) = i;
		     si = si + 1;
		     Ptoken = token.Pnext;
		     stack (si) = primitive ();
		     go to fetchop;
		end;
	     end;

	     if si = 0
	     then return (selx);

	     opindex = stack (si - 1);

unstack:
	     selx = selx + 1;
	     if selx > hbound (select_expression.element, 1)
	     then do;
		bv_code = lister_codes_$expression_too_complicated;
		go to fail;
	     end;

	     select_expression.element (selx).opcode = op_table (opindex);
	     select_expression.element (selx).field_index = stack (si - 2);
	     select_expression.element (selx).literal_index = stack (si);
	     si = si - 2;
	     stack (si) = selx;
	     go to fetchop;

fail:
	     bv_error_token = "";
	     return (0);

fail_with_token:
	     return (0);

/*	Primitive parses prefix expressions and parenthesized expressions. */

primitive:
	     procedure () returns (fixed bin);

/* automatic */

dcl (hashx, i) fixed bin;
dcl  code fixed bin (35);
dcl  cx fixed bin;

/* program */

		if Ptoken = null
		then go to not_enough_input;

		if token_value = "not"
		then do;
		     Ptoken = token.Pnext;
		     i = primitive ();
		     selx = selx + 1;
		     if selx > hbound (select_expression.element, 1)
		     then do;
			bv_code = lister_codes_$expression_too_complicated;
			go to fail;
		     end;

		     select_expression.element (selx).opcode = SELECT_NOT;
		     select_expression.element (selx).field_index = i;
		     return (selx);
		end;
		else if token_value = "("
		then do;
		     Ptoken = token.Pnext;
		     i = expression_parse (code);
		     if code ^= 0
		     then do;
			bv_code = code;
			if code = lister_codes_$undefined_fieldname
			then go to fail_with_token;
			else goto fail;
		     end;

		     if Ptoken = null
		     then do;
			bv_error_token = "At end of select expression.";
			bv_code = lister_codes_$missing_right_paren;
			go to fail_with_token;
		     end;

		     if token_value ^= ")"
		     then do;
			bv_error_token = "At """ || token_value || """";
			bv_code = lister_codes_$missing_right_paren;
			go to fail_with_token;
		     end;

		     Ptoken = token.Pnext;
		     return (i);
		end;
		else do;
		     selx = selx + 1;

		     if token_value = ":any"
		     then select_expression.element (selx).field_index = ANY_FIELD;
		     else if token_value = ":uid"
		     then select_expression.element (selx).field_index = UID;
		     else do;

/* token_value must be passed by value since it gets modified by the hash subroutine. */

			hashx = lister_hash_fid_ (in_file_ptr, (token_value));
			if hashx = -1
			then do;
			     bv_error_token = token_value;
			     bv_code = lister_codes_$undefined_fieldname;
			     go to fail_with_token;
			end;

			select_expression.element (selx).field_index = hashx;
		     end;

		     Ptoken = token.Pnext;
		     if Ptoken = null
		     then go to not_enough_input;

		     if token_value = "not"
		     then do;
			select_expression.element (selx).not = "1"b;

			Ptoken = token.Pnext;
			if Ptoken = null
			then go to not_enough_input;
		     end;
		     else select_expression.element (selx).not = "0"b;

		     do cx = lbound (comparison_op, 1) to hbound (comparison_op, 1) while (comparison_op (cx) ^= token_value);
		     end;

		     if cx > hbound (comparison_op, 1)
		     then do;
			bv_code = lister_codes_$unknown_comparison_op;
			bv_error_token = token_value;
			go to fail_with_token;
		     end;

		     select_expression.element (selx).opcode = comparison_opcode (cx);

		     Ptoken = token.Pnext;
		     if Ptoken = null
		     then go to not_enough_input;

		     if (token_value = ":null") | (token_value = ":numeric")
		     then if (comparison_opcode (cx) ^= SELECT_EQ) & (comparison_opcode (cx) ^= SELECT_NEQ)
			then do;
			     if token_value = ":null"
			     then bv_code = lister_codes_$invalid_op_null;
			     else bv_code = lister_codes_$invalid_op_numeric;
			     go to fail;
			end;
			else if token_value = ":null"
			then select_expression.element (selx).literal_index = NULL_FIELD;
			else select_expression.element (selx).literal_index = NUMERIC_FIELD;
		     else select_expression.element (selx).literal_index = allocate_literal (cx > 6 & cx < 11);

		     select_expression.element (selx).top = "0"b;
		     select_expression.element (selx).unused = ""b;
		     Ptoken = token.Pnext;
		     return (selx);
		end;

not_enough_input:
		bv_code = lister_codes_$incomplete_select_expression;
		go to fail;

allocate_literal:
		procedure (P_numeric_literal) returns (fixed bin);

/* parameters */

declare  P_numeric_literal bit (1) aligned parameter;

/* program */

		     ltx = ltx + 1;
		     if ltx > hbound (literal_table.literal, 1)
		     then do;
			bv_code = lister_codes_$too_many_literals;
			go to fail;
		     end;

		     if P_numeric_literal
		     then do;
			allocate numeric_atom in (system_area) set (atomp);
			numeric_atom.flag = numeric_flag;

(conversion):
			numeric_atom.value = convert (numeric_atom.value, token_value);
		     end;
		     else do;
			atom_length = length (token_value);
			allocate atom in (system_area) set (atomp);
			atom = token_value;
		     end;

		     literal_table.literal (ltx) = atomp;
		     literal_table.n_literals = literal_table.n_literals + 1;
		     return (ltx);

		end allocate_literal;

	     end					/* primitive */;

	end					/* expression_parse */;

     end						/* lister_compile_select_ */;
