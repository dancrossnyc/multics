" **************************************************************
" *                                                            *
" * Copyright, (C) Massachusetts Institute of Technology, 1973 *
" *                                                            *
" **************************************************************
"
" lisp_gc_alm_: ALM portion of lisp garbage collector
" Its history is unknown by the current maintainers.
"

	tempd	args(2)
	tempd	save_pr2
	tempd	array_data_ptr_ptr
	tempd	new_seg_ptr
	tempd	vector_ret
	tempd	cur_atom
	tempd 	cur_bucket_cell
	tempd	old_nil
	temp	vector_left
	temp	cur_vec_entry
	temp	dope_vec_size
	temp	mark_size
	temp	copy_size
	temp	vector_thread
	temp	gctwa_flag
	temp	gctwa_thread
	temp	gctwa_final
	include	lisp_iochan
	include	lisp_object_types
	even
noargs:	zero	0,4
	zero	0,0
onearg:	zero	2,4
	zero	0,0
nullptr:	its	-1,1

	entry	collect
collect:	push
	lda	pr0|2,*		" test for gctwa mode.
	sta	gctwa_flag
	ldaq	<lisp_static_vars_>|[nil]
	staq	old_nil			" copy for later use
	epp5	<lisp_alloc_>|[cur_seg],*
	spri5	pr0|4,*		" return value is list of old segment.
	epp5	nullptr,*
	tsx5	get_initial_segment	" this entry skips
	nop
	epp7	=0
	sprp7	vector_thread
	sprp7	gctwa_thread
	sprp7	gctwa_final

	lda	<lisp_static_vars_>|[number_gc_ptrs]
	neg	0
	sta	vector_left
	epp1	<lisp_static_vars_>|[garbage_collected_ptrs]
	stcd	vector_ret
	tra	vector_loop

	epp1	<lisp_static_vars_>|[stack_ptr],*
	eaa	pr1|0
	arl	18+1		"divide by 2
	neg	0
	sta	vector_left
	epbp1	pr1|0		" start at base of stack
	stcd	vector_ret
	tra	vector_loop

handle_vectors_encountered:		" this is now in vector_ret.
	lprp0	vector_thread
	szn	pr0|0	" end of vector thread is a zero word.
	tze	gctwa_phs1
	lda	pr0|1
	neg
	sta	vector_left
	lda	pr0|2
	sta	vector_thread
	lprp1	pr0|0
"	stcd	vector_ret
"	tra	vector_loop
"	tra	handle_vectors_encountered
vector_loop:
	sprp1	cur_vec_entry	"pr1 points to current slot in vector to ahndle.
	tsx4	copylist
	lprp1	cur_vec_entry
	epp1	pr1|2		" move to next entry
	aos	vector_left
	tmi	vector_loop
	rtcd	vector_ret

gctwa_phs1:			" see if anything is on gctwa thread,
				" process first element, then go back to
				" handle any vectors encountered.
				" this phase just collects all worthy atoms --
				" those that have a value or non-nil plist.
	lprp1	gctwa_thread
	szn	pr1|0		" test for empty thread
	tze	gctwa_phs2	" if no elements on list, handle rest of gctwa.
	lprp0	pr1|0		" get pointer to obarray.
	lda	pr1|1		" and number of elements in it (buckets)
	neg
	sta	vector_left
	ldq	pr1|2		" move down gctwa_thread
	stq	gctwa_thread

	ldq	gctwa_final	" thread block onto phase 2 thread
	stq	pr1|2
	sprp1	gctwa_final

ph1_vec_loop:			" loop over all buckets.
	sprp0	cur_vec_entry
	epp1	pr0|0,*		" get first bucket ptr.
ph1_lst_loop:				" loop over list, until a cell already seen is encountered.
	ldaq	pr1|0		" get car of first cell.
	tmi	ph1_next_bucket
	staq	cur_atom		" if not marked, must be atom (maybe worthwhile)
	ldaq	pr1|2		" get ptr to next cell
	staq	cur_bucket_cell
	epp0	cur_atom,*		" get ptr to atom
	ldaq	pr0|0		" and test its car.
	tmi	ph1_next_atom	" already seen and marked,
	tpnz	worthy_atom	" this is a worthy atom because it has a value.
	ldaq	pr0|2		" load plist ptr
	cmpaq	old_nil	" nil should have been collected already!
	tze	ph1_next_atom
worthy_atom:
	epp1	cur_atom		" collect the atom. We know it has not already been seen.
	tsx4	cplistlp		" SO, we call past the already_seen check.
ph1_next_atom:
	epp1	cur_bucket_cell,*	" get ptr to next bucket cell.
	tra	ph1_lst_loop
ph1_next_bucket:
	lprp0	cur_vec_entry
	epp0	pr0|2			" move to next bucket
	aos	vector_left
	tmi	ph1_vec_loop

	tra	handle_vectors_encountered	" may have found new vectors or obarrays to collect.

gctwa_phs2:
	lprp1	gctwa_final
	szn	pr1|0
	tze	scan_maknum
	lprp0	pr1|0		" get next element.
	lda	pr1|1
	neg
	sta	vector_left
	ldq	pr1|2
	stq	gctwa_final		" thread off list.

ph2_vec_loop:
	epp3	pr0|0			" keep ptr to place to patch in next bucket cell
	epp1	pr0|0,*			" get ptr to first cell in bucket.
ph2_lst_loop:
	ldaq	pr1|0			" check for end (a marked cell)
	tmi	ph2_end_list
	ldaq	pr1|0,*			" load car of atom to test if marked.
	tpl	ph2_worthless		" if not seen yet, worthless.
	era	=o400000,du		" clear mark bit, to get new location
ph2_make_cell:
	epp2	pr5|2,ad		" allocate a cons cell to append to bucket
	ttf	ph2_made_cell
	tsx5	tally_ran_out		" handle tally runout
	tra	ph2_made_cell
	tra	ph2_make_cell
ph2_made_cell:
	staq	pr2|0		" store worthy atom in car of cell
	spri2	pr3|0		" patch new cell in at end of list
	epp3	pr2|2		" and new place to patch is cdr of new cell.
ph2_worthless:
	epp1	pr1|2,*		" get ptr to next cell
	tra	ph2_lst_loop
ph2_end_list:
	era	=o400000,du	" turn off mark bit to get ptr to tail of bucket list
	staq	pr3|0		" patch it into end of new list.
	epp0	pr0|2		" move to next bucket
	aos	vector_left
	tmi	ph2_vec_loop

	tra	gctwa_phs2	" and go handle next obarray


scan_maknum:
	epp1	<lisp_static_vars_>|[maknum_table_ptr],*
	ldq	<lisp_static_vars_>|[maknum_mask]
	adq	1,dl
	tze	retrn
	stz	<lisp_static_vars_>|[maknum_left]
	lls	36	divide by 8 and shift to negate
	arl	3
	neg
	sta	vector_left	" number of entries in maknum hash table.

maknum_scan_loop:
	ldq	pr1|0		" type is in low-order 9 bits.
	tze	next_entry
	canq	(Fixed+Float)/64,dl	
	tnz	ok_entry
	lprp0	pr1|1
	canq	(Subr+File)/64,dl	" check for subrs arrays and files.
	tnz	ck_saf_maknum_entry
	ldaq	pr0|0		" load word with mark bit.
	tpl	not_ok_entry		" entry not otherwise protected.
	cana	=o200000,du		" for bignums, have to check second bit,
	tnz	not_ok_entry		" which should be off for ptrs, but may be on in negative bignums.
	era	=o400000,du		" turn off mark bit.
	sta	pr1|1		" store new address (segno part)
	qrl	18
	stbq	pr1|1,14		" and word part in lower two bytes.
ok_entry:aos	<lisp_static_vars_>|[maknum_left]
	tra	next_entry
ck_saf_maknum_entry:
	canq	File/64,dl
	tnz	file_maknum_entry
	canq	Array/64,dl
	tnz	array_maknum_entry
	lxl0	pr0|1			" check array type.
	cmpx0	=o700004,du		" should be tsx0 ,ic if compiled subr.
	tnz	ok_entry		" if not compiled, ok to keep in maknum table
	ldx0	pr0|1			" otherwise check to see if already seen
	epp0	pr0|-2,x0		" get subr header
	ldx0	pr0|7			" get gc_mark halfword
test_maknum_gc_mark:
	canx0	<lisp_static_vars_>|[gc_mark_bits]
	tnz	ok_entry
	tra	not_ok_entry
array_maknum_entry:
	lxl0	pr0|0			" load gc_mark_ bits
	tra	test_maknum_gc_mark
file_maknum_entry:
	ldx0	pr0|iochan.flags
	canx0	iochan.gc_mark,du
	tnz	ok_entry
	tra	not_ok_entry

not_ok_entry:
	stz	pr1|0		" clear type and uid word of maknum table entry
next_entry:
	epp1	pr1|2
	aos	vector_left
	tmi	maknum_scan_loop

done_maknum_scan:
	lda	=o400000,du
	sta	<lisp_static_vars_>|[garbage_collect_inhibit]
	epp0	noargs
	epbp7	pr6|0			" find stack base.
	short_call <lisp_alloc_>|[rehash_maknum]
	stz	<lisp_static_vars_>|[garbage_collect_inhibit]

retrn:
	epbp7	pr6|0		" make return know where stack base is.
	return

already_seen:			" called with pr1 pointing at object.
				" call is tsx7.  routine returns to next
				" instruction, having patched doubleword
				" at pr1 if object has been moved already.
				" if an Atsym or Cons, and not yet moved,
				" then routine skips on return.

	ldaq	pr1|0		" load object to test for 0
	tze	0,x7		" (uninitialized atsym or stack entry)

	ana	=o060077,dl	" mask out modifier
				"exit on non-gc'able strings, too.
	cmpa	=o43,dl		" and check for its.
	tnz	0,x7		" must be number or error.

	lda	pr1|0		" load type field again.
	cana	Atomic-Atsym,dl	" see if atomic. (atsym is treated like cons)
	tnz	seen_atoms

test_cons:
	ldaq	pr1|0,*		" load car of cons.
	tpl	1,x7		" mark bit not set, so not seen yet.
unmark_return:
	era	=o400000,du		" clear mark bit.
	staq	pr1|0			" store new location in argument.
	tra	0,x7			" return as already seen.

seen_atoms:
	cana	Subr,dl
	tnz	test_subr

	cana	File,dl
	tnz	test_file

	cana	Bignum,dl
	tnz	test_bignum

	cana	String,dl
	tnz	test_string

	"ERROR IF GET HERE.
	tra	0,x7


test_string:
	ldaq	pr1|0,*
	tmi	unmark_return
	lrl	36
	adq	3,dl	" extra cells of 4 words (16 bytes to allocate)
	qrl	4
	tsx6	allocate_cells
	spri2	save_pr2
	epp2	pr1|0,*
	ldq	pr2|0		"get length.
	adq	4,dl
	mlr	(pr,rl),(pr,rl)
	desc9a	pr2|0,ql
	desc9a	pr0|0,ql
	spri0	pr1|0	" now store new address back.
	ldaq	pr1|0	" and set type
	ora	String,dl
	staq	pr1|0
	ora	=o400000,du	" and set mark bit.
	staq	pr2|0
	epp2	save_pr2,*	" get back pr2
	tra	0,x7

test_bignum:
	" a bignum is marked by having the mark bit on, and the second
	" bit off (normally the two high-order bits are on or off together).
	ldaq	pr1|0,*		" load first double-word
	tpl	unseen_bignum
	cana	=o200000,du	" test second bit.
	tze	unmark_return
unseen_bignum:
	lrl	36
	anq	-1,dl	" mask out length.
	qrl	2	" divide by 4 (alloc multiple of 4)
	tsx6	allocate_cells
	spri2	save_pr2
	epp2	pr1|0,*
	ldq	pr2|0
	anq	-1,dl
	qls	2
	adq	4,dl
	mlr	(pr,rl),(pr,rl)
	desc9a	pr2|0,ql
	desc9a	pr0|0,ql
	spri0	pr1|0
	ldaq	pr1|0
	ora	Bignum,dl
	staq	pr1|0
	ora	=o400000,du
	staq	pr2|0
	epp2	save_pr2,*
	tra	0,x7

test_file:
	epp0	pr1|0,*	get address of file block.
	lda	pr0|iochan.flags
	cana	iochan.gc_mark,du
	tnz	0,x7			" return if marked already.

	ora	iochan.gc_mark,du
	sta	pr0|iochan.flags

	epp0	pr0|iochan.function
	spri2	save_pr2
allocate_file_thread_block:
	epp2	pr5|2,ad
	ttf	file_thread_block_made
	tsx5	tally_ran_out
	tra	file_thread_block_made
	tra 	allocate_file_thread_block
file_thread_block_made:
	sprp0	pr2|0
	ldq	2,dl
	stq	pr2|1
	ldq	vector_thread
	stq	pr2|2
	sprp2	vector_thread
	epp2	save_pr2,*
	tra	0,x7

test_subr:
	epp0	pr1|0,*		" get what subr object points at.
	canq	1,du		" fix odd address, which arises in subr links to subrs and arrays.
	tze	2,ic
	epp0	pr0|-1

	cana	Array,dl		" screen out arrays.
	tnz	test_array

	lxl0	pr0|1	" load 2nd word of subr entry.
	cmpx0	=o700004,du	" tsx0 ..,ic
	tnz	0,x7		" if not this value, then nothing to do.

	ldx0	pr0|1		" to get to header.
	epp0	pr0|-1,x0

	ldx0	pr0|7		" gc mark.
	canx0	<lisp_static_vars_>|[gc_mark_bits]
	tnz	0,x7
	
"	THREAD SUBR ONTO VECTOR THREAD
"	AND MARK.

	ldx0	<lisp_static_vars_>|[gc_mark_bits]
	stx0	pr0|7
	spri2	save_pr2
retry_subr_block_thread:
	epp2	pr5|2,ad
	ttf	subr_thread_block_made
	tsx5	tally_ran_out
	tra	subr_thread_block_made
	tra 	retry_subr_block_thread
subr_thread_block_made:
	ldq	vector_thread
	stq	pr2|2
	lxl0	pr0|7
	sxl0	pr2|1
	epp0	pr0|8
	sprp0	pr2|0
	sprp2	vector_thread
	epp2	save_pr2,*
	tra	0,x7


test_array:
	lxl0	pr0|0	"gc mark.
	canx0	<lisp_static_vars_>|[gc_mark_bits]
	tnz	0,x7

" NOW COPY ARRAY BODY, PYT ARRAY ON LIST, AND MARK.

	ldx0	<lisp_static_vars_>|[gc_mark_bits]
	sxl0	pr0|0		"mark array.

	ldx0	pr0|7		" get type.
	tra	array_handlers,x0
array_handlers:
	tra	S_expr_array
	tra	Un_gc_array
	tra	number_array
	tra	number_array
	tra	readtable_array
	tra	obarray_array
	tra	0,x7		" dead array, nothing to do.

compute_size:
	lxl2	pr0|7	" offset to bounds array.
	eaa	0,x2		" get size of dope vector in words.
	neg
	arl	18
	sta	dope_vec_size
	spri2	save_pr2
	epp2	pr0|2	" get ptr to array_data_ptr
	spri2	array_data_ptr_ptr
	epp2	pr2|0,*
	ldq	1,dl
csizelp:	epp2	pr2|-2
	mpy	pr2|0
	eax2	2,x2
	tmi	csizelp
	tra	0,x6

number_array:
	lxl2	pr0|7		Check for external array
	tze	0,7		Leave alone if so.
	tsx6	compute_size
	adq	dope_vec_size
	stq	copy_size
	sbq	1,dl		" to get number of additional blocks to allocate.
	arl	2		" divide by 4.
	tsx6	allocate_cells
	ldq	copy_size
	qls	2	" 4 bytes per word.
	mlr 	(pr,rl),(pr,rl)
	desc9a	pr2|0,ql
	desc9a	pr0|0,ql
	ldq	dope_vec_size
	epp0	pr0|0,ql
	spri0	array_data_ptr_ptr,*
	epp2	save_pr2,*
	tra	0,x7


readtable_array:
	spri2	save_pr2
	epp2	pr0|2,*
	epp2	pr2|-2
	epp0	pr0|2
	spri0	array_data_ptr_ptr
	ldq	72,dl	" readtable size in 4 word blocks - 1
	tsx6	allocate_cells
	ldq	73*16,dl	" number of bytes to move.
	mlr	(pr,rl),(pr,rl)
	desc9a	pr2|0,ql
	desc9a	pr0|0,ql
	epp0	pr0|2		" offset of data part
	spri0	array_data_ptr_ptr,*

	sprp0	pr2|0		" thread of gc'able vectors.
	ldq	9,dl		" number of markable-from words.
	stq	pr2|1
	ldq	vector_thread
	stq	pr2|2		" thread in to vector list
	sprp2	vector_thread

	epp2	save_pr2,*
	tra	0,x7

copy_array:			" called with tsx3.
	tsx6	compute_size
	stq	mark_size
	qls	1
	adq	dope_vec_size
	stq	copy_size
	sbq	1,dl
	qrl	2		" q now has 1 less than number of 4word blocks.
	tsx6	allocate_cells
	ldq	copy_size
	qls	2
	mlr	(pr,rl),(pr,rl)
	desc9a	pr2|0,ql
	desc9a	pr0|0,ql
	ldq	dope_vec_size
	epp0	pr0|0,ql
	spri0	array_data_ptr_ptr,*
	tra	0,x3

obarray_array:
	szn	gctwa_flag
	tze	S_expr_array		" if not doing gctwa, treat as ordinary array

	tsx3	copy_array

	" now thread hash table part onto gctwa_thread, and single char atoms
	" on vector_thread

	sprp0	pr2|0
	ldq	511,dl
	stq	pr2|1
	ldq	gctwa_thread
	stq	pr2|2
	sprp2	gctwa_thread

	epp0	pr0|511*2
	epp2	pr2|3	" gctwa list cell uses 3 words, get vector list cell
	sprp0	pr2|0		" store ptr to singl char atom table.
	ldq	128,dl		" size of single char atom table
	stq	pr2|1
	ldq	vector_thread
	stq	pr2|2
	sprp2	vector_thread

	epp2	save_pr2,*
	tra	0,x7

Un_gc_array:
S_expr_array:
	tsx3	copy_array
	sprp0	pr2|0
	ldq	mark_size
	stq	pr2|1
	ldq	vector_thread
	stq	pr2|2
	sprp2	vector_thread

	epp2	save_pr2,*
	tra	0,x7


" copylist is called by a tsx4, with pr1 pointing at a double-word containing
" some lisp object.
" copylist implements a modified version of Douglas Clark's linearizing
" garbage collection algorithm.
" Atomic symbols are treated as list cells for this algorithm.
" Other types, such as arrays, files, subr blocks, etc. are copied
" into the new segments, marked, and threaded onto a list called
" "vector thread".  The lisp objects they contain are not
" processed by copylist.

copylist:	tsx7	already_seen
	tra	0,x4

cplistlp:
	tsx7	copycell

	epp1	pr3|2		"check cdr of currently copied cell.
	tsx7	already_seen
	tra	cdr_already_seen

	epp1	pr3|0
	tsx7	already_seen
	tra	car_seen_but_not_cdr

	" both car and cdr not seen yet. so thread old cell onto
	" continuation list.

	spri7	pr2|2
	epp7	pr2|0

car_seen_but_not_cdr:
	epp1	pr3|2	" proceed with cdr.
	tra	cplistlp

cdr_already_seen:
	epp1	pr3|0
	tsx7	already_seen	"check car.
	tra	ck_continuation	" both car and cdr have been seen, so stop with current list.

"	epp1	pr3|0	not needed because done just above.
	tra	cplistlp

ck_continuation:
	szn	pr7|0	" pr7 starts out pointing to a zero word.
	tze	0,x4

	" NOTE: following depends on hardware not looking at high order bits
	" in indirecting through a double-word.

	epp1	pr7|0,*
	epp7	pr7|2,*		" advance through continuation list.

	tsx7	test_cons	" we know it is a cons or atsym here.
	tra	ck_continuation
	tra	cplistlp

copycell:
	" Input: pr1 -> cons or atsym ptr to copy.
	" Output: pr2 = old address from object.
	"	pr3 = new object address.
	"	new object's car and cdr have been copied from old.
	"	pr1 -> copied address (new form of input object).
	" 	old object's car points to new object, and mark bit (sign bit)
	" 	is turned on.

	epp2	pr1|0,*

	lxl6	pr1|0		"check type (cons or atsym).
	canx6	Atsym,du
	tnz	copyatsym
copycons:
	epp3	pr5|2,ad	" allocate a cons cell.
	ttn	tally_out_on_cons
consalloc:spri3	pr1|0

	ldaq	pr2|0
	staq	pr3|0
	ldaq	pr2|2
	staq	pr3|2

	ldaq	pr1|0	"store new address with mark bit on.
	ora	=o400000,du
	staq	pr2|0	" in old cell.
	tra	0,x7

copyatsym:
	ldq	pr2|4	" get atsym pname length.
	adq	19,dl	" 15+4 (number of bytes to allocate in addition to cons part)
	qrl	4	"16 bytes per 4 words.

	epp3	pr5|2,ad
	ttn	tally_out_on_atsym
atsymalloc:
	eax0	pr5|2,ad	" NOTE: all atsyms require at least one loop.
	ttn	tally_out_on_atsym_lp
atsymalloc_lp:
	sbq	1,dl
	tpnz	atsymalloc

	ldq	pr2|4		" determine size to copy.
	adq	20,dl		" 20 bytes of stuff precede name.
	mlr	(pr,rl),(pr,rl)
	desc9a	pr2|0,ql
	desc9a	pr3|0,ql

	spri3	pr1|0
	ldaq	pr1|0
	ora	Atsym,dl
	staq	pr1|0
	ora	=o400000,du
	staq	pr2|0
	tra	0,x7

allocate_cells:	"called with tsx6, ql contains number cells -1, returns with pr0
		" pointing at allocated block.
	eax0	0,ql
	epp0	pr5|2,ad
	ttn	tally_out_on_allocate
alcellp:	eax0	-1,x0
	tmi	0,x6
	eax1	pr5|2,ad
	ttf	alcellp

tally_out_on_allocate:
	tsx5	tally_ran_out
	tra	alcellp
	tra	allocate_cells

tally_out_on_cons:
	tsx5	tally_ran_out
	tra	consalloc
	tra	copycons

tally_out_on_atsym:
	tsx5	tally_ran_out
	tra	atsymalloc
	tra	copyatsym
tally_out_on_atsym_lp:
	tsx5	tally_ran_out
	tra	atsymalloc_lp
	tra	copyatsym

tally_ran_out:			" skips if a new segment had to be made.
	aos	<lisp_alloc_>|[seg_blk_cntr]
	tmi	0,x5
get_initial_segment:
	spri	pr6|0
	sreg	pr6|32

	epp0	new_seg_ptr
	spri0	args+2
	ldaq	onearg
	staq	args
	epp0	args
	epbp7	pr6|0
	short_call	<lisp_segment_manager_>|[get_lists]

	lpri	pr6|0
	spri5	new_seg_ptr,*
	epp5	new_seg_ptr,*
	spri5	<lisp_alloc_>|[cur_seg]	" store away new allocation segment addresses.
	spri5	<lisp_alloc_>|[consptr]
	lda	=o2000053	" make consptr point up 2, and add in ad modifier.
	sta	<lisp_alloc_>|[consptr]+1
	lda	=o4740004
	sta	pr5|2
	lca	16,dl
	sta	<lisp_alloc_>|[seg_blk_cntr]
	lreg	pr6|32
	tra	1,x5

	end
