" **************************************************************
" *                                                            *
" * Copyright, (C) Massachusetts Institute of Technology, 1973 *
" *                                                            *
" **************************************************************
"
"	lisp_property_fns_ -- those primitives used by lisp programs
"			  to manipulate property lists.
"			   Also handles lists which are structured as
"			   property lists, even if not associated with atoms.
"

get_plist:	" this routine sets bp to point at the plist of something.
		" call by tsx0, following word has pdl cell number in du
		" skip returns if this thing has a plist, else doesn't skip.
		" caller may signal an error if he wants.
		" NOTE:  this perhaps should be changed to try a user
		" interrupt if the thing does not have a plist, or otherwise
		" be user-replaceable so that numbers and lists can have
		" properties associated with them in some strange way.

	ldx1	0,x0		" pick up pdl cell number of arg
	ldaq	ap|0,x1		" get thing whose plist is needed
	cmpaq	ab|nil
	tze	get_plist_of_nil-*,ic
	cana	Unevalable,dl	" have a plist?
	tnz	1,x0		" no, non_skip return
	eppbp	ap|0,x1*		" yes, bp|2 contains it
	tra	2,x0		" and skip return

get_plist_of_nil:
	eppbp	<lisp_static_vars_>|[property_list_of_nil]-2	" bp|2 contains plist
	tra	2,x0



	segdef	get_
get_:	tsx0	get_plist-*,ic	" get the property list of first argument
	arg	-4
	tra	retrn_nil-*,ic	" if has no plist, don't err, just return nil

get_loop:	ldaq	bp|2		" see if there is any more property list left.
	cmpaq	ab|nil
	tze	retrn_aq-*,ic	" if not, return nil.
	eppbp	bp|2,*		" get next indicator cell.
	ldaq	bp|0		" load the indicator.
	eppbp	bp|2,*		" and get pointer to value cell for that indicator.
	cmpaq	ap|-2		" see if desired indicator.
	tnz	get_loop-*,ic	" if not, try next indicator on list.
	ldaq	bp|0		" load value to return.
retrn_aq:	eppap	ap|-4		" pop off two args
retrn:	epplp	ab|-4,x7*
	eppbp	ab|-2,x7*
	eax7	-4,x7		" pop off save stuff.
	tra	bp|0		" return.

retrn_nil: ldaq	ab|nil		" any atom not having a pname has null property list.
	tra	retrn_aq-*,ic	" so return nil...this used to be error.

	segdef	getl_
getl_:	ldaq	ap|-2
	cana	Atomic,dl			" make sure it is a list.
	tze	getl_ok-*,ic
	cmpaq	ab|nil			" nil is ok too.
	tze	getl_ok-*,ic
	lcq	-fn_getl,dl
	tsx6	error2-*,ic		" error in second of two args.
	tra	getl_-*,ic

getl_ok:	tsx0	get_plist-*,ic		" find atom whose property is to be gotten
	arg	-4
	tra	retrn_nil-*,ic		" no properties -> nil
getl_lp:	ldaq	bp|2			" check to see if any properties
	cmpaq	ab|nil			" left...if not return nil
	tze	retrn_aq-*,ic
	staq	ap|-4			" save as a possible return val
	eppbp	bp|2,*

	epplp	ap|-4			" see if cur indicator is member of list.
getl_lp1:	ldaq	lp|2			" see if any more tings in list
	cmpaq	ab|nil
	tze	getl_next-*,ic
	epplp	lp|2,*			" if so, check next element
	ldaq	lp|0			" against current indicator
	cmpaq	bp|0
	tnz	getl_lp1-*,ic		" if not eq, then try next element.

	ldaq	ap|-4			" load saved result.
	tra	retrn_aq-*,ic

getl_next:eppbp	bp|2,*			" get next property cell pointer.
	tra	getl_lp-*,ic

	segdef	plist_			" function to get the plist
plist_:	tsx0	get_plist-*,ic
	arg	-2
	eppbp	ab|nil-2			" if doesn't have one, for now use nil
	ldaq	bp|2			" pick up the plist
	eppap	ap|-2
	tra	retrn-*,ic

	segdef	setplist_			" function to set a new plist
setplist_:tsx0	get_plist-*,ic
	arg	-4
	tra	cant_set_plist-*,ic		" error to set plist of e.g. number.
	ldaq	ap|-2			" get plist to set
	staq	bp|2			" store it away
	ldaq	ap|-4			" return first arg
	tra	retrn_aq-*,ic

cant_set_plist:
	lda	<lisp_error_table_>|[cant_set_plist]
	eax0	-4			" ap|-4 has the bad thing
	tsx6	error00-*,ic		" go signal error
	tra	setplist_-*,ic		" then try again

	segdef	remprop_
remprop_loses:
	lcq	-fn_remprop,dl		" load error code
	tsx6	error1-*,ic		" go complain to user
					" and if reparations made, try again.

remprop_:	tsx0	get_plist-*,ic		" get plist of first arg
	arg	-4
	tra	remprop_loses-*,ic		" can't get it, complain
	epplp	bp|0			" lp will point at cell to rplacd
rem_loop:	ldaq	lp|2			" check for end of plist.
	cmpaq	ab|nil
	tze	retrn_aq-*,ic		" if end, return nil.
	eppbp	lp|2,*			" get pointer at property indicator cell.
	ldaq	bp|0			" load the indicator
	cmpaq	ap|-2			" cand see if the desired one.
	tze	rem_property-*,ic		" if so remove the property.
	epplp	bp|2,*			" look at next element
	tra	rem_loop-*,ic		" and try again.

rem_property:
	eppbp	bp|2,*			" get pointer to second cell deleted.
	ldaq	bp|2			" and rplacd its cdr into place
	staq	lp|2			" pointed at by lp.
	spribp	ap|-2			" result is second cell
	ldaq	ap|-2			" return indicator of success.
	tra	retrn_aq-*,ic

	segdef	putprop_
putprop_loses:
	lcq	-fn_putprop,dl	" load our name
	tsx6	error3-*,ic	" and call the error routine

putprop_:	tsx0	get_plist-*,ic	" find plist of arg 1
	arg	-6
	tra	putprop_loses-*,ic	" if has none, barf

	epplb	bp|0		" save address of start of plist
put_loop:	ldaq	bp|2		" check to see if at end of plist.
	cmpaq	ab|nil
	tze	make_new_cells-*,ic	" if so, must make addition to plist at front.
	eppbp	bp|2,*		" get pointer at indicator cell
	ldaq	bp|0		" load indicator.
	eppbp	bp|2,*		" get value cell pointer into bp
	cmpaq	ap|-2		" if indicator eq to arg 3, rplacd
	tnz	put_loop-*,ic	" oterwise jump down list to next indicator.
	ldaq	ap|-4		" get new value to rplaca
	staq	bp|0		" and do it.
	eppap	ap|-6		" get rid of args...value to return is in aq
	tra	retrn-*,ic

make_new_cells:			" code to make two new list cells and splice tem in.
	eppap	ap|6		" get arg list room
	ldaq	lb|2		" load old cdr of arg 1
	staq	ap|-2		" and set up call to cons.
	ldaq	ap|-4-6		" load arg 2
	staq	ap|-4
	eax7	8,x7		" get room for two type 1 calls to cons.
	sprilp	ab|-8,x7
	sprilp	ab|-4,x7
	stcd	ab|-2,x7		" save return address.
	tra	<lisp_alloc_>|[cons_]
	staq	ap|-2
	stcd	ab|-2,x7		" call cons again to add indicator.
	tra 	<lisp_alloc_>|[cons_]
	staq	ap|-2		" save new property list
	tsx0	get_plist-*,ic	" get where to put it
	arg	-4
	drl	0		" I don't know what to do here
	ldaq	ap|-2		" get back result of consing
	staq	bp|2		" store new property list
	eppbp	bp|2,*
	ldaq	bp|2,*		" load the value for return
	tra	retrn_aq-*,ic


"	The PL/I callable entries are here...

	entry	get,putprop,getl,remprop

get:	tsx6	pl1_to_lisp-*,ic
	tra	get_-*,ic
putprop:	tsx6	pl1_to_lisp-*,ic
	tra	putprop_-*,ic
getl:	tsx6	pl1_to_lisp-*,ic
	tra	getl_-*,ic
remprop:	tsx6	pl1_to_lisp-*,ic
	tra	remprop_-*,ic

pl1_to_lisp:
	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
	eppap	<lisp_static_vars_>|[stack_ptr],*
	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stz	ab|in_pl1_code
	eax7	4,x7
	sprilp	ab|-4,x7		" save lp and return address.
	stcd	ab|-2,x7
	tra	0,x6		" and call the lisp routine.
	eppap	ap|2		" now put result back on stack.
	staq	ap|-2
	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code
	short_return


error1:	eax0	-4		" offset of losing arg from stack top.
error:	lda	<lisp_error_table_>|[bad_arg_correctable]
error00:	eax7	4,x7		" save regs, error data on unmkd stack
	staq	ab|-2,x7
	eppap	ap|2		" get losing arg on stack top.
	ldaq	ap|-2,x0
	staq	ap|-2
	stx6	ab|-4,x7		" save return address
	stx0	ab|-3,x7		" and stack offset of bad arg.
	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code
	push
	eppap	noargs-*,ic
	short_call <lisp_error_>|[lisp_error_]
	eaa	sp|16,*		" get back pointer from stack frame
	sprisp	sb|stack_header.stack_end_ptr
	eppsp	sb|0,au		" and pop off stack frame.
	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
	eppap	<lisp_static_vars_>|[stack_ptr],*
	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stz	ab|in_pl1_code
	ldaq	ap|-2		"load returnd value.
	eppap	ap|-2
	ldx0	ab|-1,x7
	ldx6	ab|-2,x7
	staq	ap|0,x0		" put value back in correct place.
	eax7	-2,x7		" pop off saved index reg block.
	tra	0,x6		" return to try again.
error2:	eax0	-2		" offset of losing arg.
	tra	error-*,ic
error3:	eax0	-6	" offset of losing arg.
	tra	error-*,ic

	even
noargs:	oct	4,0		" null arg list.
	include 	stack_header
	include 	lisp_object_types
	include	lisp_name_codes
	include	lisp_stack_seg
	end
