" **************************************************************
" *                                                            *
" * Copyright, (C) Massachusetts Institute of Technology, 1973 *
" *                                                            *
" **************************************************************
	name	lisp_alloc_	" lisp allocator.

	use	static		" static variables.
	join	/link/static

	segdef	alloc_info
alloc_info:
	segdef	alloc_fault_word
alloc_fault_word:
	dec	0		" this word is non-zero to indicate that interrupts
				" must be masked temporarily, while data is inconsistent.
				" upper half is set to non-zero, lower two bits recor
				" quit and alarm faults as they happen, for later signalling.

	segdef	gc_blk_cntr
gc_blk_cntr:
	dec	0		" this word counts the number of blocks to garbage collection.
				" if negative, that many more 16K blocks will be allocated.
	segdef	seg_blk_cntr
seg_blk_cntr:
	dec	0		" this word counts the number of blocks left before the
				" end of the current segment.
	even
	segdef	consptr
consptr:	its	-1,1,ad		" this pointer points at the segment's ad indirect word.

	segdef	cur_seg
cur_seg:	its	-1,1		" this pointer points at the current segment's base.

"
	use	program
	join	/text/program

" subroutines to go from lisp calling discipline to PL/I and back.
"

	tempd	arglist(4),new_seg_ptr

	even
noargs:
	oct	4
	oct	0
header_for_1_arg:
	oct	2000004		" pl1 arg header, 1 argument.
	oct	0

save_for_pl1_call:			" routine to switch to PL/I conventions, and get a stack
				" frame to call out from.

	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code	" remember we are using these conventions now.
	push
	eppbp	<lisp_alloc_>|[lisp_alloc_]	set entry pointer
	spribp	sp|stack_frame.entry_ptr
	tra	0,x6		" return. x6 is not used by save macro.

pop_back_to_lisp:			" routine to get rid of stack frame, 
				" and re-enter lisp code.
	sprisp	sb|stack_header.stack_end_ptr
	eppsp	sp|16,*		" get back to prev stack frame.
switch_to_lisp:			" alternate entry for entering lisp conventions.
	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
	eppap	<lisp_static_vars_>|[stack_ptr],*
	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stz	ab|in_pl1_code
	tra	0,x6		" return to caller.


"
"	Subroutine to allocate 4 words for a cons. called with a tsx6.

cons_alloc:
	stc1	lp|alloc_fault_word		" inhibit interrupts.
	eppbp	lp|consptr,*		" use pointer with ad modifier to do work.
	ttn	tally_out

ret_alloc:
	ldac	lp|alloc_fault_word
	ana	=o7,dl			" mask out low order bits.
	tze	0,x6			" return if no interrupts.

"
"	code to handle faults in alloc here.
"
alloc_got_fault:				" operators for allocation join here after saving other things.
	eax7	4,x7			" get space to save useful regs.
	spribp	ab|-4,x7			" bp points to space we just allocated.
	sta	ab|-2,x7			" a contains argument for fault decoding.
	stx6	ab|-1,x7			" x6 contains eventual return address.
	sxl5	ab|-1,x7
	tsx6	save_for_pl1_call-*,ic	" save, and switch to pl1 conventions.
	eppbp	<lisp_static_vars_>|[unmkd_ptr],*
	eppbp	bp|-2			" get address of saved fault bits.
	spribp	arglist+2			" and set as first arg to handler
	ldaq	header_for_1_arg-*,ic	" get arglist header for 1 arg.
	staq	arglist
	eppap	arglist
	short_call <lisp_default_handler_>|[alloc_fault]
	tsx6	pop_back_to_lisp-*,ic	" remove stack frame, and reload ap,ab,x7.
	ldx6	ab|-1,x7			" reload return address.
	lxl5	ab|-1,x7			"reload saved x5.
	eppbp	ab|-4,x7*			" reload pointer to space allocated.
	eax7	-4,x7
	tra	0,x6





tally_out:
	aos	lp|gc_blk_cntr		" one less block remains till gc.
	tmi	2,ic			" if more before gc, continue.
	tsx4	must_gc-*,ic		" if no more, go gc.
	aos	lp|seg_blk_cntr		" one less block in segment, too.
	tze	get_new_seg-*,ic		" get new segment if needed.

				" otherwise, check for interrupt, and return.
	tra	ret_alloc
"
" 	Subroutine to allocate words (multiple of 4) in q. Called with tsx6.

	segdef	words_alloc
words_alloc:
	stc1	lp|alloc_fault_word		" inhibit interrupts.
	eax0	-4,ql			" number of words to allocate.
	eppbp	lp|consptr,*		" let the ad modifier do the work.
					" if no tally out, keep going.
	ttn	tally_done-*,ic		" otherwise, end of core block.

alloc_loop:
	eax0	-4,x0			" 4 more words gotten by ad modifier,
	tmi	ret_alloc-*,ic		" if no more, then we can return!
	eax1	lp|consptr,*		" ad modifier gets more space, as side effect.
	ttf	alloc_loop-*,ic		" and if not at end of block, keep going.

tally_done:
	aos	lp|gc_blk_cntr		" reduce number of blocks before next gc.
	tmi	2,ic			" if more before gc, continue.
	tsx4	must_gc-*,ic		" if no more, garbage collect now.
	aos	lp|seg_blk_cntr		" reduce number of blocks to seg end.
	tmi	alloc_loop-*,ic		" if still more in segment, just continue.
	tra	get_new_seg-*,ic

locked_alloc:		" routine to alloc words when already locked, and no gc allowed
	eax1	*+2	"simulate stc1 effect.
	stx1	lp|alloc_fault_word
	eax0	-4,ql
	eppbp	lp|consptr,*
	ttn	lock_tally_done
lock_alloc_loop:
	eax0	-4,x0
	tmi	0,x6
	eax1	lp|consptr,*
	ttf	lock_alloc_loop

lock_tally_done:
	aos	lp|gc_blk_cntr		" caller's responsibility to check gc_blk_cntr.
	aos	lp|seg_blk_cntr
	tmi	lock_alloc_loop
	tra	get_new_seg
"
"	Subroutine to get a new allocation segment. lp|alloc_fault_word is set,
"	so a ret instruction will go back and redo allocation.

get_new_seg:
	eax7	2,x7			" get room for save of caller's return address
	stx6	ab|-2,x7
	sxl5	ab|-2,x7			" save x5 for lsubr callers.
	stq	ab|-1,x7			" and num words to allocate.
	tsx6	save_for_pl1_call-*,ic	" go to PL/I calling conventions.
	eppbp	new_seg_ptr		" get address of pointer arg.
	spribp	arglist+2
	ldaq	header_for_1_arg-*,ic
	staq	arglist
	call 	<lisp_segment_manager_>|[get_lists](arglist)
	ldaq	lp|cur_seg		" get cur segment ptr
	eppbp	new_seg_ptr,*		" get pointer to new seg base.
	staq	bp|0			" thread in old segment.
	spribp	lp|cur_seg		" and make new segment the current segment.
	eppbp	bp|2			" get pointer to ad tally word.
	spribp	lp|consptr		" store it away.
	lda	=o53,dl			" load ad modifier value
	orsa	lp|consptr+1		" and put in the further modification 
					" part of its pointer.
	lda	=o4740004			" load actual tally word initial value
	sta	bp|0			" and store it in segment's tally word.
	lca	16,dl			" load minus number of 16K blocks in segment.
	sta	lp|seg_blk_cntr		" so the end of segment will be caught.
	tsx6	pop_back_to_lisp-*,ic
	ldq	ab|-1,x7			" reload saved registers.
	ldx6	ab|-2,x7
	lxl5	ab|-2,x7			" reload x5 for lsubr callers.
	eax7	-2,x7			" pop back unmarked stack,
	ldx0	lp|alloc_fault_word	" and return to restart point of allocation routine.
	tra	0,x0
"
"	Subroutine which calls the garbage collector, and reinitializes data
"	before restarting allocation again.
"	called with a tsx4, returns to just after tsx4 if gc inhibited, otherwise,
"	returns to restart address in alloc_fault_word, as old allocation meaningless.
"

must_gc:
	szn	<lisp_static_vars_>|[garbage_collect_inhibit]
	tnz	0,x4			" return if gc inhibited, and don't gc until next block done.
					" and don't gc till next block done.
	eax7	2,x7			" get space to save registers.
	stx6	ab|-2,x7
	sxl5	ab|-2,x7			" save x5 for lsubr callers
	stq	ab|-1,x7
	tsx6	save_for_pl1_call-*,ic
	eppap	noargs-*,ic
	short_call <lisp_garbage_collector_>|[lisp_garbage_collector_]
	tsx6	pop_back_to_lisp-*,ic
	ldq	ab|-1,x7			" reload saved registers.
	ldx6	ab|-2,x7			" ..
	lxl5	ab|-2,x7
	eax7	-2,x7
	ldx0	lp|alloc_fault_word		" restart allocation again.
	tra	0,x0
"
"operators for compiled code to allocate conses.
" by using these operators, compiled code is made more compact
" and locally more efficient.

	segdef	cons_opr
cons_opr:	tsx6	opr_cons
cons_opr_com0:
	staq	bb|0		store aq into car of allocated cons
cons_opr_com1:
	tsx6	opr_ck_fault	check for faults in cons
	ldaq	bb|0		reload aq from car
	tra	bp|0		return to caller

	segdef	ncons_opr
ncons_opr:tsx6	opr_cons
ncons_opr_com:
	staq	bb|0		store arg into car of allocated cons
	ldaq	ab|nil
	staq	bb|2		store nil into cdr of allocated cons
	tra	cons_opr_com1

	segdef 	xcons_opr
xcons_opr:tsx6	opr_cons
	staq	bb|2
	tsx6	opr_ck_fault
	ldaq	bb|2		reload aq from cdr of cons
	tra	bp|0

	segdef	begin_list_opr	operator to get the first element of a list
begin_list_opr:
	tsx6	opr_cons
	eppap	ap|2		push result on stack for later list oprs.
	spribb	ap|-2
	tra	cons_opr_com0

	segdef	append_list_opr
append_list_opr:
	tsx6	opr_cons
	eax6	2		to save a register
	spribb	ap|-2,*x6		rplacd onto old list
	spribb	ap|-2		and store in old list place.
	tra	cons_opr_com0

	segdef	terminate_list_opr
terminate_list_opr:
	tsx6	opr_cons
	eax6	2
	spribb	ap|-2,*x6		rplacd onto end of list
	eppap	ap|-2		wipe temp off stack
	tra	ncons_opr_com	and set portions of new cons.


" Operator to cons up a string
" called by tspbp with length (in characters) in q
" returns pointer to string in both bb and aq.  stringlength is stored

	segdef	cons_string

cons_string:
	eax5	0,ql		save length
	adq	15+4,dl		allow for length word + 4-word blocks
	qrs	4		divide by 4 chars/wd + 4 wds/block
	qls	2		then allow for words_alloc strangeness
	eax7	2,x7		save caller's lp and address
	sprplp	ab|-2,x7
	sprpbp	ab|-1,x7
	epplp	ab|system_lp,*
	tsx6	words_alloc	get space for the string
	eppbb	bp|0		and move pointer into proper register
	lprplp	ab|-2,x7		restore regs
	lprpbp	ab|-1,x7
	stz	bb|0		set length word
	sxl5	bb|0		..
	spribb	ab|-2,x7		move bb into aq
	ldaq	ab|-2,x7
	ora	String,dl
	eax7	-2,x7
	tra	bp|0	
"
"  common routine to allocate a cons for the operators
"
"	uses lb to point to linkage section,
"	returns result in bb,
"	saves aq, bp, lp, x6.

opr_cons:	epplb	ab|system_lp,*	get our lp into lb register
	stc1	lb|alloc_fault_word	lock out interrupts
	eppbb	lb|consptr,*	allocate a cons
	ttf	0,x6		and if no tally runout, return

	aos	lb|gc_blk_cntr	check for gc.
	tmi	no_opr_gc
	tsx4	save_regs_call	save regs and execute next instruction.
	tra	must_gc
	tsx4	unsave_regs
no_opr_gc:aos	lb|seg_blk_cntr	check if out of segment room
	tmi	0,x6		if not, can return
	tsx4	save_regs_call
	tra	get_new_seg
	div	0,dl		get_new_seg returns to reallocate
				" never to here (hopefully)
save_regs_call:
	eppap	ap|2
	eax7	2,x7
	staq	ap|-2		save aq on marked stack
	sprplp	ab|-2,x7		save lp
	sprpbp	ab|-1,x7	and bp
	epplp	lb|0		get lb into lp.
	ldx5	lb|alloc_fault_word	kludge saving restart address in x5
	eax3	unsave_retry	and storing addr of unsaver in restart address
	stx3	lb|alloc_fault_word
	eax4	1,x4		get real return address
	xec	-1,x4		and execute instruction after call

unsave_retry:
	eax4	0,x5		restart at allocation point
unsave_regs:
	ldaq	ap|-2		reload aq
	epplb	lp|0		move lp into lb again
	lprplp	ab|-2,x7		reload caller's lp
	lprpbp	ab|-1,x7		and bp
	stx5	lb|alloc_fault_word	restore stc1 word to original state
	eppap	ap|-2		pop off stack
	eax7	-2,x7
	tra	0,x4		and return

"
" routine used by oprs to check for faults while allocating
"
"	clobbers a register.

opr_ck_fault:
	ldac	lb|alloc_fault_word	unit operation
	ana	=o7,dl		mask out fault bits
	tze	0,x6		if no fault, return

	eax5	0,x6		save x6 in x5
	eax7	4,x7
	spribb	ab|-4,x7		save registers not saved in other allocator fault checker
	sprilp	ab|-2,x7
	epplp	lb|0
	tsx6	alloc_got_fault
	epplb	lp|0		unsave stuff
	epplp	ab|-2,x7*
	eppbb	ab|-4,x7*
	eax7	-4,x7
	tra	0,x5		return to caller
"
	entry	lisp_alloc_		" pl1 callable allocation routine.
lisp_alloc_:
	eppbp	ap|0			" get pointer to arg list.
	tsx6	switch_to_lisp-*,ic		" load ab, ap, x7 etc.
	eax7	2,x7			" get some space for second arg pointer save.
	ldaq	bp|4			" load pointer to second arg.
	staq	ab|-2,x7			" and save it.
	ldq	bp|2,*			" load first arg, number of words needed.
	adq	3,dl			" round it to mod 4.
	anq	=o777774,dl		" and ignore high order bits too.
	tsx6	words_alloc-*,ic		" allocate number of words in q, return in bp.
	spribp	ab|-2,x7*			" save in second argument.
	eax7	-2,x7
ret_to_pl1:				" return to pl1 conventions.
	spriap	<lisp_static_vars_>|[stack_ptr]
	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
	stc1	ab|in_pl1_code
	short_return			" return to caller, no stack frame exists.
"
"	Entries called from pl1 programs in the lisp system.
"	called as lisp_special_fns_$xxxx.

	entry	cons
cons:	tsx6	switch_to_lisp-*,ic		" switch to lisp calling conventions.
	eax7	4,x7			" get room to do a lisp call to cons_
	sprilp	ab|-4,x7			" store lp
	stcd	ab|-2,x7			" store return address.
	tra	cons_-*,ic
pl1_ret:	eppap	ap|2			" get room to push result on stack.
	staq	ap|-2			" and push it.
	tra	ret_to_pl1-*,ic		" return and switch back to pl1 conventions.

	entry	xcons
xcons:	tsx6	switch_to_lisp-*,ic
	eax7	4,x7
	sprilp	ab|-4,x7			" call to xcons_ via lisp call.
	stcd	ab|-2,x7
	tra	xcons_-*,ic
	tra	pl1_ret-*,ic

	entry	ncons
ncons:	tsx6	switch_to_lisp-*,ic		" switch to lisp calling conventions.
	eax7	4,x7
	sprilp	ab|-4,x7
	stcd	ab|-2,x7
	tra	ncons_-*,ic
	tra	pl1_ret-*,ic

	entry	list
list:	tsx6	switch_to_lisp-*,ic
	lxl5	ap|-1			" laod number of args * -2
	eppap	ap|-2			" pop off stack.
	eax7	4,x7
	sprilp	ab|-4,x7
	stcd	ab|-2,x7
	tra	list_-*,ic
	tra	pl1_ret-*,ic

	entry	list_star
list_star:
	tsx6	switch_to_lisp
	lxl5	ap|-1			" laod number of args * -2
	eppap	ap|-2			" pop off stack.
	eax7	4,x7
	sprilp	ab|-4,x7
	stcd	ab|-2,x7
	tra	list_star_
	tra	pl1_ret

	entry	gensym
gensym:	tsx6	switch_to_lisp-*,ic
	lxl5	ap|-1		get number args into x5
	eppap	ap|-2		pop off stack
	eax7	4,x7		get room to save lp and return link
	sprilp	ab|-4,x7
	stcd	ab|-2,x7
	tra	gensym_-*,ic	and call lisp gensym function.
	tra	pl1_ret-*,ic	then return

	entry	subst
subst:	tsx6	switch_to_lisp
	eax7	4,x7
	sprilp	ab|-4,x7
	stcd	ab|-2,x7
	tra	subst_
	tra	pl1_ret

	entry	nreverse
nreverse:	tsx6	switch_to_lisp
	eax7	4,x7
	sprilp	ab|-4,x7
	stcd	ab|-2,x7
	tra	nreverse_
	tra	pl1_ret


	entry	get_fault_word
get_fault_word:			" subroutine to get a copy of alloc_fault_word, and zero it at the same time.
				" must be done in a way such that interrupts don't foul it up.
				" interrupts can or new things into the fault word...
	stz	ap|2,*		" zero result.
gfw_lp:	lda	lp|alloc_fault_word	" get fault word.
	orsa	ap|2,*		" or bits gotten into result.
	ersa	lp|alloc_fault_word	" and clear those bits in the fault word.
	tnz	gfw_lp-*,ic	" if more bits turned on since two insts. ago, get them.
	short_return

	entry	set_fault
set_fault:
	lda	ap|2,*
	orsa	lp|alloc_fault_word		" set fault on.
	short_return
"
	segdef	cons_
cons_:	tsx6	cons_alloc-*,ic		"allocate 4 words for cons
	ldaq	ap|-4			"load soon-to-be car
	staq	bp|0			"make it car.
	ldaq	ap|-2			"load soon-to-be cdr
xcret:	staq	bp|2
	spribp	ap|-2
	ldaq	ap|-2			"get result in aq
	eppap	ap|-4			"pop back  stack
retrn:	epplp	ab|-4,x7*			"reload caller's lp
	eppbp	ab|-2,x7*			"and bp
	eax7	-4,x7
	tra	bp|0			return

	segdef	xcons_
xcons_:	tsx6	cons_alloc-*,ic		"get 4 words
	ldaq	ap|-2			"load car
	staq	bp|0
	ldaq	ap|-4			"load cdr
	tra	xcret-*,ic		"and join with cons code.

	segdef	ncons_
ncons_:	tsx6	cons_alloc-*,ic		"get 4 words
	ldaq	ab|nil
	staq	bp|2
	ldaq	ap|-2
	staq	bp|0
	spribp	ap|-2
	ldaq	ap|-2
	eppap	ap|-2
	tra	retrn-*,ic

	segdef	list_star_
list_star_:
	eax5	2,x5			"we need one fewer cons than list_ does
					"Avoid ap push. Our 'cddddddr' tail is
					"already same place as list's running tail.
	tnz	list_lp			"so skip nil and make list
	tra	ret_list			"one arg, we are noop, pop and return arg

	segdef	list_
list_:	eppap	ap|2			"get room for tail of list
	ldaq	ab|nil			"load initial tail.
	staq	ap|-2
	cmpx5	0,du			"check x5 for no args.
	tze	ret_list-*,ic
list_lp:	tsx6	cons_alloc-*,ic
	ldaq	ap|-2			"load tail of list
	staq	bp|2			"and make it cdr
	ldaq	ap|-4
	staq	bp|0			"make next last thing car.
	spribp	ap|-4
	eppap	ap|-2			"pop off old tail.
	eax5	2,x5		"one less arg.
	tnz	list_lp-*,ic
ret_list:	ldaq	ap|-2			"load last result.
	eppap	ap|-2			"pop off stack
	tra	retrn-*,ic


" gensym function...coded in alm for speed.

	segdef	gensym_		" regular lisp subr entry point.
gensym_:	cmpx5	0,du		" check for any arguments
	tmi	set_gensym_data-*,ic " and jump to special routine if so.

gensym_begin:
	ldq	8,dl		" need 8 words for the atom.
	tsx6	words_alloc-*,ic
	lda	5,dl		" put 5 in name length field.
	sta	bp|4
	ldaq	ab|nil		" and nil in property list.
	staq	bp|2

	aos	ab|gensym_data+1	increment the counter
	lda	ab|gensym_data+1	check for wrap-around
	cmg	9999,dl
	tmoz	2,ic
	stz	ab|gensym_data+1	wraps around to 0 instead of 1.  OK?
	btd	(pr),(pr)		now convert to decimal and stick into pname
	desc9a	ab|gensym_data+1,4
	desc9ns	bp|5(1),4
	mlr	(pr),(pr)		don't forget the "g"
	desc9a	ab|gensym_data,1
	desc9a	bp|5,1
	epaq	bp|0		get atomic symbol as lisp object in aq
	eaa	0,au		clear out ring number
	ora	Atsym+35,dl	turn on type bit and 043 modifier
	tra	retrn-*,ic

set_gensym_data:
	ldaq	ap|-2
	cmpa	fixnum_type,dl		" check for new index
	tnz	chk_prefix-*,ic
	stq	ab|gensym_data+1		store new index in binary
	tra	set_gensym_loop-*,ic
chk_prefix:
	cana	Atsym,dl		" prefix set from atomic symbol
	tze	gensym_err-*,ic
	eppbp	ap|-2,*
	lda	bp|5		" get prefix,
	sta	ab|gensym_data	"and save it.

set_gensym_loop:
	eppap	ap|-2
	eax5	2,x5		" bump back pointers,
	tpl	gensym_begin-*,ic	" and start if done with arguments.
	tra	set_gensym_data-*,ic

gensym_err:
	eax7	4,x7		" get room for error data and save area.
	lda	bad_arg_correctable,dl
	lcq	-fn_gensym,dl
	staq	ab|-2,x7
	stx5	ab|-4,x7
	tsx6	save_for_pl1_call-*,ic
	eppap	noargs-*,ic
	short_call <lisp_error_>|[lisp_error_]
	tsx6	pop_back_to_lisp-*,ic
	ldx5	ab|-2,x7
	eax7	-2,x7
	tra	set_gensym_data-*,ic	" try again if error returns.

" copysymbol function. takes two args, first is atsym, second flag.
" makes new atom with same pname as first, if flag is nil, it is otherwise unsharing.
" if flag is t, will put copy of prop list on as its prop list, and copy the value.

	segdef	copysymbol
copysymbol:
	ldaq	ap|-4		"get arg.
	cana	Atsym,dl
	tnz	copysym
	eppap	ap|-4		" should be error? we just return arg.
	tra	retrn

copysym:	eppap	ap|2		" get working space.
	eppbp	ap|-6,*
	ldq	bp|4		" get length of pname
	adq	35,dl		" round to 4 word multiple
	qrs	4		" ..
	qls	2		" ..
	tsx6	words_alloc	" allocate new atom.
	spribp	ap|-2
	lda	Atsym,dl
	orsa	ap|-2

	eppbb	ap|-6,*		" get pointer to original atom.
	ldq	bb|4		" get length
	stq	bp|4		" and set length of new atom
	mlr	(pr,rl),(pr,rl)	" move in name.
	desc9a	bb|5,ql
	desc9a	bp|5,ql		" done move
	ldaq	ap|-4		" check falg.
	cmpaq	ab|nil
	tnz	copypropl
	staq	bp|2		nullify prop list
	tra	return_copy

copypropl:
	ldaq	bb|0		" get value
	staq	bp|0
	eppap	ap|4		" args for append
	ldaq	ap|-10		" see if symbol being copied is nil
	cmpaq	ab|nil
	tze	copypropl_nil-*,ic	" yes, get property list from different place.
	ldaq	bb|2		" get old prop list
copypropl_0:
	staq	ap|-4
	ldaq	ab|nil
	staq	ap|-2
	eax5	-4
	eax7	4,x7		" get room for push of return addr
	sprilp	ab|-4,x7
	stcd	ab|-2,x7
	tra	append		" call append
	eppbb	ap|-2,*		" get poiner to new atom
	staq	bb|2		" and store new prop list

return_copy:
	ldaq	ap|-2
	eppap	ap|-6
	tra	retrn

copypropl_nil:
	ldaq	<lisp_static_vars_>|[property_list_of_nil]
	tra	copypropl_0-*,ic


"	append and nconc subroutines. both are lsubrs with any number of args.

	segdef	append

append:	cmpx5	0,du		" check for no args
	tze	ret_nil-*,ic	" return nil in this case.
	eppap	ap|4		" get room for result, and scanning pointer.
	eax7	2,x7		" also, save stack popping point,
	stx5	ab|-2,x7		" so x5 can be changed....

skip_atoms:			" first skip leading atomic arguments.
	ldaq	ap|-4,x5		" load next arg,
	eax5	2,x5		" and move up stack,
	tze	ret_arg-*,ic	" but if last arg, just return.
	cana	Atomic,dl		" check for atom
	tnz	skip_atoms-*,ic	" and skip if so.

	tsx6	cons_alloc-*,ic	" allocate initial cons, and make it the result.
	ldaq	ap|-6,x5*		" copy car of current list in...
	staq	bp|0		" ....
	spribp	ap|-4		" make this the result.
aplp:	spribp	ap|-2		" make allocated cons the scan pointer.
	eppbp	ap|-6,x5*		" move to next list cell of argument.
	ldaq	bp|2		" ...
	staq	ap|-6,x5		" ...
chk_list:	cana	Atomic,dl		" check to see if we are still following a list.
	tnz	end_list-*,ic
	tsx6	cons_alloc-*,ic	" allocate another cell.
	ldaq	ap|-6,x5*		" copy car of this list cell in.
	staq	bp|0		" ...
	eax2	2		" set cdr of scan pointer to new cell
	spribp	ap|-2,*x2		" ...
	tra	aplp-*,ic		" and continue, updating scan pointer.

end_list:	ldaq	ap|-4,x5		" load next argument.
	eax5	2,x5		" and move up arg list.
	tmi	chk_list-*,ic	" if not last arg, continue.
	eppbp	ap|-2,*		" otherwise, make last arg cdr of final list.
	staq	bp|2		" ...
	ldaq	ap|-4		" load result.
ret_arg:	ldx5	ab|-2,x7		" reload x5.
	eax7	-2,x7		" pop stack.
	eppap	ap|-4,x5		" ...
	tra	retrn-*,ic

	segdef	nconc

nconc:	eax4	0,x5		" save height of stack to restore to.
	tze	ret_nil-*,ic	" if no args, nil is the result.
	eax5	2,x5
	tze	retn-*,ic		" if one arg, just return it.

	eppbp	ap|-4,x5		" bp points so that bp|2 is replaced
				" by next arg, always.
nclp:	lxl0	bp|2		" load type field of cdr.
	canx0	Atomic,du		" check for atom.
	tnz	zap-*,ic

	eppbp	bp|2,*		" go to cdr otherwise.
	tra	nclp-*,ic		" and continue looking for end.

zap:	ldaq	ap|0,x5		" load next arg.
	staq	bp|2		" zap it in cdr of list.
	eax5	2,x5		" bump number of args.
	tnz	nclp-*,ic		" if more, continue down new list.
retn:	ldaq	ap|0,x4		" load first arg,
	eppap	ap|0,x4		" and return it.
	tra	retrn-*,ic

ret_nil:	ldaq	ab|nil		" load nil
	tra	retrn-*,ic	" and return it.

"	lisp reverse and nreverse functions...
"	they reverse a list argument by copying in the first instance,
"	or by rplacd's in the second instance.
"	both are type 1 subrs.
"
	segdef	reverse
reverse:	ldaq	ap|-2		load argument.
	cana 	Atomic,dl		and check for atom
	tze	not_atom_reverse
	eppap	ap|-2
	tra	retrn		return directly if not list.
not_atom_reverse:
	eppap	ap|2		get storage to play with.
	ldaq	ab|nil		init result to nil.
	staq	ap|-2
rev_loop:	tsx6	cons_alloc	get a cons cell
	ldaq	ap|-2		and move previous result into its cdr.
	staq	bp|2		..
	spribp	ap|-2		make this cons the new result.
	eppbp	ap|-4,*		load the car of the remainder of the argument
	ldaq	bp|0
	staq	ap|-2,*		and move it into the car of the new result.
	ldaq	bp|2		now load the cdr of the argument
	staq	ap|-4		and make it the new argument.
	cana	Atomic,dl	check to see if more to reverse.
	tze	rev_loop		if more, continue....
	ldaq	ap|-2		load up the result
	eppap	ap|-4
	tra	retrn		and return.


	segdef	nreverse_		nreverse subr...pl1-callable version also in this module.
nreverse_:eppap	ap|2		get a temporary
	ldaq	ab|nil
	staq	ap|-2
	ldaq	ap|-4		unshare nreconc at this point 6/11/80
	cana	Atomic,dl		atoms lose here
	tnz	nrev_ret
nrev_loop:eppbp	ap|-4,*		get pointer to cons...
	ldaq	bp|2
	staq	ap|-4		move its cdr to the result location.
	ldaq	ap|-2		load previous result pointer.
	staq	bp|2		and make it the cdr of the result.
	spribp	ap|-2		now the back pointer points at the current cell.
	ldaq	ap|-4		load the next result.
	cana	Atomic,dl		check for atom, which would lose....
	tze	nrev_loop
	ldaq	ap|-2		load up the back pointer.
nrev_ret: eppap	ap|-4
	tra	retrn		return result.

	segdef	nreconc_		nreconc subr...nreverse followed by nconc...joins here
nreconc_:
	ldaq	ap|-4
	cana	Atomic,dl		check for atom which terminates list.
	tze	nrev_loop		fixed nreconc 6/11/80 BSG
	ldaq	ap|-2
	tra	nrev_ret

"	lisp subst subroutine...copies a list, making substitutions.

	segdef	subst_		there is also a pl1-callable entry point.
subst_:	eax5	-6		note the stack depth at entry time.
	ldaq	ap|-2
	tsx6	subst_loop	call the right subroutine to do the job.
	eppap	ap|-6		pop stack
	tra	retrn		and return.

subst_loop:
	cmpaq	ap|2,x5		compare current lisp value with second arg.
	tze	ret_1st_arg	if same, replace with first arg.
	cana	Atomic,dl		check to see if a leaf of the tree.
	tnz	0,x6		and return if so.

	eax5	-2,x5		add to the depth of the args.
	eppap	ap|2		get room for recursion
	eax7	2,x7		on both stacks.
	staq	ap|-2		save argument.
	stx6	ab|-2,x7		save return address
	ldaq	ap|-2,*		load car of argument.
	tsx6	subst_loop	call subst recursively.
	eppbp	ap|-2,*
	staq	ap|-2		store result of subst on car,
	ldaq	bp|2		and load the cdr.
	tsx6	subst_loop	call subst again.
	eppap	ap|2		get room to save aq
	staq	ap|-2
	tsx6	cons_alloc	call the allocator.
	ldaq	ap|-4		now fill in cons pointed at by bp.
	staq	bp|0
	ldaq	ap|-2
	staq	bp|2
	spribp	ap|-2		move bp to aq
	ldaq	ap|-2
	eppap	ap|-4		and pop stack.
	eax5	2,x5
	ldx6	ab|-2,x7		reload return address.
	eax7	-2,x7		pop unmarked stack
	tra	0,x6		and return.

ret_1st_arg:
	ldaq	ap|0,x5		load 1st arg to top call.
	tra	0,x6		and return it.



""" sublis hacked to use rpt instruction
""" 74.04.27 by DAM

" Register conventions
"
" aq	passing arguments in and out of sublis1
" x7	unmkd pdl ptr as usual
" x6	subroutine calling.  note sublis1 skip returns if it was unchanged.
" x5	value to go in x0 for rpt to scan table.
" x4	number of 256 - item table portions
" x3	temp.
" x2	always contains 2, for cdr'ing
" x1	temp
" x0	temp
" bp	cons ptr
" lb	temp
" bb	-> array of atoms and substitute expressions in stack
"
" stack conventions
"
" ab|-2,x7	register save area for sublis_cons
" ab|-1,x7	LH - save x6 for recursive calls.
" 		RH - register save area for sublis_cons

	segdef	sublis

	bool rpt_tze,100

sublis:	"" first step - construct a table from the first argument.

	eppbb	ap|0		-> table
	eax5	0		number of entries in table
	eax2	2
	ldaq	bb|-4		get list of dotted pairs
sublis0:	cana	lisp_ptr.type,dl
	tnz	got_sublis_table
	epplb	bb|-4,*		get cons of list
	ldaq	lb|0,*		get atomic symbol
	eppap	ap|4		append to table
	eax5	1,x5		increase count
	staq	ap|-4
	ldaq	lb|0,*2		get expression to substitute for symbol
	staq	ap|-2
	ldaq	lb|2		cdr the first argument
	staq	bb|-4
	tra	sublis0

got_sublis_table:
	eaa	0
	eaq	0,x5		set up registers for rpt later
	lls	10
	qls	0
	tnz	2,ic
	 sba	 1,dl		0=256.
	eax5	rpt_tze,qu	value to go in x0 (first rpt count)
	eax4	1,al		value to go in x1 (number of repetitions)
	tmoz	no_sublis		nothing to do.

	"" second stage - begin scanning argument.

	ldaq	bb|-2		second argument
	tsx6	sublis1
	nop	0		in case it skip returns.

	eppap	bb|-4		pop stack and return the result
	tra	retrn


no_sublis:
	ldaq	bb|-2
	eppap	bb|-4
	tra	retrn

sublis1:	"" sublis the form in aq - return addr is at ab|-2,x7

	cana	lisp_ptr.type,dl		atom?
	tze	sublis2			no, cdr down it.
" this is an atom, so look it up in the table.
" HERE IS THE GROSSNESS:

	eax1	0,x4
	eax3	0
	eax0	0,x5
sublis_rpt:
	rptx	,4
	cmpaq	bb|0,x3
	ttf	sublis_substitute_here
	eax0	rpt_tze			repetitions after first are 256. at a time
	eax1	-1,x1
	tnz	sublis_rpt
	tra	1,x6		not found, leave it the same.

sublis_substitute_here:
	ldaq	bb|-2,x3		x3 4 too high.  Pick up thing to be substituted.
	tra	0,x6		return non-skipping to indicate change.

sublis2:	"" sublis of a cons.  do car and cdr

	eax7	2,x7
	eppap	ap|2
	staq	ap|-2
	stx6	ab|-1,x7			save previous return address
	ldaq	ap|-2,*			car
	tsx6	sublis1
	tra	sublis_car_changed		changed, have to make a new cons.
	ldaq	ap|-2,*2			no, get cdr
	tsx6	sublis1
	tra	sublis_cdr_changed		changed, have to make a new cons.
	ldaq	ap|-2			no change, return same old cons.
	eppap	ap|-2
	ldx6	ab|-1,x7
	eax7	-2,x7
	tra	1,x6

sublis_cdr_changed:
	tsx6	sublis_cons
	staq	bp|2			store new cdr
	ldaq	ap|-2,*
	staq	bp|0			store new car
	spribp	ap|-2			store back new cons
sublis_change_exit:
	ldaq	ap|-2
	eppap	ap|-2
	ldx6	ab|-1,x7
	eax7	-2,x7
	tra	0,x6			it changed

sublis_car_changed:
	tsx6	sublis_cons		make new cons
	staq	bp|0			save car
	ldaq	ap|-2,*2			get old cdr
	spribp	ap|-2			store back new cons
	tsx6	sublis1			sublis the cdr
	nop	0			doesn't matter whether it changed
	staq	ap|-2,*2			store cdr
	tra	sublis_change_exit


sublis_cons:	" special cons routine for sublis, avoids munging aq, bb, x5,x4,
		" returns cons ptr in bp.
		" called by tsx6

	eppap	ap|2			got to save aq across ldac, gc
	staq	ap|-2			save regs
	sarbb	ab|-2,x7			KLUDGE
	sxl4	ab|-2,x7
	sxl6	ab|-1,x7
	tsx6	cons_alloc
	lxl6	ab|-1,x7
	lxl4	ab|-2,x7
	ldaq	ap|-2
	eppap	ap|-2			now how am I going to get out of this one?
	epbpbb	ap|0			KLUDGE
	adwpbb	ab|-2,x7			..	(note - due to hardware bug must be even address)
	eax2	2			x2 has to always have 2 in it.
	tra	0,x6

"	functions to deal with value cells.
"	boundp returns t if bound, nil if not (changed 9/12/74)
"	makunbound makes an atom unbound at this binding level -- usually top level.
"
	segdef	boundp
boundp:	eax4	0,ic		" remember retry address.
	ldaq	ap|-2		" load argument.
	cana	Atsym,dl
	tze	not_atsym-*,ic	" signal error.
	ldaq	ap|-2,*		" load value cell.
	tze	not_bound-*,ic	" return nil if not bound.
	ldaq	ab|true
	eppap	ap|-2		" pop off argument
	tra	retrn-*,ic	" else return t

not_bound: eppap	ap|-2	" pop off argument.
	tra	ret_nil-*,ic

	segdef	makunbound
makunbound: eax4	0,ic		" remember retry address.
	ldaq	ap|-2
	cana	Atsym,dl
	tze	not_atsym-*,ic
	fld	0,du		" zero is the unbound marker.
	staq	ap|-2,*
	ldaq	ap|-2
	eppap	ap|-2
	tra	retrn-*,ic
not_atsym:lda	bad_arg_correctable,dl
	cmpx4	boundp,du		" determine which function got error.
	tze	3,ic
	lcq	-fn_makunbound,dl	" and load correct error code
	tra	2,ic		" ..
	lcq	-fn_boundp,dl	" ..
	eax7	4,x7
	stx4	ab|-4,x7		"save return address.
	staq	ab|-2,x7
	tsx6	save_for_pl1_call-*,ic
	eppap	noargs-*,ic
	short_call <lisp_error_>|[lisp_error_]
	tsx6	pop_back_to_lisp-*,ic
	ldx4	ab|-2,x7		" get back retry address.
	eax7	-2,x7
	tra	0,x4		" and retry.
"
" maknum function, returns unique number.
	segdef	maknum

	equ	prime,338417659 " or maybe 2796203
	equ	maknum_initial,32
maknum:	eax7	2,x7
	stc1	lp|alloc_fault_word
	szn	<lisp_static_vars_>|[maknum_mask]
	tpl	maknum1
	ldq	maknum_initial*2,dl
	tsx6	locked_alloc
	spribp	<lisp_static_vars_>|[maknum_table_ptr]
	lcq	maknum_initial/2,dl
	stq	<lisp_static_vars_>|[maknum_left]
	stz	<lisp_static_vars_>|[maknum_next]
	ldq	maknum_initial*8-1,dl
	stq	<lisp_static_vars_>|[maknum_mask]
maknum1:	ldaq	ap|-2
	cana	Fixed+Float,dl
	tnz	maknumber
	alr	18		" move seg number to Q...
	lrs	18
maknumber:
	ars	6		" type field to low char of A
	staq	ab|-2,x7
	mpy	=v36/prime
	qrs	18
	qls	3
	eppbp	<lisp_static_vars_>|[maknum_table_ptr],*
	epplb	ab|-2,x7
loopmake: anq	<lisp_static_vars_>|[maknum_mask]
	cmpc	(pr,ql),(pr)
	desc9a	bp|0(3),5
	desc9a	lb|0(3),5
	tze	found_maknum

	cmpc	(pr,ql)
	desc9a	bp|0,4
	desc9a	0,0
	tze	maknewnum
	adq	8,dl
	tra	loopmake

found_maknum:
	qrs	2
	ldq	bp|0,ql
	lda	fixnum_type,dl
	staq	ab|-2,x7
	ldac	lp|alloc_fault_word
	ana	=o7,dl
	tze	nomakfault
	tsx6	alloc_got_fault

nomakfault:
	ldaq	ab|-2,x7
	eax7	-2,x7
	eppap	ap|-2
	tra	retrn


maknewnum:
	aos	<lisp_static_vars_>|[maknum_left]
	tpl	rehash
	eppbb	<lisp_static_vars_>|[maknum_next]
	aos	bb|0
	mlr	(pr),(pr,ql)
	desc9a	bb|0(1),3
	desc9a	bp|0,3
	mlr	(pr),(pr,ql)
	desc9a	lb|0(3),5
	desc9a	bp|0(3),5
	tra	found_maknum



rehash:
	ldq	<lisp_static_vars_>|[maknum_mask]
	qls	1	"double table size
	orq	1,dl
	stq	<lisp_static_vars_>|[maknum_mask]
	adq	1,dl
	qls	18-3
	stq	ab|-2,x7
	qrs	18-1
	tsx6	locked_alloc	"alloc while already locked.
	tsx6	maknum_rehash
	szn	lp|gc_blk_cntr
	tmi	maknum1

	" if overflowed gc limit, go to must_gc.

	eax0	maknum1
	stx0	lp|alloc_fault_word
	tsx4	must_gc
	tra	maknum1

" subroutine to rehash a maknum table into another.
" args: bp -> new table space.
"       <lisp_static_vars_>|[maknum_table_ptr] -> old table space.
"       ab|-2,x7 (DU) has size of old table in words.
"       <lisp_static_vars_>|[maknum_mask] has new table size in chars (-1)
" sets: maknum_table_ptr to point to new table.
"       maknum_left to trigger next rehash.

maknum_rehash:
	eppbb	<lisp_static_vars_>|[maknum_table_ptr],*
	spribp	<lisp_static_vars_>|[maknum_table_ptr]

	stz	ab|-1,x7	"count moves.
	eax0	0
rhsh_loop:cmpx0	ab|-2,x7
	tze	done_rhsh
	ldq	bb|0,x0	"check for stuff
	tze	skip_rhsh
	ldq	bb|1,x0
	mpy	=v36/prime
	qrs	18
	qls	3
rhshlp1:	anq	<lisp_static_vars_>|[maknum_mask]
	cmpc	(pr,ql)	"check for enpty slot
	desc9a	bp|0,4
	desc9a	0,0
	tze	insrt
	adq	8,dl
	tra	rhshlp1
insrt:	qrs	2
	eax1	0,ql
	ldaq	bb|0,x0
	staq	bp|0,x1
	aos	ab|-1,x7
skip_rhsh:eax0	2,x0
	tra	rhsh_loop
done_rhsh:
	lda	<lisp_static_vars_>|[maknum_mask]
	ada	1,dl
	ars	3
	sba	ab|-1,x7
	neg	0
	ars	1
	sta	<lisp_static_vars_>|[maknum_left]
	tra	0,x6

" pl1-callable subroutine to rehash maknum table. called by
" garbage collector and saver.  doesn't expect table to be hashed.
" args: <lsv>|[maknum_table_ptr] -> source table.
"       <lsv>|[maknum_mask] is old size in chars -1.
"       <lsv>|[maknum_left] is number of entries used in old table.
" sets: the above, so that maknum will work.

	entry	rehash_maknum
rehash_maknum:
	tsx6	switch_to_lisp
	eax7	2,x7
	ldq	<lisp_static_vars_>|[maknum_mask]
	adq	1,dl
	qls	18-2	" move to upper half, dividing by 4.
	stq	ab|-2,x7	" and put where rehash_maknum expects it.
	ldq	<lisp_static_vars_>|[maknum_left] " compute necessary ht size.
	qrs	4		" need next largest power of 2 > 32 and > number entries.
	eax0	4
nlgp2:	eax0	1,x0
	qrs	1
	tnz	nlgp2
	ldq	1,dl
	qls	4,x0	" (chars/word)*4*old_min_table_size
	sbq	1,dl
	stq	<lisp_static_vars_>|[maknum_mask]
	adq	1,dl
	qrs	2
	tsx6	words_alloc
	tsx6	maknum_rehash
	eax7	-2,x7
	tra	ret_to_pl1

	segdef	munkam
munkam:
	lda	ap|-2		" get  type.
	cmpa	fixnum_type,dl
	tnz	munfound
	lda	ap|-1
	ldq	<lisp_static_vars_>|[maknum_mask]
	tmi	munfound
	qrs	2
	eppbp	<lisp_static_vars_>|[maknum_table_ptr],*
mnkamlp:	cmpa	bp|-1,ql
	tze	mfound
	sbq	2,dl
	tpl	mnkamlp
munfound:
	ldaq	ab|nil
	tra	retrnmun	"should  probably err out here.



mfound:	als	6
	ana	lisp_ptr.type,dl
	cana	Fixed+Float,dl
	tnz	munnum
	eax7	2,x7
	lprpbp	bp|0,ql
	spribp	ab|-2,x7
	ora	ab|-2,x7
	ldq	ab|-1,x7
	eax7	-2,x7
	tra	retrnmun
munnum:	ora	=o47,dl
	ldq	bp|0,ql
retrnmun:
	eppap	ap|-2
	tra	retrn
"
	include	lisp_object_types
	include	lisp_stack_seg
	include 	lisp_error_codes
	include 	lisp_name_codes
	include	stack_header
	include 	stack_frame
	end
