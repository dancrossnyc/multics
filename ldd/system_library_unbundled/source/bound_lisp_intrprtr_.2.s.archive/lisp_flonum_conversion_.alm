" **************************************************************
" *                                                            *
" * Copyright, (C) Massachusetts Institute of Technology, 1974 *
" *                                                            *
" **************************************************************
   	name lisp_flonum_conversion_

" This routine converts flonums to character string s for the benefit of lisp_print_
" It can probably be replaced by numeric_to_ascii_ when that routine is installed.
" Written 74.03.18 by DAM

" This routine is called with one argument, as follows
"    1 argument_structure aligned,
"      2 flonum float bin(27)		number to be converted
"      2 bufp pointer unaligned	-> char(76) varying string
"      2 temps_for_this_routine,
"         	3 mantissa fixed bin(27)
"	3 exponent fixed bin(8)
"	3 dec_temp float decimal(10)
"	3 dec_exp float decimal(10)
"	3 dbl_temp fixed bin(71)

	equ	flonum,0
	equ	bufp,1
	equ	mantissa,2
	equ	exponent,3
	equ	dec_temp,4
	equ	dec_exp,7
	equ	dbl_temp,10

	equ	varying_string_length,0
	equ	varying_string_chars,1


zero_table:	" TCT table for looking for zeroes

	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	9/0,27/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1
	vfd	36/-1

minus_sign: aci	/-/

zero_point_zero:
	aci	/0.0/

a_zero:	aci	/0/

a_dot:	aci	/./

e_plus_e_minus:  aci  /e+e-/

two_to_the_64:
	aci	/18446744073709551616/	20. characters

	segdef	lisp_flonum_conversion_

lisp_flonum_conversion_:

	eppap	ap|2,*		-> argument structure
	fld	ap|flonum		pick up argument
	tze	special_case_zero	only needed because of bug in MVN instruction
	ars	8		explode the flonum
	sta	ap|mantissa
	ste	ap|exponent
	btd	(pr),(pr)		convert mantissa to decimal
	desc9a	ap|mantissa,4
	desc9ls	ap|dec_temp,11
	mvn	(pr),(pr)		better float it right away
	desc9ls	ap|dec_temp,11
	desc9fl	ap|dec_temp,12
	lda	ap|exponent
	ars	36-8
	sba	27,dl
	sta	ap|exponent		save sign
	tpl	2,ic
	neg	0
g0001:	cmpa	64,dl			too big to shift?
	tmi	g0002			no, go ahead
	sba	64,dl			yes, do 64 powers sperately
	szn	ap|exponent
	tmi	g0003
	mp2d	(),(pr),round
	desc9ns	two_to_the_64,20,0
	desc9fl	ap|dec_temp,12
	tra	g0001

g0003:	dv2d	(),(pr),round
	desc9ns	two_to_the_64,20,0
	desc9fl	ap|dec_temp,12
	tra	g0001

g0002:	eax1	0,al
	lda	0,dl
	ldq	1,dl
	lls	0,x1
	staq	ap|dbl_temp
	btd	(pr),(pr)
	desc9a	ap|dbl_temp,8
	desc4ns	ap|dec_exp,40	clobber 5 words, 3 of which are dec_exp, 2 dbl_temp
	mvn	(pr),(pr),round
	desc4ns	ap|dec_exp,40
	desc9fl	ap|dec_exp,12
	szn	ap|exponent
	tmi	neg_exponent
pos_exponent:
	mp2d	(pr),(pr),round
	desc9fl	ap|dec_exp,12
	desc9fl	ap|dec_temp,12
	tra	got_dec_num

neg_exponent:
	dv2d	(pr),(pr),round
	desc9fl	ap|dec_exp,12
	desc9fl	ap|dec_temp,12

got_dec_num:

""" Now round to 8 digits and decide whether it needs E format or will fit in F format

	mvn	(pr),(pr),round
	desc9fl	ap|dec_temp,12
	desc9fl	ap|dec_temp,10

	" scan out leading zeroes, if any

	tct	(pr),()
	desc9a	ap|dec_temp(1),8
	arg	zero_table
	arg	ap|dbl_temp
	lda	ap|dbl_temp
	ana	-1,dl
	ttf	2,ic
	lda	7,dl			if all zero, only flush first 7 zeroes
	sta	ap|dbl_temp

	ldq	8,dl
	sbq	ap|dbl_temp
	mlr	(pr,al,rl),(pr),fill(060)
	desc9a	ap|dec_temp(1),ql
	desc9a	ap|dec_temp(1),8

	lprpbp	ap|bufp			set up to emit stuff
	eax7	0			offset in varying string of next char

	szn	ap|mantissa
	tpl	it_is_positive
	mlr	(),(pr,x7)		put out minus sign
	desc9a	minus_sign,1
	desc9a	bp|varying_string_chars,1
	eax7	1,x7
it_is_positive:

	lda	ap|dec_temp+2		get decimal exponent
	als	10
	ars	36-8
	cmpa	=-8
	tmi	small_exponent

	cmpa	ap|dbl_temp			exponent too large?
	tpnz	E_format

F_format:	ada	ap|dbl_temp		- number of digits to right of decimal point
	sta	ap|exponent
	lda	8,dl			get number digits to left of point
	ada	ap|exponent
	tze	f3
	mlr	(pr,rl),(pr,x7,rl)
	desc9a	ap|dec_temp(1),al
	desc9a	bp|varying_string_chars,al
	eaa	0,al			:= adx7 a
	sta	ap|dbl_temp
	adx7	ap|dbl_temp
	tra	f2

f3:	mlr	(),(pr,x7)		no digits to left, supply a zero
	desc9a	a_zero,1
	desc9a	bp|varying_string_chars,1
	eax7	1,x7

f2:	mlr	(),(pr,x7)
	desc9a	a_dot,1			put decimal point
	desc9a	bp|varying_string_chars,1
	eax7	1,x7

	lca	ap|exponent		digits to right of point
	tze	f4			none, supply a zero.
	eax1	0,al
	lda	8,dl
	ada	ap|exponent		number digits need to be skipped.
	tctr	(pr,al,rl),()		truncate trailing zeroes
	desc9a	ap|dec_temp(1),x1
	arg	zero_table
	arg	ap|dbl_temp
	lxl2	ap|dbl_temp
	ttf	2,ic
	eax2	-1,x1			leave at least one zero
	stx2	ap|dbl_temp			x2 = number tr z's to suppress
	sbx1	ap|dbl_temp
	mlr	(pr,al,rl),(pr,x7,rl)
	desc9a	ap|dec_temp(1),x1
	desc9a	bp|varying_string_chars,x1
	stx1	ap|dbl_temp
	adx7	ap|dbl_temp		= adx7 x1
	tra	f5

f4:	mlr	(),(pr,x7)
	desc9a	a_zero,1
	desc9a	bp|varying_string_chars,1
	eax7	1,x7

f5:
done_update_string_length:
	stz	bp|varying_string_length
	sxl7	bp|varying_string_length
	short_return

small_exponent:	" probably has to go in E format, but could use F format if trailing zeroes

	tctr	(pr),()
	desc9a	ap|dec_temp(2),7
	arg	zero_table
	arg	ap|dbl_temp+1
	sta	ap|exponent		present exponent
	ada	8,dl			- number of leading zroes must have
	eax2	0
	stx2	ap|dbl_temp+1		:= number leading zeroes can get
	asa	ap|dbl_temp+1		set indicators from sum then throw away.
	tmi	E_format_after_all		need more than can have

" we can use F format just by putting in some leading zeroes instead of trailing zeroes

	eax2	8,al			:= number of non-lz characters
	mrl	(pr,rl),(pr),fill(060)	insert leading zeroes
	desc9a	ap|dec_temp(1),x2
	desc9a	ap|dec_temp(1),8
	neg	0
	ada	ap|exponent		offset exponent by amount of shift
	tra	F_format

E_format_after_all:
	lda	ap|exponent

E_format:
" a contains decimal exponent.  ap|dbl_temp contains count of leading zeroes
	sba	ap|dbl_temp		correct decimal exponent from lz suppr
	ada	7,dl			allow for decimal point being after first digit.
" a now has the exponent we want to print after the number
	sta	ap|exponent

	tctr	(pr),()
	desc9a	ap|dec_temp(1),8
	arg	zero_table
	arg	ap|dbl_temp
	lda	ap|dbl_temp
	ana	-1,dl
	ttf	2,ic
	lda	7,dl			if all zero, only use 7 zeroes.

	mlr	(pr),(pr,x7),fill(056)	move first digit and decimal point out
	desc9a	ap|dec_temp(1),1
	desc9a	bp|varying_string_chars,2
	eax7	2,x7

	neg	0			put number of trailing non-zeroes in au
	eaa	7,al
	tze	e2
	mlr	(pr,rl),(pr,x7,rl)
	desc9a	ap|dec_temp(2),au
	desc9a	bp|varying_string_chars,au
	sta	ap|dbl_temp
	adx7	ap|dbl_temp
	tra	e3

e2:	mlr	(),(pr,x7)
	desc9a	a_zero,1
	desc9a	bp|varying_string_chars,1
	eax7	1,x7

e3:

""" Now put out the exponent.

	eax2	0
	szn	ap|exponent
	tpl	2,ic
	eax2	2
	mlr	(x2),(pr,x7)
	desc9a	e_plus_e_minus,2
	desc9a	bp|varying_string_chars,2
	eax7	2,x7

	btd	(pr),(pr,x7)
	desc9a	ap|exponent,4
	desc9ns	bp|varying_string_chars,2	2 digits of exponent.
	eax7	2,x7
	tra	done_update_string_length



special_case_zero:
	lprpbp	ap|bufp
	mlr	(),(pr)
	desc9a	zero_point_zero,3
	desc9a	bp|varying_string_chars,3
	ldq	3,dl
	stq	bp|varying_string_length
	short_return

	end
