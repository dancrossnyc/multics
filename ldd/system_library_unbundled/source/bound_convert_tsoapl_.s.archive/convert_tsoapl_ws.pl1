/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style3 */
convert_tsoapl_ws:
ctw:
     procedure;

/* Written by Bernard Greenberg, from display_aplsv_ws.pl1, 10/77 */
/* Modified 771121 by PG to cleanup error handling and aborting. */
/* Modified 771207 by PG to convert library_number and man_number */
/* Modified 771209 by PG to make vput quick */
/* Modified 771212 by PG to fix bug that was reversing vectors in functions, and speed up function
   converter by processing only lines backwards, not the whole function. */
/* Modified 771230 by PG to fix bug in which we forgot to use cv_fb17 on a 360 number. */
/* Modified 771230 by PG to fix bug in fix of 771212...integers and floats were getting reversed. */
/* Modified 781005 by PG to fix bug 347 in declaration of function line offsets, and to fix bug 346 whereby symbol_bead
   for groups never pointed to the group_bead!
   Modified 800212 by PG to fix 450 (unknown symbol types got counted in num_symbols, but not converted).
   Modified 800227 by PG to add -relock_functions control argument.
   Modified 840907 by C Spitzer. correct length of format string passed to dump_segment_
*/

/* Ideas:
   1. All error messages should include name of ws.
   2. Option to suppress "too small/too large" msg.
   3. "Too small/too large" msg should give context (var name or fcn line number).
*/

/* automatic */

dcl	arg_len		fixed bin (21),
	arg_number	fixed bin,
	arg_ptr		ptr,
	bitcount		fixed bin (24),
	code		fixed bin (35),
	curr_component	fixed bin,
	curr_seglen	fixed bin (18),
	dname		char (168),
	ename		char (32),
	ename1		char (32),
	ename2		char (32),
	fcbp		ptr,
	idx		fixed bin,
	inpath_arg_len	fixed bin (21),
	inpath_arg_ptr	ptr,
	num_symbols	fixed bin,
	number_of_ptrs	fixed bin,
	outpath_arg_len	fixed bin (21),
	outpath_arg_ptr	ptr,
	pathx		fixed bin,
	q		(3) ptr init ((3) null ()),
	qr13stk		fixed bin,
	qsymbot		fixed bin,
	relock_functions	bit (1) aligned,
	saved_bead_table_ptr
			ptr,
	segptrs		(0:15) ptr,
	s360_trtblptr	ptr,
	suspbarf		bit (1) aligned,
	sx		fixed bin,
	symbolx		fixed bin,
	symtab_len	fixed bin,
	ten_digits	picture "(9)z9",
	this_rho		fixed bin,
	type		bit (9) aligned;

/* internal static */

dcl	MaxSegSize	fixed binary (21) internal static initial (65535);
						/* used to be in apl_number_data.incl.pl1 */

/* based */

dcl	arg_string	char (arg_len) based (arg_ptr),
	inpath		char (inpath_arg_len) based (inpath_arg_ptr),
	outpath		char (outpath_arg_len) based (outpath_arg_ptr),
	s360_trtbl	(0:99999) fixed bin (21) based (s360_trtblptr),
	saved_bead_table	(saved_bead_count) ptr unal based (saved_bead_table_ptr);

/* builtins */

dcl	(abs, addr, addrel, baseno, baseptr, bin, binary, bit, copy, divide, fixed, length, ltrim, maxlength, mod, null,
	ptr, rel, size, string, substr, unspec)
			builtin;

/* conditions */

dcl	cleanup		condition;

/* entries */

dcl	com_err_		entry options (variable),
	(get_temp_segments_, release_temp_segments_)
			entry (char (*), (*) ptr, fixed bin (35)),
	convert_date_to_binary_
			entry (char (*), fixed bin (71), fixed bin (35)),
	apl_zcode_to_ascii_ entry (char (*), char (*)),
	dump_segment_	entry (ptr, ptr, fixed bin, fixed bin, fixed bin, bit (*)),
	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	delete_$path	entry (char (*), char (*), bit (6), char (*), fixed bin (35)),
	expand_pathname_$add_suffix
			entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	get_equal_name_	entry (char (*), char (*), char (32), fixed bin (35)),
	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
	hcs_$terminate_noname
			entry (ptr, fixed bin (35)),
	hcs_$truncate_seg	entry (ptr, fixed bin (18), fixed bin (35)),
	ioa_		entry options (variable),
	ioa_$nnl		entry options (variable),
	ioa_$rsnnl	entry options (variable),
	msf_manager_$open	entry (char (*), char (*), ptr, fixed bin (35)),
	msf_manager_$get_ptr
			entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35)),
	msf_manager_$adjust entry (ptr, fixed bin, fixed bin (24), bit (3), fixed bin (35)),
	msf_manager_$close	entry (ptr);

/* external static */

dcl	(
	error_table_$badopt fixed bin (35),
	error_table_$too_many_args
			fixed bin (35),
	iox_$user_output	ptr
	)		external static;

/* internal static */

dcl	myname		char (17) internal static initial ("convert_tsoapl_ws") options (constant);
dcl	EQUALS		char (1) unal internal static initial ("=") options (constant);
dcl	NL		char (1) varying internal static options (constant) init ("
");

/* include files */

%include apl_number_data;
%include tsoapl_dcls;

/* program */

	pathx = 0;
	outpath_arg_ptr = addr (EQUALS);
	outpath_arg_len = length (EQUALS);
	relock_functions = "0"b;

	arg_number = 1;
	call cu_$arg_ptr (arg_number, arg_ptr, arg_len, code);

	do while (code = 0);
	     if substr (arg_string, 1, 1) ^= "-"
	     then do;
		     go to pathcase (pathx);

pathcase (0):
		     inpath_arg_ptr = arg_ptr;
		     inpath_arg_len = arg_len;
		     pathx = pathx + 1;
		     go to end_pathcase;

pathcase (1):
		     outpath_arg_ptr = arg_ptr;
		     outpath_arg_len = arg_len;
		     pathx = pathx + 1;
		     go to end_pathcase;

pathcase (2):
		     call com_err_ (error_table_$too_many_args, myname, "Maximum of 2 pathnames permitted.");
		     go to usage;

end_pathcase:
		end;
	     else if arg_string = "-relock_functions" | arg_string = "-relock_function"
	     then relock_functions = "1"b;
	     else if arg_string = "-unlock_functions" | arg_string = "-unlock_function"
	     then relock_functions = "0"b;
	     else do;
		     call com_err_ (error_table_$badopt, myname, "^a", arg_string);
		     return;
		end;

	     arg_number = arg_number + 1;
	     call cu_$arg_ptr (arg_number, arg_ptr, arg_len, code);
	end;

	if pathx = 0
	then do;
usage:
		call com_err_ (code, myname, "Usage: ^a inpath {outpath} {-relock_functions|-unlock_functions}", myname);
		return;
	     end;

	call expand_pathname_$add_suffix (inpath, "sv.tsoapl", dname, ename, code);
	if code ^= 0
	then do;
		call com_err_ (code, myname, "^a", inpath);
		return;
	     end;

	call hcs_$initiate_count (dname, ename, "", bitcount, 0, aplsv_ws_ptr, code);
	if aplsv_ws_ptr = null
	then do;
		call com_err_ (code, myname, "^a>^a", dname, ename);
		return;
	     end;

	call expand_pathname_$add_suffix (outpath, "sv.apl", dname, ename1, code);
	if code ^= 0
	then do;
		call com_err_ (code, myname, outpath);
		go to termin_finale;
	     end;

	call get_equal_name_ ((ename), ename1, ename2, code);
	if code ^= 0
	then do;
		call com_err_ (code, myname, arg_string);
		go to termin_finale;
	     end;

	call msf_manager_$open (dname, ename2, fcbp, code);
	if fcbp = null
	then do;
		call com_err_ (code, myname, "^a>^a", dname, ename2);
		go to termin_finale;
	     end;

	saved_bead_pointer = null ();
	curr_component = -1;
	curr_seglen = MaxSegSize + 2;
	saved_ws_info_pointer = allocate (size (saved_ws_info));
						/* Get ball rolling */

/* Get 360 symbol table parameters */

	qr13stk = cvb36f32 (aplsv_ws.qr13stk) / 4;
	qsymbot = cvb36f32 (aplsv_ws.qsymbot) / 4;

	aplsv_symtab_ptr = byteptr (aplsv_ws.qsymbot);
	symtab_len = (qr13stk - qsymbot) / size (symtbe);

/* Allocate bead translation table */

	on cleanup call release_temp_segments_ (myname, q, (0));
	call get_temp_segments_ (myname, q, (0));
	saved_bead_table_ptr = q (1);

/* Set up 360 translate table */

	s360_trtblptr = q (2);

/* Count number of good symbols & allocate saved bead table */

	suspbarf = "0"b;
	num_symbols = 0;
	do sx = 1 to symtab_len;
	     type = aplsv_symtab (sx).type;

	     if type ^= UNUSED_TYPE
	     then if (type = VARIABLE_TYPE) | (type = FUNCTION_TYPE) | (type = FUNCTIONZ_TYPE) | (type = GROUP_TYPE)
		then num_symbols = num_symbols + 1;
		else if (type = SYSTEM_VAR_TYPE) | (type = SYSTEM_FCN_TYPE)
		then ;
		else if (type = SUSP_TEMPVAR_TYPE)
		then do;
			if ^suspbarf
			then call ioa_ ("^a: Warning: suspended functions and values of ^a not being restored.", myname,
				ename);

			suspbarf = "1"b;
		     end;
		else call report_bad_symbol (addr (aplsv_symtab (sx)));
	end;

	symbolx = 0;
	saved_bead_count = num_symbols;

/* Process good symbols */

	do sx = 1 to symtab_len;
	     type = aplsv_symtab (sx).type;

	     if type ^= UNUSED_TYPE
	     then if (type = VARIABLE_TYPE) | (type = FUNCTION_TYPE) | (type = FUNCTIONZ_TYPE) | (type = GROUP_TYPE)
		then call process_symbol (sx);
	end;

/* Set up the parse frame and null latent expresson */

	number_of_ptrs = 0;
	saved_frame_pointer = allocate (size (saved_pf));
	saved_pf.current_line_number = 1;
	saved_pf.parse_frame_type = 1;		/* SUSPENDED FRAME */
	saved_pf.last_parse_frame_ptr = null;
	saved_ws_info.current_parse_frame_ptr = vp_ptr (saved_frame_pointer);

	number_of_dimensions = 1;
	saved_bead_pointer = allocate (size (saved_value_bead));
	saved_ws_info.latent_expression = beadno (vp_ptr (saved_bead_pointer));
	string (saved_value_bead.type) = character_value_type;
	saved_value_bead.size = bit (fixed (size (value_bead), 18), 18);
	saved_value_bead.total_data_elements = 0;
	saved_value_bead.rhorho = 1;
	saved_value_bead.data_pointer = null;
	saved_value_bead.rho (1) = 0;

/* Allocate the master bead table */

	bead_description_pointer = allocate (size (bead_description_table));
	saved_ws_info.bead_table_pointer = vp_ptr (bead_description_pointer);
	bead_description_table.bead_pointer (*) = saved_bead_table (*);

/* Fill in the workspace header. */

	saved_ws_info.save_version = 4;
	saved_ws_info.lock = "";
	saved_ws_info.highest_segment = curr_component;
	saved_ws_info.total_beads = saved_bead_count;
	saved_ws_info.number_of_symbols = num_symbols;
	saved_ws_info.integer_fuzz = 1.110223e-16;	/* Multics default */
	saved_ws_info.fuzz = 1e-13;
	ten_digits = cvb36f32 (aplsv_ws.library_number);
	saved_ws_info.wsid = ltrim (ten_digits) || " " || cv_ascii (substr (aplsv_ws.wsname.chars, 1, aplsv_ws.wsname.len));
	saved_ws_info.float_index_origin = bin (aplsv_ws.index_origin, 17);
	saved_ws_info.random_link = cvb36f32 (aplsv_ws.seed);
	call convert_date_to_binary_ (cv_ascii (aplsv_ws.date_saved) || " 00:00", saved_ws_info.time_saved, (0));
	saved_ws_info.time_saved = saved_ws_info.time_saved + fixed (1e6 * cvb36f32 (aplsv_ws.time_saved) / 3e2, 71);
	saved_ws_info.index_origin = bin (aplsv_ws.index_origin, 17);
	saved_ws_info.digits = cvb36f32 (aplsv_ws.digits);
	saved_ws_info.width = bin (cv_b18 (aplsv_ws.printing_width), 16);
	saved_ws_info.user_number = cvb36f32 (aplsv_ws.man_number);
	ten_digits = saved_ws_info.user_number;
	saved_ws_info.user_name = "TSO user " || ltrim (ten_digits);

/* All done, close the workspace and quit */

	call msf_manager_$adjust (fcbp, curr_component, curr_seglen * 36, "111"b, code);
	if code = 0
	then call msf_manager_$close (fcbp);
	else call com_err_ (code, myname, "Problem in closing msf");
	call release_temp_segments_ (myname, q, (0));

termin_finale:
	call hcs_$terminate_noname (aplsv_ws_ptr, code);
	return;

abort:
	call release_temp_segments_ (myname, q, (0));
	call hcs_$terminate_noname (aplsv_ws_ptr, code);
	call msf_manager_$close (fcbp);
	call delete_$path (dname, ename2, "100101"b, myname, code);
	return;

process_symbol:
     procedure (bv_symdex);

/* parameters */

dcl	bv_symdex		fixed bin;

/* automatic */

dcl	bit72		bit (72) aligned;
dcl	code		bit (9);
dcl	cx		fixed bin;
dcl	data_ptr		ptr;
dcl	dtype		fixed bin;
dcl	elmtct		fixed bin;
dcl	f17un		fixed bin (17) unaligned;
dcl	float_temp	char (100) varying;
dcl	floatbin63	float bin (63);
dcl	fx35		fixed bin (35);
dcl	(j, k)		fixed bin;
dcl	line		char (3000) varying;
dcl	mulsym_ptr	ptr;
dcl	nlines		fixed bin;
dcl	space_state	bit (1);
dcl	sx		fixed bin;
dcl	ten_digits	picture "(9)z9";
dcl	varsymptr		ptr;
dcl	vtemp		char (1000) varying;

/* based */

dcl	based_elmtct_charcons
			char (elmtct) based (addr (fun_code.code (cx)));
dcl	cxa		(0:99999) bit (36) aligned based (aplsv_ws_ptr);
dcl	funexp		char (262143) based (q (3)) varying;

/* program */

	sx = bv_symdex;
	symtbep = addr (aplsv_symtab (sx));
	mulsym_ptr = intern_360_sym (symtbep);
	aplsv_value_ptr = byteptr ("000"b3 || symtbe.value_offset);

	if symtbe.type = VARIABLE_TYPE
	then do;
		if symtbe.value_offset = "000000"b3
		then return;			/* intern did all work */
		number_of_dimensions = cv_fb17 (aplsv_value.rhorho_x4) / 4;
		array_ptr = addr (aplsv_value.rho (number_of_dimensions + 1));
		saved_bead_pointer = allocate (size (saved_value_bead));
		mulsym_ptr -> saved_sb.meaning_pointer = beadno (vp_ptr (saved_bead_pointer));

		saved_value_bead.rhorho = number_of_dimensions;
		data_elements = 1;
		do idx = 1 to number_of_dimensions;
		     this_rho = binary (pack (aplsv_value.rho (idx)));
		     saved_value_bead.rho (idx) = this_rho;
		     data_elements = data_elements * this_rho;
		end;
		saved_value_bead.total_data_elements = data_elements;
		dtype = binary (aplsv_value.type, 9);

(subrg):
		go to data_type (dtype);

data_type (1):
		data_ptr = allocate (size (saved_boolean_datum));
		do j = 1 to data_elements / 8;
		     substr (data_ptr -> saved_boolean_datum, j * 8 - 7, 8) = bit_array.data (j);
		end;
		j = mod (data_elements, 8);
		if j ^= 0
		then substr (data_ptr -> saved_boolean_datum, data_elements - j + 1) = bit_array.tail;
		saved_general_bead.size = bit (fixed (size (saved_boolean_datum), 18), 18);
		string (saved_general_bead.type) = zero_or_one_value_type;
		go to end_data_type;

data_type (2):
		curr_seglen = curr_seglen + mod (curr_seglen, 2);
		data_ptr = allocate (size (numeric_datum));
		string (saved_general_bead.type) = integral_value_type;
		saved_general_bead.size = bit (fixed (size (numeric_datum) + 1, 18), 18);
		do idx = 1 to data_elements;
		     data_ptr -> numeric_datum (idx - 1) = binary (pack (fixed_array (idx)));
		end;
		go to end_data_type;

data_type (3):
		curr_seglen = curr_seglen + mod (curr_seglen, 2);
		data_ptr = allocate (size (numeric_datum));
		string (saved_general_bead.type) = numeric_value_type;
		saved_general_bead.size = bit (fixed (size (numeric_datum) + 1, 18), 18);
		do idx = 1 to data_elements;
		     data_ptr -> numeric_datum (idx - 1) = cv_float (float_array (idx));
		end;
		go to end_data_type;

data_type (4):
		data_ptr = allocate (size (character_data_structure));
		data_ptr -> character_string_overlay = cv_ascii (char_array);
		saved_general_bead.size = bit (fixed (size (character_string_overlay), 18), 18);
		string (saved_general_bead.type) = character_value_type;
end_data_type:
		saved_general_bead.size = bit (fixed (size (value_bead) + fixed (saved_general_bead.size, 18), 18), 18);
		saved_value_bead.data_pointer = vp_ptr (data_ptr);
	     end;
	else if symtbe.type = FUNCTION_TYPE | symtbe.type = FUNCTIONZ_TYPE
	then do;
		aplsv_function_ptr = aplsv_value_ptr;

		nlines = cv_fb17 (aplsv_function.nlines);

		funexp = "";
		do idx = 0 to nlines - 1;		/* the lines are built top-down, but each line is built right-to-left */
		     line = NL;
		     if idx = 0
		     then code_ptr = byteptr ("000"b3 || aplsv_function.header_offset);
		     else code_ptr = byteptr ("000"b3 || aplsv_function.line (idx).offset);
		     code_len = cv_fb17 (fun_code.size);
		     space_state = "0"b;		/* Assume operator */
		     do cx = code_len to 1 by -1;
			code = fun_code.code (cx);

			if substr (code, 9, 1) = "1"b /* short syllable */
			then do;

				if code = "003"b3
				then ;		/* unl sta */
				else if code = "005"b3
				then ;		/* labeled sta */
				else if code = CECONST | code = CBCONST | code = CICONST | code = CFCONST
					| code = CCCONST
				then do;
					if code = CCCONST
					then space_state = "0"b;
					else do;
						if space_state
						then call vput (" ");
						space_state = "1"b;
					     end;
					elmtct = fixed (get_packs (2), 18);
					if code = CCCONST
					then do;	/* chars */
						cx = cx - elmtct;
						if fun_code.code (cx - 1) = "46"b4 || "1"b
						/* lamp/comment */
						then vtemp = cv_ascii (based_elmtct_charcons);
						else vtemp = requote (cv_ascii (based_elmtct_charcons));

						call vput (vtemp);
					     end;
					else if code = CICONST
					then do;	/* INTEGER */
						vtemp = "";
						do j = 1 to elmtct;
						     fx35 = cvf32 (get_packs (4));
						     ten_digits = abs (fx35);

						     if fx35 >= 0
						     then vtemp = ltrim (ten_digits);
						     else do;
							     vtemp = QUpperMinus;
							     vtemp = vtemp || ltrim (ten_digits);
							end;

						     if j ^= 1
						     then vtemp = vtemp || " ";

						     call vput (vtemp);
						end;
					     end;
					else if code = CBCONST
					then do;	/* BOOLEAN */
						j = cx - divide (elmtct + 7, 8, 17, 0);
						vtemp = "";
						do k = 1 to elmtct;
						     if mod (k, 8) = 1
						     then do;
							     code = fun_code.code (j);
							     j = j + 1;
							end;
						     if k ^= 1
						     then vtemp = vtemp || " ";

						     if substr (code, 2, 1) = "0"b
						     then vtemp = vtemp || "0";
						     else vtemp = vtemp || "1";
						     code = substr (copy (code, 1), 2);
						end;
						call vput (vtemp);
						cx = cx - divide (elmtct + 7, 8, 17, 0);
					     end;
					else if code = CFCONST | code = CECONST
					then do;	/* FLOAT */
						if code = CECONST
						then call com_err_ (0, myname,
							"ECONST encountered. Please call Bernard Greenberg, 617-492-9300"
							);
						vtemp = "";
						do j = 1 to elmtct;
						     bit72 = get_packs (8);
						     floatbin63 = cv_floatx (bit72);
						     call ioa_$rsnnl ("^[^e^;^f^]", float_temp, 0, code = CECONST,
							abs (floatbin63));

						     if floatbin63 >= 0e0
						     then vtemp = float_temp;
						     else do;
							     vtemp = QUpperMinus;
							     vtemp = vtemp || float_temp;
							end;

						     if j ^= 1
						     then vtemp = vtemp || " ";

						     call vput (vtemp);
						end;
					     end;
				     end;
				else if code = "007"b3
				then ;		/* dummy */
				else do;		/* zcode operator */
					call vput (cv_asciich (substr (code, 1, 8)));
					space_state = "0"b;
				     end;
			     end;
			else if code = "000"b3 & fun_code.code (cx - 1) = "000"b3
			then cx = cx - 1;
			else do;			/* long syllable */
				if space_state = "1"b
				then call vput (" ");
				unspec (f17un) = "11"b || substr (fun_code.code (cx - 1), 2) || substr (code, 2);
				cx = cx - 1;
				vtemp = get_symname (addr (cxa (qr13stk + f17un)));
				call vput (vtemp);
				space_state = "1"b; /* name/num */
			     end;
		     end;
		     funexp = funexp || line;
		end;
		data_elements = length (funexp);
		saved_bead_pointer = allocate (size (saved_fb));
		mulsym_ptr -> saved_sb.meaning_pointer = beadno (vp_ptr (saved_bead_pointer));
		string (saved_general_bead.type) = function_type;
		saved_general_bead.size = bit (fixed (size (function_bead), 18), 18);

		if relock_functions & (symtbe.type = FUNCTIONZ_TYPE)
		then saved_fb.class = 1;		/* locked */
		else saved_fb.class = 0;		/* unlocked */
		saved_fb.text_length = data_elements;
		saved_fb.text = funexp;
	     end;
	else if symtbe.type = GROUP_TYPE
	then do;
		aplsv_group_ptr = aplsv_value_ptr;
		total_members = cv_fb17 (aplsv_group.count);
		saved_bead_pointer = allocate (size (saved_gb));
		mulsym_ptr -> saved_sb.meaning_pointer = beadno (vp_ptr (saved_bead_pointer));
		saved_general_bead.size = bit (fixed (size (group_bead) + total_members, 18), 18);
						/* UGH KLUDGE THANK LAMSON */
		string (saved_general_bead.type) = group_type;
		saved_gb.number_of_members = total_members;
		do idx = 1 to total_members;
		     varsymptr = byteptr (aplsv_group.symbp (idx));
		     mulsym_ptr = intern_360_sym (varsymptr);
		     saved_gb.member (idx) = s360_trtbl (fixed (rel (varsymptr), 18));
		end;
	     end;
	return;

/* Internal procedures for process_symbol */

vput:
     procedure (cs);

/* parameters */

dcl	cs		char (*) varying;

/* program */

	if length (line) + length (cs) > maxlength (line)
	then do;
		call ioa_ ("^a: Buffer size exceeded.", myname);
		return;
	     end;

	line = cs || line;

     end vput;

get_packs:
     proc (n) returns (bit (*));

dcl	n		fixed bin;

dcl	btemp		bit (100) varying;
dcl	j		fixed bin;

	btemp = ""b;
	do j = cx - n to cx - 1 by 1;
	     btemp = btemp || substr (fun_code.code (j), 2, 8);
	end;
	cx = cx - n;
	return (btemp);

     end get_packs;

     end process_symbol;

allocate:
     proc (sz) returns (ptr);				/* Master allocator */

dcl	sz		fixed bin;

	if curr_seglen + sz > MaxSegSize + 1
	then do;
		curr_component = curr_component + 1;
		call msf_manager_$get_ptr (fcbp, curr_component, "1"b, segptrs (curr_component), (0), code);
		if segptrs (curr_component) = null
		then do;
			call com_err_ (code, myname, "Getting comp. #^d of msf.", curr_component);
			go to abort;
		     end;
		call hcs_$truncate_seg (segptrs (curr_component), 0, code);
		if code ^= 0
		then do;
			call com_err_ (code, myname, "Truncating new ws seg #^d.", curr_component);
			go to abort;
		     end;
		curr_seglen = 0;
	     end;
	curr_seglen = curr_seglen + sz;
	return (ptr (segptrs (curr_component), curr_seglen - sz));
     end;

vp_ptr:
     proc (pt) returns (ptr);				/* cv ptr in CURRENT SEGMENT to virtual */

dcl	pt		ptr;

	return (ptr (baseptr (curr_component), rel (pt)));
     end;

uvp_ptr:
     proc (pt) returns (ptr);				/* Unvirtualize ptr */

dcl	pt		ptr;

	return (ptr (segptrs (binary (baseno (pt), 15)), rel (pt)));
     end;

beadno:
     proc (vp) returns (fixed bin (21));		/* ASSIGN bead number */

dcl	vp		ptr;

	saved_bead_count = saved_bead_count + 1;
	saved_bead_table (saved_bead_count) = vp;
	return (saved_bead_count);

beadno$symbol:
     entry (vp) returns (fixed bin (21));

	symbolx = symbolx + 1;
	saved_bead_table (symbolx) = vp;
	return (symbolx);

     end;

get_symname:
     proc (a_pt) returns (char (*));

dcl	(pt, a_pt)	ptr;

	pt = a_pt;
	if pt -> symtbe.size >= 4
	then pt = addrel (byteptr ("000"b3 || pt -> symtbe.name_or_offset), 1);
	return (cv_ascii (pt -> symbol_struc.name));

     end;

requote:
     proc (instring) returns (char (*));

/* How difficult is PL/I for character string manipulation */
/* B. Greenberg 5/31/77 */


dcl	instring		char (*);
dcl	outstringl	fixed bin (21);
dcl	QUOTE		char (1) static init ("'") options (constant);
dcl	QUOTEQUOTE	char (2) static init ("''") options (constant);
dcl	outstring		char (2 * length (instring) + 2);
dcl	(i, j)		fixed bin (21);

dcl	(index, length, substr)
			builtin;

	outstringl = 1;
	substr (outstring, 1, 1) = QUOTE;
	i = 1;
nextj:
	j = index (substr (instring, i), QUOTE);
	if j = 0
	then do;
		substr (outstring, outstringl + 1, length (instring) - i + 1) = substr (instring, i);
		outstringl = outstringl + length (instring) - i + 2;
		substr (outstring, outstringl, 1) = QUOTE;
		return (substr (outstring, 1, outstringl));
	     end;
	substr (outstring, outstringl + 1, j - 1) = substr (instring, i, j - 1);
	outstringl = outstringl + j;
	substr (outstring, outstringl, 2) = QUOTEQUOTE;
	outstringl = outstringl + 1;
	i = i + j;
	go to nextj;
     end;

cv_asciich:
     proc (zc) returns (char (1) varying);

dcl	zc		bit (8);
dcl	asc		char (1);

	unspec (asc) = "0"b || zc;
	call apl_zcode_to_ascii_ ((asc), asc);
	return (asc);

     end;

report_bad_symbol:
     procedure (P_symtabe_ptr);

/* parameters */

declare	P_symtabe_ptr	ptr parameter;

/* automatic */

declare	symtabe_ptr	ptr;

/* program */

	symtabe_ptr = P_symtabe_ptr;

	call ioa_ ("^a: Unknown symbol type ^2.4b hex for ""^a"".", substr (symtabe_ptr -> symtbe.type, 2),
	     get_symname (symtabe_ptr));
	call dumphex (symtabe_ptr, size (symtbe));
	return;

     end report_bad_symbol;

dumphex:
     proc (p, n);
dcl	p		ptr,
	n		fixed bin;

	call ioa_$nnl ("^p:", p);
	call dump_segment_ (iox_$user_output, p, 0, 0, n, "000001000010"b /*"0102"b3 */);

     end;

intern_360_sym:
     proc (s360sp) returns (ptr);

dcl	s360relo		fixed bin (18);
dcl	savep		ptr init (saved_bead_pointer);
dcl	s360sp		ptr;

	s360relo = fixed (rel (s360sp), 18);
	if s360_trtbl (s360relo) = 0
	then do;
		symbol_name_length = s360sp -> symtbe.size;
		saved_bead_pointer = allocate (size (saved_sb));
		saved_sb.name_length = symbol_name_length;
		saved_sb.name = get_symname (s360sp);
		string (saved_general_bead.type) = symbol_type;
		saved_general_bead.size = bit (fixed (size (symbol_bead), 18), 18);
		s360_trtbl (s360relo) = beadno$symbol (vp_ptr (addr (saved_sb)));
	     end;
	saved_bead_pointer = savep;
	return (uvp_ptr ((saved_bead_table (s360_trtbl (s360relo)))));
     end;

/* include files */

%include apl_symbol_bead;
%include apl_value_bead;
%include apl_function_bead;
%include apl_saved_ws;
%include apl_bead_format;
%include apl_operator_bead;
%include apl_group_bead;
%include apl_characters;

     end;
