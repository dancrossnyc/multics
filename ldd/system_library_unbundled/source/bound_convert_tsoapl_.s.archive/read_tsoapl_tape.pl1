/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* READ_TSOAPL_TAPE - Program to read in an IBM tape created by APLUTIL (at MIT) or APL/DOS.
   These tapes have a 144 byte workspace header record, followed by as many 10000 byte records
   as necessary to hold the workspace.

   To increase the maximum tape record size, change the variable TPMXL and the -bk argument in the attach description.
*/

read_tsoapl_tape: rtt:
     procedure;

/* Written by Paul Green */
/* Changed for tape_nstd_, name args by B. Greenberg 10/77 */
/* Modified 771122 by PG to use correct maximum tape record length (10000 bytes). */
/* Modified 771201 by PG to set remaining_bytes to maximum before every workspace. */
/* Modified 771208 by PG to put library_number in workspace name. */
/* Modified 780811 by PG to permit density to be specified. */

/* automatic */

dcl	arg_count fixed bin,
	argno fixed bin,
	arg_len fixed bin (21),
	arg_ptr ptr,
	attach_desc char (128) varying,
	bitcount fixed bin (24),
	buff_offset fixed bin (21),
	buff_ptr ptr,
	bytes_read fixed bin (21),
	bytes_to_read fixed bin (21),
	code fixed bin (35),
	density char (4) varying,
	dname char (168),
	ename char (32),
	end_of_tape bit (1) aligned,
	file_found (10) bit (1) aligned,
	fileno fixed bin,
	filenames (10) char (15),
	i fixed bin,
	listopt bit (1) init ("0"b),
	input_iocb_ptr ptr,
	n_words fixed bin (18),
	nfiles fixed bin,
	record_length fixed bin (21),
	record_number fixed bin,
	remaining_bytes fixed bin (21),
	tapename char (16) varying,
	ws_number fixed bin,
	ws_ptr ptr;

/* based */

dcl	arg_string char (arg_len) based (arg_ptr),
	buffer (0:1044479) char (1) based (buff_ptr);

/* builtins */

dcl	(addr, binary, divide, hbound, ltrim, min, null, rtrim, substr, translate) builtin;

/* conditions */

dcl	cleanup condition;

/* entries */

dcl	com_err_ entry options (variable),
	apl_zcode_to_ascii_ entry (char (*), char (*)),
	cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin),
	cu_$arg_count entry (fixed bin),
	cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	get_wdir_ entry () returns (char (168)),
	ioa_ entry options (variable),
	hcs_$delentry_seg entry (ptr, fixed bin (35)),
	hcs_$chname_seg entry (ptr, char (*), char (*), fixed bin (35)),
	hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
	hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35)),
	hcs_$terminate_noname entry (ptr, fixed bin (35)),
	hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35)),
	iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35)),
	iox_$close entry (ptr, fixed bin (35)),
	iox_$control entry (ptr, char (*), ptr, fixed bin (35)),
	iox_$detach_iocb entry (ptr, fixed bin (35)),
	iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35)),
	iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));

/* external static */

dcl	(error_table_$badopt,
	error_table_$tape_error,
	error_table_$too_many_files,
	error_table_$noarg,
	error_table_$long_record,
	error_table_$end_of_info) fixed bin (35) external static;

/* internal static */

dcl	my_name char (16) aligned internal static initial ("read_tsoapl_tape") options (constant);
dcl	TPMXL fixed bin init (10000) static options (constant);

/* include files */

%include apl_characters;
%include iox_modes;

/* program */

	input_iocb_ptr = null;
	ws_ptr = null;
	dname = get_wdir_ ();
	attach_desc = "";
	fileno = 0;
	nfiles = 0;
	file_found (*) = "0"b;
	tapename = "";
	density = "1600";				/* default value */

	call cu_$arg_count (arg_count);
	if arg_count = 0
	then do;
		call com_err_ (0, my_name, "Usage: ^a tapename [filenames]", my_name);
		return;
	     end;

	do argno = 1 to arg_count;
	     call cu_$arg_ptr (argno, arg_ptr, arg_len, code);

	     if arg_string = "-atd" | arg_string = "-attach_description"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, arg_ptr, arg_len, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, my_name, "Attach description expected.");
			     return;
			end;

		     attach_desc = arg_string;
		end;
	     else if arg_string = "-list" | arg_string = "-ls" then listopt = "1"b;
/* busted	     else if arg_string = "-number" | arg_string = "-nb"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, arg_ptr, arg_len, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, my_name, "File number expected.");
			     return;
			end;

		     fileno = cv_dec_check_ (arg_string, code);
		     if code ^= 0 then do;
			call com_err_ (0, my_name, "Bad numeric arg: ^a", arg_string);
			return;
		      end;
		end;	*/
	     else if arg_string = "-den" | arg_string = "-density"
		then do;
			argno = argno + 1;
			call cu_$arg_ptr (argno, arg_ptr, arg_len, code);
			if code ^= 0
			then do;
				call com_err_ (code, my_name, "Density value of 200, 556, 800, or 1600 expected.");
				return;
			     end;

			if arg_string ^= "200" & arg_string ^= "556" & arg_string ^= "800" & arg_string ^= "1600"
			then do;
				call com_err_ (0, my_name, "Invalid density ^a. Permissible values are 200, 556, 800, or 1600.",
				     arg_string);
				return;
			     end;

			density = arg_string;
		     end;
	     else if substr (arg_string, 1, 1) = "-" then do;
		     call com_err_ (error_table_$badopt, my_name, "^a", arg_string);
		     return;
		end;
	     else do;
		if argno = 1 then tapename = arg_string;
		else do;
		     if nfiles >= hbound (filenames, 1) then do;
			call com_err_ (error_table_$too_many_files, my_name, "Max is ^d workspaces.", hbound (filenames, 1));
			return;
		     end;
		     nfiles = nfiles + 1;
		     filenames (nfiles) = arg_string;
		end;
		end;
	end;

	if attach_desc = "" & tapename = "" then do;
	     call com_err_ (error_table_$noarg, my_name, "Neither attach desc nor tape name given.");
	     return;
	end;

	if attach_desc = ""
	then attach_desc = "tape_nstd_ " || tapename ||  " -bk 10000"; /* 10000 is biggest tape record. */

	on cleanup call clean_up;

	call iox_$attach_ioname ("apl_tape_input_", input_iocb_ptr, (attach_desc), code);
	if code ^= 0
	then do;
		call com_err_ (code, my_name, "Trying to attach I/O switch.");
		return;
	     end;

	call iox_$open (input_iocb_ptr, Sequential_input, "0"b, code);
	if code ^= 0
	then do;
		call com_err_ (code, my_name, "Trying to open I/O switch for sequential input.");
		call clean_up;
		return;
	     end;

	call iox_$control (input_iocb_ptr, "d" || density, null (), code);
	if code ^= 0
	then do;
		call com_err_ (code, my_name, "Trying to set density to ^a bpi.", density);
		call clean_up;
		return;
	     end;

	call iox_$control (input_iocb_ptr, "nine", null(), code);
	if code ^= 0
	then do;
		call com_err_ (code, my_name, "Trying to set nine mode.");
		call clean_up;
		return;
	     end;

	call ioa_ ("Begin processing of ^a at ^a bpi.", tapename, density);
	call skip_file;
	record_number = 0;
	ws_number = 0;
	end_of_tape = "0"b;

	do while (^end_of_tape);
	     call do_workspace;
	     if fileno > 0 then end_of_tape = "1"b;
	end;

	do i = 1 to nfiles;
	     if ^file_found (i)
	     then call com_err_ (0, my_name, "File ^a not found.", filenames (i));
	end;

	call clean_up;
	return;

abort:
	call ioa_ ("Tape reading aborted at record ^d.", record_number);

return_from_main:
	call clean_up;
	return;

do_workspace:
     procedure;

/* automatic */

declare	new_ename char (32),
	this_file_name char (32),
	this_library_number fixed bin,
	ten_digits picture "(9)z9";

/* based */

dcl	1 ws_header	aligned based (ws_ptr),
	2 pad1 (32)	bit (36),
	2 qr13stk		bit (36),
	2 qsymbot		bit (36),
	2 mx		bit (36),
	2 svi		bit (36),
	2 pad2 (21)	bit (36),
	2 library_number	bit (36),
	2 name,
	 3 len		fixed bin (8) unal,
	 3 chars		char (11) unal;

/* program */

	ws_ptr, buff_ptr = get_ws_seg ();
	call iox_$read_record (input_iocb_ptr, buff_ptr, min (remaining_bytes, TPMXL), record_length, code);
	if code ^= 0
	then if code = error_table_$end_of_info
	     then do;
		     end_of_tape = "1"b;
		     return;
		end;
	     else do;
		     call com_err_ (code, my_name, "While reading workspace header.");
		     go to abort;
		end;

	record_number = record_number + 1;

	if record_length ^= 144
	then do;
		call ioa_ ("Tape not in expected format: first record of workspace not 144 bytes long.");
		go to abort;
	     end;

	bytes_read = record_length;
	buff_offset = record_length;
	bytes_to_read = binary (pack (ws_header.mx));
	remaining_bytes = remaining_bytes - record_length;
	call fill_buffer;

	bytes_read = 0;
	buff_offset = binary (pack (ws_header.svi));
	bytes_to_read = binary (pack (ws_header.qr13stk), 22) - binary (pack (ws_header.svi), 22) + 1000;
	call fill_buffer;

	bitcount = (buff_offset + bytes_read) * 9;
	n_words = divide (bitcount + 35, 36, 24, 0);

	call apl_zcode_to_ascii_ (substr (ws_header.name.chars, 1, ws_header.name.len), this_file_name);
	this_file_name = translate (this_file_name, "dD", QDelta || QDelta_);
	this_library_number = binary (pack (ws_header.library_number));

	if substr (this_file_name, 1, 11) = "PLDIRECTORY"
	then return;				/* ignore useless APLDIRECTORY */

	ws_number = ws_number + 1;

	if nfiles > 0 then do;
	     do i = 1 to nfiles;
		if this_file_name = filenames (i) then do;
		     call list_file;
		     file_found (i) = "1"b;
		     go to yes_save_this_file;
		end;
	     end;
	     return;
	end;

	call list_file;
yes_save_this_file:
	if listopt then return;

	ten_digits = this_library_number;
	new_ename = rtrim (this_file_name) || ".lib" || ltrim (ten_digits) || ".sv.tsoapl";
	call hcs_$chname_seg (ws_ptr, ename, new_ename, code);
	if code ^= 0
	then call com_err_ (code, my_name, "Cannot rename ^a>^a to ^a", dname, ename, new_ename);

	call hcs_$truncate_seg (ws_ptr, n_words, code);
	if code ^= 0
	then call com_err_ (code, my_name, "Unable to truncate ^a>^a to ^d words.", dname, ename, n_words);

	call hcs_$set_bc_seg (ws_ptr, bitcount, code);
	if code ^= 0
	then call com_err_ (code, my_name, "Unable to set bitcount of ^a>^a to ^d.",
		dname, ename, bitcount);

	call hcs_$terminate_noname (ws_ptr, code);
	buff_ptr, ws_ptr = null ();
	return;


list_file:
	procedure;

	     call ioa_ ("^3d ^7d ^a", ws_number, this_library_number, this_file_name);

	end list_file;

     end do_workspace;

fill_buffer:
     procedure;

	buff_ptr = addr (ws_ptr -> buffer (buff_offset));
	do while (bytes_read < bytes_to_read);
	     call iox_$read_record (input_iocb_ptr, buff_ptr, min (remaining_bytes, TPMXL), record_length, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, my_name, "While reading record ^d.", record_number + 1);
		if code ^= error_table_$tape_error then go to abort;
	     end;

	     record_number = record_number + 1;		/* Successfully read another record! */
	     bytes_read = bytes_read + record_length;
	     buff_ptr = addr (buffer (record_length));	/* step over this record */
	     remaining_bytes = remaining_bytes - record_length;
	end;

	return;

     end fill_buffer;

get_ws_seg:
     procedure returns (ptr);

dcl	get_wdir_ entry () returns (char (168));
dcl	unique_chars_ entry (bit (*)) returns (char (15));

	if ws_ptr = null then do;
	     dname = get_wdir_ ();
	     ename = unique_chars_ ("0"b);
	     call hcs_$make_seg (dname, ename, "", 1010b, ws_ptr, code);
	     if ws_ptr = null
	     then do;
		call com_err_ (code, my_name, "Cannot create ^a>^a", dname, ename);
		go to return_from_main;
	     end;
	end;

	call hcs_$truncate_seg (ws_ptr, 0, code);
	if code ^= 0
	then do;
		call com_err_ (code, my_name, "Unable to zero-truncate ^a>^a", dname, ename);
		go to return_from_main;
	     end;

	remaining_bytes = 1044480;
	return (ws_ptr);

     end get_ws_seg;

pack:
	procedure (aplsv_word) returns (bit (36) aligned);

/* parameters */

dcl	aplsv_word bit (36) aligned;

/* automatic */

dcl	word bit (36) aligned;

/* program */

	word = ""b;
	substr (word, 5, 8) = substr (aplsv_word, 2, 8);
	substr (word, 13, 8) = substr (aplsv_word, 11, 8);
	substr (word, 21, 8) = substr (aplsv_word, 20, 8);
	substr (word, 29, 8) = substr (aplsv_word, 29, 8);
	return (word);

     end pack;

clean_up:
     procedure;

	if ws_ptr ^= null
	then do;
		call hcs_$delentry_seg (ws_ptr, code);
		ws_ptr = null;
	     end;
	call iox_$close (input_iocb_ptr, code);
	call iox_$detach_iocb (input_iocb_ptr, code);

     end;



skip_file: proc;

dcl  tbuf char (4) aligned;

	code = error_table_$end_of_info - 1;
	do while (code ^= error_table_$end_of_info);
	     call iox_$read_record (input_iocb_ptr, addr (tbuf), 4, (0), code);
	     if code ^= 0 & code ^= error_table_$end_of_info & code ^= error_table_$long_record then do;
		call com_err_ (code, my_name, "Error during file spacing.");
		go to return_from_main;
	     end;
	end;

     end skip_file;

     end;
