/****^  ***************************************************************
        *                                                             *
        * Copyright, (C) Massachusetts Institute of Technology, 1986  *
        *                                                             *
        * Copyright (c) 1982 by Massachusetts Institute of Technology *
        *                                                             *
        *************************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Added 'do you really want to announce?' query and -force,
     -no_force to suppress it.   Made announce report read_only
     public.
  2) change(86-08-19,Pattin), approve(86-08-19,MCR7354),
     audit(86-08-19,Margolin), install(86-08-19,MR12.0-1135):
     PBF to above change.  Copy user's long_name into fname with the char
     builtin instead of substr, which does not pad with blanks.
                                                   END HISTORY COMMENTS */


forum_create:
fcr:
     procedure ();

/* Version 2 Forum - Create Forum meetings
  1/4/83 Jay Pattin from version 1 fcr
  Modified 6/4/83 Jay Pattin for meeting announcements */

declare	active_fnc_err_		entry options (variable),
	command_query_		entry options (variable),
	com_err_			entry options (variable),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin (21)) returns (fixed bin (35)),
	cu_$arg_list_ptr		entry returns (ptr),
	expand_pathname_		entry (char (*), char (*), char (*), fixed bin (35)),
	format_document_$string	entry (char (*), char (*), fixed bin (21), ptr, fixed bin (35)),
	forum$enter_first_trans	entry (char (*)),
	forum_requests_$find_forum	entry (char (*), char (*), char (*), fixed bin, fixed bin (35)),
	forum_$chname_forum_idx	entry (fixed bin, char (*), char (*), fixed bin (35)),
	forum_$close_forum		entry (fixed bin, fixed bin (35)),
	forum_$create_forum		entry (char (*), char (*), fixed bin (35)),
	forum_$delete_forum		entry (char (*), char (*), fixed bin (35)),
	forum_$enter_trans		entry (fixed bin, char (*), fixed bin, char (*), bit (36) aligned, fixed bin,
				fixed bin (35)),
	forum_$forum_info		entry (char (*), char (*), char (*), fixed bin (71), ptr, fixed bin (35)),
	forum_$list_forum_acl	entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35)),
	forum_$open_forum		entry (char (*), char (*), fixed bin, fixed bin (35)),
	forum_$read_trans		entry (fixed bin, fixed bin, ptr, ptr, fixed bin (35)),
	forum_$set_forum_acl	entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
	forum_$set_message		entry (fixed bin, char (*), fixed bin (35)),
	get_system_free_area_	entry returns (ptr),
	get_temp_segment_		entry (char (*), ptr, fixed bin (35)),
	get_wdir_			entry returns (char (168)),
	hcs_$list_acl		entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35)),
	hcs_$status_		entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35)),
	(ioa_, ioa_$rsnnl)		entry options (variable),
	iox_$get_line		entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
	pathname_			entry (char (*), char (*)) returns (char (168)),
	release_temp_segment_	entry (char (*), ptr, fixed bin (35)),
 	ssu_$abort_line		entry options (variable),
	ssu_$arg_count		entry (ptr, fixed bin),
	ssu_$arg_ptr		entry (ptr, fixed bin, ptr, fixed bin (21)),
	ssu_$destroy_invocation	entry (ptr),
	ssu_$get_subsystem_and_request_name
				entry (ptr) returns (char (72) var),
	ssu_$print_message		entry options(variable),
	ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr, entry, fixed bin (35)),
	user_info_$whoami		entry (char (*), char (*), char (*));

declare	(P_passport_info_ptr	ptr,
	P_ssu_ptr			ptr)
				parameter;

declare	arg_count			fixed bin,
	arg_idx			fixed bin,
	arg_len			fixed bin (21),
	arg_ptr			ptr,
	arg			char (arg_len) based (arg_ptr),
	answer			char (256) varying,
	area_ptr			ptr,
	code			fixed bin (35),
	enter_description		bit (1) aligned,
	force			bit (1) aligned,
	forum_name		char (32),
	fname			char (32),
	forum_idx			fixed bin,
	forum_directory		char (168),
	forum_dir_dir		char (168),
	forum_dir_ent		char (32),
	message			char (512),
	meeting_switch		bit (1) aligned,
	name_len			fixed bin,
	person_id			char (22),
	project			char (9),
	public_switch		bit (1) aligned,
	query_info_ptr		ptr,	
	read_only			bit (1) aligned,
	short_name		char (128),
	ssu_ptr			ptr,
	subsystem			bit (1) aligned,
	temp_seg			char (104480) based (temp_seg_ptr),
	temp_seg_ptr		ptr,
	text			char (text_len) based (temp_seg_ptr),
	text_len			fixed bin (21),
	trans_pic			pic "zz9999",
	whoami			char (32),
	cleanup			condition,
	(addr, after, before, char, index, length, ltrim, maxlength, null, pointer, reverse, rtrim, string, substr)
				builtin;

declare	1 fdoc			aligned like format_document_options,
	1 fi			aligned like forum_info,
	1 sb			aligned like status_branch;

declare	1 one_acl			aligned,
	2 access_name		char (32),
	2 modes			bit (36) aligned,
	2 xmodes			bit (36) aligned,
	2 code			fixed bin (35);

declare	forum_data_$meetings_directory
				char (32) external,
	(error_table_$badopt,
	error_table_$noarg,
	forum_et_$cant_notify,
	forum_et_$no_forum)		fixed bin (35) external,
	iox_$user_input		ptr external;

declare	(RW_XACL			init ("110"b),
	R_XACL			init ("100"b),
	RW_ACCESS			init ("101"b))
				bit (3) static options (constant);

declare	(DIR			init ("Enter the pathname of the directory where the meeting is to be placed.^/Entering a carriage return will create the meeting in the current working directory.^/^/Pathname: "),
	NAME			init ("Enter the primary name of the new meeting. The name may be from 1 to 26 characters long.^/^/Primary name: "),
	SNAME			init ("Enter a secondary name for the meeting, or a carriage return if no second name is desired.^/^/Short name: "),
	PUBLIC			init ("Answering ""yes"" will allow all users on the system to participate in the meeting.^/Answering ""no"" will restrict participation to users you explicitly allow.^/"),
	PROJECT		init ("Answering ""yes"" will allow you to specify projects whose users will be allowed to participate in the meeting.^/Answering ""no"" will restrict participation to users you explicitly allow.^/"),
	PROJECTS			init ("Enter the name of a project whose users will be allowed to participate in the meeting.^/Enter a period (""."") if there are no more projects to be specified.^/"),
     	PERSON			init ("Answering ""yes"" will allow you to add individuals to the list of users allowed to participate in the meeting.^/"),
	PEOPLE			init ("Enter the person_id of a user to be allowed to participate in the meeting.^/Enter a period (""."") if there are no more users to be specified.^/"),
	ANNOUNCE			init ("Answering ""yes"" will allow you to enter an announcement of this meeting^/into another meeting so that others may easily add it to their search list.^/"),
	ANN_MTG			init ("Enter the name of the meeting in which the announcement should be entered.^/Enter a carriage return to announce it in the ^a meeting.^/Enter ""quit"" to not make the announcement.^/^/"))
				char (256) static options (constant);

declare	CMSG_EXP			char (300);	/* Not a constant because it's too big */
%page;
%include forum_passport;
%page;
%include forum_user_trans;
%page;
%include forum_info;
%page;
%include query_info;
%page;
%include format_document_options;
%page;
%include status_structures;
%page;
	whoami = "forum_create";
	subsystem = "0"b;
	call user_info_$whoami (person_id, project, "");
	forum_idx = 0;

	forum_user_trans_ptr, temp_seg_ptr = null ();
	forum_directory, forum_name = "";
	on cleanup call clean_up ("1"b);

	call ssu_$standalone_invocation (ssu_ptr, whoami, "1", cu_$arg_list_ptr (), punt, code);
	if code ^= 0 then do; 	/* UGH */
	     if cu_$af_return_arg ((0), null (), (0)) = 0 then
		call active_fnc_err_ (code, whoami, "Unable to create subsystem invocation.");
	     else call com_err_ (code, whoami, "Unable to create subsystem invocation.");
	     return;
	end;

	call ssu_$arg_count (ssu_ptr, arg_count);
	if arg_count ^= 0 then call ssu_$abort_line (ssu_ptr, 0, "Usage:  fcr");

	query_info_ptr = addr (query_info);
	query_info.version = query_info_version_6;
	query_info.suppress_spacing = "1"b;
	query_info.explanation_ptr = addr (DIR);
	query_info.explanation_len = length (rtrim (DIR));

	call command_query_ (query_info_ptr, answer, "",
	     "Enter pathname of meeting directory (carriage return for working_dir)^/");
	if answer = "" then
	     forum_directory = get_wdir_ ();
	else do;
	     forum_directory = answer;
	     call expand_pathname_ (forum_directory, forum_dir_dir, forum_dir_ent, code);
	     if code ^= 0 then 
		call ssu_$abort_line (ssu_ptr, code, "Expanding ""^a""", answer);
	     forum_directory = rtrim (forum_dir_dir) || ">" || rtrim (forum_dir_ent);
	end;

	query_info.suppress_spacing = "0"b;
	query_info.explanation_ptr = addr (NAME);
	query_info.explanation_len = length (rtrim (NAME));

BLANK:	     
	call command_query_ (query_info_ptr, answer, "", "Please enter long meeting name (<27 characters): ");
	if answer = "" then goto BLANK;

	forum_name = rtrim (answer) || ".forum";
	call forum_$create_forum (forum_directory, forum_name, code);
	if code ^= 0 then
	     call ssu_$abort_line (ssu_ptr, code, "Error creating meeting.");

	fname = char (answer, 32);

	call forum_$open_forum (forum_directory, forum_name, forum_idx, code);
	if code ^= 0 then
	     call ssu_$abort_line (ssu_ptr, code, "Unable to open newly created meeting.");

	query_info.explanation_ptr = addr (SNAME);
	query_info.explanation_len = length (rtrim (SNAME));

	call command_query_ (query_info_ptr, answer, "", "Now enter abbreviated meeting name: ");

	short_name = answer;
	if short_name ^= "" then do;
	     call forum_$chname_forum_idx (forum_idx, "", rtrim (short_name) || ".forum", code);
	     if code ^= 0 then
		call ssu_$abort_line (ssu_ptr, code, "Unable to add short name to meeting ^a.", fname);
	end;

	query_info.explanation_ptr = addr (PUBLIC);
	query_info.explanation_len = length (rtrim (PUBLIC));

	one_acl.modes = RW_ACCESS;
	query_info.yes_or_no_sw = "1"b;
	query_info.prompt_after_explanation = "1"b;
	call command_query_ (query_info_ptr, answer, "", "Should the meeting be public? ");
	if answer = "yes" then do;
	     public_switch = "1"b;
	     read_only = "0"b;
	     one_acl.access_name = "*.*.*";
	     one_acl.xmodes = RW_XACL;
	     call forum_$set_forum_acl (forum_directory, forum_name, addr (one_acl), 1, code);
	     if code ^= 0 then
		call ssu_$print_message (ssu_ptr, code, "Unable to make meeting public.");
	     goto CMSG;
	end;

	public_switch = "0"b;
	query_info.explanation_ptr = addr (PERSON);
	query_info.explanation_len = length (rtrim (PERSON));

	query_info.yes_or_no_sw = "1"b;
	call command_query_ (query_info_ptr, answer, "", "Should specified individuals be allowed to participate?");
	if answer = "yes" then do;
	     query_info.yes_or_no_sw = ""b;
	     call ioa_ ("^/Now please type person_id's of attendees when prompted.");
	     call ioa_ ("Signal the end of the list by typing a period only.");

	     query_info.explanation_ptr = addr (PEOPLE);
	     query_info.explanation_len = length (rtrim (PEOPLE));

	     call set_acl ("1"b);
	end;

	query_info.explanation_ptr = addr (PROJECT);
	query_info.explanation_len = length (rtrim (PROJECT));

	query_info.yes_or_no_sw = "1"b;
	call command_query_ (query_info_ptr, answer, "", "Should specified projects be allowed to participate?");
	if answer = "yes" then do;
	     call ioa_ ("^/Now please type project_ids when prompted.");
	     call ioa_ ("Signal the end of the list by typing a period only.");
	     query_info.explanation_ptr = addr (PROJECTS);
	     query_info.explanation_len = length (rtrim (PROJECTS));

	     query_info.yes_or_no_sw = ""b;
	     call set_acl ("0"b);
	end;

CMSG:	CMSG_EXP = "The chairman message is printed each time a participant attends a meeting^/after the message has changed and the first time he enters a transaction^/after going to a meeting.";
	CMSG_EXP = rtrim (CMSG_EXP) || "  It is intended to a serve as a reminder of the^/purpose of the meeting and of the meeting's audience.^2/Do you want to enter a chairman message? ";
				
	query_info.yes_or_no_sw = "1"b;
	query_info.prompt_after_explanation = "0"b;
	query_info.explanation_ptr = addr (CMSG_EXP);
	query_info.explanation_len = length (rtrim (CMSG_EXP));
	call command_query_ (query_info_ptr, answer, "", "Do you want to enter a chairman message (? for explanation)?");

	if answer = "yes" then call get_message ();

	call ioa_ ("The ^a meeting has been established in ^a.", fname, forum_directory);

	call ioa_ ("You must now enter the first transaction in the ^a meeting, which will^/act as an introduction.", fname);
	call forum$enter_first_trans (rtrim (forum_directory) || ">" || fname);

	query_info.prompt_after_explanation = "1"b;
	query_info.explanation_ptr = addr (ANNOUNCE);
	query_info.explanation_len = length (rtrim (ANNOUNCE));
	call command_query_ (query_info_ptr, answer, "", "Do you want to announce this meeting?");
	if answer = "yes" then call announce ();

EGRESS:	call clean_up ("0"b);
	return;
%page;
set_acl:
     proc (person);

declare	person			bit (1) aligned;

	do while ("1"b);
	     call command_query_ (query_info_ptr, answer, "", "^[Person^;Project^]_id: ", person);
	     if answer = "." then return;

	     read_only = "1"b;
	     if substr (answer, length (answer) - length (" -ro") + 1) = " -ro" then
		answer = substr (answer, 1, length (answer) - length (" -ro"));
	     else if substr (answer, length (answer) - length (" -read_only") + 1) = " -read_only" then
		answer = substr (answer, 1, length (answer) - length (" -read_only"));
	     else read_only = "0"b;
		
	     if index (answer, ".") > 0 | index (answer, "*") > 0 then
		call ssu_$print_message (ssu_ptr, 0, "^[Person^;Project^]_ids may not contain ""."" or ""*"".", person);
	     else if answer ^= "" then do;
		if person then do;
		     if answer = person_id then do;
			call ssu_$print_message (ssu_ptr, 0, "You are already a participant.");
			goto NEXT_ID;
		     end;
		     one_acl.access_name = rtrim (answer) || ".*.*";
		end;
		else one_acl.access_name = "*." || rtrim (answer) || ".*";
		if read_only then one_acl.xmodes = R_XACL;
		else one_acl.xmodes = RW_XACL;
		call forum_$set_forum_acl (forum_directory, forum_name, addr (one_acl), 1, code);
		if code ^= 0 then
		     call ssu_$print_message (ssu_ptr, code, "Unable to add ^[project ^]^a to new meeting.",
			^person, answer);
	     end;
NEXT_ID:	end;
     end set_acl;
%page;
get_message:
     proc ();

	call ioa_ ("Message (End with "".""):");

	call get_input ();
	call forum_$set_message (forum_idx, rtrim (message), code);
	if code ^= 0 then
	     call ssu_$print_message (ssu_ptr, code, "Setting chairman message.");
	return;
     end get_message;

get_input:
     proc ();

declare	buffer			char (256),
	len			fixed bin (21);

	message = "";
	do while ("1"b);
	     buffer = "";
	     call iox_$get_line (iox_$user_input, addr (buffer), 256, len, code);
	     if code ^= 0 then do;
		call ssu_$print_message (ssu_ptr, code, "Reading message.");
		return;
	     end;

	     if len > 0 then do;
		if len = 2 & substr (buffer, 1, 1) = "." then return;
		buffer = substr (buffer, 1, len);
		if length (rtrim (message)) + length (rtrim (buffer)) > maxlength (message) then
		     call ssu_$abort_line (ssu_ptr, 0, "Input must be less than 512 characters.");
		message = rtrim (message) || buffer;
	     end;
	end;
     end get_input;
%page;
announce_meeting:
     entry (P_ssu_ptr, P_passport_info_ptr);

	ssu_ptr = P_ssu_ptr;
	passport_info_ptr = P_passport_info_ptr;
	forum_idx = passport.forum_idx;

	subsystem = "1"b;
	meeting_switch, enter_description, force = "0"b;
	forum_user_trans_ptr, temp_seg_ptr = null ();
	sb.names_relp = ""b;
	on cleanup call clean_up ("1"b);

	call ssu_$arg_count (ssu_ptr, arg_count);

	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if index (arg, "-") ^= 1 then
		call ssu_$abort_line (ssu_ptr, 0, "Usage:  anm {-control_arg}");
	     else if arg = "-enter_description" | arg = "-eds" then enter_description = "1"b;
	     else if arg = "-force" | arg = "-fc" then force = "1"b;
	     else if arg = "-meeting" | arg = "-mtg" then do;
		meeting_switch = "1"b;
		arg_idx = arg_idx + 1;
		if arg_idx > arg_count then
		     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ^a.", arg);
		call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
		call forum_requests_$find_forum (arg, forum_dir_dir, forum_dir_ent, name_len, code);
		if code ^= 0 then
		     call ssu_$abort_line (ssu_ptr, code, "Locating ^a.", arg);
	     end;
	     else if arg = "-no_force" | arg = "-nfc" then force = "0"b;
	     else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
	end;
		
	if forum_idx = 0 then call ssu_$abort_line (ssu_ptr, forum_et_$no_forum);
	if ^meeting_switch then do;
	     forum_dir_dir = forum_data_$central_directory;
	     forum_dir_ent = forum_data_$meetings_directory;
	     name_len = index (forum_data_$meetings_directory, ".forum") - 1;
	     if name_len < 0 then name_len = index (forum_data_$meetings_directory, ".control") - 1;
	end;
	forum_directory = passport.forum_dir;
	forum_name = passport.forum_name;
	fname = no_suffix_name;

	if ^force then do;
	     query_info.version = query_info_version_6;
	     string (query_info.switches) = ""b;
	     query_info.yes_or_no_sw = "1"b;
	     query_info.explanation_ptr, query_info.question_iocbp, query_info.answer_iocbp = null ();
	     call command_query_ (addr (query_info), answer, ssu_$get_subsystem_and_request_name (ssu_ptr),
		"Do you really want to announce the ^a meeting in the ^a meeting?",
		fname, pathname_ (forum_dir_dir, substr (forum_dir_ent, 1, name_len)));
	     if answer = "no" then return;
	end;

	area_ptr, status_area_ptr = passport.area_ptr;
	status_ptr = addr (sb);

	short_name = "";
	call hcs_$status_ (forum_directory, forum_name, 0, status_ptr, area_ptr, code);
	if code = 0 then do;
	     fname = reverse (after (reverse (status_entry_names (1)), "."));
	     if sb.nnames > 1 then
		short_name = reverse (after (reverse (status_entry_names (2)), "."));
	     do arg_idx = 3 to sb.nnames while (length (rtrim (short_name)) < 102);
		short_name = rtrim (short_name) || ", " || reverse (after (reverse (status_entry_names (arg_idx)), "."));
	     end;
	end;

	fi.version = forum_info_version_1;
	call forum_$forum_info (forum_directory, forum_name, "", 0, addr (fi), code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code);
	person_id = fi.chairman.username;
	project = fi.chairman.project;

	one_acl.access_name = "*.*.*";
	if forum_idx < 0 then do;
	     call forum_$list_forum_acl (forum_directory, forum_name, null (), null (), addr (one_acl), 1, code);
	     if code ^= 0 then public_switch = "0"b;
	     else do;
		public_switch = (one_acl.xmodes ^= ""b);
		read_only = (one_acl.xmodes = R_XACL);
	     end;
	end;
	else do;
	     call hcs_$list_acl (forum_directory, forum_name, null (), null (), addr (one_acl), 1, code);
	     if code ^= 0 then public_switch = "1"b;
	     else public_switch = (one_acl.modes = RW_ACCESS);
	end;

	call announce_existing ();
	return;
%page;
announce:
     proc ();

declare	(announce_idx, idx)		fixed bin,
	announce_path		char (168);

     	query_info.yes_or_no_sw, query_info.prompt_after_explanation = "0"b;
	query_info.suppress_spacing = "1"b;

	query_info.explanation_ptr = addr (ANN_MTG);
	query_info.explanation_len = length (rtrim (ANN_MTG));
AGAIN:	call command_query_ (query_info_ptr, answer, "", "^/Enter the name of the meeting where the announcement should be made.^/(Enter carriage return for ^a>^a.)^/",
	     forum_data_$central_directory, before (forum_data_$meetings_directory, "."));
	if answer = "quit" then return;

	if answer = "" then do;
	     forum_dir_dir = forum_data_$central_directory;
	     forum_dir_ent = forum_data_$meetings_directory;
	end;
	else do;
	     call forum_requests_$find_forum ((answer), forum_dir_dir, forum_dir_ent, (0), code);
	     if code ^= 0 then do;
BADMTG:		call ssu_$print_message (ssu_ptr, code, "Unable to locate ^a meeting.", answer);
		goto AGAIN;
	     end;
	end;

	area_ptr =  get_system_free_area_ ();
	call user_info_$whoami (person_id, project, "");
	enter_description = "0"b;
	goto JOIN;

announce_existing:
     entry ();

JOIN:     announce_idx = 0;
	on cleanup call forum_$close_forum (announce_idx, (0));

	call forum_$open_forum (forum_dir_dir, forum_dir_ent, announce_idx, code);
	if code ^= 0 then
	     if subsystem then call ssu_$abort_line (ssu_ptr, code, "Opening ^a>^a.", forum_dir_dir, forum_dir_ent);
	     else goto BADMTG;

	announce_path = rtrim (forum_dir_dir) || ">" || forum_dir_ent;
	call get_temp_segment_ (whoami, temp_seg_ptr, code);
	if code ^= 0 then
	     call ssu_$abort_line (ssu_ptr, code, "Unable to obtain temp segment.");

	call ioa_$rsnnl (" Names:^2-^a^[, ^a^;^s^]^/ Location:^-^a^/ Chairman:^-^a.^a^/ Participation:^-^[Public^[ (read-only)^]^/^/^]",
	     temp_seg, text_len, fname, (short_name ^= ""), short_name, forum_directory, person_id, project,
	     public_switch, read_only);

	if ^public_switch then do;
	     call ioa_ ("Enter a short description of the access to the meeting (End with ""."").");
	     call get_input ();

	     idx = length (rtrim (message));
	     if idx = 0 then do;
		substr (temp_seg, text_len, 2) = "

";
		text_len = text_len + 2;
	     end;
	     else begin;

declare	temp			char (2 * idx + 20),
	len			fixed bin (21);

		fdoc.version_number = format_document_version_2;
		fdoc.indentation = 20;
		fdoc.line_length = 52;
		string (fdoc.switches) = ""b;
		fdoc.galley_sw, fdoc.literal_sw, fdoc.dont_break_indented_lines_sw = "1"b;
		fdoc.syllable_size = 3;		/* Make fdoc happy */

		call format_document_$string (substr (message, 1, idx), temp, len, addr (fdoc), code);
		if code ^= 0 then
		     call ssu_$abort_line (ssu_ptr, code, "Unable to fill announcement.");

		len = len - 20;			/* remove indentation from first line. */
		substr (temp_seg, text_len + 1, len + 1) = substr (temp, 21, len) || "
";
		text_len = text_len + len + 1;
	     end;					/* BEGIN */
	end;

	if enter_description then call enter_meeting_description ();
	else do;
	     call forum_$read_trans (forum_idx, 1, area_ptr, forum_user_trans_ptr, code );
	     if code ^= 0 then do;
		call ssu_$print_message (ssu_ptr, code, "Unable to read first transaction.");
		call enter_meeting_description ();
	     end;
	     else do;
		substr (temp_seg, text_len + 1, forum_user_trans.text_length) = forum_user_trans.text;
		text_len = text_len + forum_user_trans.text_length;
	     end;
	end;

	forum_dir_dir = rtrim (fname) || " meeting";
	call forum_$enter_trans (announce_idx, text, 0, forum_dir_dir, "11"b, idx, code);
	if code ^= 0 then
	     if code ^= forum_et_$cant_notify then
		call ssu_$abort_line (ssu_ptr, code, "Unable to enter announcement.");

	trans_pic = idx;
	call ioa_ ("Announcement [^a] entered in the ^a meeting.", ltrim (trans_pic), announce_path);

	call forum_$close_forum (announce_idx, (0));

	return;
     end announce;
%page;
enter_meeting_description:
     proc ();

declare	idx			fixed bin (21);

	call ioa_ ("Please enter a short description of the meeting (End with ""."").");
	call get_input ();

	idx = length (rtrim (message));
	substr (temp_seg, text_len + 1, idx) = message;
	text_len = text_len + idx;
	return;
     end enter_meeting_description;

clean_up:
     proc (cleanup_sw);

declare	cleanup_sw		bit (1) aligned;

     	if forum_user_trans_ptr ^= null () then free forum_user_trans;
	if temp_seg_ptr ^= null () then
	     call release_temp_segment_ (whoami, temp_seg_ptr, (0));

	if subsystem then do;
	     if sb.names_relp ^= ""b then free status_entry_names;
	     return;
	end;

	call forum_$close_forum (forum_idx, (0));
	if ^cleanup_sw then return;

	call forum_$delete_forum (forum_directory, forum_name, (0));
	call ssu_$destroy_invocation (ssu_ptr);

	return;
     end clean_up;


punt:
     proc ();

	goto EGRESS;

	end punt;
	
end forum_create;
