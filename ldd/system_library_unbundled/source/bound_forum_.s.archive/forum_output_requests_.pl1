/****^  ***************************************************************
        *                                                             *
        * Copyright, (C) Massachusetts Institute of Technology, 1986  *
        *                                                             *
        * Copyright (c) 1982 by Massachusetts Institute of Technology *
        *                                                             *
        *************************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Fixed bugs in formatted writes involving form-feeds and
       multi-line subjects.
     Added -trailer_format to print and write.
     Changed to use date_time_$format
     Added -no_header.
     Changed list to mark deleted transactions.
     Report pref of unprocessed.
  2) change(91-08-29,Huen), approve(91-08-29,MCR8248),
     audit(92-01-08,Zimmerman), install(92-04-27,MR12.5-1014):
     Fix several TRs (phx21375, 21376, 21377) relatled to current trans.
  3) change(91-08-29,Huen), approve(91-08-29,MCR8249),
     audit(92-01-08,Zimmerman), install(92-04-27,MR12.5-1014):
     phx21386: Fix the "list" request to generate correct summary for unproc
     trans.
                                                   END HISTORY COMMENTS */


forum_output_requests_$write_transactions:
     procedure (P_ssu_ptr, P_passport_info_ptr);

/* This module implements the following forum requests:

   1) 'print' to print specified transactions on users terminal.
   2) 'write' to write specified transactions to a segment.
   3) 'list' to list specified transactions on users terminal.
   4) 'delete' and 'retrieve' to allow the chairman to logically remove
       transactions from a forum and retrieve them later.
   5) 'reset' to change the current and last-seen transactions.

   Initial coding:	10 March 1980 by M. Auerbach
   rewritten for version 4  6/19/81 Jay Pattin
   modified for ssu_ 08/21/81 Jay Pattin
   renamed for forum, added -bf, -lg, -sep, -nsep, -line_len to write Jay Pattin 1/82
   added cmsg to write, print, delete 5/14/82 Jay Pattin
   made list work as active function, use format_document_ for filling 6/25/82 Jay Pattin
   added reset_more in print request 9/24/82 Jay Pattin
   added -new, -next to reset, -bf, -lg to list 10/20/82 Jay Pattin
   simple formatted write 12/31/82 Jay Pattin */

	declare (P_ssu_ptr, P_passport_info_ptr)
				 pointer parameter;

	declare argument_idx	 fixed bin,
	        active_function	 bit (1) aligned,
	        ret_val		 char (ret_len) varying based (ret_ptr),
	        ret_ptr		 ptr,
	        ret_len		 fixed bin (21),
	        (arg_count, arg_len)	 fixed bin,
	        arg_ptr		 ptr,
	        (tidx, forum_idx)	 fixed bin,
	        code		 fixed bin (35),
	        forum_dir		 char (168),	/* where the current forum is */
	        forum_name		 char (32),	/* and what it is called */
	        fill_index		 fixed bin,	/* to fill, or not to fill ... */
	        (write_switch, extend_switch, header_switch, list_switch, temp_forum, delete_switch, formatted,
	        current_switch, print_switch, update_current, dont_truncate, long_switch)
				 bit (1) aligned,
	        trans_pic		 pic "zz9999",	/* pretty picture of trans no */
	        trans_time		 char (24),	/* mm/dd/yy etc. of trans */
	        fmt_trans_time	 char (250) varying,/* header uses date_time_$format */
	        iocb_ptr		 ptr,		/* used for print & write */
	        no_lines		 fixed bin,	/* length of transaction in lines */
	        owner		 char (72),	/* temp seg owner */
	        current_line	 fixed bin,
	        page_len		 fixed bin,
	        page_number		 fixed bin,
	        page_header		 char (256),
	        page_subject	 char (72),	/* first sj on page */
	        temp_idx		 fixed bin,
	        (text_ptr, prseg_ptr)	 ptr,
	        fill_len		 fixed bin (21),
	        fill_seg		 char (1044480) based (prseg_ptr),
	        text		 char (fill_len) based (text_ptr),
	        control		 char (80) varying, /* used for ioa_ */
	        message		 char (256),	/* used by ioa_$rs */
	        messlen		 fixed bin (21),
	        separator		 char (256) varying,
	        (sep_switch, sep_switch_given)
				 bit (1) aligned,
	        ssu_ptr		 ptr,
	        trailer_format	 fixed bin,
	        user_dir		 char (168),	/* where write segment is */
	        user_entry		 char (32),	/* and what it is called */
	        i			 fixed bin,
	        sj_width		 fixed bin,
	        line_len		 fixed bin;

	declare arg		 char (arg_len) based (arg_ptr);
	declare 1 fdoc		 aligned like format_document_options;
	declare NL		 char (1) static options (constant) init ("
");
	declare FF		 char (1) static options (constant) init ("");

	declare (error_table_$bad_conversion,
	        error_table_$badopt,
	        error_table_$bigarg,
	        error_table_$inconsistent,
	        error_table_$noarg,
	        error_table_$noentry,
	        error_table_$recoverable_error,
	        forum_et_$invalid_trans_idx,
	        forum_et_$trans_reaped) fixed bin (35) external;

	declare iox_$user_output	 external pointer;

	declare iox_$close		 entry (pointer, fixed binary (35)),
	        iox_$control	 entry (ptr, char (*), ptr, fixed bin (35)),
	        iox_$detach_iocb	 entry (pointer, fixed binary (35)),
	        iox_$attach_name	 entry (char (*), pointer, char (*), pointer, fixed binary (35)),
	        iox_$destroy_iocb	 entry (ptr, fixed bin (35)),
	        cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35)),
	        get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin (17)),
	        hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)),
	        iox_$open		 entry (pointer, fixed binary, bit (1) aligned, fixed binary (35)),
	        expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35)),
	        expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	        date_time_		 entry (fixed binary (71), char (*)),
	        date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*))
				 returns (char (250) varying),
	        get_temp_segment_	 entry (char (*), ptr, fixed bin (35)),
	        release_temp_segment_	 entry (char (*), ptr, fixed bin (35)),
	        request_id_		 entry (fixed bin (71)) returns (char (19)),
	        ipc_$cutoff		 entry (fixed binary (71), fixed binary (35)),
	        ipc_$reconnect	 entry (fixed binary (71), fixed binary (35)),
	        ioa_		 entry options (variable),
	        ioa_$rsnnl		 entry options (variable),
	        ioa_$ioa_switch	 entry options (variable),
	        ioa_$ioa_switch_nnl	 entry options (variable),
	        format_document_$string entry (char (*), char (*), fixed bin (21), ptr, fixed bin (35)),
	        forum_$close_forum	 entry (fixed bin, fixed bin (35)),
	        forum_$forum_limits	 entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,
				 fixed bin, bit (36) aligned, fixed bin (35)),
	        forum_$get_message	 entry (fixed bin, char (*), fixed bin (35)),
	        forum_$set_delete_sw	 entry (fixed bin, fixed bin, bit (1) aligned, fixed bin (35)),
	        forum_$set_last_seen_idx entry (fixed bin, fixed bin, bit (1) aligned, fixed bin (35)),
	        forum_$set_message	 entry (fixed bin, char (*), fixed bin (35)),
	        forum_$set_seen_switch entry (fixed bin, char (*), fixed bin, bit (1) aligned, fixed bin (35)),
	        forum_$trans_ref_info	 entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, bit (1) aligned,
				 fixed bin (35)),
	        forum_trans_specs_$parse_specs
				 entry (ptr, fixed bin, bit (36) aligned, entry, fixed bin, char (*), char (*), ptr),
	        forum_trans_util_$read_trans entry (ptr, fixed bin, fixed bin, ptr, fixed bin (35)),
	        ssu_$abort_line	 entry options (variable),
	        ssu_$return_arg	 entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21)),
	        ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin),
	        ssu_$get_subsystem_and_request_name
				 entry (ptr) returns (char (72) varying),
	        ssu_$print_message	 entry options (variable);

	declare (addcharno, addr, char, index, length, max, null, clock, ltrim, maxlength, min, rtrim, string, substr)
				 builtin,
	        cleanup		 condition;
%page;
%include forum_trans_list;
%page;
%include forum_user_trans;
%page;
%include forum_passport;
%page;
%include format_document_options;
%page;
	call setup_request ();

	if arg_count = 0 then call ssu_$abort_line (ssu_ptr, 0, "Usage:  w trans_specs {-control_args}");

	extend_switch, header_switch, sep_switch = "1"b;	/* add to existing segment by default */
	write_switch = "1"b;
	long_switch = ^passport.brief_sw;
	fill_index = 0;
	page_len = 60;
	page_number = 0;
	formatted, sep_switch_given = "0"b;
	separator = "^|";
	iocb_ptr = null ();
	on cleanup call cleanup_handler ();

	parse_flags_word = DEFAULT_TO_UNPROC | NON_NULL;
	call forum_trans_specs_$parse_specs (passport_info_ptr, 1, parse_flags_word, write_args, temp_idx, forum_dir,
	     forum_name, forum_trans_list_ptr);

	if temp_idx ^= 0 then do;
		temp_forum = "1"b;			/* remember so we can clean up */
		forum_idx = temp_idx;
	     end;

	if user_entry = "" then /* default to [wd]>forum_name.trans */
	     call expand_pathname_$add_suffix (forum_name, "trans", user_dir, user_entry, (0));

	if formatted & (sep_switch_given | ^header_switch) then
	     call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, """-formatted"" and ""-separator"" or ""-no_header""");

	if formatted then do;
		page_len = page_len - 4;
		current_line = page_len + 1;		/* force page break */
		if line_len = 0 then line_len = 80;
		else if line_len < 65 then
		     call ssu_$abort_line (ssu_ptr, 0, "Formatted write must have a line length of at least 65.");
		fmt_trans_time = date_time_$format ("date_time", clock (), "", "");
		call ioa_$rsnnl ("^a^5x^a^vtPage: ^^3d^/^v(_^)", page_header, (0), fmt_trans_time, forum_name, line_len - 8, line_len);
	     end;
	else do;
		if line_len = 0 then line_len = 72;
		if ^header_switch then trailer_format = TFMT_none;
	     end;
	goto print_write_common;


write_args:					/* process write's arguments */
     proc (L_arg_idx);

	declare L_arg_idx		 fixed bin;

	argument_idx = L_arg_idx;
	call ssu_$arg_ptr (ssu_ptr, argument_idx, arg_ptr, arg_len);

	if arg = "-pathname" | arg = "-pn" then do;
		argument_idx = argument_idx + 1;
		if argument_idx > arg_count then
		     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Pathname of segment.");
		call ssu_$arg_ptr (ssu_ptr, argument_idx, arg_ptr, arg_len);
		call expand_pathname_$add_suffix (arg, "trans", user_dir, user_entry, code);
		if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Expanding ^a.", arg);
	     end;

	else if arg = "-brief" | arg = "-bf" then long_switch = "0"b;
	else if arg = "-long" | arg = "-lg" then long_switch = "1"b;
	else if arg = "-truncate" | arg = "-tc" then extend_switch = "0"b;
	else if arg = "-extend" then extend_switch = "1"b;
	else if arg = "-fill" | arg = "-fi" then fill_index = 1;
	else if arg = "-format" | arg = "-fmt" then do;
		formatted = "1"b;
		sep_switch = "0"b;
	     end;
	else if arg = "-no_format" | arg = "-nfmt" then formatted = "0"b;
	else if arg = "-header" | arg = "-he" then header_switch = "1"b;
	else if arg = "-no_header" | arg = "-nhe" then header_switch = "0"b;
	else if arg = "-line_length" | arg = "-ll" then do;
		line_len = get_numeric_arg ();
		if line_len < 40 then call ssu_$abort_line (ssu_ptr, 0, "Line length must be at least 40.");
		if fill_index = 0 then fill_index = 1;
	     end;
	else if arg = "-page_length" | arg = "-pl" then do;
		page_len = get_numeric_arg ();
		if page_len < 20 then call ssu_$abort_line (ssu_ptr, 0, "Page length must be at least 20");
	     end;
	else if arg = "-no_fill" | arg = "-nfi" then fill_index = 2;
	else if arg = "-separator" | arg = "-sep" then do;
		if argument_idx = arg_count then
		     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ""^a"".", arg);
		argument_idx = argument_idx + 1;
		call ssu_$arg_ptr (ssu_ptr, argument_idx, arg_ptr, arg_len);
		if arg_len > maxlength (separator) then call
			ssu_$abort_line (ssu_ptr, error_table_$bigarg, "The separator must be less than ^d characters.",
			maxlength (separator));
		separator = arg;
		sep_switch, sep_switch_given = "1"b;
	     end;
	else if arg = "-no_separator" | arg = "-nsep" then sep_switch = "0"b;
	else if arg = "-trailer_format" | arg = "-tfmt" then trailer_format = get_trailer_format ();

	else call ssu_$abort_line (ssu_ptr, error_table_$badopt, arg);
	L_arg_idx = argument_idx;
	return;

     end write_args;

get_numeric_arg:
     procedure returns (fixed bin);

	declare x			 fixed bin;

	argument_idx = argument_idx + 1;
	if argument_idx > arg_count then
	     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ""^a"".", arg);
	call ssu_$arg_ptr (ssu_ptr, argument_idx, arg_ptr, arg_len);
	x = cv_dec_check_ (arg, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, error_table_$bad_conversion, "^a", arg);
	return (x);
     end get_numeric_arg;
%page;
list_transactions:					/* Entry to list out trans numbers, authors, and date/times */
     entry (P_ssu_ptr, P_passport_info_ptr);

	call setup_request ();

	iocb_ptr = iox_$user_output;			/* list only goes to terminal */
	fill_index = 0;
	list_switch, update_current = "1"b;
	header_switch = "1"b;			/* print header by default */
	sep_switch = "0"b;
	long_switch = ^passport.brief_sw;

	parse_flags_word = DEFAULT_TO_ALL | DISALLOW_CMSG;
	if active_function then parse_flags_word = parse_flags_word | ALLOW_IHE;

	on cleanup call cleanup_handler ();
	call forum_trans_specs_$parse_specs (passport_info_ptr, 1, parse_flags_word, list_args, temp_idx, forum_dir,
	     forum_name, forum_trans_list_ptr);

	if temp_idx ^= 0 then do;
		temp_forum = "1"b;			/* remember so we can clean up */
		forum_idx = temp_idx;
	     end;

	if active_function then do;
		ret_val = "";
		do i = 1 to forum_trans_list.size;
		     if forum_trans_list.trans_num (i) = 0 then ret_val = ret_val || "unprocessed ";
		     else ret_val = ret_val || ltrim (char (forum_trans_list.trans_num (i))) || " ";
		end;
		call cleanup_handler ();
		return;
	     end;

	goto print_write_common;


list_args:					/* process list's arguments */
     proc (L_arg_idx);

	declare L_arg_idx		 fixed bin;

	argument_idx = L_arg_idx;
	call ssu_$arg_ptr (ssu_ptr, argument_idx, arg_ptr, arg_len);

	if active_function then goto BADOPT;
	if arg = "-brief" | arg = "-bf" then long_switch = "0"b;
	else if arg = "-header" | arg = "-he" then header_switch = "1"b;
	else if arg = "-no_header" | arg = "-nhe" then header_switch = "0"b;
	else if arg = "-long_subject" | arg = "-lgsj" then dont_truncate = "1"b;
	else if arg = "-output_file" | arg = "-of" then do;
		argument_idx = argument_idx + 1;
		if argument_idx > arg_count then
		     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Pathname of output file.");
		call ssu_$arg_ptr (ssu_ptr, argument_idx, arg_ptr, arg_len);
		call expand_pathname_ (arg, user_dir, user_entry, code);
		if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Expanding ^a.", arg);
		extend_switch = "1"b;
	     end;
	else if arg = "-fill" | arg = "-fi" then fill_index = 1;
	else if arg = "-line_length" | arg = "-ll" then do;
		line_len = get_numeric_arg ();
		if line_len < 40 then call ssu_$abort_line (ssu_ptr, 0, "Line length must be at least 40.");
		if fill_index = 0 then fill_index = 1;
	     end;
	else if arg = "-long" | arg = "-lg" then long_switch = "1"b;
	else if arg = "-no_fill" | arg = "-nfi" then fill_index = 2;
	else if arg = "-no_update" | arg = "-nud" then update_current = "0"b;
	else if arg = "-update" | arg = "-ud" then update_current = "1"b;
	else
BADOPT:	     call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);

	L_arg_idx = argument_idx;
	return;
     end list_args;
%page;
print_transactions:					/* Entry to print specified portions of proceedings */
     entry (P_ssu_ptr, P_passport_info_ptr);

	call setup_request ();

	fill_index, page_len = 0;
	print_switch, header_switch = "1"b;
	separator = "";
	sep_switch = "0"b;
	iocb_ptr = iox_$user_output;			/* only sends to terminal */
	code = 0;

	on cleanup call cleanup_handler ();
	parse_flags_word = DEFAULT_TO_UNPROC;
	call forum_trans_specs_$parse_specs (passport_info_ptr, 1, parse_flags_word, print_args, temp_idx, forum_dir,
	     forum_name, forum_trans_list_ptr);

	if temp_idx ^= 0 then do;
		temp_forum = "1"b;			/* remember so we can cleanup */
		forum_idx = temp_idx;
	     end;
	goto print_write_common;

print_args:					/* process print's arguments */
     proc (L_arg_idx);

	declare L_arg_idx		 fixed bin;

	argument_idx = L_arg_idx;
	call ssu_$arg_ptr (ssu_ptr, argument_idx, arg_ptr, arg_len);
	if arg = "-fill" | arg = "-fi" then fill_index = 1;
	else if arg = "-line_length" | arg = "-ll" then do;
		line_len = get_numeric_arg ();
		if line_len < 40 then call ssu_$abort_line (ssu_ptr, 0, "Line length must be at least 40.");
		if fill_index = 0 then fill_index = 1;
	     end;
	else if arg = "-no_fill" | arg = "-nfi" then fill_index = 2;
	else if arg = "-trailer_format" | arg = "-tfmt" then trailer_format = get_trailer_format ();

	else call ssu_$abort_line (ssu_ptr, error_table_$badopt, arg);
	L_arg_idx = argument_idx;
	return;
     end print_args;
%page;
print_write_common:

	if ^write_switch then do;
		if line_len = 0 then do;
			line_len = get_line_length_$switch (iocb_ptr, code);
			if code ^= 0 | line_len < 72 then do;
				line_len = 72;
				dont_truncate = "1"b;
				code = 0;
			     end;
		     end;
		if long_switch then sj_width = line_len - 56;
		else sj_width = line_len - 18 - forum_trans_list.max_personid_len;
		sj_width = max (sj_width, 6);
	     end;

	call ipc_$cutoff (passport.public_channel, (0));	/* Inhibit 'New transaction' messages */

	if should_be_filled ("0"b) then
	     call get_temp_segment_ ((owner), prseg_ptr, (0)); /* fill needs some working space */
	else prseg_ptr = null ();

	if write_switch then do;			/* open output segment */
		call hcs_$status_minf (user_dir, user_entry, (0), (0), (0), code);
		if code = error_table_$noentry then extend_switch = "0"b;
		code = 0;
		call open_iocb ();

		if long_switch then
		     call ioa_ ("^[Append^;Writ^]ing ^d transaction^[s^] to ^a>^a.", extend_switch, forum_trans_list.size,
			(forum_trans_list.size > 1), user_dir, user_entry);
		if extend_switch & formatted then call ioa_$ioa_switch_nnl (iocb_ptr, "^|");
	     end;
	else if user_entry ^= "" then call open_iocb ();

	if list_switch then do;
		if header_switch then do;
			if long_switch then call ioa_$ioa_switch (iocb_ptr, "Trans#  Lines    Date   Time   Author^56tSubject");
			else call ioa_$ioa_switch (iocb_ptr, "Trans#  Lines  Author^vtSubject", line_len - sj_width);
		     end;

		if update_current then do;
			do tidx = 1 to forum_trans_list.size while (update_current);
			     if forum_trans_list.trans_num (tidx) = passport.current_trans then update_current = "0"b;
			end;
			if update_current & forum_trans_list.trans_num (1) > 0 then
			     passport.current_trans = forum_trans_list.trans_num (1);
		     end;
	     end;

	fdoc.version_number = format_document_version_2;
	fdoc.indentation = 0;
	fdoc.line_length = line_len;
	string (fdoc.switches) = ""b;
	fdoc.galley_sw, fdoc.literal_sw, fdoc.dont_break_indented_lines_sw = "1"b;
	fdoc.syllable_size = 3;			/* Make fdoc happy */

	do tidx = 1 to forum_trans_list.size;		/* do the output */
	     call output_transaction (iocb_ptr,
		forum_trans_list.trans_num (tidx),
		forum_trans_list.list.pref (tidx),
		forum_trans_list.list.nref (tidx),
		forum_trans_list.list.flags.deleted (tidx));
	end;
	if formatted then call new_page ("1"b, "0"b);	/* spit out footer */

	call cleanup_handler ();			/* cleanup everything else */
	return;

open_iocb:
     proc ();

	declare iocb_name		 char (32);

	call ioa_$rsnnl ("vfile_ ""^a>^a"" ^[-extend^]", message, messlen, user_dir, user_entry, (extend_switch));

	iocb_name = request_id_ (clock ()) || ".forum";
	call iox_$attach_name (iocb_name, iocb_ptr, message, null (), code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Attaching iocb.");

	call iox_$open (iocb_ptr, 2, ""b, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Opening iocb.");

	return;
     end open_iocb;
%page;
output_transaction:					/* Internal procedure to output specified transactions */
     procedure (iocb_ptr, trans_index, pref, nref, deleted);

	declare (iocb_ptr		 pointer,
	        trans_index		 fixed binary,
	        (nref, pref)	 fixed binary unaligned,
	        deleted		 bit (1) unaligned) parameter;

	declare (pref_pic, nref_pic)	 pic "zz9999";

	if trans_index = -1 then do;			/* Chairman message */
		call forum_$get_message (forum_idx, message, code);
		if code ^= 0 then call ssu_$abort_line (ssu_ptr, code);
		call ioa_$ioa_switch_nnl (iocb_ptr, "^a", message);
		return;
	     end;
						/* get the transaction */
	call forum_trans_util_$read_trans (passport_info_ptr, temp_idx, trans_index, forum_user_trans_ptr, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Transaction ^d.", trans_index);

	trans_pic = trans_index;
	call date_time_ (forum_user_trans.time, trans_time);
	fmt_trans_time = date_time_$format ("date_time", forum_user_trans.time, "", "");

	if should_be_filled (forum_user_trans.unfilled) then do;
		call format_document_$string (forum_user_trans.text, fill_seg, fill_len, addr (fdoc), code);
		if code ^= 0 & code ^= error_table_$recoverable_error then
		     call ssu_$abort_line (ssu_ptr, code, "Filling transaction.");
		text_ptr = prseg_ptr;
	     end;
	else do;
		fill_len = forum_user_trans.text_length;
		text_ptr = addr (forum_user_trans.text);
	     end;
	no_lines = line_count (text, fill_len);

	if ^list_switch then do;

		if ^temp_forum & trans_index ^= 0 then passport.current_trans = trans_index;
						/* don't set current to unproc */
		if formatted & current_line + no_lines + 4 >= page_len then call new_page ("0"b, "0"b);

		if header_switch then do;
			if trans_index = 0 then
			     call ioa_$ioa_switch (iocb_ptr, "^/[????] (^d line^[s^]) ^a.^a **UNPROCESSED**^[ ^a^]", no_lines,
				(no_lines ^= 1), forum_user_trans.person_id, forum_user_trans.project_id,
				^formatted, substr (passport.unprocessed_forum_name, 1, passport.unprocessed_name_len));

			else call ioa_$ioa_switch (iocb_ptr, "^/[^a] (^i line^[s^]) ^a.^a ^a^[ ^a^]", ltrim (trans_pic), no_lines,
				(no_lines ^= 1), forum_user_trans.person_id, forum_user_trans.project_id, fmt_trans_time, ^formatted, forum_name);

			if forum_user_trans.subject ^= "" then do;
				if forum_user_trans.subject_length > line_len - 10 then call format_subject ();
				else call ioa_$ioa_switch (iocb_ptr, "Subject:  ^a", forum_user_trans.subject);
			     end;
		     end;

		if formatted &
		     ((no_lines > page_len - 4) | (index (text, FF) > 0)) then call print_split ();
		else do;
			call ioa_$ioa_switch_nnl (iocb_ptr, "^a", text);
			current_line = current_line + no_lines + 4;
		     end;

		if trans_index = 0 then pref = passport.unprocessed_reply_trans;
		pref_pic = pref;
		nref_pic = nref;
		call ioa_$ioa_switch_nnl (iocb_ptr, "^[---[^[^s????^;^a^]]---^[ (^[pref = [^a]^[, nref = [^a]) ^;^s) ^]^;^s^snref = [^a]) ^]^;^4s^]^[ (more)^]^;^8s^]^[" || separator || "^;^[^/^]^]",
		     (trailer_format > TFMT_none),
		     (trans_index = 0), ltrim (trans_pic),
		     ((pref ^= 0) | (nref ^= 0)) & trailer_format = TFMT_reference,
		     (pref ^= 0), ltrim (pref_pic), (nref ^= 0), ltrim (nref_pic),
		     ((trailer_format = TFMT_more) & (nref ^= 0)),
		     sep_switch, (trailer_format > TFMT_none));

		if print_switch then call iox_$control (iox_$user_output, "reset_more", null (), (0));

		if trans_index ^= 0 then do;
			if forum_idx < 0 then
			     call forum_$set_seen_switch (forum_idx, "", trans_index, "1"b, code);
			else call forum_$set_last_seen_idx (forum_idx, trans_index, "0"b, code);
			if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Setting seen switch.");
		     end;

	     end;					/* ^list */

	else do;					/* list */
		if ^long_switch then control = "[^[????^s^;^a^]]^[*^s^;^[!^; ^]^]^9t(^d)^16t^3s^a^s^vt^[^a^s^;^s^a^v.0t<More>^]";
		else do;
						/* TR21386: Fix list request to generate valid summary for unproc trans */
			if trans_index = 0 then control = "^4s[????]   (^d)^16t**UNPROCESSED**^32t^3s";
			else control = "^s[^a]^[*^s^;^[!^; ^]^]^9t(^i)^16t^8a ^2a:^2a  ";
			control = control || "^a.^a^s^56t^[^a^s^;^s^a^v.0t<More>^]";
		     end;
		call ioa_$ioa_switch (iocb_ptr, control, (trans_index = 0), ltrim (trans_pic),
		     (trans_index = passport.current_trans), deleted, no_lines, substr (trans_time, 1, 8),
		     substr (trans_time, 11, 2), substr (trans_time, 13, 2), forum_user_trans.person_id,
		     forum_user_trans.project_id, line_len - sj_width,
		     (length (rtrim (forum_user_trans.subject)) <= sj_width | dont_truncate),
		     forum_user_trans.subject, substr (forum_user_trans.subject, 1, sj_width - 6), sj_width);
	     end;
	return;
     end output_transaction;
%page;
print_split:
     proc ();

	declare (idx, jdx)		 fixed bin,
	        found_ff		 bit (1) aligned;

	idx = split (text, fill_len, page_len - 4);	/* header already printed */
	current_line = current_line + 3;

	do while ("1"b);
	     jdx = index (substr (text, 1, idx), FF);
	     if jdx > 0 then do;
		     found_ff = "1"b;
		     idx = jdx - 1;
		     do while (substr (text, jdx + 1, 1) = NL);
			jdx = jdx + 1;		/* Skip NL's after FF, not needed. */
		     end;
		     current_line = current_line + line_count (text, (idx));
		end;
	     else do;
		     jdx = idx;
		     found_ff = "0"b;
		end;

	     call ioa_$ioa_switch_nnl (iocb_ptr, "^a", substr (text, 1, idx));
	     if jdx = fill_len then do;
		     current_line = line_count (text, (idx)) + 2;
		     return;
		end;

	     call new_page ("0"b, ^found_ff);
	     call ioa_$ioa_switch (iocb_ptr, "");	/* blank line after header */
	     current_line = 1;
	     text_ptr = addcharno (text_ptr, jdx);
	     fill_len = fill_len - jdx;
	     idx = split (text, fill_len, page_len - 2);
	end;
     end print_split;

line_count:
     proc (string, len) returns (fixed bin);

	declare string		 char (*),
	        (len, kdx)		 fixed bin (21),
	        P_max		 fixed bin,
	        (count, max)	 fixed bin,
	        (idx, jdx)		 fixed bin;

	max = 100000;
	goto COMMON;

split: entry (string, len, P_max) returns (fixed bin);

	max = P_max;
COMMON:

/* 524288 = 128K words of characters */

	if len > 524288 then return (max);
	idx, count = 0;
	kdx = len;

	begin;

	     declare 1 text,
		     2 used	      char (idx),
		     2 after	      char (kdx);

	     text = string;
	     do while (kdx > 0 & count < max);
		jdx = index (after, NL);
		if jdx = 0 then kdx = -1;
		else do;
			idx = idx + jdx;
			kdx = kdx - jdx;
			count = count + 1;
		     end;
	     end;
	end;
	if max = 100000 then return (count);
	if kdx = -1 then idx = len;
	return (idx);

     end line_count;


new_page:
     proc (last_page, in_trans);

	declare (last_page, in_trans)	 bit (1) aligned,
	        blanks		 fixed bin;

	if page_number > 0 then do;			/* write footer */
		if in_trans then blanks = 1;
		else blanks = page_len - current_line;
		call ioa_$ioa_switch_nnl (iocb_ptr, "^v(^/^)^v(_^)^/Subject: ^a^[^|^]", blanks, line_len,
		     substr (page_subject, 1, min (72, line_len) - 9), ^last_page);
	     end;

	if last_page then return;
	page_number = page_number + 1;
	current_line = 0;
	page_subject = forum_user_trans.subject;
	call ioa_$ioa_switch (iocb_ptr, rtrim (page_header), page_number);

	return;
     end new_page;
%page;
format_subject:
     proc ();

	declare 1 fdo		 aligned like format_document_options,
	        subject_lines	 fixed bin,
	        temp		 char (2 * forum_user_trans.subject_length),
	        temp_len		 fixed bin (21);

	fdo.version_number = format_document_version_2;
	fdo.indentation = 10;
	fdo.line_length = line_len - 10;
	string (fdo.switches) = ""b;
	fdo.literal_sw, fdo.galley_sw, fdo.dont_compress_sw, fdo.dont_break_indented_lines_sw = "1"b;
	fdo.syllable_size = 3;			/* Make fdoc happy */

	call format_document_$string (forum_user_trans.subject, temp, temp_len, addr (fdo), code);
	if (code ^= 0) & code ^= error_table_$recoverable_error then
	     call ssu_$abort_line (ssu_ptr, code, "Unable to format subject.");

	if formatted then do;			/* account for multi-line subject */
		subject_lines = line_count (temp, temp_len) - 1; /* -1 because we already counted subject as one line */
		current_line = current_line + subject_lines;
		no_lines = no_lines + subject_lines;
	     end;

	call ioa_$ioa_switch (iocb_ptr, "Subject:  ^a", substr (temp, 11, temp_len - 11));
	return;
     end format_subject;
%page;
delete_transactions:				/* Entry to allow chairman to logically remove */
     entry (P_ssu_ptr, P_passport_info_ptr);		/* and retrieve transactions */

	delete_switch = "1"b;
	goto DLRT_COMMON;

retrieve_transactions:
     entry (P_ssu_ptr, P_passport_info_ptr);

	delete_switch = "0"b;
DLRT_COMMON:
	call setup_request ();

	on cleanup call cleanup_handler ();
	parse_flags_word = NON_NULL | DISALLOW_MTG | DISALLOW_REV | DISALLOW_IDL | DISALLOW_BYCHAIN;

	if ^delete_switch then
	     parse_flags_word = parse_flags_word | MUST_BE_DELETED | DISALLOW_UNPROC | DISALLOW_CMSG;
	else parse_flags_word = parse_flags_word | ALLOW_DELETED;

	call forum_trans_specs_$parse_specs (passport_info_ptr, 1, parse_flags_word, delete_args, temp_idx, forum_dir,
	     forum_name, forum_trans_list_ptr);

	current_switch = "0"b;
	do tidx = 1 to forum_trans_list.size;
	     i = forum_trans_list.trans_num (tidx);
	     if i = 0 then call delete_unproc ();
	     else if i = -1 then do;
		     call forum_$set_message (forum_idx, "", code);
		     if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Deleting message.");
		end;
	     else do;
		     call forum_$set_delete_sw (forum_idx, i, delete_switch, code);
		     if code ^= 0 then
			call ssu_$print_message (ssu_ptr, code, "Setting delete switch on transaction ^d.", i);
		     if delete_switch then
			if i = passport.current_trans then current_switch = "1"b; /* oops, deleted current */
		end;
	end;

	if current_switch then do;			/* set current to next undeleted transaction */
		do tidx = passport.current_trans repeat tidx + 1 while (current_switch & delete_switch);
		     call forum_$trans_ref_info (forum_idx, tidx, (0), (0), (0), delete_switch, code);
		     if code = forum_et_$invalid_trans_idx then current_switch = "0"b;
		     else if code = forum_et_$trans_reaped
		     then do;
			     delete_switch = "1"b;	/* expluge is very deleted */
			     current_switch = "0"b;
			end;
		     else if code ^= 0 then call ssu_$abort_line (ssu_ptr, code);
		end;
		if current_switch then passport.current_trans = tidx - 1;
		else do;
			passport.current_trans = 0;
			call forum_$forum_limits (forum_idx, ONLY_UNDELETED, (0), (0), tidx, (0), ("0"b), code);
			if code ^= 0 then do;
				call ssu_$abort_line (ssu_ptr, code);
			     end;
		     end;
	     end;

	call cleanup_handler;
	return;
%page;
delete_args:					/* process dl/rt args - there aren't any */
     proc (L_arg_idx);

	declare L_arg_idx		 fixed bin;

	call ssu_$arg_ptr (ssu_ptr, L_arg_idx, arg_ptr, arg_len);
	call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
	return;
     end delete_args;


delete_unproc:
     proc ();

	free passport.unprocessed_trans_ptr -> forum_user_trans;
	passport.unprocessed_reply_trans = 0;
	passport.unprocessed_forum_dir = "";
	passport.unprocessed_forum_name = "";
	return;
     end delete_unproc;
%page;
reset_transaction:					/* Entry to allow user to reset current trans index */
     entry (P_ssu_ptr, P_passport_info_ptr);

	call setup_request ();

	current_switch = "1"b;			/* reset current by default */

	parse_flags_word = ONLY_ONE | NON_NULL | DISALLOW_MTG | DISALLOW_REV | DISALLOW_IDL | DISALLOW_UNPROC |
	     DISALLOW_BYCHAIN | DISALLOW_CMSG;
	i = 0;

	on cleanup call cleanup_handler ();

	call forum_trans_specs_$parse_specs (passport_info_ptr, 1, parse_flags_word, reset_args, temp_idx, forum_dir,
	     forum_name, forum_trans_list_ptr);

	tidx = forum_trans_list.trans_num (1);

	if i = 0 then passport.current_trans = tidx;
	else if i = 2 then passport.current_trans = tidx - 1;
	else do;
		if i = 1 then tidx = tidx + 1;
		if forum_idx > 0 then do;
			call forum_$set_last_seen_idx (forum_idx, tidx - 1, "1"b, code);
			if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Setting highest seen.");
		     end;
		else call ssu_$abort_line (ssu_ptr, 0, "reset -^[highest^;new^] is obsolete, use seen switches instead.",
			i = 1);
	     end;
	call cleanup_handler ();
	return;

reset_args:					/* process reset's arg */
     proc (L_arg_idx);

	declare L_arg_idx		 fixed bin;

	argument_idx = L_arg_idx;
	call ssu_$arg_ptr (ssu_ptr, argument_idx, arg_ptr, arg_len);

	if arg = "-current" then i = 0;
	else if arg = "-highest" then i = 1;
	else if arg = "-next" then i = 2;
	else if arg = "-new" then i = 3;
	else call ssu_$abort_line (ssu_ptr, error_table_$badopt, arg);
	return;
     end reset_args;
%page;
should_be_filled:
     proc (filled_bit) returns (bit (1));

	declare filled_bit		 bit (1) aligned;

	if fill_index = 1 then return ("1"b);
	if fill_index = 2 then return ("0"b);
	if passport.print_fill then return (^filled_bit);
	return ("0"b);

     end;

get_trailer_format:
     procedure () returns (fixed bin);

	if argument_idx = arg_count then
	     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ^a.", arg);
	argument_idx = argument_idx + 1;
	call ssu_$arg_ptr (ssu_ptr, argument_idx, arg_ptr, arg_len);

	if arg = "none" then return (TFMT_none);
	else if arg = "number" | arg = "nb" then return (TFMT_number);
	else if arg = "more" then return (TFMT_more);
	else if arg = "references" | arg = "refs" then return (TFMT_reference);
	else call ssu_$abort_line (ssu_ptr, 0, "Invalid trailer format: ^a.", arg);

     end get_trailer_format;
%page;
setup_request:
     procedure ();

	ssu_ptr = P_ssu_ptr;
	passport_info_ptr = P_passport_info_ptr;
	call ssu_$return_arg (ssu_ptr, arg_count, active_function, ret_ptr, ret_len);
	owner = ssu_$get_subsystem_and_request_name (ssu_ptr);

	forum_idx = passport.forum_idx;
	forum_name = no_suffix_name;
	temp_forum, formatted, dont_truncate = "0"b;
	temp_idx = 0;
	line_len = passport.output_fill_width;
	write_switch, print_switch, list_switch = "0"b;
	user_entry = "";
	forum_trans_list_ptr, iocb_ptr, prseg_ptr = null ();
	trailer_format = passport.trailer_format;
	return;

     end setup_request;
%page;
cleanup_handler:
     procedure ();

	if temp_forum then call forum_$close_forum (forum_idx, (0));

	if iocb_ptr ^= iox_$user_output & iocb_ptr ^= null () then do;
		call iox_$close (iocb_ptr, (0));
		call iox_$detach_iocb (iocb_ptr, (0));
		call iox_$destroy_iocb (iocb_ptr, (0));
	     end;

	call ipc_$reconnect (passport.public_channel, (0));
	if prseg_ptr ^= null then call release_temp_segment_ (owner, prseg_ptr, (0));

	if forum_trans_list_ptr ^= null () then free forum_trans_list;

	return;
     end cleanup_handler;

     end forum_output_requests_$write_transactions;
