/****^  ***************************************************************
        *                                                             *
        * Copyright, (C) BULL HN Information Systems Inc., 1992       *
        *                                                             *
        * Copyright (c) 1982 by Massachusetts Institute of Technology *
        *                                                             *
        *************************************************************** */





/****^  HISTORY COMMENTS:
  1) change(91-09-05,Huen), approve(91-09-05,MCR8248),
     audit(92-01-08,Zimmerman), install(92-04-27,MR12.5-1014):
     Fix several TRs (phx21375, 21376, 21377) related to the current trans.
  2) change(92-09-10,Zimmerman), approve(92-09-10,MCR8258),
     audit(92-09-22,WAAnderson), install(92-09-28,MR12.5-1020):
     Problem with current being set to deleted txn., or being set to -1.
                                                   END HISTORY COMMENTS */



/* This module contains the following forum requests:

   goto   quit

and the useful routine find_forum for turning a string into a forum path.

Originally coded by J. Spencer Love and Jay Pattin 6/81
modified for ssu_ 8/21/81 Jay Pattin
changed search path searching to fix forum bug 7 6/27/82 Jay Pattin
new request table management 11/3/82 Jay Pattin
Make notifications work with multiple invocations. 11/15/84 Jay Pattin
*/

forum_requests_$set_forum:
     procedure (P_passport_info_ptr, P_forum_spec, P_status);

	declare P_passport_info_ptr	 ptr,
	        P_ssu_ptr		 ptr,
	        P_forum_spec	 char (*),
	        P_forum_idx		 fixed bin,
	        P_forum_dir		 char (*),
	        P_forum_name	 char (*),
	        P_forum_name_len	 fixed bin,
	        P_status		 fixed bin (35);

	declare (addr, codeptr, length, min, null, rtrim, search, string, substr)
				 builtin;

	declare cleanup		 condition;

	declare answer		 char (8) varying,
	        arg_count		 fixed bin,
	        arg_idx		 fixed bin,
	        arg_len		 fixed bin (21),
	        arg_ptr		 ptr,
	        egress		 label variable,
	        force_switch	 bit (1) aligned,
	        forum_arg_count	 fixed bin,
	        forum_arg_len	 fixed bin (21),
	        forum_arg_ptr	 ptr,
	        forum_dir		 char (168),
	        forum_idx		 fixed bin,
	        full_forum_name	 char (32),	/* has suffix on it */
	        forum_name_len	 fixed bin,
	        message		 char (256),
	        return_switch	 bit (1) aligned,
	        ssu_ptr		 ptr,
	        user_name		 char (32),
	        status		 fixed bin (35),
	        want_forum		 bit (1) aligned;

	declare static_event_channel	 fixed bin (71) static init (0),
	        static_passport_list_ptr pointer static init (null ());

	declare 1 event_call_info	 aligned based (event_info_ptr),
		2 channel_id	 fixed bin (71),
		2 forum_message,
		  3 forum_uid	 bit (36) aligned,	/* what happened? */
		  3 offset	 bit (18),	/* who did it? */
		2 pad		 fixed bin (71),	/* we don't care about this */
		2 data_ptr	 ptr;		/* pointer to our passport */

	declare arg		 char (arg_len) based (arg_ptr),
	        forum_arg		 char (forum_arg_len) based (forum_arg_ptr),
	        forum_name		 char (forum_name_len) based (addr (full_forum_name));

	declare (
	        forum_et_$blank_forum_name,
	        forum_et_$forum_deleted,
	        forum_et_$long_forum_name,
	        forum_et_$not_in_search_list,
	        forum_et_$no_such_forum,
	        forum_et_$old_format,
	        forum_request_tables_$chairman_requests,
	        forum_request_tables_$user_requests,
	        error_table_$badopt,
	        error_table_$entlong,
	        error_table_$noarg,
	        error_table_$noaccess,
	        error_table_$no_info,
	        error_table_$notadir)	 fixed bin (35) external;

	declare iox_$user_output	 ptr external;

	declare command_query_	 entry () options (variable),
	        forum_trans_util_$clear_cache entry (ptr),
	        forum_$close_forum	 entry (fixed bin, fixed bin (35)),
	        forum_$convert_attendee_idx entry (fixed bin, bit (18), char (*), fixed bin (35)),
	        forum_$get_forum_path	 entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	        forum_$get_message	 entry (fixed bin, char (*), fixed bin (35)),
	        forum_$forum_limits	 entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin,
				 bit (36) aligned, fixed bin (35)),
	        forum_$list_v1_forum_acl entry (char (*), char (*), ptr, ptr, fixed bin, fixed bin (35)),
	        forum_$list_forum_acl	 entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35)),
	        forum_$open_forum	 entry (char (*), char (*), fixed bin, fixed bin (35)),
	        forum_$set_event_channel_idx
				 entry (fixed bin, fixed bin (71), fixed bin (35)),
	        forum_$set_switch_idx	 entry (fixed bin, char (*), char (*), bit (1) aligned, fixed bin (35)),
	        forum_$validate_uid	 entry (fixed bin, bit (36) aligned, fixed bin (35)),
	        convert_ipc_code_	 entry (fixed bin (35)),
	        expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	        get_system_free_area_	 entry returns (ptr),
	        (ioa_, ioa_$nnl)	 entry options (variable),
	        iox_$control	 entry (ptr, char (*), ptr, fixed bin (35)),
	        ipc_$create_ev_chn	 entry (fixed bin (71), fixed bin (35)),
	        ipc_$decl_ev_call_chn	 entry (fixed bin (71), ptr, ptr, fixed bin, fixed bin (35)),
	        ipc_$delete_ev_chn	 entry (fixed bin (71), fixed bin (35)),
	        search_paths_$get	 entry (char (*), bit (36), char (*), ptr, ptr, fixed bin, ptr, fixed bin (35)),
	        ssu_$abort_line	 entry options (variable),
	        ssu_$abort_subsystem	 entry options (variable),
	        ssu_$arg_count	 entry (ptr, fixed bin),
	        ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21)),
	        ssu_$list_request_tables entry (ptr, ptr, fixed bin, ptr, fixed bin (35)),
	        ssu_$print_message	 entry options (variable),
	        ssu_$set_request_tables entry (ptr, ptr, fixed bin (35));
%page;
%include query_info;
%page;
%include forum_passport;
%page;
%include forum_flags;
%page;
%include forum_user_trans;
%page;
%include ssu_request_tables_list;
%page;
%include sl_info;
%include sl_control_s;
%page;
/* forum_requests_$set_forum:  procedure (P_subsystem_info_ptr, P_forum_spec, P_status);			*/

	passport_info_ptr = P_passport_info_ptr;
	ssu_ptr = passport.ssu_ptr;

	forum_idx = 0;
	egress = SET_MEETING_EXIT;

	call find_forum_path (P_forum_spec);

	on cleanup call clean_up_goto (passport.forum_idx);

	call forum_$open_forum (forum_dir, full_forum_name, forum_idx, status);
	if status ^= 0 then call error (status);

	call make_forum_current ();

	P_status = 0;

	return;

SET_MEETING_EXIT:
	call clean_up_goto (passport.forum_idx);

	P_status = status;

	return;
%page;
forum_requests_$open_forum:
     entry (P_forum_spec, P_forum_idx, P_forum_dir, P_forum_name, P_status);

	egress = OPEN_MEETING_EXIT;
	forum_idx = 0;
	passport_info_ptr = null ();

	call find_forum_path (P_forum_spec);

	on cleanup call clean_up_goto (P_forum_idx);

	call forum_$open_forum (forum_dir, full_forum_name, forum_idx, status);
	if status ^= 0 then call error (status);

	P_forum_idx = forum_idx;
	P_forum_dir = forum_dir;
	P_forum_name = substr (full_forum_name, 1, forum_name_len);
	P_status = 0;

	return;

OPEN_MEETING_EXIT:
	call clean_up_goto (P_forum_idx);

	P_forum_dir = "";
	P_forum_name = "";
	P_status = status;

	return;
%page;
forum_requests_$goto_request:
     entry (P_ssu_ptr, P_passport_info_ptr);

	ssu_ptr = P_ssu_ptr;
	passport_info_ptr = P_passport_info_ptr;

	call ssu_$arg_count (ssu_ptr, arg_count);

	forum_arg_count = 0;
	return_switch, want_forum = "0"b;

	do arg_idx = 1 to arg_count;

	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);

	     if want_forum | substr (arg, 1, min (1, arg_len)) ^= "-" then do;
		     forum_arg_ptr = arg_ptr;
		     forum_arg_len = arg_len;
		     forum_arg_count = forum_arg_count + 1;
		     want_forum = "0"b;
		end;
	     else do;
		     if arg = "-meeting" | arg = "-mtg" then do;
			     if arg_idx = arg_count then call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ^a.", arg);
			     else want_forum = "1"b;
			end;
		     else if arg = "-return_on_error" | arg = "-roe" then return_switch = "1"b;
		     else if arg = "-no_return_on_error" | arg = "-nroe" then return_switch = "0"b;
		     else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
		end;
	end;

	if forum_arg_count ^= 1 then call ssu_$abort_line (ssu_ptr, 0, "Usage:  g meeting_name {-control_arg}");

	egress = GOTO_EXIT;
	forum_idx = 0;

	on cleanup call clean_up_goto (passport.forum_idx);

	if ^return_switch then call close_old_forum ();

	call find_forum_path (forum_arg);

	call forum_$open_forum (forum_dir, full_forum_name, forum_idx, status);
	if status ^= 0 then
	     call ssu_$abort_line (ssu_ptr, status, "^a^[>^]^a", forum_dir, forum_dir ^= ">", forum_name);

	if return_switch then call close_old_forum ();

	call make_forum_current ();

	if passport.unprocessed_trans_ptr ^= null () then
	     if passport.forum_name ^= passport.unprocessed_forum_name then
		call ssu_$print_message (ssu_ptr, 0, "Warning, there is an unprocessed transaction in the ^a meeting.",
		     substr (passport.unprocessed_forum_name, 1, passport.unprocessed_name_len));

	return;

GOTO_EXIT:
	call ssu_$abort_line (ssu_ptr, status, "^a", forum_arg);
%page;
forum_requests_$find_forum:
     entry (P_forum_spec, P_forum_dir, P_forum_name, P_forum_name_len, P_status);

	egress = FIND_MEETING_EXIT;

	call find_forum_path (P_forum_spec);

	P_forum_dir = forum_dir;
	P_forum_name = full_forum_name;
	P_forum_name_len = forum_name_len;

	P_status = 0;
	return;

FIND_MEETING_EXIT:
	P_status = status;
	return;
%page;
find_forum_path:
     procedure (arg);

	declare (before, index, reverse) builtin;
	declare arg		 char (*);
	declare idx		 fixed bin,
	        old_path		 bit (1) aligned,
	        real_dir		 char (168),
	        real_entry		 char (32);

	if search (arg, "<>") - 1 >= 0 then do;
		if index (arg, ".") > 0 & before (reverse (rtrim (arg)), ".") = "lortnoc" then goto V1PATH;
		call expand_pathname_$add_suffix (arg, "forum", forum_dir, full_forum_name, status);
		if status ^= 0 then
PATHERR:		     if status = error_table_$entlong
		     then call error (forum_et_$long_forum_name);
		     else call error (status);
		call forum_$get_forum_path (forum_dir, full_forum_name, real_dir, real_entry, status);
		if status = 0 then
		     forum_name_len = length (rtrim (real_entry)) - length (".forum");
		else if status ^= forum_et_$no_such_forum & status ^= error_table_$noaccess &
		     status ^= error_table_$no_info then
		     call error (status);
		else do;
V1PATH:			call expand_pathname_$add_suffix (arg, "control", forum_dir, full_forum_name, status);
			if status ^= 0 then goto PATHERR;
			call forum_$get_forum_path (forum_dir, full_forum_name, real_dir, real_entry, status);
			if status ^= 0 then call error (status);
			forum_name_len = length (rtrim (real_entry)) - length (".control");
		     end;

		full_forum_name = real_entry;
		forum_dir = real_dir;
		return;
	     end;

	forum_name_len = length (rtrim (arg));
	old_path = "0"b;

	if forum_name_len > length (".forum") then
	     if substr (arg, forum_name_len - length (".forum") + 1) = ".forum" then
		forum_name_len = forum_name_len - length (".forum");

	if forum_name_len > length (".control") then
	     if substr (arg, forum_name_len - length (".control") + 1) = ".control" then do;
		     forum_name_len = forum_name_len - length (".control");
		     old_path = "1"b;
		end;

	if forum_name_len < 1 then call error (forum_et_$blank_forum_name);
	if forum_name_len > 26 then call error (forum_et_$long_forum_name);

	forum_name = substr (arg, 1, forum_name_len);	/* Assign only the "interesting" part through the overlay.	*/
	if old_path then substr (full_forum_name, forum_name_len + 1) = ".control";
	else substr (full_forum_name, forum_name_len + 1) = ".forum";

	sl_info_p = null ();
	on cleanup begin;
		if sl_info_p ^= null () then free sl_info;
	     end;

	call search_paths_$get ("forum", sl_control_default, "", null (), get_system_free_area_ (), sl_info_version_1,
	     sl_info_p, status);
	if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "Getting ""forum"" search path.");

	forum_dir = "";
	if old_path then goto V1ENT;

	status = 1;
	do idx = 1 to sl_info.num_paths while (status ^= 0);
	     if sl_info.paths (idx).code = 0 then
		call forum_$get_forum_path (sl_info.pathname (idx), full_forum_name, real_dir, real_entry, status);
	     if status ^= 0 then
		if status ^= forum_et_$no_such_forum & status ^= error_table_$noaccess &
		     status ^= error_table_$no_info & status ^= error_table_$notadir then
		     call error (status);
	end;

	if status = 0 then
	     forum_name_len = length (rtrim (real_entry)) - length (".forum");
	else if status = forum_et_$no_such_forum | status = error_table_$notadir | status = error_table_$no_info |
	     status = error_table_$notadir then do;
		full_forum_name = forum_name || ".control";
V1ENT:		status = 1;
		do idx = 1 to sl_info.num_paths while (status ^= 0);
		     if sl_info.paths (idx).code = 0 then
			call forum_$get_forum_path (sl_info.pathname (idx), full_forum_name, real_dir,
			     real_entry, status);
		end;
		if status ^= 0 then call error (forum_et_$not_in_search_list);
		forum_name_len = length (rtrim (real_entry)) - length (".control");
	     end;
	else call error (status);

	free sl_info;
	forum_dir = real_dir;
	full_forum_name = real_entry;

	return;

     end find_forum_path;
%page;
make_forum_current:
     procedure ();

	declare last_seen_trans	 fixed bin,	/* highest seen only */
	        first_trans		 fixed bin,
	        last_trans		 fixed bin,
	        new_trans		 fixed bin;


	call forum_$forum_limits (forum_idx, ONLY_UNDELETED, last_seen_trans, first_trans, last_trans, new_trans, forum_flags_word,
	     status);
	if status ^= 0 then call error (status);

	passport.forum_idx = forum_idx;
	passport.forum_dir = forum_dir;
	passport.forum_name = full_forum_name;
	passport.forum_name_len = forum_name_len;
	passport.current_trans = last_seen_trans;

	passport.read_only = forum_flags.read_only;

	if passport.public_channel = 0 then
	     passport.public_channel = get_event_channel ();

	call forum_$set_event_channel_idx (forum_idx, passport.public_channel, status);
	if status ^= 0 then call error (status);

	if forum_flags.chairman then call set_request_tables (addr (forum_request_tables_$chairman_requests));
	else call set_request_tables (addr (forum_request_tables_$user_requests));

	if ^passport.brief_sw then
	     call ioa_ ("^a meeting:  ^d new, ^d last^[ (You are the chairman)^]^[ (Read-only)^].", forum_name,
		new_trans, last_trans, forum_flags.chairman, forum_flags.read_only);

	if forum_flags.adjourned then call ioa_ ("** The meeting has been adjourned. **");
	if forum_flags.print_acl_message then call print_acl_message ();
	if forum_flags.print_cm_message then do;
		call forum_$get_message (forum_idx, message, status);
		if status = 0 then call ioa_$nnl ("^a", message);
		call forum_$set_switch_idx (forum_idx, "", "message_seen", "1"b, (0));
	     end;
	passport.print_message = ^forum_flags.print_cm_message;

	return;

     end make_forum_current;
%page;
print_acl_message:
     proc ();

	declare acl_ptr		 ptr,
	        acl_count		 fixed bin,
	        (person, project)	 fixed bin,
	        1 acl		 (acl_count) aligned based (acl_ptr),
		2 access_name	 char (32),
		2 modes		 bit (36),
		2 xmodes		 bit (36),
		2 code		 fixed bin (35);

	acl_ptr = null ();
	on cleanup begin;
		if acl_ptr ^= null () then free acl;
	     end;

	call forum_$list_forum_acl (forum_dir, full_forum_name, passport.area_ptr, acl_ptr, null (), acl_count, status);
	if status ^= 0 then
	     if status = forum_et_$old_format then do;
		     call forum_$list_v1_forum_acl (forum_dir, full_forum_name, passport.area_ptr, acl_ptr, acl_count,
			status);
		     if status ^= 0 then goto PUNT;

		     do arg_idx = 1 to acl_count;
			acl.xmodes (arg_idx) = acl.modes (arg_idx);
		     end;
		end;
	     else do;
PUNT:		     call ssu_$print_message (ssu_ptr, status, "Listing ACL on meeting.");
		     return;
		end;

	if acl.access_name (acl_count) = "*.*.*" & acl.xmodes (acl_count) ^= ""b then
	     call ioa_ ("The meeting is public.");
	else do;
		person, project = 0;
		do arg_idx = 1 to acl_count while (substr (acl.access_name (arg_idx), 1, 2) ^= "*.");
		     if acl.xmodes (arg_idx) ^= ""b then person = person + 1;
		end;
		do arg_idx = arg_idx to acl_count;
		     if acl.xmodes (arg_idx) ^= ""b & acl.access_name (arg_idx) ^= "*.SysDaemon.*" then project = project + 1;
		end;
		call ioa_ ("There are ^d user^[s^] and ^d project^[s^] eligible to attend.", person, person ^= 1,
		     project, project ^= 1);
	     end;

	free acl;

	if forum_flags.acl_has_changed then do;
		call ioa_ ("Access to this meeting has changed, type ""list_users -eligible"".");
		call forum_$set_switch_idx (forum_idx, "", "access_changed", "0"b, status);
		if status ^= 0 then call ssu_$print_message (ssu_ptr, status, "Resetting access change switch.");
	     end;

	return;
     end print_acl_message;
%page;
clean_up_goto:
     procedure (P_forum_idx);

	declare P_forum_idx		 fixed bin;

	if forum_idx = 0 then return;

	if P_forum_idx = forum_idx then P_forum_idx = 0;

	call forum_$close_forum (forum_idx, (0));

	if passport_info_ptr ^= null () then
	     if passport.forum_idx = 0 then call set_request_tables (addr (forum_request_tables_$user_requests));

	return;

     end clean_up_goto;
%page;
forum_requests_$quit_request:
     entry (P_ssu_ptr, P_passport_info_ptr);

	ssu_ptr = P_ssu_ptr;
	passport_info_ptr = P_passport_info_ptr;
	force_switch = "0"b;

	call ssu_$arg_count (ssu_ptr, arg_count);

	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if substr (arg, 1, 1) ^= "-" then call ssu_$abort_line (ssu_ptr, 0, "Usage: quit {-control_arg}");
	     if arg = "-force" | arg = "-fc" then force_switch = "1"b;
	     else call ssu_$abort_line (ssu_ptr, error_table_$badopt, arg);
	end;

	if ^force_switch & passport.unprocessed_trans_ptr ^= null () then do;
		query_info.version = query_info_version_5;
		string (query_info.switches) = "0"b;
		query_info.yes_or_no_sw = "1"b;
		query_info.status_code, query_info.query_code = 0;
		query_info.question_iocbp, query_info.answer_iocbp = null ();
		query_info.repeat_time = 0;
		call command_query_ (addr (query_info), answer, "forum (quit)",
		     "There is an unprocessed transaction.^/Do you still wish to quit?");
		if answer = "no" then return;
	     end;

	call ssu_$abort_subsystem (ssu_ptr);

	return;
%page;
close_old_forum:
     procedure ();

	if passport.forum_idx = 0 then return;

	call forum_trans_util_$clear_cache (passport_info_ptr);

	call forum_$close_forum (passport.forum_idx, status);
	if status ^= 0 then
	     if status = forum_et_$forum_deleted then
		call ssu_$print_message (ssu_ptr, status, "^a^[>^]^a", passport.forum_dir, passport.forum_dir ^= ">",
		     passport.forum_name);
	     else call ssu_$abort_line (ssu_ptr, status, "^a^[>^]^a", passport.forum_dir, passport.forum_dir ^= ">",
		     passport.forum_name);

	call set_request_tables (addr (forum_request_tables_$user_requests));

	passport.forum_name = "";
	passport.forum_dir = "";

	return;

     end close_old_forum;
%page;
set_request_tables:
     proc (rqt_ptr);

	declare rqt_ptr		 ptr;

	rtl_ptr = null ();
	on cleanup begin;
		if rtl_ptr ^= null () then free request_tables_list;
	     end;

	call ssu_$list_request_tables (ssu_ptr, passport.area_ptr, REQUEST_TABLES_LIST_VERSION_1, rtl_ptr, status);
	if status = 0 then
	     if request_tables_list.table_ptr (1) = rqt_ptr then return; /* No change, save work */

	request_tables_list.table_ptr (1) = rqt_ptr;

	call ssu_$set_request_tables (ssu_ptr, rtl_ptr, status);
	if status ^= 0 then call error (status);

	return;
     end set_request_tables;

get_event_channel:
     procedure () returns (fixed bin (71));

	declare event_channel	 fixed bin (71);

	if static_event_channel ^= 0 then return (static_event_channel);

	call ipc_$create_ev_chn (event_channel, status);
	call convert_ipc_code_ (status);
	if status ^= 0 then call error (status);

	call ipc_$decl_ev_call_chn (event_channel, codeptr (forum_requests_$wakeup_handler),
	     null (), 0, status);

	if status ^= 0 then do;
		call ipc_$delete_ev_chn (event_channel, (0));
		call convert_ipc_code_ (status);
		call error (status);
	     end;

	static_event_channel = event_channel;
	return (event_channel);

     end get_event_channel;
%page;
/* This is the procedure that is called when ring 2 sends a wakeup */

forum_requests_$wakeup_handler:
     entry (event_info_ptr);

	declare event_info_ptr	 ptr;

	if event_call_info.offset = ""b then return;	/* Yup, we are still here. */

	do passport_info_ptr = static_passport_list_ptr repeat passport.next_passport_ptr
	     while (passport_info_ptr ^= null ());

	     call forum_$validate_uid (passport.forum_idx, event_call_info.forum_uid,
		status);
	     if status = 0 then do;			/* This is the right meeting */
		     call forum_$convert_attendee_idx (passport.forum_idx,
			(event_call_info.offset), user_name, status);
		     if status ^= 0 then user_name = "<Unknown>";
		     call ioa_ ("A new transaction has been entered by ^a.", user_name);
		     call iox_$control (iox_$user_output, "start", null (), (0));
		     return;
		end;
	end;

	return;
%page;
forum_requests_$add_passport:
     entry (P_passport_info_ptr);

	passport_info_ptr = P_passport_info_ptr;
	passport.next_passport_ptr = static_passport_list_ptr;
	static_passport_list_ptr = passport_info_ptr;
	return;


forum_requests_$remove_passport:
     entry (P_passport_info_ptr);

	declare old_pp_ptr		 pointer;

	old_pp_ptr = null ();
	do passport_info_ptr = static_passport_list_ptr repeat passport.next_passport_ptr
	     while (passport_info_ptr ^= null ());
	     if passport_info_ptr = P_passport_info_ptr then do;
		     if old_pp_ptr = null () then static_passport_list_ptr = passport.next_passport_ptr;
		     else old_pp_ptr -> passport.next_passport_ptr = passport.next_passport_ptr;
		     return;
		end;
	end;
	return;


error:
     procedure (P_status);

	declare P_status		 fixed bin (35);

	status = P_status;

	go to egress;

     end error;

     end forum_requests_$set_forum;
