/****^  ***************************************************************
        *                                                             *
        * Copyright, (C) BULL HN Information Systems Inc., 1992       *
        *                                                             *
        * Copyright, (C) Massachusetts Institute of Technology, 1986  *
        *                                                             *
        * Copyright (c) 1982 by Massachusetts Institute of Technology *
        *                                                             *
        *************************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7356),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Added rechain and unchain requests.
  2) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Note adjourned switch in . request.  Speed up chairman request and don't
     return .* in cm name.
  3) change(91-08-29,Huen), approve(91-08-29,MCR8248),
     audit(92-01-08,Zimmerman), install(92-04-27,MR12.5-1014):
     Fix several TRs (phx21375, 21376, 21377) related to the current trans.
  4) change(92-09-10,Zimmerman), approve(92-09-10,MCR8258),
     audit(92-09-22,WAAnderson), install(92-09-28,MR12.5-1020):
     Problem with current being set to deleted txn., or being set to -1.
                                                   END HISTORY COMMENTS */


forum_misc_requests_$dot_request:
     procedure (P_ssu_ptr, P_passport_info_ptr);

/* Miscellaneous requests of the forum subsystem as follows: 

 dot:  print forum version number, and info about current forum, if any.
 forum_dir: print/return pathname of master directory.
 chairman: print/return chairman of current (or specified) forum.
 current_meeting: print/return pathname of current forum.
 switch_(off on) set/reset arbitrary switches.
 (delete retrieve)_participant
 expunge: garbage collect meetings
 rechain/unchain: modify transaction chains.

 Initial coding:	10 March 1980 by M. Auerbach
 rewritten for version 4 06/21/81 Jay Pattin
 modified for ssu_ 08/21/81 Jay Pattin
 renamed forum_misc_requests_ 01/21/82 Jay Pattin
 modified for chairman gate 4/28/82 Jay Pattin
 added switch_(on off) 5/21/82 Jay Pattin
 added (delete retrieve)_participant and expunge 6/24/82 Jay Pattin */

	dcl     (P_ssu_ptr, P_passport_info_ptr)
				 pointer parameter;

	declare active_fnc_err_$af_suppress_name
				 entry options (variable),
	        command_query_	 entry options (variable),
	        com_err_		 entry options (variable),
	        com_err_$suppress_name entry options (variable),
	        forum_$change_chairman entry (char (*), char (*), char (*), fixed bin (35)),
	        forum_$change_chairman_idx entry (fixed bin, char (*), fixed bin (35)),
	        forum_$v1_expunge	 entry (fixed bin, bit (36) aligned, fixed bin, fixed bin, fixed bin, fixed bin,
				 fixed bin (35)),
	        forum_$expunge	 entry (fixed bin, bit (36) aligned, fixed bin, fixed bin, fixed bin (35)),
	        forum_$forum_limits	 entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, bit (36) aligned,
				 fixed bin (35)),
	        forum_$forum_info	 entry (char (*), char (*), char (*), fixed bin (71), ptr, fixed bin (35)),
	        forum_$forum_info_idx	 entry (fixed bin, char (*), fixed bin (71), ptr, fixed bin (35)),
	        forum_$rechain	 entry (fixed bin, fixed bin, fixed bin, char (*), fixed bin (35)),
	        forum_$set_seen_switch entry (fixed bin, char (*), fixed bin, bit (1) aligned, fixed bin (35)),
	        forum_$set_switch	 entry (char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35)),
	        forum_$set_switch_idx	 entry (fixed bin, char (*), char (*), bit (1) aligned, fixed bin (35)),
	        forum_requests_$find_forum entry (char (*), char (*), char (*), fixed bin, fixed bin (35)),
	        forum_trans_specs_$parse_specs
				 entry (ptr, fixed bin, bit (36) aligned, entry, fixed bin, char (*), char (*), ptr),
	        forum_trans_util_$clear_cache entry (ptr),
	        forum_trans_util_$read_trans entry (ptr, fixed bin, fixed bin, ptr, fixed bin (35)),
	        cu_$af_return_arg_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr),
	        cu_$arg_list_ptr	 entry returns (ptr),
	        (ioa_, ioa_$rsnnl)	 entry () options (variable),
	        ssu_$abort_line	 entry () options (variable),
	        ssu_$arg_list_ptr	 entry (ptr) returns (ptr),
	        ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21)),
	        ssu_$get_abbrev_info	 entry (ptr, ptr, ptr, bit (1) aligned),
	        ssu_$get_invocation_count entry (ptr, fixed bin, fixed bin),
	        ssu_$get_subsystem_name entry (ptr) returns (char (32)),
	        ssu_$get_subsystem_and_request_name
				 entry (ptr) returns (char (72) varying),
	        ssu_$print_message	 entry options (variable),
	        ssu_$return_arg	 entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));

	declare arg		 char (arg_len) based (arg_ptr),
	        new_subject		 char (new_subject_len) based (new_subject_ptr),
	        ret_arg		 char (ret_len) varying based (ret_ptr);

	declare (addr, after, char, index, null, rtrim, substr)
				 builtin,
	        cleanup		 condition,
	        absolute		 bit (1) aligned,
	        answer		 char (168),
	        arg_count		 fixed bin,
	        arg_idx		 fixed bin,
	        arg_len		 fixed bin (21),
	        (arg_list_ptr, arg_ptr, new_subject_ptr, ssu_ptr)
				 ptr,
	        brief		 bit (1) aligned,
	        delete		 bit (1) aligned,
	        force_switch	 bit (1) aligned,
	        me		 char (72) varying,
	        forum_idx		 fixed bin,
	        forum_dir		 char (168),
	        (forum_name, full_forum_name) char (32),
	        name		 char (32) varying,
	        (first, last, last_seen, new_count, level, pref, chain_idx)
				 fixed bin,
	        (users_deleted, trans_deleted)
				 fixed bin,
	        no_lines		 fixed bin,
	        (command, active_function, temp_forum, have_unproc)
				 bit (1) aligned init ("0"b),
	        new_subject_len	 fixed bin (21),
	        rechain_switch	 bit (1) aligned,
	        ret_len		 fixed bin (21),
	        ret_ptr		 ptr,
	        string		 char (256),
	        switch		 bit (1) aligned,
	        switch_name		 char (32),
	        to_trans_list_ptr	 ptr,
	        user_name		 char (22),
	        (users, transactions)	 bit (1) aligned,
	        code		 fixed bin (35);

	declare 1 auto_forum_info	 aligned like forum_info;
	declare NL		 char (1) static options (constant) init ("
");

	declare (error_table_$not_act_fnc,
	        error_table_$noarg,
	        error_table_$badopt,
	        forum_et_$no_forum,
	        forum_et_$not_eligible,
	        forum_et_$switch_not_changed
	        )			 fixed bin (35) external;
%page;
%include forum_passport;
%page;
%include forum_info;
%page;
%include forum_user_trans;
%page;
%include forum_flags;
%page;
%include forum_trans_list;
%page;
%include query_info;
%page;
	call setup_request ();			/* set common variables */

	if forum_idx ^= 0 then do;			/* if we have forum, get stats */
		call forum_$forum_limits (forum_idx, (0), last_seen, first, last, new_count, forum_flags_word, code);
		if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Getting meeting limits.");
	     end;

	no_lines = 0;				/* find out about unprocessed transactions */
	forum_user_trans_ptr = unprocessed_trans_ptr;
	if forum_user_trans_ptr ^= null () then begin;

		declare text		 char (forum_user_trans.text_length);
		have_unproc = "1"b;
		text = forum_user_trans.text;
		do no_lines = 0 repeat no_lines + 1 while (text ^= "");
		     text = after (text, NL);
		end;
	     end;

	name = ssu_$get_subsystem_name (ssu_ptr);
	call ssu_$get_invocation_count (ssu_ptr, level, (0));
	call ssu_$get_abbrev_info (ssu_ptr, null (), null (), switch);

	if passport.brief_sw then do;
		if passport.forum_idx ^= 0 then
		     call ioa_ (
			"^a ^a^[ (abbrev)^]^[ (level ^i)^;^s^]:  ^a^[ (RO)^]^[ (ADJ)^] ^d new, ^d last^[, ^d current^;^s^] ^[(^d line^[s^] unprocessed^[ in ^a^].)^;^4s^]",
			name, forum_data_$version_string, switch, (level > 1), level,
			forum_name, forum_flags.read_only, forum_flags.adjourned, new_count, last,
			(passport.current_trans ^= 0), passport.current_trans, have_unproc, no_lines, (no_lines ^= 1),
			(passport.unprocessed_forum_name ^= full_forum_name), passport.unprocessed_forum_name);
		else call ioa_ ("^a ^a^[ (level ^i)^;^s^]^[: (^i line^[s^] unprocessed in ^a)^;^2s^]", name,
			forum_data_$version_string, (level > 1),
			level, have_unproc, no_lines, (no_lines ^= 1), passport.unprocessed_forum_name);
		return;
	     end;

	call ioa_ ("^a ^a^[ (abbrev)^]^[ (level ^d)^;^s^]^[:  ^d new, ^d last^[, ^d current^;^s^]^[ (You are the chairman)^]^[ (Read-only)^]^[ (Adjourned)^].^/Attending the ^a>^a meeting.^]",
	     name, forum_data_$version_string, switch, (level > 1),
	     level, (forum_idx ^= 0), new_count, last, (passport.current_trans ^= 0), passport.current_trans,
	     forum_flags.chairman, forum_flags.read_only, forum_flags.adjourned, forum_dir, forum_name);

	if have_unproc then call ioa_ ("^d line^[s^] unprocessed^[ in the ^a meeting^;^s^].^/Subject: ^a",
		no_lines, (no_lines ^= 1), (passport.unprocessed_forum_name ^= full_forum_name),
		substr (passport.unprocessed_forum_name, 1, passport.unprocessed_name_len), forum_user_trans.subject);

	return;
%page;
chairman_request:					/* Entry to print out chairman name */
     entry (P_ssu_ptr, P_passport_info_ptr);

	call setup_request ();

	user_name = "";
	force_switch = "0"b;

	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if index (arg, "-") = 1 then do;
		     if ^active_function & arg = "-set" then do;
			     if arg_idx = arg_count then call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following -set.");
			     arg_idx = arg_idx + 1;
			     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
			     user_name = arg;
			     if index (user_name, ".") = 0 then
				call ssu_$abort_line (ssu_ptr, 0, "User name must be Person.Project. ^a", user_name);
			end;
		     else if ^active_function & (arg = "-force" | arg = "-fc") then force_switch = "1"b;
		     else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
		end;
	     else if ^temp_forum & user_name = "" then call get_forum (arg);
	     else
CM_USAGE:		call ssu_$abort_line (ssu_ptr, 0, "Usage:  cm {meeting_name} {-control_args}");
	end;

	if forum_idx = 0 & ^temp_forum then
	     call ssu_$abort_line (ssu_ptr, forum_et_$no_forum);

	if temp_forum & user_name ^= "" then
	     call ssu_$abort_line (ssu_ptr, 0, "A meeting_name may not be specified with -set.");

	if user_name = "" then do;			/* return current name */
		forum_info_ptr = addr (auto_forum_info);
		forum_info.version = forum_info_version_2;

/* forum_info goes faster if you pass in name of non-attendee, hence XYZZY.QUUX */
		if temp_forum then
		     call forum_$forum_info (forum_dir, full_forum_name, "XYZZY.QUUX.*", (0), forum_info_ptr, code);
		else call forum_$forum_info_idx (forum_idx, "XYZZY.QUUX.*", (0), forum_info_ptr, code); /* get his name */
		if code ^= 0 & code ^= forum_et_$not_eligible then call ssu_$abort_line (ssu_ptr, code);

		if active_function then do;
			if forum_info.chairman.project = "*" then ret_arg = forum_info.chairman.username;
			else ret_arg = rtrim (forum_info.chairman.username) || "." || rtrim (forum_info.chairman.project);
			return;
		     end;

		call ioa_ ("^a.^a", forum_info.chairman.username, forum_info.chairman.project);
	     end;

	else do;					/* change the chairman */
		query_info.version = query_info_version_5;
		query_info.yes_or_no_sw = "1"b;
		if ^force_switch then do;
			call command_query_ (addr (query_info), answer, me,
			     "Do you really want to change the chairman of the ^a meeting to ^a ?", forum_name, user_name);
			if substr (answer, 1, 2) = "no" then return;
		     end;

		if temp_forum then
		     call forum_$change_chairman (forum_dir, full_forum_name, user_name, code);
		else call forum_$change_chairman_idx (forum_idx, user_name, code);
		if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Changing chairman.");
	     end;
ABORT:
	return;
%page;
forum_misc_requests_$switch_off:
     entry (P_ssu_ptr, P_passport_info_ptr);

	switch = "0"b;
	goto SWITCH_COMMON;

forum_misc_requests_$switch_on:
     entry (P_ssu_ptr, P_passport_info_ptr);

	switch = "1"b;

SWITCH_COMMON:
	user_name = "";				/* defaults to this user */
	brief = "0"b;
	call setup_request ();

	arg_idx = 1;

	if arg_count = 0 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage:  sw^[n^;f^] switch_name {-control_args}", switch);
	call ssu_$arg_ptr (ssu_ptr, 1, arg_ptr, arg_len);
	switch_name = arg;

	if switch_name = "seen" then do;
		call seen_switch ();
		return;
	     end;

	do arg_idx = 2 to arg_count;
	     call switch_arg (arg_idx);
	end;

	if forum_idx = 0 & ^temp_forum then call ssu_$abort_line (ssu_ptr, forum_et_$no_forum);

	if (switch_name = "meeting_eligibility_messages" | switch_name = "mtg_emsg" |
	     switch_name = "in_session" | switch_name = "ins") & user_name ^= "" then
	     call ssu_$abort_line (ssu_ptr, 0,
		"The -user control argument may not be used with the ""^a"" switch.", switch_name);

	if temp_forum then
	     call forum_$set_switch (forum_dir, full_forum_name, user_name, switch_name, switch, code);
	else call forum_$set_switch_idx (forum_idx, user_name, switch_name, switch, code);
	if code ^= 0 then do;
		if code = forum_et_$switch_not_changed then
		     if ^passport.brief_sw & ^brief then
			call ssu_$print_message (ssu_ptr, code, """^a"" switch^[ for user ^a^;^s^] in the ^a meeting.",
			     switch_name, (user_name ^= ""), user_name, forum_name);
		     else ;
		else call ssu_$abort_line (ssu_ptr, code, """^a"" switch^[ for user ^a^;^s^] in the ^a meeting.",
			switch_name, (user_name ^= ""), user_name, forum_name);
	     end;

	return;
%page;
seen_switch:
     proc ();

	forum_trans_list_ptr = null ();
	on cleanup begin;
		if forum_trans_list_ptr ^= null () then free forum_trans_list;
	     end;

	parse_flags_word = NON_NULL | DISALLOW_UNPROC | DISALLOW_MTG | DISALLOW_REV | DISALLOW_INITIAL |
	     DISALLOW_CMSG | DISALLOW_BYCHAIN;

	call forum_trans_specs_$parse_specs (passport_info_ptr, 2, parse_flags_word, switch_arg, 0, "", "",
	     forum_trans_list_ptr);

	do arg_idx = 1 to forum_trans_list.size;
	     call forum_$set_seen_switch (forum_idx, user_name, forum_trans_list.trans_num (arg_idx), switch, code);
	     if code ^= 0 then do;
		     if code = forum_et_$switch_not_changed then
			if ^passport.brief_sw & ^brief then
			     call ssu_$print_message (ssu_ptr, code, "Seen switch for transaction ^d^[ for user ^a^;^s^].",
				forum_trans_list.trans_num (arg_idx), (user_name ^= ""), user_name);
			else ;
		     else call ssu_$abort_line (ssu_ptr, code, "Seen switch for transaction ^d^[ for user ^a^;^s^].",
			     forum_trans_list.trans_num (arg_idx), (user_name ^= ""), user_name);
		end;
	end;

	free forum_trans_list;
	return;
     end seen_switch;
%page;
switch_arg:
     proc (P_arg_idx);

	declare P_arg_idx		 fixed bin;

	call ssu_$arg_ptr (ssu_ptr, P_arg_idx, arg_ptr, arg_len);
	if char (arg, 1) ^= "-" then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage:  sw^[n^;f^] switch_name {-control_args}", switch);

	if arg = "-brief" | arg = "-bf" then brief = "1"b;
	else if arg = "-user" then do;
		if user_name ^= "" then
		     call ssu_$abort_line (ssu_ptr, 0, "Only one user name may be given.");
		if P_arg_idx = arg_count then
NOARG:		     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ^a.", arg);
		P_arg_idx = P_arg_idx + 1;
		call ssu_$arg_ptr (ssu_ptr, P_arg_idx, arg_ptr, arg_len);
		user_name = arg;
		if index (user_name, "*") > 0 | index (user_name, ".") > 0 then
		     call ssu_$abort_line (ssu_ptr, 0, "User names may not contain ""."" or ""*"".");
	     end;
	else if arg = "-meeting" | arg = "-mtg" then do;
		if switch_name = "seen" then
		     call ssu_$abort_line (ssu_ptr, 0, "-meeting may not be used with the seen switch.");
		if temp_forum then call ssu_$abort_line (ssu_ptr, 0, "Only one meeting name may be given.");
		if P_arg_idx = arg_count then goto NOARG;
		P_arg_idx = P_arg_idx + 1;
		call ssu_$arg_ptr (ssu_ptr, P_arg_idx, arg_ptr, arg_len);
		call get_forum (arg);
	     end;
	else call ssu_$abort_line (ssu_ptr, error_table_$badopt, arg);

	return;
     end switch_arg;
%page;
forum_misc_requests_$delete_participant:
     entry (P_ssu_ptr, P_passport_info_ptr);

	delete = "1"b;
	goto DLRT_COMMON;

forum_misc_requests_$retrieve_participant:
     entry (P_ssu_ptr, P_passport_info_ptr);

	delete = "0"b;
DLRT_COMMON:
	call setup_request ();

	if arg_count = 0 then call ssu_$abort_line (ssu_ptr, 0, "Usage: ^[dl^;rt^]pt user_names {-control_args}", delete);
	if forum_idx = 0 then call ssu_$abort_line (ssu_ptr, forum_et_$no_forum);

	brief = passport.brief_sw;
	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if index (arg, "-") = 1 then do;
		     if arg = "-brief" | arg = "-bf" then brief = "1"b;
		     else if arg = "-long" | arg = "-lg" then brief = "0"b;
		     else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
		end;
	end;

	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if index (arg, "-") ^= 1 then do;
		     if index (arg, ".") > 0 then
			call ssu_$abort_line (ssu_ptr, 0, "A user id may not contain a ""."".  ""^a""", arg);

		     call forum_$set_switch_idx (forum_idx, arg, "deleted", delete, code);
		     if code ^= 0 then
			if ^brief | code ^= forum_et_$switch_not_changed then
			     call ssu_$print_message (ssu_ptr, code, "^[Res^;S^]etting deleted switch for ^a.", ^delete, arg);
		end;
	end;
	return;
%page;
forum_misc_requests_$expunge:
     entry (P_ssu_ptr, P_passport_info_ptr);

	call setup_request ();
	brief = passport.brief_sw;
	force_switch, users, transactions = "0"b;

	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if index (arg, "-") = 1 then do;
		     if arg = "-brief" | arg = "-bf" then brief = "1"b;
		     else if arg = "-force" | arg = "-fc" then force_switch = "1"b;
		     else if arg = "-long" | arg = "-lg" then brief = "0"b;
		     else if arg = "-participants" | arg = "-part" then users = "1"b;
		     else if arg = "-transactions" | arg = "-trans" then transactions = "1"b;
		     else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
		end;
	     else call ssu_$abort_line (ssu_ptr, 0, "Usage:  expunge {-control_args}");
	end;

	if ^(users | transactions) then users, transactions = "1"b;

	if ^force_switch then do;
		call ioa_$rsnnl ("Expunging the meeting will destroy all records of deleted^[ transactions^]^[ and^]^[ participants^].^/Do you really want to expunge the ^a meeting?",
		     string, arg_len, transactions, users & transactions, users, forum_name);
		query_info.version = query_info_version_5;
		query_info.yes_or_no_sw = "1"b;
		query_info.explanation_ptr = addr (string);
		query_info.explanation_len = arg_len;
		call command_query_ (addr (query_info), answer, me, substr (string, 1, arg_len));
		if substr (answer, 1, 2) = "no" then return;
	     end;

	if forum_idx < 0 then
	     call forum_$expunge (forum_idx, transactions || users, users_deleted, trans_deleted, code);
	else call forum_$v1_expunge (forum_idx, transactions || users, users_deleted, trans_deleted, (0), (0),
		code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Expunging ^a meeting.", forum_name);
	if brief then return;

	if users then do;
		if users_deleted = 0 then call ioa_ ("There were no deleted participants to expunge.");
		else call ioa_ ("^d participant^[s^] expunged.", users_deleted, users_deleted ^= 1);
	     end;

	if transactions then do;
		if trans_deleted = 0 then call ioa_ ("There were no deleted transactions to expunge.");
		else call ioa_ ("^d transaction^[s^] expunged.", trans_deleted, trans_deleted ^= 1);
	     end;

	return;
%page;
forum_misc_requests_$forum_dir_request:			/* Entry to print/return pathname of forum central dir */
     entry (P_ssu_ptr, P_passport_info_ptr);

	call setup_request ();
	arg_list_ptr = ssu_$arg_list_ptr (ssu_ptr);
	goto cmd_common;

forum_dir:					/* This is also externally available */
fd:  entry options (variable);

	arg_list_ptr = cu_$arg_list_ptr ();
	command = "1"b;

cmd_common:
	me = "forum_dir";
	call cu_$af_return_arg_rel (arg_count, ret_ptr, ret_len, code, arg_list_ptr);
	if code = 0 then active_function = "1"b;
	else if code ^= error_table_$not_act_fnc then do;
		if command then call com_err_ (code, me);
		else call ssu_$abort_line (code, me);
		return;
	     end;

	if arg_count ^= 0 then do;
		if ^command then call ssu_$abort_line (ssu_ptr, 0, "Usage: ^[[^]fd^[]^]", active_function, active_function);
		else if active_function then call active_fnc_err_$af_suppress_name (0, me, "Usage: [fd]");
		else call com_err_$suppress_name (0, me, "Usage: fd");
		return;
	     end;

	if active_function then
	     ret_arg = forum_data_$central_directory;
	else call ioa_ ("The central forum directory is ^a.", forum_data_$central_directory);

	return;
%page;
current_meeting:
     entry (P_ssu_ptr, P_passport_info_ptr);

	call setup_request ();

	absolute = "0"b;
	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if arg = "-absolute_pathname" | arg = "-absp" then absolute = "1"b;
	     else if arg = "-entry" | arg = "-et" then absolute = "0"b;
	     else call ssu_$abort_line (ssu_ptr, error_table_$badopt, arg);
	end;

	if passport.forum_idx = 0 then call ssu_$abort_line (ssu_ptr, forum_et_$no_forum);

	if active_function then do;
		if absolute then ret_arg = rtrim (forum_dir) || ">" || rtrim (full_forum_name);
		else ret_arg = rtrim (no_suffix_name);
	     end;
	else call ioa_ ("The current meeting is ^[^a>^a^;^2s^a^].", absolute, forum_dir, full_forum_name,
		no_suffix_name);

	return;
%page;
forum_misc_requests_$rechain:
     entry (P_ssu_ptr, P_passport_info_ptr);

	rechain_switch = "1"b;
	goto CHAIN_COMMON;

forum_misc_requests_$unchain:
     entry (P_ssu_ptr, P_passport_info_ptr);

	rechain_switch = "0"b;
CHAIN_COMMON:
	call setup_request ();

	forum_trans_list_ptr, to_trans_list_ptr = null ();
	on cleanup begin;
		if forum_trans_list_ptr ^= null () then free forum_trans_list;
		if to_trans_list_ptr ^= null () then free to_trans_list_ptr -> forum_trans_list;
	     end;

	chain_idx, pref, new_subject_len = 0;
	new_subject_ptr = addr (new_subject_len);	/* keep from faulting in call. Ignored if newsj_len = 0 */

	parse_flags_word = DISALLOW_MTG | DISALLOW_UNPROC | DISALLOW_REV | DISALLOW_CMSG | DISALLOW_BYCHAIN;
	call forum_trans_specs_$parse_specs (passport_info_ptr, 1, parse_flags_word, chain_args, 0, "", "",
	     forum_trans_list_ptr);

	if rechain_switch then do;
		if chain_idx = 0 then
		     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "The -to control argument is required.");
		parse_flags_word = parse_flags_word | ONLY_ONE | NON_NULL;
		call forum_trans_specs_$parse_specs (passport_info_ptr, chain_idx, parse_flags_word, chain_args, 0,
		     "", "", to_trans_list_ptr);
		pref = to_trans_list_ptr -> forum_trans_list.trans_num (1);
		free to_trans_list_ptr -> forum_trans_list;
	     end;

	if new_subject_ptr = null () then do;
		call forum_trans_util_$read_trans (passport_info_ptr, 0, pref, forum_user_trans_ptr, code);
		if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Transaction #^d.", pref);

		new_subject_ptr = addr (forum_user_trans.subject);
		new_subject_len = forum_user_trans.subject_length;
	     end;

	do first = 1 to forum_trans_list.size;
	     call forum_$rechain (forum_idx, forum_trans_list.trans_num (first), pref, new_subject, code);
	     if code ^= 0 then
		call ssu_$abort_line (ssu_ptr, code, "Chaining ^d to ^d.", forum_trans_list.trans_num (first), pref);
	end;

	if new_subject_len > 0 then call forum_trans_util_$clear_cache (passport_info_ptr);
	free forum_trans_list;
	return;
%page;
chain_args:
     procedure (P_arg_idx);

	declare P_arg_idx		 fixed bin parameter;

	call ssu_$arg_ptr (ssu_ptr, P_arg_idx, arg_ptr, arg_len);
	if arg = "-new_subject" | arg = "-newsj" then do;
		new_subject_ptr = null ();
		if P_arg_idx = arg_count then
		     if rechain_switch then return;
		     else goto NOARG;
		P_arg_idx = P_arg_idx + 1;
		call ssu_$arg_ptr (ssu_ptr, P_arg_idx, new_subject_ptr, new_subject_len);
		if rechain_switch & index (new_subject, "-") = 1 then do;
			new_subject_ptr = null ();
			P_arg_idx = P_arg_idx - 1;
		     end;
	     end;
	else if rechain_switch & arg = "-to" then do;
		if chain_idx > 0 then
		     call ssu_$abort_line (ssu_ptr, 0, "-to may only be specified once.");
		if P_arg_idx = arg_count then
NOARG:		     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ^a.", arg);
		chain_idx = P_arg_idx + 1;
		P_arg_idx = arg_count + 1;
	     end;
	else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
     end chain_args;
%page;
/* This internal procedure sets up to execute a request */

setup_request:
     procedure ();

	ssu_ptr = P_ssu_ptr;
	passport_info_ptr = P_passport_info_ptr;
	forum_idx = passport.forum_idx;
	forum_dir = passport.forum_dir;
	full_forum_name = passport.forum_name;
	forum_name = no_suffix_name;
	call ssu_$return_arg (ssu_ptr, arg_count, active_function, ret_ptr, ret_len);
	me = ssu_$get_subsystem_and_request_name (ssu_ptr);
	return;

     end setup_request;

get_forum:
     proc (forum);

	declare forum		 char (*),
	        name_len		 fixed bin;

	temp_forum = "1"b;

	call forum_requests_$find_forum (forum, forum_dir, full_forum_name, name_len, code);
	if code ^= 0 then call ssu_$abort_line (ssu_ptr, code, "Getting meeting path.");
	forum_name = substr (full_forum_name, 1, name_len);

	return;
     end get_forum;

     end forum_misc_requests_$dot_request;
