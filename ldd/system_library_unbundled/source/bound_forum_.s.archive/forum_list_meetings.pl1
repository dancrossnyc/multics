/****^  ***************************************************************
        *                                                             *
        * Copyright, (C) Massachusetts Institute of Technology, 1986  *
        *                                                             *
        * Copyright (c) 1982 by Massachusetts Institute of Technology *
        *                                                             *
        *************************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Added -count to next_meeting, added -from and -exclude to check_meetings.
     Made check_meetings save meeting list pointer.
     Check for duplicates in search list.
                                                   END HISTORY COMMENTS */


/* forum_list_meetings

   Originally written:  May 1980          ML Auerbach
   Extensively revised: 2 December 1980   MLA
   Modified 29 May 1981 by J. Spencer Love to update to current programming standards and add features.
   Modified 13 June 1981 by J. Spencer Love to call gate, implement -inhibit_error, and add forum_list_request entry.
   Modified 08/21/81 Jay Pattin for ssu_, renamed it to con_list_meetings
   Modified 01/21/82 Jay Pattin renamed forum_list and added -chairman, -participating, -verbose
   Modified 02/17/82 Jay Pattin for ssu_$standalone_invocation RAH RAH
   Modified 3/26/82 Jay Pattin back to forum_list_meetings
   Modified 5/5/82 Jay Pattin added read only stuff
   Modified 5/31/82 Jay Pattin added -nnt, -npart, -nchg
   Modified 8/6/82 Jay Pattin for better error reporting
   Modified 9/24/82 Jay Pattin for real pathnames and -from, -adj, nadj
   Modified 6/2/83 Jay Pattin to add check_meetings and next_meeting
   Modified 12/6/85 Jay Pattin nm -count, timing stuff, duplication checking
*/

forum_list_meetings:
flsm:
     procedure () options (variable);

declare	(P_ssu_ptr, P_passport_info_ptr)
				ptr parameter;

declare	(addr, addrel, after, before, binary, clock, currentsize, divide, length, max, min, null, rtrim, substr)
				builtin;

declare	cleanup			condition;

declare	absolute_pathname		bit (1) aligned,
	access_name		char (32),
	access_time		fixed bin (71),
	active_function		bit (1) aligned,
	adjourned			bit (1) aligned,
	all_switch		bit (1) aligned,
	any_person		bit (1) aligned,
	arg			character (arg_lth) based (arg_ptr) unal,
	arg_count			fixed bin,
	arg_idx			fixed bin,
	arg_lth			fixed bin (21),
	arg_ptr			ptr,
	before_time		fixed bin (71),
	brief_switch		bit (1) aligned,
	chairman_switch		bit (1) aligned,
	chairman_expected		bit (1) aligned,
	chair_width		fixed bin,
	ckm_switch		bit (1) aligned,
	count_switch		bit (1) aligned,
	cpu			fixed bin (71),
	dir_idx			fixed bin,
	change_switch		bit (1) aligned,
	cm_username		char (20),
	eligible_switch		bit (1) aligned,
	exclude_switch		bit (1) aligned,
	explicit			bit (1) aligned,
	header_switch		bit (1) aligned,
	i			fixed bin,
	inhibit_error		bit (1) aligned,
	interesting_switch		bit (1) aligned,
	j			fixed bin,
	forum_directory		char (168),
	last_cpu			fixed bin (71),
	last_pf			fixed bin,
	last_seen_pic		pic "zz9999",
	last_trans_pic		pic "zz9999",
	message			char (48),
	name_width		fixed bin,
	no_adjourned		bit (1) aligned,
	noheader_switch		bit (1) aligned,
     	no_read_only		bit (1) aligned,
     	no_changes		bit (1) aligned,
     	no_participate		bit (1) aligned,
     	no_notify			bit (1) aligned,
	notify_switch		bit (1) aligned,
	obj_name_count		fixed bin,
	obj_name_idx		fixed bin,
	participate_switch		bit (1) aligned,
	page_faults		fixed bin,
	read_only			bit (1) aligned,
	request			char (256),
	return_string		char (rtn_string_length) varying based (rtn_string_ptr),
	rtn_string_length		fixed bin (21),
	rtn_string_ptr		ptr,
	select_names_ptr		ptr,
	short_name_width		fixed bin,
	status			fixed bin (35),
	subsystem_entry		bit (1) aligned,
	ssu_ptr			ptr,
     	system_area		area based (system_area_ptr),
	system_area_ptr		ptr,
	timing			bit (1) aligned,
	uid_array			(200) bit (36) aligned,
	uid_count			fixed bin,
	user_name_expected		bit (1) aligned,
	user_name_given		bit (1) aligned,
	verbose_switch		bit (1) aligned,
	whoami			char (32);

declare	1 select_names		aligned based (select_names_ptr),
	  2 no_names		fixed bin,
	  2 pad			bit (36) aligned,
	  2 array			(0 refer (select_names.no_names)),
	    3 forum_names		char (32) unaligned,
	    3 exclude		bit (1) aligned,
	    3 star_name		bit (1) aligned,
	    3 matched		bit (1) aligned;

declare	1 fi			aligned like forum_info;

declare	(
	forum_et_$no_such_forum,
	forum_et_$not_eligible,
	error_table_$badopt,
	error_table_$inconsistent,
	error_table_$noarg,
	error_table_$nomatch
	)			fixed bin (35) external;

declare	active_fnc_err_		entry () options (variable),
	check_star_name_$entry	entry (char (*), fixed bin (35)),
	com_err_			entry () options (variable),
     	convert_date_to_binary_	entry (char (*), fixed bin (71), fixed bin (35)),
	cpu_time_and_paging_	entry (fixed bin, fixed bin(71), fixed bin),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin (21)) returns (fixed bin (35)),
	cu_$arg_list_ptr		entry () returns (ptr),
	forum_$forum_info		entry (char (*), char (*), char (*), fixed bin (71), ptr, fixed bin (35)),
	forum_$get_forum_path	entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	get_system_free_area_	entry () returns (ptr),
	get_temp_segment_		entry (char (*), ptr, fixed bin (35)),
	hcs_$get_uid_file		entry (char (*), char (*), bit (36) aligned, fixed bin (35)),
	hcs_$star_dir_list_		entry (char (*), char (*), fixed bin (3), ptr, fixed bin, fixed bin, ptr, ptr,
				fixed bin (35)),
	ioa_			entry () options (variable),
	match_star_name_		entry (char (*), char (*), fixed bin (35)),
	release_temp_segment_	entry (char (*), ptr, fixed bin (35)),
	requote_string_		entry (char (*)) returns (char (*)),
	search_paths_$get		entry (char (*), bit (36), char (*), ptr, ptr, fixed bin, ptr, fixed bin (35)),
	ssu_$arg_ptr		entry (ptr, fixed bin, ptr, fixed bin (21)),
	ssu_$abort_line		entry options (variable),
	ssu_$destroy_invocation	entry (ptr),
	ssu_$execute_line		entry (ptr, ptr, fixed bin (21), fixed bin (35)),
	ssu_$print_message		entry options (variable),
	ssu_$return_arg		entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21)),
	ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr, entry, fixed bin (35)),
	user_info_$whoami		entry (char (*),char (*), char (*));
%page;
%include forum_info;
%page;
%include forum_meeting_list;
%page;
%include sl_info;
%page;
%include sl_control_s;
%page;
%include star_structures;
%page;
	subsystem_entry, ckm_switch = "0"b;

	whoami = "forum_list_meetings";
	call create_subsystem ();
	go to FLS_COMMON;



forum_list_request:
     entry (P_ssu_ptr, P_passport_info_ptr);

	ssu_ptr = P_ssu_ptr;
	whoami = "list_meetings";
	subsystem_entry = "1"b;
	ckm_switch = "0"b;
	goto FLS_COMMON;

forum_check_meetings:
fckm:	entry;

	whoami = "forum_check_meetings";
	subsystem_entry = "0"b;
	ckm_switch = "1"b;
	call create_subsystem ();
	goto FLS_COMMON;

check_meetings:
	entry (P_ssu_ptr, P_passport_info_ptr);

	ssu_ptr = P_ssu_ptr;
	whoami = "check_meetings";
	subsystem_entry = "1"b;
	ckm_switch = "1"b;
	goto FLS_COMMON;
%page;
FLS_COMMON:

	absolute_pathname, all_switch, any_person, brief_switch, change_switch, count_switch, eligible_switch,
	     exclude_switch, interesting_switch, noheader_switch, notify_switch, user_name_expected,
	     read_only, no_read_only, no_notify, no_participate, no_changes, adjourned, no_adjourned, timing,
	     chairman_switch, chairman_expected, user_name_given, participate_switch, verbose_switch = "0"b;

	inhibit_error, header_switch = "1"b;
	cm_username = "";
	access_time, before_time, name_width, short_name_width, chair_width, uid_count = 0;

	if ckm_switch then change_switch, count_switch, brief_switch, noheader_switch = "1"b;

	select_names_ptr, sl_info_p, star_list_branch_ptr, star_list_names_ptr = null ();
	on cleanup call clean_up ();

	call get_temp_segment_ (whoami, select_names_ptr, status);
	if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "Getting temp_segment.");
	select_names.no_names = 0;

	call ssu_$return_arg (ssu_ptr, arg_count, active_function, rtn_string_ptr, rtn_string_length);

	do arg_idx = 1 to arg_count;

	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_lth);

	     if user_name_expected then call get_user_name ("0"b);

	     else if substr (arg, 1, min (arg_lth, 1)) ^= "-" then do;
		if chairman_expected then call get_user_name ("1"b);
		else do;
		     call get_select_name ();
		     chairman_expected = "0"b;
		end;
	     end;

	     else if arg = "-exclude" | arg = "-ex" then exclude_switch = "1"b;
	     else if arg = "-from" | arg = "-fm" then do;
		if arg_idx = arg_count then call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ^a.", arg);
		arg_idx = arg_idx + 1;
		call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_lth);
		call convert_date_to_binary_ (arg, access_time, status);
		if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "^a", arg);
		change_switch = "1"b;
	     end;
	     else if arg = "-timing" then timing = "1"b;

	     else if ckm_switch then do;
		if arg = "-list" | arg = "-ls" then brief_switch = "0"b;
		else goto BADOPT;
	     end;

	     else if arg = "-absolute_pathname" | arg = "-absp" then absolute_pathname = "1"b;
	     else if arg = "-adjourned" | arg = "-adj" then adjourned = "1"b;
	     else if arg = "-all" | arg = "-a" then all_switch = "1"b;
	     else if arg = "-before" | arg = "-be" then do;
		if arg_idx = arg_count then call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following ^a.", arg);
		arg_idx = arg_idx + 1;
		call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_lth);
		call convert_date_to_binary_ (arg, before_time, status);
		if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "^a", arg);
	     end;
	     else if arg = "-brief" | arg = "-bf" then brief_switch = "1"b;
	     else if arg = "-chairman" | arg = "-cm" then chairman_expected, chairman_switch = "1"b;
	     else if arg = "-changes" | arg = "-changed" | arg = "-chg" then change_switch = "1"b;
	     else if (arg = "-count" | arg = "-ct") & ^active_function then count_switch = "1"b;
	     else if arg = "-eligible" | arg = "-elig" then eligible_switch = "1"b;
	     else if arg = "-header" | arg = "-he" then header_switch, noheader_switch = "1"b;
	     else if arg = "-include" | arg = "-incl" | arg = "-inc" then exclude_switch = "0"b;
	     else if arg = "-inhibit_error" | arg = "-ihe" then inhibit_error = "1"b;
	     else if arg = "-long" | arg = "-lg" then brief_switch = "0"b;
	     else if arg = "-no_adjourned" | arg = "-nadj" then no_adjourned = "1"b;
	     else if arg = "-no_changes" | arg = "-nchg" then no_changes = "1"b;
	     else if arg = "-no_header" | arg = "-nhe" then header_switch, noheader_switch = "0"b;
	     else if arg = "-no_inhibit_error" | arg = "-nihe" then inhibit_error = "0"b;
	     else if arg = "-no_notify" | arg = "-nnt" then no_notify = "1"b;
	     else if arg = "-no_participating" | arg = "-npart" then no_participate = "1"b;
	     else if arg = "-no_read_only" | arg = "-nro" then no_read_only = "1"b;
	     else if arg = "-notify" | arg = "-nt" then notify_switch = "1"b;
	     else if arg = "-participating" | arg = "-part" then participate_switch = "1"b;
	     else if arg = "-read_only" | arg = "-ro" then read_only = "1"b;
	     else if arg = "-user" then user_name_expected = "1"b;
	     else if ^active_function & (arg = "-verbose" | arg = "-vb") then verbose_switch = "1"b;

	     else
BADOPT:		call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
	end;
%page;
/* Do some consistency checks */

	if user_name_expected then 
	     call ssu_$abort_line (ssu_ptr, error_table_$noarg, "A userid must be given after ""-user"".");

	message = "";

	if all_switch & change_switch then message =  """-all"" and ""-changes""";
	else if all_switch & no_changes then message = """-all"" and ""-no_changes""";
	else if all_switch & notify_switch then message = """-all"" and ""-notify""";
	else if all_switch & no_notify then message = """-all"" and ""-no_notify""";
	else if all_switch & eligible_switch then message = """-all"" and ""-eligible""";
	else if all_switch & participate_switch then message = """-all"" and ""-participating""";
	else if all_switch & no_participate then message = """-all"" and ""-no_participating""";
	else if eligible_switch & change_switch then message =  """-eligible"" and ""-changes""";
	else if eligible_switch & notify_switch then message =  """-eligible"" and ""-notify""";
	else if chairman_switch & user_name_given then message = """-chairman"" and ""-user""";
	else if change_switch & verbose_switch then message = """-changes"" and ""-verbose""";
	else if read_only & no_read_only then message = """-read_only"" and ""-no_read_only""";
	else if adjourned & no_adjourned then message = """-adjourned"" and ""-no_adjourned""";
	else if notify_switch & no_notify then message = """-notify"" and ""-no_notify""";
	else if change_switch & no_changes then message = """-changes"" and ""-no_changes""";
	else if participate_switch & no_participate then message = """-participating"" and ""-no_participating""";
	else if before_time ^= 0 & change_switch then message = """-before"" and ""-changes"" or ""-from""";

	if message ^= "" then
	     call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, message);

	if ^change_switch & ^notify_switch & ^all_switch & ^participate_switch then
	     eligible_switch = "1"b;

	if change_switch & (header_switch ^= noheader_switch) then header_switch = "0"b;
	if change_switch & ^adjourned then no_adjourned = "1"b;

	if any_person & (change_switch | notify_switch | count_switch) then
	     call ssu_$abort_line (ssu_ptr, 0, """-user *"" cannot be used with ""-changes"", ""-count"" or ""-notify"".");

	if ^user_name_given then access_name = "";
	if access_time = 0 then access_time = clock ();
	if chairman_switch & cm_username = "" then call user_info_$whoami (cm_username, "", "");

	forums_array_ptr = addrel (select_names_ptr, currentsize (select_names));
	forums_array.version = forum_meeting_list_version_1;

	system_area_ptr = get_system_free_area_ ();

	call search_paths_$get ("forum", sl_control_default, "", null (), system_area_ptr,
	     sl_info_version_1, sl_info_p, status);

	if status ^= 0 then
	     call ssu_$abort_line (ssu_ptr, status, "Getting ""forum"" search list.");

	do dir_idx = 1 to sl_info_p -> sl_info.num_paths;

	     if sl_info.paths (dir_idx).code ^= 0 then do;
		if ^inhibit_error then
		     call ssu_$print_message (ssu_ptr, sl_info.paths (dir_idx).code,
		     "Expanding ^a", sl_info.paths (dir_idx).pathname);
	     end;
	     else do;
		     forum_directory = sl_info.paths (dir_idx).pathname;
		     call scan_dir (".forum");
		     call scan_dir (".control");
		end;
	end;

	if ^absolute_pathname | active_function then call sort_output ();
	
	do i = 1 to select_names.no_names;
	     if ^select_names.matched (i) then
		if select_names.star_name (i) then
		     call ssu_$print_message (ssu_ptr, error_table_$nomatch, "^a", select_names.forum_names (i));
		else call ssu_$print_message (ssu_ptr, forum_et_$no_such_forum, select_names.forum_names (i));
	end;

	if ckm_switch then begin;

declare	temp_ptr			ptr,
	words			(word_count) bit (36) aligned based,
	word_count		fixed bin;

	     temp_ptr = forum_data_$meeting_list;
	     if temp_ptr ^= null () then free temp_ptr -> forums_array;
	     word_count = currentsize (forums_array);
	     allocate words in (system_area) set (temp_ptr);
	     temp_ptr -> forums_array.no_selected = forums_array.no_selected;
	     temp_ptr -> forums_array.forums (*) = forums_array.forums (*);

	     forum_data_$meeting_list = temp_ptr;
	     if no_selected = 0 then call ssu_$print_message (ssu_ptr, 0, "No meetings have changed.");
	     else if ^brief_switch then call print_changes (1);
	end;

	else if active_function then call return_af_value (1);
	else if change_switch then call print_changes (1);
	else call print_output ();

EGRESS:
	call clean_up ();

	return;
%page;
create_subsystem:
     procedure ();

	call ssu_$standalone_invocation (ssu_ptr, whoami, "1", cu_$arg_list_ptr (), punt, status);
	if status ^= 0 then do; 	/* UGH */
	     if cu_$af_return_arg ((0), null (), (0)) = 0 then
		call active_fnc_err_ (status, whoami, "Unable to create subsystem invocation.");
	     else call com_err_ (status, whoami, "Unable to create subsystem invocation.");
	     goto EGRESS;
	end;

	return;
     end create_subsystem;
%page;
/* This routine attempts to list the control segments in the directory whose pathname is in the global
   variable forum_directory.  It sets the global variables obj_name_idx and obj_name_count, which are
   used by check_forum to find the names of the forum to examine.  */

scan_dir:
     procedure (suffix);

declare	object_idx		fixed bin,
	suffix			char (*);

	star_select_sw = star_ALL_ENTRIES;

	call hcs_$star_dir_list_ (forum_directory, "**.*" || suffix, star_select_sw, system_area_ptr, star_branch_count,
	     star_link_count, star_list_branch_ptr, star_list_names_ptr, status);
	if status ^= 0 & status ^= error_table_$nomatch then do;
	     if ^inhibit_error then
		call ssu_$print_message (ssu_ptr, status, "Trying to list meetings in ^a.", forum_directory);
	end;
	else do object_idx = 1 to star_branch_count + star_link_count;
	     obj_name_idx = star_dir_list_branch.nindex (object_idx);
	     obj_name_count = star_dir_list_branch.nnames (object_idx);
	     if timing then call cpu_time_and_paging_ (last_pf, last_cpu, (0));
	     call check_forum (suffix);
	     if timing then do;
		call cpu_time_and_paging_ (page_faults, cpu, (0));
		call ioa_ ("^a: ^d PF ^d msec.", star_list_names (obj_name_idx), page_faults - last_pf,
		     divide ((cpu - last_cpu), 1000, 17, 0));
	     end;
	end;

	return;

     end scan_dir;


already_done:
     proc () returns (bit (1) aligned);

declare	uid			bit (36) aligned,
	forum_idx			fixed bin;

	call hcs_$get_uid_file (forum_directory, star_list_names (obj_name_idx), uid, status);
	if status ^= 0 then return ("0"b);

	do forum_idx = 1 to uid_count;
	     if uid_array (forum_idx) = uid then return ("1"b);
	end;

	if uid_count < hbound (uid_array, 1) then do;
	     uid_count = uid_count + 1;
	     uid_array (uid_count) = uid;
	end;

	return ("0"b);
     end already_done;
%page;
/* The following procedure examines a forum to discover whether it meets the selection criteria given to the command.
   If it does, it is added to the "forums" array for later printing out.  */

check_forum:
     procedure (suffix);

declare	forum_idx			fixed bin,
	my_long_name		char (32) varying,
	my_short_name		char (32) varying,
	my_path			char (168) varying,
	real_dir			char (168),
	real_name			char (32),
	suffix			char (*);

	explicit = "0"b;
	if select_names.no_names > 0
	then if ^match_select_name () then return;

	my_long_name =
	     substr (star_list_names (obj_name_idx), 1,
	     length (rtrim (star_list_names (obj_name_idx))) - length (suffix));

	if obj_name_count < 2 then my_short_name = "";
	else my_short_name =
		substr (star_list_names (obj_name_idx + 1), 1,
		length (rtrim (star_list_names (obj_name_idx + 1))) - length (suffix));

	if already_done () then return;

	if suffix = ".control" then fi.version = forum_info_version_1;
	else fi.version = forum_info_version_2;

	call forum_$forum_info (forum_directory, star_list_names (obj_name_idx), access_name, access_time,
	     addr (fi), status);
	if status ^= 0 then do;
	     if status = forum_et_$no_such_forum then do;
		if ^explicit & inhibit_error then return;
		call ssu_$print_message (ssu_ptr, status, "^a>^a", forum_directory, star_list_names (obj_name_idx));
	     end;
	     if status = forum_et_$not_eligible & all_switch then goto ADD_FORUM;
	     if (status ^= forum_et_$not_eligible | ((change_switch | count_switch) & user_name_given) | explicit)
		& ^inhibit_error then
		call ssu_$print_message (ssu_ptr, status, "Getting meeting info for ^a>^a", forum_directory, star_list_names (obj_name_idx));
	     return;
	end;
	
	if no_participate then
	     if ^fi.removed & fi.last_time_attended ^= 0 then return;
	     else;
	else if ^all_switch & ^((any_person | eligible_switch) & fi.eligible) & (fi.removed | fi.last_time_attended = 0) then return;

	if change_switch & fi.changes_count = 0 then return;
	if no_changes & fi.changes_count ^= 0 then return;

	if chairman_switch & cm_username ^= fi.chairman.username then return;

	if read_only & ^fi.read_only then return;
	if no_read_only & fi.read_only then return;
	if fi.adjourned & no_adjourned then return;
	if ^fi.adjourned & adjourned then return;

	if (notify_switch & ^fi.notify) | (no_notify & fi.notify) then do;
	     if change_switch then interesting_switch = "1"b;
	     return;
	end;

	if before_time > 0 & before_time < fi.last_time_changed then return;

ADD_FORUM:
	do forum_idx = 1 to no_selected;
	     if fi.forum_uid = forums (forum_idx).uid then return;
	end;

	no_selected = no_selected + 1;

	call forum_$get_forum_path (forum_directory, star_list_names (obj_name_idx), real_dir, real_name, status);
	if status ^= 0 then do;
	     if forum_directory = ">" then my_path = forum_directory;
	     else my_path = rtrim (forum_directory) || ">";
	     my_path = my_path || my_long_name;
	end;
	else do;
	     if real_dir = ">" then my_path = real_dir;
	     else my_path = rtrim (real_dir) || ">";
	     my_path = my_path || substr (real_name, 1, length (rtrim (real_name)));
	end;

	forums (no_selected).long_name = my_long_name;
	forums (no_selected).path_name = my_path;
	forums (no_selected).uid = fi.forum_uid;
	forums (no_selected).last_seen = fi.last_seen_trans_idx;
	forums (no_selected).last_trans = fi.transaction_count;
	forums (no_selected).eligible = fi.eligible;
	forums (no_selected).removed = fi.removed;
	forums (no_selected).notify = fi.notify;
	forums (no_selected).attending = fi.attending;
	forums (no_selected).read_only = fi.read_only;
	forums (no_selected).attended = (fi.last_time_attended ^= 0);
	forums (no_selected).adjourned = fi.adjourned;
	forums (no_selected).processed = "0"b;
	forums (no_selected).count = fi.changes_count;
	forums (no_selected).order = no_selected;

	if my_short_name = "" then do;
	     forums (no_selected).short_name = my_long_name;
	     forums (no_selected).two_names = "0"b;
	end;
	else do;
	     forums (no_selected).short_name = my_short_name;
	     forums (no_selected).two_names = "1"b;
	     if verbose_switch then short_name_width = max (short_name_width, length (rtrim (my_short_name)));
	end;

	if verbose_switch then do;
	     forums (no_selected).chairman = rtrim (fi.chairman.username) || "." || fi.chairman.project;
	     chair_width = max (chair_width, length (rtrim (forums (no_selected).chairman)));
	end;

	if absolute_pathname then
	     name_width = max (name_width, length (my_path));
	else name_width = max (name_width, length (my_long_name));

	if fi.changes_count > 0 then no_changed = no_changed + 1;

	return;

     end check_forum;
%page;
get_select_name:
     procedure ();

	if arg_lth > 26 then
	     call ssu_$abort_line (ssu_ptr, 0, "^[Exclude^;Match^] name too long.  ^a", exclude_switch, arg);

	no_names = no_names + 1;

	forum_names (no_names) = arg;
	exclude (no_names) = exclude_switch;
	matched (no_names) = exclude_switch;		/* don't care if excludes are matched */
	call check_star_name_$entry (rtrim (forum_names (no_names)) || ".forum", status);
	if status ^= 0
	then if status = 1 | status = 2
	     then star_name (no_names) = "1"b;
	     else call ssu_$abort_line (ssu_ptr, status, "^[Exclude^;Match^] name.  ""^a""", exclude_switch, arg);

	return;

     end get_select_name;


match_select_name:
     procedure () returns (bit (1) aligned);

declare	accepting			bit (1) aligned,
	match			bit (1) aligned,
	name_idx			fixed bin,
	star_idx			fixed bin;

	accepting = exclude (1);

	do name_idx = 1 to select_names.no_names;
	     match = "0"b;
	     do star_idx = obj_name_idx to obj_name_idx + obj_name_count - 1 while (^match);

		if star_name (name_idx) then do;
		     call match_star_name_ (star_list_names (star_idx), rtrim (forum_names (name_idx)) || ".forum",
			status);
		     if status ^= 0 then
			call match_star_name_ (star_list_names (star_idx), rtrim (forum_names (name_idx)) || ".control",
			status);
		     if status = 0 then match = "1"b;
		end;
		else if rtrim (forum_names (name_idx)) || ".forum" = star_list_names (star_idx) |
		     rtrim (forum_names (name_idx)) || ".control" = star_list_names (star_idx)
		     then explicit, match = "1"b;
		matched (name_idx) = matched (name_idx) | match;
	     end;
	     if match then accepting = ^exclude (name_idx);
	end;

	return (accepting);

     end match_select_name;
%page;
get_user_name:
     procedure (chairman_sw);

declare	personid			char (32) varying,
	projectid			char (31) varying,
	tag			char (30) varying,
	chairman_sw		bit (1) aligned;

	if (^chairman_sw & user_name_given) then
	     call ssu_$abort_line (ssu_ptr, 0, "Only one -user specification may be given.  ^a", arg);
	if arg_lth > 32 then call ssu_$abort_line (ssu_ptr, 0, "User names must be less than 32 characters.  ^a", arg);

	if ^chairman_sw then do;
	     user_name_expected = "0"b;
	     user_name_given = "1"b;
	end;

	personid = before (arg, ".");
	if personid = "" then personid = "*";
	if personid = "*" then any_person = "1"b;
	if length (personid) > 20 then call ssu_$abort_line (ssu_ptr, 0, "Usernames may not exceed 20 characters.  ^a", arg);

	projectid = after (arg, ".");
	tag = after (projectid, ".");
	if tag = "" then tag = "*";
	else if length (tag) ^= 1 then call ssu_$abort_line (ssu_ptr, 0, "Tags must be one character long.  ^a", arg);

	projectid = before (projectid, ".");
	if projectid = "" then projectid = "*";
	else if length (projectid) > 9 then call ssu_$abort_line (ssu_ptr, 0, "Projects cannot exceed 9 characters.  ^a", arg);

	if chairman_sw then cm_username = personid;
	else access_name = personid || "." || projectid || "." || tag;

	return;

     end get_user_name;
%page;
/* The following routine is a simple shell sort by short_name.  */

sort_output:
     procedure ();

dcl	(i, k, l, t)		fixed bin;

	k, l = no_selected;
	do while (k <= l);
	     l = -1;
	     do i = 2 to k;
		l = i - 1;
		if short_name (order (l)) > short_name (order (i))
		then do;
			t = order (l);
			order (l) = order (i);
			order (i) = t;
			k = l;
		     end;
	     end;
	end;

	return;

     end sort_output;
%page;
/* Here we build the active function return value.  The short_name of
   each forum is returned if possible, otherwise the long_name.  The
   names are requoted since they might contain special command_processor
   characters, and they are separated by spaces.  */

return_af_value:
     procedure (start);

declare	start			fixed bin;

	do i = start to no_selected;

	     if length (return_string) ^= 0 then return_string = return_string || " ";

	     if absolute_pathname
	     then return_string = return_string || requote_string_ (rtrim (forums (order (i)).path_name));
	     else return_string = return_string || requote_string_ (rtrim (forums (order (i)).short_name));
	end;

	return;
     end;
%page;
print_changes:
     procedure (start);

declare	start			fixed bin;

	if header_switch & no_selected - start + 1 > 0 then call ioa_ ("Changed meetings = ^d.^/",
	     no_selected - start + 1);
	else if no_selected - start + 1 = 0 & ^brief_switch
	then call ioa_ ("No ^[interesting ^]meetings have changed.", interesting_switch);

	if absolute_pathname & name_width > 0 then name_width = name_width + 5;
	if count_switch then name_width = name_width + 7;

	do i = start to no_selected;

	     j = order (i);

	     if absolute_pathname
	     then call ioa_ ("^[^5d  ^;^s^]^a^[^v.0t(^a)^;^s^]", count_switch, forums (j).count,
		     forums (j).path_name, forums (j).two_names, name_width, forums (j).short_name);

	     else call ioa_ ("^[^5d  ^;^s^]^a^[  (^a)^]", count_switch, forums (j).count, forums (j).long_name,
		     forums (j).two_names, forums (j).short_name);
	end;

	return;

     end print_changes;
%page;
/* Print the results, displaying the long and short name (if any) and whatever flags the user asked
   for.  If the user wants a header, print one.  And make the columns line up in the minimum amount of space.  */

print_output:
     procedure ();

declare	flag_string		char (8) varying,
	last_width		fixed bin,
	i			fixed bin,
	j			fixed bin;

	if absolute_pathname then do;
	     if count_switch then do;
		name_width = name_width + 10;
		short_name_width = name_width + short_name_width + 9;
	     end;
	     else do;
		name_width = name_width + 3;
		short_name_width = name_width + short_name_width + 11;
	     end;
	end;
	else do;
	     if count_switch then short_name_width = short_name_width + 5;
	     short_name_width = name_width + short_name_width + 12;
	end;
	chair_width = chair_width + short_name_width + 2;

	if header_switch then
	     call ioa_ ("Meetings = ^d, Changed = ^d.^[^/^]^[^vtChairman^vtCurrent  Last^]", no_selected, no_changed,
		no_selected > 0, verbose_switch, short_name_width, chair_width);

	do i = 1 to no_selected;

	     j = order (i);

	     if all_switch
	     then if forums (j).eligible
		then flag_string = "e";
		else flag_string = " ";
	     else flag_string = "";

	     if (all_switch | eligible_switch) & ^any_person & ^no_participate
	     then if forums (j).removed then flag_string = flag_string || "r";
		else if forums (j).attended then flag_string = flag_string || "p";
		else flag_string = flag_string || " ";

	     if forums (j).adjourned then
		flag_string = flag_string || "j";
		else flag_string = flag_string || " ";

	     if ^notify_switch & ^any_person & ^no_notify
	     then if forums (j).notify
		then flag_string = flag_string || "n";
		else flag_string = flag_string || " ";

	     if ^any_person & ^count_switch & ^no_changes
	     then if forums (j).count > 0
		then flag_string = flag_string || "c";
		else flag_string = flag_string || " ";

	     if ^any_person
	     then if forums (j).attending
		then flag_string = flag_string || "a";
		else flag_string = flag_string || " ";

	     if ^any_person & ^read_only
	     then if forums (j).read_only
		then flag_string = flag_string || "o";
		else flag_string = flag_string || " ";

	     if (all_switch | ^any_person) & ^count_switch then flag_string = flag_string || "  ";

	     if verbose_switch then do;
		last_seen_pic = forums (j).last_seen;
		last_trans_pic = forums (j).last_trans;
		if forums (j).last_trans > 100000 then last_width = chair_width + 11;
		else if forums (j).last_trans > 10000 then last_width = chair_width + 10;
		last_width = chair_width + 9;
	     end;

	     if absolute_pathname
	     then call ioa_ ("^a^v.0t^[^[^5d  ^;^7x^s^]^;^2s^]^a^[^vt(^a)^;^2s^]^[^vt^a^vt[^a]^vt[^a]^]", flag_string,
		     (length (flag_string) + 1), count_switch, (forums (j).count > 0), forums (j).count,
		     forums (j).path_name, forums (j).two_names, (name_width + length (flag_string)), forums (j).short_name,
		     verbose_switch, short_name_width, forums (j).chairman, chair_width,
		     ltrim (last_seen_pic), last_width, ltrim (last_trans_pic));

	     else call ioa_ ("^a^v.0t^[^[^5d  ^;^7x^s^]^;^2s^]^va^[  ^a^;^s^]^[^vt^a^vt[^a]^vt[^a]^]", flag_string,
		     (length (flag_string) + 1),
		     count_switch, (forums (j).count > 0), forums (j).count, name_width, forums (j).long_name,
		     forums (j).two_names, forums (j).short_name, verbose_switch, short_name_width,
		     forums (j).chairman, chair_width, ltrim (last_seen_pic), last_width, ltrim (last_trans_pic));
	end;

	return;

     end print_output;
%page;
punt:	proc ();

	go to EGRESS;

     end punt;
     

clean_up:
     procedure ();

	if select_names_ptr ^= null () then call release_temp_segment_ (whoami, select_names_ptr, (0));

	if star_list_branch_ptr ^= null ()
	then do;
		if star_list_names_ptr ^= null () then free star_list_names;
		free star_dir_list_branch;
	     end;

	if sl_info_p ^= null () then free sl_info;

	if ^subsystem_entry then call ssu_$destroy_invocation (ssu_ptr);

	return;

     end clean_up;
%page;
next_meeting:
     entry (P_ssu_ptr, P_passport_info_ptr);

	ssu_ptr = P_ssu_ptr;

	call ssu_$return_arg (ssu_ptr, arg_count, active_function, rtn_string_ptr, rtn_string_length);

	absolute_pathname, all_switch, brief_switch, count_switch = "0"b;
	header_switch = "1"b;

	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_lth);
	     if index (arg, "-") ^= 1 then 
		call ssu_$abort_line (ssu_ptr, 0, "Usage:  nm {-control_arg}");
	     else if arg = "-all" | arg = "-a" then all_switch, count_switch = "1"b;
	     else if arg = "-count" | arg = "-ct" then brief_switch = "1"b;
	     else if arg = "-list" | arg = "-ls" then count_switch = "1"b;
	     else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
	end;

	if brief_switch & count_switch then
	     call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, """-count"" and ""-all"" or ""-list""");

	if forum_data_$meeting_list = null () then
	     call ssu_$abort_line (ssu_ptr, 0, "The check_meetings request has not been used in this process.");
	
	forums_array_ptr = forum_data_$meeting_list;

	if brief_switch then do;
	     do i = 1 to forums_array.no_selected while (forums (order (i)).processed);
	     end;
	     j = forums_array.no_selected - i + 1;
	     if active_function then return_string = ltrim (char (j));
	     else call ioa_ ("There ^[is^;are^] ^[no more^s^;^d^] changed meeting^[s^].", j = 1, (j = 0), j, j ^= 1);
	     return;
	end;

	if count_switch then do;
	     if all_switch then i = 1;
	     else do i = 1 to forums_array.no_selected while (forums (order (i)).processed);
	     end;

	     if active_function then call return_af_value (i);
	     else call print_changes (i);
	     return;
	end;

	do i = 1 to forums_array.no_selected;
	     j = order (i);
	     if ^forums (j).processed then do;
		if active_function then return_string = forums (j).long_name;
		else do;
		     request = "goto " || requote_string_ (forums (j).path_name);
		     call ssu_$execute_line (ssu_ptr, addr (request), length (rtrim (request)), status);
		end;
		forums (j).processed = "1"b;
		return;
	     end;
	end;

	call ssu_$abort_line (ssu_ptr, 0, "There are no more changed meetings.");

     end forum_list_meetings;
