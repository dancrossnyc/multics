/****^  ***************************************************************
        *                                                             *
        * Copyright, (C) BULL HN Information Systems Inc., 1992       *
        *                                                             *
        * Copyright, (C) Massachusetts Institute of Technology, 1986  *
        *                                                             *
        * Copyright (c) 1982 by Massachusetts Institute of Technology *
        *                                                             *
        *************************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Made read_trans handle user area full.
  2) change(92-05-20,Vu), approve(92-05-20,MCR8255), audit(92-10-08,Zimmerman),
     install(92-10-19,MR12.5-1027):
     forum raises 'area condition' in large meetings
                                                   END HISTORY COMMENTS */


/* split off from forum_trans_specs_, added sort_by_chain 11/19/82 Jay Pattin */

forum_trans_util_$read_trans:
     proc (P_passport_info_ptr, P_forum_idx, P_trans_idx, P_forum_user_trans_ptr, P_code);

declare	(P_passport_info_ptr	ptr,
	P_code			fixed bin (35),
	P_forum_trans_list_ptr	ptr,
	P_forum_idx		fixed bin,
	P_trans_idx		fixed bin,
	P_type			fixed bin,
	P_forum_user_trans_ptr	ptr) parameter;

declare	based_fb			fixed bin based,
	cache			bit (1) aligned,
	code			fixed bin (35),
	forum_idx			fixed bin,
	idx			fixed bin,
	(low, low_in_chain)		fixed bin,
	new_trans_list_ptr		ptr,
	nref			fixed bin,
	retry			bit (1) aligned,
	ssu_ptr			ptr,
	trans_idx			fixed bin,
	type			fixed bin,
	v_ptr			ptr;

declare	1 new_trans_list		aligned like forum_trans_list based (new_trans_list_ptr),
	1 v			aligned based (v_ptr),
	2 n			fixed bin,
	2 vector			(alloc_trans_list_size refer (v.n)) ptr unaligned;

declare	(error_table_$noalloc,
	forum_et_$no_forum,
	forum_et_$no_unprocessed,
	forum_et_$trans_reaped,
	forum_et_$trans_deleted)
				fixed bin (35) external static;

declare	forum_$read_trans		entry (fixed bin, fixed bin, ptr, ptr, fixed bin (35)),
	forum_$trans_ref_info	entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, bit (1) aligned,
				fixed bin (35)),
	sort_items_$fixed_bin	entry (ptr),
	ssu_$abort_line		entry options (variable);

declare   (area, cleanup)               condition,
	(addr, null)		builtin;
%page;
%include forum_passport;
%page;
%include forum_trans_list;
%page;
%include forum_user_trans;
%page;
	passport_info_ptr = P_passport_info_ptr;
	ssu_ptr = passport.ssu_ptr;
	trans_idx = P_trans_idx;
	cache = "1"b;

	if P_forum_idx = 0 then do;			/* use current forum */
	     forum_idx = passport.forum_idx;
 	     if forum_idx = 0 & P_trans_idx ^= 0 then call ssu_$abort_line (ssu_ptr, forum_et_$no_forum);
	end;
	else do;					/* use forum given */
	     forum_idx = P_forum_idx;
	     if forum_idx ^= passport.forum_idx then cache = "0"b;	/* don't use cache */
	end;

	if trans_idx = 0 then do;			/* unprocessed trans */
	     if passport.unprocessed_trans_ptr = null then
		call ssu_$abort_line (ssu_ptr, forum_et_$no_unprocessed);
	     P_forum_user_trans_ptr = passport.unprocessed_trans_ptr;
	     P_code = 0;
	     return;
	end;

	if cache & passport.first_trans_ptr ^= null () then do;	/* Look for message in user ring cache */
	     do forum_user_trans_ptr = passport.last_trans_ptr repeat forum_user_trans.prev_trans_ptr
		while (forum_user_trans_ptr ^= null ());
		if forum_user_trans.trans_no = trans_idx then do;
		     P_forum_user_trans_ptr = forum_user_trans_ptr;
		     P_code = 0;
		     return;
		end;
	     end;
	end;

	retry = "0"b;
TRY_AGAIN:
	call forum_$read_trans (forum_idx, trans_idx, passport.area_ptr, forum_user_trans_ptr, code);
	if forum_user_trans_ptr ^= null () then		/* Thread it in cache */
	     if cache then do;
		forum_user_trans.prev_trans_ptr = passport.last_trans_ptr;
		forum_user_trans.next_trans_ptr = null ();
		if passport.first_trans_ptr = null () then
		     passport.first_trans_ptr = forum_user_trans_ptr;
		else passport.last_trans_ptr -> forum_user_trans.next_trans_ptr = forum_user_trans_ptr;
		passport.last_trans_ptr = forum_user_trans_ptr;
	     end;
	     else;
	else if code = forum_et_$trans_reaped | code = forum_et_$trans_deleted then;
	else if code = error_table_$noalloc & ^retry then do;
	     retry = "1"b;
	     call forum_trans_util_$clear_cache (passport_info_ptr);
	     goto TRY_AGAIN;
	end;
	else call ssu_$abort_line (ssu_ptr, code, "Reading transaction ^d.", trans_idx);

	P_forum_user_trans_ptr = forum_user_trans_ptr;
	P_code = code;
	return;
%page;
/* This routine is called to free user-ring cache storage when the current forum is closed */

forum_trans_util_$clear_cache:
     entry (P_passport_info_ptr);

declare	p			 pointer;

	passport_info_ptr = P_passport_info_ptr;
	if passport_info_ptr = null () then return;

	on cleanup begin;
	     passport.first_trans_ptr, passport.last_trans_ptr = null ();
	end;

	do forum_user_trans_ptr = passport.first_trans_ptr repeat p while (forum_user_trans_ptr ^= null ());
	     p = forum_user_trans.next_trans_ptr;
	     free forum_user_trans;
	end;
	passport.first_trans_ptr, passport.last_trans_ptr = null ();
	return;
%page;
forum_trans_util_$reverse:
     entry (P_passport_info_ptr, P_forum_trans_list_ptr);

	passport_info_ptr = P_passport_info_ptr;
	forum_trans_list_ptr = P_forum_trans_list_ptr;
	
	new_trans_list_ptr = null ();
	on cleanup begin;
	     if new_trans_list_ptr ^= null () then free new_trans_list;
	end;

	alloc_trans_list_size = forum_trans_list.size;

RETRY:
	on area begin;
	     call forum_trans_util_$clear_cache (passport_info_ptr);
               goto RETRY;
	end;

	allocate new_trans_list in (forum_area);
          revert area;
	new_trans_list.size = alloc_trans_list_size;
	new_trans_list.max_personid_len = forum_trans_list.max_personid_len;
	do trans_idx = 1 to new_trans_list.size;
	     new_trans_list.trans_num (trans_idx) = forum_trans_list.trans_num (new_trans_list.size - trans_idx + 1);
	end;

	free forum_trans_list;
	P_forum_trans_list_ptr = new_trans_list_ptr;
	return;
%page;
forum_trans_util_$sort_by_chain:
     entry (P_passport_info_ptr, P_forum_idx, P_forum_trans_list_ptr, P_type);

	passport_info_ptr = P_passport_info_ptr;
	forum_idx = P_forum_idx;
	forum_trans_list_ptr = P_forum_trans_list_ptr;
	type = P_type;

	new_trans_list_ptr, v_ptr = null ();
	on cleanup begin;
	     if new_trans_list_ptr ^= null () then free new_trans_list;
	     if v_ptr ^= null () then free v;
	end;

	alloc_trans_list_size = forum_trans_list.size;
	allocate v in (forum_area);
	do idx = 1 to forum_trans_list.size;
	     v.vector (idx) = addr (forum_trans_list.trans_num (idx));
	end;
	call sort_items_$fixed_bin (v_ptr);

	allocate new_trans_list in (forum_area);
	new_trans_list.max_personid_len = forum_trans_list.max_personid_len;
	new_trans_list.size = 0;

	trans_idx = v.vector (1) -> based_fb;
	v.vector (1) = null ();
	low = 2;

	do while ("1"b);
ADD:	     new_trans_list.size = new_trans_list.size + 1;
	     new_trans_list.trans_num (new_trans_list.size) = trans_idx;

	     if new_trans_list.size = forum_trans_list.size then do;     /* Done */
		free v;
		free forum_trans_list;
		P_forum_trans_list_ptr = new_trans_list_ptr;
		return;
	     end;

	     low_in_chain = low;
	     call forum_$trans_ref_info (forum_idx, trans_idx, type, (0), nref, ("0"b), (0));
	     do while (nref ^= 0);
		do idx = low_in_chain to v.n;
		     if v.vector (idx) ^= null () then do;
			trans_idx = v.vector (idx) -> based_fb;
		     	if trans_idx = nref then do;
			     v.vector (idx) = null ();
			     low_in_chain = idx + 1;
			     goto ADD;
			end;
			if trans_idx > nref then goto NOT_THIS_ONE;
		     end;
		end;
NOT_THIS_ONE:	trans_idx = nref;
		call forum_$trans_ref_info (forum_idx, trans_idx, type, (0), nref, ("0"b), (0));
		low_in_chain = idx;
	     end;

	     do idx = low to v.n while (v.vector (idx) = null ());	/* No more in chain, find next head */
	     end;
	     trans_idx = v.vector (idx) -> based_fb;
	     v.vector (idx) = null ();
	     low = idx + 1;
	end;
	     
     end forum_trans_util_$read_trans;
