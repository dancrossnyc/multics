/****^  ***************************************************************
        *                                                             *
        * Copyright, (C) Massachusetts Institute of Technology, 1986  *
        *                                                             *
        * Copyright (c) 1982 by Massachusetts Institute of Technology *
        *                                                             *
        *************************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Added -tfmt control argument, changed handling of area to make it
     non-extensible.  Use goto request to enter initial meeting.
                                                   END HISTORY COMMENTS */


forum:
     procedure ();

/* Jay Pattin modified from continuum 1/82
   Jay Pattin 03/07/82 added enter_first_trans
   Jay Pattin 9/29/82 added -start_up */

dcl	(substr, addr, codeptr, null, maxlength, min, string)
				builtin;

declare	cleanup			condition;

declare   abbrev_switch		bit (1) aligned,
	arg_count			fixed bin,
	arg_idx			fixed bin,
	arg_len			fixed bin (21),
	arg_ptr			ptr,
	argmap_ptr		ptr,
	first_trans		bit (1) aligned,
	list			bit (1) aligned,
	list_arg			fixed bin,
	profile_dir		char (168),
	profile_entry		char (32),
	profile_ptr		ptr,
	prompt			char (64) varying,
	quit_switch		bit (1) aligned,
	request			char (256),
	request_arg		fixed bin,
	saved_state		fixed bin,
	start_up_switch		bit (1) aligned,
	state			fixed bin,
	status			fixed bin (35);

declare	PROMPT_			fixed bin static options (constant) initial (1),	/* avoid name conflict with ssu_prompt_modes */
	REQUEST_LINE		fixed bin static options (constant) initial (2),
	LINE_LENGTH		fixed bin static options (constant) initial (3),
	MEETING			fixed bin static options (constant) initial (4),
	DONE			fixed bin static options (constant) initial (5),
	PROFILE			fixed bin static options (constant) initial (6),
	LIST			fixed bin static options (constant) initial (7),
	INPUT_LENGTH		fixed bin static options (constant) initial (8),
	OUTPUT_LENGTH		fixed bin static options (constant) initial (9),
	TRAILER_FORMAT		fixed bin static options (constant) init (10),
	whoami			char (32) static options (constant) initial ("forum");

declare	1 auto_area_info		aligned like area_info;
declare	arg			char (arg_len) based (arg_ptr),
	argmap			bit (arg_count) based (argmap_ptr),
	system_free_area		area based (get_system_free_area_ ());

declare	iox_$user_input		ptr external;

declare	(
	forum_request_tables_$user_requests,
	error_table_$bad_arg,
	error_table_$badopt,
	error_table_$bad_conversion,
	error_table_$noarg,
	error_table_$noentry,
	ssu_request_tables_$standard_requests,
	ssu_et_$exec_com_aborted,
	ssu_et_$program_interrupt,
	ssu_et_$request_line_aborted,
	ssu_et_$subsystem_aborted
	)			fixed binary (35) external;

declare	com_err_			entry () options (variable),
	com_err_$suppress_name	entry () options (variable),
	forum_requests_$add_passport	entry (ptr),
	forum_requests_$remove_passport
				entry (ptr),
	forum_requests_$set_forum
				entry (ptr, char (*), fixed bin (35)),
	forum_$close_forum	entry (fixed bin, fixed bin (35)),
	cu_$arg_count		entry (fixed bin, fixed bin (35)),
	cu_$arg_list_ptr		entry () returns (ptr),
	cu_$arg_ptr		entry (fixed bin, pointer, fixed bin (21), fixed binary (35)),
	cu_$generate_call		entry (entry, ptr),
	cv_dec_check_		entry (char (*), fixed bin (35)) returns (fixed bin (35)),
	expand_pathname_$add_suffix	entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	get_system_free_area_	entry () returns (ptr),
	hcs_$initiate		entry (char(*), char(*), char(*), fixed bin(1), fixed bin(2), ptr, fixed bin(35)),
	requote_string_		entry (char (*)) returns (char (*)),
	ssu_$add_request_table	entry (ptr, ptr, fixed bin, fixed bin (35)),
	ssu_$create_invocation	entry (char (*), char (*), ptr, ptr, char (*), ptr, fixed binary (35)),
	ssu_$destroy_invocation	entry (ptr),
	ssu_$execute_line		entry (ptr, ptr, fixed bin (21), fixed bin (35)),
	ssu_$execute_start_up	entry options (variable),
	ssu_$execute_string		entry (ptr, char (*), fixed bin (35)),
	ssu_$get_area		entry (ptr, ptr, char (*), ptr),
	ssu_$listen		entry (ptr, ptr, fixed bin (35)),
	ssu_$print_message		entry options (variable),
	ssu_$record_usage		entry (ptr, ptr, fixed bin (35)),
	ssu_$set_abbrev_info	entry (ptr, ptr, ptr, bit (1) aligned),
	ssu_$set_ec_search_list	entry (ptr, char (32)),
     	ssu_$set_ec_suffix		entry (ptr, char (32)),
	ssu_$set_prompt		entry (ptr, char (64) varying),
	ssu_$set_prompt_mode	entry (ptr, bit (*));
%page;
%include forum_passport;
%page;
%include ssu_prompt_modes;
%page;
%include area_info;
%page;
	passport_info_ptr = null ();
	on cleanup call clean_things_up ();

	first_trans = "0"b;
	start_up_switch = "1"b;
	call allocate_passport ();

	call cu_$arg_count (arg_count, status);
	if status ^= 0 then do;
	     call com_err_ (status, whoami);
	     return;
	end;

	allocate argmap in (system_free_area);

	state = MEETING;
	do arg_idx = 1 to arg_count;
	     call cu_$arg_ptr (arg_idx, arg_ptr, arg_len, status);

	     if state = LIST then do;
		if substr (arg, 1, 1) = "-" then goto CTL_ARG;
		list_arg = arg_idx;
		state = saved_state;
	     end;

	     else if state = PROMPT_
	     then do;
		     if arg_len > maxlength (prompt)
		     then call error (0, whoami, "The prompt may be a maximum of ^d characters.",
			     maxlength (prompt));
		     prompt = arg;
		     state = saved_state;
		end;

	     else if state = PROFILE then do;
		     call get_profile (arg);
		     abbrev_switch = "1"b;
		     state = saved_state;
		end;

	     else if state = REQUEST_LINE then do;
		     request_arg = arg_idx;
		     state = saved_state;
		end;

 	     else if state = LINE_LENGTH
	     then do;
		     passport.input_fill_width, passport.output_fill_width = cv_dec_check_ (arg, status);
		     if status ^= 0 then call error (error_table_$bad_conversion, whoami, "^a", arg);
		     state = saved_state;
		end;

	     else if state = INPUT_LENGTH
	     then do;
		     passport.input_fill_width = cv_dec_check_ (arg, status);
		     if status ^= 0 then call error (error_table_$bad_conversion, whoami, "^a", arg);
		     state = saved_state;
		end;

 	     else if state = OUTPUT_LENGTH
	     then do;
		     passport.output_fill_width = cv_dec_check_ (arg, status);
		     if status ^= 0 then call error (error_table_$bad_conversion, whoami, "^a", arg);
		     state = saved_state;
		end;

	     else if state = TRAILER_FORMAT then do;
		if arg = "none" then passport.trailer_format = TFMT_none;
		else if arg = "number" | arg = "nb" then passport.trailer_format = TFMT_number;
		else if arg = "more" then passport.trailer_format = TFMT_more;
		else if arg = "references" | arg = "refs" then passport.trailer_format = TFMT_reference;
		else call error (error_table_$bad_arg, whoami, "Invalid trailer format: ^a.", arg);
		state = saved_state;
	     end;

	     else if substr (arg, 1, min (1, arg_count)) = "-" then
CTL_ARG:		if arg = "-abbrev" | arg = "-ab" then abbrev_switch = "1"b;
		else if arg = "-no_abbrev" | arg = "-nab" then abbrev_switch = "0"b;
		else if arg = "-auto_write" then passport.auto_write = "1"b;
		else if arg = "-no_auto_write" then passport.auto_write = "0"b;
		else if arg = "-brief" | arg = "-bf" then passport.brief_sw = "1"b;
		else if arg = "-list" | arg = "-ls" then do;
		     call want_arg (LIST);
		     list = "1"b;
		end;
		else if arg = "-long" | arg = "-lg" then passport.brief_sw = "0"b;
		else if arg = "-meeting" | arg = "-mtg" then do;
		     if argmap ^= ""b then call error (0, whoami, "Only one meeting may be specified.");
		     call want_arg (MEETING);
		end;
		else if arg = "-no_start_up" | arg = "-ns" | arg = "-nsu" then start_up_switch = "0"b;
		else if arg = "-start_up" | arg = "-su" then start_up_switch = "1"b;
		else if arg = "-profile" | arg = "-pf" then call want_arg (PROFILE);
		else if arg = "-prompt" then call want_arg (PROMPT_);
		else if arg = "-no_prompt" then prompt = "";
		else if arg = "-quit" then quit_switch = "1"b;
		else if arg = "-rq" | arg = "-request" then call want_arg (REQUEST_LINE);
		else if arg = "-ll" | arg = "-line_length" then call want_arg (LINE_LENGTH);
		else if arg = "-ill" | arg = "-input_line_length" then call want_arg (INPUT_LENGTH);
		else if arg = "-oll" | arg = "-output_line_length" then call want_arg (OUTPUT_LENGTH);
		else if arg = "-output_fill" | arg = "-ofi" then passport.print_fill = "1"b;
		else if arg = "-no_output_fill" | arg = "-nof" then passport.print_fill = "0"b;
		else if arg = "-input_fill" | arg = "-ifi" then passport.talk_fill = "1"b;
		else if arg = "-no_input_fill" | arg = "-nif" then passport.talk_fill = "0"b;
		else if arg = "-trailer_format" | arg = "-tfmt" then call want_arg (TRAILER_FORMAT);

		else call error (error_table_$badopt, whoami, "^a", arg);

	     else if state = MEETING
	     then do;
		     substr (argmap, arg_idx, 1) = "1"b;
		     state = DONE;
		end;

	     else do;
		     call com_err_$suppress_name (0, whoami, "Usage:  forum {meeting_name} {-control_args}");
		     return;
		end;
	end;

	if state ^= LIST & state ^= MEETING & state ^= DONE then
	     call error (error_table_$noarg, whoami, "Following ""^a"".", arg);

	if argmap = ""b & list then call error (0, whoami, "-list may not be specified if no meeting_name is given.");
	goto CREATE_SUBSYSTEM;
%page;
forum$enter_first_trans:
     entry (P_forum);

declare	P_forum			char (*);

	first_trans = "1"b;
	start_up_switch = "0"b;

	passport_info_ptr = null ();
	on cleanup call clean_things_up ();

	call allocate_passport ();

CREATE_SUBSYSTEM:
	call ssu_$create_invocation (whoami, forum_data_$version_string, passport_info_ptr,
	     addr (forum_request_tables_$user_requests), forum_data_$info_directory, passport.ssu_ptr, status);
	if status ^= 0 then call error (status, whoami, "Creating subsystem invocation.");

	call ssu_$add_request_table (passport.ssu_ptr, addr (ssu_request_tables_$standard_requests), 2, status);
	if status ^= 0 then call error (status, whoami, "Adding standard request table.");

	call ssu_$record_usage (passport.ssu_ptr, codeptr (forum), (0));

	call ssu_$set_prompt (passport.ssu_ptr, prompt);

	call ssu_$set_prompt_mode (passport.ssu_ptr, PROMPT);
	call ssu_$set_abbrev_info (passport.ssu_ptr, profile_ptr, profile_ptr, abbrev_switch);
	call ssu_$set_ec_suffix (passport.ssu_ptr, "fmec");
	call ssu_$set_ec_search_list (passport.ssu_ptr, "exec_com");

	unspec (auto_area_info) = ""b;
	auto_area_info.version = area_info_version_1;
	auto_area_info.zero_on_free = "1"b;

	call ssu_$get_area (passport.ssu_ptr, addr (auto_area_info), "forum_area", passport.area_ptr);

	if start_up_switch then do;
	     call ssu_$execute_start_up (passport.ssu_ptr, status);
	     if status ^= 0 then
		if status ^= error_table_$noentry & status ^= ssu_et_$exec_com_aborted then do;
		     if status = ssu_et_$subsystem_aborted then goto MAIN_RETURN;
		     else call ssu_$print_message (ssu_ptr, status, "Executing start_up.");
		end;
	end;

	if ^first_trans then do;
	     do arg_idx = 1 to arg_count;
		if substr (argmap, arg_idx, 1) then do;
		     call cu_$arg_ptr (arg_idx, arg_ptr, arg_len, (0));
		     request = "goto " || requote_string_ (arg);
		     call ssu_$execute_line (ssu_ptr, addr (request), length (rtrim (request)), status);
		     if status = ssu_et_$request_line_aborted | status = ssu_et_$subsystem_aborted then goto MAIN_RETURN;
		     else if status ^= 0 & status ^= ssu_et_$program_interrupt then
			call error (status, whoami, "Going to the ^a meeting.", arg);
		end;
	     end;
	     free argmap;

	     if list then do;
		if list_arg > 0 then do;
		     call cu_$arg_ptr (list_arg, arg_ptr, arg_len, (0));
		     call ssu_$execute_string (passport.ssu_ptr, "list " || arg, status);
		end;
		else call ssu_$execute_string (passport.ssu_ptr, "list", status);
		if status ^= 0 then
		     if status ^= ssu_et_$request_line_aborted  & status ^= ssu_et_$program_interrupt then
			call error (status, whoami, "Listing transactions.");
	     end;
	     
	     if request_arg > 0 then do;
		call cu_$arg_ptr (request_arg, arg_ptr, arg_len, (0));
		call ssu_$execute_string (passport.ssu_ptr, arg, status);
		if status = ssu_et_$subsystem_aborted then goto MAIN_RETURN;
		if status = ssu_et_$request_line_aborted | status = ssu_et_$program_interrupt then;
		else if status ^= 0 then
		     call error (status, whoami, "Executing initial request.");
	     end;
	end;

	else do;
	     passport.brief_sw = "1"b;
	     call forum_requests_$set_forum (passport_info_ptr, P_forum, status);
	     if status ^= 0 then call error (status, whoami, "Unable to access the ""^a"" meeting.", P_forum);
	     passport.print_message = "0"b;
	     call ssu_$execute_string (passport.ssu_ptr, "talk -sj ""Reason for this meeting""", (0));
	     if passport.unprocessed_trans_ptr = null () then goto MAIN_RETURN;
	end;


	if ^quit_switch then do;
	     call ssu_$listen (passport.ssu_ptr, iox_$user_input, status);
	     if status ^= 0 & status ^= ssu_et_$subsystem_aborted then
		call error (status, whoami, "Unable to call listener.");
	end;

MAIN_RETURN:
	call clean_things_up ();

	return;
%page;
want_arg:
     procedure (new_state);

declare	new_state			fixed bin;

	saved_state = state;
	state = new_state;

	return;

     end want_arg;

get_profile:
     procedure (path);

dcl path				char (*);

	call expand_pathname_$add_suffix (path, "profile", profile_dir, profile_entry, status);
	if status ^= 0 then do;
BAD_PROFILE:
	     call com_err_ (status, whoami, "^a", path);
	     goto MAIN_RETURN;
	end;

	call hcs_$initiate (profile_dir, profile_entry, "", 0, 0, profile_ptr, status);
	if profile_ptr = null () then do;
	     if status = error_table_$noentry then do;
		call com_err_ (status, whoami, "^a>^a does not exist.", profile_dir, profile_entry);
		goto MAIN_RETURN;
	     end;
	     else goto BAD_PROFILE;
	end;
	return;
     end get_profile;
%page;
allocate_passport:
     procedure ();

	abbrev_switch, list, quit_switch = "0"b;
	request_arg, list_arg = 0;
	prompt = "^/forum^[ (^d)^]:^2x";
	argmap_ptr, profile_ptr = null ();

	allocate passport in (system_free_area);
	passport.version = passport_version_2;
	passport.forum_dir = "";
	passport.forum_name = "";
	passport.input_fill_width = 0;
	passport.output_fill_width = 0;
	string (passport.flags) = "0"b;
	passport.talk_fill = "1"b;
	passport.public_channel = 0;
	passport.first_trans_ptr, passport.last_trans_ptr = null ();
	passport.unprocessed_trans_ptr = null ();
	passport.ssu_ptr = null ();
	passport.trailer_format = TFMT_reference;

	call forum_requests_$add_passport (passport_info_ptr);
	return;
     end allocate_passport;
%page;
clean_things_up:
     procedure ();

     if argmap_ptr ^= null () then free argmap;

     if passport_info_ptr ^= null () then do;
	if passport.forum_idx ^= 0 then call forum_$close_forum (passport.forum_idx, (0));
	call forum_requests_$remove_passport (passport_info_ptr);

	if passport.ssu_ptr ^= null () then call ssu_$destroy_invocation (passport.ssu_ptr);
	free passport;
      end;

      return;

     end clean_things_up;


error:
     procedure () options (variable);

	call cu_$generate_call (com_err_, cu_$arg_list_ptr ());

	go to MAIN_RETURN;

     end error;

end forum;
