/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Added -brief and -long to (add remove)_meeting.  Added -cmtg to
     remove_meeting.   Fixed some error messages.
                                                   END HISTORY COMMENTS */


forum_add_meeting:
fam:	proc ();

/* Adds and removes links in the user's forum search list.

   Jay Pattin 6/2/83 */

declare	(P_passport_info_ptr	ptr,
	P_ssu_ptr			ptr)
				parameter;

declare	active_function		bit (1) aligned,
	absolute_path		bit (1) aligned,
	arg_count			fixed bin,
	arg_idx			fixed bin,
	arg_len			fixed bin (21),
	arg_ptr			ptr,
	arg			char (arg_len) based (arg_ptr),
	brief			bit (1) aligned,
	chair			char (32),
	chairman			bit (1) aligned,
	check_switch		bit (1) aligned,
	cleanup_switch		bit (1) aligned,
	cmtg_switch		bit (1) aligned,
	directory			char (168),
	entry_name		bit (1) aligned,
	force			bit (1) aligned,
	forum_name		char (32),
	idx			fixed bin,
	link_dir			char (168),
	no_match			bit (1) aligned,
	path			char (168),
	ret_len			fixed bin (21),
	ret_ptr			ptr,
	ret_string		char (ret_len) based (ret_ptr) varying,
	ssu_ptr			ptr,
	start			fixed bin,
	status			fixed bin (35),
	subsystem			bit (1) aligned,
	type			fixed bin (2),
	update			bit (1) aligned,
	whoami			char (32);

declare	1 sb			aligned like status_branch,
	1 sl			aligned like status_link;
declare	NL			char (1) static options (constant) init ("
");

declare	(addr, after, before, index, ltrim, null, pointer, reverse, rtrim, search, substr, sum)
				builtin;
declare	cleanup			condition;

declare	(error_table_$badopt,
	error_table_$inconsistent,
	error_table_$namedup,
	error_table_$noarg,
	error_table_$no_s_permission,
	error_table_$noentry,
	error_table_$nomatch,
	error_table_$segnamedup,
	forum_et_$no_forum,
	forum_et_$no_such_forum,
	forum_et_$not_eligible)	fixed bin (35) external;

declare	active_fnc_err_		entry options (variable),
	check_star_name_$entry	entry (char (*), fixed bin (35)),
	com_err_			entry options (variable),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin (21)) returns (fixed bin (35)),
	cu_$arg_list_ptr		entry returns (ptr),
	expand_pathname_		entry (char (*), char (*), char (*), fixed bin (35)),
	expand_pathname_$add_suffix	entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	forum_$close_forum		entry (fixed bin, fixed bin (35)),
	forum_$get_forum_path	entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	forum_$get_forum_path_idx	entry (fixed bin, char (*), char (*), fixed bin (35)),
	forum_$get_uid_file		entry (char (*), char (*), bit (36) aligned, fixed bin (35)),
	forum_requests_$find_forum	entry (char (*), char (*), char (*), fixed bin, fixed bin (35)),
	forum_requests_$open_forum	entry (char (*), fixed bin, char (*), char (*), fixed bin (35)),
	forum_trans_specs_$parse_specs
				entry (ptr, fixed bin, bit (36) aligned, entry, fixed bin, char (*), char (*),
				ptr),
	forum_trans_util_$read_trans	entry (ptr, fixed bin, fixed bin, ptr, fixed bin (35)),
	get_system_free_area_	entry returns (ptr),
	get_wdir_			entry returns (char (168)),
	hcs_$append_link		entry (char (*), char (*), char (*), fixed bin (35)),
	hcs_$chname_file		entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	hcs_$delentry_file		entry (char (*), char (*), fixed bin (35)),
	hcs_$get_link_target	entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	hcs_$get_uid_file		entry (char (*), char (*), bit (36) aligned, fixed bin (35)),
	hcs_$star_		entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35)),
	hcs_$status_		entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35)),
	hcs_$status_minf		entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)),
	ioa_			entry options (variable),
	nd_handler_		entry (char (*), char (*), char (*), fixed bin (35)),
	pathname_			entry (char (*), char (*)) returns (char (168)),
	ssu_$abort_line		entry options (variable),
	ssu_$arg_count		entry (ptr, fixed bin),
	ssu_$arg_ptr		entry (ptr, fixed bin, ptr, fixed bin (21)),
	ssu_$destroy_invocation	entry (ptr),
	ssu_$get_subsystem_and_request_name
				entry (ptr) returns (char (72) var),
	ssu_$print_message		entry options(variable),
	ssu_$return_arg		entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21)),
	ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr, entry, fixed bin (35)),
	user_info_$whoami		entry (char (*), char (*), char (*));
%page;
%include status_structures;
%page;
%include star_structures;
%page;
%include forum_passport;
%page;
%include forum_trans_list;
%page;
%include forum_user_trans;
%page;
	subsystem = "0"b;
	whoami = "forum_add_meeting";
	on cleanup call ssu_$destroy_invocation (ssu_ptr);
	call create_subsystem ();

	goto ADD_COMMON;

add_meeting:
	entry (P_ssu_ptr, P_passport_info_ptr);

	ssu_ptr = P_ssu_ptr;
	passport_info_ptr = P_passport_info_ptr;
	subsystem = "1"b;
	whoami = ssu_$get_subsystem_and_request_name (ssu_ptr);

	forum_trans_list_ptr = null ();
	on cleanup begin;
	     if forum_trans_list_ptr ^= null () then free forum_trans_list;
	end;

	goto ADD_COMMON;

ADD_COMMON:
	call ssu_$arg_count (ssu_ptr, arg_count);
	if arg_count = 0 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: ^[am {trans_specs}^;fam^] meeting_paths {-control_args}", subsystem);
	status_area_ptr = get_system_free_area_ ();

	link_dir = "";
	brief, cmtg_switch, force, update = "0"b;
	no_match = "1"b;
	start = 1;

	if subsystem then
	     if  passport.forum_idx ^= 0 then do;
		arg_idx = 0;
		parse_flags_word = DISALLOW_MTG | DISALLOW_CMSG | CALL_ON_BAD_ARGS | DEFAULT_TO_NONE;

		call forum_trans_specs_$parse_specs (passport_info_ptr, 1, parse_flags_word, args, (0), (""), (""),
		     forum_trans_list_ptr);
		do idx = 1 to forum_trans_list.size;
		     call add_from_trans (forum_trans_list.trans_num (idx));
		end;
		free forum_trans_list;
		if arg_idx = 0 then start = arg_count + 1;
		else start = arg_idx;
	     end;

	do arg_idx = start to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if index (arg, "-") = 1 then
		if arg = "-brief" | arg = "-bf" then brief = "1"b;
		else if subsystem & (arg = "-current_meeting" | arg = "-cmtg") then cmtg_switch = "1"b;
		else if arg = "-directory" | arg = "-dr" then call get_link_dir_arg (arg_idx);
		else if arg = "-force" | arg = "-fc" then force = "1"b;
		else if arg = "-long" | arg = "-lg" then brief = "0"b;
		else if arg = "-no_force" | arg = "-nfc" then force = "0"b;
		else if arg = "-update" | arg = "-ud" then update = "1"b;
		else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
	end;

	if cmtg_switch then do;
	     if passport.forum_idx = 0 then call ssu_$abort_line (ssu_ptr, forum_et_$no_forum);
	     path = rtrim (passport.forum_dir) || ">" || no_suffix_name;
	     call add_the_link ();
	end;

	do arg_idx = start to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if index (arg, "-") = 1 then
		if arg = "-directory" | arg = "-dr" then arg_idx = arg_idx + 1;
		else;
	     else do;
		if search (arg, "<>") = 0 & arg_len > 0 then
		     path = pathname_ (get_wdir_ (), arg);
		else path = arg;
		call add_the_link ();
	     end;
	end;

	if update then do;
	     force = "1"b;				/* so it can update not_eligible links */
	     no_match = "1"b;
	     if link_dir = "" then call get_link_dir ("1"b);

	     call update_links ("**.control");
	     call update_links ("**.forum");
	     if ^brief & no_match then call ssu_$print_message (ssu_ptr, 0, "There were no meetings to update.");
	end;
	else if no_match then call ssu_$abort_line (ssu_ptr, 0, "No meeting names were given.");

EGRESS:	if ^subsystem then call ssu_$destroy_invocation (ssu_ptr);
	return;
%page;	
forum_remove_meeting:
frm:
     entry ();

	subsystem = "0"b;
	whoami = "forum_remove_meeting";

	on cleanup call ssu_$destroy_invocation (ssu_ptr);
	call create_subsystem ();

	goto REMOVE_COMMON;

remove_meeting:
	entry (P_ssu_ptr, P_passport_info_ptr);

	ssu_ptr = P_ssu_ptr;
	passport_info_ptr = P_passport_info_ptr;
	subsystem = "1"b;
	whoami = ssu_$get_subsystem_and_request_name (ssu_ptr);

	goto REMOVE_COMMON;

REMOVE_COMMON:
	call ssu_$arg_count (ssu_ptr, arg_count);
	if arg_count = 0 then
	     call ssu_$abort_line (ssu_ptr, 0, "Usage: ^[f^]rm meeting_names {-control_args}", ^subsystem);

	brief, check_switch, cleanup_switch, cmtg_switch, update = "0"b;
	status_area_ptr = get_system_free_area_ ();
	link_dir = "";

	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if index (arg, "-") = 1 then
		if arg = "-brief" | arg = "-bf" then brief = "1"b;
		else if arg = "-check" | arg = "-ck" then check_switch = "1"b;
		else if arg = "-cleanup" then cleanup_switch = "1"b;
		else if subsystem & (arg = "-current_meeting" | arg = "-cmtg") then cmtg_switch = "1"b;
		else if arg = "-directory" | arg = "-dr" then call get_link_dir_arg (arg_idx);
		else if arg = "-long" | arg = "-lg" then brief = "0"b;
		else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
	end;

	if link_dir = "" then call get_link_dir ("0"b);
	if cmtg_switch then do;
	     if passport.forum_idx = 0 then call ssu_$abort_line (ssu_ptr, forum_et_$no_forum);
	     forum_name = passport.forum_name;
	     call remove_link ("1"b);
	end;

	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (ssu_ptr, arg_idx, arg_ptr, arg_len);
	     if index (arg, "-") = 1 then
		if arg = "-directory" | arg = "-dr" then arg_idx = arg_idx + 1;
		else;
	     else do;
		if search (arg, "<>") > 0 then
		     call ssu_$abort_line (ssu_ptr, 0, "Meeting names may not contain "">"" or ""<"". ^a""", arg);

		call expand_pathname_$add_suffix (arg, "forum", "", forum_name, status);
		if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "Expanding ^a.", arg);

		call check_star_name_$entry (arg, status);
		if status = 0 then call remove_link ("0"b);
		else if (status = 1) | (status = 2) then call remove_links ("0"b);
		else call ssu_$abort_line (ssu_ptr, status, "^a", arg);
	     end;
	end;

	if check_switch & cleanup_switch then
	     call ssu_$abort_line (ssu_ptr, error_table_$inconsistent, """-check"" and ""-cleanup""");

	if check_switch | cleanup_switch then call remove_links ("1"b);

	goto EGRESS;
%page;
create_subsystem:
     procedure ();

	call ssu_$standalone_invocation (ssu_ptr, whoami, "1", cu_$arg_list_ptr (), punt, status);
	if status ^= 0 then do; 	/* UGH */
	     if cu_$af_return_arg ((0), null (), (0)) = 0 then
		call active_fnc_err_ (status, whoami, "Unable to create subsystem invocation.");
	     else call com_err_ (status, whoami, "Unable to create subsystem invocation.");
	     goto EGRESS;
	end;

	return;
     end create_subsystem;


punt:
     proc ();

	goto EGRESS;

	end punt;

args:
     proc (P_arg_idx);

declare	P_arg_idx			fixed bin;

	call ssu_$arg_ptr (ssu_ptr, P_arg_idx, arg_ptr, arg_len);
	if index (arg, "-") = 1 then
	     if arg = "-brief" | arg = "-bf" then brief = "1"b;
	     else if (arg = "-current_meeting" | arg = "-cmtg") then cmtg_switch = "1"b;
	     else if arg = "-directory" | arg = "-dr" then call get_link_dir_arg (P_arg_idx);
	     else if arg = "-force" | arg = "-fc" then force = "1"b;
	     else if arg = "-long" | arg = "-lg" then brief = "0"b;
	     else if arg = "-no_force" | arg = "-nfc" then force = "0"b;
	     else if arg = "-update" | arg = "-ud" then update = "1"b;
	     else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);
	else do;
	     arg_idx = P_arg_idx;
	     P_arg_idx = arg_count + 1;
	end;

	return;
     end args;
%page;
get_link_dir:
     proc (create_switch);

declare	create_switch		bit (1) aligned,
	home_dir			char (40),
     	person			char (22),
	project			char (9);

	call user_info_$whoami (person, project, "");
	home_dir = ">udd>" || rtrim (project) || ">" || person;
	call hcs_$status_minf (home_dir, "meetings", 1, type, (0), status);

	if status = error_table_$noentry then do;	/* no meetings dir - create a link pointing at homedir */
	     if ^create_switch then
		call ssu_$abort_line (ssu_ptr, 0, "^a>meetings not found. There are no meetings to remove.",
		     home_dir);
	     call ssu_$print_message (ssu_ptr, 0, "Creating ^a>meetings.", home_dir);
	     call hcs_$append_link (home_dir, "meetings", home_dir, status);
	     if status ^= 0 then
		call ssu_$abort_line (ssu_ptr, status, "Unable to create meeting directory.");
	end;
	else if status ^= 0 then
	     call ssu_$abort_line (ssu_ptr, status, "Unable to access meeting directory.");
	else if type ^= Directory then
	     call ssu_$abort_line (ssu_ptr, 0, "^a>meetings is not a directory.", home_dir);

	link_dir = rtrim (home_dir) || ">meetings";

	return;
     end get_link_dir;


get_link_dir_arg:
     proc (P_arg_idx);

declare	name			char (32);
declare	P_arg_idx			fixed bin;

	if P_arg_idx = arg_count then call ssu_$abort_line (ssu_ptr, error_table_$noarg, "Following -directory");
	P_arg_idx = P_arg_idx + 1;

	call ssu_$arg_ptr (ssu_ptr, P_arg_idx, arg_ptr, arg_len);
	call expand_pathname_ (arg, link_dir, name, status);
	if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "^a", arg);

	call hcs_$status_minf (link_dir, name, 1, type, (0), status);
	if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "^a", arg);
	if type ^= Directory then call ssu_$abort_line (ssu_ptr, 0, "^a is not a directory.", arg);

	link_dir = pathname_ (link_dir, name);
	return;
     end get_link_dir_arg;
%page;
dissect_trans:
     proc (trans_idx, dir, name, chairman, error_proc);

declare	trans_idx			fixed bin parameter,
	(dir, name, chairman)	char (*) parameter,
	error_proc		entry variable options (variable) parameter,
	(idx, jdx)		fixed bin;

	call forum_trans_util_$read_trans (passport_info_ptr, 0, trans_idx, forum_user_trans_ptr, status);
	if status ^= 0 then
	     call ssu_$abort_line (ssu_ptr, status, "Reading transaction ^d.", trans_idx);

	if index (forum_user_trans.subject,  " meeting") = 0 then do;
BAD:	     call error_proc (ssu_ptr, 0, "Transaction ^d is not a meeting announcement.", trans_idx);
	     dir = "";				/* for error return */
	     return;
	end;

	name = reverse (after (reverse (forum_user_trans.subject), "gniteem "));

	idx = index (forum_user_trans.text, "Location:	") + 10;
	if idx = 10 then goto BAD;
	jdx = index (substr (forum_user_trans.text, idx), NL) - 1;
	dir = substr (forum_user_trans.text, idx, jdx);

	idx = index (forum_user_trans.text, "Chairman:	") + 10;
	if idx = 10 then goto BAD;
	jdx = index (substr (forum_user_trans.text, idx), NL) - 1;
	chairman = substr (forum_user_trans.text, idx, jdx);

	return;
     end dissect_trans;

add_from_trans:
     proc (trans_idx);

declare	trans_idx			fixed bin,
	name			char (32),
	dir			char (168),
	chairman			char (32);

	call dissect_trans (trans_idx, dir, name, chairman, ssu_$print_message);
	if dir = "" then return;

	path = pathname_ (dir, name);
	call add_the_link ();

	return;
     end add_from_trans;
%page;
add_the_link:
     proc ();

declare	forum_idx			fixed bin,
	idx			fixed bin,
	link_path			char (168),
	(uid1, uid2)		bit (36) aligned;

	no_match = "0"b;
	forum_idx = 0;
	if link_dir = "" then call get_link_dir ("1"b);

	on cleanup call forum_$close_forum (forum_idx, 0);

     	call forum_requests_$open_forum (path, forum_idx, "", "", status);
	if status ^= 0 then
	     if force & status = forum_et_$not_eligible then do;
		call forum_requests_$find_forum (path, directory, forum_name, (0), (0));
		call forum_$get_forum_path ((directory), (forum_name), directory, forum_name, status);
	     end;
	     else do;
		call ssu_$print_message (ssu_ptr, status, "Locating ^a.", path);
		return;
	     end;
	else call forum_$get_forum_path_idx (forum_idx, directory, forum_name, status);

	if status ^= 0 then
	     call ssu_$abort_line (ssu_ptr, status, "Getting names for ^a.", path);
	if forum_idx ^= 0 then call forum_$close_forum (forum_idx, 0);

     	link_path = pathname_ (directory, forum_name);
RETRY_ADD_LINK:
	call hcs_$append_link (link_dir, forum_name, link_path, status);
	if status ^= 0 then
	     if status = error_table_$namedup then do;
		uid2 = "0"b;
		call forum_$get_uid_file (directory, forum_name, uid1, status);
		if status ^= 0 then do;
BAD_DUP:		     call ssu_$print_message (ssu_ptr, 0, "A^[nother^] meeting named ^a is already in the meeting directory.",
			(uid2 ^= ""b), forum_name);
		     return;
		end;

		call forum_$get_uid_file (link_dir, forum_name, uid2, status);
		if status ^= 0 then do;
		     if status ^= forum_et_$no_such_forum then goto BAD_DUP;
		     if ^brief then call ssu_$print_message (ssu_ptr, 0, "Replacing null link to ^a.", forum_name);
		     call hcs_$delentry_file (link_dir, forum_name, status);
		     if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "Unable to delete null link.");
		     goto RETRY_ADD_LINK;
		end;
		else if uid1 ^= uid2 then goto BAD_DUP;

		call hcs_$status_minf (link_dir, forum_name, 0, type, (0), status);
		if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "Unable to get status information for ^a.",
		     forum_name);
		if type = Directory then do;
		     if ^brief then
			call ssu_$print_message (ssu_ptr, 0,
			     "The ^a meeting is in the meetings directory. No link created.", forum_name);
		     return;
		end;
		
		if ^brief then call ssu_$print_message (ssu_ptr, 0, "^a is already in the meeting directory.  Link will be updated.",
		     forum_name);
		call hcs_$delentry_file (link_dir, forum_name, status);
		if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "Unable to delete old link.");
		goto RETRY_ADD_LINK;
	     end;
	     else do;
		call ssu_$print_message (ssu_ptr, status, "Unable to create link to ^a.", link_path);
		return;
	     end;

	status_ptr = addr (sb);
	sb.names_relp = ""b;

	on cleanup begin;
	     if sb.names_relp ^= ""b then free status_entry_names;
	end;

	call hcs_$status_ (directory, forum_name, 0, status_ptr, status_area_ptr, status);
	if status ^= 0 then do;
	     call ssu_$print_message (ssu_ptr, status, "Unable to add additional names to the link for ^a.", path);
	     return;
	end;

	if status_branch.nnames < 1 then do;
	     call ssu_$print_message (ssu_ptr, 0, "Unable to obtain names for ^a.", path);
	     return;
	end;

SET_PRIMARY:
	call hcs_$chname_file (link_dir, forum_name, forum_name, (status_entry_names (1)), status);
	if check_code (1) then goto SET_PRIMARY;

	do idx = 2 to status_branch.nnames;
AGAIN:	     call hcs_$chname_file (link_dir, (status_entry_names (1)), "", (status_entry_names (idx)), status);
	     if check_code (idx) then goto AGAIN;
	end;
	     
	free status_entry_names;

	return;
     end add_the_link;

check_code:
    procedure (idx) returns (bit (1) aligned);

declare	idx			fixed bin;

	if status ^= 0 then
	     if status = error_table_$segnamedup then;
	     else if status = error_table_$namedup then do;
		call nd_handler_ (whoami, link_dir, (status_entry_names (idx)), status);
		if status = 0 then return ("1"b);
	     end;
	     else call ssu_$print_message (ssu_ptr, status, "Unable to add name ^a to ^a>^a.",
		status_entry_names (idx), link_dir, forum_name);
	return ("0"b);
     end check_code;
%page;
remove_link:
     proc (cmtg);

declare	cmtg			bit (1) aligned;

	call hcs_$status_minf (link_dir, forum_name, 0, type, (0), status);
	if status = error_table_$noentry then do;
	     if cmtg then
		call ssu_$abort_line (ssu_ptr, 0, "The current meeting is not in the meeting directory.");

	     call expand_pathname_$add_suffix (arg, "control", "", forum_name, status);
	     if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "Expanding ^a.", arg);
	     call hcs_$status_minf (link_dir, forum_name, 0, type, (0), status);
	end;

	if status = error_table_$noentry then
	     call ssu_$abort_line (ssu_ptr, 0, "The ^a meeting is not in the meeting directory.", arg);
	else if type ^= Link then
	     call ssu_$abort_line (ssu_ptr, 0, "The ^a meeting itself is in the meeting directory.^/^-This command does not delete meetings.", arg);

	call hcs_$delentry_file (link_dir, forum_name, status);
	if status ^= 0 then call ssu_$abort_line (ssu_ptr, status, "Unable to remove the ^a meeting.", arg);

	return;
     end remove_link;
%page;
remove_links:
     proc (null_switch);

declare	null_switch		bit (1) aligned;

	star_names_ptr, star_entry_ptr = null ();
	on cleanup begin;
	     if star_names_ptr ^= null () then free star_names;
	     if star_entry_ptr ^= null () then free star_entries;
	end;

	no_match = "1"b;				/* Until proven otherwise */

	if null_switch then forum_name = "**.forum";
	call do_the_work ();

	if null_switch then forum_name = "**.control";
	else call expand_pathname_$add_suffix (arg, "control", "", forum_name, status);
	call do_the_work ();

	if no_match & ^brief then
	     if null_switch then call ssu_$print_message (ssu_ptr, 0, "There were no meetings to clean up.");
	     else call ssu_$print_message (ssu_ptr, error_table_$nomatch, "^a", arg);

	return;

do_the_work:
	proc ();

declare	name			char (32);

	call hcs_$star_ (link_dir, forum_name, star_LINKS_ONLY, status_area_ptr, star_entry_count, star_entry_ptr,
	     star_names_ptr, status);
	if status ^= 0 then
	     if status = error_table_$nomatch then return;
	     else call ssu_$abort_line (ssu_ptr, status, "Finding matching names for ^a.", forum_name);

	do idx = 1 to star_entry_count;
	     name = star_names (star_entries.nindex (idx));
	     if null_switch then do;
		call hcs_$status_minf (link_dir, name, 1, type, (0), status);
		if type ^= Link & status = 0 then goto SKIP;
		no_match = "0"b;			/* We found one. */

		if check_switch then do;
		     call ioa_ ("The ^a meeting would be removed.", reverse (after (reverse (name), ".")));
		     goto SKIP;
		end;
		call ioa_ ("Removing the ^a meeting.", reverse (after (reverse (name), ".")));
	     end;
	    
	     call hcs_$delentry_file (link_dir, name, status);
	     if status ^= 0 then
		call ssu_$print_message (ssu_ptr, status, "Unable to remove the ^a meeting.",
		     reverse (after (reverse (name), ".")));
SKIP:	end;

	free star_names;
	free star_entries;
	return;

     end do_the_work;

     end remove_links;

update_links:
	proc (forum_name);

declare	forum_name		char (32);

	star_names_ptr, star_entry_ptr = null ();
	on cleanup begin;
 	     if star_names_ptr ^= null () then free star_names;
	     if star_entry_ptr ^= null () then free star_entries;
	end;

	call hcs_$star_ (link_dir, forum_name, star_LINKS_ONLY, status_area_ptr, star_entry_count, star_entry_ptr,
	     star_names_ptr, status);
	if status ^= 0 then
	     if status = error_table_$nomatch then;
	     else call ssu_$abort_line (ssu_ptr, status, "Listing old meetings.");

	do idx = 1 to star_entry_count;
	     call check_updated (star_names (star_entries.nindex (idx)));
	end;

	if star_names_ptr ^= null () then free star_names;
	if star_entry_ptr ^= null () then free star_entries;

	return;


check_updated:
     proc (name);

declare	name			char (32),
	name_idx			fixed bin,
	new_name			char (32),
	old_names			bit (1) aligned,
	target_dir		char (168),
	target_exists		bit (1) aligned,
	target_name		char (32),
	(uid1, uid2)		bit (36) aligned;

declare	status_link_names		(sl.nnames) char (32) aligned
				based (pointer (status_area_ptr, sl.names_relp)),
	status_pathname		char (sl.pathname_length) based
				(pointer (status_area_ptr, sl.pathname_relp));

	sl.names_relp, sl.pathname_relp = ""b;
	on cleanup begin;
	     if sl.pathname_relp ^= ""b then free status_pathname;
	     if sl.names_relp ^= ""b then free status_link_names;
	end;
	status_ptr = addr (sl);

	call hcs_$status_ (link_dir, name, 0, status_ptr, status_area_ptr, status);
	if status ^= 0 then goto SKIP;

	call hcs_$get_link_target (link_dir, name, target_dir, target_name, status);
	if status = 0 then target_exists = "1"b;
	else if status = error_table_$noentry then target_exists = "0"b;
	else goto SKIP;

	if ltrim (before (reverse (target_name), ".")) = "murof" then do;
	     if target_exists then goto CHECK_SHORTEN;
	     goto SKIP;
	end;

	target_name = reverse (after (reverse (target_name), ".")) || ".forum";
	call hcs_$status_minf (target_dir, target_name, 0, (0), (0), status);
	if status = 0 then do;			/* meeting has been converted */
	     path = pathname_ (target_dir, target_name);
	     call add_the_link ();
	     call hcs_$delentry_file (link_dir, name, (0));
	     call ioa_ ("Updated the ^a meeting.", reverse (after (reverse (name), ".")));
	     no_match, old_names = "0"b;
	end;
	else if target_exists then do;
CHECK_SHORTEN:
	     call expand_pathname_ (target_dir, path, target_name, status);
	     if status ^= 0 then goto SKIP;
	     call hcs_$get_uid_file (path, target_name, uid1, status);
	     if status ^= 0 then goto SKIP;

	     call expand_pathname_ ((status_pathname), path, target_name, status);
	     if status ^= 0 then goto SKIP;
	     call expand_pathname_ (path, path, target_name, status);
	     if status ^= 0 then goto SKIP;
	     call hcs_$get_uid_file (path, target_name, uid2, status);
	     if status ^= 0 then goto SKIP;

	     if uid1 = uid2 then goto SKIP;
	     old_names = "1"b;
	     no_match = "0"b;

	     call hcs_$delentry_file (link_dir, name, status);
	     if status ^= 0 then goto SKIP;

	     path = pathname_ (target_dir, name);
	     call hcs_$append_link (link_dir, name, path, status);
	     if status ^= 0 then goto SKIP;

	     call ioa_ ("Shortened link path for ^a.", name);
	     target_name = name;
	end;
	else goto SKIP;

	do name_idx = 1 to sl.nnames;
	     new_name = status_link_names (name_idx);
	     if ^old_names then new_name = reverse (after (reverse (new_name), ".")) || ".forum";
RETRY:	     call hcs_$chname_file (link_dir, target_name, "", new_name, status);
	     if check_code (name_idx) then goto RETRY;
	end;

SKIP:	if sl.names_relp ^= ""b then free status_link_names;
	if sl.pathname_relp ^= ""b then free status_pathname;
	revert cleanup;

	return;
     end check_updated;

     end update_links;
%page;
announcement_info:
     entry (P_ssu_ptr, P_passport_info_ptr);

	ssu_ptr = P_ssu_ptr;
	passport_info_ptr = P_passport_info_ptr;
	forum_idx = passport.forum_idx;
	chairman, absolute_path, entry_name = "0"b;

	forum_trans_list_ptr = null ();
	on cleanup begin;
	     if forum_trans_list_ptr ^= null () then free forum_trans_list;
	end;

	call ssu_$return_arg (ssu_ptr, arg_count, active_function, ret_ptr, ret_len);

	parse_flags_word = ONLY_ONE | DISALLOW_MTG | DISALLOW_REV | DISALLOW_INITIAL | DISALLOW_CMSG |
	     DISALLOW_BYCHAIN;
	call forum_trans_specs_$parse_specs (passport_info_ptr, 1, parse_flags_word, announce_args, (0), (""),
	     (""), forum_trans_list_ptr);

	call dissect_trans (forum_trans_list.trans_num (1), directory, forum_name, chair, ssu_$abort_line);
	free forum_trans_list;

	if active_function then do;
	     if ^(chairman | entry_name | absolute_path) then
USAGE:		call ssu_$abort_line (ssu_ptr, 0, "Usage:  [ai -control_arg]");

	     if (chairman & entry_name) | (chairman & absolute_path) | (absolute_path & entry_name) then
		goto USAGE;

	     if chairman then ret_string = chair;
	     else if entry_name then ret_string = forum_name;
	     else ret_string = pathname_ (directory, forum_name);
	end;
	else do;
	     if ^(chairman | entry_name | absolute_path) then
		chairman, entry_name, absolute_path = "1"b;
	     if absolute_path then call ioa_ ("The meeting path is ^a.", pathname_ (directory, forum_name));
	     else if entry_name then call ioa_ ("The name of the meeting is ^a.", forum_name);
	     if chairman then call ioa_ ("The chairman is ^a.", chair);
	end;

	return;

announce_args:
     procedure (P_arg_idx);
declare	P_arg_idx			fixed bin parameter;

	call ssu_$arg_ptr (ssu_ptr, P_arg_idx, arg_ptr, arg_len);
	if arg = "-absolute_pathname" | arg = "-absp" then absolute_path = "1"b;
	else if arg = "-chairman" | arg = "-cm" then chairman = "1"b;
	else if arg = "-entry_name" | arg = "-etnm" then entry_name = "1"b;
	else call ssu_$abort_line (ssu_ptr, error_table_$badopt, "^a", arg);

	return;
     end announce_args;

end forum_add_meeting;
