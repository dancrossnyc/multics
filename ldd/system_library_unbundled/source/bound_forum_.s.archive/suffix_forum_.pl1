/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     removed per-attendee switches because of errors when called
     by non-participants.
  2) change(88-09-13,Beattie), approve(88-08-01,MCR7948),
     audit(88-10-11,Farley), install(88-10-14,MR12.2-1165):
     Fix bug in list_acl entry which is called when fs_util_$list_acl
     is used.  Needed to copy access_name entries from one array to another.
                                                   END HISTORY COMMENTS */


/* format: style2,idind30,indcomtxt */

suffix_forum_:
     procedure;

/*  Interface to forum for the extended acl / extended object facility
   Jay Pattin 1/25/83 */
/*  Moved to the new interfaces, BIM, 831002 */

	declare P_acl_ptr		        ptr;
	declare P_area_ptr		        ptr;
	declare P_bit_count		        fixed bin (24);
	declare P_copy_options_ptr	        ptr;
	declare P_desired_version	        char (*);
	declare P_directory		        char (*);
	declare P_max_length	        fixed bin (19);
	declare (P_mode, P_exmode)	        bit (36) aligned;
	declare P_name		        char (*);
	declare P_new_name		        char (*);
	declare P_no_sysdaemon	        bit (1);
	declare P_old_name		        char (*);
	declare P_return_ptr	        ptr;
	declare P_ring		        fixed bin;
	declare P_ring_brackets	        (*) fixed bin (3);
	declare P_status		        fixed bin (35);
	declare P_suffix_info_ptr	        ptr;
	declare P_switch_list_ptr	        ptr;
	declare P_switch_name	        char (*);
	declare P_user_name		        char (*);
	declare P_value		        bit (1) aligned;

	declare area_ptr		        pointer;
	declare based_area		        area based (area_ptr);
	declare directory		        char (168);
	declare dir_rings		        (2) fixed bin (3);
	declare idx		        fixed bin;
	declare name		        char (32);

	declare (
	        error_table_$unimplemented_version,
	        error_table_$argerr,
	        error_table_$noentry,
	        error_table_$not_seg_type,
	        forum_et_$invalid_switch_name,
	        forum_et_$no_such_user,
	        forum_et_$not_a_forum
	        )			        fixed bin (35) external;

	declare (addr, hbound, lbound, null, rtrim, string)
				        builtin;

	declare old_acl_ptr		        pointer;
	declare switches		        (5) char (32) static options (constant)
				        init ("safety", "adjourned", "adj",
				        "meeting_eligibility_messages", "mtg_emsg");

	declare get_system_free_area_	        entry () returns (ptr);
	declare hcs_$get_dir_ring_brackets    entry (char (*), char (*), (2) fixed bin (3), fixed bin (35));
	declare hcs_$get_user_access_modes    entry (char (*), char (*), char (*), fixed bin, bit (36) aligned,
				        bit (36) aligned, fixed bin (35));
	declare forum_$chname_forum	        entry (char (*), char (*), char (*), char (*), fixed bin (35));
	declare forum_$copy		        entry (ptr, fixed bin (35));
	declare forum_$delete_forum	        entry (char (*), char (*), fixed bin (35));
	declare forum_$delete_forum_acl       entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	declare forum_$get_forum_path	        entry (char (*), char (*), char (*), char (*), fixed bin (35));
	declare forum_$get_switch	        entry (char (*), char (*), char (*), char (*), bit (1) aligned,
				        fixed bin (35));
	declare forum_$list_forum_acl	        entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35));
	declare forum_$replace_forum_acl      entry (char (*), char (*), ptr, fixed bin, bit (1), fixed bin (35));
	declare forum_$set_forum_acl	        entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	declare forum_$set_switch	        entry (char (*), char (*), char (*), char (*), bit (1) aligned,
				        fixed bin (35));

	declare forum_data_$print_eligibility_messages
				        bit (1) aligned external;
						/* format: off */
declare system_free_area area based (get_system_free_area_ ());
declare cleanup condition;

%page; %include acl_structures;
%page; %include suffix_info;
%page; %include copy_options;
%page; %include copy_flags;
%page; %include access_mode_values;
/* format: on */


chname_file:
     entry (P_directory, P_name, P_old_name, P_new_name, P_status);

	call forum_$chname_forum (P_directory, P_name, P_old_name, P_new_name, P_status);
	if P_status ^= 0
	then if P_status = forum_et_$not_a_forum
	     then P_status = error_table_$not_seg_type;
	return;


copy:
     entry (P_copy_options_ptr, P_status);

	call forum_$copy (P_copy_options_ptr, P_status);
	if P_status ^= 0
	then if P_status = forum_et_$not_a_forum
	     then P_status = error_table_$not_seg_type;
	return;

get_ring_brackets:
     entry (P_directory, P_name, P_ring_brackets, P_status);

	if lbound (P_ring_brackets, 1) ^= 1 | hbound (P_ring_brackets, 1) < 2
	then do;
		P_status = error_table_$argerr;
		return;
	     end;

	call forum_$get_forum_path (P_directory, P_name, directory, name, P_status);
	if P_status ^= 0
	then if P_status = forum_et_$not_a_forum
	     then P_status = error_table_$not_seg_type;
	     else ;
	else do;
		call hcs_$get_dir_ring_brackets (P_directory, P_name, dir_rings, P_status);
		P_ring_brackets (1), P_ring_brackets (2) = dir_rings (1);
	     end;

	return;

get_user_access_modes:
     entry (P_directory, P_name, P_user_name, P_ring, P_mode, P_exmode, P_status);

	directory = rtrim (P_directory) || ">" || P_name;

	P_exmode = ""b;
	call hcs_$get_user_access_modes (directory, "Attendees", P_user_name, P_ring, (""b), P_mode, P_status);
						/* YCCH! */

	if P_status = error_table_$noentry
	then P_status = error_table_$not_seg_type;
	return;
%page;
get_switch:
     entry (P_directory, P_name, P_switch_name, P_value, P_status);

	call forum_$get_switch (P_directory, P_name, "", P_switch_name, P_value, P_status);
	goto CHECK_SWITCH_ERROR;


set_switch:
     entry (P_directory, P_name, P_switch_name, P_value, P_status);

	call forum_$set_switch (P_directory, P_name, "", P_switch_name, P_value, P_status);

CHECK_SWITCH_ERROR:
	if P_status ^= 0
	then if P_status = forum_et_$not_a_forum
	     then P_status = error_table_$not_seg_type;
	     else if P_status = forum_et_$invalid_switch_name
	     then P_status = error_table_$argerr;

	return;
%page;
add_acl_entries:
     entry (P_directory, P_name, P_acl_ptr, P_status);

	acl_ptr = P_acl_ptr;
	if general_acl.version ^= GENERAL_ACL_VERSION_1
	then do;
		P_status = error_table_$unimplemented_version;
		return;
	     end;

	acl_count = general_acl.count;
	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then do;
			free old_acl_ptr -> segment_acl_array;
			old_acl_ptr = null ();
		     end;
	     end;

	allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
	old_acl_ptr -> segment_acl_array (*).access_name = general_acl.entries (*).access_name;
	old_acl_ptr -> segment_acl_array (*).mode = RW_ACCESS;
	old_acl_ptr -> segment_acl_array (*).extended_mode = general_acl.entries (*).mode;


	call forum_$set_forum_acl (P_directory, P_name, old_acl_ptr, acl_count, P_status);
	general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
	free old_acl_ptr -> segment_acl_array;

	if P_status ^= 0
	then if P_status = forum_et_$not_a_forum
	     then P_status = error_table_$not_seg_type;
	return;


delentry_file:
     entry (P_directory, P_name, P_status);

	call forum_$delete_forum (P_directory, P_name, P_status);
	if P_status ^= 0
	then if P_status = forum_et_$not_a_forum
	     then P_status = error_table_$not_seg_type;
	return;


delete_acl_entries:
     entry (P_directory, P_name, P_acl_ptr, P_status);

	acl_ptr = P_acl_ptr;
	if general_delete_acl.version ^= GENERAL_DELETE_ACL_VERSION_1
	then do;
		P_status = error_table_$unimplemented_version;
		return;
	     end;
	call forum_$delete_forum_acl (P_directory, P_name, addr (general_delete_acl.entries), general_delete_acl.count,
	     P_status);

	if P_status ^= 0
	then if P_status = forum_et_$not_a_forum
	     then P_status = error_table_$not_seg_type;
	return;


list_acl:
     entry (P_directory, P_name, P_desired_version, P_area_ptr, P_acl_ptr, P_status);

	acl_ptr = P_acl_ptr;
	if acl_ptr = null ()
	then do;
		if P_desired_version ^= GENERAL_ACL_VERSION_1
		then do;
			P_status = error_table_$unimplemented_version;
			return;
		     end;

		call forum_$list_forum_acl (P_directory, P_name, get_system_free_area_ (), old_acl_ptr, null (),
		     acl_count, P_status);
		if P_status ^= 0
		then do;
			if P_status = forum_et_$not_a_forum
			then P_status = error_table_$not_seg_type;
			return;
		     end;

		if acl_count = 0
		then do;
			if old_acl_ptr ^= null ()
			then free old_acl_ptr -> segment_acl_array;
			P_acl_ptr = null ();
			return;
		     end;
		area_ptr = P_area_ptr;
		allocate general_acl in (based_area) set (acl_ptr);
		general_acl.version = P_desired_version;
		general_acl.entries (*).access_name = old_acl_ptr -> segment_acl_array (*).access_name;
		general_acl.entries (*).mode = old_acl_ptr -> segment_acl_array (*).extended_mode;
		general_acl.entries (*).status_code = 0;
		free old_acl_ptr -> segment_acl_array;
		P_acl_ptr = acl_ptr;
		return;
	     end;
	else do;					/* Specific entries */
		if general_acl.version ^= GENERAL_ACL_VERSION_1
		then do;
			P_status = error_table_$unimplemented_version;
			return;
		     end;
		old_acl_ptr = null ();
		on cleanup
		     begin;
			if old_acl_ptr ^= null ()
			then do;
				free old_acl_ptr -> segment_acl_array;
				old_acl_ptr = null ();
			     end;
		     end;

		acl_count = general_acl.count;
		allocate segment_acl_array in (system_free_area) set (old_acl_ptr);
		old_acl_ptr -> segment_acl_array(*).access_name = general_acl.entries(*).access_name;

		call forum_$list_forum_acl (P_directory, P_name, null (), null (), old_acl_ptr, acl_count, P_status);
		if P_status = forum_et_$not_a_forum
		then P_status = error_table_$not_seg_type;
		else do;
			general_acl.entries (*).mode = old_acl_ptr -> segment_acl_array (*).extended_mode;
			general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
		     end;
		free old_acl_ptr -> segment_acl_array;
	     end;
	return;

replace_acl:
     entry (P_directory, P_name, P_acl_ptr, P_no_sysdaemon, P_status);


	old_acl_ptr = null ();
	on cleanup
	     begin;
		if old_acl_ptr ^= null ()
		then do;
			free old_acl_ptr -> segment_acl_array;
			old_acl_ptr = null ();
		     end;
	     end;

	acl_ptr = P_acl_ptr;
	if acl_ptr = null ()
	then do;
		call forum_$replace_forum_acl (P_directory, P_name, null (), 0, P_no_sysdaemon, P_status);
		return;
	     end;

	if general_acl.version ^= GENERAL_ACL_VERSION_1
	then do;
		P_status = error_table_$unimplemented_version;
		return;
	     end;

	acl_count = general_acl.count;
	allocate segment_acl_array in (system_free_area) set (old_acl_ptr);

	old_acl_ptr -> segment_acl_array (*).access_name = general_acl.entries (*).access_name;
	old_acl_ptr -> segment_acl_array (*).mode = RW_ACCESS;
	old_acl_ptr -> segment_acl_array (*).extended_mode = general_acl.entries (*).mode;
	old_acl_ptr -> segment_acl_array (*).status_code = 0;

	call forum_$replace_forum_acl (P_directory, P_name, old_acl_ptr, acl_count, P_no_sysdaemon, P_status);
	if P_status ^= 0
	then if P_status = forum_et_$not_a_forum
	     then P_status = error_table_$not_seg_type;

	general_acl.entries (*).status_code = old_acl_ptr -> segment_acl_array (*).status_code;
	free old_acl_ptr -> segment_acl_array;
	return;



validate:
     entry (P_directory, P_name, P_status);

	call forum_$get_forum_path (P_directory, P_name, directory, name, P_status);
	if P_status ^= 0
	then if P_status = forum_et_$not_a_forum
	     then P_status = error_table_$not_seg_type;
	return;


suffix_info:
     entry (P_suffix_info_ptr);

	suffix_info_ptr = P_suffix_info_ptr;

	suffix_info.version = SUFFIX_INFO_VERSION_1;
	suffix_info.type = "forum";
	suffix_info.type_name = "Forum meeting";
	suffix_info.plural_name = "Forum meetings";
	string (suffix_info.flags) = ""b;
	suffix_info.extended_acl = "0"b;
	suffix_info.has_switches = "1"b;
	suffix_info.modes = "rwc";
	suffix_info.max_mode_len = 3;
	suffix_info.num_ring_brackets = 2;

	string (suffix_info.copy_flags) = ""b;
	suffix_info.copy_flags.names, suffix_info.copy_flags.acl, suffix_info.copy_flags.safety_switch = "1"b;

	suffix_info.info_pathname = ">exl>info>forum.xobj.info";
	return;



list_switches:
     entry (P_desired_version, P_area_ptr, P_switch_list_ptr, P_status);

	if P_desired_version ^= SWITCH_LIST_VERSION_1
	then do;
		P_status = error_table_$unimplemented_version;
		return;
	   end;

	alloc_switch_count = 3;
	alloc_switch_name_count = hbound (switches, 1);

	area_ptr = P_area_ptr;
	allocate switch_list in (based_area);
	switch_list.version = SWITCH_LIST_VERSION_1;

	switch_list.name_index (1) = 1;		/* safety */
	switch_list.name_count (1) = 1;
	switch_list.default_value (1) = "0"b;

	switch_list.name_index (2) = 2;		/* adjourned */
	switch_list.name_count (2) = 2;
	switch_list.default_value (2) = "0"b;

	switch_list.name_index (3) = 4;		/* meeting_eligibility_messages */
	switch_list.name_count (3) = 2;
	switch_list.default_value (3) = forum_data_$print_eligibility_messages;

	switch_list.names (*) = switches (*);
	P_switch_list_ptr = switch_list_ptr;

	return;

     end suffix_forum_;
