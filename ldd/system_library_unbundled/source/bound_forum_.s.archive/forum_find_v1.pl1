/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1985 *
   *                                                            *
   ************************************************************** */
ffv1:
forum_find_v1:
     proc ();

%include star_structures;
%include status_structures;
%include access_mode_values;

declare	arg_count			fixed bin,
	arg_ptr			ptr,
	arg_len			fixed bin (21),
	arg			char (arg_len) based (arg_ptr),
	(dir, dir_dir)		char (168),
	dir_name			char (32),
	dir_quota			fixed bin (18),
	dir_qused			fixed bin (18),
	idx			fixed bin,
	modes			bit (36) aligned,
	name			char (32),
	v1_recs_used		fixed bin,
	v2_qused			fixed bin (18),
	status			fixed bin (35);

declare	cu_$arg_count		entry (fixed bin, fixed bin(35)),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	check_gate_access_		entry (char (*), ptr, fixed bin (35)),
	com_err_			entry options (variable),
	convert_status_code_	entry (fixed bin(35), char(8) aligned, char(100) aligned),
	expand_pathname_		entry (char(*), char(*), char(*), fixed bin(35)),
	forum_$delete_forum		entry (char(*), char(*), fixed bin(35)),
	forum_$get_forum_path	entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	forum_$get_uid_file		entry (char (*), char (*), bit (36) aligned, fixed bin (35)),
	forum_admin_$convert	entry (char (*), char (*), fixed bin (35)),
	get_system_free_area_	entry returns (ptr),
	get_wdir_			entry returns (char (168)),
	hcs_$get_link_target	entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	hcs_$get_user_access_modes	entry (char(*), char(*), char(*), fixed bin, bit(36) aligned, bit(36) aligned,
				fixed bin(35)),
	hcs_$quota_read		entry (char(*), fixed bin(18), fixed bin(71), bit(36) aligned, bit(36), fixed bin(1),
				fixed bin(18), fixed bin(35)),
	hcs_$star_		entry (char(*), char(*), fixed bin(2), ptr, fixed bin, ptr, ptr, fixed bin(35)),
	hcs_$status_		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35)),
	hphcs_$restore_quota	entry (),
	hphcs_$suspend_quota	entry (),
	ioa_$ioa_switch		entry options (variable),
	iox_$look_iocb		entry (char(*), ptr, fixed bin(35)),
	pathname_			entry (char(*), char(*)) returns(char(168));

declare	(link_switch, link_err_switch, meeting_switch, meeting_err_switch)
				pointer static init (null ()),
	iox_$error_output		pointer external;

declare	(error_table_$wrong_no_of_args,
	 error_table_$noaccess,
	 error_table_$noentry,
	 error_table_$no_info,
	 error_table_$nomatch,
	 forum_et_$not_a_forum,
	 forum_et_$no_suffix,
	 forum_et_$no_such_forum) fixed bin (35) external;

declare	(length, addr, binary, sum, reverse, rtrim)
				builtin,
	(cleanup, linkage_error)	condition;

declare	1 sb			aligned like status_branch;
%page;
	call cu_$arg_count (arg_count, status);
	if status ^= 0 then do;
PUNT:	     call com_err_ (status, "forum_find_v1_links");
	     return;
	end;

	if arg_count > 1 then do;
	     status = error_table_$wrong_no_of_args;
	     goto PUNT;
	end;
	if arg_count = 1 then do;
	     call cu_$arg_ptr (1, arg_ptr, arg_len, status);
	     if status ^= 0 then goto PUNT;
	     call expand_pathname_ (arg, dir, name, status);
	     if status ^= 0 then goto PUNT;
	     dir = pathname_ (dir, name);
	end;
	else dir = get_wdir_ ();

	star_entry_ptr, star_names_ptr = null ();
	on cleanup begin;
	     if star_names_ptr ^= null () then free star_names;
	     if star_entry_ptr ^= null () then free star_entries;
	end;

	call hcs_$star_ (dir, "**.*.control", star_LINKS_ONLY, get_system_free_area_ (), star_entry_count,
	     star_entry_ptr, star_names_ptr, status);
	if status ^= 0 then do;
	     if status = error_table_$nomatch then goto LOOK_FOR_MEETINGS;
	     else do;
		call ioa_$ioa_switch (iox_$error_output, "^a ^a", get_message (status), dir);
		return;
	     end;
	end;
	
	do idx = 1 to star_entry_count;
	     if test_link (star_names (star_entries (idx).nindex)) then do;
		free star_names;
		free star_entries;
		call ioa_$ioa_switch (link_switch, "^a", dir);
		goto LOOK_FOR_MEETINGS;
	     end;
	end;
	free star_names;
	free star_entries;
/* Now look for meetings */

LOOK_FOR_MEETINGS:
	call hcs_$star_ (dir, "**.*.control", star_ALL_ENTRIES, get_system_free_area_ (), star_entry_count,
	     star_entry_ptr, star_names_ptr, status);
	if status ^= 0 then do;
	     if status = error_table_$nomatch then return;
	     else do;
		call ioa_$ioa_switch (iox_$error_output, "^a ^a", get_message (status), dir);
		return;
	     end;
	end;
	
	do idx = 1 to star_entry_count;
	     if star_entries (idx).type = star_SEGMENT then
		call test_meeting (star_names (star_entries (idx).nindex));
	end;

	free star_names;
	free star_entries;
	return;

test_link:
     procedure (name) returns (bit (1) aligned);

declare	name			char (32),
	target_dir		char (168),
	target_name		char (32);

	call forum_$get_forum_path (dir, name, target_dir, target_name, status);
	if status = 0 then return ("1"b);

	call hcs_$get_link_target (dir, name, target_dir, target_name, status);
	if status = 0 then return ("0"b);		/* target exists, not a meeting */

	if status = error_table_$noentry then do;
	     target_name = reverse (after (reverse (target_name), ".")) || ".forum";
	     call forum_$get_forum_path (target_dir, target_name, target_dir, target_name, status);
	     if status = 0 then return ("1"b);		/* already converted */
	     if status ^= forum_et_$no_such_forum & status ^= forum_et_$no_suffix then 
		call ioa_$ioa_switch (link_err_switch, "^a In noentry ^a in ^a.", get_message (status), name, dir);
	end;
	else if status ^= error_table_$no_info & status ^= error_table_$noaccess then
	   call ioa_$ioa_switch (link_err_switch, "^a link target for ^a in ^a.",
		get_message (status), name, dir);

	return ("0"b);
     end test_link;

test_meeting:
     procedure (name);

declare	name			char (32),
	uid			bit (36) aligned;

	call forum_$get_uid_file (dir, name, uid, status);
	if status = 0 then do;
	     call ioa_$ioa_switch (meeting_switch, "^a", pathname_ (dir, name));
	     return;
	end;

	if status ^= forum_et_$not_a_forum then
	     call ioa_$ioa_switch (meeting_err_switch, "^a ^a in ^a.", get_message (status), name, dir);
	
	return;
     end test_meeting;

get_message:
     procedure (status) returns (char (100) aligned);
     
declare	status			fixed bin (35),
	short			char (8) aligned,
	long			char (100) aligned;

	call convert_status_code_ (status, short, long);
	return (long);
     end get_message;

init_search:
     entry ();

declare	no_switch_		condition;

	call iox_$look_iocb ("forum_links_", link_switch, status);
	if link_switch = null () then signal no_switch_;

	call iox_$look_iocb ("forum_meetings_", meeting_switch, status);
	if meeting_switch = null () then signal no_switch_;

	call iox_$look_iocb ("forum_link_errors_", link_err_switch, status);
	if link_switch = null () then signal no_switch_;

	call iox_$look_iocb ("forum_meeting_errors_", meeting_err_switch, status);
	if meeting_switch = null () then signal no_switch_;

	return;

init_convert:
     entry ();

	call check_gate_access_ ("hphcs_", codeptr (init_convert), status);
	if status ^= 0 then do;
	     call com_err_ (status, "convert_meetings", "This command requires access to the hphcs_ gate.");
	     return;
	end;

	call check_gate_access_ ("forum_admin_", codeptr (init_convert), status);
	if status ^= 0 then do;
	     call com_err_ (status, "convert_meetings", "This command requires access to the forum_admin_ gate.");
	     return;
	end;

	call hphcs_$suspend_quota ();
	return;

cleanup_convert:
     entry ();

	call hphcs_$restore_quota ();
	return;

/* convert one meeting. This is called as a command by the exec_com, don't
   bother checking the arguments. */

convert_one_meeting:
     entry (meeting_path);

declare	meeting_path		char (*),
	v2_name			char (32),
	proceedings_name		char (32);

	call expand_pathname_ (meeting_path, dir, name, status);
	if status ^= 0 then do;
BADPATH:	     call ioa_$ioa_switch (iox_$error_output, "^a for ^a.", get_message (status), meeting_path);
	     return;
	end;

	call expand_pathname_ (dir, dir_dir, dir_name, status);
	if status ^= 0 then goto BADPATH;

	call hcs_$get_user_access_modes (dir_dir, dir_name, "", -1, modes, ""b, status);
	if modes ^= SMA_ACCESS then do;
	     call ioa_$ioa_switch (iox_$error_output, "No sma permission on containing directory for ^a.", meeting_path);
	     return;
	end;

	call find_terminal_quota (dir_quota, dir_qused);

	call forum_admin_$convert (dir, name, status);
	if status ^= 0 then goto BADPATH;

	v2_name = reverse (substr (reverse (rtrim (name)), 9)) || ".forum";

	call hcs_$quota_read (pathname_ (dir, v2_name), 0, 0, ""b, ""b, 0, v2_qused, status);
	if status ^= 0 then do;
DELV2:	     call forum_$delete_forum (dir, v2_name, (0));
	     call ioa_$ioa_switch (iox_$error_output, "^a after conversion of ^a.", get_message (status), meeting_path);
	end;

	if v2_qused + dir_qused <= dir_quota then do;	/* obviously enough quota */
	     call forum_$delete_forum (dir, name, (0));
	     return;
	end;

/* Now we need to determine how much quota the v1 meeting is using */

	proceedings_name = reverse (substr (reverse (rtrim (name)), 9)) || ".proceedings";

	call hcs_$status_ (dir, name, 0, addr (sb), null (), status);
	if status ^= 0 then goto DELV2;
	
	v1_recs_used = sb.records_used;

	call hcs_$status_ (dir, proceedings_name, 0, addr (sb), null (), status);
	if status ^= 0 then goto DELV2;

	v1_recs_used = v1_recs_used + sb.records_used;
	if dir_qused + v2_qused - v1_recs_used <= dir_quota + 5 /* SLOP */then do;
	     call forum_$delete_forum (dir, name, (0));
	     return;
	end;

	call ioa_$ioa_switch (iox_$error_output, "Insufficient quota to convert ^a.", meeting_path);
	call forum_$delete_forum (dir, v2_name, (0));

	return;

find_terminal_quota:
	procedure (dir_quota, dir_qused);

declare	(dir_quota, dir_qused)	fixed bin (18),
	local_dir			char (168);

declare	cant_find_terminal_quota	condition;

	local_dir = dir;
	do while ("1"b);
	     call hcs_$quota_read (local_dir, dir_quota, 0, ""b, ""b, 0, dir_qused, status);
	     if status ^= 0 then goto BADPATH;

	     if dir_quota > 0 then return;
	     local_dir = reverse (after (reverse (local_dir), ">"));

	     if local_dir = "" then signal cant_find_terminal_quota;
	end;
     end find_terminal_quota;

     end forum_find_v1;
