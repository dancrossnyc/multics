/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ***************************************
   *				 *
   *				 *
   * Copyright (c) 1975, 1976, 1977 by   *
   * Honeywell Information Systems, Inc. *
   *				 *
   *				 *
   *************************************** */
sort_merge_sub_error:  proc;
/*   Handler for sub_error_ condition for sort and merge commands.   */

/*   EXTERNAL ENTRIES   */
dcl  continue_to_signal_  entry(fixed bin(35));
dcl  convert_status_code_  entry(fixed bin(35), char(8) aligned, char(100) aligned);
dcl  find_condition_info_  entry(ptr, ptr, fixed bin(35));
dcl  ioa_  entry options(variable);
dcl  ioa_$ioa_switch  entry options(variable);

/*   EXTERNAL STATIC   */
dcl  iox_$user_output  ptr external static;

/*   AUTOMATIC and BASED   */
dcl  continue_code  fixed bin(35);
dcl  cond_ptr ptr;
dcl  find_cond_code fixed bin(35);
dcl  shortinfo char(8) aligned,
     longinfo char(100) aligned;

dcl 1 info aligned based(infoptr),
      2 length fixed bin,
      2 version fixed bin,
      2 action_flags aligned,
        3 cant_restart bit(1) unaligned,	/*   At present, always off (=  ).   */
        3 default_restart bit(1) unaligned,	/*   At present, always on (= 1).   */
        3 pad bit(34) unaligned,
      2 string char(256) varying,
      2 code fixed bin(35),
      2 retval fixed bin(35),
      2 name char(32),
      2 infop ptr;

dcl 1 find_cond_info,
%include cond_info;


     cond_ptr = addr(find_cond_info);
     call find_condition_info_(null(), cond_ptr, find_cond_code);
     if cond_ptr = null() then do;
	call continue_to_signal_(continue_code);
	return;
	end;
     if condition_name ^= "sub_error_" | infoptr = null()
     | (substr(name, 1, 4) ^= "sort" & substr(name, 1, 5) ^= "merge") then do;
	call continue_to_signal_(continue_code);
	return;
	end;
     retval = 0;
     if code = 0 then call ioa_$ioa_switch(iox_$user_output,
	"^a: ^a", name, string);
     else do;
	call convert_status_code_(code, shortinfo, longinfo);
	call ioa_$ioa_switch(iox_$user_output,
		"^a:  ^a ^a", name, longinfo, string);
	end;
end sort_merge_sub_error;
