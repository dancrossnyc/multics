/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified on 03/20/82 by FCH, [1], number of input files = 10, sort_merge_subroutine$noexit <- sort_$noexit */

sort_convert_internal:  proc(source_parameters, internal_parameters, p_area, keys_ptr, io_exits_ptr, exits_ptr,
			bit_count, seg_length, convert_int_code);
/*   Convert Sort/Merge Description from source form to internal form.   */

/*   PARAMETERS   */

/*   EXTERNAL ENTRIES   */
dcl  convert_status_code_  entry(fixed bin(35), char(8) aligned, char(100) aligned);
dcl  cv_dec_check_ entry(char(*), fixed bin(35)) returns(fixed bin(35));
dcl  ioa_$ioa_stream  entry  options(variable);
dcl  find_command_ entry(ptr, fixed bin, ptr, fixed bin(35));
dcl  find_command_code fixed bin(35);
dcl  lex_string_$init_lex_delims  entry(char(*), char(*), char(*), char(*), char(*),
		bit(*), char(*) varying aligned, char(*) varying aligned,
		char(*) varying aligned, char(*) varying aligned);
dcl  lex_string_$lex  entry(ptr, fixed bin(21), fixed bin(21), ptr, bit(*),
		char(*), char(*), char(*), char(*), char(*),
		char(*) varying aligned, char(*) varying aligned,
		char(*) varying aligned, char(*) varying aligned,
		ptr, ptr, fixed bin(35));

/*1*/dcl  sort_$noexit entry external;

/*   EXTERNAL STATIC   */

% include sort_ext;

dcl  sys_info$max_seg_size fixed bin(35) external static;
dcl (error_table_$no_stmt_delim,
     error_table_$unbalanced_quotes) fixed bin(35) external static;

/*   INTERNAL STATIC  (must be constants only)     */
dcl  nl char(1) internal static init("
");
dcl  tb char(1) internal static init("	");		/*   tab   */

dcl (quote_open char(1) init(""""),
     quote_close char(1) init(""""),
     comment_open char(2) init("/*"),
     comment_close char(2) init("*/"),
     statement_delim char(1) init(";"),
     s_init bit(2) init("10"b)	/*   suppress quoting delims, return statement delims   */
     ) internal static;
dcl (l_ignored_input fixed bin(21) init(0),
     s_lex bit(3) init("100"b)	/*   yes statement descriptors,
				     no  comment descriptors,
				     no  retain doubled quote_closes    */
     ) internal static;

/*   The following 4 declarations are synchronized with each other;
     if one is modified then the others must be modified consistently.   */
dcl keywords(22) char(16) internal static init(
	"keys", "key",
	"exits", "exit",
	"char", "character",
	"bit",
	"bin", "binary",
	"fixed",
	"dec", "decimal",
	"float",
	"flbin",
	"fldec",
	"dsc", "descending",
	"input_file",
	"output_file",
	"compare",		/*   Currently element 20   */
	"input_record",
	"output_record" );

/*    exit_words must be defined on the element of keywords which contains the exit name "compare".   */
dcl exit_words(keyword_codes.compare : exit_max) char(16) defined(keywords(20));

dcl 1 keyword_codes internal static,
      2 (
	keys(2) init((2)1),
	exits(2) init((2)2),
	char(2) init((2)100),
	bit     init(101),
	bina(2)     init((2)102),
	fixed   init(103),
	decim(2)     init((2)104),
	float   init(105),
	flbin   init(106),
	fldec   init(107),
	dsc(2)      init((2)200),
	input_file   init(300),
	output_file  init(301),
	compare init(302),
	input_record init(303),
	output_record init(304) ) fixed bin(17);

dcl  codes_array(22) fixed bin(17) based(addr(keyword_codes));

dcl (st_min init(1),
     st_max init(3),
     dt_min init(100),
     dt_max init(107),
     exit_min init(300),
     exit_max init(304) ) fixed bin(17) internal static;

/*   The following 3 declarations are synchronized with each other;
     if one is modified then all must be modifed consistently.   */
dcl  internal_datatypes(0:10) char(8) internal static init(
	"illegal",
	"char",
	"bit",
	(2)(1)"bin",
	(2)(1)"flbin",
	(2)(1)"dec",
	(2)(1)"fldec");

dcl  legal_datatype_bits(0:10) bit(8) init(	/*   Change to internal static when
					     compiler correctly initializes last element.   */
	"00000000"b,
	"10000000"b,
	"01000000"b,
	"00100000"b, "00110000"b,
	"00100100"b, "00000010"b,
	"00001000"b, "00011000"b,
	"00001100"b, "00000001"b);

dcl (on init("1"b),
     off init("0"b) ) bit(1) internal static;

/*   PARAMETERS, AUTOMATIC, AND BASED   */

%include lex_descriptors_;

dcl (ignored_break_chars char(4) varying aligned,	/*   , space tab newline   */
     break_chars char(8) varying aligned,	/*   , space tab newline : ; ( )   */
     lex_delims char(128) varying aligned,
     lex_control_chars char(128) varying aligned,
     p_input ptr,
     l_input fixed bin(21),
     p_first_statement_desc ptr,
     p_first_token_desc ptr,
     lex_code fixed bin(35) );

dcl  len_max(0:10) fixed bin(24) init(
	4095,   /*  illegal  */
	4095,   /*  char  */	/*   set dynamically; see references to word_offset_max   */
	4095,   /*  bit   */	/*   set dynamically; see references to word_offset_max   */
	  71,   /*  fxbin  */
	  71,   /*  fxbin  */
	  63,   /*  flbin  */
	  63,   /*  flbin  */
	  59,   /*  fxdec  */
	  59,   /*  fxdec  */
	  59,   /*  fldec  */
	  59    /*  fldec  */
       );

dcl statement_counts(st_min: st_max) fixed bin(17);
dcl  datatype_bits bit(dt_max - dt_min + 1),
     legal_datatype_index fixed bin(17);

dcl  exit_count_array(exit_min: exit_max) fixed bin(17);
dcl  user_name_array(exit_min: exit_max) char(168);

dcl  exit_pairs_count fixed bin(17);

%include sort_merge_pars;



/*   For deleted attach statement:
dcl 1 attach_array_init internal static,
      2 count fixed bin(17) init(0),
      2 desc char(168) init("");

dcl error fixed bin(35);
dcl  curr_switchname char(8);
dcl  curr_attach_index fixed bin(17);
dcl  curr_attach_len fixed bin(17);
dcl  in_attach_max fixed bin(17);		*/

dcl (source_parameters ptr,
     internal_parameters ptr,
     p_area ptr,
     keys_ptr	ptr,
     io_exits_ptr	ptr,
     exits_ptr	ptr,
/*     attaches_ptr   ptr,   */
     bit_count fixed bin(24),
     seg_length fixed bin(24),
     convert_int_code fixed bin(35) ) parameter;
dcl  atom_ptr ptr,
     atom_len fixed bin;

dcl  atom char(atom_len) based(atom_ptr);
dcl  cv_err fixed bin(35);
dcl  integer fixed bin(35);
dcl  atom_code fixed bin(17);

% include sort_sd;

dcl 1 dummy_exits based(work_ptr),
      2 version fixed bin,
      2 exits_array(keyword_codes.compare : exit_max) entry,
      2 dummy fixed bin(71);

dcl  exit_code fixed bin(17);
dcl  work_ptr ptr;
dcl  word_offset_max fixed bin(30);

dcl  shortinfo char(8) aligned,
     longinfo char(100) aligned;

/*   Start.   */
     convert_int_code = 0;
     word_offset_max = sys_info$max_seg_size - 100;
     /*   The literal subscripts below must be monitored if len_max is changed.   */
     len_max(1) = word_offset_max * 4;		/*   for char strings  */		
     len_max(2) = word_offset_max * 36;		/*   for bit strings   */
     work_ptr = internal_parameters;
     ignored_break_chars = ", "||tb||nl;
     break_chars = ", :;()"||tb||nl;
     call lex_string_$init_lex_delims(quote_open, quote_close, comment_open, comment_close,
		statement_delim, s_init, break_chars, ignored_break_chars,
		lex_delims, lex_control_chars);
     p_input = source_parameters;
     l_input = bin(bit_count, 35)/9;
     call lex_string_$lex(p_input, l_input, l_ignored_input, p_area, s_lex,
		quote_open, quote_close, comment_open, comment_close,
		statement_delim, break_chars, ignored_break_chars,
		lex_delims, lex_control_chars,
		p_first_statement_desc, p_first_token_desc, lex_code);
     /*   If no tokens, then p_first_token_desc = null().   */
     if lex_code ^= 0 then do;
	if lex_code = error_table_$unbalanced_quotes | lex_code = error_table_$no_stmt_delim then do;
	     convert_int_code = 1;
	     call convert_status_code_(lex_code, shortinfo, longinfo);
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  ^a  ^a Description pathname ^a", whoami, longinfo, caps(whoami), sort_desc_pn);
	     end;
	end;
     Ptoken = p_first_token_desc;
     call syntax;			/*   Process source form of S.D.   */
exit:     return;     /*  to sort_ or merge_   */

convert_datatype:  entry(keys_ptr_par, current_key, typecode);
dcl (keys_ptr_par ptr,
     current_key fixed bin(17),
     typecode fixed bin(17) ) parameter;
dcl  j fixed bin(17);
     typecode = 0;
     work_ptr = keys_ptr_par;
     do j = 0 to hbound(internal_datatypes, 1);
	if keys.datatype(current_key) = internal_datatypes(j) then do;
	     typecode = j;
	     return;
 	     end;
	end;   /*   of do   */
     return;

/*   The implementation of the state diagram
     for the source form of the Sort/Merge Description follows
     (consult the PLM for further information).   */

syntax:  proc;
enter_state:
     call enter_action;
new_statement_state:
     call scan;
     if atom_code = keyword_codes.keys(1) then go to keys_state;
     if atom_code = keyword_codes.exits(1) then go to exits_state;
/*     if atom_code = keyword_codes.attach then go to attach_state;  */
     if atom = ";" then go to new_statement_state;
     else go to err_1_state;
keys_state:
     call keys_action;
     call scan;     
     if atom = ":" then call scan;
     go to expect_dtw_state;
expect_dtw_state:  /*  expect data type word   */
     if atom_code >= dt_min & atom_code <= dt_max then go to dtw_state;
     if atom = ";" then go to end_of_statement_state;
     else go to err_6_state;
datatype_word_state:  dtw_state:
     call datatype_word_action;
     call scan;
     if atom_code >= dt_min & atom_code <= dt_max then go to datatype_word_state;
     else go to datatype_state;
datatype_state:  dt_state:
     call datatype_action;
     if atom = "(" then go to left_par_size_state;
     else go to err_8_state;
left_par_size_state:
     call scan;
     integer = cv_dec_check_(atom, cv_err);
     if cv_err = 0 then go to size_state;
     if atom = ")" then go to right_par_size_state;
     else go to err_9_state;
size_state:
     call size_action;
     call scan;
     if atom = ")" then go to right_par_size_state;
     else go to err_10_state;
right_par_size_state:
     call scan;
     integer = cv_dec_check_(atom, cv_err);
     if cv_err = 0 then go to w_state;
     else go to err_11_state;
w_state:
     call w_action;
     call scan;
     if atom = "(" then go to left_par_off_state;
     call no_bit_offset_action;	/*   No (, therefore aligned   */
     if atom_code = dsc(1) then go to rv_state;
     go to expect_dtw_state;
left_par_off_state:
     call scan;
     integer = cv_dec_check_(atom, cv_err);
     if cv_err = 0 then go to b_state;
     if atom = ")" then go to right_par_off_state;
     else go to err_13_state;
b_state:
     call b_action;
     call scan;
     if atom = ")" then go to right_par_off_state;
     else go to err_14_state;
right_par_off_state:
     call scan;
     if atom_code = dsc(1) then go to rv_state;
     go to expect_dtw_state;
rv_state:
     call rv_action;
     call scan;
     go to expect_dtw_state;
exits_state:
     call exits_action;
     call scan;
     if atom = ":" then call scan;
     go to expect_exit_name_state;
expect_exit_name_state:
     if atom_code >= exit_min & atom_code <= exit_max then go to exit_name_state;
     if atom = ";" then go to end_of_statement_state;
     else go to err_4_state;
exit_name_state:
     call exit_name_action;
     call scan;
     if atom ^= ";" then go to user_name_state;
     else go to err_5_state;
user_name_state:
     call user_name_action;
     call scan;
     go to expect_exit_name_state;
/*  attach_state:
     call attach_action;
     call scan;
     if atom = ":" then call scan;
     if atom = ";" then go to err_15_state;
     go to switchname_state;
switchname_state:
     call switchname_action(error);
     if error ^= 0 then go to scan_statement_state;
     call scan;
     if atom = ";" then go to err_16_state;
     go to module_name_state;
module_name_state:
     call modulename_action(error);
     if error ^= 0 then go to scan_statement_state;
     call scan;
     if atom = ";" then go to end_of_statement_state;
     go to attach_desc_word_state;
attach_desc_word_state:
     call attach_desc_word_action(error);
     if error ^= 0 then go to scan_statement_state;
     call scan;
     if atom = ";" then go to end_of_statement_state;
     go to attach_desc_word_state;  */
end_of_statement_state:
/*   Do not scan.   */
     go to new_statement_state;
end_file_state:
     call end_file_action;
     return;     /*  from syntax proc   */

err_1_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Unrecognized statement keyword ""^a"".  Rest of statement ignored.",
		whoami, atom);
     go to scan_statement_state;
err_4_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Unrecognized exit name ""^a"" for presumed ^d"||
		ordinal(exit_pairs_count + 1)||" exit description.  Word ignored.",
		whoami, atom, exit_pairs_count + 1);
     call scan;
     go to expect_exit_name_state;
err_5_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Missing user exit procedure name for ^d"||
		ordinal(exit_pairs_count)||" exit description.", whoami, exit_pairs_count);
     call user_name_action;
     go to end_of_statement_state;
err_6_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Unrecognized data type ""^a"" for presumed key ^d.",
		whoami, atom, keys.number + 1);
     go to scan_key_state;
err_8_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
	"^a:  Invalid word ""^a"" following data type for key ^d.  Should be ( for (length) or (precision).",
		whoami, atom, keys.number);
     go to scan_key_state;
err_9_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Invalid length or precision ""^a"" for key ^d.",
		whoami, atom, keys.number);
     go to scan_key_state;
err_10_state:
     convert_int_code = 1;
   if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Invalid word ""^a"" following length or precision for key ^d.  Should be ).",
		whoami, atom, keys.number);
     go to scan_key_state;
err_11_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Invalid word ""^a"" following length or precision for key ^d.  Should be word offset.",
		 whoami, atom, keys.number);
     go to scan_key_state;
err_13_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Invalid bit offset ""^a"" for key ^d.",
		whoami, atom, keys.number);
     go to scan_key_state;
err_14_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Invalid word ""^a"" following bit offset for key ^d.  Should be ).",
		 whoami, atom, keys.number);
     go to scan_key_state;
/*  err_15_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Attach statement ^d is empty.",
		whoami, statement_counts(keyword_codes.attach));
     go to scan_statement_state;
err_16_state:
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Attach statement ^d has no I/O module name.  Rest of statement ignored.",
		whoami, statement_counts(keyword_codes.attach));
     go to scan_statement_state;  */
scan_statement_state:
     if atom = ";" then go to end_of_statement_state;
     call scan;
     go to scan_statement_state;
scan_key_state:
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^vxWill resume processing with next valid data type word.",
		length(before(whoami, " ")) + 3);
scan_key_loop:
     if atom = ";" then go to end_of_statement_state;
     call scan;
     if atom_code >= dt_min & atom_code <= dt_max then go to dtw_state;
     else go to scan_key_loop;


scan:  proc;				/*   Get next atom:   */
     if Ptoken = null() then go to end_file_state;	/*   End of S.D.   */
     atom_code = 0;
     atom_len = token.Lvalue;
     atom_ptr = token.Pvalue;
     call look_up_keyword;		/*   Get code corresponding to "atom".   */
     Ptoken = token.Pnext;
end scan;


end syntax;


look_up_keyword:  proc;
dcl  index fixed bin(17);

     do index = lbound(keywords, 1) to hbound(keywords, 1);
	if atom = keywords(index) then
	     do;
	     atom_code = codes_array(index);
	     go to end_lookup;
	     end;
     end;
end_lookup:
end look_up_keyword;


enter_action:  proc;			/*   Initialize variables.   */
     statement_counts = 0;
     exit_count_array = 0;
     exit_pairs_count = 0;
     keys_ptr,
     io_exits_ptr,
     exits_ptr = null();
/*     attaches_ptr = null();
     attach_array = attach_array_init;
     in_attach_max = 0;  */
end enter_action;


keys_action:  proc;
     datatype_bits = "0"b;
     keys.version = 1;
     statement_counts(atom_code) = statement_counts(atom_code) + 1;
     keys.number = 0;
end keys_action;


datatype_word_action:  proc;
     substr(datatype_bits, atom_code - dt_min + 1, 1) = "1"b;
end datatype_word_action;

datatype_action:  proc;
dcl  i fixed bin(17);
     keys.number = keys.number + 1;		/*   Add 1 to number of keys in keys substructure.   */
     legal_datatype_index = 0;
     do i = 1 to hbound(legal_datatype_bits, 1);	/*   Check for valid combination of data type words.   */
	if datatype_bits = legal_datatype_bits(i) then legal_datatype_index = i;
					/*   Hold index indicating data type.   */
	end;
     keys.datatype(keys.number) = internal_datatypes(legal_datatype_index);
					/*   Set data type for current key.   */
     keys.word_offset(keys.number) = 0;
     keys.bit_offset(keys.number) = 0;		/*   Set default for bit offset to 0.   */
     keys.rv(keys.number) = "";		/*   Set default for "descending" to off.   */
     if legal_datatype_index = 0 then
	call datatype_err_action;
     datatype_bits = "0"b;
end datatype_action;


datatype_err_action:  proc;
     convert_int_code = 1;
     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Inconsistent datatype attributes for key ^d.",
		whoami, keys.number);
end datatype_err_action;


w_action:  proc;
     if integer >= word_offset_max then
	do;
	convert_int_code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Word offset of ^a too large for key ^d.",
		whoami, atom, keys.number);
	end;
     keys.word_offset(keys.number) = integer;	/*   Set word offset for current key.   */
end w_action;


no_bit_offset_action:  proc;
     /*   Adjust precision of aligned binary if appropriate.   */
     if keys.len(keys.number) < 0 then return;
     if keys.datatype(keys.number) = "bin" then do;
	if keys.len(keys.number) <= 35 then keys.len(keys.number) = 35;
	else if keys.len(keys.number) <= 71 & mod(keys.word_offset(keys.number), 2) = 0
		then keys.len(keys.number) = 71;
	end;
     else if keys.datatype(keys.number)   = "flbin" then do;
	if keys.len(keys.number) <= 27 then keys.len(keys.number) = 27;
	else if keys.len(keys.number) <= 63 & mod(keys.word_offset(keys.number), 2) = 0
		then keys.len(keys.number) = 63;
	end;
end no_bit_offset_action;


b_action:  proc;
     if integer > 35 then
	do;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Bit offset of ^a too large for key ^d.",
		whoami, atom, keys.number);
	convert_int_code = 1;
	end;
     keys.bit_offset(keys.number) = integer;	/*   Set bit offset for current key.   */
end b_action;


size_action:  proc;
dcl  temp fixed bin(24);
     if integer > len_max(legal_datatype_index) then
	do;
	convert_int_code = 1;
	temp = len_max(legal_datatype_index);
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Length ^a too large for ^a data type of key ^d.  Must not be greater than ^d.",
		whoami, atom, keys.datatype(keys.number), keys.number, temp);
	end;
     keys.len(keys.number) = integer;		/*   Set "size" for current key.   */
end size_action;


rv_action:  proc;
     keys.rv(keys.number) = "dsc";		/*   Srt rv for current key in keys structure.   */
end rv_action;


exits_action:  proc;
     statement_counts(atom_code) = statement_counts(atom_code) + 1;
end exits_action;


exit_name_action:  proc;
     exit_pairs_count = exit_pairs_count + 1;
     exit_code = atom_code;		/*   Hold exit code.   */
end exit_name_action;


user_name_action:  proc;
     exit_count_array(exit_code) = exit_count_array(exit_code) + 1;	/*   Increment count for proper exit name.   */
     user_name_array(exit_code) = atom;		/*   Get user name.   */
end user_name_action;


  /*  attach_action:  proc;
     statement_counts(atom_code) = statement_counts(atom_code) + 1;
end attach_action;


switchname_action:  proc(error);
dcl  error fixed bin(35) parameter;
     error = 0;
     curr_switchname = atom;
     if substr(atom, 1, 3) = "in_" then do;
	curr_attach_index = cv_dec_check_(substr(atom, 4), error);
	if error ^= 0 | curr_attach_index < 1 | curr_attach_index > input_file_max then do;
	     convert_int_code = 1;
	     error = 1;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
			"^a:  Invalid input file switchname ^a  Rest of statement ignored.",
			whoami, curr_switchname);
	     return;
	     end;
	else in_attach_max = max(in_attach_max, curr_attach_index);
	end;
     else if atom = "out_1" then curr_attach_index = 0;
     else do;
	error = 1;
	convert_int_code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw, 
		"^a:  Invalid switchname ^a  Rest of statement ignored.",
			whoami, curr_switchname);
	return;
	end;
     attach_array.count(curr_attach_index) = attach_array.count(curr_attach_index) + 1;
end switchname_action;


modulename_action:  proc(error);
dcl  error fixed bin(35) parameter;
     error = 0;
     curr_attach_len = atom_len + 1;
     if curr_attach_len > length(attach_array.desc(0)) then do;
	error = 1;
	convert_int_code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  I/O module name for switchname ^a longer than ^d characters.  Rest of statement ignored.",
		whoami, curr_switchname, length(attach_array.desc(0)));
	end;
     else substr(attach_array.desc(curr_attach_index), 1) = atom ||" ";
end modulename_action;


attach_desc_word_action:  proc(error);
dcl  error fixed bin(35) parameter;
     error = 0;
     if curr_attach_len + atom_len > length(attach_array.desc(0)) then do;
	error = 1;
	convert_int_code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
	     "^a:  Attach description for switchname ^a longer than ^d characters.  Rest of statement ignored.",
	     whoami, curr_switchname, length(attach_array.desc(0)));
	return;
	end;
     substr(attach_array.desc(curr_attach_index), curr_attach_len + 1) = atom||" ";
     curr_attach_len = curr_attach_len + atom_len + 1;
end attach_desc_word_action;  */




end_file_action:  proc;			/*   End of source S.D. encountered;
	Construct structures in order, and set keys_ptr, io_exits_ptr, and exits_ptr.   */
     call construct_keys;
     call construct_io_exits;
     call construct_exits;
/*     call construct_attaches;   */
     call construct_end;
end end_file_action;


construct_keys:  proc;			/*   Complete keys substructure:   */
     if statement_counts(keyword_codes.keys(1)) = 0 | keys.number = 0 then return;
     if statement_counts(keyword_codes.keys(1)) > 1 then
	do;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Keys statement specified ^d times.",
		whoami, statement_counts(keyword_codes.keys(1)));
	convert_int_code = 1;
	end;
     keys_ptr = work_ptr;
     work_ptr = addr(keys.dummy);	/*   Move pointer.   */
end construct_keys;


construct_io_exits:  proc;			/*   Construct io_exits substructure:   */
     input_file_exit_sw,
     output_file_exit_sw = off;
     if statement_counts(keyword_codes.exits(1)) = 0 then return;	/*   Does not move pointer.   */
     if exit_count_array(keyword_codes.input_file) = 0 & exit_count_array(keyword_codes.output_file) = 0 then return;
					/*   Does not move pointer.   */
     io_exits.version = 1;
     if exit_count_array(keyword_codes.input_file) > 1 then
	do;
	convert_int_code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Input_file exit specified ^d times.",
		whoami, exit_count_array(keyword_codes.input_file));
	end;
     if exit_count_array(keyword_codes.output_file) > 1 then
	do;
	convert_int_code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Output_file exit specified ^d times.",
		whoami, exit_count_array(keyword_codes.output_file));
	end;
     if exit_count_array(keyword_codes.input_file) > 0 then do;
	/*   Construct entry variable for input_file exit.   */
	input_file_exit_sw = on;
	call construct_entry_variable(addr(io_exits.input_file_exit),
		user_name_array(keyword_codes.input_file), "input_file");
	end;
/*1*/     else io_exits.input_file_exit = sort_$noexit;
     if exit_count_array(keyword_codes.output_file) > 0 then do;
	/*   Construct entry variable for output_file exit.   */
	output_file_exit_sw = on;
	call construct_entry_variable(addr(io_exits.output_file_exit),
		user_name_array(keyword_codes.output_file), "output_file");
	end;
/*1*/     else io_exits.output_file_exit = sort_$noexit;
     io_exits_ptr = work_ptr;
     work_ptr = addr(io_exits.dummy);		/*   move pointer.   */
end construct_io_exits;


construct_entry_variable:  proc(p, name, exit_name);
     /*   Construct entry variable for user exit procedure:   */
dcl (p ptr,
     name char(*),
     exit_name char(*) ) parameter;
dcl 1 entry_variable based(p),
      2 p1 ptr,
      2 p2 ptr;
dcl  ev  entry based(p);

     call find_command_(addr(name), length(name), p1, find_command_code);	/*   Process like a command name.   */
     p2 = null();
     if find_command_code ^= 0 then
	do;
	convert_int_code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^vxInitializing entry variable for user-supplied ^a exit procedure.",
		length(before(whoami, " ")) + 3, exit_name);
/*1*/	ev = sort_$noexit;
	end;
end construct_entry_variable;


construct_exits: proc;			/*   Construct exits substructure:   */
dcl  index fixed bin(17),
     sum fixed bin(35);
     if statement_counts(keyword_codes.exits(1)) = 0 then return;   	/*   Do not move pointer.   */
     sum = 0;
     do index = keyword_codes.compare to exit_max;
	sum = sum + exit_count_array(index);
	end;
     if sum = 0 then return;		/*   Without moving pointer.   */
     exits.version = 1;
/*   Test multiple occurrences & construct entry variable for each exit.     */
     do index = keyword_codes.compare to exit_max;
	if exit_count_array(index) > 1 then do;
	     convert_int_code = 1;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  ^a exit specified ^d times.",
		whoami, exit_words(index), exit_count_array(index));
	     end;
	if exit_count_array(index) > 0 then do;
	     call construct_entry_variable(addr(exits_array(index)), user_name_array(index), exit_words(index));
	     end;
/*1*/	else exits_array(index) = sort_$noexit;
	end;   /*   of do index   */
     exits_ptr = work_ptr;
     work_ptr = addr(exits.dummy);		/*   Move pointer.   */
end construct_exits;


/*   construct_attaches:  proc;
dcl  i fixed bin(17),
     sum fixed bin(35);
     if statement_counts(keyword_codes.attach) = 0 then return;
     sum = 0;
     do i = lbound(attach_array, 1) to hbound(attach_array, 1);
	sum = sum + attach_array.count(i);
	end;
     if sum = 0 then return;
     attaches.version = 1;
     attaches.number = in_attach_max;
     do i = 1 to in_attach_max;
	if attach_array.count(i) > 1 then do;
	     convert_int_code = 1;
	     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Attach statement for switchname in_^d specified ^d times.",
		whoami, i, attach_array.count(i));
	     end;
	if attach_array.count(i) > 0 then attaches.in_desc(i) = attach_array.desc(i);
	else attaches.in_desc(i) = "";
	end;
     if attach_array.count(0) > 1 then do;
	convert_int_code = 1;
	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Attach statement for switchname out_1 specified ^d times.",
		whoami, attach_array.count(0));
	end;
     if attach_array.count(0) > 0 then attaches.out_desc = attach_array.desc(0);
     else attaches.out_desc = "";
     attaches_ptr = work_ptr;
     work_ptr = addr(attaches.dummy);
end construct_attaches;   */


construct_end:  proc;
     seg_length = bin(rel(work_ptr), 24);
end construct_end;


ordinal:  proc(number) returns(char(2));	/*   Create an ordinal suffix (st, nd, rd, th, etc.):   */
dcl  number fixed bin(17),
     residue fixed bin(17);
     residue = mod(number, 100);
     if residue >= 11 & residue <= 19 then return("th");
     residue = mod(residue, 10);
     if residue = 1 then return("st");
     if residue = 2 then return("nd");
     if residue = 3 then return("rd");
     else return("th");
end ordinal;


caps:  proc(whoami)  returns(char(5));
dcl  whoami char(*) parameter;
     if whoami = "sort" then return("Sort");
     else return("Merge");
end caps;

end sort_convert_internal;
