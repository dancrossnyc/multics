/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

sort_sort: proc (input_file, output_file, sort_desc,
     temp_dir, user_out_sw_par, file_size_par, sort_code);

/*   PARAMETERS   */
dcl (input_file (*) char (*),				/*   Input file pathnames or attach descriptions (Input).   */
     output_file char (*),				/*   Output file pathnames or attach description  (Input).   */
     sort_desc (*) ptr,				/*   Pointer to Sort Description (source form)  (Input).   */
     temp_dir char (*),				/*   Pathname of directory for work files  (Input).   */
     user_out_sw_par char (*),			/*   Switchname for diagnostics and Sort Report  (Input).   */
     file_size_par float bin (27),			/*   File size specified by user - millions of bytes  (Input).   */
     sort_code fixed bin (35),			/*   Status code  (Output).   */
     merge_order_par fixed bin (35),			/*   Merge order specified by caller of sort_private  (Input).   */
     string_size_par fixed bin (35)) parameter;		/*   String size specified by caller of sort_private  (Input).   */

/*   EXTERNAL ENTRIES     */
dcl  clock_ entry returns (fixed bin (71));
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  cpu_time_and_paging_ entry (fixed bin, fixed bin (71), fixed bin);
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  get_pdir_ entry returns (char (168) aligned);
dcl  hcs_$get_process_usage entry (ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$status_minf entry (char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2),
     fixed bin (24), fixed bin (35)),
     hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*),
     fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (24), fixed bin (35)),
     hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hmu entry;
dcl  ioa_$ioa_stream entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  sub_err_ entry options (variable);
dcl  translator_temp_$release_segment entry (ptr, fixed bin (35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));

dcl  sort_initiate$initiate_private entry (char (*), ptr, ptr, char (*), float bin (27),
     fixed bin (35), fixed bin (35), fixed bin (35));
dcl (sort_input_proc,
     sort_output_proc) entry (fixed bin (35));
dcl  sort_commence$commence entry (fixed bin (35)),
     sort_merge_terminate$terminate entry (fixed bin (35));
dcl  sort_cleanup_work entry;
dcl  sort_merge_subroutine entry ((*)char (*), char (*), (*)ptr, char (*),
     entry, entry, bit (1), bit (1),
     ptr, ptr,
     ptr, ptr);
dcl  sort_merge_print_report entry;

/*   EXTERNAL STATIC     */

% include sort_ext;

dcl (error_table_$out_of_sequence,
     error_table_$fatal_error,
     error_table_$bad_arg) external static fixed bin (35);

/*   INTERNAL STATIC   (constants only)   */
dcl (on init ("1"b),
     off init ("0"b)) bit (1) internal static;

/*   AUTOMATIC AND BASED   */
dcl  temp_dir_temp char (168),
     keys_ptr ptr,
     exits_ptr ptr,
     user_out_sw_temp char (32),
     code fixed bin (35),				/*   work location for status codes returned from calls made by driver   */
     merge_order_temp fixed bin (35),
     string_size_temp fixed bin (35);

dcl  file_size_user_val fixed bin (71),			/*   Value given by user - bytes.   */
     file_size_computed fixed bin (71),			/*   Amount of input data in storage system - bytes.   */
     file_size_pass float bin (27);			/*   Passed to sort_initiate - millions of bytes.   */
dcl  some_not_found bit (1);

dcl (temp_sd_int,
     temp_sd_lex) ptr init (null ());

dcl (sort_input_exit,
     sort_output_exit) entry (fixed bin (35)) variable;

dcl  state_code fixed bin (35);

dcl  arg_err_sw bit (1),
     fatal_sw bit (1);

dcl  j fixed bin (17);				/*   Used for do loop calling input file procedure.   */
dcl  hcs_code fixed bin (35);

dcl  expand_code fixed bin (35);
dcl  in_dir char (168) aligned,
     in_ename char (32) aligned,
     in_bit_count fixed bin (24),
     in_ptr ptr,
     type fixed bin (2),
     component char (32) aligned,
     comp_len fixed bin (17);

dcl  shortinfo char (8) aligned,
     longinfo char (100) aligned;

dcl  retval fixed bin (35);
dcl  cleanup condition;

/*   Start.   */

call state_test (state_code);				/*   Test state variable.   */
if state_code ^= 0 then do;
     sort_code = error_table_$out_of_sequence;
     return;					/*   to caller without resetting state variable   */
end;
state = 2;
merge_order_temp = 0;				/*   Merge order not specified.   */
string_size_temp = 0;				/*   String_size not specified.   */
time_sw = off;					/*   Timing not specified.   */
debug_sw = off;					/*   Debug option not specified.  */
arg_err_sw = off;					/*   Not done in common_start; see sort_private entry.   */
common_start:
sort_code = 0;
mii = 0;						/*   Used by sort_cleanup_work   */
sip = null ();					/*   Used by sort_cleanup_work   */
in_buff_ptr = null ();				/*   Used by cleanup procedure   */
temp_sd_lex,
     temp_sd_int = null ();				/*   used by cleanup procedure   */
on cleanup call cleanup_proc;
user_out_sw_temp = user_out_sw_par;			/*   Pass on.   */
temp_dir_temp = temp_dir;				/*   Pass on to sort_$initiate.   */

call sort_merge_subroutine (input_file, output_file, sort_desc, user_out_sw_temp,
     sort_input_exit, sort_output_exit, arg_err_sw, fatal_sw,
     keys_ptr, exits_ptr,
     temp_sd_lex, temp_sd_int);
call create_in_buff;
file_size_user_val = file_size_par * 10**6;		/*   File size specified by user.   */
call set_file_size;

/*   Driver:   5 steps.   */
/*   (1)  Initiate.   */
if fatal_sw = off then
     call sort_initiate$initiate_private (temp_dir_temp, keys_ptr, exits_ptr, user_out_sw_temp, file_size_pass,
     code, merge_order_temp, string_size_temp);
if arg_err_sw = on | fatal_sw = on then do;
     sort_code = error_table_$bad_arg;
     go to exit;
end;
if code ^= 0 then do;
     if code = error_table_$out_of_sequence then do;
	call sub_err_ (code, whoami, "c", null (), retval,
	     "Calling sort_$initiate.");
	sort_code = error_table_$fatal_error;
     end;
     else sort_code = code;
     go to exit;
end;
if time_sw = on then do;				/*   Beginning of Presort.   */
     etime (2) = clock_ ();
     call cpu_time_and_paging_ (pf (2), vtime (2), pd_f (2));
     call hcs_$get_process_usage (addr (pu (2)), hcs_code);
end;

/*   (2)  Call an input file procedure.   */
if input_driver_is_sort = on then			/*   Call Sort's input file procedure, once per input file.   */
     do j = 1 to dimension (input_file, 1);
     curr_input_file_name = input_file (lbound (input_file, 1) + j - 1);
     curr_input_file_num = j;
     call scan_for_pn_or_attach (curr_input_file_name, curr_input_file_attach);
     call sort_input_proc (code);
     if code ^= 0 then do;
	if code ^= error_table_$fatal_error then do;
	     call sub_err_ (code, whoami, "c", null (), retval,
		"Sort's input_file procedure.");
	end;
	sort_code = error_table_$fatal_error;
	go to exit;
     end;
end;
else do;						/*   Call user's input file procedure.   */
     call sort_input_exit (code);
     if code ^= 0 then do;
	if code ^= error_table_$fatal_error
	then call sub_err_ (code, whoami, "c", null (), retval,
	     "User input_file exit procedure.");
	sort_code = error_table_$fatal_error;
	go to exit;
     end;
end;

/*   (3)  Commence.   */
call sort_commence$commence (code);
if code ^= 0 then do;
     if code = error_table_$out_of_sequence then
	call sub_err_ (code, whoami, "c", null (), retval,
	"Calling sort_$commence.");
     sort_code = error_table_$fatal_error;
     go to exit;
end;
if time_sw = on then do;				/*   End of Presort - beginning of Merge   */
     etime (3) = clock_ ();
     call cpu_time_and_paging_ (pf (3), vtime (3), pd_f (3));
     call hcs_$get_process_usage (addr (pu (3)), hcs_code);
     call hmu;
end;

/*   (4)  Call an output file procedure.   */
if output_driver_is_sort = on then			/*   Call Sort's output file procedure.   */
     do;
						/*   sort_merge_subroutine has set up curr_output_file_name & curr_output_file_attach.   */
     call sort_output_proc (code);
     if code ^= 0 then do;
	if code ^= error_table_$fatal_error then do;
	     call sub_err_ (code, whoami, "c", null (), retval,
		"Sort's output_file procedure.");
	end;
	sort_code = error_table_$fatal_error;
	go to exit;
     end;
end;
else do;						/*   Call user's output file procedure.   */
     call sort_output_exit (code);			/*   User's output procedure.   */
     if code ^= 0 then do;
	if code ^= error_table_$fatal_error
	then call sub_err_ (code, whoami, "c", null (), retval,
	     "User output_file exit procedure.");
	sort_code = error_table_$fatal_error;
	go to exit;
     end;
end;
if time_sw = on then do;				/*   End of Merge.   */
     etime (4) = clock_ ();
     call cpu_time_and_paging_ (pf (4), vtime (4), pd_f (4));
     call hcs_$get_process_usage (addr (pu (4)), hcs_code);
end;

/*   (5)  Terminate.   */
call sort_merge_print_report;
call sort_merge_terminate$terminate (code);
if code ^= 0 then do;
     if code = error_table_$out_of_sequence then
	call sub_err_ (code, whoami, "c", null (), retval,
	"Calling sort_$terminate.");
     sort_code = error_table_$fatal_error;
     go to exit;
end;
exit:
call cleanup_proc;
state = 8;
return;						/*   to caller of sort_     */


/*  ENTRY   sort_$sort_private  called only by sort command.   */
sort_private: entry (input_file, output_file, sort_desc, temp_dir, user_out_sw_par, file_size_par, sort_code,
     merge_order_par, string_size_par);
state = 2;
if sort_code ^= 0 then arg_err_sw = on;			/*   sort has encountered some error already   */
else arg_err_sw = off;
merge_order_temp = merge_order_par;			/*   Pass on merge order from sort.   */
string_size_temp = string_size_par;			/*   Pass on string_size from sort.   */
go to common_start;


state_test: proc (state_code);			/*   Test state variable:   */
dcl  state_code fixed bin (35) parameter;
     if state = 0
     | (state = 8 & index (whoami, "_") ^= 0)		/*   Subroutine called last   */
     then do;
	whoami = "sort_";
	unique_prefix = before (unique_chars_ ("0"b), " ")||"."; /*   Get unique character string.   */
	state_code = 0;
     end;
     else do;
	state_code = 1;
	return;
     end;
end state_test;


scan_for_pn_or_attach: proc (name, attach);
dcl (name char (*),
     attach char (*)) parameter;
dcl (j, k) fixed bin (17);
     k = 1;
     do while (substr (name, k, 1) = " " & k < length (name));
	k = k + 1;
     end;
     j = k;
     do while (substr (name, k, 1) ^= " " & k < length (name));
	k = k + 1;
     end;
     do while (substr (name, k, 1) = " " & k < length (name));
	k = k + 1;
     end;
     if substr (name, j, 4) = "-if " | substr (name, j, 12) = "-input_file " then do;
	name = substr (name, k);
	attach = "";
     end;
     else if substr (name, j, 5) = "-ids " | substr (name, j, 19) = "-input_description " then do;
	attach = substr (name, k);
     end;
end scan_for_pn_or_attach;


set_file_size: proc;
						/*   Decide on input file size to use for sorting   */
dcl (i, j) fixed bin (17);
dcl  pn char (256);
dcl  att char (4);					/*   Unused.   */

/*   First, compute the amount of input data which is in the storage system.   */
     some_not_found = off;
     if input_driver_is_sort = off then do;		/*   All input data unknown.   */
	some_not_found = on;
	file_size_computed = 0;
     end;
     else do;					/*   Input files specified.   */
	file_size_computed = 0;
	do j = lbound (input_file, 1) to hbound (input_file, 1); /*   For each input file.   */
	     if substr (input_file (j), 1, 4) = "-if "
	     | substr (input_file (j), 1, 12) = "-input_file" then do;
		pn = input_file (j);
		call scan_for_pn_or_attach (pn, att);
		call expand_path_ (addr (pn), length (pn), addr (in_dir),
		     addr (in_ename), expand_code);
		if expand_code ^= 0 then do;		/*   Cannot expand pathname.   */
		     some_not_found = on;
		end;
		else do;				/*   Try to find file in storage system.   */
		     call hcs_$status_minf (in_dir, in_ename, 1 /* chase links */, type, in_bit_count, hcs_code);
		     if hcs_code ^= 0 | type = 0 /* link */ then do; /*   Cannot get at file.   */
			some_not_found = on;
		     end;
		     else if type = 1 then do;	/*   single segment file   */
			if file_size_computed > 10**9 then do;
			     call file_too_large;
			     return;
			end;
			file_size_computed = file_size_computed + divide (in_bit_count, 9, 71);
		     end;
		     else do i = 0 to (in_bit_count - 1); /*   multi segment file   */
			if file_size_computed > 10**9 then do;
			     call file_too_large;
			     return;
			end;
			call ioa_$rsnnl ("^d", component, comp_len, i);
			call hcs_$initiate_count (before (in_dir, " ") || ">" || in_ename, component, "",
			     in_bit_count, 0, in_ptr, hcs_code);
			if in_ptr = null () then do;	/*   component missing.   */
			     some_not_found = on;
			end;
			else			/*   Component found.   */
			file_size_computed = file_size_computed + divide (in_bit_count, 9, 71);
		     end;				/*   of do  for components of multisegment file   */
		end;				/*   of else do (expand_code = 0)    */
	     end;					/*   of else do (file is specified by pathname)   */
	     else some_not_found = on;		/*   This file not in storage system.   */
	end;					/*   of do j = lbound ...   */
     end;						/*   of computation of input data which is in storage system   */

/*   Second, decide whether to use file size specified by user,
   or value computed to be in storage system,
   or default to 1.0 million bytes.  		   */
     if file_size_user_val < 50 then do;		/*   User did not specify file size   */
	if some_not_found = off			/*   All input is in the storagee system   */
	then file_size_pass = file_size_computed;
	else					/*   Some input is not in the storage system   */
	file_size_pass = file_size_computed + 1.04*10**6;
						/*   Amount in storage system plus allowance for amount not in storage system   */
     end;
     else do;					/*   User did specify file size   */
	if input_record_exit_sw = 1			/*   User can insert or delete records   */
	then file_size_pass = file_size_user_val;
						/*   user knows best, since records can be inserted or deleted   */
	else do;					/*   User cannot insert or delete records   */
	     if some_not_found = on			/*   Some input is not in the storage system   */
	     then file_size_pass = max (file_size_computed, file_size_user_val);
						/*   Take user value unless amount in storage system is greater   */
	     else					/*   All input is in the storage system   */
	     file_size_pass = file_size_computed;
	end;
     end;
     file_size_pass = divide (file_size_pass, 10**6, 63);
end set_file_size;


file_too_large: proc;
     if user_out_sw ^= "" then call ioa_$ioa_stream (user_out_sw,
	"^a:  Amount of input data too large.  Must be < 10**9 bytes.", whoami);
     arg_err_sw = on;
end file_too_large;


create_in_buff: proc;
     call hcs_$make_seg (get_pdir_ (), unique_prefix||"sort_in_buff_", "", 8+2, /* :  rw  */ in_buff_ptr, hcs_code);
     if in_buff_ptr = null () then do;
	arg_err_sw = on;
	call convert_status_code_ (hcs_code, shortinfo, longinfo);
	if user_out_sw ^= "" then call ioa_$ioa_stream (user_out_sw,
	     "^a:  ^a  Unable to create temporary segment [pd]>^asort_in_buff_",
	     whoami, longinfo, unique_prefix);
     end;
end create_in_buff;


cleanup_proc: proc;
dcl  code fixed bin (35);
     if debug_sw = off then do;
	if temp_sd_lex ^= null () then call translator_temp_$release_segment (temp_sd_lex, code);
	if temp_sd_int ^= null () then call hcs_$delentry_seg (temp_sd_int, code);
	if in_buff_ptr ^= null () then call hcs_$delentry_seg (in_buff_ptr, code);
     end;
     else do;
	if temp_sd_lex ^= null () then call hcs_$truncate_seg (temp_sd_lex, 0, code);
	if temp_sd_int ^= null () then call hcs_$truncate_seg (temp_sd_int, 0, code);
	if in_buff_ptr ^= null () then call hcs_$truncate_seg (in_buff_ptr, 0, code);
     end;
     call sort_cleanup_work;
     state = 8;
end cleanup_proc;


end sort_sort;
