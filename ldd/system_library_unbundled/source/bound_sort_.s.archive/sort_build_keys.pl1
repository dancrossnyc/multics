/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ***************************************
   *				 *
   *				 *
   * Copyright (c) 1975, 1976 by         *
   * Honeywell Information Systems, Inc. *
   *				 *
   *				 *
   *************************************** */
sort_build_keys:  proc(keys_ptr, code);
/*   EXTERNAL ENTRIES   */
dcl  ioa_$ioa_stream entry options(variable);

/*   EXTERNAL STATIC   */
% include sort_ext;

/*   PARAMETERS, BASED, AUTOMATIC   */
dcl (keys_ptr ptr,		/*   Pointer to keys substructure   */
     code fixed bin(35) ) parameter;		/*   status code          */
% include sort_sd;
dcl  work_ptr ptr,
   i fixed bin(17);

/*   Start.     */
     work_ptr = keys_ptr;
     code = 0;
     min_rec_length = 0;
     do i = 1 to keys.number;
	w(i-1) = word_offset(i);	/*  set word offset  */
	b(i-1) = bit_offset(i);	/*  set bit offset  */
	leng(i-1) = len(i);		/*  set key length  */
	if rv(i) = "dsc" then rev(i-1) = 1;  /*  set descending ranking   */
		      else rev(i-1) = 0;
	if datatype(i) = "char"
	    then do;		/*  data type = character  */
		if mod(bit_offset(i),9) ^= 0 
		   then do;
			call bit_offset_warning("character", 9);
		        end;
		dt(i-1) = 1;  	/*  set type code  */
		min_rec_length=max(min_rec_length,4*w(i-1)+leng(i-1)+divide(b(i-1),9,24));
			/*  for this data type-set b(i-1) to first byte upon which to begin sort */
		b(i-1)=4*w(i-1)+divide(b(i-1),9,24)+1;
			/*  compute min_rec_length-in terms of bytes */
	         end;
	else if datatype(i) = "bit"
	    then do;		/*  data type = bit  */
		dt(i-1) = 2;	/*  set type code  */
		min_rec_length=max(min_rec_length,4*w(i-1)+divide(b(i-1)+leng(i-1)-1,9,24)+1);
		    /*  for this data type set b(i-1) to the first bit upon which to begin sort */
		b(i-1) = w(i-1)*36 + b(i-1) + 1;
	         end;
	else if datatype(i) = "bin"
	    then do;		/*  data type = binary  */
		min_rec_length=max(min_rec_length,4*w(i-1)+divide(b(i-1)+leng(i-1)+1-1,9,24)+1);
		if leng(i-1)=35 & b(i-1) = 0 then dt(i-1)=3;  /* aligned-occupying 1 word  */
		else if leng(i-1)=71 & b(i-1) = 0 & mod(w(i-1),2)=0  /*  aligned-occupying 2 words  */
						/*  latter tests for even word alignment  */
		    then do;
			dt(i-1) = 4;
			w(i-1) = divide(w(i-1),2,24);  /*  set w(i-1) to index  in imaginary array of 2 word
						fixed binary numbers  		*/
		         end;
		else do;		/*  unaligned  */
		    dt(i-1) = 5;
		    b(i-1)= w(i-1)*36 + b(i-1)+1;  /*  set b(i-1) to bit offset from the beginnng of the record  */
		     end;
	         end;
	else if datatype(i) = "flbin"
	    then do;		/*  data type = floating binary  */
		min_rec_length=max(min_rec_length,4*w(i-1)+divide(b(i-1)+leng(i-1)+9-1,9,24)+1);
		if leng(i-1)=27 & b(i-1) = 0 then dt(i-1)=6;  /*  aligned-occupying 1 word  */
		else if leng(i-1)=63 & b(i-1) = 0 & mod(w(i-1),2)=0  /*  aligned-occupying 2 words  */
						/*  latter tests for even word alignment  */
			then do;
			      dt(i-1) = 7;
			      w(i-1) = divide(w(i-1),2,24);  /*  set to index in imaginary array of
						2 word floating binary numbers  */
			     end;
		else do;  /*  unaligned  */
		      dt(i-1)=8;
		      b(i-1)=w(i-1)*36+b(i-1)+1;  /*  set to bit offset from beginning of record */
		     end;
	         end;
	else if datatype(i) = "dec"
	    then do;		/*  data type = decimal  */
		if mod(bit_offset(i),9) ^= 0 
		   then do;
			call bit_offset_warning("fixed decimal", 9);
		        end;
		dt(i-1) = 9;
		min_rec_length=max(min_rec_length,4*w(i-1)+leng(i-1)+1+divide(b(i-1),9,24));
		    /*  set b(i-1) to byte offset from beginning of the record */
		b(i-1)=w(i-1)*4 + divide(b(i-1),9,24)+1;
	         end;
	else if datatype(i) = "fldec"
	    then do;		/*  data tupe = floating decimal  */
		dt(i-1)=10;
		min_rec_length=max(min_rec_length,4*w(i-1)+leng(i-1)+2+divide(b(i-1),9,24));
		if mod(bit_offset(i),9) ^= 0 
		   then do;
			call bit_offset_warning("float decimal", 9);
		        end;
		    /*  set b(i-1) to first byte within record upon which to begin sort  */
		b(i-1)=w(i-1)*4 + divide(b(i-1),9,24)+1;
	         end;
end;	/*   end do loop   */
     if min_rec_length > max_rec_length then do;
     	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Record length required to contain keys is ^d.  Must be < ^d.",
		     whoami, min_rec_length, max_rec_length);
	code = 1;
	end;
	    no_of_keys = keys.number-1;  /*  set for comparison routine  */
	return;


bit_offset_warning:  proc(datatype, integer);
dcl (datatype char(*),
     integer fixed bin ) parameter;

     if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
		"^a:  Warning:  Key ^d is ""^a"" but bit offset is not a multiple of ^d.",
		whoami, i, datatype, integer);
end bit_offset_warning;


end sort_build_keys;
