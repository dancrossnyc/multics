/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified on 02/17/82 by FCH, [1], version number printed */

sort_merge_command:  proc(input_file, output_file, sort_desc, temp_dir, user_out_sw_par, total_if_pns,
		     arg_err_sw, fatal_sw, no_args_sw, merge_order_par, string_size_par,
		     file_size_par, total_args, arg_list_ptr, perm_sd, temp_sd);

/*   PARAMETERS   */
dcl (input_file(*) char(*),		/*   Input file pathnames or attach descriptions  (Output).	   */
     output_file  char(*),		/*   Output file pathname or attach description  (Output).	   */
     sort_desc(1)  ptr,		/*   Pointer to Sort/Merge Description (source form)  (Output).	*/
     temp_dir  char(*),		/*   Pathname of directory for work files  (Output). 		*/
     user_out_sw_par  char(*),     	/*   Switchname for diagnostics and Sort/Merge Report  (Output).  	*/
     total_if_pns  fixed bin(35),	/*   Number of input files specified by user  (Output).	   */
     arg_err_sw bit(1),		/*   Error(s) detected in arguments  (Output).			*/
     fatal_sw  bit(1),		/*   Fatal error detected  (Output).				*/
     no_args_sw  bit(1),		/*   no arguments specified - user will be prompted  (Output).	*/
     merge_order_par  fixed bin(35),	/*   Merge order specified by user  (Output).			*/
     string_size_par  fixed bin(35),	/*   String size specified by user  (Output).			*/
     file_size_par  float bin(27),	/*   File size specified by user  (Output).			*/
     total_args  fixed bin(35),	/*   Number of arguments specified  (Input).			*/
     arg_list_ptr  ptr,		/*   Pointer to command's argument list - sort or merge  (Input).	*/
     perm_sd    ptr,		/*   Pointer to Sort/Merge Description if -sd pn specified  (Output)  */
     temp_sd    ptr ) parameter;	/*   Pointer to Sort/Merge Description when -ci specified  (Output)   */

/*   EXTERNAL ENTRIES    */
dcl  convert_status_code_  entry(fixed bin(35), char(8) aligned, char(100) aligned);
dcl  cu_$arg_ptr_rel entry(fixed bin, ptr, fixed bin, fixed bin(35), ptr);
dcl  cv_dec_check_ entry(char(*), fixed bin(35)) returns(fixed bin(35));
dcl  cv_float_  entry(char(*), fixed bin(35), float bin(27));
dcl  expand_path_ entry(ptr, fixed bin, ptr, ptr, fixed bin(35));
dcl  get_pdir_ entry returns(char(168) aligned);
dcl  hcs_$initiate entry(char(*) aligned, char(*) aligned, char(*),
		     fixed bin(1), fixed bin(2), ptr, fixed bin(35)),
     hcs_$make_seg entry(char(*) aligned, char(*) aligned, char(*), fixed bin(5), ptr, fixed bin(35)),
     hcs_$truncate_seg entry(ptr, fixed bin(24), fixed bin(35)),
     hcs_$set_bc_seg entry(ptr, fixed bin(24), fixed bin(35));
dcl  ioa_ entry options(variable),
     ioa_$nnl  entry options(variable),
     ioa_$ioa_switch entry options(variable);
dcl  iox_$get_line  entry(ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));

/*   EXTERNAL STATIC     */

%include sort_ext;
dcl (iox_$user_output,
     iox_$user_input,
     iox_$user_io)  ptr external static;
dcl (error_table_$bad_arg,
     error_table_$bigarg) fixed bin(35) external;

/*   INTERNAL STATIC (constants only)     */
dcl  nl char(1) init("
") internal static;
dcl (on init("1"b),
     off init("0"b) ) bit(1) internal static;

/*   AUTOMATIC AND BASED     */
dcl  shortinfo char(8) aligned,
     longinfo char(100) aligned;

dcl  none fixed bin(1);

dcl (if_arg_count,
     of_arg_count,
     td_arg_count,
     file_size_arg_count,
     ci_fi_arg_count,
     time_arg_count,
     merge_order_arg_count,
     string_size_arg_count,
     debug_arg_count,
     bf_lg_arg_count) fixed bin(17);

dcl (total_of_pns,
     total_td_pns,
     total_file_size_args,
     total_fi_pns,
     total_merge_order_args,
     total_string_size_args) fixed bin(17);
dcl  temp_if_pns fixed bin(17);

dcl  last_ci_fi char(16),
     last_bf_lg char(8),
     file_size char(16),
     merge_order char(8),
     string_size char(16);

dcl  arg_num      fixed bin,
     arg_ptr      ptr,
     arg_len      fixed bin,
     cu_code      fixed bin(35);
dcl  argument char(arg_len) based(arg_ptr);

dcl  pn_or_attach char(256);
dcl  file_spec_keyword  char(32);

dcl (expand_code,
     cv_err) fixed bin(35);

dcl  hcs_code fixed bin(35);
dcl  iox_code fixed bin(35);
dcl  process_dir char(168) aligned;


/*   Start.   */

/*   Set error switches off.   */
     no_args_sw, fatal_sw, arg_err_sw = off;

/*   Obtain all arguments of the command.   */
     call get_all_args;

/*   Process the arguments in appropriate sequence.
     Report errors including inconsistencies between arguments.
     Do not report on errors in Sort/Merge Description;
     that is deferred until sort_(merge_) or sort_(merge_)$initiate.
     Prepare parameters for call to sort_(merge_).     */

     call process_ci_fi_arg;
     call process_if_arg;
     call process_of_arg;
     call process_td_arg;
     call process_file_size_arg;
     call process_bf_lg_arg;
     call process_time_arg;
     call process_merge_order_arg;
     call process_string_size_arg;
     call process_debug_arg;

exit:
     return;		/*   To caller (sort or merge).   */


get_all_args: proc;		/*   Get all arguments of command.   */

/*   Set all argument counters = 0.   */
     if_arg_count,
     of_arg_count,
     td_arg_count,		/*   Not used by merge.   */
     file_size_arg_count,
     ci_fi_arg_count,
     bf_lg_arg_count,
     time_arg_count,
     merge_order_arg_count,		/*   Not used by merge.   */
     string_size_arg_count,		/*   Not used by merge.   */
     debug_arg_count = 0;
/*   Set all path name counters = 0.   */
     total_if_pns, temp_if_pns,
     total_of_pns,
     total_td_pns,		/*   Not used by merge.   */
     total_fi_pns = 0;
     if total_args = 0 then do;	/*   Prompt user.   */
/*1*/	call ioa_("^a:  Version 2.0",whoami);
	call ioa_("^a:  Command and basic arguments are:",
	     whoami);
	call ioa_("^2x^a  {-if pn|-ids ""att_desc""} {-of pn|-ods ""att_desc""}  {-ci|-^ad ^a_desc}",
	     whoami, substr(whoami, 1, 1), whoami);
	no_args_sw = on;
	go to exit;
	end;
     arg_num = 0;

/*   Get first argument -- Sort/Merge Description:
     call get_one_arg(none);
     if none = 1 then do;
	   Error:  Sort/Merge Description required, but will be detected later by process_ci_fi_arg.     
	return;
	end;
     call get_sd_arg;		*/
get_next_arg:  call get_one_arg(none);		/*   Get next argument of command.   */
     if none = 1 then return;
     if argument = "-input_file" | argument = "-if"
      | argument = "-input_description" | argument = "-ids" then do;
	call get_if_arg;
	go to get_next_arg;
	end;
     else if argument = "-output_file" | argument = "-of"
           | argument = "-output_description" | argument = "-ods" then do;
	call get_of_arg;
	go to get_next_arg;
	end;
     else if argument = "-temp_dir" | argument = "-td" | argument = "-temp_directory" then
	do;	/*   Will be rejected later for merge.   */
	call get_td_arg;
	go to get_next_arg;
	end;
     else if argument = "-ci" | argument = "-console_input" then
	do;		/*   Allow -ci argument to appear anywhere in command line.   */
	call get_ci_arg;
	go to get_next_arg;
	end;
     else if argument = "-sd" | argument = "-md"
	| argument = "-sort_desc" | argument = "-merge_desc"
	| argument = "-sort_description" | argument = "-merge_description" then do;
	call get_sd_arg;
	go to get_next_arg;
	end;
     else if argument = "-file_size" then do;
	call get_file_size_arg;
	go to get_next_arg;
	end;
     else if argument = "-brief" | argument = "-bf" then
	do;
	call get_bf_lg_arg;
	go to get_next_arg;
	end;
     else if argument = "-time" | argument = "-tm" then do;
	call get_time_arg;
	go to get_next_arg;
	end;
     else if argument = "-merge_order" then do;	/*   Will be rejected later for merge.   */
	call get_merge_order_arg;
	go to get_next_arg;
	end;
     else if argument = "-string_size" then do;	/*   Will be rejected later for merge.   */
	call get_string_size_arg;
	go to get_next_arg;
	end;
     else if argument = "-debug" | argument = "-db" then do;
	call get_debug_arg;
	go to get_next_arg;
	end;
     else do;
	/*   Error:  unrecognized control argument.   */   
	call convert_status_code_(error_table_$bad_arg, shortinfo, longinfo);
	call ioa_$ioa_switch(iox_$user_output, "^a:  ^a  Argument ""^a"" is ignored.", whoami, longinfo, argument);
	arg_err_sw = on;
	go to get_next_arg;
	end;
end get_all_args;

get_one_arg:  proc(none);		/*   Get one argument of command:   */
dcl  none fixed bin(1);     /* value 1 = no next argument     */

loop:  arg_num = arg_num + 1;
     if arg_num > total_args then
	do;
	none = 1;
	return;
	end;
     call cu_$arg_ptr_rel(arg_num, arg_ptr, arg_len, cu_code, arg_list_ptr);
     if cu_code ^= 0 then
	do;
	call convert_status_code_(cu_code, shortinfo, longinfo);
	call ioa_$ioa_switch(iox_$user_output, "^a:  ^a  Argument ^d", whoami, longinfo, arg_num);
	fatal_sw = on;
	return;
	end;
     if arg_len = 0 | argument = "" then
	do;
	arg_err_sw = on;
	call ioa_$ioa_switch(iox_$user_output, "^a:  Argument """" ignored.", whoami);
	go to loop;
	end;
     if arg_len > 256 then
	do;
	arg_len = 256;
	arg_err_sw = on;
	call convert_status_code_(error_table_$bigarg, shortinfo, longinfo);
	call ioa_$ioa_switch(iox_$user_output, "^a:  ^a  Argument ^a truncated.", whoami, longinfo, argument);
	end;
     none = 0;
end get_one_arg;


get_if_arg: proc;		/*   Get argument following input file specification keyword argument.   */
     if_arg_count = if_arg_count + 1;
     file_spec_keyword = argument;
     call get_pn_or_attach;
     if pn_or_attach = "" then return;	/*   No pathname or attach   */
     temp_if_pns = temp_if_pns + 1;
     if total_if_pns >= input_file_max then do;
	arg_err_sw = on;
	call ioa_$ioa_switch(iox_$user_output,
			"^a:  Too many input files specified.  Specification ^a ^a for input file ^d ignored.",
		whoami, file_spec_keyword, pn_or_attach, temp_if_pns);
	return;
	end;
     total_if_pns = total_if_pns + 1;
     input_file(total_if_pns) = before(file_spec_keyword, " ")||" "||pn_or_attach;
end get_if_arg;


get_of_arg: proc;		/*   Get word following input file specification keyword.   */
     of_arg_count = of_arg_count + 1;
     total_of_pns = 0;
     output_file = "";
     file_spec_keyword = argument;
     call get_pn_or_attach;
     if pn_or_attach = "" then return;	/*   No pathname or attach.   */
     total_of_pns = total_of_pns + 1;
     output_file = before(file_spec_keyword, " ")||" "||pn_or_attach;
end get_of_arg;


get_pn_or_attach:  proc;
     pn_or_attach = "";
     call get_one_arg(none);
     if none = 1 then do;	/*   No argument follows.   */
	call no_pns_err(file_spec_keyword, " or attach description");
	end;
     else if substr(argument, 1, 1) ^= "-" then do;	/*   Pathname or attach description.   */
	pn_or_attach = argument;
	end;
     else if argument = "-rp" | argument = "-replace" then do;
	pn_or_attach = argument;
	end;
     else do;	/*   Next control argument found.   */
	arg_num = arg_num - 1;
	call no_pns_err(file_spec_keyword, " or attach description");
	end;
end get_pn_or_attach;


get_td_arg: proc;		/*   Get path name or -pd or -wd following -td argument.   */
     td_arg_count = td_arg_count + 1;
     total_td_pns = 0;
     temp_dir = "-pd";
     call get_one_arg(none);
     if none = 1 then return;
     if argument = "-process_directory" | argument = "-working_directory"
		| argument = "-process_dir" | argument = "-working_dir"
		| argument = "-pd" | argument = "-wd"
		| substr(argument, 1, 1) ^= "-" then do;
	total_td_pns = total_td_pns + 1;
	temp_dir = argument;
	return;
	end;
     else
     /*   argument begins with "-" (but is not "-pd" or "-wd").   */
     arg_num = arg_num - 1;		/*   Will be treated as next control argument.   */
     return;
end get_td_arg;


get_ci_arg: proc;
     ci_fi_arg_count = ci_fi_arg_count + 1;
     last_ci_fi = "-console_input";
end get_ci_arg;


get_sd_arg:  proc;		/*   Get Sort/Merge Description argument:   */
     ci_fi_arg_count = ci_fi_arg_count + 1;
     total_fi_pns = 0;
     call get_one_arg(none);
     if none = 1 then return;
     if substr(argument, 1, 1) = "-" then do;	/*   Found next control argument.    */
	arg_num = arg_num - 1;
	return;
	end;
     else do;
	total_fi_pns = total_fi_pns + 1;
	sort_desc_pn = argument;
	last_ci_fi = "-fi";		/*   Indicates that S.D. argument is a path name (file input).   */
	end;
end get_sd_arg;


get_file_size_arg:  proc;
     file_size_arg_count = file_size_arg_count + 1;
     total_file_size_args = 0;
     call get_one_arg(none);
     if none = 1 then return;
     if substr(argument, 1, 1) = "-" then do;
	arg_num = arg_num - 1;
	return;
	end;
     else do;
	total_file_size_args = total_file_size_args + 1;
	if arg_len > 16 then do;
	     arg_err_sw = on;
	     call ioa_$ioa_switch(iox_$user_output,
			"^a:  -file_size argument too long.  Must be <_ 16 characters.",
			whoami);
	     end;
	file_size = argument;
	end;
end get_file_size_arg;


get_bf_lg_arg:  proc;		/*   Count report arguments; save last value:   */
     bf_lg_arg_count = bf_lg_arg_count + 1;
     last_bf_lg = argument;
end get_bf_lg_arg;


get_time_arg: proc;
     time_arg_count = time_arg_count + 1;
end get_time_arg;


get_merge_order_arg: proc;
     merge_order_arg_count = merge_order_arg_count + 1;
     total_merge_order_args = 0;
     call get_one_arg(none);
     if none = 1 then return;
     if substr(argument, 1, 1) = "-" then do;
	arg_num = arg_num - 1;
	return;
	end;
     else do;
	total_merge_order_args = total_merge_order_args + 1;
	merge_order = argument;
	end;
end get_merge_order_arg;


get_string_size_arg: proc;
     string_size_arg_count = string_size_arg_count + 1;
     total_string_size_args = 0;
     call get_one_arg(none);
     if none = 1 then return;
     if substr(argument, 1, 1) = "-" then do;
   	arg_num = arg_num - 1;
	return;
	end;
     else do;
	total_string_size_args = total_string_size_args + 1;
	string_size = argument;
	end;
end get_string_size_arg;


get_debug_arg:  proc;
     debug_arg_count = debug_arg_count + 1;
end get_debug_arg;


process_if_arg: proc;
/*   Process input file specification.   */
     if if_arg_count <= 0 then		/*   No -if/-ids argument.   */
	do;
	input_file(1) = "";		/*   Spaces will indicate no input files when sort_ is called.   */
	return;
	end;
end process_if_arg;


process_of_arg:  proc;
/*   Process output file specification.   */
     if of_arg_count <= 0 then		/*   No -of/-ods argument.   */
	do;
	output_file = "";
	return;
	end;
     if of_arg_count > 1 then		/*   More than one -of/-ods argument.   */
	do;
	call arg_count_err("-output_file", of_arg_count);
	end;
end process_of_arg;


process_td_arg: proc;
/*   Process -temp_dir argument.   */
     if td_arg_count <= 0 then
	do;
	temp_dir = "-pd";		/*   default   */
	return;
	end;
     if td_arg_count > 1 then		/*   More than one -td argument.   */
	do;
	call arg_count_err("-temp_dir", td_arg_count);
	end;
     if total_td_pns <= 0 then		/*   No path name (or -pd or -wd).   */
	do;
	call no_pns_err("-temp_dir", "");
	end;
     if whoami = "merge" then call not_permitted("-temp_dir");
end process_td_arg;


process_ci_fi_arg: proc;
/*   Process console input - Sort/Merge Description path name arguments.
     Get Sort/Merge Description.    */
     if ci_fi_arg_count <= 0 then		/*   No S.D. argument.   */
	do;
	call ioa_$ioa_switch(iox_$user_output,
	     "^a:  ^a Description not specified.  Please specify either ""-ci"" or ""-^ad pathname"".",
	     whoami, caps(whoami), substr(whoami, 1, 1));
	fatal_sw = on;
	return;     /*   Avoid getting Sort/Merge Description.     */
	end;
     if ci_fi_arg_count > 1 then		/*   More than one S.D. argument.   */
	do;
	call ioa_$ioa_switch(iox_$user_output,
	     "^a:  ^a Description given ^d times.",
	     whoami, caps(whoami), ci_fi_arg_count);
	arg_err_sw = on;
	end;
     call get_sort_desc;		/*   Get access to S.D.   */
     return;
end process_ci_fi_arg;


caps:  proc(whoami) returns(char(5));
dcl  whoami char(*) parameter;
     if substr(whoami, 1, 4) = "sort" then return("Sort");
     else return("Merge");
end caps;


get_sort_desc:  proc;
/*   Get access to Sort/Merge Description; set "sort_desc" = pointer to segment.   */
dcl  dirname char(168) aligned,
     ename char(32) aligned;
dcl  line_buff char(200) aligned,
     max_line_length fixed bin(21) init(200),
     /*   How long should the above be ??   */
     read_length fixed bin(21),
     seg_length fixed bin(24),
     string char(262144) based(sort_desc(1));

     if last_ci_fi = "-fi" then
/*   File input:  Initiate segment.   */
	do;
	call expand_path_(addr(sort_desc_pn), length(sort_desc_pn), addr(dirname), addr(ename), expand_code);
	if expand_code ^= 0 then
	     do;
	     call sd_err(expand_code);
	     return;
	     end;
	call hcs_$initiate(dirname, ename, "", 0, 0, perm_sd, hcs_code);
	/*   ??  Test for error_table_$segknown  ??   */
	if perm_sd = null() then
	     do;
	     call sd_err(hcs_code);
	     return;
	     end;
	sort_desc(1) = perm_sd;
	return;
	end;   /*   of file input.   */
     else
/*   Console input:  Read user_input and store in temporary segment (whose name ends in ".sort_par_").   */
	do;
	process_dir = get_pdir_();
	/*   Set "sort_desc".   */
	sort_desc_pn = "[pd]>"||unique_prefix||"sort_par_";
	call hcs_$make_seg(process_dir, unique_prefix||"sort_par_", "", 8+2 /*  rw  */ , temp_sd, hcs_code);
	/*   ??  check error code  ??   */
	if temp_sd = null() then
	     do;
	     call unable_err(hcs_code, "create");
	     return;
	     end;
	sort_desc(1) = temp_sd;
	call ioa_$ioa_switch(iox_$user_io, "Input:");
	seg_length = 0;
get_line:
	call iox_$get_line(iox_$user_input, addr(line_buff), max_line_length, read_length, iox_code);
	if iox_code ^= 0 then do;
	     fatal_sw = on;
	     call convert_status_code_(iox_code, shortinfo, longinfo);
	     call ioa_$ioa_switch(iox_$user_output,
		"^a:  ^a  ^a Description  from user_input.",
		whoami, longinfo, caps(whoami));
	     return;
	     end;
	if substr(line_buff, 1, 2) = "."||nl then go to end_line;
	substr(string, seg_length + 1, read_length) = substr(line_buff, 1, read_length);
	seg_length = seg_length + read_length;
	go to get_line;
end_line:
	call hcs_$truncate_seg(sort_desc(1), divide(seg_length+3, 4, 24, 0), hcs_code);
	if hcs_code ^= 0 then do;
	     call unable_err(hcs_code, "truncate");
	     end;
	call hcs_$set_bc_seg(sort_desc(1), seg_length*9, hcs_code);
	if hcs_code ^= 0 then
	     do;
	     call unable_err(hcs_code, "set bit count for");
	     end;
	return;
	end; 		/*   of console input.   */
end get_sort_desc;


process_file_size_arg:  proc;
     file_size_par = 0;
     if file_size_arg_count <= 0 then return;
     if file_size_arg_count > 1 then call arg_count_err("-file_size", file_size_arg_count);
     if total_file_size_args <= 0 then call no_value_err("-file_size");
     else do;
	call cv_float_(file_size, cv_err, file_size_par);
	if cv_err ^= 0 then do;
	     arg_err_sw = on;
	     call ioa_$ioa_switch(iox_$user_output,
		     "^a:  -file_size argument has invalid value ""^a"".  Must be a decimal number.",
		     whoami, file_size);
	     end;
	end;
     if whoami = "merge" then call not_permitted("-file_size");
end process_file_size_arg;


process_bf_lg_arg:  proc;
/*   Process -brief report argument:
     prepare report parameter.   */
     user_out_sw_par = "";		/*   Report always produced   */
     user_out_sw = "user_output";	/*   on user_output.   */
     if bf_lg_arg_count <= 0 then return;	/*   No report argument.   */
     else call ioa_$ioa_switch(iox_$user_output, "^a:  Warning:  -brief argument no longer supported.", whoami);
end process_bf_lg_arg;


process_time_arg:  proc;
/*   Process -time argument:  set time_sw.   */
     if time_arg_count <= 0 then do;
	time_sw = off;
	end;
     else if time_arg_count >= 1 then do;   /*  Ignore multiple occurrences   */
	time_sw = on;
	end;
end process_time_arg;


process_merge_order_arg:  proc;
/*   Process -merge_order argument:  check integer > 0,
     prepare merge_order_parameter.   	*/
     merge_order_par = 0;
     if merge_order_arg_count <= 0 then return;		/*   Merge order not specified.   */
     if merge_order_arg_count > 1 then do;   	/*   Merge order specified more than once.   */
	call arg_count_err("-merge_order", merge_order_arg_count);
	end;
     if total_merge_order_args <= 0 then
	call no_value_err("-merge_order");
     else do;
	merge_order_par = cv_dec_check_(merge_order, cv_err);
	if cv_err ^= 0 | merge_order_par <= 0 then
	     call value_err("-merge_order", merge_order);
	end;
     if whoami = "merge" then call not_permitted("-merge_order");
end process_merge_order_arg;


process_string_size_arg:  proc;
/*   Process -string_size argument:  check integer > 0,
     prepare string_size parameter.   	*/
     string_size_par = 0;
     if string_size_arg_count <= 0 then return;
     if string_size_arg_count > 1 then 	/*   String size specified more than once   */
	call arg_count_err("-string_size", string_size_arg_count);
     if total_string_size_args <= 0 then
	call no_value_err("-string_size");
     else do;
  	string_size_par = cv_dec_check_(string_size, cv_err);
	if cv_err ^= 0 | string_size_par <= 0 then
	     call value_err("-string_size", string_size);
	end;
     if whoami = "merge" then call not_permitted("-string_size");
end process_string_size_arg;


process_debug_arg:  proc;
/*   Process -debug argument:  set debug_sw.   */
     if debug_arg_count <= 0 then debug_sw = off;
     else if debug_arg_count >= 1 then 		/*   ignore multiple occurrences   */
	debug_sw = on;
end process_debug_arg;


not_permitted:  proc(name);
dcl  name char(*) parameter;
	arg_err_sw = on;
	call ioa_$ioa_switch(iox_$user_output,
	     "^a:  ^a argument not permitted.",
	     whoami, name);
end not_permitted;


arg_count_err:  proc(arg1, count);
/*   Multiple specification of an argument.  */
dcl  arg1 char(*),
     count fixed bin(17);
     call ioa_$ioa_switch(iox_$user_output, "^a:  ^a argument given ^d times.", whoami, arg1, count);
     arg_err_sw = on;
end arg_count_err;

sd_err:  proc(code);
dcl  code fixed bin(35) parameter;
     fatal_sw = on;
     call convert_status_code_(code, shortinfo, longinfo);
     call ioa_$ioa_switch(iox_$user_output, "^a:  ^a  ^a Description pathname ^a",
		whoami, longinfo, caps(whoami), sort_desc_pn);
end sd_err;

unable_err:  proc(code, action);
dcl (code fixed bin(35),
     action char(*) ) parameter;
     fatal_sw = on;
     call convert_status_code_(code, shortinfo, longinfo);
     call ioa_$ioa_switch(iox_$user_output, "^a:  ^a  Unable to ^a temporary segment [pd]>^asort_par_",
		whoami, longinfo, action, unique_prefix);
end unable_err;


no_pns_err:  proc(name, attach);
/*   Argument given without pathname or attach.   */
dcl (name char(*),
     attach char(*) ) parameter;
     arg_err_sw = on;
     call ioa_$ioa_switch(iox_$user_output, "^a:  ^a argument present but no pathname^a given.",
		whoami, name, attach);
end no_pns_err;


no_value_err:  proc(name);
dcl  name char(*);
     arg_err_sw = on;
     call ioa_$ioa_switch(iox_$user_output, "^a:  ^a argument present but no value given.", whoami, name);
end no_value_err;


value_err:  proc(name, value);
dcl (name,
     value) char(*);
     arg_err_sw = on;
     call ioa_$ioa_switch(iox_$user_output, "^a:  ^a argument has invalid value ^a.  Must be a positive integer.",
		whoami, name, value);
end value_err;



end sort_merge_command;
