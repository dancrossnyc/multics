/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */

/* format: style1,^inddcls,insnl,delnl,indend,indnoniterend,indbeginend,indthenbeginend,tree,^case */

/****^  HISTORY COMMENTS:
  1) change(88-08-11,Beattie), approve(88-08-01,MCR7948),
     audit(88-10-11,Farley), install(88-10-14,MR12.2-1165):
     Created to support IMFT access checking.
  2) change(88-10-26,Beattie), approve(88-08-01,PBF7948),
     audit(88-10-27,Farley), install(88-10-27,MR12.2-1195):
     Changed check_object_acl entry to be able to chase nonstar links.
                                                   END HISTORY COMMENTS */

imft_util_:
     procedure;

	return;					/* not an entry point */

check_object_acl:
     entry (p_check_acl_ptr, p_code);

	ME = "imft_util_$check_object_acl";
	checking_subtree = "0"b;

	afs_ptr = null ();
	star_optionsP = null ();
	on cleanup call CLEANUP ();

	call init_check_acl ();

	star_paths.value (1) = pathname_ ((imft_check_acl.dirname), (imft_check_acl.ename));
	star_options.entry_type.links = ENTRY_RETURN | ENTRY_CHASE_NONSTAR_LINKS;
	star_options.entry_type.dirs = ENTRY_RETURN | ENTRY_DONT_LIST_SUBENTRIES;
	go to COMMON;

check_subtree_acl:
     entry (p_check_acl_ptr, p_code);

	ME = "imft_util_$check_subtree_acl";
	checking_subtree = "1"b;

	afs_ptr = null ();
	star_optionsP = null ();
	on cleanup call CLEANUP ();

	call init_check_acl ();

/**** Set up file to collect error messages */

	call expand_pathname_ ((imft_check_acl.accessfile_pathname), accessfile_dname, accessfile_ename, ignore_code);
	call hcs_$truncate_file (accessfile_dname, accessfile_ename, 0, ignore_code);
	call hcs_$set_bc (accessfile_dname, accessfile_ename, 0, ignore_code);
	call ioa_$rsnnl ("vfile_ ^a -extend -ssf", attach_desc, message_len, accessfile_pathname);
	call iox_$find_iocb ("accessfile_switch", afs_ptr, code);
	if code ^= 0
	then do;
		call convert_status_code_ (code, shortinfo, longinfo);
		call ioa_$rsnnl ("Tried to find an IOCB for accessfile switch.^/(^a)",
		     imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len, longinfo);
		p_code = code;
		go to BAIL_OUT;
		end;

	call iox_$attach_ptr (afs_ptr, attach_desc, (null ()), code);
	if code ^= 0
	then do;
		call convert_status_code_ (code, shortinfo, longinfo);
		call ioa_$rsnnl ("Tried to attach vfile_ to ^a^/(^a)",
		     imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len, accessfile_pathname,
		     longinfo);
		p_code = code;
		go to BAIL_OUT;
		end;

	call iox_$open (afs_ptr, Stream_output, "0"b, code);
	if code ^= 0
	then do;
		call convert_status_code_ (code, shortinfo, longinfo);
		call ioa_$rsnnl ("Tried to open accessfile_switch to ^a^/(^a)",
		     imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len, accessfile_pathname,
		     longinfo);
		p_code = code;
		go to BAIL_OUT;
		end;

	star_paths.value (1) = pathname_ ((imft_check_acl.dirname), rtrim (imft_check_acl.ename) || ">**");
	star_options.entry_type.links = ENTRY_DONT_RETURN;
	star_options.entry_type.dirs = ENTRY_RETURN | ENTRY_LIST_SUBENTRIES;

COMMON:
	call fs_star_$select (star_optionsP, star_dataP, code);
	if code ^= 0
	then do;
		imft_check_acl.allow_transfer = "0"b;
		call convert_status_code_ (code, shortinfo, longinfo);
		call ioa_$rsnnl ("^a: Error while checking access to objects in subtree.^/(^a)",
		     imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len, ME, longinfo);
		p_code = code;
		go to BAIL_OUT;
		end;

BAIL_OUT:
	call CLEANUP ();

RETURN:
	return;
%page;
/****
     This is called by fs_star_ for each object it was directed to find.
*/

check_fs_entry:
     proc (P_star_data_ptr, Pdir, Pent, Pcomp, Paction);

dcl     P_star_data_ptr	 pointer;
dcl     Pdir		 char (*);
dcl     Pent		 (*) char (32) parm;
dcl     Pcomp		 char (*) parm;
dcl     Paction		 fixed bin parm;

dcl     access_error	 bit (1);
dcl     code		 fixed bin (35);
dcl     local_dirname	 char (168);
dcl     local_ename		 char (32);
dcl     local_pathname	 char (168);
dcl     my_access_ok	 bit (1);
dcl     user_access_ok	 bit (1);

	star_dataP = P_star_data_ptr;
	local_dirname = Pdir;
	local_ename = Pent (1);
	local_pathname = pathname_ (local_dirname, local_ename);
	Paction = HANDLER_OK;			/* unless a problem is found */

	general_acl.status_code = 0;

	if ^checking_subtree			/* let caller know what type object this is */
	then imft_check_acl.type = star_data.type;	/* unless checking a subtree */
%page;
/**** Check ring brackets. */

	if star_data.type = ENTRY_TYPE_DIRECTORY | star_data.type = ENTRY_TYPE_DM_FILE | star_data.type = ENTRY_TYPE_MSF
	then do;
		call hcs_$get_dir_ring_brackets (local_dirname, local_ename, dir_ring_brackets, code);
		if code = 0
		then do;
			if ^checking_subtree
			then imft_check_acl.object_ring = dir_ring_brackets (1);

			if imft_check_acl.effective_ring > dir_ring_brackets (1)
			then code = error_table_$lower_ring;
			end;
		end;				/* if star_data.type in set of directories */

	else do;
		call hcs_$get_ring_brackets (local_dirname, local_ename, seg_ring_brackets, code);
		if code = 0
		then do;
			if ^checking_subtree
			then imft_check_acl.object_ring = seg_ring_brackets (1);

			if imft_check_acl.effective_ring > seg_ring_brackets (1)
			then code = error_table_$lower_ring;
			end;
		end;				/* if star_data.type not in set of directories */

	if code ^= 0
	then do;
		general_acl (imft_check_acl.bad_acl_idx).status_code = code;
		call set_error_message ();
		return;
		end;
%page;
/**** Check ACL of object. */

	if star_data.type = ENTRY_TYPE_DIRECTORY
	then do;
		access_str = DIR_ACCESS_MODE_NAMES (bin (imft_check_acl.dir_access));
		test_access = imft_check_acl.dir_access;
		end;
	else do;
		access_str = SEG_ACCESS_MODE_NAMES (bin (imft_check_acl.seg_access));
		test_access = imft_check_acl.seg_access;
		end;

	call fs_util_$list_acl (local_dirname, local_ename, GENERAL_ACL_VERSION_1, null (), imft_check_acl.gen_acl_ptr,
	     code);
	if code ^= 0
	then do;
		imft_check_acl.error_code = code;
		call set_error_message ();
		return;
		end;

	access_error = "0"b;
	do acl_idx = 1 to hbound (general_acl.mode, 1);
	     code = 0;
	     if general_acl (acl_idx).status_code ^= 0	/* Person.Project is not present */
	     then code = general_acl (acl_idx).status_code;

	     else if (general_acl (acl_idx).mode & test_access) ^= test_access
						/* explicitly denied access */
		then general_acl (acl_idx).status_code, code = error_table_$moderr;
	     imft_check_acl.bad_acl_idx = acl_idx;	/* record current pass, it may be last one */
	     if code ^= 0
	     then call set_error_message ();
	     end;					/* loop on acl_idx */

	if access_error
	then return;
%page;
/**** Check AIM of object. */

	if imft_check_acl.check_aim
	then do;

		call hcs_$get_access_class (local_dirname, local_ename, local_obj_access_class, code);
		if code ^= 0
		then do;
			call convert_status_code_ (code, shortinfo, longinfo);
			call ioa_$rsnnl (
			     "^[^/^]Access error: ^a^/Attempting to determine access class of^[^/^2x^a^; object.^]",
			     imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len,
			     checking_subtree, longinfo, checking_subtree, local_pathname);
			call process_error ();
			end;

		my_access_ok = aim_check_$greater_or_equal (imft_check_acl.sys_auth_ceiling, local_obj_access_class);
		if my_access_ok
		then my_access_ok =
			aim_check_$greater_or_equal (local_obj_access_class, imft_check_acl.sys_auth_floor);
		if ^my_access_ok
		then do;				/* access class exceeds maximum allowed for transfer */
			object_access_class_text, max_access_class_text = "";
			call convert_authorization_$to_string_short (local_obj_access_class,
			     object_access_class_text, ignore_code);
			call convert_authorization_$to_string_short (imft_check_acl.sys_auth_ceiling,
			     max_access_class_text, ignore_code);
			call convert_authorization_$to_string_short (imft_check_acl.sys_auth_floor,
			     min_access_class_text, ignore_code);
			imft_check_acl.bad_acl_idx = DRIVER_ACL_IDX;
			general_acl (DRIVER_ACL_IDX).status_code, code = error_table_$ai_restricted;
			call convert_status_code_ (code, shortinfo, longinfo);
			call ioa_$rsnnl (
			     "^[^/^]Access error: ^a^/^2xAccess class of object (^[^a^;^ssystem_low^]) is not within the range permitted for transfer to ^a (^[^a^;^ssystem_low^]:^[^a^;^ssystem_low^])^[^/^2x^a^;^s.^]",
			     imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len,
			     checking_subtree, longinfo, (object_access_class_text ^= ""), object_access_class_text,
			     imft_check_acl.foreign_sys_name, (min_access_class_text ^= ""), min_access_class_text,
			     (max_access_class_text ^= ""), max_access_class_text, checking_subtree, local_pathname)
			     ;
			call process_error ();
			end;
%page;
/**** Check AIM of user with object. */

		user_access_ok = aim_check_$greater_or_equal (imft_check_acl.user_auth, local_obj_access_class);
		if ^user_access_ok
		then do;				/* AIM strikes again */
			imft_check_acl.bad_acl_idx = USER_ACL_IDX;
			general_acl (USER_ACL_IDX).status_code, code = error_table_$ai_restricted;
			call convert_status_code_ (code, shortinfo, longinfo);
			user_authorization_text = "";
			call convert_authorization_$to_string_short (imft_check_acl.user_auth,
			     user_authorization_text, ignore_code);
			call ioa_$rsnnl (
			     "^[^/^]Access error: ^a^/^2x^a (at authorization ^[^a^;^ssystem_low^]) can not ^[examine^;read^]^[^/^2x^a^;^s object.^]",
			     imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len,
			     checking_subtree, longinfo, general_acl (USER_ACL_IDX).access_name,
			     (user_authorization_text ^= ""), user_authorization_text,
			     (star_data.type = ENTRY_TYPE_DIRECTORY), checking_subtree, local_pathname);
			call process_error ();
			end;

		if access_error
		then return;
		end;				/* if imft_check_acl.check_aim */

	imft_check_acl.objects_to_transfer = "1"b;
	return;
%page;
/****
     This is called by fs_star_ to indicate that some error occured in
     accessing the indicated object.  Any call to this routine is considered
     an access failure and the IMFT request is not to be processed.
*/

analyze_fs_error:
     entry (P_star_data_ptr, Pdir, Pent, Pcomp, Pcode, Pmessage, Paction);

dcl     Pcode		 fixed bin (35) parameter;
dcl     Pmessage		 char (*) parameter;

dcl     local_path		 char (168);

	Paction = ERROR_REJECT;
	code = Pcode;
	call convert_status_code_ (code, shortinfo, longinfo);

	if Pent (1) = ""
	then local_path = Pdir;
	else local_path = pathname_ (Pdir, Pent (1));

	call ioa_$rsnnl ("^a: Error from fs_star_ ERROR handler while processing:^/^2x^a^/^2x^a^[^/^2x(^a)^]",
	     imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len, ME, local_path, longinfo,
	     (Pmessage ^= ""), Pmessage);
	call process_error ();
	return;
%page;
/****
     Internal routine to set up an appropriate error message.
*/

set_error_message:
     proc;

	call convert_status_code_ (code, shortinfo, longinfo);
	bad_access_name = general_acl (imft_check_acl.bad_acl_idx).access_name;

	if substr (star_data.type, 1, 1) = "-"
	then object_type = substr (star_data.type, 2);
	else object_type = star_data.type;

	if code = error_table_$user_not_found
	then call ioa_$rsnnl (
		"^[^/^]Access error: ^a^/^2xAn explicit ACL entry for ^[Driver^;User^] (^a)^[^/^2xmust appear on ^a^; must appear on object.^]",
		imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len, checking_subtree, longinfo,
		(imft_check_acl.bad_acl_idx = DRIVER_ACL_IDX), bad_access_name, checking_subtree, local_pathname);
	else if code = error_table_$moderr
	     then call ioa_$rsnnl (
		     "^[^/^]Access error: ^a^/^2xAccess mode ^a must be given in ACL entry for ^[Driver^;User^] (^a)^[^/^2xwhich appears on ^a^; which appears on object.^]",
		     imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len, checking_subtree,
		     longinfo, access_str, (imft_check_acl.bad_acl_idx = DRIVER_ACL_IDX), bad_access_name,
		     checking_subtree, local_pathname);
	     else if code = error_table_$lower_ring
		then call ioa_$rsnnl (
			"^[^/^]Access error: ^a^/^2xThe ^a object cannot be transfered because ring brackets less than user execution ring.^[^/^2x^a^]",
			imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len, checking_subtree,
			longinfo, object_type, checking_subtree, local_pathname);
		else call ioa_$rsnnl (
			"^[^/^]Access error: ^a^/^2xDetermining driver (^a) and user (^a)^[^/^2xaccess to: ^a^; access to object.^]",
			imft_check_acl (imft_check_acl.bad_acl_idx).error_message, checking_subtree, message_len,
			longinfo, general_acl (DRIVER_ACL_IDX).access_name, general_acl (USER_ACL_IDX).access_name,
			checking_subtree, local_pathname);

	call process_error ();

     end set_error_message;
%page;
/**** Internal routine to process error code and set up for return. */

process_error:
     proc;

dcl     buffer		 character (512);
dcl     iox_code		 fixed bin (35);

	Paction = HANDLER_DONT_EXPAND;
	access_error = "1"b;

	if checking_subtree
	then do;					/* collect errors to send as mail */
		buffer = imft_check_acl (imft_check_acl.bad_acl_idx).error_message;
		call iox_$put_chars (afs_ptr, addr (buffer), message_len, iox_code);
		if iox_code ^= 0
		then do;
			call ioa_$rsnnl ("^a: Tried to write to ^a",
			     imft_check_acl (imft_check_acl.bad_acl_idx).error_message, message_len, ME,
			     imft_check_acl.accessfile_pathname);
			p_code = iox_code;
			go to BAIL_OUT;
			end;
		end;				/* if checking_subtree */

	if code ^= 0
	then if code = error_table_$lower_ring
	     then imft_check_acl.found_inner_ring_object = "1"b;
	     else imft_check_acl.allow_transfer = "0"b;

     end process_error;

     end check_fs_entry;
%page;
init_check_acl:
     proc;
	imft_check_acl_ptr = p_check_acl_ptr;

	if imft_check_acl.version ^= IMFT_CHECK_ACL_VERSION_1
	then do;					/* cannot use this structure for error messages, etc */
						/* caller will have to special case */
		p_code = error_table_$unimplemented_version;
		go to RETURN;
		end;

	code, p_code = 0;				/* for now */

	call fs_star_$init (null (), ME, "", STAR_OPTIONS_VERSION_1, star_optionsP, code);
	if code ^= 0
	then do;
		imft_check_acl.allow_transfer = "0"b;
		call convert_status_code_ (code, shortinfo, longinfo);
		call ioa_$rsnnl ("^a: Error from fs_star_$init: ^a", imft_check_acl.error_message, message_len, ME,
		     longinfo);
		p_code = code;
		go to BAIL_OUT;
		end;

	star_paths.version = STAR_PATHS_VERSION_1;
	star_paths.count = 1;
	star_options.entry_type.segs = ENTRY_RETURN;
	star_options.entry_type.archives = ENTRY_RETURN;
	star_options.entry_type.msfs = ENTRY_RETURN;
	star_options.entry_type.msf_comps = ENTRY_DONT_RETURN;
	star_options.entry_type.dm_files = ENTRY_RETURN | ENTRY_INASE;
	star_options.entry_type.extended_entries = ENTRY_RETURN | ENTRY_INASE;
	star_options.entry_type.arch_comps = ENTRY_DONT_RETURN;
	star_options.extended_entry_typesP = null ();
	star_options.match_namesP = null ();
	star_options.exclude_namesP = null ();
	star_options.sorting = SORT_OFF;
	star_options.handler = check_fs_entry;
	star_options.error = analyze_fs_error;
	star_options.handler_dataP = null ();
	imft_check_acl.allow_transfer = "1"b;
	imft_check_acl.objects_to_transfer = "0"b;
	imft_check_acl.found_inner_ring_object = "0"b;
	imft_check_acl.error_code = 0;
	imft_check_acl.error_message = "";
	acl_ptr = imft_check_acl.gen_acl_ptr;

     end init_check_acl;
%page;
CLEANUP:
     proc;

	if star_optionsP ^= null ()
	then do;
		call fs_star_$term (star_optionsP);
		star_optionsP = null ();
		end;

	if afs_ptr ^= null ()
	then do;
		call iox_$close (afs_ptr, ignore_code);
		call iox_$detach_iocb (afs_ptr, ignore_code);
		afs_ptr = null ();
		end;

     end CLEANUP;
%page;

dcl     p_check_acl_ptr	 pointer parameter;
dcl     p_code		 fixed bin (35) parameter;

dcl     ME		 char (32);
dcl     access_str		 character (4);
dcl     accessfile_dname	 char (168) static;
dcl     accessfile_ename	 char (32) static;
dcl     acl_idx		 fixed bin;
dcl     addr		 builtin;
dcl     attach_desc		 char (80);
dcl     afs_ptr		 pointer;
dcl     bad_access_name	 character (32);
dcl     bin		 builtin;
dcl     checking_subtree	 bit (1);
dcl     cleanup		 condition;
dcl     code		 fixed binary (35);
dcl     dir_ring_brackets	 (2) fixed bin (3);
dcl     hbound		 builtin;
dcl     ignore_code		 fixed bin (35);
dcl     local_obj_access_class bit (72) aligned;
dcl     longinfo		 char (100) aligned;
dcl     max_access_class_text	 character (256);
dcl     message_len		 fixed bin (21);
dcl     min_access_class_text	 character (256);
dcl     null		 builtin;
dcl     object_access_class_text
			 character (256);
dcl     object_type		 character (32);
dcl     rtrim		 builtin;
dcl     seg_ring_brackets	 (3) fixed bin (3);
dcl     shortinfo		 character (8) aligned;
dcl     substr		 builtin;
dcl     test_access		 bit (3);
dcl     user_authorization_text
			 character (256);

dcl     error_table_$ai_restricted
			 fixed bin (35) ext static;
dcl     error_table_$lower_ring
			 fixed bin (35) ext static;
dcl     error_table_$moderr	 fixed bin (35) ext static;
dcl     error_table_$unimplemented_version
			 fixed bin (35) ext static;
dcl     error_table_$user_not_found
			 fixed bin (35) ext static;

dcl     aim_check_$greater_or_equal
			 entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl     convert_authorization_$to_string_short
			 entry (bit (72) aligned, char (*), fixed bin (35));
dcl     convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
dcl     fs_star_$init	 entry (ptr, char (*), char (*), char (8), ptr, fixed bin (35));
dcl     fs_star_$select	 entry (ptr, ptr, fixed bin (35));
dcl     fs_star_$term	 entry (ptr);
dcl     fs_util_$list_acl	 entry (char (*), char (*), char (*), ptr, ptr, fixed bin (35));
dcl     hcs_$get_access_class	 entry (char (*), char (*), bit (72) aligned, fixed bin (35));
dcl     hcs_$get_dir_ring_brackets
			 entry (char (*), char (*), (2) fixed bin (3), fixed bin (35));
dcl     hcs_$get_ring_brackets entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
dcl     hcs_$set_bc		 entry (char (*), char (*), fixed bin (24), fixed bin (35));
dcl     hcs_$truncate_file	 entry (char (*), char (*), fixed bin (19), fixed bin (35));
dcl     ioa_$rsnnl		 entry () options (variable);
dcl     iox_$attach_ptr	 entry (ptr, char (*), ptr, fixed bin (35));
dcl     iox_$close		 entry (ptr, fixed bin (35));
dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
dcl     iox_$find_iocb	 entry (char (*), ptr, fixed bin (35));
dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
%page;
%include "_imft_check_acl";
%page;
%include access_mode_values;
%page;
%include acl_structures;
%page;
%include fs_star_;
%page;
%include iox_modes;
     end imft_util_;
