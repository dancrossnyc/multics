/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */


/* format: style4 */
print_imft_sites: pis: procedure;

/* This command prints the names of all foreign sites usable with the "-source" or "-destination"
   control argument to the enter_imft_request etc. commands. It does this by
   finding out the names of the request types, and assuming that destinations are
   represented by request type names of the form "To_SITE", and sources by names of
   the form "From_SITE".
*/

/* Written March 1983 by Robert Coren */


/****^  HISTORY COMMENTS:
  1) change(88-08-24,Brunelle), approve(88-08-24,MCR7911),
     audit(88-10-21,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to version 5 iod tables.  Changed column widths to that needed by
     the longest entry in column.  Added display of comment field.
                                                   END HISTORY COMMENTS */


/* External Procedures & Variables */

dcl  com_err_ entry () options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  error_table_$too_many_args fixed bin (35) ext static;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  imft_default_rqt_ entry () returns (char (*));
dcl  imft_data_$queue_dirname char (168) external static;
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  pathname_ entry (char (*), char (*)) returns (char (168));

dcl  cleanup condition;
dcl  (addr, after, length, max, null, ptr, rtrim, substr, unspec) builtin;

/* Internal Static */

dcl  IODT_NAME char (32) internal static options (constant) init ("iod_working_tables");
dcl  PRINT_IMFT_SITES char (16) internal static options (constant) init ("print_imft_sites");

/* Automatic */

dcl  access_id_offset fixed bin;			/* offset for ioa_ statement */
dcl  bc fixed bin (24);				/* initiate_file_ bitcount */
dcl  code fixed bin (35);				/* general error code */
dcl  default_site character (32);			/* temp storage for default site name */
dcl  dest_offset fixed bin;				/* offset for ioa_ statement */
dcl  dest_type bit (1);				/* ON if available as destination */
dcl  n_args fixed bin;				/* # of args called with */
dcl  n_sites fixed bin;				/* count of imft sites found in the tables */
dcl  qgt_size fixed bin;				/* # of entries in queue group tables */
dcl  qgtx fixed bin;				/* queue group table index */
dcl  site_name char (32);				/* temp name of the site */
dcl  sitex fixed bin;				/* temp site index */
dcl  source_type bit (1);				/* ON if available as source */

%page;
	call cu_$arg_count (n_args, code);
	if code ^= 0 then do;			/* something wrong -- we're not allowed to be an AF */
	     call com_err_ (code, PRINT_IMFT_SITES);
	     return;
	end;

	if n_args > 0 then do;			/* nor are we supposed to get arguments */
	     call com_err_ (error_table_$too_many_args, PRINT_IMFT_SITES, "^/Usage: print_imft_sites");
	     return;
	end;

	ithp = null ();
	on condition (cleanup) call cleanup_proc;

	call initiate_file_ (imft_data_$queue_dirname, IODT_NAME, R_ACCESS, ithp, bc, code);
	if ithp = null () then do;
	     call com_err_ (code, PRINT_IMFT_SITES, "Could not initiate ^a",
		pathname_ (imft_data_$queue_dirname, IODT_NAME));
	     return;
	end;

	if iod_tables_hdr.version ^= IODT_VERSION_5 then do;
	     call com_err_ (error_table_$unimplemented_version, PRINT_IMFT_SITES,
		"^a is not a proper iod_tables segment.", pathname_ (imft_data_$queue_dirname, IODT_NAME));
	     call cleanup_proc;
	     return;
	end;

	default_site = after (imft_default_rqt_ (), "To_");

	qgtp = ptr (ithp, iod_tables_hdr.q_group_tab_offset);
	qgt_size = q_group_tab.n_q_groups;
%page;
INNER_BLOCK:
	begin;					/* so as to get large enough automatic array for all possible request type names */

dcl  1 site_desc aligned,
       2 max_name_length fixed bin,
       2 max_driver_name_length fixed bin,
       2 max_comment_length fixed bin,
       2 ents (qgt_size) aligned,
         3 name character (32),
         3 driver_name character (32),			/* access name of I/O daemon driver */
         3 flags,
	 4 destination bit (1) unaligned,		/* ON => usable as a destination */
	 4 source bit (1) unaligned,			/* ON => usable as a source */
	 4 default bit (1) unaligned,			/* ON => this is default site */
	 4 pad bit (33) unaligned;

	     n_sites = 0;
	     unspec (site_desc) = "0"b;

	     do qgtx = 1 to qgt_size;
		qgtep = addr (q_group_tab.entries (qgtx));
		if qgte.generic_type = FT_GENERIC_TYPE then
		     if qgte.name ^= FT_GENERIC_TYPE then do; /* name used to indicate default is not interesting */
			if substr (qgte.name, 1, 3) = "To_" then do;
			     site_name = substr (qgte.name, 4);
			     source_type = "0"b;
			     dest_type = "1"b;
			end;

			else if substr (qgte.name, 1, 5) = "From_" then do;
			     site_name = substr (qgte.name, 6);
			     source_type = "1"b;
			     dest_type = "0"b;
			end;

			else do;
			     call com_err_ (0, PRINT_IMFT_SITES,
				"Request type ""^a"" has a generic type of ""^a"" but its name is not of standard form."
				, qgte.name, FT_GENERIC_TYPE);
			     go to NEXT_QGTE;	/* skip it */
			end;

/* now find out if we've already found a request type for this site */

			do sitex = 1 to n_sites while (site_desc (sitex).name ^= site_name);
			end;

			if sitex > n_sites then do;	/* didn't find it */
			     n_sites = sitex;
			     site_desc (sitex).name = site_name;
			     site_desc (sitex).driver_name = qgte.driver_id;
			     if length (rtrim (site_name)) > site_desc.max_name_length then
				site_desc.max_name_length = length (rtrim (site_name));
			     if length (rtrim (qgte.driver_id)) > site_desc.max_driver_name_length then
				site_desc.max_driver_name_length = length (rtrim (qgte.driver_id));
			end;

			if source_type then
			     site_desc (sitex).source = "1"b;

			if dest_type then do;
			     site_desc (sitex).destination = "1"b;
			     if site_name = default_site then
				site_desc (sitex).default = "1"b;
			end;
		     end;
NEXT_QGTE:
	     end;

	     if n_sites = 0 then
		call ioa_ ("No site names found in ^a.", pathname_ (imft_data_$queue_dirname, IODT_NAME));

	     else do;
		call sort_sites;

		access_id_offset = site_desc.max_name_length + 11 + 2;
		dest_offset = site_desc.max_name_length + 11 + 2 + max (9, site_desc.max_driver_name_length) + 2;

		call ioa_ ("Site name^vtAccess ID^vtDest   Source^/",
		     access_id_offset, dest_offset);

		do sitex = 1 to n_sites;
		     call ioa_ ("^a^[ (default)^;^]^vt^a^vt^[  X^;   ^]  ^[    X^;^]",
			site_desc (sitex).name,
			site_desc (sitex).default,
			access_id_offset,
			site_desc (sitex).driver_name,
			dest_offset,
			site_desc (sitex).destination, site_desc (sitex).source);
		end;

	     end;




sort_sites: procedure;

	/*** TO BE SUPPLIED ***/

     end sort_sites;

	end INNER_BLOCK;

	call cleanup_proc;
	return;
%page;
cleanup_proc: procedure;

	if ithp ^= null () then do;
	     call hcs_$terminate_noname (ithp, (0));
	     ithp = null ();
	     return;
	end;
     end cleanup_proc;
%page; %include "_imft_ft_request";
%page; %include access_mode_values;
%page; %include iod_tables_hdr;
%page; %include q_group_tab;
%page; %include queue_msg_hdr;

     end print_imft_sites;
