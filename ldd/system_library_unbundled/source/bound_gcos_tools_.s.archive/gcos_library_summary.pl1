/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_library_summary: gcls: summary: proc;

/* This procedure prints a summary of the contents of a GCOS tape-format
   system-loadable file, or a simulator format software library, or
   a gcos format system-loadable file.

   USAGE:  gcls pathname {-control_args}
           -control_args are: -brief | -preface | -no_catalog | -gcos

   If no control arguments are given, the file is assumed to begin with a
   catalog (containing the name and offset of each module in the file), and the
   catalog is printed. If -preface is given, a catalog is assumed to be present,
   and it is skipped over, and the preface record at the beginning of each
   module is printed. If -no_catalog is given, the file is assumed to begin
   with the first preface record, and the preface records are printed. If -brief
   is given, only the names of the modules are printed, whether catalog or
   preface record printing was specified. -gcos arg will cause the pathname
   to be interpreted as a Gcos format file and its contents will be listed.

   Written by Dick Snyder .... 1971
   Modified  by T. Casey JUNE 1974, AUGUST 1974
   Modified:  Ron Barstad  02/04/83  To work on Gcos format files with -gcos arg
                                     Add version indicator, start with 2.0

   */



/*  D   E   C   L   A   R   A   T   I   O   N   S     */


/*  External Entries       */


dcl  ios_$detach ext entry (char (*), char (*), char (*), bit (72) aligned);
dcl  ios_$read ext entry (char (*), pointer, fixed bin(24), fixed bin(24), fixed bin(24), bit (72) aligned);
dcl (ioa_, ioa_$nnl, com_err_) ext entry options (variable);
dcl  ios_$attach ext entry (char (*), char (*), char (*), char (*), bit (72) aligned);
dcl  ios_$setsize ext entry (char (*), fixed bin(24), bit (72) aligned);
dcl  ios_$seek ext entry (char (*), char (*), char (*), fixed bin(24), bit (72) aligned);
dcl  gcos_cv_gebcd_ascii_ ext entry (pointer, fixed bin(24), pointer, fixed bin(24));
dcl  cu_$arg_count ext entry (fixed bin);
dcl  cu_$arg_ptr ext entry (fixed bin(24), ptr, fixed bin(24), fixed bin(35));

/*  Work Variables */


dcl  nargs fixed bin(17);
dcl  argp ptr;
dcl  argl fixed bin(24);
dcl  arg char (argl) based (argp);
dcl  argno fixed bin(24);

dcl  cleanup condition;

dcl  err_msg char (200) varying;

dcl (i1, i2, i3, i4) fixed bin(24);
dcl (i, j, k, word_no) fixed bin(24);			/* temps */
dcl  doff fixed bin(24)init (0);
dcl  string char (6);
dcl  word_one fixed bin (35);			/* first word of input file */

dcl  st bit (72) aligned ;				/* ios status */
dcl  seek_save fixed bin(24);				/* holds seek offset */

dcl 1 status aligned based (addr (st)),			/* overlay for ios_ status */
    2 code fixed bin (35),				/* standard error code */
    2 fill bit (9) unaligned,
    2 eof bit (1) unaligned;				/* eof bit */

dcl 1 preface aligned based (prefp),			/* model of preface record */
    2 data_check fixed bin(24),				/* checksum of following data words */
    2 rel_check fixed bin(24),				/* checksum of following reloc. words */
    2 rel_abs fixed bin(24),				/* 0=absolute|^0=relocatable */
    2 name bit (36) unaligned,			/* name of pgm */
    2 entry bit (18) unaligned,			/* entry address */
    2 origin bit (18) unaligned,			/* origin */
    2 reloc_words fixed bin (17) unaligned,		/* no. of relocation words */
    2 data_words fixed bin (17) unaligned,		/* no. of data words */
    2 dcws (ndcw) bit (36) unaligned;			/* dcw(s) to load following data records */
dcl  prefp pointer;
dcl  ndcw fixed bin(24);
dcl 1 catalog based (prefp),
    2 fill fixed bin(24),
    2 no_ent fixed bin(24),
    2 elements (499),
      3 name bit (36) aligned,
      3 address fixed bin(24);

dcl  me char (20) init ("gcos_library_summary");
dcl  version char (4) init ("2.1");

dcl (briefsw					/* print names only */
     , prefsw					/* skip over catalog and print preface records */
     , nocatsw					/* no catalog - print preface records */
     , usage_sw					/* print usage message if error on command line */
     ) bit (1) aligned init ("0"b);

dcl  pathname char (168) init ("");

dcl (error_table_$badopt, error_table_$noarg) ext fixed bin (35);

dcl (addr, divide, fixed, mod, substr) builtin;

dcl 1 gcatlog aligned based (prefp),
    2 gav fixed bin (17) unal,
    2 gcat fixed bin (17) unal,
    2 g2fil bit(36) unal,
    2 gentry (15) unal,
3 gname bit(36),
    3 gfill (3) bit (36),
    2 g3fill bit (36) unal;
dcl gcosw bit (1) init ("0"b);
/* 	NOTE: Declaration of buffer should be last declaration in case	 */
/* 	buffer should overflow.					 */

dcl  buffer bit (131400);				/* preface and relocation blk buffer */
%page;
/*  P  R  O  C  E  D  U  R  E     */

	call ioa_ ("^a (^a)",me,version);

	on condition (cleanup) call cleanup_proc;

	call cu_$arg_count (nargs);

/* IF NO ARGS, PRINT USAGE MESSAGE AND QUIT */

	if nargs = 0 then do;
print_usage:   call ioa_ ("Usage: gcls PATH {-control_args}");
	     return;
	end;

arg_loop:	do argno = 1 to nargs;

	     call cu_$arg_ptr (argno, argp, argl, code);

	     if code ^= 0 then do;
		err_msg = arg;
call_com_err:	call com_err_ (code, me, err_msg);
		call cleanup_proc;
		if usage_sw then goto print_usage;
		return;
	     end;

	     if substr (arg, 1, 1) ^= "-" then do;
		if pathname ^= "" then do;
		     err_msg = "unidentified non-control argument: " || arg;
		     goto call_com_err;
		end;

		err_msg,
		     pathname = arg;		/* don't bother with expand_path_ since file dim does */
	     end;

	     else if arg = "-bf" | arg = "-brief" then
		briefsw = "1"b;

	     else if arg = "-preface" then
		prefsw = "1"b;

	     else if arg = "-no_catalog" then	/* ignored */
		nocatsw = "1"b;

	     else if arg = "-gc" | arg = "-gcos" then do;
		gcosw = "1"b;
	     end;
	     else do;
		code = error_table_$badopt;
		err_msg = arg;
		goto call_com_err;
	     end;

	end arg_loop;

	if pathname = "" then do;			/* complain if pathname not given */
	     code = error_table_$noarg;
	     err_msg = "";
	     usage_sw = "1"b;			/* print usage message after complaining */
	     goto call_com_err;
	end;

	prefp = addr (buffer);
	call ios_$attach ("gcls_input", "file_", pathname, "r", st);
	if status.code ^= 0 then do;
	     err_msg = err_msg || " from ios_$attach";
	     goto call_com_err;
	end;

	call ios_$setsize ("gcls_input", 36, st);
	if status.code ^= 0 then do;
	     err_msg = err_msg || " from ios_$setsize";
	     goto call_com_err;
	end;

%page;
/* gcos ** file */
	if gcosw then do;
	     call ioa_ ("Gcos ** file catalog list for ^a", pathname);
get_nextg:     call ios_$read ("gcls_input", prefp, 0, 64, j, st);
	     if status.code ^= 0 then do;
		err_msg = err_msg || " from GCOS ios_$read";
		go to call_com_err;
	     end;
	     do j = 1 to 15;
		if gcatlog.gentry (j).gname ^= "000000000000000000"b then do;
		     call gcos_cv_gebcd_ascii_ (addr (gcatlog.gentry (j).gname), 6, addr (string), i);
		     call ioa_ ("^a", string);
		end;
	     end;
	     if gcatlog.gcat = 0 then do;
		call ioa_ ("^/end of catalog.");
		call cleanup_proc;
		return;
	     end;
	     call ios_$seek ("gcls_input", "read", "first", gcatlog.gcat * 64, st);
	     if status.code ^= 0 then do;
		err_msg = err_msg || " from GCOS ios_$seek";
		go to call_com_err;
	     end;
	     go to get_nextg;
	end;
%page;
/* determine if the input file has a catalog:
   if the first word of the file =0 then this is a simulator file with a catalog
   if the first word not=0 then this is a native GCOS file without a catalog
*/
	call ios_$seek ("gcls_input", "read", "first", 0, st);
	if code ^= 0 then do;
	     err_msg = "from ios_$seek read first word: ^a";
	     goto call_com_err;
	end;

	call ios_$read ("gcls_input", addr(word_one), 0, 1, j, st);
	if code ^= 0 then do;
	     err_msg = "from ios_$read of word one: ^a";
	     goto call_com_err;
	end;

	if word_one = 0
	     then nocatsw = "0"b;		/* has catalog */
	     else nocatsw = "1"b;

	call ios_$seek ("gcls_input", "read", "first", 0, st);
	if code ^= 0 then do;
	     err_msg = "from ios_$seek read first word: ^a";
	     goto call_com_err;
	end;
%page;
/* not gcos ** file */
	if ^nocatsw then do;			/* if file has a catalog (the default) */
	     if ^prefsw then do;			/* and we were not requested to print preface records */
						/* then print the catalog */


		call ios_$read ("gcls_input", prefp, 0, 1000, j, st); /* read catalog */
		if status.code ^= 0 then do;
		     err_msg = err_msg || " from ios_$read";
		     goto call_com_err;
		end;

		do j = 1 to catalog.no_ent;
		     call gcos_cv_gebcd_ascii_ (addr (catalog.elements (j).name), 6, addr (string), i);
						/* get name in ascii */
		     if briefsw
			then call ioa_ ("^a", string); /* print name only, if -brief given */
		     else
		     call ioa_ ("^a^-^o", string, catalog.elements (j).address); /* else print name and offset */
		end;
		call ioa_ ("^/end of catalog");

		call cleanup_proc;
		return;
	     end;					/* END OF "PRINT CATALOG" DO GROUP */

	     else					/* we want to skip over the catalog */
	     doff = 1000;				/* which is exactly 1000 words long */

	end;					/* END OF "THERE IS A CATALOG" DO GROUP */

	else doff = 0;				/* no catalog to skip over */

	k = 0;					/* offset of first preface record (relative to doff) */

seek_preface:
	call ios_$seek ("gcls_input", "read", "first", k+doff, st); /* seek to start of next preface record */
	if status.code ^= 0 then do;			/* error ? */
	     err_msg = err_msg || " from ios_$seek";
	     goto call_com_err;
	end;

	if status.eof then do;
	     call ioa_ ("^/end of file");
	     call cleanup_proc;
	     return;
	end;

read:	call ios_$read ("gcls_input", prefp, 0, 3650, j, st); /* read preface record */
	if status.code ^= 0 then do;
	     err_msg = err_msg || " from ios_$read";
	     goto call_com_err;
	end;

/* Count DCWs, by looking for one with action code = "000"b */

	do ndcw = 1 to 58				/* there may be up to 58 of them in a block */
		while (substr (preface.dcws (ndcw), 22, 3) ^= "000"b);
	end;

	call gcos_cv_gebcd_ascii_ (addr (preface.name), 6, addr (string), i); /* convert prog name to ascii */
	if briefsw then do;				/* if -brief given, print name only -
						   and not rest of contents of preface record */
	     call ioa_ ("^a", string);
	     goto next_preface;
	end;
	call ioa_ ("preface of ^a", string);
	i1 = fixed (preface.entry, 18);
	i2 = fixed (preface.origin, 18);		/* convert interesting data */
	i3 = preface.reloc_words;
	i4 = preface.data_words;

	call ioa_ ("entry ^w, origin ^w, reloc_words ^w, data_words, ^w", i1, i2, i3, i4);

	do i = 1 to ndcw;				/* loop to print dcws */

	     i1 = fixed (preface.dcws (i));
	     call ioa_$nnl ("^w  ", i1);
	end;

	call ioa_ ("^2/");


/*  get offset of next preface record and seek to it */

next_preface:

	k = k+6+ndcw+preface.data_words+preface.reloc_words; /* offset of next preface block */

	goto seek_preface;				/* go seek to it */

cleanup_proc: proc;

	     call ios_$detach ("gcls_input", "", "", st);
	     return;
	end cleanup_proc;

     end gcos_library_summary;
