/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
   ********************************************************************************************
   ********************************************************************************************
   *
   *
   *	G C O S   B U I L D   P A T C H F I L E
   *
   *
   *  The gcos_build_patchfile command is used to build a patch file to be used by the
   *  GCOS Environment Simulator.  The arguments to the command are the name of the
   *  Multics ASCII segment containing the patches and the name of the resulting
   *  patchfile.  In order to have the patches applied by MME GECALL the patchfile
   *  must be called gcos_system_software_patchfile_ and must be locatable by the
   *  search rules.
   *
   *
   *  Written by M. R. Jordan,  September 1977
   *
   ********************************************************************************************
   ********************************************************************************************
*/




gcos_build_patchfile: gbp: proc ();

dcl  ME char (20) static internal options (constant) init ("gcos_build_patchfile");
dcl  NL char (1) static internal options (constant) init ("
");
dcl  aclinfo_ptr ptr init (null ());
dcl  addr builtin;
dcl  arg char (arg_len) based (arg_ptr);
dcl  arg_len fixed bin;
dcl  arg_num fixed bin;
dcl  arg_ptr ptr;
dcl  ascii_module_name char (6);
dcl  bit_count fixed bin (24);
dcl  cleanup condition;
dcl  code fixed bin (35);
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  divide builtin;
dcl  dummy fixed bin;
dcl  end_of_info bit (1);
dcl  error_table_$bad_arg fixed bin (35) ext;
dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext;
dcl  error_table_$too_many_names fixed bin (35) ext;
dcl  error_table_$translation_failed fixed bin (35) ext;
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  fixed builtin;
dcl  gcos_cv_ascii_gebcd_ entry (ptr, fixed bin, ptr, fixed bin);
dcl  get_temp_segments_ entry (char (*), (*)ptr, fixed bin (35));
dcl  hbound builtin;
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  highest_severity fixed bin init (0);
dcl  i fixed bin;
dcl  in_dirname char (168);
dcl  in_ename char (32);
dcl  in_line char (in_line_len) based (in_line_ptr);
dcl  in_line_len fixed bin (20);
dcl  in_line_num fixed bin;
dcl  in_line_ptr ptr;
dcl  in_seg char (in_seg_len) based (in_seg_ptr);
dcl  in_seg_len fixed bin (20);
dcl  in_seg_offset fixed bin (20);
dcl  in_seg_ptr ptr;
dcl  index builtin;
dcl  ioa_ entry options (variable);
dcl  last_name bit (36);
dcl  length builtin;
dcl  n fixed bin;
dcl  nargs fixed bin;
dcl  null builtin;
dcl  number_of_patches fixed bin;
dcl  out_dirname char (168);
dcl  out_ename char (32);
dcl  out_seg_bit_count fixed bin (24);
dcl  out_seg_ptr ptr init (null ());
dcl  patch_ptr ptr;
dcl  rel builtin;
dcl  release_temp_segments_ entry (char (*), (*)ptr, fixed bin (35));
dcl  search builtin;
dcl  substr builtin;
dcl  table_ptr ptr;
dcl  temp_ptr (2) ptr init ((2)null ());
dcl  temp_segments_cleanup_needed bit (1) aligned init ("0"b);
dcl  tssi_$clean_up_segment entry (ptr);
dcl  tssi_$finish_segment entry (ptr, fixed bin (24), bit (36) aligned, ptr, fixed bin (35));
dcl  tssi_$get_segment entry (char (*), char (*), ptr, ptr, fixed bin (35));
dcl  tssi_cleanup_needed bit (1) aligned init ("0"b);

dcl 1 patch (number_of_patches+1) aligned based (patch_ptr),
    2 location fixed bin (17),
    2 content fixed bin (35);


dcl 1 patch_file aligned based (out_seg_ptr),
    2 version fixed bin,
    2 number_of_names fixed bin,
    2 module (130560),
      3 name bit (36),
      3 first_patch_offset bit (18) unal,
      3 number_of_patches fixed bin (17) unal;

dcl 1 table (87040) aligned based (table_ptr),
    2 name bit (36),
    2 location fixed bin (17),
    2 content fixed bin (35) ;

/*

   Make sure there are at least enough arguments to get started.

*/


	call cu_$arg_count (nargs);
	if nargs < 2 then do;
	     call com_err_ (error_table_$noarg, ME, "^/Usage is: gcos_build_patchfile patches patchfile");
	     return;
	end;

	on cleanup call Cleanup ();


/*

   Process the pathname of the input file containing patches.

*/


	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "referencing argument 1.");
	     return;
	end;

	call Process_Input_Pathname ();
	if code ^= 0 then return;


/*

   Process the patchfile pathname.

*/


	call cu_$arg_ptr (2, arg_ptr, arg_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "referencing argument 2.");
	     return;
	end;

	call Process_Output_Pathname ();
	if code ^= 0 then return;


/*

   Process the remaining arguments.  These should all be control arguments.


*/


	do arg_num = 3 to nargs;

	     call cu_$arg_ptr (arg_num, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "referencing argument ^d.", arg_num);
		return;
	     end;

	     call Process_Argument ();
	     if code ^= 0 then return;

	end;


	temp_segments_cleanup_needed = "1"b;
	call get_temp_segments_ (ME, temp_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME);
	     return;
	end;

	table_ptr = temp_ptr (1);

	call Process_Patch_Cards ();

	if code ^= 0 then return;


	if highest_severity < 3 then do;

	     call Sort_Patches ();
	     if code ^= 0 then return;

	     call Generate_Patch_File ();
	     if code ^= 0 then return;

	end;
	else call com_err_ (error_table_$translation_failed, ME);


give_up:

	call tssi_$finish_segment (out_seg_ptr, out_seg_bit_count, "110"b, aclinfo_ptr, code);
	tssi_cleanup_needed = "0"b;


	call release_temp_segments_ (ME, temp_ptr, code);
	temp_segments_cleanup_needed = "0"b;


	return;

Process_Input_Pathname: proc ();


	     call expand_pathname_ (arg, in_dirname, in_ename, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, """^a""", arg);
		return;
	     end;


	     call hcs_$initiate_count (in_dirname, in_ename, "", bit_count, 0, in_seg_ptr, code);
	     if in_seg_ptr = null () then do;
		call com_err_ (code, ME, """^a^[>^]^a""", in_dirname, (in_dirname ^= ">"), in_ename);
		return;
	     end;
	     else code = 0;
	     in_seg_len = divide (bit_count, 9, 20, 0);


	     in_seg_offset = 1;
	     in_line_len = 0;
	     in_line_num = 0;
	     in_line_ptr = null ();


	     return;


	end Process_Input_Pathname;

Process_Output_Pathname: proc ();

	     call expand_pathname_ (arg, out_dirname, out_ename, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, """^a""", arg);
		return;
	     end;


	     tssi_cleanup_needed = "1"b;
	     call tssi_$get_segment (out_dirname, out_ename, out_seg_ptr, aclinfo_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, """^a^[>^]^a""", out_dirname, (out_dirname ^= ">"), out_ename);
		return;
	     end;


	     return;


	end Process_Output_Pathname;

Process_Argument: proc ();


	     code = error_table_$badopt;
	     call com_err_ (code, ME, """^a""", arg);


	     return;


	end Process_Argument;

Get_Input_Line: proc ();


dcl  in_char (in_seg_len) char (1) based (in_seg_ptr) unal;


/*

   Make sure we still have text to process.  If not, quit while
   we're ahead.

*/


loop:

	     if in_seg_offset >= in_seg_len then do;
		end_of_info = "1"b;
		return;
	     end;
	     else end_of_info = "0"b;


/*

   Get the next line from the source.

*/


	     in_line_ptr = addr (in_char (in_seg_offset));

	     in_line_len = index (substr (in_seg, in_seg_offset), NL)-1;
	     if in_line_len < 0 then in_line_len = in_seg_len-in_seg_offset+1;
	     in_line_num = in_line_num+1;


/*

   Now update the offset of the next line.

*/


	     in_seg_offset = in_seg_offset+in_line_len+1;


	     if in_line_len < 78 then do;
		call Error (3, "1"b, "Missing or incomplete program name.", "");
		goto loop;
	     end;

	     if substr (in_line, 7, 9) ^= " octal   " &
	     substr (in_line, 7, 9) ^= " OCTAL   " then do;
		call Error (3, "1"b, "Source is not an ""octal"" line.", "");
		goto loop;
	     end;


	     return;


	end Get_Input_Line;

Octal_Value: proc (text)returns (fixed bin (35));


dcl  i fixed bin;
dcl  result fixed bin (35);
dcl  text char (*);


	     i = search (text, " ,")-1;
	     if i < 0 then i = length (text);
	     else if substr (text, i+1, 1) = "," then do;
		call Error (3, "1"b, "Bad delimiter in octal field.  ""^a""", substr (text, i+1, 1));
		return (0);
	     end;

	     result = cv_oct_check_ (substr (text, 1, i), code);
	     if code ^= 0 then do;
		call Error (3, "1"b, "Bad octal value.  ""^a""", substr (text, 1, i));
		return (0);
	     end;


	     return (result);


	end Octal_Value;

Process_Patch_Cards: proc ();


	     end_of_info = "0"b;
	     number_of_patches = 0;

	     do i = 1 to hbound (table, 1) while (^end_of_info);

		call Get_Input_Line ();

		ascii_module_name = substr (in_line, 73, 6);
		call gcos_cv_ascii_gebcd_ (addr (ascii_module_name), 6, addr (table (i).name), n);
		table (i).location = Octal_Value (substr (in_line, 1, 7));
		table (i).content = Octal_Value (substr (in_line, 16, 13));

		number_of_patches = number_of_patches+1;

	     end;


	     if ^end_of_info then do;
		code = error_table_$too_many_names;
		call com_err_ (code, ME, "Too many patches.");
		return;
	     end;


	     return;


	end Process_Patch_Cards;

Sort_Patches: proc ();


dcl  i fixed bin;
dcl  j fixed bin;

dcl 1 R (number_of_patches) aligned based (table_ptr),
    2 K bit (36),
    2 data1 fixed bin (17),
    2 data2 fixed bin (35) ;

dcl 1 Record aligned,
    2 Key bit (36),
    2 data1 fixed bin (17),
    2 data2 fixed bin (35) ;


	     do j = 2 to number_of_patches;

		i = j-1;
		Record = R (j);


l:

		if Key < K (i) then do;
		     R (i+1) = R (i);
		     i = i-1;
		     if i>0 then goto l;
		end;

		R (i+1) = Record;


	     end;


	     return;


	end Sort_Patches;

Generate_Patch_File: proc ();


	     patch_file.version = 1;
	     n = 0;
	     last_name = (36)"0"b;


	     do i = 1 to number_of_patches;

		if table (i).name ^= last_name then do;

		     n = n+1;
		     last_name = table (i).name;
		     patch_file.module (n).name = table (i).name;
		     patch_file.module (n).first_patch_offset = (18)"0"b;
		     patch_file.module (n).number_of_patches = 0;

		end;

	     end;


	     patch_file.number_of_names = n;
	     patch_ptr = addr (patch_file.module (n+1));


	     n = 0;
	     last_name = (36)"0"b;


	     do i = 1 to number_of_patches;

		if table (i).name ^= last_name then do;

		     last_name = table (i).name;
		     n = n+1;

		     patch_file.module (n).first_patch_offset = rel (addr (patch (i)));

		end;

		patch_file.module (n).number_of_patches = patch_file.module (n).number_of_patches+1;
		patch (i).location = table (i).location;
		patch (i).content = table (i).content;

	     end;


	     out_seg_bit_count = fixed (rel (addr (patch (number_of_patches+1))), 18)*36;


	     return;


	end Generate_Patch_File;

Cleanup:	proc ();


	     if tssi_cleanup_needed then do;
		call tssi_$clean_up_segment (aclinfo_ptr);
		tssi_cleanup_needed = "0"b;
	     end;


	     if temp_segments_cleanup_needed then do;
		call release_temp_segments_ (ME, temp_ptr, code);
		temp_segments_cleanup_needed = "0"b;
	     end;


	     return;


	end Cleanup;

Error:	proc (severity, print_source, message, arg);


dcl  arg char (*);
dcl  message char (*);
dcl  print_source bit (1) aligned;
dcl  severity fixed bin;


dcl  HEADING (4) char (16) init (
     "WARNING",
     "ERROR SEVERITY 2",
     "ERROR SEVERITY 3",
     "ERROR SEVERITY 4");


	     call ioa_ ("^/^a, LINE ^d.", HEADING (severity), in_line_num);
	     call ioa_ (message, arg);
	     if print_source then call ioa_ ("SOURCE:^/^a", in_line);


	     if severity>highest_severity then highest_severity = severity;


	     if severity = 4 then goto give_up;


	     return;


	end Error;


     end gcos_build_patchfile;
