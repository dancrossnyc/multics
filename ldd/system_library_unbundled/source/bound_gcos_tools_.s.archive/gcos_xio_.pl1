/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
gcos_xio_: proc;
/*
	     Open or close an IO stream with iox__

  Created:  Ron Barstad  83-03-04  based on XIO
*/
%page;
/*  P R O C E D U R E  */
dcl (	cl, sn, mv, pn )	char(*) parm;
dcl	cp		ptr parm;

	call com_err_ (error_table_$badcall, "gcos_xio_",
	     "Valid gcos_xio_ entries are open and close.");
	return;

open:	entry (cl, sn, mv, cp, pn) returns (bit (1));
/** Execute iox routines to "open" the file:
	   1. For caller "cl".
	   2. for stream "sn".
	   3. Mode "mv" = { "1" | "input", "2" | "output" }.
	   4. Caller supplied pointer "cp" for i/o control block.
	   5. To segment "pn".

	   Return "1"b if failure.
	   **/

	if (mv = "1") | (mv = "input") then mode = 1;
	else
	if (mv = "2") | (mv = "output") then mode = 2;
	else do;
	     call com_err_ (error_table_$bad_subr_arg, cl,
		"Mode, ""^a"", not 1 or input nor 2 or output.", mv);
	     return ("1"b);
	end;

	call iox_$attach_ioname (sn, tp, "vfile_ "||pn, ec);
	if ec>0 then do;
	     call iox_$close (tp, ec);
	     call iox_$detach_iocb (tp, ec);
	     if ec = 0 then
		call iox_$attach_ioname (sn, tp, "vfile_ "||pn, ec);
	end;
	if ec>0 then do;
	     call com_err_ (ec, cl, "(attach) stream ""^a"", segment ""^a""", sn, pn);
	     cp = null ();
	     return ("1"b);
	end;

	call iox_$open (tp, mode, "0"b, ec);
	if ec>0 then do;
	     call iox_$close (tp, ec);
	     call iox_$open (tp, mode, "0"b, ec);
	end;
	if ec>0 then do;
	     call com_err_ (ec, cl, "(open) mode ""^a"", stream ""^a"", segment ""^a""", mv, sn, pn);
	     call iox_$detach_iocb (tp, ec);
	     cp = null ();
	     return ("1"b);
	end;
	cp = tp;
	return ("0"b);

close:	entry (cl, cp) returns (bit (1));
/** Execute iox routines to "close" the file:
	   1. For caller "cl".
	   2. With i/o control block pointer "cp".

	   Return "1"b if failure.

	   **/
	call iox_$close (cp, ec);
	if ec>0 then
	     call com_err_ (ec, cl, "(close).");
	call iox_$detach_iocb (cp, ec);
	if ec>0 then
	     call com_err_ (ec, cl, "(detach).");
	if ec>0 then return ("1"b);
	return ("0"b);
%page;
/*  D A T A  */
dcl	tp		ptr;
dcl	mode		fixed bin;
dcl	ec		fixed bin(35);
dcl	com_err_		entry options(variable);
dcl       error_table_$bad_subr_arg fixed bin(35) ext static;
dcl       error_table_$badcall fixed bin(35) ext static;
dcl	iox_$attach_ioname	entry( char(*), ptr, char(*), fixed bin(35));
dcl	iox_$close	entry(ptr,fixed bin(35));
dcl	iox_$detach_iocb	entry(ptr,fixed bin(35));
dcl	iox_$open		entry(ptr, fixed bin, bit(1) aligned, fixed bin(35));
dcl	null		builtin;
     end gcos_xio_;
