/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
bcdmp: proc (seg_ptr);

/* Procedure to dump a GCOS segment, printing less information than dump_segment.
   Entry bcdmp prints bcw, then for each record, the rcw and its offset, and the
   BCD or ASCII contents (BCD translated to ASCII for printing). Binary card
   records just have their rcw and offset printed.

   Entry gcdmp prints just bcw and rcws, and their offsets. No record contents are
   printed.

   Entry set_max_line_len gives the line length of the terminal, and by implication,
   the number of rcw-offset pairs that will fit on a line (20 chars per).
   The segment and offset to be dumped are specified by a pointer argument. Dumping
   always begins at the beginning of a GCOS block (on a 320-word boundary). If the
   offset in the pointer does not specify such an address, it will be rounded
   DOWN, so dumping will begin at the start of the block in which the offset falls.

   This procedure can be called as a subroutine, or from db:
   :=bcdmp(segno|offset)

   or by the dump_gcos (dgc) command, which accepts a pathname, offset, line length,
   and -bcd (or -ch) argument.


   WRITTEN BY T. CASEY, JULY 1974

*/

dcl  gcos_cv_gebcd_ascii_ ext entry (ptr, fixed bin, ptr);

dcl (command_query_
     , ioa_, ioa_$nnl
     , com_err_
     , db
     ) ext entry options (variable);

%include query_info_;

dcl  word bit (36) aligned based;
dcl  char_string char (200) based;

dcl 1 bcw aligned based (block_ptr),
    2 bsn bit (18) unaligned,
    2 length bit (18) unaligned;

dcl 1 rcw aligned based (record_ptr),
    2 length bit (18) unaligned,
    2 eof bit (6) unaligned,
    2 zeros bit (2) unaligned,
    2 media_code bit (4) unaligned,
    2 report_code bit (6) unaligned;

dcl (seg_ptr, block_ptr, record_ptr) ptr;
dcl  offset fixed bin (35);
dcl (block_len, record_len, cur_line_len, i, medium) fixed bin;
dcl  max_line_len fixed bin int static init (80);

dcl  reply char (4) varying;
dcl  me char (5);
dcl  ascii_line char (200);

dcl  bcdsw bit (1) aligned init ("1"b);

dcl (addr, addrel, fixed, index, rel, substr) builtin;

	me = "bcdmp";

start:
	block_ptr = seg_ptr;
	offset = fixed (rel (block_ptr));
	cur_line_len = 0;

	i = mod (offset, 320);
	if i ^= 0 then do;
	     offset = offset - i;
	     block_ptr = addrel (block_ptr, -i);
	     call com_err_ (0, me, "will start at offset: ^6o", offset);
	end;

start_block:
	block_len = fixed (bcw.length);

	if cur_line_len ^= 0 then do;
	     call ioa_ ("");
	     cur_line_len = 0;
	end;

	call ioa_ ("^/^6o ^w", offset, block_ptr -> word);
	if block_ptr -> word = (36)"0"b then do;
	     call com_err_ (0, me, "bcw = 0; aborting dump");
	     goto exit;
	end;

	if block_len = 0 then goto next_block;

	offset = offset + 1;
	record_ptr = addrel (block_ptr, 1);

next_record:
	record_len = fixed (rcw.length);

	if record_len > block_len then do;
	     call com_err_ (0, me, "bad rcw:");
	     goto new_line;
	end;

	if bcdsw then do;

	     if record_len = 0 then goto new_line;

	     ascii_line = "";

	     medium = fixed (rcw.media_code);

	     if medium >= 5 then			/* ascii */
		ascii_line = substr (addrel (record_ptr, 1) -> char_string, 1, record_len*4);

	     else if medium = 1 then			/* binary card */
		ascii_line = "BINARY CARD";

	     else do;				/* else assume bcd */
		call gcos_cv_gebcd_ascii_ (addrel (record_ptr, 1), record_len*6, addr (ascii_line));

/* COMMENT OUT: so we can see the !1 or !2 or whatever, at the end of the last word
   substr (ascii_line, 1+index (ascii_line, "!")) = ""; /* END COMMENT OUT */
		substr (ascii_line, 1+record_len*6) = ""; /* but blank out the garbage after the last word */
	     end;

	     call ioa_ ("^6o ^w ^a", offset, record_ptr -> word, ascii_line);
	end;

	else do;
	     if cur_line_len = 0 then goto new_line;
	     if cur_line_len + 20 > max_line_len then
new_line:		do;
		call ioa_$nnl ("^/^6o ^w", offset, record_ptr -> word);
		cur_line_len = 20;
	     end;
	     else do;
		call ioa_$nnl (" ^6o ^w", offset, record_ptr -> word);
		cur_line_len = cur_line_len + 20;
	     end;
	end;

	if rcw.eof = "001111"b then do;
	     query_info.yes_or_no_sw = "1"b;
	     call command_query_ (addr (query_info), reply, me, "eof in rcw; do you wish to continue?");
	     if reply = "no" then goto exit;
	end;

	offset = offset + record_len + 1;
	record_ptr = addrel (record_ptr, record_len+1);
	block_len = block_len - record_len - 1;

	if block_len < 0 then do;
	     call com_err_ (0, me, "warning - remaining block length went negative - calling db");
	     call db;
	end;

	if block_len <= 0 then
next_block:    do;
	     block_ptr = addrel (block_ptr, 320);
	     offset = fixed (rel (block_ptr));
	     goto start_block;
	end;

	goto next_record;

exit:

/* terminate the seg here, if we add code to initiate it later */

	call com_err_ (0, me, "returning to caller");
	return;

/* Entry to request printing of just block and record control words */

gcdmp:	entry (seg_ptr);

	me = "gcdmp";
	bcdsw = "0"b;
	goto start;

/* Entry to set max_line_length */

set_max_line_len: entry (ll);

dcl  ll fixed bin;

	max_line_len = ll;
	return;

     end bcdmp;
