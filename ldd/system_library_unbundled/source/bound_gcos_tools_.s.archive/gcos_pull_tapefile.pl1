/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_pull_tapefile: gcpt: pull: proc;

/* This command copies files from a GCOS tape into the Multics storage system.
   Since it was designed to read files from a total system tape, from which the
   gcos simulator libraries are built, it accepts records longer than 320 words.
   It reads the header label preceeding each file, prints the name and file
   sequence number, and asks the user if the file is to be copied. If the answer
   is yes, it asks for a pathname, and copies the file into it. Then it continues
   with the next file. This process is terminated either by a reply of "cancel", or
   "quit", or "q" to the question, or an end-of-reel label or partial label
   being encountered on the tape.

   USAGE: gcpt tape_number {-control_args}

   tape_number

   is a character string used in the mount message to the Multics operator.
   It need not match any field in the tape labels. See -attached, below.

   -attached, -att

   may be given in place of tape_number to indicate that the tape has been
   retained (see -retain, below) from a previous use of this command, and
   is therefore already mounted.

   -retain, -ret

   causes the tape to remain mounted when processing by this command is completed.
   This saves work for the Multics operator, if several attempts to read the tape
   are to be made.

   -detach, -det

   causes the tape to be detached and dismounted, before any attempt is
   made to attach the currently specified tape. If this is the only argument given,
   the tape will be detached and no other processing will take place.

   -skip n

   causes n files to be skipped over before the user is asked if files are to
   be copied. (Questioning starts with the n+1st file.)

   -gsr

   Allows standard size (320 word or less) records to be copied into the Multics
   storage system in a format readable by other Multics tools that manipulate
   GCOS files. Records shorter than 320 words are padded out to 320 words, allowing
   a read of 320 words to obtain exectly one record. This argument should not be
   used when reading a total system tape.

   -dcw

   Requests program to assume files are tape format System Loadable Files,
   as produced by SYSEDIT, and to interpret the DCW blocks, verifying their
   consistency with the data records, and adjusting record lengths, if necessary,
   before writing them to the output file.

   -no_label, -nl

   Indicates that there are no header or trailer labels, and that every file
   is to be treated as data.

   -brief, -bf

   Causes certain warning messages and informative messages not to be printed.

   -long, -lg

   Causes hardware status, labels, and length and first word of all data records,
   to be printed on the terminal.

   -long_brief, -lb

   Causes hardware status and labels, but NOT length and first word of data records,
   to be printed on the terminal.

   -debug, -db

   Causes db to be called after the call to com_err_ and before the call
   to cleanup_proc, when any errors occur.

   -block n

   Allows tape buffer size to be increased from the default of 3842 words,
   up to a maximum of 4096 words.

   -density

   Allows tape density to be specified. Default is 1600.

   WRITTEN BY T. CASEY AUGUST 1974
   MODIFIED BY T.CASEY NOVEMBER 1974 TO FIX BUGS
   Modified: Ron Barstad  2.0  83-02-28  Changed incl query_info_ to query_info
                                        Added version indicator (start with 2.0)
   Modified: Ron Barstad  2.1  83-04-15  Added -density, -block and changed defaults.

*/
%page;
/*  D E C L A R A T I O N S      */

%include query_info;

/*  External Entries       */


dcl  com_err_ ext entry options (variable);
dcl  command_query_ ext entry options (variable);
dcl  cu_$arg_count ext entry (fixed bin);
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_ ext entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  db ext entry;
dcl  decode_nstd_status_ ext entry (bit (72) aligned, char (*) varying);
dcl  gcos_cv_gebcd_ascii_ ext entry (ptr, fixed bin, ptr, fixed bin(21));
dcl  ioa_ ext entry options (variable);

dcl  ios_$attach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$detach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$order ext entry
    (char (*) aligned, char (*) aligned, ptr, bit (72) aligned);
dcl  ios_$read ext entry
    (char (*) aligned, ptr, fixed bin(21), fixed bin(21), fixed bin(21), bit (72) aligned);
dcl  ios_$seek ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin, bit (72) aligned);
dcl  ios_$setsize ext entry
    (char (*) aligned, fixed bin, bit (72) aligned);
dcl  ios_$tell ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin(21), bit (72) aligned);
dcl  ios_$write ext entry
    (char (*) aligned, ptr, fixed bin(21), fixed bin(21), fixed bin(21), bit (72) aligned);

dcl (error_table_$noarg, error_table_$badopt, error_table_$inconsistent, error_table_$ioname_not_found, error_table_$bad_arg)
     ext static fixed bin (35);

/*  Work Variables */

/* Argument processing */
dcl  nargs fixed bin;
dcl  argp ptr;
dcl  argl fixed bin;
dcl  arg char (argl) based (argp);
dcl  argno fixed bin;

/* Character strings */

dcl  buf_arg char (32) varying;
dcl  buffer char (16384) aligned;			/* 4096 words */
dcl  den_arg char (32) varying;
dcl  err_msg char (200) varying;
dcl  pname char (168) aligned;			/* pathname to copy into, given by user */
dcl  err_path char (168) varying;
dcl  answer char (168) varying;
dcl  intape char (32) varying;                               /* tape number to read from */
dcl  tape_request char (64) aligned;
dcl  me char (24) int static options(constant) init ("gcos_pull_tapefile (2.1)");
dcl  ascii_name char (12) aligned;
dcl  valid_den (5) char (4) int static options(constant) init ("200", "556", "800", "1600", "6250");

/* Switches - init off */

dcl (
     longsw					/* print codes or labels or length and word one */
     , long_brief					/* do not print length and wordone */
     ) bit (1) aligned int static init ("0"b);              /* keep for -attach invocation */

dcl (
     attached					/* -attached given */
     , briefsw					/* -brief given */
     , debugsw					/* -debug given - call db if any errors occur */
     , dcwsw					/* -dcw given - interpret dcw blocks and delete extra words */
     , detach					/* -detach given */
     , eorsw					/* end of reel, or user said "quit" */
     , gsr					/* -gsr given */
     , no_label					/* no_label given: tape has no labels */
     , notdcw					/* on after inconsistent dcw block found in file */
     , out_of_synch					/* on if initial tape position not at header label */
     , print_hdwr_status				/* hardware status returned from nstd_ */
     , retain					/* -retain given */
     , skipit					/* user said -skip n and we are not yet at file n+1 */
     , tape_is_attached				/* either -attached given, or we attached a tape */
     ) bit (1) aligned init ("0"b);

/* Fixed bin */

dcl  bufsize fixed bin (21);

dcl (						/* fixed bin init (0) */
     dcw_block_len					/* computed length of dcw or data block */
     , dcw_index					/* index of current dcw in block */
     , dcw_word_count				/* sum of dcw.counts */
     , expected_arg					/* says which of -skip n or -block n was given */
     , filecount					/* which file are we at */
     , i                                                    /* just an index counter */
     , in_elements					/* elements read from input */
     , out_elements					/* elements written to output */
     , ndcw					/* number of dcws in block */
     , numeric_arg					/* value of n after -skip or -block */
     , read_count					/* to help get back into synch */
     , rec_count					/* counter for tape records in one file */
     , skipcount					/* number of files user said to skip */
     , word_count					/* sum of reloc and data word counts in dcw block */
     )fixed bin (21) init (0);

/* To keep track of what we are expecting next from the tape */

dcl (expected_input, next_expected_input, unexpected_input) fixed bin;

/* Names for things we are expecting, for program readability */

dcl (
     data_to_be_copied init (1)
     , header_label init (2)
     , trailer_label init (3)
     , eof_after_header init (4)
     , eof_after_trailer init (5)
     , eof_after_forward_file init (6)
     , eof init (7)
     , label init (8)
     , data init (9)
     , next_file init (10)
     )fixed bin int static options(constant);


/* Bit string */
dcl  st bit (72) aligned;

/* Based */
dcl  code fixed bin (35) aligned based (addr (st));

dcl 1 stat_word based (addr (st)),
    2 hdwr_status bit (1) unaligned,
    2 fill bit (25) unaligned,
    2 major bit (4) unaligned,
    2 minor bit (6) unaligned,
    2 word2 bit (36) aligned;				/* to allow printing of second half */

dcl 1 label_model aligned based (buffp),
    2 filler (8) fixed bin,
    2 filename bit (72);

dcl 1 partial_label aligned based (buffp),
    2 fill (4) bit (36) aligned,
    2 zero_words (6) bit (36) aligned,			/* if all zero, this is a partial label */
    2 fill2 (4) bit (36) aligned;

dcl 1 preface aligned based (buffp),			/* dcw block - called preface for historical reasons */
    2 (data_check, rel_chekc, rel_abs) fixed bin (35),
    2 name bit (36),
    2 (entry, origin) bit (18) unaligned,
    2 (reloc_words, data_words) fixed bin (17) unaligned,
    2 dcw (ndcw),
      3 data_addr bit (18) unaligned,
      3 zero bit (3) unaligned,
      3 action bit (3) unaligned,
      3 count bit (12) unaligned;


dcl  w (4096) bit (36) aligned based (buffp);

dcl  wordone bit (36) aligned based (buffp);		/* overlay for first word of buffer */

/* Pointer */
dcl  buffp pointer;

/* Builtin */
dcl (addr, divide, fixed, hbound, mod, null, rtrim, substr, unspec) builtin;

dcl  cleanup condition;

%page;
/*  P R O C E D U R E      */


	buffp = addr (buffer);
	on condition (cleanup) call cleanup_proc;

	call cu_$arg_count (nargs);

/* Initialize */

	den_arg = "1600";
	buf_arg = "3842";
	bufsize = 3842;
	intape = "";
	tape_request = "";

/* IF NO ARGS, PRINT USAGE MESSAGE AND QUIT */

	if nargs = 0 then do;
	     code = error_table_$noarg;
	     err_msg = "Usage: gcpt REEL_NUMBER OR -attached {-control_args}";
	     goto call_com_err;
	end;

arg_loop:	do argno = 1 to nargs;

	     call cu_$arg_ptr (argno, argp, argl, code);

	     if code ^= 0 then do;
		err_msg = arg;
call_com_err:	call com_err_ (code, me, err_msg, err_path, numeric_arg);
		if print_hdwr_status then
		     call ioa_ ("(^a)", answer);

		if debugsw then do;
		     call ioa_ ("CALLING DB:");
		     call db;
		end;

clean_out:	call cleanup_proc;
		return;
	     end;

	     err_path = arg;			/* in case of arg error */
	     code = 0;

	     if expected_arg ^= 0 then do;
		numeric_arg = cv_dec_check_ (arg, code);

		if expected_arg = 1 then do;		/* -skip n */
		     expected_arg = 0;
		     if code ^= 0 then do;
			code = error_table_$bad_arg;	/* cv_dec_check_ does not return an error_table_ code */
			err_msg = "bad skip count: ^a";
			goto call_com_err;
		     end;
		     skipcount = numeric_arg;
		end;

		else if expected_arg = 2 then do;	/* -block n */
		     expected_arg = 0;
		     if code ^= 0 then do;
			code = error_table_$bad_arg;
bad_buf_size:		err_msg = "bad buffer size: ^a";
			goto call_com_err;
		     end;
		     if numeric_arg > 4096 then
			goto bad_buf_size;
		     bufsize = numeric_arg;
		     buf_arg = arg;
		end;

		else if expected_arg = 3 then do;	/* -density n */
		     den_arg = "";
		     expected_arg = 0;
		     if code ^= 0 then do;
			code = error_table_$bad_arg;
			err_msg = "tape density missing or contains non-numerics: ^a";
			goto call_com_err;
		     end;
		     do i = 1 to hbound(valid_den,1);
			if arg = valid_den(i)
			     then den_arg = arg;
		     end;
		     if den_arg = "" then do;
			code = error_table_$bad_arg;
			err_msg = "not a known tape density: ^a";
			goto call_com_err;
		     end;
		end;

		else do;
		     err_msg = "program bug";
		     goto call_com_err;
		end;
	     end;					/* end of expected arg do group */

	     else if substr (arg, 1, 1) ^= "-" then do;	/* must be tape number */
		if intape ^= "" then do;		/* if it was already given */
		     err_msg = "unknown non-control argument: ^a";
		     goto call_com_err;
		end;
		intape = arg;
	     end;					/* end of tape number do group */

	     else do;				/* control arg */
		if arg = "-att" | arg = "-attached" then do;
		     attached = "1"b;
		     tape_is_attached = "1"b;
		end;
		else if arg = "-bk" | arg = "-block" then
		     expected_arg = 2;
		else if arg = "-db" | arg = "-debug" then
		     debugsw = "1"b;
		else if arg = "-den" | arg = "-density" then
		     expected_arg = 3;
		else if arg = "-dcw" then
		     dcwsw = "1"b;
		else if arg = "-det" | arg = "-detach" then
		     detach = "1"b;
		else if arg = "-gsr" then
		     gsr = "1"b;
		else if arg = "-lg" | arg = "-long" then do;
		     longsw = "1"b;
		     long_brief = "0"b;
		end;
		else if arg = "-lb" | arg = "-long_brief" then
		     longsw, long_brief = "1"b;
		else if arg = "-nl" | arg = "-no_label" | arg = "-no_labels" then
		     no_label = "1"b;
		else if arg = "-ret" | arg = "-retain" then
		     retain = "1"b;
		else if arg = "-skip" then
		     expected_arg = 1;
		else if arg = "-bf" | arg = "-brief" then
		     briefsw = "1"b;
		else do;
		     code = error_table_$badopt;
		     err_msg = "^a";
		     goto call_com_err;
		end;
	     end;					/* end control arg do group */

	end arg_loop;

/* Check correctness of args */

	if expected_arg ^= 0 then do;
	     err_msg = "after ^a";
	     code = error_table_$noarg;
	     goto call_com_err;
	end;

	if attached then do;			/* tape attached already */
	     if intape ^= "" then do;			/* can't give tape number too */
		err_msg = "tape_number and -attached";
inconsistent:	code = error_table_$inconsistent;
		goto call_com_err;
	     end;
	     if detach then do;
		err_msg = "-detach and -attached";
		goto inconsistent;
	     end;
	end;					/* end tape attached do group */

	else do;					/* tape not already attached */
	     if detach then do;
		call ios_$detach ("gcpt_input", "", "", st);
		if code ^= 0 then
		     if code ^= error_table_$ioname_not_found then do; /* don't blow up if there was no tape attached */
			err_msg = "from ios_$detach the previously retained tape";
			goto tape_error;
		     end;
		if nargs = 1 then return;		/* if that's all there is to do */
		detach = "0"b;			/* don't detach the next tape */
	     end;
	     if intape = "" then do;			/* tape number must be given */
		err_msg = "tape_number";
		code = error_table_$noarg;
		goto call_com_err;
	     end;
	end;					/* end tape not attached do group */

/* Attach input tape */

	if ^attached then do;
	     tape_request = rtrim(intape||",den="||den_arg||",block="||buf_arg);
	     err_path = "tape " || intape;		/* for error messages */
	     call ios_$attach ("gcpt_input", "nstd_", tape_request, "r", st);
	     if code ^= 0 then do;
		err_msg = "from ios_$attach ^a";
tape_error:					/* come here from other tape errors */
		if hdwr_status then do;
		     call decode_nstd_status_ (st, answer);
		     print_hdwr_status = "1"b;	/* rember to print it after main error message */
		end;

		else if code = error_table_$ioname_not_found then
		     tape_is_attached = "0"b;		/* tell cleanup_proc that tape was not there */
		goto call_com_err;
	     end;					/* end code ^= 0 do group */
	     tape_is_attached = "1"b;			/* for the information of cleanup_proc */
	end;					/* end ^attached do group */

	else					/* tape is attached */
	err_path = "the retained tape";		/* best we can do for error messages */
						/* Initialize */

/* Initialize */
	query_info.suppress_name_sw = "1"b;
	if no_label then				/* if tape has no labels */
	     expected_input = next_file;		/* first record will be data */
	else expected_input = header_label;		/* otherwise it will be a header label */

/* Main read and write loop */

copyloop:	do while (^eorsw);				/* keep reading until end of reel
						   or until user says "quit" */

	     if expected_input = eof_after_forward_file then /* if user does not want file copied */
		call ios_$order ("gcpt_input", "forward_file", null, st);
						/* skip over all data records at once, to save time */
	     else do;
		call ios_$read ("gcpt_input", buffp, 0, bufsize, in_elements, st);
						/* else read data or label record */
		read_count = read_count + 1;		/* count reads, to help get into synch,
						   in case initial tape position is not at header label */
	     end;

	     if longsw then do;
		if code ^= 0 then do;
		     call decode_nstd_status_ (st, answer);
		     call ioa_ ("status = ^w ^w (^a)", code, word2, answer);
		end;
		else do;
		     if in_elements ^= 14 then do;	/* if not a label */
			if ^long_brief then		/* let user turn this off separately */
			     call dumper (1);	/* print length and bcw of record */
		     end;

		     else call dumper (2);		/* this is probably a label - dump 14 words */
		end;
	     end;

	     if code ^= 0 then do;

		if hdwr_status			/* is it hadrware status */
		& major = "0100"b			/* is it an end of file mark */
		& (minor = "001111"b		/* eof 7track (17 octal) */
		| minor = "010011"b) then do;		/* eof 9track (23 octal) */
						/* it was end of file */
		     if expected_input = eof_after_header then
			expected_input = next_expected_input; /* either data_to_be_copied,
						   or eof_after_forward_file, depending on user's reply */

		     else if expected_input = eof_after_trailer then
			expected_input = header_label;

		     else if expected_input = eof_after_forward_file then do;
			if no_label then		/* if tape has no labels */
			     expected_input = next_file; /* next record will be first of next file */
			else expected_input = trailer_label; /* otherwise it will be a trailer label */
		     end;

		     else if expected_input = data_to_be_copied then do; /* eof after data records */
			call ios_$tell ("gcpt_output", "write", "first", out_elements, st); /* see how much we wrote */
			if code ^= 0 then do;
			     err_msg = "from ios_$tell write ^a";
			     goto file_error;
			end;
			if mod (out_elements, 1024) ^= 0 then out_elements = out_elements+1024; /* get it in pages */
			out_elements = divide (out_elements, 1024, 17, 0);
						/* tell user */
			call ioa_ ("^d tape records read, ^d Multics records (pages) written", rec_count, out_elements);
			rec_count = 0;		/* reset it for next file */
			call ios_$detach ("gcpt_output", "", "", st); /* detach output file */
			if code ^= 0 then do;
			     err_msg = "from ios_$detach ^a";
			     goto file_error;
			end;
			if no_label then		/* if tape has no labels */
			     expected_input = next_file; /* next record will be first of next file */
			else expected_input = trailer_label; /* otherwise it will be trailer label */
		     end;

		     else if expected_input = header_label then do;
			if read_count = 1 then do;	/* first read - tape was not at header to start */
			     call ioa_ ("^a: Filemark encountered when header label expected.", me);
			     unexpected_input = eof;
tape_out_of_synch:
			     out_of_synch = "1"b;
			     call ioa_ ("Initial tape position was incorrect.
Answer ""no"" to the following question to request search for next header label.
Answer ""quit"" to terminate processing.");
			     goto ask;
			end;

			else if out_of_synch then
			     if unexpected_input = eof then
				goto double_eof;

		     end;
		     else if expected_input = trailer_label | expected_input = next_file then do;
double_eof:		call com_err_ (0, me, "Consecutive end of file marks encountered.
Enter ""no"" to continue reading tape, or ""quit"" to stop.");
			goto ask;
		     end;

		end;				/* end of end-of-file do group */

/* Since nstd_ retries reads 10 times after errors, before returning
   to the caller, there is no point in our retrying again. It is hopeless. */

		else do;
		     if expected_input = eof_after_forward_file then
			err_msg = "From ios_$order forward_file ^a";
		     else err_msg = "From ios_$read ^a";
		     goto tape_error;
		end;

	     end;					/* end of code ^= 0 do group */


	     else if in_elements >= bufsize then do;
		err_msg = "record too long on tape ^a (^d words)";
		numeric_arg = in_elements;
		goto call_com_err;
	     end;

	     else if expected_input = eof_after_header
	     | expected_input = eof_after_trailer then do;
						/* if it had been there, we would have detected it above,
						   as hardware status */
		err_msg = "no filemark after label record on tape ^a";
		goto tape_error;
	     end;

	     else if expected_input = next_file then do;	/* no labels on tape */

		skipit = "0"b;			/* duplicate some of header label processing code */
		filecount = filecount + 1;
		if filecount <= skipcount then skipit = "1"b;
		if ^skipit then do;
		     call ioa_ ("File ^d.", filecount);

		     if ^longsw then		/* if user has seen nothing about file yet */
			call dumper (3);		/* print everything */

		     else do;			/* user has seen dump, if 14 word record,
						   or length and bcw, if ^14words and ^long_brief */
			if long_brief then do;	/* user has not seen length */
			     if in_elements ^= 14 then /* and not dump either */
				call dumper (3);	/* so print both */
			end;			/* dump without header implies 14 word length */

			else do;			/* user has seen something */
			     if in_elements ^= 14 then /* it was length and bcw */
				call dumper (2);	/* so dump first 14 words */
			end;

		     end;				/* having told user something about the file */
		     goto ask_copy;			/* go ask if it should be copied */

		end;				/* end ^skipit do group */

	     end;					/* end expecting next file do group */

	     else if expected_input = header_label then do; /* if expecting header label */
check_for_header:	if in_elements = 14 & wordone = "010111010101010000010000000110000000"b then do; /* (GE/b/b60) */
		     out_of_synch = "0"b;		/* just in case it was on */
		     expected_input = eof_after_header;
						/* translate filename to ascii */
		     call gcos_cv_gebcd_ascii_ (addr (label_model.filename), 12, addr (ascii_name), out_elements);
		     skipit = "0"b;
		     filecount = filecount+1;		/* bump file number */
		     if unspec (partial_label.zero_words) = ""b then do;
			skipit, eorsw = "1"b;	/* partial label indicates end of tape */
			call ioa_ ("Partial label (end of tape).");
		     end;
		     if filecount <= skipcount then
			skipit = "1"b;
		     if ^briefsw | ^skipit then
			if ^eorsw then call ioa_ ("File ^d. is ""^a""", filecount, ascii_name);

/*  Ask user if he wants to copy this file */
		     if ^skipit then do;
ask_copy:			err_msg = "Copy?";
ask:			call command_query_ (addr (query_info), answer, me, err_msg);
		     end;
		     if skipit | answer = "no" | answer = "n" then do;
			if no_label then		/* if unlabeled tape */
			     expected_input = eof_after_forward_file; /* skip to next file */
			else next_expected_input = eof_after_forward_file; /* else get past eof after header first */
		     end;

		     else if answer = "cancel" | answer = "quit" | answer = "q" then
			eorsw = "1"b;		/* pretend we hit end of reel */

		     else if answer ^= "yes" & answer ^= "y" then do; 
			err_msg = "Please answer ""yes"", ""no"", or ""quit"":";
			goto ask;
		     end;

		     else do;
			next_expected_input = data_to_be_copied;

			if dcwsw then do;		/* initialize dcw processing for new file */
			     notdcw = "0"b;
			     ndcw = 0;
			end;

			call command_query_ (addr (query_info), answer, me,
			     "Pathname of file to copy to:");
			pname = answer;		/* varying string to fixed length string */

			call ios_$attach ("gcpt_output", "file_", pname, "", st); /* attach file */
			if code ^= 0 then do;
			     err_msg = "from ios_$attach ^a";
file_error:					/* come here from other output file errors */
			     err_path = pname;
			     goto call_com_err;
			end;
			call ios_$setsize ("gcpt_output", 36, st); /* set element size to 1 word */
			if code ^= 0 then do;
			     err_msg = "from ios_$setsize 36 ^a";
			     goto file_error;
			end;
			call ios_$seek ("gcpt_output", "last", "first", 0, st); /* start at beginning of file */
			if code ^= 0 then do;
			     err_msg = "from ios_$seek last first ^a";
			     goto file_error;
			end;

			if no_label then		/* if no labels, we have the first data record */
			     goto copy_data;	/* so go copy it */

		     end;				/* end answer = yes */
		end;				/* end header label given */

		else do;				/* expected header label not found */
		     if read_count = 1 then do;
			if in_elements = 14 then
			     unexpected_input = label;
			else unexpected_input = data;
			call ioa_ ("^a: Unknown record (^d words) encountered when header label expected.",
			     me, in_elements);
			goto tape_out_of_synch;
		     end;
		     else if ^out_of_synch then
			call ioa_ (" ^a: Expected header label not found; will read until found", me);
		     else if in_elements ^= 14 then	/* if not some kind of label record */
			expected_input = eof_after_forward_file; /* then forward space to save time */
		end;
	     end;					/* end header label expected */

	     else if expected_input = trailer_label then do; /* if eof after file was read */
						/* then we are expecting and EOF or EOR label record */
		if in_elements = 14 & wordone = "010000010101100110010110010000010000"b then do; /* "/bEOF/b/b"? */
		     call ioa_ ("End of File");
		     expected_input = eof_after_trailer;
		end;

		else if in_elements = 14 & wordone = "010000010101100110101001010000010000"b then do; /* "/bEOR/b/b"? */
		     call ioa_ ("End of Reel");
		     eorsw = "1"b;			/* remember eor */
		end;

		else do;				/* neither EOR nor EOF - what is it? */
		     if out_of_synch then do;
			if in_elements = 14 then	/* might be header label! */
			     goto check_for_header;
			else expected_input = eof_after_forward_file;
		     end;
		     else call ioa_ ("^a trailer label missing. processing continues.", me);
		end;
	     end;					/* end trailer label expected */

	     else if expected_input = data_to_be_copied then do; /* if we were expecting a data record, copy it */
copy_data:	rec_count = rec_count + 1;		/* count tape records copied to file */
		if gsr then			/* if user so requested */
		     if in_elements < 320 then	/* we will pad short records */
			in_elements = 320;		/* out to 320 words */

/* When the argument -dcw is given, this code assumes a tape format system
   loadable file, as produced by SYSEDIT, determines what the record lengths
   should be by looking at the dcw blocks, and whenever it finds an input record
   one word longer than it should be, it subtracts 1 from the length before writing it. */

		if dcwsw				/* if user said -dcw */
		then if ^notdcw			/* and we have not found inconsistencies already */
		     then do;			/* then interpret dcw blocks */

			if ndcw = 0 then do;	/* if we are expecting a dcw block */
			     dcw_index = 1;
			     if in_elements > 64 then do; /* too long to be a dcw block */
				call ioa_ ("not dcw block: ^d words.", in_elements);
				goto not_dcw_block;
			     end;

			     else do;		/* length ok for dcw block */
				dcw_word_count = 0; /* sum of dcw.counts */
				do ndcw = 1 to 58;	/* max of 58 dcws, plus 6 others, for 64 word max */
				     dcw_word_count = dcw_word_count + fixed (dcw (ndcw).count);
				     if dcw (ndcw).action = "000"b then goto end_dcw_list;
				end;
end_dcw_list:
				dcw_block_len = ndcw + 6;
				if in_elements ^= dcw_block_len then do;
				     if in_elements = dcw_block_len + 1 /* the case we are looking for */
				     then in_elements = dcw_block_len; /* fix it */
				     else do;	/* otherwise we don't know what's happening */
					call ioa_ ("not dcw block: actual block length = ^d,
computed block length = ^d (^d dcws)",
					     in_elements, dcw_block_len, ndcw);
					goto not_dcw_block;
				     end;

				end;

				word_count = preface.reloc_words + preface.data_words;
				if dcw_word_count ^= word_count then do;
				     call ioa_ ("not dcw block: sum of dcw.counts = ^d,
but reloc + data words = ^d (^d + ^d)",
					dcw_word_count, word_count, preface.reloc_words, preface.data_words);
				     goto not_dcw_block;
				end;

			     end;

			end;

			else do;			/* expecting data block */

			     dcw_block_len = fixed (dcw (dcw_index).count);
			     if in_elements ^= dcw_block_len then do;
				if in_elements = dcw_block_len + 1 then /* the case we are looking for */
				     in_elements = dcw_block_len;
				else do;		/* ??? */
				     call ioa_ ("record length = ^d, dcw.count = ^d", in_elements, dcw_block_len);
				     goto not_dcw_block;
				end;
			     end;

			     dcw_index = dcw_index + 1;
			     if dcw_index > ndcw then /* if we just used the last dcw */
				ndcw = 0;		/* expect a dcw block next */

			end;			/* end expecting data block */

			goto write_output;

not_dcw_block:
			notdcw = "1"b;
			call ioa_ ("will continue copying with no further attempts to interpret dcws");

		     end;				/* end of entire dcw block interpreting code */

write_output:

		call ios_$write ("gcpt_output", buffp, 0, in_elements, out_elements, st); /* write out record into file */
		if code ^= 0 then do;
		     err_msg = "from ios_$write ^a";
		     goto file_error;
		end;
		if in_elements ^= out_elements then do;
		     err_msg = "wrong number of words written to ^a (^d words)";
		     numeric_arg = out_elements;
		     goto file_error;
		end;
	     end;					/* end of copy record do group */

	     else call ioa_ ("Program bug.");		/* can't be else, unless the programmer blew it */
	end copyloop;				/* end of main loop */

/* We fall thru here when eorsw is "1"b - i.e. an end of reel record was read
   (or the user said to quit and we turned it on before the end of the tape) */

	if retain then
	     call ioa_ ("^a: input tape will remain attached.", me);
	else do;
	     call ios_$detach ("gcpt_input", "", "", st);
	     if code ^= 0 then do;
		err_msg = "from ios_$detach ^a";
		goto tape_error;
	     end;
	end;

	return;					/* normal return */


/* END OF MAIN PROCEDURE */

cleanup_proc: proc;					/* called on cleanup condition, and after
						   any error in argument processing or I/O */
	     if retain then do;			/* if user said retain */
		if tape_is_attached then		/* and we do have a tape attached */
		     call ioa_ ("^a: input tape will remain attached", me); /* let him know it's there */
	     end;					/* and don't detach it */
	     else call ios_$detach ("gcpt_input", "", "", st);
	     call ios_$detach ("gcpt_output", "", "", st);
	     return;
	end cleanup_proc;

dumper:	proc (sw);
dcl  sw fixed bin;

	     if sw = 1 | sw = 3 then			/* print length and bcw */
		call ioa_ ("reclen = ^d, wordone = ^w", in_elements, wordone);

	     if sw = 2 | sw = 3 then			/* dump first 14 words of record */
		call ioa_ ("^3(^4(^w ^)^/^)^w ^w",
		w (1), w (2), w (3), w (4), w (5), w (6), w (7),
		w (8), w (9), w (10), w (11), w (12), w (13), w (14));

	     return;
	end dumper;

/* Allow user to hit QUIT, change the long or long_brief mode, and resume processing */

gcpt_long: gcptlg: entry;

dcl  state char (8) aligned;

	buffp = addr (buffer);
	long_brief = "0"b;
	longsw = ^longsw;
	if longsw then do;
	     state = "on";
	end;
	else do;
set_off:	     state = "off";
	end;
print_state: call ioa_ ("gcpt long mode set to ^a", state);
	return;

gcpt_long_brief: gcptlb: entry;

	buffp = addr (buffer);
	long_brief = ^long_brief;
	if long_brief then do;
	     longsw = "1"b;
	     state = "brief";
	     goto print_state;
	end;
	else do;
	     longsw = "0"b;
	     goto set_off;
	end;

     end gcos_pull_tapefile;
