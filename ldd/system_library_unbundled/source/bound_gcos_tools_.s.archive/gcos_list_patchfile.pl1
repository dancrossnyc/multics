/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* *******************************************************************************************
   *******************************************************************************************
   *
   *
   *	Written by M. R. Jordan, September 1977
   *
   *******************************************************************************************
   ******************************************************************************************* */




gcos_list_patchfile: glp: proc ();

dcl  ME char (19) static internal options (constant) init ("gcos_list_patchfile");
dcl  addr builtin;
dcl  arg char (arg_len) based (arg_ptr);
dcl  arg_index fixed bin;
dcl  arg_len fixed bin;
dcl  arg_ptr ptr;
dcl  ascii_module_name char (6);
dcl  bcd_to_ascii_ entry (bit (*), char (*));
dcl  code fixed bin (35);
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  dirname char (168);
dcl  ename char (32);
dcl  error_table_$bigarg fixed bin (35) ext;
dcl  error_table_$improper_data_format fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext;
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  gcos_cv_ascii_gebcd_ entry (ptr, fixed bin, ptr, fixed bin);
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  i fixed bin;
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  length builtin;
dcl  module_name bit (36);
dcl  module_name_index fixed bin;
dcl  nargs fixed bin;
dcl  null builtin;
dcl  number_of_patches fixed bin;
dcl  patch_file_ptr ptr;
dcl  patch_location char (12) varying;
dcl  patch_ptr ptr;
dcl  ptr builtin;
dcl  substr builtin;

dcl 1 patch (number_of_patches) aligned based (patch_ptr),
    2 location fixed bin (17),
    2 content fixed bin (35);


dcl 1 patch_file aligned based (patch_file_ptr),
    2 version fixed bin,
    2 number_of_names fixed bin,
    2 module (130560),
      3 name bit (36) unal,
      3 first_patch_offset bit (18) unal,
      3 number_of_patches fixed bin (17) unal;

	call cu_$arg_count (nargs);
	if nargs < 1 then do;
	     call com_err_ (error_table_$noarg, ME, "^/Usage is:  gcos_list_patchfile patchfile {modulename ...}");
	     return;
	end;


	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "referencing argument 1");
	     return;
	end;

	call Process_Patchfile_Name ();
	if code ^= 0 then return;


	if nargs = 1 then call Print_Patch_Cards ();
	else do;

	     call ioa_ ("^2/_m_o_d_u_l_e  _l_o_c_a_t_i_o_n  _c_o_n_t_e_n_t");

	     do arg_index = 2 to nargs;

		call cu_$arg_ptr (arg_index, arg_ptr, arg_len, code);
		if code ^= 0 then do;
		     call com_err_ (code, ME, "referencing argument ^d", arg_index);
		     return;
		end;

		if length (arg) > length (ascii_module_name) then do;
		     code = error_table_$bigarg;
		     call com_err_ (code, ME, """^a""", arg);
		end;

		ascii_module_name = arg;
		call gcos_cv_ascii_gebcd_ (addr (ascii_module_name), 6, addr (module_name), i);

		call Get_Module_Name_Index ();
		call List_Patches ();

	     end;

	end;


	return;

Process_Patchfile_Name: proc ();


	     call expand_pathname_ (arg, dirname, ename, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, """^a""", arg);
		return;
	     end;


	     call hcs_$initiate (dirname, ename, "", 0, 0, patch_file_ptr, code);
	     if patch_file_ptr = null () then do;
		call com_err_ (code, ME, """^a^[>^]^a""", dirname, (dirname ^= ">"), ename);
		return;
	     end;
	     else code = 0;


	     if patch_file.version ^= 1 then do;
		code = error_table_$improper_data_format;
		call com_err_ (code, ME, "patchfile version number is bad");
		return;
	     end;


	     return;


	end Process_Patchfile_Name;

Print_Patch_Cards: proc ();


	     do module_name_index = 1 to patch_file.number_of_names;


		call bcd_to_ascii_ (patch_file.module (module_name_index).name, ascii_module_name);
		patch_ptr = ptr (patch_file_ptr, patch_file.module (module_name_index).first_patch_offset);
		number_of_patches = patch_file.module (module_name_index).number_of_patches;


		do i = 1 to number_of_patches;

		     call ioa_$rsnnl ("^w", patch_location, 0, patch (i).location);
		     patch_location = substr (patch_location, 7, 6);
		     call ioa_ ("^6a^1xoctal^3x^w^45x^6a", patch_location, patch (i).content, ascii_module_name);

		end;


	     end;


	     return;


	end Print_Patch_Cards;

Get_Module_Name_Index: proc ();


dcl  l fixed bin;
dcl  u fixed bin;
dcl  floor builtin;
dcl  divide builtin;


	     l = 1;
	     u = patch_file.number_of_names;


	     do while (u >= l);

		module_name_index = floor (divide ((l+u), 2, 17));

		if module_name < patch_file.module (module_name_index).name then u = module_name_index-1;
		else if module_name > patch_file.module (module_name_index).name then l = module_name_index+1;
		else return;

	     end;


	     module_name_index = 0;


	     return;


	end Get_Module_Name_Index;

List_Patches: proc ();


	     if module_name_index > patch_file.number_of_names | module_name_index < 1 then do;
		call ioa_ ("^2/^6a^3xNO PATCHES", ascii_module_name);
		return;
	     end;


	     patch_ptr = ptr (patch_file_ptr, patch_file.module (module_name_index).first_patch_offset);
	     number_of_patches = patch_file.module (module_name_index).number_of_patches;


	     call ioa_ ("^2/^6a^3x^6o^3x^w", ascii_module_name, patch (1).location, patch (1).content);


	     do i = 2 to number_of_patches;

		call ioa_ ("^9x^6o^3x^w", patch (i).location, patch (i).content);

	     end;


	     return;


	end List_Patches;


     end gcos_list_patchfile;
