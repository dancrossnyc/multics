/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


dump_gcos: dgc: proc;

/* Command to dump a GCOS standard system format file, doing less printing
   than dump_segment or dump_segment -bcd.

   USAGE: dgc pathname -octal_offset- -bcd -line_length (-ll) n

   If octal offset is omitted, it defaults to zero. If it is given, it is
   rounded DOWN to the beginning of the 320 (decimal) word block in which
   it falls. Dumping always begins on a 320-word boundary.

   Dumping will proceed until the user QUIT's, or until an end of file (octal 17)
   is found (in which case the user will be given the choice of quitting or
   continuing), or a block control word of all zeros is found, which always
   terminates the dump.

   If -bcd (or -ch) is given, the contents of BCD or ASCII records is printed
   (the BCD being converted to ASCII for printing), preceeded by the rcw and its
   offset. For binary card records, the offset and rcw, and the words BINARY CARD
   are printed.

   If -bcd is not given, just bcw and rcws (and their offsets) are printed.

   The -line_length n argument may be used to control the number of rcws placed
   on each line. The default is 80, which is room for 4 rcws and their offsets.
   Once set, the line length is remembered in internal static for the remainder
   of the process.

   WRITTEN BY	T. Casey		July 1974

   MODIFIED BY	S. Akers		September 1981

				Changed error_table_$badarg
				to error_table_$badopt.

				Fixed "USAGE" error to prevent
				garbage in error message.

*/

/* D E C L A R A T I O N S  */

/* External Entries */

dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl (cv_dec_check_, cv_oct_check_) entry (char (*), fixed bin (35)) returns (fixed bin);
dcl (ioa_, com_err_) entry options (variable);
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl (bcdmp, bcdmp$gcdmp) entry (ptr);
dcl  bcdmp$set_max_line_len entry (fixed bin);
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));

/* Work Variables */
dcl  argp ptr;
dcl  argl fixed bin;
dcl  arg char (argl) based (argp);
dcl (argno, nargs) fixed bin;

dcl  code fixed bin (35);

dcl  err_msg char (200) varying;
dcl  err_arg char (168);
dcl  numeric_arg fixed bin;
dcl  given_path char (168) init ("");
dcl  dirname char (168);
dcl  ename char (32);

dcl  offset fixed bin init (0);
dcl (bcdsw, expecting_ll) bit (1) aligned init ("0"b);

dcl (error_table_$noarg, error_table_$badopt) ext fixed bin (35);

dcl  plen fixed bin;
dcl  segptr ptr init (null);
dcl  bitcount fixed bin (24);
dcl  callptr ptr;

dcl (addr, divide, null, ptr) builtin;

dcl  cleanup condition;

/* P R O C E D U R E */

	on condition (cleanup) begin;
	     if segptr ^= null then
		call hcs_$terminate_noname (segptr, code);
	end;

	call cu_$arg_count (nargs);
	if nargs = 0
	then do;
	     code = 0;
	     err_msg = "USAGE: dgc path offset -bcd -line_length n";
call_com_err:  call com_err_ (code, "dump_gcos", err_msg, err_arg, numeric_arg);
exit:	     if segptr ^= null then do;
		call hcs_$terminate_noname (segptr, code);
		if code ^= 0 then do;
		     err_msg = "from hcs_$terminate_noname ^a";
		     segptr = null;			/* avoid infinite loop */
show_expanded_path:					/* come here from below */
		     err_arg = substr (dirname, 1, index (dirname, " ")-1) || ">"
			|| substr (ename, 1, index (ename, " ")-1);
		     goto call_com_err;
		end;
	     end;
	     return;
	end;

arg_loop:	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, argp, argl, code);
	     if code ^= 0 then do;
		err_msg = "from cu_$arg_ptr ^s^d";
		numeric_arg = argno;
		goto call_com_err;
	     end;

	     if expecting_ll then do;
		expecting_ll = "0"b;
		numeric_arg = cv_dec_check_ (arg, code);
		if code ^= 0 then do;
		     code = 0;			/* not an error_table_ code */
		     err_msg = "bad line length argument: ^a";
		     err_arg = arg;
		end;

		call bcdmp$set_max_line_len (numeric_arg);
	     end;

	     else if substr (arg, 1, 1) = "-" then do;	/* control */
		if arg = "-bcd" | arg = "-ch" then
		     bcdsw = "1"b;
		else if arg = "-ll" | arg = "-line_length" then
		     expecting_ll = "1"b;
		else do;
		     code = error_table_$badopt;
		     err_arg = arg;
		     err_msg = "^a";
		     goto call_com_err;
		end;
	     end;					/* end control arg */

	     else do;				/* path or offset */
		numeric_arg = cv_oct_check_ (arg, code);
		if code ^= 0 then do;		/* not an octal number */
		     if given_path = "" then do;	/* if path not already given */
			given_path = arg;		/* assume this is it */
			plen = argl;		/* for expand_path_ */
		     end;

		     else do;
			if offset ^= 0 then		/* if offset given already */
			     err_msg = "unknown argument: ^a";
			err_arg = arg;
			goto call_com_err;
		     end;
		end;				/* end code ^= 0 */

		else offset = numeric_arg;
	     end;

	end arg_loop;

	if expecting_ll then do;
	     err_msg = "line length, after ^a";
	     err_arg = arg;
noarg:	     code = error_table_$noarg;
	     goto call_com_err;
	end;

	if given_path = "" then do;
	     err_msg = "pathname of file to be dumped";
	     goto noarg;
	end;

	call expand_path_ (addr (given_path), plen, addr (dirname), addr (ename), code);
	if code ^= 0 then do;
	     err_msg = "from expand_path_ ^a";
	     err_arg = given_path;
	     goto call_com_err;
	end;

	call hcs_$initiate_count (dirname, ename, "", bitcount, 0, segptr, code);
	if segptr = null then do;
	     err_msg = "from hcs_$initiate_count ^a";
	     goto show_expanded_path;
	end;
	else code = 0;				/* clear possible segknown */

	bitcount = divide (bitcount-1, 36, 17, 0);	/* compute offset of last word, from bitcount */
	if offset > bitcount then do;
	     call com_err_ (0, "dump_gcos", "offset (^o) is past last word (^o); last block will be dumped.", offset, bitcount);
	     offset = bitcount;
	end;

	callptr = ptr (segptr, offset);

	if bcdsw then
	     call bcdmp (callptr);
	else call bcdmp$gcdmp (callptr);

	goto exit;

end dump_gcos;
