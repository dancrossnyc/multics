/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-07,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     85-04-22  JG Backs: Deleted the parameter from xmail_Mail_File_Maint_
     references.  This parameter was not needed and was being passed a null
     string.
  2) change(86-01-07,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Set the flag to allow users to read their own mail in other people's
     mailboxes just before choosing the option to select other files.
  3) change(87-01-19,Blair), approve(87-02-05,MCR7618),
     audit(87-04-10,RBarstad), install(87-04-26,MR12.1-1025):
     Determine whether we should look at all messages in the mailbox or just
     ordinary ones before checking to see if there are any messages in the box.
                                                   END HISTORY COMMENTS */


xmail_Executive_Mail_: proc;

/* BEGIN DESCRIPTION

history:
   Author unknown.

   81-07-20  Paul Kyzivat: Modified to add Review Defaults.

   81-07-21  Paul Kyzivat: Modified to add option help.

   83-06-27  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes.

   83-10-06  DJ Schimke: Replaced call to xmail_get_line_ and associated code
   which asked a yes_no question with a call to xmail_get_str_$yes_no.

   84-01-04  DJ Schimke: Corrected the order of the arguments to ioa_$rsnnl
   reported in phx16645. Replaced the (0) in the ioa_$rsnnl calls with a new
   variable "unused_return_length".

   84-07-02  DJ Schimke: Removed call to clear the user_i/o window when setting
   up. It is not necessary (all the winodws are cleared individually) and was
   causing the status window to not be displayed properly. This is part of the
   change for xmail error #92.

   84-07-03  DJ Schimke: Modified the call to xmail_create_menu_ to add the
   N_COLUMNS parameter.

END DESCRIPTION
*/

/* AUTOMATIC */

	dcl     display_needed	 bit (1) aligned;
	dcl     choice		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     yes_sw		 bit (1) aligned;
	dcl     (ordinary_message_count, total_message_count, message_count) fixed bin;
	dcl     prompt_string	 char (100) var;
	dcl     response		 char (3) varying;	/* yes no or ask */          
	dcl     unused_return_length	 fixed bin (21);
          dcl     treat_msgs_as_mail     bit (1) aligned;
		   
/* CONSTANTS */

          dcl     MSGS_AS_MAIL           char (15) int static options (constant) init ("msgs_as_mail_yn");
	dcl     NAME		 init ("xmail_Executive_Mail_") char (21) int static options (constant);
	dcl     N_COLUMNS		 fixed bin int static options (constant) init (2);
	dcl     OPTION_NAMES	 int static options (constant) init (  
				 "Process Incoming Mail",
				 "Send Mail",
				 "Process Filed Mail",
				 "Mailing Lists",
				 "Review Mail Files",
				 "Personalize Exec Mail",
				 "Getting Started"
				 ) dim (7) char (24) varying;

/* BUILTINS */

	dcl     (null, sum, translate) builtin;

/* CONDITIONS */

	dcl     (cleanup, program_interrupt, quit, xmail_leave_menu, xmail_redisplay_menu) condition;

/* ENTRIES */

	dcl     ioa_		 entry options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     mail_system_$get_message_counts entry (char (*), char (*), bit (1) aligned, fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl     xmail_display_help_	 entry (char (*), char (*), fixed bin (35));
	dcl     xmail_display_menu_	 entry (ptr, fixed bin, fixed bin (35));
	dcl     xmail_get_choice_	 entry (ptr, char (*), char (*), char (*), char (*), bit (1) aligned, char (*), fixed bin, fixed bin (35));
	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);
          dcl     xmail_value_$get_with_default entry (char(*), char(*) var, char(*) var, fixed bin(35));
	dcl     xmail_error_$code_first entry () options (variable);
		   

/* EXTERNAL STATIC */

	dcl     iox_$user_output	 ptr external static;
	dcl     xmail_err_$help_requested ext static fixed bin (35);
	dcl     xmail_err_$exit_now	 ext static fixed bin (35);

/* INTERNAL STATIC */

	dcl     menu		 int static ptr init (null);

/* INCLUDE FILES */

%include star_structures;
%page;
%include menu_dcls;
%page;
%include xmail_data;
%page;
%include window_dcls;
%page;
%include xmail_windows;
%page;
%include xmail_responses;

/* START */

	star_names_ptr = null ();
	star_entry_ptr = null ();
	on condition (cleanup) call CLEAN_UP;

	on condition (xmail_leave_menu) ;

	on condition (xmail_redisplay_menu) begin;
		if menu ^= null
		then call menu_$display (xmail_windows.menu.iocb, menu, (0)); /* ignore error */
	     end;

	if menu ^= null then call xmail_display_menu_ (menu, 1, code);

	else call GET_MENU ();
	on condition (program_interrupt) go to START;
	on condition (quit)
	     begin;
		dcl     xmail_window_manager_$reconnect entry ();
		call xmail_window_manager_$reconnect ();
		go to START;
	     end;

START:	display_needed = "1"b;
	do while ("1"b);
	     call xmail_get_choice_ (menu, "", "", "", xmail_data.normal_usage, display_needed, "", choice, code);
	     display_needed = "0"b;
	     if code = 0 then call PERFORM_OPTION (choice, display_needed);
	     else if code = xmail_err_$help_requested then call EXPLAIN_OPTION (choice);
	     else if code = xmail_err_$exit_now then go to EXIT;
	     else call window_$bell (iox_$user_output, (0)); /* ignore error */
	end;

EXIT:	return;

/* INTERNAL PROCEDURES */

PERFORM_OPTION: proc (opt, redisplay);

	dcl     what_next		 char (9);
	dcl     opt		 fixed bin;
	dcl     redisplay		 bit (1) aligned;

	dcl     xmail_Process_Mail_	 entry (char (9), bit (1) aligned);
	dcl     xmail_Send_Mail_	 entry (char (9));
	dcl     xmail_Consult_Files_	 entry ();
	dcl     xmail_Review_Defaults_ entry ();
	dcl     xmail_Review_Mlist_	 entry ();
	dcl     xmail_Mail_File_Maint_ entry ();
	dcl     xmail_Getting_Started_ entry ();
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));


	call window_$clear_window (iox_$user_output, (0));/* ignore error */
	go to OPT (opt);

OPT (1):
	xmail_data.mail_in_incoming = "1"b;
/* Determine if we want all msgs or just ordinary ones */
	call xmail_value_$get_with_default (MSGS_AS_MAIL, (NO), response, code);
	if code ^= 0 then call xmail_error_$code_first (code, NAME, "q",
		"^/Unable to get a value for ""^a"" in the xmail value segment.", MSGS_AS_MAIL);

	treat_msgs_as_mail = "0"b;
	if response = YES
          then do;
	     treat_msgs_as_mail = "1"b;
	     xmail_data.msgs_as_mail = "1"b;
	     end;
	else if response = ASK
	then do;
		call xmail_get_str_$yes_no ("Do you wish to treat interactive msgs as mail? ", yes_sw);
		if yes_sw then do;
		     treat_msgs_as_mail = "1"b;
		     xmail_data.msgs_as_mail = "1"b;
		     end;
	     end;
	else xmail_data.msgs_as_mail = "0"b;

/* Open the mailbox and set the first current message to one */

	call mail_system_$get_message_counts ((xmail_data.mail_dir), "incoming", "1"b, total_message_count, ordinary_message_count, (0), code);
	if treat_msgs_as_mail then message_count = total_message_count;
	else message_count = ordinary_message_count;
	if message_count = 0
	then do;
	     xmail_data.mail_in_incoming = "0"b;
	     call iox_$control (iox_$user_output, "reset_more", null, (0)); /* ignore error */
	     call ioa_ ("There are no messages in your ""incoming"" mailbox.");
	     call hcs_$star_ ((xmail_data.mail_dir), "*.mbx", star_ALL_ENTRIES, null (), star_entry_count, (null ()), (null ()), code);
	     if star_entry_count <= 1 then go to OPT_EXIT;
	     call ioa_$rsnnl ("Still wish to go to ""Process Incoming Mail""?  (y,n) ", prompt_string, unused_return_length);
	     call xmail_get_str_$yes_no (prompt_string, yes_sw);
	     if yes_sw then call window_$clear_window (iox_$user_output, code);
	     else go to OPT_EXIT;
	end;
	what_next = "";
	redisplay = "1"b;
	call xmail_Process_Mail_ (what_next, treat_msgs_as_mail);
	if what_next = "send_mail" then go to OPT (2);
	go to OPT_EXIT;

OPT (2):	what_next = "";
	redisplay = "1"b;
	call xmail_Send_Mail_ (what_next);
	if what_next = "proc_mail" then go to OPT (1);
	go to OPT_EXIT;

OPT (3):	redisplay = "1"b;
	xmail_data.foreign_mailbox = "1"b;
	call xmail_Consult_Files_ ();
	xmail_data.foreign_mailbox = "0"b;
	go to OPT_EXIT;

OPT (4):	redisplay = "1"b;
	call xmail_Review_Mlist_ ();
	go to OPT_EXIT;

OPT (5):	redisplay = "1"b;
	call xmail_Mail_File_Maint_ ();
	go to OPT_EXIT;

OPT (6):	redisplay = "1"b;
	call xmail_Review_Defaults_;
	go to OPT_EXIT;

OPT (7):	redisplay = "1"b;
	call xmail_Getting_Started_ ();
	go to OPT_EXIT;

OPT_EXIT: return;
     end PERFORM_OPTION;


EXPLAIN_OPTION: proc (opt);

	dcl     opt		 fixed bin;

	call window_$clear_window (iox_$user_output, (0));/* ignore error */
	call xmail_display_help_ (NAME || ".gi.info",
	     translate (OPTION_NAMES (opt), "_", " "),
	     (0));				/* ignore error */
	return;

     end EXPLAIN_OPTION;

GET_MENU: proc;

	dcl     title		 char (xmail_windows.menu.width) var;

	dcl     status		 fixed bin (35);

	dcl     xmail_error_$no_code	 entry options (variable),
	        xmail_create_menu_	 entry (char (*), (*) char (*) var, fixed bin, ptr, fixed bin (35));

	call ioa_$rsnnl ("Executive Mail (Version ^a)", title, unused_return_length, xmail_version);

	call xmail_create_menu_ ((title), OPTION_NAMES, N_COLUMNS, menu, status);
	if status ^= 0
	then call xmail_error_$no_code (status, NAME, "q",
		"A programming error has been detected which prevents " ||
		"the use of the ^a menu.", title);	/* never returns */
	call xmail_display_menu_ (menu, 1, code);

	return;
     end GET_MENU;

CLEAN_UP: proc;
	if star_names_ptr ^= null () then free star_names;/* order is important */
	if star_entry_ptr ^= null () then free star_entries;
     end CLEAN_UP;

    end xmail_Executive_Mail_;

