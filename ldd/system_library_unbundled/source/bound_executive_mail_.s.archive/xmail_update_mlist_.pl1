/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-04-16,Blair), approve(86-04-16,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Remove unreferenced constants.
                                                   END HISTORY COMMENTS */


xmail_update_mlist_: proc (P_dir, P_file);

/* BEGIN DESCRIPTION

History:       Author unknown

   83-10-26 DJ Schimke: Added quit condition handler with a call to
   xmail_window_manager_$quit_handler to special-case the reconnect condition 
   which should NOT interrupt processing after the quit. phx 13227  This entry
   also prompts when not at a reconnect condition so that unintentionally
   hitting the BREAK won't throw away any pending work. phx 13018

   84-09-24 JG Backs: Added code before and after the call to emacs_ to test
   if menus should be removed before editing (personalization option Remove
   Menus While Editing).  If option is in effect, calls to new entrypoints,
   $suppress_menu and $restore_menu in xmail_window_manager_ are made. Also
   added test in quit handler to make sure restore menus is done if quit in
   editor.

END DESCRIPTION
*/

/* PARAMETERS */

	dcl     (P_dir, P_file)	 char (*);

/* AUTOMATIC */

	dcl     code		 fixed bin (35);
	dcl     restore_menu_needed	 bit (1) aligned;	/* if remove menu */
	dcl     seg_pname		 char (168);

/* BUILTINS */

	dcl     (codeptr, null, rtrim) builtin;

/* ENTRIES */

	dcl     com_err_$suppress_name entry () options (variable);
	dcl     emacs_		 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$make_ptr	 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     xmail_redisplay_$menu	 entry ();
	dcl     xmail_window_manager_$quit_handler entry () returns (bit (1) aligned);
	dcl     xmail_window_manager_$reconnect entry ();
	dcl     xmail_window_manager_$restore_menu entry ();
	dcl     xmail_window_manager_$suppress_menu entry ();

/* INTERNAL STATIC */

	dcl     ext_dir		 char (168) int static;
	dcl     ext_file		 char (32) int static;
	dcl     ext_pname		 char (168) int static;
	dcl     ext_ptr		 ptr init (null) int static;

/* EXTERNAL STATIC */

	dcl     iox_$user_io	 ptr ext static;
	dcl     xmail_err_$int_prog_err fixed bin (35) ext static;

/* CONSTANTS */

	dcl     EXTENSION_ENAME	 char (22) init ("xmail_emacs_ext_mlist_") int static options (constant);
	dcl     ME_CHAR		 char (19) init ("xmail_update_mlist_") int static options (constant);
	dcl     ME_ENTRY		 entry variable init (xmail_update_mlist_);

/* CONDITIONS */

	dcl     (quit)		 condition;

/* INCLUDE FILES */

%include xmail_data;

/* BEGIN */

	restore_menu_needed = "0"b;
	if ext_ptr = null
	then do;
	     call hcs_$make_ptr (codeptr (ME_ENTRY), EXTENSION_ENAME, "", ext_ptr, code);
	     if code ^= 0 then call update_mlist_err (xmail_err_$int_prog_err, "Trying to locate extension.");
	     call hcs_$fs_get_path_name (ext_ptr, ext_dir, (0), ext_file, code);
	     if code ^= 0 then call update_mlist_err (xmail_err_$int_prog_err, "Trying to get extension pathname");
	     ext_pname = rtrim (ext_dir) || ">" || rtrim (EXTENSION_ENAME);
	end;

	on condition (quit)
	     begin;
		if xmail_window_manager_$quit_handler ()
		then do;
		     if restore_menu_needed
		     then do;
			call xmail_window_manager_$restore_menu;
			call xmail_redisplay_$menu;
		     end;
		     go to EXIT;
		end;
	     end;

	seg_pname = rtrim (P_dir) || ">" || rtrim (P_file);

	call ioa_ ("... Please wait for editor ...");

/* Check personalization option to remove and restore menus while editing */

	if xmail_data.remove_menus
	then do;
	     call xmail_window_manager_$suppress_menu ();
	     restore_menu_needed = "1"b;
	end;

	call emacs_ (iox_$user_io, seg_pname, ext_pname, null, code);

	if restore_menu_needed
	then do;
	     call xmail_window_manager_$restore_menu ();
	     call xmail_redisplay_$menu;
	     restore_menu_needed = "0"b;
	end;

	if code ^= 0 then call xmail_window_manager_$reconnect ();

EXIT:

	return;

%page;
/* INTERNAL PROCEDURES */

update_mlist_err: proc (P_code, P_str);

	dcl     P_code		 fixed bin (35);
	dcl     P_str		 char (*);

	call com_err_$suppress_name (P_code, ME_CHAR);
	go to EXIT;

     end update_mlist_err;

     end xmail_update_mlist_;



