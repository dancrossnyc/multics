/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-07,Blair), approve(86-02-26,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     85-03-25 JG Backs: Modified xmail_upgrade internal procedure to initialize
     values for new personalize options: confirm_print_yn, include_original_yn,
     file_original_yn.  Combined duplicate code for setting default values into
     one internal procedure SET_DEFAULT, which is called for all options that
     set yes, no, or ask.
  2) change(86-01-07,Blair), approve(86-02-26,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Add code to set default for allowing suppression of upper window
     when replying.
  3) change(86-02-26,Blair), approve(86-02-26,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Change call to hcs_$make_seg to initiate_file_$create.  If the value
     segment cannot be initiated and the error is due to incorrect access, call
     the rebuild_xmail_value_seg_ routine to create a new value seg in the
     process dir.
  4) change(86-03-18,Blair), approve(86-03-18,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Make close_dir use the pathname of the value segment rather than a ptr to
     it.
  5) change(86-06-27,Blair), approve(86-07-15,MCR7447),
     audit(86-07-16,LJAdams), install(86-07-21,MR12.0-1100):
     Force access for xmail.errors if necessary when containing dir has "sma".
     TR 18355.  Don't check for execution access on the value segment since
     this causes problems when the user is in a different ring than the seg. TR
     20418.
  6) change(87-01-20,Blair), approve(87-02-05,MCR7618),
     audit(87-04-10,RBarstad), install(87-04-26,MR12.1-1025):
     Initialize msgs_as_mail to its default as part of updating version 4.1.
  7) change(88-06-28,Blair), approve(88-07-27,MCR7959),
     audit(88-08-30,RBarstad), install(88-09-02,MR12.2-1098):
     Fix various access bugs.  Call new entry  xmail_rebuild_value_seg_$copy
     when we  have read and no write access to to mlsys value seg. Add acls as
     necessary rather than replacing them each time xmail is invoked.
     Create the error segment in the pdir if we can't force access to the
     mlsys directory.
                                                   END HISTORY COMMENTS */

xmail_dir_manager_: proc ();

/* BEGIN DESCRIPTION */

/***********************************************************************

     This subroutine has two entrypoints:

          open_dir --  makes sure that the xmail directory exists with
		   the proper contents (at least the following:
		   incoming.mbx link to the users default mbx,
		   outgoing.sv.mbx, xmail_data.value).
          close_dir -- cleans up the directory after use.

     Some information in the xmail_data structure is used by this
     subroutine and must be initialized prior to invocation.  The
     information that must be initialized is as follows:

          For open_dir:

               xmail_data.person
               xmail_data.project

          For close_dir:

	     xmail_data.value_seg

     The following information is initialized by open_dir:

          xmail_data.value_seg
          xmail_data.mail_dir

  ***********************************************************************/

/* History:      Written by Suzanne Krupp 1/11/81

   83-08-11 DJ Schimke: Modified to use Person_id.mlsys as the xmail directory
   rather than Person_id.xmail.  If Person_id.xmail already existed the new
   name is added. Mailing lists have an added name with ".mls" as the suffix
   and the error_log segment is now xmail.error.

   83-09-14 DJ Schimke: Modified the error code handling of the value_$init
   call to ignore a "Segment already known to process" error. phx12785

   83-09-15 DJ Schimke: Modified the error code handling of the hcs_$make_seg
   call to report an inconsistent xmail directory instead of just saying it is
   an internal error when the user doesn't have access to xmail_data.value.
   phx12665

   83-09-15 DJ Schimke: Modified so user's xmail_data.value segment has access
   of Person_id.*.* rew rather than Person_id.Project_id.* rew. phx15877

   83-11-30 DJ Schimke: Modified to set the default values for the "Outgoing 
   Savefile" and "Save Outgoing Messages" personalization options if they have 
   never been set. This greatly simplifies the code that must handle these 
   options later. These changes and other "one-time" conversion code was 
   consolidated into the internal proc xmail_upgrade which compares the version
   number before deciding to make changes.
	   
   83-12-07 DJ Schimke: Modified xmail_upgrade to also initialize the value
   for acknowledge_yn if it has never been set.

   83-12-12 DJ Schimke: Modified to only look for the link to incoming_mbx (not
   chase) when determining whether to create the link.

   84-06-26 JG Backs: Modified the error code handling of hcs_$append_branchx
   call to report a user friendly message when the aim level of the home
   directory and the current process are different. TR phx17650.

   84-09-12 JG Backs: Modified internal procedure xmail_upgrade to initialize
   values for personalize options: lists_as_menus_yn, interactive_msgs_yn,
   always_escape_keys_yn, multics_mode_yn, remove_menus_yn.

   84-10-24 JG Backs: Modified the error code handling of the call to hcs_
   $status_long to accept error_table_$no_s_permission as valid.  This will
   permit users to link to mlsys or xmail directories under other projects
   without having "s" permission on the above directory.



END DESCRIPTION
*/

/* AUTOMATIC */

          dcl     a_mode                 bit (36) aligned;
	dcl     aim_code		 fixed bin (35);
	dcl     aim_dir_entry	 char (32);
	dcl     aim_home_dir	 char (168);
	dcl     aim_level_dir	 bit (72) aligned;
	dcl     aim_level_proc	 bit (72) aligned;
	dcl     aim_level_string	 char (32);
	dcl     answer_yn		 char (3) var;	/* value of yes, no, or ask */
	dcl     area_ptr		 ptr;
	dcl     bit_count		 fixed bin (24);
	dcl     code		 fixed bin (35);
          dcl     created_sw             bit (1) aligned;
	dcl     default_mbx		 char (32) var;
	dcl     error_seg_ptr	 ptr;
          dcl     ex_mode                bit (36) aligned;
	dcl     home_dir		 char (168);
	dcl     idx		 fixed bin;
	dcl     mlsys_dir_entry	 char (32);
	dcl     mlsys_dir_exists	 bit (1);
	dcl     mlsys_dir_path	 char (168);
	dcl     mlsys_dir_uid	 bit (36);
	dcl     save_mailbox	 char (32) var;
	dcl     save_message	 char (32) var;
	dcl     seg_name		 char (32);
	dcl     target		 char (168);
	dcl     user_name		 char (35) var;
	dcl     type		 fixed bin (2);
	dcl     unused_return	 char (32) var;
	dcl     user_project	 char (32) var;
	dcl     value_seg_ptr	 ptr;
	dcl     version		 char (32) var;
	dcl     xmail_dir_entry	 char (32);
	dcl     xmail_dir_exists	 bit (1);
	dcl     xmail_dir_path	 char (168);
	dcl     xmail_dir_uid	 bit (36);

	dcl     1 auto_status_branch	 like status_branch;
	dcl     1 auto_segment_acl_array automatic like segment_acl_entry;

/* BUILTINS */

	dcl     (addr, after, index, ltrim, null, rtrim, reverse, substr, sum)
				 builtin;

/* CONDITIONS */

	dcl     cleanup		 condition;

/* ENTRIES */

	dcl     aim_check_$equal	 entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
	dcl     com_err_		 entry () options (variable);
	dcl     convert_authorization_$to_string entry (bit (72) aligned, char (*), fixed bin (35));
	dcl     delete_$path	 entry (char (*), char (*), bit (6), char (*), fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_authorization_	 entry () returns (bit (72) aligned);
          dcl     get_pdir_              entry() returns(char(168));
	dcl     get_ring_		 entry () returns (fixed bin (3));
	dcl     get_system_free_area_	 entry () returns (ptr);
          dcl     hcs_$add_acl_entries   entry (char(*), char(*), ptr, fixed bin, fixed bin(35));
	dcl     hcs_$append_branchx	 entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
	dcl     hcs_$append_link	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$chname_file	 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$get_access_class	 entry (char (*), char (*), bit (72) aligned, fixed bin (35));
          dcl     hcs_$get_user_access_modes entry (char(*), char(*), char(*), fixed bin, bit(36) aligned, bit(36) aligned,
	fixed bin(35));
	dcl     hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
	dcl     hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
          dcl     initiate_file_$create  entry (char(*), char(*), bit(*), ptr, bit(1) aligned, fixed bin(24), fixed bin(35));
	dcl     mlsys_utils_$create_mailbox entry (char (*), char (*), fixed bin (35));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	dcl     user_info_$homedir	 entry (char (*));
	dcl     value_$init_seg	 entry (ptr, fixed bin, ptr, fixed bin (19), fixed bin (35));
          dcl     xmail_rebuild_value_seg_ entry (ptr, fixed bin (35));
          dcl     xmail_rebuild_value_seg_$copy entry (ptr, fixed bin (35));
	dcl     xmail_value_$get_no_validate entry (char (*), char (*) var, fixed bin (35));
	dcl     xmail_value_$set	 entry (char (*), char (*) var, char (*) var, fixed bin (35));

/* EXTERNAL STATIC */

	dcl     error_table_$ai_restricted fixed bin (35) ext static;
	dcl     error_table_$badcall	 fixed bin (35) ext static;
	dcl     error_table_$incorrect_access fixed bin (35) ext static;
	dcl     error_table_$moderr	 fixed bin (35) ext static;
	dcl     error_table_$namedup	 fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext static;
	dcl     error_table_$nomatch	 fixed bin (35) ext static;
	dcl     error_table_$no_s_permission fixed bin (35) ext static;
          dcl     error_table_$no_r_permission fixed bin (35) ext static;
	dcl     error_table_$no_w_permission fixed bin (35) ext static;
	dcl     error_table_$segknown	 fixed bin (35) ext static;
	dcl     error_table_$segnamedup fixed bin (35) ext static;
	dcl     xmail_err_$exit_now	 fixed bin (35) ext static;

/* CONSTANTS */

	dcl     ASK		 char (3) init ("ask") int static options (constant);
	dcl     CHASE		 fixed bin (1) init (1) int static options (constant);
	dcl     CREATE_DIR		 fixed bin (1) init (1) int static options (constant);
	dcl     ERROR_LOG_SEGMENT	 char (11) init ("xmail.error") int static options (constant);
	dcl     INCOMING_MBX	 char (32) var init ("incoming.mbx") int static options (constant);
	dcl     MBX_SUFFIX		 char (4) init (".mbx") int static options (constant);
	dcl     MLSYS_DIR_SUFFIX	 char (6) init (".mlsys") int static options (constant);
	dcl     NO		 char (2) init ("no") int static options (constant);
	dcl     NO_CHASE		 fixed bin (1) init (0) int static options (constant);
	dcl     PERMANENT_SEG	 fixed bin int static options (constant) init (0);
	dcl     SEG_FORCE		 bit (6) init ("100100"b) int static options (constant);
	dcl     SYSTEM_LOW		 char (32) init ("system_low") int static options (constant);
	dcl     TERM_FILE_TRUNC_BC	 bit (2) static options (constant) initial ("11"b);
	dcl     USE_ENTIRE_SEG	 fixed bin (19) int static options (constant) init (0);
	dcl     VALUE_SEG_NAME	 char (32) var init ("xmail_data.value") int static options (constant);
	dcl     VERSION		 char (7) init ("version") int static options (constant);
	dcl     XMAIL_DIR_SUFFIX	 char (6) init (".xmail") int static options (constant);
	dcl     YES		 char (3) init ("yes") int static options (constant);
	dcl     (
	/*** names of personalization options ***/
	        ACKNOWLEDGE		 char (14) init ("acknowledge_yn"),
	        ALWAYS_ESCAPE	 char (21) init ("always_escape_keys_yn"),
	        CONFIRM_PRINT	 char (19) init ("confirm_print_yn"),
	        FILE_ORIGINAL	 char (16) init ("file_original_yn"),
	        INCLUDE_ORIGINAL	 char (19) init ("include_original_yn"),
	        ORIGINAL_IN_WINDOW     char (21) init ("original_up_window_yn"),
	        INTERACTIVE_MSGS	 char (19) init ("interactive_msgs_yn"),
	        LISTS_AS_MENUS	 char (17) init ("lists_as_menus_yn"),
                  MSGS_AS_MAIL           char (15) init ("msgs_as_mail_yn"),
	        MULTICS_MODE	 char (15) init ("multics_mode_yn"),
	        OUTGOING_SV_BOX	 char (32) init ("outgoing.sv.mbx"),
	        REMOVE_MENUS	 char (15) init ("remove_menus_yn"),
	        SAVE_MAILBOX	 char (15) init ("save_mailfile"),
	        SAVE_MESSAGE	 char (15) init ("save_message_yn")
	        )			 static options (constant);

%skip (3);
/* BEGIN */

	call com_err_ (error_table_$badcall, "xmail_dir_manager_", "This is not a valid entrypoint.");
	return;

open_dir: entry (code);

	code = 0;

	star_names_ptr = null ();
	star_entry_ptr = null ();
	on condition (cleanup) call CLEAN_UP;

	user_name = xmail_data.person;
	user_project = xmail_data.project;
	call user_info_$homedir (home_dir);

/* Find out if the xmail and mlsys directories exist in the home dir. */

	xmail_dir_entry = user_name || XMAIL_DIR_SUFFIX;
	mlsys_dir_entry = user_name || MLSYS_DIR_SUFFIX;
	xmail_dir_path = rtrim (home_dir) || ">" || xmail_dir_entry;
	mlsys_dir_path = rtrim (home_dir) || ">" || mlsys_dir_entry;

	call hcs_$status_long (home_dir, xmail_dir_entry, CHASE, addr (auto_status_branch), null (), code);
	if code = 0 | code = error_table_$no_s_permission /* accept no s */
	then do;
	     xmail_dir_exists = "1"b;
	     xmail_dir_uid = auto_status_branch.long.uid;
	end;
	else if code = error_table_$noentry then xmail_dir_exists = "0"b;
	else goto OPEN_EXIT;

	call hcs_$status_long (home_dir, mlsys_dir_entry, CHASE, addr (auto_status_branch), null (), code);
	if code = 0 | code = error_table_$no_s_permission /* accept no s */
	then do;
	     mlsys_dir_exists = "1"b;
	     mlsys_dir_uid = auto_status_branch.long.uid;
	end;
	else if code = error_table_$noentry then mlsys_dir_exists = "0"b;
	else goto OPEN_EXIT;

	if mlsys_dir_exists & xmail_dir_exists
	then if xmail_dir_uid ^= mlsys_dir_uid
	     then do;				/* ERROR */
		call ioa_ ("executive_mail (^a): With this version, xmail uses the mlsys", xmail_version);
		call ioa_ ("^5xdirectory for its work files. Since you already have both an xmail");
		call ioa_ ("^5xdirectory (^a) and the mlsys directory (^a),", xmail_dir_entry, mlsys_dir_entry);
		call ioa_ ("^5xxmail cannot rename its directory and continue. Please move");
		call ioa_ ("^5xeverything into the xmail directory and delete the mlsys directory.");
		call ioa_ ("^5xIf you have problems, contact your project or site administrator.");
		code = xmail_err_$exit_now;
		goto OPEN_EXIT;
	     end;

	if xmail_dir_exists & ^mlsys_dir_exists
	then do;					/* Add name "Person_id.mlsys" */
	     call hcs_$chname_file (home_dir, xmail_dir_entry, "", mlsys_dir_entry, code);
	     if code ^= 0 then goto OPEN_EXIT;
	end;

	if ^mlsys_dir_exists & ^xmail_dir_exists
	then do;					/* must create the mlsys dir */
	     call hcs_$append_branchx (home_dir, mlsys_dir_entry, SMA_ACCESS_BIN, get_ring_ (), user_name || ".*.*", CREATE_DIR, 1, (0), code);
	     if code ^= 0
	     then do;
		if code ^= error_table_$incorrect_access
		then goto OPEN_EXIT;
		else do;				/* incorrect access - now check aim level */

		     call expand_pathname_ (home_dir, aim_home_dir, aim_dir_entry, (0));
		     call hcs_$get_access_class (aim_home_dir, aim_dir_entry, aim_level_dir, aim_code);
		     if aim_code = 0
		     then do;
			aim_level_proc = get_authorization_ ();
			if ^aim_check_$equal (aim_level_proc, aim_level_dir)
			then do;
			     call convert_authorization_$to_string (aim_level_dir, aim_level_string, aim_code);
			     if aim_code = 0
			     then do;
				if aim_level_string = ""
				then aim_level_string = SYSTEM_LOW;
				call com_err_ (error_table_$ai_restricted, "executive_mail",
				     "^/  To invoke executive_mail," ||
				     "^/  logout and login using ""-auth ^a"".", aim_level_string);
			     end;
			     else call com_err_ (error_table_$ai_restricted, "executive_mail",
				     "^/  To invoke executive_mail," ||
				     "^/  logout and login with the proper authorization.");
			end;
			else call com_err_ (code, "executive_mail",
				"^/  Your home directory is inconsistent (no access)." ||
				"^/  Seek expert help.");
		     end;
		     else call com_err_ (code, "executive_mail",
			     "^/  Cannot determine authorization on home directory." ||
			     "^/  Seek expert help.");
		     code = xmail_err_$exit_now;
		     goto OPEN_EXIT;
		end;
	     end;
	end;

	xmail_dir_path = mlsys_dir_path;

/* Make a link to the users default mailbox (link "incoming.mbx" in xmail
     directory to "person_id.mbx" in users home directory). */

	call hcs_$status_minf (xmail_dir_path, (INCOMING_MBX), NO_CHASE, type, bit_count, code);
	if code = error_table_$noentry then do;
	     default_mbx = xmail_data.person || MBX_SUFFIX;
	     target = rtrim (home_dir) || ">" || default_mbx;
	     call hcs_$append_link (xmail_dir_path, (INCOMING_MBX), target, code);
	end;
          else if code = error_table_$incorrect_access then do;
               call com_err_ (code, "executive_mail",
              "^/  Check your authorization level." ||
              "^/  Incorrect access to ^a.", xmail_dir_path);
	     code = xmail_err_$exit_now;
	     goto OPEN_EXIT;
	     end;
	else if code ^= 0 
	then goto OPEN_EXIT;
	
/* Create the outgoing savebox in the users xmail directory if it is not
     already there. */

	call hcs_$status_minf (xmail_dir_path, OUTGOING_SV_BOX, CHASE, type, bit_count, code);
	if code = error_table_$noentry then do;
	     call mlsys_utils_$create_mailbox (xmail_dir_path, OUTGOING_SV_BOX, code);
	end;
	if code ^= 0 
	then goto OPEN_EXIT;
	
/* Create and initialize the xmail data segment (a value segment)
     in the user xmail directory if it is not already there. */

	auto_segment_acl_array.access_name = xmail_data.person || ".*.*";
	auto_segment_acl_array.mode = RW_ACCESS;
	auto_segment_acl_array.extended_mode = "0"b;

	call initiate_file_$create (xmail_dir_path, (VALUE_SEG_NAME), RW_ACCESS, value_seg_ptr, created_sw, bit_count, code); /* even if the value seg already exists, this call gets the pointer */
	if code = error_table_$incorrect_access  | code = error_table_$no_r_permission then do;
	     value_seg_ptr = null;
	     call xmail_rebuild_value_seg_ (value_seg_ptr, code);
	     if code ^= 0 then code = xmail_err_$exit_now;
	     end;
          else if code = error_table_$no_w_permission then do;
	     value_seg_ptr = null;
	     call xmail_rebuild_value_seg_$copy (value_seg_ptr, code);
	     if code ^= 0 then code = xmail_err_$exit_now;
	     end;
	else if code = error_table_$moderr then do;
	     call com_err_ (code, "executive_mail", "^/Your mail system directory is inconsistent (no access). Seek expert help.");
	     code = xmail_err_$exit_now;
	end;
	else if code = 0  then do;			/* Give the user access under all accounts */
               xmail_data.value_seg_pathname = mlsys_dir_path;
	     call hcs_$get_user_access_modes (xmail_dir_path, (VALUE_SEG_NAME), "", -1, a_mode, ex_mode, code);
	     if code = 0 then do;
		if a_mode ^= RW_ACCESS then do;
		     call hcs_$add_acl_entries (xmail_dir_path, (VALUE_SEG_NAME), addr (auto_segment_acl_array), 1, code);
		     if code ^= 0 then goto OPEN_EXIT;
		     end;
		end;
	     else goto OPEN_EXIT;
	end;					
	if code ^= 0 & code ^= error_table_$segknown & code ^= error_table_$namedup
	then goto OPEN_EXIT;

	if created_sw then
	call value_$init_seg (value_seg_ptr, PERMANENT_SEG, null, USE_ENTIRE_SEG, code);
	if code ^= 0 & code ^= error_table_$segknown
	then goto OPEN_EXIT;

	xmail_data.mail_dir = xmail_dir_path;

	call xmail_upgrade;				/* update to current version if necessary */

/* Truncate the error log segment. */

	call initiate_file_ (xmail_dir_path, ERROR_LOG_SEGMENT, RW_ACCESS, error_seg_ptr, bit_count, code);
	bit_count = 0;
	if code = 0
	then call terminate_file_ (error_seg_ptr, bit_count, TERM_FILE_TRUNC_BC, code);
	if code = error_table_$moderr | 
             code = error_table_$no_w_permission |
             code = error_table_$no_r_permission then do;
	     call hcs_$status_long (home_dir, mlsys_dir_entry, CHASE, addr (auto_status_branch),  null (), code);
/* hcs_$status_long returns a 5 bit mode with the 4 bit set on when the entry is a dir */
	     if code = 0  
               then if substr(auto_status_branch.mode, 3, 3) = SMA_ACCESS
		then do;
		     call hcs_$get_user_access_modes (xmail_dir_path,(ERROR_LOG_SEGMENT),"", -1, a_mode, ex_mode, code);
		     if a_mode ^= RW_ACCESS then do;
			call hcs_$add_acl_entries (xmail_dir_path, (ERROR_LOG_SEGMENT), addr(auto_segment_acl_array), 1, code);
			if code ^= 0 then goto OPEN_EXIT;
			end;
		     end;
		else do;
		     call initiate_file_$create (get_pdir_(), (ERROR_LOG_SEGMENT), RW_ACCESS, error_seg_ptr, created_sw, bit_count, code);
		     bit_count = 0;
		     xmail_data.error_seg_in_pdir = "1"b;
		     if code = 0 
			then call terminate_file_ (error_seg_ptr, bit_count, TERM_FILE_TRUNC_BC, code);
		     end;
	     end;
	if code = error_table_$noentry then code = 0;

OPEN_EXIT:
	call CLEAN_UP;
	return;					/* open_dir entry */

close_dir: entry ();

	 dcl term_ entry (char(*), char(*), fixed bin(35));
	 dcl dirname char(168);
           dcl return_code fixed bin(35);
	 
	 dirname = xmail_data.value_seg_pathname;
	 call term_ (rtrim(dirname), (VALUE_SEG_NAME), return_code);

	return;					/* close_dir entry */

xmail_upgrade: proc;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*								        */
/* This code updates the user's xmail directory for version upgrades. These are things  */
/* we can skip if the version matches.  The comparison depends on the 10 character      */
/* xmail_version to be given as: "2.0a EXL" or such so the major and minor version      */
/* numbers are first in the string. The intention is to ignore differences in the       */
/* version which are only EXL identifiers etc.				        */
/*								        */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	call xmail_value_$get_no_validate (VERSION, version, code);
	if code ^= 0 then version = "";
	else do;
	     version = ltrim (version);
	     idx = index (version, " ");
	     if idx ^= 0
	     then version = substr (version, 1, idx - 1);
	end;
	if version = xmail_version then goto UPGRADE_EXIT;

/* Establish default values for personalization options */

	call xmail_value_$get_no_validate (SAVE_MESSAGE, save_message, code);
	if code ^= 0 then save_message = "";
	call xmail_value_$get_no_validate (SAVE_MAILBOX, save_mailbox, code);
	if code ^= 0 then save_mailbox = "";

	if save_message = "" then do;
	     call xmail_value_$set (SAVE_MESSAGE, (YES), unused_return, code); /* don't change the automatic copy, we'll need it later */
	     if code ^= 0 then goto UPGRADE_EXIT;
	end;

	if save_mailbox = "" then do;
	     if save_message = "" then call xmail_value_$set (SAVE_MAILBOX, (ASK), save_mailbox, code);
	     else call xmail_value_$set (SAVE_MAILBOX, "outgoing", save_mailbox, code);
	     if code ^= 0 then goto UPGRADE_EXIT;
	end;

	call SET_DEFAULT (ACKNOWLEDGE, (NO));
	call SET_DEFAULT (LISTS_AS_MENUS, (NO));
	call SET_DEFAULT (INTERACTIVE_MSGS, (YES));
	call SET_DEFAULT (ALWAYS_ESCAPE, (NO));
	call SET_DEFAULT (MULTICS_MODE, (NO));
          call SET_DEFAULT (MSGS_AS_MAIL, (NO));
	call SET_DEFAULT (REMOVE_MENUS, (NO));
	call SET_DEFAULT (CONFIRM_PRINT, (YES));
	call SET_DEFAULT (INCLUDE_ORIGINAL, (NO));
	call SET_DEFAULT (FILE_ORIGINAL, (NO));
	call SET_DEFAULT (ORIGINAL_IN_WINDOW, (YES));
	

/* Add the current suffix to any existing mailing lists. */
	area_ptr = get_system_free_area_ ();

	star_entry_count = 0;
	call hcs_$star_ (xmail_dir_path, "**.mlist", star_ALL_ENTRIES, area_ptr, star_entry_count, star_entry_ptr, star_names_ptr, code);
	if code = error_table_$nomatch then code = 0;
	else if code ^= 0				/* other error */
	then goto UPGRADE_EXIT;

	if star_entry_count > 0 then
	     do idx = 1 to star_entry_count;
		seg_name = star_names (star_entries (idx).nindex);
		call hcs_$chname_file (xmail_dir_path, rtrim (seg_name), "",
		     reverse (after (reverse (rtrim (seg_name)), reverse (".mlist"))) || ".mls", code);
		if code ^= 0 & code ^= error_table_$segnamedup then goto UPGRADE_EXIT;
	     end;

/* Rename the old error log segment if it exists. */

	call hcs_$status_minf (xmail_dir_path, user_name || ".error", NO_CHASE, type, bit_count, code);
	if code = 0 then do;
	     call hcs_$chname_file (xmail_dir_path, user_name || ".error", user_name || ".xmail_error", ERROR_LOG_SEGMENT, code);
	     if code = error_table_$segnamedup | code = error_table_$namedup then do;
		call delete_$path (xmail_dir_path, user_name || ".error", SEG_FORCE, "", code);
	     end;
	end;
	else if code = error_table_$noentry then code = 0;
	if code ^= 0
	then goto UPGRADE_EXIT;

/* If everything else succeeds, set the new version in the xmail value segment. */

	call xmail_value_$set (VERSION, (xmail_version), version, code);
	if code ^= 0 then goto UPGRADE_EXIT;

UPGRADE_EXIT:
	return;

SET_DEFAULT: proc (sd_value_name, sd_default);

/* PARAMETERS */

	dcl     sd_value_name          char (*);
	dcl     sd_default             char (*);

/* BEGIN */

	call xmail_value_$get_no_validate (sd_value_name, answer_yn, code);
	if code ^= 0 | answer_yn = ""
	then do;
	     call xmail_value_$set (sd_value_name, (sd_default), answer_yn, code);
	     if code ^= 0
	     then goto UPGRADE_EXIT;
	end;

     end SET_DEFAULT;

    end xmail_upgrade;


CLEAN_UP: proc;
	if star_names_ptr ^= null () then free star_names;/* order is important */
	if star_entry_ptr ^= null () then free star_entries;
     end CLEAN_UP;

%include acl_structures;
%page;
%include access_mode_values;
%page;
%include star_structures;
%page;
%include status_structures;
%page;
%include xmail_data;

     end xmail_dir_manager_;
