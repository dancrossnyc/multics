/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
			xmail_error_

	The entries to this procedure all cause an error message to be
	displayed and/or logged.  They are similar in intent to com_err_
	or sub_err_, but are specialized for the xmail environment.

	All entries have the same calling sequence.  It must be declared
	options (variable), but has the following understood structure:

	entry (status, caller, disposition, ctl_string, args, ...)

	where STATUS is fixed bin (35) or some other computational type,
	CALLER is a fixed or varying character string,
	DISPOSITION is char (1),
	CTL_STRING is a fixed or varying character string,
	and ARGS are arguments referenced by the CTL_STRING.

	These are all analogous to com_err_ arguments except for disposition.
	It defines what action is taken after printing the error message,
	and may have the following values:

	"c" (continue) - return to caller.
          "i" (interupt) - signal quit.
	"l" (log)	     - log the error.  Then return to caller.
	"q" (quit)     - log the error.  Then signal quit.
	"s" (stop)     - log the error.  Then stop xmail totally.

	There are several entrypoints to this program.  They specify
	different ways of formatting the error message.  They are:

	code_last  - print the ctl_string message first, followed by the
		   error code in parentheses.

	code_first - print the error code first, followed by the ctl_string
		   message.

	no_code	 - print the ctl_string message, but not the error code.

	no_print	 - print nothing, but take other actions specified by the
		   disposition.

	When logging takes place, all relevant information is retained,
	whether it is printed or not.  In particular, the caller name is
	logged even though it is never printed, so it is important that
	it be passed correctly.

			xmail_error_modes

	This is a command entry.  It is provided for debugging purposes
	to control the operation of the subroutine entries.  It is
	described below.
*/

/* Written 6/16/81 by Paul Kyzivat	

   81-06-19  Paul Kyzivat: Modified to add xmail_error_modes entry 

   83-07-05  DJ Schimke: Removed unreferenced dcl of sys_info$max_seg_size
   and declared builtins addr, bin, and length.

   83-09-14 DJ Schimke: Modified the name of the error log segment from 
   Person_id.error to xmail.error since with this version (2.0) xmail shares 
   the mlsys directory (Person_id.mlsys). Renamed ERROR_LOG_SUFFIX to 
   ERROR_LOG_SEGMENT and changed the text of the printed message.

   84-06-21 JAFalksen: Utilize date_time_$format("date_time"
*/

/* format: style1 */
xmail_error_: proc options (variable);

	dcl     DEBUG		 bit (1) aligned static init ("0"b);
	dcl     ERROR_LOG_SEGMENT	 char (11) init ("xmail.error") int static options (constant);

code_last: entry options (variable);

	call XMAIL_ERROR ("^[^s^[^a (^s^a)^;^2s^a^]^/^;^s^[^a^/^;^s^]^2s^]");
	return;

code_first: entry options (variable);

	call XMAIL_ERROR ("^[^a ^]^[^a^2s^/^;^s^[^/^]^s^]");
	return;

no_code: entry options (variable);

	call XMAIL_ERROR ("^2s^[^a^/^;^s^]^2s");
	return;

no_print: entry options (variable);

	call XMAIL_ERROR ("^6s");
	return;
%page;
XMAIL_ERROR:
	/*** must be quick ***/
     proc (format);

	dcl     format		 char (*);

	dcl     arg_list		 ptr,
	        status		 fixed bin (35),
	        status_text		 char (100) aligned,
	        disposition		 char (1) aligned;

	dcl     caller_p		 ptr,
	        caller_l		 fixed bin (21),
	        caller		 char (caller_l) based (caller_p);

	dcl     disposition_arg_p	 ptr,
	        disposition_arg_l	 fixed bin (21),
	        disposition_arg	 char (disposition_arg_l) based (disposition_arg_p);

	dcl     caller_msg_p	 ptr,
	        caller_msg_l	 fixed bin (21),
	        caller_msg		 char (caller_msg_l) based (caller_msg_p);

	dcl     program_interrupt	 condition;

	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     cu_$arg_list_ptr	 entry (ptr),
	        ioa_		 entry () options (variable),
	        ioa_$nnl		 entry () options (variable);

	dcl     char		 builtin;

	call cu_$arg_list_ptr (arg_list);
	call GET_STATUS (arg_list, 1, status, status_text);
	call GET_STRING_ARG (arg_list, 2, caller_p, caller_l);
	call GET_STRING_ARG (arg_list, 3, disposition_arg_p, disposition_arg_l);
	call GET_CALLER_MSG (arg_list, 4, caller_msg_p, caller_msg_l);

	disposition = char (disposition_arg, 1);

	if DEBUG
	then call ioa_ ("^a: ^a ^a", caller, status_text, caller_msg);
	else call ioa_$nnl (format,
		status ^= 0, status_text,
		caller_msg ^= "", caller_msg,
		status ^= 0, status_text);

	if disposition = "c" then return;
	if disposition = "i" then signal condition (program_interrupt);
	else call MAKE_LOG_ENTRY (disposition, status, status_text, caller, caller_msg);

	if disposition = "l" then return;
	else if disposition = "s" then do;
		call ioa_ ("Exiting executive mail due to internal error. Please try again.^/If error persists please seek expert advice. ^/This error logged in ""^a"" in your xmail directory.^/ (^a)", ERROR_LOG_SEGMENT, xmail_data.mail_dir);
		call timer_manager_$sleep (20, "11"b);
		go to xmail_data.quit_label;
	     end;
	else /* disposition="q" or illegal value */
	     signal condition (program_interrupt);

     end XMAIL_ERROR;
%page;
GET_STATUS: proc (arg_list, argno, code, msg);

	dcl     arg_list		 ptr,
	        argno		 fixed bin,
	        code		 fixed bin (35),
	        msg		 char (100) aligned;

	dcl     type		 fixed bin,
	        ndims		 fixed bin,
	        prec		 fixed bin,
	        scale		 fixed bin,
	        packed		 bit (1) aligned;

	dcl     (addr, bin)		 builtin;

	dcl     arg_p		 ptr,
	        arg		 fixed bin (35) based (arg_p);

	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr),
	        decode_descriptor_	 entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin),
	        convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned);

	call cu_$arg_ptr_rel (argno, arg_p, (0), code, arg_list);
	if code = 0 then do;
		call decode_descriptor_ (arg_list, argno, type, packed, ndims, prec, scale);
		if (type = real_fix_bin_1_dtype) & (packed = "0"b)
		then code = arg;
		else do;
			intype = 2 * type + bin (packed, 1);

			if (type >= bit_dtype) & (type <= varying_char_dtype)
			then inclength = prec;
			else do;
				info.inscale = scale;
				info.inprec = prec;
			     end;
			outtype = 2 * real_fix_bin_1_dtype;
			outfo.outscale = 0;
			outfo.outprec = 35;
			call assign_ (addr (code), outtype, outscale_prec, arg_p, intype, inscale_prec);
		     end;
	     end;

	if code = 0 then msg = "";
	else call convert_status_code_ (code, (""), msg);
	return;
%page;
%include desc_dcls;
%page;
%include std_descriptor_types;

     end GET_STATUS;
%page;
GET_STRING_ARG: proc (arg_list, argno, string_p, string_l);

	dcl     arg_list		 ptr,
	        argno		 fixed bin,
	        string_p		 ptr,
	        string_l		 fixed bin (21);

	dcl     type		 fixed bin,
	        code		 fixed bin (35),
	        varying_string_length	 fixed bin (35) based;

	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr),
	        decode_descriptor_	 entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);

	dcl     (addr, addrel)	 builtin;

	call cu_$arg_ptr_rel (argno, string_p, string_l, code, arg_list);
	if code ^= 0 then do;
		string_p = addr (string_p);
		string_l = 0;
	     end;
	else do;
		call decode_descriptor_ (arg_list, argno, type, (""b), (0), (0), (0));
		if type = varying_char_dtype
		then string_l = addrel (string_p, -1) -> varying_string_length;
	     end;
	return;
%page;
%include std_descriptor_types;

     end GET_STRING_ARG;
%page;
GET_CALLER_MSG:
	/*** must be quick ***/
     proc (arg_list, argno, msg_p, msg_l);

	dcl     arg_list		 ptr,
	        argno		 fixed bin,
	        msg_p		 ptr,
	        msg_l		 fixed bin (21);

	dcl     msg_text		 char (256),
	        result_length	 fixed bin,
	        ctl_p		 ptr,
	        ctl_l		 fixed bin (21);

	dcl     ioa_$general_rs	 entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);

	dcl     (addr, length, rtrim, substr) builtin;

	call GET_STRING_ARG (arg_list, argno, ctl_p, ctl_l);
	if ctl_l = 0 then do;
		msg_p = addr (msg_p);
		msg_l = 0;
	     end;
	else do;
		msg_p = addr (msg_text);
		call ioa_$general_rs (arg_list, argno, argno + 1, msg_text, result_length, "0"b, "0"b);
		msg_l = length (rtrim (substr (msg_text, 1, result_length)));
	     end;

     end GET_CALLER_MSG;
%page;
MAKE_LOG_ENTRY: proc (action, code, code_msg, caller, caller_msg);

	dcl     action		 char (1) aligned,
	        code		 fixed bin (35),
	        code_msg		 char (100) aligned,
	        caller		 char (*),
	        caller_msg		 char (*);

	dcl     (TAB		 init ("	"),
	        NL		 init ("
")	        )			 char (1) int static options (constant);
	dcl     adjust_bit_count_	 entry (char (168) aligned, char (32) aligned, bit (1) aligned, fixed bin (35), fixed bin (35));
	dcl     date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
	dcl     hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));

	dcl     bit_count		 fixed bin (24);
	dcl     status		 fixed bin (35);
	dcl     date_time_str	 char (64) var;
	dcl     error_log_len	 fixed bin;
	dcl     error_log_ptr	 ptr init (null);
	dcl     error_log		 char (error_log_len) based (error_log_ptr);
	dcl     (clock, divide, null, rtrim) builtin;
	dcl     error_table_$noentry	 fixed bin (35) ext static;

	call hcs_$initiate_count ((xmail_data.mail_dir), ERROR_LOG_SEGMENT, "", bit_count, 1, error_log_ptr, status);
	if status = error_table_$noentry
	then do;
		call hcs_$make_seg ((xmail_data.mail_dir), ERROR_LOG_SEGMENT, "", RW_ACCESS_BIN, error_log_ptr, status);
		if status ^= 0 then return;
		error_log_len = 0;
	     end;
	else if error_log_ptr = null
	then return;
	else error_log_len = divide (bit_count + 8, 9, 24, 0);

	date_time_str = date_time_$format ("date_time", clock (), "", "");

	call add_to_error_log (rtrim (date_time_str) || NL ||
	     TAB || "Error detected by = """ || rtrim (caller) || """" || NL ||
	     TAB || "Status code message = """ || rtrim (code_msg) || """" || NL ||
	     TAB || "Caller message = """ || rtrim (caller_msg) || """" || NL ||
	     TAB || "Action to be taken = """ || rtrim (action) || """" ||
	     NL || NL, status);
	if status ^= 0 then return;

	call adjust_bit_count_ ((xmail_data.mail_dir), (ERROR_LOG_SEGMENT), "1"b, (0), status);

add_to_error_log: proc (P_str, P_code);

	dcl     P_str		 char (*);
	dcl     P_code		 fixed bin (35);
	dcl     (length, substr)	 builtin;
	dcl     starting_col	 fixed bin init (error_log_len + 1);

	P_code = 0;

	error_log_len = error_log_len + length (P_str);
	substr (error_log, starting_col) = P_str;

     end add_to_error_log;
%page;
%include access_mode_values;

     end MAKE_LOG_ENTRY;
%page;
/*
			xmail_error_modes

This command sets/prints modes which control the operation of the various
xmail_error_ entries.

Usage:
	xmail_error_modes {mode_string}

Description:
	If mode_string is present it is processed and the corresponding
modes set.  If not present, the current mode settings are printed.

Currently, the only defined mode is debug/^debug.  When set, it causes
error messages to be printed always in com_err_ format.
*/

xmail_error_modes: entry options (variable);

MODES:	begin /* options (quick) */;

	     dcl	   NAME		      init ("xmail_error_modes") char (17) static options (constant);

	     dcl	   nargs		      fixed bin,
		   code		      fixed bin (35),

		   arg_p		      ptr,
		   arg_l		      fixed bin (21),
		   arg		      char (arg_l) based (arg_p);

	     dcl	   error_table_$too_many_args fixed bin (35) ext static,
		   error_table_$bad_mode  fixed bin (35) ext static;

	     dcl	   cu_$arg_count	      entry (fixed bin, fixed bin (35)),
		   cu_$arg_ptr	      entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
		   com_err_	      entry () options (variable),
		   ioa_		      entry () options (variable);

	     call cu_$arg_count (nargs, code);
	     if code = 0 & nargs > 1 then code = error_table_$too_many_args;
	     if code = 0 & nargs = 1 then call cu_$arg_ptr (1, arg_p, arg_l, code);
	     if code ^= 0 then do;
		     call com_err_ (code, NAME);
		     return;
		end;

	     if nargs = 0
	     then call ioa_ ("^[^;^^^]debug", DEBUG);
	     else do;
		     if arg = "debug" then DEBUG = "1"b;
		     else if arg = "^debug" then DEBUG = "0"b;
		     else call com_err_ (error_table_$bad_mode, NAME, "^a", arg);
		end;
	end MODES;

%page;
%include xmail_data;

     end xmail_error_;
