/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-12-10,Blair), approve(87-12-10,MCR7818),
     audit(87-12-23,LJAdams), install(88-01-12,MR12.2-1013):
     Add capability to update a deferred message to include a reply-to field.
                                                   END HISTORY COMMENTS */


xmail_send_stored_msg_: proc ();

/* BEGIN DESCRIPTION

History:          Author unknown 

   83-07-21  DJ Schimke: Declared addr, codeptr, divide, null,  and rtrim 
   builtins. Removed unreferenced char_count, emacs_data_$status_code, 
   program_interrupt.

   83-10-15  DJ Schimke: Removed useless cleanup handler and performed other
   general code restructuring suggested by audit.

   83-10-26 DJ Schimke: Changed call to xmail_window_manager_$reconnect to a 
   call to xmail_window_manager_$quit_handler so the quit condition handler
   can special-case the reconnect condition which should NOT interrupt 
   processing after the quit. phx 13227 This entry also prompts when not at
   a reconnect condition so that unintentionally hitting the BREAK won't 
   throw away any pending work. phx 13018

   83-11-01 DJ Schimke: Changed calling sequence of xmail_select_file_.

   84-09-24 JG Backs: Added code before and after the call to emacs_ to test
   if menus should be removed before editing (personalization option Remove
   Menus While Editing).  If option is in effect, calls to new entrypoints,
   $suppress_menu and $restore_menu in xmail_window_manager_ are made. Also
   added test in quit handler to make sure restore menus is done if quit in
   editor.

   84-11-08 JG Backs: Changed the call and declaration statement of
   xmail_process_user_msg_ to eliminate the parameter which was not needed
   or used, and was eliminated from that module.  Audit change.

END DESCRIPTION
*/

/* AUTOMATIC */

	dcl     bit_count		 fixed bin (24);
          dcl     buffer_used            fixed bin;
	dcl     code		 fixed bin (35);
	dcl     flavor		 char (32);
          dcl     format_reply           char (32);
          dcl     format_reply_length    fixed bin;
          dcl     length_first_part      fixed bin;
          dcl     message_num            fixed bin;
	dcl     no_chars		 fixed bin (21);
	dcl     restore_menu_needed	 bit (1) aligned;	/* if remove menu */
	dcl     status		 fixed bin (35);
	dcl     store_dir		 char (168);
	dcl     store_file		 char (32) var;
	dcl     stored_msg_ptr	 ptr;
	dcl     type		 fixed bin (2);
	dcl     unused_bit		 bit (1) aligned;
	dcl     unused_bit2		 bit (1) aligned;
          dcl     user_name              char (22);

	dcl     1 auto_parse_text_options like parse_text_options;

/* INTERNAL STATIC */

	dcl     ext_dir		 char (168) int static;
	dcl     ext_file		 char (32) int static;
	dcl     ext_pname		 char (168) int static;
	dcl     ext_ptr		 ptr init (null) int static;

/* CONSTANTS */

	dcl     ALLOW_OLD		 bit (1) aligned options (constant) init ("1"b) int static;
          dcl     BITS_PER_BYTE          fixed bin (4) aligned options (constant) init (9) int static;
	dcl     DONT_ALLOW_NEW	 bit (1) aligned options (constant) init ("0"b) int static;
	dcl     EMACS_EXT		 char (21) options (constant) init ("xmail_emacs_ext_main_") int static;
	dcl     ENTRY_NAME		 entry variable init (xmail_send_stored_msg_);
	dcl     ERROR_MESSAGE	 char (66) static options (constant) init ("Sorry, due to an internal error the stored message cannot be sent.");
	dcl     LOG		 char (1) static options (constant) init ("l");
	dcl     MAKE_SEG_RW		 fixed bin (5) static options (constant) init (01010b);
	dcl     NAME		 char (22) static options (constant) init ("xmail_send_stored_msg_");
	dcl     NL		 char (1) aligned static options (constant) init ("
");
	dcl     STOP		 char (1) static options (constant) init ("q");
	dcl     TERM_FILE_BC	 bit (2) static options (constant) init ("01"b);
	dcl     WHITE_SPACE_COMMA	 char (6) aligned static options (constant) init ("
	  ,");					/* HT VT NL <space> comma */
/* EXTERNAL STATIC */

	dcl     iox_$user_output	 ptr external static;
	dcl     (error_table_$namedup, error_table_$segknown) fixed bin (35) ext;

/* ENTRIES */

	dcl     emacs_		 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     get_pdir_		 entry () returns (char (168));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$make_ptr	 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     hcs_$set_bc_seg	 entry (ptr, fixed bin (24), fixed bin (35));
	dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     mlsys_utils_$parse_address_list_text entry options(variable);
	dcl     mlsys_utils_$format_text_field entry options(variable);
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	dcl     user_info_ entry (char(*));
	dcl     xmail_error_$no_code	 entry options (variable);
	dcl     xmail_process_user_msg_ entry ();	/* no parameter */
	dcl     xmail_redisplay_$menu	 entry ();
	dcl     xmail_select_file_$caller_msg entry (char (*), char (*), char (*), bit (1) aligned, bit (1) aligned,
				 char (168), char (32) var, char (*), bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     xmail_window_manager_$quit_handler entry () returns (bit (1) aligned);
	dcl     xmail_window_manager_$reconnect entry ();
	dcl     xmail_window_manager_$restore_menu entry ();
	dcl     xmail_window_manager_$suppress_menu entry ();

/* CONDITIONS */

	dcl     quit		 condition;

/* BASED */

	dcl     stored_string	 char (no_chars) based (stored_msg_ptr);
	dcl     emacs_seg_string	 char (no_chars) based (send_mail_info.emacs_seg_ptr);


/* BUILTINS */

	dcl     (addr, after, before, codeptr, divide, index, length, null, rtrim, substr) builtin;

/* INCLUDE FILES */

%include xmail_send_mail;
%page;
%include xmail_data;
%page;
%include mlsys_parse_txt_options;
%page;
%include window_dcls;
%page;
%include mlsys_address_list;
%page;
%include mlsys_field_names;

/* BEGIN */

	restore_menu_needed = "0"b;
	on condition (quit)
	     begin;
		if xmail_window_manager_$quit_handler ()
		then do;
		     if restore_menu_needed
		     then do;
			call xmail_window_manager_$restore_menu;
			call xmail_redisplay_$menu;
		     end;
		     call window_$clear_window (iox_$user_output, (0)); /* ignore code */
		     call ioa_ ("Sending ""deferred message"" terminated.");
		     go to EXIT;
		end;
	     end;

	call xmail_select_file_$caller_msg ("deferred message", "defer", "", ALLOW_OLD, DONT_ALLOW_NEW, store_dir, store_file, "Enter name of ""deferred message"" (or ?? for list)", unused_bit, unused_bit2, code);
	if code ^= 0 then go to EXIT;

	call hcs_$make_seg (store_dir, rtrim (store_file) || ".defer", "", MAKE_SEG_RW, stored_msg_ptr, code);

	call hcs_$status_mins (stored_msg_ptr, type, bit_count, code);
	if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);
/* Set up to add a Reply_To field if none exists */

	auto_parse_text_options.version = PARSE_TEXT_OPTIONS_VERSION_1;
	auto_parse_text_options.area_ptr = null();
	auto_parse_text_options.flags.list_errors = "0"b;
	auto_parse_text_options.flags.validate_addresses = "0"b;
	auto_parse_text_options.flags.include_invalid_addresses = "0"b;
	auto_parse_text_options.flags.mbz = "0"b;

	call user_info_ (user_name); /* we might need this */

/* Get number of chars in seg */

	if bit_count = 0
	then do;
	     call ioa_ ("The specified ""deferred message"" is empty.");
	     go to EXIT;
	end;
	no_chars = divide (bit_count, 9, 17, 0);
	reply_to_list_ptr = null;
	if index(before(stored_string,NL || "To:"), "Reply-To:") > 0 then do;
	     call mlsys_utils_$parse_address_list_text (rtrim (after (before (stored_string,
	     "To:"), "Reply-To:"), WHITE_SPACE_COMMA), addr (auto_parse_text_options),
	     ADDRESS_LIST_VERSION_2, reply_to_list_ptr, parse_text_error_list_ptr, code);
	     if code ^= 0 then
		call xmail_error_$no_code (code, NAME, LOG, ERROR_MESSAGE, message_num);
	     end;
	else do;
	     format_reply = "";
	     format_reply_length = length ("Reply-To:  ") + length(user_name);
	     call mlsys_utils_$format_text_field (REPLY_TO_FIELDNAME, rtrim(user_name), ("0"b),
		format_reply_length, addr(format_reply), format_reply_length, buffer_used, code);
	     if code ^= 0 then
		call xmail_error_$no_code (code, NAME, LOG, ERROR_MESSAGE, message_num);
	     no_chars = format_reply_length + length(NL) + no_chars;
	     bit_count = no_chars * BITS_PER_BYTE;
	     length_first_part = index(stored_string,NL);
	     stored_string = substr(stored_string,1,length_first_part) ||
		rtrim(format_reply) || NL || substr(stored_string,length_first_part+1, no_chars - (length_first_part + length(NL) + format_reply_length));
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);
	end;
	call hcs_$make_seg ("", xmail_data.actee.person || "_sm", "", MAKE_SEG_RW, send_mail_info.emacs_seg_ptr, code);
	if code ^= 0 & code ^= error_table_$namedup & code ^= error_table_$segknown then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);

	call terminate_file_ (send_mail_info.emacs_seg_ptr, bit_count, TERM_FILE_BC, code);
	emacs_seg_string = stored_string;
	if ext_ptr = null ()
	then do;
	     call hcs_$make_ptr (codeptr (ENTRY_NAME), EMACS_EXT, "", ext_ptr, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);
	     call hcs_$fs_get_path_name (ext_ptr, ext_dir, (0), ext_file, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);
	     ext_pname = rtrim (ext_dir) || ">" || EMACS_EXT;
	end;


	flavor = "edit";
	call ioa_ ("...Please wait for editor...");

/* Check personalization option to remove and restore menus while editing */

	if xmail_data.remove_menus
	then do;
	     call xmail_window_manager_$suppress_menu ();
	     restore_menu_needed = "1"b;
	end;

	call emacs_ (iox_$user_output, rtrim (get_pdir_ ()) || ">" || rtrim (actee.person) || "_sm", ext_pname, addr (flavor), status);

	if restore_menu_needed
	then do;
	     call xmail_window_manager_$restore_menu ();
	     call xmail_redisplay_$menu;
	     restore_menu_needed = "0"b;
	end;

	if status = 1
	then do;
	     call hcs_$status_mins (send_mail_info.emacs_seg_ptr, 1, bit_count, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);
	     no_chars = divide (bit_count, 9, 17, 0);
	     stored_string = emacs_seg_string;
	     call hcs_$set_bc_seg (stored_msg_ptr, bit_count, code);
	     call ioa_ ("Deferred message ""^a"" saved.", store_file);
	     go to EXIT;
	end;
	if status ^= 0
	then do;
	     call xmail_window_manager_$reconnect ();
	     call ioa_ ("Sending ""deferred message"" terminated.");
	     go to EXIT;
	end;
	else call xmail_process_user_msg_ ();		/* no parameter */

EXIT:	return;


     end xmail_send_stored_msg_;


