/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-17,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Set off the flag that indicates that the message no longer exists in the
     on units rather than as part of normal cleanup.  This will ensure that a
     message is still available for filing even after the user has answered no
     to creating a new file when none exists. TR 20028.
  2) change(87-08-10,Blair), approve(87-12-10,MCR7818),
     audit(87-12-23,LJAdams), install(88-01-12,MR12.2-1013):
     Add reply-to handling for new messages.
                                                   END HISTORY COMMENTS */


xmail_prepare_msg_: procedure (P_store);

/* BEGIN DESCRIPTION

function:

   This procedure is used to process an existing message or a new one.
   In cases where a new message is being created, this procedure calls
   a modified version of Emacs to collect the user's message, i.e., the
   "subject", the "recipients" list, the "cc" list, the "bcc" list, and
   finally the "message text". In cases of an existing message it allows
   one to modify and/or enter new text, recipient list, or subject.
   The message is then passed to mail_system_. The mail_system creates
   standard message. It is then sent to the recipients. It may then be
   filed, edited, etc.. The extensions to Emacs that are used to do
   this are in segment xmail_emacs_ext_main_.

history:

   81-06-11 Written by R. Ignagni 

   83-10-20 DJ Schimke: Changed call to xmail_window_manager_$reconnect to a 
   call to xmail_window_manager_$quit_handler so the quit condition handler
   can special-case the reconnect condition which should NOT interrupt 
   processing after the quit. phx 13227 This entry also prompts when not at
   a reconnect condition so that unintentionally hitting the BREAK won't 
   throw away any pending work. phx 13018

   83-11-01 DJ Schimke: Changed the calling sequence of xmail_select_file_.

   84-08-08 JG Backs: Modified for the addition of blind carbon copies (bcc).

   84-09-24 JG Backs: Added code before and after the call to emacs_ to test
   if menus should be removed before editing (personalization option Remove
   Menus While Editing).  If option is in effect, calls to new entrypoints,
   $suppress_menu and $restore_menu in xmail_window_manager_ are made. Also
   added test in quit handler to make sure restore menus is done if quit in
   editor.

   84-11-07 JG Backs: Modified the name of the input parameter from P_caller
   to P_store for clarity.  Changed the call and declaration statement of
   xmail_process_user_msg_ to eliminate the parameter which was not needed
   or used, and was eliminated from that module.  Audit change.

END DESCRIPTION
*/

/* PARAMETERS */

	dcl     P_store		 bit (1) parameter; /* input;  "1"b = prepare & store msg; 
						                    "0"b = prepare & send msg */

/* CONDITIONS */

	dcl     (quit, cleanup)	 condition;

/* CONSTANTS */

	dcl     ALLOW_NEW		 bit (1) aligned int static options (constant) init ("1"b);
	dcl     ALLOW_OLD		 bit (1) aligned int static options (constant) init ("1"b);
	dcl     DELETE_SEG_FORCE_CHASE bit (6) int static options (constant) init ("100101"b);
	dcl     EMACS_EXT		 char (21) options (constant) init ("xmail_emacs_ext_main_") int static;
	dcl     ENTRY_NAME		 entry variable init (xmail_prepare_msg_);
	dcl     ERROR_MESSAGE	 char (67) static options (constant) init ("Sending of message not completed, due to an internal program error.");
	dcl     HIT_QUIT_KEY	 char (19) static options (constant) init ("Sending terminated.");
	dcl     NAME		 char (18) static options (constant) init ("xmail_prepare_msg_");
	dcl     STOP		 char (1) static options (constant) init ("q");
	dcl     TERM_FILE_BC	 bit (2) int static options (constant) init ("01"b);

/* EXTERNAL STATIC */

	dcl     error_table_$namedup	 fixed bin (35) ext;
	dcl     error_table_$segknown	 fixed bin (35) ext;
	dcl     iox_$user_output	 ptr external static;

/* INTERNAL STATIC */

	dcl     ext_dir		 char (168) int static;
	dcl     ext_file		 char (32) int static;
	dcl     ext_ptr		 ptr init (null) int static;
	dcl     ext_pname		 char (168) int static;

/* AUTOMATIC */

	dcl     bit_count		 fixed bin (24);
	dcl     code		 fixed bin (35);
	dcl     emacs_flavor	 char (32);
	dcl     no_chars		 fixed bin (24);
	dcl     restore_menu_needed	 bit (1) aligned;	/* if remove menu */
	dcl     status		 fixed bin (35);
	dcl     store_dir		 char (168);
	dcl     store_file		 char (32) var;
	dcl     stored_msg_ptr	 ptr;
	dcl     suffix		 char (4);
	dcl     temp_seg_ptr	 ptr;
	dcl     type		 fixed bin (2);
	dcl     unused_bit		 bit (1) aligned;
	dcl     unused_bit2		 bit (1) aligned;
	dcl     user_msg_seg_entry_name char (32);

/* ENTRIES */

	dcl     delete_$ptr		 entry (ptr, bit (6), char (*), fixed bin (35));
	dcl     emacs_		 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     get_pdir_		 entry () returns (char (168));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$make_ptr	 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     hcs_$make_seg	 entry options (variable);
	dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$nnl		 entry () options (variable);
	dcl     mail_system_$free_address_list entry (ptr, fixed bin (35));
	dcl     mail_system_$free_message entry (ptr, fixed bin (35));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	dcl     xmail_error_$no_code	 entry options (variable);
	dcl     xmail_process_user_msg_ entry ();	/* no parameter */
	dcl     xmail_redisplay_$menu	 entry ();
	dcl     xmail_sw_$redisplay	 entry ();
	dcl     xmail_sw_$update_usage entry (char (*));
	dcl     xmail_window_manager_$quit_handler entry () returns (bit (1) aligned);
	dcl     xmail_window_manager_$reconnect entry ();
	dcl     xmail_window_manager_$suppress_menu entry ();
	dcl     xmail_window_manager_$restore_menu entry ();

/* BUILTINS */

	dcl     (addr, codeptr, divide, null, rtrim) builtin;

/* BASED */

	dcl     based_string	 char (no_chars) based (temp_seg_ptr);

/* INCLUDE FILES */

%include access_mode_values;
%page;
%include xmail_data;
%page;
%include xmail_send_mail;
%page;
%include window_dcls;

/* BEGIN */

	restore_menu_needed = "0"b;
	send_mail_info.stored_seg_ptr = null ();
	temp_seg_ptr = null ();
	stored_msg_ptr = null ();


/*  Update status window */

	call xmail_sw_$update_usage (" ");
	call xmail_sw_$redisplay ();
	call ioa_$nnl (" ");

/*  Free any current address list(s), msg ptr, and create seg for Emacs to 
    place new message in   */

	if P_store
	then suffix = "_ssm";

	else do;
	     suffix = "_sm ";
	     if send_mail_info.new_msg_ptr ^= null ()
	     then do;
		call mail_system_$free_message (send_mail_info.new_msg_ptr, code);
		if code ^= 0 then send_mail_info.new_msg_ptr = null ();
	     end;
	     if send_mail_info.to_list_ptr ^= null ()
	     then do;
		call mail_system_$free_address_list (send_mail_info.to_list_ptr,
		     code);
		if code ^= 0 then send_mail_info.to_list_ptr = null ();
	     end;
	     if send_mail_info.cc_list_ptr ^= null ()
	     then do;
		call mail_system_$free_address_list (send_mail_info.cc_list_ptr, code);
		if code ^= 0 then send_mail_info.cc_list_ptr = null ();
	     end;

/* Add reply-to handling */
	     if send_mail_info.reply_to_list_ptr ^= null ()
	     then do;
		call mail_system_$free_address_list (send_mail_info.reply_to_list_ptr, code);
		if code ^= 0 then send_mail_info.reply_to_list_ptr = null ();
	     end;

/* Add bcc handling */

	     if send_mail_info.bcc_list_ptr ^= null ()
	     then do;
		call mail_system_$free_address_list (send_mail_info.bcc_list_ptr, code);
		if code ^= 0 then send_mail_info.bcc_list_ptr = null ();
	     end;


/* Initialize the status of the message */

	     send_mail_info.msg_exists = "0"b;
	end;

/* Set up quit and clean up conditions */

	on condition (cleanup) begin;
	     send_mail_info.msg_exists = "0"b;
	     call CLEAN_UP;
	     end;
	on condition (quit)
	     begin;
	          send_mail_info.msg_exists = "0"b;
		if xmail_window_manager_$quit_handler ()
		then do;
		     if restore_menu_needed






		     then do;
			call xmail_window_manager_$restore_menu;
			call xmail_redisplay_$menu;
		     end;
		     call window_$clear_window (iox_$user_output, (0)); /* ignore code */
		     call ioa_ (HIT_QUIT_KEY);
		     call CLEAN_UP;
		     go to EXIT;
		end;
	     end;

/* Create seg (or trim existing seg) to be used by emacs for the user msg */

	user_msg_seg_entry_name = xmail_data.actee.person || suffix;
	call hcs_$make_seg ("", user_msg_seg_entry_name, "", RW_ACCESS_BIN, temp_seg_ptr, code);
	if code = error_table_$namedup | code = error_table_$segknown
	then do;
	     bit_count = 0;
	     call terminate_file_ (temp_seg_ptr, bit_count, TERM_FILE_BC, code);
	end;
	if code ^= 0
	then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);

	send_mail_info.emacs_seg_pathname = get_pdir_ ();
	if P_store
	then send_mail_info.stored_seg_ptr = temp_seg_ptr;
	else send_mail_info.emacs_seg_ptr = temp_seg_ptr;
	send_mail_info.emacs_seg_pathname = rtrim (send_mail_info.emacs_seg_pathname) || ">" || user_msg_seg_entry_name;

/* Call emacs_ for preparing message. */

	if ext_ptr = null ()
	then do;
	     call hcs_$make_ptr (codeptr (ENTRY_NAME), EMACS_EXT, "",
		ext_ptr, code);
	     if code ^= 0 then call xmail_error_$no_code
		     (code, NAME, STOP, "^a", ERROR_MESSAGE);
	     call hcs_$fs_get_path_name (ext_ptr, ext_dir, (0),
		ext_file, code);
	     if code ^= 0 then call xmail_error_$no_code
		     (code, NAME, STOP, "^a", ERROR_MESSAGE);
	     ext_pname = rtrim (ext_dir) || ">" || EMACS_EXT;
	end;


	emacs_flavor = "send";
	bit_count = 0;
	call ioa_ ("... Please wait for editor ...");

/* Check personalization option to remove and restore menus while editing */

	if xmail_data.remove_menus
	then do;
	     call xmail_window_manager_$suppress_menu ();
	     restore_menu_needed = "1"b;
	end;

	call emacs_ (iox_$user_output, (send_mail_info.emacs_seg_pathname),
	     ext_pname, addr (emacs_flavor), status);

	if restore_menu_needed
	then do;
	     call xmail_window_manager_$restore_menu ();
	     call xmail_redisplay_$menu;
	     restore_menu_needed = "0"b;
	end;

	call hcs_$status_mins (temp_seg_ptr, type, bit_count, code);
	if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", ERROR_MESSAGE);
	if bit_count = 0
	then do;
	     call xmail_window_manager_$reconnect ();
	     call ioa_ (HIT_QUIT_KEY);
	     call CLEAN_UP;
	     goto EXIT;
	end;

	if status = 1
	then do;
	     call store_msg ();
	     goto EXIT;
	end;

/* If forwarding message now then call proc for extracting the "subject", 
"text", and determining the primary and secondary (if any) recipients
 address list structures */


	call xmail_process_user_msg_ ();		/* no parameter */
EXIT:
	return;

/* INTERNAL PROCEDURES */

store_msg: proc ();


/* ENTRIES */

	dcl     xmail_select_file_$caller_msg entry (char (*), char (*), char (*), bit (1) aligned, bit (1) aligned,
				 char (168), char (32) var, char (*), bit (1) aligned, bit (1) aligned, fixed bin (35));

/* BASED */

	dcl     stored_string	 char (no_chars) based (stored_msg_ptr);

/* BEGIN */


	call xmail_select_file_$caller_msg ("deferred message", "defer", "", ALLOW_OLD, ALLOW_NEW, store_dir, store_file, "Type name you wish to give the ""deferred message"" (or ?? for list)", unused_bit, unused_bit2, code);
	if code ^= 0
	then do;
	     call ioa_ ("Sorry, ""deferred message"" not saved.");
	     call CLEAN_UP;
	     return;
	end;

	stored_msg_ptr = null ();
	call hcs_$make_seg (store_dir, rtrim (store_file) || ".defer", "", RW_ACCESS_BIN, stored_msg_ptr, code);

	if code ^= 0 & code ^= error_table_$namedup & code ^= error_table_$segknown then do;
	     call ioa_ ("Sorry, unable to save ""deferred message"". This is an internal error.");
	     call CLEAN_UP;
	     return;
	end;

	call terminate_file_ (stored_msg_ptr, bit_count, TERM_FILE_BC, code);

/* Get number of chars in seg */

	no_chars = divide (bit_count, 9, 17, 0);

	stored_string = based_string;
	call ioa_ ("Deferred message  ""^a"" saved.", store_file);

	return;
     end store_msg;

CLEAN_UP: proc ();

	if temp_seg_ptr ^= null ()
	then call delete_$ptr (temp_seg_ptr, DELETE_SEG_FORCE_CHASE, NAME, code);
	send_mail_info.stored_seg_ptr = null ();
/*	send_mail_info.msg_exists = "0"b;      
 * the above line was moved to the on unit so that the message will only *
 * be marked as non_existant on a true cleanup condition, but will other-*
 * wise still be available.                                              */
	send_mail_info.emacs_seg_pathname = "";
	return;
     end CLEAN_UP;

     end xmail_prepare_msg_;
