/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-02-26,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Added new entrypoint xmail_list_msgs_$set_seen_switch which uses a
     structure of messages built by xmail_select_msgs_ and turns the seen
     switch on or off depending on the value in switch_on_off.  This entrypoint
     is called from xmail_Consult_Files_ or xmail_Process_Mail_ after the
     messages have been selected.
                                                   END HISTORY COMMENTS */


xmail_list_msgs_: proc (P_mailbox_ptr, P_curr_msgsp, P_iocb_ptr);

/* Author unknown.

   83-07-13  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes.
*/

/* Parameter */

	dcl     (P_mailbox_ptr, P_curr_msgsp, P_iocb_ptr) ptr;

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     i			 fixed bin;
	dcl     info_width		 fixed bin;
	dcl     iocb_ptr		 ptr;
	dcl     message_num		 fixed bin;

/* Static */

	dcl     MARK_CURRENT_MSGS	 bit (1) int static options (constant) init ("1"b);
	dcl     ME_CHAR		 char (16) int static options (constant) init ("xmail_list_msgs_");
	dcl     MIN_INFO_WIDTH	 fixed bin int static options (constant) init (67);

	dcl     (xmail_err_$mailbox_empty,
	        xmail_err_$all_msgs_deleted,
	        xmail_err_$no_curr_msgs) fixed bin (35) ext;

/* Entries */

	dcl     get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     mail_system_$read_message entry (ptr, fixed bin, fixed bin (35));
	dcl     mlsys_utils_$print_message_summary entry (ptr, fixed bin, bit (1) aligned, fixed bin, ptr, fixed bin (35));
	dcl     mlsys_utils_$print_message_summary_header entry (fixed bin, ptr, fixed bin (35));
	dcl     xmail_error_$code_first entry () options (variable);
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_validate_$mbx	 entry (ptr, fixed bin (35));
	dcl     xmail_validate_$curr_msgs entry (ptr, fixed bin (35));

/* builtin */

	dcl     (addr, null)	 builtin;

	call xmail_validate_$mbx (P_mailbox_ptr, code);
	if code ^= 0
	then call xmail_error_$no_code (code, ME_CHAR, "q", "Invalid mailbox structure. This is an internal programming error.");

	if P_curr_msgsp = null
	then ;
	else do;
	     call xmail_validate_$curr_msgs (P_curr_msgsp, code);
	     if code ^= 0
	     then call xmail_error_$no_code (code, ME_CHAR, "q", "Invalid message structure. This is an internal programming error.");
	end;

	mailbox_ptr = P_mailbox_ptr;
	curr_msgsp = P_curr_msgsp;
	iocb_ptr = P_iocb_ptr;

	if mailbox.n_messages = 0
	then call xmail_error_$code_first (xmail_err_$mailbox_empty, ME_CHAR, "i");

	if mailbox.n_messages <= mailbox.n_deleted_messages
	then call xmail_error_$code_first (xmail_err_$all_msgs_deleted, ME_CHAR, "i");

	call calc_info_width (info_width, code);
	if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Unable to get width of screen. This is an internal programming error.");

	call mlsys_utils_$print_message_summary_header (info_width, iocb_ptr, code);
	if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Unable to print message summary header. This is an internal programming error.");

	do i = 1 to mailbox.n_messages;
	     message_num = i;
	     if mailbox.messages (message_num).message_ptr = null
	     then do;
		call mail_system_$read_message (mailbox_ptr, message_num, code);
		if code ^= 0
		then call xmail_error_$no_code (code, ME_CHAR, "l", "Unable to read message ^d. This is an internal programming error.", message_num);
	     end;
	     message_ptr = mailbox.messages (message_num).message_ptr;

	     if ^message.marked_for_deletion
	     then do;
		call mlsys_utils_$print_message_summary (message_ptr, message_num, a_curr_msg (message_num), info_width, iocb_ptr, code);
		if code ^= 0
		then call xmail_error_$no_code (code, ME_CHAR, "l", "Unable to get summary for message ^d. This is an internal programming error.", message_num);
	     end;
	end;
EXIT:

	return;

selected: entry (P_mailbox_ptr, P_curr_msgsp, P_iocb_ptr);

	call xmail_validate_$mbx (P_mailbox_ptr, code);
	if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Invalid mailbox structure. This is an internal programming error.");

	if P_curr_msgsp = null
	then call xmail_error_$code_first (xmail_err_$no_curr_msgs, ME_CHAR, "i");
	else do;
	     call xmail_validate_$curr_msgs (P_curr_msgsp, code);
	     if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Invalid message structure. This is an internal programming error.");
	end;

	mailbox_ptr = P_mailbox_ptr;
	curr_msgsp = P_curr_msgsp;
	iocb_ptr = P_iocb_ptr;

	call calc_info_width (info_width, code);
	if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Unable to get width of screen. This is an internal programming error.");

	call mlsys_utils_$print_message_summary_header (info_width, iocb_ptr, code);
	if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Unable to print message summary header. This is an internal programming error.");

	do i = 1 to curr_msgs.count;
	     message_num = curr_msgs.numbers (i);
	     message_ptr = mailbox.messages (message_num).message_ptr;

	     call mlsys_utils_$print_message_summary (message_ptr, message_num, ^MARK_CURRENT_MSGS, info_width, iocb_ptr, code);
	     if code ^= 0
	     then call xmail_error_$no_code (code, ME_CHAR, "q", "Unable to get summary for message ^d. This is an internal programming error.");
	end;

	return;

set_seen_switch: entry (P_mailbox_ptr, P_curr_msgsp, P_switch);
	       
          dcl     P_switch               bit (1) aligned;
          dcl     mail_system_$set_message_switch entry (ptr, char (4) aligned, bit (1) aligned, fixed bin (35));

	call xmail_validate_$mbx (P_mailbox_ptr, code);
	if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Invalid mailbox structure. This is an internal programming error.");
	
	if P_curr_msgsp = null
          then call xmail_error_$code_first (xmail_err_$no_curr_msgs, ME_CHAR, "i");
	else do;
	     call xmail_validate_$curr_msgs (P_curr_msgsp, code);
	     if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Invalid message structure. This is an internal programming error.");
	     end;

	mailbox_ptr = P_mailbox_ptr;
	curr_msgsp = P_curr_msgsp;

	do i = 1 to curr_msgs.count;
	     message_num = curr_msgs.numbers (i);
	     message_ptr = mailbox.messages (message_num).message_ptr;
	     call mail_system_$set_message_switch (message_ptr, PER_MESSAGE_SEEN_SWITCH_TYPE, P_switch, code);
	     if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Unable to set the SEEN switch. This is an internal programming error.");
	     end;
	return;

%page;
/* Internal procedures */

a_curr_msg: proc (P_msg_num) returns (bit (1) aligned);

	dcl     P_msg_num		 fixed bin;
	dcl     i			 fixed bin;

	if curr_msgsp = null then return ("0"b);

	do i = 1 to curr_msgs.count;
	     if curr_msgs.numbers (i) = P_msg_num
	     then return ("1"b);
	end;

	return ("0"b);

     end a_curr_msg;

calc_info_width: proc (P_width, P_code);

	dcl     P_width		 fixed bin;
	dcl     P_code		 fixed bin (35);
	dcl     window_width	 fixed bin;
	dcl     error_table_$no_operation fixed bin (35) ext static;

	dcl     1 auto_window_position_info like window_position_info;

	P_code = 0;

	auto_window_position_info.version = window_position_info_version;
	call iox_$control (iocb_ptr, "get_window_info", addr (auto_window_position_info), P_code);
	if P_code = 0 then window_width = auto_window_position_info.width;
	else if P_code = error_table_$no_operation	/* output going to a file, possibly */
	then do;
	     window_width = get_line_length_$switch (iocb_ptr, (0));
	     P_code = 0;
	end;

/* We need to show a certain minimum amount of information. */

	if MIN_INFO_WIDTH > window_width
	then P_width = MIN_INFO_WIDTH;
	else P_width = window_width;

     end calc_info_width;

%page;
%include mlsys_mailbox;
%page;
%include rdm_switch_types;
%page;
%include mlsys_message;
%page;
%include xmail_curr_msg_info;
%page;
%include window_control_info;

     end xmail_list_msgs_;
