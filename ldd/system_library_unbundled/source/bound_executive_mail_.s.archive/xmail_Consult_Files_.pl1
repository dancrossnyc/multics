/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-01-07,Blair), approve(86-01-07,MCR7358),
     audit(86-05-19,RBarstad), install(86-05-28,MR12.0-1062):
     85-04-22 JG Backs: Modified SELECT_FILE proc, adding call to ioa_ to
     display a message to user that the file is being worked on.  If the file
     is large, opening will take some time and the user should know something
     is happening.
  2) change(86-01-07,Blair), approve(86-01-07,MCR7358),
     audit(86-05-19,RBarstad), install(86-05-28,MR12.0-1062):
     Modify SELECT_FILE to call a new entrypoint in xmail_select_files for
     the 'select new file' option to allow selecting other users' mailboxes.
  3) change(86-02-25,Blair), approve(86-02-25,MCR7358),
     audit(86-05-19,RBarstad), install(86-05-28,MR12.0-1062):
     Change call to xmail_select_msgs_ in OPT (6) so that this option can be
     used to set the seen switch for messages as well as select them. Now there
     is a ptr to a structure of seen_msgs, and a switch_on_off flag.
  4) change(87-01-19,Blair), approve(87-02-05,MCR7618),
     audit(87-04-10,RBarstad), install(87-04-26,MR12.1-1025):
     Set the bit xmail_data.msgs_as_mail to reflect whether or not we're
     processing interactive msgs.
  5) change(87-02-10,Blair), approve(87-02-10,MCR7618),
     audit(87-04-10,RBarstad), install(87-04-26,MR12.1-1025):
     Test for whether or not we're processing a reply request when the
     redisplay menu condition has been signalled.  This prevents the screen
     being messed up after a reconnect. Error_list #114.
  6) change(87-09-16,Blair), approve(87-09-16,MECR0007),
     audit(87-09-16,LJAdams), install(87-09-16,MR12.1-1108):
     Initialize the xmail_data.reply_request bit to "0"b so that the Filed Mail
     menu will be built correctly (otherwise it gets supressed).
  7) change(87-10-05,Blair), approve(87-10-05,MCR7771),
     audit(87-11-02,LJAdams), install(87-11-02,MR12.2-1002):
     This installation resolves MECR0007.
                                                   END HISTORY COMMENTS */


xmail_Consult_Files_: proc ();

/* BEGIN DESCRIPTION

function:  This module produces th "Process Filed Mail" menu and allows
           selection of the options displayed.  Other xmail modules are
           called as a result of options selected.

history:       Author unknown

   83-06-21  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes.

   83-09-22  DJ Schimke: Added calls to mail_system_$read_new_messages in the
   main option loop to keep the mailbox structure current. This is especially
   for the case where mail is filed into the current mailbox from the current
   mailbox. phx14804

   83-10-06  DJ Schimke: Changed both calls to xmail_file_msgs_ to calls to
   xmail_file_msgs_$current_msgs. The default file is now returned rather than
   kept as internal static in xmail_file_msgs_. These changes are a result of
   making xmail_file_msgs_ more robust.

   83-11-01  DJ Schimke: Changed the calling sequence of xmail_select_file_.

   84-02-07  DJ Schimke: Modified the code executed under xmail_err_$exit_now
   (PREV MENU key struck) to first revert the quit condition before calling
   done_with_file. This prevents a null pointer fault when the quit condition
   handler redirects execution back to the main loop (possibly after the 
   mailbox has been closed). phx16853

   84-04-10  DJ Schimke: Modified the code which checks the message count
   before opening a new mail file to allow opening of a mailbox without status
   permission to the mailbox. It now assumes there is at least 1 message so 
   that an attempt will be made to open the mailbox even if the message count
   cannot be determined (Normally we don't allow opening an empty mailbox.)
   The opening mode was also changed to ACCESSIBLE_MESSAGES rather than
   ALL_MESSAGES. This allows reading of any mailbox that you have at least
   "o" or "r" access to. 

   84-07-03  DJ Schimke: Modified to use a three-column menu format and to add 
   the "Write" option which calls xmail_write_msgs_. Replaced the "Message(s)" 
   in many menu options with "Messages" to reduce the width for three-column
   menu format.

   84-08-09  JG Backs: Added a call to xmail_list_msgs_$selected after the
   call to xmail_select_msgs_ when option (6) Select Messages is chosen, and
   after the call to xmail_select_msgs_$next when option (5) Next Message is
   chosen. This will automatically list the summary of newly selected messages.

   84-08-27  JG Backs: Created an internal procedure SELECT_FILE to replace the
   duplicate coding for selecting a new file within both PERFORM_OPTION and
   main proc.  This will insure a better message if there is incorrect access
   to a save mailbox.  phx18059.

   84-11-09  JG Backs: Modified to allow the updating and redisplay of the 
   current message line after messages are selected (option 6), but before
   they are listed.  This allows for the status line to be current if the 
   listing stops at a more prompt when there are many current messages.

   85-01-25 JG Backs: Added code to initialize file name at beginning of
   module.  The variable was tested in SELECT_FILE before being initialized.


END DESCRIPTION   
*/

/* AUTOMATIC */

          dcl     choice		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     default_file	 char (32) var;
	dcl     deletes_ptr		 ptr;
	dcl     dir		 char (168);
	dcl     display_needed	 bit (1) aligned;
	dcl     file		 char (32) varying;
	dcl     file_info		 char (256) var;
	dcl     multiple_msgs	 bit (1) aligned;
	dcl     new_dir		 char (168);
	dcl     new_file		 char (32) varying;
	dcl     old_no_of_entries	 fixed bin;
	dcl     ordinary_message_count, total_message_count fixed bin;
	dcl     pos_line		 char (256);
	dcl     position		 char (256) var;
          dcl     response               char (3) varying;	/* yes no or ask */          
	dcl     selecting_new_file	 bit (1) aligned;
	dcl     select_file_bad	 bit (1) aligned;
	dcl     status		 fixed bin (35);
          dcl     treat_msgs_as_mail     bit (1) aligned;
	dcl     unused_bit		 bit (1) aligned;
          dcl     unused_bit2            bit (1) aligned;
          dcl     yes_sw                 bit (1) aligned;
	dcl     another_mailbox	 bit (1) aligned;

	dcl     1 auto_open_options	 like open_options;
	dcl     1 auto_close_options	 like close_options;

/* BASED */

	dcl     1 deletes		 based (deletes_ptr),
		2 no_of_entries	 fixed bin,
		2 deletes_array	 (xn refer (no_of_entries)) char (25);

/* CONDITIONS */

	dcl     (cleanup, program_interrupt, xmail_redisplay_menu, quit) condition;

/* CONSTANTS */

	dcl     ALLOW_OLD		 bit (1) aligned init ("1"b) int static options (constant);
	dcl     ALLOW_SELECTION	 bit (1) aligned init ("1"b) int static options (constant);
	dcl     DONT_ALLOW_NEW	 bit (1) aligned init ("0"b) int static options (constant);
	dcl     EMPTY_FILE_MSG	 char (46) int static options (constant)
				 init ("There are no messages in the ""^a"" mail file.");
          dcl     MSGS_AS_MAIL           char (15) int static options (constant) init ("msgs_as_mail_yn");
	dcl     NAME		 init ("xmail_Consult_Files_") char (20) int static options (constant);
	dcl     N_COLUMNS		 fixed bin int static options (constant) init (3);
	dcl     OPTION_NAMES	 int static options (constant) init (
				 "Display",
				 "Reply",
				 "File Original",
				 "Discard Messages",
				 "Next Message",
				 "Select Messages",
				 "List Current Messages",
				 "List All Messages",
				 "Forward",
				 "Retrieve Messages",
				 "File Copy",
				 "Print",
				 "Write",
				 "Select New File"
				 ) dim (14) char (30) var;
	dcl     TITLE		 init ("Process Filed Mail") char (18)
				 int static options (constant);

/* BUILTINS */

	dcl     (addr, null, rtrim, translate) builtin;

/* ENTRIES */

	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);

	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     mail_system_$get_message_counts entry (char (*), char (*), bit (1) aligned, fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl     mail_system_$open_mailbox entry (char (*), char (*), ptr, char (8), ptr, fixed bin (35));
	dcl     mail_system_$close_mailbox entry (ptr, ptr, fixed bin (35));
	dcl     mail_system_$read_new_messages entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl     mail_system_$read_message entry (ptr, fixed bin, fixed bin (35));
	dcl     xmail_create_menu_	 entry (char (*), (*) char (*) var, fixed bin, ptr, fixed bin (35));
          dcl     xmail_error_$code_first entry() options(variable);
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_error_$no_print	 entry () options (variable);
	dcl     xmail_get_choice_	 entry (ptr, char (*), char (*), char (*), char (*), bit (1) aligned, char (*), fixed bin, fixed bin (35));
          dcl     xmail_get_str_$yes_no  entry (char(*) var, bit(1) aligned);
	dcl     xmail_select_file_$caller_msg entry (char (*), char (*), char (*), bit (1) aligned, bit (1) aligned,
				 char (168), char (32) var, char (*), bit (1) aligned, bit (1) aligned, fixed bin (35));
          dcl     xmail_select_file_$foreign_mailboxes entry (char (*), char (*), char (*), bit (1) aligned, bit (1) aligned, 
		                     char (168), char (32) var, char (*), bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     hcs_$set_bc_seg	 entry (ptr, fixed bin (24), fixed bin (35));
	dcl     xmail_select_msgs_$first entry (ptr, ptr, char (*));
	dcl     xmail_delete_dreply_	 entry (ptr);
	dcl     xmail_sw_$redisplay	 entry ();
	dcl     xmail_sw_$update_position entry (char (*));
	dcl     xmail_undelete_msgs_   entry (ptr, ptr, char (*), char (*));
          dcl     xmail_value_$get_with_default entry (char(*), char(*) var, char(*) var, fixed bin(35));
		  
		  
/* EXTERNAL STATIC */

	dcl     error_table_$moderr	 fixed bin (35) ext static;
	dcl     iox_$user_output	 ptr ext static;
	dcl     mlsys_et_$no_more_messages fixed bin (35) ext static;
	dcl     mlsys_et_$no_r_permission fixed bin (35) ext static;
	dcl     xmail_err_$help_requested fixed bin (35) ext static;
	dcl     xmail_err_$exit_now	 fixed bin (35) ext static;

/* INTERNAL STATIC */

	dcl     menup		 int static ptr init (null);

/* INCLUDE FILES */

%include xmail_windows;
%page;
%include menu_dcls;
%page;
%include xmail_data;
%page;
%include window_dcls;
%page;
%include mlsys_open_options;
%page;
%include mlsys_close_options;
%page;
%include mlsys_mailbox;
%page;
%include mlsys_message;
%page;
%include xmail_curr_msg_info;
%page;
%include xmail_responses;

/* BEGIN */
	on condition (xmail_redisplay_menu) begin;
		if menup ^= null then do;
		     if ^xmail_data.reply_request
			then call menu_$display (xmail_windows.menu.iocb, menup, code);
		     if code ^= 0
			then call xmail_error_$no_code (code, NAME, "l",
			"Unable to display menu. This is an internal programming error.");
		     end;
		end;
	     
	deletes_ptr = null ();
	call hcs_$make_seg ("", "seg_of_deletes2", "", 01010b, deletes_ptr, (0));
	no_of_entries, old_no_of_entries = 0;

	file = "";				/* initialize file name */
	mailbox_ptr = null;
	curr_msgsp = null;
	xmail_data.cleanup_signalled, xmail_data.reply_request = "0"b;

	on condition (cleanup) begin;
		call done_with_file ();
	     end;

	selecting_new_file = "0"b;

	if menup = null
	then do;
	     call xmail_create_menu_ (TITLE, OPTION_NAMES, N_COLUMNS, menup, code);
	     if code ^= 0
	     then call xmail_error_$no_code (code, NAME, "q",
		     "Unable to get menu. This is an internal programming error.");
	end;

	call SELECT_FILE;
	if select_file_bad
	then go to EXIT;

	on condition (program_interrupt) go to START;
	on condition (quit)
	     begin;
		dcl     xmail_window_manager_$reconnect entry ();
		call xmail_window_manager_$reconnect ();
		go to START;
	     end;

START:	display_needed = "1"b;

	do while ("1"b);

	     if mailbox_ptr = null
	     then do;
		file = " ";
		file_info = " ";
		position = "Current message:  ";
		go to skipit;
	     end;

	     call ioa_$rsnnl ("Total messages: ^d", file_info, (0), mailbox.n_messages - mailbox.n_deleted_messages);
	     if curr_msgsp ^= null
	     then if curr_msgs.count > 1
		then multiple_msgs = "1"b;
		else multiple_msgs = "0"b;

	     call ioa_$rsnnl ("Current message^[^ss^;^[s^]^]: ^a", position, (0), curr_msgsp = null, multiple_msgs, pos_line);

skipit:	     call xmail_get_choice_ (menup,
		"File: " || file,
		(file_info),
		(position),
		xmail_data.normal_usage,
		display_needed,
		"",
		choice,
		code);
	     display_needed = "0"b;
	     if code = 0
	     then do;
		call PERFORM_OPTION (choice, display_needed);
		call mail_system_$read_new_messages (mailbox_ptr, (0), (0), (0), status);
		if status ^= 0 & status ^= mlsys_et_$no_more_messages
		then call xmail_error_$no_code (status, NAME, "q", "Unable to read mail file. This is an internal programming error.");
	     end;
	     else if code = xmail_err_$help_requested
	     then call EXPLAIN_OPTION (choice);
	     else if code = xmail_err_$exit_now
	     then do;				/* PREV MENU */
		revert quit;			/* close null pointer window */
		call done_with_file ();
		go to EXIT;
	     end;
	     else do;
		call window_$bell (iox_$user_output, code);
		if code ^= 0
		then call xmail_error_$no_print (code, NAME, "l", "Cannot ring terminal bell. This is an internal programming error.");
	     end;
	end;

EXIT:	return;

/* INTERNAL PROCEDURES */

PERFORM_OPTION: proc (opt, redisplay);

/* PARAMETERS */

	dcl     opt		 fixed bin;
	dcl     redisplay		 bit (1) aligned;

/* AUTOMATIC */

	dcl     deleted_msg_string	 char (25);
	dcl     message_num		 fixed bin;
	dcl     idx		 fixed bin;
	dcl     idx1		 fixed bin;
	dcl     dreply_msg_ptr	 ptr;
	dcl     counter		 fixed bin;
          dcl     seen_msgsp             ptr;
          dcl     switch_on_off          bit (2) aligned;
          dcl     switch                 bit (1) aligned;
	      
/* CONSTANTS */

	dcl     mailbox_empty_msg	 char (19) static options (constant) init
				 ("Mail file is empty.");
          dcl     SWITCH_ON              bit (2) aligned init ("10"b) int static options (constant);
	      
/* ENTRIES */

	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     xmail_delete_msgs_	 entry (ptr, ptr, char (*), char (*));
	dcl     xmail_display_msgs_	 entry (ptr, ptr, ptr);
	dcl     xmail_dprint_msgs_	 entry (ptr, ptr);
	dcl     xmail_file_msgs_$current_msgs entry (ptr, ptr, char (32) var, bit (1) aligned);
	dcl     xmail_forward_msg_	 entry (ptr, ptr);
	dcl     xmail_list_msgs_	 entry (ptr, ptr, ptr);
	dcl     xmail_list_msgs_$selected entry (ptr, ptr, ptr);
          dcl     xmail_list_msgs_$set_seen_switch entry (ptr, ptr, bit (1) aligned);
	dcl     xmail_reply_msg_	 entry (ptr, ptr);
	dcl     xmail_select_msgs_	 entry (ptr, ptr, ptr, bit (2) aligned, char (*));
	dcl     xmail_select_msgs_$next entry (ptr, ptr, char (*));
	dcl     xmail_write_msgs_	 entry (ptr, ptr);

/* BEGIN PERFORM_OPTION */

	call window_$clear_window (iox_$user_output, code);
	if code ^= 0
	then call xmail_error_$no_print (code, NAME, "l", "Cannot clear user_io window. This is an internal programming error.");

	go to OPT (opt);


OPT (1):						/* Display Option */
	if curr_msgsp ^= null ()
	then call xmail_display_msgs_ (mailbox_ptr, curr_msgsp, iox_$user_output);
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (2):						/* Reply option */
	if curr_msgsp ^= null ()
	then call xmail_reply_msg_ (mailbox_ptr, curr_msgsp);
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (3):						/* File Original Option */
	if curr_msgsp ^= null () then do;
	     call xmail_file_msgs_$current_msgs (mailbox_ptr, curr_msgsp, default_file, ALLOW_SELECTION);
	     call mail_system_$read_new_messages (mailbox_ptr, (0), (0), (0), status);
	     if status ^= 0 & status ^= mlsys_et_$no_more_messages
	     then call xmail_error_$no_code (status, NAME, "q", "Unable to read mail file. This is an internal programming error.");
	     if default_file ^= ""
	     then call delete_msgs;
	end;
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (4):						/* Delete Option */
	if curr_msgsp ^= null ()
	then call delete_msgs;
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (5):						/* Next Message Option */
	if curr_msgsp ^= null ()
	then do;
	     call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	     call xmail_list_msgs_$selected (mailbox_ptr, curr_msgsp, iox_$user_output);
	end;
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (6):						/* Select Messages Option */
	if curr_msgsp ^= null ()
	then do;
	     call xmail_select_msgs_ (mailbox_ptr, curr_msgsp, seen_msgsp, switch_on_off, pos_line);
	     call window_$clear_window (iox_$user_output, code);
	     if code ^= 0
	     then call xmail_error_$no_print (code, NAME, "l", "Cannot clear user_io window. This is an internal programming error.");

/* update and redisplay the new message line before list */

	     if seen_msgsp ^= null
	     then do;
		     if switch_on_off = SWITCH_ON  then switch = "1"b;
		     else switch = "0"b;
		     call xmail_list_msgs_$set_seen_switch (mailbox_ptr, seen_msgsp, switch);
		     free seen_msgsp -> curr_msgs;
		     end;
	     else if curr_msgsp ^= null then do;
		if curr_msgs.count > 1
		then multiple_msgs = "1"b;
		else multiple_msgs = "0"b;
		call ioa_$rsnnl ("Current message^[^ss^;^[s^]^]: ^a", position, (0), curr_msgsp = null, multiple_msgs, pos_line);
		call xmail_sw_$update_position ((position));
		call xmail_sw_$redisplay ();
		call xmail_list_msgs_$selected (mailbox_ptr, curr_msgsp, iox_$user_output);
		end;
	end;
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (7):						/* Display Summary of Current Messages Option */

	if curr_msgsp ^= null ()
	then call xmail_list_msgs_$selected (mailbox_ptr, curr_msgsp, iox_$user_output);
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (8):						/* Display Summary of Messages Option */
	if curr_msgsp ^= null ()
	then call xmail_list_msgs_ (mailbox_ptr, curr_msgsp, iox_$user_output);
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (9):						/* Forward  option */
	if curr_msgsp ^= null ()
	then call xmail_forward_msg_ (mailbox_ptr, curr_msgsp);
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (10):						/* Undelete Messages Option */
	if mailbox_ptr ^= null ()
	then do;
	     call xmail_undelete_msgs_ (mailbox_ptr, curr_msgsp, pos_line, "");
	     if curr_msgsp = null ()
	     then go to PERFORM_EXIT;

	     do idx = 1 to curr_msgs.count;
		message_num = curr_msgs.numbers (idx);
		if mailbox.messages (message_num).message_ptr = null
		then do;
		     call mail_system_$read_message (mailbox_ptr, message_num, code);
		     if code ^= 0
		     then call xmail_error_$no_code (code, NAME, "l", "Unable to read message ^d. This is an internal programming error.", message_num);
		end;
		dreply_msg_ptr = mailbox.messages (message_num).message_ptr;
		deleted_msg_string = unique_chars_ ((dreply_msg_ptr -> message.header.message_id)) || ".reply";
		do idx1 = 1 to no_of_entries;
		     if deletes_array (idx1) = deleted_msg_string
		     then deletes_array (idx1) = "";
		end;				/* end do */
	     end;					/*end do */
	end;

	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (11):						/* File Copy Option */
	if curr_msgsp ^= null ()
	then call xmail_file_msgs_$current_msgs (mailbox_ptr, curr_msgsp, default_file, ALLOW_SELECTION);
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (12):						/* Print Option */
	if curr_msgsp ^= null ()
	then call xmail_dprint_msgs_ (mailbox_ptr, curr_msgsp);
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (13):						/* Write Option */
	if curr_msgsp ^= null ()
	then call xmail_write_msgs_ (mailbox_ptr, curr_msgsp);
	else call ioa_ (mailbox_empty_msg);
	go to PERFORM_EXIT;

OPT (14):						/* Select New File Option */
	selecting_new_file = "1"b;
	xmail_data.foreign_mailbox = "1"b;
	
	call SELECT_FILE;
	xmail_data.foreign_mailbox = "0"b;
	if select_file_bad
	then go to PERFORM_EXIT;
	else go to START;


delete_msgs: proc;					/* Internal to PERFORM_OPTION proc */

	no_of_entries = old_no_of_entries + curr_msgs.count;
	call hcs_$set_bc_seg (deletes_ptr, no_of_entries * 225 + 36, code);
	counter = 0;
	do idx = (old_no_of_entries + 1) to no_of_entries;
	     counter = counter + 1;
	     message_num = curr_msgs.numbers (counter);
	     if mailbox.messages (message_num).message_ptr = null
	     then do;
		call mail_system_$read_message (mailbox_ptr, message_num, code);
		if code ^= 0
		then call xmail_error_$no_code (code, NAME, "l", "Unable to read message ^d. This is an internal programming error.", message_num);
	     end;
	     dreply_msg_ptr = mailbox.messages (message_num).message_ptr;
	     deletes_array (idx) = unique_chars_ ((dreply_msg_ptr -> message.header.message_id)) || ".reply";
	     call hcs_$status_minf ((mail_dir), (deletes_array (idx)), (0), (0), (0), code);
	     if code = 0
	     then call ioa_ ("^/   The deferred reply for message no.^d was discarded.^/   To retrieve it, select the ""Retrieve Messages"" option.^/", message_num);
	end;

	old_no_of_entries = no_of_entries;
	call xmail_delete_msgs_ (mailbox_ptr, curr_msgsp, pos_line, (file));
	return;
     end delete_msgs;

PERFORM_EXIT:
	if mailbox_ptr = null			/* test for null file */
	then go to START;
	return;

     end PERFORM_OPTION;

SELECT_FILE: proc;

/* function: a new internal procedure to select a new mail file to process.
             Called from both main and PERFORM_OPTION procedures.  The
             variable, select_file_bad, is set upon entry and will only be 
             cleared if everything is OK.	   
*/
	   dcl file_name  char (32);

/* BEGIN SELECT_FILE */

	select_file_bad = "1"b;

	if xmail_data.foreign_mailbox then do;
	     call xmail_select_file_$foreign_mailboxes ("mail file", "sv.mbx", "", ALLOW_OLD, DONT_ALLOW_NEW, new_dir, new_file, "Enter name of mail file you wish to process (or ?? for list)",another_mailbox, unused_bit, code);
	     if code ^= 0 | file = new_file 
		then goto SELECT_EXIT;
	     end;
         else do;
	     call xmail_select_file_$caller_msg ("mail file", "sv.mbx", "", ALLOW_OLD, DONT_ALLOW_NEW, new_dir, new_file, "Enter name of mail file you wish to process (or ?? for list)", unused_bit, unused_bit2, code);
	if code ^= 0 | file = new_file
	then go to SELECT_EXIT;
		                                        /* msg to user */
	call ioa_ ("The ""^a"" file has been selected...", new_file); 

/* Allow no_s_permission for reading of mailboxes other than user's. */

	call mail_system_$get_message_counts (new_dir, new_file || ".sv", "1"b, total_message_count, ordinary_message_count, (0), code);
	if code = mlsys_et_$no_r_permission
	then call xmail_error_$no_code (code, NAME, "i", " You do not have access to read the ""^a"" mail file.", new_file);
	else if code = 0 & total_message_count = 0
	then do;
	     call ioa_ (EMPTY_FILE_MSG, new_file);
	     go to SELECT_EXIT;
	     end;
	end;

/* Option "Select New File" */

	if selecting_new_file
	then do;
	     call done_with_file ();
	     selecting_new_file = "0"b;
	end;

/* Set up to open mailbox */

	default_file = "";
	dir = new_dir;
	file = new_file;

/* Determine if we want all msgs or just ordinary ones */
	call xmail_value_$get_with_default (MSGS_AS_MAIL, (NO), response, code);
	if code ^= 0 then call xmail_error_$code_first (code, NAME, "q",
		"^/Unable to get a value for ""^a"" in the xmail value segment.", MSGS_AS_MAIL);

	treat_msgs_as_mail = "0"b;
	if response = YES
          then do;
	     treat_msgs_as_mail = "1"b;
	     xmail_data.msgs_as_mail = "1"b;
	     end;
	else if response = ASK
	then do;
		call xmail_get_str_$yes_no ("Do you wish to treat interactive msgs as mail? ", yes_sw);
		if yes_sw then do;
		     treat_msgs_as_mail = "1"b;
		     xmail_data.msgs_as_mail = "1"b;
		     end;
	     end;
	else xmail_data.msgs_as_mail = "0"b;
	
/* Open the mailbox and set the first current message to one */

	auto_open_options.version = OPEN_OPTIONS_VERSION_2;
	if treat_msgs_as_mail then
	auto_open_options.message_selection_mode = ALL_MESSAGES;
	else auto_open_options.message_selection_mode = ORDINARY_MESSAGES;
/*	if xmail_data.foreign_mailbox
	     then auto_open_options.message_selection_mode = OWN_MESSAGES;
	else
	     auto_open_options.message_selection_mode = ORDINARY_MESSAGES; */
	auto_open_options.sender_selection_mode = ACCESSIBLE_MESSAGES;
	auto_open_options.message_reading_level = READ_KEYS;

	if ^another_mailbox
	     then file_name = rtrim(file) || ".sv";
	else
	      file_name = file;
	
	call mail_system_$open_mailbox (dir, rtrim(file_name), addr (auto_open_options), MAILBOX_VERSION_2, mailbox_ptr, code);
	if code = error_table_$moderr
	then call xmail_error_$no_code (code, NAME, "i", " You do not have access to read the ""^a"" mail file.", file);
	else if code ^= 0
	then call xmail_error_$no_code (code, NAME, "q", "Unable to open mail file, ""^a"".", file);

		                                        /* clear msg */
	call window_$clear_window (iox_$user_output, code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Cannot clear user_io window. This is an internal programming error.");

/* test for no accessible messages in mail file */

	if mailbox.n_messages = 0
	then do;
	     call done_with_file;
	     call ioa_ (EMPTY_FILE_MSG, new_file);
	     go to SELECT_EXIT;
	end;

	call xmail_select_msgs_$first (mailbox_ptr, curr_msgsp, pos_line);
	if curr_msgsp = null
	then do;
	     call done_with_file ();
	     go to SELECT_EXIT;
	end;


/* Clear to indicate file OK */

	select_file_bad = "0"b;

SELECT_EXIT:
	return;

     end SELECT_FILE;

EXPLAIN_OPTION: proc (opt);

/* PARAMETERS */

	dcl     opt		 fixed bin;

/* ENTRIES */

	dcl     xmail_display_help_	 entry (char (*), char (*), fixed bin (35));

/* BEGIN EXPLAIN_OPTION */

	call window_$clear_window (iox_$user_output, code);
	if code ^= 0
	then call xmail_error_$no_print (code, NAME, "l", "Cannot clear user_io window. This is an internal programming error.");
	call xmail_display_help_ (NAME || ".gi.info",
	     translate (OPTION_NAMES (opt), "_", " "), code);
	if code ^= 0
	then call xmail_error_$no_print (code, NAME, "l", "Unable to display help. This is an internal programming error.");

     end EXPLAIN_OPTION;

done_with_file: proc ();

	if mailbox_ptr ^= null
	then do;
	     if xmail_data.cleanup_signalled 
		then call xmail_undelete_msgs_ (mailbox_ptr, curr_msgsp, pos_line, "");
	     xmail_data.cleanup_signalled = "0"b;
	     auto_close_options.version = CLOSE_OPTIONS_VERSION_2;
	     auto_close_options.flags.perform_deletions = "1"b;
	     auto_close_options.flags.report_deletion_errors = "0"b;
	     auto_close_options.flags.mbz = "0"b;
	     call mail_system_$close_mailbox (mailbox_ptr, addr (auto_close_options), code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, "l", "Unable to close user mailbox. This is an internal programming error.");
	end;

          xmail_data.foreign_mailbox = "0"b;
	if curr_msgsp ^= null ()
	then do;
	     free curr_msgs;
	     curr_msgsp = null ();
	end;
	if (deletes_ptr ^= null () & no_of_entries ^= 0) then call xmail_delete_dreply_ (deletes_ptr);
	old_no_of_entries = 0;

     end done_with_file;


     end xmail_Consult_Files_;

