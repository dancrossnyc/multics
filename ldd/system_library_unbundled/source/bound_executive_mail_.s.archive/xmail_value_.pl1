/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-02-26,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Add new internal procedures to get the value segment ptr, validate the
     value returned by value_$get, and determine the default value for a
     particular name. There is a table of names of the values used by xmail and
     validate_name_and_index returns the index to tables of validation routines
     and default values.
     
     There is also a new entry point - get_no_validate.
  2) change(86-07-15,Blair), approve(86-07-15,MCR7447),
     audit(86-07-16,LJAdams), install(86-07-21,MR12.0-1100):
     Initiate the data_seg for RW when getting the pointer to it so as to avoid
     problems with differing ring-brackets.
  3) change(87-01-21,Blair), approve(87-02-05,MCR7618),
     audit(87-04-10,RBarstad), install(87-04-26,MR12.1-1025):
     Make entries in the default_value array and test_value array for the new
     value seg entry msgs_as_mail_yn.
                                                   END HISTORY COMMENTS */

/*
			xmail_value_

	This program provides an interface to the xmail value segment.
	Entries are provided to manipulate named values.  The actual
	management of the segment is performed via the value_$...
	utility subroutines for dealing with value segments.  The
	entries provided here provide primarily a subset of the
	capabilities provided by value_, the major difference being that
	the specification of the value segment itself is absent.

	The other major change is that arbitrary datatypes are not allowed.
	To ease the implementation, names are always char (*) and values
	are always char (*) varying.

	Additional functionality has been added in the form of a new
	entrypoint, get_with_default, which automatically returns a
	specified default value when the name is not defined.

	The following parameter names are common to the various entries:

	name:	   the name of the value to be referenced

	in_value:    a value supplied by the caller

	out_value:   a value returned to the caller

	test_value:  a value supplied by the caller for test purposes

	code	   a system status code as returned by value_

	**************************************************************

	The following entrypoints are defined:

	defined (name, code) returns (bit (1))
	delete (name, code)
	get (name, out_value, code)
	set (name, in_value, out_value, code)
	test_and_set (name, in_value, test_value, code)
	get_with_default (name, in_value, out_value, code)

	In set, out_value is the old value before it was changed.
	In get_with_default, in_value is the default, which is returned
	in out_value if no value is defined.
*/

/* Written 6/29/81 by Paul Kyzivat */
/* format: style1 */
%page;
xmail_value_: proc;

	dcl     name		 char (*) parameter,
	        in_value		 char (*) varying parameter,
	        out_value		 char (*) varying parameter,
	        test_value		 char (*) varying parameter,
	        code		 fixed bin (35);
          dcl     index                  fixed bin;
          dcl     (fixed, length, null, rtrim, search, verify)
                                         builtin;
	dcl     value_seg_ptr          ptr;
	dcl     PERMANENT		 init ("01"b) bit (36) aligned static options (constant);
	dcl     error_table_$oldnamerr fixed bin (35) ext static;
	dcl     value_$defined	 entry (ptr, bit (36) aligned, char (*), fixed bin (35)) returns (bit (1) aligned),
	        (
	        value_$delete,
	        value_$get,
	        value_$set,
	        value_$test_and_set
	        )			 entry options (variable);
          dcl xmail_rebuild_value_seg_ entry (ptr, fixed bin (35));	
%page;
defined: entry (name, code) returns (bit (1));
          call validate_value_seg (value_seg_ptr);
          call validate_name_and_index (name, index);
	return (value_$defined (value_seg_ptr , PERMANENT, name, code));

delete: entry (name, code);
          call validate_value_seg (value_seg_ptr);
          call validate_name_and_index (name, index);
	call value_$delete (value_seg_ptr, PERMANENT, name, code);
	return;

get: entry (name, out_value, code);
	call validate_value_seg (value_seg_ptr);
          call validate_name_and_index (name, index);
	if value_seg_ptr ^= null
	then call value_$get (value_seg_ptr, PERMANENT, name, out_value, code);
	if code = error_table_$oldnamerr & (index > 14 & index < 21) then; 
	else if code ^= 0 | value_seg_ptr = null
	then do;
		call xmail_rebuild_value_seg_ (value_seg_ptr, code);
		call get_default_value (index, out_value);
	     end;	     
	else do;
	     call validate_returned_value (index, out_value, code);
	     if code ^= 0
	     then do;
		call xmail_rebuild_value_seg_ (value_seg_ptr, code);
		call get_default_value (index, out_value);
		end;
	     end;
	return;

get_no_validate: entry (name, out_value, code);
	call validate_value_seg (value_seg_ptr);
          call validate_name_and_index (name, index);
	if value_seg_ptr ^= null
	then call value_$get (value_seg_ptr, PERMANENT, name, out_value, code);
	if code = error_table_$oldnamerr then; 
	else if code ^= 0 | value_seg_ptr = null
	then do;
	     call xmail_rebuild_value_seg_ (value_seg_ptr, code);
	     call get_default_value (index, out_value);
	     end;	     
	return;

set: entry (name, in_value, out_value, code);
          call validate_value_seg (value_seg_ptr);
	call validate_name_and_index (name, index);
	if value_seg_ptr = null
	     then call xmail_rebuild_value_seg_ (value_seg_ptr, code);
	call value_$set (value_seg_ptr, PERMANENT, name, in_value, out_value, code);
	if code ^= 0 then do;
	     call xmail_rebuild_value_seg_ (value_seg_ptr, code);
	     call get_default_value (index, out_value);
	     end;
	return;



test_and_set: entry (name, in_value, test_value, code);
	call validate_value_seg (value_seg_ptr);
          call validate_name_and_index (name, index);

          call value_$test_and_set (value_seg_ptr, PERMANENT, name, in_value, out_value, code);
	if code ^= 0 then do;
	     call xmail_rebuild_value_seg_ (value_seg_ptr, code);
	     call get_default_value (index, out_value);
	     end;
	return;

get_with_default: entry (name, in_value, out_value, code);
	call validate_value_seg (value_seg_ptr);
	call validate_name_and_index (name, index);
	if value_seg_ptr ^= null
	then call value_$get (value_seg_ptr, PERMANENT, name, out_value, code);
	if (code = error_table_$oldnamerr) then do;
		out_value = in_value;
		code = 0;
	     end;
	else if code ^= 0 then do;
	     call xmail_rebuild_value_seg_ (value_seg_ptr, code);
	     call get_default_value (index, out_value);
	     end;
	return;
%page;
validate_value_seg:  proc (vvs_value_seg_ptr);
		 
	dcl initiate_file_    entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
	dcl bc                fixed bin (24);
	dcl vvs_code              fixed bin (35);
          dcl vvs_value_seg_ptr ptr;
          dcl VALUE_SEG_NAME    init ("xmail_data.value") char (32) var int static options (constant);

/* Get the pointer to the value seg just before we use it */

	vvs_value_seg_ptr = null;
	call initiate_file_ (rtrim(xmail_data.value_seg_pathname), (VALUE_SEG_NAME), RW_ACCESS, vvs_value_seg_ptr, bc, vvs_code);
	return;
     end validate_value_seg;

validate_name_and_index: proc (vn_name, vn_index);
		     	 
	dcl VN_NAME_ARRAY dim (1:21) char (25) int static options (constant) init
              ("acknowledge_yn           ",
               "always_escape_keys_yn    ",
               "confirm_print_yn         ",
               "file_original_yn         ",
               "include_original_yn      ",
               "original_up_window_yn    ",
               "msgs_as_mail_yn          ",
               "interactive_msgs_yn      ",
	     "lists_as_menus_yn        ",
               "multics_mode_yn          ",
               "remove_menus_yn          ",
               "save_mailfile            ",
               "save_message_yn          ",
               "version                  ",
               "dprint_heading           ",
               "dprint_destination       ",
               "dprint_request_type      ",
               "dprint_copies            ",
               "dprint_left_margin       ",
               "dprint_notify            ",
               "lifetime_first_invocation");
          dcl vn_index        fixed bin;
          dcl vn_name         char (*);
/* Now get the index to the table of names */

          do vn_index = 1 to 21 while (VN_NAME_ARRAY (vn_index) ^= rtrim(vn_name));
	     end;
	return;
     end validate_name_and_index;
%page;
validate_returned_value: proc (vrv_index, vrv_out_value, vrv_code);

          dcl vrv_code         fixed bin (35);
          dcl vrv_index        fixed bin;
          dcl vrv_out_value    char (*) var;
          dcl generic_type     char (32);
          dcl non_number       fixed bin;
          dcl TEST_VALUE_ARRAY dim (1:21) fixed bin int static options (constant) init
              (1,2,2,1,1,2,1,2,2,2,2,3,1,9,4,5,6,8,7,1,1);

          dcl NO           init ("no") char (2) int static options (constant);
	dcl YES          init ("yes") char (3) int static options (constant);
	dcl ASK          init ("ask") char (3) int static options (constant);
          dcl INVALID_CHARS init (" <()[]{}*,;") char (12) int static options (constant);
	dcl VALID_LENGTH fixed bin init (32) int static options (constant);
	
         	dcl error_table_$bigarg fixed bin(35) ext static;
	dcl error_table_$bad_arg fixed bin(35) ext static;
          dcl error_table_$smallarg fixed bin(35) ext static;
          dcl iod_info_$generic_type entry (char(*), char(32), fixed bin(35));

	vrv_code = 0;
          goto OPTION (TEST_VALUE_ARRAY (vrv_index));
	
OPTION (1):	/* yes_no_ask */
	if ^(vrv_out_value = YES |
	     vrv_out_value = NO |
	     vrv_out_value = ASK)
	     then vrv_code = error_table_$bad_arg;
	return;

OPTION (2):	/* yes_no */
	if ^(vrv_out_value = YES | vrv_out_value = NO)
	     then vrv_code = error_table_$bad_arg;
	return;
OPTION (3):	/* save messages in mailbox name */
	if length (vrv_out_value) > VALID_LENGTH
	     then code = error_table_$smallarg;
	else
	     if search (vrv_out_value, INVALID_CHARS) ^= 0 then 
	     code = error_table_$bad_arg;
	return;

OPTION (4):	/* header */
	if length(vrv_out_value) > 64
	     then vrv_code = error_table_$bigarg;
          return;

OPTION (5):	/* destination */
	if length (vrv_out_value) < 0 | length (vrv_out_value) > 20
	     then vrv_code = error_table_$bigarg;
	return;

OPTION (6):	/* station */
	if rtrim(vrv_out_value) = "default" then ;
	else do;
	     if length(vrv_out_value) > 24
	     then code = error_table_$smallarg;
	     else call iod_info_$generic_type ((vrv_out_value), generic_type, vrv_code);
	     end;
	return;

OPTION (7):	     /* margin */
	    
	non_number = verify (vrv_out_value, "-0123456789");
	if non_number ^= 0
	     then vrv_code = error_table_$bad_arg;
	else
	     if (fixed(vrv_out_value))  < 0 |
	        (fixed(vrv_out_value))  > 20
	     then vrv_code = error_table_$bigarg;
	return;

OPTION (8):	     /* copies */
	non_number = verify (vrv_out_value, "-0123456789");
	if non_number ^= 0
	     then vrv_code = error_table_$bad_arg;
	else
	     if (fixed(vrv_out_value))  < 1 |
	        (fixed(vrv_out_value))  > 30
	     then vrv_code = error_table_$bigarg;
	return;

OPTION (9):             /* no check */
               return;

     end validate_returned_value;
%page;
get_default_value: proc (gdv_index, gdv_out_value);
	         
         dcl gdv_index             fixed bin;
         dcl gdv_out_value         char (*) var;

         dcl GDV_DEFAULT_CLASS_ARRAY dim (1:21) fixed bin int static options (constant) init
         (1,1,2,1,1,2,1,2,1,1,1,3,2,4,5,5,5,5,5,1,1);

         goto OPTION (GDV_DEFAULT_CLASS_ARRAY (gdv_index));

OPTION (1):      /* no */
         gdv_out_value = "no";
         return;
OPTION (2):      /* yes */
         gdv_out_value = "yes";
         return;
OPTION (3):      /* ask */
         gdv_out_value = "ask";
         return;
OPTION (4):      /* version */
         gdv_out_value = xmail_version;
         return;
OPTION (5):      /* all other */
         return;
     end get_default_value;
%include xmail_data;
%include access_mode_values;


     end xmail_value_;
