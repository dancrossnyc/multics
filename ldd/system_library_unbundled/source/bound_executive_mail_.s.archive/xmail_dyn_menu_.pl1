/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-01-07,LJAdams), approve(86-04-15,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Added screen headers for General Help Topics screen.
                                                   END HISTORY COMMENTS */


xmail_dyn_menu_: proc ();

/* Author unknown.   

   83-07-05  DJ Schimke: Deleted dcl for unreferenced ME_CHAR.

   83-10-11  DJ Schimke: Added free entry point to free storage used by
   the dynamic menus. This entry should be called by cleanup procedures
   wherever dynamic menus are created.
*/
/* Parameter */

	dcl     P_areap		 ptr;
	dcl     P_choice		 fixed bin;
	dcl     P_code		 fixed bin (35);
	dcl     P_dyn_menup		 ptr;
	dcl     P_dyn_menu_reqp	 ptr;
	dcl     P_fkey		 bit (1) aligned;
	dcl     P_index		 fixed bin;
	dcl     P_names		 (*) char (*) aligned;
	dcl     P_trailer		 char (*);

/* Automatic */

	dcl     area_ptr		 ptr;
	dcl     dyn_menup		 ptr;
	dcl     free_slots_per_menu	 fixed bin;
	dcl     last_menu_num	 fixed bin;
	dcl     menu_no		 fixed bin;
	dcl     n_slots_per_menu	 fixed bin;
	dcl     n_menus		 fixed bin;
	dcl     slots_avail		 fixed bin;
	dcl     slots_needed	 fixed bin;
	dcl     trailer_included	 bit (1) aligned;

/* Based */

	dcl     based_area		 area based (area_ptr);

	dcl     1 dyn_menu		 aligned based (dyn_menup),
		2 nth_menu	 fixed bin,
		2 menu_array	 (0:n_menus - 1 refer (dyn_menu.nth_menu)),
		  3 location	 ptr,
		  3 first_option	 fixed bin,
		  3 option_count	 fixed bin;

/* Entries */

          dcl     ioa_$rsnnl		 entry () options (variable);

/* Static */

	dcl     OPTION_CODES	 (61) char (1) unal static options (constant) init
				 ("1", "2", "3", "4", "5", "6", "7", "8", "9",
				 "a", "b", "c", "d", "e", "f", "g", "h", "i",
				 "j", "k", "l", "m", "n", "o", "p", "q", "r",
				 "s", "t", "u", "v", "w", "x", "y", "z",
				 "A", "B", "C", "D", "E", "F", "G", "H", "I",
				 "J", "K", "L", "M", "N", "O", "P", "Q", "R",
				 "S", "T", "U", "V", "W", "X", "Y", "Z");

/* Builtin */

	dcl     (addr, divide, hbound, null, rtrim) builtin;

%page;
create: entry (P_names, P_dyn_menup, P_dyn_menu_reqp, P_areap, P_code);

	trailer_included = "0"b;
	go to MAIN;

create_w_trailer: entry (P_names, P_trailer, P_dyn_menup, P_dyn_menu_reqp, P_areap, P_code);

	trailer_included = "1"b;

MAIN:

	P_dyn_menup = null;
	dyn_menu_reqp = P_dyn_menu_reqp;
	P_code = 0;

	area_ptr = P_areap;

	slots_avail = 2 * (xmail_windows.bottom.height - 1); /* 2 columns, 1 header, no trailers */
	slots_needed = hbound (P_names, 1);
	n_slots_per_menu = slots_avail;
	if ^trailer_included
	then free_slots_per_menu = slots_avail;
	else free_slots_per_menu = slots_avail - 1;
	n_menus = divide (slots_needed + free_slots_per_menu - 1, free_slots_per_menu, 17, 0);

	allocate dyn_menu in (based_area);

	begin;

	     dcl	   choice_array	      (slots_avail) char (32) varying;
	     dcl	   done_with_names	      bit (1) aligned;
	     dcl	   name_count	      fixed bin;
	     dcl	   header		      (1) char (xmail_windows.bottom.width) varying;
	     dcl     header2                (1) char (xmail_windows.bottom.width) varying;
	     dcl	   option_no	      fixed bin;
	     dcl	   trailer	      (1) char (xmail_windows.bottom.width) varying;

	     dcl	   1 actual_menu_format   aligned like menu_format;
	     dcl	   1 actual_menu_requirements aligned like menu_requirements;

	     dcl	   choices	      (option_no) char (32) varying based (addr (choice_array));

	     actual_menu_format.version = menu_format_version_1;
	     actual_menu_format.max_width = xmail_windows.bottom.width;
	     actual_menu_format.max_height = xmail_windows.bottom.height;
	     actual_menu_format.n_columns = 2;
	     actual_menu_format.center_headers = "1"b;
	     actual_menu_format.center_trailers = "1"b;
	     actual_menu_format.pad = "0"b;
	     actual_menu_format.pad_char = "-";

	     actual_menu_requirements.version = menu_requirements_version_1;

	     trailer = "";

	     name_count = 0;
	     done_with_names = "0"b;

	     do menu_no = 0 to dyn_menu.nth_menu;

		do option_no = 1 to n_slots_per_menu while (^done_with_names);

		     if option_no = n_slots_per_menu & trailer_included
		     then choices (option_no) = P_trailer;
		     else do;
			choices (option_no) = rtrim (P_names (name_count + 1));
			name_count = name_count + 1;
		     end;
		     if name_count = hbound (P_names, 1)
		     then do;
			if trailer_included
			then do;
			     option_no = option_no + 1;
			     choices (option_no) = P_trailer;
			end;
			done_with_names = "1"b;
		     end;
		end;

		option_no = option_no - 1;
		dyn_menu.menu_array (menu_no).option_count = option_no;
		dyn_menu.menu_array (menu_no).first_option = menu_no * n_slots_per_menu + 1;

		if xmail_data.general_help then do;
		   header2 = " General Help Topics ";

		   
		call menu_$create (choices, header2, trailer, addr (actual_menu_format), OPTION_CODES, area_ptr, addr (actual_menu_requirements), dyn_menu.menu_array (menu_no).location, P_code);
		if P_code ^= 0 then return;
		   end;
		else do;
		   call ioa_$rsnnl ("Choices (menu ^d of ^d)", header (1), (0), menu_no + 1, n_menus);
		   actual_menu_format.pad_char = " ";
		call menu_$create (choices, header, trailer, addr (actual_menu_format), OPTION_CODES, area_ptr, addr (actual_menu_requirements), dyn_menu.menu_array (menu_no).location, P_code);
		if P_code ^= 0 then return;
		end;
	     end;					/* do menu_no = ... */

	end;					/* begin */

	if dyn_menu_reqp ^= null
	then do;
	     dyn_menu_req.options_per_menu = slots_avail;
	     dyn_menu_req.options_last_menu = dyn_menu.menu_array (n_menus - 1).option_count;
	     dyn_menu_req.n_menus = n_menus;
	end;

	P_dyn_menup = dyn_menup;

	return;					/* create */
%page;
display: entry (P_dyn_menup, P_index, P_code);

	P_code = 0;
	dyn_menup = P_dyn_menup;

	call menu_$display (xmail_windows.bottom.iocb, dyn_menu.menu_array (P_index).location, P_code);

	return;					/* display */
%page;
free: entry (P_dyn_menup, P_code);

	P_code = 0;
	dyn_menup = P_dyn_menup;

	do menu_no = 0 to dyn_menu.nth_menu while (P_code = 0);
	     call menu_$destroy (dyn_menu.menu_array (menu_no).location, P_code);
	end;
	return;					/* free */
%page;
get_choice: entry (P_dyn_menup, P_index, P_choice, P_fkey, P_code);

	P_code = 0;
	dyn_menup = P_dyn_menup;

	call menu_$get_choice (xmail_windows.bottom.iocb, dyn_menu.menu_array (P_index).location, xmail_data.function_key_data_ptr, P_fkey, P_choice, P_code);

	return;					/* get_choice */

%page;
info: entry (P_dyn_menup, P_dyn_menu_reqp, P_code);

	P_code = 0;
	dyn_menu_reqp = P_dyn_menu_reqp;
	dyn_menup = P_dyn_menup;
	last_menu_num = dyn_menu.nth_menu;

	dyn_menu_req.options_per_menu = dyn_menu.menu_array (0).option_count;
	dyn_menu_req.options_last_menu = dyn_menu.menu_array (last_menu_num).option_count;
	dyn_menu_req.n_menus = last_menu_num + 1;

	return;					/* info */

%page;
%include xmail_windows;
%page;
%include menu_dcls;
%page;
%include xmail_dyn_menu_dcls;
%page;
%include xmail_data;

     end xmail_dyn_menu_;
