/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-07,Blair), approve(86-03-19,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     85-04-01 JG Backs: Deleted the constant ASK because it was added to the
     include file xmail_responses.incl.pl1 and resulted in a compiler warning.
  2) change(86-01-07,Blair), approve(86-03-19,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Rearranged the code to perform the savefile after the message has
     already been forwarded and made the create savefile consistent with
     reply and send. Took out the allocation of the bcc list in the recip-
     ient_info structure.
  3) change(86-01-28,Blair), approve(86-03-19,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Added an on unit for the reissue_query condition signalled by the
     xmail_window_manager_$quit_handler routine when the user types a break in
     response to a question.  This allows the question to be reissued so that
     the user isn't left hanging.  It also allows the choices menu to be
     redrawn if the user types quit instead of making a selection and then
     decides to continue.  TRs 18711 18974.
  4) change(86-07-30,Blair), approve(86-07-30,MCR7498),
     audit(86-08-19,Gilcrease), install(86-08-21,MR12.0-1138):
     Restore the save message query sequence to occur before the message is
     forwarded so that the REDISTRIBUTED-TO part of the header is included in
     the saved msg. If the user types "no" to creating a new_file the msg will
     be forwarded anyway. If he types a break, he will re-enter the sequence
     asking him if he wants to save the message.  error_list #127.
  5) change(88-06-29,Blair), approve(88-07-27,MCR7931),
     audit(88-08-25,RBarstad), install(88-09-02,MR12.2-1098):
     Use the correct mail_system_ entrypoints to generate the to_list ptr,
     create an address and add it to the list, rather than generating the list
     ourselves by constructing an address of the type "{keyword ...}". This
     will allow us to correctly deal with mailbox names that include embedded
     blanks.
                                                   END HISTORY COMMENTS */

xmail_forward_msg_: procedure (P_mailbox_ptr, P_curr_msgs_ptr);

/* BEGIN DESCRIPTION

function:

    This proc is invoked as a consequence of the user selecting the 
"Forward"  option in the Process Mail or Process Filed Mail menus.
It uses the mail_system_$redistribute_message procedure to 
actually do the forwarding. xmail_forward_msg_ calls emacs_ to allow the user
to specify the recipients to whom the message is being forwarded.
The user may enter a comment if he/she wishes.
Note that xmail_forward_msg_ assumes that the addresses are "clean", i.e.,
they neither contain syntax errors nor is there an address for which there
is no corresponding mailbox. The "xmail_emacs_ext_main_" emacs extention
insures that the addresses are "clean". 
The procedure loops based on the number of messages being forwarded. 


history:          Written by R. Ignagni 7/11/81 

   83-07-05  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes.

   83-10-06  DJ Schimke: Changed all calls to xmail_get_str to calls to
   xmail_get_str_$yes_no;

   83-10-17 DJ Schimke: Changed call to xmail_window_manager_$reconnect to a 
   call to xmail_window_manager_$quit_handler so the quit condition handler
   can special-case the reconnect condition which should NOT interrupt 
   processing after the quit. phx 13227 This entrypoint also prompts when not
   at a reconnect condition so that unintentionally hitting the BREAK won't
   throw away any pending work. phx 13018

   83-11-23 DJ Schimke: Added support for the new personalization option
   "Outgoing Savefile" which allows selection of where to file save messages.
   This also solves the discrepancy between setting "Save Outgoing messages"
   to "yes" and never having set "Save Outgoing messages".

   83-12-07 DJ Schimke: Cleaned up the reporting of delivery results by calling
   mlsys_utils_$print_delivery_results_ and mlsys_utils_$print_address_field 
   for displaying the failure/success of sending. This module still needs 
   recovery code to allow the sender to correct the bad addresses and continue.

   83-12-08 DJ Schimke: Added simple flag to prevent the call to 
   mlsys_util_$free_delivery_results until the call to send the msg has been 
   made. Otherwise, this cleanup will get errors referencing invalid pointers.

   83-02-20 DJ Schimke: Modified the cleanup code so recipients_info is only
   freed by the CLEANUP procedure rather than by the MESSAGE_CLEANUP procedure.
   This fixes a problem referencing recipients_info when forwarding more than 
   one message (curr_msgs.count > 1). 

   84-09-24 JG Backs: Added code before and after the call to emacs_ to test
   if menus should be removed before editing (personalization option Remove
   Menus While Editing).  If option is in effect, calls to new entrypoints,
   $suppress_menu and $restore_menu in xmail_window_manager_ are made. Also
   added test in quit handler to make sure restore menus is done if quit in
   editor.

   84-11-14 JG Backs: Moved the code, which redisplays the menu if removed
   while editing, to execute after the call to CLEAN_UP rather than within
   the CLEAN_UP procedure.  This prevents screen output during a true cleanup
   condition.


END DESCRIPTION
*/

/* PARAMETERS */

	dcl     P_mailbox_ptr	 ptr parameter;
	dcl     P_curr_msgs_ptr	 ptr parameter;

/* CONDITIONS */

	dcl     (quit, cleanup, reissue_query)	 condition;


/* CONSTANTS */

          dcl     ACCEPT_NEW             bit (1) aligned int static options (constant) init ("1"b);
          dcl     ACCEPT_OLD             bit (1) aligned int static options (constant) init ("1"b);
	dcl     ACKNOWLEDGE		 char (14) static options (constant) init ("acknowledge_yn");
	dcl     BITS_PER_CHAR	 fixed bin static options (constant) init (9);
	dcl     CONTINUE		 char (1) static options (constant) init ("c");
	dcl     DELETE_SEG_FORCE_CHASE bit (6) static options (constant) init ("100101"b);
	dcl     EMACS_EXT		 char (21) options (constant) init ("xmail_emacs_ext_main_") int static;
	dcl     ENTRY_NAME		 entry variable init (xmail_forward_msg_);
	dcl     ERROR_MESSAGE	 char (63) static options (constant) init ("Message no. ^d not forwarded, due to an internal program error.");
	dcl     ERRORS_ONLY		 bit (1) aligned static options (constant) init ("1"b);
	dcl     GO_ON		 char (57) static options (constant) init ("Do you wish to forward the rest of the current messages? ");
	dcl     LOG		 char (1) static options (constant) init ("l");
	dcl     MAILFILE_SUFFIX	 char (6) static options (constant) init ("sv.mbx");
	dcl     NAME		 char (18) static options (constant) init ("xmail_forward_msg_");
	dcl     NL		 char (1) aligned static options (constant) init ("
");
	dcl     PROBLEM		 char (61) static options (constant) init ("Forwarding not completed. An internal program error occurred.");
	dcl     QUIT		 char (1) static options (constant) init ("q");
	dcl     SAVE_MAILBOX	 char (15) static options (constant) init ("save_mailfile");
	dcl     SAVE_MESSAGE	 char (15) static options (constant) init ("save_message_yn");
	dcl     STOP		 char (1) static options (constant) init ("q");
	dcl     USE_SCREEN_WIDTH	 fixed bin aligned static options (constant) init (-1);
	dcl     WHITE_SPACE		 char (4) aligned static options (constant) init ("
 	");					/* HT VT NL <space> */
	dcl     WHITE_SPACE_COMMA	 char (6) aligned static options (constant) init ("
	  ,");					/* HT VT NL <space> comma */

/* EXTERNAL STATIC */

	dcl     error_table_$namedup	 static ext fixed bin (35);
	dcl     error_table_$segknown	 static ext fixed bin (35);
	dcl     error_table_$bad_segment fixed bin (35) ext static;
	dcl     iox_$user_output	 ptr external static;
	dcl     mlsys_et_$no_a_permission static ext fixed bin (35);

/* INTERNAL STATIC */

	dcl     ext_pname		 char (168) int static;
	dcl     ext_ptr		 ptr init (null) int static;
	dcl     ext_dir		 char (168) int static;
	dcl     ext_file		 char (32) int static;

/* AUTOMATIC */

	dcl     acknowledge		 char (3) var;
          dcl     ask_again              bit (1) aligned;
	dcl     bcc_list_ptr	 ptr;
	dcl     bit_count		 fixed bin (24);
	dcl     code		 fixed bin (35);
	dcl     code1		 fixed bin (35);
          dcl     create                 bit (1) aligned;
	dcl     default_save_file	 char (32) var;
	dcl     delivery_results_need_cleanup bit (1) aligned;
	dcl     dir		 char (168);
	dcl     emacs_seg_path_name	 char (168);
	dcl     error_list_ptr	 ptr;
          dcl     exists                 bit (1) aligned;
	dcl     for_type		 char (32);
	dcl     forward_area_ptr	 ptr;
	dcl     forward_msg_ptr	 ptr;
	dcl     forward_seg_name	 char (32);
	dcl     forward_seg_ptr	 ptr;
	dcl     idx		 fixed bin;
	dcl     idx1		 fixed bin;
	dcl     message_num		 fixed bin;
	dcl     message_num1	 fixed bin;
	dcl     message_saved	 bit (1) aligned;
	dcl     no_chars		 fixed bin (21);
	dcl     opt                    fixed bin;
          dcl     prefix                 char (32) var;
          dcl     prompt_string          char (256) var;
	dcl     resp		 char (1) var;
	dcl     restore_menu_needed	 bit (1) aligned;	/* if remove menu */
	dcl     save_message	 char (3) var;
	dcl     sci_ptr		 ptr;
	dcl     to_list_ptr		 ptr;
	dcl     type		 fixed bin (2);
          dcl     unused_return_length   fixed bin;
	dcl     yes_sw		 bit (1) aligned;

	dcl     1 auto_deliver_options like deliver_options;
	dcl     1 auto_parse_text_options like parse_text_options;

/* ENTRIES */

	dcl     delete_$ptr		 entry (ptr, bit (6), char (*), fixed bin (35));
	dcl     emacs_		 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     get_pdir_		 entry () returns (char (168));
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$make_ptr	 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     hcs_$make_seg	 entry options (variable);
	dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$nnl		 entry options (variable);
          dcl     ioa_$rsnnl             entry() options(variable);
          dcl     mail_system_$create_address_list entry (char (8), ptr, fixed bin (35));
          dcl     mail_system_$create_savebox_address entry (char (*) varying, char(*), char (*), char (*) varying, char (*) varying, pointer, fixed bin (35));
	dcl     mail_system_$free_address_list entry (ptr, fixed bin (35));
	dcl     mail_system_$free_message entry (ptr, fixed bin (35));
	dcl     mail_system_$read_message entry (ptr, fixed bin, fixed bin (35));
	dcl     mail_system_$redistribute_message entry (ptr, char (*), ptr, ptr, fixed bin (35));
	dcl     mlsys_utils_$free_delivery_results entry (ptr, fixed bin (35));
	dcl     mlsys_utils_$print_address_list_field entry (char (*) var, ptr, fixed bin, ptr, fixed bin (35));
	dcl     mlsys_utils_$print_delivery_results entry (ptr, bit (1) aligned, ptr, fixed bin (35));
	dcl     ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
	dcl     ssu_$destroy_invocation entry (ptr);
          dcl     suffixed_name_$make    entry (char(*), char(*), char(32), fixed bin(35));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     xmail_error_$no_code	 entry options (variable);
	dcl     xmail_error_$no_print	 entry options (variable);
	dcl     xmail_error_$code_first entry options (variable);
	dcl     xmail_forward_msg_$ssu_exit entry ();
	dcl     xmail_get_str_	 entry (char (*) var, (*) char (*) var, char (*), char (*), char (*) var);
	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);
	dcl     xmail_redisplay_$menu	 entry options (variable);
          dcl     xmail_select_file_     entry (char (*), char (*), char (*), bit (1) aligned, bit (1) aligned,
                                         char (168), char (32) var, bit (1) aligned, bit (1) aligned, fixed bin (35));     
	dcl     xmail_sw_$redisplay	 entry ();
	dcl     xmail_sw_$update_usage entry (char (*));
	dcl     xmail_value_$get	 entry (char (*), char (*) var, fixed bin (35));
	dcl     xmail_value_$get_with_default entry (char (*), char (*) var, char (*) var, fixed bin (35));
	dcl     xmail_window_manager_$reconnect entry ();
	dcl     xmail_window_manager_$restore_menu entry ();
	dcl     xmail_window_manager_$suppress_menu entry ();
	dcl     xmail_window_manager_$quit_handler entry () returns (bit (1) aligned);
          dcl     mlsys_utils_$create_savebox entry options(variable);
	dcl     mlsys_utils_$parse_address_list_text entry (char (*), ptr, char (8), ptr, ptr, fixed bin (35));

/* BASED */

	dcl     based_string	 char (no_chars) based (forward_seg_ptr);

/* AREA */

	dcl     forward_area	 area aligned based (forward_area_ptr);

/* BUILTINS */

	dcl     (addr, after, before, char, codeptr, divide, length, ltrim, null, rtrim) builtin;

/* INCLUDE FILES */

%include access_mode_values;
%page;
%include mlsys_message;
%page;
%include mlsys_address_list;
%page;
%include mlsys_deliver_info;
%page;
%include mlsys_mailbox;
%page;
%include mlsys_parse_txt_options;
%page;
%include terminate_file;
%page;
%include xmail_curr_msg_info;
%page;
%include xmail_data;
%page;
%include xmail_responses;
%page;
%include window_dcls;

/* BEGIN */

	error_list_ptr = null ();
	forward_msg_ptr = null ();
	forward_seg_ptr = null ();
	recipients_info_ptr = null ();
	sci_ptr = null ();
	to_list_ptr = null ();
	bcc_list_ptr = null;
	delivery_results_need_cleanup = "0"b;
	restore_menu_needed = "0"b;

	mailbox_ptr = P_mailbox_ptr;
	curr_msgsp = P_curr_msgs_ptr;
	if mailbox_ptr = null () | curr_msgsp = null ()
	then do;
	     call ioa_ ("All messages have been discarded.");
	     go to EXIT;
	end;

	forward_area_ptr = get_system_free_area_ ();

	on condition (quit)
	     begin;
	     on condition (reissue_query) begin;
		call window_$clear_window (iox_$user_output, (0));
		goto RETRY (opt);
		end;
		if xmail_window_manager_$quit_handler ()
		then do;
		     if restore_menu_needed
		     then call xmail_window_manager_$restore_menu;
		     call ioa_ ("Forwarding terminated.");
		     go to EXIT;
		end;
	     end;

	on condition (cleanup) call CLEAN_UP;

	call xmail_sw_$update_usage (" ");
	call xmail_sw_$redisplay ();
	call window_$clear_window (iox_$user_output, (0));/* ignore error */
	call ioa_$nnl (" ");			/* Position cursor in bottom window */

/*  Create seg for Emacs to place forward address(es) and comment in   */

	forward_seg_name = xmail_data.actee.person || "_fwrd";

	call hcs_$make_seg ("", forward_seg_name, "", RW_ACCESS_BIN, forward_seg_ptr, code);
	if code ^= 0 then do;			/* If seg exists set bit count to zero */
	     bit_count = 0;
	     if code = error_table_$namedup | code = error_table_$segknown
	     then call terminate_file_ (forward_seg_ptr, bit_count, TERM_FILE_BC, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", PROBLEM);
	end;

/* Determine full pathname for emacs seg */

	emacs_seg_path_name = get_pdir_ ();
	emacs_seg_path_name = rtrim (emacs_seg_path_name) || ">" || forward_seg_name;

	for_type = "fwd-comment";
	if ext_ptr = null ()
	then do;
	     call hcs_$make_ptr (codeptr (ENTRY_NAME), EMACS_EXT, "", ext_ptr, code);
	     if code ^= 0 then call xmail_error_$no_code
		     (code, NAME, STOP, "^a", PROBLEM);
	     call hcs_$fs_get_path_name (ext_ptr, ext_dir, (0), ext_file, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", PROBLEM);
	     ext_pname = rtrim (ext_dir) || ">" || EMACS_EXT;
	end;

/* Set-up for forwarding */

	recipients_info_n_lists = 2;			/* make room for bcc if needed */
	allocate recipients_info in (forward_area) set (recipients_info_ptr);

	recipients_info.header.version = RECIPIENTS_INFO_VERSION_2;
	recipients_info.header.area_ptr = forward_area_ptr;
	recipients_info.header.n_lists = 1;

	auto_deliver_options.version = DELIVER_OPTIONS_VERSION_2;
	auto_deliver_options.delivery_mode = ORDINARY_DELIVERY;
	auto_deliver_options.queueing_mode = ALWAYS_QUEUE_FOREIGN;
	auto_deliver_options.queued_notification_mode = NOTIFY_ON_ERROR;
	auto_deliver_options.flags.abort = "1"b;
	auto_deliver_options.flags.send_if_empty = "0"b;
	auto_deliver_options.flags.recipient_notification = "1"b;
	auto_deliver_options.flags.queue_mailing_lists = "0"b;

	auto_deliver_options.flags.mbz = "0"b;
	default_save_file = "outgoing";

/* Loop based on the number of messages being forwarded */

	do idx = 1 to curr_msgs.count;
	     message_num = curr_msgs.numbers (idx);
	     if mailbox.messages (message_num).message_ptr = null
	     then do;
		call mail_system_$read_message (mailbox_ptr, message_num, code);
		if code ^= 0
		then call xmail_error_$no_code (code, NAME, "l", "Unable to read message ^d. This is an internal programming error.", message_num);
	     end;
	     forward_msg_ptr = mailbox.messages (message_num).message_ptr;
	     message_ptr = forward_msg_ptr;
	     no_chars = 250;
	     based_string = "";
	     based_string = "Forwarding message number " || rtrim (ltrim (char (message_num))) || NL || "Regarding: " || message_subject || NL;
	     bit_count = (length (rtrim (based_string)) + 1) * BITS_PER_CHAR;
	     call terminate_file_ (forward_seg_ptr, bit_count, TERM_FILE_BC, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, STOP, "^a", PROBLEM);


/* Check personalization option to remove and restore menus while editing */

	     if xmail_data.remove_menus
	     then do;
		call xmail_window_manager_$suppress_menu ();
		restore_menu_needed = "1"b;
	     end;

	     call emacs_ (iox_$user_output, (emacs_seg_path_name), ext_pname, addr (for_type), code);

	     if restore_menu_needed
	     then do;
		call xmail_window_manager_$restore_menu ();
		restore_menu_needed = "0"b;
	     end;

	     if code ^= 0
	     then do;
		call xmail_window_manager_$reconnect ();
		call ioa_ ("Message number ^d not forwarded.", message_num);
		if curr_msgs.count > idx
		then do;
RETRY (1):		
		     call ioa_$nnl ("^/Do you still wish to forward message(s): ");
		     do idx1 = idx + 1 to curr_msgs.count;
			message_num1 = curr_msgs.numbers (idx1);
			call ioa_$nnl (" ^d", message_num1);
		     end;				/* end do loop */
		     opt = 1;
		     call xmail_get_str_$yes_no (" ? ", yes_sw);
		     if yes_sw then go to pre_end;
		     else call ioa_ ("Forwarding terminated.");
		end;
		go to EXIT;
	     end;

	     call hcs_$status_mins (forward_seg_ptr, type, bit_count, code);
	     if code ^= 0 then do;
		call xmail_error_$no_code (code, NAME, CONTINUE, ERROR_MESSAGE, message_num);
		call timer_manager_$sleep (3, "11"b);
		go to pre_end;
	     end;

	     if bit_count = 0
	     then do;
		call ioa_ ("Message number ^d not forwarded.", message_num);
		if curr_msgs.count > idx
		then do;
		     call xmail_get_str_$yes_no ((GO_ON), yes_sw);
		     if yes_sw then go to pre_end;
		     else call ioa_ ("Forwarding terminated.");
		end;
		goto EXIT;
	     end;
	     no_chars = divide (bit_count, BITS_PER_CHAR, 17, 0);

/* Get pointer to forwarding recipients address list structure */

	     to_list_ptr = null ();

	     if rtrim (after (before (based_string, "Comment (optional):"), "To:  "), WHITE_SPACE_COMMA) = ""
	     then do;
		call xmail_error_$no_code (code, NAME, CONTINUE, "You did not enter any recipients. Message no. ^d not forwarded.", message_num);
		call timer_manager_$sleep (3, "11"b);
		go to pre_end;
	     end;
	     auto_parse_text_options.version = PARSE_TEXT_OPTIONS_VERSION_1;
	     auto_parse_text_options.area_ptr = null;
	     auto_parse_text_options.flags.list_errors = "0"b;
	     auto_parse_text_options.flags.validate_addresses = "0"b;
	     auto_parse_text_options.flags.include_invalid_addresses = "0"b;
	     auto_parse_text_options.flags.mbz = "0"b;

	     call mlsys_utils_$parse_address_list_text (rtrim (after (before (based_string, "Comment (optional):"), "To:  "), WHITE_SPACE_COMMA), addr (auto_parse_text_options), ADDRESS_LIST_VERSION_2, to_list_ptr, parse_text_error_list_ptr, code);

	     if code ^= 0 then do;
		call xmail_error_$no_code (code, NAME, CONTINUE, ERROR_MESSAGE, message_num);
		call timer_manager_$sleep (3, "11"b);
		go to pre_end;
	     end;

	     recipients_info.area_ptr = get_system_free_area_ ();
	     recipients_info.lists (1).address_list_ptr = to_list_ptr;

	     call xmail_value_$get_with_default (ACKNOWLEDGE, (NO), acknowledge, code);
	     if code ^= 0 then call xmail_error_$code_first (code, NAME, LOG,
		     "An invalid value for ""^a"" was found in the xmail value segment.  Using the default value instead.", ACKNOWLEDGE);

	     if acknowledge = NO
	     then auto_deliver_options.flags.acknowledge = "0"b;
	     else if acknowledge = ASK
	     then do;
RETRY (2):		     
		opt = 2;
		call xmail_get_str_$yes_no ("Do you want your forwarding acknowledged ?  ", yes_sw);
		if yes_sw then auto_deliver_options.flags.acknowledge = "1"b;
		else auto_deliver_options.flags.acknowledge = "0"b;
	     end;
	     else if acknowledge = YES
	     then auto_deliver_options.flags.acknowledge = "1"b;
	     else call xmail_error_$code_first (error_table_$bad_segment, NAME, LOG,
		     "An invalid value for ""^a"" was found in the xmail value segment.  Using the default value instead.", ACKNOWLEDGE);

/* Save the forwarded message? */

	     message_saved = "0"b;
	     dir = xmail_data.mail_dir;

/* Check to see if the message being forwarded should be saved. */

	     call xmail_value_$get (SAVE_MESSAGE, save_message, code);
	     if code ^= 0 then call xmail_error_$code_first (code, NAME, LOG,
		     "An invalid value for ""^a"" was found in the xmail value segment.  Using the default value instead.", SAVE_MESSAGE);

	     if save_message = YES
	     then do;
		ask_again = "0"b;
		opt = 3;
		call prepare_to_save_msg;
		if code ^= 0 then go to pre_end;
	     end;

	     else if save_message = ASK
	     then do;
RETRY (3):		     
		ask_again = "0"b;
		opt = 3;
		call xmail_get_str_$yes_no ("Do you want to save the message being forwarded? ", yes_sw);
		if yes_sw then call prepare_to_save_msg;
		if ask_again then goto RETRY (opt);   /* the user didn't want to create the non-existent file  so start over */
		if code ^= 0 then go to pre_end;
	     end;

	     else if save_message ^= NO
	     then call xmail_error_$code_first (error_table_$bad_segment, NAME, LOG,
		     "An invalid value for ""^a"" was found in the xmail value segment.  Using the default value instead.", SAVE_MESSAGE);

	     call mail_system_$redistribute_message (forward_msg_ptr, ltrim (rtrim (after (based_string, "Comment (optional):"), WHITE_SPACE), WHITE_SPACE), recipients_info_ptr, addr (auto_deliver_options), code);
	     delivery_results_need_cleanup = "1"b;
	     if code ^= 0 then do;
		if code = mlsys_et_$no_a_permission then call xmail_error_$no_code (code, NAME, STOP, "You do not have permission to send message to at least one of the recipients.");
		if n_failed_recipients > 0
		then do;
		     call ioa_ ("Message no.^d could not be forwarded.", message_num);
		     call ssu_$standalone_invocation (sci_ptr, "", "", null (), xmail_forward_msg_$ssu_exit, code1);
		     if code1 = 0 then call mlsys_utils_$print_delivery_results (sci_ptr, ERRORS_ONLY, recipients_info_ptr, code1);
		     else call xmail_error_$no_code (code1, NAME, LOG, "The reason cannot be printed due to an internal programming error");
		     call ssu_$destroy_invocation (sci_ptr);

		     if idx = curr_msgs.count then go to pre_end;

		     resp = "";
		     do while (resp = "");
			call xmail_get_str_ ("^/Press RETURN to continue; BREAK to stop.", "", "", "", resp);
		     end;
		     go to pre_end;
		end;
		call xmail_error_$no_code (code, NAME, LOG, ERROR_MESSAGE, message_num);
		call timer_manager_$sleep (4, "11"b);
		go to pre_end;

	     end;

/* Display the recipients */

	     call ioa_ ("Message ^d forwarded to: ", message_num);
	     call mlsys_utils_$print_address_list_field ("To", to_list_ptr, USE_SCREEN_WIDTH, null, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, CONTINUE, "Message sent to ""To:"" recipient(s).");


	     if idx ^= curr_msgs.count then call timer_manager_$sleep (3, "11"b);

pre_end:
	     call MESSAGE_CLEAN_UP ();

	end;					/* end of do loop */

EXIT:	call CLEAN_UP ();

	if xmail_data.remove_menus
	then call xmail_redisplay_$menu;		/* redisplay menu if removed */

	return;

ssu_exit: entry;

/* This entry doesn't do anything but it is called by ssu_$print_message */
/* which is called by mlsys_utils_$print_delivery_results.               */

	return;

/* INTERNAL PROCEDURES */

prepare_to_save_msg: proc ();
dcl savebox_ename char (32);
dcl bcc_address_ptr ptr;
dcl mail_system_$add_address entry (ptr, ptr, char (8), fixed bin (35));

	call xmail_value_$get (SAVE_MAILBOX, default_save_file, code);
	if code ^= 0 then call xmail_error_$code_first (code, NAME, QUIT,
		"An invalid value for ""^a"" was found in the xmail value segment.", SAVE_MAILBOX);

	if default_save_file = ASK then do;
	     call xmail_select_file_ ("mail file", "sv.mbx", "outgoing", ACCEPT_OLD, ACCEPT_NEW, dir, prefix, create, exists, code);
	     if code ^= 0 then go to PREPARE_EXIT;	/* Diagnostic msg already issued by xmail_select_file_. */
	     yes_sw = "0"b;
	     if ^create & ^exists then do;
		call ioa_$rsnnl ("The specified mail file ""^a"" does not exist.^/Do you wish to create it?  ", prompt_string, unused_return_length, prefix);
		call xmail_get_str_$yes_no (prompt_string, yes_sw);
	     end;
	     if create | yes_sw then do;
		call mlsys_utils_$create_savebox (dir, (prefix), code);
		if code ^= 0 then call xmail_error_$code_first (code, NAME, CONTINUE, "Forwarded message not saved due to an internal programming error.");
		else call ioa_ ("The mail file ""^a"" has been created.", prefix);
	     end;
	     else if ^exists
		then do;
		     ask_again = "1"b;
		     goto PREPARE_EXIT;
		     end;
	end;
	else prefix = minus_suffix ((default_save_file), (MAILFILE_SUFFIX));

	if code = 0 then do;
	     call suffixed_name_$make ( (prefix),"sv.mbx",savebox_ename, code);
	     if code ^= 0 then do;
		call xmail_error_$no_code (code, NAME, CONTINUE, ERROR_MESSAGE, message_num);
                    call timer_manager_$sleep (3,"11"b);
		goto pre_end;
		end;
	     call mail_system_$create_address_list (ADDRESS_LIST_VERSION_2, bcc_list_ptr, code);
	     if code ^= 0 then do;
		call xmail_error_$no_code (code, NAME, CONTINUE, ERROR_MESSAGE, message_num);
		call timer_manager_$sleep (3, "11"b);
		go to pre_end;
	     end;
	     call mail_system_$create_savebox_address (xmail_data.actee.person ||"."||xmail_data.actee.project,rtrim (dir),savebox_ename , "", "", bcc_address_ptr, code);
	     if code ^= 0 then do;
		call xmail_error_$no_code (code, NAME, CONTINUE, ERROR_MESSAGE, message_num);
		call timer_manager_$sleep (3, "11"b);
		go to pre_end;
	     end;
	     call mail_system_$add_address (bcc_list_ptr, bcc_address_ptr, ADDRESS_LIST_VERSION_2, code);
	     if code ^= 0 then do;
		call xmail_error_$no_code (code, NAME, CONTINUE, ERROR_MESSAGE, message_num);
		call timer_manager_$sleep (3, "11"b);
		go to pre_end;
	     end;
	     recipients_info.header.n_lists = 2;
	     recipients_info.lists (2).address_list_ptr = bcc_list_ptr;
	     message_saved = "1"b;
	end;

PREPARE_EXIT:
	return;
     end prepare_to_save_msg;

MESSAGE_CLEAN_UP: proc ();

	if to_list_ptr ^= null ()
	then do;
	     call mail_system_$free_address_list (to_list_ptr, code);
	     to_list_ptr = null ();
	end;
	if bcc_list_ptr ^= null ()
	then do;
	     call mail_system_$free_address_list (bcc_list_ptr, code);
	     bcc_list_ptr = null ();
	end;
	if forward_msg_ptr ^= null ()
	then do;
	     call mail_system_$free_message (forward_msg_ptr, code);
	     forward_msg_ptr = null ();
	end;
	if recipients_info_ptr ^= null ()
	then do;
	     if delivery_results_need_cleanup then do;
		call mlsys_utils_$free_delivery_results (recipients_info_ptr, code);
		if code ^= 0 then call xmail_error_$no_print (code, NAME, CONTINUE, "While cleaning up delivery results.");
	     end;
	end;
	return;

     end MESSAGE_CLEAN_UP;

minus_suffix: proc (name, suffix) returns (char (*) var);

/* Parameter */

	dcl     name		 char (*);
	dcl     suffix		 char (*);

/* Automatic */

	dcl     reverse_name	 char (length (name)) var;
	dcl     reverse_suffix	 char (length (suffix)) var;

/* Builtin */

	dcl     (after, index, length, reverse, rtrim) builtin;

	reverse_name = reverse (rtrim (name));
	reverse_suffix = reverse (rtrim (suffix));

	if index (reverse_name, reverse_suffix || ".") ^= 1
	then return (name);
	else return (reverse (after (reverse_name, reverse_suffix || ".")));

     end minus_suffix;

CLEAN_UP: proc ();

	if sci_ptr ^= null
	then call ssu_$destroy_invocation (sci_ptr);

	call MESSAGE_CLEAN_UP ();
	if forward_seg_ptr ^= null ()
	then call delete_$ptr (forward_seg_ptr, DELETE_SEG_FORCE_CHASE, NAME, code);
	if recipients_info_ptr ^= null ()
	then free recipients_info in (forward_area);

	return;
     end CLEAN_UP;

     end xmail_forward_msg_;
