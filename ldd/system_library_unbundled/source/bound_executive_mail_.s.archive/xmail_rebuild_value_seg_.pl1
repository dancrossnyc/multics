/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-02-11,Blair), approve(86-02-26,MCR7358),
     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
     Written by J. Blair.
  2) change(87-04-17,Blair), approve(87-04-22,MCR7683),
     audit(87-05-15,RBarstad), install(87-05-26,MR12.1-1037):
     Enable the cp_escape for when we have to query the user for continuing
     when we rebuild the value_seg.  TR 20776.
  3) change(88-06-28,Blair), approve(88-07-27,MCR7959),
     audit(88-08-25,RBarstad), install(88-09-02,MR12.2-1098):
     Add new entry point (copy) for when we have read access to the mlsys value
     seg, but can't write to it.
                                                   END HISTORY COMMENTS */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* This program allows the xmail value segment to be rebuilt when one of the value names	*/
/* contains invalid data or the segment appears to be damaged in some way.  This routine	*/
/* is called from xmail_value_.                                                           */
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


xmail_rebuild_value_seg_: proc (xrvs_value_ptr, xrvs_code);

/* BEGIN */


	on cleanup begin;
		call CLEANUP;
	     end;

/* Get rid of the bad value segment */

	xrvs_value_seg_ptr = xrvs_value_ptr;
	call terminate_file_ (xrvs_value_seg_ptr, bc, TERM_FILE_DELETE, code);
	if code = 0 & xrvs_value_seg_ptr ^= null then do;
		user_name = xmail_data.person;
		call user_info_$homedir (homedir);
		mlsys_dir_entry = user_name || MLSYS_DIR_SUFFIX;
		value_dir = rtrim (homedir) || ">" || mlsys_dir_entry;
		seg_type = 0;			/* permanent value seg */
		call ioa_ ("^/     The value segment which contains your personalization options");
		call ioa_ ("     contains invalid data or cannot be accessed for some reason.");
		call ioa_ ("     A new value segment will be built in your mlsys directory.");
		call ioa_ ("     You may reset the personalization options by selecting");
		call ioa_ ("     ""Personalize Exec Mail"" from the main menu.^/");
		end;
	else do;
		value_dir = get_pdir_ ();
		seg_type = 1;			/* temporary value seg */
		call ioa_ ("^/     The value segment which contains your personalization options");
		call ioa_ ("     cannot be altered or deleted.  A temporary value segment with");
		call ioa_ ("     default personalization option values has been created for you");
		call ioa_ ("     in your process_dir.  These options may be changed, but the new");
		call ioa_ ("     values will only have effect for the duration of your process.^/");
	     end;

	call PRESS_TO_CONTINUE;
	xrvs_value_seg_ptr = null;
	call initiate_file_$create (value_dir, (VALUE_SEG_NAME), REW_ACCESS, xrvs_value_seg_ptr, created_sw, bc, code);
	call MAIN;
	return;

copy:	entry (P_value_seg_ptr, P_code);
%include copy_options;
%include copy_flags;

dcl       P_value_seg_ptr ptr;
dcl       P_code fixed bin (35) parm;
dcl       01 my_copy_options like copy_options;
dcl       fs_util_$copy entry (ptr, fixed bin(35));

          value_dir = get_pdir_();
	xmail_data.value_seg_pathname = value_dir;
	call initiate_file_$create (value_dir, (VALUE_SEG_NAME), REW_ACCESS, xrvs_value_seg_ptr, created_sw, bc, code);
	if code = 0 then
	     if ^created_sw then call MAIN;
	     else do;
		my_copy_options.version = COPY_OPTIONS_VERSION_1;
		user_name = xmail_data.person;
		call user_info_$homedir (homedir);
		mlsys_dir_entry = user_name || MLSYS_DIR_SUFFIX;
		value_dir = rtrim (homedir) || ">" || mlsys_dir_entry;
		my_copy_options.source_dir = value_dir ;
		my_copy_options.source_name = VALUE_SEG_NAME;
		my_copy_options.target_dir = get_pdir_();
		my_copy_options.target_name = VALUE_SEG_NAME;
		my_copy_options.no_name_dup = "1"b;
		my_copy_options.raw = "0"b;
		my_copy_options.force = "0"b;
		my_copy_options.delete = "0"b;
		my_copy_options.flags.mbz = "0"b;
                    my_copy_options.copy_items = "0"b;
                    my_copy_options.copy_items.update = "1"b;
		call fs_util_$copy (addr(my_copy_options), code);
		if code = 0 then do;
		call ioa_ ("^/     The value segment which contains your personalization options");
		call ioa_ ("     cannot be altered or deleted.  A temporary value segment with");
		call ioa_ ("     copies of your personalization option values has been created for");
		call ioa_ ("     you in your process_dir.  These options may be changed, but the");
		call ioa_ ("     new values will only have effect for the duration of your process.^/");
		call PRESS_TO_CONTINUE;
		P_value_seg_ptr = xrvs_value_seg_ptr;
		end;
		end;
	P_code = code;
	return;

MAIN:	 proc ();
/* Create a new value_segment. Put it in the process_dir if there was some reason
   you couldn't get rid of the old one, otherwise it goes in the mlsys_dir.  */

	if code = 0 & created_sw
	then call value_$init_seg (xrvs_value_seg_ptr, seg_type, null, 0, code);
	if code ^= 0 then goto XMAIL_REBUILD_VALUE_SEG_EXIT;
	else xmail_data.value_seg_pathname = value_dir;
/* Set all the default values in the value segment if we have a new one*/

	if created_sw then do;

	          call SET_DEFAULT (xrvs_value_seg_ptr, VERSION, (xmail_version));
		call SET_DEFAULT (xrvs_value_seg_ptr, SAVE_MESSAGE, (YES));
		call SET_DEFAULT (xrvs_value_seg_ptr, SAVE_MAILBOX, (ASK));
		call SET_DEFAULT (xrvs_value_seg_ptr, "lifetime_first_invocation", (NO));
		call SET_DEFAULT (xrvs_value_seg_ptr, ACKNOWLEDGE, (NO));
		call SET_DEFAULT (xrvs_value_seg_ptr, LISTS_AS_MENUS, (NO));
		call SET_DEFAULT (xrvs_value_seg_ptr, INTERACTIVE_MSGS, (YES));
		call SET_DEFAULT (xrvs_value_seg_ptr, ALWAYS_ESCAPE, (NO));
		call SET_DEFAULT (xrvs_value_seg_ptr, MULTICS_MODE, (NO));
		call SET_DEFAULT (xrvs_value_seg_ptr, REMOVE_MENUS, (NO));
		call SET_DEFAULT (xrvs_value_seg_ptr, CONFIRM_PRINT, (YES));
		call SET_DEFAULT (xrvs_value_seg_ptr, INCLUDE_ORIGINAL, (NO));
		call SET_DEFAULT (xrvs_value_seg_ptr, FILE_ORIGINAL, (NO));
		call SET_DEFAULT (xrvs_value_seg_ptr, ORIGINAL_IN_WINDOW, (YES));
	     end;
	xrvs_code = 0;
	return;

XMAIL_REBUILD_VALUE_SEG_EXIT:
	call CLEANUP;
	xrvs_code = 1;
	return;

	
SET_DEFAULT: proc (sd_value_seg_ptr, sd_value_name, sd_default);

/* PARAMETERS */

	dcl     sd_value_name	 char (*);
	dcl     sd_default		 char (*);
          dcl     sd_value_seg_ptr       ptr;
          dcl     PERMANENT              init ("01"b) bit (36) aligned static options (constant);

/* BEGIN */

	call value_$set (sd_value_seg_ptr, PERMANENT, sd_value_name, (sd_default), answer_yn, code);
	if code ^= 0
	then goto XMAIL_REBUILD_VALUE_SEG_EXIT;

     end SET_DEFAULT;
     end MAIN;
PRESS_TO_CONTINUE: proc;
	         
          dcl prompt                     char (46) init ("                    Press <RETURN> to continue") int static options (constant);
	dcl 1 auto_query_info          like query_info;
          dcl been_thru_this_before      bit (1) aligned;
	dcl line                       char (80) var;
          dcl iox_$user_output           ptr ext static;
          dcl command_query_             entry() options(variable);
          dcl iox_$control               entry (ptr, char(*), ptr, fixed bin(35));
	dcl ENABLE_ESCAPE             bit (2) aligned init ("11"b) int static options (constant);         

	auto_query_info.version = query_info_version_6;
	auto_query_info.switches.yes_or_no_sw = "0"b;
	auto_query_info.switches.suppress_name_sw = "1"b;
	auto_query_info.switches.cp_escape_control = ENABLE_ESCAPE;
	auto_query_info.switches.suppress_spacing = "1"b;
	auto_query_info.switches.literal_sw = "0"b;
	auto_query_info.switches.prompt_after_explanation = "0"b;
	auto_query_info.switches.padding = "0"b;
	auto_query_info.status_code = 0;
	auto_query_info.query_code = 0;
	auto_query_info.question_iocbp = null ();	/* default: user_i/o */
	auto_query_info.answer_iocbp = null ();		/* default: user_input */
	auto_query_info.repeat_time = 0;		/* don't repeat */
	auto_query_info.explanation_ptr = null ();
	auto_query_info.explanation_len = 0;

	been_thru_this_before = "0"b;
	do while ("1"b);
	     call iox_$control (iox_$user_output, "reset_more", null, (0)); /* ignore code */

	     call command_query_ (addr (auto_query_info), line, "", "^[^/^]^a^2x", been_thru_this_before, prompt);
	     been_thru_this_before = "1"b;

	     if line = "" then goto EXIT_PRESS_TO_CONTINUE;
	     end;
		
EXIT_PRESS_TO_CONTINUE: return;
     end PRESS_TO_CONTINUE;

CLEANUP: proc ();
         if xrvs_value_seg_ptr ^= null 
         then do;
	    call terminate_file_ (xrvs_value_seg_ptr, bc, TERM_FILE_DELETE, code);
	    xrvs_value_seg_ptr = null;
	    end;
	return;
     end CLEANUP;

%include query_info;
%include terminate_file;
%include access_mode_values;

%include xmail_data;

/* PARAMETERS */
          
          dcl     xrvs_value_ptr         ptr;
          dcl     xrvs_code              fixed bin (35);

/* AUTOMATIC */

	dcl     answer_yn		 char (3) var;
	dcl     bc		 fixed bin (24);
	dcl     code		 fixed bin (35);
	dcl     created_sw		 bit (1) aligned;
	dcl     homedir		 char (168);
	dcl     mlsys_dir_entry	 char (32);
	dcl     seg_type		 fixed bin;
	dcl     user_name		 char (35) var;
	dcl     value_dir		 char (168);
	dcl     xrvs_value_seg_ptr	 ptr;


/* ENTRIES   */

	dcl     get_pdir_		 entry () returns (char (168));
	dcl     initiate_file_$create	 entry (char (*), char (*), bit (*), ptr, bit (1) aligned, fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	dcl     user_info_$homedir	 entry (char (*));
	dcl     value_$init_seg	 entry (ptr, fixed bin, ptr, fixed bin (19), fixed bin (35));
          dcl     value_$set entry() options(variable);
          
/* BUILTINS  */

	dcl     (addr, null, rtrim)	 builtin;

/* CONDITIONS */

	dcl     cleanup		 condition;

/* CONSTANTS */
	dcl     ASK		 char (3) init ("ask") int static options (constant);
	dcl     MLSYS_DIR_SUFFIX	 char (6) init (".mlsys") int static options (constant);
	dcl     NO		 char (2) init ("no") int static options (constant);
	dcl     VALUE_SEG_NAME	 init ("xmail_data.value") char (32) var int static options (constant);
	dcl     VERSION		 init ("version") char (7) int static options (constant);
	dcl     YES		 char (3) init ("yes") int static options (constant);
	dcl     (
	/*** names of personalization options ***/
	        ACKNOWLEDGE		 char (14) init ("acknowledge_yn"),
	        ALWAYS_ESCAPE	 char (21) init ("always_escape_keys_yn"),
	        CONFIRM_PRINT	 char (19) init ("confirm_print_yn"),
	        FILE_ORIGINAL	 char (16) init ("file_original_yn"),
	        INCLUDE_ORIGINAL	 char (19) init ("include_original_yn"),
	        ORIGINAL_IN_WINDOW	 char (21) init ("original_up_window_yn"),
	        INTERACTIVE_MSGS	 char (19) init ("interactive_msgs_yn"),
	        LISTS_AS_MENUS	 char (17) init ("lists_as_menus_yn"),
	        MULTICS_MODE	 char (15) init ("multics_mode_yn"),
/*	        OUTGOING_SV_BOX	 char (32) init ("outgoing.sv.mbx"),  historic entry only */
	        REMOVE_MENUS	 char (15) init ("remove_menus_yn"),
	        SAVE_MAILBOX	 char (15) init ("save_mailfile"),
	        SAVE_MESSAGE	 char (15) init ("save_message_yn")
	        )			 static options (constant);

     end xmail_rebuild_value_seg_;
