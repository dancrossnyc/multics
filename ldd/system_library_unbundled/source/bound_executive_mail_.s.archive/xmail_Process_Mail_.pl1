/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-01-07,Blair), approve(86-01-07,MCR7358),
     audit(86-05-19,RBarstad), install(86-05-28,MR12.0-1062):
     Added the variable foreign_mailbox to be set on before calling
     xmail_Consult_Files_ in Option 14 so we can access mail in other
     users' mailboxes.
  2) change(86-02-25,Blair), approve(86-02-25,MCR7358),
     audit(86-05-19,RBarstad), install(86-05-28,MR12.0-1062):
     Change call to xmail_select_msgs_ in OPT (6) so that this option can be
     used to set the seen switch for messages as well as select them. Now there
     is a ptr to a structure of seen_msgs, and a switch_on_off flag.
  3) change(87-01-21,Blair), approve(87-02-05,MCR7618),
     audit(87-04-14,RBarstad), install(87-04-26,MR12.1-1025):
     Pass a new parameter to indicate whether or not we're processing msgs
     as mail and get the msgs in the mailbox based on the value.
  4) change(87-02-10,Blair), approve(87-02-10,MCR7618),
     audit(87-04-14,RBarstad), install(87-04-26,MR12.1-1025):
     Check to see if we're processing a reply request when we execute the
     redisplay_menu condition code and don't display the menu on a reply.
     This prevents the screen being messed up after a reconnect. Error_list
     #114.
                                                   END HISTORY COMMENTS */


/* Author unknown.

   83-06-27  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes. 

   83-09-22  DJ Schimke: Added calls to mail_system_$read_new_messages in 
   PERFORM_OPTION to inform user of new mail and update mailbox structure so
   any new messages are available to the user. phx14130 Created the internal 
   procedures: delete_msgs and NEW_MESSAGES. 

   83-10-04  DJ Schimke: Changed want_to_examine_more internal proc to call
   xmail_get_str_$yes_no rather than xmail_get_str_.

   83-10-10  DJ Schimke: Changed bothg calls to xmail_file_msgs_ to calls to
   xmail_file_msgs_$current_msgs. The default file is now returned rather than
   kept as internal static in xmail_file_msgs_. These changes are a result of
   making xmail_file_msgs_ more robust.

   83-11-01  DJ Schimke: Changed the calling sequence of xmail_select_file_.

   84-04-11  DJ Schimke: Changed the opening sender_selection_mode from 
   ALL_MESSAGES to ACCESSIBLE_MESSAGES so mailboxes with either "r" or "o" 
   access can be opened and read.

   84-07-03  DJ Schimke: Modified to use a three-column menu format and to add 
   the "Write" option which calls xmail_write_msgs_. Replaced the "Message(s)" 
   in many menu options with "Messages" to reduce the width for three-column
   menu format.

   84-08-10  JG Backs: Added a call to xmail_list_msgs_$selected after the
   call to xmail_select_msgs_ when option (6) Select Messages is chosen, and
   after the call to xmail_select_msgs_$next when option (5) Next Message is
   chosen.  This will automatically list the summary of current messages.

   84-11-09  JG Backs: Modified to allow the updating and redisplay of the 
   current message line after messages are selected (option 6), but before
   they are listed.  This allows for the status line to be current if the 
   listing stops at a more prompt when there are many current messages.

   84-12-07  JG Backs: Changed the call to xmail_select_msgs_$next in OPT (2)
   in PERFORM OPTION proc to only occur if NEW_MESSAGES is true and
   curr_msgsp is null.  This is the same as all the other OPT's.  It was
   testing for curr_msgsp ^= null and in the case of replying and saving to
   incoming, the current messages line was being incorrectly updated to the
   next message.  TR 18632.

*/

/* format: style1 */
xmail_Process_Mail_: proc (what_next, treat_msgs_as_mail);

/* Parameter */

          dcl     treat_msgs_as_mail     bit (1) aligned;
	dcl     what_next		 char (9);


/* Automatic */

	dcl     choice		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     def_prompt		 char (8) var;
	dcl     default_file	 char (32) var;
	dcl     deletes_ptr		 ptr;
	dcl     dir		 char (168);
	dcl     file		 char (32) varying;
	dcl     file_info		 char (256) var;
	dcl     multiple_msgs	 bit (1) aligned;
	dcl     n_interactive_msgs	 fixed bin;
	dcl     n_new_msgs		 fixed bin;
	dcl     n_total_msgs	 fixed bin;
	dcl     n_ordinary_msgs	 fixed bin;
	dcl     old_no_of_entries	 fixed bin;
	dcl     pos_line		 char (256);
	dcl     position		 char (256) var;
	dcl     redisplay_menu	 bit (1) aligned;
	dcl     return_to_caller	 bit (1) aligned;
	dcl     status		 fixed bin (35);
	dcl     unused_bit		 bit (1) aligned;
	dcl     unused_bit2		 bit (1) aligned;

	dcl     1 auto_open_options	 like open_options;
	dcl     1 auto_close_options	 like close_options;
		 
/* Constant */

	dcl     ALLOW_OLD		 bit (1) aligned init ("1"b) int static options (constant);
	dcl     ALLOW_SELECTION	 bit (1) aligned init ("1"b) int static options (constant);
	dcl     DONT_ALLOW_NEW	 bit (1) aligned init ("0"b) int static options (constant);
	dcl     NAME		 init ("xmail_Process_Mail_") char (19) int static options (constant);
	dcl     N_COLUMNS		 fixed bin int static options (constant) init (3);
	dcl     OPTION_NAMES	 int static options (constant) init (
				 "Display",	
				 "Reply",
				 "File Original",
				 "Discard Messages",
				 "Next Message",
				 "Select Messages",
				 "List Current Messages",
				 "List All Messages",
				 "Forward",
				 "Retrieve Messages",
				 "File Copy",
				 "Print",
				 "Write",
				 "Process Filed Mail",
				 "Send Mail"
				 ) dim (15) char (30) var;
	dcl     INCLUDE_BY_TYPE	 bit (1) aligned int static options (constant) init ("1"b);

/* Based */

	dcl     1 deletes		 based (deletes_ptr),
		2 no_of_entries	 fixed bin,
		2 deletes_array	 (xn refer (no_of_entries)) char (25);

/* Internal Static */

	dcl     menup		 int static ptr init (null);

/* External Static */

	dcl     error_table_$moderr	 fixed bin (35) ext static;
	dcl     iox_$user_output	 ptr external static;
	dcl     mlsys_et_$no_more_messages fixed bin (35) ext static;
	dcl     mlsys_et_$no_o_permission fixed bin (35) ext static;
	dcl     mlsys_et_$no_r_permission fixed bin (35) ext static;
	dcl     mlsys_et_$no_s_permission fixed bin (35) ext static;
	dcl     xmail_err_$exit_now	 ext static fixed bin (35);
	dcl     xmail_err_$help_requested ext static fixed bin (35);
	dcl     xmail_err_$int_prog_err ext static fixed bin (35);

/* Entries */

	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     hcs_$set_bc_seg	 entry (ptr, fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     mail_system_$close_mailbox entry (ptr, ptr, fixed bin (35));
	dcl     mail_system_$open_mailbox entry (char (*), char (*), ptr, char (8), ptr, fixed bin (35));
	dcl     mail_system_$read_new_messages entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl     mail_system_$read_message entry (ptr, fixed bin, fixed bin (35));
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     xmail_delete_dreply_	 entry (ptr);
	dcl     xmail_display_menu_	 entry (ptr, fixed bin, fixed bin (35));
	dcl     xmail_error_$code_last entry () options (variable);
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_error_$no_print	 entry () options (variable);
	dcl     xmail_get_choice_	 entry (ptr, char (*), char (*), char (*), char (*), bit (1) aligned, char (*), fixed bin, fixed bin (35));
	dcl     xmail_select_file_$caller_msg entry (char (*), char (*), char (*), bit (1) aligned, bit (1) aligned,
				 char (168), char (32) var, char (*), bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     xmail_select_msgs_$first entry (ptr, ptr, char (*));
	dcl     xmail_sw_$redisplay	 entry ();
	dcl     xmail_sw_$update_position entry (char (*));
	dcl     xmail_undelete_msgs_	 entry (ptr, ptr, char (*), char (*));
		 

/* Condition */

	dcl     (cleanup, program_interrupt, xmail_leave_menu, xmail_redisplay_menu, quit) condition;

/* Builtin */

	dcl     (addr, null, rtrim, translate) builtin;

	on condition (xmail_redisplay_menu) begin;
		if menup ^= null then do;
		     if ^xmail_data.reply_request
			then call menu_$display (xmail_windows.menu.iocb, menup, code);
		     if code ^= 0
			then do;
			     call xmail_error_$no_code (code, NAME, "l", "Sorry, unable to display menu. This is an internal programming error.");
			     call timer_manager_$sleep (4, "11"b);
			     end;
			end;
	     end;
		
	default_file = "";
	mailbox_ptr = null;
	curr_msgsp = null;
	xmail_data.cleanup_signalled, xmail_data.reply_request = "0"b;

	on condition (xmail_leave_menu) begin;
		call query_if_more_msgs ();
	     end;

	deletes_ptr = null ();
	call hcs_$make_seg ("", "seg_of_deletes1", "", 01010b, deletes_ptr, (0));
	no_of_entries, old_no_of_entries = 0;

	on condition (cleanup) begin;
		call leave_menu ();
	     end;
	if xmail_data.mail_in_incoming then def_prompt = "incoming";
	else def_prompt = "";
	call xmail_select_file_$caller_msg ("mailbox", "mbx", (def_prompt), ALLOW_OLD, DONT_ALLOW_NEW, dir, file, "Enter name of mailbox you wish to process", unused_bit, unused_bit2, code);
	if code ^= 0 then call error_leave_menu ();

	if menup ^= null then call xmail_display_menu_ (menup, 2, code);
	else call GET_MENU ();

/* Open the mailbox and set the first current message to one */

	auto_open_options.version = OPEN_OPTIONS_VERSION_2;
	if treat_msgs_as_mail then
	auto_open_options.message_selection_mode = ALL_MESSAGES;
	else auto_open_options.message_selection_mode = ORDINARY_MESSAGES;
	auto_open_options.sender_selection_mode = ACCESSIBLE_MESSAGES;
	auto_open_options.message_reading_level = READ_KEYS;

	call mail_system_$open_mailbox (dir, (file), addr (auto_open_options), MAILBOX_VERSION_2, mailbox_ptr, code);
	if code = 0 then go to all_ok;
	if code = error_table_$moderr | code = mlsys_et_$no_o_permission | code = mlsys_et_$no_r_permission
	then do;
		call ioa_ ("Sorry, but you do not have permission to read the specified mailbox.");
		call error_leave_menu ();
	     end;
	else do;
		call xmail_error_$code_last (xmail_err_$int_prog_err, NAME, "l", "Sorry, unable to get contents of mailbox:  ^a", (file));
		call error_leave_menu ();
	     end;
all_ok:
	call xmail_select_msgs_$first (mailbox_ptr, curr_msgsp, pos_line);
	if curr_msgsp = null			/* error has occured and been diagnosed */
	then call error_leave_menu ();
	if mailbox.n_messages = 0
	then do;
		call ioa_ ("There are no messages in the ""^a"" mailbox.", file);
						/* 	    call error_leave_menu(); */
		curr_msgsp = null ();
		pos_line = "NONE";
		if file = "incoming" then xmail_data.mail_in_incoming = "0"b;
		goto START;
	     end;
	on condition (program_interrupt) go to START;
	on condition (quit)
	     begin;
		dcl     xmail_window_manager_$reconnect entry;
		call xmail_window_manager_$reconnect ();
		go to START;
	     end;

	call window_$clear_window (iox_$user_output, code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Unable to clear user_io window. This is an internal programming error.");

START:
	redisplay_menu = "1"b;
	return_to_caller = "0"b;
	do while ("1"b);
	     if rtrim (pos_line) = "NONE" then xmail_data.mail_in_incoming = "0"b;
	     call ioa_$rsnnl ("Total messages: ^d", file_info, (0), mailbox.n_messages - mailbox.n_deleted_messages);
	     if curr_msgsp ^= null
	     then if curr_msgs.count > 1 then multiple_msgs = "1"b;
		else multiple_msgs = "0"b;
	     call ioa_$rsnnl ("Current message^[^ss^;^[s^]^]: ^a", position, (0), curr_msgsp = null, multiple_msgs, pos_line);
	     call xmail_get_choice_ (menup,
		"Mailbox: " || file,
		(file_info),
		(position),
		xmail_data.normal_usage,
		redisplay_menu,
		"",
		choice,
		code);
	     redisplay_menu = "0"b;

	     if code = 0
	     then do;
		     call PERFORM_OPTION (choice, redisplay_menu);
		     if return_to_caller
		     then do;
			     call leave_menu ();
			     return;
			end;
		end;
	     else if code = xmail_err_$help_requested then call EXPLAIN_OPTION (choice);
	     else if code = xmail_err_$exit_now
	     then do;
		     call query_if_more_msgs ();
		     call leave_menu ();
		     go to EXIT;
		end;
	     else do;
		     call window_$bell (iox_$user_output, code);
		     if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Cannot ring terminal bell. This is an internal programming error.");

		end;
	end;

EXIT:	return;
%page;
PERFORM_OPTION: proc (opt, redisplay);

	dcl     xmail_delete_msgs_	 entry (ptr, ptr, char (*), char (*));
	dcl     xmail_display_msgs_	 entry (ptr, ptr, ptr);
	dcl     xmail_dprint_msgs_	 entry (ptr, ptr);
	dcl     xmail_file_msgs_$current_msgs entry (ptr, ptr, char (32) var, bit (1) aligned);
	dcl     xmail_forward_msg_	 entry (ptr, ptr);
	dcl     xmail_list_msgs_	 entry (ptr, ptr, ptr);
	dcl     xmail_list_msgs_$selected entry (ptr, ptr, ptr);
          dcl     xmail_list_msgs_$set_seen_switch entry (ptr, ptr, bit (1) aligned);
	dcl     xmail_reply_msg_	 entry (ptr, ptr);
	dcl     xmail_select_msgs_	 entry (ptr, ptr, ptr, bit (2) aligned, char (*));
	dcl     xmail_select_msgs_$next entry (ptr, ptr, char (*));
	dcl     xmail_write_msgs_	 entry (ptr, ptr);
	dcl     xmail_Consult_Files_	 entry ();
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));


	dcl     deleted_msg_string	 char (25);
	dcl     opt		 fixed bin;
	dcl     message_num		 fixed bin;
	dcl     idx		 fixed bin;
	dcl     idx1		 fixed bin;
	dcl     dreply_msg_ptr	 ptr;
	dcl     counter		 fixed bin;
	dcl     redisplay		 bit (1) aligned;
          dcl     seen_msgsp             ptr;
          dcl     switch                 bit (1) aligned;
          dcl     switch_on_off          bit (2) aligned;
          dcl     SWITCH_ON              bit (2) aligned init ("10"b) int static options (constant);
	dcl     MAILBOX_EMPTY_MSG	 char (17) static options (constant) init
				 ("Mailbox is empty.");

	call window_$clear_window (iox_$user_output, code);
	go to OPT (opt);

OPT (1):						/* Display Messages Option */
	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	if curr_msgsp ^= null ()
	then call xmail_display_msgs_ (mailbox_ptr, curr_msgsp, iox_$user_output);
	else call ioa_ (MAILBOX_EMPTY_MSG);

	return;

OPT (2):						/* Reply to Messages */
	if curr_msgsp ^= null ()
	then call xmail_reply_msg_ (mailbox_ptr, curr_msgsp);
	else call ioa_ (MAILBOX_EMPTY_MSG);

	if NEW_MESSAGES () & curr_msgsp = null ()
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	return;

OPT (3):						/* File Original Option */
	if curr_msgsp ^= null ()
	then do;
		call xmail_file_msgs_$current_msgs (mailbox_ptr, curr_msgsp, default_file, ALLOW_SELECTION);
		if default_file ^= ""
		then call delete_msgs;
	     end;
	else call ioa_ (MAILBOX_EMPTY_MSG);

	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	return;

OPT (4):						/* Delete Messages Option */
	if curr_msgsp ^= null ()
	then call delete_msgs;
	else call ioa_ (MAILBOX_EMPTY_MSG);

	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	return;


OPT (5):						/* Next Message Option */
	if curr_msgsp ^= null
	     | (NEW_MESSAGES () & curr_msgsp = null)
	then do;
		call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
		call xmail_list_msgs_$selected (mailbox_ptr, curr_msgsp, iox_$user_output);
	     end;
	else call ioa_ (MAILBOX_EMPTY_MSG);
	return;

OPT (6):						/* Select Messages Option */
	if curr_msgsp = null then
	    if NEW_MESSAGES () & curr_msgsp = null
	     then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	if curr_msgsp ^= null
	then do;
		call xmail_select_msgs_ (mailbox_ptr, curr_msgsp, seen_msgsp, switch_on_off, pos_line);
		call window_$clear_window (iox_$user_output, code);
		if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Unable to clear user_io window. This is an internal programming error.");

/* update and redisplay the new message line before list */

		if seen_msgsp ^= null
                    then do;
		     if switch_on_off = SWITCH_ON then switch = "1"b;
		     else switch = "0"b;
		     call xmail_list_msgs_$set_seen_switch (mailbox_ptr, seen_msgsp, switch);
		     free seen_msgsp -> curr_msgs;
end;
		else if curr_msgsp ^= null then do;
			if curr_msgs.count > 1
			then multiple_msgs = "1"b;
			else multiple_msgs = "0"b;
			call ioa_$rsnnl ("Current message^[^ss^;^[s^]^]: ^a", position, (0), curr_msgsp = null, multiple_msgs, pos_line);
			call xmail_sw_$update_position ((position));
			call xmail_sw_$redisplay ();
			
			call xmail_list_msgs_$selected (mailbox_ptr, curr_msgsp, iox_$user_output);
			end;
	end;
	else call ioa_ (MAILBOX_EMPTY_MSG);
	return;

OPT (7):						/* Display Summary of Current Messages Option */
	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	if curr_msgsp ^= null
	then call xmail_list_msgs_$selected (mailbox_ptr, curr_msgsp, iox_$user_output);
	else call ioa_ (MAILBOX_EMPTY_MSG);

	return;

OPT (8):						/* Display Summary of Messages Option */
	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	if curr_msgsp ^= null
	then call xmail_list_msgs_ (mailbox_ptr, curr_msgsp, iox_$user_output);
	else call ioa_ (MAILBOX_EMPTY_MSG);

	return;

OPT (9):						/* Forward Messages */
	if curr_msgsp ^= null ()
	then call xmail_forward_msg_ (mailbox_ptr, curr_msgsp);
	else call ioa_ (MAILBOX_EMPTY_MSG);

	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);

	return;

OPT (10):						/* Undelete Messages Option */
	call xmail_undelete_msgs_ (mailbox_ptr, curr_msgsp, pos_line, "");
	if curr_msgsp ^= null ()
	then do;
		do idx = 1 to curr_msgs.count;
		     message_num = curr_msgs.numbers (idx);
		     if mailbox.messages (message_num).message_ptr = null
		     then do;
			     call mail_system_$read_message (mailbox_ptr, message_num, code);
			     if code ^= 0
			     then call xmail_error_$no_code (code, NAME, "l", "Unable to read message ^d. This is an internal programming error.", message_num);
			end;
		     dreply_msg_ptr = mailbox.messages (message_num).message_ptr;
		     deleted_msg_string = unique_chars_ ((dreply_msg_ptr -> message.header.message_id)) || ".reply";
		     do idx1 = 1 to no_of_entries;
			if deletes_array (idx1) = deleted_msg_string then deletes_array (idx1) = "";
		     end;
		end;
		if rtrim (file) = "incoming" then xmail_data.mail_in_incoming = "1"b;
	     end;
	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	return;

OPT (11):						/* File Copy Option */
	if curr_msgsp ^= null ()
	then call xmail_file_msgs_$current_msgs (mailbox_ptr, curr_msgsp, default_file, ALLOW_SELECTION);
	else call ioa_ (MAILBOX_EMPTY_MSG);

	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	return;

OPT (12):						/* Print Messages Option */
	if curr_msgsp ^= null ()
	then call xmail_dprint_msgs_ (mailbox_ptr, curr_msgsp);
	else call ioa_ (MAILBOX_EMPTY_MSG);

	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	return;

OPT (13):						/* Write Messages Option */
	if curr_msgsp ^= null ()
	then call xmail_write_msgs_ (mailbox_ptr, curr_msgsp);
	else call ioa_ (MAILBOX_EMPTY_MSG);

	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);
	return;

OPT (14):						/* Process Filed Mail Option */
	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);

	redisplay = "1"b;
	xmail_data.foreign_mailbox = "1"b;
	call xmail_Consult_Files_ ();
	xmail_data.foreign_mailbox = "0"b;
	return;

OPT (15):						/* Send Mail Option */
	if NEW_MESSAGES () & curr_msgsp = null
	then call xmail_select_msgs_$next (mailbox_ptr, curr_msgsp, pos_line);

	what_next = "send_mail";
	return_to_caller = "1"b;
	return;

%page;
delete_msgs: proc;
	no_of_entries = old_no_of_entries + curr_msgs.count;
	call hcs_$set_bc_seg (deletes_ptr, no_of_entries * 225 + 36, code);
	counter = 0;
	do idx = (old_no_of_entries + 1) to no_of_entries;
	     counter = counter + 1;
	     message_num = curr_msgs.numbers (counter);
	     if mailbox.messages (message_num).message_ptr = null
	     then do;
		     call mail_system_$read_message (mailbox_ptr, message_num, code);
		     if code ^= 0
		     then call xmail_error_$no_code (code, NAME, "l", "Unable to read message ^d. This is an internal programming error.", message_num);
		end;
	     dreply_msg_ptr = mailbox.messages (message_num).message_ptr;
	     deletes_array (idx) = unique_chars_ ((dreply_msg_ptr -> message.header.message_id)) || ".reply";
	     call hcs_$status_minf ((mail_dir), (deletes_array (idx)), (0), (0), (0), code);
	     if code = 0 then call ioa_ ("^/   The deferred reply for message no.^d was discarded.^/   To retrieve it, select the ""Retrieve Messages"" option.^/", message_num);
	end;

	old_no_of_entries = no_of_entries;
	call xmail_delete_msgs_ (mailbox_ptr, curr_msgsp, pos_line, (file));
	return;
     end delete_msgs;

NEW_MESSAGES: proc returns (bit (1));

	dcl     new_flag		 bit (1);

	call mail_system_$read_new_messages (mailbox_ptr, (0), n_new_msgs, (0), status);
	if status ^= 0 & status ^= mlsys_et_$no_more_messages
	then call xmail_error_$no_code (status, NAME, "q", "Unable to read mail file. This is an internal programming error.");
	if n_new_msgs = 1
	then call ioa_ ("A new message has arrived.");
	else if n_new_msgs > 1
	then call ioa_ ("^d new messages have arrived.", n_new_msgs);

	if n_new_msgs = 0 then new_flag = "0"b;
	else do;
		new_flag = "1"b;
		if rtrim (file) = "incoming"
		then xmail_data.mail_in_incoming = "1"b;
	     end;
	return (new_flag);
     end NEW_MESSAGES;


     end PERFORM_OPTION;
%page;

EXPLAIN_OPTION: proc (opt);

	dcl     opt		 fixed bin;

	dcl     xmail_display_help_	 entry (char (*), char (*), fixed bin (35));

	call window_$clear_window (iox_$user_output, code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Cannot clear user_io window. This is an internal programming error.");
	call xmail_display_help_ (NAME || ".gi.info",
	     translate (OPTION_NAMES (opt), "_", " "), code);
	if code ^= 0 then call xmail_error_$no_print (code, NAME, "l", "Cannot clear user_io window. This is an internal programming error.");

     end EXPLAIN_OPTION;
%page;
GET_MENU: proc;

	dcl     code		 fixed bin (35);
	dcl     TITLE		 init ("Process Incoming Mail") char (21)
				 static options (constant);


	dcl     xmail_create_menu_	 entry (char (*), (*) char (*) var, fixed bin, ptr, fixed bin (35));

	call xmail_create_menu_ (TITLE, OPTION_NAMES, N_COLUMNS, menup, code);
	if code ^= 0
	then do;
		call xmail_error_$code_last (xmail_err_$int_prog_err, NAME, "l", "Unable to get the ""Executive Mail"" menu.");
		call error_leave_menu ();


	     end;
	call xmail_display_menu_ (menup, 2, code);

     end GET_MENU;

error_leave_menu: proc ();

	call leave_menu ();
	go to EXIT;

     end error_leave_menu;


query_if_more_msgs: proc ();

	dcl     xmail_select_msgs_$new entry (ptr, ptr, char (*));
	dcl     mail_system_$get_message_counts entry (char (*), char (*), bit (1) aligned, fixed bin, fixed bin, fixed bin, fixed bin (35));
	if mailbox_ptr ^= null
	then do;
		call mail_system_$get_message_counts (dir, (file), INCLUDE_BY_TYPE, n_total_msgs, n_ordinary_msgs, n_interactive_msgs, code);
		if code = 0 then do;
		          if auto_open_options.message_selection_mode = ALL_MESSAGES then
			n_new_msgs = n_total_msgs - mailbox.n_messages;
			else n_new_msgs = n_ordinary_msgs - mailbox.n_messages;      
			if n_new_msgs > 0		 
			then do;			 
				xmail_data.mail_in_incoming = "1"b;
				if want_to_examine_more ()
				then do;

					call xmail_select_msgs_$new (mailbox_ptr, curr_msgsp, pos_line);
					call ioa_ ("The newly arrived messages are now the current messages.");
					go to START;
				     end;
			     end;
		     end;
		else if code ^= mlsys_et_$no_s_permission & code ^= mlsys_et_$no_r_permission
		then call xmail_error_$no_code (code, NAME, "q", "Unable to read mail file. This is an internal programming error.");
	     end;
     end query_if_more_msgs;

leave_menu: proc ();

	if mailbox_ptr ^= null
	then do;

	     if cleanup_signalled then call xmail_undelete_msgs_ (mailbox_ptr, curr_msgsp, pos_line, "");
	     xmail_data.cleanup_signalled = "0"b;
		auto_close_options.version = CLOSE_OPTIONS_VERSION_2;
		auto_close_options.flags.perform_deletions = "1"b;
		auto_close_options.flags.report_deletion_errors = "0"b;
		auto_close_options.flags.mbz = "0"b;
		call mail_system_$close_mailbox (mailbox_ptr, addr (auto_close_options), code);
		if code ^= 0 then call xmail_error_$no_code (code, NAME, "l", "Unable to close user mailbox. This is an internal programming error.");
	     end;

	xmail_data.foreign_mailbox = "0"b;
	if curr_msgsp ^= null ()
	then do;
		free curr_msgs;
		curr_msgsp = null ();
	     end;
	if (deletes_ptr ^= null () & no_of_entries ^= 0) then call xmail_delete_dreply_ (deletes_ptr);
	old_no_of_entries = 0;

     end leave_menu;


want_to_examine_more: proc () returns (bit (1) aligned);

	dcl     yes_sw		 bit (1) aligned;

	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);

	call ioa_ ("^d new message^[s^] ^[have^;has^] arrived.", n_new_msgs, n_new_msgs > 1, n_new_msgs > 1);

	call xmail_get_str_$yes_no ("Do you still wish to quit?", yes_sw);
	return (^yes_sw);

     end want_to_examine_more;

%page;
%include menu_dcls;
%page;
%include xmail_responses;
%page;
%include xmail_data;
%page;
%include window_dcls;
%page;
%include mlsys_open_options;
%page;
%include mlsys_close_options;
%page;
%include mlsys_mailbox;
%page;
%include xmail_windows;
%page;
%include xmail_curr_msg_info;
%page;
%include mlsys_message;
%page;

     end xmail_Process_Mail_;

