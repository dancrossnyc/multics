/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-06-25,Blair), approve(86-07-15,MCR7447),
     audit(86-07-18,LJAdams), install(86-07-21,MR12.0-1100):
     Accept the old format of "Cc:" so that users can read their deferred
     messages which were created before the format changed to "cc:" for copies.
     Error #119.
  2) change(86-06-25,Blair), approve(86-07-15,MCR7447),
     audit(86-07-18,LJAdams), install(86-07-21,MR12.0-1100):
     When passing arguments to the mail_system routines which build the
     message, precede the keywords used to delimit the contents of the header
     fields with a NL to make sure that keywords which are part of the text are
     not used incorrectly. TR 20269.
  3) change(87-08-10,Blair), approve(87-12-10,MCR7818),
     audit(87-12-23,LJAdams), install(88-01-12,MR12.2-1013):
     Add capability to parse a Reply-To field in a message header and process
     the supplied value.
                                                   END HISTORY COMMENTS */


xmail_process_user_msg_: procedure ();


/* BEGIN DESCRIPTION

function:

   This proc is called by xmail_prepare_msg_ to extract the "subject
   text and the "message" text from the msg prepared by the user via
   emacs.  It uses the mlsys_utils_$parse_address_list_text proc to
   establish the primary and secondary (if any) recipients address
   structure lists.  Note that this procedure assumes that there are no
   syntax errors in the user specified list of addresses and/or address
   lists since the emacs extention does this as well as determining 
   that for every address specified there is a corresponding mailbox.

history:

   81-07-03  Written by R. Ignagni, format: style1.

   83-07-13  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes.

   84-08-07  JG Backs: Modified for the addition of blind carbon copies (bcc)

   84-11-08  JG Backs: Removed the input parameter P_caller, which was not
   used anywhere in module, but was passed to xmail_send_msg_.  Since it also
   was not used there, it was removed in both places, changing the call and
   declaration statement of module xmail_send_msg_ to eliminate the parameter.
   These changes also required respective changes to xmail_prepare_msg_ and
   xmail_send_stored_msg_, which are the only two modules calling this module.
   Audit change.

   84-11-09  JG Backs: Deleted the spaces within the quotes of "To:", "cc:",
   and "bcc:" because they were not needed and were inconsistant within and
   across modules.  Audit change.

END DESCRIPTION
*/

/* CONDITIONS */

	dcl     (quit, cleanup)	 condition;

/* STATIC */

	dcl     wrong_format	 char (31) static options (constant) init ("Message not in expected format.");
	dcl     error_message	 char (67) static options (constant)
				 init ("Sending of message not completed, due to an internal program error.");
	dcl     WHITE_SPACE		 char (4) aligned static options (constant) init ("
 	");					/* HT VT NL <space> */
	dcl     WHITE_SPACE_COMMA	 char (6) aligned static options (constant) init ("
	  ,");					/* HT VT NL <space> comma */
	dcl     NAME		 char (23) static options (constant) init ("xmail_process_user_msg_");
          dcl     NL                     char (1) int static options (constant) init ("
");
	dcl     stop		 char (1) static options (constant) init ("q");

/* AUTOMATIC */

	dcl     bit_count		 fixed bin (24);
	dcl     code		 fixed bin (35);
          dcl     copy_format            char (3);
          dcl     follows_copy           char (8);
          dcl     new_style              bit (1) aligned;
	dcl     no_chars		 fixed bin (21);
          dcl     old_style              bit (1) aligned;
	dcl     start_of_text	 fixed bin;

	dcl     1 auto_message_body_section_parameter automatic like message_body_section_parameter;

	dcl     1 auto_parse_text_options automatic like parse_text_options;

/* BASED */

	dcl     based_string	 char (no_chars)
				 based (send_mail_info.emacs_seg_ptr);
	dcl     based_array		 (no_chars) char (1)
				 based (send_mail_info.emacs_seg_ptr);

/* ENTRIES */

	dcl     xmail_send_msg_	 entry ();	/* no parameter */
	dcl     xmail_error_$no_code	 entry options (variable);
	dcl     xmail_error_$code_last entry options (variable);
	dcl     xmail_window_manager_$reconnect entry ();
	dcl     mail_system_$add_body_section
				 entry (ptr, ptr, fixed bin, fixed bin (35));
	dcl     mail_system_$create_message
				 entry (char (8), ptr, fixed bin (35));
	dcl     mail_system_$free_address_list
				 entry (ptr, fixed bin (35));
	dcl     mail_system_$free_message
				 entry (ptr, fixed bin (35));
	dcl     mail_system_$replace_bcc
				 entry (ptr, ptr, fixed bin (35));
	dcl     mail_system_$replace_cc
				 entry (ptr, ptr, fixed bin (35));
          dcl     mail_system_$replace_reply_to
    		                     entry (ptr, ptr, fixed bin (35));      dcl     mail_system_$replace_subject
				 entry (ptr, char (*), fixed bin (35));
	dcl     mail_system_$replace_to
				 entry (ptr, ptr, fixed bin (35));
	dcl     mlsys_utils_$parse_address_list_text
				 entry (char (*), ptr, char (8), ptr, ptr, fixed bin (35));
	dcl     delete_$ptr		 entry (ptr, bit (6), char (*), fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));

/* BUILTIN */

	dcl     (addr, after, before, divide, index, length, ltrim, null, rtrim, substr) builtin;

/* INCLUDE FILES */

%include mlsys_message;
%page;
%include xmail_data;
%page;
%include window_dcls;
%page;
%include xmail_send_mail;
%page;
%include mlsys_address_list;
%page;
%include mlsys_parse_txt_options;

/* BEGIN */

/* Set up quit and cleanup conditions */

START:	parse_text_error_list_ptr, message_ptr = null ();

	on condition (cleanup) call CLEAN_UP;
	on condition (quit)
	     begin;
		call xmail_window_manager_$reconnect ();
		call ioa_ ("Sending message terminated.");
		call CLEAN_UP;
		go to exit;
	     end;


	call hcs_$status_mins (send_mail_info.emacs_seg_ptr, 1, bit_count, code);
	if code ^= 0 then call xmail_error_$no_code (code, NAME, stop, "^a", error_message);

/* Get number of chars in seg */

	if bit_count = 0				/* The user "quit" while in emacs */
	then do;
	     call ioa_ ("Sending message terminated.");
	     call CLEAN_UP;
	     return;
	end;
	no_chars = divide (bit_count, 9, 17, 0);

/* Extract the "Subject", "To", "cc", and "bcc" fields from the segment created
   by Emacs   */

	old_style, new_style = "0"b;
	if index (based_string, "Cc:") > 0 then do;
	     old_style = "1"b;
	     copy_format = "Cc:";
	     follows_copy = "Message:";
	     end;
	if index (based_string, "cc:") > 0 then do;
	     new_style = "1"b;
	     copy_format = "cc:";
	     follows_copy = "bcc:";
	     end;

	
	if (^(old_style | new_style) |
	     (index (based_string, "Subject:") = 0) |
	     (index (based_string, "To:") = 0) |
/*	     (index (based_string, "cc:") = 0) |
	     (index (based_string, "bcc:") = 0) |        replaced by old_style new_style */
	     (index (based_string, "Message:") = 0))
	then call xmail_error_$no_code (code, NAME, stop, "^a Sending terminated.", wrong_format);
	if new_style & (index (based_string, "bcc:") = 0) 
	     then call xmail_error_$no_code (code, NAME, stop, "^a Sending terminated.", wrong_format);
	
	if rtrim (after (based_string, "Message:"), WHITE_SPACE) = ""
	then call xmail_error_$no_code (code, NAME, "i", "No message text entered. Sending terminated.");

	call mail_system_$create_message (MESSAGE_VERSION_2, send_mail_info.new_msg_ptr, code);

	if code ^= 0 then call xmail_error_$no_code (code, NAME, stop, "^a", error_message);

/* Supply "subject" for the new message */

	call mail_system_$replace_subject (send_mail_info.new_msg_ptr, (after (before (based_string, NL || "Reply-To:"), "Subject:"))|| NL, code);

	if code ^= 0 then call xmail_error_$no_code (code, NAME, stop, "^a", error_message);

/* Supply the "message" field for the new message */

	message_body_section_ptr = addr (auto_message_body_section_parameter.section);
	auto_message_body_section_parameter.version =
	     MESSAGE_BODY_SECTION_PARAMETER_VERSION_2;
	message_preformatted_body_section.header.section_type =
	     MESSAGE_PREFORMATTED_BODY_SECTION;
	message_preformatted_body_section.header.section_n_lines = -1;
	start_of_text = index (based_string, NL || "Message:") + length ("Message:") + 1;
	message_preformatted_body_section.text_ptr =
	     addr (based_array (start_of_text));
	message_preformatted_body_section.text_lth =
	     length (substr (rtrim (based_string), start_of_text));

	call mail_system_$add_body_section (send_mail_info.new_msg_ptr, addr (auto_message_body_section_parameter), 1, code);
	if code ^= 0 then call xmail_error_$no_code (code, NAME, stop, "^a", error_message);

/* Convert text to address lists for To:, bcc:, and cc: fields  */

	send_mail_info.to_list_ptr,
               send_mail_info.reply_to_list_ptr,
	     send_mail_info.cc_list_ptr,
	     send_mail_info.bcc_list_ptr = null ();

	auto_parse_text_options.version = PARSE_TEXT_OPTIONS_VERSION_1;
	auto_parse_text_options.area_ptr = null;
	auto_parse_text_options.flags.list_errors = "0"b;
	auto_parse_text_options.flags.validate_addresses = "0"b;
	auto_parse_text_options.flags.include_invalid_addresses = "0"b;
	auto_parse_text_options.flags.mbz = "0"b;

	if rtrim (after (before (based_string, NL || "To:"), NL || "Reply-To:"), WHITE_SPACE_COMMA) || NL = ""
	     then goto PROCESS_TO;
	else do;
	     call mlsys_utils_$parse_address_list_text (rtrim (after (before (based_string, NL || "To:"), NL ||
		"Reply-To:") || NL, WHITE_SPACE_COMMA), addr (auto_parse_text_options), ADDRESS_LIST_VERSION_2,
		send_mail_info.reply_to_list_ptr, parse_text_error_list_ptr, code);
	     if code ^= 0 then call xmail_error_$code_last ( code, NAME, stop, "^a^/", error_message);
	     call mail_system_$replace_reply_to (send_mail_info.new_msg_ptr, send_mail_info.reply_to_list_ptr, code);
	     if code ^= 0 then call xmail_error_$code_last ( code, NAME, stop, "^a^/", error_message);
	     end;

PROCESS_TO:	     
	if rtrim (after (before (based_string, NL || copy_format), NL || "To:"), WHITE_SPACE_COMMA) || NL = ""
	then call xmail_error_$no_code (code, NAME, "i", "You did not enter any recipients. Sending terminated.");

	call mlsys_utils_$parse_address_list_text (rtrim (after (before (based_string, NL || copy_format),NL || "To:") || NL, WHITE_SPACE_COMMA),
	     addr (auto_parse_text_options), ADDRESS_LIST_VERSION_2, send_mail_info.to_list_ptr, parse_text_error_list_ptr, code);
	if code ^= 0 then call xmail_error_$code_last (code, NAME, stop, "^a^/", error_message);
	call mail_system_$replace_to (send_mail_info.new_msg_ptr, send_mail_info.to_list_ptr, code);
	if code ^= 0 then call xmail_error_$code_last (code, NAME, stop, "^a^/", error_message);

	if ltrim (rtrim (after (before (based_string,NL || rtrim(follows_copy)), NL ||copy_format), WHITE_SPACE_COMMA), WHITE_SPACE_COMMA) || NL ^= ""
	then call mlsys_utils_$parse_address_list_text (rtrim (after (before (based_string, NL || rtrim(follows_copy)), NL || copy_format)|| NL, WHITE_SPACE_COMMA), addr (auto_parse_text_options), ADDRESS_LIST_VERSION_2, send_mail_info.cc_list_ptr, parse_text_error_list_ptr, code);
	if code ^= 0 then call xmail_error_$code_last (code, NAME, stop, "^a^/", error_message);
	if send_mail_info.cc_list_ptr ^= null
	then do;
	     call mail_system_$replace_cc (send_mail_info.new_msg_ptr, send_mail_info.cc_list_ptr, code);
	     if code ^= 0
	     then call xmail_error_$code_last (code, NAME, stop, "^a^/", error_message);
	end;

/* Add bcc handling */
          if new_style then 
	if ltrim (rtrim (after (before (based_string,  NL || "Message:"), NL || "bcc:"), WHITE_SPACE_COMMA), WHITE_SPACE_COMMA) || NL ^= ""
	then call mlsys_utils_$parse_address_list_text (rtrim (after (before (based_string,  NL || "Message:"), NL || "bcc:") || NL, WHITE_SPACE_COMMA), addr (auto_parse_text_options), ADDRESS_LIST_VERSION_2, send_mail_info.bcc_list_ptr, parse_text_error_list_ptr, code);
	if code ^= 0 then call xmail_error_$code_last (code, NAME, stop, "^a^/", error_message);
	if send_mail_info.bcc_list_ptr ^= null
	then do;
	     call mail_system_$replace_bcc (send_mail_info.new_msg_ptr, send_mail_info.bcc_list_ptr, code);
	     if code ^= 0
	     then call xmail_error_$code_last (code, NAME, stop, "^a^/", error_message);
	end;

	send_mail_info.msg_exists = "1"b;

	if parse_text_error_list_ptr ^= null ()
	then do;
	     free parse_text_error_list;
	     parse_text_error_list_ptr = null ();
	end;
	call xmail_send_msg_ ();			/* no parameter */
	return;

exit:	return;

%page;
/* INTERNAL PROCEDURES */

CLEAN_UP: proc ();

	if send_mail_info.emacs_seg_ptr ^= null () then
	     call delete_$ptr (send_mail_info.emacs_seg_ptr, "100101"b, NAME, code);
	if send_mail_info.new_msg_ptr ^= null () then
	     call mail_system_$free_message (send_mail_info.new_msg_ptr, code);
	if code ^= 0 then send_mail_info.to_list_ptr = null ();
	if send_mail_info.to_list_ptr ^= null () then
	     call mail_system_$free_address_list (send_mail_info.to_list_ptr, code);
	if code ^= 0 then send_mail_info.reply_to_list_ptr = null ();
	if send_mail_info.reply_to_list_ptr ^= null () then
	     call mail_system_$free_address_list (send_mail_info.reply_to_list_ptr, code);
	if code ^= 0 then send_mail_info.cc_list_ptr = null ();
	if send_mail_info.cc_list_ptr ^= null () then
	     call mail_system_$free_address_list (send_mail_info.cc_list_ptr, code);
	if code ^= 0 then send_mail_info.bcc_list_ptr = null ();
	if send_mail_info.bcc_list_ptr ^= null () then
	     call mail_system_$free_address_list (send_mail_info.bcc_list_ptr, code);
	send_mail_info.emacs_seg_ptr = null ();
	send_mail_info.new_msg_ptr = null ();
	send_mail_info.msg_exists = "0"b;
	send_mail_info.emacs_seg_pathname = "";
	return;

     end CLEAN_UP;


     end xmail_process_user_msg_;

