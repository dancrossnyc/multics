/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-07,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     85-04-01 JG Backs: Deleted the constant ASK because it was added to the
     include file xmail_responses.incl.pl1 and resulted in a compiler warning.
  2) change(86-01-07,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Rearrange code to print the stmt that the message was sent before
     querying the user about whether he wants to save the message.
  3) change(86-01-17,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Set the bit for cleanup_signalled on a quit condition (signalled by
     hitting break in response to *do you really want to quit*) so that the
     calling program will know that the message still exists. TR 20028.
  4) change(86-01-28,Blair), approve(86-02-26,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     Add an on unit for the reissue_query condition inside the quit handler so
     that questions which the user types break in response to can be reissued.
     TRs 18711 18974.
                                                   END HISTORY COMMENTS */


xmail_send_msg_: proc;

/* BEGIN DESCRIPTION

function:

   This proc delivers the message prepared by the user to the primary and
   (if any) the secondary recipients. It uses the mail_system_$deliver_message
   proc for this.  Optionally, it saves the delivered message. It is called as
   a consequence of the user selecting the "Send" option in the Send Mail Menu.

history:	

   81-07     Written by R. Ignagni, format: style1

   83-07-21  DJ Schimke: Modified to use new mail_system calls and version 2
   mailboxes.

   83-10-06  DJ Schimke: Replaced calls to xmail_get_str_ with calls to 
   xmail_get_str_$yes_no.

   83-11-23 DJ Schimke: Added support for the new personalization option
   "Outgoing Savefile" which allows selection of where to file save messages.
   This also solves the discrepancy between setting "Save Outgoing messages"
   to "yes" and never having set "Save Outgoing messages".

   83-12-07 DJ Schimke: Cleaned up the reporting of delivery results by calling
   mlsys_utils_$print_delivery_results_ and mlsys_utils_$print_address_field 
   for displaying the failure/success of sending. This module still needs 
   recovery code to allow the sender to correct the bad addresses and continue.

   83-12-08 DJ Schimke: Added simple flag to prevent the call to 
   mlsys_util_$free_delivery_results until the call to send the msg has been 
   made. Otherwise, this cleanup will get errors referencing invalid pointers.

   84-08-08 JG Backs: Modified for the addition of blind carbon copies.

   84-11-07 JG Backs: Deleted the input parameter P_caller, which was not used
   anywhere in module.  This also required modifying xmail_process_user_msgs_,
   which is the only other module that calls this module.  Audit change.



END DESCRIPTION
*/

/* CONSTANTS */

	dcl     ACKNOWLEDGE		 char (14) static options (constant) init ("acknowledge_yn");
	dcl     ALLOW_SELECTION	 bit (1) aligned static options (constant) init ("1"b);
	dcl     CONTINUE		 char (1) static options (constant) init ("c");
	dcl     ERROR_MESSAGE	 char (67) static options (constant) init ("Sending of message not completed, due to an internal program error.");
	dcl     ERRORS_ONLY		 bit (1) aligned static options (constant) init ("1"b);
	dcl     LOG		 char (1) static options (constant) init ("l");
	dcl     MAILFILE_SUFFIX	 char (6) static options (constant) init ("sv.mbx");
	dcl     NAME		 char (15) static options (constant) init ("xmail_send_msg_");
	dcl     NO_SELECTION	 bit (1) aligned static options (constant) init ("0"b);
	dcl     QUIT		 char (1) static options (constant) init ("q");
	dcl     SAVE_MAILBOX	 char (15) static options (constant) init ("save_mailfile");
	dcl     SAVE_MESSAGE	 char (15) static options (constant) init ("save_message_yn");
	dcl     USE_SCREEN_WIDTH	 fixed bin aligned static options (constant) init (-1);

/* AUTOMATIC */

	dcl     acknowledge		 char (3) var;
	dcl     code		 fixed bin (35);
	dcl     code1		 fixed bin (35);
	dcl     delivery_results_need_cleanup bit (1) aligned;
	dcl     opt                    fixed bin;
	dcl     save_file		 char (32) var;
	dcl     save_message	 char (3) var;
	dcl     sci_ptr		 ptr;
	dcl     send_area_ptr	 ptr;
	dcl     yes_sw		 bit (1) aligned;

	dcl     1 auto_deliver_options like deliver_options;

/* AREA */

	dcl     send_area		 area aligned based (send_area_ptr);

/* CONDITIONS */

	dcl     (cleanup, quit, reissue_query)	 condition;

/* EXTERNAL STATIC */

	dcl     iox_$user_output	 ptr static external;
	dcl     mlsys_et_$no_a_permission ext static fixed bin (35);
	dcl     error_table_$bad_segment fixed bin (35) ext static;

/* ENTRIES */

	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     ioa_		 entry () options (variable);
	dcl     mail_system_$deliver_message entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mlsys_utils_$free_delivery_results entry (ptr, fixed bin (35));
	dcl     mlsys_utils_$print_delivery_results entry (ptr, bit (1) aligned, ptr, fixed bin (35));
	dcl     mlsys_utils_$print_address_list_field entry (char (*) var, ptr, fixed bin, ptr, fixed bin (35));
	dcl     ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     xmail_error_$code_first entry () options (variable);
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_error_$no_print	 entry () options (variable);
	dcl     xmail_file_msgs_$single_msg entry (ptr, char (32) var, bit (1) aligned);
	dcl     xmail_get_str_$yes_no	 entry (char (*) var, bit (1) aligned);
	dcl     xmail_send_msg_$ssu_exit entry ();
	dcl     xmail_window_manager_$quit_handler entry () returns (bit (1) aligned);
	dcl     xmail_window_manager_$reconnect entry ();
	dcl     xmail_value_$get	 entry (char (*), char (*) var, fixed bin (35));
	dcl     xmail_value_$get_with_default entry (char (*), char (*) var, char (*) var, fixed bin (35));

/* BUILTINS */
	dcl     (addr, null)	 builtin;

%page;
/* INCLUDE FILES */

%include xmail_data;
%page;
%include mlsys_deliver_info;
%page;
%include xmail_responses;
%page;
%include xmail_send_mail;
%page;
%include window_dcls;

/* BEGIN */

	recipients_info_ptr, sci_ptr = null ();
	send_area_ptr = get_system_free_area_ ();
	delivery_results_need_cleanup = "0"b;
	xmail_data.flags.cleanup_signalled = "0"b;

/* See if a message exists */

	if send_mail_info.msg_exists = "0"b
	then do;
	     call ioa_ ("There is no message to send.");
	     goto EXIT;
	end;

/* Set up conditions */

	on condition (cleanup) call CLEAN_UP;
	on condition (quit)
	     begin;
	          on condition (reissue_query) begin;
		     call window_$clear_window (iox_$user_output, (0));
		     goto RETRY (opt);
		     end;
	          xmail_data.cleanup_signalled = "1"b;
		if xmail_window_manager_$quit_handler ()
		then do;
		     call window_$clear_window (iox_$user_output, code);
		     if code ^= 0 then do;
			call xmail_error_$no_print (code, NAME, CONTINUE,
			     "Internal error trying to clear user_output");
			call xmail_window_manager_$reconnect ();
		     end;
		     call ioa_ ("Sending message terminated.");
		     call CLEAN_UP;
		     goto EXIT;
		end;
	     end;

/* See if there is a "bcc" or "cc" list */

	if send_mail_info.bcc_list_ptr ^= null ()
	then if send_mail_info.cc_list_ptr ^= null ()
	     then recipients_info_n_lists = 3;
	     else recipients_info_n_lists = 2;
	else if send_mail_info.cc_list_ptr ^= null ()
	then recipients_info_n_lists = 2;
	else recipients_info_n_lists = 1;

	alloc recipients_info in (send_area) set (recipients_info_ptr);

/* Add for bcc */

	if send_mail_info.bcc_list_ptr ^= null ()
	then if send_mail_info.cc_list_ptr ^= null ()
	     then do;
		recipients_info.lists (3).address_list_ptr = send_mail_info.bcc_list_ptr;
		recipients_info.lists (2).address_list_ptr = send_mail_info.cc_list_ptr;
	     end;
	     else recipients_info.lists (2).address_list_ptr = send_mail_info.bcc_list_ptr;
	else if send_mail_info.cc_list_ptr ^= null ()
	then recipients_info.lists (2).address_list_ptr = send_mail_info.cc_list_ptr;

	recipients_info.lists (1).address_list_ptr = send_mail_info.to_list_ptr;
	recipients_info.lists (*).recipients_result_list_ptr = null ();

	recipients_info.version = RECIPIENTS_INFO_VERSION_2;
	recipients_info.area_ptr = get_system_free_area_ ();
	auto_deliver_options.version = DELIVER_OPTIONS_VERSION_2;
	auto_deliver_options.delivery_mode = ORDINARY_DELIVERY;
	auto_deliver_options.queueing_mode = ALWAYS_QUEUE_FOREIGN;
	auto_deliver_options.queued_notification_mode = NOTIFY_ON_ERROR;
	auto_deliver_options.flags.abort = "1"b;
	auto_deliver_options.flags.send_if_empty = "0"b;
	auto_deliver_options.flags.recipient_notification = "1"b;

	call xmail_value_$get_with_default (ACKNOWLEDGE, (NO), acknowledge, code);
	if code ^= 0 then call xmail_error_$code_first (code, NAME, LOG,
		"^/Unable to get a value for ""^a"" in the xmail value segment.  Using the default value instead.", ACKNOWLEDGE);

	if acknowledge = NO
	then auto_deliver_options.flags.acknowledge = "0"b;
	else if acknowledge = ASK
	then do;
RETRY (1):		
	     opt = 1;
	     call xmail_get_str_$yes_no ("Do you want this message acknowledged? ", yes_sw);
	     if yes_sw then auto_deliver_options.flags.acknowledge = "1"b;
	     else auto_deliver_options.flags.acknowledge = "0"b;
	end;
	else if acknowledge = YES
	then auto_deliver_options.flags.acknowledge = "1"b;
	else do;
	     call xmail_error_$code_first (error_table_$bad_segment, NAME, LOG,
		"^/An invalid value for ""^a"" was found in the xmail value segment. Using the default value instead.", ACKNOWLEDGE);
	     auto_deliver_options.flags.acknowledge = "1"b;
	end;

	auto_deliver_options.flags.queue_mailing_lists = "0"b;
	auto_deliver_options.flags.mbz = "0"b;

	call mail_system_$deliver_message (send_mail_info.new_msg_ptr, recipients_info_ptr, addr (auto_deliver_options), code);
	delivery_results_need_cleanup = "1"b;
	if code ^= 0 then do;
	     send_mail_info.msg_exists = "1"b;
	     if code = mlsys_et_$no_a_permission then call xmail_error_$no_code (code, NAME, CONTINUE, "You do not have permission to send message to at least one of the recipients.");

	     if recipients_info.n_failed_recipients > 0
	     then do;
		call ioa_ ("Message could not be sent.");
		call ssu_$standalone_invocation (sci_ptr, "", "", null (), xmail_send_msg_$ssu_exit, code1);
		if code1 = 0 then call mlsys_utils_$print_delivery_results (sci_ptr, ERRORS_ONLY, recipients_info_ptr, code1);
		else call xmail_error_$no_code (code1, NAME, LOG, "The reason cannot be printed due to an internal programming error");
		call ssu_$destroy_invocation (sci_ptr);
		call xmail_error_$code_first (code, NAME, QUIT);
	     end;
	     call xmail_error_$code_first (code, NAME, QUIT, ERROR_MESSAGE);
	end;

/* Report that the messge was sent. */

	call ioa_ ("Message sent: ");
	call mlsys_utils_$print_address_list_field ("To", to_list_ptr, USE_SCREEN_WIDTH, null, code);
	if code ^= 0 then call xmail_error_$no_code (code, NAME, CONTINUE, "Message sent to ""To:"" recipient(s).");

	if cc_list_ptr ^= null
	then do;
	     call mlsys_utils_$print_address_list_field ("cc", cc_list_ptr, USE_SCREEN_WIDTH, null, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, CONTINUE, "Message sent to ""cc:"" recipient(s).");
	end;
	else call ioa_ ("cc:  <None>");

/* Add for bcc */

	if bcc_list_ptr ^= null
	then do;
	     call mlsys_utils_$print_address_list_field ("bcc", bcc_list_ptr, USE_SCREEN_WIDTH, null, code);
	     if code ^= 0 then call xmail_error_$no_code (code, NAME, CONTINUE, "Message sent to ""bcc:"" recipient(s).");
	end;
	else call ioa_ ("bcc:  <None>");

/* Is this message to be saved? */

	call xmail_value_$get (SAVE_MAILBOX, save_file, code);
	if code ^= 0 then call xmail_error_$code_first (code, NAME, LOG,
		"^/Unable to get a value for ""^a"" in the xmail value segment.  Using the default value instead.", SAVE_MAILBOX);

	call xmail_value_$get (SAVE_MESSAGE, save_message, code);
	if code ^= 0 then call xmail_error_$code_first (code, NAME, LOG,
		"^/Unable to get a value for ""^a"" in the xmail value segment.  Using the default value instead.", SAVE_MESSAGE);

	if save_message = YES
	then do;
	     if save_file = ASK
	     then call xmail_file_msgs_$single_msg (send_mail_info.new_msg_ptr, "outgoing", ALLOW_SELECTION);
	     else call xmail_file_msgs_$single_msg (send_mail_info.new_msg_ptr, minus_suffix ((save_file), (MAILFILE_SUFFIX)), NO_SELECTION);
	end;

	else if save_message = ASK
	then do;
RETRY (2):		
               opt = 2;
	     call xmail_get_str_$yes_no ("Do you wish to save a copy of this message? ", yes_sw);
	     if yes_sw then do;
		if save_file = ASK
		then call xmail_file_msgs_$single_msg (send_mail_info.new_msg_ptr, "outgoing", ALLOW_SELECTION);
		else call xmail_file_msgs_$single_msg (send_mail_info.new_msg_ptr, minus_suffix ((save_file), (MAILFILE_SUFFIX)), NO_SELECTION);
	     end;
	end;

	else if save_message ^= NO
	then call xmail_error_$code_first (error_table_$bad_segment, NAME, "q",
		"^/An invalid value for ""^a"" was found in the xmail value segment.", SAVE_MESSAGE);

	call CLEAN_UP;
EXIT:	return;

/* ENTRY POINTS */

ssu_exit: entry;

/* This entry doesn't do anything but it is called by ssu_$print_message */
/* which is called by mlsys_utils_$print_delivery_results.               */

	return;

/* INTERNAL PROCEDURES */

minus_suffix: proc (name, suffix) returns (char (*) var);

/* PARAMETERS */

	dcl     name		 char (*);
	dcl     suffix		 char (*);

/* AUTOMATIC */

	dcl     reverse_name	 char (length (name)) var;
	dcl     reverse_suffix	 char (length (suffix)) var;

/* BUILTINS */

	dcl     (after, index, length, reverse, rtrim) builtin;

	reverse_name = reverse (rtrim (name));
	reverse_suffix = reverse (rtrim (suffix));

	if index (reverse_name, reverse_suffix || ".") ^= 1
	then return (name);
	else return (reverse (after (reverse_name, reverse_suffix || ".")));

     end minus_suffix;

CLEAN_UP: proc ();

	if sci_ptr ^= null
	then call ssu_$destroy_invocation (sci_ptr);

	if recipients_info_ptr ^= null ()
	then do;
	     if delivery_results_need_cleanup then do;
		call mlsys_utils_$free_delivery_results (recipients_info_ptr, code1);
		if code1 ^= 0 then call xmail_error_$no_print (code1, NAME, CONTINUE, "While cleaning up delivery results.");
	     end;
	     free recipients_info in (send_area);
	     recipients_info_ptr = null ();
	end;

	return;
     end CLEAN_UP;

     end xmail_send_msg_;
