/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-02-27,Blair), approve(86-02-27,MCR7358),
     audit(86-04-18,RBarstad), install(86-05-28,MR12.0-1062):
     85-03-26 Joanne Backs: Modified to not put in the defaults for copies,
     lmargin and notify in auto_dprint_arg before printing.  These are now
     personalization options and will be filled in by xmail_print_$submit_file.
     
     85-04-02 Joanne Backs: Deleted call to ioa_ to display user message.  Added
     the call to xmail_print_ so messages when printing would be consistant.
     Also deleted calls to xmail_value_$get since they were only used in message
     and the values are already known in xmail_print_.
  2) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
     Updated to use latest version (9) of dprint_arg.
  3) change(88-07-07,Blair), approve(88-07-27,MCR7959),
     audit(88-08-25,RBarstad), install(88-09-02,MR12.2-1098):
     Check for e_t_$moderr on the print request in case user has no access to
     the print queue.  XServices error_list 139.
                                                   END HISTORY COMMENTS */


xmail_dprint_msgs_: proc (P_mailbox_ptr, P_curr_msgsp);

/* BEGIN DESCRIPTION

history:
   Author unknown.

   Modified 10/25/82 by Dave Schimke to use version 7 dprint_args. 
   
   83-07-05  DJ Schimke: Deleted dcls for unreferenced addr and
   xmail_err_$int_prog_err.

   83-09-15  DJ Schimke: Added the mailfile name to the output
   and to the temporary dprint segment. phx13056

   84-09-27  JG Backs: Modified to use version 8 dprint_args. 

   84-10-31  JG Backs: Added translate function to change spaces to
   underscores in the "mailbox_name" so the segment that is created 
   can be printed.  The call to iox_$attach_name will not accept the 
   spaces, although xmail does allow spaces in mailbox names.

END DESCRIPTION
*/

/* PARAMETERS */

	dcl     (P_mailbox_ptr, P_curr_msgsp) ptr;

/* AUTOMATIC */

	dcl     code		 fixed bin (35);
	dcl     dname		 char (168);
	dcl     ename		 char (32);
	dcl     iocb_ptr		 ptr;
	dcl     seg_ptr		 ptr;
	dcl     mailbox_name	 char (32);
	dcl     unused_return_bc	 fixed bin (35);

	dcl     1 auto_dprint_arg	 like dprint_arg;

/* BUILTINS */

	dcl     (addr, after, codeptr, length, null, reverse, rtrim, translate, substr, unspec, verify) builtin;

/* ENTRIES */

	dcl     adjust_bit_count_	 entry (char (168) aligned, char (32) aligned, bit (1) aligned, fixed bin (35), fixed bin (35));
          dcl     error_table_$moderr    fixed bin(35) ext static;
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     ioa_$ioa_switch	 entry () options (variable);
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     xmail_display_msgs_$ff entry (ptr, ptr, ptr);
	dcl     xmail_error_$code_first entry () options (variable);
	dcl     xmail_error_$no_code	 entry () options (variable);
	dcl     xmail_list_msgs_$selected entry (ptr, ptr, ptr);
	dcl     xmail_print_$create_seg entry (char (*), ptr, fixed bin (35));
	dcl     xmail_print_$delete_seg entry (ptr, fixed bin (35));
	dcl     xmail_print_$submit_seg entry (ptr, char (*), ptr, fixed bin (35));
	dcl     xmail_validate_$curr_msgs entry (ptr, fixed bin (35));
	dcl     xmail_validate_$mbx	 entry (ptr, fixed bin (35));

/* CONSTANTS */

	dcl     CONSONANTS		 char (32) static init ("BCDFGHJKLMNPQWXZbcdfghjklmnpqwxz") options (constant);
	dcl     LAST_CHAR		 bit (1) aligned init ("1"b) int static options (constant);
	dcl     ME_CHAR		 char (18) init ("xmail_dprint_msgs_") int static options (constant);
	dcl     ME_ENTRY		 entry options (variable) init (xmail_dprint_msgs_);
	dcl     UNUSED_BIT		 bit (1) aligned int static options (constant) init ("0"b);

/* EXTERNAL STATIC */

	dcl     (xmail_err_$no_curr_msgs,
	        xmail_err_$no_hardcopy) fixed bin (35) ext static;

/* CONDITIONS */

	dcl     cleanup		 condition;

/* INCLUDE FILES */

%include terminate_file;
%page;
%include iox_modes;
%page;
%include dprint_arg;
%page;
%include mlsys_mailbox;
%page;
%include mlsys_message;
%page;
%include xmail_curr_msg_info;
%page;
%include xmail_data;

/* BEGIN */

	iocb_ptr, seg_ptr = null;

	on condition (cleanup) begin;
		call close_detach_and_destroy (iocb_ptr);
		if seg_ptr ^= null then call xmail_print_$delete_seg (seg_ptr, (0)); /* ignore code */
	     end;

	call xmail_validate_$mbx (P_mailbox_ptr, code);
	if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Invalid mailbox structure.  This is an internal programming error.");

	if P_curr_msgsp = null
	then call xmail_error_$code_first (xmail_err_$no_curr_msgs, ME_CHAR, "i");
	else do;
	     call xmail_validate_$curr_msgs (P_curr_msgsp, code);
	     if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Invalid message structure. This is an internal programming error.");
	end;

	curr_msgsp = P_curr_msgsp;
	mailbox_ptr = P_mailbox_ptr;

	if mailbox.mailbox_type = USER_DEFAULT_MAILBOX |
	     mailbox.mailbox_type = OTHER_MAILBOX
	then mailbox_name = minus_suffix (mailbox.mailbox_ename, "mbx");
	else mailbox_name = minus_suffix (mailbox.mailbox_ename, "sv.mbx");

	if substr (mailbox_name, 1, 1) = "!"
	then if length (rtrim (mailbox_name)) = 15
	     then if verify (substr (mailbox_name, 2, 14), CONSONANTS) = 0
		then mailbox_name = "";

/* Translate mailbox_name so it does not have spaces - replace with
   underscores so it can be printed */

	if mailbox_name ^= ""
	then mailbox_name = translate (rtrim (mailbox_name), "_", " ");

	call xmail_print_$create_seg (mailbox_name, seg_ptr, code);
	if code = 0 then call terminate_file_ (seg_ptr, 0, TERM_FILE_TRUNC, code);
	if code = 0 then call hcs_$fs_get_path_name (seg_ptr, dname, (0), ename, code); /* ignore code */
	if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Unable to prepare file. This is an internal programming error.");

	call iox_$attach_name (unique_chars_ ("0"b), iocb_ptr, "vfile_ " || rtrim (dname) || ">" || (ename), codeptr (ME_ENTRY), code);
	if code = 0 then call iox_$open (iocb_ptr, Stream_output, UNUSED_BIT, code);
	if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Unable to prepare output switch to file. This is an internal programming error.");

	if mailbox_name ^= ""
	then call ioa_$ioa_switch (iocb_ptr, "Mailfile: ^a^/", mailbox_name);

	if curr_msgs.count > 1
	then do;
	     call xmail_list_msgs_$selected (mailbox_ptr, curr_msgsp, iocb_ptr);
	     call ioa_$ioa_switch (iocb_ptr, "^|");
	end;

	call xmail_display_msgs_$ff (mailbox_ptr, curr_msgsp, iocb_ptr);

	call adjust_bit_count_ ((dname), (ename), LAST_CHAR, unused_return_bc, code);
	if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Unable to adjust bit count of file. This is an internal programming error.");

	unspec (auto_dprint_arg) = "0"b;
	auto_dprint_arg.version = dprint_arg_version_9;
	auto_dprint_arg.delete = 1;
	auto_dprint_arg.carriage_control = "0"b;
	auto_dprint_arg.line_lth = -1;
	auto_dprint_arg.page_lth = -1;
	auto_dprint_arg.top_label = "";
	auto_dprint_arg.bottom_label = "";
	auto_dprint_arg.form_name = "";
	auto_dprint_arg.chan_stop_path = "";
	auto_dprint_arg.request_type = "printer";
	auto_dprint_arg.defer_until_process_termination = 0;
	auto_dprint_arg.bit_count = unused_return_bc;

	call xmail_print_$submit_seg (seg_ptr, "", addr (auto_dprint_arg), code);
	if code = xmail_err_$no_hardcopy
	then call xmail_error_$code_first (xmail_err_$no_hardcopy, ME_CHAR, "i", "Please specify this information via the ""Personalize Exec Mail"" menu.");
          else if code = error_table_$moderr 
	     then call xmail_error_$code_first (code, ME_CHAR, "q", "^/You do not have access to the requested print queue. ^/See your system administrator.");
	else if code ^= 0 then call xmail_error_$no_code (code, ME_CHAR, "q", "Unable to submit print request. This is internal programming error.");

	call close_detach_and_destroy (iocb_ptr);

	return;

/* INTERNAL PROCEDURES */

close_detach_and_destroy: proc (P_iocb_ptr);

	dcl     P_iocb_ptr		 ptr;

	if P_iocb_ptr ^= null
	then do;
	     call iox_$close (P_iocb_ptr, (0));		/* ignore code */
	     call iox_$detach_iocb (P_iocb_ptr, (0));	/* ignore code */
	     call iox_$destroy_iocb (P_iocb_ptr, (0));	/* ignore code */
	end;

     end close_detach_and_destroy;

minus_suffix: proc (name, suffix) returns (char (*) var);

/* Parameter */

	dcl     name		 char (*);
	dcl     suffix		 char (*);

/* Automatic */

	dcl     reverse_name	 char (length (name)) var;
	dcl     reverse_suffix	 char (length (suffix)) var;

	reverse_name = reverse (rtrim (name));
	reverse_suffix = reverse (rtrim (suffix));

	return (reverse (after (reverse_name, reverse_suffix || ".")));

     end minus_suffix;


    end xmail_dprint_msgs_;
