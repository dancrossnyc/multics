/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_rst_file_cleanup:
     procedure (rsc_ptr);

/* DESCRIPTION:

   This  routine  is  invoked  to supply default unblocked files for relations
   which  have  had  no files specified for them.  it produces dummy file list
   structures identical to the input to mrds_rst_file_handler that have a file
   name equal to the relation name, and then calls the file handler to put the
   file models in place.



   PARAMETERS:

   rsc_ptr - - (input) pointer to the common control segment

   global  lists  -  - (input) searched for relations without files since they
   contain all database entities during RMDB/CMDB

   parse  info  structures  - - (output) via calls to mrds_rst_file_handler to
   build the file model as default for the given relation



   HISTORY:

   78-10-01 Jim Gray : Originally written.
   
   81-09-16  Rickie  E.   Brinegar:  changed  the  assignment  of  gl.name  to
   file.name  to  be  done via a rtrim to remove the substring range condition
   from compile.

*/
%page;
/* get semantic structure pointers */

	directive_ptr = rsc.directive_ptr;

/* if trace is on call metering */

	if ^rsc.trace_sw then
	     ;
	else do;
		if directive.type = DEFINE then
		     directive_mesg = "DEFINE";
		else if directive.type = REDEFINE then
		     directive_mesg = "REDEFINE";
		else directive_mesg = "CMDB";
		call
		     mrds_rst_meter (rsc_ptr, "mrds_rst_file_cleanup", "1"b /* in */,
		     directive_mesg);
	     end;

/* check for relations with no referencing files,
   any found get default files of the same name
   as that of the given relation, using unblocked file attributes */

	if directive.type = REDEFINE then do;
		call
		     ioa_$rs ("^a ^a", message, message_length,
		     "The file cleanup handler will not implement the ""redefine""",
		     "directive until a later release.");
		call
		     mrds_rst_error (rsc_ptr, 2 /* severity */,
		     mrds_error_$rst_undone_option, (message));
	     end;
	else do;

/* initialize the successor function to get the first relation on the
   global list of relations in the database */

		root_ptr = rsc.h_grel_ptr;
		node_ptr = root_ptr;		/* convention for first on list */
		success = "1"b;			/* do at least one loop */

		do while (success);

		     call
			mrds_rst_tree_successor (root_ptr, node_ptr, successor_ptr,
			successor_parent_ptr, success);

		     if ^success then
			;			/* success off => no more in list */
		     else do;			/* next relation found */

			     node_ptr = successor_ptr;/* get pointer to next on list after last one */
			     gl_ptr = node_ptr -> node.data; /* get element portion from tree head */

			     if gl.superior_assigned then
				;		/* file present for this relation */
			     else do;		/* none found, set default file */

/* make believe we are the parser, and that we
   just found an file definition of "rel_name(rel_name) -unblocked" */

				     call mrds_rst_rsc_alloc (rsc_ptr, FILE, file_ptr);
				     file.name = rtrim (gl.name); /* set relation name as file's */
				     file.type = 1; /* default file type = unblocked */
				     file.ppb = 0;	/* zero out blocked file parameters */
				     file.hbh = 0;
				     file.block = 0;
				     file.num_items = 1; /* one relation in file */
				     file.default = "1"b; /* not from source definition */
				     file.unused = "0"b;
				     file.line_num = 0;

/* set file relation list to one relation with this relation name */

				     call mrds_rst_rsc_alloc (rsc_ptr, ITEM, item_ptr);
				     file.i_ptr = item_ptr; /* link to file header */
				     item.name = gl.name; /* set relation name */
				     item.next = null (); /* no more in list */
				     item.unused = "0"b;
				     item.line_num = 0; /* dummy number */


/* define the file just prepared */

				     call mrds_rst_file_handler (rsc_ptr, file_ptr);

				end;

			end;

		end;

	     end;

/* call trace if metering is on */

	if ^rsc.trace_sw then
	     ;
	else call
		mrds_rst_meter (rsc_ptr, "mrds_rst_file_cleanup", "0"b /* out */,
		directive_mesg);
%page;
	declare ioa_$rs		 entry options (variable); /* string manipulation routine */
	declare mrds_rst_rsc_alloc	 entry (ptr, fixed bin, ptr); /* work area manager */
	declare mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*));
						/* general error handler */
	declare message		 char (96) varying; /* specifics of error message */
	declare message_length	 fixed (21);	/* length of specifics message */
	declare mrds_error_$rst_undone_option fixed bin (35) external;
						/* unimplemented feature */
	declare directive_mesg	 char (8);	/* meter call message */
	declare mrds_rst_tree_successor entry (ptr, ptr, ptr, ptr, bit (1));
						/* get next on list routine */
	declare mrds_rst_file_handler	 entry (ptr, ptr);	/* file semantic routine */
	declare mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*));
						/* trace/meter routine */
	declare sys_info$max_seg_size	 fixed bin (35) external; /* system largest segment allowed */
	declare (fixed, addr, null, rel, rtrim) builtin;	/* functions known to pl1 */
%page;
%include mrds_rst_rsc;
%page;
%include mrds_rst_struct_types;
%page;
%include mrds_rst_global_lists;
%page;
%include mrds_rst_tree;
%page;
%include mrds_rst_parse_info;
%page;
%include mrds_rst_semantics;

     end;
