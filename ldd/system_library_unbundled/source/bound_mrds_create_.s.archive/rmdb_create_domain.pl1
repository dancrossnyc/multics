/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

/*DESCRIPTION
  This routine creates unreferenced domains in the db_model segment. The
  specified domains must not already exist. The crossreference is updated with
  the created domains.
/*

/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-24,Blair), install(86-10-16,MR12.0-1187):
     written
                                                   END HISTORY COMMENTS */

rmdb_create_domain:
     proc (Irmdb_ctl_ptr, Icreate_domain_info_ptr, Oerror_message, Ocode);

	rmdb_ctl_ptr = Irmdb_ctl_ptr;
	if rmdb_ctl.version ^= RMDB_CTL_VERSION_1
	then call error (error_table_$unimplemented_version,
		"Version " || ltrim (char (rmdb_ctl.version)) || " of rmdb_ctl structure.");

	create_domain_info_ptr = Icreate_domain_info_ptr;

	if create_domain_info.version ^= create_domain_info_version_1
	then call error (error_table_$unimplemented_version,
		"Version " || create_domain_info.version || " of create_domain_info structure.");

	if create_domain_info.count < 1
	then call error (error_table_$action_not_performed, "No domains to create.");

	dbm_ptr = rmdb_ctl.db_model_ptr;
	if rmdb_ctl.crossref_file_info.iocb_ptr = null
	then do;
	     call mdbm_util_$xref_build (rmdb_ctl.temp_dir_path, rmdb_ctl.absolute_db_path, dbm_ptr,
		rmdb_ctl.crossref_file_info.name, rmdb_ctl.crossref_file_info.iocb_ptr, error_message, code);
	     if code ^= 0
	     then call error (code, error_message);
	     end;
	local_iocb = rmdb_ctl.crossref_file_info.iocb_ptr;

/* Loop through all domains to be created to see if they already exist. */
	do loop = 1 to create_domain_info.count;
	     call mdbm_util_$xref_find_record (local_iocb, DOMAIN_KEY_HEAD, create_domain_info.name (loop), null, 0,
		error_message, code);
	     if code = 0
	     then call error (mrds_error_$domain_already_defined, create_domain_info.name (loop));
	     else if code ^= error_table_$no_record
		then call error (code, error_message);
	     end;					/* do loop */

/* Find the pointer to the last domain_info structure so we can add on the end
   of the linked list. */
	last_di_ptr = null;
	do di_ptr = ptr (dbm_ptr, db_model.domain_ptr) repeat ptr (dbm_ptr, domain_info.fwd_thread)
	     while (rel (di_ptr) ^= NULL_OFFSET);
	     last_di_ptr = di_ptr;
	     end;					/* do di_ptr */

/* Trap areas so we can return a intelligable error message. */
	on area call error (error_table_$area_too_small, "Creating domain_info in the db_model segment.");

/* Now go through and create each domain. */
	do loop = 1 to create_domain_info.count;
	     call create_a_domain (loop);
	     end;					/* do loop */

	call error (0, "");

RETURN_TO_CALLER:
	return;

error:
     proc (cd, msg);

dcl  cd fixed bin (35) parameter;
dcl  msg char (*) parameter;

	Ocode = cd;
	if cd = 0
	then Oerror_message = "";
	else Oerror_message = error_message;
	goto RETURN_TO_CALLER;
     end error;
%page;
create_a_domain:
     proc (idx);

dcl  idx fixed bin parameter;
dcl  new_changer_ptr ptr;
dcl  new_di_ptr ptr;
dcl  new_path_ptr (3) ptr;
dcl  quit_occured bit (1) aligned;

	quit_occured = "0"b;

	new_di_ptr, new_path_ptr (*), new_changer_ptr = null;
	on cleanup call cleaner;

	on quit quit_occured = "1"b;			/* BEGIN CRITICAL CODE */

	call mdbm_util_$inconsistent_set (dbm_ptr, "create_attribute",
	     "Creating attribute " || create_domain_info.name (idx),
	     "delete_domain -force -inhibit_error " || create_domain_info.name (idx));

/* Create the new domain_info structure and populate it */
	allocate domain_info in (db_model.dbm_area) set (new_di_ptr);
	unspec (new_di_ptr -> domain_info) = "0"b;
	new_di_ptr -> domain_info.name = create_domain_info.name (idx);
	new_di_ptr -> domain_info.unreferenced = "1"b;

	new_di_ptr -> domain_info.db_desc = create_domain_info.descriptor (idx);
	new_di_ptr -> domain_info.user_desc = create_domain_info.decode_declare_data_descriptor (idx);
	if new_di_ptr -> domain_info.user_desc = "0"b
	then new_di_ptr -> domain_info.user_desc = new_di_ptr -> domain_info.db_desc;

	new_di_ptr -> domain_info.fwd_thread = NULL_OFFSET;

	call set_path (new_di_ptr -> domain_info.check_path_ptr, create_domain_info.check_proc_path (idx), 1);
	call set_path (new_di_ptr -> domain_info.encd_path_ptr, create_domain_info.encode_proc_path (idx), 2);
	call set_path (new_di_ptr -> domain_info.decd_path_ptr, create_domain_info.decode_proc_path (idx), 3);

	new_di_ptr -> domain_info.ck_stack_ptr = NULL_OFFSET;
	new_di_ptr -> domain_info.str_before_path_ptr = NULL_OFFSET;
	new_di_ptr -> domain_info.str_err_path_ptr = NULL_OFFSET;
	new_di_ptr -> domain_info.str_after_path_ptr = NULL_OFFSET;
	new_di_ptr -> domain_info.get_before_path_ptr = NULL_OFFSET;
	new_di_ptr -> domain_info.get_err_path_ptr = NULL_OFFSET;
	new_di_ptr -> domain_info.get_after_path_ptr = NULL_OFFSET;
	new_di_ptr -> domain_info.mod_before_path_ptr = NULL_OFFSET;
	new_di_ptr -> domain_info.mod_err_path_ptr = NULL_OFFSET;
	new_di_ptr -> domain_info.mod_after_path_ptr = NULL_OFFSET;
	new_di_ptr -> domain_info.unused_1 = NULL_OFFSET;
	new_di_ptr -> domain_info.unused_2 = NULL_OFFSET;

/* Create the changer structure and populate it. */
	allocate changer in (db_model.dbm_area) set (new_changer_ptr);
	new_changer_ptr -> changer.id = get_group_id_ ();
	new_changer_ptr -> changer.time = clock ();
	new_changer_ptr -> changer.next = NULL_OFFSET;

	new_di_ptr -> domain_info.changer_ptr = rel (new_changer_ptr);

/* Add the new domain to the crossreference file */
	call mdbm_util_$xref_create_record (local_iocb, DOMAIN_KEY_HEAD, create_domain_info.name (idx),
	     rel (new_di_ptr), error_message, code);
	if code ^= 0
	then do;
	     call cleaner;
	     call error (code, error_message);
	     end;

/* Add a new attribute record to the crossreference file, as all domains have
   an attribute with the same name be default. */
	call mdbm_util_$xref_create_record (local_iocb, ATTRIBUTE_KEY_HEAD, create_domain_info.name (idx),
	     rel (new_di_ptr), error_message, code);
	if code ^= 0
	then do;
	     call cleaner;
	     call error (code, error_message);
	     end;

/* Now we mark the created domain record as referenced by the attribute with
   the same name */
	call mdbm_util_$xref_reference (local_iocb, DOMAIN_KEY_HEAD, create_domain_info.name (idx),
	     create_domain_info.name (idx), null, (0), error_message, code);
	if code ^= 0
	then do;
	     call cleaner;
	     call error (code, error_message);
	     end;

/* Add the new domain_info to the end of the linked list. */
	if last_di_ptr = null
	then db_model.domain_ptr = rel (new_di_ptr);
	else last_di_ptr -> domain_info.fwd_thread = rel (new_di_ptr);
	last_di_ptr = new_di_ptr;

	db_model.num_domains = db_model.num_domains + 1;

	call rmdb_add_rmdb_history (dbm_ptr, RMDB_DOMAIN_TYPE, create_domain_info.name (idx), RMDB_ADD_DMN_OP, "",
	     error_message, code);
	if code ^= 0
	then call error (code, error_message);

	call mdbm_util_$inconsistent_reset (dbm_ptr);

	revert quit;				/* END CRITICAL CODE */
	if quit_occured
	then signal quit;

	return;
%page;
cleaner:
     proc;

dcl  based_item fixed bin (35) based;
dcl  p ptr;

/* Free all the created structures in db_model segment */
	do p = new_changer_ptr, new_di_ptr, new_path_ptr (1), new_path_ptr (2), new_path_ptr (3);
	     if p ^= null
	     then free p -> based_item;
	     end;

	call mdbm_util_$xref_destroy (rmdb_ctl.crossref_file_info.iocb_ptr, rmdb_ctl.temp_dir_path,
	     rmdb_ctl.crossref_file_info.name, (""), (0));

	call mdbm_util_$inconsistent_reset (dbm_ptr);

	return;
     end cleaner;

set_path:
     proc (sp_offset, sp_path, sp_idx);

dcl  sp_dir char (168);
dcl  sp_dollar_index fixed bin;
dcl  sp_entry char (32);
dcl  sp_idx fixed bin parameter;
dcl  sp_name char (32);
dcl  sp_offset bit (18) unaligned parameter;
dcl  sp_path char (*) parameter;

	if sp_path = ""
	then do;
	     sp_offset = NULL_OFFSET;
	     new_path_ptr (idx) = null;
	     end;
	else do;
	     sp_dollar_index = index (sp_path, "$");
	     if sp_dollar_index ^= 0
	     then do;
		sp_entry = substr (sp_path, sp_dollar_index + 1);
		substr (sp_path, sp_dollar_index) = "";
		end;
	     else sp_entry = "";
	     call expand_pathname_ (sp_path, sp_dir, sp_name, code);
	     if code ^= 0
	     then call error (code, sp_path);

	     allocate path_entry in (db_model.dbm_area) set (new_path_ptr (idx));
	     new_path_ptr (idx) -> path_entry.path = pathname_ (sp_dir, sp_name);
	     if sp_entry = ""
	     then new_path_ptr (idx) -> path_entry.entry = sp_name;
	     else new_path_ptr (idx) -> path_entry.entry = sp_entry;

	     new_path_ptr (idx) -> path_entry.reserved = "0"b;
	     sp_offset = rel (new_path_ptr (idx));
	     end;

	return;
     end set_path;

     end create_a_domain;
%page;
%include mdbm_db_model;
%page;
%include rmdb_create_domain_info;
%include rmdb_crossref_info;
%include rmdb_history_entry;
%include mrds_rmdb_ctl;
%page;
dcl  addr builtin;
dcl  area condition;
dcl  char builtin;
dcl  cleanup condition;
dcl  clock builtin;
dcl  code fixed bin (35);
dcl  error_message char (500);
dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  error_table_$area_too_small fixed bin (35) ext static;
dcl  error_table_$no_record fixed bin (35) ext static;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  fixed builtin;
dcl  get_group_id_ entry () returns (char (32));
dcl  Icreate_domain_info_ptr ptr parameter;
dcl  index builtin;
dcl  Irmdb_ctl_ptr ptr parameter;
dcl  last_di_ptr ptr;
dcl  local_iocb ptr;
dcl  loop fixed bin (17);
dcl  ltrim builtin;
dcl  mdbm_util_$inconsistent_reset entry (ptr);
dcl  mdbm_util_$inconsistent_set entry (ptr, char (*), char (*), char (*));
dcl  mdbm_util_$xref_build entry (char (*), char (*), ptr, char (*), ptr, char (*), fixed bin (35));
dcl  mdbm_util_$xref_create_record entry (ptr, char (*), char (*), bit (18), char (*), fixed bin (35));
dcl  mdbm_util_$xref_destroy entry (ptr, char (*), char (*), char (*), fixed bin (35));
dcl  mdbm_util_$xref_find_record entry (ptr, char (*), char (*), ptr, fixed bin (21), char (*), fixed bin (35));
dcl  mdbm_util_$xref_reference entry (ptr, char (*), char (*), char (*), ptr, fixed bin (21), char (*), fixed bin (35));
dcl  mrds_error_$domain_already_defined fixed bin (35) ext static;
dcl  null builtin;
dcl  NULL_OFFSET bit (18) unaligned int static options (constant) init ((18)"1"b);
dcl  Ocode fixed bin (35) parameter;
dcl  Oerror_message char (*) parameter;
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  ptr builtin;
dcl  quit condition;
dcl  rel builtin;
dcl  rmdb_add_rmdb_history entry (ptr, fixed bin, char (32), fixed bin, char (32), char (500), fixed bin (35));
dcl  substr builtin;
dcl  sys_info$max_seg_size fixed bin (35) ext static;
dcl  unspec builtin;

     end rmdb_create_domain;
