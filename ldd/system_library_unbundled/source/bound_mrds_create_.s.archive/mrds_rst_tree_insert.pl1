/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_rst_tree_insert: procedure (key, rsc_ptr, root_ptr, node_ptr, success);


/* HISTORY:

   originally written by jim gray - - july 1978

*/

/* DESCRIPTION:
   Threaded binary tree insertion routine
   Given a pointer to the root of the desired list, a search is made
   for the key.
   If the key is found, the insertion fails to
   avoid duplicating keys.
   A successful insertion returns a pointer to
   the new tree node */

/* PARAMETERS:

   key - - (input) word to be inserted as key in new node

   rsc_ptr - - (input) pointer to common working storage

   root_ptr - - (input/output) pointer to root node of tree,
   will be modified on empty tree insert

   node_ptr - - (output) pointer to the node just inserted

   success - - (output) bit value indicating good insertion(on)
   or failure due to key duplication attempt(off)

*/
%page;

/* get pointer to inorder parent in tree */

	call mrds_rst_tree_search (key, root_ptr, node_ptr, parent_ptr, success);

/*  A search success(key was found) means a duplication
   of keys is being attempted, return failure */

	if success then success = "0"b;

/* Normal insertion, get a new list element, and fill in the blanks */

	else do;
		success = "1"b;

		call mrds_rst_rsc_alloc (rsc_ptr, NODE, node_ptr);
		node_ptr -> node.key = key;
		node_ptr -> node.right.thread = "1"b;
		node_ptr -> node.left.thread = "1"b;
		node_ptr -> node.data = null ();
		node_ptr -> node.pad = "0"b;

/* Add the new element to the tree.
   Change the head pointer if empty tree */

		if root_ptr ^= null () then ;
		else do;

/* no dummy node for tree head, get new node for it,
   then make its right link a pointer to itself, and
   make it's left link a thread to itself thus indicating
   that the tree is empty */

			call mrds_rst_rsc_alloc (rsc_ptr, NODE, root_ptr);

			root_ptr -> node.right.link = root_ptr;
			root_ptr -> node.right.thread = "0"b;

			root_ptr -> node.left.link = root_ptr;
			root_ptr -> node.left.thread = "1"b;

			root_ptr -> node.data = null ();
			root_ptr -> node.pad = "0"b;

		     end;

/* dummy head node for tree exists for all cases now, but tree may still
   be empty(dummy node left link = thread), if so then force the
   dummy node to be a right parent of the new data node
   this is done by making the dummy node pointer serve as the
   new node parent and setting the dummy node key equal to
   the new node key so the test for descendent direction
   will cause a left insert to take place */

		if ^root_ptr -> node.left.thread then ;
		else do;
			parent_ptr = root_ptr;
			root_ptr -> node.key = key;
		     end;

/* good parent within tree, determine if node is right
   or left descendent.   right descendents have a left thread
   to their direct parent, and a right thread
   to their inorder successor. left descendents have a right
   thread to their direct parent, and a left thread
   to their inorder predecessor */

		if key > parent_ptr -> node.key then do;

			node_ptr -> node.right.link = parent_ptr -> node.right.link;
			node_ptr -> node.left.link = parent_ptr;

			parent_ptr -> node.right.link = node_ptr;
			parent_ptr -> node.right.thread = "0"b;

		     end;

		else do;

			node_ptr -> node.left.link = parent_ptr -> node.left.link;
			node_ptr -> node.right.link = parent_ptr;

			parent_ptr -> node.left.link = node_ptr;
			parent_ptr -> node.left.thread = "0"b;

		     end;


	     end;
%page;

	dcl     null		 builtin;
	dcl     mrds_rst_tree_search	 entry (char (32) aligned, ptr, ptr, ptr, bit (1)); /* binary tree search */
	dcl     mrds_rst_rsc_alloc	 entry (ptr, fixed bin, ptr); /* working area manager */
%page;
%include mrds_rst_tree;
%page;
%include mrds_rst_rsc;
%page;
%include mrds_rst_struct_types;


     end;

