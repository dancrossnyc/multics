/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   originally written by jim gray - - February 1979

   82-05-11 Roger Lackey : Changed the way model_seg_path_dir and
   model_seg_path_entry were deterimded form model_seg_path by replacing
   old  code (which could get a stringsize condition)
   with a call to expand_pathname_

   83-02-17 Davids: explicitly declared variables that were declared by
   context or implication and deleted declarations to variables that were
   not referenced.
*/

mrds_rst_model_alloc: procedure (rsc_ptr, model_seg_path, struct_type, struct_ptr);

/*
   .                        BEGIN_DESCRIPTION
   this routine handles all allocations and freeing of structures to be
   placed in the database model for a MRDS database, this includes either
   the db_model segment, or one of the file_model segments.
   there are a total of three entries, the normal entry is for allocation
   of fixed length structures, the $variable entry is for allocation of
   structures that are of variable length, based on one paramater,
   and the $free entry is used to free a given allocation of a particular
   structure type.
   .                        END_DESCRIPTION
*/

/* PARAMETERS:

   normal entry ===
   rsc_ptr - - (input) pointer to the common control segment "rsc"

   model_seg_path - - (input) the absolute pathname of the segment in which
   the allocation is to take place, thus the pathname of either
   the db_model, or one of the file_models

   struct_type - - (input) fixed binary number that indicates which structure
   is to be allocated. the include file mrds_rst_struct_types
   gives the constants that are used for that purpose.

   struct_ptr - - (output) pointer to the newly allocated structure of the type given by struct_type.
   it will be null, if the model area overflowed - the user must check for this.

   $variable entry ===
   struct_size - - (input) a fixed binary (35) number, in addition to those above,
   that gives the length for the current allocation of this structure type,
   that has a variable length based on one parameter.

   $free entry ===
   same as the normal entry, except struct_ptr is an input parameter,
   and it points to the allocation instance to be freed.
*/

/* establish on unit to capture model overflow */

	on area
	     begin;
		struct_ptr = null ();		/* to tell caller we failed */
		goto return_label;
	     end;

/* normal allocation entry point */

	FREE = OFF;
	goto common;


/* freeing entry point */

mrds_rst_model_alloc$free: entry (rsc_ptr, model_seg_path, struct_type, struct_ptr);

	FREE = ON;

/* determine if we are freeing a variable length allocation */

	if struct_type <= hbound (case, 1) then
	     goto common;
	else goto var_common;


common:

	if ^rsc.trace_sw then ;
	else call trace (ON);			/* input call */

	call decode_model_seg_path ();

/* check that the encoding for structure type is within the legal range */

	if struct_type < lbound (case, 1) | struct_type > hbound (case, 1) then
	     call bad_struct_type ();

	else do;

/* good structure type code, go to the allocate that it indicates for the
   given structure to be allocated, and the area in which it will reside */

		goto case (struct_type);


/* db_model area structures */

case (0):

		if FREE then ;			/* can't free till not head of segment */
		else do;
			call hcs_$make_seg (model_seg_path_dir, model_seg_path_entry, "",
			     01010b /* rw mode */, struct_ptr, error_code);
			if error_code = 0 then ;
			else call unable_to_make_segment ();
		     end;
		goto return_label;

case (1):

		if FREE then
		     free struct_ptr -> file_info in (db_model_area);
		else allocate file_info set (struct_ptr) in (db_model_area);
		goto return_label;

case (2):

		if FREE then
		     free struct_ptr -> domain_info in (db_model_area);
		else allocate domain_info set (struct_ptr) in (db_model_area);
		goto return_label;

case (3):

		if FREE then
		     free struct_ptr -> path_entry in (db_model_area);
		else allocate path_entry set (struct_ptr) in (db_model_area);
		goto return_label;

case (4):

		if FREE then
		     free struct_ptr -> stack_item in (db_model_area);
		else allocate stack_item set (struct_ptr) in (db_model_area);
		goto return_label;

case (5):

		if FREE then
		     free struct_ptr -> version_status in (db_model_area);
		else allocate version_status set (struct_ptr) in (db_model_area);
		goto return_label;

case (6):

		if FREE then
		     free struct_ptr -> changer in (db_model_area);
		else allocate changer set (struct_ptr) in (db_model_area);
		goto return_label;

/* file_model  area structures */

case (7):

		if FREE then ;			/* can't free til not segment head */
		else do;
			call hcs_$make_seg (model_seg_path_dir, model_seg_path_entry, "", 01010b /* rw mode */,
			     struct_ptr, error_code);
			if error_code = 0 then ;
			else call unable_to_make_segment ();
		     end;
		goto return_label;

case (8):

		if FREE then
		     free struct_ptr -> rel_info in (file_model_area);
		else allocate rel_info set (struct_ptr) in (file_model_area);
		goto return_label;

case (9):

		if FREE then
		     free struct_ptr -> attr_info in (file_model_area);
		else allocate attr_info set (struct_ptr) in (file_model_area);
		goto return_label;

case (10):

		if FREE then
		     free struct_ptr -> parent_link_info in (file_model_area);
		else allocate parent_link_info set (struct_ptr) in (file_model_area);
		goto return_label;

case (11):

		if FREE then
		     free struct_ptr -> child_link_info in (file_model_area);
		else allocate child_link_info set (struct_ptr) in (file_model_area);
		goto return_label;

case (12):

		if FREE then
		     free struct_ptr -> attr_list in (file_model_area);
		else allocate attr_list set (struct_ptr) in (file_model_area);
		goto return_label;

case (13):

		if FREE then
		     free struct_ptr -> sort_key in (file_model_area);
		else allocate sort_key set (struct_ptr) in (file_model_area);
		goto return_label;

case (14):

		if FREE then
		     free struct_ptr -> dup_prev in (file_model_area);
		else allocate dup_prev set (struct_ptr) in (file_model_area);
		goto return_label;

case (15):

		if FREE then
		     free struct_ptr -> select_chain in (file_model_area);
		else allocate select_chain set (struct_ptr) in (file_model_area);
		goto return_label;


	     end;

mrds_rst_model_alloc$variable: entry (rsc_ptr, model_seg_path, struct_type, struct_size, struct_ptr);

/* entry to handle structures whose length is variable */

	FREE = OFF;

var_common:

	if ^rsc.trace_sw then ;
	else call trace (ON);			/* input call */

/* establish on unit to capture model overflow */

	on area
	     begin;
		struct_ptr = null ();		/* to tell caller we failed */
		goto return_label;
	     end;

	call decode_model_seg_path ();

	if struct_type < lbound (var_case, 1) | struct_type > hbound (var_case, 1) then
	     call bad_struct_type ();
	else if struct_size < 1 then
	     call bad_struct_size ();

	else do;

/* good encoding and size given, go allocate the given structure
   with the specified size, and place it according to the area policy */

		goto var_case (struct_type);

var_case (30):

		if FREE then
		     free struct_ptr -> constant in (db_model_area);
		else do;
			alloc_length = struct_size;
			allocate constant set (struct_ptr) in (db_model_area);
		     end;
		goto return_label;

var_case (31):

		if FREE then
		     free struct_ptr -> atd in (file_model_area);
		else do;
			atd_len = struct_size;
			allocate atd set (struct_ptr) in (file_model_area);
		     end;
		goto return_label;

var_case (32):

		if FREE then
		     free struct_ptr -> comp_no_array in (file_model_area);
		else do;
			ncomp_init = struct_size;
			allocate comp_no_array set (struct_ptr) in (file_model_area);
		     end;
		goto return_label;

	     end;

return_label:

	if ^rsc.trace_sw then ;
	else call trace (OFF);			/* output call */


	return;

decode_model_seg_path: procedure ();

/* get the pointer, directory, and entry for either the
   file_model or db_model, depending on the model segment path input */

	call expand_pathname_ (model_seg_path, model_seg_path_dir, model_seg_path_entry, error_code);
	if error_code ^= 0 then
	     call mrds_rst_error (rsc_ptr, 4, error_code,
		"Bad pathname: " || model_seg_path);


	else do;
		seg_ptr = cv_ptr_ (model_seg_path, error_code);

/* code ^= 0, if seg not created yet for db or file_model */

		if error_code ^= 0 then do;
			dbm_ptr = null ();
			fm_ptr = null ();
		     end;
		else do;
			if model_seg_path_entry = "db_model" then do;
				dbm_ptr = seg_ptr;
				fm_ptr = null ();
			     end;
			else do;
				fm_ptr = seg_ptr;
				dbm_ptr = null ();
			     end;
		     end;


	     end;

     end;

bad_struct_type: procedure ();

/* error routine for bad structure encoding value */

	call ioa_$rs ("^a ^d ^a", message, message_length,
	     "LOGIC ERROR in mrds_rst_model_alloc,", struct_type,
	     "is an invalid code for structure type.");
	call mrds_rst_error (rsc_ptr, 4 /* severity */, mrds_error_$rst_logic_error, (message));

     end;

bad_struct_size: procedure ();

/* report bad strructure allocation length */

	call ioa_$rs ("^a ^d ^a", message, message_length,
	     "LOGIC ERROR in mrds_rst_model_alloc,", struct_size,
	     "is an illegal structure allocation size.");
	call mrds_rst_error (rsc_ptr, 4 /* severity */, mrds_error_$rst_logic_error, (message));

     end;

unable_to_make_segment: procedure ();

/* report trouble in making a model segment */

	call ioa_$rs ("^a^a^a^a^a", message, message_length,
	     "Unable to make the model segment with directory """,
	     model_seg_path_dir, """ and entry portion """,
	     model_seg_path_entry, """ in the database model.");
	call mrds_rst_error (rsc_ptr, 4 /* severity */, error_code, (message));

     end;

trace: procedure (in_out);

/* common to metering routine */

	struct_type_picture = struct_type;
	call mrds_rst_meter (rsc_ptr, "mrds_rst_model_alloc", in_out, (struct_type_picture));


	declare in_out		 bit (1);		/* on => input, off => output call */
	declare struct_type_picture	 picture "99";	/* character version of encoding */

     end;

	declare cv_ptr_		 entry (char (*), fixed bin (35)) returns (ptr); /* gets segments pointer from path */
	declare seg_ptr		 ptr;		/* temp store for segment pointer */
	declare mrds_error_$rst_logic_error fixed bin (35) external; /* program error */
	declare error_code		 fixed bin (35);	/* 0 => no error, else coded error */
	declare model_seg_path_dir	 char (168);	/* directory portion of pathname */
	declare model_seg_path_entry	 char (32);	/* entry portion of pathname */
	declare sys_info$max_seg_size	 fixed bin (35) external; /* system segment length */
	declare (lbound, hbound, addr, fixed, rel, null) builtin;
	declare mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*)); /* trace routine */
	declare ioa_$rs		 entry options (variable); /* string manipulator */
	declare message		 char (96) varying; /* specifics of error */
	declare message_length	 fixed bin (21);	/* length of returned message */
	declare area		 condition;	/* will occur if model space used up */
	declare mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*)); /* common error routine */
	declare FREE		 bit (1);		/* on => free, off => allocate */
	declare struct_ptr		 ptr;		/* pointer to allocated structure, or instance tobe freed */
	declare struct_type		 fixed bin;	/* encoding value for this structure to allocate or free */
	declare struct_size		 fixed bin (35);	/* length to allocate for variable size struc tures */
	declare model_seg_path	 char (*);	/* pathname of segment to allocate in */
	declare ON		 bit (1) internal static options (constant) init ("1"b); /* true value */
	declare OFF		 bit (1) internal static options (constant) init ("0"b); /* false value */
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	declare hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)); /* creates segments */
	declare file_model_area	 area based (addr (file_model.fm_area));
	declare db_model_area	 area based (addr (db_model.dbm_area));

%include mrds_rst_struct_types;
%include mdbm_file_model;
%include mdbm_db_model;
%include mrds_rst_rsc;

     end;
