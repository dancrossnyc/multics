/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_rst_get_seg_ptr: proc (rsc_ptr, head_of_list_ptr, seg_name, create_sw, seg_ptr, code);

/* This procedure searches the specified list in rsc for for the segment name
   If the create_sw is ON and the
   segment name was not found in the specified list the segment name is
   added to the list and the segment created.
   If the create_sw is ON and the segment name was found in the list the seg_ptr returned
   is null and code = mrds_error_$rst_list_duplicate.

   if create_sw = OFF then the bit count is adjusted on the segment and the segment is inititated if possible.

   The segment pointer and code are returned by this procedure.
*/


/*  	HISTORY
   Initially written by Roger D.Lackey Sept, 78
   Modified by R. D. Lackey January 16, 1979 to add adjust_bit_count

   81-01-31 Jim Gray : added call to set needed access for DBA types,
   if access violation occurred. also changed to only make call
   to adjust_bit_count and/or initiate, if the seg ptr or bit count unknown
   in order to improve performance.

   82-07-02 R. Harvey : changed reference of dmd$set_needed_access to
   dmd_$set_needed_access
*/



/*	PARAMETERS	*/

/* dcl rsc_ptr  pointer; 				/* (INPUT) Pointer to rsc (restructuring control) segment */
	dcl     head_of_list_ptr	 ptr;		/* (INPUT) Pointer to head of list to be searched */
	dcl     seg_name		 char (32) aligned; /* (INPUT) Name of segment we are searching for */
	dcl     create_sw		 bit (1);		/* (INPUT) On => create segment */
	dcl     seg_ptr		 ptr;		/* (OUTPUT) Pointer to segment (may be null) */
	dcl     code		 fixed bin (35);	/* (OUTPUT) Error code */

Start:

	call mrds_rst_list_element$add (seg_name, SEG_INFO, rsc_ptr, head_of_list_ptr, seg_info_ptr, code);

	if code = 0 | code = mrds_error_$rst_list_duplicate then do;

		if code = 0 then do;		/* Entry was added to list */

			seg_info.name = seg_name;	/* Init seg info stuff */
			if head_of_list_ptr = rsc.h_n_seg_info_ls_ptr then
			     seg_info.dir = rsc.temp_dir;
			else seg_info.dir = rsc.dbp;
			seg_info.seg_ptr = null;
			seg_info.bcnt = 0;

		     end;

		if create_sw then do;		/* create_sw = ON the want to create a seg */

			if code = 0 then do;	/* Entry was added to the list */

				call hcs_$make_seg (seg_info.dir, seg_info.name, "", 10, seg_info.seg_ptr, code);
				seg_ptr = seg_info.seg_ptr;

			     end;
		     end;

/* BEGIN CHANGE 81-01-31 ***************************************************** */

		else do;				/* Create_sw = OFF */

			if ^(seg_info.seg_ptr = null () | seg_info.bcnt = 0) then do; /* already set */
				code = 0;
				seg_ptr = seg_info.seg_ptr;
			     end;
			else do;

				call adjust_bit_count_ (seg_info.dir, seg_info.name, "1"b, bit_count, code);
				if code = error_table_$moderr then do;
					call dmd_$set_needed_access
					     (seg_info.dir, code); /* fails if caller not DBA */
					if code ^= 0 then
					     code = error_table_$moderr;
					else call adjust_bit_count_ (seg_info.dir, seg_info.name, "1"b, bit_count, code);

				     end;

				if code = 0 then
				     call hcs_$initiate_count (seg_info.dir, seg_info.name, "",
					seg_info.bcnt, 0, seg_info.seg_ptr, code);
				seg_ptr = seg_info.seg_ptr;
			     end;

/* END CHANGE 81-01-31 ****************************************************** */

		     end;


	     end;

	else seg_ptr = null;			/* Something was wrong */


exit:	return;

/*	OTHERS	*/

	dcl     bit_count		 fixed bin (35);	/* For adjust bit count */
	dcl     adjust_bit_count_	 entry (char (168), char (32), bit (1) aligned, fixed bin (35), fixed bin (35));
	dcl     hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     mrds_rst_list_element$add entry (char (32) aligned, fixed bin, ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_error_$rst_list_duplicate ext fixed bin (35);
	dcl     sys_info$max_seg_size	 ext fixed bin (35);
	dcl     (addr, fixed, null, rel) builtin;
	declare error_table_$moderr	 fixed bin (35) ext;/* incorrect access */
	declare dmd_$set_needed_access entry (char (*), fixed bin (35)); /* sets access for DBA types */

%include mrds_rst_rsc;

%include mrds_rst_global_lists;

%include mrds_rst_tree;


     end mrds_rst_get_seg_ptr;
