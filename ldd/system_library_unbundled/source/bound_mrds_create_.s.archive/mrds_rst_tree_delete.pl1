/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_rst_tree_delete: procedure (key, rsc_ptr, root_ptr, data_ptr, success);

/* HISTORY:

   originally written by jim gray - - july 1978

*/

/* DESCRIPTION:
   threaded binary tree deletion routine
   A search is made for the key in the tree
   specified by the root pointer.
   If the key is not found,
   the deletion fails.
   Otherwise the tree node area is unlinked
   from the tree, and the space freed */

/* PARAMETERS:

   key - - (input) word in tree indicating node to be deleted

   rsc_ptr - - (input) pointer to common working storage

   root_ptr - - (input/output) pointer to root node of desired tree,
   may be changed if key is at root node

   data_ptr - - (output) pointer extracted from data field of deleted node

   success - - (output) bit value indicating deletion done(on),
   or attempt to delete node not in tree(off)     */

/* basic algorithm

   simple case - delete node has no right subtree
   make delete node's left subtree the new descendent of delete node's parent

   complex case - delete node has a right subtree
   subcase 1 - delete node's successor is direct descendent
   replace delete node with successor, giving it the
   delete node's left subtree
   subcase 2 - delete node's successor is not a direct descendent
   same as subcase 1 but additionally
   successor's parent get's successors right subtree as it's left subtree
   and successor's right subtree becomes that of the delete node's */


/* get pointer to node to be deleted and to it's parent */

	call mrds_rst_tree_search (key, root_ptr, node_ptr, parent_ptr, success);

/* if node to be deleted is not found, deletion fails */

	if ^success then ;

	else do;

/* node found, save data pointer, and rearrange tree links to eliminate the node */

		data_ptr = node_ptr -> node.data;
		thread = "0"b;

/* fix predecessor thread

   since we are replacing the delete node with it's successor(if it has one),
   the delete node's predecessor must have its's right thread
   point to this new node(the delete node's successor) */

		if node_ptr -> node.right.thread then ;
		else call mrds_rst_tree_successor (root_ptr, node_ptr, successor_ptr, successor_parent_ptr, success);
		if node_ptr -> node.left.thread then ;
		else do;
			call mrds_rst_tree_predecessor (root_ptr, node_ptr, predecessor_ptr, predecessor_parent_ptr, success);
			if node_ptr -> node.right.thread then
			     predecessor_ptr -> node.right.link = node_ptr -> node.right.link;
			else do;
				predecessor_ptr -> node.right.link = successor_ptr;
			     end;
		     end;

/* if simple case of no inorder successor(right link a thread)
   then use the left subtree of delete node as his parent's new descendent,
   when the left link of the delete node is not a thread,
   else a left thread means that the parent link will become a thread.
   the left thread of the delete node may be used as this thread unless it points
   to the parent, in which case the right thread must be used. */

		if node_ptr -> node.right.thread then
		     if ^node_ptr -> node.left.thread then
			successor_ptr = node_ptr -> node.left.link;
		     else do;
			     thread = "1"b;
			     if parent_ptr ^= node_ptr -> node.left.link then
				successor_ptr = node_ptr -> node.left.link;
			     else successor_ptr = node_ptr -> node.right.link;
			end;

		else do;

/* complex case - delete node has a successor
   give the successor node a new left subtree(previously a thread)
   that is the current delete node's left subtree
   this is the first step in moving the successor node
   into the delete node's place in the tree */

			successor_ptr -> node.left.link = node_ptr -> node.left.link;
			successor_ptr -> node.left.thread = node_ptr -> node.left.thread;

/* for direct descendent successor, ignore right subtrees */

			if node_ptr = successor_parent_ptr then ;
			else do;

/* for successor not a direct descendent, the successor's new right subtree
   will be that of the delete node's.   The successor's old right subtree becomes
   the left subtree of the successor's old parent */

/* fix successor's parent's threads for case of delete node's right link not a thread,
   and successor is not direct descendent of delete node,

   successor node's right link a thread means that the successor node's
   parent's left link must become a thread to the successor node since the successor node
   is being made the predecessor of the successor node's parent.
   also the successor's right thread must be changed to pointer
   since it will link to delete node's right subtree(known to be nonempty).

   successor node's right link not a thread means that the successor's
   parent node's left link will be a pointer set equal to the successor
   node's right link. (the successor parent gets as his left, the successor's rught subtree) */

				if successor_ptr -> node.right.thread then do;
					successor_parent_ptr -> node.left.thread = "1"b;
					successor_ptr -> node.right.thread = "0"b;
				     end;
				else successor_parent_ptr -> node.left.link = successor_ptr -> node.right.link;
				successor_ptr -> node.right.link = node_ptr -> node.right.link;

			     end;

		     end;

/* for all cases, change parent of delete node to point to it's new successor.
   determine which branch of delete node parent to change.
   the link from the parent will be a thread only if
   the delete node's links were both threads */

		if node_ptr = parent_ptr -> node.left.link then do;
			parent_ptr -> node.left.link = successor_ptr;
			parent_ptr -> node.left.thread = thread;
		     end;

		else do;
			parent_ptr -> node.right.link = successor_ptr;
			parent_ptr -> node.right.thread = thread;
		     end;


/* release deleted nodes space */

		call mrds_rst_rsc_alloc$free (rsc_ptr, NODE, node_ptr);
		success = "1"b;

	     end;




	declare mrds_rst_tree_search	 entry (char (32) aligned, ptr, ptr, ptr, bit (1)); /* binary tree search */
	declare mrds_rst_rsc_alloc$free entry (ptr, fixed bin, ptr); /* working area manager */
	declare mrds_rst_tree_successor entry (ptr, ptr, ptr, ptr, bit (1));
	declare mrds_rst_tree_predecessor entry (ptr, ptr, ptr, ptr, bit (1));


%include mrds_rst_tree;
%include mrds_rst_rsc;
%include mrds_rst_struct_types;



     end;
