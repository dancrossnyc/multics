/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

restructure_mrds_db: rmdb: proc;



/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     initialize added ctl_info fields, change hardcoded path to
     mrds_data_$rmdb_info_directory. Add -force/-no_force and -relation_type
     control arguments.
                                                   END HISTORY COMMENTS */


/*
   .		       BEGIN_DESCRIPTION
   This command is used  to  enter  the  restructure_mrds_db  (rmdb)
   subsystem.  It  sets  up a subsystem environment as determined by
   control arguments  and  then  enters  the  subsystem  by  calling
   ssu_$listen.
   .		       END_DESCRIPTION

   Known Bugs:

   Other Problems:

   .		       HISTORY
   82-03-09 Davids: Written

   82-04-27 Davids: to  create  a  new  directory  under  the  user
   .                supplied  temp dir or the pdir and use that new
   .                dir as the temp dir. This allows cleanups to be
   .                very simple, safe and complete  -  just  delete
   .                the created temp dir.

   82-05-03 Davids: modified so that the request ready_db is called
   .                via ssu_$execute_string if a database  path  is
   .                supplied on the rmdb command line.

   82-06-01 Davids: modified so that abbrev is off by default

   82-06-07 Davids: modified so that negative quiesce_wait_times are
   .                handled correctly as are times larger than those
   .                that can fit in a fixed bin variable  (>131071).
   .                Also so that -profile imples -abbrev and so that

   .                if a wait time is supplied but a  database  path
   .                is not an error is reported.

   82-06-09 Harvey: modified so that iteration  will always  be done 
   .		by ssu_.

   82-06-22 Davids: removed	some   declared  by  never  referenced
   .                variables, declared  some  variables  that  were
   .                being  implicitly declared and changed some line
   .                formats to prevent wrap-arround.

   82-07-15 Davids: modified   so   that  the  prompt_string  is  not
   .                assigned from the arg if the arg is  longer  than
   .                the  prompt  string.  instead it is assign from a 
   .                substr. This prevents a stringsize condition.

   82-10-19 Harvey: modified to allow db path to  be anywhere on  the
   .		rmdb command line without the -pn argument.

   83-05-24 Davids: Modified call to rmdb_free_db in the internal proc
   clean_up to include the rmdb_control.saved_res_version_ptr argument

   83-10-04 Benjamin: Added call to ssu_$add_request_table.

   84-09-10 Thanh Nguyen: Modified call ssu_requests_$standard_requests
   to ssu_request_tables_$standard_requests.

   84-10-23 Paul Benjamin: Changed to only call free_db if rmdb readied it to
   begin with.  Added call to ssu_$add_info_dir.

   85-01-23 Paul Benjamin: Fixed the bug where the temp_dir always has ring
   brackets of 4,4.  Now uses (V,V) where V = validation level.
*/

/* COMMAND ARGUMENTS (based) */

	dcl     arg		 char (arg_len) based (arg_ptr);

/* EXTERNAL STATIC */

	dcl     error_table_$bad_arg	 fixed bin (35) external static;
	dcl     error_table_$badcall	 fixed bin (35) external static;
	dcl     error_table_$bad_conversion fixed bin (35) external static;
	dcl     error_table_$bigarg	 fixed bin (35) external static;
	dcl     error_table_$inconsistent fixed bin (35) ext static;
	dcl     error_table_$noarg	 fixed bin (35) external static;
	dcl     error_table_$not_act_fnc fixed bin (35) external static;
	dcl     iox_$user_input	 ptr external static;
	dcl     mrds_data_$rmdb_info_directory char (168) ext static;
	dcl     rmdb_rq_tb_$rmdb_rq_tb_ fixed bin (35) external static;
	dcl     ssu_et_$subsystem_aborted fixed bin (35) external static;
	dcl     ssu_info_directories_$standard_requests char (168) external;
	dcl     ssu_request_tables_$standard_requests bit (36) aligned external static;
	dcl     sys_info$max_seg_size	 fixed bin (35) external static;

/* ENTRIES */

	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
	dcl     active_fnc_err_	 entry options (variable);
	dcl     com_err_		 entry () options (variable);
	dcl     cu_$af_arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$level_get	 entry (fixed bin);
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	dcl     delete_$path	 entry (char (*), char (*), bit (6), char (*), fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     get_group_id_	 entry () returns (char (32));
	dcl     get_pdir_		 entry () returns (char (168));
	dcl     hcs_$append_branchx	 entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1),
				 fixed bin (1), fixed bin (24), fixed bin (35));
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1),
				 fixed bin (2), ptr, fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     mdbm_util_$cleanup_temp_dir entry (char (*), fixed bin (35));
	dcl     mdbm_util_$xref_destroy entry (ptr, char (*), char (*), char (*), fixed bin (35));
	dcl     rmdb_free_db	 entry (char (168), ptr, char (500), fixed bin (35));
	dcl     ssu_$add_info_dir	 entry (ptr, char (*), fixed bin, fixed bin (35));
	dcl     ssu_$add_request_table entry (ptr, ptr, fixed bin, fixed bin (35));
	dcl     ssu_$create_invocation entry (char (*), char (*), ptr, ptr, char (*), ptr, fixed bin (35));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     ssu_$execute_line	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     ssu_$execute_string	 entry (ptr, char (*), fixed bin (35));
	dcl     ssu_$listen		 entry (ptr, ptr, fixed bin (35));
          dcl     ssu_$print_blast       entry (ptr, ptr, fixed bin, char(*) var, fixed bin(35));
	dcl     ssu_$print_message	 entry options (variable);
	dcl     ssu_$set_abbrev_info	 entry (ptr, ptr, ptr, bit (1) aligned);
	dcl     ssu_$set_prompt	 entry (ptr, char (64) varying);
	dcl     ssu_$set_prompt_mode	 entry (ptr, bit (*));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));

/* CONDITIONS */

	dcl     cleanup		 condition;
	dcl     size		 condition;

/* INTERNAL AUTOMATIC */

	dcl     abbrev_processing	 bit (1);		/* true if abbrev processing is to be done */
	dcl     abbrev_profile_dname	 char (168);	/* directory name of profile to use for abbrev processing */
	dcl     abbrev_profile_ename	 char (32);	/* entry name of profile to use for abbrev processing */
	dcl     abbrev_profile_expected bit (1);	/* true if profile path expected as the next argument */
	dcl     abbrev_profile_path	 char (168);	/* profile path argument */
	dcl     abbrev_profile_ptr	 ptr;		/* pointer to abbrev profile */
	dcl     abbrev_profile_supplied bit (1);	/* true if profile path supplied */
	dcl     arg_len		 fixed bin (21);	/* length of an argument */
	dcl     arg_ptr		 ptr;		/* pointer to an argument */
	dcl     code		 fixed bin (35);	/* standard error code */
	dcl     db_path		 char (168);	/* database path supplied as an argument */
	dcl     db_path_expected	 bit (1);		/* true if a database path is expected as the next argument */
	dcl     db_path_supplied	 bit (1);		/* true if a database path is supllied as an argument */
	dcl     error_message	 char (500);	/* error message returned from rmdb_ready_db and rmdb_free_db */
	dcl     force_sw		 bit (1) aligned;	/* if create the db without the query */
	dcl     i			 fixed bin;	/* loop index */
	dcl     nargs		 fixed bin;	/* number of arguments the command was called with */
	dcl     prompt_string	 char (64) varying; /* prompt string argument supplied by the caller */
	dcl     prompt_string_expected bit (1);		/* true if a prompt string is expected as the next argument */
	dcl     prompt_string_supplied bit (1);		/* true if a prompt string has been supplied as an argument */
	dcl     prompting		 bit (1);		/* true if prompting is to be done */
	dcl     quiesce_wait_time	 fixed bin;	/* how many seconds the caller will wait
						   to try to quiesce the database, supplied as an argument */
	dcl     quiesce_wait_time_expected bit (1);	/* true if a wait time is expected as the next argument */
	dcl     quiesce_wait_time_supplied bit (1);	/* true if a wait time has been supplied as an argument */
	dcl     ready_request_string	 char (512) varying;/* string passed to ready_db request */
	dcl     relation_type	 char (32);
	dcl     relation_type_expected bit (1) aligned;	/* true if a relation type is expected as the next argument */
	dcl     relation_type_supplied bit (1) aligned;	/* true if a relation type has been supplied as an argument */
	dcl     relation_modes	 char (256);
	dcl     request_string_expected bit (1);	/* true if a request sring is expected as the next argument */
	dcl     request_string_len	 fixed bin (21);	/* length of the request string */
	dcl     request_string_ptr	 ptr;		/* pointer to the requerst string */
	dcl     request_string_supplied bit (1);	/* true if a request string has been supplied */
	dcl     ring_array		 (3) fixed bin (3); /* ring brackets for the tem_dir_sub_dir_name dir */
	dcl     sci_ptr		 ptr;		/* subsystem control info pointer */
	dcl     temp_dir_abs_path	 char (168);	/* absoutute path to the user supplied temp dir or the pdir */
	dcl     temp_dir_path	 char (168);	/* temp dir path - needed if process dir does not have enough
						   quota to set up working space for very large databases */
	dcl     temp_dir_path_expected bit (1);		/* true if a temp dir path is expected as the next argument */
	dcl     temp_dir_path_supplied bit (1);		/* true if a temp dir path has been supplied as an argument */
	dcl     temp_dir_sub_dir_name	 char (32);	/* name of the dir created under the temp_dir_abs_path which
						   will house all the temp segments */
	dcl     validation_level	 fixed bin;	/* the user's current validation level */
	dcl     01 rmdb_control	 like rmdb_ctl;	/* automatic copy of the rmdb_ctl structure */

/* CONSTANTS */

          dcl     BLAST_MESSAGE          char (72) varying init (
"Type ""help rmdb"" to review new features in restructure_mrds_db.");
	dcl     LAST_IN_SEQUENCE	 fixed bin internal static options (constant) init (9999);
						/* passed to ssu to put standard_requests stuff last */
	dcl     MAX_PROMPT_STRING_LEN	 fixed bin internal static options (constant) init (64);
						/* maximum length of the prompt string */
	dcl     OFF		 bit (1) internal static options (constant) init ("0"b);
	dcl     ON		 bit (1) internal static options (constant) init ("1"b);
	dcl     PROC_NAME		 char (4) internal static options (constant) init ("rmdb");
						/* use the shorter of the two names to keep messages short */

/* BUILTINS */

	dcl     addr		 builtin;
	dcl     char		 builtin;
	dcl     empty		 builtin;
	dcl     index		 builtin;
	dcl     null		 builtin;
	dcl     rtrim		 builtin;
	dcl     substr		 builtin;
	dcl     verify		 builtin;

/* BASED */

	dcl     work_area		 area (sys_info$max_seg_size) based (rmdb_control.work_area_ptr);

/* INCLUDE FILES */
%page;
%include access_mode_values;
%page;
%include mrds_rmdb_ctl;
%page;
%include ssu_prompt_modes;

/*
   Determine the number of arguments that this  command  was  called
   with,  it  may  be called with any number. Also determine if this
   command was called as a command or an active function. An  active
   function  call  is  an  error, it should be reported and then the
   system exited. Since nothing has been done no cleanup is needed.
*/



	call cu_$af_arg_count (nargs, code);
	if code ^= error_table_$not_act_fnc
	then do;
		if code = 0
		then call active_fnc_err_ (error_table_$badcall, PROC_NAME,
			"^/This command cannot be called as an active function");
		else call com_err_ (code, PROC_NAME,
			"^/An error occured while trying to determine the number of arguments");
		goto exit_rmdb;
	     end;







/*
   Assign initial values.
*/

	rmdb_control.version = RMDB_CTL_VERSION_1;	/* set the version of rmdb_ctl structure */
	rmdb_control.rmdb_version = "2.0";		/* the version of the subsystem */
	rmdb_control.absolute_db_path = "";		/* no path is known yet */
	rmdb_control.temp_dir_path = "";		/* no temp_dir path is known */
	rmdb_control.work_area_ptr = null;		/* no work area has been set up yet */
	rmdb_control.db_model_ptr = null;		/* since the path is not known there is no pointer */
						/* the relmgr_entries will be set in rmdb_ready_db */
						/* and will not be used until after they are set */
	rmdb_control.crossref_file_info.iocb_ptr = null;	/* iocb to keyed vfile containing th db crossreference */
	rmdb_control.crossref_file_info.name = "";	/* entryname of crossreference file */

	db_path_supplied = OFF;			/* flags indicating what information */
	prompt_string_supplied = OFF;			/* the user supplied */
	abbrev_profile_supplied = OFF;
	request_string_supplied = OFF;
	relation_type_supplied = OFF;
	quiesce_wait_time_supplied = OFF;
	temp_dir_path_supplied = OFF;

	prompting = ON;				/* states that by default are on for the subsystem */

	abbrev_processing = OFF;			/* states that are off */

	db_path_expected = OFF;			/* No user arguments are expected yet */
	prompt_string_expected = OFF;
	abbrev_profile_expected = OFF;
	request_string_expected = OFF;
	relation_type_expected = OFF;
	force_sw = OFF;
	quiesce_wait_time_expected = OFF;
	temp_dir_path_expected = OFF;

	relation_modes = "";
	sci_ptr = null ();

/*
   loop through all the user supplied arguments 1 at a time. Control
   arguments  expecting  an argument set a flag indicating that that
   argument is next, this is so that the call to cu_$arg_ptr and its
   error  handling  occurs  in  only  1 place. The first argument is
   special cased in that if it is  not  a  control  argument  it  is
   assumed to be the database path. There are 3 kinds of arguments:

   .   arguments that control the state of the subsystem,  i.e.
   .      prompting on or off
   .   arguments that set values to modify the subsystem,  i.e.
   .      set a new prompting string. these may also change the
   .      state of the subsystem, i.e.  setting  a  new  prompt
   .      string also turns prompting on
   .   arguments that are the new values, i.e. "new prompt:"

   Arguments may occur in any order and may be over ruled  by  later
   arguments,  i.e.  the  profile  path  associated  with  the  last
   -profile control  argument  will  be  the  profile  used  by  the
   subsystem.
*/



	do i = 1 to nargs;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, PROC_NAME, "Could not get argument ^i", i);
		     goto exit_rmdb;
		end;

	     if i = 1 & index (arg, "-") ^= 1
	     then db_path_expected = ON;

	     if db_path_expected | prompt_string_expected | abbrev_profile_expected |
		request_string_expected | quiesce_wait_time_expected | temp_dir_path_expected |
		relation_type_expected
	     then do;				/* arguments for the control arguments */
		     if index (arg, "-") = 1 & ^(verify (arg, "-0123456789.") = 0 & quiesce_wait_time_expected)
						/* if a control argument is expecting an argument and */
						/* another control argument appears it should be reported */
						/* as an error, negative numbers for a wait time should */
						/* not be confused as a control argument */
		     then call report_missing_args;	/* expected flags are global */
		     else
			if db_path_expected
		     then do;
			     db_path_expected = OFF;
			     db_path_supplied = ON;
			     db_path = arg;
			end;
		     else
			if prompt_string_expected
		     then do;
			     prompt_string_expected = OFF;
			     prompt_string_supplied = ON;
			     if arg_len <= MAX_PROMPT_STRING_LEN
			     then prompt_string = arg;
			     else do;
				     prompt_string = substr (arg, 1, MAX_PROMPT_STRING_LEN);
				     call com_err_ (error_table_$bigarg, PROC_NAME,
					"Prompt string ^a is longer than the maximum allowed length of ^i"
					|| "^/Prompt will be truncated to ^a^/",
					arg, MAX_PROMPT_STRING_LEN, prompt_string);
				end;
			end;
		     else
			if abbrev_profile_expected
		     then do;
			     abbrev_profile_expected = OFF;
			     abbrev_profile_supplied = ON;
			     abbrev_profile_path = arg;
			end;
		     else
			if relation_type_expected
		     then do;
			     relation_type_expected = OFF;
			     relation_type_supplied = ON;
			     relation_type = arg;
			     if i = nargs
			     then relation_modes = "";
			     else do;
				     call cu_$arg_ptr (i+1, arg_ptr, arg_len, code);
				     if index (arg, "-") ^= 1
				     then do;
					     relation_modes = arg;
					     i = i + 1;
					end;
				end;
			end;
		     else
			if request_string_expected
		     then do;
			     request_string_expected = OFF;
			     request_string_supplied = ON;
			     request_string_ptr = arg_ptr;
			     request_string_len = arg_len;
			end;
		     else
			if quiesce_wait_time_expected
		     then do;
			     quiesce_wait_time_expected = OFF;
			     quiesce_wait_time_supplied = ON;
			     on size begin;
				     call com_err_ (error_table_$bad_conversion, PROC_NAME,
					"^/The size of the quiesce wait time ^a " ||
					"is larger than the maximum of 131071.", arg);
				     goto exit_rmdb;
				end;
(size):			     quiesce_wait_time = cv_dec_check_ (arg, code);
			     revert size;
			     if code ^= 0
			     then do;
				     call com_err_ (error_table_$bad_conversion, PROC_NAME,
					"Could not convert ^a into an integer representing the quiesce wait-time",
					arg);
				     goto exit_rmdb;
				end;
			     if quiesce_wait_time < 0
			     then do;
				     call com_err_ (error_table_$bad_conversion, PROC_NAME,
					"^/The quiesce wait time ^a is negative, wait times must be >= 0.", arg);
				     goto exit_rmdb;
				end;
			end;
		     else
			if temp_dir_path_expected
		     then do;
			     temp_dir_path_expected = OFF;
			     temp_dir_path_supplied = ON;
			     temp_dir_path = arg;
			end;
		end;
						/* control arguments which expect arguments */
	     else
		if arg = "-prompt" | arg = "-pmt"
	     then do;
		     prompt_string_expected = ON;
		     prompting = ON;		/* for this case it also sets a state */
		end;
	     else
		if arg = "-profile" | arg = "-pf"
	     then do;
		     abbrev_profile_expected = ON;
		     abbrev_processing = ON;		/* for this case it also sets a state */
		end;
	     else
		if arg = "-pathname" | arg = "-pn"
	     then db_path_expected = ON;
	     else
		if arg = "-request" | arg = "-rq"
	     then request_string_expected = ON;
	     else
		if arg = "-quiesce_wait_time" | arg = "-qwt"
	     then quiesce_wait_time_expected = ON;
	     else
		if arg = "-temp_dir" | arg = "-td"
	     then temp_dir_path_expected = ON;
						/* control arguments which set states */
	     else
		if arg = "-no_prompt" | arg = "-npmt"
	     then prompting = OFF;
	     else
		if arg = "-force" | arg = "-fc"
	     then force_sw = ON;
	     else
		if arg = "-no_force" | arg = "-nfc"
	     then force_sw = OFF;
	     else
		if arg = "-relation_type" | arg = "-rt"
	     then relation_type_expected = ON;
	     else
		if arg = "-abbrev" | arg = "-ab"
	     then abbrev_processing = ON;
	     else
		if arg = "-no_abbrev" | arg = "-nab"
	     then abbrev_processing = OFF;
	     else
		if index (arg, "-") ^= 1		/* database path */
	     then do;
		     db_path_supplied = ON;
		     db_path = arg;
		end;
						/* unknown control argument */
	     else do;
		     call com_err_ (error_table_$bad_arg, PROC_NAME, "Argument ^i (^a) is unrecognized", i, arg);
		     goto exit_rmdb;
		end;
	end;




/*
   Once all the arguments have been processed a check must  be  made
   to  be  sure  that  all  control  argument  arguments  have  been
   supplied. Note that in general it is not necessary for a database
   path to have been supplied unless the -path control arg was used.
   If report_missing_args returns then no arguments were missing and
   everything is ok. If an argument is  missing  report_missing_args
   will report it and goto exit_rmdb.
*/


	call report_missing_args;			/* expected flags are global */

/*
   If a quiesce_wait_time was supplied but  a  database  path  was  not
   supplied  it  will be considered as an inconsistent set of arguments
   and an error will be reported.
*/

	if quiesce_wait_time_supplied & ^db_path_supplied
	then do;
		call com_err_ (error_table_$inconsistent, PROC_NAME,
		     "^/A wait time can be supplied only if a database to be readied is also supplied");
		goto exit_rmdb;
	     end;

/*
   Creates a temporary directory in the user supplied temporary  dir
   or pdir if the user did not supply a temporary dir. This makes it
   easy  to  cleanup  after  the invocation - just delete the entire
   temp dir.

   Creates a temporary segment in the new temporary dir to  be  used
   as a work area for the rmdb requests.

   The  system routine get_temp_segment has not been used because it
   always creates the segments in the  pdir  and  the  mrds  routine
   mu_temp_segments  has  not  been used because it requires an open
   data base.

   Note that from this point on any errors  which  will  cause  this
   command  to  return  to  the  user  will  have  to first call the
   clean_up procedure. Likewise a cleanup condition handler must  be
   established incase it is signaled after this point.
*/



	on cleanup call clean_up;

	if ^temp_dir_path_supplied
	then temp_dir_abs_path = get_pdir_ ();
	else do;
		call absolute_pathname_ (temp_dir_path, temp_dir_abs_path, code);
		if code ^= 0
		then do;
			call com_err_ (code, PROC_NAME,
			     "^/Could not determine the absolute path of the given temp_dir path (^a)", temp_dir_path);
			goto cleanup_and_exit_rmdb;
		     end;
	     end;

	temp_dir_sub_dir_name = unique_chars_ (OFF) || ".rmdb";
	call cu_$level_get (validation_level);
	ring_array (*) = validation_level;
	call hcs_$append_branchx (temp_dir_abs_path, temp_dir_sub_dir_name, SMA_ACCESS_BIN,
	     ring_array, get_group_id_ (), 1, 0, 0, code);
	if code ^= 0
	then do;
		call com_err_ (code, PROC_NAME,
		     "^/Could not create the temp dir ^a>^a, in the temporary directory ^a",
		     temp_dir_abs_path, temp_dir_sub_dir_name, temp_dir_abs_path);
		goto cleanup_and_exit_rmdb;
	     end;

	rmdb_control.temp_dir_path = rtrim (temp_dir_abs_path) || ">" || temp_dir_sub_dir_name;

	call hcs_$make_seg (rmdb_control.temp_dir_path, unique_chars_ ("0"b) || ".rmdb", "",
	     RW_ACCESS_BIN, rmdb_control.work_area_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, PROC_NAME, "^/Could not make a scratch segment in the dir ^a", temp_dir_abs_path);
		goto cleanup_and_exit_rmdb;
	     end;

	work_area = empty ();

/*
   Create  the  subsystem  invocation.
*/



	call ssu_$create_invocation (PROC_NAME, (rmdb_control.rmdb_version), addr (rmdb_control),
	     addr (rmdb_rq_tb_$rmdb_rq_tb_), mrds_data_$rmdb_info_directory, sci_ptr, code);
	if code ^= 0
	then do;
		call com_err_ (code, PROC_NAME, "Could not invoke the rmdb subsystem");
		goto cleanup_and_exit_rmdb;
	     end;


/* Add the standard request table supplied by ssu_, to get things like do, if,
   answer, exec_com, etc. */

	call ssu_$add_request_table (sci_ptr, addr (ssu_request_tables_$standard_requests), LAST_IN_SEQUENCE, code);

	if code ^= 0
	then goto cleanup_and_exit_rmdb;

/* And the info segs for 'em */

	call ssu_$add_info_dir (sci_ptr, ssu_info_directories_$standard_requests, LAST_IN_SEQUENCE, code);

	if code ^= 0
	then goto cleanup_and_exit_rmdb;

/*
   If a database path has been supplied then the  database  must  be
   readied for restructuring.

   The request level routine rmdb_rq_ready_db is called  (via  ssu_)
   instead  of  the  subroutine  level  rmdb_ready_db  because  the
   subroutine level does not know about ssu_ and there  exists  the
   possiblility  that  ready  will  have to call an rmdb request in
   order to make an inconsistent db consistent.

   If the caller did not supply a maximum amount of time to wait for
   the data base to be quiesced a default wait time of 10 seconds is
   used.
*/



	if db_path_supplied
	then do;
	          ready_request_string = "ready_db " || rtrim (db_path);

		if quiesce_wait_time_supplied
		then ready_request_string = ready_request_string || " -quiesce_wait_time " || rtrim (char (quiesce_wait_time));

		if relation_type_supplied
		then ready_request_string = ready_request_string || " -relation_type " || rtrim (relation_type) || " " || rtrim (relation_modes);

		if force_sw
		then ready_request_string = ready_request_string || " -force";

		call ssu_$execute_string (sci_ptr, (ready_request_string), code);
		if code ^= 0
		then goto cleanup_and_exit_rmdb;
	     end;

/*
   abbrev processing is off by default. ssu will interpret a null
   abbrev_profile_ptr  to  mean  that  the user's default profile
   should be used. If a profile path is specified a pointer to it
   is obtained to pass to ssu.
*/



	if abbrev_processing
	then do;
		abbrev_profile_ptr = null ();
		if abbrev_profile_supplied
		then do;
			call expand_pathname_$add_suffix (abbrev_profile_path, "profile",
			     abbrev_profile_dname, abbrev_profile_ename, code);
			if code ^= 0
			then do;
				call com_err_ (code, PROC_NAME, "Could not expand the profile path ^a",
				     abbrev_profile_path);
				goto cleanup_and_exit_rmdb;
			     end;
			call hcs_$initiate (abbrev_profile_dname, abbrev_profile_ename, "",
			     0, 0, abbrev_profile_ptr, code);
			if abbrev_profile_ptr = null ()
			then do;
				call com_err_ (code, PROC_NAME, "Could not initiate the profile at ^a>^a",
				     abbrev_profile_dname, abbrev_profile_ename);
				goto cleanup_and_exit_rmdb;
			     end;
		     end;
		call ssu_$set_abbrev_info (sci_ptr, abbrev_profile_ptr, null (), "1"b);
	     end;


/*
   If the user supplies a prompt string than this string is given to
   ssu,  normally  ssu will use the subsystem name. Note that seting
   the prompt string and having prompts are  independent.  The  user
   may  set  a  prompt  string  and  turn prompts off (perhaps to be
   turned on later).
*/
/* Set up and execute print_blast. */

	call ssu_$print_blast (sci_ptr, codeptr (rmdb), 3, BLAST_MESSAGE, code);


	if prompt_string_supplied
	then call ssu_$set_prompt (sci_ptr, prompt_string);

	if ^prompting
	then call ssu_$set_prompt_mode (sci_ptr, DONT_PROMPT);


/*
   If the user supplied a request string it is executed  here.  Note
   that  most  errors  during  the  execution of the request are not
   considered as fatal errors for the whole subsystem. The error  is
   merely  reported.  The  exception  is the subsystem_aborted error
   which does cause the subsystem to  be  aborted  and  is  probably
   caused by a quit in the request string.
*/



	if request_string_supplied
	then do;
		call ssu_$execute_line (sci_ptr, request_string_ptr, request_string_len, code);
		if code = ssu_et_$subsystem_aborted
		then goto cleanup_and_exit_rmdb;
		else if code ^= 0
		then call ssu_$print_message (sci_ptr, code);
	     end;

/*
   the call to ssu_$listen essentially puts the  user  at  subsystem
   request level. If listen returns with the subsystem aborted error
   it means that either the user requested to  quit  or  some  other
   subsystem  error  occured  which  was  reported  by the subsystem
   before it returned. If  some  other  error  occured  it  must  be
   reported.

   Regardless of how listen returns the command must clean itself up
   before returning to the caller.
*/


	call ssu_$listen (sci_ptr, iox_$user_input, code);
	if code ^= ssu_et_$subsystem_aborted
	then call com_err_ (code, PROC_NAME, "Subsystem aborted abnormally");









cleanup_and_exit_rmdb:
	call clean_up;

exit_rmdb:
	return;

report_missing_args: proc;

/*
   If any of the expected flags is set it indicates that an argument
   to a control arg has not been supplied. Report  the  omission  to
   the  caller and exit the command. If this procedure does a return
   it means that no arguments were missing.
*/

/* GLOBAL

   db_path_expected					true if the next argument should be a database path
   prompt_string_expected				true if the next argument should be a prompt string
   abbrev_profile_expected				true if the next argument should be a profile path
   relation_type_expected				true if the next argument should be a relation type
   request_string_expected				true if the next argument should be a request string
   quiesce_wait_time_expected				true if the next argument should be a wait time
   temp_dir_path_expected				true if the next argument should be a temp dir path */


	if db_path_expected
	then do;
		call com_err_ (error_table_$noarg, PROC_NAME,
		     "The -pathname (-pn) control arg was given but no pathname was supplied");
		goto exit_rmdb;
	     end;

	if prompt_string_expected
	then do;
		call com_err_ (error_table_$noarg, PROC_NAME,
		     "The -prompt (-pmt) control arg was given but no prompt was supplied");
		goto exit_rmdb;
	     end;

	if abbrev_profile_expected
	then do;
		call com_err_ (error_table_$noarg, PROC_NAME,
		     "The -profile (-pf) control arg was given but no profile was supplied");
		goto exit_rmdb;
	     end;

	if request_string_expected
	then do;
		call com_err_ (error_table_$noarg, PROC_NAME,
		     "The -request (-rq) control arg was given but no request string was supplied");
		goto exit_rmdb;
	     end;

	if quiesce_wait_time_expected
	then do;
		call com_err_ (error_table_$noarg, PROC_NAME,
		     "The -quiesce_wait_time (-qwt) control arg was given but no wait time was supplied");
		goto exit_rmdb;
	     end;

	if temp_dir_path_expected
	then do;
		call com_err_ (error_table_$noarg, PROC_NAME,
		     "The -temp_dir (-td) control arg was given but no temp dir path was supplied");
		goto exit_rmdb;
	     end;

	if relation_type_expected
	then do;
	          call com_err_ (error_table_$noarg, PROC_NAME,
		     "The -relation_type (-rt) control arg was given but no relation types was supplied");
		goto exit_rmdb;
	     end;

	return;

     end report_missing_args;

clean_up: proc;

/*
   To exit this command the rmdb subsystem must be destroyed  if  it
   has been invoked, the readied database must be freed and the temp
   dir  that was created under the users temp dir (or the pdir) must
   be deleted.
*/

/* GLOBAL

   code						standard error code
   PROC_NAME		                              the name of this command
   rmdb_control					control info structure
   sci_ptr					subsystem control info pointer */

/* AUTOMATIC */

	dcl     temp_dir_dir	 char (168);	/* path to either the pdir or the user supplied temp dir */
	dcl     temp_dir_name	 char (32);	/* name of the rmdb created temp dir undet temp_dir_dir */





	if sci_ptr ^= null ()
	then call ssu_$destroy_invocation (sci_ptr);

	if rmdb_control.absolute_db_path ^= "" /* this is set only if a data base has been readied */
	     & rmdb_control.flags.database_readied_by_rmdb/* only free it if we readied it */
	then do;
		call rmdb_free_db (rmdb_control.absolute_db_path, rmdb_control.saved_res_version_ptr, error_message, code);
		if code ^= 0
		then call com_err_ (code, PROC_NAME, error_message);
	     end;

	if rmdb_control.crossref_file_info.iocb_ptr ^= null
	then call mdbm_util_$xref_destroy (rmdb_control.crossref_file_info.iocb_ptr,
	     rmdb_control.temp_dir_path, rmdb_control.crossref_file_info.name, (""), (0));

	if rmdb_control.temp_dir_path ^= ""
	then do;
		call expand_pathname_ (rmdb_control.temp_dir_path, temp_dir_dir, temp_dir_name, code);
		if code ^= 0
		then call com_err_ (code, PROC_NAME, "^/Could not expand the temp_dir path.");
		else do;
		     	call mdbm_util_$cleanup_temp_dir (rmdb_control.temp_dir_path, (0));
			call delete_$path (temp_dir_dir, temp_dir_name, "101000"b, "rmdb", code);
			if code ^= 0
			then call com_err_ (code, PROC_NAME, "^/Could not delete the temporary directory ^a",
				rmdb_control.temp_dir_path);
		     end;
	     end;

	return;

     end clean_up;

     end restructure_mrds_db;
