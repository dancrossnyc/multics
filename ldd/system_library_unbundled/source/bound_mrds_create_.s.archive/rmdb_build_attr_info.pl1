/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


rmdb_build_attr_info: proc (I_dbm_ptr, I_adi_ptr, I_fm_ptr, I_di_ptr, O_err_msg, O_err_code);

/* .		        BEGIN_DESCRIPTION

   The purpose of this procedure is to add the attr_info for the attribute
   defined in I_adi_ptr -> attr_def_info.   The definition order of the
   attributes will be the order in which they are supplied to this procedure.
   The necessary rel_info structure elements are also updated.

   .		         END_DESCRIPTION
*/



/* HISTORY:
   82-04-13 Originally written by R. Lackey.

   82-06-25 Roger Lackey : Added the divide builting and the
   constants VARYING_CHAR_TYPE = 22 and VARYING_BIT_TYPE = 20

   82-07-02 R. Harvey : changed mu_data_length reference to
	     mdbm_util_$mu_data_length

   83-01-10 R. Harvey : changed so the attribute index_id is set to
	     all zeroes and the max_attr_index_id field is set beyond
	     the maximum for pre-relation manager MRDS.
*/

/*      PARAMETERS      */

	dcl     I_dbm_ptr		 ptr parameter;	/* Pointer to the db_model */
	dcl     I_adi_ptr		 ptr parameter;	/* Pointer to attr_def_info */
	dcl     I_fm_ptr		 ptr parameter;	/* Pointer to file_model */
	dcl     I_di_ptr		 ptr parameter;	/* Pointer to domain_info */
	dcl     O_err_msg		 char (*) parameter;/* Error message text */
	dcl     O_err_code		 fixed bin (35) parameter; /* Error code */

%page;
/* rmdb_build_attr_info: proc (I_dbm_ptr, I_adi_ptr, I_fm_ptr, I_di_ptr, O_err_msg, O_err_code); */

	dbm_ptr = I_dbm_ptr;			/* Pointer to db_model */
	adi_ptr = I_adi_ptr;			/* Pointer to atr_def_info */
	fm_ptr = I_fm_ptr;				/* Pointer to file_model */
	di_ptr = I_di_ptr;				/* pointer to domain_info for this attribute */
	O_err_msg = "";
	O_err_code = 0;

	ri_ptr = ptr (fm_ptr, file_model.rel_ptr);	/* Pointer to rel_info */

/* Find end of attr_info list and check for dup attr_names
   count the attributes to determine attr order number.
   count key attributes. */

	prev_ptr = null;

	key_attribute_count = 0;

	do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr) /* Loop thru all attibutes getting the attr_name */
	     repeat ptr (fm_ptr, attr_info.fwd_thread)
	     while (rel (ai_ptr) ^= NULL_OFFSET);

	     if attr_def_info.name = attr_info.name then do; /* Found a duplicate name */
		     O_err_msg = rtrim (attr_info.name);/*   so return an error */
		     O_err_code = mrds_error_$rst_name_duplicate;
		     return;
		end;

	     if attr_info.key_attr then key_attribute_count = key_attribute_count + 1; /* Count key attributes */
	     prev_ptr = ai_ptr;

	end;

	if rel_info.num_attr + 1 > mrds_data_$max_attributes then do;
		O_err_code = mrds_error_$max_attributes;
		return;
	     end;

	rel_info.num_attr = rel_info.num_attr + 1;

	allocate attr_info in (fm_area) set (ai_ptr);
%page;
	if prev_ptr = null then rel_info.attr_ptr = rel (ai_ptr); /* Link new attr_inof into list */
	else prev_ptr -> attr_info.fwd_thread = rel (ai_ptr);

	attr_info.name = attr_def_info.name;

	if attr_def_info.primary_key then do;		/* If it is part of the primary key */
		attr_info.key_attr = "1"b;
		attr_info.key_order = key_attribute_count + 1;
		rel_info.num_key_attrs = rel_info.num_key_attrs + 1; /* Bump key attr count in rel_info */
	     end;
	else do;					/* Not part of primary key */
		attr_info.key_attr = "0"b;
		attr_info.key_order = 0;
	     end;

	attr_info.link_attr = "0"b;
	attr_info.reserved = "0"b;

	if attr_def_info.indexed then do;		/*  It is an indexed attribute */
		if mdbm_util_$mu_data_length ((domain_info.db_desc)) > 2277 /* 253* 9 */
		then do;
			O_err_code = mrds_error_$long_index;
			O_err_msg =
			     "The attribute has a domain that allows a values with length greater then 253 characters. "
			     || attr_def_info.name;
			return;
		     end;


		attr_info.index_attr = "1"b;
		rel_info.indexed = "1"b;		/* Set rel_info stuff */
		rel_info.max_attr_index_id = 257;	/* set so old rmdb will not be able to add indexes */
		attr_info.index_id = "0"b;
	     end;
	else do;					/* NOT an indexed attribute */
		attr_info.index_id = "0"b;
		attr_info.index_attr = "0"b;
	     end;

	attr_info.defn_order = rel_info.num_attr;	/* Same order that they are added to the attribute_list */

	call compute_bit_offset_and_length;		/* Internal proc */

	attr_info.link_child_cnt = 0;
	attr_info.link_par_cnt = 0;
	attr_info.domain_ptr = rel (di_ptr);
	attr_info.rslt_ptr = "0"b;
	attr_info.fwd_thread = NULL_OFFSET;
	attr_info.changer_ptr = db_model.changer_ptr;

%page;
	if ceil (divide (rel_info.max_key_len, 9, 35)) > mrds_data_$max_key_len then do;
		O_err_msg = rtrim (rel_info.name);
		O_err_code = mrds_error_$long_key;
	     end;

exit:	return;
%page;
/*  * * * * * * * * * *      compute_bit_offset_and_length   * * * * * * *   */

compute_bit_offset_and_length: proc;

/* routine to convert the attribute's domain descriptor into
   the required tuple offset and space required and update the
   corresponding statistics for the relation information
   NOTE: the padding routines were introduced to make the data stored
   in the tuple(via bit offset/length) relect the pl1 definition
   of storage locations needed for unaligned and aligned data types */

	varying_string = "0"b;

	desc_ptr = addr (domain_info.db_desc);		/* get descriptor for this attribute */

	attr_info.bit_length =
	     mdbm_util_$get_data_bit_length (desc_ptr -> descriptor_bit_36_ovrly);

	if descriptor.type = VARYING_BIT_TYPE |
	     descriptor.type = VARYING_CHAR_TYPE then
	     varying_string = "1"b;

/* fixed length attribute/domain handling */

	if ^varying_string then do;			/* fixed attributes */
		padding =
		     mdbm_util_$align_data_item (desc_ptr, rel_info.var_offset - 1);
		attr_info.bit_offset = rel_info.var_offset + padding;
						/* set to end of fixed data */
		rel_info.var_offset =
		     rel_info.var_offset + attr_info.bit_length + padding;
						/* set new fixed data end */
	     end;

/* varying string handling */

	else do;					/* varying strings */
		rel_info.nvar_atts = rel_info.nvar_atts + 1; /* count up varying attributes */
		attr_info.bit_offset = rel_info.nvar_atts; /* varying array index, not offset */
		padding = pad (WORD, attr_info.bit_length); /* varying must start/stop on word boundary */
	     end;

/* set the maximum tuple and key bit lengths */

	rel_info.max_data_len =
	     rel_info.max_data_len + attr_info.bit_length + padding;
	if attr_def_info.primary_key then

	     rel_info.max_key_len = rel_info.max_key_len + attr_info.bit_length;

     end compute_bit_offset_and_length;
%page;
/*   * * * * * * * * * * * * * *        pad         * * * * * * * * * * * *  */

pad: proc (pad_size, pad_base) returns (fixed bin);

/* routine to return the number of bits necessary to pad a bit count
   out to an alignment boundary of 9(byte), 36(word), or 72(double word) bits
   as determined by the pad size input */

	if mod (pad_base, pad_size) = 0 then
	     number_of_bits = 0;
	else do;

		number_of_bits = pad_size - mod (pad_base, pad_size);

	     end;

	return (number_of_bits);

	dcl     pad_size		 fixed bin;	/* either 9 or 36 or 72 */
	dcl     pad_base		 fixed bin (35);	/* current bit length to be padded */
	dcl     number_of_bits	 fixed bin;	/* what has to be added to get to the desired boundary */

     end pad;
%page;
	dcl     NULL_OFFSET		 bit (18) internal static options (constant) init ((18)"1"b); /* db version of null offset */
	dcl     addr		 builtin;
	dcl     ceil		 builtin;
	dcl     WORD		 fixed bin int static options (constant) init (36);
	dcl     descriptor_bit_36_ovrly bit (36) based;	/* overlay for descriptor */
	dcl     divide		 builtin;
	dcl     fixed		 builtin;
	dcl     key_attribute_count	 fixed bin;
	dcl     mdbm_util_$align_data_item entry (ptr, fixed bin (35)) returns (fixed bin);
	dcl     mdbm_util_$get_data_bit_length entry (bit (36)) returns (fixed bin (35));
	dcl     mod		 builtin;
	dcl     mrds_data_$max_attributes ext fixed bin (35);
	dcl     mrds_data_$max_key_len fixed bin (35) ext;
	dcl     mrds_error_$long_index fixed bin (35) ext static;
	dcl     mrds_error_$long_key	 fixed bin (35) ext static;
	dcl     mrds_error_$max_attributes fixed bin (35) ext static;
	dcl     mrds_error_$rst_name_duplicate fixed bin (35) ext static;
	dcl     mdbm_util_$mu_data_length entry (bit (36)) returns (fixed bin (35));
	dcl     null		 builtin;
	dcl     padding		 fixed bin;
	dcl     prev_ptr		 ptr;
	dcl     ptr		 builtin;
	dcl     rel		 builtin;
	dcl     rtrim		 builtin;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     VARYING_BIT_TYPE	 fixed bin int static options (constant) init (20);
	dcl     VARYING_CHAR_TYPE	 fixed bin int static options (constant) init (22);
	dcl     varying_string	 bit (1);
%page;
%include rmdb_create_rel_info;
%page;
%include mdbm_db_model;
%include mdbm_file_model;
%page;
%include mdbm_descriptor;

     end rmdb_build_attr_info;

