/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
rmdb_rq_create_index: proc (sci_ptr, info_ptr);

/*
   .                       BEGIN_DESCRIPTION
   This  procedure  implements  the  create_index  request  of   the
   restructure_mrds_db  subsystem.  It  verifies  that  the  correct
   number of arguments have been supplied and that a data  base  has
   been  readied  for  restructuring.  It  does  not verify that the
   arguments supplied are actually a relation and attribute  in  the
   database,  that  is left to the rmdb_create_index procedure which
   is called to do the actual index creation.

   It also checks to be sure that the database is consistent. If the
   database  is  marked  as  inconsistent it will query the user for
   execution of the undo request. If the request is ok the  database
   will  be  consistent  so the index creation will be done, else it
   won't be.
   .                       END_DESCRIPTION

   Known Bugs:

   Other Problems:

   .                       HISTORY
   82-03-31 Davids: Written

   82-05-26 Davids: added code to check consistency of db  and  call
   .                rmdb_execute_undo its inconsistent. Also changed
   .                calling sequence of rmdb_create_index to include
   .                the db_model_ptr.

   82-07-01  Roger Lackey : Modified the calls to mu_db_inconsistent to use
   mdbm_util_$inconsistent_* for binding.

*/

/* PARAMETERS */

	dcl     sci_ptr		 ptr;		/* (input) pointer to the subsystem control info structure */
						/*         need to be able to pass it to the ssu routines */
	dcl     info_ptr		 ptr;		/* (input) pointer to the rmdb_ctl structure which is */
						/*         read only */

/* EXTERNAL STATIC */

	dcl     error_table_$action_not_performed fixed bin (35) external static;
	dcl     error_table_$badcall	 fixed bin (35) external static;

/* ENTRIES */

	dcl     mdbm_util_$inconsistent_get_info entry (ptr, bit (1), char (*), char (*), char (*));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     rmdb_create_index	 entry (ptr, char (168), ptr, char (*), char (*), char (500), fixed bin (35));
	dcl     rmdb_execute_undo	 entry (ptr, char (32), char (168), ptr, char (32), char (100));

/* INTERNAL AUTOMATIC */

	dcl     attr_name_len	 fixed bin (21);	/* length of the attribute name argument */
	dcl     attr_name_ptr	 ptr;		/* pointer to the attribute name argument */
	dcl     code		 fixed bin (35);	/* standard error code */
	dcl     error_message	 char (500);	/* error message returned from rmdb_create_index */
	dcl     incon_name		 char (32);	/* name of the request that caused
                                                              the database to be inconsistent */
	dcl     incon_value		 bit (1);		/* true ==> the database is inconsistent */
	dcl     nargs		 fixed bin;	/* number of arguments the request was called with */
	dcl     rel_name_len	 fixed bin (21);	/* length of the relation name argument */
	dcl     rel_name_ptr	 ptr;		/* pointer to the relation name argument */
	dcl     undo_request	 char (100);	/* rmdb request that will cause the db to become consistent */
	dcl     unused2		 char (200);	/* output from mdbm_util_$inconsistent_get_info */

/* BASED */

	dcl     attr_name		 char (attr_name_len) based (attr_name_ptr); /* name of attribute to be indexed */
	dcl     rel_name		 char (rel_name_len) based (rel_name_ptr); /* name of relation which
                                                                                      contains the attribute */

/* INCLUDES */
%page;
%include mrds_rmdb_ctl;

/*
   Assign initial values
*/

	rmdb_ctl_ptr = info_ptr;





/*
   Determine the number of arguments that this  request  was  called
   with.  Two  arguments  are  required  the  relation  name and the
   attribute name.

   If two arguments are not supplied issue an error. Note that abort
   line does not return.
*/

	call ssu_$arg_count (sci_ptr, nargs);
	if nargs ^= 2
	then call ssu_$abort_line (sci_ptr, error_table_$badcall,
		"^/Usage:^/^-create_index relation_name attribute_name^/");





/*
   If the absolute_db_path element of the rmdb_ctl structure is null
   it   means   that   no   data   base  is  currently  readied  for
   restructuring. This is an error.
*/

	if rmdb_ctl.absolute_db_path = ""
	then call ssu_$abort_line (sci_ptr, error_table_$action_not_performed,
		"^/There is no currently readied database");

/*
   If the database is inconsistent it must be made consistent before
   the index can be created.  Note  that  if  for  some  reason  the
   database is not made consistent rmdb_execute_undo will not return
   it will either cause a request line or subsystem abort.
*/

	call mdbm_util_$inconsistent_get_info (rmdb_ctl.db_model_ptr, incon_value, incon_name, unused2, undo_request);
	if incon_value
	then call rmdb_execute_undo (sci_ptr, "create_index", rmdb_ctl.absolute_db_path,
		rmdb_ctl.db_model_ptr, incon_name, undo_request);




/*
   Get the relation name and attribute name arguments.
*/

	call ssu_$arg_ptr (sci_ptr, 1, rel_name_ptr, rel_name_len);
	call ssu_$arg_ptr (sci_ptr, 2, attr_name_ptr, attr_name_len);





/*
   Do the actual index creation
*/

	call rmdb_create_index (rmdb_ctl_ptr, rmdb_ctl.absolute_db_path, rmdb_ctl.db_model_ptr, rel_name, attr_name,
	     error_message, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, error_message);






	return;


     end rmdb_rq_create_index;
