/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

/*DESCRIPTION
  This routine is the argument processor for the rmdb delete_attribute and
  delete_domain requests. After processing the arguments and building the delete
  structure, it calls rmdb_delete_(domain attribute) to actually do all the work.
*/

/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     written
  2) change(87-09-30,Blair), approve(87-11-03,MCR7792), audit(87-11-30,Dupuis),
     install(87-12-07,MR12.2-1008):
     Correct the request name placed in the inconsistent_message structure so
     it will accurately reflect the request being made consistent.
                                                   END HISTORY COMMENTS */

rmdb_rq_delete_object:
     proc;

	return;					/* not an entry point */

rmdb_rq_delete_object$domain:
	entry (Isci_ptr, Iinfo_ptr);

	domain_entry = "1"b;
	goto COMMON;

rmdb_rq_delete_object$attribute:
	entry (Isci_ptr, Iinfo_ptr);

	domain_entry = "0"b;
	goto COMMON;

COMMON:
	sci_ptr = Isci_ptr;
	rmdb_ctl_ptr = Iinfo_ptr;

/* Determine if we have an open database. */
	if rmdb_ctl.absolute_db_path = ""
	then call ssu_$abort_line (sci_ptr, error_table_$action_not_performed,
		"^/There is no currently readied database.");

	call ssu_$arg_count (sci_ptr, nargs);

/* Count all the non-control arguments (this is the list of names) */
	begin;

dcl  arg char (argl) based (argp);
dcl  argl fixed bin (21);
dcl  arglengths (nargs) fixed bin (21);
dcl  argp ptr;
dcl  argptrs (nargs) ptr;

	     delete_object_info_count = 0;
	     do loop = 1 to nargs;
		call ssu_$arg_ptr (sci_ptr, loop, argp, argl);
		if index (arg, "-") ^= 1
		then delete_object_info_count = delete_object_info_count + 1;
		argptrs (loop) = argp;
		arglengths (loop) = argl;
		end;				/* do loop */

	     allocate delete_object_info in (my_area) set (delete_object_info_ptr);
	     unspec (delete_object_info) = "0"b;
	     delete_object_info.version = delete_object_info_version_1;

	     delete_object_info.count = 0;
	     do loop = 1 to nargs;
		argp = argptrs (loop);
		argl = arglengths (loop);
		if /* case */ index (arg, "-") = 1
		then if /* case */ arg = "-a" | arg = "-all"
		     then delete_object_info.all = TRUE;
		     else if arg = "-bf" | arg = "-brief"
		     then delete_object_info.long = SHORT;
		     else if arg = "-ck" | arg = "-check"
		     then delete_object_info.check = TRUE;
		     else if arg = "-fc" | arg = "-force"
		     then delete_object_info.force = TRUE;
		     else if arg = "-ihe" | arg = "-inhibit_error"
		     then delete_object_info.inhibit_errors = TRUE;
		     else if arg = "-lg" | arg = "-long"
		     then delete_object_info.long = LONG;
		     else if arg = "-nfc" | arg = "-no_force"
		     then delete_object_info.force = FALSE;
		     else if arg = "-nihe" | arg = "-no_inhibit_error"
		     then delete_object_info.inhibit_errors = FALSE;
		     else if arg = "-unref" | arg = "-unreferenced"
		     then delete_object_info.unreferenced = TRUE;
		     else call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^a", arg);
		else do;
		     if argl > length (delete_object_info.name (1))
		     then call ssu_$abort_line (sci_ptr, mrds_error_$rst_name_too_long, "^a", arg);

		     if argl < 1
		     then call ssu_$abort_line (sci_ptr, 0, "The ^[domain^;attribute^] name cannot be the null string.");
		     if verify (arg, mrds_data_$valid_rel_and_attr_name_chars) ^= 0
		     then call ssu_$abort_line (sci_ptr, mrds_error_$bad_ident, "^a", arg);
		     if domain_entry
		     then if search (substr (arg, 1, 1), "_-") ^= 0
			then call ssu_$abort_line (sci_ptr, mrds_error_$inv_domain_name_first_char, "^a", arg);
			else ;
		     else if search (substr (arg, 1, 1), "_-0123456789") ^= 0
			then call ssu_$abort_line (sci_ptr, mrds_error_$inv_attr_name_first_char, "^a", arg);

		     delete_object_info.count = delete_object_info.count + 1;
		     delete_object_info.name (delete_object_info.count) = arg;
		     end;
		end;				/* do loop */

	end;					/* begin */

	if (delete_object_info.all | delete_object_info.unreferenced) & delete_object_info.count ^= 0
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-all or -unref and a list of ^[domains^;attributes^].", domain_entry);

	if delete_object_info.check & delete_object_info.all
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-all and -check");

	if (delete_object_info.long = LONG) & delete_object_info.all
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-all and -long");

	if (delete_object_info.long = LONG) & delete_object_info.unreferenced
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-unref and -long");

	if delete_object_info.check & delete_object_info.unreferenced
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-unreferenced and -check");

	if (delete_object_info.check & (delete_object_info.long ^= UNSPEC))
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-check and -brief or -long");

	if delete_object_info.long = SHORT
          then delete_object_info.check = FALSE;

	if delete_object_info.long = LONG
	then delete_object_info.check = TRUE;

	if ^delete_object_info.all & ^delete_object_info.unreferenced & delete_object_info.count = 0
	then call ssu_$abort_line (sci_ptr, 0, "No deletion arguments found.^/A list of ^[domain^;attribute^] names, -unreferenced or -all must be given.",
	     domain_entry);

/* Make sure that we don't need to cleanup from a previous operation. */
	if domain_entry
	then delete_object_info.request_name = "rmdb (delete_domain)";
	else delete_object_info.request_name = "rmdb (delete_attribute)";

	call mdbm_util_$inconsistent_get_info (rmdb_ctl.db_model_ptr, incon_value, incon_name, unused2, undo_request);
	if incon_value
	then call rmdb_execute_undo (sci_ptr, rtrim (delete_object_info.request_name), rmdb_ctl.absolute_db_path, rmdb_ctl.db_model_ptr,
		incon_name, undo_request);


	delete_object_info.check_iocb_ptr = iox_$user_output;
	delete_object_info.query_iocb_ptr = iox_$user_input;

	if domain_entry
	then call rmdb_delete_domain (rmdb_ctl_ptr, delete_object_info_ptr, error_message, code);
	else call rmdb_delete_attribute (rmdb_ctl_ptr, delete_object_info_ptr, error_message, code);
	if code ^= 0 & ^delete_object_info.inhibit_errors
	then call ssu_$abort_line (sci_ptr, code, "^a", error_message);

	return;
%page;
%include mrds_rmdb_ctl;
%include rmdb_delete_object_info;
%page;
dcl  code fixed bin (35);
dcl  domain_entry bit (1) aligned;
dcl  empty builtin;
dcl  error_message char (500);
dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$inconsistent fixed bin(35) ext static;
dcl  FALSE bit (1) aligned int static options (constant) init ("0"b);
dcl  Iinfo_ptr ptr parameter;
dcl  incon_name  char (32);				/* name of the request that caused the db to become inconsistent */
dcl  incon_value bit (1);				/* true ::= the db is inconsistent */
dcl  index builtin;
dcl  iox_$user_input ptr ext static;
dcl  iox_$user_output ptr ext static;
dcl  Isci_ptr ptr parameter;
dcl  length builtin;
dcl  LONG bit (2) aligned int static options (constant) init ("10"b);
dcl  loop fixed bin;
dcl  mdbm_util_$inconsistent_get_info entry options(variable);
dcl  mrds_data_$valid_rel_and_attr_name_chars char (128) ext static;
dcl  mrds_error_$bad_ident fixed bin(35) ext static;
dcl  mrds_error_$inv_attr_name_first_char fixed bin(35) ext static;
dcl  mrds_error_$inv_domain_name_first_char fixed bin(35) ext static;
dcl  mrds_error_$rst_name_too_long fixed bin (35) ext static;
dcl  my_area area;
dcl  nargs fixed bin;
dcl  rmdb_delete_attribute entry (ptr, ptr, char (*), fixed bin (35));
dcl  rmdb_delete_domain entry (ptr, ptr, char(*), fixed bin(35));
dcl  rmdb_execute_undo entry (ptr, char(32), char(168), ptr, char(32), char(100));
dcl  rtrim builtin;
dcl  sci_ptr ptr;
dcl  search builtin;
dcl  SHORT bit (2) aligned int static options (constant) init ("01"b);
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (ptr, fixed bin);
dcl  ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin (21));
dcl  substr builtin;
dcl  TRUE bit (1) aligned int static options (constant) init ("1"b);
dcl  UNSPEC bit (2) aligned int static options (constant) init ("00"b);
dcl  undo_request  char (100);				/* rmdb request that will cause the db to become consistent */
dcl  unused2 char (200);				/* output from mdbm_util_$inconsistent_get_info */
dcl  unspec builtin;
dcl  verify builtin;

     end rmdb_rq_delete_object;
