/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   originally written by jim gray - - January 1979

   83-02-17 Davids: explicitly declared variables that were declared by
   context or implication and deleted declarations to variables that were
   not referenced.
*/

/*
   Known Problems:
	1) RMDB code should be removed since its now done by the rmdb subsystem
*/

mrds_rst_consistancy_check: procedure (rsc_ptr);

/*
   .                        BEGIN_DESCRIPTION
   This routine makes sure that creation(CMDB) or restructuring(RMDB)
   of a database model has resulted in a model that is guarenteed
   to be consistant, complete, and error free.

   For CMDB this means checking that some attributes or domains
   might never have been used or referenced, a possible oversight
   by the database builder.

   RMDB is more complicated, because an "undefine" directive
   can cause an inconsistancy that was later rectified by a
   "define" or "redefine" directive. Thus many more checks
   are made to ensure that attributes have domains, and are contained
   in some relation, all domains are referenced, and so on.
   .                        END_DESCRIPTION
*/

/* PARAMETERS:

   rsc_ptr - - (input) pointer to the restructure control segment
   that holds error, directives seen, and other common information

   (output) warning messages about detected inconsistancies in
   the database, and the setting of severity high in the rsc segment

*/

/* get the semantic structure pointers */

	stmt_ptr = rsc.stmt_ptr;
	directive_ptr = rsc.directive_ptr;

/* call metering if trace is on */

	if ^rsc.trace_sw then ;
	else do;
		if directive.cmdb.seen then
		     meter_mesg = "CMDB";
		else meter_mesg = "RMDB";
		call mrds_rst_meter (rsc_ptr, "mrds_rst_consistancy_check", "1"b /* input call */, meter_mesg);
	     end;
						/* take action based on which command invoked us,
						   CMDB only can have used attributes and domains */

	if directive.cmdb.seen then do;

/* CMDB directive */

		call check_for_referencing_relation ("0"b /* for domains */);

		call check_for_referencing_relation ("1"b /* for attributes */);


	     end;

	else do;

/* RMDB directive */

/* quick and dirty version for RMDB with only "define" directive */

		call check_for_referencing_relation ("0"b /* for domains */);

		call check_for_referencing_relation ("1"b /* for attributes */);
						/* 	     call ioa_$ioa_switch (iox_$error_output,
						   "RMDB consistancy check not implemented yet.^/") ; */

	     end;

/* call metering if trace is on */

	if ^trace_sw then ;
	else call mrds_rst_meter (rsc_ptr, "mrds_rst_consistancy_check", "0"b /* output call */, meter_mesg);

check_for_referencing_relation: procedure (attribute_check);

/* routine to check the global list elements of domains and attributes,
   to see whether they have been made ude of in some relation or not */

	if attribute_check then
	     root_ptr = rsc.h_gattr_ptr;
	else root_ptr = rsc.h_gdom_ptr;
	node_ptr = root_ptr;			/* convention for first on list */
	success = "1"b;				/* to init loop */

/* go through all attributes/domains, checking that they are used in some relation */

	do while (success);

	     call mrds_rst_tree_successor (root_ptr, node_ptr, successor_ptr, successor_parent_ptr, success);

	     if ^success then ;
	     else do;
		     node_ptr = successor_ptr;
		     gl_ptr = node_ptr -> node.data;

/* issue a warning if this attribute/domain is unused */

		     if gl.superior_assigned then ;
		     else do;

/* error message depends on which list was checked */

			     if attribute_check then
				if gl.parse_info_ptr -> attribute_domain.default then ;
				else call unused_attribute_error (); /* only if not default attribute */
			     else do;
				     call unused_domain_error ();
						/* 			     call delete_domain_info () ; */
				end;

			end;

		end;

	end;


	declare attribute_check	 bit (1);		/* ON => this is for the attribute list elements, else domains */

     end;

unused_attribute_error: procedure ();

/* output error message warning of an attribute without a relation */

	attdom_ptr = gl.parse_info_ptr;
	if attribute_domain.default then do;
		line_mesg = "h";
		default_mesg = "default_";
	     end;
	else do;
		default_mesg = "";
		line_mesg = "given on line " || ltrim (char (attribute_domain.line_num)) || " h";
	     end;

	call ioa_$rs ("^a ^a^a^a^a ^a^a", message, message_length,
	     "The", default_mesg, "attribute """, gl.name, """", line_mesg,
	     "as never been assigned to a relation.");
	call mrds_rst_error (rsc_ptr, 1 /* severity */, mrds_error_$rst_unused_attr, (message));

     end;

unused_domain_error: procedure ();

/* output error message warning of a domain unreferenced by a relation */

	call ioa_$rs ("^a^a^a ^d ^a", message, message_length,
	     "The domain """, gl_ptr -> gl.name, """ given on line",
	     gl_ptr -> gl.parse_info_ptr -> domain.line_num,
	     "has only been referenced by attributes that have no assigned relation.");
	call mrds_rst_error (rsc_ptr, 1 /* severity */, mrds_error_$rst_unused_attr_dom, (message));

     end;

	declare meter_mesg		 char (4);	/* name of directive being checked */
	declare mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*)); /* restructuring metering routine */
	declare default_mesg	 char (8) varying;
	declare line_mesg		 char (24) varying;
	declare mrds_rst_tree_successor entry (ptr, ptr, ptr, ptr, bit (1)); /* get next on list routine */
	declare ioa_$rs		 entry options (variable); /* string manipulator routine */
	declare message		 char (256);	/* specifics of error */
	declare message_length	 fixed bin (21);	/* length of specifics message */
	declare mrds_rst_error	 entry (ptr, fixed bin (2), fixed bin (35), char (*)); /* error handler */
	declare mrds_error_$rst_unused_attr fixed bin (35) ext; /* unreferenced attr error */
	declare mrds_error_$rst_unused_attr_dom fixed bin (35) ext; /* unreferenced attrs dom unused elsewhere */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment size */
	declare (addr, rel, fixed,
	        char, ltrim)	 builtin;		/* functions known to pl1 */

%include mrds_rst_rsc;
%include mrds_rst_parse_info;
%include mrds_rst_tree;
%include mrds_rst_global_lists;
%include mrds_rst_semantics;
%include mdbm_db_model;

     end;
