/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-24,Blair), approve(86-07-24,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     Allow a null undo_request as an argument for rmdb_execute_undo.
                                                   END HISTORY COMMENTS */


rmdb_rq_delete_relation: proc (I_sci_ptr, I_rmdb_ctl_ptr);

/* .                    BEGIN_DESCRIPTION

   This procedure is called from the rmdb ssu_ routine

   Its purpose is to process the delete_relation rmdb request arguments

   Syntax for this request is :
   .     delete_relation rel_name {-brief}  {-long}

   .		     END_DESCRIPTION
*/
/* HISTORY
   82-04-30 Written by Roger Lackey

   82-06-25 Roger Lackey : changed force to brief and remove -no_force

   82-07-01  Roger Lackey : Modified the calls to mu_db_inconsistent to use
   mdbm_util_$inconsistent_* for binding.
*/

%page;
/* rmdb_rq_delete_relation: proc (I_sci_ptr, I_rmdb_ctl_ptr); */

/*        Parameters      */

	dcl     I_sci_ptr		 ptr parameter;	/*  Pointer to ssu info */
	dcl     I_rmdb_ctl_ptr	 ptr parameter;	/* Pointer to restructuring control */

	sci_ptr = I_sci_ptr;
	rmdb_ctl_ptr = I_rmdb_ctl_ptr;
	rmdb_delete_rel_info_ptr = null;

	if rmdb_ctl.version ^= RMDB_CTL_VERSION_1 then
	     call error (error_table_$unimplemented_version, "rmdb_create_rel_info.incl.pl1");

	on cleanup call tidy_up;			/* Establish a cleanup handler for this procedure */

	if rmdb_ctl.absolute_db_path = " " then
	     call error (error_table_$action_not_performed,
		"^/There is no currently readied data base.");

	call ssu_$arg_count (sci_ptr, nargs);		/* Get number of arguments supplied to me */

	if nargs < 1 then call error (error_table_$wrong_no_of_args,
		"^/Usage: delete_relation rel_name  {-brief}  {-long}");

	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_len); /* First arg must be rel_name */

	if arg_len > 30				/* Relation names can only be 30 chars long
						   because the relation model name must have a ".m" suffix */
	then call error (mrds_error_$rel_name_too_long, arg);
	if arg_len < 1 then call error (mrds_error_$no_rel_name, "^/Relation name was expected for first argument.");

	n = verify (arg, mrds_data_$valid_rel_and_attr_name_chars);
	if n ^= 0 then call error (mrds_error_$bad_rel_name, arg ||
		"^/First bad character is: " || substr (arg, n, 1));


	if substr (arg, 1, 1) = "_" then
	     call error (mrds_error_$bad_rel_name, arg ||
		"^/Relation names cannot begin with an underscore.");

	allocate rmdb_delete_rel_info in (wa) set (rmdb_delete_rel_info_ptr);

	rmdb_delete_rel_info.version = RMDB_DELETE_REL_INFO_VERSION_1;
	rmdb_delete_rel_info.absolute_db_path = rmdb_ctl.absolute_db_path;
	rmdb_delete_rel_info.db_model_ptr = rmdb_ctl.db_model_ptr;
	rmdb_delete_rel_info.relation_name = arg;
	rmdb_delete_rel_info.brief = "0"b;
%page;
/* Process rest of arguments */

	do i = 2 to nargs;

	     call ssu_$arg_ptr (sci_ptr, i, arg_ptr, arg_len); /* Get next arg */

	     if substr (arg, 1, 1) = "-" then do;	/* Look for control args */

		     if arg = "-brief" | arg = "-bf" | arg = "-brief." then
			rmdb_delete_rel_info.brief = "1"b;

		     else if arg = "-lg" | arg = "-long" then
			rmdb_delete_rel_info.brief = "0"b;

		     else call error (error_table_$badopt, arg); /*  Bad control arg */
		end;

	     else call error (error_table_$bad_arg, arg);

	end;					/* END nargs > 1 */

	call mdbm_util_$inconsistent_get_info (rmdb_ctl.db_model_ptr, /* See if db is inconsistent */
	     incon_flag, incon_name, unused, undo_request);

	if incon_flag then do;			/* DB is inconsisten */
	     if undo_request = ""
	     then call rmdb_execute_undo (sci_ptr, "delete_relation",
		rmdb_ctl.absolute_db_path, rmdb_ctl.db_model_ptr, incon_name, undo_request);
	     else do;
		undo_rq_name = before (undo_request, BLANK);
		rest = after (undo_request, undo_rq_name);
		i = verify (rest, BLANK);
		rest = substr (rest, i);		/* Remove leading blanks */
		undo_rel_name = before (rest, BLANK);

		if ^(undo_rq_name = "delete_relation" & /* If not delete_rel with same relation name then */
		     undo_rel_name = rmdb_delete_rel_info.relation_name) then
		     call rmdb_execute_undo (sci_ptr,
			"delete_relation", rmdb_ctl.absolute_db_path,
			rmdb_ctl.db_model_ptr, incon_name, undo_request);
		end;
	     end;


	call rmdb_delete_relation (rmdb_ctl_ptr, rmdb_delete_rel_info_ptr, err_msg, code);
	if code ^= 0 then call error (code, err_msg);

exit:	return;
%page;
/*  * * * * * * * * * * * *       error       * * * * * * * * * * * * * */

error: proc (err_code, err_message);			/* Error procedure for rmdb_create_relation.pl1 */

	dcl     err_code		 fixed bin (35);
	dcl     err_message		 char (*);
	dcl     ssu_$abort_line	 entry () options (variable);

	call tidy_up;

	call ssu_$abort_line (sci_ptr, err_code, err_message);

     end error;











/*  * * * * * * * * * * * *       tidy_up       * * * * * * * * * * * * * */

tidy_up: proc;

	if rmdb_delete_rel_info_ptr ^= null
	then free rmdb_delete_rel_info;

     end tidy_up;
%page;
	dcl     after		 builtin;
	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     arg_len		 fixed bin (21);
	dcl     arg_ptr		 ptr;
	dcl     before		 builtin;
	dcl     BLANK		 char (1) int static options (constant) init (" ");
	dcl     cleanup		 condition;
	dcl     code		 fixed bin (35);
	dcl     error_table_$action_not_performed fixed bin (35) ext static;
	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     error_table_$wrong_no_of_args fixed bin (35) ext static;
	dcl     err_msg		 char (256);
	dcl     i			 fixed bin;
	dcl     incon_flag		 bit (1);
	dcl     incon_name		 char (32);
	dcl     mrds_data_$valid_rel_and_attr_name_chars char (128) varying ext;
	dcl     mrds_error_$bad_rel_name fixed bin (35) ext static;
	dcl     mrds_error_$no_rel_name fixed bin (35) ext static;
	dcl     mrds_error_$rel_name_too_long fixed bin (35) ext static;
	dcl     mdbm_util_$inconsistent_get_info entry (ptr, bit (1), char (*), char (*), char (*));
	dcl     n			 fixed bin;
	dcl     nargs		 fixed bin;
	dcl     null		 builtin;
	dcl     rest		 char (100) varying;
	dcl     rmdb_delete_relation	 entry (ptr, ptr, char (*), fixed bin (35));
	dcl     rmdb_execute_undo	 entry (ptr, char (32), char (168), ptr, char (32), char (100));
	dcl     sci_ptr		 ptr;
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     substr		 builtin;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     undo_rel_name	 char (32);
	dcl     undo_request	 char (100);
	dcl     undo_rq_name	 char (32) varying;
	dcl     unused		 char (32);
	dcl     verify		 builtin;
	dcl     wa		 area (sys_info$max_seg_size) based (rmdb_ctl.work_area_ptr);

%page;
%include mrds_rmdb_ctl;
%page;
%include rmdb_delete_rel_info;

     end rmdb_rq_delete_relation;
