/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



/* HISTORY:

   originally written by jim gray - - october 1978

*/


mrds_rst_attribute_cleanup: procedure (rsc_ptr);

/* DESCRIPTION:

   this routine is invoked to supply default attributes for domains
   that currently have no attribute of the same name as the domain(for RMDB), or
   which have had no attributes specified for them.  it produces dummy attribute
   list structures identical to the input to mrds_rst_attribute_handler
   that have a attribute name equal to the domain name, and then calls the
   attribute handler to put the attribute models in place.

*/

/* PARAMETERS:

   rsc_ptr - - (input) pointer to the common control segment

   global lists - - (input) searched for domains without attributes
   since they contain all database entities during RMDB/CMDB

   parse info structures - - (output) via calls to mrds_rst_attribute_handler
   to build the attribute model as default for the given domain

*/

/* get the semantic structure pointers */

	directive_ptr = rsc.directive_ptr;

/* if trace is on call metering */

	if ^rsc.trace_sw then ;
	else do;
		if directive.type = DEFINE then
		     directive_mesg = "DEFINE";
		else if directive.type = REDEFINE then
		     directive_mesg = "REDEFINE";
		else directive_mesg = "CMDB";
		call mrds_rst_meter (rsc_ptr, "mrds_rst_attribute_cleanup",
		     "1"b /* in */, directive_mesg);
	     end;

/* check for domains with no referencing attributes,
   any found get default attributes of the same name
   as that of the given domain */

	if directive.type = REDEFINE then do;
		call ioa_$rs ("^a ^a", message, message_length,
		     "The attribute cleanup handler will not implement the ""redefine""",
		     "directive until a later release.");
		call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$rst_undone_option, (message));
	     end;
	else do;

/* initialize the successor function to get the first domain on the
   global list of domains in the database */

		root_ptr = rsc.h_gdom_ptr;
		node_ptr = root_ptr;		/* convention for first on list */
		success = "1"b;			/* do at least one loop */

		do while (success);

		     call mrds_rst_tree_successor (root_ptr, node_ptr, successor_ptr, successor_parent_ptr, success);

		     if ^success then ;		/* success off => no more in list */
		     else do;			/* next domain found */

			     node_ptr = successor_ptr;/* get pointer to next on list after last one */
			     gl_ptr = node_ptr -> node.data; /* get element portion from tree head */

			     if default_attribute_present () then ; /* already default attr present */
			     else do;		/* none found, set default attribute */

/* make believe we are the parser, and that we
   just found an attribute definition of domain-name domain-name */

				     call mrds_rst_rsc_alloc (rsc_ptr, ATTRIBUTE_DOMAIN, attdom_ptr);
				     attribute_domain.attr = gl.name; /* set domain name as attribute's */
				     attribute_domain.dom = gl.name;
				     attribute_domain.default = "1"b; /* not defined in source */
				     attribute_domain.unused = "0"b;
				     attribute_domain.line_num = 0;

/* define the attribute just prepared */

				     call mrds_rst_attribute_handler (rsc_ptr, attdom_ptr);

				end;

			end;

		end;

	     end;

/* call trace if metering is on */

	if ^rsc.trace_sw then ;
	else call mrds_rst_meter (rsc_ptr, "mrds_rst_attribute_cleanup",
		"0"b /* out */, directive_mesg);

default_attribute_present: procedure () returns (bit (1));

/* routine to return true if an attribute of the same
   name as the domain has been defined as referencing this domain.
   (this will only happen with default attributes, not source ones)
   else it returns false, say if no attributes are present */

	call mrds_rst_tree_search (gl.name, gl.item_sub_list_ptr, node_ptr, parent_ptr, success);

	return (success);


	declare node_ptr		 ptr;		/* local version for search */
	declare parent_ptr		 ptr;		/* unused */
	declare success		 bit (1);		/* on => default attribute of domain name found */



     end;

	declare directive_mesg	 char (8);	/* meter call message */
	declare mrds_rst_tree_search	 entry (char (32) aligned, ptr, ptr, ptr, bit (1)); /* find routine */
	declare mrds_rst_rsc_alloc	 entry (ptr, fixed bin, ptr); /* working area manager */
	declare ioa_$rs		 entry options (variable); /* string manipulation routine */
	declare mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*)); /* general error handler */
	declare message		 char (96) varying; /* specifics of error message */
	declare message_length	 fixed (21);	/* length of specifics message */
	declare mrds_error_$rst_undone_option fixed bin (35) external; /* unimplemented feature */
	declare mrds_rst_tree_successor entry (ptr, ptr, ptr, ptr, bit (1)); /* get next on list routine */
	declare mrds_rst_attribute_handler entry (ptr, ptr); /* attribute semantic routine */
	declare mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*)); /* trace/meter routine */
	declare sys_info$max_seg_size	 fixed bin (35) external; /* system largest segment allowed */
	declare (fixed, addr, rel)	 builtin;		/* functions known to pl1 */

%include mrds_rst_rsc;
%include mrds_rst_struct_types;
%include mrds_rst_global_lists;
%include mrds_rst_tree;
%include mrds_rst_parse_info;
%include mrds_rst_semantics;

     end;
