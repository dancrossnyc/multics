/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



/* HISTORY:

   originally written by jim gray - - october 1978

*/


mrds_rst_relation_handler: procedure (rsc_ptr, list_ptr);

/* DESCRIPTION:

   this routine builds/alters the mrds database model relation information
   and the global entity lists maintained by RMDB/CMDB,
   based upon the relation data and directive that is active when
   called by the RMDB/CMDB parser.
   the directive may be undefine, define, redefine, or cmdb and the data
   is either a relation name to be deleted or a linked list of
   structures holding the relation information and it's attribute list

*/

/* PARAMETERS:

   rsc_ptr - - (input) pointer to the common control segment

   list_ptr - - (input) pointer to the single relation name(undefine only) or
   to the relation structure headed list of attribute structures

   database model - - (output) updated model with altered relation information

   global lists - - (output) the list of database entities, updated
   according to directive and data

   error_output - - (output) via mrds_rst_error calls, of error messages

*/
%page;
/* REMAINING ERRORS:

   undefine:

   the relation name may be the <error_symbol>(this may be ignored)
   the relation may not be defined in the database


   define, cmdb:

   the relation name may be the <error_symbol>(this may be ignored)
   one of the attribute names may be the <error_symbol>(this may be ignored)
   the relation may already be defined in the database
   one of the given attributes may not be defined as part of the given relation
   the max_tuples will not be their final value until the file type is known for this relation

   redefine:

   same as define, except relation name may not be defined in the database

   note: "(this may be ignored)" means a previous error will prevent
   a database model with erroneous information from being built

*/
%page;
/* set semantic structure pointers */

	stmt_ptr = rsc_ptr -> rsc.stmt_ptr;
	directive_ptr = rsc_ptr -> rsc.directive_ptr;

	if directive.type = UNDEFINE then do;		/* input structure depends on directive */
		delete_name_ptr = list_ptr;
		relation_name = delete_name.overlay;
	     end;
	else do;
		relation_ptr = list_ptr;
		relation_name = relation.name;
	     end;

/* call trace if metering is on */

	if ^rsc.trace_sw then ;
	else call mrds_rst_meter (rsc_ptr, "mrds_rst_relation_handler", IN, relation_name);

/* check on which directive called us */

	if directive.type = UNDEFINE | directive.type = REDEFINE then do;
		if stmt (directive.type).relation.number > 0 then ; /* not first time */
		else do;				/* first time only, issue error */
			call ioa_$rs ("^a ^a", message, message_length,
			     "The relation handler will not implement ""undefine"" or ""redefine""",
			     "directives until a later release.");
			call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$rst_undone_option, (message));
		     end;
	     end;
	else do;

/* define or cmdb directive was caller, process newly defined relation */

		call define_relation ();

	     end;

/* call the trace routine if metering is turned on */

	if ^rsc.trace_sw then ;
	else call mrds_rst_meter (rsc_ptr, "mrds_rst_relation_handler", OUT, relation_name);
%page;
define_relation: procedure ();

/* using a previously unknown relation name,
   add this relation definition to the global lists for later use
   in building the new definition into the database model via the file handler */




/* make sure the relation is not already in the database or previously defined */

	call mrds_rst_list_element$add (relation.name, MAIN_LIST, rsc_ptr,
	     rsc.h_grel_ptr, gl_ptr, error_code);

	if error_code = 0 then
	     error_mode = OFF;
	else do;
		call ioa_$rs ("^a^a^a ^d ^a", message, message_length,
		     "The relation """, relation.name, """ given on line", relation.line_num,
		     "is already defined in the database, the duplicate will be ignored!!");
		call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$dup_rel, (message));
		call mrds_rst_rsc_alloc (rsc_ptr, GL, gl_ptr); /* make dummy global element not in list */
		error_mode = ON;
	     end;



/* relation was not found in list so it was added,
   link list element to list head and fill in the blanks */

	gl.type = MAIN_LIST;
	gl.name = relation.name;
	gl.item_info_ptr = null ();			/* no relation_info yet */
	gl.parse_info_ptr = relation_ptr;
	gl.other_info_ptr = null ();			/* gile global element not known yet */
	gl.item_sub_list_ptr = null ();		/* no attributes yet */
	gl.file_info_ptr = null ();			/* no file defined to hold relation yet */
	gl.file_model_ptr = null ();
	gl.affected = ON;
	gl.undefine = OFF;
	gl.redefine = OFF;
	if directive.type = DEFINE then do;
		gl.define = ON;
		gl.cmdb = OFF;
	     end;
	else do;					/* CMDB directive */
		gl.define = OFF;
		gl.cmdb = ON;
	     end;
	gl.superior_assigned = OFF;			/* no file for this relation yet */
	gl.inferior_assigned = OFF;			/* no attributes for this relation yet */
	gl.complete = OFF;				/* no rel_info yet */
	gl.consistant = ON;				/* assume good till find error */
	gl.reserved = OFF;



/* process the list of attributes for this relation */

	attribute_ptr = relation.a_ptr;
	do while (attribute_ptr ^= null ());

	     call define_relation_attribute ();

	     attribute_ptr = attribute.next;
	end;

	if gl.inferior_assigned then ;
	else gl.consistant = OFF;			/* no good attribute's in relation */


     end;
%page;
define_relation_attribute: procedure ();


/* make sure that the given attribute is defined in the database */

	call mrds_rst_tree_search (attribute.name, rsc.h_gattr_ptr, node_ptr, parent_ptr, success);

	if ^success then do;			/* not found */
		call ioa_$rs ("^a^a^a ^d ^a^a^a", message, message_length,
		     "The attribute """, attribute.name, """ on line",
		     attribute.line_num, "given for relation """,
		     relation.name, """ has not been defined in the database.");
		call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$undef_attr, (message));
	     end;
	else if error_mode then ;			/* previous error => relation not found, so don't add sublists */
	else do;
		attr_gl_ptr = node_ptr -> node.data;	/* get attribute global element pointer */
		if attr_gl_ptr -> gl.item_info_ptr = null () then ; /* check for assigned domain for this attribute */
		else if attr_gl_ptr -> gl.item_info_ptr -> sl.new_other_info_ptr = null () then ;
		else do;				/* get attr's domain global element pointer */
			dom_gl_ptr = attr_gl_ptr -> gl.item_info_ptr -> sl.new_other_info_ptr;
			dom_gl_ptr -> gl.superior_assigned = ON; /* now domain referenced by relation */
		     end;






/* ATTRIBUTE SUBLIST INSERT */
/* attribute found, add this relation to it's "used in relation" sublist */

		call mrds_rst_list_element$add (relation.name, SUB_LIST, rsc_ptr,
		     attr_gl_ptr -> gl.item_sub_list_ptr, sl_ptr, error_code);

		if error_code ^= 0 then do;		/* sub/main list disagreement */
			call ioa_$rs ("^a^a^a^a^a", message, message_length,
			     "LOGIC ERROR in mrds_rst_relation_handler, the relation """, relation.name,
			     """ was found the sublist of attribute """, attribute.name,
			     """ but wasn't found in the global relation list.");
			call mrds_rst_error (rsc_ptr, 4 /* severity */, error_code, (message));
		     end;
		else do;

/* fill in the sub list element info */

			sl.type = SUB_LIST;
			sl.name = relation.name;
			sl.item_info_ptr = null ();	/* no relation_info yet */
			sl.parse_info_ptr = relation_ptr;
			sl.old_other_info_ptr = null (); /* no attr info yet  */
			sl.new_other_info_ptr = attr_gl_ptr;
			sl.global_list_ptr = gl_ptr;
			sl.reserved = OFF;

			attr_gl_ptr -> gl.superior_assigned = ON; /* relation present for this attribute */
		     end;






/* RELATION SUBLIST INSERT */
/* add this attribute to the relation's attribute sublist */

		call mrds_rst_list_element$add (attribute.name, SUB_LIST, rsc_ptr,
		     gl.item_sub_list_ptr, sl_ptr, error_code);

		if error_code ^= 0 then do;
			call ioa_$rs ("^a^a^a^a", message, message_length,
			     "LOGIC ERROR in  mrds_rst_relation_handler, a duplicate attribute """,
			     attribute.name,
			     """ was found in relation """, relation.name, """.");
			call mrds_rst_error (rsc_ptr, 4 /* severity */, error_code, (message));
		     end;
		else do;

/* fill in the sublist element */

			sl.type = SUB_LIST;
			sl.name = attribute.name;
			sl.item_info_ptr = attr_gl_ptr -> gl.item_info_ptr; /* attribute info pointer */
			sl.parse_info_ptr = attribute_ptr; /* attr parse structure */
			sl.old_other_info_ptr = attr_gl_ptr -> gl.other_info_ptr; /* domain info ptr */
			sl.new_other_info_ptr = attr_gl_ptr -> gl.other_info_ptr; /* domain info ptr */
			sl.global_list_ptr = attr_gl_ptr;
			sl.reserved = OFF;

			gl.inferior_assigned = ON;	/* attribute(s) present */

		     end;

	     end;

     end;
%page;
	dcl     error_mode		 bit (1);		/* ON => error occurred, special handling in progress */
	dcl     relation_name	 char (32);	/* relation name for this call */
	dcl     sys_info$max_seg_size	 fixed bin (35) external; /* system constant */
	dcl     (fixed, rel, addr, null) builtin;	/* functions known to pl1 */
	dcl     ON		 bit (1) internal static options (constant) init ("1"b); /* true state */
	dcl     OFF		 bit (1) internal static options (constant) init ("0"b); /* false */
	dcl     error_code		 fixed binary (35); /* mrds_error_ table index */
	dcl     message		 char (256) varying;/* specifics of error message */
	dcl     message_length	 fixed bin (21);	/* length of specifics message */
	dcl     mrds_error_$rst_undone_option fixed bin (35) external; /* option not coded yet */
	dcl     mrds_error_$undef_attr fixed bin (35) external; /* item not in database */
	dcl     mrds_error_$dup_rel	 fixed bin (35) external; /* duplicate attr definition */
	dcl     mrds_rst_rsc_alloc	 entry (ptr, fixed bin, ptr); /* working area manager */
	dcl     mrds_rst_tree_search	 entry (char (32) aligned, ptr, ptr, ptr, bit (1)); /* list searcher */
	dcl     mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*)); /* general error handler */
	dcl     ioa_$rs		 entry options (variable); /* string manipulator */
	dcl     mrds_rst_list_element$add entry (char (32) aligned, fixed binary, ptr, ptr, ptr, fixed bin (35));
	dcl     list_ptr		 ptr;		/* pointer to parse info list */
	dcl     IN		 bit (1) internal static options (constant) init ("1"b); /* input meter flag */
	dcl     OUT		 bit (1) internal static options (constant) init ("0"b); /* output meter flag */
	dcl     mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*)); /* metering/tracing routine */
	dcl     attr_gl_ptr		 ptr;		/* temp storage for attribute global element pointer */
	dcl     dom_gl_ptr		 ptr;		/* pointer to attribute's domain global list element */
%page;
%include mrds_rst_rsc;
%page;
%include mrds_rst_struct_types;
%page;
%include mrds_rst_semantics;
%page;
%include mrds_rst_parse_info;
%page;
%include mrds_rst_tree;
%page;
%include mrds_rst_global_lists;


     end;
