/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

/*DESCRIPTION
  This module actually creates an unreferenced attribute. First, it verifies
  the input structure, creates the attribute/domain file if necessary, then
  builds the appropriate structures in the db model segment and adds these
  structures to the linked list of unreferenced attributes.
*/

/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     written
                                                   END HISTORY COMMENTS */

rmdb_create_attribute:
     proc (Irmdb_ctl_ptr, Icreate_attr_info_ptr, Oerror_message, Ocode);

/* Initialization */
	rmdb_ctl_ptr = Irmdb_ctl_ptr;
	create_attr_info_ptr = Icreate_attr_info_ptr;

	local_iocb = rmdb_ctl.crossref_file_info.iocb_ptr;
	dbm_ptr = rmdb_ctl.db_model_ptr;

/* Check input arguments */
	if create_attr_info.version ^= create_attr_info_version_1
	then call error (error_table_$unimplemented_version, "For create_attr_info structure.");

	if rmdb_ctl.absolute_db_path = ""
	then call error (mrds_error_$no_db_path, "");

	if create_attr_info.count = 0
	then call error (error_table_$wrong_no_of_args, "No attributes to be created.");

/* Check to see if the attributes named do not exist and the domains named
do exist. */
	if local_iocb = null
	then do;
	     call mdbm_util_$xref_build (rmdb_ctl.temp_dir_path, rmdb_ctl.absolute_db_path, dbm_ptr,
		rmdb_ctl.crossref_file_info.name, local_iocb, error_message, code);
	     if code ^= 0
	     then call error (code, error_message);
	     rmdb_ctl.crossref_file_info.iocb_ptr = local_iocb;
	     end;

	do loop = 1 to create_attr_info.count;
	     call mdbm_util_$xref_find_record (local_iocb, DOMAIN_KEY_HEAD, create_attr_info.attribute (loop).domain,
		null, 0, error_message, code);
	     if code = error_table_$no_record
	     then call error (mrds_error_$undefined_domain, create_attr_info.attribute (loop).domain);

	     call mdbm_util_$xref_find_record (local_iocb, ATTRIBUTE_KEY_HEAD, create_attr_info.attribute (loop).name,
		null, 0, error_message, code);
	     if code = 0
	     then call error (mrds_error_$attr_already_exists, create_attr_info.attribute (loop).name);
	     end;					/* do loop */

	crossref_info_record_ptr = addr (local_record_buffer);
	crossref_info_record.count = 0;

/* Finished verifying input structure, actually create them now. */
	do loop = 1 to create_attr_info.count;
	     call create_an_attribute (loop);
	     end;					/* do loop */

/* Finish up */
	call adjust_bit_count_ (rmdb_ctl.absolute_db_path, DB_MODEL_NAME, "1"b, bcnt, code);
	if code ^= 0
	then call error (code, pathname_ (rmdb_ctl.absolute_db_path, DB_MODEL_NAME));
	call error (0, "");

RETURN_TO_CALLER:
	return;

error:
     proc (code, msg);

dcl  code fixed bin (35) parameter;
dcl  msg char (*) parameter;

	Ocode = code;
	Oerror_message = msg;
	goto RETURN_TO_CALLER;
     end error;
%page;
/* This routine creates exactly one unreferenced attribute. First it locks the
db model segment, creates the necessary structure, initializes it, then links
it to the linked list of unreferenced attributes. It then unlocks the model
segment and adds the necessary history structure. Note: quits are noticed but
deferred until after critical code is finished. */

create_an_attribute:
     proc (attribute_index);

dcl  attribute_index fixed bin (17) parameter;

	quit_intercept_flag = "0"b;
	on quit quit_intercept_flag = "1"b;

	new_ua_ptr = null;				/* BEGINNING OF CRITICAL CODE */
	on cleanup
	     begin;
		call mdbm_util_$xref_destroy (rmdb_ctl.crossref_file_info.iocb_ptr, rmdb_ctl.temp_dir_path,
		     rmdb_ctl.crossref_file_info.name, (""), (0));
		if new_ua_ptr ^= null
		then free new_ua_ptr -> unreferenced_attribute in (dbm_area);

		call mdbm_util_$inconsistent_reset (dbm_ptr);
	     end;

	call mdbm_util_$inconsistent_set (dbm_ptr, "create_attribute",
	     "Creating attribute " || create_attr_info.attribute (attribute_index).name,
	     "delete_attribute -force -inhibit_error " || rtrim (create_attr_info.attribute (attribute_index).name));

/* Trap area conditions so that we can abort with a reasonable error message */
	on area
	     call error (error_table_$area_too_small,
		"No room left in the db_model segment area to add the attribute "
		|| create_attr_info.attribute (attribute_index).name);

/* Create the unreferenced_attribute structure */
	allocate unreferenced_attribute in (dbm_area) set (new_ua_ptr);
	unspec (new_ua_ptr -> unreferenced_attribute) = "0"b;
	revert area;

/* Add domain record to the crossreference file */
	call mdbm_util_$xref_reference (local_iocb, DOMAIN_KEY_HEAD,
	     create_attr_info.attribute (attribute_index).domain, create_attr_info.attribute (attribute_index).name,
	     crossref_info_record_ptr, 4, error_message, code);
	if code ^= 0
	then call error (code, error_message);

/* Add attribute record to crossreference file */
	call mdbm_util_$xref_create_record (local_iocb, ATTRIBUTE_KEY_HEAD,
	     create_attr_info.attribute (attribute_index).name, crossref_info_record.offset, error_message, code);
	if code ^= 0
	then call error (code, error_message);

/* Fill it the unreferenced_attribute structure. */
	new_ua_ptr -> unreferenced_attribute.name = create_attr_info.attribute (attribute_index).name;
	new_ua_ptr -> unreferenced_attribute.domain_ptr = crossref_info_record.offset;
	new_ua_ptr -> unreferenced_attribute.fwd_thread = NULL_OFFSET;

/* Mark the domain in db_model referenced */
	di_ptr = ptr (dbm_ptr, new_ua_ptr -> unreferenced_attribute.domain_ptr);
	domain_info.unreferenced = "0"b;

/* Add to the linked list */
	if db_model.unreferenced_attribute_ptr = NULL_OFFSET
	then db_model.unreferenced_attribute_ptr = rel (new_ua_ptr);
	else do;					/* chase down to end of list */
	     do ua_ptr = ptr (dbm_ptr, db_model.unreferenced_attribute_ptr)
		repeat ptr (dbm_ptr, unreferenced_attribute.fwd_thread) while (rel (ua_ptr) ^= NULL_OFFSET);
		prev_ua_ptr = ua_ptr;
		end;				/* do ua_ptr */
	     prev_ua_ptr -> unreferenced_attribute.fwd_thread = rel (new_ua_ptr);
	     end;

	call rmdb_add_rmdb_history (dbm_ptr, RMDB_ATTR_TYPE, create_attr_info.attribute (attribute_index).domain,
	     RMDB_ADD_ATTR_OP, create_attr_info.attribute (attribute_index).name, error_message, code);

	call mdbm_util_$inconsistent_reset (dbm_ptr);

	revert quit;				/* END OF CRITICAL CODE */
	if quit_intercept_flag
	then signal quit;

	if code ^= 0
	then call error (code, error_message);		/* from rmdb_add_rmdb_history */

	return;
     end create_an_attribute;
%page;
%include mdbm_db_model;
%include mdbm_file_model;
%include mrds_rmdb_ctl;
%include rmdb_create_attr_info;
%include rmdb_crossref_info;
%include rmdb_history_entry;
%page;
dcl  addr builtin;
dcl  adjust_bit_count_ entry (char (168), char (32), bit (1) aligned, fixed bin (35), fixed bin (35));
dcl  area condition;
dcl  bcnt fixed bin (35);				/* bit count */
dcl  cleanup condition;
dcl  code fixed bin (35);
dcl  DB_MODEL_NAME char (32) int static options (constant) init ("db_model");
dcl  error_message char (500);
dcl  error_table_$area_too_small fixed bin (35) ext static;
dcl  error_table_$no_record fixed bin (35) ext static;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext static;
dcl  fixed builtin;
dcl  Icreate_attr_info_ptr ptr parameter;
dcl  Irmdb_ctl_ptr ptr parameter;
dcl  local_iocb ptr;				/* attribute/domain file iocb */
dcl  local_record_buffer (4) fixed bin (35);		/* large enough to read the header of the crossref_info_record into */
dcl  loop fixed bin (17);				/* loop index */
dcl  mdbm_util_$inconsistent_reset entry (ptr);
dcl  mdbm_util_$inconsistent_set entry (ptr, char (*), char (*), char (*));
dcl  mdbm_util_$xref_build entry (char (*), char (*), ptr, char (*), ptr, char (*), fixed bin (35));
dcl  mdbm_util_$xref_create_record entry (ptr, char (*), char (*), bit (18), char (*), fixed bin (35));
dcl  mdbm_util_$xref_destroy entry (ptr, char (*), char (*), char (*), fixed bin (35));
dcl  mdbm_util_$xref_find_record entry (ptr, char (*), char (*), ptr, fixed bin (21), char (*), fixed bin (35));
dcl  mdbm_util_$xref_reference entry (ptr, char (*), char (*), char (*), ptr, fixed bin (21), char (*), fixed bin (35));
dcl  mrds_error_$attr_already_exists fixed bin (35) ext static;
dcl  mrds_error_$no_db_path fixed bin (35) ext static;
dcl  mrds_error_$undefined_domain fixed bin (35) ext static;
dcl  new_ua_ptr ptr;				/* points the new create unreferenced_attribute structure in the db_model */
dcl  null builtin;
dcl  NULL_OFFSET bit (18) unaligned int static options (constant) init ((18)"1"b);
dcl  Ocode fixed bin (35) parameter;
dcl  Oerror_message char (*) parameter;
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  prev_ua_ptr ptr;
dcl  ptr builtin;
dcl  quit condition;
dcl  quit_intercept_flag bit (1) aligned;		/* true ::= break key was pressed */
dcl  rel builtin;
dcl  rmdb_add_rmdb_history entry (ptr, fixed bin, char (32), fixed bin, char (32), char (500), fixed bin (35));
dcl  rtrim builtin;
dcl  sys_info$max_seg_size fixed bin (35) ext static;
dcl  unspec builtin;

     end rmdb_create_attribute;
