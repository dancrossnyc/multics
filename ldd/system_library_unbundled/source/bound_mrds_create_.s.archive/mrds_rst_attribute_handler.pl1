/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



/* HISTORY:

   originally written by jim gray - - october 1978

*/


mrds_rst_attribute_handler: procedure (rsc_ptr, list_ptr);


/* DESCRIPTION:

   this routine builds/alters the mrds database model attribute information
   and the global list of database entities maintained during CMDB/RMDB
   based upon the attribute data and directive that is active when
   it is called from the RMDB/CMDB parser.
   the directive may be undefine, define, redefine, or cmdb and the
   data is either an attribute name or a structure holding an
   attribute-domain name pair.

*/


/* PARAMETERS:

   rsc_ptr - - (input) pointer to the common control segment

   list_ptr - - (input) pointer to the single attribute name(undefine only),
   or to the attribute-domain name pair structure

   database model - - (output) updated model with altered attribute information

   global lists - - (output) the lists of database entities, updated
   according to the directive and data

   error_output - - (output) via calls to mrds_rst_error for error messages

*/

/* REMAINING ERRORS:

   undefine:

   the attribute name may be the <error_symbol>(this may be ignored)
   the attribute may not be defined in the model

   define, cmdb:

   the attribute name may be the <error_symbol>(this may be ignored)
   the domain name may be the <error_symbol>(this may be ignored)
   the attribute may already be defined in the model
   the domain may not be defined in the model

   redefine:

   same as under define, except the attribute may not be defined

   note: "(this may be ignored)" means a previous error will prevent
   a database model with erroneous data fom being built

*/

/* call trace if metering is on */

	directive_ptr = rsc_ptr -> rsc.directive_ptr;
	stmt_ptr = rsc_ptr -> rsc.stmt_ptr;

	if directive.type = UNDEFINE then do;		/* input structure depends on directive */
		delete_name_ptr = list_ptr;
		attribute_name = delete_name.overlay;
	     end;
	else do;
		attdom_ptr = list_ptr;
		attribute_name = attribute_domain.attr;
	     end;

	if ^rsc.trace_sw then ;
	else call mrds_rst_meter (rsc_ptr, "mrds_rst_attribute_handler",
		IN, (attribute_name));

/* check on which directive called us */

	if directive.type = UNDEFINE | directive.type = REDEFINE then do;
		if stmt (directive.type).attribute.number > 0 then ; /* not first time */
		else do;				/* issue error first time only */
			call ioa_$rs ("^a ^a", message, message_length,
			     "The attribute handler will not implement ""undefine"" or ""redefine""",
			     "directives until a later release.");
			call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$rst_undone_option, (message));
		     end;
	     end;
	else do;

/* define or cmdb directive was caller, process newly defined attribute-domain correspondence */

		call define_attribute_domain ();

	     end;

/* call the trace routine if metering is turned on */

	if ^rsc.trace_sw then ;
	else call mrds_rst_meter (rsc_ptr, "mrds_rst_attribute_handler",
		OUT, (attribute_name));

define_attribute_domain: procedure ();

/* routine to make the definition correspondence of an attribute to a domain */


/* make sure the attribute is not already in the database or previously defined */

	call mrds_rst_list_element$add (attribute_domain.attr, MAIN_LIST, rsc_ptr,
	     rsc.h_gattr_ptr, gl_ptr, error_code);
	if error_code = 0 then ;
	else do;
		call ioa_$rs ("^a^a^a ^d ^a", message, message_length, "The attribute """, attribute_domain.attr,
		     """ given on line", attribute_domain.line_num,
		     "is already defined in the database, the duplicate will be ignored!!");
		call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$attr_already_exists, (message));
		call mrds_rst_rsc_alloc (rsc_ptr, GL, gl_ptr); /* make dummy global element not in list */
	     end;

/* attribute was not found in list so it was added,   link list element to list head and fill in the blanks */

	gl.type = MAIN_LIST;
	gl.name = attribute_domain.attr;
	gl.item_info_ptr = null ();			/* no domain sublist element yet */
	gl.parse_info_ptr = attdom_ptr;
	gl.other_info_ptr = null ();			/* no domain_info yet */
	gl.item_sub_list_ptr = null ();		/* no containing relations yet */
	gl.file_info_ptr = null ();			/* unused, this and fm_ptr obtained from corresponding */
	gl.file_model_ptr = null ();			/* relation's attr sublist ai_ptr via the pointer function */
	gl.affected = ON;
	gl.undefine = OFF;
	gl.redefine = OFF;
	if directive.type = DEFINE then do;
		gl.define = ON;
		gl.cmdb = OFF;
	     end;
	else do;					/* CMDB directive */
		gl.define = OFF;
		gl.cmdb = ON;
	     end;
	gl.superior_assigned = OFF;			/* no relation for this attribute yet */
	gl.inferior_assigned = OFF;			/* no domain for this attribute yet */
	gl.complete = OFF;				/* no attribute info yet */
	gl.consistant = ON;				/* assume good til errors found */
	gl.reserved = OFF;

/* make sure that the given domain is defined in the database */

	call mrds_rst_tree_search (attribute_domain.dom, rsc.h_gdom_ptr, node_ptr, parent_ptr, success);
	if ^success then do;			/* not found */
		gl.consistant = OFF;		/* no domain for this attribute */
		call ioa_$rs ("^a^a^a^a^a ^d ^a", message, message_length,
		     "The domain """, attribute_domain.dom, """ given for attribute """,
		     attribute_domain.attr, """ on line",
		     attribute_domain.line_num, "has not been defined in the database.");
		call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$undefined_domain, (message));
	     end;
	else if error_code ^= 0 then ;		/* previous error => attr not found, don't add to sublist */
	else do;
		dom_gl_ptr = node_ptr -> node.data;	/* get domain global element pointer */

/* domain found, add this attribute to it's referencing sublist */

		call mrds_rst_list_element$add (attribute_domain.attr, SUB_LIST, rsc_ptr,
		     dom_gl_ptr -> gl.item_sub_list_ptr, sl_ptr, error_code);
		if error_code ^= 0 then do;		/* sub/main list disagreement */
			call ioa_$rs ("^a^a^a^a^a", message, message_length,
			     "LOGIC ERROR in mrds_rst_attribute_handler, the attribute """, attribute_domain.attr,
			     """ was found in the sublist of domain """, attribute_domain.dom,
			     """ but wasn't found in the global attribute list.");
			call mrds_rst_error (rsc_ptr, 4 /* severity */, error_code, (message));
		     end;
		else do;

/* fill in the sub list element info */

			sl.type = SUB_LIST;
			sl.name = attribute_domain.attr;
			sl.item_info_ptr = null ();	/* no attribute_info yet */
			sl.parse_info_ptr = attdom_ptr;
			sl.old_other_info_ptr = null ();
			sl.new_other_info_ptr = dom_gl_ptr;
			sl.global_list_ptr = gl_ptr;
			sl.reserved = OFF;

/* set domain present for this attribute, and get the domain info and sublist pointers */

			gl.item_info_ptr = sl_ptr;
			gl.other_info_ptr = dom_gl_ptr -> gl.item_info_ptr; /* set domain_info ptr for attr */
			gl.inferior_assigned = ON;
			dom_gl_ptr -> gl.inferior_assigned = ON; /* attr references domain now */
		     end;
	     end;

     end;

	declare sys_info$max_seg_size	 fixed bin (35) external; /* system constant */
	declare (fixed, rel, addr, null) builtin;	/* functions known to pl1 */
	declare ON		 bit (1) internal static options (constant) init ("1"b); /* true state */
	declare OFF		 bit (1) internal static options (constant) init ("0"b); /* false */
	declare error_code		 fixed binary (35); /* mrds_error_ table index */
	declare message		 char (256) varying;/* specifics of error message */
	declare message_length	 fixed bin (21);	/* length of specifics message */
	declare mrds_error_$rst_undone_option fixed bin (35) external; /* option not coded yet */
	declare mrds_error_$undefined_domain fixed bin (35) external; /* item not in database */
	declare mrds_error_$attr_already_exists fixed bin (35) external; /* duplicate attr definition */
	declare mrds_rst_tree_search	 entry (char (32) aligned, ptr, ptr, ptr, bit (1)); /* list searcher */
	declare mrds_rst_rsc_alloc	 entry (ptr, fixed bin, ptr); /* work area manager */
	declare mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*)); /* general error handler */
	declare ioa_$rs		 entry options (variable); /* string manipulator */
	declare mrds_rst_list_element$add entry (char (32) aligned, fixed binary, ptr, ptr, ptr, fixed bin (35));
	declare list_ptr		 ptr;		/* pointer to parse info list */
	declare IN		 bit (1) internal static options (constant) init ("1"b); /* input meter flag */
	declare OUT		 bit (1) internal static options (constant) init ("0"b); /* output meter flag */
	declare mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*)); /* metering/tracing routine */
	declare dom_gl_ptr		 ptr;		/* temp storage for domain global element pointer */
	declare attribute_name	 char (32);	/* input name for metering */

%include mrds_rst_rsc;
%include mrds_rst_struct_types;
%include mrds_rst_semantics;
%include mrds_rst_parse_info;
%include mrds_rst_tree;
%include mrds_rst_global_lists;


     end;
