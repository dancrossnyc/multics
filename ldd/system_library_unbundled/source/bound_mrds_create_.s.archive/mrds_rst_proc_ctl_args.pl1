/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-19,Blair), approve(88-09-19,MCR7995), audit(88-09-20,Dupuis),
     install(88-09-26,MR12.2-1119):
     Make sure that arg_info.relation_mode_flags has a null value when we
     process -vf so that if vfile was specified after -dm it will
     successfully override any previously set modes. TR 21051.
                                                   END HISTORY COMMENTS */


mrds_rst_proc_ctl_args: proc (arg_list_ptr, ai_ptr, suffix_flag,
	default_relation_mode_flags, fatal_sw);

/* 
                   BEGIN_DESCRIPTION
   The purpose of this procedure is to process the command level control
   arguments for the rmdb and cmdb commands.

   arg_list_ptr	ptr;		(INPUT)  Pointer to Multics command level argument list
   ai_ptr		ptr;		(INPUT) Pointer to arg_info structure
   suffix_flag	bit(1);		(input) ON => enforce ".db" suffix in database pathname
   default_relation_mode_flags struct   (input)  Defaults for creating relations
   fatal_sw	bit (1);		(OUTPUT) On = fatal error occured during argument processing
   (do not continue after return).

   All error messages will be reported from this procedure via com_err_
   What to do upon return from this procedure should be decided
   as a result of the fatal_sw (If ON do not continue)

   If the fatal_sw is OFF then arg_info will reflect the argument info supplied
   and any defaults not supplied.
                   END_DESCRIPTION

                   HISTORY
   Written by R. D. Lackey March 1979

   Modified by Jim Gray - - June 1979 to enforce MR7.0 database pathname suffix ".db"

   Modified by Jim Gray - - June 1980, to remove -control from usage
   statment to agree with documentation for this release.

   Modified by Jim Gray - - 80-11-06, to add "-secure" option to cmdb control arg processing.

   81-04-28 Jim Gray : added -no_list, -no_secure, and -force options.

   81-09-25 Davids: changed the internal procedure get_source so that it no longer
   determines if the source arg had a suffix and if not added it instead it just
   calls expand_pathname_$add_suffix. A stringrange error was occuring on source
   names less than 5 characters. Also changed the declaration of entry_name from
   char (32) varying to char (4). It is being used to hold the suffix "cmdb" or "rmdb"

   82-08-19 Davids: added processing for control arguments -page_file (-pf)
   and -vfile (-vf)

   82-11-23 Davids: added the default_db_type parameter and changed so that
   arg_info.db_type is set from default_db_type instead of the constant "vf".

   83-02-18 Mike Kubicar : Ripped out all code relating to the obsolete
   restructure_mrds_db.  Added the -dm_file option and its corresponding
   mode string to describe the properties for creating relations.

   83-10-04 Paul Benjamin: to check whether or not the offending arg is a
   control arg before returning et$badopt and return et$bad_arg instead.

   84-09-06 Paul Benjamin: to  change -dm_file to -data_management_file but
   retain the former as undocumented form.
*/
%page;
/* START */

	fatal_sw = OFF;
	call init_arg_info;				/* Init arg_info structure */

	call cu_$arg_count_rel (nargs, arg_list_ptr);	/* Get the number of arguments in list */

	entry_name = "cmdb";
	dm_file_mode_string = "";
	if nargs < 1 then /* Got to have at least the cmdb source path */
	     call error (error_table_$wrong_no_of_args, "create_mrds_db
Usage:  cmdb source_path {database_path -control_args...}^/");

	else call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, arg_list_ptr);
	if code ^= 0 then call error (code, "Argument number 1");

	call get_source (arg, entry_name);		/* Stuff absolute path name of source in arg_info */

	rel_db_path = before (arg_info.source_entry, "." || entry_name); /* Init in case no data base path is */
						/*    use source entry name without entry_name component */

	if nargs > 1 then do i = 2 to nargs;		/* Set option flags if any */
		call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, arg_list_ptr);
		if code ^= 0 then call error (code, "parameter " || arg);

		opt_ok = OFF;

		if i = 2 then do;			/* See if they supplied a data base path */
			if ^is_ctl_option (arg) then do;
				opt_ok = ON;
				rel_db_path = arg;
			     end;


		     end;

		if arg = "-no_list" | arg = "-nls" then do;
			opt_ok = ON;
			arg_info.list = OFF;
		     end;
		else if arg = "-ls" | arg = "-list" then opt_ok, arg_info.list = ON; /*       -list option */
		else if arg = "-secure" then opt_ok, arg_info.secure = ON; /* set secured bit in model option */
		else if arg = "-no_secure" then do;
			opt_ok = ON;
			arg_info.secure = OFF;
		     end;
		else if arg = "-no_force" | arg = "-nfc" then do;
			opt_ok = ON;
			arg_info.force = OFF;
		     end;
		else if arg = "-force" | arg = "-fc" then do;
			opt_ok = ON;
			arg_info.force = ON;
		     end;
		else if arg = "-td" | arg = "-temp_dir" then do; /* temp directory option */
			arg_info.twd = ON;
			opt_ok = ON;

			i = i + 1;		/* Position to next arg (should be temp_dir path) */
			if i > nargs then call error (mrds_error_$no_temp_dir, "");
			else call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, arg_list_ptr);
			if code ^= 0 then call error (code, "Temp_directory");

			if is_ctl_option (arg) then
			     call error (mrds_error_$no_temp_dir, "");
			call absolute_pathname_ (arg, arg_info.temp_work_dir, code);
			if code ^= 0 then call error (code, arg);
		     end;
		else if arg = "-vfile" | arg = "-vf"
		then do;
			opt_ok = ON;
			arg_info.relation_mode_flags = "0"b;
                              dm_file_mode_string = "";
		     end;
		else if arg = "-data_management_file" | arg = "-dmf" 
		     | /* undocumented */ arg = "-dm_file" then do;
			opt_ok = ON;
			arg_info.relation_mode_flags.dm_file_type = "1"b;
			arg_info.relation_mode_flags.protection_on = "1"b;
			arg_info.relation_mode_flags.concurrency_on = "1"b;
			arg_info.relation_mode_flags.rollback_on = "1"b;
			call cu_$arg_ptr_rel ((i + 1), arg_ptr, arg_len,
			     code, arg_list_ptr);
			if (code ^= 0) & (code ^= error_table_$noarg)
			then call error (code, "Argument number "
				|| ltrim (char ((i + 1), 20)));
			if code ^= error_table_$noarg
			then if ^is_ctl_option (arg) then do;
				     if length (arg) > length (dm_file_mode_string)
				     then call error (error_table_$bigarg, "Mode string is too long.");
				     dm_file_mode_string = arg;
				     i = i + 1;
				end;
		     end;

		if ^opt_ok
		then do;
			if is_ctl_option (arg)
			then call error (error_table_$badopt, arg);
			else call error (error_table_$bad_arg, arg);
		     end;
	     end;					/* END DO I = 2 TO NARGS */


/* Take care of the mode string */

	call set_modes (dm_file_mode_string, arg_info.relation_mode_flags);


/* make  absolute path of data base directory */

	if ^suffix_flag then
	     call absolute_pathname_ (rel_db_path, arg_info.db_dir_path, code);
	else call absolute_pathname_$add_suffix (rel_db_path, db_suffix, arg_info.db_dir_path, code);

	if code ^= 0 then call error (code, rel_db_path);

exit:	return;					/* Only return from this procedure */
%page;
/**********
*
*   This routine is used to parse the mode string needed by the dm_file
*   argument and check it for consistency.  It calls mode_string_$parse
*   to parse the string and then goes through the mode_string_info
*   structure, setting bits in the "mode_bits" parameter to reflect the
*   state of the mode string.
*
**********/

set_modes:
     proc (mode_string, mode_bits);

/* Parameters */

	dcl     mode_string		 char (*);	/* The mode string in the command line */
	dcl     1 mode_bits		 like db_relation_modes; /* Structure describing the file characteristics */

/* Local definitions */

	dcl     error_table_$bad_mode_value fixed bin (35) ext static;
	dcl     error_table_$undefined_mode fixed bin (35) ext static;
	dcl     error_table_$unimplemented_version fixed bin (35) ext static;
	dcl     mode_string_$parse	 entry (char (*), ptr, ptr, fixed bin (35));

	dcl     code		 fixed bin (35);	/* Error code */
	dcl     i			 fixed bin;	/* Loop variable */
	dcl     local_area		 area;		/* For call to mode_string_$parse */
	dcl     1 mode_defined,			/* The corresponding bit is set if the mode
						   string contains the mode */
		2 protection	 bit (1),
		2 rollback	 bit (1),
		2 concurrency	 bit (1);

/* Include file */

%include mode_string_info;


/* Procedure */

	if mode_string = ""				/* No string given so there's nothing to do */
	then return;
	unspec (mode_defined) = "0"b;
	call mode_string_$parse (mode_string, addr (local_area),
	     mode_string_info_ptr, code);
	if code ^= 0
	then call error (code, "While trying to parse the mode string.");
	if mode_string_info.version ^= mode_string_info_version_2
	then call error (error_table_$unimplemented_version,
		"The mode_string_info structure is not version two.");
	if mode_string_info.modes (1).version ^= mode_value_version_3
	then call error (error_table_$unimplemented_version,
		"The mode_value structure is not version three.");

/* Now walk through the returned structure and examine the modes */

	do i = 1 to mode_string_info.number;
	     if mode_string_info.modes (i).mode_name = "protection" then do;
		     if ^mode_string_info.modes (i).flags.boolean_valuep
		     then call error (error_table_$bad_mode_value,
			     "Protect must be a boolean mode value.");
		     mode_defined.protection = "1"b;
		     mode_bits.protection_on =
			mode_string_info.modes (i).flags.boolean_value;
		end;
	     else if mode_string_info.modes (i).mode_name = "rollback" then do;
		     if ^mode_string_info.modes (i).flags.boolean_valuep
		     then call error (error_table_$bad_mode_value,
			     "rollback must be a boolean mode value.");
		     mode_defined.rollback = "1"b;
		     mode_bits.rollback_on
			= mode_string_info.modes (i).flags.boolean_value;
		end;
	     else if mode_string_info.modes (i).mode_name = "concurrency" then do;
		     if ^mode_string_info.modes (i).flags.boolean_valuep
		     then call error (error_table_$bad_mode_value,
			     "Concurrency must be a boolean mode value.");
		     mode_defined.concurrency = "1"b;
		     mode_bits.concurrency_on
			= mode_string_info.modes (i).flags.boolean_value;
		end;
	     else call error (error_table_$undefined_mode,
		     mode_string_info.modes (i).mode_name);
	end;

/*
*
* Check the file attributes for consistency.  Neither concurrency or
* before journalling can be specified unless the file is protected.
* It is valid however, to specify ^protection and not specify either
* rollback or concurrency.  In that case, the latter two modes
* will default to off.
*
*/

	if mode_bits.dm_file_type			/* All bits are zero for vfile */
	then if mode_defined.protection & ^mode_bits.protection_on then do; /* Force undefined bits to off */
		     if ^mode_defined.concurrency
		     then mode_bits.concurrency_on = "0"b;
		     if ^mode_defined.rollback
		     then mode_bits.rollback_on = "0"b;
		end;
	if mode_bits.rollback_on & ^mode_bits.protection_on
	then call error (error_table_$bad_mode_value,
		"Rollback cannot be specified without protection.");
	if mode_bits.concurrency_on & ^mode_bits.protection_on
	then call error (error_table_$bad_mode_value,
		"Concurrency cannot be specified without protection.");

     end set_modes;
%page;
error: proc (cd, msg);

	dcl     cd		 fixed bin (35);
	dcl     msg		 char (*);	/* Detailed error message (may be null) */

	if entry_name = "cmdb" then do;
		call com_err_ (cd, entry_name, msg);
		fatal_sw = ON;			/* Indicate that an error occured */
	     end;
	else do;
		sm_err_code = cd;
		sm_err_msg = msg;
	     end;
	goto exit;

     end error;
%page;
is_ctl_option: proc (iarg) returns (bit (1));

/* This procedure checks the supplied argument to see if it is a control arg */

	dcl     iarg		 char (*);	/* (INPUT) Input argument */

	if length (iarg) < 1
	then return ("0"b);
	else return (substr (iarg, 1, 1) = "-");
     end is_ctl_option;
%page;
get_source: proc (source, en);

/* This procedure given a source segment path sets the source directory path and
   entry in arg_info with the proper suffix if not supplied. */

	dcl     source		 char (*);	/* (INPUT) source segment name */
	dcl     en		 char (*);	/* (INPUT) entry name (rmdb or cmdb) */

	if is_ctl_option (arg) then /* Did not give a source path */
	     call error (mrds_error_$bad_source_path, arg || "
      First argument must be a source pathname.");

	call expand_pathname_$add_suffix (source, en, arg_info.source_dir, arg_info.source_entry, code);
	if code ^= 0 then call error (code, source);

     end get_source;
%page;
init_arg_info: proc;

	arg_info.list = OFF;
	arg_info.twd = OFF;
	arg_info.secure = OFF;
	arg_info.force = OFF;
	arg_info.source_dir = BLANK;
	arg_info.source_entry = BLANK;
	arg_info.db_dir_path = BLANK;
	arg_info.temp_work_dir = get_pdir_ (); ;	/* This will be changed if a twd arg is supplied */
	arg_info.relation_mode_flags = default_relation_mode_flags;

     end init_arg_info;
%page;
/**********
*
*  Entry point for parsing a dm_file mode string.
*
***********/

parse_mode_string: entry (external_mode_string, external_mode_bits, sm_err_code, sm_err_msg);


/* Parameters */

	dcl     external_mode_string	 char (*) parm;
	dcl     1 external_mode_bits	 like db_relation_modes;
	dcl     sm_err_code		 fixed bin (35);
	dcl     sm_err_msg		 char (*);

	sm_err_code = 0;
	sm_err_msg = "";
	call set_modes (external_mode_string, external_mode_bits);
	return;

%page;
/*	PARAMETERS	*/

	dcl     arg_list_ptr	 ptr;		/* (INPUT) */

/*      ai_ptr ptr;					/* (INPUT) */
	dcl     1 default_relation_mode_flags /* (INPUT) */
				 like db_relation_modes;
	dcl     fatal_sw		 bit (1);		/* (OUTPUT) */

/*	OTHERS		*/

	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     arg_len		 fixed bin (21);
	dcl     arg_ptr		 ptr;
	dcl     code		 fixed bin (35);
	dcl     dm_file_mode_string	 char (200);
	dcl     entry_name		 char (4);
	dcl     opt_ok		 bit (1);
	dcl     rel_db_path		 char (168);	/* Relative database path */
	dcl     nargs		 fixed bin;
	dcl     i			 fixed bin;

	dcl     (addr, before, char, empty, length, ltrim,
	        substr, unspec)	 builtin;

/*	SUBROUTINES	*/

	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
	declare absolute_pathname_$add_suffix entry (char (*), char (*), char (*), fixed bin (35)); /* appends suffix to path */
	declare db_suffix		 char (3) init ("db") int static options (constant); /* MR7.0 database directory pathname suffic */
	declare suffix_flag		 bit (1);		/* on => use ".db" suffix in database path */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* incorrect args count */
	dcl     cu_$arg_count_rel	 entry (fixed bin, ptr);
	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	dcl     com_err_		 entry options (variable);
	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     get_pdir_		 entry returns (char (168));


/*	CONSTANTS		*/

	dcl     BLANK		 char (1) int static options (constant) init (" ");
	dcl     OFF		 bit (1) int static options (constant) init ("0"b);
	dcl     ON		 bit (1) int static options (constant) init ("1"b);

/*	ERROR CODES	*/

	dcl     error_table_$bad_arg	 ext fixed bin (35);
	dcl     error_table_$badopt	 ext fixed bin (35);
	dcl     error_table_$noarg	 fixed bin (35) ext static;
	dcl     error_table_$bigarg	 fixed bin (35) ext static;
	dcl     mrds_error_$bad_source_path ext fixed bin (35);
	dcl     mrds_error_$no_temp_dir ext fixed bin (35);
%page;
%include mrds_rst_arg_info;

     end mrds_rst_proc_ctl_args;
