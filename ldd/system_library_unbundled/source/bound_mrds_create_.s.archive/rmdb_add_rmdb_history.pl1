/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

rmdb_add_rmdb_history:
add_rmdb_history:
     proc (db_model_ptr, type_of_object_restructured, object_name,
	operation, secondary_object_name, error_message, code);


/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-02,Blair), install(86-10-16,MR12.0-1187):
     Add new operations create_(attribute domain), delete_(attribute domain),
     rename_(attribute domain)
                                                   END HISTORY COMMENTS */


/*
   .		       BEGIN_DESCRIPTION
   This procedure is used to record a database  restructuring  event
   in the data model by allocating a rmdb_history_entry structure in
   the data model and linking it to the  end  of  a  chain  of  such
   structures   which   record   previous   events.   The  chain  is
   doubly  linked with offsets to the first and last elements in the
   data model.

   There  are  three  objects  in  a  mrds  database  that  can   be
   restructured:  domains,  attributes  and  relations.  Things like
   indices and edit_procs  are  considered  part  of  relations  and
   domains respectively.

   This code has developed  it  own  data  structures  to  record  a
   restructuring  event  rather  than  using  the changer structures
   which are already in the data and file models and  were  designed
   to  be  used  when  restructuring was implemented. The reason for
   this is two fold. First the  changer  structures  are  associated
   with  each  of  the  domain,  attribute,  and relation structures
   therefore certain types of restructuring like adding a  secondary
   index  to  a relation would see two changer structures allocated,
   one for the relation  and  one  for  the  attribute.  Second  the
   changer structures record only the date-time of the event and the
   person id  who  did  it  but  not  what  was  done.  The  changer
   structures  where  not removed from the data and file models when
   this code  was  implemented  becuase  one  only  1  structure  is
   actually  allocated  and  that  one contains the date-time of the
   creation and the creator of the  database  which  is  still  very
   usefull.  Second for compatability reasons the data base and file
   models must remain the same size so the 18 bits used to store the
   offset to the structure would still have to be in the models.

   quits are delayed while the datamodel is actually being updated.
   .		       END_DESCRIPTION

   Known Bugs:

   Other Problems:

   .                       HISTORY
   82-04-13 Davids: written

   82-05-04 Davids: modified so that the rmdb_history_entry  list
   .                is  doubly  linked  with offsets to the first
   .                and last entries in the data model.

   82-06-22 Davids: declared some implicitly  declared  builtins,
   .                changed  call to clock_ to a reference to the
   .                pl1  clock  builtin,  and  put  a  quit_delay
   .                sequence around the allocate and link code.

   82-07-07 Roger Lackey: added rmdb_add_history entry point for binding.
*/

   /* PARAMETERS */

	dcl     db_model_ptr	 ptr;		/* (input) pointer to the database model */
	dcl     type_of_object_restructured fixed bin;	/* (input) index indicating the type of
						   .       object that has been restructured */
	dcl     object_name		 char (32);	/* (input) name of the object that has been restructured */
	dcl     operation		 fixed bin;	/* (input) index indicating the
						   .       type of restructuring that was done */
	dcl     secondary_object_name	 char (32);	/* (input) name of any secondary object involved with
						   .       the restructuring, i.e. attr name that was indexed */
	dcl     error_message	 char (500);	/* (output) standard error message */
	dcl     code		 fixed bin (35);	/* (output) standard error code */

/* INTERNAL AUTOMATIC */

	dcl     last_rmdb_history_entry_ptr ptr;	/* pointer to last entry in history list */
	dcl     new_rmdb_history_entry_ptr ptr;		/* pointer to the structure just allocated */
	dcl     quit_signaled	 bit (1);		/* true if the user hit a quit during the
                                                               execution of the critical region */

/* INTERNAL CONSTANTS */

	dcl     NULL_OFFSET		 bit (18) init ("111111111111111111"b) internal static options (constant);

/* EXTERNAL CONSTANTS */

	dcl     error_table_$action_not_performed fixed bin (35) ext static;
	dcl     error_table_$area_too_small fixed bin (35) ext static;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;


/* ENTRIES */

	dcl     get_group_id_	 entry () returns (char (32));
	dcl     ioa_$rs		 entry () options (variable);

/* CONDITIONS */

	dcl     area		 condition;
	dcl     quit		 condition;


/* BUILTINS */

	dcl     addr		 builtin;
	dcl     clock		 builtin;
	dcl     fixed		 builtin;
	dcl     length		 builtin;
	dcl     pointer		 builtin;
	dcl     rel		 builtin;

/* INCLUDES */
%page;
%include mdbm_db_model;
%page;
%include rmdb_history_entry;

/*
   The user has not yet hit a quit
*/

	quit_signaled = "0"b;



/*
   Check the ranges on the object_type and operation to be sure that
   garbage will not be stored in the model.
*/


	if type_of_object_restructured < 1 | type_of_object_restructured > RMDB_REL_TYPE
	then do;
		code = error_table_$action_not_performed;
		call ioa_$rs ("type of object restructured indicator <^i> not within range of 1 -- ^i",
		     error_message, length (error_message), type_of_object_restructured, RMDB_REL_TYPE);
		goto exit_rmdb_add_rmdb_history;
	     end;
	else
	     if operation < 1 | operation > RMDB_RN_REL_OP
	then do;
		code = error_table_$action_not_performed;
		call ioa_$rs ("type of operation indicator <^i> not within range of 1 -- ^i",
		     error_message, length (error_message), operation, RMDB_RN_REL_OP);
		goto exit_rmdb_add_rmdb_history;
	     end;
	else do;
		error_message = "";
		code = 0;
	     end;





/*
   In the event that the area in the data model  is  so  small  that
   another  rmdb_history_event structure cannot be allocated, return
   a suitable message to the user instead of having him blow up with
   an area condition.
*/


	on area begin;
		error_message = "Area in model is not large enough to " ||
		     "allocate another history entry - database will not be restructured";
		code = error_table_$area_too_small;
		goto exit_rmdb_add_rmdb_history;
	     end;

/*
   Make sure that the caller  cannot  interrupt  while  the  history
   entry is being added to the model. But if he hits a quit remember
   so it can be signaled after the model is updated.
*/

	on quit quit_signaled = "1"b;



/*
   allocate a new the rmdb_history_entry structure and fill it.
*/

	allocate rmdb_history_entry set (new_rmdb_history_entry_ptr) in (db_model_ptr -> db_model.dbm_area);

	new_rmdb_history_entry_ptr -> rmdb_history_entry.user_id = get_group_id_ ();
	new_rmdb_history_entry_ptr -> rmdb_history_entry.date_time_restructured = clock;
	new_rmdb_history_entry_ptr -> rmdb_history_entry.type_of_object_restructured = type_of_object_restructured;
	new_rmdb_history_entry_ptr -> rmdb_history_entry.object_name = object_name;
	new_rmdb_history_entry_ptr -> rmdb_history_entry.operation = operation;
	new_rmdb_history_entry_ptr -> rmdb_history_entry.secondary_object_name = secondary_object_name;
	new_rmdb_history_entry_ptr -> rmdb_history_entry.offset_to_next_entry = NULL_OFFSET;





/*
   Link  the  new  structure  to  the  end  of  the  chain.   If the
   first_restructuring_history_offset  in  the  db_model  is null it
   implies  that this is the first restructuring event and that this
   structure   will   be   the   first   in   the   list.    If  the
   restructuring_history_offset     is     not    null    use    the
   last_restructuring_history_offset  to  find the last entry in the
   list.     The    last    thing    done    is    to   update   the
   last_restructuring_history_offset  in  the  data  model  with the
   offset to the just created structure.
*/


	if db_model_ptr -> db_model.first_restructuring_history_offset = NULL_OFFSET
	then do;
		db_model_ptr -> db_model.first_restructuring_history_offset = rel (new_rmdb_history_entry_ptr);
		new_rmdb_history_entry_ptr -> rmdb_history_entry.offset_to_previous_entry = NULL_OFFSET;
	     end;
	else do;
		last_rmdb_history_entry_ptr = pointer (db_model_ptr,
		     db_model_ptr -> db_model.last_restructuring_history_offset);
		last_rmdb_history_entry_ptr -> rmdb_history_entry.offset_to_next_entry = rel (new_rmdb_history_entry_ptr);
		new_rmdb_history_entry_ptr -> rmdb_history_entry.offset_to_previous_entry =
		     db_model_ptr -> db_model.last_restructuring_history_offset;
	     end;

	db_model_ptr -> db_model.last_restructuring_history_offset = rel (new_rmdb_history_entry_ptr);

exit_rmdb_add_rmdb_history:

/*
   If the user hit a quit now is the time to signal it for him 
*/

	if quit_signaled
	then do;
		revert quit;
		signal quit;
	     end;

	return;
     end rmdb_add_rmdb_history;
