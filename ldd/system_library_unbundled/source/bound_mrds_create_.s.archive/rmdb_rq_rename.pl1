/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

/*DESCRIPTION
  This set of routines parses the command line for the rename_(attribute
  domain relation) requests of the restructure_mrds_db subsystem.
*/


/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     written.
  2) change(86-12-05,Blair), approve(86-12-05,PBF7311), audit(86-12-05,Dupuis),
     install(86-12-09,MR12.0-1237):
     Null out the request info_structure ptr so that tidy_up works properly.
                                                   END HISTORY COMMENTS */

rmdb_rq_rename:
     proc;

	return;

rmdb_rq_rename$attribute:
     entry (Isci_ptr, Iinfo_ptr);

	type = RENAME_ATTRIBUTE;
	goto START;

rmdb_rq_rename$domain:
     entry (Isci_ptr, Iinfo_ptr);

	type = RENAME_DOMAIN;
	goto START;

rmdb_rq_rename$relation:
     entry (Isci_ptr, Iinfo_ptr);

	type = RENAME_RELATION;
	goto START;

START:
	sci_ptr = Isci_ptr;
	rmdb_ctl_ptr = Iinfo_ptr;
          rename_object_info_ptr = null;
	
	on cleanup call tidy_up;
/* Get number of arguments, must be an even number. */
	call ssu_$arg_count (sci_ptr, nargs);
	if nargs = 0 | (mod (nargs, 2) = 1)
	then
USAGE:
	     call error (error_table_$wrong_no_of_args, "^/Usage: " || myname (type) || " from1 to1 {...fromN toN}");

	rename_object_info_count = divide (nargs, 2, 17, 0);
	allocate rename_object_info in (my_area) set (rename_object_info_ptr);
	rename_object_info.version = rename_object_info_version_1;
	rename_object_info.type = type;

	idx = 1;
	do loop = 1 to nargs;
	     call ssu_$arg_ptr (sci_ptr, loop, argp, argl);

	     if argl = 0
	     then goto USAGE;

	     if argl > 30 & type = RENAME_RELATION
	     then call error (mrds_error_$rel_name_too_long, arg);
	     if argl > 32
	     then call error (mrds_error_$long_ident, arg);

	     if verify (arg, mrds_data_$valid_rel_and_attr_name_chars) ^= 0
	     then do;
		if type = RENAME_RELATION
		then code = mrds_error_$bad_rel_name;
		else if type = RENAME_ATTRIBUTE
		     then code = mrds_error_$bad_attr_name;
		     else code = mrds_error_$bad_ident;
		call error (code, arg);
		end;
	     if search (substr (arg, 1, 1), "-_") ^= 0
	     then do;
		if type = RENAME_RELATION
		then code = mrds_error_$inv_rel_name_first_char;
		else if type = RENAME_ATTRIBUTE
		     then code = mrds_error_$inv_attr_name_first_char;
		     else code = mrds_error_$inv_domain_name_first_char;
		call error (code, arg);
		end;

	     if mod (loop, 2) = 1
	     then rename_object_info.from (idx) = arg;
	     else do;
		rename_object_info.to (idx) = arg;
		idx = idx + 1;
		end;

	     end;					/* do loop */

/* Make sure we have an open database. */
	if rmdb_ctl.absolute_db_path = ""
	then call error (error_table_$action_not_performed,
		"^/There is no currently readied database.");

/* Determine whether or not we need to clean up from a previous operation. */
	call mdbm_util_$inconsistent_get_info (rmdb_ctl.db_model_ptr, incon_value, incon_name, unused2, undo_request);
	if incon_value
	then call rmdb_execute_undo (sci_ptr, "create_attribute", rmdb_ctl.absolute_db_path, rmdb_ctl.db_model_ptr,
		incon_name, undo_request);

	call rmdb_rename (rmdb_ctl_ptr, rename_object_info_ptr, error_message, code);
	if code ^= 0
	then call error (code, error_message);

	return;
%page;
/*  * * * * * * * * * * * *       error       * * * * * * * * * * * * * */

error: proc (err_code, err_message);			/* Error procedure for rmdb_rename.pl1 */

	dcl     err_code		 fixed bin (35) parameter;
	dcl     err_message		 char (*) parameter;
	dcl     ssu_$abort_line	 entry () options (variable);

	call tidy_up;

	call ssu_$abort_line (sci_ptr, err_code, err_message);

     end error;

/*  * * * * * * * * * * * *       tidy_up       * * * * * * * * * * * * * */

tidy_up: proc;

	if rename_object_info_ptr ^= null then
	     free rename_object_info;

     end tidy_up;
%page;
%include mrds_rmdb_ctl;
%include rmdb_rename_object_info;
%page;
dcl  arg char (argl) based (argp);
dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  code fixed bin (35);
dcl  cleanup condition;
dcl  divide builtin;
dcl  empty builtin;
dcl  error_message char (500);
dcl  error_table_$action_not_performed fixed bin(35) ext static;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext static;
dcl  idx fixed bin;
dcl  Iinfo_ptr ptr parameter;
dcl  Isci_ptr ptr parameter;
dcl  incon_name  char (32);				/* name of the request that caused the db to become inconsistent */
dcl  incon_value bit (1);				/* true ::= the db is inconsistent */
dcl  loop fixed bin;
dcl  mdbm_util_$inconsistent_get_info entry options(variable);
dcl  mod builtin;
dcl  mrds_data_$valid_rel_and_attr_name_chars char (128) varying ext static;
dcl  mrds_error_$bad_attr_name fixed bin (35) ext static;
dcl  mrds_error_$bad_ident fixed bin (35) ext static;
dcl  mrds_error_$bad_rel_name fixed bin (35) ext static;
dcl  mrds_error_$inv_attr_name_first_char fixed bin (35) ext static;
dcl  mrds_error_$inv_domain_name_first_char fixed bin (35) ext static;
dcl  mrds_error_$inv_rel_name_first_char fixed bin (35) ext static;
dcl  mrds_error_$long_ident fixed bin (35) ext static;
dcl  mrds_error_$rel_name_too_long fixed bin (35) ext static;
dcl  my_area area;
dcl  myname (3) char (32) int static options (constant) init ("rename_attribute", "rename_domain", "rename_relation");
dcl  nargs fixed bin;
dcl  null builtin;
dcl  rmdb_execute_undo entry (ptr, char(32), char(168), ptr, char(32), char(100));
dcl  rmdb_rename entry (ptr, ptr, char (*), fixed bin (35));
dcl  sci_ptr ptr;
dcl  search builtin;
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (ptr, fixed bin);
dcl  ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin (21));
dcl  substr builtin;
dcl  type fixed bin (17);
dcl  undo_request  char (100);				/* rmdb request that will cause the db to become consistent */
dcl  unused2 char (200);				/* output from mdbm_util_$inconsistent_get_info */
dcl  verify builtin;

     end rmdb_rq_rename;
