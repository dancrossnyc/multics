/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



/* HISTORY:

   originally written by jim gray - - october 1978
   Modified by RDL	October 1978 	to add define and cmdb code
   Modified by Jim Gray 3/20/79 - to handle to versions of model and working storage (rsc)

*/


mrds_rst_domain_handler: procedure (rsc_ptr, list_ptr);


/* DESCRIPTION:

   this routine is called by the RMDB/CMDB parser to build/alter
   the mrds database model based on the parse information passed
   to it, and which directive called it.(undefine, define, redefine, cmdb)
   it will be passed only domain information of one of two forms,
   either a single name to delete, or a structure for defining
   a new domain, or redefining an existing domain.

*/

/* PARAMETERS:

   rsc_ptr - - (input) pointer to the common control segment

   list_ptr - - (input) pointer to either a 32 character domain name,
   or to a parse_info domain structure describing the domain.
   the first only occurs with the undefine directive.

   mdbm_db_model - - (output) the updated model with it's domain information altered

   gloabl lists - - (output) the database entity list reflecting the changes
   to the model(used for ease of reference during RMDB/CMDB)

   error_output - - (output) via calls to mrds_rst_error for error messages

*/

/* REMAINING ERRORS:

   undefine:

   the domain name may be the <error_symbol>(this may be ignored)
   the domain may not be defined in the model

   define, cmdb:

   the domain name may be the <error_symbol>(this can be ignored)
   the domain may be already defined in the model.
   the check option stack may have bad(unconverted) constants(this can be ignored)
   the encode_proc, decode_proc, check_proc pathnames may be invalid
   (i.e. may not be able to initiate them)

   redefine:

   the domain name may be the <error_symbol>(this can be ignored).
   the domain may not be defined in the model.
   same check and procedure errors as under define.

   note: where it is stated "(this may be ignored)", this is because
   a previous error has been issued that will prevent the bad information
   from ever being built into and used in a valid db_model.

*/

Start:

	directive_ptr = rsc.directive_ptr;		/* So we can use directive str */
	stmt_ptr = rsc.stmt_ptr;

	if directive.type = UNDEFINE then do;
		delete_name_ptr = list_ptr;
		domain_name = delete_name.overlay;
	     end;
	else do;
		domain_ptr = list_ptr;
		domain_name = domain.name;
	     end;

	if rsc.trace_sw then
	     call mrds_rst_meter (rsc_ptr, "mrds_rst_domain_handler", ON /* entrance */, (domain_name));

	if directive.type = UNDEFINE then do;		/* Undefine the domain */

/* This is not implemented yet so issue an error */

		if stmt (directive.type).domain.number > 0 then ;
		else call error (2, mrds_error_$rst_undone_option,
			"The domain handler will not implement the ""undefine"" directive" ||
			" until a later release.");

	     end;					/* END of undefine */

	if directive.type = DEFINE | directive.type = CMDB then do; /* Define or cmdb section */

		dbm_ptr = rsc.n_dm_ptr;		/* db_model pointer */

		call mrds_rst_list_element$add /* Add to global domain list */
		     (domain.name, MAIN_LIST, rsc_ptr, rsc.h_gdom_ptr, gl_ptr, code);
		if code ^= 0 then do;		/* Something wrong happened */
			if code = mrds_error_$rst_list_duplicate then
			     call error (2, mrds_error_$domain_already_defined,
				"The domain """ || rtrim (domain.name) ||
				""" given on line " || ltrim (char (domain.line_num)) ||
				" is already defined" || ", the duplicate will be ignored!!");
			else call error (3, code, "Adding " || rtrim (domain.name) || " to gdom_list");
		     end;

/* Domain was not found in gdom list so it was added to the gdom list */



/* Fill in list elements in gdom list entry for this domain */

		gl.type = MAIN_LIST;
		gl.name = domain.name;
		gl.item_info_ptr = null ();		/* no domain_info pointer yet */
		gl.parse_info_ptr = domain_ptr;
		gl.other_info_ptr = dbm_ptr;
		gl.item_sub_list_ptr = null;		/* No attributes attached to this domain yet */
		gl.file_info_ptr = null;
		gl.file_model_ptr = null;
		gl.affected = ON;
		gl.undefine = OFF;
		gl.redefine = OFF;
		if directive.type = DEFINE then do;
			gl.define = ON;
			gl.cmdb = OFF;
		     end;
		else do;
			gl.define = OFF;
			gl.cmdb = ON;
		     end;
		gl.superior_assigned = OFF;		/* no referencing relations yet */
		gl.inferior_assigned = OFF;		/* No attributes assigned to this domain yet */
		gl.complete = ON;			/* domain info assigned */
		gl.consistant = ON;			/* assume innocent until proven guilty */
		gl.reserved = OFF;

/* allocate a domain info for this domain */

		db_model_path = rtrim (rsc.temp_dir) || ">db_model";
		call mrds_rst_model_alloc (rsc_ptr, db_model_path, DOMAIN_INFO, di_ptr);

		if di_ptr = null () then
		     call model_overflow ("domain_info");
		else do;


			call init_domain_info;	/* Set all default values */
			gl.item_info_ptr = di_ptr;
			call assign_domain_info;	/* Fill in domain_info with info from domain structure */

/* link the domain info into to the list in definition order */

			if db_model.domain_ptr = NULL_OFFSET then
			     db_model.domain_ptr = rel (di_ptr);
			else do;
				if stmt (directive.type).domain.number > 0 then ; /* not first time */
				else do;		/* first time, get end of current list */
					last_di_ptr = pointer (dbm_ptr, db_model.domain_ptr);
					do while (last_di_ptr -> domain_info.fwd_thread ^= NULL_OFFSET);
					     last_di_ptr = pointer (dbm_ptr, last_di_ptr -> domain_info.fwd_thread);
					end;
				     end;
				last_di_ptr -> domain_info.fwd_thread = rel (di_ptr); /* set old last pointing to new last */
			     end;
			last_di_ptr = di_ptr;	/* remember new last place on list */


/* count up the number of domains */

			db_model.num_domains = db_model.num_domains + 1;

		     end;

	     end;					/* define or cmdb section */

	if directive.type = REDEFINE then do;		/* Redefine section */

/* THis directive is not implemented yet -- so issue error msg */

		if stmt (directive.type).domain.number > 0 then ;
		else call error (2, mrds_error_$rst_undone_option,
			"The domain handler will not implement the ""redefine"" directive" ||
			" until a later release.");

	     end;					/* END   of redefine section */

exit:						/* Only exit from procedure */
	if rsc.trace_sw then
	     call mrds_rst_meter (rsc_ptr, "mrds_rst_domain_handler", OFF /* exit */, (domain_name));
	return;

assign_domain_info: proc;

/* This procedure assignes the information supplied in domain (from parser)
   to the domain_info elements */

	domain_info.name = domain.name;
	domain_info.changer_ptr = db_model.changer_ptr;
	domain_info.db_desc = domain.descriptor;
	domain_info.user_desc = domain.descriptor;
	domain_info.ave_len = domain.varying_avg_length;

	if domain.options then do;			/* Some options were supplied */

		if domain.check.flag then do;		/* check option */
			if domain.check.stack_ptr = null then domain_info.ck_stack_ptr = NULL_OFFSET;
			else domain_info.ck_stack_ptr = rel (domain.check.stack_ptr);
			domain_info.nck_items = domain.check.stack_size;

			call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$rst_undone_option,
			     "The ""-check"" option given for domain """ || rtrim (domain.name) ||
			     """ on line " || ltrim (char (domain.line_num)) ||
			     " will not be implemented until a later release.");
		     end;


		if domain.check_proc.flag then do;	/* check_proc option */
			domain_info.check_path_ptr = set_path_entry ((domain.check_proc.path),
			     (domain.check_proc.entry));
		     end;

		if domain.encode_proc.flag then do;	/* encode_proc option */
			domain_info.encd_path_ptr = set_path_entry ((domain.encode_proc.path),
			     (domain.encode_proc.entry));
		     end;

		if domain.decode_proc.flag then do;	/* decode_proc option */
			domain_info.decd_path_ptr = set_path_entry ((domain.decode_proc.path),
			     (domain.decode_proc.entry));
		     end;

		if domain.decode_dcl.flag then do;	/* decode_dcl option */
			domain_info.user_desc = domain.decode_dcl.descriptor;
		     end;

	     end;					/* END   if domain.options then do    */


     end assign_domain_info;

error: proc (sev, cd, msg);

	dcl     sev		 fixed bin;	/* (INPUT) Severity level */
	dcl     cd		 fixed bin (35);	/* (INPUT) error code */
	dcl     msg		 char (*);	/* (INPUT)  specific error information */

	call mrds_rst_error (rsc_ptr, sev, cd, msg);
	goto exit;

     end error;

init_domain_info: proc;

	domain_info.name = " ";
	domain_info.db_desc_is_ptr = OFF;
	domain_info.user_desc_is_ptr = OFF;
	domain_info.db_desc = OFF;
	domain_info.user_desc = OFF;
	domain_info.no_conversion = OFF;
	domain_info.procedures_present = OFF;
	domain_info.reserved = OFF;
	domain_info.nck_items = 0;
	domain_info.ave_len = 0;
	domain_info.fwd_thread = NULL_OFFSET;
	domain_info.ck_stack_ptr = NULL_OFFSET;
	domain_info.check_path_ptr = NULL_OFFSET;
	domain_info.encd_path_ptr = NULL_OFFSET;
	domain_info.decd_path_ptr = NULL_OFFSET;
	domain_info.str_before_path_ptr = NULL_OFFSET;
	domain_info.str_err_path_ptr = NULL_OFFSET;
	domain_info.str_after_path_ptr = NULL_OFFSET;
	domain_info.get_before_path_ptr = NULL_OFFSET;
	domain_info.get_err_path_ptr = NULL_OFFSET;
	domain_info.get_after_path_ptr = NULL_OFFSET;
	domain_info.mod_before_path_ptr = NULL_OFFSET;
	domain_info.mod_err_path_ptr = NULL_OFFSET;
	domain_info.mod_after_path_ptr = NULL_OFFSET;
	domain_info.unused_1 = NULL_OFFSET;
	domain_info.unused_2 = NULL_OFFSET;
	domain_info.changer_ptr = NULL_OFFSET;


     end init_domain_info;

set_path_entry: procedure (path, entry) returns (bit (18));

/* routine to allocate and fill in the path_entry structure, and return the offset to it */

	call mrds_rst_model_alloc (rsc_ptr, db_model_path, PATH_ENTRY, path_entry_ptr);

	if path_entry_ptr = null () then do;
		path_entry_ptr = pointer (null (), NULL_OFFSET);
		call model_overflow ("path_entry");
	     end;

	else do;

/* fill in the supplied path and entry names */

		path_entry_ptr -> path_entry.path = path;
		path_entry_ptr -> path_entry.entry = entry;

	     end;

	return (rel (path_entry_ptr));



	declare path		 char (168);	/* input pathname */
	declare entry		 char (32);	/* input entryname */

     end;

model_overflow: procedure (struct_cause);

/* report model capacity exceeded, first time only */

	if rsc.model_overflow then ;
	else do;
		rsc.model_overflow = ON;

		call ioa_$rs ("^a^a^a ^d ^a^a^a", message, message_length,
		     "The domain """, domain.name, """ on line", domain.line_num,
		     "caused an overflow of the db_model while processing the structure """,
		     struct_cause, """.");

		call mrds_rst_error (rsc_ptr, 2 /* severity */, mrds_error_$rst_model_limit, (message));

	     end;


	declare struct_cause	 char (*);	/* either "domain_info", or "path_entry" */

     end;

	dcl     (null, rtrim, addr, fixed, rel) builtin;

	dcl     NULL_OFFSET		 bit (18) unal int static options (constant) init ("111111111111111111"b);
	dcl     ON		 bit (1) internal static options (constant) init ("1"b); /* true state */
	dcl     OFF		 bit (1) internal static options (constant) init ("0"b); /* false */
	dcl     list_ptr		 ptr;		/* (INPUT PARAMETER)  */
	declare last_di_ptr		 ptr internal static; /* pointer to last domain_info in list */

	declare db_model_path	 char (168);	/* path name down to db_model */
	declare message_length	 fixed bin (21);	/* length of error specifics message */
	dcl     code		 fixed bin (35);	/* Error code */
	dcl     sys_info$max_seg_size	 ext fixed bin (35);/* System constant */
	declare mrds_rst_model_alloc	 entry (ptr, char (*), fixed bin, ptr); /* model alloc routine */
	dcl     char		 builtin;
	dcl     ltrim		 builtin;
	dcl     pointer		 builtin;

	declare message		 char (256) varying;/* specifics of error occurence */
	declare domain_name		 char (32);	/* input name for metering */

	declare mrds_error_$rst_model_limit fixed bin (35) ext; /* model capacity exceededd */
	dcl     mrds_error_$rst_undone_option fixed bin (35) external; /* option not coded yet */
	dcl     mrds_error_$rst_list_duplicate ext fixed bin (35); /* Duplicate found in attemp to add to list */
	dcl     mrds_error_$domain_already_defined ext fixed bin (35);
	declare ioa_$rs		 entry options (variable); /* string manipulator */
	dcl     mrds_rst_list_element$add entry (char (32) aligned, fixed binary, ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*)); /* metering/tracing routine */
	dcl     mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*)); /* general error handler */

%include mrds_rst_rsc;
%include mrds_rst_struct_types;
%include mrds_rst_semantics;
%include mrds_rst_global_lists;
%include mrds_rst_parse_info;
%include mdbm_db_model;

     end;
