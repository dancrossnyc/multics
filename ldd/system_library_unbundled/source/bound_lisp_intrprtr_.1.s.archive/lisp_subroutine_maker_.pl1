/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
lisp_subroutine_maker_: procedure;

/*	Subroutines which belong to the lisp system proper are entered
	through a transfer vector in the segment lisp_subr_tv_.
	This routine is called in the lisp bootstrap phase to make
	the appropriate atom properties so that lisp subroutines are
	defined in the initial environment. 		*/

/* Automatic variables */

dcl types(0:3) fixed bin(71) aligned,		/* these are lisp objects for the atoms "subr", "lsubr", "fsubr" */
    atomic_symbol fixed bin(71) aligned,	/* lisp object to hold onto current atom to be defined */
    atsym_ptr ptr based(addr(atomic_symbol)),	/* overlay to treat the above as a pointer */
    name_ptr ptr,				/* pointer to acc string name of subr to be defined */
    plist_ptr ptr,				/* pointer to space allocated for atom property list */
    plist_cdr_ptr ptr,			/* pointer to cdr of that. */
    tvidx fixed bin;			/* index into transfer vector */

/* transfer vector structure */

dcl 1 lisp_subr_tv_$lisp_subr_tv_ (0 : 1000) ext aligned,
      2 header_word,
        3 n_args fixed bin(17) unal,
        3 subr_type fixed bin(17) unal,
      2 instructions(0:1) bit(36) aligned,
      2 init_data,
        3 name_offset fixed bin(17) unal,
        3 type fixed bin(17) unal,

    lisp_subr_tv_$tv_entry_count fixed bin ext;

dcl 1 name_string based(name_ptr) aligned,
      2 namel fixed bin(8) unal,
      2 name char(0 refer(name_string.namel)) unal;


/* Subroutines called */

dcl lisp_alloc_ entry(fixed bin, ptr),		/* subroutine to allocate space */
    lisp_get_atom_ entry(char(*) aligned,fixed bin(71) aligned);

/* Builtins */

dcl (addr, addrel, hbound) builtin;

/* Include files */

%include lisp_ptr_fmt;
%include lisp_cons_fmt;
%include lisp_atom_fmt;
%include lisp_common_vars;


/* Initialize the type array */

	call lisp_get_atom_("subr", types(0));
	call lisp_get_atom_("lsubr",types(1));
	call lisp_get_atom_("fsubr",types(2));

/* Loop through all of the entries in the transfer vector, initializing them */

	do tvidx = 0 to lisp_subr_tv_$tv_entry_count;

	     name_ptr = addrel(addr(lisp_subr_tv_$lisp_subr_tv_), init_data(tvidx).name_offset);

	     call lisp_get_atom_((name_ptr -> name_string.name), atomic_symbol);	/* get the atom */

	     call lisp_alloc_(8, plist_ptr);		/* make space for a property list */

	     atsym_ptr -> atom_ptrs.plist = plist_ptr;	/* remember, atsym_ptr is ptr part of atomic_symbol */

	     plist_cdr_ptr = addrel(plist_ptr,4);	/* get ptr to cdr of plist */

	     plist_cdr_ptr-> cons.cdr = nil;
	     plist_ptr -> cons_ptrs.cdr = plist_cdr_ptr;	/* make up the property list */

	     plist_ptr -> cons.car = types(lisp_subr_tv_$lisp_subr_tv_.init_data(tvidx).type);
	     plist_cdr_ptr -> cons_ptrs.car = addr(lisp_subr_tv_$lisp_subr_tv_(tvidx));
	     plist_cdr_ptr -> cons_types.car = Subr|System_Subr;

	end;

end lisp_subroutine_maker_;
