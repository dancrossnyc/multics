/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
lisp_load_: proc;

/* MACLISP load subr...takes one arg, the name of segment to be loaded,
   and loads it, returning t */
/* hacked by BSG 5/14/80 to not namedup */

/* declarations */

dcl (pathptr, tempp, stack, unm, object_ptr, actionp, entrp, entryp, linkp, linksp,
     constp, blockp, sblkp, symrtp, defp) ptr;

dcl (length, addr, addrel, null, rtrim, ptr) builtin;
dcl array_links_blockp pointer,
    call_array_link_snap_opr bit(36) static init("001000000001010110010111010001010000"b),
    array_link_space fixed bin(18),
    array_linksp pointer,
    number_of_array_links fixed bin;

dcl constant_index fixed bin(17) aligned,
    1 constant_index_format aligned structure based(addr(constant_index)),
      2 unused_bits bit(18) unaligned,
      2 load_time bit(1) unaligned,
      2 constant_x fixed bin(16) unaligned;

dcl 1 oi aligned automatic structure like object_info;

dcl 1 error_struc based aligned,
      2 code1 fixed bin(35),
      2 code2 fixed bin(35);

dcl code fixed bin(35),
    ename char (32),
    objects(0:10000) fixed bin(71) based aligned,
    lisp_static_vars_$no_snapped_links bit(1) external aligned,
    lisp_static_vars_$infile ext fixed bin(71),
    infile fixed bin(71) defined(lisp_static_vars_$infile),
    lisp_static_vars_$instack ext fixed bin(71),
    instack fixed bin(71) defined(lisp_static_vars_$instack),
    ent_length fixed bin(24),
    alloc_size fixed bin(18),
    i fixed bin(18),
    offset_head fixed bin,
    bit_count fixed bin (24),
    uname char (32),

    lisp_error_ entry,
    lisp_linker_ entry(pointer),
    unique_chars_  entry (bit (*)) returns (char (15)),
    hcs_$initiate_count  entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
    hcs_$make_ptr  entry (ptr, char (*), char (*), ptr, fixed bin (35)),
    hcs_$status_mins  entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35)),
    get_definition_  entry (ptr, char(*), char(*), ptr, fixed bin(35)),
    error_table_$segknown ext fixed bin(35),
    lisp_alloc_ entry(fixed bin(18), fixed bin(71)),
    lisp_alloc_$cons entry,
    lisp_io_control_$openi entry,
    lisp_io_control_$close entry,
    lisp_reader_$read entry,
    lisp_$eval entry,
    object_info_$brief entry(ptr, fixed bin(24), ptr, fixed bin(35)),
    lisp_property_fns_$putprop entry,
    lisp_property_fns_$remprop entry,
    lisp_static_vars_$defun ext ptr,
    lisp_static_vars_$expr_hash ext fixed bin(71),
    lisp_static_man_$allocate entry(ptr, fixed bin(18)),
    lisp_get_atom_ entry(char(*), fixed bin(71));

dcl lisp_static_vars_$subr ext fixed bin(71),
    lisp_static_vars_$lsubr ext fixed bin(71),
    lisp_static_vars_$fsubr ext fixed bin(71),
    subr fixed bin(71) defined(lisp_static_vars_$subr),
    lsubr fixed bin(71) defined(lisp_static_vars_$lsubr),
    fsubr fixed bin(71) defined(lisp_static_vars_$fsubr);

dcl lisp_linkage_error condition,		/* signalled by lisp_linker_ (kludge) */
    lisp_static_vars_$subr_block_list external pointer;


%include definition;
%include lisp_iochan;
%include lisp_error_codes;
%include object_info;
%include lisp_comp_subr_block;
%include lisp_stack_fmt;
%include lisp_symb_tree;
%include symbol_block;

%include lisp_nums;
%include lisp_atom_fmt;
%include lisp_common_vars;
%include lisp_control_chars;
%include lisp_ptr_fmt;
%include lisp_bignum_fmt;
%include lisp_string_fmt;
%include lisp_cons_fmt;




/* get argument and locate segment we are to load */

	stack = addrel(stack_ptr, -2);
	stack_ptr = addr(stack -> temp(3));
	stack -> temp(2) = stack -> temp(1);
	call lisp_io_control_$openi;		/* open the file */

	if ^ stack -> temp_ptr(2) -> iochan.flags.seg then go to load_ascii_file;

	/* validate files object segment-ness */

	uname = unique_chars_ (""b);
	ename = stack -> temp_ptr(2) -> iochan.name;
	call hcs_$initiate_count
	     ((addr (stack -> temp_ptr(2) -> iochan.namelist) -> based_ptr -> cons_ptrs.car -> atom.pname),
	     ename, uname, bit_count, (0), tempp, code);
	if tempp = null then go to fserror;
	oi.version_number = object_info_version_2;

	call object_info_$brief(tempp, bit_count, addr (oi), code);
	if code ^= 0 then go to load_ascii_file;

	call hcs_$make_ptr (null (), ename, "symbol_table", sblkp, code);
	/* This croque gets the linkage section combined */


	call get_definition_ (oi.defp, ename, "symbol_table", tempp, code);
	if code ^= 0 then do;
fserror:		unm = unmkd_ptr;
		unmkd_ptr = addrel(unm,2);
	 	unm -> error_struc.code1 = file_sys_fun_err;
		unm -> error_struc.code2 = code;
		stack_ptr = addr(stack->temp(5));
		stack -> temp(4) = nil;
		stack -> temp(3) = stack -> temp(1);
		call lisp_get_atom_("load", stack -> temp(2));
		call lisp_alloc_$cons;
		call lisp_alloc_$cons;
		call lisp_error_;
		call lisp_io_control_$close;
		stack -> temp(1) = stack -> temp(2);
		stack_ptr = addr(stack -> temp(2));
		return;
	     end;

	sblkp = addrel (oi.symbp, tempp -> definition.value);

	if sblkp -> sb.generator ^= "lisp" |		/* make sure is lisp obj seg!! */
	     sblkp -> sb.gen_version_number ^= 2 then do;	/* must be old defs file crock */
	   dcl 1 err_msg static aligned structure,	/* make msg to type out */
	         2 lth fixed bin(8) unaligned init(56),
	         2 msg char(56) unaligned init(
		     "This format of object segment no longer supported - load"),
	       packed_ptr unaligned pointer;

	   packed_ptr = addr(err_msg);
	   unspec(code) = unspec(packed_ptr);		/* kludge it up for convert_status_code_ */
	   go to fserror;
	   end;

	call bind_io_atoms;
	stack = addr(stack->temp(9));
	/* protect the bindings carefully */
		symrtp = addrel(sblkp, sblkp -> sb.area_ptr);	/* get pointer to lisp's data */


/* we must now create the data which will be used in this loading phase */

	stack_ptr = addr(stack -> temp(symrtp -> symbol_root.number_objects + 3));
	stack -> temp(2) = nil;		/* first object */
	object_ptr = addr(stack -> temp(3));

/* now create all the fixnums needed in this phase */

	blockp = addrel(symrtp, symrtp -> symbol_root.objects.fixnum_blockp);

	do i = 1 to blockp -> fixnum_block.count;
	     object_ptr -> fixnum_fmt.type_info = fixnum_type;
	     object_ptr -> fixnum_fmt.fixedb = blockp -> fixnum_block.fixnums(i);
	     object_ptr = addr(object_ptr -> objects(1));
	end;

/* flonums */

	blockp = addrel(symrtp, symrtp -> symbol_root.objects.flonum_blockp);

	do i = 1 to blockp -> flonum_block.count;
	     object_ptr -> flonum_fmt.type_info = flonum_type;
	     object_ptr -> flonum_fmt.floatb = blockp -> flonum_block.flonums(i);
	     object_ptr = addr(object_ptr -> objects(1));
	end;

/* strings */

	blockp = addrel(symrtp, symrtp -> symbol_root.objects.string_blockp);

	do i = 1 to blockp -> string_block.count;
	     tempp = addrel(symrtp, blockp -> string_block.string_offset(i));
	     alloc_size = 2*divide(tempp -> string_chars.length+11,8,17,0);
	     call lisp_alloc_(alloc_size, object_ptr -> objects(0));
	     object_ptr -> based_ptr -> lisp_string.string_length = tempp -> string_chars.length;
	     object_ptr -> lisp_ptr_type = object_ptr -> lisp_ptr_type | String36;
	     object_ptr -> based_ptr -> lisp_string.string = tempp -> string_chars.chars;
	     object_ptr = addr(object_ptr -> objects(1));
	end;

/* bignums */

	blockp = addrel(symrtp, symrtp -> symbol_root.objects.bignum_blockp);

	do i = 1 to blockp -> bignum_block.count;

	     tempp = addrel (symrtp, blockp -> bignum_block.bignum_offsets(i));
	     alloc_size = 2*divide(1+tempp -> lisp_bignum.prec,2,17,0);
	     call lisp_alloc_(alloc_size, object_ptr -> objects(0));
	     object_ptr -> based_ptr -> lisp_bignum.sign = tempp -> lisp_bignum.sign;
	     object_ptr -> based_ptr -> lisp_bignum.prec = tempp -> lisp_bignum.prec;
	     object_ptr -> based_ptr -> lisp_bignum.words = tempp -> lisp_bignum.words;
	     object_ptr -> lisp_ptr_type = object_ptr -> lisp_ptr_type | Bignum36;
	     object_ptr = addr(object_ptr -> objects(1));
	end;

/* atsyms */
	blockp = addrel(symrtp, symrtp -> symbol_root.objects.atsym_blockp);

	do i = 1 to blockp -> atsym_block.count;

	     tempp = addrel(symrtp, blockp -> atsym_block.atsym_offset(i));
	     if tempp->string_chars.flags.uninterned_atom
	     then do;
		call lisp_alloc_(2*divide(tempp->string_chars.length+27,8,17,0), object_ptr->objects(0));
		object_ptr -> lisp_ptr_type = object_ptr -> lisp_ptr_type | Atsym36;
		object_ptr -> based_ptr -> atom.value = 0;
		object_ptr -> based_ptr -> atom.plist = nil;
		object_ptr -> based_ptr -> atom.pnamel = tempp -> string_chars.length;
		object_ptr -> based_ptr -> atom.pname = tempp -> string_chars.chars;
		end;
	     else call lisp_get_atom_(tempp -> string_chars.chars, object_ptr -> objects(0));
	     object_ptr = addr(object_ptr -> objects(1));
	end;

/* now make the conses of these items which are used in this loading phase */

	blockp = addrel(symrtp, symrtp -> symbol_root.objects.cons_blockp);
	tempp = stack_ptr;

	do i = 1 to blockp -> cons_block.count;
	     stack_ptr = addr(tempp -> temp(3));	/* room for args to cons */
	     tempp -> temp(1) = stack -> objects(blockp -> cons_block.conses(i).car+1);
	     tempp -> temp(2) = stack -> objects(blockp -> cons_block.conses(i).cdr+1);
	     call lisp_alloc_$cons;
	     object_ptr -> objects(0) = tempp -> temp(1);
	     object_ptr = addr(object_ptr -> objects(1));
	end;

	object_ptr = addr(stack -> temp(2));

	if symrtp -> symbol_root.version >= 2 then do;	/* count array links */
	   array_links_blockp = addrel(symrtp, symrtp -> symbol_root.array_links_blockp);
	   number_of_array_links = array_links_blockp -> array_links_block.count;
	   if number_of_array_links ^= 0
	   then array_link_space = 4*number_of_array_links + 2;
	   else array_link_space = 0;
	   end;
	else number_of_array_links, array_link_space = 0;

/* now create the subr block for this object segment */

	if symrtp -> symbol_root.subr_block_size = 0 then go to no_subr_block;
	ent_length = length (rtrim (ename));

	alloc_size = symrtp -> symbol_root.subr_block_size*2+13+divide(ent_length+3,4,17,0)+array_link_space;

	call lisp_static_man_$allocate (blockp, alloc_size);

	blockp -> subr_block_head.instructions = instructions_for_subr;
	blockp -> subr_block_head.subr_code_link_offset = 2*symrtp -> symbol_root.subr_block_size+2+array_link_space;
	blockp -> subr_block_head.gcmark = "0"b;
	blockp -> subr_block_head.rest_of_tsplp = tsplp_ic_ind;
	constp = addrel(symrtp, symrtp -> symbol_root.const_blockp);
	linksp = addrel(symrtp, symrtp -> symbol_root.links_blockp);
	entryp = addrel(symrtp, symrtp -> symbol_root.entry_blockp);
	blockp -> subr_block_head.gc_length = constp -> const_block.count + linksp -> links_block.count;

/* now fill in constants to be placed in subr block for use of compiled code */

	do i = 1 to constp -> const_block.count;
	     constant_index = constp -> const_block.constants(i);
	     blockp -> subr_block_head.constants(i) =
		object_ptr -> objects(constant_index_format.constant_x);
	     if constant_index_format.load_time then do;	/*load-time eval*/
	        tempp = stack_ptr;
	        stack_ptr = addr(tempp -> temp(2));
	        tempp -> temp(1) = blockp -> subr_block_head.constants(i);
	        call lisp_$eval;
	        blockp -> subr_block_head.constants(i) = tempp -> temp(1);
	        stack_ptr = tempp;
	        end;
	end;

/* now fill in the itp links to other subroutines */

	call generate_links;

generate_links:  proc;
	linkp = addr(blockp -> subr_block_head.constants(constp -> const_block.count+1));

	do i = 1 to linksp -> links_block.count;
	     linkp -> lisp_subr_links(i).itp_base = "001"b;	/* ab */
	     linkp -> lisp_subr_links(i).itp_info = linksp -> links_block.link_info(i);
	     linkp -> lisp_subr_links(i).itp_mod = "100001"b;	/* itp */
	     linkp -> lisp_subr_links(i).link_opr_tv_offset = "000000000000011010"b;	/* 26 decimal */
	     linkp -> lisp_subr_links(i).mbz = "0"b;
	     linkp -> lisp_subr_links(i).further_mod = "010000"b;	/* indirect */
	end;
     end generate_links;


/* now fill in the entry point code for each subroutine */

	entrp = addr(linkp -> lisp_subr_links(linksp -> links_block.count+1));

	offset_head = -2*(linksp -> links_block.count+constp -> const_block.count)-7;
	do i = 1 to entryp -> entry_block.count;
	     entrp -> subr_entries(i).nargs = entryp -> entry_block.entry_info(i).nargs;
	     entrp -> subr_entries(i).code_offset = entryp -> entry_block.entry_info(i).entrypoint;
	     entrp -> subr_entries(i).head_offset = offset_head;
	     offset_head = offset_head - 2;
	     entrp -> subr_entries(i).rest_of_tsx0 = tsx0_ic;
	end;

	array_linksp = addr(entrp -> subr_entries(entryp -> entry_block.count+1));
	if number_of_array_links ^= 0 then call generate_array_links;
	tempp = array_linksp;		/* next free doubleword */

generate_array_links:  procedure;

	do i = 1 to number_of_array_links;
	   array_linksp -> array_links(i).instruction = call_array_link_snap_opr;
	   unspec(array_linksp -> array_links(i).control_word) =
		array_links_blockp -> array_links_block.control_word(i);
	   array_linksp -> array_links(i).pointer = null;
	   end;
	array_linksp = addr(array_linksp -> array_links(i));
	array_linksp -> array_link_count.number_of_array_links = number_of_array_links;
	array_linksp -> array_link_count.must_be_zero = ""b;
	array_linksp = addrel(array_linksp, 2);
end generate_array_links;

	call get_definition_ (oi.defp, ename, "*segtop", defp, code);
	if code ^= 0 then go to fserror;
	tempp -> link_to_subr_code.itp_to_linker = addrel (oi.textp, defp -> definition.value);

	tempp -> lisp_subr_links(1).further_mod = "001000"b; /* x0 */

	tempp -> link_to_subr_code.compilation_time = sblkp -> sb.obj_creation_time;
	tempp -> link_to_subr_code.name_length = ent_length;
	tempp -> link_to_subr_code.name = ename;

	/* thread this block onto list of subr blocks */

	blockp -> subr_block_head_overlay.no_links_are_snapped = "1"b;	/**** CHANGE THIS IF PRE-LINKING IS IMPLEMENTED ****/
	blockp -> subr_block_head.next_compiled_block = lisp_static_vars_$subr_block_list;
	lisp_static_vars_$subr_block_list = blockp;

no_subr_block:

/* now that we have completed the subr block, we must execute the action list */

	tempp = stack_ptr;
	stack_ptr  = addr(tempp -> temp(3));
	if symrtp -> symbol_root.subr_block_size > 0
	then alloc_size = entryp -> entry_block.count;	/* how many entries are there to define */
	else alloc_size = 0;
	if alloc_size ^= 0
	then do;
		tempp -> temp_ptr(1) = entrp;
		tempp -> lisp_ptr_type = tempp -> lisp_ptr_type | Subr36;
	     end;

	actionp = addrel(symrtp, symrtp -> symbol_root.action_blockp);

	do i = 1 to actionp -> action_block.count;
	     tempp -> temp(2) = object_ptr -> objects(actionp->action_block.actions(i).operand);
	     go to action(actionp -> action_block.actions(i).action_code);

action(0):	/* evaluate object operand */
	     call lisp_$eval;
	     go to endaction;

action(1):	/* define operand as subr */
	     stack_ptr = addr(tempp -> temp(7));
	     tempp -> temp(4) = subr;
	     go to putprop;

action(2):	/* define operand as lsubr */
	     stack_ptr = addr(tempp -> temp(7));
	     tempp ->temp(4) = lsubr;
	     go to putprop;

action(3):	/* define operand as fsubr */
	     stack_ptr = addr(tempp -> temp(7));
	     tempp -> temp(4) = fsubr;
putprop:	     tempp -> temp(3) = tempp -> temp(1);	/* get next subr */
remloop:
	     tempp -> temp(5) = tempp -> temp(2);
	     tempp -> temp(6) = tempp -> temp(4);
	     call lisp_property_fns_$remprop;
	     if tempp -> temp(5) ^= nil
	     then do; stack_ptr = addr(tempp->temp(7)); go to remloop; end;

	     if lisp_static_vars_$defun->atom.value ^= 0 &
	        lisp_static_vars_$defun -> atom.value ^= nil
	     then do;
		stack_ptr = addr(tempp->temp(7));
	 	tempp->temp(5) = tempp->temp(2);
		tempp->temp(6) = lisp_static_vars_$expr_hash;
		call lisp_property_fns_$remprop;
		end;
	     stack_ptr = addr(tempp->temp(5));
	     call lisp_property_fns_$putprop;
	     alloc_size = alloc_size - 1;
	     if alloc_size > 0
	     then tempp -> lisp_ptr.offset = tempp->lisp_ptr.offset+2;
	     else tempp -> temp(1) = nil;		/* don't confuxe gc'er */
endaction:
	end;

	tempp -> temp(1) = nil;		/* since this points to a nonno */

	/* carefully undo what was done */
	stack = addrel(stack,-16);
	call unbind_io_atoms;
	stack_ptr = addr(stack -> temp(3));
	call lisp_io_control_$close;

	stack_ptr = addr(stack -> temp(2));
	stack -> temp(1) = t_atom;
	return;


/* part to cause ascii file to be loaded */

load_ascii_file:
	stack -> flonum_fmt.type_info = flonum_type;
	stack -> fixnum_fmt.fixedb = 0;	/* illegal float number */

	call bind_io_atoms;
bind_io_atoms: proc;
	stack_ptr = addr(stack -> temp(9));		/* room for bindings */
	unm = unmkd_ptr;
	unmkd_ptr = addrel(unm,2);
	stack -> bindings(2).atom = infile;
	stack -> bindings(3).atom = ctrlQ;
	stack -> bindings(4).atom = instack;
	stack -> bindings(2).old_val = addr(infile) -> based_ptr -> atom.value;
	stack -> bindings(3).old_val = addr(ctrlQ) -> based_ptr -> atom.value;
	stack -> bindings(4).old_val = addr(instack) -> based_ptr -> atom.value;
	unm -> binding_block.top_block = rel(addr(stack -> bindings(5)));
	unm -> binding_block.bot_block = rel(addr(stack -> bindings(2)));
	unm -> binding_block.back_ptr = rel(binding_top);
	binding_top = unm;
	addr(infile) -> based_ptr -> atom.value = stack -> temp(2);
	addr(ctrlQ) -> based_ptr -> atom.value = t_atom;
	addr(instack) -> based_ptr -> atom.value = nil;
	return;

unbind_io_atoms: entry;

		addr(infile) -> based_ptr -> atom.value = stack -> bindings(2).old_val;
		addr(ctrlQ) -> based_ptr -> atom.value = stack -> bindings(3).old_val;
		addr(instack) -> based_ptr -> atom.value = stack -> bindings(4).old_val;
		binding_top = ptr(binding_top, unm -> binding_block.back_ptr);
		unmkd_ptr = unm;
    end bind_io_atoms;
loop:	stack_ptr = addr(stack -> temp(11));
	stack -> temp(9) = stack -> temp(1);		/* eof detector */
	addr(stack -> temp(10)) -> fixnum_fmt.type_info = fixnum_type;
	addr(stack -> temp(10)) -> fixedb = -2;
	call lisp_reader_$read;
	if stack -> temp(9) = stack -> temp(1)
	then do;
		stack -> temp(9) = addr(infile) -> based_ptr -> atom.value;
		if addr(instack) -> based_ptr -> atom.value ^= nil		/* have inpushed, so keep going */
		then do;
			call lisp_io_control_$close;
			go to loop;
		     end;
		else call lisp_io_control_$close;
		call unbind_io_atoms;
		stack -> temp(1) = t_atom;
		stack_ptr = addr(stack ->temp(2));
		return;
	     end;
	call lisp_$eval;
	go to loop;

/* entry to do the work of (sstatus uuolinks) */

unsnap_all_links:  entry;

     do blockp = lisp_static_vars_$subr_block_list
	       repeat (blockp -> subr_block_head.next_compiled_block)
	       while (blockp ^= null);	/* do loop for all subr blocks */

	/* a great deal of time can be saved by first checking if there are
	   any links in this subr block that need to be unsnapped */

	if blockp -> subr_block_head_overlay.no_links_are_snapped
	then go to skip_this_block;

	if addrel(blockp, blockp -> subr_block_head.subr_code_link_offset + 6) -> lisp_ptr.itsmod
		^= "100011"b		/* if not its pointer */
	then do;				/* then must snap link to text section */
		on condition(lisp_linkage_error) go to skip_this_block;
		call lisp_linker_(addrel(blockp, blockp -> subr_block_head.subr_code_link_offset + 6));
		revert condition(lisp_linkage_error);
		end;

          /* Grab the symbol root pointer */

	unspec (tempp) = unspec (addrel (blockp, blockp -> subr_block_head.subr_code_link_offset + 6) -> based_ptr)
	     & "077777777777777777000000"b3;
	tempp = ptr (tempp, 0);			/* object info seems to care */
	call hcs_$status_mins (tempp, (0), bit_count, code);
	if code ^= 0 then go to skip_this_block;
	oi.version_number = object_info_version_2;
	call object_info_$brief (tempp, bit_count, addr (oi), code);
	if code ^= 0 then go to skip_this_block;
	call get_definition_ (oi.defp, 
	 addrel(blockp, blockp -> subr_code_link_offset + 6) -> link_to_subr_code.name, "symbol_table",tempp, code);
	if code ^= 0 then go to skip_this_block;


	sblkp = addrel (oi.symbp, tempp -> definition.value);
	symrtp = addrel(sblkp, sblkp -> sb.area_ptr);
	if symrtp -> symbol_root.subr_block_size = 0 then go to skip_this_block;
	
	linksp = addrel(symrtp, symrtp -> symbol_root.links_blockp);	/* -> data to reinitialize links with */
	constp = addrel(symrtp, symrtp -> symbol_root.const_blockp);

	call generate_links;
	if symrtp -> symbol_root.version >= 2 then do;	/* unsnap array links too */
	   array_links_blockp = addrel(symrtp, symrtp -> symbol_root.array_links_blockp);
	   number_of_array_links = array_links_blockp -> array_links_block.count;
	   if number_of_array_links ^= 0 then do;
	      array_linksp = addrel(blockp, blockp -> subr_code_link_offset+6-2);
	      array_linksp = addrel(array_linksp, -4 * array_linksp -> array_link_count.number_of_array_links);
	      call generate_array_links;
	      end;
	   end;
	
skip_this_block:
	revert condition(lisp_linkage_error);	/* may have been left enabled if it was signalled above - anyway doesn't cost anything */
	blockp -> subr_block_head_overlay.no_links_are_snapped = "1"b;
	end;		/* end of do loop for each subr block */
     return;

end lisp_load_;

