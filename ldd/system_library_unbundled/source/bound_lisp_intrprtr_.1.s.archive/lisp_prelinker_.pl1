/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1974 *
   *                                                            *
   ************************************************************** */
lisp_prelinker_:  procedure;

/* This module is called by (sstatus uuolinks t) to cause pre-snapping
   of as many subr-links as possible.
   Written 74.07.07 by DAM
 */

dcl (lisp_static_vars_$subr, lisp_static_vars_$lsubr, lisp_static_vars_$fsubr,
     lisp_static_vars_$expr, lisp_static_vars_$fexpr) fixed bin(71) external,
    lisp_static_vars_$subr_block_list external pointer,
    (subr defined lisp_static_vars_$subr,
     lsubr defined lisp_static_vars_$lsubr,
     fsubr defined lisp_static_vars_$fsubr,
     expr defined lisp_static_vars_$expr,
     fexpr defined lisp_static_vars_$fexpr) fixed bin(71);

dcl blockp pointer,
    i fixed bin,
    fcn fixed bin(71),
    fcnp pointer aligned based(addr(fcn)),
    type fixed bin,		/* 0=not known yet, 1=subr, 2=lsubr, -1=fsubr */
    (SUBR init(1), LSUBR init(2), FSUBR init(-1)) fixed bin static,
    plist fixed bin(71),
    plistp pointer aligned based(addr(plist)),
    linkp pointer;

dcl (addr, null, divide) builtin;

dcl ITP bit(6) static init("100001"b);		/* hardware ITP modifier */

dcl 1 link_info unaligned,		/* format of 27 info bits in an ITP link */
    2 fcn_offset fixed bin(14),	/* signed offset from ap or lp of function */
    2 snap bit(1),			/* 1 if link can (should) be snapped */
    2 constant bit(1),		/* 1 if fcn_offset is offset from lp of atom */
    2 fsubr bit(1),			/* 1 for fsubr, 0 for subr/lsubr */
    2 nargs bit(9);			/* 777 if arg count is in x5, else arg count */

dcl 1 subr_info aligned based,
    2 cruft bit(9) unaligned,
    2 nargs bit(9) unaligned,
    2 more_cruft bit(18) unaligned,
    2 entry_point;

%include lisp_comp_subr_block;
%include lisp_ptr_fmt;
%include lisp_atom_fmt;
%include lisp_cons_fmt;
%include lisp_common_vars;

    do blockp = lisp_static_vars_$subr_block_list
	repeat(blockp -> subr_block_head.next_compiled_block)
	while(blockp ^= null);		/* look at all compiled subr blocks */

       do i = 1 to blockp -> subr_block_head.gc_length;	/* look at all constants and subr links */
	linkp = addr(blockp -> subr_block_head.constants(i));	/* -> link or constant */
	if linkp -> lisp_subr_links(1).itp_mod ^= ITP then go to cant_snap_this_link;
				/* not an unsnapped link */
	unspec(link_info) = linkp -> lisp_subr_links(1).itp_info;
	if ^ link_info.snap then go to cant_snap_this_link;
	if ^ link_info.constant then go to cant_snap_this_link;     
	fcn = blockp -> subr_block_head.constants(divide(link_info.fcn_offset+1,2,17,0));
	if addr(fcn)->lisp_ptr_type & Atsym36 then;
	else go to cant_snap_this_link;     

	/* found symbol to which to snap link.  search its property list */     

	type = 0;
	do plist = fcnp -> atom.plist
	     repeat(plistp -> cons_ptrs.cdr -> cons.cdr)
	     while(addr(plist)->lisp_ptr.type = Cons);
	   if plistp -> cons.car = subr then type = SUBR;
	   else if plistp -> cons.car = lsubr then type = LSUBR;
	   else if plistp -> cons.car = fsubr then type = FSUBR;
	   else if plistp -> cons.car = expr then go to cant_snap_this_link;
	   else if plistp -> cons.car = fexpr then go to cant_snap_this_link;     
	   if type ^= 0 then go to exitloop;
	   end;
	go to cant_snap_this_link;		/* no functional property */
exitloop:
	if type = FSUBR then if ^ link_info.fsubr then go to cant_snap_this_link;
		      else;
	else if link_info.fsubr then go to cant_snap_this_link;
	     else;
	if type = LSUBR then if link_info.nargs ^= "111111111"b then go to cant_snap_this_link;
	if type = SUBR then if link_info.nargs ^=
	     plistp -> cons_ptrs.cdr -> cons_ptrs.car -> subr_info.nargs
	     then go to cant_snap_this_link;     

	/* have demonstrated that the link is snappable */     

	blockp -> subr_block_head_overlay.no_links_are_snapped = "0"b;
	blockp -> subr_block_head.constants(i) =
	     plistp -> cons_ptrs.cdr -> cons.car + 262144;	/* -> entry_point */
cant_snap_this_link:
	end;
       end;
end lisp_prelinker_;
