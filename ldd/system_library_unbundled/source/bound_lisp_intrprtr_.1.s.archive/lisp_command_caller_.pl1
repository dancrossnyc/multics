/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
cline:	proc;
			/*this is a procedure to pass a lisp string to the Multics command processor*/





%include lisp_stack_fmt;
%include lisp_common_vars;
%include lisp_ptr_fmt;
%include lisp_string_fmt;
%include lisp_atom_fmt;
%include lisp_error_codes;
%include lisp_unmkd_pdl;



dcl	(stack, unm) ptr,
	code fixed bin(35),
	lisp_static_vars_$ignore_faults ext bit(36) aligned,
	(addr, addrel) builtin,
	lisp_error_ entry,
	cu_$cl entry options(variable),
	cu_$cp entry(ptr, fixed bin, fixed bin(35));
/**/
	stack = addrel(stack_ptr, -2);
	if stack -> temp_type36(1) & Atsym36
	then call cucp ((stack->temp_ptr(1)->atom.pname));
	else if stack ->temp_type36(1) &String36
	     then call cucp((stack->temp_ptr(1)->string));
	     else go to error_in_cline;
	cucp: proc(str); dcl str char(*) aligned;
	lisp_static_vars_$ignore_faults = "1"b;		/*so that the lisp fault handler won't get faults
						during the command call*/
	call cu_$cp (addr(str), length(str), code);
						/*call the command*/
	lisp_static_vars_$ignore_faults = ""b;		/*now lisp will handle them again*/
	end;
	stack -> temp(1) = nil;			/*the value of cline is nil*/
	return;





error_in_cline:
	unm = unmkd_ptr;
	unmkd_ptr = addrel(unm, 2);				/*push it up to protect 2 words*/
	unm -> errcode(1) = bad_argument;
	unm -> errcode(2) = fn_cline;
	call lisp_error_;
	return;

%include lisp_name_codes;


suspend:	entry;

	lisp_static_vars_$ignore_faults = "1"b;
	call cu_$cl;
	lisp_static_vars_$ignore_faults = "0"b;

	stack = stack_ptr;
	stack_ptr = addr(stack->temp(2));
	stack->temp(1) = nil;
	return;
end cline;
