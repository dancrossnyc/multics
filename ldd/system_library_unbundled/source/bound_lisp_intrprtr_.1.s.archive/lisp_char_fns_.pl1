/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
lisp_char_fns_: proc;		/* LISP functions similar to the PL/I builtins for manipulating strings */

dcl stack ptr,
    nargs fixed bin,
    argno fixed bin,
    argp ptr,
    argp2 ptr,
    myname fixed bin(35),
    slen fixed bin,
    lisp_error_ entry,
    lisp_alloc_ entry(fixed bin, fixed bin(71)),
    lisp_get_atom_ entry(char(*)aligned, fixed bin(71)),
    unm ptr,
    ercode(2) fixed bin(35) aligned based(unm),
    num fixed bin;

stringlength: entry;

/* subr to get the length of a lisp string */

	stack = addrel(stack_ptr, -2);		/* subr 1 */
	argno = 1;
	myname = fn_stringlength;
	call getstring;

	num = argp -> lisp_string.string_length;
retnum:	stack -> fixnum_fmt.type_info = fixnum_type;
	stack -> fixedb = num;
exit:	stack_ptr = addr(stack -> temp(2));
	return;

lsubr_prologue: proc;

	stack = addrel(stack_ptr, -2);
	nargs = stack -> fixedb;
	stack = addrel(stack, nargs);
	end;
catenate:	entry;

/* lsubr to catenate together some strings */

	call lsubr_prologue;
	slen = 0;
	nargs = divide(nargs, -2, 17, 0);		/* = + number of args */

	/* find out how long result will be */

	myname = fn_catenate;
	do argno = 1 to nargs;
	     call getstring;
	     slen = slen + argp -> lisp_string.string_length;
	     end;

	/* allocate space for the result */

	call lisp_alloc_(divide(slen+7,4,17,0), stack -> temp(nargs+1));
	stack -> temp_type(nargs+1) = String;
	stack -> temp_ptr(nargs+1) -> lisp_string.string_length = slen;

	/* now move the strings into the result */

	num = 0;
	do argno = 1 to nargs;
	     call getstring;
	     slen = argp -> lisp_string.string_length;
	     substr(stack -> temp_ptr(nargs+1) -> lisp_string.string, num+1, slen) = argp -> lisp_string.string;
	     num = num + slen;
	     end;

	/* move result down and return */

	stack -> temp(1) = stack -> temp(nargs+1);
	go to exit;

	/* routine to fetch arguments, checking type */

getstring:	proc;

dcl st ptr;

       do while("1"b);		/* loop until good arg seen */
	if stack -> temp_type36(argno) & String36 then do;
	     argp = stack -> temp_ptr(argno);
	     return;
	     end;
	else if stack -> temp_type36(argno) & Atsym36 then do;
	     argp = addr(stack -> temp_ptr(argno) -> atom.pnamel);
	     return;
	     end;
	call barf;
	end;					/* keep looping */

barf:	proc;			/* interface to lisp_error_ */

	/* bad arg - barf */

	st = stack_ptr;
	stack_ptr = addr(st -> temp(2));
	st -> temp(1) = stack -> temp(argno);		/* move losing arg to top of marked pdl */
	unm = unmkd_ptr;
	unmkd_ptr = addrel(unm, 2);
	ercode(1) = bad_arg_correctable;
	ercode(2) = myname;
	call lisp_error_;
	stack -> temp(argno) = st -> temp(1);
	stack_ptr = st;

end barf;



getnum:	entry;			/* gets number into num */


       do while("1"b);			/* loop until good arg gotten */
	if addr(stack -> temp(argno))->fixnum_fmt.type_info = fixnum_type
	   then do;
		num = addr(stack -> temp(argno))->fixedb;
		return;
		end;
	else if addr(stack -> temp(argno))->flonum_fmt.type_info = flonum_type
	         then do;
		num = fixed(addr(stack -> temp(argno))->floatb);
		return;
		end;
	call barf;
	end;				/* keep looping */

end getstring;

Substr2:	entry;

/* substring function of two arguments - obsoleted by substr lsubr but kept
   for compatibility */

	stack = addrel(stack_ptr, -4);
	myname = fn_substr;

substr2_joint:		/* this is where (substr x y) comes */

	argno = 2;
	call getnum;

	argno = 1;
	call getstring;

	slen = argp -> lisp_string.string_length - num + 1;		/* length of result */
	if slen < 0 then slen = 0;

	/* before allocating, must save ptr to first arg since may garbage collect */

	stack -> temp(2) = stack -> temp(1);	/* save while allocating */
	call lisp_alloc_(divide(slen+7,4,17,0), stack -> temp(1));
	argno = 2;			/* get back string */
	call getstring;
	stack -> temp_type(1) = String;
	stack -> temp_ptr(1) -> lisp_string.string_length = slen;
	stack -> temp_ptr(1) -> lisp_string.string = substr(argp -> lisp_string.string, num);
	go to exit;

Substr:	entry;

/* the substr lsubr, which takes 2 or 3 args and works like the PL/I substr builtin */

	call lsubr_prologue;
	myname = fn_substr;
	if nargs = -4 then go to substr2_joint;		/* 2 args, do like substr2 */

	argno = 3;
	call getnum;
	slen = num;			/* length of result */
	argno = 2;
	call getnum;
	argno = 1;
	call getstring;
	stack -> temp(2) = stack -> temp(1);	/* save while allocating */

	if slen < 0 then slen = 0;
	if num < 1 then num = 1;
	   else if num > argp -> lisp_string.string_length then num = argp -> lisp_string.string_length;
	call lisp_alloc_(divide(slen+7,4,17,0), stack -> temp(1));
	argno = 2;
	call getstring;			/* restore argp after allocation possibly gc'ed*/
	stack -> temp_ptr(1) -> lisp_string.string_length = slen;
	stack -> temp_type(1) = String;
	stack -> temp_ptr(1) -> lisp_string.string = substr(argp -> lisp_string.string, num, min(slen, argp -> lisp_string.string_length - num + 1));
	go to exit;

Index:	entry;

/* subr to find the first occurrence of the second string in the first; like the PL/I builtin index */

	stack = addrel(stack_ptr, -4);
	myname = fn_index;

	argno = 1;
	call getstring;

	argno = 2;
	call getstring;
	argp2 = argp;


	argno = 1;
	call getstring;			/* first time was to check arg, but may have gc'ed */

	num = index(argp -> lisp_string.string, argp2 -> lisp_string.string);
	go to retnum;

get_pname:	entry;

/* get the print-name of an atomic symbol as a string */

	stack = addrel(stack_ptr, -2);
	myname = fn_get_pname;
	argno = 1;
	call getstring;				/* convert pname to string */
	slen = argp -> lisp_string.string_length;
	stack_ptr = addr(stack->temp(3));	/* get place to save arg */
	stack -> temp(2) = stack -> temp(1);
	call lisp_alloc_(divide(slen+7,4,17,0), stack -> temp(1));
	argno = 2;
	call getstring;
	stack -> temp_ptr(1) -> lisp_string.string_length = argp -> lisp_string.string_length;
	substr(stack->temp_ptr(1)->lisp_string.string,1,slen) = substr(argp->lisp_string.string,1,slen);
	stack -> lisp_ptr_type = stack -> lisp_ptr_type | String36;
	go to exit;

make_atom:	entry;

/* subr to make an uninterned atom given its pname as a string */

	stack = addrel(stack_ptr, -2);
	myname = fn_make_atom;
	argno = 1;
	call getstring;

	call lisp_get_atom_(argp -> lisp_string.string, stack -> temp(1));	/* gc prot since arg is "always" a string */

	go to exit;

ItoC:	entry;

/* convert an integer to a one character string*/

	stack = addrel(stack_ptr, -2);
	myname = fn_ItoC;
	argno = 1;
	call getnum;

	call lisp_alloc_(2, stack -> temp(1));
	stack -> temp_type(1) = String;
	stack -> temp_ptr(1) -> lisp_string.string_length = 1;
	unspec(substr(stack -> temp_ptr(1) -> lisp_string.string, 1, 1)) =
	     bit(fixed(num, 9), 9);				/* make character */
	go to exit;

CtoI:	entry;

/* convert the first character of a string to an integer */

	stack = addrel(stack_ptr, -2);
	myname = fn_CtoI;
	argno = 1;
	call getstring;
	if argp -> lisp_string.string_length = 0 then num = 0;
	   else num = fixed(unspec(substr(argp -> lisp_string.string, 1, 1)));
	go to retnum;


%include lisp_string_fmt;
%include lisp_atom_fmt;
%include lisp_ptr_fmt;
%include lisp_common_vars;
%include lisp_stack_fmt;
%include lisp_error_codes;
%include lisp_name_codes;
%include lisp_cons_fmt;
%include lisp_nums;


dcl (addr, addrel, length, index, substr, unspec, min, fixed, bit) builtin;

end lisp_char_fns_;
