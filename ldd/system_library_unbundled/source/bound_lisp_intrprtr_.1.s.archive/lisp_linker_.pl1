/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
lisp_linker_: procedure(link_ptr);

/* Routine to handle the process of locating a compiled object segment referenced by
   a lisp environment.
   D. Reed */

dcl link_ptr ptr,
    (error_table_$namedup, error_table_$noentry) fixed bin(35) external,
    hcs_$initiate entry(char(*), char(*), char(*), fixed bin(1), fixed bin(2), ptr, fixed bin(35)),
    hcs_$make_ptr entry (ptr, char(*), char(*), ptr, fixed bin(35)),
    code fixed bin(35),
    message char(200) varying,
    signal_ entry(char(*), pointer, pointer),
    convert_status_code_ entry(fixed bin(35), char(8) aligned, char(100) aligned),
    error_table_message char(100) aligned,
    (length, verify, substr, reverse) builtin,

    1 condition_info_structure automatic aligned structure,
%include cond_info_structure;
    null builtin,
    sblkp ptr;

%include lisp_comp_subr_block;
%include symbol_block;

dcl lisp_static_vars_$saved_environment_dir char(168) ext;




retry:
	if lisp_static_vars_$saved_environment_dir ^= ""		/* using some saved environment */
	then do;
	   call hcs_$initiate (lisp_static_vars_$saved_environment_dir,	/* act as if we look here first */
				link_ptr -> link_to_subr_code.name,
				link_ptr -> link_to_subr_code.name,
				0,0, sblkp, code);			/* don't care if successful */
	   if sblkp = null
	   then if code ^= error_table_$noentry
	   then if code ^= error_table_$namedup
	   then go to badcode;	/* linker bug prevents noaccess msg */
	   end;



	call hcs_$make_ptr(null(), link_ptr -> link_to_subr_code.name, "symbol_table", sblkp, code);
	if code ^= 0 then do;
badcode:	     message = "Searching for " || link_ptr -> link_to_subr_code.name || "$symbol_table";
	     go to lossage;
	     end;

	if sblkp -> sb.obj_creation_time ^= link_ptr -> link_to_subr_code.compilation_time
	then do;
	     message = "The " || link_ptr -> link_to_subr_code.name
		|| " found by search rules is not the version that was loaded into this environment.";
	     go to lossage;
	     end;

	call hcs_$make_ptr(null(), link_ptr -> link_to_subr_code.name, "*segtop",
				link_ptr -> link_to_subr_code.itp_to_linker, code);
	if code ^= 0 then do;
	     message = "Searching for " || link_ptr -> link_to_subr_code.name || "|*segtop definition.";
	     go to lossage;
	     end;

	link_ptr -> lisp_subr_links(1).further_mod = "001000"b;	/* x0 modifier */

	return;

lossage:
	condition_info_structure.length = size(condition_info_structure);
	condition_info_structure.version = 5246;	/* since none of the documentaton says what this is supposed to be */
	condition_info_structure.action_flags.pad = ""b;
	condition_info_structure.cant_restart = "0"b;
	condition_info_structure.default_restart = "0"b;	/* you'd think "1"b was right, but it wants "0"b */

	/* put error table message corresponding to code in the message */

	if code = 0 then do;
	   info_string = message;
	   end;
	else do;		/* error code goes in message */
	   call convert_status_code_(code, "", error_table_message);
	   info_string = substr(error_table_message, 1, length(error_table_message) -
	      verify(reverse(error_table_message), " ")+1) || "  ";
	   info_string = info_string || message;
	   end;
	info_string = info_string || "
Fix it and type start.";

	condition_info_structure.status_code = 0;	/* I don't need two messages, thank you */
	call signal_("lisp_linkage_error", null, addr(condition_info_structure));

	go to retry;

end lisp_linker_;
