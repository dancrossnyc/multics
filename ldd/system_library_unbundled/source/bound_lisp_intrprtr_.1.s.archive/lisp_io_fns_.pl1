/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
   *                                                            *
   ************************************************************** */
lisp_io_fns_:  procedure;

/*
 * This module contains miscellaneous functions of the New I/O System.
 *
 * The lisp functions implemented by this module are:
 *	allfiles, chrct, eoffn, filepos, inpush, linel, names,
 *	namelist, namestring, shortnamestring.
 *
 * Coded 14 Mar 73 by DAM
 *  ** kludges removed 5/9/80 by BSG, 'cause Multics does that right now.
 * Modified September 1982 by Richard Lamson to add cursorpos lsubr
 */


dcl esw fixed bin,
    myname fixed bin,
    stack ptr,
    nargs fixed bin,
    tsp ptr,	/* top of stack ptr */
    err fixed bin,
    n fixed bin,
    (m, i, len) fixed bin,
    vcs char(208) varying,			/* big enough to hold largest imaginable pathname */
    vcso   char(length(vcs)) based(addrel(addr(vcs),1)),	/* so  vcs  can be passed to a char(*) paraemeter */
    p ptr;

dcl (lisp_error_table_$bad_arg_correctable,
     lisp_error_table_$io_wrong_direction,
     lisp_error_table_$cant_filepos,
     lisp_error_table_$filepos_oob) fixed bin external,
    bad_arg_correctable fixed bin defined lisp_error_table_$bad_arg_correctable,
    io_wrong_direction fixed bin defined lisp_error_table_$io_wrong_direction,
    cant_filepos fixed bin defined lisp_error_table_$cant_filepos,
    filepos_oob fixed bin defined lisp_error_table_$filepos_oob;

declare
(addr, addrel, char, divide, fixed, index, length, null, search, size, string, substr, verify) builtin,
V$infile fixed bin(71) aligned based(addr(addr(lisp_static_vars_$infile) -> based_ptr -> atom.value)),
V$instack fixed bin(71) aligned based(addr(addr(lisp_static_vars_$instack) -> based_ptr -> atom.value)),
Vp$instack pointer aligned based(addr(V$instack)),
lisp_static_vars_$infile fixed bin(71) external,
lisp_static_vars_$eof_atom fixed bin(71) external,
lisp_static_vars_$instack fixed bin(71) external,
(k, j) fixed bin,
lisp_alloc_ entry(fixed bin, fixed bin(71)),
lisp_io_control_$fix_not_ok_iochan entry(pointer, bit(1) aligned, bit(1) aligned),
msf_manager_$get_ptr ext entry(pointer, fixed bin, bit(1) aligned, pointer, fixed bin, fixed bin(35)),
hcs_$star_ ext entry(char(*), char(*), fixed bin(2), ptr, fixed bin, ptr, ptr, fixed bin(35)),
code fixed bin(35),
lisp_special_fns_$ncons entry,
lisp_special_fns_$xcons entry,
expand_path_ ext entry (pointer, fixed bin, pointer, pointer, fixed bin(35)),
get_pdir_ ext entry (char(168)),
dn char(168),
en char(32),
(get_default_wdir_, get_wdir_) ext entry (char(*)),
blank char(3) static init("
	 "),					/* NL, HT, SP - the 'blank' characters */
point_blank char(4) static init(".
	 "),				/* dot || blank */
get_at_entry_ ext entry (char(*) aligned, char(*), char(*), char(*), fixed bin(35)),
enl fixed bin,
lisp_get_atom_ entry(char(*), fixed bin(71)),
star fixed bin(71) def (lisp_static_vars_$STAR),
lisp_static_vars_$STAR fixed bin(71) external,
stream fixed bin(71) def (lisp_static_vars_$stream),
lisp_static_vars_$stream fixed bin(71) external,
lisp_special_fns_$cons entry,
lisp_static_vars_$filepos fixed bin(71) external,
sgp pointer,
fail_act_f bit(1) aligned;


%include lisp_io;
%include lisp_ptr_fmt;
%include lisp_stack_fmt;
%include lisp_atom_fmt;
%include lisp_cons_fmt;
%include lisp_nums;
%include lisp_string_fmt;
%include lisp_common_vars;
%include lisp_name_codes;


	/* The trivial functions to access components of a file object -- also filepos since it has similar args */

chrct:	entry;

	esw = 1;
	myname = fn_chrct;
	go to one_two_fns;

eoffn:	entry;

	esw = 2;
	myname = fn_eoffn;
	go to one_two_fns;

filepos:	entry;

	esw = 3;
	myname = fn_filepos;
	go to one_two_fns;

linel:	entry;

	esw = 4;
	myname = fn_linel;
	go to one_two_fns;

names:	entry;		/* this entry is to be removed eventually - use namelist */


	esw = 5;
	myname = fn_names;
	go to one_two_fns;

charpos:	entry;

	esw = 6;
	myname = fn_charpos;
	go to one_two_fns;

pagel:	entry;

	esw = 7;
	myname = fn_pagel;
	go to one_two_fns;

linenum:	entry;

	esw = 8;
	myname = fn_linenum;
	go to one_two_fns;

pagenum:	entry;

	esw = 9;
	myname = fn_pagenum;
	go to one_two_fns;

endpagefn: entry;

	esw = 10;
	myname = fn_endpagefn;
	go to one_two_fns;


/*
 * Common code for the functions which take 1 or 2 args.
 * The first arg is a file.  If only one arg dispatch via transfer vector get,
 * if two args dispatch via transfer vector put
 */

one_two_fns:
	tsp = addrel(stack_ptr, -2);			/* these are all lsubrs (1 . 2) */
	nargs = tsp -> fixedb;
	stack = addrel(tsp, nargs);

	/* make sure first arg is a file */

agn12:	if stack -> temp_type36(1) & File36 then;
	 else if stack -> temp(1) = nil then do;	/* nil means the defaults, kept on tty_output_chan */
		if esw = 2 then p = tty_input_chan;	/* exception for eoffn */
		else p = tty_output_chan;
		go to defjoin;
		end;
	  else do;
file_arg_loss: call badarg(stack -> temp(1));
	     go to agn12;
	     end;

	/* now dispatch through transfer vector selected by num of args */

	p = stack -> temp_ptr(1);		/* -> iochan block for file */
defjoin:
	if nargs = -2 then go to get(esw);	/* one arg */
	 else go to put(esw);		/* two args */

	/* Error Routines */

badarg:	proc(loser);

dcl loser fixed bin(71);	/* the stack cell containing the bad arg */

	tsp -> temp(1) = loser;
	err = bad_arg_correctable;
	call error;
	loser = tsp -> temp(1);			/* replacement value */
	end;

error:	proc;


dcl unm ptr,
    ercode(2) fixed bin aligned based(unm),
    lisp_error_ entry;

	unm = unmkd_ptr;
	unmkd_ptr = addrel(unm, size(ercode));
	ercode(1) = err;
	ercode(2) = myname;
	call lisp_error_;
	end;


wrong_direction_for_setting_iochan_function:

	stack_ptr = addr(stack -> temp(4));
	stack -> temp(3) = nil;
	call lisp_special_fns_$cons;
	call lisp_special_fns_$cons;
	stack_ptr = addr(stack -> temp(3));
	if myname = fn_eoffn
	then call lisp_get_atom_("eoffn", stack -> temp(2));
	else call lisp_get_atom_("endpagefn", stack -> temp(2));
	call lisp_special_fns_$xcons;
			/* top of marked stack now has neat form to print out */
	err = io_wrong_direction;
	call error;

	/* here are the routines for accessing components of files (or iochan blocks) */

get(1):	n = p -> iochan.linel - p -> iochan.charpos;
	go to nexit;

put(1):	call get_numeric_arg;
	p -> iochan.charpos = p -> iochan.linel - n;
	go to nexit;

get(2):	if p -> iochan.read = "0"b then stack -> temp(1) = p -> iochan.function;
	else stack -> temp(1) = nil;
	go to exit;

put(2):	if p -> iochan.read = "0"b then p -> iochan.function = stack -> temp(2);
	else go to wrong_direction_for_setting_iochan_function;
	go to pexit;

get(4):	n = p -> iochan.linel;
	go to nexit;

put(4):	call get_numeric_arg;
	p -> iochan.linel = n;
	go to nexit;

get(5):	stack -> temp(1) = p -> iochan.namelist;
	go to exit;

put(5):	if stack -> temp(1) ^= nil then go to file_arg_loss;
	if stack -> temp_type(2) = Cons then if stack -> temp_ptr(2) -> cons_types.car = Atsym then go to put5ok;
	call badarg(stack -> temp(2));	/* the new default namelist had better look like a name list */
	go to put(5);
put5ok:
	p -> iochan.namelist = stack -> temp(2);	/* can only change default name list */
	go to pexit;

get(6):	n = p -> iochan.charpos;
	go to nexit;

put(6):	call get_numeric_arg;
	p -> iochan.charpos = n;
	go to nexit;

get(7):	n = p -> iochan.pagel;
	go to nexit;

put(7):	call get_numeric_arg;
	p -> iochan.pagel = n;
	go to nexit;

get(8):	n = p -> iochan.linenum;
	go to nexit;

put(8):	call get_numeric_arg;
	p -> iochan.linenum = n;
	go to nexit;

get(9):	n = p -> iochan.pagenum;
	go to nexit;

put(9):	call get_numeric_arg;
	p -> iochan.pagenum = n;
	go to nexit;

get(10):	if p -> iochan.write = "0"b then stack -> temp(1) = p -> iochan.function;
	else stack -> temp(1) = nil;
	go to exit;

put(10):	if p -> iochan.write = "0"b then p -> iochan.function = stack -> temp(2);
	else go to wrong_direction_for_setting_iochan_function;
	go to pexit;



	/* exit routines for the above */

exit:	stack_ptr = addr(stack -> temp(2));
	return;

nexit:	/* numberic exit */

	stack -> fixnum_fmt.type_info = fixnum_type;
	stack -> fixedb = n;
	go to exit;

pexit:	/* exit, value in stack -> temp(2) */

	stack -> temp(1) = stack -> temp(2);
	go to exit;


	/* Numeric argument getter - from 2nd arg */

get_numeric_arg: proc;

	do while("1"b);				/* loop until valid arg received */

		if addr(stack -> temp(2)) -> fixnum_fmt.type_info = fixnum_type
			then do;
				n = addr(stack -> temp(2)) -> fixedb;
				return;
				end;
		else if addr(stack -> temp(2)) -> flonum_fmt.type_info = flonum_type
		 	then do;
				n = addr(stack -> temp(2)) -> floatb;
				return;
				end;
		call badarg(stack -> temp(2));
		end;

	end;

	/* routines for random access input - filepos */

get(3):	/* (filepos ff) gets current char position of file ff */

	call filepos_ok;
	len = 0;
	do i = 0 by 1 while (i < p -> iochan.component);		/* add up  lengths of preceding components */
		call getlength;
		if fail_act_f then go to filepos_loss_1;
		len = len + m;
		end;
	n = len + p -> iochan.ioindex;		/* n := position in characters from beginning of file */
	go to nexit;

put(3):	/* (filepos ff n) sets character position of file ff to n */

	call filepos_ok;
	if stack -> temp(2) = lisp_static_vars_$eof_atom then do;	/* 5/10/80 -BSG */
	     n = 0;
	     do i = 0 by 1;
		call getlength;
		if fail_act_f then go to got_it;
		n = n + m;
	     end;
	end;
	call get_numeric_arg;			/* get n */
	do i = 0 by 1;				/* scan through components looking for right one */
		call getlength;
		if fail_act_f then go to filepos_loss_2;	/* must habe been o.o.b. (either minus or too big) */
		if m < n then n = n - m;		/* not right one */
		 else go to got_it;			/* right one */
		end;
got_it:
	p -> iochan.component = i;
	p -> iochan.ioindex = n;
	p -> iochan.iolength = m;
	p -> iochan.ioptr = sgp;
	go to pexit;


	/* filepos error handling */

filepos_loss_1:	/* this file can't filepos */

	err = cant_filepos;
	stack_ptr = addr(stack -> temp(4));
	stack -> temp(3) = nil;
filepos_loss:
	stack -> temp(2) = stack -> temp(1);
	stack -> temp(1) = lisp_static_vars_$filepos;
	call lisp_special_fns_$cons;
	call lisp_special_fns_$cons;
	if err = filepos_oob then call lisp_special_fns_$cons;
	call error;
	return;

filepos_loss_2:	/* (filepos ff n) -- n out of bounds */

	err = filepos_oob;
	stack_ptr = addr(stack -> temp(5));
	stack -> temp(4) = nil;
	stack -> temp(3) = stack -> temp(2);
	go to filepos_loss;


	/* int proc to make sure a file is really filepos'able */

filepos_ok:  proc;

	if ^ p -> iochan.seg then go to filepos_loss_1;	/* streams can't random access */
	if string(p -> iochan.flags) & not_ok_to_read then do;	/* and the file better be open */
		call lisp_io_control_$fix_not_ok_iochan(p, "0"b, fail_act_f);
		if fail_act_f then do;
			stack -> temp(1) = addrel(stack_ptr, -2) -> temp(1);	/* value of fail-act */
			go to exit;
			end;
		end;
	end;


	/* int proc to get length in chars of component i of msf */
	/* returns m = length, sgp = ptr, fail_act_f = "1"b if err */

getlength:  proc;

	fail_act_f = "0"b;
	call msf_manager_$get_ptr(p -> iochan.fcbp, i, "0"b, sgp, m, 0);
	if sgp = null then fail_act_f = "1"b;	/* err - probably ran off end of msf */
	  else m = divide(m, 9, 21, 0);	/* bit count --> char count */
	end;

/*
 * subrs for conversion between namestrings and namelists
 */

truename:  entry;

	myname = fn_truename;			/* return actual pathname */
	go to namstr_aa;

namestring: entry;

	myname = fn_namestring;
	go to namstr_aa;			/* join with shortnamestring */

shortnamestring: entry;

	myname = fn_shortnamestring;

namstr_aa:

	stack = addrel(stack_ptr, -2);	/* subr 1 */
	do while (stack -> temp_type(1) ^= Cons);	/* make sure arg is a list */
	     if stack -> temp_type36(1) & File36 then do;	/* also accept files */
		stack -> temp(1) = stack -> temp_ptr(1) -> iochan.namelist;
		go to take_namelist_of_file_arg;
		end;
	     else if stack -> temp(1) = nil then do;	/* default namestring */
		stack -> temp(1) = tty_output_chan -> iochan.namelist;
		go to take_namelist_of_file_arg;
		end;

namstr_wta:
	     err = bad_arg_correctable;
	     call error;
	     end;

	if stack -> temp_ptr(1) -> cons_types36.car & Atsym36 then;	/* whose car is an atom */
	else if stack -> temp_ptr(1) -> cons_types36.car & String36 then do;	/* or a string */
		if myname = fn_shortnamestring then vcs = "";	/* this is all a bit gross */
		else vcs = stack -> temp_ptr(1) -> cons_ptrs.car -> lisp_string.string || ">";
		end;
	else go to namstr_wta;
take_namelist_of_file_arg:
	if myname ^= fn_shortnamestring then		/* look at car only if namestring entry */
	     if stack -> temp_ptr(1) -> cons.car = stream then
		vcs = "$";			/* stream marker */
	     else vcs = stack -> temp_ptr(1) -> cons_ptrs.car -> atom.pname || ">";	/* directory, lose if root: OK */
	else vcs = "";

	call namestringer;

namestringer: proc;		/* so that allfiles can use it too */

	fail_act_f = "0"b;
	do stack -> temp(1) = stack -> temp_ptr(1) -> cons.cdr
	   repeat( stack -> temp_ptr(1) -> cons.cdr )
	   while( stack -> temp_type(1) = Cons );
		if stack -> temp_ptr(1) -> cons_types36.car & Numeric36 then begin;	/* convert number to atom */
			dcl ts ptr, unm ptr, (lisp_reader_$maknam, lisp_print_$exploden) entry;

			unm = unmkd_ptr;
			unmkd_ptr = addrel(unm, 2);
			ts = stack_ptr;
			stack_ptr = addr(ts -> temp(4));

			/* bind *nopoint to t */

			unm -> binding_block.bot_block = rel(addr(ts -> temp(1)));
			unm -> binding_block.top_block = rel(addr(ts -> temp(3)));
			unm -> binding_block.back_ptr = rel(binding_top);
			ts -> temp(2) = lisp_static_vars_$stnopoint;
			ts -> temp(1) = ts -> temp_ptr(2) -> atom.value;
			binding_top = unm;
			ts -> temp_ptr(2) -> atom.value = t_atom;

			/* call exploden on the number */

			ts -> temp(3) = stack -> temp_ptr(1) -> cons.car;
			call lisp_print_$exploden;

			/* maknam up the result */

			call lisp_reader_$maknam;

			/* catenate it onto vcs */

			vcs = vcs || ts -> temp_ptr(3) -> atom.pname || ".";

			/* get rid of the binding */

			ts -> temp_ptr(2) -> atom.value = ts -> temp(1);
			binding_top = ptr(binding_top, unm -> binding_block.back_ptr);
			unmkd_ptr = unm;
			stack_ptr = ts;
			end;

		else if stack -> temp_ptr(1) -> cons_types36.car & Atsym36 then
		     vcs = vcs || stack -> temp_ptr(1) -> cons_ptrs.car -> atom.pname || ".";
		else if stack -> temp_ptr(1) -> cons_types36.car & String36 then
			vcs = vcs || stack -> temp_ptr(1) -> cons_ptrs.car -> lisp_string.string || ".";
		end;

	if (stack -> temp(1) ^= nil) &
	   (stack -> temp_type36(1) & Atsym36) ^= ""b then	/* dotted list */
	     if stack -> temp(1) = star then vcs = vcs || "**";	/* .* */
	     else vcs = vcs || "**." || stack -> temp_ptr(1) -> atom.pname;
						/* (x>foo . bar) => x>foo.**.bar */
						/* Multics does this now 5/9/80 - BSG */
	 else if substr(vcs, length(vcs), 1) = "." then
	      vcs = substr(vcs, 1, length(vcs)-1);		/* if not dotted, drop last dot */

	return;
	end namestringer;

	/* for truename, get the actual path name */

	if myname = fn_truename then call find_true_name(vcs);

	/* convert vcs to a lisp string & return it */

	call make_a_string(vcso, stack -> temp(1));
	go to exit;

defaultf: entry;		/**** function to set the default namelist - replaces (names nil f) ****/

	call internal_namelist(fn_defaultf);	/* get a namelist at the top of the stack, by hook or by crook */

	tsp = addrel(stack_ptr, -2);		/* subr 1*/

	/* stash it away */

	tty_output_chan -> iochan.namelist = tsp -> temp(1);	/* where we keep the defaults */
	return;		/* value is argument */

namelist:	entry;		/**** convert a string specifying a file into a list ****/

	myname = fn_namelist;
	go to namelist_join;


internal_namelist: entry(a_myname);		/* same as namelist, except different myname since called
					   on behalf of some other function */
dcl a_myname fixed bin;

	myname = a_myname;
namelist_join:
	stack = addrel(stack_ptr, -2);	/* subr 1 */
namlstaa:	if stack -> temp(1) = nil then do;		/* get default namelist */
		stack -> temp(1) = tty_output_chan -> iochan.namelist;
		go to exit;
		end;
	else if stack -> temp_type36(1) & String36 then p = stack -> temp_ptr(1);
	else if stack -> temp_type36(1) & Atsym36 then p = addr(stack -> temp_ptr(1) -> atom.pnamel);
	else if stack -> temp_type36(1) & File36 then do;		/* namelist of a file */
		stack -> temp(1) = stack -> temp_ptr(1) -> iochan.namelist;
		go to exit;
		end;
	else if stack -> temp_type(1) then do;
namlsterr:	err = bad_arg_correctable;
		call error;
		go to namlstaa;
		end;
	else if stack -> temp_ptr(1) -> cons_types36.car & Atsym36
	     then go to exit;		/* legal name list */
	else go to namlsterr;		/* list, but car was not an atom */

	/* parse string and cons up a list */


	i = verify(p -> lisp_string.string, blank);	/* skip leading blanks: NL, HT, SP */
	if i = 0 then go to namlsterr;	/* barf at all-blank string */
	j = search(substr(p -> lisp_string.string, i), blank)-1;	/* find end of non-blank part of string */
	if j < 0 then j = p -> lisp_string.string_length - i + 1;
	if j > 208 then go to namlsterr;	/* too long - barf at it */
	vcs = substr(p -> lisp_string.string, i, j);	/* copy non-blank portion of string */

	if substr(vcs, 1, 1) = "$" then do;	/* stream specifier */
		stack_ptr = addr(stack -> temp(4));
		stack -> temp(3) = nil;
		stack -> temp(1) = stream;
		call lisp_get_atom_(substr(vcs, 2), stack -> temp(2));
		call lisp_special_fns_$cons;
		call lisp_special_fns_$cons;
		go to exit;
		end;

	/* segment specifier - parse it up into dir>a.b.c and make list */

	if length(vcs) > 5 			/* this is for the benefit of lap, mostly */
	then if substr(vcs, 1, 5) = "[pd]>"
	then do;
	     call get_pdir_(dn);
	     vcs = substr(dn, 1, index(dn, " ")-1) || substr(vcs, 5);
	     end;

	call expand_path_(addr(vcso),		/* boy, expand_path_ sure is a kludge! */
			length(vcs),
			addr(dn),
			addr(en),
			code);
	if code ^= 0 then go to namlsterr;
	if search(vcs, "<>") = 0 then stack -> temp(1) = star;	/* no dir specified, use * instead of wdir */
	  else do;
		j = search(dn, blank)-1;
		if j < 0 then j = length(dn);
		call lisp_get_atom_(char(dn, j), stack -> temp(1));
		end;

	/* en has entry name, stack -> temp(1) has directory */

	k = 1;
	tsp = stack;			/* tsp will advance as name components are pushed onto stack */


entry_names_loop:
	tsp = addrel(tsp, 2);
	stack_ptr = addr(tsp -> temp(2));
	j = search(substr(en, k), point_blank);		/* find period, or else blank which ends name */
	if j ^= 0 then 			/* get another entry name */
	     if substr(en, k+j-1, 1) ^= "." then;	/* as j = 0, this is the end */
	     else if substr(en, k, j-1) = "**" then do;	/* embedded ** special construction: foo.**.bar => (-- foo . bar) */
		k = k + j;		/* skip over the .**. */
		j = search(en, blank)-1;
		if j < 0 then j = length(en);
		call lisp_get_atom_(substr(en, k, j-k+1), tsp -> temp(1));	/* get the rest (e.g. bar) */
		go to cons_it_up;		/* and this is the end */
		end;
	     else do;			/* single dot, get preceding name, and continue */
		call lisp_get_atom_(substr(en, k, j-1), tsp -> temp(1));
		k = k + j;
		go to entry_names_loop;
		end;
	/* do final entry name component */

	if j = 0 then j = length(en)-k+2;
	if substr(en, k, j-1) = "**" then do;		/* ends with .**, put dotted star in namelist */
		tsp -> temp(1) = star;
		go to cons_it_up;
		end;
	call lisp_get_atom_(substr(en, k, j-1), tsp -> temp(1));

	stack_ptr = addr(tsp -> temp(3));
	tsp -> temp(2) = nil;

cons_it_up:
	/* Now make a list out of all this junk */

	do while (stack_ptr ^= addr(stack -> temp(2)));
	     call lisp_special_fns_$cons;
	     end;
	go to exit;


/*
 * Subr to manipulate the input-source stack
 */

inpush:	entry;

	stack = addrel(stack_ptr, -2);		/* subr 1 */
inpaa:	if stack -> temp_type36(1) & File36 then do;	/* (inpush file) */
		stack_ptr = addr(stack -> temp(4));
		stack -> temp(3) = V$instack;
		stack -> temp(2) = V$infile;
		call lisp_special_fns_$cons;		/* push infile onto instack */
		V$instack = stack -> temp(2);
		V$infile = stack -> temp(1);
		end;
	else if stack -> flonum_fmt.type_info = flonum_type then do;
		stack -> fixedb = fixed(stack -> floatb);
		go to inpbb;
		end;
	 else if stack -> fixnum_fmt.type_info = fixnum_type then
inpbb:	     if stack -> fixedb = 0 then do;		/* (inpush 0) */
		stack -> temp(1) = V$infile;
		go to exit;
		end;
	     else if stack -> fixedb < 0 then 		/* (inpush -n) */
		do n = stack -> fixedb  by 1  while(n < 0);
		     if V$instack = nil then V$infile = t_atom;
		      else do;
			V$infile = Vp$instack -> cons.car;
			V$instack = Vp$instack -> cons.cdr;
			end;
		     end;
	     else					/* (inpush +n) */
		do n = stack -> fixedb by -1 to 1;
		     stack_ptr = addr(stack -> temp(3));
		     stack -> temp(1) = V$infile;
		     stack -> temp(2) = V$instack;
		     call lisp_special_fns_$cons;	/* push infile onto instack */
		     V$instack = stack -> temp(1);
		     end;
	 else do;	/*** wrng-type-arg error ***/
		myname = fn_inpush;
		err = bad_arg_correctable;
		call error;
		go to inpaa;
		end;

	/* return the value of infile, and adjust ^q */

	stack -> temp(1) = V$infile;
	if stack -> temp(1) = nil | stack -> temp(1) = t_atom
	then addr(ctrlQ) -> based_ptr -> atom.value = nil;
	go to exit;

/*
 * The Allfiles subr, which returns a list of namelists for all the files which
 * match a given namelist.
 */

allfiles:	entry;

	myname = fn_allfiles;
	stack = addrel(stack_ptr, -2);		/* subr 1 */
allfiles_aa:
	if stack -> temp_type(1) ^= Cons then call internal_namelist(myname);
	if stack -> temp_ptr(1) -> cons_types36.car & (Atsym36 | String36) then;else
allfiles_err:	do;
		err = bad_arg_correctable;
		call error;
		go to allfiles_aa;
		end;

	stack_ptr = addr(stack -> temp(3));
	stack -> temp(2) = nil;		/* init result: consed-up list of namelists */

	if stack -> temp_ptr(1) -> cons.car = star then do;


/*
 * Starred Directory: use lisp search rules:
 *	1) working dir
 *	2) default wdir
 *	3) >lisp
 *
 * (these ought to be changeable by the user)
 *
 * The actual search is done in reverse order so that the car of the resulting
 * list will be the one that comes first in the search rules.
 */

		dn = ">lisp";
		call somefiles;
		call get_default_wdir_(dn);
		call somefiles;
		call get_wdir_(dn);
		call somefiles;
		end;

	else if stack -> temp_ptr(1) -> cons.car = stream then do;	/* stream is nil, or list of it if attached */
		call get_at_entry_(stack -> temp_ptr(1) -> cons_ptrs.cdr -> cons_ptrs.car -> atom.pname,
				"", "", "", code);
		if code ^= 0 then go to pexit;		/* not attached, return nil */
		stack_ptr = addr(stack -> temp(2));
		call lisp_special_fns_$ncons;			/* attached, return list of argument */
		go to exit;
		end;

	else if stack -> temp_ptr(1) -> cons_types36.car & String36 then do;
		dn = stack -> temp_ptr(1) -> cons_ptrs.car -> lisp_string.string;
		call somefiles;
		end;

	else do;
		dn = stack -> temp_ptr(1) -> cons_ptrs.car -> atom.pname;	/* use specified directory */
		call somefiles;
		end;

	go to pexit;		 		/* return the list in stack -> temp(2) */




/*
 * routine to do allfiles on one directory
 *
 * dn = pathname of the directory
 * stack -> temp(1) = namelist (pattern)
 * results are consed onto stack -> temp(2)
 */

somefiles: proc;

	dcl an_area area(4096);		/* plenty big enough */
						/* Made 4096 BSG 5/9/80 */
	dcl dnl fixed bin;			/* non-blank length of dn */

	dcl ecount fixed bin, (eptr, nptr) ptr,
	    1 entries (ecount) based(eptr) aligned,
	     2 type bit(2) unaligned,
	     2 nname fixed bin(15) unaligned,
	     2 nindex fixed bin(17)  unaligned,
	    names_str (1) char(32) aligned based(nptr);

	stack_ptr = addr(stack -> temp(4));
	stack -> temp(3) = stack -> temp(1);
	stack = addr(stack -> temp(3));
	dnl= length (rtrim (dn));
	vcs = "";
	call namestringer;			/* get back the starred entry name in vcs */
	stack = addrel(stack, -4);
	call hcs_$star_(dn, vcso, 2, addr(an_area), ecount, eptr, nptr, code);

	if code ^= 0 then return;		/* some kind of lossage, assume not found */

	do i = 1 to ecount;			/* put all the entries on the list */
	     j = search(names_str(nindex(i)), " ")-1; if j < 0 then j = 32;
		dcl bug_fixer char(168), bug_fixer_aa based(addr(bug_fixer)) char(dnl+j+1);
	     bug_fixer =  char(names_str(nindex(i)), j);	/* fix v2pl1 bug */
	     bug_fixer = char(dn, dnl) || ">" || bug_fixer;
	     call make_a_string(bug_fixer_aa, stack -> temp(3));
	     call internal_namelist(myname);			/* expand this string into a list */
	     call lisp_special_fns_$xcons;	/* and cons onto the results list */
	     stack_ptr = addr(stack -> temp(4));/* and fix stack_ptr */
	     end;
	return;

	end;

make_a_string: proc(the_string, where_to_put_it);

dcl the_string char(*) unaligned, where_to_put_it fixed bin(71);

	call lisp_alloc_(divide(length(the_string)+7, 4, 17, 0), where_to_put_it);
	addr(where_to_put_it) -> lisp_ptr.type = String;
	addr(where_to_put_it)->based_ptr -> lisp_string.string_length = length(the_string);
	addr(where_to_put_it)->based_ptr -> lisp_string.string = the_string;
	end;

cursorpos:	entry;

/* the LISP cussorpos lsubr, which sets or get the
   zero-origin (line . char) position of a display terminal. */

declare  (X, Y) fixed binary;
declare	vcs_bit_bucket char (1) varying;
%include window_control_info;
declare 1 window_info auto aligned like window_position_info;
declare	iox_$control entry (ptr, char(*), ptr, fixed bin(35));
declare	iox_$look_iocb entry (char(*), ptr, fixed bin(35));
declare	window_$clear_region entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin(35));
declare	window_$clear_to_end_of_line entry (ptr, fixed bin(35));
declare	window_$clear_to_end_of_window entry (ptr, fixed bin(35));
declare	window_$clear_window entry (ptr, fixed bin(35));
declare	window_$delete_chars entry (ptr, fixed bin, fixed bin(35));
declare	window_$get_cursor_position entry (ptr, fixed bin, fixed bin, fixed bin(35));
declare	window_$get_one_unechoed_char entry (ptr, char(1) var, bit(1) aligned, fixed bin(35));
declare	window_$insert_text entry (ptr, char(*), fixed bin(35));
declare	window_$position_cursor entry (ptr, fixed bin, fixed bin, fixed bin(35));
declare	window_$scroll_region entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin(35));


	stack = addrel(stack_ptr, -2);
	nargs = stack -> fixedb;
	stack = addrel(stack, nargs);

	nargs = divide (nargs, -2, 17, 0);		/* Get real number of args. */
	if nargs = 0
	then p = tty_output_chan;
	else do;
		nargs = nargs - 1;			/* File argument omitted. */
		if stack -> temp (nargs+1) = t_atom then p = tty_output_chan;
		else if stack -> temp_type36 (nargs+1) & File36
		     then p = stack -> temp_ptr (nargs+1);
		     else do;
			     nargs = nargs + 1;		/* No file argument really present. */
			     p = tty_output_chan;
			end;
	     end;

	if p -> iochan.seg then go to cursorpos_returns_nil;   /* Can't do (cursorpos) to segment. */

	if p -> iochan.fcbp = null ()			/* Must have an IOCB ptr to work with. */
	then do;
		call iox_$look_iocb (p -> iochan.name, p -> iochan.fcbp, code);
		if code ^= 0 then go to cursorpos_returns_nil;
	     end;

	p = p -> iochan.fcbp;			/* Get iocb ptr */

	call window_$get_cursor_position (p, Y, X, code);
	if code ^= 0 then go to cursorpos_returns_nil;

	if nargs = 0
	then do;
		stack_ptr = addr (stack -> temp (3));
		stack -> temp_type36 (1), stack -> temp_type36 (2) = fixnum_type;
		addr (stack -> temp (1)) -> fixedb = Y - 1;
		addr (stack -> temp (2)) -> fixedb = X - 1;
		call lisp_special_fns_$cons;		/* return (LINE . COLUMN) */
		go to exit;
	     end;


	     if nargs = 2
	     then do;
		     if stack -> temp (1) = nil then;
		     else if stack -> temp_type36 (1) & Fixed36
			then Y = 1 + addr (stack -> temp (1)) -> fixedb;
			else go to cursorpos_arg_symbol;
		     if stack -> temp (2) = nil then;
		     else if stack -> temp_type36 (2) & Fixed36
			then X = 1 + addr (stack -> temp (2)) -> fixedb;
			else go to cursorpos_returns_nil;
position_cursor_bounded: call get_window_info;
		     X = min (max (X, 1), window_info.extent.width);
		     Y = min (max (Y, 1), window_info.extent.height);
		     call window_$position_cursor (p, Y, X, code);
		     go to cursorpos_check_code;
		end;

cursorpos_arg_symbol:
	     if stack -> temp_type36 (1) & Atsym36 then en = stack -> temp_ptr (1) -> atom.pname;
	     else if stack -> temp_type36 (1) & String36 then en = stack -> temp_ptr (1) -> lisp_string.string;
	     else go to cursorpos_returns_nil;
	     go to cursorpos_function (index 
		("ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
		 translate (substr (en, 1, 1),
			  "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
			  "abcdefghijklmnopqrstuvwxyz")));

cursorpos_function (1):				/* A: fresh line */
	     if X = 1 then go to cursorpos_returns_t;
	     X = 1;
	     Y = Y + 1;
position_cursor_wrap:
	     call get_window_info;
	     if X < 1 then X = window_info.extent.width;
	     else if X > window_info.extent.width then X = 1;
	     if Y < 1 then Y = window_info.extent.height;
	     else if Y > window_info.extent.height then Y = 1;
	     call window_$position_cursor (p, Y, X, code);
cursorpos_check_code:
	     if code ^= 0 then go to cursorpos_returns_nil;
	     go to cursorpos_returns_t;

cursorpos_function (2):				/* B: cursor backspace */
	     X = X - 1;
	     go to position_cursor_wrap;

cursorpos_function (3):				/* C: Home & clear */
	     call window_$clear_window (p, code);
	     go to cursorpos_check_code;

cursorpos_function (4):				/* D: cursor Down */
	     Y = Y + 1;
	     go to position_cursor_wrap;

cursorpos_function (5):				/* E: Clear to end of screen */
	     call window_$clear_to_end_of_window (p, code);
	     go to cursorpos_check_code;

cursorpos_function (6):				/* F: cursor Forward */
	     X = X + 1;
	     go to position_cursor_wrap;
		
cursorpos_function (8):				/* H: move to column (arg 2) */
	     if nargs < 2 then go to cursorpos_returns_nil;
	     if stack -> temp_type36 (2) & Fixed36 then X = 1 + addr (stack -> temp (2)) -> fixedb;
	     else go to cursorpos_returns_nil;
	     go to position_cursor_bounded;

cursorpos_function (11):				/* K: Erase 1 character forward */
cursorpos_K:
	     call window_$clear_region (p, Y, X, 1, 1, code);
	     go to cursorpos_check_code;

cursorpos_function (12):				/* L: clear to end of line */
cursorpos_function (29):				/* ]: same as L (obsolete) */
	     call window_$clear_to_end_of_line (p, code);
	     go to cursorpos_check_code;

cursorpos_function (13):				/* M: More wait, then home up */
	     Y = 0;				/* Go to row 1 */
cursorpos_function (14):				/* N: More wait, then (TERPRI) */
	     X = 1;				/* Go to left of column */
	     Y = Y + 1;				/* In next row */
	     call window_$get_one_unechoed_char (p, vcs_bit_bucket, "1"b, code);
	     if code ^= 0 then go to cursorpos_returns_nil;
	     go to position_cursor_wrap;

cursorpos_function (20):				/* T: (also 'TOP) home cursor to (0 0) */
	     X, Y = 1;
	     go to position_cursor_wrap;

cursorpos_function (21):				/* U: cursor Up */
	     Y = Y - 1;
	     go to position_cursor_wrap;

cursorpos_function (22):				/* V: Move to line (arg 2) */
	     if nargs < 2 then go to cursorpos_returns_nil;
	     if stack -> temp_type36 (2) & Fixed36 then Y = 1 + addr (stack -> temp (2)) -> fixedb;
	     else go to cursorpos_returns_nil;
	     go to position_cursor_bounded;

cursorpos_function (24):				/* X: (cursorpos B) (cursorpos K) */
	     if X = 1 then go to cursorpos_K;
	     X = X - 1;
	     call window_$position_cursor (p, Y, X, code);
	     if code ^= 0 then go to cursorpos_returns_nil;
	     go to cursorpos_K;

cursorpos_function (26):				/* Z: position to lower-left corner */
	     X = 1;
	     Y = 100000;				/* Make sure it's out of bounds */
	     go to position_cursor_bounded;

cursorpos_function (27):				/* [: insert line */
	     i = -1;
	     go to idel_lines_common;

cursorpos_function (28):				/* \: delete line */
	     i = 1;

idel_lines_common:
	     call get_window_info;
	     call window_$scroll_region (p, Y, (window_info.extent.height - Y + 1), i, code);
	     go to cursorpos_check_code;
	     
cursorpos_function (30):				/* ^: insert char */
	     call window_$insert_text (p, " ", code);
	     if code ^= 0 then go to cursorpos_returns_nil;
	     call window_$position_cursor (p, Y, X, code);
	     go to cursorpos_check_code;

cursorpos_function (31):				/* _: delete char */
	     call window_$delete_chars (p, 1, code);
	     go to cursorpos_check_code;

cursorpos_function (0):				/* Undefined cursorpos function */
cursorpos_function (7):				/* G: unused */
cursorpos_function (9):				/* I: outut character (arg 2) -- 
						      not implemented on Multics */
cursorpos_function (10):				/* J: unused */
cursorpos_function (15):				/* O: unused */
cursorpos_function (16):				/* P: output ^P -- unused in Multics */
cursorpos_function (17):				/* Q: output ^C -- unused in Multics */
cursorpos_function (18):				/* R: unused */
cursorpos_function (19):				/* S: unused */
cursorpos_function (23):				/* W: unused */
cursorpos_function (25):				/* Y: unused */
cursorpos_returns_nil:
	stack -> temp(1) = nil;			/* indicate not display tty */
	go to exit;

cursorpos_returns_t:
	stack -> temp (1) = t_atom;			/* It worked. */
	go to exit;
	

get_window_info:
     procedure;

	window_info.version = window_position_info_version_1;
	call iox_$control (p, "get_window_info", addr (window_info), code);
	if code ^= 0 then go to cursorpos_returns_nil;

     end;

/* subroutine to find true pathname, clobber into arg */

find_true_name:  procedure(vcs);

dcl vcs char(*) varying parameter;

dcl dn char(168),
    en char(32),
    fn char(168),
    rnl fixed bin,
    sgp pointer,
    code fixed bin(35),
    hcs_$fs_get_path_name entry(pointer, char(*), fixed bin, char(*), fixed bin(35)),
    hcs_$initiate entry(char(*), char(*), char(*), fixed bin, fixed bin, pointer, fixed bin(35)),
    expand_path_ entry(pointer, fixed bin, pointer, pointer, fixed bin(35)),
    hcs_$terminate_noname entry(pointer, fixed bin(35));

dcl (null, substr, length, verify, reverse) builtin;

	if substr(vcs, 1, 1) ^= ">" then return;
	fn = vcs;
	call expand_path_(addr(fn), 168, addr(dn), addr(en), code);
	if code ^= 0 then return;
	call hcs_$initiate(dn, en, "", 0, 0, sgp, code);
	if sgp = null then return;
	call hcs_$fs_get_path_name(sgp, dn, rnl, en, code);
	if code ^= 0 then return;
	call hcs_$terminate_noname(sgp, code);

	if rnl > 1 then do;
	   rnl = rnl + 1;
	   substr(dn, rnl, 1) = ">";
	   end;
	vcs = substr(dn, 1, rnl) || substr(en, 1, 1+length(en)-verify(reverse(en), " "));
end find_true_name;

end;

