/* ***************************************************************
   *                                                             *
   * Copyright (c) 1982 by Massachusetts Institute of Technology *
   *                                                             *
   *************************************************************** */


/* 
 * v1_forum_trans_mgr_ Manager of forum transactions.  We call v1_forum_mgr_ to initiate or otherwise
    deal with forums as a whole */

/* Original code By Mike Auerbach and Jeff Schiller
   1/82 Jay Pattin Many changes for forum and general reorganization
   2/16/82 Jay Pattin added list_acl
   3/29/82 Jay Pattin added privileged entries
   4/16/82 Jay Pattin added force_acl to make privileged entries work correctly
   5/05/82 Jay Pattin added support for read only participants
   8/20/82 Jay Pattin to check entry names and anonymous users
   10/9/82 Jay Pattin added trans_time_info, user deletion of own transactions
   11/14/82 Jay Pattin split off forum_space_mgr_.
   8/5/83 Jay Pattin new notifications */

v1_forum_trans_mgr_$enter_trans:
     procedure (a_forum_idx, a_input_string, a_previous_trans, a_subject, a_filled_sw, a_trans_no, a_code);

declare	(a_attendee_idx		fixed bin,
	a_code			fixed bin (35),	/* returned status code */
	a_deleted_sw		bit (1) aligned,
	a_filled_sw		bit (1) aligned,
	a_first_trans_idx		fixed bin,
	a_flags_word		bit (36) aligned,
	a_forum_idx		fixed bin,	/* index in forum data of this forum */
	(a_high_time, a_low_time)	fixed bin (71),
	(a_high_trans, a_low_trans)	fixed bin,
	a_input_string		char (*),
	a_last_trans_idx		fixed bin,
	a_last_seen_trans_idx	fixed bin,
	a_new_trans_count		fixed bin,
	a_output_area		ptr,		/* pointer to area to allocate text in */
	a_output_ptr		ptr,		/* pointer to transaction structure (output) */
	(a_pref, a_nref)		fixed bin,
	a_previous_trans		fixed bin,	/* transaction to chain this one from, 0 if none */
	a_subject			char (*),
	a_trans_no		fixed bin,
	a_type			fixed bin,
	a_uid			bit (36) aligned,
	a_user_name		char (*),
	a_value_sw		bit (1) aligned) parameter;

declare	anon_sw			bit (1) aligned,
	attendee_idx		fixed bin,	/* index into attendee part of forum */
	chairman			bit (1) aligned,
	code			fixed bin (35),
	dir_name			char (168),
	done			bit (1) aligned,
	forum_idx			fixed bin,
	forum_name		char (32),
	input_len			fixed bin,
	(high_time, low_time)	fixed bin (71),
	(high_trans, low_trans)	fixed bin,
	i			fixed bin,
	message			char (256),
	new_trans_count		fixed bin,
	next_trans_ptr		ptr,		/* pointer to next transaction in proceedings segment */
	person_id			char (22),
	(nref, pref)		fixed bin,
	project_id		char (9),
	transx			fixed bin,
	trans_no			fixed bin,
	trans_ptr			ptr,		/* pointer to transaction in proceedings segment */
	type			fixed bin,
	uid			bit (36) aligned,
	user_name			char (32),
	value_sw			bit (1) aligned,
	(write_allowed, privileged)	bit (1) aligned,
	(any_other, area, out_of_bounds, record_quota_overflow, seg_fault_error, cleanup)
				condition,
	(addr, clock, rtrim, length, null, ptr, substr)
				builtin;

declare	v1_forum_mgr_$get_ptrs		entry (fixed bin, ptr, ptr, fixed bin, bit (1) aligned, fixed bin (35)),
	v1_forum_mgr_$unlock		entry (ptr),
	forum_notify_gate_$lookup	entry (char (*), bit (1) aligned, fixed bin (35)),
	hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
	hcs_$force_write		entry (ptr, bit (36), fixed bin (35)),
	hcs_$get_uid_seg		entry (ptr, bit (36) aligned, fixed bin (35)),
	hcs_$wakeup		entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35)),
	ioa_$rsnnl		entry options (variable),
	send_mail_		entry (char (*), char (*), ptr, fixed bin (35)),
	user_info_$login_data	entry (char (*), char (*), char (*), fixed bin, fixed bin, fixed bin,
				fixed bin (71), char (*));

declare	(error_table_$noalloc,
	error_table_$seg_busted)	fixed bin (35) external;

declare	(forum_error_table_$cant_notify,
	forum_error_table_$no_message,
	forum_error_table_$message_too_long,
	forum_error_table_$incorrect_uid,
	forum_error_table_$meeting_bloat,
	forum_error_table_$invalid_trans_idx,
	forum_error_table_$read_only,
	forum_error_table_$rqo,
	forum_error_table_$trans_deleted,
	forum_error_table_$chairman_only,
	forum_error_table_$trans_reaped,
	forum_error_table_$invalid_att_idx,
	forum_error_table_$unexpected_fault)
				fixed bin (35) external;

declare	(forum_data_$print_eligibility_messages,
	forum_data_$chairman_override)
				bit (1) aligned external;

declare	egress			label variable,
	output_area		area based (a_output_area),
	proceeding_string		char (alloc_text_length) based (trans_ptr),
	transaction		char (input_len) based;
%page;
%include v1_forum_structures;
%page;
%include forum_flags;
%page;
%include forum_user_trans;
%page;
%include send_mail_info;
%page;
/* v1_forum_trans_mgr_$enter_trans:
     entry (a_forum_idx, a_input_string, a_previous_trans,	a_subject, a_filled_sw, a_trans_no, a_code); */

	forum_idx = a_forum_idx;			/* copy for safety against user ring */

	call initialize (ENTER_PUNT);

	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);
	on seg_fault_error call error (error_table_$seg_busted);
	on any_other call error (forum_error_table_$unexpected_fault);

	call v1_forum_mgr_$get_ptrs (forum_idx, forum_control_ptr, proceedings_ptr, attendee_idx, write_allowed, code);
	if code ^= 0 then call error (code);
	if ^write_allowed then call error (forum_error_table_$read_only);

	next_trans_ptr = ptr (proceedings_ptr, forum_control.next_trans_loc);
	on out_of_bounds call error (forum_error_table_$meeting_bloat);
	on record_quota_overflow call error (forum_error_table_$rqo);

	input_len = length (a_input_string);

	next_trans_ptr -> transaction = a_input_string;

	revert out_of_bounds;

	call hcs_$force_write (proceedings_ptr, (""b), (0));

	transx = forum_control.no_transactions + 1;

	forum_control.transactions (transx).offset = forum_control.next_trans_loc;
	forum_control.transactions (transx).length = input_len;

	forum_control.transactions (transx).person_id = forum_control.attendee (attendee_idx).person_id;
	forum_control.transactions (transx).project_id = forum_control.attendee (attendee_idx).project_id;
	forum_control.transactions (transx).time = clock ();
	forum_control.transactions (transx).subject = a_subject;
	forum_control.transactions (transx).prior_ref_index,
	     forum_control.transactions (transx).next_ref_index = 0;
	forum_control.transactions (transx).unfilled = a_filled_sw;
	forum_control.transactions (transx).deleted,
	     forum_control.transactions (transx).gone = "0"b;

	pref = a_previous_trans;			/* copy into lower ring */

	if pref ^= 0 then /* link this transaction into reply chain if apropriate */
	     do;
		do while (forum_control.transactions (pref).next_ref_index ^= 0);
		     pref = forum_control.transactions (pref).next_ref_index;
		end;
		forum_control.transactions (pref).next_ref_index = transx;
		forum_control.transactions (transx).prior_ref_index = pref;
	     end;

	forum_control.next_trans_loc = forum_control.next_trans_loc + (input_len + 3) / 4;
	a_trans_no, forum_control.no_transactions = transx;    /* atomic commit point */

	revert seg_fault_error;
	revert record_quota_overflow;
	on any_other call error (forum_error_table_$cant_notify);

	call hcs_$get_uid_seg (forum_control_ptr, uid, code);
	if code ^= 0 then call error (code);

	msg_ptr = addr (forum_message);
	forum_message.forum_uid = uid;		/* for validation purposes */
	forum_message.index = attendee_idx;

	call hcs_$fs_get_path_name (forum_control_ptr, dir_name, (0), forum_name, code);
	if code ^= 0 then call error (code);

	forum_name = substr (forum_name, 1, length (rtrim (forum_name)) - length (".control"));
	call ioa_$rsnnl ("A new transaction has just been added to the ^a>^a meeting.", message, (0),
	     dir_name, forum_name);

	send_mail_info.version = 2;
	send_mail_info.sent_from = "forum";
	string (send_mail_info.switches) = ""b;
	send_mail_info.wakeup, send_mail_info.always_add = "1"b;

	do transx = 1 to forum_control.no_attendees;
	     if transx = attendee_idx then goto NEXT;
	     if forum_control.attendee (transx).attending & ^forum_control.attendee (transx).removed then
		call hcs_$wakeup (forum_control.attendee (transx).process_id,
		     forum_control.attendee (transx).public_wakeup_chan, ipc_message, (0));
	     else if forum_control.attendee (transx).notify & ^forum_control.attendee (transx).removed then do;
		call forum_notify_gate_$lookup (forum_control.attendee (transx).person_id, done, code);
		if done & code = 0 then
		     call send_mail_ (rtrim (forum_control.attendee (transx).person_id) || "." ||
			rtrim (forum_control.attendee (transx).project_id),
			rtrim (message), addr (send_mail_info), (0));
	     end;
NEXT:	end;
	code = 0;

ENTER_PUNT:

	call v1_forum_mgr_$unlock (forum_control_ptr);
	a_code = code;
	return;
%page;
v1_forum_trans_mgr_$read_trans:
     entry (a_forum_idx, a_trans_no, a_output_area, a_output_ptr, a_code);

	trans_no = a_trans_no;			/* copy trans_no to inner ring */

	call initialize (READ_PUNT);

	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);
	on seg_fault_error call error (error_table_$seg_busted);
	on any_other call error (forum_error_table_$unexpected_fault);

	call v1_forum_mgr_$get_ptrs (a_forum_idx, forum_control_ptr, proceedings_ptr,
	     attendee_idx, (""b), code);
	if code ^= 0 then call error (code);

	if trans_no < 1 | trans_no > forum_control.no_transactions then
	     call error (forum_error_table_$invalid_trans_idx);

	if forum_control.transactions (trans_no).deleted then
	     if person_id ^= forum_control.chairman.person_id & person_id ^= forum_control.transactions (trans_no).person_id then
		call error (forum_error_table_$trans_deleted);
	     else if forum_control.transactions (trans_no).gone then call error (forum_error_table_$trans_reaped);

	alloc_subject_length = length (forum_control.transactions (trans_no).subject);
	alloc_text_length = forum_control.transactions (trans_no).length;

	on area call error (error_table_$noalloc);
	allocate forum_user_trans in (output_area) set (forum_user_trans_ptr); /* allocate structure in desired area */
	revert area;

	trans_ptr = ptr (proceedings_ptr, forum_control.transactions (trans_no).offset);

	forum_user_trans.type = user_trans_type;
	forum_user_trans.person_id = forum_control.transactions (trans_no).person_id;
	forum_user_trans.project_id = forum_control.transactions (trans_no).project_id;
	forum_user_trans.trans_no = trans_no;
	forum_user_trans.time = forum_control.transactions (trans_no).time;
	forum_user_trans.prev_trans_ptr, forum_user_trans.next_trans_ptr = null (); /* these are used by user ring code */
	forum_user_trans.subject = forum_control.transactions (trans_no).subject;
	forum_user_trans.text = proceeding_string;
	forum_user_trans.unfilled = forum_control.transactions (trans_no).unfilled;

	if forum_control.transactions (trans_no).deleted then a_code = forum_error_table_$trans_deleted;
	else a_code = 0;

	a_output_ptr = forum_user_trans_ptr;
	call v1_forum_mgr_$unlock (forum_control_ptr);
	return;

READ_PUNT:
	call v1_forum_mgr_$unlock (forum_control_ptr);
	a_output_ptr = null ();
	a_code = code;
	return;
%page;
v1_forum_trans_mgr_$set_message:
     entry (a_forum_idx, a_input_string, a_code);

	forum_idx = a_forum_idx;

	call initialize (SET_MESSAGE_EXIT);

	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);
	on any_other call error (forum_error_table_$unexpected_fault);

	if length (a_input_string) > 256 then call error (forum_error_table_$message_too_long);

	call v1_forum_mgr_$get_ptrs (forum_idx, forum_control_ptr, proceedings_ptr, attendee_idx, ("0"b), code);
	if code ^= 0 then call error (code);

	if anon_sw | forum_control.chairman.person_id ^= person_id then
	     call error (forum_error_table_$chairman_only);

	input_len = 256;

	if ^forum_control.flags.msg_init then do;
	     next_trans_ptr = ptr (proceedings_ptr, forum_control.next_trans_loc);
	     forum_control.message_loc = forum_control.next_trans_loc;
	     forum_control.next_trans_loc = forum_control.next_trans_loc + 64;
	     forum_control.flags.msg_init = "1"b;
	     next_trans_ptr -> transaction = "";
	end;
	
	next_trans_ptr = ptr (proceedings_ptr, forum_control.message_loc);

	on out_of_bounds call error (forum_error_table_$meeting_bloat);
	next_trans_ptr -> transaction = a_input_string;
	revert out_of_bounds;

	do attendee_idx = 1 to forum_control.no_attendees;
	     forum_control.attendee (attendee_idx).message_changed = "1"b;
	end;

	code = 0;

SET_MESSAGE_EXIT:
	call v1_forum_mgr_$unlock (forum_control_ptr);
	a_code = code;
	return;
%page;
v1_forum_trans_mgr_$get_message:
     entry (a_forum_idx, a_input_string, a_code);

	forum_idx = a_forum_idx;
	call initialize (GET_MESSAGE_EXIT);

	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);
	on any_other call error (forum_error_table_$unexpected_fault);

	call v1_forum_mgr_$get_ptrs (forum_idx, forum_control_ptr, proceedings_ptr, (0), ("0"b), code);
	if code ^= 0 then call error (code);

	if ^forum_control.flags.msg_init then call error (forum_error_table_$no_message);

	trans_ptr = ptr (proceedings_ptr, forum_control.message_loc);

	input_len = 256;
	a_input_string = trans_ptr -> transaction;

GET_MESSAGE_EXIT:
	call v1_forum_mgr_$unlock (forum_control_ptr);
	a_code = code;
	if code ^= 0 then a_input_string = "";
	return;
%page;
v1_forum_trans_mgr_$trans_time_info:
     entry (a_forum_idx, a_low_time, a_high_time, a_low_trans, a_high_trans, a_code);

	call initialize (TRANS_REF_PUNT);

	on any_other call error (forum_error_table_$unexpected_fault);
	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);

	call v1_forum_mgr_$get_ptrs (a_forum_idx, forum_control_ptr, proceedings_ptr, attendee_idx, ("0"b), code);
	if code ^= 0 then call error (code);

	low_time = a_low_time;
	high_time = a_high_time;
	low_trans = 1;
	high_trans = forum_control.no_transactions;

	if high_time ^= 0 & high_time < forum_control.transactions (1).time then high_trans = 0;
	else if low_time > forum_control.transactions (high_trans).time then low_trans = high_trans;
	else do;
	     if low_time > forum_control.transactions (1).time then low_trans = find (low_time, 1, (high_trans));
	     if high_time ^= 0 & high_time < forum_control.transactions (high_trans).time then
		high_trans = find (high_time, (low_trans), (high_trans)) + 1;
	end;

	a_high_trans = high_trans;
	a_low_trans = low_trans;
	call v1_forum_mgr_$unlock (forum_control_ptr);
	a_code = 0;
	return;


find:	proc (t, low, high) returns (fixed bin);

declare	t			fixed bin (71),
	(idx, low, high, h, l)	fixed bin;

	do idx = (high + low) / 2 repeat idx;
	     if forum_control.transactions (idx).time = 0 then do;	/* The garbage collector has been here */
		do h = idx to high while (forum_control.transactions (h).time = 0);
		end;
		do l = idx to low by -1 while (forum_control.transactions (l).time = 0);
		end;
		if t < forum_control.transactions (h).time then high = l;
		else low = h;
	     end;
	     else if forum_control.transactions (idx).time < t then do;
		if forum_control.transactions (idx + 1).time > t then return (idx);
		else do;
		     low = idx;
		     idx = idx + (high - idx) / 2;
		end;
	     end;
	     else if forum_control.transactions (idx - 1).time < t then return (idx - 1);
	     else do;
		high = idx;
		idx = idx - (idx - low) / 2;
	     end;
	end;
     end find;
%page;
v1_forum_trans_mgr_$real_trans_ref_info:
     entry (a_forum_idx, a_trans_no, a_type, a_pref, a_nref, a_deleted_sw, a_code);

	type = a_type;
	goto TRANS_REF_COMMON;

v1_forum_trans_mgr_$trans_ref_info:
     entry (a_forum_idx, a_trans_no, a_pref, a_nref, a_deleted_sw, a_code);

	type = ONLY_UNDELETED;

TRANS_REF_COMMON:
	call initialize (TRANS_REF_PUNT);

	on any_other call error (forum_error_table_$unexpected_fault);

	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);

	call v1_forum_mgr_$get_ptrs (a_forum_idx, forum_control_ptr, proceedings_ptr, attendee_idx, ("0"b), code);
	if code ^= 0 then call error (code);

	trans_no = a_trans_no;			/* copy this argument into the inner ring */

	if trans_no < 1 | trans_no > forum_control.no_transactions then
	     call error (forum_error_table_$invalid_trans_idx);
	if forum_control.transactions (trans_no).gone then
	     call error (forum_error_table_$trans_reaped);

	chairman = (person_id = forum_control.chairman.person_id);
	pref, nref = -1;				/* so loops work */

	done = "0"b;
	do i = trans_no repeat pref while (^done & pref ^= 0);
	     pref = forum_control.transactions (i).prior_ref_index;
	     call check (pref);
	end; 

	done = "0"b;
	do i = trans_no repeat nref while (^done & nref ^= 0);
	     nref = forum_control.transactions (i).next_ref_index;
	     call check (nref);
	end;

	a_pref = pref;
	a_nref = nref;
	a_deleted_sw = forum_control.transactions (trans_no).deleted;

TRANS_REF_PUNT:
	call v1_forum_mgr_$unlock (forum_control_ptr);
	if code ^= 0 then do;
	     a_pref, a_nref = 0;
	     a_deleted_sw = "0"b;
	end;
	a_code = code;
	return;
%page;
v1_forum_trans_mgr_$set_delete_sw:
     entry (a_forum_idx, a_trans_no, a_value_sw, a_code);

	call initialize (SET_DELETE_EXIT);

	on any_other call error (forum_error_table_$unexpected_fault);

	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);

	value_sw = a_value_sw;			/* copy into inner ring */

	call v1_forum_mgr_$get_ptrs (a_forum_idx, forum_control_ptr, proceedings_ptr, attendee_idx, ("0"b), code);
	if code ^= 0 then call error (code);

	trans_no = a_trans_no;			/* copy this to inner ring */

	if trans_no < 1 | trans_no > forum_control.no_transactions then
	     call error (forum_error_table_$invalid_trans_idx);

	if forum_control.transactions (trans_no).gone & ^value_sw then
	     call error (forum_error_table_$trans_reaped);	/* transaction has been reaped by garbage collection */

	if person_id = forum_control.transactions (trans_no).person_id then privileged = "0"b;	/* so chair can retrieve own */
	else if ^anon_sw & person_id = forum_control.chairman.person_id then privileged = "1"b;
	else call error (forum_error_table_$chairman_only);

	if ^value_sw & ^privileged & ^forum_control.transactions (trans_no).deleted_by_author then
	     call error (forum_error_table_$chairman_only);

	forum_control.transactions (trans_no).deleted_by_author = value_sw & ^privileged &
	     (^forum_control.transactions (trans_no).deleted | value_sw);

	if forum_control.transactions (trans_no).deleted & value_sw then goto SET_DELETE_EXIT;
	if ^forum_control.transactions (trans_no).deleted & ^value_sw then goto SET_DELETE_EXIT;

	forum_control.transactions (trans_no).deleted = value_sw; /* well one way or the other... */

	if value_sw then forum_control.no_deleted = forum_control.no_deleted + 1;
	else forum_control.no_deleted = forum_control.no_deleted - 1;

SET_DELETE_EXIT:

	call v1_forum_mgr_$unlock (forum_control_ptr);
	a_code = code;
	return;
%page;
v1_forum_trans_mgr_$forum_limits:
     entry (a_forum_idx, a_last_seen_trans_idx, a_first_trans_idx,
	a_last_trans_idx, a_new_trans_count, a_flags_word, a_code);

	type = ONLY_UNDELETED;
	goto LIMITS_COMMON;

v1_forum_trans_mgr_$real_forum_limits:
     entry (a_forum_idx, a_type, a_last_seen_trans_idx, a_first_trans_idx,
	a_last_trans_idx, a_new_trans_count, a_flags_word, a_code);

	type = a_type;

LIMITS_COMMON:
	call initialize (FORUM_LIMITS_PUNT);

	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);

	call v1_forum_mgr_$get_ptrs (a_forum_idx, forum_control_ptr,
	     proceedings_ptr, attendee_idx, ("0"b), code);
	if code ^= 0 then call error (code);

	chairman = (^anon_sw & forum_control.chairman.person_id = person_id);
	forum_flags_word = ""b;
	forum_flags.chairman = chairman;
	forum_flags.adjourned = forum_control.flags.adjourned;
	forum_flags.read_only = ^forum_control.attendee (attendee_idx).write_allowed;
	forum_flags.print_cm_message = forum_control.attendee (attendee_idx).message_changed;
	forum_flags.acl_has_changed = forum_control.attendee (attendee_idx).acl_change_pending;

/* The following statement is dedicated to IS-14 and HBD */

	forum_flags.print_acl_message = forum_control.cm_print_acl_msg | (forum_control.am_init & forum_control.am_print_acl_msg) |
	     (forum_data_$print_eligibility_messages & ^(forum_control.am_init & ^forum_control.am_print_acl_msg) &
	     ^(forum_data_$chairman_override & forum_control.cm_init & ^forum_control.cm_print_acl_msg));

	a_flags_word = forum_flags_word;

	if forum_control.attendee (attendee_idx).highest_trans_seen < 0 |
	     forum_control.attendee (attendee_idx).highest_trans_seen > forum_control.no_transactions then
	     	forum_control.attendee (attendee_idx).highest_trans_seen, a_last_seen_trans_idx = 0;

	else a_last_seen_trans_idx = get_highest_seen ((forum_control.attendee (attendee_idx).highest_trans_seen));

	done = "0"b;
	do i = 1 repeat i + 1 while (^done & i <= forum_control.no_transactions);
	     call check (i);
	end;
	if ^done then a_first_trans_idx = 0;
	else a_first_trans_idx = i - 1;

	done = "0"b;
	do i = forum_control.no_transactions repeat i - 1 while (^done & i ^= 0);
	     call check (i);
	end;
	a_last_trans_idx = i + 1;

	new_trans_count = 0;
	do i = a_last_seen_trans_idx + 1 to forum_control.no_transactions;
	     if forum_control.transactions (i).person_id ^= person_id &
		^forum_control.transactions (i).deleted then
		new_trans_count = new_trans_count + 1;
	end;

	a_new_trans_count = new_trans_count;

FORUM_LIMITS_PUNT:
	call v1_forum_mgr_$unlock (forum_control_ptr);
	a_code = code;
	return;
%page;
check:	proc (idx);

declare	idx			fixed bin,
	del			bit (1) aligned;

	if forum_control.transactions (idx).gone then return;
	del = forum_control.transactions (idx).deleted;
	if type = ONLY_UNDELETED & del then return;
	else if type = ONLY_DELETED & ^del then return;
	else if del & ^chairman & forum_control.transactions (idx).person_id ^= person_id then return;
	else done = "1"b;

	return;
     end check;


get_highest_seen:
     procedure (start) returns (fixed bin);

declare	start			fixed bin;

	done = "0"b;
	do while ((start + 1) <= forum_control.no_transactions & ^done);
	     if forum_control.transactions (start + 1).person_id = person_id then start = start + 1;
	     else done = "1"b;
	end;

	done = "0"b;
	do start = start repeat start - 1 while (^done & start ^= 0);
	     call check (start);
	end;

	return (start + 1);
     end get_highest_seen;
%page;
v1_forum_trans_mgr_$check_user:
     entry (a_forum_idx, a_user_name, a_trans_no, a_code);

	call initialize (CHECK_USER_EXIT);

	on any_other call error (forum_error_table_$unexpected_fault);
	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);
	call v1_forum_mgr_$get_ptrs (a_forum_idx, forum_control_ptr, proceedings_ptr, attendee_idx, ("0"b), code);
	if code ^= 0 then call error (code);

	user_name = a_user_name;			/* copy into lower ring */
	a_trans_no = 0;				/* to start with, none seen for this user */

	do i = forum_control.no_transactions by -1 to 1;
	     if forum_control.transactions (i).person_id = user_name then
		a_trans_no = i;
	end;

CHECK_USER_EXIT:

	call v1_forum_mgr_$unlock (forum_control_ptr);
	a_code = code;
	return;
%page;
v1_forum_trans_mgr_$convert_attendee_idx:
     entry (a_forum_idx, a_attendee_idx, a_user_name, a_code);

	call initialize (CONV_ATT_EXIT);

	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);
	on any_other call error (forum_error_table_$unexpected_fault);

	call v1_forum_mgr_$get_ptrs (a_forum_idx, forum_control_ptr, proceedings_ptr, (0), ("0"b), code);
	if code ^= 0 then call error (code);

	attendee_idx = a_attendee_idx;
	if attendee_idx < 1 | attendee_idx > forum_control.no_attendees then
	     call error (forum_error_table_$invalid_att_idx);

	user_name = rtrim (forum_control.attendee (attendee_idx).person_id) || "." ||
	     rtrim (forum_control.attendee (attendee_idx).project_id);

	a_user_name = user_name;			/* copy to user ring storage */

CONV_ATT_EXIT:

	call v1_forum_mgr_$unlock (forum_control_ptr);
	a_code = code;
	return;
%page;
v1_forum_trans_mgr_$validate_uid:
     entry (a_forum_idx, a_uid, a_code);

	call initialize (VALIDATE_UID_EXIT);

	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);
	on any_other call error (forum_error_table_$unexpected_fault);

	call v1_forum_mgr_$get_ptrs (a_forum_idx, forum_control_ptr, proceedings_ptr, attendee_idx, ("0"b), code);
	if code ^= 0 then call error (code);

	call hcs_$get_uid_seg (forum_control_ptr, uid, code);
	if code ^= 0 then call error (code);

	if uid ^= a_uid then call error (forum_error_table_$incorrect_uid);

VALIDATE_UID_EXIT:
	call v1_forum_mgr_$unlock (forum_control_ptr);
	a_code = code;
	return;
%page;	
initialize:
     procedure (P_egress);

declare	P_egress			label variable,
	anon			fixed bin;

	egress = P_egress;
	call user_info_$login_data (person_id, project_id, (""), anon, 0, 0, 0, (""));
	anon_sw = (anon = 1);
	if anon_sw then person_id = "*" || person_id;
	forum_control_ptr, proceedings_ptr = null ();	/* no forum initialized yet, this call */
	code = 0;					/* no errors yet either */

	return;
     end initialize;

error:
     procedure (error_code);

declare	 error_code		 fixed bin (35);

	code = error_code;
	goto egress;				/* let's PUNT */

     end error;

     end v1_forum_trans_mgr_$enter_trans;
