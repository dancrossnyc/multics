/* ***************************************************************
   *						     *
   * Copyright (c) 1982 by Massachusetts Institute of Technology *
   *						     *
   *************************************************************** */

v1_forum_seg_mgr_$create_forum:
     procedure (P_dir_name, P_forum_name, P_code);

/* 11/14/82 Jay Pattin split off from v1_forum_trans_mgr_, changed (add delete)_name to chname */
/* 8/12/83 Jay Pattin added get_uid_file */

declare	(P_access_name		char (*),
	P_acl_ptr			ptr,
	P_acl_count		fixed bin,
	P_code			fixed bin (35),
	P_dir_name		char (*),
	P_forum_idx		fixed bin,
	P_forum_name		char (*),
	P_new_name		char (*),
	P_old_name		char (*),
	P_output_area		ptr,
	P_real_dir		char (*),
	P_real_name		char (*),
	P_uid			bit (36) aligned,
	P_userp			bit (1) aligned,
	P_setp			bit (1) aligned,
	P_writep			bit (1) aligned)
				parameter;

declare	access_name		char (32),
	acl_count			fixed bin,
	acl_ptr			ptr,
	anon_sw			bit (1) aligned,
	attendee_idx		fixed bin,
	code			fixed bin (35),
	created			bit (1) aligned,
	dir_name			char (168),
	dirname_len		fixed bin,
	directory			char (dirname_len) based (addr (dir_name)),
	egress			label variable,
	forum_name		char (32),
	forum_name_len		fixed bin,
	idx			fixed bin,
	inner_ring		fixed bin (3),
	new_name			char (32),
	old_name			char (32),
	old_name_len		fixed bin,
	person_id			char (22),
	privileged		bit (1) aligned,
	proc_name			char (32),
	project_id		char (9),
	real_dir			char (168),
	real_name			char (32),
	user_ring			fixed bin (3);

declare	1 acl_term		aligned based,
	  2 access_name		char (32),
	  2 modes			bit (36),
	  2 xmodes		bit (36),
	  2 status_code		fixed bin (35);

declare	1 one_acl			like acl_term;
declare	1 two_acls		(2) aligned like acl_term;

declare	check_star_name_$entry	entry (char (*), fixed bin (35)),
	v1_forum_mgr_$get_ptrs		entry (fixed bin, ptr, ptr, fixed bin, bit (1) aligned, fixed bin (35)),
	v1_forum_mgr_$initiate		entry (char (*), char (*), bit (1) aligned, ptr, ptr, fixed bin (35)),
	v1_forum_mgr_$terminate	entry (ptr, ptr),
	v1_forum_mgr_$unlock		entry (ptr),
	get_group_id_		entry returns (char (32)),
	get_ring_			entry returns (fixed bin (3)),
	hcs_$add_acl_entries	entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
	hcs_$append_branch		entry (char (*), char (*), fixed bin (5), fixed bin (35)),
	hcs_$chname_seg		entry (ptr, char (*), char (*), fixed bin (35)),
	hcs_$delentry_file		entry (char (*), char (*), fixed bin (35)),
	hcs_$delentry_seg		entry (ptr, fixed bin (35)),
	hcs_$delete_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
	hcs_$get_link_target	entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	hcs_$get_uid_seg		entry (ptr, bit (36) aligned, fixed bin (35)),
	hcs_$initiate		entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
	hcs_$level_get		entry returns (fixed bin (3)),
	hcs_$level_set		entry (fixed bin (3)),
	hcs_$list_acl		entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35)),
	hcs_$replace_acl		entry (char (*), char (*), ptr, fixed bin, bit (1), fixed bin (35)),
	hcs_$status_minf		entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)),
	hcs_$terminate_noname	entry (ptr, fixed bin (35)),
	set_lock_$lock		entry (bit (36) aligned, fixed bin, fixed bin (35)),
	set_lock_$unlock		entry (bit (36) aligned, fixed bin (35)),
	user_info_$login_data	entry (char (*), char (*), char (*), fixed bin, fixed bin, fixed bin,
				fixed bin (71), char (*));

declare	(error_table_$badstar,
	error_table_$namedup,
	error_table_$noentry,
	forum_error_table_$anon_chairman,
	forum_error_table_$blank_forum_name,
	forum_error_table_$chairman_only,
	forum_error_table_$long_forum_name,
	forum_error_table_$no_control_suffix,
	forum_error_table_$not_a_forum,
	forum_error_table_$unexpected_fault,
	forum_error_table_$you_twit)
				fixed bin (35) external static;

declare	(addr, clock, length, null, rtrim, string, substr, unspec)
				builtin;
declare	(any_other, cleanup)	condition;
%page;
%include v1_forum_structures;
%page;
%include access_mode_values;
%page;
	call initialize (CREATE_FORUM_EXIT);

	forum_name = P_forum_name;		/* copy into inner ring */
	dir_name = P_dir_name;
	created = "0"b;
	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call validate_name (forum_name);
	proc_name = substr (forum_name, 1, forum_name_len) || ".proceedings";

	call check_star_name_$entry (forum_name, code);
	if code ^= 0 then call error (error_table_$badstar);

	if anon_sw then call error (forum_error_table_$anon_chairman);

	call hcs_$status_minf (dir_name, forum_name, 0, (0), (0), code);
	if code = 0 then call error (error_table_$namedup);
	else if code ^= error_table_$noentry then call error (code);

	call hcs_$status_minf (dir_name, proc_name, 0, (0), (0), code);
	if code = 0 then call error (error_table_$namedup);
	else if code ^= error_table_$noentry then call error (code);

	created = "1"b;
	call hcs_$append_branch (dir_name, forum_name, RW_ACCESS_BIN, code);
	if code ^= 0 then call error (code);
	call hcs_$append_branch (dir_name, proc_name, RW_ACCESS_BIN, code);
	if code ^= 0 then call error (code);

	two_acls (1).access_name = person_id || ".*.*";
	two_acls (1).modes = RW_ACCESS;
	two_acls (1).xmodes = "0"b;
	two_acls (2).access_name = "*.*.*";		/* Give the world r Access to the forum_control segment */
	two_acls (2).modes = R_ACCESS;
	two_acls (2).xmodes = "0"b;
	call hcs_$replace_acl (dir_name, forum_name, addr (two_acls), 2, "0"b, code);
	if code ^= 0 then call error (code);

	two_acls (2).access_name = "*.*.*";		/* Give the world null Access to the proceedings segment */
	two_acls (2).modes = N_ACCESS;
	two_acls (2).xmodes = "0"b;
	call hcs_$replace_acl (dir_name, proc_name, addr (two_acls), 2, "0"b, code);
	if code ^= 0 then call error (code);

	call hcs_$initiate (dir_name, forum_name, "", 0, 0, forum_control_ptr, code);
	if code ^= 0 then call error (code);
	call set_lock_$lock (forum_control.forum_lock, 3, code);
	if code ^= 0 then call error (code);

	forum_control.next_trans_loc = 0;		/* initialize some stuff */
	string (forum_control.flags) = ""b;
	forum_control.no_transactions = 0;
	forum_control.no_attendees = 1;
	forum_control.no_deleted = 0;
	forum_control.chairman.person_id = person_id;	/* we are the chairman */
	forum_control.chairman.project_id = project_id;
	unspec (forum_control.attendee (1)) = ""b;
	forum_control.attendee (1).person_id = person_id;
	forum_control.attendee (1).project_id = project_id;
	forum_control.attendee (1).last_time_attended = clock ();

	call set_lock_$unlock (forum_control.forum_lock, (0));
	call hcs_$terminate_noname (forum_control_ptr, code);
	if code ^= 0 then call error (code);

	call hcs_$level_set (user_ring);
	P_code = 0;
	return;

CREATE_FORUM_EXIT:
	if created then do;
	     call hcs_$delentry_file (dir_name, forum_name, (0));
	     call hcs_$delentry_file (dir_name, proc_name, (0));
	end;

	P_code = code;
	call hcs_$level_set (user_ring);
	return;
%page;
v1_forum_seg_mgr_$chname_forum:
     entry (P_dir_name, P_forum_name, P_old_name, P_new_name, P_code);

	call initialize (CHNAME_EXIT);
	on cleanup begin;
	     call v1_forum_mgr_$terminate (forum_control_ptr, proceedings_ptr);
	     call hcs_$level_set (user_ring);
	end;
	on any_other call error (forum_error_table_$unexpected_fault);

	call hcs_$level_set (inner_ring);
	call v1_forum_mgr_$initiate (P_dir_name, P_forum_name, "0"b, forum_control_ptr, proceedings_ptr, code);
	if code ^= 0 then call error (code);

	call chname ();

CHNAME_EXIT:
	call v1_forum_mgr_$terminate (forum_control_ptr, proceedings_ptr);
	call hcs_$level_set (user_ring);
	P_code = code;
	return;
	     
v1_forum_seg_mgr_$chname_forum_idx:
     entry (P_forum_idx, P_old_name, P_new_name, P_code);

	call initialize (CHNAME_IDX_EXIT);
	on cleanup begin;
	     call v1_forum_mgr_$unlock (forum_control_ptr);
	     call hcs_$level_set (user_ring);
	end;
	on any_other call error (forum_error_table_$unexpected_fault);

	call hcs_$level_set (inner_ring);
	call v1_forum_mgr_$get_ptrs (P_forum_idx, forum_control_ptr, proceedings_ptr, attendee_idx, ("0"b), code);
	if code ^= 0 then call error (code);

	call chname ();

CHNAME_IDX_EXIT:
	call v1_forum_mgr_$unlock (forum_control_ptr);
	call hcs_$level_set (user_ring);
	P_code = code;
	return;
%page;
chname:
     proc ();

	if anon_sw | forum_control.chairman.person_id ^= person_id then
	     call error (forum_error_table_$chairman_only);

	old_name = P_old_name;
	if old_name ^= "" then do;
	     call validate_name (old_name);
	     old_name_len = forum_name_len;
	end;

	new_name = P_new_name;
	if new_name ^= "" then do;
	     call validate_name (new_name);
	     call check_star_name_$entry (new_name, code);
	     if code ^= 0 then call error (error_table_$badstar);
	end;

	call hcs_$chname_seg (forum_control_ptr, old_name, new_name, code);
	if code ^= 0 then call error (code);

	if old_name ^= "" then
	     old_name = substr (old_name, 1, old_name_len) || ".proceedings";
	if new_name ^= "" then
	     new_name = substr (new_name, 1, forum_name_len) || ".proceedings";

	call hcs_$chname_seg (proceedings_ptr, old_name, new_name, code);
	if code ^= 0 then call error (code);

	return;
     end chname;
%page;
v1_forum_seg_mgr_$priv_delete_forum:
     entry (P_dir_name, P_forum_name, P_code);

	privileged = "1"b;
	goto DELETE_COMMON;

v1_forum_seg_mgr_$delete_forum:
     entry (P_dir_name, P_forum_name, P_code);

	privileged = "0"b;

DELETE_COMMON:
	call initialize (DELETE_FORUM_EXIT);

	on any_other call error (forum_error_table_$unexpected_fault);
	on cleanup call hcs_$level_set (user_ring);

	call hcs_$level_set (inner_ring);
	call force_acl ();				/* This will fail if no 'm' permission on dir */

	call v1_forum_mgr_$initiate (P_dir_name, P_forum_name, "1"b, forum_control_ptr, proceedings_ptr, code);
	if code ^= 0 then call error (code);		/* Get pointers to forums */

	unspec (forum_control.chairman) = ""b;

/* From here on this is no longer a valid forum... if we blow out from here down, a
   System maintainer will have to flush the thing */

	call hcs_$delentry_seg (forum_control_ptr, code);
	call hcs_$delentry_seg (proceedings_ptr, code);

DELETE_FORUM_EXIT:
	call hcs_$level_set (user_ring);
	P_code = code;
	return;
%page;
v1_forum_seg_mgr_$priv_set_forum_acl:
     entry (P_dir_name, P_forum_name, P_access_name, P_userp, P_setp, P_writep, P_code);

	privileged = "1"b;
	call initialize (SET_FORUM_ACL_EXIT);

	on any_other call error (forum_error_table_$unexpected_fault);
	call force_acl ();

	on cleanup begin;
	     call v1_forum_mgr_$terminate (forum_control_ptr, proceedings_ptr);
	     call hcs_$level_set (user_ring);
	end;

	call hcs_$level_set (inner_ring);
	call v1_forum_mgr_$initiate (P_dir_name, P_forum_name, "1"b, forum_control_ptr, proceedings_ptr, code);
	if code ^= 0 then call error (code);

	access_name = P_access_name;			/* So he can remove own acl */
	if P_userp & access_name = person_id then call v1_forum_mgr_$unlock (forum_control_ptr);

	goto SET_ACL_COMMON;



v1_forum_seg_mgr_$set_forum_acl:
     entry (P_forum_idx, P_access_name, P_userp, P_setp, P_writep, P_code);

	privileged = "0"b;
	call initialize (SET_FORUM_ACL_EXIT);

	on cleanup begin;
	     call v1_forum_mgr_$unlock (forum_control_ptr);
	     call hcs_$level_set (user_ring);
	end;
	on any_other call error (forum_error_table_$unexpected_fault);

	call hcs_$level_set (inner_ring);
	call v1_forum_mgr_$get_ptrs (P_forum_idx, forum_control_ptr, proceedings_ptr, attendee_idx, ("0"b), code);
	if code ^= 0 then call error (code);
	if anon_sw | forum_control.chairman.person_id ^= person_id then call error (forum_error_table_$chairman_only);
	access_name = P_access_name;
	if ((^P_setp & P_userp) | (P_setp & ^P_writep)) & access_name = person_id
	     then call error (forum_error_table_$you_twit);

SET_ACL_COMMON:
	if P_userp then one_acl.access_name = rtrim (access_name) || ".*.*";
	else one_acl.access_name = "*." || rtrim (access_name) || ".*";
	if P_setp then one_acl.modes = RW_ACCESS;
	else one_acl.modes = R_ACCESS;
	one_acl.xmodes = "0"b;
	call hcs_$fs_get_path_name (forum_control_ptr, dir_name, (0), forum_name, code);
	if code ^= 0 then call error (code);
	forum_name_len = length (rtrim (forum_name)) - length (".control");

	call hcs_$add_acl_entries (dir_name, forum_name, addr (one_acl), 1, code);
	if code ^= 0 then call error (code);

	if P_setp & ^P_writep then one_acl.modes = R_ACCESS;
	else if ^P_setp then one_acl.modes = N_ACCESS;	/* When removing people, leave them r access to forum_control segment
	     					   but null access to proceedings segment */

	call hcs_$add_acl_entries (dir_name, substr (forum_name, 1, forum_name_len) || ".proceedings",
	     addr (one_acl), 1, code);
	if code ^= 0 then call error (code);

	do idx = 1 to forum_control.no_attendees;
	     forum_control.attendee (idx).acl_change_pending = "1"b;
	end;
	if ^privileged then forum_control.attendee (attendee_idx).acl_change_pending = "0"b;

SET_FORUM_ACL_EXIT:

	if privileged then do;
	     call delete_forced_acl ();
	     call v1_forum_mgr_$terminate (forum_control_ptr, proceedings_ptr);
	end;
	else call v1_forum_mgr_$unlock (forum_control_ptr);

	call hcs_$level_set (user_ring);
	P_code = code;
	return;
%page;
validate_name:
     proc (name);

declare	name			char (32);

	if name = "" then call error (forum_error_table_$blank_forum_name);
	forum_name_len = length (rtrim (name)) - length (".control");
	if forum_name_len < 1 then
	     call error (forum_error_table_$no_control_suffix);
	else if forum_name_len > 20 then call error (forum_error_table_$long_forum_name);
	if substr (name, forum_name_len + 1) ^= ".control" then
	     call error (forum_error_table_$no_control_suffix);

	return;
     end validate_name;


force_acl:
	procedure ();

	one_acl.access_name = get_group_id_ ();
	one_acl.modes = RW_ACCESS;
	one_acl.xmodes = ""b;

	call hcs_$add_acl_entries (P_dir_name, P_forum_name, addr (one_acl), 1, code);
	if code ^= 0 then
	     if code = error_table_$noentry then call error (forum_error_table_$not_a_forum);
	     else call error (code);

	forum_name_len = length (rtrim (P_forum_name)) - length (".control");
	call hcs_$add_acl_entries (P_dir_name, substr (P_forum_name, 1, forum_name_len) || ".proceedings",
	     addr (one_acl), 1, code);
	if code ^= 0 then 
	     if code = error_table_$noentry then call error (forum_error_table_$not_a_forum);
	     else call error (code);

	return;
     end force_acl;

delete_forced_acl:
     procedure ();

declare	1 delete_acls		aligned,
	2 access_name		char (32),
	2 status			fixed bin (35);

	delete_acls.access_name = get_group_id_ ();
	call hcs_$delete_acl_entries (P_dir_name, P_forum_name, addr (delete_acls), 1, (0));

	forum_name_len = length (rtrim (P_forum_name)) - length (".control");
	call hcs_$delete_acl_entries (P_dir_name, substr (P_forum_name, 1, forum_name_len) || ".proceedings",
	     addr (delete_acls), 1, (0));

	return;
     end delete_forced_acl;
%page;
v1_forum_seg_mgr_$list_forum_acl:
     entry (P_dir_name, P_forum_name, P_output_area, P_acl_ptr, P_acl_count, P_code);

	call initialize (LIST_ACL_EXIT);

	dir_name = P_dir_name;
	forum_name = P_forum_name;
	call validate_name (forum_name);

	forum_name = substr (forum_name, 1, forum_name_len) || ".proceedings";
	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$list_acl (dir_name, forum_name, P_output_area, acl_ptr, null (), acl_count, code);
	if code ^= 0 then call error (code);
	call hcs_$level_set (user_ring);

	P_acl_ptr = acl_ptr;
	P_acl_count = acl_count;
	P_code = 0;
	return;

LIST_ACL_EXIT:
	call hcs_$level_set (user_ring);
	P_acl_ptr = null ();
	P_acl_count = 0;
	P_code = code;
	return;
%page;
v1_forum_seg_mgr_$get_forum_path:
     entry (P_dir_name, P_forum_name, P_real_dir, P_real_name, P_code);

	call initialize (GET_MEETING_PATH_EXIT);
	dir_name = P_dir_name;
	forum_name = P_forum_name;
	call validate_name (forum_name);
	
	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$get_link_target (dir_name, forum_name, real_dir, real_name, code);
	if code ^= 0 then call error (code);
	call validate_name (real_name);		/* make sure target is validly named */

	call hcs_$level_set (user_ring);
	P_real_dir = real_dir;
	P_real_name = real_name;
	P_code = 0;
	return;

GET_MEETING_PATH_EXIT:
	call hcs_$level_set (user_ring);
	P_real_dir = "";
	P_real_name = "";
	P_code = code;
	return;
%page;
v1_forum_seg_mgr_$get_forum_path_idx:
     entry (P_forum_idx, P_real_dir, P_real_name, P_code);

	call initialize (GET_MEETING_PATH_EXIT);

	on cleanup call v1_forum_mgr_$unlock (forum_control_ptr);

	call v1_forum_mgr_$get_ptrs (P_forum_idx, forum_control_ptr, proceedings_ptr, (0), ("0"b), code);
	if code ^= 0 then call error (code);

	call hcs_$fs_get_path_name (forum_control_ptr, dir_name, dirname_len, real_name, code);
	if code ^= 0 then call error (code);

	call v1_forum_mgr_$unlock (forum_control_ptr);
	P_real_dir = directory;
	P_real_name = real_name;
	P_code = 0;
	return;
%page;
v1_forum_seg_mgr_$get_uid_file:
     entry (P_dir_name, P_forum_name, P_uid, P_code);

	call initialize (UID_EXIT);
	on cleanup begin;
	     call v1_forum_mgr_$terminate (forum_control_ptr, proceedings_ptr);
	     call hcs_$level_set (user_ring);
	end;
	on any_other call error (forum_error_table_$unexpected_fault);

	call hcs_$level_set (inner_ring);
	call v1_forum_mgr_$initiate (P_dir_name, P_forum_name, "0"b, forum_control_ptr, proceedings_ptr, code);
	if code ^= 0 then call error (code);

	call hcs_$get_uid_seg (forum_control_ptr, P_uid, code);
	if code ^= 0 then call error (code);
	
UID_EXIT:	call v1_forum_mgr_$terminate (forum_control_ptr, proceedings_ptr);
	call hcs_$level_set (user_ring);
	P_code = code;
	return;
%page;
initialize:
     procedure (P_egress);

declare	P_egress			label variable,
	anon			fixed bin;

	egress = P_egress;
	inner_ring = get_ring_ ();
	user_ring = hcs_$level_get ();
	call user_info_$login_data (person_id, project_id, (""), anon, 0, 0, 0, (""));
	anon_sw = (anon = 1);

	forum_control_ptr, proceedings_ptr = null ();	/* no forum initialized yet, this call */
	code = 0;					/* no errors yet either */

	return;
     end initialize;

error:
     procedure (error_code);

declare	error_code		fixed bin (35);

	code = error_code;
	goto egress;				/* lets PUNT */

     end error;

end v1_forum_seg_mgr_$create_forum;
