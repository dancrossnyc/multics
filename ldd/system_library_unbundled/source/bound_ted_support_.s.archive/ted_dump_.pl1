/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

ted_dump_:			/* output via terminal width	       */
          proc (ted_support_p, msg, code);

dcl  msg char (168)var,
     code fixed bin (35);

	i = get_line_length_ ("user_output");
          if (i > 110)
	then goto dumpl;
	if (i > 60)
	then goto dumps;

ted_dumpvs_:			/* output in 40 cols	       */
          entry (ted_support_p, msg, code);
	maxcc = 5;
	maxll = 17;
	goto start;

ted_dumps_:			/* ouput 60 columns		       */
          entry (ted_support_p, msg, code);
dumps:
	maxcc = 10;
	maxll = 34;
	goto start;

ted_dumpl_:			/* output 110 columns	       */
          entry (ted_support_p, msg, code);
dumpl:
	maxcc = 20;
	maxll = 71;
	goto start;

start:
	if (ted_support_version_2 ^= ted_support.version)
	then do;
	     code = error_table_$unimplemented_version;
	     return;
	end;
	if (inp.de = 0) then do;
Abe:
	     msg = "Abe) Buffer empty.";
	     code = tederror_table_$Error_Msg;
	     return;
	end;
	octal = " ";
	line, lineno = inp.lno;
	if string_mode
	then linebegin = 0;
	else do;
	     i = index (reverse (substr (istr, 1, inp.sb-1)), NL);
	     if (i = 0)
	     then linebegin = 0;
	     else linebegin = inp.sb-i;
	end;
	byte = inp.sb - linebegin;
	alpha = " ";
	j1, j2 = 1;
	do i = inp.sb to inp.se;
	     ch = ichr (i);
	     fromc = ch;
	     toc = "000";
	     to.b1 = from.b1;
	     to.b2 = from.b2;
	     to.b3 = from.b3;
	     substr (octal, j2, 3) = toc;
	     j2 = j2 + 3 + mod (j1+1, 2);
	     if (j1 = 10)
	     then j2 = j2 + 2;
	     if (ch < " ") & (ch ^= NL)
	     | (ch > "~")
	     then substr (alpha, j1, 1) = ".";
	     else substr (alpha, j1, 1) = ch;
	     j1 = j1 + 1;
	     if (j1 > maxcc)
	     | (i = inp.se)
	     | (ch = NL) then do;
		jjj = max (index (reverse (line), " "), 4);
		header = substr (line, 8-jjj);
		jjj = max (index (reverse (byte), " "), 5);
		header = header || substr (byte, 12-jjj);
		call ioa_ ("^a  ^va  ^a", header, maxll, octal, alpha);
		alpha = " ";
		octal = " ";
		if (ch = NL)
		then do;
		     lineno = lineno + 1;
		     line = lineno;
		     if ^string_mode
		     then linebegin = i;
		end;
		else line = 0;
		byte = i-linebegin+1;
		j1, j2 = 1;
	     end;
	end;
	req.nc = req.cc;
	current = inp.se;
	code = tederror_table_$Set;
	return;%page;
%include ted_support;

dcl (addr, index, mod, substr) builtin;

dcl  NL char (1)int static init ("
");
dcl  alpha char (20);
dcl  byte pic "zzzzzzzzzzz";
dcl  ch char (1);
dcl  fromc char (1)based (addr (from));
dcl  get_line_length_ entry (char (*)) returns (fixed bin);
dcl  header char (32)var;
dcl  i fixed bin (24);
dcl  ioa_ entry options (variable);
dcl  j1 fixed bin (24);
dcl  j2 fixed bin (24);
dcl  jjj fixed bin;
dcl  line pic "zzzzzzzz";
dcl  linebegin fixed bin (24);
dcl  lineno fixed bin (24);
dcl  maxcc fixed bin;
dcl  maxll fixed bin;
dcl  octal char (74);

dcl 1 from,
    2 b1 bit (3),
    2 b2 bit (3),
    2 b3 bit (3);
dcl  toc char (3)based (addr (to));
dcl 1 to,
    2 f1 bit (6),
    2 b1 bit (3),
    2 f2 bit (6),
    2 b2 bit (3),
    2 f3 bit (6),
    2 b3 bit (3);

     end ted_dump_;
