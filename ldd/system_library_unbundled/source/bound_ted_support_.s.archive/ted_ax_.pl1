/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

ted_ax_:				/* append w/speedtype expansion      */
       proc (ted_support_p, msg, code);

dcl msg		char (168) var,
    code		fixed bin (35);

      if (inp.de > 0)
      then do;			/* something already in buffer       */
         i = inp.se - inp.sb + 1;
         substr (ostr, out.de + 1, i) = substr (istr, inp.sb, i);
         inp.sb = inp.sb + i;		/* adjust for doing append	       */
         out.de = out.de + i;
         call checkpoint (inp.sb, out.de);
      end;
      goto start;

ted_ix_:				/* insert w/speedtype expansion      */
         entry (ted_support_p, msg, code);

      if (inp.de = 0)
      then do;
empty:
         msg = "Abe) Buffer empty.";
         code = tederror_table_$Error_Msg;
         return;
      end;
      inp.se = inp.sb;
      goto start;

ted_cx_:				/* change w/speedtype expansion      */
      entry (ted_support_p, msg, code);

      if (inp.de = 0)
      then goto empty;
      inp.sb = inp.se + 1;		/* delete range specified	       */
      call checkpoint (inp.sb, out.de);

start:
      if (ted_support_version_2 ^= ted_support.version)
      then do;
         code = error_table_$unimplemented_version;
         return;
      end;
loop:
      call iox_$get_line (iox_$user_input, /* get a line of input	       */
         addr (buffer), length (buffer), i, code);
      if (i = 1)
      then do;			/* if empty, can't do much to it     */
         substr (ostr, out.de + 1, 1) = substr (buffer, 1, 1);
         out.de = out.de + 1;
      end;
      else do;			/* look for trailing controls	       */
         if (substr (buffer, 1, i - 1) = "\F")
	  | (substr (buffer, 1, i - 1) = "\f")
         then goto finish;

         if (substr (buffer, 1, i - 1) = "\?")
         then do;
	  call ioa_ ("*INPUT MODE - speedtype");
	  goto loop;
         end;

         call speedtype_expand_ (addr (buffer), i, addr (ochr (out.de + 1)),
	  out.ml - out.de, j, code);
         out.de = out.de + j;
      end;
      call checkpoint (inp.sb, out.de);
      goto loop;

finish:
      current = out.de;		/* tell ted where "." is	       */
      if (inp.de > 0)
      then do;			/* there is more data in buffer      */
         i = inp.de - inp.sb + 1;	/* ..copy it to output	       */
         substr (ostr, out.de + 1, i) = substr (istr, inp.sb, i);
         out.de = out.de + i;
         inp.se = inp.de + 1;		/* we have already copied	       */
      end;
      req.nc = req.cc;		/* let rest of req line be used      */
      code = tederror_table_$Copy_Set;%page;
%include ted_support;
dcl (i, j)	fixed bin (21);
dcl iox_$user_input ptr ext static;
dcl iox_$get_line	entry (ptr, ptr, fixed bin (21), fixed bin (21),
		fixed bin (35));
dcl ioa_		entry options (variable);
dcl speedtype_expand_ entry (ptr, fixed bin (21), ptr, fixed bin (21),
		fixed bin (21), fixed bin (35));
dcl buffer	char (500);

   end ted_ax_;
