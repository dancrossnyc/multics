/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

ted_fiad_:			/* fill/adjust a region	       */
   proc (ted_support_p, msg, code);
      adjust = "1"b;
      goto start;

ted_fina_:			/* fill/adjust a region	       */
   entry (ted_support_p, msg, code);
      adjust = ""b;
      goto start;

dcl (
    msg		char (168) var,	/* error message text	 [OUT] */
    code		fixed bin (35)	/* return code		       */
    )		parm;


dcl ioa_$nnl	entry () options (variable);
dcl ioa_		entry () options (variable);

dcl (NL		init ("
"),
     HT		init ("	")
    )		char (1) int static options (constant);


start:
      if (ted_support.version ^= ted_support_version_2)
      then do;
         code = error_table_$unimplemented_version;
         return;
      end;
      req.nc = req.cc;		/* any request data after be used    */
      code = 0;

      req.cc = req.cc + verify (substr (rstr, req.cc), " ") - 1;
      if (inp.de = 0)
      then call error ("Abe) Buffer empty.");
error: proc (err);

dcl err		char (*);

         msg = err;
         req.nc = req.cc;
         if adjust
         then msg = msg || " |fiad";
         else msg = msg || " |fina";
         code = tederror_table_$Error_Msg;
         goto exit;
      end error;
      zsb = inp.sb;
      zse = inp.se;

      delim = rchr (req.cc);		/* pick up str delimiter	       */
      if (delim = " ")
      then call error ("Sd1) No 1st delimiter.");
      matchloc = req.cc + 1;		/* index of first char of str1       */
      matchleng = index (substr (rstr, req.cc + 1), delim);
      if (matchleng = 0)
      then call error ("Sd2) No 2nd delimiter.");
      req.cc = matchloc + matchleng;
      matchleng = matchleng - 1;

      call get_num ("Slm) No left margin.");
      lmarg (1), lmarg (2) = num;

      if (rchr (req.cc) ^= ",")
      then call error ("Smc) Missing comma.");
      req.cc = req.cc + 1;
      call get_num ("Srm) No right margin.");
      if (num < lmarg (1))
      then call error ("Srl) Right margin < left margin.");
      rmarg = num;
      if (rchr (req.cc) = ",")
      then do;
         req.cc = req.cc + 1;
         call get_num ("Sni) No indent.");
         if (num > rmarg)
         then call error ("Sir) Indent > right margin.");
         lmarg (1) = num;
      end;
      if (rchr (req.cc) ^= delim)
      then call error ("Sd3) No 3rd delimiter.");
      req.nc = req.cc + 1;%page;
      putted = 0;
      marg = 1;
      left_set = "0"b;
      hole_ct = -1;
      visleng, wordleng = 0;
      firstime = "1"b;
      if (zsb < zse)
      then do;
         do while (zsb <= zse);
	  if firstime
	  then do;
	     ch = NL;
	     firstime = "0"b;
	  end;
	  else do;
	     ch = ichr (zsb);
	     zsb = zsb + 1;
	  end;
	  if (ch = NL)
	  then do;
	     call putword;
	     if (zsb <= zse)
	     then do;
	        if (ichr (zsb) = NL)
	        then do;
		 visleng, wordleng = 9999;
		 call putword;
		 marg = 1;
		 left_set = "0"b;
	        end;
	        else if (matchleng > 0)
	        then if (substr (istr, zsb, matchleng)
		      = substr (rstr, matchloc, matchleng))
		   then do;
		      zle = index (substr (istr, zsb, (zse - zsb + 1)), NL);
				/* find end of next line	       */
		      if (zle = 0)	/* worry about no NL	       */
		      then zle = zse; /* ..at end of buffer	       */
		      else zle = zsb + zle - 1;
		      visleng, wordleng = 9999;
		      call putword;
		      wordloc = zsb;
		      visleng, wordleng = zle - zsb;
		      putted = -wordleng;
		      if (out.de > 0)
		      then out.de = out.de - 1;
		      call putword;
		      if db_sw then call ioa_$nnl ("!!^/");
		      hole_ct = -1;
		      putted = 0;
		      zsb = zle;
		   end;
	     end;
	  end;
	  else if (ch = " ") | (ch = HT)
	  then call putword;
	  else do;
	     if (wordleng = 0)
	     then wordloc = zsb - 1;
	     wordleng = wordleng + 1;
	     if (ch ^= "")
	     then visleng = visleng + 1;
	     else visleng = visleng - 1;
	  end;
         end;
         if wordleng > 0
         then call putword;
      end;

      if (out.de = 0)
      then out.de = 1;
      substr (ostr, out.de, 1) = NL;
      current = out.de;
      code = tederror_table_$Copy_Set;
exit:
      return;

putword: proc;

      if (wordleng > 0)
      then do;
         if (putted + visleng > rmarg)
         then do;
	  if adjust
	  then call fixup;
	  hole_ct = -1;
	  putted = 0;
	  if (wordleng = 9999)
	  then do;
	     visleng, wordleng = 0;
	     if (out.de > 0)
	     then do;
	        if db_sw then call ioa_$nnl ("!^/");
	        substr (ostr, out.de, 1) = NL;
	        out.de = out.de + 1;
	     end;
	     return;
	  end;
         end;
         if (putted = 0)
         then do;
	  if db_sw then call ioa_$nnl ("^/^vx", lmarg (marg));
	  if (out.de > 0)
	  then substr (ostr, out.de, lmarg (marg)) = NL;
	  else substr (ostr, 1, lmarg (marg)) = " ";
	  putted = lmarg (marg) - 1;
	  out.de = out.de + lmarg (marg) - 1;
	  lineloc = out.de + 1;
         end;
         virtleng = wordleng;
         if (marg = 1)
         then if (visleng < lmarg (2) - lmarg (1))
	    then do;
	       virtleng = wordleng + (lmarg (2) - lmarg (1)) - visleng - 1;
	       visleng = lmarg (2) - lmarg (1) - 1;
	       lineloc = out.de + virtleng + 2;
	       hole_ct = hole_ct - 1;
	    end;
         if db_sw then call ioa_$nnl ("^va ", virtleng,
	       substr (istr, wordloc, wordleng));
         substr (ostr, out.de + 1, virtleng + 1)
	  = substr (istr, wordloc, wordleng);
         out.de = out.de + virtleng + 1;
         putted = putted + visleng + 1;
         hole_ct = hole_ct + 1;
         visleng, wordleng = 0;
         marg = 2;
      end;

   end putword; %page;

fixup: proc;			/* do the adjusting		       */

      if (putted ^= 0) & (hole_ct > 0) & (wordleng ^= 9999)
      then do;
         leftover = rmarg - putted + 1;
         temploc = 1;
         templeng = out.de - lineloc + 1;
         begin;
dcl temp_area	char (templeng + 1);
	  if db_sw
	  then call ioa_$nnl ("^/***^d holes (temp,^d,^d)=(ostr,^d,^d)",
		hole_ct, temploc, templeng + 1, lineloc, templeng);
	  substr (temp_area, temploc, templeng + 1)
	     = substr (ostr, lineloc, templeng);
	  if db_sw
	  then call ioa_$nnl ("^/");
	  out.de = lineloc - 1;
	  fill = divide (leftover, hole_ct, 17, 0);
	  leftover = mod (leftover, hole_ct);
	  if left_set
	  then incr = -1;
	  else do;
	     incr = 1;
	     leftover = leftover - hole_ct + 1;
	  end;
	  do i = 1 to hole_ct;
	     j = index (substr (temp_area, temploc, templeng), " ");
	     moveleng = j + fill + fixed ((leftover > 0), 17);
	     leftover = leftover + incr;
	     if db_sw then call ioa_$nnl ("^va", moveleng,
		   substr (temp_area, temploc, j));
	     substr (ostr, out.de + 1, moveleng)
	        = substr (temp_area, temploc, j);
	     out.de = out.de + moveleng;
	     temploc = temploc + j;
	     templeng = templeng - j;
	  end;
	  if (templeng > 0)
	  then substr (ostr, out.de + 1, templeng)
		= substr (temp_area, temploc, templeng);
	  if db_sw then call ioa_$nnl ("^a|^/",
		substr (ostr, out.de + 1, templeng));
	  out.de = out.de + templeng;
         end;
      end;
      left_set = ^left_set;
   end fixup;
dcl num		fixed bin (21);
dcl num_sw	bit (1);

get_num: proc (err);
dcl err		char (*);

      i = verify (substr (rstr, req.cc), "0123456789");
      if (i > 1)
      then do;
         num = fixed (substr (rstr, req.cc, i - 1));
         req.cc = req.cc + i - 1;
         if (num = 0)
         then i = 1;
      end;
      if (i = 1)
      then call error (err);

   end get_num; %page;

dcl zle		fixed bin (21);
dcl zsb		fixed bin (21);
dcl zse		fixed bin (21);
dcl concealsw	bit (1);
dcl delim		char (1);
dcl i		fixed bin (21);
dcl j		fixed bin (21);
dcl scan_leng	fixed bin (21);%page;
dcl adjust	bit (1);
dcl fill		fixed bin (21);
dcl firstime	bit (1);
dcl hole_ct	fixed bin (21);
dcl incr		fixed bin (21);
dcl left_set	bit (1);
dcl leftover	fixed bin (21);
dcl lineloc	fixed bin (21);
dcl lmarg		(2) fixed bin (21);
dcl marg		fixed bin (21);
dcl matchleng	fixed bin (21);
dcl matchloc	fixed bin (21);
dcl moveleng	fixed bin (21);
dcl pb		fixed bin (21);
dcl putted	fixed bin (21);
dcl rmarg		fixed bin (21);
dcl templeng	fixed bin (21);
dcl temploc	fixed bin (21);
dcl wordleng	fixed bin (21);
dcl wordloc	fixed bin (21);
dcl virtleng	fixed bin (21);
dcl visleng	fixed bin (21);
dcl ch		char (1);
%include ted_support;

dcl (addr, bin, divide, index, mod, substr, unspec) builtin;

dcl db_sw		bit (1) int static init (""b);
dbn: entry; db_sw = "1"b; return;
dbf: entry; db_sw = "0"b; return;
   end ted_fiad_;
