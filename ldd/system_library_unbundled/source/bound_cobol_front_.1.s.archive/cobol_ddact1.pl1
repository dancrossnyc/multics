/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_ddact1.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 11/24/81 by FCH, [5.1-1], RECORD CONTAINS does not allow ZERO, BUG520(phx11821) */
/*  Modified on 07/09/79 by MHD, [4.0-1]  commented out  code that put type 17 tokens in name_table when DEBUG */
/* 1/5/77, FCH, fixed bin decls standardized */
/* Modified since version 2.0 */









/* format: style3 */
cobol_ddact1:
     proc (an);
	sv_ptr_auto = cobol_sv_ptr;
	goto actlbl (an);
/********** action routines **********/

/* set_wss_indicator */

actlbl (50):					/*action(5):*/
	substr (section_ind, 2, 1) = "1"b;
	substr (vector_part, 1, 6) = "010000"b;
	file_number = 0;
	rdf_01_sav = null_key;
	goto retrn;				/* end_of_wss */

actlbl (51):					/*action(6):*/
/****** not implemented ******/
	goto retrn;				/* set_cns_indicator */

actlbl (52):					/*action(7):*/
	substr (section_ind, 3, 1) = "1"b;

	substr (vector_part, 1, 6) = "001000"b;
	rdf_01_sav = null_key;
	goto retrn;

/* set_linkage_section_indicator */

actlbl (53):					/*action(9):*/
	substr (section_ind, 4, 1) = "1"b;

	substr (vector_part, 1, 6) = "000100"b;
	rdf_01_sav = null_key;
	goto retrn;				/* end_of_linkage_section */

actlbl (54):					/*action(10):*/
/****** not implemented ******/
	go to retrn;

/*usage comp-n*/

actlbl (55):					/* usage is comp-6 */
						/*action(11):*/
	vector_map.bin_36 = "1"b;
	vector_map.item_signed = "1"b;
	go to retrn;

/* create_dummy_data_name */

actlbl (56):					/*action(13):*/
	dnl = 6;

	save_dname = "FILLER";
	save_line = record.line;
	save_column = record.column;
	go to retrn;

/* set_77_elementary_bits */

actlbl (57):					/*action(15):*/
	vector_map.level_77 = "1"b;

	offset_ct = 0;
	ll77 = "1"b;				/* set 77 exist bit */
	vector_map.elementary = "1"b;
	h = 0;
	go to retrn;				/*item_size_77 */

actlbl (58):					/*action(16):*/
	call data_length;

	if ^vector_map.picture_clause
	then do;
		bit32_1 = substr (vector_part, 9, 32) & pic_suff_bits_mask;
		if bit32_1 = thirty_two_zeros
		then vector_map.no_picture = "1"b;
	     end;
	go to retrn;

/* conditioname_initialization */

actlbl (59):					/*action(19):*/
	ptr4 = addr (cobol_wkbuf2_tbl);
	ptr4 -> cntbuf2 = 0;

	conditioname.level = 88;
	conditioname.size = cn_constant;
	conditioname.line = numeric_lit.line;
	conditioname.def_line = numeric_lit.line;
	conditioname.column = numeric_lit.column;
	conditioname.type = 11;
	go to retrn;



data_length:
     proc;
	bit32_1 = substr (vector_part, 9, 32) & non_display_bits_mask;

	if vector_map.item_signed & vector_map.numeric
	then do;

		if vector_map.sign_separate
		     | ((vector_map.ascii_packed_dec_b | vector_map.ascii_packed_dec_h) & vector_map.pic_has_s)
		then go to incr_lnth;
		else if bit32_1 = thirty_two_zeros	/* if display */
		then if vector_map.sign_type = "000"b
		     then if fixed_common.default_sign_type = "011"b | fixed_common.default_sign_type = "100"b
			then go to incr_lnth;
		goto no_incr;

incr_lnth:
		data_name.item_length = data_name.item_length + 1;

	     end;
no_incr:
	if bit32_1 = thirty_two_zeros
	then return;				/* display data */

	if vector_map.bin_16
	then do;
		data_name.item_length = 2;
		data_name.places_right = 0;
		data_name.places_left = 5;
		goto dl_end;
	     end;
	if vector_map.bin_18
	then do;
		data_name.item_length = 2;
		data_name.places_right = 0;
		data_name.places_left = 6;
		goto dl_end;
	     end;
	if vector_map.bin_32
	then do;
		data_name.item_length = 4;
		data_name.places_right = 0;
		data_name.places_left = 10;
		goto dl_end;
	     end;
	if vector_map.bin_36
	then do;
		data_name.item_length = 4;
		data_name.places_right = 0;
		data_name.places_left = 11;
		goto dl_end;
	     end;

/*test packed decimal*/
	if vector_map.ebcdic_packed_dec | vector_map.ascii_packed_dec_h | vector_map.ascii_packed_dec_b
	then do;
		data_name.item_length = divide (data_name.item_length + 1, 2, 15, 0);
		goto dl_end;
	     end;

	if vector_map.usage_index = "1"b
	then data_name.item_length = 6;
dl_end:
	vector_map.pic_integer = "1"b;
	return;
     end data_length;





diag:
     proc;

	message_ptr = addr (message_area);
	message.size = 32;
	message.line = record.line;
	message.column = record.column;
	message.type = 5;
	message.run3 = 3;
	message.info.para = "0"b;
	message.info.rep = "0"b;
	message.info.fillerx = "000000"b;
	message.length = 0;
	message.number = tf;

	call cobol_c_list (message_ptr);
     end diag;



/*set_usage_exist_bit */

actlbl (60):					/*action(24):*/
	vector_map.usage_clause = "1"b;

	go to retrn;				/* set_display_bit */

actlbl (61):					/* usage  is display */
						/*action(25):*/
	vector_map.display = "1"b;

	go to retrn;				/*usage is comp*/

actlbl (62):					/* usage is comp */
						/*action(26):*/
	if fixed_common.comp_defaults.comp_5
	then go to actlbl (73);
	else if fixed_common.disp_defaults.disp
	then go to actlbl (61);
	else if fixed_common.comp_defaults.comp_6
	then go to actlbl (55);
	else if fixed_common.comp_defaults.comp_7
	then go to actlbl (67);
	else if fixed_common.comp_defaults.comp_1
	then go to actlbl (63);
	else if fixed_common.comp_defaults.comp_8
	then go to actlbl (100);
	else if fixed_common.comp_defaults.comp_2
	then go to actlbl (64);
	else if fixed_common.comp_defaults.comp_3
	then go to actlbl (65);
	else if fixed_common.comp_defaults.comp_4
	then go to actlbl (66);
	else go to actlbl (73);


/* usage comp-n */

actlbl (63):					/* usage is comp-1 */
						/*action(27):*/
	vector_map.bin_16 = "1"b;

	vector_map.item_signed = "1"b;
	go to retrn;				/* usage comp-n */

actlbl (64):					/* usage is comp-2 */
						/*action(28):*/
	vector_map.bin_32 = "1"b;

	vector_map.item_signed = "1"b;
	go to retrn;				/*usage comp-n */

actlbl (65):					/* usage is comp-3 */
						/*action(29):*/
	vector_map.ebcdic_packed_dec = "1"b;

	go to retrn;				/* usage comp-n */

actlbl (66):					/* usage is comp-4 */
						/*action(30):*/
	vector_map.ascii_packed_dec_h = "1"b;
	go to retrn;				/* usage comp-n */

actlbl (67):					/* usage is comp-7 */
						/*action(31):*/
	vector_map.bin_18 = "1"b;
	vector_map.item_signed = "1"b;
	go to retrn;				/* set index_bit */

actlbl (68):					/*action(32):*/
	vector_map.usage_index = "1"b;

	go to retrn;				/* set_init_value_extension */

actlbl (69):					/*action(33):*/
	vector_map.value_clause = "1"b;

	vector_map.inherit_value = "1"b;
	initial_ptr = data_name.size + 1;
	go to retrn;				/* store_numeric_value */

actlbl (70):					/*action(34):*/
	vector_map.value_numeric = "1"b;

	if numeric_lit.sign ^= " "
	then vector_map.value_signed = "1"b;

	call store_nv;


store_nv:
     proc;
	numinit.initype.numeric = "1"b;

	if numeric_lit.rtdp = 0
	then numinit.info.integer = "1"b;

	numinit.info.floating = numeric_lit.info.floating;
	numinit.info.filler = numeric_lit.info.filler;
	numinit.expsign = numeric_lit.exp_sign;
	numinit.explaces = numeric_lit.exp_places;
	numinit.sign = numeric_lit.sign;
	numinit.ltdp = numeric_lit.ltdp;
	numinit.rtdp = numeric_lit.rtdp;
	numinit.length = numeric_lit.length;
	niv = nl;
	numinit.literal = numeric_lit.literal;
     end store_nv;


	initial_ptr = data_name.size + 1;
	data_name.size = data_name.size + niv_constant + numinit.length;
						/* add value extention to size */
	fixbin7_1 = mod (data_name.size, 4);
	if fixbin7_1 ^= 0
	then fixbin7_1 = 4 - fixbin7_1;
	data_name.size = data_name.size + fixbin7_1;
	ptr1 = addr (dn_ptr -> any_item (data_name.size + 1));
						/* set ptr1 to next */
	go to retrn;				/* store_alphanumeric_value */

actlbl (71):					/*action(35):*/
	vector_map.value_non_numeric = "1"b;

	call store_av;


store_av:
     proc;
	alphainit.initype.non_numeric = "1"b;
	alphainit.info.bit_string = alphanum_lit.info.bit_string;
	alphainit.length = alphanum_lit.length;
	aiv = al;
	alphainit.string = alphanum_lit.string;
     end store_av;


	initial_ptr = data_name.size + 1;
	initial_ptr = data_name.size + 1;
	data_name.size = data_name.size + aiv_constant + alphainit.length;
	fixbin7_1 = mod (data_name.size, 4);
	if fixbin7_1 ^= 0
	then fixbin7_1 = 4 - fixbin7_1;
	data_name.size = data_name.size + fixbin7_1;
	ptr1 = addr (dn_ptr -> any_item (data_name.size + 1));
	go to retrn;				/* store_fig_con_value */

actlbl (72):					/*action(36):*/
	call store_fcv;


store_fcv:
     proc;
	alphainit.initype.fig_con = "1"b;
	alphainit.info.fig_con_index = substr (unspec (rw.jump_index), 30, 7);
	alphainit.length = 0;
     end store_fcv;


	if alphainit.info.fig_con_index = "0000001"b
	then data_name.size = data_name.size + niv_constant + 1;
						/*leave room for pic_val_comp to change extension to numeric type if data item numeric*/
	else data_name.size = data_name.size + aiv_constant + 1;
						/*leave room for fixup phase to add one-byte literal string*/

	fixbin7_1 = mod (data_name.size, 4);
	if fixbin7_1 ^= 0
	then fixbin7_1 = 4 - fixbin7_1;
	data_name.size = data_name.size + fixbin7_1;

	ptr1 = addr (dn_ptr -> any_item (data_name.size + 1));

	if rw.jump_index = 1
	then vector_map.fig_zero = "1"b;

	go to retrn;				/* usage comp-n */

actlbl (73):					/* usage is comp-5 */
						/*action(37):*/
	vector_map.ascii_packed_dec_b = "1"b;
	go to retrn;				/* sign_clause */

actlbl (74):					/*action(38):*/
	vector_map.sign_clause = "1"b;

	go to retrn;				/* sign_type_overpunch_right_trailing */

actlbl (75):					/*action(39):*/
	vector_map.sign_type = "001"b;

	go to retrn;				/* sign_type_overpunch_left_leading */

actlbl (76):					/*action(40):*/
	vector_map.sign_type = "010"b;
	vector_map.sign_clause_occurred = "1"b;
	go to retrn;

/* sign_type_separate_right */

actlbl (77):					/*action(41):*/
	vector_map.sign_type = "011"b;
	vector_map.sign_separate = "1"b;
	go to retrn;

/* sign_type_separate_left */

actlbl (78):					/*action(42):*/
	vector_map.sign_type = "100"b;
	vector_map.sign_clause_occurred = "1"b;
	vector_map.sign_separate = "1"b;
	go to retrn;

/* set_sync_right */

actlbl (79):
	;

actlbl (80):					/*action(43):*/
	vector_map.sync_right = "1"b;

/*action(44):*/
/*sync*/

	sync_rdf = "1"b;
	fixed_common.sync_in_prog = "1"b;

	if data_name.level = 77
	then goto retrn;

/* set sync bit in 01 item */

	if data_name.level = 1
	then do;
		vector_map.sync_in_rec = "1"b;
		goto retrn;
	     end;

	if cobol_htbl.exp_redefining (1)
	then rnt_key = rdf_01_sav;
	else rnt_key = cobol_htbl.nt_rec (1);

	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);

	rnt_ptr -> data_name.sync_in_rec = "1"b;

	call cobol_vdwf_dput (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);

	go to retrn;				/* set_just_right */

actlbl (81):					/*action(45):*/
	vector_map.just_right = "1"b;

	go to retrn;				/* set_just_left */

actlbl (82):					/*action(46):*/
	go to retrn;				/* set_bwz */

actlbl (83):					/*action(47):*/
	vector_map.bwz = "1"b;

	go to retrn;

/* set_occurs_extension */

actlbl (84):					/*action(48):*/
	vector_map.occurs_clause = "1"b;

	vector_map.subscripted = "1"b;

	if data_name.occurs_ptr = 0
	then data_name.occurs_ptr = data_name.size + 1;

	ptr1 = addr (dn_ptr -> any_item (data_name.occurs_ptr));

	if h ^= 0					/*only under error condition*/
	then do;
		temp_bin1 = data_name.size + 1;
		fh = h;
		rnt_key = cobol_htbl.nt_rec (fh);

		call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);

		save_ptr = dn_ptr;
		dn_ptr = rnt_ptr;

		if data_name.occurs_ptr = 0
		then do;
			dn_ptr = save_ptr;
			odim = 0;
		     end;
		else do;
			pdn_occ_ptr = addr (dn_ptr -> any_item (data_name.occurs_ptr));
			odim = pdn_occ_ptr -> occurs.dimensions;
			ptr1 = addr (save_ptr -> any_item (temp_bin1));
			temp_bin1 = occ_constant + occ_dim_constant * odim;
			substr (ptr1 -> anystring, 1, temp_bin1) = substr (pdn_occ_ptr -> anystring, 1, temp_bin1);

/*copies parent's occurs extension onto child*/

			ptr1 -> occurs.keyed = 0;
			dn_ptr = save_ptr;
		     end;
	     end;
	odim = odim + 1;
	occurs.dimensions = odim;
	data_name.size = data_name.size + occ_constant + occ_dim_constant * odim;

	fixbin7_1 = mod (data_name.size, 4);
	if fixbin7_1 ^= 0
	then fixbin7_1 = 4 - fixbin7_1;
	data_name.size = data_name.size + fixbin7_1;

/*POST-RELEASE CHANGE*/
	keycount = 0;
	index_ct = 0;
	occurs.level.indexedno (odim) = 0;
	go to retrn;

na48:
	odim = odim + 1;
	occurs.dimensions = odim;

	if odim > 1 & vector_map.exp_redefining = "1"b
	then data_name.size = data_name.size + occ_dim_constant;
	else data_name.size = data_name.size + (occ_constant + occ_dim_constant * odim);

	fixbin7_1 = mod (data_name.size, 4);
	if fixbin7_1 ^= 0
	then fixbin7_1 = 4 - fixbin7_1;
	data_name.size = data_name.size + fixbin7_1;
	occurs.keyed = 0;
	index_ct = 0;
	occurs.level.indexedno (odim) = 0;
	go to retrn;				/*occurs -integer-*/

actlbl (85):					/*action(49):*/
						/*[5.0-1]*/
	if record.type = 2
	then save_occno = fixed (numeric_lit.literal);
	else save_occno = 0;
	occurs.level.max (odim) = save_occno;
	go to retrn;

/*occurs -integer- to -integer-*/

actlbl (86):					/*action(50):*/
	occurs.level.min (odim) = occurs.level.max (odim);/*[5.0-1]*/
	if record.type = 2
	then save_occno = fixed (numeric_lit.literal);
	else save_occno = 0;
	occurs.level.max (odim) = save_occno;
	goto retrn;				/*occurs ... depending on*/
						/* store obj_rec for odo & create odo_rec */

actlbl (87):					/*action(51):*/
	com2_ptr = addr (cobol_wkbuf2_tbl.wkbuf2);
	ptr4 = addr (cobol_wkbuf2_tbl);
	ptr4 -> cntbuf2 = 0;

	odo_rec.info = "00000001"b;			/*for occurs only*/
	odo_rec.next = null_key;
	odo_rec.descr = null_key;
	odo_rec.seg_no = 0;
	odo_rec.offset_l = 0;
	odo_rec.offset_r = 0;
	odo_rec.descr = null_key;
	odo_rec.seg_no = 0;
	odo_rec.offset_l = 0;
	odo_rec.offset_r = 0;

/* write odo_rec into common file */
	cm_ptr = com2_ptr;
	cm_size = odo_rec_constant;

	call cobol_vdwf_sput (cobol_cmfp, fstatus, cm_ptr, cm_size, cm_key);

/* store odo_rec record no in common into the do_rec in data_name item */

	data_name.do_rec = cm_key;

	if h ^= 0
	then do fh = h to 1 by -1;
		cobol_htbl.do_rec (fh) = cm_key;
		cobol_htbl.do_rec_valid (fh) = "1"b;
	     end;

	if prior_odo_rec ^= null_key
	then go to s_odo_next;

	fixed_common.odo_info = cm_key;
	prior_odo_rec = cm_key;
	go to odo_obj;

s_odo_next:
	rcm_key = prior_odo_rec;

	call cobol_vdwf_dget (cobol_cmfp, fstatus, cm_ptr, cm_size, rcm_key);

	com2_ptr = cm_ptr;
	odo_rec.next = cm_key;

	call cobol_vdwf_dput (cobol_cmfp, fstatus, cm_ptr, cm_size, rcm_key);

	prior_odo_rec = cm_key;

/* create obj_rec for odo_rec */

odo_obj:
	com2_ptr = addr (cobol_wkbuf2_tbl.wkbuf2);
	ptr4 = addr (cobol_wkbuf2_tbl);
	ptr4 -> cntbuf2 = 0;
	obj_rec.qual = null_key;

	if record.type = 8
	then do;					/* odo name exists */

		obj_rec.size = user_word.word_size;
		substr (obj_rec.name, 1, user_word.word_size) = substr (user_word.word, 1, user_word.word_size);
	     end;
	else do;					/* odo name missing or in error - use a dummy */

		obj_rec.size = 6;
		obj_rec.name = "FILLER";
	     end;

	obj_rec.line = record.line;
	obj_rec.column = record.column;
	cm_ptr = com2_ptr;
	cm_size = obj_rec_constant + obj_rec.size;

	call cobol_vdwf_sput (cobol_cmfp, fstatus, cm_ptr, cm_size, cm_key);

	prior_obj_rec = cm_key;
	prior_qual_rec = null_key;			/* store obj_rec record no into odo_rec */
	rcm_key = prior_odo_rec;

	call cobol_vdwf_dget (cobol_cmfp, fstatus, cm_ptr, cm_size, rcm_key);

	com2_ptr = cm_ptr;
	odo_rec.descr = cm_key;

	call cobol_vdwf_dput (cobol_cmfp, fstatus, cm_ptr, cm_size, rcm_key);

	goto retrn;				/* store_odo_do_rec */

actlbl (88):					/*action(52):*/
	vector_map.occurs_do = "1"b;
	goto retrn;				/* key_ascending*/

actlbl (89):					/*action(53):*/
						/*POST-RELEASE CHANGE: 1 line deleted*/
	vector_map.key_a = "1"b;
	asc_des = 1;
	go to retrn;				/* key descending */

actlbl (90):					/*action(54):*/
						/*POST-RELEASE CHANGE: 1 line deleted*/
	vector_map.key_d = "1"b;
	asc_des = 2;
	go to retrn;				/* store first key dn into common */

actlbl (91):					/*action(55):*/
	keycount = keycount + 1;
	prior_qual_rec = null_key;

	skey_ptr = addr (cobol_wkbuf2_tbl.wkbuf2);
	skey_rec.next = null_key;
	skey_rec.qual = null_key;
	skey_rec.keyno = keycount;
	skey_rec.asc_des = asc_des;
	skey_rec.ref_line = user_word.line;
	skey_rec.ref_column = user_word.column;
	skey_rec.info = "00000000"b;
	skey_rec.size = user_word.word_size;

	substr (skey_rec.name, 1, user_word.word_size) = substr (user_word.word, 1, user_word.word_size);

	cm_ptr = skey_ptr;
	cm_size = skey_rec_constant + skey_rec.size;

	call cobol_vdwf_sput (cobol_cmfp, fstatus, cm_ptr, cm_size, cm_key);

/* store key dn record no in common into data_name item */

	if prior_skey_rec ^= null_key
	then go to s_next_key;

	rcm_key = prior_occ_key;

	call cobol_vdwf_dget (cobol_cmfp, fstatus, cm_ptr, cm_size, rcm_key);

	com2_ptr = cm_ptr;
	occ_key.first_key = cm_key;

	call cobol_vdwf_dput (cobol_cmfp, fstatus, cm_ptr, cm_size, rcm_key);

	prior_skey_rec = cm_key;
	goto retrn;

s_next_key:
	rcm_key = prior_skey_rec;

	call cobol_vdwf_dget (cobol_cmfp, fstatus, cm_ptr, cm_size, rcm_key);

	skey_ptr = cm_ptr;
	skey_rec.next = cm_key;
	prior_skey_rec = cm_key;
	goto retrn;

/* set_indexed_by_bit */

actlbl (92):					/*action(56):*/
	vector_map.indexed_by = "1"b;

	go to retrn;				/* generate_indexname_item */

actlbl (93):					/*action(57):*/
	index_ct = index_ct + 1;

	if index_ct = 1
	then do;
		counter2 = counter2 + 1;
		occurs.level.indexedno (odim) = counter2;

		ptr4 = addr (cobol_wkbuf2_tbl);
		ptr4 -> cntbuf2 = 0;

		indexname.type = 10;
		indexname.level = 99;
		indexname.index_no = counter2;
		indexname.min = occurs.level.min (odim);
		indexname.max = occurs.level.max (odim);
	     end;

	indexname.line = user_word.line;
	indexname.def_line = user_word.line;
	indexname.column = user_word.column;
	indexname.name_size = user_word.word_size;

	substr (indexname.name, 1, user_word.word_size) = substr (user_word.word, 1, user_word.word_size);

	indexname.size = in_constant + indexname.name_size;
						/* write index name item type=10 */
	rnt_size = indexname.size;

	call cobol_vdwf_sput (cobol_ntfp, fstatus, w2_ptr, rnt_size, w_key);

	ixix = ixix + 1;				/*save key for later retrieval to set struc_length*/

	if ixix > 50
	then do;
		tf = 196;
		call diag;
		goto pre_end;
	     end;

	ix_ino (ixix) = counter2;
	ix_key (ixix) = w_key;
	go to retrn;

/* rws_bit */

actlbl (94):					/*action(58):*/
	substr (section_ind, 6, 1) = "1"b;

	fixed_common.report = "1"b;
	go to retrn;				/*pd_bit */

actlbl (95):					/*action(59):*/
	substr (section_ind, 7, 1) = "1"b;

	go to retrn;				/* eop_bit */

actlbl (96):					/*action(60):*/
	substr (section_ind, 8, 1) = "1"b;

	go to retrn;				/*set pre_end_sw for interpreter termination */

actlbl (97):					/*action(61):*/
	go to pre_end;

/*write to name table if unwritten item exists*/

actlbl (98):					/*action(62):*/
	if bnw ^= 0
	then do;
		rnt_size = data_name.size;

		call cobol_vdwf_sput (cobol_ntfp, fstatus, dn_ptr, rnt_size, w_key);

		bnw = 0;
	     end;
	go to retrn;				/* initialization */

actlbl (99):					/*action(3):*/
						/*generate TALLY*/
	ptr4 = addr (cobol_wkbuf1_tbl);
	ptr4 -> cntbuf = 0;
	dn_ptr = addr (cobol_wkbuf1_tbl);

	data_name.type = 9;
	data_name.level = 77;
	data_name.item_length = 5;			/* 5 is arbitrarily chosen */
	data_name.places_left = 5;
	data_name.name_size = 13;
	data_name.size = dn_constant + 13;

	substr (data_name.name, 1, data_name.name_size) = "SYSTEM-STATUS";

	addr (data_name.file_section) -> bit72 =
	     "010000100100000001000000000100000000000000000000000010000000000000000100"b;

/*working-storage section,level 77,elementary,numeric,display,integer*/
/*not user writable*/

	rnt_size = data_name.size;

	call cobol_vdwf_sput (cobol_ntfp, fstatus, dn_ptr, rnt_size, w_key);
						/*write SYSTEM-STATUS*/

	fixed_common.first_dd_item = w_key;		/*for ddalloc file positioning*/

	substr (data_name.name, 1, data_name.name_size) = "TALLY";

	data_name.name_size = 5;
	data_name.not_user_writable = "0"b;
	data_name.size = dn_constant + 5;
	rnt_size = data_name.size;
	bnw = 1;					/*buf needs write*/
	goto retrn;


actlbl (100):
	vector_map.ascii_packed_dec_h = "1"b;
	goto retrn;

pre_end:
	pre_end_sw = "1"b;
	go to retrn;

comp_end:
	comp_end_sw = "1"b;

retrn:
	return;

dcl	an		fixed bin;
dcl	tf		fixed bin;
dcl	bit9		bit (9);
dcl	bit32		bit (32);
dcl	bit40		bit (40);
dcl	fstatus		bit (32);			/*io return code*/
dcl	null_func		ptr internal static init (null ());
dcl	null_key		char (5) internal static init ("00000");
dcl	asc_des		fixed bin internal static;

declare	(addr, divide, mod, substr, unspec, fixed)
			builtin;


%include cobol_spec_constants;
%include cobol_special_dcls;
%include cobol_ext_;
/* %include cobol_segdata_ddsyn;  */
%include cobol_ext_ddsyn;
dcl	bit32_1		bit (32);			/*work field for usage bits testing*/
dcl	thirty_two_zeros	bit (32) internal static init ("00000000000000000000000000000000"b);
dcl	non_display_bits_mask
			bit (32) init ("00000110000000000000111111100000"b) internal static;
dcl	pic_suff_bits_mask	bit (32) internal static init ("00000110000000000000000011100000"b);
						/*masks out all but picture_sufficient usage bits*/
dcl	sv_ptr_auto	ptr;
dcl	1 shared_var	based (sv_ptr_auto),
%include cobol_shared_var;
%include cobol_non_static;
%include cobol_type9;
%include cobol_occurs;
%include cobol_obj_rec;
%include cobol_odo_rec;
%include cobol_occ_key_rec;
%include cobol_skey_rec;
%include cobol_fixed_common;
%include cobol_fd_token;
%include cobol_file_table;
     end cobol_ddact1;
