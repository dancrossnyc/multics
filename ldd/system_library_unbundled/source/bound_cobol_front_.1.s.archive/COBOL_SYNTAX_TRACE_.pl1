/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 COBOL_SYNTAX_TRACE_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 01/31/80 by FCH, [4.2-2], rw phase added */
/* Modified on 11/15/79 by MHD, [4.2-1], added comment entries to rls segments */
/* Modified since Version 4.0 */


/* format: style3 */
COBOL_SYNTAX_TRACE_:
     proc (arg_ptr, trace_mode);

/*	perform a trace in the syntax interpreter	*/

declare	arg_ptr		ptr,
	trace_mode	fixed bin (31);

declare	ioa_		entry options (variable);

dcl	tssi_$clean_up_segment
			entry (ptr);
dcl	tssi_$get_segment	entry (char (*), char (*), ptr, ptr, fixed bin (35));
dcl	get_pdir_		entry returns (char (168));
dcl	expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35));
dcl	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl	com_err_		entry options (variable);


declare	(mode, line_offset) static internal;


declare	trace_on		fixed bin static internal;

declare	1 trace		static internal,
	  2 curr_first	fixed bin (31) init (0),
	  2 curr_last	fixed bin (31) init (0),
	  2 phase,
	    4 first	(5) fixed bin (31) init (0, 0, 0, 0, 0),
	    4 last	(5) fixed bin (31) init (0, 0, 0, 0, 0);

declare	arc_name		char (32);
declare	NAME		char (32);
declare	line		char (118);
declare	dec		char (16);
declare	digs		char (10) init ("0123456789");

declare	(i, curr_offset, curr_line, line_count)
			fixed bin (31);
declare	(siz, loc, tloc, POS)
			fixed bin;
declare	(first, last, val, pos, CL)
			fixed bin (31);
declare	off		ptr;
declare	phase_num		fixed bin (31);

dcl	(null, addr, substr, unspec, fixed, mod, index, divide)
			builtin;

dcl	code		fixed bin (35);
dcl	aclinfo_ptr	ptr;
dcl	bc		fixed bin (24);
dcl	cleanup		condition;
dcl	dn		char (168),
	en		char (32);

declare	1 interp		based (arg_ptr),
	  2 current_line	fixed bin (31),
	  2 phase		fixed bin (31),
	  2 addr_record	ptr,
	  2 filler	ptr,
	  2 dir_ptr	ptr,
	  2 source_ptr	ptr;

declare	1 header		based (addr_record),
	  2 size		fixed bin (31),
	  2 line		fixed bin (31),
	  2 column	fixed bin (31),
	  2 type		fixed bin (31);

declare	1 rl_dir		(10000) based (interp.dir_ptr),
	  2 offset	ptr,
	  2 size		fixed bin (31),
	  2 line		fixed bin (31);

declare	char_string	char (100000) based (source_ptr);

declare	char_array	(100000) char (1) based (source_ptr);
declare	bit_array		(100000) bit (9) based (source_ptr);

declare	arg		char (32) based (arg_ptr);

reset_trace:
     entry;



	trace.curr_first = 0;
	trace.curr_last = 0;


	return;

trace:
     entry (arg_ptr, trace_mode);


	go to T (trace_on);

T (0):
	if header.line = 0
	then return;
	else if header.line < trace.curr_first
	then return;
	else trace_on = 1;

	go to T1;

T (1):
	if trace.curr_last ^= 0
	then do;
		if header.line > trace.curr_last
		then do;
			trace_on = 2;
			return;
		     end;
	     end;

	go to T1;

T (2):
	return;

T1:
	if mode = 0
	then do;
		CL = current_line + line_offset;
		line = " ";
		siz = rl_dir.size (CL);
		off = rl_dir.offset (CL);

		dec = char (rl_dir.line (CL) * 10);
		substr (line, 1, 5) = substr (dec, 12, 5);

		substr (line, 41, siz) = substr (off -> char_string, 1, siz);

		dec = char (header.line * 10);
		substr (line, 13, 6) = substr (dec, 11, 6);
		dec = char (header.column * 10);
		substr (line, 20, 6) = substr (dec, 11, 6);
		dec = char (header.type * 10);
		substr (line, 27, 6) = substr (dec, 11, 6);

		if (trace_mode = 1 | trace_mode = 4)
		then substr (line, 33, 1) = "~";

		if trace_mode = 4 | trace_mode = 5
		then substr (line, 7, 6) = ">>>>>>";

		if trace_mode = 3
		then substr (line, 7, 6) = "<<<<<<";

		call ioa_ (line);

	     end;

	return;

make_dir:
     proc;

declare	(loc, nb_loc)	fixed bin;
declare	ch		char (1);

	call tssi_$get_segment (get_pdir_ (), "RED_DIR_QJZW", interp.dir_ptr, aclinfo_ptr, code);

	if code ^= 0
	then go to error;

	i, line_count, curr_offset, curr_line = 1;

	do while (substr (char_string, i, 3) ^= "~~~");

	     loc = index (substr (char_string, i, 256), "
");

/*[4.2-1]*/
	     if loc ^= 1 & char_array (i) ^= "~"
	     then do;
		     nb_loc = 1;
		     ch = substr (char_string, 1, 1);

		     do while (ch = " " | ch = "	");

			nb_loc = nb_loc + 1;
			ch = substr (char_string, nb_loc, 1);

		     end;

		     if nb_loc < loc
		     then do;

			     rl_dir.offset (curr_line) = addr (char_array (curr_offset));

			     tloc = index (substr (char_string, i, loc), "~");

			     if tloc = 0
			     then rl_dir.size (curr_line) = loc - 1;
			     else rl_dir.size (curr_line) = tloc - 1;

			     rl_dir.line (curr_line) = line_count;

			     curr_line = curr_line + 1;

			end;

		end;

	     i = i + loc;
	     curr_offset = i;
	     line_count = line_count + 1;
	end;

	if code ^= 0
	then go to error;

     end;

initialize:
     entry (arg_ptr);

/*[4.2-2]*/
	POS = index ("id*dd*pd*db*rw*", substr (arg, 6, 2) || "*");

/*[4.2-2]*/
	if POS = 0
	then return;

/*[4.2-2]*/
	POS = divide (POS + 1, 2, 31, 0);

/*[4.2-2]*/
	call limits;

/*[4.2-2]*/
	trace.phase.first (POS) = first;		/*[4.2-2]*/
	trace.phase.last (POS) = last;

	return;

dec_to_bin:
     proc;

declare	(orig, size)	fixed bin (31);

	orig = i;
	pos = index (digs, substr (arg, i, 1));

	do while (pos ^= 0);
	     i = i + 1;
	     pos = index (digs, substr (arg, i, 1));
	end;

	size = i - orig;

	if size ^= 0
	then val = fixed (substr (arg, orig, size));
	else val = 0;

     end;

arc_entry:
     proc;

/*	char(12)	014 012 012 012				*/
/*		017 012 011 011				*/
/*		b   b   b   b				*/

/*	char(32)	component name(left justified , blank padding)	*/

/*	char(36)	MM/DD/YYbb	date			*/
/*		TTTT.T		time			*/
/*		AAAA		access mode		*/
/*		MM/DD/YYbb	date			*/
/*		TTTT.T		time			*/
/*	char(8)	017 017 017 017				*/
/*		012 012 012 012				*/

/*	char(*)	data (padded with 000 to half word boundry)	*/


declare	ent_ptr		ptr;
declare	size		fixed bin (36);

declare	1 entry		based (ent_ptr),
	  2 flag1		char (12),
	  2 name		char (32),
	  2 desc		char (36),
	  2 size		char (12),
	  2 flag2		char (8),
	  2 data		(100000) char (1);

	ent_ptr = source_ptr;

	do while ("1"b);

	     if NAME = entry.name
	     then do;
		     source_ptr = addr (entry.data (1));
		     return;
		end;

	     if unspec (substr (entry.flag1, 1, 1)) ^= "000001100"b
	     then do;
		     source_ptr = null ();
		     return;
		end;

	     size = fixed (entry.size);
	     size = size / 9;
	     size = size + mod (-size, 4);

	     ent_ptr = addr (entry.data (size + 1));

	end;

     end;

limits:
     proc;

	first = 0;
	last = 0;

	i = 8;
	call dec_to_bin;

	first = val;
	if substr (arg, i, 1) ^= ","
	then return;

	i = i + 1;
	call dec_to_bin;

	last = val;

     end;

error:
	call com_err_ (code, "COBOL_SYNTAX_TRACE_");
	return;

cl:
     proc;

	call tssi_$clean_up_segment (aclinfo_ptr);

     end;

initialize_phase:
     entry (arg_ptr, phase_num);

	line_offset = 0;

	on cleanup call cl;

	go to ph (phase_num);

ph (1):
	NAME = "IDEDTABLE.reductions";
	arc_name = "IDEDTABLE.archive";
	go to pha;

ph (2):
	NAME = "DDTABLE.reductions";
	arc_name = "DDTABLE.archive";
	go to pha;

ph (3):
	NAME = "PDTABLE.reductions";
	arc_name = "PDTABLE.archive";
	go to pha;

ph (4):
	NAME = "DB.reductions";
	arc_name = "DB.archive";
	go to pha;

/*[4.2-2]*/
ph (5):						/*[4.2-2]*/
	NAME = "RW.reductions";
	arc_name = "RW.archive";			/*[4.2-2]*/
	go to pha;

pha:
	mode = 0;

	call expand_pathname_ (NAME, dn, en, code);

	if code ^= 0
	then go to error;

	call hcs_$initiate_count (dn, en, "", bc, 1, source_ptr, code);

	if source_ptr = null ()
	then do;
		call expand_pathname_ (arc_name, dn, en, code);

		if code ^= 0
		then go to error;

		call hcs_$initiate_count (dn, en, "", bc, 1, source_ptr, code);

		if source_ptr = null ()
		then mode = 1;
		else do;
			call arc_entry;

			if source_ptr = null ()
			then go to error;

		     end;
	     end;

	call make_dir;

	trace.curr_first = trace.first (phase_num);
	trace.curr_last = trace.last (phase_num);

	trace_on = 0;


     end COBOL_SYNTAX_TRACE_;
