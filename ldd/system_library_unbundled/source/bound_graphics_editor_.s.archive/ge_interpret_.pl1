/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


ge_interpret_: proc;
	return;

/* This module implements the "show" and "replay" commands of the graphic_editor. */
/* Written c. Feb 1, 1975 by C. D. Tavares */
/* Modified 08/08/75 by CDT to handle "replay sym1, sym2, ... symn" correctly, i.e. with
   semicolons after EACH symbol, and not to replay already-replayed subsymbols in this case. */
/* Modified 08/14/75 by CDT to replay quotes arond datablocks correctly. */
/* Modified 08/15/75 by CDT to write around hairy PL/I bug which was causing
   recursions to lose totally. */
/* Modified 08/28/75 by CDT to put out tabs wherever possible, to save storage space
   and to chop off trailing zeroes in replays */
/* Last modified 06/25/76 to support system macro feature */

replay:	entry (environment_ptr, code);

%include ge_environment;

%include ge_data_structures;

dcl  code fixed bin (35);

dcl  sysprint stream;

dcl  db_sw bit (1) aligned static initial ("0"b);

dcl  string char (200),
     n_chars fixed bin,
     alignment fixed bin;

dcl  number_spaces fixed bin static initial (2);		/* indentation spaces per level */

dcl (plural, paren) char (1),
     article char (2);

dcl (i, j) fixed bin,
    (com_err_$suppress_name, ioa_, ioa_$nnl) ext entry options (variable);

dcl 1 found_symbols aligned based (fs_ptr),
    2 n_found_symbols fixed bin,
    2 cur_max_found_symbols fixed bin,
    2 name (max_found_symbols refer (cur_max_found_symbols)) char (32) varying;

dcl  fs_ptr pointer,
     old_p pointer,
     max_found_symbols fixed bin;

dcl 1 fake_element_array (1) like tuple.element based aligned;

	call initialize_ptrs;

	tuple_p = stack (1).tuple_ptr;

	max_found_symbols = 50;
	allocate found_symbols in (my_area);
	n_found_symbols = 0;

	do i = 1 to tuple.n_elements;
	     if index (tuple.name (i), ".") > 0
	     then call com_err_$suppress_name (0, "ge_interpret_",
		"""^a"" may not be replayed.", tuple.name (i));

	     else do;
		do j = 1 to n_found_symbols while (found_symbols.name (j) ^= tuple.name (i));
		end;				/* check to see if already put out as sublist */

		if j > n_found_symbols
		then call replay_recur (addr (tuple.element (i)) -> fake_element_array, 0, "1"b);
						/* fake it, otherwise PL/I builds structure descriptor */
						/* instead of array of structures descriptor! */
	     end;
	end;

	call ioa_ ("");				/* put out last null line */

	free fs_ptr -> found_symbols in (my_area);

	return;

show:	entry (environment_ptr, code);

	call initialize_ptrs;

	tuple_p = stack (1).tuple_ptr;

	call replay_recur (tuple.element (*), 0, ""b);
	return;


/* -------------------------------------------------- */

replay_recur: proc (x_element, level, is_replay) recursive;

dcl 1 x_element like tuple.element aligned parameter dimension (*);

dcl  level fixed bin parameter,
     is_replay bit (1) aligned parameter;

dcl  i fixed bin,
     indentation fixed bin,
     limit fixed bin;

	     if ^is_replay then if db_sw then do;
		     call ioa_$nnl ("|LEVEL ^d->", level);
		     put list ("Showing: "); put skip;
		     put list /* data */ (x_element);
		     put skip;
		end;

	     limit = hbound (x_element, 1);
	     if db_sw then call ioa_$nnl ("|^d ELEMS AT LEVEL ^d->", limit, level);

	     indentation = level * number_spaces;

	     do i = lbound (x_element, 1) to limit;
		call replay_element (x_element (i), level, is_replay);
		if i = limit
		then if level = 0
		     then call ioa_ (";");
		     else;
		else call ioa_$nnl (",^/^v-^vx", divide (indentation, 10, 17, 0), mod (indentation, 10));
	     end;

	     if db_sw then call ioa_$nnl ("<-LEVEL ^d|", level);

	     return;

/* -------------------------------------------------- */

replay_element: proc (element_arg, level, is_replay);

dcl 1 element_arg like tuple.element aligned parameter,
     level fixed bin parameter,
     is_replay bit (1) aligned parameter;

dcl  i fixed bin,
     mappings (6) float bin,
     mappings_len fixed bin,
    (red, green, blue) fixed bin,
    (x, y, z) float bin,
     ioa_string char (20) varying,
     mode fixed bin,
     mode_string char (32),
     sub_value fixed bin (18),
     nc fixed bin,
     symbol_name char (168) varying,
     new_indentation fixed bin,
     array (4095) fixed bin (18),
     array_len fixed bin;

dcl 1 local_tuple like tuple aligned based (local_tuple_p);

/* can't use declaration of tuple in outer block for this purpose because of
   arcane PL/I compiler bug; tries to share descriptor instances during recursion! */

dcl  local_tuple_p pointer;


		call graphic_manipulator_$examine_type (element_arg.rvalue, ""b, element_arg.type, code);
		if code ^= 0 then call crump (is_replay);

		goto describe_type (element_arg.type);

describe_type (-2):					/* illegal node */

		call crump (is_replay);

describe_type (-1):					/* null node */

		if is_replay then call ioa_$nnl ("null");
		else call ioa_$nnl ("^a is null", element_arg.name);
		return;

describe_type (0): describe_type (1): describe_type (2):
describe_type (3): describe_type (4):			/* all positionals */

		call graphic_manipulator_$examine_position (element_arg.rvalue, 0, x, y, z, code);
		if code ^= 0 then call crump (is_replay);

		if is_replay then do;

		     if z = 0			/* save output space by killing trailing zeroes */
		     then if y = 0
			then if x = 0
			     then ioa_string = "^a";
			     else ioa_string = "^a ^f";
			else ioa_string = "^a ^f ^f";
		     else ioa_string = "^a ^f ^f ^f";

		     call ioa_$nnl (ioa_string, Element_names (element_arg.type), x, y, z);
		end;

		else do;

		     if z = 0			/* save output space by killing trailing zeroes */
		     then if y = 0
			then if x = 0
			     then ioa_string = "^a is ^a";
			     else ioa_string = "^a is ^a ^f";
			else ioa_string = "^a is ^a ^f ^f";
		     else ioa_string = "^a is ^a ^f ^f ^f";

		     call ioa_$nnl ("^a is ^a ^f ^f ^f", element_arg.name, Element_names (element_arg.type), x, y, z);
		end;

		return;

describe_type (8):					/* scaling */
describe_type (9):					/* rotation */

		call graphic_manipulator_$examine_mapping (element_arg.rvalue, 0, mappings, mappings_len, code);
		if code ^= 0 then call crump (is_replay);

		if is_replay then call ioa_$nnl ("^a ^f ^f ^f", Element_names (element_arg.type), mappings (1), mappings (2),
		     mappings (3));
		else call ioa_$nnl ("^a is ^a ^f ^f ^f", element_arg.name, Element_names (element_arg.type),
		     mappings (1), mappings (2), mappings (3));
		return;

describe_type (16): describe_type (17):
describe_type (18): describe_type (19):			/* all modes except color */

		call graphic_manipulator_$examine_mode (element_arg.rvalue, 0, mode, code);
		if code ^= 0 then call crump (is_replay);

		if element_arg.type = 16 then mode_string = Intensity_names (mode);
		else if element_arg.type = 17 then mode_string = Linetype_names (mode);
		else if element_arg.type = 18 then mode_string = Sensitivity_names (mode);
		else mode_string = Blink_names (mode);

		if is_replay then call ioa_$nnl ("^a ^a", Element_names (element_arg.type), mode_string);
		else call ioa_$nnl ("^a is ^a ^a", element_arg.name, Element_names (element_arg.type), mode_string);

		return;

describe_type (20):					/* color */

		call graphic_manipulator_$examine_color (element_arg.rvalue, red, green, blue, code);
		if code ^= 0 then call crump (is_replay);

		if is_replay then call ioa_$nnl ("color red ^d green ^d blue ^d", red, green, blue);
		else call ioa_$nnl ("^a is color red ^d green ^d blue ^d", element_arg.name, red, green, blue);

		return;

describe_type (24):					/* symbol */

dcl  based_databit_string bit (size (symbol_name) * 36) based;

		call graphic_manipulator_$examine_symbol (element_arg.rvalue, sub_value, nc, string, code);
		if code ^= 0 then call crump (is_replay);

		symbol_name = substr (string, 1, nc);

		if substr (symbol_name, 1, 10) = "!sysmacro." then do; /* system macro, fake it */
		     call graphic_manipulator_$examine_list (sub_value, array, array_len, code);
		     if code ^= 0 then call crump (is_replay);

		     call graphic_manipulator_$examine_data (array (1), 0,
			addr (symbol_name) -> based_databit_string, code);
		     if code ^= 0 then call crump (is_replay);

		     if is_replay then
			call ioa_$nnl ("^a", symbol_name);
		     else call ioa_$nnl ("^a is system macro ""^a""", element_arg.name, symbol_name);
		     return;
		end;

		if ^is_replay then do;
		     call ioa_$nnl ("^a is symbol ""^a""", element_arg.name, symbol_name);
		     return;
		end;

		do i = 1 to n_found_symbols while (found_symbols.name (i) ^= symbol_name);
		end;

		if i <= n_found_symbols then do;	/* already know this one */
		     call ioa_$nnl ("^a", symbol_name);
		     return;
		end;

		cur_elements = 1;
		allocate local_tuple in (my_area);

		local_tuple.rvalue (1) = sub_value;

		local_tuple.name (1) = "???";

		if level = 0 then paren = "";
		else paren = "(";
		call ioa_$nnl ("^/^v-^vx^a^a = ", divide (indentation, 10, 17, 0), mod (indentation, 10), paren, symbol_name);
		if db_sw then call ioa_$nnl ("|SYMBOL RECURSION - ONE ELEMENT");
		call replay_recur (local_tuple.element (*), level+1, is_replay);
		if level > 0 then call ioa_$nnl (")");

		n_found_symbols = n_found_symbols + 1;
		if n_found_symbols > cur_max_found_symbols then do;
		     old_p = fs_ptr;
		     max_found_symbols = cur_max_found_symbols + 50;
		     allocate found_symbols in (my_area);

		     do i = 1 to old_p -> n_found_symbols - 1;
			fs_ptr -> found_symbols.name (i) = old_p -> found_symbols.name (i);
		     end;

		     fs_ptr -> n_found_symbols = old_p -> n_found_symbols;

		     free old_p -> found_symbols in (my_area);
		end;

		found_symbols.name (n_found_symbols) = symbol_name;

		free local_tuple in (my_area);

		return;

describe_type (25):					/* text */

		call graphic_manipulator_$examine_text (element_arg.rvalue, alignment, n_chars, string, code);
		if code ^= 0 then call crump (is_replay);

		if is_replay then do;
						/* double all the quotes */
		     do i = 1 by 1 while (i <= n_chars);
			if substr (string, i, 1) = """" then do;
			     string = substr (string, 1, i) || """" || substr (string, i+1);
			     i = i + 1;
			     n_chars = n_chars + 1;
			end;
		     end;

		     call ioa_$nnl ("text ""^a"" ^a", substr (string, 1, n_chars),
			Text_alignments (alignment));
		end;
		else call ioa_$nnl ("^a is text ""^a"" ^a", element_arg.name, substr (string, 1, n_chars),
		     Text_alignments (alignment));

		return;

describe_type (26):					/* datablock */

dcl  data_string char (200) varying,
     based_macro_bits bit (macro_bits_l) based (macro_bits_p),
     macro_bits_p pointer,
     macro_bits_l fixed bin;

		macro_bits_p = addr (data_string);
		macro_bits_l = size (data_string) * 36;

		call graphic_manipulator_$examine_data (element_arg.rvalue, 0, based_macro_bits, code);
		if code ^= 0 then call crump (is_replay);

		if (length (data_string) > (size (data_string) - 1) * 4
		| length (data_string) < 0) then	/* not a good varying string */
		     data_string = "!uninterpretable!"; /* datablock probably created by some other program */

		if is_replay then do;		/* double all the quotes */

		     do i = 1 by 1 while (i <= length (data_string));
			if substr (data_string, i, 1) = """" then do;
			     data_string = substr (data_string, 1, i) || """" || substr (data_string, i+1);
			     i = i + 1;
			end;
		     end;

		     call ioa_$nnl ("^a ""^a""", Element_names (element_arg.type), data_string);
		end;

		else call ioa_$nnl ("^a is ^a ""^a""", element_arg.name, Element_names (element_arg.type), data_string);

		return;

describe_type (32):
describe_type (33):					/* list & array */

		call graphic_manipulator_$examine_list (element_arg.rvalue, array, array_len, code);
		if code ^= 0 then call crump (is_replay);

		if ^is_replay then do;
		     if array_len > 0 then plural = "s";
		     else plural = "";
		     if element_arg.type = Array then article = "an";
		     else article = "a";
		     call ioa_$nnl ("^a is ^a ^a of ^d element^a", element_arg.name, article,
			Element_names (element_arg.type), array_len, plural);
		     return;
		end;

		cur_elements = array_len;
		allocate local_tuple in (my_area);

		do i = 1 to array_len;
		     local_tuple.rvalue (i) = array (i);
		end;

		local_tuple.name (*) = "???";

		new_indentation = indentation + number_spaces - 1;

		call ioa_$nnl ("^a^/^v-^vx(", Element_names (element_arg.type),
		     divide (new_indentation, 10, 17, 0), mod (new_indentation, 10));
		if db_sw then call ioa_$nnl ("|ARRAY RECURSION - ^d ELEMENTS", local_tuple.n_elements);
		call replay_recur (local_tuple.element (*), level + 1, is_replay);
		call ioa_$nnl (")");

		free local_tuple in (my_area);

		return;

	     end replay_element;

	end replay_recur;

crump:	proc (is_replay);

dcl  is_replay bit (1) aligned parameter;

	     if code = 0 then code = -1;
	     if is_replay then environment.error_message = "While replaying.";
	     else environment.error_message = "While showing.";
	     goto returner;
	end;

returner:
	return;

replay_macro: entry (environment_ptr, code);

	call macro_common ("1"b);
	call ioa_ ("");
	return;

show_macro: entry (environment_ptr, code);

	call macro_common (""b);
	call ioa_ ("");
	return;

/* ------------------------- */

macro_common: proc (is_replay);

dcl  is_replay bit (1) aligned parameter;

%include ge_token_types;

dcl  ge_parse_$get_token ext entry (char (*) varying, fixed bin, fixed bin),
     ge_parse_$backup ext entry;

dcl  token char (32) varying,
     token_type fixed bin;

dcl  com_err_$suppress_name ext entry options (variable);

dcl  size builtin;

dcl  array (21) fixed bin (18),
     array_len fixed bin;

dcl (ioa_, ioa_$nnl) ext entry options (variable);

%include ge_macro_info;

dcl  temp_node fixed bin (18);

	     call initialize_ptrs;

	     call ge_parse_$get_token (token, token_type, stack.level);

	     if token = ";" then call generate_error ("No arguments to macro replay/show.", "");

	     do while ("1"b);
		if token_type ^= Name then call generate_error ("Misplaced ""^a"".", token);

		do i = 1 to n_macros while (macro.name (i) ^= token);
		end;

		if i > n_macros
		then call com_err_$suppress_name (0, "ge_interpret_", "^/Macro ""^a"" not found.", token);

		else do;

		     call graphic_manipulator_$examine_symbol (macro.node_value (i), temp_node, 0, "", code);
		     if code ^= 0 then call crump (is_replay);

		     call graphic_manipulator_$examine_list (temp_node, array, array_len, code);
		     if code ^= 0 then call crump (is_replay);

		     n_macro_args = array_len - 1;

		     allocate macro_info in (my_area) set (macro_info_p);

		     macro_bits_l = size (based_macro_arg) * 36;

		     do i = 1 to n_macro_args;
			macro_bits_p = addr (macro_info_p -> macro_info.argument (i));
			call graphic_manipulator_$examine_data (array (i), 0, based_macro_bits, code);
			if code ^= 0 then call crump (is_replay);
		     end;

		     macro_bits_p = addr (macro_def);
		     macro_bits_l = size (macro_def) * 36;

		     call graphic_manipulator_$examine_data (array (array_len), 0, based_macro_bits, code);
		     if code ^= 0 then call crump (is_replay);

		     if is_replay then do;
			call ioa_$nnl ("^/macro ^a", token);

			do i = 1 to array_len- 1;
			     call ioa_$nnl (" ^a", macro_info_p -> macro_info.argument (i));
			end;

			call ioa_ (" = ^a;", macro_def);

		     end;

		     else do;
			if array_len = 2 then plural = "";
			else plural = "s";
			call ioa_ ("^a is macro of ^d argument^a:", token, array_len - 1, plural);

			do i = 1 to array_len - 1;
			     call ioa_ ("Arg ^d: ^a", i, macro_info_p -> macro_info.argument (i));
			end;

			call ioa_ ("Definition: ^a;", macro_def);
		     end;

		     free macro_info_p -> macro_info in (my_area);
		end;

		call ge_parse_$get_token (token, token_type, stack.level);
		if token = ";" then return;
	     end;

	end macro_common;

generate_error: proc (string, offender);

dcl  string char (*) parameter,
     offender char (*) varying parameter;

dcl  ioa_$rsnnl ext entry options (variable);

	     if code = 0 then code = -1;
	     call ioa_$rsnnl (string, environment.error_message, 0, offender);
	     goto returner;
	end generate_error;

%include gm_entry_dcls;

%include graphic_etypes;

%include graphic_enames;
flip:	entry;
	db_sw = ^db_sw;
	return;

     end;
