/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

ge_eval_: proc; return;

/* Semantic analyzer for graphic_editor. */
/* Written 1/10/75 by C. D. Tavares */
/* Modified 08/14/75 by CDT to check for too many simple indirects in
   reference, e.g.  "foo......" where there are too many periods, and to strip
   quotes from datablocks.  */
/* Modified 08/28/75 by CDT to call initialize_ptrs from perform_recursion.
   Local ptrs were becoming invalid when recursive sons grew (therefore moved)
   some tables.  */
/* Modified 10/15/75 by CDT to use new-type dispatch vector in system symbol
   structure and to use "effective_level" to implement new parsing rules for
   when a expression is terminated */
/* Modified 04/22/76 by CDT to fix minor +/-1 bug in loop causing OOBs with
   new areas */
/* Modified 06/25/76 by CDT to add system macros feature (circles, arcs...)
   and to add parenthesized macro argument feature to normal user macros.  */
/* Modified 08/30/76 by CDT to fix several problem bugs in regular expression
   parsing, as far as what assignments to a Q.E. meant */
/* Modified 10/29/76 by CDT not to reject tokens of type "Number" as text
   strings.  */
/* Last modified 08/29/80 by CDT to fix defaults for scaling when no args
   given */

tuple_evaluator: entry (environment_ptr, code);

dcl  environment_ptr pointer parameter,
     code fixed bin (35) parameter;

dcl  sysprint stream;

dcl  temp_p pointer;

	code = 0;
	call tuple_evaluator_recur (environment_ptr, 0, code);
	call check_for_undefineds (environment_ptr, code);
						/* This call is directed to the internal block because all
						   the based variables are declared in the internal block. */
	return;

	
tuple_evaluator_recur: proc (environment_ptr, recursion_level, code) recursive;

dcl  code fixed bin (35) parameter,
     recursion_level fixed bin parameter;

dcl  ge_parse_$get_token ext entry (char (*) varying, fixed bin, fixed bin),
     ge_parse_$backup ext entry,
     ge_parse_$push_macro ext entry (pointer, fixed bin, pointer);

dcl  effective_level fixed bin;

dcl  token char (200) varying,
    (i, j, k) fixed bin,
     token_type fixed bin;

dcl  based_name char (32) based (name_ptr) varying,
     name_ptr pointer;

dcl  ioa_$rsnnl ext entry options (variable);

%include ge_environment;

%include ge_data_structures;

%include ge_token_types;

	     call initialize_ptrs;
	     cur_elements = 0;
	     code = 0;

	     effective_level = recursion_level + stack.level; /* now ge_parse_$get_token will require */
						/* a semicolon if we are recursing (meaning that */
						/* some parens are open) or if the stack is being */
						/* actively used (assignments pending, etc.) */

	     do while ("1"b);			/* forever, until some termination condition */
						/* allows us to return */
		call ge_parse_$get_token (token, token_type, effective_level);

		if token_type = Break
		then if token = "(" then do;

			call perform_recursion;
			call ge_parse_$get_token (token, token_type, effective_level);
			if token ^= ")"
			then call generate_error ("""^a"" where "")"" expected.", token);

			tuple_p = stack (level).tuple_ptr;

			do i = 1 to tuple.n_elements;
			     assembly_tuple.element (cur_elements + i) = tuple.element (i);
			end;

			cur_elements = cur_elements + i - 1;

			free stack (level).tuple_ptr -> tuple in (my_area);
			stack.level = stack.level - 1;
			effective_level = effective_level - 1;
		     end;

		     else call generate_error ("""^a"" where symbol name expected.", token);

		else if token_type = Name then do;
		     cur_elements = cur_elements + 1;
		     call get_values;
		end;

		else call generate_error ("Misplaced ""^a"".", token);


		call ge_parse_$get_token (token, token_type, effective_level);

		if token_type ^= Break then call generate_error ("""^a"" where separator expected.", token);

		if token = "," then;		/* do nothing; we will loop again */

		else if token = "=" then do;
		     call push_tuple;
		     call perform_recursion;
		     call perform_assignment;
		     return;
		end;

		else if token = ";" then do;
		     call ge_parse_$backup;
		     call push_tuple;
		     return;
		end;

		else if token = ")" then do;
		     if recursion_level = 0 then call generate_error ("Too many ""^a""'s.", token);
		     call push_tuple;
		     call ge_parse_$backup;
		     return;
		end;

		else call generate_error ("Bad separator ""^a"".", token);
	     end;


push_tuple:    proc;

		stack.level = stack.level + 1;
		effective_level = effective_level + 1;
		if stack.level > stack.cur_max_frames then do;
		     temp_p = stack_p;
		     max_frames = cur_max_frames + 50;
		     allocate stack in (my_area);

		     do k = 1 to temp_p -> stack.level;
			stack_p -> stack.tuple_ptr (k) = temp_p -> stack.tuple_ptr (k);
		     end;

		     stack_p -> stack.level = temp_p -> stack.level;

		     environment.stack_p = stack_p;

		     free stack_p -> stack in (my_area);
		end;


		allocate tuple in (my_area);
		do i = 1 to cur_elements;
		     tuple.element (i) = assembly_tuple.element (i);
		end;

		stack (level).tuple_ptr = tuple_p;
	     end push_tuple;

perform_recursion: proc;

/* This internal subroutine saves assembly_tuple in myarea and then calls tuple_evaluator_recur.
   The reason this is necessary is that assembly_tuple is too big to be automatic; it
   causes stack overflows.  This works well and prevents overflows. */

dcl  i fixed bin,
     save_at_ptr pointer;

		allocate tuple in (my_area) set (save_at_ptr);

		do i = 1 to cur_elements;
		     save_at_ptr -> tuple.element (i) = assembly_tuple.element (i);
		end;

		call tuple_evaluator_recur (environment_ptr, recursion_level + 1, code);
		if code ^= 0 then goto return_hard;

		effective_level = recursion_level + stack.level; /* reset this, stack may have changed */

		call initialize_ptrs;		/* some tables may have been grown, therefore moved */

		do i = 1 to cur_elements;
		     assembly_tuple.element (i) = save_at_ptr -> tuple.element (i);
		end;

		free save_at_ptr -> tuple in (my_area);

		return;
	     end perform_recursion;


	     
get_values:    proc;

dcl (i, j, first, last, n, eff_type) fixed bin,
     element_list (4094) fixed bin (18),
     cv_dec_ ext entry (char (*)) returns (fixed bin),
     cv_float_ ext entry (char (*), fixed bin) returns (float bin),
     coords (3) float bin;

dcl  hold_name char (32) varying;

dcl 1 element like tuple.element based (element_ptr),
     element_ptr pointer initial (addr (assembly_tuple.element (cur_elements)));

		assembly_tuple (cur_elements).name = token;
		name_ptr = addr (assembly_tuple (cur_elements).name);
		offset = Undefined;

		if substr (token, 1, 1) = """" then do; /* implicit text */
		     call ge_parse_$backup;
		     token = "text";
		end;

		if substr (token, 1, 1) = "#" then do;	/* node constant */
		     based_name = token;
		     rvalue = cv_dec_ (substr (token, 2));
		     call graphic_manipulator_$examine_type (rvalue, ""b, 0, code);
		     if code ^= 0 then call generate_error ("Node constant ""^a"".", based_name);
		end;

		else do;				/* must be symbol */
		     do j = 2 to 1 by -1;
			do k = 1 to n_system_symbols;
			     if token = system_symbols (k, j) then do;
				lvalue, table_idx = Illegal;
				eff_type = system_symbol_vector (k);
				goto generate_element (eff_type);
			     end;
			end;
		     end;

		     do j = 2 to 1 by -1;
			do k = 1 to n_system_macros;
			     if token = system_macros (k, j) then do;
				lvalue, table_idx = Illegal;
				eff_type = system_macro_vector (k);
				goto generate_sysmacro (eff_type);
			     end;
			end;
		     end;

		     do j = 1 to n_macros;
			if macro.name (j) = token then do;
			     call setup_macro (j);
			     call ge_parse_$get_token (token, token_type, effective_level);
			     call get_values;
			     return;
			end;
		     end;

		     lvalue = Undefined;
		     type = Symbol;

		     do i = 1 to n_symbols while (token ^= symbol (i).name);
		     end;

		     if i > n_symbols then rvalue, table_idx = Undefined;

		     else do;
			rvalue = symbol (i).node_value;
			table_idx = i;
		     end;
		end;

		call ge_parse_$get_token (token, token_type, effective_level);

		if token = "."
		then if rvalue = Undefined
		     then call generate_error ("""^a"" undefined.", based_name);

		     else table_idx = Illegal;	/* forget the table, we're gonna go a-qualifyin'. */


/* MAIN QUALIFIED EXPRESSION PARSING LOOP */

		do while (token = ".");

		     based_name = based_name || ".";

		     if type ^= Symbol then
			if lvalue = Undefined then	/* at the end of the line already */
no_such_level:		     call generate_error ("No such level of qualification: ""^a"".", based_name);

		     if type = Symbol then call indirect_thru_symbol;
		     else call get_to_contents;

		     if code ^= 0 then goto no_such_level;

		     call ge_parse_$get_token (token, token_type, effective_level);

		     if token = "." then;		/* will catch "." next time; just reiterate thru loop */
		     else if token = ";" then;	/* ignore; we'll drop out of the loop */
		     else if (token_type ^= Number & token ^= "*") then;
						/* ignore it; we'll drop out of the loop */

		     else do;

			if token_type = Number then do;
			     first, last = cv_dec_ ((token));
			     call ge_parse_$get_token (token, token_type, effective_level);
			     if token = ":" then do;
				call ge_parse_$get_token (token, token_type, effective_level);
				if token_type ^= Number
				then if token ^= "*"
				     then call generate_error ("Bad qualifier ""^a"".", based_name);

				if token_type = Number then last = cv_dec_ ((token));
				else last = -1;
				call ge_parse_$get_token (token, token_type, effective_level);
			     end;

			end;

			else do;
			     first = 1;
			     last = -1;
			     call ge_parse_$get_token (token, token_type, effective_level);
			end;

			code = 0;

			if type ^= Array then do while (code = 0);
			     call indirect_thru_symbol;
			end;

			if type ^= Array
			then call generate_error ("""^a"" is not an array.", based_name);

			call graphic_manipulator_$examine_list (rvalue, element_list, n, code);
			if code ^= 0 then
internal_error:		     call generate_error ("Internal error on ""^a"".", based_name);
			if last > n then call generate_error ("No such element in ""^a"".", based_name);

			if last = -1 then last = n;

			lvalue = rvalue;		/* remember what list we were */

			hold_name = based_name;

			do i = 0 to last - first;

			     j = cur_elements + i;

			     if i > 0 then assembly_tuple.element (j)
				= assembly_tuple.element (cur_elements);
			     assembly_tuple (j).offset = first + i;
			     assembly_tuple (j).rvalue = element_list (first + i);
			     call ioa_$rsnnl ("^a^d", assembly_tuple (j).name, 0, hold_name, first + i);

			     assembly_tuple (j).type = Illegal;
						/* usefulness of "type" of an array element is highly questionable. */
			end;

			if last - first > 0
			then if token = "."
			     then call generate_error ("Expansion qualifier not last in ""^a"".", based_name);
			     else cur_elements = cur_elements + i - 1;
		     end;
		end;

		if rvalue = Undefined
		then if token_type ^= Break
		     then call generate_error ("""^a"" undefined.", based_name);

		call ge_parse_$backup;
		return;

/* ------------------------- */

indirect_thru_symbol: proc;

dcl  temp_node fixed bin (18);

		     call graphic_manipulator_$examine_symbol (rvalue, temp_node, 0, "", code);
		     if code = 0 then rvalue = temp_node;
		     else return;

get_to_contents:	     entry;

		     lvalue, offset = Undefined;

		     call graphic_manipulator_$examine_type (rvalue, ""b, type, code);
		     if type = List then type = Array;	/* We trigger on array only; both act alike. */
		     else if type = Symbol then lvalue = rvalue;
		     return;

		end indirect_thru_symbol;

/* ------------------------- */
/* ------------------------- */

setup_macro:	proc (which);

dcl  which fixed bin,
     macro_nodes (21) fixed bin (18),
     string char (200),
     temp_node fixed bin (18),
     n_chars fixed bin;

dcl  leading_sign char (1) varying;

dcl  paren_level fixed bin;

		     call graphic_manipulator_$examine_symbol (macro.node_value (which), temp_node, 0, "", code);
		     if code ^= 0 then
macro_error:		call generate_error ("While attempting to use macro ""^a"".", macro.name (which));

		     call graphic_manipulator_$examine_list (temp_node, macro_nodes, n_macro_args, code);
		     if code ^= 0 then goto macro_error;

		     n_macro_args = n_macro_args - 1;

		     allocate macro_info in (my_area) set (macro_info_p);

		     macro_bits_l = size (based_macro_arg) * 36;

		     do i = 1 to n_macro_args;
			macro_bits_p = addr (macro_info_p -> macro_info.argument (i));
			call graphic_manipulator_$examine_data (macro_nodes (i), 0, based_macro_bits, code);
			if code ^= 0 then goto macro_error;
			call ge_parse_$get_token (token, token_type, effective_level);

			if token = "(" then do;	/* parenthesized macro argument */

			     macro_info_p -> macro_info.replacement (i) = "";
			     paren_level = 1;

			     do while (paren_level > 0);

				call ge_parse_$get_token (token, token_type, effective_level);
				if token = "(" then paren_level = paren_level + 1;
				else if token = ")" then paren_level = paren_level - 1;
				else if token = ";" then do;
				     free macro_info_p -> macro_info in (my_area);
				     call generate_error ("Unbalanced parentheses in macro argument.", "");
				end;

				if length (macro_info_p -> macro_info.replacement (i)) > 0 then
				     macro_info_p -> macro_info.replacement (i) =
				     macro_info_p -> macro_info.replacement (i) || " ";

				if paren_level > 0 then
				     macro_info_p -> macro_info.replacement (i) =
				     macro_info_p -> macro_info.replacement (i) || token;
			     end;

			end;

			else do;

			     leading_sign = "";

			     do while (token_type = Break); /* snarf all leading signs */
				if token = "+" then; /* nothing */
				else if token = "-"
				then if leading_sign = "-" then leading_sign = "+";
				     else leading_sign = "-";
				else do;
				     free macro_info_p -> macro_info in (my_area);
				     call generate_error ("""^a"" instead of macro argument.", token);
				end;

				call ge_parse_$get_token (token, token_type, effective_level);

			     end;

			     if leading_sign ^= ""
			     then if token_type ^= Number
				then call generate_error ("Arithmetic signs encountered before ""^a"".", token);


			     macro_info_p -> macro_info.replacement (i) = leading_sign || token;
			end;
		     end;


		     call ge_parse_$get_token (token, token_type, effective_level);
		     if token_type ^= Break then call generate_error ("Too many arguments to macro ""^a"".", macro.name (which));

		     call ge_parse_$backup;

		     macro_bits_p = addr (macro_def);
		     macro_bits_l = size (macro_def) * 36;
		     call graphic_manipulator_$examine_data (macro_nodes (n_macro_args + 1), 0, based_macro_bits, code);
		     if code ^= 0 then goto macro_error;

		     string = macro_def;
		     n_chars = length (macro_def);
		     call ge_parse_$push_macro (addr (string), n_chars, macro_info_p);

		     return;

		end setup_macro;

/* ------------------------- */

generate_element (1): generate_element (2): generate_element (3):
generate_element (4): generate_element (5):		/* all positional elements */
		coords = 0;
		code = 0;

		do i = 1 to 3 while (code = 0);
		     call get_float_number (coords (i), code);
		end;

		type = eff_type - 1;
		rvalue = graphic_manipulator_$create_position (type, coords (1), coords (2), coords (3), code);
		if code ^= 0 then goto internal_error;

		return;

/* ------------------------- */

get_float_number:	proc (num, code);

dcl  num float bin,
     i fixed bin,
     code fixed bin (35);

		     i = 1;
		     code = 0;

		     call ge_parse_$get_token (token, token_type, effective_level);

		     do while (token_type = Break);
			if token = "+" then;	/* do nothing */
			else if token = "-" then i = i * -1; /* reverse final sign */
			else goto unknown_sign;
			call ge_parse_$get_token (token, token_type, effective_level);
		     end;

		     if token_type ^= Number then do;
unknown_sign:		call ge_parse_$backup;	/* leave for next chump */
			code = -1;
			return;
		     end;

		     num = cv_float_ ((token), 0) * i;
		     return;

		end get_float_number;

/* ------------------------- */

generate_element (6):				/* the null element */

		rvalue = 0;
		type = Null;
		return;

generate_element (7):				/* text string */

dcl  alignment fixed bin,
     text_string char (200) varying;

dcl  alignment_abbrevs (9) char (12) varying initial
    ("ul", "uc", "ur", "l", "c", "r", "ll", "lc", "lr");

		call read_text_element (text_string, alignment);

/* ------------------------- */

read_text_element:	proc (text_string, alignment);

/* This internal subr reads the arguments to the text element and assembles them into something meaningful. */

dcl (text_string char (*) varying,
     alignment fixed bin) parameter;

		     alignment = Undefined;

		     call ge_parse_$get_token (text_string, token_type, effective_level);
		     if token_type = Break then call generate_error ("""^a"" not a text string.", text_string);

		     if substr (text_string, 1, 1) = """" /* it is quoted */
		     then text_string = substr (text_string, 2, length (text_string) - 2); /* strip quote marks */

		     call ge_parse_$get_token (token, token_type, effective_level);

		     if token_type = Break then do;	/* oops, no alignment given */
			call ge_parse_$backup;	/* didn't want it */
			alignment = 1;		/* default */
		     end;

		     else if token_type = Number then alignment = cv_dec_ ((token)); /* got a number */

		     else if token_type = Name	/* convert name to number */
		     then do j = 1 to hbound (Text_alignments, 1);
			if (alignment_abbrevs (j) = token |
			Text_alignments (j) = token) then do;
			     alignment = j;
			     i = 0; j = hbound (Text_alignments, 1) + 1;
			end;
		     end;

		     if (alignment < lbound (alignment_abbrevs, 1)
		     | alignment > hbound (alignment_abbrevs, 1)) /* out of bounds */
		     then alignment = Undefined;

		     if alignment = Undefined
		     then call generate_error ("""^a"" not a valid text alignment.", token);

		     return;
		end read_text_element;

/* ------------------------- */

		rvalue = graphic_manipulator_$create_text (alignment, length (text_string), (text_string), code);
		if code ^= 0 then goto internal_error;
		type = Text;
		return;

generate_element (8):				/* array */

		call make_list_or_array (Array);
		return;

generate_element (9):				/* list */

		call make_list_or_array (List);
		return;

/* ---------------------------- */

make_list_or_array:	proc (whatever);

dcl  whatever fixed bin;

		     call ge_parse_$get_token (token, token_type, effective_level);

		     if token ^= "(" then call generate_error ("""^a"" instead of ""("" after array/list.", token);

		     call perform_recursion;

		     call ge_parse_$get_token (token, token_type, effective_level);

		     if token ^= ")" then call generate_error ("""^a"" instead of "")"" after array/list.", token);

		     call scan_for_undefineds (stack (level).tuple_ptr);

		     if whatever = List
		     then rvalue = graphic_manipulator_$create_list (stack (level).tuple_ptr -> tuple.rvalue (*),
			stack (level).tuple_ptr -> tuple.n_elements, code);

		     else rvalue = graphic_manipulator_$create_array (stack (level).tuple_ptr -> tuple.rvalue (*),
			stack (level).tuple_ptr -> tuple.n_elements, code);

		     if code ^= 0 then call generate_error ("Internal error making explicit list/array.", "");

		     free stack (level).tuple_ptr -> tuple in (my_area);
		     stack.level = stack.level - 1;
		     effective_level = effective_level - 1;
		     type = whatever;

		     return;

		end make_list_or_array;

/* ---------------------------- */

generate_element (10):				/* intensity */

dcl  intensity fixed bin;

		intensity = 7;

		call ge_parse_$get_token (token, token_type, effective_level);

		if token_type = Number then do;
		     intensity = cv_dec_ ((token));
		     if intensity < 0 then goto bad_intensity;
		     if intensity > 7 then goto bad_intensity;
		end;

		else if token = "off" then intensity = 0;
		else if token = "full" then intensity = 7;
		else if token = "on" then intensity = 7;
		else do;				/* wasn't any */
bad_intensity:	     if token_type ^= Break then call generate_error ("Bad intensity level ""^a"".", token);
		     call ge_parse_$backup;
		     return;
		end;

		rvalue = graphic_manipulator_$create_mode (Intensity, intensity, code);
		if code ^= 0 then goto internal_error;
		type = Intensity;

		return;

generate_element (11):				/* linetype */

dcl  linetype fixed bin;

		linetype = -1;

		call ge_parse_$get_token (token, token_type, effective_level);

		if token_type = Number then do;
		     linetype = cv_dec_ ((token));
		     if linetype < lbound (Linetype_names, 1) then goto bad_linetype;
		     if linetype > hbound (Linetype_names, 1) then goto bad_linetype;
		end;

		else do i = lbound (Linetype_names, 1) to hbound (Linetype_names, 1);
		     if Linetype_names (i) = token then do;
			linetype = i;
			i = hbound (Linetype_names, 1);
		     end;
		end;

		if linetype = -1 then do;
bad_linetype:	     if token_type ^= Break then call generate_error ("Bad linetype ""^a"".", token);
		     call ge_parse_$backup;
		     linetype = 0;
		end;

		rvalue = graphic_manipulator_$create_mode (Linetype, linetype, code);
		if code ^= 0 then goto internal_error;
		type = Linetype;

		return;

generate_element (12):				/*  blink */

dcl  blink fixed bin;

		blink = -1;

		call ge_parse_$get_token (token, token_type, effective_level);

		if token_type = Number then do;
		     blink = cv_dec_ ((token));
		     if blink < 0 then goto bad_blink;
		     if blink > 1 then goto bad_blink;
		end;
		else if token = "off" then blink = 0;
		else if token = "on" then blink = 1;

		else do i = 1 to hbound (Blink_names, 1);
		     if Blink_names (i) = token then do;
			blink = i;
			i = hbound (Blink_names, 1);
		     end;
		end;

		if blink = -1 then do;
bad_blink:	     if token_type ^= Break then call generate_error ("Bad blink type ""^a"".", token);
		     call ge_parse_$backup;
		     blink = 1;
		end;

		rvalue = graphic_manipulator_$create_mode (Blink, blink, code);
		if code ^= 0 then goto internal_error;
		type = Blink;

		return;

generate_element (13):				/* sensitivity */

dcl  sensitivity fixed bin;

		sensitivity = -1;

		call ge_parse_$get_token (token, token_type, effective_level);

		if token_type = Number then do;
		     sensitivity = cv_dec_ ((token));
		     if sensitivity < 0 then goto bad_sensitivity;
		     if sensitivity > 1 then goto bad_sensitivity;
		end;

		else if token = "on" then sensitivity = 1;
		else if token = "off" then sensitivity = 0;

		else do i = 1 to hbound (Sensitivity_names, 1);
		     if Sensitivity_names (i) = token then do;
			sensitivity = i;
			i = hbound (Sensitivity_names, 1);
		     end;
		end;

		if sensitivity = -1 then do;
bad_sensitivity:	     if token_type ^= Break then call generate_error ("Bad sensitivity type ""^a"".", token);
		     call ge_parse_$backup;
		     sensitivity = 1;
		end;

		rvalue = graphic_manipulator_$create_mode (Sensitivity, sensitivity, code);
		if code ^= 0 then goto internal_error;
		type = Sensitivity;

		return;


generate_element (14):				/* rotation */

dcl  angles (3) float bin;

		code, angles = 0;

		do i = 1 to 3 while (code = 0);
		     call get_float_number (angles (i), code);
		end;
		rvalue = graphic_manipulator_$create_rotation (angles (1), angles (2), angles (3), code);
		if code ^= 0 then goto internal_error;
		type = Rotation;

		return;

generate_element (15):				/* scaling */

dcl  scales (3) float bin;

		code = 0;
		scales = 1;

		do i = 1 to 3 while (code = 0);
		     call get_float_number (scales (i), code);
		end;
		rvalue = graphic_manipulator_$create_scale (scales (1), scales (2), scales (3), code);
		if code ^= 0 then goto internal_error;
		type = Scaling;

		return;

generate_element (16):				/* datablock */

		call ge_parse_$get_token (token, token_type, effective_level);
		if token_type = Break
		then call generate_error ("Break ""^a"" instead of datablock contents.", token);

		if substr (token, 1, 1) = """"	/* was a quoted string */
		then token = substr (token, 2, length (token) - 2); /* strip quotes */

		macro_bits_p = addr (token);
		macro_bits_l = length (token) * 9 + 36; /* save length word and meaningful part */
		rvalue = graphic_manipulator_$create_data (macro_bits_l, based_macro_bits, code);
		if code ^= 0 then goto internal_error;
		type = Datablock;
		return;

generate_element (17):				/* color */

dcl  colors (3) fixed bin,
     which_color fixed bin,
     color_value fixed bin;

dcl (red initial (1),
     green initial (2),
     blue initial (3)) fixed bin static options (constant);

		colors = 0;

		do i = 1 to 3;			/* allow for 3 color specifications */

		     color_value = 63;		/* set to default */
		     call ge_parse_$get_token (token, token_type, effective_level);

		     if token_type = Break then do;
			if i = 1 then colors = 16;	/* no color specified, use default */
			goto end_color_loop;
		     end;

		     if token = "red" then which_color = red;
		     else if token = "blue" then which_color = blue;
		     else if token = "green" then which_color = green;
		     else call generate_error ("""^a"" not a defined color.", token);

		     call ge_parse_$get_token (token, token_type, effective_level);

		     if token_type = Break then i = 3;
		     else if token_type = Name	/* another color spec? */
		     then if i < 3			/* there can still be one more */
			then call ge_parse_$backup;	/* save it for later */
			else call generate_error ("Misplaced token ""^a"".", token); /* couldn't have been four color specs */
		     else if token_type = Number then do;
			color_value = cv_dec_ ((token));
			if color_value < 0 then
bad_color:		     call generate_error ("Bad color specification ""^a"".", token);
			if color_value > 63 then goto bad_color;
		     end;

		     else goto bad_color;

		     colors (which_color) = color_value;
		end;

end_color_loop:
		if token_type = Break then call ge_parse_$backup;

		rvalue = graphic_manipulator_$create_color (colors (1), colors (2), colors (3), code);
		if code ^= 0 then goto internal_error;
		type = Color;
		return;

generate_sysmacro (3):				/* circle builtin */

dcl  sysmacro_value fixed bin (18);

		coords = 0;
		code = 0;

		do i = 1 to 2 while (code = 0);
		     call get_float_number (coords (i), code);
		end;

		sysmacro_value = graphic_macros_$circle (coords (1), coords (2), code);
		if code ^= 0 then goto internal_error;

		rvalue = make_sysmacro_array (sysmacro_value, "circle", "", 0, 0, coords, 2, "");
		return;

/* --------------- */

make_sysmacro_array: proc (value, name, text_string, alignment, n_text_args, numeric_args, n_numeric_args, table_name)
			returns (fixed bin (18));

dcl (value fixed bin (18),
     name char (12),
     text_string char (*) varying,
     alignment fixed bin,
     n_text_args fixed bin,
     numeric_args (*) float bin,
     n_numeric_args fixed bin,
     table_name char (32)) parameter;

dcl  sysmacro_data_string char (128) varying,
     sysmacro_data_string_len fixed bin,
    (sysmacro_subarray (2), sysmacro_value, return_val) fixed bin (18);

dcl  unique_chars_ ext entry (bit (*)) returns (char (15));

		     if n_text_args ^= 0 then
			call ioa_$rsnnl ("^a ^a ^a^[ ^f^2s^; ^f ^f^s^] ^a",
			sysmacro_data_string, sysmacro_data_string_len, name, text_string,
			Text_alignments (alignment), n_numeric_args, numeric_args, table_name);

		     else call ioa_$rsnnl ("^a^v( ^f^)", sysmacro_data_string, sysmacro_data_string_len,
			name, n_numeric_args, numeric_args);

		     sysmacro_subarray (1) = graphic_manipulator_$create_data
			(length (unspec (addr (sysmacro_data_string) -> based_varying_string)),
			unspec (addr (sysmacro_data_string) -> based_varying_string), code);
		     if code ^= 0 then goto internal_error;
		     sysmacro_subarray (2) = value;

		     sysmacro_value = graphic_manipulator_$create_array (sysmacro_subarray, 2, code);
		     if code ^= 0 then goto internal_error;

		     return_val = graphic_manipulator_$assign_name ("!sysmacro." || unique_chars_ (""b),
			sysmacro_value, code);
		     if code ^= 0 then goto internal_error;

		     return (return_val);
		end make_sysmacro_array;

/* --------------- */

generate_sysmacro (2):				/* box builtin */

		coords = 0;

		do i = 1 to 2 while (code = 0);
		     call get_float_number (coords (i), code);
		end;

		if code ^= 0 then call generate_error ("Not enough arguments to ""box"".", "");

		sysmacro_value = graphic_macros_$box (coords (1), coords (2), code);
		if code ^= 0 then goto internal_error;

		rvalue = make_sysmacro_array (sysmacro_value, "box", "", 0, 0, coords, 2, "");
		return;

generate_sysmacro (1):				/* arc builtin */

		coords = 0;

		do i = 1 to 3 while (code = 0);
		     call get_float_number (coords (i), code);
		end;

		if code ^= 0 then call generate_error ("Not enough arguments to ""arc"".", "");

		sysmacro_value = graphic_macros_$arc (coords (1), coords (2), coords (3) /* really the fraction */, code);
		if code ^= 0 then goto internal_error;

		rvalue = make_sysmacro_array (sysmacro_value, "arc", "", 0, 0, coords, 3, "");
		return;

generate_sysmacro (4):				/* ellipse builtin */

dcl  ellipse_data (5) float bin;

		ellipse_data (*) = 0;

		do i = 1 to 5 while (code = 0);
		     call get_float_number (ellipse_data (i), code);
		end;

		if i < 4 then call generate_error ("Not enough arguments to ""ellipse"".", "");
		if code ^= 0 then ellipse_data (5) = 1; /* whole ellipse */

		sysmacro_value = graphic_macros_$ellipse (ellipse_data (1), ellipse_data (2), ellipse_data (3),
		     fixed (ellipse_data (4)), ellipse_data (5), code);
		if code ^= 0 then goto internal_error;

		rvalue = make_sysmacro_array (sysmacro_value, "ellipse", "", 0, 0, ellipse_data, 5, "");
		return;

generate_sysmacro (5):				/* polygon builtin */

		coords = 0;

		do i = 1 to 3 while (code = 0);
		     call get_float_number (coords (i), code);
		end;

		if code ^= 0 then call generate_error ("Not enough arguments to ""polygon"".", "");

		sysmacro_value = graphic_macros_$polygon (coords (1), coords (2), fixed (coords (3)), code);
		if code ^= 0 then goto internal_error;

		rvalue = make_sysmacro_array (sysmacro_value, "polygon", "", 0, 0, coords, 3, "");
		return;

generate_sysmacro (6):				/* varying_text */

dcl  default_text_size (3) float bin static options (constant) initial (18.380e0, 20e0, 0e0),
     temp_dirname char (168);

		call read_text_element (text_string, alignment);

		coords (*) = default_text_size (*);

		do i = 1 to 2 while (code = 0);
		     call get_float_number (coords (i), code);
		end;

		if code ^= 0 then
		     if i = 3 then coords (2) = coords (1); /* gave width only */
		temp_dirname = "";

		call ge_parse_$get_token (token, token_type, effective_level);

		if token_type ^= Name then do;

		     call ge_parse_$backup;

		     if environment.cur_char_table.ename ^= environment.default_char_table.ename then do;
			token = environment.default_char_table.ename;
			temp_dirname = environment.default_char_table.dirname;
			token_type = Name;
		     end;
		end;

		if token_type = Name then do;		/* a graphic char table was specified */
		     if environment.cur_char_table.ename ^= token then do;
			call graphic_chars_$set_table (temp_dirname, (token), code);
			if code ^= 0 then call generate_error ("Undefined character table ""^a"".", token);
			call graphic_chars_$get_table (environment.cur_char_table.dirname, environment.cur_char_table.ename);
		     end;
		end;

		sysmacro_value = graphic_chars_ ((text_string), alignment, coords (1), coords (2), code);
		if code ^= 0 then goto internal_error;
						/* now double all quotes so replay description looks right. */
		do i = 1 by 1 while (i < length (text_string));
		     if substr (text_string, i, 1) = """" then do;
			text_string = substr (text_string, 1, i) || """" || substr (text_string, i+1);
			i = i + 1;
		     end;
		end;

		text_string = """" || text_string || """";

		rvalue = make_sysmacro_array (sysmacro_value, "varying_text", text_string, alignment,
		     2, coords,
		     2, environment.cur_char_table.ename);
		return;

	     end get_values;

perform_assignment: proc;

dcl  j fixed bin;

dcl (to_ptr, from_ptr) pointer;

dcl  symbol_name char (32),
     symbol_len fixed bin;

		from_ptr = stack (level).tuple_ptr;
		to_ptr = stack (level-1).tuple_ptr;

		if debugsw then do;
		     put list ("Beginning assignment;") skip;
		     put list ("From  ");
		     put list /* data */ (from_ptr -> tuple) skip (2);
		     put list ("To     ");
		     put list /* data */ (to_ptr -> tuple) skip (4);
		end;

		if from_ptr -> tuple.n_elements = 1
		then if to_ptr -> tuple.n_elements > 1
		     then do;

			cur_elements = to_ptr -> tuple.n_elements;
			allocate tuple in (my_area);

			do i = 1 to cur_elements;
			     tuple_p -> tuple.element (i) = from_ptr -> tuple.element (1);
			end;

			free from_ptr -> tuple in (my_area);

			from_ptr, stack (level).tuple_ptr = tuple_p;
		     end;

		     else;

		else if from_ptr -> tuple.n_elements > 1
		then if to_ptr -> tuple.n_elements = 1
		     then do;

			call scan_for_undefineds (from_ptr);

			cur_elements = 1;

			allocate tuple in (my_area);

			tuple_p -> tuple (1).rvalue = graphic_manipulator_$create_array
			     (from_ptr -> tuple.rvalue (*), from_ptr -> tuple.n_elements, code);
			if code ^= 0 then call generate_error ("Internal error generating implicit array.", "");
			tuple_p -> tuple (1).type = Array;

			free from_ptr -> tuple in (my_area);

			from_ptr, stack (level).tuple_ptr = tuple_p;
		     end;

		     else;

		if from_ptr -> tuple.n_elements ^= to_ptr -> tuple.n_elements
		then call generate_error ("Wrong number of elements assigned to ""^a"".", based_name);

		do i = 1 to from_ptr -> tuple.n_elements;

		     name_ptr = addr (to_ptr -> tuple.name (i));

		     if from_ptr -> tuple.rvalue (i) = Undefined
		     then call generate_error ("""^a"" undefined.", from_ptr -> tuple.name (i));

		     if to_ptr -> tuple.lvalue (i) = Illegal
		     then call generate_error ("""^a"" may not be assigned to.", based_name);

		     if to_ptr -> tuple.offset (i) ^= Undefined then do;
			j = graphic_manipulator_$replace_element (to_ptr -> tuple.lvalue (i),
			     to_ptr -> tuple.offset (i), from_ptr -> tuple.rvalue (i), code);
			if code ^= 0 then call generate_error ("Assigning to ""^a"".", based_name);
			to_ptr -> tuple.rvalue (i) = from_ptr -> tuple.rvalue (i);
			to_ptr -> tuple.offset (i) = Undefined;
		     end;

		     else if to_ptr -> tuple.type (i) = Symbol then do;
			if from_ptr -> tuple.type (i) = Symbol
			then if from_ptr -> tuple.rvalue (i) = to_ptr -> tuple.rvalue (i)
			     then call generate_error ("Recursive assignment of ""^a"".", based_name);

			if to_ptr -> tuple.lvalue (i) = Undefined then do;
			     symbol_name = to_ptr -> tuple.name (i);
			     symbol_len = length (to_ptr -> tuple.name (i));
			end;

			else do;			/* this is a symbol, but gotten to via a qualified exprn. */
						/* therefore, tuple.name (i) contains a Q.E., NOT the */
						/* real name of the symbol.  So we determine it. */
			     call graphic_manipulator_$examine_symbol (to_ptr -> tuple.lvalue (i), 0,
				symbol_len, symbol_name, code);
			     if code ^= 0 then call generate_error ("Internal error getting true name for ""^a"".",
				to_ptr -> tuple.name (i));

			     do j = 1 to n_symbols while (symbol_name ^= symbol (j).name);
			     end;

			     if j > n_symbols then call generate_error ("Internal error:  symbol ""^a"" not found.", (symbol_name));
			     to_ptr -> tuple.table_idx (i) = j;
			end;

			to_ptr -> tuple.rvalue (i) = graphic_manipulator_$assign_name
			     (substr (symbol_name, 1, symbol_len), from_ptr -> tuple (i).rvalue, code);
			if code ^= 0 then call generate_error ("Assigning to symbol ""^a"".", based_name);
		     end;

		     else do;			/* terminal items, or whole arrays */
			call graphic_manipulator_$replace_node (to_ptr -> tuple.rvalue (i),
			     from_ptr -> tuple.rvalue (i), code);
			if code ^= 0 then call generate_error ("Replacing node ""^a"".", based_name);
		     end;				/* No need to assign to rvalues or lvalues */

		     if to_ptr -> tuple.table_idx (i) = Undefined then do;
			to_ptr -> tuple.table_idx (i), j, n_symbols = n_symbols + 1;
			if j > cur_max_symbols then do;
			     temp_p = sym_p;	/* prepare to extend symbol area */
			     max_symbols = cur_max_symbols + 50;
			     allocate symbols in (my_area);

			     do k = 1 to temp_p -> n_symbols - 1;
				sym_p -> symbol (k) = temp_p -> symbol (k);
			     end;

			     sym_p -> n_symbols = temp_p -> n_symbols;

			     environment.sym_p = sym_p;

			     free temp_p -> symbols in (my_area);
			end;

			symbol (j).name = to_ptr -> tuple.name (i);
		     end;

		     else j = to_ptr -> tuple.table_idx (i);

		     if j ^= Illegal then symbol (j).node_value = to_ptr -> tuple.rvalue (i);

		end;

		if debugsw then do;
		     put list ("Becomes ");
		     put list /* data */ (to_ptr -> tuple);
		     put skip (6);
		end;

		free from_ptr -> tuple in (my_area);

		stack.level = stack.level - 1;
		effective_level = effective_level - 1;

		return;

	     end perform_assignment;

scan_for_undefineds: proc (tup_ptr);

/* This internal procedure scans a tuple to see if any of its elements are undefined.  If they
   are, it generates an error.  It is used in various places just before making arrays or lists
   out of things, to make sure the data is good. */

dcl  tup_ptr pointer;

dcl  i fixed bin;

		do i = 1 to tup_ptr -> tuple.n_elements;
		     if tup_ptr -> tuple.element (i).rvalue = Undefined
		     then call generate_error ("""^a"" undefined.", tup_ptr -> tuple.element (i).name);
		end;

		return;
	     end scan_for_undefineds;


generate_error: proc (reason, offender);

dcl  reason char (*) parameter,
     offender char (*) varying parameter;

		if code = 0 then code = -1;
		call ioa_$rsnnl (reason, environment.error_message, 0, offender);
		goto return_hard;
	     end generate_error;

check_for_undefineds: entry (environment_ptr, code);

dcl  internal_stack_inconsistent condition;

	     call initialize_ptrs;

	     if stack.level ^= 1 then signal internal_stack_inconsistent;

	     call scan_for_undefineds (stack.tuple_ptr (1));
	     return;

	end tuple_evaluator_recur;

return_hard: return;



%include ge_macro_info;

%include gm_entry_dcls;

%include gmc_entry_dcls;

%include gch_entry_dcls;

%include graphic_etypes;

%include graphic_enames;

flip:	entry;

dcl  debugsw bit (1) aligned static initial (""b);

	debugsw = ^debugsw;
	return;

     end ge_eval_;
