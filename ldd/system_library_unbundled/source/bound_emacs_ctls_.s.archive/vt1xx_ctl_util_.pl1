/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1978 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* Utility package used by Emacs VT1XX terminal CTL packages */

/* Created:  11 March 1981 by G. Palter */


/****^  HISTORY COMMENTS:
  1) change(88-08-14,GDixon), approve(88-09-20,MCR8002), audit(88-09-21,Blair),
     install(88-10-07,MR12.2-1141):
     Added $get_screen_size entrypoint for use in versaterm.ctl.lisp.
                                                   END HISTORY COMMENTS */


vt1xx_ctl_util_:
     procedure ();

	return;					/* not an entry */


dcl  code fixed bin(35) auto;
dcl  tty_mode_string char(512);
	
dcl (addr, null) builtin;

dcl  iox_$user_io pointer external;

dcl  e_pl1_$get_emacs_data_ptr entry() returns(ptr);
dcl  iox_$modes entry (pointer, character (*), character (*), fixed binary (35));
dcl  mode_string_$get_mode entry (char(*), char(*), ptr, fixed bin(35));

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* Enable output flow control:  Emacs resets "oflow" mode; however, for certain VT1XX terminal types, the terminal is
   assumed to be running with XON/XOFF enabled.  For these terminals, it is necessary to turn "oflow" mode back on */

re_enable_oflow:
     entry ();

	call iox_$modes (iox_$user_io, "oflow", (""), (0));
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	 */
/*										 */
/* get_screen_size:									 */
/*    This entrypoint is called by versaterm.ctl to extract the current line and page lengths from	 */
/*    the command line values given in the emacs command, or else from the current values given in	 */
/*    the tty_ mode string.								 */
/*										 */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	 */

get_screen_size:
     entry (P_ll, P_pl);
     
dcl P_ll				fixed bin parm;	/* Screen line length. (Out)		 */
dcl P_pl				fixed bin parm;	/* Screen page length. (Out)		 */

dcl DEFAULT_LINE_LEN		fixed bin int static options(constant) init(79);
dcl DEFAULT_PAGE_LEN		fixed bin int static options(constant) init(24);

	emacs_data_ptr = e_pl1_$get_emacs_data_ptr();	/* Get pointer to emacs command line args*/
	if emacs_data_ptr = null then do;		/* If not being called from emacs ctl,	 */
	   P_ll = DEFAULT_LINE_LEN;			/*  then give up and return default 	 */
	   P_pl = DEFAULT_PAGE_LEN;			/*  values.			 */
	   end;

	else do;					/* If being called from emacs ctl...	 */
	   if emacs_data.arguments.ll ^= -1 then	/* User typed: emacs -ll NN		 */
	      P_ll = emacs_data.arguments.ll;		/*  so use the value he typed.	 */
	   else do;				/* Otherwise, extract llNN mode from	 */
	      MV.version = mode_value_version_3;	/*  tty_ mode string and return that.	 */
	      tty_mode_string = emacs_data.tty_modes;
	      call mode_string_$get_mode (tty_mode_string, "ll", addr(MV), code);
	      if code ^= 0 then
	         P_ll = DEFAULT_LINE_LEN;
	      else do;
	         if MV.flags.numeric_valuep then
		  P_ll = MV.numeric_value;
	         else
		  P_ll = DEFAULT_LINE_LEN;
	         end;
	      end;

	   if emacs_data.arguments.pl ^= -1 then	/* User typed: emacs -pl NN		 */
	      P_pl = emacs_data.arguments.pl;		/*  so use the value he typed.	 */
	   else do;				/* Otherwise, extract plNN mode from	 */
	      MV.version = mode_value_version_3;	/*  tty_ mode string and return that.	 */
	      tty_mode_string = emacs_data.tty_modes;
	      call mode_string_$get_mode (tty_mode_string, "pl", addr(MV), code);
	      if code ^= 0 then
	         P_pl = DEFAULT_PAGE_LEN;
	      else do;
	         if MV.flags.numeric_valuep then
		  P_pl = MV.numeric_value + 1;	/* Add 1 to tty_ mode because tty_ 	 */
	         else				/*  reduces actual screen size by 1 to	 */
		  P_pl = DEFAULT_PAGE_LEN;		/*  leave room for EOP prompt.  Emacs	 */
	         end;				/*  doesn't need an EOP line so we can	 */
	      end;				/*  add back that line.		 */
	   end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

%include emacs_data;

%include mode_string_info;

dcl  1 MV				aligned like mode_value auto;

     end vt1xx_ctl_util_;
