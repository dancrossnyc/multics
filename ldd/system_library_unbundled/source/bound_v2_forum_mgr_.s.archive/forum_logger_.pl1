/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1984 *
        *                                                            *
        ************************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     CHange to send mail instead of logging.
                                                   END HISTORY COMMENTS */


forum_logger_:
     proc options (variable);

declare	any_other_call		bit (1) aligned,
	arg_ptr			ptr,
	arg_len			fixed bin (21),
	based_code		fixed bin (35) based (arg_ptr),
	based_caller		char (arg_len) based (arg_ptr),
	caller			char (32),
	error			char (100) aligned,
	message			char (512),
	message_len		fixed bin (21),
	user_ring			fixed bin (3),
	line			char (512),
	progname			char (32);

declare	1 ci			aligned like condition_info;
declare	(addr, null, string, substr)	builtin,
	(cleanup, any_other)	condition;

declare	convert_status_code_	entry (fixed bin (35), char (8) aligned, char (100) aligned),
	cu_$arg_list_ptr		entry returns (ptr),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	find_condition_info_	entry (ptr, ptr, fixed bin (35)),
	get_group_id_		entry returns (char (32)),
	get_ring_			entry returns (fixed bin (3)),
	hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
	hcs_$level_get		entry (fixed bin (3)),
	hcs_$level_set		entry (fixed bin (3)),
	ioa_$rsnnl		entry options (variable),
	ioa_$general_rs		entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
				bit (1) aligned),
	send_mail_		entry (char(*), char(*), ptr, fixed bin(35));

declare   forum_data_$log_destination	char (32) external;
%page;
%include send_mail_info;
%page;
%include condition_info;
%page;
	any_other_call = ""b;
	goto JOIN;

forum_logger_$any_other:
     entry options (variable);

	any_other_call = "1"b;

JOIN:	if forum_data_$log_destination = "" then return;

	call hcs_$level_get (user_ring);
	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (get_ring_ ());

	on any_other goto PUNT; /* If we get an error ourselves, lets not recurse. */

	if any_other_call then do;
	     ci.version = condition_info_version_1;
	     call find_condition_info_ (null (), addr (ci), (0));
	     error = ci.condition_name;
	     call hcs_$fs_get_path_name (ci.user_loc_ptr, (""), (0), progname, (0));
	end;
	else do;
	     call cu_$arg_ptr (1, arg_ptr, (0), (0));
	     if based_code ^= 0 then call convert_status_code_ (based_code, "", error);
	     else error = "";
	end;

	call cu_$arg_ptr (2, arg_ptr, arg_len, (0));
	caller = based_caller;

	call ioa_$general_rs (cu_$arg_list_ptr (), 3, 4, message, message_len, "0"b, "0"b);
	message = substr (message, 1, message_len);

	call ioa_$rsnnl ("^a (^a): ^[^a ^;^s^]^[fault at ^p (^a). ^;^2s^]^a", line, message_len, caller, get_group_id_ (),
	     error ^= "", error, any_other_call, ci.user_loc_ptr, progname, message);

	send_mail_info.version = 2;
	send_mail_info.sent_from = "forum_logger_";
	string (send_mail_info.switches) = ""b;
	send_mail_info.wakeup, send_mail_info.always_add = "1"b;
	
	call send_mail_ (forum_data_$log_destination, substr (line, 1, message_len), addr (send_mail_info), (0));

PUNT:
	call hcs_$level_set (user_ring);
	return;
     end forum_logger_;
