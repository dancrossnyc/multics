/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1984 *
        *                                                            *
        ************************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Bug fixes to set_switch including TR19352, use real get_highest_seen
                                                   END HISTORY COMMENTS */


/* format: style3,ifthen,ifthendo,ifthenstmt,^indnoniterdo,^inditerdo,idind30 */

forum_open_mgr_$open:
     proc (P_directory, P_name, P_forum_idx, P_status);

/* Version 2 Forum -
	This module opens and closes meetings, and contains utility
  information-retrieving routines not associated with individual
  transactions.

  Jay Pattin 1/1/83
  Modified 09/13/83 Jeffrey I. Schiller so forum_info correctly handles
   expunged transactions
  Audit changes, J. Spencer Love 10/05/84 */

declare	(
	P_access_name		char (*),
	P_access_time		fixed bin (71),
	P_area_ptr		ptr,
	P_chairman		char (*),
	P_directory		char (*),
	P_event_channel		fixed bin (71),
	P_forum_idx		fixed bin,
	P_forum_info_ptr		ptr,
	P_name			char (*),
	P_open_data_ptr		ptr,
	P_status			fixed bin (35),
	P_switch_name		char (*),
	P_switch_setting		bit (1) aligned,
	P_user_list_ptr		ptr,
	P_user_name		char (*),
	P_xacl			bit (36) aligned
	)			parameter;

declare	attendee_offset		bit (18) aligned,
	directory			char (168),
	egress			label variable,
	forum_idx			fixed bin,
	idx			fixed bin,
	MAX_ATTENDEES		fixed bin static options (constant) initial (6000),
	me			char (16) static options (constant) init ("forum_open_mgr_"),
	name			char (32),
	privileged		bit (1) aligned,
	P_area			area based (P_area_ptr),
	status			fixed bin (35),
	switch			fixed bin,
	switch_name		char (32),
	switch_setting		bit (1) aligned,
	system_free_area		area based (get_system_free_area_ ()),
	uid			bit (36) aligned,
	unseen_ptr		ptr,
	user_ring			fixed bin (3),
	xacl			bit (36) aligned;

declare	static_init		bit (1) aligned static init ("0"b),
	first_open_data_ptr		ptr static init (null ()),
	person_id			char (22) static,
	project_id		char (9) static,
	process_id		bit (36) aligned static,
	inner_ring		fixed bin (3) static,
	lock_id			bit (36) aligned static;

declare	1 fmi			aligned like forum_info,
	1 one_acl			aligned,
	  2 access_name		char (32),
	  2 modes			bit (36),
	  2 xmodes		bit (36),
	  2 code			fixed bin (35);

declare	expand_pathname_		entry (char (*), char (*), char (*), fixed bin (35)),
	forum_logger_		entry options (variable),
	forum_logger_$any_other	entry options (variable),
	forum_seg_mgr_$initiate	entry (char (*), char (*), bit (1) aligned, ptr, ptr, bit (36) aligned,
				fixed bin (35)),
	forum_seg_mgr_$lock		entry (ptr, fixed bin (35)),
	forum_seg_mgr_$terminate	entry (ptr, ptr),
	forum_seg_mgr_$terminate_all	entry (ptr),
	forum_seg_mgr_$unlock	entry (ptr),
	forum_space_mgr_$allocate_bit_map
				entry (ptr, ptr, fixed bin, ptr, fixed bin (35)),
	forum_space_mgr_$find_attendee
				entry (ptr, char (*), ptr, fixed bin (35)),
	forum_space_mgr_$get_attendee_slot
				entry (ptr, char (*), ptr, fixed bin (35)),
	forum_space_mgr_$get_highest_seen
				entry (ptr, ptr, bit (1) aligned, fixed bin, ptr, fixed bin (35)),
	get_lock_id_		entry returns (bit (36) aligned),
	get_process_id_		entry returns (bit (36) aligned),
	get_ring_			entry returns (fixed bin (3)),
	get_system_free_area_	entry returns (ptr),
	hcs_$add_acl_entries	entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
	hcs_$fs_get_access_modes	entry (ptr, bit (36) aligned, bit (36) aligned, fixed bin (35)),
	hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
	hcs_$get_safety_sw_seg	entry (ptr, bit (1) aligned, fixed bin (35)),
	hcs_$set_safety_sw_seg	entry (ptr, bit (1) aligned, fixed bin (35)),
	hcs_$get_uid_seg		entry (ptr, bit (36) aligned, fixed bin (35)),
	hcs_$get_user_access_modes	entry (char (*), char (*), char (*), fixed bin, bit (36) aligned,
				bit (36) aligned, fixed bin (35)),
	hcs_$level_get		entry (fixed bin (3)),
	hcs_$level_set		entry (fixed bin (3)),
	pathname_			entry (char (*), char (*)) returns (char (168)),
	set_lock_$lock		entry (bit (36) aligned, fixed bin, fixed bin (35)),
	user_info_$login_data	entry (char (*), char (*), char (*), fixed bin, fixed bin, fixed bin,
				fixed bin (71), char (*));

declare	(
	error_table_$bad_arg,
	error_table_$incorrect_access,
	error_table_$invalidsegno,
	error_table_$lock_wait_time_exceeded,
	error_table_$locked_by_this_process,
	error_table_$moderr,
	error_table_$noalloc,
	error_table_$null_info_ptr,
	error_table_$unimplemented_version,
	forum_et_$anon_chairman,
	forum_et_$cant_stop_msg_admin,
	forum_et_$cant_stop_msg_site,
	forum_et_$chairman_only,
	forum_et_$forum_deleted,
	forum_et_$invalid_forum_idx,
	forum_et_$invalid_switch_name,
	forum_et_$meeting_adjourned,
	forum_et_$not_eligible,
	forum_et_$not_user_switch,
	forum_et_$switch_not_changed,
	forum_et_$unexpected_fault,
	forum_et_$you_twit
	)			fixed bin (35) external static;

declare	(
	forum_data_$print_eligibility_messages,
	forum_data_$chairman_override
	)			bit (1) aligned external;

declare	(addr, after, before, clock, index, length, maxlength, null, ptr, rtrim, unspec)
				builtin,
	(any_other, area, cleanup, no_write_permission)
				condition;

declare	(
	SAFETY_SWITCH		init (1),
	MAX_STORAGE_SWITCH		init (1),
	ADJ_SWITCH		init (2),
	EMSG_SWITCH		init (3),
	DELETED_SWITCH		init (4),
	MAX_CM_SWITCH		init (4),
	PART_SWITCH		init (5),
	NOTIFY_SWITCH		init (6),
	CMSG_SWITCH		init (7),
	ACCESS_SWITCH		init (8)
	)			fixed bin internal static options (constant);
%page;
%include forum_structures;
%page;
%include forum_open_data;
%page;
%include forum_info;
%page;
%include forum_user_list;
%page;
%include access_mode_values;
%page;
/* forum_open_mgr_$open:
     proc (P_directory, P_name, P_forum_idx, P_status); */

	call initialize (OPEN_EXIT);

	directory = P_directory;
	name = P_name;

	on cleanup call close_meeting ();
	on any_other
	     begin;
		revert any_other;
		call forum_logger_$any_other (0, me, "Opening ^a>^a.", directory, name);
		call error (forum_et_$unexpected_fault);
	     end;

	call forum_seg_mgr_$initiate (directory, name, "1"b, attendee_seg_ptr, transaction_seg_ptr, xacl, status);
	if status ^= 0 then call error (status);
	if xacl = N_ACCESS then call error (forum_et_$not_eligible);

	call open_meeting ();

	if attendee_seg.adjourned & xacl ^= RWC_XACL then call error (forum_et_$meeting_adjourned);

	call forum_space_mgr_$get_attendee_slot (attendee_seg_ptr, person_id, attendee_ptr, status);
	if status ^= 0 then call error (status);

	open_data.attendee_ptr = attendee_ptr;
	open_data.bit_map_ptr = ptr (attendee_seg_ptr, attendee.bit_map_offset);

	call fill_attendee_slot ();
	attendee.participating = "1"b;		/* only set these on opens */
	attendee.deleted = "0"b;

	call forum_seg_mgr_$unlock (attendee_seg_ptr);
	P_forum_idx = open_data.forum_idx;
	P_status = 0;
	return;

OPEN_EXIT:
	call close_meeting ();
	P_forum_idx = 0;
	P_status = status;
	return;
%page;
open_meeting:
     proc ();

	call hcs_$get_uid_seg (attendee_seg_ptr, uid, status);
	if status ^= 0 then call error (status);

	do open_data_ptr = first_open_data_ptr repeat open_data.next_open_data_ptr while (open_data_ptr ^= null ());
	     if open_data.forum_uid = uid then do;
		call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);
		attendee_seg_ptr = open_data.attendee_seg_ptr;
		transaction_seg_ptr = open_data.transaction_seg_ptr;
		open_data.open_count = open_data.open_count + 1;
		return;
	     end;
	end;

	on area call error (error_table_$noalloc);
	allocate open_data in (system_free_area);
	revert area;

	open_data.forum_name = rtrim (directory) || ">" || name;
	open_data.forum_uid = uid;
	open_data.attendee_seg_ptr = attendee_seg_ptr;
	open_data.transaction_seg_ptr = transaction_seg_ptr;
	open_data.proceedings_ptrs (*) = null ();
	open_data.attendee_ptr = null ();
	open_data.bit_map_ptr = null ();
	open_data.open_count = 1;
	open_data.invalid = ""b;

	open_data.prev_open_data_ptr = null ();
	open_data.next_open_data_ptr = first_open_data_ptr;

	if first_open_data_ptr = null () then
	     open_data.forum_idx = -1;
	else do;
	     open_data.forum_idx = first_open_data_ptr -> open_data.forum_idx - 1;
	     first_open_data_ptr -> open_data.prev_open_data_ptr = open_data_ptr;
	end;

	first_open_data_ptr = open_data_ptr;

	return;
     end open_meeting;
%page;
fill_attendee_slot:
     proc ();

	if attendee.person_id ^= person_id then do;
	     call forum_space_mgr_$find_attendee (attendee_seg_ptr, person_id, attendee_ptr, status);
	     if status ^= 0 then call error (status);
	     open_data.attendee_ptr = attendee_ptr;
	end;

	if attendee.bit_map_offset = ""b then do;
	     call forum_space_mgr_$allocate_bit_map (open_data_ptr, attendee_ptr, 1, bit_map_ptr, status);
	     if status ^= 0 then call error (status);
	     open_data.bit_map_ptr = bit_map_ptr;
	end;

	bit_map_ptr = open_data.bit_map_ptr;
	if bit_map.attendee_uid ^= attendee.attendee_uid then
						/* In case it moved on us */
	     bit_map_ptr, open_data.bit_map_ptr = ptr (attendee_seg_ptr, attendee.bit_map_offset);

	attendee.last_time_attended = clock ();
	attendee.project_id = project_id;
	attendee.attending = "1"b;
	attendee.process_id = process_id;
	attendee.lock_id = lock_id;
	attendee.xacl = xacl;

	return;
     end fill_attendee_slot;
%page;
forum_open_mgr_$close:
     entry (P_forum_idx, P_status);

	call initialize (CLOSE_EXIT);

	call lookup_forum_idx ("1"b);

	call fill_attendee_slot ();

	P_forum_idx = 0;
	call close_meeting ();

	P_status = 0;
	return;

CLOSE_EXIT:
	call forum_seg_mgr_$unlock (attendee_seg_ptr);
	P_status = status;
	return;
%page;
close_meeting:
     proc ();

	if open_data_ptr ^= null () then do;
	     open_data.open_count = open_data.open_count - 1;
	     if open_data.open_count > 0 then do;
		call forum_seg_mgr_$unlock (attendee_seg_ptr);
		return;
	     end;

	     if attendee_ptr ^= null () then do;
		attendee.attending = "0"b;
		attendee.event_channel = 0;
	     end;

	     if first_open_data_ptr = open_data_ptr then first_open_data_ptr = open_data.next_open_data_ptr;

	     if open_data.prev_open_data_ptr ^= null () then
		open_data.prev_open_data_ptr -> open_data.next_open_data_ptr = open_data.next_open_data_ptr;
	     if open_data.next_open_data_ptr ^= null () then
		open_data.next_open_data_ptr -> open_data.prev_open_data_ptr = open_data.prev_open_data_ptr;

	     call forum_seg_mgr_$unlock (attendee_seg_ptr);

	     call forum_seg_mgr_$terminate_all (open_data_ptr);

	     free open_data;
	end;
	else call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);

     end close_meeting;
%page;
forum_open_mgr_$lookup_forum_idx:
     entry (P_forum_idx, P_open_data_ptr, P_xacl, P_status);

	call initialize (LOOKUP_EXIT);

	call lookup_forum_idx ("0"b);

	call fill_attendee_slot ();

	P_open_data_ptr = open_data_ptr;
	P_xacl = xacl;
	P_status = 0;
	return;

LOOKUP_EXIT:
	P_open_data_ptr = null ();
	P_xacl = ""b;
	P_status = status;
	return;

lookup_forum_idx:
     proc (null_access_ok);

declare	null_access_ok		bit (1) aligned;

	forum_idx = P_forum_idx;

	if forum_idx > -1 then call error (forum_et_$invalid_forum_idx);

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	do open_data_ptr = first_open_data_ptr repeat (open_data.next_open_data_ptr) while (open_data_ptr ^= null ());
	     if open_data.forum_idx = forum_idx then do;
		call hcs_$get_uid_seg (open_data.attendee_seg_ptr, uid, status);
		if status ^= 0 then
		     if status = error_table_$invalidsegno then
			call error (forum_et_$forum_deleted);
		     else call error (status);

		if uid ^= open_data.forum_uid then call error (forum_et_$forum_deleted);

		attendee_seg_ptr = open_data.attendee_seg_ptr;
		transaction_seg_ptr = open_data.transaction_seg_ptr;
		attendee_ptr = open_data.attendee_ptr;

		call hcs_$fs_get_access_modes (attendee_seg_ptr, ""b, xacl, status);
		if status ^= 0 then call error (status);

		if xacl = N_ACCESS & ^null_access_ok then
						/* Somebody stole our access */
		     call error (forum_et_$not_eligible);

		call forum_seg_mgr_$lock (attendee_seg_ptr, status);
		if status ^= 0 then call error (status);

		call hcs_$level_set (user_ring);
		return;
	     end;
	end;

	call error (forum_et_$invalid_forum_idx);

	return;
     end lookup_forum_idx;
%page;
forum_open_mgr_$get_switch:
     entry (P_directory, P_name, P_user_name, P_switch_name, P_switch_setting, P_status);

	call initialize (SET_SWITCH_EXIT);

	on cleanup call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);

	directory = P_directory;
	name = P_name;
	call forum_seg_mgr_$initiate (directory, name, "1"b, attendee_seg_ptr, transaction_seg_ptr, xacl, status);
	if status ^= 0 then call error (status);
	if xacl = N_ACCESS then call error (forum_et_$not_eligible);

	switch_name = P_switch_name;
	call lookup_switch ();

	if switch = ADJ_SWITCH then P_switch_setting = attendee_seg.adjourned;
	else if switch = EMSG_SWITCH then
	     P_switch_setting = attendee_seg.am_print_acl_msg | attendee_seg.cm_print_acl_msg;
	else if switch = SAFETY_SWITCH then do;
	     call hcs_$get_safety_sw_seg (attendee_seg_ptr, P_switch_setting, status);
	     if status ^= 0 then call error (status);
	end;
	else do;					/* need attendee record */
	     call forum_space_mgr_$find_attendee (attendee_seg_ptr, person_id, attendee_ptr, status);
	     if status ^= 0 then call error (status);

	     if switch = PART_SWITCH then P_switch_setting = attendee.participating;
	     else if switch = NOTIFY_SWITCH then P_switch_setting = attendee.notify;
	     else if switch = CMSG_SWITCH then P_switch_setting = ^attendee.message_change_pending;
	     else if switch = ACCESS_SWITCH then P_switch_setting = attendee.acl_change_pending;
	     else if switch = DELETED_SWITCH then P_switch_setting = attendee.deleted;
	end;

	call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);
	P_status = status;
	return;


lookup_switch:
     proc ();

	if switch_name = "safety" then switch = SAFETY_SWITCH;
	else if switch_name = "adjourned" | switch_name = "adj" then switch = ADJ_SWITCH;
	else if switch_name = "meeting_eligibility_messages" | switch_name = "mtg_emsg" then switch = EMSG_SWITCH;
	else if switch_name = "participating" | switch_name = "part" then switch = PART_SWITCH;
	else if switch_name = "notify" | switch_name = "nt" then switch = NOTIFY_SWITCH;
	else if switch_name = "message_seen" then switch = CMSG_SWITCH;
	else if switch_name = "access_changed" then switch = ACCESS_SWITCH;
	else if switch_name = "deleted" then switch = DELETED_SWITCH;
	else call error (forum_et_$invalid_switch_name);
     end lookup_switch;
%page;
forum_open_mgr_$priv_set_switch:
     entry (P_directory, P_name, P_user_name, P_switch_name, P_switch_setting, P_status);

	privileged = "1"b;
	goto SS_COMMON;

forum_open_mgr_$set_switch:
     entry (P_directory, P_name, P_user_name, P_switch_name, P_switch_setting, P_status);

	privileged = "0"b;
SS_COMMON:
	call initialize (SET_SWITCH_EXIT);

	on cleanup call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);

	directory = P_directory;
	name = P_name;
	call forum_seg_mgr_$initiate (directory, name, "1"b, attendee_seg_ptr, transaction_seg_ptr, xacl, status);
	if status ^= 0 then call error (status);

	if ^privileged & xacl = N_ACCESS then call error (forum_et_$not_eligible);

	call set_switch ();

	call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);
	P_status = status;
	return;

SET_SWITCH_EXIT:
	call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);
	P_status = status;
	return;
%page;
forum_open_mgr_$set_switch_idx:
     entry (P_forum_idx, P_user_name, P_switch_name, P_switch_setting, P_status);

	call initialize (SET_SWITCH_IDX_EXIT);

	call lookup_forum_idx ("0"b);

	call fill_attendee_slot ();

	privileged = "0"b;
	call set_switch ();

	call forum_seg_mgr_$unlock (attendee_seg_ptr);
	P_status = status;

	return;

SET_SWITCH_IDX_EXIT:
	call forum_seg_mgr_$unlock (attendee_seg_ptr);
	P_status = status;

	return;
%page;
/* Do all the work of setting a switch.  We have to copy and check all the arguments from the user ring, and
   decide whether to permit the operation.  Only the chairman can mess with other people's switches.		*/

set_switch:
     procedure ();

declare	person_name		char (20);

	if length (rtrim (P_user_name)) > maxlength (person_name) then
	     call error (error_table_$bad_arg);
	else person_name = P_user_name;

	if person_name = "" then person_name = person_id;
	else if person_name ^= person_id then do;
	     if ^privileged & xacl ^= RWC_XACL then call error (forum_et_$chairman_only);
	     attendee_ptr = null ();
	end;

	if length (rtrim (P_switch_name)) > maxlength (switch_name) then
	     call error (forum_et_$invalid_switch_name);
	else switch_name = P_switch_name;

	call lookup_switch ();
	switch_setting = P_switch_setting;

	if switch <= MAX_CM_SWITCH then do;
	     if ^privileged & xacl ^= RWC_XACL then
		if switch <= MAX_STORAGE_SWITCH then
		     call check_access ();
		else call error (forum_et_$chairman_only);

	     if  switch ^= DELETED_SWITCH & person_name ^= person_id then call error (forum_et_$not_user_switch);
	end;

	if switch = ADJ_SWITCH then call set_the_switch (attendee_seg.adjourned, switch_setting);
	else if switch = EMSG_SWITCH then do;
	     if ^privileged then do;
		if ^switch_setting then do;
		     if ^forum_data_$chairman_override & forum_data_$print_eligibility_messages then
			call error (forum_et_$cant_stop_msg_site);
		     if attendee_seg.am_init & attendee_seg.am_print_acl_msg then
			call error (forum_et_$cant_stop_msg_admin);
		end;
		call set_the_switch (attendee_seg.cm_print_acl_msg, switch_setting);
		if ^attendee_seg.cm_init & status = forum_et_$switch_not_changed then status = 0;
		attendee_seg.cm_init = "1"b;
	     end;
	     else do;
		call set_the_switch (attendee_seg.am_print_acl_msg, switch_setting);
		if ^attendee_seg.am_init & status = forum_et_$switch_not_changed then status = 0;
		attendee_seg.am_init = "1"b;
	     end;
	end;
	else if switch = SAFETY_SWITCH then do;
	     on cleanup call hcs_$level_set (user_ring);
	     call hcs_$level_set (inner_ring);

	     call hcs_$set_safety_sw_seg (attendee_seg_ptr, switch_setting, status);
	     if status ^= 0 then call error (status);
	     call hcs_$level_set (user_ring);
	end;
	else do;
	     if attendee_ptr = null () then do;
		call forum_space_mgr_$find_attendee (attendee_seg_ptr, person_name, attendee_ptr, status);
		if status ^= 0 then call error (status);
	     end;

	     if switch = PART_SWITCH then call set_the_switch (attendee.participating, switch_setting);
	     else if switch = NOTIFY_SWITCH then call set_the_switch (attendee.notify, switch_setting);
	     else if switch = CMSG_SWITCH then call set_the_switch (attendee.message_change_pending, ^switch_setting);
	     else if switch = ACCESS_SWITCH then call set_the_switch (attendee.acl_change_pending, switch_setting);

	     else if switch = DELETED_SWITCH then do;
		if person_id = person_name then call error (forum_et_$you_twit);
						/* chairman can't delete himself */
		call set_the_switch (attendee.deleted, switch_setting);
		attendee.participating = "0"b;
	     end;
	end;

	return;

set_the_switch:
     proc (switch, value);

declare	switch			bit (1) unaligned;
declare	value			bit (1) aligned;

	if switch = value then
	     status = forum_et_$switch_not_changed;
	else switch = value;

	return;
     end set_the_switch;

check_access:
     proc ();

declare	modes			bit (36) aligned;

/* for set_switch, dir & name already correct, this is for _idx */
	if open_data_ptr ^= null () then call expand_pathname_ ((open_data.forum_name), directory, name, status);
	if status ^= 0 then call error (status);

	call expand_pathname_ (directory, directory, name, status);
	if status ^= 0 then call error (status);

	call hcs_$get_user_access_modes (directory, name, "", -1, modes, ""b, status);
	if status ^= 0 then call error (status);
	if modes & M_ACCESS = ""b then call error (error_table_$incorrect_access);
     end check_access;

     end set_switch;
%page;
forum_open_mgr_$set_global_switch:
     entry (P_switch_name, P_switch_setting, P_status);

	call initialize (SET_GLOBAL_EXIT);

	if length (rtrim (P_switch_name)) > maxlength (switch_name) then
	     call error (forum_et_$invalid_switch_name);
	else switch_name = P_switch_name;

	switch_setting = P_switch_setting;

	on no_write_permission call error (error_table_$moderr);

	if switch_name = "print_eligibility_messages" | switch_name = "pemsg" then
	     forum_data_$print_eligibility_messages = switch_setting;
	else if switch_name = "chairman_set_eligibility_msg" | switch_name = "cm_set_emsg" then
	     forum_data_$chairman_override = switch_setting;
	else call error (forum_et_$invalid_switch_name);

	P_status = 0;
	return;

SET_GLOBAL_EXIT:
	P_status = status;
	return;
%page;
forum_open_mgr_$set_event_channel_idx:
     entry (P_forum_idx, P_event_channel, P_status);

	call initialize (SET_EVENT_CHANNEL_IDX_EXIT);

	call lookup_forum_idx ("0"b);

	call fill_attendee_slot ();

	attendee.event_channel = P_event_channel;

	call forum_seg_mgr_$unlock (attendee_seg_ptr);
	P_status = 0;

	return;

SET_EVENT_CHANNEL_IDX_EXIT:
	call forum_seg_mgr_$unlock (attendee_seg_ptr);
	P_status = status;

	return;
%page;
forum_open_mgr_$forum_info:
     entry (P_directory, P_name, P_access_name, P_access_time, P_forum_info_ptr, P_status);

	call initialize (FORUM_INFO_EXIT);

	on cleanup call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);

	directory = P_directory;
	name = P_name;
	call forum_seg_mgr_$initiate (directory, name, "1"b, attendee_seg_ptr, transaction_seg_ptr, xacl, status);
	if status ^= 0 then call error (status);

	directory = pathname_ (directory, name);
	call get_forum_info ();
	call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);

	forum_info = fmi;
	if xacl = N_ACCESS then call error (forum_et_$not_eligible);

	P_status = status;
	return;

FORUM_INFO_EXIT:
	call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);
	P_status = status;

	return;
%page;
forum_open_mgr_$forum_info_idx:
     entry (P_forum_idx, P_access_name, P_access_time, P_forum_info_ptr, P_status);

	call initialize (MEETING_INFO_IDX_EXIT);

	call lookup_forum_idx ("1"b);

	call fill_attendee_slot ();

	directory = open_data.forum_name;
	call get_forum_info ();

	call forum_seg_mgr_$unlock (attendee_seg_ptr);

	forum_info = fmi;
	P_status = 0;
	return;

MEETING_INFO_IDX_EXIT:
	call forum_seg_mgr_$unlock (attendee_seg_ptr);
	P_status = status;

	return;
%page;
get_forum_info:
     procedure ();

declare	access_name		char (32),
	access_time		fixed bin (71),
	done			bit (1) aligned,
	person_name		char (22);

	if length (rtrim (P_access_name)) > maxlength (access_name) then
	     call error (error_table_$bad_arg);
	else access_name = P_access_name;

	access_time = P_access_time;

	forum_info_ptr = P_forum_info_ptr;
	if forum_info_ptr = null () then call error (error_table_$null_info_ptr);

	if forum_info.version ^= forum_info_version_1 & forum_info.version ^= forum_info_version_2 then
	     call error (error_table_$unimplemented_version);
	unspec (fmi) = ""b;
	fmi.version = forum_info.version;

	fmi.chairman.username = attendee_seg.chairman.person_id;
	fmi.chairman.project = attendee_seg.chairman.project_id;
	fmi.chairman.pad = "";

	if fmi.version = forum_info_version_2 then do;
	     fmi.attendee_count = attendee_seg.attendee_count;
	     fmi.removal_count = 0;
	end;
	else do;
	     fmi.attendee_count = 0;
	     do attendee_offset = attendee_seg.first_attendee_offset repeat (attendee.next_offset)
		while (attendee_offset ^= ""b);
		fmi.attendee_count = fmi.attendee_count + 1;
		if fmi.attendee_count > MAX_ATTENDEES then do;
		     fmi.attendee_count = attendee_seg.attendee_count;
		     call hcs_$fs_get_path_name (attendee_seg_ptr, directory, (0), (""), (0));
		     call forum_logger_ (0, me, "Looping attendee list in ^a", directory);
		     go to COUNT_CONTINUE;
		end;
		attendee_ptr = ptr (attendee_seg_ptr, attendee_offset);
		if ^attendee.participating then fmi.removal_count = fmi.removal_count + 1;
	     end;

	     if fmi.attendee_count ^= attendee_seg.attendee_count then do;
		call hcs_$fs_get_path_name (attendee_seg_ptr, directory, (0), (""), (0));
		call forum_logger_ (0, me, "Attendee count in ^a claimed to be ^d, was ^d.", directory,
		     attendee_seg.attendee_count, fmi.attendee_count);
	     end;
	end;

COUNT_CONTINUE:
	call hcs_$get_uid_seg (attendee_seg_ptr, fmi.forum_uid, status);
	if status ^= 0 then call error (status);

	if access_name = "" then
	     person_name = person_id;
	else do;
	     person_name = before (access_name, ".");
	     if length (rtrim (person_name)) > 1 & substr (person_name, 1, 1) = "*" then
		access_name = "anonymous." || after (access_name, ".");
	     call hcs_$get_user_access_modes (directory, ATTENDEE_SEG_NAME, access_name, -1, ""b, xacl, status);
	     if status ^= 0 then call error (status);
	end;
	fmi.eligible = (xacl ^= N_ACCESS);

	call forum_space_mgr_$find_attendee (attendee_seg_ptr, person_name, attendee_ptr, (0));
	if attendee_ptr = null () then return;

	fmi.removed = ^attendee.participating;
	fmi.last_time_attended = attendee.last_time_attended;

	call forum_space_mgr_$get_highest_seen (attendee_ptr, transaction_seg_ptr, "1"b,
	     fmi.last_seen_trans_idx, unseen_ptr, status);
	if status ^= 0 then call error (status);

	if ^fmi.removed then do;
	     fmi.notify = attendee.notify;
	     fmi.attending = attendee.attending;
	end;
	fmi.adjourned = attendee_seg.adjourned;

	if xacl = N_ACCESS then return;
	fmi.read_only = (xacl = R_XACL);

	transaction_ptr = ptr (transaction_seg_ptr, transaction_seg.last_trans_offset);
	done = "0"b;
	do while (^done);
	     if transaction.time <= access_time | transaction.prev_offset = ""b then
		done = "1"b;
	     else transaction_ptr = ptr (transaction_seg_ptr, transaction.prev_offset);
	end;

	fmi.transaction_count = transaction.trans_idx;
	fmi.deletion_count = transaction_seg.deleted_count;

	if fmi.last_seen_trans_idx <= fmi.transaction_count then
	     transaction_ptr = unseen_ptr;
	else if transaction.next_offset = ""b then transaction_ptr = null ();
	else transaction_ptr = ptr (transaction_seg_ptr, transaction.next_offset);

	do while (transaction_ptr ^= null ());
	     if transaction.person_id ^= person_name & ^transaction.deleted then
		fmi.changes_count = fmi.changes_count + 1;
	     if transaction.next_offset = ""b then
		transaction_ptr = null ();
	     else transaction_ptr = ptr (transaction_seg_ptr, transaction.next_offset);
	end;

	idx = transaction_seg.transaction_count;
	if idx < 1 then return;

	transaction_ptr = ptr (transaction_seg_ptr, transaction_seg.last_trans_offset);
	do while (transaction.deleted | transaction.time > access_time);
	     if transaction.prev_offset = ""b then
		return;
	     else transaction_ptr = ptr (transaction_seg_ptr, transaction.prev_offset);
	end;
	fmi.last_time_changed = transaction.time;

	status = 0;
	return;

     end get_forum_info;
%page;
forum_open_mgr_$list_users:
     entry (P_directory, P_name, P_area_ptr, P_user_list_ptr, P_status);

	call initialize (LIST_USERS_EXIT);

	on cleanup call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);

	directory = P_directory;
	name = P_name;
	call forum_seg_mgr_$initiate (directory, name, "1"b, attendee_seg_ptr, transaction_seg_ptr, xacl, status);
	if status ^= 0 then call error (status);
	if xacl = N_ACCESS then call error (forum_et_$not_eligible);

	call get_user_list ();

	call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);
	P_status = 0;
	return;

LIST_USERS_EXIT:
	call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);

	P_status = status;
	return;
%page;
forum_open_mgr_$list_users_idx:
     entry (P_forum_idx, P_area_ptr, P_user_list_ptr, P_status);

	call initialize (LIST_USERS_IDX_EXIT);

	call lookup_forum_idx ("0"b);

	call fill_attendee_slot ();

	call get_user_list ();

	call forum_seg_mgr_$unlock (attendee_seg_ptr);
	P_status = 0;
	return;

LIST_USERS_IDX_EXIT:
	call forum_seg_mgr_$unlock (attendee_seg_ptr);
	P_status = status;
	return;
%page;
get_user_list:
     procedure;

declare	jdx			fixed bin;

	user_list_no_attendees = attendee_seg.attendee_count;
	allocate user_list in (P_area);

	user_list.version = user_list_version_2;
	user_list.chairman.person_id = attendee_seg.chairman.person_id;
	user_list.chairman.project_id = attendee_seg.chairman.project_id;
	user_list.transaction_count = transaction_seg.transaction_count;

	jdx = 0;
	do attendee_ptr = ptr (attendee_seg_ptr, attendee_seg.first_attendee_offset) repeat attendee_ptr
	     while (attendee_ptr ^= null ());

	     if ^attendee.deleted | xacl = RWC_XACL | attendee.person_id = person_id then do;
		jdx = jdx + 1;
		if jdx > user_list_no_attendees then call error (forum_et_$unexpected_fault);
		if attendee.attending then do;	/* check if he's really there */
		     call set_lock_$lock ((attendee.lock_id), 0, status);
		     if status ^= error_table_$lock_wait_time_exceeded & status ^= error_table_$locked_by_this_process
		     then do;
			attendee.attending = "0"b;
			attendee.lock_id = "0"b;
		     end;
		end;

		user_list.attendees (jdx).person_id = attendee.person_id;
		user_list.attendees (jdx).project_id = attendee.project_id;
		user_list.attendees (jdx).attending = attendee.attending;
		user_list.attendees (jdx).notify = attendee.notify;
		user_list.attendees (jdx).removed = ^attendee.participating;
		user_list.attendees (jdx).deleted = attendee.deleted;
		user_list.attendees (jdx).read_only = (attendee.xacl = R_XACL);
		user_list.attendees (jdx).last_time_attended = attendee.last_time_attended;
		call forum_space_mgr_$get_highest_seen (attendee_ptr, transaction_seg_ptr, "0"b,
		     user_list.attendees (jdx).highest_trans_seen, (null ()), status);
		if status ^= 0 then call error (status);
	     end;
	     if attendee.next_offset = ""b then
		attendee_ptr = null ();
	     else attendee_ptr = ptr (attendee_seg_ptr, attendee.next_offset);
	end;

	user_list.no_attendees = jdx;
	P_user_list_ptr = user_list_ptr;
	return;

     end get_user_list;
%page;
forum_open_mgr_$change_chairman_idx:
     entry (P_forum_idx, P_chairman, P_status);

	call initialize (CHANGE_CHAIRMAN_IDX_EXIT);

	call lookup_forum_idx ("0"b);

	directory = open_data.forum_name;
	privileged = "0"b;
	call change_the_chairman ();

	call forum_seg_mgr_$unlock (attendee_seg_ptr);

	P_status = 0;
	return;

CHANGE_CHAIRMAN_IDX_EXIT:
	call forum_seg_mgr_$unlock (attendee_seg_ptr);

	P_status = status;
	return;
%page;
forum_open_mgr_$priv_change_chairman:
     entry (P_directory, P_name, P_chairman, P_status);

	privileged = "1"b;
	goto CC_COMMON;

forum_open_mgr_$change_chairman:
     entry (P_directory, P_name, P_chairman, P_status);

	privileged = "0"b;
CC_COMMON:
	call initialize (CHANGE_CHAIRMAN_EXIT);

	directory = P_directory;
	name = P_name;
	call forum_seg_mgr_$initiate (directory, name, "1"b, attendee_seg_ptr, transaction_seg_ptr, xacl, status);
	if status ^= 0 then call error (status);
	if ^privileged & xacl = N_ACCESS then call error (forum_et_$not_eligible);

	directory = rtrim (directory) || ">" || name;
	call change_the_chairman ();

	call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);

	P_status = 0;
	return;

CHANGE_CHAIRMAN_EXIT:
	call forum_seg_mgr_$terminate (attendee_seg_ptr, transaction_seg_ptr);

	P_status = status;
	return;
%page;
change_the_chairman:
     procedure ();

declare	chairman_name		char (32),
	chairman_personid		char (22),
	chairman_projectid		char (10);

	if ^privileged & xacl ^= RWC_XACL then call error (forum_et_$chairman_only);

	if length (rtrim (P_chairman)) > maxlength (chairman_name) then
	     call error (error_table_$bad_arg);
	else chairman_name = P_chairman;

	if index (chairman_name, ".") = 0 | index (chairman_name, ".") > maxlength (chairman_personid) + 1 then
	     call error (error_table_$bad_arg);

	chairman_personid = before (chairman_name, ".");
	chairman_projectid = rtrim (after (chairman_name, "."));

	if substr (chairman_personid, 1, 1) = "*" then call error (forum_et_$anon_chairman);

	call forum_space_mgr_$find_attendee (attendee_seg_ptr, chairman_personid, attendee_ptr, status);
	if status ^= 0 then call error (status);

	one_acl.access_name = rtrim (chairman_name) || ".*";
	one_acl.modes = RW_ACCESS;
	one_acl.xmodes = RWC_XACL;

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$add_acl_entries (directory, ATTENDEE_SEG_NAME, addr (one_acl), 1, status);
	if status ^= 0 then call error (status);

	call hcs_$level_set (user_ring);
	attendee_seg.chairman.person_id = chairman_personid;
	attendee_seg.chairman.project_id = chairman_projectid;

	return;
     end change_the_chairman;
%page;
initialize:
     proc (P_egress);

declare	P_egress			label variable,
	anon			fixed bin;

	egress = P_egress;
	attendee_seg_ptr, transaction_seg_ptr, open_data_ptr = null ();
	attendee_ptr, bit_map_ptr = null ();

	if ^static_init then do;
	     inner_ring = get_ring_ ();
	     process_id = get_process_id_ ();
	     lock_id = get_lock_id_ ();
	     call user_info_$login_data (person_id, project_id, (""), anon, 0, 0, 0, (""));
	     if anon = 1 then person_id = "*" || person_id;
	     static_init = "1"b;
	end;

	call hcs_$level_get (user_ring);

	return;
     end initialize;

error:
     proc (P_status);

declare	P_status			fixed bin (35);

	status = P_status;
	goto egress;

     end error;

     end forum_open_mgr_$open;
