/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1984 *
        *                                                            *
        ************************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-07-29,Pattin), approve(86-07-29,MCR7354),
     audit(86-08-07,Margolin), install(86-08-16,MR12.0-1128):
     Don't allow removal of *.* ACL with replace entrypoint.
     Require only 'm' permission on containing dir to change acl.
                                                   END HISTORY COMMENTS */


forum_seg_mgr_$create_forum:
     proc (P_directory, P_name, P_status);

/* Version 2 Forum --
	This module contains routines to create, delete, initiate, and
	terminate segments of meetings.

   12/31/82 Jay Pattin */
/* Modified 03/09/84 by Jeffrey I. Schiller so a chairman without sma
   access to the containing dir of a forum can set access on the forum.
   Although he still cannot set "c" access unless he does have "sma"
   Modified 6/24/84 Jay Pattin to remove above code, which didn't work
   and replace it with code that allows anyone with "c" access to give
   "c" access. */
/* Audit changes, J. Spencer Love 10/05/84 */

declare	(P_acl_count		fixed bin,
	P_acl_ptr			ptr,
	P_area_ptr		ptr,
	P_attendee_seg_ptr		ptr,
	P_directory		char (*),
	P_forum_idx		fixed bin,
	P_lock_switch		bit (1) aligned,
	P_name			char (*),
	P_new_name		char (*),
	P_no_sysdaemon		bit (1),
	P_old_name		char (*),
	P_open_data_ptr		ptr,
	P_real_dir		char (*),
	P_real_name		char (*),
	P_return_ptr		ptr,
	P_seg_index		fixed bin,
	P_status			fixed bin (35),
	P_transaction_seg_ptr	ptr,
	P_uid			bit (36) aligned,
	P_xacl			bit (36) aligned)
				parameter;

declare	acl_count			fixed bin,
	acl_ptr			ptr,
	area_ptr			ptr,
	based_area		area based (area_ptr),
	create_only		bit (1) aligned,
	created			bit (1) aligned,
	directory			char (168),
	dirname_buffer		char (168),
	dirname_len		fixed bin,
	dirname			char (dirname_len) based (addr (dirname_buffer)),
	egress			label variable,
	forum_dir			char (168),
	forum_idx			fixed bin,
	mode			fixed bin (5),
	name			char (32),
	new_name			char (32),
	old_name			char (32),
	p			ptr,
	real_dir			char (168),
	real_name			char (32),
	rings			(3) fixed bin (3),
	safety_switch		bit (1),
	seg_index			fixed bin,
	status			fixed bin (35),
	uid			bit (36) aligned,
	xacl			bit (36) aligned;

declare	static_init		bit (1) aligned static init ("0"b),
	my_authorization		bit (72) aligned static,
          full_authorization		bit (72) aligned,
	user_ring			fixed bin (3) static,
	inner_ring		fixed bin (3) static,
	person_id			char (22) static,
	project_id		char (9) static,
	MAX_ATTENDEES		fixed bin static options (constant) initial (6000),
	me			char (16) static options (constant) init ("forum_seg_mgr_");

declare   1 aim_bits aligned like aim_template based (addr (full_authorization));

declare	1 auto_area_info		aligned like area_info;

declare	1 acl_term		aligned based,
	2 access_name		char (32),
	2 modes			bit (36),
	2 xmodes			bit (36),
	2 code			fixed bin (35);

declare	1 one_acl			like acl_term,
	1 two_acls		(2) like acl_term,
	1 acl			(acl_count) like acl_term based (acl_ptr),
	1 delete_acl		(acl_count) based (acl_ptr),
	2 access_name		char (32),
	2 code			fixed bin (35);

declare	check_star_name_$entry	entry (char (*), fixed bin (35)),
	define_area_		entry (ptr, fixed bin (35)),
	expand_pathname_		entry (char (*), char (*), char (*), fixed bin (35)),
	forum_logger_$any_other	entry options (variable),
	forum_open_mgr_$lookup_forum_idx
				entry (fixed bin, ptr, bit (36) aligned, fixed bin (35)),
	get_authorization_		entry returns (bit (72) aligned),
	get_group_id_		entry returns (char (32)),
	get_lock_id_		entry returns (bit (36) aligned),
	get_ring_			entry returns (fixed bin (3)),
	hcs_$add_acl_entries	entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
	hcs_$append_branch		entry (char (*), char (*), fixed bin (5), fixed bin (35)),
	hcs_$append_branchx		entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*),
				fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35)),
	hcs_$chname_file		entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	hcs_$del_dir_tree		entry (char (*), char (*), fixed bin (35)),
	hcs_$delentry_file		entry (char (*), char (*), fixed bin (35)),
	hcs_$delete_acl_entries	entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
	hcs_$fs_get_access_modes	entry (ptr, bit (36) aligned, bit (36) aligned, fixed bin (35)),
	hcs_$fs_get_brackets	entry (ptr, fixed bin (5), (3) fixed bin (3), fixed bin (35)),
	hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
	hcs_$get_access_class	entry (char (*), char (*), bit (72) aligned, fixed bin (35)),
          hcs_$get_authorization        entry (bit (72) aligned, bit (72) aligned),
	hcs_$get_safety_sw_seg	entry (ptr, bit (1), fixed bin (35)),
	hcs_$get_uid_seg		entry (ptr, bit (36) aligned, fixed bin (35)),
	hcs_$get_user_effmode	entry (char (*), char (*), char (*), fixed bin, fixed bin (5), fixed bin (35)),
	hcs_$initiate		entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				fixed bin (35)),
	hcs_$level_get		entry (fixed bin (3)),
	hcs_$level_set		entry (fixed bin (3)),
	hcs_$list_acl		entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35)),
	hcs_$replace_acl		entry (char (*), char (*), ptr, fixed bin, bit (1), fixed bin (35)),
	hcs_$replace_dir_acl	entry (char (*), char (*), ptr, fixed bin, bit (1), fixed bin (35)),
	hcs_$set_ring_brackets	entry (char(*), char(*), (3)fixed bin(3), fixed bin(35)),
	hcs_$status_minf		entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)),
	hcs_$terminate_noname	entry (ptr, fixed bin (35)),
	pathname_			entry (char (*), char (*)) returns (char (168)),
	read_write_allowed_		entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned),
	set_lock_$lock		entry (bit (36) aligned, fixed bin, fixed bin (35)),
	set_lock_$unlock		entry (bit (36) aligned, fixed bin (35)),
	user_info_$login_data	entry (char (*), char (*), char (*), fixed bin, fixed bin, fixed bin, fixed bin (71),
				char (*));

declare	(error_table_$ai_restricted,
	error_table_$bad_acl_mode,
	error_table_$dirlong,
	error_table_$incorrect_access,
	error_table_$invalid_lock_reset,
	error_table_$lock_wait_time_exceeded,
	error_table_$namedup,
	error_table_$noentry,
	error_table_$nostars,
	error_table_$notadir,
	error_table_$safety_sw_on,
	error_table_$seg_busted,
	forum_et_$anon_chairman,
	forum_et_$blank_forum_name,
	forum_et_$invalid_seg_idx,
	forum_et_$long_forum_name,
	forum_et_$meeting_bloat,
	forum_et_$need_star_acl,
	forum_et_$no_suffix,
	forum_et_$no_such_forum,
	forum_et_$not_a_forum,
	forum_et_$unexpected_fault,
	sys_info$max_seg_size)
				fixed bin (35) external static;

declare   forum_data_$forum_ring	fixed bin (3) external;

declare	(addr, addrel, char, hbound, length, ltrim, null, ptr, rel, rtrim, size, substr, unspec)
				builtin,
	(any_other, cleanup, seg_fault_error)
				condition;
%page;
%include forum_structures;
%page;
%include forum_open_data;
%page;
%include access_mode_values;
%page;
%include aim_template;
%page;
%include area_info;
%page;
/* forum_seg_mgr_$create_forum:
     entry (P_directory, P_name, P_status); */

	create_only = "0"b;
	goto CREATE_COMMON;

forum_seg_mgr_$just_create:				/* entry for convert to call */
     entry (P_directory, P_name, P_attendee_seg_ptr, P_transaction_seg_ptr, P_status);

	create_only = "1"b;

CREATE_COMMON:
	call initialize (CREATE_EXIT);

	created = "0"b;
	call copy_pathname_args ();

	call check_star_name_$entry (name, status);
	if status ^= 0
	then if status = 1 | status = 2 then call error (error_table_$nostars);
	     else call error (status);

	if substr (person_id, 1, 1) = "*" then call error (forum_et_$anon_chairman);

	on any_other call any_other_handler ();
	on cleanup begin;
	     if created then begin;
		call hcs_$del_dir_tree (directory, name, (0));
		call hcs_$delentry_file (directory, name, (0));
	     end;
	     call hcs_$level_set (user_ring);
	end;

	call hcs_$level_set (inner_ring);
	call hcs_$status_minf (directory, name, 0, (0), (0), status);
	if status = 0 then call error (error_table_$namedup);
	else if status ^= error_table_$noentry then call error (status);

	call check_access ();

	rings (1) = forum_data_$forum_ring;
	rings (2) = 7;
	call hcs_$append_branchx (directory, name, SMA_ACCESS_BIN, rings, get_group_id_ (), 1, 0, 0, status);
	if status ^= 0 then call error (status);

	created = "1"b;
	one_acl.access_name = "*.*.*";
	one_acl.modes = SMA_ACCESS;
	one_acl.xmodes = ""b;

	call hcs_$replace_dir_acl (directory, name, addr (one_acl), 1, "1"b, status);
	if status ^= 0 then call error (status);

	forum_dir = rtrim (directory) || ">" || name;	/* change to inside the meeting */
						/* and create first three segs */
	rings (1), rings (2), rings (3) = forum_data_$forum_ring;
	call hcs_$append_branch (forum_dir, ATTENDEE_SEG_NAME, RW_ACCESS_BIN, status);
	if status ^= 0 then call error (status);
	call hcs_$set_ring_brackets (forum_dir, ATTENDEE_SEG_NAME, rings, status);
	if status ^= 0 then call error (status);
	call hcs_$append_branch (forum_dir, TRANSACTION_SEG_NAME, RW_ACCESS_BIN, status);
	if status ^= 0 then call error (status);
	call hcs_$set_ring_brackets (forum_dir, TRANSACTION_SEG_NAME, rings, status);
	if status ^= 0 then call error (status);

	real_name = rtrim (PROCEEDINGS_SEG_NAME) || "1";
	call hcs_$append_branch (forum_dir, real_name, RW_ACCESS_BIN, status);
	if status ^= 0 then call error (status);
	call hcs_$set_ring_brackets (forum_dir, real_name, rings, status);


	two_acls.access_name (1) = "*.*.*";
	two_acls.modes (1) = RW_ACCESS;
	two_acls.xmodes (1) = N_ACCESS;
	two_acls.access_name (2) = rtrim (person_id) || ".*.*";
	two_acls.modes (2) = RW_ACCESS;
	two_acls.xmodes (2) = RWC_XACL;		/* only set xacl on Attendee seg */

	call hcs_$replace_acl (forum_dir, ATTENDEE_SEG_NAME, addr (two_acls), 2, "1"b, status);
	if status ^= 0 then call error (status);

	call hcs_$replace_acl (forum_dir, TRANSACTION_SEG_NAME, addr (two_acls), 1, "1"b, status);
	if status ^= 0 then call error (status);

	call hcs_$replace_acl (forum_dir, real_name, addr (two_acls), 1, "1"b, status);
	if status ^= 0 then call error (status);

	call hcs_$initiate (forum_dir, ATTENDEE_SEG_NAME, "", 0, 0, attendee_seg_ptr, status);
	if attendee_seg_ptr = null () then call error (status);

	call hcs_$initiate (forum_dir, TRANSACTION_SEG_NAME, "", 0, 0, transaction_seg_ptr, status);
	if transaction_seg_ptr = null () then call error (status);

	attendee_seg.lock = get_lock_id_ ();
	attendee_seg.version = ATTENDEE_SEG_VERSION_1;
	attendee_seg.attendee_count = 0;
	attendee_seg.chairman.person_id = person_id;
	attendee_seg.chairman.project_id = project_id;
	attendee_seg.chairman_message = "";

	unspec (auto_area_info) = ""b;
	auto_area_info.version = area_info_version_1;
	auto_area_info.system = "1"b;
	auto_area_info.zero_on_free = "1"b;
	auto_area_info.zero_on_alloc = "1"b;
	auto_area_info.size = sys_info$max_seg_size - size (attendee_seg_header);
	auto_area_info.areap = addr (attendee_seg.attendee_area);
	auto_area_info.owner = "forum";

	call define_area_ (addr (auto_area_info), status);
	if status ^= 0 then call error (status);

	if ^create_only then do;
	     area_ptr = addr (attendee_seg.attendee_area);
	     allocate attendee in (based_area);
	     alloc_bit_map_length = 504;
	     allocate bit_map in (based_area);
	     attendee_seg.attendee_count = 1;
	     attendee_seg.first_attendee_offset, attendee_seg.last_attendee_offset = rel (attendee_ptr);
	
	     attendee.version = ATTENDEE_VERSION_1;
	     attendee.attendee_uid = 1;
	     attendee.person_id = person_id;
	     attendee.project_id = project_id;
	     attendee.bit_map_first_trans = 1;
	     attendee.bit_map_offset = rel (bit_map_ptr);
	     attendee.bit_map_length = bit_map.length;

	     bit_map.attendee_uid = 1;
	end;

	transaction_block_ptr = addr (transaction_seg.first_free_word);
	transaction_seg.version = TRANS_SEG_VERSION_1;
	transaction_seg.first_block_offset, transaction_seg.current_block_offset = rel (transaction_block_ptr);
	transaction_seg.last_trans_in_block = hbound (transaction_block.transactions, 1);
	transaction_seg.current_segno = 1;
	transaction_seg.free_space_offset = rel (addrel (transaction_block_ptr, size (transaction_block)));

	transaction_block.first_trans_idx = 1;
	transaction_block.last_trans_idx = 1;

	if create_only then do;
	     P_attendee_seg_ptr = attendee_seg_ptr;
	     P_transaction_seg_ptr = transaction_seg_ptr;
	end;
	else do;
	     call set_lock_$unlock (attendee_seg.lock, (0));
	     call hcs_$terminate_noname (attendee_seg_ptr, (0));
	     call hcs_$terminate_noname (transaction_seg_ptr, (0));
	     call hcs_$level_set (user_ring);
	end;

	P_status = 0;
	return;

CREATE_EXIT:
	if created then do;
	     call hcs_$del_dir_tree (directory, name, (0));
	     call hcs_$delentry_file (directory, name, (0));
	end;
	call hcs_$level_set (user_ring);
	P_status = status;
	return;
%page;
forum_seg_mgr_$delete_forum:
     entry (P_directory, P_name, P_status);

	call initialize (DELETE_EXIT);

	call copy_pathname_args ();

	call initiate_meeting ("0"b);
	call lock_meeting ();

	call check_access ();

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$get_safety_sw_seg (attendee_seg_ptr, safety_switch, (0));
	if safety_switch then call error (error_table_$safety_sw_on);

	call hcs_$del_dir_tree (directory, name, status);
	if status ^= 0 then call error (status);

	call hcs_$delentry_file (directory, name, status);
	if status ^= 0 then call error (status);

	call hcs_$level_set (user_ring);
	P_status = 0;
	return;

DELETE_EXIT:
	call unlock_meeting ();
	if attendee_seg_ptr ^= null () then call terminate_meeting ();
	call hcs_$level_set (user_ring);
	P_status = status;
	return;


check_access:
     proc ();

	call expand_pathname_ (directory, real_dir, real_name, status);
	if status ^= 0 then call error (status);

	call hcs_$get_user_effmode (real_dir, real_name, "", (user_ring), mode, status);
	if status ^= 0 then call error (status);
	if mode < SM_ACCESS_BIN then call error (error_table_$incorrect_access);
	return;

     end check_access;
%page;
forum_seg_mgr_$chname_forum:
     entry (P_directory, P_name, P_old_name, P_new_name, P_status);

	call initialize (CHNAME_EXIT);

	call copy_pathname_args ();

	on any_other call any_other_handler ();

	call initiate_meeting ("0"b);
	call chname ();

CHNAME_EXIT:
	call terminate_meeting ();
	P_status = status;
	return;

forum_seg_mgr_$chname_forum_idx:
     entry (P_forum_idx, P_old_name, P_new_name, P_status);

	call initialize (CHNAME_IDX_EXIT);

	on any_other call any_other_handler ();

	forum_idx = P_forum_idx;

	call forum_open_mgr_$lookup_forum_idx (forum_idx, open_data_ptr, xacl, status);
	if status ^= 0 then call error (status);
	attendee_seg_ptr = open_data.attendee_seg_ptr;

	call expand_pathname_ ((open_data.forum_name), directory, name, status);
	if status ^= 0 then call error (status);

	call chname ();

	call hcs_$fs_get_path_name (attendee_seg_ptr, directory, (0), (""), status);
	if status ^= 0 then call error (status);

	open_data.forum_name = directory;

CHNAME_IDX_EXIT:
	call unlock_meeting ();
	P_status = status;
	return;
%page;
chname:	proc;

	if length (rtrim (P_old_name)) > 32 | length (rtrim (P_new_name)) > 32 then
	     call error (forum_et_$long_forum_name);

	old_name = P_old_name;
	if old_name ^= "" then call validate_name (old_name);

	new_name = P_new_name;
	if new_name ^= "" then do;
	     call validate_name (new_name);
	     call check_star_name_$entry (new_name, status);
	     if status ^= 0
	     then if status = 1 | status = 2 then call error (error_table_$nostars);
		else call error (status);
	end;

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$chname_file (directory, name, old_name, new_name, status);
	if status ^= 0 then call error (status);

	call hcs_$level_set (user_ring);
	return;
     end chname;
%page;
copy_pathname_args:
     proc;

	if length (rtrim (P_directory)) > 168 then call error (error_table_$dirlong);
	else directory = P_directory;

	if length (rtrim (P_name)) > 32 then call error (forum_et_$long_forum_name);
	else name = P_name;
	call validate_name (name);

	return;
     end copy_pathname_args;

validate_name:
     proc (name);

declare	name			char (32),
	name_len			fixed bin;

	if name = "" then call error (forum_et_$blank_forum_name);
	name_len = length (rtrim (name)) - length (".forum");
	if name_len < 1 then call error (forum_et_$no_suffix);
	if substr (name, name_len + 1) ^= ".forum" then
	     call error (forum_et_$no_suffix);

	return;
     end validate_name;
%page;
forum_seg_mgr_$create_segment:			/* caller should have it locked */
     entry (P_open_data_ptr, P_status);

	call initialize (CREATE_SEG_EXIT);

	open_data_ptr = P_open_data_ptr;
	transaction_seg_ptr = open_data.transaction_seg_ptr;

	directory = open_data.forum_name;
	seg_index = transaction_seg.current_segno + 1;
	if seg_index > hbound (open_data.proceedings_ptrs, 1) then
	     call error (forum_et_$meeting_bloat);

	name = rtrim (PROCEEDINGS_SEG_NAME) || ltrim (char (seg_index));

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$append_branch (directory, name, RW_ACCESS_BIN, status);
	if status ^= 0 then call error (status);
	rings (1), rings (2), rings (3) = forum_data_$forum_ring;
	call hcs_$set_ring_brackets (directory, name, rings, status);
	if status ^= 0 then call error (status);

	one_acl.access_name = "*.*.*";
	one_acl.modes = RW_ACCESS;
	one_acl.xmodes =""b;
	call hcs_$replace_acl (directory, name, addr (one_acl), 1, "1"b, status);
	if status ^= 0 then call error (status);

	transaction_seg.current_segno = seg_index;
	transaction_seg.next_trans_offset = ""b;

CREATE_SEG_EXIT:
	call hcs_$level_set (user_ring);
	P_status = status;
	return;
%page;
forum_seg_mgr_$set_forum_acl:
     entry (P_directory, P_name, P_acl_ptr, P_acl_count, P_status);

	call initialize (SET_ACL_EXIT);

	call copy_pathname_args ();
	acl_ptr = P_acl_ptr;
	acl_count = P_acl_count;

	call initiate_meeting ("0"b);

	if xacl ^= RWC_XACL then call check_access ();

	directory = pathname_ (directory, name);
	call check_acl ();

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$add_acl_entries (directory, ATTENDEE_SEG_NAME, acl_ptr, acl_count, status);
	if status ^= 0 then call error (status);

	call update_acl_change ();

SET_ACL_EXIT:
	call terminate_meeting ();
	call hcs_$level_set (user_ring);
	P_status = status;
	return;
%page;
forum_seg_mgr_$replace_forum_acl:
     entry (P_directory, P_name, P_acl_ptr, P_acl_count, P_no_sysdaemon, P_status);

	call initialize (REPLACE_ACL_EXIT);

	acl_ptr = P_acl_ptr;
	acl_count = P_acl_count;
	call copy_pathname_args ();

	call initiate_meeting ("0"b);
	if xacl ^= RWC_XACL then call check_access ();

	directory = pathname_ (directory, name);
	call check_acl ();

	do seg_index = 1 to acl_count;
	     if acl.access_name (seg_index) = "*.*.*" then goto HAVE_STAR_ACL;
	end;
	call error (forum_et_$need_star_acl);

HAVE_STAR_ACL:
/* check for at least one c acl */

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$replace_acl (directory, ATTENDEE_SEG_NAME, P_acl_ptr, P_acl_count, P_no_sysdaemon, status);
	if status ^= 0 then call error (status);

	call update_acl_change ();

REPLACE_ACL_EXIT:
	call terminate_meeting ();
	call hcs_$level_set (user_ring);
	P_status = status;
	return;
%page;
check_acl:
     proc ();

declare	idx			fixed bin;

	do idx = 1 to acl_count;
	     if acl.modes (idx) ^= RW_ACCESS | (acl.xmodes (idx) ^= N_ACCESS & acl.xmodes (idx) ^= R_XACL &
		acl.xmodes (idx) ^= RW_XACL & acl.xmodes (idx) ^= RWC_XACL) then call error (error_table_$bad_acl_mode);
	end;

	return;
     end check_acl;


update_acl_change:
     proc ();

declare	attendee_count		fixed bin,
	attendee_offset		bit (18) aligned;

	attendee_count = 0;
	do attendee_offset = attendee_seg.first_attendee_offset repeat (attendee.next_offset)
	     while (attendee_offset ^= ""b);
	     attendee_count = attendee_count + 1;
	     if attendee_count > MAX_ATTENDEES then call error (forum_et_$unexpected_fault);
	     attendee_ptr = ptr (attendee_seg_ptr, attendee_offset);
	     if attendee.person_id ^= person_id then attendee.acl_change_pending = "1"b;
	end;

	return;
     end update_acl_change;
%page;
forum_seg_mgr_$delete_forum_acl:
     entry (P_directory, P_name, P_acl_ptr, P_acl_count, P_status);

	call initialize (DELETE_ACL_EXIT);

	call copy_pathname_args ();
	acl_ptr = P_acl_ptr;
	acl_count = P_acl_count;

	call initiate_meeting ("0"b);
	if xacl ^= RWC_XACL then call check_access ();

	directory = rtrim (directory) || ">" || name;

	do seg_index = 1 to acl_count;
	     if delete_acl.access_name (seg_index) = "*.*.*" then call error (forum_et_$need_star_acl);
	end;

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$delete_acl_entries (directory, ATTENDEE_SEG_NAME, acl_ptr, acl_count, status);
	if status ^= 0 then call error (status);

	call update_acl_change ();

DELETE_ACL_EXIT:
	call terminate_meeting ();
	call hcs_$level_set (user_ring);
	P_status = status;
	return;
%page;
forum_seg_mgr_$list_forum_acl:
     entry (P_directory, P_name, P_area_ptr, P_return_ptr, P_acl_ptr, P_acl_count, P_status);

	call initialize (LIST_ACL_EXIT);

	call copy_pathname_args ();

	directory = rtrim (directory) || ">" || name;
	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$list_acl (directory, ATTENDEE_SEG_NAME, P_area_ptr, P_return_ptr, P_acl_ptr, P_acl_count, status);
	if status ^= 0 then call error (status);

	call hcs_$level_set (user_ring);
	P_status = 0;
	return;

LIST_ACL_EXIT:
	call hcs_$level_set (user_ring);
	P_acl_ptr = null ();
	P_acl_count = 0;
	P_status = status;
	return;
%page;
forum_seg_mgr_$get_forum_path:
     entry (P_directory, P_name, P_real_dir, P_real_name, P_status);

	call initialize (GET_PATH_EXIT);

	on cleanup call terminate_meeting ();

	call copy_pathname_args ();
	call initiate_meeting ("0"b);			/* verify that it's real */

	P_real_dir = directory;
	P_real_name = name;

	call terminate_meeting ();
	P_status = 0;
	return;

GET_PATH_EXIT:
	call terminate_meeting ();
	P_real_dir, P_real_name = "";
	P_status = status;
	return;

forum_seg_mgr_$get_forum_path_idx:
     entry (P_forum_idx, P_real_dir, P_real_name, P_status);

	call initialize (GET_PATH_EXIT);

	forum_idx = P_forum_idx;
	call forum_open_mgr_$lookup_forum_idx (forum_idx, open_data_ptr, xacl, status);
	if status ^= 0 then call error (status);

	attendee_seg_ptr = open_data.attendee_seg_ptr;
	call unlock_meeting ();

	call expand_pathname_ ((open_data.forum_name), real_dir, real_name, status);
	P_real_dir = real_dir;
	P_real_name = real_name;
	P_status = 0;
	return;
%page;
forum_seg_mgr_$get_uid_file:
     entry (P_directory, P_name, P_uid, P_status);

	call initialize (GET_UID_EXIT);

	on cleanup call terminate_meeting ();

	call copy_pathname_args ();
	call initiate_meeting ("0"b);			/* verify that it's real */

	call hcs_$get_uid_seg (attendee_seg_ptr, uid, status);
	if status ^= 0 then call error (status);

	call terminate_meeting ();
	P_uid = uid;
	P_status = 0;
	return;

GET_UID_EXIT:
	call terminate_meeting ();
	P_uid = ""b;
	P_status = status;
	return;
%page;
forum_seg_mgr_$initiate:
     entry (P_directory, P_name, P_lock_switch, P_attendee_seg_ptr, P_transaction_seg_ptr, P_xacl, P_status);

	call initialize (INITIATE_EXIT);

	call copy_pathname_args ();

	call initiate_meeting ("1"b);
	if P_lock_switch then call lock_meeting ();

	P_directory = directory;			/* copy back real name */
	P_name = name;
	P_attendee_seg_ptr = attendee_seg_ptr;
	P_transaction_seg_ptr = transaction_seg_ptr;
	P_xacl = xacl;
	P_status = 0;
	return;

INITIATE_EXIT:
	call unlock_meeting ();
	call terminate_meeting ();
	P_attendee_seg_ptr = null ();
	P_transaction_seg_ptr = null ();
	P_status = status;
	return;
%page;
initiate_meeting:
     proc (initiate_trans);

declare	initiate_trans		bit (1) aligned,
	access_class		bit (72) aligned;

	on any_other call any_other_handler ();
	on seg_fault_error call error (error_table_$seg_busted);
	on cleanup begin;
	     call terminate_meeting ();
	     call hcs_$level_set (user_ring);
	end;

	call hcs_$level_set (inner_ring);
	call hcs_$get_access_class (directory, name, access_class, status);
	if status ^= 0 then 
	     if status = error_table_$noentry then call error (forum_et_$no_such_forum);
	     else call error (status);

	if ^read_write_allowed_ (my_authorization, access_class) then do;
	     call hcs_$get_authorization (full_authorization, (""b));
	     if ^aim_bits.privileges.ipc |
		^aim_bits.privileges.seg |
		^aim_bits.privileges.dir then
		call error (error_table_$ai_restricted);
	end;

	forum_dir = rtrim (directory) || ">" || name;
	call hcs_$initiate (forum_dir, ATTENDEE_SEG_NAME, "", 0, 0, attendee_seg_ptr, status);
	if attendee_seg_ptr = null () then
	     if status = error_table_$noentry | status = error_table_$notadir
		then call error (forum_et_$not_a_forum);
	     else call error (status);

	call hcs_$fs_get_brackets (attendee_seg_ptr, mode, rings, status);
	if status ^= 0 then call error (status);

	if mode ^= RW_ACCESS_BIN then call error (forum_et_$not_a_forum);

	if (rings (1) ^= forum_data_$forum_ring) | (rings (2) ^= rings (3)) then call error (forum_et_$not_a_forum);

	if attendee_seg.version ^= ATTENDEE_SEG_VERSION_1 then call error (forum_et_$not_a_forum);

	call hcs_$fs_get_path_name (attendee_seg_ptr, dirname_buffer, dirname_len, (""), status);
	if status ^= 0 then call error (status);

	call expand_pathname_ (dirname, directory, name, status);
	if status ^= 0 then call error (status);

	call validate_name (name);

	call hcs_$fs_get_access_modes (attendee_seg_ptr, ""b, xacl, status);
	if status ^= 0 then call error (status);

	if initiate_trans then do;
	     call hcs_$initiate (dirname, TRANSACTION_SEG_NAME, "", 0, 0, transaction_seg_ptr, status);
	     if transaction_seg_ptr = null () then
		if status = error_table_$noentry then call error (forum_et_$not_a_forum);
		else call error (status);

	     call hcs_$fs_get_brackets (transaction_seg_ptr, mode, rings, status);
	     if status ^= 0 then call error (status);

	     if mode ^= RW_ACCESS_BIN then call error (forum_et_$not_a_forum);
	     if rings (1) ^= forum_data_$forum_ring | rings (2) ^= rings (3) then call error (forum_et_$not_a_forum);
	end;

	call hcs_$level_set (user_ring);
	return;
     end initiate_meeting;
%page;
forum_seg_mgr_$lock:
     entry (P_attendee_seg_ptr, P_status);

	call initialize (LOCK_EXIT);

	attendee_seg_ptr = P_attendee_seg_ptr;
	call lock_meeting ();
	P_status = 0;
	return;

LOCK_EXIT:
	P_status = status;
	return;


lock_meeting:
     proc ();

declare	count			fixed bin,
	not_locked		bit (1) aligned;

	on any_other call any_other_handler ();
	on seg_fault_error call error (error_table_$seg_busted);

	not_locked = "1"b;
	do count = 1 to 10 while (not_locked);
	     call set_lock_$lock (attendee_seg.lock, 2, status);
	     if status ^= error_table_$lock_wait_time_exceeded then not_locked = "0"b;
	end;

	if status ^= 0 then if status ^= error_table_$invalid_lock_reset then
	     call error (status);

	return;
     end lock_meeting;
%page;
forum_seg_mgr_$initiate_seg:
     entry (P_open_data_ptr, P_seg_index, P_status);

	call initialize (INITIATE_SEG_EXIT);

	open_data_ptr = P_open_data_ptr;
	seg_index = P_seg_index;
	if seg_index < 1 | seg_index > open_data.transaction_seg_ptr -> transaction_seg.current_segno then
	     call error (forum_et_$invalid_seg_idx);

	if open_data.proceedings_ptrs (seg_index) ^= null () then return;
	name = rtrim (PROCEEDINGS_SEG_NAME) || ltrim (char (seg_index));

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	call hcs_$initiate ((open_data.forum_name), name, "", 0, 0, p, status);
	if p = null () then
	     if status = error_table_$noentry then call error (forum_et_$invalid_seg_idx);
	     else call error (status);

	open_data.proceedings_ptrs (seg_index) = p;
	call hcs_$level_set (user_ring);
	P_status = 0;
	return;

INITIATE_SEG_EXIT:
	call hcs_$level_set (user_ring);
	P_status = status;
	return;
%page;
forum_seg_mgr_$terminate:
     entry (P_attendee_seg_ptr, P_transaction_seg_ptr);

	call initialize (TERMINATE_EXIT);

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	attendee_seg_ptr = P_attendee_seg_ptr;
	transaction_seg_ptr = P_transaction_seg_ptr;

	call unlock_meeting ();
	call terminate_meeting ();

	P_attendee_seg_ptr = null ();
	P_transaction_seg_ptr = null ();

	call hcs_$level_set (user_ring);
	return;

forum_seg_mgr_$terminate_all:
     entry (P_open_data_ptr);

	call initialize (TERMINATE_EXIT);

	on cleanup call hcs_$level_set (user_ring);
	call hcs_$level_set (inner_ring);

	open_data_ptr = P_open_data_ptr;
	if open_data_ptr = null () then return;

	if open_data.open_count = 0 then
	     do seg_index = 1 to hbound (open_data.proceedings_ptrs, 1);
		p = open_data.proceedings_ptrs (seg_index);
		open_data.proceedings_ptrs (seg_index) = null ();
		call hcs_$terminate_noname (p, (0));
	     end;

	attendee_seg_ptr = open_data.attendee_seg_ptr;
	transaction_seg_ptr = open_data.transaction_seg_ptr;
	if open_data.open_count = 0 then do;
	     open_data.attendee_seg_ptr = null ();
	     open_data.transaction_seg_ptr = null ();
	     open_data.invalid = "1"b;
	end;

	call unlock_meeting ();
	if open_data.open_count = 0 then call terminate_meeting ();

TERMINATE_EXIT:
	call hcs_$level_set (user_ring);
	return;
%page;
terminate_meeting:
     proc ();
dcl old_ring fixed bin (3);

	call hcs_$level_get (old_ring);
	on cleanup call hcs_$level_set (old_ring);

	call hcs_$level_set (inner_ring);

	p = attendee_seg_ptr;
	attendee_seg_ptr = null ();
	call hcs_$terminate_noname (p, (0));

	p = transaction_seg_ptr;
	transaction_seg_ptr = null ();
	call hcs_$terminate_noname (p, (0));

	call hcs_$level_set (old_ring);
	return;
     end terminate_meeting;
%page;
forum_seg_mgr_$unlock:
     entry (P_attendee_seg_ptr);

	call initialize (UNLOCK_EXIT);

	attendee_seg_ptr = P_attendee_seg_ptr;
	call unlock_meeting ();
UNLOCK_EXIT:
	return;

unlock_meeting:
     proc ();

	if attendee_seg_ptr = null () then return;

	on any_other goto PUNT_UNLOCK;

	call set_lock_$unlock (attendee_seg.lock, (0));
PUNT_UNLOCK:
	return;
     end unlock_meeting;
%page;
initialize:
     procedure (P_egress);

declare	P_egress			label variable,
	anon			fixed bin;

	egress = P_egress;

	if ^static_init then do;
	     call user_info_$login_data (person_id, project_id, (""), anon, 0, 0, 0, (""));
	     if anon = 1 then person_id = "*" || person_id;
	     my_authorization = get_authorization_ ();
	     inner_ring = get_ring_ ();
	     static_init = "1"b;
	end;
	call hcs_$level_get (user_ring);
	attendee_seg_ptr, transaction_seg_ptr, open_data_ptr = null ();

	return;
     end initialize;

any_other_handler:
     proc ();

	on any_other system;
	call forum_logger_$any_other (0, me, "^a>^a.", directory, name);
	status = forum_et_$unexpected_fault;
	goto egress;

     end any_other_handler;

error:
     procedure (error_code);

declare	error_code		fixed bin (35);

	status = error_code;
	goto egress;				/* lets PUNT */

     end error;

end forum_seg_mgr_$create_forum;
