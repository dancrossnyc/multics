/* **************************************************************
   *                                                            *
   * Copyright, (C) Massachusetts Institute of Technology, 1984 *
   *                                                            *
   ************************************************************** */
forum_conversion_$convert:
     proc (P_directory, P_name, P_status);

/* Version 2 Forum -
    convert version 1 meetings to version 2 meetings.
    Jay Pattin 1/8/83
   Audit changes, J. Spencer Love 10/05/84
   Emergency fix to handle no_write_permission on control segment 1/30/85 Jay Pattin */

declare	(P_directory		char (*),
	P_name			char (*),
	P_status			fixed bin (35))
				parameter;

declare	acl_count			fixed bin,
	acl_ptr			ptr,
	cleaning_up		bit (1) aligned,
	directory			char (168),
	dirname_buffer		char (168),
	dirname_len		fixed bin,
	forum_control_entry		char (32),
	forum_idx			fixed bin,
	forum_name_len		fixed bin,
	(idx, jdx)		fixed bin,
	(inner_ring, user_ring)	fixed bin (3),
	locked			bit (1) aligned,
	me			char (24) static options (constant) init ("forum_conversion_"),
	message			char (256) based,
	(name, real_name)		char (32),
	person_id			char (22),
	privileged		bit (1) aligned,
	proceedings_name		char (32),
	project_id		char (9),
	status			fixed bin (35),
	status_area		area based (status_area_ptr);

declare	1 sb			aligned like status_branch,
	1 od			aligned like open_data,
	1 acl			(acl_count) aligned based (acl_ptr),
	2 access_name		char (32),
	2 modes			bit (36) aligned,
	2 xmodes			bit (36) aligned,
	2 code			fixed bin (35);

declare	1 v			aligned,
	2 n			fixed bin,
	2 vector			(500) ptr unaligned;

declare	1 idxs			aligned,
	2 n			fixed bin,
	2 vector			(500) fixed bin (18);

declare	(addr, addrel, hbound, length, null, pointer, ptr, rel, rtrim, size, substr, unspec)
				builtin,
	(any_other, cleanup, no_read_permission, seg_fault_error)
				condition;

declare	(error_table_$invalid_lock_reset,
	error_table_$lock_wait_time_exceeded,
	error_table_$moderr,
	error_table_$noentry,
	error_table_$seg_busted,
	error_table_$segnamedup,
	forum_et_$chairman_only,
	forum_et_$invalid_trans_idx,
	forum_et_$not_a_forum,
	forum_et_$unexpected_fault)	fixed bin (35) external;

declare   forum_data_$forum_ring	fixed bin (3) external;

declare	forum_logger_		entry options (variable),
	forum_logger_$any_other	entry options (variable),
	forum_seg_mgr_$just_create	entry (char (*), char (*), ptr, ptr, fixed bin (35)),
	forum_seg_mgr_$lock		entry (ptr),
	forum_seg_mgr_$terminate_all	entry (ptr),
	forum_space_mgr_$allocate_bit_map
				entry (ptr, ptr, fixed bin, ptr, fixed bin (35)),
	forum_space_mgr_$get_attendee_slot
				entry (ptr, char (*), ptr, fixed bin (35)),
	forum_trans_mgr_$load_trans	entry (ptr, char (*), fixed bin, char (*), bit (1) aligned, fixed bin,
				fixed bin (35)),
	get_ring_			entry returns (fixed bin (3)),
	get_system_free_area_	entry returns (ptr),
	hcs_$add_acl_entries	entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
	hcs_$chname_file		entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	hcs_$del_dir_tree		entry (char (*), char (*), fixed bin (35)),
	hcs_$delentry_file		entry (char (*), char (*), fixed bin (35)),
	hcs_$delentry_seg		entry (ptr, fixed bin (35)),
	hcs_$fs_get_brackets	entry (ptr, fixed bin (5), (3) fixed bin (3), fixed bin (35)),
	hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
	hcs_$initiate		entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
	hcs_$level_get		entry (fixed bin (3)),
	hcs_$level_set		entry (fixed bin (3)),
	hcs_$list_acl		entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35)),
	hcs_$replace_acl		entry (char (*), char (*), ptr, fixed bin, bit (1), fixed bin (35)),
	hcs_$status_		entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35)),
	hcs_$terminate_noname	entry (ptr, fixed bin (35)),
	set_lock_$lock		entry (bit (36) aligned, fixed bin, fixed bin (35)),
	set_lock_$unlock		entry (bit (36) aligned, fixed bin (35)),
	sort_items_indirect_$char	entry (ptr, ptr, fixed bin (24)),
	user_info_$whoami		entry (char (*), char (*), char (*));
%page;
%include forum_structures;
%page;
%include v1_forum_structures;
%page;
%include forum_open_data;
%page;
%include status_structures;
%page;
%include access_mode_values;
%page;
/* forum_conversion_$convert:
     proc (P_directory, P_name, P_status); */

	privileged = "0"b;
	goto COMMON;

forum_conversion_$priv_convert:
     entry (P_directory, P_name, P_status);

	privileged = "1"b;

COMMON:	directory = P_directory;
	name = P_name;

	call hcs_$level_get (user_ring);
	inner_ring = get_ring_ ();

	acl_ptr, attendee_seg_ptr, transaction_seg_ptr, forum_control_ptr, proceedings_ptr = null ();
	sb.nnames = 0;
	cleaning_up, locked = "0"b;

	on any_other begin;
	     on any_other system;
	     call forum_logger_$any_other (0, me, "Converting ^a>^a.", directory, name);
	     call error (forum_et_$unexpected_fault);
	end;

	on cleanup call cleanup_handler ();

	call hcs_$level_set (inner_ring);

	call user_info_$whoami (person_id, project_id, "");

	forum_name_len = length (rtrim (name)) - length (".control");
	if forum_name_len < 1 | forum_name_len > 20 then call error (forum_et_$not_a_forum);
	forum_control_entry = name;
	proceedings_name = substr (name, 1, forum_name_len) || ".proceedings";

	call initiate_old_meeting ();

	if ^privileged & forum_control.chairman.person_id ^= person_id then call error (forum_et_$chairman_only);

	name = substr (forum_control_entry, 1, forum_name_len) || ".forum";
	call forum_seg_mgr_$just_create (directory, name, attendee_seg_ptr, transaction_seg_ptr, status);
	if status ^= 0 then call error (status);

	unspec (od) = ""b;
	od.attendee_seg_ptr = attendee_seg_ptr;
	od.transaction_seg_ptr = transaction_seg_ptr;
	od.proceedings_ptrs (*) = null ();
	od.forum_name = rtrim (directory) || ">" || name;

	attendee_seg.first_attendee_offset, attendee_seg.last_attendee_offset = ""b;
	attendee_seg.attendee_count = 0;
	attendee_seg.chairman.person_id = forum_control.chairman.person_id;
	attendee_seg.chairman.project_id = forum_control.chairman.project_id;

	attendee_seg.flags.adjourned = forum_control.flags.adjourned;
	attendee_seg.flags.am_init = forum_control.flags.am_init;
	attendee_seg.flags.am_print_acl_msg = forum_control.flags.am_print_acl_msg;
	attendee_seg.flags.cm_init = forum_control.flags.cm_init;
	attendee_seg.flags.cm_print_acl_msg = forum_control.flags.cm_print_acl_msg;

	if forum_control.msg_init then
	     attendee_seg.chairman_message = ptr (proceedings_ptr, forum_control.message_loc) -> message;
	else attendee_seg.chairman_message = "";

	status_area_ptr = get_system_free_area_ ();
	call hcs_$list_acl (directory, proceedings_name, status_area_ptr, acl_ptr, null (), acl_count, status);
	if status ^= 0 then call error (status);

	jdx = 0;
	do idx = 1 to acl_count;
	     if acl.access_name (idx) ^= "*.SysDaemon.*" then do;
		jdx = jdx + 1;
		if idx ^= jdx then acl.access_name (jdx) = acl.access_name (idx);
		if acl.modes (idx) = N_ACCESS then acl.xmodes (jdx) = N_ACCESS;
		else if acl.modes (idx) = R_ACCESS then acl.xmodes (jdx) = R_XACL;
		else acl.xmodes (jdx) = RW_XACL;
		acl.modes (jdx) = RW_ACCESS;
	     end;
	end;

	call hcs_$replace_acl ((od.forum_name), ATTENDEE_SEG_NAME, acl_ptr, jdx, "1"b, status);
	if status ^= 0 then call error (status);

	if acl.access_name (acl_count) ^= "*.*.*" then do;	/* Must be *.* acl term */
	     acl.access_name (1) = "*.*.*";
	     acl.xmodes (1) = N_ACCESS;
	     call hcs_$add_acl_entries ((od.forum_name), ATTENDEE_SEG_NAME, acl_ptr, 1, status);
	end;

	acl.access_name (1) = rtrim (attendee_seg.chairman.person_id) || ".*.*";	/* make sure chairman has ACL */
	acl.xmodes (1) = RWC_XACL;
	call hcs_$add_acl_entries ((od.forum_name), ATTENDEE_SEG_NAME, acl_ptr, 1, status);
	free acl;

	status_ptr = addr (sb);
	call hcs_$status_ (directory, forum_control_entry, 1, status_ptr, status_area_ptr, status);
	if status ^= 0 then call error (status);

	do idx = 1 to status_branch.nnames;
	     real_name = status_entry_names (idx);
	     real_name = substr (real_name, 1, length (rtrim (real_name)) - length (".control")) || ".forum";
	     call hcs_$chname_file (directory, name, "", real_name, status);
	     if status ^= 0 then
		if status ^= error_table_$segnamedup then call error (status);
	end;
	free status_entry_names;

	call copy_transactions ();

	call sort_attendees ();

	call copy_attendees (1, (forum_control.no_attendees));

	call forum_seg_mgr_$terminate_all (addr (od));

	if forum_control_ptr ^= null ()
	then call set_lock_$unlock (forum_control.forum_lock, (0));

	call hcs_$terminate_noname (forum_control_ptr, (0));
	call hcs_$terminate_noname (proceedings_ptr, (0));

/*	call hcs_$delentry_seg (forum_control_ptr, (0));
	call hcs_$delentry_seg (proceedings_ptr, (0));	*/

	call hcs_$level_set (user_ring);
	P_status = 0;
	return;

PUNT:
	if ^cleaning_up then call cleanup_handler ();

	call forum_logger_ (status, me, "^a>^a", directory, name);
	P_status = status;
	return;
%page;	
initiate_old_meeting:
     procedure ();

declare	lock_attempts		fixed bin,
	modes			fixed bin (5),
	rings			(3) fixed bin (3);

	on no_read_permission call error (error_table_$moderr);
	on seg_fault_error call error (error_table_$seg_busted);

	call hcs_$initiate (directory, forum_control_entry, "", 0, 0, forum_control_ptr, status);
	if forum_control_ptr = null () then call error (status);

	call hcs_$fs_get_brackets (forum_control_ptr, modes, rings, status);
	if status ^= 0 then call error (status);

	if modes = R_ACCESS_BIN then call error (error_table_$moderr);
	else if modes ^= RW_ACCESS_BIN then call error (forum_et_$not_a_forum);

	if rings (1) ^= forum_data_$forum_ring | rings (2) ^= rings (3) then call error (forum_et_$not_a_forum);

	if forum_control.no_attendees < 0 | forum_control.no_attendees > hbound (forum_control.attendee, 1)	then
	     call error (forum_et_$not_a_forum);

	if unspec (forum_control.chairman) = ""b then call error (forum_et_$not_a_forum);

	call hcs_$fs_get_path_name (forum_control_ptr, dirname_buffer, dirname_len, forum_control_entry, status);
	if status ^= 0 then call error (status);

	forum_name_len = length (rtrim (forum_control_entry)) - length (".control");
	if forum_name_len < 1 | forum_name_len > 20 then call error (forum_et_$not_a_forum);

	if substr (forum_control_entry, forum_name_len + 1) ^= ".control" then call error (forum_et_$not_a_forum);

	call hcs_$initiate (directory, proceedings_name, "", 0, 0, proceedings_ptr, status);
	if proceedings_ptr = null () then
	     if status = error_table_$noentry | status = error_table_$moderr then call error (forum_et_$not_a_forum);
	     else call error (status);

	call hcs_$fs_get_brackets (proceedings_ptr, modes, rings, status);
	if status ^= 0 then call error (status);

	if modes < R_ACCESS_BIN then call error (error_table_$moderr);
	if rings (1) ^= forum_data_$forum_ring | rings (2) ^= rings (3) then call error (forum_et_$not_a_forum);

	locked = "1"b;
	do lock_attempts = 1 to 10;
	     call set_lock_$lock (forum_control.forum_lock, 2, status);
	     if status = 0 then return;
	     if status = error_table_$invalid_lock_reset then return;
	     if status ^= error_table_$lock_wait_time_exceeded then call error (status);
	end;
	call error (status);

     end initiate_old_meeting;
%page;
copy_transactions:
     proc ();

declare	block_offset		bit (18),
	pref			fixed bin,
	trans_idx			fixed bin,
	trans_ptr			ptr,
	trans_len			fixed bin,
	trans_text		char (trans_len) based (trans_ptr);

	block_offset = ""b;
	do trans_idx = 1 to forum_control.no_transactions;
	     if forum_control.transactions (trans_idx).gone then do;
		transaction_seg.deleted_count = transaction_seg.deleted_count + 1;
		transaction_block_ptr = ptr (transaction_seg_ptr, transaction_seg.current_block_offset);
		if trans_idx > transaction_seg.last_trans_in_block then call get_new_block ();

		idx = trans_idx - transaction_block.first_trans_idx + 1;
		transaction_block.offset (idx) = EXPUNGED;
		transaction_block.last_trans_idx = idx;
		transaction_seg.transaction_count = transaction_seg.transaction_count + 1;
	     end;
	     else do;
		trans_len = forum_control.transactions (trans_idx).length;
		trans_ptr = ptr (proceedings_ptr, forum_control.transactions (trans_idx).offset);
		pref = forum_control.transactions (trans_idx).prior_ref_index;
		if forum_control.transactions (pref).gone then pref = 0;

		call forum_trans_mgr_$load_trans (addr (od), trans_text, pref,
		     forum_control.transactions (trans_idx).subject,
		     (forum_control.transactions (trans_idx).unfilled), idx, status);
		if status ^= 0 then call error (status);
		if trans_idx ^= idx then call error (forum_et_$invalid_trans_idx);
		     
		transaction_ptr = ptr (transaction_seg_ptr, transaction_seg.last_trans_offset);
		transaction.person_id = forum_control.transactions (trans_idx).person_id;
		transaction.project_id = forum_control.transactions (trans_idx).project_id;
		transaction.time = forum_control.transactions (trans_idx).time;
		transaction.deleted = forum_control.transactions (trans_idx).deleted;
		transaction.deleted_by_author = forum_control.transactions (trans_idx).deleted_by_author;

		if transaction.deleted then transaction_seg.deleted_count = transaction_seg.deleted_count + 1;

		if block_offset ^= transaction_seg.current_block_offset then do;
		     ptr (transaction_seg_ptr, transaction_seg.current_block_offset) ->
			transaction_block.time = transaction.time;
		     block_offset = transaction_seg.current_block_offset;
		end;
	     end;
	end;
	return;

get_new_block:
     proc ();

declare	old_block_offset		bit (18);

	old_block_offset = rel (transaction_block_ptr);
	transaction_block.next_block_offset, transaction_seg.current_block_offset = transaction_seg.free_space_offset;
	transaction_block_ptr = ptr (transaction_seg_ptr, transaction_seg.free_space_offset);
	transaction_seg.free_space_offset = rel (addrel (transaction_block_ptr, size (transaction_block)));
	transaction_seg.last_trans_in_block = transaction_seg.last_trans_in_block + hbound (transaction_block.transactions, 1);
	transaction_block.first_trans_idx = trans_idx;
	transaction_block.prev_block_offset = old_block_offset;

	return;
     end get_new_block;

end copy_transactions;
%page;
sort_attendees:
     proc ();

	do idx = 1 to forum_control.no_attendees;
	     v.vector (idx) = addr (forum_control.attendee.person_id (idx));
	     idxs.vector (idx) = idx;
	end;

	v.n, idxs.n = forum_control.no_attendees;
	call sort_items_indirect_$char (addr (v), addr (idxs), 22);

	return;
     end sort_attendees;
%page;
copy_attendees:
     proc (low, high);

declare	(low, high, middle)		fixed bin;

	middle = low + (high - low)/2;
	call copy_one_attendee ((idxs.vector (middle)));

	if middle < high then call copy_attendees (middle + 1, high);
	if middle > low then call copy_attendees (low, middle - 1);

	return;
     end copy_attendees;

copy_one_attendee:
	proc (idx);

declare	(idx, jdx)		fixed bin,
	1 at			aligned like attendee based (attendee_ptr);

	call forum_space_mgr_$get_attendee_slot (attendee_seg_ptr, forum_control.attendee (idx).person_id,
	     attendee_ptr, status);
	if status ^= 0 then call error (status);

	at.project_id = forum_control.attendee (idx).project_id;
	at.participating = ^forum_control.attendee (idx).removed;
	at.deleted = forum_control.attendee (idx).deleted;
	at.notify = forum_control.attendee (idx).notify;
	at.acl_change_pending = forum_control.attendee (idx).acl_change_pending;
	at.message_change_pending = forum_control.attendee (idx).message_changed;
	at.last_time_attended = forum_control.attendee (idx).last_time_attended;

	call forum_space_mgr_$allocate_bit_map (addr (od), attendee_ptr,
	     forum_control.attendee (idx).highest_trans_seen + 1, bit_map_ptr, status);
	if status ^= 0 then call error (status);

     end copy_one_attendee;
%page;
error:
     proc (P_status);

declare	P_status			fixed bin (35);

	status = P_status;
	goto PUNT;
     end error;

cleanup_handler:
     proc ();

	cleaning_up = "1"b;
	if forum_control_ptr ^= null () & locked
	then call set_lock_$unlock (forum_control.forum_lock, (0));

     	call hcs_$terminate_noname (forum_control_ptr, (0));
     	call hcs_$terminate_noname (proceedings_ptr, (0));

	if acl_ptr ^= null () then free acl;
	if sb.nnames ^= 0 then free status_entry_names;

	if attendee_seg_ptr ^= null () then do;
	     call hcs_$del_dir_tree (directory, name, (0));
	     call hcs_$delentry_file (directory, name, (0));
	end;

	call hcs_$level_set (user_ring);

     end cleanup_handler;

end forum_conversion_$convert;
