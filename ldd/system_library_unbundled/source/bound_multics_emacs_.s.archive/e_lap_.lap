;;; ******************************************************
;;; *                                                    *
;;; * Copyright, (C) Honeywell Bull Inc., 1988           *
;;; *                                                    *
;;; * Copyright (c) 1978 by Massachusetts Institute of   *
;;; * Technology and Honeywell Information Systems, Inc. *
;;; *                                                    *
;;; ******************************************************

;;; HISTORY COMMENTS:
;;;  1) change(88-01-07,Schroth), approve(88-02-29,MCR7851),
;;;     audit(88-06-08,RBarstad):
;;;     Originally created by Bernie Greenberg in 1978.
     
;;;     Changed for 8-bit extended ASCII I/O by removing e_lap_$tabscan and
;;;     adding e_lap_$tabscan_table.
;;;                                                      END HISTORY COMMENTS

;;;
;;;
;;;	LAP String Hackery
;;;	 BSG
;;;

(declare (nouuo t) (sstatus uuolinks nil))
(declare (*rset t) (setq errset '(lambda n (break foobar))))


;;; Table generating macro
(defun make-n-of macro (x)
       (let ((howmany (eval (cadr x)))
	   (thingum (eval (caddr x))))
	  (do ((i 0 (1+ i))
	       (l nil
		(cons (list thingum thingum) l)))
	      ((= i howmany) l))))


;;; Create a pseudo-string object
(lap e_lap_$make-dat-ol-black-magic-string subr 1)
; (make-dat-ol-black-magic-string string-ptr) (returns string)
;			    -2,-1
          (ldaq     ap|-2)		;get fixnum ptr in q
          (eppap    ap|-2)		;pop it
          (lls      18.)		; 000000 00SSSS OOOOOO 000000
          (als      18.)		; 00SSSS 000000 OOOOOO 000000
          (ora      064043,dl)	; 00SSSS 064043 OOOOOO 000000
				;ungc-able string
          (tra      ab|return,*)
()

;;; 

;;;
;;;	EMACS string manipulators
;;;	 (An EMACS string is either an atom, a string, or a file-cons)
;;;


;;; Take substr of EMACS string
(lap e_lap_$gsubstr subr 3)
; (gsubstr stuff pos-0-rel howmany) (returns string)
;          -6,-5 -4,-3     -2,-1
           (ldq     ap|-1)		;len
           (call    ab|cons-string,*)
           (staq    ap|-2)		;save
	 (epprp	ap|-2,*)
           (eppbp   ap|-6)		;gets all cases
           (tsx0    loadup)
           (lda     ap|-3)		;offset
           (a9bd    bp|0,al)
           (ldq     rp|0)		;len
           (mlr     (pr,rl),(pr,rl))
           (desc9a  bp|0,ql)
           (desc9a  rp|1,ql)
           (ldaq    ap|-2)		;string object
           (eppap   ap|-6)
           (tra     ab|return,*)


;;; Get numeric equivalent of i'th character of EMACS string
(entry e_lap_$ggcharn subr 2)
; (ggcharn stuff pos-0-rel) (returns fixnum)
;          -4,-3 -2,-1
	(eppbp	ap|-4)
	(tsx0	loadup)
	(lda	ap|-1)		;offset
	(stz	ap|-1)
	(mlr	(pr,al),(pr))
	(desc9a	bp|0,1)
	(desc9a	ap|-1(3),1)
	(ldaq	ap|-2)
	(eppap	ap|-4)
	(tra	ab|return,*)

;;; 

;;; Internal subr to get ptr and lth of EMACS string
loadup	(ldaq	bp|0)
	(eppbp	bp|0,*)
	(cana	077700,dl)	;If it's a cons, then
	(tze	loadup-fileptr)	;load it from file.
	(cana	010000,dl)	;=atsym (lisp symbol)
	(tze	2,ic)		;SKIP if string
	(eppbp	bp|4)		;move pointer up to printname
          (lda      bp|0)		;move length into a
	(eppbp	bp|1)		;move string pointer into bp
	(tra	0,x0)

loadup-fileptr
          (lda      bp|3)		;move length into a
	(lprpbp	bp|1)		;move string pointer into bp
	(tra	0,x0)


;;; Scan EMACS string for next non-printing character as defined by passed table
(entry e_lap_$tabscan_table subr 4)
; (tabscan_table tblarrayobj  stuff length pos-0-rel) (returns fixnum)
;	       -10,-7	-6,-5 -4,-3  -2,-1
	(eppbp   ap|-6)
	(tsx0    loadup)
	(ldq     ap|-3)
	(sblq    ap|-1)
	(lda     ap|-1)
          (a9bd    bp|0,al)
	(epplb   ap|-10,*)
	(epplb   lb|2,*)
	(tct	(pr,rl),mask(000))
	(desc9a  bp|0,ql)
	(arg	lb|0)
          (arg     ap|-1)
          (ldaq    ap|-2)
	(anq	(% 000777777777))
          (eppap   ap|-10)
          (tra     ab|return,*)

;;; 

;;; Compare two EMACS strings (actually substring)
(entry e_lap_$compare_strings subr 5)
; (compare_strings stuff1 pos-0-rel1 stuff2 pos-0-rel2 length) (returns t/nil)
;	         -12,-11 -10,-7    -6,-5  -4,3       -2,-1
	(eppbp	ap|-12)		;firsto
	(tsx0	loadup)
	(eppbb	bp|0)
	(ldq	ap|-7)		;len
	(a9bd	bb|0,ql)
	(eppbp	ap|-6)		;second
	(tsx0	loadup)
	(ldq	ap|-3)
	(a9bd	bp|0,ql)
	(lda	ap|-1)		;len
	(cmpc	(pr,rl),(pr,rl))
	(desc9a	bb|0,al)
	(desc9a	bp|0,al)
	(tze	eql)
	(ldaq	'nil)
	(tra	r2d2)
eql	(ldaq	't)
r2d2	(eppap	ap|-12)
	(tra	ab|return,*)

;;; 

;;; Strip leading and trailing whitespace from EMACS string
(entry e_lap_$trim subr 1)
; (trim stuff) (returns string)
;       -2,-1
	(eax7	4,x7)		;get temporaries
	(eppbp	ap|-2)
	(tsx0	loadup)		;get input string
	(spribp	us|-4)		;save ptr to source
	(sta	us|-2)		;save original length
	(tsx0	compute-rtrim)	;compute new length in us|-1
	(eppbp	us|-4,*)		;restore ptr
	(lda	us|-1)
	(tra	do-ltrim)		;now trim leading whitespace


;;; Strip leading whitepace from EMACS string
(entry e_lap_$ltrim subr 1)
; (trim stuff) (returns string)
;       -2,-1
	(eax7	4,x7)		;get temporaries
	(eppbp	ap|-2)
	(tsx0	loadup)		;get input string
	(spribp	us|-4)
do-ltrim
	(sta	us|-2)		;save original length
	(tct	(pr,rl))		;find first non-whitespace
	(desc9a	bp|0,al)
	(arg	whitespace-table)
	(arg	us|-1)		;result of scan
	(ldq	us|-1)
	(anq	(% 000777777777))
	(stq	us|-1)
	(ldq	us|-2)		;compute new length
	(sbq	us|-1)
	(tspbp	ab|cons-string,*)	;make return string
	(staq	ap|-2)
	(epprp	ap|-2,*)		;get ptr to length/string
	(lda	us|-1)		;get offset of start of string
	(ldq	rp|0)		;get length of substring
	(eppbp	us|-4,*)		;get ptr to original string
	(mlr	(pr,rl,al),(pr,rl),fill(040))
	(desc9a	bp|0,ql)
	(desc9a	rp|1,ql)
	(ldaq	ap|-2)		;get result string
	(eppap	ap|-2)
	(eax7	-4,x7)
	(tra	ab|return,*)


;;; Strip trailing whitespace from EMACS string
(entry e_lap_$rtrim subr 1)
; (rtrim stuff) (returns string)
;       -2,-1
	(eax7	4,x7)		;get temporaries
	(eppbp	ap|-2)
	(tsx0	loadup)		;get input string
	(spribp	us|-4)
	(sta	us|-2)		;save original length
	(tsx0	compute-rtrim)	;compute new length
	(ldq	us|-1)
	(tspbp	ab|cons-string,*)	;make return string
	(staq	ap|-2)
	(epprp	ap|-2,*)		;get ptr to length/string
	(lda	rp|0)
	(eppbp	us|-4,*)		;get ptr to original string
	(mlr	(pr,rl),(pr,rl),fill(040))	;move substring
	(desc9a	bp|0,al)
	(desc9a	rp|1,al)
	(ldaq	ap|-2)		;get result string
	(eppap	ap|-2)
	(eax7	-4,x7)
	(tra	ab|return,*)

compute-rtrim			;internal subr to compute rtrim length
	(tctr	(pr,rl))
	(desc9a	bp|0,al)
	(arg	whitespace-table)
	(arg	us|-1)		;result of scan
	(ldq	us|-1)
	(anq	(% 000777777777))
	(stq	us|-1)
	(ldq	us|-2)		;get original length
	(sbq	us|-1)		;compute new length
	(stq	us|-1)
	(tra	0,x0)

whitespace-table			;EIS table to scan for non-whitespace
	(make-n-of 2. -1)		;000-007
	777000777777		;010-013
	(make-n-of 5. -1)		;014-037
	000777777777		;040-043
	(make-n-of 7. -1)		;044-077
	(make-n-of 16. -1)		;100-177
	(make-n-of (- 128. 32.) -1)	;200-777
;;; 

;;; Scan EMACS string with supplied table
(entry e_lap_$tct subr 3)
; (tct pos-0-rel tblarrayobj stuff) (returns fixnum)
;      -6,-5     -4,-3       -2,-1
          (eppbp    ap|-2)
          (tsx0     loadup)
	(tsx0	tct_stringm)
	(tct	(pr,rl))
	(desc9a	bp|0,al)
	(arg	lb|0)
	(arg	ap|-5)
	(tra	0,x0)


;;; Scan EMACS string in reverse with supplied table
(entry e_lap_$tctr subr 3)
; (tctr pos-0-rel tblarrayobj stuff) (returns fixnum)
;       -6,-5     -4,-3	-2,-1
          (eppbp    ap|-2)
          (tsx0     loadup)
	(ldac	ap|-5)		;pointpos is len
	(tsx0	tct_stringm)
	(tctr	(pr,rl))
	(desc9a	bp|0,al)
	(arg	lb|0)
	(arg	ap|-5)
	(tra	0,x0)		;old coroutine cruft
tct_stringm			;xec's blew out EIS box.
jj
	(ldq	ap|-5)
	(a9bd	bp|0,ql)
	(epplb	ap|-4,*)
	(epplb	lb|2,*)
	(szn bp|0)(szn lb|0)(szn lb|76)
	(tsx0	0,x0)
	(ttf	nolose)
	(lrl	44)
	(lda	fixnum-type,dl)
	(tra	2,ic)
nolose	(ldaq	ap|-6)
	(anq	(% 000777777777))
	(eppap	ap|-6)
	(tra	ab|return,*)

;;; 

;;;	Entries to manipulate the work-string
;;;

(entry e_lap_$rplacstring-offset subr 6)
   ;like next, but last is source offset
	(eppbp	ap|-12)		;-10 for him
          (tsx0	loadup)
	(ldq	ap|-1)
	(a9bd	bp|0,ql)
	(eppap	ap|-2)
	(tra	rplacj)

(entry e_lap_$rplacstring subr 5)
   ;(allofthat magicptr newchars len offset newlen)
;	    -12,-11   -10,-7  -6,-5 -4,-3 -2,-1
	(eppbp	ap|-10)		;new
	(tsx0	loadup)
rplacj
	(eppbb	bp|0)
	(eppbp	ap|-12,*)		;-> magic
	(eppbp	bp|1)
	(ldq	ap|-3)		;offset
	(a9bd	bp|0,ql)
	(ldq	ap|-5)		;len
	(mlr	(pr,rl),(pr,rl))
	(desc9a	bb|0,ql)
	(desc9a	bp|0,ql)
	(lda	ap|-1)
	(sta	ap|-12,*)
	(eppap	ap|-12)
	(ldaq	'nil)
	(tra	ab|return,*)

(entry e_lap_$delete-chars subr 3)
  ;.. work-string curpointpos ct
 ;      -6,-5      -4,-3      -2,-1
	(eppbp	ap|-6,*)
	(eppbp	bp|1)
	(lda	ap|-3)		;point
	(a9bd	bp|0,al)
	(eppbb	bp|0)
	(lda	ap|-1)		;count
	(a9bd	bb|0,al)
	(lda	ap|-6,*)		;-orig count
	(sbla	ap|-3)
	(sbla	ap|-1)
	(mlr	(pr,rl),(pr,rl))
	(desc9a	bb|0,al)
	(desc9a	bp|0,al)
	(lcq	ap|-1)
	(asq	ap|-6,*)
	(eppap	ap|-6)
	(ldaq	'nil)
	(tra	ab|return,*)

(entry e_lap_$insert-chars subr 4)
   ; ... workstring offset stuff count
   ;     -10,-7     -6,-5  -4,-3 -2,-1
	(eppbp	ap|-4)
	(tsx0	loadup)
	(eppbb	bp|0)
	(eppbp	ap|-10,*)
	(eppbp	bp|1)
	(ldq	ap|-5)		;offset
	(a9bd	bp|0,ql)
	(epplb	bp|0)
	(ldq	ap|-1)		;count
	(asq	ap|-10,*)
	(a9bd	lb|0,ql)
	(lda	ap|-10,*)		;stringlen
	(sbla	ap|-5)
	(mrl	(pr,rl),(pr,rl))
	(desc9a	bp|0,al)
	(desc9a	lb|0,al)
	(mlr	(pr,rl),(pr,rl))
	(desc9a	bb|0,ql)
	(desc9a	bp|0,ql)
	(lda	40047,dl)
	(eppap	ap|-10)
	(tra	ab|return,*)

;;; 

;;;
;;;	Entries to move data to/from Multics files
;;;

;;; Get index of next NL in Multics file
(entry e_lap_$segnlindex subr 3)
; (segnlindex fileptr length offset) (returns fixnum)
;	    -6,-5   -4,-3  -2,-1
	(lprplb	ap|-5)		;-> segment
	(ldq	ap|-3)		;-> iolen
	(sblq	ap|-1)		;guys offset, gives length remaining
	(lda	ap|-1)		;guys offset
	(scm	(pr,rl,al),(du),mask(000))
	(desc9a	lb|0,ql)		;input string
	(arg	012000)		;000 000 NEWLINE 000
	(arg	ap|-1)		;reuse input fixnum for output
	(ldaq	ap|-2)		;get index into aq
	(eppap	ap|-6)		;pop stack and return
	(tra	ab|return,*)


;;; Get a string from Multics file
(entry e_lap_$return-string subr 3)
; (return-string fileptr offset length) (returns string)
;	       -6,-5   -4,-3  -2,-1
	(ldq	ap|-1)		;len
	(tspbp	ab|cons-string,*)	;allocate it
	(staq	ap|-2)		;save it here, dont need this
	(epprp	ap|-2,*)		;point at length ctl
	(ldq	rp|0)		;length again
	(lprpbp	ap|-5)		;fileptr
          (lda      ap|-3)		;source offset
	(mlr	(pr,rl,al)(pr,rl))
	(desc9a	bp|0,ql)
	(desc9a	lb|1,ql)
	(ldaq	ap|-2)
	(eppap	ap|-6)
	(tra	ab|return,*)


;;; Move EMACS string to a file
(entry e_lap_$write-string subr 3)
; (write-string stuff fileptr offset) (returns fixnum)
;               -6,-5 -4,-3   -2,-1
	(eppbp	ap|-6)
	(tsx0	loadup)
	(lprpbb	ap|-3)		;get pointer to file
	(ldq	ap|-1)		;and offset where to put it
	(mlr	(pr,rl),(pr,rl,ql))
	(desc9a	bp|0,al)
	(desc9a	bb|0,al)		;copy string to file
	(ada	ap|-1)		;update offset by length
	(lrl	36.)
	(lda	40047,dl)		;make a fixnum
	(eppap	ap|-6)
	(tra	ab|return,*)
;;;
;;;	Scan two substrings for obscure long-line redisplay case.
;;;	Given  fffffnnnnn  first, and
;;;	       fffffaaann  second, we want to tell that 3 chars were
;;;	inserted.  BSG 3/1/79
;;;	Modified 25 June 1982 by W. York and E. N. Kittlitz to search
;;;	both ways every time, then return the better (smaller) number.

(entry e_lap_$rdis-crossmatch subr 4)
;(rdis-crossmatch string1 string2 leftcommon stringl) ;Must be real strings
;		-8,-7  -6,-5   -4,-3     -2,-1
	(eppbb	ap|-8,*)
	(epplb	ap|-6,*)
	(lda	ap|-1)			;stringl
	(sbla	ap|-3)
	(ldq	ap|-3)			;leftcommon
	(adq	4,dl)			;varying-word
	(a9bd	bb|0,ql)
	(a9bd	lb|0,ql)
	(tsx0	crossmatch)
	(eax3	0,qu)			; save result of 1st compare
	(eppbp	bb|0)			; switch strings
	(eppbb	lb|0)
	(epplb	bp|0)
	(tsx0	crossmatch)		; try again
	(eaq	0,qu)			; set indicators
	(tmi	second_failed)
	(eax3	0,x3)			; "	"
	(tpl	both_succeeded)
return_second
	(qrl	18.)
	(tra	return_q)

both_succeeded
	(cmpx3	ap|-1)			; compare first (x3) to second (qu and ap|-1)
	(tpl	return_second)		; return the smaller
	(tra	return_first)

second_failed
	(eax3	0,x3)
	(tmi	return_nil)
return_first
	(eaq	0,x3)
	(qrl	18.)
	(eaa	0)
	(negl	0)			; negate the q (gack)
return_q
	(lda	40047,dl)			; magic constant #40047
	(eppap	ap|-8.)			; pop the args
	(tra	ab|return,*)

return_nil
	(ldaq	'nil)
	(eppap	ap|-8.)
	(tra	ab|return,*)

;;; crossmatch searches for the first occurrance of the string at lb|0
;;; in the string at bb|0, and returns the index in qu.
crossmatch
	(scd	(pr,rl),(pr,rl))
	(desc9a	bb|0,al)
	(desc9a	lb|0,al)
	(arg	ap|-1)
	(ttn	crossmatch_failed)		; no match
	(ldq	ap|-1)		; shift so we can sub from x1
	(qls	18.)
	(stq	ap|-1)
	(eax1	0,al)
	(sblx1	ap|-1)
	;; see if the remainder of the strings match
	(cmpc	(pr,rl,qu),(pr,rl))
	(desc9a	bb|0,x1)
	(desc9a	lb|0,x1)
	(tze	0,x0)
crossmatch_failed
	(ldq	-1,du)
	(tra	0,x0)

(entry  e_lap_$get-x7 subr 0)			;for error handlers
	(eaq	0,x7)
	(qrl	18.)
	(orq	-2,du)
	(lda	40047,dl)
	(tra	ab|return,*)

;;;
;;;	Replacements for PL/I searches - BSG 12/4/79
;;;

(entry e_lap_$forward-search-string subr 3)
; (forward-search-line searchee offset searchstring) => 0-rel index or -1
;		   -6,-5    -4,-3  -2,-1
; unm pdl for this and next fun:
;    searchee-len   searchstring-len forward-offset  eis-answer-dump
;    -4		-3	       -2		   -1
	(tsx4	search-string-setup)
	  (sbla	ap|-3)			;xec'd to get see len
	  (lda	ap|-3)			;xec'd to get see offset
	(tpnz	search-2-or-more)		;do it;else l = 1
	(scm	(pr,rl),(pr),mask(000))
	(desc9a	bb|0,ql)
	(desc9a	bp|0,1)
	(arg	us|-1)
	(ttn	search-fails)		;tally on = fails
search-succeeds
	(ldq	us|-1)
search-return-fixnum
	(lda	40047,dl)			;fixnum
	(eppap	ap|-6)
	(eax7	-4,x7)
	(tra	ab|return,*)
search-fails
	(lcq	1,dl)
	(tra	search-return-fixnum)
search-2-or-more
	(lda	0,dl)			;Init loop offset
	(sblq	us|-3)			;dont search last l(ss)-1
search-2-or-more-loop
	(adlq	2,dl)			;ok to match 2 more
	(scd	(pr,rl,al),(pr))
	(desc9a	bb|0,ql)
	(desc9a	bp|0)
	(arg	us|-1)
	(ttn	search-fails)		;SURELY cant find it
;;;	OK maybe this won. It wins if bp compares to bb for l(ss).
;;;	remaining-length was already truncated down, needn't check.
	(adla	us|-1)			;how far'd it find it?
	(sta	us|-1)			;in case we win
	(ldq	us|-3)			;l(ss)
	(cmpc	(pr,rl,al),(pr,rl))
	(desc9a	bb|0,ql)
	(desc9a	bp|0,ql)
	(tze	search-succeeds)		;definitely found it
					;right offset at us|-1
;;;	Lost. Increment ptrs, decrement length, see if done.

	(adla	1,dl)			;consider 1 more from here
	(ldq	us|-4)			;l(see)
	(sblq	us|-1)			;rem = l(see) - new offset
	(sblq	1,dl)
	(sblq	us|-3)			;compare to l(ss), deduct
	(tmi	search-fails)
	(tra	search-2-or-more-loop)	;try more 2-matches

;;;
;;;	Same, but reverse. Much harder.
;;;

(entry e_lap_$reverse-search-string subr 3)
; (reverse-search-line searchee offset searchstring) => 0-rel index or -1
;		   -6,-5    -4,-3  -2,-1
; unm pdl same as above

	(tsx4	search-string-setup)
	  (lda	ap|-3)			;xec'd to get see len
	  (lda	0,dl)			;xec'd to get see offset
	(tpnz	revsearch-2-or-more)
	(scmr	(pr,rl),(pr),mask(000))	;search for 1
	(desc9a	bb|0,ql)
	(desc9a	bp|0)
	(arg	us|-1)
	(ttn	search-fails)
	(tra	search-succeeds)
revsearch-2-or-more
	(sblq	us|-3)			;start len = l(see) - l(ss)
	(adlq	2,dl)			;2 more always ok
revsearch-2-or-more-loop			;a = l(ss)
	(scdr	(pr,rl,al),(pr,al))
	(desc9a	bb|-1(2),ql)		;start offset!
	(desc9a	bp|-1(2))			;last 2 chars
	(arg	us|-1)			;result
	(ttn	search-fails)		;definitely lost
;;; Same deal. May have won.
;;; Lets say we are looking for FOOBARU. Current state of world:
;;; A B C D E F O O B A R U C X Q F R U T M C
;;;|<l(ss)-2>|< contents of q       >|
;;;          |< l(ss)     >|<result >|
;;; so start of FOOBARU = l(ss) - 2 + q - result - l(ss) = q - 2 - result
	(sblq	2,dl)			;q - 2
	(sblq	us|-1)			;subtract offset he found
;;; See if string at offset is really ss. Q is cleverly real offset. A = l(ss).
	(cmpc	(pr,rl,ql),(pr,rl))
	(desc9a	bb|0,al)
	(desc9a	bp|0,al)
	(tnz	revsearch-gotta-move-on)	;br if fails
;;; Found it. Hack up result.
	(adlq	us|-3)			;add l(ss)
	(sblq	us|-4)			;l(see)
	(lda	0,dl)
	(negl	0)
	(tra	search-return-fixnum)

revsearch-gotta-move-on
;; (new q for eis) = (old-q-for-eis) - (result) -1, the 1 for moving on,
;;   = current-q + result + 2 - result - 1 = current-q + 1
	(adlq	1,dl)
	(cmpq	2,dl)			;see if anything left
	(tmi	search-fails)
	(tra	revsearch-2-or-more-loop)
;;;
;;; Common setup for searches  -- sets up unm pdl :
;;;  see-len  ss-len  offset zero-for-eis
;;;   -4        -3       -2    -1

search-string-setup				;s/r on x4, does everything
	(eax7	4,x7)
	(eppbp	ap|-6)			;searchee
	(tsx0	loadup)
	(xec	0,x4)			;subt offset or load len (rv)
	(sta	us|-4)
	(xec	1,x4)			;load offset or 0 (rv)
	(a9bd	bp|0,al)
	(eppbb	bp|0)
	(eppbp	ap|-2)
	(tsx0	loadup)			;searchstring
	(sta	us|-3)
	(cmpa	us|-4)
	(tpnz	search-fails)		;l(ss) > l(see)
	(stz	us|-1)			;result
	(ldq	us|-4)			;l(see)
	(cmpa	1,dl)			;l(ss)
	(tmi	search-succeeds)		;0 case
	(tra	2,x4)

(entry e_lap_$string_length subr 1)
;;;  (string_length "guaranteed-string") = (stringlength string)
	(lda	40047,dl)
	(ldq	ap|-2,*)
	(eppap	ap|-2)
	(tra	ab|return,*)
()
