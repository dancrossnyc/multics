/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1981 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */
list_emacs_ctls:
     procedure ();

/* Procedure to list all of the terminal controllers in the
   emacs_terminal_ctls search paths.
   Originally coded: 1 July 1981 by Richard Mark Soley.
   Modified: 6 July 1981 RMSoley for find_ctl and ".ctl" names.
   Switched to object segment search rules BIM August 1981.
   Removed support for old style names ending in "ctl" WMY 08/21/81
   Duplicate dir detection, restoration of support for old names
   only for find, not for list, BIM, shortly thereafter.
   Modified: 20 December 1983 B. Margolin to fix cleanup handler to
	   not do non-local exit.
*/

/* Parameters */
	dcl     P_type		 character (*) parameter;

/* System Entries */
	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
	dcl     com_err_		 entry () options (variable);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     get_wdir_		 entry () returns (char (168));
	dcl     hcs_$make_ptr	 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				 fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$nnl		 entry () options (variable);
	dcl     hcs_$get_search_rules	 entry (ptr);
	dcl     sort_items_$char	 entry (ptr, fixed bin (24));
	dcl     user_info_$homedir	 entry (char (*));
	declare expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	declare hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
						/* Conditions */
	dcl     cleanup		 condition;

/* Static */
	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$nomatch	 fixed bin (35) ext static;

/* Based */
	dcl     ap		 pointer,
	        al		 fixed bin (21),
	        arg		 char (al) based (ap);
	dcl     char32		 character (32) based;

/* Automatic */
	dcl     area_ptr		 pointer;
	dcl     code		 fixed bin (35);
	dcl     count		 fixed bin (35);
	dcl     dirname		 char (168);
	dcl     have_printed_header	 bit (1) aligned initial ("0"b);
	dcl     idx		 fixed bin;
	dcl     jdx		 fixed bin;

	dcl     me		 char (32) initial ("list_emacs_ctls");
	dcl     starname		 char (32) initial ("*");
	dcl     temp_ptr		 pointer;
	dcl     terminal		 char (32) varying;
	dcl     type		 character (32);

	dcl     1 search_rules	 aligned,
		2 n_directories	 fixed bin,
		2 dir_names	 (22) character (168);

/* Builtin */
	dcl     (addr, codeptr, hbound, length, max, min, null, rtrim, substr, translate)
				 builtin;

/* Include Files */
%include star_structures;
%include status_structures;
	declare 1 SB		 aligned like status_branch;

	area_ptr = get_system_free_area_ ();
	on cleanup call clean_up ();

/* See if there's an argument to pick up.
	   Set up starname for use by hcs_$star_ */
	call cu_$arg_ptr (1, ap, al, code);
	if code = 0
	then starname = substr (arg, 1, min (al, 29));
	if substr (starname, max (length (rtrim (starname)) - 1, 1), 2) = "**"
	then starname = substr (starname, 1, length (rtrim (starname)) - 1);
	starname = translate (starname, "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");


	search_rules.n_directories = 0;
	call hcs_$get_search_rules (addr (search_rules));
	if search_rules.n_directories = 0
	then
no_ctls:
	     do;
		call com_err_ (0, me, "No emacs ctls can be found via the search rules.");
		return;
	     end;

dir_list:
	begin;
	     declare dirx		      fixed bin;
	     declare dir_uids	      (search_rules.n_directories) bit (36);
	     declare dir_dir	      character (168);
	     declare dir_entryname	      character (32);

	     dir_uids (*) = (36)"0"b;

	     do idx = 1 to search_rules.n_directories;

		star_entry_ptr = null;
		star_names_ptr = null;

		dirname = search_rules.dir_names (idx);

		if dirname = "working_dir"
		then dirname = get_wdir_ ();

		else if dirname = "referencing_dir"
		then call hcs_$fs_get_path_name (codeptr (list_emacs_ctls), dirname, (0), "", (0));

		else if dirname = "initiated_segments"
		then go to give_up;			/* we cant look at all the refnames */

		call expand_pathname_ (dirname, dir_dir, dir_entryname, (0));
						/* we trust hcs_$get... */
		call hcs_$status_long (dir_dir, dir_entryname, 1, addr (SB), null, code);
		if code = 0
		then do;
			dir_uids (idx) = SB.uid;
			do dirx = 1 to idx - 1;	/* perhaps 0 trip */
			     if dir_uids (dirx) = dir_uids (idx)
			     then go to give_up;	/* been here before */
			end;
		     end;

/* Now have directory to look in.  Look in it! */

		call hcs_$star_ (dirname, rtrim (starname) || ".ctl", star_ALL_ENTRIES, area_ptr, star_entry_count,
		     star_entry_ptr, star_names_ptr, code);

		if code = error_table_$nomatch
		then go to end_loop;

		if code ^= 0
		then do;
			call com_err_ (code, me, "Can't get listing of ctls in ^a.", dirname);
			go to end_loop;
		     end;

		count = hbound (star_names, 1);
		if count = 0
		then go to end_loop;

		begin;
		     dcl sorted_names (count) char (28) varying;
		     dcl	   1 v		      aligned,
			     2 n		      fixed bin (24),
			     2 vector	      (count) pointer unaligned;

		     do jdx = 1 to count;
			v.vector (jdx) = addr (star_names (jdx));
		     end;

/* Sort the entries alphabetically. */
		     v.n = count;
		     call sort_items_$char (addr (v), 32);

/* Now have listing of some entries.  Print them (and
		header if haven't yet. */
		     if ^have_printed_header
		     then do;
			     have_printed_header = "1"b;
			     call ioa_ ("Listing of Emacs terminal controllers:^/");
			end;

		     call ioa_ ("   in ^a", dirname);
		     do jdx = 1 to count;
			terminal =
			     /* translate (*/ rtrim (v.vector (jdx) -> char32)/*, "abcdefghijklmnopqrstuvwxyz",
			     "ABCDEFGHIJKLMNOPQRSTUVWXYZ")*/;
			sorted_names (jdx) = substr (terminal, 1, length (terminal) - length (".ctl"));
		     end;
		     call ioa_$nnl ("^(^8x^3(^20a^5x^)^/^)", sorted_names);
		end;
end_loop:
		if star_names_ptr ^= null ()
		then free star_names;
		if star_entry_ptr ^= null ()
		then free star_entries;

give_up:
	     end;
	end dir_list;

	if ^have_printed_header
	then call ioa_ ("No Emacs terminal controllers found.");

	call ioa_ ("");
	call clean_up ();

	return;

clean_up: proc ();

	if star_names_ptr ^= null ()
	then free star_names;
	if star_entry_ptr ^= null ()
	then free star_entries;

	return;

     end clean_up;
     

find_ctl:
     entry (P_type) returns (character (168));

/* This entry returns the full pathname of a ctl if found,
	   or null string if not. */

	declare tried_both		 bit (1) aligned;

	if length (P_type) > 168
	then return ("");				/* its just impossible... */

	type = rtrim (P_type) || ".ctl";
	tried_both = "0"b;

	do while ("1"b);

	     call hcs_$make_ptr (codeptr (list_emacs_ctls), type, "symbol_table", temp_ptr, code);

	     if temp_ptr ^= null
	     then do;
		     call hcs_$fs_get_path_name (temp_ptr, dirname, (0), "", code);
		     if code = 0
		     then return (rtrim (dirname) || ">" || type);
		end;

	     if tried_both
	     then return ("");			/* No can do */
	     tried_both = "1"b;
	     type = rtrim (P_type) || "ctl";
	end;
     end list_emacs_ctls;
