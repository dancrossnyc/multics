/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
task_ctl_:
     procedure;

/* Task control primitives */
/* written by C. Hornig, Decmeber 1978 */

dcl  (
     Task bit (36) aligned,
     Create_data pointer,
     Condition character (*),
     Info_ptr pointer,
     Code fixed (35)
     ) parameter;

dcl  based_ptr pointer based;
dcl  based_fb fixed bin based;

dcl  (
     C32_DESC init ("524000000040"b3),
     PTR_DESC init ("464000000000"b3),
     MASK_ALL init ("000000000000"b3),
     UNMASK_ALL init ("777777777776"b3)
     ) bit (36) aligned static options (constant);

dcl  (
     iox_$user_input,
     iox_$user_output,
     iox_$error_output
     ) external ptr;
dcl  sys_info$max_seg_size fixed bin (19) external;

dcl  error_table_$bad_arg fixed (35) external;

dcl  cu_$get_cl_intermediary entry (entry);
dcl  cu_$set_cl_intermediary entry (entry);
dcl  get_ring_ entry returns (fixed bin (3));
dcl  get_temp_segment_ entry (char (*), pointer, fixed (35));
dcl  hcs_$get_process_usage entry (pointer, fixed bin (35));
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  ioa_$rsnnl entry () options (variable);
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$move_attach entry (ptr, ptr, fixed bin (35));
dcl  ipc_$run entry;
dcl  release_area_ entry (ptr);
dcl  release_temp_segment_ entry (char (*), pointer, fixed (35));
dcl  signal_ entry options (variable);
dcl  task_alm_$task_signal_caller_tv entry;
dcl  task_alm_$switch_stacks entry (pointer);
dcl  task_create_ entry (ptr, ptr, fixed bin (35));
dcl  task_init_ entry;
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  xhcs_$set_stack_ptr entry (pointer);

dcl  1 task_signal_frame aligned based (sp),
       2 f aligned like stack_frame,
       2 arg_list_header,
         3 arg_count uns fixed bin (17) unal,
         3 code uns fixed bin (19) unal,
         3 desc_count uns fixed bin (17) unal,
         3 pad bit (19) unal,
       2 ap (3) ptr,				/* argument pointers */
       2 dp (3) ptr,				/* descriptor pointers */
       2 infop ptr,					/* ptr to info */
       2 cname char (32),				/* condition name */
       2 info (info_length) bit (36) aligned;

dcl  based_info (info_length) bit (36) aligned based;

dcl  1 my_task_data aligned like task_data based (my_task_ptr);

dcl  info_length fixed bin;
dcl  my_task_ptr pointer;
dcl  saved_mask bit (36) aligned;
dcl  scheduledp bit (1) aligned;
dcl  code fixed bin (35);

dcl  (addr, addrel, baseno, baseptr, binary, bit, clock, codeptr, length, mod, null, pointer, rel, size, stackbaseptr,
     stackframeptr, string, substr, unspec) builtin;

dcl  any_other condition;
%page;
/* * * * * * * * * * CREATE * * * * * * * * * */

create:
     entry (Create_data, Task, Code);

	Code = 0;
	Task = ""b;
	if tasking_data_ptr_ = null () then call task_init_;

	call task_create_ (Create_data, task_data_ptr, Code);
	if Code ^= 0 then return;

	call hcs_$set_ips_mask (MASK_ALL, saved_mask);	/* mask down for rethreading */

	task_data.elder_sister = task_data.mother -> task_data.youngest_daughter;

	if task_data.mother -> task_data.youngest_daughter ^= null ()
	then task_data.mother -> task_data.youngest_daughter -> task_data.younger_sister = task_data_ptr;
	task_data.mother -> task_data.youngest_daughter = task_data_ptr;

	tasking_data.valid_tasks (binary (baseno (task_data.sb))) = "1"b;

	call hcs_$reset_ips_mask (saved_mask, saved_mask);

	Task = task_data.task_id;

return_to_caller:
	return;

/* * * * * * * * * * DESTROY * * * * * * * * * */

destroy:
     entry (Task, Code);

	Code = 0;
	call find_task;
	call find_my_task;
	goto mark_as_dead;

/* * * * * * * * * * DIE * * * * * * * * * */

die:
     entry;

	if tasking_data_ptr_ = null () then call task_init_;
	call find_my_task;
	goto my_task_data.abort;

death:
     entry;

	call find_my_task;
	task_data_ptr = my_task_ptr;

mark_as_dead:
	call hcs_$set_ips_mask (MASK_ALL, saved_mask);
	call update_state (DEAD);
	tasking_data.valid_tasks (binary (baseno (task_data.sb))) = "0"b;
	tasking_data.dead_tasks = "1"b;

	if my_task_data.state = DEAD
	then
find_something_to_do:
	     if ^sked () then do;
		call hcs_$set_ips_mask (UNMASK_ALL, (""b));
		call ipc_$run;
		end;

	call hcs_$reset_ips_mask (saved_mask, saved_mask);
	return;

/* * * * * * * * * * CURRENT_TASK * * * * * * * * * */

current_task:
     entry returns (bit (36) aligned);

	if tasking_data_ptr_ = null () then call task_init_;
	call find_my_task;
	return (my_task_data.task_id);

/* * * * * * * * * * GET_TASK_USAGE * * * * * * * * * */

get_task_usage:
     entry (Task, Info_ptr, Code);

	if tasking_data_ptr_ = null ()
	then call hcs_$get_process_usage (Info_ptr, Code);
	else do;
	     Code = 0;
	     call find_task;
	     call find_my_task;
	     if task_data_ptr = my_task_ptr then call meter (task_data.meters);
	     process_usage_pointer = Info_ptr;
	     process_usage.number_can_return = 5;
	     if process_usage.number_wanted > 0 then process_usage.cpu_time = task_data.tcpu;
	     if process_usage.number_wanted > 1 then process_usage.paging_measure = task_data.mem;
	     if process_usage.number_wanted > 2 then process_usage.page_faults = task_data.pf;
	     if process_usage.number_wanted > 4 then process_usage.virtual_cpu_time = task_data.vcpu;
	     call hcs_$reset_ips_mask (saved_mask, saved_mask);
	     end;
	return;

/* * * * * * * * * * START * * * * * * * * * */

start:
     entry (Task, Code);

	Code = 0;
	call find_task;
	call update_state (READY);
	call hcs_$reset_ips_mask (saved_mask, saved_mask);
	return;

/* * * * * * * * * * STOP * * * * * * * * * */

stop:
     entry (Task, Code);

	Code = 0;
	call find_task;
	call update_state (STOPPED);
	call hcs_$reset_ips_mask (saved_mask, saved_mask);
	return;

/* * * * * * * * * * SIGNAL * * * * * * * * * */

signal:
     entry (Task, Condition, Info_ptr, Code);

	Code = 0;
	call find_task;
	call find_my_task;
	if task_data_ptr = my_task_ptr then do;		/* easy way */
	     call signal_ (Condition, null (), Info_ptr, null ());
	     return;
	     end;

	sb = task_data.sb;
	sp = stack_header.stack_end_ptr;

	if Info_ptr = null ()
	then info_length = 0;
	else info_length = Info_ptr -> based_fb;

	stack_frame.next_sp,			/* push a stack frame */
	     stack_header.stack_end_ptr = addrel16 (sp, size (task_signal_frame));
	stack_frame.prev_sp = stack_header.bar_mode_sp;
	stack_frame.return_ptr = codeptr (task_alm_$task_signal_caller_tv);
	stack_frame.arg_ptr = addr (task_signal_frame.arg_list_header);
	stack_frame.translator_id = "000001"b3;

	task_signal_frame.arg_count, task_signal_frame.desc_count = 3;
	task_signal_frame.code = 4;
	task_signal_frame.ap (1) = addr (task_signal_frame.cname);
	task_signal_frame.ap (2) = addr (stack_header.null_ptr);
	task_signal_frame.ap (3) = addr (task_signal_frame.infop);
	task_signal_frame.dp (1) = addr (C32_DESC);
	task_signal_frame.dp (2), task_signal_frame.dp (3) = addr (PTR_DESC);
	task_signal_frame.infop = addr (task_signal_frame.info);
	task_signal_frame.cname = Condition;
	if Info_ptr ^= null () then task_signal_frame.info = Info_ptr -> based_info;

	stack_header.bar_mode_sp = sp;
	goto wake;

/* * * * * * * * BLOCK * * * * * * * * * */

block:
     entry;

	if tasking_data_ptr_ = null () then call task_init_;
	call find_my_task;
	task_data_ptr = my_task_ptr;
	call hcs_$set_ips_mask (MASK_ALL, saved_mask);
	if task_data.state = READY then do;
	     call update_state (BLOCKED);
	     end;					/*
						   call hcs_$reset_ips_mask (saved_mask, saved_mask);
						   return;
						*/
	goto find_something_to_do;

/* * * * * * * * * * WAKEUP * * * * * * * * * */

wakeup:
     entry (Task, Code);

	Code = 0;
	call find_task;
wake:
	if task_data.state = BLOCKED then do;
	     call update_state (READY);
	     end;
	call hcs_$reset_ips_mask (saved_mask, saved_mask);
	return;

/* * * * * * * * * * SCHEDULE * * * * * * * * * */

schedule:
     entry returns (bit (1) aligned);

	if tasking_data_ptr_ = null () then call task_init_;
	call find_my_task;
	call hcs_$set_ips_mask (MASK_ALL, saved_mask);
	scheduledp = sked ();
	call hcs_$reset_ips_mask (saved_mask, saved_mask);
	return (scheduledp);

sked:
     procedure returns (bit (1) aligned);
dcl  best_task pointer;
dcl  best_value fixed bin (35);

	call meter (my_task_data.meters);
	if (my_task_data.vcpu_limit > 0) & (my_task_data.meters.vcpu > my_task_data.vcpu_limit)
	     & (my_task_data.state ^= DEAD)
	then goto my_task_data.abort;			/* over CPU limit */

	best_task = null ();
	best_value = -34359738367;
	do task_data_ptr = tasking_data.ready_head repeat (task_data.ready_next) while (task_data_ptr ^= null ());

	     if task_data.priority > best_value then do;
		best_value = task_data.priority;
		best_task = task_data_ptr;
		end;
	end;

	if best_task = null () then return ("0"b);

	task_data_ptr = best_task;
	if task_data.ready_next ^= null () then do;	/* rethread at end */
	     call thread_out;
	     call thread_in;
	     end;

	if my_task_ptr ^= task_data_ptr
	then begin;

/* ***** SWITCH TASKS ***** */

	     my_task_data.ips_mask = saved_mask;
	     call iox_$move_attach (iox_$user_input, my_task_data.ui_iocb, code);
	     call iox_$move_attach (iox_$user_output, my_task_data.uo_iocb, code);
	     call iox_$move_attach (iox_$error_output, my_task_data.eo_iocb, code);
	     call cu_$get_cl_intermediary (my_task_data.cl_intermediary);
	     call xhcs_$set_stack_ptr (task_data.sb);
	     call task_alm_$switch_stacks (task_data.sb);
	     call cu_$set_cl_intermediary (my_task_data.cl_intermediary);
	     call iox_$move_attach (my_task_data.ui_iocb, iox_$user_input, code);
	     call iox_$move_attach (my_task_data.uo_iocb, iox_$user_output, code);
	     call iox_$move_attach (my_task_data.eo_iocb, iox_$error_output, code);
	     saved_mask = my_task_data.ips_mask;

/* ***** DONE STACK SWITCHING * ****/

	end;

	if tasking_data.dead_tasks then do;
	     tasking_data.dead_tasks = "0"b;
	     call gc_dead_tasks (addr (tasking_data.root_task_data));
	     end;
	call meter (overhead_meters);
	return ("1"b);
     end sked;

/* * * * * * * * * * * * * * * * * * * */

find_task:
     procedure;
dcl  segno unsigned fixed bin (18);
dcl  task bit (36) aligned;

	task = Task;				/* copy arguments */
	call hcs_$set_ips_mask (MASK_ALL, saved_mask);

	task_data_ptr = get_tdp (task);
	if task_data_ptr ^= null () then return;

	call hcs_$reset_ips_mask (saved_mask, saved_mask);
	Code = error_table_$bad_arg;
	goto return_to_caller;

     end find_task;

/* * * * * * * * * */

get_tdp:
     procedure (Task) returns (ptr);
dcl  Task bit (36) aligned parameter;
dcl  tdp ptr;
dcl  segno fixed bin (15);

	segno = binary (substr (Task, 1, 18), 15);
	if tasking_data.valid_tasks (segno) then do;
	     tdp = pointer (baseptr (segno), TASK_DP) -> based_ptr;
	     if tdp -> task_data.task_id = Task then return (tdp);
	     end;
	return (null ());
     end get_tdp;

/* * * * * * * * * */

find_my_task:
     procedure;
	my_task_ptr = pointer (stackbaseptr (), TASK_DP) -> based_ptr;
     end find_my_task;

/* * * * * * * * * */

gc_dead_tasks:
     procedure (Tdp) recursive;
dcl  Tdp ptr parameter;
dcl  (tdp, next_tdp) ptr;

	do tdp = Tdp -> task_data.youngest_daughter repeat (next_tdp) while (tdp ^= null ());
	     next_tdp = tdp -> task_data.elder_sister;
	     call gc_dead_tasks (tdp);
	end;
	if (Tdp -> task_data.state = DEAD) & (Tdp -> task_data.youngest_daughter = null ()) then call kill (Tdp);
	return;

     end gc_dead_tasks;

/* * * * * * * * * */

kill:
     procedure (Tdp);
dcl  Tdp pointer parameter;
dcl  code fixed bin (35);

	call iox_$detach_iocb (Tdp -> task_data.ui_iocb, code);
	call iox_$detach_iocb (Tdp -> task_data.uo_iocb, code);
	call iox_$detach_iocb (Tdp -> task_data.eo_iocb, code);
	call iox_$destroy_iocb (Tdp -> task_data.ui_iocb, code);
	call iox_$destroy_iocb (Tdp -> task_data.uo_iocb, code);
	call iox_$destroy_iocb (Tdp -> task_data.eo_iocb, code);

	if Tdp -> task_data.task_area_ptr ^= null () then call release_area_ (Tdp -> task_data.task_area_ptr);

	if Tdp -> task_data.younger_sister = null ()
	then Tdp -> task_data.mother -> task_data.youngest_daughter = Tdp -> task_data.elder_sister;
	else Tdp -> task_data.younger_sister -> task_data.elder_sister = Tdp -> task_data.elder_sister;
	if Tdp -> task_data.elder_sister ^= null ()
	then Tdp -> task_data.elder_sister -> task_data.younger_sister = Tdp -> task_data.younger_sister;
	call release_temp_segment_ ("task_ctl_", Tdp -> task_data.sb, (0));
	return;

     end kill;

/* * * * * * * * * */

meter:
     procedure (Meters);
dcl  1 Meters aligned like task_data.meters parameter;
dcl  1 pu aligned like process_usage;

	pu.number_wanted = 5;
	call hcs_$get_process_usage (addr (pu), (0));
	Meters.tcpu = Meters.tcpu + pu.cpu_time - old_pu.tcpu;
	old_pu.tcpu = pu.cpu_time;
	Meters.vcpu = Meters.vcpu + pu.virtual_cpu_time - old_pu.vcpu;
	old_pu.vcpu = pu.virtual_cpu_time;
	Meters.mem = Meters.mem + pu.paging_measure - old_pu.mem;
	old_pu.mem = pu.paging_measure;
	Meters.pf = Meters.pf + pu.page_faults - old_pu.pf;
	old_pu.pf = pu.page_faults;
     end meter;

/* * * * * * * * * * UPDATE_STATE * * * * * * * * * */

update_state:
     procedure (State);
dcl  State fixed bin;

	if task_data.state = State then return;
	if task_data.state = READY then do;		/* must unthread the task */
	     call thread_out;
	     end;
	if State = READY then do;			/* must thread the task */
	     call thread_in;
	     end;
	task_data.state = State;
     end update_state;

/* * * * * * * * * */

addrel16:
     procedure (Ptr, Offset) returns (ptr);
dcl  Ptr ptr parameter;
dcl  Offset fixed bin parameter;
dcl  offset uns fixed bin (18);

	offset = binary (rel (Ptr), 18) + Offset + 15;
	return (pointer (Ptr, offset - mod (offset, 16)));
     end addrel16;

/* * * * * * * * * */

thread_in:
     procedure;

	task_data.ready_last = tasking_data.ready_tail;
	task_data.ready_next = null ();
	if tasking_data.ready_tail ^= null ()
	then tasking_data.ready_tail -> task_data.ready_next = task_data_ptr;
	else tasking_data.ready_head = task_data_ptr;
	tasking_data.ready_tail = task_data_ptr;
	return;

     end thread_in;

/* * * * * * * * * */

thread_out:
     procedure;

	if task_data.ready_last = null ()
	then tasking_data.ready_head = task_data.ready_next;
	else task_data.ready_last -> task_data.ready_next = task_data.ready_next;
	if task_data.ready_next = null ()
	then tasking_data.ready_tail = task_data.ready_last;
	else task_data.ready_next -> task_data.ready_last = task_data.ready_last;
	task_data.ready_next, task_data.ready_last = null ();
	return;

     end thread_out;
%page;
%include tasking_data;
%include stack_header;
%include stack_frame;
%include process_usage;

     end task_ctl_;
