/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1978 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


e_info_vfilesman_$open:
     proc (a_env_dir, a_upd_sw, a_code);

/* This program manipulates the EMACS command info vfile. BSG 9/26/78 */
%include rs_info;
%include iox_modes;
	dcl     iox_$seek_key	 entry (ptr, char (256) varying, fixed bin (21), fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$write_record	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     iox_$rewrite_record	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     viocbp		 ptr init (null ()) static;
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     s_upd_sw		 fixed bin (1) static;
	dcl	null		 builtin;
	dcl     a_env_dir		 char (*);
	dcl     a_upd_sw		 fixed bin (1);
	dcl     info_ptr		 ptr,
	        1 rsi		 like rs_info aligned automatic;
	dcl     a_code		 fixed bin (35);
	dcl     code		 fixed bin (35);

	if viocbp ^= null & a_upd_sw = 1 & s_upd_sw = 0
	then call close;
	if viocbp = null
	then do;
		call iox_$attach_name ("emacs_info_vfile_", viocbp,
		     "vfile_ " || rtrim (a_env_dir) || ">emacs_info_vfile_ -share",
		     null (), a_code);
		if a_code = 0
		then do;
			if a_upd_sw = 0
			then call iox_$open (viocbp, Keyed_sequential_input, "0"b, a_code);
			else call iox_$open (viocbp, Keyed_sequential_update, "0"b, a_code);
			if a_code ^= 0
			then call iox_$detach_iocb (viocbp, (0));
		     end;
		if a_code = 0
		then s_upd_sw = a_upd_sw;
		else viocbp = null;
	     end;
	else a_code = 0;
	return;



seek:
	entry (a_key, a_code);

	dcl     a_key		 char (*) varying;
	dcl     key		 char (256) varying;

	key = a_key;				/* Copy for dcl compat */
	call iox_$seek_key (viocbp, key, (0), a_code);
	return;


get_recp:
	entry (a_recp, a_recl, a_code);

	dcl     a_recp		 ptr,
	        a_recl		 fixed bin (21);

	a_recp = null ();
	unspec (rsi) = "0"b;
	rsi.version = rs_info_version_2;
	call iox_$control (viocbp, "record_status", addr (rsi), a_code);

	if a_code ^= 0
	then return;
	a_recp = rsi.record_ptr;
	a_recl = rsi.record_length;
	return;


update:
	entry (a_data, a_updsw1, a_code);

	dcl     a_data		 char (*);
	dcl     a_updsw1		 fixed bin (1);
	if a_updsw1 = 1
	then call iox_$write_record (viocbp, addr (a_data), length (a_data), a_code);
	else call iox_$rewrite_record (viocbp, addr (a_data), length (a_data), a_code);
	return;

close:
	entry ();


	if viocbp ^= null
	then do;
		call iox_$close (viocbp, (0));
		call iox_$detach_iocb (viocbp, (0));
	     end;
	viocbp = null;
	return;
     end;

