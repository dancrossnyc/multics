/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1978 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,idind22 */
multics_emacs:
emacs:
     procedure () options (variable);

	go to emacs_start;

/* Command interface to Multics EMACS editor. */


/****^  HISTORY COMMENTS:
  1) change(82-04-12,Margolin), approve(), audit(),
     install(86-11-03,MR12.0-1205):
     Pre-hcom comments:
     03/22/78 by BSG
     Last modified:      03/23/78 by GMP for temporary segment manager
     Last modified:      03/26/78 by GMP for debugging entries and to differentiate
     FNP and Network usage.
     Last modified:      21 April 1978 by RSL to restore modes after usage
     Last modified:27 August 1978 by GMP to remove FNP/Network differentiation,
     and put save/restore modes into push/pop level
     Last modified:      24 November 1978 by BSG to
     implement e_pl1_$push_pop_tbl_swap)
     Last Modified:      3 May 1979 by BIM for logging
     Last Modified:   7 May 1979 by BSG for lisp_linkage_error
     Last Modified:   9 May 1979 by BSG for integration with new_emacs,
     better logging
     Last Modified 28 Feb 1980 by BSG for >sc1>emacs_dir
     Last Modified 17 June 1981 by RMSoley for emacs$get_my_name and friends.
     Last Modified 7 July 1981 RMSoley for emacs$get_version and to use
     emacs_data_$version for saved environment name.
     Last Modified 10 July 1981 RMSoley for logging changes
     Last Modified 14 July 1981 RMSoley for info_ptr in emacs_ and
     emacs$get_info_ptr
     Last Modified 22 July 1981 RMSoley to move parsing to PL/1,
     fully use emacs_data_ static, add tasking, and clean up.
     Last Modified: August 1981 RMSoley: fix tasking, get rid
     of push_pop_tbl_swap technology, fix invocation workings.
     Modified: 3 April 1982 Richard Soley to fix lisp_save_ message
                  received during installation window.
     Modified: 12 April 1982 Richard Soley to remove site-dir dependence.
  2) change(86-07-17,Margolin), approve(86-07-17,MCR7452),
     audit(86-07-29,Coren), install(86-11-03,MR12.0-1205):
     Changed pop_level to turn off video if Emacs turned it on automatically.
                                                   END HISTORY COMMENTS */


/* System Entries */
	dcl     cu_$arg_ptr_rel	entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	dcl     cu_$cl		entry ();
	dcl     com_err_$suppress_name
				entry options (variable);
	dcl     cu_$arg_list_ptr	entry () returns (pointer);
	dcl     ioa_$ioa_switch	entry options (variable);
	dcl     e_argument_parse_	entry (ptr, char (*), fixed bin (35));
	dcl     e_argument_parse_$subroutine
				entry (ptr, char (*), char (*), ptr);
	dcl     e_pl1_$dump_out_console_messages
				entry ();
	dcl     e_pl1_$return_echo_meters
				entry (fixed bin, fixed bin, fixed bin, fixed bin);
	dcl     e_pl1_$set_multics_tty_modes
				entry ();
	dcl     e_pl1_$get_terminal_type
				entry (char (*) varying);
	dcl     e_tasking_		entry (pointer, fixed bin (35));
	dcl     expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35));
	dcl     find_condition_info_	entry (ptr, ptr, fixed bin (35));
	dcl     forward_command_	entry (pointer, entry, character (*));
	dcl     get_group_id_	entry () returns (char (32));
	dcl     get_system_free_area_ entry () returns (pointer);
	dcl     get_temp_segment_	entry (character (*), pointer, fixed binary (35));
	dcl     hcs_$fs_get_path_name entry (entry, character (*), fixed binary, character (*), fixed binary (35));
	dcl     hcs_$initiate	entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				fixed bin (35));
	dcl     hcs_$get_process_usage
				entry (ptr, fixed bin (35));
	dcl     hcs_$get_user_effmode entry (char (*), char (*), char (*), fixed bin (3), fixed bin (5), fixed bin (35))
				;
	dcl     hcs_$status_minf	entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				fixed bin (35));
	dcl     ioa_$rsnnl		entry options (variable);
	dcl     iox_$modes		entry (pointer, character (*), character (*), fixed binary (35));
	dcl     lisp$lisp		entry () options (variable);
	dcl     user_info_$terminal_data
				entry (char (*), char (*), char (*), fixed bin, char (*));
	dcl     video_utils_$turn_off_login_channel
				entry (fixed bin (35));
	dcl     write_log_$write_log_test
				entry (char (*));
	dcl     write_log_$write_log_file
				entry (fixed bin (71), fixed bin, char (*), char (*), ptr);
	dcl     release_temp_segments_
				entry (character (*), (*) pointer, fixed binary (35));
	dcl     release_temp_segment_ entry (character (*), pointer, fixed binary (35));

/* Automatic */
	dcl     cgmeter		fixed bin;
	dcl     1 cinfo		like condition_info aligned automatic;
	dcl     code		fixed bin (35);
	dcl     edirl		fixed bin;
	dcl     env_name		char (32);
	dcl     groupid		character (32);
	dcl     idx		fixed bin;
	dcl     line_type		fixed bin;
	dcl     locemeter		fixed bin;
	dcl     log_name		char (32);
	dcl     log_ptr		pointer;
	dcl     loser		character (256) varying;
	dcl     lstring		char (116);
	dcl     mode		fixed bin (5);
	dcl     myname		char (32);
	dcl     n_to_allocate	fixed bin;
	dcl     netsw		bit (1);
	dcl     1 new_usage_info	automatic aligned like process_usage;
	dcl     outmeter		fixed bin;
	dcl     p			pointer;
	dcl     r0emeter		fixed bin;
	dcl     temp_ptr		pointer;
	dcl     temp_string		character (168);
	dcl     termid		char (4);
	dcl     time_in		fixed bin (71);
	dcl     ttychan		character (32);
	dcl     ttytype		character (32);
	dcl     1 usage_info	automatic aligned like process_usage;
	dcl     vtyp		character (100) varying;

/* External Static */
	dcl     emacs_data_$invocation_list
				pointer static external;
	dcl     emacs_data_$log_dir	character (168) static external;
	dcl     emacs_data_$status_code
				fixed bin (35) static external;
	dcl     emacs_data_$version	character (10) static external;
	dcl     iox_$user_io	pointer external;

/* Internal Static */
	dcl     isw		bit (1) static initial ("0"b);
	dcl     log_subdir		char (32) static options (constant) init ("log_dir");
	dcl     names		(2) character (32) static options (constant)
				initial ("lisp", "lisp_static_vars_");
	dcl     system_area_ptr	pointer static internal initial (null ());

/* Builtin */
	dcl     (addr, clock, divide, hbound, index, length, null, rtrim, stackframeptr, substr)
				builtin;

/* Conditions */
	dcl     cleanup		condition;
	dcl     lisp_linkage_error	condition;
	dcl     record_quota_overflow condition;

/* Based */
	dcl     based_code		fixed bin (35) based;
	dcl     1 cond_info		aligned based,
		2 lth		fixed bin,
		2 version		fixed bin,
		2 action_flags	aligned,
		  3 cant_restart	bit (1) unal,
		  3 default_restart bit (1) unal,
		  3 pad		bit (34) unal,
		2 info_string	char (256) varying,
		2 status_code	fixed bin (35);
	dcl     system_area		area based (system_area_ptr);

/* Parameters */
	dcl     segment_ptr		pointer parameter;
	dcl     P_code		fixed bin (35);
	dcl     P_environment	char (*) parameter;
	dcl     P_info_ptr		pointer;
	dcl     P_iocb_ptr		pointer;
	dcl     P_pathname		char (*) parameter;

/* Include Files */
%include condition_info;
%include emacs_data;
%include line_types;
%include process_usage;

emacs_start:
	myname = "emacs";
	env_name = "emacs";
	log_name = "emacs_log";
	goto e_ne_common;

emacs_:
     entry (P_iocb_ptr, P_pathname, P_environment, P_info_ptr, P_code);

	myname = "emacs_";
	env_name = "emacs_";
	log_name = "emacs_log";
	go to e_ne_common;

ne:
new_emacs:
     entry options (variable);

	myname = "new_emacs";
	env_name = "new-emacs";
	log_name = "ne_log";

e_ne_common:
	emacs_data_$status_code = 0;

/* Push this invocation (it may be popped later.) */
	system_area_ptr = get_system_free_area_ ();
	allocate emacs_data in (system_area) set (emacs_data_ptr);
	emacs_data.prev_invocation = null ();
	emacs_data.next_invocation = emacs_data_$invocation_list;
	if emacs_data_$invocation_list ^= null () then
	     emacs_data_$invocation_list -> emacs_data.prev_invocation = emacs_data_ptr;
	emacs_data_$invocation_list = emacs_data_ptr;
	emacs_data.frame_ptr = stackframeptr ();

/* Parse argument list. */
	emacs_data.arg_list_ptr = cu_$arg_list_ptr ();
	code = 0;
	if myname ^= "emacs_" then
	     call e_argument_parse_ (emacs_data.arg_list_ptr, myname, code);
	else call e_argument_parse_$subroutine (P_iocb_ptr, P_pathname, P_environment, P_info_ptr);
	if code ^= 0 then return;

/* Now, if we are going to be tasking AND THERE IS A TASK AROUND,
   pop invocation list (saving arguments). */
	if emacs_data.arguments.no_task then go to escape_loop;

	do temp_ptr = emacs_data_$invocation_list repeat (temp_ptr -> emacs_data.next_invocation)
	     while (temp_ptr ^= null ());
	     if temp_ptr -> emacs_data.tasking.task_flags.in_task then do;
		temp_ptr -> emacs_data.arguments = emacs_data.arguments;
		emacs_data_ptr = temp_ptr;
		temp_ptr = emacs_data_$invocation_list -> emacs_data.next_invocation;
		free emacs_data_$invocation_list -> emacs_data in (system_area);
		emacs_data_$invocation_list = temp_ptr;
		emacs_data_$invocation_list -> emacs_data.prev_invocation = null ();
		go to escape_loop;
	     end;
	end;
escape_loop:
	if myname = "emacs_" then do;
	     emacs_data.info_ptr = P_info_ptr;
	     emacs_data.output_iocb, emacs_data.input_iocb = P_iocb_ptr;
	end;

	emacs_data.flags.new_arguments = "1"b;
	emacs_data.arg_list_ptr = cu_$arg_list_ptr ();
	emacs_data.myname = myname;
	emacs_data.env_name = rtrim (env_name) || "." || emacs_data_$version;
	emacs_data.log_name = log_name;

	call hcs_$fs_get_path_name (emacs, temp_string, edirl, (""), (0));
	emacs_data.edir = temp_string;
	if edirl < 168 then substr (emacs_data.edir, edirl + 1) = "";
	if ^isw then do;
	     do idx = 1 to hbound (names, 1);
		call hcs_$initiate ((emacs_data.edir), names (idx), names (idx), (0), (0), p, (0));
	     end;
	end;
	isw = "1"b;
	if emacs_data.myname = "emacs_" | emacs_data.myname = "emacs" then
	     emacs_data.ledir = emacs_data_$log_dir;
	else emacs_data.ledir = emacs_data.edir;

/* Check existence of lisp environment. */
	call hcs_$status_minf ((emacs_data.edir), rtrim (emacs_data.env_name) || ".sv.lisp", 1, 1 /* seg */, (0), code);
	if code ^= 0 then do;
	     call com_err_$suppress_name (0, emacs_data.myname,
		"A new version of emacs, version ^a, is being installed.", rtrim (emacs_data_$version));
	     call com_err_$suppress_name (0, emacs_data.myname, "Please wait 5 minutes and try again.");
	     return;
	end;

	mode = 0;
	call hcs_$get_user_effmode ((emacs_data.ledir), "metering.acs", "", 4, mode, code);
	if mode > 01000b then do;
	     usage_info.number_wanted = 5;
	     log_ptr = null ();
	     call hcs_$get_process_usage (addr (usage_info), (0));
	     call write_log_$write_log_test (rtrim (emacs_data.ledir) || ">" || log_subdir);
	     call user_info_$terminal_data (termid, ttytype, ttychan, line_type, (""));
	     netsw = (line_type = LINE_TELNET);
	     call ioa_$rsnnl ("^a: Entering ^a (^a) on ^a ^a ^a", lstring, length (lstring), get_group_id_ (),
		emacs_data.myname, rtrim (emacs_data_$version), ttytype, termid, ttychan);
	     time_in = clock ();
	     call write_log_$write_log_file (time_in, 0, lstring, (emacs_data.log_name), log_ptr);
	end;

	call push_level ();

	code = 0;					/* If this returns a non-zero code, then got error or already
						   ran an Emacs, punt. */
	call e_tasking_ (emacs_data_ptr, code);
	if code ^= 0 then return;
	go to not_tasking;

tasking_emacs:
     entry ();

	emacs_data_ptr = emacs_data_$invocation_list;
	emacs_data.frame_ptr = stackframeptr ();

not_tasking:
	on cleanup
	     begin;
		emacs_data_ptr = e_find_invocation_ ();
		call pop_level ();
		call unthread_invocation ();
	     end;

	on lisp_linkage_error call llerror ();

	on record_quota_overflow call rqoerror ();

/* Now forward to Lisp. */
	call forward_command_ (emacs_data.arg_list_ptr, lisp$lisp,
	     rtrim (emacs_data.edir) || ">" || rtrim (emacs_data.env_name));
	call pop_level ();

	if emacs_data.myname = "emacs_" then P_code = emacs_data.status_code;
	call unthread_invocation ();
returner:
	return;

llerror:
     procedure ();

	emacs_data_ptr = e_find_invocation_ ();
	call pop_level;

/* Figure out exactly what part of emacs failed. */
	call find_condition_info_ (null (), addr (cinfo), code);
	if code ^= 0 then
	     loser = rtrim (emacs_data.myname);
	else do;
	     loser = cinfo.info_ptr -> cond_info.info_string;
	     if substr (loser, 1, 4) ^= "The " then
		loser = rtrim (emacs_data.myname);
	     else do;
		loser = substr (loser, 5);
		idx = index (loser, " ");
		loser = substr (loser, 1, idx - 1);
	     end;
	end;

	call com_err_$suppress_name (0, emacs_data.myname, "A new version of ^a, a part of ^a, has been installed.",
	     loser, emacs_data.myname);
	call com_err_$suppress_name (0, emacs_data.myname,
	     "Please issue the ""tmr ^a"" command in order to be able to use it.", loser);
	call unthread_invocation ();
	go to returner;
     end;

rqoerror:
     procedure ();
	emacs_data_ptr = e_find_invocation_ ();
	call e_pl1_$set_multics_tty_modes ();
	call ioa_$ioa_switch (iox_$user_io,
	     "^/^a: There has been a record quota overflow.  Delete unnecessary segments", emacs_data.myname);
	call ioa_$ioa_switch (iox_$user_io, "and issue the ""^[^a^;pi^s^]"" command to re-enter ^a.",
	     emacs_data.tasking.task_flags.in_task, emacs_data.myname, emacs_data.myname);

	revert record_quota_overflow;
	call cu_$cl ();
	on record_quota_overflow call rqoerror ();
	return;
     end rqoerror;

unthread_invocation:
     procedure ();

/* Don't unthread if this is a tasking invocation, or
   e_tasking_ won't be able to destroy.
   16 April 1982 RMSoley: new way is to just release through
   the entire stack, so DO unthread tasking invocations.
   if emacs_data.tasking.task_flags.in_task then return; */

	if emacs_data_$invocation_list = emacs_data_ptr then emacs_data_$invocation_list = emacs_data.next_invocation;
	if emacs_data.next_invocation ^= null () then
	     emacs_data.next_invocation -> emacs_data.prev_invocation = emacs_data.prev_invocation;
	if emacs_data.prev_invocation ^= null () then
	     emacs_data.prev_invocation -> emacs_data.next_invocation = emacs_data.next_invocation;
	free emacs_data;
	return;
     end unthread_invocation;

/* This entry allows the lisp side of emacs find out what name we were
   called with, emacs/emacs_/new_emacs.    RMSoley 17 June 1981 */

get_my_name:
     entry () returns (char (32));

	emacs_data_ptr = e_find_invocation_ ();

	return (emacs_data.myname);

/* This entry allows the lisp side to set a return code for emacs_ */

set_emacs_return_code:
     entry (P_return_code);
	dcl     P_return_code	fixed bin (35);

	emacs_data_ptr = e_find_invocation_ ();

	emacs_data.status_code = P_return_code;
	emacs_data_$status_code = P_return_code;

	if emacs_data.myname ^= "emacs_" then return;

/* Now patch it into the argument list.
   Have to go through this hair since the argument list
   might be on another stack ! */

	call cu_$arg_ptr_rel (5, temp_ptr, (0), (0), emacs_data.arg_list_ptr);
	temp_ptr -> based_code = P_return_code;

	return;

/* This entry returns the current emacs version string. */

get_version:
     entry () returns (character (10));

	return (emacs_data_$version);

/* This entry is called by the lisp side to set redisplay meters. */

set_lisp_rdis_meters:
     entry (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10);

	declare (P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10)
				fixed bin;
	declare (static_rdis_1, static_rdis_2, static_rdis_3, static_rdis_4, static_rdis_5, static_rdis_6,
	        static_rdis_7, static_rdis_8, static_rdis_9, static_rdis_10)
				static internal fixed bin init (0);

	static_rdis_1 = P_1;
	static_rdis_2 = P_2;
	static_rdis_3 = P_3;
	static_rdis_4 = P_4;
	static_rdis_5 = P_5;
	static_rdis_6 = P_6;
	static_rdis_7 = P_7;
	static_rdis_8 = P_8;
	static_rdis_9 = P_9;
	static_rdis_10 = P_10;
	return;

/* emacs$get_info_ptr -> get information pointer provided in emacs_
   call.  14 July 1981 RMSoley */

get_info_ptr:
     entry () returns (pointer);

	emacs_data_ptr = e_find_invocation_ ();

	return (emacs_data.info_ptr);

/* This entry allocates a temporary segment for the editor.
   It remembers all such segments allocated so that it can free them when done.
*/


get_temporary_seg:
     entry () returns (pointer);

	emacs_data_ptr = e_find_invocation_ ();

	if emacs_data.level_ptr -> level_info.n_used = emacs_data.level_ptr -> level_info.n_allocated then do;
						/* need more room in table */

	     n_to_allocate = emacs_data.level_ptr -> level_info.n_allocated + 16;
	     allocate level_info in (system_area) set (p);

	     p -> level_info.prev_level = emacs_data.level_ptr -> level_info.prev_level;

	     p -> level_info.n_used = emacs_data.level_ptr -> level_info.n_used;
	     do idx = 1 to p -> level_info.n_used;
		p -> level_info.segment_ptrs (idx) = emacs_data.level_ptr -> level_info.segment_ptrs (idx);
	     end;

	     do idx = p -> level_info.n_used + 1 to p -> level_info.n_allocated;
						/* and new ones */
		p -> level_info.segment_ptrs (idx) = null ();
	     end;

	     free emacs_data.level_ptr -> level_info in (system_area);
						/* release old table */

	     emacs_data.level_ptr = p;		/* remember new table */
	end;


	idx, emacs_data.level_ptr -> level_info.n_used = emacs_data.level_ptr -> level_info.n_used + 1;

	call get_temp_segment_ ("emacs", emacs_data.level_ptr -> level_info.segment_ptrs (idx), (0));

	return (emacs_data.level_ptr -> level_info.segment_ptrs (idx));


/* This entry releases a temporary segment previously allocated by this level
   of the editor. */

release_temporary_seg:
     entry (segment_ptr);

	emacs_data_ptr = e_find_invocation_ ();

	do idx = 1 to emacs_data.level_ptr -> level_info.n_used;
						/* find it */
	     if emacs_data.level_ptr -> level_info.segment_ptrs (idx) = segment_ptr then go to found_release;
	end;

	return;					/* not from this level, forget it */


found_release:
	do idx = idx + 1 to emacs_data.level_ptr -> level_info.n_used;
	     emacs_data.level_ptr -> level_info.segment_ptrs (idx - 1) =
		emacs_data.level_ptr -> level_info.segment_ptrs (idx);
	end;					/* remove from list */

	emacs_data.level_ptr -> level_info.n_used = emacs_data.level_ptr -> level_info.n_used - 1;

	call release_temp_segment_ ("emacs", segment_ptr, (0));

	return;


/* These commands are for use when debugging EMACS.  They push and pop
   editor levels to permit use of the editor fom free-standing LISP.
*/

debug_on:
     entry () options (variable);

	emacs_data_ptr = e_find_invocation_ ();

	call push_level ();

	return;



debug_off:
     entry () options (variable);

	emacs_data_ptr = e_find_invocation_ ();

	mode = 0b;
	call pop_level ();

	return;


/* This internal procedure pushes a new editor level.
*/

push_level:
     procedure ();

	if system_area_ptr = null () then system_area_ptr = get_system_free_area_ ();

	n_to_allocate = 16;				/* good size for start */

	allocate level_info in (system_area) set (p);

	p -> level_info.prev_level = emacs_data.level_ptr;/* chain previous level */

	p -> level_info.n_used = 0;
	p -> level_info.segment_ptrs (*) = null ();

	call iox_$modes (iox_$user_io, (""), p -> level_info.tty_modes, (0));

	emacs_data.level_ptr = p;			/* push */

     end push_level;

/* This internal procedure pops an editor level. */

pop_level:
     procedure ();
	if mode > 01000b then do;

	     new_usage_info.number_wanted = 5;
	     call hcs_$get_process_usage (addr (new_usage_info), (0));
	     time_in = divide (clock () - time_in, 6000000, 35, 0);
	     call e_pl1_$return_echo_meters (cgmeter, r0emeter, locemeter, outmeter);
	     groupid = get_group_id_ ();
	     call e_pl1_$get_terminal_type (vtyp);
	     if vtyp = "" then
		if netsw then
		     ttytype = "supdup output";
		else ;
	     else call expand_pathname_ ((vtyp), (168)" ", ttytype, 0);
	     if (substr (ttytype, length (rtrim (ttytype)) - 2, 3) = "ctl") then
		substr (ttytype, length (rtrim (ttytype)) - 2) = "";
	     call ioa_$rsnnl ("^a: (^a) in ^d, r0/r4 echo ^d/^d, out ^d.", lstring, length (lstring), groupid, ttytype,
		cgmeter, r0emeter, locemeter - r0emeter, outmeter);
	     call write_log_$write_log_test (rtrim (emacs_data.ledir) || ">" || log_subdir);
	     call write_log_$write_log_file (clock (), 0, lstring, (emacs_data.log_name), log_ptr);
	     call ioa_$rsnnl ("^a: lisp rdis: ^d ^d ^d ^d ^d ^d ^d ^d ^d ^d", lstring, length (lstring), groupid,
		static_rdis_1, static_rdis_2, static_rdis_3, static_rdis_4, static_rdis_5, static_rdis_6,
		static_rdis_7, static_rdis_8, static_rdis_9, static_rdis_10);
	     call write_log_$write_log_file (clock (), 0, lstring, (emacs_data.log_name), log_ptr);

	     call ioa_$rsnnl ("^a: ^.1f min, v/cpu ^d/^d mem ^d paging ^d/^d", lstring, length (lstring), groupid,
		time_in / 10e0, (new_usage_info.virtual_cpu_time - usage_info.virtual_cpu_time) * 1e-6,
		(new_usage_info.cpu_time - usage_info.cpu_time) * 1e-6,
		divide (new_usage_info.paging_measure - usage_info.paging_measure, 1000, 35, 0),
		new_usage_info.pd_faults - usage_info.pd_faults, new_usage_info.page_faults - usage_info.page_faults);
	     call write_log_$write_log_file (clock (), 0, lstring, (emacs_data.log_name), log_ptr);
	end;

	if emacs_data.level_ptr = null () then return;	/* nothing to do */

	call release_temp_segments_ ("emacs", emacs_data.level_ptr -> level_info.segment_ptrs (*), (0));
						/* release all temporary segments of this level */

	call e_pl1_$set_multics_tty_modes ();		/* renegotiate echoing */

	if emacs_data.flags.turned_on_video then call video_utils_$turn_off_login_channel ((0));
						/* we turned it on, we should turn it off */

	call iox_$modes (iox_$user_io, emacs_data.level_ptr -> level_info.tty_modes, (""), (0));

	call e_pl1_$dump_out_console_messages ();

	p = emacs_data.level_ptr -> level_info.prev_level;

	free emacs_data.level_ptr -> level_info in (system_area);

	emacs_data.level_ptr = p;			/* pop */

     end pop_level;

     end emacs;
