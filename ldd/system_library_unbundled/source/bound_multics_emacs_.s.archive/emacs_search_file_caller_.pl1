/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1978 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


emacs_search_file_caller_:
	proc (regexp, pointpos, filelinep, filelinel, stringline, answer);

/*  Bernard Greenberg 6/23/78 */

dcl regexp char (*);				/* regular exp */
dcl pointpos fixed bin;				/* rel offset */
dcl filelinep ptr;					/* null if string passed */
dcl filelinel fixed bin;				/* 21 not interesting */
dcl stringline char (*);				/* line as string */
dcl answer bit (36) aligned;				/* encode this loser better, see below. */

dcl code fixed bin (35), (amitemp, ametemp) fixed bin (17) aligned;
dcl linep ptr, linel fixed bin, line char (linel) based (linep); /* real params */
dcl null builtin;
dcl search_file_ entry (ptr, fixed bin, fixed bin,
		/*   atp     ati       atl  */
		    ptr, fixed bin, fixed bin,
		/*   afp     afi       afe  */
		    fixed bin, fixed bin, fixed bin (35));
	
		/*  ami	   ame	   code */
dcl 1 packed_return_val aligned,
    2 zero_rel_index fixed bin (17) unaligned,
    2 length fixed bin (17) unaligned;

dcl length builtin;

	if filelinep ^= null then do;			/* in file */
	     linep = filelinep;
	     linel = filelinel;
	end;
	else do;					/* string passed */
	     linep = addr (stringline);
	     linel = length (stringline);
	end;

	call search_file_ (addr (regexp), 1, length (regexp), linep, pointpos + 1, linel, amitemp, ametemp, code);
	if code ^= 0 then do;
	     packed_return_val.zero_rel_index = -1;
	     packed_return_val.length = 0;
	end;

/* Got good answer, pack it up and go. */

	else do;
	     packed_return_val.zero_rel_index = amitemp - 1;
	     packed_return_val.length = ametemp - amitemp + 1;
	end;
	
	answer = unspec (packed_return_val);
     end;
