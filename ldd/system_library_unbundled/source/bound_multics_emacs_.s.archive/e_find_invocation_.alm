" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1978 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************
"
"
" This module is used by emacs to find the appropriate invocation to use.
" It's operation is as follows:
"
" (1) If there are no invocations, return null.
" (2) If all invocations are on the same stack, return most recent invocation.
" (3) If there are tasking invocations on the current stack, return most recent
"	of those.
" (4) If there are nontasking invocations, return most recent of those.
" (5) Return the most recent invocation.
"
" Note that we assume that an invocation closer to the head if the
" invocation chain is more recent than one further away.
" (I.e., we assume that emacs_data_$invocation_list -> emacs_data
" is more recent than
" emacs_data_$invocation_list -> emacs_data.next_invocation -> emacs_data)
"
" pr0 points to caller's arg list: 1 output argument, type ptr.
" pr1 points to the emacs invocation being considered.
" pr3 saves the first or first nontask invocation ptr for failing search.
" pr6 points to the current stack frame.
" x0  contains a branch address to only save the first nontask invocation.
" x1  contains the segno of the current execution stack.
"
" Written 7 August 1981 by J. Spencer Love.
" Modified 8 August 1981 Benson Margulies and Richard Soley to correct,
"	clean, and debug.
" 

	name	e_find_invocation_

	include	emacs_data

	entry	e_find_invocation_

e_find_invocation_:
	epp1	emacs_data_$invocation_list,*

	epaq	pr1|0		" See if list is empty.
	ana	=o77777,du	" Mask off uninteresting ring number.
	cmpaq	EPAQ_NULL_PTR	" See if pointer is null.
	tze	EGRESS		" If so, return it.

	epp3	pr1|0		" Save first invocation for no tasking.
	eax0	SAVE_NONTASK_INVOCATION " Replace first with first nontask.
	
	epaq	pr6|0		" Get a pointer to the current stack.
	eax1	0,au		" Put the segno in x1 for compare.

FIND_TASK_LOOP:
	ldq	pr1|emacs_data.task_flags " See if this is a tasking invocation.
	canq	emacs_data.in_task,du
	tnz	0,x0

	cmpx1	pr1|emacs_data.frame_ptr " Check if task stack segno is equal.
	tze	EGRESS		" If so, return this invocation.

FIND_NEXT_TASK:
	epp1	pr1|emacs_data.next_invocation,* " Get next invocation in chain.

	epaq	pr1|0		" See if we have reached the end.
	ana	=o77777,du	" Mask off uninteresting ring number.
	cmpaq	EPAQ_NULL_PTR	" See if pointer is null.
	tnz	FIND_TASK_LOOP	" If not, check out this invocation.

	epp1	pr3|0		" Else, use most recent invocation.

EGRESS:
	spri1	pr0|2,*		" Return the invocation ptr to caller.

	short_return

SAVE_NONTASK_INVOCATION:
	epp3	pr1|0		" Replace first with first nontask.
	eax0	FIND_NEXT_TASK	" Arrange not to come here again.
	tra	FIND_NEXT_TASK	" Go back into search loop.

	even

EPAQ_NULL_PTR:
	oct	077777000000
	oct	000001000000

	end
