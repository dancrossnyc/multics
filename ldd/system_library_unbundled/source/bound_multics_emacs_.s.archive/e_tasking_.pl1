/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1981 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

e_tasking_: procedure (P_emacs_data_ptr, P_code);

/* Procedure to do the work of maintaining a tasking Emacs.
   22 July 1981 RMSoley
   Modified: April 1982 CAHornig to update to tasking version 3.
   Modified: April 1982 RMSoley for cleanup on destroy_task.
   Modified: 25 November 1983 B. Margolin for shared_static option.
*/

/* Parameters */
dcl  P_code fixed bin (35) parameter;
dcl  P_emacs_data_ptr pointer parameter;

/* System Entries */
dcl  com_err_ entry() options(variable);
dcl  cu_$get_cl_intermediary entry (entry);
dcl  cu_$set_cl_intermediary entry (entry);
dcl  emacs_$tasking_emacs entry ();
dcl  get_system_free_area_ entry() returns(ptr);
dcl  ioa_ entry() options(variable);
dcl  task_ctl_$create entry (ptr, bit(36) aligned, fixed bin(35));
dcl  task_ctl_$destroy entry (bit(36) aligned, fixed bin(35));
dcl  task_ctl_$schedule entry() returns(bit(1) aligned);
dcl  task_ctl_$start entry (bit(36) aligned, fixed bin(35));
dcl  task_ctl_$stop entry (bit(36) aligned, fixed bin(35));

/* Static */
dcl  emacs_data_$version character (10) static external;
dcl  emacs_data_$force_tasking bit (1) aligned static external;
dcl  emacs_data_$invocation_list pointer static external;

/* Automatic */
dcl  code fixed bin (35);
dcl  ran_task bit (1);
dcl  1 TCD aligned like task_create_data;

/* Based */

/* Builtin */
dcl (addr, baseno, bin, codeptr, hbound, stackbaseptr, unspec) builtin;

/* Conditions */
dcl  program_interrupt condition;
dcl  unquiet_grave condition;

/* Include Files */
%include emacs_data;
%include task_create_data;

	emacs_data_ptr = P_emacs_data_ptr;

	if emacs_data.arguments.destroy_task then do;
	     call run_task ("1"b);
	     P_code = -1;
	     return;
	end;
	if emacs_data.arguments.no_task then do;
	     P_code = 0;
	     return;
	end;
	if emacs_data.tasking.task_flags.in_task then do;
	     call run_task ("0"b);
	     P_code = -1;
	     return;
	end;
	else if emacs_data.arguments.task
	     | emacs_data_$force_tasking then do;
	     call create_task ();
	     call run_task ("0"b);
	     P_code = -1;
	     return;
	end;
	else do;
	     P_code = 0;
	     return;
	end;

returner:
	P_code = code;
	return;

create_task: procedure ();

	emacs_data.tasking.task_flags.in_task = "1"b;
	emacs_data.tasking.task_flags.destroy = "0"b;
	TCD.version = task_create_data_version_3;
	TCD.overseer = tasking_overseer;
	TCD.vcpu_limit = -1;
	TCD.priority = 1;
	TCD.comment = "Emacs Task";
	TCD.data_ptr = null ();
	string (TCD.flags) = ""b;
	TCD.flags.shared_static = emacs_data.arguments.shared_static;
	TCD.flags.top_level = "1"b;

	call task_ctl_$create (addr (TCD), emacs_data.tasking.task_id, code);
	if code ^= 0 then do;
	     call com_err_ (code, emacs_data.myname, "Could not create task.");
	     go to returner;
	end;

	return;
     end create_task;

run_task: procedure (mark_for_death);

dcl  mark_for_death bit (1) parameter;

	if ^emacs_data.tasking.task_flags.in_task then do;
	     call com_err_ (0, emacs_data.myname, "There is no tasking Emacs to restart.");
	     go to returner;
	end;

	emacs_data.tasking.task_flags.destroy = mark_for_death;

	call task_ctl_$start (emacs_data.tasking.task_id, code);
	if code ^= 0 then do;
	     call com_err_ (code, emacs_data.myname, "Cannot start Emacs task.");
	     go to returner;
	end;

	ran_task = task_ctl_$schedule ();
	call check_death_request ();

	return;
     end run_task;

destroy_task: procedure ();

	if ^emacs_data.tasking.task_flags.in_task
	     then call com_err_ (0, emacs_data.myname, "There is no Emacs task to destroy.");
	else go to emacs_data.tasking.return_label;

/*	else call task_ctl_$destroy (emacs_data.tasking.task_id, (0));

	if emacs_data_$invocation_list = emacs_data_ptr
	     then emacs_data_$invocation_list = emacs_data.next_invocation;
	if emacs_data.next_invocation ^= null ()
	     then emacs_data.next_invocation -> emacs_data.prev_invocation = emacs_data.prev_invocation;
	if emacs_data.prev_invocation ^= null ()
	     then emacs_data.prev_invocation -> emacs_data.next_invocation = emacs_data.next_invocation;
	free emacs_data;
*/
	return;
     end destroy_task;

check_death_request: procedure ();

	if emacs_data.tasking.task_flags.destroy then call destroy_task ();

     end check_death_request;

tasking_overseer: entry (P_data_ptr);

dcl  P_data_ptr pointer parameter;

	emacs_data_ptr = e_find_invocation_ ();

	emacs_data.tasking.return_label = task_death;

	/* Remember that while the above portions of e_tasking_
	   run on the NORMAL stack, THIS portion runs on the
	   EMACS stack. */

	call cu_$get_cl_intermediary (emacs_data.tasking.saved_cl_intermediary);
	call cu_$set_cl_intermediary (resume_old_stack);

	call emacs_$tasking_emacs ();

	/* Must resume the old (NORMAL) stack. */

	call cu_$set_cl_intermediary (emacs_data.tasking.saved_cl_intermediary);
	call task_ctl_$stop (emacs_data.tasking.task_id, code);
	ran_task = task_ctl_$schedule ();

	/* Should never get to here.  Should have resumed on the
	   old stack, and never returned.
	   However, who cares.  We'll just return to Hornig and
	   let him handle it!!  -- Soley

	signal unquiet_grave;	*/

	return;

task_death:
	return; /* To tasking primitives for task destruction. */

resume_old_stack: entry ();

	emacs_data_ptr = e_find_invocation_ ();

	call cu_$set_cl_intermediary (emacs_data.tasking.saved_cl_intermediary);
	call task_ctl_$stop (emacs_data.tasking.task_id, code);
	call check_death_request ();
	ran_task = task_ctl_$schedule ();

	/* When we get to here, the NORMAL stack has resumed us.
	   We are still on the Emacs stack at this point. */

	call check_death_request ();
	call cu_$set_cl_intermediary (resume_old_stack);
	signal program_interrupt;

quit: entry () returns (fixed bin (35));

	emacs_data_ptr = e_find_invocation_ ();

	if ^emacs_data.tasking.task_flags.in_task then return (-1);
	call cu_$set_cl_intermediary (emacs_data.tasking.saved_cl_intermediary);
	call task_ctl_$stop (emacs_data.tasking.task_id, code);
	call check_death_request ();
	ran_task = task_ctl_$schedule ();

	/* When we get to here, the NORMAL stack has resumed us.
	   We are still on the Emacs stack at this point. */

	call check_death_request ();
	call cu_$set_cl_intermediary (resume_old_stack);
	signal program_interrupt;

destroy_me: entry ();

	emacs_data_ptr = e_find_invocation_ ();

	emacs_data.tasking.task_flags.destroy = "1"b;
	return;

get_death_flag: entry () returns (fixed bin);

	emacs_data_ptr = e_find_invocation_ ();

	if emacs_data.tasking.task_flags.destroy then return (1);
	else return (0);

get_tasking_flag: entry () returns (fixed bin);

	emacs_data_ptr = e_find_invocation_ ();

	if emacs_data.tasking.task_flags.in_task then return (1);
	else return (0);

     end e_tasking_;
