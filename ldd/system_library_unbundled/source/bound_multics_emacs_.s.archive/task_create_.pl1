/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
task_create_:
     procedure (Task_create_data_ptr, Task_data_ptr, Code);

dcl  Task_create_data_ptr ptr parameter;
dcl  Task_data_ptr ptr parameter;
dcl  Code fixed bin (35) parameter;

dcl  1 abort_label_overlay aligned based (addr (task_data.abort)),
       2 code_ptr ptr,
       2 env_ptr ptr;
dcl  1 defptr_overlay aligned based,			/* overlays defptr in active linkage section */
       2 pad1 bit (29) unaligned,
       2 pps_sw bit (1) unaligned,
       2 pad2 bit (6) unaligned;
dcl  based_ptr ptr based;
dcl  based_words (stack_header.cur_lot_size) fixed bin (35) based;
dcl  task_area area based (task_data.task_area_ptr);

dcl  active_all_rings_data$hcscnt fixed bin (15) external;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;
dcl  sys_info$max_seg_size fixed bin (19) ext static;

dcl  define_area_ entry (ptr, fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ioa_$rsnnl entry () options (variable);
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  task_alm_$task_overseer_tv entry;
dcl  task_cl_intermediary_ entry;
dcl  task_ctl_$death entry;

dcl  task_name char (13);
dcl  segno fixed bin (15);
dcl  1 ai aligned like area_info;

dcl  size builtin;
%page;
	Task_data_ptr = null ();
	Code = 0;

	call get_temp_segment_ ("task_ctl_", sb, Code);	/* get a stack segment */
	if Code ^= 0 then return;
	task_data_ptr = pointer (sb, size (stack_header));
	sp = addrel16 (task_data_ptr, size (task_data));
	task_data.create_data = Task_create_data_ptr -> task_create_data;

	if task_data.create_data.version = 2 then do;	/* upgrade from 2 to 3 */
	     task_data.create_data.version = 3;
	     string (task_data.create_data.flags) = ""b;
	     task_data.create_data.top_level, task_data.create_data.shared_static = "1"b;
	     end;

	if task_data.create_data.version ^= task_create_data_version_3 then do;
	     Code = error_table_$unimplemented_version;
	     return;
	     end;

	if task_data.create_data.flags.top_level
	then task_data.mother = addr (tasking_data.root_task_data);
	else task_data.mother = pointer (stackbaseptr (), TASK_DP) -> based_ptr;

	stack_header = task_data.mother -> task_data.sb -> stack_header;
	stack_header.stack_begin_ptr, stack_header.bar_mode_sp = sp;
	stack_header.stack_end_ptr = addrel16 (sp, (stack_frame_min_length));

	if task_data.create_data.flags.shared_static	/* create new linkage area if necessary */
	then task_data.task_area_ptr = null ();
	else do;
	     ai.version = area_info_version_1;
	     string (ai.control) = ""b;
	     ai.control.extend, ai.control.zero_on_alloc = "1"b;
	     ai.owner = "task_create_";
	     ai.size = sys_info$max_seg_size;
	     ai.areap = null ();
	     call define_area_ (addr (ai), Code);
	     if Code ^= 0 then return;

	     stack_header.combined_stat_ptr, stack_header.clr_ptr, stack_header.user_free_ptr, task_data.task_area_ptr =
		ai.areap;

	     allocate based_words in (task_area) set (lotp);
	     allocate based_words in (task_area) set (isotp);
	     lotp -> based_words = stack_header.lot_ptr -> based_words;
	     isotp -> based_words = stack_header.isot_ptr -> based_words;
	     do segno = active_all_rings_data$hcscnt + 1 to stack_header.cur_lot_size - 1;
		if unspec (lot.lp (segno)) = ""b then unspec (lot.lp (segno)) = lot_fault;
		if unspec (lot.lp (segno)) ^= lot_fault
		then if ^lot.lp (segno) -> defptr_overlay.pps_sw then unspec (lot.lp (segno)) = lot_fault;
	     end;
	     stack_header.lot_ptr = lotp;
	     stack_header.isot_ptr = isotp;
	     end;

	stack_frame.prev_sp = null ();
	stack_frame.next_sp = stack_header.stack_end_ptr;
	stack_frame.return_ptr = codeptr (task_alm_$task_overseer_tv);
	stack_frame.operator_and_lp_ptr, stack_frame.arg_ptr = null ();
	stack_frame.translator_id = "000001"b3;

	pointer (sb, TASK_DP) -> based_ptr = task_data_ptr;

	task_data.state = STOPPED;
	task_data.sb = sb;
	task_data.task_id = baseno (sb) || substr (bit (clock (), 72), 55, 18);
	abort_label_overlay.code_ptr = codeptr (task_ctl_$death);
	abort_label_overlay.env_ptr = stack_header.stack_begin_ptr;

	task_data.youngest_daughter, task_data.elder_sister, task_data.younger_sister, task_data.ready_next,
	     task_data.ready_last = null ();

	call ioa_$rsnnl ("^w.", task_name, (0), task_data.task_id);
	call iox_$attach_name (task_name || "user_input", task_data.ui_iocb, "syn_ user_i/o -inh close put_chars",
	     null (), Code);
	call iox_$attach_name (task_name || "user_output", task_data.uo_iocb,
	     "syn_ user_i/o -inh close get_chars get_line", null (), Code);
	call iox_$attach_name (task_name || "error_output", task_data.eo_iocb,
	     "syn_ user_i/o -inh close get_chars get_line", null (), Code);

	task_data.cl_intermediary = task_cl_intermediary_;
	task_data.ips_mask = "777777777777"b3;

	Task_data_ptr = task_data_ptr;
	return;



addrel16:
     procedure (Ptr, Offset) returns (ptr);
dcl  Ptr ptr parameter;
dcl  Offset fixed bin parameter;
dcl  offset uns fixed bin (18);

	offset = binary (rel (Ptr), 18) + Offset + 15;
	return (pointer (Ptr, offset - mod (offset, 16)));

     end addrel16;
%page;
%include tasking_data;
%include area_info;
%include linkdcl;
%include lot;
%include stack_header;
%include stack_frame;

     end task_create_;
