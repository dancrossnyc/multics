/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_filact_funct19_: proc (mcp_val, high_val, gseg_val, arg_ptr_val, buffer_ptr_val, code);

/**	Derail FILACT function 19 (ZZZZZ).

	All parameters are input parameters except code.

	code retuurned 0 => Successful.
	code returned 4 => GCOS err4 (see gtss_pnterr structure).
	code returned other => multics error code.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 $db debug switch.
   Change:  Ron Barstad       06/11/82  Fixed stringsize condition in assignment of entry_name to aft_name
**/
dcl  mcp_val                  ptr parm;
dcl  high_val                 bit(18)parm;
dcl  gseg_val                 ptr parm;
dcl  arg_ptr_val              ptr parm;
dcl  buffer_ptr_val           ptr parm;
dcl  code                     fixed bin(35)parm;
	mcp = mcp_val;
	high_b = high_val;
	high_i = fixed (high_b, 18);
	gseg = gseg_val;
	arg_ptr = arg_ptr_val;
	buffer_ptr = buffer_ptr_val;

/** Following 2 statements provided to
    assure no compilation errors. Code involved
    is being replaced. **/
	altname_ptr = null ();
	cat_filedescr_name_offset = "0"b;

	code = 0;					/* Successful. */


/**	Obtain the argument list. **/
	if					/* (filact_args.arglist_address < low_b) | */
	(fixed (filact_args.arglist_address, 18)+2 > high_i) then do;
return_err4:   ;
	     code = 4;
	     return;
	end;
	arglist_ptr = addrel (gseg, filact_args.arglist_address);

	call validate_status (arglist.status_address, status_ptr); /* and also for status word */

	call build_cat_file_descriptors ();		/* build_ the pathnames from the cat file descriptors */

	arglist.record_address = "0"b;		/* set to eof for now */
	status_word.status = "400000"b3;

ret:	;
	return;



/*		System Master Catalog Query		*/


%include gtss_filact_intp3;

%include gtss_filact_intp1;

build_cat_file_descriptors: proc ();

/**	Obtain descriptor.		**/
	     if (arglist.descriptor_address > high_b) |
	     ((fixed (arglist.descriptor_address, 18) +4) > high_i) then goto return_err4;
	     descriptor_ptr = addrel (gseg, arglist.descriptor_address);

/* set up pointer to cat file descriptor */
/* look for the minus_one for the userid */
	     if substr (descriptor (0).name, 1, 36) = minus_one then do;

/* set the userid to that of the default logon */
		descriptor (0).name = gtss_ust.lid;
		descriptor (0).password = (12)"20"b3;
	     end;

	     ascii_cat_file.nn = 1;
	     call gtss_bcd_ascii_$lc (
		addr (descriptor (0).name)
		, 12
		, addr (ascii_cat_file.name (1))
		);

	     call gtss_expand_pathname_ (
		addr (ascii_cat_file)
		, dir_name
		, entry_name			/* (not used) */
		, code
		);
	     if code ^= 0 then do;
fail_build:	;
/**MORE**/
		status_word.status = "400100"b3;
		goto ret;
	     end;

/**	Obtain deblanked path_name.	**/
	     k = search (dir_name, " ")-1;
	     if k<0 then k = length (dir_name);
	     path_name = substr (dir_name, 1, k);


/* look for the minus_one for end of cat file descriptors and check address */
/* check for nothing given */
	     if substr (descriptor (1).name, 1, 36) = minus_one then do; /* look for minus_one then (-1) */
		status_word.pd = get_faulty_cat_file_entry ();
		status_word.status = "400500"b3;
		return;
	     end;

	     do i = 1 to hbound (descriptor, 1);
		if substr (descriptor (i+1).name, 1, 36) = minus_one /* look for minus_one (-1) */ then goto fence_found_1;
		call gtss_bcd_ascii_$lc (addr (descriptor (i).name), 12, addr (entry_name)); /* convert the path
						   element to ascii */
		k = search (entry_name, " ") -1;	/* look for end of name */
		if k < 0 then k = length (entry_name);	/* if no blanks found, then set to max size */
		path_name = path_name || ">" || substr (entry_name, 1, k); /* start concatination */
		if (fixed (arglist.descriptor_address, 18) + (i+1)*4) > high_i then goto return_err4;
	     end;

/* Too many levels given - give him an error */
	     status_word.pd = get_faulty_cat_file_entry ();
	     status_word.status = "400500"b3;
	     return;

fence_found_1: ;
	     FMS_data_block.restore_switch = "0"b;	/* indicate the file name is in bcd */
	     descriptor_address = rel (addr (descriptor (i).name)); /* find a address of the
						   last entry on the descriptor stack */
	     if substr (filact_args.altname_address, 1, 1) = "1"b then
		call gtss_bcd_ascii_$lc (addr (descriptor (i).name), 12, addr (entry_name)); /* convert the path
						   element to ascii */
	     else
	     if filact_args.altname_address = "0"b then do;
		if function_no = 3 | function_no = 4 then do; /* keeping up with the inconsistencies of tss */
		     addr (entry_name) -> two_words = addr (descriptor (i).name) -> two_words; /* get the name
						   in ascii directly */
		     entry_name = translate (entry_name
			, "abcdefghijklmnopqrstuvwxyz"
			, "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			);			/* put name to lower case only */
		     FMS_data_block.restore_switch = "1"b; /* indicate the file name is in ascii */
		end;
		else
		call gtss_bcd_ascii_$lc (addr (descriptor (i).name), 12, addr (entry_name)); /* convert the path
						   element to ascii */
	     end;
	     else
	     if substr (filact_args.altname_address, 1, 1) = "0"b then do;
		if function_no = 4 then		/* for altname processing */
		     if substr (altname, 1, 4) ^= four_NULS then do; /* look also for empty altname given */
			call gtss_bcd_ascii_$lc (addr (descriptor (i).name), 12, addr (entry_name));
						/* convert the path element to ascii */

			aft_name = translate (altname
			     , "abcdefghijklmnopqrstuvwxyz"
			     , "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			     );
						/* put name to lower case only */

		     end;
		     else do;
			addr (entry_name) -> two_words = addr (descriptor (i).name) -> two_words; /* get the name in ascii directly */
			entry_name = translate (entry_name
			     , "abcdefghijklmnopqrstuvwxyz"
			     , "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			     );
			FMS_data_block.restore_switch = "1"b; /* indicate the file name is in ascii */
			aft_name = substr(entry_name,1,8);	/* save for access function 4 */
		     end;
	     end;
	     else do;
		addr (entry_name) -> two_words = addr (descriptor (i).name) -> two_words; /* get the name in ascii directly */
		entry_name = translate (entry_name
		     , "abcdefghijklmnopqrstuvwxyz"
		     , "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		     );
						/* Translate entry name to lower case. */
	     end;
	     k = search (entry_name, " ") -1;		/* look for end of name */
	     if k < 0 then k = length (entry_name);	/* if no blanks found, then set to max size */
	     dir_name = path_name;			/* save path_name up to this point for append_branchx */
	     path_name = path_name || ">" || substr (entry_name, 1, k); /* start concatination */
	     /* arglist.record_address = rel (addr (FMS_data_block.record_type)); */ /* indicate the info
						   is placed at the beginning of the buffer */
	     FMS_data_block.file_id = substr (entry_name, 1, 8); /* put in the ascii name of the file or catalog */
	     return;
	end					/* build_cat_file_description */;

/** Declarations for gtss_drl_filact_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  file_name_in_ascii       bit(1);
dcl  bit72                    bit(72)aligned based;
dcl  nic                      fixed bin(24);
dcl  p                        ptr init(null());
dcl  access_mode              bit (6);
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  aft_code                 fixed bin (35);
dcl  aft_name                 char (8);
dcl  altname                  char (8) aligned based (altname_ptr);
dcl  altname_ptr              ptr init(null());
dcl  append_mode              bit (36) static int options(constant)init ("100000000000"b3);
dcl  arglist_ptr              ptr init(null());
dcl  arg_ptr                  ptr init(null());
dcl  attribute_segment_ptr    ptr init(null());
dcl  bit                      builtin;
dcl  bit_count                fixed bin (24);
dcl  cat_filedescr_name_offset bit(18);
dcl  cdate                    fixed bin (71);
dcl  clim                     float bin;
dcl  crf                      fixed bin(24);
dcl  csp                      float bin;
dcl  delete_$path             entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl  descriptor_address       bit (18);
dcl  descriptor_ptr           ptr init(null());
dcl  dir_name                 char (168);
dcl  divide                   builtin;
dcl  entry_name               char (12) init (" ");
dcl  error_table_$incorrect_access fixed bin (35) ext;
dcl  error_table_$moderr      fixed bin (35) ext;
dcl  error_table_$namedup     fixed bin (35) ext;
dcl  error_table_$noentry     fixed bin (35) ext;
dcl  error_table_$no_dir      fixed bin (35) ext;
dcl  error_table_$not_seg_type fixed bin(35)ext;
dcl  error_table_$segknown    fixed bin (35) ext;
dcl  error_table_$seg_not_found fixed bin (35) ext;
dcl  error_table_$nomatch     fixed bin (35) ext;
dcl  execute_mode             bit (36) static int options(constant)init ("200000000000"b3);
dcl  file_no                  fixed bin (24);
dcl  fixed                    builtin;
dcl  FMS_block_ptr            ptr init(null());
dcl  four_NULS                char (4)static int options (constant)init ((4)" ") /* 4 octal 000's */;
dcl  gseg                     ptr init(null());
dcl  gtss_fail                condition;
dcl  have_file                bit(1);
dcl  hbound                   builtin;
dcl  hcs_$add_acl_entries     entry (char (*), char (*), ptr, fixed bin(24), fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$add_inacl_entries   entry (char (*), char (*), ptr, fixed bin, fixed bin (3), fixed bin (35));
dcl  hcs_$append_branchx      entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
dcl  hcs_$delentry_file       entry(char(*),char(*),fixed bin(35));
dcl  hcs_$initiate            entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg            entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$quota_read          entry (char (*), fixed bin (18), fixed bin (71), bit (36) aligned, bit (36), fixed bin (1), fixed bin (18), fixed bin (35));
dcl  hcs_$status_long         entry (char (*), char (*), fixed bin (1), ptr,ptr, fixed bin (35));
dcl  high_b                   bit(18);
dcl  high_i                   fixed bin(18)aligned;
dcl  i                        fixed bin(24);
dcl  increment                fixed bin(24);
dcl  ioa_                     entry options (variable);
dcl  k                        fixed bin(24);
dcl  l                        fixed bin(24);
dcl  lbound                   builtin;
dcl  low_b                    bit(18)aligned static int options(constant)init("000147"b3) /* 103 dec. */;
dcl  low_i                    fixed bin(18)aligned static int options(constant)init(103);
dcl  max_options              fixed bin static int options(constant)init (100);
dcl  max_resources            fixed bin static int options(constant)init (99999);
dcl  minus_one                bit (36) static int options(constant)init ((36)"1"b);
dcl  mlim                     float bin;
dcl  mod                      builtin;
dcl  modify_mode              bit (36) static int options(constant)init ("200000000000"b3);
dcl  msp                      float bin;
dcl  multics_access_mode      fixed bin(5);
dcl  path_name                char (168) varying;
dcl  person_id                char (22);
dcl  quota                    fixed bin (18);
dcl  read_mode                bit (36) static int options(constant)init ("400000000000"b3);
dcl  rel                      builtin;
dcl  rings                    (3) fixed bin (3) static int options(constant)init (4, 4, 4);
dcl  seg_acl_count            fixed bin;
dcl  shlim                    (0:7) float bin;
dcl  shsp                     (0:7) float bin;
dcl  size                     builtin;
dcl  smc_entry_ptr            ptr init(null());
dcl  sons_lvid                bit (36);
dcl  status                   fixed bin (24);
dcl  status_mode              bit (36) static int options(constant)init ("400000000000"b3);
dcl  status_ptr               ptr init(null());
dcl  substr                   builtin;
dcl  switches                 bit (6) static int options(constant)init ("37"b3);
dcl  tacc_sw                  fixed bin (1);
dcl  trp                      fixed bin (71);
dcl  tup                      bit (36) aligned;
dcl  two_words                bit (72) based;
dcl  type                     fixed bin (2);
dcl  used                     fixed bin (18);
dcl  user_attribute_word      bit (35);
dcl  user_info_$limits        entry (float bin, float bin, fixed bin (71), fixed bin(24), (0:7) float bin, float bin, float bin, (0:7) float bin);
dcl  words380                 bit(13680)aligned based;
dcl  write_mode               bit (36) static int options(constant)init ("100000000000"b3);

dcl 1 status2		aligned based(status_ptr)
,     3 word1
,       4 status_code	bit(12)unal
,       4 zero1		bit(06)unal
,       4 zero2		bit(18)unal
,     3 word2
,       4 L_bcd_message	bit(18)unal
,       4 message_words	fixed bin(17)unal
;

dcl 1 bcdname aligned based(p),
    2 first8 bit(48)unal,
    2 last4  bit(24)unal;

/** Structures:	**/
dcl 1 filact_args aligned based (arg_ptr),
    2 altname_address bit (18) unaligned,
    2 arglist_address bit (18) unaligned,
    2 function_no fixed bin (17) unaligned,
    2 buffer_address bit (18) unaligned;


dcl 1 arglist aligned based (arglist_ptr),
    2 status_address bit (18) unaligned,
    2 record_address bit (18) unaligned,
    2 descriptor_address bit (18) unaligned,
    2 permissions_address bit (18) unaligned,
    2 options_address bit (18) unaligned,
    2 fill1 bit (18) unaligned;


dcl 1 lib_arglist aligned based (arglist_ptr),
    2 status_address bit (18) unaligned,
    2 fill bit (17) unaligned,
    2 mode bit (1) unaligned,
    2 fill1 bit (24) unaligned,
    2 file_code bit (12) unaligned;



dcl 1 status_word aligned based (status_ptr),
    2 status bit (18) unaligned,
    2 pd bit (18) unaligned,
    2 null_bit bit (1) unaligned,
    2 user_attributes bit (35) unaligned;



dcl 1 descriptor (0:8) aligned based (descriptor_ptr),
    2 name bit (72) aligned,
    2 password bit (72) aligned;

dcl 1 FMS_block aligned based (FMS_block_ptr),
    2 address bit (18) unaligned;


dcl 1 FMS_data_block aligned based (buffer_ptr),
    2 restore_switch bit (36) aligned,
    2 file_id char (8) aligned,
    2 fill (3:24) bit (36) aligned,
    2 record_type fixed bin (5) unaligned,
    2 fill2 bit (30) unaligned;

dcl 1 permissions aligned based (permissions_ptr),
    2 read bit (1) unaligned,
    2 write bit (1) unaligned,
    2 append bit (1) unaligned,
    2 execute bit (1) unaligned,
    2 purge bit (1) unaligned,
    2 modify bit (1) unaligned,
    2 lock bit (1) unaligned,
    2 fill bit (1) unaligned,
    2 create bit (1) unaligned,
    2 recovery bit (1) unaligned,
    2 fill1 bit (8) unaligned,
    2 test bit (1) unaligned,
    2 query bit (1) unaligned,
    2 fill2 bit (16) unaligned;



dcl 1 options aligned based (options_ptr),
    2 contigous bit (1) unaligned,
    2 random bit (1) unaligned,
    2 TSS_create bit (1) unaligned,
    2 I_D_S bit (1) unaligned,
    2 llink_allocated bit (1) unaligned,
    2 nostructured_device bit (1) unaligned,
    2 fill1 bit (1) unaligned,
    2 attribute_present bit (1) unaligned,
    2 user_attribute bit (1) unaligned,
    2 fill2 bit (4) unaligned,
    2 FMS_protection bit (1) unaligned,
    2 fill3 bit (4) unaligned,
    2 device_name bit (18) unaligned,
    2 initial_size bit (18) unaligned,
    2 max_size bit (18) unaligned,
    2 specific_permissions (0:max_options) aligned,
      3 userid bit (72) aligned,
      3 read bit (1) unaligned,
      3 write bit (1) unaligned,
      3 append bit (1) unaligned,
      3 execute bit (1) unaligned,
      3 purge bit (1) unaligned,
      3 modify bit (1) unaligned,
      3 lock bit (1) unaligned,
      3 fill bit (1) unaligned,
      3 create bit (1) unaligned,
      3 recovery bit (1) unaligned;


dcl 1 smc_arglist aligned based (arglist_ptr),
    2 status_address bit (18) unaligned,
    2 entry_address bit (18) unaligned;




dcl 1 smc_entry aligned based (smc_entry_ptr),
    2 userid bit (72) unaligned,
    2 fill1 bit (36) aligned,
    2 fill2 bit (36) aligned,
    2 space_time fixed bin (35) aligned,
    2 llinks_used fixed bin (17) unaligned,
    2 llinks_allowed fixed bin (17) unaligned,
    2 fill3 bit (36) aligned,
    2 resources fixed bin (17) unaligned,
    2 lodx bit (1) unaligned,
    2 cardin bit (1) unaligned,
    2 talk bit (1) unaligned,
    2 lods bit (1) unaligned,
    2 fill4 bit (2) unaligned,
    2 urgency bit (12) unaligned,
    2 password bit (72) unaligned,
    2 reserved bit (36) aligned,
    2 fill5 bit (10) unaligned,
    2 resources_used fixed bin (25) unaligned;

%include gtss_ust_ext_;

%include gtss_ext_;

%include gtss_filact_status;

%include gtss_pnterr;

%include mc;

%include gtss_entry_dcls;

%include gtss_ascii_file_names;

%include gtss_file_values;

%include gtss_FMS_catalog;

%include status_info;

%include acls;

%include gtss_filact_options;

%include gtss_db_names;
     end						/* gtss_filact_funct19_ */;
