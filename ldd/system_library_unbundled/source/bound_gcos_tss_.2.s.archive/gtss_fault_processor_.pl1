/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_fault_processor_: proc;

/* *
   This procedure handles all faults occurring in  a  gtss  program
   except  the  DRL.  Once the fault cause is interpreted, the gtss
   slave program prefix fault vector is examined to see if the gtss
   program  has  set up a handler for this fault. Each fault vector
   consists of two words except for lockup. The first word is  used
   to  store  the instruction counter and indicators at the time of
   the fault. The second word contains the address of where  to  go
   in  the gtss program to process the fault. If the location is 0,
   the program will be aborted. If a fault  processing  routine  is
   specified,  the  scu  data  will be modified to cause control to
   return to the gtss program at that location.

   (gcos contributors:)
   WRITTEN BY DICK SNYDER OCTOBER 2, 1970
   MODIFIED BY T. CASEY SEPTEMBER 1973, FEBRUARY 1974, APRIL 1974
   MODIFIED BY D. KAYDEN  JUNE 1974, DECEMBER 1974
   MODIFIED BY T. CASEY AUGUST 1975
   Modified by M. R. Jordan, October 1977

   (gtss contributors:)
   Modified by R. J. Grimes, Spring 1978
   Modified by D. B. Ward, June 25, 1978
   Modified by D. B. Ward, July 9, 1978
   Modified by A. N. Kepner, July 19, 1978
   (Pass appropriate error messages to gtss_abort_subsystem_)
   Modified by A. N. Kepner, July 24, 1978
   Modified by Al Dupuis, Oct 12, 1979
   (Re-implemented timer_runout entry)
   Authors:	Robert J. Grimes	Created
   Albert N. Kepner	  1978
   Robert M. May
   David B. Ward
  Changed: Ron Barstad  10/25/82  fixed string range error in substr of condition_name
   Modified: Ron Barstad  84-05-31  Added RSW simulation to IPR fault handling.
   * */

	cond_info.version = 1;			/* expect version 1 of info structure */
	call find_condition_info_ (null, addr (cond_info), code);
	if code ^= 0 then do;
	     call com_err_ (code, "gtss_fault_processor_",
		"Can't find condition info.");
	     signal cond (gtss_fail);
	end;
	if cond_info.mcptr = null () then go to pass_it_on; /* Not a fault so pass it on */

	scup = addr (cond_info.mcptr -> mc.scu);	/* get pointer to scu data */
	mcp = cond_info.mcptr;

/* Update saved machine registers in user's slave prefix. */
	call gtss_update_safe_store_ (mcptr);

	if substr (condition_name||"         ", 1, 9) = "simfault_" then go to pass_it_on; /* can't check for all simfaults in my array */
	do i = 1 to hbound (faults, 1);		/* see if we have a match in our array */
	     if condition_name = faults (i).type then do; /* found it */

		if scu.ppr.psr ^= substr (baseno (gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_)), 4, 15) then
		     goto pass_it_on;		/* abort if fault occurred outside gtss segment */

		faultv.ic = fixed (scu.ilc)+1;	/* get IC */
		faultv.ind = string (scu.ir);		/* and I */

		go to fault (i);			/* handle fault if we want */
	     end;
	end;
/* 	Come here on a wide class of faults we won't take specific action on */
fault (10): ;					/* page fault */
pass_it_on: ;
	call continue_to_signal_ (code);		/* let's pass it on */
	if code ^= 0 then do;
	     call com_err_ (code, "gtss_fault_processor_",
		"Can't continue to signal.");
	     signal cond (gtss_fail);
	end;
	return;


/*	Come here on IPR					*/
fault (5): ;
	 /* if the IPR instruction was a RSW, this can be simulated */
	 if substr(fault_word,16,12) = RSW2
	      then do;
	      mc.regs.a = "0"b;                             /* return zero */
	      scu.ilc = bit(fixed(scu.ilc,17) + 1,18);
	      scu.rfi, scu.if = "1"b;			/* make sure cpu refetches instr from where ilc says */
	      call gtss_update_safe_store_(mcp);
	      return;					/* return to the gtss program */
	 end;
	 /* all other IPRs */
	pnterr_mess = gtss_pnterr.err55;
	gcos_error_code = 55;
	fault_type = 3;
	fault_vector = 0;
	goto user_fault;

/* 	Come here on fault tag 1				 */
fault (4): ;
	pnterr_mess = gtss_pnterr.err19;
	gcos_error_code = 19;
	fault_type = 2;
	fault_vector = 4;				/* vector offset */
	go to user_fault;				/* see if user has handler */

/* 	Come here on illegal op code				 */
fault (21): ;					/* illegal_opcode */
	if gse_ext_$modes.gdb then do;
	     gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	     i_ptr = addrel (gseg, scu.ilc);
	     if i_opcode = "005"b3			/* mme 3 fault */
	     then do;
		call gcos_debug_$breaktime;
		return;
	     end;
	end;


fault (6): ;					/* illegal_modifier */
fault (7): ;					/* linkage_error */
fault (8): ;					/* fault_tag_3 */
fault (9): ;					/* seg_fault_error */
fault (11): ;					/* gate_error */
	pnterr_mess = gtss_pnterr.err17;
	gcos_error_code = 17;
	fault_type = 6;
	fault_vector = 0;				/* vector offset */
	go to user_fault;				/* see if user has handler */

/* 	Come here on attempt to read or write out of partition bounds 	 */
fault (12): ;
fault (20): ;
	pnterr_mess = gtss_pnterr.err18;
	gcos_error_code = 18;
	fault_type = 1;
	fault_vector = 2;				/* vector offset */
	go to user_fault;				/* see if user has handler */

/* 	Come here on overflow				 */
fault (16): ;
	fault_flags = "000010000000000000"b;		/* turn on bit 22 of accum. fault status */
	goto common_flow;

/*	Come here on fixedoverflow */
fault (15): ;
	fault_flags = "000100000000000000"b;		/* turn on bit 21 of accum. fault status */
	goto common_flow;

/* 	Come here on underflow */
fault (14): ;
	fault_flags = "000001000000000000"b;		/* turn on bit 23 of accum. fault status */

common_flow: ;
	pnterr_mess = gtss_pnterr.err16;
	gcos_error_code = 16;
	fault_type = 8;
	fault_vector = 8;				/* vector offset */
	go to user_faultx;				/* see if user has handler */

/* 	Come here on op_not_complete				 */
fault (19): ;
	pnterr_mess = gtss_pnterr.err53;
	gcos_error_code = 53;
	fault_type = 7;
	fault_vector = 0;				/* say where to put IC and I */
	goto user_fault;				/* and go do it */

/* 	Come here on lockup					 */
fault (18): ;
	pnterr_mess = gtss_pnterr.err44;
	gcos_error_code = 44;
	fault_type = 5;
	fault_vector = 0;				/* say where to put IC and I */
	goto user_fault;

/* 	Come here on zero divide 				 */
fault (17): ;
	pnterr_mess = gtss_pnterr.err20;
	gcos_error_code = 20;
	fault_type = 9;
	fault_vector = 6;				/* vector offset */
	fault_flags = "000000000001000000"b;		/* turn on bit 29 of accum. fault status */
	goto user_faultx;

/* 	Come here on mme fault 				*/
fault (1): ;					/* mme 1 */
fault (2): ;					/* mme 3 */
fault (3): ;					/* mme 4 */
fault (22): ;					/* mme 2 */
	pnterr_mess = gtss_pnterr.err27;
	gcos_error_code = 27;
	fault_type = 0;
	fault_vector = 0;				/* vector offset */
	go to user_fault;				/* see is user has handler */


/* 	Come here with a fault which the gtss user can potentially handle. 		*/
/* 	"fault_vector" holds the offset from the base of the gtss segment where	 */
/* 	the user's fault vector for the particular fault which occurred is located.	 */

/* Put the accumulated fault status into word 25 of prefix */

user_faultx: ;
	p = addrel (gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_), 25); /* get pointer to it */
	accum_stat = accum_stat | ((18)"0"b || fault_flags); /* or in the flags */

user_fault: ;

	p = addrel (gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_), 25); /* get pointer to it */
	substr (accum_stat, 31, 6) = bit (fault_type, 6);
	prefix_vector (fault_vector) = ic_i;		/* copy ic and indicators into fault vector */


	lower_limit = bit (binary (100, 18), 18);
	upper_limit = gtss_ust.lsize.limit;
	if transfer.tra_addr < lower_limit | transfer.tra_addr >= upper_limit then do; /* if no valid fault_vector, abort the job */

abrt:	     ;
	     call condition_interpreter_ (null, p, i, 3, mcptr, (condition_name), wcptr, infoptr);
	     call gtss_abort_subsystem_ (mcptr,
		"gtss_fault_processor_",
		gcos_error_code,
		pnterr_mess,
		fixed (scu.ilc, 18));
	     scu.rfi, scu.if = "1"b;			/* Make cpu refetch new instruction */
	     return;				/* just in case */
	end;

/* 	Fiddle the scu data to cause processor to resume execution at the 	 */
/*	second word of the fault vector. This is done by setting the ilc to	*/
/*	the address of that word and turning on "rfi" and "if "in the	*/
/*	scu data, to force the cpu to refetch the instruction from the	*/
/*	word pointed to by the ilc.					*/

	fault_vector = fault_vector + 1;		/* get loc'n of word 2 of vector */
	scu.ilc = substr (unspec (fault_vector), 19, 18); /* force transfer to the tra in that word */
	scu.rfi, scu.if = "1"b;			/* make sure cpu refetches instr from where ilc says */
	return;					/* return to the gtss program */

/* HANDLERS FOR FAULTS THAT THE USER'S FAULT VECTOR CAN NOT HANDLE */

/*	Come here on parity */
fault (13): ;
	pnterr_mess = gtss_pnterr.err63;
	gcos_error_code = 63;
	fault_type = 11;
	call condition_interpreter_ (null, p, i, 3, mcptr, (condition_name), wcptr, infoptr);
	call gtss_abort_subsystem_ (mcptr,
	     "gtss_fault_processor_",
	     gcos_error_code,
	     pnterr_mess);
	scu.rfi, scu.if = "1"b;			/* Make cpu refetch new instruction */
	return;					/* just in case */


/* 	Come here if fault is a timer runout				 */
timer_runout: entry (mcpp, fault_name);



	on cput;
	mcp = mcpp;
	if gtss_ust.lcjid ^= "0"b			/* reset proc that checks for DABT request */
	then call timer_manager_$reset_cpu_call (gtss_abs_$dabt_check);
	if gtss_ext_$flags.timer_ranout
	then goto shut_down;
	else gtss_ext_$flags.timer_ranout = "1"b;
	if lflg2.b8
	then do;					/* set COUT sector and term code */
	     gtss_ust.lcfst.start_term = 10;
	     gtss_ust.lcfio.sect_in = gtss_ust.lcfst.initial_sect_out - 1;
	end;
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	scup = addr (mc.scu);
	if scu.ppr.psr = substr (baseno (gtss_ext_$gtss_slave_area_seg
	(gtss_ext_$stack_level_)), 4, 15) then;
	else do;
	     mcp = gtss_find_cond_frame_ ("derail");
	     if mcp = null ()
	     then do;				/* can't even find the slave frame */
		call com_err_ (0, "",
		     "^/064-EXECUTE TIME LIMIT EXCEEDED.");
		revert cput;
		call gtss_interp_prim_$sysret ();
		return;
	     end;
	     else derail_in_progress = "1"b;
	end;

	scup = addr (mc.scu);
	call gtss_update_safe_store_ (mcp);
	gtss_spa.lsztm.b35 = "1"b;
	faultv.ic = fixed (scu.ilc) + 1;
	faultv.ind = string (scu.ir);
	fault_flags = "100000000000000000"b;
	gcos_error_code = 43;
	fault_type = 10;
	p = addrel (gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_), 25);
	accum_stat = accum_stat | ((18)"0"b || fault_flags);
	substr (accum_stat, 31, 6) = bit (fault_type, 6);
	if gtss_spa.lsztm.tra ^= "0"b
	then if ((substr (gtss_spa.lsztm.tra, 1, 18) >= bit (binary (100, 18), 18))
	     & (substr (gtss_spa.lsztm.tra, 1, 18) <= gtss_ust.lsize.limit))
	     then do;
		gtss_spa.lsztm.ic_ir.IC = string (bit (faultv.ic, 18));
		gtss_spa.lsztm.ic_ir.IR = substr (faultv.ind, 1, 16);
		scu.ilc = substr (gtss_spa.lsztm.tra, 1, 18);
		scu.rfi, scu.if = "1"b;
		call gtss_update_safe_store_ (mcp);
		revert cput;
		if ((^derail_in_progress)
		| (gtss_ext_$dispose_of_drl ^= gtss_ext_$bad_drl_rtrn))
		then do;				/* give user one second to conclude */
		     call timer_manager_$cpu_call (1, "11"b,
			gtss_fault_processor_$timer_runout);
		     if ^derail_in_progress
		     then return;
		     else goto gtss_ext_$dispose_of_drl;
		end;
		else do;
		     call com_err_ (0, "",
			"The subsystem timer runout code was not executed",
			"^/064-EXECUTE TIME LIMIT EXCEEDED");
		     call gtss_interp_prim_$sysret ();
		     return;
		end;
	     end;

shut_down: ;


/* reset any CRUN/DRUN timers that may go off */
	call timer_manager_$reset_cpu_call (gtss_abs_$cpu_runout);
	call com_err_ (0, "",
	     "^/064-EXECUTE TIME LIMIT EXCEEDED");
	revert cput;
	call gtss_interp_prim_$sysret ();
	return;


/* *  Declarations for gtss_fault_processor_:
   IDENTIFIER		ATTRIBUTES	* */
dcl  RSW2 bit(12) internal static options (constant) init ("2231"b3);
dcl  abort_code char (20) varying aligned		/* abort code for this fault */;
dcl  accum_stat bit (36) aligned based (p)		/* overlay for accumulated */;
dcl  addr builtin;
dcl  addrel builtin;
dcl  answer char (4) varying;
dcl  code fixed bin (35);
dcl  command_query_ entry options (variable);
dcl  condition_interpreter_ entry (ptr, ptr, fixed bin, fixed bin, ptr, char (*), ptr, ptr);
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  cput condition ext;
dcl  derail_in_progress bit (1) init ("0"b);
dcl  fault_flags bit (18)				/* flags to set accumulated */;
dcl  fault_name char (*)				/* fault name from fim */;
dcl  fault_type fixed bin (6);						/* Fault type to be filled in last 6 bits of .LFTST */
dcl  fault_vector fixed bin				/* offset from base of gtss segment where fault vector is located. */;
dcl  fault_word bit(36) based (cond_info.loc_ptr);          /* the faulting instruction */
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl find_condition_frame_ entry(ptr) returns(ptr);
dcl  fixed builtin;
dcl  gcos_error_code fixed bin (18);						/* .LABRT type error code */
dcl  gcos_debug_$breaktime entry ();
dcl  gseg ptr;						/* ptr to slave segment */
dcl  gtss_fail condition ext;
dcl  hbound builtin;
dcl  i fixed bin;
dcl  i_ptr ptr;						/* ptr to instruction where fault occurred */
dcl  ic_i bit (36) aligned;
dcl  initialized bit (1) int static init ("0"b);
dcl  ioa_ entry options (variable);
dcl  j fixed bin;
dcl  lower_limit bit(18) unal;
dcl  mcpp ptr parm;
dcl  nop bit (36) aligned int static init ("000000011003"b3) /* nop instruction */;
dcl  null builtin;
dcl  p pointer;
dcl  pnterr_mess char (70) varying init ("FAULT ERROR ");
dcl  prefix_vector (0:11) bit (36) aligned based (gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_));
dcl  sp ptr;						/* ptr to current stack frame being searched */
dcl  string builtin;
dcl  substr builtin;
dcl  timer_manager_$cpu_call entry (fixed bin (71), bit (2), entry);
dcl  timer_manager_$reset_cpu_call entry (entry);
dcl  unspec builtin;
dcl  upper_limit bit(18) unal;

dcl 1 transfer aligned based (addr(prefix_vector(fault_vector+1))), /* overlay for transfer instruction of fault vector */
    2 tra_addr bit (18) unal,
    2 tra_op bit (18) unal;

dcl 1 faultv aligned based (addr (ic_i)),		/* overlay for ic_i */
    2 ic fixed bin (17) unaligned,			/* instruction counter */
    2 ind bit (18) unaligned;						/* indicators */

dcl 1 instruction aligned based (i_ptr),		/* overlay for examining instruction */
    2 i_address bit (18) unal,			/* where fault occurred */
    2 i_opcode bit (9) unal,
    2 i_addr_mod bit (9) unal;


dcl 1 faults (22) internal static aligned,
    2 type char (32) init (
     "mme1",					/* 1 */
     "mme3",					/* 2 */
     "mme4",					/* 3 */
     "fault_tag_1",					/* 4 */
     "illegal_procedure",				/* 5 */
     "illegal_modifier",				/* 6 */
     "linkage_error",				/* 7 */
     "fault_tag_3",					/* 8 */
     "seg_fault_error",				/* 9 */
     "page_fault_error",				/* 10 */
     "gate_error",					/* 11 */
     "store",					/* 12 */
     "parity",					/* 13 */
     "underflow",					/* 14 */
     "fixedoverflow",				/* 15 */
     "overflow",					/* 16 */
     "zerodivide",					/* 17 */
     "lockup",					/* 18 */
     "op_not_complete",				/* 19 */
     "out_of_bounds",				/* 20 */
     "illegal_opcode",				/* 21 */
     "mme2"					/* 22 */
     );

dcl 1 cond_info aligned,
%include cond_info;

%include query_info_;

%include gtss_pnterr;

%include mc;

%include gtss_ext_;

%include gtss_entry_dcls;

%include gtss_ust_ext_;

%include gse_ext_;

%include gtss_spa;
     end gtss_fault_processor_ ;
