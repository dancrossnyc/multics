/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_write_starCFP_: proc (up, bp, rl, ec);

/**       Author:   Dave Ward 03/20/79
          Change:   Al Dupuis 12/04/79 Rewritten to make use of cout term codes
	Change:   Al Dupuis 12/14/79 Added write_deferred subroutine.
**/

	call gtss_aft_$find ("*CFP", fn, code);
	if code = 0 & normal_output
	then do;
	     call write_now;
	     return;
	end;
	call write_deferred;
	if normal_output
	then do;
		/** write logon banner first **/
	     bp = l_info.l_ptr (l_info.no_lines);
	     rl = l_info.l_len (l_info.no_lines);
	     call write_now;
	     do loop_cntr = 1 to l_info.no_lines - 1;
		bp = l_info.l_ptr (loop_cntr);
		rl = l_info.l_len (loop_cntr);
		call write_now;
		if ec ^= 0
		then do;
		     call end_def_write;
		     return;
		end;
	     end;
	     call end_def_write;
	end;
	return;

write_now: proc;


	     ec = 0;
	     if rl = 0 then return;
	     n = gtss_ust.lcfio.sect_out;
	     if n < gtss_ust.lcfst.initial_sect_out
	     then do;
		err_mess = "Output sector no not > last input sector";
		gtss_ust.lcfst.start_term = 3;
		call common_error;
		return;
	     end;
	     gtss_starCF_$FILE.Seek_Address = n;
	     gtss_ust.lcfio.sect_out = n + 1;
	     if rl > length (RECORD.chars)
	     then do;
		err_mess = "Output line length too long.";
		gtss_ust.lcfst.start_term = 11;
		call common_error;
		return;
	     end;
	     RECORD.no_characters = rl;
	     substr (RECORD.chars, 1, rl) = bp -> rl_chars;
		 /** If first char is pad, make it CR so output won't be indented **/
	     if substr (RECORD.chars, 1, 1) = rubout_char
	     then substr (RECORD.chars, 1, 1) = CR;
write_loop:    ;
	     gtss_starCF_$FILE.OP2.Device_Command = write_cmd;
	     fn = gtss_starCF_$FILE.cf.aft_indx;
	     call gtss_ios_io_ (
		fn,
		addr (select_sequence),
		addr (select_sequence),
		fixed (rel (addr (gtss_starCF_$FILE.cf))),
		status,
		code);
	     if status = 1     /** EOF encountered **/
	     then do;
		call gtss_ios_change_size_ (fn, 5, "0"b, st2, code);
		if st2 = 0 | st2 = 2   /** 0=OK, 2=hit max size **/
		then do;
		     gtss_starCF_$FILE.Seek_Address = n;
		     goto write_loop;
		end;
		if code = error_table_$rqover
		then err_mess = "EXCEEDED AVAILABLE LLINKS ATTEMPTING TO GROW *CFP";
		gtss_ust.lcfst.start_term = 4;
		call common_error;
		return;
	     end;
	     if status ^= 0
	     then do;
		err_mess = "COMMAND FILE I/O ERROR";
		gtss_ust.lcfst.start_term = 2;
		call common_error;
		return;
	     end;
	     return;
	end;

write_deferred: proc;

	     ec = 0;
	     saved_code = code;
	     if normal_output
	     then do;
		call hcs_$make_seg ("", "", "", 10, l_info_ptr, code);
		if code = 0
		then call hcs_$make_seg ("", "", "", 10, l_ptr, code);
		if code ^= 0
		then do;
		     err_mess = "Couldn't do i/o for ..init";
		     call common_error;
		     call end_def_write;
		     return;
		end;
		normal_output = "0"b;
		l_info.no_chars = 1;
		l_info.no_lines = 0;
	     end;
	     l_info.no_lines = l_info.no_lines + 1;
	     l_info.l_ptr (l_info.no_lines) =
		addr (char_string (l_info.no_chars));
	     l_info.l_len (l_info.no_lines) = rl;
	     l_info.no_chars = l_info.no_chars + rl;
	     l_info.l_ptr (l_info.no_lines) -> line = bp -> line;
	     if saved_code = 0
	     then normal_output = "1"b;
	     return;
	end;

end_def_write: proc;


	     call delete_$ptr (l_info_ptr, "100100"b,
		"gtss_write_starCFP_", code);
	     l_info_ptr = null ();
	     call delete_$ptr (l_ptr, "100100"b,
		"gtss_write_starCFP_", code);
	     l_ptr = null ();
	     normal_output = "1"b;

	end;

common_error: proc;

	     ec = 1;
	     mc_ptr = gtss_find_cond_frame_ ("derail");
		 if mc_ptr = null ()     /** no gmap program to abort **/
	     then call gtss_CFP_abort_;
	     else do;
		if err_mess ^= ""
		then call gtss_abort_subsystem_ (
		     mc_ptr,
		     "gtss_write_starCFP_",
		     0,
		     err_mess);
		else call gtss_abort_subsystem_ (
		     mc_ptr,
		     "gtss_write_starCFP_", 0);
		return;
	     end;
	end;



/**  Variables for gtss_write_starCFP_
**/
dcl  bp                       ptr parm;  /** (input) callers buffer **/
dcl  char_string (l_info.no_chars) char (1) based (l_ptr);
dcl  code                     fixed bin (35);
dcl  cr                       bit (9) static int options (constant) init ("015"b3);
dcl  delete_$ptr              entry (pointer, bit (6), char (*), fixed bin (35));
dcl  ec                       fixed bin (35) parm;  /** (output) Multics error code **/
dcl  err_mess                 char (250) init ("");
dcl  error_table_$rqover	fixed bin (35) ext;
dcl  fn                       fixed bin (24);
dcl  hcs_$make_seg	          entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  line                     char (rl) based;
dcl  loop_cntr	          fixed bin (24);
dcl  l_info_ptr               ptr static internal init (null());
dcl  l_ptr                    ptr static internal init (null());
dcl  mc_ptr                   ptr init (null ());
dcl  n                        fixed bin (18) unsigned unal;
dcl  nl                       bit (9) static int options (constant) init ("012"b3);
dcl  normal_output            bit (1) static internal init ("1"b);
dcl  pad_char		bit (9) static int options (constant) init ("177"b3);
dcl  rl                       fixed bin (21) parm; /** (input) no of chars **/
dcl  rl_chars		char (rl) unal based;
dcl  rubout_char		char (1) based (addr (pad_char));
dcl  saved_code	          fixed bin (35);
dcl  status                   fixed bin(24);
dcl  st2			fixed bin (24);
dcl  CR                       char (1) based (addr (cr));
dcl  NL                       char (1) based (addr (nl));
dcl  up                       ptr parm;  /** (input) not used **/

dcl 1 l_info based (l_info_ptr),
      2 no_lines fixed bin (24),
      2 no_chars fixed bin (24),
      2 filler (l_info.no_lines),
        3 l_ptr ptr,
        3 l_len fixed bin (21);

%include gtss_starCF_;

%include gtss_ext_;

%include mc;

%include gtss_ust_ext_;

%include gtss_entry_dcls;

%include gtss_db_names;

%include gtss_device_cmds;
     end;
