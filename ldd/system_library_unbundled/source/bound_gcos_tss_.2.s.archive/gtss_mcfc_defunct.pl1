/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_mcfc_defunct: proc;

/* Examine the gtss mcfc data base and
   display callers whose process no longer
   exist.

   Author:  Dave Ward	11/09/79
*/
	call gtss_mcfc_init_ (rs);
	if rs = "false" then return;
dcl  rs                       char(5)var;
	do i = lbound (mcfc.start_list, 1) to hbound (mcfc.start_list, 1);
	     if files (i).first ^= 0 then do;		/* Next chain of files. */
		if lock_chain (i, c) then do;		/* Chain locked during examination. */
		     call examine_chain (files (i).first);
		     call unlock_chain (i);
		end;
		else				/* Could not lock the chain. */
		call com_err_ (
		     c
		     , "gtss_mcfc_defunct"
		     , "Chain ^i."
		     , i
		     );
	     end;
	end;
dcl  c                        fixed bin(35);
	return;

lock_chain: proc (i, c)returns (bit (1));

/* Lock start_list file entry i.
   Return code c (0=>OK | ^0=>failure).
*/
dcl  i                        fixed bin(24) parm;
dcl  c                        fixed bin(35)parm;
	     call set_lock_$lock (
		start_list (i).files.lock
		, 60				/* Wait up to 60 (realtime) seconds. */
		, c
		);
	     if c = 0 then return ("1"b);		/* Successful. */
	     if c = error_table_$invalid_lock_reset then return ("1"b);
	     return ("0"b);				/* Failure. */
	end					/* lock_chain. */;

unlock_chain: proc (i);

/* Unlock start_list file entry i.
*/
dcl  i                        fixed bin(24) parm;
	     call set_lock_$unlock (
		start_list (i).files.lock
		, c
		);
	     if c = 0 then return;
	     call com_err_ (
		c
		, "gtss_mcfc_defunct"
		, "Could not unlock start list (^i) files lock."
		, i
		);
	     return;

dcl  c                        fixed bin(35);
	end					/* unlock_chain. */;

examine_chain: proc (i);

/* Examine each file on the start list
   chain i, for callers that have defunct
   processes.
*/
dcl  i                        fixed bin(24) parm;
	     n = i;
	     do while (n>0);
		call examine_file (n);
		n = file_entry (n).link;
	     end;
	     return;

dcl  n                        fixed bin(24);
	end					/* examine_chain. */;

examine_file: proc (f);

/* Display callers of file f that have
   defunct processes.
*/
dcl  f                        fixed bin(24) parm;
	     c = 0;				/* Count of defunct processes for f. */
	     call get_caller_index (f, caller_ptr, k);
	     do i = 1 to number_callers (f);
		if defunct_process (f, caller (k).lock_id (i)) then c = c+1;
	     end;

	     if c = 0 then return;
	     if c<number_callers (f) then
		call com_err_ (
		0
		, "gtss_mcfc_defunct"
		, "^i of ^i callers defunct for ^a"
		, c
		, number_callers (f)
		, file_name (f)
		);
	     else
	     call com_err_ (
		0
		, "gtss_mcfc_defunct"
		, "All ^i callers defunct for ^a"
		, c
		, file_name (f)
		);
	     return;

dcl  c                        fixed bin(24);
dcl  i                        fixed bin(24);
dcl  k                        fixed bin(24);
	end					/* examine_file */;

defunct_process: proc (f, lw)returns (bit (1));

/* Return "1"b if lock word (lw) belongs to
   a defunct process, otherwise return "0"b.
*/
dcl  f                        fixed bin(24) parm;
dcl  lw                       bit(36)aligned parm;
	     slw = lw;				/* Save input lock word value. */
	     call set_lock_$lock (
		lw
		, 0				/* Wait no time. */
		, c
		);
dcl  c                        fixed bin(35);
	     if c = error_table_$locked_by_other_process then

/* Locked by caller with an existent process (OK). */
		return ("0"b);
/**MORE**/
	     lw = slw;
	     return ("1"b);

dcl  slw                      bit(36);
	end					/* defunct */;

file_name: proc (f)returns (char (*));

/* Produce the "name" of file f.
*/
dcl  f                        fixed bin(24) parm;
dcl  ns                       char(namel(f))unal based(pointer(nameo(f),names));
	     return (ns);				/* AUGMENT. */
	end					/* file_name */;

/* Variables for gtss_mcfc_defunct:
   IDENTIFIER		ATTRIBUTES	*/
dcl  com_err_                 entry options(variable);
dcl  error_table_$invalid_lock_reset fixed bin(35)ext;
dcl  error_table_$locked_by_other_process fixed bin(35)ext;
dcl  error_table_$locked_by_this_process fixed bin(35)ext;
dcl  error_table_$lock_not_locked fixed bin(35)ext;
dcl  error_table_$lock_wait_time_exceeded fixed bin(35)ext;
dcl  get_lock_id_             entry(bit(36)aligned);
dcl  gtss_mcfc_init_          entry(char(*)var);
dcl  i                        fixed bin(24);
dcl  null                     builtin;
dcl  set_lock_$lock           entry(bit(36)aligned,fixed bin,fixed bin(35));
dcl  set_lock_$unlock         entry(bit(36)aligned,fixed bin(35));

%include gtss_mcfc_gci;

%include gtss_mcfc;

%include gtss_ext_;
     end						/* gtss_mcfc_defunct */;
