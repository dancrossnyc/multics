/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_read_starCFP_: proc (up, bp, ml, rl, ec);

/**       Author:   Dave Ward 02/23/79
          Change:   Al Dupuis 12/04/79 Rewritten to make use of cout term codes

          This entry is provided to read the next input sector from *CFP.
          The entry last_os is provided to read the last sector written
          to the *CFP file.
**/

	call read_next_sector;
	return;

last_os:	entry (up, bp, ml, rl, ec);

	n = gtss_ust.lcfio.sect_out - 1;
	call read_any_sector;
	return;



read_next_sector: proc;

	     ec = 0;
	     n = gtss_ust.lcfio.sect_in;
	     if n = gtss_ust.lcfst.initial_sect_out - 1
	     then cout_called = "1"b;
	     if n ^< gtss_ust.lcfst.initial_sect_out
	     then do;
		err_mess = "COMMAND FILE INPUT EXHAUSTED";
		gtss_ust.lcfst.start_term = 12;
		call common_error;
		return;
	     end;
	     gtss_starCF_$FILE.Seek_Address = n;
	     gtss_ust.lcfio.sect_in = n + 1;
	     gtss_starCF_$FILE.OP2.Device_Command = read_cmd;
	     fn = gtss_starCF_$FILE.cf.aft_indx;
	     call gtss_ios_io_ (
		fn,
		addr (select_sequence),
		addr (select_sequence),
		fixed (rel (addr (gtss_starCF_$FILE.cf))),
		status,
		code);
	     if status ^= 0
	     then do;
		err_mess = "COMMAND FILE I/O ERROR";
		gtss_ust.lcfst.start_term = 2;
		call common_error;
		return;
	     end;
		 /** Check for too many characters **/
	     if no_characters > ml
	     then do;
		err_mess = "INPUT LINE LENGTH TOO LONG";
		gtss_ust.lcfst.start_term = 11;
		call common_error;
		return;
	     end;
	     l, rl = no_characters;
	     if substr (chars, l, 1) = CR
	     then substr (chars, l, 1) = NL;
	     bp -> MC = gtss_starCF_$FILE.RECORD.chars;
	     ec = 0;
	     return;
	end;



read_any_sector: proc;


	     ec = 0;
	     gtss_starCF_$FILE.Seek_Address = n;
	     gtss_starCF_$FILE.OP2.Device_Command = read_cmd;
	     fn = gtss_starCF_$FILE.cf.aft_indx;
	     call gtss_ios_io_ (
		fn,
		addr (select_sequence),
		addr (select_sequence),
		fixed (rel (addr (gtss_starCF_$FILE.cf))),
		status,
		code);
	     if status ^= 0
	     then do;
		err_mess = "COMMAND FILE I/O ERROR";
		gtss_ust.lcfst.start_term = 2;
		call common_error;
		return;
	     end;
	     l, rl = no_characters;
	     if substr (chars, l, 1) = CR
	     then substr (chars, l, 1) = NL;
	     bp -> MC = gtss_starCF_$FILE.RECORD.chars;
	     ec = 0;
	     return;
	end;





common_error: proc;


	     ec = 1;
	     mc_ptr = gtss_find_cond_frame_ ("derail");
	     if mc_ptr = null ()     /** no gmap program to abort **/
	     then call gtss_CFP_abort_;
	     else do;
		if err_mess ^= ""
		then call gtss_abort_subsystem_ (
		     mc_ptr,
		     "gtss_read_starCFP_",
		     0,
		     err_mess);
		else call gtss_abort_subsystem_ (
		     mc_ptr,
		     "gtss_read_starCFP_",
		     0);
		return;
	     end;
	end;



/**  Variables for gtss_read_starCFP_
**/
dcl  bp                       ptr parm;  /** (input) callers buffer **/
dcl  code                     fixed bin (35);
dcl  cr                       bit (9) static int options (constant) init ("015"b3);
dcl  ec                       fixed bin (35) parm;  /** (output) Multics error code **/
dcl  err_mess                 char (250) init ("");
dcl  fn                       fixed bin (24);
dcl  l                        fixed bin (24);
dcl  mc_ptr                   ptr init (null ());
dcl  ml                       fixed bin (21) parm; /** (input) buffer length **/
dcl  n                        fixed bin (18) unsigned unal;
dcl  nl                       bit (9) static int options (constant) init ("012"b3);
dcl  rl                       fixed bin (21) parm; /** (input) no of chars **/
dcl  rl_chars		char (rl) unal based;
dcl  status                   fixed bin(24);
dcl  CR                       char (1) based (addr (cr));
dcl  MC			char (l) based;
dcl  NL                       char (1) based (addr (nl));
dcl  up                       ptr parm;  /** (input) not used **/
%include gtss_starCF_;

%include gtss_ext_;

%include mc;

%include gtss_ust_ext_;

%include gtss_entry_dcls;

%include gtss_db_names;

%include gtss_device_cmds;
     end;
