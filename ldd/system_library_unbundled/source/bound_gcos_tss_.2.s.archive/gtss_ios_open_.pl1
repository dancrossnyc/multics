/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_ios_open_: proc (
	     file_no
	     , dir_name
	     , entry_name
	     , access_mode
	     , random_indicator
	     , attributes_ptr
	     , status_ptr
	     , code
	     );

/* This entry point is used to set  up  the  necessary  control
   information about the file being opened.

   Author: Dave Ward	03/04/80 (derived from gtss_ios_)
*/
dcl  access_mode              bit (6) parm;
dcl  attributes_ptr           ptr parm;
dcl  code                     fixed bin (35) parm;
dcl  dir_name                 char (168) parm;
dcl  entry_name               char (32) parm;
dcl  file_no                  fixed bin (24) parm;
dcl  random_indicator         bit (1) parm;
	gsp = status_ptr;				/* Reference gcos_status. */
	gsp -> bit72 = "0"b;			/* Clear caller's status. */

	fn = file_no;				/* Use local variable */
	ap = attributes_ptr;

	gcos_status = "4000"b3;			/* Initialize status to indicate no error */
	code = 0;

/*  Verify that the file number input parameter
   corresponds to a valid input parameter and that
   the file is not already open. */

	if fn < lbound (gtss_disk, 1) | fn >= hbound (gtss_disk, 1) then do;
	     gcos_status = "4042"b3;			/* Bad file number */
	     return;
	end;
	if gtss_disk.fcb_ptr (fn) ^= null () then do;
	     gcos_status = "4037"b3;			/* File already open (i.e., in aft)  */
	     gtss_disk.fcb_ptr (fn) = null ();		/* Ensure file cannot be used again */
	     return;
	end;

/* Initialize gtss_disk entry for this file */
	gtss_disk (fn).fcb_ptr = null ();
	gtss_disk (fn).msf_array_ptr = null ();
	gtss_disk (fn).single_segment_ptr = null ();
	string (gtss_disk (fn).indicators) = "0"b;
	string (gtss_disk (fn).permissions) = "0"b;
	gtss_disk (fn).component = 0;
	gtss_disk (fn).offset = 0;
	gtss_disk (fn).file_position = 0;
	gtss_disk (fn).file_size = 0;
	gtss_disk (fn).no_components = 0;
	addr (gtss_disk (fn).pat_body) -> pat_body_overlay = "0"b;

/* Save information about file which must be remembered */
	gtss_disk.dir_name (fn) = dir_name;
	gtss_disk.entry_name (fn) = entry_name;
	gtss_disk.access_mode (fn) = access_mode;
	gtss_disk.attributes_ptr (fn) = ap;
	gtss_disk.pat_body.random (fn) = random_indicator | ap -> gtss_file_attributes.mode;
	gtss_disk.pat_body.write_performed (fn) = ap -> non_null;

/* Determine what permissions user wants
   on the file */

	substr (string (permissions (fn)), 1, 3) =
	     decode_mode (fixed (access_mode));
	pat_body (fn).perm = ap -> gtss_file_attributes.perm;
	if ^permissions (fn).read then do;
	     gcos_status = "4044"b3;
	     return;
	end;
	if pat_body (fn).perm = "0"b then do;
	     call hcs_$make_seg (
		dir_name
		, entry_name
		, ""
		, fixed ("0"b||substr (string (permissions (fn)), 1, 3)||"0"b)
		, null ()
		, code
		);
	     if code ^= 0 then do;
		gcos_status = "4100"b3;		/* error detected by hcs_$make_seg */
		return;
	     end;
	end;

/* Open the file using msf manager. */
	call msf_manager_$open (
	     dir_name
	     , entry_name
	     , fcb_ptr
	     , code
	     );
	if code ^= 0 then do;
	     gcos_status = "4100"b3;			/* Error detected by msf_manager_$open */
	     return;
	end;
	gtss_disk.fcb_ptr (fn) = fcb_ptr;

/* Determine the user's access to the file */
	if pat_body.perm (fn) ^= "0"b then do;
	     call gtss_verify_access_ (
		dir_name
		, entry_name
		, fn
		, access_mode
		, gcos_status
		);
	     if gcos_status ^= "4000"b3 then do;	/* 4000 means you have access */
		call msf_manager_$close (fcb_ptr);
		gtss_disk.fcb_ptr (fn) = null;
		return;
dcl status_ptr ptr parm;
	     end;
	end;


/* Get a pointer to first component of file */
	call msf_manager_$get_ptr (
	     fcb_ptr
	     , 0
	     , "0"b
	     , single_segment_ptr (fn)
	     , bc
	     , code
	     );
	if (code ^= 0) & (code ^= error_table_$segknown) & (code ^= error_table_$namedup) then do;
	     gcos_status = "4025"b3;			/* No 0 component. 4025 => entry not on-line. */
	     if db_ios then
		call com_err_ (
		code
		, "gtss_ios_open_"
		, "Could not get 0 component of ""^a>^a"" status ^w"
		, dir_name
		, entry_name
		, gcos_status
		);
	     call msf_manager_$close (gtss_disk (fn).fcb_ptr);
	     gtss_disk (fn).fcb_ptr = null;
	     return;
	end;



/* Call an internal procedure to set file_size, no_components, and the msf flag */
	gsc = 0;
	call fix_size (gsc);
	if gsc ^= 0 then do;
	     gcos_status = "4013"b3;			/* Too big. */
	     return;
	end;

/* Initialize size field in the PAT body */
	if gtss_disk.attributes_ptr (fn) -> current_size < 1024*16
	then pat_body.llink_size (fn) =
	     substr (unspec (gtss_disk.attributes_ptr (fn) -> current_size), 37-14, 14);

/* Get pointers to the components of the file */
	if msf (fn) then do;			/* Multisegment file */
	     allocate msf_components in (work_area) set (msf_array_ptr (fn));
	     do i = no_components (fn) to 499;
		msf_array_ptr (fn) -> msf_components (i) = null ();
	     end;
	     msf_array_ptr (fn) -> msf_components (0) = single_segment_ptr (fn);
	     single_segment_ptr (fn) = null ();
	     do i = 1 to no_components (fn)-1;
		call msf_manager_$get_ptr (
		     fcb_ptr
		     , (i)
		     , "1"b
		     , msf_array_ptr (fn) -> msf_components (i)
		     , bc
		     , code
		     );
		if code ^= 0 & code ^= error_table_$segknown & code ^= error_table_$namedup then do;
		     gcos_status = "4100"b3;		/* error detected by msf_manager_$get_ptr */
		     free msf_array_ptr (fn) -> msf_components;
		     call msf_manager_$close (gtss_disk (fn).fcb_ptr);
		     gtss_disk (fn).fcb_ptr = null;
		     return;
		end;
	     end;
	end;

/* Register caller in multiple caller
   file control (mcfc).
*/
	if ap -> gtss_file_attributes.perm then do;
	     call gtss_mcfc_$open (
		rtrim (dir_name)
		, rtrim (entry_name)
		, access_mode
		, gtss_ext_$mcfc.multics_lock_id
		, status_ptr
		, code
		);
	     if code ^= 0 then do;
		if db_ios then
		     call com_err_ (
		     code
		     , "gtss_ios_open_"
		     , "gtss_mcfc_$open status ^w"
		     , gcos_status
		     );
		return;
	     end;
	end;

/* Save pointer to file control block. */
	return;					/* End of gtss_ios_open_ */

fix_size:	proc (status);

/* This routine is called from within the open and change_size entry points
   to set file_size, no_components, and the msf flag. */
dcl  status                   fixed bin(24)parm;

	     gtss_disk.file_size (fn) = 320 * ap -> gtss_file_attributes.current_size;
	     gtss_disk.no_components (fn) =
		divide (file_size (fn)-1, sys_info$max_seg_size, 24, 0)+1;
	     gtss_disk.msf (fn) = (no_components (fn) > 1);
	     if no_components (fn) > 500 then do;
		no_components (fn) = 500;
		file_size (fn) = 500*1024*255;
		status = 3;			/* Size of file requested exceeds 500 components */
	     end;
	end fix_size;

/* VARIABLES FOR GTSS_IOS_ */
dcl  hcs_$fs_get_path_name    entry(ptr,char(*),fixed bin,char(*),fixed bin(35));
dcl file_dir char(168);
dcl file_dir_len fixed bin;
dcl file_ent char(32);
dcl  gcos_status              bit(12)aligned based(gsp);
dcl  bit72                    bit(72)aligned based;
dcl  gsp                      ptr;

dcl  acl_ptr                  ptr	/* pointer to segment_acl passed
				as a parameter to msf_manager_$acl_list */;
dcl  ap                       ptr	/* Pointer to the attributes structure for the current file */;
dcl  bc                       fixed bin (24)	/* Used as a sink for bit counts returned by
				msf_manager_$get_ptr */;
dcl  bit_count                fixed bin (24)	/* The bit count of the last segment of an msf.
				Passed as a parameter to msf_manager_$adjust. */;
dcl  bksp_sw                  bit (1)	/* Distinguishes between backspacing
				"1"b and forward spacing "0"b a linked file. */;
dcl  cmd_word                 bit (36) aligned	/* temp */;
dcl  count                    fixed bin (24)	/* Counts io commands processed
				for current io select sequence */;
dcl  da_residue               fixed bin	/* Address of last memory location
				accessed during I/O.  Used in building
				return status words for I/O. */;
dcl  data_moved               fixed bin (24)	/* number of words moved or skipped over by
				the current read or write operation. */;
dcl  dcw_number               fixed bin (24)	/* Used to count DCW's in
				the current select sequence */;
dcl  dcw_offset               fixed bin (24)	/* slave offset of current dcw */;
dcl  dcw_ptr                  ptr	/* Multics pointer to the current dcw */;
dcl  disconnect               bit (1)	/* Indicator that the last DCW has been encountered. */;
dcl  error_table_$namedup     fixed bin (35) ext;
dcl  error_table_$rqover      fixed bin(35)ext;
dcl  error_table_$segknown    fixed bin (35) ext;
dcl  fcb_ptr                  ptr init (null ())	/* pointer to file control block
				used by msf_manager_ */;
dcl  file_ptr                 ptr	/* pointer to current positoion in file */;
dcl  fn                       fixed bin (24)	/* Index in gtss_ext_$disk_file_data of
				information about the file to be processed. */;
dcl  get_mode                 fixed bin (5)	/* User's access mode to segment as
				returned by hcs_$fs_get_mode */;
dcl  gsc                      fixed bin(24);
dcl  i                        fixed bin (24);
dcl  idptr                    ptr	/* Pointer to the current id
				word of the I/O select sequence. */;
dcl  j                        fixed bin (24);
dcl  l                        fixed bin (24)	/* The length in words of the current
				piece of data to be moved to or from the file */;
dcl  largest_file             fixed bin (24)	/* Max no. of llinks a file can grow to */;
dcl  last_component           bit (1)	/* When on, indicates that the
				current component is the last component of the file */;
dcl  li                       bit (1)	/* variable for the parameter link_indicator */;
dcl  M                        char (l*4) based	/* A template used for moving data
				to or from the file. */;
dcl  max_change               fixed bin (24)	/* The maximum amount that
				the size of a file can be increased
				expressed in llinks (320 word blocks) */;
dcl  msf_components           (0:499) ptr based	/* An array of pointers for each msf.
				Each component which has been accessed has a
				corresponding initialized pointer. */;

dcl  msf_save                 bit (1)	/* A flag used to remember whether
				the file was a msf before its size
				was changed. */;
dcl  no_components_save       fixed bin (24)	/* Used to remember the number
				of components a file had before its
				size was changed */;
dcl  pat_body_overlay         bit (180) based	/* used for initializing the
				pat body to all zeros */;
dcl  opptr                    ptr	/* Pointer to the current operation
				word of the I/O select sequence. */;
dcl  rec_ct_residue           fixed bin (24)	/* holds no of unskipped records */;
dcl  record_quota_overflow    condition ext;
dcl  sc                       fixed bin (24)	/* local variable for the parameter size_change */;
dcl  scratch_status           bit (72) aligned	/* temp */;
dcl  seek_address             fixed bin (24) based	/* user seek address for disk or drum */;
dcl  seek_ptr                 ptr	/* Pointer to the word containing
				the io seek address */;
dcl  seeksw                   bit (1)	/* sw controlling disk or drum seeks */;
dcl  seg_length               fixed bin (24)	/* length in words of current component of file */;
dcl  select_seg_ptr           ptr	/* Pointer to beginning of
				segment containing select sequence */;
dcl  select_seq_in_memory     bit (1)	/* 1 => the select sequence is in the
				same segment that is used for Gcos memory.
				In this case the addresses of DCW's, seek address data word, and
				status return words will be checked against the
				memory_limit parameter. */;
dcl  slave_status             bit (36) aligned;
dcl  sp                       ptr	/* Pointer to user's select sequence for this I/O */;
dcl  storlimit                fixed bin (24)	/* slave core boundary */;
dcl  sptr                     ptr	/* pointer to return word of select sequence */;
dcl  swptr                    ptr	/* Pointer to status return words */;
dcl  sys_info$max_seg_size    fixed bin (35) ext;
dcl  ta_offset                fixed bin (24)	/* Offset in the user's slave memory
				of the transmission area for the current DCW. */;
dcl  ta_ptr                   ptr	/* pointer to the transmission area for
				the current DCW. */;
dcl  ta_seg_ptr               ptr	/* pointer to the user's slave
				memory segment */;
dcl  tdcw_previous            bit (1)	/* Indicator that the last DCW processed was a TDCW */;
dcl  tfp                      fixed bin (71);
dcl  wc_residue               fixed bin (24)	/* Number of words remaining to be transferred
				in the current dcw when eof or
				memory fault occurs. Used in building
				return status words for I/O. */;
dcl  work_area                area (sys_info$max_seg_size) aligned
		     based (gtss_ext_$work_area_ptr)	/* Area used to store arrays of pointers to
			components of msf's. */;
dcl  delete_$path             entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl  hcs_$fs_get_mode         entry (ptr, fixed bin (5), fixed bin (35));
dcl  hcs_$make_seg            entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  ioa_                     entry options (variable);
dcl  msf_manager_$adjust      entry (ptr, fixed bin, fixed bin (24), bit (3), fixed bin (35));
dcl  msf_manager_$close       entry (ptr);
dcl  msf_manager_$get_ptr     entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
dcl  msf_manager_$open        entry (char (*), char (*), ptr, fixed bin (35));

/* STRUCTURES */

dcl 1 dcw aligned based (dcw_ptr),			/* dcw model */
    2 data_addr bit (18) unaligned,			/* data address */
    2 zero bit (3) unaligned,				/* fill */
    2 action bit (3) unaligned,			/* action */
    2 count bit (12) unaligned;						/* word count for transfer */

dcl 1 id_word aligned based (idptr),			/* model of identification word */
    2 filep bit (18) unaligned,			/* file control block pointer */
    2 dcwp bit (18) unaligned;						/* dcw list pointer */


dcl 1 op_word aligned based (opptr),			/* model of operation word */
    2 dev_com bit (6) unaligned,			/* device command */
    2 zero1 bit (12) unaligned,			/* zeros */
    2 ioc_com bit (5) unaligned,			/* ioc command */
    2 zero2 bit (1) unaligned,			/* zero */
    2 control bit (6) unaligned,			/* control */
    2 count bit (6) unaligned;						/* count */

dcl 1 return_word aligned based (sptr),			/* model of status return word */
    2 status_return bit (18) unaligned,			/* pointer to return words */
    2 courtesy_call bit (18) unaligned;						/* pointer to courtesy call rtn */

dcl 1 stat_words aligned based (swptr),			/* model of status words */
    2 sw1 bit (36) aligned,				/* word 1 */
    2 sw2 bit (36) aligned;						/* word 2 */



dcl  decode_mode              (0:63) bit (3) aligned			/* Permissions are read, execute, write */
     static init (					/* OCTAL */
     "100"b,					/* 0 -- Zero access mode maps to Query permission */
     "100"b,					/* 1 */
    (2) (1)"000"b,					/* 2-3 */
     "110"b,					/* 4 */
    (3) (1)"000"b,					/* 5-7 */
     "100"b,					/* 10 */
    (7) (1)"000"b,					/* 11-17 */
    (2) (1)"101"b,					/* 20-21 */
    (2) (1) "000"b,					/* 22-23 */
     "101"b,					/* 24 */
    (11) (1)"000"b,					/* 25-37 */
    (2) (1) "100"b,					/* 40-41 */
    (6) (1)"000"b,					/* 42-47 */
     "100"b,					/* 50 */
    (3) (1)"000"b,					/* 51-53 */
     "100"b,					/* 54 */
    (3) (1)"000"b,					/* 55-57 */
    (2) (1)"101"b,					/* 60-61 */
    (10) (1)"000"b,					/* 62-73 */
     "101"b,					/* 74 */
    (3) (1)"000"b);						/* 75-77 */

dcl  io_commands              (8) bit (36) internal static aligned init (


/* 	Disk Command Table						 */

     "340000000002"b3,				/* 34 - seek disk address */
     "250000002400"b3,				/* 25 - read disk continuous */
     "310000002400"b3,				/* 31 - write disk continuous */
     "700000020001"b3,				/* 70 - rewind */
     "460000020001"b3,				/* 46 - backspace record(s) */
     "440000020001"b3,				/* 44 - forward space record(s) */
     "400000020001"b3,				/* 40 - reset status */
     "000000020001"b3);						/* 00 - request status */

%include gtss_dfd_ext_;

%include gtss_file_attributes;

%include gtss_ext_;

%include gtss_file_values;

%include gtss_entry_dcls;

%include gtss_db_names;
     end						/* gtss_ios_open_ */;
