/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_filact_funct21_: proc (mcp_val, high_val, gseg_val, arg_ptr_val, buffer_ptr_val, code);

/**	Derail FILACT function 21 (Get Specific).

	All parameters are input parameters except code.

	code retuurned 0 => Successful.
	code returned 4 => GCOS err4 (see gtss_pnterr structure).
	code returned othr => multics error code.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 $db debug switch.
   Change:  Bob Alvarado      08/22/79 commented out lines 106-108 as temp fix.
**/
dcl  mcp_val                  ptr parm;
dcl  high_val                 bit(18)parm;
dcl  gseg_val                 ptr parm;
dcl  arg_ptr_val              ptr parm;
dcl  buffer_ptr_val           ptr parm;
dcl  code                     fixed bin(35)parm;
	mcp = mcp_val;
	high_b = high_val;
	high_i = fixed (high_b, 18);
	gseg = gseg_val;
	arg_ptr = arg_ptr_val;
	buffer_ptr = buffer_ptr_val;

	code = 0;					/* Successful. */

/**	Obtain get specific catalog or file arglist. */
	if					/* (Get_Specific_args.L_arglist < low_b) | */
	((fixed (Get_Specific_args.L_arglist, 18) +3) > high_i) then do;
return_err4:   ;
	     code = 4;
	     return;
	end;
	arglist_ptr = addrel (gseg, Get_Specific_args.L_arglist);

/**	Obtain return status.	**/
	call validate_status (Get_Specific_arglist.L_status_return, status_ptr);

	if					/* (Get_Specific_arglist.L_sector_arg<low_b) | */
	(Get_Specific_arglist.L_sector_arg>high_b) then goto return_err4;
	sector_ptr = addrel (gseg, Get_Specific_arglist.L_sector_arg);

	if db_filact_funct21 then do;
	     i = fixed (sector_number, 18);
	     call ioa_ ("filact21: sector_number=^6o (^i) L_eor=^6o.", i, i, fixed (L_end_of_record, 18));
	end;

	if (sector_number<"000005"b3) |
	(sector_number>"777777"b3) then do;
	     call com_err_ (0, "gtss_filact_funct21_",
		"Sector number (^i) out of range.", i);
could_not_get_specific_file: ;
	     status_word.status = "404300"b3;		/* Invalid catalog block address. */
	     return;
	end;

	def_cat_ptr = gtss_ext_$deferred_catalogs_ptr;
	def_cat_type_1_ptr = addrel (def_cat_ptr, sector_number);
	if db_filact_funct21 then
	     call ioa_ ("filact21: cat=^b type=^i sn=^6o (^i)."
	     , def_cat_type_1.cat
	     , def_cat_type_1.rec_type
	     , fixed (def_cat_type_1.sn, 18)
	     , fixed (def_cat_type_1.sn, 18)
	     );

	if def_cat_type_1.rec_type = 1 then do;		/* Provide catalog continuation record type 1. */
	     Type_1_ptr = addr (callers_buffer.W43_FSBFER);
	     Type_1_ptr -> FSnTYP_0.bits00_05 = "01"b3;	/* => catalog continuation. */
	     def_cat_fill_len = fixed (def_cat_type_1.sn, 18)-201; /* 201=> words for cat/file descr.var). */

	     i = 0;				/* Index to type 1 record names. */
	     do while (deferred_catalog.nl>0);
		i = i+1;
		if i>hbound (FS1_VAR_06_76, 1) then do; /* Type 1 record exhausted. */
		     FS1_CBK_04.bits00_17,
			FS1_NLL_01.bits00_17 = sector_number;
		     def_cat_type_1.sn = rel (addr (deferred_catalog.type2_3));
		     goto finished;
		end;
		FS1_VAR_06_76 (i).FS1_SNM_00_01 = (12)"20"b3;
		call gtss_ascii_bcd_ (
		     addr (deferred_catalog.ns)
		     , min (deferred_catalog.nl, 12)
		     , addr (FS1_VAR_06_76 (i).FS1_SNM_00_01)
		     );
		FS1_VAR_06_76 (i).FS1_SPT_02.bit01 = deferred_catalog.cat;
		FS1_VAR_06_76 (i).FS1_SPT_02.bits18_35 = rel (addr (deferred_catalog.type2_3));
		def_cat_fill_len = def_cat_fill_len+1+divide (deferred_catalog.nl+3, 4, 17);
	     end;
	     goto finished;
	end;
	if def_cat_type_1.rec_type = 2 then do;		/* Provide description record. */
	     if def_cat_type_1.cat then do;		/* Provide type 0 catalog record. */
	/*	call ioa_ ("filact21: rec_type 2 for cat at ^6o.", fixed (sector_number, 18));
		goto could_not_get_specific_file;	*/
	  /* This is a temp fix. this area needs reviewing */
/**MORE**/
	     end;

/**	Provide type 2 file description record. **/
	     if db_filact_funct21 then
		call ioa_ ("filact21: rec_type 2 for file at ^6o.", fixed (sector_number, 18));

dcl 1 filact18_call		aligned
,     3 sas		(102)bit(36)
,     3 args		aligned like Get_Current_args
,     3 arglist		aligned like Get_Current_arglist
,     3 stat		bit(72)
,     3 cat_file		(200)bit(36)
;

	     unspec (filact18_call) = "0"b;

	     args.L_arglist = rel (addr (filact18_call.arglist));
	     args.Get_Current_function_no = 18;
	     arglist.L_status_return = rel (addr (stat));
	     arglist.L_cat_filedescr = rel (addr (filact18_call.cat_file));

/**	Prepare a catalog/file description by catenating
	the file name to the cat/filedescr in the deferred
	catalog store.
**/
dcl 1 move_string		aligned based(addr(filact18_call.cat_file)),
    2 cat_file_string	bit(cfdl),
    2 file_string		char(8),
    2 file_perm		bit(72),
    2 minus_one		fixed bin(35);
dcl  cfdl                     fixed bin(35);

	     cfdl = cat_file_len*4*36;
	     cat_file_string = addr (deferred_catalog.cat_file) -> cat_file_string;
dcl 1 file_name	aligned based(def_cat_type_1_ptr),
      3 fill	bit(18)unal,
      3 name_len	fixed bin(17)unal,
      3 name	char(file_name.name_len)unal;
	     file_string = file_name.name;
	     file_perm = (12)"20"b3;
	     minus_one = -1;

	     call gtss_filact_funct18_ (
		mcp
		, (6)"7"b3
		, addr (filact18_call)
		, addr (args)
		, buffer_ptr
		, code
		);
	     if code ^= 0 then goto could_not_get_specific_file;
	     goto finished;
	end;
	call com_err_ (0, "gtss_filact_funct21_",
	     "Deferred FMS catalog records of type ^i not provided for.", def_cat_type_1.rec_type);
	goto could_not_get_specific_file;

finished:	;

	code = 0;
	Get_Specific_arglist.L_record = rel (Type_1_ptr);
	sector.sector_number = bit (fixed (fixed (Get_Specific_arglist.L_record, 18)+size (Type_1_Catalog)-2, 18));
	status_word.status = "400000"b3;
	return;


%include gtss_filact_intp1;

/** Declarations for gtss_drl_filact_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  names                    (total_names)char(32)aligned based(n_ptr);
dcl  hcs_$star_               entry(char(*),char(*),fixed bin(2),ptr,fixed bin,ptr,ptr,fixed bin(35));
dcl  total_names              fixed bin;
dcl  name_info                area(261120)aligned based(gtss_ext_$hcs_work_area_ptr);
dcl  entry_count              fixed bin;
dcl  entry_ptr                ptr init(null());
dcl  n_ptr                    ptr init(null());
dcl  directory                char(168)var;
dcl  brp                      ptr init(null());
dcl  sector_ptr               ptr init(null());
dcl  access_mode              bit (6);
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  aft_code                 fixed bin (35);
dcl  aft_name                 char (8);
dcl  altname                  char (8) aligned based (altname_ptr);
dcl  altname_ptr              ptr init(null());
dcl  append_mode              bit (36) static int options(constant)init ("100000000000"b3);
dcl  arglist_ptr              ptr init(null());
dcl  arg_ptr                  ptr init(null());
dcl  attribute_segment_ptr    ptr init(null());
dcl  bit                      builtin;
dcl  bit18                    bit(18)based;
dcl  bit72                    bit(72)aligned based;
dcl  bit_count                fixed bin (24);
dcl  cat_filedescr_name_offset bit(18);
dcl  cdate                    fixed bin (71);
dcl  clim                     float bin;
dcl  cont_ptr                 ptr init(null());
dcl  crf                      fixed bin(24);
dcl  csp                      float bin;
dcl  delete_$path             entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl  descriptor_address       bit (18);
dcl  descriptor_ptr           ptr init(null());
dcl  dir_name                 char (168);
dcl  divide                   builtin;
dcl  entry_name               char (12) init (" ");
dcl  error_table_$incorrect_access fixed bin (35) ext;
dcl  error_table_$moderr      fixed bin (35) ext;
dcl  error_table_$namedup     fixed bin (35) ext;
dcl  error_table_$noentry     fixed bin (35) ext;
dcl  error_table_$nomatch     fixed bin (35) ext;
dcl  error_table_$not_seg_type fixed bin(35)ext;
dcl  error_table_$no_dir      fixed bin (35) ext;
dcl  error_table_$segknown    fixed bin (35) ext;
dcl  error_table_$seg_not_found fixed bin (35) ext;
dcl  execute_mode             bit (36) static int options(constant)init ("200000000000"b3);
dcl  file_no                  fixed bin (24);
dcl  fixed                    builtin;
dcl  fixed_bin17              fixed bin(17)unal based;
dcl  FMS_block_ptr            ptr init(null());
dcl  four_NULS                char (4)static int options (constant)init ((4)" ") /* 4 octal 000's */;
dcl  gseg                     ptr init(null());
dcl  gtss_fail                condition;
dcl  have_file                bit(1);
dcl  hbound                   builtin;
dcl  hcs_$add_acl_entries     entry (char (*), char (*), ptr, fixed bin(24), fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$add_inacl_entries   entry (char (*), char (*), ptr, fixed bin, fixed bin (3), fixed bin (35));
dcl  hcs_$append_branchx      entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
dcl  hcs_$delentry_file       entry(char(*),char(*),fixed bin(35));
dcl  hcs_$initiate            entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg            entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$quota_read          entry (char (*), fixed bin (18), fixed bin (71), bit (36) aligned, bit (36), fixed bin (1), fixed bin (18), fixed bin (35));
dcl  hcs_$status_long         entry (char (*), char (*), fixed bin (1), ptr,ptr, fixed bin (35));
dcl  high_b                   bit(18)aligned;
dcl  high_i                   fixed bin(18)aligned;
dcl  i                        fixed bin(24);
dcl  increment                fixed bin(24);
dcl  index                    builtin;
dcl  ioa_                     entry options (variable);
dcl  k                        fixed bin(24);
dcl  l                        fixed bin(24);
dcl  last_sector_no           fixed bin;
dcl  lbound                   builtin;
dcl  low_b                    bit(18)aligned static int options(constant)init("000147"b3) /* 103 dec. */;
dcl  low_i                    fixed bin(18)aligned static int options(constant)init(103);
dcl  max_options              fixed bin static int options(constant)init (100);
dcl  max_resources            fixed bin static int options(constant)init (99999);
dcl  mlim                     float bin;
dcl  mod                      builtin;
dcl  modify_mode              bit (36) static int options(constant)init ("200000000000"b3);
dcl  msp                      float bin;
dcl  multics_access_mode      fixed bin(5);
dcl  nic                      fixed bin(24);
dcl  p                        ptr init(null());
dcl  path_name                char (168) varying;
dcl  person_id                char (22);
dcl  quota                    fixed bin (18);
dcl  read_mode                bit (36) static int options(constant)init ("400000000000"b3);
dcl  rel                      builtin;
dcl  rings                    (3) fixed bin (3) static int options(constant)init (4, 4, 4);
dcl  seg_acl_count            fixed bin;
dcl  shlim                    (0:7) float bin;
dcl  shsp                     (0:7) float bin;
dcl  size                     builtin;
dcl  smc_entry_ptr            ptr init(null());
dcl  sons_lvid                bit (36);
dcl  status                   fixed bin (24);
dcl  status_mode              bit (36) static int options(constant)init ("400000000000"b3);
dcl  status_ptr               ptr init(null());
dcl  string                   builtin;
dcl  substr                   builtin;
dcl  switches                 bit (6) static int options(constant)init ("37"b3);
dcl  tacc_sw                  fixed bin (1);
dcl  trp                      fixed bin (71);
dcl  tup                      bit (36) aligned;
dcl  two_words                bit (72) based;
dcl  type                     fixed bin (2);
dcl  used                     fixed bin (18);
dcl  user_attribute_word      bit (35);
dcl  user_info_$limits        entry (float bin, float bin, fixed bin (71), fixed bin(24), (0:7) float bin, float bin, float bin, (0:7) float bin);
dcl  write_mode               bit (36) static int options(constant)init ("100000000000"b3);

dcl 1 sector	aligned based(sector_ptr),
      3 sector_number	bit(18)unal,
      3 L_end_of_record	bit(18)unal;

dcl 1 entries (entry_count)aligned based(entry_ptr),
    2 type	bit(2)unal,
    2 nnames	fixed bin(15)unal,
    2 nindex	fixed bin(17)unal;

dcl 1 bm based(addr(branch.mode)),
    2 zero	bit(1)unal,
    2 read	bit(1)unal,
    2 execute	bit(1)unal,
    2 write	bit(1)unal,
    2 append	bit(1)unal;

dcl 1 gfv aligned based(addr(gtss_file_values.data_fields)),
    2 curll_val,
      3 curll00_20 bit(21)unal,
      3 curll21_35 bit(15)unal,
    2 maxll_val,
      3 maxll00_17 bit(18)unal,
      3 maxll18_35 bit(18)unal,
    2 nail_val,
      3 noal00_17  bit(18)unal,
      2 noal18_35 bit(18)unal;

dcl 1 Get_Specific_args	aligned based(arg_ptr)
,     3 word1
,       4 zero		bit(18)unal
,       4 L_arglist		bit(18)unal
,     3 word2
,       4 Get_Specific_function_no	fixed bin(17)unal
,       4 L_buffer		bit(18)unal
;

dcl 1 Get_Specific_arglist	aligned based(arglist_ptr)
,     3 word1
,       4 L_status_return	bit(18)unal
,       4 L_record		bit(18)unal
,     3 word2
,       4 L_sector_arg	bit(18)unal
,       4 device_name	bit(18)unal
;

dcl 1 status_word aligned based (status_ptr),
    2 status bit (18) unaligned,
    2 pd bit (18) unaligned,
    2 null_bit bit (1) unaligned,
    2 user_attributes bit (35) unaligned;

%include gtss_ust_ext_;

%include gtss_ext_;

%include mc;

%include gtss_entry_dcls;

%include gtss_ascii_file_names;

%include gtss_file_values;

%include gtss_FMS_catalog;

/**	>ldd>include>status_info.incl.pl1	**/
%include status_info;

%include acls;

%include gtss_filact_options;

%include gtss_filact_status;

%include gtss_deferred_catalog;

%include gtss_filact18_args;

%include gtss_db_names;
     end						/* gtss_filact_funct21_ */;
