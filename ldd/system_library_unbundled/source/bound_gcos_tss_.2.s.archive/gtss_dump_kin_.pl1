/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_dump_kin_: proc (il);

/* Store caller's kin input line on Multics file.

   Author: Dave Ward	12/05/80
*/
dcl  il                       aligned char(*) parm;
	lc = lc+1;				/* Line count. */
	p6 = lc;					/* Count of lines. */
	p3 = length (il);				/* Length of kin line. */
	prefix = NL||"<<"||char (p6)||":"||char (p3)||">>";
	tl = prefix||il;
	n = length (tl);
	k = 0;
	if (l+length (tl)) > (255*1024*4) then do;	/* Complete segment. */
	     k = (255*1024*4)-l;
	     substr (p (c) -> S, l+1, k) = substr (tl, 1, k);
	     c = c+1;
	     if c>hbound (p, 1) then do;
		call com_err_ (
		     0
		     , "gtss_dump_kin_"
		     , "Exhausted ^i segments for kin dump file, reusing."
		     , hbound (p, 1)
		     );
		c = 0;
	     end;
	     else do;				/* Open next MSF component. */
		call msf_manager_$get_ptr (		/* Obtain next msf component. */
		     fcbp				/* (input) mfs control block pointer. */
		     , c				/* (input) component number. */
		     , "1"b			/* (input) create component if necessary. */
		     , p (c)			/* (output) pointer to component. */
		     , (0)			/* (output) bit count [not of interest]. */
		     , code			/* (ourtput) status code. */
		     );
		if code ^= 0 then do;
		     if (code ^= error_table_$namedup)
		     & (code ^= error_table_$segknown) then
			call com_err_ (		/* msf get_ptr failure. */
			code
			, "gtss_dump_kin_"
			, "Attempting to open component ^i of"
			||"^/^a>^a"
			, c
			, dir
			, ent
			);
		     if p (c) = null () then signal cond (gtss_fail);
		end;
	     end;
	     l = 0;
	     n = length (tl)-k;
	end;
	substr (p (c) -> S, l+1, n) = substr (tl, k+1, n);
	l = l+n;
	return;

init:	entry returns (bit (1));

/* Query caller for file to store
   kin lines in.
*/

/* Ask caller for name of file in which
   kin lines can be stored.
*/
	dir, ent = " ";
	fcbp, aclp, p = null ();
	lc, l, c = 0;
	yes_or_no_sw = "0"b;			/* Not requesting yes or no. */
	suppress_name_sw = "0"b;			/* Print caller's name. */
	status_code = 0;
	call command_query_ (
	     addr (query_info)
	     , ans
	     , "gtss"
	     , "Name of file to dump kin lines to? "
	     );

/* Obtain directory and entry. */
	call expand_pathname_ (
	     (ans)				/* (input) dump file pathname. */
	     , dir				/* (output) directory. */
	     , ent				/* (output) entry. */
	     , code				/* (output) status code. */
	     );
	if code ^= 0 then do;
	     call com_err_ (			/* pathname failed. */
		code
		, "gtss_dump_kin_"
		, "Can not expand ""^a"""
		, ans
		);
	     return ("1"b);				/* Fail. */
	end;

/* Obtain multi-segment file. */
	call tssi_$get_file (			/* Obtain dump file. */
	     dir					/* (input) directory. */
	     , ent				/* (input) entry name. */
	     , p (0)				/* (output) component 0. */
	     , aclp				/* (output) ACL info. */
	     , fcbp				/* (output) msf control block pointer. */
	     , code				/* (output) status. */
	     );
	if code ^= 0 then do;
	     call com_err_ (			/* tssi failed. */
		code
		, "gtss_dump_kin_"
		, "^/^a>^a"
		, dir
		, ent
		);
	     return ("1"b);				/* Failed. */
	end;

	return ("0"b);				/* Successful. */

fin:	entry;

/* Close the collection file. */
	call tssi_$finish_file (
	     fcbp					/* (input) msf control block pointer. */
	     , c					/* (input) component. */
	     , l*9				/* (input) bit count (9 times # characters. */
	     , "101"b				/* (input) read and write access. */
	     , aclp				/* (input) pointer to ACL info. */
	     , code				/* (output). */
	     );
	if code ^= 0 then
	     call com_err_ (			/* close failed. */
	     code
	     , "gtss_dump_kin_"
	     , "^/^a>^a"
	     ||"^/fcb-ptr=^p acl-info-ptr=^p"
	     , dir
	     , ent
	     , fcbp
	     , aclp
	     );
	dir, ent = " ";
	fcbp, aclp, p = null ();
	lc, l, c = 0;
	return;

clean:	entry;

/* For cleanup condition processing. */
	call tssi_$clean_up_file (fcbp, aclp);
	return;

/*   IDENTIFIER		ATTRIBUTES	*/
/*   Variables for gtss_dump_kin_		*/
dcl  aclp                     ptr static int;
dcl  ans                      char(256)var;
dcl  c                        fixed bin static int;
dcl  char                     builtin;
dcl  code                     fixed bin(35);
dcl  command_query_           entry() options(variable);
dcl  com_err_                 entry() options(variable);
dcl  dir                      char(168) static int;
dcl  ent                      char(32) static int;
dcl  error_table_$namedup     fixed bin(35) ext static;
dcl  error_table_$segknown    fixed bin(35) ext static;
dcl  expand_pathname_         entry (char(*), char(*), char(*), fixed bin(35));
dcl  fcbp                     ptr static int;
dcl  gtss_fail                condition ext;
dcl  ioa_                     entry() options(variable);
dcl  k                        fixed bin(24);
dcl  l                        fixed bin(24)static int;
dcl  lc                       fixed bin(24)static int;
dcl  length                   builtin;
dcl  msf_manager_$get_ptr     entry (ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35));
dcl  n                        fixed bin(24);
dcl  p                        (0:9)ptr static int;
dcl  p3                       pic "(3)9";
dcl  p6                       pic "(6)9";
dcl  prefix                   char(15);
dcl  S                        char(1044480)aligned based;
dcl  tl                       char(400)var;
dcl  tssi_$clean_up_file      entry (ptr, ptr);
dcl  tssi_$finish_file        entry (ptr, fixed bin, fixed bin(24), bit(36) aligned, ptr, fixed bin(35));
dcl  tssi_$get_file           entry (char(*), char(*), ptr, ptr, ptr, fixed bin(35));

dcl  NL                       char(1)static int options(constant) init("
");

%include query_info;
     end gtss_dump_kin_;
