/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_mcfc_delete: mcfcdl: proc;

/* Delete whole mcfc file chain,
   or one file on a chain,
   or one caller of file.

   Input arguments are one or more values of forms:
   chain or chain-file or chain-file-caller.
   The values "chain", "file" and "caller" are
   unsigned positive integers reflecting
   values output from gtss_mcfc_dump designating the
   corresponding entries.
   The caller will be queried for a "yes" or "no" BEFORE
   each entry is actually deleted.

   Author:	Dave Ward 08/08/79
*/
	sub_entry = "0"b;
	goto cont;

arg_ptr:	entry (pap);

/* Subroutine entry given pointer to arguments.
*/
dcl  pap                      ptr parm;
	sub_entry = "1"b;

cont:	;

	call gtss_mcfc_init_ (r);
	if r = "false" then
fail:	     return;

	do argn = 1 by 1;
	     if sub_entry then
		call cu_$arg_ptr_rel (argn, ap, al, code, pap);
	     else
	     call cu_$arg_ptr (argn, ap, al, code);
	     if code ^= 0 then do;			/* Concludion of input arguments. */
		if argn<2 then
		     call com_err_ (
		     code
		     , "gtss_mcfc_delete"
		     , "One or more: c[-f[-u]]. c, f, u are integers for chain, file and caller from gtss_mcfc_dump."
		     );
		return;
	     end;
	     call del (arg);
next_arg:	     ;
	end;

del:	proc (cfc);

/* Delete entry named by cfc parameter. */
dcl  cfc                      char(*)parm;

/* Obtain 3 integers for chain, file and caller.
*/
	     chain, file, caller = -1;
	     call get_int (1, cfc, chain);

/* Isolate and lock chain. */
	     if (chain<lbound (mcfc.start_list, 1)) | (chain>hbound (mcfc.start_list, 1)) then do;
		call com_err_ (
		     0
		     , "gtss_mcfc_delete"
		     , "Arg ^i (^a), chain ^i out of range ^i...^i. Skipped."
		     , argn
		     , arg
		     , chain
		     , lbound (mcfc.start_list, 1)
		     , hbound (mcfc.start_list, 1)
		     );
		goto next_arg;
	     end;

/* Lock chain. */
	     call set_lock_$lock (
		mcfc.start_list (chain).files.lock
		, 60				/* Wait up to 60 seconds. */
		, code
		);
	     if code = 0 then do;
cont_del:		;
		call del_file (chain, file, caller);

/* Unlock chain. */
		call set_lock_$unlock (
		     mcfc.start_list (chain).files.lock
		     , code
		     );
		if code ^= 0 then do;
		     call com_err_ (
			code
			, "gtss_mcfc_delete"
			, "Unlocking chain ^i (Arg ^i ""^a""). Quitting."
			, chain
			, argn
			, arg
			);
		     goto fail;
		end;
		return;
	     end;
	     if code = error_table_$invalid_lock_reset then do;
		call com_err_ (
		     code
		     , "gtss_mcfc_delete"
		     , "For chain ^i (Arg ^i ""^a"")."
		     , chain
		     , argn
		     , arg
		     );
		goto cont_del;
	     end;

/* Could not lock. */
	     if code = error_table_$lock_wait_time_exceeded then do;
		call com_err_ (
		     code
		     , "gtss_mcfc_delete"
		     , "Could not wait to lock chain ^i (Arg ^i ""^a""). Skipped."
		     , chain
		     , argn
		     , arg
		     );
		return;
	     end;
	     call com_err_ (
		code
		, "gtss_mcfc_delete"
		, "ENEXPECTED ERROR processing chain ^i (Arg ^i ""^a""). Quitting."
		, chain
		, argn
		, arg
		);
	     goto fail;


get_int:	     proc (i, s, v);

/* Obtain 3 integer values. */
dcl  i                        fixed bin(24) parm;
dcl  s                        char(*)parm;
dcl  v                        fixed bin(24) parm;
		if i>3 then return;
		k = search (s, "-");
		if k = 0 then do;			/* Contains no (more) minus signs. */
		     if verify (s, "0123456789")>0 then do;
bad_arg:			;
			call com_err_ (
			     0
			     , "gtss_mcfc_delete"
			     , "Argument ^i, ""^a"", not integer-integer-integer, skipped."
			     , argn
			     , arg
			     );
			goto next_arg;
		     end;
		     v = fixed (s, 24);
		     return;
		end;
		if verify (substr (s, 1, k-1), "0123456789")>0 then goto bad_arg;
		v = fixed (substr (s, 1, k-1), 24);
		if i = 1 then
		     call get_int (i+1, substr (s, k+1), file);
		else
		call get_int (i+1, substr (s, k+1), caller);
		return;
dcl  k                        fixed bin(24);
	     end					/* get_int */;
dcl  chain                    fixed bin(24);
dcl  file                     fixed bin(24);
dcl  caller                   fixed bin(24);
	end					/* del */;

del_file:	proc (c, f, u);

/* Delete caller u of file f on chain c.
*/
dcl  c                        fixed bin(24)parm;
dcl  f                        fixed bin(24)parm;
dcl  u                        fixed bin(24)parm;
	     if (f ^= -1)| (u ^= -1) then do;
		call com_err_ (
		     0
		     , "gtss_mcfc_delete"
		     , "Only delete chain implemented, arg ^i ""^a"""
		     , argn
		     , arg
		     );
		return;
	     end;
	     ln = -c;
	     n = mcfc.start_list (c).files.first;

	     if f = -1 then do;			/* => delete chain. */
		query_info.yes_or_no_sw = "1"b;	/* Demand yes or no. */
		query_info.suppress_name_sw = "0"b;	/* Display caller name. */
		query_info.status_code,
		     query_info.query_code = 0;
		call command_query_ (
		     addr (query_info)
		     , ans
		     , "gtss_mcfc_delete"
		     , "Can ALL chain ^i be deleted?"
		     , c
		     );
dcl  command_query_           entry options(variable);
		if ans = "no" then return;
dcl  ans                      char(3)var;
		mcfc.start_list (c).files.first = 0;	/* Make chain c available. */
	     end;

	     do while (n>0);
		fn = n;				/* File index. */
dcl  fn                       fixed bin(24);

/* Link to next file in chain. */
		ln = n;
		n = file_entry (n).link;
		if f = -1 then do;

/* Delete any file on chain c. */
		     call return_entry (c, fn);
		end;
		else do;
		     if n = f then do;		/* File entry found. */
			if u = -1 then do;		/* Delete all callers for file. */
/**MORE**/
			end;

/* Delete only caller u. */
/**MORE**/
			return;
		     end;
		end;
	     end;

/* File f not found. */
/**MORE**/
	     return;

dcl  n                        fixed bin(24);
dcl  ln                       fixed bin(24);
	end					/* del_file */;

return_entry: proc (h, u);

/* Return file entry u to an available list. */
dcl  h                        fixed bin(24) parm;
dcl  u                        fixed bin(24) parm;
	     do i = h to hbound (mcfc.start_list, 1),
		     lbound (mcfc.start_list, 1) to (h-1);
		if ^can_not_lock ("avail", i, mcfc.start_list (i).avail.lock) then do;
		     if mcfc.start_list (i).avail.first = 0 then do;
			call can_not_unlock ("avail", i, mcfc.start_list (i).avail.lock);
			goto cont;
		     end;
		     unspec (file_entry (u)) = "0"b;
		     file_entry (u).link = mcfc.start_list (i).avail.first;
		     mcfc.start_list (i).avail.first = u;
		     call can_not_unlock ("avail", i, mcfc.start_list (i).avail.lock);
		     return;
		end;

cont:		;
	     end;

/* Could not find ANY available entries. */
	     call com_err_ (
		0
		, "gtss_mcfc_"
		, "NO AVAILABLE CHAIN TO RETURN TO (from ^i for ^i)"
		, h
		, u
		);
	     goto fail;
dcl  i                        fixed bin(24);
	end					/* return_entry */;

can_not_lock: proc (en, e, lw)returns (bit (1));

/* Lock word lw, for list named en at entry e.
   Return "1"b if can NOT lock, else return "0"b.
*/
dcl  en                       char(*)parm;
dcl  e                        fixed bin(24) parm;
dcl  lw                       bit(36)aligned;
	     call set_lock_$lock (
		lw
		, gtss_ext_$mcfc.wait_time
		, c
		);
	     if c = 0 then return ("0"b);

	     if c = error_table_$invalid_lock_reset then do;
		return ("0"b);
	     end;

/* Could not lock. */
	     if c = error_table_$lock_wait_time_exceeded then do;
		call com_err_ (
		     c
		     , "gtss_mcfc_delete"
		     , "(^a ^i)"
		     , en
		     , e
		     );
		return ("1"b);
	     end;
	     if c = error_table_$locked_by_this_process then do;
		call com_err_ (
		     c
		     , "gtss_mcfc_delete"
		     , "BUG? Will not proceed (^a ^i)."
		     , en
		     , e
		     );
		goto fail;
	     end;
	     call com_err_ (
		c
		, "gtss_mcfc_delete"
		, "UNEXPECTED LOCK ERROR? (^1 ^i)"
		, en
		, e
		);
	     goto fail;
dcl  c                        fixed bin(35);
	end					/* can_not_lock */;

can_not_unlock: proc (en, e, lw);

/* Unlock word lw. In en named chain, entry e.
*/
dcl  en                       char(*)parm;
dcl  e                        fixed bin(24)parm;
dcl  lw                       bit(36)aligned parm;
	     call set_lock_$unlock (
		lw
		, c
		);
	     if c = 0 then return;

/* Could not unlock. */
	     if (c = error_table_$lock_not_locked) |
	     (c = error_table_$locked_by_other_process) then
		call com_err_ (
		c
		, "gtss_mcfc_delete"
		, "BUG? Will not proceed (^a ^i)."
		, en
		, e
		);
	     else
	     call com_err_ (
		c
		, "gtss_mcfc_delete"
		, "UNEXPECTED LOCK ERROR? (^a ^i)"
		, en
		, e
		);
	     goto fail;
dcl  c                        fixed bin(35);
	end					/* can_not_unlock */;

/* Variables for gtss_mcfc_delete:
   IDENTIFIER		ATTRIBUTES	*/
dcl  al                       fixed bin(24);
dcl  ap                       ptr;
dcl  arg                      char(al)unal based(ap);
dcl  argn                     fixed bin(24);
dcl  code                     fixed bin(35);
dcl  com_err_                 entry options(variable);
dcl  cu_$arg_ptr              entry(fixed bin(24),ptr,fixed bin(24),fixed bin(35));
dcl  cu_$arg_ptr_rel          entry(fixed bin(24),ptr,fixed bin(24),fixed bin(35),ptr);
dcl  empty                    builtin;
dcl  error_table_$invalid_lock_reset fixed bin(35)ext;
dcl  error_table_$locked_by_other_process fixed bin(35)ext;
dcl  error_table_$locked_by_this_process fixed bin(35)ext;
dcl  error_table_$lock_not_locked fixed bin(35)ext;
dcl  error_table_$lock_wait_time_exceeded fixed bin(35)ext;
dcl  get_lock_id_             entry(bit(36)aligned);
dcl  gtss_mcfc_init_          entry(char(*)var);
dcl  i                        fixed bin(24);
dcl  lid                      bit(36)aligned;
dcl  n                        fixed bin;
dcl  null                     builtin;
dcl  r                        char(5)var;
dcl  set_lock_$lock           entry(bit(36)aligned,fixed bin,fixed bin(35));
dcl  set_lock_$unlock         entry(bit(36)aligned,fixed bin(35));
dcl  sll                      fixed bin;
dcl  sub_entry                bit(1);

%include gtss_mcfc;

%include gtss_ext_;

%include query_info;
     end						/* gtss_mcfc_delete */;
