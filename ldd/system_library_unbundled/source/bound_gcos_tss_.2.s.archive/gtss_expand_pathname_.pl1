/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_expand_pathname_: proc (np, dn, en, rs);

/*	Translate a GCOS catalog/file description
   list of names to a Multics directory and
   entry name.

   The translation is regulated by the convention
   specified through the $set..mode entries
   (of gtss_expand_pathname_).

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	08/16/79 db entry and #CMD/#LIB sensitive.
   Change:  Dave Ward	08/21/79 trace to path name, db result.
   Change:  Bob Alvarado	09/25/79 Added goto complete at case-b(3).
   Change:  Paul Benjamin	11/27/79 Added verify_umc entrypoint.
   Change:  Paul Benjamin     12/17/79 Store gtss_ext_$drm_path.
   Change:  Paul Benjamin	04/03/80 Fix bug when accessing thru link.
   */
dcl  np                       ptr parm		/* Pointer to ascii_cat_file structure (input). */;
dcl  dn                       char (*)parm	/* Multics directory name (output). */;
dcl  en                       char (*)parm	/* Multics file entry name (output). */;
dcl  rs                       fixed bin (35)parm	/* Multics/gcos_et error status (output). */;

	verifying = "0"b;
	goto main_entry;

verify_umc: entry (np, dn, en, sc, rs);
	verifying = "1"b;

main_entry:
	acfp = np;

	if db_expand_pathname then do;
	     call ioa_ ("gtss_expand_pathname_ (input):");
	     do i = 1 to acf.nn;
		call ioa_ ("^2i. ""^a""", i, acf.name (i));
	     end;
	end;

	rs = 0;

/* Determine if cat/file description => #CMD or #LIB
*/
	if (acf.name (1) = "cmdlib") | (acf.name (1) = "library") then do;
	     dnv = ">udd>";
	     dnv = dnv||rtrim (acf.name (1));
	     do i = 1 to (acf.nn-1);
		dnv = dnv||">";
		dnv = dnv||rtrim (acf.name (i));
	     end;
	     dn = dnv;
	     en = acf.name (acf.nn);
	     goto complete;
	end;

/* Determine the root directory corresponding to the USERID
   in this catalog/file string. */

	umc_name = rtrim (acf.name (1));
	go to case_A (gse_ext_$drm_rule);
case_A (1): ;					/* umc_dir_mode */
	directory = ">udd>"||umc_name||">"||umc_name;
	go to end_case_A;

case_A (2): ;					/* working_dir_mode */
	call get_wdir_ (wd);
	directory = rtrim (wd);
	go to end_case_A;
case_A (3): ;					/* smc_dir_mode */
	smc_name = rtrim (gse_ext_$smc_pathname);
	directory = smc_name||">"||umc_name;

end_case_A: ;

	gtss_ext_$drm_path = directory;		/* gtss_verify_access_ will need this */
	if substr(gtss_ext_$drm_path,1,14) = ">user_dir_dir>" then gtss_ext_$drm_path = ">udd>"||substr(gtss_ext_$drm_path,15);
	if acf.nn = 1 then do;			/* Only USERID in cat/file descr. */
	     go to case_B (gse_ext_$drm_rule);
case_B (1):    ;					/* umc_dir_mode */
	     dn = ">udd>"||umc_name;
	     en = umc_name;
	     goto complete;

case_B (2):    ;					/* working_dir_mode */
	     dl = search (reverse (wd), ">");
	     if dl<2 then do;
		rs = error_table_$badpath;
		return;
	     end;
	     nl = search (substr (wd, length (wd)-dl+2), " ");
	     if nl = 0 then nl = dl;
	     dn = substr (wd, 1, length (wd)-dl);
	     en = substr (wd, length (wd)-dl+2, nl-1);
	     if dn = "" then dn = ">";
	     goto complete;
case_B (3):    ;					/* smc_dir_mode */
	     dn = smc_name;
	     en = umc_name;
	     goto complete;
	end;

	if ^verifying then do;
/* Append any additional catalogs onto the Multics pathname. */
	     do i = 2 to acf.nn-1;
		directory = directory||">";
		directory = directory||rtrim (acf.name (i));
	     end;

	     dn = directory;
	     en = acf.name (acf.nn);

complete:	     ;

/* Obtain the pathname of the Multics file
   specified by directory, acf.name.
*/
	     call hcs_$get_link_target (
		(dn)
		, (en)
		, dnr
		, enr
		, ec
		);
	     if ec = 0 then do;			/* Return pathname found. */
		if substr (dnr, 1, 14) = ">user_dir_dir>" then
		dn = ">udd>"||substr (dnr, 15); else
		dn = dnr;
		en = enr;
/* If accessing thru link, then make gtss_verify_access_ just look at containing dir. */
		if substr(dn,1,length(rtrim(gtss_ext_$drm_path))) ^= gtss_ext_$drm_path
		     then gtss_ext_$drm_path = dn;
	     end;
	end;
	else do;
	     umc_dir = substr (directory, 1, (length (directory)-index (reverse (directory), ">")));
	     umc_entry = substr (directory, (length (directory)-index (reverse (directory), ">")+2));
	     call hcs_$get_link_target (
		umc_dir
		, umc_entry
		, dnr
		, enr
		, ec
		);
	     if ec = error_table_$no_dir then sc = "4001"b3;
	     else sc = "4005"b3;
	end;

	if db_expand_pathname then
	     call com_err_ (
	     ec
	     , "gtss_expand_pathname_"
	     , "Result ""^a"" ""^a"""
	     , dn
	     , en
	     );
	return;

/* Variables for gtss_expand_pathname_
   IDENTIFIER		ATTRIBUTES	*/
dcl dnr char(168);
dcl enr char(32);
dcl  acfp                     ptr init(null());
dcl  com_err_                 entry options(variable);
dcl  directory                char (168)varying;
dcl  dl                       fixed bin;
dcl  dnv                      char(168)var;
dcl  ec			fixed bin(35);
dcl  error_table_$badpath     fixed bin (35)ext;
dcl  error_table_$no_dir	fixed bin (35)ext;
dcl  get_wdir_                entry (char (168));
dcl  hcs_$get_link_target     entry(char(*),char(*),char(*),char(*),fixed bin(35));
dcl  i                        fixed bin;
dcl  ioa_                     entry options(variable);
dcl  n                        char (12);
dcl  nl                       fixed bin;
dcl  rtrim                    builtin;
dcl  sc			bit (18);
dcl  smc_name                 char (168)varying int static;
dcl  translate                builtin;
dcl  umc_dir		char (168);
dcl  umc_entry		char (032);
dcl  umc_name                 char (12)varying;
dcl  verifying		bit(1);
dcl  wd                       char (168);

dcl 1 acf aligned based (acfp) like ascii_cat_file;
%include gtss_ascii_file_names;

%include gse_ext_;

%include gtss_db_names;

%include gtss_ext_;
     end						/* gtss_expand_pathname_ */;
