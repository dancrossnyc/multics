/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_interp_prim_: proc;

/*	Routine to interpret primitives--patterned after SCAN3 in TSSH.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 $db debug switch.
   Change:  Al Dupuis	06/21/79 add call to gtss_CFP_break_
   Change:  Paul Benjamin	09/21/79 change popup_primitive to allow ..init command file
   Change:  Paul Benjamin	10/24/79 remove call to popup_primitive from t_goto
   Change:  Paul Benjamin	10/25/79 turn off logon bit in callss and t_goto to avoid recursively executing ..init
   Change:  Al Dupuis	11/10/79 reset drun indicators
   -			         h* ..init when executing drun.
   Change: Dave Ward	08/17/81 reorganized source.
   Change: Dave Wardd	08/17/81 assure system name lowere case.
   Change: Ron Barstad        12/09/82 fix bug: switchword_bit >35 is actually in gtss_ust.lswt2
*/
%page;
/* Initialization for primary entry only */
	on quit call gtss_fix_tty_modes_ ();		/* Don't want the primitive interpreter to be interrupted */
	my_level = 1;
	current_level (1) = interp;
	tty_line_ptr = addr (characters_transmitted);
	conclude_gtss = "0"b;
	cl_ptr = addr (gtss_prgdes_ext_$primitives (2));
	cp_ptr = addrel (cl_ptr, 2*gtss_prgdes_ext_$common_cmd_num);
	initial_lcals = fixed (rel (addr (gtss_ust.lcals)))-fixed (rel (addr (gtss_ust)));
	initial_lxxx = fixed (rel (addr (gtss_ust.lxxx)))-fixed (rel (addr (gtss_ust)));


/* Start user at system level. */
	call system;
	comm = "cmdl";

interp:	;

/* At this point the number of active invocations of gtss_interp_prim_
   must be equal to the stack_level_ or the program is in error. */
	if my_level ^= gtss_ext_$stack_level_ then do;
	     call com_err_ (0, "gtss_interp_prim_",
		"current invocation = ^i not syncronized with stack_level_ = ^i.",
		my_level, gtss_ext_$stack_level_);
	     signal condition (gtss_fail);
	end;

/* At this point the internal static variable comm contains the
   ASCII name of the subsystem to be invoked */
	call startp;

interp2:	;

/* Set loop counter to zero. */
	loop_count = 0;
	pop_callss_stack = "0"b;

interp_loop: ;

/* At this point next_prim is the index in gtss_prgdes_ext_$primitives
   of the next primitive to interpret and primitive is the primitive to
   interpret.
*/
/* Store pointer to current primitive in program stack. */
	i = gtss_ust.lxxx.b0_17-initial_lxxx;
	gtss_ust.lprgs (i).b18_35 = next_prim;
	if db_interp_prim then call gtss_dump_program_stack_;
	loop_count = loop_count + 1;
	if loop_count > 50 then do;			/* Loop in primitives */
	     call com_err_ (0, "", gtss_pnterr.err8);
	     go to break;
	end;
	if (prim_op<lbound (case, 1)) | (prim_op>hbound (case, 1)) then do;
	     call com_err_ (0, "gtss_interp_prim_",
		"Primitive index ^i (<^i or >^i).",
		prim_op,
		lbound (case, 1),
		hbound (case, 1));
	     signal cond (gtss_fail);
	end;
	go to case (prim_op);

case (5):	;
case (6):	;
	call com_err_ (
	     0
	     , "gtss_interp_prim_"
	     , "^/Bad Primitive ^i at ^i."
	     , prim_op
	     , next_prim
	     );
	call com_err_ (0, "", gtss_pnterr.err1);
	signal condition (gtss_fail);
case (1):	;					/* CALLP */
	call callp_primitive;
	go to interp_loop;
case (2):	;					/* EXEC */
	call exec_primitive;
	if conclude_gtss then go to gtss_ext_$finished;	/* Return to gtss command to conclude execution */
	go to interp_loop;
case (3):	;					/* BIN */
	call bin_primitive;
	go to interp_loop;
case (4):	;					/* POPUP */
	call popup_primitive;
	if pop_callss_stack then return;		/* Return to gtss_drl_callss_ */
	go to interp_loop;
case (7):	;					/* SYSTM */
	call systm_primitive;
	go to current_level (1);			/* Unwind to primitive interpreter at
						   outermost level */
case (8):	;					/* IFALSE */
	call ifalse_primitive;
	go to interp_loop;
case (9):	;					/* IFTRUE */
	call iftrue_primitive;
	go to interp_loop;
case (10): ;					/* STFALS */
	call stfals_primitive;
	go to interp_loop;
case (11): ;					/* STRUE */
	call strue_primitive;
	go to interp_loop;

break:	;
	gtss_ext_$restart_from_pi = gtss_ext_$bad_drl_rtrn;
	gtss_ext_$popup_from_pi = gtss_ext_$bad_drl_rtrn;
	gtss_ext_$dispose_of_drl = gtss_ext_$bad_drl_rtrn;
	call popup_primitive;
	if pop_callss_stack then return;		/* Return to gtss_drl_callss_ */
	go to interp2;

ret:	;
	return;					/* return to gtss_drl_callss_ */
%page;
callss:	entry (subsystem_name, mcpp);

/* This entry point is called by the DRL CALLSS (gtss_drl_callss_)
   to invoke the primitive interpreter recursively for a specified
   subsystem.
*/
dcl  mcpp                     ptr parm	/* pointer to machine conditions for DRL CALLSS */;
dcl  subsystem_name           char(4) parm	/* Subsystem to be called */;
	on quit call gtss_fix_tty_modes_ ();
	comm = translate (subsystem_name, lower, upper);	/* use local static variable */
	mcp = mcpp;

/* If this was called from within a ..init file we
   have to turn off the logon bit or the ..init file will
   be called recursively.
*/
	gtss_ust.lflg2.b6 = "1"b;

/* Check for stack overflow */
	if gtss_ext_$stack_level_ > hbound (gtss_ext_$gtss_slave_area_seg, 1) then do;
	     call gtss_abort_subsystem_ (mcp, "gtss_interp_prim_", 6, err6); /* level of control too deep */
	     return;
	end;

/* Push slave_area_seg on stack */
	my_level, gtss_ext_$stack_level_ = gtss_ext_$stack_level_ + 1;
	current_level (my_level) = interp;

/* Add entry to CALLSS stack */
	gtss_ust.lcals.b0_17 = gtss_ust.lcals.b0_17 + 2;

/* Save current program stack index on CALLSS stack.
   This will later be used to decide whether to pop the CALLSS stack
   during interpretation of the POPUP primitive.
*/
	i = divide (gtss_ust.lcals.b0_17-initial_lcals, 2, 17, 0);
	subsystems (i).tally_address = gtss_ust.lxxx.b0_17;

/* Save content of .LSWAP (program size) on CALLSS stack.
   This is necessary so that program size can be determined when
   returning from DRL CALLSS.
*/
	gtss_ust.subsystems (i).content_lswap = gtss_ust.lswap;

/* Clear IC and abort code in SPA */
	gseg = gtss_ext_$gtss_slave_area_seg (my_level);
	unspec (gtss_spa.labrt) = "0"b;

/* If subsystem was doing its own break processing
   or executing user code save appropriate indicators
   in the CALLSS stack.
*/
	gtss_ust.ss_flags (i) = "0"b;
	substr (gtss_ust.ss_flags (i), 18, 1) = gtss_ust.lswth.b7; /* Break processing */
	substr (gtss_ust.ss_flags (i), 17, 1) = gtss_ust.lflg2.b14; /* User code executing */
	go to interp;
%page;
t_goto:	entry (subsystem_name);

/* This entry point is called by DRL T.GOTO (gtss_drl_t_goto_) or
   by DRL CALLSS (gtss_drl_callss_) when a nonrecursive invocation
   of the primitive interpreter is needed. */

/* If this was called from within a ..init file we
   have toturn off the logon bit or the ..init file will
   be called recursively. */
	gtss_ust.lflg2.b6 = "1"b;

	on quit call gtss_fix_tty_modes_ ();
	comm = translate (subsystem_name, lower, upper);	/* use local static variable */
	call gtss_run_subsystem_$finish;		/* Wrap up current subsystem */
	go to current_level (gtss_ext_$stack_level_);	/* Unwind one invocation of
						   gtss_interp_prim_ */
%page;
sysret:	entry;

/* This entry point is called by DRL SYSRET to return to system level. */


	on quit call gtss_fix_tty_modes_ ();

/* Turn off compiler identifier bits. */
	string (gtss_ust.lswth) = string (gtss_ust.lswth) & lswth_reset;

/* Reset "user prog in control" indicator. */
	gtss_ust.lflg2.b14 = "0"b;

/* Return to system level */
	call system;
	go to current_level (1);			/* Unwind to first invocation of
						   gtss_interp_prim_ */
%page;
bin_primitive: proc;

/* SET SY** block count to -1 */
	     gtss_ust.lsybc.b0_17 = -1;
	     gtss_ust.lsybc.b18_35 = -1;

/* Reset switch that says we have data on the
   collector file */
	     gtss_ust.lswth.b17 = "0"b;

/* Reset loop counter for primitives. */
	     loop_count = 0;

	     call gtss_build_;
	     call scan1;
	     return;

	end bin_primitive;
%page;
callp_primitive: proc;

/* If the switchword_flag bit is set then the
   new_subsystem will be called only if the specified bit of
   the combined switch  words .LSWTH and .LSWT2 is on
*/

	     if switchword_flag then do;
		i = fixed (switch_ov_bit);
		if i > 35 then do;
		     if ^(addr (gtss_ust.lswt2) -> switch_word (i-36)) then goto next;
		end;
		else
		if ^switch_word (i) then goto next;
	     end;

/* Check for program stack about to overflow */
	     i = gtss_ust.lxxx.b0_17-initial_lxxx;
	     if i >= hbound (gtss_ust.lprgs, 1) then do;
		if gtss_ext_$stack_level_ <= 1 then do;
		     call ioa_ ("^/"||err6);		/* level of control too deep */
		     call system;			/* Reestablish system level. */
		     go to interp;
		end;
		else do;
		     i = divide (gtss_ust.lcals.b0_17-initial_lcals, 2, 17, 0);
		     gtss_ust.lxxx.b0_17 = subsystems (i).tally_address+1;
		     call popup_primitive;
		     call gtss_abort_subsystem_ (mcp, "gtss_interp_prim_", 6, err6); /* level of control too deep */
		     go to ret;
		end;
	     end;
	     gtss_ust.lxxx.b0_17 = gtss_ust.lxxx.b0_17 + 1;
	     i = i+1;

/* Store index of program descriptor
   in program stack. */
	     gtss_ust.lprgs (i).b0_17 = callp_desc;

/* Reset "Pass break" bit in case CALLP is
   result of CALLSS. */
	     gtss_ust.lswth.b7 = "0"b;

/* Don't pass stuff related to wrapup along. */
/* See SCAN3 in TSSH */
	     substr (string (gtss_ust.lflg3), 34, 3) = "0"b3 ;
	     gtss_ust.lopts = "0"b;
	     unspec (gtss_ust.licec) = "0"b;

/* Keep number of calls in 5th cell of program descriptor. */
	     calls (callp_desc) = calls (callp_desc) + 1;

/* Locate command language for this subsystem */
	     cmd_list_len = gtss_prgdes_ext_$prgdes (callp_desc).cmd_lang_len;
	     cmd_list_ptr = addr (gtss_prgdes_ext_$primitives
		(gtss_prgdes_ext_$prgdes (callp_desc).cmd_lang_offset));
	     cmd_prim_list_ptr = addrel (cmd_list_ptr, 2*cmd_list_len);

/* Locate start_up primitive sequence for this subsystem. */
	     next_prim = primitive_ptr (cmd_list_len+1);

/* get new primitive */
	     primitive = gtss_prgdes_ext_$primitives (next_prim);
	     return;

next:	     ;
	     i = gtss_ust.lxxx.b0_17-initial_lxxx;
	     next_prim = gtss_ust.lprgs (i).b18_35+1;
	     primitive = gtss_prgdes_ext_$primitives (next_prim);
	     return;

dcl  i                        fixed bin(17);
	end callp_primitive;
%page;
exec_primitive: proc;

/* Get index of current program descriptor */
	     i = gtss_ust.lprgs (gtss_ust.lxxx.b0_17-initial_lxxx).b0_17;

/* Keep number of loads in program descriptor */
	     loads (i) = loads (i) + 1;

	     load_sz = gtss_prgdes_ext_$prgdes (i).load_size;
	     if load_sz <= 0 then do;			/* Unknown system */
		call com_err_ (0, "", gtss_pnterr.err9);
		call system;
		go to current_level (1);
	     end;
	     load_address = gtss_prgdes_ext_$prgdes (i).initial_load_address;

/* Make sure load address is not in prefix. */
	     if load_address < 100 then do;		/* Unknown system */
		call com_err_ (0, "", gtss_pnterr.err9);
		call system;
		go to current_level (1);
	     end;

/*	Examine for  ".TSLOG" being executed => Conclude gtss execution.	*/
	     if gtss_prgdes_ext_$prgdes.bci_catalog_name (i) = period_TSLOG then conclude_gtss = "1"b;

/* Execute subsystem */
	     gtss_ext_$popup_from_pi = break;
	     on quit begin;
		on quit call gtss_fix_tty_modes_ ();
		gtss_ext_$restart_from_pi = restart;
		gtss_ext_$last_k_was_out = "0"b;
		gtss_ust.lbuf.tally = "0"b;
		call gtss_fix_tty_modes_ ();
/* if in command file processing and break label specified set it's sector no */
		if gtss_ust.lflg2.b8 then call gtss_CFP_break_;
		if gse_ext_$modes.mquit then do;
		     call ioa_ ("QUIT");
		     call cu_$cl ();
		end;
		else signal program_interrupt;
restart:		;
		gtss_ext_$restart_from_pi = gtss_ext_$bad_drl_rtrn;
	     end;

	     on program_interrupt begin;

/* Determine if the subsystem has provided a transfer vector for
   line breaks. */
		if ^gtss_break_vector_$status () then do;
		     if (^gtss_ext_$flags.drl_in_progress) |
		     gtss_ext_$flags.dispose_of_drl_on_pi then goto gtss_ext_$popup_from_pi;
		     gtss_ext_$flags.popup_from_pi = "1"b;
		     go to gtss_ext_$restart_from_pi;
		end;

		if ^gtss_break_vector_$drl_in_progress () then do;
		     call gtss_break_vector_ ();
		     goto gtss_ext_$restart_from_pi;
		end;

		if gtss_ext_$flags.dispose_of_drl_on_pi then do;
		     gtss_ext_$flags.unfinished_drl = "1"b;
		     go to gtss_ext_$dispose_of_drl;
		end;

		gtss_ext_$flags.unfinished_drl = "1"b;
		go to gtss_ext_$restart_from_pi;

	     end;					/* end of on program_interrupt condition block */

	     call gtss_run_subsystem_ ((i));
	     revert program_interrupt;
	     revert quit;
	     gtss_ext_$popup_from_pi = gtss_ext_$bad_drl_rtrn;

/* If CALLSS stack is empty then
   initialize user time limit. */
	     if gtss_ust.lcals.b0_17-initial_lcals <= 0 then do;
		if gtss_ext_$flags.ss_time_limit_set then do;
		     gtss_ust_ext_$ust.gtss_ust.limit = 0;
		     gtss_ext_$flags.timer_ranout = "0"b;
		     gtss_ext_$flags.ss_time_limit_set = "0"b;
		     call timer_manager_$reset_cpu_call (gtss_fault_processor_$timer_runout); /* turn off timeout  */
		end;
		if gtss_ext_$process_type = 2
		then do;
		     if ((gtss_ust.lcjid = "0"b)
		     & (gtss_ext_$drun_jid ^= " ")
		     & (^gtss_ust.lflg2.b8))
		     then do;
			gtss_ust.lcfst.start_term = 17;
			call gtss_ascii_bcd_ (addr (gtss_ext_$drun_jid), 5, addr (gtss_ust.lcjid));
		     end;
		end;
	     end;

/* Reset "user program in control" indicator */
	     gtss_ust.lflg2.b14 = "0"b;

	     i = gtss_ust.lxxx.b0_17-initial_lxxx;
	     next_prim = gtss_ust.lprgs (i).b18_35+1;
	     primitive = gtss_prgdes_ext_$primitives (next_prim);
	     return;

dcl  i                        fixed bin(17);
dcl  load_address             fixed bin(17);
dcl  load_sz                  fixed bin(17);
	end exec_primitive;
%page;
ifalse_primitive: proc;
	     if switchword_bit < 36
	        then do;
		 if ^switch_word (switchword_bit)
		    then next_prim = prim_address;
	              else next_prim = next_prim + 1;
	              end;
	        else do; /* switchword_bit >= 36 */
		 if ^(addr(gtss_ust.lswt2) -> switch_word(switchword_bit-36))
		    then next_prim = prim_address;
	              else next_prim = next_prim + 1;
		    end;
	     primitive = gtss_prgdes_ext_$primitives (next_prim);
	     return;
	end ifalse_primitive;
%page;
iftrue_primitive: proc;
	     if switchword_bit < 36
	        then do;
		 if switch_word (switchword_bit)
		    then next_prim = prim_address;
	              else next_prim = next_prim + 1;
	              end;
	        else do; /* switchword_bit >= 36 */
		 if addr(gtss_ust.lswt2) -> switch_word(switchword_bit-36)
		    then next_prim = prim_address;
	              else next_prim = next_prim + 1;
	              end;
	     primitive = gtss_prgdes_ext_$primitives (next_prim);
	     return;
	end iftrue_primitive;
%page;
popup_primitive: proc;

/* Pop item off program stack and test for stack empty. */
	     gtss_ust.lxxx.b0_17 = gtss_ust.lxxx.b0_17 - 1;
	     if gtss_ust.lxxx.b0_17-initial_lxxx <= 0 then do;
		if gtss_ust.lflg2.b6 = "0"b then do;	/* just logging in--make sure not to clobber init processing */
		     if comm = "cmdl" then do;	/* No ..init file -- just turn off bit */
			gtss_ust.lflg2.b6 = "1"b;
			call system;
		     end;
		     else do;			/* Special handling for ..init file */
			save_comm = comm;
			call system;
			comm = save_comm;
			gtss_ust.lbuf.tally = "0"b;	/* Fool crun into checking for input */
			gtss_ust.lflg2.b6 = "1"b;	/* turn off LOGON bit */
		     end;
		end;
		else call system;
		call startp;
		return;
	     end;

/* If the CALLSS stack is empty simply advance
   to the next primitive at new level. */
	     i = divide (gtss_ust.lcals.b0_17-initial_lcals, 2, 17, 0);
	     if i <= 0 then go to next;

/* Determine if current entry in CALLSS stack
   corresponds to current entry in program stack.
   If so, there is a swapped subsystem to restart.
   Otherwise simply advance to the next primitive
   at new level. */
	     if gtss_ust.lxxx.b0_17 = gtss_ust.subsystems (i).tally_address then do;

/* Restart previous SS */

/* Pop slave_area_seg off stack */
		gtss_ext_$stack_level_ = gtss_ext_$stack_level_ - 1;
		gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);

		if gtss_ust.licec.b18_35 ^= 0 then do;

/* Move .LICEC into prefix. */
		     gtss_spa.labrt = gtss_ust.licec;
		end;

/* Restore program size from CALLSS stack */

		gtss_ust.lswap = subsystems (i).content_lswap;
		gtss_ust.lsize.limit = gtss_ust.lswap.size;
		gtss_ust.lsize.bar = divide (fixed (gtss_ust.lsize.limit, 18), 512, 17, 0);
		call gtss_set_slave_$load_bar (fixed (gtss_ust.lsize.bar, 18, 0)); /* Reset BAR register. */

/* Was subsystem doing its own break processing? */
		if substr (gtss_ust.ss_flags (i), 18, 1) then

/* If so turn on .LSWTH BIT 7 (GCOS numbering) */
		     gtss_ust.lswth.b7 = "1"b;

/* Does pushed SS belong to user? */
		if substr (gtss_ust.ss_flags (i), 17, 1) then

/* If so, mark user code executing. */
		     gtss_ust.lflg2.b14 = "1"b;

/* Pop item off CALLSS stack */
		gtss_ust.lcals.b0_17 = gtss_ust.lcals.b0_17-2;
		pop_callss_stack = "1"b;		/* Set flag to return to caller */
		return;
	     end;

next:	     ;
	     i = gtss_ust.lxxx.b0_17-initial_lxxx;
	     next_prim = gtss_ust.lprgs (i).b18_35 + 1;
	     primitive = gtss_prgdes_ext_$primitives (next_prim);

/* Locate command language for this subsystem */
	     i = gtss_ust.lprgs (i).b0_17;
	     cmd_list_len = gtss_prgdes_ext_$prgdes (i).cmd_lang_len;
	     cmd_list_ptr = addr (gtss_prgdes_ext_$primitives
		(gtss_prgdes_ext_$prgdes (i).cmd_lang_offset));
	     cmd_prim_list_ptr = addrel (cmd_list_ptr, 2*cmd_list_len);

	     return;

dcl  i                        fixed bin(17);
dcl  save_comm                char(4);
	end popup_primitive;
%page;
scan1:	proc;

/* This procedure is patterned after SCAN1 of TSSH.
   It searches for the first four characters of the current input
   line first in the common command list and then in the private list
   of the current subsystem.  If the command is
   found, next_prim and primitive are updated to the first primitive
   in the sequence for the command.   If the command is not found
   the first primitive in the sequence for the command loader is selected.
*/

/* Pickup first 4 characters of command line. */
	     command = first4;

/* Translate to lower case */
	     comm = translate (command, "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");

/* Determine number of commands to use from the
   common list. */
	     i = gtss_ust.lprgs (gtss_ust.lxxx.b0_17-initial_lxxx).b0_17;
	     common_cmds = 0;
	     if substr (parameters (i), 13, 1) then	/* BASIC command list flag */
		common_cmds = gtss_prgdes_ext_$basic_cmd_num;
	     else
	     if substr (parameters (i), 14, 1) then	/* Common command list flag */
		common_cmds = gtss_prgdes_ext_$common_cmd_num;

/* Search for command in common list */
	     do i = 1 to common_cmds;
		l = cl_len (i);
		if substr (comm, 1, l) = substr (cl_word (i), 1, l) then do;
		     next_prim = com_prim_ptr (i);
		     primitive = gtss_prgdes_ext_$primitives (next_prim);
		     return;
		end;
	     end;
/* Search for command in private list of this subsystem. */

	     do i = 1 to cmd_list_len;
		l = cmd_len (i);
		if substr (comm, 1, l) = substr (cmd_word (i), 1, l) then do;
		     next_prim = primitive_ptr (i);
		     primitive = gtss_prgdes_ext_$primitives (next_prim);
		     return;
		end;
	     end;

/* The command was not found, so call the command loader. */
	     next_prim = gtss_prgdes_ext_$cmlcl;
	     primitive = gtss_prgdes_ext_$primitives (next_prim);
	     return;

dcl  common_cmds              fixed bin(17);
dcl  i                        fixed bin(17);
dcl  l                        fixed bin(17);
	end scan1;
%page;
startp:	proc;

/* This routine selects the subsystem specified
   by the variable comm.
   This routine is patterned after STARTP in TSSI.
*/
	     name = "";
	     do i = 1 to 4;
		c = substr (comm, i, 1);		/* Pick up character */
		if c = "," then go to enough;
		if c < """" then goto enough;
		substr (name, i, 1) = c;
		if c = """" | c = "-" then go to enough;
	     end;

enough:	     ;

/* Look up system name in program descriptors. */
	     do i = 1 to hbound (gtss_prgdes_ext_$prgdes, 1);
		if gtss_prgdes_ext_$prgdes (i).ss_name = name then go to found;
	     end;
	     i = i -1;

found:	     ;					/* Check for system level. */
	     if gtss_ust.lxxx.b0_17-initial_lxxx = 0 then do;

/* Make sure this subsystem can be called at
   system level. If not call the command loader instead. */
		if substr (gtss_prgdes_ext_$prgdes (i).parameters, 9, 1) then i = hbound (gtss_prgdes_ext_$prgdes, 1);
	     end;

/* Make CALLP primitive. */
	     primitive = "0"b;
	     callp_desc = i;			/* index of program descriptor */
	     prim_op = 1;				/* Code for CALLP */
	     call callp_primitive;
	     return;

dcl  c                        char(1);
dcl  i                        fixed bin(17);
dcl  name                     char(4);
	end startp;
%page;
stfals_primitive: proc;
	     if db_interp_prim then
		call com_err_ (
		0
		, "gtss_interp_prim_"
		, "switch word bit off ^i."
		, switchword_bit
		);
	     if switchword_bit < 36
	        then
		switch_word (switchword_bit) = "0"b;
	        else /* switchword_bit >= 36 */
		addr(gtss_ust.lswt2) -> switch_word(switchword_bit-36) ="0"b;
	     next_prim = prim_address;
	     primitive = gtss_prgdes_ext_$primitives (next_prim);
	     return;
	end stfals_primitive;
%page;
strue_primitive: proc;
	     if db_interp_prim then
		call com_err_ (
		0
		, "gtss_interp_prim_"
		, "switch word bit on  ^i."
		, switchword_bit
		);
	     if switchword_bit < 36
	        then
		switch_word (switchword_bit) = "1"b;
	        else /* switchword_bit >= 36 */
		addr(gtss_ust.lswt2) -> switch_word(switchword_bit-36) ="1"b;
	     next_prim = prim_address;
	     primitive = gtss_prgdes_ext_$primitives (next_prim);
	     return;
	end strue_primitive;
%page;
system:	proc;					/* System level */

/* This routine brings the user back to system level and selects the default
   subsystem "NONE". It is patterned after SYS in TSSI.
*/

/* Turn off compiler identifier bits. */
/* See SYS in TSSI. */
	     string (gtss_ust.lswth) = string (gtss_ust.lswth) & lswth_reset;

/* Reset flag indicating that user code is executing. */
	     gtss_ust.lflg2.b14 = "0"b;

/* Indicate that program stack is empty. */
	     gtss_ust.lxxx.b0_17 = initial_lxxx;

/* Indicate that CALLSS stack is empty. */
	     gtss_ust.lcals.b0_17 = initial_lcals;
	     gtss_ext_$stack_level_ = 1;

/* Select Default system "NONE" */
	     comm = "none";
	end system;
%page;
systm_primitive: proc;
/* Turn off compiler identifier bits. */
	     string (gtss_ust.lswth) = string (gtss_ust.lswth) & lswth_reset;

/* Reset "user prog in control" indicator. */
	     gtss_ust.lflg2.b14 = "0"b;

/* If there is no input then re-init system level. */
	     if substr (comm, 1, 1) = carriage_return then go to sysx;

/* Test for "SYST(EM)" present.
   If not, must be system name. */
	     if comm ^= "syst" then do;
		j = 0;
		go to name_found;
	     end;

/* Find length of command line. */
	     l = search (tty_line, carriage_return);
	     if l <= 0 then go to sysx;

/* Find end of "SYST..." */
	     do i = 5 to l-1;
		if characters_transmitted (i) <= " " then go to end_found;
	     end;

/* If we fall through we are at end of line so
   re-init system level */
	     go to sysx;

end_found:     ;

/* Find beginning of system name. */
	     do j = i+1 to l-1;
		if characters_transmitted (j)>" " then go to name_found;
	     end;

/* If we fall through re-init system level. */

sysx:	     ;
	     call system;
	     return;

name_found:    ;

	     if j > 1 then do;
		count_of_characters_transmitted = count_of_characters_transmitted-j+1;
		tty_line = substr (tty_line, j);
		command = first4;
		comm = translate (command, "abcdefghijklmnopqrstuvwxyz",
		     "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
	     end;

/* Indicate that program stack is empty. */
	     gtss_ust.lxxx.b0_17 = initial_lxxx;

/* Indicate that CALLSS stack is empty. */
	     gtss_ust.lcals.b0_17 = initial_lcals;
	     gtss_ext_$stack_level_ = 1;

dcl  i                        fixed bin(17);
dcl  j                        fixed bin(17);
dcl  l                        fixed bin(17);
	end systm_primitive;
%page;
/*   Variables for gtss_interp_prim_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  cl_ptr                   ptr static;
dcl  comm                     char(4) static;
dcl  command                  char(4);
dcl  conclude_gtss            bit(1) static int;
dcl  cp_ptr                   ptr static;
dcl  current_level            (4) label static;
dcl  cu_$cl                   entry ();
dcl  first4                   char(4)aligned based (tty_line_ptr)	/* Left 4 chars of line. */;
dcl  first6                   char(6)aligned based (tty_line_ptr)	/* Left 6 chars of line. */;
dcl  gseg                     ptr init(null());
dcl  gtss_dump_program_stack_ entry;
dcl  gtss_fail                condition;
dcl  gtss_fix_tty_modes_      entry ext;
dcl  gtss_prgdes_ext_$cmlcl   fixed bin(17)ext /* gtss_prgdes_ext_$primitives offset of 1st primitive for command loader. */;
dcl  hbound                   builtin;
dcl  i                        fixed bin(17);
dcl  initial_lcals            fixed bin(17) static;
dcl  initial_lxxx             fixed bin(17) static;
dcl  ioa_                     entry options (variable);
dcl  lbound                   builtin;
dcl  loop_count               fixed bin(17);
dcl  lower                    char(26)static int options(constant)init("abcdefghijklmnopqrstuvwxyz");
dcl  lswth_reset              bit(18)static int options(constant) init("041363"b3           );
dcl  my_level                 fixed bin(24) automatic;
dcl  next_prim                fixed bin(17);
dcl  pop_callss_stack         bit(1);
dcl  program_interrupt        condition;
dcl  quit                     condition;
dcl  search                   builtin;
dcl  switch_word              (0:35)bit(1)unal based(addr(gtss_ust.lswth));
dcl  timer_manager_$reset_cpu_call entry (entry);
dcl  translate                builtin;
dcl  tty_line                 char(244)aligned based (tty_line_ptr);
dcl  tty_line_ptr             ptr init (null ()) static;
dcl  upper                    char(26)static int options(constant)init("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

dcl 1 common_list (gtss_prgdes_ext_$common_cmd_num) aligned based (cl_ptr),
    2 cl_word char(4),
    2 cl_len fixed bin(17);

dcl 1 com_prim_list (gtss_prgdes_ext_$common_cmd_num) aligned based (cp_ptr),
    2 com_prim_ptr fixed bin(17) unal,
    2 filler bit(18) unal;

dcl  carriage_return          char(1) static int options (constant) init ("");

dcl  period_TSLOG             bit(36)static int options (constant) init ("336362434627"b3);						/* =. bcd for ".TSLOG". */
%page;
%include gtss_prgdes_;
%page;
%include gtss_primitives_;
%page;
%include gtss_ust_ext_;
%page;
%include gtss_ext_;
%page;
%include gtss_spa;
%page;
%include gtss_pnterr;
%page;
%include gtss_entry_dcls;
%page;
%include mc;
%page;
%include gse_ext_;
%page;
%include gtss_db_names;
%page;
%include gtss_starCF_;
     end gtss_interp_prim_;
