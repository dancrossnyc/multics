/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_filact_funct03_: proc (mcp_val, high_val, gseg_val, arg_ptr_val, buffer_ptr_val, code);

/**	Derail FILACT function 03 (CF - Create File).

	All parameters are input parameters except code.

	code returned 0 => Successful.
	code returned 4 => GCOS err4 (see gtss_pnterr structure).
	code returned other => multics error code.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 $db debug switch.
   Change:  Dave Ward	06/21/79 faulty error &
				distinguish 4026 return.
   Change:  Paul Benjamin     12/17/79 Change acls to upper case &
				permission mapping to closer resemble GCOS.
Change: Dave Ward	08/18/81 minor cleanup.
**/
dcl  arg_ptr_val              ptr parm;
dcl  buffer_ptr_val           ptr parm;
dcl  code                     fixed bin(35)parm;
dcl  gseg_val                 ptr parm;
dcl  high_val                 bit(18)parm;
dcl  mcp_val                  ptr parm;
	mcp = mcp_val;
	high_b = high_val;
	high_i = fixed (high_b, 18);
	gseg = gseg_val;
	arg_ptr = arg_ptr_val;
	buffer_ptr = buffer_ptr_val;

	code = 0;					/* Successful. */

/**	Obtain create file arglist. */
	if					/* (CF_args.L_arglist < low_b) | */
	((fixed (CF_args.L_arglist, 18) +3) > high_i) then do;
return_err4:   ;
	     code = 4;
	     return;
	end;
	arglist_ptr = addrel (gseg, CF_args.L_arglist);

/**	Obtain return status.	**/
	call validate_status (CF_arglist.L_status_return, status_ptr);

	file_name_in_ascii = (CF_args.file_name_in_bcd ^= -1);
	if get_ascii_file_name (
	file_name_in_ascii
	, CF_arglist.L_cat_filedescr
	, addr (ascii_cat_file)
	, gsc
	) then do;
	     call could_not_create_file ("0"b, gsc);	/* Could not access file. */
	     return;
	end;

/**	Obtain permissions.	**/
	if					/* (CF_arglist.L_permissions < low_b) | */
	(CF_arglist.L_permissions > high_b) then goto return_err4;
	permissions_ptr = addrel (gseg, CF_arglist.L_permissions);
	if substr (unspec (permissionsx), 1, 10) = "0000000010"b | unspec (permissionsx) = "0"b then
	     multics_access_mode = "0"b;
	else multics_access_mode = "1"b||permissionsx.e||permissionsx.w;

	call get_options ("1"b, CF_arglist.L_options, now);

	call gtss_expand_pathname_ (
	     addr (ascii_cat_file)
	     , gtss_file_values.dname
	     , gtss_file_values.new_ename
	     , code
	     );
	if code ^= 0 then do;
	     call could_not_create_file ("0"b, "400500"b3); /* Could not access file. */
	     return;
	end;

	if optionsx.option_bit.k then block_factor = 1;	/* => sizes in llinks (320 words @). */
	else block_factor = 12;			/* => sizes in links (3840=12*320 words @). */

/* create the file */
	call msf_manager_$open (			/* Create caller's data segment. */
	     gtss_file_values.dname
	     , gtss_file_values.new_ename
	     , fcb_ptr
	     , code);
	if code ^= error_table_$noentry & code ^= 0 then do;
	     if db_filact_funct03 then
		call com_err_ (
		code
		, "gtss_filact_funct03_"
		, """^a>^a"" is a Multics file, not a GCOS file."
		, gtss_file_values.dname
		, gtss_file_values.ename
		);
	     call could_not_create_file ("0"b, "402500"b3); /* Could not access file. */
	     return;
	end;

	call msf_manager_$get_ptr (
	     fcb_ptr
	     , 0
	     , "1"b
	     , sptr
	     , sbc
	     , code
	     );
	if code ^= 0 then do;
	     call could_not_create_file ("0"b, "402500"b3);
	     return;
	end;
	segment_acl_space.access_name (1) =
	     "*."
	     ||translate (gtss_ext_$user_id, "QWERTYUIOPASDFGHJKLZXCVBNM", "qwertyuiopasdfghjklzxcvbnm")
	     ||".*";
	segment_acl_space.modes (1) = "111"b;
	k = 1;
	if multics_access_mode ^= "0"b then do;
	     segment_acl_space.access_name (2) = "*.*.*";
	     segment_acl_space.modes (2) = multics_access_mode;
	     k = 2;
	end;

	if now > 0 then call get_multics_seg_acl (
	     now
	     , addr (optionsx.optional_specific_permissions)
	     , addr (segment_acl_space)
	     );
	call msf_manager_$acl_add (
	     fcb_ptr
	     , addr (segment_acl_space)
	     , k
	     , code);
	if code ^= 0 then do;
	     call could_not_create_file ("1"b, "400500"b3); /* Could not access file. */
	     return;
	end;

	call msf_manager_$close (fcb_ptr);

	gtss_file_values.set_switch = "0"b;
	gtss_file_values.set_switch.mode_random
	     , gtss_file_values.set_switch.maxll
	     , gtss_file_values.set_switch.curll
	     , gtss_file_values.set_switch.busy
	     , gtss_file_values.set_switch.attr
	     , gtss_file_values.set_switch.null_file
	     , gtss_file_values.set_switch.number_allocations
	     , gtss_file_values.set_switch.creation_date
	     = "1"b;

	gtss_file_values.version = 1;
	gtss_file_values.change_name = "0"b;
	gtss_file_values.ename = " ";			/* => Initial setting. */

	gtss_file_values.data_flags.mode_random = optionsx.option_bit.b; /* "1"=>random | "0"=>linked. */
	gtss_file_values.data_fields.maxll = fixed (optionsx.max_file_size, 18)*block_factor;
	gtss_file_values.data_fields.curll = fixed (optionsx.initial_file_size, 18)*block_factor;
	gtss_file_values.data_flags.busy = "0"b ;	/* set file not data_flags.busy? */
	if optionsx.option_bit.i then
	     gtss_file_values.attributes.attr = optionsx.user_specified_attributes;
	else
	gtss_file_values.attributes.attr = "0"b;
	gtss_file_values.data_flags.null_file = "1"b;
	gtss_file_values.data_fields.number_allocations = 0;
	string (date_val) = date ();
	gtss_file_values.creation_date = mm||dd||yy;

	call gtss_attributes_mgr_$set (addr (gtss_file_values), code);
	if code ^= 0 then do;
	     call could_not_create_file ("1"b, "400500"b3); /* Could not access file. */
	     return;
	end;

/**	Following check not in use by GCOS.
	if optionsx.option_bit.c = "0"b then
	     status_word.status = "402600"b3;
	else
**/
	if optionsx.option_bit.d then
	     status_word.status = "403100"b3;
	else
	status_word.status = "400000"b3;
	return;

/**	(CF) Create File Declarations.	**/

dcl 1 CF_args		aligned based(arg_ptr)
,     3 word1
,       4 file_name_in_bcd	fixed bin(17)unal	/* -1 => file name in BCD.*/
,       4 L_arglist		bit(18)unal
,     3 word2
,       4 CF_function_no	fixed bin(17)unal
,       4 L_buffer		bit(18)unal
;

dcl 1 CF_arglist		aligned based(arglist_ptr)
,     3 word1
,       4 L_status_return	bit(18)unal
,       4 zero		bit(18)unal
,     3 word2
,       4 L_cat_filedescr	bit(18)unal
,       4 L_permissions	bit(18)unal
,     3 word3
,       4 L_options		bit(18)unal
,       4 zero2		bit(18)unal
;

%include gtss_filact_intp1;

%include gtss_filact_intp2;

%include gtss_filact_intp3;

%include gtss_filact_intp5;

could_not_create_file: proc (df, rsc);

/* Could not create gcos file. */
dcl  df                       bit(1)parm;
dcl  rsc                      bit(18)parm;
	     if df then
		call hcs_$delentry_file (
		gtss_file_values.dname
		, gtss_file_values.new_ename
		, (code)				/* Don't set. */
		);
	     status_word.pd = get_faulty_cat_file_entry ();
	     status_word.status = rsc;
	     return;
	end					/* could_not_create_file */;

get_options: proc (cfua, L_options, n);

/**	Isolate the options list.
	Variables "options_ptr" and "now" set.
**/
dcl  cfua                     bit(1)parm	/* "1"b => Check that user attributes word available. */;
dcl  L_options                bit(18)parm;
dcl  n                        fixed bin parm	/* = now global veriable. */;

	     options_ptr = null ();
	     n = 0;
	     mnw = fixed (L_options, 18)+3;		/* min word offset for options structure. */

/**	Obtain options. **/
	     if					/* (L_options < low_b) | */
	     (mnw > high_i) then goto return_err4;
	     options_ptr = addrel (gseg, L_options);

	     do now = 0 by 1;
		if optionsx.end_of_list = -1 then do;
		     if cfua then
			if optionsx.option_bit.i then /* Verify user attributes within memory. */
			     if (mnw+ (now*3)+1)>high_i then goto return_err4;
		     n = now;
		     return;
		end;
		if (mnw+ ((now+1)*3))>high_i then goto return_err4;
	     end;

dcl  mnw                      fixed bin(24);
	end					/* get_options */;


/** Declarations for gtss_drl_filact_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  access_mode              bit (6);
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  aft_code                 fixed bin (35);
dcl  aft_name                 char (8);
dcl  altname                  char (8) aligned based (altname_ptr);
dcl  altname_ptr              ptr init(null());
dcl  append_mode              bit (36) static int options(constant)init ("100000000000"b3);
dcl  arglist_ptr              ptr init(null());
dcl  arg_ptr                  ptr init(null());
dcl  attribute_segment_ptr    ptr init(null());
dcl  bit                      builtin;
dcl  bit72                    bit(72)aligned based;
dcl  bit_count                fixed bin (24);
dcl  block_factor             fixed bin;
dcl  cat_filedescr_name_offset bit(18);
dcl  cdate                    fixed bin (71);
dcl  clim                     float bin;
dcl  crf                      fixed bin(24);
dcl  csp                      float bin;
dcl  date                     builtin;
dcl  delete_$path             entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl  descriptor_address       bit (18);
dcl  descriptor_ptr           ptr init(null());
dcl  dir_name                 char (168);
dcl  divide                   builtin;
dcl  entry_name               char (12) init (" ");
dcl  error_table_$incorrect_access fixed bin (35) ext;
dcl  error_table_$moderr      fixed bin (35) ext;
dcl  error_table_$namedup     fixed bin (35) ext;
dcl  error_table_$noentry     fixed bin (35) ext;
dcl  error_table_$nomatch     fixed bin (35) ext;
dcl  error_table_$not_seg_type fixed bin(35)ext;
dcl  error_table_$no_dir      fixed bin (35) ext;
dcl  error_table_$segknown    fixed bin (35) ext;
dcl  error_table_$seg_not_found fixed bin (35) ext;
dcl  execute_mode             bit (36) static int options(constant)init ("200000000000"b3);
dcl  fcb_ptr                  ptr;
dcl  file_name_in_ascii       bit(1);
dcl  file_no                  fixed bin (24);
dcl  fixed                    builtin;
dcl  FMS_block_ptr            ptr init(null());
dcl  four_NULS                char (4)static int options (constant)init ((4)" ") /* 4 octal 000's */;
dcl  gsc                      bit(18);
dcl  gseg                     ptr init(null());
dcl  gtss_fail                condition;
dcl  hbound                   builtin;
dcl  hcs_$add_acl_entries     entry (char (*), char (*), ptr, fixed bin(24), fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$add_inacl_entries   entry (char (*), char (*), ptr, fixed bin, fixed bin (3), fixed bin (35));
dcl  hcs_$append_branchx      entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
dcl  hcs_$delentry_file       entry(char(*),char(*),fixed bin(35));
dcl  hcs_$initiate            entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg            entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$quota_read          entry (char (*), fixed bin (18), fixed bin (71), bit (36) aligned, bit (36), fixed bin (1), fixed bin (18), fixed bin (35));
dcl  hcs_$status_long         entry (char (*), char (*), fixed bin (1), ptr,ptr, fixed bin (35));
dcl  high_b                   bit(18)aligned;
dcl  high_i                   fixed bin(18)aligned;
dcl  i                        fixed bin(24);
dcl  increment                fixed bin(24);
dcl  ioa_                     entry options (variable);
dcl  k                        fixed bin;
dcl  l                        fixed bin(24);
dcl  lbound                   builtin;
dcl  low_b                    bit(18)aligned static int options(constant)init("000147"b3) /* 103 dec. */;
dcl  low_i                    fixed bin(18)aligned static int options(constant)init(103);
dcl  max_options              fixed bin static int options(constant)init (100);
dcl  max_resources            fixed bin static int options(constant)init (99999);
dcl  minus_one                bit (36) static int options(constant)init ((36)"1"b);
dcl  mlim                     float bin;
dcl  mod                      builtin;
dcl  modify_mode              bit (36) static int options(constant)init ("200000000000"b3);
dcl  msf_manager_$acl_add     entry (ptr, ptr, fixed bin, fixed bin(35));
dcl  msf_manager_$close       entry (ptr);
dcl  msf_manager_$get_ptr     entry (ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35));
dcl  msf_manager_$open        entry (char(*), char(*), ptr, fixed bin(35));
dcl  msp                      float bin;
dcl  multics_access_mode      bit(3);
dcl  nic                      fixed bin(24);
dcl  path_name                char (168) varying;
dcl  person_id                char (22);
dcl  quota                    fixed bin (18);
dcl  read_mode                bit (36) static int options(constant)init ("400000000000"b3);
dcl  rel                      builtin;
dcl  rings                    (3) fixed bin (3) static int options(constant)init (4, 4, 4);
dcl  sbc                      fixed bin(24);
dcl  seg_acl_count            fixed bin;
dcl  shlim                    (0:7) float bin;
dcl  shsp                     (0:7) float bin;
dcl  size                     builtin;
dcl  smc_entry_ptr            ptr init(null());
dcl  sons_lvid                bit (36);
dcl  sptr                     ptr;
dcl  status                   fixed bin (24);
dcl  status_mode              bit (36) static int options(constant)init ("400000000000"b3);
dcl  status_ptr               ptr init(null());
dcl  substr                   builtin;
dcl  switches                 bit (6) static int options(constant)init ("37"b3);
dcl  tacc_sw                  fixed bin (1);
dcl  translate                builtin;
dcl  trp                      fixed bin (71);
dcl  tup                      bit (36) aligned;
dcl  two_words                bit (72) based;
dcl  type                     fixed bin (2);
dcl  used                     fixed bin (18);
dcl  user_attribute_word      bit (35);
dcl  user_info_$limits        entry (float bin, float bin, fixed bin (71), fixed bin(24), (0:7) float bin, float bin, float bin, (0:7) float bin);
dcl  write_mode               bit (36) static int options(constant)init ("100000000000"b3);

dcl 1 date_val,
      2 yy char(2)unal,
      2 mm char(2)unal,
      2 dd char(2)unal;

dcl 1 segment_acl_space (max_options) like segment_acl;

dcl 1 status2		aligned based(status_ptr)
,     3 word1
,       4 status_code	bit(12)unal
,       4 zero1		bit(06)unal
,       4 zero2		bit(18)unal
,     3 word2
,       4 L_bcd_message	bit(18)unal
,       4 message_words	fixed bin(17)unal
;

dcl  1 status_word		aligned based(status_ptr)
,      3 status		bit(18)unal
,      3 pd		bit(18)unal
,      3 null_bit		bit(01)unal
,      3 user_attributes	bit(35)unal
;

%include gtss_ust_ext_;

%include gtss_ext_;

%include gtss_filact_status;

%include gtss_pnterr;

%include mc;

%include gtss_entry_dcls;

%include gtss_ascii_file_names;

%include gtss_file_values;

%include gtss_FMS_catalog;

%include status_info;

%include gtss_filact_options;

%include gse_ext_;

%include gtss_db_names;
     end						/* gtss_filact_funct03_ */;
