/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_set_db_: proc;

/** Regulate and display debugging switches.

    Author: Dave Ward	08/15/79
    Change: Dave Ward	12/04/80 added switch for kin.
*/

	sub_entry = "0"b;
dcl  sub_entry                bit(1);
	goto cont;
arg_ptr:	entry (db, pa);

/* Subroutine entry. */
dcl  db                       (72)bit(1)parm;
dcl  pa                       ptr parm;
	sub_entry = "1"b;

cont:	;

	do i = 1 by 1;
	     if sub_entry then
		call cu_$arg_ptr_rel (i, ap, al, code, pa);
	     else
	     call cu_$arg_ptr (i, ap, al, code);
	     if code ^= 0 then do;			/* Arguments concluded. */
		if i = 1 then
		     call com_err_ (code, "gtss",
		     "^/<arg> ... Where <arg> is -print | name | ^name");
		string (gtss_ext_$db) = string (db_bits);
		if sub_entry then string (db) = string (db_bits);
		return;
	     end;

	     if cmd_arg = "-print" then do;		/* Display settings. */
		do j = 1 to hbound (name, 1);
		     call ioa_ (
			"^3i. ^3a gtss_^a_"
			, j
			, off_on (fixed (db_bits (value (j)), 17))
			, name (j)
			);
		end;
	     end;
	     else do;				/* Switch to set. */
		if substr (cmd_arg, 1, 1) = "^" then do; /* OFF. */
		     dbs = "0"b;
		     fc = 2;
		end;
		else do;				/* ON. */
		     dbs = "1"b;
		     fc = 1;
		end;

		call set_db (dbs, substr (cmd_arg, fc));
	     end;
	end;

set_db:	proc (b, n);

/* Set db bit named by (n) to value (b). */
dcl  b                        bit(1)parm;
dcl  n                        char(*)parm;
	     l = length (n);
	     if substr (n, l, 1) = "_" then l = l-1;	/* Remove right underline. */
	     f = 1;
	     if l>length ("gtss_") then
		if substr (n, 1, length ("gtss_")) = "gtss_" then
		     f = length ("gtss_")+1;
	     fst = 1;
	     lst = hbound (name, 1);
	     do while (fst <= lst);
		mid = divide (fst+lst, 2, 17);
		if substr (n, f, l-f+1) = name (mid) then do; /* Found. */
		     db_bits (value (mid)) = b;
		     return;
		end;
		if substr (n, f, l-f+1)<name (mid) then lst = mid-1;
		else fst = mid+1;
	     end;

	     call com_err_ (0, "gtss",
		"""^a"" unknown debug switch name (-print provides names).",
		n);
	     return;

dcl  f                        fixed bin;
dcl  fst                      fixed bin;
dcl  l                        fixed bin;
dcl  lst                      fixed bin;
dcl  mid                      fixed bin;
	end					/* set_db */;

/* Variables for gtss_set_db_:
   IDENTIFIER		ATTRIBUTES	*/
dcl  al                       fixed bin (24);
dcl  ap                       ptr;
dcl  cmd_arg                  char (al)based (ap)unal;
dcl  code                     fixed bin(35);
dcl  com_err_                 entry options(variable);
dcl  cu_$arg_ptr              entry (fixed bin (24), ptr, fixed bin (24), fixed bin (35));
dcl  cu_$arg_ptr_rel          entry (fixed bin (24), ptr, fixed bin (24), fixed bin (35),ptr);
dcl  dbs                      bit (1);
dcl  db_bits                  (72)bit (1)static int init ((72) (1)"0"b);
dcl  fc                       fixed bin (24);
dcl  hbound                   builtin;
dcl  i                        fixed bin(24);
dcl  ioa_                     entry options(variable);
dcl  j                        fixed bin(24);
dcl  off_on                   (0:1)char (3)static int options (constant) init ("off", "on");

%include gtss_ext_;

%include gtss_db_names;
     end						/* gtss_set_db_ */;
