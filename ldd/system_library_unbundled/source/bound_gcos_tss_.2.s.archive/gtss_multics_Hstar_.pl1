/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_multics_Hstar_: proc (subsystem_name, subsystem_origin, transfer_addr, total_pgm, high_address, error);

/**	gtss save and restore batch gcos simulator H*

	[Derived from gcos_mme_call_.pl1]

	Author:	Bob Grimes		04/15/78
	Changed:	Dave Ward			07/09/78
   Changed:         R. Barstad                    06/04/82
                     to change size of dcl me from 16 to 20 
	Authors:	Robert J. Grimes	Created
		Albert N. Kepner	  1978
		Robert M. May
		David B. Ward
 **/
dcl  subsystem_name           char (6) parm;
dcl  subsystem_origin         bit (18) parm;
dcl  transfer_addr            fixed bin parm;
dcl  total_pgm                fixed bin(18) parm;
dcl  high_address             fixed bin(18) parm;
dcl  error                    bit (1) parm;

/** REMOVE  fibptr = addr (gtss_ext_$fib);*/						/* the first fib is the pointer to the tss library */
/** REMOVE lib_ptr = fib (1).pointer;*/	lib_ptr = null ();

/*  Read catalog record and search for program to be loaded   */
/* **************N   O   T   E*********************************************************
   *
   *	The catalog for the simulator library, tss_system_software_, is not
   *	the same as the catalog for a random system loadable file produced by
   *	SYSEDIT, and commonly used as a dynamic library (** file).
   *	This routine presently handles both types.  Note that it would be
   *	inefficient for the simulator to utilize a sector oriented catalog
   *	for its primary software library.  In fact, after GCOS is booted, it
   *	does not use the catalogs contained in its primary software libraries.
   *	It uses one linear directory that it has built from the disjoint disk
   *	catalogs of its primary libraries.  The catalog formats of the GCOS
   *	and the GCOS simulator primary libraries should be of no concern
   *	to users of either system.
   *
   *	See the GCOS PLM (AN77) for a detailed description of the differences
   *	in format between a random system loadable file (a dynamic library), the
   *	simulator library, and a tape system loadable file (from which the
   *	simulator library is produced).
   *
   **************N   O   T   E******************************************************* */


/*   the catalog block is at the beginning of the segment  */

	cat_ptr = lib_ptr;

	bcd_subsystem_name = "‚‚";			/* initialize subsystem name to all bcd blanks */
	call gtss_ascii_bcd_ (addr (subsystem_name), 6, addr (bcd_subsystem_name));

	if gcatblk.avail_ptr ^= 1 then go to sim_cat;	/* determine catalog type */
	gcatsw = "1"b;				/* GCOS standard catalog type */





sim_cat:	gcatsw = "0"b;

	do i = 1 to catblk.no_ent;			/* loop for no. of entries in cat */
	     if catblk.element (i) = bcd_subsystem_name then do; /* hit ? */
		prefp = addrel (cat_ptr, catblk.address (i));
		go to readp;
	     end;
	end;


not_found:

	message = "";
	longerror = "call name missing";
	goto any_abort;
						/*  Come here when entry found. Seek to and read preface record   */



readp:

/*  compute no of dcws in preface     */


	do ndcw = 1 to 58 while (substr (preface.dcws (ndcw), 22, 3) ^= "000"b);
	end;


	reloc_len = fixed (preface.reloc_words);	/* save no. of relocation words */
	load_origin = fixed (preface.origin);		/* save origin */
	pgm_length = fixed (preface.data_words);	/* save pgm length */

	if gcatsw then do;
	     reloc_len = reloc_len*64;		/* for a GCOS catalog, convert blocks to words */
	     pgm_length = pgm_length*64;
	     seek_save = seek_save + 64;		/* and program starts in next block */
	end;
	else data_ptr = addrel (prefp, 6+ndcw);		/* for simulator catalog , program immediately follows */

	transfer_addr = fixed (preface.entry);		/* save entry point */
	load_increment = 0;				/* init load increment */

	if subsystem_origin ^= (18)"0"b then do;	/* did slave specify an origin ? */
	     if load_origin > 131072 then		/* relocatable overlay ? */
		load_increment = fixed (subsystem_origin);
	     else load_increment = fixed (subsystem_origin)-load_origin; /* set up new load increment */
	     load_origin = fixed (subsystem_origin);	/* use user specified origin */
	     transfer_addr = transfer_addr+load_increment; /* new transfer address */
	end;


l2:
	high_address = load_origin+pgm_length;
	total_pgm = (divide (load_origin+pgm_length-1, 1024, 18)+1)*1024;
	if total_pgm >= 131072 then do;	/* will pgm fit ? */
	     message = "";
	     longerror = "subsystem size > limits";
	     goto any_abort;
	end;

	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);

	if gseg = null then do;
	     message = "";
	     longerror = "slave area segments not created";
	     goto any_abort;
	end;
	call hcs_$truncate_seg (gseg, total_pgm, code);	/* truncate */

/* Set the actual max length limit on the segment */
	call hcs_$set_max_length_seg (gseg, total_pgm, code);
	if code ^= 0 then
	     do;
	     message = "";
	     longerror = "setting max length on slave segment";
	     goto any_abort;
	end;


	dcwp = addr (preface.dcws (1));
	first_loc = fixed (dcw_model.data_addr, 18, 0)-1024+load_increment;


/*  Loop to read data records into tss segment    */


	xfer_total = 0;				/* clear xfer total */
	do i = 1 to ndcw;				/* loop to process dcws */

	     dcwp = addr (preface.dcws (i));		/* get pointer to a dcw */
	     j = fixed (dcw_model.count);		/* grab xfer count */
	     if j = 0 then j = 4096;			/* count of 0 = 4096 */
	     xfer_total = xfer_total + j;		/* total up words to xfer */

	end;

/* copy program into segment */
	prog_ptr = addrel (gseg, first_loc);

	program_seg = data_blocks;

l3:
	preface.data_check = 0;
						/*  Calculate checksum and compare with that in preface block */


	if preface.data_check ^= 0 then do;		/* don't do if checksum = 0 */

	     ptr = addrel (gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_), first_loc); /* get ptr to first loc loaded */
	     accum = 0;				/* clear accumulator */
	     do i = 1 to xfer_total;
		accum = accum + fixed (checker (i));	/* add a word */
		if accum > 68719476735 then do;	/* carry into second word ? */
		     accum = accum - 68719476736 + 1;	/* add carry to low end of no. */
		end;
	     end;

	     if substr (unspec (accum), 37, 36) ^= unspec (preface.data_check) then do; /* error */
		message = "";
		longerror = "checksum error during load";
		goto any_abort;

	     end;

	end;
/*  If this is an absolute program, go turn control back to the user */


	if reloc_len = 0 then go to exit_gecall;

	if load_increment = 0 then go to exit_gecall;	/* no relocation to do */
/*  Come here when relocation finished    */


start_pgm:					/* return load origin and pgm length in A */



	error = "0"b;

io_abort:
any_abort:
	error = "1"b;
	return;
exit_gecall:

	error = "0"b;
	return;					/* go start program */

/**  Variables for gtss_multics_Hstar_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  null                     builtin;
dcl  hcs_$truncate_seg        ext entry (ptr, fixed bin(18), fixed bin (35));
dcl  gseg                     ptr	/* temp ptr to tss seg */;
dcl  abrt                     char (2);
dcl  accum                    fixed bin (71)	/* checksum accumulator */;
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  ascii_gecall_name        char (6)	/* for printing in trace or error messages */;
dcl  bit                      builtin;
dcl  buffer                   bit (36000)	/* preface and relocation blk buffer */;
dcl  callp                    ptr init(null());
dcl  check_fs_errcode_        ext entry (fixed bin, char (8), char (100));
dcl  checker                  (pgm_length) bit (36) aligned based (ptr)	/* overlay for computing chksum */;
dcl  dcwp                     ptr init(null());
dcl  dylibsw                  bit (1) aligned init ("0"b)	/* on if searching dynamic library (**) */;
dcl  fb18                     fixed bin (18)	/* need full 18 bits for address arithmetic */;
dcl  fc                       char (6);
dcl  first_lib                bit (1) aligned init ("1"b)	/* on until initialzation done */;
dcl  first_loc                fixed bin	/* used by checksum rtn */;
dcl  fixed                    builtin;
dcl  gcatsw                   bit (1)	/*  0=simulator catalog, 1=tss format catalog */;
dcl  i                        fixed bin;
dcl  increment                fixed bin	/* number of parameter words to skip */;
dcl  ioa_                     ext entry options (variable);
dcl  ios_$read                ext entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  ios_$seek                ext entry (char (*) aligned, char (*), char (*), fixed bin, bit (72) aligned);
dcl  j                        fixed bin;
dcl  k                        fixed bin;
dcl  load_at                  char (8) aligned	/* holds attach name of file to load from */;
dcl  load_increment           fixed bin;
dcl  load_origin              fixed bin;
dcl  longerror                char (100);
dcl  message                  char (60);
dcl  min                      builtin;
dcl  ndcw                     fixed bin;
dcl  pgm_length               fixed bin;
dcl  sub                      char (4) aligned;
dcl  me char (20) init ("gtss_multics_Hstar_");
dcl  prefp                    ptr init(null());
dcl  ptr                      ptr init(null());
dcl  reloc_bits               (1) unaligned bit (1) based (prefp)	/* overlay for relocation record */;
dcl  reloc_len                fixed bin;
dcl  seclibsw                 bit (1) aligned init ("0"b)	/* on if searching secondary library */;
dcl  seek_save                fixed bin	/* holds seek offset */;
dcl  size                     fixed bin	/* size of pgm overlay arrays */;
dcl  st                       bit (72) aligned 	/* ios status */;
dcl  state                    char (4);
dcl  statp                    ptr init(null());
dcl  substr                   builtin;
dcl  unspec                   builtin;
dcl  word_no                  fixed bin;
dcl  xfer_total               fixed bin	/* used to hold total no. words to xfer */;
dcl  get_group_id$tag_star    ext entry returns (char (32));
dcl  cu_$level_get            ext entry (fixed binary);
dcl  hcs_$set_max_length_seg  ext entry (ptr,fixed bin (18), fixed bin (35));
dcl  bcd_subsystem_name       char (4) aligned;
dcl  string                   builtin;
dcl  code                     fixed binary (35);
dcl  get_group_id_$tag_star   ext entry returns (char (32));
						/*  work variables  */

dcl  lib_ptr                  ptr init(null());
dcl  data_ptr                 ptr init(null());
dcl  cat_ptr                  ptr init(null());
dcl  data_blocks              (xfer_total) based (data_ptr);
dcl  prog_ptr                 ptr init(null());

dcl  program_seg              (xfer_total) based (prog_ptr);
dcl 1 acla,					/* acl model for file system */
    2 userid char (32),
    2 pack,
      3 mode bit (5),				/* access  */
      3 reterr bit (13),
      3 (rb1, rb2, rb3) bit (6);

dcl 1 status aligned based (statp),			/* overlay for ios_ status */
    2 code fixed bin,				/* standard error code */
    2 fill bit (9) unaligned,
    2 eof bit (1) unaligned;						/* eof bit */


dcl 1 preface aligned based (prefp),			/* model of preface record - 64 words max */
    2 data_check fixed bin,				/* checksum of following data words */
    2 rel_check fixed bin,				/* checksum of following reloc. words */
    2 rel_abs fixed bin,				/* 0=absolute|^0=relocatable */
    2 name bit (36) unaligned,			/* name of pgm */
    2 entry bit (18) unaligned,			/* entry address */
    2 origin bit (18) unaligned,			/* origin */
    2 reloc_words bit (18) unaligned,			/* no. of relocation words */
    2 data_words bit (18) unaligned,			/* no. of data words */
    2 dcws (ndcw) bit (36) unaligned;						/* dcw(s) - max of 58 - to load following data records */


dcl 1 dcw_model aligned based (dcwp),			/* model of dcw */
    2 data_addr bit (18) unaligned,
    2 zero bit (3) unaligned,
    2 action bit (3) unaligned,
    2 count bit (12) unaligned;						/* number of words to xfer */


dcl 1 tss_reloc aligned based (ptr),			/* overlay for each half word  */
    2 half_wd (131072) bit (18) unaligned;						/* of the loaded program */


dcl 1 catblk aligned based (cat_ptr),			/* catalog image */
    2 nxt fixed bin,				/* pointer to next cat blk */
    2 no_ent fixed bin,				/* no. of entries in this cat blk */
    2 elblock (499),				/* room for 499 entries */
      3 element char (4) unaligned,			/* prog name */
      3 address fixed bin;						/* offset in file of preface rcrd */


dcl 1 gcatblk aligned based (cat_ptr),			/* catalog image for tss format catalog */
    2 avail_ptr fixed bin unaligned,
    2 next_cat fixed bin unaligned,
    2 pad bit (36),
    2 elblock (15),
      3 element char (4),
      3 length fixed bin unaligned,
      3 address fixed bin unaligned,
      3 pad bit (72);

%include gtss_ext_;




%include gtss_entry_dcls;
     end gtss_multics_Hstar_;
