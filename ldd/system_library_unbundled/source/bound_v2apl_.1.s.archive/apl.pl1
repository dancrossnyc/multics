/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Command program for Version 2 APL
   Modified 19 January 1974 by PG to call apl_attach_streams_.
   Modified 740322 by PG to properly return code in subsystem entry.
   Modified in July 1974 by G. Gordon Benedict to remove change_ops call and to change call to
   create_apl_workspace_ to be a call to apl_create_workspace_.
   Modified 741017 by PG for -temp_dir option, and recursive capability.
   Modified 750904 by PG to make -terminal_type (-ttp) synonym for -device.
   Modified 761006 by PG to add -iip to aid Questa.
   Modified 780901 by PG to delete -iip (didn't really help), and fix bug 329.
   Modified 790110 by WMY to fix bug 363 (apl_subsystem_ dies if there is no continue workspace
	for the user).
   Modified 790213 by WMY to call file system to untie all files upon exiting APL.
   Modified 790322 by PG to update -ttp error message to include latest terminal types.
   Modified 791219 by PG to print version number before trying to autoload the ws.
   Modified 800411 by PG to say adieu!
   Modified 800814 by WMY to refuse gracefully when invoked as an active
	function (bug 464).
   Modified 811210 by TO to include CR in input prompt.
*/

apl:
v2apl:
     procedure ();

	/* Check for invocation as an active function and complain */

	call cu_$af_arg_count ((0), code);
	if code ^= error_table_$not_act_fnc
	     then do;
		call active_fnc_err_ (0, "apl", "Cannot be called as an active function.");
		return;
	     end;

	autoload_ws = "continue";
	autoload_lock = "";
	devicename = "";
	temporary_segments_dir = get_pdir_ ();

	string (command_options.flags) = ""b;
	command_options.user_number = 100;

	do argno = 1 to cu_$arg_count ();

	     call cu_$arg_ptr (argno, argp, argl, code);
	     if code ^= 0
	     then go to nomoreargsIguess;

	     if arg = "-db" | arg = "-debug"
	     then flags.debug_mode = "1"b;

	     else if arg = "-nqh" | arg = "-no_quit_handler"
	     then flags.no_quit_handler = "1"b;

	     else if arg = "-bfe" | arg = "-brief_errors" | arg = "-bf" | arg = "-brief"
						/* -bf, -brief for compat. */
	     then flags.long_error_mode = "0"b;

	     else if arg = "-lge" | arg = "-long_errors" | arg = "-lg" | arg = "-long"
						/* -lg, -long for compat. */
	     then flags.long_error_mode = "1"b;

	     else if arg = "-ck" | arg = "-check"
	     then flags.compatibility_check_mode = "1"b;

	     else if arg = "-meter"
	     then flags.meter_mode = "1"b;

	     else if arg = "-ttp" | arg = "-terminal_type"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, argl, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, "apl", "-terminal_type must be followed by terminal name.
Possible names are: 1050, 2741, CORR2741, 1030, TEK4013, TEK4015, TN300,
ARDS, ASCII, TTY33, TTY38, TYPEPAIRED, BITPAIRED, TELERAY11, LA36.");
			     return;
			end;

		     devicename = arg;
		end;

	     else if arg = "-user_number"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, argl, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, "apl", "-user_number must be followed by a decimal integer.");
			     return;
			end;

		     command_options.user_number = cv_dec_check_ (arg, code);
		     if code ^= 0 | command_options.user_number <= 0
		     then do;
			     call com_err_ (0, "apl", "Invalid user number.  ^a", arg);
			     return;
			end;
		end;

	     else if arg = "-temp_dir" | arg = "-td"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, argl, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, "apl", "-temp_dir must be followed by directory pathname.");
			     return;
			end;

		     call absolute_pathname_ (arg, temporary_segments_dir, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, "apl", "^a", arg);
			     return;
			end;
		end;

	     else if substr (arg, 1, 1) = "-"		/* must be misspelled control arg */
	     then do;
		     call com_err_ (error_table_$badopt, "apl", "^a", arg);
		     return;
		end;

	     else do;
		     autoload_ws = before (arg, ":");
		     autoload_lock = after (arg, ":");
		end;
	end;

nomoreargsIguess:
	save_ws_info_ptr = apl_static_$ws_info_ptr.static_ws_info_ptr;
						/* copy old ws info ptr into our stack frame. */

	on cleanup
	     call clean_up;				/* handler to revert I/O streams & throw away ws. */

	apl_static_$immediate_input_prompt = byte (13) || (6)" ";	/* kludge */

	call initialize_apl (temporary_segments_dir, devicename, code);
						/* create the workspace, attach the dim. */
	if code ^= 0
	then do;
		call com_err_ (code, "apl", "Unable to initialize apl.");
		apl_static_$ws_info_ptr.static_ws_info_ptr = save_ws_info_ptr;
						/* just in case */
		return;
	     end;

	ws_info_ptr = apl_static_$ws_info_ptr.static_ws_info_ptr;
						/* refresh auto copy */
	string (ws_info.switches) = string (command_options.flags);
	ws_info.user_number = command_options.user_number;

	call ioa_$ioa_switch (apl_static_$apl_output, "apl ^a^/", apl_static_$version_number);

	call apl_load_command_$autoload (autoload_ws, autoload_lock, code);
	if code ^= 0 & code ^= apl_error_table_$cant_autoload
	then do;
		call com_err_ (code, "apl", "^a", autoload_ws);
		call clean_up;
		return;
	     end;

	call apl_parse_;

	if ws_info.signoff_lock ^= ""
	then call ioa_$ioa_switch (apl_static_$apl_output, "apl: signoff lock ignored.");

	call clean_up;
	return;

clean_up:
     procedure ();

	call apl_file_system_$untie_all_files;

	if detach_streams				/* if we attached them, we detach them. */
	then do;
		call apl_detach_streams_ (code);

		if code ^= 0
		then call com_err_ (code, "apl", "While detaching apl I/O streams.");
	     end;

	if apl_static_$ws_info_ptr.static_ws_info_ptr ^= null
	then call apl_dispose_of_storage_ ();

	apl_static_$ws_info_ptr.static_ws_info_ptr = save_ws_info_ptr;
						/* restore old ws info ptr. */
     end;

initialize_apl:
     procedure (a_temp_dir, a_devicename, a_code);

declare	(
	a_devicename	char (*),
	a_temp_dir	char (*),
	a_code		fixed bin (35)
	)		parameter;


	call apl_segment_manager_$set_temp_dir (a_temp_dir);
	call apl_attach_streams_ (a_devicename, a_code);
	if a_code = error_table_$ionmat
	then do;
		detach_streams = "0"b;
		a_code = 0;
	     end;
	else detach_streams = "1"b;

	if a_code ^= 0				/* attach the streams now because apl_create_workspace_ will look */
	then return;				/* at line length, etc. anyway, guy probably changed typeball before
					    hitting return on the apl command */
	call apl_create_workspace_ ();

     end initialize_apl;

/*** this entry is for use by the APL closed subsystem ***/

apl_subsystem_:
     entry (a_user_number, a_switches, a_initial_ws, a_initial_ws_lock, a_terminal_type, a_temporary_segments_dir,
	a_signoff_lock, a_result);

dcl	a_user_number	fixed bin (35) parameter,	/* .. */
	a_switches	bit (*) aligned parameter,	/* = string(ws_info.switches) (Input) */
	a_initial_ws	char (*) parameter,		/* workspace to load (Input) */
	a_initial_ws_lock	char (*) parameter,		/* lock of workspace to load (Input) */
	a_terminal_type	char (*) parameter,		/* terminal conversion table to use. (Input) */
	a_temporary_segments_dir
			char (*) parameter,		/* directory in which to put workspace segments. */
	a_signoff_lock	char (*) parameter,		/* user-specified signoff lock (Output) - "*" = nolock */
	a_result		fixed bin parameter;	/* termination code  (Output)
					   0 = normal termination
					   apl_error_table_$cant_load_ws,
					   apl_error_table_$off_hold
					 */

/* Note:  the following code is secure since no amount of fiddling with the quit button
	   can have any effect until apl is entered */

	save_ws_info_ptr = apl_static_$ws_info_ptr.static_ws_info_ptr;

	on cleanup
	     call clean_up;

	if a_temporary_segments_dir = ""
	then temporary_segments_dir = get_pdir_ ();
	else temporary_segments_dir = a_temporary_segments_dir;

	apl_static_$immediate_input_prompt = (6)" ";

	call initialize_apl (temporary_segments_dir, a_terminal_type, code);
	if code ^= 0
	then do;
		a_result = code;
		return;				/* no clean_up necessary. */
	     end;

	ws_info_ptr = apl_static_$ws_info_ptr.static_ws_info_ptr;
						/* refresh auto copy */
	ws_info.user_number = a_user_number;
	string (ws_info.switches) = a_switches;
	ws_info.switches.transparent_to_signals = "0"b;	/* no you don't! */

	if a_initial_ws = ""
	then autoload_ws = "continue";
	else autoload_ws = a_initial_ws;

	call apl_load_command_$autoload (autoload_ws, a_initial_ws_lock, code);

/* If the ws could not be loaded, it is a "security violation"
	   unless no ws was explicitly specified. */

	if code ^= 0
	then if ^(code = apl_error_table_$cant_autoload & a_initial_ws = "")
	     then do;
		     a_result = code;
		     call clean_up;
		     return;
		end;

	call ioa_$ioa_switch (apl_static_$apl_output, "apl ^a^/", apl_static_$version_number);

	call apl_parse_ ();

	a_signoff_lock = ws_info.signoff_lock;

	if ws_info.off_hold
	then a_result = apl_error_table_$off_hold;
	else a_result = 0;

	call clean_up;
	return;

/* entries */

declare	absolute_pathname_	entry (char (*), char (*), fixed bin (35)),
	apl_create_workspace_
			entry (),
	apl_load_command_$autoload
			entry (char (*), char (*), fixed bin (35)),
	apl_segment_manager_$set_temp_dir
			entry (char (*)),
	get_pdir_		entry () returns (char (168) aligned),
	cv_dec_check_	entry (char (*), fixed bin (35)) returns (fixed bin),
	cu_$af_arg_count 	entry (fixed bin, fixed bin(35)),
	cu_$arg_count	entry () returns (fixed bin),
	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (24), fixed bin (35)),
	active_fnc_err_ 	entry() options(variable),
	com_err_		entry options (variable),
	ioa_$ioa_switch	entry options (variable),
	apl_file_system_$untie_all_files
			entry,
	(apl_parse_, apl_dispose_of_storage_)
			entry (),
	apl_attach_streams_ entry (char (*), fixed bin (35)),
	apl_detach_streams_ entry (fixed bin (35));


/* conditions */

declare	cleanup		condition;

/* builtins */

declare	(after, before, null, string, substr)
			builtin;

/* automatic */

declare	argno		fixed bin,
	argp		ptr,
	argl		fixed bin (24),
	autoload_lock	char (32),
	autoload_ws	char (168),
	code		fixed bin (35),
	detach_streams	bit (1) aligned initial ("1"b),
	devicename	char (16),
	save_ws_info_ptr	ptr unaligned,
	temporary_segments_dir
			char (168),
	1 command_options	aligned,
	  2 flags		unaligned like ws_info.switches,
	  2 user_number	fixed bin (35);

/* based */

declare	arg		char (argl) unaligned based (argp);

/* external static */

declare	(
	apl_error_table_$cant_autoload
			fixed bin (35),
	apl_error_table_$off_hold
			fixed bin (35),
	apl_static_$immediate_input_prompt
			char (32) varying,
	error_table_$not_act_fnc fixed bin (35),
	error_table_$badopt fixed bin (35),
	error_table_$ionmat fixed bin (35),
	apl_static_$version_number
			char (5),
	apl_static_$apl_output
			pointer
	)		external static;

/* include files */

%include apl_number_data;
%include apl_ws_info;

     end;
