/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Read portion of the APL Device Interface Module.
   Stolen from the "code_converter" module (which was stolen
   from hardcore TTYDIM) by Paul Green, July, 1973. */

/* Modified 740530 by PG to add tabsin mode to control changing spaces to tabs on input */
/* Modified 741018 by PG for variable tab width. */
/* Modified 780503 by William York to allow erasing of illegal characters to work. */
/* Modified 781208 by PG to switch to clock builtin */
/* Modified 790614 by PG use iox_-style calls. */
/* Modified 790910 by PG to fix 295 (quit-editing w/o BS or CR left in LF) */

/* format: style3 */
apl_dim_read_:
     procedure (sdb_ptr, readp, offset, nelem, nelemt, bv_status);

/* parameters */

dcl	(
	readp		ptr,			/* ptr to caller's buffer */
	offset		fixed bin,		/* offset in caller's buffer */
	nelem		fixed bin (21),		/* number of elements desired by caller */
	nelemt		fixed bin (21),		/* number of elements actually transmitted */
	bv_status		bit (72) aligned		/* I/O system status */
	)		parameter;

/* automatic */

dcl	(col, number_of_spaces, old_read_back_state, normal_read_n_transmitted, line, toffset, act, move, c, i, ini, outi,
	outimax, sum, tpini)
			fixed bin (21),
	(outp, rbufp)	ptr,
	temp_ptr		ptr,
	inchar		bit (9),
	shift		bit (2),
	(oneshift, pass2, prefsw, target_eof)
			bit (1),
	real_time		fixed bin (71);

/* entries */
dcl	iox_$control	entry (ptr, char (*), ptr, fixed bin (35)),
	iox_$get_line	entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
	iox_$put_chars	entry (ptr, ptr, fixed bin (21), fixed bin (35)),
	apl_dim_canonicalize_
			entry (ptr, ptr, fixed bin (21), fixed bin (21));

/* based */

declare	based_string	char (nelemt) based;
declare	char_array	(0:1044479) char (1) unaligned based;

dcl	1 char		based (rbufp) aligned,	/* to ref strings */
	  2 a		(0:1) bit (9) unaligned;

/* builtins */

declare	(addr, binary, bit, clock, fixed, hbound, length, mod, null, substr)
			builtin;

/* conditions */

declare	apl_quit_		condition;

/* named constants (internal static initial) */

declare	character_error_message
			char (11) internal static options (constant) initial ("char error
");

/* include files */

%include apl_dim_sdb;
%include apl_dim_table;

/* program */

begin:
	oneshift, pass2, prefsw, target_eof = "0"b;

	bv_status = ""b;
	if rawim
	then do;
		real_time = clock ();
		temp_ptr = addr (readp -> char_array (offset));
		call iox_$get_line (stream_data_block.device_iocb_ptr, temp_ptr, nelem, nelemt, status_code);
		bv_status = status;
		keying_time = keying_time + clock () - real_time;
		return;
	     end;
	ini = read_offset;
	outimax = offset + nelem;
	outp = readp;
	nelemt = 0;
	device_ptr = device_info_ptr;			/* get pointer to device info table */
	conversion_ptr = conv_tab_ptr;		/* pointer to conversion tables */
	rbufp = addr (canonicalization_buffer);

	if ini < 0
	then do;
		call getmore;
		ini = 0;
	     end;

/* Now that the characters have been read, begin processing them.
   If no carriage return or backspace was typed, canonicalization is done by this program;
   otherwise all canonicalization is done by "apl_dim_canonicalize_". */

	tpini = ini;
	toffset = offset;
again:
	outi = toffset;
	shift = actshift;
	col = actcol;
	line = actline;
	character_error_index = -1;
iloop:
	if outimax <= outi				/* if no more space */
	then go to rdone;				/* quit right now */

	if ini >= inimax
	then call getmore;


	if shift
	then substr (char.a (ini), 3, 1) = shift;	/* if shifting console, add present shift state */

	inchar = in (binary (char.a (ini), 9));		/* convert char to ascii */
	ini = ini + 1;				/* bump input index */

haveascii:
	if inchar & "100000000"b			/* if special control char */
	then do;
		i = binary (substr (inchar, 3, 7), 7);	/* get action code */

		if i = 0
		then shift = "01"b;			/* go to lower case */
		else if i = 1			/* go to upper case */
		then shift = "10"b;
		else if i = 2			/* one char shift */
		then oneshift = "1"b;
		else if i = 3			/* pref */
		then do;
			if ini >= inimax
			then call getmore;

			if shift
			then substr (char.a (ini), 3, 1) = shift;
						/* add shift bit */

			inchar = char.a (ini) & "001111111"b;
						/* get raw code */
			ini = ini + 1;
			prefsw = "1"b;		/* search should look for prefix def. */

prefesc:
			do i = 0 to hbound (escape (*), 1);
						/* search prefix/escape table */
			     if inchar = escape (i).inchar
						/* if match */
			     then if escape (i).prefix = prefsw
						/* and right kind */
				then do;
					inchar = escape (i).outchar;
						/* get results */
					if escape (i).conceal
						/* if char is to be concealed */
					then go to store;
						/* then don't look at it */
					else go to haveascii;
				     end;
			end;
			if prefsw			/* if not found in table */
			then go to iloop;		/* ignore pref and char */
		     end;
		else if i = 5			/* character error */
		then do;
			if pass2			/* if 2nd pass required */
			then do;
				inchar = "100011010"b;
						/* tell 2nd pass to do it */
				go to store;
			     end;

			if character_error_index < 0	/* if no errors yet */
			then character_error_index = outi - toffset;

			go to bad_char_exit;
		     end;

		go to iloop;
	     end;

bad_char_exit:
	if inchar & "100000000"b
	then act = 0;
	else act = binary (type (binary (inchar, 9)).action, 4);
						/* if normal char */

	if inchar & "100000000"b
	then move = 0;
	else move = binary (type (binary (inchar, 9)).move, 3);
						/* get action and movement code */

	if (move = 2) | (move = 4) | (act = 5)		/* bs, cr or quit-edit linefeed...second pass required */
	then if ^pass2				/* if not already set */
	     then if conm				/* and in canonical mode */
		then do;
			pass2 = "1"b;
			ini = tpini;
			go to again;		/* start conversion over */
		     end;

	go to new_col (move);			/* switch on column move code */

new_col (0):
	col = col + 1;				/* normal +1 movement */
	go to end_col;

new_col (1):
	go to end_col;				/* no movement */

new_col (2):
	if col > 0
	then col = col - 1;				/* backspace */
	go to end_col;

new_col (3):					/* tab */
	if stream_data_block.tab_width < 2		/* turned off */
	then number_of_spaces = 1;			/* treat like SP */
	else number_of_spaces = stream_data_block.tab_width - mod (col, stream_data_block.tab_width);
	col = col + number_of_spaces;
	if ^tabsin_mode
	then do;
		substr (outp -> based_string, outi + 1, number_of_spaces) = " ";
		outi = outi + number_of_spaces;
		go to iloop;
	     end;
	go to end_col;

new_col (4):
	col = 0;					/* carriage return */
	go to end_col;

new_col (5):
	col = 0;
	line = line + 1;				/* new line */
	go to end_col;

new_col (6):
	col = 0;
	line = 0;					/* new page */
	go to end_col;

new_col (7):
	line = line + 10 - mod (line, 10);		/* vertical tab */

end_col:
	if act = 0				/* normal */
	then do;
		if oneshift			/* if char to be shifted */
		then do;
			substr (inchar, 3, 1) = ^substr (inchar, 3, 1);
						/* complement 100 bit */
			oneshift = "0"b;
		     end;

store:
		outp -> char.a (outi) = inchar;	/* store ascii char */
		outi = outi + 1;
		go to iloop;
	     end;

	else if act = 2				/* if erase char */
	then do;
		if ^erklm				/* if not in erase kill mode */
		then go to store;			/* then store erase char */
		if pass2				/* if second pass required, don't erase now */
		then do;
			inchar = "100011000"b;	/* tell second pass to erase */
			go to store;
		     end;

		if outi > toffset			/* if something to erase */
		then do;
			if character_error_index = outi - toffset - 1
						/* if erasing bad char */
			then character_error_index = -1;

			outi = outi - 1;
			if type (binary (outp -> char.a (outi), 9)).white
						/* if prev char white */
			then do outi = outi by -1 to offset + 1
				while (type (binary (outp -> char.a (outi - 1), 9)).white);
						/* erase all white space */
			     end;
		     end;
	     end;

	else if act = 3				/* kill */
	then do;
		if ^erklm				/* if not in erase kill mode */
		then go to store;			/* then store kill char */

		if pass2				/* if second pass required */
		then do;
			inchar = "100011001"b;	/* fake kill char */
			go to store;
		     end;
		outi = toffset;			/* reset output string */
		character_error_index = -1;		/* reset any character errors */
	     end;

	else if act = 4				/* read delimiter */
	then do;
		if conm
		then if type (binary (inchar, 9)).white /* if in canonical mode */
		     then do outi = outi by -1 to toffset + 1 while (type (binary (outp -> char.a (outi - 1), 9)).white);
						/* erase all white space */
			end;
		outp -> char.a (outi) = inchar;	/* store the new line */
		outi = outi + 1;
rdone:
		nelemt = outi - toffset;		/* indicate length of returned string */
		if pass2				/* if second pass required, do it */
		then call apl_dim_canonicalize_ (sdb_ptr, outp, toffset, nelemt);
		nelemt = nelemt + toffset - offset;
		if ini < inimax
		then read_offset = ini;		/* more characters to be processed */
		else do;
			read_offset = -1;		/* read-ahead buffer is empty */
			if target_eof
			then do;
				status = ""b;
				status_bits.end_of_logical_data = "1"b;
				bv_status = status; /* tell caller about eof */
			     end;
		     end;

/* Copy unprocessed portion of canonicalization_buffer down to beginning.
	        While this copy is proceeding, no QUITs may occur. */

		if read_offset ^= -1
		then do;
			inimax = inimax - read_offset;
			substr (canonicalization_buffer, 1, inimax) =
			     substr (canonicalization_buffer, read_offset + 1, inimax);
			read_offset = 0;		/* zero-origin */
			canonicalization_index = inimax + 1;
						/* inimax is zero-origin, canon is 1-origin */
		     end;
		else canonicalization_index = 1;

		actshift = shift;
		actcol = col;
		actline = line;
		if stream_data_block.character_error_index >= 0
		then do;

			if stream_data_block.escape_out_seen
			then do;
				stream_data_block.escape_out_seen = "0"b;
				stream_data_block.character_error_index = -1;
				signal apl_quit_;
				return;
			     end;

			call iox_$control (stream_data_block.iocb_ptr, "resetread", null, status_code);

			call iox_$put_chars (stream_data_block.iocb_ptr, addr (character_error_message),
			     length (character_error_message), status_code);

			old_read_back_state = stream_data_block.read_back;
			stream_data_block.read_back = read_back_output;

			if stream_data_block.character_error_index > 0
			then call iox_$put_chars (stream_data_block.iocb_ptr, addr (outp -> char_array (toffset)),
				(stream_data_block.character_error_index), status_code);

			stream_data_block.character_error_index = -1;
			stream_data_block.read_back = old_read_back_state;

			go to begin;
		     end;

		return;
	     end;


	else if act = 1				/* esc char */
	then do;
		if ^escm				/* if not in escape mode, store char */
		then go to store;
		c = 0;				/* count for oct esc */
		sum = 0;				/* for oct to bin conversion */
escl:
		call skip_specials;
		if (inchar & "111111000"b) = "000110000"b
						/* if octal number */
		then do;
			sum = sum * 8 + binary (inchar, 9) - 48;
						/* add into sum */
			c = c + 1;
			if c < 3			/* if done */
			then go to escl;
shortn:
			inchar = bit (binary (sum, 9), 9);
						/* store converted number */
			go to store;
		     end;
		if c > 0				/* if started as octal, then quit */
		then do;
			ini = ini - 1;		/* fix to pickup non number again */
			go to shortn;
		     end;
		prefsw = "0"b;			/* if not octal esc, lookup in table */
		go to prefesc;
	     end;
	else if act = 5				/* canonicalization break */
	then do;
		outp -> char.a (outi) = inchar;	/* store the break */
		outi = outi + 1;
		if pass2
		then do;
			nelemt = outi - toffset;
			call apl_dim_canonicalize_ (sdb_ptr, outp, toffset, nelemt);
			outi = toffset + nelemt;
			pass2 = "0"b;
		     end;
		tpini = ini;
		toffset = outi;
	     end;
	go to iloop;

main_program_return:
	return;

/* INTERNAL PROCEDURES */

getmore:
     proc;					/* get more characters to read */

	if target_eof
	then go to rdone;

	real_time = clock ();
	status = ""b;
	call iox_$get_line (stream_data_block.device_iocb_ptr, addr (normal_read_buffer), length (normal_read_buffer),
	     normal_read_n_transmitted, status_code);
	keying_time = keying_time + clock () - real_time;
	if status_code ^= 0
	then do;
		bv_status = status;
		go to main_program_return;
	     end;

	if actshift
	then actshift = "01"b;			/* all input begins in lower case; as does each line of output.
						   (nl is in lower case!) */

/* if not in read_back_output or read_back_input mode, then column is ok. Otherwise
		   we are guaranteed to be in column 0. */

	if stream_data_block.read_back ^= read_back_input
	then actcol = 0;

	if normal_read_n_transmitted = 0
	then do;
		target_eof = "1"b;
		go to rdone;
	     end;

	if end_of_logical_data
	then target_eof = "1"b;

	status = ""b;

	if canonicalization_index <= 0		/* AAARRRGGGHHH!!! */
	then canonicalization_index = 1;		/* fix it quick... */

	substr (canonicalization_buffer, canonicalization_index, normal_read_n_transmitted) =
	     substr (normal_read_buffer, 1, normal_read_n_transmitted);
	canonicalization_index = canonicalization_index + normal_read_n_transmitted;
	inimax = canonicalization_index - 1;		/* inimax is zero origin */

     end getmore;

skip_specials:
     proc;					/* procedure to skip over "special" chars, setting shift bits */

loop:
	if ini >= inimax
	then call getmore;				/* first get the characters */

	if shift
	then substr (char.a (ini), 3, 1) = shift;	/* set shift bit */

	inchar = in (binary (char.a (ini), 9));		/* get char */
	ini = ini + 1;

	if inchar & "100000000"b			/* if special */
	then do;
		i = binary (substr (inchar, 3, 7), 7);
		if i = 0
		then shift = "01"b;			/* go to lower case */
		else if i = 1
		then shift = "10"b;			/* go to upper case */
		go to loop;			/* check next char */
	     end;

	return;					/* with variables set */

     end skip_specials;

     end /* apl_dim_read_ */;
