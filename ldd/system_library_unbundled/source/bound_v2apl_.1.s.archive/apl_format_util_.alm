"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************

" Written 781114 by PG
" Modified 781206 by PG to fix 361 (round_fixed computed temp length wrong)
" Modified 790305 by PG to fix 369 (round_fixed had test reversed in 0_or_1 case)
" Modified 790319 by PG to fix 378 (round_fixed lost negative sign in 0_or_1 case)
" Modified 791127 by PG to add split entry.
" Modified 810125 by WMY to fix bug 453b, the sign is occasionally dropped in
"	the split entrypoint.
"
	name	apl_format_util_
	segdef	round
	segdef	round_fixed
	segdef	split
" 
" Usage:
"	declare apl_format_util_$round entry (float dec (19), fixed bin, char (21));
"
"	call apl_format_util_$round (value, n_digits, buffer);
"
" We assume that 0 < n_digits < 20
"
" Subroutine to implement a useful round builtin, since the
" PL/I round builtin only takes constant arguments to tell it
" how many digits to keep!
"
	equ	P_value,2
	equ	P_digits,4
	equ	P_buffer,6
"
" We round to a specified number of decimal digits. This case is easy;
" we just assign to a float decimal temp that has as many digits as we
" wish to keep. The hardware performs the rounding during assignment.
"
round:
	epp1	pr0|P_value,*	get ptr to value to round
	ldq	pr0|P_digits,*	get number of digits
	adq	2,dl		account for sign and exponent
	epp2	pr0|P_buffer,*	get ptr to temporary space
	mvn	(pr),(pr,rl),round	move rounded into buffer
	desc9fl	pr1|0,21		source
	desc9fl	pr2|0,ql		target
	mvn	(pr,rl),(pr)	move back into input arg
	desc9fl	pr2|0,ql		source
	desc9fl	pr1|0,21		target
	short_return
" 
" Usage:
"	declare apl_format_util_$round_fixed entry (float dec (19),
"		fixed bin, char (21));
"
"	call apl_format_util_$round_fixed (value, n_digits, buffer);
"
" We round to a specified number of decimal places. This is accomplished
" by computing the precision of an intermediate floating decimal temp,
" and assigning to it, thus rounding to that number of digits.
" The precision of the temp has enough digits to hold the integral part of the
" result, as well as the correct number of fractional digits.
"
" The length of the temporary is:
"	#integral_digits + #decimal_places + 2
"
"	= (19 - #leading_zeros + exponent) + #decimal_places + 2
"
"	= -#leading_zeros + 21 + exponent + #decimal_places
"
round_fixed:
	epp1	pr0|P_value,*	get ptr to value to round
	epp2	pr0|P_buffer,*	get ptr to temporary space
	eax7	20		byte offset of exponent
	mlr	(pr,x7),(pr)	extract exponent
	desc9a	pr1|0,1		source
	desc9a	pr2|0,1		target
	lda	pr2|0		get exponent
	als	1		shift sign into place
	ars	28		extend sign, shift number down
	sta	pr2|0		save exponent
	tct	(pr)		count leading zeros
	desc9a	pr1|0(1),19	in decimal value
	arg	zero_table	table is here
	arg	pr2|1		flag || count goes here
	ttn	all_zero		value is 0e0
	lda	pr2|1		get flag & count word
	ana	=o000077777777	keep count only
	sta	pr2|1		put it back for later
	neg	0		form -count
	ada	21,dl		form -count + 21
	ada	pr2|0		form -count + 21 + exponent
	ada	pr0|P_digits,*	form -count + 21 + exponent + decimal_places
	cmpa	21,dl		prec(temp) >= prec(input)?
	tmi	2,ic		no
"
all_zero:
	short_return		yes...nothing to do
	cmpa	2,dl		prec(temp) <= 2?
	tmi	return_zero	<2 ... no digits left
	tze	return_0_or_1	=2 ... one (new) digit left
	mvn	(pr),(pr,rl),round	move rounded into buffer
	desc9fl	pr1|0,21		source
	desc9fl	pr2|0,al		target
	mvn	(pr,rl),(pr),round	move rounded into input
	desc9fl	pr2|0,al		source
	desc9fl	pr1|0,21		target
	short_return
"
return_zero:
	mvn	(),(pr)		store zero
	desc9ls	fixed_zero,2	source
	desc9fl	pr1|0,21		target
	short_return
"
fixed_zero:
	aci	"+0"
"
" In this case, we are rounding away all of the digits in the original value.
" For example, if the value was .555, we are rounding to an integer, and the
" result is 1.0.  The intermediate length in this case is 2...no digits at
" all.  Thus, we cannot just assign to the intermediate temp.
" We end up converting a number of the form:
"	s000...0DDD...D x 10 ** exp
" to:
"	s000...1000...0 x 10 ** exp
" which normalizes to:
"	s000..........1 x 10 ** (exp + length (DDD...D))
"
" thus, new_exp = old_exp + (19 - #leading_zeros)
"
return_0_or_1:
	lxl7	pr2|1		get number of leading zeros
	cmpc	(pr,x7),(),fill(065)	is the leading digit less than 5?
	desc9a	pr1|0(1),1		the digit
	desc9a	0,0			a "5"
	tnc	return_zero	yes...return zero
	mlr	(pr),(pr),fill(061)	move sign and "1" into temp
	desc9a	pr1|0,1		source
	desc9a	pr2|2,2		target
	lda	pr2|0		get exponent
	ada	19,dl		form exp + 19
	sba	pr2|1		form exp + 19 - #zeros
	als	28		fixup sign
	arl	1+18		byte-align, move to byte 3.
	stba	pr2|2,10		store exponent
	mvn	(pr),(pr)		move into parameter
	desc9fl	pr2|2,3		source
	desc9fl	pr1|0,21		target
	short_return
"
zero_tab:
	vfd	9/0,9/1,9/2,9/3	TCT table to skip 060's.
	vfd	9/4,9/5,9/6,9/7
	vfd	9/8,9/9,9/0,9/0
"
	equ	zero_table,zero_tab-12	since only 060-071 can ever appear
"				we don't need full table.
" 
" Usage:
"	declare apl_format_util_$split entry (float dec (19), fixed dec (19), fixed bin,
"		char (21));
"
"	call apl_format_util_$split (decimal_value, integer_value, exponent, round_buffer);
"
" We take a floating-point, decimal value and split it into two parts: an integer decimal
" value that contains the digits, and an integer binary value that contains the adjusted
" exponent (adjusted so that it is the true exponent for scientific form).
"
"	equ	P_value,2
	equ	P_integer_value,4
	equ	P_exponent,6
	equ	P_buffer4,8
"
split:
	epp1	pr0|P_value,*	get ptr to value to split
	epp4	pr0|P_integer_value,*	get ptr to output value
	epp2	pr0|P_exponent,*	get ptr to exponent value
	epp3	pr0|P_buffer4,*	get ptr to buffer in arg 4
	eax7	20		byte offset of exponent
	mlr	(pr,x7),(pr)	extract exponent
	desc9a	pr1|0,1		source
	desc9a	pr3|0,1		target
	lda	pr3|0		get exponent
	als	1		shift sign into place
	ars	28		extend sign, shift number down
	sta	pr3|0		save exponent
	tct	(pr)		count leading zeroes
	desc9a	pr1|0(1),19	in decimal value
	arg	zero_table	table is here
	arg	pr3|1		flag || count goes here
	lda	0,dl		get ready for zero case
	ttn	split.all_zero	value is 0e0
	lda	pr3|1		get flag & count word
	ana	=o000077777777	keep count only
	sta	pr3|1		save count of leading zeros
	lda	pr3|0		compute true exponent
	ada	18,dl		..
	sba	pr3|1		= exp + 18 - n_leading_zeros
"
split.all_zero:
	sta	pr2|0		save in exponent
" Now take the digits out of the floating-point decimal number, and slide
" them left so that the first non-zero digit of the source becomes the very first digit
" of the integer.
"
	mvn	(),(pr)		initialize target
	desc9ls	fixed_zero,2	source
	desc9ls	pr4|0,20		target
	lda	19,dl		compute # significant digits
	sba	pr3|1		= 19 - n_leading_zeros
	ldq	pr3|1		offset of first digit is just n_leading_zeros
	mlr	(pr,rl,ql),(pr,rl)	move digits into position
	desc9a	pr1|0(1),al	source (step over sign)
	desc9a	pr4|0(1),al		target (step over sign)
	mlr 	(pr),(pr)		transfer sign from source to target
	desc9a	pr1|0,1
	desc9a	pr4|0,1
	short_return
"
	end
