/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to push a "save" frame on the APL stack. Used by programs which must operate in the
   global environment.

   Richard S. Lamson, 1973.
   Modified by PG on 740315 to fix a bug which caused the save frame to overwrite the last word of the previous frame.
   Modified by PG on 740514 to check for running off the parse stack, and fix a serious reference count bug.
   Modified by G. Gordon Benedict in July, 1974 to add correct apl names to entry points
   Modified 761011 by PG for new parse_frame declaration.
   Modified 770204 by PG to get update entry to restore local meanings (apparently hasn't done
	so since 740514 change was made).
   Modified 790815 by PG to fix 413 (local meanings don't get restored by )LOAD...looks like this
	was broken by 770204 change...looks like there are 3 cases, not 2 as I had thought).
*/

apl_create_save_frame_:
     procedure;

/* Push a save frame after the suspended frame that is on the top of the stack now.  */

	parse_frame_ptr = ws_info.current_parse_frame_ptr;
	number_of_ptrs = 1 + divide (addr (parse_frame.old_meaning_ptrs (1)) -> source_length + 3, 4, 21, 0);
	save_frame_pointer = addrel (parse_frame_ptr, size (parse_frame));

	if fixed (rel (save_frame_pointer), 18) > max_parse_stack_depth
	then call apl_system_error_ (apl_error_table_$cant_push_save_frame);

	total_symbols = 0;

/* Save a pointer to each symbol bead, a pointer to each meaning,
   and set g-m-p-p to null to indicate that the current meaning is assumed
   to be the global meaning. */

	do bucket_number = 1 to symbol_table.table_size;
	     do symbol_pointer = symbol_table.hash_bucket_ptr (bucket_number)
		repeat (symbol_pointer -> symbol_bead.hash_link_pointer) while (symbol_pointer ^= null);

		total_symbols = total_symbols + 1;

		save_frame.symbol_pointer (total_symbols) = symbol_pointer;
		call increment_reference_count (symbol_pointer);

		save_frame.saved_meaning_pointer (total_symbols) = symbol_pointer -> symbol_bead.meaning_pointer;
		call increment_reference_count (symbol_pointer -> symbol_bead.meaning_pointer);

		save_frame.global_meaning_pointer_pointer (total_symbols) = null;
	     end;
	end;

/* Now walk the stack and find the "globalest" meaning for each symbol.
   If the symbol was never localized, the current values are ok.
   If the symbol was only localized once, that localization has the correct old global meaning.
   Otherwise each additional localization replaces the current one, since we walk the stack backwards. */

	do parse_frame_ptr = ws_info.current_parse_frame_ptr
	     repeat (parse_frame_ptr -> parse_frame.last_parse_frame_ptr) while (parse_frame_ptr ^= null);

	     if parse_frame_ptr -> parse_frame.parse_frame_type = function_frame_type
	     then do;
		     lexed_function_bead_pointer = parse_frame_ptr -> parse_frame.lexed_function_bead_ptr;
		     do local = 1 to lexed_function_bead_pointer -> lexed_function_bead.number_of_localized_symbols;

			symbol_pointer = lexed_function_bead_pointer -> lexed_function_bead.localized_symbols (local);

			if symbol_pointer ^= null
			then if symbol_pointer -> general_bead.symbol
						/* filter localized system variables */
			     then do global = 1 to total_symbols;
				     if symbol_pointer = save_frame.symbol_pointer (global)
				     then do;
					     call process_symbol;
					     go to found_symbol;
					end;
				end;
						/* if it falls thru the do-loop, its an error; a localized symbol which
						   has no correspondence in the symbol table, but who cares? */
found_symbol:
		     end;
		end;
	     else if parse_frame_ptr -> parse_frame.parse_frame_type = save_frame_type
	     then call apl_system_error_ (apl_error_table_$random_system_error);
	end;

	save_frame.last_frame_pointer = ws_info.current_parse_frame_ptr;
	save_frame.saved_symbol_count = total_symbols;
	save_frame.frame_type = save_frame_type;
	ws_info.current_parse_frame_ptr = save_frame_pointer;

	return;

process_symbol:
     procedure;

/* Since the current meaning (symbol_bead.meaning_pointer) can point
   to the same bead as the old meaning ptr, we must be careful with
   the reference counts. We will increment the reference count first,
   then decrement it.

   Make the current meaning be the more global meaning. */

	call increment_reference_count (parse_frame_ptr -> parse_frame.old_meaning_ptrs (local));
	call decrement_reference_count (save_frame.symbol_pointer (global) -> symbol_bead.meaning_pointer);

	save_frame.symbol_pointer (global) -> symbol_bead.meaning_pointer =
	     parse_frame_ptr -> parse_frame.old_meaning_ptrs (local);

/* Remember where we got this pointer to the global meaning, so we can change it
   if destroy_save_frame_update_ is called. */

	save_frame.global_meaning_pointer_pointer (global) = addr (parse_frame_ptr -> parse_frame.old_meaning_ptrs (local));

     end process_symbol;

/* Entry to restore meanings to old localized meanings. */

apl_destroy_save_frame_:
     entry;

	modification = "0"b;
	go to destroy;

/* Entry to replace global meaning with present meaning, and then revert to old local meanings. */

apl_destroy_save_frame_update_:
     entry;

	modification = "1"b;

destroy:
	save_frame_pointer = ws_info.current_parse_frame_ptr;

	if save_frame.frame_type ^= save_frame_type
	then return;

	do global = 1 to save_frame.saved_symbol_count;
	     sp = save_frame.symbol_pointer (global);
	     mp = save_frame.saved_meaning_pointer (global);
	     gmpp = save_frame.global_meaning_pointer_pointer (global);

/* If requested, make global meaning be present meaning.  There are two ways to do this,
   depending on whether the symbol was localized or not. */

	     if modification & gmpp = null
	     then do;

/* Case 1: Set global meaning from present meaning. Symbol was never localized. Therefore present meaning
   is correct, and all we have to do is flush the saved old "local" meaning. There is purposefully no code
   in this then-clause; the cases seem clearer that way. */

		end;
	     else do;

/* Present meaning is not correct */

		     if modification & gmpp ^= null
		     then do;

/* Case 2: Set global meaning from present meaning. Symbol was localized. Therefore we have to set the
   oldest parse_frame.old_meaning_ptr (point to by gmpp), and relocalize the symbol. */

			     tp = sp -> symbol_bead.meaning_pointer;
			     call increment_reference_count (tp);
			     call decrement_reference_count (gmpp -> based_meaning_pointer);
			     gmpp -> based_meaning_pointer = tp;
			end;

/* Case 2 (rest) and Case 3: Global meaning OK now. Restore local meaning as shown by save_frame. */

		     call increment_reference_count (mp);
		     call decrement_reference_count (sp -> symbol_bead.meaning_pointer);
		     sp -> symbol_bead.meaning_pointer = mp;
		end;

/* Now throw away pointers in save frame */

	     call decrement_reference_count (mp);
	     call decrement_reference_count (sp);
	end;

	ws_info.current_parse_frame_ptr = save_frame.last_frame_pointer;
	return;

increment_reference_count:
     procedure (pointer);

declare	pointer		pointer unaligned parameter;

	if pointer = null
	then return;

	pointer -> general_bead.reference_count = pointer -> general_bead.reference_count + 1;

     end increment_reference_count;




decrement_reference_count:
     procedure (pointer);

declare	pointer		pointer unaligned parameter;

	if pointer = null
	then return;

	pointer -> general_bead.reference_count = pointer -> general_bead.reference_count - 1;
	if pointer -> general_bead.reference_count <= 0
	then call apl_free_bead_ (pointer);

     end decrement_reference_count;

/* automatic */

declare	(parse_frame_ptr, lexed_function_bead_pointer, symbol_pointer, mp, sp, gmpp, tp)
			pointer unaligned;

declare	(
	bucket_number,
	local,
	global,
	total_symbols,
	pointers,
	source_length	based
	)		fixed binary (24) aligned;

declare	modification	bit (1) aligned;

/* based */

declare	based_meaning_pointer
			pointer unaligned based;

/* builtins */

declare	(addr, divide, fixed, null, rel, size)
			builtin;

/* external static */

declare	(apl_error_table_$cant_push_save_frame, apl_error_table_$random_system_error)
			fixed binary (35) aligned external static;

/* entries */

declare	apl_system_error_	entry (fixed binary (35));
declare	apl_free_bead_	entry (pointer unaligned);

/* include files */

%include apl_number_data;
%include "apl_ws_info";
%include "apl_bead_format";
%include "apl_symbol_bead";
%include "apl_lexed_function_bead";
%include "apl_parse_frame";
%include "apl_save_frame";
%include "apl_symbol_table";
%include "apl_operator_bead";
     end /* apl_create_save_frame_ */;
