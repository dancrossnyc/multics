/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_arrow_operators_: procedure;

/*
 * apl_arrow_operators_
 *
 * this module contains the 'take' and 'drop' operators for APL.
 *
 * fast vector case written 7/20/73 by DAM
 * general case added 7/27/73 by DAM
 * modified 73.9.26 by DAM to avoid bugs in size builtin
 *	(Note:  this program should be rewritten to avoid the present excessive duplication of code.)
 * Modified 770207 by PG to fix case(2) to set value_bead.data_pointer if right arg is on stack (bug 266).
 * Modified 770222 by PG to fix case(3) so that overtaking of a numeric vector works (bug 268).
   Modified 780209 by PG to use apl_push_stack_ (bug 278).
   Modified 781118 by PG to fix bug 281 (overtaking a scalar failed because
	result characters overwrote rho vector!)
 */


dcl result_vb pointer,				/* -> value_bead for result */
    result pointer,					/* -> value array for result */
    right_vb pointer,				/* -> value_bead of right operand */
    right pointer,					/* -> value array of right operand */
    rhorho fixed bin,				/* rhorho of the result, also of the right operand */
    right_rho fixed bin(21),				/* when right opnd is a vector, this is its length */
    left_vb pointer,				/* -> value_bead for left operand */
    left pointer,					/* -> value array for left operand */
    data_elements fixed bin(21);			/* total_data_elements of the result, used by aggregate moves */

dcl characters bit (1) aligned,			/* "1"b if right opnd and result are character,
						   "0"b if they are numeric */
    numeric_data (data_elements) float aligned based,	/* used for aggregate moves -- numeric_datum generates lousy code */
    fixnum fixed bin(21),				/* random fixed-binary number, usually derives from left opnd */
    float_temp float;

dcl (apl_error_table_$rank, apl_error_table_$length, apl_error_table_$domain) fixed bin(35) external;

dcl i fixed bin;					/* do-loop index (only) */
dcl case fixed bin;

dcl character_string_overlay_right char(right_rho) aligned based,	/* used for aggregate moves */
    numeric_datum_right (right_rho) aligned float based;		/* .. */

dcl special_character char(1) aligned,			/* used by special scalar hacks as a buffer */
    special_number float aligned;			/* .. */

dcl (abs, addr, addrel, fixed, floor, rel, size, substr, string, unspec) builtin;


dcl take_not_drop bit(1) aligned,			/* "1"b => take operator, "0"b => drop operator (entry switch) */
    n_words fixed bin(19),				/* number of words to push on stack */
    Some_Words (n_words) bit(36) aligned based;		/* used to move value bead header */


	/* declarations for the general case (loop algorithm instead of EIS algorithm) */

dcl cur_in_pos fixed bin(21),				/* current position in input operand */
    cur_out_pos fixed bin(21),			/* current position in result */
    cur_rho fixed bin,				/* current dimension being worked on:  index into orders */
    orders_ptr pointer,

    1 orders(rhorho) aligned based(orders_ptr),		/* this stuff controls execution of the general case */
      2 pre_skip_or_pad fixed bin(21),			/* -=skip this many from input, +=pad this many of output */
      2 take_amount fixed bin(21),			/* then take this many from next dimension or data if last */
      2 post_skip_or_pad fixed bin(21),			/* then skip this many or pad as above */
      2 repeat_count fixed bin(21),			/* number of times left to do this dimension */
      2 rho fixed bin (21);				/* rho of result */


dcl padskip fixed bin(21),				/* -=skip, +=pad on this dimension, has to be multiplied
						   by times reduction of rhos to the right. */
    prodp pointer,					/* -> value bead whose rho has to get times-reduced */
    pre_not_post bit(1),				/* "1"b pre-pad or skip, "0"b post-pad or skip */
    take_amt fixed bin(21),				/* number of things to take on this dimension */
    j fixed bin;

	/* bunch of stupid declarations needed because PL/I does not allow substr on arrays as well as strings */

dcl numeric_data_for_take(orders(cur_rho).take_amount) float aligned based,
    numeric_data_for_pre_pad(orders(cur_rho).pre_skip_or_pad) float aligned based,
    numeric_data_for_post_pad(orders(cur_rho).post_skip_or_pad) float aligned based;

/* include files */

%include apl_number_data;
%include apl_bead_format;
%include apl_value_bead;
%include apl_operators_argument;
%include apl_ws_info;

/* program */

apl_take_: entry(operators_argument);

	take_not_drop = "1"b;
	go to join;

apl_drop_: entry(operators_argument);

	take_not_drop = "0"b;
join:


/* pick up pointers to args, set variables in auto, and check types */


	left_vb = operands(1).value;
	left = left_vb -> value_bead.data_pointer;
	if left_vb -> value_bead.rhorho >= 2
		then go to rank_error_left;	/* left arg is vector (or scalar coerced to vector ) */

	right_vb = operands(2).value;
	rhorho = right_vb -> value_bead.rhorho;
	right = right_vb -> value_bead.data_pointer;

	if right_vb -> value_bead.data_type.character_value then characters = "1"b;
	else characters = "0"b;

	if left_vb -> value_bead.data_type.numeric_value then;		/* left arg must be number */
	else go to domain_error_left;

/* find which case it is */

	if left_vb -> value_bead.total_data_elements = 1
	then if rhorho = 0
	     then case = 1;				/* left scalar, right scalar */
	     else if rhorho > 1
		then go to length_error_left;		/* right arg must be vector */
		else case = 2;
	else if left_vb -> value_bead.total_data_elements ^= rhorho
	     then go to length_error_left;
	     else case = 3;				/* left vector (general case) */

	go to arrow_op (case);			/* dispatch */

arrow_op (1):
/* case of vector, but right arg is scalar so coerce it to a vector */

	if operands(2).on_stack		/* if not on stack, will work. but if on stack need room for rho */
	then if characters
	     then do;
		     special_character = right -> character_datum(0);
		     right = addr(special_character);
		end;
	     else do;			/* numeric scalar */
		     special_number = right -> numeric_datum(0);
		     right = addr(special_number);
		end;

						/* pretend right arg was really a vector */

/* vector case - left arg is of length 1 and right arg is vector or scalar
   this is handled as a seperate case so that code can be used which compiles into
   EIS instructions, making the vector case (most used) much faster than the general case */


/* first get a copy of left arg as an integer in the variable 'fixnum' */

arrow_op (2):
	     if left_vb -> value_bead.data_type.integral_value then fixnum = fixed(left -> numeric_datum(0));
	     else do;
		float_temp = floor(left -> numeric_datum(0) + 0.5);
		if abs(float_temp - left -> numeric_datum(0)) > integer_fuzz
				then go to domain_error_left;	/* barf if not integer */
		if abs(float_temp) >= 1e21b then go to domain_error_left;
		fixnum = fixed(float_temp, 21);
		end;

/* compute size of result */

	     right_rho = right_vb -> value_bead.total_data_elements;
	     data_elements = abs(fixnum);
	     if ^take_not_drop then do;
		data_elements = right_rho - data_elements;	/* ssq for drop */
		if data_elements < 0 then data_elements = 0;		/* if dropping all, produce empty */
		end;

/* if left opnd is on stack, flush it now, leaving just right opnd or nothing */

	     if operands(1).on_stack then value_stack_ptr = left_vb;

/* Allocate result value_bead. Result can overlay right operand. */

	     if operators_argument.operands (2).on_stack	/* right arg on stack */
	     then ws_info.value_stack_ptr = right_vb;	/* pop it & overlay */

	     number_of_dimensions = 1;
	     n_words = size (value_bead);
	     if characters then n_words = n_words + size (character_string_overlay);
	     else n_words = n_words + size (numeric_datum) + 1;
	     result_vb = apl_push_stack_ (n_words);
	     string(result_vb -> value_bead.type) = string(right_vb -> value_bead.type);
	     result_vb -> value_bead.rhorho = number_of_dimensions;
	     result = addrel (result_vb, size (value_bead));
	     if ^ characters then if substr(rel(result), 18, 1) then result = addrel(result, 1);
	     result_vb -> value_bead.data_pointer = result;

/* now set up rho of result -- since rho of right opnd is saved in right_rho, is OK to overlay */

	     result_vb -> value_bead.rho(1) = data_elements;
	     result_vb -> value_bead.total_data_elements = data_elements;
	     if data_elements = 0 then go to exit;		/* there is nothing to move in */

/* now do the actual operation for take or drop in the scalar,vector case */

	     if fixnum > 0 
	        then if take_not_drop			/* TAKE */
		then if result ^= right 		/* not overlay, must move data in */
		   then if characters
		      then result -> character_string_overlay = right -> character_string_overlay_right;
						/* truncates or pads automatically */
		   else if data_elements <= right_rho
		      then result -> numeric_data(*) = right -> numeric_data(*);	/* move & truncate */
		   else do;
		      if right_rho > 0 then			/* avoid EIS bug */
		      result -> numeric_datum_right(*) = right -> numeric_datum_right(*);	/* move... */
pos_take_num_pad:	      do i = right_rho by 1 while (i <= data_elements);			/* then pad */
			result -> numeric_datum(i) = 0e0;
			end;
		      end;
		else if data_elements > right_rho	/* overlaying, the data is already there so just pad if necc. */
		   then if characters
		      then substr(result -> character_string_overlay, right_rho+1, data_elements-right_rho) = "";
		   else go to pos_take_num_pad;
		else;

	        else		/* DROP */
		if characters then result -> character_string_overlay =
				substr(right -> character_string_overlay_right, fixnum+1, right_rho-fixnum);
		else result -> numeric_data(*) =
			addr(right -> numeric_datum(fixnum)) -> numeric_data(*);


	      else 		/* fixnum < 0 */
	        if take_not_drop			/* TAKE */
		then if -fixnum <= right_rho		/* if no padding required */
		   then if characters 
		      then result -> character_string_overlay =
			substr(right -> character_string_overlay_right, right_rho+fixnum+1, data_elements);
		   else result -> numeric_data(*) =
			addr(right -> numeric_datum(right_rho+fixnum)) -> numeric_data(*);
		else 					/* padding required - is MRL so use do loop to move */
		   if characters then do;
		     do i = data_elements-1 by -1 to -fixnum-right_rho;	/* move chars up to make room for pad */
			result -> character_datum(i) = right -> character_datum(i+fixnum+right_rho);
			end;
		     substr(result -> character_string_overlay, 1, -fixnum-right_rho) = "";	/* then pad */
		     end;
		  else do;
		     do i = data_elements-1 by -1 to -fixnum-right_rho;	/* move numbers up to make room for pad */
			result -> numeric_datum(i) = right -> numeric_datum(i+fixnum+right_rho);
			end;
		     do i = i by -1 to 0;
			result -> numeric_datum(i) = 0e0;		/* then pad */
			end;
		     end;
		else			/* DROP, with fixnum < 0 */
		   if right_vb ^= result	/* if not yet copied in, copy it in */
		      then if characters then result -> character_string_overlay = right -> character_string_overlay;
		      else result -> numeric_data(*) = right -> numeric_data(*);
		    else;			/* already copied in, just mung vb.  but that's already been done */

	        go to exit;


/*
 * left opnd has more than one element, this is the general (array) case
 */
arrow_op (3):

/* allocate space for array of orders to be executed later,
   and for result value_bead header */

	     n_words = size (orders);
	     orders_ptr = apl_push_stack_ (n_words);

/* fill orders from left operand */

	     do i = rhorho by -1 while (i > 0);
		if left_vb -> value_bead.integral_value then float_temp = left -> numeric_datum(i-1);
		else do;
		   float_temp = floor(left -> numeric_datum(i-1) + 0.5);
		   if abs(float_temp - left -> numeric_datum(i-1)) > integer_fuzz then go to domain_error_left;	/* check for integer */
		   end;
		if abs(float_temp) >= 1e21b then go to domain_error_left;
		fixnum = fixed(float_temp, 21);

		if take_not_drop
		then do;
		   if fixnum >= 0
		      then do;
			pre_not_post = "0"b;
			padskip = fixnum - right_vb -> value_bead.rho(i);	/* - => skip, + => pad */
			if padskip <= 0 then take_amt = fixnum;
			else take_amt = right_vb -> value_bead.rho(i);
			end;
		      else do;	/* fixnum < 0 */
			pre_not_post = "1"b;
			padskip = -fixnum - right_vb -> value_bead.rho(i);	/* - => skip, + => pad */
			if padskip < 0 then take_amt = -fixnum;
			else take_amt = right_vb -> value_bead.rho(i);
			end;


		   orders(i).take_amount = take_amt;
		   orders (i).rho = abs (fixnum);
		   end;

		else do;	/* DROP */
/*			padskip = -min(abs(fixnum), right_vb -> value_bead.rho(i));			*/
					/* - => skip, amount to be dropped but not more than there is */


			/* due to bad code, the following statement is substituted instead */

			if abs(fixnum) < right_vb -> value_bead.rho(i) then padskip = -abs(fixnum);
			else padskip = - right_vb -> value_bead.rho(i);


			take_amt = right_vb -> value_bead.rho(i) + padskip;
			pre_not_post = (fixnum >= 0);

			orders (i).rho, orders (i).take_amount = take_amt;
			end;


		if padskip < 0		/* compute amount to pad or skip */
		then do j = i by 1 while (j < rhorho);
			padskip = padskip * right_vb -> value_bead.rho(j+1);
		     end;
		else do j = i by 1 while (j < rhorho);
			padskip = padskip * orders (j + 1).rho;
		     end;

		if pre_not_post then do;
		   orders(i).pre_skip_or_pad = padskip;
		   orders(i).post_skip_or_pad = 0;
		   end;
		else do;
		   orders(i).pre_skip_or_pad = 0;
		   orders(i).post_skip_or_pad = padskip;
		   end;

		end;

/* now fill the rest of the result value bead header (rho was just computed) */

	     data_elements = 1;
	     do j = 0 by 1 while (j < rhorho);
	          data_elements = data_elements * orders (j+1).rho;
	     end;

/* allocate space for the result value bead */

	     number_of_dimensions = rhorho;
	     n_words = size (value_bead);

	     if characters
	     then n_words = n_words + size (character_string_overlay);
	     else n_words = n_words + size (numeric_datum) + 1;
	     result_vb = apl_push_stack_ (n_words);

	     string(result_vb -> value_bead.type) = string(right_vb -> value_bead.type);
	     result_vb -> value_bead.rhorho = rhorho;
	     result_vb -> value_bead.total_data_elements = data_elements;
	     do j = 0 by 1 while (j < rhorho);
		result_vb -> value_bead.rho (j + 1) = orders (j + 1).rho;
	     end;

	     result = addrel (result_vb, size (value_bead));
	     if ^characters
	     then if substr (rel (result), 18, 1)
		then result = addrel (result, 1);

	     result_vb -> value_bead.data_pointer = result;

/* proceed to compute the result by following the orders */

	     cur_in_pos, cur_out_pos = 0;
	     cur_rho = 1;
	     orders(1).repeat_count = 1;
enter_new_rho:
continue_this_rho:

	     /* do any pre padding or skipping */

	     if orders(cur_rho).pre_skip_or_pad < 0 then cur_in_pos = cur_in_pos + 
		(-orders(cur_rho).pre_skip_or_pad);
	     else if orders(cur_rho).pre_skip_or_pad > 0 then do;
	       if characters then
		substr(result -> character_string_overlay, cur_out_pos + 1, orders(cur_rho).pre_skip_or_pad) = "";
/*		else addr(result -> numeric_datum(cur_out_pos)) -> numeric_data_for_pre_pad = 0.0e0;	*/

			/* due to poor code for the preceding statement, the following has been substitued */

		else do j = 0 by 1 while (j < orders(cur_rho).pre_skip_or_pad);
		        result -> numeric_datum(cur_out_pos + j) = 0.0e0;
		        end;

		cur_out_pos = cur_out_pos + orders(cur_rho).pre_skip_or_pad;
		end;

	     /* take */

	     if cur_rho = rhorho
	     then do;
	        if characters
	        then substr(result -> character_string_overlay, cur_out_pos+1, orders(cur_rho).take_amount) =
		      substr(right -> character_string_overlay, cur_in_pos+1, orders(cur_rho).take_amount);
	        else addr(result -> numeric_datum(cur_out_pos)) -> numeric_data_for_take =
		    addr(right -> numeric_datum(cur_in_pos)) -> numeric_data_for_take;
	        cur_out_pos = cur_out_pos + orders(cur_rho).take_amount;
	        cur_in_pos = cur_in_pos + orders(cur_rho).take_amount;
	        end;

	     else do;	/* take from next dimension to the right */
		cur_rho = cur_rho + 1;
		orders(cur_rho).repeat_count = orders(cur_rho-1).take_amount;
		go to enter_new_rho;
		end;

leave_old_rho:
		/* do any post padding or skipping */

	if orders(cur_rho).post_skip_or_pad < 0 
	then cur_in_pos = cur_in_pos + (-orders(cur_rho).post_skip_or_pad);
	else if orders(cur_rho).post_skip_or_pad > 0
	     then do;
		     if characters
		     then substr (result -> character_string_overlay, cur_out_pos + 1, orders(cur_rho).post_skip_or_pad) = "";
/*		     else addr(result -> numeric_datum(cur_out_pos)) -> numeric_data_for_post_pad = 0.0e0;	*/

		     /* due to poor code generated for the preceding statement, the following has been substituted */

		     else do j = 0 by 1 while (j < orders(cur_rho).post_skip_or_pad);
			     result -> numeric_datum(cur_out_pos + j) = 0.0e0;
			end;

		     cur_out_pos = cur_out_pos + orders(cur_rho).post_skip_or_pad;
		end;

	orders(cur_rho).repeat_count = orders(cur_rho).repeat_count - 1;
	if orders(cur_rho).repeat_count > 0 then go to continue_this_rho;

		/* done with this rho, move left to preceding one */

	cur_rho = cur_rho-1;
	if cur_rho ^= 0 then go to leave_old_rho;

/* all done, move result down */

	if operands(2).on_stack then value_stack_ptr = right_vb;
	else if operands(1).on_stack then value_stack_ptr = left_vb;
	else value_stack_ptr = orders_ptr;

	number_of_dimensions = rhorho;
	n_words = size (value_bead);
	if characters then n_words = n_words + size(character_string_overlay);
	else n_words = n_words + (1+size(numeric_data));
	left_vb = apl_push_stack_ (n_words);		/* result = old posn on stack, left = new posn on stack */

	number_of_dimensions = rhorho;
	n_words = size (value_bead);		/* move bead header with overlay */
	left_vb -> Some_Words = result_vb -> Some_Words;

	left = addr(left_vb -> value_bead.rho(rhorho+1));	/* set up address of data */
	if ^ characters then if substr(rel(left), 18, 1) then left = addrel(left, 1);
	left_vb -> value_bead.data_pointer = left;
	if characters then left -> character_string_overlay = result -> character_string_overlay;
	else left -> numeric_data = result -> numeric_data;

	operators_argument.result = left_vb;
	return;

/**** come here to depart ****/

exit:
	operators_argument.result = result_vb;
	return;




/**** errors *****/

rank_error_left:
	operators_argument.error_code = apl_error_table_$rank;
	go to signal_error;

domain_error_left:
	operators_argument.error_code = apl_error_table_$domain;
	go to signal_error;

length_error_left:
	operators_argument.error_code = apl_error_table_$length;
	go to signal_error;

signal_error:
	operators_argument.where_error = operators_argument.where_error + 1;
	return;

%include apl_push_stack_fcn;
end;
