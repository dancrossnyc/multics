/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_decode_:
	procedure (operators_argument);

/*
 * this module implements the APL _| operator
 *
 * written 73.7.31 by DAM
 * Modified 740717 by PG for new value bead dcl & error marker.
 * Modified 760903 by PG to protect result on value stack.
   Modified 770927 by PG to fix bug 250 (scalar_|matrix failed because rhorho of result computed incorrectly).
 */


dcl left_vb pointer,			/* -> value bead for left operand */
    left pointer,				/* -> value array of left operand */
    right_vb pointer,			/* -> value bead for right operand */
    right pointer,				/* -> value array of right operand */
    result_vb pointer,			/* -> value bead on stack in which result is constructed */
    result pointer,				/* -> value array on stack in which result is constructed */
    data_elements fixed bin(21),		/* number of elements in the result */

    left_walk_pos fixed bin(21),		/* position in walking from row to row of left operand */
    left_walk_bump fixed bin(21),		/* increment to left_walk_pos to get to next row */
    right_walk_pos fixed bin(21),		/* position in walking from column to column of right operand */
    right_walk_size fixed bin(21),		/* right_walk_pos is bumped by 1 until it reaches this value */

    add_up float,				/* temporary for adding up one element of the result */
    left_pos fixed bin(21),			/* position of current element in current row of left operand */
    left_inc fixed bin(21),			/* amount to bump left_pos to get to next element, same row */
    right_pos fixed bin(21),			/* position of current element in current column of right operand */
    right_inc fixed bin(21),			/* amount to bump right_pos by to get next element, same column */
    add_up_length fixed bin(21),		/* length of row/column which is added up */
    result_pos fixed bin(21),			/* position in result of element currently being computed */

    factor float,				/* current power of radix, used in adding_up loop */
    add_up_count fixed bin(21),		/* counter to count number of times around adding_up loop */

    n_words fixed bin (19),			/* number of words of stack space required to hold the result */
    final_result_vb pointer,			/* -> value bead where result is finally put on stack */
    final_result pointer;			/* -> array for ditto */

dcl (i, j) fixed bin;			/* do-loop temporaries */

dcl (addr, addrel, size, rel, substr, string, max) builtin;


%include apl_number_data;
%include apl_operators_argument;
%include apl_value_bead;
%include apl_bead_format;
%include apl_operator_bead;
%include apl_ws_info;

/* pick up pointers to arguments */

	left_vb = operands(1).value;
	left = left_vb -> value_bead.data_pointer;
	if ^left_vb -> value_bead.numeric_value
	then go to domain_error_left;

	right_vb = operands(2).value;
	right = right_vb -> value_bead.data_pointer;
	if ^right_vb -> value_bead.numeric_value
	then go to domain_error_right;

/* determine conformability and set up control variables according to which case */

	if left_vb -> value_bead.total_data_elements = 1 then do;	/* effective scalar */
	   left_walk_bump = 1;
	   left_inc = 0;
	   if right_vb -> value_bead.total_data_elements = 1 then do;	/* effective scalar */
	      add_up_length = 1;
	      right_inc = 0;
	      right_walk_size = 1;
	      end;
	   else do;
	      add_up_length = right_vb -> value_bead.rho(1);
	      right_inc = 1;
	      do i = 2 to right_vb -> value_bead.rhorho;
		right_inc = right_inc * right_vb -> value_bead.rho(i);
		end;
	      right_walk_size = right_inc;
	      end;
	   end;

	else if right_vb -> value_bead.total_data_elements = 1 then do;
	   right_inc = 0;
	   right_walk_size = 1;
	   left_walk_bump = left_vb -> value_bead.rho(left_vb -> value_bead.rhorho);
	   add_up_length = left_walk_bump;
	   left_inc = 1;
	   end;

	else if left_vb -> value_bead.rho(left_vb -> value_bead.rhorho) =
		right_vb -> value_bead.rho(1) then do;
	   left_walk_bump = left_vb -> value_bead.rho(left_vb -> value_bead.rhorho);
	   left_inc = 1;
	   right_inc = 1;
	   do i = 2 to right_vb -> value_bead.rhorho;
	      right_inc = right_inc * right_vb -> value_bead.rho(i);
	      end;
	   right_walk_size = right_inc;
	   add_up_length = left_walk_bump;
	   end;

	else if left_vb -> value_bead.rho(left_vb -> value_bead.rhorho) = 1 then do;
	   right_inc = 1;
	   do i = 2 to right_vb -> value_bead.rhorho;
	      right_inc = right_inc * right_vb -> value_bead.rho(i);
	      end;
	   right_walk_size = right_inc;
	   add_up_length = right_vb -> value_bead.rho(1);
	   left_inc = 0;
	   left_walk_bump = 1;
	   end;

	else if right_vb -> value_bead.rho(1) = 1 then do;
	   left_walk_bump = left_vb -> value_bead.rho(left_vb -> value_bead.rhorho);
	   right_walk_size = right_vb -> value_bead.total_data_elements;
	   left_inc = 1;
	   right_inc = 0;
	   add_up_length = left_walk_bump;
	   end;

	else go to length_error;	/* I guess */

/* compute size of result */

	data_elements = 1;
	if left_vb -> value_bead.total_data_elements ^= 1
	then do i = 1 by 1 while (i < left_vb -> value_bead.rhorho);
	   data_elements = data_elements * left_vb -> value_bead.rho(i);
	   end;

	if right_vb -> value_bead.total_data_elements ^= 1  
	then do i = 2 to right_vb -> value_bead.rhorho;
	   data_elements = data_elements * right_vb -> value_bead.rho(i);
	   end;

/* push result onto stack */

	number_of_dimensions = max (left_vb -> value_bead.rhorho - 1, 0) + max (right_vb -> value_bead.rhorho - 1, 0);
	n_words = size (value_bead) + size (numeric_datum) + 1;
	result_vb = apl_push_stack_ (n_words);
	string(result_vb -> value_bead.type) = string(left_vb -> value_bead.type) &
		string(right_vb -> value_bead.type) & integral_value_type;
	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = number_of_dimensions;
	result = addr(result_vb -> value_bead.rho(result_vb -> value_bead.rhorho+1));
	if substr(rel(result), 18, 1) then result = addrel(result, 1);
	result_vb -> value_bead.data_pointer = result;

/* construct rho of result as concatenation of rhos of operands */

	do i = 1 by 1 while (i < left_vb -> value_bead.rhorho);
	   result_vb -> value_bead.rho(i) = left_vb -> value_bead.rho(i);
	   end;
	do j = i by 1 while (j <= result_vb -> value_bead.rhorho);
	   result_vb -> value_bead.rho(j) = right_vb -> value_bead.rho(j-i+2);
	   end;

/* do it */

	result_pos = 0;
	do left_walk_pos = 0 by left_walk_bump while(left_walk_pos < left_vb -> value_bead.total_data_elements);

	   do right_walk_pos = 0 by 1 while (right_walk_pos < right_walk_size);

	      add_up = 0;
	      factor = 1;
	      left_pos = left_walk_pos + add_up_length*left_inc;	/* work from right to left */
	      right_pos = right_walk_pos + add_up_length*right_inc;	/* .. */
	      do add_up_count = 0 by 1 while(add_up_count < add_up_length);
		right_pos = right_pos - right_inc;
		add_up = add_up + factor * right -> numeric_datum(right_pos);
		left_pos = left_pos - left_inc;
		factor = factor * left -> numeric_datum(left_pos);
		end;

	      result -> numeric_datum(result_pos) = add_up;
	      result_pos = result_pos + 1;

	      end;
	   end;

	if result_pos = 0 then result -> numeric_datum(0) = 0;	/* special kludge for (iota 0) _| iota 0 */

/* copy result down on stack in the usual way */

	if operands(2).on_stack then value_stack_ptr = right_vb;
	else if operands(1).on_stack then value_stack_ptr = left_vb;
	else do;		/* result is already in right place */
	   operators_argument.result = result_vb;
	   return;
	   end;

	/* n_words is already set */

	final_result_vb = apl_push_stack_ (n_words);
	string(final_result_vb -> value_bead.type) = string(result_vb -> value_bead.type);
	final_result_vb -> value_bead.total_data_elements = result_vb -> value_bead.total_data_elements;
	final_result_vb -> value_bead.rhorho = result_vb -> value_bead.rhorho;
	if result_vb -> value_bead.rhorho > 0		/* zero-length arrays are illegal in PL/I */
	then final_result_vb -> value_bead.rho (*) = result_vb -> value_bead.rho (*);

	final_result = addr(final_result_vb -> value_bead.rho(final_result_vb -> value_bead.rhorho+1));
	if substr(rel(final_result), 18, 1) then final_result = addrel(final_result, 1);
	final_result_vb -> value_bead.data_pointer = final_result;

	final_result -> numeric_datum(*) = result -> numeric_datum(*);

	operators_argument.result = final_result_vb;
	return;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 2;

domain_error_left:
	operators_argument.where_error = operators_argument.where_error + 1;
	operators_argument.error_code = apl_error_table_$domain;
	return;

length_error:
	operators_argument.error_code = apl_error_table_$length;
	return;


dcl (apl_error_table_$domain, apl_error_table_$length) fixed bin(35) external;

%include apl_push_stack_fcn;

end /* apl_decode_ */ ;
