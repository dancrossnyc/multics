/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style3 */
apl_command_:
     proc (line, r_paren_pos, exit_flag);

/*
 * this module processes commands for APL.
 *
 * written 7/25/73 by DAM
 * Modified 1/7/74 by PG to fix )WIDTH to tell dim.
   Modified 740405 by PG to fix )COPY, flush )MAIL
   Modified 741009 by PG to add )V1LIB, change )HELP for installation.
   Modified 741017 by PG to add )TABS.
   Modified 770112 by PG to add )V1DROP, delete )WORK, fix )HELP, and fix )TABS.
   Modified 770303 by PG to add )ERRS, delete )BRIEF and )LONG (bug 265), and fix locks (bug 276).
   Modified 780207 by PG to fix 309, add dummy )RESET, and do a little cleaning up of the source
   Modified 780211 by PG to add $from_editor entrypoint.
   Modified 780512 by William York to change calling sequences for the
	vars, fns, and grps commands.
   Modified 790213 by PG to fix 367 (copy command could not handle wsid's with locks).
   Modified 790720 by PG to fix 404 (the last change fixed locks for copy, but broke them for everything else!),
	and to switch to iox_.
   Modified 791219 by PG to add )VERSION and )SINL.
   Modified 800131 by PG to add )?
   Modified 811210 by TO to add )EFNS
 */

/* parameters */

declare	line		char (*) aligned parameter,	/* the command string */
	r_paren_pos	fixed bin (21) parameter,	/* index in line of the ")" that begins the command */
	exit_flag		fixed bin (35) parameter;	/* return code to caller */

/* automatic */

declare	amount_to_pass	fixed bin (21),
	called_from_editor	bit (1) aligned,
	cur_pos		fixed bin (21),
	his_password	char (8) aligned,
	list_count	fixed bin,
	list_element	(100) char (100),		/* TEMPORARY KLUDGE - interface will probably be changed */
	lock_len		fixed bin (21),
	lock_ptr		ptr,
	tok_len		fixed bin (21),
	tok_type		fixed bin,
	wsid_len		fixed bin (21),
	wsid_ptr		ptr,
	cmd4		char (4) aligned,
	cmd_number	fixed bin,
	old_flag		bit (1) aligned,
	on_off		bit (1) aligned,
	letter		char (1) aligned,
	command_line	char (132),
	send_type		bit (1) aligned,		/* indicates whether command is MSG on|off or to be sent */
	code		fixed bin (35),
	1 ready_mode	aligned,
	  2 ready_state	bit (1) unaligned,
	  2 pad		bit (35) unaligned;

declare	ext_fcn_class_code	fixed bin,
	old_tab_width	fixed bin,
	tab_width		fixed bin,
	apl_number	float;

/* based */

declare	string_to_pass	char (amount_to_pass) unaligned based (addr (line_array (cur_pos))),
	wsid_string	char (wsid_len) unaligned based (wsid_ptr),
	lock_string	char (lock_len) unaligned based (lock_ptr),
	line_array	(length (line)) char (1) unaligned based (addr (line));

/* builtin */

declare	(addr, float, hbound, lbound, length, min, substr)
			builtin;

/* entries */

declare	apl_flush_buffer_nl_
			entry (),
	apl_print_string_	entry (char (*)),
	apl_read_password_	entry (char (8) aligned),
	apl_external_fcn_defn_
			entry (char (*), fixed bin),
	iox_$modes	entry (ptr, char (*), char (*), fixed bin (35)),
	iox_$control	entry (ptr, char (*), ptr, fixed bin (35)),
	convert_binary_integer_$decimal_string
			entry (fixed bin (35)) returns (char (13) varying),
	apl_error_$huh	entry (fixed bin (35)),
	ioa_$ioa_switch	entry options (variable),
	who		entry options (variable),
	help		entry options (variable),
	cu_$ready_proc	entry (1 aligned, 2 bit (1) unaligned, 2 bit (35) unaligned),
	cu_$cp		entry (pointer, fixed bin (21), fixed bin (35)),
	(apl_vars_command_, apl_fns_command_, apl_efns_command_, apl_grps_command_)
			entry (char (1) aligned, bit (1) aligned),
	apl_clear_workspace_
			entry,
	(apl_si_command_, apl_siv_command_)
			entry,
	(apl_save_command_, apl_load_command_, apl_wsid_command_)
			entry (char (*), char (*), fixed bin (35)),
	apl_directory_commands_
			entry (char (4) aligned, char (*)),
	(apl_copy_command_, apl_v1_copy_command_)
			entry (char (*), char (*), bit (1) aligned, char (*) dim (*), fixed bin, fixed bin (35)),
	apl_erase_command_	entry (fixed bin, dim (*) char (*)),
	apl_group_command_	entry (fixed bin, dim (*) char (*)),
	apl_grp_command_	entry (char (*));

/* external static */

declare	(
	apl_error_table_$return_from_apl,
	apl_error_table_$ws_cleared,
	apl_error_table_$ws_loaded
	)		fixed bin (35) external,
	apl_static_$apl_output
			ptr external static,
	apl_static_$version_number
			char (5) external static;

/* internal static */

/* table of commands, used to dispatch through cmd (): tv */

declare	cmd_table		(0:48) char (8) aligned static init ("r",
						/* 0 */
			"q",			/* 1 */
			"quit",			/* 2 */
			"e",			/* 3 */
			"errs",			/* 4 */
			"reset",			/* 5 */
			"debug",			/* 6 */
			"vars",			/* 7 */
			"grps",			/* 8 */
			"fns",			/* 9 */
			"digits",			/* 10 */
			"origin",			/* 11 */
			"width",			/* 12 */
			"clear",			/* 13 */
			"siv",			/* 14 */
			"si",			/* 15 */
			"save",			/* 16 */
			"load",			/* 17 */
			"wsid",			/* 18 */
			"check",			/* 19 */
			"help",			/* 20 */
			"huh",			/* 21 */
			"off",			/* 22 */
			"continue",		/* 23 */
			"exec",			/* 24 */
			"erase",			/* 25 */
			"copy",			/* 26 */
			"pcopy",			/* 27 */
			"group",			/* 28 */
			"grp",			/* 29 */
			"msg",			/* 30 */
			"lib",			/* 31 */
			"zfn",			/* 32 */
			"mfn",			/* 33 */
			"dfn",			/* 34 */
			"libd",			/* 35 */
			"drop",			/* 36 */
			"ports",			/* 37 */
			"meter",			/* 38 */
			"v1drop",			/* 39 */
			"symbols",		/* 40 */
			"v1copy",			/* 41 */
			"v1pcopy",		/* 42 */
			"v1lib",			/* 43 */
			"tabs",			/* 44 */
			"version",		/* 45 */
			"sinl",			/* 46 */
			"?",			/* 47 */
			"efns");			/* 48 */

declare	command_OK_in_editor
			(0:48) bit (1) unaligned internal static initial ("1"b,
						/* 0 */
			(2) (1)"0"b,		/* 1-2 */
			(2) (1)"1"b,		/* 3-4 */
			"0"b,			/* 5 */
			(7) (1)"1"b,		/* 6-12 */
			"0"b,			/* 13 */
			(2) (1)"1"b,		/* 14-15 */
			(2) (1)"0"b,		/* 16-17 */
			(4) (1)"1"b,		/* 18-21 */
			(2) (1)"0"b,		/* 22-23 */
			"1"b,			/* 24 */
			(2) (1)"0"b,		/* 25-26 */
			(14) (1)"1"b,		/* 27-40 */
			"0"b,			/* 41 */
			(7) (1)"1"b);		/* 42-48 */

/* include files */

%include apl_characters;
%include apl_scan_info;
%include apl_ws_info;
%include apl_number_data;

/* program */

	called_from_editor = "0"b;			/* main entry */
	go to join;

apl_command_$from_editor:
     entry (line, r_paren_pos, exit_flag);

	called_from_editor = "1"b;

join:
	exit_flag = 0;
	cur_pos = r_paren_pos + 1;

	call scan;

/* We don't care about the token type */

	cmd4 = substr (line, cur_pos, min (tok_len, 4));	/* expand or truncate to 4 chars for lookup */
	do cmd_number = lbound (cmd_table, 1) to hbound (cmd_table, 1)
	     while (cmd4 ^= substr (cmd_table (cmd_number), 1, 4));
	end;

	if cmd_number <= hbound (cmd_table, 1)
	then if (tok_len > 4 & substr (line, cur_pos, tok_len) = cmd_table (cmd_number)) | (tok_len <= 4)
	     then do;
		     cur_pos = cur_pos + tok_len;	/* skip over command name */
		     if called_from_editor & ^command_OK_in_editor (cmd_number)
		     then do;
			     call ioa_$ioa_switch (apl_static_$apl_output, "not while in editor");
			     return;
			end;

		     go to cmd (cmd_number);
		end;

incorrect_command:
	call ioa_$ioa_switch (apl_static_$apl_output, "incorrect command");
	return;

cmd (0):						/* )R causes ready message */
	ready_mode.ready_state = "1"b;
	call cu_$ready_proc (ready_mode);
	return;


cmd (22):						/* )OFF [HOLD] [: [SIGNOFF_LOCK]] */
	call off_command_parse;

cmd (1):						/* )Q */
cmd (2):						/* )QUIT */
	exit_flag = apl_error_table_$return_from_apl;
	return;

cmd (23):						/* )CONTINUE [HOLD] [:SIGNOFF_LOCK] */
	call off_command_parse;
	call apl_save_command_ ("continue", (ws_info.lock), code);
	if code = 0
	then go to cmd (1);				/* if saved successfully, do )Q */
	ws_info.off_hold = "0"b;			/* if error, clean up after ourselves */
	ws_info.signoff_lock = "";			/* .. */
	return;

cmd (3):						/* )E    command_line */
cmd (24):						/* )EXEC command_line */
	if ws_info.restrict_exec_command
	then go to incorrect_command;
	substr (line, 1, cur_pos - 1) = "";		/* blank out beginning of line, before actual command */
						/* (caveat vocator) */
	ws_info.transparent_to_signals = "1"b;		/* while out in Multics command system, turn off our */
	call cu_$cp (addr (line), length (line), (0));	/* condition handler.  The effect is intended to */
	ws_info.transparent_to_signals = "0"b;		/* be as if it was in a separate process */
	return;

cmd (45):						/* )VERSION */
	call scan;
	if tok_type ^= NO_TOKEN
	then go to incorrect_command;

	call ioa_$ioa_switch (apl_static_$apl_output, "is ^a", apl_static_$version_number);
	return;

cmd (47):						/* Query command (?) */
	call scan;
	if tok_type ^= NO_TOKEN
	then go to incorrect_command;

	do cmd_number = lbound (cmd_table, 1) to hbound (cmd_table, 1);
	     call apl_print_string_ ((cmd_table (cmd_number)));
	end;
	call apl_flush_buffer_nl_;
	return;

cmd (37):						/* )PORTS */
	call who;
	return;

cmd (30):						/* )MSG */
	if ws_info.restrict_msg_command
	then go to incorrect_command;

	call scan;

	send_type = "0"b;

	if tok_type = NO_TOKEN			/* no argument */
	then on_off = "1"b;
	else do;
		if tok_type = NAME_TOKEN
		then if substr (line, cur_pos, tok_len) = "on"
		     then on_off = "1"b;
		     else if substr (line, cur_pos, tok_len) = "off"
		     then on_off = "0"b;
		     else send_type = "1"b;

		if ^send_type
		then do;				/* allow only one argument */

			cur_pos = cur_pos + tok_len;
			call scan;
			if tok_type ^= NO_TOKEN
			then go to incorrect_command;
		     end;
	     end;

	if ^send_type
	then do;
		if on_off
		then command_line = "immediate_messages";
		else command_line = "defer_messages";
	     end;
	else command_line = "send_message " || substr (line, cur_pos);

	call cu_$cp (addr (command_line), length (command_line), code);
	if code ^= 0
	then go to incorrect_command;

	return;

cmd (4):						/* )ERRS */
	call scan;
	if tok_type = NO_TOKEN
	then do;
		call ioa_$ioa_switch (apl_static_$apl_output, "is ^[long^;brief^]", ws_info.long_error_mode);
		return;
	     end;
	else if tok_type ^= NAME_TOKEN
	then go to incorrect_command;

	old_flag = ws_info.long_error_mode;

	if substr (line, cur_pos, tok_len) = "brief"
	then on_off = "0"b;
	else if substr (line, cur_pos, tok_len) = "long"
	then on_off = "1"b;
	else go to incorrect_command;

	cur_pos = cur_pos + tok_len;
	call scan;
	if tok_type ^= NO_TOKEN
	then go to incorrect_command;

	call ioa_$ioa_switch (apl_static_$apl_output, "was ^[long^;brief^]", old_flag);
	ws_info.long_error_mode = on_off;
	return;

cmd (6):						/* )DEBUG */
	if ws_info.restrict_debug_command
	then go to incorrect_command;
	call on_off_parse (ws_info.debug_mode);
	return;

cmd (38):						/* )METER */
	call on_off_parse (ws_info.meter_mode);
	return;

cmd (19):						/* )CHECK */
	call on_off_parse (ws_info.compatibility_check_mode);
	return;

cmd (44):						/* )TABS N_ */
	call iox_$control (apl_static_$apl_output, "get_tab_width", addr (old_tab_width), code);
						/* get old width */
	call scan;				/* find argument */

	if tok_type = NO_TOKEN
	then do;					/* no arg given */
		call ioa_$ioa_switch (apl_static_$apl_output, "is ^d", old_tab_width);
		return;
	     end;
	else if tok_type ^= INTEGER_TOKEN
	then go to incorrect_command;

	tab_width = apl_number;			/* remember new value */
	call iox_$control (apl_static_$apl_output, "set_tab_width", addr (tab_width), code);
	if code ^= 0
	then go to incorrect_command;			/* DIM didn't like value... */

	call ioa_$ioa_switch (apl_static_$apl_output, "was ^d", old_tab_width);
	return;

/* commands for defining external functions */

cmd (32):						/* )ZFN */
	ext_fcn_class_code = 2;
	go to external_function_command;

cmd (33):						/* )MFN */
	ext_fcn_class_code = 3;
	go to external_function_command;

cmd (34):						/* )DFN */
	ext_fcn_class_code = 4;
external_function_command:
	if ws_info.restrict_external_functions
	then go to incorrect_command;

	call scan;				/* skip blanks before arg */

	if tok_type = NO_TOKEN
	then go to incorrect_command;
	amount_to_pass = length (line) - cur_pos + 1 - 1; /* the +1-1 is to strip off newline.  This subroutine does the real work */
	call apl_external_fcn_defn_ (string_to_pass, ext_fcn_class_code);
	return;

cmd (21):						/* )HUH - reprint last error in long form */
	if ws_info.last_error_code = 0
	then call ioa_$ioa_switch (apl_static_$apl_output, "no previous error");
	else call apl_error_$huh (ws_info.last_error_code);
	return;

/* The following commands list the 3 flavors of workspace names in the same fashion. */

cmd (7):						/* )VARS */
cmd (8):						/* )GRPS */
cmd (9):						/* )FNS */
cmd (48):						/* )EFNS */
	call scan;				/* look for optional argument */
	if tok_type = NO_TOKEN
	then letter = " ";
	else if tok_type = NAME_TOKEN
	then if tok_len = 1
	     then letter = substr (line, cur_pos, 1);
	     else go to incorrect_command;
	else go to incorrect_command;

	if cmd_number = 7
	then call apl_vars_command_ (letter, called_from_editor);
	else if cmd_number = 9
	then call apl_fns_command_ (letter, called_from_editor);
	else if cmd_number = 48
	then call apl_efns_command_ (letter, called_from_editor);
	else call apl_grps_command_ (letter, called_from_editor);
	return;

/* The following commands, if given with no argument, print the appropriate value,
   else they attempt to change the ws parameter to that value */

cmd (10):						/* )DIGITS */
	call number_command (ws_info.digits, 1, 19);
	return;

cmd (11):						/* )ORIGIN */
	call number_command (ws_info.index_origin, 0, 1);
	ws_info.float_index_origin = float (ws_info.index_origin);
						/* in case has changed, update for iota */
	return;


cmd (12):						/* )WIDTH */
	call number_command (ws_info.width, 30, 390);
	call iox_$modes (apl_static_$apl_output, "ll" || convert_binary_integer_$decimal_string ((ws_info.width)), "", code)
	     ;
	return;

cmd (40):						/* )SYMBOLS */
	call number_command (ws_info.number_of_symbols, 0, 0);
	return;

/* The following commands all deal with the workspace itself in some way. */

cmd (5):						/* )RESET */
	call ioa_$ioa_switch (apl_static_$apl_output, "not implemented");
	return;

cmd (13):						/* )CLEAR */
	call scan;				/* check for argument */
	if tok_type = NO_TOKEN
	then do;					/* normal clear with no argument */
		call apl_clear_workspace_;
		call ioa_$ioa_switch (apl_static_$apl_output, "clear ws");
		exit_flag = apl_error_table_$ws_cleared;
		return;
	     end;
	else go to incorrect_command;

cmd (14):						/* )SIV */
cmd (46):						/* )SINL */
	call apl_siv_command_;
	return;

cmd (15):						/* )SI */
	call apl_si_command_;
	return;


cmd (16):						/* )SAVE */
	if ws_info.restrict_save
	then go to incorrect_command;
	call ws_command (apl_save_command_);
	return;


cmd (17):						/* )LOAD */
	if ws_info.restrict_load
	then go to incorrect_command;
	call ws_command (apl_load_command_);
	if code = 0
	then exit_flag = apl_error_table_$ws_loaded;
	return;


cmd (18):						/* )WSID */
	call ws_command (apl_wsid_command_);
	return;

/* The following commands are somewhat temporary, probably. They are an attempt to
   provide a reasonable user interface. */

cmd (20):						/* )HELP command for getting help I guess */
	tok_len = length (line) - 1;			/* drop trailing NL */
	do cur_pos = cur_pos to tok_len while (substr (line, cur_pos, 1) = " ");
	end;
	if cur_pos > tok_len			/* nothing on line */
	then call help ("apl_help_available");
	else call help (substr (line, cur_pos, tok_len - cur_pos + 1));
	return;

cmd (31):						/* )LIB */
cmd (35):						/* )LIBD is parsed the same way */
cmd (43):						/* )V1LIB */
	call scan;				/* find argument, if any */
	if tok_type = NO_TOKEN
	then amount_to_pass = 0;			/* no arg, pass null string */
	else amount_to_pass = length (line) - cur_pos;	/* pass rest of line, but not newline at end */

	call apl_directory_commands_ (cmd4, string_to_pass);
	return;


cmd (36):						/* )DROP */
cmd (39):						/* )V1DROP */
	call ws_command (drop_command);
	return;

cmd (26):						/* )COPY */
	call copy_command (apl_copy_command_, "0"b);
	return;

cmd (27):						/* )PCOPY */
	call copy_command (apl_copy_command_, "1"b);
	return;

cmd (41):						/* )V1COPY */
	call copy_command (apl_v1_copy_command_, "0"b);
	return;

cmd (42):						/* )V1PCOPY */
	call copy_command (apl_v1_copy_command_, "1"b);
	return;

cmd (25):						/* )ERASE */
	call compile_list;
	call apl_erase_command_ (list_count, list_element);
	return;

cmd (28):						/* )GROUP */
	call compile_list;
	call apl_group_command_ (list_count, list_element);
	return;

cmd (29):						/* )GRP */
	call compile_list;
	if list_count ^= 1
	then go to incorrect_command;
	call apl_grp_command_ (list_element (1));
	return;

/* Internal procedures (in alphabetical order) */

compile_list:
     procedure;

	list_count = 0;

list_loop:
	call scan;

	if tok_type = NO_TOKEN
	then return;

	if tok_type ^= NAME_TOKEN
	then go to incorrect_command;

	list_count = list_count + 1;
	list_element (list_count) = substr (line, cur_pos, tok_len);
	cur_pos = cur_pos + tok_len;
	go to list_loop;

     end compile_list;

drop_command:
     proc (wsid, lock, code);

declare	wsid		char (*) parameter,
	lock		char (*) parameter,
	code		fixed bin (35) parameter;

	if length (lock) ^= 0
	then go to incorrect_command;			/* no lock allowed */
	code = 0;					/* code is not really used */
	call apl_directory_commands_ (cmd4, wsid);
     end;

get_lock:
     proc;

/* this proc is called when type-1 token seen, may be colon */

	if substr (line, cur_pos, 1) ^= ":"
	then go to incorrect_command;

	cur_pos = cur_pos + 1;
	call scan;

	if tok_type = NO_TOKEN			/* colon but no lock = blank lock */
	then do;
		lock_ptr = addr (QSpace);
		lock_len = 1;
		return;
	     end;

	else if tok_type = DELIMITER_TOKEN
	then do;
		if tok_len ^= 1
		then go to incorrect_command;

		if substr (line, cur_pos, 1) ^= QQuadQuote
		then go to incorrect_command;

		cur_pos = cur_pos + 1;

/* get line from user attempting to use print-suppress */

		call apl_read_password_ (his_password);
		if his_password = "*"
		then do;
			lock_len = 1;
			lock_ptr = addr (QSpace);
		     end;
		else do;
			lock_len = length (his_password);
						/* trailing spaces are OK */
			lock_ptr = addr (his_password);
		     end;
	     end;

	else if tok_type ^= NAME_TOKEN
	then go to incorrect_command;

	else do;					/* use just next token after colon as the lock */
		lock_ptr = addr (line_array (cur_pos));
		lock_len = tok_len;
		cur_pos = cur_pos + tok_len;
	     end;

	call scan;				/* check for unwated tokens after lock */
	return;

     end get_lock;

number_command:
     procedure (variable, minimum, maximum);

declare	(variable, minimum, maximum)
			fixed bin parameter,
	n		fixed bin;

	call scan;

	if tok_type = NO_TOKEN			/* no argument, tell what variable is */
	then call ioa_$ioa_switch (apl_static_$apl_output, "is ^d", variable);
	else if minimum = maximum			/* )SYMBOLS escape */
	then go to incorrect_command;			/* can't assign to this one... */
	else if tok_type = INTEGER_TOKEN		/* integer argument */
	then do;
		n = apl_number;
		if n < minimum
		then go to incorrect_command;
		else if n > maximum
		then go to incorrect_command;

		call ioa_$ioa_switch (apl_static_$apl_output, "was ^d", variable);
		variable = n;
	     end;

	else go to incorrect_command;			/* name or floating point cruft */

     end number_command;

off_command_parse:
     procedure;

	call scan;

	if tok_type = NO_TOKEN
	then return;

	if tok_type = NAME_TOKEN
	then if substr (line, cur_pos, tok_len) = "hold"
	     then do;
		     ws_info.off_hold = "1"b;		/* tell apl_subsystem_ to do an off hold */
		     cur_pos = cur_pos + tok_len;
		     call scan;
		end;
	     else go to incorrect_command;

	if tok_type = DELIMITER_TOKEN
	then do;
		call get_lock;

		if lock_len = 1 & lock_string = " "
		then ws_info.signoff_lock = "*";	/* blank lock */
		else ws_info.signoff_lock = lock_string;

		call scan;
	     end;

	if tok_type ^= NO_TOKEN
	then go to incorrect_command;

	return;

     end off_command_parse;

on_off_parse:
     procedure (bv_flag);

/* parameters */

declare	bv_flag		bit (1) unaligned;

/* automatic */

declare	new_flag		bit (1) aligned;

/* program */

	call scan;
	if tok_type = NO_TOKEN
	then do;					/* if no argument, print state */
		call ioa_$ioa_switch (apl_static_$apl_output, "is ^[on^;off^]", bv_flag);
		return;
	     end;
	else if tok_type ^= NAME_TOKEN
	then go to incorrect_command;

	if substr (line, cur_pos, tok_len) = "on"
	then new_flag = "1"b;
	else if substr (line, cur_pos, tok_len) = "off"
	then new_flag = "0"b;
	else go to incorrect_command;

	cur_pos = cur_pos + tok_len;
	call scan;
	if tok_type ^= NO_TOKEN
	then go to incorrect_command;			/* allow only one argument */

	call ioa_$ioa_switch (apl_static_$apl_output, "was ^[on^;off^]", bv_flag);
	bv_flag = new_flag;
	return;

     end on_off_parse;

scan:
     procedure ();					/* lazy programmers... */

	call apl_scan_ (line, cur_pos, cur_pos, tok_len, tok_type, addr (apl_number));

     end scan;

ws_command:
     proc (command);

	copy = "0"b;
	go to it;


copy_command:
     entry (command, protected);
	copy = "1"b;

declare	command		entry options (variable),
	(copy, protected)	bit (1) aligned;

declare	cur_state		fixed bin,
	saw_number	bit (1) aligned,
	last_in_wsid	fixed bin (21),
	start_of_wsid	fixed bin (21);

/* internal static */

declare	new_state		(0:1, 0:5) fixed bin (8) unal internal static initial (3, 0, 1, 2, 2, 3, 3, 0, 3, 2, 2, 3);

/* program */

it:
	lock_ptr = addr (wsid_ptr);			/* avoid uninitialized ptr (to null string) */
	lock_len = 0;				/* if no lock specified, will use null string */
	call scan;

/* Check for optional wsid (and/or lock), and optional arguments for copy */

	saw_number = "0"b;
	last_in_wsid, start_of_wsid = cur_pos;

	if tok_type = INTEGER_TOKEN
	then do;
		saw_number = "1"b;
		last_in_wsid, cur_pos = cur_pos + tok_len;
		call scan;
	     end;

	cur_state = 0;

begin:
	if (tok_type = DELIMITER_TOKEN) & (substr (line, cur_pos, 1) = ":")
	then tok_type = 5;				/* special for colon */

	cur_state = new_state (cur_state, tok_type);
	go to state (cur_state);

state (0):					/* delimiter seen */
	if saw_number
	then if (substr (line, cur_pos, 1) = "<") | (substr (line, cur_pos, 1) = ">")
	     then go to incorrect_command;		/* can't mix lib number and pathname */

state (1):					/* first name seen */
	last_in_wsid, cur_pos = cur_pos + tok_len;
	call scan;
	go to begin;

state (2):					/* error - number seen */
	go to incorrect_command;

state (3):					/* done */
	if tok_type = 5
	then call get_lock;

	wsid_len = last_in_wsid - start_of_wsid;
	wsid_ptr = addr (line_array (start_of_wsid));

	if copy
	then do;
		call compile_list;
		call command (wsid_string, lock_string, protected, list_element, list_count, code);
		return;
	     end;

	if tok_type ^= NO_TOKEN
	then go to incorrect_command;			/* extraneous arguments */

	call command (wsid_string, lock_string, code);

     end /* ws_command */;

     end /* apl_command_ */;
