"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************

" Subroutine called by apl to do a fast iota.
"
"Calling sequence:
"
"	call apl_iota_appendage_ (index_origin, increment, no_of_elements, ptr_to_result_array);
"
"	declare apl_iota_appendage_ entry (float, float, fixed bin, ptr);
"
"	Modified  2 January 1974 by PG to construct backwards iota for big dealer.
"	Modified 740829 by PG to treat index register 3 as an unsigned word offset, thus fixing a bug
"		in which i65536 gave an overflow fault, and i70000 did only last 4 elements!
"
"Calling sequence for backwards iota:
"
"	call apl_iota_appendage_ (index_origin, - step, - no_of_elements, ptr_to_result_array)
"

	name	apl_iota_appendage_
	segdef	apl_iota_appendage_
	equ	index_origin,2
	equ	step,4
	equ	no_of_elements,6
	equ	result_ptr,8
apl_iota_appendage_:
	eppbp	ap|result_ptr,*	get ptr to result array
	eppbp	bp|0,*
	ldq	ap|no_of_elements,*	number of elements to process
	tze	return_iota	no elements to process, return null vector
	tpl	normal_iota	ascending iota.
	lls	36		prepare for negate.
	neg	0		make number_of_elements positive
	als	1		convert to word count
	eax2	0,al		put offset to last word in x2.
	dfld	ap|index_origin,*	index_origin will be assigned to last element.
	eppbb	ap|step,*	get pointer to step (presumed to be negative).
	tra	join_iota		and begin.

normal_iota:
	qls	1		convert to word count
	eax2	0,ql		put offset to last word in x2
	qrl	1		convert back to element number
	lda	0,dl		prepart for conversion to float
	lde	=71b25,du		load e with right magic number
	fad	=0.0,du		convert to float
	eppbb	ap|step,*	get ptr to step between elements
	fsb	=1.0,du		must subtract 1 because want number assigned to last element
	dfmp	bb|0		multiply by step
	dfad	ap|index_origin,*	add index origin

join_iota:
	eax3	0,x2		get number of groups of 4 in result
	anx3	=o777770,du	get rid of those over mod 4 boundary
	tze	do_few		less than 4 elements to process
	anx2	7,du
	epplb	bp|0,x2

many_iota_loop:
	dfst	lb|-2,x3		store into an element
	dfsb	bb|0		reduce by step quantity
	dfst	lb|-4,x3		store into an element
	dfsb	bb|0		reduce by step quantity
	dfst	lb|-6,x3		store into an element
	dfsb	bb|0		reduce by step quantity
	dfst	lb|-8,x3		store into an element
	dfsb	bb|0		reduce by step quantity
	sblx3	8,du		reduce by the 4 elements processed this iteration (unsigned offset!)
	tnz	many_iota_loop	go do 4 more (again, unsigned! (tpnz was wrong!))

do_few:				"less than 4 left to do
	cmpx2	0,du		and out the mod 4 ones
	tze	return_iota	none left to do

few_iota_loop:
	dfst	bp|-2,x2
	dfsb	bb|0
	sbx2	2,du
	tpnz	few_iota_loop

return_iota:
	short_return
	end
