/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_clear_workspace_:
     procedure ();

/*
 * routine to initialize the APL workspace on a )CLEAR command or on entry to the APL subsystem.
 *
 * it assumes that the apl_ws_info structure and the value stack have already been created.
 *
 *
 * written 73.7.31 by DAM
 * modified 8/25/73 by DAM for version 3 workspace format
 * modified July 1974 by GGB to change names of some subroutines called and to call ios_ slightly
 * differently to get width
 * Modified 761005 by PG to use get_line_length_, and to initialize input prompts.
   Modified 790914 by PG to allocate output buffer.
   Modified 791013 by PG to initialize ws_info.tab_width.
 */


/* automatic */

declare	1 initial_latent_expression
			aligned,			/* value bead for '', used to initialize QuadLX */
	  2 type		bit (18) unaligned,		/* I can't use like value_bead because I'm programming in this */
	  2 size		bit (18) unaligned,		/* crock language where automatic structures can't have */
	  2 reference_count fixed bin (29),		/* refer options in them. */
	  2 total_data_elements
			fixed bin (21),
	  2 rhorho	fixed bin,
	  2 data_pointer	unaligned pointer,
	  2 rho		(1) fixed bin (21);

declare	code		fixed bin (35);

/* builtins */

declare	(addr, addrel, null, size, string)
			builtin;

/* entries */

declare	apl_clear_storage_	entry (),
	apl_copy_value_	entry (pointer unaligned, pointer unaligned),
	get_group_id_	entry () returns (char (32)),
	get_line_length_$switch
			entry (ptr, fixed bin (35)) returns (fixed bin),
	iox_$control	entry (ptr, char (*), ptr, fixed bin (35)),
	iox_$modes	entry (ptr, char (*), char (*), fixed bin (35));

/* external static */

declare	(
	apl_static_$apl_output
			ptr,
	apl_static_$immediate_input_prompt
			char (32) varying,
	sys_info$max_seg_size
			fixed bin (18)
	)		external static;

/* program */

	call apl_clear_storage_;			/* clear the heap and reset the value stack */
	ws_info.digits = 10;

	ws_info.width = get_line_length_$switch (apl_static_$apl_output, code);
	if code ^= 0
	then do;
		ws_info.width = 132;		/* make this default */
		call iox_$modes (apl_static_$apl_output, "ll132", "", code);
	     end;

	ws_info.index_origin = 1;
	ws_info.float_index_origin = 1;
	ws_info.random_link = 16807;			/* 7**5, sounds like a good random link to use for now */
	ws_info.fuzz = 1e-13;			/* defined in APL to be 1e-13 */
	ws_info.integer_fuzz = 1.110223e-16;		/* 2**-53, sounds like a good integer fuzz */
	ws_info.number_of_symbols = 0;
	ws_info.maximum_value_stack_size = sys_info$max_seg_size - 2;
						/* the -2 is for pl1_operators_ bugs I guess */
	ws_info.last_error_code = 0;
	ws_info.lock = "";
	ws_info.wsid = "clear ws";
	ws_info.user_number = 100;			/* default user number as in TSO-APL */
	string (ws_info.interrupt_info) = ""b;
	ws_info.user_name = get_group_id_ ();
	ws_info.immediate_input_prompt = apl_static_$immediate_input_prompt;
	ws_info.evaluated_input_prompt = QQuad || QColon || QNewLine || (6)" ";
	ws_info.character_input_prompt = "";

	call iox_$control (apl_static_$apl_output, "get_tab_width", addr (ws_info.tab_width), code);
	if code ^= 0				/* no apl dim */
	then ws_info.tab_width = 10;			/* default */


/* Allocate and initialize symbol table. */

	ws_info.symbol_table_ptr = addrel (ws_info_ptr, size (ws_info));
	symbol_table.table_size = initial_size;
	symbol_table.hash_bucket_ptr (*) = null;

/* Allocate output buffer */

	ws_info.output_buffer_ptr = addrel (ws_info.symbol_table_ptr, size (symbol_table));
	ws_info.output_buffer_len = 900;		/* must be < 1000 to avoid kludge in apl_dim_write_ */
						/* ...so read_back_output will work */
	ws_info.output_buffer_pos = 1;
	ws_info.output_buffer_ll = 0;

/* Store pointer to first parse frame. */

	ws_info.current_parse_frame_ptr = addrel (ws_info.output_buffer_ptr, size (output_buffer));

/* create '' as the initial latent expression */

	string (initial_latent_expression.type) = character_value_type;
	initial_latent_expression.rhorho = 1;
	initial_latent_expression.total_data_elements = 0;
	initial_latent_expression.data_pointer = null;	/* no one should ever reference through this */
	initial_latent_expression.rho (1) = 0;
	call apl_copy_value_ (addr (initial_latent_expression), ws_info.latent_expression);
	return;

/* include files */

%include apl_number_data;
%include apl_bead_format;
%include apl_symbol_table;
%include apl_ws_info;
%include apl_characters;
     end /* apl_clear_workspace_ */;
