/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* This module implements the APL grade-up and grade-down operators.  Each column is sorted in the sense that
   indices that would sort that column were they used as subscripts are returned.  The result is thus an array
   of integers which conforms with the operand.  The Singleton sort algorithm is used. (CACM 12, #3, March 1969, p185-187)

				Created Oct 3, 1973 by G. Gordon Benedict

	Modified December 19, 1973 by PG to really use the Singleton sort.
	Modified December 30, 1973 by PG to be able to sort maximum-sized value.
	Modified 760922 by PG to split apl_grade_up_ from apl_grade_down_.
	Modified 780209 by PG to use apl_push_stack_ (bug 278)
*/

apl_grade_up_:
	procedure (operators_argument);		/* implements grade up */

declare	numeric_datum_or1 float dimension (data_elements) based;/* for efficiently getting "size" */

declare	(apl_error_table_$rank,
	apl_error_table_$domain) static external fixed binary (35);	/* naughty */

declare	(operand_vb,			/* pointer to value bead of operand (argument) */
	operand_array,			/* pointer to operand array */
	result_vb,	 		/* result value bead ptr */
	result_array,			/* pointer to result array */
	data_pointer,			/* return argument of push_value_stack */
	index_base) pointer;		/* pointer to base of indices for this column */

declare	(rhorho,				/* number of dimensions in operand and result */
	data_elements,			/* no of numbers in operand and result */
	dimension,			/* the dimension along which to perform the grade */
	rho_sub_dimension,			/* the length of that dimension */
	interval_between_elements,		/* no of elements inbetween each element of a column */
	plane_base,			/* subscript which indicates the base of a plane */
	column_base,			/* subscript which indicates the base of a column */
	column_skip_interval,		/* interval between base of columns */
	rho_subscript,			/* random subscript */
	last_column_on_this_plane,		/* offset to last column before plane_base must be changed */
	first,				/* used in actual sort. lowest element in a partition */
	swap_temp,			/* used for swapping index entries */
	last,				/* highest element in a partition */
	median,				/* index of middle datum */
	low,				/* moves up from first, looking for elements > median_value */
	high,				/* moves down from last, looking for elements < median_value */
	median_index,			/* temporary used to hold indices (median) in loops */
	depth)				/* depth in recursion (partition count) */
 		fixed binary;

declare	swap_em				/* flag used to eliminate goto's in comparison code */
		bit (1) aligned;

declare	bubble_is_ok	initial (13)	/* how short a vector must be to bubble sort it */
		fixed binary internal static;

declare	total_words_needed			/* words to allocate for allocate subroutine */
	     fixed bin (19);

declare	1 stack (0 : 18) aligned,		/* holds bounds of partitions as we "recurse" */
	  2 first fixed binary,		/* lower bound */
	  2 last fixed binary;		/* upper bound */

declare	(float_index,			/* used in converting from indices values to APL subscripts */
	index_origin,			/* a copy of ws_info.float_index_origin for efficiency */
	median_value) float;		/* a guess of mean value of array */

declare	(addr,
	addrel,
	divide,
	fixed,
	float,
	hbound,
 	rel,
	size,
	string,
	substr) builtin;

declare	indices (0 : rho_sub_dimension - 1) fixed binary based (index_base);	/* these are permuted rather than
					actual argument array; they tell where that element would be */

declare	rho_copy_overlay (rhorho) fixed binary (34) based;	/* used for copying rho vectors quickly */

declare	apl_get_next_value_stack_seg_ entry (fixed binary (18));	/* subroutine to allocate new value stack */

/* include files */

%include apl_number_data;
%include apl_operators_argument;
%include apl_bead_format;
%include apl_value_bead;
%include apl_ws_info;

/* Look at arguments, check rank, get storage, etc. */

	operand_vb = operators_argument.operands (2).value;
 	if ^ operand_vb -> value_bead.header.type.data_type.numeric_value then goto domain_error;

	data_elements = operand_vb -> value_bead.total_data_elements;	/* no. of entries in array */
 	operand_array = operand_vb -> value_bead.data_pointer;		/* ptr to the array */
 	dimension = operators_argument.dimension;		/* dimension along which to sort */
	rhorho = operand_vb -> value_bead.rhorho;	/* extract dimensionality */

	if rhorho = 0 then goto rank_error;	/* cannot be scalar */

	if rhorho < dimension then goto rank_error;     

/* Calculate interval between elements and interval between column bases */     

	interval_between_elements = 1;
	do rho_subscript = dimension by 1 while (rho_subscript < rhorho);
	     interval_between_elements = interval_between_elements *
		operand_vb -> value_bead.rho (rho_subscript + 1);
	end;

	rho_sub_dimension = operand_vb -> value_bead.rho (dimension);
	column_skip_interval = rho_sub_dimension * interval_between_elements;	/* column base separation */

/* A temporary operand of indices are needed.  If the operand is on the stack the final result can be stored
   there column by column as it is generated (since a column once referenced is never referenced again).
   Therefore only the table of indices will be allocated, which has one element for each element in a
   column to reduce.  If operand is not on the stack, then a result bead, a result array, and a table
   of indices will be allocated */

	index_origin = ws_info.float_index_origin;

	if operators_argument.operands (2).on_stack	/* overlay operand with result */
	then do;
		operators_argument.result,		/* result will be returned in same place as operand */
		result_vb = operand_vb;
		result_array = operand_array;		/* store result over operand */
	     end;
	else do;				/* not on stack. Must allocate new bead, new array, and indices */
		number_of_dimensions = rhorho;
		total_words_needed = size (value_bead) + size (numeric_datum_or1) + 1;
		operators_argument.result,
		result_vb = apl_push_stack_ (total_words_needed);	/* set result pointers to allocated area */
		result_array = addr (result_vb -> value_bead.rho (rhorho + 1));

		if substr (rel (result_array), 18, 1)	/* if odd data boundary */
		then result_array = addrel (result_array, 1);

		result_vb -> value_bead.rhorho = rhorho;
		result_vb -> value_bead.total_data_elements = data_elements;
		result_vb -> value_bead.data_pointer = result_array;
		if rhorho > 0			/* copy rho vector */
		then addr (result_vb -> value_bead.rho) -> rho_copy_overlay =
		     addr (operand_vb -> value_bead.rho) -> rho_copy_overlay;
	     end;

	total_words_needed = rho_sub_dimension;		/* allocate indices. Must do it separately so that
						   we can sort maximum-sized value, which will need
						   a whole value stack for operand, in that case
						   this temporary will go in a new segment. */
	index_base = apl_push_stack_ (total_words_needed);

	string (result_vb -> value_bead.header.type) =	/* subscripts are always integers */
	     integral_value_type;

/* If operand is scalar just return the index origin */

	if data_elements = 1			/* effective scalar */
	then do;
		result_array -> numeric_datum (0) = index_origin;
		return;
	     end;

	/* Main loop.  The two outer loops find the offset of the base of the column to sort */

	do plane_base = 0 repeat (plane_base + column_skip_interval) while (plane_base < data_elements);

	     last_column_on_this_plane = plane_base + interval_between_elements;	/* offset to last column, plus 1 */

	     do column_base = plane_base by 1 while (column_base < last_column_on_this_plane);

		/* Into the indices insert index values which point to the elements in the
		   operand array that are in this column. */

		indices (0) = column_base;		/* point to first data element in column to sort */

		do rho_subscript = 1 by 1 while (rho_subscript < rho_sub_dimension);
		     indices (rho_subscript) = indices (rho_subscript - 1) + interval_between_elements;
		end;

		/* This loop actually sorts the column contained in the indices vector.
		   Note that the data is never moved, only the subscripts. */

		first = 0;		/* lowest subscript into indices starts out at bottom */
		last = rho_sub_dimension - 1;	/* Believe me, this is last one */
		depth = -1;		/* no recursion yet */

repeat_sort:					/* comes back here to process each partition */
		if last - first <= bubble_is_ok
		then if first ^= 0 | last <= 0	/* true unless this is first partition, and it has */
		     then do;			/* some elements. We can't bubble that one case */
			     call bubble_sort ();
			     go to pop_stack;
			end;

		low = first;
		median = divide (first + last, 2, 18, 0);
		high = last;

		/* first step is to sort the first, median, and last values of the data
		   such that first <= median <= last.  This causes the upward and downward
		   scans to be "data limited" so that they are guaranteed not to run
		   off the end of the array.  Grade up & grade down are not totally
		   symmetrical, since equal elements always have their indices
		   in ascending order. */

		swap_em = "0"b;

			if operand_array -> numeric_datum (indices (first)) >
			   operand_array -> numeric_datum (indices (median))
			then swap_em = "1"b;
			else if operand_array -> numeric_datum (indices (first)) =
			        operand_array -> numeric_datum (indices (median))
			     then if indices (first) > indices (median)
				then swap_em = "1"b;

			if swap_em
			then do;
				swap_temp = indices (median);
				indices (median) = indices (first);
				indices (first) = swap_temp;
				swap_em = "0"b;
			     end;

			if operand_array -> numeric_datum (indices (last)) <
			   operand_array -> numeric_datum (indices (median))
			then swap_em = "1"b;
			else if operand_array -> numeric_datum (indices (last)) =
			        operand_array -> numeric_datum (indices (median))
			     then if indices (last) < indices (median)
				then swap_em = "1"b;

			if swap_em
			then do;
				swap_temp = indices (median);
				indices (median) = indices (last);
				indices (last) = swap_temp;

				swap_em = "0"b;

				if operand_array -> numeric_datum (indices (first)) >
				   operand_array -> numeric_datum (indices (median))
				then swap_em = "1"b;
				else if operand_array -> numeric_datum (indices (first)) =
				        operand_array -> numeric_datum (indices (median))
				     then if indices (first) > indices (median)
					then swap_em = "1"b;

				if swap_em
				then do;
					swap_temp = indices (median);
					indices (median) = indices (first);
					indices (first) = swap_temp;
				     end;
			     end;

		/* Now we can actually select the value which will be used to partition
		   the data into two sublists. The "low" sublist will be all values, starting
		   from the lower end of the array, which are less than the median value.
		   The "high" sublist will be all values, starting from the upper end of the
		   array, which are greater than the median value. */

		median_index = indices (median);
		median_value = operand_array -> numeric_datum (median_index);

grade_repeat:
			do high = high - 1 by -1 while (operand_array -> numeric_datum (indices (high)) > median_value);
			end;

			if operand_array -> numeric_datum (indices (high)) = median_value
			then if indices (high) > median_index
			     then go to grade_repeat;

grade_repeat_up:
			do low = low + 1 by 1 while (operand_array -> numeric_datum (indices (low)) < median_value);
			end;

			if operand_array -> numeric_datum (indices (low)) = median_value
			then if indices (low) < median_index
			     then go to grade_repeat_up;

			if low <= high
			then do;
				swap_temp = indices (high);
				indices (high) = indices (low);
				indices (low) = swap_temp;
				go to grade_repeat;
			     end;

/* recursion occurs here in sense that the file is partitioned and the partition indices are stacked */

		/* This algorithm can sort up to ^1+2*K+1 elements, according to Knuth
		   and Singleton (In PL/I notation, (2**(k+1))-1), where K = dimension (stack, 1).
		   Since the largest APL value must fit in one 256K segment (2*18 words),
		   K = 17 is sufficient. */

		/* The reason we can sort so many items, in place, with so little storage, is that
		   Singleton's algorithm saves the larger of the two sublists, and then recurses
		   on the smaller list.  Should it do it in the other order, no stack
		   less in size than the original list would be good enough (more or less).
		   By saving the larger list, the worst case for recursion is when the smaller list
		   is consistently just less than 1/2 of the combined sizes. The reader will quickly
		   note that this implies that the size of the stack need only be logarithmically
		   as large as the number of items to be sorted. */

		depth = depth + 1;			/* push a new frame */

		if (high - first) > (last - low)
		then do;
			stack (depth).first = first;	/* lower sublist is bigger */
			stack (depth).last = high;
			first = low;		/* so sort the upper one */
		     end;
		else do;
			stack (depth).first = low;	/* upper sublist is bigger */
			stack (depth).last = last;
			last = high;		/* so sort the lower one */
		     end;

		go to repeat_sort;

pop_stack:					/* sort partition whose bounds are now stacked at end */
		if depth >= 0			/* not done with this column, nor is stack all popped */
		then do;
			first = stack (depth).first;	/* extract bounds of this partition */
			last = stack (depth).last;
			depth = depth - 1;		/* reduce "stack pointer" to previous frame */
			go to repeat_sort;		/* sort previous partition */
		     end;

/* Now have produced a permutation vector for an entire column.  Convert this vector into a vector of subscripts and
   store it into the result array.  This is done by having a subscript increment from the index origin, each
   time storing it into an element of the result vector specified by the corresponding element of the indices */

		swap_temp = column_base;
		do rho_subscript = 0 by 1 while (rho_subscript < rho_sub_dimension);	/* thru whole index vector */
		     result_array -> numeric_datum (swap_temp) =
			float (divide (indices (rho_subscript) - column_base, interval_between_elements, 17, 0))
			+ index_origin;
		     swap_temp = swap_temp + interval_between_elements;	/* next subscript */
		end;
	     end;
	end;

	ws_info.value_stack_ptr = index_base;		/* pop index array */
	return;

/* Various types of errors */

rank_error:
	operators_argument.error_code = apl_error_table_$rank;
	operators_argument.where_error = operators_argument.where_error - 1;		/* right operand */
	return;

domain_error:
	operators_argument.error_code = apl_error_table_$domain;
	operators_argument.where_error = operators_argument.where_error - 1;		/* right operand */
	return;

/* Internal procedure to perform a data-limited bubble sort on the vector from "first" to "last". */

bubble_sort:
	procedure ();

		do first = first + 1 to last;
		     median_index = indices (first);
		     median_value = operand_array -> numeric_datum (median_index);

		     low = first;
bubble_repeat:
		     do low = low - 1 by -1 while (operand_array -> numeric_datum (indices (low)) > median_value);
			indices (low + 1) = indices (low);
		     end;
		     if operand_array -> numeric_datum (indices (low)) = median_value
		     then if indices (low) > median_index
			then do;
				indices (low + 1) = indices (low);
				go to bubble_repeat;
			     end;

		     indices (low + 1) = median_index;
		end;

	return;

     end bubble_sort;

%include apl_push_stack_fcn;
     end /* apl_grade_up_ */;
