/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_error_: proc(code, a_options, a_marker_pos, source_line, function_name_ptr_structure, line_number);

/*
 * this module prints error messages for apl.
 * any fancy error recovery to be done must be done by the caller.
 *
 * written 73.7.07 by DAM
 * modified 73.8.20 by DAM for new dim
 * Modified 740131 by PG for compatibility error
 * Modified 750630 by PG to make SYSTEM ERRORS always long
   Modified 780211 by PG to add RESULT SIZE ERROR.
   Modified 780914 by PG to move mapping table to apl_error_table_
 */

/* parameters */

dcl code fixed bin(35),		/* status code, usually from apl_error_table_ */
    a_options bit(36) aligned parameter,
    a_marker_pos fixed bin,		/* position in source_line of character to be marked */
    source_line char(*),		/* line to print (or null string to suppress) */
    1 function_name_ptr_structure aligned structure parameter,
    2 function_name_ptr ptr unaligned,	/* -> symbol bead of function name to put in front of source_line (null ptr to suppress) */
    line_number fixed bin;		/* line number to put in brackets after function_name */

/* automatic */

dcl short_error_msg char(8) aligned,
    brief_msg char (20),
    error_table_code_option bit(36) aligned init("01"b),	/* mask for option that code is from system error_table_, msg
						   is to be put in somewhat different format */
    long_error_msg char(100) aligned,
    long_error_mode bit (1) aligned,
    options bit(36) aligned,		/* options bits */
    marker_pos fixed bin,		/* copy argument since is input argument and will modify */
    i fixed bin;

dcl 1 buffer_structure aligned,
      2 buffer char(200) varying,	/* message constructed here, length must be multiple of 4 */
      2 too_long char(4);			/* if buffer fills up, put "...NL" here to tell loser */

/* conditions */

dcl apl_system_error_ condition;	/* also the name of one entry to this procedure */

/* entries */

dcl convert_status_code_ entry(fixed bin(35), char(8) aligned, char(100) aligned),
    ios_$order entry (char (*), char (*), ptr, bit (72) aligned),
    cu_$cl entry,
    ioa_$rsnpnnl entry options(variable),
    ios_$write entry(char(*), ptr, fixed bin, fixed bin, fixed bin, bit(72)aligned),
    ios_write_length fixed bin;
dcl ioa_$ioa_stream entry options(variable);

dcl ios_$resetread entry(char(*), bit(72) aligned);

/* external static */

dcl	1 apl_error_table_$mapping_table (100 /* phony */) aligned external static,
	  2 short_msg	char (8),
	  2 brief_msg	char (24);

dcl	apl_error_table_$n_map_entries fixed bin external static;

/* internal static */

dcl apl_output_stream char(32) static init("apl_output_"),
    apl_input_stream char(32) static init("apl_input_"),
    SystemErrorEntry bit(36) aligned static init("000000000000000000000000000000000001"b),	/* (35 0's and a 1) */
    HuhEntry bit(36) aligned static init("000000000000000000000000000000000010"b);

/* builtins */

dcl (null, substr, length, lbound, hbound) builtin;

/* include files */

%include apl_bead_format;
%include apl_symbol_bead;
%include apl_number_data;
%include apl_ws_info;
%include apl_characters;

/* program */

	options = a_options;			/* copy parameter since to other entry it is not a parameter */

	if a_marker_pos <= 0
	then marker_pos = 1;
	else if a_marker_pos > length (source_line)
	     then marker_pos = length (source_line) + 1;
	     else marker_pos = a_marker_pos;

join:
	if ws_info_ptr ^= null		/* watch out! */
	then ws_info.last_error_code = code;

	call convert_status_code_(code, short_error_msg, long_error_msg);

	/* do conversion of short msg to brief msg */

	do i = 1 to apl_error_table_$n_map_entries;
	     if apl_error_table_$mapping_table (i).short_msg = short_error_msg
	     then do;
		     brief_msg = apl_error_table_$mapping_table (i).brief_msg;
		     go to exitloop;
		end;
	end;

	brief_msg = short_error_msg;			/* Oh, well. Don't translate */

exitloop:
	call ios_$order (apl_output_stream, "printer_on", null, (""b));	/* turn on printer in case it is off */

	if options & HuhEntry			/* )HUH - reprint error message */
	then do;
		if substr(long_error_msg, 1, 4) = (4) " "
		then call ioa_$ioa_stream(apl_output_stream, "^a^a",  (QConditionalNewLine), brief_msg);
		else call ioa_$ioa_stream(apl_output_stream, "^a^a - ^a",  (QConditionalNewLine),
		     brief_msg, long_error_msg);

		return;
	     end;

	if ws_info_ptr = null		/* don't fault if it is */
	then long_error_mode = "1"b;
	else long_error_mode = ws_info.long_error_mode;

	if short_error_msg = "system"
	then long_error_mode = "1"b;		/* SYSTEM ERRORS are always long */

	/* put out first line of message */

	if options & error_table_code_option
	then call ioa_$ioa_stream(apl_output_stream, "command error:  ^a", long_error_msg);
	else if substr(long_error_msg, 1, 4) = (4)" "	/* can't print long msg if there isn't one */
	     then go to short_form;
	     else if long_error_mode
		then call ioa_$ioa_stream(apl_output_stream, "^a^a - ^a",  (QConditionalNewLine),
		     brief_msg, long_error_msg);
		else
short_form:
		     call ioa_$ioa_stream (apl_output_stream, "^a^a",  (QConditionalNewLine), brief_msg);

	if options & SystemErrorEntry
	then go to finish;

	/* now put out second line (user source with mark) unless suppressed */

	if source_line = "" then go to finish;

	if function_name_ptr = null			/* error in evaluated input */
	then do;
		buffer = "";			/* no longer put in 6 spaces, come from dim */
		if marker_pos-1 ^= 0		/* EIS kludge */
		then buffer = buffer || substr(source_line, 1, marker_pos-1);
		buffer = buffer || QMarkError;	/* put in char to tell dim to put caret under next char */
		if length(source_line) - marker_pos + 1 ^= 0	/* EIS kludge */
		then buffer = buffer || substr(source_line, marker_pos);
	     end;
	else do;					/* error in body of a function */
		call ioa_$rsnpnnl("^a[^d]^x", buffer, (0), function_name_ptr -> symbol_bead.name, line_number);
		if length(buffer) < 6 then buffer = buffer || " ";

		if marker_pos-1 ^= 0		/* EIS kludge */
		then buffer = buffer || substr(source_line, 1, marker_pos-1);
		buffer = buffer || QMarkError;
		if length(source_line) - marker_pos + 1 ^= 0	/* EIS kludge */
		then buffer = buffer || substr(source_line, marker_pos);
	     end;

	/* take care of possibility of buffer overflow */

	if length(buffer) = 200			/* the length it was declared with above */
	then do;
		too_long = "...
";
		ios_write_length = length (buffer) + length (too_long);
	     end;
	else do;
		buffer = buffer || (QConditionalNewLine);	/* will put NewLine if line doesn't end in one */
		ios_write_length = length(buffer);
	     end;

	call ios_$write(apl_output_stream, addr(buffer), 4 /* varying-string hack */ , ios_write_length, (0), (""b));

finish:
	call ios_$resetread(apl_input_stream, (""b));	/* flush input since was an error */

	if ws_info_ptr ^= null		/* don't fault */
	then if ws_info.debug_mode
	     then if short_error_msg = "system"
		then do;
		          call ioa_$ioa_stream(apl_output_stream, "debug mode -- coming up to command level");
		          call cu_$cl;
		     end;

	if options & SystemErrorEntry
	then signal apl_system_error_;		/* this will never return */

	return;

apl_system_error_:
	entry (code);				/* less parameters for system errors */

	options = SystemErrorEntry;
	go to join;



apl_error_$huh:
	entry (code);				/* for )HUH command; reprint an error in long form */

	options = HuhEntry;
	go to join;


     end /* apl_error_ */;
