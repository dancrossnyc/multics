/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Procedure to )LOAD an APL workspace.
   Richard S. Lamson, August 1973.

   Artificial respiration and external heart massage applied 10/9/73, by PG
   Modified for Version 3 workspaces by PG, 12/4/73
   Modified 740430 by PG for )COPY and )PCOPY
   Modified 740621 by PG to fix loading of boolean values and alignment of numeric values
   Modified 741010 by PG to check for zero-length refer, to check for
	copying into pendent function, to fix "not copied" msg, and to use new names.
   Modified 741119 by PG to fix )COPY to push a save frame first.
   Modified 750723 by PG to not load width, check for non-symbol beads in load_symbol, and enable
	loading of localized variables.
   Modified 761011 by PG to use new parse_frame declaration, and be able to load both version 3 and
	version 4 (new saved_pf declaration) workspaces.
   Modified 780523 by William York to let apl_storage_manager_ handle storage allocation by itself,
	with no unnecessary help from the load command.
   Modified 780901 by PG to fix 329 (apl refuses to enter apl if continue workspace is locked!).
   Modified 781220 by PG to fix 330 (load and copy didn't terminate segments), and 226 (poor error msgs).
   Modified 790131 by PG to fix 351 (copy didn't ignore symbols with no meaning, thus clobbering existing symbols).
   Modified 790814 by PG to fix 412 (load didn't set function_bead.lexed_function_bead_ptr for functions
	on the SI, and load_bead didn't update loaded_bead_table for anything!)
   modified 811210 by TO to use APL search paths.
*/

apl_load_command_:
     procedure (bv_wsid, bv_lock, bv_code);

/* program */

	autoload = "0"b;
	go to join;

apl_load_command_$autoload:
     entry (bv_wsid, bv_lock, bv_code);

	autoload = "1"b;

join:
	fcbp = null;
	loaded_bead_table_pointer = null;

	on cleanup
	     call clean_up;				/* give back our temp seg. */

	call initialize_load_command (bv_code);
	if bv_code ^= 0
	then do;
		if ^(autoload & bv_wsid = "continue" & bv_code = error_table_$noentry)
		then do;
			call convert_status_code_ (bv_code, short_msg, long_msg);
			call ioa_$ioa_switch (apl_static_$apl_output, "apl: ^a ^a^[>^]^a", long_msg, dname,
			     (dname ^= ">" & ename ^= ""), ename);
		     end;

		if autoload
		then bv_code = apl_error_table_$cant_autoload;

		call clean_up;
		return;
	     end;

/* The following values are session parameters, not workspace parameters, and hence
   do not get cleared or loaded: tabs, width, check mode, error mode, and everything in
   ws_info.switches. */

	call apl_clear_workspace_;

	ws_info.digits = saved_ws_info.digits;
	ws_info.index_origin = saved_ws_info.index_origin;
	ws_info.random_link = saved_ws_info.random_link;
	ws_info.fuzz = saved_ws_info.fuzz;
	ws_info.float_index_origin = saved_ws_info.float_index_origin;
	ws_info.integer_fuzz = saved_ws_info.integer_fuzz;
	ws_info.lock = saved_ws_info.lock;
	ws_info.wsid = bv_wsid;

	saved_symbol_count = saved_ws_info.number_of_symbols;

	do symbol_number = 1 to saved_symbol_count;
	     call load_symbol (symbol_number);
	end;

	do symbol_number = 1 to saved_symbol_count;
	     loaded_bead_pointer (symbol_number) -> symbol_bead.meaning_pointer =
		load_bead (loaded_bead_pointer (symbol_number) -> symbol_bead.meaning_pointer -> saved_sb.meaning_pointer)
		;
	end;					/* meaning_pointer points to saved copy of symbol_bead (set by load_symbol) */

	ws_info.latent_expression = load_bead (saved_ws_info.latent_expression);

	parse_frame_ptr = ws_info.current_parse_frame_ptr;
	previous_frame_pointer = null;

	do saved_frame_pointer = un_pseudo_pointer (saved_ws_info.current_parse_frame_ptr)
	     repeat (un_pseudo_pointer (saved_pf.last_parse_frame_ptr)) while (saved_frame_pointer ^= null);

	     parse_frame.last_parse_frame_ptr = previous_frame_pointer;
	     parse_frame.parse_frame_type, frame_type = saved_pf.parse_frame_type;

	     go to load_frame (frame_type);

load_frame (5):					/* SAVE FRAME */
	     parse_frame_ptr -> save_frame.saved_symbol_count, symbol_count = saved_sf.saved_symbol_count;

	     do symbol_number = 1 to symbol_count;
		parse_frame_ptr -> save_frame.symbol_pointer (symbol_number) =
		     load_bead (saved_sf.symbol_pointer (symbol_number));

		parse_frame_ptr -> save_frame.saved_meaning_pointer (symbol_number) =
		     load_bead (saved_sf.saved_meaning_pointer (symbol_number));

		parse_frame_ptr -> save_frame.global_meaning_pointer_pointer (symbol_number) = null;
	     end;

	     previous_frame_pointer = parse_frame_ptr;
	     parse_frame_ptr = addr (parse_frame_ptr -> save_frame.symbol_pointer (symbol_count + 1));
	     go to next_frame;

load_frame (1):					/* SUSPENDED FRAME */
load_frame (3):					/* EVALUATED FRAME */
	     if saved_ws_info.save_version = 3
	     then do;
		     source_length,
			addr (parse_frame.old_meaning_ptrs (1)) -> suspended_source_length =
			addr (v3_saved_pf.old_meaning_ptrs (1)) -> suspended_source_length;

		     addr (parse_frame.old_meaning_ptrs (2)) -> suspended_source =
			addr (v3_saved_pf.old_meaning_ptrs (2)) -> suspended_source;
		end;
	     else do;				/* v4 */
		     source_length,
			addr (parse_frame.old_meaning_ptrs (1)) -> suspended_source_length =
			addr (saved_pf.old_meaning_ptrs (1)) -> suspended_source_length;

		     addr (parse_frame.old_meaning_ptrs (2)) -> suspended_source =
			addr (saved_pf.old_meaning_ptrs (2)) -> suspended_source;
		end;

	     number_of_ptrs = divide (source_length + 3, 4, 21, 0) + 1;

/* Top frame source is of form ")save xxx", or some sort of function call,
   in the case where the workspace has been saved during quad-input,
   or after an error. */

	     if saved_pf.re_lex_source = "0"b
	     then do;
		     parse_frame.lexed_function_bead_ptr = null;
		     parse_frame.function_bead_ptr = null;
		     go to copy_other_stuff;
		end;

	     call apl_line_lex_ (addr (parse_frame.old_meaning_ptrs (2)) -> suspended_source,
		parse_frame.lexed_function_bead_ptr, errors_occurred, 0, (temporary_bead_pointer));

	     if errors_occurred
	     then go to fatal_error;

	     go to copy_other_stuff;

load_frame (2):					/* FUNCTION FRAME */
	     parse_frame.function_bead_ptr = load_bead (saved_pf.function_bead_ptr);

	     call apl_function_lex_ (parse_frame.function_bead_ptr -> function_bead.text,
		bead_pointer, errors_occurred, 0, (temporary_bead_pointer));

	     if errors_occurred
	     then go to fatal_error;

	     parse_frame.lexed_function_bead_ptr = bead_pointer;
	     parse_frame.function_bead_ptr -> function_bead.lexed_function_bead_pointer = bead_pointer;
	     bead_pointer -> lexed_function_bead.reference_count = bead_pointer -> lexed_function_bead.reference_count + 1;

	     number_of_ptrs = parse_frame.lexed_function_bead_ptr -> lexed_function_bead.number_of_localized_symbols;
	     do symbol_number = 1 to number_of_ptrs;	/* load old meanings of localized symbols */
		if saved_ws_info.save_version = 3
		then temp_symbol = v3_saved_pf.old_meaning_ptrs (symbol_number);
		else temp_symbol = saved_pf.old_meaning_ptrs (symbol_number);

		parse_frame.old_meaning_ptrs (symbol_number) = load_bead (temp_symbol);
	     end;
	     go to copy_other_stuff;

load_frame (4):					/* EXECUTE FRAME */
						/***		reductions_pointer = ????? */
	     bead_pointer = reduction_stack (parseme_count - 2).semantics;
	     data_elements = bead_pointer -> value_bead.total_data_elements;

	     call apl_execute_lex_ (bead_pointer -> value_bead.data_pointer -> character_string_overlay,
		parse_frame.lexed_function_bead_ptr, errors_occurred, 0, (temporary_bead_pointer));

	     if errors_occurred
	     then go to fatal_error;

	     number_of_ptrs = 0;

copy_other_stuff:
	     reductions_pointer = addrel (parse_frame_ptr, size (parse_frame));
	     if saved_ws_info.save_version = 3
	     then saved_reductions_pointer = addr (v3_saved_pf.old_meaning_ptrs (number_of_ptrs + 1));
	     else saved_reductions_pointer = addr (saved_pf.old_meaning_ptrs (number_of_ptrs + 1));

	     parse_frame.reduction_stack_ptr = reductions_pointer;
	     parseme_count, parse_frame.current_parseme = saved_pf.current_parseme;
	     parse_frame.current_lexeme = saved_pf.current_lexeme;
	     parse_frame.current_line_number = saved_pf.current_line_number;

	     if saved_pf.return_point = 0		/* gone...but equivalent to another point */
	     then parse_frame.return_point = 8;
	     else parse_frame.return_point = saved_pf.return_point;

	     parse_frame.put_result = saved_pf.put_result;
	     parse_frame.print_final_value = saved_pf.print_final_value;
	     parse_frame.initial_value_stack_ptr = ws_info.value_stack_ptr;
	     parse_frame.number_of_ptrs = number_of_ptrs;

	     do reduction_number = 1 to parseme_count;
		reduction_stack.type (reduction_number), reduction_type = saved_rs (reduction_number).type;

		unspec (reduction_stack (reduction_number).bits) = unspec (saved_rs (reduction_number).bits);

		load_this_one = "0"b;

		if reduction_type = op_type
		then if reduction_stack (reduction_number).function | reduction_stack (reduction_number).has_list
		     then load_this_one = "1"b;
		     else if reduction_stack (reduction_number).semantics_valid
		     then reduction_stack_for_op (reduction_number).semantics =
			     saved_rs_for_op (reduction_number).semantics;
		     else ;
		else load_this_one = "1"b;

		if load_this_one
		then do;
			if reduction_stack (reduction_number).semantics_valid
			then if reduction_stack (reduction_number).semantics_on_stack
			     then reduction_stack (reduction_number).semantics =
				     load_bead_on_stack (saved_rs (reduction_number).semantics);
			     else reduction_stack (reduction_number).semantics =
				     load_bead (saved_rs (reduction_number).semantics);
		     end;

		reduction_stack (reduction_number).lexeme = saved_rs (reduction_number).lexeme;
	     end;

	     previous_frame_pointer = parse_frame_ptr;
	     parse_frame_ptr = addr (reduction_stack (parseme_count + 1));

next_frame:
	end;

	ws_info.current_parse_frame_ptr = previous_frame_pointer;

	call apl_destroy_save_frame_;
	call clean_up;

non_local_return:
	return;

fatal_error:
	call clean_up;
	call apl_system_error_ (apl_error_table_$cant_load_ws);
	return;

apl_copy_command_:
     entry (bv_wsid, bv_lock, bv_protected, bv_names, bv_number_of_names, bv_code);

/* parameters */

declare	(
	bv_protected	bit (1) aligned,
	bv_number_of_names	fixed bin,
	bv_names		char (*) dim (*)
	)		parameter;

/* program */

	not_found = "";
	not_copied = "";
	fcbp = null;
	loaded_bead_table_pointer = null;
	autoload = "0"b;

	on cleanup
	     call clean_up;

	call initialize_load_command (bv_code);
	if bv_code ^= 0
	then do;
		call convert_status_code_ (bv_code, short_msg, long_msg);
		call ioa_$ioa_switch (apl_static_$apl_output, "apl: ^a ^a^[>^]^a", long_msg, dname,
		     (dname ^= ">" & ename ^= ""), ename);
		call clean_up;
		return;
	     end;

	call apl_create_save_frame_ ();

	saved_symbol_count = saved_ws_info.number_of_symbols;

	if bv_number_of_names = 0
	then do;
						/* copy all names */

		do symbol_index = 1 to saved_symbol_count;
		     symbol_pointer = un_pseudo_pointer (bead_description_table (symbol_index).bead_pointer);

		     if symbol_pointer -> saved_general_bead.type.symbol
		     then if symbol_pointer -> saved_sb.meaning_pointer ^= 0
						/* ignore if no meaning */
			then call copy (symbol_pointer);
		end;
	     end;
	else do;
						/* selected copy */

		do copy_index = 1 to bv_number_of_names;
		     found = "0"b;
		     do symbol_index = 1 to saved_symbol_count while (^found);
			symbol_pointer = un_pseudo_pointer (bead_description_table (symbol_index).bead_pointer);
			if symbol_pointer -> saved_general_bead.type.symbol
			then if symbol_pointer -> saved_sb.meaning_pointer ^= 0
						/* ignore if no meaning */
			     then if bv_names (copy_index) = symbol_pointer -> saved_sb.name
				then do;
					call copy (symbol_pointer);
					found = "1"b;
				     end;
		     end;

		     if ^found
		     then call not_found_ (before (bv_names (copy_index), " "));
		end;
	     end;

	if length (not_found) ^= 0
	then do;
		not_found = not_found || nl;
		call iox_$put_chars (apl_static_$apl_output, addrel (addr (not_found), 1), length (not_found), code);
	     end;

	if length (not_copied) ^= 0
	then do;
		not_copied = not_copied || nl;
		call iox_$put_chars (apl_static_$apl_output, addrel (addr (not_copied), 1), length (not_copied), code);
	     end;

	call apl_destroy_save_frame_update_;
	call clean_up;
	return;

initialize_load_command:
     procedure (bv_code);

/* parameters */

dcl	bv_code		fixed bin (35) parameter;

/* program */

	call apl_translate_pathname_$use_search_paths (bv_wsid, dname, ename, fcbp, bv_code);
	if bv_code ^= 0
	then do;
		dname = bv_wsid;			/* setup for error msg printer. */
		ename = "";
		return;
	     end;

	if ws_info.restrict_load_directory
	then if dname ^= get_wdir_ ()
	     then do;
		     bv_code = apl_error_table_$ws_dir_restricted;
		     return;
		end;

	call msf_manager_$get_ptr (fcbp, 0, "0"b, ws_segment (0), (0), bv_code);
	if ws_segment (0) = null
	then return;

	saved_ws_info_pointer = ws_segment (0);

	do component = 1 to saved_ws_info.highest_segment;
	     call msf_manager_$get_ptr (fcbp, component, "0"b, ws_segment (component), (0), bv_code);
	     if ws_segment (component) = null
	     then return;
	end;

	if saved_ws_info.save_version < 3 | saved_ws_info.save_version > 4
	then do;
		bv_code = apl_error_table_$ws_wrong_version;
		return;
	     end;

	if saved_ws_info.lock ^= bv_lock
	then do;
		bv_code = apl_error_table_$ws_locked;
		return;
	     end;

	call ioa_$ioa_switch (apl_static_$apl_output, "saved  ^a", apl_date_time_ (saved_ws_info.time_saved));

	bead_description_pointer = un_pseudo_pointer (saved_ws_info.bead_table_pointer);

	loaded_bead_table_pointer = apl_segment_manager_$get ();
	temporary_bead_pointer = addrel (loaded_bead_table_pointer, saved_ws_info.total_beads);

	bv_code = 0;

	do bead_number = 1 to saved_ws_info.total_beads;
	     loaded_bead_pointer (bead_number) = null;
	end;

	return;

     end /* initialize_load_command */;

clean_up:
     procedure;

	if loaded_bead_table_pointer ^= null
	then do;
		call apl_segment_manager_$free (loaded_bead_table_pointer);
		loaded_bead_table_pointer = null;
	     end;

	if fcbp ^= null
	then do;
		call msf_manager_$close (fcbp);
		fcbp = null;
	     end;
	return;

     end clean_up;

not_copied_:
     procedure (name);

/* parameters */

declare	name		char (*) parameter;

/* program */

	if length (not_copied) = 0
	then not_copied = "not copied: ";

	if length (not_copied) + length (name) + 1 > ws_info.width
	then do;
		not_copied = not_copied || nl;
		call iox_$put_chars (apl_static_$apl_output, addrel (addr (not_copied), 1), length (not_copied), code);
		not_copied = "not copied: ";
	     end;

	not_copied = not_copied || " ";

	not_copied = not_copied || name;

	return;

     end not_copied_;

not_found_:
     procedure (name);

/* parameters */

declare	name		char (*) parameter;

/* program */

	if length (not_found) = 0
	then not_found = "not found: ";

	if length (not_found) + length (name) + 1 > ws_info.width
	then do;
		not_found = not_found || nl;
		call iox_$put_chars (apl_static_$apl_output, addrel (addr (not_found), 1), length (not_found), code);
		not_found = "not found: ";
	     end;

	not_found = not_found || " ";

	not_found = not_found || name;

	return;

     end not_found_;

copy:
     procedure (bv_symbol_pointer);

/* parameters */

declare	bv_symbol_pointer	pointer unaligned parameter;

/* automatic */

declare	symbol_pointer	pointer unaligned;

/* program */

	call apl_get_symbol_ (bv_symbol_pointer -> saved_sb.name, symbol_pointer, (0));

	if symbol_pointer -> symbol_bead.meaning_pointer ^= null
	then do;
		if bv_protected
		then do;
			call not_copied_ (bv_symbol_pointer -> saved_sb.name);
			return;
		     end;

		if symbol_pointer -> symbol_bead.meaning_pointer -> general_bead.function
		then if apl_pendant_function_check_ (symbol_pointer -> symbol_bead.meaning_pointer)
		     then do;
			     call not_copied_ (bv_symbol_pointer -> saved_sb.name);
			     call apl_system_error_ (apl_error_table_$pendent_function_copied);
			end;

		call wash (symbol_pointer -> symbol_bead.meaning_pointer);
	     end;

	symbol_pointer -> symbol_bead.meaning_pointer = copy_bead (bv_symbol_pointer -> saved_sb.meaning_pointer);

/* Don't flush this symbol if this reference created it; otherwise be transparent & restore ref. ct. */

	if symbol_pointer -> general_bead.reference_count > 1
	then call wash (symbol_pointer);

	return;

     end copy;

wash:
     procedure (bv_bead_pointer);

/* parameters */

declare	bv_bead_pointer	pointer unaligned parameter;

/* automatic */

declare	bead_pointer	pointer unaligned;

/* program */

	bead_pointer = bv_bead_pointer;

	bead_pointer -> general_bead.reference_count = bead_pointer -> general_bead.reference_count - 1;

	if bead_pointer -> general_bead.reference_count < 1
	then call apl_free_bead_ (bead_pointer);

	return;

     end wash;

un_pseudo_pointer:
     procedure (bv_bead_pointer) returns (pointer unaligned);

	bead_pointer = bv_bead_pointer;

	if bead_pointer = null
	then return (null);
	else return (addrel (ws_segment (fixed (baseno (bead_pointer), 18)), rel (bead_pointer)));

declare	(bv_bead_pointer, bead_pointer)
			pointer unaligned;

     end un_pseudo_pointer;

load_symbol:
     procedure (bv_bead_number);

	bead_number = bv_bead_number;

	if bead_number = 0
	then return;

	if loaded_bead_pointer (bead_number) ^= null
	then do;
		loaded_bead_pointer (bead_number) -> general_bead.reference_count =
		     loaded_bead_pointer (bead_number) -> general_bead.reference_count + 1;
		return;
	     end;

	saved_bead_pointer = un_pseudo_pointer (bead_description_table (bead_number).bead_pointer);

	if ^saved_bead_pointer -> saved_general_bead.symbol
	then do;
		call apl_system_error_ (apl_error_table_$cant_load_ws);
		go to non_local_return;
	     end;

	call apl_get_symbol_ (saved_bead_pointer -> saved_sb.name, bead_pointer, (0));

	bead_pointer -> symbol_bead.meaning_pointer = saved_bead_pointer;
	loaded_bead_pointer (bead_number) = bead_pointer;
	return;

declare	(bead_pointer, saved_bead_pointer)
			pointer unaligned;
declare	(bv_bead_number, bead_number)
			fixed binary (21);

     end load_symbol;

copy_bead:
load_bead:
     procedure (bv_bead_number) returns (pointer unaligned);

/* parameters */

declare	bv_bead_number	fixed bin (21);

/* automatic */

declare	loading_on_stack	bit (1) aligned;
declare	bead_pointer	ptr unaligned;
declare	(saved_data_pointer, into_pointer, sb)
			ptr;
declare	bead_number	fixed bin (21),
	(symbol_number, member_number)
			fixed bin,
	datum_number	fixed bin (24);

/* program */

	loading_on_stack = "0"b;
	go to common;

load_bead_on_stack:
     entry (bv_bead_number) returns (pointer unaligned);

	loading_on_stack = "1"b;

common:
	bead_number = bv_bead_number;

	if bead_number <= 0				/* <0 means system error, actually. */
	then return (null);

	if loaded_bead_pointer (bead_number) ^= null
	then do;
		loaded_bead_pointer (bead_number) -> general_bead.reference_count =
		     loaded_bead_pointer (bead_number) -> general_bead.reference_count + 1;
		return (loaded_bead_pointer (bead_number));
	     end;

	sb = un_pseudo_pointer (bead_description_table (bead_number).bead_pointer);
	go to copy_in_bead (index (string (sb -> saved_general_bead.type), "1"b));

copy_in_bead (5):					/* GROUP BEAD */
	call allocate;

	bead_pointer -> group_bead.number_of_members = sb -> saved_gb.number_of_members;

	do symbol_number = 1 to bead_pointer -> group_bead.number_of_members;
	     bead_pointer -> group_bead.member (symbol_number) = load_bead (sb -> saved_gb.member (symbol_number));
	end;
	go to end_case;

copy_in_bead (2):					/* SYMBOL BEAD */
	call load_symbol (bead_number);
	loaded_bead_pointer (bead_number) -> symbol_bead.meaning_pointer =
	     load_bead (loaded_bead_pointer (bead_number) -> symbol_bead.meaning_pointer -> saved_sb.meaning_pointer);
	return (loaded_bead_pointer (bead_number));

copy_in_bead (4):					/* FUNCTION BEAD */
	call allocate;

	bead_pointer -> function_bead.class = sb -> saved_fb.class;
	bead_pointer -> function_bead.text_length = sb -> saved_fb.text_length;
	bead_pointer -> function_bead.stop_control_pointer = load_bead (sb -> saved_fb.stop_control_pointer);
	bead_pointer -> function_bead.trace_control_pointer = load_bead (sb -> saved_fb.trace_control_pointer);
	bead_pointer -> function_bead.text = sb -> saved_fb.text;
	bead_pointer -> function_bead.lexed_function_bead_pointer = null;
	go to end_case;

copy_in_bead (9):					/* LIST BEAD */
	call stack_allocate;

	bead_pointer -> list_bead.number_of_members = sb -> saved_lb.number_of_members;

	do member_number = 1 to bead_pointer -> list_bead.number_of_members;
	     unspec (bead_pointer -> list_bead.bits (member_number)) = unspec (sb -> saved_lb.bits (member_number));

	     if bead_pointer -> list_bead.bits (member_number).semantics_on_stack
	     then bead_pointer -> list_bead.member_ptr (member_number) =
		     load_bead_on_stack (sb -> saved_lb.member_ptr (member_number));
	     else bead_pointer -> list_bead.member_ptr (member_number) =
		     load_bead (sb -> saved_lb.member_ptr (member_number));
	end;
	go to end_case;

copy_in_bead (3):					/* VALUE BEADS */
	call allocate;

	number_of_dimensions, bead_pointer -> value_bead.rhorho = sb -> saved_value_bead.rhorho;

	if bead_pointer -> value_bead.rhorho > 0
	then bead_pointer -> value_bead.rho (*) = sb -> saved_value_bead.rho (*);

	data_elements, bead_pointer -> value_bead.total_data_elements = sb -> saved_value_bead.total_data_elements;

	into_pointer = addrel (bead_pointer, size (value_bead));

	if bead_pointer -> value_bead.numeric_value
	then if substr (rel (into_pointer), 18, 1)
	     then into_pointer = addrel (into_pointer, 1);

	bead_pointer -> value_bead.data_pointer = into_pointer;

	saved_data_pointer = pointer (sb, rel (sb -> saved_value_bead.data_pointer));

	if bead_pointer -> value_bead.character_value
	then into_pointer -> character_string_overlay = saved_data_pointer -> character_string_overlay;
	else if string (bead_pointer -> value_bead.type) = zero_or_one_value_type
	then do;
		do datum_number = 0 by 1 while (datum_number < data_elements);
		     if substr (saved_data_pointer -> saved_boolean_datum, datum_number + 1, 1) = "1"b
		     then into_pointer -> numeric_datum (datum_number) = 1e0;
		     else into_pointer -> numeric_datum (datum_number) = 0e0;
		end;
	     end;
	else into_pointer -> numeric_datum (*) = saved_data_pointer -> numeric_datum (*);

end_case:
	loaded_bead_pointer (bead_number) = bead_pointer;
	return (bead_pointer);

copy_in_bead (0):
copy_in_bead (1):
copy_in_bead (6):
copy_in_bead (7):
copy_in_bead (8):
copy_in_bead (10):
copy_in_bead (11):
copy_in_bead (12):
copy_in_bead (13):
copy_in_bead (14):
copy_in_bead (15):
copy_in_bead (16):
copy_in_bead (17):
copy_in_bead (18):
	call apl_system_error_ (apl_error_table_$cant_load_ws);
	go to non_local_return;

/* pseudo-function used by load_bead to allocate space for each bead in either the stack or heap. */

allocate:
     procedure;

declare	allocate_on_stack	bit (1) aligned;

	allocate_on_stack = loading_on_stack;
	go to common;

stack_allocate:
     entry;

	allocate_on_stack = "1"b;

common:
	n_words = fixed (sb -> saved_general_bead.size, 18, 0);

/* the size was normalized to eleminate any padding words for value beads...add 1 back so we
   can safely double-word align the numbers. */

	if sb -> saved_general_bead.value
	then n_words = n_words + 1;

	if allocate_on_stack
	then bead_pointer = apl_push_stack_ (n_words);
	else call apl_allocate_words_ (n_words, bead_pointer);

	string (bead_pointer -> general_bead.type) = string (sb -> saved_general_bead.type);
	bead_pointer -> general_bead.reference_count = 1;
	return;

%include apl_push_stack_fcn;
     end allocate;

     end load_bead;

/* builtins */

declare	(addr, addrel, baseno, before, divide, fixed, index, length, null, pointer, substr, rel, size, string, unspec)
			builtin;

/* entries */

declare	apl_date_time_	entry (fixed bin (71)) returns (char (17));
declare	apl_pendant_function_check_
			entry (ptr unal) returns (bit (1) aligned);
declare	apl_system_error_	entry (fixed bin (35));
declare	apl_allocate_words_ entry (fixed bin (19), pointer unaligned);
declare	apl_get_symbol_	entry (char (*), pointer unaligned, fixed bin);
declare	apl_create_save_frame_
			entry ();
declare	(apl_destroy_save_frame_, apl_destroy_save_frame_update_)
			entry ();
declare	apl_free_bead_	entry (pointer unaligned);
declare	apl_translate_pathname_$use_search_paths
			entry (char (*), char (*), char (*), pointer, fixed bin (35));
declare	apl_segment_manager_$get
			entry () returns (pointer);
declare	apl_segment_manager_$free
			entry (pointer);
declare	(apl_line_lex_, apl_function_lex_, apl_execute_lex_)
			entry (char (*) aligned, pointer unaligned, bit (1) aligned, fixed bin, pointer);
declare	apl_clear_workspace_
			entry ();
declare	convert_status_code_
			entry (fixed bin (35), char (8), char (100));
declare	get_wdir_		entry () returns (char (168) aligned);
declare	ioa_$ioa_switch	entry options (variable);
declare	iox_$put_chars	entry (ptr, ptr, fixed bin (21), fixed bin (35));
declare	msf_manager_$close	entry (ptr);
declare	msf_manager_$get_ptr
			entry (pointer, fixed bin, bit (1) aligned, pointer, fixed bin (24), fixed bin (35));

/* conditions */

declare	cleanup		condition;

/* automatic */

declare	autoload		bit (1) aligned;
declare	code		fixed bin (35);
declare	dname		char (168),
	ename		char (32);
declare	long_msg		char (100),
	short_msg		char (8);
declare	(not_found, not_copied)
			char (150) aligned varying;
declare	(errors_occurred, found, load_this_one)
			bit (1) aligned;
declare	(
	temporary_bead_pointer
			unaligned,
	loaded_bead_table_pointer
	)		pointer;
declare	ws_segment	dimension (0:63) pointer aligned;
declare	(previous_frame_pointer, parse_frame_ptr, bead_pointer, symbol_pointer)
			pointer unaligned;
declare	fcbp		pointer;
declare	(saved_symbol_count, frame_type, symbol_count, source_length, symbol_index, copy_index, data_elements,
	parseme_count, reduction_number, reduction_type, component)
			fixed bin;
declare	n_words		fixed bin (19);
declare	(bead_number, symbol_number, temp_symbol)
			fixed bin (21);

/* internal static initial */

declare	nl		char (1) aligned internal static initial ("
");

/* based */

declare	loaded_bead_pointer dimension (1) pointer unaligned based (loaded_bead_table_pointer);
declare	suspended_source_length
			fixed binary (29) aligned based;
declare	suspended_source	character (source_length) based aligned;

/* parameters */

declare	(bv_wsid, bv_lock)	char (*) unaligned;
declare	bv_code		fixed bin (35);

/* external static */

declare	(apl_error_table_$cant_autoload, apl_error_table_$cant_load_ws, apl_error_table_$pendent_function_copied,
	apl_error_table_$ws_dir_restricted, apl_error_table_$ws_locked, apl_error_table_$ws_wrong_version,
	error_table_$noentry)
			fixed bin (35) external static;

declare	apl_static_$apl_output
			ptr external static;

/* include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_bead_format;
%include apl_operator_bead;
%include apl_symbol_bead;
%include apl_value_bead;
%include apl_list_bead;
%include apl_function_bead;
%include apl_lexed_function_bead;
%include apl_group_bead;
%include apl_parse_frame;
%include apl_save_frame;
%include apl_saved_ws;
     end /* apl_load_command_ */;
