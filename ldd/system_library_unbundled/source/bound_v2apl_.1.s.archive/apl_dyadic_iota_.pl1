/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* This program implements the dyadic, mixed operators iota and epsilon.
   Written by R.S.Lamson, Summer, 1973.
   Modified by PG on 740909 for new value bead declaration, positioning error marker, and proper handling
	of the value stack and fuzz.
   Modified 780209 by PG to use apl_push_stack_ (bug 278).
*/

apl_dyadic_iota_:
	procedure (operators_argument);

	from_vb = operators_argument.operands (2).value;
	into_vb = operators_argument.operands (1).value;
	data_elements = from_vb -> value_bead.total_data_elements;

	if into_vb -> value_bead.rhorho ^= 1
	then go to left_argument_not_vector;

	if operators_argument.operands (2).on_stack & from_vb -> value_bead.numeric_value
	then result_vb = from_vb;
	else call allocate_result;

	internal_op_code = internal_iota_code;
	match_site = iota_match_site;
	non_match_site = iota_non_match_site;
	go to joined_code;

apl_dyadic_epsilon_:
	entry (operators_argument);

	from_vb = operators_argument.operands (1).value;
	into_vb = operators_argument.operands (2).value;
	data_elements = from_vb -> value_bead.total_data_elements;

	if operators_argument.operands (1).on_stack & from_vb -> value_bead.numeric_value
	then result_vb = from_vb;
	else call allocate_result;

	internal_op_code = internal_epsilon_code;
	match_site = epsilon_match_site;
	non_match_site = epsilon_non_match_site;

joined_code:
	from = from_vb -> value_bead.data_pointer;
	into = into_vb -> value_bead.data_pointer;
	result = result_vb -> value_bead.data_pointer;

	if into_vb -> value_bead.total_data_elements = 0
	then go to never_match;

	if from_vb -> value_bead.character_value
	then if into_vb -> value_bead.character_value
	     then comparison_site = character_comparison_site;
	     else go to never_match;
	else if from_vb -> value_bead.numeric_value
	     then if into_vb -> value_bead.numeric_value
		then comparison_site = numeric_comparison_site;
		else go to never_match;
	     else go to no_type_bits;

	do from_subscript = 0 by 1 while (from_subscript < from_vb -> value_bead.total_data_elements);
	     do into_subscript = 0 by 1 while (into_subscript < into_vb -> value_bead.total_data_elements);
		go to comparison_site;

character_comparison_site:
		if from -> character_datum (from_subscript) =
		   into -> character_datum (into_subscript)
		then go to match_site;
		else go to next_comparison;

numeric_comparison_site:
		if from -> numeric_datum (from_subscript) = into -> numeric_datum (into_subscript)
		then go to match_site;
		else if abs (from -> numeric_datum (from_subscript) - into -> numeric_datum (into_subscript)) <
			abs (ws_info.fuzz * (from -> numeric_datum (from_subscript) + into -> numeric_datum (into_subscript)))
		     then go to match_site;
next_comparison:
	     end;

	     go to non_match_site;

iota_match_site:		/* iota match	*/
iota_non_match_site:	/* iota mismatch.  happens to work because subscript is right coming out of loop
			   and is more efficient than using value_bead.rho				*/

	     result -> numeric_datum (from_subscript) = float (into_subscript + ws_info.index_origin);
	     go to next_element;

epsilon_match_site:		/* epsilon match	*/
	     result -> numeric_datum (from_subscript) = 1.0e0;
	     go to next_element;

epsilon_non_match_site:		/* epsilon mismatch	*/
	     result -> numeric_datum (from_subscript) = 0.0e0;

next_element:
	end;

	go to return_point;

never_match:
	if internal_op_code = internal_iota_code
	then value = float (into_vb -> value_bead.total_data_elements + ws_info.index_origin);
	else value = 0.0e0;

	do from_subscript = 0 by 1 while (from_subscript < data_elements);
	     result -> numeric_datum (from_subscript) = value;
	end;

return_point:
	if internal_op_code = internal_iota_code
	then string (result_vb -> value_bead.type) = integral_value_type;
	else string (result_vb -> value_bead.type) = zero_or_one_value_type;
	operators_argument.result = result_vb;
	return;

left_argument_not_vector:
	operators_argument.error_code = apl_error_table_$iota_argument_not_vector;
	operators_argument.where_error = operators_argument.where_error + 1;
	return;

no_type_bits:
	operators_argument.error_code = apl_error_table_$no_type_bits;
	return;

allocate_result:
	procedure();

	number_of_dimensions = from_vb -> value_bead.rhorho;
	n_words = size (value_bead) + size (numeric_datum) + 1;
	result_vb = apl_push_stack_ (n_words);
	result_vb -> value_bead.total_data_elements = from_vb -> value_bead.total_data_elements;
	result_vb -> value_bead.rhorho = from_vb -> value_bead.rhorho;

	do from_subscript = 1 to from_vb -> value_bead.rhorho;
	     result_vb -> value_bead.rho (from_subscript) = from_vb -> value_bead.rho (from_subscript);
	end;

	result_vb -> value_bead.data_pointer = addr (result_vb -> value_bead.rho (number_of_dimensions + 1));

	if substr (rel (result_vb -> value_bead.data_pointer), 18, 1)
	then result_vb -> value_bead.data_pointer = addrel (result_vb -> value_bead.data_pointer, 1);

end allocate_result;

%include apl_push_stack_fcn;

/* external static */

declare (apl_error_table_$iota_argument_not_vector, apl_error_table_$no_type_bits
	) fixed binary (35) external static;

/* automatic */

declare  value float;
declare (from_vb, into_vb, result_vb, from, into, result) pointer;

declare  (internal_op_code, data_elements, from_subscript, into_subscript) fixed binary (21);
declare	n_words fixed bin (19);

declare (internal_iota_code initial (1), internal_epsilon_code initial (2)) fixed binary (21) internal static;
declare (match_site, non_match_site, comparison_site) label local;

/* builtin */

declare	(abs, addr, addrel, fixed, float, mod, rel, size, string, substr) builtin;

/* include files */

%include apl_number_data;
%include apl_bead_format;
%include apl_value_bead;
%include apl_ws_info;
%include apl_operators_argument;
end apl_dyadic_iota_;
