/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_encode_: proc(operators_argument);

/*
 * this procedure implements the APL T operator
 *
 * written 1 August 1973 by DAM
 * Fixed 740827 by PG to set value_stack_ptr to protect result!
   Modified 770413 by PG to fix bug 208 (infinite loop when given null vectors).
   Modified 770414 by PG to fix bug 280 (was walking thru rows on left instead of columns).
 */

/* automatic */

dcl left_vb pointer,			/* the usual pointer variables */
    left pointer,
    right_vb pointer,
    right pointer,
    result_vb pointer,
    result pointer,
    final_result_vb pointer,
    final_result pointer,

    left_data_elements fixed bin (21),		/* elements in left opnd */
    right_data_elements fixed bin (21),		/* elements in right opnd */
    data_elements fixed bin (21),		/* number of elements in the result */
    rhorho fixed bin,			/* number of dimensions of the result */
    n_words fixed bin (19),			/* number of words in the result value bead */
    i fixed bin,				/* do-loop var. */
    j fixed bin,				/* .. */

    plane_base fixed bin (21),		/* offset of current plane in left opnd */
    last_column_on_this_plane fixed bin (21),
    column_base fixed bin (21),		/* offset of first element in current column */
    col_pos fixed bin (21),			/* position in current column */
    right_pos fixed bin(21),			/* position of current number to be encoded, in right operand */
    interval_between_columns fixed bin (21),
    interval_between_columns_minus_1 fixed bin (21),
    highest_column_element fixed bin (21),
    rho_subscript fixed bin (21),
    interval_between_elements fixed bin (21),
    column_length fixed bin (21),

    accum float,				/* portion of number not yet encoded (quotient after each step) */
    divisor float,				/* copy of number from left operand */
    quotient float,				/* quotient result of APL div-mod operation */
    residue float;				/* remainder result of .. .. .. */

/* builtins */

dcl (abs, addr, addrel, rel, max, substr, string, size) builtin;

/* external static */

dcl	(apl_error_table_$domain,
	 apl_error_table_$compatibility_error) fixed bin(35) external;


%include apl_number_data;
%include apl_ws_info;
%include apl_operators_argument;
%include apl_operator_bead;
%include apl_value_bead;
%include apl_bead_format;

/* pick up arguments, make sure they are numbers */

	left_vb = operands(1).value;
	left_data_elements = left_vb -> value_bead.total_data_elements;
	left = left_vb -> value_bead.data_pointer;

	if (left_data_elements ^= 0) & ^left_vb -> value_bead.numeric_value
	then go to domain_error_left;

	right_vb = operands(2).value;
	right_data_elements = right_vb -> value_bead.total_data_elements;
	right = right_vb -> value_bead.data_pointer;

	if (right_data_elements ^= 0) & ^right_vb -> value_bead.numeric_value
	then go to domain_error_right;

/* determine length of columns of radices  (and of result digits) */

	if left_vb -> value_bead.rhorho = 0		/* a scalar */
	then column_length = 1;
	else column_length = max (1, left_vb -> value_bead.rho (1));

/* compute size of result (product of sizes of operands) and allocate it */

	data_elements = left_vb -> value_bead.total_data_elements * right_vb -> value_bead.total_data_elements;
	number_of_dimensions, rhorho = left_vb -> value_bead.rhorho + right_vb -> value_bead.rhorho;
	n_words = size (value_bead) + size (numeric_datum) + 1;
	result_vb = apl_push_stack_ (n_words);

	string(result_vb -> value_bead.type) = integral_value_type;	/* will be changed to numeric if necessary */
	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = rhorho;
	result = addrel (result_vb, size (value_bead));
	if substr (rel (result), 18, 1)
	then result = addrel (result, 1);

	result_vb -> value_bead.data_pointer = result;

/* rho of result is concatenation of rhos of operands */

	do i = 1 by 1 while (i <= left_vb -> value_bead.rhorho);
	   result_vb -> value_bead.rho(i) = left_vb -> value_bead.rho(i);
	   end;
	do j = i by 1 while (j <= rhorho);
	   result_vb -> value_bead.rho(j) = right_vb -> value_bead.rho(j-i+1);
	   end;

	interval_between_elements = 1;
	do rho_subscript = 2 to left_vb -> value_bead.rhorho;
	     interval_between_elements = interval_between_elements * left_vb -> value_bead.rho (rho_subscript);
	end;

	interval_between_columns = interval_between_elements * column_length;
	interval_between_columns_minus_1 = interval_between_columns - interval_between_elements;

/* walk through columns of left arg, elements of right arg, and elements of left column */

	do plane_base = 0 repeat (plane_base + interval_between_columns) while (plane_base < left_data_elements);
	     last_column_on_this_plane = plane_base + interval_between_elements;
	     do column_base = plane_base by 1 while (column_base < last_column_on_this_plane);
		highest_column_element = column_base + interval_between_columns_minus_1;
		do right_pos = 0 by 1 while (right_pos < right_data_elements);
		     accum = right -> numeric_datum (right_pos);
		     do col_pos = highest_column_element repeat (col_pos - interval_between_elements)
			while (col_pos >= column_base);

			divisor = left -> numeric_datum (col_pos);
			if divisor <= ws_info.fuzz		/* if divisor is fuzz-less-or-equal to zero */
			then if ws_info.compatibility_check_mode
			     then go to compatibility_error_left; /* old APL acted differently with neg or zero left */

			if abs (divisor) > ws_info.fuzz	/* if divisor is not fuzz-equal to zero */
			then do;
				quotient = apl_floor_ (accum / divisor);
				residue = accum - divisor*quotient;
			     end;
			else do;			/* renege on integer type */
				string (result_vb -> value_bead.type) = string (right_vb -> value_bead.type);
				residue = accum;
				quotient = 0;
			     end;

			result -> numeric_datum (col_pos * right_data_elements + right_pos) = residue;
			accum = quotient;
		     end;
		end;
	     end;
	end;

/* now put result in proper place */

	if operators_argument.operands (2).on_stack
	then ws_info.value_stack_ptr = right_vb;
	else if operators_argument.operands (1).on_stack
	     then ws_info.value_stack_ptr = left_vb;
	     else do;
		     operators_argument.result = result_vb;
		     return;
		end;

	final_result_vb = apl_push_stack_ (n_words);
	string(final_result_vb -> value_bead.type) = string(result_vb -> value_bead.type);
	final_result_vb -> value_bead.rhorho = result_vb -> value_bead.rhorho;
	final_result_vb -> value_bead.total_data_elements = data_elements;
	do i = 1 to rhorho;			/* use do loop because for bad code for assigning value_bead.rho(*) */
	   final_result_vb -> value_bead.rho(i) = result_vb -> value_bead.rho(i);
	   end;

	final_result = addr(final_result_vb -> value_bead.rho(rhorho+1));
	if substr(rel(final_result), 18, 1) then final_result = addrel(final_result, 1);
	final_result_vb -> data_pointer = final_result;

	final_result -> numeric_datum (*) = result -> numeric_datum (*);
	operators_argument.result = final_result_vb;
	return;

compatibility_error_left:			/* if ws_info .compatibility_check_mode was on and a element
					   of left arg was neg or zero */
	operators_argument.where_error = operators_argument.where_error + 1;
	operators_argument.error_code = apl_error_table_$compatibility_error;
	return;

domain_error_left:
	operators_argument.where_error = operators_argument.where_error + 1;
	go to domain_error;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;

domain_error:
	operators_argument.error_code = apl_error_table_$domain;
	return;

%include apl_push_stack_fcn;

%include apl_floor_fcn;
end /* apl_encode_ */;
