/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* APL External Functions to access the full (ycch) panoply
   of  iox stream files
*/

/* stolen from apl_read_segment_ 1/28/80 BIM */

/* **************************************************************
   *   for the first implementation, we support the following:   *
   *   attach_name				       *
   *   open					       *
   *   get_chars					       *
   *   get_line					       *
   *   put_chars					       *
   *   close					       *
   *   detach_iocb				       *
   *   						       *
   *   packed pointers are left around in fixed bin (35)'s       *
   ************************************************************** */


/* *******************************************************************
   *   APL Definitions and calling sequences:			  *
   *   attach_name					  *
   *   )DFN IOX_ATTACH_NAME APL_IOX_$ATTACH_NAME		  *
   *   IOCB<-Switch_name IOX_ATTACH_NAME Attach_description	  *
   *   							  *
   *   open						  *
   *   )DFN IOX_OPEN APL_IOX_$OPEN				  *
   *   OpenMode IOX_OPEN IOCB (character name of it, long or short)	  *
   *   							  *
   *   get_chars						  *
   *   )DFN IOX_GET_CHARS APL_IOX_$GET_CHARS			  *
   *   RESULT<-HowMany IOX_GET_CHARS IOCB			  *
   *   							  *
   *   get_line						  *
   *   )MFN IOX_GET_LINE APL_IOX_$GET_LINE			  *
   *   RESULT<-IOX_GET_LINE IOCB				  *
   *   							  *
   *   close						  *
   *   )MFN IOX_CLOSE APL_IOX_$CLOSE				  *
   *   IOX_CLOSE IOCB					  *
   *   							  *
   *   detach_iocb					  *
   *   )MFN IOX_DETACH_IOCB APL_IOX_$DETACH_IOCB		  *
   ******************************************************************* */

apl_iox_$attach_name:
     procedure (operators_argument);

/* automatic */

declare  code fixed bin (35),				/* Multics status code */
         attach_description char (512),
         i fixed bin,
         get_line_flag bit (1),
         max_size fixed bin (21),
         ql fixed bin (21),
         integer fixed bin (35),
         n_words fixed bin (19),			/* number of words to allocate on value stack */
         found_mode bit (1),
         iox_mode char (24),
         switch_name char (32),
         iocbp ptr, packed_iocbp ptr unal,
         result ptr,				/* pointer to result data array */
         result_vb ptr,				/* pointer to result value bead */
         right ptr,					/* pointer to right data array */
         right_vb ptr,				/* pointer to right value bead */
         left ptr,
         left_vb ptr;
						/* based */

declare  right_arg_string char (data_elements) based (right);
declare  right_arg_integer fixed bin (35) based (right);
declare  left_arg_string char (data_elements) based (left);
declare  float_overlay float bin (63) based aligned;
declare  line_buffer char (ql) based (apl_iox_temp_seg_ptr_);

/* builtins */

declare (addrel, divide, null, size, string) builtin;

/* entries */

dcl  get_entry entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)) variable;
dcl (get_temp_segment_, release_temp_segment_) entry (char (*), pointer, fixed bin (35));

/* external */
dcl  apl_iox_temp_seg_ptr_ ext static ptr init (null());
dcl  sys_info$max_seg_size fixed bin (19) external static;
/* errors */

dcl  error_table_$end_of_info fixed bin (35) ext static;
						/* include files */

%include iox_dcls;
%include iox_modes;
%include apl_external_function;

/* program -- attach_name entrypoint */

	right_vb = operators_argument.operands (2).value; /* Get ptr to right argument */
	if ^right_vb -> value_bead.value		/* Make sure argument is a value bead */
	then go to domain_error_right;

	if ^right_vb -> value_bead.character_value	/* Make sure argument is character */
	then go to domain_error_right;

	right = right_vb -> value_bead.data_pointer;	/* Point to data array */
	data_elements = right_vb -> value_bead.total_data_elements;

	attach_description = right_arg_string;

	left_vb = operators_argument.operands (1).value;	/* Get ptr to left argument */
	if ^left_vb -> value_bead.value		/* Make sure argument is a value bead */
	then go to domain_error_left;

	if ^left_vb -> value_bead.character_value	/* Make sure argument is character */
	then go to domain_error_left;

	left = left_vb -> value_bead.data_pointer;	/* Point to data array */
	data_elements = left_vb -> value_bead.total_data_elements;
	if data_elements > 32 then goto length_error_left;
	switch_name = left_arg_string;

	call POP_ARGS;

	call iox_$attach_name (switch_name, iocbp, attach_description, null (), code);
	if code ^= 0 then goto set_code;
	call get_temp_segment_ ("apl_iox_", apl_iox_temp_seg_ptr_, code);
	packed_iocbp = iocbp;
	unspec (integer) = unspec (packed_iocbp);

/* put result on value stack */
/* Calculate size of result bead. Note that result data array */
/* must be double-word aligned. */

	number_of_dimensions = 0;			/* for attach we return scalar */
	data_elements = 1;
	n_words = size (float_overlay);
	call ALLOCATE_RESULT ("1"b);

/* Give result bead the correct type */

	string (result_vb -> value_bead.type) = integral_value_type;

/* The result value bead is all set up.  Perform the operation */

	result -> float_overlay = integer;

	operators_argument.result = result_vb;
	return;

rank_error_left:
	operators_argument.where_error = operators_argument.where_error + 2;
rank_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;
	operators_argument.error_code = apl_error_table_$rank;
	return;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 1; /* Mark right operand */
	operators_argument.error_code = apl_error_table_$domain;
	return;

domain_error_left:
	operators_argument.where_error = operators_argument.where_error + 1; /* Mark right operand */
	operators_argument.error_code = apl_error_table_$domain;
	return;

length_error_left:
	operators_argument.where_error = operators_argument.where_error + 1; /* Mark right operand */
	operators_argument.error_code = apl_error_table_$length;
	return;

set_code:
	operators_argument.error_code = code;
	return;

open:	entry (operators_argument);

	call PICKUP_IOCB;				/* right arg is IOCBP */
	left_vb = operators_argument.operands (1).value;	/* Get ptr to left argument */
	if ^left_vb -> value_bead.value		/* Make sure argument is a value bead */
	then go to domain_error_left;

	if ^left_vb -> value_bead.character_value	/* Make sure argument is character */
	then go to domain_error_left;

	left = left_vb -> value_bead.data_pointer;	/* Point to data array */
	data_elements = left_vb -> value_bead.total_data_elements;
	if data_elements > 24 then goto length_error_left;
	iox_mode = left_arg_string;

	call POP_ARGS;

	found_mode = ""b;
	do i = 1 to 13 while (^found_mode);
	     if iox_modes (i) = iox_mode | short_iox_modes (i) = iox_mode then found_mode = "1"b;
	end;
	if ^found_mode then goto domain_error_left;
	call iox_$open (iocbp, i - 1, ""b, code);
	if code ^= 0 then goto set_code;
	return;					/* no value to return on open */

get_line:	entry (operators_argument);

	get_line_flag = "1"b;
	max_size = sys_info$max_seg_size * 4; /* can't get bigger */
	get_entry =iox_$get_line;
	goto GET_COMMON;

get_chars:
	entry (operators_argument);

	get_line_flag = ""b;
	get_entry = iox_$get_chars;
	left_vb = operators_argument.operands (1).value;	/* Get ptr to left argument */
	if ^left_vb -> value_bead.value		/* Make sure argument is a value bead */
	then go to domain_error_left;
	if ^left_vb -> value_bead.integral_value /*cant read 1/2 char */
	then go to domain_error_left;

	left = left_vb -> value_bead.data_pointer;
	if left_vb -> value_bead.rhorho > 0 then goto rank_error_left;
	data_elements = left_vb -> value_bead.total_data_elements;
	max_size = left -> numeric_datum (0);
	
GET_COMMON:
	call PICKUP_IOCB;
	call POP_ARGS;
	call get_entry (iocbp, apl_iox_temp_seg_ptr_, max_size, ql, code);

    /******************************************************
     *   this should take long record into account, but   *
     *   i dont see how we could get more thana segment   *
     *   of line...				        *
     ******************************************************/

	if code ^= 0 & code ^= error_table_$end_of_info then goto set_code;
	if code = error_table_$end_of_info then do;
	     number_of_dimensions = 2;		/* indicate eof */
	     data_elements = 0;
	     n_words = 0;
	     call ALLOCATE_RESULT (""b);
	     result_vb -> value_bead.rho (*) = 0;
	     string (result_vb -> value_bead.type) = character_value_type;
	     operators_argument.result = result_vb;
	     return;
	end;
	else do;					/* normal return, return the line */
	     if get_line_flag then do; /* clean up after things */
		ql = ql - 1; /* dont return the NL */
		ql = length (rtrim (line_buffer, " "));
	     end;
	     
	     number_of_dimensions = 1;
	     data_elements = ql;
	     n_words = size (character_string_overlay);
	     call ALLOCATE_RESULT (""b);
	     result_vb -> value_bead.rho (1) = ql;
	     string (result_vb -> value_bead.type) = character_value_type;
	     result -> character_string_overlay = substr (line_buffer, 1, ql);
	     operators_argument.result = result_vb;
	     return;
	end;

put_chars:
	entry (operators_argument);

	call PICKUP_IOCB;

	left_vb = operators_argument.operands  (1).value;

	if ^left_vb -> value_bead.value
	then go to domain_error_left;

	if ^left_vb -> value_bead.character_value
	then go to domain_error_left;

	data_elements = left_vb -> value_bead.total_data_elements;
	left = left_vb -> value_bead.data_pointer;

	call POP_ARGS;

	if data_elements = 0
	then return;

	call iox_$put_chars (iocbp, left, data_elements, code);

/* No result */

	operators_argument.error_code = code;
	return;

close:	entry (operators_argument);

	call PICKUP_IOCB;
	call POP_ARGS;
	call iox_$close (iocbp, code);
	if code ^= 0 then goto set_code;
	return;

detach_iocb: entry (operators_argument);

	call PICKUP_IOCB;
	call POP_ARGS;
	call iox_$detach_iocb (iocbp, code);
	if code ^= 0 then goto set_code;
	if apl_iox_temp_seg_ptr_ ^= null() then
	     call release_temp_segment_ ("apl_iox_", apl_iox_temp_seg_ptr_,
	     code);
	return;

/* Internal procedures */

ALLOCATE_RESULT:
	proc (maligned);


dcl  maligned bit (1);

	     n_words = n_words + size (value_bead) + 1;
	     result_vb = apl_push_stack_ (n_words);

/* Set pointer to data array. */

	     result = addrel (result_vb, size (value_bead));
	     if maligned then
		if substr (rel (result), 18, 1) then
		     result = addrel (result, 1);

/* Initialize new value bead. */

	     result_vb -> value_bead.total_data_elements = data_elements;
	     result_vb -> value_bead.rhorho = number_of_dimensions;
	     result_vb -> value_bead.data_pointer = result;

	end;

PICKUP_IOCB: proc;
	     right_vb = operators_argument.operands (2).value; /* Get ptr to right argument */
	     if ^right_vb -> value_bead.value		/* Make sure argument is a value bead */
	     then go to domain_error_right;

	     if ^right_vb -> value_bead.integral_value
	     then go to domain_error_right;

	     right = right_vb -> value_bead.data_pointer; /* Point to data array */
	     if right_vb -> rhorho ^= 0 then goto rank_error_right;

	     data_elements = right_vb -> value_bead.total_data_elements;

	     integer = right -> float_overlay;		/* integer */
	     unspec (packed_iocbp) = unspec (integer);	/* ppointer */
	     iocbp = packed_iocbp;			/* whew -- back to pointer */

	     return;
	end;


POP_ARGS: proc;


/* Pop args off value stack, if necessary. */

	if operators_argument.operands (2).on_stack
	then ws_info.value_stack_ptr = right_vb;
	else if operators_argument.operands (1).on_stack
	then ws_info.value_stack_ptr = left_vb;
	return;
	end;

%include apl_push_stack_fcn;
     end;
