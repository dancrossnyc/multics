/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
apl_coded_: procedure (operators_argument);

/* Adapted from apl_coded_file_routines_ by Mike Bonham, 80-02-15 */
/* Modified 81-12-21 by H. Hoover to tidy up. */
/* Modified 83-11-21 by A. Dewar to change handling of long_record error, */
/*     to continue untie loop until entire vector tried, */
/*     to use pathname_$component_check to construct absolute pathnames. */

/* external static */

dcl  apl_error_table_$domain fixed bin (35) ext,
     apl_error_table_$length fixed bin (35) ext,
     apl_error_table_$rank fixed bin (35) ext,
     apl_error_table_$system_error fixed bin (35) ext,
     error_table_$end_of_info fixed bin (35) ext,
     error_table_$long_record fixed bin (35) ext,
     error_table_$noentry fixed bin (35) ext,
     error_table_$short_record fixed bin (35) ext;

/* entries */

dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
     hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)),
     ioa_ entry options (variable),
     iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35)),
     iox_$close entry (ptr, fixed bin (35)),
     iox_$detach_iocb entry (ptr, fixed bin (35)),
     iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
     iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35)),
     iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35)),
     iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35)),
     pathname_$component_check entry (char (*), char (*), char (*), char (*), fixed bin (35)),
     unique_chars_ entry (bit (*)) returns (char (15));

/* builtins */

dcl  addrel builtin,
     ceil builtin,
     hbound builtin,
     lbound builtin,
     ltrim builtin,
     null builtin,
     rel builtin,
     rtrim builtin,
     size builtin,
     string builtin,
     substr builtin;

/* internal static */

dcl 1 tcb (100) aligned internal static,
    2 iocb_ptr ptr init ((100) null),
    2 switch char (15) unaligned,
    2 eof bit (1) init ((100) (1)"0"b);

dcl  max_line_length fixed bin internal static options (constant) init (256),
     time_iofns_invoked fixed bin (71) internal static init (0);

/* automatic */

dcl  attach_desc char (256),
     b_ptr ptr,
     buf_line_ptr ptr,
     code fixed bin (35),
     data_elements fixed bin (21),
     file_dname char (168),
     file_ename char (32),
     file_pathname char (168),
     file_tie_error_occurred bit (1),
     left ptr,
     left_vb ptr,
     lines_read fixed bin,
     longest fixed bin,
     message char (100) aligned,
     n_read fixed bin (21),
     n_words fixed bin (19),
     no_of_lines fixed bin,
     pos_request_type fixed bin,
     pos_skip_count fixed bin (21),
     record_length fixed bin (21),
     result ptr,
     result_vb ptr,
     right ptr,
     right_vb ptr,
     subscript fixed bin (21),
     tcbx fixed bin,
     tie_num fixed bin;

/* based */

dcl  buffer (no_of_lines) char (max_line_length) based (b_ptr) init ((no_of_lines) (1)" "),
     minimum_buffer (lines_read) char (longest) based;

/* 'file_name' CREATE file_number */

create:	entry (operators_argument);
	if time_iofns_invoked < ws_info.time_invoked then do;
	     call close_files;
	     time_iofns_invoked = ws_info.time_invoked;
	end;
	call decode_file_id;
	call decode_tie_num;

	call hcs_$status_minf (file_dname, file_ename, 1, (0), (0), code);
	if code ^= error_table_$noentry		/* If file already exists... */
	then goto file_name_error;

	if operators_argument.operands (2).on_stack	/* Pop input args, if necessary */
	then ws_info.value_stack_ptr = right_vb;
	else if operators_argument.operands (1).on_stack
	then ws_info.value_stack_ptr = left_vb;

	call open_file;
	return;

/* R -< EOF file-number-vector

   Returns bit_vector of 'end-of-file status' for all files specified */

eof:	entry (operators_argument);
	if time_iofns_invoked < ws_info.time_invoked then do;
	     call close_files;
	     time_iofns_invoked = ws_info.time_invoked;
	end;

	right_vb = operators_argument.operands (2).value;

	if ^right_vb -> general_bead.value
	then go to domain_error_right;

	if ^right_vb -> value_bead.numeric_value
	then go to domain_error_right;

	if (right_vb -> value_bead.total_data_elements > 1) & (right_vb -> value_bead.rhorho ^= 1)
	then go to rank_error_right;

/* Temporarily insist that args must be integers */

	if ^right_vb -> value_bead.integral_value
	then go to domain_error_right;

	right = right_vb -> value_bead.data_pointer;

	data_elements = right_vb -> value_bead.total_data_elements;
	if operators_argument.on_stack (2)
	then do;					/*  Overlay result on right arg.  */
	     result_vb = right_vb;
	     string (result_vb -> value_bead.type) = zero_or_one_value_type;
	     result = right;
	end;
	else do;					/*  Allocate result of same shape as right arg.  */
	     number_of_dimensions = right_vb -> value_bead.rhorho;
	     n_words = size (value_bead) + size (numeric_datum) + 1;
	     result_vb = apl_push_stack_ (n_words);
	     string (result_vb -> value_bead.type) = zero_or_one_value_type;
	     result_vb -> value_bead.total_data_elements = data_elements;
	     result_vb -> value_bead.rhorho = number_of_dimensions;
	     result_vb -> value_bead.rho (1) = data_elements;
	     result = addrel (result_vb, size (value_bead));
	     if substr (rel (result), 18, 1)
	     then result = addrel (result, 1);
	     result_vb -> value_bead.data_pointer = result;
	end;

	do subscript = 0 by 1 while (subscript < right_vb -> value_bead.total_data_elements);
	     tie_num = right -> numeric_datum (subscript);

	     if tcb.iocb_ptr (tie_num) ^= null
	     then
		if tcb.eof (tie_num)
		then result -> numeric_datum (subscript) = 1;
		else result -> numeric_datum (subscript) = 0;
	     else goto file_tie_error;
	end;

	operators_argument.result = result_vb;
	return;

/* R -< NUMS

   Returns a numeric vector holding the file numbers of all tied files.
*/

nums:	entry (operators_argument);
	if time_iofns_invoked < ws_info.time_invoked then do;
	     call close_files;
	     time_iofns_invoked = ws_info.time_invoked;
	end;

	data_elements = 0;				/* Count number of open files */
	do tcbx = lbound (tcb, 1) to hbound (tcb, 1);
	     if tcb.iocb_ptr (tcbx) ^= null
	     then data_elements = data_elements + 1;
	end;

	number_of_dimensions = 1;			/* Get size of result bead */
	n_words = size (value_bead) + size (numeric_datum) + 1;
	result_vb = apl_push_stack_ (n_words);

	string (result_vb -> value_bead.type) = integral_value_type; /* Fill in result bead */
	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = number_of_dimensions;
	result_vb -> value_bead.rho (1) = data_elements;
	result = addrel (result_vb, size (value_bead));
	if substr (rel (result), 18, 1)
	then result = addrel (result, 1);

	result_vb -> value_bead.data_pointer = result;

	subscript = -1;				/* Fill in vector of file numbers */
	do tcbx = lbound (tcb, 1) to hbound (tcb, 1);
	     if tcb.iocb_ptr (tcbx) ^= null
	     then do;
		subscript = subscript + 1;
		result -> numeric_datum (subscript) = tcbx;
	     end;
	end;

	operators_argument.result = result_vb;
	return;

/* position-code [,skip-count] POSITION file-number */

position:	entry (operators_argument);
	if time_iofns_invoked < ws_info.time_invoked then do;
	     call close_files;
	     time_iofns_invoked = ws_info.time_invoked;
	end;

	call decode_tie_num;
	if tcb.iocb_ptr (tie_num) = null
	then goto file_not_tied;
	left_vb = operators_argument (1).value;
	if ^left_vb -> general_bead.value then goto domain_error_left;
	if ^left_vb -> value_bead.integral_value then goto domain_error_left;
	data_elements = left_vb -> value_bead.total_data_elements;
	if data_elements < 1 | data_elements > 2
	then goto length_error_left;

	left = left_vb -> value_bead.data_pointer;
	pos_request_type = left -> numeric_datum (0);
	if data_elements < 2
	then pos_skip_count = 1;
	else pos_skip_count = left -> numeric_datum (1);

	if operators_argument (2).on_stack then ws_info.value_stack_ptr = right_vb;
	else if operators_argument (1).on_stack then ws_info.value_stack_ptr = left_vb;

	if (pos_request_type < -1) | (pos_request_type > 3) then goto domain_error_left;
	call iox_$position (tcb.iocb_ptr (tie_num), pos_request_type, pos_skip_count, code);
	if code = 0
	then if pos_request_type = 1
	     then tcb.eof (tie_num) = "1"b;
	     else tcb.eof (tie_num) = "0"b;
	else if code = error_table_$end_of_info
	then if pos_skip_count > 0
	     then tcb.eof (tie_num) = "1"b;
	     else tcb.eof (tie_num) = "0"b;
	else goto position_out_of_bounds;
	operators_argument.result = null;
	return;

/* R <- no_of_lines READ file_number */

read:	entry (operators_argument);
	if time_iofns_invoked < ws_info.time_invoked then do;
	     call close_files;
	     time_iofns_invoked = ws_info.time_invoked;
	end;

	call decode_tie_num;
	if tcb.iocb_ptr (tie_num) = null then goto file_not_tied;
	left_vb = operators_argument (1).value;
	if left_vb = null then no_of_lines = 1;
	else do;
	     if ^left_vb -> general_bead.value then goto domain_error_left;
	     if ^left_vb -> value_bead.integral_value then goto domain_error_left;
	     if left_vb -> value_bead.total_data_elements ^= 1 then goto length_error_left;
	     left = left_vb -> value_bead.data_pointer;
	     no_of_lines = left -> numeric_datum (0);
	     if no_of_lines < 1 then goto domain_error_left;
	end;
	if operators_argument (2).on_stack then ws_info.value_stack_ptr = right_vb;
	else if operators_argument (1).on_stack then ws_info.value_stack_ptr = left_vb;

	allocate buffer set (b_ptr);
	tcb.eof (tie_num) = "0"b;
	lines_read = 0;
	longest = 0;
	do subscript = 1 to no_of_lines while (^tcb.eof (tie_num));
	     buf_line_ptr = addrel (b_ptr, lines_read * ceil (max_line_length/4.0));
	     call iox_$get_line (tcb.iocb_ptr (tie_num), buf_line_ptr, (max_line_length), n_read, code);
	     if code = error_table_$long_record
	     then go to cant_read_record;
	     else if (code = error_table_$end_of_info)| (code = error_table_$short_record)
	     then tcb.eof (tie_num) = "1"b;
	     else if code = 0 then do;
		substr (buffer (lines_read + 1), n_read, 1) = " ";
		n_read = n_read -1;
	     end;
	     if n_read > longest then longest = n_read;
	     lines_read = lines_read + 1;
	end;

	if (lines_read = 1) & (longest = 0) then lines_read = 0;

/* allocate char_matrix bead with minimum dimension */
	if lines_read <= 1
	then number_of_dimensions = 1;
	else number_of_dimensions = 2;
	data_elements = lines_read * longest;
	n_words = size (value_bead) + ceil (data_elements / 4.0);
	result_vb = apl_push_stack_ (n_words);
	string (result_vb -> value_bead.type) = character_value_type;
	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = number_of_dimensions;
	result_vb -> value_bead.rho (1) = lines_read;
	result_vb -> value_bead.rho (number_of_dimensions) = longest;
	result = addrel (result_vb, size (value_bead));
	result_vb -> value_bead.data_pointer = result;

	if longest > 0 then
	     do subscript = 1 to lines_read;
	     result -> minimum_buffer (subscript) = buffer (subscript);
	end;

	free buffer;
	operators_argument.result = result_vb;
	return;

/* REWIND file-number-vector

   Rewinds all files specified in the vector argument. */

rewind:	entry (operators_argument);
	if time_iofns_invoked < ws_info.time_invoked then do;
	     call close_files;
	     time_iofns_invoked = ws_info.time_invoked;
	end;

	right_vb = operators_argument.operands (2).value;

	if operators_argument.operands (2).on_stack
	then ws_info.value_stack_ptr = right_vb;

	if ^right_vb -> general_bead.value
	then go to domain_error_right;

	if ^right_vb -> value_bead.numeric_value
	then go to domain_error_right;

	if (right_vb -> value_bead.total_data_elements > 1) & (right_vb -> value_bead.rhorho ^= 1)
	then go to rank_error_right;

/* Temporarily insist that args must be integers */

	if ^right_vb -> value_bead.integral_value
	then go to domain_error_right;

	right = right_vb -> value_bead.data_pointer;

	do subscript = 0 by 1 while (subscript < right_vb -> value_bead.total_data_elements);
	     tie_num = right -> numeric_datum (subscript);

	     if tcb.iocb_ptr (tie_num) ^= null
	     then do;
		call iox_$position (tcb.iocb_ptr (tie_num), -1, 0, code);
		tcb.eof (tie_num) = "0"b;
	     end;
	     else goto file_tie_error;
	end;

	operators_argument.result = null;
	return;

/* 'file_name' TIE file_number */

tie:	entry (operators_argument);
	if time_iofns_invoked < ws_info.time_invoked then do;
	     call close_files;
	     time_iofns_invoked = ws_info.time_invoked;
	end;

	call decode_file_id;
	call decode_tie_num;

	if operators_argument.operands (2).on_stack	/* Pop input args, if necessary */
	then ws_info.value_stack_ptr = right_vb;
	else if operators_argument.operands (1).on_stack
	then ws_info.value_stack_ptr = left_vb;

	call open_file;
	return;

/* UNTIE file-number-vector

   Unties all files specified in the vector argument. */

untie:	entry (operators_argument);
	if time_iofns_invoked < ws_info.time_invoked then do;
	     call close_files;
	     time_iofns_invoked = ws_info.time_invoked;
	end;

	right_vb = operators_argument.operands (2).value;

	if operators_argument.operands (2).on_stack
	then ws_info.value_stack_ptr = right_vb;

	if ^right_vb -> general_bead.value
	then go to domain_error_right;

	if ^right_vb -> value_bead.numeric_value
	then go to domain_error_right;

	if (right_vb -> value_bead.total_data_elements > 1) & (right_vb -> value_bead.rhorho ^= 1)
	then go to rank_error_right;

/* Temporarily insist that args must be integers */

	if ^right_vb -> value_bead.integral_value
	then go to domain_error_right;

	right = right_vb -> value_bead.data_pointer;

	file_tie_error_occurred = "0"b;

	do subscript = 0 by 1 while (subscript < right_vb -> value_bead.total_data_elements);
	     tie_num = right -> numeric_datum (subscript);

	     if tcb.iocb_ptr (tie_num) ^= null
	     then do;
		call iox_$close (tcb.iocb_ptr (tie_num), code);
		call iox_$detach_iocb (tcb.iocb_ptr (tie_num), code);
		tcb.iocb_ptr (tie_num) = null;
	     end;
	     else file_tie_error_occurred = "1"b;
	end;

	if file_tie_error_occurred
	then go to file_tie_error;

	operators_argument.result = null;
	return;


/* 'char_string' WRITE file_number */

write:	entry (operators_argument);
	if time_iofns_invoked < ws_info.time_invoked then do;
	     call close_files;
	     time_iofns_invoked = ws_info.time_invoked;
	end;

	call decode_tie_num;

	if tcb.iocb_ptr (tie_num) = null
	then go to file_not_tied;


	left_vb = operators_argument (1).value;
	if ^left_vb -> value_bead.character_value then goto domain_error_left;

	if (left_vb -> value_bead.rhorho > 1) & (left_vb -> value_bead.total_data_elements > 1)
	then goto rank_error_left;

	if operators_argument (2).on_stack
	then ws_info.value_stack_ptr = right_vb;	/* pop arg off stack */
	else if operators_argument.operands (1).on_stack
	then ws_info.value_stack_ptr = left_vb;

	record_length = left_vb -> value_bead.total_data_elements;

	left = left_vb -> value_bead.data_pointer;
	call iox_$put_chars (tcb.iocb_ptr (tie_num), left, record_length, code);
	if code ^= 0 then goto cant_write_record;

	operators_argument.result = null;
	return;

already_tied:
	call ioa_ ("file ^d already tied", tie_num);
	go to system_error;

cant_attach:
	call expand_code;
	call ioa_ ("cant attach file: ^a", message);
	go to system_error;

cant_open:
	call expand_code;
	call ioa_ ("cant open file: ^a", message);
	go to system_error;

cant_read_record:
	call expand_code;
	call ioa_ ("cant read record: ^a", message);
	go to system_error;

cant_write_record:
	call expand_code;
	call ioa_ ("cant write record: ^a", message);

file_name_error:
	call ioa_ ("file name error");
	go to system_error;

file_not_tied:
	call ioa_ ("file ^d not tied", tie_num);
	go to system_error;

file_tie_error:
	call ioa_ ("file tie error");
	go to system_error;

position_out_of_bounds:
	call ioa_ ("position out of bounds.");
	goto system_error;





domain_error_left:
domain_error_right:
	operators_argument.error_code = apl_error_table_$domain;
	return;

length_error_left:
length_error_right:
	operators_argument.error_code = apl_error_table_$length;
	return;

rank_error_left:
rank_error_right:
	operators_argument.error_code = apl_error_table_$rank;
	return;

system_error:
	operators_argument.error_code = apl_error_table_$system_error;
	return;
%include apl_push_stack_fcn;
close_files: proc;
	     do subscript = 1 to 100;
		tcb.eof (subscript) = "0"b;
		tcb.switch (subscript) = "";
		if tcb.iocb_ptr (subscript) ^= null () then do;
		     call iox_$close (tcb.iocb_ptr (subscript), code);
		     call iox_$detach_iocb (tcb.iocb_ptr (subscript), code);
		     tcb.iocb_ptr (subscript) = null ();
		end;
	     end;
	end close_files;
decode_file_id: procedure;

	     left_vb = operators_argument.operands (1).value;

	     if ^left_vb -> general_bead.value
	     then go to domain_error_left;

	     if ^left_vb -> value_bead.character_value
	     then go to domain_error_left;

	     data_elements = left_vb -> value_bead.total_data_elements;
	     if data_elements < 1
	     then go to length_error_left;

	     if data_elements > 1 & left_vb -> value_bead.rhorho ^= 1
	     then go to rank_error_left;

	     left = left_vb -> value_bead.data_pointer;

	     call expand_pathname_ (ltrim (left -> character_string_overlay), file_dname, file_ename, code);
	     if code ^= 0
	     then goto file_name_error;
	     return;

	end decode_file_id;
decode_tie_num: procedure;

	     right_vb = operators_argument.operands (2).value;

	     if ^right_vb -> general_bead.value
	     then go to domain_error_right;

	     if ^right_vb -> value_bead.integral_value	/* TEMP...insist on integers */
	     then go to domain_error_right;

	     data_elements = right_vb -> value_bead.total_data_elements;

	     if (right_vb -> value_bead.rhorho > 1) & (data_elements ^= 1)
	     then go to rank_error_right;

	     if data_elements ^= 1
	     then go to length_error_right;

	     right = right_vb -> value_bead.data_pointer;

	     tie_num = right -> numeric_datum (0);

	     if (tie_num < lbound (tcb.iocb_ptr, 1)) | (tie_num > hbound (tcb.iocb_ptr, 1))
	     then go to file_tie_error;

	end decode_tie_num;

expand_code: procedure;

dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);

	     call convert_status_code_ (code, "", message);
	     return;

	end expand_code;
open_file: procedure;

	     if tcb.iocb_ptr (tie_num) ^= null
	     then go to already_tied;

	     call pathname_$component_check (file_dname, file_ename, "", file_pathname, code);
	     if code ^= 0
	     then go to cant_attach;
	     attach_desc = "vfile_ " || rtrim (file_pathname) || " -extend";
	     tcb.switch (tie_num) = unique_chars_ (""b);

	     call iox_$attach_name (tcb.switch (tie_num), tcb.iocb_ptr (tie_num), attach_desc, null, code);
	     if code ^= 0
	     then go to cant_attach;

	     call iox_$open (tcb.iocb_ptr (tie_num), 3, "0"b, code);
	     if code ^= 0
	     then go to cant_open;

	     call iox_$position (tcb.iocb_ptr (tie_num), -1, 0, code);
	     tcb.eof (tie_num) = "0"b;

	     operators_argument.result = null;
	     return;

	end open_file;

%include apl_bead_format;
%include apl_number_data;
%include apl_operators_argument;
%include apl_value_bead;
%include apl_ws_info;
%include iox_modes;
     end apl_coded_;
