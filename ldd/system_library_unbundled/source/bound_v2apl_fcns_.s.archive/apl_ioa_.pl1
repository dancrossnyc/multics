/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* APL_IOA_ - APL Interface to Multics ioa_ subroutine.

   Written, coded, and debugged January 17, 1976 by Paul Green (200 lines in one day...!)
   Modified 760118 by PG to pass numeric vectors as arrays, and character vectors as strings.
   Modified 781115 by PG to pop list beads properly.
*/

apl_ioa_:
     procedure (operators_argument);

/* parameters */

/* see include file apl_operators_argument */

/* automatic */

dcl (add_nl, pad_arg, print_arg, list_given) bit (1) aligned,
    (left, left_vb, lowest_vb, result, result_vb, right_vb) ptr,
    (data_elements, left_data_elements, return_len) fixed bin (21),
    (i, na, nd, n_values, number_of_args) fixed bin,
     code fixed bin (35),
     n_words fixed bin (19),
     return_string char (256);

dcl 1 arglist aligned,
    2 n_args fixed bin (17) unal,
    2 flag bit (18) unal init ("000000000000000100"b),
    2 n_desc fixed bin (17) unal,
    2 pad bit (18) unal,
    2 ptr (100) ptr;

dcl 1 desclist aligned,
    2 desc (100),
      3 type bit (8) unal,
      3 n_dims bit (4) unal,
      3 size fixed bin (23) unal;

/* based */

dcl  result_string char (return_len) based;

/* builtin */

dcl (addr, addrel, null, size, string, translate, unspec) builtin;

/* entries */

dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned, bit (1) aligned),
     iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));

/* external static */

dcl ((apl_error_table_$domain,
     apl_error_table_$rank) fixed bin (35),
     iox_$user_output ptr
    ) external static;

/* internal static */

dcl (character_descriptor init ("10101010"b),
     float_bin_2_descriptor init ("10001000"b)
    ) bit (18) internal static options (constant);

/* include files */

%include apl_number_data;
%include apl_characters;
%include apl_operators_argument;
%include apl_bead_format;
%include apl_operator_bead;
%include apl_list_bead;
%include apl_value_bead;
%include apl_ws_info;

/* program */

	print_arg = "1"b;
	pad_arg = "0"b;
	add_nl = "1"b;
	go to begin;

apl_ioa_$rs:
	entry (operators_argument);

	print_arg = "0"b;
	pad_arg = "0"b;
	add_nl = "1"b;
	go to begin;

apl_ioa_$rsnnl:
	entry (operators_argument);

	print_arg = "0"b;
	pad_arg = "0"b;
	add_nl = "0"b;
	go to begin;

apl_ioa_$nnl:
	entry (operators_argument);

	print_arg = "1"b;
	pad_arg = "0"b;
	add_nl = "0"b;
	go to begin;

begin:
	right_vb = operators_argument (2).value;

	if right_vb -> general_bead.value
	then do;
		list_given = "0"b;
		n_values = 1;
	     end;
	else if right_vb -> general_bead.list_value
	     then do;
		     list_given = "1"b;
		     n_values = right_vb -> list_bead.number_of_members;
		end;
	     else go to domain_error_right;

	left_vb = operators_argument (1).value;

	if ^left_vb -> general_bead.value
	then go to domain_error_left;

	if ^left_vb -> value_bead.character_value
	then go to domain_error_left;

	if (left_vb -> value_bead.total_data_elements > 1) & (left_vb -> value_bead.rhorho ^= 1)
	then go to rank_error_left;

	left = left_vb -> value_bead.data_pointer;
	data_elements, left_data_elements = left_vb -> value_bead.total_data_elements;

	number_of_args = 1 + n_values;		/* 1 for control string, N for values */

	/* Translate UpperMinus to Circumflex in the control string...give apl user a break. */

	n_words  = size (character_string_overlay);
	result_vb = apl_push_stack_ (n_words);

	result_vb -> character_string_overlay = translate (left -> character_string_overlay, "^", QUpperMinus);
	arglist.ptr (1) = result_vb;

	if ^list_given
	then arglist.ptr (2) = right_vb -> value_bead.data_pointer;
	else do i = 1 to n_values;
		arglist.ptr (1+i) = right_vb -> list_bead.member_ptr (i) -> value_bead.data_pointer;
	     end;

	desclist.desc (1).type = character_descriptor;
	desclist.desc (1).n_dims = "0000"b;
	desclist.desc (1).size = left_data_elements;

	nd = 1;					/* this is the index of the current descriptor */
	na = number_of_args + 1;			/* index of current ptr */
	arglist.ptr (na) = addr (desclist.desc (1));	/* store ptr to descriptor for ctl string */

	if ^list_given
	then do;
		if right_vb -> value_bead.numeric_value
		then call generate_numeric_descriptor (right_vb);
		else do;
			na = na + 1;
			nd = nd + 1;
			arglist.ptr (na) = addr (desclist.desc (nd));
			desclist.desc (nd).type = character_descriptor;
			desclist.desc (nd).n_dims = "0000"b;
			desclist.desc (nd).size = right_vb -> value_bead.total_data_elements;
		     end;
	     end;
	else do i = 1 to n_values;
		if right_vb -> list_bead.member_ptr (i) -> value_bead.numeric_value
		then call generate_numeric_descriptor ((right_vb -> list_bead.member_ptr (i)));
		else do;
			na = na + 1;
			nd = nd + 1;
			arglist.ptr (na) = addr (desclist.desc (nd));
			desclist.desc (nd).type = character_descriptor;
			desclist.desc (nd).n_dims = "0000"b;
			desclist.desc (nd).size = right_vb -> list_bead.member_ptr (i) -> value_bead.total_data_elements;
		     end;
	     end;

	arglist.n_args = number_of_args * 2;		/* Multics convention...! */
	arglist.n_desc = number_of_args * 2;
	call ioa_$general_rs (addr (arglist), 1, 2, return_string, return_len, pad_arg, add_nl);

	if operators_argument.operands (2).on_stack	/* Pop args off stack */
	then if list_given
	     then do;

/* The list_bead is always higher than the value_beads it points to. Its members were
   evaluated in right-to-left (n_members to 1 by -1) order, so that members with higher
   subscripts are lower on the value stack. */

		     lowest_vb = right_vb;		/* initially, this is lowest guy on stack */
		     do i = 1 to n_values;
			if right_vb -> list_bead.bits (i).semantics_on_stack
			then lowest_vb = right_vb -> list_bead.member_ptr (i);
		     end;
		     ws_info.value_stack_ptr = lowest_vb;
		end;
	     else ws_info.value_stack_ptr = right_vb;
	else if operators_argument.operands (1).on_stack
	     then ws_info.value_stack_ptr = left_vb;

	if print_arg
	then do;
		call iox_$put_chars (iox_$user_output, addr (return_string), return_len, code);
		operators_argument.result = null;
	     end;
	else do;
		data_elements = return_len;
		number_of_dimensions = 1;
		n_words = size (value_bead) + size (character_string_overlay);
		result_vb = apl_push_stack_ (n_words);

		string (result_vb -> value_bead.type) = character_value_type;
		result_vb -> value_bead.total_data_elements = data_elements;
		result_vb -> value_bead.rhorho = 1;
		result_vb -> value_bead.rho (1) = data_elements;
		result = addrel (result_vb, size (value_bead));
		result_vb -> value_bead.data_pointer = result;

		result -> result_string = return_string;
		operators_argument.result = result_vb;
	     end;
	return;

domain_error_left:
domain_error_right:
	operators_argument.error_code = apl_error_table_$domain;
	return;

rank_error_left:
	operators_argument.error_code = apl_error_table_$rank;
	return;

generate_numeric_descriptor:
     procedure (bv_vb_ptr);

/* parameters */

dcl  bv_vb_ptr ptr parameter;

/* program */

	na = na + 1;				/* step to next arg ptr */
	nd = nd + 1;				/* step to next descriptor */
	arglist.ptr (na) = addr (desclist.desc (nd));
	desclist.desc (nd).type = float_bin_2_descriptor;
	desclist.desc (nd).n_dims = "0001"b;	/* numbers are always arrays... */
	desclist.desc (nd).size = 63;		/* precision is 63 */
	nd = nd + 1;
	unspec (desclist.desc (nd)) = ""b;
	desclist.desc (nd).size = 1;		/* LB is always 1 */
	nd = nd + 1;
	unspec (desclist.desc (nd)) = ""b;
	desclist.desc (nd).size = bv_vb_ptr -> value_bead.total_data_elements;	/* UB is TDE */
	nd = nd + 1;
	unspec (desclist.desc (nd)) = ""b;
	desclist.desc (nd).size = 2;		/* MULT is 2 words */
	return;

     end generate_numeric_descriptor;

%include apl_push_stack_fcn;
     end /* apl_ioa_ */;
