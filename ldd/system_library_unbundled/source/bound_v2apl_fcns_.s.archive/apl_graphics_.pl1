/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style3 */
apl_graphics_:
     proc;

/* An interface to the Multics Graphics System for APL */

/* Written April 1975 by Joseph W. Dehn III
   Modified 800122 by PG to bring up to current APL standards
   Modified 810717 by WMY to fix a bug in return_node which returned
	a pointer to the data instead of to the value bead.
*/

/* automatic */

declare	node		fixed bin (18),
	(x, y, z)		float bin,
	code		fixed bin (35),
	data_elements	fixed bin (21),
	ialign		fixed bin,
	left		ptr,
	left_vb		ptr,
	mode_value	fixed bin,
	n_words		fixed bin (19),
	result_vb		ptr,
	result_data	ptr,
	right		ptr,
	right_vb		ptr;

/* builtins */

declare	(addr, addrel, dim, length, null, rel, size, string, substr)
			builtin;

/* based */

declare	based_string	char (right_vb -> value_bead.total_data_elements) based (right_vb -> value_bead.data_pointer);

/* external static */

declare	(
	apl_error_table_$domain,
	apl_error_table_$length,
	apl_error_table_$rank
	)		fixed bin (35) external;

/* apl include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_bead_format;
%include apl_operators_argument;
%include apl_value_bead;

/* graphics include files */

%include gm_entry_dcls;
%include gc_entry_dcls;
%include go_entry_dcls;
%include graphic_etypes;

/* program */

gfsetposition:
     entry (operators_argument);

	call create_position (Setposition);

gfsetpoint:
     entry (operators_argument);

	call create_position (Setpoint);

gfpoint:
     entry (operators_argument);

	call create_position (Point);

gfshift:
     entry (operators_argument);

	call create_position (Shift);

gfvector:
     entry (operators_argument);

	call create_position (Vector);

gflinetype:
     entry (operators_argument);

	call create_mode (Linetype);

gfintensity:
     entry (operators_argument);

	call create_mode (Intensity);

gfblinking:
     entry (operators_argument);

	call create_mode (Blinking);

gfsensitivity:
     entry (operators_argument);

	call create_mode (Sensitivity);

gfscale:
     entry (operators_argument);

	call three_float;
	node = graphic_manipulator_$create_scale (x, y, z, code);
	go to return_node;

gfrotate:
     entry (operators_argument);

	call three_float;
	node = graphic_manipulator_$create_rotation (x, y, z, code);
	go to return_node;

gflist:
     entry (operators_argument);

	call create_structure (graphic_manipulator_$create_list);

gfarray:
     entry (operators_argument);

	call create_structure (graphic_manipulator_$create_array);

gfinit:
     entry (operators_argument);

	call gm_$init (code);
	go to return_nothing;

gferase:
     entry (operators_argument);

	call graphic_operator_$erase (code);
	go to return_nothing;

gfdisplay:
     entry (operators_argument);

	call one_node;
	call graphic_compiler_$display (node, code);
	go to return_nothing;

gfdisplayappend:
     entry (operators_argument);

	call one_node;
	call graphic_compiler_$display_append (node, code);
	go to return_nothing;

/* This is the only dyadic entry */

gftext:
     entry (operators_argument);

	left_vb = operators_argument.operands (1).value;

	if ^left_vb -> value_bead.value
	then go to domain_error_left;

	if ^left_vb -> value_bead.numeric_value
	then go to domain_error_left;

	right_vb = operators_argument.operands (2).value;

	if ^right_vb -> value_bead.value
	then go to domain_error_right;

	if ^right_vb -> value_bead.character_value
	then go to domain_error_right;

	if left_vb -> value_bead.total_data_elements > 1
	then if left_vb -> value_bead.rhorho > 1
	     then go to rank_error_left;
	     else go to length_error_left;

	ialign = left_vb -> value_bead.data_pointer -> numeric_datum (0);
	node = graphic_manipulator_$create_text (ialign, length (based_string), based_string, code);
	go to return_node;

/* ********** Action Routines ********** */

return_node:
	if operators_argument.operands (2).on_stack
	then ws_info.value_stack_ptr = operators_argument.operands (2).value;
	else if operators_argument.operands (1).on_stack
	then ws_info.value_stack_ptr = operators_argument.operands (1).value;

	number_of_dimensions = 0;
	data_elements = 1;
	n_words = size (value_bead) + size (numeric_datum) + 1;
	result_vb = apl_push_stack_ (n_words);
	string (result_vb -> value_bead.type) = integral_value_type;
	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = number_of_dimensions;
	result_data = addrel (result_vb, size (value_bead));
	if substr (rel (result_data), 18, 1)
	then result_data = addrel (result_data, 1);

	result_vb -> value_bead.data_pointer = result_data;
	result_data -> numeric_datum (0) = node;

	operators_argument.result = result_vb;

return_nothing:
	if code ^= 0
	then operators_argument.error_code = code;

	return;

domain_error_left:
	operators_argument.where_error = operators_argument.where_error + 2;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;
	operators_argument.error_code = apl_error_table_$domain;
	return;

length_error_left:
	operators_argument.where_error = operators_argument.where_error + 2;

length_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;
	operators_argument.error_code = apl_error_table_$length;
	return;

rank_error_left:
	operators_argument.where_error = operators_argument.where_error + 2;

rank_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;
	operators_argument.error_code = apl_error_table_$rank;
	return;

/* INTERNAL PROCEDURES */

create_position:
     proc (itype);

dcl	itype		fixed bin;

	call three_float;
	node = graphic_manipulator_$create_position (itype, x, y, z, code);
	go to return_node;
     end;

create_mode:
     proc (itype);

dcl	itype		fixed bin;
dcl	mode_value	fixed bin;

	call validate_right;

	if (right_vb -> value_bead.total_data_elements > 1)
	then if right_vb -> value_bead.rhorho > 1
	     then go to rank_error_right;
	     else go to length_error_right;

	mode_value = right -> numeric_datum (0);
	node = graphic_manipulator_$create_mode (itype, mode_value, code);
	go to return_node;
     end;

three_float:
     proc;

	call validate_right;

	if right_vb -> value_bead.rhorho ^= 1
	then go to rank_error_right;

	if (right_vb -> value_bead.total_data_elements < 2) | (right_vb -> value_bead.total_data_elements > 3)
	then go to length_error_right;

	if right_vb -> value_bead.total_data_elements = 3
	then z = right -> numeric_datum (2);
	else z = 0e0;

	x = right -> numeric_datum (0);
	y = right -> numeric_datum (1);
	return;
     end;

one_node:
     proc;

	call validate_right;

	if right_vb -> value_bead.total_data_elements > 1
	then if right_vb -> value_bead.rhorho > 1
	     then go to rank_error_right;
	     else go to length_error_right;

	node = right -> numeric_datum (0);
	return;
     end;

create_structure:
     proc (structure_maker);

dcl	structure_maker	entry (dimension (*) fixed bin (18), fixed bin, fixed bin (35))
			returns (fixed bin (18)) variable;

	call validate_right;

	if right_vb -> value_bead.rhorho ^= 1
	then go to rank_error_right;

	data_elements = right_vb -> value_bead.rho (1);

	begin;

dcl	node_array	fixed bin (18) dim (data_elements);

	     node_array (*) = right -> numeric_datum (*); /* copy the floats to temp array */
	     node = structure_maker (node_array, (data_elements), code);
	end;

	go to return_node;

     end create_structure;

validate_right:
     proc;

	right_vb = operators_argument.operands (2).value;

	if ^right_vb -> value_bead.value
	then go to domain_error_right;

	if ^right_vb -> value_bead.numeric_value
	then go to domain_error_right;

	right = right_vb -> value_bead.data_pointer;
	return;

     end validate_right;

%include apl_push_stack_fcn;
     end apl_graphics_;
