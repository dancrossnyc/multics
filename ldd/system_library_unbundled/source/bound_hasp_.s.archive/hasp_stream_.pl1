/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthen,^indproc */

hasp_stream_: proc;

/* I/O module to allow stream I/O over HASP channels. */

/* Written Feb 1985 by Jim Homan. */

/****^  HISTORY COMMENTS:
  1) change(87-03-31,Beattie), approve(87-04-06,MCR7656),
     audit(87-07-30,Parisek), install(87-08-04,MR12.1-1055):
     Add support to allow HASP operator subchannels to be login service.
                                                   END HISTORY COMMENTS */

/* external entries */

dcl  continue_to_signal_    entry (fixed bin (35));
dcl  get_group_id_	        entry () returns (char (32));
dcl  get_pdir_	        entry () returns (char (168));
dcl  get_temp_segment_      entry (char (*), ptr, fixed bin (35));
dcl  release_temp_segment_  entry (char (*), ptr, fixed bin (35));
dcl  com_err_	        entry () options (variable);
dcl  hcs_$initiate	        entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$set_ips_mask      entry (bit (*) aligned, bit (*) aligned);
dcl  unique_chars_	        entry (bit (*)) returns (char (15));
dcl  iox_$modes	        entry (ptr, char (*), char (*), fixed bin (35));
dcl  iox_$write_record      entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$read_record       entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$detach_iocb       entry (ptr, fixed bin (35));
dcl  iox_$close	        entry (ptr, fixed bin (35));
dcl  iox_$look_iocb	        entry (char (*), ptr, fixed bin (35));
dcl  iox_$open	        entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$attach_name       entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$propagate	        entry (ptr);
dcl  iox_$err_not_open      entry () options (variable);
dcl  iox_$err_not_closed    entry () options (variable);
dcl  iox_$control	        entry (ptr, char (*), ptr, fixed bin (35));
dcl  terminate_process_     entry (char (*), ptr);

/* error codes */

dcl  sys_info$max_seg_size  fixed bin (35) ext static;
dcl  error_table_$long_record fixed bin (35) ext static;
dcl  error_table_$unable_to_do_io fixed bin (35) ext static;
dcl  error_table_$noarg     fixed bin (35) ext;		/* Expected argument missing. */
dcl  error_table_$incompatible_attach fixed bin (35) ext;	/* Attach and open are incompatible. */
dcl  error_table_$not_attached fixed bin (35) ext;	/* I/O switch (or device) is not attached. */
dcl  error_table_$not_detached fixed bin (35) ext;	/* I/O switch is not detached. */
dcl  error_table_$wrong_no_of_args fixed bin (35) ext static;

/* parameters */

dcl  buffer_length	        fixed bin (21) parameter;
dcl  buffer_ptr	        ptr parameter;
dcl  code		        fixed bin (35) parameter;
dcl  com_err_switch	        bit (1) aligned parameter;
dcl  iocb_ptr	        ptr parameter;
dcl  n_read	        fixed bin (21) parameter;
dcl  obsolete	        bit (1) aligned parameter;
dcl  option_array	        (*) char (*) var parameter;
dcl  mode		        fixed bin parameter;
dcl  new_modes	        char (*) parameter;
dcl  old_modes	        char (*) parameter;
dcl  info_ptr	        ptr parameter;
dcl  order	        char (*) parameter;

/* automatic variables */

dcl  terminal_io_header_length fixed bin (21);
dcl  hasp_stream_info_ptr   ptr;
dcl  mask		        bit (36) aligned;
dcl  atd_ptr	        ptr;
dcl  temp_atd	        char (256) var;
dcl  1 local_input_timeout_info aligned like input_timeout_info;
dcl  1 local_output_timeout_info aligned like output_timeout_info;
dcl  stop_time	        fixed bin (71);
dcl  line_start_pos	        fixed bin (21);
dcl  line_start_ptr	        ptr;
dcl  line_length	        fixed bin (21);


/* constants */

dcl  ME		        char (32) int static options (constant) init ("hasp_stream_");
dcl  SP		        char (1) int static options (constant) init (" ");
dcl  NL		        char (1) int static options (constant) init ("
");
dcl  sio_mode	        char (24) var int static options (constant) init ("stream_input_output");
dcl  so_mode	        char (24) var int static options (constant) init ("stream_output");
dcl  si_mode	        char (24) var int static options (constant) init ("stream_input");

/* based variables */


dcl  1 atd	        based (atd_ptr) aligned,
       2 length	        fixed bin,
       2 string	        char (length (temp_atd) refer (atd.length));

dcl  1 open_descrip	        aligned like atd based;

dcl  1 hasp_stream_info     based (hasp_stream_info_ptr) aligned,
       2 temp_seg_ptr       ptr,
       2 target_iocb_ptr    ptr,
       2 mode	        fixed bin,
       2 target_attach_description char (256) var,
       2 target_switch_name char (32) unal,
       2 must_close_target  bit (1),
       2 must_detach_target bit (1);

/* builtins */

dcl  (addr, addcharno, bin, clock, collate, copy, currentsize, hbound, index, length, max, min, null, rel, rtrim,
     string, substr, translate) builtin;

/* conditions */

dcl  any_other	        condition;
dcl  cleanup	        condition;
%page;
%include iocb;
%page;
%include iox_modes;
%page;
%include pit;
%page;
%include terminal_io_record;
%page;
%include user_attributes;
%page;
%include io_timeout_info;
%page;
hasp_stream_attach: entry (iocb_ptr, option_array, com_err_switch, code);

	if iocb_ptr -> iocb.attach_descrip_ptr ^= null () then do;
	     code = error_table_$not_detached;
	     if com_err_switch then
		call com_err_ (code, ME, "^a", iocb_ptr -> iocb.name);
	     return;
	end;
	if hbound (option_array, 1) < 1 then do;
	     code = error_table_$noarg;
	     if com_err_switch then
		call com_err_ (code, ME,
		     "^/Attach description must be: ""hasp_stream_ TargetSwitch"" or ""hasp_stream_ -target TargetATD""");
	     return;
	end;

	atd_ptr, hasp_stream_info_ptr = null ();
	on cleanup
	     call attach_err_cleanup;

	allocate hasp_stream_info;
	hasp_stream_info.target_iocb_ptr = null ();
	hasp_stream_info.temp_seg_ptr = null ();
	hasp_stream_info.target_switch_name = "";
	hasp_stream_info.target_attach_description = "";
	hasp_stream_info.must_close_target, hasp_stream_info.must_detach_target = "0"b;
	call get_temp_segment_ (ME, hasp_stream_info.temp_seg_ptr, code);
	if code ^= 0 then do;
	     if com_err_switch then
		call com_err_ (code, ME, "Cannot get temp segment.");
	     return;
	end;

	call process_option_array (code);
	if code ^= 0 then
	     goto ATTACH_ERR_EXIT;

	if hasp_stream_info.target_attach_description ^= "" then
	     call attach_target;
	if code ^= 0 then do;
	     if com_err_switch then
		call com_err_ (code, ME, "Cannot attach target switch with attach description:^/^a",
		     hasp_stream_info.target_attach_description);
	     goto ATTACH_ERR_EXIT;
	end;

	allocate atd;
	atd.string = temp_atd;

	on any_other
	     call any_other_handler ();		/* Can't tolerate inconsistent IOCBs */
	revert cleanup;
	call hcs_$set_ips_mask ("0"b, mask);		/* Mask IPS signals while changing IOCB */
	iocb_ptr -> iocb.attach_descrip_ptr = atd_ptr;
	iocb_ptr -> iocb.attach_data_ptr = hasp_stream_info_ptr;
	iocb_ptr -> iocb.detach_iocb = hasp_stream_detach_iocb;
	iocb_ptr -> iocb.open = hasp_stream_open;
	iocb_ptr -> iocb.modes = hasp_stream_modes;
	iocb_ptr -> iocb.control = hasp_stream_control;
	call iox_$propagate (iocb_ptr);
	call hcs_$set_ips_mask (mask, "0"b);		/* Restore IPS signals */
	revert any_other;
	code = 0;
	return;

ATTACH_ERR_EXIT:
	call attach_err_cleanup ();
	return;


attach_err_cleanup: proc;
	if atd_ptr ^= null () then
	     free atd;
	if hasp_stream_info_ptr ^= null () then do;
	     if hasp_stream_info.temp_seg_ptr ^= null () then
		call release_temp_segment_ (ME, hasp_stream_info.temp_seg_ptr, (0));
	     free hasp_stream_info;
	end;
     end attach_err_cleanup;
%page;
/* procedure to fill in attach_data and temp_atd from arguments passed via option_array */

process_option_array: proc (ec);

dcl  ec		        fixed bin (35);
dcl  argN		        fixed bin;

	ec = 0;

	if option_array (1) = "-target" then do;
	     hasp_stream_info.target_attach_description = "";
	     temp_atd = rtrim (ME) || " " || option_array (1);
	     do argN = 2 to hbound (option_array, 1);
		hasp_stream_info.target_attach_description = hasp_stream_info.target_attach_description ||
		     option_array (argN) || " ";
		temp_atd = temp_atd || " " || option_array (argN);
	     end;
	end;

	else do;
	     if hbound (option_array, 1) ^= 1 then do;
		ec = error_table_$wrong_no_of_args;
		if com_err_switch then
		     call com_err_ (ec, ME,
			"^/Attach description must be: ""hasp_stream_ TargetSwitch"", ""hasp_stream_ -login_channel"" or ""hasp_stream_ -target TargetATD""");
		return;
	     end;

	     if option_array (1) = "-login_channel" then do;
						/* get pointer to the PIT to get login channel */
		call hcs_$initiate (get_pdir_ (), "pit", "pit_", (0), (0), pit_ptr, ec);
		if pit_ptr ^= null ()
		     then ec = 0;
		if ec ^= 0 then do;
		     if com_err_switch then
			call com_err_ (ec, ME, "Unable to get pointer to PIT.");
		     return;
		end;

		hasp_stream_info.target_attach_description
		     = "hasp_workstation_ -device teleprinter -comm hasp -suppress_dial_manager -tty " || rtrim (pit.tty);
		temp_atd = rtrim (ME) || " -login_channel -target " || hasp_stream_info.target_attach_description;
	     end;

	     else do;
		hasp_stream_info.target_switch_name = option_array (1);
		temp_atd = rtrim (ME) || " " || option_array (1);
	     end;

	end;

     end process_option_array;
%page;
hasp_stream_open: entry (iocb_ptr, mode, obsolete, code);

	hasp_stream_info_ptr = iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr;
	if mode ^= Stream_input & mode ^= Stream_output & mode ^= Stream_input_output then do;
	     code = error_table_$incompatible_attach;
	     return;
	end;
	hasp_stream_info.mode = mode;
	call open_target;
	if code ^= 0 then do;
	     call close_and_detach_target;
	     return;
	end;

	on any_other
	     call any_other_handler ();		/* Can't tolerate inconsistent IOCBs */
	call hcs_$set_ips_mask ("0"b, mask);		/* Mask IPS signals while changing IOCB */
	iocb_ptr -> iocb.actual_iocb_ptr -> iocb.detach_iocb = iox_$err_not_closed;
	iocb_ptr -> iocb.actual_iocb_ptr -> iocb.close = hasp_stream_close;

	if hasp_stream_info.mode = Stream_input then do;
	     iocb_ptr -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr = addr (si_mode);
	     iocb_ptr -> iocb.actual_iocb_ptr -> iocb.get_line = hasp_stream_get_line;
	     iocb_ptr -> iocb.actual_iocb_ptr -> iocb.get_chars = hasp_stream_get_chars;
	end;
	else if hasp_stream_info.mode = Stream_output then do;
	     iocb_ptr -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr = addr (so_mode);
	     iocb_ptr -> iocb.actual_iocb_ptr -> iocb.put_chars = hasp_stream_put_chars;
	end;
	else do;
	     iocb_ptr -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr = addr (sio_mode);
	     iocb_ptr -> iocb.actual_iocb_ptr -> iocb.get_line = hasp_stream_get_line;
	     iocb_ptr -> iocb.actual_iocb_ptr -> iocb.get_chars = hasp_stream_get_chars;
	     iocb_ptr -> iocb.actual_iocb_ptr -> iocb.put_chars = hasp_stream_put_chars;
	end;
	call iox_$propagate (iocb_ptr);
	call hcs_$set_ips_mask (mask, "0"b);		/* Restore IPS signals */
	revert any_other;

	return;
%page;
attach_target: proc;

	hasp_stream_info.target_switch_name = "hasp_stream_." || unique_chars_ ("0"b);
	call iox_$attach_name (hasp_stream_info.target_switch_name, hasp_stream_info.target_iocb_ptr,
	     (hasp_stream_info.target_attach_description), null (), code);
	if code ^= 0 then
	     return;
	hasp_stream_info.must_detach_target = "1"b;

     end attach_target;
%page;
open_target: proc;
dcl  target_mode	        char (24) var;
dcl  target_mode_number     fixed bin;

/* First get the IOCB for this switch */

	call iox_$look_iocb (hasp_stream_info.target_switch_name, hasp_stream_info.target_iocb_ptr, code);
	if code ^= 0 then
	     return;

/* Make sure the switch is attached */

	if hasp_stream_info.target_iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_descrip_ptr = null then do;
	     code = error_table_$not_attached;
	     return;
	end;

/* If the switch is already open, make sure its opening mode is OK */

	if hasp_stream_info.target_iocb_ptr -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr ^= null () then do;
	     target_mode = hasp_stream_info.target_iocb_ptr -> iocb.actual_iocb_ptr ->
		iocb.open_descrip_ptr -> open_descrip.string;
	     if hasp_stream_info.mode = Stream_input_output then do;
		if target_mode ^= "sequential_input_output" then
		     code = error_table_$incompatible_attach;
	     end;
	     else if hasp_stream_info.mode = Stream_input then do;
		if target_mode ^= "sequential_input" & target_mode ^= "sequential_input_output" then
		     code = error_table_$incompatible_attach;
	     end;
	     else if hasp_stream_info.mode = Stream_output then do;
		if target_mode ^= "sequential_output" & target_mode ^= "sequential_input_output" then
		     code = error_table_$incompatible_attach;
	     end;
	end;

	else do;					/* If it wasn't already open, open it for appropriate mode */
	     if hasp_stream_info.mode = Stream_input then
		target_mode_number = Sequential_input;
	     else if hasp_stream_info.mode = Stream_output then
		target_mode_number = Sequential_output;
	     else target_mode_number = Sequential_input_output;
	     call iox_$open (hasp_stream_info.target_iocb_ptr, target_mode_number, obsolete, code);
	     if code = 0 then
		hasp_stream_info.must_close_target = "1"b;
	end;

     end open_target;
%page;
hasp_stream_detach_iocb: entry (iocb_ptr, code);

	hasp_stream_info_ptr = iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr;
	on any_other
	     call any_other_handler ();		/* Can't tolerate inconsistent IOCBs */
	call release_temp_segment_ (ME, hasp_stream_info.temp_seg_ptr, (0));
	free iocb_ptr -> iocb.attach_descrip_ptr -> atd;
	free iocb_ptr -> iocb.attach_data_ptr -> hasp_stream_info;
	call hcs_$set_ips_mask ("0"b, mask);		/* Mask IPS signals while changing IOCB */
	iocb_ptr -> iocb.attach_descrip_ptr = null ();
	call iox_$propagate (iocb_ptr);
	call hcs_$set_ips_mask (mask, "0"b);		/* Restore IPS signals */
	revert any_other;
	code = 0;
	return;
%page;
hasp_stream_close: entry (iocb_ptr, code);

	hasp_stream_info_ptr = iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr;
	call close_and_detach_target;
	on any_other
	     call any_other_handler ();		/* Can't tolerate inconsistent IOCBs */
	call hcs_$set_ips_mask ("0"b, mask);		/* Mask IPS signals while changing IOCB */
	iocb_ptr -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr = null ();
	iocb_ptr -> iocb.actual_iocb_ptr -> iocb.open = hasp_stream_open;
	iocb_ptr -> iocb.actual_iocb_ptr -> iocb.detach_iocb = hasp_stream_detach_iocb;
	iocb_ptr -> iocb.actual_iocb_ptr -> iocb.modes = iox_$err_not_open;
	iocb_ptr -> iocb.actual_iocb_ptr -> iocb.control = iox_$err_not_open;
	iocb_ptr -> iocb.actual_iocb_ptr -> iocb.get_chars = iox_$err_not_open;
	iocb_ptr -> iocb.actual_iocb_ptr -> iocb.put_chars = iox_$err_not_open;
	iocb_ptr -> iocb.actual_iocb_ptr -> iocb.get_line = iox_$err_not_open;

	call iox_$propagate (iocb_ptr);
	call hcs_$set_ips_mask (mask, "0"b);		/* Restore IPS signals */
	revert any_other;
	code = 0;
	return;
%page;
hasp_stream_get_chars: entry (iocb_ptr, buffer_ptr, buffer_length, n_read, code);
hasp_stream_get_line: entry (iocb_ptr, buffer_ptr, buffer_length, n_read, code);

	hasp_stream_info_ptr = iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr;
	terminal_io_record_ptr = hasp_stream_info.temp_seg_ptr;
	terminal_io_record.n_elements = 0;		/* Might not be set if code ^= 0 */
	n_read = 0;

	call iox_$read_record (hasp_stream_info.target_iocb_ptr, terminal_io_record_ptr, (4 * sys_info$max_seg_size), (0),
	     code);

	if terminal_io_record.n_elements ^= 0 then
	     call convert_input (buffer_ptr, buffer_length, n_read, code);

	return;
%page;
hasp_stream_put_chars: entry (iocb_ptr, buffer_ptr, buffer_length, code);

	hasp_stream_info_ptr = iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr;
	terminal_io_record_ptr = hasp_stream_info.temp_seg_ptr;

	line_start_pos = 0;
	call get_next_line (buffer_ptr, buffer_length, line_start_ptr, line_start_pos, line_length);
	do while (line_start_ptr ^= null ());
	     call convert_output (line_start_ptr, line_length);
	     call iox_$write_record (hasp_stream_info.target_iocb_ptr, terminal_io_record_ptr,
		(4 * currentsize (terminal_io_record)), code);
	     call get_next_line (buffer_ptr, buffer_length, line_start_ptr, line_start_pos, line_length);
	end;

	return;
%page;
hasp_stream_control: entry (iocb_ptr, order, info_ptr, code);

/* Just pass through all orders except the timeout orders that need to be changed a bit. */

	hasp_stream_info_ptr = iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr;

	if order = "get_chars_timeout" | order = "get_line_timeout" then do;
	     terminal_io_record_ptr = hasp_stream_info.temp_seg_ptr;
	     terminal_io_record.n_elements = 0;
	     timeout_info_ptr = info_ptr;
	     local_input_timeout_info.timeout = input_timeout_info.timeout;
	     local_input_timeout_info.buffer_pointer = terminal_io_record_ptr;
	     local_input_timeout_info.buffer_length = 4 * sys_info$max_seg_size;
	     input_timeout_info.characters_read = 0;
	     call iox_$control (hasp_stream_info.target_iocb_ptr,
		"read_record_timeout", addr (local_input_timeout_info), code);
	     if terminal_io_record.n_elements ^= 0 then
		call convert_input (input_timeout_info.buffer_pointer, input_timeout_info.buffer_length,
		     input_timeout_info.characters_read, code);
	end;
	else if order = "put_chars_timeout" then do;
	     terminal_io_record_ptr = hasp_stream_info.temp_seg_ptr;
	     timeout_info_ptr = info_ptr;

	     output_timeout_info.characters_written = 0;
	     stop_time = clock () + input_timeout_info.timeout;
	     terminal_io_header_length = bin (rel (addr (terminal_io_record.data)));
	     line_start_pos = 0;
	     call get_next_line (output_timeout_info.buffer_pointer,
		output_timeout_info.buffer_length, line_start_ptr, line_start_pos, line_length);
	     do while (line_start_ptr ^= null ());
		call convert_output (line_start_ptr, line_length);
		local_output_timeout_info.timeout = max (0, stop_time - clock ());
		local_output_timeout_info.buffer_length = 4 * currentsize (terminal_io_record);
		local_output_timeout_info.buffer_pointer = terminal_io_record_ptr;
		call iox_$control (hasp_stream_info.target_iocb_ptr,
		     "write_record_timeout", addr (local_output_timeout_info), code);
		if code ^= 0 then
		     return;
		output_timeout_info.characters_written =
		     line_start_pos + line_length;	/* write_record_timeout writes all or none */
		call get_next_line (output_timeout_info.buffer_pointer,
		     output_timeout_info.buffer_length, line_start_ptr, line_start_pos, line_length);
	     end;
	     if output_timeout_info.characters_written > output_timeout_info.buffer_length then
		output_timeout_info.characters_written =
		     output_timeout_info.buffer_length; /* Can happen if no NL at end */
	end;
	else call iox_$control (hasp_stream_info.target_iocb_ptr,
		order, info_ptr, code);

	return;
%page;
hasp_stream_modes: entry (iocb_ptr, new_modes, old_modes, code);

	hasp_stream_info_ptr = iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr;

	call iox_$modes (hasp_stream_info.target_iocb_ptr, new_modes, old_modes, code);

	return;
%page;
/* procedure to close target switch if opened by hasp_stream_, and detach
   if attached by hasp_stream_ */

close_and_detach_target: proc;

	if hasp_stream_info.must_close_target then
	     call iox_$close (hasp_stream_info.target_iocb_ptr, 0);
	hasp_stream_info.must_close_target = "0"b;
	if hasp_stream_info.must_detach_target then
	     call iox_$detach_iocb (hasp_stream_info.target_iocb_ptr, 0);
	hasp_stream_info.must_detach_target = "0"b;

     end close_and_detach_target;
%page;
any_other_handler: proc;

dcl  1 fatal_error_info     aligned,
       2 version	        fixed bin,
       2 status_code        fixed bin (35);

	if get_group_id_ () = "Initializer.SysDaemon.z"
	then do;

	     if mask then call hcs_$set_ips_mask (mask, "0"b);
	     mask = ""b;

	     call continue_to_signal_ ((0));		/* hope to get an asdump */
	end;
	else do;
	     fatal_error_info.version = 0;
	     fatal_error_info.status_code = error_table_$unable_to_do_io;

	     call terminate_process_ ("fatal_error", addr (fatal_error_info));
	end;

     end any_other_handler;
%page;
convert_output: proc (output_string_ptr, output_string_length);

dcl  output_string_ptr      ptr;
dcl  output_string_length   fixed bin (21);
dcl  output_string	        char (output_string_length) based (output_string_ptr);

dcl  NO_CONTROL_CHARS       character (512) initial (copy (SP, 32) || substr (collate (), 33) || copy (SP, 384));

	terminal_io_record.version = terminal_io_record_version_1;
	terminal_io_record.device_type = TELEPRINTER_DEVICE;
	terminal_io_record.slew_type = SLEW_BY_COUNT;
	terminal_io_record.slew_count = 1;
	string (terminal_io_record.flags) = ""b;
	terminal_io_record.element_size = 9;
	terminal_io_record.n_elements = length (output_string);
	terminal_io_record_data_chars = translate (output_string, NO_CONTROL_CHARS);
						/* convert control characters and non-ASCII to spaces */
     end convert_output;

convert_input: proc (input_buffer_ptr, input_buffer_length, n_read, ec);

dcl  input_buffer_ptr       ptr;
dcl  input_buffer_length    fixed bin (21);
dcl  n_read	        fixed bin (21);
dcl  ec		        fixed bin (35);
dcl  1 input_buffer	        based (input_buffer_ptr),
       2 data	        char (min (n_read - 1, input_buffer_length)),
       2 new_line	        char (1);

	ec = 0;
	n_read = terminal_io_record.n_elements + 1;

	input_buffer.data = terminal_io_record_data_chars;
	if n_read < input_buffer_length then
	     input_buffer.new_line = NL;
	else ec = error_table_$long_record;

     end convert_input;
%page;
get_next_line: proc (buf_ptr, buf_len, line_start_ptr, line_start_pos, line_len);

dcl  buf_ptr	        ptr;
dcl  buf_len	        fixed bin (21);
dcl  line_start_ptr	        ptr;
dcl  line_start_pos	        fixed bin (21);
dcl  line_len	        fixed bin (21);
dcl  next_NL	        fixed bin (21);
dcl  buffer	        char (buf_len) based (buf_ptr);

	if buf_len <= 0 then do;			/* Catch zero-length buffer */
	     line_start_ptr = null ();
	     return;
	end;

	if line_start_pos = 0 then
	     line_start_pos = 1;
	else do;
	     line_start_pos = line_start_pos + line_length; /* Move past prev line */
	     if line_start_pos > buf_len then do;	/* Could be at end if prev line didn't end in NL */
		line_start_ptr = null ();
		return;
	     end;
	     if substr (buffer, line_start_pos, 1) = NL then
		line_start_pos = line_start_pos + 1;	/* Bump past NL at end of prev line */
	     if line_start_pos > buf_len then do;	/* Check again for end */
		line_start_ptr = null ();
		return;
	     end;
	end;

	line_start_ptr = addcharno (buf_ptr, line_start_pos - 1);
	next_NL = index (substr (buffer, line_start_pos), NL);
	if next_NL = 0 then				/* No NL at buffer end */
	     line_length = buf_len - line_start_pos + 1;
	else line_length = next_NL - 1;

     end get_next_line;

     end hasp_stream_;
