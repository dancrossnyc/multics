/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* Procedure to receive a file from a remote host and put it into some pool storage */

/* Created, Feb 1980, by J. C. Whitmore - based on the read_cards_ proc */
/* Modified: September 1980 by G. Palter to add the request_type keyword to ++CONTROL, make processing of ++FORMAT and
	     ++CONTROL never generate fatal errors, and make use of auto_queue when ++IDENT required not delete */
/* Modified: 30 September 1981 by G. Palter to convert to version 6 dprint_arg (longer request type names) and enable I/O
      daemon escape processing (logical channel skips) by default when queueing print files */
/* Modified: 8 October 1981 by G. Palter to bypass the "classic" segment to MSF conversion problem */
/* Modified: 27 December 1984 by Keith Loepere for version 2 create_branch_info. */


/****^  HISTORY COMMENTS:
  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
     Updated to use latest version (9) of dprint_arg.
                                                   END HISTORY COMMENTS */


receive_file_:
     procedure (a_root_dir, a_sw_info_p, a_station, a_data_ptr, a_code);


/* Parameters */

dcl  a_root_dir char (*) parameter;			/* pool root directory */
dcl  a_sw_info_p ptr parameter;			/* pointer to the sw_info structure */
dcl  a_station char (*) parameter;			/* remote_station name for messages */
dcl  a_data_ptr ptr parameter;			/* pointer to receive_file_data structure of caller */
dcl  a_code fixed bin (35) parameter;


/* Remaining declarations */

dcl  aclec fixed bin;
dcl  add_nl bit (1);
dcl  bc fixed bin (24);				/* bit count of seg */
dcl  record_buffer char (1024) aligned;			/* read buffer for character input */
dcl  record char (2000) var;
dcl  record_len fixed bin (24);
dcl  chars_left_in_seg fixed bin (24);
dcl  left fixed bin (24);
dcl  code fixed bin (35);
dcl  component fixed bin;
dcl  contin bit (1);
dcl  file_name char (32) var;				/* user supplied name of file */
dcl  filep ptr ;
dcl  dirname char (168);				/* pathname of personid directory in pool */
dcl  done bit (1);
dcl  default_person char (32);
dcl  default_project char (32);
dcl  default_personid char (32);
dcl  element_size fixed bin;				/* element size for file format */
dcl  fcbp ptr;
dcl  field (40) char (80) var;
dcl  field_cnt fixed bin;
dcl  ignore fixed bin (35);
dcl  input_modes char (256);
dcl  input_mode_bits bit (36);
dcl  control_mode_bits bit (36);
dcl  key char (32) var;
dcl  key_mode char (32);
dcl  len fixed bin (24);
dcl  long char (100);				/* space to expand an error_table_ code */
dcl  lower_case bit (1);
dcl  max_chars fixed bin (24);
dcl  chars_in_last_seg fixed bin (24);			/* number of elements transmitted */
dcl  new_file_name char (32);				/* internal name of file */
dcl  overwrite bit (1);
dcl  person char (32);				/* person part of personid */
dcl  personid char (32);
dcl  pool_open bit (1);
dcl  proc_auth bit (72);				/* access class of the process */
dcl  project char (32);				/* and the project part */
dcl  file_path char (168) var;
dcl  read_done bit (1);
dcl  root_dir char (168);
dcl  source fixed bin;				/* iocbp index in sw_info structure */
dcl  station char (32) var init ("remote-file-input");
dcl  short char (8);				/* dummy for convert_status_code_ */
dcl  tag fixed bin;					/* dupe name counter */
dcl  testing bit (1);				/* our local test mode flag */
dcl  user_defined bit (1);
dcl  user_msg char (136);
dcl  log_msg char (256);
dcl  test_iocbp ptr;
dcl  trim bit (1);
dcl  data_idx fixed bin;
dcl  file_in_progress bit (1) init ("0"b);

dcl  master_iocbp ptr;				/* iocb pointers which we will use */
dcl  slave_iocbp ptr;
dcl  input_iocbp ptr;

dcl (record_quota_overflow, command_level, cleanup) condition;

dcl (addr, null, index, substr, verify, length, multiply, divide, rtrim, before, after, unspec, search, ltrim) builtin;

dcl  string char (string_len) based;
dcl  string_len fixed bin;
dcl  based_chars (2000) char (1) based;

dcl 1 acle (2) aligned,				/* ACL entry */
    2 name char (32),
    2 mode bit (36),
    2 pad bit (36),
    2 code fixed bin (35);

dcl 1 cb_info aligned like create_branch_info auto;

dcl 1 file_data aligned like receive_file_data;		/* our working copy of the running parms */

dcl 1 count_structure aligned,			/* structure used for the get_count control order */
    2 line fixed bin,				/* most fields are pads, because this structure */
    2 page_len fixed bin,				/* is based on the printer defined structure */
    2 lmarg fixed bin,				/* shown in prt_order_info.incl.pl1 */
    2 rmarg fixed bin,
    2 records fixed bin (35),				/* this is the normal line count field */
    2 page_count fixed bin;

dcl  tell_user bit (1) int static init ("1"b) options (constant);
dcl  silent bit (1) int static init ("0"b) options (constant);
dcl  max_record_len fixed bin (24) int static options (constant) init (1024);
dcl  control_modes char (32) int static init ("^add_nl,lower_case,trim.") options (constant);
dcl  ESC_c char (2) int static options (constant) init ("c");
dcl  ETX char (1) int static options (constant) init ("");
dcl  SP char (1) int static options (constant) init (" ");
dcl  NL char (1) int static options (constant) init ("
");
dcl  FF char (1) int static options (constant) init ("");

dcl  sys_info$max_seg_size fixed bin (35) ext static;

dcl (error_table_$bad_arg, error_table_$bigarg, error_table_$short_record, error_table_$end_of_info,
     error_table_$eof_record, error_table_$namedup, error_table_$noarg, error_table_$unimplemented_version)
	fixed binary (35) external;

dcl  card_util_$modes entry (char (*), bit (36), char (*), fixed bin (35));
dcl  card_util_$translate entry (bit (36), char (*) var);
dcl  send_mail_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  msf_manager_$adjust entry (ptr, fixed bin, fixed bin (24), bit (3), fixed bin (35));
dcl  convert_status_code_ entry (fixed bin (35), char (8), char (100));
dcl  cu_$level_get entry returns (fixed bin);
dcl  delete_$path entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl  dprint_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  find_input_switch_ entry (ptr, bit (1), fixed bin, fixed bin (35));
dcl  get_authorization_ entry returns (bit (72));
dcl  get_group_id_ entry returns (char (32));
dcl  msf_manager_$close entry (ptr);
dcl  msf_manager_$open entry (char (*), char (*), ptr, fixed bin (35));
dcl  msf_manager_$get_ptr entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
dcl  msf_manager_$acl_add entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  hcs_$create_branch_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  ioa_$rsnnl entry options (variable);
dcl  iod_info_$generic_type entry (character (*), character (32), fixed binary (35));
dcl  iox_$look_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$get_chars entry (ptr, ptr, fixed bin (24), fixed bin (24), fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (24), fixed bin (35));
dcl  iox_$control entry (ptr, char (*) aligned, ptr, fixed bin (35));
dcl  pool_manager_$add_quota entry (char (*), fixed bin, fixed bin (35));
dcl  pool_manager_$close_user_pool entry (char (*), char (*), fixed bin, bit (36), fixed bin (35));
dcl  pool_manager_$open_user_pool entry (char (*), char (*), char (*), fixed bin (35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
%page;
%include find_input_sw_info;

%include receive_file_data;
%page;
%include create_branch_info;
%page;
%include send_mail_info;
%page;
%include dprint_arg;
%page;
/* receive_file_: procedure (a_root_dir, a_sw_info_p, a_station, a_test_mode, a_code);  */

	a_code = 0;
	root_dir = a_root_dir;
	station = a_station;
	receive_file_data_ptr = a_data_ptr;

	if receive_file_data.version ^= receive_file_data_version_1 then do;
bad_version:   code = error_table_$unimplemented_version;
	     return;
	end;

	sw_info_p = a_sw_info_p;			/* setup automatic based references */
	if sw_info.version ^= sw_info_version_1 then go to bad_version;

/*	set up iocb pointers we will use according to the conventions */

	data_idx = sw_info.n_iocb_ptrs;		/* save index of the data iocbp - last one */
	if data_idx < 2 | data_idx > 10 then do;	/* must have what we need */
bad_arg:	     a_code = error_table_$bad_arg;		/* reject immediately, no opr messages */
	     return;
	end;

	master_iocbp = sw_info.iocbp (1);		/* 1 = master console (user_io) required. */
	if data_idx > 2 then
	     slave_iocbp = sw_info.iocbp (2);		/* 2 = slave  console (if any - optional) */
	else slave_iocbp = null;			/*    be sure we mark it as undefined if not given */
						/* 3 = control console (also optional) - not used here */
	input_iocbp = sw_info.iocbp (data_idx);		/* last one is the data input iocbp - required */

	if input_iocbp = null | master_iocbp = null then go to bad_arg; /* check out pointers */

	call INITIALIZE_STUFF;			/* use the internal proc to make this cleaner */

	on record_quota_overflow call overflow_handler;

	on cleanup begin;
	     code = 0;
	     if file_in_progress then			/* should we tell the operator about this */
		call report ("receive_file_: Aborting file input." || NL, silent); /* don't tell user */
	     call clean_up;				/* delete any partial input */
	end;

start:
	call RESET_PARAMETERS;

	key_mode = "IDENT search";			/* this is for log debugging messages */

/*	check for command input or next file start */

read_ident:

	call find_input_switch_ (sw_info_p, "1"b, source, code); /* look for input, block if nothing waiting */
	if code ^= 0 then call abort (code, "Returning to command level.");

	if source ^= data_idx then return;		/* allow commands to have priority */

/* We have some data coming in.  If we don't require ++IDENT record, all must go into a segment */

	if file_data.no_ident then do;
	     call report ("Begin file: " || file_name || NL, silent);
	     go to get_pool_dir;
	end;

	call read_control_record (key, field (*), field_cnt, code); /* parse record into key and arg fields */
	if code = error_table_$eof_record then go to start; /* ignore an unexpected EOF record */

	if key ^= "++ident" then do;			/* flush anything out of sync */
	     key_mode = "IDENT flush";		/* show that we are dumping data */
	     go to read_ident;
	end;

	key_mode = "IDENT found";			/* we matched on something */

	if field_cnt ^= 3 & field_cnt ^= 2 then
	     call abort_read (0, "Invalid ++IDENT record format: " || record, silent);

	file_name = field (1);			/* first field after ++IDENT is the file name */

	if field_cnt = 3 then do;			/* next is person.project or person project */
	     person = field (2);
	     project = field (3);
	end;
	else if field_cnt = 2 then do;
	     person = before (field (2), ".");
	     project = after (field (2), ".");
	end;

	if person = "*" | person = "" then		/* a personid of * is illegal */
	     call abort_read (0, "Invalid person name: " || record, silent);
	if project = "*" | project = "" then
	     call abort_read (0, "Invalid project name: " || record, silent);

	personid = rtrim (person) || "." || project;

	user_defined = "1"b;			/* we now have something we can identify */

	call ioa_$rsnnl ("Station ""^a""  receiving file ""^a"" for ^a." || NL, user_msg, len,
	     station, file_name, personid);

	call report (rtrim (user_msg), silent);		/* this is a log message */


/* Look for any other control records, up to ++INPUT and digest them */

	done = "0"b;
	do while (^done);
read_next_control_record:
	     call read_control_record (key, field (*), field_cnt, code); /* read and split into key + arg fields */
	     if code = error_table_$eof_record then do;
		call report ("Unexpected EOF record among control records." || NL, silent);
		go to start;
	     end;
	     else if code ^= 0 then call abort (code, "Read error. Aborting");
	     else if key = "++input" then done = "1"b;
	     else if key = "++format" then		/* user defined format data */
		call decode_format_args (field (*), field_cnt);
	     else if key = "++control" then call decode_control_args (field (*), field_cnt);
	     else if key = "++ident" then call abort_read (0, "Out of sequence ++IDENT record", tell_user);
	     else call control_record_error (0, "Unrecognized control record ignored: " || record, tell_user);
	end;


/* We now have all the control records for receiving the file.  Get ready to read the file text. */
/* First, we must have a place to write the data.  Create an output file in the pool directory */

get_pool_dir:

	file_in_progress = "1"b;			/* mark our progress for recovery */

	call pool_manager_$open_user_pool (root_dir, person, dirname, code); /* get dir path name for this person */
	if code ^= 0 then				/* pool error is very bad */
	     call abort (code, "Unable to open pool storage.");
	pool_open = "1"b;				/* be sure we close the pool on error */

	unspec (cb_info) = "0"b;
	cb_info.version = create_branch_version_2;
	cb_info.mode = "101"b;
	cb_info.rings (1), cb_info.rings (2), cb_info.rings (3) = cu_$level_get ();
	cb_info.userid = get_group_id_ ();
	cb_info.access_class = proc_auth;

	tag, code = -1;
	do while (code ^= 0);			/* loop on name dup errors */
	     tag = tag + 1;				/* change the name to "name.n" */
	     if tag > 499 then			/* avoid infinite loop, but try hard */
		call abort_read (0, "Aborting file: 500 duplicate files in " || dirname, tell_user);

	     call ioa_$rsnnl ("^a.^d", new_file_name, len, file_name, tag);

	     if len > 32 then
		call abort_read (0, "File name too long: " || substr (new_file_name, 1, len), tell_user);

	     call hcs_$create_branch_ (dirname, new_file_name, addr (cb_info), code);
	     if code = error_table_$namedup & overwrite then code = 0;
	     if code ^= 0 & code ^= error_table_$namedup then /* also very bad */
		call abort_read (code, "Unable to create branch in pool dir: " || rtrim (dirname), silent);
	end;

	file_path = rtrim (dirname) || ">" || rtrim (new_file_name); /* make error msgs easier */

	call msf_manager_$open (dirname, new_file_name, fcbp, code);
	if code ^= 0 then
	     call abort_read (code, "Unable to open new pool entry " || file_path, silent);

	component = 0;				/* start with the first component - 0 */
	call msf_manager_$get_ptr (fcbp, component, "0"b, filep, bc, code);
	if filep = null then
	     call abort_read (code, "Unable to initiate new pool entry " || file_path, silent);

/*	Set up the translation modes for the record text. */

	call ioa_$rsnnl ("^[^^^]trim,^[^^^]lower_case,^[^^^]add_nl,^[^^^]contin.", input_modes, len,
	     ^trim, ^lower_case, ^add_nl, ^contin);

	call card_util_$modes (input_modes, input_mode_bits, "", code);
	if code ^= 0 then call abort_read (code, "Unable to set file input modes", tell_user);

	call iox_$control (input_iocbp, "reset", null, ignore); /* clear any accounting data */

/* This procedure ASSUMES an element size of 9 bits, I.E.  chars */

	element_size = 9;				/* 9 bits per character */
	max_chars = divide ((sys_info$max_seg_size * 36), element_size, 35); /* get number of chars in a segment */
	chars_in_last_seg = 0;			/* set the number of chars used in last MSF component */
	chars_left_in_seg = max_chars;		/* set number of chars remaining in segment */

read_next_record:

	record_len = 0;
	record_buffer = "";

	call iox_$get_chars (input_iocbp, addr (record_buffer), max_record_len, record_len, code);
	if code ^= 0 then do;
	     if code = error_table_$eof_record then goto end_read_loop; /* NORMAL EXIT */

	     else if code = error_table_$end_of_info | code = error_table_$short_record then code = 0;

	     else call abort_read (code, "Error while reading data.  Aborting file.", silent); /* ERROR EXIT */
	end;

	record = substr (record_buffer, 1, record_len);	/* put into var string for translation */

	call card_util_$translate (input_mode_bits, record);

	record_len = length (record);			/* get the new length after translation */
	left = chars_left_in_seg - record_len;		/* must be at least 1 char left to bump ptr */

	if left <= 0 then do;			/* if not enough, put in part and start new component */
	     string_len = chars_left_in_seg;		/* set size of based string */
	     filep -> string = substr (record, 1, chars_left_in_seg);

	     component = component + 1;		/* start the next MSF component */

	     if component = 1 then do;		/* about to force conversion to MSF ... */
		call pool_manager_$add_quota (root_dir, 260, code);    /* ... need extra quota during conversion */
		if code ^= 0 then do;		/* couldn't get it: let the operator try to correct it ... */
		     call report (NL || "Insufficient quota in pool to convert to MSF." || NL, silent);
		     signal command_level;
		     call pool_manager_$add_quota (root_dir, 260, code);	/* ... and try again */
		end;
		if code ^= 0 then
		     call abort_read (code, "Insufficient quota in pool to convert to MSF.", silent);
	     end;

	     call msf_manager_$get_ptr (fcbp, component, "1"b, filep, bc, code);
	     if filep = null then
		call abort_read (code, "Unable to initiate next MSF component", silent);

	     if component = 1 then			/* give back the quota we got temporarily */
		call pool_manager_$add_quota (root_dir, -260, (0));

	     if left = 0 then record = "";		/* if it fit exactly.... */
	     else record = substr (record, chars_left_in_seg + 1); /* set image to last part of record */

	     string_len = length (record);		/* set the based string size */
	     filep -> string = record;		/* write the record into the output file */
	     filep = addr (filep -> based_chars (string_len + 1)); /* move output pointer to where the next char goes */
	     chars_left_in_seg = max_chars - string_len;	/* room left in this component */
	     chars_in_last_seg = string_len;		/* restart last component count */
	end;
	else do;					/* the full record (+ 1 char) will fit this MSF component */
	     string_len = length (record);		/* set the length of the based string */
	     filep -> string = record;		/* and write out the data */
	     filep = addr (filep -> based_chars (string_len + 1)); /* move output pointer to where the next char goes */
	     chars_left_in_seg = left;		/* do the accounting */
	     chars_in_last_seg = chars_in_last_seg + string_len; /* update the number received */
	end;
	go to read_next_record;

/* - - - we don't fall through here - - - - */


end_read_loop:

	read_done = "1"b;				/* tell abort handler not to look for EOF */

	bc = multiply (chars_in_last_seg, element_size, 24, 0);

/*	set bitcount of last component ... all others are max_seg_size * 36 */

	call msf_manager_$adjust (fcbp, component, bc, "111"b, code);
	if code ^= 0 then call abort_read (code, "Error setting bit-count.", silent);

	unspec (acle) = "0"b;			/* get the acl structure ready */
	acle (1).name = rtrim (personid) || ".*";	/* put the file sender on the acl */
	acle (1).mode = "100"b;			/* read access only */
	aclec = 1;

	call msf_manager_$acl_add (fcbp, addr (acle), aclec, code);
	if code ^= 0 then call abort_read (code, "Error setting ACL.", silent);

	if fcbp ^= null then
	     call msf_manager_$close (fcbp);

	fcbp = null;

	if pool_open then do;
	     call pool_manager_$close_user_pool (root_dir, person, 1, "100"b|| (33)"0"b, code); /* close the pool */
	     if code ^= 0 then call abort_read (code, "Error closing user's pool dir.", silent);
	end;
	pool_open = "0"b;				/* all is well */

	unspec (count_structure) = ""b;		/* clear the value in case of non inplemented order */

	call iox_$control (input_iocbp, "get_count", addr (count_structure), ignore); /* get record total */
						/* this can be used for charging in the future */
	call ioa_$rsnnl ("End-of-file for: ^a ^[(^d records)^]^/", user_msg, len, file_name,
	     (count_structure.records > 0), count_structure.records);

	call report (substr (user_msg, 1, len), silent);	/* log the end of file input */

	if file_data.auto_queue then do;
	     substr (dprint_arg.destination, 1, length (dprint_arg.destination)) =
	    	substr (personid, 1, length (dprint_arg.destination));
	     substr (dprint_arg.request_type, 1, length (dprint_arg.request_type)) =
	 	     substr (file_data.request_type, 1, length (dprint_arg.request_type));
	     dprint_arg.bit_count = (component * 36 * sys_info$max_seg_size) + bc;
	     if ^file_data.no_ident then		/* user requested dprint/dpunch on ++CONTROL record ... */
		dprint_arg.delete = 0;		/* ... so don't delete file before they can copy it */

	     call dprint_ (dirname, new_file_name, dpap, code);
	     if code ^= 0 then go to let_it_stay;

	     call ioa_$rsnnl ("File ""^a"" from station ^a queued for ^[dprint^;dpunch^].^/",
		user_msg, len, file_name, station, (file_data.device_type = printer_input_device));

	     call notify_user (substr (user_msg, 1, len)); /* inform the user if defined */
	end;
	else do;
let_it_stay:
	     call ioa_$rsnnl ("File ""^a"" from station ^a stored in ^a^/", user_msg, len, file_name, station, file_path);

	     call notify_user (substr (user_msg, 1, len)); /* inform the user if defined */
	end;

	if testing then do;
	     call iox_$put_chars (test_iocbp, addr (user_msg), len, code);
	     if code ^= 0 then testing = "0"b;
	end;

	goto start;				/* see if there is another file to read */


abort_exit:
	call clean_up;

	a_code = code;
	return;


abort:	proc (code, message);

dcl  message char (*);
dcl  code fixed bin (35);
dcl  abort_msg char (256);
dcl  len fixed bin (24);

	     if code ^= 0 then call convert_status_code_ (code, short, long);
	     else long = "";

	     call ioa_$rsnnl ("receive_file_: Unable to continue input function.^[^/^a^;^s^]^/^a^/",
		abort_msg, len, (code ^= 0), long, message);

	     call report (rtrim (abort_msg), silent);	/* tell just the operator */

	     goto abort_exit;

	end abort;


notify_user: proc (message);
dcl  message char (*);

	     if user_defined then			/* be sure user from ++IDENT is defined */
		call send_mail_ (personid, message, addr (send_mail_info), (0));

	     return;

	end notify_user;
%page;
abort_read: proc (code, message, tell_user);

dcl  code fixed bin (35);
dcl  message char (*);
dcl  tell_user bit (1);
dcl  abort_msg char (256);
dcl  len fixed bin (24);
dcl  count fixed bin (24);

	     if code ^= 0 then call convert_status_code_ (code, short, long);
	     else long = "";

	     call ioa_$rsnnl ("Aborting input of file^[ ""^a"" (for ^a)^;^2s^] from station ^a.^/^[^a^/^;^s^]^a^/",
		abort_msg, len, user_defined, file_name, personid, station, (code ^= 0), long, message);

	     call report (rtrim (abort_msg), tell_user);	/* route the message as requested */

	     call clean_up;

	     if read_done | ^file_in_progress then go to start; /* was the EOF already read? */

	     call report ("Skipping to EOF record." || NL, silent);

	     code = 0;
	     do count = 0 by 1 while (code ^= error_table_$eof_record);
		call iox_$get_chars (input_iocbp, addr (record_buffer), max_record_len, record_len, code);
		if code ^= 0 then do;
		     if code = error_table_$end_of_info | code = error_table_$short_record then code = 0;
		     if code ^= error_table_$eof_record then
			call abort (code, "Read error.");
		end;
	     end;
	     if testing then do;
		call ioa_$rsnnl ("Aborted ^d records before EOF.^/", log_msg, len, count);
		call iox_$put_chars (test_iocbp, addr (log_msg), len, code);
		if code ^= 0 then testing = "0"b;
	     end;
	     go to start;				/* go back and check for commands and next ++IDENT */

	end abort_read;
%page;
/* Report a non-fatal error encountered during control record processing */

control_record_error:
	procedure (code, message, tell_user);

dcl  code fixed binary (35) parameter;
dcl  message character (*) parameter;
dcl  tell_user bit (1) parameter;
dcl  error_message character (256);

	     if code ^= 0 then			/* include system error message in report */
		call convert_status_code_ (code, short, long);
	     else long = "";			/* just to be safe; it won't be in ioa_ string anyway */

	     call ioa_$rsnnl ("During input of file ""^a"" (for ^a) from station ^a.^/^[^a^/^;^s^]^a^/",
			  error_message, (0b),
			  file_name, personid, station, (code ^= 0), long,
			  message);		/* include supplied message */

	     call report (rtrim (error_message), tell_user);   /* issue the complaint */

	     return;				/* and that's all: it's not fatal... */

	end control_record_error;
%page;
report:	proc (message, tell_user);

dcl  code fixed bin (35);
dcl  message char (*);
dcl  tell_user bit (1);
dcl  opr_iocbp ptr;

	     if tell_user then
		call notify_user (message);

	     if slave_iocbp = null then opr_iocbp = master_iocbp;
	     else opr_iocbp = slave_iocbp;
write_msg:
	     call iox_$put_chars (opr_iocbp, addr (message), length (message), code);
	     if code ^= 0 then do;
		if opr_iocbp = slave_iocbp then do;	/* tell the master if slave gets error */
		     opr_iocbp = master_iocbp;
		     go to write_msg;
		end;

/*		For other errors we can't do much, so just return.  */

	     end;

	     if testing then do;
		call iox_$put_chars (test_iocbp, addr (message), length (message), code);
		if code ^= 0 then testing = "0"b;
	     end;

	     return;

	end report;





read_control_record: proc (key, field, field_cnt, code);

dcl  key char (*) var parameter;
dcl  field (40) char (80) var parameter;
dcl  field_cnt fixed bin parameter;
dcl  code fixed bin (35) parameter;

dcl  arg_string char (160) var;
dcl  scan_done bit (1);
dcl  field_begin fixed bin;
dcl  field_len fixed bin;
dcl  i fixed bin;
dcl  len fixed bin (24);

	     key = "";				/* clear the return parameters */
	     field (*) = "";
	     field_cnt = 0;

	     call iox_$get_chars (input_iocbp, addr (record_buffer), max_record_len, record_len, code);
	     if code ^= 0 then do;
		if code = error_table_$eof_record then return;
		else if code = error_table_$end_of_info | code = error_table_$short_record then code = 0;
		else call abort (code, "Read error.");
	     end;

	     if record_len = 0 then do;
		code = error_table_$end_of_info;
		return;
	     end;

	     record = substr (record_buffer, 1, record_len); /* use varying string for translation */

	     if testing then do;			/* keep a log of all control records read */
		call ioa_$rsnnl ("CTL (^a):^21t^a^/", log_msg, len, key_mode, record);
		call iox_$put_chars (test_iocbp, addr (log_msg), len, code);
		if code ^= 0 then testing = "0"b;
		code = 0;				/* just in case, make it quiet */
	     end;

	     i = index (record, ESC_c);		/* check for slew control chars and flush them */

	     if i = 1 then do;			/* this is the pre-slew sequence */
		i = index (record, ETX);		/* find the closing ETX */
						/* if not found, strip nothing */
		record = substr (record, i + 1);
	     end;
	     else if i > 1 then do;			/* this is the post slew sequence */
		record = substr (record, 1, i - 1);	/* take up to the slew, and junk the rest */
	     end;

	     record = ltrim (record, NL || FF || SP);	/* strip any other pad or slew control */
	     record = rtrim (record, NL || FF || SP);

	     call card_util_$translate (control_mode_bits, record);

	     len = search (record, " ");		/* find the first space char */
	     if len = 0 then do;			/* no spaces, maybe ++input */
		key = record;			/* try it */
		return;
	     end;

	     key = substr (record, 1, len - 1);		/* this is the ++<something> keyword */

	     arg_string = ltrim (rtrim (substr (record, len))); /* args are the remainder of the record */

	     field_begin = 1;
	     scan_done = "0"b;

	     do i = 1 to 40 while (^scan_done);		/* 40 args max */
		field_len = search (substr (arg_string, field_begin), " ");
		if field_len = 0 then do;
		     field_len = length (arg_string) - field_begin + 1;
		     scan_done = "1"b;
		end;
		else field_len = field_len - 1;
		field (i) = substr (arg_string, field_begin, field_len);
		field_begin = field_begin + field_len + verify (substr (arg_string, field_begin + field_len), " ") - 1;
		field_cnt = i;
	     end;

	     return;

	end read_control_record;

decode_format_args: proc (field, field_cnt);

dcl  field (40) char (80) var;
dcl  field_cnt fixed bin;
dcl  i fixed bin;

	     if field_cnt < 1 then do;
		call control_record_error (0, "Incorrect ++FORMAT record ignored: " || record, tell_user);
		go to read_next_control_record;
	     end;

	     do i = 1 to field_cnt;
		if field (i) = "trim" then trim = "1"b;
		else if field (i) = "notrim" then trim = "0"b;
		else if field (i) = "lowercase" then lower_case = "1"b;
		else if field (i) = "noconvert" then lower_case = "0"b;
		else if field (i) = "addnl" then add_nl = "1"b;
		else if field (i) = "noaddnl" then add_nl = "0"b;
		else if field (i) = "contin" then contin = "1"b;
		else if field (i) = "nocontin" then contin = "0"b;
		else call control_record_error (0, "Undefined mode ignored on ++FORMAT record: " || field (i), tell_user);
	     end;

	     return;

	end decode_format_args;
%page;
/* Process ++CONTROL record */

decode_control_args:
	procedure (fields, n_fields);

dcl  fields (40) character (80) varying parameter;
dcl  n_fields fixed binary parameter;
dcl  idx fixed binary;
dcl  generic_type character (32);
dcl  local_request_type character (24);


	     if n_fields < 1 then do;
		call control_record_error (0, "Incorrect ++CONTROL record ignored: " || record, tell_user);
		go to read_next_control_record;
	     end;


	     do idx = 1 to n_fields;

		if (fields (idx) = "overwrite") then	/* overwrite previous versions in compiler pool */
			overwrite = "1"b;

		else if (fields (idx) = "auto_queue") then   /* automatically queue file for printing/punching */
			file_data.auto_queue = "1"b;

		else if ((fields (idx) = "request_type") | (fields (idx) = "rqt"))
		     then do;			/* specific request type for automatic queuing */
			if (idx = n_fields) then do;
			     call control_record_error (error_table_$noarg,
						  "Request type name must follow ""request_type"" key on ++CONTROL record; the ""request_type"" key is ignored.",
						  tell_user);
			     return;		/* this was the last field on the record */
			end;
			idx = idx + 1;		/* request type name is next field */
			if length (fields (idx)) > length (local_request_type) then do;
			     call control_record_error (error_table_$bigarg,
						  "Request type name must be less than 25 characters long; not """ || fields (idx) || """; the ""request_type"" key is ignored.",
						  tell_user);
			     go to check_next_control_field;
			end;
			local_request_type = fields (idx);
			call iod_info_$generic_type (local_request_type, generic_type, code);
			if code ^= 0 then do;
			     call control_record_error (code,
						  """" || fields (idx) || """; the ""request_type"" key is ignored.",
						  tell_user);
			     go to check_next_control_field;
			end;
			if ((file_data.device_type = printer_input_device) & (generic_type ^= "printer")) |
			   ((file_data.device_type = punch_input_device) & (generic_type ^= "punch"))
			then do;			/* wrong type of request type */
			     call control_record_error (0,
						  "Request type """ || fields (idx) || """ specified on ++CONTROL record has incorrect generic type; the ""request_type"" key is ignored.",
						  tell_user);
			     go to check_next_control_field;
			end;
			file_data.request_type = local_request_type; /* got a valid one */
		     end;

		else call control_record_error (0, "Unknown key on ++CONTROL record ignored: " || fields (idx),
					  tell_user);

check_next_control_field:
	     end;

	     return;

	end decode_control_args;
%page;
clean_up:	proc;

dcl  ignore fixed bin (35);

	     if fcbp ^= null then do;
		call msf_manager_$close (fcbp);
		fcbp = null;			/* don't repeat this */
		call delete_$path (dirname, new_file_name, "100100"b, "", ignore);
	     end;

	     if pool_open then do;
		call pool_manager_$close_user_pool (root_dir, person, 1, "100"b || (33)"0"b, ignore);
		pool_open = "0"b;
	     end;

	     return;

	end clean_up;



overflow_handler: proc;

dcl  code fixed bin (35);

	     call pool_manager_$add_quota (root_dir, 10, code); /* add 10 pages and keep going */
	     if code ^= 0 then do;
		call report (NL ||"No available quota in pool." || NL, silent);
		signal command_level;		/* allow operator to respond */
	     end;

	     return;				/* restart where we stopped if it returns */

	end overflow_handler;


INITIALIZE_STUFF: proc;

	     file_data = receive_file_data;		/* set up our working copy of the control data */
	     testing = file_data.testing;		/* grab this once, we may need to cancel it */

	     default_personid = get_group_id_ ();	/* get names to be used for no_ident case */
	     default_person = before (default_personid, ".");
	     default_project = before (after (default_personid, "."), ".");
	     default_personid = rtrim (default_person) || "." || default_project; /* omit the instance tag */

	     dpap = addr (dprint_arg_buf);		/* where we build the message for dprint_ */
	     dprint_arg.version = dprint_arg_version_9;
	     dprint_arg.copies = 1;
	     dprint_arg.queue = 0;			/* use the drfault queue at all times */
	     dprint_arg.delete = 1;			/* always delete after print/punch */
	     dprint_arg.pt_pch = file_data.device_type;	/* they just happen to match */
	     dprint_arg.notify = 0;
	     dprint_arg.heading = "";			/* later */
	     if file_data.device_type = printer_input_device then
		dprint_arg.output_module = 1;		/* 1 = print */
	     else dprint_arg.output_module = 3;		/* 3 = MCC or character output */
	     dprint_arg.dest = "";			/* obsolete, but initialize */
	     dprint_arg.carriage_control = ""b;		/* no options ... */
	     if file_data.device_type = printer_input_device then do;    /* (printer only) */
		dprint_arg.nep = "1"b;		/* ... except -no_endpage */
		dprint_arg.esc = "1"b;		/* ... and escape processing (logical channel skips) */
	     end;
	     dprint_arg.forms = "";
	     dprint_arg.lmargin = 0;
	     dprint_arg.line_lth = 0;			/* again use the default */
	     dprint_arg.class = "";			/* obsolete, but initialize */
	     dprint_arg.page_lth = 0;
	     dprint_arg.top_label = "";
	     dprint_arg.bottom_label = "";
	     dprint_arg.bit_count = 0;
	     dprint_arg.form_name = "";
	     dprint_arg.destination = "";		/* later */
	     dprint_arg.chan_stop_path = "";
	     substr (dprint_arg.request_type, 1, length (dprint_arg.request_type)) =
		substr (file_data.request_type, 1, length (dprint_arg.request_type));
	     dprint_arg.defer_until_process_termination = 0;

	     unspec (send_mail_info) = "0"b;
	     send_mail_info.version = send_mail_info_version_2;
	     send_mail_info.sent_from = station;
	     send_mail_info.wakeup = "1"b;
	     send_mail_info.always_add = "1"b;
	     send_mail_info.never_add = "0"b;
	     send_mail_info.notify = "0"b;
	     send_mail_info.acknowledge = "0"b;

	     proc_auth = get_authorization_ ();		/* get caller's authorization to use for create_branch_ */

	     call card_util_$modes (control_modes, control_mode_bits, "", code); /* get a bit string for control records */
	     if code ^= 0 then
		call abort (code, "Unable to set control modes.");

	     test_iocbp = null;			/* no place to write log messages defined yet */

	     if testing then do;			/* see if we have a side file to log control records */

/*	Test mode for this procedure consists of writing control records and messages into a log file. */
/*	We assume that the IO switch "test_output" is attached through vfile_ to the log file. */
/*	Test mode is cancelled if this switch is not found or an error occurs while writing. */

		call iox_$look_iocb ("test_output", test_iocbp, code);
		if code ^= 0 | test_iocbp = null then testing = "0"b; /* if not cancel test mode */
		else do;
		     call ioa_$rsnnl ("^/receive_file_: Entry initialization for station ^a.^2/", log_msg, len, station);
		     call iox_$put_chars (test_iocbp, addr (log_msg), len, code);
		     if code ^= 0 then testing = "0"b;	/* cancel on errors */
		end;
	     end;

	end INITIALIZE_STUFF;


RESET_PARAMETERS: proc;

	     file_data = receive_file_data;		/* reset to caller's defaults */

	     file_name = unique_chars_ (""b);		/* in case of the no_ident option */
	     dirname = "";
	     person = default_person;
	     project = default_project;
	     personid = default_personid;

	     input_mode_bits = "0"b;
	     pool_open = "0"b;			/* the user pool is not yet open */
	     read_done = "0"b;
	     file_in_progress = "0"b;
	     user_defined = "0"b;
	     filep, fcbp = null;

	     add_nl = "0"b;				/* set the default data translation modes */
	     lower_case = "0"b;
	     overwrite = "0"b;
	     contin = "0"b;
	     trim = "0"b;

	     substr (dprint_arg.request_type , 1, length (dprint_arg.request_type )) =
	 	substr (file_data.request_type, 1, length (dprint_arg.request_type));
	     dprint_arg.heading = rtrim (station) || " Output   OPERATOR PLEASE LOOK INSIDE FOR BANNER";
	     dprint_arg.bit_count = 0;

	     return;

	end RESET_PARAMETERS;





     end receive_file_;
