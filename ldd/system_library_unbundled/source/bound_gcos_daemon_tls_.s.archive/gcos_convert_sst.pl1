/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ********************************************************************
   *							*
   *	WRITTEN BY:	P. Haber 		March 21, 1974	*
   *	MODIFIED BY:	R.H. Morrison	September 3, 1974	*
   *							*
   ******************************************************************** */


gcos_convert_sst: gcs: proc;

/* DECLARATIONS */
/* ------------ */


/* fixed bin */
/* ----- --- */

dcl (
     i,
     j,
     k
     ) fixed bin aligned;

dcl (
     code,
     error_table_$badopt ext
     ) fixed bin (35) aligned;


/* pointers */
/* -------- */

dcl (
     rh_ptr,
     sp
     ) ptr aligned;


/* bit strings */
/* --- ------- */


dcl (
     end_of_tape init ("0"b),
     gsr_write_init_was_called init ("0"b),
     tape_is_attached (2) init ("0"b, "0"b)
     ) bit (1) aligned;

dcl (
     rheader init ("0"b)
     ) bit (12) aligned;

dcl (
     status_bits
     ) bit (72) aligned;


/* character strings */
/* --------- ------- */

dcl (
     mode (2) init ("r", "w")
     ) char (1) aligned;

dcl (
     tape_name (2) init ("input", "output")
     ) char (8) aligned;

dcl (
     stream_name (2) init ("gcs_input", "gcs_output")
     ) char (12) aligned;

dcl (
     tape_label (2)
     ) char (32) aligned;

dcl  buffer char (112) aligned;			/* 28 words */


/* built-in functions */
/* -------- --------- */

dcl (
     addr,
     null,
     substr
     ) builtin;


/* masks */
/* ----- */

dcl 1 rheader_mask aligned based (rh_ptr),
    2 pad bit (2) unaligned,
    2 media_code bit (4) unaligned;

dcl 1 status aligned based (sp),
    2 scode fixed bin (35) aligned;


/* conditions */
/* ---------- */

dcl (
     cleanup
     ) condition;


/* external entries */
/* -------- ------- */

dcl  com_err_ ext entry
     options (variable);

dcl  gcos_gsr_write_ ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, bit (12) aligned,
     bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_write_$gsr_write_close ext entry
    (char (*) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_write_$gsr_write_init ext entry
    (char (*) aligned, fixed bin (35) aligned);

dcl  ioa_$nnl ext entry
     options (variable);

dcl  ios_$attach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned,
     bit (72) aligned);

dcl  ios_$detach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl  ios_$order ext entry
    (char (*) aligned, char (*) aligned, ptr aligned, bit (72) aligned);

dcl  ios_$read ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, fixed bin aligned, fixed bin aligned,
     bit (72) aligned);

dcl  ios_$read_ptr ext entry
    (ptr, fixed bin aligned, fixed bin aligned);

dcl  ios_$write ext entry
    (char (*) aligned, ptr, fixed bin aligned, fixed bin aligned, fixed bin aligned,
     bit (72) aligned);

/*  */

	rh_ptr = addr (rheader);
	sp = addr (status_bits);
	on condition (cleanup)
	     go to RETURN;

	do i = 1 to 2;

	     call ioa_$nnl ("Type ^a tape label:  ", tape_name (i));
	     call ios_$read_ptr (addr (buffer), 32, j);
	     tape_label (i) = substr (buffer, 1, j-1);

	     call ios_$attach (stream_name (i), "nstd_", tape_label (i), mode (i), status_bits);
	     if scode ^= 0
	     then do;
		call com_err_ (scode, "gcos_convert_sst", "Error attaching ^a", tape_label (i));
		go to RETURN;
	     end;
	     tape_is_attached = "1"b;

	end;

	call gcos_gsr_write_$gsr_write_close (stream_name (2), code);
	call gcos_gsr_write_$gsr_write_init (stream_name (2), code);
	if code ^= 0
	then do;
	     call com_err_ (code, "gcos_convert_sst", "Error in gsr_write_init call");
	     go to RETURN;
	end;
	gsr_write_init_was_called = "1"b;

	do i = 1 to 2;

	     call ios_$read (stream_name (1), addr (buffer), 0, 27, j, status_bits);
	     if substr (status_bits, 1, 3) ^= "100"b	/* not eof */
	     then if scode ^= 0
		then do;
		     call com_err_ (scode, "gcos_convert_sst", "ios_$read call(^d)", i);
		     go to RETURN;
		end;

	     if i = 1
	     then do;
		call ios_$write (stream_name (2), addr (buffer), 0, j, k, status_bits);
		if scode ^= 0
		then do;
		     call com_err_ (scode, "gcos_convert_sst", "ios_$write call error");
		     go to RETURN;
		end;
	     end;

	     else
	     do;
		call ios_$order (stream_name (2), "eof", null, status_bits);
		if scode ^= 0
		then do;
		     call com_err_ (scode, "gcos_convert_sst", "Error writing eof");
		     go to RETURN;
		end;
	     end;

	end;

	do while (^end_of_tape);

	     call ios_$read (stream_name (1), addr (buffer), 0, 27, j, status_bits);
	     if substr (status_bits, 1, 3) = "100"b
	     then end_of_tape = "1"b;
	     else
	     if scode ^= 0
	     then do;
		call com_err_ (0, "gcos_convert_sst", "Error from ios_$read");
		go to RETURN;
	     end;

	     if j = 14				/* bcd image */
	     then media_code = "0010"b;
	     else
	     if j = 27				/* binary image */
	     then media_code = "0001"b;
	     else
	     if j ^= 0
	     then do;
		call com_err_ (0, "gcos_convert_sst", "Unrecognized tape record on ^a", tape_label (1));
		go to RETURN;
	     end;

	     call gcos_gsr_write_ (stream_name (2), addr (buffer), j, rheader, end_of_tape, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, "gcos_convert_sst", "Error from gsr_write_");
		go to RETURN;
	     end;

	end;

	call ios_$order (stream_name (2), "eof", null, status_bits);
	if scode ^= 0
	then do;
	     call com_err_ (scode, "gcos_convert_sst", "Error writing eof");
	     go to RETURN;
	end;

	call ios_$read (stream_name (1), addr (buffer), 0, 27, j, status_bits);
	if scode ^= 0
	then do;
	     call com_err_ (scode, "gcos_convert_sst", "Error reading after second eof");
	     go to RETURN;
	end;

	call ios_$write (stream_name (2), addr (buffer), 0, j, k, status_bits);
	if scode ^= 0
	then call com_err_ (scode, "gcos_convert_sst", "Error writing trailer label");

RETURN:

	do i = 1 to 2;

	     if tape_is_attached (i)
	     then do;
		call ios_$detach (stream_name (i), tape_label (i), "", status_bits);
		if scode ^= 0
		then call com_err_ (scode, "gcos_convert_sst", "Error detaching ^a", tape_label (i));
		tape_is_attached (i) = "0"b;
	     end;

	end;

	if gsr_write_init_was_called
	then do;
	     call gcos_gsr_write_$gsr_write_close (stream_name (i), code);
	     if code ^= 0
	     then call com_err_ (code, "gcos_convert_sst", "error closing stream ""^a""", stream_name (2));
	end;

	return;

     end gcos_convert_sst;
