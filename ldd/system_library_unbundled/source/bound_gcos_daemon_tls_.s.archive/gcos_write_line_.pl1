/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_write_line_: proc (a_line_ptr, a_data_type, a_brief, a_code);


/* DECLARATIONS */
/* ------------ */


/* fixed bin */
/* ----- --- */

dcl (
     i,						/* random variable */
     write_size					/* number of words to write */
     ) fixed bin aligned;

dcl (
     a_code					/* error code (argument) */
     ) fixed bin (35) aligned;


/* pointers */
/* -------- */

dcl (
     a_line_ptr,					/* pointer to input line (argument) */
     line_ptr,					/* pointer to input line */
     write_ptr					/* pointer to output line */
     ) ptr aligned;


/* bit strings */
/* --- ------- */

dcl (
     a_brief,					/* ON if brief option specified by caller (argument) */
     a_data_type,					/* "1"b = bcd, "0"b = binary (argument) */
     brief,					/* ON if brief option specified by caller */
     data_is_bcd					/* ON if data is bcd */
     ) bit (1) aligned;

/* character strings */
/* --------- ------- */

dcl  nl char (1) aligned init ("
");						/* new line character a la VLV */

dcl (
     ascii					/* output line */
     ) char (85) aligned;


/* built in functions */
/* ----- -- --------- */

dcl (
     addr,
     substr
     ) builtin;


/* external entries */
/* -------- ------- */

dcl  cv_bcd_to_ascii_ ext entry
    (ptr aligned, ptr aligned);

dcl  cv_bin_to_ascii_ ext entry
    (ptr aligned, ptr aligned, fixed bin (35) aligned);

dcl  ios_$write_ptr ext entry
    (ptr aligned, fixed bin aligned, fixed bin aligned);

/*  */

	line_ptr = a_line_ptr;			/* copy in arguments */
	data_is_bcd = a_data_type;
	brief = a_brief;

	write_ptr = addr (ascii);			/* set internal variables */
	if brief
	then write_size = 81;
	else
	write_size = 85;
	ascii = "";

	if data_is_bcd
	then do;

	     a_code = 0;

	     call cv_bcd_to_ascii_ (line_ptr, write_ptr);
	     if brief
	     then substr (ascii, 81, 1) = nl;
	     else
	     substr (ascii, 82, 4) = "BCD"||nl;

	end;

	else					/* binary card */
	do;

	     call cv_bin_to_ascii_ (write_ptr, write_ptr, a_code);
	     if a_code ^= 0
	     then do;
		if brief
		then return;
		else
		do;
		     write_size = 27;
		     ascii = "---UNINTERPRETED BINARY IMAGE"||nl;
		end;
	     end;
	     else
	     do;
		if brief
		then substr (ascii, 81, 1) = nl;
		else
		substr (ascii, 82, 4) = "BIN"||nl;
	     end;

	end;

	call ios_$write_ptr (write_ptr, 0, write_size);

	return;

     end gcos_write_line_;
