/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_make_tape: gmt: proc;


/* Procedure to create gcos tape in standard system format from ascii file.
   Calling sequence is:

   gmt input_pn tape_label -tape_type

   where


   1) input_pn			is the relative path name of the
   ascii segment to be converted


   2) tape_label			is the label of the tape to be
   written

   3) tape_type			is an optional tape type.  If specified,
   it must be "-9", in which case the tape
   label will become tape_label||",9track".
   If not specified, the tape label will
   become tape_label||",7track"


   */


/* DECLARATIONS */
/* ------------ */


/* fixed bin */

dcl (
     al,						/* argument length */
     i,						/* random variable */
     tape_label_len					/* tape label character count */
     ) fixed bin aligned;

dcl (
     code,					/* error code */
     error_table_$badopt ext
     )fixed bin (35) aligned;


/* pointers */

dcl (
     ap,						/* argument pointer */
     sp						/* pointer to ios status string */
     ) ptr aligned;


/* bit strings */

dcl (
     eof init ("0"b)				/* ON when end of ascii file is read */
     ) bit (1) aligned;

dcl (
     rcrdhdr init ("000010000000"b)			/* record header for gcos tape */
     ) bit (12) aligned;

dcl (
     status_bits					/* ios status string */
     ) bit (72) aligned;


/* character strings */

dcl  nl char (1) unaligned init ("
");						/* new line character */

dcl (
     dim_name init ("nstd_"),				/* name of output dim */
     tape_label_suffix init (",7track")			/* for making tape label */
     ) char (8) aligned;

dcl (
     tape_label					/* actual tape label */
     ) char (32) aligned;

dcl (
     word14					/* buffer for writing tape */
     ) char (56) aligned;

dcl (
     input_buffer					/* for reading segment */
     ) char (84) aligned;

dcl (
     input_pn					/* path-name of input segment */
     ) char (168) aligned;


/* masks */

dcl  arg char (al) based (ap);			/* argument mask */

dcl 1 status aligned based (sp),			/* for checking io status */
    2 scode fixed bin aligned,
    2 pad bit (9) unaligned,
    2 eof bit (1) unaligned;


/* builtin functions */

dcl (
     addr,
     null,
     index,
     substr
     ) builtin;

/* conditions */

dcl (
     cleanup
     ) condition;


/* external entries */

dcl  com_err_ ext entry
     options (variable);

dcl  cu_$arg_ptr ext entry
    (fixed bin aligned, ptr aligned, fixed bin aligned, fixed bin (35) aligned);

dcl  cv_ascii_to_bcd_ ext entry
    (ptr aligned, ptr aligned, fixed bin (35) aligned);

dcl  gcos_gsr_write_ ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, bit (12) aligned, bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_write_$gsr_write_close ext entry
    (char (*) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_write_$gsr_write_init ext entry
    (char (*) aligned, fixed bin (35) aligned);

dcl  ios_$attach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl  ios_$detach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl  ios_$order ext entry
    (char (*) aligned, char (*) aligned, ptr aligned, bit (72) aligned);

dcl  ios_$read ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, fixed bin aligned, fixed bin aligned, bit (72) aligned);

dcl  ios_$setsize ext entry
    (char (*) aligned, fixed bin aligned, bit (72) aligned);

dcl  ios_$write ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, fixed bin aligned, fixed bin aligned, bit (72) aligned);

/*  */

	go to COMMON;

gcos_make_file: gmf: entry;

	dim_name = "file_";				/* attach output to file */

COMMON:

	sp = addr (status_bits);			/* pointer to ios status string */
	on condition (cleanup)			/* establish cleanup handler */
	     call wrap_up;

	call get_arg (1);				/* fetch ascii file path-name */
	if code ^= 0				/* missing argument */
	then return;

	input_pn = arg;				/* remember (for detaching) */
	call ios_$attach ("gmt_input", "file_", input_pn, "r", status_bits); /* attach file */
	if scode ^= 0				/* error attaching file */
	then do;
	     call com_err_ (scode, "gmt", "Error attaching ^a", input_pn);
	     return;
	end;

	call get_arg (2);				/* fetch tape name */
	if code ^= 0				/* missing argument */
	then do;
	     call wrap_up;
	     return;
	end;

	tape_label_len = al;			/* get length */
	tape_label = arg;				/* and label */

	call get_arg (3);				/* fetch option */
	if code = 0				/* an option is present */
	then do;
	     if dim_name ^= "nstd_"			/* error, tape option for file output */
	     then go to BADOPT;
	     if arg = "-9"				/* request for 9 track tape */
	     then tape_label_suffix = ",9track";
	     else					/* invalid option */
	     do;
BADOPT:
		call com_err_ (error_table_$badopt, "gmt", "^a", arg);
		call wrap_up;
		return;
	     end;
	end;

	if dim_name ^= "nstd_"			/* file output */
	then tape_label_suffix = ".bcd";		/* file name = "name.bcd" */

	tape_label = substr (tape_label, 1, tape_label_len)||tape_label_suffix; /* make tape label */

	call ios_$attach ("gmt_output", dim_name, tape_label, "w", status_bits); /* attach tape */
	if scode ^= 0				/* error attaching tape */
	then do;
	     call com_err_ (scode, "gmt", "Error attaching ^a", tape_label);
	     call wrap_up;
	     return;
	end;

	if dim_name ^= "nstd_"			/* not testing */
	then do;
	     call ios_$setsize ("gmt_output", 36, status_bits); /* set element size to full word */
	     if scode ^= 0				/* error setting element size */
	     then do;
		call com_err_ (scode, "gmt", "Error setting element size");
		call wrap_up;
		return;
	     end;
	end;

	call gcos_gsr_write_$gsr_write_init ("gmt_output", code); /* initialize write proc */
	if code ^= 0				/* error in initialization */
	then do;
	     call com_err_ (code, "gmt", "Error initializing gsr_write");
	     call wrap_up;
	     return;
	end;

	input_buffer = tape_label;			/* first write is tape label */
	call cv_ascii_to_bcd_ (addr (input_buffer), addr (word14), code);
	if code ^= 0
	then do;
	     call com_err_ (0, "gmt", "Error converting tape label ^a to bcd", tape_label);
	     call wrap_up;
	     return;
	end;

	if dim_name = "nstd_"			/* output is to tape */
	then do;

	     call ios_$write ("gmt_output", addr (word14), 0, 14, i, status_bits); /* write tape label */
	     if scode ^= 0				/* error writing tape label */
	     then do;
		call com_err_ (scode, "gmt", "Error writing tape label");
		call wrap_up;
		return;
	     end;

	     call ios_$order ("gmt_output", "eof", null, status_bits); /* eof mark follows tape label */
	     if scode ^= 0				/* error in order call */
	     then do;
		call com_err_ (scode, "gmt", "Error in order call to write eof mark");
		call wrap_up;
		return;
	     end;

	end;

	do while (^eof);				/* loop for writing body of tape */

	     input_buffer = "";			/* blank out reading space */

	     call ios_$read ("gmt_input", addr (input_buffer), 0, 84, i, status_bits); /* read a line of input */
	     if scode ^= 0				/* error reading */
	     then do;
		call com_err_ (scode, "gmt", "Error reading ^a", input_pn);
		call wrap_up;
		return;
	     end;

	     i = index (input_buffer, nl);		/* find new_line character */
	     if i ^= 0				/* and blank it out */
	     then substr (input_buffer, i, 1) = " ";

	     if status.eof				/* end of input */
	     then eof = "1"b;			/* remember */

	     call cv_ascii_to_bcd_ (addr (input_buffer), addr (word14), code); /* convert to bcd */
	     if code ^= 0				/* conversion error */
	     then do;
		call com_err_ (0, "gmt", "Invalid input: ^a", input_buffer);
		call wrap_up;
		return;
	     end;

	     call gcos_gsr_write_ ("gmt_output", addr (word14), 14, rcrdhdr, eof, code); /* write bcd */
	     if code ^= 0				/* error writing bcd */
	     then do;
		call com_err_ (code, "gmt", "Error writing tape record");
		call wrap_up;
		return;
	     end;

	end;

	if dim_name = "nstd_"			/* not testing */
	then do i = 1 to 2;				/* put two eof marks at end of tape */

	     call ios_$order ("gmt_output", "eof", null, status_bits);
	     if scode ^= 0				/* error writing eofs */
	     then do;
		call com_err_ (code, "gmt", "Error writing final eofs");
		call wrap_up;
		return;
	     end;

	end;

	call wrap_up;

/*  */

get_arg:	proc (an);

dcl (
     an						/* argument number */
     ) fixed bin aligned;

	     call cu_$arg_ptr (an, ap, al, code);	/* fetch an argument */
	     if code ^= 0				/* print error message */
	     then if an < 3				/* not option */
		then call com_err_ (code, "gmt");
	     return;

	end get_arg;



wrap_up:	proc;					/* do final detaching */

	     call ios_$detach ("gmt_input", input_pn, "", status_bits);
	     call gcos_gsr_write_$gsr_write_close ("gm_output", code);
	     call ios_$detach ("gmt_output", tape_label, "", status_bits);
	     return;

	end wrap_up;


     end gcos_make_tape;
