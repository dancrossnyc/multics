/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_link_init.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 07/18/78 by RAL, [3.0-1], changed cobol_linkage_header.incl.pl1 */
/* Modified since Version 3.0	*/

/* format: style3 */
cobol_link_init:
     proc;					/*
The procedure cobol_link_init initializes the Linkage Section and  
outputs corresponding relocation information.  In particular it:

     1.  Initializes all items in the header with the exception 
         of def_section_relp and linkage_section_length.

     2.  Initializes all fixed internal static data (stat and
         trace_control_word) with the exception of stat.data_len.

cobol_link_init is called once per compilation, prior to code
generation.


U__s_a_g_e:_

     declare cobol_link_init entry;

     call cobol_link_init;

D__a_t_a:_

     % include cobol_;

	Items in cobol include file used (u) and/or set(s) by
	cobol_link_init:

               cobol_ptr (u)
	     com_ptr (u)
               link_base_ptr (u)
               link_wd_off (s)
	     link_max (u)


     % include fixed_common;

          Items in fixed_common include file used (u) and/or set (s)
	by cobol_link_init:

	     prog_name (u)				  */

%include cobol_linkage_header;
/* [3.0-1] */

%include cobol_fixed_static;

dcl	1 error_s		aligned static,
	  2 my_name	char (32) init ("cobol_link_init"),
	  2 message_len	fixed bin init (32),
	  2 message	char (168) init ("Linkage Section length exceeded!");

dcl	reloc_info	(4) bit (5) aligned static init ("00000"b, "00000"b, "10000"b, "00000"b);

dcl	no_wds		fixed bin;		/* Number of words in header and */
						/* stat structure incremented by */
						/* 1, if necessary, to be even.  */

/*
P__r_o_c_e_d_u_r_e_s_C__a_l_l_e_d:_
						  */

dcl	signal_		entry (char (*), ptr, ptr);
dcl	cobol_reloc	entry (ptr, fixed bin, fixed bin);


/*
_B_u_i_l_t-__i_n_F__u_n_c_t_i_o_n_s_U__s_e_d:_
						  */

dcl	addr		builtin;
dcl	addrel		builtin;
dcl	binary		builtin;
dcl	null		builtin;
dcl	rel		builtin;
dcl	search		builtin;
dcl	substr		builtin;
dcl	unspec		builtin;			/*}*/

%include cobol_;
%include cobol_fixed_common;
%include cobol_ext_;


/*************************************/
start:						/*  UPDATE link_wd_off AND TEST AGAINST link_max  */
						/*  Number of words occupied by header plus static data is 8   */
						/*  plus number of words in stat.  If the trace_control_word   */
						/*  falls on an even word boundary (no_wds odd), no_wds is in- */
						/*  creased by 1 so that links which follow will be on even    */
						/*  word boundaries, as required.			   */
	stat_ptr = addrel (link_base_ptr, 8);		/* Modified to interface with cobol run time package. */
						/*     no_wds=binary(rel(addr(stat.reserved(16))),17)+1;
/*     no_wds = no_wds-binary(rel(cobol_$link_base_ptr),17);
/*     if substr(unspec(no_wds),36,1) = "1"b
/*	then
/*	     no_wds = no_wds+1;
/**/
	no_wds = fixed_static_length + 8;
	link_wd_off = no_wds;			/*	if link_wd_off > link_max
/*	then do;
/*		call signal_("command_abort_",null(),addr(error_s));
/*		return;
/*	    end;
/**/

/*  INITIALIZE LINKAGE SECTION HEADER  */

	pad = (36)"0"b;

/* def_section_relp not initialized by cobol_link_init */

	first_reference_relp = (18)"0"b;

	unspec (obsolete_ptr) = (36)"0"b;		/* [3.0-1] */

	unspec (original_linkage_ptr) = (36)"0"b;	/* [3.0-1] */

	links_relp = substr (unspec (no_wds), 19, 18);

/* linkage_section_length not initialized by cobol_link_init */

	object_seg = (18)"0"b;

	obsolete_length = (18)"0"b;


/*  INITIALIZE FIXED INTERNAL STATIC DATA  */


	stat.data_ptr = null ();

	stat.control_ptr = null ();

	stat.file_info_ptr = null ();

	stat.call_cnt = -1;

/* data_len not initialized by cobol_link_init */

	stat.entry_pt_ptr = null ();

	stat.prog_id_len = search (fixed_common.prog_name, " ") - 1;

	if stat.prog_id_len = -1
	then stat.prog_id_len = 30;

	stat.prog_id = fixed_common.prog_name;

	stat.line_no (1), stat.line_no (2) = 0;

	stat.fo_flag = 0;

	stat.fo_disp = 0;

	stat.main_prog_sw = 0;


	trace_control_word = 0;


/*  OUTPUT RELOCATION INFORMATION  */

/* First Two Words of Header */

	call cobol_reloc (addr (reloc_info), 4, 3002);

/* Remainder of Header and Fixed Internal Static Data */

	call cobol_reloc (null (), no_wds * 2 - 4, 3002);


/*  INITIALIZATION COMPLETE  */


exit:
	return;

     end cobol_link_init;
