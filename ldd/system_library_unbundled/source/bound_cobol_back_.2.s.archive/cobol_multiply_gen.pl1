/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_multiply_gen.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 11/22/84 by FCH, [5.3...], trace added */
/* Modified on 10/19/84 by FCH, [4.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 04/18/80 by FCH, new include file cobol_arith_util, fix not option */
/* Modified on 06/28/79 by FCH, [4.0-1], not option added for debug */
/* Modified since Version 4.0 */

/* format: style3 */
cobol_multiply_gen:
     proc (in_token_ptr, next_stmt_tag);

/*
The MULTIPLY statement generator: cobol_multiply_gen

FUNCTION

The function of this procedure is to generate code for the
Cobol MULTIPLY statement.

*/

/*  DECLARATION OF THE PARAMETERS  */

/* dcl in_token_ptr ptr;  */
/*  DECLARED BELOW IN AN INCLUDE FILE  */
dcl	next_stmt_tag	fixed bin;


/*  DESCRIPTION OF THE PARAMETERS  */
/*

PARAMETER		DESCRIPTION

in_token_ptr	Points to the in_token structure, which
		contains information describing the MULTIPLY
		statement for which code is to be
		generated. (input)  See the description
		below under INPUT for the exact contents of
		the input structure.
		NOTE: This parameter is declared in an include
		file following the executable statements
		of this procedure.
next_stmt_tag	Contains a compiler generated tag number
		(label) to be associated by the code
		generator driver with the Cobol statement
		that follows the MULTIPLY statement for which this
		procedure was called.  (output)  See
		the discussion below under OUTPUT
		for more details.
*/
/*

INPUT

The input to this procedure is a structure, which is defined by a
declaration of the following format:

dcl	1 in_token based (in_token_ptr),
		2 n fixed bin,
		2 code fixed bin
		2 token_ptr ( 0 refer (in_token.n)) ptr;

	where:

	in_token.n contains the number of entries in the
	token_ptr array.

	token_ptr(1) contains a pointer to a reserved word token
	(type 1) for the reserved word MULTIPLY.  This pointer is
	not used by this procedure.

	token_ptr(n) contains a pointer to an EOS (type 19) token.
	A declaration that describes the contents of the EOS
	token is given following the executable statements
	of this procedure in an include file.  The type 19
	token contains the following information that is
	used by this procedure.

		1. end_stmt.verb contains the code for the
		reserved word MULTIPLY.
		2. end_stmt.a defines the format of the MULTIPLY
		statement:

		value of end_stmt.a	| Mpy stmt format
		----------------------------------------
		  "000"b		| format 1
		  "001"b		| format 2

		3. end_stmt.b is "1"b if this MULTIPLY statement
		had an ON SIZE ERROR clause
		4. end_stmt.e contains the count of the
		number of operands to the RIGHT of "BY" for
		format 1 MULTIPLY statements.
		5, end_stmt.h contians the count of the number
		of operands to the RIGHT of "GIVING" for 
		format 2 MULTIPLY statements.

	token_ptr(2) through token_ptr(n-1) point to tokens
	that describe:

		1. the data items to be multiplied together.
		These tokens can be data name (type 9) tokens
		numeric literal (type 2) tokens.
		2. the data items to receive the result of
		the multiplication.  These tokens are always data
		name (type 9) tokens.


OUTPUT

The second parameter passed to cobol_multiply_gen is an output parameter.
A value is returned to the calling procedure, cobol_gen_driver_,
only for those multiply staatments that have  on size error clauses.
If an on size error clause is specified, then, in addition to
the code that evaluates the product, and assigns it to the receiving
data items, cobol_multiply_gen must also generate code that checks for
size error conditions.  If a size error is detected by the execution
of the generated code, then the imperative statement in the MULTIPLY
statment is executed, otherwise the imperative statement is
skipped.  The cobol_multiply_gen generator, however, when generating
code to skip over the imperative statement to the next statement,
does not know anything about the next statement.  This situation
is handled as follows:

	1. cobol_multiply_gen reserves a tag for the next COBOL
	statement.
	2. any transfers to the next statement reference the
	tag reserved by cobol_multiply_gen.  This tag is not yet
	defined. (associated with an instruction location in
	the text segment)
	3. after generation of code for an multiply statement is
	completed, cobol_multiply_gen passes the next statement tag
	back to its caller, cobol_gen_driver_, in the second
	parameter.
	4. when cobol_gen_driver_ detects the end of the imperative
	statement, the tag, reserved by cobol_multiply_gen, is
	defined.
*/

/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_binary_check$multiply
			ext entry (ptr, bit (1), fixed bin, fixed bin);
dcl	cobol_multiply_bin_gen
			ext entry (ptr, fixed bin);
dcl	cobol_num_to_udts	ext entry (ptr, ptr);
dcl	cobol_fofl_mask$on	ext entry;
dcl	cobol_fofl_mask$off ext entry;
dcl	cobol_build_resop	ext entry (ptr, ptr, fixed bin, ptr, bit (1), fixed bin, bit (1));
dcl	cobol_mpy3	ext entry (ptr, ptr, ptr, fixed bin);
dcl	cobol_mpy		ext entry (ptr, ptr, fixed bin);
dcl	cobol_define_tag	ext entry (fixed bin);
dcl	cobol_alloc$stack	ext entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_addr	ext entry (ptr, ptr, ptr);
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
dcl	cobol_arith_move_gen
			ext entry (ptr);
dcl	cobol_move_gen	ext entry (ptr);
dcl	cobol_make_type9$copy
			ext entry (ptr, ptr);
dcl	cobol_make_tagref	ext entry (fixed bin, fixed bin, ptr);
dcl	cobol_register$load ext entry (ptr);
dcl	cobol_make_type9$fixed_bin_35
			ext entry (ptr, fixed bin, fixed bin);
dcl	cobol_make_type9$type2_3
			ext entry (ptr, ptr);



/*  DECLARATIONS OF BUILTIN FUNCTIONS  */

dcl	addr		builtin;
dcl	fixed		builtin;
dcl	null		builtin;

/*  DECLARATION OF INTERNAL STATIC VARIABLES  */

dcl	first_ix		fixed bin int static init (2);

dcl	mpy_code		fixed bin int static init (184);

/*  Definition of an internal static buffer in which an EOS token is built for calls to the MOVE gen.  */

dcl	move_eos_buffer	(1:10) ptr int static;

/*  Definition of an internal static buffer in which an in_token is built for calls to the MOVE gen.  */

dcl	move_in_token_buffer
			(1:10) ptr int static;

dcl	move_data_init	fixed bin int static init (0);



/*  Definition of a numeric literal zero  */

dcl	1 num_lit_zero	int static,
	  2 size		fixed bin (15) init (37),
	  2 line		fixed bin (15) init (0),
	  2 column	fixed bin (15) init (0),
	  2 type		fixed bin (15) init (2),
	  2 integral	bit (1) init ("1"b),
	  2 floating	bit (1) init ("0"b),
	  2 filler1	bit (5) init ("0"b),
	  2 subscript	bit (1) init ("0"b),
	  2 sign		char (1) init (" "),
	  2 exp_sign	char (1) init (" "),
	  2 exp_places	fixed bin (15) init (0),
	  2 places_left	fixed bin (15) init (1),
	  2 places_right	fixed bin (15) init (0),
	  2 places	fixed bin (15) init (1),
	  2 lit_val	char (1) init ("0");


/*  DECLARATION OF INTERNAL AUTOMATIC VARIABLES  */

dcl	ose_flag		bit (1);
dcl	receive_count	fixed bin;

dcl	fmt1		bit (1);



dcl	ix		fixed bin;
dcl	iy		fixed bin;
dcl	move_eos_ptr	ptr;
dcl	move_in_token_ptr	ptr;
dcl	multiplicand_ptr	ptr;
dcl	multiplier_ptr	ptr;
dcl	resultant_operand_ptr
			ptr;
dcl	saved_ptr		ptr;

dcl	rdmax_value	fixed bin;
dcl	overflow_code_generated
			bit (1);
dcl	possible_ovfl_flag	bit (1);
dcl	receiving_is_not_stored
			bit (1);
dcl	size_error_inst	bit (36);
dcl	size_error_inst_ptr ptr;
dcl	size_error_token_ptr
			ptr;
dcl	stored_token_ptr	ptr;
dcl	no_overflow_tag	fixed bin;
dcl	op1_token_ptr	ptr;
dcl	op2_token_ptr	ptr;
dcl	temp_resultant_operand_ptr
			ptr;
dcl	(binary_ok, not_bit)
			bit (1);
dcl	source_code	fixed bin;
dcl	target_code	fixed bin;

dcl	dn_ptr		ptr;

/**************************************************/
start:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(cmg);/**/
						/*  Check to see if binary arithmetic (using A and Q registers) can be done.  */
	call cobol_binary_check$multiply (in_token_ptr, binary_ok, target_code, source_code);
	if binary_ok
	then do;					/*  Binary arithmetic can be done.  */
		call cobol_multiply_bin_gen (in_token_ptr, next_stmt_tag);
		return;
	     end;					/*  Binary arithmetic can be done.  */


	move_in_token_ptr = null ();

/*   Get meaningful data from the EOS token.  */
	eos_ptr = in_token.token_ptr (in_token.n);

/*  ON SIZE ERROR flag  */
	ose_flag = end_stmt.b;

/*  Determine the number of receiving operands.  */
	if end_stmt.a = "000"b
	then do;					/*  format 1 multiply.  */
		fmt1 = "1"b;
		receive_count = end_stmt.e;
		multiplicand_ptr = in_token.token_ptr (first_ix);

		if multiplicand_ptr -> data_name.type ^= rtc_dataname
		then do;				/*  Multiplicand not dataname,  must be numeric literal or ZERO.  */

			if multiplicand_ptr -> data_name.type = rtc_numlit
			then saved_ptr = multiplicand_ptr;
						/*  numeric literal  */
			else saved_ptr = addr (num_lit_zero);
						/*  Assume multiplicand is figurative constant ZERO.  */
			multiplicand_ptr = null ();	/*  Utility provides buffer for dataname token.  */

/*  Pool the literal and get a dataname token for it.  */
			call cobol_make_type9$type2_3 (multiplicand_ptr, saved_ptr);

		     end;				/*  Multiplicand not dataname, must be numeric literal or ZERO.  */
	     end;					/*  format 1 multiply  */


	else do;					/*  fmt 2 multiply  */
		fmt1 = "0"b;
		receive_count = end_stmt.h;
	     end;					/*  fmt 2 multiply  */

	if ose_flag				/*  On size error clause was present, do processing common to both format multiplies.  */
	then do;

/*  Reserve a tag to be associated (by the cobol generator driver) with the next
			cobol statement.  */
		next_stmt_tag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;


/*  Get a size error flag in the stack, and initialize it to zero.  */
		size_error_inst_ptr = addr (size_error_inst);
		call get_size_error_flag (size_error_token_ptr, size_error_inst_ptr);

	     end;					/*  On size error clause was present, do processing common to both format multiplies.  */

	if ^fmt1
	then do;					/*  FORMAT 2 multiply, multiply the first two operands and store the result in a temporary.  */

/*  Build a resultant operand for the product.  */
		multiplicand_ptr = in_token.token_ptr (first_ix);
		multiplier_ptr = in_token.token_ptr (first_ix + 1);

		call cobol_build_resop (multiplicand_ptr, multiplier_ptr, mpy_code, resultant_operand_ptr, "0"b,
		     rdmax_value, possible_ovfl_flag);

/*  Generate code to perform the multiplication.  */
		call cobol_mpy3 (multiplicand_ptr, multiplier_ptr, resultant_operand_ptr, 1 /*  MPY  */);

		move_in_token_ptr = addr (move_in_token_buffer (1));
		move_eos_ptr = addr (move_eos_buffer (1));

		if move_data_init ^= cobol_$compile_count
		then call init_move_data;
	     end;					/*  FORMAT2 multiply, multiply the first two operrands and store the result in a temp.  */


/*  Get subscript of pointer in the in_token array that points to first receiving field.  */

	iy = in_token.n - receive_count;

	do ix = 1 to receive_count;			/*  Generate code to get the prdouct into the receiving field(s).  */
	     receiving_is_not_stored = "0"b;		/*  Generate code to store the receiving field into a temporary, if the on size
		error flag is on, and the receiving field is NOT a numeric edited item.  */

	     if ose_flag
	     then if in_token.token_ptr (iy) -> data_name.numeric_edited /*  Receiving is numeric edited.  */
		     | (in_token.token_ptr (iy) -> data_name.display
		     & in_token.token_ptr (iy) -> data_name.item_signed
		     & in_token.token_ptr (iy) -> data_name.sign_separate = "0"b)
						/*  overpunch sign  */
		then receiving_is_not_stored = "1"b;
		else call receiving_field (in_token.token_ptr (iy), stored_token_ptr, 1);


/*  Generate code to turn the overflow mask indicator bit ON  */
	     if ose_flag
	     then call cobol_fofl_mask$on;

	     if fmt1				/*  Generate code to multiply the first operand by the receiving field value,
			and store the result into the receiving field.  */
	     then do;


		     move_in_token_ptr = null ();
		     if not_dec_operand (in_token.token_ptr (iy))
		     then do;			/*  The receiving operand is not decimal.  Must convert to decimal
			before performing the multiplication.  */

			     op1_token_ptr = multiplicand_ptr;
			     op2_token_ptr = in_token.token_ptr (iy);

/*  Convert the non-decimal operand(s) , and build a temporary
				into which to store the result of the computation.  */

			     call cobol_build_resop (op1_token_ptr, op2_token_ptr, mpy_code,
				temp_resultant_operand_ptr, "0"b, rdmax_value, possible_ovfl_flag);

/*  Generate code to multiply the two operands, and
				store the result into a temporary.  */
			     call cobol_mpy3 (op1_token_ptr, op2_token_ptr, temp_resultant_operand_ptr, 1);

/*  Generate code to move the result of the multiply to
				the receiving field.  */

			     move_in_token_ptr = addr (move_in_token_buffer (1));
			     move_eos_ptr = addr (move_eos_buffer (1));

			     if move_data_init ^= cobol_$compile_count
			     then call init_move_data;

			     move_in_token_ptr -> in_token.token_ptr (2) = temp_resultant_operand_ptr;
			     move_in_token_ptr -> in_token.token_ptr (3) = in_token.token_ptr (iy);

			     call cobol_arith_move_gen (move_in_token_ptr);
			     if move_in_token_ptr -> in_token.code ^= 0
			     then receiving_is_not_stored = "1"b;


			end;			/*  The receiving operand is not decimal.  Must convert
				to decimal before performing the multiply.  */

		     else do;			/*  Receiving operand is decimal.  */

			     if not_dec_operand (multiplicand_ptr)
			     then do;		/*  Left operand is not decimal--convert to decimal.  */
				     op1_token_ptr = multiplicand_ptr;
				     multiplicand_ptr = null ();
				     call cobol_num_to_udts (op1_token_ptr, multiplicand_ptr);


				end;		/*  Left operand is not decimal--convert to decimal.  */

			     call cobol_mpy (multiplicand_ptr, in_token.token_ptr (iy), 1);

			end;			/*  Receiving operand is decimal.  */

		end;				/*  Generate code to multiply the first operand by the receiving field value,
				and store the result into the recieving field.  */

	     else do;				/*  Generate code to move the product already calculated into the receiving field.  */

		     move_in_token_ptr -> in_token.token_ptr (move_in_token_ptr -> in_token.n - 2) =
			resultant_operand_ptr;
		     move_in_token_ptr -> in_token.token_ptr (move_in_token_ptr -> in_token.n - 1) =
			in_token.token_ptr (iy);

		     call cobol_arith_move_gen (move_in_token_ptr);
		     if move_in_token_ptr -> in_token.code ^= 0
		     then receiving_is_not_stored = "1"b;
		end;				/*  Generate code to move the product already calculated into the receiving
				fields.  */

	     if ose_flag
	     then do;				/*  Generate code to test for overflow resulting from the multiply/store
				or move.  */

/*  Reserve a tag to which to transfer if no overflow occurs.  */
		     no_overflow_tag = cobol_$next_tag;
		     cobol_$next_tag = cobol_$next_tag + 1;

/*  Generate code to test for overflow.  */
		     call test_for_overflow (no_overflow_tag, size_error_inst_ptr, move_in_token_ptr);

/*  Generate code to restore the stored value back into the receiving
					field.  */
/*  The value is restored only if the receiving field was not numeric edited.  If
			the receiving field was numeric edited, the result of the multiplication
			has been moved into a temporary, and
			the receiving field has not been modified at all.  */
		     if receiving_is_not_stored = "0"b
		     then call receiving_field (in_token.token_ptr (iy), stored_token_ptr, 2 /* RESTORE*/);

/*  Define the no_overflow_tag at the next instruction in the text segment.  */
		     call cobol_define_tag (no_overflow_tag);

/*  Generate code to turn the overflow mask indicator bit OFF  */
		     call cobol_fofl_mask$off;

		end;				/*  Generate code to test for overflow resulting from the multiply/store
				or move.  */
	     else if receiving_is_not_stored
	     then call cobol_move_gen (move_in_token_ptr);/*  Call cobol_move_gen to move the temp result
			into a numeric edited receiving field  */



/*  Increment the subscript to the next receiving field.  */
	     iy = iy + 1;

	end;					/*  Get the product into the receiving field(s).  */

	if ose_flag
	then do;					/*  Generate code that tests whether overflow occurred, and jumps over the
			imperative stmt if no overflow occurred.  */


/*[4.0-1]*/
		if end_stmt.f = "01"b
		then not_bit = "1"b;
		else not_bit = "0"b;
		call test_size_error (size_error_token_ptr, size_error_inst_ptr, next_stmt_tag, "1"b, not_bit);

	     end;					/*  Generate code that tests whether overflow occurred, and jumps over the
			imperative stmt if no overflow occurrred.  */

	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_End(cmg);/**/

	return;

/*************************************/
init_move_data:
     proc;

/*  This internal procedure initializes the input token
and EOS token used in calls to the cobol move generators.  */

/*  Initialize in_token structure and EOS token structure
	used in calls to the MOVE generator.  */

	saved_ptr = in_token_ptr;
	in_token_ptr = move_in_token_ptr;

	in_token.n = 4;
	in_token.code = 0;
	in_token.token_ptr (1) = null ();
	in_token.token_ptr (in_token.n) = move_eos_ptr;
	in_token_ptr = saved_ptr;

	saved_ptr = eos_ptr;
	eos_ptr = move_eos_ptr;

	end_stmt.verb = 18;				/*  MOVE  */
	end_stmt.e = 1;				/*  COUNT of the receiving fields  */
	end_stmt.type = rtc_eos;
	eos_ptr = saved_ptr;

	move_data_init = cobol_$compile_count;

     end init_move_data;

	/***.....	dcl cmg char(18) init("COBOL_MULTIPLY_GEN");/**/

	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/




/**************************************************/
/*	INCLUDE FILES USED BY THIS PROCEDURE    */
/**************************************************/

%include cobol_arith_util;
%include cobol_type9;
%include cobol_in_token;
%include cobol_type19;
%include cobol_;
%include cobol_addr_tokens;
%include cobol_record_types;

     end cobol_multiply_gen;
