/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_gen_ioerror.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 06/27/79 by FCH, [4.0-1], entry finish_up_not added for debug */
/* Modified since Version 4.0 */

/* format: style3 */
cobol_gen_ioerror:
     proc (ft_ptr, ioerror_ptr);

dcl	ft_ptr		ptr;			/* ptr to the file table */
dcl	ioerror_ptr	ptr;			/* ptr to additional error information */

/*[4.0-1]*/
declare	passed_tag	fixed bin;

dcl	1 ioerror		based (ioerror_ptr),
	  2 cobol_code	fixed bin,
	  2 retry_tag	fixed bin,		/* tagno of retry address; 0 means just reissue error */
	  2 is_tag	fixed bin,		/* tagno of imperative statement; 0 if none */
	  2 ns_tag	fixed bin,		/* tagno of next statement; always reserved by caller */
						/* defined by finish_up if is_tag=0; else by gen driver */
	  2 type1_ptr	ptr,			/* pts to reserved word token for the verb of caller */
	  2 mode		fixed bin;		/* -1 = file unopen at time of error - no categorical use procs apply
				   2 = file is being opened extend	0>m>21
				   3 = file is being opened input	20>m>41
				   4 = file is being opened i-o	40>m>61
				   5 = file is being opened output	60>m 	*/

dcl	file_key_desc	char (40) based;		/* a template for fkey_type9.file_key_info */


dcl	retry_tag		fixed bin;
dcl	ntag		fixed bin;
dcl	mode_count	fixed bin;
dcl	temp_error_exit	fixed bin;

dcl	fkey_ptr		ptr;

dcl	lda_sw		bit (1);
dcl	fsbptr_sw		bit (1);
dcl	perform_mode_sw	bit (1);
dcl	io_sw		bit (1);			/*[4.0-1]*/
declare	new_tag		fixed bin;

/*************************************/
start:
	if file_table.file_status
	then call set_status (addr (skey12_type9), addr (skey3_type9));
	if ioerror.is_tag > 0
	then do;					/* an imperative statement follows */
		call cobol_emit (addr (check_is_instr), null (), 2);
		call cobol_make_tagref (ioerror.is_tag, cobol_$text_wd_off - 1, null ());
	     end;
	perform_mode_sw = "0"b;			/*-07/07/76-*/
	temp_error_exit = file_table.error_exit;
	if file_table.error_exit ^= 0
	then call perform_use (temp_error_exit);	/* specific use proc */
	else do;					/* check for categorical use procs */
		mode_count = 0;
		if ^file_table.external
		then do;				/* can skip check for int file opened in only 1 mode */
			if file_table.open_ext
			then mode_count = mode_count + 1;
			if file_table.open_in
			then mode_count = mode_count + 1;
			if file_table.open_out
			then mode_count = mode_count + 1;
			if file_table.open_io
			then mode_count = mode_count + 1;
		     end;
		lda_sw, fsbptr_sw, io_sw = "0"b;
		if ioerror.mode = 0
		then do;
			if fixed_common.extend_error_exit ^= 0
			then /* possible to be opened EXTEND? */
			     if (^file_table.external & file_table.open_ext)
				| (file_table.external & file_table.organization = 1
				& (file_table.write | file_table.close | file_table.open_ext))
			     then call perform_mode (fixed_common.extend_error_exit, extend_mode);
			if fixed_common.input_error_exit ^= 0
			then /* possible to be opened INPUT? */
			     if (^file_table.external & file_table.open_in)
				| (file_table.external
				& (file_table.read | file_table.start | file_table.close | file_table.open_in))
			     then call perform_mode (fixed_common.input_error_exit, input_mode);
			if fixed_common.output_error_exit ^= 0
			then /* possible to be opened OUTPUT? */
			     if (^file_table.external & file_table.open_out)
				| (file_table.external
				& (file_table.write | file_table.close | file_table.open_out))
			     then call perform_mode (fixed_common.output_error_exit, output_mode);
			if fixed_common.i_o_error_exit ^= 0
			then /* possible to be opened I-O? */
			     if (^file_table.external & file_table.open_io)
				| (file_table.external
				& (file_table.read | file_table.rewrite | file_table.start | file_table.delete
				| file_table.close | file_table.open_io))
			     then do;
				     io_sw = "1"b;
				     call perform_mode (fixed_common.i_o_error_exit, i_o_mode);
				end;
		     end;
		else if ioerror.mode > 0
		then do;
			mode_count = 1;
			if ioerror.mode > 48
			then if fixed_common.output_error_exit ^= 0
			     then call perform_mode (fixed_common.output_error_exit, output_mode);
			     else ;
			else if ioerror.mode > 32
			then if fixed_common.i_o_error_exit ^= 0
			     then call perform_mode (fixed_common.i_o_error_exit, i_o_mode);
			     else ;
			else if ioerror.mode > 16
			then if fixed_common.input_error_exit ^= 0
			     then call perform_mode (fixed_common.input_error_exit, input_mode);
			     else ;
			else if fixed_common.extend_error_exit ^= 0
			then call perform_mode (fixed_common.extend_error_exit, extend_mode);
		     end;

		if (mode_count ^= 1 & mode_count ^= 4) | ^perform_mode_sw
		then do;				/* must provide fall-thru */
			retry_tag = ioerror.retry_tag;
			if retry_tag = 0
			then do;
				retry_tag = cobol_$next_tag;
				cobol_$next_tag = cobol_$next_tag + 1;
				call cobol_define_tag (retry_tag);
			     end;
			call cobol_gen_error (ioerror.cobol_code, retry_tag);
		     end;
	     end;
	return;


/*************************************/
/* SUBROUTINES */
/*************************************/

perform_mode:
     proc (procno, mode);
dcl	procno		fixed bin;
dcl	mode		fixed bin;

	if mode_count ^= 1
	then do;
		ntag = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		if ^fsbptr_sw
		then do;
			call cobol_set_fsbptr (ft_ptr);
			fsbptr_sw = "1"b;
		     end;
		if ^lda_sw
		then do;
			call cobol_emit (addr (set_mode_instr), null (), 2);
			lda_sw = "1"b;
		     end;
		if ^(mode_count = 4 & io_sw)
		then do;				/* no need to compare - can just fall in */
			substr (cmpa_dl_instr, 1, 18) = substr (unspec (mode), 19, 18);
			call cobol_emit (addr (cmpa_dl_instr), null (), 1);
			call cobol_emit (addr (tnz_instr), null (), 1);
			call cobol_make_tagref (ntag, cobol_$text_wd_off - 1, null ());
		     end;
	     end;
	call perform_use (procno);
	perform_mode_sw = "1"b;			/* if not at least once, then must provide fall-thru */
	if mode_count ^= 1
	then call cobol_define_tag (ntag);
	return;
     end perform_mode;


perform_use:
     proc (procno);
dcl	procno		fixed bin;

	if ^perform_mode_sw
	then call cobol_gen_error$use (ioerror.cobol_code);
						/* record error (once) */
	mpout.pt1 = ioerror.type1_ptr;
	type7.proc_num = procno;
	mpout.pt2, mpout.pt3 = addr (type7);
	mpout.pt4 = addr (perform_type19);
	call cobol_perform_gen (addr (mpout));
	call cobol_emit (addr (tra_instr), null (), 1);	/* and go to next statement */
	call cobol_make_tagref (ioerror.ns_tag, cobol_$text_wd_off - 1, null ());
	return;
     end perform_use;


set_status:
     proc (skey12_ptr, skey3_ptr);
dcl	skey12_ptr	ptr;
dcl	skey3_ptr		ptr;

	call cobol_read_rand (1, file_table.file_status_info, fkey_ptr);
	addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;
	mpout.pt1 = ioerror.type1_ptr;
	mpout.pt2 = skey12_ptr;
	mpout.pt3 = addr (fkey_type9);
	mpout.pt4 = addr (perform_type19);
	call cobol_move_gen (addr (mpout));
	if file_table.extra_status
	then do;
		call cobol_read_rand (1, file_table.extra_status_info, fkey_ptr);
		addr (fkey_type9.file_key_info) -> file_key_desc = file_key.desc;
		mpout.pt2 = skey3_ptr;
		call cobol_move_gen (addr (mpout));
	     end;
	return;
     end set_status;


/*************************************/
/*************************************/
finish_up:
     entry (ft_ptr, ioerror_ptr);

	if file_table.file_status
	then call set_status (addr (zero_type1), addr (zero_type1));
	if ioerror.is_tag = 0
	then call cobol_define_tag (ioerror.ns_tag);
	else do;					/* an imperative statement follows */
		call cobol_emit (addr (tra_instr), null (), 1);
						/* transfer around the imperative statement */
		call cobol_make_tagref (ioerror.ns_tag, cobol_$text_wd_off - 1, null ());
						/* gen driver will define this */
		call cobol_define_tag (ioerror.is_tag);
		call cobol_reg_manager$set_pr5;	/* must do now since we have come directly here */
	     end;
	return;


finish_up_not:
     entry (passed_tag);

/*[4.0-1]*/
	new_tag = cobol_$next_tag;			/*[4.0-1]*/
	cobol_$next_tag = cobol_$next_tag + 1;

/*[4.0-1]*/
	call cobol_emit (addr (tra_instr), null (), 1);	/*[4.0-1]*/
	call cobol_make_tagref (new_tag, cobol_$text_wd_off - 1, null ());

/*[4.0-1]*/
	call cobol_define_tag (passed_tag);

/*[4.0-1]*/
	passed_tag = new_tag;

/*[4.0-1]*/
	return;

%include cobol_gen_ioerror_data;
     end cobol_gen_ioerror;
