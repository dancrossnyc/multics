/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_fix_driver_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 04/01/81 by FCH, fix decl for map_data_table, [4.4-1], BUG472(TR8869,8970) */
/* Modified on 07/18/78 by RAL, [3.0-1], cobol_linkage_header.incl.pl1 changed */
/* Modified since Version 3.0.	*/
/*{*/
/* format: style3 */
cobol_fix_driver_:
     proc;

/*  This is the driver for the fixup phase of  the Multics
COBOL compiler.  It is called by the cobol driver and requires
no arguments.  It calls the following modules:  */

dcl	cobol_make_object_map
			entry;
dcl	cobol_mst		entry;
dcl	cobol_fixup	entry (ptr);
dcl	cobol_patch	entry (ptr);
dcl	cobol_paste	entry (ptr);

/* The pointer passed to each of these is to
an array containing values pertinent to the
structure of the components of the object segment.  */
/*}*/


dcl	value_ptr		ptr;
dcl	no_stmts_2	fixed bin;
dcl	1 map_data_table	aligned based (cobol_$map_data_ptr),
	  2 no_source_stmts fixed bin aligned,
	  2 data		(0 refer (map_data_table.no_source_stmts)),
	    3 line_no	fixed bin unaligned,
	    3 text_addr	fixed bin unaligned,	/*[4.4-1]*/
	    3 col		fixed bin unal,		/*[4.4-1]*/
	    3 label	bit unal;

dcl	1 value		aligned,
	  2 con_len	fixed bin aligned,
	  2 code_len	fixed bin aligned,
	  2 text_len	fixed bin aligned,
	  2 def_len	fixed bin aligned,
	  2 link_len	fixed bin aligned,
	  2 sym_len	fixed bin aligned,
	  2 int_storage_len fixed bin aligned,
	  2 exec_off	fixed bin aligned;		/* set by cobol_patch to wd before entry */

dcl	psb_ptr		ptr,
	psb_off		fixed bin;
dcl	(old_link, new_link, temp_relp, i, old_reloc, new_reloc, no_links)
			fixed bin,
	(cmp_cnt, cmp_bit, cmp_rest)
			fixed bin,
	(new_link_ptr, old_link_ptr)
			ptr;

dcl	1 link_temp	(no_links) aligned based,
	  2 header	bit (18) unal,
	  2 rest		bit (54) unal;

start:
	value.con_len = cobol_$constant_offset;

	if fixed_common.options.st
	then call cobol_mst;
	value.code_len = cobol_$text_wd_off;
	value.text_len = value.con_len + value.code_len;
	value.def_len = cobol_$def_wd_off;
	value.sym_len = cobol_$sym_wd_off;

	if fixed_common.options.profile
	then do;

		no_stmts_2 = map_data_table.no_source_stmts * 2 + 2;
		value.int_storage_len = fixed_static_length + no_stmts_2;
		sym_ptr = sym_base_ptr;
		psb_off = fixed (symbol_block_header.area_relp, 18);
		psb_ptr = addrel (sym_ptr, psb_off);
		psb_ptr -> pl1_symbol_block.profile = linkage_header.links_relp;
		psb_ptr -> pl1_symbol_block.flags.profile = "1"b;
		value.link_len = cobol_$link_wd_off + no_stmts_2;
		old_link = fixed (linkage_header.links_relp);
		new_link = old_link + no_stmts_2;
		old_link_ptr = addrel (link_base_ptr, old_link);
		new_link_ptr = addrel (link_base_ptr, new_link);
		no_links = cobol_$link_wd_off - 8 - fixed_static_length;
		no_links = divide (no_links, 2, 17, 0);

		if no_links > 0
		then do;

			old_reloc = old_link * 10 - 19;
			new_reloc = new_link * 10 - 19;
			relptr = cobol_$reloc_link_base_ptr;
			i = no_stmts_2 * 2;
			cmp_cnt = divide (i, 1023, 17, 0);
			cmp_rest = mod (i, 1023);
			cmp_bit = 15 * (cmp_cnt + 1);
			n_bits = n_bits + cmp_bit;

/* The 23rd bit of relbits are the first link.	*/

			substr (relbits, 23 + cmp_bit, no_links * 12) = substr (relbits, 23, no_links * 12);

			if cmp_cnt ^= 0
			then do i = 1 to cmp_cnt;

				substr (relbits, 8 + i * 15) = "111101111111111"b;

			     end;

			substr (relbits, 23 + cmp_cnt * 15, 5) = "11110"b;
			substr (relbits, 28 + cmp_cnt * 15, 10) = substr (unspec (cmp_rest), 27, 10);
			linkage_header.links_relp = substr (unspec (new_link), 19, 18);

			cobol_$link_wd_off = cobol_$link_wd_off + no_stmts_2;

			do i = no_links to 1 by -1;

			     temp_relp = fixed (old_link_ptr -> link_temp.header (i)) - no_stmts_2;
			     new_link_ptr -> link_temp.rest (i) = old_link_ptr -> link_temp.rest (i);
			     new_link_ptr -> link_temp.header (i) = substr (unspec (temp_relp), 19, 18);

			end;

			do i = 1 to (map_data_table.no_source_stmts + 1);

			     temp_relp = (i - 1) * 2;
			     old_link_ptr -> link_temp.header (i) = substr (unspec (temp_relp), 19, 18);
			     old_link_ptr -> link_temp.rest (i) = (54)"0"b;

			end;
		     end;
	     end;
	else do;

		value.int_storage_len = fixed_static_length;
		value.link_len = cobol_$link_wd_off;

	     end;

	value_ptr = addr (value);

	if fixed_common.options.m_map
	then call cobol_make_object_map;

	call cobol_fixup (value_ptr);
	call cobol_patch (value_ptr);
	call cobol_paste (value_ptr);

exit:
	return;


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_fixed_static;
%include cobol_;
%include cobol_fixed_common;
%include cobol_ext_;
%include cobol_linkage_header;
/* [3.0-1] */
%include pl1_symbol_block;
%include cobol_sbh;
%include cobol_relinfo;
     end cobol_fix_driver_;
