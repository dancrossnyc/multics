/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_gen_driver_.pl1 Added Trace statements.
  2) change(89-04-23,Zimmerman), approve(89-04-23,MCR8082),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8082 cobol_gen_driver_.pl1 Fix wild array subscript.
                                                   END HISTORY COMMENTS */


/* Modified on 02/01/85 by FCH, [5.3-2], BUG561, cond statements revised */
/* Modified on 10/19/84 by FCH, [5.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 09/03/83 by FCH, [5.2...], trace added */
/* Modified on 01/20/81 by FCH, [4.4-1], BUG461, statement map incorrect if statement follows para at end of perf range */
/* Modified on 05/16/80 by FCH, [4.2-5], decl for tag_addr corrected */
/* Modified on 04/18/80 by FCH, [4.2-4], tag stack added */
/* Modified on 04/08/80 by FCH, [4.2-3], subscripts lost if abbrev compare BUG428(TR3271) */
/* Modified on 10/20/79 by PRP, [4.1-2], recognize paragraph names for statement map */
/* Modified on 10/20/79 by PRP, [4.1-1], add to map_data_table for statement map */
/* Modified on 06/27/79 by FCH, [4.0-1], not option added for debug */
/* Modified since Version 4.0 */
/* format: style3 */
cobol_gen_driver_:
     proc;

dcl	on_err_tag	fixed bin,
	subscript_flag	fixed bin,
	binit_tag		fixed bin,
	decl_flag		fixed bin,
	last_decl_proc	fixed bin,
	fxs_tag		fixed bin,
	fxs_locno		fixed bin,
	index		fixed bin,
	pc_flag		fixed bin,
	search_flag	fixed bin,
	temp		fixed bin,
	token_type	fixed bin,
	sub_token_index	fixed bin,
	space_ptr		ptr,
	subscript_ptr	ptr,
	record_ptr	ptr,
	current_token_ptr	ptr static int,
	temp_prev_ptr	ptr,
	bypass_flag	bit (1),
	temp_ptr		ptr,
	decl_sw		fixed bin,
	(end_flag, off)	fixed bin;		/*[4.2-4]*/
declare	tag_stack_loc	fixed bin;		/*[4.2-4]*/
declare	tag_stack		(512) fixed bin;



dcl	dn_ptr		ptr,
	h_no		fixed bin;


dcl	seq_file_hdr	(8) fixed bin aligned based (cobol_$minpral5_ptr);

dcl	1 shdr		based (cobol_$minpral5_ptr) aligned,
						/* header of working file */
	  2 x1		char (12),
	  2 next		fixed bin,		/* offset of next token */
	  2 code		fixed bin,		/* 10 for sequential file */
	  2 x3		char (4),			/* unused */
	  2 next_file	ptr,
	  2 prev_file	ptr,			/* points to previous file */
	  2 fc		char (4),			/* file code for each different kind of file */
	  2 file_no	fixed bin,		/* file count for each working file */
	  2 x2		char (12),		/* unused */
	  2 first		fixed bin;		/* first token */


dcl	1 record		aligned based (record_ptr),
	  2 prev_rcd_ln	fixed bin aligned,
	  2 this_rcd_ln	fixed bin aligned;

dcl	1 token_hdr	aligned based (in_token.token_ptr (in_token.n)),
	  2 size		fixed bin (15) aligned,
	  2 line		fixed bin (15) aligned,
	  2 column	fixed bin (15) aligned,
	  2 type		fixed bin (15) aligned,
	  2 sub_ptr	ptr unal;

dcl	1 sub_token	aligned based (in_token_ptr),
	  2 pad1		fixed bin aligned,
	  2 pad2		fixed bin aligned,
	  2 sub_token_ptr	(511) ptr aligned;

dcl	1 map_data_table	aligned based (cobol_$map_data_ptr),
	  2 no_source_stmts fixed bin aligned,
	  2 data		(0 refer (map_data_table.no_source_stmts)),
	    3 line_no	fixed bin unaligned,
	    3 text_addr	fixed bin unaligned,
	    3 col		fixed bin unaligned,
	    3 label	bit unaligned;

/*[4.2-5]*/
declare	1 DEF		aligned based (cobol_$tag_table_ptr),
						/*[4.2-5]*/
	  2 tag_max	fixed bin,		/*[4.2-5]*/
	  2 TAG		(32767),			/*[4.2-5]*/
	    3 tag_addr	fixed bin (17) unal,	/*[4.2-5]*/
	    3 tag_no	fixed bin (17) unal;


/*************************************/
start:	/***..... Trace_Bit="0"b;/**/
	/***..... Trace_Lev=0;/**/
	/***..... Trace_Line="0123456789ABCDEFGHIJKLMOOPQRSTUVWXYZ";/**/
						/*  PROCESS ALTER/PERFORM INFORMATION  */
	space_ptr = cobol_$misc_end_ptr;

	if fixed_common.perf_alter_info ^= "00000" | fixed_common.size_perform_info ^= "00000"
	then call cobol_alter_perform (space_ptr, cobol_$misc_max);

	else do;
		cobol_$alter_list_ptr = null;
		cobol_$perform_list_ptr = null;
		cobol_$seg_init_list_ptr = null;
		seg_init_flag = 0;
	     end;

comp_token_area:
	cobol_$temp_token_max = cobol_$misc_max - binary (rel (space_ptr), 17) + binary (rel (cobol_$misc_end_ptr), 17);

	if cobol_$temp_token_max < 28
	then do;

		error_info.message = "Temporary token area overflow";
		error_info.message_len = 29;

		call signal_ ("command_abort_", null, addr (error_info));

		goto comp_token_area;

	     end;

	cobol_$temp_token_area_ptr = space_ptr;
	cobol_$temp_token_ptr = space_ptr;
	cobol_$misc_end_ptr = null;



	bypass_flag = "0"b;
	cobol_$sect_eop_flag = 0;
	cobol_$para_eop_flag = 0;
	cobol_$alter_flag = 0;
	cobol_$alter_index = 1;
	cobol_$perform_para_index = 1;
	cobol_$perform_sect_index = 0;
	cobol_$priority_no = 0;
	decl_flag = 0;
	end_flag = 0;
	last_decl_proc = 0;
	on_err_tag = 0;				/*[4.2-4]*/
	tag_stack_loc = 0;
	pc_flag = 0;
	search_flag = 0;
	subscript_flag = 0;
	cobol_$init_stack_off = 68;
	cobol_$stack_off = cobol_$init_stack_off;
	cobol_$max_stack_off = cobol_$init_stack_off;
	in_token_ptr = cobol_$token_block1_ptr;
	in_token.n = 0;
	sub_token_index = 511;
	in_token.code = 0;
	map_data_table.no_source_stmts = 0;

	if fixed_common.prog_coll_seq ^= 0
	then do;

		index = fixed_common.prog_coll_seq;

		call cobol_read_rand$fixed_bin (2, index, alpha_name_ptr);

		cobol_$main_pcs_ptr = alpha_name_ptr;

		if alphabet_name.iw_key = 0
		then do;
			call cobol_pool (alphabet_name.table, 2, alphabet_name.offset);
			alphabet_name.offset = alphabet_name.offset * 4;
			alphabet_name.segno = 3000;
		     end;

		if alphabet_name.iw_key = 11
		then alpha_name_ptr = null ();	/* ascii */

	     end;
	else cobol_$main_pcs_ptr = null ();

	temp_prev_ptr = shdr.prev_file;

	if temp_prev_ptr ^= null ()
	then do while (temp_prev_ptr ^= null ());
		cobol_$minpral5_ptr = temp_prev_ptr;
		temp_prev_ptr = cobol_$minpral5_ptr -> shdr.prev_file;
	     end;

	record_ptr = addrel (cobol_$minpral5_ptr, seq_file_hdr (5) + 4);

	goto eof_test;

/*  .......  GET TOKENS COMPRISING "STATEMENT"  .......	  */

get_tokens:
	if on_err_tag < 0
	then do;
		on_err_tag = 0;
		bypass_flag = "1"b;
	     end;

	if in_token.code > 0
	then in_token.n = in_token.code;
	else do;

		if search_flag = 0
		then do;
			if cobol_$stack_off > cobol_$max_stack_off
			then cobol_$max_stack_off = cobol_$stack_off;
			cobol_$stack_off = cobol_$init_stack_off;
		     end;
		cobol_$temp_token_ptr = cobol_$temp_token_area_ptr;

		if in_token.code = -1
		then if in_token_ptr = cobol_$token_block1_ptr
		     then in_token_ptr = cobol_$token_block2_ptr;
		     else in_token_ptr = cobol_$token_block1_ptr;
		in_token.n = 0;

	     end;

	in_token.code = 0;				/*[4.2-3]*/
	if h_no ^= 13
	then sub_token_index = 511;

get_next_token:
	temp = record.this_rcd_ln + 7;
	record_ptr = addrel (record_ptr, substr (unspec (temp), 17, 18));


eof_test:
	if record.this_rcd_ln <= 0
	then do;

		if shdr.next_file = null ()
		then go to data_and_seg_init;
		else do;

			cobol_$minpral5_ptr = shdr.next_file;
			record_ptr = addrel (cobol_$minpral5_ptr, seq_file_hdr (5) + 4);

			if record.this_rcd_ln <= 0
			then go to data_and_seg_init;
		     end;
	     end;

type_tests:
	in_token.n = in_token.n + 1;

token_block_ovfl_test:
	if in_token.n > sub_token_index
	then do;

		error_info.message = "Token block overflow";
		error_info.message_len = 20;
		call signal_ ("command_abort_", null, addr (error_info));

		goto token_block_ovfl_test;

	     end;

	in_token.token_ptr (in_token.n) = addrel (record_ptr, 2);
	current_token_ptr = addrel (record_ptr, 2);
	token_type = token_hdr.type;

	/***.....	if Trace_Bit/**/
	/***.....	then call ioa_("^30x^a^d^x^a^d^x^a^p^x^a^d",/**/
	/***.....			"TOKEN: LINE= ",token_hdr.line,"COL= ",token_hdr.column,"LOC= ",record_ptr,/**/
	/***.....			"TYPE= ",token_type);/**/


	if token_type = 7				/*[4.1-2]*/
	then do;

/*[4.4-1]*/
		off = cobol_$text_wd_off;		/*[4.4-1]*/
		if cobol_$para_eop_flag ^= 0
		then off = off + 2;			/* last para was end of perform */


		map_data_table.no_source_stmts = map_data_table.no_source_stmts + 1;
		map_data_table.data.line_no (map_data_table.no_source_stmts) = current_token_ptr -> proc_def.line;
		map_data_table.data.text_addr (map_data_table.no_source_stmts) = off;
		map_data_table.col (map_data_table.no_source_stmts) = current_token_ptr -> proc_def.column;
						/*[4.1-1]*/
		map_data_table.label (map_data_table.no_source_stmts) = "1"b;

	     end;

	if token_type = reserved_wd
	then do;

		if subscript_flag ^= 0
		then do;

			sub_token.sub_token_ptr (sub_token_index) = current_token_ptr;
			in_token.n = in_token.n - 1;
			sub_token_index = sub_token_index - 1;

			goto get_next_token;


		     end;

		if current_token_ptr -> reserved_word.end_cobol
						/*[4.1-1]*/
		then do;

			if current_token_ptr -> reserved_word.column ^= 9999
			then do;

				map_data_table.no_source_stmts = map_data_table.no_source_stmts + 1;
				map_data_table.data.line_no (map_data_table.no_source_stmts) =
				     current_token_ptr -> reserved_word.line;
				map_data_table.data.text_addr (map_data_table.no_source_stmts) =
				     cobol_$text_wd_off;
				map_data_table.col (map_data_table.no_source_stmts) =
				     current_token_ptr -> reserved_word.column;
				map_data_table.label (map_data_table.no_source_stmts) = "0"b;
				map_data_table.data.line_no (map_data_table.no_source_stmts + 1) =
				     current_token_ptr -> reserved_word.line + 1;

			     end;

			else map_data_table.data.line_no (map_data_table.no_source_stmts + 1) =
				current_token_ptr -> reserved_word.line;

		     end;

		if current_token_ptr -> reserved_word.verb = "1"b
		then do;

			if pd_map_sw = 1 & end_flag = 0
			then do;

test1_map_data_ovfl:
				if map_data_table.no_source_stmts + 2 > cobol_$map_data_max
				then do;

					error_info.message = "Object map overflow";
					error_info.message_len = 19;

					call signal_ ("command_abort_", null, addr (error_info));

					goto test1_map_data_ovfl;

				     end;

				map_data_table.no_source_stmts = map_data_table.no_source_stmts + 1;

				map_data_table.data.line_no (map_data_table.no_source_stmts) =
				     current_token_ptr -> reserved_word.line;

				map_data_table.data.text_addr (map_data_table.no_source_stmts) =
				     cobol_$text_wd_off;
				map_data_table.col (map_data_table.no_source_stmts) =
				     current_token_ptr -> reserved_word.column;
				map_data_table.label (map_data_table.no_source_stmts) = "0"b;

				call cobol_reset_r$in_line;

				if fixed_common.options.profile
				then call cobol_profile;

			     end;

			if current_token_ptr -> reserved_word.key = perform
			     | current_token_ptr -> reserved_word.key = compute
			then pc_flag = 1;

		     end;

		goto get_next_token;

	     end;

	if token_type > 31
	then go to get_next_token;
	else go to TOK (token_type);

TOK (2):						/* numeric literal */
	if current_token_ptr -> numeric_lit.subscript = "1"b
	then call stack_sub;

	goto get_next_token;

TOK (31):						/* tag equivalence */
	call cobol_equate_tag (current_token_ptr);

	in_token.n = in_token.n - 1;

	goto get_next_token;

TOK (9):						/* data name */
	if current_token_ptr -> data_name.used_as_sub = "1"b
	then call stack_sub;

	else if subscript_flag = 1
	then if current_token_ptr -> data_name.subscripted = "1"b
	     then do;

		     token_hdr.sub_ptr = subscript_ptr;

		     sub_token.sub_token_ptr (sub_token_index) = null;
		     sub_token_index = sub_token_index - 1;
		     subscript_flag = 0;

		end;

	goto get_next_token;

TOK (10):						/* index name */
	if current_token_ptr -> index_name.subscript = "1"b
	then do;

		call stack_sub;

	     end;

	goto get_next_token;

TOK (30):						/* tag definition */
	if pc_flag ^= 0
	then goto get_next_token;

	if search_flag ^= 0 & current_token_ptr -> int_tag.true_path = "0"b
	then goto get_next_token;

	call cobol_define_tag_nc (binary (current_token_ptr -> int_tag.proc_num, 17), cobol_$text_wd_off);

	in_token.n = in_token.n - 1;
	goto get_next_token;

TOK (19):						/* eos */
	if bypass_flag
	then do;

		if current_token_ptr -> end_stmt.verb = 3
		then bypass_flag = "0"b;		/* end of imperative statement */

		go to get_tokens;

	     end;

	h_no = current_token_ptr -> end_stmt.verb;
	/***.....if Trace_Bit then call ioa_("^a^d^a^d","*****HANDLER= ",h_no,"TAG= ",on_err_tag);/**/
	go to handler (h_no);

TOK (1):
TOK (3):
TOK (4):
TOK (5):
TOK (6):
TOK (7):
TOK (8):
TOK (11):
TOK (12):
TOK (13):
TOK (14):
TOK (15):
TOK (16):
TOK (17):
TOK (18):
TOK (20):
TOK (21):
TOK (22):
TOK (23):
TOK (24):
TOK (25):
TOK (26):
TOK (27):
TOK (28):
TOK (29):
	go to get_next_token;

stack_sub:
     proc;

	sub_token.sub_token_ptr (sub_token_index) = current_token_ptr;

	if subscript_flag = 0
	then do;

		subscript_flag = 1;
		subscript_ptr = addr (sub_token.sub_token_ptr (sub_token_index));

	     end;

	in_token.n = in_token.n - 1;
	sub_token_index = sub_token_index - 1;
     end;

push:
     proc;

/*[4.2-4]*/
	if current_token_ptr -> end_stmt.b		/*[4.2-4]*/
	then do;
		tag_stack_loc = tag_stack_loc + 1;	/*[4.2-4]*/
		tag_stack (tag_stack_loc) = on_err_tag; /*[4.2-4]*/
		on_err_tag = 0;			/*[4.2-4]*/
	     end;

     end;

push1:
     proc;					/* Used by READ */
						/*[4.2-4]*/
	if current_token_ptr -> end_stmt.a ^= "0"b	/*[4.2-4]*/
	then do;
		tag_stack_loc = tag_stack_loc + 1;	/*[4.2-4]*/
		tag_stack (tag_stack_loc) = on_err_tag; /*[4.2-4]*/
		on_err_tag = 0;			/*[4.2-4]*/
	     end;

     end;

pop:
     proc;

/*[4.2-4]*/
	on_err_tag = tag_stack (tag_stack_loc);		/*[4.2-4]*/
	tag_stack_loc = tag_stack_loc - 1;

     end;

/*    .......  HANDLERS  .......			  */

handler (1):
	call cobol_accept_gen (in_token_ptr);
	goto get_tokens;

handler (2):					/*[4.2-4]*/
	call push;
	call cobol_add_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (3):					/*[4.0-1]*/
	if current_token_ptr -> end_stmt.b		/*[4.0-1]*/
	then do;
		if on_err_tag ^= 0
		then call cobol_gen_ioerror$finish_up_not (on_err_tag);
						/*[4.0-1]*/
	     end;					/*[4.0-1]*/
	else do;
		if on_err_tag ^= 0
		then call cobol_define_tag (on_err_tag);/*[4.2-4]*/
		call pop;				/*[4.0-1]*/
	     end;

	go to get_tokens;

handler (4):
	call cobol_alter_gen (in_token_ptr);
	goto get_tokens;

handler (5):
	call cobol_call_gen (in_token_ptr);
	goto get_tokens;

handler (6):
	error_info.message = "Unassigned verb number in EOS";
	error_info.message_len = 29;

	call signal_ ("command_abort_", null, addr (error_info));
	goto get_tokens;

handler (7):
	call cobol_cancel_gen (in_token_ptr);
	go to get_tokens;

handler (8):
	call cobol_close_gen (in_token_ptr);
	goto get_tokens;

handler (9):					/*[4.2-4]*/
	call push;
	call cobol_divide_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (10):					/*[4.2-4]*/
	call push;
	call cobol_multiply_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (11):					/*[4.2-4]*/
	call push;
	call cobol_subtract_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (12):
	call cobol_exit_gen (in_token_ptr);
	goto get_tokens;

handler (13):
	if pc_flag ^= 0
	then goto get_next_token;
	call cobol_compare_gen (in_token_ptr);
	goto get_tokens;

handler (14):
	call cobol_go_gen (in_token_ptr);
	goto get_tokens;

handler (15):
	call cobol_merge_gen (in_token_ptr);
	goto get_tokens;

handler (16):
	error_info.message = "Verb not supported in this release";
	error_info.message_len = 34;
	call signal_ ("command_abort_", null, addr (error_info));
	goto get_tokens;

handler (17):
	call cobol_inspect_gen (in_token_ptr);
	goto get_tokens;

handler (18):
	call cobol_move_gen (in_token_ptr);
	goto get_tokens;

handler (19):
	call cobol_open_gen (in_token_ptr);
	goto get_tokens;

handler (20):
	call cobol_perform_gen (in_token_ptr);
	pc_flag = 0;
	goto get_tokens;

handler (21):					/*[4.2-4]*/
	call push1;
	call cobol_read_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (22):					/*[4.2-4]*/
	call push;
	call cobol_delete_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (23):					/*[4.2-4]*/
	call push;
	call cobol_receive_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (24):
	call cobol_release_gen (in_token_ptr);
	goto get_tokens;

handler (25):					/*[4.2-4]*/
	call push;
	call cobol_return_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (26):
	call cobol_search_gen (in_token_ptr, search_flag);
	goto get_tokens;

handler (27):					/*[5.3-2]*/
	call push;
	call cobol_rewrite_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (28):
	if pc_flag ^= 0
	then goto get_next_token;
	call cobol_arithop_gen (in_token_ptr);
	goto get_tokens;

handler (29):
	goto handler (6);				/*  for now  */

handler (30):
	call cobol_send_gen (in_token_ptr);
	goto get_tokens;

handler (31):
	call cobol_set_gen (in_token_ptr);
	goto get_tokens;

handler (32):
	goto handler (6);				/*  for now  */

handler (33):
	call cobol_stop_gen (in_token_ptr);
	goto get_tokens;

handler (34):					/*[4.2-4]*/
	call push;
	call cobol_string_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (35):
	goto handler (6);				/* 06-30-77  */

handler (36):
	goto handler (6);				/* 06-30-77  */

handler (37):					/*[4.2-4]*/
	call push;
	call cobol_unstring_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (38):					/*[4.2-4]*/
	call push;
	call cobol_write_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (39):
	goto get_tokens;

handler (40):					/*[4.2-4]*/
	call push;
	call cobol_compute_gen (in_token_ptr, on_err_tag);
	pc_flag = 0;
	goto get_tokens;

handler (41):
	call cobol_disable_gen (in_token_ptr);
	goto get_tokens;

handler (42):
	call cobol_display_gen (in_token_ptr);
	goto get_tokens;

handler (43):
	call cobol_enable_gen (in_token_ptr);
	goto get_tokens;

handler (44):
	goto handler (6);				/* 06-30-77  */

handler (45):
	goto handler (6);				/* 06-30-77  */

handler (46):
	goto handler (6);				/* 06-30-77  */

handler (47):
	goto handler (6);				/*  for now  */

handler (48):
	goto handler (6);				/* 06-30-77  */

handler (49):
	call cobol_sort_gen (in_token_ptr);
	goto get_tokens;

handler (50):
	error_info.message = "Verb not supported in this release";
	error_info.message_len = 34;
	call signal_ ("command_abort_", null, addr (error_info));
	goto get_tokens;

handler (51):
	error_info.message = "Verb not supported in this release";
	error_info.message_len = 34;
	call signal_ ("command_abort_", null, addr (error_info));
	goto get_tokens;

handler (52):
	if pd_map_sw = 1 & end_flag = 0
	then do;

test2_map_data_ovfl:
		if map_data_table.no_source_stmts + 2 > cobol_$map_data_max
		then do;

			error_info.message = "Object map overflow";
			error_info.message_len = 19;

			call signal_ ("command_abort_", null, addr (error_info));

			goto test2_map_data_ovfl;

		     end;

		map_data_table.no_source_stmts = map_data_table.no_source_stmts + 1;
		map_data_table.data.line_no (map_data_table.no_source_stmts) =
		     in_token.token_ptr (1) -> reserved_word.line;
		map_data_table.data.text_addr (map_data_table.no_source_stmts) = cobol_$text_wd_off;
		map_data_table.col (map_data_table.no_source_stmts) = in_token.token_ptr (1) -> reserved_word.column;
		map_data_table.label (map_data_table.no_source_stmts) = "0"b;

	     end;

	decl_sw = 0;
	temp = record.this_rcd_ln + 7;
	temp_ptr = addrel (record_ptr, substr (unspec (temp), 17, 18));

	if temp_ptr -> record.this_rcd_ln > 0
	then do;
		temp_ptr = addrel (temp_ptr, 2);
		if temp_ptr -> token_hdr.type = reserved_wd
		then if temp_ptr -> reserved_word.key = 89
		     then decl_sw = 1;		/* DECLARATIVES */
	     end;

	call cobol_prologue_gen (in_token_ptr, binit_tag, fxs_tag, fxs_locno, decl_sw);

/* Stack space used by cobol_prologue_gen is not returnable  */

	cobol_$init_stack_off = cobol_$stack_off;

	goto get_tokens;

handler (53):
	decl_flag = 1;
	if fxs_tag = 0
	then call cobol_decl_gen (fxs_tag);

	goto get_tokens;

handler (54):
	call cobol_section_gen (in_token_ptr);
	goto get_tokens;

handler (55):
	call cobol_paragraph_gen (in_token_ptr);
	goto get_tokens;

handler (56):					/*[4.2-4]*/
	call push;
	call cobol_start_gen (in_token_ptr, on_err_tag);
	goto get_tokens;

handler (57):
	goto handler (6);				/* 06-30-77  */

handler (58):
	call cobol_purge_gen (in_token_ptr);
	goto get_tokens;

handler (59):
handler (60):
handler (61):
handler (62):
handler (63):
handler (64):
handler (65):
handler (66):
handler (67):
handler (68):
handler (69):
handler (70):
handler (71):
handler (72):
handler (73):
handler (74):
handler (75):
handler (76):
handler (77):
handler (78):
handler (79):
handler (80):
handler (81):
handler (82):
handler (83):
handler (84):
handler (85):
handler (86):
handler (87):
handler (88):
handler (89):
handler (90):
handler (91):
handler (92):
handler (93):
handler (94):
handler (95):
handler (96):
handler (97):
	goto handler (6);				/*  for now  */

handler (98):
	call cobol_end_gen (in_token_ptr, fxs_locno, fxs_tag, last_decl_proc, end_flag);

	if end_flag = 1
	then cobol_$init_stack_off = cobol_$max_stack_off;

	goto get_tokens;

data_and_seg_init:
	/***.....	Trace_Bit="0"b;/**/
	if binit_tag ^= 0
	then do;

		call cobol_define_tag (binit_tag);

/* Data initialization */

		if data_init_flag ^= 0
		then do;

			record_ptr = addrel (initval_base_ptr, seq_file_hdr (5) + 4);
			cobol_$stack_off = cobol_$init_stack_off;

			do while (record.this_rcd_ln > 0);

			     do index = 1 to 4;

				in_token.token_ptr (index) = addrel (record_ptr, 2);
				temp = record.this_rcd_ln + 7;
				record_ptr = addrel (record_ptr, substr (unspec (temp), 17, 18));

			     end;

			     in_token.n = 4;

			     call cobol_move_gen (in_token_ptr);

			     if cobol_$stack_off > cobol_$max_stack_off
			     then cobol_$max_stack_off = cobol_$stack_off;

			     cobol_$stack_off = cobol_$init_stack_off;

			     cobol_$temp_token_ptr = cobol_$temp_token_area_ptr;

			end;

		     end;

/* Segment initialization */

		call cobol_seginit_gen (fxs_locno, last_decl_proc);

		if decl_flag = 0 & fxs_tag ^= 0
		then /*-11/30/76-*/
		     call cobol_define_tag_nc (fxs_tag, fxs_locno);

	     end;

exit:
	return;


	/***.....Tr_Beg: entry(str);/**/
	/***.....	Trace_Lev=Trace_Lev+1;/**/
	/***.....	call ioa_("^a^a",substr(Trace_Line,Trace_Lev,1)," "||str);/**/
	/***.....return;/**/

	/***.....Tr_End: entry(str);/**/
	/***.....	call ioa_("^a^a",substr(Trace_Line,Trace_Lev,1)," END:"||str);/**/
	/***.....	Trace_Lev=Trace_Lev-1;/**/
	/***.....return;/**/


	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/
	/***.....	dcl str char(*);/**/



/*
The function of cobol_gen_driver_ is to direct the generation of the
object code necessary to implement the source code comprising a
given COBOL program.  The primary input to cobol_gen_driver_ is the
file Minpral5.  This file comprises a sequence of tokens which
are, in effect, a coded version of the source program.  These
tokens are grouped, by PD Syntax, into logical sets for process-
ing by the insertion of type-19 End of "Statement" (EOS) tokens.
cobol_gen_driver_ creates a structure (in_token) consisting primarily
of pointers to each token comprising a "statement", as delimited
by EOS tokens, and passes a pointer to this structure to the
appropriate generator.  In addition, cobol_gen_driver_ performs a
number of auxiliary functions, such as;

  1.  Initialization of a number of variables to pre-code-gener-
      ation values.

  2.  Initialization of the definition and linkage sections.

  3.  Deallocation of the stack and determination of maximum re-
      quired stack size.

  4.  Deallocation of the area (temp_token_area) in which tokens
      to temporaries are built.

  5.  Tabulation of data for the construction of the procedure
      division map.

  6.  Resolution of internal tag definition and tag equivalence
      tokens not bracketed within EOS tokens.


U__s_a_g_e:_

     declare cobol_gen_driver_ entry;

     call cobol_gen_driver_;


D__a_t_a:_

      include cobol_;

	Items in cobol_ include file used (u) and/or set (s) by
	cobol_gen_driver_:

	     cobol_ptr (u)
	     com_ptr (u)
	     alter_flag (s)
	     alter_index (s)
	     alter_list_ptr (s)
	     init_stack_off (s)
	     map_data_ptr (u)
	     map_data_max (u)
	     max_stack_off (s)
	     minpral5_ptr (u)
	     misc_end_ptr (u)
	     misc_max (u)
	     para_eop_flag (s)
	     perform_list_ptr (u/s)
	     perform_para_index (s)
	     perform_sect_index (s)
	     priority_no (s)
	     sect_eop_flag (s)
	     seg_init_list_ptr (s)
	     stack_off (u/s)
	     temp_token_area_ptr (s)
	     temp_token_ptr (s)
	     temp_token_max (s)
	     token_block1_ptr (u)
	     token_block2_ptr (u)
	     text_wd_off (u)

      include fixed_common;

	Items in fixed_common include file used (u) and/or set (s) by
	cobol_gen_driver_:

	     perf_alter_info (u)
	     size_perform_info (u)

Conditional Statements:

	end_stmt.b="1"b if code for an option follows
	end_stmt.f="01"b if it is a NOT option

	end_stmt.a(3)b(1)c(1)d(2)f(2)

(1) STATEMENT OPTION

	(a) cobol_pdout_

		STATEMENT
		type19(vt = CODE, b = 1, f = 00)
		OPTION
		type19(vt = 3, b = 0)

	(b) generated code

			STATEMENT -> (L1)
			OPTION
		L1:

(2) STATEMENT OPTION NOT OPTION

	(a) cobol_pdout_

		STATEMENT
		type19(vt = CODE, b = 1, f = 00)
		OPTION
		type19(vt  = 3, b = 1, f = 01)
		NOT OPTION
		type19(vt = 3, b = 0)

	(b) generated code

			STATEMENT -> (L1)
			OPTION
			TRA L3
		L1:
			NOT OPTION
		L2:

(3) STATEMENT NOT OPTION OPTION

	(a) cobol_pdout_

		STATEMENT
		type19(vt = CODE, b = 1, f = 01)
		NOT OPTION
		type19(vt = 3, b = 1, f = 00)
		OPTION
		type19(vt = 3, b = 0)

	(b) generated code

			STATEMENT -> (L1)
			NOT OPTION
			TRA L2
		L1:
			OPTION
		L2:

(4) STATEMENT NOT OPTION

	(a) cobol_pdout_

		STATEMENT
		type19(vt = CODE, b = 1, f = 01)
		NOT OPTION
		type19(vt = 3, b = 0)

	(b) generated code

			STATEMENT -> (L1)
			NOT-OPTION
		L1:
						  */


dcl	1 error_info	static aligned,
	  2 name		char (32) aligned init ("cobol_gen_driver_"),
	  2 message_len	fixed bin aligned,
	  2 message	char (36) aligned;

dcl	reserved_wd	fixed bin internal static init (1),
	numeric_lit_token	fixed bin internal static init (2),
	type_9		fixed bin internal static init (9),
	index_name_token	fixed bin internal static init (10),
	eos		fixed bin internal static init (19),
	internal_tag	fixed bin internal static init (30),
	tag_equivalence	fixed bin internal static init (31),
	perform		fixed bin internal static init (20),
	compute		fixed bin internal static init (40);



/*
P__r_o_c_e_d_u_r_e_s_C__a_l_l_e_d:_
						  */

dcl	cobol_alter_perform entry (ptr, fixed bin),
	cobol_reset_r$in_line
			entry,
	signal_		entry (char (*), ptr, ptr),
	cobol_equate_tag	entry (ptr),
	cobol_define_tag	entry (fixed bin),
	cobol_define_tag_nc entry (fixed bin, fixed bin),
	cobol_accept_gen	entry (ptr),
	cobol_add_gen	entry (ptr, fixed bin),
	cobol_alter_gen	entry (ptr),
	cobol_call_gen	entry (ptr),
	cobol_cancel_gen	entry (ptr),
	cobol_close_gen	entry (ptr),
	cobol_divide_gen	entry (ptr, fixed bin),
	cobol_multiply_gen	entry (ptr, fixed bin),
	cobol_subtract_gen	entry (ptr, fixed bin),
	cobol_exit_gen	entry (ptr),
	cobol_compare_gen	entry (ptr),
	cobol_go_gen	entry (ptr),
	cobol_move_gen	entry (ptr),
	cobol_open_gen	entry (ptr),
	cobol_perform_gen	entry (ptr),
	cobol_read_gen	entry (ptr, fixed bin),
	cobol_gen_ioerror$finish_up_not
			entry (fixed bin),
	cobol_delete_gen	entry (ptr, fixed bin),
	cobol_receive_gen	entry (ptr, fixed bin),
	cobol_release_gen	entry (ptr),
	cobol_return_gen	entry (ptr, fixed bin),
	cobol_rewrite_gen	entry (ptr, fixed bin),
	cobol_arithop_gen	entry (ptr),
	cobol_send_gen	entry (ptr),
	cobol_set_gen	entry (ptr),
	cobol_stop_gen	entry (ptr),
	cobol_write_gen	entry (ptr, fixed bin),
	cobol_compute_gen	entry (ptr, fixed bin),
	cobol_disable_gen	entry (ptr),
	cobol_display_gen	entry (ptr),
	cobol_enable_gen	entry (ptr),
	cobol_sort_gen	entry (ptr),
	cobol_merge_gen	entry (ptr),
	cobol_profile	entry,
	cobol_prologue_gen	entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin),
	cobol_decl_gen	entry (fixed bin),
	cobol_section_gen	entry (ptr),
	cobol_paragraph_gen entry (ptr),
	cobol_start_gen	entry (ptr, fixed bin),
	cobol_pool	entry (char (*), fixed bin, fixed bin),
	cobol_read_rand$fixed_bin
			entry (fixed bin, fixed bin, ptr),
	cobol_seginit_gen	entry (fixed bin, fixed bin),
	cobol_search_gen	entry (ptr, fixed bin),
	cobol_inspect_gen	entry (ptr),
	cobol_string_gen	entry (ptr, fixed bin),
	cobol_unstring_gen	entry (ptr, fixed bin),
	cobol_purge_gen	entry (ptr),
	cobol_end_gen	entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin);


/*
B__u_i_l_t-__i_n_F__u_n_c_t_i_o_n_s_U__s_e_d:_
						  */

dcl	(addr, size)	builtin,
	addrel		builtin,
	baseno		builtin,
	binary		builtin,
	null		builtin,
	rel		builtin,
	substr		builtin,
	unspec		builtin;

%include cobol_in_token;
%include cobol_type1;
%include cobol_type2;
%include cobol_type9;
%include cobol_type10;
%include cobol_type19;
%include cobol_type30;
%include cobol_;
%include cobol_fixed_common;
%include cobol_ext_;
%include cobol_op_con;
%include cobol_type40;
%include cobol_type7;
/*[4.1-2]*/
     end cobol_gen_driver_;
