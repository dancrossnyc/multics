/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_get_index_value.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* format: style3 */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Modified on 10/19/85 by FCH, [5.3-1], bug563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified since Version 2.0 */

/*{*/
cobol_get_index_value:
     proc (return_value_code, input_token_ptr, output_token_ptr);

/*
This procedure generates code to convert the value of an index
(which is stored as a fixed binary number in two bytes of storage)
to a decimal format operand in a temporary in the run-time stack.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	return_value_code	fixed bin;
dcl	input_token_ptr	ptr;
dcl	output_token_ptr	ptr;

/*
return_value_code	a code that indicates whether the
		index occurrence number is to be returned as
		a fixed bin (35) or decimal value. (input)
		This code can have the following values:

		return_value_code	meaning
		1		return fixed bin
		2 return decimal
input_token_ptr	points to the input token: data name
		(type 9, usage is index), or index name (type 10)
		to be converted to decimal. (input)
output_token_ptr	points to a buffer in the caller's program
		in which the dataname (type 9) token,
		describing the resultant converted decimal
		value is built by this procedure.  (input)

*/


/*  Declaration of external entries  */

dcl	cobol_addr	ext entry (ptr, ptr, ptr);
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
dcl	cobol_alloc$stack	ext entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_make_type9$copy
			ext entry (ptr, ptr);
dcl	cobol_register$load ext entry (ptr);
dcl	cobol_register$release
			ext entry (ptr);

/*  DECLARATION OF BUILTIN FUNCTIONS  */

dcl	addr		builtin;
dcl	binary		builtin;
dcl	bit		builtin;
dcl	fixed		builtin;

/*  Definition of internal static variables that contain op codes  */

dcl	btd_op		bit (10) int static init ("0110000011"b /* 301(1) */);
dcl	mlr_op		bit (10) int static init ("0010000001"b /* 100(1) */);
dcl	lda_op		bit (10) int static init ("0100111010"b /* 235(0) */);
dcl	ldq_op		bit (10) int static init ("0100111100"b /* 236(0) */);

dcl	ldaq_op		bit (10) int static init ("0100111110"b /*237(0)*/);
dcl	lls_op		bit (10) int static init ("1110111110"b /*737(0)*/);
dcl	lrs_op		bit (10) int static init ("1110110110"b /*733(0)*/);
dcl	ars_op		bit (10) int static init ("1110110010"b /*731(0)*/);
dcl	stq_op		bit (10) int static init ("1111011100"b /*756(0)*/);

/*  Buffer in which instructions and/or descriptors are returned by the addressability utility  */

dcl	inst_buff		(1:5) fixed bin;

/*  Buffer in which relocation information is returned by the addressability utility  */

dcl	reloc_buff	(1:10) fixed bin;

/*  Buffer in which input to the addressabiliyt utility is built  */

dcl	input_buff	(1:30) ptr;

/*  Work buffer in which a data name token (type 9) for the index value is built  */

dcl	wkbuff1		(1:40) fixed bin;
dcl	wkbuff1_ptr	ptr;

/*  work buffer in which a data name token (type 9) for the occurence number in the stack is built  */

dcl	wkbuff2		(1:40) fixed bin;
dcl	wkbuff2_ptr	ptr;

dcl	dn_ptr		ptr;
dcl	byte_offset	bit (2);
dcl	shift_val		fixed bin;
dcl	return_decimal_value
			bit (1);


/*  Variables used to zero the descripiton bits of a data name token  */

dcl	descrip_ptr	ptr;
dcl	descrip		bit (72) based (descrip_ptr);

dcl	t_offset		fixed bin;


/*  Structure used to communicate with the register$load procedure.  */

dcl	1 register_struc,
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4),
	  2 lock		fixed bin,
	  2 already_there	fixed bin,
	  2 contains	fixed bin,
	  2 dname_ptr	ptr,
	  2 literal	bit (36);

/**************************************************/
/*	START OF EXECUTION			*/
/*	cobol_get_index_value			*/
/**************************************************/

start:
	if return_value_code = 1			/*  return fixed binary  */
	then return_decimal_value = "0"b;
	else return_decimal_value = "1"b;


/*  Set work pointers to point at the work buffers  */

	inst_ptr = addr (inst_buff (1));
	reloc_ptr = addr (reloc_buff (1));
	input_ptr = addr (input_buff (1));
	wkbuff1_ptr = addr (wkbuff1 (1));

	if return_decimal_value
	then dn_ptr = wkbuff1_ptr;			/*  build temporary output token  */
	else dn_ptr = output_token_ptr;		/*  Build output token in the user's work buffer  */



	if input_token_ptr -> data_name.type = rtc_dataname
	then do;					/*  Input token is a dataname token (type 9) with usage index bit set  */

		wkbuff2_ptr = addr (wkbuff2 (1));

/*  Allocate  four bytes on a word boundary in the stack, to receive
		the fixed binary occurrence number  */
		call cobol_alloc$stack (4, 0, t_offset);

/*  Make a data name token that describes the stack temporary to receive the
			occurrence number  */
		data_name.type = rtc_dataname;
		data_name.seg_num = 1000;		/*  Stack  */
		data_name.offset = t_offset;		/*  Offset returned by alloc$stack  */

/*  Update the two data name tokens so that alphanumeric eis descriptors will
		be built for them by the addressability utility.  */
		input_token_ptr -> data_name.alphanum = "1"b;
		input_token_ptr -> data_name.usage_index = "0"b;
		wkbuff2_ptr -> data_name.alphanum = "1"b;
		wkbuff2_ptr -> data_name.usage_index = "0"b;


/*  Allocate six bytes on an even word boundary in the stack
		to receive the six byte index data item.  */

		call cobol_alloc$stack (6, 2, t_offset);

/*  Convert the offset value from a word offset to a byte offset.  */
		t_offset = t_offset * 4;

/*  Make a copy of the input data name token.  */

		call cobol_make_type9$copy (wkbuff2_ptr, input_token_ptr);

/*  Modify the copy so that it describes the six byte temporary in the stack.  */
		wkbuff2_ptr -> data_name.seg_num = 1000;/*  stack  */
		wkbuff2_ptr -> data_name.offset = t_offset;
						/*  Turn off the subscripted bit in the token that describes the temporary.  */
		wkbuff2_ptr -> data_name.subscripted = "0"b;

/*  Generate code to move the index data item to the 6 byte temporary in the stack.  */

/*  Build the input structure to the addressability utility.  */

		input_struc.type = 5;		/*  EIS,2 input operands, instruction and 2 descriptors returned.  */

		input_struc.operand_no = 2;
		input_struc.lock = 0;
		input_struc.operand.token_ptr (1) = input_token_ptr;
		input_struc.operand.send_receive (1) = 0;
						/*  sending  */
		input_struc.operand.size_sw (1) = 0;

		input_struc.operand.token_ptr (2) = wkbuff2_ptr;
		input_struc.operand.send_receive (2) = 1;
						/*  receiving  */
		input_struc.operand.size_sw (2) = 0;



/*  Call the addressability utility.  */

		call cobol_addr (input_ptr, inst_ptr, reloc_ptr);


/*  Set the MLR opcode into the instruction  */
		inst_struc.inst.fill1_op = mlr_op;

/*  Emit the instruction and two descriptors.  */
		call cobol_emit (inst_ptr, reloc_ptr, 3);

/*  Get the basic address of the WORD containing the first byte of the index occurrence
			number  */


		input_struc_basic.type = 1;		/*  basic, non-eis  */
		input_struc_basic.operand_no = 0;
		input_struc_basic.segno = wkbuff2_ptr -> data_name.seg_num;
		input_struc_basic.char_offset = wkbuff2_ptr -> data_name.offset + 4;

		call cobol_addr (input_ptr, inst_ptr, reloc_ptr);
						/*  Get the A and Q registers.  */

		register_struc.what_reg = 3;		/*  Get the A and Q registers, please.  */
		register_struc.lock = 0;		/*  No change to locks.  */
		register_struc.contains = 0;		/*  Contents of A and Q are not meaningful
			for register optimization .  ( because they will be shifted once they
			are in the A-Q)  */

		call cobol_register$load (addr (register_struc));


/*  Build ldq instruction referencing the address of the WORD containing
			the first byte of the index occurrence number  */

		inst_struc_basic.fill1_op = ldq_op;

/*  Emit the ldaq instruction  */
		call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  At this point, code has been generated to get the two bytes containing
		the index data item occurrence number into the two most significant bytes
		of the Q- register.  */

/*  Build an instruction to load zero into the A register.  */

		inst_buff (1) = 0;
		inst_struc_basic.fill1_op = lda_op;
		inst_struc_basic.tm = "00"b;		/*  ir modivication  */
		inst_struc_basic.td = "0011"b;	/*  DU  */

/*  Set relocation bytes  */
		reloc_buff (1) = 0;
		reloc_buff (2) = 0;			/*  Emit the lda 0,du instruction  */
		call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Build a LLS instruction to get rid of the junk bit in the middle of the two 8 bit
			pieces of meaningful data  */

		inst_buff (1) = 0;
		inst_struc_basic.fill1_op = lls_op;
		inst_struc_basic.wd_offset = bit (binary (10, 15));
						/*  Insert the shift value into the
		instruction  */

/*  Set relocation bytes  */
		reloc_buff (1) = 0;
		reloc_buff (2) = 0;			/*  Emit the lls instruction  */
		call cobol_emit (inst_ptr, reloc_ptr, 1);



/*  Build ars instruction  */
		inst_buff (1) = 0;
		inst_struc_basic.fill1_op = ars_op;
		inst_struc_basic.wd_offset = bit (binary (1, 15));

/*  Emit the ars instruction  */
		call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Build the lrs instruction  */
		inst_buff (1) = 0;
		inst_struc_basic.fill1_op = lrs_op;
		inst_struc_basic.wd_offset = bit (binary (28, 15));

/*  Emit the lrs instruction  */
		call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Get the basic address of the temporary in the stack which is to receive the
			occurrence number  */

		input_struc_basic.type = 1;
		input_struc_basic.operand_no = 0;
		input_struc_basic.segno = data_name.seg_num;
		input_struc_basic.char_offset = data_name.offset;

		call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

/*  Emit the stq instruction  */
		inst_struc_basic.fill1_op = stq_op;
		call cobol_emit (inst_ptr, reloc_ptr, 1);

/*  Set wkbuff1_ptr to point to the token for the temporary in the stack  */
		wkbuff1_ptr = dn_ptr;		/*  Release the A and Q registers.  */
		call cobol_register$release (addr (register_struc));


	     end;					/*  Input token is data name (type 9) with usage index bit set  */

	else do;					/*  an index name token (type 10)  */
		data_name.type = rtc_dataname;
		ind_ptr = input_token_ptr;
		data_name.seg_num = index_name.seg_num; /*  set segment number of index name item  */
		data_name.offset = index_name.offset + 4;
						/*  set offset from index name item  */
	     end;					/*  an index name token (type 10)  */


/*  Complete the data name token in the work buffer  */
	data_name.item_length = 4;
	data_name.places_left = 4;
	data_name.places_right = 0;

/*  Zero the description bits in the data name token being built  */
	descrip_ptr = addr (data_name.file_section);
	descrip = "0"b;

/*  Set description bits  */
	data_name.display = "1"b;
	data_name.numeric = "1"b;
	data_name.elementary = "1"b;

	if return_decimal_value
	then do;					/*  convert the fixed binary occurrence value to decimal  */
						/*  Allocate space on the stack to receive the decimal representation
		of the binary index value  */
		call cobol_alloc$stack (5, 0, t_offset);/*  5 bytes will hold maximum value that
		can be held in two bytes of fixed binary information  */

/*  Save the pointer to the token that describes the fixed binary occurrence number  */
		wkbuff1_ptr = dn_ptr;

/*  Build a data name token for the stack temporary just allocated  */
		dn_ptr = output_token_ptr;
		data_name.size = 116;		/*	12/24/75	bc	*/
		data_name.type = rtc_dataname;
		data_name.item_length = 5;
		data_name.places_left = 5;
		data_name.places_right = 0;
		data_name.seg_num = 1000;		/*  stack  */
		data_name.offset = t_offset;		/*  offset just returned by alloc$stack  */

		descrip_ptr = addr (data_name.file_section);
		descrip = "0"b;
		data_name.numeric = "1"b;
		data_name.elementary = "1"b;
		data_name.display = "1"b;


/*  Build the input to the addressability utility  */

		input_struc.type = 5;		/*  eis, 2 operands input, instruction and 2 descriptors returned  */

		input_struc.operand_no = 2;
		input_struc.lock = 0;
		input_struc.operand.token_ptr (1) = wkbuff1_ptr;
		input_struc.operand.send_receive (1) = 0;
						/*  sending  */
		input_struc.operand.size_sw (1) = 0;

		input_struc.token_ptr (2) = output_token_ptr;
						/*  token for decimal representation to which
		the fixed binary is converted  */
		input_struc.operand.send_receive (2) = 1;
						/*  receiving  */
		input_struc.operand.size_sw (2) = 0;

		call cobol_addr (input_ptr, inst_ptr, reloc_ptr);


/*  Set the binary to decimal op code into the opcode field of the instruction  */
		inst_struc.inst.fill1_op = btd_op;
		desc_nn_ptr = addr (inst_buff (2));

/*  Zero the MBZ bits in the first descriptor  */
		desc_nn.desc_f.tn (1) = "0"b;		/*  type code bit  */
		desc_nn.sign_type (1) = "0"b;		/*  sign type bits  */
		desc_nn.scal (1) = "0"b;		/*  scale factor  */

/*  Zero MBZ bits in the second descriptor  */
		desc_nn.scal (2) = "0"b;		/*  scale factor  */


/*  Emit the instruction and two descriptors  */
		call cobol_emit (inst_ptr, reloc_ptr, 3);

	     end;					/*  cconvert the fixed binary occurrence value to decimal  */

/**************************************************/
/*	END OF EXECUTABLE STATEMENTS	*/
/*	cobol_get_index_value			*/
/**************************************************/


/*  INCLUDE FILES USED BY THIS PROCEDURE  */

%include cobol_type9;

%include cobol_type10;

%include cobol_addr_tokens;

%include cobol_record_types;

/************************************************/
/*	END OF OUTERMOST PROCEDURE		*/
/*	cobol_get_index_value		*/
/**************************************************/



     end cobol_get_index_value;
