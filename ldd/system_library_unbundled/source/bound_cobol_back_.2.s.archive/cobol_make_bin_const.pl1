/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_make_bin_const.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 02/11/77 by Bob Chang to fix the bug for numeric literal to comp-7 move.	*/
/* Modified on 1/14/77 by Bob Chang to search operator when pooling constant. */
/* Modified since Version 2.0.	*/
/*{*/

/* format: style3 */
cobol_make_bin_const:
     proc (nlit_ptr, return_token_ptr, target_code);

/*
This procedure converts the decimal representation of a numeric
literal into a fixed binary representation.  The fixed binary
value is either pooled in the constant section of a cobol
program, or returned in the output token from this procedure.
See DISCUSSION below for more details.
*/

/*  DECLARATION OF THE PARAMETERS  */

/*dcl nlit_ptr ptr;  */
/*  Declared below in an include file.  */
dcl	return_token_ptr	ptr;
dcl	target_code	fixed bin;

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER		DESCRIPTION

nlit_ptr		Pointer to the numeric literal token (type2)
		whose constant is to be converted to a binary
		constant. (input)

return_token_ptr	Pointer to a token that describes the
		converted binary constant.  If this pointer
		is null() on entry to this procedure,
		then the token spaxe will be provided by
		this procedure.  Otherwise this parameter
		must point to some work space in which the
		token will be built.
target_code	A code that specifies the type of arithemtic
		that is being done when this constant is
		being made.  (input)  This code has the
		following values:

		  target code	|  meaning
		==========================================
		   1		| short binary arithmetic
				| is being performed
		  2		| long binary arithmetic
				| is being performed
		    3		| short bin const pooled
		    4		| long bin const pooled
		===========================================
*/

/*  DISCUSSION

If the constant can be contained in a short fixed binary variable
(half-word), then the token built by and returned by this
procedure is an "immediate constant" token.  This token is
defined by the following declaration:

	dcl	1 immed_constant,
			2 size fixed bin(15),
			2 line fixed bin (15),
			2 column fixed bin (15),
			2 type fixed bin (15),  NOTE: type = 102
			2 constant_value fixed bin (35);

The binary representation of the numeric literal is returned
in the field "constant_value" of this token.
If the constant cannot be contained in a half-word, then the
binary representation is pooled into the constant section, and a long
fixed binary data name token (type 9) is returned.

*/

/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_pool$search_op
			ext entry (char (*), fixed bin, fixed bin (24), fixed bin);
dcl	cobol_make_type9$long_bin
			ext entry (ptr, fixed bin, fixed bin (24));
dcl	cobol_make_type9$short_bin
			ext entry (ptr, fixed bin, fixed bin (24));

/*  DECLARATION OF INTERNAL STATIC DATA  */

dcl	smallest_short_binary
			fixed dec (6, 0) int static init (-131072);
dcl	largest_short_binary
			fixed dec (6, 0) int static init (131071);
dcl	smallest_long_binary
			fixed dec (11, 0) int static init (-32359738358);
dcl	largest_long_binary fixed dec (11, 0) int static init (32359738357);


/*  DECLARATION OF INTERNAL VARIABLES  */

dcl	work_fdec		fixed dec (19, 0);
dcl	work_fdec_string	char (20) based (work_fdec_ptr);
dcl	double_binary	fixed bin (71);
dcl	temp		fixed bin,
	in_op		fixed bin;
dcl	work_fdec_ptr	ptr;

dcl	ret_offset	fixed bin (24);
dcl	long_bin_const	fixed bin (35);
dcl	long_bin_ptr	ptr;
dcl	long_bin_string	char (4) based (long_bin_ptr);
dcl	short_bin_const	fixed bin (35);
dcl	short_bin_ptr	ptr;
dcl	short_bin_const_bit bit (18);
dcl	short_bin_string	char (2) based (short_bin_ptr);


/**************************************************/
/*	START OF EXECUTION			*/
/*	cobol_make_bin_const  		*/
/**************************************************/

start:
	work_fdec = 0;

	if numeric_lit.places_left > 0
	then do;					/*  Numeric literal  has an integer part  */

		work_fdec_ptr = addr (work_fdec);
		if numeric_lit.sign = " "
		then substr (work_fdec_string, 1, 1) = "+";
		else substr (work_fdec_string, 1, 1) = numeric_lit.sign;

		substr (work_fdec_string, 21 - numeric_lit.places_left, numeric_lit.places_left) =
		     substr (numeric_lit.literal, 1, numeric_lit.places_left);
	     end;					/*  Numeric literal has an integer part.  */

	double_binary = binary (work_fdec);
	if target_code = 4
	then do;					/*  constant must be pooled into a long fixed bnary in the constant section  */
		if double_binary > largest_short_binary | double_binary < smallest_short_binary
		then do;
			substr (work_fdec_string, 2, 13) = (13)"0";
			double_binary = binary (work_fdec);
			if double_binary > largest_short_binary | double_binary < smallest_short_binary
			then do;
				substr (work_fdec_string, 15, 1) = "0";
				double_binary = binary (work_fdec);
			     end;
		     end;

		long_bin_const = binary (work_fdec);
		long_bin_ptr = addr (long_bin_const);
		call cobol_pool$search_op (long_bin_string, 0, ret_offset, in_op);
		if in_op = 0
		then temp = 3000;
		else temp = 3;

/*  Make a data name token for the long binary constant just pooled.  */
		call cobol_make_type9$long_bin (return_token_ptr, temp, ret_offset);

	     end;					/*  constant must be pooled into a fixed binary in the constant section  */
	else do;
		if double_binary > largest_long_binary | double_binary < smallest_long_binary
		then do;
			substr (work_fdec_string, 2, 8) = (8)"0";
			double_binary = binary (work_fdec);
			if double_binary > largest_long_binary | double_binary < smallest_long_binary
			then do;
				substr (work_fdec_string, 10, 1) = "0";
				double_binary = binary (work_fdec);
			     end;
		     end;
		if target_code = 3
		then do;

			short_bin_const = binary (work_fdec);
			short_bin_const_bit = substr (unspec (short_bin_const), 19, 18);
			short_bin_ptr = addr (short_bin_const_bit);
			call cobol_pool$search_op (short_bin_string, 0, ret_offset, in_op);
			if in_op = 0
			then temp = 3000;
			else temp = 3;

/*  Make a data name token for the short binary constant just pooled.  */
			call cobol_make_type9$short_bin (return_token_ptr, temp, ret_offset);

		     end;				/*  constant must be pooled into a fixed binary in the constant section  */
		else if (smallest_short_binary <= work_fdec & work_fdec <= largest_short_binary) & target_code = 1
		then do;				/*  Constant can be contained in a short fixed binary  */
						/*  AND target is short binary, OR the constant is positive or zero.  NOTE:  negative
		immediate constants cannot be used in long binary computations.  */

			if return_token_ptr = null ()
			then do;			/*  Make space for the token  */
				return_token_ptr = cobol_$temp_token_ptr;
				cobol_$temp_token_ptr = addrel (cobol_$temp_token_ptr, 5);
			     end;			/*  Make space for the token  */

			return_token_ptr -> immed_const.const_value = binary (work_fdec);
			return_token_ptr -> immed_const.type = 102;
		     end;				/*  Constant can be contained in a short fixed binary  */

		else do;				/*  constant must be pooled into a long fixed bnary in the constant section  */

			long_bin_const = binary (work_fdec);
			long_bin_ptr = addr (long_bin_const);
			call cobol_pool$search_op (long_bin_string, 0, ret_offset, in_op);
			if in_op = 0
			then temp = 3000;
			else temp = 3;

/*  Make a data name token for the long binary constant just pooled.  */
			call cobol_make_type9$long_bin (return_token_ptr, temp, ret_offset);

		     end;				/*  constant must be pooled into a fixed binary in the constant section  */
	     end;
exit:
	return;




/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type2;

%include cobol_type102;

%include cobol_;


/**************************************************/
/*	END OF EXTERNAL PROCEDURE		*/
/*	cobol_make_bin_const		*/
/**************************************************/

     end cobol_make_bin_const;
