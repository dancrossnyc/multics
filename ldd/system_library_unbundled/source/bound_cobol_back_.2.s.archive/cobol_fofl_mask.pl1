/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_fofl_mask.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 10/19/85 by FCH, [5.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 05/12/77 by Bob Chang to implement continue option.	*/
/*{*/

/* format: style3 */
cobol_fofl_mask:
     proc;

/*
This procedure generates code to disable and enable the overflow
fault trap.  The fault trap is disabled by turning ON the
overflow mask indicator bit in the machine indicator register,
and is enabled by turning this bit OFF.  */

/*}*/


/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_addr	ext entry (ptr, ptr, ptr);
dcl	cobol_pool	ext entry (char (*), fixed bin, fixed bin (24));
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);

/*  DECLARATIONS OF INTERNAL STATIC VARIABLES  */

dcl	ldi_masks_pooled	fixed bin int static init (0);

dcl	oflo_mask_on	bit (36) int static init ("000000000000000000000000100000000000"b);
						/*  overflow mask indicator bit ON  */

dcl	oflo_mask_off	bit (36) int static init ("0"b);

dcl	on_mask_inst	bit (36) int static;
dcl	on_mask_reloc	(1:5) bit (5) aligned;

dcl	ldi_inst		bit (36) static init ("110000000001110100110011100001000000"b);
						/* ldi	pr6|164	*/

dcl	LDI		bit (10) int static init ("1100111000"b);
						/*  634(0)  */

dcl	on_ret_offset	fixed bin (24) int static;
dcl	off_ret_offset	fixed bin (24) int static;


/*  DECLARATIONS OF INTERNAL VARIABLES  */

dcl	mask_ptr		ptr;
dcl	mask_string	char (4) based (mask_ptr);
dcl	input_buffer	(1:10) char (4);

/*  ON ENTRY POINT  */

on:
     entry;

	if ldi_masks_pooled ^= cobol_$compile_count
	then do;					/*  Pool the LDI masks  */

/*  Pool the overflow mask indicator ON constant  */
		mask_ptr = addr (oflo_mask_on);
		call cobol_pool (mask_string, 0, on_ret_offset);


/*  Pool the overflow mask indicator OFF constant.  */
		mask_ptr = addr (oflo_mask_off);
		call cobol_pool (mask_string, 0, off_ret_offset);


		ldi_masks_pooled = cobol_$compile_count;

	     end;					/*  Pool the LDI masks and establish basic addressability to them.  */


/*  Get the basic address of the overflow mask indicator ON constant.  */
	input_ptr = addr (input_buffer);
	input_struc_basic.type = 1;
	input_struc_basic.operand_no = 0;
	input_struc_basic.lock = 0;
	input_struc_basic.char_offset = on_ret_offset;
	input_struc_basic.segno = 3000;		/*  constant segment  */

	call cobol_addr (input_ptr, addr (on_mask_inst), addr (on_mask_reloc));

	inst_ptr = addr (on_mask_inst);
	inst_ptr -> inst_struc_basic.fill1_op = LDI;	/*  Emit an LDI instruction to turn on the mask indicator bit.  */
	call cobol_emit (addr (on_mask_inst), addr (on_mask_reloc), 1);

	return;

/*  OFF ENTRY POINT  */

off:
     entry;
	call cobol_emit (addr (ldi_inst), null, 1);
	return;


/*  INCLUDE FILES USED BY THIS PROCEDURE  */


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_addr_tokens;


%include cobol_;

     end cobol_fofl_mask;
