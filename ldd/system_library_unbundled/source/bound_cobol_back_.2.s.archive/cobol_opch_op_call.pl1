/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_opch_op_call.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 10/19/84 by FCH, [4.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 08/15/83 by FCH, [5.2 ...], trace added */
/* Renamed on 01/17/77 by ORN from cobol_opch_operator_call to cobol_opch_op_call */
/* Modified since Version 2.0 */

/*{*/
/* format: style3 */
cobol_opch_op_call:
     proc (sf_ptr, rf_ptr);

/*
This procedure generates code that "calls" the overpunch
conversion "cobol operator".  The "call" to the overpunch conversion
operator is effected by a tsp3 instruction.  Data is passed
to the conversion routine in hardware registers, and not in a
parameter list.  The data is passed as follows:

1. pr1 points to the target of the conversion.

2. pr2 points to the source of the conversion.

3. pr5 points to a block of work space, at the top of the
stack.  This work space must be aligned on a double word
boundary.

4. Q register contains the scale and precision of the source of
conversion.

	a. bits 0-17 of the Q register contains the scale.
	Scale is obtained from data_name.places_right of a
	data name token.

	b. Bits 18-36 of the Q contain precision.
	Precision is obtained from data_name.item_length of a
	data name token.

5. A register contains the scale and precision of the target
of conversion.  Bits 0-17 contain the scale,
bits 18-36 contain the precision.  Scale and precision are obtained
as for the source of conversion.

6. X7 contains a code that identifies the data type of the
source of conversion.  This code is defined in the following
table:

	x7 contents	| type of source
	__________________________________________
	     1		| overpunch,leading sign
	     2		| overpunch, trailing sign
	     3		| unpacked decimal, trailing sign

7. X6 contains a code that identifies the data type of the
target of conversion.  This code is the same as that described
above for X7.

8. pr3 is used to store the location to which the cobol
overpunch conversion operator is to reutrn.

*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	sf_ptr		ptr;

dcl	rf_ptr		ptr;

/*  DESCRIPTION OF THE PARAMETERS>  */

/*
PARAMETER		DESCRIPTION

sf_ptr		Pointer to a data name token that describes
		the source of the conversion.  This token
		will ALWAYS describe  an unpacked
		decimal trailing sign data item, or an
		overpunch sign data item.

rf_ptr		Pointer to a data name token that describes
		the target of the conversion.  This token
		describes the same type of data items as
		sf_ptr.  (see above).  (input)

*/

/*  DECLARATION OF EXXTERNAL ENTRIES  */

dcl	cobol_register$load ext entry (ptr);
dcl	cobol_pointer_register$get
			ext entry (ptr);
dcl	cobol_set_pr	ext entry (ptr, ptr);
dcl	cobol_alloc$stack	ext entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
dcl	cobol_pool	ext entry (char (*), fixed bin, fixed bin (24));
dcl	cobol_make_link$type_4
			ext entry (fixed bin, char (*));
dcl	cobol_addr	ext entry (ptr, ptr, ptr);
dcl	cobol_reset_r$after_operator
			ext entry;
dcl	cobol_reg_manager$before_op
			entry (fixed bin);

/*}*/

/*  DECLARATIONS OF INTERNAL STATIC DATA  */

dcl	ldx7_inst		bit (36) int static init ("000000000000000000010010111000000011"b);
						/* ldx7  0,du  */

dcl	ldx6_inst		bit (36) int static init ("000000000000000000010010110000000011"b);
						/*  ldx6 0,du  */

dcl	ldq_inst		bit (36) int static init ("000000000000000000010011110000000000"b);
						/*  LDQ 0  */

dcl	lda_inst		bit (36) int static init ("000000000000000000010011101000000000"b);
						/*  LDA 0  */

dcl	tsp3_inst		bit (36) int static init ("000000000000000111010111011001000000"b);
						/* tsp3 pr0|7 */

dcl	epp5_inst		bit (36) int static init ("000000000000000000011111001101000000"b);
						/*  epp5  */
						/*  DECLARATION OF INTERNAL DATA  */

dcl	1 reg_load_struc,
	  2 what_reg	fixed bin,
	  2 reg_no	bit (4),
	  2 lock		fixed bin,
	  2 already_there	fixed bin,
	  2 contains	fixed bin,
	  2 wk_ptr	ptr,
	  2 literal	bit (36);

dcl	1 pointer_reg_struc,
	  2 what_pointer	fixed bin,
	  2 pointer_no	bit (3),
	  2 lock		fixed bin,
	  2 switch	fixed bin,
	  2 segno		fixed bin,
	  2 offset	fixed bin (24),
	  2 reset		fixed bin;


	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/
	/***..... dcl MY_NAME char (18) int static init ("COBOL_OPCH_OP_CALL");/**/


dcl	precision_constant_ptr
			ptr;

dcl	1 precision	aligned,
	  2 scale		fixed bin (17) unaligned,
	  2 precision	fixed bin (17) unaligned;
dcl	precision_offset	fixed bin (24);
dcl	precision_char_constant
			char (4) based (precision_constant_ptr);

dcl	input_buffer	(1:10) ptr;
dcl	reloc_buffer	(1:10) bit (5);
dcl	inst_buffer	(1:10) ptr;

dcl	linkoff		fixed bin;

dcl	ret_offset	fixed bin;
dcl	tcode		fixed bin;

dcl	inst_word		(1:2) bit (36) init ("0"b, "0"b);



dcl	1 treloc_buffer	(1:2) aligned,
	  2 reloc1	bit (5) aligned,
	  2 reloc2	bit (5) aligned;

dcl	dn_ptr		ptr;


/**************************************************/
start:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME);/**/
						/*  Store all locked registers, before generating any code to call the overpunch operator.  */
	call cobol_reg_manager$before_op (0);

	pointer_reg_struc.lock = 1;
	pointer_reg_struc.switch = 0;

/*  Load the pointer registers  */

/*  Load pr2 to point to the source of conversion.  */

	pointer_reg_struc.what_pointer = 2;
	call cobol_set_pr (addr (pointer_reg_struc), sf_ptr);

/*  Load pr1 to point to the target.  */

	pointer_reg_struc.what_pointer = 1;
	call cobol_set_pr (addr (pointer_reg_struc), rf_ptr);


/*  Allocate some work space on an even word boundary   */
	call cobol_alloc$stack (40, 2, ret_offset);


/*  First, must get and lock the index registers needed to pass data to the operator.  */
	reg_load_struc.lock = 1;			/*  lock it  */
	reg_load_struc.contains = 0;

/*  Get x6  */
	reg_load_struc.what_reg = 16;			/*  x6  */
	call cobol_register$load (addr (reg_load_struc));

/*  Get x7  */
	reg_load_struc.what_reg = 17;
	call cobol_register$load (addr (reg_load_struc));

/*  Load x7 with a code that identifies the source type  */
	if sf_ptr -> data_name.sign_type = "010"b	/*  leading, not separate  */
	then tcode = 1;
	else if sf_ptr -> data_name.sign_type = "001"b	/*  trailing, not separate  */
	then tcode = 2;
	else if (sf_ptr -> data_name.item_signed & sf_ptr -> data_name.sign_separate = "0"b)
	then tcode = 2;				/*  Default is trailing overpunch.  */
	else tcode = 3;				/*  ASSUME unpacked decimal, trailing sign  */

	inst_ptr = addr (ldx7_inst);
	inst_struc_basic.wd_offset = bit (fixed (tcode, 15));
	call cobol_emit (inst_ptr, null (), 1);

/*  Load x6 with a code that identifies the target of conversion.  */

	if rf_ptr -> data_name.sign_type = "010"b	/*  leading, not separate  */
	then tcode = 1;
	else if rf_ptr -> data_name.sign_type = "001"b	/*  trailing, not separate  */
	then tcode = 2;
	else if (rf_ptr -> data_name.item_signed & rf_ptr -> data_name.sign_separate = "0"b)
	then tcode = 2;				/*  Default is trailing overpunch.  */
	else tcode = 3;				/*  ASSUME unpacked, decimal, trailing sign  */

	inst_ptr = addr (ldx6_inst);
	inst_struc_basic.wd_offset = bit (fixed (tcode, 15));
	call cobol_emit (inst_ptr, null (), 1);

/*  Generate code to load the Q register with the scale and precision
	of the source of conversion.  */
/*  First, get and lock the A and Q registers.  */
	reg_load_struc.what_reg = 3;			/*  A and Q  */
	call cobol_register$load (addr (reg_load_struc));


	precision_constant_ptr = addr (precision.scale);
	precision.scale = sf_ptr -> data_name.places_right;

	precision.precision = sf_ptr -> data_name.item_length;

/*  Pool the constant that contains scale and precision.  */
	call cobol_pool (precision_char_constant, 0,	/*word boundary, return char offset */
	     precision_offset);

	input_ptr = addr (input_buffer (1));
	reloc_ptr = addr (reloc_buffer (1));
	inst_ptr = addr (ldq_inst);

/*  Set up the input structure to the addressability utility.  */
	input_struc_basic.type = 1;
	input_struc_basic.operand_no = 0;
	input_struc_basic.lock = 0;
	input_struc_basic.segno = 3000;		/*  constant section.  */
	input_struc_basic.char_offset = precision_offset;
	input_struc_basic.send_receive = 0;

/*  Get the address of the pooled constant.  */
	call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

/*  Emit the LDQ instruction  */
	call cobol_emit (inst_ptr, null (), 1);

/*  Generate code to load the A register with the scale and precision of the target.  */

	precision.scale = rf_ptr -> data_name.places_right;
	precision.precision = rf_ptr -> data_name.item_length;

/*  Pool the constant  */
	call cobol_pool (precision_char_constant, 0, precision_offset);

	input_struc_basic.char_offset = precision_offset;

/*  Get the address of the constant to be loaded into the A register.  */
	inst_ptr = addr (lda_inst);
	call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

/*  Emit the LDA instruction  */
	call cobol_emit (inst_ptr, null (), 1);		/*  Emit code to load pr5 with the address of the work space.  */

	substr (epp5_inst, 1, 3) = "110"b;		/* pr6 = stack  */
	substr (epp5_inst, 4, 15) = bit (fixed (ret_offset, 15), 15);
	call cobol_emit (addr (epp5_inst), null (), 1);

/*  NOTE  pr3 and pr5 are used here, even though they are always supposed to point at cobol data.
	However, these pointer registers are needed here to communicate with the cobol operator, and are loaded
	to values other than pointers to cobol data immediately prior to calling the overpunch operator, so
	no addressability to cobol data is lost.  Immediately upon returning from the operator, pointer
	registers 3,4, and 5 are reloaded to their expected values.  */


/*  Emit an instruction to transfer to the cobol overpunch operator  */
	call cobol_emit (addr (tsp3_inst), null (), 1);

/*  Reset all registers after the call to the cobol operator  */
	call cobol_reset_r$after_operator;

	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_End(MY_NAME);/**/



/**************************************************/
/*	INCLUDE FILES USED BY THIS PROCEDURE	*/
/**************************************************/


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type9;
%include cobol_addr_tokens;

     end cobol_opch_op_call;
