/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_make_reg_token.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Renamed on 01/17/77 by ORN from cobol_make_register_token to cobol_make_reg_token */
/* Modified on 01/14/77 by ORN to signal command_error rather than cobol_compiler_error */
/* Modified since Version 2.0 */

/*{*/
/* format: style3 */
cobol_make_reg_token:
     proc (token_ptr, reg_no);

/* create a token (type 100) for registers */
dcl	token_ptr		ptr;
dcl	reg_no		bit (4);			/*
 token_ptr  is a pointer to the token (input/output)
	(a) if not null the caller will provide the space
	to hold the token.
	(b) if null this utility will provide the space
	and will return the address of the token
	in this parameter.
 reg_no	is the register number (input)
		"0001"b - A register.
		"0010"b - Q register.
		"0011"b - A and Q register.
		"1nnn"b - index register nnn.
 notes:
 1. The token will have the following description.
   (a) A standard token header, (type of 100, size set,
       and the remainder zeros).
 2. A field defined as bit (4).

*/
						/*}*/

dcl	1 token_overflow	static,
	  2 name		char (32) init ("cobol_make_reg_token"),
	  2 message_len	fixed bin (35) init (58),
	  2 message	char (58) init ("The temporary token area has run over the end of a segment");
dcl	signal_		entry (char (*), ptr, ptr);
dcl	1 clear_token	aligned based (cobol_type100_ptr),
	  2 clear_token_wd	(token_wd_size) fixed bin;
dcl	token_wd_size	fixed bin init (5);		/* size of token in words */
dcl	i		fixed bin;


/*************************************/
start:						/* get space for token (if not provided) */
	if token_ptr = null ()
	then do;
		if (binary (rel (cobol_$temp_token_ptr)) + token_wd_size) > 262143
		then do;				/* token will not fit in temp token area */
			call signal_ ("command_error", null (), addr (token_overflow));
			return;
		     end;
		token_ptr = cobol_$temp_token_ptr;
		cobol_$temp_token_ptr = addrel (cobol_$temp_token_ptr, token_wd_size);
	     end;

/* setup token */

	cobol_type100_ptr = token_ptr;		/* clear token to zeros */
	do i = 1 to token_wd_size;
	     clear_token_wd (i) = 0;
	end;
	cobol_type100.type = 100;
	cobol_type100.size = 4 * (token_wd_size);
	cobol_type100.register = reg_no;
	return;

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type100;
%include cobol_;

     end cobol_make_reg_token;
