/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_gen_error.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 7/7/76 by George Mercuri to correct use entry when error code ^= 0. */
/* Modified on 6/2/76 by Bob Chang to implement the reg_reset entry. */
/* Modified on 5/18/76 by Bob Chang to fix the aos instruction. */
/* Modified on 5/16/76 by Bob Chang to take out set_pr5 statment.	*/
/* Modified on 5/12/76 by George Mercuri to add pr0| to tsx0 instruction. */
/* Modified on 5/12/76 by George Mercuri for additional feature on cobol_error_code. */
/* Modified on 5/10/76 by George Mercuri for error handling. */
/* Created  on 05/05/76 by Bob Chang to interface with cobol_reg_manager. */
/*{*/
/* format: style3 */
cobol_gen_error:
     proc (cobol_error_code, tagno);

/* This sub-generator produces code to generate an
object time error message via the run-time support routine
cobol_error_. */

dcl	cobol_error_code	fixed bin;
dcl	tagno		fixed bin;
dcl	tt		fixed bin;

/*
     cobol_error_code  a fixed bin number indicating the "COBOL
               error number" (see below).  If 0, then it is
	     assumed that the appropriate cobol_operators_ has
	     set the cobol_error_code value in X1.

This program will set up a call to a run-time error
routine cobol_error_.  Run-time support routines encountering
errors will also call cobol_error_.  Thus all error messages will
be funnelled through one run-time routine.

The interface is as follows:

  call cobol_error_ (cobol_code,multics_code,line_no1,
                                   line_no2,progname,error_ptr);

     cobol_code  corresponds to cobol_error_code described above.

     multics_code  a fixed bin corresponding to the location
               identified by sp|error_code_relp described above.

     line_no1  a fixed bin containing the line number on
               which the error occurred.  This is derived from
               the internal line number given in line_no
               described above.  If it is 0, no line number is
               applicable to this error and no such indication
               will be given in the error message.

     line_no2  a fixed bin containing the additional line
               number.  This is derived from the internal line
               number line_no described above.  If it is 0, then
               only a one-part line number is given.

     progname  a varying char field containing the name of the
               program which produced the error.  The
               cobol_gen_error sub-generator will always set it
               to the name of the program for which code is being
               generated.  Run-time support routines may identify
               the program which called them or themselves,
               depending on the error.

     error_ptr  a pointer to the location at which the error was
               discovered or to the location at which
               cobol_control_ is called from.  The
               cobol_gen_error sub-generator will always set it
               to the latter.


The following message(s) will be output to the "error_output"
stream:

     ["progname": Multics message (from com_err_)]
     ["progname": COBOL error message]
     Error occurred at "segno|offset"
          [in "progname" [on line ["line_no2"] "line_no1"]]

The first line is printed only if multics_code is non-zero.  The
second line is printed only if cobol_code is non-zero.  The third
line is always printed.  The progname portion of it is not
present if progname is null; the line_no2 portion of it is not
present is line_no2 is zero;  the line_no1 portion of it is not
present if line_no1 is zero.  If progname is null and the first
and/or the second line is present, the the string "cobol_error"
is used in place of it.
}*/

dcl	add_use_code	bit (36) static init ("110000000001001001000101100001000000"b);
						/* aos	pr6|73	*/
						/* -5-18-76 - */


dcl	temp		fixed bin;
dcl	inst_seq		(6) bit (18) static init ("000000000000000000"b, "111000000001000000"b,
						/* tsx0	pr0|op_num	*/
			"000000000000000000"b, "111001000000000100"b,
						/* tra	0,ic	*/
			"000000111111111111"b, "111000000001001001"b);
						/* tsx0 pr0|4095,1	*/

/*
Procedures Called		*/

dcl	cobol_emit	entry (ptr, ptr, fixed bin),
	cobol_define_tag	entry (fixed bin),
	cobol_reg_manager$before_op
			entry (fixed bin),
	cobol_reg_manager$after_op
			entry (fixed bin),
	cobol_make_tagref	entry (fixed bin, fixed bin, ptr);



/***********************************/

start:
	if tagno = 0
	then do;
		tt = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		call cobol_define_tag (tt);
	     end;
	else tt = tagno;

	if cobol_error_code = 0
	then /*5/12/76*/
	     call cobol_emit (addr (inst_seq (5)), null (), 1);
	else do;
		temp = 4095 + cobol_error_code;
		substr (inst_seq (1), 4, 15) = substr (unspec (temp), 22, 15);
		call cobol_emit (addr (inst_seq (1)), null (), 1);
	     end;
	call cobol_emit (addr (inst_seq (3)), null (), 1);
	call cobol_make_tagref (tt, cobol_$text_wd_off - 1, null ());
	return;


/***********************************/

reg_reset:
     entry (cobol_error_code, tagno);

	if tagno = 0
	then do;
		tt = cobol_$next_tag;
		cobol_$next_tag = cobol_$next_tag + 1;
		call cobol_define_tag (tt);
	     end;
	else tt = tagno;

	call cobol_reg_manager$before_op (0);
	if cobol_error_code = 0
	then /*5/12/76*/
	     call cobol_emit (addr (inst_seq (5)), null (), 1);
	else do;
		temp = 4095 + cobol_error_code;
		substr (inst_seq (1), 4, 15) = substr (unspec (temp), 22, 15);
		call cobol_emit (addr (inst_seq (1)), null (), 1);
	     end;
	call cobol_reg_manager$after_op (0);
	call cobol_emit (addr (inst_seq (3)), null (), 1);
	call cobol_make_tagref (tt, cobol_$text_wd_off - 1, null ());
	return;



/*************************************/


use:
     entry (cobol_error_code);			/*5/12/76*/
	call cobol_emit (addr (add_use_code), null (), 1);

	if cobol_error_code = 0
	then call cobol_emit (addr (inst_seq (5)), null (), 1);
	else do;
		temp = 4095 + cobol_error_code;
		substr (inst_seq (1), 4, 15) = substr (unspec (temp), 22, 15);
		call cobol_emit (addr (inst_seq (1)), null (), 1);
	     end;

	return;




/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_;

     end cobol_gen_error;
