/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_mpy.pl1 Added Trace statements.
                                                   END HISTORY COMMENTS */


/* Modified on 11/16/84 by FCH, [5.3...], trace added */
/* Modified on 10/19/84 by FCH, [4.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
/* Modified on 2/25/76 by Bob Chang to fix plus sign for 1011 and 1100 . */
/* Modified on 2/24/76 by Bob Chang to handle signed/unsigned. */




/* format: style3 */
%;
cobol_mpy:
     proc (operand_ptr, result_ptr, opcode_code);

/*
This proceudre generates code for the follwoing types of
Cobol constructs:

	1. MULTIPLY A BY B.
	2. DIVIDE A INTO B.

This procedure assumes that the tokens pointed at by operand_ptr
and result_ptr are data name (type 9) tokens.  That is, any
conversion of the operands from numeric literal or figurative
constant has already been done before this procedure is called.

*/


/*  DECLARATION OF THE PARAMETERS  */

dcl	operand_ptr	ptr;
dcl	result_ptr	ptr;
dcl	opcode_code	fixed bin (35);

/*
operand_ptr	Points to the token for the multiplicand or divisor
		depending on whether code is to be generated for multiplication or
		division, respectively. (input)
result_ptr	Points to the token that serves as both
			1. multiplier and product  or
			2. dividend and qoutient
		depending on whether code is to be generated
		for multiplication or division, respectively. (input)
opcode_code	a code that indicates whether code is to be
		generated for multiplication or division. (input)

			opcode_code  meaning
			---------------------------------
			     1        | multiplication
			     2        | division

*/

/*  DECLARATION OF EXTERNAL ENTRIES  */

dcl	cobol_addr	ext entry (ptr, ptr, ptr);
dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);

/*}*/

/*  DECLARATION OF INTERNAL STATIC VARIABLES  */

/*  Declaration of internal static variables that contain ADD2 and SUBTRACT2 opcodes  */

dcl	mp2d_op		bit (10) int static init ("0100001101"b /*206(1)*/);
dcl	dv2d_op		bit (10) int static init ("0100001111"b /*207(1)*/);

/*  DECLARATION OF INTERNAL AUTOMATIC VARIABLES  */

/*  Declaration of buffers used by the addressability utility  */

/*  Relocation info buffer  */
dcl	reloc_buffer	(1:10) fixed bin;

/*  Instruction/description buffer  */
dcl	addr_inst_buffer	(1:10) fixed bin;

/*  Addressability input buffer  */
dcl	addr_input_buffer	(1:30) fixed bin;


dcl	dn_ptr		ptr;

/**************************************************/
/*	START OF EXECUTION			*/
/*	cobol_mpy				*/
/**************************************************/


/*  Point pointers at the buffers used to establish addressability  */

	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(cmp);/**/

	reloc_ptr = addr (reloc_buffer (1));
	input_ptr = addr (addr_input_buffer (1));
	inst_ptr = addr (addr_inst_buffer (1));

/*  Build the input structure to the addressability utility  */
	input_struc.type = 5;			/*  eis, 2 input operands, instruction word and 2 descriptors returned  */
	input_struc.operand_no = 2;
	input_struc.lock = 0;			/*  no lock  */

	input_struc.operand.token_ptr (1) = operand_ptr;
	input_struc.operand.send_receive (1) = 0;	/*  sending  */
	input_struc.operand.size_sw (1) = 0;

	input_struc.operand.token_ptr (2) = result_ptr;
	input_struc.operand.send_receive (2) = 1;	/*  receiving  */
	input_struc.operand.size_sw (2) = 0;

/*  Set the proper opcode into the eis instruction  */
	if opcode_code = 1				/*  multiply  */
	then inst_struc.fill1_op = mp2d_op;
	else inst_struc.fill1_op = dv2d_op;

/*  Establish addressability  */
	call cobol_addr (input_ptr, inst_ptr, reloc_ptr);

/*  Set the rounding bit in the eis instruction, if necessary  */

	if result_ptr -> data_name.rounded
	then inst_struc.zero3 = "01"b;		/*  truncation off, rounding on  */
	if result_ptr -> data_name.ascii_packed_dec = "1"b & result_ptr -> data_name.seg_num = 2
	then inst_struc.inst.zero1 = "10"b;

/*  Emit the eis instruction and 2 descriptors  */
	call cobol_emit (inst_ptr, reloc_ptr, 3);

	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_End(cmp);/**/

	return;

	/***.....	dcl cmp char(9) init("COBOL_MPY");/**/

	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/

	/***.....	dcl Trace_Bit bit(1) static external;/**/
	/***.....	dcl Trace_Lev fixed bin static external;/**/
	/***.....	dcl Trace_Line char(36) static external;/**/
	/***.....	dcl ioa_ entry options(variable); /**/


/*  INCLUDE FILES USED BY THIS PROCEDURE  */


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_type9;


%include cobol_addr_tokens;


/**************************************************/
/*	END OF PROCEDURE			*/
/*	cobol_mpy			*/
/**************************************************/

     end cobol_mpy;
