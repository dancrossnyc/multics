/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_linage.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 02/10/81 by FCH, cobol_abort_error changed not to emit tra instr, [4.4-1], BUG462(TR8970) */
/* Modified on 08/23/80 by FCH, [4.3-1], after advancing data-name with linage clause generates bad code, BUG441(SQ431) */
/* Modified since Version 4.3 */

/* format: style3 */
cobol_linage:
     proc (ft_ptr, mp_ptr, buflen_off, buf_off, ioerror_ptr);

dcl	page_sw		bit (1) init ("0"b);
dcl	ioerror_ptr	ptr;
dcl	pr5_struct_ptr	ptr;
dcl	ft_ptr		ptr;
dcl	mp_ptr		ptr;
dcl	good_tag		fixed bin;
dcl	advancing_count	fixed bin;
dcl	buflen_off	fixed bin;		/* stack offset in words (input) */
dcl	buf_off		fixed bin;		/* stack offset in words (output) */

dcl	1 mp		based (mp_ptr),
	  2 n		fixed bin,
	  2 pt		(0 refer (mp.n)) ptr;

dcl	linage_before	bit (1);
dcl	mrl		bit (36) static init ("000000000000000000001000001100000000"b);
dcl	mlr		bit (36) static init ("000000000000000000001000000100000000"b);
dcl	mlr_q		bit (36) static init ("000001101001000110001000000100000000"b);
dcl	szn		bit (12) static init ("010011100001"b);
dcl	aos		bit (12) static init ("000101100001"b);
dcl	lxl5		bit (12) static init ("111010101001"b);
dcl	adq		bit (12) static init ("000111110001"b);
dcl	stq		bit (12) static init ("111101110001"b);
dcl	lda		bit (12) static init ("010011101001"b);
dcl	ldq		bit (12) static init ("010011110001"b);
dcl	sbq		bit (12) static init ("001111110001"b);
dcl	adq_dlmod		bit (18) static init ("000111110000000111"b);
dcl	ldq_dlmod		bit (18) static init ("010011110000000111"b);
dcl	ldq_dumod		bit (18) static init ("010011110000000011"b);
dcl	tra_icmod		bit (18) static init ("111001000000000100"b);
dcl	tnz_icmod		bit (18) static init ("110000001000000100"b);
dcl	num_check_instr	(4) bit (36) static init ("110000000001010000010011101001000000"b,
						/* lda	pr6|120	*/
			"110000000000110001010011110001000000"b,
						/* ldq	pr6|lenoff	*/
			"000000000001111001001001110000000111"b,
						/* cmpq	171,dl		*/
			"000000000000000000110000100000000100"b);
						/* tmi	[bypass_error]);ic	*/


dcl	1 ioerror		based (ioerror_ptr),
	  2 cobol_code	fixed bin,
	  2 retry_tag	fixed bin,
	  2 is_tag	fixed bin,
	  2 ns_tag	fixed bin,
	  2 type1_ptr	ptr,
	  2 mode		fixed bin;

dcl	1 pr5_struct	static,
	  2 pr5		fixed bin init (5),
	  2 pointer_no	bit (3),
	  2 lock		fixed bin init (0),
	  2 switch	fixed bin init (0),
	  2 segno		fixed bin init (0),
	  2 offset	fixed bin init (0),
	  2 reset		fixed bin;
dcl	1 mlr_struct,
	  2 type		fixed bin init (5),
	  2 operand_no	fixed bin init (2),
	  2 lock		fixed bin init (0),
	  2 operand1,
	    3 token_ptr	ptr,			/* always set */
	    3 send_receive	fixed bin init (0),
	    3 ic_mod	fixed bin,
	    3 size_sw	fixed bin init (1),
	  2 operand2,
	    3 token_ptr	ptr init (null ()),
	    3 send_receive	fixed bin,
	    3 ic_mod	fixed bin,
	    3 size_sw	fixed bin;

dcl	1 zero_token	static,			/*06-16-77*/
	  2 size		fixed bin init (40),	/*06-16-77*/
	  2 line		fixed bin init (0),		/*06-16-77*/
	  2 column	fixed bin init (0),		/*06-16-77*/
	  2 type		fixed bin init (2),		/*06-16-77*/
	  2 integral	bit (1) init ("0"b),	/*06-16-77*/
	  2 floating	bit (1) init ("0"b),	/*06-16-77*/
	  2 seg_range	bit (1) init ("0"b),	/*06-16-77*/
	  2 filler1	bit (4) init ("0"b),	/*06-16-77*/
	  2 subscript	bit (1) init ("0"b),	/*06-16-77*/
	  2 sign		char (1) init ("0"),	/*06-16-77*/
	  2 exp_sign	char (1) init ("0"),	/*06-16-77*/
	  2 exp_places	fixed bin init (0),		/*06-16-77*/
	  2 places_left	fixed bin init (0),		/*06-16-77*/
	  2 places_right	fixed bin init (0),		/*06-16-77*/
	  2 places	fixed bin init (1),		/*06-16-77*/
	  2 literal	char (1) init ("0");
dcl	instr		(6) bit (36);
dcl	text		(0:100000) bit (36) based (cobol_$text_base_ptr);

/* slew characters.	03-02-77	*/
dcl	pr_ctl		char (5) static int init ("c  ");
dcl	chan_no		fixed bin;
dcl	convert_no	(10:16) char (2) static int init ("10", "11", "12", "13", "14", "15", "16");
dcl	convert_no1	(9) char (1) static int init ("1", "2", "3", "4", "5", "6", "7", "8", "9");

dcl	nls		char (120) static init ((120)"
");
dcl	advancing_error	fixed bin static init (23);
dcl	len_off		fixed bin static init (49);

dcl	dn_ptr		ptr;
dcl	name_ptr		ptr;
dcl	dn_ptr_linage	ptr;
dcl	instr_ptr		ptr;
dcl	mlr_struct_ptr	ptr;

dcl	bnum		fixed bin;
dcl	anum		fixed bin;
dcl	ba_sw		fixed bin;
dcl	bvalue		bit (18) aligned;
dcl	avalue		bit (18) aligned;
dcl	temp		fixed bin;
dcl	utemp		fixed bin;
dcl	restartad		fixed bin;
dcl	patch_ic		fixed bin;

dcl	cobol_define_tag	entry (fixed bin);
dcl	cobol_pool	entry (char (*), fixed bin, fixed bin);
dcl	cobol_set_pr	entry (ptr, ptr);
dcl	cobol_call_op	entry (fixed bin, fixed bin);
dcl	cobol_gen_ioerror	entry (ptr, ptr);
dcl	cobol_ioop_util$set_var_adv
			entry;
dcl	cobol_ioop_util$set_value
			entry (fixed bin);
dcl	signal_		entry (char (*), ptr, ptr);
dcl	cobol_alloc$stack	entry (fixed bin, fixed bin, fixed bin);
dcl	cobol_emit	entry (ptr, ptr, fixed bin);
dcl	cobol_addr	entry (ptr, ptr, ptr);
dcl	ioa_$rsnnl	entry options (variable);	/* sub-generators */
dcl	cobol_io_util$move_direct
			entry (bit (3) aligned, fixed bin, fixed bin, fixed bin, bit (18) aligned);
dcl	cobol_io_util$fixed_add
			entry (bit (3) aligned, fixed bin, fixed bin, bit (3) aligned, fixed bin);
dcl	cobol_io_util$move_lit
			entry (bit (3) aligned, fixed bin, fixed bin, char (*));
dcl	cobol_io_util$t9dec_to_bin
			entry (bit (3) aligned, fixed bin, ptr);
dcl	cobol_ioerror_abort entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin);


/*************************************/
/* Note: code is generated under the assumption that the A register
   is set with the length of the sending  field unless the item has
   variable length.  */

start:
	linage_before = "0"b;
	dn_ptr = mp.pt (mp.n - 1);
	dn_ptr_linage = mp.pt (mp.n - 2);
	eos_ptr = mp.pt (mp.n);
	mlr_struct.operand1.token_ptr = mp.pt (2);

	if ^file_table.variable
	then mp.pt (2) -> data_name.variable_length = "0"b;

	instr_ptr = addr (instr);
	mlr_struct_ptr = addr (mlr_struct);
	pr5_struct_ptr = addr (pr5_struct);
	good_tag = cobol_$next_tag;
	cobol_$next_tag = cobol_$next_tag + 1;


	if data_name.type = 17
	then call cobol_alloc$stack (121, 2, buf_off);	/* allocate 121 only*/
	else call cobol_alloc$stack (data_name.item_length + 120, 2, buf_off);
						/* allow up to 120 new-lines */

start_codegen:
	anum, bnum = 0;

	if buflen_off = 0
	then do;					/* special call from cobol_open_gen to output first TOP skips for linage. */

		call move_buf_con;
		return;

	     end;

	if data_name.type = 1
	then /*06-16-77*/
	     if dn_ptr -> reserved_word.key = reswd_ZERO
	     then /*06-16-77*/
		dn_ptr = addr (zero_token);		/*06-16-77*/

	if end_stmt.d = "00"b
	then do;					/* no ADVANCING clause - same as AFTER 1 */

		dn_ptr_linage = mp.pt (mp.n - 1);

		if file_table.device = 1
		then do;				/* COBOL rules - after advancing 1 */

			bvalue = "000001010000001010"b;
			bnum = 1;

		     end;
		else do;				/* MULTICS rules - before advancing 1 */

			avalue = "000001010000001010"b;
			anum = 1;

		     end;

		call move_buf_con;
	     end;

	else if end_stmt.d = "10"b
	then do;					/* AFTER ADVANCING ... specified */

		if data_name.type = 2
		then do;				/* AFTER ADVANCING literal */

			bnum = fixed (dn_ptr -> numeric_lit.literal, 17);

			if bnum > 120
			then go to litsize_error;

			bvalue = "000001010000001010"b;

			call move_buf_con;

		     end;
		else if data_name.type = 9
		then do;				/* AFTER ADVANCING data-name */

			ba_sw = 0;

			call move_buf_var;

		     end;
		else if data_name.type = 1 | data_name.type = 17
		then do;				/* AFTER ADVANCING PAGE or mnemonic-name */

			if data_name.type = 17 | (data_name.type = 1 & ^file_table.linage)
			then do;

				chan_no = dn_ptr -> mnemonic_name.iw_key - 210;

				if chan_no < 17 & chan_no > 9
				then do;
					bnum = 5;
					substr (pr_ctl, 3, 2) = convert_no (chan_no);
				     end;
				else if chan_no > 0 & chan_no < 10
				then do;
					bnum = 4;
					substr (pr_ctl, 3, 2) = convert_no1 (chan_no) || "";
				     end;
				else do;
					bvalue = "000001100"b;
					bnum = 1;
				     end;

				call move_buf_con;

			     end;
			else if file_table.linage
			then do;

				bvalue = "000001010"b;
				bnum = 1;
				page_sw = "1"b;

				call move_buf_con;

			     end;
		     end;
	     end;
	else do;					/* BEFORE ADVANCING ... specified */

		linage_before = "1"b;

		if data_name.type = 2
		then do;				/* BEFORE ADVANCING literal */

			avalue = "000001010"b;

			anum = fixed (dn_ptr -> numeric_lit.literal, 17);

			if anum > 120
			then go to litsize_error;

			call move_buf_con;

		     end;
		else if data_name.type = 9
		then do;				/* BEFORE ADVANCING data-name */

			ba_sw = 1;

			call move_buf_var;

		     end;
		else if data_name.type = 1 | data_name.type = 17
		then do;				/* BEFORE ADVANCING PAGE or mnemonic-name */

			if data_name.type = 17 | (data_name.type = 1 & ^file_table.linage)
			then do;

				chan_no = dn_ptr -> mnemonic_name.iw_key - 210;

				if chan_no < 17 & chan_no > 9
				then do;
					anum = 5;
					substr (pr_ctl, 3, 2) = convert_no (chan_no);
				     end;
				else if chan_no > 0 & chan_no < 10
				then do;
					anum = 4;
					substr (pr_ctl, 3, 2) = convert_no1 (chan_no) || "";
				     end;
				else do;
					avalue = "000001100"b;
					anum = 1;
				     end;

				call move_buf_con;

			     end;
			else if file_table.linage
			then do;

				avalue = "000001010"b;
				anum = 1;
				page_sw = "1"b;

				call move_buf_con;

			     end;
		     end;
	     end;
exit:
	return;


/*************************************/
/* SUBROUTINES */
/*************************************/

move_buf_con:
     proc;					/* LINAGE CODE FOLLOWS */

	if file_table.linage & buflen_off ^= 0
	then do;

		call cobol_set_pr (pr5_struct_ptr, dn_ptr_linage);

		if page_sw
		then call cobol_ioop_util$set_value (1000);
						/* temp high value for PAGE */
		else call cobol_ioop_util$set_value (bnum + anum);

		call cobol_call_op (52, good_tag);	/* LINAGE_OP */
		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);
		call cobol_define_tag (good_tag);

	     end;

/* 	else call cobol_ioop_util$set_value(0); */
/* no linage clause specified */

	if bnum > 0
	then do;

		if bnum < 3
		then call cobol_io_util$move_direct ("110"b, buf_off * 4, 4, 0, bvalue);
		else if data_name.type = 17
		then call cobol_io_util$move_lit ("110"b, buf_off * 4, bnum, substr (pr_ctl, 1, bnum));
		else call cobol_io_util$move_lit ("110"b, buf_off * 4, bnum, substr (nls, 1, bnum));

		instr (1) = "110"b || substr (unspec (buflen_off), 22, 15) || lda;

		call cobol_emit (instr_ptr, null (), 1);

	     end;
	else if file_table.rec_do
	then do;					/* in this case A will not be already set */

		instr (1) = "110"b || substr (unspec (buflen_off), 22, 15) || lda;

		call cobol_emit (instr_ptr, null (), 1);
	     end;

	if anum = 0
	then if file_table.device = 1
	     then do;				/*print file - append CR if necessary */

		     anum = 1;

		     if file_table.linage
		     then avalue = "000001010"b;	/* octal 012 top bottom */
		     else avalue = "000001101"b;	/* octal 015 = Carriage Return */

		end;
	if anum > 0
	then do;

		if file_table.linage
		then do;

			if bnum = 0
			then do;
				temp = 5130;
				instr (1) = substr (unspec (temp), 19, 18) || ldq_dumod;
				temp = buf_off * 4 + 1;
				instr (2) = "110"b || substr (unspec (temp), 22, 15) || stq;

				call cobol_emit (instr_ptr, null (), 2);

			     end;
			temp = buflen_off + 1;
			instr (1) = "110"b || substr (unspec (temp), 22, 15) || ldq;

			call cobol_emit (instr_ptr, null (), 1);

		     end;
		else if data_name.type ^= 17 | anum = 1
		then do;

			instr (1) = substr (unspec (anum), 19, 18) || ldq_dlmod;
			instr (2) = "110"b || substr (unspec (buflen_off), 22, 15) || adq;

			call cobol_emit (instr_ptr, null (), 2);

		     end;
	     end;

	if file_table.linage & ^linage_before
	then do;
		instr (1) = mrl;
		temp = buf_off * 4;
	     end;
	else do;
		instr (1) = mlr;
		temp = buf_off * 4 + bnum;
	     end;

	call cobol_addr (mlr_struct_ptr, instr_ptr, null ());

	substr (instr (3), 1, 20) = "110"b || substr (unspec (temp), 20, 17);
	substr (instr (2), 21, 16) = "0000000000000101"b; /* sending length in A */
	substr (instr (1), 12, 2) = "11"b;		/* length of receiving in A or Q */
	substr (instr (1), 31, 1) = "1"b;		/* length of sending in A */

	if anum = 0
	then substr (instr (3), 21, 16) = substr (instr (2), 21, 16);
	else do;

		substr (instr (1), 1, 9) = avalue;
		substr (instr (3), 21, 16) = "0000000000000110"b;

	     end;

	if data_name.type = 17 & anum > 1
	then do;

		substr (instr (1), 1, 9) = "000000000"b;
		substr (instr (3), 21, 16) = "0000000000000101"b;

		call cobol_emit (addr (instr (1)), null (), 3);
		call cobol_pool (substr (pr_ctl, 1, anum), 1, temp);

		substr (instr (1), 12, 7) = "1000101"b;
		substr (instr (1), 30, 7) = "0000100"b;
		temp = -cobol_$text_wd_off - temp;
		substr (instr (2), 1, 18) = substr (unspec (temp), 19, 18);
		substr (instr (2), 19, 18) = substr (unspec (anum), 19, 18);
		substr (instr (3), 21, 16) = substr (unspec (anum), 21, 16);

	     end;

	call cobol_emit (addr (instr (1)), null (), 3);

	if file_table.linage & ^linage_before
	then do;

		instr (1) = mlr_q;
		instr (2) = (36)"0"b;
		substr (instr (3), 33, 4) = "0001"b;

		call cobol_emit (addr (instr (1)), null (), 3);

		instr (1) = "000000000000000001000111110000000111"b;

		call cobol_emit (addr (instr (1)), null (), 1);

	     end;

	temp = anum + bnum;

	if ^file_table.linage & temp > 0
	then call cobol_io_util$fixed_add ("110"b, buflen_off * 4, temp, "000"b, 0);

	else if temp > 0
	then do;

		instr (1) = "110"b || substr (unspec (buflen_off), 22, 15) || stq;

		instr (2) = "110"b || substr (unspec (buflen_off), 22, 15) || lda;

		call cobol_emit (addr (instr), null (), 2);

	     end;

	return;
     end move_buf_con;


move_buf_var:
     proc;

	restartad = cobol_$text_wd_off;

	call cobol_io_util$t9dec_to_bin ("110"b, len_off * 4, mp.pt (mp.n - 1));

	patch_ic = cobol_$text_wd_off + 3;

	call cobol_emit (addr (num_check_instr), null (), 4);
	call cobol_ioerror_abort (advancing_error, mp.pt (1) -> reserved_word.line, 0, restartad, 0);

/*[4.4-1]*/
/*cobol_$text_wd_off = cobol_$text_wd_off-1;*/
/* erase the transfer */
	instr (1) = "110"b || substr (unspec (buflen_off), 22, 15) || lda;
	utemp = restartad - (cobol_$text_wd_off + 1);
	instr (2) = substr (unspec (utemp), 19, 18) || tra_icmod;

	call cobol_emit (instr_ptr, null (), 2);

	utemp = cobol_$text_wd_off - patch_ic;
	substr (text (patch_ic), 1, 18) = substr (unspec (utemp), 19, 18);

	if file_table.rec_do
	then do;					/* in this case, A will not be already set */

/*	     instr(1) = "110"b||substr(unspec(buflen_off),22,15)||lda;  */
/* already done */

		call cobol_emit (instr_ptr, null (), 1);
	     end;

	if file_table.linage & buflen_off ^= 0
	then do;

		call cobol_set_pr (pr5_struct_ptr, dn_ptr_linage);
		call cobol_ioop_util$set_var_adv;

		call cobol_call_op (52, good_tag);	/* LINAGE_OP */
		call cobol_gen_ioerror (ft_ptr, ioerror_ptr);
		call cobol_define_tag (good_tag);

	     end;

	if ba_sw = 0
	then do;					/* AFTER specified */

/*[4.3-1]*/
		if file_table.linage		/*[4.3-1]*/
		then do;

/*[4.3-1]*/
			temp = buflen_off + 1;

/*[4.3-1]*/
			instr (1) = "110"b || substr (unspec (temp), 22, 15) || ldq;
						/*[4.3-1]*/
			instr (2) = "110"b || substr (unspec (buflen_off), 22, 15) || sbq;

/*[4.3-1]*/
			call cobol_emit (instr_ptr, null (), 2);

/*[4.3-1]*/
		     end;

		instr (1) = mlr;
		instr (2) = ""b;
		instr (3) = "110"b || substr (unspec (buf_off), 22, 15) || "000000000000000110"b;
						/* len in Q reg */

		substr (instr (1), 1, 18) = "000001010001100000"b;

		call cobol_emit (instr_ptr, null (), 3);

		if file_table.device = 1		/* print file - append carriage return */
		then do;

			instr (1) = "110"b || substr (unspec (buflen_off), 22, 15) || aos;
			instr (2) = substr (instr (1), 1, 18) || lxl5;
						/* and load it in X5 */

			call cobol_emit (instr_ptr, null (), 2);

		     end;

		instr (1) = mlr;

		call cobol_addr (mlr_struct_ptr, addr (instr (1)), null ());

		substr (instr (1), 1, 18) = "000001101"b || "00"b || "1100110"b;
						/* CR fill, var length, indexed by Q */
		substr (instr (2), 21, 16) = "0000000000000101"b;
						/* sending length in A */
		instr (3) = "110"b || substr (unspec (buf_off), 22, 15);

		if file_table.device = 1
		then substr (instr (3), 19, 18) = "000000000000001101"b;
						/* length in X5 */
		else substr (instr (3), 19, 18) = "000000000000000101"b;
						/* length in A */

		substr (instr (1), 31, 1) = "1"b;
		instr (4) = "110"b || substr (unspec (buflen_off), 22, 15) || adq;
		instr (5) = substr (instr (4), 1, 18) || stq;

		call cobol_emit (instr_ptr, null (), 5);

	     end;
	else do;

		if file_table.linage
		then do;
			utemp = buflen_off + 1;
			instr (1) = "110"b || substr (unspec (utemp), 22, 15) || ldq;
		     end;
		else do;
			utemp = buflen_off;
			instr (1) = "110"b || substr (unspec (utemp), 22, 15) || adq;
		     end;

		instr (2) = mlr;

		call cobol_addr (mlr_struct_ptr, addr (instr (2)), null ());

		substr (instr (3), 21, 16) = "0000000000000101"b;
		instr (4) = "110"b || substr (unspec (buf_off), 22, 15) || "000000000000000110"b;
		substr (instr (2), 1, 18) = "000001010001100000"b;
		substr (instr (2), 31, 1) = "1"b;
		instr (5) = "110"b || substr (unspec (buflen_off), 22, 15) || stq;

		call cobol_emit (instr_ptr, null (), 5);

		if file_table.device = 1
		then do;				/* print file - assure carriage return */

			instr (1) = "110"b || substr (unspec (len_off), 22, 15) || szn;
			instr (2) = "000000000000000101"b || tnz_icmod;
						/* OK if at least one NL */
			instr (3) = mlr;		/* otherwise append CR */
			substr (instr (3), 1, 18) = "000001101"b || "00"b || "100"b || "0110"b;
						/* CR fill at offset in Q */
			instr (4) = ""b;		/* for fill only */
			instr (5) = "110"b || substr (unspec (buf_off), 22, 15) || "000000000000000001"b;
			instr (6) = "110"b || substr (unspec (buflen_off), 22, 15) || aos;
						/* increment length field */

			call cobol_emit (instr_ptr, null (), 6);

		     end;
	     end;
	return;
     end move_buf_var;


/*************************************/
nyi_error:
	call ioa_$rsnnl ("""ADVANCING mnemonic-name"" clause specified on line ^d not yet implemented", message,
	     message_len, mp.pt (1) -> reserved_word.line);
	go to error;

litsize_error:
	call ioa_$rsnnl ("Literal specified in ""ADVANCING"" clause on line ^d is too large - ^a", message, message_len,
	     mp.pt (1) -> reserved_word.line, dn_ptr -> numeric_lit.literal);
	go to error;

error:
	error_info.name = "cobol_linage";
	call signal_ ("command_abort_", null (), addr (error_info));
	return;


/*************************************/

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

%include cobol_error_info;
%include cobol_type1;
%include cobol_type2;
%include cobol_type9;
%include cobol_type19;
%include cobol_file_table;
%include cobol_;
%include cobol_type17;
%include cobol_reswd_values;

     end cobol_linage;
