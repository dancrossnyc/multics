/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_make_list.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 06/26/81 by FCH, [4.4-1], print_text_ replaced by cobol_display_text */
/* Modified on 05/16/80 by FCH, [4.2-2], decl for  tag_addr corrected */
/* Modified on 02/28/79 by PRP, [4.2-1], size of input programs increased */
/* Modified on 10/25/79 by PRP, [4.1-1],  statement output modified */
/* Modified on 08/05/79 by FCH, [4.0-1], debug statement */
/* Modified since Version 4.0 */

/* format: style3 */
cobol_make_list:
     proc (code_ptr, code_length);

dcl	code_ptr		ptr;
dcl	(p, q)		ptr;
dcl	len_ptr		ptr;
dcl	code_length	fixed bin (24);
dcl	word_count	fixed bin (24);
dcl	instr_word_num	fixed bin;
dcl	line_length	fixed bin (24);
dcl	obj_off		fixed bin (18);
dcl	last_word_off	fixed bin (35);
dcl	stmt_no		fixed bin;
dcl	file_num		fixed bin (35);
dcl	line_num		fixed bin (35);
dcl	prev_file_num	fixed bin (35);
dcl	prev_line_num	fixed bin (35);
dcl	fl_length		fixed bin;
dcl	source_stmt_count	fixed bin;
dcl	(i, j, k1, k2, k3, n)
			fixed bin (24);
dcl	(k4, k5)		fixed bin (24);
dcl	(s1, s2, number)	fixed bin (35);
dcl	token_type	fixed bin;
dcl	text_off		fixed bin (24);
dcl	label_off		fixed bin (24);
dcl	label_count	fixed bin;
dcl	mcode		fixed bin (35);
dcl	char7		char (7);
dcl	char9		char (9);
dcl	segname		char (37);
dcl	output_switch	char (10) aligned;
dcl	len		fixed bin based (len_ptr);
dcl	c1		char (4) based (p);
dcl	c2		char (4) based (q);
dcl	source		char (256) based (cobol_sfp);
dcl	print_line	char (256) varying aligned;
dcl	1 map_data_table	aligned based (cobol_$map_data_ptr),
	  2 no_source_stmts fixed bin aligned,
	  2 data		(0 refer (map_data_table.no_source_stmts)),
	    3 line_no	fixed bin unaligned,
	    3 text_addr	fixed bin unaligned,
	    3 col		fixed bin unaligned,
	    3 label	bit unaligned;		/*[4.2-2]*/
declare	1 DEF		aligned based (cobol_$tag_table_ptr),
						/*[4.2-2]*/
	  2 tag_max	fixed bin,		/*[4.2-2]*/
	  2 TAG		(32767),			/*[4.2-2]*/
	    3 tag_addr	fixed bin (17) unal,	/*[4.2-2]*/
	    3 tag_no	fixed bin (17) unal;

dcl	list_iocb_ptr	ptr static init (null ());

dcl	cobol_display_text	entry (ptr, fixed bin, char (*) aligned);
dcl	ioa_$ioa_stream	entry options (variable);
dcl	com_err_		entry options (variable);
dcl	iox_$attach_ioname	entry (char (*), ptr, char (*), fixed bin (35));
dcl	iox_$open		entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl	iox_$close	entry (ptr, fixed bin (35));
dcl	iox_$detach_iocb	entry (ptr, fixed bin (35));

dcl	cleanup		condition;

dcl	addr		builtin;
dcl	addrel		builtin;
dcl	divide		builtin;
dcl	fixed		builtin;
dcl	index		builtin;
dcl	mod		builtin;
dcl	null		builtin;
dcl	pointer		builtin;
dcl	rel		builtin;
dcl	substr		builtin;

	call cleanup_proc;
	on cleanup call cleanup_proc;

	segname = substr (cobol_$obj_seg_name, 1, index (cobol_$obj_seg_name, " ") - 1) || ".list";
	call iox_$attach_ioname ("cobol_out_", list_iocb_ptr, "vfile_ " || segname || " -extend", mcode);

	if mcode ^= 0
	then go to error;

	call iox_$open (list_iocb_ptr, 2, "1"b, mcode);

	if mcode ^= 0
	then do;
error:
		call cleanup_proc;
		revert cleanup;
		call com_err_ (mcode, "cobol");
		return;
	     end;

	output_switch = "cobol_out_";
	p = addr (s1);
	q = addr (s2);

	call ioa_$ioa_stream (output_switch, "^|^a^/", "OBJECT CODE");

	word_count = 1;
	obj_off = fixed (rel (code_ptr), 18) - cobol_$constant_offset;
	last_word_off = obj_off + code_length;
	stmt_no = 1;
	prev_line_num = 0;
	prev_file_num = 0;
	source_stmt_count = 1;
	text_off = text_addr (1);
	label_count = 0;
	label_off = -1;

	if fixed_common.proc_counter > 0
	then do;

		len_ptr = pointer (cobol_ntfp, 8);
		proc_def_ptr = pointer (cobol_ntfp, 8);
		token_type = proc_def.type;

		do while (token_type ^= 18 & len > 0);

		     len_ptr = addrel (proc_def_ptr, divide (len + 11, 8, 17, 0) * 2);
		     proc_def_ptr = len_ptr;
		     token_type = proc_def.type;
		end;

		if len > 0
		then label_off = cobol_$tag_table_ptr -> tag_addr (proc_def.proc_num);
	     end;

	do while (word_count <= code_length);
	     if obj_off = cobol_$non_source_offset
	     then do;

		     call ioa_$ioa_stream (output_switch, "^/^a^/", "ADDITIONAL CODE");
		     text_off = last_word_off;

		end;
	     else do;

		     do while (obj_off = label_off);

			if proc_def.type = 18
			then do;

				if ^proc_def.section_name
				then call ioa_$ioa_stream (output_switch, "^a.",
					substr (proc_def.name, 1, proc_def.name_size));
				else call ioa_$ioa_stream (output_switch, "^a section.",
					substr (proc_def.name, 1, proc_def.name_size));

			     end;

			label_count = label_count + 1;

			if label_count <= fixed_common.proc_counter
			then do;

				token_type = 0;

				do while (token_type ^= 18 & len > 0);

				     len_ptr = addrel (proc_def_ptr, divide (len + 11, 8, 17, 0) * 2);
				     proc_def_ptr = len_ptr;
				     token_type = proc_def.type;

				end;

				if len > 0
				then label_off = cobol_$tag_table_ptr -> tag_addr (proc_def.proc_num);

			     end;
			else label_off = -1;
		     end;

		     do while (obj_off = text_off);

			eln_index = line_no (source_stmt_count);

			if eln_index > 0
			then do;
				file_num = eln_tab.fno (eln_index);
				line_num = eln_tab.lno (eln_index);

				if file_num = prev_file_num & line_num = prev_line_num
				then stmt_no = stmt_no + 1;
				else do;

					stmt_no = 1;
					prev_file_num = file_num;
					prev_line_num = line_num;

				     end;

				s1 = mod (stmt_no, 10) + 48;
				fl_length = 0;

				if file_num > 0
				then do;

					number = file_num;

					do i = 2 to 1 by -1 while (number > 0);

					     s2 = mod (number, 10) + 48;
					     substr (char7, i, 1) = substr (c2, 4, 1);
					     number = divide (number, 10, 35, 0);
					     j = i;

					end;

					fl_length = 3 - j;
					char9 = substr (char7, j, fl_length);
					fl_length = fl_length + 1;
					substr (char9, fl_length, 1) = "-";

				     end;

				number = line_num;

				do i = 7 to 1 by -1 while (number > 0);

				     s2 = mod (number, 10) + 48;
				     substr (char7, i, 1) = substr (c2, 4, 1);
				     number = divide (number, 10, 35, 0);
				     j = i;

				end;

				substr (char9, fl_length + 1, 8 - j) = substr (char7, j, 8 - j);
				fl_length = fl_length + 8 - j;
				print_line =
				     "STATEMENT " || substr (c1, 4, 1) || " ON LINE "
				     || substr (char9, 1, fl_length);

				call ioa_$ioa_stream (output_switch, "^7-^a", print_line);

				if file_num = 0
				then if stmt_no = 1
				     then do;	/* Print the actual source line. */

					     if source_stmt_count = 1
					     then do;
						     print_line = "PROCEDURE DIVISION.";
						     call ioa_$ioa_stream (output_switch, "^a", print_line);

						end;
					     else do;


/*[4.1-1]*/
						     k1 = statement_info.start (eln_index);
						     k2 = 0;
						     k3 = map_data_table.line_no (source_stmt_count + 1);
						     k5 = k3 - eln_index;

						     if k5 > 1
						     then do;

							     do k4 = 1 to k5
								while (file_num
								= eln_tab.fno (eln_index + k4));
								k2 = k2
								     + statement_info
								     .length (eln_index + k4 - 1) + 1;
							     end;
							end;

						     else k2 = statement_info.length (eln_index) + 1;
						     print_line = substr (source, k1, k2);

						     call ioa_$ioa_stream (output_switch, "^4x^a", print_line)
							;


						end;
					end;
			     end;

			if source_stmt_count < no_source_stmts
			then do;

				source_stmt_count = source_stmt_count + 1;
				text_off = text_addr (source_stmt_count);

			     end;
			else text_off = cobol_$non_source_offset;
		     end;
		end;

	     instr_word_num = text_off - obj_off;

/*[4.4-1]*/
	     call cobol_display_text (code_ptr, instr_word_num, output_switch);
	     call ioa_$ioa_stream (output_switch, "");

	     code_ptr = addrel (code_ptr, instr_word_num);
	     word_count = word_count + instr_word_num;
	     obj_off = obj_off + instr_word_num;

	end;

	call ioa_$ioa_stream (output_switch, "^/^a", "END OBJECT CODE");

	call cleanup_proc;
	revert cleanup;

cleanup_proc:
     proc;

	if list_iocb_ptr ^= null ()
	then do;

		call iox_$close (list_iocb_ptr, mcode);
		call iox_$detach_iocb (list_iocb_ptr, mcode);

		list_iocb_ptr = null ();

	     end;

     end cleanup_proc;


%include cobol_;
%include cobol_eln_table;

%include cobol_fixed_common;

%include cobol_ext_;

%include cobol_type7;

     end cobol_make_list;
