/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_ioop_util.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 12/17/80 by FCH, [4.4-1], dimension of array changed from 3 to 1 to prevent severity 3 error */
/* Modified on 04/28/77 by GM to implement LOCK entry */
/* Modified on 11/13/76 by GM to fix LINAGE problems. */
/* Modified on 10/2/76 by GM to  fix bug on LINAGE. */
/* Modified on 7/28/76 by George Mercuri to add set_x5 entry */
/* Modified on 7/9/76 by George Mercuri to add set_icode entry */
/* Modified on 6/14/76 by George Mercuri for change to access of stack offset in open_gen.*/
/* Modified on 6/3/76 by George Mercuri for multics_mode code.*/
/* Modified on 5/24/76 by George Mercuri for addition of lda generation. */
/* Modified on 5/18/76 by George Mercuri for error interface. */
/* Modified on 5/10/76 by George Mercuri for change to error handling. */
/* Modified on 5/5/76 by George Mercuri for  error handling techniques. */
/* Created on 4/29/76 by George Mercuri for the call to DISPLAY operators. */
/* format: style3 */
cobol_ioop_util:
     proc (stoff);

disp:
     entry (stoff);

dcl	tag_off		fixed bin;
dcl	aloff		fixed bin;
dcl	stoff		fixed bin;
dcl	temp		fixed bin;
dcl	cobol_mode	fixed bin;
dcl	multics_mode	fixed bin;
dcl	ft_ptr		ptr;

/*[4.4-1]*/
dcl	disp_instr	(1) bit (36) static init ("110000000000000000011111001101000000"b);
						/* epp5 pr6|<stoff> */
dcl	disp_reloc	(2) bit (5) aligned static init (""b, ""b);
dcl	stz_instr		(1) bit (36) static init ("110000000000101100100101000001000000"b);
						/* stz pr6|54 */
dcl	ldaldx5_instr	(2) bit (36) static init ("000000000000000000010011101000000111"b,
						/* lda <ioname_len>,dl	*/
			"000000000000000000010010101000000011"b);
						/* ldx5 <stack_offset>,dl	*/
dcl	fsb_open_mode_instr (3) bit (36) static init ("000000000000000000010011101000000111"b,
						/* lda	[cobol_mode],dl	*/
			"000000000000000000010011110000000011"b,
						/* ldq	[optional/opened/how,du] */
			"000000000000000000111010101000000111"b);
						/* lxl5	[multics_code],dl	*/
dcl	lda_instr		(1) bit (36) static init ("000000000000000000010011101000000111"b);
						/* lda <cobol_mode>,dl	*/
dcl	lda_du_instr	(1) bit (36) static init ("000000000000000000010011101000000011"b);
						/* lda offset,du	*/
dcl	tra_instr		(1) bit (36) static init ("000000000000000000111001000000000100"b);
						/* tra ioerror.ns_tag,ic	*/
dcl	set_icode_instr	(1) bit (36) static init ("110000000000101001000101100001000000"b);
						/* aos	pr6|icode(51) 	*/
dcl	set_value_instr	(2) bit (36) static init ("000000000000000000010011101000000111"b,
						/* lda	advancing_value,dl	*/
			"110000000000101111111101101001000000"b);
						/* sta	pr6|57	*/
dcl	set_var_adv_instr	(1) bit (36) static init ("110000000000101111111101110001000000"b);
						/* stq	pr6|57	*/
dcl	set_fsb_instr	(2) bit (36) static init ("000000000000000000010011101000000111"b,
						/* lda 	linage_type,dl	*/
			"001000000000000000111101101001000000"b);
						/* sta 	pr1|fsb_offset	*/
dcl	set_x5_instr	(1) bit (36) static init ("000000000000000000010010101000000011"b);
						/* ldx5	io_error_no,dl	*/
dcl	bypass_reset	(2) bit (36) static init ("000000000000000001001000011000000011"b,
						/* cmpx3 1,du	*/
			"000000000000000000110000001000000100"b);
						/* tra <skip_tag>,ic 	*/
dcl	ldalock		(2) bit (36) static init ("000000000000000000010011101000000100"b,
						/* lda 0,ic	*/
			"001000000001011010010101101001000000"b);
						/* orsa pr1|90	*/


dcl	cobol_emit	entry (ptr, ptr, fixed bin);


/***************************************/
start:
	substr (disp_instr (1), 4, 15) = substr (unspec (stoff), 22, 15);

	call cobol_emit (addr (disp_instr), addr (disp_reloc), 1);

	return;


/***************************************/

set_stz:
     entry;


	call cobol_emit (addr (stz_instr), null (), 1);

	return;


/****************************************/

ldaldx5:
     entry (ioname_len, aloff);

dcl	ioname_len	fixed bin;

	substr (ldaldx5_instr (1), 4, 15) = substr (unspec (ioname_len), 22, 15);
	substr (ldaldx5_instr (2), 4, 15) = substr (unspec (aloff), 22, 15);

	call cobol_emit (addr (ldaldx5_instr), null (), 2);

	return;



/****************************************/

open_clean_up:
     entry (ft_ptr, cobol_mode, multics_mode);

	substr (fsb_open_mode_instr (1), 1, 18) = substr (unspec (cobol_mode), 19, 18);
	if file_table.optional & file_table.external
	then temp = 81920;
	else if file_table.optional & ^file_table.external
	then temp = 98304;
	else if file_table.external
	then temp = 32768;
	else temp = 49152;

	substr (fsb_open_mode_instr (2), 1, 18) = substr (unspec (temp), 19, 18);
	substr (fsb_open_mode_instr (3), 1, 18) = substr (unspec (multics_mode), 19, 18);
	call cobol_emit (addr (fsb_open_mode_instr), null (), 3);

	return;


/****************************************/

lda:
     entry (cobol_mode);

	substr (lda_instr (1), 4, 15) = substr (unspec (cobol_mode), 22, 15);

	call cobol_emit (addr (lda_instr), null (), 1);

	return;


/****************************************/
lda_du:
     entry (stoff);

	substr (lda_du_instr (1), 1, 18) = substr (unspec (stoff), 19, 18);
	call cobol_emit (addr (lda_du_instr), null (), 1);
	return;



/****************************************/

tra:
     entry (tag_off);

	substr (tra_instr (1), 1, 18) = substr (unspec (tag_off), 19, 18);

	call cobol_emit (addr (tra_instr), null (), 1);

	return;



/****************************************/

set_icode:
     entry;

	call cobol_emit (addr (set_icode_instr), null (), 1);
	return;


/****************************************/

set_value:
     entry (advancing_value);

dcl	advancing_value	fixed bin;

	substr (set_value_instr (1), 1, 18) = substr (unspec (advancing_value), 19, 18);
	call cobol_emit (addr (set_value_instr), null (), 2);
	return;



/****************************************/

set_fsb:
     entry (linage_type, fsb_offset);


dcl	linage_type	fixed bin;
dcl	fsb_offset	fixed bin;

	substr (set_fsb_instr (1), 1, 18) = substr (unspec (linage_type), 19, 18);
	substr (set_fsb_instr (2), 4, 15) = substr (unspec (fsb_offset), 22, 15);
	call cobol_emit (addr (set_fsb_instr), null (), 2);
	return;



/****************************************/

set_var_adv:
     entry;

	call cobol_emit (addr (set_var_adv_instr), null (), 1);
	return;





/****************************************/

set_x5:
     entry (io_error_no);

dcl	io_error_no	fixed bin;

	substr (set_x5_instr (1), 1, 18) = substr (unspec (io_error_no), 19, 18);
	call cobol_emit (addr (set_x5_instr), null (), 1);
	return;



/***************************************/

bypass_reset:
     entry (skip_tag);

dcl	skip_tag		fixed bin;
dcl	cobol_make_tagref	entry (fixed bin, fixed bin, ptr);

	call cobol_emit (addr (bypass_reset), null (), 2);
	call cobol_make_tagref (skip_tag, cobol_$text_wd_off - 1, null ());
	return;


/***************************************/

set_lock:
     entry;

dcl	lock_bit		bit (36) static init ("000010000000000000000000000000000000"b);
dcl	lock_char		char (4) based (addr (lock_bit));
dcl	cobol_pool	entry (char (*), fixed bin, fixed bin);
dcl	con_off		fixed bin;



	call cobol_pool (lock_char, 1, con_off);
	temp = -cobol_$text_wd_off - con_off;
	substr (ldalock (1), 1, 18) = substr (unspec (temp), 19, 18);
	call cobol_emit (addr (ldalock), null (), 2);
	return;


/****** Declaration for Builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/***** End of declaration dor builtin function 	*****/

%include cobol_file_table;
%include cobol_;
     end cobol_ioop_util;
