/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_mst.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 09/07/83 by FCH, [5.2-1], fix errors in runtime symbol table, phx15769(BUG555) */
/* Modified on 10/27/82 by FCH, [5.1-2], get last line num from fix comm, BUG543(phx13643) */
/* Modified on 11/24/81 by FCH, [5.1-1], statement table was a shambles, BUG519(phx11818) */
/* Modified on 05/16/80 by FCH, [4.2-1], decl for tag_addr corrected */
/* modified on 10/20/79 by PRP [4.1-2], communicate data types to symbol table */
/* Modified on 10/20/79 by PRP [4.1-1], fix statement map */
/* Modified on 06/28/78 by RAL [3.0-1] Allow for multiple lines for each statement */
/* Modified on 03/01/78 by Richard A. Barnes to thread runtime_symbol.next in negative direction only
	and to use a hash table to eliminate duplicate runtime tokens */
/* Modified since Version 3.0 */





/* format: style3 */
cobol_mst:
     proc;

/* Builds Runtime Symbol Table for interfacing with debug.
	   Called when "-table" option specified.
	   Assumptions:

		1)	sym_base_ptr points to start of Symbol_Block_Header.
		2)	sym_wd_off is offset of 1st word after PL1_Symbol_Block. */

/* Initialization */

	sbh_ptr = sym_base_ptr;			/* get ptr to Symbol_Block_Header */
	sbh_off = fixed (rel (sbh_ptr), 18);
	psb_off = fixed (sbh_ptr -> symbol_block_header.area_relp, 18);
	psb_ptr = addrel (sbh_ptr, psb_off);		/* get ptr to PL1_Symbol_Block */
	psb_ptr -> pl1_symbol_block.flags.table = "1"b;
	token_count = 0;
	label_count = 0;
	starting_wd_off = sym_wd_off;			/* save offset of 1st word we will generate */
	sect_off = 0;
	translate_it = "0"b;
	hash_table (*) = 0;

/* Build Root Block */

	root_off = sym_wd_off;
	psb_ptr -> pl1_symbol_block.root = bit (root_off, 18);
	root_blk_ptr = gen_runtime_block (0);

/* Generate token node and symbol node for prog name */

	name_string = fixed_common.prog_name;
	name_length = index (name_string, " ") - 1;

	call gen_runtime_nodes;

	root_blk_ptr -> runtime_block.start = bit (fixed (symb_off - root_off, 18), 18);
	ext_ent_ptr = s_ptr;			/* save ptr to symbol of program name */

	s_ptr -> runtime_symbol.type = "011010"b;	/* external entry constant */
	s_ptr -> runtime_symbol.father = bit (fixed (262144 + root_off - symb_off, 18), 18);
	s_ptr -> runtime_symbol.address.location = bit (fixed (cobol_$constant_offset + 1, 18), 18);
	s_ptr -> runtime_symbol.address.class = "1100"b;	/* text reference */

	sym_wd_off = sym_wd_off + symbol_size;

	if name_length > 1
	then do;					/* fill in chain of root block to point to procname */

		token_size = 16;
		j = 4;

		do while (name_length < token_size);

		     j = j - 1;
		     token_size = divide (token_size, 2, 18, 0);
		end;

		root_blk_ptr -> runtime_block.chain (j) = root_blk_ptr -> runtime_block.start;
	     end;

/* Build Main Block */

	main_off = sym_wd_off;
	text_ptr = cobol_$text_base_ptr;
	block_relp = bit (main_off, 18);
	main_blk_ptr = gen_runtime_block (root_off);

/* Build "COBOL" token and symbol - this is data_ptr on which all data is based. */

	name_string = "COBOL";
	name_length = 5;

	call gen_runtime_nodes;

	data_ptr_off = symb_off;
	s_ptr -> runtime_symbol.location = "000000000000001000"b;
						/* 8 bytes */
	s_ptr -> runtime_symbol.type = "001101"b;	/* pointer */
	s_ptr -> runtime_symbol.class = "0100"b;	/* internal static */
	s_ptr -> runtime_symbol.father = bit (fixed (262144 + main_off - data_ptr_off, 18), 18);

	sym_wd_off = sym_wd_off + symbol_size;

/* Process Name-Table */

	translate_it = "1"b;
	len_ptr = pointer (cobol_ntfp, 8);

	do while (len > 0);

	     p = len_ptr;
	     go to token_type (p -> name_table_entry.type);

token_type (7):					/* PROCEDURE DEFINITION (Label) */
token_type (18):
	     proc_def_ptr = p;

	     if label_count < fixed_common.proc_counter
	     then do;				/* do not process compiler generated labels */

		     name_string = proc_def_ptr -> proc_def.name;
		     name_length = proc_def_ptr -> proc_def.name_size;

		     call gen_runtime_nodes;

		     s_ptr -> runtime_symbol.simple = "1"b;
		     symbol_size = 4;		/* no "size" field for labels */

		     tag_loc = cobol_$tag_table_ptr -> tag_addr (proc_def.proc_num);

		     do while (tag_loc < 0);

			tag_loc = cobol_$tag_table_ptr -> tag_addr (-tag_loc);
		     end;

		     if tag_loc = 0
		     then do;			/* ERROR - undefined label */

			     call ioa_ ("Procedure Definition ^a is undefined", proc_def.name);
			     call ioa_ ("and will not appear in the Runtime Symbol Table");

			     token_count = token_count - 1;

			end;
		     else do;

			     s_ptr -> runtime_symbol.location =
				bit (fixed (tag_loc + cobol_$constant_offset, 18), 18);

			     if proc_def_ptr -> proc_def.section_name
			     then do;

				     s_ptr -> runtime_symbol.level = "000001"b;
				     s_ptr -> runtime_symbol.father =
					bit (fixed (262144 + main_off - symb_off, 18), 18);

				     sect_off = symb_off;
				     sect_ptr = s_ptr;
				     prev_p = null ();

				end;
			     else if sect_off = 0
			     then s_ptr -> runtime_symbol.father =
				     bit (fixed (262144 + main_off - symb_off, 18), 18);
			     else do;

				     s_ptr -> runtime_symbol.level = "000010"b;
				     s_ptr -> runtime_symbol.father =
					bit (fixed (262144 + sect_off - symb_off, 18), 18);

				     if prev_p = null ()
				     then sect_ptr -> runtime_symbol.son =
					     bit (fixed (symb_off - sect_off, 18), 18);
				     else prev_p -> runtime_symbol.brother =
					     bit (fixed (symb_off - prev_poff, 18), 18);

				     prev_p = s_ptr;

				     prev_poff = symb_off;

				end;

			     s_ptr -> runtime_symbol.type = "011000"b;
						/* label constant */
			     s_ptr -> runtime_symbol.class = "1100"b;
						/* text-reference */

			     sym_wd_off = sym_wd_off + symbol_size;

			end;

		     label_count = label_count + 1;

		end;

	     go to token_type (0);

token_type (9):					/* data-name */
	     dn_ptr = p;				/* establish data-name ptr */
	     name_string = dn_ptr -> data_name.name;

	     if name_string = "SYSTEM_STATUS" | name_string = "TALLY"
	     then go to token_type (0);

	     name_length = dn_ptr -> data_name.name_size;

	     call gen_runtime_nodes;

	     symbol_size = symbol_size + 1;		/* add 1 for offset field */

	     if dn_ptr -> data_name.display | dn_ptr -> data_name.non_elementary
	     then do;				/* non_elementary = structure - make char string so full structure can be printed */

/* [4.1-2] */
		     if data_name.numeric | data_name.numeric_edited
		     then do;

/*[5.2-1]*/
			     if data_name.numeric	/*[5.2-1]*/
			     then do;


				     if data_name.sign_type = "000"b
				     then s_ptr -> runtime_symbol.type = "100011"b;
				     else if data_name.sign_type = "100"b
				     then s_ptr -> runtime_symbol.type = "001001"b;
				     else if data_name.sign_type = "011"b
				     then s_ptr -> runtime_symbol.type = "100100"b;
				     else if data_name.sign_type = "010"b
				     then s_ptr -> runtime_symbol.type = "011101"b;
				     else if data_name.sign_type = "001"b
				     then s_ptr -> runtime_symbol.type = "011110"b;
				     else /* do nothing */
					;

/*[5.2-1]*/
				end;		/*[5.2-1]*/
			     else s_ptr -> runtime_symbol.type = "010101"b;

			     s_ptr -> runtime_symbol.size = data_name.places_left + data_name.places_right;

			     temp_scale = data_name.places_right;
			     s_ptr -> runtime_symbol.scale = unspec (temp_scale);

			end;

		     else do;

			     s_ptr -> runtime_symbol.type = "010101"b;
			     s_ptr -> runtime_symbol.size = dn_ptr -> data_name.item_length;

			end;

/*[5.2-1]*/
		     s_ptr -> runtime_symbol.aligned = "0"b;
						/*[5.2-1]*/
		     s_ptr -> runtime_symbol.packed = "1"b;

		     s_ptr -> runtime_symbol.offset = dn_ptr -> data_name.offset;

		end;
	     else if dn_ptr -> data_name.usage_index
	     then do;

		     s_ptr -> runtime_symbol.aligned = "0"b;
		     s_ptr -> runtime_symbol.packed = "1"b;
		     s_ptr -> runtime_symbol.type = "000001"b;
						/* fixed bin */
		     s_ptr -> runtime_symbol.size = 17; /* precision = 17 */
		     s_ptr -> runtime_symbol.offset = dn_ptr -> data_name.offset + 4;

		end;

/*	/*  next two blocks are redundant in that both support comp-5 and comp-8.
/*	    With the current arrangement, comp-8 is described as packed decimal
/*	    and comp-5 as bit string.  For both bitstring, eliminate the following block;
/*	    for both packed decimal, change following test to ascii_packed_dec
/*	    instead of ascii_packed_dec_h and elminate second block;  similarly
/*	    change array_units test.		*/
/*		else	if dn_ptr->data_name.ascii_packed_dec_h  /* COMP-8 */
/*			then do;
/*				s_ptr->runtime_symbol.aligned = "0"b;
/*				s_ptr->runtime_symbol.packed = "1"b;
/*				s_ptr->runtime_symbol.units = "11"b;		/* half */
/*				s_ptr->runtime_symbol.type = "011111"b;		/* packed decimal */
/*				packed_dec_size = dn_ptr->data_name.places_left
/*						+ dn_ptr->data_name.places_right;
/*				if dn_ptr->data_name.item_signed
/*				then packed_dec_size = packed_dec_size + 1;
/*				temp_off = 9*data_name.offset+1;
/*				if data_name.ascii_packed_dec_h then do;  /* COMP-8 */
/*					if data_name.bit_offset ^= ""b then do;
/*					s_ptr->runtime_symbol.offset = temp_off+4;
/*					s_ptr->runtime_symbol.size = packed_dec_size;
/*					end;
/*					else do;
/*					s_ptr->runtime_symbol.offset = temp_off;
/*					s_ptr->runtime_symbol.size = packed_dec_size;
/*					end;
/*				end;
/*				else do;		/* COMP-5 */
/*					if temp_mod = 0 then do;
/*					s_ptr->runtime_symbol.offset = temp_off;
/*					s_ptr->runtime_symbol.size = packed_dec_size;
/*				    end;
/*					else do;		/* odd length */
/*					s_ptr->runtime_symbol.offset = temp_off+4;
/*					s_ptr->runtime_symbol.size = packed_dec_size;
/*				    end;
/*				end;
/*			    end;
/*		else	if dn_ptr->data_name.ascii_packed_dec  /* COMP-5 */
/*			then do;
/*				s_ptr->runtime_symbol.aligned = "0"b;
/*				s_ptr->runtime_symbol.packed = "1"b;
/*				s_ptr->runtime_symbol.units = "01"b;		/* bits */
/*				s_ptr->runtime_symbol.type = "010011"b;		/* bit string */
/*				packed_dec_size = dn_ptr->data_name.places_left
/*						+ dn_ptr->data_name.places_right;
/*				if dn_ptr->data_name.item_signed
/*				then packed_dec_size = packed_dec_size + 1;
/*				temp_off = 9*data_name.offset+1;
/*				temp_size = 9*divide(packed_dec_size,2,35,0);
/*				temp_mod = mod(packed_dec_size,2);
/*				if data_name.ascii_packed_dec_h then do;  /* COMP-8 */
/*					temp_size = temp_size+temp_mod*4;
/*					if data_name.bit_offset ^= ""b then do;
/*					s_ptr->runtime_symbol.offset = temp_off+4;
/*					s_ptr->runtime_symbol.size = temp_size;
/*					end;
/*					else do;
/*					s_ptr->runtime_symbol.offset = temp_off;
/*					if temp_mod = 0 then s_ptr->runtime_symbol.size = temp_size-1;
/*					else s_ptr->runtime_symbol.size = temp_size;
/*					end;
/*				end;
/*				else do;		/* COMP-5 */
/*					if temp_mod = 0 then do;
/*					s_ptr->runtime_symbol.offset = temp_off;
/*					s_ptr->runtime_symbol.size = temp_size-1;
/*				    end;
/*					else do;		/* odd length */
/*					s_ptr->runtime_symbol.offset = temp_off+4;
/*					s_ptr->runtime_symbol.size = temp_size+4;
/*				    end;
/*				end;
/*			    end;
/**/
	     else if dn_ptr -> data_name.ascii_packed_dec
	     then do;				/* packed decimal */

		     temp_scale = data_name.places_right;
		     s_ptr -> runtime_symbol.scale = unspec (temp_scale);

		     s_ptr -> runtime_symbol.aligned = "0"b;
		     s_ptr -> runtime_symbol.packed = "1"b;
		     s_ptr -> runtime_symbol.use_digit = "1"b;
		     s_ptr -> runtime_symbol.units = "11"b;

		     if data_name.item_signed
		     then do;

			     if data_name.ascii_packed_dec_h
						/*[5.2-1]*/
			     then if dn_ptr -> data_name.sync
						/*[5.2-1]*/
				then s_ptr -> runtime_symbol.type = "101011"b;
						/* 43 */
						/*[5.2-1]*/
				else s_ptr -> runtime_symbol.type = "101001"b;
						/* 41 */
			     else s_ptr -> runtime_symbol.type = "100111"b;

			end;
		     else if data_name.ascii_packed_dec_h
						/*[5.2-1]*/
		     then if dn_ptr -> data_name.sync	/*[5.2-1]*/
			then s_ptr -> runtime_symbol.type = "101000"b;
						/* 40 */
						/*[5.21]*/
			else s_ptr -> runtime_symbol.type = "100110"b;
						/* 38 */
		     else s_ptr -> runtime_symbol.type = "101000"b;
						/* New data type 40*/

		     s_ptr -> runtime_symbol.size = data_name.places_left + data_name.places_right;
		     s_ptr -> runtime_symbol.offset = 2 * data_name.offset;
						/* in half-bytes */

		     if ^data_name.ascii_packed_dec_h
		     then do;			/* COMP-5 */

			     if mod (s_ptr -> runtime_symbol.size, 2) = 1
			     then if ^data_name.item_signed
				then s_ptr -> runtime_symbol.offset = s_ptr -> runtime_symbol.offset + 1;
				else ;
			     else if data_name.item_signed
			     then s_ptr -> runtime_symbol.offset = s_ptr -> runtime_symbol.offset + 1;

			end;
		     else if data_name.bit_offset ^= ""b
		     then s_ptr -> runtime_symbol.offset = s_ptr -> runtime_symbol.offset + 1;
		end;
	     else if dn_ptr -> data_name.bin_18
	     then do;

		     s_ptr -> runtime_symbol.aligned = "0"b;
						/*[5.2-1]*/
		     if dn_ptr -> data_name.sync	/*[5.2-1]*/
		     then s_ptr -> runtime_symbol.packed = "0"b;
						/*[5.2-1]*/
		     else s_ptr -> runtime_symbol.packed = "1"b;
		     s_ptr -> runtime_symbol.type = "000001"b;
						/* fixed bin */
		     s_ptr -> runtime_symbol.size = 17; /* precision = 17 */
		     s_ptr -> runtime_symbol.offset = dn_ptr -> data_name.offset;

		end;
	     else if dn_ptr -> data_name.bin_36
	     then do;

		     s_ptr -> runtime_symbol.aligned = "1"b;
		     s_ptr -> runtime_symbol.packed = "0"b;
		     s_ptr -> runtime_symbol.type = "000001"b;
						/* fixed bin */
		     s_ptr -> runtime_symbol.size = 35; /* precision = 35 */
		     s_ptr -> runtime_symbol.offset = dn_ptr -> data_name.offset;

		end;

	     if dn_ptr -> data_name.working_storage | dn_ptr -> data_name.file_section
		| dn_ptr -> data_name.communication_section
						/* 10/01/77 */
	     then do;

		     s_ptr -> runtime_symbol.class = "0011"b;
						/* based */
		     s_ptr -> runtime_symbol.location = bit (fixed (262144 + data_ptr_off - symb_off, 18), 18);

		end;
	     else if dn_ptr -> data_name.constant_section
	     then do;

		     s_ptr -> runtime_symbol.class = "1100"b;
						/* text reference */
		     s_ptr -> runtime_symbol.location =
			bit (fixed (cobol_$constant_offset - divide (dn_ptr -> data_name.offset + 3, 4, 18, 0), 18),
			18);
		     s_ptr -> runtime_symbol.offset = mod (dn_ptr -> data_name.offset, 4);

		end;
	     else if dn_ptr -> data_name.linkage_section
	     then do;				/* parameter */

		     s_ptr -> runtime_symbol.class = "1001"b;
						/* parameter */
		     s_ptr -> runtime_symbol.location = bit (fixed (dn_ptr -> data_name.linkage, 18), 18);

		end;

	     if dn_ptr -> data_name.level_77 | dn_ptr -> data_name.level = 66
		| (dn_ptr -> data_name.level_01 & dn_ptr -> data_name.elementary)
	     then s_ptr -> runtime_symbol.level = (6)"0"b;
	     else s_ptr -> runtime_symbol.level = bit (fixed (dn_ptr -> data_name.level, 6), 6);

	     if fixed (s_ptr -> runtime_symbol.level, 7) <= 1
	     then s_ptr -> runtime_symbol.father = bit (fixed (262144 + main_off - symb_off, 18), 18);

	     if dn_ptr -> data_name.occurs_ptr = 0
	     then s_ptr -> runtime_symbol.ndims = "0"b;
	     else do;				/* process array info */

		     occurs_ptr = addrel (dn_ptr, divide (dn_ptr -> data_name.occurs_ptr, 4, 15, 0));

		     s_ptr -> runtime_symbol.ndims = bit (fixed (occurs_ptr -> occurs.dimensions, 6), 6);
		     s_ptr -> runtime_symbol.virtual_org = 0;

		     do j = 1 to occurs_ptr -> occurs.dimensions;

			s_ptr -> runtime_symbol.bounds.lower (j) = max (occurs_ptr -> occurs.level.min (j), 1);
			s_ptr -> runtime_symbol.bounds.upper (j) = occurs_ptr -> occurs.level.max (j);

			if dn_ptr -> data_name.ascii_packed_dec
			then do;			/* packed decimal */

				s_ptr -> runtime_symbol.bounds.multiplier (j) =
				     occurs_ptr -> occurs.level.struc_length (j);
				s_ptr -> runtime_symbol.array_units = s_ptr -> runtime_symbol.units;
			     end;
			else s_ptr -> runtime_symbol.bounds.multiplier (j) =
				divide (occurs_ptr -> occurs.level.struc_length (j) + 1, 2, 35, 0);

			s_ptr -> runtime_symbol.virtual_org =
			     s_ptr -> runtime_symbol.virtual_org + s_ptr -> runtime_symbol.bounds.multiplier (j);
		     end;

		     symbol_size = symbol_size + 1 + 3 * (occurs_ptr -> occurs.dimensions);

		end;

	     if dn_ptr -> data_name.non_elementary | (dn_ptr -> data_name.level > 1 & dn_ptr -> data_name.level <= 49)
	     then do;				/* structure or structure-member */

/* For each structure or structure-member, we will set the
				   father,son and brother fields of the runtime_symbol node. */

		     if dn_ptr -> data_name.level_01
		     then do;			/* structure */

			     prev_s = s_ptr;
			     prev_level = 1;

			end;

		     else do;			/* structure-member */

/* Backup chain to prev brother if level < prev_level */

			     do while (fixed (s_ptr -> runtime_symbol.level, 17) < prev_level);

				prev_soff = prev_soff + fixed (prev_s -> runtime_symbol.father, 18) - 262144;
				prev_s = addrel (prev_s, prev_s -> runtime_symbol.father);
				prev_level = fixed (prev_s -> runtime_symbol.level, 18);
			     end;

			     if fixed (s_ptr -> runtime_symbol.level, 17) > prev_level
			     then do;		/* processing a son */

				     prev_s -> runtime_symbol.son = bit (fixed (symb_off - prev_soff, 18), 18);
				     s_ptr -> runtime_symbol.father =
					bit (fixed (262144 + prev_soff - symb_off, 18), 18);
				     prev_level = fixed (s_ptr -> runtime_symbol.level, 18);

				end;
			     else do;		/* level = prev_level, processing a brother */

				     prev_s -> runtime_symbol.brother =
					bit (fixed (symb_off - prev_soff, 18), 18);
				     s_ptr -> runtime_symbol.father =
					bit (
					fixed (262144 + fixed (prev_s -> runtime_symbol.father, 18)
					+ prev_soff - symb_off, 18), 18);

				end;

			     prev_s = s_ptr;

			end;

		     prev_soff = symb_off;

		end;

	     sym_wd_off = sym_wd_off + symbol_size;

	     go to token_type (0);

token_type (10):					/* Index-Name */
	     ind_ptr = p;
	     name_string = ind_ptr -> index_name.name;
	     name_length = ind_ptr -> index_name.name_size;

	     call gen_runtime_nodes;

	     symbol_size = symbol_size + 1;
	     s_ptr -> runtime_symbol.offset = ind_ptr -> index_name.offset + 4;
						/* use ocur. no. only */
	     s_ptr -> runtime_symbol.class = "0011"b;	/* based */
	     s_ptr -> runtime_symbol.type = "000001"b;	/* fixed bin */
	     s_ptr -> runtime_symbol.size = 35;		/* precision = 35 */
	     s_ptr -> runtime_symbol.location = bit (fixed (262144 + data_ptr_off - symb_off, 18), 18);
	     s_ptr -> runtime_symbol.father = bit (fixed (262144 + main_off - symb_off, 18), 18);
	     sym_wd_off = sym_wd_off + symbol_size;

	     go to token_type (0);

token_type (0):
token_type (1):
token_type (2):
token_type (3):
token_type (4):
token_type (5):
token_type (6):
token_type (8):
token_type (11):
token_type (12):
token_type (13):
token_type (14):
token_type (15):
token_type (16):
token_type (17):
token_type (19):
token_type (20):
token_type (40):
	     len_ptr = addrel (p, divide (len + 11, 8, 35, 0) * 2);

	end;

/* Sort tokens alphabeticly by size and form token and symbol chains for blocks */


	call sort_tokens;

	first = 1;
	token_size = 2;
	finished = "0"b;
	prev_s = null;

	do i = 0 to 5 while (^finished);

	     prev_t = null ();

	     if i < 5
	     then first_symbol = "1"b;

	     do j = first to token_count while (fixed (token_list (j) -> runtime_token.size, 9) < token_size);

		t_ptr = token_list (j);
		t_off = fixed (rel (t_ptr), 18) - sbh_off;

		if prev_t = null ()
		then do;				/* first token of this size...set block.token to point to it */


			next_off = t_off - main_off;

			if next_off > 0
			then main_blk_ptr -> runtime_block.token (i) = bit (next_off, 18);
			else main_blk_ptr -> runtime_block.token (i) = bit (fixed (262144 + next_off, 18), 18);

			root_blk_ptr -> runtime_block.token (i) = bit (fixed (t_off - root_off, 18), 18);

		     end;

		else do;				/* set token.next of prev token to point to this token */

			next_off = t_off - prev_toff;

			if next_off > 0
			then prev_t -> runtime_token.next = bit (next_off, 18);
			else prev_t -> runtime_token.next = bit (fixed (262144 + next_off, 18), 18);
		     end;

		prev_t = t_ptr;
		prev_toff = t_off;

		s_ptr = t_ptr;
		next_offset = fixed (t_ptr -> runtime_token.dcl, 18);

/* the following loop examines all symbols with the same name */


		do while (next_offset ^= 0);

		     s_ptr = addrel (s_ptr, next_offset);

		     if fixed (s_ptr -> runtime_symbol.level, 7) <= 1 & s_ptr ^= ext_ent_ptr
		     then do;			/* link all level 0 & 1 symbols */

			     symb_off = fixed (rel (s_ptr), 18) - sbh_off;

			     if first_symbol
			     then do;

/* this is the first symbol of this size, so have
				   runtime_block.chain(i) point to this symbol.
				   Also, if this is the very first symbol processed, have
				   runtime_block.start point to the symbol.	*/

				     first_symbol = "0"b;

				     next_off = symb_off - main_off;

				     if main_blk_ptr -> runtime_block.start = "0"b
				     then if next_off > 0
					then main_blk_ptr -> runtime_block.start = bit (next_off, 18);
					else main_blk_ptr -> runtime_block.start =
						bit (fixed (262144 + next_off, 18), 18);

				     if i > 0 & i < 5
				     then do;	/* set main_block.chain to point to this symbol */

					     if next_off > 0
					     then main_blk_ptr -> runtime_block.chain (i) = bit (next_off, 18);
					     else main_blk_ptr -> runtime_block.chain (i) =
						     bit (fixed (262144 + next_off, 18), 18);

					end;
				end;

			     if prev_s ^= null
			     then do;		/* set prev symbol.brother to point to this symbol */

/* chain this level 1 symbol to other level 1 symbols in this block */

				     next_off = symb_off - prev_soff;

				     if next_off > 0
				     then prev_s -> runtime_symbol.brother = bit (next_off, 18);
				     else prev_s -> runtime_symbol.brother =
					     bit (fixed (262144 + next_off, 18), 18);

				end;

			     prev_s = s_ptr;
			     prev_soff = symb_off;

			end;

/* get the next symbol, or exzit the loop */

		     if s_ptr -> runtime_symbol.next
		     then next_offset = fixed (s_ptr -> runtime_symbol.next, 14) - 16384;
		     else next_offset = 0;

		end;

	     end;

	     if prev_t ^= null
	     then prev_t -> runtime_token.next = (18)"0"b;/* finish the list */

	     token_size = 2 * token_size;
	     finished = j > token_count;
	     first = j;
	end;


/* Generate relocation bits for runtime symbol table */

	call cobol_reloc (null (), 2 * (sym_wd_off - starting_wd_off), 4);

/* Build Statement Map */

	psb_ptr -> pl1_symbol_block.flags.map = "1"b;
	psb_ptr -> pl1_symbol_block.map.first = bit (fixed (sym_wd_off, 18), 18);
	root_blk_ptr -> runtime_block.map.first = bit (fixed (sym_wd_off - root_off, 18), 18);
	main_blk_ptr -> runtime_block.map.first = bit (fixed (sym_wd_off - main_off, 18), 18);

	prev_line_num = 0;
	prev_file_num = 0;

/*[5.1-1]*/
	statement_no = 1;

/*[5.1-1]*/
	do i = 1 by 1 to map_data_table.no_source_stmts;

/*[5.1-1]*/
	     if map_data_table.label (i)		/*[5.1-1]*/
	     then do;
		     statement_no = 1;

/*[5.2-1]*/
		     eln_index = map_data_table.line_no (i);
						/*[5.2-1]*/
		     if eln_index > 0
		     then line_num = eln_tab.lno (eln_index);

/*[5.1-1]*/
		     do while (map_data_table.label (i));

/*[5.1-1]*/
			i = i + 1;

/*[5.1-1]*/
		     end;				/*[5.1-1]*/
		end;				/*[5.2-1]*/
	     else do;
		     eln_index = map_data_table.line_no (i);
						/*[5.2-1]*/
		     if eln_index > 0
		     then line_num = eln_tab.lno (eln_index);
						/*[5.2-1]*/
		end;

/*[5.1-1]*/
	     if i <= map_data_table.no_source_stmts	/*[5.2-1]*/
	     then do;				/*eln_index = map_data_table.line_no(i);*/

/*[5.1-1]*/
		     if eln_index > 0		/*[5.1-1]*/
		     then do;

/*[5.2-1]*/
/*line_num = eln_tab.lno(eln_index);*/
/*[5.1-1]*/
			     file_num = eln_tab.fno (eln_index);

/*[5.1-1]*/
			     p = addrel (sym_base_ptr, sym_wd_off);

/*[5.1-1]*/
			     p -> statement_map.location =
				/*[5.1-1]*/
				bit (fixed (map_data_table.text_addr (i) + cobol_$constant_offset, 18), 18);

/*[5.1-1]*/
			     p -> statement_map.file = bit (file_num, 8);
						/*[5.1-1]*/
			     p -> statement_map.line = bit (line_num, 14);
						/*[5.1-1]*/
			     p -> statement_map.statement = bit (statement_no, 5);

/*[5.1-1]*/
			     p -> statement_map.start =
				bit (fixed (statement_info.start (eln_index) + map_data_table.col (i) - 1, 18),
				18);

/*[5.1-1]*/
			     if i = map_data_table.no_source_stmts
						/*[5.1-2]*/
			     then do;
				     span = fixed_common.cobol_cln - eln_index;
						/*[5.1-1]*/
				     next_eln_index = 0;
						/*[5.1-1]*/
				end;		/*[5.1-1]*/
			     else do;
				     next_eln_index = map_data_table.line_no (i + 1);

/*[5.1-1]*/
				     do j = eln_index by 1 to next_eln_index - 1 /*[5.1-1]*/
					while (eln_tab.fno (j) = file_num);
						/*[5.1-1]*/
				     end;

/*[5.1-1]*/
				     span = j - eln_index;
						/*[5.1-1]*/
				end;

/*[5.1-1]*/
			     if span = 0		/*[5.1-1]*/
			     then do;
				     statement_no = statement_no + 1;
						/*[5.1-1]*/
				     new_length = map_data_table.col (i + 1) - map_data_table.col (i);
						/*[5.1-1]*/
				end;		/*[5.1-1]*/
			     else do;
				     statement_no = 1;


/*[5.1-1]*/
				     new_length = statement_info.length (eln_index) - map_data_table.col (i) + 1;

/*[5.1-1]*/
				     if span > 1	/*[5.1-1]*/
				     then do j = eln_index + 1 by 1 to eln_index + span - 1;

/*[5.1-1]*/
					     new_length = new_length + statement_info.length (j) + 1;

/*[5.1-1]*/
					end;

/*[5.1-1]*/
				     if next_eln_index > 0
						/*[5.1-1]*/
				     then if eln_index + span = next_eln_index
						/*[5.1-1]*/
					then if file_num = eln_tab.fno (next_eln_index)
						/*[5.1-1]*/
					     then new_length = new_length + map_data_table.col (i + 1);

/*[5.1-1]*/
				end;

/*[5.1-1]*/
			     p -> statement_map.length = bit (fixed (new_length, 9), 9);

/*[5.1-1]*/
			     call cobol_reloc (addr (stmt_map_reloc_bits), 4, 4);

/*[5.1-1]*/
			     sym_wd_off = sym_wd_off + 2;

/*[5.1-1]*/
			end;

/*[5.1-1]*/
		end;

/*[5.1-1]*/
	end;

	main_blk_ptr -> runtime_block.map.last = bit (fixed (sym_wd_off - main_off, 18), 18);

/* Build dummy last statement-map entry */

	p = addrel (sym_base_ptr, sym_wd_off);
	p -> statement_map.location = bit (fixed (cobol_$non_source_offset + cobol_$constant_offset, 18), 18);
	string (p -> statement_map.source_id) = (27)"1"b;
	string (p -> statement_map.source_info) = (26)"0"b;

	call cobol_reloc (addr (stmt_map_reloc_bits), 4, 4);

	sym_wd_off = sym_wd_off + 2;
	psb_ptr -> pl1_symbol_block.map.last = bit (fixed (sym_wd_off, 18), 18);
	root_blk_ptr -> runtime_block.map.last = bit (fixed (sym_wd_off - root_off, 18), 18);

/* Finish Up */

	sbh_ptr -> symbol_block_header.default_truncate = bit (fixed (sym_wd_off, 18), 18);

	return;

/**/
gen_runtime_block:
     proc (father_off) returns (ptr);

dcl	father_off	fixed bin (18);
dcl	p		ptr;

	p = addrel (sym_base_ptr, sym_wd_off);		/* get ptr for runtime_block area */
	substr (p -> bits, 1, 360) = "0"b;		/* clear runtime_block area */
	p -> runtime_block.flag = "1"b;
	p -> runtime_block.standard = "1"b;
	p -> runtime_block.type = "000011"b;
	p -> runtime_block.father = bit (fixed (262144 + father_off - sym_wd_off, 18), 18);
	p -> runtime_block.header = bit (fixed (262144 - sym_wd_off, 18), 18);

	if father_off ^= 0
	then do;					/* Main Block */

		p -> runtime_block.name = bit (fixed (262144 + name_off - sym_wd_off, 18), 18);
		root_blk_ptr -> runtime_block.son = bit (fixed (sym_wd_off - root_off, 18), 18);
	     end;
	sym_wd_off = sym_wd_off + 10;

	return (p);

     end gen_runtime_block;


gen_runtime_nodes:
     proc;

dcl	found		bit (1) aligned;
dcl	name		char (32) aligned based (addr (name_array));
dcl	name_array	(8) bit (36) aligned;
dcl	tok_offset	fixed bin;
dcl	mask		(3) bit (36) aligned static init ("777000000000"b3, "777777000000"b3, "777777777000"b3);
dcl	hash_index	fixed bin;
dcl	mod_2_sum		bit (36) aligned;
dcl	(j, k)		fixed bin;

/* find or generate runtime token node */

/* copy the name for hashing, translating if necessary */

	if translate_it
	then substr (name, 1, name_length) = translate (substr (name_string, 1, name_length), "_", "-");
	else substr (name, 1, name_length) = substr (name_string, 1, name_length);

/* develop the hash_index */

	if name_length = 0
	then hash_index = 0;

	else if name_length = 1
	then hash_index = binary (unspec (substr (name, 1, 1)) & "177"b3, 9);

	else do;
		mod_2_sum = "0"b;

		j = divide (name_length, 4, 17, 0);
		k = name_length - 4 * j;

		if k ^= 0
		then do;
			j = j + 1;
			name_array (j) = name_array (j) & mask (k);
		     end;

		do i = 1 to j;

		     mod_2_sum = bool (mod_2_sum, name_array (i), "0110"b);
						/* XOR */
		end;

		hash_index = mod (binary (mod_2_sum, 35), dim (hash_table, 1));

	     end;

/* search for the runtime_token */

	tok_offset = hash_table (hash_index);
	found = "0"b;

	do while (^found & tok_offset > 0);

	     t_ptr = addrel (sym_base_ptr, tok_offset);

	     if fixed (t_ptr -> runtime_token.size, 9) = name_length
		& t_ptr -> runtime_token.string = substr (name, 1, name_length)
	     then found = "1"b;
	     else tok_offset = fixed (t_ptr -> runtime_token.next, 18);
	end;

	if found
	then name_off = tok_offset + 1;

	else do;

/* generate the node */

		tok_offset = sym_wd_off;
		t_ptr = addrel (sym_base_ptr, tok_offset);
		token_count = token_count + 1;
		token_list (token_count) = t_ptr;
		name_off = tok_offset + 1;
		token_size = 2 + divide (name_length, 4, 18, 0);
		substr (t_ptr -> bits, 1, 36 * token_size) = "0"b;
						/* clear token */
		t_ptr -> runtime_token.size = bin (name_length, 9);
		t_ptr -> runtime_token.string = substr (name, 1, name_length);
		sym_wd_off = sym_wd_off + token_size;
		t_ptr -> runtime_token.next = bit (hash_table (hash_index), 18);
		hash_table (hash_index) = tok_offset;

	     end;

/* start generating runtime symbol node...node will be completed by caller */

	s_ptr = addrel (sym_base_ptr, sym_wd_off);
	symb_off = sym_wd_off;
	substr (s_ptr -> bits, 1, 180) = simple_symbol;
	s_ptr -> runtime_symbol.simple = ^translate_it;
	s_ptr -> runtime_symbol.name = bit (fixed (262144 + name_off - symb_off, 18), 18);

/* if this token already has a symbol, chain the new symbol to the old one */

	if t_ptr -> runtime_token.dcl
	then s_ptr -> runtime_symbol.next =
		bit (fixed (tok_offset + fixed (t_ptr -> runtime_token.dcl, 18) - symb_off + 16384, 14), 14);

	t_ptr -> runtime_token.dcl = bit (fixed (symb_off - tok_offset, 18), 18);

	symbol_size = 5;

     end gen_runtime_nodes;

sort_tokens:
     proc;

/* This routine sorts the array of ptrs to runtime_tokens. It does a Shell sort alphabetizing
   by size on the basis of the string in the token. */

dcl	(d, i, j, k)	fixed bin;
dcl	(p, p1, p2)	ptr;

	d = token_count;

down:
	d = 2 * divide (d, 4, 15, 0) + 1;

	do i = 1 to token_count - d;

	     k = i + d;
	     p2 = token_list (k);

up:
	     j = k - d;
	     p1 = token_list (j);

	     if p1 -> runtime_token.size > p2 -> runtime_token.size
	     then go to interchange;

	     if p1 -> runtime_token.size < p2 -> runtime_token.size
	     then go to ok;

	     if p1 -> runtime_token.string <= p2 -> runtime_token.string
	     then go to ok;

interchange:
	     p = token_list (j);
	     token_list (j) = token_list (k);
	     token_list (k) = p;

	     if j > d
	     then do;
		     k = j;
		     go to up;
		end;
ok:
	end;

	if d > 1
	then go to down;

     end sort_tokens;



/* temp dcls */
dcl	span		fixed bin;
dcl	temp_scale	fixed bin (7) unal;
dcl	prev_stmt_length	fixed bin;
dcl	(k, next_eln_index, new_length)
			fixed bin;
dcl	(temp_off, temp_size, temp_mod)
			fixed bin;

dcl	p		ptr;
dcl	sbh_ptr		ptr defined (sym_ptr);
dcl	psb_ptr		ptr;
dcl	root_blk_ptr	ptr;
dcl	main_blk_ptr	ptr;
dcl	s_ptr		ptr;
dcl	t_ptr		ptr;
dcl	sect_ptr		ptr;
dcl	prev_p		ptr;
dcl	prev_s		ptr;
dcl	prev_t		ptr;
dcl	dn_ptr		ptr;
dcl	len_ptr		ptr;
dcl	ext_ent_ptr	ptr;
dcl	token_list	(3000) ptr;

dcl	hash_table	(0:210) fixed bin (18);

dcl	next_offset	fixed bin (18);
dcl	starting_wd_off	fixed bin;
dcl	token_count	fixed bin;
dcl	(i, j)		fixed bin;
dcl	name_length	fixed bin (9);
dcl	token_size	fixed bin (18);
dcl	symbol_size	fixed bin;
dcl	name_off		fixed bin (18);
dcl	segname_off	fixed bin (18);
dcl	sbh_off		fixed bin (18);
dcl	psb_off		fixed bin (18);
dcl	root_off		fixed bin (18);
dcl	main_off		fixed bin (18);
dcl	data_ptr_off	fixed bin (18);
dcl	p_off		fixed bin (18);
dcl	symb_off		fixed bin (18);
dcl	next_off		fixed bin (18);
dcl	sect_off		fixed bin (18);
dcl	prev_poff		fixed bin (18);
dcl	t_off		fixed bin;
dcl	prev_soff		fixed bin (18);
dcl	prev_toff		fixed bin;
dcl	first		fixed bin;
dcl	prev_level	fixed bin;
dcl	prev_line_num	fixed bin (14);
dcl	line_num		fixed bin (14);
dcl	file_num		fixed bin (8);
dcl	prev_file_num	fixed bin (8);
dcl	statement_no	fixed bin (5);
dcl	label_count	fixed bin;
dcl	tag_loc		fixed bin;
dcl	packed_dec_size	fixed bin;

dcl	first_symbol	bit (1) aligned;
dcl	translate_it	bit (1);
dcl	finished		bit (1);
dcl	name_string	char (32);

dcl	len		fixed bin based (len_ptr);
dcl	ident_sw		bit (1);
dcl	prev_ident_s	ptr;
dcl	charn		char (n) based;
dcl	bits		bit (3600) based;

dcl	1 name_table_entry	based,
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (15),
	  2 type		fixed bin (15);

dcl	1 map_data_table	aligned based (map_data_ptr),
	  2 no_source_stmts fixed bin aligned,
	  2 data		(0 refer (map_data_table.no_source_stmts)),
	    3 line_no	fixed bin unaligned,
	    3 text_addr	fixed bin unaligned,
	    3 col		fixed bin unaligned,
	    3 label	bit unaligned;

/*[4.2-1]*/
declare	1 DEF		aligned based (cobol_$tag_table_ptr),
						/*[4.2-1]*/
	  2 tag_max	fixed bin,		/*[4.2-1]*/
	  2 TAG		(32767),			/*[4.2-1]*/
	    3 tag_addr	fixed bin (17) unal,	/*[4.2-1]*/
	    3 tag_no	fixed bin (17) unal;

dcl	stmt_map_reloc_bits (4) bit (5) static aligned init ("10000"b, ""b, ""b, ""b);
dcl	simple_symbol	bit (36) static aligned init ("101010000000000000000000101000000000"b);

dcl	cobol_reloc	entry (ptr, fixed bin, fixed bin);
dcl	ioa_		entry options (variable);

dcl	addr		builtin;
dcl	addrel		builtin;
dcl	bit		builtin;
dcl	binary		builtin;
dcl	bool		builtin;
dcl	dim		builtin;
dcl	divide		builtin;
dcl	fixed		builtin;
dcl	index		builtin;
dcl	max		builtin;
dcl	mod		builtin;
dcl	null		builtin;
dcl	pointer		builtin;
dcl	rel		builtin;
dcl	string		builtin;
dcl	substr		builtin;
dcl	translate		builtin;
dcl	unspec		builtin;


%include runtime_symbol;
%include cobol_entry_seq;
%include statement_map;
%include cobol_eln_table;
%include cobol_;
%include cobol_fixed_common;
%include cobol_sbh;
%include pl1_symbol_block;
%include cobol_ext_;
%include cobol_type7;
%include cobol_type9;
%include cobol_type10;
%include cobol_occurs_ext;

     end cobol_mst;
