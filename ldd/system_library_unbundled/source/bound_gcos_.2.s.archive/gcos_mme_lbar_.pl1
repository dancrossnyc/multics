/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_mme_lbar_: proc (mcpp, incr);

/* Process MME GELBAR for gcos batch simulator.

   (See DD19C, Rev. 0, GENERAL COMPREHENSIVE
   OPERATING SUPERVISOR, page 4-20 for
   description of function).

   Author: Dave Ward	09/10/80 [my 1st mme handler]
*/
dcl  incr                     fixed bin(24)parm	/* (output) number parameter words following mme. */;
dcl  mcpp                     ptr parm	/* (input) pointer to machine conditions structure. */;
	mcp = mcpp;				/* Assign to local variable (for execution efficiency). */
	gseg = gcos_ext_stat_$gcos_slave_area_seg;	/* Set pointer to gcos user's slave prefix area. */
	lbar_parm_ptr = addrel (gseg, a_reg.loc1);	/* Get pointer to LOC1. */
	w21 = mc.regs.q;				/* Save Q register. */
	w22 = "0"b;				/* MORE timer register. */
	string (w31) = unspec (lbar_parm.bar);		/* Save new BAR register value. */
	w31.b19 = "0"b;
	string (w31.b30_35) = "0"b;
	mr = gcos_ext_stat_$mme_rtrn;			/* Save current location to return after MME. */
	gcos_ext_stat_$mme_rtrn = to_me;		/* Reset return to return to me. */

	bb = "0"b;				/* Running in bar mode. */
	call gcos_get_bar_ (old_bar);
	call gcos_set_slave_ (
	     (lbar_parm.bar)			/* New BAR value. */
	     , addrel (gseg, lbar_parm.ic)		/* Pointer to gcos code to execute. */
	     , bb					/* ^bar bit. */
	     );

to_me:	;					/* Come here when gcos caller concludes (MME GEFINI). */

	call gcos_restore_regs_ (addrel (gseg, lbar_parm.loc2));
	gcos_ext_stat_$mme_rtrn = mr;			/* Reset to label in effect at entry to procedure. */
	if w23 = "0"b then				/* Terminate gcos user. */
	     goto mr;

	w22 = lbar_parm.ic || lbar_parm.i;
	w21fb = w21fb - 0;				/* MORE */
	if fault | timer_runout then do;
dcl (fault,timer_runout) bit(1)static int options(constant)init("0"b);
	     w31.b19 = "1"b;
	     string (w31.b30_35) = "77"b3;
	end;

	bro = (18)"0"b||substr (old_bar, 1, 18);	/* BAR restore value (right justified). */

/* Continue gcos caller (at his slave prefix cell 23-octal). */
	call gcos_set_slave_ (
	     bar_reset
	     , addrel (gseg, "000023"b3)
	     , bb
	     );

/*   Variables for gcos_mme_lbar_:		*/
/*   IDENTIFIER		ATTRIBUTES	*/
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  bar_reset                fixed bin(18);
dcl  bb                       bit(1)aligned;
dcl  bro                      bit(36)based(addr(bar_reset));
dcl  gcos_get_bar_            entry(bit(36));
dcl  gcos_restore_regs_       entry(ptr);
dcl  gcos_set_slave_          entry(fixed bin(18),ptr,bit(1)aligned);
dcl  gseg                     ptr;
dcl  lbar_parm_ptr            ptr;
dcl  mr                       label auto variable;
dcl  old_bar                  bit(36);
dcl  reg_move                 bit (36 * 8) based aligned;
dcl  unspec                   builtin;
dcl  w21fb                    fixed bin(35)based(addr(spp.w21));

dcl 1 a_reg	aligned based(addr(mc.regs.a))
,     2 loc1	fixed bin(18)unsigned unal
,     2 not_used	bit(18)unal;

dcl 1 lbar_parm	aligned based(lbar_parm_ptr)
,     2 bar	fixed bin(18)unsigned unal	/* new bar value. */
,     2 loc2	fixed bin(18)unsigned unal	/* offset to program registers storage. */
,     2 ic	bit(18)unal	/* new IC offset (from new bar). */
,     2 i		bit(18)unal	/* indicator register. */
;

dcl 1 bar_reg	aligned based(addr(lbar_parm.bar))
,     2 base	fixed bin(9)unsigned unal
,     2 bound	fixed bin(9)unsigned unal
;

/* Gcos memory slave program prefix (at BAR.BASE) */
dcl 1 spp		aligned based(gseg)
,     3 w00_20	(00:16)bit(36)
,     3 w21	       bit(36)
,     3 w22	       bit(36)
,     3 w23	       bit(36)
,     3 w24_30	(20:24)bit(36)
,     3 w31
,       4 b00_18	  (00:18)bit(1)unal
,       4 b19	         bit(1)unal
,       4 b20_29	  (20:29)bit(1)unal
,       4 b30_35	  (30:35)bit(1)unal
,     3 w32_100	(26:64)bit(36)
;

%include gcos_ext_stat_;
     end gcos_mme_lbar_;
