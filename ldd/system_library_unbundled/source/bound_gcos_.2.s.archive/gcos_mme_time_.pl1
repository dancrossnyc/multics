/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

gcos_mme_time_: proc (mcp, increment);

/* *****************************************************************************************
   *******************************************************************************************
   *
   *
   *	M M E  G E T I M E
   *
   *
   *  MME GETIME provides the requesting program with the date and time of day. Results
   *  are returned in the following manner:
   *
   *	C(A) 0-11		month (BCD digits)
   *	C(A) 12-23	day (BCD)
   *	C(A) 24-35	year (BCD)
   *
   *	C(Q) 0-35		time of day (1/64 milliseconds past midnight)
   *
   *	Author: DICK SNYDER NOVEMBER 10,1970
   *	Change: T. CASEY SEPTEMBER 1973 TO RETURN LOCAL TIME INSTEAD OF E.S.T.
   *	Change: Dave Ward	05/29/81 appropiate FP precision.
   *
   *******************************************************************************************
   ***************************************************************************************** */
	increment = 0;				/* no param words to skip */
	time = clock ();				/* get current time */

	call date_time_ (time, date_time);		/* get ascii date and time */


/* 	Build string of ascii date with out the slashes and convert to bcd		 */

	substr (temp, 1, 2) = substr (date_time, 1, 2);	/* get month */
	substr (temp, 3, 2) = substr (date_time, 4, 2);	/* get day */
	substr (temp, 5, 2) = substr (date_time, 7, 2);	/* get year */

	call gcos_cv_ascii_gebcd_ (addr (temp), 6, addr (mc.regs.a), 6); /* put bcd in user's a reg */

	call decode_clock_value_ (time, m, d, y, i, w, z); /* just to get time since midnight local time,
						   in microseconds, into i */

	i = divide (i, 1000, 71, 0);			/* convert to msecs */
	addr (mc.regs.q) -> mc64ths = i*64;		/* convert to 64ths of a msec */
	return;
%page;
/*   Variables for gcos_mme_time_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  clock                    builtin;
dcl  d                        fixed bin(24);
dcl  date_time                char (24)	/* ascii date and time */;
dcl  date_time_               ext entry (fixed bin(71), char (*));
dcl  decode_clock_value_      entry (fixed bin(71), fixed bin(24), fixed bin(24), fixed bin(24), fixed bin(71), fixed bin(24), char(4));
dcl  gcos_cv_ascii_gebcd_     ext entry (pointer, fixed bin(24), pointer, fixed bin);
dcl  i                        fixed bin(71)	/* temp */;
dcl  increment                fixed bin(24)/* no of param words to skip */;
dcl  m                        fixed bin(24);
dcl  mc64ths                  fixed bin(35)based;
dcl  temp                     char (6) aligned	/* temp */;
dcl  time                     fixed bin(71)	/* time in microseconds */;
dcl  w                        fixed bin(24);
dcl  y                        fixed bin(24);
dcl  z                        char (4);
%page;
%include mc;
     end gcos_mme_time_;
