/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_mme_info_: proc (mcpp, increment);

/*
   *  MME GEINFO allows a slave program to access specific information outside the
   *  program's normal Base Address Register (BAR) limits.  Either or both of the
   *  following functions may be requested:
   *
   *
   *     1.	Information from the upper slave service area (SSA) of the user
   *		program can be copied to a buffer provided by the user.
   *		***NOTE:  this function is _n_o_t supported***
   *
   *     2.	A List Pointer Word (LPW) can be supplied to allow one or more single
   *		units of information to be placed in the slave program's core memory.
   *
   *
   *	CALLING SEQUENCE
   *
   *	MME	GEINFO
   *	ZERO	Buffer_end,Number_of_words
   *	ZERO	LPW,Size_of_list
   *
   *
   *	WHERE:
   *
   *	Buffer_end	address+1 of the end of a buffer storage area
   *	Number_of_words	size of the storage area
   *	LPW		Address of first word of list of directives to be processed
   *	Size_of_list	Number of words of list directives
   *
   *
   *  The format of the list of directives is as follows:
   *
   *
   *	ZERO	Address,Option
   *	ZERO	Address,Option
   *	 .	   .      .
   *	 .           .      .
   *	ZERO	Address,Option
   *
   *
   *  Address is the location at which the requested data word is to be stored.
   *  Option is the option number (See code below for values).
   *
   *
   Author: ?
   Change: M. R. Jordan, October 1977
   Change: Dave Ward	07/28/81 Reorganized. 4S1 notice. Removed arg list restriction (By Dick Hemes)
   Change: Ron Barstad        83-09-29 Changed software release "4S1" to "4S3".
                                        Added options 16 and 17 for 4js3.
   Change: Ron Barstad        84-02-21 Allow move from SSA if only 2 words since
                                        is BCD userid 
*/
dcl  increment                fixed bin(24)parm;
dcl  mcpp                     ptr parm;
	mcp = mcpp;

/*
   Get set up for the MME processing.
*/
	increment = 2;
	scup = addr (mc.scu);
	storage_limit = gcos_ext_stat_$storage_limit;
	gseg_ptr = gcos_ext_stat_$gcos_slave_area_seg;


/*
   Verify that the entire MME argument list is in addressable memory.
*/

	mme_arg_list_loc = fixed (scu.ilc, 18)+1;
	if mme_arg_list_loc+2 >= storage_limit then
	     call gcos_mme_bort_$system (		/* Bad mme address. */
	     gcos_et_$bad_mme_addr
	     , "MME GEINFO argument list is not entirely in slave limits."
	     );
	mme_arg_list_ptr = addrel (gseg_ptr, mme_arg_list_loc);

/*
   Is the user asking for any SSA words to be copied?  If so we must complain
   at this point since we cannot satisfy such a request.
*/
	if mme_arg_list.number_of_words ^= (18)"0"b       /* User has given an SSA Copy request */
	then if					/* See if we can bypass because it's redundant */
	     mme_arg_list.buffer_end ^= mme_arg_list.lpw | /* If SSA copy word just dup's the option word, we can */
	     mme_arg_list.number_of_words ^= mme_arg_list.lpw_size then /* If any of these checks fail, we can't bypass */
	          if fixed(mme_arg_list.number_of_words, 18) ^= 2 then /* there is ONE exception */
	     do;
		call gcos_mme_bort_$system (		/* Unimplemented MME. */
		gcos_et_$unimp_mme
		, "MME GEINFO cannot copy SSA words to user buffer."
		);
	     end;
	          else do;
/*
  Move the 2 word BCD userid (.SUID) to user buffer
*/
		     data_word_loc = fixed (mme_arg_list.buffer_end, 18);
		     if data_word_loc > storage_limit then
			call gcos_mme_bort_$system (		/* Bad mme address. */
			gcos_et_$bad_mme_addr
			, "MME GEINFO buffer end is not within slave limits."
			);
		     data_word_ptr = addrel (gseg_ptr, data_word_loc-2);
		     call gcos_cv_ascii_gebcd_ (addr(gcos_ext_stat_$userid),12,
			                      data_word_ptr, i);
		     return;
		end;

/*
   Now that we seem to have a valid request for a list of directives to
   be processed, let's see if the list is any good.
*/
	arg_list_loc = fixed (mme_arg_list.lpw, 18);
	size_of_list = fixed (mme_arg_list.lpw_size, 18);
	if arg_list_loc+size_of_list > storage_limit then
	     call gcos_mme_bort_$system (		/* Bad mme address. */
	     gcos_et_$bad_mme_addr
	     , "MME GEINFO directive list is not entirely within slave limits."
	     );
	if size_of_list = 0 then return;
	arg_list_ptr = addrel (gseg_ptr, arg_list_loc);


/*
   Now process the entire list of directives.
*/
	do arg_list_index = 1 to size_of_list;


/*
   Verify the validity of the data word location specified by the user in the directive list.
   This address must be within the slave limits or we must inform the user that he has sinned.
*/

	     data_word_loc = fixed (arg_list.address (arg_list_index), 18);
	     if data_word_loc >= storage_limit then
		call gcos_mme_bort_$system (		/* Bad mme address. */
		gcos_et_$bad_mme_addr
		, "MME GEINFO directive word data location is outside slave limits."
		);
	     data_word_ptr = addrel (gseg_ptr, data_word_loc);


/*
   Now extract the option number specified, verify it and prepare to process it.
*/
	     option_number = fixed (arg_list.option (arg_list_index), 18);
	     if option_number > hbound (opt, 1) then
		call gcos_mme_bort_$system (		/* Bad mme address (option number). */
		gcos_et_$bad_mme_addr
		, "MME GEINFO directive word option number is bad."
		);
	     goto opt (option_number);
%page;
/*
   Processor time remaining (copy of .SALT)
*/
opt (1):
	     fixed_data_word =
		Convert_Time (gcos_ext_stat_$time_limit-virtual_cpu_time_ ()+gcos_ext_stat_$initial_cpu_time);
	     goto option_loop;

/*
   SYSOUT lines remaining (calculated from .SSYOT 0-17 - .SSYOT 18-35)
*/
opt (2):
	     fixed_data_word = gcos_ext_stat_$sysout_limit-gcos_ext_stat_$sysout_lines;
	     goto option_loop;

/*
   Channel time remaining (copy of .SACHT)
*/
opt (3):
	     fixed_data_word = 0;
	     go to option_loop;

/*
   Processor time used (copy of .SPRT)
*/
opt (4):
	     fixed_data_word = Convert_Time (virtual_cpu_time_ ()-gcos_ext_stat_$initial_cpu_time);
	     goto option_loop;

/*
   SYSOUT lines used (from .SSYOT 18-35)
*/
opt (5):
	     fixed_data_word = gcos_ext_stat_$sysout_lines;
	     goto option_loop;

/*
   Channel time used (copy of .STCHT)
*/
opt (6):
	     fixed_data_word = 0;
	     goto option_loop;

/*
   Time-of-day start of activity (copy of .START)
*/
opt (7):
	     fixed_data_word = Convert_Time (gcos_ext_stat_$activity_start_time);
	     goto option_loop;

/*
   Program state word (copy of .STATE)
*/
opt (8):
	     data_word = "400000000000"b3;
	     goto option_loop;

/*
   Job urgency (from .SURG 18-23 aligned to bits 30-35)
*/
opt (9):
	     fixed_data_word = 10;
	     go to option_loop;

/*
   Configuration data (copy of .CRFIG)

   This word says: Series 60 or 6000;  IOM;  IOM #0 configured;  CPU #0 configured;
   CPU #0 has EIS;  and Datanet 355/6600 on system.
*/
opt (10):
	     data_word = "100010001000100000001000000000000001"b;
	     goto option_loop;

/*
   BCD time in hours-minutes-seconds (formatted as hhmmss)
*/
opt (11):
	     call date_time_ (clock (), date_string);
	     date_string = substr (date_string, 1, 2) || substr (date_string, 4, 2) || substr (date_string, 7, 2);
	     call gcos_cv_ascii_gebcd_ (addr (date_string), 6, addr (data_word), i);
	     goto option_loop;

/*
   Program number from SNUMB
*/
opt (12):
	     if substr (data_word, 1, 30) = gcos_ext_stat_$snumb then substr (data_word, 31, 6) = "12"b3;
	     else substr (data_word, 31, 6) = "00"b3;
	     goto option_loop;

/*
   Software release number (copy of .CRSR)
*/
opt (13):
	     data_word = "046203202020"b3;		/* "4S3" in BCD */
	     goto option_loop;

/*
   System default number of lines per printed page (copy of .CRPSZ)
*/
opt (14):
	     upper_half_data_word = 55;
	     goto option_loop;

/*
   Julian date (copy of .CRJCD)
*/
opt (15):
	     fixed_data_word = Julian_Date ();
	     goto option_loop;

/*
   Shared system number (.CRSSN)
*/
opt (16):	     
	     fixed_data_word = 0;
	     goto option_loop;

/*
   Startup option word (copy of .CROPT)

   This word says: ASCII printer available, FORTX, 800 & 1600 bpi,
   800 bpi low-den and 1600 high-den.
*/
opt (17):	     
	     data_word = "010100000000000000100000001001000100"b;
option_loop:   ;
	end;

/*
   Now that we have finished with the list of directives, return to the caller.
*/
	return;
%page;
Convert_Time: proc (multime) returns (fixed bin (35));


dcl  multime                  fixed bin(71)parm;
	     gcostime = divide (multime, 1000, 29)*64;
	     return (gcostime);

dcl  gcostime                 fixed bin(35);
	end Convert_Time;
%page;
Julian_Date: proc () returns (fixed bin (24));



	     call date_time_ (clock (), date_string);
	     call convert_date_to_binary_ (date_string||" midnight", midnight, code);
	     substr (date_string, 1, 5) = "01/01";
	     call convert_date_to_binary_ (date_string||" midnight", start_year, code);
	     call convert_date_to_binary_$relative ("1day", tomorrow, midnight, code);
	     daysworth = tomorrow-midnight;
	     julian_date = divide ((midnight-start_year), daysworth, 34)+1;
	     return (julian_date);

dcl  code                     fixed bin(35);
dcl  convert_date_to_binary_  entry (char (*), fixed bin(71), fixed bin(35));
dcl  convert_date_to_binary_$relative entry (char (*), fixed bin(71), fixed bin(71), fixed bin(35));
dcl  daysworth                fixed bin(71);
dcl  julian_date              fixed bin(24);
dcl  midnight                 fixed bin(71);
dcl  start_year               fixed bin(71);
dcl  tomorrow                 fixed bin(71);
	end Julian_Date;
%page;
/*   Variables for gcos_mme_info_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  arg_list_index           fixed bin(24);
dcl  arg_list_loc             fixed bin(24);
dcl  arg_list_ptr             ptr;
dcl  clock                    builtin;
dcl  data_word                bit (36) aligned based (data_word_ptr);
dcl  data_word_loc            fixed bin(24);
dcl  data_word_ptr            ptr;
dcl  date_string              char (8);
dcl  date_time_               entry (fixed bin(71), char (*));
dcl  divide                   builtin;
dcl  fixed                    builtin;
dcl  fixed_data_word          fixed bin(35) aligned based (data_word_ptr);
dcl  gcos_cv_ascii_gebcd_     entry (ptr, fixed bin(24), ptr, fixed bin(24));
dcl  gcos_et_$bad_mme_addr    fixed bin(35) ext;
dcl  gcos_et_$unimp_mme       fixed bin(35) ext;
dcl  gcos_mme_bort_$system    entry options (variable);
dcl  gseg_ptr                 ptr;
dcl  hbound                   builtin;
dcl  i                        fixed bin(24);
dcl  mme_arg_list_loc         fixed bin(24);
dcl  mme_arg_list_ptr         ptr;
dcl  option_number            fixed bin(24);
dcl  size_of_list             fixed bin(24);
dcl  storage_limit            fixed bin(18);
dcl  substr                   builtin;
dcl  upper_half_data_word     fixed bin(17) unal based (data_word_ptr);
dcl  virtual_cpu_time_        entry () returns (fixed bin(71));

dcl 1 arg_list (size_of_list) aligned based (arg_list_ptr),
    2 address bit (18) unal,
    2 option bit (18) unal;


dcl 1 mme_arg_list aligned based (mme_arg_list_ptr),
    2 buffer_end bit (18) unal,
    2 number_of_words bit (18) unal,
    2 lpw bit (18) unal,
    2 lpw_size bit (18) unal;
%page;
%include gcos_ext_stat_;
     end gcos_mme_info_;
