/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_mme_call_: proc (mcp, increment);

/*
   *  MME GECALL is used to load programs into memory. The programs may be either relocatable
   *  or absolute. Note, if dynamic library ** present, it is searched first.
   *
   *  MME GERSTR restores data saved by MME GESAVE. The data is read from the file
   *  whose filecode is in the q reqister. The calling sequence is the same as that
   *  shown for MME GECALL.
   *
   *	CALLING SEQUENCE:
   *
   *	MME	GECALL
   *	BCI	1,XXXXXX		BCD PROGRAM NAME
   *	ZERO	L(FIRST WORD),L(ERR RTRN)	PLACE TO BEGIN LOADING
   *	ZERO	L(TRANSFER),0	PLACE TO XFER CONTROL TO
   *				(IF 0, GO TO PLACE SPECIFIED
   *				IN THE PROGRAM'S DIRECTORY)
   *
   *	RETURNS:
   *
   *	C(A) 0-17			LOADING ORIGIN
   *	C(A) 18-35		NUMBER OF WORDS LOADED
   *	C(Q) 0-17			TRANSFER ADDRESS IN PGM DIR.
   *
   *	On error returns the C(Q) 18-35 contains the error code.
   *
   *	_c_o_d_e	_r_e_a_s_o_n
   *
   *	30	i3-file code not defined
   *	42	m4/n4-i/o lim. call/save
   *	43	m6/n7-i/o err. call/save
   *	46	non-random gecall file
   *	48	m6-call/rstr checksum
   *	51	m2/m3-call name missing
   *
   Author: DICK SNYDER OCTOBER 26, 1970
   Change: T. CASEY OCTOBER 1973, FEBRUARY 1974, AUGUST 1974
   Change: D. KAYDEN  APRIL 1974, JULY 1974, APRIL 1975
   Change: M. R. Jordan, September 1977
   Change: Dave Ward	05/29/81 made FB precision adequate.
*/
	scup = addr (mc.scu);			/* init pointer to scu data */
	i = instruction_counter+1;			/* get parameter loc'n */
	callp = addrel (gcos_ext_stat_$gcos_slave_area_seg, i); /* build ptr to parameters */

/*  see if the dynamic library ** exists. if it does, search  */
/*  it first before the regular library.    */
	do i = 1 to hbound (save_data.fibs, 1);
	     if fct.filecode (i) = "**" then
		if ^fct.sysout (i) then do;
		     dylibsw = "1"b;		/* remember that we are searching dynamic lib */
fc_join:		     ;
		     fibptr = fct.fibptr (i);		/* come here from mme_rstr entry point */
		     fib.iocount = fib.iocount + 1;
		     if ^fib.type then do;
			if gecall.error_return_loc ^= (18)"0"b then
			     call Error (gcos_et_$non_rndm_call_file);
			else
			call gcos_mme_bort_$system (gcos_et_$non_rndm_call_file);
		     end;
		     load_at = fib.stream;		/* get stream to load from */
		     goto search_lib;
		end;
	end;


srch_gs:	;					/* come here after searching ** file, if one was there */
	dylibsw = "0"b;				/* searching regular lib now */
	load_at = "glib";				/* search standard system library */

search_lib:
	if first_lib then do;			/* initialize if not done previously */
	     first_lib = "0"b;
	     statp = addr (st);			/* init pointer to ios status */
	     scup = addr (mc.scu);			/* init pointer to scu data */
	     i = instruction_counter+1;		/* get parameter loc'n */
	     callp = addrel (gcos_ext_stat_$gcos_slave_area_seg, i); /* build ptr to parameters */
	     if dbs_mme_call then do;			/* print gecall name if trace is on */
		call gcos_cv_gebcd_ascii_ (
		     addr (gecall.prog_name)
		     , 6
		     , addr (ascii_gecall_name)
		     );				/* translate call name to ascii */
		call ioa_ ("mme gecall ^a", ascii_gecall_name);
	     end;
	end;
	seek_save, k = 0;				/* init file offsets */
%page;
/*  Read catalog record and search for program to be loaded   */
/* **************N   O   T   E*********************************************************
   *
   *	The catalog for the simulator library, gcos_system_software_, is not
   *	the same as the catalog for a random system loadable file produced by
   *	SYSEDIT, and commonly used as a dynamic library (** file).
   *	This routine presently handles both types.  Note that it would be
   *	inefficient for the simulator to utilize a sector oriented catalog
   *	for its primary software library.  In fact, after GCOS is booted, it
   *	does not use the catalogs contained in its primary software libraries.
   *	It uses one linear directory that it has built from the disjoint disk
   *	catalogs of its primary libraries.  The catalog formats of the GCOS
   *	and the GCOS simulator primary libraries should be of no concern
   *	to users of either system.
   *
   *	See the GCOS PLM (AN77) for a detailed description of the differences
   *	in format between a random system loadable file (a dynamic library), the
   *	simulator library, and a tape system loadable file (from which the
   *	simulator library is produced).
   *
   **************N   O   T   E******************************************************* */
	prefp = addr (buffer);			/* init buffer pointer */

	call ios_$seek (load_at, "read", "first", 0, st); /* seek to start of file */
	if status.code ^= 0 then do;			/* error ? */
	     message = "from ios_$seek to start of file";

io_abort:	     ;
	     if status.code ^= 0 then
		call check_fs_errcode_ (status.code, "xxxxxxxx", longerror); /* get error message */
	     call gcos_cv_gebcd_ascii_ (addr (gecall.prog_name), 6, addr (ascii_gecall_name)); /* get call name in ascii */
	     if gecall.error_return_loc ^= (18)"0"b then
		call Error (gcos_et_$io_err_call_save);
	     else call gcos_mme_bort_$system (gcos_et_$io_err_call_save,
		"on ^a; looking for ^a^/^a^/^a", load_at, ascii_gecall_name, longerror, message);
	end;


read:	;
	call ios_$read (load_at, prefp, 0, 1000, j, st);	/* read catalog */
	if status.code ^= 0 then do;
	     message = "from ios_$read first catalog block";
	     goto io_abort;				/* error ? */
	end;

	if gcatblk.avail_ptr ^= 1 then go to sim_cat;	/* determine catalog type */
	gcatsw = "1"b;				/* GCOS standard catalog type */

gcat_loop: ;
	do i = 1 to 15;				/* search entries on this block */
	     if gcatblk.element (i) = gecall.prog_name then do;
		seek_save = gcatblk.address (i)*64;
		go to readp;
	     end;
	end;
						/* not found - is there another block ? */
	if gcatblk.next_cat = 0 then go to next_lib;	/* if not, search next library */
	call ios_$seek (load_at, "read", "first", gcatblk.next_cat*64, st);
	if status.code ^= 0 then do;
	     message = "from ios_$seek to next random catalog block";
	     goto io_abort;
	end;

	call ios_$read (load_at, prefp, 0, 64, j, st);	/* read in next catalog block */
	if status.code ^= 0 then do;
	     message = "from ios_$read random catalog block";
	     goto io_abort;
	end;
	go to gcat_loop;				/* now go scan it */

sim_cat:	;
	gcatsw = "0"b;

	do i = 1 to catblk.no_ent;			/* loop for no. of entries in cat */
	     if catblk.element (i) = gecall.prog_name then do; /* hit ? */
		seek_save = catblk.address (i);
		go to readp;
	     end;
	end;

next_lib:	;
	if rstr_switch then goto not_found;		/* search only one file for mme gerstr */
	if dylibsw then go to srch_gs;		/* no hit on dynamic lib, try regular */

	if ^seclibsw then do;			/* but only if we have not searched it yet */
	     seclibsw = "1"b;			/* remember that we have */
	     if gcos_ext_stat_$save_data.userlib then do; /* -userlib arg enables use of this feature */
		load_at = "slib";			/* search  secondary library */
		go to search_lib;
	     end;
	end;

not_found: ;
	call gcos_cv_gebcd_ascii_ (addr (gecall.prog_name), 6, addr (ascii_gecall_name)); /* convert call name to ascii */

	if gecall.error_return_loc ^= (18)"0"b then
	     call Error (gcos_et_$call_name_missing);
	else call gcos_mme_bort_$system (gcos_et_$call_name_missing,
	     """^a""", ascii_gecall_name);
%page;
/*  Come here when entry found. Seek to and read preface record   */
readp:	;
	call ios_$seek (load_at, "read", "first", seek_save, st); /* seek */
	if status.code ^= 0 then do;
	     message = "from ios_$seek to preface record";
	     goto io_abort;				/* abort if error */
	end;

	call ios_$read (load_at, prefp, 0, 64, j, st);	/* read preface rcrd */
	if status.code ^= 0 then do;
	     message = "from ios_$read preface record";
	     goto io_abort;				/* abort if error */
	end;

/*  compute no of dcws in preface     */
	first_loc = gcos_ext_stat_$storage_limit;
	last_loc = -1;
	do ndcw = 1 to 58 while (substr (preface.dcws (ndcw), 22, 3) ^= "000"b);
	     dcwp = addr (preface.dcws (ndcw));
	     first_loc = min (first_loc, fixed (dcw_model.data_addr, 18));
	     last_loc = max (last_loc, fixed (dcw_model.data_addr, 18)+fixed (dcw_model.count, 12)-1);
	end;
	dcwp = addr (preface.dcws (ndcw));
	first_loc = min (first_loc, fixed (dcw_model.data_addr, 18));
	last_loc = max (last_loc, fixed (dcw_model.data_addr, 18)+fixed (dcw_model.count, 12)-1);
	pgm_text_length = last_loc-first_loc+1;
	reloc_len = fixed (preface.reloc_words);	/* save no. of relocation words */
	load_origin = fixed (preface.origin);		/* save origin */
	pgm_length = fixed (preface.data_words);	/* save pgm length */

	if gcatsw then do;
	     reloc_len = reloc_len*64;		/* for a GCOS catalog, convert blocks to words */
	     pgm_length = pgm_length*64;
	     seek_save = seek_save + 64;		/* and program starts in next block */
	end;
	else seek_save = seek_save+6+ndcw;		/* for a simulator catalog, program immediately follows */

	transfer_addr = fixed (preface.entry);		/* save entry point */
	load_increment = 0;				/* init load increment */

	if gecall.origin ^= (18)"0"b then do;		/* did slave specify an origin ? */
	     if load_origin > 131072 then		/* relocatable overlay ? */
		load_increment = fixed (gecall.origin);
	     else load_increment = fixed (gecall.origin)-load_origin; /* set up new load increment */
	     load_origin = fixed (gecall.origin);	/* use user specified origin */
	     transfer_addr = transfer_addr+load_increment; /* new transfer address */
	end;

/* In the following test, load_origin + pgm_text_length > storage_limit is the same as
   load_origin + pgm_text_length -1 >= storage_limit. A storage_limit of nnnK means that the program
   can legitimately address 0 to nnnK-1. */

	if load_origin + pgm_text_length > gcos_ext_stat_$storage_limit then do; /* will pgm_text fit ? */
	     if gecall.error_return_loc ^= (18)"0"b then
		call Error (gcos_et_$io_lim_call_save);
	     else call gcos_mme_bort_$system (gcos_et_$io_lim_call_save);
	end;

	mc.regs.q = substr (unspec (transfer_addr), 19, 18)||substr (mc.regs.q, 19, 18);

/*  Use user specified transfer address if present    */
	if gecall.xfer_addr ^= (18)"0"b then transfer_addr = fixed (gecall.xfer_addr);

	call ios_$seek (load_at, "read", "first", seek_save, st); /* seek to read data record */
	if status.code ^= 0 | status.eof then do;
	     if status.code = 0 then
		longerror = "end of file";
	     message = "from ios_$seek to first dat block";
	     goto io_abort;
	end;
%page;
	first_loc = first_loc-1024+load_increment;

/*  Loop to read data records into gcos segment    */
	xfer_total = 0;				/* clear xfer total */
	do i = 1 to ndcw;				/* loop to process dcws */

	     dcwp = addr (preface.dcws (i));		/* get pointer to a dcw */
	     j = fixed (dcw_model.count);		/* grab xfer count */
	     if j = 0 then j = 4096;			/* count of 0 = 4096 */
	     xfer_total = xfer_total + j;		/* total up words to xfer */

	end;

	call ios_$read (load_at, gcos_ext_stat_$gcos_slave_area_seg, (first_loc), xfer_total, k, st); /* read data record */
	if status.code ^= 0 | xfer_total ^= k then do;
	     if status.code = 0 then
		longerror = "data words read ^= total of dcw counts";
	     message = "from ios_$read data blocks";
	     goto io_abort;				/* error ? */
	end;

/*  Calculate checksum and compare with that in preface block */
	if preface.data_check ^= 0 then do;		/* don't do if checksum = 0 */

	     ptr = addrel (gcos_ext_stat_$gcos_slave_area_seg, first_loc); /* get ptr to first loc loaded */
	     accum = 0;				/* clear accumulator */

	     do i = 1 to xfer_total;
		accum = accum + fixed (checker (i));	/* add a word */
		if accum > 68719476735 then do;	/* carry into second word ? */
		     accum = accum - 68719476736 + 1;	/* add carry to low end of no. */
		end;
	     end;

	     if substr (unspec (accum), 37, 36) ^= unspec (preface.data_check) then do; /* error */
		if gecall.error_return_loc ^= (18)"0"b then
		     call Error (gcos_et_$call_rstr_cksm);
		else call gcos_mme_bort_$system (gcos_et_$call_rstr_cksm);
	     end;
	end;
%page;
/*  If this is an absolute program, go turn control back to the user */
	if reloc_len = 0 then go to start_pgm;
	if load_increment = 0 then go to start_pgm;	/* no relocation to do */

/*  Must change load increment before relocating program. The load increment */
/*  is usually off by 102 octal in the preface record. Actually, the  */
/*  preface record is off by 400102 but the extra 400000 is really just a */
/*  flag to indicate that the program is relocatable.    */

/* The 102 octal consists of the slave area prefix, which is 100 octal words
   long, followed by two words immediately after it, reserved by the loader for
   communication between overlay modules.  Thus it represents the difference
   between giving the load increment relative to the beginning of the program and
   giving it relative to the beginning of the slave area.
*/
	if fixed (preface.origin) > 131072 then
	     load_increment = load_increment+131072-fixed (preface.origin); /* fix load increment */

	if gcatsw then do;				/* for a GCOS catalog, move to beginning of next block */
	     call ios_$seek (load_at, "read", "first", seek_save+pgm_length, st);
	     if status.code ^= 0 then do;
		message = "from ios_$seek to first random relocation block";
		goto io_abort;
	     end;
	end;

rd_rel:	;
	call ios_$read (load_at, prefp, 0, 1000, j, st);	/* read reloc record */
	if status.code ^= 0 then do;
	     message = "from ios_$read relocation block";
	     goto io_abort;
	end;

	size = min (reloc_len, 1000);			/* can only relocate 18000 words per read */
	reloc_len = reloc_len-1000;
	size = min (size*36, pgm_text_length*2);
	do i = 1 to size;
	     if reloc_bits (i) then do;		/* reloc bit on? */
		fb18 = fixed (gcos_reloc.half_wd (i));	/* pull the half word */
		fb18 = fb18 + load_increment;		/* increment it */
		gcos_reloc.half_wd (i) = bit (fb18);	/* put it back */
	     end;
	end;

	if reloc_len > 0 then go to rd_rel;		/* more relocation bits ? */
%page;
/*  Come here when relocation finished    */
start_pgm: ;					/* return load origin and pgm length in A */
	call Apply_Patches ();
	mc.regs.a = substr (unspec (load_origin), 19, 18)||substr (unspec (pgm_text_length), 19, 18);

/*  Set "increment" to force xfer to location specified in transfer address */
/*  when control is returned to the user.     */
	increment = transfer_addr - instruction_counter - 1; /* compute offset from current instruction */

exit_gecall:

	return;					/* go start program */
%page;
mme_rstr:	entry (mcp, increment);

	rstr_switch = "1"b;				/* remember we entered here */
	scup = addr (mc.scu);			/* init pointer to scu data */
	callp = addrel (gcos_ext_stat_$gcos_slave_area_seg, instruction_counter+1); /* build ptr to parameters */

	call gcos_cv_gebcd_ascii_ (addr (mc.regs.q), 6, addr (fc)); /* get file code in ascii */
	do i = 1 to hbound (save_data.fibs, 1);		/* look for file code */
	     if fct.filecode (i) = substr (fc, 5, 2) then if ^fct.sysout (i) then do;
		     goto fc_join;
		end;
	end;

/*	if gecall.error_return_loc ^= (18)"0"b then
   call Error (gcos_et_$fc_not_defined);
   else call gcos_mme_bort_$system (gcos_et_$fc_not_defined, """^a""", substr (fc, 5, 2));
*/
	call gcos_mme_bort_$system (gcos_et_$fc_not_defined, """^a""", substr (fc, 5, 2));
%page;
Apply_Patches: proc ();


	     if gcos_ext_stat_$patchfile_ptr = null () then return;


	     module_name = gecall.prog_name;
	     call Get_Module_Name_Index ();


	     if module_name_index ^= 0 then do;
		patch_ptr = ptr (gcos_ext_stat_$patchfile_ptr, patch_file.module (module_name_index).first_patch_offset);
		number_of_patches = patch_file.module (module_name_index).number_of_patches;
		do i = 1 to number_of_patches;
		     if patch (i).location > gcos_ext_stat_$storage_limit then do;
		     end;
		     word_ptr = ptr (gcos_ext_stat_$gcos_slave_area_seg, patch (i).location);
		     if dbs_mme_call then
			call ioa_ (
			"before ^w; after ^w^[^-NO CHANGE^]"
			, word
			, patch (i).content
			, (word = patch (i).content)
			);
		     word = patch (i).content;
		end;
	     end;
	     else if dbs_mme_call then call ioa_ ("no patches");


	     return;

Get_Module_Name_Index: proc ();


dcl  divide                   builtin;
dcl  floor                    builtin;
dcl  l                        fixed bin(24);
dcl  u                        fixed bin(24);


		l = 1;
		u = patch_file.number_of_names;


		do while (u >= l);

		     module_name_index = floor (divide ((l+u), 2, 17));

		     if module_name < patch_file.module (module_name_index).name then u = module_name_index-1;
		     else if module_name > patch_file.module (module_name_index).name then l = module_name_index+1;
		     else return;

		end;


		module_name_index = 0;


		return;


	     end Get_Module_Name_Index;

dcl  i                        fixed bin(24);
dcl  module_name              bit (36);
dcl  module_name_index        fixed bin(24);
dcl  null                     builtin;
dcl  number_of_patches        fixed bin(24);
dcl  patch_ptr                ptr;
dcl  ptr                      builtin;
dcl  word                     fixed bin(35) based (word_ptr);
dcl  word_ptr                 ptr;

dcl 1 patch (number_of_patches) aligned based (patch_ptr),
    2 location fixed bin(17),
    2 content fixed bin(35);

dcl 1 patch_file aligned based (gcos_ext_stat_$patchfile_ptr),
    2 version fixed bin(24),
    2 number_of_names fixed bin(24),
    2 module (130560),
      3 name bit (36),
      3 first_patch_offset bit (18) unal,
      3 number_of_patches fixed bin(17) unal;
	end Apply_Patches;
%page;
Error:	proc (code);

	     call gcos_mme_bort_$abort_number (code, abort_number);
	     mc.regs.q = unspec (abort_number);
	     return_loc = fixed (gecall.error_return_loc, 18, 0);
	     gecall.error_return_loc = (18)"0"b;
	     increment = return_loc-instruction_counter-1;
	     goto exit_gecall;

dcl  abort_number             fixed bin(35);
dcl  code                     fixed bin(35);
dcl  return_loc               fixed bin(18);
	end Error;
%page;
/*   Variables for gcos_mme_call_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  accum                    fixed bin(71)	/* checksum accumulator */;
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  ascii_gecall_name        char (6)	/* for printing in trace or error messages */;
dcl  bit                      builtin;
dcl  buffer                   bit (36000)	/* preface and relocation blk buffer */;
dcl  callp                    pointer;
dcl  checker                  (pgm_length) bit (36) aligned based (ptr)	/* overlay for computing chksum */;
dcl  check_fs_errcode_        ext entry (fixed bin(24), char (8), char (100));
dcl  dcwp                     pointer;
dcl  dylibsw                  bit (1) aligned init ("0"b)	/* on if searching dynamic library (**) */;
dcl  fb18                     fixed bin(18)	/* need full 18 bits for address arithmetic */;
dcl  fc                       char (6);
dcl  first_lib                bit (1) aligned init ("1"b)	/* on until initialzation done */;
dcl  first_loc                fixed bin(18);
dcl  fixed                    builtin;
dcl  gcatsw                   bit (1)	/*  0=simulator catalog, 1=gcos format catalog */;
dcl  gcos_cv_gebcd_ascii_     ext entry (pointer, fixed bin(24), pointer);
dcl  gcos_et_$call_name_missing fixed bin(35) ext;
dcl  gcos_et_$call_rstr_cksm  fixed bin(35) ext;
dcl  gcos_et_$fc_not_defined  fixed bin(35) ext;
dcl  gcos_et_$io_err_call_save fixed bin(35) ext;
dcl  gcos_et_$io_lim_call_save fixed bin(35) ext;
dcl  gcos_et_$non_rndm_call_file fixed bin(35) ext;
dcl  gcos_mme_bort_$abort_number entry (fixed bin(35), fixed bin(35));
dcl  gcos_mme_bort_$system    entry options (variable);
dcl  i                        fixed bin(24);
dcl  increment                fixed bin(24)	/* number of parameter words to skip */;
dcl  instruction_counter      fixed bin(18)unsigned unal based(addr(scu.ilc));
dcl  ioa_                     ext entry options (variable);
dcl  ios_$read                ext entry (char (*) aligned, pointer, fixed bin(24), fixed bin(24), fixed bin(24), bit (72) aligned);
dcl  ios_$seek                ext entry (char (*) aligned, char (*), char (*), fixed bin(24), bit (72) aligned);
dcl  j                        fixed bin(24);
dcl  k                        fixed bin(24);
dcl  last_loc                 fixed bin(18);
dcl  load_at                  char (8) aligned	/* holds attach name of file to load from */;
dcl  load_increment           fixed bin(24);
dcl  load_origin              fixed bin(24);
dcl  longerror                char (100);
dcl  max                      builtin;
dcl  message                  char (60);
dcl  min                      builtin;
dcl  ndcw                     fixed bin(24);
dcl  pgm_length               fixed bin(24);
dcl  pgm_text_length          fixed bin(18);
dcl  prefp                    pointer;
dcl  ptr                      pointer;
dcl  reloc_bits               (36000) bit(1)unaligned based (prefp)	/* overlay for relocation record */;
dcl  reloc_len                fixed bin(24);
dcl  rstr_switch              bit (1) aligned init ("0"b)	/* on if entered at mme_rstr */;
dcl  seclibsw                 bit (1) aligned init ("0"b)	/* on if searching secondary library */;
dcl  seek_save                fixed bin(24)	/* holds seek offset */;
dcl  size                     fixed bin(24)	/* size of pgm overlay arrays */;
dcl  st                       bit (72) aligned 	/* ios status */;
dcl  state                    char (4);
dcl  statp                    pointer;
dcl  substr                   builtin;
dcl  transfer_addr            fixed bin(24);
dcl  unspec                   builtin;
dcl  xfer_total               fixed bin(24)	/* used to hold total no. words to xfer */;

dcl 1 status aligned based (statp),			/* overlay for ios_ status */
    2 code fixed bin(24),				/* standard error code */
    2 fill bit (9) unaligned,
    2 eof bit (1) unaligned		/* eof bit */
;


dcl 1 gecall aligned based (callp),			/* overlay for gecall parameters */
    2 prog_name bit (36) unaligned,			/* bcd pgm name */
    2 origin bit (18) unaligned,			/* place to begin loading */
    2 error_return_loc bit (18) unaligned,
    2 xfer_addr bit (18) unaligned		/* transfer address */
;


dcl 1 preface aligned based (prefp),			/* model of preface record - 64 words max */
    2 data_check fixed bin(24),				/* checksum of following data words */
    2 rel_check fixed bin(24),				/* checksum of following reloc. words */
    2 rel_abs fixed bin(24),				/* 0=absolute|^0=relocatable */
    2 name bit (36) unaligned,			/* name of pgm */
    2 entry bit (18) unaligned,			/* entry address */
    2 origin bit (18) unaligned,			/* origin */
    2 reloc_words bit (18) unaligned,			/* no. of relocation words */
    2 data_words bit (18) unaligned,			/* no. of data words */
    2 dcws (ndcw) bit (36) unaligned			/* dcw(s) - max of 58 - to load following data records */
;


dcl 1 dcw_model aligned based (dcwp),			/* model of dcw */
    2 data_addr bit (18) unaligned,
    2 zero bit (3) unaligned,
    2 action bit (3) unaligned,
    2 count bit (12) unaligned		/* number of words to xfer */
;


dcl 1 gcos_reloc aligned based (ptr),			/* overlay for each half word  */
    2 half_wd (131072) bit (18) unaligned;						/* of the loaded program */


dcl 1 catblk aligned based (prefp),			/* catalog image */
    2 nxt fixed bin(24),				/* pointer to next cat blk */
    2 no_ent fixed bin(24),				/* no. of entries in this cat blk */
    2 elblock (499),				/* room for 499 entries */
      3 element bit (36) unaligned,			/* prog name */
      3 address fixed bin(24)				/* offset in file of preface rcrd */
;


dcl 1 gcatblk	aligned based (prefp),	/* catalog image for gcos format catalog */
    2 avail_ptr	fixed bin(18)unsigned unaligned,
    2 next_cat	fixed bin(18)unsigned unaligned,
    2 pad		bit (36),
    2 elblock 	(15),
      3 element	bit (36),
      3 length	fixed bin(18)unsigned unaligned,
      3 address	fixed bin(18)unsigned unaligned,
      3 pad	bit (72);
%page;
%include gcos_ext_stat_;
%page;
%include gcos_dbs_names;
     end gcos_mme_call_;
