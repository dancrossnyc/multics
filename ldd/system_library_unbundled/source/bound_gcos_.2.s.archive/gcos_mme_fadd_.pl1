/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_mme_fadd_: proc (mcpp, increment);

/*
   MME GEFADD is used to obtain physical addresses for use in operator messages.
   Since physical addresses are meaningless in this environment, a random bit
   pattern is returned in the A and Q registers.

   This mme is also used to find out if a file exists, so it is important
   to return nonzero values when the file does exist.

   Author: DICK SNYDER FEBRUARY 21,1972
   Change: T. CASEY NOVEMBER 1973
   Change: D. KAYDEN  APRIL 1974, DECEMBER 1974
   Change: R.H. MORRISON	JAN. 29, 1976
   Change: Dave Ward	09/02/81 density history 2 bits (not 3). Tape density 6250. Revised source.
*/
dcl  increment                fixed bin(24)parm;
dcl  mcpp                     ptr parm;
	mcp = mcpp;
	increment = 0;

	substr (fc, 1, 1) = xlate (q_ovl.fc_bcd1);	/* put ascii equivalent in fc */
	substr (fc, 2, 1) = xlate (q_ovl.fc_bcd2);
	if fc = "  " then go to not_found;

	do i = 1 to hbound (save_data.fibs, 1);		/* see if file named fc exists */
	     if fct.filecode (i) = fc then go to found;
	end;

not_found: ;
	mc.regs.a,
	     mc.regs.q = "0"b;			/* not found, return zeroes */
	return;


found:	;
	if fct.sysout (i) then go to not_found;

	fibptr = fct.fibptr (i);
	mc.regs.a = "0"b;
	substr (mc.regs.a, 7, 3) = fib.disp;		/* put in disposition code */
	if fib.print then substr (mc.regs.a, 1, 6) = "25"b3 ; /* device code = 25 (prt300 */
	else
	if fib.tape then do;

	     if fib.tracks = "01"b then substr (mc.regs.a, 1, 6) = "13"b3 ; /* dev. code = 13 (mth500 - 7 trk) */
	     else
	     substr (mc.regs.a, 1, 6) = "14"b3 ;	/* dev. code = 14 (mth500 - 9 trk) */

	     substr (mc.regs.a, 10, 19) = "0100000000001000010"b; /* set density capability (200, 556, 800,
						   1600 or 6250) and high and low defaults (800 & 556) */
	     substr (mc.regs.a, 29, 4) = fib.density;	/* set density from $ tape card */
	     substr (mc.regs.a, 33, 2) = fib.dens_hist;
	end;
	else do;
	     substr (mc.regs.a, 1, 6) = "61"b3 ;	/* device code = 61 (dsu191) */
	     substr (mc.regs.a, 19, 1) = "1"b;		/* size given in llinks */
	     substr (mc.regs.a, 20, 1) = fib.type;	/* random file indicator */
	     substr (mc.regs.a, 21, 1) = fib.perm;	/* permanent file indicator */
	     i = divide (fib.size, 320, 24, 0);		/* get size in llinks */
	     if i <= 16383 then
		a_ovl.llinks = i;
	end;
	mc.regs.q = "000116160000"b3 ;
	return;
%page;
/*   Variables for gcos_mme_fadd_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  divide                   builtin;
dcl  fc                       char(2)aligned;
dcl  i                        fixed bin(24);
dcl  substr                   builtin;
dcl  unspec                   builtin;

dcl 1 q_ovl	aligned based(addr(mc.regs.q))
,     2 fill	bit(24)unal
,     2 fc_bcd1	fixed bin(6)unsigned unal
,     2 fc_bcd2	fixed bin(6)unsigned unal
;

dcl 1 a_ovl	aligned based(addr(mc.regs.a))
,     2 fill	bit(22)unal
,     2 llinks	fixed bin(14)unsigned unal
;
%page;
%include gcos_ext_stat_;
%page;
%include gcos_xlate_bcd_ascii_;
     end gcos_mme_fadd_;
