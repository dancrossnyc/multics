/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_mme_more_: proc (mcp, increment);

/*
   *  MME GEMORE is used to obtain an additional tape handler, additional
   *  links (3840 word blocks), more memory, or to allow allocation of
   *  new files. The user must be prepared to accept a denial return
   *  if the request cannot be satisified.
   *
   *
   *	CALLING SEQUENCE
   *
   *	MME	GEMORE
   *	ZERO	A,B
   *	denial return
   *	success return
   *
   *	C(Q) 0-17		ptr. to cfdesc (A=4-6) or random indicator (A=2)
   *	C(Q) 18-23	requested permissions (A=4-6)
   *	C(Q) 24-35	file code (A=1-6)
   *
   *	A = 0 for more memory	B = no of 1K blocks wanted
   *	A = 1 for 7 track tape	B = tape status
   *	A = 2 for new links or file	B = no of links desired
   *	A = 3 for 9 track tape	B = tape status
   *	A = 4 for cataloged files	B = ptr. to 355 wd. buffer
   *            accessed in created
   *            mode.
   *      A = 5 for cataloged files     B = ptr. to 355 wd. buffer
   *            accessed as random.
   *      A = 6 for cataloged files     B = ptr. to 355 wd. buffer
   *            accessed as sequential.
   *
   *
   Author: DICK SNYDER JUNE 8, 1971
   Change: T. CASEY OCTOBER 1973
   Change: D. KAYDEN  APRIL 1974, JULY 1974, JANUARY 1975
   Change: M. R. Jordan,  January 1977
   Change: Dave Ward	07/28/81 A=7 case (By Dick Hemes)
*/

/*
   Initialize all needed values and verify the action code (A)
   to ensure that this is a good call.
*/
	gseg_ptr = gcos_ext_stat_$gcos_slave_area_seg;
	increment = 2;
	storage_limit = gcos_ext_stat_$storage_limit;
	scup = addr (mc.scu);

	if fixed (scu.ilc, 18)+1 >= storage_limit then
	     call gcos_mme_bort_$system (gcos_et_$bad_mme_param, "MME GEMORE parameter word is outside slave limits.");
	param_ptr = addrel (gseg_ptr, fixed (scu.ilc, 18)+1);
	A = param.a;
	B = param.b;

	if A > 7 then do;
	     ecode = gcos_et_$bad_more_param;
abort:	     call gcos_mme_bort_$system (ecode);
	end;
%page;
/*
   Now that we are sure this is a somewhat valid request (i.e. 0<=A<=7),
   let's see if its for memory.  If so, then process the request.

   At this point:

   A		=0
   B		number of 1K (1024 word) blocks of memory requested (max is 64K)
*/
	if A = 0 then do;

	     if B = 0 then return ;
	     if B > 64 then goto failure ;

	     if gcos_ext_stat_$storage_limit+B*1024 > gcos_ext_stat_$max_mem then go to failure;

	     gcos_ext_stat_$storage_limit = gcos_ext_stat_$storage_limit+B*1024;
	     call gcos_set_slave_$load_bar (divide (gcos_ext_stat_$storage_limit, 512, 17, 0));
	     call hcs_$set_max_length (string (gcos_ext_stat_$pdir), "gcos_slave_area_seg", gcos_ext_stat_$storage_limit, code);
	     if code ^= 0 then call gcos_error_ (code);

	     return;
	end;
%page;
/*
   This request is for some file (i.e. not memory).  Lets get the file code
   and see if the file exists already.  When we know this we can decide what
   to do to process the request.
*/
	if substr (mc.regs.q, 25, 12) = (12)"0"b then do ;
	     ecode = gcos_et_$zero_fc_to_more;
	     goto abort;
	end ;

	if A = 7 then goto failure;			/* => file catenation. Treat as EOF. */

	substr (fc, 1, 1) = xlate (fixed (substr (mc.regs.q, 25, 6), 6));
	substr (fc, 2, 1) = xlate (fixed (substr (mc.regs.q, 31, 6), 6));

	do fct_index = 1 to hbound (save_data.fibs, 1);
	     if fct.filecode (fct_index) = fc then go to hit;
	end;

	goto action (A);
%page;
/*
   Process a request for accessing an existing permanent file.

   At this point:

   A		=4 - access the file in whichever mode it was created
   A		=5 - access the file as a random file
   A		=6 - access the file as a sequentail file
   B		location of a 355 word buffer for FMS
   C(Q) 0-17	location of catalog/filename block
   C(Q) 18-23	requested permisssions
   C(Q) 24-35	file code (guaranteed unused at this point)
*/
action (4):
action (5):
action (6):

/*
   ??
*/
	cfdesc_loc = fixed (substr (mc.regs.q, 1, 18), 18);
	if cfdesc_loc >= storage_limit then
	     call gcos_mme_bort_$system (gcos_et_$bad_mme_param, "Catalog/filename description is outside slave limits.");
	do word_index = cfdesc_loc+4 to min (cfdesc_loc+38, storage_limit-1) by 4;
	     if addrel (gseg_ptr, word_index) -> bit36 = (36)"1"b then goto fence_hit;
	end;
	call gcos_mme_bort_$system (gcos_et_$bad_mme_param, "Catalog/filename description fence not found.");

fence_hit: ;
	if B < 64 | B +354 >= storage_limit then
	     call gcos_mme_bort_$system (gcos_et_$bad_mme_param, "FMS buffer location < 64 or outside slave limits.");

/*
   ??
*/
	call gcos_build_pathname_ (addrel (gseg_ptr, cfdesc_loc), addrel (gseg_ptr, B), dir_name, entry_name, st);
	if substr (st, 2, 11) ^= (11)"0"b then do;

fms_failure:   ;
	     mc.regs.q = substr (st, 1, 36);
	     goto failure;
	end;
	call gcos_verify_access_ (dir_name, entry_name, substr (mc.regs.q, 19, 6), addrel (gseg_ptr, B), st);
	if substr (st, 2, 11) ^= (11)"0"b then goto fms_failure;

/*
   Open the file with no LUD and fill in the appropriate fib entries.
*/
	call gcos_open_file_ (fc, "", fibptr, ""b) ;
	if rtrim (dir_name) = ">" then fib.pathnm = ">" || entry_name;
	else fib.pathnm = rtrim (dir_name) || ">" || entry_name;
	fib.read = substr (mcp -> mc.regs.q, 19, 1);
	fib.write = substr (mcp -> mc.regs.q, 20, 1);
	fib.perm = "1"b;
	if A = 5 then fib.type = "1"b ;

	goto attach;
%page;
/*
   Process a request for an additional tape drive.

   At this point:

   A		=1 for 7 track; =3 for 9 track
   B		if non-zero then a tape must be mounted (=0 use any scratch)
   C(Q) 0-17	location of reel # word (only if non-zero)
   C(Q) 20-23	density specification (see fib declaration for possible values)
   C(Q) 24-35	file code (guaranteed unused at this point)
*/
action (1):
action (3):

/*
   Open the file with no LUD.
*/

/* should make sure a handler is available first */
	call gcos_open_file_ (fc, "", fibptr, "0"b) ;

/*
   Now that we have a drive, set up the fib.
*/
	fib.tape = "1"b;

	if A = 1 then fib.tracks = "01"b;
	else fib.tracks = "10"b;

	reel_no_loc = fixed (substr (mc.regs.q, 1, 18), 18);
	B = fixed (substr (addr (B) -> bit36, 36, 1), 1);
	if B ^= 0 & reel_no_loc ^= 0 then
	     fib.serial_no = addrel (gseg_ptr, reel_no_loc) -> bit30;
	else fib.serial_no = (5)"001001"b;

	fib.tape_name = (12)"010000"b;

	fib.density = substr (mc.regs.q, 21, 4);
	if fib.density = "0111"b then fib.density = "0000"b;

	goto attach ;
%page;
/*
   Process a request for a _n_e_w temporary mass storage file.
   Set access for both read and write and get the size from the
   mme calling sequence.


   At this point:

   A		=2
   B		size of requested file in links (if 0 then request is for a null file)
   C(Q) 17	random file indicator (actually if C(Q)0-17 ^= 0 then random)
   C(Q) 24-35	file code (guaranteed unused at this point)
*/
action (2):

/*
   Open the file with no LUD and fill in the fib.
*/
	call gcos_open_file_ (fc, "", fibptr, "0"b) ;
	fib.read, fib.write = "1"b;
	fib.type = (substr (mc.regs.q, 1, 18) ^= (18)"0"b);
	fib.size = B*3840;
	if fib.size = 0 then fib.null = "1"b ;

/*
   We now have the file ready and the fib filled in so lets attach it.
*/
attach:	;
	call gcos_attach_file_ (fibptr);
	return;

/*
   At this point we have failed to satisfy the users _v_a_l_i_d request.
   We will now return to the denial return point.
*/
failure:	;
	increment = 1 ;
	return ;
%page;
/*
   Process a request for more space on an _e_x_i_s_t_i_n_g mass storage file.
   Make sure that this is a request for a mass storage file.
   If it is, then get the specified number of links.  If the
   number specified is 0 and the file is a permanent file
   then we will choose the growth rate.


   At this point:

   A		any value 1-6 (only 2 is valid)
   B		# of links to be added (if 0 & file is permanent then use 1 llink)
   C(Q) 24-35	file code (guaranteed to be in use at this point)
*/

hit:	;

/*
   If this is not a mass storage request (A=2) then complain.
*/

	if A ^= 2 then do ;
	     ecode = gcos_et_$duplicate_file_more;
	     goto abort ;
	end;

/*
   We cannot grow a SYSOUT file.
*/

	if fct.sysout (fct_index) then do;
	     ecode = gcos_et_$duplicate_file_more;
	     goto abort;
	end ;

/*
   Nor can we grow files assigned to printer, tape or the operators console.
*/

	fibptr = fct.fibptr (fct_index);
	if fib.print | fib.console | fib.tape then do;
	     ecode = gcos_et_$not_mass_store_more;
	     go to abort;
	end;

/*
   A growth request for a null file is always successful.
*/

	if fib.null then return ;

/*
   Calculate the new file size.
*/

	num_words = B*3840;
	if num_words = 0 then if fib.perm then num_words = 320;
	fib.size = fib.size+num_words;

	return;
%page;
/*   Variables for gcos_mme_more_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  A                        fixed bin(18)	/* A field from MME sequence */;
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  B                        fixed bin(18)	/* B field from MME sequence */;
dcl  bit30                    bit(30)based;
dcl  bit36                    bit(36) aligned based	/* General purpose bit string. */;
dcl  cfdesc_loc               fixed bin(18);
dcl  code                     fixed bin(35) based (addr (st));
dcl  dir_name                 char(168)	/* the directory name for a prmfl request */;
dcl  divide                   builtin;
dcl  ecode                    fixed bin(35);
dcl  entry_name               char(32)	/* the entry name for a prmfl request */;
dcl  fc                       char(2)	/* the file code if this is a file request */;
dcl  fct_index                fixed bin(24)	/* index used in searching the file code table */;
dcl  fixed                    builtin;
dcl  gcos_attach_file_        entry (ptr);
dcl  gcos_build_pathname_     entry (ptr, ptr, char(*), char(*), bit(72) aligned);
dcl  gcos_error_              entry options (variable);
dcl  gcos_et_$bad_mme_param   fixed bin(35) ext;
dcl  gcos_et_$bad_more_param  fixed bin(35) ext;
dcl  gcos_et_$duplicate_file_more fixed bin(35) ext;
dcl  gcos_et_$not_mass_store_more fixed bin(35) ext;
dcl  gcos_et_$zero_fc_to_more fixed bin(35) ext;
dcl  gcos_mme_bort_$system    entry options (variable);
dcl  gcos_open_file_          entry (char(*), char(*), ptr, bit(1));
dcl  gcos_set_slave_$load_bar entry (fixed bin(17));
dcl  gcos_verify_access_      entry (char(*), char(*), bit(6), ptr, bit(72) aligned);
dcl  gseg_ptr                 ptr;
dcl  hcs_$set_max_length      entry (char(*), char(*), fixed bin(19), fixed bin(35));
dcl  increment                fixed bin(18)	/* IC increment for return to slave activity */;
dcl  index                    builtin;
dcl  num_words                fixed bin(35);
dcl  param_ptr                ptr	/* ptr to word after MME (for A  B fields) */;
dcl  reel_no_loc              fixed bin(18)	/* location of the reel # word in the gcos_slave_area_seg */;
dcl  rtrim                    builtin;
dcl  st                       bit(72) aligned	/* status return string */;
dcl  storage_limit            fixed bin(18);
dcl  string                   builtin;
dcl  substr                   builtin;
dcl  word_index               fixed bin(18);

dcl 1 param aligned based (param_ptr),			/* structure for accessing the A  B fields */
    2 a fixed bin(18)unsigned unal,
    2 b fixed bin(18)unsigned unal;
%page;
%include gcos_ext_stat_;
%page;
%include gcos_xlate_bcd_ascii_;
     end gcos_mme_more_;
