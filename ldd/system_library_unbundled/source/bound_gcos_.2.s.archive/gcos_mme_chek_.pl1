/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
   ********************************************************************************************
   ********************************************************************************************
   *
   *
   *	M M E  G E C H E K
   *
   *
   *	MME GECHEK initiates a checkpoint dump and sets up bookkeeping to enable
   *	the program requesting the MME GECHEK to be later rolled back (via MME GEROLL)
   *	to the last checkpoint taken.
   *
   *
   *	CALLING SEQUENCE
   *
   *	MME	GECHEK
   *	return
   *
   *
   *	C(word 14) 0-17	location of rollback special processing routine
   *
   *
   *	For programs using File and Record Control:
   *
   *	C(Q) 0-17		checkpoint FCB location
   *	C(Q) 18-35	MBZ
   *
   *
   *	or for programs not using File and Record Control:
   *
   *	C(Q) 0-5		MBZ
   *	C(Q) 6-17		file code of the checkpoint file
   *	C(Q) 18		MBZ
   *	C(Q) 19		=1
   *	C(Q) 20-35	MBZ
   *
   *
   *	on return from the MME:
   *
   *	C(Q) 0-17		location+1 of the last MME GECHEK
   *	C(Q) 18-35	error code (always zero)
   *
   *
   *  Modified by M. R. Jordan,  April 1977
   *
   ********************************************************************************************
   ********************************************************************************************
*/



gcos_mme_chek_: proc (mcp, increment);

dcl  addr builtin;
dcl  bit36 bit (36) aligned based;
dcl  fixed builtin;
dcl  increment fixed bin(18);
dcl  return_loc fixed bin(18);
dcl  substr builtin;

/*

   This MME is not supported.  Simply return to the slave job as if we
   had taken the checkpoint.

*/


/*

   Initialize the increment and scu data pointer.  Then set up the Q
   register to look like we just did the GECHEK and return.

*/


	increment = 1;
	scup = addr (mc.scu);
	return_loc = fixed (scu.ilc, 18)+1;
	mc.q = substr (addr (return_loc) -> bit36, 19, 18) || (18)"0"b;

	return;

%include mc;


     end gcos_mme_chek_;
