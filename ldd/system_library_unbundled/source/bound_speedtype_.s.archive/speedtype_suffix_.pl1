/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

speedtype_suffix_: procedure (arg_sb_ptr, arg_exp_ptr, arg_spc_ptr, arg_suffixx, arg_match_ptr, arg_match_len);

/*	This procedure is an internal interface of the Speedtype subsystem.
   *	Created on 01/01/76 by Bill Silver as notescript_suffix_.
   *	Changed on 06/13/77 by Bill Silver to speedtype_suffix_.
   *      Changed on 06/04/80 by Paul Benjamin for special suffixing.
   *
   *	It is called to set a suffix action index for a defined symbol.
   *	The action index set depends upon the suffix and the expansion string
   *	for this symbol.  All possible action indexes will be tried until one is
   *	found that matches the specified string.  If no action index results
   *	in a match then this suffix for this symbol is disabled.  If the
   *	length of the match string is "0" or "-1", then the following special
   *	processing is performed:
   *	   0 => default action index
   *	  -1 => disable this suffix.
*/

/*		ARGUMENTS			*/

dcl  arg_exp_ptr ptr;				/* (I) Pointer to expansion entry. */
dcl  arg_match_len fixed bin;				/* (I) Length of expansion ( 0=>default, -1=>disable). */
dcl  arg_match_ptr ptr;				/* (I) Pointer to expansion we have to match. */
dcl  arg_sb_ptr ptr;				/* (I) Pointer to symbol entry. */
dcl  arg_spc_ptr ptr;                                       /* (I) Pointer to special entry. */
dcl  arg_suffixx fixed bin;				/* (I) Number of specified suffix. */


/*		AUTOMATIC DATA		*/

dcl  sb_buf char (8);				/* Used to expand symbol with suffix. */
dcl  exp_buf char (56);				/* Holds expansion. */

/* Note above that 56 is really length(exp.expansion). */

dcl  ecode fixed bin (35);				/* Error table code. */
dcl  exp_buf_len fixed bin;				/* Length of expansion buffer. */
dcl  exp_buf_ptr ptr;				/* Pointer to expansion buffer. */
dcl  exp_len fixed bin;				/* Length of expansion argument. */
dcl  i fixed bin;
dcl  match_len fixed bin;				/* Length of expansion we have to match. */
dcl  match_ptr ptr;					/* Pointer to expansion we have to match. */
dcl  sb_buf_ptr ptr;				/* Pointer to symbol buffer. */
dcl  sb_len fixed bin;				/* Length of symbol with suffix. */
dcl  suffixx fixed bin;				/* Number of specified suffix. */
dcl  word_type fixed bin;				/* Word type of expansion. */


/*		BASED  DATA		*/

dcl  expansion char (exp_len) based (exp_buf_ptr);

dcl  match_expansion char (match_len) based (match_ptr);


/*		INTERNAL STATIC DATA	*/

dcl  num_actions fixed bin				/* Current number of known suffix actions. */
     internal static init (6);

dcl  default_actionx (0:6, 5) fixed bin			/* (word_type, suffix) default action indexes. */
     internal static init (1, 1, 1, 1, 1,		/* other */
     1, 2, 2, 2, 2,					/* "Ce" */
     1, 2, 1, 2, 1,					/* "Ve" */
     5, 4, 1, 4, 1,					/* "Cy" */
     1, 1, 1, 1, 1,					/* "Vy" */
     6, 1, 1, 1, 1,					/* "ch", "sh", or "ex" */
     1, 3, 3, 3, 1);				/* "CVC" */

dcl  vowels char (5)
     internal static init ("eaiou");


/*		EXTERNAL ENTRIES CALLED	*/

dcl (addr, index, length, ptr, substr) builtin;

dcl  speedtype_expand_ entry (ptr, fixed bin, ptr, fixed bin, fixed bin, fixed bin (35));
						/* 	*/
%include speedtype_symbols;
/* 	*/
	sb_ptr = arg_sb_ptr;			/* Copy arguments. */
	exp_ptr = arg_exp_ptr;
	spc_ptr = arg_spc_ptr;
	suffixx = arg_suffixx;
	match_ptr = arg_match_ptr;			/* Set reference to expansion to match. */
	match_len = arg_match_len;

	if match_len = -1				/* -1 => disable this suffix. */
	then do;					/* That is what we have to do. */
	     exp.actionx (suffixx) = 0;
	     return;
	end;

	if match_len = 0				/* 0 => set default action index. */
	then do;
	     word_type = GET_WORD_TYPE ();		/* Get word type of expansion. */
	     exp.actionx (suffixx) = default_actionx (word_type, suffixx);
	     return;
	end;

/*	We must find an action index that will expand this symbol the
   *	way the caller wants.  First  test expansion to see if it is valid.
   *	Then built the symbol with the specified suffix.
*/
	ssd_ptr = ptr (sb_ptr, 0);			/* Get pointer to base of symbol dictionary. */
	if match_len > length (exp.expansion)		/* Is expansion too long? */
	then do;					/* Yes, disable this suffix. */
	     exp.actionx (suffixx) = 0;
	     return;
	end;

	sb_buf = sb.symbol;				/* Copy symbol into our buffer. */
	sb_len = index (sb_buf, " ");			/* Get the length of the symbol. */
	if sb_len = 0 then sb_len = length (sb_buf);
	sb_buf_ptr = addr (sb_buf);			/* Set up buffer pointers and lengths for expanding. */
	exp_buf_ptr = addr (exp_buf);
	exp_buf_len = length (exp_buf);

/* Add suffix to symbol. */
	substr (sb_buf, sb_len, 1) = substr (ssd.suffixes, suffixx, 1);

	do i = 1 to num_actions;			/* Try all known action indexes. */
	     exp.actionx (suffixx) = i;		/* Try this action index. */
	     call speedtype_expand_ (sb_buf_ptr, sb_len, exp_buf_ptr, exp_buf_len, exp_len, ecode);
	     if expansion = match_expansion		/* Does expansion match? */
	     then return;				/* Yes, action index set correctly. */
	end;

	exp.actionx(suffixx) = 7;                         /* User has specified special suffixing. */
	spc.special(suffixx) = match_expansion;

	return;
						/* 	*/
GET_WORD_TYPE: procedure returns (fixed bin);

/*	This function will return an index that represents the word type of
   *	the expansion.  Speedtype currently recognizes the following word
   *	types:
   *	  0 - other => none of the below
   *	  1 - ends in "e" preceeded by a consonant
   *	  2 - ends in "e" preceeded by a vowel
   *	  3 - ends in "y" preceeded by a consonant
   *	  4 - ends in "y" preceeded by a vowel
   *	  5 - ends in "ch" or "sh" or "ex"
   *	  6 - ends with a consonant || vowel || consonant
*/
	     exp_buf_ptr = addr (exp.expansion);	/* Work on expansion entry itself. */
	     exp_len = exp.len;

	     if exp_len < 3 then return (0);		/* Default for short expansions. */

	     if substr (expansion, exp_len, 1) = "e"
	     then do;				/* Expansion ends with "e". */
		if index (vowels, substr (expansion, (exp_len - 1), 1)) = 0
		then return (1);			/* Preeceded by a consonant. */
		else return (2);			/* Preceeded by a vowel. */
	     end;

	     if substr (expansion, exp_len, 1) = "y"
	     then do;				/* Expansion ends with "y". */
		if index (vowels, substr (expansion, (exp_len - 1), 1)) = 0
		then return (3);			/* Preceded by a consonant. */
		else return (4);			/* Preceded by a vowel. */
	     end;

	     if (substr (expansion, (exp_len - 1), 2) = "ch") |
	     (substr (expansion, (exp_len - 1), 2) = "sh") |
	     (substr (expansion, (exp_len - 1), 2) = "ex")
	     then return (5);

	     if (index (vowels, substr (expansion, exp_len, 1)) = 0) &
	     (index (vowels, substr (expansion, (exp_len - 1), 1)) ^= 0) &
	     (index (vowels, substr (expansion, (exp_len - 2), 1)) = 0)
	     then return (6);			/* Consonant || vowel || consonant */

	     return (0);				/* None of the above. */

	end GET_WORD_TYPE;

     end speedtype_suffix_;
