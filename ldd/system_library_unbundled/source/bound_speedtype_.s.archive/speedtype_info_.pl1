/* ************************************************************
   *                                                          *
   * Copyright, (C) Honeywell Information Systems Inc., 1982  *
   *                                                          *
   * Copyright, (C) Honeywell Information Systems Inc., 1980. *
   *                                                          *
   ************************************************************ */


speedtype_info_: procedure;

/*	This procedure is an internal interface of the Speedtype subsystem.
   *	Created on 12/31/75 by Bill Silver as notescript_info_.
   *	Changed on 06/13/77 by Bill Silver to speedtype_info_.
   *      Changed on 10/28/80 by Paul Benjamin for special suffixing.
   *                          Added expand_table entrypoint.
   *                          Fixed deleted symbol dictionary bug.
   *      Changed on 11/09/81 by Paul Benjamin to fix bug where expanding
   *                          symbol dict causes some expansions to be overlaid.
   *
   *	It is called to set and get a pointer and pathname of the current
   *	Speedtype symbol dictionary.  It has the following entry points:
   *
   *           expand_table:  Add another 100 entries to symbol dictionary.
   *	     use:		Set up to use new symbol dictionary.
   *	     name:	Return the name of the current symbol dictionary.
   *	     pointer:	Return a pointer to the current symbol dictionary.
   *	     set_bc:	Sets bit count of the current symbol dictionary.
   *           shrink_table:  Remove 100 entries from symbol dictionary.
*/

/*		ARGUMENTS			*/

dcl  arg_dir_name char (168);				/* (I/O) Directory name of current symbol dictionary. */
dcl  arg_ecode fixed bin (35);			/* (O)   Error table code. */
dcl  arg_ent_name char (32);				/* (I/O) Entry name of current symbol dictionary. */
dcl  arg_ssd_ptr ptr;				/* (O)   Pointer to current notescri  Pt segment. */


/*		AUTOMATIC  DATA		*/

dcl  account char (32);         			/* Just used to satisfy call arguments. */
dcl  answer char (4) varying;				/* Answer to command query. */
dcl  bit_count fixed bin (24);			/* Bit count of the symbol dictionary. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl (i, j) fixed bin;
dcl  project char (9);  	        		          /* Not used. */
dcl  words fixed bin (19);				/* Size in words of symbol dictionary. */

dcl 1 query_info aligned,				/* Info structure for command_query_. */
    2 version fixed bin,
    (2 yes_no bit (1),
    2 suppress_name bit (1)) unaligned,
    2 status_code fixed bin,
    2 other_code fixed bin;


/*		INTERNAL STATIC DATA	*/

dcl  cur_dir_name char (168)                                /* Directory name of current symbol dictionary. */
     internal static init (" ");
dcl  cur_ent_name char (32)      			/* Entry name of current symbol dictionary. */
     internal static init (" ");
dcl  cur_ssd_ptr ptr				/* Pointer to current symbol dictionary. */
     internal static init (null ());

dcl  new_line char (1)				/* Used to set up delimiter string. */
     internal static init ("
");

dcl  default_prefixes char (2)			/* Under, upper. */
     internal static init ("_|");

dcl  default_suffixes char (5)			/* Plural, ing, ed, ly, able. */
     internal static init ("+-*=|");

dcl  default_escapes char (5)				/* Pad, perm, temp, trans, space */
     internal static init ("`~:;");

dcl  default_delimiters char (12)			/* Default delimiters:  ,?!"()<>[]{} */
     internal static init (",""()?!<>[]{}");


/*		EXTERNAL ENTRIES CALLED	*/

dcl (addr, index, null, size, substr) builtin;

dcl  error_table_$bad_arg fixed bin (35) external;
dcl  error_table_$no_w_permission fixed bin (35) external;
dcl  error_table_$noentry fixed bin (35) external;
dcl  error_table_$unimplemented_version fixed bin (35) external;

dcl  clock_ entry returns (fixed bin (71));
dcl  com_err_ entry options (variable);
dcl  command_query_ entry options (variable);
dcl  hcs_$chname_seg entry (ptr, char(*), char(*), fixed bin(35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin(35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin(19), fixed bin(35));
dcl  ioa_	entry() options(variable);
dcl  nd_handler_ entry (char(*), char(*), char(*), fixed bin(35));
dcl  speedtype_info_$set_bc entry (ptr, fixed bin (35));
dcl  user_info_$homedir entry (char (*));
dcl  user_info_$whoami entry (char (*), char (*), char (*));
						/* 	*/
%include speedtype_symbols;
/* 	*/
use:	entry (arg_dir_name, arg_ent_name, arg_ecode);

/*	This entry specifies the pathname of a new symbol dictionary.
   *	The current symbol dictionary (if there is one) is no longer used.
   *	This symbol dictionary is used for all future Speedtype operations
   *	for this process until a new symbol dictionary is specified.
*/
	ssd_ptr = null ();
	cur_dir_name = arg_dir_name;			/* Save pathname of new symbol dictionary. */
	cur_ent_name = arg_ent_name;

	call GET_POINTER;				/* Establish new symbol dictionary. */
	arg_ecode = ecode;
	return;



name:	entry (arg_dir_name, arg_ent_name, arg_ecode);

/*	This entry will return the pathname of the current symbol dictionary.
*/
	call GET_POINTER;
	arg_dir_name = cur_dir_name;			/* Copy current pathname. */
	arg_ent_name = cur_ent_name;
	arg_ecode = ecode;
	return;



pointer:	entry (arg_ssd_ptr, arg_ecode);

/*	This entry is called to return a pointer to the current symbol dictionary.
*/
	call GET_POINTER;				/* Get pointer. */
	arg_ssd_ptr = cur_ssd_ptr;			/* Return current pointer. */
	arg_ecode = ecode;
	return;



set_bc:	entry (arg_ssd_ptr, arg_ecode);

/*	This entry is called to set the bit count of the current symbol dictionary.
*/
	ssd_ptr = arg_ssd_ptr;
	words = size (ssd);				/* Start with the whole segment. */
						/* Subtract unused symbol entries. */
	words = words - ((hbound (sb_tab, 1) - ssd.num_symbols) * size (sb));
	bit_count = words * 36;
	call hcs_$set_bc_seg (ssd_ptr, bit_count, ecode);
	if ecode ^= 0
	then call com_err_ (ecode, "Speedtype", "Error setting bit count of symbol dictionary.");
	arg_ecode = ecode;
	return;

expand_table:
	entry (arg_ssd_ptr, arg_ecode);

/*        This entry is called to add 100 more entries to the symbol dictionary. */

	ssd_ptr = arg_ssd_ptr;
	call EXPAND;
	arg_ecode = ecode;
	return;

shrink_table:
	entry (arg_ssd_ptr, arg_ecode);

/* This entry is called to remove the last 100 from the symbol dictionary. */

	ssd_ptr = arg_ssd_ptr;
	call SHRINK;
	arg_ecode = ecode;
	return;
	

GET_POINTER: procedure;

/*	This procedure is called to get a pointer to the current symbol dictionary.
*/
	     ecode = 0;
	     if cur_ent_name = " "			/* Have we been told what symbol dictionary to use? */
	     then do;				/* No, use default symbol dictionary. */
		call user_info_$homedir (cur_dir_name);
		call user_info_$whoami (cur_ent_name, project, account);
		i = index (cur_ent_name, " ") - 1;	/* Add ".symbols" suffix. */
		cur_ent_name = substr (cur_ent_name, 1, i) || ".symbols";
	     end;

	     call INITIATE_SSD;			/* Initiate symbol dictionary. */
	     if ecode ^= 0 then return;

	     if ssd.identifier ^= "Speedtype_SD"	/* Make sure this is a symbol dictionary. */
	     then do;				/* It is not. */
		call com_err_ (0, "Speedtype", "^a>^a is not a valid Speedtype symbol dictionary",
		     cur_dir_name, cur_ent_name);
		ecode = error_table_$bad_arg;		/* Note error. */
		return;
	     end;

	     if ssd.version ^= ssd_version_2		/* Check for current version. */
	     then do;				/* Not the current version. */
		call CONVERT_VERSIONS;		/* Convert symbol dictionary. */
		if ecode ^= 0 then return;
	     end;

	     cur_ssd_ptr = ssd_ptr;			/* Save current pointer. */

	end GET_POINTER;
						/* 	*/
INITIATE_SSD: procedure;

/*	This procedure is called to initiate the symbol dictionary whose pathname
   *	is defined in internal static.  If this segment does not exist, it is
   *	created.  We will ask the user if he really wants to create this
   *	new symbol dictionary.  If so we will created it and initialize it.
*/
	     call hcs_$initiate (cur_dir_name, cur_ent_name, "", 0, 0, ssd_ptr, ecode);
	     if ssd_ptr ^= null ()			/* Got pointer, assume segment initiated OK. */
	     then do;
		ecode = 0;			/* Make sure no error code. */
		return;
	     end;

	     if ecode ^= error_table_$noentry		/* Fatal error? */
	     then do;				/* Yes, no way to initiate segment. */
		call com_err_ (ecode, "Speedtype", "Unable to get pointer to ^a>^a",
		     cur_dir_name, cur_ent_name);
		return;
	     end;

	     query_info.version = 0;			/* Set up query info. */
	     query_info.yes_no = "1"b;
	     query_info.suppress_name = "0"b;
	     query_info.status_code,
		query_info.other_code = 0;
	     call command_query_ (addr (query_info), answer, "Speedtype",
		"^a>^a not found. ^/Do you want to create it?", cur_dir_name, cur_ent_name);
	     if answer = "no"			/* Does user want new symbol dictionary? */
	     then do;				/* No. */
		ecode = 1;			/* Note that no symbol dictionary segment created. */
		return;
	     end;

	     call hcs_$make_seg (cur_dir_name, cur_ent_name, "", 01010b, ssd_ptr, ecode);
	     if ecode ^= 0				/* Did we create segment successfully? */
	     then do;				/* No, fatal error. */
		call com_err_ (ecode, "Speedtype", "Unable to create ^a>^a", cur_dir_name, cur_ent_name);
		return;
	     end;

	     call INIT_SSD_SEG;			/* Initialize the new symbol dictionary. */

	     call speedtype_info_$set_bc (ssd_ptr, ecode); /* Set bit count of new symbol dictionary. */

	end INITIATE_SSD;
						/* 	*/
INIT_SSD_SEG: procedure;

/*	This procedure is called to initialize a Speedtype symbol dictionary.
   *	Default values will be used for all fields.
*/

	     ssd.version = ssd_version_2;		/* Initialize header of new symbol dictionary. */
	     ssd.flags = "0"b;
	     delim_ptr = addr (ssd.delimiters);		/* Set up overlay of delimiter string. */
	     delim_chars.blank = " ";			/* Now fill in delimiter characters. */
	     delim_chars.new_line = new_line;
	     delim_chars.tab = "	";
	     delim_chars.escapes = default_escapes;	/* Escapes are delimiters too. */
	     delim_chars.others = default_delimiters;
	     ssd.escapes = default_escapes;		/* Now set up default special characters. */
	     ssd.prefixes = default_prefixes;
	     ssd.suffixes = default_suffixes;
	     ssd.num_symbols = 0;			/* No symbols defined yet. */
	     ssd.identifier = "Speedtype_SD";		/* Mark this as a symbol dictionary. */
	     ssd.table_size = 100;                        /* Allocate 100 symbols initially. */

	end INIT_SSD_SEG;
						/* 	*/
CONVERT_VERSIONS: procedure;

/*	This procedure is called to convert old versions of symbol dictionaries into
   *	the current version.
*/

dcl old_ssd_ptr ptr;

dcl    1	old_ssd  based(old_ssd_ptr) aligned,	/* Format of a Speedtype Symbol Dictionary. */
	2  version	fixed bin,	/* Version number.  Currently = 1. */
	2  identifier	char(12),		/* "Speedtype_SD" => this is a Speedtype Symbol Dictionary. */
	2  flags		bit(36),		/* Not used, all zero. */
	2  delimiters	char(24),		/* Blank, New Line, Tab, Escapes, Others. */
	2  escapes	char(5), 		/* Pad, Perm, Temp, Trans, Space */
	2  prefixes	char(2),		/* Under, Upper. */
	2  suffixes	char(5),		/* Plural, ed, ing, er, ly. */
	2  num_symbols	fixed bin,	/* Number of defined symbols. */
	2  pad(15)	bit(36),		/* Round out header to 32 words. */
	2  sb_tab(1008) like  sb,	/* Symbol entries. */
	2  exp_tab(1008) like  exp;	/* Expansion entries. */
 
dcl no_write_permission condition;
	        
	        on no_write_permission goto nowrite;
	        
	        old_ssd_ptr = ssd_ptr;

	        call hcs_$make_seg ("", "speedtype_scratch", "", 01010b, ssd_ptr, ecode);
	        if ssd_ptr = null() 
		   then return;

	        ssd.version = ssd_version_2;
	        ssd.identifier = old_ssd.identifier;
	        ssd.flags = old_ssd.flags;
	        ssd.delimiters = old_ssd.delimiters;
	        ssd.escapes = old_ssd.escapes;
	        ssd.prefixes = old_ssd.prefixes;
	        ssd.suffixes = old_ssd.suffixes;
	        ssd.num_symbols = old_ssd.num_symbols;
	        ssd.table_size = (divide(old_ssd.num_symbols,100,17,0)+1)*100;
	        do i = 1 to old_ssd.num_symbols;
		   ssd.exp_tab(i) = old_ssd.exp_tab(i);
		   ssd.sb_tab(i) = old_ssd.sb_tab(i);
                  end;
	        words = words - ((hbound (spec_tab, 1) - ssd.num_symbols) * size (spc));
	        old_ssd_ptr -> ssd = ssd;

	        call hcs_$delentry_seg (ssd_ptr, ecode);
	        if ecode ^= 0
		   then return;

	        ssd_ptr = old_ssd_ptr;

	        call speedtype_info_$set_bc (ssd_ptr, ecode);
	        
	        return;

nowrite:	        call hcs_$delentry_seg (ssd_ptr, ecode);
	        ecode = error_table_$no_w_permission;
	        
	        return;

	end CONVERT_VERSIONS;

EXPAND:	proc;

dcl (a, b, c) fixed;
dcl  1  new_ssd  based(ssd_ptr) aligned,
	2  pad (32) bit(36),
	2  spec_tab (a) like spc,
	2  exp_tab (b) like exp,
	2  sb_tab (c) like sb;

	a,b = ssd.table_size + 100;
	c = ssd.table_size;
	new_ssd.sb_tab = ssd.sb_tab;
	b = ssd.table_size;
	do i = b to 1 by -1;			/* Must go backwards so as not */
	     new_ssd.exp_tab (i) = ssd.exp_tab (i);	/* to overlay any data */
	end;
	ecode = 0;
	ssd.table_size = ssd.table_size + 100;
     end;

SHRINK:	proc;

dcl  (a,b,c) fixed;
dcl  1  old_ssd  based(ssd_ptr) aligned,
	2  pad (32) bit(36),
	2  spec_tab (a) like spc,
	2  exp_tab (b) like exp,
	2  sb_tab (c) like sb;

	ssd.table_size = ssd.table_size - 100;
	a = ssd.table_size + 100;
	b = ssd.table_size;
	ssd.exp_tab = old_ssd.exp_tab;
	b = ssd.table_size + 100;
	c = ssd.table_size;
	ssd.sb_tab = old_ssd.sb_tab;	     
	ecode = 0;

     end;

     end speedtype_info_;
