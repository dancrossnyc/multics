/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

speedtype_expand_: procedure (arg_in_ptr, arg_in_len, arg_out_ptr, arg_out_len, arg_out_used, arg_ecode);

/*	This procedure is an internal and external interface of the Speedtype subsystem.
   *	Created on 12/29/75 by Bill Silver as notescript_expand_.
   *	Changed on 06/13/77 by Bill Silver to speedtype_expand_.
   *      Changed on 06/03/80 by Paul Benjamin to add special suffixing.
*/
/*		ARGUMENTS			*/

dcl  arg_ecode fixed bin (35);			/* (O) error_table code. */
dcl  arg_in_len fixed bin (21);			/* (I) Length of input string in characters. */
dcl  arg_in_ptr ptr;				/* (I) Pointer to input string. */
dcl  arg_out_len fixed bin (21);			/* (I) Length of output buffer in characters. */
dcl  arg_out_ptr ptr;				/* (I) Pointer to output buffer. */
dcl  arg_out_used fixed bin (21);			/* (O) Actual length of output in characters. */


/*		AUTOMATIC DATA		*/

dcl  symbol_buffer char (8);				/* Holds symbol string. */
dcl  exp_buffer char (300);				/* Holds modified expansion. */

dcl  continue_flag bit (1);				/* ON => continue prefix processing. */
dcl  convert_flag bit (1);				/* ON => convert perm escape to pad escape. */
dcl  escape_flag bit (1);				/* ON => escape next text token. */
dcl  first_flag bit (1);				/* ON => first letter of symbol is a capital. */
dcl  period_flag bit (1);				/* ON => last character of symbol is a period. */
dcl  prefix_flag bit (1);				/* ON => symbol preceded by prefix character(s). */
dcl  under_flag bit (1);				/* ON => underline processing. */
dcl  upper_flag bit (1);				/* ON => uppercase processing. */

dcl  actionx fixed bin;				/* Used to process suffixes. */
dcl  ecode fixed bin (35);				/* Error table code. */
dcl  first_char_ptr ptr;				/* Pointer to first output character. */
dcl  i fixed bin;
dcl  in_len fixed bin (21);				/* Length of unused part of input string. */
dcl  in_ptr ptr;					/* Pointer to input string. */
dcl  in_used fixed bin;				/* Length of used part of input string. */
dcl  last_char char (1);				/* Used for adding "ing". */
dcl  sb_tab_len fixed bin;				/* Length of defined symbol entry table. */
dcl  sb_tab_ptr ptr;				/* Pointer to symbol table. */
dcl  sbx fixed bin;					/* Symbol table entry index. */
dcl  out_len fixed bin (21);				/* Length of actual output. */
dcl  out_ptr ptr;					/* Pointer to output string. */
dcl  out_used fixed bin (21);				/* Length of used part of output string. */
dcl  space_count fixed bin;				/* Number of spaces to add. */
dcl  startx fixed bin;				/* Start of underscore triplet in work buffer. */
dcl  suffix char (4) varying;				/* Used to add a suffix string. */
dcl  suffix_len fixed bin;				/* Length of the suffix string. */
dcl  suffixx fixed bin;				/* Index of suffix character. */
dcl  symbol_len fixed bin;				/* Length of actual symbol. */
dcl  symbol_ptr ptr;				/* Pointer to actual symbol. */
dcl  test_char char (1);
dcl  token_len fixed bin;				/* Length of one token. */
dcl  token_ptr ptr;					/* Pointer to a token. */
dcl  x fixed bin;


/*		BASED DATA		*/

dcl 1 input based (in_ptr) aligned,			/* Overlay of input string. */
    (2 used char (in_used),				/* Part of segment that has been processed. */
    2 text char (in_len)) unaligned;			/* Part of segment still to be processed. */

dcl 1 output based (out_ptr) aligned,			/* Overlay of output string. */
    (2 used char (out_used),				/* Part of segment that has been processed. */
    2 text char (1)) unaligned;			/* Beginning of unprocessed part. */

dcl  sb_table char (sb_tab_len) based (sb_tab_ptr) aligned;

dcl  symbol char (symbol_len) based (symbol_ptr);		/* Overlay of actual symbol. */
dcl  token char (token_len) based (token_ptr);		/* Overlay of one token string. */

dcl  token_first_char char (1) based (token_ptr);


/*		INTERNAL STATIC DATA	*/

dcl  spaces char (99)				/* Used to fill in spaces. */
     internal static init (" ");

dcl  backspace char (1)				/* Used to underscore a token. */
     internal static init ("");

dcl  caps char (26) aligned				/* Capital letters in frequency order. */
     internal static init ("EAIOUSTCYHNLMRWFGPBDJQKXVZ");

dcl  lowers char (26) aligned				/* Lower case letters in the same order. */
     internal static init ("eaioustcyhnlmrwfgpbdjqkxvz");

dcl  suffix_strings (5) char (4) varying aligned
     internal static init ("s", "ed", "ing", "er", "ly");

dcl  period char (1)				/* Used to move a period character. */
     internal static init (".");


/*		EXTERNAL ENTRIES		*/

dcl (addr, fixed, index, length, search, substr, verify) builtin;

dcl  error_table_$item_too_big fixed bin (35) external;

dcl  speedtype_info_$pointer entry (ptr, fixed bin (35));
						/* 	*/
%include speedtype_symbols;
/* 	*/
/*	Begin Expansion
*/
	in_ptr = arg_in_ptr;			/* Copy arguments and initialize. */
	in_len = arg_in_len;
	out_ptr = arg_out_ptr;
	out_len = arg_out_len;

	in_used,
	     out_used,
	     ecode = 0;

	call INIT_SYMBOL_DICT;			/* Set up to use current Speedtype symbol dictionary. */
	if ecode ^= 0 then goto RETURN;

	do while ((in_len > 0) & (ecode = 0));		/* Copy input to output until no more input. */
	     call COPY_DELIMITERS;			/* Copy all delimiters up to next token. */
	     call COPY_TEXT;			/* Copy next text token. */
	end;

RETURN:
	arg_out_used = out_used;			/* Return number of chars in output string. */
	arg_ecode = ecode;
	return;





MOVE_OUT:	procedure;

/*	This procedure is called to move the current token string
   *	into the output string.  It will make sure that there is
   *	enough room in the output string.
*/
	     if token_len = 0 then return;		/* No token => nothing to do. */

	     if (out_used + token_len) > out_len	/* Is there room for this output? */
	     then do;				/* No. */
		token_len = out_len - out_used;	/* Make equal to actual length of token moved. */
		ecode = error_table_$item_too_big;
	     end;

	     addr (output.text) -> token = token;	/* Copy token into output. */

	     out_used = out_used + token_len;		/* Move output pointer over token. */

	end MOVE_OUT;
						/* 	*/
COPY_DELIMITERS: procedure;

/*	This procedure is called to copy all delimiters up to the next token
   *	or up to the end of the input string.
*/
	     token_ptr = addr (input.text);		/* Copy delimiters as a token. */
	     token_len = verify (input.text, ssd.delimiters); /* Position to next non-delimiter character. */

	     if token_len > 0			/* Did we hit a real token? */
	     then token_len = token_len - 1;		/* Yes, get real length of delimiter token. */
	     else token_len = in_len;			/* No, we hit the end of the input string. */

	     if token_len = 0 then return;		/* If no delimiters return. */

	     in_used = in_used + token_len;		/* Move window on input string. */
	     in_len = in_len - token_len;

	     call CHECK_ESCAPES;			/* Process any escape delimiters. */

	     call MOVE_OUT;				/* Copy delimiters into output string. */

	     if convert_flag			/* Was there a perm escape? */
	     then do;				/* Yes, convert to pad escape. */
		substr (output.used, out_used, 1) = substr (ssd.escapes, 1, 1);
		convert_flag = "0"b;
	     end;

	     if continue_flag			/* Was there a trans escape? */
	     then continue_flag = "0"b;		/* Yes, just turn off flag. */
	     else do;				/* No, turn off all prefix flags. */
		under_flag = "0"b;
		upper_flag = "0"b;
	     end;

	     if space_count = 0 then return;		/* If no spacing, all done. */

	     token_ptr = addr (spaces);		/* Prepare to move the specified number of spaces. */
	     token_len = space_count;
	     call MOVE_OUT;				/* Move the spaces. */
	     space_count = 0;			/* Reset this counter/flag. */

	end COPY_DELIMITERS;
						/* 	*/
CHECK_ESCAPES: procedure;

/*	This procedure is called to check the last character in a delimiter string
   *	to see if it is an escape.  If so, special processing must be done.
   *	The escape flag will be ON if the following term is to be escaped.
*/
/* See if last delimiter is an escape. */
	     x = index (ssd.escapes, substr (token, token_len, 1));

	     goto ESCAPE (x);			/* Go process escape accordingly. */

ESCAPE (0):					/* NONE */
	     return;

ESCAPE (1):					/* PAD */
	     escape_flag = "1"b;
	     return;				/* Nothing to do, next token is escaped. */

ESCAPE (2):					/* PERMANENT */
	     convert_flag,				/* After move, convert to pad escape. */
		escape_flag = "1"b;
	     return;

ESCAPE (3):					/* TEMPORARY */
	     escape_flag = "1"b;
	     token_len = token_len - 1;		/* This escape character not copied. */
	     return;

ESCAPE (4):					/* TRANSPARENT */
	     continue_flag = "1"b;			/* Continue any prefix processing. */
	     token_len = token_len - 1;		/* Don't copy transparent escape character. */
	     return;

ESCAPE (5):					/* SPACE */
	     if in_len = 0 then return;		/* If no more input then all done. */

	     x = verify (input.text, "0123456789") -1;	/* Get following numeric characters. */
	     if (x < 1) | (x > 2)			/* Space count must be from 1 to 99. */
	     then return;				/* Not a valid space count. */

	     space_count = fixed (substr (input.text, 1, x));

	     in_used = in_used + x;			/* Skip over space count characters. */
	     in_len = in_len - x;

	     token_len = token_len - 1;		/* Delete space escape delimiter. */
	     return;

	end CHECK_ESCAPES;
						/* 	*/
COPY_TEXT: procedure;

/*	This procedure will copy one real token from the input string to the
   *	output string.  A real token is defined as a string with no delimiters.
   *	We will check to see if this token is a defined symbol in the current
   *	Speedtype symbol dictionary.  If it is we will copy its expansion.
*/
	     if (in_len = 0) |			/* Have we reached the end of the input string? */
	     (ecode ^= 0)				/* Or was there an error? */
	     then return;				/* Yes, no copy needed. */

	     token_ptr = addr (input.text);		/* Token starts with beginning of input data. */
	     token_len = search (input.text, delimiters); /* Ends with next delimiter. */

	     if token_len > 0			/* Did we hit a delimiter? */
	     then token_len = token_len - 1;		/* Yes, get real length of token. */
	     else token_len = in_len;			/* No, we hit the end of the input string. */

	     in_used = in_used + token_len;		/* Move window on input string. */
	     in_len = in_len - token_len;

	     call GET_SYMBOL;			/* Get expanded or unexpanded symbol. */

	     first_char_ptr = addr (output.text);	/* Remember where first output character will be. */
	     call MOVE_OUT;				/* Copy token into output string. */
	     if ecode ^= 0 then return;		/* Check for end of output seg. */

	     if first_flag				/* Do we have to replace the first character? */
	     then do;				/* Yes, translate 1st char of expansion. */
		x = index (lowers, token_first_char);
		if x ^= 0				/* If a lowercase letter make uppercase. */
		then first_char_ptr -> token_first_char = substr (caps, x, 1);
		first_flag = "0"b;
	     end;
	     if upper_flag				/* Uppercase processing? */
	     then do;				/* Yes, convert lowercase to uppercase. */
		token_ptr = first_char_ptr;		/* Process expansion in output string. */
		do i = 1 to token_len;		/* Test each text character copied. */
		     x = index (lowers, substr (token, i, 1));
		     if x ^= 0			/* Is this character a lowercase letter? */
		     then substr (token, i, 1) = substr (caps, x, 1);
		end;
	     end;
	     if under_flag				/* Underline processing? */
	     then do;				/* Yes. */
		call UNDERLINE;
		if ecode ^= 0 then return;
	     end;
	     if period_flag				/* Did symbol have a trailing period? */
	     then do;				/* Yes. */
		token_ptr = addr (period);		/* Copy a period into output string. */
		token_len = 1;
		call MOVE_OUT;
		period_flag = "0"b;
	     end;

	end COPY_TEXT;
						/* 	*/
GET_SYMBOL: procedure;

/*	This procedure will test the current token to see if it is a defined
   *	symbol in the current Speedtype symbol dictionary.  If it is, the expansion
   *	of this symbol will be copied instead.  Special processing of the leading
   *	and trailing characters of the token is performed:
   *	     1.	If the last delimiter character was the escape character then the
   *		token is without expansion.
   *	     2.	If the first characters of the token are prefix characters,
   *		then these prefix character are stripped from the token.
   *		The output string for this token (expanded or not) is
   *		processed as specified by these prefixes.
   *	     3.	If the last character of the text token is a period ".",
   *		then the period is temporarily stripped from the token.
   *	     4.	If the last character (after any period is stripped) is a
   *		suffix character, then this character is stripped off and
   *		suffixing is specified.
   *	     5.	Before testing to see if this token is a defined symbol we
   *		will translate the first character to lower case if it is an
   *		upper case letter.  The original character will be replaced
   *		in the expanded string.
   *	     6.	If the last character in the token was a suffix character then the
   *		expansion, if there is one, has the specified suffix added.
*/
	     if escape_flag				/* Is this token to be escaped? */
	     then do;				/* Yes, copy as is. */
		escape_flag = "0"b;
		return;
	     end;

	     symbol_len = token_len;			/* Now, symbol = text token. */
	     symbol_ptr = token_ptr;

	     prefix_flag = "1"b;			/* Turn ON to get into the loop. */
	     do while (prefix_flag);			/* Process all prefix characters. */
		x = index (ssd.prefixes, substr (symbol, 1, 1));
		if x = 0				/* Is there a prefix? */
		then prefix_flag = "0"b;		/* No. */
		else do;				/* Yes, remember to process this prefix. */
		     if symbol_len = 1		/* Is the symbol just the prefix? */
		     then return;			/* Yes, it is not a valid symbol. */
		     symbol_ptr = addr (substr (symbol, 2, 1)); /* Strip prefix character from symbol. */
		     symbol_len = symbol_len - 1;
		     if x = 1			/* Which prefix is it? */
		     then under_flag = "1"b;
		     else upper_flag = "1"b;
		end;
	     end;

	     if substr (symbol, symbol_len, 1) = "."	/* Is there a trailing period? */
	     then do;				/* Yes. */
		if symbol_len = 1			/* Is the symbol just the period? */
		then do;				/* Yes, it is an invalid symbol. */
		     under_flag,			/* Turn off prefix processing. */
			upper_flag = "0"b;
		     return;
		end;
		symbol_len = symbol_len - 1;		/* Strip off period. */
		period_flag = "1"b;			/* Remember period. */
	     end;

	     suffixx = index (ssd.suffixes, substr (symbol, symbol_len, 1));
	     if suffixx > 0				/* Is last character of symbol a suffix? */
	     then do;				/* Yes. */
		if symbol_len = 1			/* Is symbol just a suffix? */
		then return;			/* Yes, an invalid symbol. */
		symbol_len = symbol_len - 1;		/* Strip off suffix character. */
	     end;

/* We now have found the symbol. */
	     if symbol_len > 7			/* Is symbol too long? */
	     then do;				/* Yes, an invalid symbol. */
		token_ptr = symbol_ptr;		/* make the token be the symbol */
		if suffixx > 0
		then token_len = symbol_len+1;	/* put back a suffix if it was there */
		else token_len = symbol_len;
		return;
	     end;

	     sb.symbol = symbol;			/* Copy symbol into symbol buffer. */

	     x = index (caps, substr (sb.symbol, 1, 1));	/* Check for capitalization. */
	     if x ^= 0				/* Is first character a capital letter? */
	     then do;				/* Yes, translate to lowercase. */
		substr (sb.symbol, 1, 1) = substr (lowers, x, 1);
		first_flag = "1"b;			/* Note special first character processing. */
	     end;

	     sbx = index (sb_table, symbol_buffer);	/* Search for symbol in symbol table. */
	     if sbx = 0				/* Did we find it? */
	     then do;				/* No, symbol is not defined. */
		token_ptr = symbol_ptr;		/* Copy symbol within text token. */
		if suffixx > 0			/* Put back suffix character if there was one. */
		then token_len = symbol_len + 1;
		else token_len = symbol_len;
		first_flag = "0"b;			/* No capitialization needed. */
		return;
	     end;

	     sbx = ((sbx -1) / 8) + 1;		/* Convert string index to table index. */
	     exp_ptr = addr (ssd.exp_tab (sbx));	/* Get pointer to corresponding expansion. */

	     if suffixx = 0				/* Was a suffix character specified? */
	     then do;				/* No, copy expansion as is. */
		token_ptr = addr (exp.expansion);	/* Replace token with this expansion. */
		token_len = exp.len;		/* Get actual length of expansion string. */
		return;
	     end;

	     actionx = exp.actionx (suffixx);		/* Index => how to add suffix. */

	     if actionx = 0				/* 0 => no expansion, no suffix. */
	     then do;				/* Copy as if symbol not defined. */
		token_ptr = symbol_ptr;
		if suffixx > 0
		then token_len = symbol_len + 1;
		else token_len = symbol_len;
		first_flag = "0"b;			/* No modification. */
		return;
	     end;

	     exp_buffer = exp.expansion;		/* Move expansion so we can add a suffix. */
	     token_ptr = addr (exp_buffer);		/* We will copy from this buffer. */

	     goto ACTION (actionx);			/* Add suffix according to specified suffix type. */

ACTION (6):					/* Add "e", then add suffix. */
	     token_len = exp.len + 1;
	     substr (token, token_len, 1) = "e";
	     goto ADD_SUFFIX;

ACTION (5):					/* Replace last char with "ie", then add suffix. */
	     token_len = exp.len + 1;
	     substr (token, (token_len - 1), 2) = "ie";
	     goto ADD_SUFFIX;

ACTION (4):					/* Replace last char with "i", then add suffix. */
	     token_len = exp.len;
	     substr (token, token_len, 1) = "i";
	     goto ADD_SUFFIX;

ACTION (3):					/* Double last letter. */
	     last_char = substr (token, exp.len, 1);
	     token_len = exp.len + 1;
	     substr (token, token_len, 1) = last_char;
	     goto ADD_SUFFIX;			/* Now go add suffix string. */

ACTION (2):					/* Drop last letter. */
	     token_len = exp.len - 1;
	     goto ADD_SUFFIX;

ACTION (1):					/* Add suffix directly. */
	     token_len = exp.len;
	     goto ADD_SUFFIX;

ACTION (7):                                                 /* User has supplied his own suffixed word. */    
	     spc_ptr = addr (ssd.spec_tab (sbx));
	     token_len = length(rtrim(spc.special(suffixx)));
	     token = spc.special(suffixx);
	     return;

ADD_SUFFIX:					/* Add suffix to expanded string. */
	     suffix = suffix_strings (suffixx);		/* Get the suffix string to add. */
	     suffix_len = length (suffix);		/* Get length of this suffix. */
	     substr (token, (token_len + 1), suffix_len) = suffix;
	     token_len = token_len + suffix_len;

	end GET_SYMBOL;
						/* 	*/
UNDERLINE: procedure;

/*	This procedure is called to underline the current text token.
   *	The text token has already been copied into the output string.
   *	This procedure copies it back into a work buffer.  This is done
   *	character by character.  Each character copied is underlined in
   *	accordance with canonical form.
*/
	     token_ptr = first_char_ptr;		/* Token already copied into output string. */

	     if index (token, backspace) ^= 0		/* Is there any backspace in this string? */
	     then return;				/* Yes, asume already underlined. */

	     startx = 1;				/* Initialize place in expansion buffer. */
	     do i = 1 to token_len;			/* Copy each character in output string. */
		if (startx + 3) > length (exp_buffer)	/* Is there room in work buffer? */
		then do;
		     ecode = error_table_$item_too_big;
		     return;
		end;
		test_char = substr (token, i, 1);	/* Save the current character. */
		if (test_char = " ") |		/* Special case blanks and underscore. */
		(test_char = "_")
		then do;				/* Relpace with just one underscore. */
		     substr (exp_buffer, startx, 1) = "_";
		     startx = startx + 1;
		end;
		else if test_char = ""		/* Test for PAD character. */
		then do;				/* Copy without underlining. */
		     substr (exp_buffer, startx, 1) = test_char;
		     startx = startx + 1;
		end;
		else if test_char < "_"		/* Less than or greater than underscore? */
		then do;				/* Less than, => character first. */
		     substr (exp_buffer, startx, 3) = test_char || backspace || "_";
		     startx = startx + 3;

		end;
		else do;				/* Greater than => underscore first. */
		     substr (exp_buffer, startx, 3) = "_" || backspace || test_char;
		     startx = startx + 3;
		end;
	     end;

	     out_used = out_used - token_len;		/* Back up the real output string. */
	     token_ptr = addr (exp_buffer);		/* Copy underlined string in expansion buffer. */
	     token_len = startx - 1;			/* Get actual length of underlined string. */
	     call MOVE_OUT;				/* Move underlined string to output string. */

	end UNDERLINE;
						/* 	*/
INIT_SYMBOL_DICT: procedure;

/*	This procedure will get a pointer to the Speedtype symbol dictionary
   *	currently in use.  It will set up the overlays used to search the
   *	symbol entry table.
*/
	     call speedtype_info_$pointer (ssd_ptr, ecode);
	     if ecode ^= 0 then return;

	     sb_tab_len = ssd.num_symbols * 8;		/* Get length of all entries actually used. */
	     sb_tab_ptr = addr (ssd.sb_tab);		/* Get pointer to beginning of the table. */

	     sb_ptr = addr (symbol_buffer);		/* Get pointer to work symbol entry. */
	     sb.new_line = "
";						/* Set new line in work symbol entry. */

	     continue_flag,				/* Initialize flags. */
		convert_flag,
		escape_flag,
		first_flag,
		period_flag,
		under_flag,
		upper_flag = "0"b;

	     space_count = 0;

	end INIT_SYMBOL_DICT;

     end speedtype_expand_;
