"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************


" This module does the actual replication work of the dyadic rho operator.
" The caller passes 3 arguments.  The first is the value bead of the right argument to the
" dyadic rho (for the operand to be replicated).  The second is the value bead of the result,
" with all fields filled.  The third is an array of words (currently only 2 are used) for
" temporary scratch storage for my use.  This avoids a push. The basic algorithm is
" as follows.  If the type field of the result bead indicates a numeric operand the lengths
" of the argument and result arrays are multiplied by 8 (the number of characters
" per doubleword float).  If the arg length is 1, an MVT instruction with a one-character
" translation table is used.  Otherwise, copies of the argument are moved into
" the result field until either the result is filled or until
" 32 chars are created. If 32 chars are created first, with more left to do, an
" overlapping MLR instruction is used to fill the rest.
" See BN-86A-2 (GMAP manual), page 8-31, which says four-double words is the 
" minimum winning overlapping MLR size. (for no particular reason we use 5 double-words as the cutoff).
"
"	a	number of chars done already
"	q	number of chars in argument
"	x4	type field of result, used merely for testing
"	pr1	points to scratch storage passed from caller
"	pr2	points to right arg in copy loop, beginning of result in overlap code
"	pr3	points to result array
"	pr4	points to result value bead
"	pr5	points to argument value bead
"
"
"	Created by G. Gordon Benedict on Jan 23, 1974
"	Modified 741015 by PG to use MVT instruction to replicate a single character.
"	Modified 741101 by PG to fix bug introduced by GGB, and improve code.

	segdef	apl_rho_appendage_


	equ	dupl_vb,2			ptr to value bead for arg to duplicate
	equ	result_vb,4		ptr to value bead for result arg
	equ	automatic_storage,6		offset in args of temp storage from caller

	include	apl_value_bead

	equ	no_arg_chars,0		no. chars in arg
	equ	no_to_create,1		no. chars in result

apl_rho_appendage_:
	epp5	pr0|dupl_vb,*		get pointer to value bead to arg
	epp4	pr0|result_vb,*		get pointer to value bead to result
	epp1	pr0|automatic_storage,*	ptr to scratch space from caller

	lprp2	pr5|value_bead.data_pointer	get pointer to data array from arg v.b.
	lprp3	pr4|value_bead.data_pointer	same for result
	ldx4	pr4|value_bead.header.type	get type of result
	lda	pr4|value_bead.total_data_elements	get no. of elements in result
	tze	return		wants null string, has it.

	ldq	pr5|value_bead.total_data_elements	get number of elements in arg
	canx4	=o400,du		is it char?
	tnz	2,ic		yes
	lls	3		times 8 (# chars/double float)
	sta	pr1|no_to_create	number of chars to create
	stq	pr1|no_arg_chars	number of chars in input arg
	cmpq	1,dl		if arg length is 1, can special case
	tnz	long_case		use general code.

	mvt	(),(pr,rl),fill(000)	move fill char
	arg	0		(because no source chars)
	desc9a	pr3|0,al		into target
	arg	pr2|0		translate table is input arg of 1 char.
	short_return		all done.

long_case:
	cmpa	pr1|no_arg_chars	if asking for less than already have,
	tpl	3,ic		move only number needed.
	sta	pr1|no_arg_chars	update stored value
	ldq	pr1|no_arg_chars	and copy in register
	lda	0,dl		have done 0 chars so far.
"				Q has no_arg_chars.

duplicate:
	cmpa	pr1|no_to_create	up to limit?
	tpl	return		yes.
	mlr	(pr,rl),(pr,rl,al),fill(000)	move one chunk of no_arg_chars
	desc9a	pr2|0,ql		from source
	desc9a	pr3|0,ql		to target
	ada	pr1|no_arg_chars	update offset
	cmpa	40,dl		moved 5 double words yet?
	tmi	duplicate		nope, keep going.

	lprp2	pr4|value_bead.data_pointer	reset for overlapping mlr.
	ssa	pr1|no_to_create	compute remaining # to move.
	lcq	pr1|no_to_create	get in q.
	tmoz	return		done.
	mlr	(pr,rl),(pr,rl,al),fill(000)	move remainder..overlapped!
	desc9a	pr2|0,ql		source is now base of target itself
	desc9a	pr3|0,ql		to target.

return:
	short_return
	end
