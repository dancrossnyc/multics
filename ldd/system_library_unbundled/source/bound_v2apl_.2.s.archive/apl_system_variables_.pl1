/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

apl_system_variables_:
     procedure (operators_argument);

/*
 * this module handles referencing and setting of "system variables,"
 * i.e. variables whose names begin with a Quad.
 * it also contains code for the monadic ibeams
 *
 * written 20 July 1973 and 1 August 1973 by DAM
 * modified 8/9/73 by DAM to fix bugs.
 * modified 12/17/73 by PG to fix bugs & add QuadIT.
 * Modified 740910 by PG for installation.
   Modified 770415 by PG to cleanup qTT, and add cent-sign to qCS.
   Modified 771107 by PG to fix 291 (some ibeams weren't returning integers).
   Modified 771121 by PG to validate op1 before jumping into transfer vector.
   Modified 781128 by PG to have quote-quad generate a proper value_bead for scalar results.
   Modified 781129 by PG to use clock and vclock builtins.
   Modified 790911 by PG to update list of terminal names.
   Modified 820827 by AD to add comma-hyphen to qCS.
 */

/* automatic */

dcl	apl_number	float,
	code		fixed bin (35),
	fixnum		fixed bin (35),
	float_temp	float,
	n_words		fixed bin (19),
	result_vb		pointer,
	result		pointer,
	right_vb		pointer,
	data_elements	fixed bin (21),
	iostatus		bit (72) aligned,
	month		fixed bin,
	day		fixed bin,
	year		fixed bin,
	time_of_day	fixed bin (71),
	double_fix	fixed bin (71),
	hour		fixed bin,
	minute		fixed bin,
	second		fixed bin,
	millisecond	fixed bin,
	result_pos	fixed bin (21),
	pass		fixed bin,
	p		pointer,
	tty_name		char (32) aligned,
	type_field	bit (18),
	parse_frame_ptr	pointer,			/* just to satisfy danb's include file */
	rhorho		fixed bin,
	nelemt		fixed bin (21),
	quad_quote_input_buffer
			char (300) aligned;		/* seems about right for maximum length of input line */

/* based */

declare	word_copy_overlay	(n_words) fixed bin (35) based;

/* entries */

dcl	apl_copy_value_	entry (unaligned pointer, unaligned pointer),
	apl_free_bead_	entry (unaligned pointer),
	decode_clock_value_ entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin (71), fixed bin,
			char (4) aligned),
	iox_$control	entry (ptr, char (*), ptr, fixed bin (35)),
	iox_$get_line	entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
	system_info_$users	entry (fixed bin, fixed bin (35)),
	apl_get_storage_usage_
			entry (fixed bin (35));

/* external static */

declare	(apl_error_table_$bad_assign_to_system_var, apl_error_table_$domain, apl_error_table_$unknown_system_var)
			fixed bin (35) external static;

declare	apl_static_$apl_input
			ptr external static;

/* internal static */

dcl	microseconds_per_60th
			float bin (63) internal static initial (16666.66666666666667e0);
dcl	microseconds_per_millisecond
			float bin (63) internal static initial (1e3);
dcl	microseconds_per_second
			float bin (63) internal static initial (1e6);

dcl	terminal_names	(-11:5) char (10) unal internal static
			init ("LA36", "BITPAIRED", "TYPEPAIRED", "ARDS", "TN300", "Absentee", "1030", "TELERAY11",
			"ASCII", "TELETYPE", "TEK4013", "", "CORR2741", "2741", "1050", "3270-DAF", "3270");

/* builtins */

declare	(abs, addr, addrel, clock, collate9, currentsize, divide, fixed, float, floor, hbound, lbound, length, null, rel,
	size, string, substr, vclock)
			builtin;

/* include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_bead_format;
%include apl_value_bead;
%include apl_operators_argument;
%include apl_operator_bead;
%include apl_parse_frame;

	if operators_argument.op1 >= lbound (set, 1) & operators_argument.op1 <= hbound (set, 1)
	then go to set (operators_argument.op1);
	else if operators_argument.op1 >= lbound (get, 1) & operators_argument.op1 <= hbound (get, 1)
	then go to get (operators_argument.op1);
	else go to system_error;

get (2):						/* QuadCT - get the fuzz */
	apl_number = ws_info.fuzz;
	go to return_apl_number;


set (106):					/* QuadCT - set the fuzz */
	call get_scalar_float;
	if apl_number < 0
	then go to domain_error;
	else if apl_number > 1
	then go to domain_error;
	ws_info.fuzz = apl_number;
	return;					/* parse knows that assign operators return their operand */

get (3):						/* QuadIO - get the index origin */
	fixnum = ws_info.index_origin;
	go to return_fixnum;

set (107):					/* QuadIO - set the index origin */
	call get_scalar_fix;
	if fixnum ^= 0
	then if fixnum ^= 1
	     then go to domain_error;
	ws_info.index_origin = fixnum;
	ws_info.float_index_origin = float (fixnum);
	return;

get (4):						/* QuadLX - get the latent expression */
	n_words = fixed (ws_info.latent_expression -> value_bead.size);
	result_vb = apl_push_stack_ (n_words);
	result_vb -> word_copy_overlay (*) = ws_info.latent_expression -> word_copy_overlay (*);
	result = addrel (result_vb, currentsize (result_vb -> value_bead));
	result_vb -> value_bead.data_pointer = result;
	operators_argument.result = result_vb;
	return;

set (108):					/* set the latent expression */
	if operands (2).value -> value_bead.character_value
	then ;
	else go to domain_error;
	if operands (2).value -> value_bead.rhorho <= 1
	then ;
	else go to domain_error;

	ws_info.latent_expression -> value_bead.reference_count =
	     ws_info.latent_expression -> value_bead.reference_count - 1;
	if ws_info.latent_expression -> value_bead.reference_count = 0
	then call apl_free_bead_ (ws_info.latent_expression);
	call apl_copy_value_ (operands (2).value, ws_info.latent_expression);
	return;



get (5):						/* QuadPP - get printing-precision */
	fixnum = ws_info.digits;
	go to return_fixnum;


set (109):					/* QuadPP - set printing-precision */
	call get_scalar_fix;
	if fixnum < 1
	then go to domain_error;
	else if fixnum > 19
	then go to domain_error;
	ws_info.digits = fixnum;
	return;

get (6):						/* QuadPW - get print width */
	fixnum = ws_info.width;
	go to return_fixnum;

set (110):					/* QuadPW - set print width */
	call get_scalar_fix;
	if fixnum < 30
	then go to domain_error;
	else if fixnum > 390
	then go to domain_error;
	ws_info.width = fixnum;
	return;

get (7):						/* QuadRL - get random link */
	fixnum = ws_info.random_link;
	go to return_fixnum;


set (111):					/* QuadRL - set random link */
	call get_scalar_fix;
	if fixnum < 0
	then go to domain_error;
	ws_info.random_link = fixnum;
	return;

get (8):						/* QuadAI - get accounting info */
	data_elements = 4;
	call set_vector;

	result -> numeric_datum (0) = float (ws_info.user_number);
	result -> numeric_datum (1) = float (vclock ()) / microseconds_per_millisecond;
	result -> numeric_datum (2) = float (clock () - time_invoked) / microseconds_per_millisecond;
	call iox_$control (apl_static_$apl_input, "get_keying_time", addr (double_fix), code);
	if code ^= 0
	then double_fix = 0;
	result -> numeric_datum (3) = float (double_fix) / microseconds_per_millisecond;
	return;

get (16):						/* QuadIT - get the integer tolerance (integer fuzz) */
	apl_number = ws_info.integer_fuzz;
	go to return_apl_number;


set (120):					/* QuadIT - set the integer tolerance (integer fuzz) */
	call get_scalar_float;
	if apl_number < 0 | apl_number > 1
	then go to domain_error;

	ws_info.integer_fuzz = apl_number;
	return;


/* ibeams that do similar things */

ibeam (29):					/* user number */
	fixnum = ws_info.user_number;
	go to return_fixnum;

ibeam (21):					/* cpu time */
	fixnum = float (vclock ()) / microseconds_per_60th;
	go to return_fixnum;

ibeam (24):					/* sign-on time */
	call decode_clock_value_ (time_invoked, month, day, year, time_of_day, (0), (""));
	fixnum = float (time_of_day) / microseconds_per_60th;
	go to return_fixnum;

ibeam (20):					/* time of day */
	call compute_time;
	fixnum = float (time_of_day) / microseconds_per_60th;
	go to return_fixnum;

ibeam (19):					/* keying time */
	call iox_$control (apl_static_$apl_input, "get_keying_time", addr (double_fix), code);
	if code ^= 0
	then double_fix = 0;
	fixnum = float (double_fix) / microseconds_per_60th;
	go to return_fixnum;

ibeam (27):
get (9):						/* QuadLC - get the state indicator as a vector */
	data_elements = 0;
	result_pos = 0;
	do pass = 1 to 2;				/* first pass computes size of result, second makes it */

	     do p = current_parse_frame_ptr repeat p -> parse_frame.last_parse_frame_ptr while (p ^= null);

		if p -> parse_frame.parse_frame_type = function_frame_type
		then if pass = 1
		     then data_elements = data_elements + 1;
		     else do;

			     result -> numeric_datum (result_pos) = float (p -> parse_frame.current_line_number);
			     result_pos = result_pos + 1;
			end;
		else if p -> parse_frame.parse_frame_type = execute_frame_type
			| p -> parse_frame.parse_frame_type = evaluated_frame_type
		then if pass = 1
		     then data_elements = data_elements + 1;
		     else do;			/* put in a zero for evaluated input and execute */
			     result -> numeric_datum (result_pos) = 0;
			     result_pos = result_pos + 1;
			end;
		else ;				/* other types of frames are simply ignored */
	     end;

	     if pass = 1
	     then do;
		     call set_vector;		/* at end of first pass, set up vector to be filled on second */
		     string (result_vb -> value_bead.type) = integral_value_type;
		end;
	end;
	return;

ibeam (26):
	do p = current_parse_frame_ptr repeat p -> parse_frame.last_parse_frame_ptr while (p ^= null);
	     if p -> parse_frame.parse_frame_type = function_frame_type
	     then do;
		     fixnum = p -> parse_frame.current_line_number;
		     go to return_fixnum;
		end;

	     else if p -> parse_frame.parse_frame_type = execute_frame_type
		     | p -> parse_frame.parse_frame_type = evaluated_frame_type
	     then do;
		     fixnum = 0;
		     go to return_fixnum;
		end;

	     else ;				/* other types of frames are skipped over */
	end;
	fixnum = 0;
	go to return_fixnum;

ibeam (25):
	call compute_time;
	fixnum = month * 10000 + day * 100 + year;
	go to return_fixnum;

get (10):						/* QuadTS - get the "time stamp:"  y m d h m s ms */
	data_elements = 7;
	call set_vector;
	string (result_vb -> value_bead.type) = integral_value_type;
	call compute_time;

	result -> numeric_datum (0) = float (year);
	result -> numeric_datum (1) = float (month);
	result -> numeric_datum (2) = float (day);
	result -> numeric_datum (3) = float (hour);
	result -> numeric_datum (4) = float (minute);
	result -> numeric_datum (5) = float (second);
	result -> numeric_datum (6) = float (millisecond);
	return;

ibeam (28):
get (11):						/* QuadTT - get terminal type */
	call iox_$control (apl_static_$apl_input, "get_device_type", addr (tty_name), code);
	if code ^= 0				/* not apl dim... */
	then tty_name = "Absentee";			/* we should probably check... */

/* Return index of name in the array. Note that we just return
   hbound+1 if the names is not found. */

	do fixnum = lbound (terminal_names, 1) to hbound (terminal_names, 1) while (terminal_names (fixnum) ^= tty_name);
	end;
	go to return_fixnum;



get (12):						/* QuadUL - get the User Load */
ibeam (23):
	call system_info_$users ((0), fixnum);
	go to return_fixnum;

get (13):						/* QuadWA - the amount of workspace available */
						/* for now, this is infinity */
	apl_number = TheBiggestNumberWeveGot;
	go to return_apl_number;

ibeam (22):					/* workspace available */
	fixnum = 11111111111111111111111111111111111b;	/* largest single precision fixed point number */
	go to return_fixnum;


get (15):						/* QuadCS -  the character set.  Presently we return the 196 characters */
	data_elements = 196;
	number_of_dimensions = 1;
	n_words = size (value_bead) + size (character_string_overlay);
	result_vb = apl_push_stack_ (n_words);
	result = addr (result_vb -> value_bead.rho (2));
	string (result_vb -> value_bead.type) = character_value_type;
	result_vb -> value_bead.total_data_elements, result_vb -> value_bead.rho (1) = 196;
	result_vb -> value_bead.rhorho = 1;
	result_vb -> value_bead.data_pointer = result;
	operators_argument.result = result_vb;
	result -> character_string_overlay = substr (collate9, 1, 196);
	return;

get (14):						/* QuadWU - return number of characters of workspace used */
	call apl_get_storage_usage_ (fixnum);
	fixnum = 4 * fixnum;			/* convert from words to characters */
	go to return_fixnum;

get (1):						/* QuadQuote input */
						/* at present there is no prompt string for quad - quote input */
	ws_info.can_be_interrupted = "1"b;
	call iox_$get_line (apl_static_$apl_input, addr (quad_quote_input_buffer), length (quad_quote_input_buffer), nelemt,
	     0);
	ws_info.can_be_interrupted = "0"b;
						/* if there is any OTU (O bs U bs T) feature, it is in the dim so don't worry about it */

/* construct value bead to return */

	data_elements = nelemt - 1;

	if data_elements = 1
	then number_of_dimensions = 0;
	else number_of_dimensions = 1;

	n_words = size (value_bead) + size (character_string_overlay);
	result_vb = apl_push_stack_ (n_words);
	string (result_vb -> value_bead.type) = character_value_type;
	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = number_of_dimensions;

	if data_elements ^= 1
	then result_vb -> value_bead.rho (1) = data_elements;

	result = addrel (result_vb, size (value_bead));
	result_vb -> value_bead.data_pointer = result;
	result -> character_string_overlay = addr (quad_quote_input_buffer) -> character_string_overlay;
	operators_argument.result = result_vb;
	return;

return_fixnum:
	type_field = integral_value_type;
	apl_number = float (fixnum);
	go to scalar_return;

return_apl_number:
	type_field = numeric_value_type;

scalar_return:
	rhorho = 0;
	data_elements = 1;
	call prepare_result;
	result -> numeric_datum (0) = apl_number;
	return;

domain_error_ibeam:
	operators_argument.where_error = operators_argument.where_error - 1;
						/* mark right arg */
	operators_argument.error_code = apl_error_table_$domain;
	return;

domain_error:
	operators_argument.where_error = operators_argument.where_error - 1;
						/* put marker on value being assigned
								   to this system variable */
	operators_argument.error_code = apl_error_table_$bad_assign_to_system_var;
	return;

system_error:
	operators_argument.error_code = apl_error_table_$unknown_system_var;
	return;

/*** enter here for monadic ibeams ***/

apl_ibeam_:
     entry (operators_argument);

	right_vb = operands (2).value;
	if ^right_vb -> value_bead.data_type.numeric_value
	then go to domain_error_ibeam;
	if ^(right_vb -> value_bead.total_data_elements = 1)
	then go to domain_error_ibeam;

	if right_vb -> value_bead.data_type.integral_value
	then float_temp = right_vb -> value_bead.data_pointer -> numeric_datum (0);
	else do;
		float_temp = floor (right_vb -> value_bead.data_pointer -> numeric_datum (0) + 0.5);
		if abs (float_temp - right_vb -> value_bead.data_pointer -> numeric_datum (0)) > integer_fuzz
		then go to domain_error_ibeam;
	     end;
	if abs (float_temp) >= 1e21b
	then go to domain_error_ibeam;
	fixnum = fixed (float_temp, 21);

	if fixnum < 19
	then go to domain_error_ibeam;
	else if fixnum > 29
	then go to domain_error_ibeam;

	go to ibeam (fixnum);			/* dispatch into code above */

/* internal procedures */

compute_time:
     procedure ();

	call decode_clock_value_ (clock (), month, day, year, time_of_day, (0), (""));
	year = year - 1900;
	second = float (time_of_day, 52) / microseconds_per_second;
						/* no precision will be lost in flt divide */
	millisecond = float (time_of_day - second * 1000000, 52) / microseconds_per_millisecond;
	hour = divide (second, 3600, 5, 0);
	second = second - 3600 * hour;
	minute = divide (second, 60, 6, 0);
	second = second - 60 * minute;
	return;

     end compute_time;

get_scalar_fix:
     procedure ();

	call get_scalar_float;
	if operands (2).value -> value_bead.data_type.integral_value
	then float_temp = apl_number;
	else do;
		float_temp = floor (apl_number + 0.5);
		if abs (float_temp - apl_number) > integer_fuzz
		then go to domain_error;
	     end;

	if abs (float_temp) >= 1e35b
	then go to domain_error;
	fixnum = fixed (float_temp, 35);
	return;

     end get_scalar_fix;

get_scalar_float:
     procedure ();

	if ^(operands (2).value -> value_bead.total_data_elements = 1)
	then go to domain_error;

	apl_number = operands (2).value -> value_bead.data_pointer -> numeric_datum (0);
	return;

     end get_scalar_float;

prepare_result:
     procedure ();

	number_of_dimensions = rhorho;
	n_words = size (value_bead) + size (numeric_datum) + 1;
	result_vb = apl_push_stack_ (n_words);
	operators_argument.result = result_vb;
	string (result_vb -> value_bead.type) = type_field;
	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = rhorho;
	result = addrel (result_vb, size (value_bead));
	if substr (rel (result), 18, 1)
	then result = addrel (result, 1);

	result_vb -> value_bead.data_pointer = result;
	return;

     end prepare_result;

set_vector:
     procedure ();

	type_field = numeric_value_type;
	rhorho = 1;
	call prepare_result;
	result_vb -> value_bead.rho (1) = data_elements;
	return;

     end set_vector;

%include apl_push_stack_fcn;
     end /* apl_system_variables_ */;
