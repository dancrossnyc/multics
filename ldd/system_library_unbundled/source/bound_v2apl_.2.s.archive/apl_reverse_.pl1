/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_reverse_:
	procedure (operators_argument);

/*
 * apl_reverse_ performs the monadic o| operator
 *
 * written 7/28/73 by DAM
 * modified 2/2/74 by G. Gordon Benedict to handle a scalar, and to optimize inner loop
   Modified 780211 by PG to fix bug 278 by calling apl_push_stack_.
 */

/* automatic */

dcl right_vb pointer,				/* -> value_bead of operand */
    right pointer,					/* -> value array of operand */
    characters bit(1),				/* "1"b if operand is character, "0"b if numeric */
    rhorho fixed bin,				/* rhorho of operand and result */
    data_elements fixed bin(21),			/* size in elements of operand and result */
    coord fixed bin,				/* dimension along which to reverse */
    rev_rho fixed bin(21),				/* extent along that dimension */
    result_vb pointer,				/* -> value_bead of result */
    result pointer,					/* -> value array of result */
    n_words fixed bin(19),				/* size of result in words */
    i fixed bin,					/* random do-loop index */
    middle_adj_minus_middle fixed bin (21),		/* factored from inner loop */
    inner_upper_bound fixed bin (21),				/* upper bound of inner loop */
    innersize fixed bin(21),				/* times reduction of rho to right of coord, exclusive */
    middlesize fixed bin(21),				/* ditto, inclusive */
    middle_adj fixed bin(21),				/* correct adjustment to find reflected position of (middle)
						   is (middle_adj-middle) */
    midpoint fixed bin(21),				/* halfway along coord */
    (outer, middle, inner) fixed bin(21),		/* three do-loop indices for going through operand and
						   result and doing the reverse */
    apl_number float,				/* numeric temp */
    apl_character char(1);				/* character temp */

/* builtins */

declare	(addr, addrel, divide, fixed, rel, size, string, substr, unspec) builtin;

/* external static */

dcl (apl_error_table_$rank,
     apl_error_table_$domain,
     apl_error_table_$operator_subscript_range,
     apl_error_table_$length) fixed bin(35) external;

/* include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_operators_argument;
%include apl_bead_format;
%include apl_value_bead;
%include apl_operator_bead;

/* program */

	right_vb = operands(2).value;
	right = right_vb -> value_bead.data_pointer;
	characters = right_vb -> value_bead.data_type.character_value;

	rhorho = right_vb -> value_bead.rhorho;
	data_elements = right_vb -> value_bead.total_data_elements;
	coord = operators_argument.dimension;
	if rhorho = 0 then do;		/* scalar -- coord can be 0 or 1 */
	     if coord > 1 then goto rank_error;	/* rank in subscript brackets too large */
	end;
	else do;
	     if coord > rhorho then go to rank_error;
	     rev_rho = right_vb -> value_bead.rho(coord);
	end;

/* if on stack, do in place.  Otherwise allocate result on stack */

	if operators_argument.operands (2).on_stack
	then do;
		result_vb = right_vb;
		result = right;
	     end;
	else do;
		number_of_dimensions = rhorho;
		n_words = size(value_bead);
		if characters then n_words = n_words + size(character_string_overlay);
		else n_words = n_words + (size(numeric_datum) + 1);
		result_vb = apl_push_stack_ (n_words);

		string(result_vb -> value_bead.type) = string(right_vb -> value_bead.type);
		result_vb -> value_bead.total_data_elements = data_elements;
		result_vb -> value_bead.rhorho = rhorho;
		if rhorho > 0 then		/* avoid silly IPR for zero length move */
		     unspec(result_vb -> value_bead.rho(*)) = unspec(right_vb -> value_bead.rho(*));

		result = addr(result_vb -> value_bead.rho(rhorho+1));
		if ^ characters then if substr(rel(result), 18, 1) then result = addrel(result, 1);
		result_vb -> value_bead.data_pointer = result;
	     end;


	operators_argument.result = result_vb;

/* if we have a scalar or one-element matrix (of any dimension) just return it */

	if data_elements = 1 then do;	/* effective scalar */
	     if operators_argument.operands (2).on_stack then return;	/* already there */
	     result -> numeric_datum (0) =
		right -> numeric_datum (0);	/* copy scalar from argument to result */
	     return;
	end;

	if data_elements = 0 then return;	/* null vector, nothing to do */

/* set up do-loop parameters */

	innersize = 1;
	do i = coord by 1 while (i < rhorho);
	   innersize = innersize * (result_vb -> value_bead.rho(i+1));
	   end;
	middlesize = innersize * rev_rho;
	middle_adj = middlesize - innersize;
	midpoint = innersize * divide(rev_rho+1, 2, 21, 0);

/* now perform the actual reverse operation */
/* this code works whether the operation is being done in place or
   by copying from a bead onto the stack, but for different reasons in
   the two cases. */

	do outer = 0 by middlesize while (outer < data_elements);

	   inner_upper_bound = outer + innersize;		/* set upper bound of next loop */

	   do middle = 0 by innersize while (middle < midpoint);

	      middle_adj_minus_middle = middle_adj - middle;	/* just factor from loop below */

	      do inner = outer by 1 while (inner < inner_upper_bound);

		if ^ characters then do;		/* exchange two numbers */
		   apl_number = right -> numeric_datum(inner+middle);
		   result -> numeric_datum(inner+middle) = right -> numeric_datum(inner+middle_adj_minus_middle);
		   result -> numeric_datum(inner+middle_adj_minus_middle) = apl_number;
		   end;
		else do;				/* exchange two characters */
		   apl_character = right -> character_datum(inner+middle);
		   result -> character_datum(inner+middle) = right -> character_datum(inner+middle_adj_minus_middle);
		   result -> character_datum(inner+middle_adj_minus_middle) = apl_character;

		end;
	      end;
	   end;
	end;

	return;

rank_error:
	operators_argument.error_code = apl_error_table_$operator_subscript_range;
	return;

%include apl_push_stack_fcn;
     end /* apl_reverse_ */;
