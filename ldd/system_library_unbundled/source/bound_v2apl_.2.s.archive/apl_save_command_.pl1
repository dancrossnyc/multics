/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to )SAVE an APL workspace.
   R. Lamson and P. Green, August 1973.

   Modified for Version 3 saved workspace by PG on 12/04/73
   Modified 740624 by PG to fix saving of boolean values and size of saved numeric value beads.
   Modified 741016 by PG to fix bugs 178 (throwing away old ws before quota calc), 176 (checking
	for write permission), and 173 (catching no_dir code from apl_translate_pathname_).
   Modified 741108 by PG for saving function frames correctly, printing a better "not enough quota" message,
	and adding error check to translate_pointer.
   Modified 761011 by PG for new parse_frame declaration, and to save version 4 workspaces.
   Modified 780104 by PG to fix bug 300 (truncating old ws too soon).
*/

apl_save_command_:
	procedure (a_wsid, a_lock, a_code);

	a_code = 0;

	if a_wsid = ""
	then wsid = ws_info.wsid;
	else wsid = a_wsid;

	if a_lock = ""
	then if wsid ^= ws_info.wsid
	     then lock = "";
	     else lock = ws_info.lock;
	else lock = a_lock;

	if wsid = "clear ws"
	then do;
bitch:
		call ioa_$ioa_stream (output_stream, "not saved, this ws is ^a", ws_info.wsid);
		a_code = apl_error_table_$cant_save_ws;
		return;
	     end;

	call apl_translate_pathname_ (wsid, dname, ename, fcbp, code);

	if code = 0		/* a zero code means that the ws already exists. */
	then if wsid ^= ws_info.wsid
	     then if wsid ^= "continue"
		then go to bitch;

	if code ^= 0
	then if code ^= error_table_$noentry		/* this one is ok - ws will be created. */
	     then do;
		     call com_err_ (code, "apl", "^a>^a", dname, ename);
		     a_code = code;
		     return;
		end;

	bead_table_pointer = apl_segment_manager_$get ();
	stack_frame_table_pointer = addrel (bead_table_pointer, 49152);

	saved_bead_count,
	max_component_number,
	current_segment_length,
	current_component_number = 0;

	current_pseudo_baseptr = baseptr (0);
	BeadBase = baseptr (0);

	on record_quota_overflow go to unwind_and_abort;
	on cleanup call cleaner_upper;

	call apl_create_save_frame_;

	n_words = size (saved_ws_info);
	call save_allocate;
	saved_ws_info_pseudo_pointer = save_pseudo_pointer;

	do bucket_number = 1 to symbol_table.table_size;

	     do symbol_bead_ptr = symbol_table.hash_bucket_ptr (bucket_number)
		repeat (symbol_bead_ptr -> symbol_bead.hash_link_pointer)
		while (symbol_bead_ptr ^= null);

		call save_bead (symbol_bead_ptr);
	     end;
	end;


	do symbol_number = 1 to saved_bead_count;
	     call save_bead (saved_bead_table (symbol_number).active_bead_pointer -> symbol_bead.meaning_pointer);
	end;

	call save_bead (ws_info.latent_expression);

	this_frame = 0;
	previous_frame_pointer = null;

	do parse_frame_ptr = ws_info.current_parse_frame_ptr
	   repeat (parse_frame_ptr -> parse_frame.last_parse_frame_ptr)
	   while (parse_frame_ptr ^= null);

		this_frame = this_frame + 1;

		if parse_frame.parse_frame_type = save_frame_type
		then do;

			total_symbols = parse_frame_ptr -> save_frame.saved_symbol_count;
			n_words = size (saved_sf);
			call save_allocate;
			saved_stack_frame_table (this_frame).active_frame_pointer = parse_frame_ptr;
			saved_stack_frame_table (this_frame).pseudo_pointer = save_pseudo_pointer;
			saved_stack_frame_table (this_frame).previous_pseudo_pointer = previous_frame_pointer;
			previous_frame_pointer = save_pseudo_pointer;

			do symbol_number = 1 to parse_frame_ptr -> save_frame.saved_symbol_count;
			     call save_bead (parse_frame_ptr -> save_frame.saved_meaning_pointer (symbol_number));
			end;

		     end;
		else do;		/* all parse frame types (save frame is not really a parse frame.) */

			if parse_frame.parse_frame_type = function_frame_type
			then do;
				call save_bead (parse_frame.function_bead_ptr);
				number_of_ptrs = parse_frame.lexed_function_bead_ptr ->
							lexed_function_bead.number_of_localized_symbols;
				n_words = size (saved_pf);
			     end;

			else if parse_frame.parse_frame_type = execute_frame_type
			     then do;
				     number_of_ptrs = 0;
				     n_words = size (saved_pf);
				end;
			     else do;
				     number_of_ptrs = divide(addr(parse_frame.old_meaning_ptrs(1)) ->
					suspended_source_length + 3, 4, 21, 0) + 1;
				     n_words = size (saved_pf);
				     number_of_ptrs = 0;
				end;

			call save_allocate;

			saved_stack_frame_table (this_frame).pseudo_pointer = save_pseudo_pointer;
			saved_stack_frame_table (this_frame).active_frame_pointer = parse_frame_ptr;
			saved_stack_frame_table (this_frame).previous_pseudo_pointer = previous_frame_pointer;
			previous_frame_pointer = save_pseudo_pointer;

			reduction_stack_size = parse_frame.current_parseme;
			n_words = reduction_stack_size * size (single_rs_element);
			call save_allocate;

			saved_stack_frame_table (this_frame).reduction_stack_pointer = save_pseudo_pointer;

			do symbol_number = 1 to number_of_ptrs;
			     call save_bead (parse_frame.old_meaning_ptrs (symbol_number));
			end;

			reductions_pointer = parse_frame.reduction_stack_ptr;

			do parseme = 1 to reduction_stack_size;
			     save_this_one = "0"b;

			     if reduction_stack (parseme).type = op_type
			     then if reduction_stack (parseme).function
				then save_this_one = "1"b;
				else if reduction_stack (parseme).has_list
				     then save_this_one = "1"b;
				     else;			/* rs_for_op */
			     else save_this_one = "1"b;

			     if save_this_one
			     then do;
				     if reduction_stack (parseme).semantics_valid
				     then if reduction_stack (parseme).semantics_on_stack
					then call save_bead_on_stack (reduction_stack (parseme).semantics);
					else call save_bead (reduction_stack (parseme).semantics);
				     else;
				end;
			end;
		     end;
	end;

	n_words = size (bead_description_table);
	call save_allocate;
	bead_description_pseudo_pointer = save_pseudo_pointer;

	segment_length (current_component_number) = current_segment_length;

	total_length = 0;

	do component = 0 to max_component_number;
	     total_length = total_length + divide (segment_length (component) + 1023, 1024, 18, 0);
	end;

	if max_component_number > 0
	then total_length = total_length + 2;

	/* Get pointers to, and check the access on, all workspace components. */

	old_workspace_length = 0;
	do component = 0 to max_component_number;
	     call msf_manager_$get_ptr (fcbp, component, "1"b, ws_segment (component), (0), code);
	     if ws_segment (component) = null
	     then do;
		     call com_err_ (code, "apl", "^a>^a", dname, ename);
		     go to return_code;
		end;
	     else do;
		     call hcs_$fs_get_path_name (ws_segment (component), directory, (0), entryname, code);

		     if code = 0
		     then call hcs_$status_ (directory, entryname, 1b, addr (branch), null, code);

		     if code ^= 0
		     then do;
			     call com_err_ (code, "apl", "^a>^a", dname, ename);
			     go to return_code;
			end;

		     if (bit (branch.mode, 5) & "01010"b) ^= "01010"b	/* don't have RW access */
		     then do;
			     call ioa_$ioa_stream (output_stream, "not saved, need rw access on entry.");
			     go to return_code;
			end;

		     old_workspace_length = old_workspace_length + branch.records;
		end;
	end;

	directory = dname;

calculate_remaining_quota:
	call hcs_$quota_get (directory, total_quota, (0), (""b), (0), terminal_account, quota_used, code);
	if code ^= 0
	then do;
		/* Make up some numbers. It's possible we just don't have status & modify permission to
		   the directory in which we're saving. We might still have append permission.
		   Our record_quota_overflow handler will save us. */

		code = 0;
		terminal_account = 1;
		total_quota = 1000000;
		quota_used = 0;
	     end;

	if terminal_account = 0
	then do;
		previous_greater_than_position = length (directory) - index (reverse (directory), ">");
		directory = substr (directory, 1, previous_greater_than_position);
		go to calculate_remaining_quota;
	     end;

	quota_used = quota_used - old_workspace_length;	/* Pretend we have truncated old workspace */
	quota_remaining = total_quota - quota_used;	/* Figure how much quota remains. */

	if quota_remaining < total_length		/* Does the new workspace fit? */
	then do;					/* No. */
		call ioa_$ioa_stream (output_stream, "can't save ^a (^d record^[^;s^]); need ^d more record^[^;s^]",
		     wsid, total_length, (total_length = 1), total_length - quota_remaining,
		     (total_length - quota_remaining = 1));
		go to return_code;
	     end;

	/* At this point we know we are going to save the workspace. But we don't truncate
	   the old workspace first because of the NSS-76 truncating rule...truncate after
	   write, not before, or you may get a segment full of zeros if a crash occurs after the
	   truncate but before the VTOC is updated to reflect the new pages. */

	/* Begin actual )save operation, now that we know we've got room. */

	saved_ws_info_pointer = un_pseudo_pointer (saved_ws_info_pseudo_pointer);
	bead_description_pointer = un_pseudo_pointer (bead_description_pseudo_pointer);

	saved_ws_info.save_version = current_save_version;
	saved_ws_info.highest_segment = max_component_number;
	saved_ws_info.bead_table_pointer = bead_description_pseudo_pointer;
	saved_ws_info.total_beads = saved_bead_count;

	saved_ws_info.digits = ws_info.digits;
	saved_ws_info.width = ws_info.width;
	saved_ws_info.index_origin = ws_info.index_origin;
	saved_ws_info.random_link = ws_info.random_link;
	saved_ws_info.fuzz = ws_info.fuzz;
	saved_ws_info.float_index_origin = ws_info.float_index_origin;
	saved_ws_info.number_of_symbols = ws_info.number_of_symbols;
	saved_ws_info.current_parse_frame_ptr = previous_frame_pointer;
	saved_ws_info.integer_fuzz = ws_info.integer_fuzz;
	saved_ws_info.user_number = ws_info.user_number;
	saved_ws_info.latent_expression = translate_pointer (ws_info.latent_expression);
	saved_ws_info.user_name = ws_info.user_name;

	saved_ws_info.lock = lock;
	ws_info.lock = lock;

	saved_ws_info.wsid = wsid;
	ws_info.wsid = wsid;

	do bead_number = 1 to saved_bead_count;

	     bead_pointer = saved_bead_table (bead_number).active_bead_pointer;
	     saved_bead_pointer = un_pseudo_pointer (saved_bead_table (bead_number).pseudo_pointer);
	     bead_description_table (bead_number).bead_pointer = saved_bead_table (bead_number).pseudo_pointer;

	     go to copy_bead (saved_bead_table (bead_number).bead_type);

copy_bead (1):		/* group bead */

		unspec (saved_general_bead) = unspec (bead_pointer -> general_bead);

		element_count,
		saved_gb.number_of_members = bead_pointer -> group_bead.number_of_members;

		do symbol_number = 1 to element_count;
		     saved_gb.member (symbol_number) =
		     translate_pointer (bead_pointer -> group_bead.member (symbol_number));
		end;

		go to next_bead;

copy_bead (2):		/* symbol bead */

		unspec (saved_general_bead) = unspec (bead_pointer -> general_bead);

		saved_sb.name_length = bead_pointer -> symbol_bead.name_length;

		saved_sb.name = bead_pointer -> symbol_bead.name;

		saved_sb.meaning_pointer = translate_pointer (bead_pointer -> symbol_bead.meaning_pointer);

		go to next_bead;

copy_bead (3):		/* function bead */

		unspec (saved_general_bead) = unspec (bead_pointer -> general_bead);

		saved_fb.class = bead_pointer -> function_bead.class;

		saved_fb.text_length = bead_pointer -> function_bead.text_length;

		saved_fb.text = bead_pointer -> function_bead.text;

		saved_fb.stop_control_pointer =
		translate_pointer (bead_pointer -> function_bead.stop_control_pointer);

		saved_fb.trace_control_pointer =
		translate_pointer (bead_pointer -> function_bead.trace_control_pointer);

		go to next_bead;

copy_bead (4):		/* list bead */

		unspec (saved_general_bead) = unspec (bead_pointer -> general_bead);

		element_count,
		saved_lb.number_of_members = bead_pointer -> list_bead.number_of_members;

		do member_number = 1 to element_count;
		     unspec (saved_lb.bits (member_number)) =
		     unspec (bead_pointer -> list_bead.bits (member_number));

		     saved_lb.member_ptr (member_number) =
		     translate_pointer (bead_pointer -> list_bead.member_ptr (member_number));
		end;

		go to next_bead;

copy_bead (5):		/* numeric value bead */

		call copy_value_bead_header;

		if data_elements ^= 0
		then do;
			copy_to_pointer -> numeric_datum (*) =
			copy_from_pointer -> numeric_datum (*);
		     end;

		go to next_bead;

copy_bead (6):		/* character value bead */

		call copy_value_bead_header;

		if data_elements ^= 0
		then copy_to_pointer -> character_string_overlay =
		     copy_from_pointer -> character_string_overlay;

		go to next_bead;

copy_bead (7):		/* boolean value bead */

		call copy_value_bead_header;

		copy_to_pointer -> saved_boolean_datum = ""b;

		do datum_number = 0 by 1 while (datum_number < data_elements);
		     if copy_from_pointer -> numeric_datum (datum_number) = 1e0
		     then substr (copy_to_pointer -> saved_boolean_datum, datum_number + 1, 1) = "1"b;
		end;
next_bead:
	end;

	do frame_number = 1 to this_frame;

	     parse_frame_ptr = saved_stack_frame_table (frame_number).active_frame_pointer;
	     saved_frame_pointer = un_pseudo_pointer (saved_stack_frame_table (frame_number).pseudo_pointer);

	     saved_pf.parse_frame_type = parse_frame.parse_frame_type;
	     saved_pf.last_parse_frame_ptr = saved_stack_frame_table (frame_number).previous_pseudo_pointer;

	     if parse_frame.parse_frame_type = save_frame_type
	     then do;
		     saved_sf.saved_symbol_count = parse_frame_ptr -> save_frame.saved_symbol_count;

		     do symbol_number = 1 to parse_frame_ptr -> save_frame.saved_symbol_count;
			saved_sf.symbol_pointer (symbol_number) =
			translate_pointer (parse_frame_ptr -> save_frame.symbol_pointer (symbol_number));

			saved_sf.saved_meaning_pointer (symbol_number) =
			translate_pointer (parse_frame_ptr -> save_frame.saved_meaning_pointer (symbol_number));
		     end;
		end;
	     else do;
		     saved_pf.current_parseme = parse_frame.current_parseme;
		     saved_pf.current_lexeme = parse_frame.current_lexeme;
		     saved_pf.current_line_number = parse_frame.current_line_number;
		     saved_pf.return_point = parse_frame.return_point;
		     saved_pf.put_result = parse_frame.put_result;
		     saved_pf.print_final_value = parse_frame.print_final_value;
		     saved_pf.number_of_ptrs = parse_frame.number_of_ptrs;

		     /* parse_frame.initial_value_stack_ptr will be re-created by load,
		        when it re-creates the value stacks, so it is not saved. */

		     go to copy_frame_header (parse_frame.parse_frame_type);

copy_frame_header (1):		/* suspended frame */
copy_frame_header (3):		/* evaluated frame */

		     source_length,
		     addr (saved_pf.old_meaning_ptrs (1)) -> suspended_source_length =
		     addr (parse_frame.old_meaning_ptrs (1)) -> suspended_source_length;

		     addr (saved_pf.old_meaning_ptrs (2)) -> suspended_source =
		     addr (parse_frame.old_meaning_ptrs (2)) -> suspended_source;

		     /* Tell load command whether or not to re-lex the source.
		     0=don't re-lex, 1=re-lex. */

		     if parse_frame.lexed_function_bead_ptr = null
		     then saved_pf.re_lex_source = "0"b;
		     else saved_pf.re_lex_source = "1"b;

		     go to copy_rest_of_frame;

copy_frame_header (2):		/* function  frame */

		     do symbol_number = 1 to parse_frame.lexed_function_bead_ptr ->
		        lexed_function_bead.number_of_localized_symbols;
			saved_pf.old_meaning_ptrs (symbol_number) =
			translate_pointer (parse_frame.old_meaning_ptrs (symbol_number));
		     end;
		     saved_pf.function_bead_ptr = translate_pointer (parse_frame.function_bead_ptr);

copy_frame_header (4):		/* execute   frame */
			/* We will copy the source for this frame in the next frame. */
copy_rest_of_frame:

		     saved_reductions_pointer =
			un_pseudo_pointer (saved_stack_frame_table (frame_number).reduction_stack_pointer);
		     reductions_pointer = parse_frame.reduction_stack_ptr;

		     do parseme_number = 1 to parse_frame.current_parseme;
			saved_rs (parseme_number).type,
			my_type = reduction_stack (parseme_number).type;
			copy_this_one = "0"b;

			if my_type = op_type
			then if reduction_stack (parseme_number).function
			     then copy_this_one = "1"b;
			     else if reduction_stack (parseme_number).has_list
				then copy_this_one = "1"b;
				else if reduction_stack (parseme_number).semantics_valid
				     then saved_rs_for_op (parseme_number).semantics =
					reduction_stack_for_op (parseme_number).semantics;
				     else;
			else copy_this_one = "1"b;

			if copy_this_one
			then do;
				if reduction_stack(parseme_number).semantics_valid
				then saved_rs (parseme_number).semantics
					= translate_pointer (reduction_stack(parseme_number).semantics);
			     end;

			unspec (saved_rs (parseme_number).bits) = unspec (reduction_stack (parseme_number).bits);

			saved_rs (parseme_number).lexeme = reduction_stack (parseme_number).lexeme;
		     end;
		end;
	end;

	current_time,
	saved_ws_info.time_saved = clock ();

	call msf_manager_$adjust (fcbp, max_component_number, 36 * segment_length (max_component_number),
	     "111"b /* set bc, truncate, terminate */, code);

	/* (we don't care about the code, since we can re-load it even if the bc is bad... */

	call cleaner_upper;

	if a_wsid = "" | a_wsid = "continue"
	then call ioa_$ioa_stream (output_stream, "saved  ^a ^a", apl_date_time_ (current_time), ws_info.wsid);
	else call ioa_$ioa_stream (output_stream, "saved  ^a", apl_date_time_ (current_time));

	return;

	/* Record quota overflow handler comes here. Clean up the mess and tell loser. */

unwind_and_abort:
	/* must delete partial saved ws here */
	call ioa_$ioa_stream(output_stream, "not saved, not enough quota");

return_code:
	call cleaner_upper;
	a_code = apl_error_table_$cant_save_ws;
	return;

cleaner_upper:
	procedure;

	do bead_number = 1 to saved_bead_count;

		if saved_bead_table (bead_number).active_bead_pointer -> general_bead.reference_count < 0
		then saved_bead_table (bead_number).active_bead_pointer -> general_bead.reference_count =
		     saved_bead_table (bead_number).active_reference_count;

	end;

	call apl_destroy_save_frame_;
	call apl_segment_manager_$free (bead_table_pointer);
	call msf_manager_$close (fcbp);

end cleaner_upper;

/* subroutine used by copy_bead loop to do just what it says... */

copy_value_bead_header:
	procedure;

	data_elements,
	saved_value_bead.total_data_elements = bead_pointer -> value_bead.total_data_elements;

	number_of_dimensions,
	saved_value_bead.rhorho = bead_pointer -> value_bead.rhorho;

	string (saved_general_bead.type) = string (bead_pointer -> general_bead.type);

	/* recompute size to eliminate counting the padding word, if any. apl_load_command_ will
	   always re-pad value beads by adding 1 to this saved size. */

	saved_general_bead.size = bit (add (size (value_bead), size (numeric_datum), 18, 0), 18);

	if saved_value_bead.rhorho ^= 0
	then saved_value_bead.rho (*) = bead_pointer -> value_bead.rho (*);

	copy_from_pointer = bead_pointer -> value_bead.data_pointer;

	copy_to_pointer = addr (saved_bead_pointer -> saved_value_bead.rho (number_of_dimensions + 1));

	if saved_value_bead.numeric_value & ^saved_value_bead.zero_or_one_value
	then if substr (rel (copy_to_pointer), 18, 1)
	     then copy_to_pointer = addrel (copy_to_pointer, 1);

	saved_value_bead.data_pointer = copy_to_pointer;

end copy_value_bead_header;

/* subroutine used by first pass to reserve space for each item in the saved ws. */

save_allocate:
	procedure;

	if n_words + current_segment_length > sys_info$max_seg_size
	then do;

		segment_length (current_component_number) = current_segment_length;

		do component = 0 to max_component_number;
		     if segment_length (component) + n_words <= sys_info$max_seg_size
		     then go to found_component;
		end;

		max_component_number, component = max_component_number + 1;
		segment_length (component) = 0;
found_component:
		segment_length (current_component_number) = current_segment_length;
		current_segment_length = segment_length (component);
		current_component_number = component;
		current_pseudo_baseptr = baseptr (component);
	     end;

	save_pseudo_pointer = addrel (current_pseudo_baseptr, current_segment_length);
	current_segment_length = current_segment_length + n_words;

end save_allocate;

save_bead_on_stack:
save_bead:
	procedure (bv_bead_pointer);

declare	bead_type fixed bin,
	element_number fixed bin (24),
	(bead_pointer, control_pointer) pointer unaligned;

declare	bv_bead_pointer pointer unaligned parameter;

	bead_pointer = bv_bead_pointer;

	if bead_pointer = null
	then return;

	if bead_pointer -> general_bead.reference_count < 0
	then return;

	go to compute_size (index (string (bead_pointer -> general_bead.type), "1"b));

compute_size (1):		/* OPERATOR BEAD */

	return;

compute_size (2):		/* SYMBOL BEAD */

	symbol_name_length = bead_pointer -> symbol_bead.name_length;

	n_words = size (saved_sb);

	bead_type = symbol_bead_type;
	go to allocate;

compute_size (3):		/* VALUE BEAD */

	call save_value_bead (bead_pointer);
	return;

compute_size (4):		/* FUNCTION BEAD */

	control_pointer = bead_pointer -> function_bead.stop_control_pointer;

	if control_pointer ^= null
	then call save_value_bead (control_pointer);

	control_pointer = bead_pointer -> function_bead.trace_control_pointer;

	if control_pointer ^= null
	then call save_value_bead (control_pointer);

	data_elements = bead_pointer -> function_bead.text_length;

	n_words = size (saved_fb);

	bead_type = function_bead_type;

	go to allocate;

compute_size (5):		/* GROUP BEAD */

	total_members = bead_pointer -> group_bead.number_of_members;

	n_words = size (saved_gb);

	bead_type = group_bead_type;

	go to allocate;

compute_size (9):		/* LIST BEAD */

	total_members = bead_pointer -> list_bead.number_of_members;

	n_words = size (saved_lb);

	bead_type = list_value_bead_type;

	go to allocate;

allocate:
	call save_allocate;

	/* Set active_bead_pointer before updating saved_bead_count, so our clean_up procedure will always work. */

	saved_bead_table (saved_bead_count + 1).active_bead_pointer = bead_pointer;
	saved_bead_count = saved_bead_count + 1;

	saved_bead_table (saved_bead_count).active_reference_count = bead_pointer -> general_bead.reference_count;
	saved_bead_table (saved_bead_count).pseudo_pointer = save_pseudo_pointer;
	saved_bead_table (saved_bead_count).bead_type = bead_type;
	bead_pointer -> general_bead.reference_count = - saved_bead_count;

	return;

compute_size (0):
compute_size (6):		/* LABEL BEAD */
compute_size (7):		/* SHARED VARIABLE BEAD */
compute_size (8):		/* LEXED FUNCTION BEAD */
compute_size (10):
compute_size (11):
compute_size (12):
compute_size (13):
compute_size (14):
compute_size (15):
compute_size (16):
compute_size (17):
compute_size (18):

	call apl_system_error_ (apl_error_table_$cant_save_ws);
	go to unwind_and_abort;

/* This procedure is separate so that save_bead (and save_value_bead) can be quick blocks. */

save_value_bead:
	procedure (bv_bead_pointer);

declare	bv_bead_pointer pointer unaligned parameter,
	bead_pointer pointer unaligned;

	bead_pointer = bv_bead_pointer;

	if bead_pointer -> general_bead.reference_count < 0	/* already saved */
	then return;

	data_elements = bead_pointer -> value_bead.total_data_elements;
	number_of_dimensions = bead_pointer -> value_bead.rhorho;

	if bead_pointer -> value_bead.character_value
	then do;
		n_words = size (character_string_overlay);
		bead_type = character_value_bead_type;
	     end;
	else if string(bead_pointer -> value_bead.type) = zero_or_one_value_type
	     then do;
		     n_words = size (saved_boolean_datum);
		     bead_type = boolean_value_bead_type;
		end;
	     else do;
		     n_words = size (numeric_datum (*)) + 1;
		     bead_type = numeric_value_bead_type;
		end;

	n_words = n_words + size (saved_value_bead);

	call save_allocate;

	/* Set active_bead_pointer before updating saved_bead_count, so our clean_up procedure will always work. */

	saved_bead_table (saved_bead_count + 1).active_bead_pointer = bead_pointer;
	saved_bead_count = saved_bead_count + 1;

	saved_bead_table (saved_bead_count).active_reference_count = bead_pointer -> general_bead.reference_count;
	saved_bead_table (saved_bead_count).pseudo_pointer = save_pseudo_pointer;
	saved_bead_table (saved_bead_count).bead_type = bead_type;
	bead_pointer -> general_bead.reference_count = - saved_bead_count;

	return;

end save_value_bead;

end save_bead;

/* function to convert saved bead location in MSF to ITS pointer */

un_pseudo_pointer:
	procedure (bv_pseudo_pointer) returns (pointer unaligned);

declare	bv_pseudo_pointer pointer unaligned parameter,
	pseudo_pointer pointer unaligned;

	pseudo_pointer = bv_pseudo_pointer;

	return (addrel (ws_segment (fixed (baseno (pseudo_pointer), 18, 0)), rel (pseudo_pointer)));

end un_pseudo_pointer;



/* function to convert ITS pointer to bead number */

translate_pointer:
	procedure (bv_bead_pointer) returns (fixed binary (21));

declare	bv_bead_pointer pointer unaligned parameter,
	bead_pointer pointer unaligned;

	bead_pointer = bv_bead_pointer;

	if bead_pointer = null
	then return (0);
	else if bead_pointer -> general_bead.reference_count > 0	/* bead was never "saved"! */
	     then call apl_system_error_ (apl_error_table_$cant_save_ws);
	     else return (- bead_pointer -> general_bead.reference_count);

end translate_pointer;

/* parameters */

declare	((a_wsid, a_lock) char (*),
	a_code fixed bin (35)) parameter;

/* automatic */

declare  (n_words, bucket_number, this_frame, reduction_stack_size, symbol_number, parseme,
	total_length, component, current_component_number, datum_number,
	total_quota, quota_used, quota_remaining, bead_number, element_count,
	member_number, data_elements, current_segment_length, parseme_number,
	terminal_account, previous_greater_than_position,
	my_type, frame_number, source_length, total_symbols, old_workspace_length
	) fixed binary (24) automatic;

declare	max_component_number fixed bin;

declare	code fixed binary (35);

declare	current_time fixed binary (71) automatic;

declare   segment_length fixed binary (24) automatic dimension (0:63);

declare  (current_pseudo_baseptr, saved_ws_info_pseudo_pointer, symbol_bead_ptr,
	save_pseudo_pointer, previous_frame_pointer, parse_frame_ptr,
	copy_from_pointer, copy_to_pointer, bead_pointer,
	BeadBase, bead_description_pseudo_pointer
	) pointer unaligned automatic;

declare  (fcbp, ws_segment (0:63)
	) pointer aligned automatic;

declare  (bead_table_pointer, stack_frame_table_pointer
	) pointer aligned;

declare  (dname, directory
	) character (168) automatic;

declare  (ename, entryname, lock
	) character (32) automatic;

declare   wsid character (100) automatic;

declare	(copy_this_one, save_this_one) bit(1) aligned;

declare	1 branch		aligned,
	2 type		bit (2) unal,
	2 n_names		fixed bin (15) unal,
	2 nrp		bit (18) unal,
	2 dtm		bit (36) unal,
	2 dtu		bit (36) unal,
	2 mode		bit (5) unal,
	2 pad		bit (13) unal,
	2 records		fixed bin (17) unal;

/* internal static initial */

declare	output_stream character (32) internal static initial ("apl_output_");

declare (group_bead_type initial (1),
	symbol_bead_type initial (2),
	function_bead_type initial (3),
	list_value_bead_type initial (4),
	numeric_value_bead_type initial (5),
	character_value_bead_type initial (6),
	boolean_value_bead_type initial (7)
	) fixed binary internal static;

/* based */

declare	suspended_source character (source_length) based;
declare	suspended_source_length fixed binary (29) aligned based;

declare 1 saved_bead_table aligned based (bead_table_pointer) dimension (1),
	2 active_bead_pointer pointer unaligned,
	2 active_reference_count fixed binary (29),
	2 pseudo_pointer pointer unaligned,
	2 bead_type fixed binary;

declare 1 saved_stack_frame_table aligned based (stack_frame_table_pointer) dimension (1),
	2 active_frame_pointer pointer unaligned,
	2 pseudo_pointer pointer unaligned,
	2 reduction_stack_pointer unaligned pointer,
	2 previous_pseudo_pointer pointer unaligned;

declare 1 single_rs_element aligned based like reduction_stack;

/* conditions */

declare	(cleanup, record_quota_overflow) condition;

/* external static */

declare (	error_table_$noentry fixed bin (35),
	apl_error_table_$cant_save_ws fixed bin (35),
	sys_info$max_seg_size fixed bin (19)
	) external static;

/* entries */

declare	com_err_ entry options (variable);
declare	ioa_$ioa_stream entry options (variable);
declare	apl_create_save_frame_ entry;
declare	apl_date_time_ entry (fixed binary (71)) returns (character (17));
declare	apl_destroy_save_frame_ entry;
declare	apl_system_error_ entry (fixed bin(35));
declare	apl_translate_pathname_ entry (char (*), char (*), char (*), pointer, fixed binary (35));
declare	hcs_$fs_get_path_name entry (ptr, char (*), fixed bin (21), char (*), fixed bin (35));
declare	hcs_$quota_get entry (char (*), fixed bin (24), fixed bin (24), bit (36) aligned, fixed bin (24), fixed bin (24),
			  fixed bin (24), fixed bin (35));
declare	hcs_$status_ entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
declare	hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35));
declare	msf_manager_$get_ptr entry (pointer, fixed bin (24), bit (1) aligned, pointer, fixed bin (24), fixed bin (35));
declare	msf_manager_$adjust entry (pointer, fixed bin, fixed bin (24), bit (3), fixed bin (35));
declare	msf_manager_$close entry (pointer);
declare	apl_segment_manager_$get entry () returns (pointer);
declare	apl_segment_manager_$free entry (pointer);

/* builtins */

declare	(add, addr, addrel, bit, baseno, baseptr, clock, divide, fixed, index, length) builtin;
declare	(null, rel, reverse, size, string, substr, unspec) builtin;

/* include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_bead_format;
%include apl_symbol_bead;
%include apl_value_bead;
%include apl_list_bead;
%include apl_function_bead;
%include apl_lexed_function_bead;
%include apl_group_bead;
%include apl_operator_bead;
%include apl_parse_frame;
%include apl_symbol_table;
%include apl_save_frame;
%include apl_saved_ws;
end apl_save_command_;
