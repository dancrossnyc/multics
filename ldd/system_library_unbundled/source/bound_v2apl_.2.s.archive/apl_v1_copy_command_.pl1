/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_v1_copy_command_:
	procedure (bv_wsid, password, protected, names, number_of_names, bv_code);

declare	(protected bit(1),
	bv_wsid char (*),
	password char (*),
	names dimension (*) char (*),
	number_of_names fixed bin,
	bv_code fixed bin (35)) parameter;

/* procedure to copy a Version 1 APL workspace, converting it to Version 2 format.
   Written 740201 by PG, after "copy_command" by MGS.
   Modified 740430 by PG to fix bugs.
   Modified 770301 by PG to copy external functions properly (bug 238), and to copy names less than 4 chars (bug 177).
*/

/* builtin */

declare	(addr, addrel, baseno, baseptr, bin, binary, char, divide, float, hbound, index, length, mod, null, ptr,
	 rel, size, string, substr, translate, unspec) builtin;

/* external static */

declare	apl_error_table_$cant_load_ws external static fixed bin (35);

/* entries into Version 2 */

declare	apl_allocate_words_ entry (fixed bin (18), unaligned pointer),
	apl_date_time_ entry (fixed bin (71), char (*)),
	apl_free_bead_ entry (ptr unaligned),
	apl_function_lex_ entry (char (*) aligned, unaligned pointer, bit (1) aligned, fixed bin, ptr),
	apl_system_error_ entry (fixed bin (35)),
	apl_translate_pathname_$allow_version_one entry (char (*), char (*), char (*), ptr, fixed bin (35)),
	apl_create_save_frame_ entry (),
	apl_destroy_save_frame_update_ entry (),
	apl_get_symbol_ entry (char (*), unaligned pointer, fixed bin);

/* entries into Multics */

declare	ioa_$ioa_stream entry options (variable),
	msf_manager_$close entry (ptr),
	msf_manager_$get_ptr entry(ptr, fixed, bit(1), ptr, fixed bin(24), fixed (35));

/* automatic */

declare	bead_pointer pointer unaligned,
	code fixed bin (35),
	(data_elements, hook, name_length, name_number) fixed bin,
	dname char (168),
	ename char (32),
	n_words fixed bin (18),
	dtm char (17),
	bitcount fixed bin (24),
	(fcbp, free_space_ptr, p, pp, q, segptr) ptr;

/* declarations for Version 1 environment */

dcl
	wsid char(168) var,
	i fixed,
	csize(4) fixed int static init(1, 9, 36, 72),
	got(16) fixed init((16)0),

	1 seg based(segptr) aligned,
	   2 type fixed,
	   2 version,
	      3 len fixed,
	      3 name char(seg.version.len) aligned,
	   2 password char(8) aligned,
	   2 time_saved fixed bin(71),
	   2 tablen fixed,
	   2 table(seg.tablen) unaligned,
	      3 old unaligned,
	         4 seg bit(9) unaligned,
	         4 rel bit(18) unaligned,
	      3 new unaligned,
	         4 seg bit(9) unaligned,
	         4 rel bit(18) unaligned,
	      3 size bit(18) unaligned,
	   2 saved_static,
	      3 (digits, width, iorg, niorg, seed) fixed,
	      3 fuzz float bin(63),
	      3 (metersw, lexsw, parsesw) fixed,
	      3 goaheads(3),
	         4 len fixed,
	         4 chars char(16),
	   2 reserved_space(32) fixed,
	   2 data(261120) fixed,

	type_of_ws fixed int static init(0),
	line char(131) var,
	symp ptr,

	1 symtab based(symp),
	   2 prime fixed,
	   2 buckets(0:999),
	      3 (p, q) fixed,

	1 sb based(p),				/* Spelling bead */
	   2 (o, np, nq, up, uq, length) fixed,
	   2 string char(sb.length),

	1 ub based(q),				/* Usage bead */
	   2 o fixed,				/* owner list for hooks */
	   2 t fixed,				/* type (var, fcn, group) */
	   2 (vp, vq) fixed,			/* hook to value */
	   2 (np, nq) fixed,			/* hook to next usage for this spelling */
	   2 (sp, sq) fixed,			/* hook to next spelling bead */
	   2 globg bit(1);				/* "1"b if global */

	/* Procedure bead.  19 August 1971 (19 lines) */

	dcl
	1 pb based(pp),
	2 p_owner fixed,
	2 p_sname(0:0) fixed,	/* S of fcn name. */
	2 p_sanswer fixed,		/* Sname(1)=answer name, 0 if none. */
	2 p_sright fixed,		/* (2)=right argument name. */
	2 p_sleft fixed,		/* (3)=left argument name. */
	2 p_sxlocvs fixed,		/* (4)=s of first explicit local. */
	2 p_nxlocvs fixed,		/* Number of explicit local names. */
	2 p_nlabs fixed,		/* Number of labels. */
	2 p_nlocvs fixed,		/* Total number of local names. */
	2 (p_sourcep, p_sourceq) fixed,	/* Hook to fcn source. */
	2 p_nschars fixed,		/* Number of source characters. */
	2 p_nslines fixed,		/* Number of source lines. */
	2 p_nllines fixed,		/* Number of lexed lines.  0 for external fcns. */
	2 p_lexs(pp->p_nllines),		/* Hooks to individual line lexs. */
	  3 (p_lexp, p_lexq) fixed;

/* program */

	if bv_wsid = ""
	then do;
not_found:
		call ioa_$ioa_stream ("apl_output_", "ws not found");
		bv_code = apl_error_table_$cant_load_ws;
		return;
	     end;

	call apl_translate_pathname_$allow_version_one (bv_wsid, dname, ename, fcbp, bv_code);
	if bv_code ^= 0
	then go to not_found;

	call msf_manager_$get_ptr(fcbp, 0, "0"b, segptr, bitcount, code);
	if segptr=null then go to not_found;
	got(1) = bin(baseno(segptr), 18);

	if seg.type ^= type_of_ws
	then call apl_system_error_ (apl_error_table_$cant_load_ws);

	if seg.password ^= password
	then do;
		call ioa_$ioa_stream ("apl_output_", "ws locked");
		return;
	     end;

	line = "";

	symp = addr(data(2));

	if binary(rel(symp), 18)+2*prime+1>65535
	then call apl_system_error_ (apl_error_table_$cant_load_ws);

	call apl_create_save_frame_;			/* use global meanings */

	/* get ptr to end of parse stack for kludgy apl_lex_ interface */

	save_frame_pointer = ws_info.current_parse_frame_ptr;
	free_space_ptr = addr (save_frame.symbol_list (hbound (save_frame.symbol_list, 1) + 1));

	if number_of_names = 0			/* copy all names */
	then do i = 0 to prime - 1;
		do hook = buckets (i).q repeat p -> sb.nq while (hook ^= 0);
		     p = copy_expand (hook);
		     if sb.uq ^= 0
		     then do;
			     q = copy_expand(sb.uq);
			     do while(ub.nq^=0);
				q = copy_expand(ub.nq);
			     end;

			     if ub.globg
			     then call copy (sb.string, q, "0"b);
			end;
		end;
	     end;
	else do name_number = 1 to number_of_names;
		name_length = index (names (name_number), " ") - 1;
		if name_length = -1
		then name_length = length (names (name_number));

		q = copy_symget (substr (names (name_number), 1, name_length));
		if q = null
		then call not_copied (substr (names (name_number), 1, name_length));
		else call copy (substr (names (name_number), 1, name_length), q, "1"b);
	     end;

	if length (line) > 0 then call ioa_$ioa_stream ("apl_output_", "^a", line);

	call apl_date_time_ (time_saved, dtm);
	call ioa_$ioa_stream ("apl_output_", "saved  ^a", dtm);
	call msf_manager_$close(fcbp);
	call apl_destroy_save_frame_update_;
	return;

copy:	proc(name, q, chase_names);

/* parameters */

declare	(name char (*),
	q ptr,
	chase_names bit (1) aligned) parameter;

/* automatic */

declare	data_pointer pointer,
	errors_occurred bit (1) aligned,
	(in_start, in_length, line_length, number_of_groupies, out_start) fixed bin,
	symbol_pointer pointer unaligned,
	type bit (18) aligned;

/* builtin */

declare	string builtin;

/* internal static initial */

declare	(nl char (1) aligned initial ("
"),
	v1_codes char (10) aligned initial ("""#$%&@^`{}"),	/* " # $ % & @ ^ ` { } */
	v2_codes char (10) aligned initial ("ежзийклмно")	/* \245 - \256 */
	) internal static options (constant);

/* Version 1 data declarations */

declare	1 bit_value based (vp),
	2 (o, type, number, rhorho, rho (0 refer (bit_value.rhorho))) fixed,
	2 element (0 refer (bit_value.number)) bit (1),

	1 character_value based (vp),
	2 (o, type, number, rhorho, rho (0 refer (character_value.rhorho))) fixed,
	2 string char (character_value.number),

	1 integer_value based (vp),
	2 (o, type, number, rhorho, rho (0 refer (integer_value.rhorho))) fixed,
	2 element (0 refer (integer_value.number)) fixed bin (35),

	1 float_value based (vp),
	2 (o, type, number, rhorho, rho (0 refer (float_value.rhorho))) fixed,
	2 element (0 refer (float_value.number)) bit (72);

/* declarations for Version 1 environment */

dcl
	i fixed,
	vp ptr,
	vp1 ptr,
	gp ptr,

	1 vb based(vp),
	   2 (o, t, n, rr, r(vb.rr)) fixed,
	   2 v(vb.n) bit(csize(vb.t)),

	1 vb1 based(vp1),
	   2 (o, t, n, rr, r(vb.rr)) fixed,
	   2 v(vb1.n) bit(csize(vb.t)),

	1 sb based(sp),				/* Source bead */
	   2 o fixed,
	   2 source char(pp->p_nschars),

	1 gb based(gp),
	   2 (o, np, nq, l) fixed,
	   2 n char(gb.l),

	tm_var fixed int static init(46),
	tm_group fixed int static init(73),
	tm_zfn fixed int static init(48),
	tm_mfn fixed int static init (49),
	tm_dfn fixed int static init(50);


	call apl_get_symbol_ (name, symbol_pointer, (0));

	if symbol_pointer -> symbol_bead.meaning_pointer ^= null
	then do;
		if protected
		then do;
			call not_copied (name);
			return;
		     end;
		call wash (symbol_pointer -> symbol_bead.meaning_pointer);
	     end;

	if q -> ub.t = tm_var			/* COPY VARIABLE */
	then do;
		if q->ub.vq=0 then return;
		vp = copy_expand(q->ub.vq);

		data_elements = vb.n;
		number_of_dimensions = vb.rr;

		go to get_type (vb.t);

get_type (1):		/* BIT */

		type = zero_or_one_value_type;
		n_words = size (numeric_datum) + 1;
		go to end_get_type;

get_type (2):		/* CHARACTER */

		type = character_value_type;
		n_words = size (character_string_overlay);
		go to end_get_type;

get_type (3):		/* INTEGER */

		type = integral_value_type;
		n_words = size (numeric_datum) + 1;
		go to end_get_type;

get_type (4):		/* FLOAT */

		type = numeric_value_type;
		n_words = size (numeric_datum) + 1;

end_get_type:
		n_words = n_words + size (value_bead);
		call apl_allocate_words_ (n_words, bead_pointer);

		symbol_pointer -> symbol_bead.meaning_pointer = bead_pointer;

		string (bead_pointer -> general_bead.type) = type;
		bead_pointer -> value_bead.total_data_elements = data_elements;
		bead_pointer -> value_bead.rhorho = number_of_dimensions;

		data_pointer = addr (bead_pointer -> value_bead.rho (number_of_dimensions + 1));

		if type & numeric_value_type
		then if substr (rel (data_pointer), 18, 1)
		     then data_pointer = addrel (data_pointer, 1);

		bead_pointer -> value_bead.data_pointer = data_pointer;

		do i = 1 to number_of_dimensions;
		     bead_pointer -> value_bead.rho (i) = vb.r (i);
		end;

		go to copy_data (vb.t);

copy_data (1):		/* BIT */

		do i = 0 by 1 while (i < data_elements);
		     if bit_value.element (i + 1)
		     then data_pointer -> numeric_datum (i) = 1e0;
		     else data_pointer -> numeric_datum (i) = 0e0;
		end;
		go to end_copy_data;

copy_data (2):		/* CHARACTER */

		data_pointer -> character_string_overlay = translate (character_value.string, v2_codes, v1_codes);
		go to end_copy_data;

copy_data (3):		/* INTEGER */

		do i = 0 by 1 while (i < data_elements);
		     data_pointer -> numeric_datum (i) = float (integer_value.element (i + 1), 63);
		end;
		go to end_copy_data;

copy_data (4):		/* FLOAT */

		do i = 0 by 1 while (i < data_elements);

		     /* unspec must be used because Version 1 APL does not double-word align floating
		        point numbers */

		     unspec (data_pointer -> numeric_datum (i)) = float_value.element (i + 1);
		end;

end_copy_data:
	     end;

	else if q -> ub.t >= tm_zfn & q -> ub.t <= tm_dfn	/* COPY FUNCTION */
	then do;
		if q->ub.vq=0 then return;

		pp = copy_expand(q->ub.vq);

		data_elements = pp -> pb.p_nschars;
		n_words = size (function_bead);

		call apl_allocate_words_ (n_words, bead_pointer);

		symbol_pointer -> symbol_bead.meaning_pointer = bead_pointer;

		string (bead_pointer -> general_bead.type) = function_type;
		bead_pointer -> function_bead.lexed_function_bead_pointer = null;
		bead_pointer -> function_bead.stop_control_pointer = null;
		bead_pointer -> function_bead.trace_control_pointer = null;
		vp = copy_expand (pp -> p_sourceq);

		if pp -> pb.p_nllines = 0		/* We have an external function */
		then do;
			if q -> ub.t = tm_zfn
			then bead_pointer -> function_bead.class = 2;	/* niladic fcn */
			else if q -> ub.t = tm_mfn
			     then bead_pointer -> function_bead.class = 3;	/* monadic fcn */
			     else bead_pointer -> function_bead.class = 4;	/* dyadic fcn */

			bead_pointer -> function_bead.text_length = data_elements;
			bead_pointer -> function_bead.text = vp -> sb.source;
		     end;
		else do;
			bead_pointer -> function_bead.class = 0;	/* NORMAL UNLOCKED FUNCTION */
			in_start = 1;
			in_length = length (vp -> sb.source);
			out_start = 1;
			do while (in_length > 2);
			     line_length = index (substr (vp -> sb.source, in_start, in_length), nl);
			     substr (bead_pointer -> function_bead.text, out_start, line_length) = translate (substr (
				vp -> sb.source, in_start, line_length), v2_codes, v1_codes);
			     out_start = out_start + line_length;
			     in_start = in_start + line_length + 2;
			     in_length = in_length - line_length - 2;
			end;

			bead_pointer -> function_bead.text_length = out_start - 1;

			call apl_function_lex_ (bead_pointer -> function_bead.text,
			     bead_pointer -> function_bead.lexed_function_bead_pointer, errors_occurred, 0, free_space_ptr);
		     end;
	     end;

	else if q -> ub.t = tm_group			/* COPY GROUP */
	then do;
		if q -> ub.vq = 0
		then return;

		/* Visit all members of this group to count how many there are */

		number_of_groupies = 1;
		do gp = copy_expand (q -> ub.vq) repeat copy_expand (gp -> gb.nq) while (gp -> gb.nq ^= 0);
		     number_of_groupies = number_of_groupies + 1;
		end;

		n_words = size (group_bead) + number_of_groupies;
		call apl_allocate_words_ (n_words, bead_pointer);

		symbol_pointer -> symbol_bead.meaning_pointer = bead_pointer;

		string (bead_pointer -> general_bead.type) = group_type;

		bead_pointer -> group_bead.number_of_members = number_of_groupies;

		gp = copy_expand (q -> ub.vq);
		do i = 1 to number_of_groupies;
		     call apl_get_symbol_ (gp -> gb.n, symbol_pointer, (0));

		     bead_pointer -> group_bead.member (number_of_groupies - i + 1) = symbol_pointer;

		     if chase_names
		     then do;
			     vp1 = copy_symget(gp->gb.n);
			     if vp1=null then call not_copied(gp->gb.n);
			     else call copy(gp->gb.n, vp1, "0"b);
			end;
		     gp = copy_expand (gp -> gb.nq);
		end;
	     end;

	else call not_copied(name||"*");

	/* Don't flush if we created this guy, otherwise be transparent. */

	if symbol_pointer -> general_bead.reference_count > 1
	then call wash (symbol_pointer);

	return;

end;

wash:
	procedure (bv_bead_pointer);

/* parameters */

declare	bv_bead_pointer pointer unaligned parameter;

/* automatic */

declare	bead_pointer pointer unaligned;

/* program */

	bead_pointer = bv_bead_pointer;

	bead_pointer -> general_bead.reference_count = bead_pointer -> general_bead.reference_count - 1;

	if bead_pointer -> general_bead.reference_count < 1
	then call apl_free_bead_ (bead_pointer);

	return;

end wash;

copy_expand:	proc(val) returns(ptr);

dcl
	val fixed,
	i fixed,
	sptr ptr,
	high fixed,
	low fixed,
	try fixed;

	if val=0 then return(null);

	high = tablen;
	low = 1;

loop:	if high=low then do;
	   try = high;
	   go to found;
	   end;

	try = divide(high + low, 2, 17, 0);

	i = binary(table(try).old.seg || table(try).old.rel, 27);

	if i=val then go to found;

	if i<val then low = try + 1;
	else high = try - 1;

	go to loop;

found:
	i = bin(table(try).new.seg, 9);
	if got(i)=0 then do;
	   call msf_manager_$get_ptr(fcbp, i-1, "0"b, sptr, bitcount, code);
	   if sptr=null then go to not_found;
	   got(i) = bin(baseno(sptr), 18);
	   end;

	return(ptr(baseptr(got(i)), bin(table(try).new.rel,18) + bin(substr(unspec(val),19,18),18)
	   - bin(table(try).old.rel,18)));

	end;

copy_symget:
	procedure (name) returns (ptr);

/* parameters */

declare	name char (*);

/* automatic */

declare	(i, hook) fixed bin;

/* based */

declare	char4 char (4) based;

/* program */

	addr (i) -> char4 = name;
	i = mod (i, prime);

	do hook = buckets (i).q repeat p-> sb.nq while (hook ^= 0);
	     p = copy_expand (hook);
	     if p->sb.length = length(name)
	     then go to found;
	end;
	return (null);

found:	if p->sb.uq=0 then return(null);

	do p = copy_expand (p -> sb.uq) repeat copy_expand (p -> ub.nq) while (p -> ub.nq ^= 0);
	end;

	if p -> ub.globg
	then return (p);
	else return(null);

     end copy_symget;

not_copied:	proc(name);

dcl
	name char(*);

	if length(line)=0 then line = "not copied:    ";

	if length (line) + length (name) > ws_info.width
	then do;
prt_line:
		call ioa_$ioa_stream ("apl_output_", "^a", line);
		line = (15)" ";
		go to ok;
	     end;

	line = line || substr((8)" ", 1, 8-mod(length(line), 8));
	if length (line) + length (name) > ws_info.width
	then go to prt_line;

ok:	line = line || name;

	return;

	end;




%include apl_number_data;
%include apl_ws_info;
%include apl_save_frame;
%include apl_bead_format;
%include apl_symbol_bead;
%include apl_value_bead;
%include apl_group_bead;
%include apl_function_bead;

end;
