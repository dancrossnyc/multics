/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/*
 * apl_rotate_ implements the dyadic o| operator
 *
 * Written 7/28/73 by DAM
 * Modified 740909 by PG for new value bead declaration, and correct handling of value stack and error marker.
   Modified 780211 by PG to fix 278 (apl_push_stack_) and 230 (can't rotate a scalar).
   Modified 781004 by Willaim York to fix 342 (not poping left arg).
   Modified 800313 by PG to fix 460 (rotate fails if left arg is on stack, and left arg is longer than result,
	because left_numbers array gets overlayed on original left operand, and copy fails).
 */

/* format: style3 */
apl_rotate_:
     procedure (operators_argument);

/* process left operand - always numeric */

	left_vb = operands (1).value;
	if ^(left_vb -> value_bead.data_type.numeric_value)
	then go to domain_error_left;
	left = left_vb -> value_bead.data_pointer;

/* process right operand - character or numeric */

	right_vb = operands (2).value;
	right = right_vb -> value_bead.data_pointer;
	characters = right_vb -> value_bead.data_type.character_value;
	rhorho = right_vb -> value_bead.rhorho;
	data_elements = right_vb -> value_bead.total_data_elements;

	coord = operators_argument.dimension;
	if coord > rhorho
	then go to rank_error;

/* determine conformability */

	if left_vb -> value_bead.total_data_elements = 1	/* extend scalar */
	then left_scalar_fudge = 0;
	else if left_vb -> value_bead.rhorho ^= rhorho - 1
	then go to rank_error_left;
	else do;
		left_scalar_fudge = 1;		/* left opnd must have same dimensions as right, except coord */
		do i = 1 by 1 while (i < coord);
		     if left_vb -> value_bead.rho (i) ^= right_vb -> value_bead.rho (i)
		     then go to length_error_left;
		end;

		do i = coord + 1 by 1 while (i <= rhorho);
		     if left_vb -> value_bead.rho (i - 1) ^= right_vb -> value_bead.rho (i)
		     then go to length_error_left;
		end;
	     end;

	left_is_integer = left_vb -> value_bead.data_type.integral_value;
	integer_fuzz = ws_info.integer_fuzz;

	if rhorho > 0
	then temp_row_length = right_vb -> value_bead.rho (coord);
	else temp_row_length = 1;			/* scalar case */

	if operands (2).on_stack
	then do;

/* doing it in place.  allocate a temporary to hold one row while it is being rotated */

		if characters
		then n_words = size (temp_chars_row);
		else n_words = size (temp_nums_row);
		save_vsp = ws_info.value_stack_ptr;
		temp_row_ptr = apl_push_stack_ (n_words);
		ws_info.value_stack_ptr = save_vsp;

		in_place = "1"b;
		result_vb = right_vb;
		result = right;

		if operands (1).on_stack
		then ws_info.value_stack_ptr = left_vb;
	     end;
	else do;

/* doing it by copy from heap to stack.  allocate space on stack for result and temp_row needed
   if not rotating last dimension.  in order to allocate space, first move left operand out of the way */

/* Compute size of result. */

		number_of_dimensions = rhorho;
		n_words = size (value_bead);

		if characters
		then n_words = n_words + size (character_string_overlay);
		else n_words = n_words + size (numeric_datum) + 1;

/* If the left argument is on the stack, reallocate it so that it is higher
   than both the result bead and the old copy of itself. (Can't overlap either) */

		if operators_argument.operands (1).on_stack
		then do;
			ws_info.value_stack_ptr = left_vb;
						/* pop left operand */

			left_data_elements = left_vb -> value_bead.total_data_elements;
			n_words_left_vb = currentsize (left_vb -> value_bead) + size (left_numeric_datum) + 1;
		     end;
		else n_words_left_vb = 0;

		result_vb = apl_push_stack_ (max (n_words, n_words_left_vb));

		save_vsp = ws_info.value_stack_ptr;	/* This is the only thing to protect */

		result = addr (result_vb -> value_bead.rho (rhorho + 1));

		if ^characters
		then if substr (rel (result), 18, 1)
		     then result = addrel (result, 1);

		if coord ^= rhorho
		then do;
			if characters
			then n_words = size (temp_chars_row);
			else n_words = size (temp_nums_row);

			temp_row_ptr = apl_push_stack_ (n_words);
		     end;

		if operands (1).on_stack
		then do;
			n_words = size (left_numbers);

			next_p = apl_push_stack_ (n_words);
			next_p -> left_numbers (*) = left -> left_numbers (*);
			left = next_p;
		     end;

		ws_info.value_stack_ptr = save_vsp;	/* forget previous stuff */

		string (result_vb -> value_bead.type) = string (right_vb -> value_bead.type);
		result_vb -> value_bead.data_pointer = result;
		result_vb -> value_bead.total_data_elements = data_elements;
		result_vb -> value_bead.rhorho = rhorho;

		if rhorho ^= 0
		then unspec (result_vb -> value_bead.rho (*)) = unspec (right_vb -> value_bead.rho (*));

		in_place = "0"b;

	     end;

	operators_argument.result = result_vb;		/* since we have carefully arranged for this to be at bottom
						   of stack, never have to move it down */

/* compute do-loop parameters */

	innersize = 1;
	do i = coord by 1 while (i < rhorho);
	     innersize = innersize * right_vb -> value_bead.rho (i + 1);
	end;

	if rhorho > 0
	then if right_vb -> value_bead.rho (coord) ^= 0
	     then left_outersize = divide (data_elements, right_vb -> value_bead.rho (coord), 21, 0);
	     else left_outersize = 0;
	else left_outersize = 1;			/* scalar case */

/* do the actual operation */

	do left_outer = 0 by innersize while (left_outer < left_outersize);
	     right_outer = left_outer * temp_row_length;
	     do inner = 0 by 1 while (inner < innersize);

		if left_is_integer
		then rotation = fixed (left -> numeric_datum ((left_outer + inner) * left_scalar_fudge));
		else do;
			float_rot = floor (left -> numeric_datum ((left_outer + inner) * left_scalar_fudge) + 0.5);
			if abs (float_rot - left -> numeric_datum ((left_outer + inner) * left_scalar_fudge))
			     > integer_fuzz
			then go to domain_error_left;
			if abs (float_rot) >= 1e21b
			then go to domain_error_left;
			rotation = float_rot;
		     end;
		rotation = mod (rotation, temp_row_length);

		if rotation = 0
		then if in_place
		     then go to nugatory;

		if ^in_place
		then if coord = rhorho
		     then do;			/* temp_xxx_row overlayed on operand */
			     if characters
			     then temp_row_ptr = addr (right -> character_datum (right_outer + inner));
			     else temp_row_ptr = addr (right -> numeric_datum (right_outer + inner));
			     go to so_rotate;
			end;

		if characters
		then do temp_row_idx = 0 by 1 while (temp_row_idx < temp_row_length);
			temp_chars_row (temp_row_idx) =
			     right -> character_datum (temp_row_idx * innersize + right_outer + inner);
		     end;
		else do temp_row_idx = 0 by 1 while (temp_row_idx < temp_row_length);
			temp_nums_row (temp_row_idx) =
			     right -> numeric_datum (temp_row_idx * innersize + right_outer + inner);
		     end;

/* now move the temp_xxx_row into the result, with rotation */

so_rotate:
		do i = 0 by 1 to temp_row_length - rotation - 1;
		     if characters
		     then result -> character_datum (i * innersize + right_outer + inner) = temp_chars_row (i + rotation);
		     else result -> numeric_datum (i * innersize + right_outer + inner) = temp_nums_row (i + rotation);
		end;
		do j = i by 1 while (j < temp_row_length);
		     if characters
		     then result -> character_datum (j * innersize + right_outer + inner) = temp_chars_row (j - i);
		     else result -> numeric_datum (j * innersize + right_outer + inner) = temp_nums_row (j - i);
		end;
nugatory:
	     end;
	end;

	return;




domain_error_left:
	operators_argument.error_code = apl_error_table_$domain;
	go to mark_left;

length_error_left:
	operators_argument.error_code = apl_error_table_$length;
	go to mark_left;

rank_error_left:
	operators_argument.error_code = apl_error_table_$rank;
mark_left:
	operators_argument.where_error = operators_argument.where_error + 1;
	return;

rank_error:
	operators_argument.error_code = apl_error_table_$operator_subscript_range;
	return;

%include apl_push_stack_fcn;

/* automatic */

dcl	left_vb		pointer,			/* -> value bead of left operand */
	left		pointer,			/* -> value array of left operand, may have got moved in stack */
	next_p		pointer,			/* random pointer */
	rhorho		fixed bin,		/* rhorho of right operand and result */
	right_vb		pointer,			/* -> value_bead of right opnd */
	right		pointer,			/* -> value array of right operand */
	save_vsp		ptr,			/* used to pop temps off value stack */
	characters	bit (1),			/* "1"b if right opnd and result are character, "0"b if numeric */
	data_elements	fixed bin (21),		/* size in elements of roght operand, result */
	coord		fixed bin,		/* the dimension of the rows to be rowtated */
	left_scalar_fudge	fixed bin,		/* horrible kludge: 0 if left arg is scalar, 1 if not.
						   used to hack the subscript calculation so extension
						   of scalar left arguments works correctly */
	(i, j)		fixed bin,		/* random do-loop indices */
	left_is_integer	bit (1),			/* copy of left_vb->value_bead.integral_value, for eff. */
	integer_fuzz	float,			/* copy of the fuzz, also for eff. */
	temp_row_length	fixed bin (21),		/* length of a row being rhotated, also of others dcl'ed below */
	temp_row_ptr	pointer,
	n_words		fixed bin (19),		/* size in words of amount of space needed in stack */
	result_vb		pointer,			/* -> value_bead for result */
	result		pointer,			/* -> value array for result */
	in_place		bit (1),			/* "1"b => result overlays right opnd, "0"b => it doesn't */
	innersize		fixed bin (21),		/* times reduction of rho of opnd|result after coord */
	left_outersize	fixed bin (21),		/* number of things in (expnaded if scalar) left argument */
	left_outer	fixed bin (21),		/* part of subscript into left operand for rotate amount */
	right_outer	fixed bin (21),		/* part of subscript into right operand for row to mung */
	inner		fixed bin (21),		/* portion of subscript derived from rho to right of coord */
	rotation		fixed bin (21),		/* amount by which this row is to be munged */
	float_rot		float,
	temp_row_idx	fixed bin (21),		/* do-loop index for moving disconnected arrays (rows) into
						   the temp_row */
	left_data_elements	fixed bin (21),		/* used in stack alloc calculation */
	n_words_left_vb	fixed bin (19);		/* .. */

/* based */

dcl	temp_chars_row	(0:temp_row_length - 1) char (1) unal based (temp_row_ptr),
						/* _m_u_s_t be unal for hack with coord=rhorho */
	temp_nums_row	(0:temp_row_length - 1) float aligned based (temp_row_ptr),
						/* these two arrays are used to hold
						a row being rotated, to avoid in-place overlay problems */
	left_numbers	(left_vb -> value_bead.total_data_elements) float aligned based,
	left_numeric_datum	(left_data_elements) float aligned based;

/* external static */

dcl	(
	apl_error_table_$domain,
	apl_error_table_$rank,
	apl_error_table_$length,
	apl_error_table_$operator_subscript_range
	)		fixed bin (35) external;

/* builtins */

dcl	(abs, addr, addrel, currentsize, divide, max, mod, rel, substr, size, string, unspec, fixed, floor)
			builtin;

/* include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_operators_argument;
%include apl_bead_format;
%include apl_value_bead;
     end apl_rotate_;
