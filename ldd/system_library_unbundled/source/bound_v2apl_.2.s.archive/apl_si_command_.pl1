/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to implement the APL )SI and )SIV commands.
   Written by R.S.Lamson, Summer, 1973.
   Modified 740910 by PG for installation.
   Modified 800130 by PG for localized system variables.
*/

/* format: style3 */
apl_si_command_:
     procedure;

	variables = "0"b;
	go to list_the_state_indicator;

apl_siv_command_:
     entry;

	variables = "1"b;

list_the_state_indicator:
	call apl_create_save_frame_;			/* needed for erased-functions check */
	last_frame_was_suspended = "0"b;

	do parse_frame_ptr = ws_info.current_parse_frame_ptr
	     repeat (parse_frame_ptr -> parse_frame.last_parse_frame_ptr) while (parse_frame_ptr ^= null);

	     if parse_frame.parse_frame_type = suspended_frame_type
	     then last_frame_was_suspended = "1"b;
	     else if parse_frame.parse_frame_type ^= save_frame_type
	     then do;
		     if parse_frame.parse_frame_type = function_frame_type
		     then do;
			     lexed_function_bead_pointer = parse_frame.lexed_function_bead_ptr;
			     line_number = parse_frame.current_line_number;

			     if last_frame_was_suspended
			     then star = "*";
			     else star = " ";

			     call get_function_name;
			     call ioa_$rsnnl ("^va[^d] ^a", string, string_length, min_function_name_length,
				function_name, line_number, star);
			     call apl_print_string_ (substr (string, 1, string_length));

			     if variables
			     then do symbol = 1
				     to lexed_function_bead_pointer
				     -> lexed_function_bead.number_of_localized_symbols;

				     p = lexed_function_bead_pointer
					-> lexed_function_bead.localized_symbols (symbol);

				     if p ^= null
				     then if p -> general_bead.symbol
					then call apl_print_string_ (p -> symbol_bead.name);
					else call apl_print_string_ (system_var_names (p -> operator_bead.op1));
				end;
			end;
		     else if parse_frame.parse_frame_type = evaluated_frame_type
		     then call apl_print_string_ (QQuad);
		     else if parse_frame.parse_frame_type = execute_frame_type
		     then call apl_print_string_ (QExecuteSign);

		     last_frame_was_suspended = "0"b;
		     call apl_print_newline_;
		end;
	end;

	call apl_flush_buffer_;
	call apl_destroy_save_frame_;

get_function_name:
     procedure;

/* this internal procedure is called to determine what function name
   should be printed.  It exists only for indentation reasons */

declare	i		fixed bin;

	min_function_name_length = 1;			/* normally don't mung ioa_ */

	if lexed_function_bead_pointer -> lexed_function_bead.name -> symbol_bead.meaning_pointer
	     = parse_frame.function_bead_ptr
	then function_name =
		lexed_function_bead_pointer -> /* global function - usual case */ lexed_function_bead.name
		-> symbol_bead.name;
	else do;
		do i = 1 by 1 while (i <= current_parse_frame_ptr -> save_frame.saved_symbol_count);

/* go looking for localized function (QuadFX) */

		     if current_parse_frame_ptr -> save_frame.symbol_list (i).symbol_pointer
			= lexed_function_bead_pointer -> lexed_function_bead.name
		     then if current_parse_frame_ptr -> save_frame.symbol_list (i).saved_meaning_pointer
			     = parse_frame.function_bead_ptr
			then do;			/* found localized function */
				function_name =
				     lexed_function_bead_pointer -> lexed_function_bead.name -> symbol_bead.name;
				go to exitloop;
			     end;
		end;

/* neither global nor most locally bound:  probably erased so give blank name */

		function_name = "";
		min_function_name_length = 6;		/* mung ioa_ to give 6 spaces */
	     end;

exitloop:
	return;

     end get_function_name;

/* automatic */

declare	(p, parse_frame_ptr, lexed_function_bead_pointer)
			ptr;

declare	(last_frame_was_suspended, variables)
			bit (1) aligned automatic;

declare	(symbol, line_number, string_length)
			fixed binary;

declare	star		char (1);

declare	string		character (256);
declare	function_name	char (200) varying;
declare	min_function_name_length
			fixed bin;

/* entries */

declare	(apl_create_save_frame_, apl_destroy_save_frame_)
			entry;

declare	ioa_$rsnnl	entry options (variable);

declare	apl_print_string_	entry (character (*));

declare	(apl_print_newline_, apl_flush_buffer_)
			entry ();

/* builtins */

declare	(char, null, substr)
			builtin;

/* internal static options (constant) */

declare	system_var_names	(2:16) char (3) internal static options (constant)
			init ("Žct", "Žio", "Žlx", "Žpp", "Žpw", "Žrl", (8) (1)"", "Žit");
						/* rest assured these strings contain Quads (\216) */

/* include files */

%include apl_number_data;
%include "apl_bead_format";
%include "apl_symbol_bead";
%include "apl_lexed_function_bead";
%include "apl_parse_frame";
%include "apl_ws_info";
%include "apl_characters";
%include "apl_operator_bead";
%include "apl_save_frame";

     end apl_si_command_;
