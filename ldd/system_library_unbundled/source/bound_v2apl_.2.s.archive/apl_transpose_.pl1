/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_transpose_: proc(operators_argument);

/*
 * apl_transpose_ does the monadic and dyadic \o operators.
 * the way it tells monadic from dyadic is by operands(1).value being null
 *
 * written 7/29/73 by DAM (during titanic thunderstorm)
 * Modified 740201 by PG for compatibility check error
   Modified 770610 by PG to fix bug 282 (dyadic transpose failed in origin 0), and bug 194 (can't transpose empty arrays).
 *
 * I don't even attempt to do it in place, or to have a special fast EIS case,
 * because it's just too hard.  I hope no one wants a super-fast transpose
 */

dcl right_vb pointer,			/* -> value_bead of right operand */
    right pointer,				/* -> value array of right operand */
    characters bit(1),			/* "1"b if right & result are character, "0"b if numeric */
    rhorho_right fixed bin,			/* number of dimensions of right operand */

    integer_fuzz float,			/* copy of ws_info.integer_fuzz */
    index_origin fixed bin,			/* copy of ws_info.index_origin */

    left_vb pointer,			/* -> value_bead of left operand */
    left pointer,				/* -> value array for left operand */
    left_is_integral bit(1),			/* "1"b if left operand is known to contain only integers */

    rhorho_result fixed bin,			/* number of dimensions in the result */
    data_elements fixed bin(21),		/* number of elements in the result */
    result_vb pointer,			/* -> value bead of result */
    result pointer,				/* value array for result */
    final_result_vb pointer,			/* -> value_bead of result after moved down in stack */
    final_result pointer,			/* -> value array for result after moved down in stack */

    (left_index, right_index, result_index) fixed bin(21),	/* indices into respective value arrays */
    rhorho_result_float float,		/* temporary for computing rhorho_result */
    n_words fixed bin (19),			/* number of words to be pushed onto value stack */
    permute_ptr pointer,			/* address of permute table declared below */

    right_mult fixed bin(21),			/* multplier for subscripts in current right dimension
					   (used in computing the permute table) */
    fixnum fixed bin,			/* fixed-point binary version of element of left operand */
    float_temp float,
    (i, j) fixed bin,			/* random do-loop indices */
    cur_rho fixed bin;			/* index into array of do-loops (see code below at bump_rho) */

/* based */

declare	word_copy_overlay fixed bin (35) dim (n_words) based aligned;


/* permute table derived from left operand */

dcl 1 permute (rhorho_result) aligned based(permute_ptr),
    2 multiplier fixed bin(21),		/* subscript-multiplier for extracting elements from operand */
    2 result_rho fixed bin(21);		/* at first, corresponding element of rho of result is stored here,
					   later is current index into result along this dimension, i.e. control
					   variable for array of do-loops (see code near bump_rho) */


dcl (apl_error_table_$domain,
     apl_error_table_$rank,
     apl_error_table_$compatibility_error,
     apl_error_table_$length
    ) fixed bin(35) external;


dcl (abs, addr, addrel, divide, fixed, floor, min, max, null, rel, size, string, substr, unspec) builtin;

%include apl_number_data;
%include apl_ws_info;
%include apl_bead_format;
%include apl_operator_bead;
%include apl_value_bead;
%include apl_operators_argument;

/* do the usual picking up of addresses and attributes of arguments and error checking */

	right_vb = operands(2).value;
	characters = right_vb -> value_bead.data_type.character_value;
	right = right_vb -> value_bead.data_pointer;
	rhorho_right = right_vb -> value_bead.rhorho;

	integer_fuzz = ws_info.integer_fuzz;
	index_origin = ws_info.index_origin;			/* copy for spurious efficiency */

	left_vb = operands(1).value;
	if left_vb = null then go to monadic_transpose;		/* fake up the left operand if monadic */
	if ^ left_vb -> value_bead.data_type.numeric_value then go to domain_error_left;
	else left_is_integral = left_vb -> value_bead.data_type.integral_value;
	left = left_vb -> value_bead.data_pointer;
	if left_vb -> value_bead.rhorho >= 2 then go to rank_error_left;
	if left_vb -> value_bead.total_data_elements ^= rhorho_right then go to length_error_left;


/* first allocate a space in the stack for the permute table, which gives the permutation
   from operand to result in the convenient form of a set of subscript multipliers.
   The permute table also holds the rho vector of the result until we get a chance
   to allocate a result value bead in which to put it */

	rhorho_result_float = 0.0e0;			/* rhorho_result = max reduction of left operand */
	do left_index = 0 by 1 while (left_index < rhorho_right);
	   rhorho_result_float = max(rhorho_result_float, left -> numeric_datum(left_index));
	   end;
	rhorho_result = fixed (rhorho_result_float) + (1 - index_origin);

	n_words = size(permute);
	permute_ptr = apl_push_stack_ (n_words);

	permute.multiplier (*) = -1;
	permute.result_rho(*) = 1048577;		/* identity for min of rho-vector entries contributing */

/* process left operand into permute table */

	right_mult = 1;
	do left_index = rhorho_right-1 by -1 while(left_index >= 0);	/* process left operand backwards */
	   if left_is_integral then fixnum = fixed(left -> numeric_datum(left_index));
	   else do;
		float_temp = floor(left -> numeric_datum(left_index) + 0.5);
		if abs(float_temp - left -> numeric_datum(left_index)) > integer_fuzz
		then go to domain_error_left;

		if abs(float_temp) >= 1e21b then go to domain_error_left;
		fixnum = fixed(float_temp, 21);
		end;
	   fixnum = fixnum + (1 - index_origin);
	   if fixnum <= 0 then go to domain_error_left;
		/* needn't check upper bound since rhorho_result was derived from max of these */

	   /* compute fixnum'th permute.multiplier from left_index'th multiplier of operand */

	     if permute.multiplier (fixnum) = -1	/* not yet set */
	     then permute.multiplier (fixnum) = right_mult;
	     else permute.multiplier (fixnum) = permute.multiplier (fixnum) + right_mult;

	     permute.result_rho (fixnum) = min (permute.result_rho (fixnum),
		right_vb -> value_bead.rho (left_index + 1));	/* compute length of diagonal */
	     right_mult = right_mult * right_vb -> value_bead.rho (left_index + 1);	/* compute multiplier for next
									   dimension (to left) of opnd */
	end;

/* check for gap errors */

	do i = 0 by 1 while (i < rhorho_result);
	     if permute.multiplier (i + 1) = -1
	     then go to domain_error_left;
	end;

/* compute size of result and allocate it */

monadic_dyadic_join:
	data_elements = 1;
	do i = 0 by 1 while (i < rhorho_result);
	   data_elements = data_elements * permute.result_rho(i+1);
	   end;

	if characters then n_words = size(character_string_overlay);
	else n_words = size(numeric_datum)+1;
	number_of_dimensions = rhorho_result;
	n_words = n_words + size (value_bead);
	result_vb = apl_push_stack_ (n_words);
		/* no need to update value_stack_ptr, will be set before returning and not referenced before then */

	result = addr(result_vb -> value_bead.rho(rhorho_result+1));
	if ^characters then if substr(rel(result), 18, 1) then result = addrel(result, 1);

/* fill result value_bead header */

	result_vb -> value_bead.data_pointer = result;
	string(result_vb -> value_bead.type) = string(right_vb -> value_bead.type);
	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.rhorho = rhorho_result;
	do i = 0 by 1 while (i < rhorho_result);
	   result_vb -> value_bead.rho(i+1) = permute.result_rho(i+1);
	   end;

	if data_elements = 0			/* transposing empty array */
	then go to finish;

/* now generate the result according to the permute table */

	permute.result_rho(*) = 0;			/* use these as an array of do-loops, a control structure
						   not permitted in standard PL/I for implementation reasons */
	do result_index = 0 by 1;	/* index in result steps linrrly through */
				/* the loop is terminated by the go to finish below */
	   right_index = 0;				/* compute index in operand */
	   do i = 0 by 1 while (i < rhorho_result);
	      right_index = right_index + permute.result_rho(i+1)*permute.multiplier(i+1);
	      end;
	   if characters
	    then result -> character_datum(result_index) = right -> character_datum(right_index);
	    else result -> numeric_datum(result_index) = right -> numeric_datum(right_index);

	   /* now bump the array of do loops */

	   cur_rho = rhorho_result;
bump_rho:	   cur_rho = cur_rho-1;			/* zero-origin index into permute.result_rho */
	   if cur_rho < 0 then go to finish;
	   permute.result_rho(cur_rho+1) = permute.result_rho(cur_rho+1) + 1;
	   if permute.result_rho(cur_rho+1) >= result_vb -> value_bead.rho(cur_rho+1) then do;	/* carry into
										   enclosing
										   do-loop */
			permute.result_rho(cur_rho+1) = 0;
			go to bump_rho;
			end;
	   end;	/* end do result_index = ... */
finish:

/* move result down and set value_stack_ptr to point past it */

	if operands(2).on_stack then value_stack_ptr = right_vb;	/* find lowest place on stack, = where to move to */
	else if operands(1).on_stack then value_stack_ptr = left_vb;
	else value_stack_ptr = permute_ptr;

		/* n_words is still set from before */
	final_result_vb = apl_push_stack_ (n_words);
	number_of_dimensions = rhorho_result;
	n_words = size (value_bead);		/* number of words to copy */
	final_result_vb -> word_copy_overlay = result_vb -> word_copy_overlay;
	final_result = addr(final_result_vb -> value_bead.rho(rhorho_result+1));
	if ^characters then if substr(rel(final_result), 18, 1) then final_result = addrel(final_result, 1);
	final_result_vb -> value_bead.data_pointer = final_result;
	if characters then final_result -> character_string_overlay = result -> character_string_overlay;
	else final_result -> numeric_datum(*) = result -> numeric_datum(*);

	operators_argument.result = final_result_vb;
	return;

/* monadic case comes here to fake up left argument */

monadic_transpose:
	if ws_info.compatibility_check_mode
	then if rhorho_right > 2
	     then go to compatibility_error;		/* \oA used to mean interchange last 2 dims, now
						   means reverse all dims */
	rhorho_result = rhorho_right;
	n_words = size(permute);
	permute_ptr = apl_push_stack_ (n_words);

	right_mult = 1;
	do left_index = 0 by 1 while(left_index < rhorho_result);
	   right_index = rhorho_right - left_index;		/* right dimension is complement of left dim */
	   permute.multiplier(left_index+1) = right_mult;
	   permute.result_rho(left_index+1) = right_vb -> value_bead.rho(right_index);
	   right_mult = right_mult * right_vb -> value_bead.rho(right_index);
	   end;

	operands (1).on_stack = "0"b;			/* no left opnd... */
	go to monadic_dyadic_join;

/* error labels */

domain_error_left:
	operators_argument.error_code = apl_error_table_$domain;
	go to mark_left_operand;

rank_error_left:
	operators_argument.error_code = apl_error_table_$rank;
	go to mark_left_operand;

length_error_left:
	operators_argument.error_code = apl_error_table_$length;
	return;

compatibility_error:
	operators_argument.error_code = apl_error_table_$compatibility_error;
	go to mark_left_operand;

mark_left_operand:
	operators_argument.where_error = operators_argument.where_error + 1;
	return;

%include apl_push_stack_fcn;
     end /* apl_transpose_ */;
