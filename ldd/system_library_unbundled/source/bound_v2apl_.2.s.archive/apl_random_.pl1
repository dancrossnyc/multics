/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_random_:
     procedure (operators_argument);

/*
 * this routine contains the monadic and dyadic ? operators (roll and deal)
 * written 73.9.13 by DAM
 * Modified 2 January 1974 by PG to try to speed up big dealer.
   Modified 790312 by Willaim M. York to double-word align all value_beads (bug 278).
   Modified 790329 by PG to stop signalling apl_operator_error_ (the last refuge!), and to clean up the source.
   Modified 790815 by PG to fix 414 (deal returned garbage for result of 4?204 because memory string overlaid result).

 * The same sequence of random numbers is generated as by APL/360 XM6
 * except in the case where the range is more than 2**31-1, where
 * APL/360's algorithm is highly machine-dependent.  We have not attempted
 * to duplicate it.
 */

/* automatic */

dcl	memory_ptr	ptr,
	rn		fixed bin (31),
	(right_vb, left_vb, right, result_vb, result)
			unaligned pointer,
	data_elements	fixed bin (21),
	n_words		fixed bin (19),
	(elem, other)	fixed bin (21),
	(number, choose, from, range)
			fixed bin (35),
	X		float,
	float_temp	float,
	frange		float,
	frn		float;

/* based */

dcl	memory		dimension (0:range - 1) bit (1) unaligned based (memory_ptr);

/* builtins */

dcl	(abs, addr, addrel, floor, fixed, rel, substr, string, size, float, multiply, divide, mod, null, unspec)
			builtin;

/* entries */

declare	apl_iota_appendage_ entry (float, float, fixed bin, ptr);

/* external static */

dcl	(apl_error_table_$domain, apl_error_table_$rank)
			fixed bin (35) external;

/* internal static */

dcl	P		fixed bin (31) static init (16807),
						/* 7**5 */
	Q		fixed bin (31) static init (2147483647),
						/* 2**31 - 1 */
	Biggest_Fixed_Range float static init (2147483647.0e0),
	Two_to_31		fixed bin (32) static init (1f31b),
						/* 2**31 */
	Two_to_minus_31	fixed bin (31, 31) static initial (1f-31b),
						/* 2**(-31) */
	Biggest_bit_string	fixed bin (35) static initial (9400320),
						/* 36*261120 */
	Biggest_vector_size fixed bin static initial (130557);
						/* derived from value bead with max vector */

/* program */

/* pick up arguments, make some checks, determine monadic or dyadic */

	right_vb = operands (2).value;
	if ^right_vb -> value_bead.data_type.numeric_value
	then go to domain_error_right;
	right = right_vb -> value_bead.data_pointer;

	left_vb = operands (1).value;
	if left_vb = null
	then go to roll;				/* monadic case */

	if ^left_vb -> value_bead.data_type.numeric_value
	then go to domain_error_left;

/* pick up args for deal, set 'choose' and 'from' */

	if right_vb -> value_bead.total_data_elements ^= 1
	then go to rank_error_right;			/* must be scalar */
	if left_vb -> value_bead.total_data_elements ^= 1
	then go to rank_error_left;			/* .. */

	float_temp = floor (left_vb -> value_bead.data_pointer -> numeric_datum (0) + 0.5);
	if abs (float_temp - left_vb -> value_bead.data_pointer -> numeric_datum (0)) > integer_fuzz
	then go to domain_error_left;
	if float_temp < 0
	then go to domain_error_left;
	if float_temp >= 1e21b
	then go to domain_error_left;
	choose = fixed (float_temp);

/* check for 'frandom' case, where range > Biggest_Fixed_Range; if so go to floating_dealer */

	if right -> numeric_datum (0) > Biggest_Fixed_Range
	then go to floating_dealer;

	float_temp = floor (right -> numeric_datum (0) + 0.5);
	if abs (float_temp - right -> numeric_datum (0)) > integer_fuzz
	then go to domain_error_right;
	if float_temp < 0
	then go to domain_error_right;
	from = fixed (float_temp);

/* throw away the arguments */

	if operands (2).on_stack
	then value_stack_ptr = right_vb;
	else if operands (1).on_stack
	then value_stack_ptr = left_vb;

/*	if choose < 0 then go to domain_error_left;	ALREADY CHECKED FOR */
	if choose > from
	then go to domain_error_right;

/* DEAL.

   Return vector of 'choose' elements taken from iota 'from', without replacement. */

	if choose = 0				/* return iota 0 */
	then go to small_deal;

	if from = choose				/* a permutation.  This algorithm will */
	then go to big_deal;			/* always work...or get a ws full error for
						   trying to create too big a permutation. */

	if from <= Biggest_vector_size		/* if we can create (iota from) */
	then if choose > divide (from, 16, 35, 0)	/* and it seems to be worth it */
	     then go to big_deal;			/* use permutation algorithm */
	     else ;				/* use fast dealer */
	else if from > Biggest_bit_string		/* if we can't use fast dealer */
	then go to really_big_deal;			/* use slow dealer */

	range = from;				/* initialize range of random numbers */

	data_elements = choose;			/* allocate result first */
	call deal_push;

	n_words = size (memory);			/* allocate a big bit string to remember duplicates */
	memory_ptr = apl_push_stack_ (n_words);
	string (memory) = ""b;			/* initialize it */

	do elem = 0 by 1 while (elem < choose);
try_again:
	     call random_in_range;			/* get an integer random number */
	     number = rn + index_origin;
	     if memory (number) = "1"b		/* been here already, try again */
	     then go to try_again;

	     memory (number) = "1"b;
	     result -> numeric_datum (elem) = float (number);
						/* good value, use it */
	end;

	string (memory) = ""b;			/* zero the storage now, to lessen the chance of
						   a record_quota_overflow on the process directory. */

	go to deal_fin;

really_big_deal:					/* choose ? from */
small_deal:					/* 0 ? from */
	range = from;

	data_elements = choose;
	call deal_push;

/* fill in elements of result with random numbers, checking each time
	   for duplication */

	do elem = 0 by 1 while (elem < choose);
rn_dup:
	     call random_in_range;
	     X = float (rn + index_origin);
	     do other = 0 by 1 while (other < elem);
		if result -> numeric_datum (other) = X
		then go to rn_dup;
	     end;
	     result -> numeric_datum (elem) = X;
	end;

	go to deal_fin;

big_deal:
	data_elements = from;			/* make iota, shuffle, truncate */
	call deal_push;

/* construct "iota from" - for TSO compatibility uses a backwards iota */

/* Negative quantities tell apl_iota_appendage_ to construct backwards iota. */

	call apl_iota_appendage_ (float_index_origin, -1e0, -from, (result));

/* now do exchanges on this to bring random elements to the top */

	do elem = 0 by 1 while (elem < from);
	     range = from - elem;			/* choose from remaining slots */
	     call random_in_range;
	     X = result -> numeric_datum (elem);
	     result -> numeric_datum (elem) = result -> numeric_datum (elem + rn);
	     result -> numeric_datum (elem + rn) = X;
	end;

	go to deal_fin;

/* routine to deal from floating point numbers (when range is too big for fixed point) */

floating_dealer:
	frange = floor (right -> numeric_datum (0) + 0.5);
	if abs (frange - right -> numeric_datum (0)) > integer_fuzz
	then go to domain_error_right;

	if choose < 0
	then go to domain_error_left;

	if choose > Biggest_Fixed_Range
	then go to domain_error_right;		/* (??) */

/* don't forget to throw away the arguments */

	if operands (2).on_stack
	then value_stack_ptr = right_vb;
	else if operands (1).on_stack
	then value_stack_ptr = left_vb;

	data_elements = choose;
	call deal_push;

/* fill in the result, acting similarly to small_deal */

	do elem = 0 by 1 while (elem < choose);
frn_dup:
	     call frandom;
	     X = frn + float_index_origin;
	     do other = 0 by 1 while (other < elem);
		if result -> numeric_datum (other) = X
		then go to frn_dup;
	     end;
	     result -> numeric_datum (elem) = X;
	end;

deal_fin:
	data_elements = choose;
	ws_info.value_stack_ptr = addrel (result, size (numeric_datum));
	return;

/* ROLL.

   A scalar function that returns a random number between the index origin and the argument.
   Result is overlaid on operand, and so argument is copied onto stack if necessary. */

roll:
	if ^operands (2).on_stack
	then do;					/* Copy right_vb onto the value stack */

		data_elements = right_vb -> value_bead.total_data_elements;
		number_of_dimensions = right_vb -> value_bead.rhorho;

/* Allocate the space on the value stack */

		n_words = size (value_bead) + size (numeric_datum) + 1;
		result_vb = apl_push_stack_ (n_words);

/* Copy the value_bead header info */

		result_vb -> value_bead = right_vb -> value_bead;

/* Get pointer to the new data area */

		result = addrel (result_vb, size (value_bead));
		if substr (rel (result), 18, 1)
		then result = addrel (result, 1);
		result_vb -> value_bead.data_pointer = result;

/* Copy the data */

		result -> numeric_datum (*) = right -> numeric_datum (*);

/* Make this the new right_vb */

		right_vb = result_vb;
		right = result;

	     end;

/* check that argument is composed of integers */

	if ^right_vb -> value_bead.data_type.integral_value
	then do elem = 0 by 1 while (elem < right_vb -> value_bead.total_data_elements);
		frange = floor (right -> numeric_datum (elem) + 0.5);
		if frange <= 0
		then go to domain_error_right;
		if abs (frange - right -> numeric_datum (elem)) > integer_fuzz
		then go to domain_error_right;

		right -> numeric_datum (elem) = frange; /* make exact integer for later use */
	     end;

	string (right_vb -> value_bead.type) = integral_value_type;

/* generate the random numbers, each organized to scale of corresponding
   element of the operand */

	do elem = 0 by 1 while (elem < right_vb -> value_bead.total_data_elements);
	     frange = right -> numeric_datum (elem);
	     if frange <= 0
	     then go to domain_error_right;
	     if frange <= Biggest_Fixed_Range
	     then do;				/* will fit in fixed point */
		     range = fixed (floor (frange), 35);
		     call random_in_range;
		     right -> numeric_datum (elem) = float (rn + index_origin);
		end;
	     else do;				/* need to go to floating point */
		     string (right_vb -> value_bead.type) = numeric_value_type;
						/* reset integer bit because is */
		     call frandom;			/* too big for fixing */
		     right -> numeric_datum (elem) = frn + float_index_origin;
		end;
	end;

	operators_argument.result = right_vb;
	return;

domain_error_left:
	operators_argument.where_error = operators_argument.where_error + 2;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;
	operators_argument.error_code = apl_error_table_$domain;
	return;

rank_error_left:
	operators_argument.where_error = operators_argument.where_error + 2;

rank_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;
	operators_argument.error_code = apl_error_table_$rank;
	return;

/* INTERNAL PROCEDURES */

/* internal proc to generate next random number.
   It is normalized to [0:range-1], and returned in rn. */

random_in_range:
     proc;

	if random_link <= 0
	then random_link = P;
	random_link = mod (multiply (random_link, P, 63, 0), Q);

/* treat random_link as a 31 bit fraction between 0 and 1. */

	rn = multiply (random_link, range, 63, -31) * Two_to_minus_31;

     end random_in_range;

frandom:
     proc;

/* floating-point version of random_in_range.  used by roll with big argument */

dcl	orn		fixed bin (31);

	range = Two_to_31;				/* just return raw random numbers */
	call random_in_range;
	orn = rn;					/* save first random number */
	call random_in_range;			/* so can get two */

	frn = 0.95;				/* set exponent for making a fraction, 0 to 1 */
	unspec (frn) =
	     substr (unspec (frn), 1, 9) || /* construct floating-point fraction */ substr (unspec (orn), 6, 31)
	     || /* (this is a machine-dependent kludge) */ substr (unspec (rn), 6, 31) || "0"b;
	frn = floor (frn * frange);			/* multiply random fraction by range to get answer */
     end;

deal_push:
     proc;

	number_of_dimensions = 1;
	n_words = size (value_bead) + size (numeric_datum) + 1;
	result_vb = apl_push_stack_ (n_words);
	operators_argument.result = result_vb;
	string (result_vb -> value_bead.type) = integral_value_type;
	result_vb -> value_bead.rhorho = 1;
	result_vb -> value_bead.total_data_elements, result_vb -> value_bead.rho (1) = choose;
	result = addr (result_vb -> value_bead.rho (2));
	if substr (rel (result), 18, 1)
	then result = addrel (result, 1);
	result_vb -> value_bead.data_pointer = result;
     end;

%include apl_push_stack_fcn;

/* include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_operators_argument;
%include apl_bead_format;
%include apl_value_bead;
     end;
