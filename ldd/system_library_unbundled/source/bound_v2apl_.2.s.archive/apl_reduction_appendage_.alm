"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************

" Subroutine for use by apl to do fast reductions on certain operators.
"
" Calling sequence:
"
"     call apl_reduction_appendage_ (array_ptr, column_base, highest_element,
"	     interval_between_elements, op_to_do, result [, zerodivide_label]);
"
"     declare apl_reduction_appendage_ entry (ptr, fixed bin, fixed bin, fixed bin,
"	fixed bin (8), float bin (63) [, label]);
"
" Note that the last argument is optional, and is only passed in the divide-reduction case.
"
" Modified 740829 by PG to treat index register 3 as an unsigned word offset.
" Modified 790125 by PG to change calling sequence as part of fix to bug 360
"	(or-scan and and-scan of Booleans fail because reduction and scan called
"	this subroutine differently).
" Modified 790717 by PG to use DFSTR instead of DFST when it became clear that
"	this subroutine actually uses the over-length EAQ in a reasonable
"	fashion, and that we should keep as many bits as possible.
" Modified 790727 by PG to implement 0-:0 ==> 1 special-case in divide-reduction,
"	so that this routine can be called once again for divide-reduction.

	name	apl_reduction_appendage_
	segdef	apl_reduction_appendage_
	segdef	divide
	equ	array_ptr,2		ptr to operand array
	equ	column_base,4		subscript (0 origin) of lowest element
	equ	highest_element,6		subscript (0 origin) of highest element
	equ	interval_between_elements,8	number of elements in between each element
	equ	operation,10		operator code
	equ	result,12			place to store result
	equ	zerodivide_label,14		label to goto for zerodivide (-:/ only)
"
apl_reduction_appendage_:
divide:
	eppbp	ap|array_ptr,*		get ptr to ptr to array
	eppbp	bp|0,*			get ptr to array
	lxl0	ap|operation,*		get op1 (operator code for operation to do)
	ldq	ap|column_base,*		get first element
	qls	1			form word offset
	eawpbp	bp|0,ql			form ptr to first element
	ldq	ap|highest_element,*	get last element
	sbq	ap|column_base,*		compare to first element
	tze	return_last_element		only that one element... just return it
	qls	1			conv to word offset of last element in array
	eax2	0,ql			..
	lda	ap|interval_between_elements,*	find separation between elements
	als	1			change to separation in words
	neg	0			negate so eax2 bb|0,x3 will subtract from x2
	eawpbb	0,al			put into bb for subtraction from x2
	eax1	0,al			just save in x1
	dfld	bp|0,x2			get last element
	eppbp	bp|0,x1			move back by 1 element separation
	cmpx1	-2,du			separation 1 (i.e., vector)?
	tze	offset_is_one		can special case very fast
	tra	simple_transfer,x0		go to transfer vector for operation
"
simple_transfer:
	tra	simple_plus
	tra	simple_minus
	tra	simple_multiply
	tra	simple_divide
	tra	simple_max
	tra	simple_min
	arg	0
	arg	0
	arg	0
	arg	0
	arg	0
	tra	simple_and
	tra	simple_or
	tra	simple_nand
	tra	simple_nor

"following code is reached if interval between elements is 1 (i.e., two words)

offset_is_one:
	eax3	0,x2			save
	anx2	7,du			keep only those over mod 4 boundary of elements
	anx3	=o777770,du		get rid of number > mod 4 elements
	tze	simple_transfer,x0		amount is < 4 elements, no special case
	epplb	bp|0,x2			get ptr to subarray which is mod 4 elements long
	tra	*+1,x0			go to transfer vector for special case
	tra	group_plus
	tra	group_minus
	tra	group_multiply
	tra	group_divide
	tra	group_max
	tra	group_min
	arg	0
	arg	0
	arg	0
	arg	0
	arg	0
	tra	group_and
	tra	group_or
	tra	group_nand
	tra	group_nor

"simple routines that do one element at a loop iteration

simple_plus:
	dfad	bp|0,x2			add next lower element to sum
	eax2	bb|0,x2			subtract from x2 interval_between_elements
	tnz	simple_plus		more to do?
	tra	return_result		store result and go away

simple_minus:
	dfsb	bp|0,x2			subtract next lower from amount accumulated
	fneg	0			negate, because of kludgy way -/ works
	eax2	bb|0,x2			go down to next element
	tnz	simple_minus		more left?
	tra	return_result

simple_multiply:
	dfmp	bp|0,x2			multiply next lower element to product
	eax2	bb|0,x2			subtract from x2 interval_between_elements
	tnz	simple_multiply		more to do?
	tra	return_result		store result and go away

simple_divide:
	fad	=0e0,du			is divisor zero? (set indicators)
	tnz	5,ic			no, branch
	dfcmp	bp|0,x2			is dividend zero?
	tnz	zerodivide		no, branch
	fld	=1e0,du			map 0-:0 into 1
	tra	2,ic
	dfdi	bp|0,x2			quotient is next-:last_quotient
	eax2	bb|0,x2			go down to next element
	tnz	simple_divide		more left?
	tra	return_result

simple_max:
	dfcmp	bp|0,x2			compare to next lower element
	tpnz	2,ic			greater, not interested in this element
	dfld	bp|0,x2			get it
	eax2	bb|0,x2			next lower
	tnz	simple_max		more to do
	tra	return_result

simple_min:
	dfcmp	bp|0,x2			compare to next lower element
	tmi	2,ic			less, not interested in this element
	dfld	bp|0,x2			get it
	eax2	bb|0,x2			next lower
	tnz	simple_min		more to do
	tra	return_result

simple_and:
	fcmp	=0e0,du			is last element zero?
	tze	return_result		yes... return 0 which is in eaq
simple_and_loop:
simple_or_loop:
	dfcmp	bp|0,x2			compare to next element
	tnz	invert_and_return
	eax2	bb|0,x2			reduce x2 to next element
	tnz	simple_and_loop		do next element
	tra	return_result

simple_or:
	fcmp	=1e0,du			is last element one?
	tze	return_result		yes... return 1 which is in eaq
	tra	simple_or_loop

invert_and_return:
	fsb	=1e0,du			invert by subtracting 1
	fneg	0			then reverse
	tra	return_result

simple_nand:
	eax1	1			indicate want 1 if unequal operands
	dfcmp	bp|0,x2			compare with next element
	tze	invert_ac
	fld	zero_or_one,1		load a 1 if nand, 0 if nor
	eax2	bb|0,x2			reduce to next element
	tnz	simple_nand+1		go back
	tra	return_result

invert_ac:
	fsb	=1e0,du			invert by subtracting 1
	fneg	0			and then reversing
	eax2	bb|0,x2
	tnz	simple_nand+1
	tra	return_result

simple_nor:
	eax1	0			zero to specify will load 0 on unequal operands
	tra	simple_nand+1

"follows operators done in groups of 4 to reduce loop control overhead

group_plus:
	dfad	lb|0,x3
	dfad	lb|-2,x3
	dfad	lb|-4,x3
	dfad	lb|-6,x3
	sblx3	8,du			go down 4 elements
	tnz	group_plus		go back if more to do
	tra	see_whats_left		more to do

group_minus:
	dfsb	lb|0,x3
	fneg	0
	dfsb	lb|-2,x3
	fneg	0
	dfsb	lb|-4,x3
	fneg	0
	dfsb	lb|-6,x3
	fneg	0
	sblx3	8,du			go down 4 elements
	tnz	group_minus		go back if more to do
	tra	see_whats_left		more to do

group_multiply:
	dfmp	lb|0,x3
	dfmp	lb|-2,x3
	dfmp	lb|-4,x3
	dfmp	lb|-6,x3
	sblx3	8,du			go down 4 elements
	tnz	group_multiply		go back if more to do
	tra	see_whats_left		more to do

group_divide:
	fad	=0e0,du			is divisor zero? (set indicators)
	tnz	5,ic			no, branch to dfdi
	dfcmp	lb|0,x3			is dividend zero?
	tnz	zerodivide		no, branch
	fld	=1e0,du			map 0-:0 into 1
	tra	7,ic			branch to next dfdi
	dfdi	lb|0,x3			compute this quotient--next divisor
	tnz	5,ic			divisor 0? -- no, branch to dfdi
	dfcmp	lb|-2,x3			is dividend zero?
	tnz	zerodivide		no, branch
	fld	=1e0,du			map 0-:0 into 1
	tra	7,ic
	dfdi	lb|-2,x3			compute this quotient--next divisor
	tnz	5,ic			divisor 0? -- no, branch to dfdi
	dfcmp	lb|-4,x3			is dividend zero?
	tnz	zerodivide		no, branch
	fld	=1e0,du			map 0-:0 into 1
	tra	7,ic
	dfdi	lb|-4,x3			compute this quotient--next divisor
	tnz	5,ic			divisor 0? -- no, branch to dfdi
	dfcmp	lb|-6,x3			is dividend zero?
	tnz	zerodivide		no, branch
	fld	=1e0,du			map 0-:0 into 1
	tra	2,ic
	dfdi	lb|-6,x3			compute this quotient--next divisor
	sblx3	8,du			go down 4 elements
	tnz	group_divide		go back if more to do
	tra	see_whats_left		more to do

group_max:
	dfcmp	lb|0,x3
	tpl	2,ic
	dfld	lb|0,x3
	dfcmp	lb|-2,x3
	tpl	2,ic
	dfld	lb|-2,x3
	dfcmp	lb|-4,x3
	tpl	2,ic
	dfld	lb|-4,x3
	dfcmp	lb|-6,x3
	tpl	2,ic
	dfld	lb|-6,x3
	sblx3	8,du			go down 4 elements
	tnz	group_max			go back if more to do
	tra	see_whats_left		more to do

group_min:
	dfcmp	lb|0,x3
	tmi	2,ic
	dfld	lb|0,x3
	dfcmp	lb|-2,x3
	tmi	2,ic
	dfld	lb|-2,x3
	dfcmp	lb|-4,x3
	tmi	2,ic
	dfld	lb|-4,x3
	dfcmp	lb|-6,x3
	tmi	2,ic
	dfld	lb|-6,x3
	sblx3	8,du			go down 4 elements
	tnz	group_min			go back if more to do
	tra	see_whats_left		more to do

group_and:
	fcmp	=0e0,du			already 0, return zero
	tze	return_result

group_and_loop:
	dfcmp	lb|0,x3
	tnz	invert_and_return
	dfcmp	lb|-2,x3			compare to next element
	tnz	invert_and_return
	dfcmp	lb|-4,x3			compare to next element
	tnz	invert_and_return
	dfcmp	lb|-6,x3			compare to next element
	tnz	invert_and_return
	sblx3	8,du			go down 4 elements
	tnz	group_and_loop		go back if more to do
	tra	see_whats_left		more to do

group_or:
	fcmp	=1e0,du			if already 1, return it
	tze	return_result
	tra	group_and_loop

group_nand:
	eax1	1			indicate want to load 1 when unequal

group_nand1:
	dfcmp	lb|0,x3			compare previous result with next element
	tze	invert_ac_group1		if equal, invert previous result
	fld	zero_or_one,1		load 0 if nor, 1 if nand
group_nand2:
	dfcmp	lb|-2,x3			compare previous result with next element
	tze	invert_ac_group2		if equal, invert previous result
	fld	zero_or_one,1		load 0 if nor, 1 if nand
group_nand3:
	dfcmp	lb|-4,x3			compare previous result with next element
	tze	invert_ac_group3		if equal, invert previous result
	fld	zero_or_one,1		load 0 if nor, 1 if nand
group_nand4:
	dfcmp	lb|-6,x3			compare previous result with next element
	tze	invert_ac_group4		if equal, invert previous result
	fld	zero_or_one,1		load 0 if nor, 1 if nand
	sblx3	8,du			go down 4 elements
	tnz	group_and			go back if more to do
	tra	see_whats_left		more to do

invert_ac_group1:
	fsb	=1e0,du			invert
	fneg	0
	tra	group_nand1

invert_ac_group2:
	fsb	=1e0,du			invert
	fneg	0
	tra	group_nand2

invert_ac_group3:
	fsb	=1e0,du			invert
	fneg	0
	tra	group_nand3

invert_ac_group4:
	fsb	=1e0,du			invert
	fneg	0
	tra	group_nand4

group_nor:
	eax0	0			indicate will load zero if unequal operands
	tra	group_nand1

zero_or_one:
	oct	400000000000
	oct	002400000000
return_last_element:
	dfld	bp|0
	tra	return_result

see_whats_left:				"any left after doing those mod 4?
	cmpx2	0,du			see if zero
	tnz	simple_transfer,x0		no, do operation

return_result:				"place to return result
	dfstr	ap|result,*		store into arg, rounding for accuracy
	short_return

zerodivide:
	eppbp	ap|zerodivide_label,*	get ptr to label
	eppbp	bp|0,*			load label.codeptr
	spribp	sp|stack_frame.return_ptr	change return location (alternate return!)
	short_return
"
	include	stack_frame
	end
