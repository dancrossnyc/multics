/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



apl_system_functions_:
     procedure (operators_argument);

/*
 * this routine implements those functions of APL whose names begin with a Quad:
 *  QuadCR, QuadDL, QuadEX, QuadFX, QuadNC, QuadNL, QuadEC, QuadAF.
 *
 * Written 73.8.22 by DAM
 * Modified 740909 by PG for new value bead declaration, and to finish QuadEC and some of QuadAF.
   Modified 781208 by PG to switch to new clock builtin
   Modified 790308 by William M. York to double-word align all value beads
	and implement qAF. 
   Modified 791219 by PG to fix 430 (qEC and qAF return invalid value_beads when no error occurs).
   Modified 800130 by PG to fix 441 (qAF returns with ws_info.vsp one word too low).
   Modified 800814 by WMY to fix 469 (qAF does not trap active_function_error).
   Modified: 8 July 1982 by GMP to use cu_$evaluate_active_string rather than cu_$af
 */


/* pick up right operand and dispatch to routine for the particular function */

	right_vb = operands (2).value;
	right = right_vb -> value_bead.data_pointer;

	go to fcn (operators_argument.op1);

fcn (63):						/* QuadDL - delay n seconds, return number of seconds of actual delay */
	number_type = numeric_value_type;
	if ^right_vb -> value_bead.data_type.numeric_value
	then go to domain_error_right;
	if right_vb -> value_bead.total_data_elements ^= 1
	then go to domain_error_right;

	if right -> numeric_datum (0) <= 0
	then do;					/* don't delay */
		apl_number = 0;
		go to return_apl_number_monadic;
	     end;

	start_of_sleep_time = clock ();
	on apl_quit_ go to quat_out_of_delay;		/* set up handler so loser can terminate the delay */
	call timer_manager_$sleep (fixed (right -> numeric_datum (0) * 1e6, 71), "10"b);
quat_out_of_delay:
	revert apl_quit_;

	apl_number = float (clock () - start_of_sleep_time) / 1e6;
						/* actual length of delay */

return_apl_number_monadic:
	if operands (2).on_stack
	then value_stack_ptr = right_vb;

	number_of_dimensions = 0;
	n_words = size (value_bead) + size (apl_number) + 1;
	result_vb = apl_push_stack_ (n_words);
	operators_argument.result = result_vb;

	string (result_vb -> value_bead.type) = number_type;
	result_vb -> value_bead.total_data_elements = 1;
	result_vb -> value_bead.rhorho = 0;
	result = addr (result_vb -> value_bead.rho (1));
	if substr (rel (result), 18, 1)
	then result = addrel (result, 1);
	result_vb -> value_bead.data_pointer = result;
	result -> numeric_datum (0) = apl_number;
	return;

fcn (58):						/* QuadCR - return character representation of function */
	if ^right_vb -> value_bead.data_type.character_value
	then go to domain_error_right;
	if right_vb -> value_bead.rhorho > 1
	then go to quad_cr_lose;
	data_elements = right_vb -> value_bead.total_data_elements;
	name_len = data_elements;
	name_pos = 0;
	call check_name;
	if name_no_good
	then go to quad_cr_lose;

	if sbp -> symbol_bead.meaning_pointer = null
	then go to quad_cr_lose_and_wash_sbp;
	if ^sbp -> symbol_bead.meaning_pointer -> general_bead.type.function
	then go to quad_cr_lose_and_wash_sbp;
	if sbp -> symbol_bead.meaning_pointer -> function_bead.class ^= 0
	then go to quad_cr_lose_and_wash_sbp;

/* got text of function.  In order to convert to matrix form, must first find number
	   of lines and maximum line length */

	max_line_length = 0;
	number_of_lines = 0;
	do line_pos = 0 repeat (line_pos + this_line_length)
	     while (line_pos < sbp -> symbol_bead.meaning_pointer -> function_bead.text_length);
	     this_line_length =
		index (substr (sbp -> symbol_bead.meaning_pointer -> function_bead.text, line_pos + 1), QNewLine);
	     if this_line_length > max_line_length
	     then max_line_length = this_line_length;
	     number_of_lines = number_of_lines + 1;
	end;

	max_line_length = max_line_length - 1;		/* because we will throw away the newlines */

	data_elements = number_of_lines * max_line_length;
	if operands (2).on_stack
	then value_stack_ptr = right_vb;		/* no longer need operand */

	call alloc_chars_on_stack (2);

	result_vb -> value_bead.rho (1) = number_of_lines;
	result_vb -> value_bead.rho (2) = max_line_length;

/* now copy in the lines of the function, stripping newlines and padding with spaces on the right */

	line_pos = 0;
	do line_number = 0 by 1 while (line_number < number_of_lines);

	     this_line_length =
		index (substr (sbp -> symbol_bead.meaning_pointer -> function_bead.text, line_pos + 1), QNewLine);
	     substr (result -> character_string_overlay, line_number * max_line_length + 1, max_line_length) =
		substr (sbp -> symbol_bead.meaning_pointer -> function_bead.text, line_pos + 1, this_line_length - 1);
	     line_pos = line_pos + this_line_length;
	end;

	call wash_sbp;
	return;


quad_cr_lose_and_wash_sbp:
	call wash_sbp;

quad_cr_lose:					/* name is not unlocked function, return a 0 by 0 character matrix */
	data_elements = 0;
	if operands (2).on_stack
	then value_stack_ptr = right_vb;
	call alloc_chars_on_stack (2);
	result_vb -> value_bead.rho (1), result_vb -> value_bead.rho (2) = 0;
	return;



wash_sbp:
     proc;

	sbp -> symbol_bead.reference_count = sbp -> symbol_bead.reference_count - 1;
	if sbp -> symbol_bead.reference_count <= 0
	then call apl_free_bead_ (sbp);
     end wash_sbp;

/* here we insert some stack allocation routines */

alloc_chars_on_stack:				/* scalar/vector/matrix of chars */
     procedure (n_dims);

/* parameters */

declare	n_dims		fixed bin;

/* program */

	number_of_dimensions = n_dims;
	n_words = size (value_bead) + size (character_string_overlay);

	result_vb = apl_push_stack_ (n_words);
	operators_argument.result = result_vb;

	value_stack_ptr = addrel (result_vb, n_words);
	string (result_vb -> value_bead.type) = character_value_type;
	result_vb -> value_bead.rhorho = number_of_dimensions;
	result_vb -> value_bead.total_data_elements = data_elements;
	result_vb -> value_bead.data_pointer, result = addrel (result_vb, size (value_bead));

     end alloc_chars_on_stack;


alloc_numbers_on_stack:
     proc;					/* vector of numbers */

	number_of_dimensions = 1;
	n_words = size (value_bead) + size (numeric_datum) + 1;

	result_vb = apl_push_stack_ (n_words);
	operators_argument.result = result_vb;

	string (result_vb -> value_bead.type) = numeric_value_type;
	result_vb -> value_bead.total_data_elements, result_vb -> value_bead.rho (1) = data_elements;
	result_vb -> value_bead.rhorho = 1;
	result = addrel (result_vb, size (value_bead));

	if substr (rel (result), 18, 1)
	then result = addrel (result, 1);

	result_vb -> value_bead.data_pointer = result;

     end alloc_numbers_on_stack;

%include apl_push_stack_fcn;

fcn (62):						/* QuadNC - returns type of use of names */
	number_type = integral_value_type;
	if ^right_vb -> value_bead.data_type.character_value
	then go to domain_error_right;
	if right_vb -> value_bead.rhorho = 2
	then do;

/* arg is matrix, process multiple names and return vector */

		data_elements = right_vb -> value_bead.rho (1);
		call alloc_numbers_on_stack;

		name_len = right_vb -> value_bead.rho (2);
		do which_name = 0 by 1 while (which_name < right_vb -> value_bead.rho (1));
		     name_pos = name_len * which_name;
		     call compute_name_usage;
		     result -> numeric_datum (which_name) = apl_number;
		end;

/* now do copy-up if necessary */

copy_up_numbers:
		if ^operands (2).on_stack
		then return;			/* if no need to copy up */

		value_stack_ptr = right_vb;
		final_result_vb = apl_push_stack_ (n_words);
						/* n_words is already set */

		string (final_result_vb -> value_bead.type) = string (result_vb -> value_bead.type);
		final_result_vb -> value_bead.total_data_elements = result_vb -> value_bead.total_data_elements;
		final_result_vb -> value_bead.rhorho = result_vb -> value_bead.rhorho;
		if final_result_vb -> value_bead.rhorho ^= 0
		then final_result_vb -> value_bead.rho (*) = result_vb -> value_bead.rho (*);

		final_result = addr (final_result_vb -> value_bead.rho (final_result_vb -> value_bead.rhorho + 1));
		if substr (rel (final_result), 18, 1)
		then final_result = addrel (final_result, 1);
		final_result_vb -> value_bead.data_pointer = final_result;

		if data_elements ^= 0
		then /* EIS bug */
		     final_result -> numeric_datum (*) = result -> numeric_datum (*);

		operators_argument.result = final_result_vb;
		return;
	     end;

/* continuation of QuadNC */

	else if right_vb -> value_bead.rhorho > 2
	then go to domain_error_right;

	else do;

/* arg is vector (or scalar, which is length-1 vector) */

		name_len = right_vb -> value_bead.total_data_elements;
		name_pos = 0;
		call compute_name_usage;
		go to return_apl_number_monadic;
	     end;



compute_name_usage:
     proc;

	call check_name;
	if name_no_good
	then apl_number = 4;
	else do;


		if sbp -> symbol_bead.meaning_pointer = null
		then apl_number = 0;
		else if sbp -> symbol_bead.meaning_pointer -> general_bead.type.label
		then apl_number = 1;
		else if sbp -> symbol_bead.meaning_pointer -> general_bead.type.value
		then apl_number = 2;
		else if sbp -> symbol_bead.meaning_pointer -> general_bead.type.function
		then apl_number = 3;
		else apl_number = 4;

		call wash_sbp;
	     end;
     end compute_name_usage;


check_name:
     proc;

dcl	name_string	char (name_pos + name_len) aligned based (right);
						/* portion of right -> character_string_overlay
							   which does not go too far past name */

	call apl_scan_ (name_string, name_pos + 1, token_pos, token_len, token_type, null);
	if token_type ^= 2
	then do;
		name_no_good = "1"b;
		return;
	     end;
	call apl_scan_ (name_string, token_pos + token_len, (0), (1), token_type, null);
	if token_type ^= 0
	then do;
		name_no_good = "1"b;
		return;
	     end;					/* the "name" actually consists of a name and nothing else (except maybe white space) */

	call apl_get_symbol_ (substr (right -> character_string_overlay, token_pos, token_len), sbp, (0));
	name_no_good = "0"b;
	return;
     end check_name;

fcn (61):						/* QuadNL - list names of specified type */
	left_vb = operands (1).value;
	if left_vb ^= null
	then do;

/* dyadic QuadNL */

		if ^left_vb -> value_bead.data_type.character_value
		then go to domain_error_left;
		if left_vb -> value_bead.rhorho > 1
		then go to domain_error_left;

		left = left_vb -> value_bead.data_pointer;
		left_size = left_vb -> value_bead.total_data_elements;
	     end;

/* process right arg */

	do_labels, do_variables, do_functions = "0"b;
	if ^right_vb -> value_bead.data_type.numeric_value
	then go to domain_error_right;
	if right_vb -> value_bead.rhorho > 1
	then go to domain_error_right;

	do i = 0 by 1 while (i < right_vb -> value_bead.total_data_elements);
	     float_temp = floor (right -> numeric_datum (i) + 0.5);
	     if abs (float_temp - right -> numeric_datum (i)) > integer_fuzz
	     then go to domain_error_right;
	     if abs (float_temp) >= 1e17b
	     then go to domain_error_right;
	     fixnum = fixed (float_temp, 17);
	     if fixnum = 1
	     then do_labels = "1"b;
	     else if fixnum = 2
	     then do_variables = "1"b;
	     else if fixnum = 3
	     then do_functions = "1"b;
	     else go to domain_error_right;
	end;

/* right arg no longer needed, pop it off stack */

	if operands (2).on_stack
	then if left_vb = null
	     then value_stack_ptr = right_vb;
	     else if ^operands (1).on_stack
	     then value_stack_ptr = right_vb;

/* set up to compute size of result */

	n_rows, n_cols = 0;
	do pass = 1, 2;				/* first pass computes dimensions of result, second fills it in */

/* scan through all the symbol beads in the world */

	     do htpos = lbound (symbol_table.hash_bucket_ptr, 1) to hbound (symbol_table.hash_bucket_ptr, 1);

		do sbp = symbol_table.hash_bucket_ptr (htpos) repeat (sbp -> symbol_bead.hash_link_pointer)
		     while (sbp ^= null);

/* check alphabetic category */

		     if left_vb ^= null
		     then if index (substr (left -> character_string_overlay, 1, left_size),
			     substr (sbp -> symbol_bead.name, 1, 1)) = 0
			then go to skip_this_symbol;

/* check meaning category */

		     if sbp -> symbol_bead.meaning_pointer ^= null
		     then if sbp -> symbol_bead.meaning_pointer -> general_bead.type.label
			then if do_labels
			     then call do_this_symbol;
			     else ;
			else if sbp -> symbol_bead.meaning_pointer -> general_bead.type.value
			then if do_variables
			     then call do_this_symbol;
			     else ;
			else if sbp -> symbol_bead.meaning_pointer -> general_bead.type.function
			then if do_functions
			     then call do_this_symbol;
			     else ;

skip_this_symbol:
		end;

	     end;

do_this_symbol:
     proc;

	if pass = 1
	then do;
		n_rows = n_rows + 1;
		if sbp -> symbol_bead.name_length > n_cols
		then n_cols = sbp -> symbol_bead.name_length;
	     end;
	else do;
		substr (result -> character_string_overlay, line_pos + 1, n_cols) = sbp -> symbol_bead.name;
		line_pos = line_pos + n_cols;
	     end;
     end do_this_symbol;

	     if pass = 1
	     then do;

/* end of pass 1, allocate result */

		     data_elements = n_rows * n_cols;

/* reuse left arg space if on stack */

		     if left_vb ^= null
		     then if operands (1).on_stack
			then if operands (2).on_stack
			     then value_stack_ptr = right_vb;
			     else value_stack_ptr = left_vb;

		     call alloc_chars_on_stack (2);

		     result_vb -> value_bead.rho (1) = n_rows;
		     result_vb -> value_bead.rho (2) = n_cols;

		     line_pos = 0;			/* initialize for next pass */

/* special kludge to allow doing in place - move left arg up if necc */

		     if left_vb ^= null
		     then if operands (1).on_stack
			then do;

				data_elements = left_size;
				n_words = size (character_string_overlay);

				final_result = apl_push_stack_ (n_words);

				if data_elements ^= 0
				then /* EIS bug */
				     final_result -> character_string_overlay = left -> character_string_overlay;
				left = final_result;
			     end;

		end;

	end;
	return;

fcn (60):						/* QuadEX - expunge a name */
	number_type = zero_or_one_value_type;
	if ^right_vb -> value_bead.data_type.character_value
	then go to domain_error_right;
	if right_vb -> value_bead.rhorho = 2
	then do;

/* matrix of names is arg */

		data_elements = right_vb -> value_bead.rho (1);
						/* number of names */
		call alloc_numbers_on_stack;
		name_len = right_vb -> value_bead.rho (2);
		do which_name = 0 by 1 while (which_name < right_vb -> value_bead.rho (1));
		     name_pos = name_len * which_name;
		     call expunge_name;
		     result -> numeric_datum (which_name) = apl_number;
		end;
		go to copy_up_numbers;
	     end;

	else if right_vb -> value_bead.rhorho > 2
	then go to domain_error_right;
	else do;

/* arg is 1 name (vector) */

		name_len = right_vb -> value_bead.total_data_elements;
		name_pos = 0;
		call expunge_name;
		go to return_apl_number_monadic;
	     end;
expunge_name:
     proc;

	call check_name;
	if name_no_good
	then apl_number = 0;

	else if sbp -> symbol_bead.meaning_pointer = null
	then apl_number = 1;
	else if sbp -> symbol_bead.meaning_pointer -> general_bead.type.label
	then apl_number = 0;
	else if sbp -> symbol_bead.meaning_pointer -> general_bead.type.value
	then do;

/* expunge a non-label value */

expunge_meaning:
		sbp -> symbol_bead.meaning_pointer -> general_bead.reference_count =
		     sbp -> symbol_bead.meaning_pointer -> general_bead.reference_count - 1;
		if sbp -> symbol_bead.meaning_pointer -> general_bead.reference_count <= 0
		then call apl_free_bead_ (sbp -> symbol_bead.meaning_pointer);
		sbp -> symbol_bead.meaning_pointer = null;
		apl_number = 1;
	     end;
	else if sbp -> symbol_bead.meaning_pointer -> general_bead.type.function
	then /* expunging a function, first check if allowed to */
	     if apl_pendant_function_check_ (sbp -> symbol_bead.meaning_pointer) = "0"b
	     then go to expunge_meaning;
	     else apl_number = 0;			/* not allowed, return 0 */

	else apl_number = 0;			/* other cruft cannot be expunged */

     end expunge_name;

fcn (59):						/* QuadFX - fix definition of function */
	if ^right_vb -> value_bead.data_type.character_value
	then go to domain_error_right;
	if right_vb -> value_bead.rhorho ^= 2
	then go to domain_error_right;

	n_rows = right_vb -> value_bead.rho (1);
	n_cols = right_vb -> value_bead.rho (2);

/* first step is to put in NewLines and strip off trailing spaces */

	value_stack_popper = value_stack_ptr;
	fcn_text_ptr = value_stack_ptr;
	space_left_in_stack = 4 * (maximum_value_stack_size - fixed (rel (fcn_text_ptr), 18));

	out_pos = 0;
	do in_row = 0 by 1 while (in_row < n_rows);
	     row_pos = in_row * n_cols;
	     do row_length = n_cols by -1 while (row_length > 0);
						/* strip trailing Spaces */
		if substr (right -> character_string_overlay, row_pos + row_length - 1 + 1, 1) ^= QSpace
		then go to exitloop;
	     end;
exitloop:
	     space_left_in_stack = space_left_in_stack - (row_length + 1);
	     if space_left_in_stack < 0
	     then do;				/* stack full, switch segs */
		     call apl_get_next_value_stack_seg_ (divide (out_pos + row_length + 1 + 3, 4, 18, 0));
		     value_stack_ptr -> fcn_text = fcn_text_ptr -> fcn_text;
		     fcn_text_ptr = value_stack_ptr;
		     space_left_in_stack = 4 * (maximum_value_stack_size - fixed (rel (fcn_text_ptr), 18));
		end;
	     substr (fcn_text_ptr -> fcn_text, out_pos + 1, row_length) =
		substr (right -> character_string_overlay, row_pos + 1, row_length);
	     substr (fcn_text_ptr -> fcn_text, out_pos + row_length + 1, 1) = QNewLine;
	     out_pos = out_pos + (row_length + 1);
	end;

/* second step is to construct function bead, set fbp */

	data_elements = out_pos;
	call apl_allocate_words_ (size (function_bead), fbp);
	string (fbp -> function_bead.type) = function_type;
	fbp -> function_bead.lexed_function_bead_pointer = null;
	fbp -> function_bead.class = 0;
	fbp -> function_bead.stop_control_pointer, fbp -> function_bead.trace_control_pointer = null;
	fbp -> function_bead.text_length = data_elements;
	fbp -> function_bead.text = fcn_text_ptr -> fcn_text;
	value_stack_ptr = value_stack_popper;

	call apl_function_lex_no_messages_ (fbp -> function_bead.text, lfbp, errors_occurred, 0,
	     addr (current_parse_frame_ptr -> parse_frame.reduction_stack_ptr
	     -> reduction_stack (current_parse_frame_ptr -> parse_frame.current_parseme + 1)), error_line);

	if errors_occurred
	then do;					/* syntax error */
		apl_number = error_line + index_origin;
		call wash_fbp;
		number_type = integral_value_type;
		go to return_apl_number_monadic;
	     end;

	fbp -> function_bead.lexed_function_bead_pointer = lfbp;
	sbp = lfbp -> lexed_function_bead.name;		/* name of function being fixed */
	if sbp -> symbol_bead.meaning_pointer = null
	then sbp -> symbol_bead.meaning_pointer = fbp;
	else if sbp -> symbol_bead.meaning_pointer -> general_bead.type.function
	then if apl_pendant_function_check_ (sbp -> symbol_bead.meaning_pointer)
	     then go to cant_fix;
	     else do;
		     sbp -> symbol_bead.meaning_pointer -> general_bead.reference_count =
			sbp -> symbol_bead.meaning_pointer -> general_bead.reference_count - 1;
		     if sbp -> symbol_bead.meaning_pointer -> general_bead.reference_count <= 0
		     then call apl_free_bead_ (sbp -> symbol_bead.meaning_pointer);
		     sbp -> symbol_bead.meaning_pointer = fbp;
		end;
	else go to cant_fix;

/* return name of function, as character vector */

	data_elements = sbp -> symbol_bead.name_length;
	if operands (2).on_stack
	then value_stack_ptr = right_vb;
	if data_elements = 1
	then call alloc_chars_on_stack (0);
	else do;
		call alloc_chars_on_stack (1);
		result_vb -> value_bead.rho (1) = data_elements;
	     end;

	result -> character_string_overlay = sbp -> symbol_bead.name;

	return;


wash_fbp:
     proc;

	fbp -> function_bead.reference_count = fbp -> function_bead.reference_count - 1;
	if fbp -> function_bead.reference_count <= 0
	then call apl_free_bead_ (fbp);
     end wash_fbp;



cant_fix:
	apl_number = float_index_origin;		/* name error is attributed to header line */
	call wash_fbp;
	number_type = integral_value_type;
	go to return_apl_number_monadic;

fcn (64):
fcn (65):
fcn (66):						/* unimplmented shared-variable functions */
	call apl_system_error_ (apl_error_table_$no_sv);
	return;					/* just in case */

fcn (70):						/* QuadEC - Execute Multics command line */
fcn (71):						/* QuadAF - Evaluate Multics active function expression */
	if ^right_vb -> value_bead.character_value
	then go to domain_error_right;

	if right_vb -> value_bead.rhorho > 1
	then go to domain_error_right;

/* at this point we have a character vector or scalar */
/* copy operand because command processor clobbers it! */

	data_elements = right_vb -> value_bead.total_data_elements;
	n_words = size (character_string_overlay);

	result = apl_push_stack_ (n_words);

	result -> character_string_overlay = right -> character_string_overlay;

	if ws_info.switches.restrict_exec_command	/* oops */
	then do;
		operators_argument.error_code = apl_error_table_$exec_restricted;
		return;
	     end;
	else if operators_argument.op1 = 70		/* QuadEC */
	then do;
		call cu_$cp ((result), data_elements, code);

		data_elements = 0;
	     end;
	else do;					/* QuadAF */
		call apl_segment_manager_$get (final_result);

		on active_function_error
		     begin;

			if code = 0
			     then code = error_table_$badcall;

			goto return_error_message;
		     end;

		call cu_$evaluate_active_string (null (), (result -> character_string_overlay), NORMAL_ACTIVE_STRING,
		     final_result -> return_string, code);

		revert active_function_error;

		data_elements = length (final_result -> return_string);
	     end;

/* allocate result (on top of copy of operand) */

	ws_info.value_stack_ptr = result;

	if code ^= 0
	then do;
return_error_message:
		call convert_status_code_ (code, "xxxxxxxx", long_message);
		data_elements = length (rtrim (long_message));
	     end;

	call alloc_chars_on_stack (1);		/* result is always a vector */

	if code = 0
	then if data_elements ^= 0
	     then do;
		     result -> character_string_overlay = final_result -> return_string;
		     call apl_segment_manager_$free (final_result);
		end;
	     else ;
	else result -> character_string_overlay = long_message;

	result_vb -> value_bead.rho (1) = data_elements;
	result_vb -> value_bead.total_data_elements = data_elements;

	return;

domain_error_right:
	operators_argument.where_error = operators_argument.where_error - 1;
domain_error:
	operators_argument.error_code = apl_error_table_$domain;
	return;

domain_error_left:
	operators_argument.where_error = operators_argument.where_error + 1;
	go to domain_error;

/* Declarations */

declare	code		fixed bin (35),
	long_message	char (100) aligned,
	return_string	char (4 * 65535) varying based;

dcl	right_vb		unaligned pointer,
	right		unaligned pointer,
	number_type	bit (18),
	apl_number	float,
	start_of_sleep_time fixed bin (71),
	n_words		fixed bin (19),
	result_vb		unaligned pointer,
	result		pointer,
	final_result	pointer,
	final_result_vb	unaligned pointer,
	data_elements	fixed bin (21),
	name_len		fixed bin (21),
	name_pos		fixed bin (21),
	name_no_good	bit (1),
	sbp		unaligned pointer,
	fbp		unaligned pointer,
	lfbp		unaligned pointer,
	max_line_length	fixed bin (21),
	number_of_lines	fixed bin (21),
	line_pos		fixed bin (21),
	this_line_length	fixed bin (21),
	line_number	fixed bin (21),
	which_name	fixed bin (21),
	i		fixed bin (21),
	token_pos		fixed bin (21),
	token_len		fixed bin (21),
	token_type	fixed bin,
	left_vb		unaligned pointer,
	left		unaligned pointer,
	left_size		fixed bin (21),
	(do_labels, do_variables, do_functions)
			bit (1),
	fixnum		fixed bin (17),
	float_temp	float,
	n_rows		fixed bin (21),
	n_cols		fixed bin (21),
	pass		fixed bin (2),
	htpos		fixed bin,
	value_stack_popper	unaligned pointer,
	fcn_text_ptr	unaligned pointer,
	fcn_text		char (out_pos) aligned based (fcn_text_ptr),
	out_pos		fixed bin (21),
	space_left_in_stack fixed bin (21),
	in_row		fixed bin (21),
	row_pos		fixed bin (21),
	row_length	fixed bin (21),
	errors_occurred	bit (1) aligned,
	error_line	fixed bin;


/* Multics entries */

declare	convert_status_code_
			entry (fixed bin (35), char (8) aligned, char (100) aligned),
	cu_$cp		entry (ptr, fixed bin (21), fixed bin (35)),
						/*	cu_$evaluate_active_function entry (ptr, fixed bin (21), ptr, fixed bin (35)), */
	timer_manager_$sleep
			entry (fixed bin (71), bit (2));

/* APL entries */

declare	apl_free_bead_	entry (unaligned pointer),
	apl_get_next_value_stack_seg_
			entry (fixed bin (18)),
	(
	apl_segment_manager_$get,
	apl_segment_manager_$free
	)		entry (ptr),
	apl_scan_		entry (char (*) aligned, fixed bin (21), fixed bin (21), fixed bin (21), fixed bin,
			unaligned pointer),
	apl_get_symbol_	entry (char (*), unaligned pointer, fixed bin),
	apl_pendant_function_check_
			entry (unaligned pointer) returns (bit (1) aligned),
	apl_allocate_words_ entry (fixed bin (18), unaligned pointer),
	apl_function_lex_no_messages_
			entry (char (*) aligned, unaligned pointer, bit (1) aligned, fixed bin, aligned pointer,
			fixed bin),
	apl_system_error_	entry (fixed bin (35)),
	cu_$evaluate_active_string
			entry (ptr, char (*), fixed bin, char (*) var, fixed bin (35));

/* external static */

declare	(
	error_table_$badcall,
	apl_error_table_$domain,
	apl_error_table_$not_implemented,
	apl_error_table_$exec_restricted,
	apl_error_table_$no_sv
	)		fixed bin (35) external;

/* builtin */

dcl	(abs, addr, addrel, clock, divide, fixed, float, floor, hbound, index, lbound, null, rel, reverse, size, string,
	substr, verify)	builtin;

/* conditions */

declare	apl_quit_			condition;
declare	active_function_error	condition;
/* include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_bead_format;
%include apl_operators_argument;
%include apl_operator_bead;
%include apl_value_bead;
%include apl_function_bead;
%include apl_lexed_function_bead;
%include apl_parse_frame;

dcl	parse_frame_ptr	ptr;			/* crock */

%include apl_characters;
%include apl_symbol_table;
%include apl_symbol_bead;
%include cp_active_string_types;



     end apl_system_functions_;
