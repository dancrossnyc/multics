"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************

"
"	apl_monadic_not_appendage_ uses a fast algorithm to change
"	a float bin (63) 0 to a 1 or vice versa
"
"	Written 800131 by B. Margulies
"	Modified 800227 by PG to work
"
	name 	apl_monadic_not_appendage_
	segdef	apl_monadic_not_appendage_
	segdef	in_place
"	
"
"	call apl_monadic_not_appendage_ (right_values_ptr, count, result_values_ptr, temp)
"	call apl_monadic_not_appendage_$in_place (right_values_ptr, count)
"	     
" declare right_values_ptr ptr /* pointer to operand array of float bin (63) */;
" declare count fixed bin (21) aligned /* number of values to count */;
" declare result_values_ptr ptr /* ptr to result array of float bin (63)'s */;
" declare temp fixed bin /* word to be used as a temporary */;
"
	equ	right_values_ptr,2		" parameter 1
	equ	count,4			" parameter 2
	equ	result_values_ptr,6		" parameter 3
	equ	temp,8			" parameter 4
"
	bool	A,001000		" rpd A flag
	bool	B,000400		" rpd B flag
"
"
"	This entrypoint takes an operand that is not on the stack,
"	computes the result, and stores it in the result array.
apl_monadic_not_appendage_:
	epp4	pr0|count,*	" get pointer to count
	ldq	pr4|0		" get count
	tze	go_home		" zero-length array, nothing to do
	epp1	pr0|result_values_ptr,*	" get pointer to pointer to result values
	epp1	pr1|0,*		" get pointer to result values
	epp3	pr0|right_values_ptr,*	" ..
	epp3	pr3|0,*		" ..
	epp5	pr0|temp,*	" get ptr to temp word
	lda	0,dl
	eax4	0
	lls	34		" get count/4 in A
	als	3+18		" get 1+offset of last word of last element, in AU
	sta	pr5|0		" save in temp word
	qrl	34		" get remainder of count/4 in Q
	eax1	0,ql		" and move it to X1
	cmpa	0,dl		" any elements in first group?
	tze	copy_last_group	" no, check remainder
"
copy_group_loop:
	ldaq	pr3|0,x4		" double-word 1
	eraq	flip_bits
	staq	pr1|0,x4
	ldaq	pr3|2,x4		" double-word 2
	eraq	flip_bits
	staq	pr1|2,x4
	ldaq	pr3|4,x4		" double-word 3
	eraq	flip_bits
	staq	pr1|4,x4
	ldaq	pr3|6,x4		" double-word 4
	eraq	flip_bits
	staq	pr1|6,x4
	adlx4	8,du		" step over words just processed
	cmpx4	pr5|0		" done with groups?
	tmi	copy_group_loop	" no, do it again
"
copy_last_group:
	cmpx1	0,du		" last group empty?
	tze	go_home		" yes
"
copy_last_loop:
	ldaq	pr3|0,x4
	eraq	flip_bits
	staq	pr1|0,x4
	adlx4	2,du		" step over words just processed
	sblx1	1,du		" count down remainder
	tpnz	copy_last_loop
	short_return
" 
"
"	This entrypoint takes an operand that is on the stack,
"	and overwrites it with the result.
"
in_place:
	epp4	pr0|count,*	" get pointer to count
	ldq	pr4|0		" get number of elements to process
	tze	go_home		" nothing to do?
	epp3	pr0|right_values_ptr,*	" get pointer to pointer to values
	epp3	pr3|0,*		" get pointer to values
	lda	0,dl		" initialize A
	qrs	1		" make count even
	lls	28		" make A have number of 512-element groups
				" now Q(0:7) has number of pairs in last group
	eax2	0,qu		" number of pairs in last group in X2
	eax3	0		" initialize
	eax4	2		" ..
	ldq	=o402400,du	" mask that turns 0 to 1 or back
	cmpa	0,dl		" any full groups?
	tze	last_group	" no, check last group
top:
	eax0	A+B		" count=256, A=1, B=1
	odd			" the rpd arguments must be a Y-pair
	rpdx	,4		" delta=4
	ersq	pr3|0,x3
	ersq	pr3|0,x4
	sbla	1,dl		" onto the next 256-element group
	tpnz	top		" if any
last_group:
	cmpx2	0,du		" any pairs in last group?
	tze	last_element	" no, see if one element left
	eax0	A+B,x2		" count=X2, A=1, B=1
	odd
	rpdx	,4		" delta=4
	ersq	pr3|0,x3		" X3 continues from last value
	ersq	pr3|0,x4		" ..
last_element:
	lda	pr4|0		" get back count
	cana	=o000001,dl	" odd?
	tze	go_home		" it was even all along
	ersq	pr3|0,x3		" rpd leaves it pointing to next
go_home:	short_return
"
	even
flip_bits:
	oct	402400000000,0
	end
