/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-02-07,LJAdams), approve(86-02-18,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Added the lastref "lref" and restref "rref" options.
  2) change(87-04-09,LJAdams), approve(87-04-22,MCR7684),
     audit(87-04-27,Blair), install(87-08-06,MR12.1-1065):
     For last_ref entry point initialize return parameter to 0 before start of
     processing.
                                                   END HISTORY COMMENTS */


xforum_trans_: proc;

/*
   BEGIN DESCRIPTION

   function:
      This programs contains entries for reading the current, and for finding
      next, previous, first transactions, also previous, next and first
      references to current transaction.

      read: This entry reads the transaction specified by the input index from
      the current meeting, and returns a pointer to the transaction structure.
      forum_ is called to get a pointer to the transaction structure. This
      structure is allocated in system_free and is freed in the xforum_format_
      module. In addition if the requested transaction has an index higher
      than the current last_seen transaction index the value of last_seen is
      updated.

      first_trans: This entry point finds and returns a pointer to the
      first transaction in the current meeting. This is done by looping though
      the transactions 1, 2, 3, etc. looking for one that has not been deleted.
      forum_ is called to get a transaction pointer. The
      last_seen value is also updated if the just read transaction has a higher
      index than the last_seen value. Note that if an error code other than
      trans_deleted or trans_reaped is returned by forum_ the entry will return
      with and undefined pointer value and that error code value. 

      prev_trans: This entry point finds and returns a pointer to the
      prev transaction in the current meeting. The previous transaction is the
      next non-deleted transaction with an index smaller than the current
      transaction. The logic is similar to that in the first_trans entry except
      that the loop index starts at current_index - 1 and is decremented.

      next_trans: This entry finds and returns a pointer to the next
      transaction in the current meeting. The next transaction is the next
      non-deleted transaction with an index larger than the current
      transaction. The logic is similar to that in the first_trans  entry
      except that the loop index starts at current_index + 1.

      first_ref: This entry point finds and returns a pointer to the
      first transaction for the current subject chain in the current meeting.
      The first transaction is found by calling forum_ to get the next and
      previous references to the current transaction and then by looping
      on the previous transaction to get its previous transaction until there
      are no more previous transaction. Once the first transaction is found
      a call to forum_ is made to get the transaction structure ptr. If that
      call fails (returns a non-zero error code) a call to
      xforum_trans_$next_ref is made. If that call fails the error code is
      returned to the caller. Note that the xforum_meeting_info table is not
      updated or used in any way by this entry.

      prev_ref: This entry point finds and returns a pointer to the previous
      transaction for the current subject chain in the current meeting.
      A call to forum_ is made to get the previous and next references. If
      there is not a previous reference the error code invalid_trans_idx is
      returned. If there is a previous reference and it has not been deleted
      a call to forum_ is made to get the transaction pointer and that pointer
      is returned. If an error occurs then the error is returned. If the
      transaction has been deleted a call is made to get its previous and next
      transactions and the loop repeats. A flag is returned by forum_ to 
      indicate if the transaction has been deleted - the xforum_meeting_info
      table is not used.

      next_ref: This entry point finds and returns a pointer to the next
      transaction for the current subject chain in the current meeting.
      The logic is identical to that in prev_ref with the exception that the
      next reference is used instead of the prev reference.

      last_ref: This entry point finds and returns a pointer to the last
      transaction for the current suject chain in the current meeting.
      The logic is identical to that in prev_ref except that the next
      reference is used instead of the prev reference and the looping
      continues until there are no more next references.

   description:

   known bugs:

   notes:

   history:
      83-12-?? DBarkey: Originally written

      84-09-25 Davids: Removed references to xforum_trans_array. The array is
      being deleted because it enforces an upper limit on the number of
      transaction that xforum can handle. The entries read, first_trans,
      prev_trans, and next_trans needed to be restructured quite a bit. None
      of the other entries were effected.
 
      84-11-08 Davids: Audit changes: 1) Simplified the loops for the
      first_trans, prev_trans, and next_trans entries, removed the repeat
      and while clauses and added to and by clauses. Also reformated
      declarations.

   END DESCRIPTION
*/

/* PARAMETERS */

	dcl     P_tidx		 fixed bin parameter;
	dcl     P_forum_user_trans_ptr ptr parameter;
	dcl     P_code		 fixed bin (35) parameter;

/* EXTERNAL STATIC */

	dcl     forum_error_table_$invalid_trans_idx fixed bin (35) ext static;
	dcl     forum_error_table_$trans_deleted fixed bin (35) ext static;
	dcl     forum_error_table_$trans_reaped fixed bin (35) ext static;

/* ENTRIES */

	dcl     xforum_trans_$read	 entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_trans_$next_ref entry (fixed bin, ptr, fixed bin (35));
          dcl     xforum_trans_$prev_ref entry (fixed bin, ptr, fixed bin (35));

/* CONDITIONS */

/* INTERNAL AUTOMATIC */

	dcl     code		 fixed bin (35);
	dcl     delete_sw		 bit (1) aligned;
	dcl     i			 fixed bin;
	dcl     nref		 fixed bin;
	dcl     pref		 fixed bin;
	dcl     tidx		 fixed bin;

/* INTERNAL STATIC */

/* CONSTANTS */

	dcl     TRUE		 bit (1) aligned init ("1"b) static options (constant);

/* BUILTINS */

/* BASED */

/* INCLUDE FILES */

%include forum_dcls;
%page;
%include forum_user_trans;
%page;
%include xforum_meeting_info;
%page;
%include xforum_meeting_list;
%page;
%include xforum_ptr_struct_;
%page;

read: entry (P_tidx, P_forum_user_trans_ptr, P_code);

	idx = xforum_meeting_info.idx;
	tidx = P_tidx;
	P_code = 0;

	call forum_$read_trans (idx, tidx, xforum_system_area_ptr,
	     forum_user_trans_ptr, code);
	if code ^= 0 then do;
	     P_code = code;
	     return;
	end;

	P_forum_user_trans_ptr = forum_user_trans_ptr;

	if tidx > xforum_meeting_info.last_trans
	then xforum_meeting_info.last_trans = tidx;
						/* this could have appeared
				   recently	      */

	return;

first_trans: entry (P_forum_user_trans_ptr, P_code);

	P_code = 0;

	do i = 1 by 1;
	     call forum_$read_trans (idx, i, xforum_system_area_ptr,
		forum_user_trans_ptr, code);
	     if code ^= 0
	     then do;
		if code ^= forum_error_table_$trans_deleted
		     & code ^= forum_error_table_$trans_reaped
		then do;
		     P_code = code;
		     return;
		end;
	     end;
	     else do;
		P_forum_user_trans_ptr = forum_user_trans_ptr;
		if xforum_meeting_info.last_trans < i
		then xforum_meeting_info.last_trans = i;
		return;
	     end;
	end;

prev_trans: entry (P_tidx, P_forum_user_trans_ptr, P_code);

	P_code = 0;

	tidx = P_tidx;

	do i = tidx - 1 to 1 by -1;
	     call forum_$read_trans (idx, i, xforum_system_area_ptr,
		forum_user_trans_ptr, code);
	     if code ^= 0
	     then do;
		if code ^= forum_error_table_$trans_deleted
		     & code ^= forum_error_table_$trans_reaped
		then do;
		     P_code = code;
		     return;
		end;
	     end;
	     else do;
		P_forum_user_trans_ptr = forum_user_trans_ptr;
		if xforum_meeting_info.last_trans < i
		then xforum_meeting_info.last_trans = i;
		return;
	     end;
	end;
	P_code = forum_error_table_$invalid_trans_idx;
	return;

next_trans: entry (P_tidx, P_forum_user_trans_ptr, P_code);

	P_code = 0;

	tidx = P_tidx;

	do i = tidx + 1 by 1;
	     call forum_$read_trans (idx, i, xforum_system_area_ptr,
		forum_user_trans_ptr, code);
	     if code ^= 0
	     then do;
		if code ^= forum_error_table_$trans_deleted
		     & code ^= forum_error_table_$trans_reaped
		then do;
		     P_code = code;
		     return;
		end;
	     end;
	     else do;
		P_forum_user_trans_ptr = forum_user_trans_ptr;
		if xforum_meeting_info.last_trans < i
		then xforum_meeting_info.last_trans = i;
		return;
	     end;
	end;

first_ref: entry (P_tidx, P_forum_user_trans_ptr, P_code);

	P_code = 0;

	tidx = P_tidx;

	call forum_$trans_ref_info (idx, tidx, ONLY_UNDELETED, pref, nref, delete_sw, code);
	if code ^= 0 then do;
	     P_code = code;
	     return;
	end;

	if pref = 0 then do;			/* this was the first	      */
	     call xforum_trans_$read (tidx, forum_user_trans_ptr, code);
	     P_code = code;
	     P_forum_user_trans_ptr = forum_user_trans_ptr;
	     return;
	end;

	do i = pref repeat pref while (TRUE);
	     call forum_$trans_ref_info (idx, i, ONLY_UNDELETED, pref, nref, delete_sw,
		code);
	     if code ^= 0 then do;
		P_code = code;
		return;
	     end;

	     if pref = 0 then do;
		call xforum_trans_$read (i, forum_user_trans_ptr, code);
		if code ^= 0
		then				/* fref not there get next	      */
		     call xforum_trans_$next_ref (i, forum_user_trans_ptr,
			code);
		P_code = code;			/* one way or another	      */
		P_forum_user_trans_ptr = forum_user_trans_ptr;
		return;
	     end;
	end;

prev_ref: entry (P_tidx, P_forum_user_trans_ptr, P_code);

	P_code = 0;

	tidx = P_tidx;

	call forum_$trans_ref_info (idx, tidx, ONLY_UNDELETED, pref, nref, delete_sw, code);
	if code ^= 0 then do;
	     P_code = code;
	     return;
	end;

	if pref = 0 then do;
	     P_code = forum_error_table_$invalid_trans_idx;
	     return;
	end;

	do i = pref repeat pref while (TRUE);
	     if ^delete_sw then do;
		call xforum_trans_$read (i, forum_user_trans_ptr, code);
		if code ^= 0 then do;
		     P_code = code;
		     return;
		end;
		else do;
		     P_forum_user_trans_ptr = forum_user_trans_ptr;
		     return;
		end;
	     end;					/* deleted - try for next	      */
	     call forum_$trans_ref_info (idx, i, ONLY_UNDELETED, pref, nref, delete_sw,
		code);
	     if code ^= 0 then do;
		P_code = code;
		return;
	     end;

	     if pref = 0 then do;
		P_code = forum_error_table_$invalid_trans_idx;
		return;
	     end;
	end;

next_ref: entry (P_tidx, P_forum_user_trans_ptr, P_code);

	P_code = 0;

	tidx = P_tidx;

	call forum_$trans_ref_info (idx, tidx, ONLY_UNDELETED, pref, nref, delete_sw, code);
	if code ^= 0 then do;
	     P_code = code;
	     return;
	end;

	if nref = 0 then do;
	     P_code = forum_error_table_$invalid_trans_idx;
	     return;
	end;

	do i = nref repeat nref while (TRUE);
	     if ^delete_sw then do;
		call xforum_trans_$read (i, forum_user_trans_ptr, code);
		if code ^= 0 then do;
		     P_code = code;
		     return;
		end;
		else do;
		     P_forum_user_trans_ptr = forum_user_trans_ptr;
		     return;
		end;
	     end;					/* deleted - try for next	      */
	     call forum_$trans_ref_info (idx, i, ONLY_UNDELETED, pref, nref, delete_sw,
		code);
	     if code ^= 0 then do;
		P_code = code;
		return;
	     end;

	     if nref = 0 then do;
		P_code = forum_error_table_$invalid_trans_idx;
		return;
	     end;
	  end;
         

last_ref: entry (P_tidx, P_forum_user_trans_ptr, P_code);

          nref = P_tidx;
	P_code, code = 0;

	do while(nref ^= 0 & code = 0);
               tidx = nref;
	     call forum_$trans_ref_info (idx, tidx, ONLY_UNDELETED, pref, nref, delete_sw, code);
	     if code ^= 0 then do;
                    P_code = code;
		return;
	     end;
          end;

          if ^delete_sw then do;
               call xforum_trans_$read (tidx, forum_user_trans_ptr, code);
               if code ^= 0 then do;
                    P_code = code;
                    return;
	     end;
               else do;
                    P_forum_user_trans_ptr = forum_user_trans_ptr;
                    return;
               end;
          end;
          else do;					/* get last undeleted			*/
               call xforum_trans_$prev_ref (tidx, forum_user_trans_ptr, code);
               P_forum_user_trans_ptr = forum_user_trans_ptr;
               return;
          end;
    
     end xforum_trans_;
