/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-01-08,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Deleted the function_key_data_ptr and handle_interactive_messages
     input parameters from the get_help entry.  Replaced the parameters
     with internal automatic variables set via calls to the
     xforum_user_profile routine.
     
     85-01-14 Davids: replaced calls to accept_messages and
     defer_messages with calls to xforum_im_mgr$accept_messages and
     defer_messages.
     
     85-04-18 Davids: Added a check to be sure that the user_io window
     width is at least 79 columns wide.  Error list entry #9.
  2) change(87-04-03,LJAdams), approve(87-04-22,MCR7684),
     audit(87-07-24,Blair), install(87-08-06,MR12.1-1065):
     Changed setting up/shutting down msg.
                                                   END HISTORY COMMENTS */


xforum_window_mgr: proc;

/* BEGIN DESCRIPTION

function:
   This module contains entry points for managing the 
   structure of the xforum windows.

description of entry points:
   set_up_xforum_windows: This entry point is used to create the windows used
   by xforum. The video system is invoked if its not already turned on. Xforum 
   builds its windows by carving out pieces of the user_io window, the
   user_io window must start out with at least 19 lines or there will not be
   enough space for all the windows under all circumstances. The entry also
   sets the value of the internal static flag xwm_no_local_menu_display. The
   value of this flag is set to true if the value of "xforum_have_local_menus._"
   in the user's permanent value segment is "yes". Otherwise it is set to
   false. This flag is used to allow a user to bypass the menu display if
   he has some other form of local display capability. Note that the menu
   window is originally created with only 1 line. It is resized as the size of
   the menu to be displayed changes. If the xwm_no_local_menu_display is false
   the menu window is resized to 0 lines. 

   resynch_windows: This entry is used to adjust the current sizes of the
   xforum_windows.menu.iocb window and the user_io (bottom) window so that
   there is enough (and only enough) room for the current menu's requirements.
   All the work is done by calling the resynch_windows_p procedure. 
   Note that if the xwm_no_local_menu_display is false this entry is just a
   no-op since the menu window is not being use.

   check_window_status: This entry checks all the xforum windows to be sure
   that none of them have a window_status_pending flag set. If a window does
   have the flag set a call is made to fix_status which resets the flag. If any
   window had the flag set a call to redisplay is made to redisplay all the
   windows cause we don't know why the flag was set and must assume that the
   screen image has been changed.

   prepare_to_shut_down: This entry is used to start the xforum termination
   process. The user_io window is reset back to its original size. An input
   flag is used to determine if the call is being made in response to a
   normal termination or a cleanup being executed. If its a normal termination
   the user_io window (newly enlarged) is cleared and write_shut_down_message
   is called to tell the user that xforum is shutting down.

   shut_down_xforum_windows: is called to destroy the status, menu, and
   help_line windows. An input flag is used to determine if the call is being
   made in response to a normal termination or a cleanup being executed. If its
   a normal termination the user_io window is cleared, getting rid of the shut
   down message. If the video_system was turned during the
   set_up_xforum_windows call then it is turned off here.

   menu_display: This entry is used to display xforum menus. All xforum static
   menus are displayed via this entry. This entry does nothing if the
   xwm_no_local_menu_display flag is set to false. xforum dynamic menus are
   not displayed using this entry. Dynamic menus must be displayed regardless
   of the value of the xwm_no_local_menu_display flag.

   menu_get_choice: This entry is used to get a menu choice from the user for
   all xforum static menus. If the xwm_no_local_menu_display flag is true
   a call is made to menu_$get_choice. If the flag is false a special protocol
   is used to get the user's response. Two characters are input via
   iox_$get_line. The first character must be a 0 or 1, any other character is
   rejected WITHOUT an error message and a call made to get another character.
   A 1 indicates that the next character identifies a function key while a 0
   indicates that the next character is a menu option choice. Menu choices
   and function keys are identified by number. The number is represented as a
   character, i.e. 5 is the character \005, 12 is \014. This character is then
   appended onto the end of a bit string to produce a fixed bin number. the
   result of this is a function key flag and menu choice - the same as the call
   to menu_$get_choice.

description of internal procedures:

   fix_status: does a call to get_window_status for the input window iocb_ptr.
   The result of this call is to reset the window_status_pending flag for the
   window. The ttp_changed bit of the status structure is also checked. If the
   terminal type has changed then the current width is obtained via a call to
   get_window_info. If the current terminal width is less than the original 
   width an error will be signaled. It would be better to just delete all the
   menus and recreate them as needed but at the moment this would require a 
   massive change. This will at least catch the error.

   create_status_window: Creates the two line status window at the top of
   user_io.

   create_menu_window: Creates a 1 line menu window uder the status window..

   create_bottom_window: Resizes the user_io window so that it starts under the
   menu window and extends to one line above its original last line.

   create_help_line_window: Creates a 1 line help_line window on the line
   following the new last line of the user_io window.

   write_start_up_message: Determines the center line of the original user_io
   window and then writes a message telling the user that Xforum is starting
   up on that line. The message is also centered within the line. After the 
   message is written the cursor is positioned 2 lines below it on the left
   margin. This is done so that any error messages that are output are easier
   to read. A window_$sync is done to force the message to be output.

   write_shut_down_message: Uses the center_line and left margin determined
   in write_start_up_message to write a shut down message. After the 
   message is written the cursor is positioned 2 lines below it on the left
   margin. This is done so that any error messages that are output are easier
   to read. A window_$sync is done to force the message to be output.

   resynch_windows_p: This procedure implements the resynch_windows entry.
   If the input required size is 0 or negative it means that no menu window is 
   needed and the bottom window is to be expanded over the menu window and, if
   the size is negative, into the status window. It is assumed that no output
   will be done to the menu window (and status window) so it (they) is not
   destroyed. A flag is also input to control the clearing of the bottom
   window. In some cases like multics mode you do not want to clear the bottom
   window. In other cases like changing menus you do want to clear it.

   error: this is called when a fatal error has been detected by xforum.
   A fatal error happens when an unexpected error code is returned from
   a system routine, i.e. a non-zero code returned from video_utils, or the
   user's original user_io window is too small. It signals the
   xforum_fatal_error condition. There is a condition handler for this
   in the xforum module.

known bugs:

notes:

history:
  84-06-19 Davids: Written.

  84-06-21 Davids: Added support for the mm_status_window and flag to the
  parameters of resynch_windows to control clearing the bottom window. On
  multics mode we do not want to clear the bottom window.

  84-07-05 Davids: Added local menu display capability. To do this the 
  entries menu_display and menu_get_choice were added. Also the
  resync_windows_p internal proc and changed the resynch_windows entry
  to call it. This was needed so that the resynch_windows entry can be
  a no-op if process has local menu display.

  84-07-06 Davids: Changed the status window to be 3 lines instead of 2 lines.
  This required shifting the menu and bottom windows down by 1. This was done
  so that the menu title can become part of the status window instead of
  part of the menu. This will allow the menu title - which includes the current
  meeting name to be displayed even with local display of the menus.
  Modified the resynch_windows entry to clear the bottom window if local
  display of the menus occurs.

  84-07-24 Davids: Removed the mm_status window and created the help_line
  window.

  84-08-13 Davids: Added the parameter mgc_handle_interactive_messages to
  the menu_get_choice entry and the code to handle messages. If the
  flag is set then before the choice is input messages will be accepted.
  Messages already recieved will be printed in the user_io window and then 
  deleted. After the menu choice is input messages will again be defered.

  84-08-30 Davids: Added the ptsd_ and sdxw_ cleanup_flag to the
  prepare_to_shut_down and shut_down_xforum_windows entrys. These will
  control i/o to the terminal. If cleanup is signaled there should be no
  i/o done.

  84-08-31 Davids: Changed check_window_status to do a position_cursor_rel
  with a 0 change in line and column instead of a position_cursor. This was
  needed so that when the user hits a quit in multics mode the cursor is not
  repositioned. (The quit handler calls the check_window_status entry.)

  84-09-19 Davids: changed references to origin.mbz in the window structures
  to origin.column and set the value to 1 instead of 0. This was needed
  because the system window structure was changed.

  84-09-25 Changed from xforum_have_local_menus to xforum_have_local_menus._

  84-10-04 Davids: Added code to the fix_status procedure to test the
  ttp_changed bit and if on to compare the current terminal width with the
  original terminal width. If the terminal is narrower an error will occur.

  84-10-22 Davids: Changed message handling so that it is the same as
  Xmail's, except for the -brief control arg for print_messages. Xforum
  will not start using the MR11 message system control args until after a
  controlled release tape is cut.

   84-11-07 Davids: Audit changes: 1) Corrected if statement that determined
   the smallest height of the screen. It was checking for 20 when it should
   have been checking for 19. 2) Added calls to iox_$destroy_iocb to destroy
   the window iocbs after destroying the windows. 3) Added the mgc_choice_based
   variable to convert the choice from a character to a fixed bin number
   instead of calling unspec. 4) Cleaned up some messages, added initial
   capitals and periods. 5) Moved the starting up message into a constant
   since it is referenced twice.

   84-11-16 Davids: Added the "-brief" argument to the call to print_messages
   This is needed so that the call does not result in a "You have no messages"
   message being output. print_message was incompatibly changed.
END DESCRIPTION
*/

/* PARAMETERS */

/* GLOBAL */

/* EXTERNAL STATIC */

	dcl     iox_$user_io	 ptr ext static;
	dcl     video_data_$terminal_iocb ptr ext static;
	dcl     video_et_$window_status_pending fixed bin (35) ext static;

/* ENTRIES */

	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$find_iocb	 entry (char (*), ptr, fixed bin (35));
	dcl     menu_$display	 entry (ptr, ptr, fixed bin (35));
	dcl     menu_$get_choice	 entry (ptr, ptr, ptr, bit (1) aligned, fixed bin, fixed bin (35));
	dcl     signal_		 entry () options (variable);
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     value_$get		 entry () options (variable);
	dcl     video_utils_$turn_off_login_channel entry (fixed bin (35));
	dcl     video_utils_$turn_on_login_channel entry (fixed bin (35), char (*));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     window_$create	 entry (ptr, ptr, ptr, fixed bin (35));
	dcl     window_$destroy	 entry (ptr, fixed bin (35));
	dcl     window_$get_one_unechoed_char entry (ptr, char (1) var, bit (1) aligned, fixed bin (35));
	dcl     window_$overwrite_text entry (ptr, char (*), fixed bin (35));
	dcl     window_$position_cursor entry (ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     window_$position_cursor_rel entry (ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     window_$sync	 entry (ptr, fixed bin (35));
	dcl     xforum_im_mgr$accept_messages entry ();
	dcl     xforum_im_mgr$defer_messages entry ();
	dcl     xforum_redisplay_	 entry options (variable);
	dcl     xforum_user_profile$get_function_key_data_ptr entry () returns (ptr);
	dcl     xforum_user_profile$get_handle_interactive_messages entry () returns (bit (1));

/* CONDITIONS */

/* INTERNAL AUTOMATIC */

/* INTERNAL STATIC */

	dcl     xwm_center_line	 fixed bin internal static;
	dcl     xwm_left_margin	 fixed bin internal static;
	dcl     xwm_no_local_menu_display bit (1) internal static;
	dcl     xwm_video_was_already_on bit (1) internal static;
	dcl     01 xwm_xforum_error_info like xforum_error_info internal static;


/* CONSTANTS */

	dcl     xwm_WAIT_FOR_INPUT	 bit (1) aligned init ("1"b) internal static options (constant);

/* BUILTINS */

	dcl     addr		 builtin;
	dcl     divide		 builtin;
	dcl     length		 builtin;
	dcl     null		 builtin;

/* BASED */

/* INCLUDE FILES */

%include xforum_error_info;
%page;
%include xforum_windows;
%page;
%include window_status;

set_up_xforum_windows: entry;

/* AUTOMATIC */

	dcl     suxw_code		 fixed bin (35);
	dcl     suxw_local_menu_state	 char (3);
	dcl     suxw_reason		 char (512);

	xwm_video_was_already_on = (video_data_$terminal_iocb ^= null);
	if ^xwm_video_was_already_on then do;
	     call video_utils_$turn_on_login_channel (suxw_code, suxw_reason);
	     if suxw_code ^= 0 then
		call error (suxw_code, suxw_reason);
	end;

	call window_$clear_window (iox_$user_io, suxw_code);
	if suxw_code ^= 0 then
	     call error (suxw_code, "Could not clear user_io window");

	xforum_windows.orig_user_io.version = window_position_info_version_1;
	call iox_$control (iox_$user_io, "get_window_info",
	     addr (xforum_windows.orig_user_io.position), suxw_code);
	if suxw_code ^= 0 then
	     call error (suxw_code, "Could not get the user_io window data");

	if xforum_windows.orig_user_io.extent.height < 19
          then call error (0, "The user_io window is to small to run Xforum.^/   The window must be at least 19 lines high.");

          if xforum_windows.orig_user_io.extent.width < 79
          then call error (0, "The user_io window is to narrow to run Xforum.^/   The window must be at least 79 columns wide.");

	call write_start_up_message;

	call create_status_window;

	call create_menu_window;

	call create_bottom_window;

	call create_help_line_window;

	xwm_no_local_menu_display = "1"b;
	call value_$get (null (), "11"b, "xforum_have_local_menus._", suxw_local_menu_state, suxw_code);
	if suxw_code = 0
	then do;
	     if suxw_local_menu_state = "yes"
	     then do;
		xwm_no_local_menu_display = "0"b;
		call resynch_windows_p (0, "0"b);
	     end;
	end;

	return;

resynch_windows: entry (rw_size_needed, rw_clear_bottom_window);

/* PARAMETERS */

	dcl     rw_size_needed	 fixed bin;
	dcl     rw_clear_bottom_window bit (1);


	if xwm_no_local_menu_display
	then call resynch_windows_p (rw_size_needed, rw_clear_bottom_window);
	else call window_$clear_window (xforum_windows.bottom.iocb, (0));

	return;

check_window_status: entry;

/* AUTOMATIC */

	dcl     cws_any_window_status_pending bit (1);
	dcl     cws_code		 fixed bin (35);
	cws_any_window_status_pending = "0"b;

	call window_$position_cursor_rel (xforum_windows.status.iocb, 0, 0, cws_code);
	if cws_code = video_et_$window_status_pending
	then do;
	     call fix_status (xforum_windows.status.iocb);
	     cws_any_window_status_pending = "1"b;
	end;
	else
	     if cws_code ^= 0
	then call error (cws_code, "error in status window");

	call window_$position_cursor_rel (xforum_windows.help_line.iocb, 0, 0, cws_code);
	if cws_code = video_et_$window_status_pending
	then do;
	     call fix_status (xforum_windows.help_line.iocb);
	     cws_any_window_status_pending = "1"b;
	end;
	else
	     if cws_code ^= 0
	then call error (cws_code, "error in help line window");

	call window_$position_cursor_rel (xforum_windows.menu.iocb, 0, 0, cws_code);
	if cws_code = video_et_$window_status_pending
	then do;
	     call fix_status (xforum_windows.menu.iocb);
	     cws_any_window_status_pending = "1"b;
	end;
	else
	     if cws_code ^= 0
	then call error (cws_code, "error in menu window");

	call window_$position_cursor_rel (xforum_windows.bottom.iocb, 0, 0, cws_code);
	if cws_code = video_et_$window_status_pending
	then do;
	     call fix_status (xforum_windows.bottom.iocb);
	     cws_any_window_status_pending = "1"b;
	end;
	else
	     if cws_code ^= 0
	then call error (cws_code, "error in bottom window");

	if cws_any_window_status_pending then call xforum_redisplay_ ();

	return;

prepare_to_shut_down: entry (ptsd_cleanup_flag);

/* PARAMETERS */

	dcl     ptsd_cleanup_flag	 bit (1);

/* AUTOMATIC */

	dcl     ptsd_code		 fixed bin (35);


	call iox_$control (iox_$user_io, "set_window_info", addr (xforum_windows.orig_user_io.position), ptsd_code);

	if ^ptsd_cleanup_flag
	then do;
	     call window_$clear_window (iox_$user_io, ptsd_code);
	     call write_shut_down_message;
	end;

	return;

shut_down_xforum_windows: entry (sdxw_cleanup_flag);

/* PARAMETERS */

	dcl     sdxw_cleanup_flag	 bit (1);

/* AUTOMATIC */

	dcl     sdxw_code		 fixed bin (35);

	if xforum_windows.status.iocb ^= null ()
	then do;
	     call window_$destroy (xforum_windows.status.iocb, sdxw_code);
	     call iox_$destroy_iocb (xforum_windows.status.iocb, sdxw_code);
	end;

	if xforum_windows.help_line.iocb ^= null ()
	then do;
	     call window_$destroy (xforum_windows.help_line.iocb, sdxw_code);
	     call iox_$destroy_iocb (xforum_windows.help_line.iocb, sdxw_code);
	end;

	if xforum_windows.menu.iocb ^= null ()
	then do;
	     call window_$destroy (xforum_windows.menu.iocb, sdxw_code);
	     call iox_$destroy_iocb (xforum_windows.menu.iocb, sdxw_code);
	end;

	if ^sdxw_cleanup_flag
	then call window_$clear_window (iox_$user_io, sdxw_code);

	if ^xwm_video_was_already_on
	then call video_utils_$turn_off_login_channel (sdxw_code);

	return;

menu_display: entry (md_menu_ptr);

/* PARAMETERS */

	dcl     md_menu_ptr		 ptr;

/* AUTOMATIC */

	dcl     md_code		 fixed bin (35);




	if xwm_no_local_menu_display
	then do;
	     call menu_$display (xforum_windows.menu.iocb, md_menu_ptr, md_code);
	     if md_code ^= 0
	     then call error (md_code, "Could not display menu");
	end;

	return;

menu_get_choice: entry (mgc_menu_ptr, mgc_function_key_flag, mgc_choice);

/* PARAMETERS */

	dcl     mgc_menu_ptr	 ptr;
	dcl     mgc_function_key_flag	 bit (1) aligned;
	dcl     mgc_choice		 fixed bin;

/* AUTOMATIC */

	dcl     mgc_choice_char_v	 char (1) varying;
	dcl     mgc_code		 fixed bin (35);
	dcl     mgc_function_key_char_flag char (1) varying;
	dcl     mgc_function_key_data_ptr ptr;
	dcl     mgc_handle_interactive_messages bit (1);

/* BASED */

	dcl     01 mgc_choice_based	 based (addr (mgc_choice)),
		02 pad		 bit (27) unal,
		02 choice		 char (1) unal;

	mgc_handle_interactive_messages = xforum_user_profile$get_handle_interactive_messages ();
	mgc_function_key_data_ptr = xforum_user_profile$get_function_key_data_ptr ();

	if mgc_handle_interactive_messages
	then call xforum_im_mgr$accept_messages;

	if xwm_no_local_menu_display
	then do;
	     call menu_$get_choice (xforum_windows.menu.iocb, mgc_menu_ptr, mgc_function_key_data_ptr, mgc_function_key_flag, mgc_choice, mgc_code);
	     if mgc_code ^= 0
	     then call error (mgc_code, "Could not get menu choice from menu software");
	end;
	else do;
	     mgc_function_key_char_flag = "";
	     do while (mgc_function_key_char_flag ^= "0" & mgc_function_key_char_flag ^= "1");
		call window_$get_one_unechoed_char (iox_$user_io, mgc_function_key_char_flag, xwm_WAIT_FOR_INPUT, mgc_code);
		if mgc_code ^= 0
		then call error (mgc_code, "Could not get the function key flag character");
	     end;
	     call window_$get_one_unechoed_char (iox_$user_io, mgc_choice_char_v, xwm_WAIT_FOR_INPUT, mgc_code);
	     if mgc_code ^= 0
	     then call error (mgc_code, "Could not get the choice character");

	     if mgc_function_key_char_flag = "0"
	     then mgc_function_key_flag = "0"b;
	     else mgc_function_key_flag = "1"b;

	     mgc_choice_based.pad = "0"b;
	     mgc_choice_based.choice = mgc_choice_char_v;
	end;

	if mgc_handle_interactive_messages
	then call xforum_im_mgr$defer_messages;

	return;

fix_status: proc (fs_iocb_ptr);

/* PARAMETERS */

	dcl     fs_iocb_ptr		 ptr parameter;

/* AUTOMATIC */

	dcl     fs_code		 fixed bin (35);
	dcl     01 fs_window_info	 like window_position_info;
	dcl     01 fs_window_status_info like window_status_info;

/* BASED */

	dcl     01 fs_window_status_string like window_status based;

	fs_window_status_info.version = window_status_version;
	call iox_$control (fs_iocb_ptr, "get_window_status", addr (fs_window_status_info), fs_code);
	if fs_code ^= 0
	then call error (fs_code, "Could not get status window");

	if addr (fs_window_status_info.status_string) -> fs_window_status_string.ttp_change
	then do;
	     fs_window_info.version = window_position_info_version;
	     call iox_$control (iox_$user_io, "get_window_info", addr (fs_window_info), fs_code);
	     if fs_code ^= 0
	     then call error (fs_code, "Could not determine the new terminal width.");
	     if fs_window_info.extent.width < xforum_windows.orig_user_io.extent.width
	     then call error (0, "Your new terminal is narrower than your last terminal - you must reinvoke Executive Forum.");
	end;

	return;

     end fix_status;

create_status_window: proc;

/* AUTOMATIC */

	dcl     csw_code		 fixed bin (35);

	xforum_windows.status.position.version = window_position_info_version_1;
	xforum_windows.status.position.origin.column = 1;
	xforum_windows.status.position.origin.line = xforum_windows.orig_user_io.position.origin.line;
	xforum_windows.status.position.extent.width = xforum_windows.orig_user_io.position.extent.width;
	xforum_windows.status.position.extent.height = 2;

	call iox_$find_iocb ("xforum_status" || unique_chars_ ("0"b), xforum_windows.status.iocb, csw_code);
	if csw_code ^= 0
	then call error (csw_code, "Could not create status window iocb");

	call window_$create (video_data_$terminal_iocb, addr (xforum_windows.status.position), xforum_windows.status.iocb, csw_code);
	if csw_code ^= 0
	then call error (csw_code, "Could not create status window");

	return;

     end create_status_window;

create_menu_window: proc;

/* AUTOMATIC */

	dcl     cmw_code		 fixed bin (35);

	xforum_windows.menu.position.version = window_position_info_version_1;
	xforum_windows.menu.position.origin.column = 1;
	xforum_windows.menu.position.origin.line = xforum_windows.orig_user_io.position.origin.line + 2;
	xforum_windows.menu.position.extent.width = xforum_windows.orig_user_io.position.extent.width;
	xforum_windows.menu.position.extent.height = 1;

	call iox_$find_iocb ("xforum_menu" || unique_chars_ ("0"b), xforum_windows.menu.iocb, cmw_code);
	if cmw_code ^= 0
	then call error (cmw_code, "Could not create menu window iocb");

	call window_$create (video_data_$terminal_iocb, addr (xforum_windows.menu.position), xforum_windows.menu.iocb, cmw_code);
	if cmw_code ^= 0
	then call error (cmw_code, "Could not create menu window");

	return;

     end create_menu_window;

create_bottom_window: proc;

/* AUTOMATIC */

	dcl     cbw_code		 fixed bin (35);

	xforum_windows.bottom.position.version = window_position_info_version_1;
	xforum_windows.bottom.position.origin.column = 1;
	xforum_windows.bottom.position.origin.line = xforum_windows.orig_user_io.position.origin.line + 3;
	xforum_windows.bottom.position.extent.width = xforum_windows.orig_user_io.position.extent.width;
	xforum_windows.bottom.position.extent.height = xforum_windows.orig_user_io.position.extent.height - 4;

	xforum_windows.bottom.iocb = iox_$user_io;

	call iox_$control (xforum_windows.bottom.iocb, "set_window_info",
	     addr (xforum_windows.bottom.position), cbw_code);
	if cbw_code ^= 0
	then call error (cbw_code, "Could not resize user_io for the bottom window");

	return;

     end create_bottom_window;

create_help_line_window: proc;

/* AUTOMATIC */

	dcl     chlw_code		 fixed bin (35);

	xforum_windows.help_line.position.version = window_position_info_version_1;
	xforum_windows.help_line.position.origin.column = 1;
	xforum_windows.help_line.position.origin.line = xforum_windows.orig_user_io.position.origin.line
	     + xforum_windows.orig_user_io.position.extent.height - 1;
	xforum_windows.help_line.position.extent.width = xforum_windows.orig_user_io.position.extent.width;
	xforum_windows.help_line.position.extent.height = 1;

	call iox_$find_iocb ("xforum_help_line" || unique_chars_ ("0"b), xforum_windows.help_line.iocb, chlw_code);
	if chlw_code ^= 0
	then call error (chlw_code, "Could not create help line window iocb");

	call window_$create (video_data_$terminal_iocb, addr (xforum_windows.help_line.position), xforum_windows.help_line.iocb, chlw_code);
	if chlw_code ^= 0
	then call error (chlw_code, "Could not resize user_io for the help line window.");

	return;

     end create_help_line_window;

write_start_up_message: proc;

/* AUTOMATIC */

	dcl     wsum_code		 fixed bin (35);

/* CONSTANTS */

	dcl     wsum_MESSAGE	 char (61) init ("Executive Forum is setting up.  Please wait for menu display.");



	xwm_center_line = divide (xforum_windows.orig_user_io.position.extent.height, 2, 17, 0);
	xwm_left_margin =
	     divide (xforum_windows.orig_user_io.position.extent.width
	     - length (wsum_MESSAGE), 2, 17, 0);
	call window_$position_cursor (iox_$user_io, xwm_center_line,
	     xwm_left_margin, wsum_code);
	if wsum_code ^= 0 then
	     call error (wsum_code, "Could not position to write start up message.");
	call window_$overwrite_text (iox_$user_io, wsum_MESSAGE, wsum_code);
	if wsum_code ^= 0 then
	     call error (wsum_code, "Could not write start up message.");
	call window_$position_cursor (iox_$user_io, xwm_center_line + 2, 1,
	     wsum_code);
	if wsum_code ^= 0 then
	     call error (wsum_code, "Could not position after writting start up message.");
	call window_$sync (iox_$user_io, wsum_code);
	if wsum_code ^= 0 then
	     call error (wsum_code, "Could not do a window sync.");

	return;

     end write_start_up_message;

write_shut_down_message: proc;

/* AUTOMATIC */

	dcl     wsdm_code		 fixed bin (35);


	call window_$position_cursor (iox_$user_io, xwm_center_line, xwm_left_margin,
	     wsdm_code);
	if wsdm_code ^= 0 then goto exit_write_shut_down_message;

	call window_$overwrite_text (iox_$user_io,
	     "Executive Forum is shutting down.", wsdm_code);
	if wsdm_code ^= 0 then goto exit_write_shut_down_message;

	call window_$position_cursor (iox_$user_io, xwm_center_line + 2, 1,
	     wsdm_code);
	if wsdm_code ^= 0 then goto exit_write_shut_down_message;

	call window_$sync (iox_$user_io, wsdm_code);

exit_write_shut_down_message:
	return;

     end write_shut_down_message;

resynch_windows_p: proc (rwp_size_needed, rwp_clear_bottom_window);

/* PARAMETERS */

	dcl     rwp_size_needed	 fixed bin;
	dcl     rwp_clear_bottom_window bit (1);

/* AUTOMATIC */

	dcl     rwp_code		 fixed bin (35);
	dcl     rwp_difference	 fixed bin;


	if rwp_clear_bottom_window
	then call window_$clear_window (xforum_windows.bottom.iocb, (0));

	if xforum_windows.menu.position.extent.height ^= rwp_size_needed
	then do;
	     rwp_difference = rwp_size_needed - xforum_windows.menu.position.extent.height;
	     xforum_windows.menu.position.extent.height =
		xforum_windows.menu.position.extent.height + rwp_difference;
	     if xforum_windows.menu.position.extent.height > 0
	     then do;
		call iox_$control (xforum_windows.menu.iocb, "set_window_info",
		     addr (xforum_windows.menu.position), rwp_code);
		if rwp_code ^= 0 then
		     call error (rwp_code, "Unable to alter size of menu window.");
	     end;

	     xforum_windows.bottom.position.line =
		xforum_windows.bottom.position.line + rwp_difference;
	     xforum_windows.bottom.position.height =
		xforum_windows.bottom.position.height - rwp_difference;
	     call iox_$control (xforum_windows.bottom.iocb,
		"set_window_info", addr (xforum_windows.bottom.position),
		rwp_code);
	     if rwp_code ^= 0 then
		call error (rwp_code, "Unable to alter user_io window size.");

	     if rwp_clear_bottom_window
	     then call window_$clear_window (xforum_windows.bottom.iocb, (0));
	end;


	return;

     end resynch_windows_p;

error: proc (e_code, e_reason);

/* PARAMETERS */

	dcl     e_code		 fixed bin (35);
	dcl     e_reason		 char (512);

	xwm_xforum_error_info.name = "xforum_window_mgr";
	xwm_xforum_error_info.entry = "";
	xwm_xforum_error_info.doing = "";
	xwm_xforum_error_info.code = e_code;
	xwm_xforum_error_info.reason = e_reason;

	call signal_ ("xforum_fatal_error", null (), addr (xwm_xforum_error_info), null ());

     end error;

     end xforum_window_mgr;
