/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-01-21,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Modified so that if the write_sw is true (write entry called) The
     subject is separated from the comment by the character <ESC>.
     This gives the emacs extension something to search for instead of
     assuming that there are no <NL>s embedded in the subject.  An
     assumption that does not have to be true.  <NL> characters
     embedded in the subject are translated into spaces when the
     comments are listed.
     
     85-03-04 Davids: Added the parameter P_for_emacs_sw to the append
     entry.  This will indicate that the output of this append is to be
     for emacs so special handling of the subject will be done.  Change
     the write entry to alwasy set the for_emacs_sw variable to ON.
     Modified the ioa control string for display so that if the clear
     switch is off a line feed will preceed the comment.  Modified the
     control string for write and append so that if the comment is not
     the first comment, i.e bit_count ^= 0 then either a form feed will
     preceed the comment (for the non emacs case) or a line feed will
     (for the emacs case.)
     
     85-04-10 Davids: Modified so that the output of a comment produced
     via the write_sw, append_sw, or display_sw uses the date_time
     string produced by the new date_time_$format routine which takes
     into account the user's default date_time format and language.
  2) change(85-04-11,Davids), approve(86-02-04,MCR7350),
     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
     Added the parameters P_line_item and P_subject_max_len to the
     parameter list for the list entry.  Also changed the list entry to
     use the P_item_line as the ioa control string for outputing the
     list and to use the string "..." as an indication that the subject
     has been truncated.  The P_subject_max_len is used as the maximum
     length that the subject can be.  Finally the subject is now
     truncated at a new line character instead of translating the
     character to a space.  This what all the other subject display
     routines do, i.e.  subject on status line and subjects in the
     subject menu.
     
     85-06-21 Davids: Extensive internal reorganization.  Gave each
     entry its own set of parameters.  Replaced the COMMON block of
     code with internal procedures.  Added variable declaration
     comments and updated header comments.
                                                   END HISTORY COMMENTS */


xforum_format_: proc ();

/*
   BEGIN DESCRIPTION

   function:
      This procedure is used to display transaction. Transactions may be
      displayed on the terminal as either the complete transaction or just a
      one line "list" entry. Transactions may also be written to a segment.
      Only 1 transaction can be displayed during the call. A pointer to the
      transaction structure is input.

      Note that once the transaction is displayed the storage associated with
      it is freed.

   description of entry points:
      xforum_format_:
         input:
         output:
         It is an error to call the main entry point. The xforum_fatal_error
         condition will be signaled with an "internal programming error" error
         message.

      display:
         input:   ptr                 pointer to forum_user_trans structure for
                                      transaction to be displayed
                  bit (1) aligned     if "1"b the user_io window will be
                                      cleared prior to the display
         output:  fixed bin (35))     standard error code
         This entry displays a transaction on the terminal. By not clearing the
         user_io window before the display you can display multiple
         transactions on the screen. The transaction header includes the
         date-time that the transaction was entered in the user's default
         date-time format. The forum_user_trans structure is freed after the
         display is completed.

      list: 
         input:   ptr                 pointer to forum_user_trans structure for
                                      transaction to be listed
                  char (*)            ioa_ control string to be used to output
                                      line of listing
                  fixed bin           max number of chars from subject to
                                      include in listing
         output:  fixed bin (35)      standard error code
         This entry is used to output a 1 line listing of a transaction. The
         listing includes the forum transaction number, the number of lines in
         the transaction, the date and time that it was entered, the person and
         project ids of the person who entered it and as much of the subject as
         is possible. The format for all this output is controled by the input
         ioa_ control string. This entry does not print out any header lines,
         it is assumed that the caller has done so. It also therefore never
         clears the user_io window. If the transaction subject is longer than
         the input max length the subject is truncated to max_len - 3 and ...
         appended to it. If the subject contains a new line character it is
         truncated at that point and ... appended to it. The date and time
         are output in tghe user's default date and time formats. NOTE that
         these can be different from the user's default date_time format.
         The forum_user_trans structure is freed after the listing line is
         output.

      write:
         input:   ptr                 pointer to forum_user_trans structure for
                                      transaction to be written
                  ptr                 pointer to segment that transaction is to
                                      be written to
         output:  fixed bin (35)      standard error code
         This entry writes the transaction to a segment. The transaction will
         begin at the beginning of the segment. The bit count of the segment
         will be set and the segment truncated to the transaction length.
         It will also be specially formated so that the emacs extension can
         use it. See the description of the internal proc write_to_seg for a
         description of the special emacs formating. The transaction will be
         written using the user's default date-time format and the
         forum_user_trans structure will be freed after it is written. The
         user_io is not touched by this entry.
 
      append:
         input:   ptr                 pointer to forum_user_trans structure for
                                      transaction to be appended
                  ptr                 pointer to segment that transaction is to
                                      be appended to
                  bit (1) aligned     "1"b indicates that segment will be
                                      handed to emacs for display
         input/output:
                  fixed bin (24)      original and updated bit count of segment
         output:  fixed bin (35)      standard error code
         This entry appends a transaction to the end of a segment.
         The bit count of the segment will be updated to reflect the new data.
         If the input for_emacs_sw is set to true the transaction will be
         specially formated so that the emacs extension can use it. See the
         description of the internal proc write_to_seg for a description of the
         special emacs formating. The transaction will be written using the
         user's default date-time format and the forum_user_trans structure
         will be freed after it is written. The user_io is not touched by
         this entry.



   description of internal procedures:
      write_to_seg: This procedure is called by both the write entry and the
      append entry. It writes the transaction to the segment positioning it
      to start after anything already in the segment (the write entry calls it
      with a starting bit count of 0). After its written the new bit count is
      calculated and set. The header line of the transaction includes the
      date-time that the transaction was entered. This date-time is written in
      the user's default date-time format. There are two formats that are used
      to output the transaction. The "normal" format will preceed each
      transaction with a form feed, unless the segment's starting bit count is
      0. In the "emacs" format the transactions are preceeded by a blank line,
      unless the segment's starting bit count is 0. In addition an ESCAPE
      character will be appended onto the subject of the transaction written
      when the segments starting bit count is 0. The ESCAPE is used to
      terminate the subject so that the emacs editor extension can identify
      the end og multi-line subjects. After the segment's bit count has been
      updated the forum_user_trans structure is freed.

      make_end_line: This internal procedure creates the last line displayed
      when the transaction is displayed or written to a segment. It determines 
      if the transaction being displayed or written is part of a comment chain.
      The end line string indicates that the end of the transaction has been
      reached and if there is a previous or next comment in the same comment
      chain. The end line string is returned to the main procedure and used as
      an argument in the calls to ioa_.

      count_lines: This internal proc counts the number of lines that make up
      the comment. It does this by searching the comment counting new line
      characters.

      error: Similar to all other error procedures. It records in an internal
      static structure the details of an error and then signals the
      xforum_fatal_error condition.

   known bugs:

   notes:

   history
      84-06-14 Davids: Modified so that fnumber (the transaction number) is
      declared fixed bin instead of pc "9999". This was needed because
      there are meetings with more than 9999 transactions. Fixed bin was used
      so that leading 0's are not output. Changed call ioa_ statements to refer
      to fnumber as ^i instead of ^a.

      84-08-08 Davids: Modified so that the loop that counts the number of
      lines (at the beginning of COMMON) can handle the case where the last
      line does not end in a NL character. This was causing an infinite loop.
      Also added the make_end_line routine to change the termination string
      to that defined in the MTB.

      84-09-26 Davids: Modified so that right before it returns it frees the
      structure associated with the transaction. This was put here instead of
      requiring that the all the callers did it. Also changed from using
      hcs_$set_bc to using terminate_file_.

      84-09-27 Davids: Added the append entry point and code in COMMON to
      implement it.

      84-10-24 Davids: Modified the make_end_line internal proc so that
      the forum_user_trans structures that are allocated in the calls
      to xforum_trans$next_ref and previous_ref are freed. they were not being
      freed and large numbers of selections were causing RQOs in the pdir -
      which results in a fatal process error.

      84-10-29 Davids: Added the approx_trans_length variable and made the
      lengths of seg and append_seg that long instead of the constant 1000000
      characters. This was needed because ioa_$rs was creating a segment of
      1000000 characters of 245 pages. If the user does not have the quota 
      it dies with a record quota overflow. The 500 character constant is used
      to take care of the header and trailer lines.

      84-11-14 Davids: Auditing changes: 1) Under the COMMON label, combined
      the the write and append code by extending the ioa_ string to include the
      form feed if the bit count is not zero. 2) Also combined the code for
      producing a listing so that only 1 call to ioa_ is made. a local copy
      of the subject is made which is either the entire subject or the first
      18 characters of the subject and the string <MORE>. 3) In make_end_line
      combined three separate calls to ioa_ which depended on the flags into 1
      call with a more complex ioa_ string and the flags input to ioa_.
      3) cleaned up the declarations.
   END DESCRIPTION
*/

/* PARAMETERS */

/* EXTERNAL STATIC */

/* ENTRIES */

	dcl     date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$rs		 entry () options (variable);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     iox_$user_io	 ptr ext static;
	dcl     signal_		 entry () options (variable);
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
	dcl     xforum_trans_$next_ref entry (fixed bin, ptr, fixed bin (35));
	dcl     xforum_trans_$prev_ref entry (fixed bin, ptr, fixed bin (35));

/* CONDITIONS */

/* INTERNAL AUTOMATIC */

	dcl     xf_end_line		 char (100) varying;/* contains the last line of the display */
						/* indicates the comment number and if its part of a subject chain */

/* INTERNAL STATIC */

	dcl     01 xf_xforum_error_info like xforum_error_info internal static;
						/* used to record error infor to be outpuyt to the user */

/* CONSTANTS */

	dcl     xf_NL		 char (1) init ("
") internal static options (constant);
						/* new line character */

/* BUILTINS */

	dcl     (
	        addbitno,
	        addr,
	        index,
	        length,
	        null,
	        rtrim,
	        substr
	        )			 builtin;

/* BASED */

/* INCLUDE FILES */

%include xforum_error_info;
%page;
%include xforum_ptr_struct_;
%page;
%include xforum_meeting_info;
%page;
%include forum_user_trans;
%page;
%include terminate_file;

	call error (0, "Internal programming error - xforum_format_$xforum_format called.");

display: entry (d_forum_user_trans_ptr, d_clear_sw, d_code);

/* PARAMETERS */

	dcl     d_forum_user_trans_ptr ptr;		/* (input) pointer to forum_user_trans */
						/*         structure for transaction to be displayed */
	dcl     d_clear_sw		 bit (1) aligned;	/* (input) if "1"b the user_io window */
						/*         will be cleared prior to the display */
	dcl     d_code		 fixed bin (35);	/* (output) standard error code */

/* INTERNAL AUTOMATIC */

	dcl     d_date_time		 char (256);	/* date and time comment was entered */
						/* formated according to the users date_time format */
	dcl     d_lines		 fixed bin;	/* number of lines in the comment */
	dcl     d_number		 fixed bin;	/* forum comment number */





	d_code = 0;

	if d_clear_sw
	then call window_$clear_window (iox_$user_io, (0));

	forum_user_trans_ptr = d_forum_user_trans_ptr;
	d_number = forum_user_trans.trans_no;
	d_lines = count_lines ();
	call make_end_line (d_number);

	d_date_time = date_time_$format ("^<date_time>", forum_user_trans.time, "", "");
	call ioa_ (
	     "^[^/^][^i] (^d line^[s^]) ^a.^a ^a ^a^/Subject: ^a^/^a--------------^/^a",
	     ^d_clear_sw, d_number, d_lines, (d_lines ^= 1),
	     forum_user_trans.person_id, forum_user_trans.project_id,
	     d_date_time, xforum_meeting_info.name,
	     forum_user_trans.subject, forum_user_trans.text,
	     xf_end_line);

	free forum_user_trans;

	return;

list: entry (l_forum_user_trans_ptr, l_item_line, l_subject_max_len, l_code);

/* PARAMETERS */

	dcl     l_forum_user_trans_ptr ptr;		/* (input) pointer to forum_user_trans */
						/*         structure for transaction to be listed */
	dcl     l_item_line		 char (*);	/* (input) ioa_ control string to */
						/*         be used to output line of listing */
	dcl     l_subject_max_len	 fixed bin;	/* (input) max number of chars from */
						/*         subject to include in listing */
	dcl     l_code		 fixed bin (35);	/* (output) standard error code */

/* INTERNAL AUTOMATIC */

	dcl     l_date_string	 char (100);	/* date comment was entered */
						/* formated according to the users date format */
	dcl     l_lines		 fixed bin;	/* number of lines in the comment */
	dcl     l_local_subject	 char (25);	/* that part of the subject string that will be listed */
	dcl     l_nl_index		 fixed bin;	/* index in local_subject string of */
						/* the first new line char, if any */
	dcl     l_number		 fixed bin;	/* forum comment number */
	dcl     l_time_string	 char (100);	/* time comment was entered */
						/* formated according to the users time format */





	l_code = 0;

	forum_user_trans_ptr = l_forum_user_trans_ptr;
	l_number = forum_user_trans.trans_no;
	l_lines = count_lines ();

	l_date_string = date_time_$format ("^<date>", forum_user_trans.time, "", "");
	l_time_string = date_time_$format ("^<time>", forum_user_trans.time, "", "");

	if length (rtrim (forum_user_trans.subject)) <= l_subject_max_len
	then l_local_subject = forum_user_trans.subject;
	else l_local_subject = substr (forum_user_trans.subject, 1, l_subject_max_len - 3) || "...";

	l_nl_index = index (l_local_subject, xf_NL);
	if l_nl_index > 0
	then do;
	     if l_nl_index <= l_subject_max_len - 3
	     then l_local_subject = substr (forum_user_trans.subject, 1, l_nl_index - 1) || "...";
	     else l_local_subject = substr (forum_user_trans.subject, 1, l_subject_max_len - 3) || "...";
	end;

	call ioa_ (l_item_line, l_number, (l_number = xforum_meeting_info.current), l_lines,
	     l_date_string, l_time_string, forum_user_trans.person_id, forum_user_trans.project_id, l_local_subject);

	free forum_user_trans;

	return;

write: entry (w_forum_user_trans_ptr, w_seg_ptr, w_code);

/* PARAMETERS */

	dcl     w_forum_user_trans_ptr ptr;		/* (input) pointer to forum_user_trans */
						/*         structure for transaction to be written */
	dcl     w_seg_ptr		 ptr;		/* (input) pointer to segment that */
						/*         transaction is to be written to */
	dcl     w_code		 fixed bin (35);	/* (output) standard error code */

/* INTERNAL AUTOMATIC */

	dcl     w_for_emacs_sw	 bit (1) aligned;	/* indicates special handling because output */
						/* will be read by the emacs extension */
	dcl     w_starting_bc	 fixed bin (24);	/* bit count of segment before the comment has been written out */
	dcl     w_unused_fb24	 fixed bin (24) aligned; /* unused output parameter */





	w_code = 0;
	w_starting_bc = 0;
	w_for_emacs_sw = "1"b;

	call write_to_seg (w_forum_user_trans_ptr, w_seg_ptr, w_starting_bc, w_for_emacs_sw, w_unused_fb24, w_code);

	return;

append: entry (a_forum_user_trans_ptr, a_seg_ptr, a_for_emacs_sw, a_bc, a_code);

/* PARAMETERS */

	dcl     a_forum_user_trans_ptr ptr;		/* (input) pointer to forum_user_trans */
						/*         structure for transaction to be appended */
	dcl     a_seg_ptr		 ptr;		/* (input) pointer to segment that */
						/*         transaction is to be appended to */
	dcl     a_for_emacs_sw	 bit (1) aligned;	/* (input) "1"b indicates that segment will */
						/*         be handed to emacs for display */
	dcl     a_bc		 fixed bin (24);	/* (input/output) original and updated bit count of segment */
	dcl     a_code		 fixed bin (35);	/* (output) standard error code */

/* INTERNAL AUTOMATIC */

	dcl     a_final_bc		 fixed bin (24) aligned; /* bit count of segment after */
						/* the comment has been written out */





	a_code = 0;

	call write_to_seg (a_forum_user_trans_ptr, a_seg_ptr, a_bc, a_for_emacs_sw, a_final_bc, a_code);

	a_bc = a_final_bc;

	return;

write_to_seg: proc (wts_forum_user_trans_ptr, wts_seg_ptr, wts_starting_bc, wts_for_emacs_sw, wts_final_bc, wts_code);

/* PARAMETERS */

	dcl     wts_forum_user_trans_ptr ptr;		/* (input) pointer to the forum_user_trans */
						/*         structure for transaction to be written out */
	dcl     wts_seg_ptr		 ptr;		/* (input) pointer to segment where */
						/*         transaction is to be written */
	dcl     wts_starting_bc	 fixed bin (24);	/* (input) bit count of segment before write */
	dcl     wts_for_emacs_sw	 bit (1) aligned;	/* (input) "1"b indicates that segment will */
						/*         be handed to emacs for display */
	dcl     wts_final_bc	 fixed bin (24);	/* (output) bit count of segment after write */
	dcl     wts_code		 fixed bin (35);	/* (output) standard error code */

/* INTERNAL AUTOMATIC */

	dcl     wts_approx_trans_length fixed bin;	/* estimation of comment length for */
						/* basing the wts_seg based string */
	dcl     wts_date_time	 char (200);	/* date and time comment was entered */
						/* formatted according to the users date_time format */
	dcl     wts_first_char_ptr	 ptr;		/* pointer to where first character is to be written in wts_seg */
	dcl     wts_lines		 fixed bin;	/* number of lines in the comment */
	dcl     wts_no_chars	 fixed bin;	/* number of characters actually written to wts_seg */
	dcl     wts_number		 fixed bin;	/* forum comment number */

/* BASED */

	dcl     wts_seg		 char (wts_approx_trans_length) based (wts_first_char_ptr);





	wts_code = 0;

	forum_user_trans_ptr = wts_forum_user_trans_ptr;
	wts_number = forum_user_trans.trans_no;
	wts_lines = count_lines ();
	call make_end_line (wts_number);

	wts_date_time = date_time_$format ("^<date_time>", forum_user_trans.time, "", "");

	if wts_starting_bc ^= 0
	then wts_first_char_ptr = addbitno (wts_seg_ptr, wts_starting_bc + 1);
	else wts_first_char_ptr = wts_seg_ptr;

	wts_approx_trans_length = forum_user_trans.subject_length + forum_user_trans.text_length + 500;
	call ioa_$rs (
	     "^[^s^;^[^/^;^|^]^][^i] (^d line^[s^]) ^a.^a ^a ^a^/Subject: ^a^[^]^/^a--------------^/^a",
	     wts_seg, wts_no_chars, (wts_starting_bc = 0), wts_for_emacs_sw,
	     wts_number, wts_lines, (wts_lines ^= 1), forum_user_trans.person_id,
	     forum_user_trans.project_id, wts_date_time, xforum_meeting_info.name,
	     forum_user_trans.subject, ((wts_starting_bc = 0) & wts_for_emacs_sw),
	     forum_user_trans.text, xf_end_line);

	wts_final_bc = (wts_no_chars * 9) + wts_starting_bc;
	call terminate_file_ (wts_seg_ptr, wts_final_bc, TERM_FILE_TRUNC_BC, wts_code);

	free forum_user_trans;

	return;

     end write_to_seg;

make_end_line: proc (mel_number);

/*
   Note that the next_trans_ptr and prev_trans_ptr pointers in the
   forum_user_trans structure are not usable, they are set to null regardless
   of the next/prev status of the current transaction.
*/

/* PARAMETERS */

	dcl     mel_number		 fixed bin;	/* (input) number of current transaction */

/* AUTOMATIC */

	dcl     mel_code		 fixed bin (35);	/* standard error code */
	dcl     mel_forum_user_trans_ptr ptr;		/* pointer to next and previous transaction */
	dcl     mel_next_trans	 bit (1);		/* true if current transaction has a next reference */
	dcl     mel_prev_trans	 bit (1);		/* true if current transaction has a previous reference */
	dcl     mel_unused_fb21	 fixed bin (21);	/* unused output from ioa_ */





	mel_next_trans = "1"b;
	mel_prev_trans = "1"b;

	call xforum_trans_$next_ref (mel_number, mel_forum_user_trans_ptr, mel_code);
	if mel_code ^= 0
	then mel_next_trans = "0"b;
	else free mel_forum_user_trans_ptr -> forum_user_trans;

	call xforum_trans_$prev_ref (mel_number, mel_forum_user_trans_ptr, mel_code);
	if mel_code ^= 0
	then mel_prev_trans = "0"b;
	else free mel_forum_user_trans_ptr -> forum_user_trans;

	call ioa_$rsnnl ("End of comment number ^i^[.^;, (^[next^]^[ and ^]^[previous^] comment on subject available).^]",
	     xf_end_line, mel_unused_fb21, mel_number,
	     ^mel_next_trans & ^mel_prev_trans, mel_next_trans,
	     mel_next_trans & mel_prev_trans, mel_prev_trans);

	return;

     end make_end_line;

count_lines: proc () returns (fixed bin);

/* INTERNAL AUTOMATIC */

	dcl     cl_i		 fixed bin;	/* index of "last" new line character found */
	dcl     cl_j		 fixed bin;	/* index of "next" new line character found */
	dcl     cl_lines		 fixed bin;	/* could of new line characters found */





	cl_lines = 1;
	cl_i = index (forum_user_trans.text, xf_NL);
	do while (cl_i < forum_user_trans.text_length);
	     cl_lines = cl_lines + 1;
	     cl_j = index (substr (forum_user_trans.text, cl_i + 1), xf_NL);
	     if cl_j ^= 0
	     then cl_i = cl_i + cl_j;
	     else cl_i = forum_user_trans.text_length;
	end;

	return (cl_lines);

     end count_lines;

error: proc (e_code, e_message);

/* PARAMETERS */

	dcl     e_code		 fixed bin (35);	/* (input) error code associated with the error */
	dcl     e_message		 char (*);	/* (input) message to be output to user */





	xf_xforum_error_info.name = "xforum_format_";
	xf_xforum_error_info.entry = "";
	xf_xforum_error_info.doing = "";
	xf_xforum_error_info.code = e_code;
	xf_xforum_error_info.reason = e_message;

	call signal_ ("xforum_fatal_error", null (), addr (xf_xforum_error_info), null ());

     end error;

     end xforum_format_;
