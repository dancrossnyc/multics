/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

mrpg_error_: proc (severity, line) options (variable);

dcl (severity, line) fixed bin;

      LINE = "LINE";
      SEP = ".";
      call cu_$arg_list_ptr (alp);
      lineno = line;
      call ioa_$general_rs (alp, 3, 4, ret, retl, "1"b, "1"b);
      SEV = LEVEL (severity);
      if (line = 0)
      then LINE, SEP = "";
      i = 1;
      do while (i ^= 0);
         i = index (ret, ",_");
         if (i > 0)
         then substr (ret, i, 2) = " ,";
      end;
      call iox_$put_chars (iox_$user_output, addr (reta), retl + 19, 0);
      errct (severity) = errct (severity) + 1;
      if severity = 3
      then signal condition (mrpg_fatal);
      return;

dcl ioa_$general_rs entry (ptr, fixed bin (24), fixed bin (24), char (*),
		fixed bin (24), bit (1) aligned, bit (1) aligned);
dcl alp		ptr;
dcl LEVEL		(0:3) char (8) int static
		init ("", "*WARN:", "ERROR:", "FATAL:");
dcl errct		(0:3) fixed bin (24) int static;
dcl 1 reta,
      2 SEV	char (8),
      2 LINE	char (4),
      2 lineno	pic "zzzzz",
      2 SEP	char (2),
      2 ret	char (150);
dcl retl		fixed bin (24);
dcl com_err_	entry options (variable);
dcl iox_$user_output ptr ext static;
dcl iox_$put_chars	entry (ptr, ptr, fixed bin (24), fixed bin (24));
dcl cu_$arg_list_ptr entry (ptr);
dcl retv		bit (1);
dcl i		fixed bin;
dcl mrpg_fatal	condition;
dcl error_table_$translation_failed fixed bin (35) ext static;
dcl code		fixed bin (35);

init: entry;
      errct = 0;
      return;

stat: entry returns (bit (1));

      retv = errct (2) > 0;
      if (errct (1) + errct (2) > 0)
      then do;
         if retv
         then code = error_table_$translation_failed;
         else code = 0;
         call com_err_ (code, "mrpg", "^/^-Summary: ^i WARN, ^i ERROR",
	  errct (1), errct (2));
      end;
      errct = 0;
      return (retv);

%include arg_list;

   end;
