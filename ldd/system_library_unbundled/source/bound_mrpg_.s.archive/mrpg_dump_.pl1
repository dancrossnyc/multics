/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

/**** a utility for generating debug output for mrpg.		       */

mrpg_dump_:
dump: proc (exptr, indent);		/* dump an element		       */
      next_sw, all_sw = "0"b;
      goto start;

all: entry (exptr, indent);		/* dump the whole thing	       */
      next_sw, all_sw = "1"b;
      goto start;

list: entry (exptr, indent);		/* dump a list of elements	       */
      next_sw = "1"b;
      all_sw = "0"b;
      goto start;


dcl (exptr, xptr)	ptr unal;
dcl jptr		ptr;
dcl indent	fixed bin;

dcl mssg		char (32);
dcl check_pointer_$packed entry (ptr, char (32));
				/* hcs_$get_uid can probably be used */
				/*  in place of check_pointer_       */

start:
      xptr = exptr;
      text = "xptr";
loop:
      call check_pointer_$packed (addr (xptr), mssg);
      if (mssg ^= "")
      then do;
         call ioa_ ("^a is ^p  ""^12.3b""o (^a)", text, xptr, unspec (xptr), mssg);
         return;
      end;
      text = "next";

      if (xptr -> symtab.type = "ID")
         | (xptr -> symtab.type = "NU")
         | (xptr -> symtab.type = "ST")
      then do;
         call stmt_hdr ("symtab", xptr, "0"b);
         call ioa_ ("  ^3i ""^a""", xptr -> symtab.leng, xptr -> symtab.data);
         call ioa_ ("	^vxuse ^p   ^p", indent,
	  xptr -> symtab.use.b, xptr -> symtab.use.e);
         if next_sw & ^all_sw & (xptr -> symtab.type = "ID") then do;
	  indent = indent + 5;
	  do jptr = xptr -> symtab.use.b
	     repeat (jptr -> datum.usage)
	     while (jptr ^= null ());
	     call stmt_hdr ("----", (jptr), "0"b);
	     call ioa_ ("  sym  ^p", jptr -> datum.sym);
	     if (jptr -> datum.type ^= "SY")
	     then do;
	        call stmt_hdr ("    ----", jptr -> datum.sym, "0"b);
	        call ioa_ ("  sym  ^p", jptr -> datum.sym -> datum.sym);
	     end;
	  end;
	  indent = indent - 5;
         end;
         return;
      end;
      if (xptr -> datum.type = "DC")
         | (xptr -> datum.type = "IN")
      then do;
         call stmt_hdr ("datum", xptr, "0"b);
         call ioa_ ("  sym  ^p", xptr -> datum.sym);
         if all_sw & (xptr -> datum.sym ^= null ())
         then call mrpg_dump_$all ((xptr -> datum.sym), indent + 5);
         call ioa_ ("	^vxkind ^a ^i", indent,
	  kind_char (min (xptr -> datum.kind, hbound (kind_char, 1))),
	  xptr -> datum.kind);
         call ioa_ ("	^vxleng ^i", indent, xptr -> datum.leng);
         call ioa_ ("	^vxpos ^i", indent, xptr -> datum.pos);
         call ioa_ ("	^vxcheck ^p	^p", indent,
	  xptr -> datum.check.b, xptr -> datum.check.e);
         if all_sw & (xptr -> datum.check.b ^= null ())
         then call mrpg_dump_$all ((xptr -> datum.check.b), indent + 5);
         call ioa_ ("	^vxdatal ^p	^p", indent,
	  xptr -> datum.datal.b, xptr -> datum.datal.e);
         if all_sw & (xptr -> datum.datal.b ^= null ())
         then call mrpg_dump_$all ((xptr -> datum.datal.b), indent + 5);
         if next_sw
         then do;
	  xptr = xptr -> datum.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      if (xptr -> symref.type = "SY")
      then do;
         call stmt_hdr ("symref", xptr, "0"b);
         call ioa_ ("  sym  ^p", xptr -> symref.sym);
         call ioa_ ("	^vxkind ^a ^i", indent,
	  kind_char (xptr -> symref.kind), xptr -> symref.kind);
         if all_sw & (xptr -> symref.sym ^= null ())
         then call mrpg_dump_$all ((xptr -> symref.sym), indent + 5);
         call ioa_ ("	^vxusage ^p", indent, xptr -> symref.usage);
         if next_sw
         then do;
	  xptr = xptr -> symref.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      if (xptr -> opn.type = "OP")
      then do;
         call stmt_hdr ("opn", xptr, "1"b);
         call ioa_ ("	^vxop ^a ^i", indent,
	  op_char (min (xptr -> opn.op, hbound (op_char, 1))),
	  xptr -> opn.op);
         call ioa_ ("	^vxkind ^a ^i", indent,
	  kind_char (xptr -> opn.kind), xptr -> opn.kind);
         call ioa_ ("	^vxop1 ^p", indent, xptr -> opn.op1);
         if all_sw & (xptr -> opn.op1 ^= null ())
         then call mrpg_dump_$all ((xptr -> opn.op1), indent + 5);
         call ioa_ ("	^vxop2 ^p", indent, xptr -> opn.op2);
         if all_sw & (xptr -> opn.op2 ^= null ())
         then call mrpg_dump_$all ((xptr -> opn.op2), indent + 5);
         call ioa_ ("	^vxop3 ^p", indent, xptr -> opn.op3);
         if all_sw & (xptr -> opn.op3 ^= null ())
         then call mrpg_dump_$all ((xptr -> opn.op3), indent + 5);
         if next_sw
         then do;
	  xptr = xptr -> opn.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      if (xptr -> report.type = "RP")
      then do;
         call stmt_hdr ("report", xptr, "0"b);
         call ioa_ ("  sym  ^p", xptr -> report.sym);
         if all_sw & (xptr -> report.sym ^= null ())
         then call mrpg_dump_$all ((xptr -> report.sym), indent + 5);
         call ioa_ ("	^vxpw ^i", indent, xptr -> report.pw);
         call ioa_ ("	^vxpl ^i", indent, xptr -> report.pl);
         call ioa_ ("	^vxminl ^i", indent, xptr -> report.minl);
         call ioa_ ("	^vxmaxl ^i", indent, xptr -> report.maxl);
         call ioa_ ("	^vxonlist	^p   ^p", indent,
	  xptr -> report.onlist.b, xptr -> report.onlist.e);
         if all_sw & (xptr -> report.onlist.b ^= null ())
         then call mrpg_dump_$all ((xptr -> report.onlist.b), indent + 5);
         call ioa_ ("	^vxbrlist	^p   ^p", indent,
	  xptr -> report.brlist.b, xptr -> report.brlist.e);
         if all_sw & (xptr -> report.brlist.b ^= null ())
         then call mrpg_dump_$all ((xptr -> report.brlist.b), indent + 5);
         call ioa_ ("	^vxpart	^p   ^p", indent,
	  xptr -> report.part.b, xptr -> report.part.e);
         if xptr -> tree.mmddyy then call ioa_ ("    ^vxmmddyy", indent);
         if xptr -> tree.yyddd then call ioa_ ("    ^vxyyddd", indent);
         if xptr -> tree.month then call ioa_ ("    ^vxmonth", indent);
         if xptr -> tree.day then call ioa_ ("    ^vxday", indent);
         if xptr -> tree.hhmmss then call ioa_ ("    ^vxhhmmss", indent);
         if all_sw & (xptr -> report.part.b ^= null ())
         then call mrpg_dump_$all ((xptr -> report.part.b), indent + 5);
         if next_sw
         then do;
	  xptr = xptr -> report.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      if (xptr -> part.type = "RH")
         | (xptr -> part.type = "PH")
         | (xptr -> part.type = "DH")
         | (xptr -> part.type = "DT")
         | (xptr -> part.type = "DF")
         | (xptr -> part.type = "PF")
         | (xptr -> part.type = "RF")
      then do;
         call stmt_hdr ("part", xptr, "0"b);
         call ioa_ ("  sym  ^p", xptr -> part.sym);
         if all_sw & (xptr -> part.sym ^= null ())
         then call mrpg_dump_$all ((xptr -> part.sym), indent + 5);
         call ioa_ ("	^vxmaxl  ^i", indent, xptr -> part.maxl);
         call ioa_ ("	^vxctl	^p", indent, xptr -> part.ctl);
         if all_sw & (xptr -> part.ctl ^= null ())
         then call mrpg_dump_$all ((xptr -> part.ctl), indent + 5);
         call ioa_ ("	^vxlines	^p   ^p", indent,
	  xptr -> part.lines.b, xptr -> part.lines.e);
         if all_sw & (xptr -> part.lines.b ^= null ())
         then call mrpg_dump_$all ((xptr -> part.lines.b), indent + 5);
         if next_sw
         then do;
	  xptr = xptr -> part.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      if (xptr -> lines.type = "LN")
      then do;
         call stmt_hdr ("lines", xptr, "0"b);
         call ioa_ ("  number ^i", xptr -> lines.number);
         call ioa_ ("	^vxctl ^p", indent, xptr -> lines.ctl);
         if all_sw & (xptr -> lines.ctl ^= null ())
         then call mrpg_dump_$all ((xptr -> lines.ctl), indent + 5);
         call ioa_ ("	^vxfield	^p   ^p", indent,
	  xptr -> lines.field.b, xptr -> lines.field.e);
         if all_sw & (xptr -> lines.field.b ^= null ())
         then call mrpg_dump_$all ((xptr -> lines.field.b), indent + 5);
         if next_sw
         then do;
	  xptr = xptr -> lines.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      if (xptr -> field.type = "FD")
      then do;
         call stmt_hdr ("field", xptr, "1"b);
         call ioa_ ("	^vxvalue	^p   ^p", indent,
	  xptr -> field.value.b, xptr -> field.value.e);
         if all_sw & (xptr -> field.value.b ^= null ())
         then call mrpg_dump_$all ((xptr -> field.value.b), indent + 5);
         call ioa_ ("	^vxlet	^p   ^p", indent,
	  xptr -> field.let.b, xptr -> field.let.e);
         if all_sw & (xptr -> field.let.b ^= null ())
         then call mrpg_dump_$all ((xptr -> field.let.b), indent + 5);
         call ioa_ ("	^vxkind ^a ^i", indent,
	  kind_char (min (xptr -> field.kind, hbound (kind_char, 1))),
	  xptr -> field.kind);
         call ioa_ ("	^vxalign ^a ^i", indent,
	  kind_char (min (xptr -> field.align, hbound (kind_char, 1))),
	  xptr -> field.align);
         call ioa_ ("	^vxalch ""^1a""", indent, xptr -> field.alch);
         call ioa_ ("	^vxbsp ""^1.1b""", indent, xptr -> field.bsp);
         call ioa_ ("	^vxfill ^i-^i", indent, xptr -> field.fill);
         call ioa_ ("	^vxcol ^i", indent, xptr -> field.col);
         call ioa_ ("	^vxleng ^i", indent, xptr -> field.leng);
         call ioa_ ("	^vxdata ^p", indent, xptr -> field.data);
         if all_sw & (xptr -> field.data ^= null ())
         then call mrpg_dump_$all ((xptr -> field.data), indent + 5);
         if next_sw
         then do;
	  xptr = xptr -> field.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      if (xptr -> value.type = "VL")
         | (xptr -> value.type = "FL")
         | (xptr -> value.type = "SW")
         | (xptr -> value.type = "AT")
      then do;
         call stmt_hdr ("value", xptr, "0"b);
         call ioa_ ("  sym  ^p", xptr -> value.sym);
         if all_sw & (xptr -> value.sym ^= null ())
         then call mrpg_dump_$all ((xptr -> value.sym), indent + 5);
         call ioa_ ("	^vxnumb ^i", indent, xptr -> value.numb);
         call ioa_ ("	^vxctl ^p", indent, xptr -> value.ctl);
         if all_sw & (xptr -> value.ctl ^= null ())
         then call mrpg_dump_$all ((xptr -> value.ctl), indent + 5);
         if next_sw
         then do;
	  xptr = xptr -> value.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      if (xptr -> attr.type = "DV")
         | (xptr -> attr.type = "KY")
      then do;
         call stmt_hdr ("attr", xptr, "0"b);
         call ioa_ ("  sym  ^p", xptr -> attr.sym);
         if all_sw & (xptr -> attr.sym ^= null ())
         then call mrpg_dump_$all ((xptr -> attr.sym), indent + 5);
         call ioa_ ("	^vxAD ^.1b^.1b", indent,
	  xptr -> attr.asc, xptr -> attr.des);
         if next_sw
         then do;
	  xptr = xptr -> attr.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      if (xptr -> param.type = "PM")
      then do;
         call stmt_hdr ("param", xptr, "0"b);
         call ioa_ ("  sym  ^p", xptr -> param.sym);
         if all_sw & (xptr -> param.sym ^= null ())
         then call mrpg_dump_$all ((xptr -> param.sym), indent + 5);
         call ioa_ ("	^vxkind ^a ^i", indent,
	  kind_char (min (xptr -> param.kind, hbound (kind_char, 1))),
	  xptr -> param.kind);
         call ioa_ ("	^vxattr	^p   ^p", indent,
	  xptr -> param.attr.b, xptr -> param.attr.e);
         if all_sw & (xptr -> param.attr.b ^= null ())
         then call mrpg_dump_$all ((xptr -> param.attr.b), indent + 5);
         call ioa_ ("	^vxcheck ^p	^p", indent,
	  xptr -> param.check.b, xptr -> param.check.e);
         if all_sw & (xptr -> param.check.b ^= null ())
         then call mrpg_dump_$all ((xptr -> param.check.b), indent + 5);
         call ioa_ ("	^vxleng ^i", indent, xptr -> param.leng);
         if next_sw
         then do;
	  xptr = xptr -> param.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      if (xptr -> stmt.type = "IF")
         | (xptr -> stmt.type = ":=")
         | (xptr -> stmt.type = "=:")
         | (xptr -> stmt.type = "BG")
         | (xptr -> stmt.type = "PR")
         | (xptr -> stmt.type = "SR")
         | (xptr -> stmt.type = "HD")
         | (xptr -> stmt.type = "SU")
         | (xptr -> stmt.type = "cP")
         | (xptr -> stmt.type = "cE")
      then do;
         call stmt_hdr ("stmt", xptr, "1"b);
         call ioa_ ("	^vxref1	^p   ^p", indent,
	  xptr -> stmt.ref1.b, xptr -> stmt.ref1.e);
         if all_sw & (xptr -> stmt.ref1.b ^= null ())
         then call mrpg_dump_$all ((xptr -> stmt.ref1.b), indent + 5);
         call ioa_ ("	^vxref2	^p   ^p", indent,
	  xptr -> stmt.ref2.b, xptr -> stmt.ref2.e);
         if all_sw & (xptr -> stmt.ref2.b ^= null ())
         then call mrpg_dump_$all ((xptr -> stmt.ref2.b), indent + 5);
         call ioa_ ("	^vxref3	^p   ^p", indent,
	  xptr -> stmt.ref3.b, xptr -> stmt.ref3.e);
         if all_sw & (xptr -> stmt.ref3.b ^= null ())
         then call mrpg_dump_$all ((xptr -> stmt.ref3.b), indent + 5);
         if next_sw
         then do;
	  xptr = xptr -> stmt.next;
	  if (xptr ^= null ())
	  then goto loop;
         end;
         return;
      end;

      call stmt_hdr ("****", xptr, "1"b);

stmt_hdr: proc (name, xptr, sw);

dcl name		char (*),
    xptr		ptr unal,
    sw		bit (1);

      call ioa_$nnl ("^p	^vx^8a ""^2a"" ^3i ^i:^i  ^p^[^/^]", xptr,
         indent, name,
         xptr -> stmt.type,
         xptr -> stmt.line,
         xptr -> stmt.bchar,
         xptr -> stmt.echar,
         xptr -> stmt.next, sw);

   end;

dcl text		char (4);
dcl (next_sw, all_sw) bit (1);
dcl ioa_		entry options (variable);
dcl ioa_$nnl	entry options (variable);
%include mrpg_tree;
dcl mrpg_dump_$all	entry (ptr unal, fixed bin);
   end;
