/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

mrpg_parse_: proc (aifp, aife, atreeptr, acode);
dcl aifp		ptr,		/* pointer to input segment	       */
    aife		fixed bin (24),	/* length of input segment	       */
    atreeptr	ptr,		/* pointer to tree area	       */
    acode		fixed bin (35);	/* return code		       */

      ifp = aifp;
      ife = aife;
      area_ptr = atreeptr;
      ifi = 1;
      allocate tree in (space);
      table.b, table.e = null ();
      parm_pos.b, parm_pos.e = null ();
      parm_key.b, parm_key.e = null ();
      input.b, input.e = null ();
      from = null ();
      local.b, local.e = null ();
      tree.report.b, tree.report.e = null ();
      tree.input_check.b, tree.input_check.e = null ();
      tree.parm_check.b, tree.parm_check.e = null ();
      tree.rec_str = -2;
      tree.res_siz = 500;
      tree.phase0.b, tree.phase0.e = null ();
      exec.b, exec.e = null ();
      acode = 0;
      linenumber = 0;
      parenct = 0;
      ifl = 0;
      if (lino (1) ^= 0)
      then db_sw = "0"b;

      call mrpg_parse_;
      atreeptr = tree_ptr;
      return;

dbn: entry; db_sw = "1"b; return;
prn: entry; pr_sw = "1"b; return;
dmpn: entry; dmp_sw = "1"b; return;
dmpf: entry; dmp_sw = "0"b; return;
prf: entry; pr_sw = "0"b; return;
dbf: entry; db_sw = "0"b; return;

line: entry (line1, line2);
dcl (line1, line2)	char (*);
dcl lino		(2) fixed bin int static init (0, 0);
      lino (1) = fixed (line1);
      lino (2) = fixed (line2);
      return;


dcl (pr_sw, dmp_sw) bit (1) int static init ("0"b);
dcl tptr		ptr;
dcl parenct	fixed bin;
dcl BOOL		fixed bin int static init (1);
dcl CHAR		fixed bin int static init (2);
dcl DEC		fixed bin int static init (3);
dcl SET		fixed bin int static init (4);
dcl TABLE		fixed bin int static init (5);
dcl REP		fixed bin int static init (6);
dcl DET		fixed bin int static init (7);
dcl dt_s		(0:7) char (12) int static init (
		"undefined",
		"BOOLEAN",
		"CHARACTER",
		"DECIMAL",
		"SET",
		"TABLE",
		"REPORT",
		"DETAIL");
dcl (hbound, index, lbound, max, min, null, string, substr, translate, unspec, verify) builtin;

dcl ifp		ptr;
dcl ifile		char (2000) based (ifp);
dcl ifilea	(2000) char (1) based (ifp);
dcl ifi		fixed bin (24);
dcl ifl		fixed bin (24);
dcl ife		fixed bin (24);
dcl linenumber	fixed bin (24);

dcl mrpg_error_	entry options (variable);
dcl (mrpg_dump_, mrpg_dump_$list, mrpg_dump_$all) entry (ptr unal, fixed bin);

%include mrpg_parse_;
%include mrpg_tables_;
%include mrpg_tree;
dcl used		bit (302) int static init ("0"b);
usage: entry;

dcl numbe		(10) pic "zzz9";
dcl (i, j)	fixed bin;
dcl ioa_$nnl	entry options (variable);

      call ioa_$nnl ("Unused productions:^/");
      j = 0;
      goto us_1;
us_2:
      if ^substr (used, j, 1)
      then do;
         numbe (i) = j;
         i = i + 1;
         if (i > 10)
         then do;
	  call ioa_$nnl ("^a^/", string (numbe));
us_1:
	  string (numbe) = " ";
	  i = 1;
         end;
      end;
      j = j + 1;
      if (j <= 302)
      then goto us_2;
      if (i > 1)
      then call ioa_$nnl ("^a", string (numbe));
      return;
   end mrpg_parse_;
