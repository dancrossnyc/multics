/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
dfast_command_processor_: proc (edit_info_ptr, name, arg_line, code);

/* * This procedure is given a command name and a command line.  If the command is one of the Multics commands
   * allowed, a descriptor list is filled in and the command is called.
   *
   * Special casing is done for:
   *
   *	catalog	     This is mapped into a call to "list" and the error message is changed to use "catalog"
   *
   *	dprint	     If the -map options is dprinted, the uppercase segment name.map is created and dprinted.
*/

/* parameters */

dcl  edit_info_ptr ptr;
dcl  name char (*);					/* command name */
dcl  arg_line char (*);				/* user's command line */
dcl  code fixed bin (35);				/* error code */

/* automatic */
dcl  seg_ptr ptr;					/* pointer to original segment  for dprint_map problem */
dcl (start, num_chars) fixed bin;			/* start and number of characters in argument */
dcl  line_length fixed bin;				/* number of characters in line  */
dcl  i fixed bin;
dcl  command_index fixed bin;				/* index to procedure ptr */
dcl  delete_orig_segment bit (1);
dcl  arg_length (10) fixed bin;			/* temporarily holds argument lengths */
dcl 1 descriptors (10) aligned based (addr (al.pointers)),
    2 desc_pointers bit (18) unal,
    2 pad_pointers bit (18) unal,
    2 flag bit (1) unal,
    2 type bit (6) unal,
    2 packed bit (1) unal,
    2 ndims bit (4) unal,
    2 size bit (24) unal;
dcl 1 al aligned,
    2 dum_ptr ptr,
    2 num_args fixed bin (16) unaligned,
    2 tag bit (19) initial ("0000000000000000100"b) unaligned,
    2 ndescs fixed bin (16) unaligned,
    2 pad bit (19) unaligned,
    2 pointers (20) ptr;
dcl (addr, hbound, length, mod, null, rel, search, substr, verify) builtin;
dcl (bin, bit, divide, index, reverse, unspec) builtin;
dcl  dprint_change bit (1);
dcl  line char (256);
dcl  skip bit (1);
dcl  command_error condition;

/* internal static */

dcl  white_space char (2) int static options (constant) init ("	 ");		/* TAB BLANK */
dcl  command_names (14) char (15) int static options (constant) init ("catalog", "cat", "dprint", "dp", "set_tty", "stty", "delete_acl",
     "da", "set_acl", "sa", "list_acl", "la", "dpunch", "dpn");

/* based */

dcl  proc_ptr (14) ptr based (addr (entry_value (1)));

/* external */

dcl  cu_$gen_call entry (ptr, ptr);
dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  entry_value (7) entry init (list, dprint, set_tty, delete_acl, set_acl, list_acl, dpunch);
dcl (list, dprint, set_tty, delete_acl, set_acl, list_acl, dpunch) entry;
%include dfast_error_codes;

	code = 0;
	unspec (al) = "0"b;
	command_index = 0;
	do i = 1 to hbound (command_names, 1) while (command_index = 0);
	     if name = command_names (i) then command_index = i - mod (i+1, 2);
	end;

	if command_index > 0 then do;
	     num_args = 0;
	     line = arg_line;
	     line_length = length (arg_line);

	     delete_orig_segment = "0"b;
	     if command_names (command_index) = "dprint" then call dprint_map;

	     start = 1;

	     do while (get_arg (start, num_chars) & code = 0);
		if num_args < 10 then do;
		     num_args = num_args + 1;
		     al.pointers (num_args) = addr (substr (line, start, 1));
		     arg_length (num_args) = num_chars;
		     start = start + num_chars;
		end;
		else code = error_max_args;
	     end;

	     if code = 0 then do;

		al.tag = "0000000000000000100"b;
		al.ndescs = num_args;

		do i = 1 to num_args;
		     desc_pointers (i+num_args) = rel (addr (descriptors (i+num_args).flag));
		     descriptors (i+num_args).flag = "1"b;
		     descriptors (i+num_args).size = bit (bin (arg_length (i), 24));
		     descriptors (i+num_args).type = bit (bin (21, 6));
		     descriptors (i+num_args).packed = "1"b;
		end;

		if command_names (command_index) = "catalog" then on command_error call reformat;
		if command_names (command_index) = "dprint" then on command_error delete_orig_segment = "0"b;
		call cu_$gen_call (proc_ptr (command_index), addr (al.num_args));

	     end;
	end;
	else do;
	     code = error_bad_req;
	     call dfast_error_ (code, "", name);
	     return;
	end;

	if code ^= 0 & command_names (command_index) ^= "dprint" then call dfast_error_ (code, name, "");

	if delete_orig_segment then do;
	     if code = 0 then call hcs_$delentry_seg (seg_ptr, code);
	end;
RETURN:
	return;

/*  */
/*  This procedure gets the index of the next argument on the line.
   *
   *	"1"b	the argument was found
   *	"0"b	no arguments remain on the line
*/
get_arg:	proc (start, num_chars) returns (bit (1));

dcl  start fixed bin;				/* index on line of start of argument */
dcl  num_chars fixed bin;				/* number of characters */

dcl  i fixed bin;

	     if start <= line_length then do;
		i = verify (substr (line, start, line_length - start + 1), white_space);
		if i > 0 then do;
		     start = start + i -1;
		     num_chars = search (substr (line, start, line_length - start + 1), white_space) -1;
		     if num_chars = -1 then num_chars = line_length - start + 1;
		     return ("1"b);
		end;
		start = line_length + 1;
		num_chars = 0;
	     end;

	     return ("0"b);

	end get_arg;

/*  */
/* This procedure reformats an error message for LIST so that FAST users think they are using a command called
   CATALOG */
reformat:	proc;

dcl  i fixed bin;
dcl  acode fixed bin (35);
dcl  length builtin;

dcl 1 cond_info aligned,
%include cond_info;
     dcl 1 info_structure aligned based (infoptr),
%include cond_info_structure;
    2 name_ptr ptr,
    2 name_lth fixed bin,
    2 err_mess_ptr ptr,
    2 err_mess_lth fixed bin,
    2 max_err_mess_lth fixed bin,
    2 print_sw bit (1);

dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));

	     cond_info.version = 1;
	     call find_condition_info_ (null, addr (cond_info), acode);
	     i = index (info_string, ":");
	     info_string = "catalog" || substr (info_string, i);
	     err_mess_lth = length (info_string);
	     err_mess_ptr = addr (substr (info_string, 1, 1));

	end reformat;

/*  */
/* *  If dprint is called with the -map option, the command line is reformated.  The new line
   *  has these changes:
   *
   *	seg_name		seg_name.map
   *	-map		""
   *	""		"-dl"
   *
   *  The original segment is copied and converted into an uppercase segment is the user's home directory.
   *  If the user requested deletion of the original segment, the segment is deleted after the dprint
   *  request is made.  (If dprint calls com_err_ then the segment is not deleted.)
*/
dprint_map: proc;

/* automatic */

dcl  temp_ptr ptr;					/* pointer to copy of segment */
dcl  seg_length fixed bin (21);			/* no. of characters in original segment */
dcl  pathname char (168) var;
dcl  directory char (168);
dcl  entry_name char (32);
dcl  bit_count fixed bin (24);
dcl  arg char (158) var;
dcl  new_line char (256);
dcl  new_line_length fixed bin ;
dcl  i fixed bin;
dcl  num_print fixed bin;

dcl (translate, substr, index) builtin;

/* constants */

dcl  RW_access fixed bin (5) int static options (constant) init (01010b) options (constant);
dcl  UPPERCASE char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ") options (constant);
dcl  LOWERCASE char (26) int static options (constant) init ("abcdefghijklmnopqrstuvwxyz") options (constant);
dcl  options (8) char (10)  init  ("-copy", "-cp", "-queue", "-q", "-header", "-he", "-destination", "-ds");

/* external */

dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (12), ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  error_table_$entlong ext static fixed bin (35);

/* based */

dcl  seg_string char (seg_length) based;
dcl 1 f aligned based like dfast_edit_info based (edit_info_ptr);

%include dfast_edit_info;

/*  */
	     num_print = 0;
	     i = index (line, "-map");
	     if i > 0 then do;

		new_line_length = 0;
		start = 1;
		skip = "0"b;
		do while (code = 0 & get_arg (start, num_chars));
		     arg = substr (line, start, num_chars);
		     if substr (arg, 1, 1) ^= "-" then do;
			if ^skip then do;
			     if num_print = 0 then do;
				if substr (arg, 1, 1) = ">" then pathname = arg;
				else pathname = f.home_dir || ">" || arg;
				i = index (reverse (pathname), ">");
				directory = substr (pathname, 1, length (pathname) -i);
				if i <= 29 then do;
				     entry_name = substr (pathname, length (pathname) -i + 2, i-1);
				     call hcs_$initiate_count (directory, entry_name, "", bit_count, 0, seg_ptr, code);
				     if seg_ptr ^= null then do;
					call hcs_$make_seg ((f.home_dir), substr (entry_name, 1, i -1) || ".map", "", RW_access, temp_ptr, code);
					if temp_ptr ^= null then do;
					     code = 0;
					     seg_length = divide (bit_count, 9, 17, 0);
					     temp_ptr -> seg_string = translate (seg_ptr -> seg_string, UPPERCASE, LOWERCASE);
					     substr (new_line, new_line_length + 1, num_chars + 5) = arg || ".map ";
					     new_line_length = new_line_length + num_chars + 5;
					     call hcs_$set_bc_seg (temp_ptr, bit_count, code);
					     num_print = num_print + 1;
					end;
					call hcs_$terminate_noname (temp_ptr, (0));
				     end;
				end;
				else code = error_table_$entlong;
			     end;
			     else code = error_dprint_map;
			end;
			else do;
			     substr (new_line, new_line_length + 1, num_chars + 1) = arg || " ";
			     new_line_length = new_line_length + num_chars + 1;
			     skip = "0"b;
			end;
		     end;
		     else do;
			if arg = "-dl" | arg = "-delete" then delete_orig_segment = "1"b;
			else if arg ^= "-map" then do;
			     substr (new_line, new_line_length + 1, num_chars + 1) = arg || " ";
			     new_line_length = new_line_length + num_chars + 1;
			     skip = "0"b;
			     do i = 1 to 8;
				if arg = rtrim(options (i)) then skip = "1"b;
			     end;
			end;
		     end;
		     start = start + num_chars;
		     if code ^= 0 then call dfast_error_ (code, "dprint", (pathname));
		end;
		if code = 0 then do;
		     line_length = new_line_length + 4;
		     line = "-dl " || new_line;
		end;
	     end;

	     return;

	end dprint_map;
     end dfast_command_processor_;
