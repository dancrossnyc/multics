/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
dfast_list_: proc (arg_edit_info_ptr, temp_seg_id, line_number, header, punch, code);

/*  This procedure lists or punches the current or the alter segment.
   *
   *	temp_seg_id	= alt	List the alter segment.
   *			= cur	List the current segment.
   *			= ""	Merge the alter and current segments and then list the current segment.
   *
   *	line_number	= -1	List the entire segment.
   *			= n	List the segment beginning with line "n".  If "n" is greater than the highest
   *				line number, then the last line will be listed.
   *
   *	code		= bad_sort	The current segment is out of order so that the merge can't be completed.
   *			= alt_empty	The alter segment is empty.
   *			= cur_empty	The current segment is empty.
*/
/* parameters */

dcl  arg_edit_info_ptr ptr;				/* ptr. to dfast_edit_info_ */
dcl  temp_seg_id char (*);				/* temporary seg. to list: alt, cur, "" */
dcl  line_number fixed bin (21);			/* line at which to begin printing */
dcl  header bit (1) unal;				/* ON if header should be printed. */

/* automatic */

dcl  edit_info_ptr ptr;				/* ptr to dfast_edit_info */
dcl  start fixed bin (21);				/* character index at which to begin printing */
dcl  name char (32);				/* name for error message OR name for header */
dcl  punch bit (1) unal;				/* ON if the output should be punched. */
dcl  code fixed bin (35);				/* Multics OR fast error code */

dcl  old_modes char (132);				/* old modes for restore */
						/* external */

dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  dfast_header_ entry (char (*), char (*));
dcl  dfast_merge_ entry (bit (1) unal, ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (21));
dcl  iox_$user_output ptr ext static;

/* constants */

dcl  punch_header char (16) int static options (constant) init (""); /* CTRL-R   (15) \177 */
dcl  punch_trailer char (17) int static options (constant) init (""); /* CTRL-S  (15) \177  CTRL-T */
dcl  new_line char (1) int static options (constant) init ("
");
dcl  digit char (10) int static options (constant) init ("0123456789");

/* based */

dcl 1 f aligned like dfast_edit_info based (edit_info_ptr);

dcl (addr, index, length, substr, reverse) builtin;

%include dfast_edit_info;
%include dfast_error_codes;

/*  */
	edit_info_ptr = arg_edit_info_ptr;

	if f.source_segment then do;
	     if temp_seg_id = "alt" then do;
		name = "alter";
		if f.alter_length > 0 then call list (f.alter_ptr, f.alter_length);
		else code = error_alt_empty;
	     end;

	     else do;
		if temp_seg_id ^= "cur" then do;
		     if f.alter_length > 0 then call dfast_merge_ ("0"b, edit_info_ptr, code);
		     if code ^= 0 then return;
		     name = f.current_name;
		end;
		else name = "current";

		if f.current_length > 0 then call list (f.current_ptr, f.current_length);
		else code = error_cur_empty;
	     end;
	end;
	else code = error_obj_nop;

	if code ^= 0 then do;
	     if punch then name = "punch";
	     else name = "list";

	     call dfast_error_ (code, name, "");
	end;

	return;

/*  */
list:	proc (temp_ptr, temp_length);

/* parameters */

dcl  temp_ptr ptr;					/* ptr. to segment to list */
dcl  temp_length fixed bin (21);			/* number of characters in segment */

dcl  temp_seg char (temp_length) based (temp_ptr);

	     if line_number < 0 then start = 1;
	     else do;

		call find_line (temp_ptr, temp_length, start, code);
		if code ^= 0 then return;
	     end;

	     if punch then call output_special_chars (punch_header);

	     else if header then call dfast_header_ (name, "");

	     call iox_$put_chars (iox_$user_output, addr (substr (temp_seg, start, 1)), temp_length - start + 1, code);
	     if punch then call output_special_chars (punch_trailer);

	     return;

	end list;

find_line: proc (temp_ptr, temp_length, start, code);

dcl  temp_ptr ptr;
dcl  temp_length fixed bin (21);
dcl  start fixed bin (21);
dcl  code fixed bin (35);

dcl (i, j) fixed bin (21);

dcl  temp_seg char (temp_length) based (temp_ptr);

	     start = 1;

	     do while (start <= temp_length & code = 0);
		i = verify (substr (temp_seg, start), digit);

		if i > 1 then do;
		     j = cv_dec_check_ (substr (temp_seg, start, i), code);
		     if code = 0
		     then if j >= line_number then return;
			else;
		     else code = error_bad_sort;
		end;
		i = index (substr (temp_seg, start), new_line);
		if i > 0
		then start = start + i;
		else code = error_no_nl;
	     end;

	     if code = 0 then start = start - i;

	     return;

	end find_line;

/*  */
output_special_chars: proc (string);

dcl  string char (*);
dcl  acode fixed bin (35);

	     old_modes = "";
	     call iox_$modes (iox_$user_output, "rawo", old_modes, acode);
	     call iox_$put_chars (iox_$user_output, addr (string), length (string), acode);
	     call iox_$modes (iox_$user_output, old_modes, "", code);

	     return;

	end output_special_chars;

     end dfast_list_;
