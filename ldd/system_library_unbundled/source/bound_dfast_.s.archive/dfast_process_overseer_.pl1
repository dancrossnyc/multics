/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Pedigree unknown. */
/* Modified 1984-08-24 BIM for pit instead of pitmsg. */

dfast_process_overseer_: proc;

/* automatic */

dcl  bit_count fixed bin (24);			/* bit count of message of the day */
dcl  code fixed bin (35);
dcl  home_dir_string char (168);			/* home directory for dfast_ */
dcl  i fixed bin;
dcl  junk fixed bin (6);				/* unlooked at info for iox_$control */
dcl  logout_arg char (5);				/* -hold or "" output from dfast_ */
dcl  mothd_ptr ptr;					/* ptr to message of the day */
dcl  person_id_string char (28);			/* person_id for dfast_ */
dcl  pp ptr;					/* pointer to pit */
dcl  project_id_string char (28);			/* project_id for dfast_ */
dcl 1 search_rules aligned,
	2 number fixed bin init (4),
	2 names (4) char (168) aligned init ("initiated_segments", ">unb",  ">sss", ">sl1");
dcl  tty_string char (6);				/* ttynnn for dfast_ */

dcl (length, verify, reverse, null, index, substr) builtin;

/* external */

dcl  condition_ entry (char (*) aligned, entry);
dcl  com_err_ entry options (variable);
dcl  dfast_ entry (char (*), char (*), char (*), char (*), char (*));
dcl  hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (24), fixed bin (2), ptr, 
      fixed bin (35));
dcl  hcs_$initiate_search_rules  entry  (ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  iox_$attach_iocb entry (ptr, char (*), fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$user_io ptr ext;
dcl  iox_$user_output ptr ext;
dcl  logout entry options (variable);
dcl  standard_default_handler_ entry ();
dcl  terminate_process_ ext entry (char (*), ptr);

/* */
%include user_attributes;
%include pit;

/*   */
/* set arguments for dfast_ */

	call hcs_$make_seg ("", "pit", "", 01000b, pp, code);
	tty_string = pp -> pit.tty;
	i = length (pp -> pit.homedir) + 1 - verify (reverse (pp -> pit.homedir), " ");
	home_dir_string = pp -> pit.homedir;
	person_id_string = pp -> pit.login_name;
	project_id_string = pp -> pit.project;

/* print message of the day, if the user didn't login with -brief option */

	if ^pp -> pit.at.brief then do;
	     call hcs_$initiate_count (">system_control_1", "message_of_the_day", "", bit_count, 1, mothd_ptr, code);
	     if mothd_ptr ^= null then do;
		call iox_$put_chars (iox_$user_output, mothd_ptr, divide (bit_count, 9, 21, 0), code);
		call hcs_$terminate_noname (mothd_ptr, code);
	     end;
	end;

	call condition_ ("any_other", standard_default_handler_);
	call hcs_$terminate_noname (pp, code);

	call hcs_$initiate_search_rules (addr(search_rules), code);
	if code ^= 0 then call com_err_ (code, "fast", "Can't set search rules");
	call iox_$control (iox_$user_io, "quit_enable", addr(junk), code);
	call dfast_ (person_id_string, substr (home_dir_string, 1, i), project_id_string, tty_string, logout_arg);

	if logout_arg = "-hold" then call logout (logout_arg);
	else call logout;

	return;

     end dfast_process_overseer_;
