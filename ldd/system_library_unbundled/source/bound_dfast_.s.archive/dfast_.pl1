/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
dfast_: proc (person_id, arg_home_dir, project_id, tty_line_id, logout_arg);

/*  This procedure is the listener for DFAST as well as the  parser for edit commands.  */

dcl  arg_home_dir char (*);				/* home directory from pit */
dcl  project_id char (*);				/* project_id for tty command */
dcl  tty_line_id char (*);				/* tty line */
dcl  logout_arg char (*);				/* = "hold" for HELLO */
dcl  person_id char (*);				/* name at login */


/* constants */

dcl  command_names char (148) int static options (constant) init
    ("com,edi,lis,tty,bri,nbr,sor,ren,new,uns,sav,rep,old,bui,app,ign,scr,use,bye,goo,hel,PUN,bil,len,sys,exp,ful,hal,one,two,TAP,KEY,DIR,typ,run");

/* *   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29 30  31  32  33  34  35 */

dcl  READ fixed bin init (1) int static options (constant); /* directory_:  read into the current segment. */
dcl  SAVE fixed bin init (2) int static options (constant); /* directory_:  store only if the segment does not exist. */
dcl  REPLACE fixed bin init (3) int static options (constant); /* directory_:  store only if the segment does exist. */
dcl  DELETE fixed bin init (4) int static options (constant); /* directory_:  delete the segment */
dcl  TRUNCATE fixed bin init (6) int static options (constant); /* directory_:  truncate the segment. */
dcl  APPEND fixed bin init (1) int static options (constant); /* edit_:  append alter to current segment */
dcl  SORT fixed bin init (2) int static options (constant); /* edit_:  merge alter and current and sort */
dcl  BUILD fixed bin int static options (constant) init (5); /* edit_:  append to current segment */
dcl  ALTER fixed bin int static options (constant) init (6); /* edit_:  append to alter segment */
dcl  LENGTH fixed bin int static options (constant) init (7); /* edit_:  merge temporary segments and give length */
dcl  arg_delimit char (4) int static options (constant) init ("	 ,;"); /* tab blank comma semi-colon */
dcl  dfast_name char (5) int static options (constant) init ("dfast");
dcl  white_space char (2) int static options (constant) init ("	 "); /* tab blank */
dcl  character_set char (68) int static options (constant) init (">._-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 	");
dcl  digit char (10) defined (character_set) pos (5);	/* digits */
dcl  letter char (52) defined (character_set) pos (15);	/* letters */
dcl  name_char char (68) defined (character_set) pos (1);	/* legal segment name characters */
dcl  lowercase_letters char (26) defined (character_set) pos (15);
dcl  uppercase_letters char (26) defined (character_set) pos (41);

/* automatic */

dcl  input char (256);
dcl  input_length fixed bin;				/* line length without the new-line */
dcl  arg char (256) var;
dcl  ready bit (1);					/* ON if ready message should be printed */
dcl (length, index, verify, substr, addr, divide, search, null, translate) builtin;
dcl (i, num_1, request) fixed bin;
dcl  header bit (1) unal;				/* ON = list with header  */
dcl  sort bit (1) unal;				/* dfast_line_edit_: ON sort; OFF no sort */
dcl  string char (256) var;
dcl  code fixed bin (35);

dcl  quit condition;


/* external */

dcl  clock_ entry () returns (fixed bin (71));
dcl  condition_ entry (char (*), entry);
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  error_table_$long_record fixed bin (35) ext;
dcl  dfast_command_processor_ entry (ptr, char (*), char (*), fixed bin (35));
dcl  dfast_compile_ entry (ptr, fixed bin (35));
dcl  dfast_directory_ entry (fixed bin, char (*), ptr, ptr, fixed bin (35));
dcl  dfast_edit_ entry (fixed bin, char (*),  ptr, fixed bin (35));
dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  dfast_explain_ entry (char (*) var, char (*), fixed bin (35));
dcl  dfast_line_edit_ entry (char (256) var, ptr, bit (1) unal, fixed bin (35));
dcl  dfast_list_ entry (ptr, char (*), fixed bin, bit (1) unal, bit (1) unal, fixed bin (35));
dcl  dfast_merge_ entry (bit (1), ptr, fixed bin (35));
dcl  fast_related_data_$in_fast_or_dfast bit (1) aligned ext;
dcl  fast_related_data_$in_dfast bit (1) aligned ext;
dcl  dfast_run_ entry (ptr, fixed bin (35));
dcl  dfast_set_system_ entry (char (256) var, bit (1) unal, char (*), fixed bin (35));
dcl  dfast_terminal_control_ entry (fixed bin, char (*), ptr, fixed bin (35));
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  hmu entry options (variable);
dcl  ioa_$ioa_switch entry options (variable);
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$user_input ptr ext static;
dcl  iox_$user_output ptr ext static;
dcl  resource_usage entry ();

dcl  sys_info$max_seg_size fixed bin (35) ext;

dcl  edit_info_ptr ptr;
dcl 1 f aligned like dfast_edit_info;
%include dfast_edit_info;
%include dfast_error_codes;
/*  */

	call initial;
	if code ^= 0 then return;
	on quit begin;
	     ready = "1"b;
	     call iox_$control (iox_$user_input, "resetread", addr (input), code);
	     call ioa_$ioa_switch (iox_$user_output, "QUIT^/");
	     goto READY;
	end;
	call condition_ ("any_other", any_other_handler);

/* * This  loop prints the ready message and reads a line from the terminal.  These conventions are used:
   *
   *	1.  Special case the BUILD mode.
   *		a.  If the line contains only a new_line character, BUILD  mode is terminated.
   *		b.  Otherwise the line is appended to the end of the current_file.
   *	2.  Blank lines are ignored.
   *	3.  Text lines begin with a digit  and are stored in temporary segment alt to  be merged later.
   *	4.  Command lines:
   *		a.  Single command lines begin with an alphabetic character.  Only the first three characters
   *		    are used.
   *		b.  Multi-command lines begin with any character except a digit or an alphabetic charcter.
   *		    (ie.  /tty/run/lis  )
*/

READY:
	do while ("1"b);
	     if ready then do;
		call date_time_ (clock_ (), input);
		call ioa_$ioa_switch (iox_$user_output, "ready  ^a^/", substr (input, 11, 4));
	     end;
	     ready = "0"b;

	     call iox_$get_line (iox_$user_input, addr (input), 256, input_length, code);

	     if code ^= 0 then do;
		if code = error_table_$long_record then call dfast_error_ (error_long_rec, "", "");
	     end;

	     else if f.build_mode then do;
		if input_length = 1 then do;
		     f.build_mode = "0"b;
		     ready = "1"b;
		end;

		else call dfast_edit_ (BUILD, substr (input, 1, input_length), edit_info_ptr, code);
	     end;

	     else do;
		i = verify (substr (input, 1, input_length -1), white_space);

		if i > 0 then do;
		     if index (digit, substr (input, i, 1)) > 0
		     then call dfast_edit_ (ALTER, substr (input, i, input_length - i + 1), edit_info_ptr, code);

		     else do;			/* command */
			if ^f.brief_mode then ready = "1"b;

			if index (letter, substr (input, i, 1)) > 0
			then call command (substr (input, i, input_length - i), code);
			else call multi_command ((i));
		     end;
		end;
	     end;

	end;

RETURN:	return;

/*  */

/*   This procedure is used to find the next argument on the line.  It expects the form:

   [blank | tab] [argument] [blank | tab | comma | semi-colon]

   Any of the fields may be null.  If no argument and no delimitor is found, then the procedure returns "0"b.
   Otherwise "1"b is returned.
*/
get_arg:	proc (line, argument) returns (bit (1));

dcl  argument char (256) var;				/* next argument (output) */

dcl  line char (256) var;				/* input buffer */
dcl  line_length fixed bin;				/* length of line on input */
dcl  argument_length fixed bin;			/* length of argument */
dcl  start fixed bin;				/* index in line of start of argument */

	     line_length = length (line);

	     if line_length > 0 then do;

		start = verify (line, white_space);
		if start > 0 then do;
		     argument_length = search (substr (line, start), arg_delimit);

		     if argument_length = 0 then argument_length = line_length - start + 1;
		     else argument_length = argument_length - 1;
		     argument = substr (line, start, argument_length);
		     start = start + argument_length + 1; /* move beyond the argument delimitor */
		     if start > line_length then line = "";
		     else line = substr (line, start, line_length - start + 1);

		     return ("1"b);
		end;
	     end;
	     return ("0"b);
	end get_arg;

/*  */
line_number: proc (string, num) returns (bit (1));
dcl  string char (*) var;
dcl  num fixed bin;

	     num = cv_dec_check_ ((string), code);
	     if code = 0 then do;
		if num > 0 then return ("1"b);
		else call dfast_error_ (error_bad_line, "", (arg));
	     end;
	     else return ("0"b);
	end line_number;


/*  */
/*  This procedure parses the line for a pathname and verifies that it contains legal characters.
   If the name is not found and request is set, the user is queried for a name.
   *
   *	Code	     Pathname	Explaination
   *
   *	0	     ^= ""	A legal pathname was found and is returned.
   *	0	     = ""		No pathname was given and the query was not requested.
   *	bad_name	     (not set)	The pathname given contained one or more illegal characters.
   *	name_miss      (not set)	The name was not given on the line or with the query and request was set.
*/
get_name:	proc (line, name, request, code);

dcl  line char (256) var;
dcl  name char (*) var;				/* pathname (output) */
dcl  request bit (1);				/* ON if should request name (input) */
dcl  code fixed bin (35);

	     if ^get_arg (line, arg) then do;
		if ^request then do;
		     name = "";
		     return;
		end;

		call get_user_response ("0"b, "enter name: ", arg);
		if arg = "" then code = error_name_miss;
	     end;

	     if code = 0 then do;
		if verify (arg, name_char) > 0 then code = error_bad_name;
		else name = arg;
	     end;

	     if code ^= 0 then if code ^= error_name_miss then call dfast_error_ (code, dfast_name, (arg));

	     return;

	end get_name;

/*  */
/*  This command parses the command line for a command and executes it.  It returns code:

   *	   code = 0	The command was successfully completed or was a null command.
   *	   code ^= 0	An error prevented the command from being completed.
*/
command:	proc (line, code);

dcl  line char (256) var;
dcl  code fixed bin (35);

	     if get_arg (line, arg) then do;
		arg = translate (arg, lowercase_letters, uppercase_letters);
		if length ((arg)) > 2 then do;
		     request = index (command_names, substr (arg, 1, 3));
		     if request ^= 0 then do;
			request = divide (request +3, 4, 17);
			goto command_label (request);
		     end;
		end;
		call dfast_command_processor_ (edit_info_ptr, (arg), (line), code);
	     end;

	     return;


/*  */
/* *	compile	[fortran | basic]
*/
command_label (1):

	     if get_arg (line, arg) then call set_system (code);
	     if code = 0 then call dfast_compile_ (edit_info_ptr, code);
	     return;

/* *	edit	<request>		[<request argument>]
*/

command_label (2):
	     if arg = "editns" | arg = "edins" then sort = "0"b;
	     else sort = "1"b;

	     call dfast_line_edit_ (line, edit_info_ptr, sort, code);
	     return;


/* list:  omit header if user is in brief_mode or request was lisn, lisnh, listnh
   [alt | cur] [<line no.>] [<line no.>]
*/
command_label (3):

	     if f.brief_mode then header = "0"b;
	     else if substr (arg, length (arg), 1) = "n" then header = "0"b;
	     else if substr (arg, length (arg) -1, 2) = "nh" then header = "0"b;
	     else header = "1"b;

	     call parse_list_punch (line, header, "0"b);

	     return;

/* tty */
command_label (4):

	     if f.basic_system then if f.dbasic then string = "dbasic";
		else string = "basic";
	     else string = "fortran";
	     call ioa_$ioa_switch (iox_$user_output, "name = ^a,  system = ^a,  user = ^a.^a,  line = ^a",
		f.current_name, string, person_id, project_id, tty_line_id);

	     return;

/* brief */
command_label (5):
	     f.brief_mode = "1"b;
	     ready = "0"b;

	     return;

/* nbrief */
command_label (6):

	     f.brief_mode = "0"b;
	     return;

/* sort */
command_label (7):

	     call dfast_edit_ (SORT, "", edit_info_ptr, code);
	     return;

/* *	rename	[<name>]
   *	new	[<name>]
*/
command_label (8):
command_label (9):

	     call get_name (line, string, "1"b, code);
	     if code = 0 then do;
		if index (string, ">") = 0 then do;
		     f.current_name = string;
		     call dfast_set_system_ (f.current_name, f.basic_system, "", 0); /* ignore code:  OK if no suffix */
		end;
		else do;
		     code = error_bad_name;
		     call dfast_error_ (code, "name", (string));
		end;
	     end;
	     else if code = error_name_miss then code = 0; /* ignore a chage of mind by user */
	     if request = 9 then call reset_edit_info;

	     return;



/* *	unsave	[<pathname>]
*/
command_label (10):

	     call segment_control (line, DELETE);
	     return;

/*	save	[<pathname>]
*/
command_label (11):

	     call segment_control (line, SAVE);
	     return;

/* *	replace	[<pathname>]
*/
command_label (12):

	     call segment_control (line, REPLACE);
	     return;

/* *	old	[<pathname>]          [<system name>]
*/
command_label (13):

	     call segment_control (line, READ);
	     if code = 0 then do;
		if f.source_segment then do;
		     call dfast_set_system_ (f.current_name, f.basic_system, "", code);
		     if code ^= 0 then do;
			code = 0;
			if get_arg (line, arg) then call set_system (code);
			else do;
			     call get_user_response ("0"b, "enter system name: ", arg);
			     call set_system (code);
			     do while (code ^= 0);
				call get_user_response ("1"b, "answer 'basic', 'dbasic', or 'fortran': ", arg);
				call set_system (code);
			     end;
			end;
		     end;
		end;
	     end;
	     return;

/* build */
command_label (14):

	     if ^f.source_segment then call dfast_error_ (error_obj_nop, "build", "");
	     else do;
		if f.alter_length > 0 then call dfast_merge_ ("0"b, edit_info_ptr, code);
		if code = 0 then f.build_mode = "1"b;
	     end;

	     return;

/*  append */
command_label (15):

	     call dfast_edit_ (APPEND, "", edit_info_ptr, code);
	     return;

/* ignore */
command_label (16):

	     f.alter_length = 0;
	     return;

/* scratch */
command_label (17):

	     if verify (line, white_space) = 0 then call reset_edit_info;
	     else call segment_control (line, TRUNCATE);

	     return;


/*  user */
command_label (18):

	     call hmu ();
	     return;

/* bye and goodbye */
command_label (19):
command_label (20):

	     logout_arg = "";
	     call bye_request;
	     return;


/* *	hello
   *
   *	help
*/
command_label (21):

	     if arg = "hello" then do;
		logout_arg = "-hold";
		call bye_request;
		return;
	     end;

	     else call dfast_explain_ ("", "help", code);
	     return;

/* punch */
command_label (22):

	     call parse_list_punch (line, "0"b, "1"b);
	     return;


/* bill */
command_label (23):

	     call resource_usage;
	     return;

/* length */
command_label (24):

	     call dfast_edit_ (LENGTH, "", edit_info_ptr, code);
	     return;

/* *	system	[fortran | basic]
*/
command_label (25):

	     if ^get_arg (line, arg) then call get_user_response ("1"b, "enter system: ", arg);

	     call set_system (code);

	     return;

/* *	explain	<topic>
*/
command_label (26):

	     call dfast_explain_ (line, "explain", code);
	     return;

/*  These commands change the input/output mode of the terminal.  The order is important.
   *
   *	(27)	fullduplex
   *	(28)	halfduplex
   *	(29)	one_case
   *	(30)	two_case
   *	(31)	tape
   *	(32)	keyboard
   *	(33)	direct
*/
command_label (27):
command_label (28):
command_label (29):
command_label (30):
command_label (31):
command_label (32):
command_label (33):

	     call dfast_terminal_control_ (request - 26, "", edit_info_ptr, code);
	     if request = 33 then ready = "1"b;
	     return;

/* *	type	<terminal_type>
   *
   *		<terminal_type>  ::=  tn300 | tty37 | tty33
*/
command_label (34):

	     if ^get_arg (line, arg) then arg = "";
	     call dfast_terminal_control_ (request - 26, (arg), edit_info_ptr, code);
	     return;

/* *	run	[fortran | basic]
*/
command_label (35):

	     if get_arg (line, arg) then call set_system (code);
	     if code = 0 then call dfast_run_ (edit_info_ptr, code);
	     return;

	end command;

/*  */
/*  This procedure is used to read into or store from the current segment and to delete segments
   If a pathname is given on the line, it is used.  Otherwise the current name is used.
   If no pathname is given and the current name is "no name", then and error message is printed and an error
   code is returned.
*/

segment_control: proc (line, action);

dcl  line char (256) var;
dcl  action fixed bin;				/* directory_: read, save, replace, delete */
dcl  request bit (1);				/* get_name: ON if should request name */

	     if f.current_name = "no name" then request = "1"b;
	     else request = "0"b;

	     call get_name (line, string, request, code);

	     if code = error_name_miss then call dfast_error_ (code, dfast_name, "");
	     else if code = 0 then do;
		if string = "" then string = f.current_name;
		call dfast_directory_ (action, (string), edit_info_ptr, null, code);
		if action ^= DELETE then f.edit_done = "0"b;
	     end;

	     return;

	end segment_control;

/*  */
/* *  This procedure prints a message and then reads one line from user_input.  If the line contains
   *  at least one non_blank character, response is set and the procedure returns.  If a blank
   *  line is input, there are two actions depending on repeat:
   *
   *	"1"b	the message is printed again.
   *	"0"b	response is set to "" and the procedure returns
*/
get_user_response: proc (repeat, message, response);

dcl  repeat bit (1);				/* ON if should repeat for blank lines */
dcl  message char (*);
dcl  response char (*) var;				/* the response enterred by the user */

dcl  temp_buffer char (256);
dcl  amt_read fixed bin;				/* num_characters read */
dcl  start fixed bin;				/* index of start of response */
dcl  num_chars fixed bin;				/* number of characters in response */

	     response = "";

	     do while ("1"b);
		call iox_$put_chars (iox_$user_output, addr (message), length (message), code);
		call iox_$get_line (iox_$user_input, addr (temp_buffer), 256, amt_read, code);
		amt_read = amt_read - 1;
		if amt_read > 0 then do;
		     start = verify (substr (temp_buffer, 1, amt_read), white_space);
		     if start > 0 then do;
			num_chars = index (substr (temp_buffer, start, amt_read), white_space) -1;
			if num_chars = -1 then num_chars = amt_read - start + 1;
			response = substr (temp_buffer, start, num_chars);
			return;
		     end;
		end;

		if ^repeat then return;
	     end;

	end get_user_response;

/*  */
/* *	This procedure parses arg for a system name.  Only the first three letters are used.
   *	The system may be fortran or basic or dbasic.  The system can not be changed:
   *	     1.  If the current segment is object code.
   *	     2.  If the system would conflict with the current name.
*/
set_system: proc (code);

dcl  code fixed bin (35);
dcl  tag char (7);

	     string = substr (arg, 1, 3);
	     if f.source_segment then do;
		call dfast_set_system_ (f.current_name, f.basic_system, tag, (0));
		if string = "bas" | string = "dba" then do;
		     if tag = "fortran" then code = error_name_sys;
		     if code = 0 then do;
			f.basic_system = "1"b;
			if string = "dba" then f.dbasic = "1"b;
			else f.dbasic = "0"b;
		     end;
		end;

		else if string = "for" then do;
		     if tag = "basic" then code = error_name_sys;
		     if code = 0 then f.basic_system, f.dbasic = "0"b;
		end;
		else code = error_unkn_sys;
	     end;

	     else do;				/* Can't override system in object segment */
		if string = "bas" & f.basic_system & ^f.dbasic then;
		if string = "dba" & f.basic_system & f.dbasic then;
		else if string = "for" then if ^f.basic_system then;
		     else code = error_obj_nop;
	     end;

	     if code ^= 0 then do;
		if code = error_name_sys then arg = f.current_name;
		call dfast_error_ (code, "system", (arg));
	     end;

	     return;

	end set_system;

/*  */
/*  This procedure parses an input line with more than one command.  The first character
   on the line is the delimitor.  Null commands are legal.
*/

multi_command: proc (start);

dcl  start fixed bin;				/* index of input of command delimitor character */
dcl  command_delimitor char (1);			/* command delimitor character */
dcl  len fixed bin;					/* length of command */

	     command_delimitor = substr (input, start, 1);
	     start = start + 1;
	     input_length = input_length - 1;		/* drop the new-line character */

	     code = 0;
	     do while (start <= input_length & code = 0);

		len = index (substr (input, start, input_length - start + 1), command_delimitor);
		if len = 0 then len = input_length - start +2;
		call command (substr (input, start, len -1), code);

		start = start + len;
	     end;

	     return;

	end multi_command;

/*  */
/*  This code clears the edit info for the initialization and the scratch and new commands.
*/
reset_edit_info: proc;

	     f.current_length = 0;
	     f.alter_length = 0;
	     f.edit_done = "0"b;
	     f.source_segment = "1"b;

	     return;

	end reset_edit_info;

/*  */
/*  This procedure parses the arguments for the list and the punch commands.
   *
   *	list	<temporary segment id>	<line number>
   *	punch	<temporary segment id>	<line number>
   *
   *	     temporary segment id	= alt	list the alter file.
   *				= cur	list the current file.
   *				= ""	Merge the alter and current files and then list.
   *
   *	     line number n			List the file beginning with the line number n.
*/
parse_list_punch: proc (line, header, punch);

dcl  line char (256) var;
dcl  header bit (1) unal;				/* ON if should print header */
dcl  punch bit (1) unal;				/* ON if should punch;  OFF if should list */

	     num_1 = -1;				/* default is entire segment */
	     string = "";				/* default is merge with alter and then list */
	     if get_arg (line, arg) then do;
		string = substr (arg, 1, 3);
		if string = "cur" | string = "alt" then do;
		     if get_arg (line, arg) then do;
			if ^line_number (arg, num_1) then code = error_unknown_arg;
		     end;
		end;
		else do;
		     string = "";
		     if ^line_number (arg, num_1) then code = error_unknown_arg;
		end;

	     end;

	     if code = 0 then call dfast_list_ (edit_info_ptr, (string), num_1, header, punch, code);

	     else do;
		if punch then string = "punch";
		else string = "list";
		call dfast_error_ (code, (string), (arg));
	     end;

	     return;

	end parse_list_punch;

/*  */
bye_request: proc;


	     if f.edit_done | f.alter_length > 0 then do;
		call get_user_response ("0"b, "editing will be lost if you quit.  Do you want to quit ? ", arg);
		do while ("1"b);
		     if arg = "yes" | arg = "YES" then goto RETURN;
		     if arg = "no" | arg = "NO" then return;
		     call get_user_response ("1"b, "answer 'yes' or 'no': ", arg);
		end;
	     end;
	     goto RETURN;


	end bye_request;

/*  */
/*  This procedure sets up the PI handler and gets two scratch buffers in the process directory. */

initial:	proc;

dcl  ptr_array (2) ptr based;

	     code = 0;
	     edit_info_ptr = addr (f);
	     f.home_dir = arg_home_dir;
	     f.current_ptr = null;
	     call get_temp_segments_ (dfast_name, addr (f.current_ptr) -> ptr_array, code);
	     if code ^= 0 then call dfast_error_ (code, dfast_name, "current_segment");
	     f.max_seg_size = sys_info$max_seg_size;

	     f.current_name = "no name";
	     f.basic_system = "1"b;
	     f.brief_mode, f.build_mode = "0"b;
	     call reset_edit_info;

	     fast_related_data_$in_fast_or_dfast = "1"b;	/* switches for BASIC */
	     fast_related_data_$in_dfast = "1"b;


	     ready = "1"b;

	     return;

	end initial;

/*  */
any_other_handler: proc (mcptr, cond_name, wcptr, info_ptr, cont);

dcl  mcptr ptr,
     cond_name char (*),
     wcptr ptr,
     info_ptr ptr,
     cont bit (1) aligned;
dcl  area area (300);
dcl (i, l) fixed bin;
dcl  NEW_LINE char (1) init ("
");
dcl  message_len fixed bin (21);
dcl  message char (message_len) based (message_ptr);
dcl  message_ptr ptr;

dcl  condition_interpreter_ entry (ptr, ptr, fixed bin (21), fixed bin, ptr, char (*), ptr, ptr);

	     if cond_name = "command_error" |
	     cond_name = "command_question" | cond_name = "string_size" then return;

	     call condition_interpreter_ (addr (area), message_ptr, message_len, 1, mcptr, cond_name, wcptr, info_ptr);
	     if cond_name = "command_abort_" then goto READY;
	     if message_len > 0 then do;

/* * This code modifies the error message to remove the shriek name and the phrase "(in process dir)"
   *
   *	Error: ... condition by !BBBJFbDjnMccfW.temp.0310$main_|50 (line 20) (in process dir)
   *
   *	Error: ... condition by main_|50 (line 20)
*/
		if substr (message, 2, 6) = "Error:" then do;
		     l = index (substr (message, 2), NEW_LINE);
		     if l > 0 then do;
			i = index (substr (message, 2, l), "by !");
			if i > 0 then do;
			     i = i + 4;
			     if substr (message, i+15, 5) = ".temp" & substr (message, i + 25, 1) = "$" then do;
				substr (message, i) = substr (message, i+26, message_len - i -26+1);
				message_len = message_len - 26;
				i = index (substr (message, 1, l+1), "(in process dir)");
				if i > 0 then do;
				     substr (message, i) = substr (message, i+16);
				     message_len = message_len - 16;
				end;
			     end;
			end;
		     end;
		end;

		call iox_$put_chars (iox_$user_output, message_ptr, message_len, code);
	     end;

	     if cond_name = "finish" then return;

	     goto READY;

	end any_other_handler;

     end dfast_;
