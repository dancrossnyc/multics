/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


dfast_compile_: proc (edit_info_ptr, code);

/* coded 12/75 by S. E. Barr */
/* modified 12/76 by M. Weaver to use version 2 compiler_source_info structure */
/* Modified 28 Feb 1980 by C R Davis for new fort_options include file. */

/*  This procedure executes COMPILE command for Fortran and Basic.
   *
   *     1.  If the following conditions are met, the segment is compiled:
   *           a.  The source_segment flag is on.
   *           b.  The edit_done flag is off.
   *
   *     2.  If the compilation is successful, these changes are made:
   *           a.  The current_segment is replaced with the object code.
   *           b.  The current_name is set:
   *		1)  Multics convention:  If the source name has a language tag, then
   *		    the object name drops the language tag.  ("test.basic" becomes "test")
   *		2)  If the source name did not have a language suffix, the name is set to "object".
   *		    ("test" becomes "object")
*/
dcl  edit_info_ptr ptr;
dcl  code fixed bin (35);

/* automatic */

dcl 1 fort_opt aligned like fortran_options;
dcl  i fixed bin;
dcl  object_length fixed bin (21);
dcl  temp_ptr ptr;

dcl (addr, fixed, length, null, substr, unspec) builtin;

/* constant */


/* external */


dcl  basic_$compile entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  fort_$compile entry (ptr, ptr, fixed bin (21), ptr, fixed bin (35));
dcl  basic_$precision_length fixed bin ext ;
dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  dfast_merge_ entry (bit (1) unal, ptr, fixed bin (35));
dcl  hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (18), fixed bin (35));

/* based */

dcl 1 f aligned based (edit_info_ptr) like dfast_edit_info;
dcl 1 c aligned like compiler_source_info;
dcl 1 b aligned like branch_status;

/*  */
%include dfast_edit_info;
%include dfast_error_codes;
%include compiler_source_info;
%include fort_options;
%include branch_status;

/*  */
	if ^f.source_segment then code = error_obj_nop;
	else do;
	     if f.alter_length > 0 then call dfast_merge_ ("0"b, edit_info_ptr, code);

	     if code = 0 then do;
		if f.edit_done then code = error_sav_cur;
		else do;
		     call hcs_$status_long ((f.source_directory), (f.source_entryname), 1, addr (b), null, code);
		     if code = 0 then do;
			call hcs_$truncate_seg (f.alter_ptr, 0, code);
			if code = 0 then do;
			     c.version = compiler_source_info_version_2;
			     c.input_pointer = f.current_ptr;
			     c.input_lng = f.current_length;
			     c.dirname = f.source_directory;
			     c.segname = f.source_entryname;
			     c.given_ename = f.source_entryname;
			     c.date_time_modified = fixed (b.date_time_modified || (16) "0"b, 71);
			     c.unique_id = b.unique_id;
			     if f.basic_system then do;
				if f.dbasic then basic_$precision_length = 2;
				else basic_$precision_length = 1;
				call basic_$compile (addr (c), f.alter_ptr, object_length, code);
				call switch_buffers (".basic");
			     end;
			     else do;
				unspec (fort_opt) = dfast_mask;
				call fort_$compile (addr (c), f.alter_ptr, object_length, addr( fort_opt), code);
				call switch_buffers (".fortran");
			     end;
			end;
		     end;
		end;
	     end;
	end;

	if code ^= 0 then call dfast_error_ (code, "compile", (f.current_name));

	return;

/* */
switch_buffers: proc (language);

dcl  language char (*);

dcl  len fixed bin;					/* length of language */

	if code = 0 then do;
	     temp_ptr = f.alter_ptr;
	     f.alter_ptr = f.current_ptr;
	     f.current_ptr = temp_ptr;
	     len = length (language);
	     i = length (f.current_name);
	     f.current_name = "object";
	     if i >= len + 1 then do;
	     if substr (c.segname, i-len+1,len) = language
		then f.current_name = substr (c.segname, 1, i-len);
	     end;
	     f.current_length = object_length * 4;
	     f.source_segment = "0"b;
	end;

	return;

	end switch_buffers;

     end dfast_compile_;
