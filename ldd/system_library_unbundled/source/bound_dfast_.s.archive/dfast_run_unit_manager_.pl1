/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


dfast_run_unit_manager_: proc (a_system, a_program_ptr, a_program_lng, a_main_name,
	     a_debug_sw, a_code);

/* coded by M. Weaver  12/75 */
/* modified  12/76 by M. Weaver to use version 2 compiler_source_info structure */
/* Modified 28 Feb 1980 by C R Davis for new fort_options include file. */

/* This program implements the DTSS-compatible FAST susbsystem.
   It finds all libraries, compiles all source, sets up a name table,
   does the linking, executes the program and terminates all segments used just by the run unit. */

/* arguments */

dcl  a_system char (8) aligned;			/* system name */
dcl  a_program_ptr ptr;				/* ptr  to main program for run unit */
dcl  a_program_lng fixed bin (24);			/* bit count of input segment */
dcl  a_main_name char (168) aligned;			/* pathname of main program (used as library name) */
dcl  a_debug_sw bit (1) aligned;			/* "1"b->in debug mode (i.e. generate symbol table) */
dcl  a_code fixed bin (35);				/* returned status code */

/* pointers */

dcl  arg_ptr ptr;					/* ptr to arglist */
dcl  mainp ptr;					/* ptr to main entry point */
dcl  ftn_io_p ptr;					/* points to fortran io_vector */
dcl  cur_lib_node_p ptr;				/* points to  library node currently being examined */
dcl  last_lib_node_p ptr;				/* points to most recent lib node entry */
dcl  scratch_ptr ptr;				/* points to beginning of scratch seg */
dcl  cur_free_p ptr;				/* points to first free word in scratch segment */
dcl  blank_common_ptr ptr;				/* points to blank common (in scratch seg) */
dcl  object_ptr ptr;				/* ptr to object segment compiled by run unit */
dcl  cp ptr;					/* used when looping through lib list */
dcl  segptr ptr;
dcl  rnt_p ptr static;				/* ptr to beginning  of run unit's rnt */
dcl  rp ptr;					/* ptr to currently examined rnt node */
dcl  program_ptr ptr;				/* ptr to current file */
dcl  array_p ptr;					/* ptr to based_array used by temp seg manager */
dcl  source_info_pt ptr;				/* ptr to source info structure used by compilers */
dcl  new_obj_symbol_p ptr;				/* for snapping ftn *symbol links */
dcl  ep ptr;
dcl  based_ptr ptr based;				/* for copying pointers */

/* fixed bin */

dcl  max_severity fixed bin;				/* max severity of errors encountered */
dcl  nfiles fixed bin;				/* number of files being chained */
dcl  scratch_lng fixed bin (19);			/* max length of scratch seg */
dcl  ru_area_size fixed bin (18);			/* max length of space used by rum itself */
dcl  code fixed bin (35);
dcl  nleft fixed bin (26);
dcl (i, j) fixed bin;
dcl  k fixed bin (18);
dcl  based_fixed fixed bin (35) based;
dcl  program_lng fixed bin (24);			/* bit count of input seg */

/* bit strings */

dcl  debug_sw bit (1) aligned;			/* "1"b->in debug mode */
dcl  terminating bit (1) aligned;			/* "1"b->in process of terminating run unit */
dcl  compiler_invoked bit (1) aligned;			/* "1"b->run unit has invoked compiler */
dcl  have_chained bit (1) aligned;			/* "1"b->main program was chained to */
dcl  is_main bit (1) aligned;				/* "1"b->are processing the main program */
dcl  save_main bit (1) aligned;			/*  "1"b->are compiling  main program */
dcl (mask, oldmask) bit (36) aligned;			/* ips masks */

/* character strings */

dcl  temp_dir char (168);				/* used by expand_pathname_ */
dcl  main_name char (168) aligned;			/* "library" name of main program */
dcl  temp_ent char (32);				/* used by expand_pathname_ */
dcl  system char (8) aligned;				/* name of current system */
dcl  interrupt_names char (32) aligned;			/* for create_ips_mask_ */
						/* external variables */

dcl (error_table_$not_done, error_table_$name_not_found) ext fixed bin (35);
dcl  fast_related_data_$fortran_io_initiated bit (1) aligned ext;
dcl  fast_related_data_$chaining bit (1) aligned ext;
dcl  fast_related_data_$fortran_buffer_p ptr ext;
dcl  fast_related_data_$basic_area_p ptr ext;
dcl  fast_related_data_$terminate_run entry ext variable;

/*  external entries */

dcl  hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  hcs_$get_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  cu_$gen_call entry (ptr, ptr);
dcl  fortran_io_$close_file entry (fixed bin, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl (get_temp_segments_, release_temp_segments_) entry (char (*), (*) ptr, fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*),
     fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  object_info_$display entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  area_ entry (fixed bin (26), ptr);
dcl  decode_definition_$full entry (ptr, ptr, ptr) returns (bit (1) aligned);
dcl  basic_$run_unit_compiler entry
    (ptr, ptr, fixed bin, bit (1) aligned, entry, entry, fixed bin (35));
dcl  fort_$compile_run entry (ptr, ptr, fixed bin, ptr, entry, entry, fixed bin (35));
dcl  create_ips_mask_ entry (ptr, fixed bin, bit (36) aligned);
dcl (hcs_$set_ips_mask, hcs_$reset_ips_mask) entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));

/* builtins */

dcl (addr, addrel, baseno, baseptr, bit, bin, fixed, divide) builtin;
dcl (max, mod, null, ptr, rel, reverse, size, substr, unspec, verify) builtin;
dcl  cleanup condition;
dcl  fault_tag_3 condition;

/* arrays */

dcl  based_array (1) ptr based (array_p);		/* alias for use by get/release temp segs */

/* structures */

dcl 1 ext_template aligned based,			/* holds link info */
    2 type fixed bin,				/* link type */
    2 section char (8) aligned,
    2 ename char (32) varying,			/* entry name of link target */
    2 init_info_p ptr;				/* ptr to init info for common */

dcl 1 arglist aligned,				/* for passing file ptrs to basic */
    2 argcnt fixed bin (17) unaligned,			/* 2 * number of args */
    2 alcode fixed bin (17) unaligned init (4),		/* no display ptr */
    2 descnt fixed bin (17) unaligned,			/* 2 * number of descriptors */
    2 mbz fixed bin (17) unaligned init (0),
    2 argpts (16) ptr,
    2 argdescs (16) ptr;

dcl 1 dd aligned,					/* structure filled in by full entry */
    2 next_def ptr,					/* ptr to next definition in list */
    2 last_def ptr,					/* ptr to previous definition in list */
    2 block_ptr ptr,				/* ptr to either defblock or segname block */
    2 section char (4) aligned,			/* "text", "link", "symb" or "segn" */
    2 offset fixed bin,				/* offset within class (if ^= "segn") */
    2 entrypoint fixed bin,				/* value of entrypoint in text if ^= 0 */
    2 symbol char (256) aligned,			/* the symbolic name of the definition */
    2 symbol_lng fixed bin,				/* the actual length of symbol */
    2 flags,					/* same flags as in std def */
      3 a_new_format bit (1) unaligned,			/* def is in new format */
      3 a_ignore bit (1) unaligned,			/* linker should ignore this def */
      3 a_entrypoint bit (1) unaligned,			/* def is for entrypoint */
      3 a_retain bit (1) unaligned,
      3 a_arg_count bit (1) unaligned,			/* there is an arg count for entry */
      3 a_descr_sw bit (1) unaligned,			/* there are valid descriptors for entry */
      3 a_main bit (1) unaligned,			/* this is a main entry point */
      3 unused bit (11) unaligned,
    2 n_args fixed bin,				/* # of args entry expects */
    2 descr_ptr ptr;				/* ptr to array of rel ptrs to descriptors for entry */


dcl 1 io_vector (99) aligned based (ftn_io_p),
    2 ip ptr unaligned,				/* points to file's iocb */
    2 modes bit (36) aligned;

dcl 1 lib_list_node aligned based (cur_lib_node_p),
    2 forward_thread bit (18) unaligned,		/* offset of next node */
    2 backward_thread bit (18) unaligned,		/* offset of last node */
    2 info aligned,					/* info to determine how to terminate */
      3 source bit (1) unal,				/* "1"b->source segment */
      3 has_lote bit (1) unal,			/* "1"b->linkage section allocated before run unit entered */
      3 already_known bit (1) unal,			/* "1"b->segment was initiated before run unit */
      3 terminate bit (1) unal,			/* "1"b->terminate before leaving run unit */
      3 pad bit (32) unal,
    2 segname char (168) aligned,			/* pathname of library */
    2 segp ptr,					/* points to library */
    2 ftn_ls_p ptr,					/* ^null->points to fortran seg linkage section */
    2 ftn_symbol_p ptr,				/* ^null->points to fortran seg symbol section */
    2 segbc fixed bin (24);				/* bit count of library */


dcl 1 rnt_node aligned based (rp),			/* node in reference name table */
    2 entryp ptr,					/* ptr to entry in program */
    2 threads aligned,
      3 next_node bit (18) unaligned,			/* offset of next node */
      3 pad bit (18) unaligned,
    2 nchars fixed bin,				/* number of characters in name */
    2 name char (32) aligned;				/* entrypoint name */

	
dcl 1 oi aligned like object_info;

%include object_info;

	
%include branch_status;

	
dcl 1 source_info aligned based (source_info_pt) like compiler_source_info;

%include compiler_source_info;

	
%include linkdcl;

	
%include lot;

	
%include stack_header;
	

/* copy arguments */
	system = a_system;
	program_ptr = a_program_ptr;
	program_lng = a_program_lng;
	main_name = a_main_name;
	debug_sw = a_debug_sw;
	a_code = 0;

/* initialize automatic variables */

	arg_ptr = null;
	ftn_io_p = null;
	cur_lib_node_p = null;
	last_lib_node_p = null;
	scratch_ptr = null;
	blank_common_ptr = null;
	object_ptr = null;
	rnt_p = null;

	max_severity = 0;
	nfiles = 0;

	terminating = "0"b;
	compiler_invoked = "0"b;
	have_chained = "0"b;
	fast_related_data_$terminate_run = terminate_run_entry;
	fast_related_data_$fortran_io_initiated = "0"b;	/* runtime must reinitialize io buffer area */

	array_p = addr (scratch_ptr);
	call get_temp_segments_ ("dfast_run_unit_manager_", based_array, code);
	call hcs_$get_max_length_seg (scratch_ptr, scratch_lng, code);
	ru_area_size = scratch_lng - 300;		/* save some room for lang area */
	cur_free_p = scratch_ptr;
	have_chained = "0"b;

	sb = ptr (addr (lotp), 0);			/* get ptr to stack header */
	lotp = sb -> stack_header.lot_ptr;
	isotp = sb -> stack_header.isot_ptr;

	on cleanup begin;

/* get ips mask now for later use */
	     interrupt_names = "-all";
	     call create_ips_mask_ (addr (interrupt_names), 1, mask);
	     fast_related_data_$chaining = "0"b;
	     call terminate_run_unit_;
	     array_p = addr (scratch_ptr);
	     call release_temp_segments_ ("dfast_run_unit_manager_", based_array, code);
	end;

	call set_up_run_unit_;

/* .	if a_file_info_p ^= null then call set_up_files_; /* called for execute command */

join:	if max_severity > 2 then do;
	     a_code = error_table_$not_done;
	     go to terminate;
	end;

	call find_entry_ ("main_", mainp, code);

/* if main_ename is ever given, check for it only in main program */
	if code ^= 0 then do;			/* abort run unit */
	     call ioa_ ("Main entry point not found.");
	     go to terminate;
	end;

	on fault_tag_3 call fault_tag_3_handler;

/*	if debug_sw then call probe$init_run (mainp); */

/* set bit count so can obtain statement map if error; need only for object but doesn't hurt source */
	call hcs_$set_bc_seg (program_ptr, program_lng, code);

	call cu_$gen_call (mainp, arg_ptr);

terminate:
	fast_related_data_$chaining = "0"b;		/* be sur all files are closed */
	call terminate_run_unit_;
	array_p = addr (scratch_ptr);
	call release_temp_segments_ ("dfast_run_unit_manager_", based_array, code);

main_return:
	return;

perform_chain:
	call chain_;				/* terminate old and set up neew run unit */
	go to join;				/* now treat like ordinary run unit */

/* end of main program */

	
terminate_run_unit_: proc;

	     if terminating then return;		/* don't risk loop */
	     terminating = "1"b;

	     call hcs_$set_bc_seg (program_ptr, 0, code);

/* terminate all segs and clean up LOT */
	     cp = last_lib_node_p;			/* lib list is also master list */
	     if cp ^= null then do;
		do while (rel (cp));
		     segptr = cp -> lib_list_node.segp;
		     if ^(cp -> lib_list_node.info.has_lote | cp -> lib_list_node.info.source)
		     & (segptr ^= null) then do;
			k = fixed (baseno (segptr), 18);
			lotp -> lot.lp (k), isotp -> isot.isp (k) = baseptr (0);
		     end;
		     if cp -> lib_list_node.info.terminate /* don't terminate first main seg */
		     then call hcs_$terminate_noname (segptr, code);
		     cp = ptr (cp, cp -> lib_list_node.backward_thread);
		end;
	     end;

/* terminate object segment */
	     if object_ptr ^= null then do;
		k = fixed (baseno (object_ptr), 18);
		lotp -> lot.lp (k), isotp -> isot.isp (k) = baseptr (0);
		call hcs_$set_bc_seg (object_ptr, 0, code);
		array_p = addr (object_ptr);
		call release_temp_segments_ ("dfast_run_unit_manager_", based_array, code);
	     end;

/* close all fortran files */
	     if system = "fortran" then if ftn_io_p ^= null
		then call fortran_io_$close_file (-1, code);

/* if necessary, close files not found during normal termination mechanisms */
/*	     if ^fast_related_data_$chaining		/* either in cleanup handler or at end */
/*	     then call clean_up_files; */

	     terminating = "0"b;
	     return;

	end;					/* terminate_run_unit_ */
	
dfast_add_to_lib_list_: proc (a_pname, al_code);

dcl  a_pname char (*);
dcl  pname char (168);
dcl  libp ptr;
dcl  libbc fixed bin (24);
dcl  al_code fixed bin (35);


	     pname = a_pname;

/* see if this name is already on the list; this may save an initiate call */
	     cp = last_lib_node_p;
	     do while (rel (cp));
		if cp -> lib_list_node.segname = pname then go to already_on;
		cp = ptr (cp, cp -> lib_list_node.backward_thread);
	     end;

/* get pointer to segment */
	     call expand_pathname_ (pname, temp_dir, temp_ent, al_code);
	     if al_code ^= 0 then return;

	     on cleanup begin;			/* be sure ips mask gets reset */
		if substr (oldmask, 36, 1) then do;	/* between calls  to set and reset ips mask */
		     mask = oldmask;
		     call hcs_$reset_ips_mask (mask, oldmask);
		end;
	     end;

	     interrupt_names = "-all";
	     call create_ips_mask_ (addr (interrupt_names), 1, mask);
	     call hcs_$set_ips_mask (mask, oldmask);	/* bit 36 of oldmask will be "1"b */


	     call hcs_$initiate_count (temp_dir, temp_ent, "", libbc, 0, libp, al_code);
	     if libp = null then goto unmask;

/* see if this segment  is already on the list */
	     cp = last_lib_node_p;
	     do while (rel (cp));
		if cp -> lib_list_node.segp = libp then do;
		     call hcs_$terminate_noname (libp, code);
		     go to already_on;
		end;
		cp = ptr (cp, cp -> lib_list_node.backward_thread);
	     end;

/* allocate new node and fill in  */
	     call allocate_ (size (lib_list_node), cp);
	     last_lib_node_p -> lib_list_node.forward_thread = rel (cp);
	     cp -> lib_list_node.backward_thread = rel (last_lib_node_p);
	     cp -> lib_list_node.forward_thread = "0"b;
	     addr (cp -> lib_list_node.info) -> based_fixed = 0;
	     if code ^= 0 then cp -> lib_list_node.info.already_known = "1"b;
						/* initiated before; may have valid lot entry */
	     cp -> lib_list_node.info.terminate = "1"b;	/* we initiated; we must terminate */
	     cp -> lib_list_node.segname = pname;
	     cp -> lib_list_node.segp = libp;
	     cp -> lib_list_node.ftn_ls_p = null;
	     cp -> lib_list_node.ftn_symbol_p = null;
	     cp -> lib_list_node.segbc = libbc;
	     last_lib_node_p = cp;

already_on:    al_code = 0;
unmask:	     mask = oldmask;			/* use oldmask to bracket ips calls */
	     call hcs_$reset_ips_mask (mask, oldmask);
	     return;
	end;					/* dfast_add_to_lib_list_ */
	
init_lib_list_: proc;

/* allocate dummy node to make process_lib_list_ cleaner */

	     call allocate_ (size (lib_list_node), cur_lib_node_p);
	     cur_lib_node_p -> lib_list_node.backward_thread = "0"b;
	     cur_lib_node_p -> lib_list_node.segp = null;
	     cur_lib_node_p -> lib_list_node.segname = "";
	     cur_lib_node_p -> lib_list_node.ftn_ls_p = null;
	     cur_lib_node_p -> lib_list_node.ftn_symbol_p = null;
	     addr (cur_lib_node_p -> lib_list_node.info) -> based_fixed = 0;


/* allocate and initialize real first node */
	     call allocate_ (size (lib_list_node), cp);
	     cp -> lib_list_node.backward_thread = rel (cur_lib_node_p);
	     cp -> lib_list_node.forward_thread = "0"b;
	     addr (cp -> lib_list_node.info) -> based_fixed = 0;
	     if have_chained then cp -> lib_list_node.info.terminate = "1"b;
	     cp -> lib_list_node.segname = main_name;
	     cp -> lib_list_node.segp = program_ptr;
	     cp -> lib_list_node.ftn_ls_p = null;
	     cp -> lib_list_node.ftn_symbol_p = null;
	     cp -> lib_list_node.segbc = program_lng;
	     last_lib_node_p = cp;

	     cur_lib_node_p -> lib_list_node.forward_thread = rel (cp);

	     is_main = "1"b;			/* start out processing main program */
	     return;
	end;
	
chain_:	proc;

/* this is just a place holder */

	     return;
	end;

	
set_up_run_unit_: proc;

dcl (blank_length, nblocks) fixed bin;
dcl (lsp, common_p) ptr;
dcl  link_list (200) ptr aligned based;
dcl 1 common_list (100) aligned,
    2 name char (32) aligned,				/* name of labelled common block */
    2 block_p ptr,
    2 block_len fixed bin;

dcl 1 ignore_source_info aligned like compiler_source_info;
dcl 1 ext aligned like ext_template;			/* holds link info */

dcl 1 init_info aligned based,
    2 length fixed bin,
    2 icode fixed bin,
    2 template (0 refer (init_info.length)) bit (36) aligned;

dcl  init_template (j) bit (36) aligned based;

	     call init_lib_list_;
	     compiler_invoked = "0"b;

/* compile all source and build table of object entries */
	     call process_lib_list_ (addr (ignore_source_info));
	     if max_severity > 2 then return;		/* first release treats namedups as error */

/* process links */
	     if system = "fortran" then do;
		blank_length = 0;
		nblocks = 0;
		cp = last_lib_node_p;
		if cp ^= null then do while (rel (cp));
		     call snap_ftn_links (cp -> lib_list_node.ftn_ls_p, "1"b);
		     cp = ptr (cp, cp -> lib_list_node.backward_thread);
		end;

		if object_ptr ^= null then do;	/* snap links in object  just compiled */
		     lsp = lot.lp (fixed (baseno (object_ptr), 18)); /* get ptr to object's ls */
		     call snap_ftn_links (lsp, "0"b);
		end;

		if max_severity > 2 then return;
		call allocate_ (blank_length, blank_common_ptr); /* allocate blank common in scratch seg */

		call allocate_ (size (io_vector), ftn_io_p);
		fast_related_data_$fortran_buffer_p = ftn_io_p;
	     end;
	     else do;				/* basic */
						/* be sure area begins on even word boundary */
		if mod (fixed (rel (cur_free_p), 18), 2) = 1 then cur_free_p = addrel (cur_free_p, 1);
		nleft = scratch_lng - fixed (rel (cur_free_p), 18); /* find # of words left in scratch seg */
		call area_ (nleft, cur_free_p);
		fast_related_data_$basic_area_p = cur_free_p;
	     end;

	     return;


snap_ftn_links: proc (lp, old_object);

dcl  nlinks fixed bin;				/* number of links in linkage section */
dcl  first_link_offset fixed bin (18);
dcl  dl_code fixed bin (35);
dcl (lp, link_ptr, link_list_ptr) ptr;
dcl  old_object bit (1) aligned;
dcl  length builtin;

		if lp = null then return;

		first_link_offset = fixed (lp -> header.stats.begin_links, 18);
		link_list_ptr = addrel (lp, first_link_offset);
		nlinks = divide (fixed (lp -> header.stats.block_length, 18) - first_link_offset + 1, 2, 17, 0);
		do i = 1 to nlinks;
		     link_ptr = addr (link_list_ptr -> link_list (i));
		     call decode_ftn_link_ (link_ptr, addr (ext), "1"b, dl_code);
		     if dl_code ^= 0 then do;		/* illegal link */
			if dl_code = 1 then ;	/* not a ft2 link */
			else link_ptr -> link.ft2 = "100111"b; /* get ft3 if reference */
		     end;
		     else if ext.type = 5 & ext.section = "*system" then do; /* common */
			if ext.ename = "blnk*com" then do;
			     blank_length = max (blank_length, ext.init_info_p -> init_info.length);
						/* keep track of max blank common length */
			     link_ptr -> based_ptr = addr (blank_common_ptr); /* snap link indirect thru  blank_common_ptr */
			     link_ptr -> link.modifier = "010000"b; /* make pointer indirect */
			end;
			else do;			/* labelled common */
			     call find_common_block_;
			     if code = 0 then link_ptr -> based_ptr = common_p; /* snap link */
			end;
		     end;
		     else if (ext.type = 1) & (ext.section = "*symbol") then do;
			if old_object then link_ptr -> based_ptr = cp -> lib_list_node.ftn_symbol_p;
			else link_ptr -> based_ptr = new_obj_symbol_p;
		     end;
		     else do;			/* ordinary link */
			call find_entry_ ((ext.ename), ep, code);
			if code ^= 0 then do;
			     call error (2, "Unable to satisfy reference to ^a because it is not in a library.",
				substr (ext.ename, 1, length (ename)));
			     link_ptr -> link.ft2 = "100111"b; /* make  fault  tag 3 and continue */
			end;
			else link_ptr -> based_ptr = ep; /* snap link */
		     end;
		end;
		return;

find_common_block_:	proc;

/* this procedure finds or allocates common blocks */
/* global varaibles:	init_info_p,
   .			ename,
   .			common_p,
   .			code,
   .			common_list.
*/

dcl  i fixed bin;

		     code = 0;
		     do i = 1 to nblocks;		/* see if block is already allocated */
			if ext.ename = common_list (i).name then do; /* found match */
			     if common_list (i).block_len = ext.init_info_p -> init_info.length
			     then do;
				common_p = common_list (i).block_p; /* use allocated block */
				if ext.init_info_p -> init_info.icode = 3 then do; /* but initialize now */
				     j = ext.init_info_p -> init_info.length;
				     common_p -> init_template = ext.init_info_p -> init_info.template;
				end;
			     end;
			     else do;
				call error (3, "Different lengths specified for common block ^a",
				     substr (ext.ename, 1, length (ext.ename)));
				code = 1;
			     end;
			     return;
			end;
		     end;

/* no match; allocate new block in scratch seg */

		     nblocks = nblocks + 1;
		     common_list (i).name = ext.ename;
		     j, common_list (i).block_len = init_info_p -> init_info.length;
		     call allocate_ (j, common_p);
		     common_list (i).block_p = common_p;
		     if ext.init_info_p -> init_info.icode = 3
		     then common_p -> init_template = ext.init_info_p -> init_info.template;

		     return;
		end;				/* find_common_blocks_ */
	     end;					/* snap_ftn_links */
	end;					/* set_up_run_unit_ */
	
decode_ftn_link_: proc (linkp, extp, linking, dcode);

/* This procedure returns  information about legal fortran links only.
   Do not distinguish types of errors except for missing fault tag 2. */
/* This is outside set_up_run_unit_  so fault tag 3 handler can call it */

dcl (linkp, extp) ptr;
dcl  linking bit (1) aligned;
dcl  dcode fixed bin (35);

dcl (head_pointer, def_pointer, exp_pointer, type_pointer, ext_pointer) ptr;
dcl (ntype, section_id) fixed bin (18);
dcl  name_length fixed bin;

dcl 1 ext aligned based,				/* holds link info */
    2 type fixed bin,				/* link type */
    2 section char (8) aligned,
    2 ename,
      3 nchars fixed bin,
      3 string char (32),
    2 init_info_p ptr;				/* ptr  to init info for  common */

	     dcode = 1;
	     if linking then if linkp -> link.ft2 ^= "100110"b then return;
						/* must have fault tag 2 */
	     dcode = 2;

	     head_pointer = addrel (linkp, linkp -> link.head_ptr);
	     def_pointer = head_pointer -> header.def_ptr;
	     exp_pointer = addrel (def_pointer, linkp -> link.exp_ptr);
	     if exp_pointer -> exp_word.exp then return;	/* must have 0 expression */

	     type_pointer = addrel (def_pointer, exp_pointer -> exp_word.type_ptr);
	     ext_pointer = addrel (def_pointer, type_pointer -> type_pair.ext_ptr);
	     section_id = bin (type_pointer -> type_pair.seg_ptr, 18);

	     extp -> ext.type, ntype = bin (type_pointer -> type_pair.type, 18);

	     if (ntype = 4) | (ntype = 5) then do;
		name_length = bin (ext_pointer -> name.nchars, 9);
		if name_length > 32 then return;	/* name too long */
		extp -> ext.ename.nchars = name_length;
		substr (extp -> ext.ename.string, 1, name_length)
		     = substr (ext_pointer -> name.char_string, 1, name_length);

		if ntype = 4 then do;
		     if type_pointer -> type_pair.seg_ptr ^= type_pointer -> type_pair.ext_ptr then return;
						/* don't  allow $ names in DFAST  */
		     extp -> ext.section = " ";
		     extp -> ext.init_info_p = null;
		end;
		else do;				/* ntype = 5 */
		     if section_id ^= 5 /* *system */ then return;
		     extp -> ext.section = "*system";
		     if type_pointer -> type_pair.trap_ptr = "0"b then return;
						/* must have init info */
		     extp -> ext.init_info_p = addrel (def_pointer, type_pointer -> type_pair.trap_ptr);
		end;
	     end;

	     else if ntype = 1 then do;
		if section_id ^= 2 then return;	/* must be *symbol|0 */
		extp -> ext.section = "*symbol";
		extp -> ext.ename.nchars = 0;
		extp -> ext.init_info_p = null;
	     end;

	     else return;				/*  not a legal fortran type */

	     dcode = 0;
	     return;

	end;					/* decode_ftn_link_ */
	
find_entry_: proc (entname, entp, ecode);

/* this procedure returns  a ptr to the entrypoint corresponding to a given name */

dcl  entname char (32);
dcl  entp ptr;
dcl  ename_length fixed bin;
dcl  ecode fixed bin (35);

	     ename_length = 33 - verify (reverse (entname), " ");
	     rp = rnt_p;
	     do while (rel (rp));
		if ename_length = rnt_node.nchars
		then if entname = rnt_node.name then do;
						/* found match */
			entp = rnt_node.entryp;
			ecode = 0;
			return;
		     end;
		rp = ptr (rp, rnt_node.next_node);
	     end;

	     ecode = error_table_$name_not_found;
	     return;

	end;					/* find_entry_ */



find_entry_value: entry (a_entname, a_entp, a_ecode);

/*     This  entry is called by basic_find_proc_ */

dcl  a_entname char (32);
dcl  a_entp ptr;
dcl  a_ecode fixed bin (35);

	call find_entry_ (a_entname, a_entp, a_ecode);

	return;


	
process_object_: proc (old_object, has_lot_entry);

dcl (listptr, namep, linkage_section_p, program_header_pt) ptr;
dcl (namel, link_lng) fixed bin;
dcl  old_object bit (1) aligned;			/* "1"b->object segment is in hierarchy */
dcl  has_lot_entry bit (1) unal;
dcl  based_name char (namel) based (namep);
dcl  based_name_aligned char (namel) based (namep) aligned;
dcl 1 saved_lib_list aligned based,			/* list found in object's text */
    2 nlibs fixed bin,
    2 names (0 refer (nlibs)) aligned,
      3 offset bit (18) unaligned,
      3 length fixed bin (17) unaligned;
dcl  ls (link_lng) fixed bin (35) based;
dcl  al_code fixed bin (35);

%include basic_program_header;

/* don't mix basic and fortran programs */
	     if oi.compiler = "fortran2" then if system ^= "fortran" then go to wrong_sys;
	     if oi.compiler = "basic" then do;		/* be sure precision matches */
		if system = "fortran" then go to wrong_sys;
		if oi.textp -> basic_program_header.version_number = -1 then do;
						/* double precision program */
		     if system ^= "dbasic" then go to wrong_sys;
		end;
		else if system = "dbasic" then do;	/* single precision program */
wrong_sys:	     call error (3, "Program ^a belongs to another system.", cur_lib_node_p -> lib_list_node.segname);
		     return;
		end;
	     end;

	     dd.next_def = oi.defp;			/* initialize for loop */
	     do while (^(decode_definition_$full (dd.next_def, addr (dd), addr (oi))));
		if dd.symbol = "library_list_" then do;
		     listptr = addrel (oi.textp, dd.offset);
		     do i = 1 to listptr -> saved_lib_list.nlibs;
			namep = addrel (oi.textp, listptr -> saved_lib_list.names (i).offset);
			namel = listptr -> saved_lib_list.names (i).length;
			call dfast_add_to_lib_list_ (based_name, al_code);
			if code ^= 0 then call error (3, "Library ^a could not be processed.",
			     based_name_aligned);
		     end;
		end;
		else if dd.section = "text" then call add_to_known_names;
	     end;

/* allocate linkage */
	     if has_lot_entry then return;
	     if old_object then do;			/* must copy linkage section */
		link_lng = oi.llng;
		call allocate_ (link_lng, linkage_section_p);
		linkage_section_p -> ls = oi.linkp -> ls;
		if system = "fortran" then do;	/* need to  keep pointers for snapping links */
		     cur_lib_node_p -> lib_list_node.ftn_ls_p = linkage_section_p;
						/* set ptrs to linkage sections to be prelinked */
		     cur_lib_node_p -> lib_list_node.ftn_symbol_p = oi.symbp;
		end;
		else cur_lib_node_p -> lib_list_node.ftn_ls_p,
		     cur_lib_node_p -> lib_list_node.ftn_symbol_p = null;
	     end;
	     else do;				/* there's  no lib_list_node  for new object */
		linkage_section_p = oi.linkp;		/*  don't  copy temp  linkage  section */
		new_obj_symbol_p = oi.symbp;
	     end;

/* update LOT, ISOT */
	     k = fixed (baseno (oi.textp), 18);
	     lotp -> lot.lp (k) = linkage_section_p;

/*		/*isotp->isot.isp(k)=linkage_section_p; */

/* fill in linkage  section header */
	     linkage_section_p -> header.def_ptr = oi.defp;
	     linkage_section_p -> header.symbol_ptr = oi.symbp;
	     linkage_section_p -> header.original_linkage_ptr = oi.linkp;
	     linkage_section_p -> header.stats.segment_number = bit (k, 18);
	     linkage_section_p -> header.stats.static_length = bit (bin (oi.ilng, 18), 18);

	     return;

add_to_known_names: proc;

/* this procedure fills in the rnt */
/* global variables:	rnt_p,
   ename,
   def_ptr,
   have_main;
*/

dcl  ename_used char (32) var;
dcl  ename_length fixed bin;
dcl  saved_rp ptr;

/* copy name to be added */
/* if it's the main entry point, use main__ so we can find it easily later */

/*
   .		if dd.flags.a_main then do;
   .		     if have_main then do;		/* don't allow 2 main entry points !
   .			call error (3, "Library ^a has a main entry point.", cur_lib_node_p -> lib_list_node.segname);
   .			return;
   .		     end;
   .		     ename_used = "main__";
   .		     ename_length = length (ename_used);
   .		     have_main = "1"b;
   .		end;
*/
		ename_length = dd.symbol_lng;
		ename_used = substr (dd.symbol, 1, dd.symbol_lng);
		if ename_used = "main_" then do;
		     if ^is_main then do;
			call error (3, "Library ^a has a main entry point.",
			     cur_lib_node_p -> lib_list_node.segname);
			return;
		     end;
		end;

		if rnt_p = null then do;		/* rnt does not exist yet */
		     call fill_in_rnt_node;
		     rnt_node.next_node = "0"b;
		     rnt_p = rp;
		     return;
		end;

		rp = rnt_p;
		do while (rel (rp));
		     if ename_length = rnt_node.nchars

		     then if ename_used = rnt_node.name then do;
			     call error (2, "Duplicate subroutine name ^a.", rnt_node.name);
			     return;
			end;
		     saved_rp = rp;			/* save for filling in thread */
		     rp = ptr (rp, rnt_node.next_node);
		end;

/* add name to rnt */
		call fill_in_rnt_node;
		saved_rp -> rnt_node.next_node = rel (rp); /* thread new node to rest of list */
		return;


fill_in_rnt_node:	proc;


		     call allocate_ (size (rnt_node), rp);
		     rnt_node.entryp = addrel (oi.textp, dd.offset);
		     rnt_node.pad = "0"b;
		     rnt_node.nchars = ename_length;
		     rnt_node.name = ename_used;
		     return;

		end;				/* fill_in_rnt_node */

	     end;					/* add_to_known_names_ */
	end;					/* process_object_ */

	
process_lib_list_: proc (source_info_pointer);

dcl  source_info_pointer ptr;
dcl  fixed_lote fixed bin (35);
dcl  object_len fixed bin (24);
dcl  object_length fixed bin;

dcl 1 fort_options aligned like fortran_options;

%include fort_options;

	     source_info_pt = source_info_pointer;

/* find all library segments */
	     do while (cur_lib_node_p -> lib_list_node.forward_thread);
		cur_lib_node_p = ptr (cur_lib_node_p, lib_list_node.forward_thread);
		oi.version_number = object_info_version_2;
		call object_info_$display (lib_list_node.segp, lib_list_node.segbc, addr (oi), code);
		if code = 0 then do;		/* object */
		     fixed_lote = addr (lotp -> lot.lp (fixed (baseno (oi.textp), 18))) -> based_fixed;
		     if (fixed_lote > 0) & (lib_list_node.info.already_known)
		     then cur_lib_node_p -> lib_list_node.info.has_lote = "1"b;
		     call process_object_ ("1"b, cur_lib_node_p -> lib_list_node.info.has_lote); /* find defs, copy linkage */
		     is_main = "0"b;
		end;
		else do;
						/* source; must compile */
						/* set up source info */
		     source_info.version = compiler_source_info_version_2;
		     source_info.input_pointer = cur_lib_node_p -> lib_list_node.segp;
		     source_info.input_lng = divide (cur_lib_node_p -> lib_list_node.segbc+8, 9, 17, 0);
		     call expand_pathname_ ((cur_lib_node_p -> lib_list_node.segname), temp_dir, temp_ent, code);
		     source_info.given_ename = substr (temp_ent, 1, 33 - verify (reverse (temp_ent), " "));

		     call hcs_$status_long (temp_dir, temp_ent, 1, addr (branch_status), null, code);
						/* ignore  any error--not likely and doesn't matter */
		     source_info.date_time_modified = fixed (branch_status.date_time_modified || (16)"0"b, 71);
		     source_info.unique_id = branch_status.unique_id;

		     call hcs_$fs_get_path_name (source_info.input_pointer, temp_dir, i, temp_ent, code);
		     source_info.dirname = substr (temp_dir, 1, i);
		     source_info.segname = substr (temp_ent, 1, 33 - verify (reverse (temp_ent), " "));

		     if compiler_invoked then return;
						/* here at most  once per  run unit */

		     array_p = addr (object_ptr);
		     call get_temp_segments_ ("dfast_run_unit_manager_", based_array, code);
		     if code ^= 0 then do;
			call error (4, "Unable to obtain segment for compiled code.", " ");
			go to main_return;
		     end;

		     save_main = is_main;		/* note if compiling maan */
		     is_main = "0"b;		/*  turn off for any libraries found */
		     compiler_invoked = "1"b;

		     if system = "fortran" then do;
			unspec (fort_options) = dfast_mask;
			call fort_$compile_run (
			     source_info_pointer, object_ptr, object_length, addr (fort_options),
			     dfast_get_next_source_seg_, dfast_add_to_lib_list_, code);
		     end;

		     else call basic_$run_unit_compiler ( /* assume basic */
			source_info_pointer, object_ptr, object_length, debug_sw,
			dfast_get_next_source_seg_, dfast_add_to_lib_list_, code);

		     if code ^= 0 then do;
			call error (3, "errors in source. Program could not be run.", " ");
			return;
		     end;

		     object_len = object_length * 36;	/* convert to bit count */
		     call hcs_$set_bc_seg (object_ptr, object_len, code);
		     call object_info_$display (object_ptr, object_len, addr (oi), code);
		     is_main = save_main;

		     if code ^= 0 then call error (3, "Errors in source. Program could not be run.", " ");
		     else call process_object_ ("0"b, "0"b); /* find defs; don't copy linkage */
		     return;
		end;
	     end;

/* found all libraries; tell compiler to finish object */
	     if compiler_invoked then source_info.input_pointer = null;

	     return;
	end;
	
dfast_get_next_source_seg_: proc (source_info_pointer);

dcl  source_info_pointer ptr;

	     call process_lib_list_ (source_info_pointer);

	     return;
	end;					/* dfast_get_next_source_seg_ */

	
allocate_: proc (nwords, newptr);

/* this routine allocates spece in the scratch segment; it is used when
   the run unit is being set up */

dcl  nwords fixed bin;
dcl  newptr ptr;

/* always allocate on even word boundary */
	     if mod (fixed (rel (cur_free_p), 18), 2) = 1 then cur_free_p = addrel (cur_free_p, 1);
	     newptr = cur_free_p;
	     cur_free_p = addrel (cur_free_p, nwords);
	     if fixed (rel (cur_free_p), 18) > ru_area_size then do;
		call error (4, "Attempt to overflow run unit scratch area.", " ");
		go to main_return;			/* abort completely; can't continue at all */
	     end;

	     return;
	end;					/* allocate_ */

	
error:	proc (severity, control_string, arg_string);

dcl  severity fixed bin;
dcl (control_string, arg_string) char (*) aligned;

	     max_severity = max (max_severity, severity);
	     call ioa_ (control_string, arg_string);

	     return;
	end;					/* error */




terminate_run_entry: proc;

	     goto terminate;

	end;					/* terminate_run_entry */


	
fault_tag_3_handler: proc;

/* fortran links which could not be snapped are converted to fault tag 3's */

dcl  link_ptr ptr;
dcl  dl_code fixed bin (35);
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  continue_to_signal_ entry (fixed bin (35));

dcl 1 ext aligned like ext_template;

dcl 1 cond_info aligned,
%include cond_info;

%include mc;
     
     cond_info.version = 1;
	     call find_condition_info_ (null, addr (cond_info), dl_code);
	     if dl_code ^= 0 then goto continue_ft3;

	     scup = addr (cond_info.mcptr -> mc.scu (0));
	     link_ptr = ptr (baseptr (fixed (fixed (scup -> scu.ppr.psr, 15), 18)), scup -> scu.ca);

	     call decode_ftn_link_ (link_ptr, addr (ext), "0"b, dl_code);
	     if dl_code = 0 then call ioa_ ("Attempt to reference missing subprogram ^a.^/Program aborted.",
		ext.ename);
	     else if dl_code = 2 then call ioa_ (
		"Attempt to reference through invalid link.^/FORTRAN compiler error. Program aborted.");
	     else do;				/* at this writing no other codes are returned, but... */
continue_ft3:	call continue_to_signal_ (code);
		return;
	     end;

	     goto terminate;

	end;					/* fault_tag_3_handler */
     end;
