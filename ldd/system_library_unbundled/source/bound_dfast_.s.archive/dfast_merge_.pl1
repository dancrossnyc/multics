/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-12-03,TLNguyen), approve(87-12-03,MCR7806),
     audit(87-12-10,Lippard), install(88-01-19,MR12.2-1015):
     - Declare "table_ptr pointer" as a result of changing the include file
       named dfast_line_table.incl.pl1.  See that include file for more
       details.
     - Remove alter_ptr, dfast_err_, new_line, and white_space from the source
       since they are not referenced anywhere within the source.
     - Declare "addr" and "ptr" as builtin type since they are referenced,
       but they are not defined anywhere with the source.
                                                   END HISTORY COMMENTS */


dfast_merge_: proc (force_sort, arg_edit_info_ptr, code);

/*  This procedure merges the current and alter segments.  An ordered segment follows these conventions:
   *
   *
   *   1.  All lines begin with a positive number.
   *   2.  All lines end with the new_line character.
   *   3.  There is only one line for a given number.
   *   4.  Lines are stored with line numbers in accending order.
   *
   *   There are two ways to call the procedure:
   *
   *   1.  Convert the segment to ordered form (convert = "1"b).  A code of zero is returned in
   *	 all cases, since the procedure forces an ordered segment.
   *
   *	 a.  Illegal lines (lines that do not begin with a positive number or don't end with a new_line
   *	     character) are deleted.
   *
   *	 b.  In the case of lines with the same line number, the line furthest from the beginning of the
   *	     segment is kept.  The other lines with that number are deleted.
   *
   *	 c.  Lines are sorted so that their line numbers are in accending order.
   *
   *   2.  Do not convert the segment to ordered form (convert = "0"b).  If the segment
   *	 is not ordered, an error message is printed giving the line that caused the error and an
   *	 error code is returned.  The segment is not changed.
   *
   *	   code = 0		The segment is ordered.
   *	        = error_bad_sort	At least one line is out of order.
   *	        = error_no_nl	The segment does not end in a new_line.
   *	        = error_bad_line	An illegal number (negative or too large) was found on the line.
   *	        = error_no_num	A line without a number was found.
   *
   *
   *	The scratch buffers used:
   *
   *	alter_ptr		ptr to the alter segment
   *	temp_ptr		ptr to the new current segment
   *	cur_table_ptr	ptr to the table of line information for the current segment
   *	alt_table_ptr	ptr to the table of line information for the alter segment
   *
*/
/* parameters */

dcl  force_sort bit (1) unal;
dcl  arg_edit_info_ptr ptr;
dcl  code fixed bin (35);
dcl  clean_up condition;
dcl  edit_info_ptr ptr;
dcl  dfast_get_table_ entry (bit (1) unal, ptr, fixed bin (21), ptr, fixed bin (35));
dcl  free_table_buffers bit (1) unal;			/* ON if should free;  OFF if buffers in alter segment */
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  i fixed bin (35);
dcl  one_ptr (1) ptr based;				/* overlay to use get_temp_segments_ */
dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  save_ptr ptr;
dcl  table_ptr ptr;
dcl  string char (f.max_seg_size) based;
dcl  three_ptr (3) ptr based;				/* overlay to use get_temp_segments_ */
dcl  temp char (f.max_seg_size) based (temp_ptr);
dcl  temp_length fixed bin (21);
dcl (cur_index, alt_index) fixed bin (21);

dcl 1 pointers aligned,				/* A structure is used for get_temp_segments_ convience  */
    2 temp_ptr ptr,
    2 alt_table_ptr ptr,
    2 cur_table_ptr ptr;


%include dfast_error_codes;

/* based */

dcl 1 c aligned based (cur_table_ptr) like dfast_line_table;
dcl 1 a aligned based (alt_table_ptr) like dfast_line_table;


dcl (addr, divide, null, ptr, substr) builtin;

dcl 1 f aligned based (edit_info_ptr) like dfast_edit_info;
%include dfast_edit_info;
%include dfast_line_table;

/*  */
	edit_info_ptr = arg_edit_info_ptr;

	temp_ptr, alt_table_ptr, cur_table_ptr = null;
	free_table_buffers = "0"b;

	on clean_up call free_buffers;

/* If the alter and current segments are small, the tables are put at the end of the alter segment. */

	if f.current_length + f.alter_length < divide (f.max_seg_size, 4, 35) then do;
	     i = divide (f.alter_length + 3, 4, 35, 0) +1;
	     alt_table_ptr = ptr (f.alter_ptr, i);

	     call dfast_get_table_ ("1"b, f.alter_ptr, f.alter_length, alt_table_ptr, 0);
	     i = i + a.table_length *3 +2;
	     cur_table_ptr = ptr (f.alter_ptr, i);
	     call get_temp_segments_ ("fast", addr (temp_ptr) -> one_ptr, code);
	end;
	else do;
	     call get_temp_segments_ ("fast", addr (temp_ptr) -> three_ptr, code);
	     if code = 0 then free_table_buffers = "1"b;
	end;
	if code = 0 then do;
	     call dfast_get_table_ (force_sort, f.current_ptr, f.current_length, cur_table_ptr, code);
	     if code = 0 then do;

		cur_index = 1;
		alt_index = 1;
		temp_length = 0;
		do while (cur_index <= c.table_length & alt_index <= a.table_length & code = 0);

		     if c.line (cur_index).number < a.line (alt_index).number then do;
			call move (f.current_ptr, c.line (cur_index).start, c.line (cur_index).num_chars, code);
			cur_index = cur_index + 1;
		     end;

		     else do;
			call move (f.alter_ptr, a.line (alt_index).start, a.line (alt_index).num_chars, code);
			if c.line (cur_index).number = a.line (alt_index).number then cur_index = cur_index + 1;
			alt_index = alt_index + 1;
		     end;
		end;

		do while (alt_index <= a.table_length & code = 0);
		     call move (f.alter_ptr, a.line (alt_index).start, a.line (alt_index).num_chars, code);
		     alt_index = alt_index + 1;
		end;

		do while (cur_index <= c.table_length & code = 0);
		     call move (f.current_ptr, c.line (cur_index).start, c.line (cur_index).num_chars, code);
		     cur_index = cur_index + 1;
		end;

		if code = 0 then do;
		     f.current_length = temp_length;
		     f.alter_length = 0;
		     f.edit_done = "1"b;
		     save_ptr = f.current_ptr;

		     revert clean_up;

		     f.current_ptr = temp_ptr;
		     temp_ptr = save_ptr;
		end;

	     end;
	end;
	if temp_ptr ^= null then call free_buffers;

	return;
						/*  */

move:	proc (seg_ptr, start, num_chars, code);

dcl  seg_ptr ptr;					/* ptr to segment to move from */
dcl  start fixed bin (21);				/* first character in segment to be moved  */
dcl  num_chars fixed bin (21);			/* number of characters to move */
dcl  code fixed bin (35);

	     if temp_length + num_chars > f.max_seg_size then code = error_max_size;
	     else do;
		substr (temp, temp_length + 1, num_chars) = substr (seg_ptr -> string, start, num_chars);
		temp_length = temp_length + num_chars;
	     end;

	     return;

	end move;



free_buffers: proc;

dcl  code fixed bin (35);

	     if free_table_buffers then call release_temp_segments_ ("fast", addr (temp_ptr) -> three_ptr, code);
	     else if temp_ptr ^= null then call release_temp_segments_ ("fast", addr (temp_ptr) -> one_ptr, code);

	     return;

	end free_buffers;


     end dfast_merge_;
