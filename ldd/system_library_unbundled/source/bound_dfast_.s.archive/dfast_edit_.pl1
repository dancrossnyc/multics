/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
dfast_edit_: proc (request, arg_string, edit_info_ptr, code);

/*  This procedure handles all the command level edit functions.  It uses these values for request:
   *
   *   (1)  append		Append the alter segment onto the end of the current segment (no sort)
   *   (2)  sort		Merge the alter and current segment and sort.
   *   (3)  list		List the alter or current segments, or merge and then list
   *   (4)  list (no header)  Same as list, except the header is not printed.
   *   (5)  build		Add the string to the current segment.
   *   (6)  alter		Add the string to the alter segment.
   *   (7)  length		Merge the temporary segments and print the length.
   *   (9)  merge		Merge current and alter segments.
*/

dcl  request fixed bin;
dcl  arg_string char (*);
dcl  edit_info_ptr ptr;				/* ptr to FAST data base */
dcl  code fixed bin (35);				/* error code */

dcl  len fixed bin (21);
dcl  buffer char (max_seg_size) based;			/* for moving segments */
dcl  s char (1);					/* for length message */

dcl (divide, length, substr) builtin;

/*  constants */

dcl  edit_name (9) char (6) int static options (constant) init (
     "append",
     "sort",
     "list",
     "list",
     "build",
     "alter",
     "length",
     "edit",
     "merge");
dcl  APPEND fixed bin int static options (constant) init (1);
dcl  SORT fixed bin int static options (constant) init (2);
dcl  LIST fixed bin int static options (constant) init (3);
dcl  LISTNH fixed bin int static options (constant) init (4);
dcl  BUILD fixed bin int static options (constant) init (5);
dcl  ALTER fixed bin int static options (constant) init (6);
dcl  LENGTH fixed bin int static options (constant) init (7);
dcl  MERGE fixed bin int static options (constant) init (9);

/* external */

dcl  iox_$user_output ptr ext static;
dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  dfast_merge_ entry (bit (1) unal, ptr, fixed bin (35));
dcl  dfast_header_ entry (char (*), char (*));
dcl  message_ entry (fixed bin (35), char (*), char (*));
dcl  ioa_ entry options (variable);
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));

%include dfast_edit_info;

%include dfast_error_codes;
/*  */
	if ^source_segment & request ^= LENGTH then code = error_obj_nop;

	else do;

/* append:  The alter segment is appended to the end of the current segment.  No editing is done.  */

	     if request = APPEND then do;
		if alter_length = 0 then code = error_alt_empty;
		else do;
		     len = current_length + alter_length;
		     if len > max_seg_size then code = error_max_size;
		     else do;
			substr (current_ptr -> buffer, current_length + 1, alter_length) = alter_ptr -> buffer;
			current_length = len;
			alter_length = 0;
			edit_done = "1"b;
		     end;
		end;
	     end;

	     else if request = SORT then do;
		call dfast_merge_ ("1"b, edit_info_ptr, code);
	     end;

/* list:  If no segment is specified, then the current and alter segment are merged and the resultant
   current segment is listed.  If a line number was given, the segment is listed beginning with the first line
   equal or greater than that line.
*/
	     else if request = LIST | request = LISTNH then do;
		if arg_string = "alt" then do;
		     if alter_length = 0 then code = error_alt_empty;
		     else do;
			if request = LIST then call dfast_header_ ("alter", "");
			call iox_$put_chars (iox_$user_output, alter_ptr, alter_length, code);
		     end;
		end;

		else do;
		     if arg_string ^= "cur" then do;
			if alter_length > 0 then call dfast_merge_ ("0"b, edit_info_ptr, code);
			if code ^= 0 then return;
		     end;
		     if current_length = 0 then code = error_cur_empty;
		     else do;
			if request = LIST then call dfast_header_ ((current_name), "");
			call iox_$put_chars (iox_$user_output, current_ptr, current_length, code);
		     end;
		end;
	     end;

/* build:  The line is appended to the current segment.  No editing is done.  */

	     else if request = BUILD then do;
		len = length (arg_string);
		if len + current_length > max_seg_size then do;
		     build_mode = "0"b;
		     code = error_max_size;
		end;
		else do;
		     substr (current_ptr -> buffer, current_length + 1, len) = arg_string;
		     current_length = current_length + len;
		     edit_done = "1"b;
		end;
	     end;

/* alter:  the line is appended to the alter file.  No editing is done.  */

	     else if request = ALTER then do;
		len = length (arg_string);
		if alter_length + len > max_seg_size then code = error_max_size;
		else do;
		     substr (alter_ptr -> buffer, alter_length + 1, len) = arg_string;
		     alter_length = alter_length + len;
		end;
	     end;

/* length:  If the alter segment is not empty, the current and alter segments are merged.  The length of the resultent
   segment is printed.  If the segments can't be merged, an error
   message is printed and an error return is made.
*/
	     else if request = LENGTH then do;
		if alter_length > 0 then do;
		     call dfast_merge_ ("0"b, edit_info_ptr, code);
		     if code ^= 0 then return;
		end;
		if current_length = 0 then s = "s";
		else if current_length <= 4096 then s = ""; /* no. of characters in one record */
		else s = "s";
		call ioa_ ("""^a"" length = ^d words  (^d record^a)", current_name, divide (current_length, 4, 17),
		     divide (current_length + 4095, 4096, 17, 0), s);
	     end;

	     else if request = MERGE then do;
		if alter_length > 0 then call dfast_merge_ ("0"b, edit_info_ptr, code);
	     end;
	end;

	if code ^= 0 then call dfast_error_ (code, edit_name (request), (current_name));
	return;
     end dfast_edit_;
