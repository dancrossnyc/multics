/****^  *************************************************************************
        *                                                                       *
        * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */

/****^  HISTORY COMMENTS:
  1) change(1986-10-05,JMAthane), approve(1986-10-05,MCR7521),
     audit(1986-10-09,JPFauche), install(1986-11-12,MR12.0-1212):
     Pascal version for MR12.
  2) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

pascal_area_management_: proc;

/* PL/1 procedures and commands performing pascal area management */

/* Created J.M.Athane 03/20/80 */
/* Cleaned up command interface and messages 03/01/84 S. Herbst */

/*
   COMMANDS:

   pascal_create_area names {-control_args}
   pascal_delete_area names {-control_args}
   pascal_reset_area {names} {-control_args}
   pascal_area_status {names} {-control_args}

   SUBROUTINE ENTRY POINTS:

   pascal_area_management_$NEW
   pascal_area_management_$DISPOSE
   pascal_area_management_$RESET

   pascal_area_management_$pascal_area

*/

/* parameter structure for the different entry points */

	dcl     1 area_parameters	 aligned,
		2 block_ptr	 ptr,		/* prt to the block (input or output) */
		2 block_length	 fixed bin (35),	/* length of the block (input for NEW and DISPOSE) */
		2 area_structure_ptr ptr;		/* ptr to the concerned area structure */


/* external references to the MULTICS system */

	dcl     com_err_		 entry options (variable);
	dcl     com_err_$suppress_name entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (17), fixed bin (35));
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	dcl     dump_segment_	 entry (ptr, ptr, fixed bin, fixed bin (18), fixed bin (18), bit (*));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     decode_clock_value_$date_time entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (71), fixed bin, char (4), fixed bin (35));
	dcl     iox_$user_output	 ptr ext;
	dcl     object_info_$display	 entry (ptr, fixed bin (24), ptr, fixed bin (35));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
	dcl     signal_		 entry (char (*), ptr, ptr, ptr);
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));

	dcl     error_table_$badopt	 fixed bin (35) external;
	dcl     error_table_$segknown	 fixed bin (35) external;

/* external references to other pascal_ entry points */

	dcl     pascal_error_table_$bad_block_request ext fixed bin (35);
	dcl     pascal_error_table_$block_damage ext fixed bin (35);
	dcl     pascal_error_table_$block_length_error ext fixed bin (35);

/* (operator return entry points) */

	dcl     pascal_operators_$RESET_area_return entry;
	dcl     pascal_operators_$NEW_return entry;
	dcl     pascal_operators_$DISPOSE_return entry;

/* constants */

	dcl     init_size		 fixed bin int static options (constant) init (26);
						/* number of words used for area_segment initialization */
	dcl     seg_size		 fixed bin int static options (constant) init (255);
						/* number of pages available in a segment */

/* internal automatic */

	dcl     (month, dom, year, hour, minute, second, dow) fixed bin;
	dcl     microsecond		 fixed bin (71);
	dcl     bc		 fixed bin (24);
	dcl     pathname		 char (168) varying;
	dcl     (asp, seg_ptr)	 pointer;
	dcl     (seg, block, p1, p2, p3, p4, p5) ptr;
	dcl     code		 fixed bin (35);
	dcl     arg_count		 fixed bin;
	dcl     arg_len		 fixed bin (17);
	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     i			 fixed bin (35);
	dcl     1 command_switches,
		2 reset_sw	 bit (1) unal,
		2 brief_sw	 bit (1) unal,
		2 arg_err		 bit (1) unal,
		2 trace_sw	 bit (1) unal,
		2 all_sw		 bit (1) unal,
		2 dump_sw		 bit (1) unal,
		2 size_sw		 bit (1) unal,
		2 default_sw	 bit (1) unal,
		2 status_sw	 bit (1);
	dcl     (j, k)		 fixed bin (35);
	dcl     (dir_name, dn)	 char (168);
	dcl     pdn_count		 fixed bin;
	dcl     (entryname, en)	 char (32);
	dcl     free_words		 float bin;
	dcl     max_alloc		 fixed bin (35);
	dcl     new_size		 fixed bin (35);
	dcl     arg_ptr		 ptr;
	dcl     round_length	 fixed bin (35);
	dcl     string_length	 fixed bin (21);
	dcl     reference		 fixed bin (71);
	dcl     total_length	 fixed bin (35);
	dcl     1 my_object_info	 like object_info;
	dcl     owner_ptr		 ptr;
	dcl     area_count		 fixed bin (35);
	dcl     1 area_id		 (64),
		2 given_path	 char (256) var,
		2 dir		 char (168) var,
		2 entry		 char (32) var,
		2 u_id		 fixed bin (71);
	dcl     me		 char (32) var;
						/* based */

	dcl     1 block_header	 aligned based,	/* area block header */
		2 previous_free	 bit (18) unal,	/* offset of the previous free block in the segment
						   ("0"b if not any, "11...111"b if the block is full) */
		2 previous_block	 bit (18) unal,	/* offset of previous block in the segment ("0"b if none) */
		2 used		 fixed bin (18) unsigned unal, /* length requested (and used) in the block */
		2 length		 fixed bin (18) unsigned unal, /* length in words of the block */
		2 alloc_time	 fixed bin (71) unal; /* system clock at allocation */

	dcl     1 seg_header	 aligned based,	/* header of a pascal area segment */
		2 first_free_block,			/* first free block (empty) */
		  3 ff1		 bit (72) unal,	/* header info */
		  3 ff2		 bit (72) unal,	/* clock */
		2 control_block,
		  3 cb1		 bit (72) unal,	/* header info */
		  3 cb2		 bit (72) unal,	/* clock */
		  3 control_info,
		    4 label	 char (4),	/* must be "area" */
		    4 last_free	 bit (18) unal,	/* offset of last free block of the segment ("0"b if none) */
		    4 key		 bit (18) unal,	/* key */
		    4 asp_	 ptr,		/* ptr to area structure */
		    4 next_seg	 ptr,		/* ptr to the next created segment (null if none) */
		    4 previous_seg	 ptr,		/* ptr to the previously created area seg (null if none) */
		    4 last_block_ptr ptr;		/* ptr ot the last block of the area seg */

	dcl     offset_f		 fixed bin (18) unsigned unal based;

	dcl     1 word		 based,
		2 bits		 bit (35) unal,
		2 bit_0		 bit (1) unal;

	dcl     1 free_block_header	 based,
		2 relps		 bit (36) unal,
		2 free_length	 fixed bin (35);

	dcl     1 area		 like pascal_operators_statics_$areas based (asp);

/* builtins */

	dcl     (addr, addrel, baseno, clock, fixed, index, max, min) builtin;
	dcl     (mod, null, ptr, rel, rtrim, size, stackframeptr, substr) builtin;
%page;
NEW: entry (area_parameters) options (support);

/* uses :
   - block_ptr : (output) addr of the requested block (null if area full)
   - block_length : (input) length in words of the requested block (>0)

   /* Allocates a block in the pascal area.
   As long as it is possible NEW allocates a block after the last allocated one
   (area length increases until it reaches area.area_size pages).
   When it is no more possible, NEW sets the bit area.new_warning and edits a message (if requested)
   ("Warning: NEW uses now free blocks list") and uses the eventually
   free blocks list (it will take a longer time).
   The address of the first block whose length is superior or equal to the
   desired length is returned. (a free block of the eventually remaining
   free length is created if necessary).
   The beginning of a block is always at a double_word boundary.
   If no sufficient place was found, null pointer is returned.
*/


	asp = area_structure_ptr;

	if (block_length > (seg_size * 1024 - init_size)) /* check */
	     | (block_length <= 0) then do;
		code = pascal_error_table_$bad_block_request;
		go to error_while_NEW;
	     end;

	round_length = block_length;
	if addr (round_length) -> bit_0 = "1"b then round_length = round_length + 1;
	total_length = round_length + size (block_header);

/* create the first area seg */

	if area.area_ptr = null then do;
		call create_area_seg;
		if code ^= 0 then go to error_while_NEW;
		area.area_ptr = seg;

		if block -> free_length >= round_length then do;
			if block -> free_length > total_length then do;
				p1 = addrel (block, total_length);
				p1 -> free_length = block -> free_length - total_length;
				p1 -> previous_block = rel (block);
				seg -> last_free, seg -> last_block_ptr -> previous_block = rel (p1);
				block -> free_length = round_length;
			     end;
			else
			     seg -> last_free = "0"b;
			go to new_return;
		     end;
		else do;
			block_ptr = null;
			call pascal_operators_$NEW_return;
		     end;
	     end;

/* try to fill the current segment */

	seg = area.area_ptr;

fill_last:

	block = ptr (seg, seg -> last_free);

	if block -> free_length >= round_length then do;
		if (block -> previous_free >= block -> previous_block) /* check */
		     | (block -> previous_block >= rel (block))
		     | (block -> used ^= 0) then do;
			code = pascal_error_table_$block_damage;
			go to error_while_NEW;
		     end;
		p2 = addrel (block, block -> free_length + size (block_header));
		if p2 ^= seg -> last_block_ptr then call set_new_warning;
		if block -> free_length > total_length then do;
			p1 = addrel (block, total_length);
			p1 -> previous_block = rel (block);
			p1 -> free_length = block -> free_length - total_length;
			p1 -> previous_free = block -> previous_free;
			seg -> last_free, p2 -> previous_block = rel (p1);
			block -> free_length = round_length;
		     end;
		else do;
			seg -> last_free = block -> previous_free;
		     end;
		area.area_ptr = seg;
		go to new_return;
	     end;

/* scan the next area seg if any */

	if seg -> next_seg = null then
	     if area.area_size > (seg_size * area.nbr_of_area_segs) then do;
		     call create_area_seg;
		     if code ^= 0 then go to error_while_NEW;
		end;
	     else go to look_at_free_list;
	else
	     seg = seg -> next_seg;
	go to fill_last;

/* examine now the free blocks list */

look_at_free_list:
	do while (block -> free_length < round_length);
	     if block -> previous_free = "0"b then do;
		     if seg -> previous_seg = null then do;
			     block_ptr = null;	/* not found ! */
			     call pascal_operators_$NEW_return;
			end;
		     seg = seg -> previous_seg;
		     p1 = null;
		     block = ptr (seg, seg -> last_free);
		end;
	     else do;
		     p1 = block;
		     block = ptr (block, block -> previous_free);
		end;
	end;

/* free block found ! */

	if (block -> previous_free >= block -> previous_block) /* check */
	     | (block -> previous_block > rel (block))
	     | (block -> used ^= 0) then do;
		code = pascal_error_table_$block_damage;
		go to error_while_NEW;
	     end;

	call set_new_warning;

	if block -> free_length < total_length then do;
		if p1 = null then
		     seg -> last_free = block -> previous_free;
		else
		     p1 -> previous_free = block -> previous_free;
	     end;
	else do;
		p3 = addrel (block, block -> free_length + size (block_header));
		p2 = addrel (block, total_length);
		if p1 = null then
		     seg -> last_free = rel (p2);
		else
		     p1 -> previous_free = rel (p2);
		p2 -> previous_free = block -> previous_free;
		p2 -> free_length = block -> free_length - total_length;
		p2 -> previous_block = rel (block);
		p3 -> previous_block = rel (p2);
		block -> free_length = round_length;
	     end;
new_return:
	block -> previous_free = "111111111111111111"b;
	block -> used = block_length;
	block -> alloc_time = clock;
	block_ptr = addrel (block, size (block_header));
	call pascal_operators_$NEW_return;

error_while_NEW:
	call ioa_$rsnnl ("^/pascal_area_management_: Error during NEW (^d words block request)",
	     pascal_operators_statics_$error_info.string, string_length, block_length);
	go to fatal_error;

set_new_warning: proc;

	if (area.new_warning = 0) & (pascal_operators_statics_$area_warnings = "1"b) then do;
		if area.unique_id = 0 then do;
			call com_err_ (0, "pascal_area_management_",
			     "Warning: NEW uses now the free blocks list.");
		     end;
		else do;
			call com_err_ (0, "pascal_area_management_",
			     "Warning: NEW for segment ^a uses now the free blocks list.", area.pathname);
		     end;
	     end;
	area.new_warning = 1;


	return;

     end set_new_warning;
%page;
DISPOSE: entry (area_parameters) options (support);

/* uses :
   - block_ptr : (input) ptr to the block to release
   - block_length : (input) length of the block to free (for checking)

   /* Releases the block.
   If previous or next block are free, concatenation is done.
   The new free block is inserted in the free blocks list.
*/

	block = addrel (block_ptr, -size (block_header));
	if (block -> previous_free ^= "111111111111111111"b) /* check */
	     | (block -> previous_block >= rel (block)) then do;
		code = pascal_error_table_$block_damage;
		go to error_while_DISPOSE;
	     end;
						/* error if given length is not the same */
	if block_length ^= block -> used then do;
		code = pascal_error_table_$block_length_error;
		go to error_while_DISPOSE;
	     end;

	block -> used = 0;
	seg = ptr (block, 0);
	p1 = ptr (seg, seg -> last_free);

/* if block is after the last free in the segment then it becomes the last_free */

	if rel (block) > (seg -> last_free) then
	     if seg -> last_free = block -> previous_block then do;
		     p1 -> free_length = (p1 -> free_length) + (block -> free_length) + size (block_header);
		     addrel (block, (block -> block_header.length) + size (block_header)) ->
			previous_block = rel (p1);
		end;
	     else do;
		     block -> previous_free = seg -> last_free;
		     seg -> last_free = rel (block);
		end;

/* else insert it in free blocks list */

	else do;
		p3 = addrel (block, (block -> free_length + size (block_header)));
		p2 = ptr (block, block -> previous_block);
		p5 = addrel (p3, p3 -> block_header.length + size (block_header));
		if p1 = p3 then
		     if p2 -> previous_free = "111111111111111111"b then do;
			     block -> free_length =
				(block -> free_length) + (p3 -> free_length) + size (block_header);
			     seg -> last_free = rel (block);
			     block -> previous_free = p3 -> previous_free;
			     p5 -> previous_block = rel (block);
			end;
		     else do;
			     p2 -> free_length = (p2 -> free_length) + (block -> free_length) +
				(p3 -> free_length) + (2 * size (block_header));
			     seg -> last_free = rel (p2);
			     p5 -> previous_block = rel (p2);
			end;
		else do;
			do while (rel (p1) > rel (p3));
			     p4 = p1;
			     p1 = ptr (p1, p1 -> previous_free);
			end;
			if p1 = p3 then
			     if p2 -> previous_free = "111111111111111111"b then do;
				     block -> free_length = (block -> free_length) +
					(p3 -> free_length) + size (block_header);
				     block -> previous_free = p3 -> previous_free;
				     p4 -> previous_free, p5 -> previous_block = rel (block);
				end;
			     else do;
				     p2 -> free_length = (p2 -> free_length) + (block -> free_length) +
					(p3 -> free_length) + (2 * size (block_header));
				     p4 -> previous_free, p5 -> previous_block = rel (p2);
				end;
			else
			     if p1 = p2 then do;
				p1 -> free_length =
				     (p1 -> free_length) + (block -> free_length) + size (block_header);
				p3 -> previous_block = rel (p1);
			     end;
			else do;
				p4 -> previous_free = rel (block);
				block -> previous_free = rel (p1);
			     end;
		     end;
	     end;

	if seg -> previous_seg ^= null then do;
		asp = seg -> asp_;
		if seg = area.area_ptr then
		     if (seg -> last_free = seg -> last_block_ptr -> previous_block)
			& (addr (seg -> last_free) -> offset_f = size (seg_header)) then
			area.area_ptr = seg -> previous_seg;
	     end;

	call pascal_operators_$DISPOSE_return;

error_while_DISPOSE:
	call ioa_$rsnnl ("^/pascal_area_management_: Error during DISPOSE of ^d words block at ^p",
	     pascal_operators_statics_$error_info.string, string_length, block_length, block_ptr);
	go to fatal_error;
%page;
RESET: entry (area_parameters) options (support);

/* uses :
   - block_ptr : (input) ptr to a block ;

   frees all the blocks allocated after (in time) the block pointed by block_ptr */

	block = addrel (block_ptr, -size (block_header));
	if (block -> previous_block >= rel (block)) then do; /* check */
		code = pascal_error_table_$block_damage;
		go to error_while_RESET;
	     end;

	seg = ptr (block, 0);
	asp = seg -> asp_;

	if area.new_warning = 0 then do;		/* free blocks list has not been used for allocation */
		do while (seg ^= area.area_ptr);
		     p1 = ptr (area.area_ptr, size (seg_header));
		     area.area_ptr -> last_free = rel (p1);
		     area.area_ptr -> last_block_ptr -> previous_block = rel (p1);
		     p1 -> previous_free = "0"b;
		     p1 -> free_length =
			fixed (rel (area.area_ptr -> last_block_ptr), 35) - size (seg_header) - size (block_header);
		     area.area_ptr = area.area_ptr -> previous_seg;
		end;
		p1 = ptr (seg, seg -> last_free);

		do while (rel (p1) > rel (block));
		     p1 = ptr (p1, p1 -> previous_free);
		end;

		if rel (p1) = block -> previous_block then do;
			block = ptr (block, block -> previous_block);
		     end;
		else do;
			block -> previous_free = rel (p1);
		     end;

		seg -> last_free = rel (block);
		block -> free_length =
		     fixed (rel (seg -> last_block_ptr), 35) - fixed (rel (block), 35) - size (block_header);
		seg -> last_block_ptr -> previous_block = rel (block);
		if seg -> previous_seg ^= null then
		     if addr (seg -> last_free) -> offset_f = size (seg_header) then
			area.area_ptr = seg -> previous_seg;
	     end;
	else do;					/* free blocks list has been used to allocate blocks */
		reference = block -> alloc_time;
		seg = area.area_ptr;
		do while (seg ^= null);
		     p1 = seg -> last_block_ptr;
		     p4 = null;			/* p4 : last free encountered */
		     p5 = ptr (seg, seg -> last_free);	/* p5 : next free to encounter */
		     do while (p1 -> previous_block ^= "0"b);
			p2 = ptr (p1, p1 -> previous_block);
			if p2 = p5 then do;
				p5 = ptr (p5, p5 -> previous_free);
				p3 = ptr (p2, p2 -> previous_block);
				if p3 -> alloc_time < reference then do;
					p4 = p2;
					p1 = p3;
					go to end_loop;
				     end;
				p2 = p3;
			     end;
			else do;
				if p2 -> alloc_time < reference then do;
					p1 = p2;
					go to end_loop;
				     end;
			     end;
free_loop:
			p3 = ptr (p2, p2 -> previous_block);
			if p3 = p5 then do;
				p5 = ptr (p5, p5 -> previous_free);
				p2 = p3;
				go to free_loop;
			     end;
			if p3 -> alloc_time >= reference then do;
				p2 = p3;
				go to free_loop;
			     end;
			p2 -> free_length = fixed (rel (p1), 35) - fixed (rel (p2), 35) - size (block_header);
			p2 -> previous_free = rel (p5);
			if p4 ^= null then p4 -> previous_free = rel (p2);
			else seg -> last_free = rel (p2);
			p4 = p2;
			p1 -> previous_block = rel (p2);
			p1 = p3;
end_loop:
		     end;
		     if seg -> previous_seg ^= null then
			if seg = area.area_ptr then
			     if (seg -> last_free = seg -> last_block_ptr -> previous_block) &
				(addr (seg -> last_free) -> offset_f = size (seg_header)) then
				area.area_ptr = seg -> previous_seg;
		     seg = seg -> previous_seg;
		end;
	     end;

	call pascal_operators_$RESET_area_return;

error_while_RESET:
	call ioa_$rsnnl ("^/pascal_area_management_: Error during RESET of pascal area at ^p ",
	     pascal_operators_statics_$error_info.string, string_length, block_ptr);
	go to fatal_error;
%page;
pascal_create_area: entry;

/* PASCAL_CREATE_AREA COMMAND */

	me = "pascal_create_area";

	command_switches = "0"b;
	new_size = 255;
	area_count = 0;

	call cu_$arg_count (arg_count);
	if arg_count = 0 then do;
print_pca_usage:
		call com_err_$suppress_name (0, me, "Usage:  pascal_create_area names {-control_args}");
		return;
	     end;

	do i = 1 to arg_count;
	     call cu_$arg_ptr ((i), arg_ptr, arg_len, code);
	     if code ^= 0 then go to some_pca_error;
	     if index (arg, "-") = 1 then do;		/* control arg */
		     if (arg = "-brief") | (arg = "-bf") then brief_sw = "1"b;
		     else if (arg = "-long") | (arg = "-lg") then brief_sw = "0"b;
		     else if (arg = "-size") | (arg = "-sz") then do;
			     if i = arg_count then do;
				     call com_err_ (0, me, "No value specified for -size");
				     return;
				end;
			     i = i + 1;
			     call cu_$arg_ptr ((i), arg_ptr, arg_len, code);
			     if code ^= 0 then go to some_pca_error;
			     new_size = cv_dec_check_ (arg, code);
			     if code ^= 0 then do;
				     call com_err_ (code, me, "Invalid integer value for -size: ^a", arg);
				     arg_err = "1"b;
				end;
			     else if (new_size <= 0) | (new_size > 99999) then do;
				     call com_err_ (0, me, "Value of -size must be between 1 and 99999.");
				     arg_err = "1"b;
				end;
			end;
		     else do;
			     call com_err_ (error_table_$badopt, me, "^a", arg);
			     arg_err = "1"b;
			end;
		end;
	     else do;				/* name */
		     call get_object_info;
		     if code ^= 0 then arg_err = "1"b;
		end;
	end;

	if arg_err then go to abort_pca;

	if area_count = 0 then go to print_pca_usage;

	do i = 1 to 64;
	     asp = addr (pascal_operators_statics_$areas (i));
	     do j = 1 to area_count;
		if u_id (j) = area.unique_id then do;
			if ^brief_sw then
			     call com_err_ (0, me, "Private area already exists for ^a",
				pathname_ ((dir (j)), (entry (j))));
			u_id = -1;		/* remove this request */
		     end;
	     end;
	end;

	j = 63;
	do i = 1 to area_count;
	     if u_id (i) ^= -1 then do;
		     do while (pascal_operators_statics_$areas (j).unique_id ^= -1);
			j = j - 1;
		     end;
		     if j = 0 then do;
			     call com_err_ (0, me, "Maximum number of Pascal areas is 64.");
			     do k = 1 to area_count;
				if u_id (k) ^= -1 then
				     call com_err_ (0, me, "Cannot create private area for ^a", given_path (k));
			     end;
			     return;
			end;
		     asp = addr (pascal_operators_statics_$areas (j));
		     area.unique_id = u_id (i);
		     u_id (i) = -1;			/* forget it */
		     area.pathname = dir (i) || ">" || entry (i);
		     area.area_size = new_size;
		     area.area_ptr = null;
		     area.new_warning = 0;
		     if ^brief_sw then
			call ioa_ ("^a: Creating private area for ^a", me, area.pathname);
		end;
	end;

	call adjust_area_info;

	return;

some_pca_error:
	call com_err_ (code, me, "");

abort_pca:
	call ioa_ ("^a: No private areas created.", me);

	return;
%page;
pascal_delete_area: entry;

/* PASCAL_DELETE_AREA COMMAND */

	me = "pascal_delete_area";

	command_switches = "0"b;
	area_count = 0;

	call cu_$arg_count (arg_count);
	if arg_count = 0 then do;
print_pda_usage:
		call com_err_$suppress_name (0, me, "Usage:  pascal_delete_area names {-control_args}");
		return;
	     end;
	do i = 1 to arg_count;
	     call cu_$arg_ptr ((i), arg_ptr, arg_len, code);
	     if code ^= 0 then go to some_pda_error;
	     if index (arg, "-") = 1 then do;		/* control arg */
		     if (arg = "-brief") | (arg = "-bf") then brief_sw = "1"b;
		     else if (arg = "-long") | (arg = "-lg") then brief_sw = "0"b;
		     else do;
			     call com_err_ (error_table_$badopt, me, "^a", arg);
			     arg_err = "1"b;
			end;
		end;
	     else do;				/* name */
		     call get_object_info;
		     if code ^= 0 then arg_err = "1"b;
		end;
	end;

	if arg_err then go to abort_pda;

	if area_count = 0 then go to print_pda_usage;

	do i = 1 to area_count;
	     do j = 1 to 63;
		asp = addr (pascal_operators_statics_$areas (j));
		if area.unique_id = u_id (i) then do;

/* Make sure the segment owning the area isn't active on the stack */

			call expand_pathname_ ((asp -> area.pathname), dn, en, code);
			if code = 0 then do;
				call initiate_file_ (dn, en, "0"b, seg_ptr, 0, 0);
				call terminate_file_ ((seg_ptr), 0, "0010"b, 0);
				if seg_ptr ^= null then do;

					do sp = stackframeptr () repeat (sp -> stack_frame.prev_sp) while (sp ^= null);
					     if baseno (sp -> stack_frame.entry_ptr) = baseno (seg_ptr) then do;
						     call com_err_ (0, me,
							"Program ^a is active; its areas will not be deleted.",
							area_id (i).given_path);
						     go to exit;
						end;
					end;
				     end;
			     end;

			area.unique_id = -1;
			if ^brief_sw then
			     call ioa_ ("^a: Deleting private area for ^a", me, area.pathname);
			go to exit;
		     end;
	     end;
	     if ^brief_sw then
		call com_err_ (0, me, "Private area for ^a does not exist.", given_path (i));
exit:
	end;

	call adjust_area_info;

	return;

some_pda_error:
	call com_err_ (code, me, "");

abort_pda:
	call ioa_ ("^a: No private Pascal areas deleted.", me);

	return;
%page;
pascal_reset_area: entry;

/* PASCAL_RESET_AREA COMMAND */

	me = "pascal_reset_area";

	command_switches = "0"b;
	area_count = 0;
	reset_sw = "1"b;
	new_size = 255;

	call cu_$arg_count (arg_count);

	do i = 1 to arg_count;
	     call cu_$arg_ptr ((i), arg_ptr, arg_len, code);
	     if code ^= 0 then go to some_pra_error;
	     if index (arg, "-") = 1 then do;		/* control arg */
		     if arg = "-size" | arg = "-sz" then do;
			     if i = arg_count then do;
				     call com_err_ (0, me, "No value specified for -size");
				     return;
				end;
			     i = i + 1;
			     call cu_$arg_ptr ((i), arg_ptr, arg_len, code);
			     if code ^= 0 then go to some_pca_error;
			     new_size = cv_dec_check_ (arg, code);
			     if code ^= 0 then do;
				     call com_err_ (code, me, "Invalid integer value for -size: ^a", arg);
				     arg_err = "1"b;
				end;
			     else if (new_size <= 0) | (new_size > 99999) then do;
				     call com_err_ (0, me, "Value for -size must be between 1 and 99999.");
				     arg_err = "1"b;
				end;
			     else size_sw = "1"b;
			end;
		     else if (arg = "-all") | (arg = "-a") then
			all_sw = "1"b;
		     else if arg = "-default" then default_sw = "1"b;
		     else do;
			     call com_err_ (error_table_$badopt, me, "^a", arg);
			     arg_err = "1"b;
			end;
		end;
	     else do;				/* name */
		     call get_object_info;
		     if code ^= 0 then arg_err = "1"b;
		end;
	end;

	if arg_err then go to abort_pra;

	if area_count = 0 then default_sw = "1"b;

	if all_sw then
	     do i = 64 to 1 by -1;
		call area_actions (i);
	     end;
	else do;
		if default_sw then
		     call area_actions (64);		/* default area */
		do i = 1 to area_count;
		     do j = 1 to 63;
			asp = addr (pascal_operators_statics_$areas (j));
			if area.unique_id = u_id (i) then do;
				call area_actions (j);
				go to skip_3;
			     end;
		     end;
		     call com_err_ (0, me, "Private area for ^a does not exist.",
			given_path (i));
skip_3:
		end;
	     end;

	return;

some_pra_error:
	call com_err_ (code, me, "");

abort_pra:
	call ioa_ ("^a: No Pascal areas reset.", me);
	return;
%page;
pascal_area_status: entry;

/* PASCAL_AREA_STATUS_COMMAND */

	me = "pascal_area_status";

	command_switches = "0"b;
	area_count = 0;
	brief_sw = "1"b;

	call cu_$arg_count (arg_count);

	do i = 1 to arg_count;
	     call cu_$arg_ptr ((i), arg_ptr, arg_len, code);
	     if code ^= 0 then go to some_pas_error;
	     if index (arg, "-") = 1 then do;		/* control arg */
		     if (arg = "-all") | (arg = "-a") then
			all_sw = "1"b;
		     else if (arg = "-brief") | (arg = "-bf") then
			brief_sw = "1"b;
		     else if (arg = "-default") then
			default_sw = "1"b;
		     else if (arg = "-dump") then
			dump_sw = "1"b;
		     else if (arg = "-long") | (arg = "-lg") then
			brief_sw = "0"b;
		     else if (arg = "-no_dump") then
			dump_sw = "0"b;
		     else if (arg = "-no_status") | (arg = "-nst") then
			status_sw = "0"b;
		     else if (arg = "-no_trace") then
			trace_sw = "0"b;
		     else if (arg = "-status") | (arg = "-st") then
			status_sw = "1"b;
		     else if arg = ("-trace") then
			trace_sw = "1"b;
		     else do;
			     call com_err_ (error_table_$badopt, me, "^a", arg);
			     arg_err = "1"b;
			end;
		end;
	     else do;				/* name */
		     call get_object_info;
		     if code ^= 0 then arg_err = "1"b;
		end;
	end;

	if arg_err then go to abort_pas;

	if (^status_sw) & (^trace_sw) & (^dump_sw) then
	     status_sw = "1"b;
	if (^all_sw) & (area_count = 0) then
	     default_sw = "1"b;

	if all_sw then
	     do i = 64 to 1 by -1;
		call area_actions (i);
	     end;
	else do;
		if default_sw then
		     call area_actions (64);		/* default area */
		do i = 1 to area_count;
		     do j = 1 to 63;
			asp = addr (pascal_operators_statics_$areas (j));
			if area.unique_id = u_id (i) then do;
				call area_actions (j);
				go to skip_2;
			     end;
		     end;
		     call com_err_ (0, me, "Private area for ^a does not exist.",
			given_path (i));
skip_2:
		end;
	     end;


	return;

some_pas_error:
	call com_err_ (code, me, "");

abort_pas:
	return;
%page;
adjust_area_info: proc;
	do i = 1 to 64;
	     asp = addr (pascal_operators_statics_$areas (i));
	     if area.unique_id ^= -1 then go to exit_3;
	end;
exit_3:
	pascal_operators_statics_$area_operators_info.nbr_of_areas = 65 - i;
	pascal_operators_statics_$area_operators_info.last_structure_offset = 50 * (i - 1);

	return;

     end adjust_area_info;
%page;
area_actions: proc (index);

	dcl     index		 fixed bin (35);

	asp = addr (pascal_operators_statics_$areas (index));

	if area.unique_id = -1 then return;

	call free_compute (free_words, max_alloc);

	if status_sw | trace_sw | dump_sw then
	     if area.unique_id = 0 then
		call ioa_ ("Pascal standard area:");
	     else
		call ioa_ ("Private area for segment ^a:", area.pathname);

	if status_sw then
	     call ioa_ ("     Size: ^d pages of 1024 words, free: ^6.2f%, new: ^d words max",
		area.area_size, free_words, max_alloc);

	if dump_sw | trace_sw then
	     if area.area_ptr = null then
		call ioa_ (
		     "^-(Empty area - no segs allocated).");

	if dump_sw then
	     if area.area_ptr ^= null then do;
		     call ioa_ ("area.area_ptr = ^p", area.area_ptr);
		     seg = area.area_ptr;
		     do while (seg -> previous_seg ^= null);
			seg = seg -> previous_seg;
		     end;
		     do while (seg ^= null);
			call dump_segment_ (iox_$user_output, seg, 0, 0, seg_size * 1024, "10001000000"b);
			seg = seg -> next_seg;
		     end;
		end;

	if trace_sw then do;
		if free_words ^= 100 then do;
			seg = area.area_ptr;
			do while (seg -> previous_seg ^= null);
			     seg = seg -> previous_seg;
			end;
			do while (seg ^= null);
			     call hcs_$fs_get_path_name (seg, dir_name, pdn_count, entryname, code);
			     if code ^= 0 then go to command_error;
			     call ioa_ ("^-Segment ^a", pathname_ (dir_name, entryname));
			     p1 = ptr (seg, size (seg_header));
			     if brief_sw then
				call ioa_ ("   Block addr  Alloc time    Length in words");
			     do while (p1 ^= seg -> last_block_ptr);
				if brief_sw then do;
					call decode_clock_value_$date_time ((p1 -> alloc_time), month, dom,
					     year, hour, minute, second, microsecond, dow, "", code);
					call ioa_ ("   ^11p^16t^[^d^d.^d.^d^30t^d^;   ^s^s^s^sfree    ^30t^s^d", p1, p1 -> previous_free = "111111111111111111"b,
					     hour, minute, second, microsecond / 1000, p1 -> used, p1 -> block_header.length);
				     end;
				else do;
					call ioa_ ("^/   . at ^p ^[free ^]block of ^d words ^[, ^d words used:^/^]",
					     addrel (p1, size (block_header)),
					     p1 -> previous_free ^= "111111111111111111"b,
					     p1 -> block_header.length,
					     p1 -> previous_free = "111111111111111111"b, p1 -> used);
					if ^brief_sw then
					     if p1 -> previous_free = "111111111111111111"b then do;
						     call dump_segment_ (iox_$user_output,
							addrel (p1, size (block_header)), 0, 0,
							fixed (p1 -> used, 18), "10001000000"b);
						end;
				     end;
				p1 = addrel (p1, p1 -> block_header.length + size (block_header));
			     end;
			     seg = seg -> next_seg;
			end;
		     end;
	     end;

	if reset_sw then do;
		if area.area_ptr ^= null then do;
			begin;
			     dcl	   segs_ptr	      (area.nbr_of_area_segs) ptr;
			     p1 = area.area_ptr;
			     do while (p1 -> next_seg ^= null);
				p1 = p1 -> next_seg;
			     end;
			     do i = 1 to area.nbr_of_area_segs;
				segs_ptr (i) = p1;
				p1 = p1 -> previous_seg;
			     end;
			     call release_temp_segments_ ("pascal_area_management_", segs_ptr, code);
			     if code ^= 0 then go to command_error;
			end;
			area.area_ptr = null;
			area.nbr_of_area_segs = 0;
			area.new_warning = 0;
		     end;
	     end;

	if size_sw then do;
		if ^reset_sw then do;
			if free_words ^= 100 then do;
				call com_err_ (0, "pascal_area",
				     "Pascal area is not empty; size modification is not allowed.");
				return;
			     end;
		     end;
		area.area_size = new_size;
	     end;

	return;

command_error:
	call com_err_ (code, me, "");
	return;

     end area_actions;
%page;
get_object_info: proc;

	call expand_pathname_ (arg, dir_name, entryname, code);
	if code ^= 0 then do;
		call com_err_ (code, me, "^a", arg);
		return;
	     end;
	pathname = pathname_ (dir_name, entryname);

	call hcs_$initiate_count (dir_name, entryname, "", bc, 0, owner_ptr, code);
	if (code ^= 0) & (code ^= error_table_$segknown) then do;
		call com_err_ (code, me, "^a", pathname);
		return;
	     end;
	my_object_info.version_number = object_info_version_2;
	call object_info_$display (ptr (owner_ptr, 0), bc, addr (my_object_info), code);
	if code ^= 0 then do;
		call com_err_ (code, me, "^a", pathname);
		return;
	     end;
	area_count = area_count + 1;
	if area_count > 63 then do;
		code = 1;
		call com_err_ (0, me, "Only 63 private areas can be specified.");
		return;
	     end;
	area_id (area_count).given_path = arg;
	area_id (area_count).dir = rtrim (dir_name);
	area_id (area_count).entry = rtrim (entryname);
	area_id (area_count).u_id = my_object_info.compile_time;

     end get_object_info;
%page;
free_compute: proc (alloc_rate, max_alloc);

	dcl     alloc_rate		 float bin;
	dcl     max_alloc		 fixed bin (35);

	dcl     total_segs		 fixed bin (35);
	dcl     (free, total)	 fixed bin (35);
	dcl     i			 fixed bin;

	if area.area_ptr = null then do;
		alloc_rate = 100;
		max_alloc = min (area.area_size, seg_size) * 1024 - init_size;
	     end;
	else do;
		max_alloc = 0;
		free = 0;
		total_segs = ((area.area_size - 1) / seg_size) + 1;
		total = (area.area_size * 1024) - (total_segs * init_size);
		if total_segs > area.nbr_of_area_segs then do;
			free = total - (area.nbr_of_area_segs * (seg_size * 1024 - init_size));
			i = total_segs - area.nbr_of_area_segs;
			if i = 1 then
			     max_alloc = mod (area.area_size, 255) * 1024 - init_size;
			else
			     max_alloc = 255 * 1024 - init_size;
		     end;

		seg = area.area_ptr;
		do while (seg -> next_seg ^= null);
		     seg = seg -> next_seg;
		end;
read_seg:
		p1 = ptr (seg, seg -> last_free);
read_list:
		free = free + p1 -> block_header.length;
		max_alloc = max (p1 -> block_header.length, max_alloc);
		if p1 -> previous_free ^= "0"b then do;
			p1 = ptr (p1, p1 -> previous_free);
			go to read_list;
		     end;
		if seg -> previous_seg ^= null then do;
			seg = seg -> previous_seg;
			go to read_seg;
		     end;
		alloc_rate = free / total * 100;
	     end;

     end free_compute;
%page;
create_area_seg: proc;

	dcl     nbr_of_words	 fixed bin (35);

	call get_temp_segment_ ("pascal_area_management_", seg, code);
	if code ^= 0 then return;

	seg -> ff1 = "0"b;
	seg -> cb1 = "111111111111111111000000000000000000000000000000001010000000000000001010"b;
						/* info block is 10 words long */
	seg -> label = "area";
	seg -> asp_ = asp;
	seg -> next_seg = null;
	seg -> previous_seg = area.area_ptr;
	addr (seg -> last_free) -> offset_f = size (seg_header);
	if area.area_ptr ^= null then area.area_ptr -> next_seg = seg;
	area.nbr_of_area_segs = area.nbr_of_area_segs + 1;
	block = ptr (seg, size (seg_header));
	block -> previous_block = rel (addr (seg -> cb1));
	if area.area_size >= (seg_size * area.nbr_of_area_segs) then do;
		seg -> last_block_ptr = ptr (seg, (seg_size * 1024 - size (block_header)));
		block -> free_length = (seg_size * 1024) - init_size;
	     end;
	else do;
		nbr_of_words = 1024 * (area.area_size - (seg_size * (area.nbr_of_area_segs - 1)));
		seg -> last_block_ptr = ptr (seg, (nbr_of_words - size (block_header)));
		block -> free_length = nbr_of_words - init_size;
	     end;

	p1 = seg -> last_block_ptr;
	p1 -> previous_free = "111111111111111111"b;
	p1 -> previous_block = seg -> last_free;
	p1 -> alloc_time = clock;
	seg -> ff2, seg -> cb2 = "0"b;

	return;

     end create_area_seg;
%page;
fatal_error:					/* fatal error is signalled */

	pascal_operators_statics_$error_info.status_code = code;

	call signal_ ("pascal_error", null, addr (pascal_operators_statics_$error_info), null);

fatal_loop:
	call signal_ ("illegal_return", null, addr (pascal_operators_statics_$error_info), null);
	go to fatal_loop;
%page;
%include object_info;
%page;
%include pascal_ops_statics;
%page;
%include stack_frame;


     end pascal_area_management_;
