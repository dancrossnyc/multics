/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        *********************************************************** */

bft_:
     proc ();

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,^indprocbody,initcol1,declareind8,dclind4,struclvlind3,comcol55 */

/* PROGRAM FUNCTION

This is the file that holds all of the Multics entrypoints.  These entrypoints
do nothing more than place the supplied arguments into a structure of the type
defined in bft_values.incl.pl1.  This is done so that only a pointer must be
passed between the two programs (this one and the bft_main_.pl1 program, which
holds all of the code for the minor capabilities).  This will only work because
these calls are guaranteed to be local (ie.  on Multics).  Once all of the
necessary information is written into the structure, the pointer to the
structure is converted to char and then passed to the minor capability as a
character string, and it us decoded back to a pointer there.  On return , each
entrypoint reassigns the passed error code to its parameter error_code so the
calling routine may use the information.
*/

/* NOTES
*/

/****^  HISTORY COMMENTS:
  1) change(86-07-22,Eichele), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(87-10-23,Flegel), approve(87-10-23,MCR7787),
     audit(88-01-27,RWaters), install(88-02-24,MR12.2-1028):
     Changed to work with multiple entries for queueing as well as adding a few
     new control arguments.
                                                   END HISTORY COMMENTS */

/* PARAMETERS */
dcl p_id_sw	       fixed bin parameter;	    /* Request ID type */
dcl p_id		       char (*) parameter;	    /* Request ID */
dcl p_priority	       fixed bin parameter;	    /* Transfer priority */
dcl p_flags	       bit (36) aligned parameter;  /* Transfer flags */
dcl p_arg_len	       fixed bin parameter;
dcl p_arg_ptr	       ptr parameter;
dcl p_data_block_ptr       ptr parameter;
dcl p_destination_filename char (*) var parameter;
dcl p_major_sender	       fixed bin parameter;
dcl p_mcb_ptr	       ptr parameter;
dcl p_minor_cap_no	       fixed bin parameter;
dcl p_source_filename      char (*) var parameter;
dcl p_code	       fixed bin (35) parameter;

/* MISC VARIABLES */
dcl dir_name	       char (168);		    /* Pathname */
dcl message	       char (256);
dcl bft_major	       fixed bin;
dcl bft_mcb	       ptr;
dcl bft_struct_ptr	       ptr;
dcl code		       fixed bin (35);
dcl command_id	       fixed bin;
dcl major_num	       fixed bin;

/* STRUCTURES */
dcl 01 bft_struct	       like bft_values_struct based (bft_struct_ptr);

/* SYSTEM CALLS */
dcl absolute_pathname_      entry (char(*), char(*), fixed bin(35));

/* SYSTEM CALL SUPPORT */

/* EXTERNAL CALLS */

/* EXTERNAL CALL SUPPORT */
dcl bft_error_table_$invalid_request_type  fixed bin(35) ext static;
dcl bft_error_table_$unexpected_minor_capability fixed bin (35) ext static;

/* BUILTINS */
dcl byte		       builtin;
dcl null		       builtin;
dcl addr		       builtin;
dcl length	       builtin;
dcl rtrim		       builtin;

/* CONDITIONS */
dcl cleanup	       condition;

/* CONSTANTS */

/**/

/* INITIALIZATION */

/* MAIN */

     return;

/**/

/* INTERNAL ENTRIES */


/* *** Entry: cancel - Internal entry for bft_  *** */

cancel:
     entry (p_id_sw, p_id, p_code);


/* ENTRY FUNCTION

Remove the specified request from the bft queues.
*/

/* NOTES
*/

     p_code = 0;

/* Fill out the message: ID_SW;ID; */

     
     if p_id_sw = BFT_TIME_ID | p_id_sw = BFT_PATH_ID | p_id_sw = BFT_ENTRY_ID then
	message = byte (p_id_sw) || DELIM_CHAR;
     else do;
	p_code = bft_error_table_$invalid_request_type;
	return;
     end;

     if p_id_sw = BFT_PATH_ID then do;
	call absolute_pathname_ (p_id, dir_name, p_code);
	if p_code ^= 0 then
	     return;
	message = rtrim (message) || rtrim (dir_name) || DELIM_CHAR;
     end;
     else
	message = rtrim (message) || rtrim (p_id) || DELIM_CHAR;

/* Execute bft_minor_$add_to_fetch_queue */

     bft_major = 0;
     call ws_$find_capability_number ("bft_main_", LOCAL_SYSTEM, bft_major,
	p_code);
     if p_code ^= 0 then
	return;

     call ws_$create_instance ("bft_", "process_event", BFT_INBUFFER_SIZE,
	BFT_OUTBUFFER_SIZE, null, bft_mcb, p_code);
     if p_code ^= 0 then
	return;

     call ws_$execute_capability (bft_major, bft_minor_$cancel_request,
	addr (message), length (rtrim (message)), bft_mcb, p_code);
     call ws_$destroy_instance (bft_mcb, (0));

     return;

/**/

/* *** Entry: process_event - Internal entry fo bft_ *** */

process_event:
     entry (p_minor_cap_no, p_major_sender, p_arg_ptr, p_arg_len, p_mcb_ptr,
	p_data_block_ptr);

/* ENTRY FUNCTION

This is the point where MOWSE will begin necessary execution.  There are no
minor capabilities defined other than those required by MOWSE.
*/

/* NOTES
*/

     bft_mcb = p_mcb_ptr;
     if (p_minor_cap_no > MAXIMUM_SYSTEM_MINOR) | (p_minor_cap_no < MINIMUM_SYSTEM_MINOR) then do;
	code = bft_error_table_$unexpected_minor_capability;
	return;
     end;

     if p_minor_cap_no ^= EXECUTE_COMMAND_REPLY then
	call minor_error (p_minor_cap_no);

     major_num = 0;
     code = 0;
     call ws_$find_capability_number ("bft_main_", LOCAL_SYSTEM, major_num, code);
     if code ^= 0 then
	call ws_$put_background_message (bft_mcb, 0, "bft_ ", "Error in loading BFT.");

     code = 0;
     call ws_$destroy_instance (bft_mcb, code);
     if code ^= 0 then do;
	call ws_$put_background_message (bft_mcb, 0, "bft_ ",
	     "BFT_ failed to properly destroy itself.");
	return;
     end;

     return;

/**/

/* *** Entry: fetch - Internal entry for bft_ *** */

fetch:
     entry (p_source_filename, p_destination_filename, p_flags, p_priority,
	p_code);

/* ENTRY FUNCTION

This entrypoint assembles the arguments and makes the proper call to 
bft_minor_$add_to_fetch_queue.
*/

/* NOTES
*/

     call add_to_queue (p_destination_filename, p_source_filename, p_flags,
	p_priority, bft_minor_$add_to_fetch_queue, p_code);

     return;

/**/

/* *** Entry: load - Internal entry for bft_ *** */

load:
     entry (p_code);

/* ENTRY FUNCTION

This entrypoint assembles the arguments and makes the proper call to bft_minor_
(main entrypoint).
*/

/* NOTES
*/

/* Allocate a structure where the arguments will be placed */

     on cleanup call clean_up ();

     call ws_$create_instance ("bft_", "process_event", BFT_INBUFFER_SIZE,
	BFT_OUTBUFFER_SIZE, null, bft_mcb, p_code);
     if p_code ^= 0 then
	return;

     call ws_$execute_command ("bft_main_", LOCAL_SYSTEM, command_id,
	bft_mcb, p_code);

     call ws_$destroy_instance (bft_mcb, (0));

     return;

/**/

/* *** Entry: recover_fetch - Internal entry for bft_ *** */

recover_fetch:
     entry (p_code);

/* ENTRY FUNCTION
                                                   
This entrypoint assembles the arguments and makes the proper call to
bft_minor_$recover_fetch
*/

/* NOTES
*/

/* Locate the bft_main_ capability */

     bft_major = 0;
     call ws_$find_capability_number ("bft_main_", LOCAL_SYSTEM, bft_major,
	p_code);
     if p_code ^= 0 then
	return;

/* Execute bft_minor_$recover_fetch */

     call ws_$create_instance ("bft_", "process_event", BFT_INBUFFER_SIZE,
	BFT_OUTBUFFER_SIZE, null, bft_mcb, p_code);
     if p_code ^= 0 then
	return;

     call ws_$execute_capability (bft_major, bft_minor_$recover_fetch,
	null, (0), bft_mcb, p_code);

     call ws_$destroy_instance (bft_mcb, (0));

     return;

/**/

/* *** Entry: recover_store - Internal entry for bft_ *** */

recover_store:
     entry (p_code);

/* ENTRY FUNCTION

This entrypoint assembles the arguments and makes the proper call to
bft_minor_$recover_store.
*/

/* NOTES
*/

/* Find the bft_main_ capability */

     major_num = 0;
     call ws_$find_capability_number ("bft_main_", LOCAL_SYSTEM,
	major_num, p_code);
     if p_code ^= 0 then
	return;

/* Execute bft_minor_$recover_store */

     call ws_$create_instance ("bft_", "process_event", BFT_INBUFFER_SIZE,
	BFT_OUTBUFFER_SIZE, null, bft_mcb, p_code);
     if p_code ^= 0 then
	return;

     call ws_$execute_capability (major_num, bft_minor_$recover_store,
	null, (0), bft_mcb, p_code);

     call ws_$destroy_instance (bft_mcb, (0));

     return;

/**/

/* *** Entry: store - Internal entry for bft_ *** */

store:
     entry (p_source_filename, p_destination_filename, p_flags, p_priority,
	p_code);

/* ENTRY FUNCTION

This entrypoint assembles the arguments and makes the proper call to
bft_minor_$add_to_store_queue.
*/

/* NOTES
*/

     call add_to_queue (p_source_filename, p_destination_filename, p_flags,
	p_priority, bft_minor_$add_to_store_queue, p_code);

     return;

/**/

/* *** Entry: unload - Internal entry for bft_ *** */

unload:
     entry (p_code);

/* ENTRY FUNCTION

This entrypoint assembles the arguments and makes the proper call to
TERMINATE_APPLICATION.
*/

/* NOTES
*/

/* Allocate the structure where the arguments will be placed */

     call ws_$create_instance ("bft_", "process_event", BFT_INBUFFER_SIZE,
	BFT_OUTBUFFER_SIZE, null, bft_mcb, p_code);
     if p_code ^= 0 then
	return;

     major_num = 0;
     call ws_$find_capability_number ("bft_main_", LOCAL_SYSTEM, major_num, p_code);
     if p_code ^= 0 then
	return;

     bft_major = major_num;
     call ws_$execute_capability (bft_major, bft_minor_$bft_shut_down,
	null, 0, bft_mcb, p_code);
     call ws_$destroy_instance (bft_mcb, (0));

     return;

/**/

/* INTERNAL PROCEDURES */


/* *** Procedure: add_to_queue - Internal proc for bft_  *** */

add_to_queue:
     proc (p_multics_path, p_pc_path, p_flags, p_priority, p_minor, p_code);


/* PROCEDURE FUNCTION

This procedure assembles the arguments for adding an element to either
the store or fetch queue.
*/

/* NOTES
*/


/* PARAMETERS */
dcl p_priority	       fixed bin parameter;	    /* Transfer priority */
dcl p_flags	       bit (36) aligned parameter;  /* Transfer modes */
dcl p_minor	       fixed bin parameter;	    /* Store or Fetch */
dcl p_pc_path	       char (*) var parameter;
dcl p_multics_path	       char (*) var parameter;
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl flags_over	       char (4) aligned based (addr (p_flags));  /* Character overlay of flags */
dcl mcb_ptr	       ptr;		    /* MOWSE control block */
dcl major_num	       fixed bin;		    /* Capability number */
dcl message	       char (256);		    /* Message to be sent */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

     p_code = 0;

/* Fill out the message: MULTICS_SOURCE;PC_SOURCE;FLAGS;PRIORITY; */

     message = rtrim (p_multics_path) || DELIM_CHAR;
     message = rtrim (message) || p_pc_path || DELIM_CHAR;
     message = rtrim (message) || flags_over || DELIM_CHAR;
     message = rtrim (message) || byte (p_priority);

     major_num = 0;
     call ws_$find_capability_number ("bft_main_", LOCAL_SYSTEM, major_num, p_code);
     if p_code ^= 0 then
	return;

/* Execute bft_minor_$add_to_fetch_queue */

     call ws_$create_instance ("bft_", "process_event", BFT_INBUFFER_SIZE,
	BFT_OUTBUFFER_SIZE, null, mcb_ptr, p_code);
     if p_code ^= 0 then
	return;

     call ws_$execute_capability (major_num, p_minor, addr (message),
	length (rtrim (message)), mcb_ptr, p_code);
     call ws_$destroy_instance (mcb_ptr, (0));

end add_to_queue;

/**/

/* *** Procedure: minor_error - Internal proc for bft_ *** */

minor_error:
     proc (p_minor_number);

/* PROCEDURE FUNCTION

This is called when one of the predefined minor capabilities is called that is
not expected.
*/

/* NOTES
*/

/* PARAMETERS */
dcl p_minor_number	       fixed bin parameter;

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

     call ws_$put_background_message (bft_mcb, 0, "BFT_ ",
	"Unexpected minor capability has been called.");

     end minor_error;

/**/

/* *** Procedure: clean_up - Internal proc for bft_ *** */

clean_up:
     proc ();

/* PROCEDURE FUNCTION

This cleanup handler frees up the space allocated in the system_free_area.
*/

/* NOTES
*/

/* PARAMETERS */

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

     if bft_struct_ptr ^= null then do;
	free bft_struct_ptr -> bft_struct;
	bft_struct_ptr = null;
     end;

     end clean_up;

/**/

/* INCLUDE FILES */
%include bft;
%include bft_values;
%include mowse_lib_dcls;
%include mowse;

     end bft_;
