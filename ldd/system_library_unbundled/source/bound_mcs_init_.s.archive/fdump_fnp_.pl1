/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


fdump_fnp_:
     proc (a_fnp_no, a_fnp_type, a_fnp_mem_size, entry_name, code);

/* This subroutine is called to create an fdump of an FNP that has crashed.
   *  It creates a segment in >dumps whose name is derived from the FNP tag
   *  and the date and time, and calls hphcs_$fdump_fnp to read all of FNP core
   *  into that segment.
   *
   *
   *  Written in summer 1976 by Robert Coren
   *  Modified 4/6/77 by Robert Coren to use privileged_make_seg_
   *  Modified 79 May 14 by Art Beattie to pass FNP type and memory size to hphcs_$fdump_fnp.
*/


/* PARAMETERS */

dcl a_fnp_no fixed bin;				/* FNP number (input) */
dcl a_fnp_mem_size fixed bin;				/* FNP memory size in 1024 18-bit words (INPUT) */
dcl a_fnp_type fixed bin;				/* FNP type (INPUT) */
dcl entry_name char (*);				/* entry name of created seg (OUTPUT) */
dcl code fixed bin (35);				/* status code (OUTPUT) */


/* ENTRIES */

dcl privileged_make_seg_ entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl system_privilege_$seg_priv_on entry (fixed bin (35));
dcl system_privilege_$seg_priv_off entry (fixed bin (35));
dcl hphcs_$fdump_fnp entry (fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl date_time_ entry (fixed bin (71), char (*));
dcl ioa_$rsnnl entry options (variable);
dcl hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl get_fnp_name_ entry (fixed bin) returns (char (32));

/* AUTOMATIC */

dcl date_string char (24);
dcl fnp_no fixed bin;
dcl fnp_mem_size fixed bin;
dcl fnp_type fixed bin;
dcl seg_ptr ptr;
dcl x fixed bin;					/* for length from ioa_$rsnnl, ignored */
dcl priv_code fixed bin (35);
dcl ignore fixed bin (35);


/* INTERNAL STATIC */

dcl DUMP_DIR char (6) int static options (constant) init (">dumps");


/* BUILTIN */

dcl (clock, null, rtrim, substr) builtin;


dcl cleanup condition;


	fnp_no = a_fnp_no;
	fnp_mem_size = a_fnp_mem_size;
	fnp_type = a_fnp_type;
	call date_time_ (clock (), date_string);

/* make entry name of the form fnp.T.MMDDYY.HHMM */

	call ioa_$rsnnl ("fnp.^a.^a^a^a.^a", entry_name, x, rtrim (get_fnp_name_ (fnp_no)), substr (date_string, 1, 2),
	     substr (date_string, 4, 2), substr (date_string, 7, 2), substr (date_string, 11, 4));

	call privileged_make_seg_ (DUMP_DIR, entry_name, "", 01010b, seg_ptr, code);
	if seg_ptr = null then return;		/* code tells why */

	call hphcs_$fdump_fnp (fnp_no, fnp_type, fnp_mem_size, seg_ptr, code);
	if code ^= 0 then return;

	priv_code = -1;
	on cleanup
	     begin;
		if priv_code = 0 then call system_privilege_$seg_priv_off (ignore);
	     end;

	call system_privilege_$seg_priv_on (priv_code);
	call hcs_$set_bc_seg (seg_ptr, 1024 * fnp_mem_size * 18, code);
	if priv_code = 0 then call system_privilege_$seg_priv_off (ignore);

	call hcs_$terminate_noname (seg_ptr, code);
	return;

     end;
