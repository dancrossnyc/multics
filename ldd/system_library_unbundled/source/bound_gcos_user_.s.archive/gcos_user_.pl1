/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* ********************************************************************
   *							*
   *	Modified by	R.H. Morrison	November 1974	*
   *							*
   ******************************************************************** */


gcos_user_: proc;

dcl  gcos_daemon_stat_$root_dir char (168) aligned ext;	/* directory containing gu table */
dcl  gcos_daemon_stat_$root_dir_len ext fixed bin;
	dcl
	(addr, index, null, substr) builtin,
	(i, j) fixed bin,
	(entry_gcos_account_id, insert_gcos_account_id) char (12),
	proc_id char (10) init ("gcos_user_"),
	bitcount fixed bin (24) init (0),
	clock_ entry () returns (fixed bin (71)),
	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
	hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35)),
	person char (22),
	project char (9),
	(error_table_$segknown) fixed bin (35) external,

	gut_index fixed bin,
	gut_code fixed bin (35),

	user_info_$whoami entry (char (*), char (*), char (*)),
	buffer char (32);

dcl  a_ptr ptr,
     a_index fixed bin,
     a_gaid char (12),
     a_code fixed bin (35);

dcl  fe_entry_sw bit (1) init ("0"b),
     fe_user_no fixed bin;

dcl  true bit (1) init ("1"b),
     false bit (1) init ("0"b);


%include gcos_user_table_;

/* argument processing */

/* * * * * * * * * * * * * * * * * * * */

add:	entry (a_ptr, a_code);

	if gutp = null then do;
	     call get_table_ (gutp, a_code);
	     if a_code ^= 0 then go to bad_gut_code;
	end;

	insert_gcos_account_id = a_ptr -> gute_gcos_account_id;

	if gut_active_count = 0 then do;
append:	     gut_active_count = gut_active_count + 1;
	     addr (gut_entry (gut_active_count)) -> gcos_user_table_entry_ =
	     a_ptr -> gcos_user_table_entry_;

	     go to gu_ret;
	end;

	else do i = 1 to gut_active_count;
	     entry_gcos_account_id = addr (gut_entry (i)) -> gute_gcos_account_id;
	     if entry_gcos_account_id > insert_gcos_account_id then go to insert;

	     if entry_gcos_account_id = insert_gcos_account_id then do;
		a_code = 5;
		go to bad_gut_code;
	     end;
	end;

	if gut_active_count < gut_max_count then go to append;
	else do;
	     a_code = 4;
	     go to bad_gut_code;
	end;

insert:	call move_entry_ (i, i+1, a_code);
	if a_code ^= 0 then go to bad_gut_code;

	addr (gut_entry (i)) -> gcos_user_table_entry_ = a_ptr -> gcos_user_table_entry_;
	go to gu_ret;

/* * * * * * * * * * * * * * * * * * * */

gu_ret:	
	bitcount = 36 * (gut_hdr_len + (gut_active_count * gut_entry_len));
	call hcs_$set_bc_seg (gutp, bitcount, a_code);

bad_gut_code:
gu_return:

	return;

/* * * * * * * * * * * * * * * * * * * */

move_entry_: proc (from_index, to_index, gut_code);

dcl (from_index, to_index) fixed bin,
     gut_code fixed bin (35),
     gut_index fixed bin,
     delta fixed bin,
     temp_count fixed bin;

	     temp_count = gut_active_count;
	     delta = to_index - from_index;

	     if from_index > to_index then do;
		do gut_index = from_index to temp_count;
		     gut_entry (to_index) = gut_entry (gut_index);
		     to_index = to_index + 1;
		end;
		gut_code = 0;
	     end;

	     else do;
		if gut_active_count + delta > gut_max_count then do;
		     gut_code = 4;
		     go to me_ret;
		end;

		do gut_index = (temp_count + delta) to to_index by -1;
						/* to_index = from_index + delta */
		     gut_entry (gut_index) = gut_entry (temp_count);
		     temp_count = temp_count - 1;
		end;

		gut_code = 0;
	     end;

	     gut_active_count = gut_active_count + delta;

me_ret:	     
	     return;
	end move_entry_;

/* * * * * * * * * * * * * * * * * * * */

get_table_: proc (gutp, gut_code);

dcl  gutp ptr,
     gut_code fixed bin (35);

	     gutp = null;
	     call hcs_$initiate_count (substr (gcos_daemon_stat_$root_dir, 1, gcos_daemon_stat_$root_dir_len),
	     "gcos_user_table_", "",
	     bitcount, 0, gutp, gut_code);
	     if (gut_code = 0 | gut_code = error_table_$segknown) then do;
		if bitcount ^= 0 then do;
		     call validate_table_ (gut_code);
		     if gut_code ^= 0 then gutp = null;
		end;
		else gut_code = 0;
	     end;

gt_ret:	     
	     return;
	end get_table_;

/* * * * * * * * * * * * * * * * * * * */

validate_table_: proc (gut_code);

dcl  gut_code fixed bin (35);

	     if bitcount = (gut_hdr_len + (gut_active_count * gut_entry_len)) * 36 then do;
		gut_code = 0;
		go to vt_ret;
	     end;
	     else gut_code = 3;

vt_ret:	     
	     return;
	end validate_table_;

/* * * * * * * * * * * * * * * * * * * */

init_table: entry (a_code);

	call get_table_ (gutp, gut_code);		/* force "get" for latest bitcount */
	if gut_code ^= 0 then do;
	     a_code = gut_code;
	     go to bad_gut_code;
	end;

	if bitcount ^= 0 then do;
	     a_code = 10;
	     go to bad_gut_code;
	end;

	gut_version_no = 1;
	gut_hdr_len = 128;				/* includes global_ctl_len */
	gut_global_ctl_len = 64;
	gut_entry_len = 32;
	gut_last_update = clock_ ();

	call user_info_$whoami (person, project, buffer);

	i = index (person, " ");
	if i = 0 then i = 22;
	else i = i - 1;
	j = index (project, " ");
	if j = 0 then j = 9;
	else j = j - 1;
	gut_updater_id = substr (person, 1, i) || "." || substr (project, 1, j);

	gut_max_count = 1000;
	gut_active_count = 0;
	gut_first_entry_index = 0;
	gut_last_entry_index = 0;

	gut_filler = 0;
	gut_global_ctl_filler = 0;
	a_code = 0;
	go to gu_ret;

/* * * * * * * * * * * * * * * * * * * */

find_entry: entry (a_gaid, a_index, a_ptr, a_code);	/* should be changed to eliminate parameter dependence */

	fe_entry_sw = true;

	if gutp = null then do;
	     call get_table_ (gutp, gut_code);
	     if gut_code ^= 0 then do;
		a_code = gut_code;
fe_not_found:	
		a_ptr = null;
		a_index = 0;
		go to fe_ret;
	     end;
	end;

fe_local_entry:
	a_code = 0;
	do gut_index = 1 to gut_active_count;
	     a_ptr = addr (gut_entry (gut_index));
	     if a_ptr -> gute_gcos_account_id = a_gaid then go to fe_ret;
	end;

	a_code = 1;
	a_ptr = null;
	gut_index = 0;

fe_ret:	
	if fe_entry_sw then do;
	     a_index = gut_index;
	     fe_entry_sw = false;
	     go to gu_return;
	end;

	else go to fe_user (fe_user_no);

/* * * * * * * * * * * * * * * * * * * */

validate: entry (a_gaid, a_ptr, a_code);

	if gutp = null then do;
	     call get_table_ (gutp, gut_code);
	     if gut_code ^= 0 then do;
		a_code = gut_code;
		go to bad_gut_code;
	     end;
	end;

	fe_user_no = 1;
	go to fe_local_entry;

fe_user (1):
	if a_code ^= 0 then go to vd_reject;

	if a_gaid ^= a_ptr -> gute_gcos_account_id then do;
	     a_code = 2;
vd_reject:     
	     a_ptr = null;
	     go to bad_gut_code;
	end;

	a_code = 0;
	go to gu_ret;

/* * * * * * * * * * * * * * * * * * * */

delete:	entry (a_gaid, a_index, a_code);

	if gutp = null then do;
	     call get_table_ (gutp, gut_code);
	     if gut_code ^= 0 then do;
		a_code = gut_code;
		go to bad_gut_code;
	     end;
	end;

	if gut_active_count = 0 then do;
	     a_code = 7;
	     go to bad_gut_code;
	end;

	if addr (gut_entry (a_index)) -> gute_gcos_account_id ^= a_gaid then do;
	     a_code = 1;
	     go to bad_gut_code;
	end;

	if a_index = gut_active_count then do;
	     gut_active_count = gut_active_count - 1;	/* don't bother calling move_entry */
	     go to gu_ret;
	end;

	call move_entry_ (a_index + 1, a_index, gut_code);
	if gut_code ^= 0 then do;
	     a_code = gut_code;
	     go to bad_gut_code;
	end;

	go to gu_ret;

/* * * * * * * * * * * * * * * * * * * */

get_table_ptr: entry (a_ptr, a_code);

	if gutp = null then do;
	     call get_table_ (gutp, gut_code);
	     if gut_code ^= 0 then do;
		a_ptr = null;
		a_code = gut_code;
		go to bad_gut_code;
	     end;
	end;

	a_ptr = gutp;
	a_code = 0;
	go to gu_return;

/* * * * * * * * * * * * * * * * * * * */

     end gcos_user_;
