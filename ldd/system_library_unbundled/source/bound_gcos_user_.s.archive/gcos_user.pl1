/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/*

	Modified:	R.H. Morrison	November 1974
	Modified: S.C. Akers	November 1981  Rewrite to support
					     more versatile ctl_args
					     and multiple IDs.

					     Change ios_ calls to
					     command_query_.

*/
%page;
gcos_user: proc;

/*
*****							*****
*****	At  present, this is not a legal entry point.  As time	*****
*****	goes by, it will become a legal entry.			*****
*****							*****
*/

	call com_err_ (error_table_$bad_command_name, proc_id);
	goto gu_ret;

/* * * * * * * * * * * * * * * * * * * */

add:	entry;					/* Add an entry */

	call gu_add;
	goto gu_ret;

/* * * * * * * * * * * * * * * * * * * */

delete:	entry;					/* Delete an entry */

	call gu_delete;
	goto gu_ret;

/* * * * * * * * * * * * * * * * * * * */

init_table: entry;					/* Build a new table */

	call gu_init;
	goto gu_ret;

/* * * * * * * * * * * * * * * * * * * */

print:	entry;					/* Print entry info */

	call gu_print;
	goto gu_ret;

/* * * * * * * * * * * * * * * * * * * */

gu_ret: ;

	return;
%page;
get_acct_id: proc;					/* Prompts user for account ID */

	legal_arg = "0"b;

	do   while (^legal_arg);
	     call command_query_ (info_ptr, answer, proc_id, "GCOS Account ID?");
	     if length (answer) > 12
	      | length (answer) < 1
	     then call ioa_ ("Account ID must be 1 to 12 characters.");
	     else if verify (answer, valid_chars) ^= 0
		then call ioa_ ("Account ID can contain only the following characters:^/""^a""",
			       valid_chars);
		else do;
		     legal_arg = "1"b;
		     gcos_account_id = answer;
		     end;
	     end;

	return;

end get_acct_id;
%page;
get_person_id: proc;				/* Prompt user for person ID */

	legal_arg = "0"b;

	do   while (^legal_arg);
	     call command_query_ (info_ptr, answer, proc_id, "Multics Person Name?");
	     if length (answer) > 23
	      | length (answer) < 1
	     then call ioa_ ("Person Name must be 1 to 23 characters.");
	     else do;
		legal_arg = "1"b;
		m_person = answer;
		end;
	     end;

	return;

end get_person_id;
%page;
get_project_id: proc;				/* Prompt user for project ID */

	legal_arg = "0"b;

	do   while (^legal_arg);
	     call command_query_ (info_ptr, answer, proc_id, "Multics Project ID?");
	     if length (answer) > 9
	      | length (answer) < 1
	     then call ioa_ ("Project ID must be 1 to 9 characters.");
	     else do;
		legal_arg = "1"b;
		m_project = answer;
		end;
	     end;

	return;

end get_project_id;
%page;
gu_add: proc;					/* Add an entry to the GCOS user table */

	call initializer;
	call get_acct_id;
	call get_person_id;
	call get_project_id;

	temp_entry_ptr -> gute_gcos_account_id	= gcos_account_id;
	temp_entry_ptr -> gute_multics_person	= m_person;
	temp_entry_ptr -> gute_multics_project	= m_project;
	temp_entry_ptr -> gute_ctl_filler	= 0;

	call gcos_user_$add (temp_entry_ptr, gut_code);
	if gut_code = 0
	then call ioa_ ("^a added to table", gcos_account_id);
	else call gu_error (gut);

	return;

end gu_add;
%page;
gu_delete: proc;					/* Delete an entry from the GCOS user table */

	call initializer;
	call cu_$arg_count (count);

	if count = 0
	then do;
	     gut_code = error_table_$noarg;
	     call gu_error (et);
	     end;
	else do i = 1 to count;
	     call cu_$arg_ptr (i, ptr, cc, gut_code);
	     if gut_code ^= 0
	     then do;
		call gu_error (et);
		end;
	     else do;
		gcos_account_id = arg;
		call gcos_user_$find_entry (gcos_account_id, gut_index, gutep, gut_code);

		if gut_code ^= 0
		then do;
		     if gut_code = 1
		      | gut_code = 9
		     then do;
			call com_err_ (0, proc_id,
				     """^a"" ^a", gcos_account_id,
				     gut_et (gut_code));
			end;
		     else call gu_error (gut);
		     end;

		else do;
		     call gcos_user_$delete (gcos_account_id, gut_index, gut_code);
		     if gut_code ^= 0
		     then call com_err_ (0, proc_id,
				     """^a"" ^a", gcos_account_id,
				     gut_et (gut_code));
		     end;
		end;
	     end;

	return;

end gu_delete;
%page;
gu_error: proc (which_error);					/* Prints error messages */

dcl  which_error	fixed bin parm;


	if gut_code <= gut_et_count
	 & which_error = gut
	then call com_err_ (0, proc_id, gut_et (gut_code));
	else call com_err_ (gut_code, proc_id);

	return;

end gu_error;
%page;
gu_init: proc;

	call initializer;
	call gcos_user_$init_table (gut_code);
	if gut_code ^= 0
	then call gu_error (gut);

	return;

end gu_init;
%page;
gu_print: proc;					/* Print requested user information */

	call initializer;
	call cu_$arg_count (count);

	if count = 0
	then call com_err_ (error_table_$noarg, proc_id);
	else do;
	     call cu_$arg_ptr (1, ptr, cc, gut_code);
	     if gut_code ^= 0
	     then call gu_error (et);

	     else do;

		if arg = "-header"
		 | arg = "-hdr"
		then do;
		     call print_gut_header;
		     if count > 1
		     then do;
			call cu_$arg_ptr (2, ptr, cc, gut_code);
			if gut_code ^= 0
			then call gu_error (et);

			else do;
			     if arg = "-gcos_account_id"
			      | arg = "-gaid"
			     then do;
				if count < 3
				then do;
				     gut_code = error_table_$noarg;
				     call gu_error (et);
				     end;
				else call print_entry_info (3);
				end;
			     end;
			end;
		     end;

		else if arg = "-gcos_account_id"
		      | arg = "-gaid"
		     then do;
			if count < 2
			then do;
			     gut_code = error_table_$noarg;
			     call gu_error (et);
			     end;
			else call print_entry_info (2);
			end;

		else call com_err_ (error_table_$badopt, proc_id,
				"^/""^a""", arg);
		end;
	     end;

	return;

end gu_print;
%page;
initializer: proc;

	buff_ptr = addr (buffer);			/* Initialize pointers */
	temp_entry_ptr = addr (temp_entry);
	info_ptr = addr (query_info);

	query_info.version = query_info_version_5;	/* Initialize query info */
	query_info.switches.yes_or_no_sw = "0"b;
	query_info.switches.suppress_name_sw = "1"b;
	query_info.switches.cp_escape_control = "10"b;
	query_info.switches.suppress_spacing = "0"b;
	query_info.status_code = 0;

	return;

end initializer;
%page;
print_entry_info: proc (starting_arg);				/* Prints information about
						   GCOS user table entries */

dcl  starting_arg fixed bin parm;

	do   i = starting_arg to count;
	     call cu_$arg_ptr (i, ptr, cc, gut_code);
	     if gut_code ^= 0
	     then call gu_error (et);
	     else do;
		if cc > 12
		then do;
		     call com_err_ (error_table_$bigarg, proc_id, arg);
		     end;

		else do;
		     if arg = "-hdr"
		     then call print_gut_header;
		     else do;
			gcos_account_id = arg;
			call gcos_user_$find_entry (gcos_account_id,
					        gut_index,
					        gutep, gut_code);

			if gut_code ^= 0
			then do;
			     if gut_code ^= 1
			     then call gu_error (gut);
			     call com_err_ (0, proc_id, "^a:""^a""", gut_et (1), gcos_account_id);
			     end;
			else do;

			     call ioa_ ("^/gut_entry:");
			     call ioa_ ("gute_gcos_account_id^1-^a",
				       gutep -> gute_gcos_account_id);
			     call ioa_ ("gute_multics_person^2-^a",
				       gutep -> gute_multics_person);
			     call ioa_ ("gute_multics_project^1-^a^/",
				       gutep -> gute_multics_project);
			     end;
			end;
		     end;
		end;
	     end;

	return;

end print_entry_info;
%page;
print_gut_header: proc;				/* Print header info from GCOS user table */

	gut_code = 0;

	if gutp = null
	then do;
	     call gcos_user_$get_table_ptr (gutp, gut_code);
	     if gut_code ^= 0
	     then call gu_error (gut);
	     end;
	if gut_code = 0
	then do;

	     call date_time_ (gut_last_update, date);
	     call ioa_ ("^/gut_header:");
	     call ioa_ ("gut_version_no^2-^d", gut_version_no);
	     call ioa_ ("gut_hdr_len^2-^d", gut_hdr_len);
	     call ioa_ ("gut_global_ctl_len^2-^d", gut_global_ctl_len);
	     call ioa_ ("gut_entry_len^2-^d", gut_entry_len);
	     call ioa_ ("gut_last_update^2-^a", date);
	     call ioa_ ("gut_updater_id^2-^a", gut_updater_id);
	     call ioa_ ("gut_max_count^2-^d", gut_max_count);
	     call ioa_ ("gut_active_count^2-^d^/", gut_active_count);
	     
	     end;

	return;

end print_gut_header;
%page;
dcl
     proc_id char (9) init ("gcos_user"),
     gcos_pswd char (12),
     m_person char (22),
     m_project char (9),
     date_time_ entry (fixed bin (71), char (*)),
     count fixed bin,
     gut_index fixed bin;

dcl  i fixed bin,
     gut_code fixed bin (35),
     ptr ptr,
     cc fixed bin,
     arg char (cc) based (ptr),
     gcos_account_id char (12),
     date char (24),
     valid_chars char (37) init (".0123456789abcdefghijklmnopqrstuvwxyz");

dcl  answer char (132) varying,
     legal_arg bit (1),
     info_ptr ptr;

dcl  buff_ptr ptr,
     buffer char (32);

dcl  (gut init(1),
      et  init(2)
     )		fixed bin internal static options (constant);

dcl  temp_entry_ptr ptr,
     temp_entry (32) fixed bin;			/* "32" MUST be changed if "gut_entry_len" is changed */

dcl (
     com_err_ entry options (variable),
     command_query_ entry options(variable),
     cu_$arg_count entry (fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     gcos_user_$add entry (ptr, fixed bin (35)),
     gcos_user_$delete entry (char (12), fixed bin, fixed bin (35)),
     gcos_user_$find_entry entry (char (12), fixed bin, ptr, fixed bin (35)),
     gcos_user_$get_table_ptr entry (ptr, fixed bin (35)),
     gcos_user_$init_table entry (fixed bin (35)),
     ioa_ entry() options(variable)

    )	external;

dcl (addr, null, substr, verify) builtin;

dcl (error_table_$noarg,
     error_table_$bigarg,
     error_table_$badopt,
     error_table_$bad_command_name) fixed bin (35) external;
%page;
%include gcos_user_table_;
%page;
%include gut_error_table_;
%page;
%include query_info;

/* * * * * * * * * * * * * * * * * * * */

end gcos_user;
