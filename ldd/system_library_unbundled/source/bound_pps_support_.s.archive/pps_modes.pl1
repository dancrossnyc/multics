/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


pps_modes: proc (iocb_ptr_arg, new_modes, old_modes, code);



/*		PARAMETERS		*/


dcl  code fixed bin (35);
dcl  iocb_ptr_arg ptr;
dcl  new_modes char (*);
dcl  old_modes char (*);


/*		ENTRY CONSTANTS		*/


dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  default_handler_$set entry (entry);
dcl  hcs_$reset_ips_mask entry (fixed bin (35), fixed bin (35));
dcl  hcs_$set_ips_mask entry (fixed bin (35), fixed bin (35));
dcl  pps_print$set_debug_sw entry (bit (1));


/*		EXTERNAL DATA		*/


dcl  error_table_$bad_mode fixed bin (35) ext;


/*		BUILTIN FUNCTIONS		*/


dcl  addr builtin;
dcl  divide builtin;
dcl  index builtin;
dcl  length builtin;
dcl  ltrim builtin;
dcl  substr builtin;
dcl  verify builtin;


/*		AUTOMATIC STORAGE		*/


dcl  bot_label_length fixed bin;
dcl  ctl_char bit (1);
dcl  debug bit (1);
dcl  esc bit (1);
dcl  indent fixed bin;
dcl  iocb_ptr ptr;
dcl  line_length fixed bin;
dcl  mask fixed bin (35);
dcl  no_print bit (1);
dcl  non_edited bit (1);
dcl  overflow_off bit (1);
dcl  page_length fixed bin;
dcl  physical_line_length fixed bin;
dcl  physical_page_length fixed bin;
dcl  sheets_per_page fixed bin;
dcl  single_page bit (1);
dcl  single_space bit (1);
dcl  stop_count fixed bin (71);
dcl  stop_every fixed bin;
dcl  top_label_length fixed bin;
dcl  truncate bit (1);


/*		CONSTANTS			*/




/*		INTERNAL STATIC		*/




/*		BASED VARIABLES		*/

	iocb_ptr = iocb_ptr_arg -> iocb.actual_iocb_ptr;
	ppsab_ptr = iocb.attach_data_ptr;
	code = 0;
	mask = 0;

	call default_handler_$set (Default_Condition_Handler);

	call Get_Old_Modes ();

	call Parse_New_Modes ();

	call Check_New_Modes ();

	call Set_New_Modes ();

	return;


bad_mode:

	code = error_table_$bad_mode;
	return;

Check_New_Modes: proc ();


	     if line_length > physical_line_length then goto bad_mode;

	     if indent >= line_length then goto bad_mode;

	     if overflow_off then do;
		top_label_length,
		     bot_label_length = 0;
		sheets_per_page = 1;
		page_length = physical_page_length - pps_pci.lpi;
	     end;
	     else sheets_per_page =
		divide (page_length+pps_pci.lpi-1+physical_page_length, physical_page_length, 17, 0);

	     return;


	end Check_New_Modes;

Get_Old_Modes: proc ();


dcl  oldm char (length (old_modes)) varying;
dcl  pic pic "zzzzzzz9";


	     indent = pps_pci.lmarg;
	     line_length = pps_pci.rmarg;
	     page_length = pps_pci.page_length;
	     physical_line_length = pps_pci.phys_line_length;
	     physical_page_length = pps_pci.phys_page_length;
	     non_edited = pps_pci.modes.non_edited;
	     overflow_off = pps_pci.modes.overflow_off ;
	     truncate = pps_pci.modes.truncate ;
	     single_space = pps_pci.modes.single_space ;
	     esc = ppsab.pps_pci.modes.esc;
	     ctl_char = ppsab.pps_pci.modes.ctl_char;
	     debug = ppsab.modes.debug;
	     top_label_length = pps_pci.top_label_length;
	     bot_label_length = pps_pci.bot_label_length;
	     stop_every = ppsab.stop_every;
	     stop_count = ppsab.stop_count;
	     single_page = ppsab.modes.single_page;
	     no_print = ppsab.modes.no_print;

	     if length (old_modes) <= 0 then return;

	     oldm = "";
	     if non_edited then oldm = oldm || "^edited,";
	     if overflow_off then oldm = oldm || "^endpage,";
	     if truncate then oldm = oldm || "^fold,";
	     if single_space then oldm = oldm || "^vertsp,";
	     if esc then oldm = oldm || "esc,";
	     if debug then oldm = oldm || "debug,";
	     if stop_every > 0 then do;
		pic = stop_every;
		oldm = oldm || "stop" || ltrim (pic) || ",";
	     end;
	     if indent > 1 then do;
		pic = indent;
		oldm = oldm || "in" || ltrim (pic) || ",";
	     end;
	     pic = line_length;
	     oldm = oldm || "ll" || ltrim (pic) || ",";
	     pic = page_length;
	     oldm = oldm || "pl" || ltrim (pic) || ",";
	     pic = physical_line_length;
	     oldm = oldm || "pll" || ltrim (pic) || ",";
	     pic = physical_page_length;
	     oldm = oldm || "ppl" || ltrim (pic);

	     old_modes = oldm;


	     return;


	end Get_Old_Modes;

Parse_New_Modes: proc ();


dcl  bitval bit (1);
dcl  i fixed bin;
dcl  l fixed bin;
dcl  mode char (32);


	     i = verify (new_modes, " ");
	     if i <= 0 then return;


	     do while (i <= length (new_modes));

		l = index (substr (new_modes, i), ",")-1;
		if l < 0 then l = length (new_modes)-i+1;

		if l > 0 then do;

		     if substr (new_modes, i, 1) = "^" then do;
			bitval = "0"b;
			i = i+1;
			if i > length (new_modes) then return;
			l = l-1;
			if l = 0 then goto bad_mode;
		     end;
		     else bitval = "1"b;

		     mode = substr (new_modes, i, l);
		     i = i+l+1;

		     if mode = "default" then do;
			overflow_off,
			     single_space,
			     non_edited,
			     truncate,
			     esc,
			     ctl_char,
			     no_print = "0"b;
			top_label_length,
			     bot_label_length = 0;
			physical_line_length = 132;	/* for 11 inch paper */
			physical_page_length = 58+6;	/* for 8.5 inch paper */
			line_length = physical_line_length;
			indent = 0;
			page_length = physical_page_length - pps_pci.lpi;
			stop_every,
			     stop_count = 0;
		     end;
		     else if mode = "edited" then non_edited = ^bitval;
		     else if mode = "non_edited" then non_edited = bitval;
		     else if mode = "endpage" then overflow_off = ^bitval;
		     else if mode = "noskip" then overflow_off = bitval;
		     else if mode = "fold" then truncate = ^bitval;
		     else if mode = "truncate" then truncate = bitval;
		     else if mode = "vertsp" then single_space = ^bitval;
		     else if mode = "single" then single_space = bitval;
		     else if mode = "esc" then esc = bitval;
		     else if mode = "debug" then debug = bitval;
		     else if mode = "1pg" then single_page = bitval;
		     else if mode = "print" then no_print = ^bitval;
		     else if substr (mode, 1, 4) = "stop" then do;
			stop_every = cv_dec_check_ (substr (mode, 5), code);
			stop_count = 0;
			if code ^= 0 then goto bad_mode;
		     end;
		     else if substr (mode, 1, 2) = "in" then do;
			indent = cv_dec_check_ (substr (mode, 3), code);
			if code ^= 0 then goto bad_mode;
		     end;
		     else if substr (mode, 1, 3) = "pll" then do;
			physical_line_length = cv_dec_check_ (substr (mode, 4), code);
			if code ^= 0 then goto bad_mode;
		     end;
		     else if substr (mode, 1, 3) = "ppl" then do;
			physical_page_length = cv_dec_check_ (substr (mode, 4), code);
			if code ^= 0 then goto bad_mode;
		     end;
		     else if substr (mode, 1, 2) = "ll" then do;
			line_length = cv_dec_check_ (substr (mode, 3), code);
			if code ^= 0 then goto bad_mode;
		     end;
		     else if substr (mode, 1, 2) = "pl" then do;
			page_length = cv_dec_check_ (substr (mode, 3), code);
			if code ^= 0 then goto bad_mode;
		     end;
		     else goto bad_mode;

		end;

	     end;


	     return;


	end Parse_New_Modes;

Set_New_Modes: proc ();


	     call hcs_$set_ips_mask (0, mask);

	     pps_pci.lmarg = indent;
	     pps_pci.rmarg = line_length;
	     pps_pci.page_length = page_length;
	     pps_pci.phys_line_length = physical_line_length;
	     pps_pci.phys_page_length = physical_page_length;
	     pps_pci.modes.non_edited = non_edited;
	     pps_pci.modes.overflow_off = overflow_off;
	     pps_pci.modes.truncate = truncate;
	     pps_pci.modes.single_space = single_space;
	     ppsab.pps_pci.modes.esc = esc;
	     ppsab.modes.debug = debug;
	     ppsab.stop_every = stop_every;
	     ppsab.stop_count = stop_count;
	     ppsab.modes.single_page = single_page;
	     ppsab.modes.no_print = no_print;

	     call hcs_$reset_ips_mask (mask, mask);


	     call pps_print$set_debug_sw (ppsab.modes.debug);


	     return;


	end Set_New_Modes;

/*

   Internal procedure to handle faults while IPS interrupts are masked. While not masked, any signals are simply
   passed on up the stack to their normal handlers. For a fault while masked, the process is terminated (with the
   reason "unable to do critical I/O") because the I/O control blocks are in an inconsistent state, and we can
   tolerate neither spawning a command loop with interrupts masked nor a restart with a possibly changed mask.

*/


Default_Condition_Handler: proc (p1, name, p2, p3, continue);


dcl  continue bit (1) aligned;
dcl  error_table_$unable_to_do_io fixed (35) ext;
dcl  name char (*);
dcl  p1 ptr;
dcl  p2 ptr;
dcl  p3 ptr;
dcl  terminate_process_ entry (char (*), ptr);

dcl 1 ti aligned,
    2 version fixed,
    2 code fixed (35);


	     if mask ^= 0 then do;
		ti.version = 0;
		ti.code = error_table_$unable_to_do_io;
		call terminate_process_ ("fatal_error", addr (ti));
	     end;
	     if name ^= "cleanup" then continue = "1"b;
	     return;


	end Default_Condition_Handler;

%include iocbv;
%include pps_attach_block;


     end pps_modes;
