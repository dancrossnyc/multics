/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


make_pps_tape: proc ();



/*		CONSTANTS			*/


dcl  ME char (13) static internal options (constant) init ("make_pps_tape");
dcl  silent bit(1) static internal options (constant) init("1"b);

	     

/*		AUTOMATIC			*/


dcl  arg_len fixed bin;
dcl  arg_no fixed bin;
dcl  arg_ptr ptr;
dcl  attach_arg_len fixed bin;
dcl  attach_arg_ptr ptr;
dcl  attach_desc_supplied bit (1);
dcl  bit_count fixed bin (24);
dcl  code fixed bin (35);
dcl  dir char (168);
dcl  ent char (32);
dcl  header_printed bit (1);
dcl  iocb_ptr ptr;
dcl  job_num fixed bin;
dcl  modestring char (256) varying;
dcl  modestring_next bit (1);
dcl  n_bytes fixed bin (21);
dcl  nargs fixed bin;
dcl  seg_ptr ptr;
dcl  target_switch_name char (19);


/*		BASED			*/


dcl  arg char (arg_len) based (arg_ptr);
dcl  attach_arg char (attach_arg_len) based (attach_arg_ptr);


/*		EXTERNAL ENTRIES		*/


dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin(35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  make_pps_tape$make_pps_tape ext;
dcl  unique_chars_ entry (bit (*)) returns (char (15));


/*	          CONDITIONS	          */

dcl  cleanup condition;


/*		ERROR CODES		*/


dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext;


/*		BUILTIN FUNCTIONS		*/


dcl  addr builtin;
dcl  divide builtin;
dcl  null builtin;

	code = 0;
	job_num = 1;
	iocb_ptr = null ();
	on cleanup call DETACH_PPS(silent);
	modestring = "";
	modestring_next = "0"b;
	header_printed = "0"b;
	target_switch_name = "PPS." || unique_chars_ ("0"b);


	call cu_$arg_count (nargs);
	call cu_$arg_ptr (2, attach_arg_ptr, attach_arg_len, code);
	if code ^= 0 then do;
USAGE:	     call com_err_ (code, ME,
		"^/Usage is:  make_pps_tape {-volume XX|-vol XX|-target_description XX|-tds XX} paths");
	     return;
	end;


	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME);
	     return;
	end;
	if arg = "-volume"
	| arg = "-vol"
	then attach_desc_supplied = "0"b;
	else if arg = "-target_description"
	| arg = "-tds"
	then attach_desc_supplied = "1"b;
	else do;
	     code = error_table_$badopt;
	     goto USAGE;
	end;


	call ATTACH_PPS ();
	if code ^= 0 then return;


	do arg_no = 3 to nargs while (code = 0);
	     call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "Error referencing argument #^d.", arg_no);
		return;
	     end;
	     call PRINT_ON_PPS ((arg_no >= nargs));
	end;


	call DETACH_PPS (^silent);


	return;

ATTACH_PPS: proc ();


	     if attach_desc_supplied then do;
		call iox_$attach_name (target_switch_name, iocb_ptr, attach_arg, addr (make_pps_tape$make_pps_tape),
		     code);
		if code ^= 0 then do;
		     call com_err_ (code, ME, "Error while attaching PPS tape.^/Attach description: ^a", attach_arg);
		     call DETACH_PPS(silent);
		     return;
		end;
	     end;
	     else do;
		call iox_$attach_name (target_switch_name, iocb_ptr, "pps_ -vol " || attach_arg,
		     addr (make_pps_tape$make_pps_tape), code);
		if code ^= 0 then do;
		     call com_err_ (code, ME, "Error while attaching PPS tape.^/Attach description: pps_ -vol ^a",
			attach_arg);
		     call DETACH_PPS(silent);
		     return;
		end;
	     end;

	     call iox_$open (iocb_ptr, 2, "0"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "Error attempting to open PPS file.");
		call DETACH_PPS(silent);
		return;
	     end;


	     return;


	end ATTACH_PPS;

DETACH_PPS: proc (quiet_sw);

dcl  quiet_sw bit(1),
     code fixed bin(35);

	  if iocb_ptr ^= null() then do;
	     call iox_$close (iocb_ptr, code);
	     if (code ^= 0  & ^quiet_sw) then
		call com_err_ (code, ME, "Error attempting to close PPS file.");

	     call iox_$detach_iocb (iocb_ptr, code);
	     if (code ^= 0  & ^quiet_sw) then
		call com_err_ (code, ME, "Error attempting to detach PPS file.");

	     call iox_$destroy_iocb(iocb_ptr, code);
	     end;
	
	return;


     end DETACH_PPS;

PRINT_ON_PPS: proc (last_request);


dcl  last_request bit (1);				/* ON => last request for this command invocation. */


	     call expand_pathname_ (arg, dir, ent, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "^a", arg);
		return;
	     end;

	     if ^header_printed then
		call ioa_ ("JOB #^-PATH");
	     header_printed = "1"b;

	     call hcs_$initiate_count (dir, ent, "", bit_count, 0, seg_ptr, code);
	     if seg_ptr = null () then do;
		call com_err_ (code, ME, "^a^[>^]^a", dir, (dir ^= ">"), ent);
		return;
	     end;
	     n_bytes = divide (bit_count, 9, 24, 0);

	     call iox_$put_chars (iocb_ptr, seg_ptr, n_bytes, code);
	     if code ^= 0 then
		call com_err_ (code, ME, "Error attempting to write to PPS file.");

	     call ioa_ ("^5d^-^a^[>^]^a", job_num, dir, (dir ^= ">"), ent);
	     job_num = job_num+1;

	     if ^last_request then do;
		call iox_$control (iocb_ptr, "new_report", null (), code);
		if code ^= 0 then
		     call com_err_ (code, ME,	"Error starting new report.");
	     end;

	     return;


	end PRINT_ON_PPS;


     end make_pps_tape;
