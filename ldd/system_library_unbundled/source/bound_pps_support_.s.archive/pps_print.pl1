/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


pps_print: proc (iocb_ptr, current_string, table_ptr, mvt_entry, code);



/*		PARAMETERS		*/


dcl  a_debug_sw bit (1);
dcl  code fixed bin (35);
dcl  current_string char (*);
dcl  iocb_ptr ptr;
dcl  mvt_entry entry (char (*), char (*)) variable;
dcl  table_ptr ptr;


/*		ENTRY CONSTANTS		*/


dcl  ioa_$nnl entry options (variable);
dcl  iox_$write_record entry (ptr, ptr, fixed bin (21), fixed bin (35));


/*		EXTERNAL DATA		*/




/*		BUILTIN FUNCTIONS		*/


dcl  addr builtin;
dcl  fixed builtin;
dcl  length builtin;
dcl  min builtin;
dcl  null builtin;
dcl  substr builtin;
dcl  unspec builtin;


/*		AUTOMATIC STORAGE		*/


dcl  curr_i fixed bin ;
dcl  current_string_len fixed bin;
dcl  hold_i fixed bin;
dcl  i fixed bin;
dcl  len fixed bin;
dcl  stop_index fixed bin;
dcl  temp_string char (133);

dcl 1 hex_data aligned,
    2 upper_bit bit (1) unal,
    2 digit (2) bit (4) unal;


/*		CONSTANTS			*/


dcl  HEX (0:15) char (1) static internal options (constant) init (
     "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");
dcl  OVERSTRIKE char (1) static internal options (constant) init ("+");


/*		INTERNAL STATIC		*/


dcl  debug_sw bit (1) static init ("0"b);
dcl  hold_string char (133) static;
dcl  hold_string_len fixed bin static;


/*		BASED VARIABLES		*/


dcl  table (0:127-32, 0:255) char (1) unal based (table_ptr);

	code = 0;


	if table_ptr = null () then do;
	     call mvt_entry (current_string, hold_string);
	     if ^debug_sw then
		call iox_$write_record (iocb_ptr, addr (hold_string), length (hold_string), code);
	     return;
	end;


	current_string_len = length (current_string);
	if current_string_len = 0 then goto no_overstrike;


	if substr (current_string, 1, 1) ^= OVERSTRIKE then do;
no_overstrike:
	     call Output ();
	     if code ^= 0 then return;
	     if current_string_len > 0 then do;
		call mvt_entry (current_string, hold_string);
	     end;
	     hold_string_len = current_string_len;
	     return;
	end;


	stop_index = min (current_string_len, hold_string_len);
	do i = 2 to stop_index;

	     hold_i = fixed (unspec (substr (hold_string, i, 1)), 9);
	     curr_i = fixed (unspec (substr (current_string, i, 1)), 9)-32;
	     if curr_i ^= 0 then
		substr (hold_string, i, 1) = table (curr_i, hold_i);

	end;


	if current_string_len > hold_string_len then do;
	     stop_index = stop_index+1;
	     len = current_string_len-hold_string_len;
	     call mvt_entry (substr (current_string, stop_index, len), temp_string);
	     substr (hold_string, stop_index, len) = substr (temp_string, stop_index, len);
	     hold_string_len = current_string_len;
	end;


	return;

init:	entry ();


	hold_string_len = 0;


	return;

flush:	entry (iocb_ptr, code);


	code = 0;
	call Output ();
	return;

set_debug_sw: entry (a_debug_sw);


	debug_sw = a_debug_sw;
	return;

Output:	proc ();


	     if hold_string_len = 0 then return;
	     if debug_sw then do;
		do i = 1 to length (hold_string);
		     unspec (hex_data) = unspec (substr (hold_string, i, 1));
		     call ioa_$nnl ("^[1^; ^]^a^a^x", hex_data.upper_bit, HEX (fixed (hex_data.digit (1), 4)), HEX (fixed (hex_data.digit (2), 4)));
		end;
		call ioa_$nnl ("^/");
	     end;
	     else call iox_$write_record (iocb_ptr, addr (hold_string), (length (hold_string)), code);
	     hold_string_len = 0;
	     return;


	end Output;



     end pps_print;
