/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


(subrg, size):
cv_ppscf: proc ();



/*		PARAMETERS		*/




/*		ENTRY CONSTANTS		*/


dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_hex_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_ppscf$cv_ppscf ext;
dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  get_pdir_ entry () returns (char (168));
dcl  ioa_ entry options (variable);
dcl  ioa_$ioa_stream entry options (variable);
dcl  ioa_$ioa_switch entry options (variable);
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));


/*		EXTERNAL DATA		*/


dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$end_of_info fixed bin (35) ext;
dcl  error_table_$long_record fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext;


/*		BUILTIN FUNCTIONS & CONDITIONS		*/


dcl  addr builtin;
dcl  fixed builtin;
dcl  hbound builtin;
dcl  length builtin;
dcl  ltrim builtin;
dcl  null builtin;
dcl  rtrim builtin;
dcl  search builtin;
dcl  size builtin;
dcl  substr builtin;
dcl  unspec builtin;
dcl  verify builtin;

dcl  cleanup condition;


/*		AUTOMATIC STORAGE		*/


dcl  X (20) fixed bin (8) unal;
dcl  arg_len fixed bin;
dcl  arg_ptr ptr;
dcl  code fixed bin (35);
dcl  default_char fixed bin;
dcl  dname char (168);
dcl  ename char (168);
dcl  error_flag bit (1);
dcl  hex_value fixed bin (35);
dcl  i fixed bin;
dcl  init bit (1) aligned;
dcl  input file;
dcl  input_i fixed bin;
dcl  input_iocb_ptr ptr;
dcl  input_l fixed bin;
dcl  input_line char (128);
dcl  j fixed bin;
dcl  line_num fixed bin;
dcl  list_flag bit (1);
dcl  list_iocb_ptr ptr;
dcl  listing output file;
dcl  long_flag bit (1);
dcl  me_ptr ptr;
dcl  n_hits fixed bin;
dcl  n_read fixed bin (21);
dcl  nargs fixed bin;
dcl  oc fixed bin (8) unal;
dcl  output output file;
dcl  output_iocb_ptr ptr;
dcl  pps (0:255) fixed bin (8) unal;
dcl  sort_iocb_ptr ptr;
dcl  source_name char (32) var;
dcl  source_path char (168) var;
dcl  space_char fixed bin;
dcl  sysprint print file;
dcl  table (0:127-32, 0:255) fixed bin (8) unal;
dcl  text_l fixed bin;
dcl  text_ptr ptr;
dcl  token_l fixed bin;
dcl  token_ptr ptr;
dcl  value fixed bin;
dcl  word_ptr ptr;
dcl  x fixed bin;

dcl 1 index_table,
    2 default_char fixed bin (8) unal,
    2 space_char fixed bin (8) unal,
    2 tab (0:255),
      3 ascii_char fixed bin (8) unal,
      3 pps_char fixed bin (8) unal;


dcl 1 sort_rec,
    2 key char (14) unal,
    2 value fixed bin (8) unal,
    2 nl char (1);


/*		CONSTANTS			*/


dcl  BS char (1) static internal options (constant) init ("");
dcl  ME char (8) static internal options (constant) init ("cv_ppscf");
dcl  NL char (1) static internal options (constant) init ("
");
dcl  WS char (4) static internal options (constant) init (" 	");

dcl  CODE_LINE (18) char (80) var static internal options (constant) init (
     "	epp1	ap|2,*		address of source string to pr1",
     "	epp3	ap|4,*		address of target string to pr3",
     "	ldx3	0,du		set x3 not to skip parent pointer if none",
     "	lxl2	ap|0		load argument list code value",
     "	canx2	=o000004,du	check for code 4 - no parent pointer",
     "	tnz	*+2		transfer if no parent pointer",
     "	ldx3	2,du		parent pointer - set x3 to skip it",
     "	lda	ap|6,x3*		load source string descriptor",
     "	ldq	ap|8,x3*		load target string descriptor",
     "	ana	mask		drop all but string size bits",
     "	anq	mask		ditto",
     "	even",
     "	mvt	(pr,rl),(pr,rl),fill(040)	translate ascii to ebcdic",
     "	desc9a	1|0,al		source string",
     "	desc9a	3|0,ql		target string",
     "	arg	mvtt",
     "	short_return		""exit",
     "mask:	oct	000077777777");


/*		INTERNAL STATIC		*/


dcl  db_sw bit (1) aligned static init ("0"b);


/*		BASED VARIABLES		*/


dcl  arg char (arg_len) based (arg_ptr);
dcl  input_array (128) char (1) unal based (addr (input_line));
dcl  text char (text_l) based (text_ptr);
dcl  token char (token_l) based (token_ptr);
dcl  word (6144) bit (36) aligned based (word_ptr);

	me_ptr = addr (cv_ppscf$cv_ppscf);


	call cu_$arg_count (nargs);
	if nargs < 1 then do;
	     code = error_table_$noarg;
	     call com_err_ (code, ME,
 "^/Usage is: cv_ppscf path {-list|-ls|-long|-lg}...");
	     return;
	end;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME);
	     return;
	end;
	call expand_pathname_$add_suffix (arg, "ppscf", dname, ename, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a", arg);
	     return;
	end;
	source_name = substr (ename, 1, length (rtrim (ename))-6);
	if dname = ">" then source_path = "";
	else source_path = rtrim (dname);
	source_path = source_path || ">" || source_name;


	list_flag = "0"b;
	long_flag = "0"b;
	do i = 2 to nargs;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "Referencing argument #^d.", i);
		return;
	     end;
	     if arg = "-list" | arg = "-ls" then list_flag = "1"b;
	     else if arg = "-long" | arg = "-lg" then long_flag = "1"b;
	     else do;
		code = error_table_$badopt;
		call com_err_ (code, ME, "^a", arg);
		return;
	     end;
	end;

	input_iocb_ptr = null ();
	output_iocb_ptr = null ();
	list_iocb_ptr = null ();
	sort_iocb_ptr = null ();

	on cleanup call CLEANUP ();

	call iox_$attach_name ("input", input_iocb_ptr, "vfile_ " || source_path || ".ppscf ", me_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Error attaching input stream.^/Attach description: ^a",
		"vfile_ " || source_path || ".ppscf");
	     return;
	end;
	call iox_$open (input_iocb_ptr, 1, "0"b, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a", "input");
	     call CLEANUP ();
	     return;
	end;

	call iox_$attach_name ("output", output_iocb_ptr, "vfile_ " || source_path || ".alm", me_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Error attaching output stream.^/Attach description: ^a",
		"vfile_ " || source_path || ".alm");
	     call CLEANUP ();
	     return;
	end;
	call iox_$open (output_iocb_ptr, 2, "0"b, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a", "output");
	     call CLEANUP ();
	     return;
	end;

	if list_flag then do;
	     call iox_$attach_name ("listing", list_iocb_ptr, "vfile_ " || source_path || ".ppsctl", me_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "Error attaching listing switch.^/Attach description: ^a",
		     "vfile_ " || source_path || ".ppsctl");
		call CLEANUP ();
		return;
	     end;
	     call iox_$open (list_iocb_ptr, 2, "0"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "^a", "listing");
		call CLEANUP ();
		return;
	     end;
	end;

	call iox_$attach_name ("sort", sort_iocb_ptr, "vfile_ " || rtrim (get_pdir_ ()) || ">sort", me_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Error attaching sort stream.^/Attach description: ^a",
		"vfile_ " || rtrim (get_pdir_ ()) || ">sort");
	     call CLEANUP ();
	     return;
	end;
	call iox_$open (sort_iocb_ptr, 2, "0"b, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a", "sort");
	     call CLEANUP ();
	     return;
	end;

	error_flag = "0"b;
	default_char = 0;
	line_num = 1;
	code = 0;
	do while (code ^= error_table_$end_of_info);
	     input_line = "";
	     call iox_$get_line (input_iocb_ptr, addr (input_line), length (input_line), n_read, code);
	     if code = error_table_$long_record then do;
		call ioa_$ioa_stream ("error_output", "ERROR ON LINE ^d^/The input line is too long.^/SOURCE:  ^a^/",
		     line_num, input_line);
		code = 0;
	     end;
	     else if code = 0 then do;
		if substr (input_line, n_read, 1) = NL then
		     n_read = n_read -1;
		if n_read > 0 then do;
		     call PROCESS_INPUT_LINE ();
		     if text_ptr ^= null () then
			call WRITE_INPUT_LINE ();
		end;
	     end;
	     else if code ^= error_table_$end_of_info then do;
		call com_err_ (code, ME, "Error on line number ^d while reading input file.", line_num);
		call CLEANUP ();
		return;
	     end;
	     line_num = line_num+1;
	end;

	if error_flag then goto FATAL;

	call SORT_INPUT ();

/*

   Initialize the tables involved.

*/


	do i = 0 to hbound (table, 1);
	     do j = 0 to hbound (table, 2);
		table (i, j) = default_char;
	     end;
	end;

	do i = 0 to hbound (pps, 1);
	     pps (i) = default_char;
	end;

	index_table.default_char = default_char;
	index_table.space_char = space_char;
	do i = 0 to hbound (index_table.tab, 1);
	     index_table.tab (i).ascii_char = -1;
	     index_table.tab (i).pps_char = -1;
	end;

	line_num = 0;
	n_hits = 0;


/*

   Now process the input file.

*/


	code = 0;

	do while (code ^= error_table_$end_of_info);

	     call GET_A_LINE ();

	     if code ^= error_table_$end_of_info then
		if x ^= 0 then
		     call PROCESS_A_LINE ();

	end;

	value = space_char;
	if ^SET_PPS (0) then;
	if ^SET_TABLE (0, (space_char)) then;

	if list_flag then
	     call ioa_$ioa_switch (list_iocb_ptr, "^d out of ^d table entries used.", n_hits, size (table)*4);
	if long_flag then
	     call ioa_ ("^d out of ^d table entries used.", n_hits, size (table)*4);


/*

   Now we have a completed table!  Create a source segment.

*/


	call ioa_$ioa_switch (output_iocb_ptr, "^-segdef^-^a_move^/^a_move:",
	     source_name, source_name);
	do i = 1 to hbound (CODE_LINE, 1);
	     call ioa_$ioa_switch (output_iocb_ptr, "^a", CODE_LINE (i));
	end;
	call ioa_$ioa_switch (output_iocb_ptr, "^/^-segdef^-^a_table^/^a_table:",
	     source_name, source_name);
	word_ptr = addr (table);
	do i = 1 to size (table) by 4;
	     call ioa_$ioa_switch (output_iocb_ptr, "^-oct^-^w,^w,^w,^w",
		word (i), word (i+1), word (i+2), word (i+3));
	end;
	call ioa_$ioa_switch (output_iocb_ptr, "^|mvtt:^-null");
	word_ptr = addr (pps);
	do i = 1 to size (pps) by 4;
	     call ioa_$ioa_switch (output_iocb_ptr, "^-oct^-^w,^w,^w,^w",
		word (i), word (i+1), word (i+2), word (i+3));
	end;
	call ioa_$ioa_switch (output_iocb_ptr, "^-end");


	if list_flag then
	     do i = 0 to hbound (index_table.tab, 1);
	     if index_table.tab (i).ascii_char = -1 then
		call ioa_$ioa_switch (list_iocb_ptr, "^d", i);
	     else call ioa_$ioa_switch (list_iocb_ptr, "^d^2x^a", i, ASCII_STRING ((i)));
	end;


FATAL:

	call CLEANUP ();


	return;

GET_A_LINE: proc ();


dcl  i fixed bin;
dcl  t_val bit (9) aligned;


	     x = 0;
	     call iox_$get_line (sort_iocb_ptr, addr (sort_rec), size (sort_rec)*4, n_read, code);
	     if code ^= 0 then do;
		if code = error_table_$end_of_info then return;
		call com_err_ (code, ME, "Error reading the sort file.");
		goto FATAL;
	     end;
	     line_num = line_num+1;
	     if db_sw then
		call ioa_ ("line number ^d = ""^a ^d""", line_num, ltrim (sort_rec.key, " "), sort_rec.value);

	     do i = 1 to length (sort_rec.key);
		t_val = unspec (substr (sort_rec.key, i, 1));
		if t_val ^= "0"b then do;
		     x = x+1;
		     X (x) = fixed (t_val) - 32;
		     if db_sw then
			call ioa_ ("X(^d)=^d", x, X (x));
		end;
	     end;
	     value = sort_rec.value;

	     return;


	end GET_A_LINE;

PROCESS_A_LINE: proc ();


	     if x = 1 then do;
		if ^SET_PPS (X (1)) then do;
		     call com_err_ (0, "create_table",
			"""^a"" character is already defined as ""^a"".",
			ASCII_CHAR (X (1)), ASCII_CHAR (pps (X (1))));
		     return;
		end;
		if ^SET_TABLE (X (1), pps (X (1)+32)) then do;
		     call com_err_ (0, "create_table",
			"itself overstruck with itself is not unique.",
			ASCII_CHAR (X (1)));
		     return;
		end;
	     end;
	     else do i = 1 to x;
		init = "0"b;
		do j = 1 to x;
		     if i ^= j then do;
			if ^init then do;
			     init = "1"b;
			     oc = pps (X (j)+32);
			     if oc = default_char then do;
				call com_err_ (0, "create_table",
				     "PPS character representation for ""^a"" is not yet defined.",
				     ASCII_CHAR (X (j)));
				return;
			     end;
			end;
			else do;
			     if table (X (j), oc) = default_char then do;
				call com_err_ (0, "create_table",
				     """^a"" overstruck with ""^a"" is not yet defined.",
				     ASCII_STRING ((oc)), ASCII_CHAR (X (j)));
				return;
			     end;
			     oc = table (X (j), oc);
			end;
		     end;
		end;
		if ^SET_TABLE (X (i), oc) then do;
		     call com_err_ (0, "create_table",
			"""^a"" overstruck with ""^a"" is not unique.",
			ASCII_STRING ((oc)), ASCII_CHAR (X (i)));
		     return;
		end;
		if ^SET_TABLE (X (i), (value)) then do;
		     call com_err_ (0, "create_table",
			"""^a"" overstruck with ""^a"" is not unique.",
			ASCII_STRING ((value)), ASCII_CHAR (X (i)));
		     return;
		end;
	     end;

	     return;


	end PROCESS_A_LINE;

ASCII_CHAR: proc (c_val) returns (char (1));


dcl  c_val fixed bin (8) unal;
dcl  collate builtin;



	     return (substr (collate (), (c_val+32+1), 1));

	end ASCII_CHAR;

ASCII_STRING: proc (pc) returns (char (*));


dcl  pc fixed bin (8) unal;


	     if index_table.tab (pc).pps_char = -1 then
		return (ASCII_CHAR (index_table.tab (pc).ascii_char));
	     else
	     return (ASCII_CHAR (index_table.tab (pc).ascii_char) || ASCII_STRING (index_table.tab (pc).pps_char));


	end ASCII_STRING;

SET_PPS:	proc (ascii_char) returns (bit (1));


dcl  ascii_char fixed bin (8) unal;


	     if pps (ascii_char+32) ^= default_char then
		if pps (ascii_char+32) = value then return ("1"b);
		else return ("0"b);

	     if db_sw then call ioa_ ("pps(^d)=^d", ascii_char+32, value);
	     pps (ascii_char+32) = value;
	     if index_table.tab (value).ascii_char = -1 then
		index_table.tab (value).ascii_char = ascii_char;
	     return ("1"b);


	end SET_PPS;

SET_TABLE: proc (ascii_char, pps_char) returns (bit (1));


dcl  ascii_char fixed bin (8) unal;
dcl  pps_char fixed bin (8) unal;


	     if table (ascii_char, pps_char) ^= default_char then
		if table (ascii_char, pps_char) = value then return ("1"b);
		else return ("0"b);

	     if db_sw then call ioa_ ("table(^d,^d)=^d", ascii_char, pps_char, value);
	     table (ascii_char, pps_char) = value;
	     n_hits = n_hits+1;
	     if index_table.tab (value).ascii_char = -1 then
		if index_table.tab (value).pps_char ^= value then do;
		     index_table.tab (value).ascii_char = ascii_char;
		     index_table.tab (value).pps_char = pps_char;
		end;
	     return ("1"b);


	end SET_TABLE;

CLEANUP:	proc ();


	     if input_iocb_ptr ^= null () then do;
		call iox_$close (input_iocb_ptr, code);
		call iox_$detach_iocb (input_iocb_ptr, code);
	     end;

	     if output_iocb_ptr ^= null () then do;
		call iox_$close (output_iocb_ptr, code);
		call iox_$detach_iocb (output_iocb_ptr, code);
	     end;

	     if list_iocb_ptr ^= null () then do;
		call iox_$close (list_iocb_ptr, code);
		call iox_$detach_iocb (list_iocb_ptr, code);
	     end;

	     if sort_iocb_ptr ^= null () then do;
		call iox_$close (sort_iocb_ptr, code);
		call iox_$detach_iocb (sort_iocb_ptr, code);
	     end;

	     return;


	end CLEANUP;

PROCESS_INPUT_LINE: proc ();


	     input_i = 1;
	     input_l = n_read;
	     token_ptr, text_ptr = null ();
	     if line_num = 1 then do;
		call GET_HEX ();
		default_char = hex_value;
		call GET_HEX ();
		space_char = hex_value;
	     end;
	     else do;
		call GET_HEX ();
		if token_ptr = null () then return;
		call GET_TEXT ();
		if text_ptr = null () then return;
		call SKIP_COMMENT ();
		if input_l ^= 0 then
		     call ioa_$ioa_stream ("error_output", "ERROR ON LINE ^d^/Extra text in input line.^/Source:  ^a",
		     line_num, input_line);
	     end;

	     return;


	end PROCESS_INPUT_LINE;

GET_HEX:	proc ();

	     call GET_TOKEN ();
	     if token_ptr = null () then do;
		call ioa_$ioa_stream ("error_output", "ERROR ON LINE ^d^/Missing hexidecimal value.^/SOURCE:  ^a",
		     line_num, input_line);
		hex_value = 0;
		return;
	     end;
	     hex_value = cv_hex_check_ (token, code);
	     if code ^= 0 then do;
		call ioa_$ioa_stream ("error_output", "ERROR ON LINE ^d^/Illegal hexidecimal value.^/SOURCE:  ^a",
		     line_num, input_line);
		hex_value = 0;
	     end;
	     if hex_value > fixed ("ff"b4) then do;
		call ioa_$ioa_stream ("error_output", "ERROR ON LINE ^d^/Hexidecimal value is too large.^/SOURCE:  ^a",
		     line_num, input_line);
		hex_value = 0;
	     end;
	     return;

	end GET_HEX;

SKIP_WS:	proc ();

dcl  i fixed bin;

	     i = verify (substr (input_line, input_i, input_l), WS)-1;
	     if i < 0 then do;
		input_i = input_l+1;
		input_l = 0;
	     end;
	     else do;
		input_i = input_i + i;
		input_l = input_l - i;
	     end;
	     return;

	end SKIP_WS;

GET_TOKEN: proc ();

	     if input_l > 0 then call SKIP_WS ();
	     if input_l <= 0 then do;
		token_ptr = null ();
		token_l = 0;
		return;
	     end;
	     token_ptr = addr (input_array (input_i));
	     token_l = search (substr (input_line, input_i, input_l), WS)-1;
	     if token_l < 0 then token_l = input_l;
	     input_i = input_i+token_l;
	     input_l = input_l - token_l;
	     return;

	end GET_TOKEN;

GET_TEXT:	proc ();

	     call GET_TOKEN ();
	     text_ptr = token_ptr;
	     text_l = token_l;
	     if text_ptr = null () then
		call ioa_$ioa_stream ("error_output", "ERROR ON LINE ^d^/Missing text.^/SOURCE:  ^a",
		line_num, input_line);
	     return;

	end GET_TEXT;

SKIP_COMMENT: proc ();

	     input_i = input_i+input_l+1;
	     input_l = 0;
	     return;

	end SKIP_COMMENT;

WRITE_INPUT_LINE: proc ();


dcl  i fixed bin;
dcl  temp char (128) var;


	     unspec (sort_rec) = "0"b;
	     nl = "
";
	     sort_rec.value = hex_value;

	     temp = "";
	     do i = 1 to length (text);
		if substr (text, i, 1) ^= BS then do;
		     if unspec (substr (text, i, 1)) < "040"b3 |
		     unspec (substr (text, i, 1)) > "177"b3 then
			call ioa_$ioa_stream ("error_output", "ERROR ON LINE ^d^/Illegal text character.  ""^a""^/SOURCE:  ^a",
			line_num, substr (text, i, 1), input_line);
		     else temp = temp || substr (text, i, 1);
		end;
	     end;
	     if temp = "" then return;

	     if length (temp) > length (key) then
		call ioa_$ioa_stream ("error_output", "ERROR ON LINE ^d^/Text is too long.  Limit is ^d characters.^/SOURCE:  ^a",
		line_num, length (key), input_line);
	     substr (sort_rec.key, length (sort_rec.key)-length (temp)+1) = temp;
	     if db_sw then
		call ioa_ ("keyline = ""^a ^d""", sort_rec.key, sort_rec.value);
	     call iox_$put_chars (sort_iocb_ptr, addr (sort_rec), size (sort_rec)*4, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "Error writing to sort file.");
		goto FATAL;
	     end;

	     return;


	end WRITE_INPUT_LINE;

SORT_INPUT: proc ();


	     call iox_$close (sort_iocb_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "Error closing sort file.");
		goto FATAL;
	     end;

	     call sort_seg (rtrim (get_pdir_ ())||">sort");
dcl  sort_seg entry (char (*));

	     call iox_$open (sort_iocb_ptr, 1, "0"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "Error reopening sort file.");
		goto FATAL;
	     end;

	     return;


	end SORT_INPUT;

debug:	entry ();


	db_sw = ^db_sw;
	call ioa_ ("debug switch is ^[on^;off^].", db_sw);
	return;



     end cv_ppscf;
