/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

%page;
/*
	WRITTEN BY:	P. Haber		MAR 21 74
	MODIFIED BY:	R.H. Morrison	MAY 22 74
					MAR    75
	MODIFIED BY:	Bob May		JUL 18 78 To allow IMCV tapes to use ***EOF
						cards  instead  of  $ENDJOB cards
						(see  GEIN PLM).  A dummy $ENDJOB
						card   is   written  to  the  JCL
						instead of the ***EOF card.

						Also  to  allow  placement of the
						$IDENT  card  anywhere in the job
						deck.  This change eliminated the
						use  of  the  "first_read" switch
						and    replaced    it   with   an
						"ident_found" switch.

	MODIFIED BY:	Scott C. Akers	MAR 30 82 To  give  operator  the option of
						resolving duplicate SNUMBs.

	MODIFIED BY:	Scott C. Akers	MAR 31 82	To use gcos_daemon_stat_$snumb

*/
%page;
gcos_read_: proc;

cards:	entry (a_urgency, a_input_ptr, a_abs_data_ptr, a_eof_found, a_code);

	reading_cards = "1"b;
	stream_name = "card_input";
	card_no = 1;				/* First card is snumb */

	go to COMMON;


tape:	entry (a_urgency, a_input_ptr, a_abs_data_ptr, a_eof_found, a_code);

	reading_cards = "0"b;
	stream_name = "tape_input";

COMMON:	;

	rh_ptr = addr (record_header);		/* pointer for looking at record header */
	sp = addr (status_stuff);			/* pointer to returned status from ios_ calls */

	on condition (cleanup)			/* establish cleanup condition handler */
	     call end_work;

	if ^initialized				/* first call */
	then do;					/* initialize internal directory info */
	     input_dir = substr (gcos_daemon_stat_$input_dir, 1, gcos_daemon_stat_$input_dir_len);
	     pool_dir = substr (gcos_daemon_stat_$pool_dir, 1, gcos_daemon_stat_$pool_dir_len);
	     root_dir_len = gcos_daemon_stat_$root_dir_len;
	     root_dir = substr (gcos_daemon_stat_$root_dir, 1, root_dir_len);
	     default_home_dir = substr (gcos_daemon_stat_$default_home_dir, 1,
		gcos_daemon_stat_$default_home_dir_len);
	     user_ring = fixed (get_ring_ (), 17);	/* set for effmode calls later */
	     abs_data_len = (fixed (rel (addr (a_abs_data_ptr -> abs_data.end_abs_data)), 17) -
		fixed (rel (addr (a_abs_data_ptr -> abs_data)), 17)) * 36; /* set abs data length */
	     my_name = get_group_id_$tag_star ();	/* remember proc id */
	     initialized = "1"b;
	end;

	abs_data_ptr = a_abs_data_ptr;
	data_blank = "0"b;				/* initialize absentee data */
	code = 0;					/* initialize internal error code */

	segment_name = "";				/* initialize internal variables */
	input_ptr = addr (input);
	ascii_ptr = addr (ascii);
	priority_queue = a_urgency;
	write_ptr = a_input_ptr;			/* first write is of bcd snumb card argument */
	write_size = 14;				/* = 14 36 bit words */

	segment_name = rtrim (gcos_daemon_stat_$snumb)||".*";  /* make star name */

	report_code = "0"b;				/* set record header for first write */
	media_code = "0010"b;			/* bcd image */

	do dir_name = input_dir, pool_dir;		/* check directories for similarly named segment */

	     call check_entry;			/* see if SNUMB is already on system */
	     if code ^= 0				/* error or SNUMB already exists */
	     then go to RETURN;

	end;

	segment_name = rtrim (gcos_daemon_stat_$snumb) || ".gcos"; /* set default segment name */

	call ios_$attach ("segment_output", "file_", segment_name, "w", status_stuff); /* attach segment */
	code = status.code;				/* check error code */
	if code ^= 0				/* error attaching segment */
	then do;
	     call com_err_ (code, "gcos_read_", "Error attaching to segment_output stream");
	     go to RETURN;
	end;
	else					/* no error */
	output_is_attached = "1"b;			/* for condition handler */

	call ios_$setsize ("segment_output", 36, status_stuff); /* set element size for writing */
	code = status.code;				/* check code */
	if code ^= 0				/* error setting size */
	then do;
	     call com_err_ (code, "gcos_read_", "Error setting element size on segment_output stream");
	     go to DETACH;
	end;

	call gcos_gsr_write_$gsr_write_init ("segment_output", code); /* initialize write package */
	if code ^= 0				/* error initializing write routine */
	then do;
	     call com_err_ (code, "gcos_read_",
			"Error in call to gsr_write_init: SNUMB = ^a",
			gcos_daemon_stat_$snumb);
	     go to DETACH;
	end;
	else					/* no error */
	gsr_write_init_called = "1"b;			/* remember it was called */

%page;

WRITE:

	call gcos_gsr_write_ ("segment_output", write_ptr, write_size, record_header, ejb_found, code);
						/* write the binary or bcd image */
	if code ^= 0				/* error writing */
	then do;
	     call com_err_ (code, "gcos_read_", "Error from gsr_write: SNUMB = ^a", gcos_daemon_stat_$snumb);
	     go to DETACH;
	end;

	if ejb_found				/* end of job found */
	then do;
	     gsr_write_init_called = "0"b;		/* ejb switch closed out file */
	     go to DETACH;
	end;

	dollar_card = "0"b;

	if reading_cards
	then do;

	     card_no = card_no + 1;			/* Keep count of cards read */
	     call ios_$read (stream_name, input_ptr, 0, 1, elements_read, status_stuff);
	     code = status.code;			/* check code */
	     if code ^= 0				/* error reading */
	     then do;
		call com_err_ (code, "gcos_read_", "Error reading from ^a:  SNUMB = ^a", stream_name, gcos_daemon_stat_$snumb);
		go to DETACH;
	     end;
	     if status.eof				/* last card and "last batch" button */
	     then do;
		call com_err_ (0, "gcos_read_", "Unexpected end of card input: SNUMB = ^a", gcos_daemon_stat_$snumb);
		code = 2;				/* fatal error */
		go to DETACH;
	     end;

	     write_ptr = input_ptr;			/* set pointer for writing */

	     if substr (input, 10, 3) ^= "101"b		/* check for non-binary card */
	     then do;

		call cv_bin_to_bcd_ (input_ptr, input_ptr, code); /* convert to bcd */
		if code ^= 0
		then do;
		     call com_err_ (0, "gcos_read_", "Error converting card ^i to bcd: SNUMB = ^a",
			card_no, gcos_daemon_stat_$snumb);
		     go to DETACH;
		end;

		write_size = 14;
		media_code = "0010"b;		/* bcd image */
		if substr (input, 1, 6) = "101011"b	/* "$" */
		then dollar_card = "1"b;
	     end;

	     else					/* binary image */
	     do;
		media_code = "0001"b;
		write_size = 27;
	     end;

	     report_code = "0"b;

	end;

	else					/* reading from tape */
	do;

	     if eof_found				/* error, attempt to read past eof */
	     then do;
		call com_err_ (0, "gcos_read_", "Unexpected eof on tape: SNUMB = ^a", gcos_daemon_stat_$snumb);
		code = 2;				/* return fatal error */
		go to DETACH;
	     end;

	     call gcos_gsr_read_ (stream_name, write_ptr, write_size, record_header, eof_found, code);
	     if code ^= 0				/* error reading from tape */
	     then do;
		call com_err_ (code, "gcos_read_", "Error from gcos_gsr_read_, SNUMB = ^a", gcos_daemon_stat_$snumb);
		go to DETACH;
	     end;

/* BCD */
	     if media_code = "0010"b			/* bcd card */

/* $ */
	     then if first_bcd_char = "101011"b		/* = $ */
		then dollar_card = "1"b;

/* ***EOF */
		else if substr (tape_input_record, 1, 36) = "545454254626"b3
		then do;
		     substr (tape_input_record, 1, 252) = (42) "20"b3; /* init bcd string to blanks, in two parts, */
		     substr (tape_input_record, 253, 252) = (42) "20"b3; /* to get around PL/I restriction */
		     substr (tape_input_record, 1, 126) =
			"532020202020202545244146222020545454254626"b3; /* "$      ENDJOB  ***EOF" */
		     ejb_found = "1"b;		/* same as for $ENDJOB */
		     go to WRITE;
		end;


	end;

	if dollar_card				/* image is a $ card image */
	then do;

	     call cv_bcd_to_ascii_ (write_ptr, ascii_ptr); /* convert card image to ascii */

/* SNUMB */
	     if substr (ascii, 8, 5) = "snumb"		/* error, SNUMB card in job stream */
	     then do;
		call com_err_ (0, "gcos_read_", "SNUMB card found in job stream");
		code = 2;				/* return fatal error */
		go to DETACH;
	     end;

/* ENDCOPY */

	     if substr (ascii, 8, 7) = "endcopy"	/* endcopy card */
	     then do;
		card_is_data = "0"b;		/* following cards are not data */
		go to WRITE;
	     end;

/* DATA CHECK */

	     if card_is_data			/* in between data and endcopy card */
	     then go to WRITE;			/* ignore card */

/* ENDJOB */

	     if substr (ascii, 8, 6) = "endjob"		/* end of job card */
	     then do;
		ejb_found = "1"b;
		go to WRITE;
	     end;

/* DATA */

	     if substr (ascii, 8, 4) = "data"		/* data card */
	     then do;
		if substr (ascii, 20, 1) = ","	/* there is a second field on the card image */
		then do;
		     do i = 17 to 70 while (substr (ascii, i, 1) ^= ","); /* check for third field */
		     end;
		     if i < 70			/* third field exists */
		     then if substr (ascii, i+1, 4) = "copy" /* it contains the copy option */
			then card_is_data = "1"b;	/* following cards are data */
		end;
		go to WRITE;
	     end;

/* IDENT */

	     if substr (ascii, 8, 5) = "ident"		/* ident card */
	     then if ^ident_found			/* use first $IDENT card only */
		then do;
		     ident_found = "1"b;		/* checked at end of current job stream */

		     do j = 16 to 80 while (substr (ascii, j, 1) ^= ","); /* look for end of epa number */
		     end;
		     if (j = 16)| (j>79)		/* format error */
		     then do;
			code = 1;			/* return non-fatal error */
			call com_err_ (0, "gcos_read_", "Format error on ident card:  SNUMB = ^a", gcos_daemon_stat_$snumb);
			go to DETACH;
		     end;
		     epa_num = substr (ascii, 16, j-16); /* pick off epa number */

		     call gcos_user_$validate (epa_num, gutep, code);
		     if code ^= 0			/* some error from validate procedure */
		     then do;
			if code < 3		/* password or missing entry error */
			then do;
			     call com_err_ (0, "gcos_read_", "Error in epa number: SNUMB = ^a", gcos_daemon_stat_$snumb);
			     code = 1;		/* non-fatal error */
			     go to DETACH;
			end;
			else			/* some problem with gcos_user table */
			do;
			     call com_err_ (code, "gcos_read_", "***ATTENTION***^/Error in gcos user table: code = ^d", code);
			     code = 2;		/* return fatal error */
			     go to DETACH;
			end;
		     end;

		     if ^epa_found			/* an epa was not yet encountered */
		     then do;

			do j = 22 to 1 by -1 while	/* find last char in multics user name */
				(substr (gutep -> gute_multics_person, j, 1) = " ");
			end;
			do k = 9 to 1 by -1 while	/* find end of multics project name */
				(substr (gutep -> gute_multics_project, k, 1) = " ");
			end;
			user_name = substr (gcos_daemon_stat_$anonymous_user, 1,
			     gcos_daemon_stat_$anonymous_user_len); /*  set absentee user name  */

			absentee_dir,
			     home_dir = substr (gcos_daemon_stat_$home_root_dir, 1, gcos_daemon_stat_$home_root_dir_len)
			     ||">"||substr (gutep -> gute_multics_project, 1, k)||">"
			     ||substr (gutep -> gute_multics_person, 1, j); /* make up new home dir path name */

			dir_name = absentee_dir;	/* prepare for entry check call */
			call check_entry;		/* see if job already exists */
			if code ^= 0		/* job already exists or fatal error */
			then go to DETACH;

			do ac_name = absentee_dir, home_dir; /* check daemon's access to these dirs */
			     call check_access (ac_name, my_name);
			     if code ^= 0		/* error checking access */
			     then go to DETACH;
			end;

			epa_found = "1"b;		/* remember a epa number was found */

		     end;

		     go to WRITE;

		end;

/* MSG3 */

	     if substr (ascii, 8, 4) = "msg3"		/* deferral card */
	     then if ^deferral_switch			/* one was not yet found */
		then do;

		     call gcos_convert_time_ (substr (ascii, 16, 12), deferral, code); /* convert to Multics time */
		     if code ^= 0			/* error converting time */
		     then do;
			call com_err_ (0, "gcos_read_", "Invalid time field on msg3 card:  SNUMB = ^a", gcos_daemon_stat_$snumb);
			go to DETACH;
		     end;

		     deferral_switch = "1"b;		/* fill in absentee information */
		     go to WRITE;

		end;

	end;

	go to WRITE;

%page;

DETACH:

	if ^ident_found
	then do;
NO_IDENT:
	     call com_err_ (0, "gcos_read_", "Missing or invalid ident card: SNUMB = ^a", gcos_daemon_stat_$snumb);
	     code = 1;
	end;

	call end_work;				/* finish processing */

	if code = 0				/* no error occurred */
	then do;

	     input_segment_name = segment_name;
	     if ^epa_found				/* no epa image was encountered */
	     then do;
		absentee_dir = pool_dir;
		home_dir = default_home_dir;
		user_name = "Anonymous.GCOS.*";
	     end;

	     do dir_name = input_dir, absentee_dir, home_dir; /* check users access to these dirs */
		call check_access (dir_name, user_name);
	     end;

	     call hcs_$set_ring_brackets (input_dir, segment_name, rb, code); /* set ring brackets */
	     if code ^= 0 then
		do; call com_err_ (code, "gcos_read_", "Error setting ring brackets for ^a>^a",
		     input_dir, segment_name);
		go to RETURN;
	     end;

	     call hcs_$acl_add1 (input_dir, segment_name, user_name, 01111b, ringbrackets, code); /* set users access */
	     if code ^= 0				/* error setting access */
	     then call com_err_ (code, "gcos_read_", "Error setting access on ^a>^a", input_dir, segment_name);

	end;

RETURN:

	if code ^= 0				/* some error occurred */
	then data_blank = "0"b;			/* zero out absentee data structure */

	a_eof_found = eof_found;			/* return flag */
	a_code = code;				/* return error code */
	return;
%page;
check_access: proc (c_dir_name, c_user_name);

dcl (
     c_user_name
     ) char (32) aligned;

dcl (
     c_dir_name
     ) char (168) aligned;

	     i = index (c_dir_name, " ") - 1;
	     if i = -1
	     then i = 168;

	     call expand_path_ (addr (c_dir_name), i, addr (run_dn), addr (run_en), code);
	     if code ^= 0
	     then do;
		call com_err_ (code, "gcos_read_", "Error expanding ^a", c_dir_name);
		code = 2;				/* fatal error */
		go to RETURN;
	     end;

	     call hcs_$get_user_effmode (run_dn, run_en, c_user_name, user_ring, dir_mode, code); /* check access */
	     if code ^= 0
	     then do;
		call com_err_ (code, "gcos_read", "Error getting access to ^a", c_dir_name);
		go to RETURN;
	     end;

	     if (bit (dir_mode, 5) & "01011"b) ^= "01011"b /* user doesn't have access */
	     then do;
		call com_err_ (error_table_$moderr, "gcos_read_", "^a to ^a", c_user_name, c_dir_name);
		code = 1;				/* error is not fatal */
		go to RETURN;
	     end;

	     return;

	end check_access;
%page;
check_entry: proc;

	call gcos_daemon_temp_$star_ (dir_name, segment_name, 3, null, ecount, null, null, code);
	if   code ^= 0				/* error from gcos_daemon_temp_$star_ */
	then do;
	     call com_err_ (code, "gcos_read_", "Error searching ^a for ^a",
			dir_name, segment_name);

	     if   code = error_table_$noentry	/* not fatal error */
	     then code = 1;			/* return non-fatal error */
	     return;
	     end;

	if   ecount ^= 0				/* SNUMB already on system. */
	then if   ^dup_resolved ()			/* Try to resolve the duplication. */
	     then do;
		code = 1;				/* Set code to non-fatal. */
		call end_work;
	     end;

	     return;

end check_entry;
%page;
dup_resolved: proc () returns (bit (1));

	start_snumb = rtrim (gcos_daemon_stat_$snumb);
	query_info.version = query_info_version_4;
	query_info.switches = "0"b;			/* Standard format. */
	query_info.switches.cp_escape_control = "10"b;	/* No command escape. */
	query_info.status_code = 0;
	query_info.query_code = 0;
	query_info.question_iocbp = null ();		/* Normal I/O switches. */
	query_info.answer_iocbp = null ();
	query_info.repeat_time = 45;			/* Wait 45 seconds to repeat question. */
	call command_query_ (addr (query_info),
			 query_response,
			 "gcos_daemon",
			 "Duplicate SNUMB - ^a.  Abort or resolve (a/r)?",
			 start_snumb);

	bail_out = "0"b;
	if   substr (query_response, 1, 1) = "r"
	then do;
	     start_snumb, temp_snumb = substr (rtrim (start_snumb) || "00000", 1, 5);
	     do   while (^bail_out);
		temp_snumb = next_snumb (temp_snumb);
		temp_segname = rtrim (temp_snumb) || ".*";
		if   temp_snumb = start_snumb		/* If we've come full circle and have */
						/* yet to resolve the duplication. */
		then do;
		     bail_out = "1"b;
		     resolved = "0"b;
		     end;

		else do   temp_dir_name = input_dir, pool_dir
			while (^bail_out);

		     call gcos_daemon_temp_$star_ (temp_dir_name, temp_segname,
					     3, null, ecount, null, null, code);

		     if   code ^= 0
		     then do;
			call com_err_ (code, "gcos_read_",
				     "^/Error while attempting to resolve duplicate SNUMB ^a",
				     gcos_daemon_stat_$snumb);
			resolved = "0"b;
			bail_out = "1"b;
			end;

		     else if   ecount = 0
			then do;
			     call ioa_ ("gcos_daemon: SNUMB #^a entered as #^a",
				      gcos_daemon_stat_$snumb, temp_snumb);

			     snumb_length1 = 5;	/* Gotta set the values so caller
						/* doesn't get all confoozed. */
			     gcos_daemon_stat_$snumb = temp_snumb;
			     bail_out = "1"b;
			     resolved = "1"b;
			     end;
		     end;
		end;
	     end;
	else resolved = "0"b;

	return (resolved);

dcl  bail_out bit (1);
dcl  query_response char (80) varying;
dcl  resolved bit (1);
dcl  (start_snumb, temp_snumb) char (5);
dcl  temp_segname char (32) aligned;
dcl  temp_dir_name char (168) aligned;

end dup_resolved;
%page;
end_work:	proc;

	     if gsr_write_init_called
	     then do;
		call gcos_gsr_write_$gsr_write_close ("segment_output", code2);
		if code2 ^= 0
		then do;
		     call com_err_ (code2, "gcos_read_", "Error from gsr_write_close");
		     if code < 2			/* no fatal error yet */
		     then code = code2;		/* return this one */
		end;
	     end;

	     if output_is_attached			/* output stream is attached */
	     then do;

		call ios_$detach ("segment_output", "file_", "", status_stuff); /* detach the output stream */
		code2 = status.code;		/* check error code */
		if code2 ^= 0			/* error detaching output stream */
		then do;
		     call com_err_ (code2, "gcos_read_", "Unable to detach ^a", segment_name);
		     if code <= 1			/* no previous fatal error */
		     then code = code2;		/* return this one */
		end;
		else
		output_is_attached = "0"b;

	     end;

end end_work;
%page;
next_snumb: proc (in_string) returns (char (5));

dcl  in_string	char (5)	parm;
dcl  in_length	fixed bin;

	conv_block = in_string;			/* Put it where we can work on it. */
	in_length = length (rtrim (conv_block));
	if   in_length ^= 0
	then do;
	     if   conv_ovrl (in_length) = 57
	     then conv_ovrl (in_length) = 97;
	     else if   conv_ovrl (in_length) = 122
		then conv_block = rtrim (next_snumb (substr (in_string, 1, in_length-1))) || "0";
		else conv_ovrl (in_length) = conv_ovrl (in_length) + 1;
	     end;

	return (conv_block);

dcl  conv_block	char (5)	aligned;
dcl  conv_ovrl	(5) fixed bin (9) unsigned unaligned based (addr (conv_block));
dcl  conv_ptr	pointer;
dcl  ret_string	char (5);

end next_snumb;
%page;
/* DECLARATIONS */
/* ------------ */


/* fixed bin */
/* ----- --- */

dcl (
     a_root_dir_len,				/* length of root directory path-name (argument) */
     a_urgency,					/* urgency field from SNUMB card (argument) */
     ecount,					/* number of segments from gcos_daemon_temp_$star_ call */
     elements_read,					/* elements read from ios_$read call */
     elements_written,				/* elements written from ios_$write call */
     gcos_daemon_stat_$default_home_dir_len ext,		/* length of pn */
     gcos_daemon_stat_$home_root_dir_len ext,		/* length of pn */
     gcos_daemon_stat_$input_dir_len ext,		/* character count of input directory */
     gcos_daemon_stat_$pool_dir_len ext,		/* character count of pool directory */
     gcos_daemon_stat_$root_dir_len ext,		/* character count of root directory */
     gcos_daemon_stat_$anonymous_user_len ext,		/* character count of anonymous user */
     i,						/* random variable */
     j,						/* random variable */
     k,						/* random variable */
     root_dir_len int static,				/* length of root directory path-name (internal) */
     snumb_length1,					/* length of SNUMB + 1 */
     user_ring int static,				/* for effmode call */
     card_no,					/* sequence number for reading cards */
     write_size					/* number of elements to write into segment */
     ) fixed bin aligned;

dcl (
     dir_mode					/* access of user to dir_name */
     ) fixed bin (5) aligned;

dcl  ringbrackets (0:2) fixed bin (6) aligned int static init (5, 5, 5);

dcl  rb (3) fixed bin (3) init (5, 5, 5) aligned;		/* ringbrackets for set_ring_brackets call */

dcl (
     a_code,					/* error code (argument) */
     code,					/* error code (internal) */
     code2,					/* error code (internal) */
     error_table_$namedup ext,
     error_table_$moderr ext,
     error_table_$noentry ext
     ) fixed bin (35) aligned;


/* bit strings */
/* --- ------- */

dcl (
     a_eof_found					/* ON if end of read input encountered (argument) */
     ) bit (1) aligned;

dcl (
     record_header					/* record header from tape returned from gsr_read_ */
     ) bit (12) aligned;

dcl (
     card_is_data,					/* ON between data and endcopy cards */
     dollar_card,					/* ON when a $ card is being processed */
     ejb_found,					/* ON when end of job card found */
     eof_found,					/* ON if end of read input encountered (internal) */
     ident_found,					/* ON when at least one IDENT card found in job stream */
     epa_found,					/* ON once epa number is found */
     gsr_write_init_called,				/* ON once gsr_write_init is called */
     initialized int static,				/* ON once this procedure has been called */
     output_is_attached,				/* ON once output has been attached */
     reading_cards					/* ON when cards are being read */
     ) bit (1) aligned init ("0"b);

dcl (
     status_stuff					/* returned from ios_ calls */
     ) bit (72) aligned;

dcl (
     input					/* binary card image */
     ) bit (972) aligned;


/* pointer */
/* ------- */

dcl (
     a_abs_data_ptr,				/* pointer to absentee job info (argument) */
     a_input_ptr,					/* pointer to bcd SNUMB card (argument) */
     ascii_ptr,					/* pointer to ascii card image */
     input_ptr,					/* pointer to binary card image */
     rh_ptr,					/* pointer for looking at record header */
     sp,						/* pointer to returned status from ios_ calls */
     write_ptr					/* points to data to be written */
     ) ptr aligned;


/* character strings */
/* --------- ------- */

dcl (
     gcos_daemon_stat_$snumb ext
     ) char (6) aligned;

dcl (snumb					/* SNUMB (internal) */
     ) char (8) aligned;

dcl (
     epa_num,					/* epa number from ident card */
     stream_name					/* device from which to read (internal) */
     ) char (12) aligned;

dcl (
     my_name int static,				/* id of caller of this proc */
     run_en,					/* for checking dir access */
     segment_name					/* old segment name */
     ) char (32) aligned;

dcl (
     ascii init ("")				/* ascii card image */
     ) char (80) aligned;
dcl (
     ac_name,					/* used in loop call */
     default_home_dir int static,			/* default Anonymous home dir */
     dir_name,					/* for do loop */
     gcos_daemon_stat_$default_home_dir ext,		/* default Anonymous home dir */
     gcos_daemon_stat_$home_root_dir ext,		/* root portion of all GCOS home dirs */
     gcos_daemon_stat_$input_dir ext,			/* input directory */
     gcos_daemon_stat_$pool_dir ext,			/* pool directory */
     gcos_daemon_stat_$root_dir ext,			/* root directory */
     gcos_daemon_stat_$anonymous_user ext,		/* name of default anonymous user */
     input_dir int static,				/* input directory (internal) */
     pool_dir int static,				/* pool directory (internal) */
     root_dir int static,				/* root directory (internal) */
     run_dn					/* for checking dir access */
     ) char (168) aligned;


/* built in */
/* ----- -- */

dcl (
     addr,
     bit,
     fixed,
     index,
     null,
     rel,
     substr
     ) builtin;


/* masks */
/* ----- */

dcl  first_bcd_char bit (6) unaligned based (write_ptr);

dcl  tape_input_record bit (504) aligned based (write_ptr);

dcl 1 record_header_mask aligned based (rh_ptr),
    2 pad bit (2) unaligned,
    2 media_code bit (4) unaligned,
    2 report_code bit (6) unaligned;

dcl 1 status based (sp) aligned,			/* for examining status from ios_ */
    2 code fixed bin (35) aligned,
    2 pad bit (9) unaligned,
    2 eof bit (1) unaligned;

/* conditions */
/* ---------- */

dcl (
     cleanup
     ) condition;


/* external entries */
/* -------- ------- */

dcl  com_err_		entry() options(variable);
dcl  command_query_		entry() options(variable);
dcl  ioa_			entry() options(variable);
dcl  cv_bcd_to_ascii_ ext entry
    (ptr aligned, ptr aligned);

dcl  cv_bin_to_bcd_ ext entry
    (ptr aligned, ptr aligned, fixed bin (35) aligned);

dcl  expand_path_ ext entry
    (ptr aligned, fixed bin aligned, ptr aligned, ptr aligned, fixed bin (35) aligned);

dcl  gcos_convert_time_ ext entry
    (char (16) aligned, fixed bin (71) aligned, fixed bin (35) aligned);

dcl  gcos_daemon_temp_$star_ ext entry
    (char (*) aligned, char (*) aligned, fixed bin (2) aligned, ptr aligned, fixed bin aligned,
     ptr aligned, ptr aligned, fixed bin (35) aligned);

dcl  gcos_user_$validate ext entry
    (char (12) aligned, ptr aligned, fixed bin (35) aligned);

dcl  gcos_gsr_read_ ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, bit (12) aligned, bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_write_ ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, bit (12) aligned, bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_write_$gsr_write_close ext entry
    (char (*) aligned, fixed bin (35) aligned);

dcl  gcos_gsr_write_$gsr_write_init ext entry
    (char (*) aligned, fixed bin (35) aligned);

dcl  get_ring_ ext entry
     returns (fixed bin (6) aligned);

dcl  get_group_id_$tag_star ext entry
     returns (char (32) aligned);

dcl  hcs_$acl_add1 ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5) aligned, (0:2) fixed bin (6) aligned,
     fixed bin (35) aligned);

dcl  hcs_$set_ring_brackets ext entry
    (char (*) aligned, char (*) aligned, (3) fixed bin (3) aligned, fixed bin (35) aligned);

dcl  hcs_$get_user_effmode ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin aligned, fixed bin (5) aligned, fixed bin (35) aligned);

dcl  ios_$attach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl  ios_$detach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl  ios_$read ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, fixed bin aligned, fixed bin aligned, bit (72) aligned);

dcl  ios_$setsize ext entry
    (char (*) aligned, fixed bin aligned, bit (72) aligned);
%page;
% include gcos_abs_data;
%page;
% include gcos_user_table_entry_;
%page;
%include query_info;

end gcos_read_;
