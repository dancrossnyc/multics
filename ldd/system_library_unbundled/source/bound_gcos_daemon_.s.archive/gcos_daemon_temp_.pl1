/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_daemon_temp_: proc;

/* DECLARATIONS */
/* ------------ */


/* fixed bin */

dcl (
     fixed_bin2					/* variable from callers' star_ call passed on */
     ) fixed bin (2) aligned;

dcl (
     a_ecount,					/* number of entries corresponding to segment_name (argument) */
     ecount					/* number of entries corresponding to segment_name (internal) */
     ) fixed bin aligned;

dcl (
     a_code,					/* error code (argument) */
     code,					/* error code (internal) */
     error_table_$nomatch ext
     ) fixed bin (35) aligned;


/* pointers */

dcl (
     freep int static,				/* pointer to system free area */
     ptr1,					/* dummy arguments */
     ptr2,
     ptr3,
     ptr4,
     ptr5,
     sp						/* mask pointer for status from ios_ */
     ) ptr aligned;


/* bit strings */

dcl (
     init int static init ("0"b)			/* ON once system free area is called */
     ) bit (1) aligned;

dcl (
     a_status_stuff,				/* returned status from ios_ (argument) */
     status_stuff					/* returned status from ios_ (internal) */
     ) bit (72) aligned;


/* character strings */

dcl (
     a_stream_name,					/* stream name (argument) */
     stream_name					/* stream name (internal) */
     ) char (12) aligned;

dcl (
     a_segment_name,				/* star name (argument) */
     segment_name					/* star name (internal) */
     ) char (32) aligned;

dcl (
     a_dir_name,					/* directory being searched for names (argument) */
     dir_name					/* directory being searched for names (internal) */
     ) char (168) aligned;


/* built in */

dcl (
     addr,
     null
     ) builtin;


/* masks */

dcl 1 status aligned based (sp),			/* for interpreting status from ios_ */
    2 code fixed bin aligned;


/* external entries */

dcl  freen_ ext entry
    (ptr aligned);

dcl  get_system_free_area_ ext entry
     returns (ptr aligned);

dcl  hcs_$star_ ext entry
    (char (*) aligned, char (*) aligned, fixed bin (2) aligned, ptr aligned, fixed bin aligned, ptr aligned,
     ptr aligned, fixed bin (35) aligned);

dcl  ios_$attach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl  ios_$detach ext entry
    (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

/*  */

star_:	entry (a_dir_name, a_segment_name, fixed_bin2, ptr1, a_ecount, ptr2, ptr3, a_code);

/* This entry simulates a star handler which returns a count of the entries corresponding to
   only the star name if ptr1 is null.  The current star handler returns a count of all the
   entries in the directory */


	sp = addr (status_stuff);			/* mask pointer for status from ios_ */

	if ^init					/* first time proc called */
	then do;
	     freep = get_system_free_area_ ();		/* get pointer to system free area */
	     init = "1"b;				/* remember you've been called */
	end;

	dir_name = a_dir_name;			/* copy in arguments */
	segment_name = a_segment_name;

	call hcs_$star_ (dir_name, segment_name, fixed_bin2, freep, ecount, ptr4, ptr5, code);
						/* make a call to current star_ */

	if ptr4 ^= null				/* free any allocation */
	then call freen_ (ptr4);
	if ptr5 ^= null
	then call freen_ (ptr5);

	if code = error_table_$nomatch		/* no entries with star name */
	then do;
	     code = 0;				/* return sensible variables */
	     ecount = 0;
	end;

	a_code = code;				/* return arguments */
	a_ecount = ecount;

	return;

/*  */

resetread: entry (a_stream_name, a_status_stuff);

/* This function simulates a currently missing function in the card reader dim: resetread.
   It does this by first detaching, then reattaching the card reader */

	sp = addr (status_stuff);			/* mask pointer for status from ios_ */

	stream_name = a_stream_name;			/* copy in argument */

	call ios_$detach (stream_name, "rdra", "", status_stuff); /* detach the card reader */
	if status.code = 0				/* detach o.k. */
	then call ios_$attach (stream_name, "rdr21", "rdra", "", status_stuff); /* reattach it */

	a_status_stuff = status_stuff;		/* return status */

	return;

     end gcos_daemon_temp_;
