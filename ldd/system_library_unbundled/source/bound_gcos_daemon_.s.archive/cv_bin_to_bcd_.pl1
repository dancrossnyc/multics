/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ******************************************************************************
   *								*
   *	Modified by RH Morrison  6/28/76				*
   *								*
   ****************************************************************************** */

cv_bin_to_bcd_: proc (a_input_ptr, a_output_ptr, a_code);


/* DECLARATIONS */
/* ------------ */


/* fixed bin */

dcl (
     direction,					/* direction of half-interval search */
     i,						/* loop index */
     interval,					/* increment for half-interval search */
     j,						/* loop index */
     search_index					/* index into binary table */
     ) fixed bin aligned;

dcl (
     a_code					/* error code (argument) */
     ) fixed bin (35) aligned;


/* pointers */

dcl (
     a_input_ptr,					/* pointer to binary data (argument) */
     a_output_ptr,					/* pointer to bcd output (argument) */
     bcd_ptr,					/* pointer to internal bcd */
     input_ptr,					/* pointer to binary data (internal) */
     output_ptr					/* pointer to bcd output (internal) */
     ) ptr aligned;


/* bit strings */

dcl (
     bin_char_not_found				/* ON until bin_table search is successful */
     ) bit (1) aligned;


/* built  in functions */

dcl (
     addr,
     divide
     ) builtin;


/* structures */

dcl 1 bcd_chars aligned,				/* bcd output structure */
    2 bcd_char (0:79) bit (6) unaligned;

dcl  bcd_table (0:63) bit (6) aligned internal static init (
     "010000"b,					/* " " */
     "001001"b,					/* "9" */
     "001000"b,					/* "8" */
     "000111"b,					/* "7" */
     "001111"b,					/* "?" */
     "000110"b,					/* "6" */
     "001110"b,					/* ">" */
     "000101"b,					/* "5" */
     "001101"b,					/* ":" */
     "000100"b,					/* "4" */
     "001100"b,					/* "@" */
     "000011"b,					/* "3" */
     "001011"b,					/* "#" */
     "000010"b,					/* "2" */
     "001010"b,					/* "[" */
     "000001"b,					/* "1" */
     "000000"b,					/* "0" */
     "111001"b,					/* "z" */
     "111000"b,					/* "y" */
     "110111"b,					/* "x" */
     "111111"b,					/* "!" */
     "110110"b,					/* "w" */
     "111110"b,					/* """ */
     "110101"b,					/* "v" */
     "111101"b,					/* "=" */
     "110100"b,					/* "u" */
     "111100"b,					/* "%" */
     "110011"b,					/* "t" */
     "111011"b,					/* "," */
     "110010"b,					/* "s" */
     "111010"b,					/* "<-" */
     "110001"b,					/* "/" */
     "101010"b,					/* "-" */
     "101001"b,					/* "r" */
     "101000"b,					/* "q" */
     "100111"b,					/* "p" */
     "101111"b,					/* "'" */
     "100110"b,					/* "o" */
     "101110"b,					/* ";" */
     "100101"b,					/* "n" */
     "101101"b,					/* ")" */
     "100100"b,					/* "m" */
     "101100"b,					/* "*" */
     "100011"b,					/* "l" */
     "101011"b,					/* "$" */
     "100010"b,					/* "k" */
     "100001"b,					/* "j" */
     "100000"b,					/* "^" */
     "011010"b,					/* "&" */
     "011001"b,					/* "i" */
     "011000"b,					/* "h" */
     "010111"b,					/* "g" */
     "011111"b,					/* "\" */
     "010110"b,					/* "f" */
     "011110"b,					/* "<" */
     "010101"b,					/* "e" */
     "011101"b,					/* "(" */
     "010100"b,					/* "d" */
     "011100"b,					/* "]" */
     "010011"b,					/* "c" */
     "011011"b,					/* "." */
     "010010"b,					/* "b" */
     "010001"b,					/* "a" */
     "110000"b					/* "+" */
     );

dcl  bin_table (0: 63) bit (12) aligned internal static init (
     "000000000000"b,
     "000000000001"b,
     "000000000010"b,
     "000000000100"b,
     "000000000110"b,
     "000000001000"b,
     "000000001010"b,
     "000000010000"b,
     "000000010010"b,
     "000000100000"b,
     "000000100010"b,
     "000001000000"b,
     "000001000010"b,
     "000010000000"b,
     "000010000010"b,
     "000100000000"b,
     "001000000000"b,
     "001000000001"b,
     "001000000010"b,
     "001000000100"b,
     "001000000110"b,
     "001000001000"b,
     "001000001010"b,
     "001000010000"b,
     "001000010010"b,
     "001000100000"b,
     "001000100010"b,
     "001001000000"b,
     "001001000010"b,
     "001010000000"b,
     "001010000010"b,
     "001100000000"b,
     "010000000000"b,
     "010000000001"b,
     "010000000010"b,
     "010000000100"b,
     "010000000110"b,
     "010000001000"b,
     "010000001010"b,
     "010000010000"b,
     "010000010010"b,
     "010000100000"b,
     "010000100010"b,
     "010001000000"b,
     "010001000010"b,
     "010010000000"b,
     "010100000000"b,
     "011000000000"b,
     "100000000000"b,
     "100000000001"b,
     "100000000010"b,
     "100000000100"b,
     "100000000110"b,
     "100000001000"b,
     "100000001010"b,
     "100000010000"b,
     "100000010010"b,
     "100000100000"b,
     "100000100010"b,
     "100001000000"b,
     "100001000010"b,
     "100010000000"b,
     "100100000000"b,
     "101000000000"b
     );


/* masks */

dcl  bcd_output bit (480) unaligned based (bcd_ptr);	/* mask for copying bcd as a whole */

dcl  bin_char (0:79) bit (12) unaligned based (input_ptr);	/* mask for looking at binary input */

/*  */

/* copy in arguments */

	input_ptr = a_input_ptr;
	output_ptr = a_output_ptr;
	bcd_ptr = addr (bcd_chars);			/* pointer to internal bcd */

/* perform conversion */

	do i = 0 to 79;				/* convert 80 characters */

	     if bin_char (i) = "0"b			/* make quick check for blank */
	     then bcd_char (i) = "010000"b;

	     else					/* not binary blank */
	     do;

		direction = 1;			/* set up half-interval search */
		interval = 32;
		search_index = 0;
		bin_char_not_found = "1"b;

		do j = 1 to 6 while (bin_char_not_found);

		     search_index = search_index + direction*interval; /* compute index into binary table */

		     if bin_char (i) = bin_table (search_index) /* match found */
		     then do;
			bcd_char (i) = bcd_table (search_index); /* set bcd character */
			bin_char_not_found = "0"b;
		     end;

		     else				/* not a match */
		     do;
			if bin_char (i) > bin_table (search_index) /* set direction of search increment */
			then direction = 1;
			else direction = -1;
			interval = divide (interval, 2, 17, 0); /* set search increment magnitude */
		     end;

		end;

		if bin_char_not_found		/* no match found */
		then go to ERROR;			/* illegal binary character */

	     end;

	end;

	output_ptr -> bcd_output = bcd_output;		/* return output string */
	a_code = 0;				/* and "successful" code */

	return;					/* and your own self */

ERROR:

	a_code = 1;				/* return "unsuccessful" code */

	return;

     end cv_bin_to_bcd_;
