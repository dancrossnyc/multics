/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

%page;
/*

Modified:	Scott C. Akers	FEB 82	Add  'help' request, change action
				of  'return'  request to just quit
				out    of    Daemon   instead   of
				NEW_PROCing the user.

*/
%page;
gcos_daemon: proc;					/* MAIN ENTRY */


	call init_pointers;
	test_entry = "0"b;
	call default_handler_$set (standard_default_handler_); /* use standard fault handler */
	call gcos_daemon_init_ (fatal_error);
	go to COMMON;
%page;
/* TEST ENTRY */


test: entry;


/*
" N__a_m_e: test
" 
" The test entry  point  to  gcos_daemon
" allows  testing  of  the  daemon  from a private user process. It
" allows the user  to  specify  a  private  directory  (instead  of
" >ddd>GCOS) to be used as the root directory during testing.
" 
" U__s_a_g_e
"      gcos_daemon$test path
"        or
"      gcos_daemon$test control_arg
" 
" where:
"      1. path is the pathname of a root directory to  be  used  in
"         the test.
" 
"      2. control_arg  is  -wd  or  -working_dir  if  the   working
"         directory is to be used as the root directory.
" 
" N__o_t_e
" Prior  to  calling  this  entry point the following setup must be
" done for the root directory.  The gcos_user_table_ must be copied
" from >ddd>GCOS into the root directory.  Table entries must exist
" for the gcos_account_id, Multics Person_id and Multics Project_id
" which will be used in testing the gcos daemon.  See Appendix B of
" the GCOS Environment Simulator manual  AN05  for  information  on
" setting up the gcos_user_table_.
" 
" Next four subdirectories should be created in the root directory.
" They  are  "input_dir",  "pool_dir", "Anonymous", and "gdd".  The
" Access Control List for the subdirectories must include:
" 
"           sma       Anonymous.GCOS.*
" 
" and the Initial Access Control List for the  subdirectories  must
" include:
" 
"           rw        Anonymous.GCOS.*
" 
" Under  gdd  a  subdirectory  must  be  created and named with the
" Multics Project_id as specified in the  gcos_user_table_.   Under
" this  project  directory a subdirectory must be created and named
" with the Multics Person_id as specified in the  gcos_user_table_.
" This  person  directory  must  have  an Access Control List which
" includes:
" 
"           sma       Anonymous.GCOS.*
" 
" and an Initial Access Control List which includes:
" 
"           rw        Anonymous.GCOS.*
" 
*/

	call init_pointers;
	test_entry = "1"b;

	call cu_$arg_count (arg_count);
	if arg_count = 0 then do;
	     code = error_table_$noarg;
	     call com_err_ (code, "gcos_daemon$test",
		"^/Usage: gcos_daemon$test directory_name");
	     return;
	end;

	if arg_count > 1 then do;
	     code = error_table_$too_many_args;
	     call com_err_ (code, "gcos_daemon$test",
		"^/Usage: gcos_daemon$test directory_name");
	     return;
	end;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0 then do;
	     call com_err_ (code, "gcos_daemon$test");
	     return;
	end;

	if arg = "-wd" | arg = "-working_dir" then
	     abspath = get_wdir_ ();
	else if substr (arg, 1, 1) = "-"
	then do;
	     code = error_table_$badopt;
	     call com_err_ (code, "gcos_daemon$test", "^a", arg);
	     return;
	end;
	else do;
	     call absolute_pathname_ (arg, abspath, code);
	     if code ^= 0 then do;
		call com_err_ (code, "gcos_daemon$test",
		     "/^a", arg);
		return;
	     end;
	end;

	path_len = length (rtrim (abspath));

	gcos_daemon_stat_$default_home_dir = rtrim (abspath)||">Anonymous";
	gcos_daemon_stat_$home_root_dir = rtrim (abspath)||">gdd";
	gcos_daemon_stat_$input_dir = rtrim (abspath)||">input_dir";
	gcos_daemon_stat_$pool_dir = rtrim (abspath)||">pool_dir";
	gcos_daemon_stat_$root_dir = abspath;
	gcos_daemon_stat_$default_home_dir_len = path_len + length (">Anonymous");
	gcos_daemon_stat_$home_root_dir_len = path_len + length (">gdd");
	gcos_daemon_stat_$input_dir_len = path_len + length (">input_dir");
	gcos_daemon_stat_$pool_dir_len = path_len + length (">pool_dir");
	gcos_daemon_stat_$root_dir_len = path_len;

	call gcos_daemon_init_$gd_test (fatal_error);
	go to COMMON;



/* QUIT ENTRY */

quit_entry: entry;

	call init_pointers;
	call ios_$resetread ("user_i/o", status_stuff);
	code = status.code;
	if code ^= 0
	then do;
	     call com_err_ (code, "gcos_daemon", "Error resetting user_i/o");
	     go to GET_REQUEST;
	end;

	invocation_level = invocation_level + 1;	/* bump count of times called */
	go to SET_QUIT;


/* OVERFLOW ENTRIES */

overflow_handler: entry;

	call init_pointers;
	call ioa_ ("Record quota overflow:  Input for snumb ^a deleted", gcos_daemon_stat_$snumb);
	signal condition (goback);

abs_overflow_handler: entry;

	call init_pointers;
	call ioa_ ("******ATTENTION******^/Record quota overflow from absentee gcos job in^/^a",
	     gcos_daemon_stat2_$overflow_dir);
	return;
%page;
COMMON:	;
	if (fatal_error)
	then do;
	     call com_err_ (0, "gcos_daemon", "Fatal error encountered during initialization");
	     return;
	end;

	if (^init)				/* first time called */
	then do;
	     init = "1"b;				/* remember */
	     cleanup_return = CLEANUP_RETURN;		/* set internal static label */
	end;

	reader_is_attached = "0"b;

	input_dir = substr (gcos_daemon_stat_$input_dir, 1, gcos_daemon_stat_$input_dir_len);

/* run date deleter */

	if ^test_entry
	then do;
	     call hcs_$make_ptr (myp, "date_deleter", "date_deleter", ddp, code); /* get pointer to date_deleter */
	     if ddp = null				/* error getting pointer */
	     then call com_err_ (code, "gcos_daemon", "Error finding date deleter");
	     else					/* got pointer */
	     do dir_name = input_dir, substr (gcos_daemon_stat_$pool_dir, 1, gcos_daemon_stat_$pool_dir_len),
		     substr (gcos_daemon_stat_$default_home_dir, 1, gcos_daemon_stat_$default_home_dir_len);
		call ioa_$rsnnl ("^d", delete_interval, i, gcos_daemon_stat_$delete_interval); /* get time interval */
		call cu_$ptr_call (ddp, dir_name, delete_interval);
	     end;
	end;

/* set up condition handlers */

CLEANUP_RETURN:	;

	on condition (goback)
	     begin;

	     invocation_level = 0;			/* will bring daemon back to lowest invocation level */
	     call ioa_ ("Cleanup invoked");
	     go to cleanup_return;			/* pop stack back to first invocation level */

	end;

SET_QUIT:	;

	on condition (record_quota_overflow)
	     call gcos_daemon$overflow_handler;

	on condition (quit)
	     call gcos_daemon$quit_entry;

GET_REQUEST:	;

	request = " ";				/* blank out request line */

	call ioa_ ("ENTER REQUEST");			/* ask for a request */

NULL_REQUEST:	;

	call ios_$read_ptr (addr (request), 120, request_len); /* read the request */
	if request_len = 1				/* null request */
	then go to NULL_REQUEST;
%page;
	if substr (request, 1, 4) = "imcv"		/* request to read tape */
	then do;
	     call gcos_read_tape_ (request, request_len - 1, test_entry);
	     go to GET_REQUEST;
	end;
%page;
	else
	if substr (request, 1, 6) = "attach"		/* request to attach card reader */
	then do;

	     if (reader_is_attached)			/* card reader already attached */
	     then call com_err_ (0, "gcos_daemon", "Card reader already attached");

	     else					/* card reader not yet attached */
	     do;
		call ios_$attach ("card_input", gcos_daemon_stat_$card_dim, "rdra", "", status_stuff);
		code = status.code;
		if code ^= 0
		then do;
		     call com_err_ (code, "gcos_daemon", "Error attaching card reader");
		     go to GET_REQUEST;
		end;
		else
		reader_is_attached = "1"b;
	     end;

	end;
%page;
	else
	if substr (request, 1, 4) = "read"		/* request to block on card reader */
	then do;

	     if (^reader_is_attached)			/* card reader isn't attached yet */
	     then do;
		call com_err_ (0, "gcos_daemon", "Card reader is not attached");
		go to GET_REQUEST;
	     end;

	     else do;				/* reader is attached, prepare to read */
		code = 0;
		eof_found = "0"b;
		do   while (code = 0 & ^eof_found);
		     call gcos_read_cards_ ("card_input", test_entry, eof_found, code); /* pass request on */
		     end;
		end;
	     end;
%page;
	else
	if substr (request, 1, 5) = "abort"		/* request to abort current job */
	then do;

	     if invocation_level = 0			/* at lowest invocation level */
	     then do;
		call ioa_ ("You are at command level");
		go to GET_REQUEST;
	     end;

	     signal condition (goback);

	end;
%page;
	else
	if substr (request, 1, 6) = "detach"		/* request to detach card reader */
	then do;

	     if (^reader_is_attached)			/* reader is not attached */
	     then do;
		call com_err_ (0, "gcos_daemon", "Card reader is not attached");
		go to GET_REQUEST;
	     end;

	     call detach;				/* detach card reader */
	     if code = 0				/* successful detach */
	     then reader_is_attached = "0"b;

	end;
%page;
	else
	if substr (request, 1, 7) = "re_init"		/* request to re-initialize process */
	then do;

RE_INIT:	;
	     if (reader_is_attached)			/* card reader is attached */
	     then call detach;

	     call new_proc;				/* create a new process */

	end;
%page;
	else
	if substr (request, 1, 6) = "logout"		/* request to log process out */
	then do;

	     if (reader_is_attached)			/* card reader is attached */
	     then call detach;

	     call logout;				/* log daemon out */

	end;
%page;
	else
	if substr (request, 1, 5) = "admin"		/* request to enter admin mode */
	then do;

	     on quit system;			/* take away control of quits */
	     revert condition (record_quota_overflow);	/* and record quota overflows */
	     call user_info_ (name, project, account);
	     if project = "SysDaemon"
	     then do;
		call hcs_$initiate (
		     substr (gcos_daemon_stat_$sysdir, 1, gcos_daemon_stat_$sysdir_len),
		     "communications", "", 0, 1, com_p, code);
		if com_p ^= null then do;
		     if communications.admin_word = "*" then go to enter_admin;
		     call ioa_ ("Password:");
		     call iox_$control (iox_$user_io, "printer_off", null, ioxcode);
		     call iox_$get_line (iox_$user_io, addr (request), 120, i, ioxcode);
		     call iox_$control (iox_$user_io, "printer_on", null, ioxcode);
		     w_password = substr (request, 1, i-1); /* Get password. */
		     if w_password = communications.admin_word then go to enter_admin;
		     call com_err_ (0, "gcos_daemon", "password incorrect");
		     go to xadmin;
		end;
		else call com_err_ (code, "gcos_daemon", "Error in initiating communications segment");
	     end;

enter_admin:   ;
	     call enter_admin_mode_ ();		/* Call Multics listener. */

xadmin:	     ;					/* Get here on "ame" command. */
	     call change_wdir_ (input_dir, code);	/* make sure in proper dir */
	     if code ^= 0				/* can't do it */
	     then call com_err_ (code, "gcos_daemon", "Error changing to ^a", input_dir);
	     go to SET_QUIT;

	end;
%page;
	else
	if substr (request, 1, 3) = "smq"		/* request to reset maximum queue priority */
	then do;

	     code = 0;				/* prevents spurious message printing */
	     i = index (request, " ");		/* find first blank in request */

	     if i > request_len			/* no blank: no second argument */
	     then do;
NO_QUEUE:	;
		call com_err_ (0, "gcos_daemon", "Missing or invalid queue number in smq request");
		go to GET_REQUEST;
	     end;

	     do j = i to request_len while		/* find beginning of argument */
		     (substr (request, j, 1) = " ");
	     end;
	     if j > request_len			/* no second argument */
	     then go to NO_QUEUE;

	     max_queue = cv_dec_check_ (substr (request, j, request_len-j), code);
	     if code ^= 0				/* invalid queue specification */
	     then go to NO_QUEUE;

	     call gcos_queue_job_$set_priority (max_queue);

	end;
%page;
	else
	if substr (request, 1, 5) = "start"		/* request to return from quit */
	then do;

	     if invocation_level = 0			/* at lowest level */
	     then do;
		call ioa_ ("You are at command level");
		go to GET_REQUEST;
	     end;
	     invocation_level = invocation_level - 1;	/* decrement count of stacked invocations */
	     return;				/* and return */
	end;
%page;
	else
	if substr (request, 1, 6) = "return"		/* request to return to command level */
	then do;

	     if (^test_entry)			/* not allowed for daemon itself */
	     then go to NOT_RECOGNIZED;

	     goto ALL_DONE;

	end;
%page;
	else
	if substr (request, 1, 1) = "."		/* user wants to know who he is */
	then call ioa_ ("gcos_daemon");
%page;
	else if   substr (request, 1, 1) = "?"
	        | substr (request, 1, 4) = "help"
	then call ioa_ (  "^/REQUEST^-DESCRIPTION"
		      ||"^2/abort^-Abort current job"
		      ||"^/admin^-Enter 'admin' mode"
		      ||"^/attach^-Attach the card reader"
		      ||"^/detach^-Detach the card reader"
		      ||"^/help^-Print this list"
		      ||"^/imcv^-Read from tape"
		      ||"^/logout^-Log out the Daemon"
		      ||"^/read^-Read from the card reader"
		      ||"^/return^-Return to command level"
		      ||"^/^-(test entry only)"
		      ||"^/re_init^-Reinitialize the Daemon"
		      ||"^/smq N^-Set max priority abs queue for Daemon to N"
		      ||"^/^-(Default is 1)"
		      ||"^/start^-Restart from QUIT"
		      ||"^/.^-Tell Daemon to identify itself"
		      ||"^/?^-Print this list"
		      ||"^/");
%page;
	else					/* request not recognized */

NOT_RECOGNIZED:

	call com_err_ (0, "gcos_daemon", "Unrecognized request:^-^a", request);

	go to GET_REQUEST;
%page;
/* INTERNAL PROCEDURES */


detach:	proc;					/* procedure to detach devices */

	     call ios_$detach ("card_input", "rdra", "", status_stuff);
	     code = status.code;
	     if code ^= 0
	     then call com_err_ (code, "gcos_daemon", "Error detaching card reader");
	     return;
	end detach;


init_pointers: proc;
	     myp = addr (gcos_daemon$);		/* pointer to this proc */
	     sp = addr (status_stuff);		/* overlay pointer for ios_ status */
	     return;
	end init_pointers;
%page;
ALL_DONE: ;

	return;					/* Bail out from the Daemon. */
%page;
/* fixed bin */
/* ----- --- */

dcl (
     gcos_daemon_stat_$default_home_dir_len ext,		/* length of default home dir name */
     gcos_daemon_stat_$delete_interval ext,		/* days afted which to delete segment */
     gcos_daemon_stat_$input_dir_len ext,		/* length of input directory name */
     gcos_daemon_stat_$pool_dir_len ext,		/* length of pool dir name */
     gcos_daemon_stat_$sysdir_len ext,			/* length of sysdir name */
     gcos_daemon_stat_$home_root_dir_len ext,		/* length of home root dir name */
     gcos_daemon_stat_$root_dir_len ext,		/* length of root dir name */
     i,						/* random variable */
     invocation_level int static init (0),		/* number of stacked calls to quit entry */
     j,						/* random variable */
     max_queue,					/* maximum priority queue for absentee, output */
     arg_count,					/* total number of args in cmd line */
     arg_len,					/* size in chars of last arg retrieved with cu_$arg_ptr */
     path_len,					/* length of root dir name specified by gcos_test entry */
     request_len					/* length of request typed by operator */
     ) fixed bin aligned;

dcl (
     ioxcode,					/* error code from iox */
     code,					/* error code */
     error_table_$noarg ext,
     error_table_$too_many_args ext,
     error_table_$badopt ext
     ) fixed bin (35) aligned;
%page;
/* bit strings */
/* --- ------- */

dcl (
     fatal_error,					/* ON when fatal error occurs during initialization */
     eof_found,					/* ON when eof is found reading cards */
     init int static init ("0"b),			/* internal static initialization switch */
     reader_is_attached int static,			/* ON when card reader is attached */
     test_entry int static				/* ON when called by user */
     ) bit (1) aligned;

dcl (
     status_stuff					/* return location for ios_ status */
     ) bit (72) aligned;
%page;
/* character strings */
/* --------- ------- */

dcl (
     gcos_daemon_stat_$snumb ext
     ) char (6) aligned;

dcl (
     w_password,					/* Password for entering admin mode. */
     delete_interval init (""),			/* days after which to delete segment */
     gcos_daemon_stat_$card_dim ext			/* variable dim name for debugging */
     ) char (8) aligned;

dcl (
     name,					/* name returned by user_info_ */
     project,					/* project returned by user_info_ */
     account					/* account returned by user_info_ */
     ) char (32) aligned;

dcl (
     request					/* request from operator */
     ) char (120) aligned;

dcl (
     dir_name,					/* loop dir name */
     gcos_daemon_stat2_$overflow_dir ext,
     gcos_daemon_stat_$default_home_dir ext,		/* default home dir for absentee jobs */
     gcos_daemon_stat_$input_dir ext,			/* input directory name */
     gcos_daemon_stat_$pool_dir ext,			/* pool directory name */
     gcos_daemon_stat_$sysdir ext,			/* sysdir directory name */
     gcos_daemon_stat_$home_root_dir ext,		/* home root dir name */
     gcos_daemon_stat_$root_dir ext,			/* root dir name */
     input_dir internal static			/* input directory name (internal) */
     ) char (168) aligned;

dcl  abspath char (168);				/* absolute path for root dir given by gcos_test entry */
%page;
/* pointers */
/* -------- */

dcl (
     arg_ptr,					/* returned by cu_$arg_ptr */
     com_p,					/* pointer to sc1>communications */
     iox_$user_io ext,
     ddp,						/* pointer to date_deleter proc */
     myp,						/* pointer to this proc */
     sp						/* overlay pointer for ios_ status */
     ) pointer aligned;
%page;
/* built in functions */
/* ----- -- --------- */

dcl (
     addr,
     index,
     null,
     substr
     ) builtin;
%page;
/* masks */
/* ----- */

dcl  arg char (arg_len) based (arg_ptr);

dcl 1 status aligned based (sp),			/* return status from ios_ */
    2 code fixed bin (35);				/* error code portion */

/* labels */
/* ------ */

dcl (
     cleanup_return
     ) label int static;


/* conditions */
/* ---------- */

dcl (
     goback,
     quit,
     record_quota_overflow
     ) condition;
%page;
/* entries */
/* ------- */

dcl  change_wdir_ ext entry (char (168) aligned, fixed bin (35) aligned);
dcl  com_err_ ext entry options (variable);
dcl  cu_$ptr_call ext entry options (variable);
dcl  cv_dec_check_ ext entry (char (*), fixed bin (35) aligned) returns (fixed bin aligned);
dcl  default_handler_$set ext entry (entry);
dcl  enter_admin_mode_ ext entry;
dcl  gcos_daemon$ entry;
dcl  gcos_daemon$overflow_handler ext entry;
dcl  gcos_daemon$quit_entry ext entry;
dcl  gcos_daemon_init_ ext entry (bit (1) aligned);
dcl  gcos_daemon_init_$gd_test ext entry (bit (1) aligned);
dcl  gcos_queue_job_$set_priority ext entry (fixed bin aligned);
dcl  gcos_read_cards_ ext entry (char (12) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35) aligned);
dcl  gcos_read_tape_ ext entry (char (120) aligned, fixed bin aligned, bit (1) aligned);
dcl  hcs_$make_ptr ext entry (ptr aligned, char (*), char (*), ptr aligned, fixed bin (35) aligned);
dcl  ioa_ ext entry options (variable);
dcl  ioa_$rsnnl ext entry options (variable);
dcl  ios_$attach ext entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$detach ext entry (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$read_ptr ext entry (ptr aligned, fixed bin aligned, fixed bin aligned);
dcl  ios_$resetread ext entry (char (*) aligned, bit (72) aligned);
dcl  logout ext entry;
dcl  new_proc ext entry;
dcl  standard_default_handler_ ext entry;
dcl  user_info_ ext entry (char (*) aligned, char (*) aligned, char (*) aligned);
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  get_wdir_ entry returns (char (168));
%page;
%include communications;

end gcos_daemon;
