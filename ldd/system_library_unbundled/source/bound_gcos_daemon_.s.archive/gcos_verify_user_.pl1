/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_verify_user_: proc (a_project, a_password, a_multics_person, a_multics_project, a_code);


/* DECLARATIONS */
/* ------------ */


/* fixed bin */

dcl (
     a_code,					/* error code (argument) */
     code						/* error code (internal) */
     ) fixed bin (35) aligned;


/* character strings */

dcl (
     a_multics_project				/* multics equivalent of gcos project (argument) */
     ) char (9) aligned;

dcl (
     a_password,					/* GCOS password (argument) */
     a_project,					/* GCOS project (argument) */
     password,					/* GCOS password (internal) */
     project					/* gcos project (internal) */
     ) char (12) aligned;

dcl (
     a_multics_person				/* multics equivalent of gcos user (argument) */
     ) char (22) aligned;


/* include files */

% include gcos_user_table_entry_;


/* external entries */

dcl  gcos_user_$validate ext entry
    (char (12) aligned, char (12) aligned, ptr aligned, fixed bin (35) aligned);


/*  */

	a_code = 0;				/* initialize returned code */
	project = a_project;			/* copy in input arguments */
	password = a_password;

	call gcos_user_$validate (project, password, gutep, code); /* validate password */

	if code = 0				/* password is valid */
	then do;
	     a_multics_person = gutep -> gcos_user_table_entry_.gute_multics_person;
	     a_multics_project = gutep -> gcos_user_table_entry_.gute_multics_project;
	end;

	else					/* some error occurred */
	do;
	     a_multics_person,
	     a_multics_project = "";
	     if code < 3				/* error is in project-password combination */
	     then a_code = 1;			/* return non-fatal error */
	     else					/* error is elsewhere */
	     a_code = 2;				/* return fatal error */
	end;

	return;

     end gcos_verify_user_;
