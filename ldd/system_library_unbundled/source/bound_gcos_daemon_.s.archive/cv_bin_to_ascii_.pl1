/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*  *****************************************************************************
   *								*
   *	Modified by RH Morrison  6/22/76				*
   *								*
   ***************************************************************************** */

cv_bin_to_ascii_: proc (a_input_ptr, a_output_ptr, a_code);


/* DECLARATIONS */
/* ------------ */


/* fixed bin */

dcl (
     direction,					/* direction of 1/2 interval search */
     i,						/* loop index */
     interval,					/* interval of 1/2 interval search */
     j,						/* loop index */
     search_index					/* index from search into binary table */
     ) fixed bin aligned;

dcl (
     a_code					/* error code */
     ) fixed bin (35) aligned;


/* pointers */

dcl (
     a_input_ptr,					/* pointer to input bit string (argument) */
     a_output_ptr,					/* pointer to output character string (argument) */
     bit_ptr,					/* pointer to input bit string (internal) */
     letter_ptr					/* pointer to output bit string (argument) */
     ) ptr aligned;


/* bit strings */

dcl (
     bin_char_not_found				/* ON until a binary table match is found */
     ) bit (1) aligned;

dcl  bin_table (0: 63) bit (12) aligned init (
     "000000000000"b,
     "000000000001"b,
     "000000000010"b,
     "000000000100"b,
     "000000000110"b,
     "000000001000"b,
     "000000001010"b,
     "000000010000"b,
     "000000010010"b,
     "000000100000"b,
     "000000100010"b,
     "000001000000"b,
     "000001000010"b,
     "000010000000"b,
     "000010000010"b,
     "000100000000"b,
     "001000000000"b,
     "001000000001"b,
     "001000000010"b,
     "001000000100"b,
     "001000000110"b,
     "001000001000"b,
     "001000001010"b,
     "001000010000"b,
     "001000010010"b,
     "001000100000"b,
     "001000100010"b,
     "001001000000"b,
     "001001000010"b,
     "001010000000"b,
     "001010000010"b,
     "001100000000"b,
     "010000000000"b,
     "010000000001"b,
     "010000000010"b,
     "010000000100"b,
     "010000000110"b,
     "010000001000"b,
     "010000001010"b,
     "010000010000"b,
     "010000010010"b,
     "010000100000"b,
     "010000100010"b,
     "010001000000"b,
     "010001000010"b,
     "010010000000"b,
     "010100000000"b,
     "011000000000"b,
     "100000000000"b,
     "100000000001"b,
     "100000000010"b,
     "100000000100"b,
     "100000000110"b,
     "100000001000"b,
     "100000001010"b,
     "100000010000"b,
     "100000010010"b,
     "100000100000"b,
     "100000100010"b,
     "100001000000"b,
     "100001000010"b,
     "100010000000"b,
     "100100000000"b,
     "101000000000"b
     );


/* character strings */

dcl  letter_table (0: 63) char (1) aligned init (
     " ",
     "9",
     "8",
     "7",
     "?",
     "6",
     ">",
     "5",
     ":",
     "4",
     "@",
     "3",
     "#",
     "2",
     "[",
     "1",
     "0",
     "z",
     "y",
     "x",
     "!",
     "w",
     """",
     "v",
     "=",
     "u",
     "%",
     "t",
     ",",
     "s",
     "_",						/* left arrow */
     "/",
     "-",
     "r",
     "q",
     "p",
     "'",
     "o",
     ";",
     "n",
     ")",
     "m",
     "*",
     "l",
     "$",
     "k",
     "j",
     "^",						/* up arrow */
     "&",
     "i",
     "h",
     "g",
     "\",
     "f",
     "<",
     "e",
     "(",
     "d",
     "]",
     "c",
     ".",
     "b",
     "a",
     "+"
     );


/* built in functions */

dcl (
     divide
     ) builtin;


/* masks */

dcl 1 columns aligned based (bit_ptr),			/* card columns */
    2 bin_char (0:79) bit (12) unaligned;		/* binary characters on card */

dcl 1 output aligned based (letter_ptr),		/* output character string */
    2 letter (0:79) char (1) unaligned;			/* each output character */

dcl  output_letters char (80) aligned based (letter_ptr);	/* for zapping characters in case of error */

/*  */

	a_code = 0;				/* initialize returned error code */
	bit_ptr = a_input_ptr;			/* copy in 2 pointer arguments */
	letter_ptr = a_output_ptr;

	do i = 0 to 79;				/* perform conversion */

	     if bin_char (i) = "0"b			/* make quick check for blank */
	     then letter (i) = " ";

	     else					/* binary character is not a blank */
	     do;

		direction = 1;			/* initialize 1/2 interval search variables */
		interval = 32;
		search_index = 0;
		bin_char_not_found = "1"b;

		do j = 1 to 6 while (bin_char_not_found); /* perform search */

		     search_index = search_index + direction * interval; /* set index */

		     if bin_char (i) = bin_table (search_index) /* match found */
		     then do;
			letter (i) = letter_table (search_index); /* set output letter */
			bin_char_not_found = "0"b;	/* turn off search flag */
		     end;

		     else				/* match not found */
		     do;				/* increment 1/2 interval search variables */
			if bin_char (i) > bin_table (search_index)
			then direction = 1;
			else
			direction = -1;
			interval = divide (interval, 2, 17, 0);
		     end;

		end;

		if bin_char_not_found		/* illegal binary character */
		then go to ERROR;

	     end;

	end;

	return;

ERROR:

	a_code = 1;				/* return error code */
	output_letters = " ";			/* zap output string */
	return;

     end cv_bin_to_ascii_;
