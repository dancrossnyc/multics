/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_read_cards_: proc (a_stream_name, a_test, a_eof_found, a_code);

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */
%page;
/*

MODIFIED: 	Scott C. Akers	31 MAR 82 To   make  use  of  the  snumb
					variable in gcos_daemon_stat_,
					rather   than  pass  it  as  a
					parameter   'twixt   all   and
					sundry.

*/
%page;
	input_ptr = addr (input);			/* pointer to card image */
	output_ptr = addr (ascii);			/* pointer to ascii card image */
	sp = addr (status_stuff);			/* pointer to returned status */

	on condition (cleanup)			/* establish cleanup condition handler */
	     call wrap_up ("1"b);

	stream_name = a_stream_name;			/* copy argument */
	code = 0;					/* initialize error code */

READ:

	call get_snumb;				/* read first card and check for "SNUMB" */
	if code > 1				/* fatal error */
	then go to RETURN;
	if eof_found				/* end of deck found */
	then go to RETURN;
	if code = 0				/* no error occurred */
	then if ^snumb_found			/* the card was not a SNUMB card */
	     then call com_err_ (0, "gcos_read_cards_", "Expected SNUMB card not found");

	if (^snumb_found)| (code = 1)			/* no SNUMB or error in input */
	then do while (^status.eof & ^eof_found);	/* search for another SNUMB card */
	     call get_snumb;
	     if code > 1
	     then go to RETURN;
	     if code = 0
	     then if (snumb_found)
		then go to RETURN;
	end;

RETURN:

	if (code>1)| (eof_found)			/* fatal error or ***eof */
	then call wrap_up ("0"b);
	if ^eof_found				/* no eof card yet */
	then go to READ;				/* try again */

	a_eof_found = eof_found;			/* return argument */
	a_code = code;				/* return error code */

	return;
%page;
/* INTERNAL PROCEDURES */
get_snumb: proc;

	     eof_found,				/* initialize flags */
		eoc_found,
		snumb_found = "0"b;

READ:
	     call ios_$read (stream_name, input_ptr, 0, 1, elements_read, status_stuff); /* read in a card */
	     code = status.code;			/* extract code from status bit string */
	     if code ^= 0				/* error reading */
	     then do;
		call com_err_ (code, "gcos_read_cards_", "Error reading from card reader");
		return;
	     end;
	     if status.eof				/* "last batch button" and eof */
	     then do;
		code = 2;				/* cause return to command level */
		return;
	     end;

	     if substr (input, 10, 2) = "101"b		/* this is a binary card */
	     then return;				/* it can't be a SNUMB card */

	     call cv_bin_to_bcd_ (input_ptr, input_ptr, code); /* convert card image to bcd */
	     if code ^= 0				/* error converting card */
	     then do;
		code = 0;				/* prevents return from external procedure */
		return;
	     end;

	     call cv_bcd_to_ascii_ (input_ptr, output_ptr);

	     if substr (ascii, 1, 1) = "$"		/* check for SNUMB card */
	     then do;
		if substr (ascii, 8, 5) = "snumb"
		then do;

		     snumb_found = "1"b;		/* got it */
		     do i = 16 to 80 while		/* find end of SNUMB */
			     ((substr (ascii, i, 1) ^= " ")&
			     (substr (ascii, i, 1) ^= ","));
		     end;
		     if i = 17			/* error, no SNUMB argument */
		     then do;
			code = 1;			/* return non-fatal error */
			call com_err_ (0, "gcos_read_cards_", "Missing argument on SNUMB card");
			return;
		     end;
		     gcos_daemon_stat_$snumb = substr (ascii, 16, i-16);

		     if substr (ascii, i, 1) = ","	/* card contains urgency field */
		     then do;
			do j = i + 1 to 80 while	/* find end of urgency field */
				(substr (ascii, j, 1) ^= " ");
			end;
			urgency = cv_dec_check_ (substr (ascii, i+1, j-i-1), code); /* pick off urgency field */
			if code ^= 0		/* error converting urgency field */
			then do;
			     call com_err_ (0,
					"gcos_read_cards_",
					"Invalid urgency field:  SNUMB = ^a",
					gcos_daemon_stat_$snumb);
			     return;
			end;
			if (urgency < 1)| (urgency > 63) /* urgency field out of bounds */
			then do;
			     call com_err_ (0,
					"gcos_read_cards_",
					"Urgency field out of bounds:  SNUMB = ^a",
					gcos_daemon_stat_$snumb);
			     return;
			end;
			urgency = divide (63-urgency, 21, 17, 0)+1; /* convert to queue number */
		     end;
		     else				/* no urgency field on card */
		     urgency = 3;			/* set default urgency */

		     if ^eoc_found			/* more input to come */
		     then do;			/* read the job */

			call gcos_read_$cards (urgency, input_ptr,
					   addr (gcos_abs_data), eoc_found,
					   code);
			if code ^= 0		/* error reading job */
			then return;

			call gcos_queue_job_ (addr (gcos_abs_data), a_test, code); /* queue the job */
			if code ^= 0		/* error queueing job */
			then return;

		     end;

		end;
	     end;

	     else					/* not SNUMB card */
	     if substr (ascii, 1, 6) = "***eof"		/* eof card */
	     then eof_found = "1"b;

	     if eoc_found				/* end of input occurred */
	     then do;
		if ^eof_found			/* ***eof card not found */
		then do;
		     call com_err_ (0, "gcos_read_cards_", "Unexpected eof:  SNUMB = ^a", gcos_daemon_stat_$snumb);
		     code = 2;
		end;
		else				/* ***eof card found */
		call ioa_ ("Normal Termination");
	     end;

	     return;

	end get_snumb;
%page;
wrap_up:	proc (cleanup_was_signalled);

dcl  cleanup_was_signalled bit (1) aligned;

	     if cleanup_was_signalled | code > 1	/* abort or fatal error */
	     then do;
		call ios_$resetread (stream_name, status_stuff); /* delete any read-ahead */
		code2 = status.code;
		if code2 ^= 0			/* error deleting read-ahead */
		then do;
		     call com_err_ (code2, "gcos_read_cards_", "Error resetting ^a", stream_name);
		     if code <= 1			/* no fatal error occurred yet */
		     then code = code2;		/* return this one */
		end;
	     end;

	     if (code ^= 0)| (cleanup_was_signalled)	/* error occurred or job was aborted */
	     then do;
		if gcos_daemon_stat_$snumb = ""
		then return;
		call hcs_$delentry_file (get_wdir_ (),
				     rtrim (gcos_daemon_stat_$snumb)||".gcos",
				     code2);
	     end;

	     a_eof_found = eof_found;			/* return argument */

	     return;

	end wrap_up;
%page;
/* DECLARATIONS */
/* ------------ */

/* fixed bin */
/* ----- --- */

dcl (
     elements_read,					/* elements read from ios_ call */
     i,						/* random variable */
     j,						/* ditto */
     urgency					/* priority queues to be used */
     ) fixed bin aligned;

dcl (
     a_code,					/* error code (argument) */
     code,					/* error code (internal) */
     code2					/* secondary internal error code */
     ) fixed bin (35) aligned;


/* bit strings */
/* --- ------- */

dcl (
     a_eof_found,					/* ON when last job card is read */
     a_test,					/* ON when user brings up daemon */
     eoc_found,					/* ON when end of read input encountered */
     eof_found,					/* ON when last card is read */
     snumb_found					/* ON when a SNUMB card is found */
     ) bit (1) aligned;

dcl (
     status_stuff					/* returned status from ios_ calls */
     ) bit (72) aligned;

dcl (
     input					/* card image */
     ) bit (972) aligned;


/* pointers */
/* -------- */

dcl (
     input_ptr,					/* pointer to card image */
     output_ptr,					/* pointer to ascii card image */
     sp						/* pointer to returned status */
     ) pointer aligned;


/* character strings */
/* --------- ------- */

dcl  gcos_daemon_stat_$snumb ext char (6) aligned;
/* dcl  snumb char (8) aligned; */

dcl (
     a_stream_name,					/* stream name on which to read (argument) */
     stream_name					/* same (internal) */
     ) char (12) aligned;

dcl (
     ascii					/* ascii card image */
     ) char (80) aligned;


/* built in */
/* ----- -- */

dcl (
     addr,
     divide,
     index,
     substr
     ) builtin;


/* masks */
/* ----- */

dcl 1 status based (sp) aligned,			/* mask for checking status from ios_ */
    2 code fixed bin aligned,
    2 pad bit (9) unaligned,
    2 eof bit (1) unaligned;


/* include files */
/* ------- ----- */

% include gcos_abs_data;

% include gcos_abs_data_storage;


/* conditions */
/* ---------- */
dcl (
     cleanup
     )condition;


/* external entries */
/* -------- ------- */

dcl  com_err_ ext entry
     options (variable);

dcl  cv_bcd_to_ascii_ ext entry
    (ptr aligned, ptr aligned);

dcl  cv_bin_to_bcd_ ext entry
    (ptr aligned, ptr aligned, fixed bin (35) aligned);

dcl  cv_dec_check_ ext entry
    (char (*) aligned, fixed bin (35) aligned) returns (fixed bin aligned);

dcl  gcos_queue_job_ ext entry
    (ptr aligned, bit (1) aligned, fixed bin (35) aligned);

dcl  gcos_read_$cards ext entry
    (fixed bin aligned, ptr aligned, ptr aligned, bit (1) aligned, fixed bin (35) aligned);

dcl  get_wdir_ ext entry
     returns (char (168) aligned);

dcl  hcs_$delentry_file ext entry
    (char (*) aligned, char (*) aligned, fixed bin (35) aligned);

dcl  ioa_ ext entry
     options (variable);

dcl  ios_$read ext entry
    (char (*) aligned, ptr aligned, fixed bin aligned, fixed bin aligned, fixed bin aligned, bit (72) aligned);

dcl  ios_$resetread ext entry
    (char (*) aligned, bit (72) aligned);


end gcos_read_cards_;
