/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

graphic_manipulator_: gm_: procedure; return;

/* graphic_manipulator_.pl1 - Entry points for maipulating a Multics standard
   graphic structure */

/* Originally coded 7/73 by Lee J. Scheffler */
/* Modified many times since by C. D. Tavares. */
/* Modified 08/79 by CDT as part of the general lsm_ overhaul */
/* Modified 03/25/80 by CDT to fix an unset pointer bug in ecolor. */
/* Modified 10/14/80 by CDT to inhibit storing of trailing zeroes
   for positional elements and some others, and to use gc_$prune_tree. */
/* Last modified 04/14/81 by CDT to make replace_element accept -1 index */

/* System entry points */

dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, pointer, fixed bin (35)),
     get_temp_segment_ ext entry (char (*), pointer, fixed bin (35));

/* System-wide error codes */

dcl (graphic_error_table_$no_wgs_yet,			/* no working graphic seg yet */
     graphic_error_table_$null_replacement,		/* tried to replace_node a node with the null node */
     graphic_error_table_$list_oob,			/* attempt to idx outside list */
     graphic_error_table_$bad_align,			/* bad alignment for char string */
     graphic_error_table_$inv_node_type,		/* invalid effector type for this operation */
     error_table_$smallarg)				/* caller-provided array is too small */
     fixed bin (35) external;

dcl  err_code fixed bin (35) parameter;			/* error code */


dcl (addr, dim, hbound, mod, null, substr) builtin;


/* Static variables */

dcl  wgs_p pointer static initial (null);		/* points to current WGS */


dcl (node_no, list_n, new_n, node_n, value_n, old_n, template_n) fixed bin (18); /* node #s */

dcl (etype, type) fixed bin,				/* Graphic effector codes */
     ltype fixed bin;				/* lsm_ block types */

dcl (curl, arrayl, idx) fixed bin;			/* lengths of various things */

dcl  effector_p pointer;

dcl  array (*) fixed bin (18);			/* array of node numbers for list creation and examination */

dcl (name,					/* name of a symbol */
     dname)					/* pathname of a directory */
     char (*);

%page;
%include graphic_etypes;
%page;
%include graphic_templates;
%page;
%include lsm_formats;
%page;
%include lsm_entry_dcls;
%page;
%include gc_entry_dcls;
%page;
init:	entry (err_code);

/* Create a working graphic segment */
/* THIS ENTRY MUST BE CALLED BEFORE ALL OTHER CALLS TO THIS PROGRAM */

	err_code = 0;

	if wgs_p = null then call get_wgs;
	call init_graphic_segment (wgs_p);
	call graphic_compiler_$prune_tree (err_code);	/* reset the tree to min size */
	return;
%skip (5);
get_wgs:	proc;

	     call get_temp_segment_ ("graphic_manipulator_ WGS", wgs_p, err_code);
	     if err_code ^= 0 then goto error_return;
	     return;
	end get_wgs;
%skip (5);
init_graphic_segment: proc (segp);

/* This internal procedure creates the graphic symbol table and chains it onto the root. */

dcl  segp pointer;

	     call lsm_fs_$init (segp, err_code);
	     if err_code ^= 0 then goto error_return;

	     call lsm_$make_blk (segp, segp -> lsm.root_symtab, symtab_type, 197 /* nice prime # */, null, err_code);
	     if err_code ^= 0 then goto error_return;

	     return;

	end init_graphic_segment;
%page;
segp:	entry (wgs_ptr, err_code);

/* Entry to get a pointer to current working graphic segment */

dcl  wgs_ptr pointer;

	wgs_ptr = wgs_p;				/* Return pointer to base of working graphic seg */
	if wgs_p = null () then goto no_wgs_yet;
	err_code = 0;
	return;

/* ------------------------------ */

check_wgs_init: proc;

	     err_code = 0;
	     if wgs_p = null () then goto no_wgs_yet;
	     return;

check_wgs_init_null_node: entry;

	     err_code = 0;
	     if wgs_p = null () then goto no_wgs_yet_null_node;
	     return;

	end check_wgs_init;

/* ------------------------------ */
%page;

/* STRUCTURE CREATION ENTRY POINTS */


/* --------------------------------------------------------------------------------------------------- */
/* Create a position effector */

create_position: cpos: entry (etype, x, y, z, err_code) returns (fixed bin (18));
dcl (x, y, z) float bin (27) parameter;			/* coordinates of position effector */

dcl  efficient_len fixed bin;

	if z = 0e0 then
	     if y = 0e0 then
		if x = 0e0 then efficient_len = 0;
		else efficient_len = 1;
	     else efficient_len = 2;
	else efficient_len = 3;

	call create_fl_effector (Setposition, Point, etype, efficient_len + 1);
						/* Get friend to do work */
	if efficient_len > 0 then effector_p -> position_effector.xpos = x;
	if efficient_len > 1 then effector_p -> position_effector.ypos = y;
	if efficient_len > 2 then effector_p -> position_effector.zpos = z;
	return (node_no);


/* --------------------------------------------------------------------------------------------------- */
/* Create  a mode effector */

create_mode: cmode: entry (etype, mode, err_code) returns (fixed bin (18));
dcl  mode fixed bin parameter;			/* mode value of mode effector */

	call create_fl_effector (Intensity, Color, etype, effector_length (etype));
	effector_p -> modal_effector.mode = mode;
	return (node_no);


/* --------------------------------------------------------------------------------------------------- */
/* Create scale effector */

create_scale: cscale: entry (xscale, yscale, zscale, err_code) returns (fixed bin (18));
dcl (xscale, yscale, zscale) float bin (27) parameter,	/* scale factors */
    (xa, ya, za) float bin (27);

	call create_fl_effector (Scaling, Scaling, Scaling, effector_length (Scaling));
	effector_p -> scale_effector.xscale = xscale;
	effector_p -> scale_effector.yscale = yscale;
	effector_p -> scale_effector.zscale = zscale;
	return (node_no);


/* --------------------------------------------------------------------------------------------------- */
/* Create rotation effector */

create_rotation: crot: entry (xangle, yangle, zangle, err_code) returns (fixed bin (18));
dcl (xangle, yangle, zangle) float bin (27);		/* rotations around respective axes */

	if zangle = 0e0 then
	     if yangle = 0e0 then
		if xangle = 0e0 then efficient_len = 0;
		else efficient_len = 1;
	     else efficient_len = 2;
	else efficient_len = 3;

	call create_fl_effector (Rotation, Rotation, Rotation, efficient_len + 1);

	xa = mod (xangle, 360e0);			/* Turn into positive angle < 360e0 */
	if xa < 0e0 then xa = xa + 360e0;
	ya = mod (yangle, 360e0);
	if ya < 0e0 then ya = ya + 360e0;
	za = mod (zangle, 360e0);
	if za < 0e0 then za = za + 360e0;

	if efficient_len > 0 then effector_p -> rotate_effector.xangle = xa;
	if efficient_len > 1 then effector_p -> rotate_effector.yangle = ya;
	if efficient_len > 2 then effector_p -> rotate_effector.zangle = za;

	return (node_no);


/* ---------------------------------------------------------------------------------------------------- */
/* Create a clipping effector */

create_clip: cclip: entry (xlow, xhigh, ylow, yhigh, zlow, zhigh, err_code) returns (fixed bin (18));

dcl (xlow, xhigh, ylow, yhigh, zlow, zhigh) float bin (27); /* relative coords of clipping solid */

dcl  graphic_error_table_$clipping_unimplemented ext fixed bin (35) static;

/* return "unimplimented" error code until clipping fully operational. */

	err_code = graphic_error_table_$clipping_unimplemented;
	return (0);

unreflabel:

/* The following code cannot be reached, and is here simply for historical interest.
   This is how clipping "worked" before we disabled it because it was not implemented. */

	call create_fl_effector (Clipping, Clipping, Clipping, effector_length (Clipping));
	effector_p -> clipping_effector.delta_left = xlow;
	effector_p -> clipping_effector.delta_right = xhigh;
	effector_p -> clipping_effector.delta_bottom = ylow;
	effector_p -> clipping_effector.delta_top = yhigh;
	effector_p -> clipping_effector.delta_back = zlow;
	effector_p -> clipping_effector.delta_front = zhigh;
	return (node_no);

/* --------------------------------------------------------------------------------------------------- */
/* Create a color effector */

create_color: ccolor: entry (int_red, int_green, int_blue, err_code) returns (fixed bin (18));
dcl (int_red, int_green, int_blue) fixed bin parameter;	/* intensities of primary additive colors */

	call create_fl_effector (Color, Color, Color, effector_length (Color));
	effector_p -> color_effector.red_intensity = int_red;
	effector_p -> color_effector.green_intensity = int_green;
	effector_p -> color_effector.blue_intensity = int_blue;
	return (node_no);


/* --------------------------------------------------------------------------------------------------- */
/* Utility procedure to create an effector of floating element type */
/* float_type lsm_ blocks are used to hold fixed bins as well */

create_fl_effector: procedure (emin, emax, etype, elen);

dcl (emin, etype, emax, elen) fixed bin;		/* minimum and maximum acceptable
						   effector codes */

	     call check_wgs_init_null_node;

	     if etype >= emin then if etype <= emax
		then do;				/* If type is proper for call */
		     call lsm_$make_blk (wgs_p, node_no, float_type, elen, node_ptr, err_code);
						/* Make block of necessary length */
		     if err_code ^= 0 then go to error_return_null_node;
		     effector_p = addr (node_ptr -> any_node.data_space);

		     effector_p -> effector.effector_code = etype; /* Fill in effector type */
		     return;
		end;

	     go to bad_type_null_node;

	end create_fl_effector;


/* --------------------------------------------------------------------------------------------------- */

/* Create a text (character string) block */

create_text: ctext: entry (alignment, nchars, text, err_code) returns (fixed bin (18));
dcl  alignment fixed bin,
     text char (*) unaligned;

	call check_wgs_init_null_node;
	call lsm_$make_blk (wgs_p, node_no, char_type, nchars+1, node_ptr, err_code);
						/* Extra char is for alignment */
	if err_code ^= 0 then return (0);

	effector_p = addr (node_ptr -> any_node.data_space);
	if alignment >= 1 then if alignment <= 9
	     then effector_p -> text_effector.alignment = alignment;
	     else go to bad_align;			/* If bad alignment */

	substr (effector_p -> text_effector.text, 1, nchars) = text; /* Copy text */
	return (node_no);

/* --------------------------------------------------------------------------------------------------- */

/* Create a data block (to hold user data values or terminal commands) */

create_data: cdata: entry (nbits, data, err_code) returns (fixed bin (18));
dcl  data bit (*) unaligned;				/* data block */

	call check_wgs_init_null_node;
	call lsm_$make_blk (wgs_p, node_no, bit_type, nbits, node_ptr, err_code);
	if err_code ^= 0 then return (0);

	effector_p = addr (node_ptr -> any_node.data_space);
	node_ptr -> bit_node.string = data;

	return (node_no);


/* --------------------------------------------------------------------------------------------------- */
/* Create a list (non-terminal) or array (terminal list) */

create_list: clist: entry (array, arrayl, err_code) returns (fixed bin (18));

dcl  i fixed bin,
     lb fixed bin,
     lbound builtin;

	ltype = list_type;
	go to list_common;

create_array: carray: entry (array, arrayl, err_code) returns (fixed bin (18));

	ltype = array_type;

list_common:
	call check_wgs_init_null_node;
	if arrayl < 0 then go to array_too_small_null_node;

	call lsm_$make_blk (wgs_p, node_no, ltype, arrayl, node_ptr, err_code); /* Create list/array block */
	if err_code ^= 0 then return (0);

	lb = lbound (array, 1);

	do i = 1 to arrayl;				/* fill in array elements */
	     node_ptr -> list_node.node (i) = array (lb);
	     lb = lb + 1;
	end;

	return (node_no);


/* --------------------------------------------------------------------------------------------------- */


/* Assign a name to the substructure specified by value_n */

assign_name: entry (name, value_n, err_code) returns (fixed bin (18));
dcl  sym_n fixed bin (18);				/* node # of a symbol node */

	call check_wgs_init_null_node;
	call lsm_sym_$symk (wgs_p, Create_symbol, name, sym_n, value_n, err_code);
						/* get lsm_ to make the new symbol block
						   and stick it in the symbol table */
	return (sym_n);

%page;

/* STRUCTURE MANIPULATION ENTRY POINTS */

/* --------------------------------------------------------------------------------------------------- */

/* Entry to locate a named structure */

find_structure: fstruc: entry (name, value_n, err_code) returns (fixed bin (18));

	call check_wgs_init_null_node;
	sym_n, value_n = 0;

	call lsm_sym_$symk (wgs_p, Find_symbol, name, sym_n, value_n, err_code);
						/* look, don't touch */
	return (sym_n);


/* --------------------------------------------------------------------------------------------------- */
/* Add an element in a list after the idx'th element */
/* if idx = 0 insert before first element */
/* if idx = -1 insert after last element */

add_element: entry (list_n, idx, new_n, err_code);

	call check_wgs_init;

	call find_list_to_alter (wgs_p, node_ptr, list_n, curl, idx, -1, err_code);
	if err_code ^= 0 then return;

	call lsm_$set_blk (wgs_p, list_n, ltype, curl + 1, node_ptr, err_code);
						/* Get lsm_ to increase block length */
	if err_code ^= 0 then return;

	if idx = -1 then node_ptr -> list_node.node (curl + 1) = new_n; /* If last node ... */
	else do;
	     do i = curl to idx + 1 by -1;		/* Move everything down one */
		node_ptr -> list_node.node (i+1) = node_ptr -> list_node.node (i);
	     end;

	     node_ptr -> list_node.node (idx+1) = new_n;
	end;
	return;


/* --------------------------------------------------------------------------------------------------- */

find_list_to_alter: proc (wgs_p, node_ptr, list_n, curl, idx, lowest_allowed, err_code);

dcl (wgs_p pointer,
     node_ptr pointer,
     list_n fixed bin (18),
     curl fixed bin,
     idx fixed bin,
     lowest_allowed fixed bin,
     err_code fixed bin (35)) parameter;

	     call lsm_$get_blk (wgs_p, list_n, ltype, curl, node_ptr, err_code);
	     if err_code ^= 0 then return;

	     if (ltype ^= list_type) & (ltype ^= array_type) then do;
		err_code = graphic_error_table_$inv_node_type;
		return;
	     end;

	     if ((idx < lowest_allowed) & (idx ^= -1)) | (idx > curl) then do;
		err_code = graphic_error_table_$list_oob;
		return;
	     end;

	     return;
	end find_list_to_alter;

/* --------------------------------------------------------------------------------------------------- */
/* Alter the node number of the idx'th element in a list */

replace_element: entry (list_n, idx, new_n, err_code) returns (fixed bin (18));

dcl  temp_idx fixed bin (18) automatic;

	call check_wgs_init_null_node;

	call find_list_to_alter (wgs_p, node_ptr, list_n, curl, idx, 1, err_code);
	if err_code ^= 0 then return (0);

	if idx = -1 then temp_idx = curl;
	else temp_idx = idx;

	node_no = node_ptr -> list_node.node (temp_idx);	/* Save for return */
	node_ptr -> list_node.node (temp_idx) = new_n;
	return (node_no);

/* --------------------------------------------------------------------------------------------------- */
/* Replace an entire substructure whose top node is "old_n" with new_n  */

replace_node: entry (old_n, new_n, err_code);

	call check_wgs_init;

	call replace_node (old_n, new_n, err_code);	/* use internal procedure common to me and remove_symbol */

replace_node: proc (old_node, new_node, err_code);

dcl (old_node, new_node) fixed bin (18) parameter,
     err_code fixed bin (35) parameter;

	     if new_node = 0 then do;
		err_code = graphic_error_table_$null_replacement; /* can't make nodes other than the zero node null */
		return;
	     end;

	     call lsm_$get_blk (wgs_p, old_node, 0, 0, null, err_code);
						/* check to make sure old_node is good node */
	     if err_code ^= 0 then return;

	     call lsm_$replace_blk (wgs_p, old_node, new_node, err_code);
						/* Destructively replace old block with copy */
	     return;

	end replace_node;

	return;

/* --------------------------------------------------------------------------------------------------- */


/* Delete a symbol from the symbol table. */

remove_symbol: entry (name, err_code);

	call check_wgs_init;

	call lsm_sym_$symk (wgs_p, Delete_symbol, name, 0, 0, err_code);
						/* delete the symbol from symbol table */
	return;

/* --------------------------------------------------------------------------------------------------- */

/* Replicate a substructure */

replicate: entry (template_n, err_code) returns (fixed bin (18));

	call check_wgs_init_null_node;
	call lsm_$replicate (wgs_p, template_n, new_n, err_code);
	if err_code ^= 0 then return (0);
	return (new_n);

%page;

/* STRUCTURE EXAMINATION ENTRY POINTS */



/* --------------------------------------------------------------------------------------------------- */
/* Examine type of node */

examine_type: etype: entry (node_n, t_nt, type, err_code);
dcl  t_nt bit (1) aligned;				/* ON if node being examined is non-terminal */

	call check_wgs_init;

	if node_n = 0 then do;
	     t_nt = "0"b;
	     type = -1;				/* null node */
	     err_code = 0;
	     return;
	end;

	call lsm_$get_blk (wgs_p, node_n, lsm_type, curl, node_ptr, err_code);
	if err_code ^= 0 then do;
	     type = -2;
	     return;
	end;

	if lsm_type <= char_type
	then t_nt = "0"b;				/* This is a terminal node */

	else if lsm_type = list_type | lsm_type = array_type | lsm_type = symbol_type then t_nt = "1"b;
	else do;
	     type = -2;
	     go to bad_type;
	end;

	if lsm_type = char_type then type = Text;
	else if lsm_type = bit_type then type = Datablock;
	else if lsm_type = list_type then type = List;
	else if lsm_type = array_type then type = Array;
	else if lsm_type = symbol_type then type = Symbol;
	else type = addr (node_ptr -> any_node.data_space) -> effector.effector_code;

	return;

/* ----------------------------------------------------------------------------------------------------- */

/* Examine a position node */

examine_position: epos: entry (node_n, etype, x, y, z, err_code);

	call check_wgs_init;
	call lsm_$get_blk (wgs_p, node_n, lsm_type, lsm_curl, node_ptr, err_code);

	x, y, z = 0e0;

	if lsm_type ^= float_type then do;
bad_etype:     etype = -2;
	     go to bad_type;
	end;

	effector_p = addr (node_ptr -> any_node.data_space);
	etype = effector_p -> position_effector.effector_code;

	if lsm_curl > 1 then x = effector_p -> position_effector.xpos;
	if lsm_curl > 2 then y = effector_p -> position_effector.ypos;
	if lsm_curl > 3 then z = effector_p -> position_effector.zpos;

	return;

/* ---------------------------------------------------------------------------------------------------- */

/* Examine a modal element */

examine_mode: emode: entry (node_n, etype, mode, err_code);

	call check_wgs_init;
	call lsm_$get_blk (wgs_p, node_n, lsm_type, lsm_curl, node_ptr, err_code);

	if lsm_type ^= float_type
	then go to bad_etype;			/* Mode masquerade as float for some reason(?) */

	effector_p = addr (node_ptr -> any_node.data_space);
	etype = effector_p -> modal_effector.effector_code;
	mode = effector_p -> modal_effector.mode;

	return;

/* ---------------------------------------------------------------------------------------------------- */

/* Examine a color element */

examine_color: ecolor: entry (node_n, int_red, int_green, int_blue, err_code);

	call check_wgs_init;
	call lsm_$get_blk (wgs_p, node_n, lsm_type, lsm_curl, node_ptr, err_code);

	effector_p = addr (node_ptr -> any_node.data_space);
	if effector_p -> effector.effector_code ^= Color
	then go to bad_etype;			/* Node being examined is not a color node */

	int_red = effector_p -> color_effector.red_intensity;
	int_green = effector_p -> color_effector.green_intensity;
	int_blue = effector_p -> color_effector.blue_intensity;

	return;

/* ---------------------------------------------------------------------------------------------------- */

/* Examine a mapping element */

examine_mapping: emap: entry (node_n, etype, farray, flen, err_code);

dcl (farray (*) float bin (27),			/* array into which go mapping values */
     flen fixed bin) parameter;			/* number of useful values in farray */

	call check_wgs_init;
	call lsm_$get_blk (wgs_p, node_n, lsm_type, lsm_curl, node_ptr, err_code);

	farray (*) = 0e0;

	if lsm_type ^= float_type
	then go to bad_etype;			/* All modes use floating values */

	effector_p = addr (node_ptr -> any_node.data_space);
	etype = effector_p -> effector.effector_code;
	if etype < Scaling | etype > Clipping then goto bad_etype;

	if dim (farray, 1) < lsm_curl - 1
	then go to array_too_small;			/* If user-supplied array is too small, complain */

	flen = lsm_curl - 1;

	lb = lbound (farray, 1);

	do i = 1 to flen;				/* Fill in array */
	     farray (lb) = effector_p -> floating_effector.data (i);
	     lb = lb + 1;
	end;

	return;


/* --------------------------------------------------------------------------------------------------- */
/* Examine contents of list node */

examine_list: elist: entry (node_n, array, arrayl, err_code);

dcl  lsm_type fixed bin,				/* lsm_ type code */
     lsm_curl fixed bin;				/* current length of lsm_ block */

	call check_wgs_init;
	call lsm_$get_blk (wgs_p, node_n, lsm_type, lsm_curl, node_ptr, err_code);
	if err_code ^= 0 then return;

	if lsm_type ^= list_type
	then if lsm_type ^= array_type
	     then do;				/* Only allow these types to be examined */
		arrayl = 0;
		go to bad_type;
	     end;

	arrayl = lsm_curl;
	call fill_array;

	return;


/* --------------------------------------------------------------------------------------------------- */

/* Internal procedure to fill array with contents of node */

fill_array: procedure;

dcl  array_max fixed bin,
     dim builtin;

	     array_max = dim (array, 1);
	     if array_max < lsm_curl then go to array_too_small;

	     lb = lbound (array, 1);

	     do i = 1 to lsm_curl;
		array (lb) = node_ptr -> list_node.node (i);
		lb = lb + 1;
	     end;

	     return;

	end;


/* --------------------------------------------------------------------------------------------------- */
/* Examine symbol table */

examine_symtab: esymtab: entry (array, arrayl, err_code);
dcl  p ptr,
     array_dim fixed bin,
     based_array (array_dim) fixed bin (18) based;

	call check_wgs_init;

	lb = lbound (array, 1);
	p = addr (array (lb));
	array_dim = hbound (array, 1) - lb + 1;		/* =_ dim (array, 1) but optimizer crumps on that */

	call lsm_sym_$sym_list (wgs_p, p -> based_array, arrayl, err_code);
	return;


/* --------------------------------------------------------------------------------------------------- */
/* Examine symbol */
examine_symbol: esymbol: entry (node_n, value_n, nchars, char_str, err_code);

	call check_wgs_init;
	call lsm_$get_blk (wgs_p, node_n, lsm_type, lsm_curl, node_ptr, err_code);
	if lsm_type ^= symbol_type then do;
	     err_code = graphic_error_table_$inv_node_type;
	     return;
	end;

	value_n = node_ptr -> symbol_node.value_node;
	call lsm_$get_blk (wgs_p, (node_ptr -> symbol_node.name_node), lsm_type, nchars, node_ptr, err_code);
	char_str = node_ptr -> char_node.string;

	return;


/* ------------------------------------------------------------------------------------------------------ */


/* Examine text block */

examine_text: etext: entry (node_n, alignment, nchars, char_str, err_code);
dcl  char_str char (*),
     nchars fixed bin;

	call check_wgs_init;
	call get_special_block (char_type);
	alignment = effector_p -> text_effector.alignment;
	nchars = lsm_curl - 1;			/* First char is alignment */
	char_str = substr (effector_p -> text_effector.text, 1, nchars);
	return;


%page;

/* STRUCTURE SAVING, PERMANENT GRAPHIC SEGMENT MANIPULATION */
/* --------------------------------------------------------------------------------------------------- */

/* Examine data block */

examine_data: edata: entry (node_n, nbits, bit_str, err_code);
dcl  bit_str bit (*),
     nbits fixed bin;

	call check_wgs_init;
	call get_special_block (bit_type);
	bit_str = node_ptr -> bit_node.string;
	nbits = lsm_curl;
	return;


/* --------------------------------------------------------------------------------------------------- */

/* Internal procedure to get a text or data block */

get_special_block: procedure (spec_type);
dcl  spec_type fixed bin;
	     err_code = 0;

	     call lsm_$get_blk (wgs_p, node_n, lsm_type, lsm_curl, node_ptr, err_code);
	     if err_code ^= 0 then go to error_return;
	     effector_p = addr (node_ptr -> any_node.data_space);
	     if lsm_type ^= spec_type then go to bad_type;
	     return;
	end;


/* --------------------------------------------------------------------------------------------------- */

/* Get the graphic structure named by "name" from the p.g.s. named "dname"
   and "ename", and merge it into the current WGS. */

get_struc: entry (dname, x_ename, name, merge_code, err_code);


dcl  merge_code fixed bin parameter,			/* Determines disposition of named substructures */
     x_ename char (*) parameter,			/* ename, possibly without suffix ".pgs" */
     ename char (32);				/* with ".pgs" suffix added */

/* Values of nerge_code */
/* 0 - Copy named substructures from PGS, error on naming conflict */
/* 1 - Copy named substructures from PGS, overwrite on naming conflict */
/* 2 - Insert identically named substrcuctures  from WGS, create symbol
   with 0 value for those that dont exist in WGS */
/* 3 - same as 2, but copy symbols from PGS if they dont already exist in WGS */

	call add_pgs_suffix;
	call move_struc ("0"b);			/* If pgs does not exist, return with error */
	return;
%skip (5);
/* ------------------------------ */

add_pgs_suffix: proc;

dcl  suffixed_name_$make ext entry (char (*), char (*), char (32), fixed bin (35));

	     call suffixed_name_$make (x_ename, "pgs", ename, err_code);
	     if err_code ^= 0 then goto error_return;
	     return;

	end add_pgs_suffix;

/* ------------------------------ */


/* --------------------------------------------------------------------------------------------------- */
/* Put graphic structure "name" from wgs to pgs */

put_struc: entry (dname, x_ename, name, merge_code, err_code);

/* Values of merge_code are same as for get_struc, but interchange WGS and PGS */

	call check_wgs_init;
	call add_pgs_suffix;
	call move_struc ("1"b);
	return;


/* --------------------------------------------------------------------------------------------------- */

/* Internal procedure to move a structure between the wgs and pgs */

move_struc: procedure (put_sw);

dcl  put_sw bit (1) aligned,				/* controls direction of movement */
     pgs_p pointer;					/* pointer to permanent graphic seg */

	     err_code = 0;
	     call lsm_fs_$init_seg (pgs_p, dname, ename, Find_seg, err_code);
						/* See if pgs already exists */
	     if pgs_p = null () then
		if ^ put_sw then goto error_return;
		else do;				/* Otherwise, must create it */
		     call lsm_fs_$init_seg (pgs_p, dname, ename, Create_seg, err_code); /* Create new lsm seg */
		     if err_code ^= 0 then go to error_return;

		     call init_graphic_segment (pgs_p);
		end;

	     if put_sw then call move_it (wgs_p, pgs_p);	/* Movement from wgs to pgs */
	     else call move_it (pgs_p, wgs_p);		/* Movement is from pgs to wgs */
	     return;



/* Internal procedure to move a structure from one gm_ seg to another */
move_it:	     procedure (from_p, to_p);

dcl (from_p, to_p) pointer,				/* pointers to gm_ segs */
    (from_val_n, from_sym_n) fixed bin (18);		/* node # in from seg of node to be moved */

		err_code = 0;

		call lsm_sym_$symk (from_p, Find_symbol, name, from_sym_n, from_val_n, err_code);
						/* look, don't touch */
						/* See if symbol exists in segment from which it will be moved */
		if err_code ^= 0 then go to error_return;

		call lsm_fs_$merge_symbol (from_p, to_p, from_sym_n, "1"b, merge_code, err_code);
		if err_code ^= 0 then return;

/* if we are moving to PGS, update the bitcount. */

		if to_p = pgs_p then do;
		     call hcs_$set_bc_seg (pgs_p, pgs_p -> lsm.free * 36, err_code);
		     if err_code ^= 0 then goto error_return;
		end;

		return;
	     end move_it;
	end move_struc;


/* --------------------------------------------------------------------------------------------------- */
/* Save current wgs in pgs specified by dname, ename */

save_file: entry (dname, x_ename, err_code);

dcl  pgs_p pointer;

dcl  hcs_$terminate_noname ext entry (pointer, fixed bin (35)),
     hcs_$set_bc_seg ext entry (pointer, fixed bin (24), fixed bin (35));

	call check_wgs_init;
	call add_pgs_suffix;
	call lsm_fs_$push (wgs_p, dname, ename, err_code);
	if err_code ^= 0 then return;

/* now be nice to the user and set the bitcount of the pgs. */
	call hcs_$initiate (dname, ename, "", 0, 1, pgs_p, err_code);
	if pgs_p = null then return;

	call hcs_$set_bc_seg (pgs_p, pgs_p -> lsm.free * 36, err_code);
	if err_code ^= 0 then return;

	call hcs_$terminate_noname (pgs_p, err_code);
	return;


/* --------------------------------------------------------------------------------------------------- */
/* Use graphic structure in pgs specified by dname, ename as the wgs */

use_file:	entry (dname, x_ename, err_code);
	err_code = 0;
	call add_pgs_suffix;
	if wgs_p = null then call get_wgs;
	call lsm_fs_$init (wgs_p, err_code);		/* Reinitialize wgs */
	if err_code ^= 0 then return;

	call lsm_fs_$pull (wgs_p, dname, ename, err_code); /* Pull in graphic structure from p.g.s. */
	return;


/* --------------------------------------------------------------------------------------------------- */


error_return_null_node: return (0);			/* Error return for entries which return a node number */

error_return: return;				/* Error return for entries that do not return anything */

bad_align: err_code = graphic_error_table_$bad_align;
	return (0);

bad_type_null_node: err_code = graphic_error_table_$inv_node_type;
	return (0);

bad_type:	err_code = graphic_error_table_$inv_node_type;
	return;

no_wgs_yet: err_code = graphic_error_table_$no_wgs_yet;
	return;

no_wgs_yet_null_node: err_code = graphic_error_table_$no_wgs_yet;
	return (0);

array_too_small_null_node: err_code = error_table_$smallarg;
	return (0);

array_too_small: err_code = error_table_$smallarg;
	return;


     end graphic_manipulator_;
