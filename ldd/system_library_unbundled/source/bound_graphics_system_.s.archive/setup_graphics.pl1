/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

setup_graphics: sg: proc;

/* This routine sets up the I/O switches for use with any terminal or offline
   graphics device. */
/* Written July 2, 1973 by C. D. Tavares */
/* Modified 07/13/77 by CDT to include -output_file and use iox_$move_attach */
/* Last modified 01/27/81 by CDT to make -offline work properly */

dcl (hcs_$set_ips_mask, hcs_$reset_ips_mask) ext entry (bit (36) aligned, bit (36) aligned),
     old_mask bit (36) aligned;

dcl  absolute_pathname_$add_suffix ext entry (char (*), char (*), char (*), fixed bin (35)),
     suffix char (32);

dcl  terminate_process_ ext entry (char (*), pointer);

dcl  iox_$attach_ioname ext entry (char (*), pointer, char (*), fixed bin (35)),
     iox_$attach_iocb ext entry (pointer, char (*), fixed bin (35)),
     iox_$find_iocb ext entry (char (*), pointer, fixed bin (35)),
     iox_$open ext entry (pointer, fixed bin, bit (1) aligned, fixed bin (35)),
     iox_$look_iocb ext entry (char (*), pointer, fixed bin (35)),
     iox_$move_attach ext entry (pointer, pointer, fixed bin (35)),
    (iox_$close, iox_$detach_iocb) ext entry (pointer, fixed bin (35)),
     iox_$modes ext entry (pointer, char (*), char (*), fixed bin (35)),
     tty_io pointer,
     iox_$user_io ext pointer;

dcl  ioa_$rsnnl ext entry options (variable);

%include iocb;

%include iox_modes;

dcl  myname char (24);

dcl  attach_description char (168) varying,
     based_atd based char (64) varying;

dcl  cu_$arg_ptr ext entry (fixed bin, pointer, fixed bin, fixed bin (35)),
     ap pointer,
     al fixed bin,
     arg char (al) based (ap);

dcl 1 term_info aligned,
    2 version initial (0),
    2 code fixed bin (35);

dcl  cu_$arg_count ext entry (fixed bin),
     nargs fixed bin;

dcl (com_err_, com_err_$suppress_name) ext entry options (variable);

dcl  gdt_segname char (168),
     error_table_$badopt ext fixed bin (35),
     error_table_$inconsistent ext fixed bin (35),
     error_table_$smallarg ext fixed bin (35),
     error_table_$noarg ext fixed bin (35);

dcl  initted bit (1) aligned internal static initial (""b),
     default_error_handler_$add_finish_handler ext entry (entry (), fixed bin (35));

dcl (null, substr) builtin;

dcl (i, j, this_known_switch) fixed bin;

dcl 1 known_switches (32) static,
    2 switch_name char (32),
    2 switch_ptr pointer,
    2 extra_switch_ptr pointer,
    2 is_online bit (1) aligned;

dcl  number_known_switches fixed bin static initial (0),
     prev_number_known_switches fixed bin;

dcl  using_file bit (1) aligned,
     mode_string char (256),
     file_name char (168),
     have_target bit (1) aligned,
     extra_switch char (32),
     extra_sw_ptr pointer,
     extra_attach_description char (168) varying,
     unique_chars_ ext entry (bit (*)) returns (char (15));

dcl 1 switch_arg_structure (10),
    2 from_name char (32),
    2 from_mode fixed bin;

dcl  total_switches fixed bin;

dcl  online_switch bit (1) aligned,
     revert_online_on_err bit (1) aligned initial (""b);

dcl  to_switch char (32);

	myname = "setup_graphics";

	if ^initted then do;			/* set up for automatic "rg" on process end */
	     initted = "1"b;
	     call default_error_handler_$add_finish_handler (remove_graphics, code);
	     if code ^= 0 then call com_err_ (code, "setup_graphics",
		"^/   Warning - remove_graphics must be called manually when desired. Continuing...");
	end;

	total_switches = 0;				/* initialize state variables */
	prev_number_known_switches = number_known_switches; /* for graceful unwind of attachments if err */
	online_switch = ""b;

	file_name, to_switch, gdt_segname, mode_string = "";
	have_target = ""b;
	using_file = ""b;

	call cu_$arg_count (nargs);			/* get number of arguments */

	if nargs = 0 then do;			/* poor soul needs guidance */
	     call com_err_ (error_table_$noarg, "setup_graphics", "Command syntax is:");
	     call com_err_$suppress_name (0, "setup_graphics",
		"     setup_graphics -table GDT_name [-from sw_1 [mode_1] ... sw_N [mode_N]] [-to switchname] [-online]");
	     return;
	end;

	if nargs = 1 then do;			/* the old, upwards-compatible case */
	     call cu_$arg_ptr (1, ap, al, code);	/* get the gdt name */
	     gdt_segname = arg;
	     from_name (1) = "graphic_output";		/* set defaults for from_names */
	     from_mode (1) = Stream_output;
	     from_name (2) = "graphic_input";
	     from_mode (2) = Stream_input;
	     total_switches = 2;			/* to_switch and online_switch set by default later */
	end;

	else do i = 1 to nargs;			/* process new-style args */

	     call cu_$arg_ptr (i, ap, al, code);	/* get next arg to process */

	     if arg = "-from" | arg = "-fm" then do;	/* from_name arg(s) */

		total_switches = total_switches + 1;	/* add one more switch to array */

		i = i + 1;			/* for getting next arg */
		call cu_$arg_ptr (i, ap, al, code);	/* which should be switch name */
		if code ^= 0 then call err (code, "No switch name after ""-from""."); /* tsk. */

		from_name (total_switches) = arg;	/* remember the switch name */
		from_mode (total_switches) = Stream_input_output; /* assume the dafault mode */

		call cu_$arg_ptr (i+1, ap, al, code);	/* peek to see if there is a mode argument */
		if code = 0 then if substr (arg, 1, 1) ^= "-" then do; /* yes there is */
			do j = lbound (short_iox_modes, 1) to hbound (short_iox_modes, 1) while (short_iox_modes (j) ^= arg);
						/* try to match it */
			end;

			if j > hbound (short_iox_modes, 1) then
			     do j = lbound (iox_modes, 1) to hbound (iox_modes, 1) while (iox_modes (j) ^= arg);
			end;

			if j > hbound (iox_modes, 1) then call err (0, "Unknown mode: " || arg);
						/* no match, bad mode */

			from_mode (total_switches) = j; /* did match, set it */
			i = i + 1;		/* set to skip that arg */
		     end;


	     end;

	     else if arg = "-to" | arg = "-switch" | arg = "-stream" then do; /* next arg is target switch */

		if have_target then call err (0, "Only one ""-output_file"" or ""-to"" control argument allowed.");

		i = i + 1;			/* prepare to snarf next arg */
		call cu_$arg_ptr (i, ap, al, code);
		if code ^= 0 then call err (code, "No switch name after ""-to"""); /* tsk! */

		to_switch = arg;			/* save it */
		have_target = "1"b;
	     end;

	     else if (arg = "-output_file" | arg = "-of" | arg = "-file") then do; /* user wants graphics into a file */

		if have_target then call err (0, "Only one ""-output_file"" or ""-to"" control argument allowed.");

		i = i + 1;
		call cu_$arg_ptr (i, ap, al, code);	/* get the file name */
		if code ^= 0 then call err (code, "No file name after ""-output_file""");

		file_name = arg;
		have_target = "1"b;
		using_file = "1"b;
	     end;

	     else if arg = "-table" | arg = "-tb" then do; /* GDT name specification */

		if gdt_segname ^= "" then call err (0, "The ""-table"" control arg may only be specified once.");

		i = i + 1;			/* prepare to get the name */
		call cu_$arg_ptr (i, ap, al, code);
		if code ^= 0 then call err (code, "No GDT name after ""-table"""); /* tsk!! */

		gdt_segname = arg;			/* save it */
	     end;

	     else if arg = "-online" then online_switch = "1"b;

	     else if arg = "-offline"			/* upwards-compatible, to go away */
	     then if to_switch = ""			/* no "-to" has been given */
		then do;
		     to_switch = "offline_graphics_";
		     have_target = "1"b;
		end;

		else;				/* forget it, "-offline" redundant, not worth the wrist-slap */

	     else if arg = "-modes" then do;		/* mode string for GDT or otherwise */

		if mode_string ^= "" then call err (0, "The ""-modes"" control arg may only be specified once.");

		i = i + 1;			/* prepare to get mode string */
		call cu_$arg_ptr (i, ap, al, code);
		if code ^= 0 then call err (code, "No mode string after ""-modes""."); /* Tsk! */

		mode_string = arg;
	     end;

	     else if i = 1 then gdt_segname = arg;	/* user used implied "-tb" option */

	     else call err (error_table_$badopt, arg);	/* don't want any, charlie. */

	end;

	if online_switch then do;			/* see if anyone else is online */
	     do i = 1 to number_known_switches while (is_online (i) = ""b);
	     end;

	     if i ^> number_known_switches		/* too bad, someone else is */
	     then call err (0, "Only one set of switches may be ""-online"" at a time.");
	end;

	if gdt_segname = "" then
	     if ^using_file then			/* ok to route to a file without a GDT */
		call err (0, "No graphic device table was specified.");

	if total_switches = 0 then do;
	     from_name (1) = "graphic_output";
	     from_name (2) = "graphic_input";
	     from_mode (1) = Stream_output;
	     from_mode (2) = Stream_input;
	     if using_file then total_switches = 1;	/* can't do input and output from same file! */
	     else total_switches = 2;
	end;

	if using_file then do;
	     if total_switches > 1 then call err (0, "Cannot use same file for two I/O switches.");
	     else if online_switch then call err (error_table_$inconsistent, "-output_file and -online");

	     if gdt_segname = "" then suffix = "graphics"; /* user putting MSGC into a file */
	     else suffix = gdt_segname;		/* user putting device-dependent code into a file */
	     call absolute_pathname_$add_suffix ((file_name), suffix, file_name, code);
	     if code ^= 0 then call err (code, rtrim (file_name, " ") || "." || suffix);
	end;

	if ^have_target then do;
	     call remove_graphics;
	     to_switch = "tty_i/o";
	     online_switch = "1"b;
	     have_target = "1"b;
	end;

	extra_switch = "";
	extra_sw_ptr = null;

	if using_file then do;
	     call ioa_$rsnnl ("vfile_ ^a", attach_description, 0, file_name);
	     if gdt_segname ^= "" then do;		/* has to be an extra switch in the middle */
		extra_switch = "sg." || unique_chars_ (""b);
		extra_attach_description = attach_description;
		call iox_$find_iocb (extra_switch, extra_sw_ptr, code);
		if code ^= 0 then call err (code, "Finding iocb of extra switch");
		call ioa_$rsnnl ("graphic_dim_ ^a graphic ^a", attach_description, 0, extra_switch, gdt_segname);
	     end;
	end;
	else call ioa_$rsnnl ("graphic_dim_ ^a graphic ^a", attach_description, 0, to_switch, gdt_segname);
						/* set up the master description */

	do i = 1 to total_switches;			/* process each -from switch given */

	     do this_known_switch = 1 to number_known_switches while (switch_name (this_known_switch) ^= from_name (i));
	     end;

	     if this_known_switch ^> number_known_switches then call remove_one_switch (this_known_switch, ""b);
						/* this switch already known, must be detached */

	     if this_known_switch > number_known_switches then do;
						/* switch was not known, add it to list */
		switch_ptr (number_known_switches+1) = null; /* make sure no window for attach unwinding code */
		number_known_switches = number_known_switches + 1;
		switch_name (number_known_switches) = from_name (i);
		is_online (number_known_switches) = online_switch;
		extra_switch_ptr (number_known_switches) = extra_sw_ptr;
	     end;

	     call iox_$attach_ioname (from_name (i), switch_ptr (this_known_switch), (attach_description), code);
						/* attach the switchname */
	     if code ^= 0 then call err (code, rtrim (from_name (i), " ") || " " || gdt_segname);
						/* however, we don't open the switch before all switches are attached properly. */
						/* This allows GDT open and close entries to specify some chars to be output. */
	end;

	if online_switch then do;			/* fiddle with user_i/o */
	     call iox_$find_iocb (to_switch, tty_io, code);
	     if code ^= 0 then call err (code, "Finding iocb of " || to_switch);

	     call ioa_$rsnnl ("graphic_dim_ ^a ^graphic", attach_description, 0, to_switch);

	     call hcs_$set_ips_mask (""b, old_mask);

	     call iox_$move_attach (iox_$user_io, tty_io, code);
	     if code ^= 0 then call terminate_process_ ("fatal_error", addr (term_info));

/* now make user_i/o go thru our dim */
	     call iox_$attach_iocb (iox_$user_io, (attach_description), code);
	     if code ^= 0 then call terminate_process_ ("fatal_error", addr (term_info));

	     call iox_$open (iox_$user_io, Stream_input_output, ""b, code);
	     if code ^= 0 then call terminate_process_ ("fatal_error", addr (term_info));

	     call hcs_$reset_ips_mask (old_mask, ""b);
	     revert_online_on_err = "1"b;		/* hedge our bets */
	end;					/* all done hacking. */

	else if extra_switch ^= "" then do;
	     call iox_$attach_iocb (extra_sw_ptr, (extra_attach_description), code);
	     if code ^= 0 then call err (code, "Attaching extra switch");

	     call iox_$open (extra_sw_ptr, Stream_output, ""b, code);
	     if code ^= 0 then call err (code, "Opening extra switch");
	end;

	do i = 1 to total_switches;			/* now that all switches attached, open them */

	     do this_known_switch = 1 to number_known_switches while (switch_name (this_known_switch) ^= from_name (i));
	     end;

	     call iox_$open (switch_ptr (this_known_switch), from_mode (i), ""b, code);
						/* open the switch */
	     if code ^= 0 then call err (code, from_name (i));

	     if mode_string ^= "" then
		call iox_$modes (switch_ptr (this_known_switch), mode_string, "", code);
	     if code ^= 0 then call err (code, rtrim (mode_string, " ") || " for " || from_name (i));

	end;

	return;

remove_graphics: rg: entry;

dcl  were_any_online bit (1) aligned;

	myname = "remove_graphics";
	prev_number_known_switches = number_known_switches; /* so "err" doesn't try to unwind too much */

	call cu_$arg_count (nargs);
	were_any_online = are_any_online ();

	if nargs = 0 then do;
rg_all:	     do i = 1 to number_known_switches;
		call remove_one_switch (i, "1"b);
	     end;

	     number_known_switches = 0;
	end;

	else do i = 1 to nargs;

	     call cu_$arg_ptr (i, ap, al, code);

	     if nargs = 1 then do;
		if arg = "-a" | arg = "-all" then goto rg_all;
	     end;

	     do j = 1 to number_known_switches while (arg ^= switch_name (j));
	     end;

	     if j > number_known_switches then call com_err_ (0, "remove_graphics", """^a"" is not a graphic switch.",
		arg);

	     else do;
		call remove_one_switch (j, "1"b);

		do j = j to number_known_switches - 1;
		     unspec (known_switches (j)) = unspec (known_switches (j+1));
		end;

		number_known_switches = number_known_switches - 1;
	     end;

	end;

	if were_any_online ^= are_any_online () then call remove_online_switch;

remove_online_switch: proc;

	     call iox_$look_iocb ("tty_i/o", tty_io, code);
	     if code ^= 0 then call err (code, "tty_i/o");

	     call hcs_$set_ips_mask (""b, old_mask);

	     call iox_$close (iox_$user_io, code);
	     if code ^= 0 then call terminate_process_ ("fatal_error", addr (term_info));

	     call iox_$detach_iocb (iox_$user_io, code);
	     if code ^= 0 then call terminate_process_ ("fatal_error", addr (term_info));

	     call iox_$move_attach (tty_io, iox_$user_io, code);
	     if code ^= 0 then call terminate_process_ ("fatal_error", addr (term_info));

	     call hcs_$reset_ips_mask (old_mask, ""b);
	end remove_online_switch;

	return;

remove_one_switch: proc (which, essential);

dcl  which fixed bin parameter,
     essential bit (1) aligned parameter;		/* need we complain if it doesn't work? */

	     call iox_$close (switch_ptr (which), code);
	     if essential then if code ^= 0 then call err (code, switch_name (which));

	     call iox_$detach_iocb (switch_ptr (which), code);
	     if essential then if code ^= 0 then call err (code, switch_name (which));

	     if extra_switch_ptr (which) ^= null then do;
		call iox_$close (extra_switch_ptr (which), code);
		if essential then if code ^= 0 then call err (code, switch_name (which));

		call iox_$detach_iocb (extra_switch_ptr (which), code);
		if essential then if code ^= 0 then call err (code, switch_name (which));
	     end;
	     return;
	end remove_one_switch;

are_any_online: proc returns (bit (1) aligned);

dcl  i fixed bin;

	     do i = 1 to number_known_switches;
		if is_online (i) then return ("1"b);
	     end;

	     return (""b);

	end are_any_online;


err:	proc (code, reason);

dcl  code fixed bin (35),
     reason char (*);

dcl  i fixed bin;

	     call com_err_ (code, myname, reason);

/* try to gracefully unwind half-baked attachments */

	     do i = number_known_switches to prev_number_known_switches + 1 by -1;
		if switch_ptr (i) ^= null then call remove_one_switch (i, ""b);
	     end;

	     if revert_online_on_err then call remove_online_switch;

	     number_known_switches = prev_number_known_switches;
	     goto returner;
	end err;

returner:	return;
     end setup_graphics;
