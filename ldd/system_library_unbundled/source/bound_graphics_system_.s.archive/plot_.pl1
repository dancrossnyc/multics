/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plot_: proc (xparam, yparam, xydim, vec_sw, symbol);

/* Multics Graphics Plotting Package
   Written circa 9/12/70 by C. D. Tavares
   Modified 03/03/75 by CDT to fix numeric values: values on axes sometimes represented logs, not values.
   Modified 06/06/75 by CDT to fix bug: user-supplied scale factors for any log plotting were not being "logged" themselves.
   Modified 04/23/80 by CDT to make values on log axes appear as "e4.5" instead of "6.997524"(!)
   and to change calls to com_err_ to sub_err_.  Also added gullibility checks in user value-setting entries
   and added heuristic to force axis values that were two orders of magnitude smaller than their compatriots to zero.
   Last modified 03/29/81 by Steve Carlock to increase the number of points that can be plotted. */


dcl (xparam (*), yparam (*)) float bin,
     code fixed bin (35),
     i fixed bin,
     ioa_$rsnnl ext entry options (variable),
     sub_err_ ext entry options (variable),
    (x (xydim) based (xptr), y (xydim) based (yptr)) float bin,
    (xptr, yptr) pointer,
    (xlabel, ylabel, title) char (100) varying static initial (""),
     symbol char (1),
     error_table_$bad_arg ext fixed bin (35) static,
    (type, grid_sw) fixed bin static initial (1),
     eq_scl_sw fixed bin static initial (0),
     vec_sw fixed bin,
     xydim fixed bin;

dcl  Plot_width float bin static options (constant) initial (8e2);

dcl  cleanup condition;

dcl  jfx fixed bin,
     log10_of_base float bin static initial (1e0),
     wipe_me fixed bin static initial (1),
    (xmin, xmax, ymin, ymax) float bin static,
    (j, vtic, htic) fixed bin,
    (abspread, jfl) float bin,
    (incrx, incry) float bin static,
     compensation float bin,
    (xlines, ylines) fixed bin internal static,
    (gxincr, gyincr) float bin static,
    (abs, binary, divide, fixed, float, index, length, log10, ltrim, max, mod, null, substr) builtin;
%page;
%include graphic_etypes;
%page;
%include plot_entry_dcls;
%page;
%include gm_entry_dcls;
%page;
%include gc_entry_dcls;
%page;

dcl (g, h) (200) fixed bin (18),
     string char (40) varying;

dcl (xcoord, ycoord, oxc, oyc) float bin,
     fig fixed bin (18),
     temp_array (1) fixed bin (18),
     current_sublist fixed bin (18),
     figure fixed bin (18);

dcl  sys_area_p pointer static initial (null),
     sys_area area based (sys_area_p),
     get_system_free_area_ ext entry returns (pointer);

	default (float) binary;			/* Let me explain why I did this: */

/* If you don't do this, all the constants in the program of the form
   1e0, 2e-1, etc. are made into decimal quantities by the compiler.  This
   is not only slow, but the compiler has bugs so that it doesn't always work.  It
   produces over and underflows, illegal procedures, no execute permissions, and
   other unpalatable things.  Maintainers, just be forewarned it's there, and why. */

	call graphic_manipulator_$init (code);		/* initialize graphics */
	if code ^= 0 then goto crump;

	if sys_area_p = null then sys_area_p = get_system_free_area_ ();

	xptr, yptr = null;

	on cleanup call clean_up;

	allocate x in (sys_area), y in (sys_area);
						/* get the arrays needed in this entry */

	do i = 1 to xydim;
	     x (i) = xparam (i);
	     y (i) = yparam (i);
	end;

	if type ^= Linear_linear then do;		/* We have some logarithms to compute... */
	     if type ^= Linear_log then call make_log (x); /* must log x values */
	     if type ^= Log_linear then call make_log (y); /* must log y values */
	end;

make_log:	proc (array);

dcl  array (*) float bin parameter;

	     do i = 1 to xydim;			/* because logb(n) = loga(n)/loga(b) */
		array (i) = log10 (array (i))/log10_of_base;
	     end;
	end make_log;


	if wipe_me = 0 then fig = 0;			/* grid already out there */

	else do;					/* first plot, must figure out some stuff */

	     if have_minmaxes then do;		/* use user-supplied scaling factors */

		if mod (type, 2) = 0 then do;		/* take log of the x axis factors */
		     xmax = log10 (static_xmax) / log10_of_base;
		     xmin = log10 (static_xmin) / log10_of_base;
		end;
		else do;				/* else the x-axis is linear, just copy */
		     xmax = static_xmax;
		     xmin = static_xmin;
		end;

		if type > 2 then do;		/* take log of the y-axis */
		     ymax = log10 (static_ymax) / log10_of_base;
		     ymin = log10 (static_ymin) / log10_of_base;
		end;
		else do;				/* else the y-axis is linear, just copy */
		     ymax = static_ymax;
		     ymin = static_ymin;
		end;
	     end;

	     else do;
		xmin, xmax = x (1);			/* find max and min values by linear sort */
		ymin, ymax = y (1);

		do i = 2 to xydim;
		     if x (i) > xmax then xmax = x (i);
		     if x (i) < xmin then xmin = x (i);
		     if y (i) > ymax then ymax = y (i);
		     if y (i) < ymin then ymin = y (i);
		end;
	     end;

	     call make_grid;

	end;

/* -------------------------------------------------------------- */

make_grid: proc;

/* Puts good-looking grid into fig */

	     call scale_plot (xmax, xmin, incrx, gxincr, xlines);
	     call scale_plot (ymax, ymin, incry, gyincr, ylines);

scale_plot:    proc (maxval, minval, incrval, gincrval, nlines); /* figures out proper dimensions and tic values */

dcl (maxval, minval, incrval, gincrval) float bin parameter,
     nlines fixed bin parameter;

dcl  spread float bin,
     fixjunk fixed bin,
     floatjunk float bin;

		spread = maxval - minval;

		if spread = 0e0 then		/* flat line graph */
		     if minval = 0e0 then do;		/* at zero, yet */
			minval = -1e-2;		/* as good as anything */
			maxval = 1e-2;
			spread = 2e-2;
		     end;
		     else do;			/* flat line but not at zero */
			maxval = maxval + (0.1e0 * abs (maxval));
			minval = minval - (0.1e0 * abs (minval));
			spread = maxval - minval;
		     end;

		floatjunk = log10 (spread);		/* what power of ten are we talking about */
		if floatjunk < 0 then floatjunk = floatjunk - 1e0; /* adjust for funnies in definition of log */
		fixjunk = floatjunk;		/* discard the mantissa */
		abspread = spread / 1e1**fixjunk;	/* abspread is a "non-dimensionalized spread", guaranteed */
						/* to be: 1e0 <= abspread < 10e0 */

/* Now we figure out useful values for the tic marks.  We will increment tic marks by the following non-dimensionalized
   values only: 1, 2, 2.5, and 5.  This makes the graph more readable than if we chose to increment them by
   1.275 or something like that.  The following algorithm is guaranteed to produce a plot of 5 to 11 intervals (6 to 12 lines)
   using one of the useful interval values.  The cutoff constants in the code below are chosen from the
   maximum range of values representable on a 12-line plot at each interval value. */

		if abspread < 1.1e0 then incrval = 1.00000e1 ** (fixjunk - 1); /* use interval of 1 */
		else if abspread < 2.2e0 then incrval = 0.200000e0 * 1e1 ** fixjunk; /* use interval of 2 */
		else if abspread < 2.75 then incrval = 0.2500000e0 * 1e1 ** fixjunk; /* use interval of 2.5 */
		else if abspread < 5.5 then incrval = 0.5000000e0 * 1e1 ** fixjunk; /* use interval of 5 */
		else incrval = 1e1 ** fixjunk;	/* use interval of 1 at one higher power (10) */

		if minval < 0 then compensation = -.99999e0; /* round to next wider integer */
		else compensation = 0;

		minval = fixed (binary (minval / incrval) + compensation) * incrval;

		if maxval < 0 then compensation = 0;	/* round to next wider integer */
		else compensation = .99999e0;

		maxval = fixed (binary (maxval / incrval) + compensation) * incrval;

		nlines = (maxval - minval) / incrval + 1e-1; /* number of lines in grid */
		gincrval = Plot_width / nlines;	/* in points */

		return;

	     end scale_plot;

	     if eq_scl_sw = Equal_scaling then do;	/* user wants graph scaled equally on both axes */
		if incrx < incry then do;
		     gxincr = gyincr;
		     xlines = ylines;
		     incrx = incry;
		end;
		else do;
		     gyincr = gxincr;
		     ylines = xlines;
		     incry = incrx;
		end;
		jfl = max (xmax - xmin, ymax - ymin);
		xmin = (xmax + xmin)/2e0 - jfl/2e0;
		xmax = xmin + jfl;
		ymin = (ymax + ymin)/2e0 - jfl/2e0;
		ymax = ymin + jfl;
	     end;

/* BEGIN GRAPHIC GRID GENERATION */

	     if grid_sw = No_grid then do;		/* no grid wanted */
		fig = 0;
		return;
	     end;


	     if grid_sw = Tick_marks then do;		/* two axes with tic marks */
		g (1) = graphic_manipulator_$create_position (Shift, -5e0, 0e0, 0e0, code); /* create tic marks */
		if code ^= 0 then goto crump;
		g (2) = graphic_manipulator_$create_position (Vector, 1e1, 0e0, 0e0, code);
		if code ^= 0 then goto crump;
		g (3) = graphic_manipulator_$create_position (Shift, -5e0, 0e0, 0e0, code);
		if code ^= 0 then goto crump;
		htic = graphic_manipulator_$create_array (g, 3, code);
		if code ^= 0 then goto crump;
		g (1) = graphic_manipulator_$create_position (Shift, 0e0, -5e0, 0e0, code);
		if code ^= 0 then goto crump;
		g (2) = graphic_manipulator_$create_position (Vector, 0e0, 1e1, 0e0, code);
		if code ^= 0 then goto crump;
		g (3) = graphic_manipulator_$create_position (Shift, 0e0, -5e0, 0e0, code);
		if code ^= 0 then goto crump;
		vtic = graphic_manipulator_$create_array (g, 3, code);
		if code ^= 0 then goto crump;

		g (1) = graphic_manipulator_$create_mode (Linetype, Dashed, code);
		if code ^= 0 then goto crump;
		g (2) = graphic_manipulator_$create_position (Setposition, -35e1, -4e2, 0e0, code);
		if code ^= 0 then goto crump;

		do i = 3 to 2 * xlines + 1 by 2;	/* create two axes grid with tic marks in graphic structure */
		     g (i) = graphic_manipulator_$create_position (Vector, gxincr, 0e0, 0e0, code);
		     if code ^= 0 then goto crump;
		     g (i+1) = vtic;
		end;

		g (i) = graphic_manipulator_$create_position (Setposition, -35e1, -4e2, 0e0, code);
		if code ^= 0 then goto crump;

		do i = i + 1 to i + 2 * ylines - 1 by 2;
		     g (i) = graphic_manipulator_$create_position (Vector, 0e0, gyincr, 0e0, code);
		     if code ^= 0 then goto crump;
		     g (i+1) = htic;
		end;
	     end;

	     else do;
		if grid_sw = Solid_grid then g (1) = graphic_manipulator_$create_mode (Linetype, Solid, code); /* want solid grid */
		else g (1) = graphic_manipulator_$create_mode (Linetype, Dashed, code); /* default is dashed grid */
		if code ^= 0 then goto crump;
		g (2) = graphic_manipulator_$create_position (Setposition, -35e1, -4e2, 0e0, code);
		if code ^= 0 then goto crump;
		do i = 3 to xlines * 2 + 1 by 2;	/* draw x lines */
		     g (i) = graphic_manipulator_$create_position (Vector, 0e0, Plot_width, 0e0, code);
		     if code ^= 0 then goto crump;
		     g (i+1) = graphic_manipulator_$create_position (Setposition, float (divide (i-1, 2, 17, 0) * gxincr - 350), -4e2, 0e0, code);
		     if code ^= 0 then goto crump;
		end;
		g (i) = g (3);
		g (i+1) = g (2);
		jfx = i;
		do i = i+2 to ylines * 2 + i by 2;	/* draw y lines */
		     g (i) = graphic_manipulator_$create_position (Vector, Plot_width, 0e0, 0e0, code);
		     if code ^= 0 then goto crump;
		     g (i+1) = graphic_manipulator_$create_position (Setposition, -35e1, float (divide (i-jfx, 2, 17, 0) * gyincr - 400), 0e0, code);
		     if code ^= 0 then goto crump;
		end;
		g (i) = g (jfx + 2);
		i = i + 1;
	     end;

	     jfx = i;				/* save running position variable */
	     do i = 0 to ylines;			/* draw y coordinate values */
		jfl = ymin + i * incry;
		if abs (jfl) * 1e2 < incry then jfl = 0e0; /* anything that much less than increment gotta be zero */
		call ioa_$rsnnl ("^[^6f^;^7f^]", string, 0, (type > 2), jfl);
		if index (string, "e") > 0 then call ioa_$rsnnl ("^[^3e^;^4e^]", string, 0, (type > 2), jfl);
		string = ltrim (string);
		if substr (string, length (string), 1) = "." then
		     string = substr (string, 1, length (string) - 1);
		if type > 2 then string = "e" || string;
		g (jfx+2*i) = graphic_manipulator_$create_position (Setposition, -370, float (i*gyincr - 400), 0e0, code);
		if code ^= 0 then goto crump;
		g (jfx + 1+2*i) = graphic_manipulator_$create_text (Right, length (string), (string), code);
		if code ^= 0 then goto crump;
	     end;

	     jfx = jfx + 2 * ylines + 2;
	     do i = 0 to xlines;			/* draw x coordinate values */
		jfl = xmin + i * incrx;
		if abs (jfl) * 1e2 < incrx then jfl = 0e0; /* anything that much less than increment gotta be zero */
		call ioa_$rsnnl ("^[^6f^;^7f^]", string, 0, (mod (type, 2) = 0), jfl);
		if index (string, "e") > 0 then call ioa_$rsnnl ("^[^3e^;^4e^]", string, 0, (mod (type, 2) = 0), jfl);
		string = ltrim (string);
		if substr (string, length (string), 1) = "." then
		     string = substr (string, 1, length (string) - 1);
		if mod (type, 2) = 0 then string = "e" || string;
		if mod (i, 2) = 1
		then g (jfx+2*i) = graphic_manipulator_$create_position (Setposition, float (i*gxincr - 350), -41e1, 0e0, code);
		else g (jfx+2*i) = graphic_manipulator_$create_position (Setposition, float (i*gxincr - 350), -44e1, 0e0, code);
		if code ^= 0 then goto crump;
		g (jfx + 1+2*i) = graphic_manipulator_$create_text (Upper_center, length (string), (string), code);
		if code ^= 0 then goto crump;
	     end;

	     i = jfx + 2 * xlines + 2;		/* update running position counter */
	     g (i) = graphic_manipulator_$create_mode (Linetype, Solid, code); /* get back to solid mode wherever we are */
	     if code ^= 0 then goto crump;

	     if xlabel ^= "" then do;
		g (i+1) = graphic_manipulator_$create_position (Setposition, 50, -500, 0, code);
		if code ^= 0 then goto crump;
		g (i+2) = graphic_manipulator_$create_text (Lower_center, length (xlabel), (xlabel), code);
		if code ^= 0 then goto crump;
	     end;
	     else g (i+1), g (i+2) = 0;		/* called from FORTRAN and don't want label */
	     if ylabel ^= "" then do;
		jfx = float (length (ylabel))/2e0 * 2.5e1; /* 25 is dist, between chars */
		do j = 1 to length (ylabel);		/* make it come out vertical */
		     h (2*j-1) = graphic_manipulator_$create_position (Setposition, -51e1, float (jfx - 25*j), 0e0, code);
		     if code ^= 0 then goto crump;
		     h (2*j) = graphic_manipulator_$create_text (Upper_center, 1, substr (ylabel, j, 1), code);
		     if code ^= 0 then goto crump;
		end;
		g (i+3) = graphic_manipulator_$create_array (h, 2*j-2, code);
		if code ^= 0 then goto crump;
	     end;
	     else g (i+3) = 0;

	     if title ^= "" then do;
		h (1) = graphic_manipulator_$create_position (Setposition, 50, 450, 0, code);
		if code ^= 0 then goto crump;
		h (2) = graphic_manipulator_$create_text (Lower_center, length (title), (title), code);
		if code ^= 0 then goto crump;
		g (i+4) = graphic_manipulator_$create_array (h, 2, code);
		if code ^= 0 then goto crump;
	     end;

	     else g (i+4) = 0;


	     fig = graphic_manipulator_$create_array (g, i+4, code);
	     if code ^= 0 then goto crump;
	     return;

	end make_grid;

/* -------------------------------------------------------------- */

/* BEGIN FIGURE GENERATION */

/* initialize the list with the grid (if it exists) */

	temp_array (1) = fig;

	current_sublist = graphic_manipulator_$create_array (temp_array, 1, code);

	if (code ^= 0)
	then goto crump;

	figure = current_sublist;			/* The 'master' list */

/* plot points of figure */

	do i = 1 to xydim;

	     xcoord = fixed ((x (i)-xmin) * gxincr / incrx - 350);
	     ycoord = fixed ((y (i)-ymin) * gyincr / incry - 400);
	     if i = 1 then fig = graphic_manipulator_$create_position (Setposition, xcoord, ycoord, 0e0, code);
	     else if vec_sw < Symbols_only
	     then fig = graphic_manipulator_$create_position (Vector, xcoord - oxc, ycoord - oyc, 0, code);
	     else fig = graphic_manipulator_$create_position (Shift, xcoord - oxc, ycoord - oyc, 0e0, code); /* doesn't want connecting Vectors */
	     if code ^= 0 then goto crump;

	     call append_element (fig, code);

	     if (code ^= 0)
	     then goto crump;

	     if vec_sw >= Vectors_and_symbols then do;

		fig = graphic_manipulator_$create_text (Center, 1, symbol, code); /* wants symbol plotted in place of Point */
		if code ^= 0 then goto crump;

		call append_element (fig, code);

		if (code ^= 0)
		then goto crump;

	     end;

	     oxc = xcoord; oyc = ycoord;		/* here we go round the loop */
	end;

	figure = graphic_manipulator_$assign_name ("plot_display_list_", (figure), code);
	if code ^= 0 then goto crump;

	if wipe_me = 1 then call graphic_compiler_$display (figure, code); /* we want an erase */
	else call graphic_compiler_$display_append (figure, code); /* scribble over what's up there */
	eq_scl_sw, wipe_me = 0;			/* reset static stuff */
	have_minmaxes = ""b;
	xlabel, ylabel, title = "";
	grid_sw = 1;
	if code ^= 0 then
crump:	     call sub_err_ (code, "plot_", "h", null, 0, "Error while creating plot.");

	call clean_up;

clean_up:	proc;

	     if xptr ^= null then free x in (sys_area);
	     if yptr ^= null then free y in (sys_area);

	end clean_up;

	return;

/* The following entries are used to set certain static variables
   so that plot_ knows exactly what to do on each call.
   $scale uses common code.

   $initf is an init callable from FORTRAN. */


setup:	entry (title1, xlabel1, ylabel1, type1, base1, grid_sw1, eq_scl_sw1);

dcl  rtrim builtin;

	title = rtrim (title1);

init:	entry (xlabel1, ylabel1, type1, base1, grid_sw1, eq_scl_sw1);

dcl (xlabel1, ylabel1, title1) char (*),
    (type1, grid_sw1, eq_scl_sw1) fixed bin,
     base1 float bin;

dcl  base float bin static;

	xlabel = rtrim (xlabel1);
	ylabel = rtrim (ylabel1);
	call initialize_rest_of_stuff;
	return;

/* ---------------------------------------- */

initialize_rest_of_stuff: proc;

	     type = validate (type1, Linear_linear, Log_log, Linear_linear, "type", "linear-linear");
	     grid_sw = validate (grid_sw1, Tick_marks, No_grid, Dotted_grid, "grid_sw", "dotted grid");
	     eq_scl_sw = validate (eq_scl_sw1, Normal_scaling, Equal_scaling, Normal_scaling, "eq_scl_sw", "normal scaling");
	     wipe_me = 1;
	     have_minmaxes = ""b;
	     base = base1;
	     if base <= 0e0 then log10_of_base = 0;
	     else log10_of_base = log10 (base);

	end initialize_rest_of_stuff;

/* ---------------------------------------- */

initf:	entry (xlabel1, i1, ylabel1, j1, type1, base1, grid_sw1, eq_scl_sw1);

dcl (i1, j1) fixed bin;

	xlabel = substr (xlabel1, 1, max (0, i1));
	ylabel = substr (ylabel1, 1, max (0, j1));
	call initialize_rest_of_stuff;
	return;

/* ----------------------------------------------- */

validate:	proc (inval, minval, maxval, defaultval, item, description) returns (fixed bin);

dcl (inval, minval, maxval, defaultval) fixed bin parameter,
    (item, description) char (*) parameter;

	     if inval ^< minval then
		if inval ^> maxval then
		     return (inval);

	     call sub_err_ (error_table_$bad_arg, "plot_", "h", null, 0,
		"^a (^d) not between ^d and ^d.^/Type ""start"" for default value (^a).",
		item, inval, minval, maxval, description);
	     return (defaultval);

	end validate;

/* ----------------------------------------------- */

scale:	entry (xmin1, xmax1, ymin1, ymax1);

dcl (xmin1, xmax1, ymin1, ymax1) float bin parameter,
    (static_xmin, static_xmax, static_ymin, static_ymax) float bin static initial (0),
     have_minmaxes bit (1) aligned static initial (""b);

	if have_minmaxes then return;
	call check_range ("x", xmin1, xmax1);
	call check_range ("y", ymin1, ymax1);
	have_minmaxes = "1"b;
	static_xmin = xmin1;
	static_xmax = xmax1;
	static_ymin = ymin1;
	static_ymax = ymax1;
	return;

/* ------------------------------------------ */

check_range: proc (axisname, minval, maxval);

dcl  axisname char (1) parameter,
    (minval, maxval) float bin parameter;

	     if minval < maxval then return;

	     call sub_err_ (error_table_$bad_arg, "plot_", "h", null, 0,
		"Specified minimum value for ^a axis (^f) not less than max value (^f).^/Type ""start"" to use default scaling.",
		axisname, minval, maxval);
	     goto return_and_forget_it;

	end check_range;

return_and_forget_it: return;

/* ------------------------------------------ */
%page;
append_element: proc (item, code);

dcl  item fixed bin (18);
dcl  code fixed bin (35);

dcl  temp fixed bin (18);
dcl  fudge (2) fixed bin (18);
dcl  graphic_error_table_$lsm_blk_len fixed bin (35) static external;

	     call graphic_manipulator_$add_element (current_sublist, -1, item, code);

	     if (code ^= graphic_error_table_$lsm_blk_len) /* it worked or it */
	     then return;				/* was something we couldn't handle */

	     fudge (1) = 0;				/* leave room for what is now at */
						/* the end of the current sublist */

	     fudge (2) = item;			/* the new item goes in slot number 2 */

	     temp = graphic_manipulator_$create_array (fudge, 2, code);
						/* create the 'new' current sublist */

	     if (code ^= 0)
	     then return;				/* caller handles any errors */

	     fudge (1) = graphic_manipulator_$replace_element (current_sublist, -1, temp, code);
						/* now chain the new list onto the end of the old list. */
						/* By doing things this way,  we don't have to worry about */
						/* copying active modes from one list to another */

	     if (code ^= 0)
	     then return;

	     current_sublist = temp;			/* make the new list the current list. */

	     temp = graphic_manipulator_$replace_element (current_sublist, 1, fudge (1), code);
						/* save the old item we took */
						/* from the old list in it's proper */
						/* position */

	     return;				/* and return with whatever code resulted. */

	end append_element;

     end plot_;
