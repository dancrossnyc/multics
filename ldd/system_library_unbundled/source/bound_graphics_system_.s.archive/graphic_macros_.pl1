/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


graphic_macros_: gmc_: proc;
	return;

/* This proc  is a catch-all in which to implement common complex
   graphic objects of general use.
   Written on and off from 11/10/74 to 05/06/76 by C. D. Tavares as the basis for a replacement
   for gui_. */

%include gm_entry_dcls;

%include graphic_etypes;

	
box:	entry (x_side, y_side, code) returns (fixed bin (18));

dcl (x_side, y_side) float bin parameter,
     code fixed bin (35) parameter;

dcl  node_array (10) fixed bin (18),
     node fixed bin (18);


	node_array (1) = graphic_manipulator_$create_position (Vector, x_side, 0, 0, code);
	node_array (2) = graphic_manipulator_$create_position (Vector, 0, y_side, 0, code);
	node_array (3) = graphic_manipulator_$create_position (Vector, -x_side, 0, 0, code);
	node_array (4) = graphic_manipulator_$create_position (Vector, 0, -y_side, 0, code);

	node = graphic_manipulator_$carray (node_array, 4, code);

	return (node);

error_return:
	return (0);


circle:	entry (x_dist, y_dist, code) returns (fixed bin (18));

/* This entrypoint draws a circle centered at (x, dist, y_dist) from your current position. */

dcl (x_dist, y_dist) float bin parameter,
     Undefined fixed bin static initial (-1);

	node = closed_curve (x_dist, y_dist, 1, Undefined, (Undefined), (Undefined), (Undefined), code);
	return (node);

arc:	entry (x_dist, y_dist, fraction, code) returns (fixed bin (18));

/* This entry is like arc, but the fraction determines how much of a circle the resultant arc is. */
/* If the fraction is negative, arc will be drawn clockwise, &vv */

dcl  fraction float bin parameter;

	node = closed_curve (x_dist, y_dist, fraction, Undefined, (Undefined), (Undefined), (Undefined), code);
	return (node);

polygon:	entry (x_dist, y_dist, n_sides, code) returns (fixed bin (18));

/* This is like circle, but there are a definite number of sides desired. */
/* If n_sides is negative the polygon will be drawn clockwise, but what of it? */

dcl  n_sides fixed bin parameter;

	node = closed_curve (x_dist, y_dist, 1, n_sides, (Undefined), (Undefined), (Undefined), code);
	return (node);

ellipse:	entry (x_dist, y_dist, eccentricity, eccentricity_angle, fraction, code) returns (fixed bin (18));

/* This entry draws an ellipse.  It assumes your current position is on the ellipse,
   the epicenter (geographical center) of the ellipse is (x_dist, y_dist) from you, the eccentricity (the major
   axis over the minor axis, not the textbook definition) is given, and the eccentricity angle is the angle
   that the major axis makes with the x axis.  The fraction is measured in RADIAL DEGREES;  therefore, with
   eccentricity angles of around 45 degrees, asking for 3/4 ellipse can get you almost the whole thing. */

dcl  eccentricity float bin parameter,
     eccentricity_angle fixed bin parameter;

dcl (sind, cosd, atand) builtin;

dcl (rotated_x, rotated_y) float bin;

dcl (a, b) float bin;


	rotated_x = - x_dist * cosd (eccentricity_angle) - y_dist * sind (eccentricity_angle);
	rotated_y = x_dist * sind (eccentricity_angle) - y_dist * cosd (eccentricity_angle);

	a = sqrt (eccentricity * eccentricity * rotated_y * rotated_y + rotated_x * rotated_x);
	b = a / eccentricity;

	node = closed_curve (x_dist, y_dist, fraction, Undefined, a, b, (eccentricity_angle), code);
	return (node);


ellipse_by_foci: entry (x_dist1, y_dist1, x_dist2, y_dist2, fraction, code) returns (fixed bin (18));

/* This also draws an ellipse, whose foci are at (x_dist1, y_dist1) and (x_dist2, y_dist2) from you. */

dcl (x_dist1, y_dist1, x_dist2, y_dist2) float bin parameter;

dcl (rad_1, rad_2,					/* radii from each focus to any pt on ellipse */
     c,						/* half distance between foci */
     epicenter_dx, epicenter_dy,			/* rel. dists to geometric ctr of ellipse */
     epiradius,					/* distance to geometric ctr of ellipse */
     temp) float bin;				/* random optimization temporary */

dcl  computed_eccentricity_angle float bin;


	rad_1 = sqrt (x_dist1 ** 2 + y_dist1 ** 2);
	rad_2 = sqrt (x_dist2 ** 2 + y_dist2 ** 2);

	c = sqrt ((x_dist2 - x_dist1) ** 2 + (y_dist2 - y_dist1) ** 2) / 2;

	epicenter_dx = (x_dist1 + x_dist2) / 2;
	epicenter_dy = (y_dist1 + y_dist2) / 2;

	epiradius = sqrt (epicenter_dx ** 2 + epicenter_dy ** 2);

	temp = x_dist2 - x_dist1;
	if temp = 0 then computed_eccentricity_angle = -90;
	else computed_eccentricity_angle = atand ((y_dist2 - y_dist1) / temp);

	a = (rad_1 + rad_2) / 2;
	b = sqrt (a * a - c * c);

	node = closed_curve (epicenter_dx, epicenter_dy, fraction, Undefined, a, b, computed_eccentricity_angle, code);
	return (node);

	

/* ----------------------------- */

closed_curve: proc (x_dist, y_dist, fraction, n_sides, a, b, eccentricity_angle, code) returns (fixed bin (18));

/* Closed curve algorithm largely courtesy Sally Duren, from old gui_. */

dcl (x_dist, y_dist, fraction) float bin parameter,
     n_sides fixed bin parameter,
    (a, b) float bin parameter,
     eccentricity_angle float bin,
     elliptical bit (1),
    (cos_theta, sin_theta) float bin,
     code fixed bin (35) parameter,
     node fixed bin (18);

dcl (radius, x, y, old_x, old_y, delta, delta_x, delta_y, avg_radius, temp_delta) float bin,
     save_dx float bin,
     save_x float bin,
     i fixed bin,
     node_array (400) fixed bin (18),
     array_ct fixed bin,
     steps fixed bin,
     acosd_ ext entry (float bin) returns (float bin),
     stretch float bin,
     target_theta float bin,
     theta float bin;

	     code = 0;

	     radius = sqrt (x_dist ** 2 + y_dist ** 2);
	     if radius = 0 then return (0);		/* sure... */

	     elliptical = a ^= Undefined;		/* a is undefined for all but ellipses */
	     stretch = a/b;				/* major axis / minor axis */
	     if stretch < 1e0 then stretch = 1e0/stretch; /* user specified eccentricity < 1e0 */

	     if n_sides = Undefined then steps = abs (fraction * ((radius / 6) + (20 * stretch)));
						/* a pretty good random function */
	     else steps = n_sides;			/* polygon case */
	     steps = min (steps, hbound (node_array, 1)); /* so we dont overstep array */
	     delta, temp_delta = fraction * 360 / steps;	/* angular increment */

	     if elliptical then do;			/* swing the curpos through -eccentricity_angle */
		old_x = -x_dist; old_y = - y_dist;
		avg_radius = (a+b)/2;		/* the average radius of the ellipse */
	     end;

	     else do;
		old_x = -x_dist;
		old_y = -y_dist;
		avg_radius = radius;
	     end;

	     theta = acosd_ (max (-1, min (1, old_x/radius))); /* current angle with x axis */
						/* acosd_ gets moby upset at the slightest bit over 1 or under -1 */
	     if y_dist > 0 then theta = 360 - theta;
	     if elliptical then theta = theta - eccentricity_angle;
	     target_theta = theta + fraction * 360;	/* final angle */

	     array_ct = 0;

	     sin_theta = sind (theta);
	     cos_theta = cosd (theta);

	     if elliptical then			/* have to fudge ahead of time */
		radius = a * b / sqrt (b * b * cos_theta * cos_theta + a * a * sin_theta * sin_theta);

	     old_x = radius * cos_theta;
	     old_y = radius * sin_theta;

	     do i = 1 to steps while (theta ^= target_theta);

		if elliptical then temp_delta = delta * avg_radius / radius;
						/* this makes the angles smaller near the points so */
						/* the curve is smoother there */
		theta = theta + temp_delta;		/* increment the angle */

		if temp_delta < 0 then theta = max (theta, target_theta); /* don't run past end */
		else theta = min (theta, target_theta);

		sin_theta = sind (theta);
		cos_theta = cosd (theta);

		if elliptical then
		     radius = a * b / sqrt (b * b * cos_theta * cos_theta + a * a * sin_theta * sin_theta);

		x = radius * cos_theta;
		y = radius * sin_theta;

		delta_x = x - old_x;		/* coords of difference vector */
		delta_y = y - old_y;

		old_x = x; old_y = y;

		if elliptical then do;
		     save_dx = delta_x;		/* rotate the difference vector thru eccentricity_angle */
		     delta_x = delta_x * cosd (eccentricity_angle) - delta_y * sind (eccentricity_angle);
		     delta_y = save_dx * sind (eccentricity_angle) + delta_y * cosd (eccentricity_angle);

		     save_x = x;			/* also the current position */
		     x = x * cosd (eccentricity_angle) - y * sind (eccentricity_angle);
		     y = save_x * sind (eccentricity_angle) + y * cosd (eccentricity_angle);
		end;

		array_ct = array_ct + 1;
		node_array (array_ct) = graphic_manipulator_$create_position (Vector, delta_x, delta_y, 0, code);
		if code ^= 0 then return (0);
	     end;

	     node = graphic_manipulator_$create_array (node_array, array_ct, code); /* list them up */
	     if code ^= 0 then return (0);

	     return (node);
	end closed_curve;

/* ----------------------------- */


     end;
