/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* This program interprets error messages from intelligent graphic terminals.
   Coded about Sept 1973 by C. D. Tavares
   Last modified 2/10/75 by C. D. Tavares to make list indices DPI from SPI. */
graphic_terminal_status_: proc;
	return;

decode:	entry (instring, error_code);

dcl  instring char (*) parameter,
     error_code fixed bin parameter;

dcl  code fixed bin;

dcl  keep_instring char (100) aligned static varying,
     depth fixed bin static,
     path (25) fixed bin static,
     node fixed bin static,
     static_error_code static fixed bin,
     error_char char (1) static,
     temp_array (1) fixed bin,
     temp_string char (32);

dcl  initted bit (1) static initial (""b) aligned,
     error_list (0:64) static internal fixed bin (35) initial ((65) -1);

%include graphic_code_dcl;

	keep_instring = instring;
	depth, node = 0;
	error_char = "@";				/* no error */

	if substr (keep_instring, 1, 1) ^= Node_begin_char then do;
	     code = 64;
	     goto return_error;
	end;

	temp_string = substr (keep_instring, 2, 1);

	call graphic_code_util_$decode_spi (addr (temp_string), 1, temp_array);
	code = temp_array (1);

	if code = 0 then do;
	     if length (keep_instring) ^= 4 then code = 64;
	     else if substr (keep_instring, 3, 1) ^= Node_end_char then code = 64;
	     else return;
	end;

	error_char = substr (keep_instring, 3, 1);

	temp_string = substr (keep_instring, 4, 3);
	call graphic_code_util_$decode_uid (addr (temp_string), 1, temp_array);
	node = temp_array (1);

	temp_string = substr (keep_instring, 7, 1);
	call graphic_code_util_$decode_spi (addr (temp_string), 1, temp_array);
	depth = temp_array (1);

	temp_string = substr (keep_instring, 8, depth*2);
	call graphic_code_util_$decode_dpi (addr (temp_string), depth, path);

	if length (keep_instring) ^= 9 + depth*2 then code = 64;
	if substr (keep_instring, 8 + depth*2, 1) ^= Node_end_char then code = 64;

return_error:
	if ^initted then call initialize_error_list;

	error_code, static_error_code = error_list (code);
	return;

initialize_error_list: proc options (no_quick_blocks);

%include graphic_terminal_errors;

	     error_list = Graphic_terminal_errors;
	     initted = "1"b;
	     return;
	end;


	
interpret: entry (status_code, errchar, nd, dp, pth, error_code);

dcl (status_code, nd, dp, pth (*)) fixed bin parameter,
     i fixed bin,
     errchar char (1);

dcl  error_table_$smallarg ext fixed bin;

	error_code = 0;
	status_code = static_error_code;
	errchar = error_char;
	nd = node;
	dp = depth;
	if dim (pth, 1) < depth then error_code = error_table_$smallarg;
	else do i = 1 to depth;
	     pth (i) = path (i);
	end;

	return;



/* %include graphic_code_util_; */
dcl (graphic_code_util_$decode_spi,
     graphic_code_util_$decode_dpi,
     graphic_code_util_$decode_uid) ext entry (pointer, fixed bin, (*) fixed bin);

     end graphic_terminal_status_;
