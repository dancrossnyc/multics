/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

graphic_chars_: proc (instring, alignment, x_factor, y_factor, code) returns (fixed bin (18));

/* graphic_chars_ converts a character string into a list of graphic vectors
   and shifts that stroke out the desired characters.  It uses any of several
   graphic character tables, each of which describes a character set in a
   different font or alphabet. */
/* Modified 02/08/78 by CDT for new graphic character table formats, including
   variable width characters, auto canonicalization processing, and smarter
   multiple-line processing.  */
/* Modified 07/22/80 by CDT to use graphics search paths instead of linker
   search rules to find GCT's.  */
/* Modified 08/19/80 by CDT to make characters sharing same character
   position be centered in the space, not left-adjusted, remove call to
   com_err_, and remove support for obsolete version 1 character tables. */
/* Last modified 11/25/80 by CDT to fix spreads returned by $long entries */

dcl  instring char (*) parameter,			/* the string to be converted */
     alignment fixed bin parameter,			/* where to align it */
    (x_factor, y_factor) float bin parameter,
     code fixed bin (35) parameter;

%include gm_entry_dcls;

%include graphic_etypes;

%include graphic_char_dcl;

dcl (i, j) fixed bin,				/* temps */
     start fixed bin,
     line_node (122) fixed bin (18),
     line_shift_node fixed bin (18),
     node fixed bin (18);				/* temp node */

dcl  string_len fixed bin,				/* length without trailing blanks */
     line_shift float bin,
    (x_shift, y_shift) float bin;

dcl (x_rel, y_rel) fixed bin;				/* to keep track of where we ended up */

dcl  char char (1) aligned,
    (BS initial (""),				/* the special chars which graphic_char_table_ won't hack */
     CR initial (""),
     SPACE initial (" "),
     TAB initial ("	"),
     UNDERSCORE initial ("_"),
     NL initial ("
")) char (1) aligned static options (constant);

dcl  Line_space_factor float bin static options (constant) initial (1.5e0);

dcl  already_done_chars (0:127) fixed bin (18) static initial ((128) 0); /* keeps us from doing a char twice */

dcl  sub_err_ ext entry options (variable);

dcl (error_table_$bad_index,
     error_table_$unimplemented_version,
     graphic_error_table_$gct_bad_special_char) ext fixed bin (35) static;

dcl  saved_dirname char (168) static initial (""),
     saved_ename char (32) static initial ("gct_block_roman_");

dcl  motion fixed bin,
     avg_width float bin;

dcl  char_ptr (0:127) based (char_ptr_ptr) pointer,
     character_sizes (3) based (char_sizes_ptr) fixed bin;

dcl (char_ptr_ptr, char_sizes_ptr) pointer static initial (null);

dcl (x_size, y_size, x_margins) float bin static initial (0);

dcl  strip_blanks bit (1) aligned initial ("1"b);

dcl (addr, codeptr, dim, divide, float, index, length,
     max, mod, null, rank, rtrim, substr) builtin;
%page;
common:
	code = 0;
	x_rel, y_rel = 0e0;

	if char_ptr_ptr = null then do;
	     call set_table_internal (saved_dirname, saved_ename, code);
	     if code ^= 0 then return (0);
	end;

	if strip_blanks then string_len = length (rtrim (instring, " "));
	else string_len = length (instring);

	if string_len = 0 then return (0);		/* simple. */

	i = index (substr (instring, 1, string_len), NL);
	if i = 0 then node = assemble_substring (instring, string_len, x_rel, code);

	else do;
	     start = 1;
	     y_rel = -1;				/* counts one less lines than times thru loop */
	     line_shift = y_factor * Line_space_factor;
	     line_shift_node = graphic_manipulator_$create_position (Shift, 0, -line_shift, 0, code);
	     if code ^= 0 then return (0);

	     do i = 2 by 2 while (start <= string_len);
		if i+1 > dim (line_node, 1) then do;
		     code = error_table_$bad_index;
		     return (0);
		end;

		j = index (substr (instring, start, string_len - start + 1), NL) - 1;
		if j = -1 then j = string_len - start + 1;

		line_node (i) = assemble_substring (substr (instring, start, j), j, x_rel, code);
		if code ^= 0 then return (0);

		line_node (i+1) = line_shift_node;
		y_rel = y_rel + 1;
		start = start + j + 1;
	     end;

	     y_shift = divide (alignment - 1, 3, 17, 0) * y_rel * line_shift / 2e0;
	     line_node (1) = graphic_manipulator_$create_position (Shift, 0, y_shift, 0, code);
	     if code ^= 0 then return (0);
	     line_node (i-1) = graphic_manipulator_$create_position
		(Shift, 0, (y_rel * line_shift) - y_shift, 0, code);
	     if code ^= 0 then return (0);

	     node = graphic_manipulator_$create_array (line_node, i-1, code);
	     if code ^= 0 then return (0);
	end;

	if end_position_entry then do;		/* user wants end position info */
	     x_arg = x_rel * x_factor;
	     y_arg = y_rel * y_factor * Line_space_factor;
	end;

	return (node);
	
assemble_substring: proc (instring, string_len, max_column, code) returns (fixed bin (18));

dcl  instring char (*) parameter,
     string_len fixed bin parameter,
     max_column fixed bin parameter,
     code fixed bin (35) parameter;

dcl  column_widths (string_len) fixed bin,
     a (string_len+10) fixed bin (18),			/* temp nodes */
     b (200) fixed bin (18);				/* more temp nodes */

dcl  char_value fixed bin,
     x_rel_pts fixed bin,
     half_xwidth_difference float bin,
     column fixed bin,
    (i, j) fixed bin;

dcl  node fixed bin (18);

	     max_column = 0;

	     if string_len = 0 then return (0);
	     column_widths = 0;
	     column = 0;

	     do i = 1 to string_len;			/* do for every character in string */

		char_value = rank (substr (instring, i, 1)); /* get fixed bin value of char */
		if char_value = -1 then char_value = 0; /* gaack. */
		char_info_ptr = char_ptr (char_value);

		if graphic_char_structure.n_elements >= 0 then do;
		     column = column + 1;
		     if graphic_char_structure.n_elements > 0 then
			column_widths (column) = max (column_widths (column), graphic_char_structure.width);
		end;

		else do;				/* is a special char */
		     char = substr (instring, i, 1);

		     if char = BS then column = max (0, column - 1);

		     else if char = CR then column = 0;

		     else if char = SPACE | char = TAB | char = UNDERSCORE then do;
						/* we treat these as possible whitespace */
			column = column + 1;
			if column_widths (column) = 0 then
			     column_widths (column) = -x_size + x_margins;
						/* is negative because if a real char later appears in */
						/* this column, it will override this arbitrary width */
		     end;
		     else do;			/* don't know this char, must be new */
			call sub_err_ (graphic_error_table_$gct_bad_special_char,
			     "graphic_chars_", "h", null, 0,
			     "Octal value of unrecognized character is ^o.", char_value);
			a (i+2) = 0;		/* put in a nothing */
		     end;
		end;

		max_column = max (column, max_column);
	     end;

	     x_rel_pts = 0;

	     do i = 1 to string_len while (column_widths (i) ^= 0);
		if column_widths (i) < 0 then column_widths (i) = - column_widths (i);
						/* legitimize all remaining whitespace */
		x_rel_pts = x_rel_pts + column_widths (i);
	     end;


/* Now we have passed the string canonically and know how many points each character */
/* position takes (max).  Now we shoehorn the characters into their assigned space. */

	     column = 0;

	     do i = 1 to string_len;

		char_value = rank (substr (instring, i, 1)); /* get fixed bin value of char */
		if char_value = -1 then char_value = 0; /* gaack. */
		char_info_ptr = char_ptr (char_value);

		if already_done_chars (char_value) ^= 0 then do; /* we already assembled one of these */
		     column = column + 1;
		     if column_widths (column) = graphic_char_structure.width then
			a (i+2) = already_done_chars (char_value); /* put it in */
		     else do;
			half_xwidth_difference = (column_widths (column) - graphic_char_structure.width) / 2e0;
			b (1) = graphic_manipulator_$create_position (Shift,
			     half_xwidth_difference, 0, 0, code);
			if code ^= 0 then return (0);
			b (2) = already_done_chars (char_value);
			b (3) = b (1);
			a (i+2) = graphic_manipulator_$create_array (b, 3, code);
			if code ^= 0 then return (0);
		     end;
		end;

		else do;				/* make it from scratch */
		     if graphic_char_structure.n_elements < 0 then do; /* this is special char */

			char = substr (instring, i, 1); /* get it */

			if char = BS then do;	/* backspace */
			     if column = 0 then a (i+2) = 0; /* he's "up against the wall" */
			     else do;
				a (i+2) = graphic_manipulator_$create_position
				     (Shift, - column_widths (column), 0, 0, code);
				if code ^= 0 then return (0); /* go back one space */
				column = column - 1;
			     end;
			end;

			else if char = CR then do;	/* carriage return */
			     j = 0;
			     do column = column to 1 by -1;
				j = j - column_widths (column);
			     end;

			     a (i+2) = graphic_manipulator_$create_position (Shift, (j), 0, 0, code);
			     if code ^= 0 then return (0); /* go back all the way */
			end;

			else if char = SPACE | char = TAB then do;
			     column = column + 1;
			     a (i+2) = graphic_manipulator_$create_position (Shift, (column_widths (column)), 0, 0, code);
			     if code ^= 0 then return (0);
			end;

			else if char = UNDERSCORE then do;
			     column = column + 1;
			     b (1) = graphic_manipulator_$create_position (Shift, 0, -y_size * 1.125, 0, code);
			     if code ^= 0 then return (0);
			     b (2) = graphic_manipulator_$create_position (Vector, (column_widths (column)), 0, 0, code);
			     if code ^= 0 then return (0);
			     b (3) = graphic_manipulator_$create_position (Shift, 0, y_size * 1.125, 0, code);
			     if code ^= 0 then return (0);
			     a (i+2) = graphic_manipulator_$create_array (b, 3, code);
			     if code ^= 0 then return (0);
			end;
		     end;

		     else if graphic_char_structure.n_elements = 0 then a (i+2) = 0;
						/* is garbage/control char, ignore */

		     else do;			/* char is handled by table */
			coords_ptr = addr (graphic_char_structure.coords); /* use faster pointer reference */
			column = column + 1;

			if graphic_char_structure.n_elements > dim (b, 1) then do;
			     code = error_table_$bad_index;
			     return (0);
			end;

			do j = 1 to graphic_char_structure.n_elements; /* do for every vector in char */
			     if graphic_char_structure.move_type (j) then motion = Vector;
			     else motion = Shift;
			     b (j) = graphic_manipulator_$create_position
				(motion, float (graphic_char_structure.x_length (j)),
				float (graphic_char_structure.y_length (j)), 0, code);
						/* create shift or vector as ordered */
			     if code ^= 0 then return (0);
			end;

			already_done_chars (char_value), a (i+2)
			     = graphic_manipulator_$create_array (b, j-1, code);
						/* remember we did this char. */
			if code ^= 0 then return (0);
			if column_widths (column) > graphic_char_structure.width then do;
			     half_xwidth_difference = (column_widths (column) - graphic_char_structure.width) / 2e0;
			     b (1) = graphic_manipulator_$create_position (Shift,
				half_xwidth_difference, 0, 0, code);
			     if code ^= 0 then return (0);
			     b (2) = a (i+2);	/* use node just created */
			     b (3) = b (1);
			     a (i+2) = graphic_manipulator_$create_array (b, 3, code);
			     if code ^= 0 then return (0);
			end;
		     end;
		end;
	     end;

	     if mod (alignment - 1, 3) ^= 0 then
		x_shift = mod (alignment - 1, 3) * - x_rel_pts/2e0;
	     else x_shift = 0;

	     y_shift = divide (alignment - 1, 3, 17, 0) * y_size/2e0;

	     if max_column <= 0 then return (0);	/* weird, maybe just backspaces */

	     avg_width = float (x_rel_pts)/float (max_column);
	     if avg_width = 0 then return (0);		/* all control chars */

	     a (1) = graphic_manipulator_$create_scale
		(x_factor/avg_width, y_factor/y_size, 1, code); /* scale the chars */
	     if code ^= 0 then return (0);
	     a (2) = graphic_manipulator_$create_position
		(Shift, x_shift, y_shift, 0, code);	/* perform alignment */
	     if code ^= 0 then return (0);


	     a (i+2) = graphic_manipulator_$create_position (Shift, - x_rel_pts - x_shift,
		- y_shift, 0, code);
						/* shift back to starting point */
	     if code ^= 0 then return (0);

	     node = graphic_manipulator_$create_array (a, i+2, code); /* make one list from all chars */
	     if code ^= 0 then return (0);

	     return (node);

	end assemble_substring;
	
long_tb:	entry (instring, alignment, x_factor, y_factor, x_arg, y_arg, code) returns (fixed bin (18));

	strip_blanks = ""b;

long:	entry (instring, alignment, x_factor, y_factor, x_arg, y_arg, code) returns (fixed bin (18));

dcl (x_arg, y_arg) float bin parameter,			/* end positions, to be returned */
     end_position_entry bit (1) aligned initial (""b);	/* if on, were called from this entry */

	x_arg, y_arg = 0;
	end_position_entry = "1"b;
	goto common;

init:	entry;

	already_done_chars = 0;
	return;

set_table: entry (dirname, ename, code);

dcl (dirname, ename) char (*) parameter;

	call set_table_internal (dirname, ename, code);
	return;

get_table: entry (dirname, ename);

	dirname = saved_dirname;
	ename = saved_ename;
	return;


set_table_internal: proc (dirname, ename, code);

dcl (dirname, ename) char (*) parameter,
     code fixed bin (35) parameter;

dcl  term_$single_refname ext entry (char (*), fixed bin (35)),
     hcs_$initiate ext entry (char (*), char (*), char (*), fixed bin, fixed bin, pointer, fixed bin (35)),
     hcs_$fs_get_path_name ext entry (pointer, char (*), fixed bin, char (*), fixed bin (35)),
     hcs_$make_ptr ext entry (pointer, char (*), char (*), pointer, fixed bin (35));

dcl  search_paths_$find_dir ext entry (char (*), pointer, char (*), char (*), char (*), fixed bin (35));

dcl (csp, cpp) pointer;

dcl  auto_dirname char (168),
     my_own_dirname char (168) static initial ("");

dcl  error_table_$segknown ext fixed bin (35) static;


	     char_ptr_ptr, char_sizes_ptr = null;	/* if anything fails, we want next call */
						/* to refind current table from scratch */

	     call term_$single_refname (ename, 0);	/* get rid of this refname if possible */

	     if dirname ^= "" then
		auto_dirname = dirname;		/* path given, no sweat */

	     else do;
		if my_own_dirname = "" then do;	/* make referencing_dir rule work */
this_label:	     call hcs_$fs_get_path_name (codeptr (this_label),
			my_own_dirname, 0, "", code);
		     if code ^= 0 then return;
		end;

		call search_paths_$find_dir ("graphics", null,
		     ename, my_own_dirname, auto_dirname, code);
		if code ^= 0 then return;
	     end;

	     call hcs_$initiate (auto_dirname, ename, ename, 0, 0,
		null, code);
	     if code ^= 0 then if code ^= error_table_$segknown then return;
						/* want to know about name duplications if need be */

	     call hcs_$make_ptr (null, ename, "char_ptr", cpp, code);
	     if code ^= 0 then return;

	     call hcs_$make_ptr (null, ename, "character_sizes", csp, code);
	     if code ^= 0 then return;

	     if csp -> character_sizes (3) > 0 then do;
		code = error_table_$unimplemented_version;
		return;
	     end;

	     saved_dirname = auto_dirname;
	     saved_ename = ename;

	     char_ptr_ptr = cpp;
	     char_sizes_ptr = csp;

	     x_size = character_sizes (2);
	     y_size = character_sizes (1);
	     x_margins = - character_sizes (3);

	     already_done_chars = 0;			/* no use keeping this after switching tables! */

	     return;
	end set_table_internal;

     end graphic_chars_;
