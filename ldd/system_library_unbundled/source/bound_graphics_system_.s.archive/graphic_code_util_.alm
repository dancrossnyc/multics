"  ***********************************************************
"  *                                                         *
"  *                                                         *
"  * Copyright, (C) Honeywell Information Systems Inc., 1981 *
"  *                                                         *
"  *                                                         *
"  ***********************************************************

	name	graphic_code_util_

" This module performs format translations between Multics standard
" graphics code and common numeric argument formats.
"
" Written 11/15/80 by C. D. Tavares as a replacement for
" a former PL/I version that ran half as fast.

	entry	decode_spi,decode_dpi,decode_uid,decode_scl
	entry	decode_scl_nozero
	entry	encode_spi,encode_dpi,encode_uid,encode_scl
"
	include	stack_frame
"
" decode_spi: entry (arg_stringp, count, fixed_array);

decode_spi:
	tsx0	decode_setup	get args
	eax7	1		spi format is 1 char
	tsx0	decode		process it
	short_return
"
" decode_dpi: entry (arg_stringp, count, fixed_array);

decode_dpi:
	tsx0	decode_setup	get args
	eax2	0,x1		save count
	epp2	pr3|0		and array ptr
	eax7	2		dpi format is 2 chars
	tsx0	decode		process it

	lda	=o4000,dl		high order dpi bit
	lcq	=o10000,dl	loads sign bits 777777770000

dd_neg_loop:
	cana	pr2|-1,x2		is "negative" bit on
	tze	2,ic		no, skip
	orsq	pr2|-1,x2		yes, or in extended negative sign
	sblx2	1,du		are we done
	tpnz	dd_neg_loop	no, loop

	short_return
"
" decode_uid: entry (arg_stringp, count, fixed_array);

decode_uid:
	tsx0	decode_setup	get args
	eax7	3		uid format is 3 chars
	tsx0	decode		do it
	short_return
"
" decode_scl: entry (arg_stringp, count, float_array);

decode_scl:
	eax3	0		indicator
	tra	decode_scl_common

" decode_scl_nozero: entry (arg_stringp, count, fixed_array);

decode_scl_nozero:
	eax3	1		indicator

decode_scl_common:
	tsx0	decode_setup	get args
	eax2	0,x1		save count
	epp2	pr3|0		and array ptr
	eax7	3		scl format is 3 chars
	tsx0	decode		do it

ds_float_loop:	null		turn fixed (17,6) into float
	lda	pr2|-1,x2		load intermediate result word
	als	18		shift to left 18
	lrs	54		extend sign bit and occupy aq
	lde	=o202000,du	load proper exponent
	fad	=0.0,du		normalize
	tnz	ds_storit		if nonzero, store it
	cmpx3	0,du		were we called at nozero entry
	tze	ds_storit		no, store the zero
	fld	=1e-6		load small nonzero value
ds_storit:
	fst	pr2|-1,x2		store as float bin
	sblx2	1,du		are we done
	tpnz	ds_float_loop	no, loop

	short_return
"
" encode_spi: entry (fixed_array, count, arg_stringp);

encode_spi:
	tsx0	encode_setup	get args
	eax7	1		spi format is 1 char
	tsx0	encode		do it
	short_return
"
" encode_dpi: entry (fixed_array, count, arg_stringp);

encode_dpi:
	tsx0	encode_setup	get args
	eax7	2		dpi format is 2 chars
	tsx0	encode		do it
	short_return
"
" encode_uid: entry (fixed_array, count, arg_stringp);

encode_uid:
	tsx0	encode_setup	get args
	eax7	3		uid format is 3 chars
	tsx0	encode		do it
	short_return
"
" encode_scl: entry (float_array, count, arg_stringp);

encode_scl:
	tsx0	encode_setup	get args
	eax7	3		scl format is 3 chars
	eax2	0		x2 is index counter
	epp1	pr6|stack_frame.next_sp,*
	null			need a temp, this is cheap

e_scl_loop:	null		algorithm courtesy pl1 operators
	null			turns float bin into fixed (17,6)
	fld	pr3|0,x2		pick up float bin
	tmi	e_scl_neg_case	if result negative

e_scl_pos_case:
	ufa	=o176000,du	fixify by forcing exp to proper scale
	adq	2,dl		1/2 at proper scale
	qrs	2		wipe out fractional bits
	tra	e_scl_common

e_scl_neg_case:
	fneg	0		perform operation on abs value
	ufa	=o176000,du	see above
	adq	2,dl
	qrs	2
	negl	0		re-negate

e_scl_common:
	stq	pr1|0		handy temp
	mvt	(pr),(pr),fill(0)	translate it
	desc6a	pr1|0(3),3
	desc9a	pr5|0,3
	arg	trans_table

	sblx1	1,du		are we done
	tze	do_short_return	yes

	epp3	pr3|1		bump index ptr
	a9bd	pr5|0,x7		and string ptr
	tra	e_scl_loop

do_short_return:
	short_return
"
decode_setup:
	epp3	ap|6,*		get ptr to array

	lxl1	ap|4,*		get count

	epp5 	ap|2,*		get string ptr
	epp5	pr5|0,*

	tra	0,0
"
decode:	s6bd	pr3|0,x7		adjust array ptr to proper offset

d_loop:	stz	pr3|1			clear garbage in word
	mvt	(pr,rl),(pr,rl),fill(0)	decode it		
	desc9a	pr5|0,x7
	desc6a	pr3|1,x7
	arg	trans_table

	sblx1	1,du		are we done
	tze	0,0		done, return

	epp3	pr3|1		bump array ptr
	a9bd	pr5|0,x7		and char ptr
	tra	d_loop
"
encode_setup:
	epp3	ap|2,*		get ptr to array

	lxl1	ap|4,*		get count

	epp5	ap|6,*		get string ptr
	epp5	pr5|0,*

	tra	0,0
"
encode:	s6bd	pr3|0,x7		adjust array ptr to proper offset

e_loop:	mvt	(pr,rl),(pr,rl),fill(0)	encode it
	desc6a	pr3|1,x7
	desc9a	pr5|0,x7
	arg	trans_table

	sblx1	1,du		are we done
	tze	0,0		yes, return

	epp3	pr3|1		bump array ptr
	a9bd	pr5|0,x7		bump string ptr
	tra	e_loop
"
trans_table:
	oct	100101102103,104105106107,110111112113,114115116117
	oct	120121122123,124125126127,130131132133,134135136137
	oct	140141142143,144145146147,150151152153,154155156157
	oct	160161162163,164165166167,170171172173,174175176177
	oct	000001002003,004005006007,010011012013,014015016017
	oct	020021022023,024025026027,030031032033,034035036037
	oct	040041042043,044045046047,050051052053,054055056057
	oct	060061062063,064065066067,070071072073,074075076077

	end
