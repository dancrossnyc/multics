/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-13,Spitzer), approve(85-09-13,MCR6618),
     audit(85-10-30,Blair), install(85-12-16,MR12.0-1001):
     Allow to read/write
     MSFs.
                                                   END HISTORY COMMENTS */

add_dict_words: adw: proc;

/* This program contains five commands used to modify and examine
   dictionaries.  A dictionary is represented as an indexed file.
   Each word in the dictionary is represented by a key in the file.
   A dictionary file is somewhat unusual in that it has no actual
   records.  Instead, the record descriptor word for each key is used
   to store certain attributes (e.g. hyphenation points) for the
   associated key.  The commands are:

   1. add_dict_words	adds words to a dictionary

   2. delete_dict_words	deletes words from a dictionary

   3. list_dict_words	lists words in a dictionary

   4. count_dict_words	reports the number of words in a dictionary

   5. find_dict_words	finds words in the dictionaries defined by
   .			the "dict" search list
*/

/* Coded by J. Stern, 1/13/77 */
/* Modified 9/77 by J. Stern to upgrade for installation */
/* Modified 10/25/77 by J. Stern to add find_dict_words command */
/* Modified 08/19/80 by P. Benjamin to fix bug when dict not first arg */
/* Modified 12/17/80 by P. Benjamin to fix bug where ddw creates dict when not found */
/* Modified 07/13/81 by P. Benjamin to fix bug where bad dict in search list
			      causes processing to halt */

/* Automatic */

dcl  ring_brackets (3) fixed bin (6);
dcl  bc fixed bin (24);
dcl  max_seg_size fixed bin (35);
dcl  component fixed bin;
dcl  type fixed bin (2);
dcl  msf bit (1) aligned;
dcl (add_cmd, delete_cmd, list_cmd, count_cmd, find_cmd) bit (1) aligned init ("0"b);
dcl  whoami char (20);
dcl  arg_syntax char (120);
dcl (nargs, words) fixed bin;
dcl (argno, pn_argno) fixed bin;
dcl  ap ptr;
dcl  al fixed bin;
dcl  code fixed bin (35);
dcl (brief_opt, force_opt, raw_opt, output_file_opt, input_file_opt, count_opt, dictionary_opt) bit (1) aligned;
dcl (pname, of_pname) char (168);
dcl  switch char (32);
dcl  atd char (256) varying;
dcl  atd_len fixed bin;
dcl  second_attach bit (1) aligned;
dcl  iocb_ptr ptr;
dcl  open_mode fixed bin;
dcl (of_dname, if_dname) char (168);
dcl (of_ename, if_ename) char (32);
dcl (of_ptr, if_ptr, fcb_ptr) ptr;
dcl (of_len, if_len) fixed bin (21);
dcl  word_count fixed bin;
dcl  dict_path char (168);
dcl  temp_ptr ptr;
dcl  bad_dict_ptr ptr;
dcl  complained_once bit (1);
		 		 
dcl 1 add_key_info,
    2 flags aligned like ak_header.flags,
    2 descrip aligned like descriptor_template,
    2 key_len fixed bin,
    2 key char (256);

dcl 1 delete_key_info like add_key_info;

dcl 1 get_key_info,
    2 flags aligned like gk_header.flags,
    2 descrip aligned like descriptor_template,
    2 key_len fixed bin,
    2 key char (256);

dcl 1 reassign_key_info,
    2 flags aligned like rk_header.flags,
    2 old_descrip aligned like descriptor_template,
    2 new_descrip aligned like descriptor_template,
    2 key_len fixed bin,
    2 key char (256);

dcl 1 sh_info,
    2 rel_type fixed bin,
    2 head_len fixed bin,
    2 key_head char (256);

dcl 1 info aligned like indx_info;

dcl 1 fdw_control aligned,
    2 exact_match bit (1) unal,
    2 mbz bit (35) unal;


/* Based */

dcl  arg char (al) based (ap);
dcl  of char (of_len) based (of_ptr);
dcl  if char (if_len) based (if_ptr);
dcl  if_vec (if_len) char (1) based (if_ptr);

dcl 1 descriptor_template aligned based,
    2 hpoints (32) bit (1) unal,
    2 notrim bit (1) unal,
    2 pad bit (3) unal;

dcl 1 bad_dict aligned based (bad_dict_ptr),
      2 n fixed bin,
      2 entry (0 refer (bad_dict.n)),
        3 ecode fixed bin (35),
        3 path char (168) unal;

/* Conditions */

dcl  cleanup condition;


/* Static */

dcl  stream_input fixed bin int static options (constant) init (1);
dcl  keyed_sequential_input fixed bin int static options (constant) init (8);
dcl  keyed_sequential_update fixed bin int static options (constant) init (10);

dcl  error_table_$dirseg fixed bin(35) ext static;
dcl  error_table_$long_record fixed bin(35) ext static;
dcl  error_table_$short_record fixed bin(35) ext static;
dcl  error_table_$zero_length_seg fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext;
dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$key_duplication fixed bin (35) ext;
dcl  error_table_$no_record fixed bin (35) ext;
dcl  error_table_$no_key fixed bin (35) ext;
dcl  error_table_$end_of_info fixed bin (35) ext;
dcl  error_table_$noentry fixed bin (35) ext;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext;
dcl  error_table_$id_not_found fixed bin (35) ext;
dcl  error_table_$fatal_error	fixed bin(35) ext static;
dcl  error_table_$recoverable_error fixed bin(35) ext static;
		 
dcl  iox_$user_output ptr ext;
dcl  sys_info$max_seg_size fixed bin(35) ext static;

dcl  NL char (1) aligned int static options (constant) init ("
");


/* Builtins */

dcl (addr, copy, divide, index, length, max, min, null, rtrim, substr, string, unspec) builtin;


/* Entries */

dcl  cu_$arg_count entry (fixed bin);
dcl  com_err_ entry options (variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  iox_$attach_name entry (char(*), ptr, char(*), ptr, fixed bin(35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin(35));
dcl  ioa_ options (variable);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl  terminate_file_ entry (ptr, fixed bin(24), bit(*), fixed bin(35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  absolute_pathname_$add_suffix entry (char (*), char (*), char (*), fixed bin (35));
dcl  find_dict_word_ entry (char (*), bit (36) aligned, char (256), bit (36) aligned, char (168), ptr, fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  pathname_ entry (char(*), char(*)) returns(char(168));
dcl  msf_manager_$open entry (char(*), char(*), ptr, fixed bin(35));
dcl  msf_manager_$close entry (ptr);
dcl  msf_manager_$get_ptr entry (ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35));
dcl  make_msf_ entry (char(*), char(*), (3) fixed bin(6), fixed bin(35));
dcl  unmake_msf_ entry (char(*), char(*), bit(1), (3) fixed bin(6), fixed bin(35));
%page;

	add_cmd = "1"b;
	whoami = "add_dict_words";
	arg_syntax = "path words {-count} {-force} {-input_file path} {-raw} {-word word}";
	go to join;

delete_dict_words: ddw: entry;

	delete_cmd = "1"b;
	whoami = "delete_dict_words";
	arg_syntax = "path words {-brief} {-count} {-input_file path} {-word word}";
	go to join;

list_dict_words: ldw: entry;

	list_cmd = "1"b;
	whoami = "list_dict_words";
	arg_syntax = "path words {-brief} {-input_file path} {-output_file path} {-raw} {-word word}";
	go to join;

count_dict_words: cdw: entry;

	count_cmd = "1"b;
	whoami = "count_dict_words";
	arg_syntax = "path";
	go to join;

find_dict_words: fdw: entry;

	find_cmd = "1"b;
	whoami = "find_dict_words";
	arg_syntax = "words {-brief} {-dictionary} {-exact_match} {-input_file path} {-output_file path} {-raw} {-word word}";


/* find out how many arguments we have */

join:	call cu_$arg_count (nargs);
	if list_cmd | count_cmd | find_cmd
	then if nargs < 1
	     then do;
noarg:		code = error_table_$noarg;
usage:		call com_err_ (code, whoami, "^/Usage:  ^a ^a", whoami, arg_syntax);
		return;
	     end;
	     else;
	else if nargs < 2
	then go to noarg;

/* examine the arguments */

	brief_opt, force_opt, raw_opt, output_file_opt, input_file_opt, count_opt, dictionary_opt = "0"b;
	if find_cmd
	then do;
	     pn_argno = 0;
	     string (fdw_control) = ""b;
	end;
	else pn_argno = -1;
	words = 0;
	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, code);
	     if index (arg, "-") ^= 1			/* not a control argument */
	     then if pn_argno = -1			/* don't have dictionary path yet */
		then do;				/* so this must be it */
		     call absolute_pathname_$add_suffix (arg, "dict", pname, code);
		     if code ^= 0
		     then do;
			call com_err_ (code, whoami, arg);
			return;
		     end;
		     pn_argno = argno;
		end;
		else if count_cmd
		then do;
		     code = error_table_$wrong_no_of_args;
		     go to usage;
		end;
		else words = words +1;		/* not dictionary path, must be a word */
	     else do;				/* control argument */
		if (delete_cmd | list_cmd | find_cmd) & (arg = "-bf" | arg = "-brief")
		then brief_opt = "1"b;
		else if add_cmd & (arg = "-fc" | arg = "-force")
		then force_opt = "1"b;
		else if (list_cmd | find_cmd) & (arg = "-of" | arg = "-output_file")
		then do;
		     argno = argno +1;
		     if argno > nargs
		     then go to noarg;
		     call cu_$arg_ptr (argno, ap, al, code);
		     of_pname = arg;
		     output_file_opt = "1"b;
		end;
		else if ^count_cmd & (arg = "-if" | arg = "-input_file")
		then do;
		     argno = argno +1;
		     if argno > nargs
		     then go to noarg;
		     input_file_opt = "1"b;
		end;
		else if (add_cmd | list_cmd | find_cmd) & arg = "-raw"
		then raw_opt = "1"b;
		else if (add_cmd | delete_cmd) & (arg = "-ct" | arg = "-count")
		then count_opt = "1"b;
		else if find_cmd & (arg = "-dict" | arg = "-dictionary")
		then dictionary_opt = "1"b;
		else if find_cmd & (arg = "-exm" | arg = "-exact_match")
		then fdw_control.exact_match = "1"b;
		else if ^count_cmd & arg = "-word"
		then do;
		     argno = argno + 1;
		     if argno > nargs
		     then go to noarg;
		     words = words + 1;
		end;
		else do;
		     call com_err_ (error_table_$badopt, whoami, "^a", arg);
		     return;
		end;
	     end;
	end;

	if pn_argno = -1
	then go to noarg;

	if (add_cmd | delete_cmd | find_cmd) & ^input_file_opt & words = 0
	then go to noarg;

	iocb_ptr, fcb_ptr, of_ptr, if_ptr, temp_ptr, bad_dict_ptr = null;
	max_seg_size = sys_info$max_seg_size * 4;

	on cleanup call cleaner;

	call get_temp_segment_ (whoami, bad_dict_ptr, code);
	if code ^= 0
	     then do;
	     call com_err_ (code, whoami);
	     goto clean_up;
	end;
	
	complained_once = "0"b;			/* certain errors should be given only */
						/* per command, not one per word */

	if find_cmd
	then go to check_of;

/* attach and open the dictionary */

	second_attach = "0"b;
	switch = unique_chars_ (""b) || "." || whoami;	/* use unique I/O switch name */
	atd = "vfile_ " || rtrim (pname);
	atd = atd || " -share -old";			/* build attach description, assume dictionary exists */

	if list_cmd
	then open_mode = keyed_sequential_input;
	else open_mode = keyed_sequential_update;

attach:	call iox_$attach_name (switch, iocb_ptr, (atd), null, code);
	if code ^= 0
	then do;
	     call com_err_ (code, whoami, "Cannot attach switch.  ^a", switch);
	     return;
	end;

	if count_cmd
	then go to get_count;

	if second_attach				/* give warning of new dictionary creation */
	then call ioa_ ("^a:  Creating ^a", whoami, pname);

	call iox_$open (iocb_ptr, open_mode, "0"b, code);
	if code ^= 0
	then if code = error_table_$noentry & open_mode = keyed_sequential_update & ^second_attach
	     then do;				/* no dictionary, warn user and then create one */

		if delete_cmd			/* but not for ddw! */
		     then do;
		     call com_err_ (code, whoami, "^a", pname);
		     goto clean_up;
		end;

		call close_file (iocb_ptr);

		atd_len = length (rtrim (atd));
		substr (atd, atd_len-3, 4) = "";	/* remove "-old" from attach description */
		second_attach = "1"b;
		go to attach;
	     end;
	     else do;
		call com_err_ (code, whoami, "Cannot open file.  ^a", pname);
		go to clean_up;
	     end;

/* make output segment if requested */

	if list_cmd | find_cmd
	then do;
check_of:	     if output_file_opt
	     then do;
		call expand_pathname_ (of_pname, of_dname, of_ename, code);
		if code ^= 0
		then do;
		     call com_err_ (code, whoami, "^a", of_pname);
		     go to clean_up;
		end;

		call hcs_$status_minf (of_dname, of_ename, 1, type, bc, code);
		if code = 0
		then if type = 2			/* entry exists */
		     then if bc = 0			/* DIR */
			then do;			/* really a DIR */
			     code = error_table_$dirseg;
			     goto bad_of;
			     end;
			else do;			/* DIR & bc>0 = MSF */
			     call unmake_msf_ (of_dname, of_ename, "0"b, ring_brackets, code);
			     if code ^= 0 then goto bad_of;
			     end;
		     else ;			/* must be a SSF */
		else if code ^= error_table_$noentry
		     then goto bad_of;		/* allowed to be non-existent */

		call hcs_$make_seg (of_dname, of_ename, "", 01010b, of_ptr, code);
		if of_ptr = null
		then do;
bad_of:		     call com_err_ (code, whoami, "^a", pathname_ (of_dname, of_ename));
		     go to clean_up;
		end;
	     end;
	     else do;				/* get temp segment to buffer output */
		call get_temp_segment_ (whoami, temp_ptr, code);
		if code ^= 0
		then do;
		     call com_err_ (code, whoami, "Cannot get temporary segment.");
		     go to clean_up;
		end;
		of_ptr = temp_ptr;
	     end;

	     component = 0;
	end;

/* initialize info for vfile_ control orders */

	if delete_cmd
	then do;
	     sh_info.rel_type = 0;
	     sh_info.head_len = 256;			/* max word size = 256 */
	     string (delete_key_info.flags) = ""b;
	end;
	else if add_cmd
	then do;
	     string (add_key_info.flags) = ""b;
	     add_key_info.input_key, add_key_info.input_desc = "1"b;
	     if force_opt
	     then do;
		string (reassign_key_info.flags) = ""b;
		reassign_key_info.input_new_desc = "1"b;
	     end;
	     go to gk_setup;
	end;
	else if list_cmd
	then if words = 0 & ^input_file_opt
	     then unspec (get_key_info.flags) = ""b;
	     else do;
gk_setup:		get_key_info.flags.input_key = "1"b;
		get_key_info.input_desc = "0"b;
		get_key_info.desc_code = 0;
		get_key_info.rel_type = 0;
		get_key_info.head_size = 256;
		get_key_info.reset_pos = "0"b;
		get_key_info.flags.pad = ""b;
		get_key_info.version = gk_info_version_0;
	     end;

/* get to work */

	of_len, word_count = 0;

	if list_cmd & words = 0 & ^input_file_opt
	then call list_all;
	else do argno = 1 to nargs;		/* look again for words and input files */
	     if argno = pn_argno
		then argno = argno + 1;
	     if argno > nargs
		then goto get_out;
	     call cu_$arg_ptr (argno, ap, al, code);
	     if index (arg, "-") = 1
	     then do;
		if arg = "-if" | arg = "-input_file"
		then do;
		     argno = argno +1;
		     call cu_$arg_ptr (argno, ap, al, code);
		     call read_input_file;
		end;
		else if arg = "-of" | arg = "-output_file"
		then argno = argno +1;
		else if arg = "-word"
		then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, ap, al, code);
		     call process_word (arg);
		end;
	     end;
	     else call process_word (arg);
get_out:	     
	end;


/* print results for list and find */

	if of_len > 0
	then if output_file_opt
	     then do;
		call terminate_file_ (of_ptr, of_len * 9, TERM_FILE_TRUNC_BC_TERM, code);
		if code ^= 0
		then call com_err_ (code, whoami, "Setting bit count on ^a.", pathname_ (of_dname, of_ename));
		end;
	     else do;
		call iox_$put_chars (iox_$user_output, of_ptr, of_len, code);
		if code ^= 0
		then call com_err_ (code, whoami, "Attempting to write on user_output switch.");
		end;

/* report counts if requested */

	if count_opt
	then do;
	     call ioa_ ("number of words ^[added^;deleted^] = ^d", add_cmd, word_count);

get_count:     indx_info.info_version = vfs_version_1;
	     call iox_$control (iocb_ptr, "file_status", addr (indx_info), code);
	     if code ^= 0
	     then call com_err_ (code, whoami, "Cannot get dictionary word count.");
	     else call ioa_ ("number of dictionary words = ^d", indx_info.num_keys);
	end;

/* clean up and leave */

clean_up:	call cleaner;
	return;

cleaner:	proc;					/* cleanup procedure */

	if iocb_ptr ^= null
	then call close_file (iocb_ptr);

	if of_ptr ^= null
	then if of_ptr = temp_ptr
	     then call release_temp_segment_ (whoami, temp_ptr, (0));
	     else call terminate_file_ (of_ptr, 0, TERM_FILE_TERM, (0));

	if if_ptr ^= null
	then if msf
	     then call close_file (if_ptr);
	     else call terminate_file_ (if_ptr, 0, TERM_FILE_TERM, (0));

	if bad_dict_ptr ^= null
	then call release_temp_segment_ (whoami, bad_dict_ptr, (0));

	if fcb_ptr ^= null
	then call msf_manager_$close (fcb_ptr);

	return;
	end cleaner;

/* This procedure reads words from an input file whose pathname
   is given by the value of arg.  Words are assumed to be separated
   by newlines.  Each word read is submitted to process_word.
*/

read_input_file: proc;

dcl (i, max_word_len, NL_index, word_len) fixed bin (21);
dcl  word char (word_len) based (word_ptr);
dcl  word_ptr ptr;
dcl  if_buffer char (257);
	       
	     msf = "0"b;
	     if_ptr = null;

	     call expand_pathname_ (arg, if_dname, if_ename, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, whoami, "Input file ignored. ^a", arg);
		return;
	     end;

	     call hcs_$status_minf (if_dname, if_ename, 1, type, bc, code);
	     if code ^= 0 then do;
bad_if:		call com_err_ (code, whoami, "Input file ignored. ^a", pathname_ (if_dname, if_ename));
		goto EOF;
		end;

	     if type = 2
	     then if bc = 0
		then do;
		     code = error_table_$dirseg;
		     goto bad_if;
		     end;
		else msf = "1"b;
	     else msf = "0"b;

	     if msf then do;
		atd = "vfile_ " || rtrim (if_dname);
		atd = atd || ">";
		atd = atd || rtrim (if_ename);
		atd = atd || " -old";

		call iox_$attach_name (unique_chars_ ("0"b) || whoami, if_ptr, (atd), null, code);
		if code ^= 0 then goto bad_if;
		call iox_$open (if_ptr, stream_input, "0"b, code);
		if code ^= 0 then goto bad_if;

		word_ptr = addr (if_buffer);
		max_word_len = length (if_buffer);

		call iox_$get_line (if_ptr, word_ptr, max_word_len, word_len, code);
		end;
	     else do;
		call initiate_file_ (if_dname, if_ename, R_ACCESS, if_ptr, bc, code);
		if if_ptr = null
		then go to bad_if;

		if_len = divide (bc, 9, 21, 0);
		if if_len = 0
		then do;
		     code = error_table_$zero_length_seg;
		     go to bad_if;
		end;

		i = 1;
		end;

	     do while ("1"b);
		if msf
		then if code ^= 0
		     then if code = error_table_$end_of_info
		          then goto EOF;
			else if code = error_table_$long_record | code = error_table_$short_record
			     then ;		/* allowable errors */
			else goto bad_if;
		     else do;
			NL_index = index (word, NL);
			if NL_index > 0
			then word_len = NL_index - 1;
			if word_len = -1
			then goto read_next;
			end;
		else if i > if_len
		     then goto EOF;
		     else do;
			word_len = index (substr (if, i), NL) -1;
			if word_len = 0
			then go to read_next;
			if word_len = -1
			then word_len = if_len - i + 1;
			word_ptr = addr (if_vec (i));
			end;

		call process_word (word);

read_next:
		if msf
		then call iox_$get_line (if_ptr, word_ptr, max_word_len, word_len, code);
		else i = i + word_len +1;
	     end;

EOF:
	if if_ptr ^= null
	then if msf
	     then call close_file (if_ptr);
	     else do;
		call terminate_file_ (if_ptr, 0, TERM_FILE_TERM, code);
		if_ptr = null;
		end;

	return;
	end read_input_file;

close_file:
     proc (iocbp);

dcl  iocbp ptr parameter;

	if iocbp ^= null then do;
	     call iox_$close (iocbp, (0));
	     call iox_$detach_iocb (iocbp, (0));
	     call iox_$destroy_iocb (iocbp, (0));
	     iocbp = null;
	     end;

	return;
	end close_file;
%page;
/* This procedure selects the proper subroutine to process the current word. */

process_word: proc (cur_word);

dcl  cur_word char (*);


	     if add_cmd
	     then call add;
	     else if delete_cmd
	     then call delete;
	     else if list_cmd
	     then call list;
	     else call find;

/* This procedure adds the current word to the dictionary.  It first
   scans the word for hyphenation and/or notrim.  If the word already
   exists in the dictionary, it is not added (reassigned) unless the
   force option was specified.
*/

add:	     proc;

dcl (i, j) fixed bin;
dcl  keystr char (256) varying;
dcl  next_char char (1);

/* examine word for hyphenation and notrim, isolate the key */

		string (add_key_info.descrip) = ""b;

		if raw_opt
		then do;
		     if length (cur_word) > 256
		     then do;
big_word:			call com_err_ (0, whoami, "Word size exceeds 256.  Word ignored.  ^a", cur_word);
			return;
		     end;
		     keystr = cur_word;
		     go to add_key;
		end;

		keystr = "";
		j = 1;
		if substr (cur_word, 1, 1) = "^"	/* check for notrim */
		then do;
		     if length (cur_word) > 1
		     then next_char = substr (cur_word, 2, 1);
		     else next_char = " ";

		     if next_char ^= "="		/* must be a notrim sign */
		     then add_key_info.descrip.notrim = "1"b;

		     if next_char = "=" | next_char = "^" /* must be a literal circumflex */
		     then do;
			keystr = "^";
			j = 3;
		     end;
		     else j = 2;
		end;

		do j = j by 1 while (j <= length (cur_word));
		     i = index (substr (cur_word, j), "-") -1;
		     if i = -1
		     then i = length (cur_word) - j + 1;

		     if i > 0			/* add chars to key */
		     then do;
			if i + length (keystr) > 256
			then go to big_word;
			keystr = keystr || substr (cur_word, j, i);
			j = j + i;		/* j points to next hyphen or circumflex */
		     end;

		     if j <= length (cur_word)	/* something left */
		     then do;
			if j < length (cur_word)
			then next_char = substr (cur_word, j+1, 1);
			else next_char = " ";

			if next_char ^= "="		/* must be a hyphenation point */
			then do;
			     if length (keystr) = 0
			     then do;
				call com_err_ (0, whoami, "Hyphenation point precedes word.  Word ignored.  ^a", cur_word);
				return;
			     end;
			     if substr (keystr, length (keystr), 1) = "-"
			     then do;
				call com_err_ (0, whoami, "Hyphenation point immediately follows hyphen.  Word ignored.  ^a", cur_word);
				return;
			     end;
			     if length (keystr) > 32
			     then do;
				call com_err_ (0, whoami, "Hyphenation point occurs beyond 33rd character.  Word ignored.  ^a", cur_word);
				return;
			     end;
			     add_key_info.descrip.hpoints (length (keystr)) = "1"b; /* indicate hyphenation point */
			end;

			if next_char = "=" | next_char = "-" /* must be a literal hyphen */
			then do;
			     if length (keystr) = 256
			     then go to big_word;
			     keystr = keystr || "-";	/* indicate literal hyphen */
			     j = j + 1;		/* to skip over two character sequence */
			end;
		     end;
		end;

		if length (keystr) <= 32
		then if add_key_info.descrip.hpoints (length (keystr))
		     then do;
			call com_err_ (0, whoami, "Hyphenation point follows word.  Word ignored.  ^a", cur_word);
			return;
		     end;

/* add the word to the dictionary */

add_key:		add_key_info.key = keystr;
		add_key_info.key_len = length (keystr);

		call iox_$control (iocb_ptr, "add_key", addr (add_key_info), code);
		if code = 0
		then do;
		     word_count = word_count + 1;
		     return;
		end;

		if code ^= error_table_$key_duplication
		then do;
		     call com_err_ (code, whoami, "Cannot add ""^a"".", keystr);
		     return;
		end;

/* same word already in dictionary */
/* see if it has the same descriptor */

		get_key_info.key = add_key_info.key;
		get_key_info.key_len = 256;
		call iox_$control (iocb_ptr, "get_key", addr (get_key_info), code);
		if code ^= 0
		then do;
		     call com_err_ (code, whoami, "Cannot determine if word already in dictionary.  Word ignored.  ^a", keystr);
		     return;
		end;

		if string (get_key_info.descrip) = string (add_key_info.descrip) /* same descrip)tor */
		then return;			/* nothing to do */

		if force_opt | get_key_info.descrip.pad ^= ""b
		then do;				/* give word a new descriptor */
		     reassign_key_info.new_descrip = add_key_info.descrip;
		     call iox_$control (iocb_ptr, "reassign_key", addr (reassign_key_info), code);
		     if code ^= 0
		     then call com_err_ (code, whoami, "Cannot reassign ""^a"".", keystr);
		end;
		else call com_err_ (0, whoami, "Word already in dictionary with different ^[hyphenation^;notrim^].  Word ignored.  ^a",
		     (string (get_key_info.descrip.hpoints) ^= string (add_key_info.descrip.hpoints)), keystr);

	     end add;

/* A procedure to delete a word from the dictionary. */

delete:	     proc;

		if length (cur_word) > 256
		then go to word_not_found;

		sh_info.key_head = cur_word;
		call iox_$control (iocb_ptr, "seek_head", addr (sh_info), code);
		if code = 0
		then call iox_$control (iocb_ptr, "delete_key", addr (delete_key_info), code);

		if code ^= 0
		then do;
		     if code = error_table_$no_record | code = error_table_$no_key
		     then
word_not_found:		if brief_opt
			then;
			else call com_err_ (0, whoami, "Word not in dictionary.  ^a", cur_word);
		     else call com_err_ (code, whoami, "Cannot delete ""^a"".", cur_word);
		     return;
		end;

		word_count = word_count + 1;

	     end delete;

/* A procedure to list a word from the dictionary. */

list:	     proc;

		if length (cur_word) > 256
		then go to word_not_found;

		get_key_info.key = cur_word;
		get_key_info.key_len = 256;
		call iox_$control (iocb_ptr, "get_key", addr (get_key_info), code);
		if code ^= 0
		then do;
		     if code = error_table_$no_record | code = error_table_$no_key
		     then
word_not_found:		if brief_opt
			then;
			else call com_err_ (0, whoami, "Word not in dictionary.  ^a", cur_word);
		     else call com_err_ (code, whoami, "Cannot list ""^a"".", cur_word);
		     return;
		end;

		call output_word (get_key_info.key, get_key_info.key_len, string (get_key_info.descrip));


	     end list;

/* A procedure to find a word in the sequence of dictionaries
   defined by the "dict" search list.
*/

find:	     proc;

dcl  word_found char (256);
dcl  desc_found bit (36) aligned;
dcl  baddy fixed bin;
	     

		bad_dict.n = 0;

		call find_dict_word_ ((cur_word), string (fdw_control), word_found, desc_found, dict_path, bad_dict_ptr, code);

		if ^complained_once			/* for each command invocation */
		     then do baddy = 1 to bad_dict.n;	/* report each bad dictionary */
		     call com_err_ (bad_dict.entry.ecode (baddy), whoami, "^a", bad_dict.entry.path (baddy));
		end;

		if code ^= 0 
		     then if code = error_table_$recoverable_error 
		     then do;			/* print recoverable error message */
			if ^complained_once		/* only once per command invocation */
			     then do;		/* and don't abort */
			     call com_err_ (code, whoami, "^/");
			     complained_once = "1"b;
			end;
		     end;
		else do;
		     if code = error_table_$id_not_found /* this guy gets printed each time */
		     then if brief_opt		/* unless it's suppressed */
			then;
		          else call com_err_ (0, whoami, "Word not found.  ^a", cur_word);
		     else call com_err_ (code, whoami, "Cannot find ""^a"". ^[(Referencing dictionary ^a)^]",
			cur_word, ((dict_path ^= "") & (code ^= error_table_$fatal_error)), dict_path);
		     complained_once = "1"b;
		     return;
		end;

		call output_word (word_found, length (rtrim (word_found)), desc_found);

		
	     end find;


	end process_word;

/* A procedure to list all words in the dictionary in order. */

list_all:	proc;

dcl  i fixed bin;

	     i, code = 0;
	     do while (code = 0);
		call iox_$control (iocb_ptr, "get_key", addr (get_key_info), code);
		if code = 0
		then do;
		     call output_word (get_key_info.key, get_key_info.key_len, string (get_key_info.descrip));
		     i = i +1;
		     call iox_$position (iocb_ptr, 0, 1, code);
		end;
	     end;

	     if code ^= error_table_$end_of_info
	     then call com_err_ (code, whoami, "Cannot list remaining words.");
	     else if i = 0
	     then if ^brief_opt
		then call com_err_ (0, whoami, "No words in dictionary.");

	end list_all;

/* This procedure outputs a word.  If the raw option was not
   specified, the word is edited to display its hyphenation
   and notrim attributes.  If an output segment was specified,
   the word is copied to that segment with a newline appended.
   Otherwise, the word is printed on the user's terminal.
*/

output_word: proc (word, word_len, word_desc);

dcl  word char (256);
dcl  word_len fixed bin;
dcl  word_desc bit (36) aligned;

dcl 1 desc aligned like descriptor_template based (addr (word_desc));

dcl (i, i2, j) fixed bin;
dcl  out_buf char (300) varying;

	     if raw_opt
	     then out_buf = substr (word, 1, word_len);

	     else do;
		j = 1;
		if desc.notrim
		then out_buf = "^";
		else if substr (word, 1, 1) = "^"
		then do;
		     out_buf = "^=";
		     j = 2;
		end;
		else out_buf = "";

		do while (j <= word_len);

		     i = index (substr (word, j, word_len+1-j), "-") -1; /* find next hyphen */
		     if i = -1
		     then i = word_len + 1 - j;

		     if j <= 32
		     then do;
			i2 = index (substr (string (desc.hpoints), j, 33-j), "1"b); /* find next hyphenation point */
			if i2 = 0
			then i2 = 257;
		     end;
		     else i2 = 257;

		     i = min (i, i2);		/* get index of closest hyphen or hyphenation point */
		     if i > 0			/* we've skipped a few chars */
		     then do;			/* add them to output */
			out_buf = out_buf || substr (word, j, i);
			j = j + i;
			if i2 <= i		/* there is a hyphenation point */
			then out_buf = out_buf || "-"; /* show it */
		     end;

		     if j <= word_len		/* haven't reached the end yet */
		     then if substr (word, j, 1) = "-"	/* there's a real hyphen */
			then do;			/* put it in the output */
			     if i2 > i		/* there is no hyphenation point */
			     then out_buf = out_buf || "-=";
			     else out_buf = out_buf || "-";
			     j = j + 1;
			end;
		end;
	     end;

	     call output (out_buf);

	     if dictionary_opt
	     then do;
		call output (copy (" ", max (1, 19 - length (out_buf))));
		call output (rtrim (dict_path));
	     end;

	     call output ((NL));
	     return;

output:
     proc (str) recursive;

dcl  str char (*) varying parameter;
dcl  (len, chars_that_fit) fixed bin (21);

	len = length (str);

	if of_len + len + 1 > max_seg_size
	then if output_file_opt
	     then do;
		chars_that_fit = max_seg_size - of_len;
		substr (of, of_len+1, chars_that_fit) = str;

		if component = 0
		then do;

		     call terminate_file_ (of_ptr, max_seg_size * 9, TERM_FILE_BC | TERM_FILE_TERM, code);
		     if code ^= 0 then goto bad_of;

		     call make_msf_ (of_dname, of_ename, ring_brackets, code);
		     if code ^= 0 then goto bad_of;

		     call msf_manager_$open (of_dname, of_ename, fcb_ptr, code);
		     if code ^= 0 then goto bad_of;

		     call msf_manager_$get_ptr (fcb_ptr, 1, "1"b, of_ptr, bc, code);
		     if code ^= 0 then goto bad_of;

		     component = 1;
		     end;
		else do;
		     call terminate_file_ (of_ptr, max_seg_size * 9, TERM_FILE_BC | TERM_FILE_TERM, code);
		     if code ^= 0 then goto bad_of;

		     call msf_manager_$get_ptr (fcb_ptr, component+1, "1"b, of_ptr, bc, code);
		     if code ^= 0 then goto bad_of;

		     component = component + 1;
		     end;

		of_len = 0;			/* empty output file */

		if len > chars_that_fit
		then call output (substr (str, chars_that_fit + 1));
		return;
		end;
	     else do;
		call iox_$put_chars (iox_$user_output, of_ptr, of_len, code);
		if code ^= 0 then do;
		     call com_err_ (code, whoami, "attempting to write on user_output switch.");
		     goto clean_up;
		     end;

		of_len = 0;
		end;

	substr (of, of_len+1, len) = str;
	of_len = of_len + len;

	return;
	end output;

	end output_word;

%page;
/* include files */

%include vfs_info;
%include ak_info;
%include terminate_file;
%include access_mode_values;

     end add_dict_words;
