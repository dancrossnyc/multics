/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


hyphenate_word_: proc (pm_word, pm_space, pm_hpoint, pm_code);

/* This procedure finds the rightmost hyphenation point within
   a specified word that fits within a specified number of spaces.
*/

/* Coded 10/19/77 by J. Stern */
/* Modified 3/5/80 by E. Wallman to incorporate changes in J. Stern's */
/* private version that never got into the >unb product. */
/* Modified 7/10/81 by P. Benjamin to reflect change in find_dict_word_ 
			     calling sequence. */

/* Parameters */

dcl  pm_word char (*);		/* the word to be hyphenated (Input) */
dcl  pm_space fixed bin;		/* the space available up to and including the hyphen (Input) */
dcl  pm_hpoint fixed bin;		/* the hyphenation point (Output) */
dcl  pm_code fixed bin (35);		/* an error code (Output) */


/* Automatic */

dcl  nargs fixed bin;
dcl  space fixed bin;
dcl  i fixed bin;
dcl  code fixed bin (35);
dcl  word_found char (256);
dcl  dict_path char (168);
dcl  word char (256);
dcl  word_len fixed bin;
dcl (leader, trailer) fixed bin;

dcl 1 descriptor aligned,
    2 hpoints bit (32) unal,
    2 pad bit (4) unal;

/* Based */

dcl  based_descrip bit (36) aligned based (addr (descriptor));


/* Static */

dcl  error_table_$id_not_found fixed bin (35) ext;


/* Builtins */

dcl (length, substr, addr, index, reverse, min, dim, verify, null) builtin;


/* Entries */

dcl  find_dict_word_ entry (char (*), bit (36) aligned, char (256),
     bit (36) aligned, char (168), ptr, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);

    call cu_$arg_count (nargs);	/* see how many args */
    if nargs = 4			/* fourth arg is optional */
    then pm_code = 0;
    pm_hpoint = 0;

    leader, trailer = 0;		/* do punctuation stripping */
    leader = verify (pm_word, "([{""") -1;
    if leader = -1
    then return;
    trailer = verify (reverse (pm_word), " )]}""!,.;:?") -1;
    if trailer = -1
    then return;

    word_len = length (pm_word) - leader - trailer;
    if word_len > 256
    then return;
    word = substr (pm_word, leader+1, word_len);

    space = pm_space - leader;
    if space < 2 | space > length (pm_word)
    then return;
    space = min (space, word_len);

/*		first_try = "1"b; */
retry: call find_dict_word_ (word, ""b, word_found, based_descrip, dict_path, null, code);
    if code ^= 0			/* | based_descrip = ""b */
    then do;

/* The code following involves parts-of-speech processing that was rejected
   for the >unb product. It is preserved here for posterity. */

/* dcl  first_try bit (1) aligned;
   /*dcl  new_suffix (6) char (1) varying int static options (constant) init ("y", "o", "", "y", "", "");
   /*dcl (si, sl) fixed bin;
   /*dcl  suffix (6) char (3) varying int static options (constant) init ("ies", "oes", "s", "ied", "ed", "ing");
   /*dcl  suffix_syllable (6) bit (1) int static options (constant) init ((5) (1) "0"b, "1"b);
   /*		     if first_try
   /*		     then do si = 1 to dim (suffix, 1);		/* see if we recognize a suffix */
/*			sl = length (suffix (si));
   /*			if substr (word, word_len-sl+1, sl) = suffix (si)
   /*			then do;
   /*			     first_try = "0"b;
   /*			     substr (word, word_len-sl+1, sl) = new_suffix (si);
   /*			     word_len = word_len -sl + length (new_suffix (si));
   /*			     go to retry;
   /*			end;
   /*		     end; */

       if nargs = 4
       then if code ^= error_table_$id_not_found
	then pm_code = code;
       return;
    end;

/*		if ^first_try
   /*		then if suffix_syllable (si)
   /*		     then if word_len <= 32
   /*			then substr (descriptor.hpoints, word_len, 1) = "1"b; */

    space = min (33, space);
    i = index (reverse (substr (descriptor.hpoints, 1, space-1)), "1"b);
    if i ^= 0
    then do;
       i = space - i;
       if i < word_len
       then if substr (word, i+1, 1) = "-"
	then if nargs = 4
	   then i = i + 1;
	   else return;		/* runoff can't handle this */
       pm_hpoint = i + leader;
    end;

 end hyphenate_word_;
