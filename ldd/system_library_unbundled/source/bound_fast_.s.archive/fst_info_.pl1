/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-12-03,TLNguyen), approve(87-12-03,MCR7806),
     audit(87-12-10,Lippard), install(88-01-19,MR12.2-1015):
     - Remove com_err_, get_group_id_, get_wdir_, ioa_$nnl, ioa_$rs,
       ioa_$rsnnl from the source because they are not referenced anywhere
       within it.
     - Declare the fixed, max, verify as builtin type because they are
       referenced but they are not defined anywhere within the source.
                                                   END HISTORY COMMENTS */


fst_info_: proc (edit_ptr);

/* This procedure prints accounting information, the user's name and project, and the default name (which may be null

   "program name"  HHH.M mst DDD  User_id.Project_id
   $XX.XX speXt/ XX.XX limit    XXX records used / XXX limit

   Written 3/76 by S.E. Barr
   Modified 1984-08-24 BIM for pit instead of pitmsg.
*/
/* parameters */

dcl  edit_ptr ptr;					/* prt to edit structure */
dcl  path char (*) var;

/* automatic */

dcl  code fixed bin (35);
dcl  quota fixed bin (18);
dcl  quota_used fixed bin (18);
dcl  pp ptr;
dcl  date_string char (24) aligned;
dcl  name char (168) var;

dcl (fixed, max, null, substr, length, index, verify) builtin;

dcl 1 f aligned based (edit_ptr) like fst_edit_info;

/* external */

dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  clock_ entry () returns (fixed bin (71));
dcl  date_time_ entry (fixed bin (71), char (*) aligned);
dcl  get_pdir_ entry () returns (char (168) aligned);
dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$quota_read entry (char (*), fixed bin (18), fixed bin (71), bit (36)aligned, fixed bin, fixed bin (1), fixed bin (18), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_$ioa_switch entry options (variable);
dcl  iox_$user_output ptr ext;

/*   */
%include user_attributes;
%include fst_edit_info;
%include pit;


	call hcs_$initiate ((get_pdir_ ()), "pit", "", 0, 1, pp, code);
	if pp ^= null then do;
	     call set_name_date (f.pathname);

	     call hcs_$quota_read ((f.working_dir), quota, (0), ("0"b), (0), (0), quota_used, code);

	     call ioa_$ioa_switch (iox_$user_output,
		"""^a""  ^a  ^a.^a^/$^7.2f spent/^a limit   ^d records used / ^d limit", name, date_string,
		pp -> pit.login_name, pp -> pit.project,
		pp -> pit.dollar_charge, (cv_limit (pp -> pit.dollar_limit)), quota_used, quota);
	     call hcs_$terminate_noname (pp, code);
	end;
	else call dfast_error_ (code, "info", "");

	return;

header:	entry (edit_ptr, path);

	call set_name_date (path);
	call ioa_$ioa_switch (iox_$user_output, "^/""^a""  ^a^/", name, date_string);

	return;

/*   */
cv_limit:	procedure (limit) returns (char (9) aligned);

/* procedure to convert a float bin $limit into either the string, "open", if $limit is >= 1e37,
   or to convert a float bin $limit into an integer $limit  */

dcl  limit float bin;
dcl  lim_pic pic "zzzzz9v.99";

	     if limit >= 1e36 then return ("open");
	     lim_pic = fixed (limit);
	     return (substr (lim_pic, max (verify (lim_pic, " "), 1)));

	end cv_limit;



/* This procedure sets path:  if the entry is in the working directory only the entry name will be printed;
   otherwise the entire path will be printed.  It is possible for the entryname to be null.
*/
set_name_date: proc (path);

dcl  path char (*) var;

	     if index (path, f.working_dir) = 1 then name = substr (path, length (f.working_dir) + 2);
	     else name = path;
	     call date_time_ (clock_ (), date_string);

	     return;

	end set_name_date;
     end fst_info_;
