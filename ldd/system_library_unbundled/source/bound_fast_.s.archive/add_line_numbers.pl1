/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-12-03,TLNguyen), approve(87-12-03,MCR7806),
     audit(87-12-10,Lippard), install(88-01-19,MR12.2-1015):
     - Fixed string range condition occured in the copy internal procedure.
     - Replace the hcs_$initiate_count entrypoint in the get_seg internal
       procedure with the initiate_file_ to meet standards and add the include
       file named access_mode_values.incl.pl1.
     - Replace the "^a>^a" argument string in com_err_ with the pathname_.
     - Remove error_table_$badopt and error_table_$segknown entrypoints
       from the source since they are not referenced anywhere within it.
                                                   END HISTORY COMMENTS */


add_line_numbers: aln: proc;

/* * This procedure adds or deletes line numbers from the beginning of each line or a specified segment.
   * It also discards characters at the end of a segment that does not end with a new_line character.
   *
   *	add_line_numbers, aln  path  [sequence_number]  [increment]
   *
   *	     default values:
   *		sequence_number = 100
   *		increment = 10
   *
   *	delete_line_numbers, dln  path
   *
   *	     This procedure strips off leading digits from a line.  If the line does not begin with a digit,
   *	     it is kept unchanged.  If the leading digits are followed by a blank, then one blank is also  removed.
   *
   *		" 20 abc"		->	" 20 abc"		no leading digit
   *		"20 abc"		->	"abc"
   *		"20abc"		->	"abc"
   *		"20  abc"		->	" abc"		only one blank is removed
   *
   * Written 3/76 by S.E. Barr
*/
/* Bug fixed that adds null chars 06/24/81 S. Herbst */

/* automatic */

dcl  arg_len fixed bin;
dcl  arg_ptr ptr;
dcl  bit_count fixed bin (24);
dcl  command_name char (19);
dcl  code fixed bin (35);
dcl  directory_name char (168) aligned;
dcl  entry_name char (32) aligned;
dcl  i fixed bin (21);				/* num characters in line */
dcl  increment fixed bin;
dcl  nargs fixed bin;				/* number of arguments to command */
dcl  number_pic pic "99999";				/* leading zeros  */
dcl  seg_length fixed bin (21);
dcl  seg_ptr ptr init (null);
dcl  seq_number fixed bin;
dcl  start fixed bin (21);
dcl  temp_length fixed bin (21);
dcl  temp_ptr ptr init (null);

dcl (addr, length, substr, index, verify, null, divide) builtin;

dcl  cleanup condition;

/* constants */

dcl  DIGIT char (10) int static options (constant) init ("0123456789");
dcl  edit_max_number fixed bin int static options (constant) init (99999);
dcl  NEW_LINE char int static options (constant) init ("
");

/* based */

dcl  arg char (arg_len) based (arg_ptr);
dcl  ptr_array (1) ptr based;
dcl  seg char (seg_length) based (seg_ptr);
dcl  temp char (temp_length) based (temp_ptr);


/* external */

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  dfast_error_ entry (fixed bin (35), char (*), char (*));
dcl  error_table_$wrong_no_of_args fixed bin (35) ext;
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  fst_cv_line_num_ entry (char (*), fixed bin, fixed bin (35)) returns (bit (1) unal);
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (21), fixed bin (35));
dcl  initiate_file_ entry (char (*) aligned, char (*) aligned, bit (*), pointer, fixed bin (24), fixed bin (35));
dcl  pathname_ entry (char (*) aligned , char (*) aligned) returns (char (168));
dcl  release_temp_segments_ entry (char (*), (*)ptr, fixed bin (35));

%page;
%include dfast_error_codes;
%page;
%include access_mode_values;

/*   */
	command_name = "add_line_numbers";

/* parse arguments for pathname and optionsl sequence number and increment */

	call cu_$arg_count (nargs);
	if nargs > 0 & nargs <= 3 then do;

	     temp_ptr, seg_ptr = null;
	     on cleanup call term_seg;

	     if get_seg () then do;
		seq_number = 100;
		increment = 10;

		if nargs >= 2 then do;
		     call cu_$arg_ptr (2, arg_ptr, arg_len, code);
		     if code = 0 then do;
			if fst_cv_line_num_ (arg, seq_number, code) then do;
			     if nargs = 3 then do;
				call cu_$arg_ptr (3, arg_ptr, arg_len, code);
				if code = 0 then if fst_cv_line_num_ (arg, increment, code) then;
			     end;
			end;
		     end;
		     if code ^= 0 then call dfast_error_ (code, command_name, arg);
		end;


/* loop through the text adding the numbers to each line.  The only error that can occur, is exceeding the max line number */

		if code = 0 then do;
		     do start = 1 repeat (start + i) while (start <= seg_length & code = 0);

			if seq_number <= edit_max_number then do;
			     i = index (substr (seg, start), NEW_LINE);
			     if i > 0 then do;
				number_pic = seq_number;
				call copy (number_pic || " ");
				call copy (substr (seg, start, i));
			     end;
			     else i = seg_length + 1; /* discard rest of the characters */
			     seq_number = seq_number + increment;
			end;
			else code = error_edit_max_num;
		     end;

		     if code = 0 then call switch;
		     else call dfast_error_ (code, command_name, "");
		end;
	     end;
	     call term_seg;
	end;
	else call com_err_ (error_table_$wrong_no_of_args, command_name, """path seq_number increment""");

	return;

/*  */
delete_line_numbers: dln: entry;

	command_name = "delete_line_numbers";
	call cu_$arg_count (nargs);
	if nargs = 1 then do;

	     temp_ptr, seg_ptr = null;
	     on cleanup call term_seg;

	     if get_seg () then do;
		do start = 1 repeat (start + i) while (start <= seg_length);
		     i = verify (substr (seg, start), DIGIT);
		     if i > 0 then do;
			if i > 1 then if substr (seg, start + i -1, 1) = " " then i = i + 1;
			start = start + i -1;
			i = index (substr (seg, start), NEW_LINE);
			if i = 0 then i = seg_length; /* discard line fragment */
			else call copy (substr (seg, start, i));
		     end;
		     else i = seg_length;		/* discard line fragment */
		end;
		call switch;
	     end;
	     call term_seg;
	end;
	else call com_err_ (error_table_$wrong_no_of_args, command_name, "pathname is missing");

	return;

/*  */
get_seg:	proc returns (bit (1) unal);


	     call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	     if code = 0 then do;
		call expand_path_ (arg_ptr, arg_len, addr (directory_name), addr (entry_name), code);
		if code = 0 then do;
		     call initiate_file_ (directory_name, entry_name, R_ACCESS, seg_ptr, bit_count, code);
		     if seg_ptr ^= null then do;
			if bit_count > 0 then do;
			     seg_length = divide (bit_count, 9, 21, 0);
			     call get_temp_segments_ ("fast", addr (temp_ptr) -> ptr_array, code);
			     temp_length = 0;
			     if code = 0 then return ("1"b);
			end;
			else call com_err_ (0, command_name, "segment is empty", arg);
		     end;
		     else call com_err_ (code, command_name, pathname_ (directory_name, entry_name));
		end;
		else call com_err_ (code, command_name, arg);
	     end;
	     else call com_err_ (code, command_name, "pathname is missing");

	     return ("0"b);

	end get_seg;

/*   */
copy:	proc (string);

dcl  string char (*);
dcl  next_position fixed bin;

	     next_position = temp_length + 1;
	     temp_length = temp_length + length (string);
	     substr (temp, next_position, length (string)) = string;


	     return;

	end copy;



term_seg:	proc;

	     if seg_ptr ^= null then call hcs_$terminate_noname (seg_ptr, 0);
	     if temp_ptr ^= null then call release_temp_segments_ (command_name, addr (temp_ptr) -> ptr_array, code);

	     return;

	end term_seg;


switch:	proc;

	     seg_length = temp_length;
	     bit_count = seg_length * 9;
	     seg = temp;
	     call hcs_$set_bc_seg (seg_ptr, bit_count, code);
	     if code = 0 then call hcs_$truncate_seg (seg_ptr, divide (bit_count + 35, 36, 21, 0), code);

	     return;

	end switch;

     end add_line_numbers;
