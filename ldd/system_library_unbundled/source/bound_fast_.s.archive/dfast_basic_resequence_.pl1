/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-12-03,TLNguyen), approve(87-12-03,MCR7806),
     audit(87-12-10,Lippard), install(88-01-19,MR12.2-1015):
     - Remove the "search" from the source because it is not referenced
       anywhere within the source program.
                                                   END HISTORY COMMENTS */


dfast_basic_resequence_: proc (max_seg_size, line_table_ptr, input_segment, resequence_lines, temp_ptr, temp_length, code);

/* *	This procedure is given a block of Basic source lines and a table of line numbers.
   *	The table has two numbers for each line that is to be changed -- old_number, the current number for the
   *	line; and new_number, the number that the line will have after resequencing.  The source code is
   *	parsed and all Basic references to lines in the line table are edited.  the procedure can be called
   *	in two ways:
   *
   *	     resequence_lines = "1"b		The line numbers will be checked against the line table in addition
   *					to the editing for line number references.
   *
   *	     resequence_lines = "0"b		Only the line reference editing will be done.
   *
   *
   *	Statements with possible line number references:
   *
   *	     if ---- then NUMBER
   *	     if ---- goto NUMBER
   *	     gosub NUMBER
   *	     goto NUMBER
   *	     on ---- goto NUMBER, NUMBER . . .
   *	     on ---- gosub NUMBER, NUMBER . . .
   *	     on ---- then NUMBER, NUMBER . . .
   *
   *	Keywords may contain blanks and may be uppercase or lowercase.
   *   Modified 10/28/83 C Spitzer. phx8299. fix so doesn't remove whitespace at
		end of line or end of statement but before comment.
*/

/* parameters */

dcl  max_seg_size fixed bin (21);			/* max number of characters in segment */
dcl  line_table_ptr ptr;
dcl  input_segment char (*);
dcl  resequence_lines bit (1);
dcl  temp_ptr ptr;
dcl  temp_length fixed bin (21);
dcl  code fixed bin (35);

/* automatic */

dcl  char char (1);
dcl  line char (256) var;				/* lowercase image of one line */
dcl  line_start fixed bin (21);			/* index in input_segment of line being edited */
dcl  line_length fixed bin (21);			/* number of characters in input segment */
dcl  input_segment_length fixed bin (21);		/* number of characters to be edited */
dcl  number_string char (12);				/* scratch space for formatting new numbers */
dcl  number_length fixed bin (21);			/* number of ditits in line number */
dcl  number_pic pic "99999";

dcl (index, length, substr, translate, verify) builtin;

/* constants */

dcl  LEADING_ZERO bit (1) unal int static options (constant) init ("1"b);
dcl  NEW_LINE char (1) int static options (constant) init ("
");
dcl  DIGITS char (10) int static options (constant) init ("0123456789");
dcl  MAX_NUM_DIGITS int static options (constant) init (5); /* number of digits in a line number */
dcl  WHITE_SPACE char (2) int static options (constant) init ("	 "); /* tab & blank */
dcl  APOSTROPHE char (1) int static options (constant) init ("'"); /* ' = rest of line is comment */
dcl  QUOTE char (1) int static options (constant) init (""""); /* "string" is ignored by resequencer */

/* based */

dcl 1 t aligned based (line_table_ptr),
    2 num_lines fixed bin (21),
    2 line_table (t.num_lines),
      3 old_number fixed bin (17) unal,
      3 new_number fixed bin (17) unal;

dcl  temp_seg char (max_seg_size) based (temp_ptr);

/* entries */

dcl  ioa_$rsnnl entry options (variable);

%include dfast_error_codes;
/*  */
/* *	The source code is parsed one line at a time and the edited version is put in temp_seg.
   *
   *	The line begins with a number:
   *
   *	     1.  The line number is edited and copied into temp_seg.
   *	     2.  The portion of the line following the line number is converted to lowercase and stored in line.
   *	     3.  The line image is parsed for line number references and the original is copied into temp_seg
   *	         with the line references changed.
   *
   *	The line does not begin with a number:
   *
   *	     The line is copied as is.
*/

	line_start = 1;
	input_segment_length = length (input_segment);

	do while (line_start <= input_segment_length & code = 0);

	     line_length = index (substr (input_segment, line_start), NEW_LINE);
	     if line_length > 0 then do;

		number_length = verify (substr (input_segment, line_start, line_length), DIGITS) -1;
		if number_length > 0 then do;
		     if resequence_lines then do;
			if ^store_new_number (LEADING_ZERO, substr (input_segment, line_start, number_length))
			then call move (line_start, number_length);
		     end;
		     else call move (line_start, number_length);
		     line_start = line_start + number_length;
		     line_length = line_length - number_length;

		     line = translate (substr (input_segment, line_start, line_length),
			"abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");

		     call edit_line;
		end;

		else call move (line_start, line_length);

		line_start = line_start + line_length;
	     end;

	     else code = error_no_nl;
	end;

	return;

/*  */
/*  This procedure copies a portion of the input segment into the temporary segment.
*/
move:	proc (start, num_chars);

dcl  start fixed bin (21);				/* index on input segment of first character to move */
dcl  num_chars fixed bin (21);			/* number of characters to move */

	     if num_chars > 0 then do;
		substr (temp_seg, temp_length + 1, num_chars) = substr (input_segment, start, num_chars);
		temp_length = temp_length + num_chars;
	     end;

	     return;

	end move;

/*  */
/*  This procedure checks line which contains a lowercase image of one basic source line.
   If it locates a basic statement that refers to a line number, the new line number (if it exits)
   is substituted.  If it does not find a line number reference, no change is made.
*/
edit_line: proc;

dcl  i fixed bin (21);
dcl  replace_number bit (1);
dcl  multiple_numbers bit (1);			/* ON if more than on number expected */

	     i = 1;
	     replace_number = "0"b;
	     multiple_numbers = "0"b;

/* if ---- then NUMBER */

	     if next_word (i, "if") then do;

		if search_word (i, "then") then replace_number = "1"b;
		else if search_word (i, "go") then
		     if next_word (i, "to") | next_word (i, "sub") then replace_number = "1"b;
	     end;

/* goto NUMBER */

	     else if next_word (i, "go") then do;
		if next_word (i, "to") | next_word (i, "sub") then replace_number = "1"b;
	     end;

/* on ---- goto NUMBER, NUMBER . . . */

	     else if next_word (i, "on") then do;
		multiple_numbers = "1"b;
		if search_word (i, "go") then do;
		     if next_word (i, "to") | next_word (i, "sub") then replace_number = "1"b;
		end;
		else if search_word (i, "then") then replace_number = "1"b;
	     end;

	     if replace_number then do;

		call move (line_start, i -1);

		call store_multiple_numbers (i, multiple_numbers);

		call move (line_start + i -1, line_length - i + 1);
	     end;

	     else call move (line_start, line_length);

	     return;

	end edit_line;

/*  */
/* *	This procedure parses line (which contains a lowercase image of a Basic source line) beginning at start.
   *	It ignores blanks and tabs.  There are two returns:
   *
   *	     "1"b		The next word is 'word'
   *			start = index on line following 'word'
   *
   *	     "0"b		The next word is not 'word'
   *			start is unchanged.
*/
next_word: proc (start, word) returns (bit (1));

dcl  start fixed bin (21);
dcl  word char (*);

dcl  word_length fixed bin (21);
dcl  word_index fixed bin (21);
dcl  line_index fixed bin (21);

	     word_length = length (word);
	     line_index = start;

	     do word_index = 1 to word_length;

		if get_char (line_index, char) then do;

		     if char ^= substr (word, word_index, 1) then return ("0"b);
		     line_index = line_index + 1;
		end;
		else return ("0"b);
	     end;

	     start = line_index;
	     return ("1"b);

	end next_word;

/*  */
/*  This procedure looks for a word in line beginning at start.  The word may have imbedded blanks.

   *	returns	"1"b	The word was found.
   *			start = index of character following word.
   *	returns	"0"b	The word was not found.
   *			start is unchanged.
   *
   * The procedure skips quoted strings and stops checking if an apostrophy is found
   * indicating the rest of the line is a comment.
*/
search_word: proc (start, word) returns (bit (1));

dcl  start fixed bin (21);
dcl  word char (*);

dcl  word_length fixed bin (21);
dcl  word_index fixed bin (21);
dcl (i, j) fixed bin (21);

	     i = start;
	     word_length = length (word);
	     word_index = 1;

	     do while (i <= line_length);
		if get_char (i, char) then do;
		     if char = substr (word, word_index, 1) then do;
			if word_index = word_length then do;
			     start = i + 1;
			     return ("1"b);
			end;

			else word_index = word_index + 1;
		     end;

		     else do;
			word_index = 1;

			if char = QUOTE then do;
			     j = index (substr (line, i + 1), QUOTE); /* This also covers "" inside a string */
			     if j > 0 then i = i + j;
			     else return ("0"b);
			end;
			else if char = APOSTROPHE then i = line_length; /* omit rest of line */
		     end;

		     i = i + 1;
		end;

		else return ("0"b);
	     end;

	     return ("0"b);

	end search_word;



/*  */
/*  This procedure finds the next non_blank character on the line.  If the end of the line is
   *  reached "0"b is returned.
*/
get_char:	proc (start, char) returns (bit (1));

dcl  start fixed bin (21);
dcl  char char (1);

dcl  i fixed bin (21);

	     if start <= line_length then do;

		i = verify (substr (line, start), WHITE_SPACE);

		if i > 0 then do;
		     start = start + i -1;
		     char = substr (line, start, 1);
		     return ("1"b);
		end;
	     end;

	     start = line_length;

	     return ("0"b);

	end get_char;

/*  */

/*  This procedure expects a line segment of the form:
   *
   *	[<blanks> <digit>] . . .
   *
   *  It forms a number from the digits and if the number is in the line table, the corresponding
   *  new number is used instead.  If the number is not in the line table or if a number is not
   *  found on the line, the line is copied as is.
*/
edit_number: proc (start) returns (bit (1));

dcl  start fixed bin (21);

dcl  index_first_digit fixed bin (21);
dcl  num_digits fixed bin;
dcl  i fixed bin (21);
dcl  not_eol bit (1) aligned;

	     num_digits = 0;
	     i = start;
	     not_eol = get_char (i, char);

	     do while (not_eol);

		if index (DIGITS, char) > 0 then do;

		     num_digits = num_digits + 1;
		     if num_digits <= MAX_NUM_DIGITS then do;
			if num_digits = 1 then index_first_digit = i;
			substr (number_string, num_digits, 1) = char;
			i = i + 1;
			if i > line_length
			then not_eol = "0"b;
			else char = substr (line, i, 1);
		     end;

		     else return ("0"b);
		end;

		else do;
		     if num_digits > 0 then do;
			call move (line_start + start -1, index_first_digit - start);
			if store_new_number (^LEADING_ZERO, substr (number_string, 1, num_digits)) then start = i;
			else do;
			     call move (line_start + index_first_digit -1, i - index_first_digit);
			     start = i;
			end;
			return ("1"b);
		     end;

		     else return ("0"b);

		end;

	     end;


	     return ("0"b);

	end edit_number;

/*  */

store_multiple_numbers: proc (start, multiple_numbers);

dcl  start fixed bin (21);
dcl  j fixed bin (21);
dcl  multiple_numbers bit (1);

	     do while (edit_number (start));
		j = start;
		if get_char (j, char) then do;
		     if char = "," then do;
			call move (line_start + start -1, j - start + 1);
			start = j + 1;
		     end;
		     else return;
		end;
		else return;

		if ^multiple_numbers then return;
	     end;

	     return;

	end store_multiple_numbers;

/*  */
/* *	This procedure is given a string of digits.  It converts the string into a number and looks
   *	the number up in the line table.  If the number is in the line table, it puts the corresponding
   *	new number in the temporary segment.  If the number is not in the line table, it does nothing.
   *
   *	There are two returns:
   *
   *	     "1"b		The number was found.
   *	     "0"b		The number was not found.
*/
store_new_number: proc (leading_zero, string) returns (bit (1));

dcl  leading_zero bit (1) unal;			/* ON for leading zeros */
dcl  string char (*);

dcl  number fixed bin (21);
dcl  j fixed bin (21);
dcl  i fixed bin;

	     number_pic = 0;
	     substr (number_pic, MAX_NUM_DIGITS + 1 - length (string), length (string)) = string;
	     number = number_pic;

	     do j = 1 to num_lines;
		if number = line_table (j).old_number then do;
		     if leading_zero then do;

			number_pic = line_table (j).new_number;
			substr (temp_seg, temp_length + 1, MAX_NUM_DIGITS) = number_pic;
			temp_length = temp_length + MAX_NUM_DIGITS;
		     end;
		     else do;
			call ioa_$rsnnl ("^d", number_string, i, line_table (j).new_number);
			substr (temp_seg, temp_length + 1, i) = number_string;
			temp_length = temp_length + i;
		     end;

		     return ("1"b);
		end;
	     end;


	     return ("0"b);

	end store_new_number;

     end dfast_basic_resequence_;
