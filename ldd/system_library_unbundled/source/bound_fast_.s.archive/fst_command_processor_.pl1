/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-12-03,TLNguyen), approve(87-12-03,MCR7806),
     audit(87-12-10,Lippard), install(88-01-19,MR12.2-1015):
     - Replace the "changes will be lost if you continue.  Do you want to
       continue?" queried message with "Changes will be lost if you quit.
       Do you want to quit?".
     - Remove the mod from the source because it is not referenced anywhere
       within the source.
                                                   END HISTORY COMMENTS */


fst_command_processor_: proc (arg_line, edit_changes);

/* * This procedure parses the user's command line.  If it finds a commmand it recognizes, it builds a descriptor
   * list and calls the command.  The input line is assumed to be non-blank.
   * Arguments are separated by blanks or tabs and there is a maximum of ten arguments allowed.
   *
   *	edm	on quit the user is queried, if he wants to continue, pi is signaled.
   *	logout	if editing changes will be lost, the user is queried.
   *
   * Written 3/76 by S.E. Barr
   */
/* Fixed to find commands each time rather than assume their existence 12/12/79 S. Herbst */
/* Add use_ep_basic and use_sp_basic commands. 10/25/83 C Spitzer */

/* parameters */

dcl  arg_line char (*);				/* user's command line */
dcl  edit_changes bit (1) unal;			/* edit changes since last save */

/* automatic */
dcl (start, num_chars) fixed bin;			/* start and number of characters in argument */
dcl  name char (32);				/* command name */
dcl  line_length fixed bin;				/* number of characters in line  */
dcl  i fixed bin;
dcl  command_index fixed bin;				/* index to procedure ptr */
dcl  arg_length (max_num_args) fixed bin;		/* temporarily holds argument lengths */
dcl 1 descriptors (max_num_args) aligned based (addr (al.pointers (num_args + 1))),
    2 desc_pointers bit (18) unal,
    2 pad_pointers bit (18) unal,
    2 flag bit (1) unal,
    2 type bit (6) unal,
    2 packed bit (1) unal,
    2 ndims bit (4) unal,
    2 size bit (24) unal;
dcl 1 al aligned,
    2 dum_ptr ptr,
    2 num_args fixed bin (16) unaligned,
    2 tag bit (19) initial ("0000000000000000100"b) unaligned,
    2 ndescs fixed bin (16) unaligned,
    2 pad bit (19) unaligned,
    2 pointers (20) ptr;
dcl (addr, bin, bit, hbound, length, null, rel, search, substr, unspec, verify) builtin;
dcl  line char (256);
dcl  answer char (3) var;				/* 'yes' or 'no' for queries */
dcl 1 query_info aligned,
    2 version fixed bin init (2),
    2 yes_or_no_sw bit (1) unal init ("1"b),		/* must be yes or no */
    2 suppress_name_sw bit (1) unal init ("1"b),		/* don't print name */
    2 code fixed bin (35) init (0),
    2 query_code fixed bin (35) init (0);

dcl  quit condition;

/* internal static */

dcl  max_num_args fixed bin int static options (constant) init (10);
dcl  white_space char (2) int static options (constant) init ("	 "); /* TAB BLANK */

/* based */

dcl  proc_ptr ptr based (addr (entry_value));

/* external */

dcl  command_names (50) char (20) int static options (constant) init (
     "add_line_numbers", "aln",
     "add_name", "an",
     "basic", "",
     "copy", "cp",
     "delete", "dl",
     "delete_acl", "da",
     "delete_line_numbers", "dln",
     "delete_name", "dn",
     "dprint", "dp",
     "edm", "edm",
     "fortran", "ft",
     "help", "",
     "how_many_users", "hmu",
     "link", "lk",
     "list", "ls",
     "list_acl", "la",
     "logout", "logout",
     "rename", "rn",
     "set_acl", "sa",
     "set_tty", "stty",
     "truncate", "tc",
     "use_ep_basic", "",
     "use_sp_basic", "",
     "convert_numeric_file", "",
     "unlink", "ul");

dcl  cu_$gen_call entry (ptr, ptr);
dcl  command_query_ entry options (variable);
dcl  cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry);
dcl  ioa_$ioa_switch entry options (variable);
dcl  iox_$user_output ext ptr;

dcl  entry_value entry variable options (variable);

/* */
	start = 1;
	line = arg_line;				/* setup for get_arg  */
	line_length = length (arg_line);
	command_index = 0;

	if get_arg () then do;
	     name = substr (line, start, num_chars);
	     start = start + num_chars;
	     unspec (al) = "0"b;
	     do command_index = hbound (command_names, 1) by -1 to 1
		while (command_names (command_index) ^= name); end;

	     if command_index > 0 then do;
		num_args = 0;

		do while (get_arg ());
		     if num_args < max_num_args then do;
			num_args = num_args + 1;
			al.pointers (num_args) = addr (substr (line, start, 1));
			arg_length (num_args) = num_chars;
			start = start + num_chars;
		     end;
		     else call abort ("maximum of 10 arguments was exceeded", substr (line, start, num_chars));
		end;
		al.tag = "0000000000000000100"b;
		al.ndescs = num_args;

		do i = 1 to num_args;
		     desc_pointers (i) = rel (addr (descriptors (i).flag));
		     descriptors (i).flag = "1"b;
		     descriptors (i).size = bit (bin (arg_length (i), 24));
		     descriptors (i).type = bit (bin (21, 6));
		     descriptors (i).packed = "1"b;
		end;

		if name = "edm" then on quit call edm_query;
		else if name = "logout" then call logout_query; /* check if editing will be lost */
		else if name = "help" then name = "fst_help_";
		else if name = "basic" then name = "fst_compile_$basic";
		else if name = "fortran" | name = "ft" then name = "fst_compile_$fortran";
		else if name = "use_ep_basic" then name = "fst_compile_$ep_basic";
		else if name = "use_sp_basic" then name = "fst_compile_$sp_basic";

		entry_value = cv_entry_ (name, null, code);
		if code ^= 0 then do;
		     call ioa_$ioa_switch (iox_$user_output,
			"fast:  ^a not an object segment.", name);
		     go to RETURN;
		end;

		call cu_$gen_call (proc_ptr, addr (al.num_args));
	     end;
	     else call abort ("unrecognized command", name);
	end;
RETURN:
	return;

/*  */
/* * This procedure gets the index of the next argument on the line.   It uses global variables:
   *
   *	line		user's command line
   *	start		(input) index to begin search
   *			(output) index of start of argument
   *	num_chars		(output) length of argument
   *
   *	"1"b		the argument was found
   *	"0"b		no arguments remain on the line
*/
get_arg:	proc () returns (bit (1));

dcl  i fixed bin;

	     if start <= line_length then do;
		i = verify (substr (line, start, line_length - start + 1), white_space);
		if i > 0 then do;
		     start = start + i -1;
		     num_chars = search (substr (line, start, line_length - start + 1), white_space) -1;
		     if num_chars = -1 then num_chars = line_length - start + 1;
		     return ("1"b);
		end;
	     end;

	     return ("0"b);

	end get_arg;


/* This procedure prints an error message and then returns from fst_command_processor_ */
abort:	proc (err_message, add_info);

dcl  err_message char (*);
dcl  add_info char (*);

	     call ioa_$ioa_switch (iox_$user_output, "fast:  ^a  ^a", err_message, add_info);

	     goto RETURN;

	end abort;

/*  */
/*  This procedure is called when the user has quit out of edm.  If he wants to continue editing, program
   interrupt is signaled.  Otherwise a non-local goto is made to return to command level.
*/
edm_query: proc;

dcl  program_interrupt condition;

	     call ioa_$ioa_switch (iox_$user_output, "QUIT");
	     call command_query_ (addr (query_info), answer, "edm", "Do you want to continue editing ?");
	     if answer = "yes" then signal program_interrupt;
	     else goto RETURN;

	end edm_query;

/*  This procedure is called when the user types logout.  If there is temporary text that has been modified
   since the last save, the user will be queried.  If he types 'yes' logout will be called.  If he types 'no'
   the process will return to command level.
*/
logout_query: proc;

	     if edit_changes then do;
		call command_query_ (addr (query_info), answer, "fast",
		     "Changes will be lost if you quit.  Do you want to quit ?");
		if answer = "no" then goto RETURN;
	     end;

	     return;

	end logout_query;

     end fst_command_processor_;
