/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1988           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-12-02,TLNguyen), approve(87-12-02,MCR7806),
     audit(87-12-10,Lippard), install(88-01-19,MR12.2-1015):
     - Fixed size condition raised when calculate the length of the allocated
       variable named dump in the set_up_run_unit internal procedure.
     - Remove based_bit75, i, index, link_ptr, original_linkp, and size
       from the source because they are referenced anywhere within it.
                                                   END HISTORY COMMENTS */


fast_run_unit_manager_: proc (program_ptr, program_lng, arg_flags, main_ename, a_code);

/* coded March 1976 by M. Weaver */
/* modified October 1976 by M. Weaver to use new get_definition_  calling  sequence */
/* modified December 1976 by M. Weaver to again look for main_ */
/* modified January 1977 to restore fortran_io_initiated */

dcl  program_ptr ptr;				/* ptr to main program for run unit */
dcl  program_lng fixed bin (24);			/* bit count of main program */
dcl 1 arg_flags aligned,
    2 just_compiled bit (1) unaligned,			/* ON if main prog compiled  by  run command */
    2 brief bit (1) unaligned,			/* ON if warning messages to be inhibited */
    2 probe bit (1) unaligned,			/* ON if program to be run under debugger  */
    2 mbz bit (33) unaligned;
dcl  main_ename char (32) varying;			/* name of main program */
dcl  a_code fixed bin (35);

/* pointers */
dcl  blank_common_ptr ptr;
dcl  seg_ptr ptr;
dcl  rp ptr;
dcl  definition_p ptr;
dcl  main_ptr ptr;
dcl  ftn_io_p ptr;
dcl  scratch_ptr (1) ptr static;
dcl  rnt_p ptr static;
dcl  clp ptr static;
dcl  segment_table_ptr ptr static;
dcl  static_lotp ptr static;
dcl  static_isotp ptr static;
dcl  eio_ptr ptr static;
dcl  entry_ptr ptr static;
dcl  saved_ftn_buffer_p ptr;
dcl  n_ptr ptr static;

/* fixed bin */
dcl  max_severity fixed bin;
dcl  i fixed bin;
dcl  blank_length fixed bin;
dcl  scratch_lng fixed bin (19);
dcl  code fixed bin (35);
dcl  dlng fixed bin;
dcl  ecount fixed bin static;
dcl  total_names fixed bin static;

/* bit strings */
dcl  terminating bit (1) aligned;
dcl  dir_empty bit (1) aligned static;
dcl  saved_fortran_io_initiated bit (1) aligned;

/* character strings */
dcl  language char (8) aligned static;
dcl  dirname char (168) static;
dcl  entname char (32);

/* area */
dcl  scratch_area area (255000) based (scratch_ptr (1));

/* external */
dcl (error_table_$not_done, error_table_$name_not_found) fixed bin (35) external;
dcl  fast_related_data_$fortran_io_initiated bit (1) aligned ext;
dcl  fast_related_data_$fortran_buffer_p ptr ext;
dcl  fast_related_data_$terminate_run entry variable ext;
dcl  fast_related_data_$basic_area_p ptr ext;

/* external entries  */

dcl  ioa_ entry options (variable);
dcl  hcs_$get_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  cu_$gen_call entry (ptr, ptr);
dcl  fortran_io_$close_file entry (fixed bin, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl (get_temp_segments_, release_temp_segments_) entry (char (*), (*) ptr, fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*),
     fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  object_info_$display entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  area_ entry (fixed bin (19), ptr);
dcl  decode_definition_$init entry (ptr, fixed bin (24));
dcl  decode_definition_ entry (ptr, ptr) returns (bit (1) aligned);
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl  get_definition_ entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl  get_wdir_ entry () returns (char (168) aligned);
dcl  find_command_$clear entry ();

/* builtins and  conditions */

dcl (addr, addrel, baseno, baseptr, bit, bin, fixed, length, max) builtin;
dcl (null, ptr, rel, reverse, substr, verify) builtin;
dcl  cleanup condition;
dcl  fault_tag_3 condition;

/* structures */

dcl 1 ext_template aligned based,			/* holds link info */
    2 type fixed bin,				/* link type */
    2 section char (8) aligned,
    2 ename char (32) varying,			/* entry name of link target */
    2 init_info_p ptr;				/* ptr to init info for common */

dcl 1 dd aligned,					/* structure filled in by decode_definition_ */
    2 next_def ptr,					/* ptr to next definition in list */
    2 last_def ptr,					/* ptr to previous definition in list */
    2 block_ptr ptr,				/* ptr to either defblock or segname block */
    2 section char (4) aligned,			/* "text", "link", "symb" or "segn" */
    2 offset fixed bin,				/* offset within class (if ^= "segn") */
    2 entrypoint fixed bin,				/* value of entrypoint in text if ^= 0 */
    2 symbol char (32) aligned;			/* the symbolic name of the definition */


dcl 1 static_st (0:1) aligned static like st;		/* used before hcs_$star is called */

dcl 1 st (0:ecount+1) aligned based (segment_table_ptr),
    2 segno bit (18) unaligned,
    2 flags unaligned,
      3 links_snapped bit (1) unaligned,
      3 temp_lote bit (1) unaligned,
      3 wrong_language bit (1) unaligned,
      3 nonobject bit (1) unaligned,
      3 cant_initiate bit (1) unaligned,
      3 pad bit (13) unaligned,
    2 defptr ptr,
    2 ftn_ls_p ptr unaligned,
    2 ftn_symbol_p ptr unaligned,
    2 language char (8) aligned;

dcl 1 rnt_node aligned based (rp),
    2 entryp ptr,
    2 back_thread bit (18) unaligned,
    2 seg_table_offset fixed bin (17) unaligned,
    2 nchars fixed bin (17),
    2 name char (32) aligned;


dcl 1 oi aligned like object_info;

%include object_info;


%include linkdcl;


%include definition;


%include lot;


%include stack_header;


/* initialize variables */

	a_code = 0;
	scratch_ptr (1) = null;
	blank_common_ptr = null;
	ftn_io_p = null;
	rnt_p = null;
	clp = null;
	segment_table_ptr = addr (static_st);
	eio_ptr = null;
	entry_ptr = null;
	n_ptr = null;

	max_severity = 0;
	ecount = 0;
	static_st (0).segno, static_st (1).segno = "0"b;

	terminating = "0"b;
	dir_empty = "0"b;

/* get info about main program */

	oi.version_number = object_info_version_2;
	call object_info_$display (program_ptr, program_lng, addr (oi), code);
	if code ^= 0 then do;
	     call ioa_ ("Specified main program cannot be executed.");
	     a_code = code;
	     return;
	end;

/* initialize more stuff needed by cleanup handler */

	saved_ftn_buffer_p = fast_related_data_$fortran_buffer_p;
	saved_fortran_io_initiated = fast_related_data_$fortran_io_initiated;
						/* will restore for debugging purposes */
	fast_related_data_$fortran_io_initiated = "0"b;
	fast_related_data_$terminate_run = terminate_run_entry;

	sb = ptr (addr (rp), 0);			/* get ptr to stack header */
	static_lotp = sb -> stack_header.lot_ptr;
	static_isotp = sb -> stack_header.isot_ptr;

	on cleanup call Clean_up;

/* obtain scratch area if necessary */

	if (oi.compiler = "basic") | (oi.compiler = "fortran2") then do;
	     language = oi.compiler;
	     call get_temp_segments_ ("fast_run_unit_manager_", scratch_ptr, code);
	     call hcs_$get_max_length_seg (scratch_ptr (1), scratch_lng, code);
	     call area_ (scratch_lng, scratch_ptr (1));
	end;
	else language = "other";			/* all linking done by standard system */


/* set up run unit */

	dirname = get_wdir_ ();
	call set_up_run_unit;

	if max_severity > 2 then do;
incomplete_set_up:
	     a_code = error_table_$not_done;
	     call Clean_up;
	     return;
	end;

	if main_ptr = null then do;
	     call ioa_ ("Could not find main entry point.");
	     goto incomplete_set_up;
	end;

	on fault_tag_3 call fault_tag_3_handler;

	call cu_$gen_call (main_ptr, null);
terminate:
	call Clean_up;
	return;					/* end of main program */


Clean_up:	proc;

	     if scratch_ptr (1) ^= null then do;
		call terminate_run_unit;
		call release_temp_segments_ ("fast_run_unit_manager_", scratch_ptr, code);
	     end;
	     call find_command_$clear;	/* have cleared LOT entries; make cp use hcs_$make_ptr */

/* reset fast_related_data_ pointers in case basic or fortran
   programs are called by a pl1 program in another run unit or are run outside of FAST. */

	     fast_related_data_$fortran_buffer_p = saved_ftn_buffer_p;
	     fast_related_data_$fortran_io_initiated = saved_fortran_io_initiated;
	     fast_related_data_$basic_area_p = null;

	     return;



terminate_run_unit: proc;

/* This code is a separate procedure to facilitate error loop checking */

dcl  m fixed bin (18);

		if terminating then return;		/* don't risk loop */
		terminating = "1"b;

/* terminate all segments and clean up LOT and ISOT;
   If language = "other", no st entries are filled in */

		do i = 0 to ecount + 1;
		     if st (i).segno then do;
			if st (i).flags.temp_lote then do;
			     m = fixed (st (i).segno, 18);
			     static_lotp -> lot.lp (m) = baseptr (0);
			     static_isotp -> lot.lp (m) = baseptr (0);
			end;
			if i > 0 then		/* caller initiated main program */
			     call hcs_$terminate_noname (baseptr (st (i).segno), code);
		     end;
		end;

		if language = "fortran2" then if ftn_io_p ^= null
		     then call fortran_io_$close_file (-1, code);

		terminating = "0"b;

		return;
	     end;					/* of terminate_run_unit */

	end;					/* of Clean_up */

set_up_run_unit: proc;

/* This procedure gets a pointer to the main entry point, prelinks all fortran programs
   in  the run unit, alllocates blank common and sets the pointers in fast_related_data_. */

dcl  dummy_length fixed bin (19);
dcl  bit18_based bit (18) unaligned based;
dcl  dummy_ptr ptr;
dcl  main_dir char (168);
dcl  dummy (dummy_length) fixed bin (35) based;
dcl  blank_common (blank_length) fixed bin (35) based (blank_common_ptr);
dcl  main_ename_c32 char (32);


	     main_ptr = null;
	     main_ename_c32 = main_ename;		/* need nonvarying string */

	     if language = "other" then do;		/* won't need RNT or anything
						   else in scratch seg */
		call hcs_$fs_get_path_name (program_ptr, main_dir, dlng, entname, code);
						/*  get pathname of main program */
		if code ^= 0 then do;
other_not_found:
		     call error (3, "Could not find main program.", " ");
		     return;
		end;
		call hcs_$initiate (main_dir, entname, main_ename_c32, 0, 1, seg_ptr, code);
						/* associate reference name with main prog */
		if seg_ptr = null then goto other_not_found;
		call hcs_$make_ptr (null, main_ename_c32, main_ename_c32, main_ptr, code);
		if main_ptr = null
		then call hcs_$make_ptr (null, main_ename_c32, "main_", main_ptr, code);
		return;
	     end;

	     st (0).defptr = oi.defp;
	     st (0).segno = baseno (program_ptr);
	     st (0).language = language;
	     addr (st (0).flags) -> bit18_based = "0"b;	/* array still in  stack at this point */

	     if arg_flags.just_compiled then do;
		call process_just_compiled_entries;
		if main_ptr = null then return;
		call allocate_linkage ("1"b, 0);
	     end;

	     else do;
		call get_definition_ (oi.defp, main_ename_c32, main_ename_c32, definition_p, code);
		if definition_p = null then do;	/* look for main_ */
		     call get_definition_ (oi.defp, main_ename_c32, "main_", definition_p, code);
		     if definition_p = null then return;
		     if definition_p -> definition.class then return; /* entry must be in text */
		end;

		main_ptr = addrel (oi.textp, definition_p -> definition.value);
		call add_to_rnt (main_ename_c32, main_ptr, 0);
		call allocate_linkage ("0"b, 0);
	     end;

	     if language = "basic" then fast_related_data_$basic_area_p = scratch_ptr (1);
						/* use scratch seg  area */
	     else do;				/* main program is fortran; ppelink */
		blank_length = 0;
		call snap_ftn_links (0);		/* recursive; when it returns all is  prelinked */
		if max_severity > 2 then return;
		if blank_length > 0
		then allocate blank_common in (scratch_area) set (blank_common_ptr);

/*  The rest of scratch segment will be used for fortran I/O.  We must calculate the
   size and allocate  it to get a good pointer;  In order to find out where we
   are now, a dummy variable will be allocated. */

		dummy_length = 1;
		allocate dummy in (scratch_area) set (dummy_ptr);
		dummy_length = scratch_lng - bin (rel (dummy_ptr), 18) - 20;
						/* alllow room for  area header, etc. */
		allocate dummy in (scratch_area) set (fast_related_data_$fortran_buffer_p);
		ftn_io_p = fast_related_data_$fortran_buffer_p;
	     end;

	     return;

	end;					/* set_up_run_unit */


snap_ftn_links: proc (st_offset_2);

/* This procedure  snaps all links in fortran programs.   It is called
   recursively; for example, if while snapping program a's links a
   link  is snapped to program b, and  none of  program b's links have
   been snapped yet, snap_ftn_links is called to snap b's links before
   proceeding further with program a's links. */

dcl 1 common_list_node aligned based (cl_node_ptr),
    2 back_thread bit (18) unaligned,
    2 block_lng fixed bin (17) unaligned,
    2 name char (32) aligned,
    2 block_p ptr unaligned;

dcl (link_ptr, lp, ep, cl_node_ptr, common_p) ptr;
dcl (dl_code, st_offset_2, target_st_offset, j) fixed bin;
dcl  last_rel bit (18) aligned;
dcl  FT3 bit (6) aligned init ("100111"b);
dcl  based_ptr ptr based;

dcl  init_template (j) bit (36) aligned based;

dcl 1 ext aligned like ext_template;

dcl 1 init_info aligned based,
    2 lng fixed bin,
    2 icode fixed bin,
    2 template (0 refer (init_info.lng)) bit (36) aligned;


	     st (st_offset_2).flags.links_snapped = "1"b; /* so won't get called  again for this program */
	     lp = st (st_offset_2).ftn_ls_p;		/* get   ptr to active linkage section */
	     last_rel = rel (addrel (lp, bin (lp -> header.stats.block_length, 18)));
						/* get offset of end of linkage section for optimization */

	     do link_ptr = addrel (lp, lp -> header.stats.begin_links) repeat (addrel (link_ptr, 2))
		     while (rel (link_ptr) < last_rel);
		call decode_ftn_link (link_ptr, addr (ext), "1"b, dl_code);
		if dl_code ^= 0 then do;
		     if dl_code ^= 1 then link_ptr -> link.ft2 = FT3;
						/*   get fault tag 3 if reference */
		end;
		else if (ext.type = 5) & (ext.section = "*system") then do; /* common */
		     if ext.ename = "blnk*com" then do; /* blank common */
			blank_length = max (blank_length, ext.init_info_p -> init_info.lng);
			link_ptr -> based_ptr = addr (blank_common_ptr);
						/* snap link indirect thru blank_common_ptr */
			link_ptr -> link.modifier = "010000"b; /* make  pointer indirect */
		     end;

		     else do;			/* labelled common */
			call find_common_block;
			if code = 0 then link_ptr -> based_ptr = common_p; /*  snap link */
		     end;
		end;

		else if (ext.type = 1) & (ext.section = "*sybmol")
		then link_ptr -> based_ptr = st (st_offset_2).ftn_symbol_p;

		else do;				/* ordinary link */
		     call find_entry ((ext.ename), ep, target_st_offset);
		     if ep = null then link_ptr -> link.ft2 = FT3; /* message already printed  */
		     else do;			/* found entry */
			link_ptr -> based_ptr = ep;	/* snap link */
			if ^st (target_st_offset).flags.links_snapped
			then if st (target_st_offset).ftn_ls_p ^= null
			     then call snap_ftn_links (target_st_offset);
		     end;
		end;
	     end;

	     return;


find_common_block: proc;

		code = 0;
		if clp ^= null
		then do cl_node_ptr = clp repeat (ptr (cl_node_ptr, cl_node_ptr -> common_list_node.back_thread))
			while (rel (cl_node_ptr));

		     if rel (cl_node_ptr) then do;
			if ext.ename = common_list_node.name then do; /* found match */
			     if common_list_node.block_lng = ext.init_info_p -> init_info.lng then do;
				common_p = common_list_node.block_p; /* use allocated block */
				if ext.init_info_p -> init_info.icode = 3
				then do;		/* but initialize now */
				     j = ext.init_info_p -> init_info.lng;
				     common_p -> init_template = ext.init_info_p -> init_info.template;
				end;
			     end;
			     else do;
				call error (3, "Different lengths specified  for common block ^a",
				     substr (ext.ename, 1, length (ext.ename)));
				code = 1;
			     end;
			     return;
			end;
		     end;
		end;

/* no match; allocate new node and new block in scratch seg */

		cl_node_ptr = clp;
		allocate common_list_node in (scratch_area) set (clp);
		if cl_node_ptr = null then clp -> common_list_node.back_thread = "0"b;
		else clp -> common_list_node.back_thread = rel (cl_node_ptr);
		clp -> common_list_node.name = ext.ename;
		j, clp -> common_list_node.block_lng = ext.init_info_p -> init_info.lng;
		allocate init_template in (scratch_area) set (common_p);
		clp -> common_list_node.block_p = common_p;
		if ext.init_info_p -> init_info.icode = 3
		then common_p -> init_template = ext.init_info_p -> init_info.template;

		return;
	     end;					/* find_common_block */


	end;					/* snap_ftn_links */

decode_ftn_link: proc (linkp, extp, linking, dcode);

/* This procedure returns  information about legal fortran links only.
   Do not distinguish types of errors except for missing fault tag 2. */
/* This is outside set_up_run_unit_  so fault tag 3 handler can ca
   l it */

dcl (linkp, extp) ptr;
dcl  linking bit (1) aligned;
dcl  dcode fixed bin;

dcl (head_pointer, def_pointer, exp_pointer, type_pointer, ext_pointer) ptr;
dcl (ntype, section_id) fixed bin (18);
dcl  name_length fixed bin;

dcl 1 ext aligned based,				/* holds link info */
    2 type fixed bin,				/* link type */
    2 section char (8) aligned,
    2 ename,
      3 nchars fixed bin,
      3 string char (32),
    2 init_info_p ptr;				/* ptr  to init info for  common */

	     dcode = 1;
	     if linking then if linkp -> link.ft2 ^= "100110"b then return;
						/* must have fault tag 2 */
	     dcode = 2;

	     head_pointer = addrel (linkp, linkp -> link.head_ptr);
	     def_pointer = head_pointer -> header.def_ptr;
	     exp_pointer = addrel (def_pointer, linkp -> link.exp_ptr);
	     if exp_pointer -> exp_word.exp then return;	/* must have 0 expression */

	     type_pointer = addrel (def_pointer, exp_pointer -> exp_word.type_ptr);
	     ext_pointer = addrel (def_pointer, type_pointer -> type_pair.ext_ptr);
	     section_id = bin (type_pointer -> type_pair.seg_ptr, 18);

	     extp -> ext.type, ntype = bin (type_pointer -> type_pair.type, 18);

	     if (ntype = 4) | (ntype = 5) then do;
		name_length = bin (ext_pointer -> name.nchars, 9);
		if name_length > 32 then return;	/* name too long */
		extp -> ext.ename.nchars = name_length;
		substr (extp -> ext.ename.string, 1, name_length)
		     = substr (ext_pointer -> name.char_string, 1, name_length);

		if ntype = 4 then do;
		     if type_pointer -> type_pair.seg_ptr ^= type_pointer -> type_pair.ext_ptr then return;
						/* don't  allow $ names in DFAST  */
		     extp -> ext.section = " ";
		     extp -> ext.init_info_p = null;
		end;
		else do;				/* ntype = 5 */
		     if section_id ^= 5 /* *system */ then return;
		     extp -> ext.section = "*system";
		     if type_pointer -> type_pair.trap_ptr = "0"b then return;
						/* must have init info */
		     extp -> ext.init_info_p = addrel (def_pointer, type_pointer -> type_pair.trap_ptr);
		end;
	     end;

	     else if ntype = 1 then do;
		if section_id ^= 2 then return;	/* must be *symbol|0 */
		extp -> ext.section = "*symbol";
		extp -> ext.ename.nchars = 0;
		extp -> ext.init_info_p = null;
	     end;

	     else return;				/*  not a legal fortran type */

	     dcode = 0;
	     return;

	end;					/* decode_ftn_link */

find_entry: proc (ename, ep, st_offset_3);

/* This procedure returns a pointer to the entrypoint  corresponding to ename.
   If there is anything  wrong with  the segment that ename refers to,   the ep
   returned is null and the caller should not do anything more with that name.
   In this case, find_entry prints a error  message the first
   time that ename is referenced.
   find_entry first searches the RNT;  if the name is not foune there, the working directory
   is searched (via output from hcs_$star_).  If the segment  was not previously
   referenced by a different name, it is initiated and the segment's st entry is
   filled in.  To  simplify  error handling, the rnt  node is  filled in
   with a null entry pointer until  the real entry pointer is found. */

dcl  ename char (32);
dcl  ep ptr;
dcl  st_offset_3 fixed bin;
dcl (i, j, k, ename_length) fixed bin;
dcl  seg_bc fixed bin (24);

dcl 1 entries (ecount) aligned based (entry_ptr),
    (2 type bit (2),
    2 nnames fixed bin (15),
    2 nindex fixed bin (17)) unaligned;

dcl  e_info_offset (total_names) fixed bin based (eio_ptr);

dcl  names (total_names) char (32) aligned based (n_ptr);


	     ep = null;
	     st_offset_3 = 0;
	     ename_length = 33 - verify (reverse (ename), " ");

/* search RNT for ename */

	     if rnt_p ^= null
	     then do rp = rnt_p repeat (ptr (rp, rp -> rnt_node.back_thread))
		     while (rp -> rnt_node.back_thread);
		if ename_length = rnt_node.nchars
		then if ename = rnt_node.name then do;	/* found match */
			ep = rnt_node.entryp;
			st_offset_3 = rnt_node.seg_table_offset;
			return;
		     end;
	     end;

	     if dir_empty then return;		/* can't do any more */

	     if ecount = 0 then do;			/* get   contents of working dir */
		call hcs_$star_ (dirname, "**", 3, scratch_ptr (1), ecount, entry_ptr, n_ptr, code);
		if code ^= 0 then do;
		     dir_empty = "1"b;
		     call error (3, "Home directory is empty. Referenced programs cannot be found.", " ");
		     return;
		end;
		allocate st in (scratch_area) set (segment_table_ptr);
		st (0) = static_st (0);		/* copy maiin program's entry */
		total_names = 0;
		do i = 1 to ecount;			/* find number of names returned */
		     total_names = total_names + entries (i).nnames;
		end;

/*  fill in array relating  names with the appropriate entry  info. */

		allocate e_info_offset in (scratch_area) set (eio_ptr);
		k = 0;
		do i = 1 to ecount;
		     do j = 1 to entries (i).nnames;
			k = k + 1;
			e_info_offset (k) = i;
		     end;
		end;
	     end;

	     do i = 1 to total_names while (ename ^= names (i)); end;

	     if i = total_names + 1 then do;
		st_offset_3 = ecount + 1;		/* dummy entry  for names not found */
		call add_to_rnt (ename, null, st_offset_3);
		call error (2, "Referenced segment ^a cannot be found.", ename);
		return;
	     end;

	     k, st_offset_3 = e_info_offset (i);
	     call add_to_rnt (ename, null, st_offset_3);

	     if entries (k).type = "10"b then do;
		st (k).flags.nonobject = "1"b;
		call error (2, "Illegal reference to directory ^a.", ename);
		return;
	     end;

	     if st (k).flags.cant_initiate then goto bad_access;

	     if st (k).segno = "0"b then do;
		call hcs_$initiate_count (dirname, ename, "", seg_bc, 1, seg_ptr, code);
		if seg_ptr = null then do;
		     st (k).flags.cant_initiate = "1"b;
bad_access:	     call error (2, "Insufficient access to ^a.", ename);
		     return;
		end;

		if (^arg_flags.just_compiled) & (baseno (seg_ptr) = st (0).segno) then st (k) = st (0);
		else do;				/*  collect info about seg */
		     st (k).segno = baseno (seg_ptr);
		     oi.version_number = object_info_version_2;
		     call object_info_$display (seg_ptr, seg_bc, addr (oi), code);
		     if code ^= 0 then do;
			st (k).flags.nonobject = "1"b;
bad_object:		call error (2, "^a cannot be called because it is not a program.", ename);
			return;
		     end;

		     st (k).defptr = oi.defp;
		     if (oi.compiler = "fortran2") | (oi.compiler = "basic") then do;
			st (k).language = oi.compiler;
			if oi.compiler ^= language then do;
			     st (k).flags.wrong_language = "1"b;
wrong_lang:		     call error (2, "Subprogram ^a  is in an  incompatible language.", ename);
			     return;
			end;
			call allocate_linkage ("0"b, st_offset_3);
		     end;
		     else do;
			st (k).language = "other";
			st (k).ftn_ls_p, st (k).ftn_symbol_p = null;
		     end;
		end;
	     end;					/* done filling in info about new seg */

	     else do;				/*  check flags of known seg */
						/* different name,  so print message agaiin */
		if st (k).flags.wrong_language then goto wrong_lang;
		if st (k).flags.nonobject then goto bad_object;
	     end;

/* finally get the  pointer to the entrypoint */

	     if st (k).language = "other" then call hcs_$make_ptr (seg_ptr, ename, ename, ep, code);
	     else do;
		call get_definition_ (st (k).defptr, ename, ename, definition_p, code);
		if definition_p ^= null
		then if definition_p -> definition.class = "0"b
		     then ep = addrel (seg_ptr, definition_p -> definition.value);
	     end;

	     if ep = null then call error (2, "Cannot find subprogram ^a in segment.", ename);
	     rnt_p -> rnt_node.entryp = ep;		/* fill in final value of entry pointer */

	     return;
	end;					/* of find_entry */


allocate_linkage: proc (temp_object, st_offset_4);

/* This procedure  is called only for fortran and basic programs.  For these we always
   allocate linkage and fill in the LOT entry. */

dcl  temp_object bit (1) aligned;
dcl  st_offset_4 fixed bin;
dcl (k, link_lng) fixed bin;
dcl  linkage_section_p ptr;
dcl  linkage_section (link_lng) fixed bin (35) based;


	     st (st_offset_4).flags.temp_lote = "1"b;	/* so terminate will zap LOT entry */
	     if temp_object then linkage_section_p = oi.linkp; /* use linkage section in  place */
	     else do;				/*  copy into scratch seg */
		link_lng = oi.llng;
		allocate linkage_section in (scratch_area) set (linkage_section_p);
		linkage_section_p -> linkage_section = oi.linkp -> linkage_section;
	     end;

	     if st (st_offset_4).language = "fortran2" then do;
		st (st_offset_4).ftn_ls_p = linkage_section_p;
		st (st_offset_4).ftn_symbol_p = oi.symbp;
	     end;

	     else st (st_offset_4).ftn_ls_p, st (st_offset_4).ftn_symbol_p = null;

/*  fill in LOT, ISOT */

	     k = bin (baseno (oi.textp), 18);
	     static_lotp -> lot.lp (k),
		static_isotp -> lot.lp (k) = linkage_section_p;

/* fill in linkage  section header */

	     linkage_section_p -> header.def_ptr = oi.defp;
	     linkage_section_p -> header.symbol_ptr = oi.symbp;
	     linkage_section_p -> header.original_linkage_ptr = oi.linkp;
	     linkage_section_p -> header.stats.segment_number = bit (k, 18);
	     linkage_section_p -> header.stats.static_length = bit (bin (oi.ilng, 18), 18);

	     return;

	end;					/* of allocate_linkage */


add_to_rnt: proc (ename, ep, st_offset_5);

/* This procedure  simply adds a node to the RNT; searching is done in find_entry. */

dcl  ename char (32);
dcl  ep ptr;
dcl  st_offset_5 fixed bin;


	     rp = rnt_p;
	     allocate rnt_node in (scratch_area) set (rnt_p);

	     rnt_p -> rnt_node.entryp = ep;
	     rnt_p -> rnt_node.name = ename;
	     rnt_p -> rnt_node.nchars = 33 - verify (reverse (ename), " ");
	     rnt_p -> rnt_node.seg_table_offset = st_offset_5;

	     if rp = null then rnt_p -> rnt_node.back_thread = "0"b; /* first node */
	     else rnt_p -> rnt_node.back_thread = rel (rp);

	     return;
	end;					/*  of add_to_rnt */


process_just_compiled_entries: proc;

/*  This procedure adds the names of all the entrypoints in a just compiled
   program to the RNT. */

dcl  defptr ptr;

	     main_ptr = null;
	     call decode_definition_$init (program_ptr, program_lng);

	     do defptr = oi.defp repeat (dd.next_def) while (^decode_definition_ (defptr, addr (dd)));
		if dd.section = "text" then do;
		     if dd.symbol = "main_" then main_ptr = addrel (oi.textp, dd.offset);
		     else call add_to_rnt ((dd.symbol), addrel (oi.textp, dd.offset), 0);
		end;
	     end;

	     return;

	end;					/* of process_just_compiled entries  */

find_entry_value: entry (a_entname, a_ep, ecode);

/* This entry is called by basic_find_proc_.
   Because it is an external entry, the procedures it calls must use
   static pointers and counts. */

dcl  a_entname char (32);
dcl  a_ep ptr;
dcl  ecode fixed bin (35);
dcl  st_offset_5 fixed bin;

	call find_entry (a_entname, a_ep, st_offset_5);
	if a_ep = null then ecode = error_table_$name_not_found;
	else ecode = 0;
	return;




terminate_run_entry: proc;

/* This procedure is called by fortran stop */

	     goto terminate;

	end;					/* of terminate_run_entry */



error:	proc (severity, control_string, arg_string);

dcl  severity fixed bin;
dcl (control_string, arg_string) char (*);
dcl  new_control_string char (200) varying;

	     max_severity = max (max_severity, severity);
	     if severity <= 2 then do;		/* warning only */
		if arg_flags.brief then return;	/* don't print any message */
		new_control_string = "Warning: " || control_string;
	     end;
	     else new_control_string = control_string;
	     call ioa_ (new_control_string, arg_string);

	     return;
	end;					/* error */

fault_tag_3_handler: proc;

/* fortran links which could not be snapped are converted to fault tag 3's */

dcl  link_ptr ptr;
dcl  dl_code fixed bin;
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  continue_to_signal_ entry (fixed bin (35));

dcl 1 ext aligned like ext_template;

dcl 1 cond_info aligned,
%include cond_info;

%include mc;

     cond_info.version = 1;
	     call find_condition_info_ (null, addr (cond_info), code);
	     if code ^= 0 then goto continue_ft3;

	     scup = addr (cond_info.mcptr -> mc.scu (0));
	     link_ptr = ptr (baseptr (fixed (fixed (scup -> scu.tpr.tsr, 15), 18)), scup -> scu.ca);

	     call decode_ftn_link (link_ptr, addr (ext), "0"b, dl_code);
	     if dl_code = 0 then call ioa_ ("Attempt to reference missing subprogram ^a.^/Program aborted.",
		ext.ename);
	     else if dl_code = 2 then call ioa_ (
		"Attempt to reference through invalid link.^/FORTRAN compiler error. Program aborted.");
	     else do;				/* at this writing no other codes are returned, but... */
continue_ft3:	call continue_to_signal_ (code);
		return;
	     end;

	     goto terminate;

	end;					/* fault_tag_3_handler */
     end;
