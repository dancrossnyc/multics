/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

gtss_dq_: proc;

/**	Author: Al Dupuis 08/79
	Change: Dave Ward 08/79/03 Revised call to ios open.
	Change: Al Dupuis 11/10/79 Reworked open_exc code.
          Change: Ron Barstad  84-11-21  Always open drun_d_q if accessed.

	This module performs the following operations:

	ENTRY		OPERATION

	gtss_dq_$create	Creates the GCOS #D file in the users home
			directory. ([hd]>drun_#d_q) Creates the absin
			segment in the home directory. ([hd]>drun_control)

	gtss_dq_$open_exc	Opens the deferred queue for exclusive read and write

	gtss_dq_$open_gen	Opens the deferred queue for read while writers.

	gtss_dq_$hdrp	Returns a pointer to the #D header, given the DRUN job id.

	gtss_dq_$catp	Returns a pointer to the #D catalog entry, and the relative
			position of the entry in the queue, given the DRUN job id.

	gtss_dq_$dibp	Returns a pointer to the #D DIB, given the DRUN job id.

	gtss_dq_$entries_info Fills in the following structure.
			  1 entries_info (no_of_cat_entries)
			    2 did char (5),			the drun job id
			    2 aid char (19),		the Multics absentee id
			    2 job_status fb (6) unsigned;	the job status from #D catalog
			  An entry in this structure is created for every
			  catalog entry in the #D queue that has been used.

	gtss_dq_$mod_js	Modifies a catalog entrie's job status.
**/

	call com_err_ (0, "gtss_dq_",
	     "See documentation for meaningful entries.");
	return;


create:	entry (error);

/**
	arg_1  (output) Set to 1 if the required operation could
		      not be performed.

	This entry creates the DRUN deferred file (#D) in the
	user's home directory. It then initializes the header and
	catalogue as described in DB84 Page 16-18.

**/

	caller = "gtss_dq_$create";
	error = "0"b;
	call create_file;
	if ^local_error then call set_attr;
	if ^local_error then call access_dq;
	if ^local_error then call init_head_cat;
	error = local_error;
	return;





open_exc:	entry (error);

	caller = "gtss_dq_$open_exc";
	error = "0"b;
	if file_opened then call close_file;
	if local_error then do;
	     error = local_error;
	     return;
	end;

	call access_dq;
	if local_error then do;
	     call com_err_ (0, caller,
		"Couldn't set runtime attributes on #D file.");
	     error = local_error;
	     return;
	end;
	call gtss_ios_open_ (
	     fn,
	     gtss_file_values.dname,
	     gtss_file_values.ename,
	     "110000"b,
	     "1"b,
	     gtss_file_attributes_ptr,
	     addr (gcos_status),
	     code);
	if db_dq then call com_err_ (0, caller,
	     "status for open (1st attempt) was (^w)",
	     gcos_status.bit12);
	if gcos_status.bit12 = "4000"b3
	then do;
	     file_opened = "1"b;
	     return;
	end;
	do i = 1 to max_attempts while (gcos_status.bit12 ^= "4000"b3);
	     if db_dq then call com_err_ (0, caller,
		"going to sleep for ^d seconds.",
		wait_time);
	     call timer_manager_$sleep (wait_time, "11"b);
	     call gtss_ios_open_ (
		fn,
		gtss_file_values.dname,
		gtss_file_values.ename,
		"110000"b,
		"1"b,
		gtss_file_attributes_ptr,
		addr (gcos_status),
		code);
	     if db_dq then call com_err_ (0, caller,
		"status for open (attempt no ^d) was (^w)",
		i, gcos_status.bit12);
	end;
	if gcos_status.bit12 = "4000"b3
	then do;
	     file_opened = "1"b;
	     return;
	end;
	error = "1"b;
	call ioa_ ("FILE #D BUSY: TRY AGAIN IN A MINUTE");
	return;

open_gen:	entry (error);

	caller = "gtss_dq_$open_gen";
	error = "0"b;

	if file_opened then call close_file;
	if local_error then do;
	     error = local_error;
	     return;
	end;

	call access_dq;
	if local_error then do;
	     call com_err_ (0, caller,
		"Couldn't set runtime attributes on #D file.");
	     error = local_error;
	     return;
	end;
	call gtss_ios_open_ (
	     fn,
	     gtss_file_values.dname,
	     gtss_file_values.ename,
	     "100001"b,
	     "1"b,
	     gtss_file_attributes_ptr,
	     addr (gcos_status),
	     code);
	if gcos_status.bit12 ^= "4000"b3 then do;
	     call com_err_ (0, caller,
		"Couldn't open #D file (status ^w)",
		gcos_status.bit12);
	     error = "1"b;
	     return;
	end;
	else file_opened = "1"b;

	return;


hdrp:	entry (dqhp);

/**	This entry is called to obtain a pointer to the
	DRUN #D file's header. The pointer is null if
	the operation could not be performed.
**/

	caller = "gtss_dq_$hdrp";
	call gtss_aft_$find ("#D", fn, code);
	if code ^= 0 then do;
	     call access_dq;
	     call open_gen (local_error);
	end;
	if ^local_error then do;
	     gtss_def_q_$FILE.Seek_Address = 0;
	     gtss_def_q_$FILE.OP2.Device_Command = read_cmd;
	     call read_sector;
	end;
	if local_error then dqhp = null ();
	else dqhp = addr (gtss_def_q_$FILE.no_characters);
	return;


catp:	entry (drun_job_id, dcp, cat_e_parm);

/**
	arg_1 (input)	The DRUN job id.
	arg_2 (output)	A pointer to the catalog entry.
			Null if the entry could not be found.
	arg_3 (output)	The relative position of the catalog
			entry in the #D queue. Used to read
			the associated DIB.
**/

	caller = "gtss_dq_$catp";
	call gtss_ascii_bcd_ (addr (drun_job_id), 5, addr (bcd_jid));
	call gtss_aft_$find ("#D", fn, code);
	if code ^= 0 then call access_dq;
	if ^local_error then do;
	     gtss_def_q_$FILE.Seek_Address = 0;
	     gtss_def_q_$FILE.OP2.Device_Command = read_cmd;
	     call read_sector;
	     if ^local_error then dqh_ptr = addr (gtss_def_q_$FILE.no_characters);
	end;
	if ^local_error then call get_cat_entry;
	if local_error then do;
	     cat_e_parm = 0;
	     dcp = null ();
	end;
	else do;
	     cat_e_parm = cat_entry;
	     dcp = dc_ptr;
	end;
	return;

dibp:	entry (drun_job_id, dibp);

/**
	arg_1 (input)	The DRUN job id.
	arg_2 (output)	A pointer to the DIB entry.
			Null if the entry could not be found.
**/

	caller = "gtss_dq_$dibp";
	call gtss_ascii_bcd_ (addr (drun_job_id), 5, addr (bcd_jid));
	call gtss_aft_$find ("#D", fn, code);
	if code ^= 0 then call access_dq;
	if ^local_error then do;
	     gtss_def_q_$FILE.Seek_Address = 0;
	     gtss_def_q_$FILE.OP2.Device_Command = read_cmd;
	     call read_sector;
	     if ^local_error then do;
		dqh_ptr = addr (gtss_def_q_$FILE.no_characters);
		cat_entries_avail = dqh_ptr -> dq_header.dhbsn.no_of_cea;
	     end;
	end;
	if ^local_error then call get_cat_entry;
	if ^local_error then do;
	     gtss_def_q_$FILE.Seek_Address = (5 * drun_file_size) - cat_entries_avail + cat_entry - 1;
	     gtss_def_q_$FILE.OP2.Device_Command = read_cmd;
	     call read_sector;
	end;
	if local_error then dibp = null ();
	else dibp = addr (gtss_def_q_$FILE.no_characters);
	return;

entries_info: entry (eip, no_of_e, no_of_entries_found);

/**
	arg_1 (input)	A pointer to the info structure.
	arg_2 (input)	The number of entries in the structure.
	arg_3 (output)	The number of entries found.

**/
	caller = "gtss_dq_$entries_info";
	if eip = null () then do;
	     call com_err_ (0, caller,
		"Invalid pointer to structure.");
	     no_of_entries_found = 0;
	     return;
	end;

	call gtss_dq_$hdrp (dqh_ptr);
	if dqh_ptr = null () then call gtss_abort_subsystem_ (
	     null (),
	     caller,
	     0,
	     "Could not get pointer to #D queue's header.");
	read_limit = dqh_ptr -> dq_header.dhbsn.no_of_cea / 8;
	wp = dqh_ptr;
	curr_entry = 1;

/** Examine the first seven entries contained in the header **/
	do i = 2 to 8;
	     dc_ptr = addr (words (i));
	     if dc_ptr -> dq_catalog.dcjid.job_status ^= 0 then do;
		entries_info.job_stat (curr_entry) =
		     dc_ptr -> dq_catalog.dcjid.job_status;
		call gtss_bcd_ascii_ (addr (dc_ptr -> dq_catalog.dcjid.bcd_job_id), 5, addr (entries_info.did (curr_entry)));
		entries_info.aid (curr_entry) = gtss_abs_$get_id (entries_info.did (curr_entry));
		curr_entry = curr_entry + 1;
	     end;
	end;

/** And examine the rest of the entries **/
	do sec_no = 1 to read_limit;
	     gtss_def_q_$FILE.Seek_Address = sec_no;
	     gtss_def_q_$FILE.OP2.Device_Command = read_cmd;
	     call read_sector;
	     do i = 1 to 8;
		dc_ptr = addr (words (i));
		if dc_ptr -> dq_catalog.dcjid.job_status ^= 0 then do;
		     entries_info.job_stat (curr_entry) =
			dc_ptr -> dq_catalog.dcjid.job_status;
		     call gtss_bcd_ascii_ (addr (dc_ptr -> dq_catalog.dcjid.bcd_job_id), 5, addr (entries_info.did (curr_entry)));
		     entries_info.aid (curr_entry) = gtss_abs_$get_id (entries_info.did (curr_entry));
		     curr_entry = curr_entry + 1;
		end;
	     end;
	end;

	no_of_entries_found = curr_entry - 1;
	if db_dq then
	     if curr_entry - 1 > 0 then
		do i = 1 to curr_entry - 1;
		call ioa_ ("^a   ^a   Job status = ^i",
		     entries_info.did (i), entries_info.aid (i), entries_info.job_stat (i));
	     end;


	return;



mod_js:	entry (drun_job_id, job_stat, error);


/**
	arg_1 (input)	The DRUN job id.
	arg_2 (input)	The new value of job status. (See DB84 16-20 DCJID)
	arg_3 (output)	Set to 0 if operation successful.
**/


	caller = "gtss_dq_$mod_js";
	error = "0"b;
	if job_stat > 7 then do;
	     call com_err_ (0, caller,
		"^d is not a valid job status", job_stat);
	     error = "1"b;
	     return;
	end;
	call gtss_ascii_bcd_ (addr (drun_job_id), 5, addr (bcd_jid));

/* Read header, get sector with catalog entry, change job status, write back out */
	gtss_def_q_$FILE.Seek_Address = 0;
	gtss_def_q_$FILE.OP2.Device_Command = read_cmd;
	call read_sector;
	if local_error then do;
	     error = local_error;
	     return;
	end;
	dqh_ptr, dc_ptr = addr (gtss_def_q_$FILE.no_characters);
	call get_cat_entry;
	if local_error then do;
	     error = local_error;
	     return;
	end;
	dc_ptr -> dq_catalog.dcjid.job_status = job_stat;
	if i = 0 then gtss_def_q_$FILE.Seek_Address = i;
	else gtss_def_q_$FILE.Seek_Address = i - 1;
	gtss_def_q_$FILE.OP2.Device_Command = write_cmd;
	call write_sector;
	if local_error then do;
	     error = local_error;
	     return;
	end;

/* Read the file into the buffer		*/
	do i = 0 to hbound (d_buf, 1);
	     gtss_def_q_$FILE.Seek_Address = i;
	     gtss_def_q_$FILE.OP2.Device_Command = read_cmd;
	     call read_sector;
	     if local_error then do;
		error = local_error;
		return;
	     end;
	     d_buf (i) = dqh_ptr -> sector;
	end;

/* Calculate checksum on buffer, move header from buffer to output buffer,
   write header sector back to #D file				*/
	checksum_field = checksum (addrel (addr (d_buf (0)), 1),
	     ((hbound (d_buf, 1) + 1) * 64) - 1);

	dqh_ptr -> sector = addr (d_buf (0)) -> sector;
	gtss_def_q_$FILE.OP2.Device_Command = write_cmd;
	gtss_def_q_$FILE.Seek_Address = 0;
	call write_sector;
	if local_error then do;
	     error = local_error;
	     return;
	end;

	return;

create_file: proc;

	     call user_info_$homedir (gtss_file_values.dname);
	     gtss_file_values.new_ename = drun_file_name;

	     call hcs_$make_seg (gtss_file_values.dname, gtss_file_values.new_ename,
		"", 10, seg_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, "gtss_dq_create",
		     "Could not create drun_#d_q seg, quitting");
		local_error = "1"b;
		return;
	     end;

	     call hcs_$set_bc_seg (seg_ptr, drun_file_size*320*36, code);
	     if code ^= 0 then do;
		call com_err_ (code, caller,
		     "Could not set bit count, quitting");
		local_error = "1"b;
		return;
	     end;

	     call hcs_$set_safety_sw (gtss_file_values.dname, gtss_file_values.new_ename,
		"1"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, caller,
		     "Cannot set safety switch, quitting");
		local_error = "1"b;
		return;
	     end;

	     call hcs_$make_seg (gtss_file_values.dname,
		absin_fn, "", 10, seg_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, "gtss_dq_create",
		     "Could not create absin seg, quitting");
		local_error = "1"b;
		return;
	     end;

	     char_string = gtss_abs_$create_absin ();
	     csl = length (char_string);
	     chars = char_string;
	     call hcs_$set_bc_seg (seg_ptr, csl * 9, code);
	     if code ^= 0 then do;
		call com_err_ (code, caller,
		     "Could not set bit count, quitting");
		local_error = "1"b;
		return;
	     end;
	     call hcs_$set_safety_sw (gtss_file_values.dname, absin_fn,
		"1"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, caller,
		     "Cannot set safety switch, quitting");
		local_error = "1"b;
		return;
	     end;

	end;					/* create_file */

set_attr:	proc;
	     gtss_file_values.set_switch = "0"b;
	     gtss_file_values.set_switch.mode_random
		, gtss_file_values.set_switch.maxll
		, gtss_file_values.set_switch.curll
		, gtss_file_values.set_switch.busy
		, gtss_file_values.set_switch.attr
		, gtss_file_values.set_switch.null_file
		, gtss_file_values.set_switch.number_allocations
		, gtss_file_values.set_switch.creation_date
		= "1"b;

	     gtss_file_values.version = 1;
	     gtss_file_values.change_name = "0"b;
	     gtss_file_values.ename = " ";		/* => Initial setting. */

	     gtss_file_values.data_flags.mode_random = "1"b;
	     gtss_file_values.data_flags.busy = "0"b;
	     gtss_file_values.data_flags.null_file = "1"b;

	     gtss_file_values.data_fields.curll = drun_file_size;
	     gtss_file_values.data_fields.maxll = drun_file_size;
	     gtss_file_values.data_fields.number_allocations = 0;

	     gtss_file_values.attributes.attr = "0"b;
	     string (date_val) = date ();
	     gtss_file_values.creation_date = mm||dd||yy;

	     call gtss_attributes_mgr_$set (addr (gtss_file_values.version), code);
	     if code ^= 0 then do;
		call com_err_ (code, caller,
		     "Could not set attributes");
		local_error = "1"b;
		return;
	     end;

	end;					/* set_attr */

access_dq: proc;

	     call gtss_aft_$find ("#D", fn, code);
	     if code ^= 0 then do;
		call gtss_aft_$add ("#D", fn, code);
		if code = 1 then do;
		     call com_err_ (0, caller,
			"#D file already in aft");
		     local_error = "1"b;
		     return;
		end;
		else if code ^= 0 then do;
		     call com_err_ (0, caller,
			"Could not add #D file to aft (status ^i)", code);
		     local_error = "1"b;
		     return;
		end;
	     end;
	     gtss_file_values.version = 1;
	     gtss_file_values.change_name = "0"b;
	     gtss_file_values.new_ename = " ";
	     gtss_file_values.ename = drun_file_name;
	     call user_info_$homedir (gtss_file_values.dname);

	     call gtss_attributes_mgr_$get (addr (gtss_file_values), code);
	     if code ^= 0 then do;
		call com_err_ (0, caller,
		     "Couldn't get #D attributes (code ^i)", code);
		local_error = "1"b;
		return;
	     end;

	     gtss_file_values.set_switch = "0"b;
	     gtss_file_values.set_switch.number_allocations = "1"b;
	     gtss_file_values.data_fields.number_allocations = 1; /* Increment by 1. */
	     call gtss_attributes_mgr_$set (addr (gtss_file_values), code);
	     if code ^= 0 then do;
		call com_err_ (0, caller,
		     "Couldn't reset attributes (code ^i)", code);
		local_error = "1"b;
		return;
	     end;


/**	Set runtime attributes structure for ios. **/
	     gtss_file_attributes_ptr = addr (gtss_tfa_ext_$file_attributes.temp_file (fn));
	     gtss_file_attributes.max_size = gtss_file_values.data_fields.maxll;
	     gtss_file_attributes.current_size = gtss_file_values.data_fields.curll;
	     gtss_file_attributes.user_attributes.non_null = ^gtss_file_values.data_flags.null_file;
	     gtss_file_attributes.user_attributes.user_attr = gtss_file_values.attributes.attr;
	     gtss_file_attributes.descriptor.device_type = "64"b3; /* => disk. */
	     if gtss_file_values.data_flags.mode_random then
		gtss_file_attributes.descriptor.words_block = "0100"b3; /* 64 (100oct) words per block. */
	     else
	     gtss_file_attributes.descriptor.words_block = "0500"b3; /* 320 (500oct) words per block. */
	     gtss_file_attributes.descriptor.llink_flag = "1"b; /* size is in llinks (320words) */
	     gtss_file_attributes.descriptor.mode = gtss_file_values.data_flags.mode_random;
	     gtss_file_attributes.descriptor.perm = "1"b; /* Permanent file. */
	     gtss_file_attributes.descriptor.size = bit (fixed (gtss_file_values.data_fields.curll, 14)); /* Size in llinks */
	end;					/* access_dq */


init_head_cat: proc;


	     call gtss_aft_$find ("#D", fn, code);
	     if code ^= 0 then do;
		call com_err_ (0, caller,
		     "Couldn't find #D in aft");
		local_error = "1"b;
		return;
	     end;
	     call gtss_ios_open_ (
		fn,
		gtss_file_values.dname,
		gtss_file_values.ename,
		"110000"b,
		"1"b,
		gtss_file_attributes_ptr,
		addr (gcos_status),
		code);
	     if gcos_status.bit12 ^= "4000"b3 then do;
		call com_err_ (0, caller,
		     "Couldn't open #D file (status ^w)",
		     gcos_status.bit12);
		local_error = "1"b;
		return;
	     end;
	     else file_opened = "1"b;
	     dqh_ptr = addr (gtss_def_q_$FILE.RECORD.no_characters);
	     unspec (dqh_ptr -> dq_header) = "0"b;
	     dqh_ptr -> dhbsn.no_of_cea = (320 * drun_file_size - 8) / 72;
	     call decode_clock_value_ (
		clock_ ()
		, month
		, day_of_month
		, year
		, time_of_day
		, day_of_week
		, time_zone
		);

	     ascii_date.yr = mod (year, 100);
	     ascii_date.mo = month;
	     ascii_date.dy = day_of_month;
	     call gtss_ascii_bcd_ (addr (ascii_date), 6, addr (dqh_ptr -> dhdat));

	     milsec = divide (time_of_day, 1000, 71);
	     milsec64ths = milsec*64;
	     dqh_ptr -> dhtim = milsec64ths;
	     dqh_ptr -> dhrns = milsec64ths;
	     sp = dqh_ptr;
	     dc_ptr = addr (sp -> cs (33));
	     unspec (dc_ptr -> dq_catalog) = "0"b;
	     dc_ptr -> dcdsd = dqh_ptr -> dhdat;
	     dc_ptr -> dcdst = -1;

	     gtss_def_q_$FILE.OP2.Device_Command = write_cmd;
	     call gtss_ios_io_ (
		fn,
		addr (gtss_def_q_$FILE.select_sequence),
		addr (gtss_def_q_$FILE.select_sequence),
		fixed (rel (addr (gtss_def_q_$FILE.DQ))),
		status,
		code);
	     if status ^= 0 then do;
		call com_err_ (code, caller,
		     "Unable to write header. (status ^i)", status);
		local_error = "1"b;
		return;
	     end;

	     call close_file;

	end;					/* init_dq_head */

read_sector: write_sector: proc;

/** Read/write #D sector **/
	     call gtss_aft_$find ("#D", fn, code);
	     if code ^= 0 then do;
		call com_err_ (0, caller,
		     "Couldn't access the #D file.");
		local_error = "1"b;
		return;
	     end;
	     call gtss_ios_io_ (
		fn,
		addr (gtss_def_q_$FILE.select_sequence),
		addr (gtss_def_q_$FILE.select_sequence),
		fixed (rel (addr (gtss_def_q_$FILE.DQ))),
		status,
		code);
	     if status ^= 0 then do;
		call com_err_ (code, caller,
		     "Unable to read/write sector. (status ^i)", status);
		local_error = "1"b;
		return;
	     end;

	end;					/* read_sector */

get_cat_entry: proc;

	     cat_entries_avail = dqh_ptr -> dq_header.dhbsn.no_of_cea;
	     read_limit = dqh_ptr -> dq_header.dhbsn.no_of_cea / 8;

/** Find the catalog entry **/
	     i = 0;
	     if ^find_cat_entry () then do;
		not_found = "1"b;
		do i = 1 to read_limit while (not_found);
		     gtss_def_q_$FILE.OP2.Device_Command = read_cmd;
		     gtss_def_q_$FILE.Seek_Address = i;
		     call gtss_ios_io_ (
			fn,
			addr (gtss_def_q_$FILE.select_sequence),
			addr (gtss_def_q_$FILE.select_sequence),
			fixed (rel (addr (gtss_def_q_$FILE.DQ))),
			status,
			code);
		     if status ^= 0 then do;
			call com_err_ (code, caller,
			     "Unable to read catalog sector. (status ^i)", status);
			local_error = "1"b;
			return;
		     end;
		     if find_cat_entry () then not_found = "0"b;
		end;

		if i > read_limit then do;
		     local_error = "1"b;
		     cat_entry = 0;
		end;

	     end;

	     if i ^= 0 then
		cat_entry = 7 + ((i - 1) * 8) + cat_entry;
	     else cat_entry = cat_entry - 1;

find_cat_entry: proc returns (bit (1));

		wp = addr (gtss_def_q_$FILE.RECORD.no_characters);

		do cat_entry = 1 to 8;
		     dc_ptr = addr (words (cat_entry));
		     if dc_ptr -> dq_catalog.dcjid.bcd_job_id = bcd_jid
		     then return ("1"b);
		end;

		return ("0"b);

	     end;					/* find_cat_entry */

	end;					/* get_cat_entry */

close_file: proc;

	     call gtss_aft_$find ("#D", fn, code);
	     if code ^= 0 then do;
		file_opened = "0"b;
		return;
	     end;
	     call gtss_ios_close_ (fn, addr (gcos_status), code);
	     if gcos_status.bit12 ^= "4000"b3 then do;
		call com_err_ (0, caller,
		     "Couldn't close #D file (status ^w)",
		     gcos_status.bit12);
		local_error = "1"b;
		return;
	     end;
	     file_opened = "0"b;

	end;					/* close_file */


/*	gtss_dq_ local declares	*/

dcl CR char (1) init ("
");
dcl absin_fn char (32) init ("drun_control.absin");
dcl bcd_jid bit (30);
dcl caller char (32) varying;
dcl cat_entry fixed bin (18) unsigned;
dcl cat_e_parm fixed bin (18) unsigned parm;
dcl cat_entries_avail fixed bin (18) unsigned;
dcl char_string char (252) varying;
dcl checksum_field bit (36) based (addr (d_buf (0)));
dcl chars char (csl) based (seg_ptr);
dcl clock_ entry returns(fixed bin(71));
dcl code fixed bin (35);
dcl cs (253) char (1) based;
dcl csl fixed bin (24);
dcl curr_entry fixed bin (18) unsigned;
dcl day_of_month fixed bin;
dcl day_of_week fixed bin;
dcl date builtin;
dcl d_buf (0:((320*71-8)/72/8)-1) bit (36 * 64);
dcl dc_ptr ptr init (null());
dcl dcp ptr parm;
dcl decode_clock_value_ entry(fixed bin(71),fixed bin,fixed bin,fixed bin,fixed bin(71),fixed bin,char(4)aligned);
dcl dib_ptr ptr init (null());
dcl dibp ptr parm;
dcl dqh_ptr ptr init (null());
dcl dqhp ptr parm;
dcl drun_file_name char (32) init ("drun_#d_q");
dcl drun_file_size fixed bin (24) init (71);
dcl drun_job_id char (5) parm;
dcl djid char (5);
dcl eb bit (1);
dcl eip ptr parm;
dcl error bit (1) parameter;
dcl file_opened bit (1) static internal init ("0"b);
dcl fn fixed bin (24);
dcl gtss_fail condition external;
dcl hcs_$make_seg entry (char(*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl hcs_$set_safety_sw entry (char (*), char (*), bit (1), fixed bin (35));
dcl i fixed bin (18) unsigned;
dcl ioa_ entry options (variable);
dcl j fixed bin (18) unsigned;
dcl job_stat fixed bin (6) unsigned parm;
dcl local_error bit (1) automatic init ("0"b);
dcl max_attempts fixed bin init (50);
dcl milsec64ths fixed bin(35);
dcl milsec fixed bin(71);
dcl month fixed bin;
dcl no_of_e fixed bin (18) unsigned parm;
dcl no_of_entries_found fixed bin (18) unsigned parm;
dcl not_found bit (1);
dcl read_limit fixed bin (18) unsigned;
dcl sec_no fixed bin (18) unsigned;
dcl sector bit (36 * 64) based;
dcl seg_ptr ptr init (null());
dcl sp ptr init (null());
dcl status fixed bin (24);
dcl timer_manager_$sleep entry (fixed bin (71), bit (2));
dcl time_of_day fixed bin(71);
dcl time_zone char(4) aligned;
dcl user_info_$homedir entry (char(*));
dcl wait_time fixed bin (71) init (1);
dcl words (8) bit (36 * 8) based (wp);
dcl wp ptr init (null());
dcl year fixed bin;
dcl 1 ascii_date aligned,
      2 yr pic "99" unal,
      2 mo pic "99" unal,
      2 dy pic "99" unal;
dcl 1 date_val,
      2 yy char(2)unal,
      2 mm char(2)unal,
      2 dd char(2)unal;

dcl 1 entries_info (no_of_e) based (eip),
      2 did char (5),
      2 aid char (19),
      2 job_stat fixed bin (6) unsigned;
dcl 1 gcos_status aligned,
     2 bit12 bit(12)unal,
     2 bit60 bit(60)unal;


%include gtss_file_values;

%include gtss_def_q_;

%include gtss_deferred_queue;

%include gtss_device_cmds;

%include gtss_entry_dcls;

%include gtss_dfd_ext_;

%include gtss_tfa_ext_;

%include gtss_db_names;

%include gtss_ext_;

%include gtss_ust_ext_;

%include gtss_checksum;
     end;						/* gtss_dq */
