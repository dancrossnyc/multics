/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_CFP_input_: proc (up, bp, ml, rl, ec);

/**      This program is called to do all input when doing
         CRUN/DRUN processing. Depending on the modes in
         effect as a result of processing $*$ requests, the
         appropriate input/output actions are performed.

         Author: Al Dupuis 05/05/79.
  Changed: Ron Barstad 83-03-31  fixed length of output substr in debug to rl, was rl-1
**/

dcl  up ptr parm;		/** (input) iocb ptr **/
dcl  bp ptr parm;		/** (input) points to callers buffer **/
dcl  ml fixed bin (21) parm;	/** (input) buffer length **/
dcl  rl fixed bin (21) parm;	/** (output) number of characters returned **/
dcl  ec fixed bin (35) parm;	/** (output) Multics error code **/

/**
	ACTION		MEANING

	action-1		terminal read
	action_2		terminal read, terminal write
	action_3		terminal read, *CFP write
	action_4		terminal read, terminal write, *CFP write

	action_5		*CFP read
	action_6		*CFP read, terminal write
	action_7		*CFP read, *CFP write
	action_8		*CFP read, terminal write, *CFP write


      EXCLUDE   DELE_ON   COPY_ON   TALK_ON                 ACTION

	0	0	0	0		action_7
	0	0	0	1		action_3
	0	0	1	0		action_8
	0	0	1	1		action_3
	0	1	0	0		action_5
	0	1	0	1		action_1
	0	1	1	0		action_6
	0	1	1	1		action_2
	1	0	0	0		action_5
	1	0	0	1		action_1
	1	0	1	0		action_6
	1	0	1	1		action_1
	1	1	0	0		action_5
	1	1	0	1		action_1
	1	1	1	0		action_6
	1	1	1	1		action_2

**/

	no_input_yet = "1"b;

/**       Obtain the input line from terminal or current *CFP file,
          and do any special processing requested by $*$ cards
**/


	do while (no_input_yet);


	     if gtss_starCF_$FILE.cf.first_time = "1"b
	     then call set_exclude;			/* done once for each new *CFP file */
	     else;
	     rtn_bits = gtss_starCF_$FILE.cf.exclude_on || dele_on || copy_on || talk_on;
	     proper_rtn = rtn_table (fixed (rtn_bits, 4));
	     call proper_rtn;
	     if db_CFP_input then call ioa_ (
		"input sector no was (^d)"
		|| "    no of chars read was (^d)"
		|| "^/chars read were (^a)",
		gtss_ust.lcfio.sect_in - 1,
		rl,
		substr (RECORD.chars, 1, rl));

	     if rl >= 4 then
		if ((substr (bp -> string, 1, 4) = "cpos") | /* have to set this bit so that */
		(substr (bp -> string, 1, 4) = "CPOS")) then /* drl_t_cfio_ won't start a new *CFP file */
		     cpos_called = "1"b;

	     if rl >= 3 then			/* if drun execution in progress, check for last cmnd */
		if gtss_ust.lcjid ^= "0"b then
		     if ((substr (bp -> string, 1, 3) = "bye")
		     | (substr (bp -> string, 1, 3) = "BYE"))
		     | (gtss_ust.lcfio.sect_in ^< gtss_ust.lcfst.initial_sect_out)
		     then call end_of_drun;

	     if CFP_in_progress then			/* gtss_read_starCFP_ may have exhausted input */
		if rl > 3 then
		     if (index (bp -> string, "$*$") ^= 0) then do;
			if substr (bp -> string, rl, 1) = CR then substr (bp -> string, rl, 1) = NL;
			call gtss_dsd_process_ (up, bp, ml, rl, ec); /* special processing of line */
		     end;
		     else no_input_yet = "0"b;	/* does not contain $*$ */
		else no_input_yet = "0"b;		/* not long enough for $*$ line */
	     else no_input_yet = "0"b;		/* all *CFP input exhausted */

	end;


action_1:	proc;

	     call iox_$get_line (iox_$user_input, bp, ml, rl, ec);
	     if ec = error_table_$long_record
	     then call long_line;

	end					/* action_1 */;



action_2:	proc;

	     call iox_$get_line (iox_$user_input, bp, ml, rl, ec);
	     if ec = error_table_$long_record
	     then call long_line;
	     if ec = 0 then call iox_$put_chars (iox_$user_output, bp, rl, code);
	     if code ^= 0 then call bug_complaint;

	end					/* action_2 */;



action_3:	proc;

	     call iox_$get_line (iox_$user_input, bp, ml, rl, ec);
	     if ec = error_table_$long_record
	     then call long_line;
	     if ec = 0 then do;
		i = gtss_edit_dsd_ (bp, rl);		/* does line go to *CFP */
		if i = 0 then call gtss_write_starCFP_ (up, bp, rl, code); /* yes */
	     end;
	     if code ^= 0 then call bug_complaint;

	end					/* action_3 */;



/**	NOT USED AT THIS TIME
action_4:	proc;

	     call iox_$get_line (iox_$user_input, bp, ml, rl, ec);
               if ec = error_table_$long_record
               then call long_line;
	     if ec = 0 then call iox_$put_chars (iox_$user_output, bp, rl, code);
	     if code = 0 then do;
		i = gtss_edit_dsd_ (bp, rl);		
		if i = 0 then call gtss_write_starCFP_ (up, bp, rl, code); 
	     end;
	     if code ^= 0 then call bug_complaint;

          end;
*/


action_5:	proc;

	     call gtss_read_starCFP_ (up, bp, ml, rl, ec);

	end					/* action_5 */;



action_6:	proc;

	     call gtss_read_starCFP_ (up, bp, ml, rl, ec);
	     if ec = 0 then call iox_$put_chars (iox_$user_output, bp, rl, code);
	     if code ^= 0 then call bug_complaint;

	end					/* action_6 */;



action_7:	proc;

	     call gtss_read_starCFP_ (up, bp, ml, rl, ec);
	     if ec = 0 then do;
		i = gtss_edit_dsd_ (bp, rl);		/* does line go to *CFP */
		if i = 0 then call gtss_write_starCFP_ (up, bp, rl, code); /* yes */
	     end;
	     if code ^= 0 then call bug_complaint;

	end					/* action_7 */;



action_8:	proc;

	     call gtss_read_starCFP_ (up, bp, ml, rl, ec);
	     if ec = 0 then call iox_$put_chars (iox_$user_output, bp, rl, code);
	     if code = 0 then do;
		i = gtss_edit_dsd_ (bp, rl);		/* does line go to *CFP */
		if i = 0 then call gtss_write_starCFP_ (up, bp, rl, code); /* yes */
	     end;
	     if code ^= 0 then call bug_complaint;

	end					/* action_8 */;


bug_complaint: proc;

	     gtss_ust.lcfst.start_term = 2;
	     call gtss_abort_subsystem_ (
		gtss_find_cond_frame_ ("derail"),
		"gtss_CFP_input",
		0,
		"Encountered a bad i/o to terminal or *CFP."
		);
	     return;
	end					/* bug_complaint */;



set_exclude: proc;

	     gtss_starCF_$FILE.cf.first_time = "0"b;
	     gtss_starCF_$FILE.Seek_Address = gtss_ust.lcfst.initial_sect_out - 1;
	     gtss_starCF_$FILE.OP2.Device_Command = read_cmd;
	     fn = gtss_starCF_$FILE.cf.aft_indx;
	     call gtss_ios_io_ (			/* read the cout sector from *CFP */
		fn,
		addr (select_sequence),
		addr (select_sequence),
		fixed (rel (addr (gtss_starCF_$FILE.cf))),
		status,
		code);
	     if status ^= 0 then do;
		call com_err_ (code, "gtss_CFP_input_$set_exclude",
		     "Unable to read cout sector (status ^i)", status);
		call bug_complaint;
		return;
	     end;

	     dib_ptr = addr (no_characters);		/* DIB description--DB84 page 16-22 */
	     if dib_ptr -> dq_dib.dbflg.f_exc = "1"b then
		gtss_starCF_$FILE.cf.exclude_on = "1"b;
	     else gtss_starCF_$FILE.cf.exclude_on = "0"b;

	end;					/* set_exclude */



long_line: proc;

	     attempts = 1;
	     do while (attempts < 6);
		if ec = error_table_$long_record then do;
		     call com_err_ (0, "", "RETRANSMIT LAST LINE");
		     call iox_$control (up, "resetread", null (), ec);
		     call iox_$get_line (iox_$user_input, bp, ml, rl, ec);
		     attempts = attempts + 1;
		end;
		else return;
	     end;

	     rl = 0;

	end;					/* long_line */

end_of_drun: proc;


	     buffer = gtss_abs_logout_banner_ ();	/* banner is 2 lines */
	     nl_indx = index (buffer, NL);
	     rl = (nl_indx - 1) + 4;
	     bp -> string =
		CR || NL || substr (buffer, 1, nl_indx - 1) || CR || NL;
	     call gtss_write_starCFP_ (up, bp, rl, code);
	     if code = 0 then do;
		rl = length (buffer) - nl_indx + 2;
		bp -> string = substr (buffer, nl_indx + 1) || CR || NL;
		call gtss_write_starCFP_ (up, bp, rl, code);
		if code = 0 then do;		/* read the cout sector */
		     gtss_ust.lcfio.sect_in = gtss_ust.lcfst.initial_sect_out - 1;
		     call gtss_read_starCFP_ (up, bp, ml, rl, ec);
		end;
	     end;

	     if code ^= 0 then call bug_complaint;

dcl buffer char (300) varying;
dcl nl_indx fixed bin (24);

	end;					/* end_of_drun */

/**
Variables for gtss_CFP_input_
**/


dcl  NL                       char(1)static int options(constant) init("
");

dcl  CR                       char(1)static int options(constant) init("");
dcl (i, l, fn, status, attempts, l_idx) fixed bin (24);
dcl code fixed bin (35) init (0);
dcl string char (rl) based (bp);
dcl (fixed, null, substr) builtin;
dcl ioa_ entry options (variable);
dcl iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl iox_$user_input ptr ext;
dcl iox_$user_output ptr ext;
dcl gtss_fail condition ext;
dcl error_table_$long_record fixed bin (35) external;

dcl proper_rtn entry int variable;
dcl rtn_table (0:15) entry init (
    action_7,
    action_3,
    action_8,
    action_3,
    action_5,
    action_1,
    action_6,
    action_2,
    action_5,
    action_1,
    action_6,
    action_1,
    action_5,
    action_1,
    action_6,
    action_2);

dcl dib_ptr ptr init (null());

%include gtss_CFP_bits;

%include gtss_device_cmds;

%include gtss_starCF_;

%include gtss_ust_ext_;

%include gtss_ext_;

%include gtss_entry_dcls;

%include gtss_deferred_queue;

%include gtss_db_names;
     end						/* gtss_CFP_input_ */;
