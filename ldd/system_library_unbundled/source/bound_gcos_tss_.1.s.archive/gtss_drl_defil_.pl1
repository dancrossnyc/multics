/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_drl_defil_: proc (mcpp, increment);

/* *	gtss create a temporary file.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward

   Changed: Al Dupuis	10/18/79 To keep temp file size up to date.
   Changed: Dave Ward	02/06/80 corrected file size returned if in aft.
   Changed:  Ron Barstad  02/07/83  Fixed incorrectly formatted ioa control string in com_err call
   * */
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/* *

   DRL DEFIL,  DEFINE AND ACCESS A TEMPORARY FILE (octal 6)


   8_________1_6_____________________

   DRL      DEFIL
   ZERO     L(arg),L(stat)

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17B, Rev. 0, July 1976
   Page 3-34,35)

*/

	increment = 1 ;				/* One arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc)+1);	/* get addres of arg_list */

/* *	Obtain name of file to rewind.	* */
	if (fixed (L_arg, 18)+2) > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_defil_",
		4,
		"DEFIL: File name outside memory at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	arg_ptr = addrel (gseg, L_arg);

/* *	Obtain pointer to return status word.	* */
	if L_stat >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_defil_",
		4,
		"DEFIL: Status word outside memory at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	status_words_ptr = addrel (gseg, L_stat);

/* *	Obtain (fn) the AFT index to the file.	* */
create_temp: ;
	call gtss_aft_$add ((ascii_file_name), fn, code);
	if code = 1 then do;			/* Name already in AFT. */
	     status_word_1 = 5;			/* Duplicate file name (i.e., already in AFT. */
	     Device_type = temp_file (fn).device_type;
	     Words_per_physical_block = temp_file (fn).words_block;
	     Size_in_blocks_or_links = temp_file (fn).llink_flag; /* 0 => links, 1 => llinks (blocks). */
	     Linked_or_Random = temp_file (fn).mode;
	     Perm_or_Temp = temp_file (fn).perm;
	     File_size = temp_file (fn).size;

load_A_register: ;
	     mc.regs.a = A_reg_b36;
	     if db_drl_defil then
		call ioa_ (
		"gtss_drl_defil_: ""^a"" (aft ^i)"
		||"^/A-reg (dev=^2o wpb=^4o random=^1b perm=^1b size=^5o^[l^;^s^]links)"
		, ascii_file_name
		, fn
		, fixed (A_reg.Device_type, 24)
		, fixed (A_reg.Words_per_physical_block, 24)
		, A_reg.Linked_or_Random
		, A_reg.Perm_or_Temp
		, fixed (A_reg.File_size, 17)
		, A_reg.Size_in_blocks_or_links
		);
	     return;
	end;
	if code = 2 then do;			/* AFT full. */
no_temp_available: ;
	     status_word_1 = 3;			/* No room in AFT. */
	     return;
	end;
						/* => code =0 */

/* *	Prepare gtss_ios_ file attributes block
   for temp file.
   * */
	temp_file (fn).max_size = 0;			/* 0 => unlimited */
	temp_file (fn).current_size = fixed (arg2.d, 17)*12; /* d is in links, current_size in llinks.  */
	temp_file (fn).non_null = "0"b;		/* Has never been written to. */
	temp_file (fn).user_attr = "0"b;		/* (no used). */
	if arg2.b then
	     Device_type, temp_file (fn).device_type = arg2.a;
	else
	Device_type, temp_file (fn).device_type = "64"b3;
	Words_per_physical_block, temp_file (fn).words_block = "0100"b3; /* 100 oct = 64 dec words per block (ALWAYS). */
	Size_in_blocks_or_links, temp_file (fn).llink_flag = "0"b; /* 0 => links (12 llinks/blocks @). */
	Linked_or_Random, temp_file (fn).mode = arg2.c;	/* 0 (linked) | 1 (random). */
	Perm_or_Temp, temp_file (fn).perm = "0"b;	/* Temporary file. */
	temp_file (fn).fill = "0"b;
	File_size, temp_file (fn).size = "00"b||arg2.d;	/* size 14 bits, d 12 bits. */

	call gtss_ios_open_ (
	     /* 1 */ (fn)				/* AFT index. */
	     , /* 2 */ (gtss_ext_$pdir)		/* Temp file directory. */
	     , /* 3 */ file_name (fn)
	     , /* 4 */ "110000"b			/* bit=1 => read, bit2=1 => write. */
	     , /* 5 */ arg2.c			/* => linked or random. */
	     , /* 6 */ addr (temp_file (fn))
	     , /* 7 */ addr (fms_status)		/* gtss_ios_ status code. */
	     , /* 8 */ code				/* Multics error code. */
	     );
dcl 1 fms_status aligned,
      2 bit12 bit(12)unal,
      2 bit60 bit(60)unal;
	if fms_status.bit12 = "4000"b3 then do;
	     status_word_1 = 0;			/* Successful. */
	     goto load_A_register;
	end;
	call com_err_ (
	     code
	     , "gtss_drl_defil_"
	     , "gtss_ios_open_ status=^w. Can't open ""^a"""
	     , fms_status
	     , ascii_file_name
	     );
	aft_entry (fn).used = "0"b;			/* => Don't close, forget aft entry. */
	status_word_1 = 4;				/* Temporary file not available. */
	return;

subr:	entry (arg_ptr_p, status_words_ptr_p, mcp_p);

/* *	Subroutine entry to create a temp file.

   Caller must supply "arg" structure values and
   one word (based status_words_ptr_p).
   "mcp_p" should be set to space large enough so
   mc.regs.a variable can be used (see mc.incl.pl1).
   The 1st parameter (arg_ptr_p) points to the
   AFT file number variable (fixed bin) at return.
   * */
dcl  arg_ptr_p                ptr parm;
dcl  status_words_ptr_p       ptr parm;
dcl  mcp_p                    ptr parm;

	arg_ptr = arg_ptr_p;
	arg_ptr_p = addr (fn);			/* Point to AFT file number variable. */
	status_words_ptr = status_words_ptr_p;
	mcp = mcp_p;
	goto create_temp;

dcl  ioa_                     entry options(variable);

file_name: proc (f)returns (char (32)var);

/*	Provide Multics segment name for temp file.	* */
dcl  f                        fixed bin (24)parm;

	     p2 = f;				/* Convert AFT index to 2 numeric digits. */
	     r = unique_chars_ ("0"b);
	     r = r||".";
	     r = r||translate (aft_entry (f).altname, "+'_~????", "*. ;<>()");
	     r = r||".";
	     r = r||char (p2);
	     return (r);

dcl  r                        char (32)var;
dcl  p2                       pic"99";
	end					/* file_name */;

/* *	Variables for gtss_drl_defil_:
   IDENTIFIER		ATTRIBUTES	* */
dcl  A_reg_b36                bit (36)aligned init ("0"b);
dcl  addrel                   builtin;
dcl  arg_list_ptr             ptr init(null());
dcl  arg_ptr                  ptr init(null());
dcl  code                     fixed bin (35);
dcl  fn                       fixed bin (24);
dcl  gseg                     ptr init(null());
dcl  index                    builtin;
dcl  status                   fixed bin (24);
dcl  status_word_1            fixed bin (24)aligned based (status_words_ptr);
dcl  unique_chars_            entry (bit (*))returns (char (15));

dcl 1 arg_list aligned based (arg_list_ptr)
     , 2 L_arg bit (18)unal
     , 2 L_stat bit (18)unal
     ;

dcl 1 A_reg aligned based (addr (A_reg_b36))
     , 3 Device_type bit (06)unal
     , 3 Words_per_physical_block bit (12)unal
     , 3 Size_in_blocks_or_links bit (01)unal
     , 3 Linked_or_Random bit (01)unal
     , 3 Perm_or_Temp bit (01)unal
     , 3 unused bit (01)unal
     , 3 File_size bit (14)unal
     ;

%include gtss_ext_;

%include mc;

%include gtss_io_status_words;

%include gtss_tfa_ext_;

%include gtss_dfd_ext_;

%include gtss_ust_ext_;

%include gtss_entry_dcls;

%include gtss_defil_arg;

%include gtss_db_names;
     end						/* gtss_drl_defil_ */;
