/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/** ************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_abort_subsystem_: proc (mcpp, caller_name, gcos_error_code);

/** Abort call to subsystem and not-implemented.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Changed: Dave Ward	03/27/79 null mcp, abandon.
   Changed: Al Dupuis	06/12/79 to allow for transferring to special
			$*$lbl ..abort when doing command file processing.
   Changed: Al Dupuis         12/01/79 changed ios_ calls to com_err_, set error
                              code (lcfst.start_term) for cout subsystem.
   Changed: Ron Barstad       84-02-28  Changed size of error_structure to reflect gtss_pnterr
   ** /

/*






   This routine is called by derail routines  which  detect  errors.
   Under  control  of user accessible bits in spa.lwrap it prints an
   error message and/or prepares for execution of the user's  wrapup
   code.    If   the   wrapup   code   is   not   to   be  executed,
   gtss_abort_subsystem_ does a nonlocal goto to  gtss_ext_$drl_rtrn
   (gtss_ext_$stack_level_)  thus  aborting  the  subsystem.  If the
   wrapup code is to  be  executed,  gtss_abort_subsystem_  modifies
   scu.ilc  in  the  saved machine conditions to point to the wrapup
   code and then returns.  When gtss_abort_subsystem_  returns,  its
   caller  should  also  return  so  that  the  wrapup  code  can be
   executed.


   Usage:
   dcl gtss_abort_subsystem_ entry options (variable);
   call                                        gtss_abort_subsystem_
   (mcp,caller_name,gcos_error_code,ioa_control_string,arg1,...argn);
   Where:
   1. mcp    (input)             (ptr)
   is  a  pointer  to  the  machine conditions saved when the derail
   fault occurred.
   2. caller_name (input)        (char(*))
   is  the   name   of   the   DRL   routine   which    is   calling
   gtss_abort_subsystem_.
   3. gcos_error_code (input)    (fixed bin(18))
   is  a  gcos  timesharing  error  code as docutented for .LABRT in
   DD17C Rev 0 pp.3-3.1,3.2.
   (4. ioa_control_string         (input)
   is an optional control string for an error message.  If no  error
   message is desired only 3 parameters should be passed.
   5. argi   (input)
   optional arguments for use with the ioa_ control string.
*/
dcl  addr                     builtin;
dcl  arg_count                fixed bin  /* total number of args passed. */;
dcl  arg_list_ptr             ptr init(null());
dcl  caller_name              char (*) parm;
dcl  com_err_$suppress_name   entry options (variable);
dcl  cu_$arg_count            entry (fixed bin);
dcl  cu_$arg_list_ptr         entry (ptr);
dcl  drl_abort_code           fixed bin (18);
dcl  error_structure          (69) char (50) based (addr (gtss_pnterr));
dcl  gcos_error_code          fixed bin (18) parm;
dcl  gseg                     ptr init(null());
dcl  gtss_fail                condition;
dcl  i                        fixed bin (24);
dcl  instruction_counter      bit (18)  /* transfer address for user's wrapup routine */;
dcl  ioa_                     ext entry options (variable);
dcl  ioa_$general_rs          entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);
dcl  lower_limit              bit (18);
dcl  mcpp                     ptr parm;
dcl  null                     builtin;
dcl  rtn_string               char (256);
dcl  rtn_string_len           fixed bin;
dcl  upper_limit              bit (18);
dcl  current_level		fixed bin (24);

/* Make sure we have required arguments */
	call cu_$arg_count (arg_count);
	if arg_count < 3 then do;
	     call com_err_ (0, "gtss_abort_subsystem_",
		"Only ^i aruments supplied; Minimum 3 required", arg_count);
	     signal condition (gtss_fail);
	end;

	if gtss_ust.lflg2.b8 then call gtss_CFP_abort_;
	
/* Get machine condition pointer */
	mcp = mcpp;
	if mcp = null () then do;
	     call com_err_$suppress_name (0, "gtss_abort_subsystem_", "Machine conditions not available.");
	     call pr_msg;
	     call gtss_drl_sysret_ (null (), 0);
	     signal cond (gtss_fail);
	end;
	scup = addr (mc.scu);

/* Get pointer to user's segment */
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);

/* If in CFP and user error, set cout termination code */
	if ((gtss_ust.lflg2.b8) & (gcos_error_code ^= 0))
	then do;
	     gtss_ust.lcfst.start_term = 6;
	     gtss_ust.lerrm = bit (fixed (gcos_error_code, 36), 36);
	end;

/* Write abort file only if bit 19 of .LWRAP is off */
	drl_abort_code = 0;
	if ^gtss_spa.lwrap.b19 then do;
	     gtss_spa.lwrap.b19 = "1"b;
	     call gtss_abort_dump_ (drl_abort_code);
	end;

/* Print error message if WRAPUP is already in progress or
   bit 20 of .LWRAP is off. */
	if gtss_spa.lwrap.b18 | ^gtss_spa.lwrap.b20
	then do;
	     if gcos_error_code = 35			/* we were called by gtss_drl_abort_ */
	     & drl_abort_code ^= 0			/* gtss_abort_dump_ has been called */
	     then call com_err_$suppress_name (0, "gtss_abort_subsystem_", "^/"||
		error_structure (drl_abort_code), fixed (scu.ilc, 18));
	     else call pr_msg;
	end;

/* Save instruction counter and error code in .LABRT in slave prefix */
	gtss_spa.labrt.b0_17 = bit (fixed (fixed (scu.ilc, 18)+1, 18), 18);
	if gcos_error_code = 35			/* we were called by gtss_drl_abort_ */
	& drl_abort_code ^= 0			/* gtss_abort_dump_ has been called */
	then gtss_spa.labrt.b18_35 = drl_abort_code;
	else gtss_spa.labrt.b18_35 = gcos_error_code;
	gtss_ust.licec = gtss_spa.labrt;

/* If wrapup is already in progress it will not be paid again */
	if gtss_spa.lwrap.b18 then go to
	     gtss_ext_$drl_rtrn (gtss_ext_$stack_level_);

/* Mark wrapup in progress */
	gtss_spa.lwrap.b18 = "1"b;

/* See if the user provided a valid wrapup address. */
	lower_limit = bit (binary (100, 18), 18);
	upper_limit = gtss_ust.lsize.limit;
	instruction_counter = gtss_spa.lwrap.b0_17;

/* If not, ignore wrapup request. */
	if instruction_counter < lower_limit | instruction_counter >= upper_limit then
	     go to gtss_ext_$drl_rtrn (gtss_ext_$stack_level_);

/* Prepate to execute user's wrapup routine */
	scu.ilc = instruction_counter;
	return;

not_imp:	entry (mcpp, drl_type);
dcl  drl_type                 fixed bin parm;
dcl  fixed                    builtin;
	mcp = mcpp;
	scup = addr (mc.scu);
	i = gtss_ust.lxxx.b0_17 - fixed (rel (addr (gtss_ust.lxxx)))
	     +fixed (rel (addr (gtss_ust)));
	call com_err_$suppress_name (0, "gtss_abort_subsystem_",
	"^/Unimplemented drl ^a at ^o from subsystem ""^a""^/"
	     , DRL_NAME (drl_type)
	     , fixed (scu.ilc)
	     , ss_name (gtss_ust.lprgs (i).b0_17)
	     );
	goto gtss_ext_$drl_rtrn (gtss_ext_$stack_level_);

pr_msg:	proc;

/* Print callers message. */
	     if arg_count > 3 then do;
		call cu_$arg_list_ptr (arg_list_ptr);
		call ioa_$general_rs (arg_list_ptr, 4, 5, rtn_string, rtn_string_len, "0"b, "0"b);
		if rtn_string_len > 0 then
		     if substr (rtn_string, 1, rtn_string_len) ^= "" then
		     call com_err_$suppress_name (0, "gtss_abort_subsystem_", "^/^a", substr (rtn_string, 1, rtn_string_len));
	     end;
	     return;
	end					/* pr_msg */;

%include gtss_spa;

%include gtss_ext_;

%include mc;

%include gtss_prgdes_;

%include gtss_ust_ext_;

%include gtss_drl_names;

%include gtss_pnterr;

%include gtss_entry_dcls;

%include gtss_starCF_;
     end						/* gtss_abort_subsystem_ */;
