/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_grow_: proc (mcpp, increment);

/* *	gtss grow a file.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 $db debug switch.
   Change:  Dave Ward	10/31/79 Record quota overflow handling.
   * */
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/* *

   DRL GROW, GROW A PERMANENT OR TEMPORARY FILE (octal 50)


   8_________1_6_____________________

   DRL      GROW
   ZERO     L(n),L(fileid)
   ZERO     L(buff),L(stat)

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17C, Rev. 0, July 1976
   Page 3-51)

*/

	increment = 2 ;				/* Two arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc)+1);	/* get addres of arg_list */

/* *	Obtain name of file to grow.	* */
	if L_fileid >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_grow_"
		, 4				/* Invalid drl argument */
		, "FILE NAME OUTSIDE MEMORY AT (^o)"
		, fixed (scu.ilc, 18)
		);
	     go to ret;
	end;
	afn_ptr = addrel (gseg, L_fileid);

/* *	Obtain pointer to return status word.	* */
	if L_stat >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_grow_"
		, 4				/* Invalid drl argument */
		, "STATUS WORD OUTSIDE MEMORY (^o)"
		, fixed (scu.ilc, 18)
		);
	     go to ret;
	end;
	grow_status_ptr = addrel (gseg, L_stat);

/* *	Obtain (fn) the AFT index to the file.	* */
	call gtss_aft_$find (ascii_file_name, fn, code);
	if code = 1 then do;			/* Unknown file (i.e., not in AFT). */
	     grow_status = "4024"b3;			/* Failure of name scan (not in AFT). */
	     go to ret;
	end;

/* *	Obtain amount to grow file.	* */
	if L_n >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_grow_"
		, 4				/* Invalid drl argument */
		, "ATTEMPT TO GROW FILE OUTSIDE MEMORY (^o)"
		, fixed (scu.ilc, 18)
		);
	     go to ret;
	end;
	n_ptr = addrel (gseg, L_n);

/* *	Grow the file.	* */
	call gtss_ios_change_size_ (
	     fn
	     , fixed (n.add, 24, 0)
	     , in_links
	     , status
	     , code);

/* *	adjust size field in file descriptor in attributes structure.   */
	call gtss_adjust_size_ (gtss_disk.attributes_ptr (fn));

	if status ^= 0 & status ^= 2 then do;
	     if db_drl_grow then
		call com_err_ (
		code
		, "gtss_drl_grow_"
		, "gtss_ios_change_size_ (file ^a) status ^i"
		, ascii_file_name
		, status
		);
	     if code = error_table_$rqover then
		grow_status = "4010"b3;		/* Exhausted links. */
	     else
	     grow_status = "4002"b3;			/* I/O error. */
	     go to ret;
	end;

	grow_status = "4000"b3;			/* No errors. */
ret:	;
	if db_drl_grow then
	     call ioa_ (
	     "GROW: file ^a (aft ^i) by ^o (^i.) ^[links^;llinks^],"
	     ||"^/now ^o (^i.) words. Status ^4o"
	     , ascii_file_name
	     , fn
	     , fixed (n.add, 17)
	     , fixed (n.add, 17)
	     , in_links
	     , file_size (fn)
	     , file_size (fn)
	     , fixed (grow_status, 12)
	     );
	return;

/* *	Variables for gtss_drl_grow_:
   IDENTIFIER		ATTRIBUTES	* */
dcl  addrel                   builtin;
dcl  afn_ptr                  ptr init (null ());
dcl  arg_list_ptr             ptr init (null ());
dcl  ascii_file_name          char (8)based (afn_ptr);
dcl  code                     fixed bin (35);
dcl  error_table_$rqover	fixed bin(35)ext;
dcl  fn                       fixed bin (24);
dcl  grow_status              bit (12)based (grow_status_ptr);
dcl  grow_status_ptr          ptr init (null ());
dcl  gseg                     ptr init (null ());
dcl  ioa_                     entry options (variable);
dcl  lower                    char(26)aligned static int options(constant)init("abcdefghijklmnopqrstuvwxyz");
dcl  n_ptr                    ptr init (null ());
dcl  status                   fixed bin (24);
dcl  UPPER                    char(26)aligned static int options(constant)init("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

dcl 1 arg_list aligned based (arg_list_ptr)
     , 2 L_n bit (18)unal
     , 2 L_fileid bit (18)unal
     , 2 L_buf bit (18)unal
     , 2 L_stat bit (18)unal
     ;

dcl 1 n aligned based (n_ptr)
     , 2 in_links bit (01)unal			/* 1 => links, 0 => llinks. */
     , 2 add bit (17)unal				/* Add to file. */
     ;

%include gtss_ext_;

%include mc;

%include gtss_ust_ext_;

%include gtss_entry_dcls;

%include gtss_dfd_ext_;

%include gtss_db_names;
     end						/* gtss_drl_grow_ */;
