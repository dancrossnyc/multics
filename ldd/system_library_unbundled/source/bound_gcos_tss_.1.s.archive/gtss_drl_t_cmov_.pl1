/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
gtss_drl_t_cmov_: proc (mcpp, increment);

/**	gtss read and write memory.

	Authors:	Robert J. Grimes	Created
		Albert N. Kepner	  1978
		Robert M. May
		David B. Ward
  Modified: Ron Barstad 83-06-29 Return permission denied status with return
                                 rather than drl incomplete message and abort	
 **/
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/**

   DRL T.CMOV, READ AND WRITE MEMORY (octal 73)


   8________16_____________________

   DRL      T.CMOV
   ZERO     from,P#
   ZERO     to,n

    (See TSS Reference Manual
         DJ31-A, Sept. 1980, page 6-79)

*/
%page;
	increment = 2 ;				/* Two arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc)+1);	/* get addres of arg_list */

/**	Provide (only) printer page length function.
**/
	if Pno = 0 then				/* Addressing is absolute */
	     if from = "001120"b3 then		/* => Printer page length value. */
		if n = 0 then do;			/* => Return in A/Q register. */
		     A_upper = 55;			/* GCOS default. */
		     A_lower = "0"b;
		     Q_reg = 0;			/* => Successful. */
		     return;
		end;

	if gtss_ust.lcjid ^= "0"b then do;
	     gtss_ust.lswth.b7 = "0"b;
	     goto gtss_ext_$drl_rtrn (gtss_ext_$stack_level_);
	end;

/* No simulator subsystem can have permission to read or write memory
    and since there is no GCOS or TSS memory to read or write we won't 
*/
	A_upper = 0;
	A_lower = "0"b;
	Q_reg = 5; /* status for permission denied */
/* used to do:
	call gtss_abort_subsystem_ (
	     mcp
	     , "gtss_drl_t_cmov_"
	     , 0
	     , "DRL T.CMOV (at ^6o) not complete: from=^6o P#=^i to=^6o n=^i"
	     , fixed (scu.ilc, 18)
	     , fixed (from, 18)
	     , Pno
	     , fixed (to, 18)
	     , n
	     );
*/
	return;
%page;
/**	Variables for gtss_drl_t_cmov_:
     IDENTIFIER		ATTRIBUTES	**/
dcl 1 a_register		aligned based(addr(mc.a)),
      2 A_upper		fixed bin(17)unal,
      2 A_lower		bit(18)unal;
dcl Q_reg fixed bin(35)based(addr(mc.q));
dcl  (addr,
      addrel,
      fixed,
      null)                   builtin;
dcl  arg_list_ptr             ptr init(null());
dcl  gseg                     ptr init(null());

dcl 1 arg_list		aligned based(arg_list_ptr)
,     2 from		bit(18)unal
,     2 Pno		fixed bin(17)unal
,     2 to		bit(18)unal
,     2 n			fixed bin(17)unal
;
%page;
%include gtss_ext_;
%page;
%include mc;
%page;
%include gtss_ust_ext_;
%page;
%include gtss_entry_dcls;
     end gtss_drl_t_cmov_;
