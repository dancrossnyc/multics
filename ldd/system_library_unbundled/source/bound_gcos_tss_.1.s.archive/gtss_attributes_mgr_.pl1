/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_attributes_mgr_: proc;

/**	Procedure to obtain and set the attribute values on
	a (Multics) GCOS file.

	The values are stored in names added to the file name.

	Given a Multics GCOS file with added names of the form:
		E.N.V

	where:	E => single element entry name on the file.
		N => attribute name (4 character, see attr_name array).
		V => current value of that attribute.

	Values are provided by the caller in the structure
	gtss_file_values (See gtss_file_values.incl.pl1).

	The 4 variables: version, dname, ename and new_ename
	(in the gtss_file_values) are filled in by the caller
	and the get entry called to obtain the current
	attributes for the designated file (returned
	in the gtss_file_values structure. set_switch
	values are not returned).

	The set entry requires the same 4 variables as for
	get. In addition bits are set "1"b in set_switch
	variables to indicate an attribute to set and the
	corresponding (non set_switch) variable set to the
	new value desired. Note the use of ename and
	new_ename combinations to provide for setting
	initial attributes and renaming as well as
	resetting values.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	08/14/79 db_attributes_mgr installation.
   Change:  Dave Ward	08/25/79 Revised noal setting.
   Change:  Ron Barstad	83-08-17 replaced hcs_$(initiate chname_seg) with chname_file
**/

	call com_err_ (0, "gtss_attributes_mgr_", "Entries are $get and $set.");
	return;
%page;
get:	entry (vp, rc);

/**	Obtain file attribute values.
**/
dcl  rc                       fixed bin(35)parm;
dcl  set_entry                bit(1);
dcl  vp                       ptr parm;

	fvp = vp;					/* Obtain values in caller's structure. */
	set_entry = "0"b;
	goto continue;


set:	entry (vp, rc);

/**	Set file attribute values.	**/

	fvp = addr (gtss_file_values);		/* Obtain values for set. */
	set_entry = "1"b;

continue:	;
						/* Verify caller's vp usable. */
	if (vp = null ()) |
	((addr (vp) -> bit72&get_ptr_bits) ^= ptr_constant) then do;
	     rc = error_table_$bad_ptr;
	     goto exit;
	end;


	if set_entry then do;			/* Obtain version and file name. */
	     gtss_file_values.version = vp -> fv.version;
	     gtss_file_values.dname = vp -> fv.dname;
	     gtss_file_values.ename = vp -> fv.ename;
	     gtss_file_values.new_ename = vp -> fv.new_ename;
	end;

	fv.info_ptr = null ();

	if fv.version ^= 1 then do;			/* Current version must be 1. */
	     rc = error_table_$unimplemented_version;
	     goto exit;
	end;

	en = fv.ename;

	c = fixed ((fv.ename ^= " ") || (fv.new_ename ^= " "), 2);
	goto name_case (c);

name_case(0):; /** Neither old nor new name given. */
	rc = error_table_$badpath;
	goto exit;

name_case(1):; /** New name only. **/
	if set_entry then goto do_set;
	rc = error_table_$bad_entry_point_name;
	goto exit;

name_case(2):; /** Old name only. **/
name_case(3):; /** Both old and new names. **/

	call hcs_$status_long (
	     fv.dname
	     , fv.ename
	     , 1b					/* Chase link. */
	     , addr (si)
	     , addr (names_area)
	     , code
	     );
	if code ^= 0 then do;
	     rc = code;
	     goto exit;
	end;

	fv.info_ptr = addr (si);

	if (si.type = "10"b) & (si.bit_count = "0"b) then do; /* Multics directory. */
	     fv.catalog = "1"b;			/* File is a catalog. */
	     fv.data_flags.mode_random = "1"b;
	     fv.data_flags.busy
		, fv.data_flags.null_file
		, fv.attributes.attr
		= "0"b;
	     fv.data_fields.maxll
		, fv.data_fields.curll = divide (fixed (si.records_used, 24)*1024, 320, 24);
	     fv.data_fields.number_allocations = 1;
	     fv.creation_date = dt (si.dtbm);

	     if set_entry then
		rc = error_table_$not_seg_type;
	     else
	     rc = 0;
	     goto exit;
	end;

	fv.catalog = "0"b;				/* File is not a catalog. */

	nn = fixed (si.nnames, 17);			/* Number of names on the file. */
	anp = pointer (addr (names_area), si.names_relp);
	string (have_attr) = "0"b;
	do i = 1 to nn;

/* Partition the i-th name into E, N, V fields. */
	     namei = file_name (i);
	     k = search (reverse (namei), ".");
	     if k = 0 then goto next;			/* No periods in i-th name. */

/* Set initial lengths of name fields. */
	     Nl = length (namei)-k;
	     Vl = k-1;

/* Set final lengths of name fields. */
	     k = search (reverse (name2.EN), ".");
	     if k = 0 then goto next;			/* Not 2 periods in name. */
	     El = Nl-k;
	     Nl = k-1;

/* Adjust value length to exclude
   trailing spaces. */
	     Vl = length (rtrim (name.V));

/* Prefix before attribute name must
   be the same as the file entry name.
*/
	     if fv.ename ^= name.E then goto next;

/* Establish which attribute this name specifies. */
	     k = index (string (attr_name), name.N);
	     if k = 0 then goto next;			/* Not one of attribute names. */
	     if mod (k-1, length (attr_name (0)))>0 then goto next; /* Not an attribute. */
	     k = divide (k-1, length (attr_name (0)), 17); /* k => which attribute. */
	     if set_entry then name_index (k) = i;	/* Record that i-th name is to be
						   used to replace the k-th attribute. */
	     goto set_mode (k);

set_mode(0):;	/** (mode) Random or sequential. **/
	     if name.V = "r" then do;
		fv.data_flags.mode_random = "1"b;
		have_attr (k) = "1"b;		/* Mark mode random. */
	     end;
	     else
	     if name.V = "s" then do;
		fv.data_flags.mode_random = "0"b;
		have_attr (k) = "1"b;		/* Mark mode sequential. */
	     end;
	     goto next;

set_mode(1):;	/** (maxl) Maximum length of file. **/
	     fv.data_fields.maxll = get_dec_value (k);
	     goto next;

set_mode(2):;	/** (curl) Current length of file. **/
	     fv.data_fields.curll = get_dec_value (k);
	     goto next;

set_mode(3):;	/** (busy) File in use. */
	     fv.data_flags.busy = yes_or_no (k);
	     goto next;

set_mode(4):;	/** (attr) User specified file attributes. **/
	     fv.attributes.attr = get_oct_value (k);
	     goto next;

set_mode(5):;	/** (null) File has never been written to. **/
	     fv.data_flags.null_file = yes_or_no (k);
	     goto next;

set_mode(6):;	/** (noal) Number of allocations, i.e., simulator accesses. **/
	     if set_entry then do;
		if vp -> fv.set_switch.number_allocations then do; /* Obtain for increment. */
		     if vp -> fv.data_fields.number_allocations>0 then /* But only if not initial value. */
			current_number_allocations = get_dec_value (k);
		end;
		else
		fv.data_fields.number_allocations = get_dec_value (k);
		have_attr (k) = "1"b;
	     end;
	     else					/* Obtain for caller. */
	     fv.data_fields.number_allocations = get_dec_value (k);
	     goto next;

set_mode(7):;	/** (crdt) File creation date. **/
	     fv.creation_date = name.V;
	     have_attr (k) = "1"b;
	     goto next;

next:	     ;

	end;

	if (^string (have_attr) ^= "0"b) then do;	/* Not all values obtained. */
	     rc = error_table_$action_not_performed;
	     goto exit;
	end;

	if ^set_entry then do;			/* Conclude return. */
	     rc = 0;
	     goto exit;
	end;
%page;
/* Reset added names => set entry called. */
do_set:	;
	lvp = vp;					/* Local vp. */
	if c = 2 then				/* New name same as ename. */
	     new = rtrim (fv.ename);
	else do;					/* Use new ename. */
	     new = rtrim (fv.new_ename);
	     if c = 1 then				/* Only new name specified. */
		en = new;
	     else					/* ename and new_ename specified. */
	     if string (set_sw) = "0"b then do;
						/* Nothing to set => just remaning old values. */
		set_sw = "1"b;			/* Reset all values. */
		lvp -> fv.data_flags = fv.data_flags;
		lvp -> fv.data_fields = fv.data_fields;
		lvp -> fv.attributes.attr = fv.attributes.attr;
		lvp -> fv.data_fields.number_allocations = fv.data_fields.number_allocations;
		lvp -> fv.creation_date = fv.creation_date;
	     end;
	end;

	if lvp -> fv.change_name then do;		/* Rename the entry. */
	     call hcs_$chname_file (
		(gtss_file_values.dname)
		, en
		, en				/* Old name. */
		, (lvp -> fv.new_ename)		/* New name. */
		, code
		);
	     if code ^= 0 then do;
		rc = code;
		goto exit;
	     end;

/* File entry is now the new name. */
	     en = lvp -> fv.new_ename;

/* Assure all values provided. */
	     if ^lvp -> fv.set_switch.mode_random then
		lvp -> fv.data_flags.mode_random = fv.data_flags.mode_random;
	     if ^lvp -> fv.set_switch.maxll then
		lvp -> fv.data_fields.maxll = fv.data_fields.maxll;
	     if ^lvp -> fv.set_switch.curll then
		lvp -> fv.data_fields.curll = fv.data_fields.curll;
	     if ^lvp -> fv.set_switch.busy then
		lvp -> fv.data_flags.busy = fv.data_flags.busy;
	     if ^lvp -> fv.set_switch.attr then
		lvp -> fv.attributes.attr = fv.attributes.attr;
	     if ^lvp -> fv.set_switch.null_file then
		lvp -> fv.data_flags.null_file = fv.data_flags.null_file;
	     if ^lvp -> fv.set_switch.number_allocations then
		lvp -> fv.data_fields.number_allocations = fv.data_fields.number_allocations;
	     if ^lvp -> fv.set_switch.creation_date then
		lvp -> fv.creation_date = fv.creation_date;
	     set_sw = "1"b;
	end;

	new = new||".";
	n = " ";

	do i = lbound (name_index, 1) to hbound (name_index, 1);
	     if ^set_sw (i) then goto next_change;
	     if c>1 then
		n = file_name (name_index (i));	/* The name to change. */
						/* Form change name up to suffix. */
	     cn = new;
	     cn = cn||attr_name (i);
	     cn = cn||".";
	     goto set_change (i);

set_change(0):;	/** (mode) Random or sequential. **/
	     if lvp -> fv.data_flags.mode_random then cn = cn||"r";
	     else cn = cn||"s";
	     goto make_change;

set_change(1):;	/** (maxl) Maximum length of file. **/
	     pic12 = lvp -> fv.data_fields.maxll;
	     cn = cn||tlz (pic12c);
	     goto make_change;

set_change(2):;	/** (curl) Current length of file. **/
	     pic12 = lvp -> fv.data_fields.curll;
	     cn = cn||tlz (pic12c);
	     goto make_change;

set_change(3):;	/** (busy) File in use. */
	     if lvp -> fv.data_flags.busy then cn = cn||"yes";
	     else cn = cn||"no";
	     goto make_change;

set_change(4):;	/** (attr) User specified file attributes. **/
	     v.r = lvp -> fv.attributes.attr;
	     v.f = "0"b;
	     do k = 1 to 12;
		cn = cn||substr ("01234567", fixed (va (k), 17)+1, 1);
	     end;
	     goto make_change;

set_change(5):;	/** (null) File has never been written to. **/
	     if lvp -> fv.data_flags.null_file then cn = cn||"yes";
	     else cn = cn||"no";
	     goto make_change;

set_change(6):;	/** (noal) Number of allocations by GCOS simulator. */
	     pic12 = mod (current_number_allocations+lvp -> fv.data_fields.number_allocations, 262144);
	     cn = cn||tlz (pic12c);
	     goto make_change;

set_change(7):;	/** (crdt) Creation date MMDDYY **/
	     cn = cn||lvp -> fv.creation_date;
	     goto make_change;


make_change:   ;

	     call hcs_$chname_file (
		(gtss_file_values.dname)
		, en
		, rtrim (n)			/* Old name. */
		, (cn)				/* New name. */
		, code
		);
	     if code ^= 0 then
		if code ^= error_table_$segnamedup then do;
		     if db_attributes_mgr then
			call com_err_ (
			code
			, "gtss_attributes_mgr_"
			, "File attribute, added name, ""^a"" already exists."
			, cn
			);
		     rc = code;
		     goto exit;
		end;

next_change:   ;

	end;

	rc = 0;					/* All values have be obtained and reset. */

exit:	;
	if db_attributes_mgr then call pr_vals (vp);
	return;
%page;
dt:	proc (d)returns (char (6));

/* Map Multics (36 bit) date d to gcos MMDDYY. */
dcl  d                        bit(36)parm;
	     call date_time_$fstime (d, r);
	     return (mm||dd||yy);

dcl  date_time_$fstime        entry(bit(36),char(*));
dcl  r                        char(24);
dcl 1 r1 aligned based(addr(r))
,     2 mm char(2)unal
,     2 s1 char(1)unal
,     2 dd char(2)unal
,     2 s2 char(1)unal
,     2 yy char(2)unal
;
	end dt ;
%page;
get_dec_value: proc (k)returns (fixed bin);

/**	Return the numeric string that is the suffix on the
	entry name (n) converted to binary and set k-th
	attribute processed.
**/
dcl  k                        fixed bin parm;
	     if verify (name.V, "0123456789")>0 then return (0); /* Not all numeric (fail). */
	     have_attr (k) = "1"b;
	     return (fixed (name.V, 17));

	end get_dec_value ;
%page;
get_oct_value: proc (k)returns (bit (35));

/**	Return the suffix of the entry name (n) treated as
	a 12 digit octal value (the left 35 bits).
	Mark k-th attribute processed.
**/
dcl  k                        fixed bin parm;

	     v.r = "0"b;
	     do j = 1 to length (name.V);
		i = search ("01234567", substr (name.V, j, 1))-1;
		if i = -1 then return ((35)"0"b);
		va (j) = i3;
	     end;
	     have_attr (k) = "1"b;
	     return (v.r);

dcl  i                        fixed bin(35);
dcl  j                        fixed bin;

dcl 1 i_ovl aligned based(addr(i)),
    2 left33 bit(33)unal,
    2 i3     bit( 3)unal;
	end get_oct_value ;
%page;
pr_vals:	proc (p);

/* Print a gtss_file_values. */
dcl  p                        ptr parm;
	     if set_entry then do;
		ssp = addr (p -> fv.set_switch);
		call com_err_ (rc, "gtss_attributes_mgr_$set");
	     end;
	     else do;
		ssp = addr (ones);
		call com_err_ (rc, "gtss_attributes_mgr_$get");
	     end;
	     call ioa_ ("version^-^i", p -> fv.version);
	     call ioa_ ("dname^-""^a""", p -> fv.dname);
	     call ioa_ ("ename^-""^a""", p -> fv.ename);
	     call ioa_ ("new_ename^-""^a""", p -> fv.new_ename);
	     call ioa_ ("change_name^-^a", no_yes (fixed (p -> fv.change_name, 1)));
	     call ioa_ ("catalog^-^a", no_yes (fixed (p -> fv.catalog, 1)));
	     call ioa_ ("info_ptr^-^p", p);
	     a = 0;
	     a35 = p -> fv.attributes.attr;
	     if ss (0) then call ioa_ ("0. ^a mode_random^-""^1b""b", attr_name (0), p -> fv.data_flags.mode_random);
	     if ss (1) then call ioa_ ("1. ^a maxll^-^i", attr_name (1), p -> fv.data_fields.maxll);
	     if ss (2) then call ioa_ ("2. ^a curll^-^i", attr_name (2), p -> fv.data_fields.curll);
	     if ss (3) then call ioa_ ("3. ^a busy^-""^1b""b", attr_name (3), p -> fv.data_flags.busy);
	     if ss (4) then call ioa_ ("4. ^a attr^-^w", attr_name (4), a);
	     if ss (5) then call ioa_ ("5. ^a null_file^-""^1b""b", attr_name (5), p -> fv.data_flags.null_file);
	     if ss (6) then call ioa_ ("6. ^a number_allocations^-^i", attr_name (6), p -> fv.data_fields.number_allocations);
	     if ss (7) then call ioa_ ("7. ^a creation_date^-^a", attr_name (7), p -> fv.creation_date);
	     return;

dcl  a                        fixed bin(35);
dcl 1 ao aligned based(addr(a)),
    2 a35 bit(35)unal,
    2 a01 bit(01)unal;
dcl  ioa_                     entry options(variable);
dcl  no_yes                   (0:1)char(3)static int options(constant)init("no","yes");
dcl  ones                     bit(36)init((36)"1"b);
dcl  ss                       (0:36)bit(1)unal based(ssp);
dcl  ssp                      ptr;
	end pr_vals ;
%page;
tlz:	proc (c12)returns (char (12)var);

/* Trim left zeroes from c12, but retain
   one zero if all zeroes.
*/
dcl  c12                      char(12)parm;
	     r = ltrim (c12, "0");
	     if r = "" then return ("0");
	     return (r);

dcl  r                        char(12)var;
	end tlz ;
%page;
yes_or_no: proc (k)returns (bit (1));

/**	Return "1"b if suffix is "yes" and "0"b if it is "no".
	Set attribute processed.
**/
dcl  k                        fixed bin parm;
	     if name.V = "yes" then do;
		have_attr (k) = "1"b;
		return ("1"b);
	     end;
	     if name.V = "no" then
		have_attr (k) = "1"b;
	     return ("0"b);
	end yes_or_no ;
%page;
/*   Variables for gtss_attributes_mgr_:	 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  anp                      ptr init(null());
dcl  c                        fixed bin(2);
dcl  cn                       char(32)var;
dcl  code                     fixed bin(35);
dcl  com_err_                 entry options(variable);
dcl  current_number_allocations fixed bin(35)init(0);
dcl  El                       fixed bin(24);
dcl  empty                    builtin;
dcl  en                       char(32);
dcl  error_table_$action_not_performed fixed bin(35)ext;
dcl  error_table_$badpath     fixed bin(35)ext;
dcl  error_table_$bad_entry_point_name fixed bin(35)ext;
dcl  error_table_$bad_ptr     fixed bin(35)ext;
dcl  error_table_$duplicate_file_id fixed bin(35)ext;
dcl  error_table_$not_seg_type fixed bin(35)ext;
dcl  error_table_$segnamedup  fixed bin(35)ext;
dcl  error_table_$unimplemented_version fixed bin(35)ext;
dcl  file_name                (nn)char(32)aligned based(anp);
dcl  file_ptr                 ptr;
dcl  fvp                      ptr init(null());
dcl  have_attr                (0:7)bit(1);
dcl  hcs_$chname_file         entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  hcs_$initiate            entry (char(*), char(*), char(*), fixed bin(1), fixed bin(2), ptr, fixed bin(35));
dcl  hcs_$status_long         entry(char(*),char(*),fixed bin(1),ptr,ptr,fixed bin(35));
dcl  i                        fixed bin;
dcl  index                    builtin;
dcl  k                        fixed bin;
dcl  length                   builtin;
dcl  lvp                      ptr init(null());
dcl  n                        char(32)aligned;
dcl  namei                    char(32)aligned;
dcl  names_area               area(1000)init(empty());
dcl  name_index               (0:7)fixed bin;
dcl  new                      char(32)var;
dcl  Nl                       fixed bin(24);
dcl  nn                       fixed bin;
dcl  pic12                    pic "(12)9";
dcl  pic12c                   char(12)based(addr(pic12));
dcl  reverse                  builtin;
dcl  rtrim                    builtin;
dcl  search                   builtin;
dcl  set_sw                   (0:7)bit(1)based(addr(lvp->fv.set_switch));
dcl  substr                   builtin;
dcl  va                       (12)bit(3)based(addr(v));
dcl  verify                   builtin;
dcl  Vl                       fixed bin(24);

dcl 1 name aligned based(addr(namei))
,     2 E  char(El)unal
,     2 p1 char( 1)unal
,     2 N  char(Nl)unal
,     2 p2 char( 1)unal
,     2 V  char(Vl)unal
;

dcl 1 name2 aligned based(addr(namei))
,     2 EN char(Nl)unal
,     2 p2 char( 1)unal
,     2 V  char(Vl)unal
;

dcl 1 fv aligned based(fvp) like gtss_file_values;

dcl 1 v,
    2 r bit(35),
    2 f bit( 1);


dcl 1 si aligned static int like branch	/* (Must be static, caller gets info_ptr to it). */;
%page;
%include gtss_ptr_check;
%page;
%include gtss_file_values;
%page;
%include status_info;
%page;
%include gtss_db_names;
%page;
%include gtss_ext_;
     end gtss_attributes_mgr_ ;
