/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_morlnk_: proc (mcpp, increment);

/**	gtss grow a temp file.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	10/31/79 Fixed code for perm file.
 **/
dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/**

   DRL MORLNK, ADD LINKS TO TEMPORARY FILE (octal 34)


   8_________1_6_____________________

   DRL      MORLNK
   ZERO     L(n),L(fileid)

    (See TSS SYSTEM PROGRAMMER'S
         REFERENCE MANUAL DD17C, Rev. 0, July 1976
         Page 3-52)

*/

	increment = 1 ;				/* One argument */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_list_ptr = addrel (gseg, fixed (scu.ilc)+1);	/* get addres of arg_list */

/**	Obtain name of file to grow.	**/
	if L_fileid >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_morlnk_",
		4,				/* Invalid drl argument */
		"File name outside memory at (^o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	afn_ptr = addrel (gseg, L_fileid);

/**	Obtain amount to grow file.	**/
	if L_n >= gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_morlnk_",
		4,				/* Invalid drl argument */
		"Amount to grow file outside memory (^o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	n_ptr = addrel (gseg, L_n);
	request = links_to_add;
	morlnk_status = "0"b;

/**	Obtain (fn) the AFT index to the file.	**/
	call gtss_aft_$find (ascii_file_name, fn, code);
	if code = 1 then do;			/* Unknown file (i.e., not in AFT). */
	     morlnk_status = morlnk_status | "000100"b;	/* Failure of name scan (not in AFT). */
	end;


/** Permanent files should not use this derail. */
	if gtss_disk (fn).pat_body.perm then do;
	     morlnk_status = morlnk_status | "001000"b;	/* file is a permanent file */
	end;

	if request = "0"b then
	     morlnk_status = morlnk_status | "000010"b;	/* No links requested. */

	if morlnk_status then do;
	     links_obtained = "0"b;
	     return;
	end;

/**	Grow the file.	**/
	call gtss_ios_change_size_ (
	     fn
	     , fixed (request, 24)
	     , "1"b				/* size is in links */
	     , status
	     , code);

/**	adjust size field in file descriptor in attributes structure.   */
	call gtss_adjust_size_ (gtss_disk.attributes_ptr (fn));

	if status>0 then do;
	     if db_drl_morlnk then
		call com_err_ (
		code
		, "gtss_drl_morlnk_"
		, "gtss_ios_change_size_ (file ^a) status ^i"
		, ascii_file_name
		, status
		);
	     morlnk_status = morlnk_status | "010000"b;	/* link space exhausted */
	     links_obtained = "0"b;
	     return;
	end;

	links_obtained = request;
	return;

/**	Variables for gtss_drl_morlnk_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  n_ptr                    ptr init(null());
dcl  addrel                   builtin;
dcl  afn_ptr                  ptr init(null());
dcl  arg_list_ptr             ptr init(null());
dcl  ascii_file_name          char(8)based(afn_ptr);
dcl  code                     fixed bin(35);
dcl  fn                       fixed bin(24);
dcl  gseg                     ptr init(null());
dcl  request		bit(18);
dcl  status                   fixed bin(24);

dcl 1 arg_list		aligned based(arg_list_ptr)
,     2 L_n		bit(18)unal
,     2 L_fileid		bit(18)unal
;

dcl 1 n			aligned based(n_ptr)
,     2 links_to_add	bit(18)unal
,     2 fill		bit(18)unal
;

dcl 1 n_overaly		aligned based(n_ptr),
      2 morlnk_status	bit(6)unal,
      2 fill		bit(12)unal,
      2 links_obtained	bit(18)unal;

%include gtss_ext_;

%include mc;

%include gtss_ust_ext_;

%include gtss_entry_dcls;

%include gtss_dfd_ext_;

%include gtss_db_names;
     end						/* gtss_drl_morlnk_ */;
