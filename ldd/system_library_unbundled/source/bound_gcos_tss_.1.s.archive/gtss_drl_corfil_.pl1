/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_corfil_: proc (mcp, increment);

/*

   DRL CORFIL, DATA FROM/TO CORE FILE (octal 17)


   8_________1_6______

   DRL      CORFIL


   C(A)     Data location             n

   C(Q)        i                      k

   A short block of memory, called the core file, is maintained
   for each user.  It allows one subsystem to pass data  to  another
   without accessing a mass storage device.  This block of memory is
   10  words  in  length  and  may be written or read by a subsystem
   using the CORFIL derail.


   The  left  half  of  A  contains  the  location  within  the
   subsystem  that the data is to be read into or written from.  The
   right  half  of  A  contains  the  number  of  words  (n)  to  be
   transmitted.   The  value  of n must be equal to or less than 10.
   The left half of Q contains the number of the memory cell (i)  at
   which  transmission is to begin.  The memory cells are numbered 1
   through 10.  The right half  of  Q  (k)  indicates  the  type  of
   operation desired:


   k = 0 - transfer data from subsystem to memory
   k = 1 - transfer data from memory to subsystem

	Authors:	Robert J. Grimes	Created
		Albert N. Kepner	  1978
		Robert M. May
		David B. Ward

*/
						/* 	External Entries						 */


/* 	Work Variables						 */

dcl  increment fixed bin;				/* no of param words to skip */
dcl 1 a aligned,
    2 address fixed bin (17) unaligned,
    2 number_words fixed bin (17) unaligned;

dcl 1 q aligned,
    2 start_word fixed bin (17) unaligned,
    2 r_w_indicator fixed bin (17) unaligned;

dcl  buffer_ptr ptr init(null());
dcl  buffer (0:9) bit (36) unaligned based (buffer_ptr);

dcl  number_words fixed bin;
dcl  i fixed bin;
dcl  j fixed bin;

dcl (addrel, fixed, unspec, addr, divide) builtin;

/* 	P     R     O     C     E     D     U     R     E		 */


	scup = addr (mc.scu);

	increment = 0;				/* no arguements */
	unspec (a) = unspec (mc.regs.a);		/* get copy of a register */
	unspec (q) = unspec (mc.regs.q);		/* and also the q register */

/* check for valid location for the place to stuff the stuff */
	if a.address > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_corfil_",
		11,
		gtss_pnterr.err11,
		fixed (scu.ilc, 18));
	     return;
	end;
						/* check for some words to move */
	if a.number_words > 0 then do;
						/* don't allow more than 10 words to be specified */
	     if a.number_words > 10 then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_corfil_",
		     11,
		     gtss_pnterr.err11,
		     fixed (scu.ilc, 18));
		return;
	     end;
						/* check for upper bound of the buffer to be filled */
	     if (a.address+a.number_words-1) > fixed (gtss_ust.lsize.limit, 18) then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_corfil_",
		     11,
		     gtss_pnterr.err11,
		     fixed (scu.ilc, 18));
		return;
	     end;
						/* don't allow a negative start */
	     if q.start_word < 0 then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_corfil_",
		     11,
		     gtss_pnterr.err11,
		     fixed (scu.ilc, 18));
		return;
	     end;
						/* or allow more than 10 words requested */
	     if q.start_word > 10 then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_corfil_",
		     11,
		     gtss_pnterr.err11,
		     fixed (scu.ilc, 18));
		return;
	     end;
						/* if offset is > 0 then reduce to a zero start location */
	     if q.start_word > 0 then q.start_word = q.start_word - 1;
						/* calculate end location */
	     number_words = a.number_words + q.start_word-1;
						/* check for validatity */
	     if number_words > 10 then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_corfil_",
		     11,
		     gtss_pnterr.err11,
		     fixed (scu.ilc, 18));
		return;
	     end;
						/* set up pointer around users buffer */
	     buffer_ptr = addrel (
		gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_)
		, a.address);
						/* set to always start at beginning of corefile */
	     j = 0;
						/* for subsystem to core file */
	     if q.r_w_indicator = 0 then
		do i = q.start_word to number_words;
		gtss_ust.lcfil (j) = buffer (i);
		j = j+1;
	     end;
	     else
						/* for core file to subsystem */
	     do i = q.start_word to number_words;
		buffer (i) = gtss_ust.lcfil (j);
		j = j+1;
	     end;
						/* all done */
	end;

%include gtss_ust_ext_;

%include gtss_pnterr;

%include gtss_ext_;

%include mc;

%include gtss_entry_dcls;
     end gtss_drl_corfil_;
