/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_kotnow_: gtss_drl_kout_: proc (mcpp, increment);

/* Immediate (not buffered) terminal output.
   Note: gtss implements kout derail to be
   the same as kotnow.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change: Dave Ward	03/20/79 put_chars.
   Change: Bob Alvarado	08/22/79 added output char count to ust.
   Change: Dave Ward	08/19/81 %page;, do_print on error_output, entry before procs.
   Change: Dave Ward	10/07/81 Corrected fallacious pl1 statement, removed prefix include usage.
   */
dcl  increment                fixed bin parm;
dcl  mcpp                     ptr parm;
	mcp = mcpp;
%page;
/*

   DRL KOTNOW, KEYBOARD OUTPUT FROM UNFILLED BUFFER (octal 56)


   8_________1_6_____________________

   DRL      KOTNOW
   ZERO     L(tally),L(char)

   The call for KOTNOW is the same as the call for  KOUT.   The
   action  is  also  the  same,  except  that KOTNOW forces keyboard
   output from a partially filled buffer rather than  waiting  until
   the  buffer  has filled.  This feature allows users to substitute
   KOTNOW for KOUT in subsystems  with  low  output,  where  several
   messages may stack up in the buffer before its content is sent to
   the remote terminal by KOUT.


   KOTNOW  is  a  separate  entry  point  to  the  KOUT coding,
   primarily for setting a flag and providing the test and  decision
   logic  to  retain  control within the derail until the buffer has
   been emptied.


   The KOTNOW flag is tested immediately after the KOUTN  test.
   If  the flag has not been set, normal processing continues with a
   return to the subsystem.  If the flag has been set by an entry at
   KOTNOW, the buffer is emptied and the allocator notified that I/O
   is in progress.  An exit is then made to LINSRV.
   */
%page;
/*

   DRL KOUT, KEYBOARD OUTPUT (octal 2)


   8_________1_6_____________________

   DRL      KOUT
   ZERO     L(tally), L(char)

   The field L(tally) points to a driver tally word pointing in
   turn to a list of TALLY/TALLYB words that  define  each  line  of
   output  of  BCI/ASCII characters to be sent to the terminal.  The
   driver tally has the count of the line tallies in the list.  This
   procedure  allows  the  user  to  define  scattered   lines   not
   necessarily starting at word boundaries.


   It  should  be  noted that the derail processor utilizes the
   tally  words  and  that  they  are  modified  on  return  to  the
   subsystem.   Therefore,  they  must  be  refreshed  prior to each
   execution.

   The optional field L(char) points to a word containing up to
   four characters that will be appended to the end  of  the  output
   defined by each line tally.  These characters could be line feed,
   carriage  return,  etc.   If  this  field  is  not present in the
   calling sequence, characters are not  added.   If  the  field  is
   present,  the  first  character  of  zero  (000)  terminates  the
   appending  of  characters.   In  any  case,  no  more  than  four
   characters will be appended.


   Example:


   DRL     KOUT
   ZERO    DRIVER
   .
   .
   .
   DRIVER   TALLY   *+1,2
   TALLYB  CRLF,4
   TALLY   BCDMSG,16
   BCDMSG   BCI     3,THIS IS BCD TEXT
   CRLF     OCT     015012177177     CR,LF,RO,RO


   This  sequence  prints a line preceded by a carriage return,
   line feed and two rubouts.


   NOTE:  Because of timing considerations  and  character  set
   differences   between   terminal  types,  it  may  be
   necessary to follow the carriage return, or line feed
   characters,  with  a  number   of   delete   (rubout)
   characters.
   */
%page;
	increment = 1;
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	arg_ptr = addrel (gseg, fixed (scu.ilc)+1);

/* Prepare end of line character string	*/
	no_eol_chars = 0;
	if arglist.eol ^= "0"b then do;
	     if (fixed (arglist.eol)) > fixed (gtss_ust.lsize.limit, 18) then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_kotnow_",
		     4,
		     "EOL word outside memory at (^6o)",
		     fixed (scu.ilc, 18));
		return;
	     end;
	     eol_ptr = addrel (gseg, fixed (arglist.eol));
	     no_eol_chars = search (eol_chars, NUL)-1;
	     if no_eol_chars<0 then no_eol_chars = length (eol_chars);
	end;

	if arglist.tally = "0"b then do;		/* => There is no tally list. */
	     if no_eol_chars>0 then			/* Output end of line characters. */
		call output (eol_ptr, no_eol_chars);
	     return;
	end;

	if (fixed (arglist.tally)) > fixed (gtss_ust.lsize.limit, 18) then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_kotnow_",
		4,
		"Print drive tally outside memory at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;
	tally_ptr = addrel (gseg, fixed (arglist.tally));
	tally_address_ptrs = fixed (tally.address) ;
	num_tally = fixed (tally.chars);
	tally_address = fixed (tally.address) -1;
	call tally_id (tally_ptr);

	do i = 1 to num_tally;
	     if (fixed (tally_address+i)) > fixed (gtss_ust.lsize.limit, 18) then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_kotnow_",
		     4,
		     "Print tally outside memory at (^6o)",
		     fixed (scu.ilc, 18));
		return;
	     end;
	     tally_ptr = addrel (gseg, tally_address+i);
	     if (fixed (tally.address)) > fixed (gtss_ust.lsize.limit, 18) then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_kotnow_",
		     4,
		     "Tally of print string out of memory at (^6o)",
		     fixed (scu.ilc, 18));
		return;
	     end;
	     line_len = fixed (tally.chars);
	     line_ptr = addrel (gseg, fixed (tally.address));
	     if tally.type = "100"b then do;		/* ASCII input. */
		line_ptr = addr (line_buffer (fixed (tally.offset)+1));
		call tallyb_sc (tally_ptr);

print_line:	;
		call output (line_ptr, line_len);
	     end;
	     else
	     if tally.type = "000"b then do;		/* BCD input. */
		call gtss_bcd_ascii_ (
		     addr (bcd_buffer (fixed (tally.offset)+1))
		     , line_len
		     , addr (ascii_line));
		line_ptr = addr (ascii_line);
		call tally_sc (tally_ptr);
		goto print_line;
	     end;
	     else do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_kotnow_",
		     49,
		     gtss_pnterr.err49,
		     fixed (scu.ilc, 18));
		return;
	     end;

	     if no_eol_chars>0 then			/* Output end of line characters. */
		call output (eol_ptr, no_eol_chars);
	end;
	return;
%page;
nop:	entry;

/**	Switch do print flag (nop => no output). */
	do_print = ^do_print;
	return;
%page;
output:	proc (outptr, outlen);
dcl  outlen                   fixed bin (24) parm;
dcl  outptr                   ptr parm;
	     if gtss_ext_$last_k_was_out then do;
		if do_print then do;
		     call gtss_ext_$put_chars (
			iox_$user_output,
			outptr,
			outlen,
			code);
		     if code ^= 0 then do;
error_out:		;
			call gtss_abort_subsystem_
			     (mcp
			     , "gtss_drl_kotnow_"
			     , 4
			     , "unable to output to terminal"
			     );
			return;
		     end;
		end;
		no_of_chars_by_8 = no_of_chars_by_8 + divide (outlen, 8, 24);
		return;
	     end;

/* The last I/O was input which means that Multics (in LF echo mode) has
   issued an extra line feed to the terminal. */

/* We are about to do an output so set the flag. */
	     gtss_ext_$last_k_was_out = "1"b;
	     gtss_ust.lbuf.tally = "1"b;

/* Move output from user's space to automatic buffer. */
	     bufptr = addr (buffer);
	     l = outlen;
	     M = outptr -> M;

/* Find the first line feed in the buffer and change it to
   a rubout character */
	     i = verify (M, look_past_chars);
	     if i > 0 then
		if substr (M, i, 1) = LF then
		     substr (M, i, 1) = rubout;

/* Do the output */
	     if do_print then do;
		call gtss_ext_$put_chars (
		     iox_$user_output,
		     bufptr,
		     l,
		     code);
		if code ^= 0 then goto error_out;
	     end;
	     no_of_chars_by_8 = no_of_chars_by_8 + divide (l, 8, 24);
	     return;

dcl  buffer                   char (4096);
dcl  bufptr                   ptr init(null());
dcl  i                        fixed bin (24);
dcl  l                        fixed bin (24);
dcl  M                        char (l) based (addr (buffer));
dcl  rubout                   char (1) static int options (constant) init ("")  /* octal 177. */;

dcl  look_past_chars          char(3) internal static options(constant)
			   init(" ");						/* Rubout, NULL, CR */
dcl  LF                       char (1) static int options (constant) init ("
");						/* octal 012. */
	end output;
%page;
tally_id:	proc (p);

/* Procedure to update a TALLy word to simulate ID
   modification until tally runout. */

dcl  p                        ptr parm;

	     tally_ptr = p;				/* use local pointer */
	     result = fixed (address) + fixed (tally_count);
	     address = result_r18;
	     tally_count = "0"b;

dcl 1 tally based (tally_ptr) aligned,
    2 address bit (18) unal,
    2 tally_count bit (12) unal,
    2 filler bit (6) unal;
dcl  result                   fixed bin (24);
dcl  tally_ptr                ptr init(null());
dcl 1 result_ov based (addr (result)),
    2 result_l18 bit (18),
    2 result_r18 bit (18);

	end tally_id ;
%page;
tally_sc:	proc (p);

/* Procedure to update a TALLY word to simulate SC
   modification until tally runout. (Processing 6 bit BCD characters.) */

dcl  p                        ptr parm;

	     tally_ptr = p;				/* use local pointer */
	     word_address = fixed (address);
	     count = fixed (tally_count);
	     position = fixed (char_pos);
	     result = mod (position + count, 6);
	     char_pos = substr (result_overlay, 34, 3);
	     result = word_address + divide (position + count, 6, 24, 0);
	     address = substr (result_overlay, 19, 18);
	     tally_count = "0"b;

dcl  tally_ptr                ptr init(null());
dcl 1 tally based (addr (tally_ptr)) aligned,
    2 address bit (18) unal,
    2 tally_count bit (12) unal,
    2 filler bit (3) unal,
    2 char_pos bit (3) unal;
dcl  count                    fixed bin (24);
dcl  position                 fixed bin (24);
dcl  result                   fixed bin (24);
dcl  result_overlay           bit (36) aligned based (addr (result));
dcl  word_address             fixed bin (24);

	end tally_sc ;
%page;
tallyb_sc: proc (p);

/* Procedure to update a TALLYB tally word to simulate
   SC modification until tally runout. */

dcl  p                        ptr parm;

	     tally_ptr = p;				/* use local pointer */
	     new_byte_address = fixed (address||char_pos) + fixed (tally_count);
	     address = new_address;
	     char_pos = new_char_pos;
	     tally_count = "0"b;

dcl 1 tallyb based (tally_ptr) aligned,
    2 address bit (18) unal,
    2 tally_count bit (12) unal,
    2 filler bit (4) unal,
    2 char_pos bit (2) unal;

dcl  new_byte_address         fixed bin (24);
dcl  tally_ptr                ptr init(null());
dcl 1 new_byte_addres_ov based (addr (new_byte_address)) aligned,
    2 filler bit (16) unal,
    2 new_address bit (18) unal,
    2 new_char_pos bit (2) unal;

	end tallyb_sc ;
%page;
/*   Variables for gtss_drl_kotnow_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  arg_ptr                  ptr init (null ());
dcl  ascii_line               char (1000)aligned;
dcl  bcd_buffer               (1000) bit(6) unal based(line_ptr);
dcl  code                     fixed binary (35);
dcl  do_print                 bit(1)static int init("1"b);
dcl  eol_chars                char (4) aligned based (eol_ptr);
dcl  eol_ptr                  ptr init (null ());
dcl  fixed                    builtin;
dcl  gseg                     ptr init(null());
dcl  i                        fixed bin;
dcl  iox_$user_output         ptr ext static;
dcl  line_buffer              (1000)char (1)unal based (line_ptr);
dcl  line_len                 fixed bin (24);
dcl  line_ptr                 ptr init (null ());
dcl  no_eol_chars             fixed bin (24);
dcl  NUL                      char (1)static int options (constant)init (" ")	/* octal 000. */;
dcl  null                     builtin;
dcl  num_tally                fixed bin;
dcl  num_tally_ptrs           fixed binary;
dcl  search                   builtin;
dcl  substr                   builtin;
dcl  tally_address            fixed bin;
dcl  tally_address_ptrs       fixed binary;
dcl  tally_ptr                ptr init (null ());

dcl 1 arglist aligned based (arg_ptr),
    2 tally bit (18) unaligned,
    2 eol bit (18) unaligned;

dcl 1 tally aligned based (tally_ptr),
    2 address bit (18) unaligned,
    2 chars bit (12) unaligned,
    2 type bit (3) unaligned,
    2 offset bit (3) unaligned;
%page;
%include mc;
%page;
%include gtss_ext_;
%page;
%include gtss_pnterr;
%page;
%include gtss_ust_ext_;
%page;
%include gtss_entry_dcls;
     end gtss_drl_kotnow_;
