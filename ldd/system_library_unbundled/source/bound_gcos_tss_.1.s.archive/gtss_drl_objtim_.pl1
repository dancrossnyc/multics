/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_drl_objtim_: proc (mcpp, increment);

/* *	gtss check memory and time limits.

   Authors:	Robert J. Grimes	Created
                    Albert N. Kepner	  1978
                    Robert M. May
                    David B. Ward
   Changed:  Ron Barstad  06/11/82  Fixed stringsize condition on tra
   * */
dcl  mcpp ptr parm;
dcl  increment fixed bin parm;
	mcp = mcpp;

/* *

   DRL OBJTIM, PROCESSOR TIME AND CORE SIZE LIMIT (octal 57)


   8_________1_6______

   DRL      OBJTIM


   This derail causes the object-program elapsed processor time
   and program memory size to be checked  against  installation-  or
   user-specified  limits.  If the installation has not assembled or
   patched the time and size limits into TSSA or a derail DRLIMT has
   not been done, this DRL will have no effect other than  notifying
   the Executive that control is being passed to a user program.


   In  addition,  this derail exists primarily for installation
   use in setting  size  and  time  limits  for  FORTRAN  and  BASIC
   programs.   Even  if  these  limits  are  set,  they  may  not be
   satisfactory values for the subsystem  being  designed.   If  the
   user  desires  to  set a separate processor object time limit for
   the subsystem or allow the subsystem user to set one,  he  should
   use DRL DRLIMT.


   OBJTIM  sets bit 14 of .LFLG2, which makes the limits stored
   in TSSA effective for the current interaction. (The  memory  size
   limit  is  stored in .TASSZ in number of words; the time limit is
   stored in .TASTM in number of clock pulses--seconds*64000.)


   If bit 14 of .LFLG2 is  set,  TSSM  places  the  contents  of
   .TASTM  in  .LIMTR  of  the  UST.   When  OBJTIM  and  DRLIMT are
   concurrently in  effect  the  smaller  of  the  two  time  limits
   (installation- or user-specified) is placed in .LIMTR.  Each time
   through TSSM, the contents of .LIMTR is decremented until it runs
   out or the interaction ends.


   Memory  size  is  checked  in TSSL at the time of the derail
   OBJTIM and at the time of any later ADDMEM request.


   When either limit is exceeded, word .LSZTM (21 octal) of the
   subsystem data area is checked for a valid transfer  instruction.
   If  present,  TSS  action  is  as  described in Section III under
   "Subsystem Data Area  and  Fault  Vector"  (except  that  only  a
   certain  small  time  limit is given for wrapup).  Bit 34 in word
   .LSZTM is set when the size limit is exceeded; bit 35 is set when
   the time limit is exceeded.  If no valid transfer is present, TSS
   types one of the following messages and returns  to  the  calling
   level:






   064   - EXECUTE TIME LIMIT EXCEEDED

   065   - OBJECT PROGRAM SIZE LIMIT EXCEEDED


   The  time  limit  in  .LIMTR  (and  the  limit in .LIMIT, if
   present), word .LSZTM of the subsystem data area, and bit  14  of
   .LFLG2 are reset when the program terminates.

*/


/* work variables */
dcl  fixed builtin;
dcl  addr builtin;
dcl  gseg ptr init(null());
dcl  timer_manager_$cpu_call entry (fixed bin (71), bit (2), entry);
dcl  timer_manager_$reset_cpu_call entry (entry);

	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	increment = 0;				/* No arguments. */
	gtss_ust.lflg2.b14 = "1"b;			/* set bit in flagword indicating execution */

/* If user did a drl drlimt (limit non zero) then set up timer,
   but if one subsystem calls another, and it wants to set up a timer also,
   they do not have a nested timer effect. i.e. If subsystem one sets
   a 10 second timer, and subsystem two sets a 100 second timer and only
   uses 5 seconds, when control goes back to subsystem one the 100 second
   timer is still ticking away. (Strange, but GCOS does it that way.) */
	if gtss_ust_ext_$ust.gtss_ust.limit ^= 0 then do;
/* If a timer is already ticking, kill it.	*/
	     if gtss_ext_$flags.ss_time_limit_set then
		call timer_manager_$reset_cpu_call (
		gtss_fault_processor_$timer_runout);
	     call timer_manager_$cpu_call (
		divide (divide (gtss_ust_ext_$ust.gtss_ust.limit, 64, 36), 1000, 71),
		"11"b, gtss_fault_processor_$timer_runout);
	     gtss_ext_$flags.ss_time_limit_set = "1"b;
	end;

	if fixed (gtss_ust.lsize.limit, 18, 0)>gtss_install_values_$memory_limit then do;
	     gtss_spa.lsztm.b34 = "1"b;
	     if gtss_spa.lsztm.tra ^= "0"b then do;	/* Caller providing code for exceeding memory condition. */

/* *	Adjust increment parameter to cause transfer
   to caller's code.
   * */
		gtss_spa.losti.ilc = substr(gtss_spa.lsztm.tra,1,18); /* Set return address in slave prefix. */
		gtss_spa.losti.ir = "0"b;		/* Zero indicators. */
		increment = fixed (tra, 18, 0) - fixed (scu.ilc, 18, 0) -1;
		return;
	     end;

	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_objtim_",
		45,
		gtss_pnterr.err45);
	end;
	return;

%include gtss_ust_ext_;

%include gtss_ext_;

%include mc;

%include gtss_pnterr;

%include gtss_spa;

%include gtss_entry_dcls;

%include gtss_install_values_;
     end						/* gtss_drl_objtim_ */;
