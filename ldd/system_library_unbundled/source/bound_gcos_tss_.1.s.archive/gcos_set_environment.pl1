/* *************************************************************
   *                                                           *
   * Copyright, (C) Honeywell Information Systems Inc., 1982   *
   *                                                           *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *                                                           *
   * Copyright (c) 1972 by Massachusetts Institute of          *
   * Technology and Honeywell Information Systems, Inc.        *
   *                                                           *
   ************************************************************* */

gcos_set_environment: gse: proc;

/* *	Set process environment for GCOS TIME-SHARING on Multics

   Authors:	Robert J. Grimes	Created
   Albert N. Kepner	  1978
   Robert M. May
   David B. Ward
   * */

	if gse_already_called then do;
	     call com_err_ (
		0
		, "gcos_set_environment"
		, "gse can not be recursively called.^/release or new_proc if not already in gse."
		);
	     return;
	end;
	on cleanup gse_already_called = "0"b;
	gse_already_called = "1"b;

/* First-time-only initialization. */

	if ^gse_initialized then do;
	     gse_ext_$drm_rule = 0;
	     addr (gse_ext_$modes) -> mode_overlay = default_modes;
	     gse_ext_$umc_name = "";
	     gse_ext_$smc_pathname = "";
	     gse_ext_$gcos_debug_pathname = "";
	     gse_initialized = "1"b;
	end;

/* *	Obtain list of arguments pointers and lengths. * */
	call cu_$arg_count (nargs);
	if nargs>hbound (arg_p, 1) then do;
	     call com_err_ (
		0
		, "gcos_set_environment"
		, "Only ^i arguments allowed. Quitting."
		, hbound (args
		, 1)
		);
	     gse_already_called = "0"b;
	     return;
	end;
	do i = 1 to nargs;
	     call cu_$arg_ptr (i, arg_p (i), arg_l (i), code);
	     if code ^= 0 then do;
		call com_err_ (
		     code
		     , "gcos_set_environment"
		     , "Argument ^i. Quitting."
		     , i
		     );
		gse_already_called = "0"b;
		return;
	     end;
	end;
	call arguments;
	if ^argument_error then do;
	     on cleanup call record_static_changes;
	     call record_static_changes;
	end;
	if print then call print_environment_values;
	gse_already_called = "0"b;
	return;

dbpn:	entry (dpn);

/* Return pathname of debug file. */
dcl  dpn                      char(168)var parm;
	dpn = rtrim (gse_ext_$gcos_debug_pathname);
	return;

set_dbpn:	entry (new_dpn);

/* Reset pathname of debug file. */
dcl  new_dpn                  char(168)parm;
	gse_ext_$gcos_debug_pathname = new_dpn;
	return;

arguments: proc;

/* Initialization for processing arguments */
	     usage_flag, argument_error = "0"b;
	     drm_rule = 0;
	     gcos_debug_pathname = "";
	     expanded_table_name = "";
	     string (modes_given) = "0"b;
	     print = "0"b;
	     reset = "0"b;
	     smc_pathname = "";
	     umc_name = "";
	     internal_modes = mode_array;

	     if nargs <= 0 then do;
		usage_flag, argument_error = "1"b;
		call com_err_ (
		     error_table_$noarg
		     , "gcos_set_environment"
		     );
	     end;

	     do i = 1 to nargs;
		pp = arg_p (i);
		lp = arg_l (i);

/* Make sure we have a control argument. */
		if lp <= 0 then go to end_arg_case;
		if substr (option_arg, 1, 1) ^= "-" then do;
unrecognized_arg:	     ;
		     usage_flag, argument_error = "1"b;
		     call com_err_ (
			error_table_$bad_arg
			, "gcos_set_environment"
			, """^a"""
			, option_arg
			);
		     go to end_arg_case;
		end;
		j = min (length (arg), lp-1);
		arg = substr (option_arg, 2, j);

/* Perform a binary search for this control argument over the table T */
		f = 1;
		l = hbound (T, 1);
		do while (f <= l);
		     m = divide (f+l, 2, 24, 0);
		     if arg = T (m) then do;
			j = Transfer (m);
			go to arg_case (j);
		     end;
		     if arg < T (m) then l = m-1;
		     else f = m + 1;
		end;
		go to unrecognized_arg;

arg_case (1):	;				/* -directory_mapping */

		if drm_rule ^= 0 then do;
		     argument_error = "1"b;
		     call com_err_ (
			error_table_$inconsistent
			, "gcos_set_environment"
			, "^/The -directory_mapping control argument may not"
			||"^/occur more than once in the argument list."
			);
		     i = i + 1;			/* move on to next argument */
		     go to end_arg_case;
		end;

		if i < nargs then do;
		     pp2 = arg_p (i+1);
		     lp2 = arg_l (i+1);
		     if lp2 <= 0 then go to missing_drm;
		     if substr (next_arg, 1, 1) = "-"
		     then go to missing_drm;
		     do j = 1 to hbound (drm_args, 1);
			if drm_args (j) = next_arg then do;
			     drm_rule = j;
			     i = i + 1;		/* move on to next argument */
			     go to end_arg_case;
			end;
		     end;
		     usage_flag, argument_error = "1"b;
		     call com_err_ (
			error_table_$bad_arg
			, "gcos_set_environment"
			, "^/The -directory_mapping control argument must be"
			||"^/followed by ""umc"", ""smc"", or ""wd""--not ""^a""."
			, next_arg
			);
		     i = i + 1;			/* move on to next argument */
		     go to end_arg_case;
		end;
missing_drm:	;
		usage_flag, argument_error = "1"b;
		call com_err_ (
		     error_table_$noarg
		     , "gcos_set_environment"
		     , "^/The -directory_mapping control argument must be"
		     ||"^/followed by ""umc"",""smc"", or ""wd""."
		     );
		go to end_arg_case;

arg_case (2):	;				/* -gcos_debug_pathname */

		if gcos_debug_pathname ^= "" then do;
		     argument_error = "1"b;
		     call com_err_ (
			error_table_$inconsistent
			, "gcos_set_environment"
			, "The -gcos_debug_pathname control argument may not"
			||"^/occur more than once in the argument list."
			);
		     i = i + 1;			/* move on to next argument */
		     go to end_arg_case;
		end;

		if i < nargs then do;
		     pp2 = arg_p (i+1);
		     lp2 = arg_l (i+1);
		     if lp2 <= 0 then go to default_gdbpn;
		     if substr (next_arg, 1, 1) = "-"
		     then go to default_gdbpn;
		     gcos_debug_pathname = next_arg;
		     if lp2 > 168 then do;
			argument_error = "1"b;
			call com_err_ (
			     error_table_$pathlong
			     , "gcos_set_environment"
			     , """^a"""
			     , next_arg
			     );
		     end;
		     i = i + 1;			/* move on to next argument */
		     go to end_arg_case;
		end;

default_gdbpn:	;

/* Default gcos_debug control file is Person_id.gdb in user's home directory. */
		call default_debug_pathname;
		go to end_arg_case;

arg_case (3):	;				/* -modes */

		if i < nargs then do;
		     pp2 = arg_p (i+1);
		     lp2 = arg_l (i+1);
		     if lp2 <= 0 then go to modes_missing;
		     if substr (next_arg, 1, 1) = "-" then goto modes_missing;
		     j = 1;
		     remaining_modes = next_arg;
		     do while (j > 0);
			j = index (remaining_modes, ",");
			if j = 0 then this_mode = remaining_modes;
			else do;
			     this_mode = substr (remaining_modes, 1, j-1);
			     remaining_modes = substr (remaining_modes, j+1);
			end;
			if this_mode = ""
			then mode_name = "";
			else do;
			     mode_switch = (substr (this_mode, 1, 1) ^= "^");
			     if mode_switch
			     then mode_name = this_mode;
			     else mode_name = substr (this_mode, 2);
			end;
			do k = 1 to hbound (modes, 1);
			     if mode_name = modes (k) then do;
				if modes_given (k) then do;
				     argument_error = "1"b;
				     call com_err_ (
					error_table_$inconsistent
					, "gcos_set_environment"
					, "^/Mode ""^a"" is repeated in modes_string."
					, mode_name
					);
				end;
				else modes_given (k) = "1"b;
				internal_modes (k) = mode_switch;
				go to next_mode;
			     end;
			end;
			argument_error = "1"b;
			call com_err_ (
			     error_table_$bad_arg
			     , "gcos_set_environment"
			     , "^/Mode ""^a"" not recognized."
			     ||"^/Valid modes are: ast,drl,gdb,mcmd,mquit,ss."
			     , this_mode
			     );
next_mode:		;
		     end;
		     i = i + 1;			/* move on to next argument */
		     go to end_arg_case;
		end;
modes_missing:	;
		usage_flag, argument_error = "1"b;
		call com_err_ (
		     error_table_$noarg
		     , "gcos_set_environment"
		     , "^/The -modes control argument must be followed by a modes_string."
		     ||"^/Valid modes are: ast,drl,gdb,mcmd,mquit,ss."
		     );
		go to end_arg_case;

arg_case (4):	;				/* -print */
		print = "1"b;
		go to end_arg_case;

arg_case (5):	;				/* -reset */
		reset = "1"b;
		go to end_arg_case;

arg_case (6):	;				/* -smc_pathname */

		if smc_pathname ^= "" then do;
		     argument_error = "1"b;
		     call com_err_ (
			error_table_$inconsistent
			, "gcos_set_environment"
			, "^/The -smc_pathname control argument may not occur"
			||"^/more than once in the argument list."
			);
		     i = i + 1;			/* move on to next argument */
		     go to end_arg_case;
		end;
		if i < nargs then do;
		     pp2 = arg_p (i + 1);
		     lp2 = arg_l (i + 1);
		     if lp2 <= 0 then go to missing_spn;
		     if substr (next_arg, 1, 1) = "-"
		     then go to missing_spn;
		     smc_pathname = next_arg;
		     if lp2 > 168 then do;
			argument_error = "1"b;
			call com_err_ (
			     error_table_$pathlong
			     , "gcos_set_environment"
			     , """^a"""
			     , next_arg
			     );
		     end;
		     i = i + 1;			/* move on to next argument */
		     go to end_arg_case;
		end;

missing_spn:	;
		usage_flag, argument_error = "1"b;
		call com_err_ (
		     error_table_$noarg
		     , "gcos_set_environment"
		     , "^/The -smc_pathname control argument must be"
		     ||"^/followed by the SMC directory name."
		     );
		go to end_arg_case;

arg_case (7):	;				/* -umc_name */

		if umc_name ^= "" then do;
		     argument_error = "1"b;
		     call com_err_ (
			error_table_$inconsistent
			, "gcos_set_environment"
			, "^/The -umc_name control argument may not"
			||"^/occur more than once in the argument list."
			);
		     i = i + 1;			/* move on to next argument */
		     go to end_arg_case;
		end;
		if i < nargs then do;
		     pp2 = arg_p (i + 1);
		     lp2 = arg_l (i + 1);
		     if lp2 <= 0 then go to missing_unm;
		     if substr (next_arg, 1, 1) = "-"
		     then go to missing_unm;
		     umc_name = translate (next_arg,
			"abcdefghijklmnopqrstuvwxyz",
			"ABCDEFGHIJKLMNOPQRSTUVWXYZ");
		     if lp2 > 12 then do;
			argument_error = "1"b;
			call com_err_ (
			     error_table_$bigarg
			     , "gcos_set_environment"
			     , "^/The umc_name argument may not exceed 12 characters."
			     );
		     end;
		     i = i + 1;			/* move on to next argument */
		     go to end_arg_case;
		end;

missing_unm:	;
		usage_flag, argument_error = "1"b;
		call com_err_ (
		     error_table_$noarg
		     , "gcos_set_environment"
		     , "^/The -umc_name control argument must"
		     ||"^/be followed by the UMC name."
		     );
end_arg_case:	;
	     end;


/* Make sure all necessary control arguments have been given for the
   directory mapping_rule specified (if any).  Also check the user's access to the
   root directory implied by the mapping_rule. */
	     if argument_error then go to end_drm_case;
	     go to drm_case (drm_rule);

drm_case (0):  ;					/* no mapping rule */
	     go to end_drm_case;

drm_case (1):  ;					/* umc_dir_mode */
	     dir_name = ">udd>"||umc_name;
	     root_dir = ">udd>"||rtrim (umc_name)||">"||rtrim (umc_name);
	     if umc_name = "" then do;
		argument_error = "1"b;
		call com_err_ (
		     error_table_$inconsistent
		     , "gcos_set_environment"
		     , "^/When -directory_mapping umc is specified the"
		     ||"^/-umc_name control argument must also be given."
		     );
		go to end_drm_case;
	     end;

check_root:    ;

/* Validate the existence of and user's access to the root directory for
   umc_dir_mode or smc_dir_mode. */
	     entryname = umc_name;
	     call hcs_$get_user_effmode (dir_name, entryname, "", (get_ring_ ()), access_mode, code);

/* Make sure user has at least status access to root directory. */
	     if code = 0 & access_mode < 8
	     then code = error_table_$moderr;
	     if code ^= 0 then do;
		argument_error = "1"b;
		call com_err_ (
		     code
		     , "gcos_set_environment"
		     , "^/^a"
		     , root_dir
		     );
	     end;

	     go to end_drm_case;

drm_case (2):  ;					/* working_dir_mode */
	     go to end_drm_case;

drm_case (3):  ;					/* smc_dir_mode */
	     root_dir = rtrim (smc_pathname)||">"||rtrim (umc_name);
	     call absolute_pathname_ (smc_pathname, dir_name, code);
	     if code ^= 0 then do;
		argument_error = "1"b;
		call com_err_ (
		     code
		     , "gcos_set_environment"
		     , "^/^a"
		     , rtrim (smc_pathname)
		     );
		go to end_drm_case;
	     end;
	     if umc_name = "" | smc_pathname = "" then do;
		argument_error = "1"b;
		call com_err_ (
		     error_table_$inconsistent
		     , "gcos_set_environment"
		     , "^/When -directory_mapping smc is specified the"
		     ||"^/-smc_pathname and -umc_name control arguments"
		     ||"^/must be given."
		     );
		go to end_drm_case;
	     end;
	     go to check_root;
end_drm_case:  ;
	     if reset then do;
		if string (modes_given) then do;
		     argument_error = "1"b;
		     call com_err_ (
			error_table_$inconsistent
			, "gcos_set_environment"
			, "^/The -modes and -reset control arguments are mutually exclusive."
			);
		end;
		else string (internal_modes) = default_modes;
	     end;
	     if gcos_debug_pathname ^= "" |
	     (modes_given (3) & internal_modes (3))
	     then do;
		if gcos_debug_pathname = ""
		then if gse_ext_$gcos_debug_pathname = ""
		     then call default_debug_pathname;
		     else gcos_debug_pathname = gse_ext_$gcos_debug_pathname;
		call expand_pathname_$add_suffix (gcos_debug_pathname,
		     "gdb",
		     dir_name,
		     entryname,
		     code);
		if code ^= 0 then do;
		     argument_error = "1"b;
		     call com_err_ (
			code
			, "gcos_set_environment"
			, "^/^a"
			, rtrim (gcos_debug_pathname)
			);
		     go to end_debug_code;
		end;
		expanded_table_name = rtrim (dir_name)||">"||entryname;

/* Create the break table if it does not already exist. */
		call hcs_$make_seg (dir_name,
		     entryname,
		     "",
		     10,				/* rw access */
		     seg_ptr,
		     code);
		if code = 0
		then do;
		     call ioa_ ("gcos_set_environment:  Break table created.^/^a",
			rtrim (expanded_table_name));
		     call hcs_$truncate_seg (seg_ptr, 0, code);
		     if code ^= 0 then do;
			argument_error = "1"b;
			call com_err_ (
			     code
			     , "gcos_set_environment"
			     , "^/^a"
			     , rtrim (expanded_table_name)
			     );
			go to end_debug_code;
		     end;
		end;
		else if seg_ptr = null ()
		then do;
		     argument_error = "1"b;
		     call com_err_ (
			code
			, "gcos_set_environment"
			, "^/^a"
			, rtrim (expanded_table_name)
			);
		     go to end_debug_code;
		end;

/* Make sure user has read and write access to break table. */
		call hcs_$fs_get_mode (seg_ptr,
		     access_mode,
		     code);
		if code ^= 0 then do;
		     argument_error = "1"b;
		     call com_err_ (
			code
			, "gcos_set_environment"
			, "^/^a"
			, rtrim (expanded_table_name)
			);
		     go to end_debug_code;
		end;
		if ^ access_mode_overlay.read |
		^access_mode_overlay.write then do;
		     argument_error = "1"b;
		     call com_err_ (
			code
			, "gcos_set_environment"
			, "^/^a^/The user must have read and write access on the break table segment.",
			rtrim (expanded_table_name));
		end;
end_debug_code:	;
	     end;
	     if usage_flag then
		call ioa_$ioa_switch (
		iox_$error_output
		, "Usage: gcos_set_environment {-directory_mapping [umc|smc|wd]}"
		||"^/^5x{-gcos_debug_pathname path} {-modes modes_string} {-print} {-reset}"
		||"^/^5x{-smc_pathname path} {-umc_name name}"
		||"^2/At least 1 argument is required."
		);
	end					/* arguments */;

default_debug_pathname: proc;

/* Default gcos_debug control file is Person_id.gdb in user's home directory. */

dcl  p1                       char (22);
dcl  p2                       char (9);
	     call user_info_$whoami (p1, p2, "");
	     Person_id = rtrim (p1);
	     call user_info_$homedir (gcos_debug_pathname);
	     gcos_debug_pathname = rtrim (gcos_debug_pathname)||">"||Person_id||".gdb";
	end					/* default_debug_pathname */;

print_environment_values: proc;
	     do i = 1 to hbound (mode_array, 1);
		mode_name = modes (i);
		if mode_array (i)
		then this_mode = mode_name;
		else this_mode = "^"||mode_name;
		if i = 1 then remaining_modes = this_mode;
		else remaining_modes = remaining_modes||","||this_mode;
	     end;

	     call ioa_ (
		"^/Current GCOS environment values:"
		||"^/^5x-modes ^a"
		||"^/^5x-directory_mapping ^a"
		, remaining_modes
		, drm_args (gse_ext_$drm_rule)
		);
	     if gse_ext_$drm_rule = 3
	     then call ioa_ ("^5x-smc_pathname ^a", rtrim (gse_ext_$smc_pathname));
	     if gse_ext_$drm_rule = 1 | gse_ext_$drm_rule = 3
	     then call ioa_ ("^5x-umc_name ^a", rtrim (gse_ext_$umc_name));
	     if gse_ext_$gcos_debug_pathname ^= ""
	     then call ioa_ ("^5x-gcos_debug_pathname ^a", rtrim (gse_ext_$gcos_debug_pathname));
	end;					/* print_environment_values */

record_static_changes: proc;
	     if drm_rule ^= 0 then gse_ext_$drm_rule = drm_rule;
	     mode_array = internal_modes;
	     if umc_name ^= "" then gse_ext_$umc_name = umc_name;
	     else if umc_name = "" & drm_rule = 2 then gse_ext_$umc_name = "";
	     if smc_pathname ^= "" then gse_ext_$smc_pathname = smc_pathname;
	     if expanded_table_name ^= "" then gse_ext_$gcos_debug_pathname = expanded_table_name;
	     gse_already_called = "0"b;
	end;					/* record_static_changes */

/* *	Variables for gse: * */
dcl  absolute_pathname_       entry (char (*), char (*), fixed bin (35));
dcl  access_mode              fixed bin (5);
dcl  arg                      char (40);
dcl  argument_error           bit (1);
dcl  cleanup                  condition;
dcl  code                     fixed bin (35);
dcl  com_err_                 entry options (variable);
dcl  cu_$arg_count            ext entry (fixed bin (24));
dcl  cu_$arg_ptr              ext entry (fixed bin (24), pointer, fixed bin (24), fixed bin (35));
dcl  default_modes            bit (6) int static options (constant) init ("100000"b);						/* ast mode is on by default--others off */
dcl  dir_name                 char (168);
dcl  drm_args                 (0:3) char (7) int static options (constant) init ("not_set", "umc", "wd", "smc");
dcl  drm_rule                 fixed bin (24);
dcl  entryname                char (32);
dcl  error_table_$bad_arg     fixed bin (35) ext;
dcl  error_table_$bigarg      fixed bin (35) ext;
dcl  error_table_$inconsistent fixed bin (35) ext;
dcl  error_table_$mdc_no_access fixed bin (35) ext;
dcl  error_table_$moderr      fixed bin (35) ext;
dcl  error_table_$noarg       fixed bin (35) ext;
dcl  error_table_$pathlong    fixed bin (35) ext;
dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  expanded_table_name      char (168);
dcl  f                        fixed bin (24);
dcl  gcos_debug_pathname      char (168);
dcl  get_ring_                entry returns (fixed bin (3));
dcl  gse_already_called       bit (1) static int init ("0"b);
dcl  gse_initialized          bit (1) static int init ("0"b);
dcl  hcs_$fs_get_mode         entry (ptr, fixed bin (5), fixed bin (35));
dcl  hcs_$get_user_effmode    entry (char (*), char (*), char (*), fixed bin,
     fixed bin (5), fixed bin (35));
dcl  hcs_$make_seg            entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$truncate_seg        entry (ptr, fixed bin (18), fixed bin (35));
dcl  i                        fixed bin (24);
dcl  internal_modes           (6) bit (1) int unal automatic;
dcl  ioa_                     entry options (variable);
dcl  ioa_$ioa_switch          entry options (variable);
dcl  iox_$error_output        ext ptr;
dcl  j                        fixed bin (24);
dcl  k                        fixed bin (24);
dcl  l                        fixed bin (24);
dcl  lp                       fixed bin (24);
dcl  lp2                      fixed bin (24);
dcl  m                        fixed bin (24);
dcl  mode_array               (6) bit (1) unal based (addr (gse_ext_$modes));
dcl  mode_name                char (10) varying;
dcl  mode_overlay             bit (6) unal based (addr (gse_ext_$modes));
dcl  mode_switch              bit (1);
dcl  modes_given              (6) bit (1) unal;
dcl  nargs                    fixed bin (24);
dcl  next_arg                 char (lp2) based (pp2);
dcl  option_arg               char (lp) based (pp);
dcl  pp                       ptr;
dcl  pp2                      ptr;
dcl  print                    bit (1);
dcl  Person_id                char (22) varying;
dcl  remaining_modes          char (60) varying;
dcl  reset                    bit (1);
dcl  root_dir                 char (168) varying;
dcl  seg_ptr                  ptr;
dcl  smc_pathname             char (168);
dcl  this_mode                char (11) varying;
dcl  umc_name                 char (12) int automatic;
dcl  usage_flag               bit (1);
dcl  user_info_$homedir       entry (char (*));
dcl  user_info_$whoami        entry (char (*), char (*), char (*));

dcl 1 access_mode_overlay aligned based (addr (access_mode)),
    2 fill bit (32) unal,
    2 read bit (1) unal,
    2 execute bit (1) unal,
    2 write bit (1) unal,
    2 fill2 bit (1) unal;

dcl  modes                    (6) char (10) varying int static options (constant)
     init ("ast", "drl", "gdb", "mcmd", "mquit", "ss");

dcl  T                        (13) char (20) int static options (constant) init (	/* This list must be ordered by the ascii collating seq. */
						/* The ordering is needed for binary search. */
     "directory_mapping",				/* arg_case 1 */
     "drm",					/* arg_case 1 */
     "gcos_debug_pathname",				/* arg_case 2 */
     "gdbpn",					/* arg_case 2 */
     "modes",					/* arg_case 3 */
     "pr",					/* arg_case 4 */
     "print",					/* arg_case 4 */
     "reset",					/* arg_case 5 */
     "rs",					/* arg_case 5 */
     "smc_pathname",				/* arg_case 6 */
     "spn",					/* arg_case 6 */
     "umc_name",					/* arg_case 7 */
     "unm")					/* arg_case 7 */
     ;

dcl  Transfer                 (13) fixed bin (24) int static options (constant) init (
     1,						/* -directory_mapping */
     1,						/* -drm */
     2,						/* -gcos_debug_pathname */
     2,						/* -gdbpn */
     3,						/* -modes */
     4,						/* -pr */
     4,						/* -print */
     5,						/* -reset */
     5,						/* -rs */
     6,						/* -smc_pathname */
     6,						/* -spn */
     7,						/* -umc_name */
     7)						/* -unm */
     ;

dcl 1 args (300),
    2 arg_p ptr,
    2 arg_l fixed bin (24);

%include gse_ext_;
     end						/* gse */;
