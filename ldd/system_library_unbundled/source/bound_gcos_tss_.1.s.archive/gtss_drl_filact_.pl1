/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_filact_: proc (mcp, increment);

/**	gtss permanent file facilities

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	02/24/79 $db debug switch.
   Changed: Bob Alvarado      07/22/79 added call to funct08_
   Changed: Dave Ward         1981     sorted dcl, added %page
**/

/**

   DRL FILACT, PERMANENT FILE ACTIVITIES (octal 36)

   Grouped under DRL FILACT are the  following  permanent  file
   functions:

   Create Catalog (CC)
   Create File (CF)
   Access File (AF)
   Purge Catalog (PC)
   Purge File (PF)
   Release File (RF)
   Modify Catalog (MC)
   Modify File (MF)
   Special Access to Relocatable Subroutine Library

   They  are differentiated by a function number that is passed
   in the upper half of word 3 of the  calling  sequence.   The  DRL
   FILACT  handles all permanent file requests with the exception of
   file deaccesses.  These are handled by DRL RETFIL.

    (See TSS SYSTEM PROGRAMMER'S
         REFERENCE MANUAL DD17C, Rev. 0, July 1976
         Page 3-36)

**/
%page;
/*		P R O C E D U R E 			*/

	scup = addr (mc.scu);			/* Get the system conditions */

	high_b = gtss_ust.lsize.limit;		/* Highest memory offset available. */
	high_i = fixed (high_b, 18);			/* (also as fixed binary) */
	increment = 2;				/* All routines have two filact_args */

/**	Obtain pointer to GCOS caller's "memory"	**/
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);

/**	Obtain filact derail calling sequence parameters.		**/
	if ((fixed (scu.ilc, 18)+1) < low_i) |
	((fixed (scu.ilc, 18)+2)>high_i) then do;	/* Outside of memory. */
return_err4:   ;
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_filact_"
		, 4
		, gtss_pnterr.err4
		, fixed (scu.ilc, 18)
		);
	     goto ret;
	end;
	arg_ptr = addrel (gseg, fixed (scu.ilc, 18)+1);

/**	Assure that the filact function number is in range.	**/
	if (Function_number >= lbound (function, 1)) & (Function_number <= hbound (function, 1)) then do;
	     if have_buffer (Function_number) then do;


/**	Verify caller's buffer within acceptable memory.	**/
		if (every_entry.L_buffer<low_b) |
		((fixed (every_entry.L_buffer, 18) +size (callers_buffer)-1) > high_i) then goto return_err4;

/**	Assure the caller's arg list does not fall within his buffer.	**/
		if (every_entry.L_arglist >= every_entry.L_buffer) &
		((fixed (every_entry.L_arglist, 18)+1) < (fixed (every_entry.L_buffer, 18) + size (callers_buffer))) then goto return_err4;

		buffer_ptr = addrel (gseg, every_entry.L_buffer);
		unspec (callers_buffer) = "0"b;	/* Zero caller's buffer. */

	     end;
	     else buffer_ptr = null ();

	     if db_drl_filact then
		call gtss_dump_filact_args_ (arg_ptr);
	     goto function (Function_number);		/* goto the appropriate function processor */


	end;
%page;
/*		NEVER IMPLEMENTED			*/
function (00): ;
	call gtss_abort_subsystem_ (
	     mcp
	     , "gtss_drl_filact_"
	     , 30
	     , gtss_pnterr.err30
	     , fixed (scu.ilc, 18)
	     , Function_number
	     );

ret:	;

	return;

/*		NOT IMPLEMENTED FUNCTIONS		*/
function (01): ;

	call gtss_abort_subsystem_ (
	     mcp
	     , "gtss_drl_filact_"
	     , 0
	     , gtss_pnterr.err103
	     , Function_number
	     );
	return;

/* 		(CF) Create Catalog		*/
function (02): ;

	call gtss_filact_funct02_ (
	     mcp
	     , high_b
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;

/*		(CF) Create File			*/
function (03): ;

	call gtss_filact_funct03_ (
	     mcp
	     , high_b
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;

/*		(AF) Access File			*/
function (04): ;

	call gtss_filact_funct04_ (
	     mcp
	     , high_b
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;

/*		Access Subroutine Libraries		*/
function (05): ;

	call gtss_filact_funct05_ (
	     mcp
	     , high_b
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;

function (06): ;
	goto function (00);

function (07): ;
	goto function (00);


/*	(PC) Purge Catalog.	*/
function (08): ;
	call gtss_filact_funct08_ (
		mcp
		, high_b
		, gseg
		, arg_ptr
		, buffer_ptr
		, code
		);
	if code = 4 then goto return_err4;
	return;


/*	(PF) Purge File.	*/
function (09): ;
	goto function (22);


/*		(MC) Modify Catalog			*/
function (10): ;

	call gtss_filact_funct10_ (
	     mcp
	     , high_b
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;

/*		(MF) Modify File			*/
function (11): ;

	call gtss_filact_funct11_ (
	     mcp
	     , high_b
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;

function (12): ;
	goto function (01);

function (13): ;
	goto function (01);

/*		System Master Catalog Query		*/
function (14): ;

	call gtss_filact_funct14_ (
	     mcp
	     , high_b
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;

function (15): ;
	goto function (01);

function (16): ;
	goto function (01);

function (17): ;
	goto function (01);

/*		Get Current			*/
function (18): ;

	call gtss_filact_funct18_ (
	     mcp
	     , high_b
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;

/*		Get First			*/
function (19): ;

	call gtss_filact_funct19_ (
	     mcp
	     , (high_b)
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;

function (20): ;
	goto function (01);

function (21): ;

	call gtss_filact_funct21_ (
	     mcp
	     , high_b
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;


/*	(RF) Release File.	*/
function (22): ;

	call gtss_filact_funct22_ (
	     mcp
	     , high_b
	     , gseg
	     , arg_ptr
	     , buffer_ptr
	     , code
	     );
	if code = 4 then goto return_err4;
	return;
%page;
/** Declarations for gtss_drl_filact_:
     IDENTIFIER		ATTRIBUTES	**/
dcl  arg_ptr                  ptr init(null());
dcl  code                     fixed bin(35);
dcl  gseg                     ptr init(null());
dcl  gtss_dump_filact_args_	entry(ptr);
dcl  high_b                   bit(18);
dcl  high_i                   fixed bin(18)aligned;
dcl  increment                fixed bin(24)parm;
dcl  lbound                   builtin;
dcl  low_b                    bit(18)aligned static int options(constant)init("000147"b3) /* 103 dec. */;
dcl  low_i                    fixed bin(18)aligned static int options(constant)init(103);
dcl  null			builtin;
dcl  size                     builtin;
%page;
dcl  1 every_entry		aligned based(arg_ptr)
,      3 zero		bit(18)unal
,      3 L_arglist		bit(18)unal
,      3 Function_number	fixed bin(17)unal
,      3 L_buffer		bit(18)unal;

dcl  have_buffer              (00:22)bit(1)static int options(constant)init(
  /* 00 */	"0"b
, /* 01 */	"0"b
, /* 02 */	"1"b
, /* 03 */	"1"b
, /* 04 */	"1"b
, /* 05 */	"0"b
, /* 06 */	"0"b
, /* 07 */	"0"b
, /* 08 */	"1"b
, /* 09 */	"1"b
, /* 10 */	"1"b
, /* 11 */	"1"b
, /* 12 */	"0"b
, /* 13 */	"0"b
, /* 14 */	"1"b
, /* 15 */	"0"b
, /* 16 */	"0"b
, /* 17 */	"0"b
, /* 18 */	"1"b
, /* 19 */	"1"b
, /* 20 */	"0"b
, /* 21 */	"1"b
, /* 22 */	"1"b

);
%page;
%include gtss_ust_ext_;
%page;
%include gtss_ext_;
%page;
%include gtss_pnterr;
%page;
%include mc;
%page;
%include gtss_entry_dcls;
%page;
%include gtss_FMS_catalog;
%page;
%include gtss_db_names;
     end						/* gtss_drl_filact_ */;
