/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_drl_pasdes_: proc (mcpp, increment);

/** 	Pass aft names(s) and file description(s) to caller.

   Author:	Dave Ward			06/02/78
   Authors:	Robert J. Grimes	Created
                    Albert N. Kepner	  1978
                    Robert M. May
                    David B. Ward
   Change		Paul Benjamin	09/28/79	Change behavior when L(max) <= 20 or max = 0
    **/
dcl  mcpp ptr parm;
dcl  increment fixed bin (24)parm;

/* *
   DRL PASDES, PASS AFT FILE NAMES AND DESCRIPTIONS (octal 44)

   8_________1_6_____________________

   DRL      PASDES
   ZERO     L(buff),L(max) or 0
   0 => pass all aft names.

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17B, Rev. 0, July 1976
   Page 3-18)

*/


	mcp = mcpp;				/* Set local value. */
	increment = 1;				/* one arguement */
	scup = addr (mc.scu);

/* *	Obtain pointer to caller's "memory".	* */
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);

/* *	Obtain pointer to 1 word drl argument list.	* */
	arg_ptr = addrel (gseg, fixed (scu.ilc)+1);

/* *	Check location of caller's buffer.	* */
	if arglist.buffer_offset > gtss_ust.lsize.limit then do;
	     call gtss_abort_subsystem_ (mcp,
		"gtss_drl_pasdes_",
		4,
		"Argument outside bounds at (^6o)",
		fixed (scu.ilc, 18));
	     return;
	end;

/* *	Set pointer to caller's buffer.	* */
	buffer_ptr = addrel (gseg, fixed (arglist.buffer_offset));

	if arglist.num_files_offset = "0"b then num_files = hbound (aft_entry, 1); /* All aft names. */
	else if arglist.num_files_offset <= "000000000000010100"b /* loc <= aft limit */
	then num_files = bin (arglist.num_files_offset, 17, 0); /* must mean number of files */
	else do;					/* Obtain number of files word. */

/* *	Check location of number of files word. * */
	     if arglist.num_files_offset > gtss_ust.lsize.limit then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_pasdes_",
		     4,
		     "Offset to number files out of memory at (^6o)",
		     fixed (scu.ilc, 18));
		return;
	     end;

/* *	Obtain pointer to number files word.	* */
	     number_files_ptr = addrel (gseg, arglist.num_files_offset);

/* *	Set local value.		* */
	     num_files = number_files.max_n;
	     if num_files = 0 then num_files = hbound (aft_entry, 1); /* all files */
	end;

/* *	Move names from aft to caller's buffer.		* */
	aftx = gtss_ext_$aft.first_added;		/* Index to aft_entry. */
	n = 0;					/* Number of names moved. */
	do while ((aftx>0)& (n<num_files));
	     n = n+1;
	     buffer.aft (n).name = aft_entry (aftx).altname;
	     buffer.aft (n).desc =
		unspec (gtss_disk.attributes_ptr (aftx) -> gtss_file_attributes.descriptor);
	     aftx = aft_entry (aftx).next_add;		/* Link to next name added to aft. */
	end;

/* *	Note: No check is made that there were num_files in aft.
   * */

	buffer.number = n;				/* Record number of names moved. */

	return;

/*		external definitions	*/


/*		work variables		*/

dcl  i fixed bin;
dcl  num_files fixed binary;
dcl  gseg ptr init(null());
dcl  aftx fixed bin (24);
dcl  n fixed bin (24);

dcl  arg_ptr ptr ;
dcl 1 arglist aligned based (arg_ptr),
    2 buffer_offset bit (18) unaligned,
    2 num_files_offset bit (18) unaligned;

dcl  buffer_ptr ptr init(null());
dcl 1 buffer aligned based (buffer_ptr),
    2 number fixed binary (35),
    2 aft (hbound (aft_entry, 1)),
      3 name char (8),
      3 desc bit (36);

dcl  number_files_ptr ptr init(null());
dcl 1 number_files aligned based (number_files_ptr),
    2 max_n fixed bin (17)unal,
    2 fill1 bit (18)unal;

dcl (addrel, addr, string, fixed, null) builtin;

%include gtss_ust_ext_;

%include	gtss_file_attributes;

%include	gtss_dfd_ext_;

%include	gtss_ext_;

%include	mc;

%include gtss_entry_dcls;
     end gtss_drl_pasdes_;
