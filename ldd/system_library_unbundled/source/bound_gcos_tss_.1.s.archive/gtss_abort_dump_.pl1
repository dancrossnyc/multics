/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_abort_dump_: proc (drl_abort_code);

/* This gcos error message will
   be printed out on return,
   but only if abort is due to DRL ABORT. */

/**	gtss abort dump

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   Change:  Dave Ward	08/03/79 Revised open call.
   Change:  Dave Ward	10/31/79 Exit for record quota overflow.
   **/
dcl  drl_abort_code           fixed bin (18) parm;
dcl  size_change              fixed bin (24);
	drl_abort_code = 35;			/* DRL ABORT -- ABORT FILE WRITTEN */
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	call hcs_$status_mins (gseg, 01b, bc, code);	/* Obtain bit count (bc) of segment to dump. */
	if code ^= 0 then do;
	     call com_err_ (
		code
		, "gtss_abort_dump_"
		, "COULD NOT OBTAIN BIT COUNT (^p)."
		, gseg
		);
	     return;
	end;
	l = divide (bc, 36, 24, 0);			/* Number of words to dump. */

/**	Obtain output file.	**/
	call gtss_aft_$add ("ABRT", fn, code);
	if code = 2 then do;
	     call com_err_ (
		0
		, "gtss_abort_dump_"
		, "NO ROOM IN AFT FOR ABRT FILE."
		);
	     return;
	end;
	if code = 0 then do;			/* New file (ABRT). */
	     abrt_attributes_block.fill = "0"b;
	     link_size = divide (l+3839, 3840, 24, 0);	/* enough full links for dump */
	     abrt_attributes_block.current_size = 12 * link_size; /* size in llinks */
	     abrt_attributes_block.device_type = "64"b3;	/* => disk. */
	     abrt_attributes_block.llink_flag = "0"b;	/* links (=>12*320=3840 words). */
	     abrt_attributes_block.max_size = divide (sys_info$max_seg_size+319, 320, 24, 0); /* maximum number of llinks
						   in a multics segment */
	     abrt_attributes_block.mode = "0"b;		/* Sequential. */
	     abrt_attributes_block.non_null = "1"b;
	     abrt_attributes_block.perm = "0"b;		/* Temporatry file. */
	     if link_size <= 16383			/* 2**14-1 */
	     then abrt_attributes_block.size = substr (bit (link_size, 24), 11, 14);
	     else abrt_attributes_block.size = "0"b;
	     abrt_attributes_block.user_attr = "0"b;
	     addr (abrt_attributes_block.words_block) -> fixed_bin11 = 64;
	     fnp = fn;				/* Convert fn to numeric string (fnps/fnp). */

	     call gtss_ios_open_ (
		/* 1 */ fn			/* AFT index. */
		, /* 2 */ (gtss_ext_$pdir)		/* ABRT directory. */
		, /* 3 */ unique_chars_ ("0"b)||".abrt."||fnps /* Multics segment name. */
		, /* 4 */ "110000"b			/* bit=1 => read, bit2=1 => write. */
		, /* 5 */ "0"b			/* => sequential. */
		, /* 6 */ addr (abrt_attributes_block)
		, /* 7 */ addr (gcos_status)		/* gtss_ios_ result code. */
		, /* 8 */ code			/* Multics error code. */
		);
dcl 1 gcos_status aligned,
      2 bit12 bit(12)unal,
      2 bit60 bit(60)unal;
	     if gcos_status.bit12 ^= "4000"b3 then do;
		call com_err_ (
		     code
		     , "gtss_abort_dump_"
		     , "GTSS_IOS_$OPEN GCOS_STATUS=^w. CAN'T OPEN ABRT"
		     , gcos_status
		     );
		aft_entry (fn).used = "0"b;		/* => Don't close, forget aft entry. */
		return;
	     end;
	end;

	else do;					/* File already in AFT. */

/* See if we have write access */
	     if permissions (fn).write then do;

/* Try to grow ABRT file if too small */
		if file_size (fn) < l then do;

/* Figure out how many links are required. */
		     link_size = divide (l + 3839, 3840, 24, 0);
		     size_change = link_size * 12 - divide (file_size (fn), 320, 24, 0);
		     call gtss_ios_change_size_ (fn, size_change, "0"b, status, code);
		     if status ^= 0 then do;
			if code = error_table_$rqover then do;
			     call com_err_ (
				code
				, "gtss_abort_dump_"
				, "EXCEEDED LLINKS AVAILABLE"
				);
			     drl_abort_code = 34;
			     return;
			end;
			drl_abort_code = 40;	/* DRL ABORT - ABORT FILE TOO SMALL */
			l = file_size (fn);
		     end;
		end;
	     end;
	     else do;				/* No write permission */
		drl_abort_code = 34;		/* DRL ABORT -- CANNOT WRITE ABRT FILE */
		return;
	     end;
	end;

/* get pointer to target file */
	if msf (fn)
	then abrt_ptr = msf_array_ptr (fn) -> msf_components (1);
	else abrt_ptr = single_segment_ptr (fn);

/* Move memory image into abort file */
	abrt_ptr -> m = gseg -> m;
	return;

/**  Variables for gtss_abort_dump_
   IDENTIFIER		ATTRIBUTES	**/
dcl  abrt_ptr                 ptr init(null());
dcl  bc                       fixed bin (24);
dcl  code                     fixed bin (35);
dcl  divide                   builtin;
dcl  error_table_$rqover      fixed bin(35)ext;
dcl  fixed_bin11              fixed bin (11)unal based;
dcl  fn                       fixed bin (24);
dcl  fnp                      pic "99";
dcl  fnps                     char (2)based (addr (fnp));
dcl  gseg                     ptr init(null());
dcl  hcs_$status_mins         entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
dcl  l                        fixed bin (24);
dcl  link_size                fixed bin (24);
dcl  m                        char (4*l) based;
dcl  msf_components           (0:499) ptr based;
dcl  null                     builtin;
dcl  status                   fixed bin (24);
dcl  sys_info$max_seg_size    fixed bin (35) ext;
dcl  unique_chars_            entry (bit (*))returns (char (15));

dcl 1 abrt_attributes_block aligned like gtss_file_attributes static int;

%include gtss_file_attributes;

%include gtss_ext_;

%include gtss_entry_dcls;

%include gtss_dfd_ext_;
     end						/* gtss_abort_dump_ */;
