/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */


/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

gtss_drl_time_: proc (mcp, increment);

/*	Obtain processor time and time of day.

	Authors:	Robert J. Grimes	Created
		Albert N. Kepner	  1978
		Robert M. May
		David B. Ward
  Changed: Ron Barstad  02/04/83  To fix size error in convert to 64ths msec
*/

/*
   DRL TIME, OBTAIN PROCESSOR TIME AND TIME&OF&DAY (octal 21)


   8_________1_6______

   DRL      TIME
   ZERO     L(date)


   From this derail, the processor time  used  by  the  current
   user, the time of day, and (optionally) the date are returned, in
   the following form:



   C(A)    Processor time

   C(Q)    Time of day



   The unit of time is 1/64 of a millisecond.


   At  location  date, the date is entered, in ASCII code, with
   slashes inserted between the values in the following form:



   DATE    M   M   /   D

   +1      D   /   Y   Y


   Where:


   MM is the month
   DD is the day
   YY is the year


   If the value of L(date) is zero, the date is not stored.
   */
/* 	D E C L A R A T I O N S					 */


/* 	External Entries						 */

dcl  clock_ ext entry returns (fixed bin (71));
dcl  date_time_ ext entry (fixed bin (71), char (*));
dcl  decode_clock_value_ ext entry
    (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin (71), fixed bin, char (4) aligned);

/* 	Work Variables						 */

dcl  increment fixed bin;				/* no of param words to skip */
dcl  time fixed bin (71);				/* time in microseconds */
dcl  time64ths fixed bin (35) based;                        /* time in 64ths of a msec */
dcl  date_ptr ptr init(null());
dcl  processor_time fixed bin (35);
dcl  date char (8) based (date_ptr);
dcl  arg_ptr ptr init(null());
dcl 1 arglist aligned based (arg_ptr),
    2 address fixed bin (17) unaligned,
    2 fill bit (18) unaligned;
dcl  date_time char (8);				/* ascii date and time */

dcl  gseg ptr ;
dcl  i fixed bin (71);				/* temp */
dcl (j, m, d, y, w) fixed bin;
dcl  z char (4) aligned;
dcl (addrel, fixed, unspec, addr, divide) builtin;

/* 	P     R     O     C     E     D     U     R     E		 */




	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);

	increment = 1;				/* one parameter */
	time = clock_ ();				/* get current time */

	call date_time_ (time, date_time);		/* get ascii date and time */


/*  look for date location required */
	arg_ptr = addrel (gseg, fixed (scu.ilc) + 1);
	if arglist.address ^= 0 then
	     do;
						/* check  for buffer address out of bounds */
	     if arglist.address > fixed (gtss_ust.lsize.limit, 18)
	     | (arglist.address+1) > fixed (gtss_ust.lsize.limit, 18) then do;
		call gtss_abort_subsystem_ (mcp,
		     "gtss_drl_time_",
		     4,
		     gtss_pnterr.err4,
		     fixed (scu.ilc, 18));
		return;
	     end;
	     date_ptr = addrel (gseg, arglist.address);
	     date = date_time;
	end;
						/* get total proc time used before ss started and time so far by ss */
	processor_time = gtss_ust.lsprt+gtss_ust.lspts;
	mc.regs.a = unspec (processor_time);

	call decode_clock_value_ (time, m, d, y, i, w, z); /* just to get time since midnight local time,
						   in microseconds, into i */

	i = divide (i, 1000, 71, 0);			/* convert to msecs */
	addr (mc.regs.q) -> time64ths = i * 64;           /* convert to 64ths of a msec */
	return;

%include gtss_pnterr;

%include gtss_ext_;

%include gtss_ust_ext_;

%include mc;

%include gtss_entry_dcls;
     end gtss_drl_time_;
