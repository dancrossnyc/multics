/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */
gtss_break_vector_: proc (mcpp);

/* The subsystem has specified a transfer vector for line break
   (mulitcs quit).  We must locate the appropriate machine
   conditions and alter the instruction counter.

	Authors:	Robert J. Grimes	Created
		Albert N. Kepner	  1978
		Robert M. May
		David B. Ward
*/

/* We will search the stack backwards from the current
   stack frame checking each quit and derail fault
   to see if it occurred in the current slave segment. If no
   such fault is found then the  subsystem must have returned before
   quit was signalled so no machine conditions will be altered. */

	sp = find_condition_frame_ (null ());
	do while (sp ^= null ());
	     call find_condition_info_ (sp, addr (cond_info), code);
	     if condition_name = "quit" | condition_name = "derail"
	     then do;
		scup = addr (cond_info.mcptr -> mc.scu);
		if scu.ppr.psr = substr (baseno (gtss_ext_$gtss_slave_area_seg
		(gtss_ext_$stack_level_)), 4, 15) then do; /* have found fault in slave segment */
		     mcp = cond_info.mcptr;
		     gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
		     lbrk.ic = scu.ilc;
		     lbrk.ir = string (scu.ir);
		     scu.ilc = lbrk.tra_addr;
		end;
	     end;
	     sp = find_condition_frame_ (sp);
	end;
	return;					/* end of main entry */


drl_in_progress: entry () returns (bit (1));

/* This entry searches the stack backwards from the current stack
   frame to determine if the slave program was interrupted by a derail
   fault. If so, it returns "1"b */

	sp = find_condition_frame_ (null ());
	do while (sp ^= null ());
	     call find_condition_info_ (sp, addr (cond_info), code);
	     if condition_name = "derail"
	     then do;
		scup = addr (cond_info.mcptr -> mc.scu);
		if scu.ppr.psr = substr (baseno (gtss_ext_$gtss_slave_area_seg
		(gtss_ext_$stack_level_)), 4, 15) then do; /* have found fault in slave segment */
		     return ("1"b);
		end;
	     end;
	     sp = find_condition_frame_ (sp);
	end;
	return ("0"b);				/* end of drl_in_progress entry */


status:	entry () returns (bit (1)unal);

/* The entry gtss_break_vector_$status indicated is the subsystem
   wants to handle its own line breaks ((.LBRK+1) in nonzero).
   Usage:
   dcl gtss_break_vector_$status entry() returns (bit(1)unal);
   flag = gtss_break_vector_$status();
   where flag is "1"b iff (.LBRK+1) is nonzero. */

	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	lower_limit = bit (binary (100, 18), 18);
	upper_limit = gtss_ust.lsize.limit;
	return (lbrk.tra_addr >= lower_limit & lbrk.tra_addr < upper_limit); /* end of status entry */


dcl  code fixed bin(35);
dcl  gseg ptr ;
dcl  lower_limit bit(18);
dcl  mcpp ptr parm;
dcl  sp ptr;						/* ptr to current stack frame being searched */
dcl  upper_limit bit(18);
dcl 1 cond_info aligned,
%include cond_info;
dcl find_condition_frame_ entry(ptr) returns(ptr);
dcl find_condition_info_ entry(ptr,ptr,fixed bin(35));

%include gtss_ext_;

%include gtss_spa;

%include mc;

%include gtss_ust_ext_;
     end gtss_break_vector_;
