/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   ************************************************************* */

gtss_com_err_: proc;

/**       This procedure is called from gtss after the condition
	command_error has been signalled by com_err_. It takes
	the com_err_ string and sends it to *CFP. com_err_ is
	then requested not to print it if gtss_ext_$flags.gtss_com_err_sw
	is true. If the call was a result of problems with the
	*CFP file the write to it is not attempted.

	Author: Al Dupuis      11/02/79.                         **/

	/** Check for *CFP problems **/
	if gtss_ust.lcfst.start_term > 0
	& gtss_ust.lcfst.start_term < 5
	then return;
	
          /** Locate the error condition information **/
	if find_frame ("command_error") = null ()
	then do;
	     call ioa_ ("Couldn't get frame for command_error.");
	     return;
	end;

	/** And write error message to *CFP after preceding it with cr lf **/
	if errmess_lth > gtss_max_lth - 2
	then errmess_lth = gtss_max_lth - 2;
	error_message = cr_lf || error_message;
	errmess_lth = errmess_lth + 2;
	call gtss_write_starCFP_ (null (), errmess_ptr, fixed (errmess_lth, 21), code);
	if gtss_ext_$flags.gtss_com_err_sw
	then gtss_ext_$flags.gtss_com_err_sw,
	     print_sw = "0"b;
	

find_frame: proc (condition_parm) returns (ptr);

	     sp = find_condition_frame_ (null ());
	     do while (sp ^= null ());
		call find_condition_info_ (sp, addr (cond_info), code);
		if cond_info.condition_name = condition_parm then
		     return (cond_info.infoptr);
		sp = find_condition_frame_ (sp);
	     end;
	     return (null ());

dcl condition_parm char (32) varying parm;
	end;					/* find_frame */

dcl code fixed bin (35);
dcl command_error cond ext;
dcl cr_lf char (2) based (addr (crlf));
dcl crlf bit (18) static int options (constant) init ("015012"b3);	
dcl err_mess char (errmess_lth) based (errmess_ptr);
dcl error_message char (max_errmess_lth) based (errmess_ptr);
dcl find_condition_frame_ entry (ptr) returns (ptr);
dcl find_condition_info_ entry (ptr, ptr, fixed bin(35));
dcl gtss_max_lth fixed bin static int options (constant) init (252);
dcl ioa_ entry options (variable);
dcl sp ptr init (null ());
dcl 1 command_error_info aligned based (cond_info.infoptr),
      2 length fixed bin,
      2 version fixed bin,
      2 action_flags aligned,
        3 cant_restart bit (1) unaligned,
        3 default_restart bit (1) unaligned,
        3 reserved bit (34) unaligned,
      2 info_string char (256) varying,
      2 status_code fixed bin (35),
      2 name_ptr ptr,
      2 name_lth fixed bin,
      2 errmess_ptr ptr,
      2 errmess_lth fixed bin,
      2 max_errmess_lth fixed bin,
      2 print_sw bit (1);
dcl 1 cond_info aligned,
%include cond_info;

%include mc;

%include gtss_entry_dcls;

%include gtss_ext_;

%include gtss_ust_ext_;
     end;						/* gtss_com_err_ */

