/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

gtss_abs_: proc;

/**
	ENTRY		FUNCTION

	get_id		Returns the unique Multics absentee request
			id, for the given DRUN job id.

	get_drm		Returns the generated gcos_set_environment
			command, with the directory mapping rules
			currently in effect.

	create_absin	Returns an absin file.

	abs_equiv		Performs the equivalent Multics absentee
			function that the DRUN subsystem has just
			performed. Examples: enter_abs_request ...etc.

	cpu_runout	This entry is called when the execution time limit
			has been exceeded. Puts the appropriate error code
			in the UST, aborts the current subsystem, and lets
			the DRUN subsystem produce the output file.

	dabt_check	This entry is called every 30 cpu seconds (set
			in gtss_drun_) when a DRUN is executing under
			absentee. It checks to see if the DABT request
			has been given from an interactive process to
			cancel this run.

   Author:  Al Dupuis	08, 1979.
   Change:  Dave Ward	08/19/79 Provide cwd to dir drun done from.
			         Eliminated cl, made same as cmd_line.
   Change:  Al Dupuis	08/20/79 Added cpu_runout entry.
   Change:  Al Dupuis	09/16/79 Added dabt_check entry.
**/


	call com_err_ (0, "gtss_abs_",
	     "See documentation for meaningful entries.");
	return;


get_id:	entry (drun_job_id) returns (char (19));

/**
	This entry returns the unique Multics absentee
	request id associated with the DRUN job id given.
**/



	caller = "gtss_abs_$get_id";
	error = "0"b;
	djid = drun_job_id;
	if ^valid_id ()
	then return (" ");
	call get_abs_id;
	return (absentee_id);


get_drm:	entry returns (char (*));

/**

	This entry returns a generated gcos_set_environment
	command, with the drm rules currently in effect.
**/

	caller = "gtss_abs_$get_drm";
	dir_map_rule = gse_ext_$drm_rule;
	if dir_map_rule = 0 then do;
	     call com_err_ (0, caller,
		"Bug, gse_ext_$drm_rule was not set.");
	     return (" ");
	end;

	if dir_map_rule = 1 then
	     return ("gse -drm umc -umc_name " || rtrim (gse_ext_$umc_name));

	else if dir_map_rule = 2 then
	     return ("gse -drm wd");

	else if dir_map_rule = 3 then
	     return ("gse -drm smc -smc_pathname "
	     || rtrim (gse_ext_$smc_pathname)
	     || " -umc_name " || rtrim (gse_ext_$umc_name));

	else call com_err_ (0, caller,
	     "gse_ext_$drm_rule invalid, value = ^a",
	     gse_ext_$drm_rule);
	return (" ");

dcl  dir_map_rule             fixed bin (24);


create_absin: entry returns (char (*));

/**	This entry generates the absin file	**/


	return ("&1" || CR
	     || "gtss$drun &2" || CR
	     || "drun" || CR
	     || "bye" || CR
	     || "logout" || CR);

abs_equiv: entry;

/**
	This entry performs the equivalent action,
	in Multics terms, that the DRUN subsystem has
	just performed. It is called from
	gtss_drl_t_cfio_ function (6), after the DRUN
	subsystem has modified the #D queue file, to
	reflect an action it has just performed.
	In the following chart, the value of action
	is the value of the status of the catalog
	entry as described in DB84, page 16-20.

	ACTION		MODULE		Multics EQUIVALENT

	  1		enter_abs_req	enters a Multics absentee request
	  4		cancel_abs_req	cancels the Multics absentee request

**/


/** Obtain pointer to #D header **/
	call gtss_dq_$hdrp (dqh_ptr);
	if dqh_ptr = null () then call gtss_abort_subsystem_ (
	     gtss_find_cond_frame_ ("derail"),
	     caller,
	     0,
	     "Could not get pointer to #D header");
	no_of_entries = dqh_ptr -> dq_header.dhbsn.no_of_cea;
	call gtss_dq_$entries_info (addr (entries_info), no_of_entries, no_of_entries_found);
	if no_of_entries_found = 0 then return;

/** Perform the equivalent absentee function **/
	do eii = 1 to no_of_entries_found;
	     call job_action (entries_info.job_stat (eii));
	end;


	return;

cpu_runout: entry (mc_ptr, name);


/* If subsystem timer running kill it	*/
	if gtss_ext_$flags.ss_time_limit_set then do;
	     call timer_manager_$reset_cpu_call (gtss_fault_processor_$timer_runout);
	     gtss_ext_$flags.ss_time_limit_set = "0"b;
	end;

/* Send error message to *CFP */
	gtss_ext_$flags.gtss_com_err_sw = "1"b;
	call com_err_$suppress_name (0, "gtss_abs_",
	     "<67> PROCESSOR TIME LIMIT EXCEEDED");

/* And pass the fault over to be processed	*/
	call gtss_fault_processor_$timer_runout (mc_ptr, name);
	return;

dabt_check: entry (mc_ptr, name);




	call ipc_$read_ev_chn (gtss_ext_$event_channel, ev_occured,
	     gtss_ext_$restart_seg_ptr, code);
	if code ^= 0 then do;
	     call convert_ipc_code_ (code);
	     call com_err_ (code, caller,
		"Couldn't check to see if event occured.");
	     signal condition (gtss_fail);
	end;
	if ev_occured = 0 then do;
	     call timer_manager_$cpu_call (30, "11"b, gtss_abs_$dabt_check);
	     return;
	end;

/* A DABT request has been sent by an interactive process */
	call timer_manager_$reset_cpu_call (gtss_abs_$cpu_runout);
	call timer_manager_$reset_cpu_call (gtss_fault_processor_$timer_runout);
	gtss_ext_$flags.ss_time_limit_set = "0"b;
	gtss_ext_$flags.timer_ranout = "0"b;

/* Send error message to *CFP */
	gtss_ext_$flags.gtss_com_err_sw = "1"b;
	call com_err_$suppress_name (0, "gtss_abs_",
	     "<67> TERMINATED BY DABT WHILE EXECUTING");
	
/* Put a decimal 13 in start_term so DRUN subsystem knows DABT request has
   been given. Set the next input sector to be the COUT sector. Unwind
   the primitive interpretor to it's first invokation.	*/
	gtss_ust.lcfst.start_term = 13;
	gtss_ust.lcfio.sect_in = gtss_ust.lcfst.initial_sect_out - 1;
	call gtss_interp_prim_$sysret ();		/* doesn't return */
	return;					/* just in case */

get_abs_id: proc;

/** Get the output from list_absentee_request (lar) **/
	     proc_dir = get_pdir_ ();
	     path = "ao_" || unique_chars_ ("0"b);
	     cmd_line = "fo [pd]>" || path;
	     call cu_$cp (addrel (addr (cmd_line), 1), length (cmd_line), code);
	     cmd_line = "lar -long";
	     call cu_$cp (addrel (addr (cmd_line), 1), length (cmd_line), code);
	     cmd_line = "ro";
	     call cu_$cp (addrel (addr (cmd_line), 1), length (cmd_line), code);

/** Overlay lar output **/
	     call hcs_$initiate_count (proc_dir, path, "", bit_count,
		1, seg_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, caller,
		     "Couldn't initiate ^a in ^a",
		     path, proc_dir);
		error = "1"b;
	     end;

/** Get the Multics absentee request id **/
	     call find_id;
	     if error then absentee_id = " ";
	     else absentee_id = abs_id;

/** Finished with lar output **/
	     call delete_$ptr (seg_ptr, "100100"b, "gtss_abs_", code);
	     if code ^= 0 then do;
		call com_err_ (code, caller,
		     "Couldn't delete ^a in ^a",
		     path, proc_dir);
	     end;


find_id:	     proc;

		did_pos = index (cs, djid);
		if did_pos = 0 then do;
		     error = "1"b;
		     return;
		end;

		table_length = did_pos - 1;
		do backup_indx = table_length to 11 by -1;
		     rid_ptr = addr (table (backup_indx - 11));
		     if rid = "Request ID:" then do;
			aid_ptr = addr (table (backup_indx + 1));
			return;
		     end;
		end;

		call com_err_ (0, caller,
		     "Bug, could not get absentee request id");
		error = "1"b;
	     end;					/* find_id */
	end;					/* get_abs_id_ */

valid_id:	proc returns (bit (1));

	     if ((d1 < "0") | (d1 > "9"))
	     | ((d2 < "0") | (d2 > "9"))
	     | ((d3 < "0") | (d3 > "9"))
	     | ((d4 < "0") | (d4 > "9"))
	     | ^((d5 = "d") | (d5 = "D"))
	     then do;
		call com_err_ (0, caller,
		     "^a is not a valid drun job id", djid);
		return ("0"b);
	     end;

	     if d5 = "d" then d5 = "D";
	     return ("1"b);

	end;					/* valid_id */




no_action: proc;

	     return;

	end;					/* no_action */

enter_abs_req: proc;


/** Check to see if request has been entered before **/
	     if entries_info.aid (eii) ^= " " then do;
		call check_date_time;
		if ^reschedule then return;
	     end;
	     caller = "gtss_abs_$enter_abs_req";


/** Generate the following command
ear [hd]>drun_control -of drun_control.nnnnD -bf {-li n -tm "DT" -rt} -ag "gse_command" nnnnD
**/

/** enter_abs_request [hd]>drun_control -of [hd]>drun_control.nnnnD -brief **/
	     call user_info_$homedir (home_dir);
	     cmd_line = "enter_abs_request " || rtrim (home_dir) || ">" || absin_file_name;
	     cmd_line = cmd_line || " -of " || rtrim (home_dir) || ">" || absin_file_name || "." || entries_info.did (eii);
	     cmd_line = cmd_line || " -brief";

	     call gtss_dq_$catp (entries_info.did (eii), dc_ptr, cat_entry);
	     if dc_ptr = null () then call gtss_abort_subsystem_ (
		null (),
		caller,
		0,
		"Couldn't get pointer to catalog entry for ^a",
		entries_info.did (eii));

/** -limit nnnnn	**/
	     if dc_ptr -> dq_catalog.dcelp ^= 0 then do;
		milsec = dc_ptr -> dq_catalog.dcelp / 64;
		sec = (milsec / 1000) + 50;		/* if gtss$drun hasn't aborted job 50 seconds
						   after time limit exceeded, let absentee do it */
		seconds = sec;
		cmd_line = cmd_line || " -limit " || seconds;
	     end;

/** {-time "mm/dd/yy {hhmm}"}	**/
	     sec = 0;
	     call gtss_bcd_ascii_ (addr (dc_ptr -> dq_catalog.dcdsd), 6, addr (requested_date));
	     requested_date = substr (requested_date, 3, 2) || "/" || substr (requested_date, 5, 2) || "/" || substr (requested_date, 1, 2);
	     cmd_line = cmd_line || " -time """ || requested_date;

	          /** Use specified time or site preferred time or now **/
	     if dc_ptr -> dq_catalog.dcdst ^= -1
	     then sec = divide (divide (dc_ptr -> dq_catalog.dcdst, 64, 36), 1000, 36);
	     else if gtss_ext_$com_reg.tsddt ^= 0
	     then sec = divide (divide (gtss_ext_$com_reg.tsddt, 64, 36), 1000, 36);
	     if sec ^= 0
	     then do;
		hrs = divide (sec, 3600, 2);
		mins = divide ((sec - (hrs * 3600)), 60, 2);
		hours = hrs;
		minutes = mins;
		requested_time = hours || minutes || ".0";
		cmd_line = cmd_line || " " || requested_time || """";
	     end;
	     else cmd_line = cmd_line || """";

/** {-restart}		**/
	     call gtss_dq_$dibp (entries_info.did (eii), dib_ptr);
	     if dib_ptr = null () then do;
		call com_err_ (0, caller,
		     "Could not get pointer to DIB for ^a", entries_info.did (eii));
		return;
	     end;
	     if dib_ptr -> dq_dib.dbflg.f_res then
		cmd_line = cmd_line || " -restart";

/** -ag "gse -drm umc|smc|wd {-smc_pathname path} {-umc_name name}" nnnnD **/
	     cmd_line = cmd_line || " -ag ""cwd ";
	     cmd_line = cmd_line||rtrim (get_wdir_ ());
	     cmd_line = cmd_line||";";
dcl get_wdir_ entry returns(char(168)aligned);
	     cmd_line = cmd_line||gtss_abs_$get_drm ();
	     cmd_line = cmd_line||"""";
	     cmd_line = cmd_line || " ";
	     cmd_line = cmd_line||entries_info.did (eii);
	     if db_abs then call ioa_ ("^a", cmd_line);
	     call cu_$cp (addrel (addr (cmd_line), 1), length (cmd_line), code);


	end;					/* enter_abs_request */

cancel_abs_req: proc;

/* If there is no Multics absentee id, the request has already been cancelled.
   If there is an id, and the restart segment exists, the DRUN is executing
   and was cancelled via an ipc_ signal by gtss_drl_t_cfio_ function 7.
   If it hasn't started to execute yet, it will be cancelled here via a
   cancel_abs_request.				*/


	     if entries_info.aid (eii) = " " then return;
	     call hcs_$initiate_count (gtss_ext_$homedir,
		"drun_restart." || entries_info.did (eii), "",
		bit_count, 1, gtss_ext_$restart_seg_ptr, code);
	     if gtss_ext_$restart_seg_ptr ^= null () then do;
		call hcs_$terminate_noname (gtss_ext_$restart_seg_ptr, code);
		return;
	     end;

	     cmd_line = "cancel_abs_request -id " || entries_info.aid (eii) || " -brief -all";

	     if db_abs then call ioa_ ("^a", rtrim (cmd_line));
	     call cu_$cp (addrel (addr (cmd_line), 1), length (cmd_line), code);

	end;					/* cancel_abs_request */

check_date_time: proc;

	     reschedule = "0"b;
	     if gtss_ust.lcjid ^= "0"b then return;	/* forget trying to reschedule if running under absentee */
	     caller = "check_date_time";
	     call gtss_dq_$catp (entries_info.did (eii), dc_ptr, cat_entry);
	     if dc_ptr = null () then call gtss_abort_subsystem_ (
		null (),
		caller,
		0,
		"Could not get pointer to ^a's catalog entry",
		entries_info.did (eii));

	     call gtss_bcd_ascii_ (addr (dc_ptr -> dq_catalog.dcdsd), 6, addr (requested_date));
	     requested_date = substr (requested_date, 3, 2) || "/" || substr (requested_date, 5, 2) || "/" || substr (requested_date, 1, 2);


/** Get the output from list_absentee_request (lar) **/
	     proc_dir = get_pdir_ ();
	     path = "ao_" || unique_chars_ ("0"b);
	     cmd_line = "fo [pd]>" || path;
	     call cu_$cp (addrel (addr (cmd_line), 1), length (cmd_line), code);
	     cmd_line = "lar -long" || " -id " || entries_info.aid (eii);
	     call cu_$cp (addrel (addr (cmd_line), 1), length (cmd_line), code);
	     cmd_line = "ro";
	     call cu_$cp (addrel (addr (cmd_line), 1), length (cmd_line), code);

/** Overlay lar output **/
	     call hcs_$initiate_count (proc_dir, path, "", bit_count,
		1, seg_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, caller,
		     "Couldn't initiate ^a in ^a",
		     path, proc_dir);
		error = "1"b;
	     end;

/** Determine if this has been rescheduled to an earlier date/time **/
	     if index (cs, "Deferred time:") = 0 then do;
		call com_err_ (0, caller,
		     "Couldn't find the deferred time for ^a", entries_info.did (eii));
		return;
	     end;

/* Get the deferred time line			*/
	     chars = substr (cs, index (cs, "Deferred time:"));
	     chars = before (chars, CR);
	     if index (chars, "Deferred time:	" || requested_date) = 0 /* white space is tab char */
	     then reschedule = "1"b;
	     else do;				/* same date, now check the time */
		if dc_ptr -> dq_catalog.dcdst ^= -1 then do; /* if no time specified it can't be rescheduled */
		     chars = substr (chars, length ("Deferred time:	" || requested_date) + 1);
		     chars = ltrim (chars);
		     btp = addrel (addr (chars), 1);
		     if valid (based_time) then do;
			hrs = convert (hrs, substr (chars, 1, 2));
			mins = convert (mins, substr (chars, 3, 2));
			time = (hrs * 60 * 60) + (mins * 60);
			gcos_time = dc_ptr -> dq_catalog.dcdst / 1000 / 64;
			if ((gcos_time < time - 300)
			| (gcos_time > time + 300))
			then reschedule = "1"b;
			else;
		     end;
		     else do;
			call com_err_ (0, caller,
			     "Couldn't get the requested time from absentee (^a)", chars);
			return;
		     end;
		end;
		else reschedule = "0"b;
	     end;

	     if reschedule then do;
		cmd_line = "cancel_abs_request -id " || entries_info.aid (eii) || " -brief -all";
		if db_abs then call ioa_ ("^a", cmd_line);
		call cu_$cp (addrel (addr (cmd_line), 1), length (cmd_line), code);
	     end;

/** Finished with lar output **/
	     call delete_$ptr (seg_ptr, "100100"b, "gtss_abs_", code);
	     if code ^= 0 then do;
		call com_err_ (code, caller,
		     "Couldn't delete ^a in ^a",
		     path, proc_dir);
	     end;
	end;					/* check_date_time */

/*	gtss_get_abs_id_ local declares */

dcl  absentee_id              char (19);
dcl  absin_file_name          char (12) init ("drun_control");
dcl  abs_id                   char (19) based (aid_ptr);
dcl  aid                      char (19);
dcl  aid_ptr                  ptr init (null());
dcl  backup_indx              fixed bin (24);
dcl  based_time		pic "9999v.9" based (btp);
dcl  btp			ptr;
dcl  bit_count                fixed bin (24);
dcl  caller                   char (32) varying;
dcl  cat_entry                fixed bin (18) unsigned;
dcl  chars		char (256) varying;
dcl  cmd_line                 char (350) varying;
dcl  code                     fixed bin (35);
dcl  com_err_$suppress_name   entry options (variable);
dcl  convert_ipc_code_	entry (fixed bin (35));
dcl  cs                       char (bit_count / 9) based (seg_ptr);
dcl  cu_$cp                   entry (ptr, fixed bin, fixed bin (35));
dcl  dc_ptr                   ptr init (null());
dcl  delete_$ptr              entry (pointer, bit (6), char (*), fixed bin (35));
dcl  dib_ptr                  ptr init (null ());
dcl  did_pos                  fixed bin (24);
dcl  djid                     char (5);
dcl  dqh_ptr                  ptr init (null());
dcl  drun_job_id              char (5) parm;
dcl  eii                      fixed bin (18) unsigned;
dcl  error                    bit (1) init ("0"b);
dcl  ev_occured		fixed bin;
dcl  get_pdir_                entry returns (char (168));
dcl  gcos_time		fixed bin (36) unsigned;
dcl  gtss_fail		condition ext;
dcl  hcs_$initiate_count      entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname    entry (ptr, fixed bin (35));
dcl  home_dir                 char (64);
dcl  hours                    char (2);
dcl  hrs                      pic "99";
dcl  i                        fixed bin (18) unsigned;
dcl  ioa_                     entry options (variable);
dcl  ipc_$read_ev_chn	entry (fixed bin (71), fixed bin, ptr, fixed bin (35));
dcl  mc_ptr		ptr parm;
dcl  milsec                   fixed bin (35);
dcl  mins                     pic "99";
dcl  minutes                  char (2);
dcl  name			char (4) parm;
dcl  no_of_entries            fixed bin (18) unsigned;
dcl  no_of_entries_found      fixed bin (18) unsigned;
dcl  old_min                  pic "s99";
dcl  path                     char (18);
dcl  proc_dir                 char (168);
dcl  requested_date           char (8);
dcl  requested_time           char (6);
dcl  reschedule               bit (1);
dcl  rid                      char (11) based (rid_ptr);
dcl  rid_ptr                  ptr init (null());
dcl  sec                      fixed bin (35) init (0);
dcl  seconds                  pic "99999";
dcl  seg_ptr                  ptr init (null());
dcl  spare_indx               fixed bin (24);
dcl  table                    (table_length) char (1) based (seg_ptr);
dcl  table_length             fixed bin (24);
dcl  time 		fixed bin (36) unsigned;
dcl  timer_manager_$cpu_call	entry (fixed bin (71), bit (2), entry);
dcl  timer_manager_$reset_cpu_call	entry (entry);
dcl  unique_chars_            entry (bit (*)) returns (char (15));
dcl  user_info_$homedir       entry (char (*));

dcl  CR                       char (1) init ("
");

dcl 1 d defined djid,
      2 d1 char (1),
      2 d2 char (1),
      2 d3 char (1),
      2 d4 char (1),
      2 d5 char (1);

dcl  job_action               (0:7) entry init (
	no_action,
	enter_abs_req,
	no_action,
	no_action,
	cancel_abs_req,
	no_action,
	no_action,
	no_action);

dcl 1 entries_info (315),
      2 did char (5),
      2 aid char (19),
      2 job_stat fixed bin (6) unsigned;
dcl 1 event_info based (gtss_ext_$restart_seg_ptr),
      2 channel_id fixed bin (71),
      2 message fixed bin (71),
      2 sender bit (36),
      2 origin,
        3 dev_signal bit (18) unal,
        3 ring bit (18) unal,
      2 channel_index fixed bin;

%include gtss_deferred_queue;

%include gtss_ext_;

%include gtss_entry_dcls;

%include gse_ext_;

%include gtss_db_names;

%include gtss_ust_ext_;
     end;						/* gtss_abs_ */
