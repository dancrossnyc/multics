/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/**************************************************************
   *						   *
   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
   *						   *
   **************************************************************/
gtss_drl_relmem_: proc (mcpp, increment);

/**	gtss release memory.

   Authors: Robert J. Grimes	Created
   -	  Albert N. Kepner	  1978
   -	  Robert M. May
   -	  David B. Ward
   **/

dcl  mcpp                     ptr parm;
dcl  increment                fixed bin parm;
	mcp = mcpp;

/**

   DRL RELMEM, RELEASE MEMORY (octal 15)


   8_________1_6_____________________

   DRL      RELMEM
   C(A)     return location,0
   C(Q)     number  words low,number words high

   (See TSS SYSTEM PROGRAMMER'S
   REFERENCE MANUAL DD17C, Rev. 0, July 1976
   Page 3-21)

*/

	increment = 0 ;				/* Zero arguments */
	scup = addr (mc.scu);
	gseg = gtss_ext_$gtss_slave_area_seg (gtss_ext_$stack_level_);
	lw = divide (QU, 1024, 24)*1024;
	hw = divide (QL, 1024, 24)*1024;

	nl = fixed (gtss_ust.lsize.limit, 18, 0) - lw - hw; /* Calculate new length of memory. */

	if nl <1024 then do;

/* Exceeds installation limit. */
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_relmem_"
		, 0
		, gtss_pnterr.err101
		, fixed (scu.ilc, 18)
		);
	     return;
	end;

	if (AU>nl) | (AL ^= 0) then do;
	     call com_err_ (0, "gtss_drl_relmem_",
		"Improper return address: AU=^6o AL=^6o lisize.limit=^6o",
		AU, AL, nl);

/* Improper return address */
	     call gtss_abort_subsystem_ (
		mcp
		, "gtss_drl_relmem_"
		, 4
		, gtss_pnterr.err4
		, fixed (scu.ilc, 18)
		);
	     return;
	end;

/**	Reduce memory.	**/
	if lw>0 then do;				/* Move memory if lower words specified. */
	     nc = nl*4;				/* New memory length in characters. */
	     gseg -> MS = addrel (gseg, lw) -> MS;
	end;

	if gse_ext_$modes.gdb then
	     if gtss_ext_$gdb_name ^= " " then do;
		call gcos_debug_$loadtime (
		     "-gtss"			/* memory segment name */
		     , gtss_ext_$gdb_name
		     , ""
		     , 0
		     );
		gtss_ext_$gdb_name = " ";
	     end;

	gtss_ust.lswap.size, gtss_ust.lsize.limit = nl_r18; /* Save new limit in ust */

	gtss_ust.lsize.bar = divide (nl+511, 512, 17, 0);
	call gtss_set_slave_$load_bar (fixed (gtss_ust.lsize.bar, 18, 0)); /* Reset BAR register. */

	gtss_spa.losti.ilc = bit (AU);		/* set up the return address in the slave area */
	gtss_spa.losti.ir = "0"b;			/* zero the indicators */

	increment = AU - fixed (scu.ilc, 18, 0) -1;	/* Restart execution of user's code return location. */

	return;

/**	Variables for gtss_drl_relmem_:
   IDENTIFIER		ATTRIBUTES	**/
dcl  code                     fixed bin (35);
dcl  gcos_debug_$loadtime     entry (char (*), char (*), char (*), fixed bin (24));
dcl  gseg                     ptr init(null());
dcl  hw                       fixed bin (24);
dcl  lw                       fixed bin (24);
dcl  MS                       char (nc)aligned based;
dcl  nc                       fixed bin (24);
dcl  nl                       fixed bin (35);
dcl  status                   fixed bin (35);

dcl 1 nl_overlay aligned based (addr (nl)),
    2 nl_l18 bit (18)unal,
    2 nl_r18 bit (18)unal;

dcl 1 Q_reg aligned based (addr (mc.regs.q)),
    2 QU fixed bin(18)unsigned unal,
    2 QL fixed bin(18)unsigned unal;

dcl 1 A_reg aligned based (addr (mc.regs.a)),
    2 AU fixed bin(18)unsigned unal,
    2 AL fixed bin(18)unsigned unal;

%include gtss_spa;

%include gtss_ust_ext_;

%include gtss_pnterr;

%include gtss_ext_;

%include mc;

%include gtss_entry_dcls;

%include gtss_install_values_;

%include gse_ext_;
     end						/* gtss_drl_relmem_ */;
