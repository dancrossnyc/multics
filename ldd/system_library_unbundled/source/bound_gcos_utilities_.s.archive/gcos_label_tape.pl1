/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_label_tape:
	   gclt: proc;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Written:	Scott C. Akers	FEB 82					*/
          /* Changed:  Ron Barstad  Oct 1982  To accept only 5 char for tape label                  */
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
%page;
/*
Syntax:  gcos_label_tape REEL_NUM {NEW_NUM} {-control_args}


Function:  Writes a GCOS label on a tape.


Arguments:

REEL_NUM
   is the number on the label of the tape reel to be used.
NEW_NUM
   is the new serial  number to be written on the tape.   If it is the
   same as the REEL_NUM, it may be omitted.


Control arguments:

-density N, -den N
   Specify the tape density.  Default is 1600 BPI.
-track N, -tk N
   Specify 7- or 9-track tape.  Default is 9-track.
-erase | -no_erase
   Erase/don't  erase  the tape  before  labeling it.   Default  is to
   overwrite  the old  label (if it  exists), and  leave the remaining
   data intact (-no_erase).


Notes:

If no control arguments are given, the command:
     gclt xyz12
is equivalent to the command:
     gclt xyz12 xyz12 -tk 9 -den 1600 -no_erase

If  conflicting  control arguments  are  given, the  rightmost control
argument is used (e.g.  "gclt m1266 -tk  7 -tk 9" will label a 9-track
tape.)
*/
%page;
	call init_routine;				/* Set default values. */

	on   condition (cleanup)
	begin;
	     call close_file;
	     goto exit_gclt;
	     end;

	call cu_$arg_list_ptr (arg_list_ptr);		/* Get an argument pointer. */
	if get_args (arg_list_ptr)			/* Validate the args. */
	then if built_label ()			/* Try to build the label. */
	     then if tape_labeled ()			/* Attempt to do the labeling. */
		then if label_ok ()			/* Make sure it matches. */
		     then call goodie_message;	/* Tell user it succeeded. */

	call close_file;				/* Close and detach the tape. */

exit_gclt: ;

	return;
%page;
asc_to_bcd: proc (in_string, out_string, field_length) returns (bit (1));

						/* Translates an ASCII character
						/* string to its BCD equivalent,
						/* padding on the right to fill
						/* output field. */

dcl  field_length	fixed bin		parm;
dcl  in_string	char (*)		parm;
dcl  out_string	bit (*)		parm;


	error = "0"b;
	fill_count = 0;
	max_xlate = min (length (rtrim (in_string)), field_length);


	do   counter = 1 to max_xlate
	     while (^error);

	     if   in_char (counter) <= hbound (asc_to_bcd_table, 1)
	     then do;
		out_char (counter) = asc_to_bcd_table (in_char (counter));
		fill_count = fill_count + 1;
		end;
	     else do;
		call com_err_ (error_table_$bad_conversion, MYNAME,
			     "^/ASCII character ""^o"" has no BCD counterpart.",
			     in_char (counter));
		error = "1"b;
		end;
	     end;

	if   ^error
	then do   counter = fill_count+1 to field_length;
		out_char (counter) = "20"b3;
		end;

	return (^error);

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dcl  error		bit (1);
dcl  in_char		(length (rtrim (in_string))) fixed bin (9)
			unsigned unaligned based (addr (in_string));
dcl  max_xlate		fixed bin;
dcl  out_char		(field_length) bit (6)
			unaligned based (addr (out_string));

end asc_to_bcd;
%page;
built_label: proc returns (bit (1));			/* Fills in label structure. */

	if   new_vol_id = " "
	then new_vol_id = atd_structure.vol_id;		/* Use old VOL_ID if new one not given. */

	if   asc_to_bcd ("ge  600 btl", tape_label.label_id, 12)
	then if   asc_to_bcd (ascii_inst_id, tape_label.installation_id, 6)
	     then if   asc_to_bcd (" " || new_vol_id, tape_label.tape_serial_number, 6)
		then if   asc_to_bcd (" " || new_vol_id, tape_label.file_serial_number, 6)
		     then if   asc_to_bcd ("  0001", tape_label.reel_sequence_number, 6)
			then if   asc_to_bcd (" " || ascii_cr_date, tape_label.creation_date, 6)
			     then if   asc_to_bcd (" ", tape_label.file_name, 12)
				then if   asc_to_bcd ("gcos env simulator", tape_label.blurb, 18)
				     then if   asc_to_bcd (" ", tape_label.blanks, 6)
					then return ("1"b);
	return ("0"b);

end built_label;
%page;
close_file: proc;

	code = 0;

	if   iocb_ptr ^= null ()
	then do;

	     call iox_$close (iocb_ptr, code);
	     call iox_$detach_iocb (iocb_ptr, code);
	     call iox_$destroy_iocb (iocb_ptr, code);

	     if   code ^= 0
	     then call com_err_ (code, MYNAME,
			     "^/Error while trying to detach/close ^a",
			     stream_name);
	     end;

	return;

end close_file;
%page;
day_of_year: proc returns (char (3));

	call datebin_$dayr_clk (clock_reading, num_day);

	return (ltrim (char (num_day,17)));

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dcl  num_day		fixed bin;

end day_of_year;
%page;
get_args: proc (arg_list_ptr) returns (bit(1));		/* Does the argument processing. */

dcl  arg_list_ptr	ptr	parm;

	error = "0"b;
	call cu_$arg_count_rel (arg_count, arg_list_ptr, code);

	if   code ^= 0
	then do;
	     call com_err_ (code, MYNAME);
	     error = "1"b;
	     end;

	if   arg_count > 0
	then do arg_no = 1 to arg_count while (^error);
	     call cu_$arg_ptr_rel (arg_no, arg_ptr, arg_len, code, arg_list_ptr);
	     if   code = 0
	     then do;
		if   substr (arg, 1, 1) = "-"
		then do;
		     error = ^valid_ctl_arg (arg);
		     expect.new_vol_id = "0"b;
		     end;
		else error = ^valid_vanilla_arg (arg);
		end;
	     end;

	else do;
	     call com_err_ (error_table_$noarg, MYNAME,
			"^/You must supply a reel number.");

	     error = "1"b;
	     end;

	return (^error);

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dcl  arg				char (arg_len) based (arg_ptr);
dcl  error			bit (1);
end get_args;
%page;
goodie_message: proc;				/* Tells user labeling succeeded. */

	call ioa_ ("^/Tape# ^a labeled as ""^a""^/",
		 atd_structure.vol_id,
		 new_vol_id);

	return;
end goodie_message;
%page;
init_routine: proc;					/* Sets up default values. */

	clock_reading = clock_ ();

	erase = "0"b;				/* Default is to not erase. */

	iocb_ptr = null ();

	unspec (compare_buffer) = "0"b;

	unspec (tape_label) = "0"b;

	unspec (expect) = "0"b;
	expect.reel_id = "1"b;

	new_vol_id = " ";

	atd_string = " ";				/* Fill with blanks first. */
	atd_structure.dim = "tape_nstd_";		/* Now fill in the goodies. */
	atd_structure.tracks = "-track 9";
	atd_structure.write = "-write";
	atd_structure.block_size = "-block 2800";
	atd_structure.density = "-density 1600";

	ascii_cr_date = year_num () || day_of_year ();

	call system_info_$installation_id (ascii_inst_id);

	return;

end init_routine;
%page;
label_ok: proc returns (bit (1));

	call iox_$control (iocb_ptr, "rewind", (null ()), code);

	if   code = 0
	then call iox_$read_record (iocb_ptr, (addr (compare_buffer)),
			        (14*4), return_count, code);
	
	if   code = 0
	then do;
	     if   tape_label_string ^= compare_buffer
	     then do;
		code = error_table_$bad_label;
		call print_label_contents;
		end;
	     end;

	else call com_err_ (code, MYNAME,
			"^/Error attempting to verify label.");

	return (code = 0);

end label_ok;
%page;
print_label_contents: proc;

	call com_err_ (code, MYNAME,
		     "^/Error while verifying label");

	overlay_ptr = addr (tape_label);

	call com_err_$suppress_name (0,MYNAME, "^2^/^-EXPECTED DATA"
			        ||"^/^w  ^w  ^w  ^w"
			        ||"^/^w  ^w  ^w  ^w"
			        ||"^/^w  ^w  ^w  ^w"
			        ||"^/^w  ^w",
			        dump_overlay (1), dump_overlay (2),
			        dump_overlay (3), dump_overlay (4),
			        dump_overlay (5), dump_overlay (6),
			        dump_overlay (7), dump_overlay (8),
			        dump_overlay (9), dump_overlay (10),
			        dump_overlay (11), dump_overlay (12),
			        dump_overlay (13), dump_overlay (14));

	overlay_ptr = addr (compare_buffer);

	call com_err_$suppress_name (0,MYNAME, "^2^/^-ACTUAL DATA"
			        ||"^/^w  ^w  ^w  ^w"
			        ||"^/^w  ^w  ^w  ^w"
			        ||"^/^w  ^w  ^w  ^w"
			        ||"^/^w  ^w",
			        dump_overlay (1), dump_overlay (2),
			        dump_overlay (3), dump_overlay (4),
			        dump_overlay (5), dump_overlay (6),
			        dump_overlay (7), dump_overlay (8),
			        dump_overlay (9), dump_overlay (10),
			        dump_overlay (11), dump_overlay (12),
			        dump_overlay (13), dump_overlay (14));

	return;

end print_label_contents;
%page;
tape_attached: proc returns (bit (1));

	stream_name = "lbl_" || rtrim (atd_structure.vol_id);
	call iox_$attach_name (stream_name, iocb_ptr, atd_string, null (), code);
	if   code = 0
	then call iox_$open (iocb_ptr, (6), ("0"b), code);

	if   code = 0
	then call iox_$control (iocb_ptr, "rewind", (null ()), code);

	if   code = 0
	then if   tape_erased ()
	     then code = 0;

	if   code ^= 0
	then call com_err_ (code, MYNAME,
			"^/Error while attaching/positioning tape.");

	return (code = 0);

end tape_attached;
%page;
tape_erased: proc returns (bit (1));

	code = 0;

	if erase
	then do;

	     do   while (code = 0);
		call iox_$control ( iocb_ptr, "erase", null (), code);
		end;

	     if   code = error_table_$tape_error
	     then code = 0;

	     if   code = 0
	     then call iox_$control (iocb_ptr, "rewind", (null ()), code);

	     if   code ^= 0
	     then call com_err_ (code, MYNAME, "^/Error while erasing tape.");

	     end;

	return (code = 0);

end tape_erased;
%page;
tape_labeled: proc returns (bit (1));

	if   tape_attached ()
	then do;
	     call iox_$write_record (iocb_ptr, addr (tape_label), (14*4), code);
	     if code ^= 0
	     then call com_err_ (code, MYNAME,
			     "^/Error while trying to write new label.");

	     else do;
		call iox_$control (iocb_ptr, "write_eof", (null ()), code);
		if   code ^= 0
		then call com_err_ (code, MYNAME,
				"^/Error while writing EOF. ");
		end;
	     end;

	else code = error_table_$not_attached;

	return (code = 0);

end tape_labeled;
%page;
valid_ctl_arg: proc (ctl_arg)	returns (bit (1));

dcl  ctl_arg		char (*)	parm;

	error = "0"b;

	if   arg_no < 2
	then do;
	     call com_err_ (error_table_$noarg, MYNAME,
			"^/You must supply a reel number.");
	     error = "1"b;
	     end;

	else do;

	     if   ctl_arg = "-density"
	        | ctl_arg = "-den"
	     then expect.density = "1"b;
	     else if   ctl_arg = "-track"
		   | ctl_arg = "-tk"
		then expect.track = "1"b;
		else if   ctl_arg = "-erase"
		     then erase = "1"b;
		     else if ctl_arg = "-no_erase"
			then erase = "0"b;
			else do;
			     call com_err_ (error_table_$bad_arg, MYNAME,
					"^/Argument: ^a",ctl_arg);
			     error = "1"b;
			     end;

	     end;

	return (^error);

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dcl  error		bit (1);

end valid_ctl_arg;
%page;
valid_vanilla_arg: proc (vanilla_arg) returns (bit (1));

dcl  vanilla_arg		char (*) parm;

	error = "0"b;

	if   expect.reel_id
	then do;
	     if   length (rtrim (vanilla_arg)) > 5
	     then do;
		call com_err_ (error_table_$bigarg, MYNAME,
			     "^/Maximum of 5 characters for reel_id.");
		error = "1"b;
		end;

	     else do;
		atd_structure.vol_id = rtrim (vanilla_arg);
		expect.new_vol_id = "1"b;
		expect.reel_id = "0"b;
		end;
	     end;

     else if   expect.new_vol_id
	then do;
	     if   length (rtrim (vanilla_arg)) > 5
	     then do;
		call com_err_ (error_table_$bigarg, MYNAME,
			     "^/Maximum of 5 characters for new vol_id.");
		error = "1"b;
		end;

	     else do;
		new_vol_id = rtrim (vanilla_arg);
		expect.new_vol_id = "0"b;
		end;
	     end;

     else if   expect.track
	then do;
	     if   vanilla_arg = "9"
	        | vanilla_arg = "7"
	     then do;
		atd_structure.tracks = "-track " || rtrim (vanilla_arg);
		expect.track = "0"b;
		end;

	     else do;
		call com_err_ (0, MYNAME, "Only 7- or 9-track tapes may be specified.");
		error = "1"b;
		end;
	     end;

     else if   expect.density
	then do;
	     if   vanilla_arg = "6250"
	        | vanilla_arg = "1600"
	        | vanilla_arg = "800"
	        | vanilla_arg = "556"
	        | vanilla_arg = "200"

	     then do;
		atd_structure.density = "-density " || rtrim (vanilla_arg);
		expect.density = "0"b;
		end;
	     else do;
		call com_err_ (0, MYNAME,
			     "Bad density specification: ^a"
			     || "^/Valid densities:^-6250^-1600^-800^-556^-200",
			     vanilla_arg);
		error = "1"b;
		end;
	     end;


	return (^error);

end valid_vanilla_arg;
%page;
year_num: proc returns (char (2));

	call date_time_ (clock_reading, date_string);

	return (substr (date_string, 7, 2));

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dcl  date_string		char (50);

end year_num;
%page;
dcl  addr				builtin;
dcl  arg_count			fixed bin;
dcl  arg_len			fixed bin (21);
dcl  arg_list_ptr			pointer;
dcl  arg_no			fixed bin;
dcl  arg_ptr			pointer;
dcl  ascii_cr_date			char (6);
dcl  ascii_inst_id			char (20);
dcl  atd_string			char (60)
				based (addr (atd_structure));
dcl  char                               builtin;
dcl  cleanup			condition;
dcl  clock_			entry() returns(fixed bin(71));
dcl  clock_reading			fixed bin (71);
dcl  code				fixed bin (35);
dcl  com_err_			entry() options(variable);
dcl  com_err_$suppress_name		entry() options(variable);
dcl  compare_buffer			bit (14*36) aligned;
dcl  counter			fixed bin;
dcl  cu_$arg_count_rel		entry (fixed bin, ptr, fixed bin(35));
dcl  cu_$arg_list_ptr		entry (ptr);
dcl  cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr);
dcl  datebin_$dayr_clk		entry (fixed bin(71), fixed bin);			
dcl  date_time_			entry (fixed bin(71), char(*));
dcl  dump_overlay			(14) bit (36) based (overlay_ptr);
dcl  erase			bit (1);
dcl  error			bit (1);
dcl  error_table_$bad_arg		fixed bin (35) ext static;
dcl  error_table_$bad_conversion	fixed bin (35) ext static;
dcl  error_table_$bad_label		fixed bin (35) ext static;
dcl  error_table_$bigarg		fixed bin (35) ext static;
dcl  error_table_$noarg		fixed bin (35) ext static;
dcl  error_table_$not_attached	fixed bin (35) ext static;
dcl  error_table_$tape_error		fixed bin (35) ext static;
dcl  fill_count			fixed bin;
dcl  hbound			builtin;
dcl  ioa_				entry() options(variable);
dcl  iocb_ptr			pointer;
dcl  iox_$attach_name		entry (char(*), ptr, char(*), ptr, fixed bin(35));
dcl  iox_$close			entry (ptr, fixed bin(35));
dcl  iox_$control			entry (ptr, char(*), ptr, fixed bin(35));
dcl  iox_$destroy_iocb		entry (ptr, fixed bin(35));
dcl  iox_$detach_iocb		entry (ptr, fixed bin(35));
dcl  iox_$open			entry (ptr, fixed bin, bit(1) aligned, fixed bin(35));
dcl  iox_$read_record		entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  iox_$write_record		entry (ptr, ptr, fixed bin(21), fixed bin(35));
dcl  length			builtin;
dcl  ltrim			builtin;
dcl  min				builtin;
dcl  MYNAME			char (10)	internal static
					options (constant)
					init ("gclt");
dcl  new_vol_id			char (6);
dcl  null                               builtin;
dcl  overlay_ptr			pointer;
dcl  return_count			fixed bin (21);
dcl  rtrim			builtin;
dcl  stream_name			char (12);
dcl  system_info_$installation_id entry (char(*));
dcl  substr                             builtin;
dcl  tape_label_string		bit (14*36) based (addr (tape_label));
dcl  unspec                             builtin;
%page;
dcl 1 tape_label			aligned,
    2 label_id		bit (72)	unaligned,
    2 installation_id	bit (36)	unaligned,
    2 tape_serial_number	bit (36)	unaligned,
    2 file_serial_number	bit (36)	unaligned,
    2 reel_sequence_number	bit (36)	unaligned,
    2 creation_date		bit (36)	unaligned,
    2 retention_days	bit (36)	unaligned,
    2 file_name		bit (72)	unaligned,
    2 blurb		bit (108)	unaligned,
    2 blanks		bit (36)	unaligned;


dcl 1 atd_structure		aligned,
    2 dim			char (11)	unaligned,
    2 fill_1		char (1)	unaligned,
    2 vol_id		char (6)	unaligned,
    2 fill_2		char (1)	unaligned,
    2 tracks		char (8)	unaligned,
    2 fill_3		char (1)	unaligned,
    2 write		char (6)	unaligned,
    2 fill_4		char (1)	unaligned,
    2 block_size		char (11)	unaligned,
    2 fill_5		char (1)	unaligned,
    2 density		char (13)	unaligned;

dcl 1 expect		aligned,
    2 reel_id		bit (1)	unaligned,
    2 new_vol_id		bit (1)	unaligned,
    2 density		bit (1)	unaligned,
    2 track		bit (1)	unaligned;
%page;
%include asc_to_bcd_table;


end gcos_label_tape;
