/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_sysprint: gsp: proc;


/* 

     GSP  will  translate  a  sysout  or print file, produced by the gcos
     environment simulator, from BCD to ASCII, and either print it on the
     user's  terminal,  or  write  it  into  a  file  (whose  pathname is
     supplied) for later dprinting.
    
    	USAGE:  gcos_sysprint input_path {output_path} {-lower_case}
    
      1) input_path  is  the  pathname  of a sysout or print file.  If it
    		contains  the  special records that are placed in the
    		output file by the simulator, it will be treated as a
    		sysout file, and:
    
    			a) The  execution  report  will  be located
    			   within the file and printed first

					and

    			b) The  records  for  each activity will be
    			   grouped  by report code, and printed for
    			   each activity.
    
    		Otherwise,  the file will be treated as a print file,
    		and  its records will be converted and printed in the
    		order in which they appear in the input file, with no
    		grouping or reordering of any kind.
    
      2) output_path  is  the optional pathname of an output file.  If it
    		is  not  supplied,  lines  will  be  printed  on  the
    		terminal  as they are converted.  If the file already
    		exists, it will be replaced with no warning.
    
      3) -lower_case (-lc) is an optional control argument whose use will
    		cause  BCD  alphabetic characters to be translated to
    		lower  case  ASCII,  instead  of the default of upper
    		case.
    
     Translation  is  performed  by  gcos_sys_xlate_ (or its entry point,
     gcos_sys_xlate_lc_,  if  -lower_case is given), which will recognize
     ASCII  media  codes  (those  >=  5),  and  copy the ASCII characters
     without  translation,  allowing mixed upper and lower case output to
     be produced from ASCII input records.
    
*/
%page;
/* *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*     HISTORY     *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* */


/*

   Author: Dick Snyder	1971

   Change: Tom Casey	Sep73, Dec73, Mar74, Aug74

   Change: Dave Ward	01/13/81

   Change: Dave Ward	01/20/81 potential bug indexing pdstring.

   Change: Dave Ward	02/17/81 write_line proc.  Delete initial form feed.

   Change: Scott C. Akers     09/24/81	Rewrite  the whole thing from scratch,
				using iox_ instead of ios_, increasing
				the  modularity  of  the  program, and
				chopping    out   oodles   of   GOTOs.
				Eliminate sorting of report codes.
				Ignore -temp_dir ctl_arg.

  Change: Ron Barstad         10/07/82  Increased size of outbuf to accomidate
                                        possible conversion of bcd control
                                        sequences into more than 1 ascii char 
*/
%page;
/*

			 D__e_t_a_i_l_s

     GSP  processes  two kinds of files: regular GCOS ASCII files, and
     files   which  contain  BCD  print_line  images  (variable-length
     records).

     When  GSP  is  first  called, it checks the file to see if it's a
     vanilla-flavored  GCOS file, or a SYSOUT file.  It then calls one
     of  two  routines,  if  the file fits one of these categories, or
     prints an error messages and quits if the file is inconsistent or
     nonconforming.
     
     The  first (and simplest) routine is "process_simple_file", which
     converts GCOS ASCII files to Multics ASCII in a form suitable for
     printing.  It simply reads a block from the input file, and ships
     it off to write_line for conversion and printing.

     The  second  is  "process_sysout_file",  which searches the input
     file  for the execution report, and prints it first.  If there is
     no  execution  report,  a warning is printed.  Once the execution
     report  (if  it  exists)  has  been  processed, we search for the
     individual  activities  which make up the rest of the file.  They
     are  already  ordered  within the file, but the reports within an
     activity  are  not  grouped  neatly  together.   Instead,  it  is
     possible  that  some  records for report 74 will be followed by a
     few  records  for report 00, and then some more stuff for 74.  It
     is  the  responsibility  of  GSP  to collect all the records with
     matching report codes before we can process the next report.

     Each  activity  has  an  offset  relative to the beginning of the
     input  file.   The  offset  (in 320-word blocks) is placed in the
     acty_table  entry  corresponding  to  the  ordinal  number of the
     activity.

     In  order  to  find  all  the  records which belong to a specific
     report,   we   have   two   routines,  "find_next_rept_code"  and
     "find_current_report_code",  which scan each activity looking for
     report  codes.   As  each report code is encountered, an entry is
     made  for  it  in the "encountered" table.  Once all records in a
     given  report  are printed, an entry for that report code is made
     in  the "done" table.  This insures that the report code will not
     be considered again within this activity.

		       << continued >>

*/
%page;
/*

     The  actual  output  mechanism  is  fairly  straightforward,  but
     tedious.   Once a block is read in, it is scanned for occurrences
     of  the  current  report  code.   Each  record which contains the
     current  report code is placed in an output block, and its length
     is  added  to  the  SIZE  field  of the output block control word
     (BCW).   When  the  input block is exhausted, the output block is
     shipped off to write_line for conversion and printing.

     There  were  other  possible  methods for accomplishing the task.
     The  original  method  was  to  gather up all the records for one
     report,  and  put them in a separate file.  Then, the next report
     was  gathered  up  and  put  away.   This continued until all the
     records had been picked up and put somewhere else.  This entailed
     the  opening  of  up  to  65 or 70 files for a large, complicated
     activity.   The  process  directory was often not large enough to
     hold  all these, and a special directory had to be specified as a
     workspace.   It  was  also  necessary  to move all that data back
     together  again  to  assemble  the  final  report.  This was very
     costly.

     Another  method  made  use of a linked list to keep track of each
     record  in  the  file.  This, too, entails some overhead, and the
     list could (potentially) be too large to fit in a single segment,
     and  would  overflow the process_directory.  The big advantage of
     this  method  is that it does not require shuffling large amounts
     of  data from file to file except for the final output stage.  It
     does,  however,  necessitate  the  maintenance  of  a  segment or
     segments  (each  255  pages  long)  to hold the list, so there is
     still the potential need to specify a directory for workspace.

     The  method  I  finally chose involves a bit more data-shuffling,
     but  requires  no  more  than  two  files  to  be open during the
     invocation  of  the command.  These are, naturally, the input and
     (possibly)  output files.  If the output is to be directed to the
     user's  terminal, only the input file is opened.  This completely
     eliminates  the  need  for  a  workspace  directory  of any kind,
     because  data  is moved from the input file as needed, converted,
     and  placed  in  the  output  file.   No  extra files are needed,
     regardless of the size of the input or output files.
						
     Upon  looking  over  the declarations, you will notice that there
     are  some  moderately  kinky uses of based structures.  Please be
     careful  when  modifying  the  code,  since  pointers are fragile
     creatures.   It  is  not  at all uncommon to change a pointer and
     discover that your I/O control block has magically disappeared.

			<< END >>

*/
%page;
	on   condition (cleanup)			/* Set up handlers. */
	     goto abnormal_exit;

 	call cu_$arg_count (nargs);
 	if   nargs = 0
 	then do;
 	     call com_err_ (error_table_$noarg,		/* No arguments. */
 			ENTRY_NAME,
 			USAGE);
	     goto quick_exit;
 	     end;
	call init_routine;				/* Initialize before reading args. */
	call cu_$arg_list_ptr (arglistp);		/* Get a pointer to the args */
	call process_args;				/* Process the args */
	if   code ^= 0
	then goto abnormal_exit;			/* Bail out if error. */

	call check_file;				/* See if file is sysout or vanilla flavored. */

	if   code ^= 0
	then do ;
	     call com_err_ (code, ENTRY_NAME, "^/^a",real_path);
	     goto abnormal_exit;
	     end;

	if   sysout_sw
	then call process_sysout_file;
	else call process_simple_file;

	if   code = 0
	then goto normal_exit;
	else goto abnormal_exit;


normal_exit:	;				/* If all goes well */

abnormal_exit:	;				/* When all doesn't go well */

 	call fixup_before_dying;			/* Don't leave loose ends dangling */

quick_exit:	;				/* Bail out if no args specified */

 	return;
%page;
attach_stream: proc (stream_name, iocb_ptr,		/* attaches all I/O streams */
		 pathname, mode);

dcl  stream_name	char(*)		parm;		/* INPUT */
dcl  iocb_ptr 	pointer		parm;		/* INPUT */
dcl  pathname	char(168)		parm;		/* INPUT */
dcl  mode		char(2)		parm;		/* INPUT */
dcl  attach_descr	char(200);
dcl  open_mode	fixed bin;

dcl (stream_io	init (3),
     stream_in	init (1)

    )		fixed bin internal static options (constant);


 	attach_descr = "vfile_ " || pathname;		/* Build the attach description */
 	call iox_$attach_name (stream_name,
 			   iocb_ptr,
 			   attach_descr,
 			   (null),
 			   code);

 	if code = 0				/* Don't mess with this unless */
	 | code = error_table_$noentry		/* the attachment went O.K. */

 	then do;
	     code = 0;

 	     if mode = "r"
 	     then open_mode = stream_in;
 	     else open_mode = stream_io;

 	     call iox_$open (iocb_ptr, open_mode, ("0"b), code);

 	     end;

 	return;

end attach_stream;
%page;
build_block: proc;					/* Build a block for output */

	BCW.BSN = BCW.BSN + 1;			/* Set this so write_line knows there's
						   a valid block. */
	RECORD_PTR = addr (BLOCK.DATA);
	block_ptr = addr (BCW.data);			/* Set up pointer to output block. */
	BCW.block_size = 0;				/* Start with empty output block. */
	rec_count = 0;
	do   while (rec_count < BLOCK.SIZE);		/* Move all records whose report code
						   matches the current one. */
	     if   RCW.REPORT_CODE = current_rept_code
	     then do;
		out_record = in_record;
		BCW.block_size = BCW.block_size + RCW.LENG + 1;
		block_ptr = addrel (block_ptr, RCW.LENG + 1);
		end;

	     rec_count = rec_count + RCW.LENG + 1;
	     RECORD_PTR = addrel (RECORD_PTR, RCW.LENG + 1);
	     end;

	return;

end build_block;
%page;
check_file: proc;					/* See if file is sysout or simple file.
						   If it's sysout, then set sysout_sw.
						   If it's not a legal GCOS file,
						   return a non-zero error code. */

	call rewind_file (in_ptr);
	if code = 0
	then do;
	     call read_stream (in_ptr, buffp, 16, dummy);
	     if code = 0
	     then do;
		if BCW.BSN ^= 1
		then code = error_table_$bad_file;
		else do;
		     if first_record.rec1 = "rec1"
		     then sysout_sw = "1"b;
		     else sysout_sw = "0"b;
		     end;
		end;
	     end;

	else code = 0;

	return;

end check_file;
%page;
detach_stream: proc (iocb_ptr);			/* Detach an I/O stream */

dcl  iocb_ptr	pointer		parm;		/* INPUT */

	if iocb_ptr ^= null
	then do;
	     call iox_$close (iocb_ptr, code);
	     call iox_$detach_iocb (iocb_ptr, code);
	     call iox_$destroy_iocb (iocb_ptr, code);
	     end;

 	return;

end detach_stream;
%page;
expand_path: proc (n, in_path, dir_name, e_name)returns (bit (1));

/*
Expand in_path into dir_name and e_name and combine the two into real_path.
*/

dcl  dir_name	char(*)		parm;		/* OUTPUT */
dcl  e_name	char(*)		parm;		/* OUTPUT */
dcl  n		fixed bin		parm;		/* INPUT */
dcl  in_path	char(*)		parm;		/* INPUT */

 	call expand_pathname_ (in_path, dir_name, e_name, code);

 	if code = 0
 	then do;
 	     real_path = rtrim (dir_name) || ">" || rtrim (e_name);
 	     return ("0"b);
 	     end;
 	else do;
 	     call com_err_ (code, ENTRY_NAME, "^/""^a""^[ (arg ^i)^;^s^]", in_path, n>0, n);
 	     return ("1"b);
 	     end;

end expand_path;
%page;
find_activities: proc;				/* Find activities in a sysout file */

	call rewind_file (in_ptr);
	if code = 0
	then do;
	     acty_table (1) = 0;			/* First activity */
	     acty_index = 2;
	     acty_count, acty_offset = 0;
	     unspec (buffer) = "0"b;
	     more_actys = "1"b;
	     do   while (more_actys);			/* Pick up all the activity offsets. */
		acty_table (acty_index) = 0;
		acty_offset = 0;
		do   while (acty_offset = 0);
		     call read_stream (in_ptr,	/* Grab a block */
				   buffp,
				   (sysout_chunk.chars),
				   dummy);
		     if code ^= 0
		      | eofsw			/* We should NEVER have an EOF.
						/* We'll know we're done when
						/* we see the "start ex rpt" string. */
		     then do;
			if code = 0
			then code = error_table_$end_of_info;
			call com_err_ (code,
				     ENTRY_NAME,
				     "^/Error while reading input file.");
			end;
		     else do;
			acty_offset = index (buffer, "start ex rpt");
			if acty_offset = 0
			then do;
			     acty_offset = index (buffer, "end activity");
			     if acty_offset > (4 * BCW.block_size)
			     then acty_offset = 0;
			     acty_table (acty_index) = acty_table (acty_index) + sysout_chunk.blocks;
			     end;
			else do;
			     more_actys = "0"b;
			     end;
			end;
		     end;

		acty_index = acty_index + 1;

     		end;

	     acty_count = acty_index - 3;

	     end;

	return;

end find_activities;
%page;
find_current_rept_code: proc;

/*
       Scan the block for the current report code (current_rept_code),
       and set "found" true if we find it.  Otherwise, leave it false.
       As  we're doing this, we also make entries in the "encountered"
       table, so we know what report codes are left to be checked.
*/

	rec_count = 0;
	found = "0"b;
	RECORD_PTR = addr (BLOCK.DATA);

	do   while (rec_count < BLOCK.SIZE);

	     encountered (RCW.REPORT_CODE) = "1"b;
	     if   RCW.REPORT_CODE = current_rept_code
	        & ^done (current_rept_code)
	     then found = "1"b;
	     rec_count = rec_count + RCW.LENG + 1;
	     RECORD_PTR = addrel (RECORD_PTR, RCW.LENG+1);
	     end;

	return;

end find_current_rept_code;
%page;
find_next_rept_code: proc;				/* Scan the block for the next report code.
						   Note: This routine cannot be merged with
						   find_current_rept code because it is not
						   always called. */

	rec_count = 0;
	RECORD_PTR = addr (BLOCK.DATA);
	current_rept_code = 62;			/* Gotta pretend we've already got a dead one. */

	do   while (rec_count < BLOCK.SIZE & done (current_rept_code));
	     encountered (RCW.REPORT_CODE) = "1"b;
	     current_rept_code = RCW.REPORT_CODE;
	     rec_count = rec_count + RCW.LENG + 1;
	     RECORD_PTR = addrel (RECORD_PTR, RCW.LENG+1);
	     end;

	if ^done (current_rept_code)			/* If we find a winner */
	then call make_rept_code_banner;		/* then print the banner. */

	return;

end find_next_rept_code;
%page;
fixup_before_dying: proc;				/* clean up for both normal and abnormal terminations */

 	call detach_stream (in_ptr);
	call detach_stream (out_ptr);

 	return;

end fixup_before_dying;
%page;
init_routine: proc;					/* Perform initialization stuff */


 	in_dir, in_ent, out_dir, out_ent = " ";
 	out_stream = "user_output";
	in_ptr, out_ptr = null;
	sysout_sw = "0"b;
 	buffp = addr (buffer);
 	outbufp = addr (outbuf);
	recbuffp = addrel (buffp, 1);
	recordp = addrel (buffp,2);
	output_record_count = 0;
	acty_table = 0;

	do   ptr_index = 0 to (chunk_size.blocks - 1);
	     buff_ptr(ptr_index) = addrel (buffp, (320*ptr_index));
	     end;

	return;

end init_routine;
%page;
make_rept_code_banner: proc;				/* Prints report code headers on
						   terminal or output file. */

	if   out_ptr = null
	then call ioa_$ioa_switch (iox_$user_output,
			  "^2/   SNUMB# ^5a, Activity # ^2d, REPORT CODE = ^2o^2/",
			  snumb,
			  acty_index,
			  current_rept_code);

	else call ioa_$ioa_switch (out_ptr,
			  "^|   SNUMB# ^5a, Activity # ^2d, REPORT CODE = ^2o^2/",
			  snumb,
			  acty_index,
			  current_rept_code);

	return;

end make_rept_code_banner;
%page;
more_reports_in_acty: proc returns (bit (1));		/* Returns true if there are more reports
						   in the current activity, and
						   returns false otherwise. */

	match = "0"b;
	do   test_index = 0 to 63 while (^match);
	     match = (encountered (test_index) & ^done (test_index));
	     end;

	return (match);

dcl  match	bit(1);
dcl  test_index	fixed bin;

end more_reports_in_acty;
%page;
position_file: proc (file_ptr, file_position);		/* Sets the file pointer to the indicated word */

dcl  file_ptr	ptr		parm;		/* INPUT */
dcl  file_position	fixed bin (21)	parm;		/* INPUT */

	call iox_$position (file_ptr, (2), (4 * file_position), code);

	return;

end position_file;
%page;
process_args: proc;					/* Argument processing.
						   If an error occurs, it is reported here, so
						   the caller doesn't have to do anything but die. */

	do   argno = 1 to nargs;

 	     call cu_$arg_ptr_rel	(argno, argp, argl,
				code, arglistp);

 	     if code ^= 0
 	     then do;
		call com_err_ (code, ENTRY_NAME, "^/Arg ^i.", argno);
		goto exit_p_a;
		end;

 	     if argno = 1
 	     then do;				/* First arg must be input file. */
 		in_stream = "gcos_sysprint_input_";
 		if expand_path (argno, arg, in_dir, in_ent)
 		then do;
		     code = error_table_$badopt;
		     call com_err_ (code, ENTRY_NAME,
				"^/Arg #^i (^a)",
				argno, arg);
		     goto exit_p_a;
		     end;

 		call attach_stream (in_stream, in_ptr, real_path, "r");
 		if code ^= 0
 		then do;
 		     call com_err_ (code, ENTRY_NAME,
				"^/Cannot attach input stream ^a:^/^a",
				in_stream, real_path);
 		     goto exit_p_a;
 		     end;

		end;				/* END OF ARG 1 PROCESSING */

 /* 	Get possible second argument - name of file to write output into	 */

 	     else
 	     if argno = 2
	     then do;
 		if substr (arg, 1, 1) = "-"
		then do;				/* must be control arg */
		     call process_ctl_arg;
		     if code ^= 0
		     then do;
			call com_err_ (code, ENTRY_NAME,
				     "^/Arg #^i (^a)",
				     argno, arg);
			goto exit_p_a;
			end;
		     end;

		else do;
		     filesw = "1"b;			/* it must be a file name */
		     out_stream = "GSP_output_";	/* write output file thru this stream */				

		     if expand_path (argno, arg, out_dir, out_ent)
		     then do;
			call com_err_ (code, ENTRY_NAME,
				     "^/Arg #^i (^a)",
				     argno, arg);
			goto exit_p_a;
			end;

		     call attach_stream (out_stream,	/* attach output name */
				     out_ptr,
				     real_path,
				     "rw");

		     if code ^= 0
		     then do;
			call com_err_ (code, ENTRY_NAME,
				     "^/Cannot attach output stream ^a:^/^a",
				     out_stream, real_path);
			goto exit_p_a;
			end;
		     end;
		end;				/* END OF ARG 2 PROCESSING */

 	     else if temp_sw
		then temp_sw = "0"b;		/* if previous arg was -temp_dir, this is the path */

 	     else do;
		call process_ctl_arg;
		if code ^= 0
		then do;
		     call com_err_ (code, ENTRY_NAME, arg);
		     goto exit_p_a;
		     end;
		end;
	     end;

exit_p_a:	;

	return;

end process_args;
%page;
process_ctl_arg: proc;				/* Parse the control arguments */

	code = 0;
	if arg = "-lc" | arg = "-lower_case"
	then lc_switch = "1"b;

     else if arg = "-td" | arg = "-temp_dir"
	then temp_sw = "1"b;			/* path of temp_dir will be next arg */

     else code = error_table_$badopt;

	return;

end process_ctl_arg;
%page;
process_ex_rept: proc;				/* Process the execution report */

	acty_index = 0;				/* For write_line, if error */
	call rewind_file (in_ptr);
	if   code = 0
	then call read_stream (in_ptr, buffp, 28, dummy);	/* Get info for execution report */
	if code = 0
	then do;
	     snumb = first_record.jobs_snumb;		/* Pick up SNUMB and EX REPT offset */
	     if   first_record.er_offset = 0
	     then do;
		call com_err_ (0, ENTRY_NAME,
			     "WARNING: Incomplete sysout file - execution report missing");
		end;
	     else do;

		call position_file (in_ptr, (first_record.er_offset));
		if code ^= 0
		then do;
		     call com_err_ (code, ENTRY_NAME,
				"Attempting to position input file");
		     end;
		else do;
		     call read_stream (	in_ptr,
				     buffp,
				     (chunk_size.chars),
				     dummy);

		     do   while (^eofsw & code = 0);

			do   ptr_index = 0 to (output_block_count - 1) while (code = 0);
			     buffp = buff_ptr (ptr_index);
			     call write_line;
			     end;

			if code = 0
			then do;
			     buffp = addr (buffer);

			     call read_stream (  in_ptr,
					     buffp,
					     (chunk_size.chars),
					     dummy);
			     end;
			end;
		     end;
		end;
	     end;

	return;

end process_ex_rept;
%page;
process_rept_codes: proc;				/* Collect and print report codes within an activity. */

						/* Determine the absolute file position
						   for this activity. */
	acty_offset = acty_offset + (320 * acty_table (acty_index));

	done, encountered = "0"b;			/* Reset the "done" flags for this activity. */
	current_rept_code = 62;			/* Force a guaranteed non-kosher
						   report code (76 octal). */
	encountered (62) = "1"b;			/* Gotta fake out the "more report" finder. */
       
	do   while (code = 0 & more_reports_in_acty ());

	     done (62) = "1"b;			/* So we don't keep looking for this rept code */
	     call position_file (in_ptr, (acty_offset));

	     do   rept_index = 1 to acty_table (acty_index+1) while (code = 0);

		call read_stream (  in_ptr,
				addr (BLOCK),
				1280,
				dummy);

		if code = 0
		then do;
		     if   done (current_rept_code)
		     then call find_next_rept_code;	/* Find the next report code */
		     if ^done (current_rept_code)
		     then do;
			call find_current_rept_code;	/* Scan block for current report code. */
			if   found		/* If we find it */
			then do;
			     call build_block;	/* Build the output block. */
			     call write_line;	/* Write block to output stream. */
			     end;
			end;
		     end;
		end;

	     done (current_rept_code) = "1"b;		/* Mark this report code as "used up". */

	     end;

	return;

end process_rept_codes;
%page;
process_simple_file: proc;				/* Process a regular GCOS file */

	call rewind_file (in_ptr);			/* Rewind the input file */
	call read_stream (in_ptr,			/* Pick up the first 3 blocks. */
		        buffp,
		        (chunk_size.chars),
		        dummy);

	if code ^= 0
	 | eofsw
	then call com_err_ (code, ENTRY_NAME, "^/Error while reading ^a", in_stream);
	else do   while (^eofsw);

		do   ptr_index = 0 to (output_block_count - 1);
		     buffp = buff_ptr (ptr_index);
		     call write_line;
		     end;

		buffp = addr (buffer);

		call read_stream (in_ptr,
			        buffp,
			        (chunk_size.chars),
			        dummy);

		end;

 
	return;

end process_simple_file;
%page;
process_sysout_file: proc;				/* Process a SYSOUT file */

	call process_ex_rept;			/* Do the execution summary first. */
	if code = 0				/* Bail out if it blows up. */
	then do;
	     call find_activities;			/* Locate all the activities in this file. */
	     call rewind_file (in_ptr);
	     acty_offset = 0;			/* Reset the activity offset,
						   because we use it in the
						   report-code processor to 
						   determine our absolute
						   file position. */

	     do   acty_index = 1 to acty_count;
		BCW.BSN = 0;			/* Reset before each activity. */
		call process_rept_codes;
		end;
	     end;

	return;

end process_sysout_file;
%page;
read_stream: proc (iocb_ptr, buffer_ptr, how_many, qty_got);

/*

   Read  from  the  indicated  stream  and place the data in the
   buffer pointed to by buffer_ptr.  If fewer than the requested
   number  of characters are read, we set a flag, and return the
   EOF  indication  the  next time around.  If the read comes up
   short for any reason other than error_table_$short_record, we
   return an error.

*/

dcl (iocb_ptr, buffer_ptr)	ptr		parm;	/* INPUT, INPUT */
dcl (how_many, qty_got)	fixed bin (21)	parm;	/* INPUT, OUTPUT */

dcl  short_switch		bit (1) internal static init ("0"b);

	if short_switch
	then do;
	     eofsw = "1"b;
	     short_switch = "0"b;
	     end;

	else do;
	     eofsw = "0"b;
	     call iox_$get_chars  (   iocb_ptr,
				buffer_ptr,
				how_many,
				qty_got,
				code);

	     if code ^= 0
	     then if code = error_table_$end_of_info
		then do;
		     eofsw = "1"b;
		     code = 0;
		     end;

		else if code = error_table_$short_record
						/* Short blocks are O.K. We'll get
						   an EOF next time 'round. */
		     then do;
			code = 0;
			short_switch = "1"b;
			end;

		end;

	output_block_count = ceil (divide (qty_got, (4*320), 17));

	return;

end read_stream;
%page;
rewind_file: proc (iocb_ptr);				/* Rewind the specified file */

dcl  iocb_ptr	ptr	parm;			/* INPUT */

	call iox_$position (iocb_ptr, (-1), 0, code);
	if code ^= 0
	then call com_err_ (code, ENTRY_NAME,
			"^/Could not rewind file.");

	return;

end rewind_file;
%page;
write_line: proc;					/* Write the next output line. */

	if   BCW.BSN ^= 0
	   & BCW.block_size ^= 0
	then do;

 	     if lc_switch				/* if -lowercase control argument given */
	     then call gcos_sys_xlate_lc_ (buffp,	/* translate buffer from BCD to lowercase ASCII */
				     outbufp,
				     conv_count);
 	     else call gcos_sys_xlate_ (buffp,		/* translate buffer from BCD to uppercase ASCII */
				  outbufp,
				  conv_count);

 	     output_record_count = output_record_count + 1;
	     j = conv_count;
 	     if output_record_count = 1
 	      & char1 = "014"b3

	     then call write_stream (out_ptr, addr (out1(2)), (j-1));
 	     else call write_stream (out_ptr, outbufp, (j));

 	     if code ^= 0
	     then do;
		call com_err_ (code,
			     ENTRY_NAME,
			     "^/Error attempting to write Activity # ^2d."
			  || "^/Block # ^6o (octal), ^6d (decimal)^/",
			     
			     acty_index,
			     BCW.BSN,
			     BCW.BSN);
		end;

	     end;

	return;

end write_line;
%page;
write_stream: proc (iocb_ptr, buffer_ptr, qty_sent);	/* Write on the specified output stream */

dcl  stream_ptr ptr;

dcl (iocb_ptr ptr,					/* INPUT */
     buffer_ptr ptr,				/* INPUT */
     qty_sent fixed bin (21)		) parm;		/* INPUT */

	if iocb_ptr = null				/* See if terminal I/O */
	then stream_ptr = iox_$user_output;
	else stream_ptr = iocb_ptr;

	call iox_$put_chars (stream_ptr, buffer_ptr, qty_sent, code);

	return;

end write_stream;
%page;
 /*	Variables for gcos_sysprint:		*/

 /*   IDENTIFIER		ATTRIBUTES	*/

dcl  acty_table		(1:64) fixed bin (35);
dcl (acty_index,
     acty_count,
     acty_offset)		fixed bin;
dcl (addr,
     addrel)		builtin;
dcl  arg			char (argl) based (argp);
dcl  argl			fixed bin (21);
dcl  argno		fixed bin;
dcl  argp			pointer;
dcl  arglistp		pointer;
dcl  block_ptr		pointer;
dcl  buffer		char (chunk_size.chars);
dcl  buffp		pointer;
dcl  buff_ptr		(0:chunk_size.blocks) pointer;
dcl  ceil			builtin;
dcl  char1                    bit(9) unaligned based (outbufp);
dcl  1 chunk_size 		internal static aligned options (constant),
      2 blocks		fixed bin init (3),
      2 words		fixed bin init (960),
      2 chars		fixed bin init (3840);
dcl  cleanup		condition;
dcl  code			fixed bin(35);
dcl  com_err_		entry() options(variable);
dcl  conv_count		fixed bin;
dcl  cu_$arg_count		ext entry (fixed bin);
dcl  cu_$arg_ptr_rel	ext entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr);
dcl  cu_$arg_list_ptr	ext entry (ptr);
dcl  divide		builtin;
dcl  done			(0:63) bit (1);
dcl  encountered		(0:63) bit (1);
dcl  ENTRY_NAME		char(19) int static options (constant)
			init ("gcos_sysprint(10.0)");
dcl  eofsw		bit (1);
dcl (error_table_$badopt,
     error_table_$bad_file,
     error_table_$end_of_info,
     error_table_$noarg,
     error_table_$noentry,
     error_table_$short_record

    )			ext fixed bin (35);

dcl  expand_pathname_	entry (char(*), char(*), char(*), fixed bin(35));
dcl  filesw		bit (1) init ("0"b);
dcl  file_index		fixed bin init (-1)		/* current file index used */;
dcl  found		bit (1);
dcl  gcos_sys_xlate_	ext entry (pointer, pointer, fixed bin);
dcl  gcos_sys_xlate_lc_	ext entry (pointer, pointer, fixed bin);
dcl  index		builtin;
dcl  in_dir		char(168);
dcl  in_ent		char(32);
dcl  in_ptr		pointer;
dcl  in_record		char (4*(RCW.LENG+1)) based (RECORD_PTR);
dcl  in_stream		char(32);
dcl (ioa_$ioa_switch entry() options(variable),
     iox_$position entry (ptr, fixed bin, fixed bin(21), fixed bin(35)),
     iox_$get_chars entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35)),
     iox_$put_chars entry (ptr, ptr, fixed bin(21), fixed bin(35)),
     iox_$open entry (ptr, fixed bin, bit(1) aligned, fixed bin(35)),
     iox_$close entry (ptr, fixed bin(35)),
     iox_$attach_name entry (char(*), ptr, char(*), ptr, fixed bin(35)),
     iox_$detach_iocb entry (ptr, fixed bin(35)),
     iox_$destroy_iocb entry (ptr, fixed bin(35)),
     iox_$user_output pointer static
    )		external;

dcl  j			fixed bin(21);
dcl  lc_switch		bit (1) aligned init ("0"b)	/* "1"b => "-lower_case was given" */;
dcl  more_actys		bit (1);
dcl  nargs		fixed bin;
dcl  null			builtin;
dcl  current_rept_code	fixed bin (6) unsigned unaligned;
dcl  out1			(2) char(1) unaligned based (outbufp);
dcl  outbuf		char (2100);
dcl  outbufp		pointer;
dcl  output_block_count	fixed bin;
dcl  output_record_count	fixed bin;
dcl  out_dir		char(168);
dcl  out_ent		char(32);
dcl  out_ptr		pointer;
dcl  out_record		char (4*(RCW.LENG+1)) based (block_ptr);
dcl  out_stream		char(32);
dcl  ptr_index		fixed bin;
dcl  rec_count		fixed bin (35);
dcl  recbuffp		ptr;
dcl  recordp		pointer;
dcl  rept_index		fixed bin (35);
dcl  rtrim		builtin;
dcl  snumb		char (5) init ("");
dcl  substr		builtin;
dcl  1 sysout_chunk		internal static options (constant),
      2 blocks		fixed bin (21) init (1),
      2 words		fixed bin (21) init (320),
      2 chars		fixed bin (21) init (1280);
dcl  sysout_sw		bit (1) aligned		/* "1"b => "this is a sysout file" */;
dcl  temp_sw		bit (1) aligned init ("0"b)	/* on when path of temp dir expected */;
dcl  real_path		char (168);

dcl  unspec		builtin;
dcl  USAGE		char(78)static int options(constant) init(
 "^/USAGE: gcos_sysprint input_path {output_path} {-lower_case}"
 );

dcl 1 first_record aligned based (recordp),		/* overlay for very first record of a sysout file */
     2 newline_word bit (36),				/* contains BCD newline, for benefit of gcos_sys_xlate_ */
     2 rec1 char (4),				/* must = "rec1" before we believe the rest of this stuff */
     2 er_offset fixed bin aligned,			/* offset to seek to, to read execution report */
     2 jobs_snumb char (5)				/* snumb of this job, for heading lines */;

dcl 1 BCW aligned based (buffp),
     2 BSN	fixed bin (18) unsigned	unaligned,
     2 filler_1	bit	(9)		unaligned,
     2 block_size	fixed bin	(9)  unsigned	unaligned,
     2 data	char	(1276)		unaligned;

dcl  dummy		fixed bin (21);
%page;
%include gcos_block_overlay;
end gcos_sysprint;
