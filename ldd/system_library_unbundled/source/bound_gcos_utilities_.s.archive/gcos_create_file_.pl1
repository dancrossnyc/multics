/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gcos_create_file_: proc (a_dname, a_ename, a_info_ptr, a_code);


/* ***************************************************************
   ***************************************************************
   *
   *
   *   This subroutine is called to create a segment or multisegment
   *   file that is to be used as a GCOS file with the GCOS
   *   Environment Simulator. The data structure gcos_file_info
   *   contains all GCOS file attributes that can be specified by the
   *   caller. The size is converted to a total bit count and an MSF
   *   is created if necessary.
   *
   *
   *	Written by M. R. Jordan, 12/10/77
   *
   *
   ***************************************************************
   *************************************************************** */

dcl  BITS_PER_LLINK fixed bin static internal options (constant) init (11520);
dcl  RW fixed bin (5) static internal options (constant) init (01010b);
dcl  SMA fixed bin (5) static internal options (constant) init (01011b);
dcl  a_code fixed bin (35);				/*  returned status code  */
dcl  a_dname char (*);				/*  directory name passed by caller  */
dcl  a_ename char (*);				/*  entry name passed by caller  */
dcl  a_info_ptr ptr;				/*  ptr to file info passed by caller  */
dcl  bit_count fixed bin (24);			/*  bit count passed to hcs_  */
dcl  code fixed bin (35);				/*  status code from hcs_  */
dcl  comp_name char (32) ;				/*  component name for msf component  */
dcl  comp_name_len fixed bin;				/*  length of component name  */
dcl  component fixed bin;				/*  component number  */
dcl  cu_$level_get entry () returns (fixed bin);
dcl  divide builtin;
dcl  dname char (168);				/*  directory name used in calls to hcs_  */
dcl  ecode fixed bin (35);				/*  temp status code  */
dcl  ename char (32);				/*  entry name used in calls to hcs_  */
dcl  get_group_id_$tag_star entry () returns (char (32));
dcl  hcs_$append_branchx entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
dcl  hcs_$delentry entry (char (*), char (*), fixed bin (35));
dcl  ioa_$rsnnl entry options (variable);
dcl  max_bits_per_seg fixed bin (24);
dcl  max_llinks_per_seg fixed bin;
dcl  msf_name char (168) ;				/*  name of msf being created  */
dcl  msf_name_len fixed bin;				/*  length of msf name  */
dcl  ncomp fixed bin;				/*  number of components needed  */
dcl  rings (3) fixed bin (3) ;
dcl  substr builtin;
dcl  sys_info$max_seg_size fixed bin (24) ext;
dcl  total_bit_count fixed bin (71);			/*  total bit count to represent # llinks  */
dcl  user_id char (32);				/*  person.project.*  */

%include gcos_file_info;

/*

   Copy all input arguments.

*/


	dname = a_dname;
	ename = a_ename;
	gcos_file_info_ptr = a_info_ptr;


/*

   Initialize a few essential data items.

*/


	code = 0;
	max_bits_per_seg = sys_info$max_seg_size*36;
	max_llinks_per_seg = divide (max_bits_per_seg, BITS_PER_LLINK, 17, 0);
	rings (*) = cu_$level_get ();
	user_id = get_group_id_$tag_star ();


/*

   Determine the number of components to be created and the total bit count needed.

*/


	ncomp = divide (gcos_file_info.size_in_llinks+max_llinks_per_seg-1, max_llinks_per_seg, 17);
	total_bit_count = gcos_file_info.size_in_llinks*BITS_PER_LLINK; /* BITS_PER_LLINK = 320 * 36 */


/*

   If only one component is to be created, do so.
   Otherwise, create a MSF with the required number
   of components.

*/


	if ncomp = 1 then call Create_A_Seg ();
	else call Create_A_MSF ();


/*

   We are all finished.  Clean up and get out.

*/


	a_code = code;

	return;

/*

   This internal procedure creates a multisegment file with the proper
   bit count and access.

*/


Create_A_MSF: proc ();


	     call hcs_$append_branchx (dname, ename, SMA, rings, user_id, 1, 0, (ncomp), code);
	     if code ^= 0 then return;


	     do component = 0 to ncomp-1;

		if total_bit_count <= max_bits_per_seg then bit_count = total_bit_count;
		else bit_count = max_bits_per_seg;
		total_bit_count = total_bit_count-bit_count;

		call ioa_$rsnnl ("^a^[>^]^a", msf_name, msf_name_len, dname, (dname ^= ">"), ename);
		call ioa_$rsnnl ("^d", comp_name, comp_name_len, component);

		call hcs_$append_branchx (substr (msf_name, 1, msf_name_len), substr (comp_name, 1, comp_name_len),
		     RW, rings, user_id, 0, 0, bit_count, code);
		if code ^= 0 then do;
		     call hcs_$delentry (dname, ename, ecode);
		     return;
		end;

	     end;


	     return;


	end Create_A_MSF;

/*

   This internal procedure creates a segment with the proper bit count
   and access.

*/


Create_A_Seg: proc ();


	     bit_count = total_bit_count;
	     call hcs_$append_branchx (dname, ename, RW, rings,
		user_id, 0, 0, bit_count, code);
	     if code ^= 0 then return;


	end Create_A_Seg;



     end gcos_create_file_;
