/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*

	   This  procedure  takes  a  segment  which contains BCD
	   and/or  binary card images in GCOS standard format and
	   produces   another   segment,   NAME.raw,   which   is
	   acceptable for punching by the daemon in "raw" mode.

*/
%page;
/*

   Written by Dick Snyder		??? 71
   Modified by P. Haber		AUG 73
   Modified by T. Casey		DEC 74
   Modified by R.H. Morrison		MAY 76
   Modified by S. C. Akers		NOV 81	Clean up after termination.
					Improve modularity.
					Perform argument validation.
					Convert to iox_.
					Change expand_path_ to expand_pathname_.
					Eliminate use of gcos_gsr_read_.
					Remove GOTOs.

*/
%page;
gcos_syspunch: gspn: proc;

	on   condition (cleanup)
	     call syspunch_cleanup;

	call process_arg;				/* Check for legal pathname. */
	if   code = 0
	then do;

	     call attach_input;			/* Attach the I/O streams. */
	     if   code = 0
	     then do;

		call attach_output;
		if   code = 0
		then call convert_file;		/* Do the actual work. */
		end;

	     call syspunch_cleanup;			/* Clean up after ourselves */
	     end;

	return;

%page;
attach_input: proc;					/* Attach the input stream. */

	call iox_$attach_name ("gcos_syspunch_input_",
			   in_ptr,
			   "vfile_ " || in_path,
			   (null),
			   code);

	if   code = 0
	then call iox_$open (in_ptr, 1, ("0"b), code);

	if   code ^= 0
	then call com_err_ (code, my_name, "^/^a", in_path);

	return;

end attach_input;

/*
   ******************************************************************************************
   ******************************************************************************************
   ******************************************************************************************
*/

attach_output: proc;				/* Attach the output stream. */

	call hcs_$make_seg ((out_dir), out_name, "", 11, out_ptr, code);
	if   code ^= 0
	then do;
	     if   code = error_table_$segknown
	        | code = error_table_$namedup

	     then code = 0;				/* Certain codes are O.K. */

	     else call com_err_ (code, my_name, "^/^a", out_path);
	     end;

	return;

end attach_output;
%page;
convert_bcd: proc;					/* Convert a BCD card image. */

	do   i = 1 to record_len;			/* Put a punch image of BCD char in card image */

	     out_olay.cols (i) = transmog (fixed (bit (in_olay (i), 6), 17));
	     end;

	do   j = i to 80;
	     out_olay.cols (j) = ""b;	/* Blank fill remaining columns. */
	     end;

	call get_record;				/* Get the next record. */

	return;

end convert_bcd;

/*
   ******************************************************************************************
   ******************************************************************************************
   ******************************************************************************************
*/

convert_binary: proc;				/* Convert binary card image. */

	i = record_len * 6;				/* Get bit length of record. */
	outbuf = bits;				/* Copy record into output record. */
	if   i < 960
	then substr (outbuf, i+1, 960-i) = ""b;		/* Zero out rest of punch record. */

	call get_record;				/* Get the next record. */

	return;

end convert_binary;
%page;
convert_file: proc;					/* Perform the actual conversion. */

	BLOCK.SIZE, curr_bsn, outindex, words_used = 0;	/* Initialize some things. */
	data_read, eofsw = "0"b;			/* Haven't read anything yet. */

	call get_record;				/* Get a data record. */

	if   ^eofsw
	   & code = 0
	then data_read = "1"b;			/* Remember that we read some data. */


	do   while (^eofsw & code = 0);

	     outindex = outindex+1;			/* Bump output card image index. */

	     if   RCW.MEDIA_CODE = 1			/* Binary card image. */
	     then call convert_binary;

	     else if   RCW.MEDIA_CODE = 2		/* Hollerith card image. */
		then call convert_bcd;

		else do;
		     call com_err_ (0, my_name,
				"Record not binary or Hollerith card image.^2/^a^5o^10x^a^7d^/",
				"Block #", BLOCK.BSN, "  Record #", outindex);

		     code = error_table_$improper_data_format;	/* So we get out of the loop */
		     end;
	     out_ptr = addr (out_olay.next_out_olay);
	     end;

	if   code ^= 0
	then call com_err_ (code, my_name,
			"^/Error while reading:^/^a",
			in_path);

	if   ^data_read
	   & eofsw
	then call com_err_ (0, my_name,
			"No data found on file:^/^a",
			in_path);

	call hcs_$set_bc ((out_dir), out_name,	/* Set bitcount of output seg. */
		        960*outindex, code);
	if   code ^= 0
	then call com_err_ (code, my_name,
			"^/Attempting to set bitcount on: ^/^a",
			out_path);

	return;

end convert_file;
%page;
get_record: proc;					/* Takes care of reading the
						   the input file and returning
						   a record. */

	code = 0;					/* Start off clean. */
	if   words_used >= BLOCK.SIZE			/* Any more data in this block? */
	then do;
	     call iox_$get_chars (in_ptr, addr(BLOCK),
			      1280, how_many, code);

	     if   code = 0
	     then do;
		curr_bsn = curr_bsn + 1;		/* Bump block counter. */
		if   BLOCK.BSN = curr_bsn
		then do;
		     RECORD_PTR = addr(BLOCK.DATA);
		     if   RCW.EOF_MARKER = "0"b
		     then do;
			inp = addrel (RECORD_PTR, 1);
			words_used = RCW.LENG + 1;
			record_len = RCW.LENG * 6;
			if   record_len > 80
			then record_len = 80;
			end;

		     else eofsw = "1"b;
		     end;

		else do;
		     code = error_table_$bad_file;
		     call com_err_ (0,my_name,
				"Block serial number error while reading block #^5o",
				curr_bsn,
				in_path);
		     end;

		end;
	     else if   code = error_table_$end_of_info
		then do;
		     eofsw = "1"b;
		     code = 0;
		     end;
		else call com_err_ (code, my_name,
				"^/Error while reading:^/^a",
				in_path);

	     end;

	else do;
	     RECORD_PTR = addrel (RECORD_PTR, (RCW.LENG + 1));
	     if RCW.EOF_MARKER = "0"b
	     then do;
		inp = addrel (RECORD_PTR, 1);
		words_used = words_used + RCW.LENG + 1;
		record_len = RCW.LENG * 6;
		if   record_len > 80
		then record_len = 80;
		end;

	     else eofsw = "1"b;
	     end;

	return;

end get_record;
%page;
process_arg: proc;					/* Check the input pathname for legality */

	code = 1;					/* Assume we're gonna fail.
						   It will get reset if we
						   make it to the arg-checker. */

	call cu_$arg_count (nargs);
	if   nargs < 1
	then call com_err_ (error_table_$noarg, my_name,
			"^/You must supply a pathname.");
	else if   nargs > 1
	     then call com_err_ (error_table_$too_many_args, my_name,
			     "^/Only one argument allowed.");
	     else do;

		call cu_$arg_ptr (1, argp, arglen, code);    /* Get pathname. */
		if   code = 0
		then do;

		     input_arg = substr (arg, 1, arglen);    /* Chop garbage off end of arg */

		     call expand_pathname_ (input_arg, in_dir,
				        in_name, code);
		     if   code = 0
		     then in_path =    rtrim (in_dir)
				|| ">"
				|| in_name;

		     else call com_err_ (code, my_name, "^/^a", input_arg);

		     end;

		else call com_err_ (code, my_name);

		end;

	if   code = 0
	then do;
	     call expand_pathname_$add_suffix ( in_name,    /* Build output pathname. */
					"raw",
					out_dir,
					out_name,
					code);
	     if   code = 0
	     then out_path  =   rtrim (out_dir)
			 || ">"
			 || out_name;

	     else call com_err_ (code, my_name, "^/^a.raw", in_name);
	     end;

	return;

end process_arg;
%page;
syspunch_cleanup: proc;				/* Close files and clean up. */

	if   in_ptr ^= null
	then do;
	     call iox_$close (in_ptr, code);
	     call iox_$detach_iocb (in_ptr, code);
	     call iox_$destroy_iocb (in_ptr, code);
	     end;

	return;

end syspunch_cleanup;
%page;
dcl (arglen, i, j, outindex) fixed bin;
dcl (argp, inp, out_ptr) pointer;
dcl  arg char (168) based (argp);
dcl  bits bit (i) aligned based (inp);
dcl  code fixed bin (35);
dcl  curr_bsn fixed bin (35);
dcl  data_read bit (1);
dcl  eofsw bit (1);
dcl  how_many fixed bin (21);
dcl  in_dir char (168);
dcl  in_name char (32);
dcl  in_olay (80) bit (6) unaligned based (inp);
dcl  in_path char (168);
dcl  in_ptr pointer init (null);
dcl  input_arg char (168);
dcl  my_name char(16)	internal static options (constant)
			init ("gcos_syspunch");
dcl  nargs fixed bin;
dcl  out_dir char (168);
dcl  out_name char (32);
dcl  outbuf bit (960) unaligned based (out_ptr);
dcl  out_path char (168);
dcl  record_len fixed bin;
dcl  words_used fixed bin;
%page;
dcl 1  out_olay	 	based (out_ptr)		unaligned,
     2 cols	(80)	bit (12)			unaligned,
     2 next_out_olay	bit (1)			unaligned;


%include gcos_block_overlay;
%page;
dcl  cleanup condition;

dcl (
     addr, addrel, bit, fixed,
     index, null, rtrim, substr
    )				builtin;

dcl (
     error_table_$bad_file,
     error_table_$end_of_info,
     error_table_$improper_data_format,
     error_table_$namedup,
     error_table_$noarg,
     error_table_$segknown,
     error_table_$too_many_args
    )				fixed bin(35) ext static;

dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr ext entry (fixed bin, pointer, fixed bin, fixed bin (35));
dcl  com_err_ ext entry options (variable);
dcl  expand_pathname_ ext entry (char(*), char(*), char(*), fixed bin(35));
dcl  expand_pathname_$add_suffix ext entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  hcs_$set_bc ext entry (char(*), char(*), fixed bin(24), fixed bin(35));
dcl  hcs_$make_seg ext entry (char (*) aligned, char (*), char (*), fixed bin (5), pointer, fixed bin (35));

dcl (iox_$attach_name entry (char(*), ptr, char(*), ptr, fixed bin(35)),
     iox_$close entry (ptr, fixed bin(35)),
     iox_$destroy_iocb entry (ptr, fixed bin(35)),
     iox_$detach_iocb entry (ptr, fixed bin(35)),
     iox_$get_chars entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35)),
     iox_$open entry (ptr, fixed bin, bit(1) aligned, fixed bin(35))

     )	external;
%page;
dcl  transmog (0: 63) bit (12) aligned internal static init (

     "001000000000"b,				/* 0 */
     "000100000000"b,				/* 1 */
     "000010000000"b,				/* 2 */
     "000001000000"b,				/* 3 */
     "000000100000"b,				/* 4 */
     "000000010000"b,				/* 5 */
     "000000001000"b,				/* 6 */
     "000000000100"b,				/* 7 */
     "000000000010"b,				/* 8 */
     "000000000001"b,				/* 9 */
     "000010000010"b,				/* [ */
     "000001000010"b,				/* # */
     "000000100010"b,				/* @ */
     "000000010010"b,				/* : */
     "000000001010"b,				/* > */
     "000000000110"b,				/* ? */
     "000000000000"b,				/* blank */
     "100100000000"b,				/* A */
     "100010000000"b,				/* B */
     "100001000000"b,				/* C */
     "100000100000"b,				/* D */
     "100000010000"b,				/* E */
     "100000001000"b,				/* F */
     "100000000100"b,				/* G */
     "100000000010"b,				/* H */
     "100000000001"b,				/* I */
     "100000000000"b,				/* & */
     "100001000010"b,				/* . */
     "100000100010"b,				/* ] */
     "100000010010"b,				/* ( */
     "100000001010"b,				/* < */
     "100000000110"b,				/* \ */
     "011000000000"b,				/* ^ */
     "010100000000"b,				/* J */
     "010010000000"b,				/* K */
     "010001000000"b,				/* L */
     "010000100000"b,				/* M */
     "010000010000"b,				/* N */
     "010000001000"b,				/* O */
     "010000000100"b,				/* P */
     "010000000010"b,				/* Q */
     "010000000001"b,				/* R */
     "010000000000"b,				/* - */
     "010001000010"b,				/* $ */
     "010000100010"b,				/* * */
     "010000010010"b,				/* ) */
     "010000001010"b,				/* ; */
     "010000000110"b,				/* ' */
     "101000000000"b,				/* + */
     "001100000000"b,				/* / */
     "001010000000"b,				/* S */
     "001001000000"b,				/* T */
     "001000100000"b,				/* U */
     "001000010000"b,				/* V */
     "001000001000"b,				/* W */
     "001000000100"b,				/* X */
     "001000000010"b,				/* Y */
     "001000000001"b,				/* Z */
     "001010000010"b,				/* <- (left arrow) */
     "001001000010"b,				/* , */
     "001000100010"b,				/* % */
     "001000010010"b,				/* = */
     "001000001010"b,				/* " */
     "001000000110"b				/* ! */

     ) options (constant);

end gcos_syspunch;
