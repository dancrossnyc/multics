/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_list_db:
     proc (sci_ptr, lcb_ptr);

/* DESCRIPTION:

   Procedure  to list selected information about the currently open data base.
   Available  information  includes  the  database pathname, the opening mode,
   table names, and column information.



   HISTORY:

   77-08-01 J. A. Weeldreyer: Initially written.

   77-11-01 J. A. Weeldreyer: Modified to set correct defaults.

   78-09-01 J. C. C. Jagernauth: Modified for MR7.0.

   80-06-01  Jim  Gray  : Modified to correct argument handling for the -table
   option, and to force on the -name option with it, so that it makes semantic
   sense,  and also so that it can detect unknown relation names.  The ability
   to  detect,  and issue a message about no temp tables currently defined was
   added.  Also, opening modes are now display when -pathname is acked for, as
   in  the old linus.  This was done by adding open_mode to mrds_dbcb.incl.pl1
   changing  mrds_dsl_open,  mrds_dsl_init_res,  and  adding  a  parameter  to
   dsl_$get_pn.

   81-05-12  Rickie  E.   Brinegar:  Modified to only display domain names for
   administrator if the database is secured.

   81-06-18 Rickie E. Brinegar: Modified to not check the database version.
   
   81-11-13 Rickie E. Brinegar: Added timing of dsl_ and mdbm_util_ entries.

   82-02-08 Paul W. Benjamin: ssu_ conversion.

   82-06-21 Al Dupuis: Removed a meaningless comment as requested by audit team
                       who audited ssu_ conversion.

*/

%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_temp_tab_names;
%page;
%include mrds_model_relations;
%page;
%include mrds_rslt_info;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

	dcl     (
	        code,
	        icode
	        )			 fixed bin (35);	/* internal status code */

	dcl     (i, j, k)		 fixed bin;

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     (
	        lg_flag,				/* -long */
	        nm_flag,				/* -names */
	        perm_flag,				/* -perm */
	        pn_flag,				/* -pathname */
	        rels_left,				/* on => relation names left for -table */
	        tb_flag,				/* -table */
	        temp_flag,				/* -temp */
	        tn_flag
	        )			 bit (1) unal;	/* -table_names */

	dcl     (
	        pmr_ptr		 init (null),	/* perm mr_ptr */
	        tmr_ptr		 init (null)
	        )			 ptr;		/* temp mr_ptr */

	dcl     arg		 char (char_argl.arg.arg_len (i)) based (char_argl.arg.arg_ptr (i));
	dcl     db_path		 char (168) var;
	dcl     desc		 char (120) varying;
	dcl     open_mode		 char (20);
	dcl     type		 char (10) varying;
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.linus_area_ptr);

	dcl     (
	        linus_data_$ldb_id,
	        linus_error_$incons_args,
	        linus_error_$inv_arg,
	        linus_error_$no_db,
	        linus_error_$no_tab,
	        mrds_data_$max_temp_rels,
	        mrds_error_$invalid_db_index,		/* caused by closed database */
	        sys_info$max_seg_size
	        )			 ext fixed bin (35);

	dcl     (addr, before, fixed, null, rel, substr, vclock) builtin;

	dcl     dsl_$get_pn
				 entry (fixed bin (35), char (168) var, char (20), fixed bin (35));
	dcl     dsl_$get_rslt_info
				 entry (fixed bin (35), char (*), ptr, ptr, fixed bin (35));
	dcl     dsl_$get_rslt_rels	 entry (fixed bin (35), ptr, ptr, fixed bin (35));
	dcl     dsl_$get_temp_info
				 entry (fixed bin (35), fixed bin (35), ptr, ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     mdbm_util_$display_descriptor entry (ptr) returns (char (120) varying);
	dcl     mdbm_util_$trim_descriptor entry (char (120) varying) returns (char (*));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));

	code = 0;

	mr_ptr, rslt_ptr, ca_ptr = null;

	if lcb.db_index = 0 then
	     call error (linus_error_$no_db, "");	/* must have open db. */

	call ssu_$arg_count (sci_ptr, nargs_init);

	if nargs_init = 0 then do;			/* no args, set defaults */
		tn_flag,				/* -table_names, -pathname -perm -temp */
		     pn_flag, perm_flag, temp_flag = "1"b;
		tb_flag, nm_flag, lg_flag = "0"b;
	     end;					/* if no args */

	else do;					/* process user args */

		tn_flag,				/* init flags to off */
		     pn_flag, perm_flag, temp_flag, tb_flag, nm_flag, lg_flag = "0"b;

		allocate char_argl in (lcb.static_area);
		do i = 1 to nargs_init;
		     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
		end;
		i = 1;
		do while (i <= char_argl.nargs);	/* main arg processing loop */

		     if arg = "-pn" | arg = "-pathname" then do;
			     pn_flag = "1"b;
			     i = i + 1;
			end;
		     else if arg = "-table_names" then do;
			     tn_flag = "1"b;
			     i = i + 1;
			end;
		     else if arg = "-names" then do;
			     nm_flag = "1"b;
			     i = i + 1;
			end;
		     else if arg = "-temp" then do;
			     temp_flag = "1"b;
			     i = i + 1;
			end;
		     else if arg = "-perm" then do;
			     perm_flag = "1"b;
			     i = i + 1;
			end;
		     else if arg = "-lg" | arg = "-long" then do;
			     lg_flag = "1"b;
			     i = i + 1;
			end;
		     else if arg = "-tb" | arg = "-table" then do;
			     tb_flag = "1"b;
			     num_relations_alloc = char_argl.nargs - i; /* init model rels struct. */
			     alloc model_relations set (mr_ptr) in (work_area);
			     model_relations.nrels = 0;
			     rels_left = "1"b;
			     i = i + 1;
			     do while (rels_left);
				if i > char_argl.nargs then
				     rels_left = "0"b;
				else if substr (arg, 1, 1) = "-" then
				     rels_left = "0"b;
				else do;
					model_relations.nrels = model_relations.nrels + 1;
						/* add table name to list */
					model_relations.relation_name (model_relations.nrels) =
					     arg;
					i = i + 1;
				     end;
			     end;
			     if model_relations.nrels <= 0 then
				call error (linus_error_$no_tab, "");
			end;			/* if -table */
		     else call error (linus_error_$inv_arg, arg);
		end;				/* control arg loop */

		if ^tb_flag & ^perm_flag & ^temp_flag & (nm_flag | lg_flag | tn_flag)
		then do;				/* if tables not given */
			perm_flag = "1"b;
			temp_flag = "1"b;		/* give him everything */
		     end;
		if (perm_flag | temp_flag) & ^tn_flag & ^tb_flag & ^nm_flag & ^lg_flag
		then /* type info not given */
		     tn_flag = "1"b;		/* default to table names */
		if tn_flag & nm_flag then /* check for inconsistencies */
		     call error (linus_error_$incons_args, "-table_names and -names");
		if tn_flag & lg_flag then
		     call error (linus_error_$incons_args, "-table_names and -long");
		if nm_flag & lg_flag then
		     call error (linus_error_$incons_args, "-names and -long");
	     end;					/* checking user specified args */

	if tb_flag & ^lg_flag then
	     nm_flag = "1"b;
	if tb_flag then
	     tn_flag = "0"b;

	if mr_ptr = null then /* do we need to supply tab. names */
	     if perm_flag | temp_flag then do;		/* yes */

		     if perm_flag then do;		/* need db. table names */
			     if lcb.timing_mode then
				initial_mrds_vclock = vclock;
			     call
				dsl_$get_rslt_rels (lcb.db_index, lcb.linus_area_ptr,
				pmr_ptr, icode);
			     if lcb.timing_mode then
				lcb.mrds_time =
				     lcb.mrds_time + vclock - initial_mrds_vclock;
			     if icode ^= 0 then
				call error (icode, "");
			end;			/* getting db. tab names */
		     if temp_flag then /* need temp tab names */
			if lcb.ttn_ptr ^= null then do; /* if temps defined */
				ttn_ptr = lcb.ttn_ptr;
				num_relations_alloc = mrds_data_$max_temp_rels;
				allocate model_relations in (work_area) set (tmr_ptr);
				tmr_ptr -> model_relations.nrels = 0;
				do i = 1 to mrds_data_$max_temp_rels; /* look for defined tables */
				     if temp_tab_names (i) ^= "" then do;
						/* copy those found */
					     tmr_ptr -> model_relations.nrels =
						tmr_ptr -> model_relations.nrels + 1;
					     tmr_ptr
						-> model_relations
						.
						relation_name (tmr_ptr -> model_relations.nrels)
						= temp_tab_names (i);
					end;
				end;		/* copy loop */

				if tmr_ptr -> model_relations.nrels = 0 then
				     tmr_ptr = null;/* since lcb.ttn_ptr not nulled on close */
			     end;			/* if temps defined */

		     if pmr_ptr ^= null then /* consolidate the lists */
			if tmr_ptr ^= null then do;
				num_relations_alloc =
				     pmr_ptr -> model_relations.nrels
				     + tmr_ptr -> model_relations.nrels;
				allocate model_relations in (work_area);
				do i = 1 to pmr_ptr -> model_relations.nrels;
				     model_relations.relation_name (i) =
					pmr_ptr -> model_relations.relation_name (i);
				end;
				do i = 1 to tmr_ptr -> model_relations.nrels;
				     model_relations
					.
					relation_name (pmr_ptr -> model_relations.nrels + i)
					= tmr_ptr -> model_relations.relation_name (i);
				end;
			     end;
			else do;
				mr_ptr = pmr_ptr;
				pmr_ptr = null;
			     end;
		     else if tmr_ptr ^= null then do;
			     mr_ptr = tmr_ptr;
			     tmr_ptr = null;
			end;
		end;				/* specifying tables */


	if pn_flag then do;				/* get pathname and mode */
		if lcb.timing_mode then
		     initial_mrds_vclock = vclock;
		call dsl_$get_pn (lcb.db_index, db_path, open_mode, icode);
		if lcb.timing_mode then
		     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
		if icode ^= 0 then
		     call error (icode, "");
		call ioa_ ("^/^a^/^a", db_path, open_mode);
	     end;					/* pathname and mode */

	if mr_ptr = null then do;
		if temp_flag then
		     call ioa_ ("^/No temp tables defined.");
	     end;
	else do;					/* if need table info */

		if tn_flag then /* write table names header */
		     call ioa_ ("^/TABLE^/");
		if nm_flag then /* write names only header */
		     call ioa_ ("^/^10aCOLUMN^/", "TABLE");
		else if lg_flag then /* write long header */
		     call
			ioa_ ("^/^10a^10a^23a^[^20a^;^s^20x^]TYPE^/", "TABLE",
			"COLUMN", "DECLARATION", (^lcb.secured_db | lcb.administrator),
			"DOMAIN");

		do i = 1 to model_relations.nrels;	/* major table list loop */

		     j = mrds_data_$max_temp_rels + 1;
		     if lcb.ttn_ptr ^= null then do;	/* if temps defined */
			     ttn_ptr = lcb.ttn_ptr;
			     do j = 1 to mrds_data_$max_temp_rels
				while (temp_tab_names (j)
				^= model_relations.relation_name (i));
			     end;			/* see if temp. tab. */
			end;

		     if j <= mrds_data_$max_temp_rels then do; /* if temp tab */
			     if tn_flag then /* wants name only */
				call ioa_ ("^a", model_relations.relation_name (i));
			     else do;		/* needs column info too */
				     if lcb.timing_mode then
					initial_mrds_vclock = vclock;
				     call
					dsl_$get_temp_info (lcb.db_index, (j), lcb.linus_area_ptr,
					rslt_ptr, icode);
				     if lcb.timing_mode then
					lcb.mrds_time =
					     lcb.mrds_time + vclock - initial_mrds_vclock;
				     if icode ^= 0 then
					call
					     ioa_ ("^33aUnable to obtain additional information.",
					     model_relations.relation_name (i));
				     else do;	/* got column info */
					     call
						ioa_ ("^a (temp)",
						before (model_relations.relation_name (i), " "));
						/* write out rel. name */
					     if nm_flag then /* wants names only */
						do k = 1 to rslt_info.num_attr;
						     call ioa_ ("^10x^a", rslt_info.attr.attr_name (k));
						/* write out all attr names */
						end; /* names only */
					     else call write_attr_lines; /* wants long info */
					end;	/* if obtained attr info */
				end;		/* if needs column info */
			end;			/* if temp table */

		     else do;			/* is database relation */

			     if tn_flag then /* if just name */
				call ioa_ ("^a", model_relations.relation_name (i));
			     else do;		/* wants attr info */
				     if lcb.timing_mode then
					initial_mrds_vclock = vclock;
				     call
					dsl_$get_rslt_info (lcb.db_index,
					model_relations.relation_name (i), lcb.linus_area_ptr,
					rslt_ptr, icode);
				     if lcb.timing_mode then
					lcb.mrds_time =
					     lcb.mrds_time + vclock - initial_mrds_vclock;
				     if icode ^= 0 then /* couldnt get info */
					if icode = mrds_error_$invalid_db_index then
					     call error (icode, "");
					else call
						ioa_ ("^33aUnknown table name given.",
						model_relations.relation_name (i));
				     else do;	/* got the relation info */
					     call
						ioa_ ("^a (perm)",
						before (model_relations.relation_name (i), " "));
					     if nm_flag then /* wants names only */
						do k = 1 to rslt_info.num_attr; /* write out attr names */
						     call ioa_ ("^10x^a", rslt_info.attr.attr_name (k));
						end; /* attr names */
					     else call write_attr_lines;
					end;	/* writtind attr info */
				end;		/* if got relation info */
			end;			/* if db. relation */
		end;				/* major table list loop */

	     end;					/* if had relations specified */

	call ioa_ (" ");				/* finish off with null line */
	code = 0;
	if ca_ptr ^= null
	then free char_argl;
	return;

write_attr_lines:
     proc;

/* write out long info for all attributes */

	do k = 1 to rslt_info.num_attr;
	     if lcb.timing_mode then
		initial_mrds_vclock = vclock;
	     desc =
		mdbm_util_$display_descriptor (addr (rslt_info.attr (k).descriptor))
		;
	     desc = mdbm_util_$trim_descriptor (desc);
	     if lcb.timing_mode then
		lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
	     if rslt_info.attr.key_flag (k) then
		type = "key";
	     else type = "data";
	     if rslt_info.attr.inver_flag (k) then
		type = type || " index";
	     call
		ioa_ ("^10x^33a^[^a^;^s^]^/^20x^43a^a",
		rslt_info.attr.attr_name (k), (^lcb.secured_db | lcb.administrator),
		rslt_info.attr.domain_name (k), desc, type);
	end;

     end write_attr_lines;

error:
     proc (cd, msg);

/* error procedure to write message and clean up */

	dcl     (cd, ucd)		 fixed bin (35);
	dcl     msg		 char (*);

	if ca_ptr ^= null
	then free char_argl;
	call linus_convert_code (cd, ucd, linus_data_$ldb_id);
	code = 0;
	call ssu_$abort_line (sci_ptr, ucd, msg);

     end error;

     end linus_list_db;
