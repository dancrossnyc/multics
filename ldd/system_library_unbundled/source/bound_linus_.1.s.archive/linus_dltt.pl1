/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


linus_dltt:
     proc (sci_ptr, lcb_ptr);


/* DESCRIPTION:

   Temporary  tables  are  deleted  by  calling  dsl_define_temp_rel  with  the
   negative value of the temporary table index.



   HISTORY:

   77-06-01 J. C. C. Jagernauth: Initially written.

   80-03-14  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
   lcb.linus_area_ptr instead of getting system free area.

   80-03-25 Rickie   E.  Brinegar: Modified from linus_dtt to linus_dltt.

   81-02-03  Rickie  E.   Brinegar: Modified to return a zero return code after
   printing  an error message.  This prevents blowing away the user when he/she
   attempts to delete a temp table which does not exist.
   
   81-11-13 Rickie E. Brinegar: Added timing of call to dsl_$define_temp_rel.

   82-02-10 Paul W. Benjamin: ssu_ conversion

*/

%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_select_info;
%page;
%include linus_arg_list;
%page;
%include mdbm_arg_list;
%page;
%include linus_temp_tab_names;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

	dcl     table_name		 char (char_argl.arg.arg_len (1))
				 based (char_argl.arg.arg_ptr (1));

	dcl     (
	        e_ptr		 init (null),
	        env_ptr		 init (null)
	        )			 ptr;

	dcl     cleanup		 condition;

	dcl     (addr, fixed, null, rel, vclock) builtin;

	dcl     (icode, code, out_code) fixed bin (35);

	dcl     (i, l)		 fixed bin;

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     (
	        linus_data_$dltt_id,
	        linus_error_$no_db,
	        linus_error_$no_input_arg,
	        linus_error_$no_temp_tables,
	        linus_error_$undef_temp_table,
	        mrds_data_$max_temp_rels,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     rel_index		 fixed bin (35);

	dcl     dsl_$define_temp_rel	 entry options (variable);
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));

	ca_ptr = null;

	icode, code = 0;

	if lcb.db_index = 0 then
	     call error (linus_error_$no_db, "");
	else do;
		call ssu_$arg_count (sci_ptr, nargs_init);
		if nargs_init = 0
		then call error (linus_error_$no_input_arg, "");
	     end;

	rel_index = 0;				/* Init for mrds define temp rel */
	if lcb.ttn_ptr = null then
	     call error (linus_error_$no_temp_tables, "");
	ttn_ptr = lcb.ttn_ptr;
	allocate char_argl in (lcb.static_area);
	on cleanup begin;
		if ca_ptr ^= null
		then free char_argl;
	     end;
	do i = 1 to nargs_init;
	     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
	end;
	i = 0;
	do l = 1 to mrds_data_$max_temp_rels while (i = 0);
	     if temp_tab_names (l) = table_name then do;
		     rel_index = 0 - l;		/* redefine temporary tables */
		     i = 1;
		end;
	end;
	l = l - i;				/* If I found it, then I am 1 (or i) beyond where I found it, so adjust */
	if rel_index ^< 0 | l > mrds_data_$max_temp_rels then
	     call error (linus_error_$undef_temp_table, table_name);
	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call dsl_$define_temp_rel (lcb.db_index, "", rel_index, code);
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
	if code ^= 0 then
	     call error (code, "");
	temp_tab_names (l) = "";

exit:
	if ca_ptr ^= null
	then free char_argl;
	return;



error:
     proc (err_code, string);

	dcl     err_code		 fixed bin (35);
	dcl     string		 char (*);

	if ca_ptr ^= null
	then free char_argl;
	call linus_convert_code (err_code, out_code, linus_data_$dltt_id);
	call ssu_$abort_line (sci_ptr, out_code, string);

     end error;

     end linus_dltt;
