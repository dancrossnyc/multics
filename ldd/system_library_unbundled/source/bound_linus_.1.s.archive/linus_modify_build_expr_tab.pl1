/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-04-30,Leskiw), approve(90-10-05,MCR8202),
     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
     Changes calls to assign_round_ from assign_ so that data is rounded.
                                                   END HISTORY COMMENTS */


linus_modify_build_expr_tab:
     proc (lcb_ptr, start_ptr, string_len, si_index, td_ptr, mod_lit_ptr, mod_lit_offset, si_ptr, code);



/* DESCRIPTION:

   This  procedure is an Operator Precedence parser that is used by the select
   clause translator and the modify request processor.  
   
   

   HISTORY:
   
   77-08-01 J. C. C. Jagernauth: Initially written.
   
   80-01-11    Rickie    E.     Brinegar:    Modified   to   use   the   entry
   mdbm_util_$complex_data_class.
   
   80-03-12  Rickie E.  Brinegar: Modified to use temporary segment pointed to
   by lcb.linus_area_ptr instead of getting system free area.
   
   81-07-02  Rickie E.  Brinegar: Removed the useless cleanup handler, added a
   go  to  exit  statement in the error procedure and a return statement after
   the exit label.  This is to correct TR9290.
   
   81-07-13   Rickie   E.   Brinegar:  Removed  trappping  of  the  conversion
   condition.  This is now relegated to the higher modules.

*/

%include linus_lcb;
%page;
%include linus_select_info;
%page;
%include linus_expression;
%page;
%include linus_token_data;
%page;
%include linus_variables;

	dcl     expr_type		 (9) fixed bin (4) unal int static options (constant) init (
				 /* Map token key to type or op_code */
				 0, 6,		/* Data base item */
				 2,		/* linus variable */
				 1,		/* constant */
				 0, 3,		/* multiply */
				 4,		/* divide */
				 1,		/* add */
				 2);		/* subtract */
	dcl     CMPX_FD		 bit (36) aligned;
	dcl     CHAR_DESC		 bit (36) aligned;
	dcl     REAL_FD		 bit (36) aligned;
	dcl     FD59		 bit (36) aligned int static options (constant) init ("100101000000000000000000000000111011"b);
						/* Float decimal */
	dcl     CFD59		 bit (36) aligned int static options (constant) init ("100110000000000000000000000000111011"b);

/* Complex float decimal */
	dcl     OPERATOR		 init (15) fixed bin (4) int static options (constant);

	dcl     prec_relations	 (0:9, 0:9) fixed bin (4) int static options (constant) init (
				 /*
						   1 = reduce_op [( .> )  E op_code E ]
						   2 = reduce_paren [( .= )  (E)]
						   3 = shift_token [( <. )]
						   4 = end of expression [variable followed by variable]
						   5 = shift only if this is the first item
						   5 = reduce_var [reduce to E]
						   8 = error [LP followed by invalid token]
						   9 = make sure the first token shifted is not an operator or RP
						   10 = make sure you are not reducing E + ""
						   11 = end of expression

						   the generic term "variable" is used to represent
						   one of the following:
						   column specification
						   linus variable
						   constant
						   set function result
						   scalar function result

						   ROW and COLUMN names correspond in the table below */
				 11, 8, (3) 6, 3, (4) 9, /* NULL     11 8 6 6 6 3 9 9 9 9  */
				 (10) 2,		/* RP        2 2 2 2 2 2 2 2 2 2  */
				 (3) ((2) 5, (4) 4, (4) 5), /* COL_SPEC  5 5 4 4 4 4 5 5 5 5  */
						/* LINUS_VAR 5 5 4 4 4 4 5 5 5 5  */
						/* CONST     5 5 4 4 4 4 5 5 5 5  */
				 8, 9, (4) 3, (4) 9,/* LP        8 9 3 3 3 3 9 9 9 9  */
				 (2) (10, 1, (4) 3, (4) 1), /* STAR     10 1 3 3 3 3 1 1 1 1  */
						/* DIV      10 1 3 3 3 3 1 1 1 1  */
				 (2) (10, 1, (6) 3, (2) 1)); /* PLUS     10 1 3 3 3 3 3 3 1 1  */
						/* MINUS    10 1 3 3 3 3 3 3 1 1  */

	dcl     1 arg_len_bits	 based,
		2 pad		 bit (12) unal,
		2 length		 bit (24) unal;	/* arg_len for system standard argument list */

	dcl     1 stack		 aligned based (sk_ptr),
		2 nargs		 fixed bin,
		2 token_data	 (linus_data_$stk_depth refer (stack.nargs)),
		  3 key		 fixed bin (17) unal,
		  3 must_free	 bit (1) unal,
		  3 reduced	 bit (1) unal,	/* On if item has been reduced */
		  3 reserved	 bit (16) unal,
		  3 length	 fixed bin (35),
		  3 t_ptr		 ptr,
		  3 desc		 bit (36),
		  3 bit_length	 fixed bin (35),
		  3 assn_ptr	 ptr,
		  3 assn_type	 fixed bin,
		  3 assn_len	 fixed bin (35),
		  3 fn_ptr	 ptr,		/* Pointer to function structure */
		  3 type		 fixed bin (4) unal,
		  3 op_code	 fixed bin (3) unal;

	dcl     token_item		 char (token_data.length) based (token_data.t_ptr);
						/* For shifting */
	dcl     (i, j, k, temp_token_key, temp_stack_key, target_type, si_index, source_type, string_len, tos_key) fixed bin;
						/* Points to first terminal on top of the work stack */

	dcl     (bit_len, code, cs_len, icode, mod_lit_offset, previous_pos, source_length, start_pos, target_length) fixed bin (35);

	dcl     constant_string	 char (cs_len) based (cs_ptr);

	dcl     (cmpx, test)	 bit (1);

	dcl     (addr, bit, fixed, mod, null, rel, search, substr) builtin;

	dcl     (
	        sk_ptr		 init (null),
	        cs_ptr		 init (null),
	        start_ptr,
	        mod_lit_ptr,
	        lit_ptr		 init (null)
	        )			 ptr;

	dcl     expr_name		 (linus_data_$max_expr_items) char (32) init ((linus_data_$max_expr_items) (1)"");

	dcl     var_string		 bit (linus_data_$lit_string_size) based (mod_lit_ptr);

	dcl     (
	        linus_data_$stk_depth,
	        linus_data_$lit_string_size,
	        linus_data_$max_expr_items,
	        sys_info$max_seg_size,
	        linus_error_$op_follow_lp,
	        linus_error_$too_many_expr_items,
	        linus_error_$mrds_item_not_def,
	        linus_error_$inv_expr
	        )			 fixed bin (35) ext;

	dcl     linus_modify_gt	 entry (ptr, ptr, fixed bin, fixed bin (35), ptr, ptr, fixed bin (35));
	dcl     linus_assign_data	 entry (bit (36), fixed bin, fixed bin (35));
	dcl     assign_round_		 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     work_area		 area based (linus_area_ptr);
	dcl     mdbm_util_$complex_data_class entry (ptr) returns (bit (1));

	sk_ptr, ex_ptr, cs_ptr = null;

	start_pos = 1;				/* starting position is always the first character */

	CHAR_DESC = "101010100000000000000000000000000000"b;
	REAL_FD = "100101000000000000000000000000000000"b;
	CMPX_FD = "100110000000000000000000000000000000"b;
	nelems_init = linus_data_$stk_depth;		/* For expression structure allocation */


	icode, code, tos_key = 0;			/* Top of stack item that is not reduced */

	cmpx, test = "0"b;
	lv_ptr = lcb.lv_ptr;			/* Init linus_variables */

	allocate stack in (work_area);
	stack.nargs = 0;				/* Work stack is empty */
	allocate expression in (work_area);
	expression.nelems = 0;			/* Expression stack is empty */
	call get_token;

	do while (^test);				/* MAIN LOOP */
	     if token_data.key > MINUS then
		temp_token_key = NULL;		/* invalid token */
	     else temp_token_key = token_data.key;	/* good token */
	     if tos_key = 0 then
		temp_stack_key = 0;
	     else temp_stack_key = stack.token_data.key (tos_key);
						/* take key off stack */
	     if ^test then do;

		     go to case (prec_relations (temp_stack_key, temp_token_key));

case (1):
		     call reduce_op;		/* E op E is on work stack */
		     go to end_case;

case (2):
		     call reduce_paren;		/* (E) is on work stack */
		     go to end_case;


case (3):
		     call shift_token;		/* place token on work stack */
		     call get_token;
		     go to end_case;

case (4):
		     call reduce_var;		/* end of expression -- variable followed by variable */
		     if tos_key > 1 then
			call reduce_op;		/* After this call only E should be on work stack */
		     test = "1"b;			/* Exit */
		     go to end_case;

case (5):
		     call reduce_var;		/* place variable on expression  stack */
		     go to end_case;

case (6):
		     if tos_key ^= stack.nargs then
			test = "1"b;
		     else do;			/* shift */
			     call shift_token;
			     call get_token;
			end;
		     go to end_case;

case (8):
		     call error (linus_error_$inv_expr);/* LP followed by invalid token */
		     go to end_case;

case (9):
		     if tos_key = stack.nargs then /* make sure the first token shifted is not an operator or RP */
			call error (linus_error_$op_follow_lp);
		     else do;
			     call shift_token;	/* then place token on work stack */
			     call get_token;
			end;
		     go to end_case;

case (10):
		     if tos_key = stack.nargs then /* make sure you are not reducing E + "" */
			call error (linus_error_$inv_expr);
		     else call reduce_op;		/* E op E is on work stack */
		     go to end_case;

case (11):
		     test = "1"b;			/* end of expression */

end_case:
		end;
	end;					/* END MAIN LOOP */

	if token_data.key ^= NULL then
	     start_pos = previous_pos;
	if ^(stack.nargs = 1 & stack.token_data.reduced (1)) | start_pos <= string_len then do;
						/* Make sure expression was good */
		ex_ptr = null;
		call error (linus_error_$inv_expr);
	     end;
	else do;
		if expression.nelems = 1 then
		     expression.rslt_desc = expression.elem.desc (1);
						/* only one item in expression */
		else if cmpx then
		     expression.rslt_desc = CFD59;	/* Init to complex float decimal 59 */
		else expression.rslt_desc = FD59;	/* Init to float decimal 59 */


		select_info.user_item.item_ptr (si_index) = ex_ptr; /* pass pointer to expression structure */
		select_info.user_item.rslt_desc (si_index) = expression.rslt_desc;
						/* pass expression info in select_info.user_item.rslt_structure */
		call
		     linus_assign_data ((select_info.user_item.rslt_desc (si_index)), select_info.user_item.rslt_assn_type (si_index),
		     select_info.user_item.rslt_assn_len (si_index));

		call
		     alloc_lit (select_info.user_item.rslt_assn_type (si_index), select_info.user_item.rslt_assn_len (si_index),
		     select_info.user_item.rslt_assn_ptr (si_index), select_info.user_item.rslt_bit_len (si_index));
	     end;

	sk_ptr = null;

exit:
	return;

get_token:
     proc;

	previous_pos = start_pos;
	call linus_modify_gt (lcb_ptr, start_ptr, string_len, start_pos, td_ptr, si_ptr, code);
	if icode ^= 0 then
	     call error (icode);
	if token_data.key > CONST then
	     token_data.key = token_data.key - 2;	/* this allows proper access to the
						   precedence table since set_fn and scal_fn were removed */

     end get_token;

shift_token:
     proc;					/* Push token data onto work stack */
	stack.nargs = stack.nargs + 1;		/* push work stack */
	tos_key = stack.nargs;			/* set top of stack index */
	stack.token_data.fn_ptr (stack.nargs) = null;
	stack.token_data.reduced (stack.nargs) = "0"b;
	if token_data.key > CONST then do;		/* Item is an operator */
		stack.token_data.type (stack.nargs) = OPERATOR;
		stack.token_data.op_code (stack.nargs) = expr_type (token_data.key);
	     end;
	else do;					/* item is not an operator */
		stack.token_data.op_code (stack.nargs) = NULL;
		stack.token_data.type (stack.nargs) = expr_type (token_data.key);
	     end;
	if token_data.key = LINUS_VAR then
	     call shift_linus_var;
	else if token_data.key = CONST then
	     call shift_const;
	else if token_data.key = COL_SPEC then
	     call shift_col_spec;
	call shift_comm;
     end shift_token;

reduce_op:
     proc;					/* E op_code E is on top of the work stack */
	call push_expression;
	tos_key = tos_key - 2;
	stack.nargs = stack.nargs - 2;		/* point to E */
     end reduce_op;


reduce_paren:
     proc;					/* (E) is on top of the work stack */
	stack.token_data.reduced (tos_key), stack.token_data.reduced (tos_key - 2) = "1"b;
						/* pushed */
	tos_key = tos_key - 3;
	stack.nargs = stack.nargs - 2;
     end reduce_paren;


reduce_var:
     proc;					/* a variable is on the work stack */
	call push_expression;			/* place variable on expression stack */
	tos_key = tos_key - 1;
     end reduce_var;

push_expression:
     proc;					/* Data is removed from the work stack and pushed onto the expression stack */
	stack.token_data.reduced (tos_key) = "1"b;	/* Set flag to indicate that item was pushed */
	expression.nelems = expression.nelems + 1;	/* Point to new top of stack */
	expression.elem.type (expression.nelems) = stack.token_data.type (tos_key);
						/* Push data */
	expression.elem.op_code (expression.nelems) = stack.token_data.op_code (tos_key);
	if expression.elem.type (expression.nelems) ^= OPERATOR then do;
		expression.elem.desc (expression.nelems) = stack.token_data.desc (tos_key);
		expression.elem.bit_length (expression.nelems) = stack.token_data.bit_length (tos_key);
		expression.elem.assn_ptr (expression.nelems) = stack.token_data.assn_ptr (tos_key);
		expression.elem.assn_type (expression.nelems) = stack.token_data.assn_type (tos_key);
		expression.elem.assn_len (expression.nelems) = stack.token_data.assn_len (tos_key);
		expression.elem.fn_ptr (expression.nelems) = stack.token_data.fn_ptr (tos_key);
	     end;

	if stack.token_data.must_free (tos_key) then
	     stack.token_data.t_ptr (tos_key) = null;
	if mdbm_util_$complex_data_class (addr (expression.elem.desc (expression.nelems))) then
	     cmpx = "1"b;
     end push_expression;

shift_common:
     proc (desc, bit_length, assn_ptr, assn_type, assn_len);
	dcl     desc		 bit (36) aligned;
	dcl     (bit_length, assn_len) fixed bin (35);
	dcl     assn_ptr		 ptr;
	dcl     assn_type		 fixed bin;
	stack.token_data.desc (stack.nargs) = desc;
	stack.token_data.bit_length (stack.nargs) = bit_length;
	stack.token_data.assn_ptr (stack.nargs) = assn_ptr;
	stack.token_data.assn_type (stack.nargs) = assn_type;
	stack.token_data.assn_len (stack.nargs) = assn_len;
	call shift_comm;
     end shift_common;


shift_comm:
     proc;
	stack.token_data.key (stack.nargs) = token_data.key;
	stack.token_data.must_free (stack.nargs) = token_data.must_free;
	stack.token_data.length (stack.nargs) = token_data.length;
	stack.token_data.t_ptr (stack.nargs) = token_data.t_ptr;
     end shift_comm;


shift_linus_var:
     proc;
	i = token_data.length;
	call
	     shift_common (variables.var_info.desc (i), variables.var_info.bit_len (i), variables.var_info.var_ptr (i),
	     variables.var_info.assn_type (i), variables.var_info.assn_len (i));
     end shift_linus_var;

shift_const:
     proc;

	dcl     1 token_data_temp	 like token_data;

	dcl     first_char		 char (1) based (token_data_temp.t_ptr);
	dcl     offset		 (10) bit (1) based;
	dcl     repl_factor		 char (repl_len) based (repl_ptr);
	dcl     constant_desc	 bit (36);
	dcl     one_repl_ch		 char (1) based (orc_ptr);
	dcl     one_source_ch	 char (1) based (osc_ptr);

	dcl     (
	        ci_ptr		 init (null),
	        repl_ptr		 init (null),
	        orc_ptr		 init (null),
	        osc_ptr		 init (null),
	        source_ptr		 init (null)
	        )			 ptr;

	dcl     k			 fixed bin;


	dcl     repl_flag		 bit (1);

	dcl     (repl_fac, repl_len, ci_len) fixed bin (35);

	dcl     RIGHT_PAREN		 char (1) int static options (constant) init (")");
	dcl     LEFT_PAREN		 char (1) int static options (constant) init ("(");
	dcl     QUOTE		 char (1) int static options (constant) init ("""");
	dcl     BIT_DESC		 bit (36) init ("101001100000000000000000000000000000"b);

	token_data_temp = token_data;
	repl_flag = "0"b;
	source_length = token_data.length;
	source_ptr = token_data.t_ptr;
	if (search (token_item, "i")) > 0 then
	     constant_desc = CMPX_FD;
	else constant_desc = REAL_FD;
	addr (constant_desc) -> arg_len_bits.length = substr (bit (token_data.length), 12, 24);
						/* set length of float dec descriptor */
	if first_char = LEFT_PAREN then do;
		repl_flag = "1"b;			/* there is a replication factor */
		repl_ptr, token_data.t_ptr = addr (token_data.t_ptr -> offset (10));
		do j = 2 to token_data.length while (first_char ^= RIGHT_PAREN);
		     token_data.t_ptr = addr (token_data.t_ptr -> offset (10));
		end;
		repl_len = j - 2;
		token_data.length = token_data.length - j;
		token_data.t_ptr = addr (token_data.t_ptr -> offset (10));
		token_data_temp = token_data;
		repl_fac = fixed (repl_factor);
	     end;
	if first_char = QUOTE then do;
		ci_ptr, token_data_temp.t_ptr = addr (token_data_temp.t_ptr -> offset (10));
		do j = 2 to token_data_temp.length while (first_char ^= QUOTE);
		     token_data_temp.t_ptr = addr (token_data_temp.t_ptr -> offset (10));
		end;
		ci_len = token_data_temp.length - 2;
		if j = token_data_temp.length then
		     constant_desc = CHAR_DESC;
		else do;
			ci_len = token_data_temp.length - 1;
			constant_desc = BIT_DESC;
		     end;
		addr (constant_desc) -> arg_len_bits.length = addr (ci_len) -> arg_len_bits.length;
		source_ptr = ci_ptr;
		source_length = ci_len;
		if repl_flag then do;
			source_length, cs_len = repl_fac * ci_len;
			addr (constant_desc) -> arg_len_bits.length = addr (cs_len) -> arg_len_bits.length;
			allocate constant_string in (work_area);
			source_ptr, orc_ptr = cs_ptr;
			do j = 1 to repl_fac;	/* to number of replication factor */
			     osc_ptr = ci_ptr;
			     do k = 1 to ci_len;	/* one for each character in string */
				one_repl_ch = one_source_ch;
				orc_ptr = addr (orc_ptr -> offset (10));
				osc_ptr = addr (osc_ptr -> offset (10));
			     end;
			end;
		     end;
	     end;
	call linus_assign_data (constant_desc, target_type, target_length);
						/* returns type and length */
	call alloc_lit (target_type, target_length, lit_ptr, bit_len);
						/* returns pointer to  literal pool and bit length */
	addr (CHAR_DESC) -> arg_len_bits.length = substr (bit (token_data.length), 12, 24);
						/* set length of char descriptor */
	call linus_assign_data ((CHAR_DESC), source_type, source_length);
						/* returns type and length */
	call assign_round_ (lit_ptr, target_type, target_length, source_ptr, source_type, source_length);
	call shift_common ((constant_desc), bit_len, lit_ptr, target_type, target_length);

	if cs_ptr ^= null then
	     cs_ptr = null;

     end shift_const;

shift_col_spec:
     proc;					/* index is passed in token_data_length */

	i = token_data.length;
	if i = 0 | i > select_info.n_mrds_items then
	     call error (linus_error_$mrds_item_not_def);
	do k = 1 to linus_data_$max_expr_items while (expr_name (k) ^= "" & expr_name (k) ^= select_info.user_item.name (i));
	end;
	if k > linus_data_$max_expr_items then
	     call error (linus_error_$too_many_expr_items);
	else if expr_name (k) = "" then
	     expr_name (k) = select_info.user_item.name (i);
	call
	     shift_common (select_info.mrds_item.desc (i), select_info.mrds_item.bit_len (i),
	     lcb.si_ptr -> select_info.mrds_item.arg_ptr (i), select_info.mrds_item.assn_type (i),
	     select_info.mrds_item.assn_len (i));
     end shift_col_spec;

alloc_lit:
     proc (type, length, lit_ptr, bit_len);

/* Procedure to allocate space for a literal in the literal string, given the assign_
   type code and length.  A pointer and bit length are returned.  */
	dcl     type		 fixed bin;
	dcl     lit_ptr		 ptr;
	dcl     (length, bit_len, align_req, needed) fixed bin (35);

	dcl     1 alen		 aligned based (addr (length)),
		2 q		 fixed bin (17) unal,
		2 p		 fixed bin (17) unal;
	dcl     align_array		 (45) fixed bin int static options (constant) init (0, 36,
						/* real fixed bin short aligned */
				 0,		/* real fixed bin short unaligned */
				 72,		/* real fixed bin long aligned */
				 0,		/* real fixed bin long unaligned */
				 36,		/* real float bin short aligned */
				 0,		/* real float bin short unaligned */
				 72,		/* real float bin long aligned */
				 0,		/* real float bin long unaligned */
				 72,		/* complex fixed bin short aligned */
				 0,		/* complex fixed bin short unaligned */
				 72,		/* complex fixed bin long aligned */
				 0,		/* complex fixed bin long unaligned */
				 72,		/* complex float bin short aligned */
				 0,		/* complex float bin short unaligned */
				 72,		/* complex float bin long aligned */
				 0,		/* complex float bin long unaligned */
				 36,		/* real fixed dec aligned */
				 9,		/* real fixed dec unaligned */
				 36,		/* real float dec aligned */
				 9,		/* real float dec unaligned */
				 36,		/* complex fixed dec aligned */
				 9,		/* complex fixed dec unaligned */
				 36,		/* complex float dec aligned */
				 9,		/* complex float dec unaligned */
				 (12) 0, 36,	/* bit aligned */
				 0,		/* bit uanligned */
				 36,		/* var bit aligned */
				 36,		/* var bit unaligned */
				 36,		/* char aligned */
				 9,		/* char unaligned */
				 36,		/* var char aligned */
				 36);		/* var char unaligned */

	dcl     bl_factors		 (45, 3) fixed bin (11) int static options (constant) init ((3) 0,
						/* pad */
				 0, 36, 0,	/* real fixed bin short aligned */
				 1, 1, 0,		/* real fixed bin short unaligned */
				 0, 72, 0,	/* real fixed bin long aligned */
				 1, 1, 0,		/* real fixed bin long unal */
				 0, 36, 0,	/* real float bin short aligned */
				 1, 9, 0,		/* real float bin short unal */
				 0, 72, 0,	/* real float bin long aligned */
				 1, 9, 0,		/* real float bin long unal */
				 0, 72, 0,	/* complex fixed bin short aligned */
				 2, 2, 0,		/* complex fixed bin short unal */
				 0, 144, 0,	/* complex fixed bin long aligned */
				 2, 2, 0,		/* complex fixed bin long unal */
				 0, 72, 0,	/* complex float bin short aligned */
				 2, 18, 0,	/* complex float bin short unal */
				 0, 144, 0,	/* complex folat bin long aligned */
				 2, 18, 0,	/* complex float bin long unal */
				 9, 9, 36,	/* real fixed dec aligned */
				 9, 9, 0,		/* real fixed dec unal */
				 9, 18, 36,	/* real float dec aligned */
				 9, 18, 0,	/* real float dec unal */
				 18, 18, 36,	/* complex fixed dec aligned */
				 18, 18, 0,	/* complex fixed dec unal */
				 18, 18, 36,	/* complex float dec aligned */
				 18, 36, 0,	/* complex float dec unal */
				 (36) 0,		/* illegal types */
				 1, 0, 36,	/* bit aligned */
				 1, 0, 0,		/* bit unal */
				 1, 36, 36,	/* var bit aligned */
				 1, 36, 36,	/* var bit unal */
				 9, 0, 36,	/* char aligned */
				 9, 0, 0,		/* char unal */
				 9, 36, 36,	/* char var aligned */
				 9, 36, 36);	/* char var unal */
	dcl     COMP_FLT_DEC	 fixed bin int static options (constant) init (25);

	dcl     var_array		 (0:linus_data_$lit_string_size - 1) bit (1) unal based (mod_lit_ptr);

	if mod_lit_ptr = null then do;		/* if literal pool not yet allocated */
		allocate var_string in (work_area);
		var_string = "0"b;
		mod_lit_offset = 0;
	     end;

	align_req = align_array (type);		/* find type of alignment needed */
	if align_req > 0 then do;			/* if need to align */
		needed = align_req - mod (mod_lit_offset, align_req);
		if needed < align_req then /* if need to adjust */
		     mod_lit_offset = mod_lit_offset + needed;
	     end;					/* aligning */

	lit_ptr = addr (var_array (mod_lit_offset));

	if type <= COMP_FLT_DEC then /* bit len for arith. type */
	     bit_len = bl_factors (type, 1) * alen.p + bl_factors (type, 2);
	else /* bit len for string type */
	     bit_len = bl_factors (type, 1) * length + bl_factors (type, 2);
	if bl_factors (type, 3) > 0 then do;		/* if padding needed */
		needed = bl_factors (type, 3) - mod (bit_len, bl_factors (type, 3));
		if needed < bl_factors (type, 3) then /* if need to pad out */
		     bit_len = bit_len + needed;
	     end;					/* if padding */

	if mod_lit_offset + bit_len - 1 > linus_data_$lit_string_size then
	     lit_ptr = null;
	else mod_lit_offset = mod_lit_offset + bit_len;	/* keep offset current */

	return;

     end alloc_lit;



error:
     proc (inter_code);

	dcl     inter_code		 fixed bin (35);

	code = inter_code;

	go to exit;

     end error;


     end linus_modify_build_expr_tab;
