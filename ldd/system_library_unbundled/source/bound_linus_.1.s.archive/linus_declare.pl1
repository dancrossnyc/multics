/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_declare:
     proc (sci_ptr, lcb_ptr);

/* DESCRIPTION:

   This procedure implements the LINUS declare request.  There must be exactly
   two  arguments  supplied,  namely  function  name  and  function type.  Set
   functions are threaded into the set function list, and scalar functions are
   declared  to MRDS and their names are threaded into a scalar function list.

   

   HISTORY:

   77-06-01 J. A. Weeldreyer: Initially written.

   80-10-17  Rickie  E.   Brinegar: changed hcs_$make_ptr for a combination of
   expand_pathname_ and cv_ptr_ inorder to allow for absolute pathnames in set
   functions.   A similar change was made to mrds_dsl_declare to handle scalar
   functions.

   80-11-03 Rickie E. Brinegar: cv_ptr_ changed to cv_entry_.
   
   81-11-13 Rickie E. Brinegar: Added timing of dsl_$declare.
   
   82-02-10 Paul W. Benjamin: ssu_ conversion

   82-06-21 Al Dupuis: Following changes resulting from audit of ssu_
                       conversion. Remove kill/nokill comment from code
                       as it was no longer meaningfull. Remove NO_KILL
                       usage as it no longer had meaning either.
*/

%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_scal_fn_info;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

	dcl     (
	        code,
	        icode
	        )			 fixed bin (35);	/* internal status code */

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     name		 char (char_argl.arg.arg_len (1)) based (char_argl.arg.arg_ptr (1));
						/* function name */
	dcl     type		 char (char_argl.arg.arg_len (2)) based (char_argl.arg.arg_ptr (2));
						/* function type */
	dcl     file_name		 char (168) varying;

	dcl     (directory, entry_name) char (168);

	dcl     (
	        linus_data_$dcl_id,
	        linus_error_$bad_num_args,
	        linus_error_$inv_fn_type,
	        linus_error_$no_db,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     cleanup		 condition;

	dcl     (addr, fixed, null, rel, rtrim, vclock) builtin;

	dcl     calc_entry		 entry variable;	/* virtual entry to set function calc. entry */

	dcl     cv_entry_		 entry (char (*), ptr, fixed bin (35)) returns (entry);
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     dsl_$declare	 entry (fixed bin (35), char (*), fixed bin (35));
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     linus_thread_fn_list
				 entry (ptr, entry, char (168) varying, char (32) varying,
				 fixed bin (35));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));

	sclfi_ptr, ca_ptr = null;			/* initiallize */
	on cleanup call tidy_up;

	if lcb.db_index = 0 then
	     call error (linus_error_$no_db, "");
	call ssu_$arg_count (sci_ptr, nargs_init);
	if nargs_init = 0 then
	     call error (linus_error_$bad_num_args, "");
	if nargs_init ^= 2 then /* must have correct no. args */
	     call error (linus_error_$bad_num_args, "");
	allocate char_argl in (lcb.static_area);
	call ssu_$arg_ptr (sci_ptr, 1, char_argl.arg.arg_ptr (1), char_argl.arg.arg_len (1));
	call ssu_$arg_ptr (sci_ptr, 2, char_argl.arg.arg_ptr (2), char_argl.arg.arg_len (2));
	file_name = rtrim (name);

	if type = "set" then do;			/* set function */
		call expand_pathname_ (name, directory, entry_name, icode);
		if icode ^= 0 then
		     call error (icode, name);
		calc_entry =
		     cv_entry_ (rtrim (directory) || ">" || rtrim (entry_name) || "$"
		     || rtrim (entry_name) || "_calc", null, icode);
		if icode ^= 0 then
		     call error (icode, file_name || " calc. entry.");
		call
		     linus_thread_fn_list (lcb_ptr, calc_entry, file_name,
		     rtrim (entry_name), icode);	/* put into fn. list */
		if icode ^= 0 then
		     call error (icode, name);
	     end;					/* if set function */

	else if type = "scalar" then do;		/* if scalar function */
		if lcb.timing_mode then
		     initial_mrds_vclock = vclock;
		call dsl_$declare (lcb.db_index, name, icode); /* let MRDS know about it */
		if lcb.timing_mode then
		     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
		if icode ^= 0 then
		     call error (icode, name);
		allocate scal_fn_info in (lcb.static_area);
		scal_fn_info.name = rtrim (entry_name); /* fill in scal_fn_info block */
		scal_fn_info.fwd_ptr = lcb.sclfi_ptr;	/* put at head of list */
		lcb.sclfi_ptr = sclfi_ptr;
	     end;					/* if scalar function */
	else call error (linus_error_$inv_fn_type, type);

	if ca_ptr ^= null
	then free char_argl;
	return;

error:
     proc (cd, msg);

/* error procedure */

	dcl     (cd, ucd)		 fixed bin (35);

	dcl     msg		 char (*);

	call tidy_up;
	call linus_convert_code (cd, ucd, linus_data_$dcl_id); /* so LINUS user can understand */
	call ssu_$abort_line (sci_ptr, ucd, msg);

     end error;

tidy_up:
     proc;

/* procedure to clean up allocated structures */

	if sclfi_ptr ^= null then
	     if sclfi_ptr ^= lcb.sclfi_ptr then
		free scal_fn_info;
	if ca_ptr ^= null
	then free char_argl;

     end tidy_up;

     end linus_declare;
