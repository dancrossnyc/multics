/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-04-02,Dupuis), approve(86-05-23,MCR7404), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Changed to also work as an active request. Returns true if a value was
     retrieved, and false if one wasn't.
                                                   END HISTORY COMMENTS */


linus_assign_values:
     proc (sci_ptr, lcb_ptr);


/* DESCRIPTION:

   Retrieved   data   are   assigned   to  LINUS  variables  specified  in  the
   assign_values request.  This capability allows information obtained from one
   retrieval  to be used in subsequent data base accesses.  The LINUS variables
   can also be passed as arguments to LINUS macros.



   HISTORY:

   77-05-01 J. C. C. Jagernauth: Initially written.

   80-01-09  Rickie  E.   Brinegar:  Modified  to  pass  linus_lila_alloc_lit a
   descriptor  pointer  instead of an assign_ descriptor type and eliminate the
   assign_ length parameter.

   80-02-01  Rickie  E.   Brinegar:  Renamed  from linus_set.  This was done to
   remove confusion with set functions and mathmatical sets.

   80-02-15 Rickie E.  Brinegar: Modified to use only one variable slot for set
   functions, instead of two.

   80-07-07  Rickie  E.   Brinegar:  Modified  to check the number of variables
   slots  already  used  instead  just  using  the next slot.  This was done to
   insure that we don't write all over ourselves.

   81-01-15  Rickie E.  Brinegar: Modified to not use the slot of the twentieth
   variable   to  allocate  all  variables  after  the  twentieth  variable  is
   allocated.   This  involved  changing  the statement variables.var_info.name
   (variables.nvars) to be variables.var_info.name (j) instead.

   81-02-09     Rickie     E.      Brinegar:     Deleted    lines    containing
   variables.var_info.name (j) = temp_char, replacing them in check_linvar, the
   variables name manager.  This was pointed out by TR9104.

   81-02-10  Rickie  E.  Brinegar: Modified to properly use all variables until
   there  are  no  more  values  to  be  assigned.  This routine will be exited
   normally  when  1) all of the variable names supplied are used up or 2) when
   there are no more tuples to be retrieved. This was the result of TR9101.

   81-02-13  Rickie  E.   Brinegar:  Modified  to  allocate bit arrays for each
   variable  that  a value is assigned to, and to free and reallocate those bit
   arrays  when  the descriptor of a new value does not match the descriptor of
   the  value already assigned to that value.  Also changed the call to assign_
   to  be straight assignments between two bit arrays.  This work was done as a
   result of TR9103.

   81-02-17  Rickie E.  Brinegar: Added code to change varying strings to fixed
   strings the exact size being used.  This is in response to TR9105.

   81-06-25  Rickie  E.  Brinegar: Modified to set variables.var_info.assn_len
   from user_item.assn_len for non varying strings.
   
   81-07-13 Rickie E.  Brinegar: Removed trapping of the conversion condition.
   This has been relegated to the linus module.
   
   81-09-21  Rickie E.  Brinegar: Changed the assignment of num_ptrs to itself
   to  an  assignment  of arg_list.arg_count to num_ptrs.  This will eliminate
   subscript range conditions.
   
   82-02-09  Paul W. Benjamin: ssu_ conversion

   82-10-13 Dave Schimke: Added call to linus_table$async_retrieval before the
   first retrieve to keep linus_table from getting lost when loading in the
   incremental mode. 

   83-08-30  Bert Moberg:  Added call to linus_translate_query if no current
   select expression is available
*/

%include linus_lcb;
%page;
%include linus_arg_list;
%page;
%include linus_char_argl;
%page;
%include linus_select_info;
%page;
%include linus_variables;
%page;
%include mdbm_arg_list;
%page;
%include mdbm_descriptor;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

	dcl     1 char_descriptor	 based,
		2 version		 bit (1) unal,
		2 type		 unsigned fixed bin (6) unal,
		2 packed		 bit (1) unal,
		2 number_dims	 bit (4) unal,
		2 length		 bit (24) unal;

	dcl     1 user_item		 aligned based (user_item_ptr),
		2 arg_ptr		 ptr,
		2 bit_len		 fixed bin (35),
		2 desc		 bit (36),
		2 assn_type	 fixed bin,
		2 assn_len	 fixed bin (35);

	dcl     EXPR		 fixed bin (2) int static options (constant) init (2);

	dcl     cleanup		 condition;

	dcl     first_char		 char (1) based (char_argl.arg.arg_ptr (k));
	dcl     temp_char		 char (char_argl.arg.arg_len (k))
				 based (char_argl.arg.arg_ptr (k));

	dcl     allocated		 bit (1);
	dcl     active_request_flag    bit (1) aligned;
	dcl     first_tuple_retrieved  bit (1) aligned;
	dcl     return_value           char (return_value_length) varying based (return_value_ptr);
	dcl     return_value_length    fixed bin (21);
	dcl     return_value_ptr       ptr;

	dcl     bit_array		 bit (variables.var_info (j).bit_len) based;

	dcl     (caller, i, j, k)	 fixed bin;

	dcl     temp_len		 fixed bin (23) unal;

	dcl     (code, icode, out_code) fixed bin (35);

	dcl     (addr, addrel, fixed, index, null, rel, substr, unspec) builtin;

	dcl     varying_length	 fixed bin (35) based;

	dcl     offset		 (10) bit (1) based;

	dcl     (
	        e_ptr		 init (null),
	        destination_ptr	 init (null),
	        user_item_ptr	 init (null)
	        )			 ptr;

	dcl     (
	        linus_data_$av_id,
	        linus_data_$max_lvars,
	        linus_error_$inv_lin_var,
	        linus_error_$inv_linus_var,
	        linus_error_$long_lv_name,
	        linus_error_$no_db,
	        linus_error_$no_var_list,
	        linus_error_$ret_not_valid,
	        linus_error_$var_stck_ovrflw,
	        mrds_data_$max_id_len,
	        mrds_error_$tuple_not_found,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     linus_eval_expr
				 entry (ptr, ptr, ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     linus_eval_set_func	 entry (ptr, ptr, fixed bin (35));
	dcl     linus_retrieve	 entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_table$async_retrieval
				 entry (ptr, fixed bin (35));
	dcl     linus_translate_query$auto	 entry (ptr, ptr);
	dcl     mdbm_util_$bit_data_class entry (ptr) returns (bit (1));
	dcl     mdbm_util_$get_data_bit_length entry (bit (36)) returns (fixed bin (35));
	dcl     mdbm_util_$varying_data_class entry (ptr) returns (bit (1));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_ptr           entry (ptr, fixed bin, ptr, fixed bin(21));
	dcl     ssu_$return_arg        entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));

	al_ptr, ca_ptr, char_ptr = null;

	caller = 1;				/* for expression evaluator */
	destination_ptr = lcb.si_ptr;			/* for expression evaluator */
	icode, code = 0;
	lv_ptr = lcb.lv_ptr;			/* Init */
	first_tuple_retrieved = "0"b;

	if lcb.db_index = 0 then
	     call error (linus_error_$no_db, "");
	call ssu_$return_arg (sci_ptr, nargs_init,
	     active_request_flag, return_value_ptr, return_value_length);
	if active_request_flag
	then return_value = "false";
	if nargs_init = 0 then
	     call error (linus_error_$no_var_list, "");
	allocate char_argl in (lcb.static_area);
	on cleanup begin;
		if ca_ptr ^= null
		then free char_argl;
	     end;
	do i = 1 to nargs_init;
	     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
	end;

	do k = 1 to char_argl.nargs;			/* Make sure that all linus variables begin with ! */
	     if index (substr (temp_char, 2), "!") ^= 0 then
		call error (linus_error_$inv_lin_var, temp_char);
	     if first_char ^= "!" then
		call error (linus_error_$inv_linus_var, temp_char);
	     char_argl.arg.arg_ptr (k) =
		addr (char_argl.arg.arg_ptr (k) -> offset (10)); /* skip ! */
	     char_argl.arg.arg_len (k) = char_argl.arg.arg_len (k) - 1;
	     if char_argl.arg.arg_len (k) > mrds_data_$max_id_len then
		call error (linus_error_$long_lv_name, temp_char);
	end;

	if lcb.si_ptr = null then call linus_translate_query$auto (sci_ptr, lcb_ptr); /* try translating it */
	if lcb.si_ptr = null then return; /* No good?  Oh, well */

	si_ptr = lcb.si_ptr;
	if ^select_info.se_flags.val_ret then
	     call error (linus_error_$ret_not_valid, ""); /*
						   valid for retrieve ? */
	if lv_ptr = null then do;			/* Make sure space has not already been allocated for linus
						   variables */
		nvars_init = linus_data_$max_lvars;	/* Allocate space for maximum number of linus variables
						   */
		allocate variables in (lcb.static_area);/* Linus variables */
		lcb.lv_ptr = lv_ptr;
		variables.nvars = 0;		/* Initialize count of linus variables */
	     end;
	if select_info.prior_sf_ptr ^= null then
	     call linus_eval_set_func (lcb_ptr, select_info.prior_sf_ptr, icode);
	if icode ^= 0 then
	     call error (icode, "");
	if select_info.set_fn then
	     call apply_set_function;
	else do;
		call linus_table$async_retrieval (lcb_ptr, icode);
		if icode ^= 0 then
		     call error (icode, "");
		call
		     linus_retrieve (lcb_ptr, ca_ptr, char_ptr, al_ptr, e_ptr, icode);
						/* Access data base */
	     end;
						/* Update linus variables structure */
	if al_ptr ^= null then
	     num_ptrs = arg_list.arg_count;
	if icode ^= 0 then
	     call error (icode, "");			/* 81-02-10 Rickie E. Brinegar: code added */

	first_tuple_retrieved = "1"b;
	k = 1;					/* 81-02-10 Rickie E. Brinegar: added */
	do while (icode = 0 & k ^> char_argl.nargs);	/* 81-02-10 Rickie E. Brinegar: added
						   While we have variable names left,
						   continue to assign values if no error is encountered */

	     do i = 1 to select_info.n_user_items
		while (icode = 0 & k ^> char_argl.nargs); /* 81-02-10 Rickie E. Brinegar
						   char_argl.nargs <= select_info.n_user_items &
						   removed from the while clause.
						   changed char_argl.nargs to select_info.n_user_items in the
						   to clause. */

		call check_linvars;			/* check for previously defined linus variables */

		if select_info.user_item.item_type (i) = EXPR | select_info.set_fn
		then do;
			if ^select_info.set_fn then
			     call
				linus_eval_expr (lcb_ptr,
				select_info.user_item.item_ptr (i), destination_ptr,
				caller, i, icode);
			if icode = 0 then
			     call assign_expr_lit;
		     end;
		else do;
			user_item_ptr = select_info.user_item.item_ptr (i);

			if allocated & variables.var_info (j).desc ^= user_item.desc
			then do;
				free variables.var_info (j).var_ptr -> bit_array;
				allocated = "0"b;
			     end;

			if ^allocated then do;
				variables.var_info.desc (j) = user_item.desc;
				call allocate_lit;
			     end;
			if mdbm_util_$varying_data_class (addr (user_item.desc)) then
			     unspec (variables.var_info (j).var_ptr -> bit_array) =
				unspec (addrel (user_item.arg_ptr, 1) -> bit_array);
			else unspec (variables.var_info (j).var_ptr -> bit_array) =
				unspec (user_item.arg_ptr -> bit_array);
		     end;

		if icode = 0 then
		     if select_info.set_fn then do;
			     k = char_argl.nargs + 1; /* set up termination of the loop */
			     i = select_info.n_user_items + 1;
			     icode = mrds_error_$tuple_not_found;
			end;
		     else k = k + 1;
	     end;

	     if icode = 0 then
		call
		     linus_retrieve (lcb_ptr, ca_ptr, char_ptr, al_ptr, e_ptr,
		     icode);			/* get next set of values */
	end;
	if icode ^= 0 & icode ^= mrds_error_$tuple_not_found
	then call error (icode, "");
	else if active_request_flag
	     then return_value = "true";
FINISH:
	return;

error:
     proc (err_code, string);

	dcl     err_code		 fixed bin (35);
	dcl     string		 char (*);

	if ca_ptr ^= null
	then free char_argl;
	if active_request_flag & ^first_tuple_retrieved & err_code = mrds_error_$tuple_not_found
	then goto FINISH;
	call linus_convert_code (err_code, out_code, linus_data_$av_id);
						/* Convert system error code */
	call ssu_$abort_line (sci_ptr, out_code);

     end error;

check_linvars:
     proc;

	allocated = "0"b;
	if variables.nvars > 0 then do;		/* check for previously defined LINUS VARIABLES */
		do j = 1 to variables.nvars
		     while (variables.var_info.name (j) ^= temp_char);
		end;
		if j > variables.nvars_alloc then
		     call error (linus_error_$var_stck_ovrflw, "linus_assign_values");
		else if j > variables.nvars then do;	/* find linus var or bump count */
			variables.nvars = variables.nvars + 1;
			j = variables.nvars;
			variables.var_info.name (j) = temp_char;
		     end;
		else allocated = "1"b;
	     end;
	else do;
		j, variables.nvars = 1;
		variables.var_info.name (j) = temp_char;
	     end;

     end check_linvars;



apply_set_function:
     proc;

	call
	     linus_eval_set_func (lcb_ptr, select_info.user_item.item_ptr (1),
	     icode);
	if icode ^= 0 then
	     call error (icode, "");
	i,					/* result is in first select info user item */
	     k = 1;				/* only the first variable will be assigned */
	call check_linvars;
	call assign_expr_lit;

     end apply_set_function;

assign_expr_lit:
     proc;

	if allocated
	     & variables.var_info (j).desc ^= select_info.user_item (i).rslt_desc
	then do;
		free variables.var_info (j).var_ptr -> bit_array;
		allocated = "0"b;

	     end;

	if ^allocated then do;
		variables.var_info.desc (j) = select_info.user_item.rslt_desc (i);
		call allocate_lit;
	     end;
	if mdbm_util_$varying_data_class (
	     addr (select_info.user_item (i).rslt_desc)) then
	     unspec (variables.var_info (j).var_ptr -> bit_array) =
		unspec (addrel (select_info.user_item (i).rslt_assn_ptr, 1)
		-> bit_array);
	else unspec (variables.var_info (j).var_ptr -> bit_array) =
		unspec (select_info.user_item (i).rslt_assn_ptr -> bit_array);

     end assign_expr_lit;

allocate_lit:
     proc;

	if mdbm_util_$varying_data_class (addr (variables.var_info (j).desc))
	then do;
		if select_info.user_item.item_type (i) = EXPR | select_info.set_fn then
		     variables.var_info (j).bit_len =
			select_info.user_item (i).rslt_assn_ptr -> varying_length;
		else variables.var_info (j).bit_len =
			user_item.arg_ptr -> varying_length;
		temp_len = variables.var_info (j).bit_len;
		unspec (addr (variables.var_info (j).desc) -> char_descriptor.length) =
		     unspec (temp_len);

		if mdbm_util_$bit_data_class (addr (variables.var_info (j).desc)) then
		     addr (variables.var_info (j).desc) -> descriptor.type = 19;
		else do;
			addr (variables.var_info (j).desc) -> descriptor.type = 21;
			variables.var_info (j).bit_len = variables.var_info (j).bit_len * 9;
		     end;
		variables.var_info (j).assn_len = temp_len;
	     end;
	else do;
		variables.var_info (j).bit_len =
		     mdbm_util_$get_data_bit_length ((variables.var_info (j).desc));
		if select_info.user_item.item_type (i) = EXPR | select_info.set_fn then
		     variables.var_info (j).assn_len =
			select_info.user_item (i).rslt_assn_len;
		else variables.var_info (j).assn_len = user_item.assn_len;
	     end;

	variables.var_info (j).assn_type =
	     fixed (addr (variables.var_info (j).desc) -> descriptor.packed)
	     + (2 * fixed (addr (variables.var_info (j).desc) -> descriptor.type));
	allocate bit_array in (lcb.static_area)
	     set (variables.var_info (j).var_ptr);

     end allocate_lit;

     end linus_assign_values;
