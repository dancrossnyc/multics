/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_lila_from:
     proc (lcb_ptr, lsh_ptr, td_ptr, code);

/* DESCRIPTION:

   This  procedure  translates  the  FROM  clause  of a LILA block into a tuple
   variable and relation name which can be added to a MRDS -range clause.



   HISTORY:

   77-07-01 J. A. Weeldreyer: Initially written.

   78-02-01  J.  A.  Weeldreyer: Modified to correctly recognize tables and row
   designators defined in outer blocks.

   78-07-01  J.   A.  Weeldreyer: Modified to assign generated variables to all
   tables in from list.

   79-02-01  J.   C.   C.   Jagernauth:  Modified to access version 4 resultant
   information.

   80-01-08 Rickie E.  Brinegar: Modified to pass linus_lila_alloc_lit a ptr to
   a descriptor instead of an assign_ descriptor type and eliminate the assign_
   length parameter.

   80-04-13  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
   lcb.lila_area_ptr instead of getting system free area.

   80-09-15  Rickie  E.   Brinegar:  Modified to use linus_rel_array instead of
   dsl_$get_rslt_info.

   81-02-03 Rickie E.  Brinegar: The rel builtin was added to the declarations.
   Modified to use the new linus_rel_array structure.
   
   81-10-07  Rickie  E.  Brinegar: Changed to set ls_header.from_token to "1"b
   on  entry  and  reset  ls_header.from_token  to  "0"b  on exit.  This is in
   response to TR11628.

*/

%include linus_lcb;
%page;
%include linus_ls_block;
%page;
%include linus_ls_header;
%page;
%include linus_ls_set;
%page;
%include linus_rel_array;
%page;
%include linus_temp_tab_names;
%page;
%include linus_token_data;
%page;
%include mrds_rslt_info;

	dcl     (
	        code,				/* Output: status code */
	        icode
	        )			 fixed bin (35);	/* internal status code */
	dcl     gen_var		 char (6);	/* generated variable */
	dcl     i			 fixed bin;	/* internal index */
	dcl     token		 char (token_data.length) based (token_data.t_ptr);
						/* value of token */
	dcl     tab_found		 bit (1);

	dcl     FB35_DESC		 bit (36) int static options (constant)
				 init ("100000100000000000000000000000100011"b);

	dcl     (
	        linus_data_$max_pred_stack_size,
	        linus_data_$max_range_items,
	        linus_data_$max_set_stack_size,
	        linus_error_$cant_alloc_lit,
	        linus_error_$no_from,
	        linus_error_$no_table_list,
	        linus_error_$range_ovfl,
	        linus_error_$undef_tab,
	        mrds_data_$max_select_items,
	        mrds_data_$max_temp_rels,
	        mrds_data_$max_token_size,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (addr, fixed, index, null, rel, substr) builtin;

	dcl     linus_lila_alloc_lit	 entry (ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_lila_get_token	 entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35));

	ls_header.from_token = "1"b;
	linus_rel_array_ptr = lcb.rel_array_ptr;
	lsb_ptr = ls_header.cur_ptr;			/* init */
	lss_ptr = ls_block.back_ptr;
	if token_data.key = NULL then do;		/* must get new token */
		call
		     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos, td_ptr,
		     icode);
		if icode ^= 0 then
		     call linus_lila_error (lcb_ptr, lsh_ptr, icode, "");
	     end;
	if token_data.key ^= FROM then /* must have from keyword */
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$no_from, token);
	call
	     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos, td_ptr,
	     icode);
	if icode ^= 0 then
	     call linus_lila_error (lcb_ptr, lsh_ptr, icode, "");
						/* get first item in from list */

	tab_found = "0"b;				/* init */
	do while (token_data.key = ROW_TAB_PAIR | token_data.key = TAB_NAME
	     | token_data.key = ROW_DES | token_data.key = COL_SPEC);
						/* loop through table list */
	     tab_found = "1"b;			/* remember found at least one table */
	     if token_data.key = ROW_TAB_PAIR then do;	/* is a table list */
		     i = index (token, ":");		/* find separater */
		     call
			add_range_item (substr (token, 1, i - 1),
			substr (token, 1, i - 1), substr (token, i + 1));
		end;				/* if row tab pair */
	     else if token_data.key = TAB_NAME then do;	/* if table name */
		     call make_var;			/* generate variable */
		     call add_range_item (token, gen_var, token); /* add to range list */
		end;
	     else if token_data.key = COL_SPEC then do;	/* if column spec. */
		     i = index (token, ".");		/* isolate column name */
		     call check_rel_name (substr (token, i + 1, token_data.length - i));
						/* see if col. name is a table */
		     call make_var;
		     call
			add_range_item (substr (token, i + 1, token_data.length - i),
			gen_var, substr (token, i + 1, token_data.length - i));
		end;				/* if column spec. */
	     else do;				/* if row desig. */
		     call check_rel_name (token);	/* see if relation name */
		     call make_var;
		     call add_range_item (token, gen_var, token);
		end;				/* if  row desig. */
	     call
		linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos, td_ptr,
		icode);
	     if icode ^= 0 then
		call linus_lila_error (lcb_ptr, lsh_ptr, icode, "");
						/* get first token after list */
	end;					/* table list loop */

	if ^tab_found then /* if found no table */
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$no_table_list,
		token);				/* if no table list or name */

	code = 0;					/* made it */

exit:
	ls_header.from_token = "0"b;
	return;

make_var:
     proc;

/* Procedure to generate tuple variable when not explecitily specified */

	dcl     char_num		 pic "99999";

	ls_set.var_ind = ls_set.var_ind + 1;
	char_num = ls_set.var_ind;
	gen_var = "V" || char_num;

     end make_var;

check_rel_name:
     proc (rel_name);

/* Procedure to validate a relation name; does not return if not valid */

	dcl     rel_name		 char (*);
	dcl     (i, j)		 fixed bin;

	do j = 1 to linus_rel_array.num_of_rels
	     while (linus_rel_array.rels.rel_name (j) ^= rel_name);
	end;
	if j > linus_rel_array.num_of_rels then do;	/* not in db., check temp rels. */

		if lcb.ttn_ptr = null then /* no temps defined */
		     call
			linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$undef_tab,
			token);
		ttn_ptr = lcb.ttn_ptr;
		do i = 1 to mrds_data_$max_temp_rels
		     while (temp_tab_names (i) ^= token); /* search temp table names */
		end;
		if i > mrds_data_$max_temp_rels then /* not found */
		     call
			linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$undef_tab,
			token);
	     end;					/* checking temp rels */

     end check_rel_name;

add_range_item:
     proc (lvar, mvar, rel);

/* Procedure to create a range item, given a tup.var and relation */

	dcl     l_ptr		 ptr;
	dcl     (lvar, mvar, rel)	 char (*);
	dcl     i			 fixed bin;
	dcl     fb35		 fixed bin (35) based;
	dcl     bit_len		 fixed bin (35);

	if ls_block.nritems >= linus_data_$max_range_items then
	     /* if will overflow */
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$range_ovfl,
		token);
	ls_block.nritems = ls_block.nritems + 1;	/* incr. item count */
	ls_block.range_items.tup_var (ls_block.nritems) = lvar;
						/* store var name */
	ls_block.range_items.mrds_var (ls_block.nritems) = mvar;
	ls_block.range_items.level (ls_block.nritems) = ls_block.ib_level;
	if token_data.temp_tab then do;		/* if is temp table */
		ls_block.range_items.rel_name (ls_block.nritems) = ".V.";
		ttn_ptr = lcb.ttn_ptr;
		do i = 1 to mrds_data_$max_temp_rels while (temp_tab_names (i) ^= rel);
		end;				/* search for tab name */
		call linus_lila_alloc_lit (lcb_ptr, addr (FB35_DESC), l_ptr, bit_len);
						/* alloc fixed bin(lcb_ptr, bit_len) */
		if l_ptr = null then
		     call
			linus_lila_error (lcb_ptr, lsh_ptr,
			linus_error_$cant_alloc_lit, rel);
		ls_block.range_items.rel_index (ls_block.nritems), l_ptr -> fb35 = i;
						/* fill in temp rel index */
		ls_block.nrange_args = ls_block.nrange_args + 1; /* cant overflow because nritems checked */
		ls_block.range_items.arg_ptr (ls_block.nritems) = l_ptr;
		ls_block.range_items.desc_ptr (ls_block.nritems) = addr (FB35_DESC);
	     end;					/* if temp table */
	else do;
		ls_block.range_items.rel_name (ls_block.nritems) = rel;
		ls_block.range_items.rel_index (ls_block.nritems) = 0;
		ls_block.range_items.arg_ptr (ls_block.nritems),
		     ls_block.range_items.desc_ptr (ls_block.nritems) = null;
	     end;
	ls_block.dflt_ritem = ls_block.nritems;		/* update current default */

     end add_range_item;

     end linus_lila_from;
