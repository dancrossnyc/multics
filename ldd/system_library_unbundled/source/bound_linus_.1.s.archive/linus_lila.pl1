/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_lila:
     proc (sci_ptr_parm, lcb_ptr_parm);
%skip(3);
dcl lcb_ptr_parm ptr parm;
dcl sci_ptr_parm ptr parm;
%skip(1);

/* DESCRIPTION:

   This  procedure  functions  as  an  extremely  simple-minded editor, used in
   entering  and  manipulating  lila  expressions.  This editor looks very much
   like  a  subset  of  the editor in the basic system, and uses a vfile_ keyed
   sequential  file  to  hold the text.  The contents of this file are retained
   from one invocation of lila to the next, and the file is refreshed only if a
   -new control argument is specified in the LINUS "lila" request or the LILA
   "new" request is specified.

   HISTORY:

   77-04-01 J. A. Weeldreyer: Initially written.

   79-12-04 Rickie E.  Brinegar: Modified to return to linus request level when
   a macro is invoked with too few arguments.

   80-04-12  Rickie  E.  Brinegar: Modified to use linus_define_area instead of
   get_system_free_area_.

   81-02-03  Rickie E.  Brinegar: removed unreferenced variable sex.  Added rel
   builtin to the declarations.
   
   81-04-10 Rickie E.  Brinegar: changed linus version number from 2 to 3.0.

   81-07-14 Rickie E. Brinegar: added conversion condition trap.

   81-10-07     Rickie    E.     Brinegar:    changed    linus_translate    to
   linus_lila_translate to make it a LILA module as only LILA calls it.

   81-11-06  Rickie  E.   Brinegar:  Removed the calls to linus_free_se as the
   allocation of the selection expression is now in the lila temporary segment
   instead of the lcb.static area.
   
   82-01-29  DJ  Schimke:  Implemented  build mode (automatic line numbering).
   Added build,  last_line_num,  and  write_line  (pulled  from  process_line)
   internal procedures.  This is in response to PFS 4.9.5 for MR10.  

   82-02-01  DJ Schimke: Added "new" request to delete the existing LILA file.
   This was added to compliment the build request.

   82-02-03  DJ  Schimke:  Added  "list_requests" and "?" requests to help the
   user.  Changed the inv_lila_req error message to inform the user about "?".
   Added "sv" short name to save request for convenience.

   82-02-08  Paul W. Benjamin:  Conversion of LINUS (not lila) to ssu_.

   82-06-22  DJ  Schimke: Changed lila to not abort the linus invocation when
   the get_line calls return a linus_err_$no_macro_arg error code. 

   82-08-30  DJ Schimke: Modified lila build mode prompt to contain an asterisk
   at the end rather than a space if the line which is being input will
   overwrite an existing text line. Also improved the build (request & ctl_arg)
   parameter processing code to eliminate a logic error and clean it up.

   82-12-06  DJ Schimke: Modified lila to not prompt if the prompt string is 
   just blanks (null character string). Also added the -prompt and -no_prompt
   control args which override the currrent subsystem prompting flag.
   Fixes an annoying problem when using the new exec_com facility in linus.

   83-02-10  DJ Schimke: Removed a call to linus_canon which was meant to be 
   removed as part of the ssu conversion. Because the calling sequence for
   linus_canon was changed as part of the ssu conversion, we were getting fault
   tag 1 errors.The linus_invoke_ module calls linus_canon to expand macro args
   so this module no longer needs to worry about them. 

   83-03-24  DJ Schimke: Added code to set lcb.si_ptr to null when a user tries
   to proc with a null lila file. 

   83-08-23  Al Dupuis: Added the initialize_lila_file entry as part of the
   input_query work. The main entry point used to use sci_ptr and lcb_ptr
   as parms instead of the automatic ptrs they should have been, so I
   changed it so the parms are now declared explicitely and moved to the
   auto ptrs.

   83-08-30 Bert Moberg: Added code for the translate_query request work.

*/

%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_rel_array;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

	dcl     (
	        nread,				/* number of chars in input line */
	        rec_len,				/* no. of chars in lila record */
	        read_len
	        )			 fixed bin (21);	/* no. of chars read from lila file */

	dcl     cmd_len		 fixed bin;

	dcl     (
	        ref_ptr		 init (null),	/* referencing ptr for calls */
	        ica_ptr		 init (null),	/* ptr to char_argl for invoke */
	        acmd_ptr		 init (null),	/* for escaping to command processor */
	        siocb_ptr		 init (null),	/* save iocb pointer */
	        env_ptr		 init (null)
	        )			 ptr;		/* sink for environment ptr */

	dcl     (
	        code,				/* status code */
	        icode
	        )			 fixed bin (35);	/* internal status code */

	dcl     aligned_cmd		 char (cmd_len) based (acmd_ptr);
	dcl     arg		 char (char_argl.arg.arg_len (arg_index))
				 based (char_argl.arg.arg_ptr (arg_index));
						/* input arg */
	dcl     arg_index		 fixed bin;	/* arg index */
	dcl     atd		 char (173);	/* save attach desc */
	dcl     build_increment	 fixed bin;	/* current increment */
	dcl     build_mode		 bit (1);		/* on if in build mode */
	dcl     next_build_line	 pic "9999";	/* next automatic line number*/
	dcl     chars		 (nread) char (1) unal based (lcb.rb_ptr);
						/* another version of request */
	dcl     control_arg		 bit (1) unal;	/* control arg flag */
	dcl     done		 bit (1) unal;	/* completion flag */
	dcl     lila_prompt_flag	 bit (1) unal;	/* -prompt/-no_prompt flag */
	dcl     i			 fixed bin;	/* index for do */
	dcl     key		 pic "9999";	/* line number */
	dcl     key_var		 char (256) var;	/* var. version of line no. */
	dcl     parameter		 fixed bin;	/* parameter to request or control arg */
	dcl     parameter_number	 fixed bin;	/* parameter index */
	dcl     prompt_char		 char (32) varying
				 based (lcb.lila_promp_chars_ptr);
	dcl     req_index		 fixed bin (17);	/* loop index */
	dcl     request		 char (nread) based (lcb.rb_ptr);
						/* input line */
	dcl     request_count	 fixed bin init (11) int static options (constant);
	dcl     1 request_table	 (request_count) aligned, /* table of requests and short names */
						/*  Must be changed whenever requests are added. */
		2 name		 char (15) var
				 init (".", "?", "build", "execute", "invoke",
				 "list_requests", "list", "new", "proc", "quit",
				 "save"),
		2 short		 char (5) var
				 init ("", "", "", "e", "i", "lr", "ls", "", "",
				 "q", "sv"),
		2 summary		 char (60) var
				 init ("Print the current lila status.",
				 "List all lila request names.",
				 "Enter build mode to insert/overwrite text.",
				 "Execute a Multics command line.",
				 "Invoke the specified Linus macro.",
				 "List brief information on lila requests.",
				 "List the current file.",
				 "Delete all text from the current lila file.",
				 "Process the current lila file.", "Leave LILA.",
				 "Save the current text into the specified linus macro."
				 );
	dcl     token		 char (15) var;	/* first token in lila line */
	dcl     work_area		 area (sys_info$max_seg_size)
				 based (lcb.lila_area_ptr);

	dcl     1 list_buf		 aligned,
		2 key		 char (4) unal,
		2 data		 char (256) unal;

	dcl     WHT_SPC		 char (3) int static options (constant) init ("
 	");					/* NL, SP, HT */
	dcl     NO_KILL		 fixed bin (35) int static options (constant)
				 init (0);
	dcl     KILL		 fixed bin (35) int static options (constant)
				 init (1);
	dcl     NL		 char (1) int static options (constant) init ("
");
	dcl     BOF		 fixed bin int static options (constant) init (-1);
	dcl     KSU		 fixed bin int static options (constant) init (10);
	dcl     SO		 fixed bin int static options (constant) init (2);

	dcl     (
	        error_table_$end_of_info,
	        error_table_$no_record,
	        linus_data_$lila_id,
	        linus_error_$bad_stmt_no,
	        linus_error_$build_overflow,
	        linus_error_$conv,
	        linus_error_$integer_too_large,
	        linus_error_$integer_too_small,
	        linus_error_$inv_arg,
	        linus_error_$inv_lila_req,
	        linus_error_$no_db,
	        linus_error_$no_lila_data,
	        linus_error_$no_macro_arg,
	        linus_error_$no_path,
	        linus_error_$nonex_del,
	        linus_error_$non_integer,
	        linus_error_$bad_num_args,
	        sys_info$max_seg_size
	        )			 ext fixed bin (35);

	dcl     (
	        iox_$user_input,
	        iox_$user_output
	        )			 ptr ext;

	dcl     (cleanup, conversion)
				 condition;

	dcl     (addr, after, bin, char, divide, before, fixed, index, length, ltrim,
	        mod, null, rel, rtrim, search, substr, string, verify)
				 builtin;

/* Multics Subroutines */

	dcl     cu_$cp		 entry (ptr, fixed bin, fixed bin (35));
	dcl     cu_$decode_entry_value
				 entry (entry, ptr, ptr);
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35))
				 returns (fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     ioa_$nnl		 entry options (variable);
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr,
				 fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$delete_record	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$get_line	 entry (ptr, ptr, fixed bin (21), fixed bin (21),
				 fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned,
				 fixed bin (35));
	dcl     iox_$position	 entry (ptr, fixed bin, fixed bin (21),
				 fixed bin (35));
	dcl     iox_$read_key	 entry (ptr, char (256) var, fixed bin (21),
				 fixed bin (35));
	dcl     iox_$read_record	 entry (ptr, ptr, fixed bin (21), fixed bin (21),
				 fixed bin (35));
	dcl     iox_$rewrite_record	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     iox_$seek_key	 entry (ptr, char (256) var, fixed bin (21),
				 fixed bin (35));
	dcl     iox_$write_record	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     get_pdir_		 entry returns (char (168));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$abort_subsystem	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$execute_line	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));

/* LINUS/MRDS Subroutines */

	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35),
				 fixed bin (35));
	dcl     linus_invoke$pop_all
				 entry (ptr, fixed bin (35));
	dcl     linus_print_error	 entry (fixed bin (35), char (*));
	dcl     linus_translate_query$proc
				 entry (ptr, fixed bin (35));

	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
	build_mode = "0"b;				/* initialize */
	lila_prompt_flag = lcb.prompt_flag;
	ica_ptr, siocb_ptr = null;
	call cu_$decode_entry_value (linus_lila, ref_ptr, env_ptr);
						/* for later calls */

	on cleanup call tidy_up;
	on conversion call error (linus_error_$conv, "", NO_KILL);

	ca_ptr = null;
	if lcb.db_index = 0 then
	     call error (linus_error_$no_db, "", NO_KILL);

	call ssu_$arg_count (sci_ptr, nargs_init);

	if nargs_init ^= 0				/* if have arg */
	then do;
		allocate char_argl in (lcb.static_area);
		do i = 1 to nargs_init;
		     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
		end;
		do arg_index = 1 to char_argl.nargs;	/* request arg loop */
		     if arg = "-new"
		     then do;			/* if -new, must start with new file */
			     if lcb.liocb_ptr = null	/* no old file */
			     then call init_lila_file;/* just make new one */
			     else if lcb.lila_count > 0
			     then call delete_old_file; /* delete old data */
			end;			/* -new */

		     else if arg = "-no_prompt"
		     then lila_prompt_flag = "0"b;	/* if -no_prompt */

		     else if arg = "-prompt"
		     then lila_prompt_flag = "1"b;	/* if -prompt */

		     else if arg = "-build"
		     then do;			/* if -build */
			     build_increment = lcb.build_increment; /* default */
			     next_build_line = 0;	/* init */

			     parameter_number = 1;
			     control_arg = "0"b;
			     do while ((arg_index + 1 <= char_argl.nargs) & (^control_arg));
				arg_index = arg_index + 1; /* look at next arg */
				parameter = cv_dec_check_ (arg, code);
				if code ^= 0
				then do;
					control_arg = "1"b;
					arg_index = arg_index - 1;
				     end;
				else do;		/* have parameters */
					if (parameter < 1)
					then call error (linus_error_$integer_too_small, arg, NO_KILL);
					if (parameter > 9999)
					then call error (linus_error_$integer_too_large, arg, NO_KILL);

					if parameter_number = 1
					then next_build_line = parameter;
					else if parameter_number = 2
					then build_increment = parameter;
					else call error (linus_error_$bad_num_args, "^/""-build"" allows a maximum of two parameters. " || arg, NO_KILL); /* no third parameter allowed */

					parameter_number = parameter_number + 1;
				     end;		/* have parameters */
			     end;			/* do while */
			     build_mode = "1"b;
			end;			/* if -build */

		     else call error (linus_error_$inv_arg, arg, NO_KILL);
		end;				/* request loop */
	     end;					/* if have arg */

	if build_mode
	     then call set_build_start ("0"b);

	if lcb.liocb_ptr = null then /* if no lila file 	

*/
	     call init_lila_file;			/* make one */

	done = "0"b;				/* init completion flag */
	code = 0;

	do while (^done);				/* until user types end */

	     if build_mode then
		call build;			/* building */

	     if lila_prompt_flag then do;		/* if prompting */
		     if lcb.is_ptr = iox_$user_input
			& prompt_char ^= "" then
			call ioa_$nnl ("^a ", prompt_char);
		end;

	     call iox_$get_line (iox_$user_input, lcb.rb_ptr, lcb.rb_len, nread, icode);
						/* read next line */

	     if icode = linus_error_$no_macro_arg then /* if no_macro arg */
		call error (icode, "reading LILA build text", NO_KILL);
	     else if icode ^= 0 then /* if other error */
		call error (icode, "reading LILA text", KILL);
	     else call process_line;			/* if OK */
	     if lcb.is_ptr ^= iox_$user_input & code ^= 0 then
		do;
		     call linus_invoke$pop_all (lcb_ptr, icode);
		     call tidy_up;
		end;

	end;					/* main LILA loop */

	code = 0;
exit:
	if ca_ptr ^= null
	then free char_argl;
	if code ^= 0
	then call ssu_$abort_subsystem (sci_ptr, code);
	return;
%page;
initialize_lila_file: entry (

	lcb_ptr_parm	/* input: ptr to the linus control block */
		       );
%skip(3);
	lcb_ptr = lcb_ptr_parm;
	sci_ptr = lcb.subsystem_control_info_ptr;
	if lcb.liocb_ptr = null ()
	then call init_lila_file;
	else call delete_old_file;
	lcb.lila_chars = 0;
	lcb.lila_count = 0;
%skip(1);
	return;

error:
     proc (icode, msg, fatal_flag);

/* Error procedure, calls convert_code and print_error and then returns. */

	dcl     (ucode, icode, fatal_flag)
				 fixed bin (35);
	dcl     msg		 char (*);

	if lcb.is_ptr ^= iox_$user_input then
	     call linus_invoke$pop_all (lcb_ptr, code);
	call linus_convert_code (icode, ucode, linus_data_$lila_id);
	code = fatal_flag;
	call tidy_up;
	if fatal_flag = NO_KILL
	then call ssu_$abort_line (sci_ptr, ucode, msg);
	else call ssu_$abort_subsystem (sci_ptr, ucode, msg);


     end error;

tidy_up:
     proc;

/* procedure to clean up if interrupted */

	if (icode ^= 0 | code ^= 0) & ^lcb.prompt_flag then
	     call linus_print_error (0, "Returning to linus request level.");
	if ca_ptr ^= null
	then free char_argl;
	if siocb_ptr ^= null then
	     do;					/* if open save switch */
		call iox_$close (siocb_ptr, icode);
		call iox_$detach_iocb (siocb_ptr, icode);
	     end;

     end tidy_up;

process_line:
     proc;

/* Procedure to process a LILA input line */

	dcl     (i, j)		 fixed bin;

	i = verify (request, WHT_SPC);		/* search for first data */
	if i <= 0 then
	     return;				/* was null line */
	j = search (substr (request, i), WHT_SPC);	/* look for end of token */
	if j <= 0 then
	     j = nread - i + 1;			/* was at end of request */
	else j = j - 1;

	token = substr (request, i, j);		/* isolate line no. or request */
	if token >= "0" & token <= "9999" then
	     do;					/* token may be number */
		if verify (token, "0123456789") ^= 0 /* if not really numeric */
		     | length (token) > 4 then
		     do;				/* or too many digits */
			call linus_print_error (linus_error_$bad_stmt_no, (token));
			return;
		     end;
		key = fixed (token);		/* canonize to 4 digits */
		i = i + j;			/*  first char beyond stmt no. */
		j = verify (substr (request, i), WHT_SPC); /* search for data following stmt no. */
		if j <= 0 then
		     do;				/* no more data, is delete */
			call iox_$seek_key (lcb.liocb_ptr, (key), rec_len, icode);
						/* find the line */
			if icode ^= 0 then /* if not found */
			     call linus_print_error (linus_error_$nonex_del, (token));
			else
			     do;			/* found the line, delete it */
				lcb.si_ptr = null;  /* force new proc */
				call iox_$delete_record (lcb.liocb_ptr, icode);
				if icode ^= 0 then /* problems */
				     call error (icode, "", KILL);
				lcb.lila_chars = lcb.lila_chars - rec_len;
						/* decr. char count */
				lcb.lila_count = lcb.lila_count - 1; /* decrement line count */
			     end;			/* line deletion */
		     end;				/* delete operation */
		else call write_line ((key), addr (chars (i)), nread - i + 1);
						/* source line specified */
	     end;					/* if key is possible number */

	else if token = "." then /* user wants reassurance */
	     call ioa_ ("linus version ^a (lila)", lcb.linus_version);

	else if token = "list" | token = "ls" then
	     do;					/* user wants list of file */
		if lcb.lila_count <= 0 then /* no lines in file */
		     call linus_print_error (linus_error_$no_lila_data, request);
		else call list_file (iox_$user_output); /* there is data, list it */
	     end;					/* list command */

	else if token = "proc" then
	     do;					/* user wants to translate */
		call linus_translate_query$proc (lcb_ptr, code); /* create MRDS selection expression */
		if code ^= 0 then go to exit;
	     end;					/* processing end */

	else if token = "quit" | token = "q" then
	     done = "1"b;

	else if token = "invoke" | token = "i" then
	     do;					/* process invoke request */
		call ssu_$execute_line (sci_ptr, lcb.rb_ptr, nread, icode);
		if icode ^= 0 then
		     go to exit;
		ica_ptr = null;
	     end;					/* invoke */

	else if token = "save" | token = "sv" then
	     do;					/* process save */
		if lcb.lila_count <= 0 then
		     call linus_print_error (linus_error_$no_lila_data, request);
		else
		     do;				/* if have lines to save */
			call get_token;
			if j > 0 then
			     do;			/* if path supplied */
				if substr (request, i + j - 6, 6) = ".linus" then
				     /* if suffix spec. */
				     atd = "vfile_ " || substr (request, i, j);
				else atd = "vfile_ " || substr (request, i, j)
					|| ".linus";
				call
				     iox_$attach_name (unique_chars_ ("0"b)
				     || ".lila_save", siocb_ptr, atd, ref_ptr, icode);
				if icode ^= 0 then
				     call soft_error (icode, atd);
				call iox_$open (siocb_ptr, SO, "0"b, icode);
				if icode ^= 0 then
				     call soft_error (icode, atd);
				call list_file (siocb_ptr); /* list into save file */
				call iox_$close (siocb_ptr, icode);
				if icode ^= 0 then
				     call soft_error (icode, atd);
				call iox_$detach_iocb (siocb_ptr, icode);
				if icode ^= 0 then
				     call soft_error (icode, atd);
				siocb_ptr = null;
			     end;			/* if path supplied */
			else call soft_error (linus_error_$no_path, (token));
		     end;				/* if have lines to save */
	     end;					/* save */
	else if token = "e" | token = "execute" | index (token, "..") = 1 then
	     do;
		cmd_len = nread;
		allocate aligned_cmd in (work_area);
		if index (token, "..") = 1 then
		     token = "..";
		aligned_cmd = ltrim (after (request, rtrim (token)));
		call cu_$cp (acmd_ptr, cmd_len, icode);
		acmd_ptr = null;
	     end;

	else if token = "build"
	then
	     do;					/* build request */
		build_increment = lcb.build_increment;	/* default */
		next_build_line = 0;		/* init */
		call get_token;
		parameter_number = 1;
		do while (j > 0);			/* while we have parameters */
		     parameter = cv_dec_check_ (substr (request, i, j), code);
		     if code ^= 0
		     then call soft_error (linus_error_$non_integer, substr (request, i, j));
		     if (parameter < 1)
		     then call soft_error (linus_error_$integer_too_small, substr (request, i, j));
		     if (parameter > 9999)
		     then call soft_error (linus_error_$integer_too_large, substr (request, i, j));

		     if parameter_number = 1
		     then next_build_line = parameter;
		     else if parameter_number = 2
		     then build_increment = parameter;
		     else call soft_error (linus_error_$bad_num_args, "^/""build"" allows a maximum of two parameters. " || substr (request, i, j)); /* no third parameter allowed */
		     call get_token;
		     parameter_number = parameter_number + 1;
		end;				/* have parameters */
		build_mode = "1"b;
	          call set_build_start ("1"b);		
	     end;					/* build request */

	else if token = "new" then
	     do;					/* new file request */
		if lcb.lila_count > 0 then
		     call delete_old_file;		/* delete old text file */
	     end;

	else if token = "?" then
	     do;					/* list requests */
		call ioa_ ("^/Available lila requests:^/"); /* in 3 columns */
		do req_index = 1 to divide (request_count, 3, 17) * 3 by 3;
		     call
			ioa_ (
			"^a^[^s^;, ^a^]^[^25t^a^[^s^;, ^a^]^[^50t^a^[^s^;, ^a^]^]^]",
			request_table.name (req_index),
			(request_table.short (req_index) = ""),
			request_table.short (req_index),
			(req_index + 1 <= request_count),
			request_table.name (req_index + 1),
			(request_table.short (req_index + 1) = ""),
			request_table.short (req_index + 1),
			(req_index + 2 <= request_count),
			request_table.name (req_index + 2),
			(request_table.short (req_index + 2) = ""),
			request_table.short (req_index + 2));
		end;
		if mod (request_count, 3) = 2 then
		     call
			ioa_ ("^a^[^s^;, ^a^]^25t^a^[^s^;, ^a^]",
			request_table.name (req_index),
			(request_table.short (req_index) = ""),
			request_table.short (req_index),
			request_table.name (req_index + 1),
			(request_table.short (req_index + 1) = ""),
			request_table.short (req_index + 1));

		if mod (request_count, 3) = 1 then
		     call
			ioa_ ("^a^[^s^;, ^a^]", request_table.name (req_index),
			(request_table.short (req_index) = ""),
			request_table.short (req_index));

		call
		     ioa_ (
		     "^/Type ""list_requests"" for a short description of the requests.^/"
		     );
	     end;

	else if token = "list_requests" | token = "lr" then
	     do;					/* list requests briefly */
		call ioa_ ("^/Summary of lila requests:");
		call
		     ioa_ (
		     "^/Use "".. COMMAND_LINE"" to escape a command line to Multics.^/")
		     ;
		do req_index = 1 to request_count;
		     call
			ioa_ ("^a^[^s^;, ^a^]^20t^a", request_table.name (req_index),
			(request_table.short (req_index) = ""),
			request_table.short (req_index),
			request_table.summary (req_index));
		end;
		call
		     ioa_ (
		     "^/Type ""help"" at LINUS request level for more information.^/");
	     end;

	else /* invalid LILA request */
	     call linus_print_error (linus_error_$inv_lila_req, ("  bad request: " || token));

list_file:
     proc (iocb_ptr);

/* Procedure to write the LILA file to a stream file */

	dcl     iocb_ptr		 ptr;

	call iox_$position (lcb.liocb_ptr, BOF, 0, icode);/* to start of file */
	if icode ^= 0 then
	     call error (icode, "", KILL);
	do while (icode = 0);			/* read and print each line */
	     string (list_buf) = " ";			/* clear the print line */
	     call iox_$read_key (lcb.liocb_ptr, key_var, rec_len, icode);
	     if icode = 0 then
		do;
		     call
			iox_$read_record (lcb.liocb_ptr, addr (list_buf.data),
			rec_len, read_len, icode);
		     if icode = 0 then
			do;
			     list_buf.key = key_var;
			     call
				ioa_$ioa_switch (iocb_ptr, "^a",
				before (string (list_buf), NL));
			end;			/* printing line */
		end;				/* reading line data */
	end;					/* loop through file */
	if icode ^= error_table_$end_of_info then
	     call error (icode, "", KILL);

     end list_file;

get_token:
     proc;

/* Procedure to get index and length of next token in request */

	i = i + j;				/* first char past token */
	if i <= nread then
	     do;					/* if still within request */
		j = verify (substr (request, i), WHT_SPC); /* first char of next token */
		if j > 0 then
		     do;				/* if found another token */
			i = i + j - 1;		/* ditto */
			j = search (substr (request, i), WHT_SPC); /* get length */
			if j <= 0 then
			     j = nread - i + 1;
			else j = j - 1;
		     end;				/* if found another token */
	     end;					/* if still within request */
	else j = 0;

     end get_token;

soft_error:
     proc (cd, msg);

/* Procedure to fail very softly */

	dcl     (cd, ucd)		 fixed bin (35);
	dcl     msg		 char (*);

	call linus_convert_code (cd, ucd, linus_data_$lila_id);
	call linus_print_error (ucd, msg);
	go to pl_exit;

     end soft_error;

pl_exit:
     end process_line;

init_lila_file:
     proc;

/* Procedure to create and init a keyed seq. file to contain lila statements. */

	lcb.lila_fn = unique_chars_ ("0"b) || ".lila";	/* name of file */
	call
	     iox_$attach_name (unique_chars_ ("0"b) || ".lila_switch",
	     lcb.liocb_ptr,
	     "vfile_ " || before (get_pdir_ (), " ") || ">" || lcb.lila_fn, ref_ptr,
	     icode);
	if icode ^= 0 then
	     call error (icode, "", KILL);
	call iox_$open (lcb.liocb_ptr, KSU, "0"b, icode);
	if icode ^= 0 then
	     call error (icode, "", KILL);
	else
	     do;					/* init */
		call write_line ((1), addr (chars (1)), 0);
		call delete_old_file;
	     end;

     end init_lila_file;

delete_old_file:
     proc;

/* Procedure to delete existing lines from a lila file */

	lcb.si_ptr = null;				/* force new proc */
	call iox_$position (lcb.liocb_ptr, BOF, 0, icode);/* start from BOF */
	if icode ^= 0 then
	     call error (icode, "", KILL);

	do while (icode = 0);			/* delete all lines */
	     call iox_$delete_record (lcb.liocb_ptr, icode);
	end;

	if icode ^= error_table_$no_record then
	     call error (icode, "", KILL);
	lcb.lila_chars, lcb.lila_count = 0;		/* indicate true line and char count */

     end delete_old_file;

write_line:
     proc (source_key, source_ptr, source_len);

/* procedure to insert a new lila source line  */
/*   (or replace an old lila source line)      */

	dcl     source_key		 pic "9999" parameter; /* line number */
	dcl     source_ptr		 ptr parameter;	/* ptr to input string */
	dcl     source_len		 fixed bin (21) parameter; /* length of input string */

	lcb.si_ptr = null;				/* force new proc */
	call iox_$seek_key (lcb.liocb_ptr, (source_key), rec_len, icode);
						/* see if line exists */
	if icode = 0 then
	     do;					/* line exists, change it */
		call
		     iox_$rewrite_record (lcb.liocb_ptr, source_ptr, source_len,
		     icode);
		if icode ^= 0 then
		     call error (icode, "", KILL);
		lcb.lila_chars = lcb.lila_chars - rec_len + source_len;
	     end;					/* changing line */
	else if icode = error_table_$no_record then
	     do;					/* is new line, write it */
		call
		     iox_$write_record (lcb.liocb_ptr, source_ptr, source_len, icode);
		if icode ^= 0 then
		     call error (icode, "", KILL);
		lcb.lila_chars = lcb.lila_chars + source_len;
		lcb.lila_count = lcb.lila_count + 1;	/* increment line count */
	     end;					/* writing new line */
	else call error (icode, "", KILL);		/* problems */


     end write_line;

build:
     proc;

/* procedure to handle input during "build" */

	do while (build_mode);

	     if lcb.is_ptr = iox_$user_input
	     then do;				/* prompt */
		     call iox_$seek_key (lcb.liocb_ptr, (next_build_line), rec_len, icode);
		     if icode = 0
		     then call ioa_$nnl ("^a*", next_build_line); /* line exists */
		     else call ioa_$nnl ("^a ", next_build_line);
		end;

	     call iox_$get_line (iox_$user_input, lcb.rb_ptr, lcb.rb_len, nread, icode);
						/* read next line */

	     if icode = linus_error_$no_macro_arg then /* if no_macro arg */
		call error (icode, "reading build text", NO_KILL);

	     else if icode ^= 0 then /* if other error */
		call error (icode, "reading build text", KILL);

	     if verify (request, WHT_SPC) > 0 then
		do;				/* wasn't null line */
		     if substr (request, 1, nread - 1) = "." then
			build_mode = "0"b;		/* done */

		     else
			do;			/* build input line */
			     nread = nread + 1;
			     request = " " || substr (request, 1, nread - 1);
			     call
				write_line ((next_build_line), addr (chars (1)), nread);
						/* write the line */
			     if next_build_line + build_increment > 9999 then
				do;		/* line number grew too big */
				     build_mode = "0"b; /* must stop */
				     call
					linus_print_error (linus_error_$build_overflow,
					char (next_build_line + build_increment));
				end;
			     else next_build_line = next_build_line + build_increment;
						/* increment automatic line */

			end;			/* build input line */

		end;
	end;

     end build;

last_line_num:
     proc returns (pic "9999");

/* Procedure to return the last (largest) line number in the current lila */
/* selection expression.                                                  */

	dcl     line_number		 pic "9999";
	dcl     line_number_key	 char (256) var;
	dcl     EOF		 fixed bin int static options (constant) init (+1);

	if lcb.lila_count = 0 then
	     line_number = 0;
	else
	     do;
		call iox_$position (lcb.liocb_ptr, EOF, 0, icode);
		if icode ^= 0 then
		     call error (icode, "", NO_KILL);

		call iox_$position (lcb.liocb_ptr, 0, -1, icode);
		if icode ^= 0 then
		     call error (icode, "", NO_KILL);

		call iox_$read_key (lcb.liocb_ptr, line_number_key, rec_len, icode);
		if icode ^= 0 then
		     call error (icode, "", NO_KILL);
		line_number = bin (line_number_key);
	     end;
	return (line_number);
     end last_line_num;

set_build_start:
 proc (request);
 
 dcl request bit(1) unal parm;
 
 if next_build_line = 0
      then do;
      next_build_line = last_line_num ();
      
      if next_build_line + build_increment <= 9999
	 then next_build_line = next_build_line + build_increment;   /* default start is offset from current largest line num */
      else do;					/* error */
	 build_mode = "0"b;
	 if ^request
	      then call error (0, "The build increment (" || ltrim (char (build_increment))
	      || ") is too large.", NO_KILL);
	 call linus_print_error (linus_error_$integer_too_large, "The build increment (" || ltrim (char (build_increment))
	      || ") is too large.");
	 return;
	 end;
      end;
 end set_build_start;

     end linus_lila;
