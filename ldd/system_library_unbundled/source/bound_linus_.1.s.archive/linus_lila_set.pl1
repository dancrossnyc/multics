/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_lila_set:
     proc (lcb_ptr, lsh_ptr, td_ptr, si_ptr, code);

/* DESCRIPTION:

   This  procedure  handles  the  LILA set, which consists of one or more LILA
   blocks  combined  via  specified  set operators (inter, differ, union), and
   possibly  grouped  by  brackets ({}).  Lower level procedures are called to
   process  each  LILA  block.   This  procedure  combines the translated LILA
   blocks   according  to  explicitly  specified  grouping  and  set  operator
   precedence.  
   
   

   HISTORY:

   77-07-01 J. A. Weeldreyer: Initially written.

   78-07-01 J. A. Weeldreyer: Modified to initiallize gen. variable index.

   78-08-01 J.  A.  Weeldreyer: Modified to always pass back next token.

   80-04-13  Rickie  E.   Brinegar:  Modified  to  use  a work area defined on
   lcb.lila_area_ptr instead of getting system free area.

   80-12-03  Rickie  E.   Brinegar:  Modified to add one to the sel_offset for
   each ( added as a result of being in an inner block.  This is the result of
   TR8422 submitted, with this fix suggested, from Moberg at FORD.  
   
   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.
   
   81-11-06 Rickie E.  Brinegar: Removed unreferenced NL variable which was an
   options constant variable initiated to a new line character.
   
*/

%include linus_lcb;
%page;
%include linus_ls_header;
%page;
%include linus_ls_set;
%page;
%include linus_select_info;
%page;
%include linus_token_data;
%page;
%include linus_mrds_block;

	dcl     (
	        code,				/* Output* status code */
	        icode,				/* internal status code */
	        string_len
	        )			 fixed bin (35);	/* length for string alloc. */

	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);

	dcl     done		 bit (1);		/* Internal flag */

	dcl     token		 char (token_data.length) based (token_data.t_ptr);

	dcl     string		 char (string_len) based;

	dcl     sexy		 (select_info.se_len) char (1) unal based (select_info.se_ptr);

	dcl     setop_prec		 (14:16) fixed bin (11) int static options (constant) init (1,
						/* union */
				 2,		/* inter */
				 2);		/* differ */

	dcl     mrds_setop		 (14:16) char (11) var int static options (constant)
				 init (") -union (", ") -inter (", ") -differ (");

	dcl     SET		 fixed bin int static options (constant) init (2);

	dcl     OP		 fixed bin int static options (constant) init (1);

	dcl     BRACKET		 fixed bin int static options (constant) init (2);

	dcl     END		 fixed bin int static options (constant) init (3);

	dcl     (
	        linus_data_$max_set_stack_size,
	        linus_error_$early_end,
	        linus_error_$misplaced_select,
	        linus_error_$misplaced_setop,
	        linus_error_$setop_ovfl,
	        linus_error_$syntax,
	        linus_error_$unalld_setop,
	        mrds_data_$max_select_items,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (addr, fixed, length, null, rel) builtin;

	dcl     linus_lila_block	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_lila_get_token	 entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35));

	mblk_ptr, lss_ptr = null;			/* initiallize */

	allocate ls_set in (work_area);		/* alloc. and set up set stack fram */
	ls_set.fwd_ptr, ls_set.blk_hd_ptr = null;
	ls_set.back_ptr = ls_header.cur_ptr;
	ls_set.type = SET;
	ls_set.si_ptr = si_ptr;
	ls_set.br_cnt, ls_set.var_ind, ls_set.nblocks, ls_set.nops,
	     ls_set.nselects = 0;
	ls_set.dup_flag, ls_set.unique_flag, ls_set.rb_flag, ls_set.setop_flag,
	     ls_set.inv_setop, ls_set.end_flag = "0"b;
	ls_set.lb_flag, ls_set.first_block, ls_set.select_flag = "1"b;
	ls_header.cur_ptr -> ls_set.fwd_ptr = lss_ptr;	/* thread to end of stack */
	ls_header.cur_ptr = lss_ptr;

	select_info.prior_sf_ptr,			/* initialize the select info block */
	     select_info.se_ptr, select_info.sel_items_ptr = null;
	select_info.sel_items_len, select_info.se_len, select_info.nsevals,
	     select_info.n_mrds_items, select_info.n_user_items = 0;
	select_info.dup_flag, select_info.unique_flag, select_info.set_fn = "0"b;
	select_info.se_flags.val_ret,			/* assume valid until proven otherwise */
	     select_info.se_flags.val_dtt, select_info.se_flags.val_del,
	     select_info.se_flags.val_mod = "1"b;

	done = "0"b;				/* init. */
	do while (^done);				/* main processing loop */

	     if token_data.key = NULL then do;		/* if token not already there */
		     call
			linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos,
			td_ptr, icode);
		     if icode ^= 0 then
			call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
		end;				/* if needed to get new token */

	     go to token_proc (token_data.key);		/* go process the token */

token_proc (1):					/* ) */
token_proc (2):					/* column specif. */
token_proc (3):					/* linus variable */
token_proc (4):					/* constant */
token_proc (5):					/* set function */
token_proc (6):					/* scalar function */
token_proc (7):					/* ( */
token_proc (8):					/* * */
token_proc (9):					/* / */
token_proc (10):					/* + */
token_proc (11):					/* - */
token_proc (12):					/* table name */
token_proc (13):					/* row table pair */
token_proc (17):					/* row designator */
token_proc (21):					/* ^ */
token_proc (22):					/* & */
token_proc (23):					/* | */
token_proc (24):					/* = */
token_proc (25):					/* ^= */
token_proc (26):					/* > */
token_proc (27):					/* >= */
token_proc (28):					/* < */
token_proc (29):					/* <= */
token_proc (30):					/* from */
token_proc (31):					/* where */
token_proc (32):					/* dup */
token_proc (33):					/* unique */
token_proc (34):					/* , */
	     if ls_set.end_flag then
		call finish;			/* may be beyond set */
	     else call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$syntax, token)
		     ;
	     go to next;

token_proc (0):					/* null */
	     if ^ls_set.end_flag then
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$early_end, "")
		     ;
	     call finish;				/* if end expected */
	     go to next;

token_proc (14):					/* union */
token_proc (15):					/* inter */
token_proc (16):					/* differ */
	     if ^ls_set.setop_flag then /* if set oper. not expected */
		if ls_set.end_flag then
		     call finish;			/* may be out of set */
		else call
			linus_lila_error (lcb_ptr, lsh_ptr,
			linus_error_$misplaced_setop, token);
	     else do;				/* if set oper. expected */
		     if ls_set.inv_setop then /* we already have LILA block which cant use set op. */
			call
			     linus_lila_error (lcb_ptr, lsh_ptr,
			     linus_error_$unalld_setop, token);
		     if ls_set.nops > 0 then /* if oper. stacked */
			if ls_set.op_stack.br_cnt (ls_set.nops) = ls_set.br_cnt then
			     /* if in same bracket */
			     if setop_prec (token_data.key)
				<= setop_prec (ls_set.op_stack.key (ls_set.nops)) then
				call reduce (OP);	/* if curr.op lower prec, can reduce */

		     if ls_set.nops + 1 > linus_data_$max_set_stack_size then
			/* if another op will ovfl. */
			call
			     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$setop_ovfl,
			     token);
		     ls_set.nops = ls_set.nops + 1;	/* add latest op to stack */
		     ls_set.op_stack.br_cnt (ls_set.nops) = ls_set.br_cnt;
		     ls_set.op_stack.key (ls_set.nops) = token_data.key;

		     select_info.se_flags.val_del,	/* set ops not valid for update */
			select_info.se_flags.val_mod = "0"b;

		     ls_set.lb_flag,		/* reset state flags */
			ls_set.select_flag = "1"b;
		     ls_set.rb_flag, ls_set.setop_flag, ls_set.end_flag = "0"b;

		     token_data.key = NULL;		/* so we get new token */
		end;				/* if oper. expected */
	     go to next;				/* end set operators */

token_proc (18):					/* { */
	     if ^ls_set.lb_flag then
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$syntax, token)
		     ;
	     ls_set.br_cnt = ls_set.br_cnt + 1;		/* increment bracket level count */
	     ls_set.end_flag = "0"b;			/* cant end now */
	     token_data.key = NULL;			/* must get new token */
	     go to next;				/* end { */

token_proc (19):					/* } */
	     if ^ls_set.rb_flag | ls_set.br_cnt <= 0 then /* if not expected */
		if ls_set.end_flag then /* may be done with set */
		     call finish;
		else call
			linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$syntax,
			token);
	     else do;				/* if expected */
		     if ls_set.nops > 0 then /* if may need to reduce */
			if ls_set.op_stack.br_cnt (ls_set.nops) = ls_set.br_cnt then
			     /* have recuction */
			     call reduce (BRACKET);	/* reduce all items in bracket */

		     ls_set.br_cnt = ls_set.br_cnt - 1; /* decr. bracket lev. count */
		     ls_set.end_flag = "0"b;
		     token_data.key = NULL;		/* force new token */
		end;				/* if expected */
	     go to next;				/* end } */

token_proc (20):					/* select */
	     if ^ls_set.select_flag then /* if not expected */
		if ls_set.end_flag then
		     call finish;			/* may be out of set */
		else call
			linus_lila_error (lcb_ptr, lsh_ptr,
			linus_error_$misplaced_select, token);
	     else do;				/* if expected */
		     call linus_lila_block (lcb_ptr, lsh_ptr, td_ptr, mblk_ptr, icode);
						/* translate the block */
		     if icode ^= 0 then
			call linus_lila_error (lcb_ptr, lsh_ptr, icode, "");
		     ls_set.nblocks = ls_set.nblocks + 1; /* put results at top of stack */
		     ls_set.first_block = "0"b;
		     mrds_block.fwd_ptr = ls_set.blk_hd_ptr;
		     ls_set.blk_hd_ptr = mblk_ptr;
		     mblk_ptr = null;
		     if ls_set.br_cnt = 0 then
			ls_set.end_flag = "1"b;	/* end will be OK */
		     else ls_set.end_flag = "0"b;
		     ls_set.lb_flag,		/* reset other state flags */
			ls_set.select_flag = "0"b;
		     ls_set.rb_flag, ls_set.setop_flag = "1"b;
		end;				/* if select expected */
	     go to next;				/* end select */

next:
	end;					/* main processing loop */

	code = 0;					/* made it OK */

exit:
	return;

finish:
     proc;

/* Procedure to finish up the lila set */

	dcl     i			 fixed bin;

	if ls_set.nops > 0 & ls_set.nblocks > 1 then /* if reduction needed */
	     call reduce (END);			/* do final reduction */
	if ls_set.nops ^= 0 | ls_set.nblocks ^= 1 then /* have error somewhere */
	     call linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$syntax, "");

	mblk_ptr = ls_set.blk_hd_ptr;			/* finalize select info */
	ls_set.blk_hd_ptr = null;
	string_len = length (mrds_block.mrds_string);
	allocate string in (work_area) set (select_info.se_ptr);
						/* place for mrds sel. expr. */
	select_info.se_ptr -> string = mrds_block.mrds_string; /* copy it */
	select_info.se_len = string_len;
	do i = 1 to mrds_block.nval_args;		/* copy value args */
	     select_info.se_vals.arg_ptr (i) = mrds_block.val_args.arg_ptr (i);
	     select_info.se_vals.desc_ptr (i) = mrds_block.val_args.desc_ptr (i);
	end;
	select_info.nsevals = mrds_block.nval_args;
	select_info.dup_flag = ls_set.dup_flag;
	select_info.unique_flag = ls_set.unique_flag;
	select_info.sel_items_ptr = addr (sexy (mrds_block.sel_offset));
	select_info.sel_items_len = mrds_block.sel_length;
	mblk_ptr = null;				/* finished with this */
	ls_set.back_ptr -> ls_set.fwd_ptr = null;	/* remove ls_set from stack */
	ls_header.cur_ptr = ls_set.back_ptr;
	lss_ptr = null;

	done = "1"b;				/* to get out of main loop */

     end finish;

reduce:
     proc (type);

/* Procedure to reduce items on stack.  Three types of reduction are
   provided, (1) for lower prec. operators, (2) for right bracket, and (3) final
   reduction. */

	dcl     type		 fixed bin;
	dcl     done_flag		 bit (1);

	if type = END then
	     do while (ls_set.nops > 0 & ls_set.nblocks > 1);
		call combine;			/* combine top two items and oper. */
	     end;

	else if type = BRACKET then
	     do while (ls_set.op_stack.br_cnt (ls_set.nops) = ls_set.br_cnt
		& ls_set.nops > 0 & ls_set.nblocks > 1);
		call combine;
	     end;

	else do;
		done_flag = "1"b;
		do while (done_flag);
		     if ls_set.nops ^> 0 | ls_set.nblocks ^> 1 then
			done_flag = "0"b;
		     else if ls_set.op_stack.br_cnt (ls_set.nops) = ls_set.br_cnt
			     & setop_prec (token_data.key)
			     <= setop_prec (ls_set.op_stack.key (ls_set.nops)) then
			call combine;
		     else done_flag = "0"b;
		end;
	     end;

combine:
     proc;

/* Procedure to combine top two string blocks and top operator into one string
   block */

	dcl     (b1p, b2p)		 ptr;
	dcl     i			 fixed bin;

	b2p = ls_set.blk_hd_ptr;			/* top stack item */
	b1p = b2p -> mrds_block.fwd_ptr;		/* next to top */
	ms_len_init =
	     12 + fixed (ls_set.op_stack.key (ls_set.nops) = DIFFER)
	     + length (b1p -> mrds_block.mrds_string)
	     + length (b2p -> mrds_block.mrds_string);
	nval_args_init =
	     b1p -> mrds_block.nval_args + b2p -> mrds_block.nval_args;
	allocate mrds_block in (work_area);		/* place for combined string */
	mrds_block.fwd_ptr = b1p -> mrds_block.fwd_ptr;	/* new item will replace top 2 */
	mrds_block.mrds_string =
	     "(" || b1p -> mrds_block.mrds_string
	     || mrds_setop (ls_set.op_stack.key (ls_set.nops))
	     || b2p -> mrds_block.mrds_string || ")";	/* combined string */
	do i = 1 to b1p -> mrds_block.nval_args;	/* combine value args */
	     mrds_block.val_args.arg_ptr (i) =
		b1p -> mrds_block.val_args.arg_ptr (i);
	     mrds_block.val_args.desc_ptr (i) =
		b1p -> mrds_block.val_args.desc_ptr (i);
	end;
	do i = b1p -> mrds_block.nval_args + 1 to mrds_block.nval_args;
	     mrds_block.val_args.arg_ptr (i) =
		b2p
		-> mrds_block.val_args.arg_ptr (i - b1p -> mrds_block.nval_args);
	     mrds_block.val_args.desc_ptr (i) =
		b2p
		-> mrds_block.val_args.desc_ptr (i - b1p -> mrds_block.nval_args);
	end;
	mrds_block.sel_offset = b1p -> mrds_block.sel_offset + 1;
	mrds_block.sel_length = b1p -> mrds_block.sel_length;

	ls_set.nops = ls_set.nops - 1;		/* readjust stacks */
	ls_set.nblocks = ls_set.nblocks - 1;
	ls_set.blk_hd_ptr = mblk_ptr;
	mblk_ptr = null;
	b1p = null;				/* no need for b1p, b2p-> mrds_block anymore */
	b2p = null;

     end combine;

     end reduce;

     end linus_lila_set;
