
/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_lila_build_expr_str:
     proc (lcb_ptr, lsh_ptr, td_ptr, ex_ptr, ex_var, code);

/* DESCRIPTION:

   This  procedure  translates  a  linus  expression  into  an equivalent MRDS
   expression, suitable for inclusion in a MRDS -where clause.  
   
   

   HISTORY:

   77-08-01 J. A. Weeldreyer: Initially written.

   78-04-01  J.   A.   Weeldreyer:  Modified  to  give  better diagnostics for
   constant expr.  and scalar fun.

   78-08-01 J. A. Weeldreyer: Modified to conform to new token data.

   80-04-13  Rickie  E.   Brinegar:  Modified  to  use  a work area defined on
   lcb.lila_area_ptr instead of getting system free area.

   80-12-01  Rickie  E.   Brinegar:  Modified  to  remove  the  un  referenced
   linus_select_info.incl.pl1 file.
   
   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.
   
   81-11-02  DJ Schimke: Modified to allow constants to be first operand of an
   expression rather than just attributes.  Modified internal procedure reduce
   to eliminate possible stringrange condition.
*/

%include linus_lcb;
%page;
%include linus_ls_header;
%page;
%include linus_ls_block;
%page;
%include linus_mrds_block;
%page;
%include linus_variables;
%page;
%include linus_token_data;
%page;
%include linus_ef_data;
%page;
%include linus_set_fn;
%page;
%include mdbm_descriptor;

	dcl     (
	        code,				/* Output: status code */
	        icode
	        )			 fixed bin (35);	/* internal status code */
	dcl     (
	        nops,				/* curr. no. of stacked arith ops. */
	        nitems,				/* curr. no. of stacked operands */
	        local_pcnt,				/* to keep paren count for this expr. */
	        i
	        )			 fixed bin;	/* internal index */
	dcl     (
	        done,				/* completion flag */
	        expr_flag,				/* on if expr. allowed */
	        atom_flag,				/* on if atom allowed */
	        aop_flag,				/* on if arith op allowed */
	        lp_flag,				/* on if ( allowed */
	        rp_flag,				/* on if ) allowed */
	        end_flag
	        )			 bit (1) unal;	/* on if end of expr. allowed */
	dcl     (
	        ex_ptr,				/* Output: pointer to mrds_block for expr. */
	        exp_hd_ptr,
	        lss_ptr				/* pointer to ls_set structure */
	        )			 ptr;		/* ptr to top of operand stack */
	dcl     ex_var		 char (*);	/* var name for expr. */
	dcl     (
	        variable,				/* variable name */
	        master_var
	        )			 char (32);	/* master variable for comparison */
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);
	dcl     token		 char (token_data.length) based (token_data.t_ptr);
	dcl     1 expr_data		 aligned like ef_data;
	dcl     1 op_stack		 (linus_data_$max_expr_items) aligned, /* operator stack */
		2 p_cnt		 fixed bin (17) unal,
		2 key		 fixed bin (17) unal;

	dcl     (
	        PAREN		 init (1),
	        END		 init (2),
	        OP		 init (3)
	        )			 int static fixed bin options (constant);
	dcl     op_prec		 (8:11) fixed bin (8) unal int static options (constant)
				 init (2, 2, 1, 1);
	dcl     mrds_op		 (8:11) char (3) int static options (constant)
				 init (" * ", " / ", " + ", " - ");

	dcl     (
	        linus_data_$max_expr_items,
	        linus_data_$max_range_items,
	        linus_data_$max_pred_stack_size,
	        linus_error_$inv_expr,
	        linus_error_$unbal_parens,
	        linus_error_$expr_str,
	        linus_error_$expr_ovfl,
	        linus_error_$inv_tup_var,
	        linus_error_$const_expr_fn,
	        mrds_data_$max_select_items,
	        mrds_data_$max_token_size,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (addr, addrel, fixed, length, null, rel, substr) builtin;

	dcl     linus_lila_get_token	 entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35));
	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_lila_set_fn	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_build_scfn_str
				 entry (ptr, ptr, ptr, ptr, char (*), fixed bin (35));

	mblk_ptr,					/* initialize */
	     exp_hd_ptr = null;
	nops, num_dims, local_pcnt, nitems = 0;
	master_var = "";
	lsb_ptr = ls_header.cur_ptr;
	lss_ptr = ls_block.back_ptr;

	expr_flag,				/* set state flags */
	     lp_flag = "1"b;
	aop_flag, rp_flag, atom_flag, end_flag = "0"b;

	done = "0"b;				/* init loop control flag */
	do while (^done);				/* main processing loop */

	     if token_data.key = NULL then do;		/* if need to get new token */
		     call
			linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos,
			td_ptr, icode);
		     if icode ^= 0 then
			call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
		end;

	     go to token_proc (token_data.key);

token_proc (0):					/* null */
token_proc (12):					/* table name */
token_proc (13):					/* row table pair */
token_proc (14):					/* union */
token_proc (15):					/* inter */
token_proc (16):					/* differ */
token_proc (17):					/* row designator */
token_proc (18):					/* { */
token_proc (19):					/* } */
token_proc (20):					/* select */
token_proc (21):					/* ^ */
token_proc (22):					/* & */
token_proc (23):					/* | */
token_proc (24):					/* = */
token_proc (25):					/* ^= */
token_proc (26):					/* > */
token_proc (27):					/* >= */
token_proc (28):					/* < */
token_proc (29):					/* <= */
token_proc (30):					/* from */
token_proc (31):					/* where */
token_proc (32):					/* dup */
token_proc (33):					/* unique */
token_proc (34):					/* , */
	     if ^end_flag then /* if cant end yet */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_expr,
		     token);
	     call finish;				/* finish up expr. and put in mrds_block */
	     done = "1"b;
	     go to next;

token_proc (1):					/* ) */
	     if ^rp_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_expr,
		     token);
	     if ls_block.pred_pcnt <= 0 then /* no matching ( */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$unbal_parens,
		     token);
	     if local_pcnt <= 0 then /* if paren belongs to higher level */
		if end_flag then do;		/* if we can end here */
			call finish;
			done = "1"b;
		     end;
		else call
			linus_lila_error (lcb_ptr, lsh_ptr,
			linus_error_$unbal_parens, token);
	     else do;				/* if valid paren. */
		     call reduce (PAREN);		/* perform any nec. stack reduction */
		     ls_block.pred_pcnt = ls_block.pred_pcnt - 1; /* decr. par. count */
		     local_pcnt = local_pcnt - 1;
		     rp_flag,			/* reset state flags */
			end_flag, aop_flag = "1"b;
		     expr_flag, atom_flag, lp_flag = "0"b;
		     token_data.key = NULL;		/* force new token */
		end;				/* if valid paren */
	     go to next;

token_proc (2):					/* column spec. */
	     if ^atom_flag & ^expr_flag then /* is not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_expr,
		     token);
	     call check_var ((token_data.mvar));	/* make sure we have no more than one var. */
	     call set_ord_block (token_data.mvar || "." || token);
						/* make a mrds block and stack it */
	     if expr_flag then
		end_flag = "0"b;			/* cant have end with only one operand */
	     else end_flag = "1"b;
	     atom_flag,				/* reset other state flags */
		expr_flag, lp_flag = "0"b;
	     aop_flag, rp_flag = "1"b;
	     token_data.key = NULL;
	     go to next;

token_proc (3):					/* linus variable */
	     if ^atom_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_expr,
		     token);
	     lv_ptr = lcb.lv_ptr;			/* look for info on curr. value */
	     do i = 1 to variables.nvars
		while (token ^= variables.var_info.name (i));
	     end;					/* guaranteed to find it */
	     call
		set_val_block (variables.var_info.var_ptr (i),
		addr (variables.var_info.desc (i)));	/* make and stack mrds block */
	     token_data.key = NULL;			/* force new token */
	     expr_flag, atom_flag, lp_flag = "0"b;
	     end_flag, rp_flag, aop_flag = "1"b;
	     go to next;

/* **** 11/2/81 DJ Schimke: BEGIN CHANGE *************************************/
token_proc (4):					/* constant */
	     if ^atom_flag & ^expr_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_expr,
		     token);

/* **** 11/2/81 DJ Schimke: END CHANGE ***************************************/
	     if substr (token, 1, 1) = """" /* if is string constant */
		| substr (token, 1, 1) = "(" then
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$expr_str,
		     token);
	     call set_ord_block (token);		/* make and stack mrds block */
	     token_data.key = NULL;			/* force new token */
	     expr_flag,				/* reset state flags */
		atom_flag, lp_flag = "0"b;
	     end_flag, rp_flag, aop_flag = "1"b;
	     go to next;

token_proc (5):					/* set function */
	     if ^atom_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_expr,
		     token);
	     call
		linus_lila_set_fn (lcb_ptr, lsh_ptr, td_ptr, addr (expr_data),
		icode);				/* process the set fn. */
	     if icode ^= 0 then
		call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	     call
		set_val_block (expr_data.assn_ptr,
		addr (expr_data.ef_ptr -> linus_set_fn.rslt_desc));
						/* make and stack mrds block */
	     atom_flag,				/* reset state flags */
		expr_flag, lp_flag = "0"b;
	     rp_flag, aop_flag, end_flag = "1"b;
	     go to next;

token_proc (6):					/* scalar function */
	     if ^expr_flag & ^atom_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_expr,
		     token);
	     variable = "";
	     call
		linus_lila_build_scfn_str (lcb_ptr, lsh_ptr, td_ptr, mblk_ptr,
		variable, icode);			/* make mrds string */
	     if icode ^= 0 then
		call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	     call check_var (variable);		/* ensure consistency */
	     mrds_block.fwd_ptr = exp_hd_ptr;		/* chain into operand stack */
	     exp_hd_ptr = mblk_ptr;
	     mblk_ptr = null;
	     nitems = nitems + 1;
	     expr_flag,				/* reset state flags, allow end if scal_fn only operand */
		atom_flag, lp_flag = "0"b;
	     end_flag, rp_flag, aop_flag = "1"b;
	     go to next;

token_proc (7):					/* ( */
	     if ^lp_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_expr,
		     token);
	     ls_block.pred_pcnt = ls_block.pred_pcnt + 1; /* merely incr. count */
	     local_pcnt = local_pcnt + 1;
	     token_data.key = NULL;			/* force new token, leave state flags as they are */
	     go to next;

token_proc (8):					/* * */
token_proc (9):					/* / */
token_proc (10):					/* + */
token_proc (11):					/* - */
	     if ^aop_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_expr,
		     token);
	     if nops > 0 then /* see if need to reduce for lower prec. op */
		if op_stack.p_cnt (nops) = ls_block.pred_pcnt then
		     if op_prec (token_data.key) <= op_prec (op_stack.key (nops))
		     then call reduce (OP);
	     if nops >= linus_data_$max_expr_items then /* if overflow */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$expr_ovfl, "")
		     ;
	     nops = nops + 1;			/* stack the operator */
	     op_stack.key (nops) = token_data.key;
	     op_stack.p_cnt (nops) = ls_block.pred_pcnt;
	     token_data.key = NULL;			/* force new token */
	     expr_flag,				/* reset state flags */
		end_flag, aop_flag, rp_flag = "0"b;
	     atom_flag, lp_flag = "1"b;
	     go to next;

next:
	end;					/* main processing loop */

	ex_var = master_var;			/* pass info to caller */
	ex_ptr = exp_hd_ptr;
	code = 0;
	return;

reduce:
     proc (type);

/* Procedure to reduce items in expr. stacks.  Three types of reduction are
   provided: (a) for lower prec. operator, (b) for right parenthesis, and (c) final
   reduction. */

	dcl     type		 fixed bin;
	dcl     done		 bit (1) init ("0"b);

	if type = END then
	     do while (nops > 0 & nitems > 1);
		call combine;			/* reduce entire stack */
	     end;

/* 81-11-02  DJ Schimke: BEGIN CHANGE ************************************** */
/*                       done flag prevents stringrange when nops = 0        */

	else if type = PAREN then
	     do while (nops > 0 & nitems > 1 & ^done);
		if op_stack.p_cnt (nops) = ls_block.pred_pcnt then
		     call combine;			/* reduce within paren. */
		else done = "1"b;
	     end;
	else
	     do while (nops > 0 & nitems > 1 & ^done);
		if op_stack.p_cnt (nops) = ls_block.pred_pcnt
		     & op_prec (token_data.key) <= op_prec (op_stack.key (nops)) then
		     call combine;			/* reduce for lower prec. oper. */
		else done = "1"b;
	     end;

/* 81-11-02  DJ Schimke:  END CHANGE  ************************************** */

combine:
     proc;

/* procedure to combine top two operands and top operator into one mrds
   block, and replace them in the stack. */

	dcl     (b1p, b2p)		 ptr;
	dcl     i			 fixed bin;

	b2p = exp_hd_ptr;				/* top operand */
	b1p = b2p -> mrds_block.fwd_ptr;		/* prev. operand */
	ms_len_init = 5 + length (b1p -> mrds_block.mrds_string)
	     /* set up and fill in mrds block for combination */
	     + length (b2p -> mrds_block.mrds_string);
	nval_args_init =
	     b1p -> mrds_block.nval_args + b2p -> mrds_block.nval_args;
	allocate mrds_block in (work_area);
	mrds_block.fwd_ptr = b1p -> mrds_block.fwd_ptr;	/* replace top two terms */
	mrds_block.mrds_string =
	     "(" || b1p -> mrds_block.mrds_string
	     || mrds_op (op_stack.key (nops)) || b2p -> mrds_block.mrds_string
	     || ")";
	do i = 1 to b1p -> mrds_block.nval_args;	/* args from first operand */
	     mrds_block.val_args.arg_ptr (i) =
		b1p -> mrds_block.val_args.arg_ptr (i);
	     mrds_block.val_args.desc_ptr (i) =
		b2p -> mrds_block.val_args.desc_ptr (i);
	end;
	do i = b1p -> mrds_block.nval_args + 1 to mrds_block.nval_args;
						/* args from second operand */
	     mrds_block.val_args.arg_ptr (i) =
		b2p
		-> mrds_block.val_args.arg_ptr (i - b1p -> mrds_block.nval_args);
	     mrds_block.val_args.desc_ptr (i) =
		b2p
		-> mrds_block.val_args.desc_ptr (i - b1p -> mrds_block.nval_args);
	end;
	nops = nops - 1;				/* reset counts */
	nitems = nitems - 1;
	exp_hd_ptr = mblk_ptr;			/* chain in new operand */
	mblk_ptr = null;
	b1p = null;
	b2p = null;

     end combine;

     end reduce;

check_var:
     proc (var);

/* Procedure to ensure that expr. uses only one tuple variable */

	dcl     var		 char (*);

	if var = "" then
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$const_expr_fn,
		"");
	if master_var = "" then /* if first time */
	     master_var = var;
	else if var ^= master_var then /* not same */
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_tup_var, var)
		;

     end check_var;

set_ord_block:
     proc (str);

/* procedure to fill in a mrds block for operand with no values */

	dcl     str		 char (*);

	ms_len_init = length (str);
	nval_args_init = 0;
	allocate mrds_block in (work_area);
	mrds_block.fwd_ptr = exp_hd_ptr;
	mrds_block.mrds_string = str;
	exp_hd_ptr = mblk_ptr;
	mblk_ptr = null;
	nitems = nitems + 1;
	if token_data.must_free then
	     token_data.t_ptr = null;

     end set_ord_block;

set_val_block:
     proc (arg_ptr, desc_ptr);

/* Procedure to fill in and stack a mrds block for an operand with one value */

	dcl     (arg_ptr, desc_ptr)	 ptr;
	dcl     is_var		 (22) bit (1) int static unal options (constant)
				 init ((19) (1)"0"b, "1"b, "0"b, "1"b);

	ms_len_init = 3;
	nval_args_init = 1;
	allocate mrds_block in (work_area);
	mrds_block.fwd_ptr = exp_hd_ptr;
	mrds_block.mrds_string = ".V.";
	if is_var (desc_ptr -> descriptor.type) then
	     mrds_block.val_args.arg_ptr (1) = addrel (arg_ptr, 1);
	else mrds_block.val_args.arg_ptr (1) = arg_ptr;
	mrds_block.val_args.desc_ptr (1) = desc_ptr;
	exp_hd_ptr = mblk_ptr;
	mblk_ptr = null;
	nitems = nitems + 1;

     end set_val_block;

finish:
     proc;

/* Procedure to put finishing touches on the mrds expr. */

	dcl     bp		 ptr;

	call reduce (END);				/* do final reduction */
	if nops ^= 0 | nitems ^= 1 then /* didnt work out */
	     call linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_expr, "");
	bp = exp_hd_ptr;
	if substr (bp -> mrds_block.mrds_string, 1, 1) = "(" then do;
						/* can replace outer () with [] */
		substr (bp -> mrds_block.mrds_string, 1, 1) = "[";
		substr (bp -> mrds_block.mrds_string,
		     length (bp -> mrds_block.mrds_string), 1) = "]";
	     end;					/* if mere replacement */
	else do;					/* no outer (), must reallocate */
		ms_len_init = length (bp -> mrds_block.mrds_string) + 2;
		nval_args_init = bp -> mrds_block.nval_args;
		allocate mrds_block in (work_area);
		mrds_block.fwd_ptr = bp -> mrds_block.fwd_ptr;
		mrds_block.val_args = bp -> mrds_block.val_args;
		mrds_block.mrds_string = "[" || bp -> mrds_block.mrds_string || "]";
		exp_hd_ptr = mblk_ptr;
		mblk_ptr = null;
	     end;					/* if had to reallocate */

     end finish;

     end linus_lila_build_expr_str;
