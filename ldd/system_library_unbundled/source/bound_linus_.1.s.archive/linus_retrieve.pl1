/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


linus_retrieve:
     proc (lcb_ptr, ca_ptr, char_ptr, al_ptr, e_ptr, icode);


/* DESCRIPTION:

   Data  is  retrieved  from  the  currently open data base and used by various
   linus  request procedures.  This procedure does the first retrieval and sets
   up  the  system  standard  arg  list  for  subsequent  retrievals  using the
   "-another"   selection   expression.   Therefore  the  "char_desc"  and  the
   "arg_list" structures must be released by the calling procedure.



   HISTORY:

   77-05-01 J. C. C. Jagernauth: Initially written.

   80-03-14  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
   lcb.linus_area_ptr instead of getting system free area.

   81-02-02  Rickie  E.  Brinegar: The internal static debug switch declaration
   was moved from the db_on entry to the main entry.

   81-02-11  Rickie  E.   Brinegar: Modified to set the argument list only when
   the  al_ptr  is  null  and to do the work of preparing the argument list for
   another  processing  as  was advertised in the notes above (something it did
   not do).

   81-02-20  Rickie  E.   Brinegar: changed the call to mdb_display_value_ to a
   call to mdb_display_data_value$ptr to allow for selection expressions longer
   that 256 characters.
   
   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.
   
   81-09-17  Rickie E.  Brinegar: Removed the is_var bit array for determining
   if  a  descriptor  is  a  varying data type.  This use of the bit array was
   replaced with a call to mdbm_util_$varying_data_class with a pointer to the
   appropriate descriptor.
   
   81-11-12 Rickie E. Brinegar: Added timing of dsl_$retrieve call.

*/

%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_arg_list;
%page;
%include linus_select_info;
%page;
%include mdbm_arg_list;


	dcl     1 arg_len_bits	 based,
		2 pad		 bit (12) unal,
		2 length		 bit (24);	/* Length of argument to be passed in arg_list */

	dcl     debug_switch	 bit (1) int static init ("0"b);

	dcl     icode		 fixed bin (35);

	dcl     (desc, l, loop)	 fixed bin;

	dcl     initial_vclock	 float bin (63);

	dcl     (addr, addrel, fixed, null, rel, vclock) builtin;

	dcl     (
	        e_ptr,
	        env_ptr		 init (null),
	        temp_ptr		 init (null)
	        )			 ptr;

	dcl     ANOTHER		 char (8) init ("-another") int static options (constant);
	dcl     ANOTHER_LEN		 bit (24) init ("000000000000000000001000"b) int static
				 options (constant);
	dcl     ANOTHER_PTR		 ptr init (null) int static;

	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     dsl_$retrieve	 entry options (variable); /* MRDS subroutine */
	dcl     ioa_		 entry options (variable);
	dcl     mdb_display_data_value$ptr entry (ptr, ptr);
	dcl     mdbm_util_$varying_data_class entry (ptr) returns (bit (1) aligned);
	dcl     sys_info$max_seg_size	 fixed bin (35) ext;/* Used in linus control block */
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.linus_area_ptr);


/* assure ANOTHER_PTR is not null and that the arg_list is only
   when the al_ptr is null */

	if ANOTHER_PTR = null then
	     ANOTHER_PTR = addr (ANOTHER);

	si_ptr = lcb.si_ptr;			/* Init */
	desc = select_info.n_mrds_items + 3 + select_info.nsevals;
						/* Offset for descriptors */
	if al_ptr = null then do;
		num_ptrs = desc * 2;		/* Number of pointers in arg_list */
		allocate arg_list in (work_area);	/* System standard argument list */
		arg_list.arg_des_ptr (desc) = addr (icode); /* Pointer to return code */
		if char_ptr = null then do;
			n_chars_init = 1;		/* Number to allocate */
			allocate char_desc in (work_area); /* Character descriptors */
		     end;
		arg_list.arg_des_ptr (num_ptrs) = addr (char_desc.fb_desc);
						/* Return code descriptor */
		arg_list.arg_des_ptr (1) = addr (lcb.db_index); /* Data base index */
		arg_list.arg_des_ptr (desc + 1) = addr (char_desc.fb_desc);
						/* Data base index descriptor */
		arg_list.arg_count, arg_list.desc_count = num_ptrs; /* Initialize argument list header */
		arg_list.code = 4;
		arg_list.pad = 0;

/* Fill in rest of standard arg_list */
		char_desc.arr.var (1) =
		     addr (select_info.se_len) -> arg_len_bits.length;
		arg_list.arg_des_ptr (2) = select_info.se_ptr;
		arg_list.arg_des_ptr (desc + 2) = addr (char_desc.arr (1));
		if select_info.nsevals ^= 0 then
		     do l = 1 to select_info.nsevals;
			arg_list.arg_des_ptr (2 + l) = select_info.se_vals.arg_ptr (l);
			arg_list.arg_des_ptr (2 + desc + l) =
			     select_info.se_vals.desc_ptr (l);
		     end;
		l = 1;
		do loop = 3 + select_info.nsevals
		     to 2 + select_info.n_mrds_items + select_info.nsevals;
						/* Use pointers and descriptors from select_info structure */
		     arg_list.arg_des_ptr (loop) = select_info.mrds_item.arg_ptr (l);
		     arg_list.arg_des_ptr (desc + loop) =
			addr (select_info.mrds_item.desc (l));
		     if mdbm_util_$varying_data_class (
			addr (select_info.mrds_item.desc (l))) then do;
			     temp_ptr = select_info.mrds_item.arg_ptr (l);
			     arg_list.arg_des_ptr (loop) = addrel (temp_ptr, 1);
			end;
		     l = l + 1;
		end;
	     end;

	if debug_switch then do;
		call ioa_ ("Selection expression:");
		call
		     mdb_display_data_value$ptr (select_info.se_ptr,
		     addr (char_desc.arr (1)));
	     end;					/* if debug_switch */

	if lcb.timing_mode then
	     initial_vclock = vclock;

	call cu_$generate_call (dsl_$retrieve, al_ptr);	/* Call retrieve */

	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + vclock - initial_vclock;

/* Insure that we are now set up for -another processing */

	if arg_list.arg_des_ptr (2) ^= ANOTHER_PTR then do;
		arg_list.arg_des_ptr (2) = ANOTHER_PTR;
		char_desc.arr (1).var = ANOTHER_LEN;
	     end;

	return;

db_on:
     entry;

/* Usage:
   linus_retrieve$db_on

   Turns on a switch which causes the value of the current
   selection expression to be displayed at the terminal.
*/

	debug_switch = "1"b;
	return;

db_off:
     entry;

/* Usage:
   linus_retrieve$db_off

   Turns off the switch which causes the value of the current
   selection expression to be displayed at the terminal.
*/

	debug_switch = "0"b;
	return;

     end linus_retrieve;
