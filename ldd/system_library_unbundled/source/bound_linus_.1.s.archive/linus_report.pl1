/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_report:
     proc (sci_ptr, lcb_ptr);

/* DESCRIPTION:

   A  REPORT  is generated using data retrieved from the data base via the MRPG
   (Multics Report Program Generator).



   HISTORY:

   77-08-01 J. C. C. Jagernauth: Initially written.

   78-08-01  J.   C.   C.   Jagernauth:  Modified  to  handle output buffers of
   unlimited length.

   80-01-15 Rickie E.  Brinegar: to use mdbm_util_$string_data_class.

   80-03-14 Rickie E.  Brinegar: to use a work area defined on lcb.i_o_area_ptr
   instead of getting system free area.

   80-07-01 Rickie E.  Brinegar: to initiate segments and pass report_ only the
   entry  point  names  of  the MRPG object segments.  This permits the user to
   give absolute path names.

   80-10-21  Rickie  E.  Brinegar: The changes suggested in TR7999 were made to
   this  source  except  the  change  to  use  the  string  builtin,  which was
   accomplished  by using a based character string to overlay the output buffer
   and using the substr builtin as a pseudo variable.
   
   81-09-21  Rickie  E.   Brinegar:  Changed  the  assignment  of  num_ptrs to
   num_ptrs to an assignment of arg_list.arg_count to num_ptrs to overcome the
   subscript range condition that it was getting.

   81-11-16 Rickie E.  Brinegar: added timing of dsl_$retrieve and changed the
   call to cu_$gen_call to a call to cu_$generate_call.

   81-12-17 Paul W. Benjamin: fixed bug where an arg_string was passed to MRPG
   whether or not one existed.

   81-12-21 Paul W. Benjamin: fixed bug where only paths (not entrynames were
   working for report programs.

   82-02-05 Paul W. Benjamin: ssu_ conversion.

   82-06-21 Al Dupuis: trap linkage error when the site has no MRPG.

   82-10-13 Dave Schimke: Added call to linus_table$async_retrieval before the
   first retrieve to keep linus_table from getting lost when loading in the
   incremental mode. This call can be eliminated when all modules call 
   linus_table for their retrievals.

   83-08-30  Bert Moberg:  Added call to linus_translate_query$auto if no current
   select expression is available
*/

%include linus_lcb;
%page;
%include linus_arg_list;
%page;
%include linus_char_argl;
%page;
%include linus_select_info;
%page;
%include mdbm_arg_list;

	dcl     sci_ptr		 ptr;		/* ssu_ uses this */

	dcl     1 ti		 (select_info.n_user_items) aligned based (ti_ptr),
		2 ptr		 ptr,
		2 len		 fixed bin (35);

	dcl     1 arg_len_bits	 based,		/* Pick up length for descriptor */
		2 pad		 bit (12) unal,
		2 length		 bit (24) unal;

	dcl     ANOTHER		 char (8) options (constant) int static init ("-another");
	dcl     STREAM_OUTPUT	 fixed bin options (constant) int static init (2);
						/* Mode for iox open */

	dcl     sw_name		 char (28);	/* Unique switch name */

	dcl     n			 fixed bin (21);
	dcl     rgl_module		 char (rgl_len) based (rgl_ptr); /* RGL object module name + control args */

	dcl     (
	        dec_3_ptr		 init (null),
	        destination_ptr	 init (null),	/* Points to the scalar function, set function or 
select_info structure */
	        e_ptr		 init (null),
	        env_ptr		 init (null),
	        iocb_ptr		 init (null),
	        out_buf_ptr		 init (null),
	        ref_ptr		 init (null),
	        rgl_ptr		 init (null),
	        seg_ptr		 init (null),
	        ti_ptr		 init (null),
	        user_item_ptr	 init (null)
	        )			 ptr;

	dcl     (
	        another_len,
	        caller,				/* 1 = from the request processor,
						   2 = from a scalar function,
						   3 = from a set function */
	        i,
	        l,
	        ob_len,				/* length of output buffer */
	        rgl_len,
	        target_type
	        )			 fixed bin;

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     (addr, fixed, index, length, null, rel, search, substr, vclock) builtin;

	dcl     first_retrieve	 bit (1);

	dcl     (icode, code, out_code) fixed bin (35);

	dcl     (directory, entry)	 char (168);

	dcl     (
	        error_table_$noentry,
	        error_table_$segknown,
	        linus_data_$report_id,
	        linus_error_$conv,
	        linus_error_$inv_arg,
	        linus_error_$no_data,
	        linus_error_$no_db,
	        linus_error_$ret_not_valid,
	        mrds_error_$tuple_not_found,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (cleanup, conversion, linkage_error) condition;

	dcl     cu_$decode_entry_value entry (entry, ptr, ptr);
	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     dsl_$retrieve	 entry options (variable);
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$initiate
				 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35));
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     linus_define_area	 entry (ptr, char (6), fixed bin (35));
	dcl     linus_eval_set_func	 entry (ptr, ptr, fixed bin (35));
	dcl     linus_output$report
				 entry (ptr, fixed bin (35), ptr, ptr, ptr, fixed bin, ptr, fixed bin,
				 fixed bin (35));
	dcl     linus_retrieve	 entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_table$async_retrieval
				 entry (ptr, fixed bin (35));
	dcl     linus_translate_query$auto	 entry (ptr, ptr);
	dcl     report_$report_attach	 entry (ptr, (*) char (*) var, bit (1), fixed bin (35));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$abort_subsystem	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     test_entry		 entry variable;
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.i_o_area_ptr);

	icode, code = 0;

	ca_ptr = null;
	al_ptr, char_ptr = null;

	on cleanup call clean_up;
	on conversion call error (linus_error_$conv);

	on linkage_error
	     call ssu_$abort_line (sci_ptr, error_table_$noentry,
		"Your site hasn't purchased the Multics Report Program Generator (MRPG).");
	test_entry = report_$report_attach;
	revert linkage_error;

	n = 0;
	first_retrieve = "1"b;
	another_len = 8;
	target_type = 44;				/* char var * 2 */
	caller = 1;				/* Init for linus_eval_expr */

	if lcb.db_index = 0 then
	     call error (linus_error_$no_db);
	if lcb.si_ptr = null then call linus_translate_query$auto (sci_ptr, lcb_ptr); /* try translating it */
	if lcb.si_ptr = null then return; /* No good?  Oh, well */
	else do;
		destination_ptr = lcb.si_ptr;		/* Init for linus_eval_expr */
		si_ptr = lcb.si_ptr;		/* Activate select_info data */
		call ssu_$arg_count (sci_ptr, nargs_init);
		if ^select_info.se_flags.val_ret then
		     call error (linus_error_$ret_not_valid);
		else if nargs_init = 0 then
		     call error (linus_error_$inv_arg); /* There must be args */
		else do;
			allocate char_argl in (lcb.static_area);
			do i = 1 to char_argl.nargs;
			     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
			end;
			rgl_ptr = char_argl.arg.arg_ptr (1); /* get RGL arg list */
			rgl_len = 0;
			do i = 1 to char_argl.nargs;
			     rgl_len = rgl_len + char_argl.arg.arg_len (i) + 1;
			end;
			rgl_len = rgl_len - 1;

			call linus_define_area (lcb.i_o_area_ptr, "I_O_", code);
			if code ^= 0 then
			     call error (code);
			allocate ti in (work_area);
			do l = 1 to select_info.n_user_items;
			     ti.ptr (l) = null;
			end;
			sw_name = unique_chars_ ("0"b) || ".linus_report";
						/* Unique switch_name */
			call cu_$decode_entry_value (linus_report, ref_ptr, env_ptr);
			l = index (rgl_module, " ");
			if l = 0 then
			     l = length (rgl_module);

/* Begin Change 12-21-81 PWB */

			if search (substr (rgl_module, 1, l), "><") ^= 0
			then do;
				call expand_pathname_ (substr (rgl_module, 1, l), directory, entry, icode);
				if icode ^= 0
				then call error (icode);
				call hcs_$initiate (directory, entry, entry, 0, 1, seg_ptr, icode);
				if icode ^= 0 & icode ^= error_table_$segknown
				then call error (icode);
			     end;
			else entry = substr (rgl_module, 1, l);

/* End Change 12-21-81 PWB */
/* Begin Change 12-17-81 PWB */

			call
			     iox_$attach_name (sw_name, iocb_ptr,
			     "report_ " || entry || " " || substr (rgl_module, l + 1), ref_ptr, icode);

/* End Change 12-17-81 PWB */
/* Init for RGL option */
			if icode ^= 0 then
			     call error (icode);
			call iox_$open (iocb_ptr, STREAM_OUTPUT, "0"b, icode);
			if icode ^= 0 then
			     call error (icode);
			if select_info.prior_sf_ptr ^= null then
			     call
				linus_eval_set_func (lcb_ptr, select_info.prior_sf_ptr,
				icode);
			if select_info.set_fn then do;
				call
				     linus_eval_set_func (lcb_ptr,
				     select_info.user_item.item_ptr (1), icode);
				if icode = 0 then do;
					call
					     linus_output$report (lcb_ptr, linus_data_$report_id,
					     iocb_ptr, si_ptr, ti_ptr, target_type, out_buf_ptr, ob_len,
					     icode);
					if icode ^= 0 then
					     call error (icode);
				     end;
			     end;
			else do;
				call linus_table$async_retrieval (lcb_ptr, icode);
				if icode ^= 0 then
				     call error (icode);
				call
				     linus_retrieve (lcb_ptr, ca_ptr, char_ptr, al_ptr, e_ptr,
				     icode);
				if al_ptr ^= null then
				     num_ptrs = arg_list.arg_count;
				char_desc.arr.var (1) =
				     addr (another_len) -> arg_len_bits.length; /* Get ready for "another"
						   retrieve */
				arg_list.arg_des_ptr (2) = addr (ANOTHER);
				if icode = 0 then
				     first_retrieve = "0"b;
				do while (icode = 0); /* Retrieve all */
				     call
					linus_output$report (lcb_ptr, linus_data_$report_id,
					iocb_ptr, si_ptr, ti_ptr, target_type, out_buf_ptr, ob_len,
					icode);
				     if icode ^= 0 then
					call error (icode);
				     if lcb.timing_mode then
					initial_mrds_vclock = vclock;
				     call cu_$generate_call (dsl_$retrieve, al_ptr);
						/* Retrieve another */
				     if lcb.timing_mode then
					lcb.mrds_time =
					     lcb.mrds_time + (vclock - initial_mrds_vclock);
				end;
				if icode ^= mrds_error_$tuple_not_found then
				     call error (icode);
				if first_retrieve then
				     call error (linus_error_$no_data);
			     end;
		     end;
	     end;

	call clean_up;
	return;

error:
     proc (err_code);
	dcl     err_code		 fixed bin (35);

	call linus_convert_code (err_code, out_code, linus_data_$report_id);
	call clean_up;
	if code ^= 0
	then call ssu_$abort_subsystem (sci_ptr, code);
	else call ssu_$abort_line (sci_ptr, out_code, "");

     end error;

clean_up:
     proc;

	if ca_ptr ^= null
	then free char_argl;
	if iocb_ptr ^= null then do;
		call iox_$close (iocb_ptr, icode);
		call iox_$detach_iocb (iocb_ptr, icode);
		iocb_ptr = null;
	     end;

     end clean_up;

     end linus_report;
