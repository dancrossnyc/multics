/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-04-23,Leskiw), approve(90-10-05,MCR8202),
     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
     Changed calls from assign_ to assign_round_ so that data extracted from
     scalar functions is rounded.
                                                   END HISTORY COMMENTS */


linus_eval_scal_func:
     proc (lcb_ptr, sclf_ptr, icode);


/* DESCRIPTION:

   Evaluate scalar functions.



   HISTORY:

   77-07-01 J. C. C. Jagernuath: Initially written.

   78-03-01  J.   C.   C.   Jagernauth: Modified to recognize the function_err
   condition.
   
   81-07-13  Rickie E.  Brinegar: Removed conversion condition trapping.  This
   is now relegated to higher level routines.

*/

%include linus_lcb;
%page;
%include linus_scal_fn;

	dcl     (i, caller)		 fixed bin;

	dcl     icode		 fixed bin (35);

	dcl     linus_data_$eval_scal_func_id fixed bin (35) ext;

	dcl     destination_ptr	 ptr;

	dcl     linus_eval_set_func	 entry (ptr, ptr, fixed bin (35));
	dcl     linus_eval_expr
				 entry (ptr, ptr, ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     cu_$gen_call	 entry (ptr, ptr);
	dcl     assign_round_
				 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));

	icode = 0;
	caller = 2;				/* Inform eval_expr that a scalar function called */
	destination_ptr = sclf_ptr;			/* Result of eval_expr must be placed in the
						   scalar function structure */

	do i = 1 to scal_fn.nargs while (icode = 0);

	     go to case (scal_fn.arg.type (i));

case (3):
	     call linus_eval_scal_func (lcb_ptr, scal_fn.arg.ef_ptr (i), icode);
						/* Process scalar function */
	     go to case (6);

case (4):
	     call linus_eval_set_func (lcb_ptr, scal_fn.arg.ef_ptr (i), icode);
						/* Process setfunction */
	     go to case (6);

case (5):
	     call
		linus_eval_expr (lcb_ptr, scal_fn.arg.ef_ptr (i), destination_ptr,
		caller, i, icode);			/* Process expression */

case (1):
case (2):
case (6):
	     if icode = 0 then
		if scal_fn.arg.must_convert (i) then
		     call
			assign_round_ (scal_fn.arg.arg_assn_ptr (i),
			scal_fn.arg.arg_assn_type (i),
			scal_fn.arg.arg_assn_len (i), scal_fn.arg.assn_ptr (i),
			scal_fn.arg.assn_type (i), scal_fn.arg.assn_len (i));
						/* Convert */
	end;

	if icode ^= 0 then
	     call error (icode);
	call cu_$gen_call (scal_fn.entry_ptr, scal_fn.arg_list_ptr);
						/* Call scalar function */

exit:
	;



error:
     proc (err_code);

	dcl     (err_code, out_code)	 fixed bin (35);

	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     linus_print_error	 entry (fixed bin (35), char (*));

	call
	     linus_convert_code (err_code, out_code, linus_data_$eval_scal_func_id);
	call linus_print_error (out_code, "");

	go to exit;

     end error;

     end linus_eval_scal_func;
