/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_lila_set_fn:
     proc (lcb_ptr, lsh_ptr, td_ptr, ed_ptr, code);

/* DESCRIPTION:

   This  procedure  translates  a  set function into tabular form suitable for
   evaluation.
   


   HISTORY:

   77-08-01 J. A. Weeldreyer: Initially written.
   
   78-08-01  J.  A.  Weeldreyer: Modified to move parsing of set fn.  brackets
   to within this program.
   
   80-01-08  Rickie  E.   Brinegar:  Modified  to  pass linus_lila_alloc_lit a
   descriptor  pointer  instead of an assign_ descriptor type and to eliminate
   the assign_ length parameter.
   
   80-03-13  Rickie  E.   Brinegar:  Modified  to  use  a work area defined on
   lcb.lila_area_ptr instead of getting system free area.
   
   81-07-07  Rickie  E.   Brinegar:  Changed to check for a null token when no
   right bracket was found.  This is in response to TR10283.
   
   81-09-18  Rickie  E.  Brinegar: Replaced the checking of varying strings by
   indexing   into   a   bit   string   called   is_var   with   a   call   to
   mdbm_util_$varying_data_class.   At the same time, all calls to set_arg_ptr
   where  changed  to  pass a pointer to the descriptor in question instead of
   the  assign_  data  type.   This  eliminates  problems with subscript range
   faults.
   
   81-11-06 Rickie E.  Brinegar: Added the unspec builtin for initializing the
   select_info  structure.   Modified  to  use  the  entry  variables  in  the
   linus_set_fn structure instead of the entry pointers that used to be used.
   
   82-11-15 Dave Schimke: Removed useless cleanup procedure which called 
   linus_free_se$free_sel_info on a cleanup condition. This was part of an
   earlier change by Rickie Brinegar which moved the select_info to the lila
   temp_seg. Removed dcl of cleanup condition and linus_free_se$free_sel_info.
*/

%include linus_lcb;
%page;
%include linus_select_info;
%page;
%include linus_ls_header;
%page;
%include linus_ls_set;
%page;
%include linus_ls_block;
%page;
%include linus_set_fn;
%page;
%include linus_set_fn_info;
%page;
%include linus_ef_data;
%page;
%include linus_token_data;
%page;
%include mdbm_arg_list;

	dcl     fn_name		 char (32);	/* function name */

	dcl     (i, type, nargs)	 fixed bin;

	dcl     (
	        bit_len,				/* bit length variable */
	        code,				/* Output: return code */
	        icode,				/* internal status code */
	        len
	        )			 fixed bin (35);

	dcl     (
	        arg_desc_ptr	 init (null),	/* a pointer to arg_desc structure */
	        mi_ptr		 init (null)
	        )			 ptr;		/* pointer to a mrds item */

	dcl     BITD		 bit (36) int static options (constant)
				 init ("101001100000000000000000000000100100"b);
	dcl     DB		 fixed bin (4) int static options (constant) init (6);
	dcl     EXPRESS		 fixed bin (4) int static options (constant) init (5);
	dcl     FB35D		 bit (36) int static options (constant)
				 init ("100000100000000000000000000000100011"b);
	dcl     MRDS		 fixed bin int static options (constant) init (1);
	dcl     bit36		 bit (36) based;
	dcl     char_desc_bits	 bit (36) based (addr (char_desc));
	dcl     sex		 char (select_info.se_len) based (select_info.se_ptr);
	dcl     token		 char (token_data.length) based (token_data.t_ptr);
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);

	dcl     1 arg_desc		 aligned,		/* descs. for info ent. call */
		2 ndescs		 fixed bin,
		2 desc		 (linus_data_$max_user_items) bit (36);

	dcl     1 char_desc		 aligned,		/* character desc. */
		2 const		 bit (12) unal init ("101010110000"b),
		2 len		 fixed bin (23) unal;

	dcl     1 m_item		 aligned like select_info.mrds_item based (mi_ptr);

	dcl     1 rslt_desc_arg_list	 aligned,
		2 arg_count	 fixed bin (17) unsigned unal init (2),
		2 pad1		 bit (1) unal init ("0"b),
		2 call_type	 fixed bin (18) unsigned unal init (4),
		2 desc_count	 fixed bin (17) unsigned unal init (0),
		2 pad2		 bit (19) unal init ("0"b),
		2 arg_ptrs	 (2) ptr;


	dcl     (addr, fixed, rel, after, substr, addrel, null, unspec) builtin;

	dcl     (
	        linus_error_$setfn_nargs,
	        linus_error_$inv_setfn_set,
	        linus_error_$cant_alloc_lit,
	        linus_error_$inv_setfn_args,
	        linus_error_$setfn_syntax,
	        linus_data_$max_user_items,
	        linus_data_$max_set_stack_size,
	        linus_data_$max_pred_stack_size,
	        linus_data_$max_expr_items,
	        linus_data_$max_range_items,
	        linus_data_$max_lvars,
	        mrds_data_$max_select_items,
	        mrds_data_$max_token_size,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     linus_lila_set	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_lila_alloc_lit	 entry (ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_get_token	 entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35));
	dcl     linus_assign_data	 entry (bit (36), fixed bin, fixed bin (35));
	dcl     mdbm_util_$varying_data_class entry (ptr) returns (bit (1) aligned);

	si_ptr,					/* initialize */
	     linus_set_fn_ptr = null;
	lsb_ptr = ls_header.cur_ptr;
	lss_ptr = ls_block.back_ptr;

	fn_name = token;				/* save function name for later */
	call
	     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos, td_ptr,
	     icode);
	if icode ^= 0 then
	     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	if token_data.key ^= LB then /* must have left br. following fn name */
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$setfn_syntax,
		token);
	token_data.key = NULL;			/* dont pass token to linus_lila_set */
	nmi_init = mrds_data_$max_select_items;
	nui_init = linus_data_$max_user_items;
	nsv_init = linus_data_$max_range_items + linus_data_$max_lvars;
	allocate select_info in (work_area);		/* temp select_info */
	unspec (select_info.se_flags) = "0"b;
	do i = 1 to select_info.nui_alloc;
	     unspec (select_info.user_item (i)) = "0"b;
	     select_info.user_item.name (i) = "";
	end;
	select_info.prior_sf_ptr, select_info.se_ptr, select_info.sel_items_ptr =
	     null;
	do i = 1 to nsv_init;
	     unspec (select_info.se_vals (i)) = "0"b;
	     select_info.se_vals (i).arg_ptr, select_info.se_vals (i).arg_ptr =
		null;
	end;
	do i = 1 to nmi_init;
	     unspec (select_info.mrds_item (i)) = "0"b;
	     select_info.mrds_item (i).arg_ptr = null;
	end;
	do i = 1 to nui_init;
	     select_info.user_item (i).rslt_assn_ptr,
		select_info.user_item (i).item_ptr = null;
	end;
	call linus_lila_set (lcb_ptr, lsh_ptr, td_ptr, si_ptr, icode);
						/* translate the input LILA set */
	if icode ^= 0 then
	     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	if token_data.key = NULL then do;		/* if need to get new token */
		call
		     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos, td_ptr,
		     icode);
		if icode ^= 0 then
		     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	     end;
	if token_data.key ^= RB then do;		/* must finish with right br. */
		if token_data.key = NULL then
		     call
			linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$setfn_syntax,
			"");
		else call
			linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$setfn_syntax,
			token);
	     end;
	token_data.key = NULL;			/* so noone else will use this token */

	do linus_set_fn_info_ptr = lcb.setfi_ptr repeat linus_set_fn_info.fwd_ptr
	     /* get info for set fn. */
	     while (fn_name ^= linus_set_fn_info.name
	     & linus_set_fn_info.fwd_ptr ^= null);
	end;					/* are guaranteed to find it */

	if linus_set_fn_info.nargs > 0 then /* if fixed args, check for quant. match */
	     if linus_set_fn_info.nargs ^= select_info.n_user_items then
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$setfn_nargs,
		     fn_name);
	if ^select_info.se_flags.val_ret then /* input expr. must be valid for retr. */
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$inv_setfn_set,
		fn_name);

	initial_number_of_linus_set_fn_args = select_info.n_user_items;
						/* alloc. set fn struct. */
	allocate linus_set_fn in (work_area);		/* need to keep it around */
	linus_set_fn.calc_al_ptr, linus_set_fn.assign_al_ptr,
	     linus_set_fn.rtrv_al_ptr = null;		/* start filling it in */
	linus_set_fn.calc_entry_set = linus_set_fn_info.calc_entry_set;
	if linus_set_fn_info.calc_entry_set then
	     linus_set_fn.calc_entry = linus_set_fn_info.calc_entry;
	linus_set_fn.init_entry_set = linus_set_fn_info.init_entry_set;
	if linus_set_fn_info.init_entry_set then
	     linus_set_fn.init_entry = linus_set_fn_info.init_entry;
	linus_set_fn.assign_entry_set = linus_set_fn_info.assign_entry_set;
	if linus_set_fn_info.assign_entry_set then
	     linus_set_fn.assign_entry = linus_set_fn_info.assign_entry;
	linus_set_fn.prior_ptr = select_info.prior_sf_ptr;
	linus_set_fn.fwd_ptr = null;
	linus_set_fn.nargs = select_info.n_user_items;

	do i = 1 to select_info.n_user_items;		/* copy input arg info */
	     if select_info.user_item.item_type (i) = MRDS then do;
						/* if data base item */
		     mi_ptr = select_info.user_item.item_ptr (i);
		     linus_set_fn.arg.desc (i) = m_item.desc;
		     linus_set_fn.arg.assn_ptr (i) = m_item.arg_ptr;
		     linus_set_fn.arg.assn_type (i) = m_item.assn_type;
		     linus_set_fn.arg.assn_len (i) = m_item.assn_len;
		     linus_set_fn.arg.type (i) = DB;
		     linus_set_fn.arg.ef_ptr (i) = null;
		     linus_set_fn.arg.arg_assn_ptr (i) = null;
		end;				/* if data base item */
	     else do;				/* if is expr. */
		     linus_set_fn.arg.type (i) = EXPRESS;
		     linus_set_fn.arg.desc (i) = select_info.user_item.rslt_desc (i);
		     linus_set_fn.arg.assn_ptr (i) =
			select_info.user_item.rslt_assn_ptr (i);
		     linus_set_fn.arg.assn_type (i) =
			select_info.user_item.rslt_assn_type (i);
		     linus_set_fn.arg.assn_len (i) =
			select_info.user_item.rslt_assn_len (i);
		     linus_set_fn.arg.ef_ptr (i) = select_info.user_item.item_ptr (i);
		end;				/* if is expression */
	end;					/* first arg copy loop */

	num_ptrs = 2 * linus_set_fn.nargs;		/* set up and init. the calc. arg list */
	allocate arg_list in (work_area);
	linus_set_fn.calc_al_ptr = al_ptr;
	arg_list.arg_count, arg_list.desc_count = num_ptrs;
	arg_list.code = 4;

	if linus_set_fn_info.nargs > 0 then do;		/* if fixed-arg function */
		linus_set_fn.rslt_desc = linus_set_fn_info.rslt_desc;
						/* fill in result desc. */
		do i = 1 to linus_set_fn.nargs;	/* another pass through input args */
		     if linus_set_fn_info.arg_desc (i) = linus_set_fn.arg.desc (i)
		     then do;			/* no conv. req. */
			     linus_set_fn.arg.must_convert = "0"b;
			     arg_list.arg_des_ptr (i) =
				set_arg_ptr (linus_set_fn.arg.assn_ptr (i),
				addr (linus_set_fn.arg.desc (i))); /* fill in calc. arg list */
			     arg_list.arg_des_ptr (i + linus_set_fn.nargs) =
				addr (linus_set_fn.arg.desc (i));
			end;			/* if no conv. req. */
		     else do;			/* set up for arg conversion */
			     linus_set_fn.arg.must_convert = "1"b;
			     linus_set_fn.arg.arg_desc (i) = linus_set_fn_info.arg_desc (i);
			     call
				linus_assign_data ((linus_set_fn.arg.arg_desc (i)),
				linus_set_fn.arg.arg_assn_type (i),
				linus_set_fn.arg.arg_assn_len (i));
			     call
				linus_lila_alloc_lit (lcb_ptr,
				addr (linus_set_fn.arg.arg_desc (i)),
				linus_set_fn.arg.arg_assn_ptr (i), bit_len);
			     if linus_set_fn.arg.arg_assn_ptr (i) = null then
				/* trouble */
				call
				     linus_lila_error (lcb_ptr, lsh_ptr,
				     linus_error_$cant_alloc_lit, "");
			     arg_list.arg_des_ptr (i) =
				set_arg_ptr (linus_set_fn.arg.arg_assn_ptr (i),
				addr (linus_set_fn.arg.arg_desc (i))); /* fill in calc arg list */
			     arg_list.arg_des_ptr (i + linus_set_fn.nargs) =
				addr (linus_set_fn.arg.arg_desc (i));
			end;			/* setting up for arg conv. */
		end;				/* loop through args */
	     end;					/* if fixed arg function call */

	else do;					/* variable arg function */
		arg_desc.ndescs = linus_set_fn.nargs;
		do i = 1 to linus_set_fn.nargs;	/* pass through input args */
		     linus_set_fn.arg.must_convert (i) = "0"b; /* never need to convert */
		     arg_desc.desc (i) = linus_set_fn.arg.desc (i); /* save for info call */
		     arg_list.arg_des_ptr (i) =
			set_arg_ptr (linus_set_fn.arg.assn_ptr (i),
			addr (linus_set_fn.arg.desc (i))); /* fill in calc arg list */
		     arg_list.arg_des_ptr (i + linus_set_fn.nargs) =
			addr (linus_set_fn.arg.desc (i));
		end;				/* arg loop */
		arg_desc_ptr = addr (arg_desc);
		rslt_desc_arg_list.arg_ptrs (1) = addr (arg_desc_ptr);
		rslt_desc_arg_list.arg_ptrs (2) = addr (linus_set_fn.rslt_desc);
		call
		     cu_$generate_call (linus_set_fn_info.info_entry,
		     addr (rslt_desc_arg_list));	/* call info ent for rslt. */
		if linus_set_fn.rslt_desc = "0"b then /* if couldn't handle this input */
		     call
			linus_lila_error (lcb_ptr, lsh_ptr,
			linus_error_$inv_setfn_args, fn_name);
	     end;					/* variable arg function call */

	num_ptrs = 2;				/* set up assign entry arg list */
	allocate arg_list in (work_area);
	linus_set_fn.assign_al_ptr = al_ptr;
	arg_list.arg_count, arg_list.desc_count = 2;
	arg_list.code = 4;
	ef_data.desc = linus_set_fn.rslt_desc;		/* set up ef_data while we are at it */
	call
	     linus_assign_data ((ef_data.desc), ef_data.assn_type, ef_data.assn_len)
	     ;
	call
	     linus_lila_alloc_lit (lcb_ptr, addr (ef_data.desc), ef_data.assn_ptr,
	     ef_data.bit_length);
	if ef_data.assn_ptr = null then
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$cant_alloc_lit,
		"");
	ef_data.var_name = "";
	ef_data.nmrds_items = 0;
	ef_data.ef_ptr = linus_set_fn_ptr;
	arg_list.arg_des_ptr (1) =
	     set_arg_ptr (ef_data.assn_ptr, addr (ef_data.desc));
						/* back to assign arg list */
	arg_list.arg_des_ptr (2) = addr (linus_set_fn.rslt_desc);

	nargs = 3 + select_info.nsevals + select_info.n_mrds_items;
	num_ptrs = 2 * nargs;			/* set up retrieval arg list */
	allocate arg_list in (work_area);
	linus_set_fn.rtrv_al_ptr = al_ptr;
	arg_list.arg_count, arg_list.desc_count = num_ptrs;
	arg_list.code = 4;

	arg_list.arg_des_ptr (1) = addr (lcb.db_index);	/* data base index */
	arg_list.arg_des_ptr (nargs + 1) = addr (FB35D);
	arg_list.arg_des_ptr (2) = select_info.se_ptr;	/* selection expr. */
	call
	     linus_lila_alloc_lit (lcb_ptr, addr (BITD),
	     arg_list.arg_des_ptr (nargs + 2), bit_len);
	if arg_list.arg_des_ptr (nargs + 2) = null then
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$cant_alloc_lit,
		"");
	char_desc.len = select_info.se_len;
	arg_list.arg_des_ptr (2 + nargs) -> bit36 = char_desc_bits;
	if ^select_info.unique_flag /* decide if need to tell MRDS to fetch dups */
	     | (select_info.unique_flag & select_info.dup_flag) then
	     substr (after (sex, "-select "), 1, 4) = "-dup";

	do i = 3 to select_info.nsevals + 2;		/* add se_val args */
	     call
		linus_assign_data (select_info.se_vals.desc_ptr (i - 2) -> bit36,
		type, len);
	     arg_list.arg_des_ptr (i) =
		set_arg_ptr (select_info.se_vals.arg_ptr (i - 2),
		select_info.se_vals.desc_ptr (i - 2));
	     arg_list.arg_des_ptr (nargs + i) =
		select_info.se_vals.desc_ptr (i - 2);
	end;					/* adding se_val args */

	do i = select_info.nsevals + 3 to nargs - 1;	/* add retrieval args */
	     arg_list.arg_des_ptr (i) =
		set_arg_ptr (select_info.mrds_item
		.arg_ptr (i - select_info.nsevals - 2),
		addr (select_info.mrds_item.desc (i - select_info.nsevals - 2)));
	     call
		linus_lila_alloc_lit (lcb_ptr, addr (BITD),
		arg_list.arg_des_ptr (nargs + i), bit_len);
	     if arg_list.arg_des_ptr (nargs + i) = null then
		call
		     linus_lila_error (lcb_ptr, lsh_ptr,
		     linus_error_$cant_alloc_lit, "");
	     arg_list.arg_des_ptr (nargs + i) -> bit36 =
		select_info.mrds_item.desc (i - select_info.nsevals - 2);
	end;					/* adding retrieval args */

	call
	     linus_lila_alloc_lit (lcb_ptr, addr (FB35D),
	     arg_list.arg_des_ptr (nargs), bit_len);	/* add code */
	if arg_list.arg_des_ptr (nargs) = null then
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$cant_alloc_lit,
		"");
	arg_list.arg_des_ptr (num_ptrs) = addr (FB35D);

	si_ptr = null;				/* we have taken everything out */

	if lss_ptr ^= null then do;			/* if not outer set fn */
		linus_set_fn.fwd_ptr = ls_set.si_ptr -> select_info.prior_sf_ptr;
						/* put this block into chain */
		ls_set.si_ptr -> select_info.prior_sf_ptr = linus_set_fn_ptr;
	     end;

	code = 0;
	return;

set_arg_ptr:
     proc (a_ptr, a_desc_ptr) returns (ptr);

/* procedure to return a valid arg pointer given an internal pointer, i.e.
   resolves the var. str. problem. */

	dcl     a_ptr		 ptr;
	dcl     r_ptr		 ptr;
	dcl     a_desc_ptr		 ptr;

	if mdbm_util_$varying_data_class (a_desc_ptr) then
	     r_ptr = addrel (a_ptr, 1);
	else r_ptr = a_ptr;
	return (r_ptr);

     end set_arg_ptr;

     end linus_lila_set_fn;
