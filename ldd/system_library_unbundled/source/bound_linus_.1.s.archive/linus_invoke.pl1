/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


linus_invoke:
     proc (sci_ptr, lcb_ptr);

/* DESCRIPTION:

   This  request specifies that the requests contained in the designated macro
   segment  are to be executed.  Arguments are optionally passed to the macro.
   This  feature  provides  the  capability  to invoke a pre-defined series of
   LINUS requests.  


   
   HISTORY:
   
   77-06-01 J. C. C. Jagernuath: Initially written.
   
   80-01-04 Rickie E.  Brinegar: Modified to add the pop_all entry point.
   
   80-01-15 Rickie E.  Brinegar: to return an error message when the number of
   invokes exceed linus_data_$max_invocs.
   
   82-02-11 Paul W. Benjamin: ssu_ conversion.

   82-06-21 Al Dupuis: removed unreferenced variable iox_$user_io.

   82-08-31  DJ Schimke: Replaced the calls to the undocumented entrypoint 
   syn_$syn_attach_ with a calls to iox_$attach_ptr. Declared iox_$attach_ptr
   and attach_description and added the iocb include file.
   This is in response to phx13314. 
*/

%include iocb;
%page;
%include linus_lcb;
%page;
%include linus_char_argl;
%page;
%include linus_invoc_stack;
%page;
%include ssu_prompt_modes;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

	dcl     STREAM_INPUT	 fixed bin options (constant) int static init (1);

	dcl     path_name		 char (char_argl.arg.arg_len (1)) based (char_argl.arg.arg_ptr (1));
	dcl     argument		 char (char_argl.arg.arg_len (l)) based (char_argl.arg.arg_ptr (l));
	dcl     lcbpa		 char (16);
	dcl     lcbpl		 fixed bin (21);
	dcl     macro_path		 char (168);
	dcl     macro_arg		 char (mac_len) based (mac_ptr);
	dcl     popped_on_pi	 bit (1);
	dcl     scipa		 char (16);
	dcl     scipl		 fixed bin (21);
	dcl     static_sci_ptr	 ptr int static;	/* Change this if linus allows recursion */
	dcl     temp_lcb_ptr	 ptr;
	dcl     tmp_char		 char (char_argl.arg.arg_len (l + 1)) based (char_argl.arg.arg_ptr (l + 1));

	dcl     attach_description	 char (37);	/* "syn_ "||sw_name */
	dcl     sw_name		 char (32);
	dcl     dot_linus		 char (6);
	dcl     (
	        iocb_ptr		 init (null),
	        ref_ptr		 init (null),
	        mac_ptr		 init (null),
	        env_ptr		 init (null),
	        tmp_ptr		 init (null)
	        )			 ptr;
	dcl     (l, i)		 fixed bin;
	dcl     (addr, before, fixed, null, rel, substr) builtin;
	dcl     (icode, code, mac_len, out_code) fixed bin (35);
	dcl     (
	        error_table_$not_attached,
	        linus_error_$no_input_arg,
	        linus_error_$too_many_invocs,
	        sys_info$max_seg_size,
	        linus_data_$i_id,
	        linus_data_$max_invocs
	        )			 fixed bin (35) ext;
	dcl     cleanup		 condition;
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     cu_$decode_entry_value entry (entry, ptr, ptr);
	dcl     ioa_$rsnnl		 entry () options (variable);
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$attach_ptr	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$find_iocb	 entry (char (*), ptr, fixed bin (35));
	dcl     iox_$move_attach	 entry (ptr, ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$abort_subsystem	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$get_info_ptr	 entry (ptr) returns (ptr);
	dcl     ssu_$set_prompt_mode	 entry (ptr, bit (*));
	dcl     iox_$user_input	 ext ptr;

	ca_ptr = null;

	mac_len, icode = 0;

	on cleanup call clean_up;

	static_sci_ptr = sci_ptr;

	call ssu_$arg_count (sci_ptr, nargs_init);
	if nargs_init = 0 then
	     call error (linus_error_$no_input_arg, "");
	if lcb.ivs_ptr ^= null then do;
		ivs_ptr = lcb.ivs_ptr;		/* No need to allocate invoke structure */
		if invoc_stack.ninvocs ^< linus_data_$max_invocs then
		     call error (linus_error_$too_many_invocs, "");
	     end;
	else do;
		allocate invoc_stack in (lcb.static_area); /* Invoke stack needs to be allocated */
		lcb.ivs_ptr = ivs_ptr;
		invoc_stack.ninvocs = 0;
	     end;
	dot_linus = "      ";			/* Append .linus to pathname if necessary */
	allocate char_argl in (lcb.static_area);
	do i = 1 to nargs_init;
	     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
	end;
	if char_argl.arg.arg_len (1) > 6 then
	     dot_linus = substr (path_name, char_argl.arg.arg_len (1) - 5);
	if dot_linus ^= ".linus" then
	     macro_path = path_name || ".linus";
	else macro_path = path_name;
	call cu_$decode_entry_value (linus_invoke, ref_ptr, env_ptr);
	sw_name = unique_chars_ ("0"b) || ".linus_invoke";/* Unique switch name */
	call ioa_$rsnnl ("^p", lcbpa, lcbpl, lcb_ptr);
	call ioa_$rsnnl ("^p", scipa, scipl, sci_ptr);
	call iox_$attach_name (sw_name, iocb_ptr,
	     "linus_invoke_ " || macro_path || " " || substr (lcbpa, 1, lcbpl) || " " || substr (scipa, 1, scipl),
	     ref_ptr, icode);
	if icode ^= 0 then
	     call error (icode, before (macro_path, " "));
	call iox_$open (iocb_ptr, STREAM_INPUT, "0"b, icode);
	if icode ^= 0 then
	     call error (icode, before (macro_path, " "));

	if invoc_stack.ninvocs = 0			/* save actual attachment of user_input */
	then do;					/* if we are grabbing it away */
		sw_name = unique_chars_ ("0"b) || ".linus_input"; /* another unique switch */
						/* creating a new switch */
		call iox_$find_iocb (sw_name, lcb.actual_input_iocbp, icode);
		if icode ^= error_table_$not_attached & icode ^= 0
		then call error (icode, "Creating IO control block.");
		call iox_$move_attach (iox_$user_input, lcb.actual_input_iocbp, icode);
		if icode ^= 0
		then call error (icode, "Moving attachment of user input.");
	     end;
	else do;
		call iox_$detach_iocb (iox_$user_input, icode);
		if icode ^= 0
		then call error (icode, "Detaching user input.");
	     end;
	attach_description = "syn_ " || iocb_ptr -> iocb.name;
	call iox_$attach_ptr (iox_$user_input, attach_description, ref_ptr, icode);
	if icode ^= 0
	then call error (icode, "Attaching user input.");

	invoc_stack.ninvocs = invoc_stack.ninvocs + 1;	/* Push invoke stack */
	invoc_stack.invoc.iocb_ptr (invoc_stack.ninvocs) = lcb.is_ptr;
	lcb.is_ptr = iocb_ptr;
	invoc_stack.invoc.arg_ptr (invoc_stack.ninvocs) = lcb.cal_ptr;
	if char_argl.nargs = 1 then
	     lcb.cal_ptr = null;
	else do;					/* Prepare optional arguments for macro segment */
		nargs_init = char_argl.nargs - 1;
		allocate char_argl in (lcb.static_area) set (tmp_ptr);
		do l = 1 to nargs_init;
		     tmp_ptr -> char_argl.nargs = l;
		     mac_len, tmp_ptr -> char_argl.arg.arg_len (l) = char_argl.arg.arg_len (l + 1);
		     allocate macro_arg in (lcb.static_area);
		     macro_arg = tmp_char;
		     tmp_ptr -> char_argl.arg.arg_ptr (l) = mac_ptr;
		     mac_ptr = null;
		end;
		lcb.cal_ptr = tmp_ptr;
		tmp_ptr = null;
	     end;

	call ssu_$set_prompt_mode (sci_ptr, DONT_PROMPT); /* turn off prompting */

	if ca_ptr ^= null
	then free char_argl;
	return;

error:
     proc (err_code, string);

	dcl     err_code		 fixed bin (35);
	dcl     string		 char (*);

	call clean_up;
	call linus_convert_code (err_code, out_code, linus_data_$i_id);
	call ssu_$abort_line (sci_ptr, out_code, string);

     end error;

clean_up:
     proc;

	dcl     i			 fixed bin;

	if mac_ptr ^= null then
	     free macro_arg;
	if tmp_ptr ^= null then do;
		do i = 1 to tmp_ptr -> char_argl.nargs;
		     mac_ptr = tmp_ptr -> char_argl.arg.arg_ptr (i);
		     mac_len = tmp_ptr -> char_argl.arg.arg_len (i);
		     free macro_arg;
		end;
		free tmp_ptr -> char_argl;
	     end;
	if ca_ptr ^= null
	then free char_argl;

     end clean_up;

pop:
     entry (lcb_ptr, code);				/* Pop invoke stack */

	code = 0;
	ivs_ptr = lcb.ivs_ptr;
	if lcb.cal_ptr ^= null then do;
		do i = 1 to lcb.cal_ptr -> char_argl.nargs;
		     mac_len = lcb.cal_ptr -> char_argl.arg.arg_len (i);
		     mac_ptr = lcb.cal_ptr -> char_argl.arg.arg_ptr (i);
		     free macro_arg;
		end;
		free lcb.cal_ptr -> char_argl;	/* Free current argument list */
	     end;
	call iox_$close (lcb.is_ptr, icode);
	if icode ^= 0 then
	     call error (icode, "");
	else call iox_$detach_iocb (lcb.is_ptr, icode);
	if icode ^= 0 then
	     call error (icode, "");
	lcb.cal_ptr = invoc_stack.invoc.arg_ptr (invoc_stack.ninvocs);
						/* Pop pointer to argument list */
	lcb.is_ptr = invoc_stack.invoc.iocb_ptr (invoc_stack.ninvocs);
						/* Pop pointer to input stream */
	call iox_$detach_iocb (iox_$user_input, code);
	if code = 0
	then do;

		if lcb.is_ptr ^= iox_$user_input
		then do;
			attach_description = "syn_ " || lcb.is_ptr -> iocb.name;
			call iox_$attach_ptr (iox_$user_input, attach_description, ref_ptr, code);
		     end;
		else do;
			call iox_$move_attach (lcb.actual_input_iocbp, iox_$user_input, code);
			if code = 0
			then call iox_$destroy_iocb (lcb.actual_input_iocbp, code);
		     end;
	     end;
	invoc_stack.ninvocs = invoc_stack.ninvocs - 1;
	if invoc_stack.ninvocs = 0 then do;
		free invoc_stack;
		lcb.ivs_ptr = null;
	     end;
	return;

pop_all_on_pi:					/* called by ssu_ pi handler */
     entry (sci_ptr);

	temp_lcb_ptr = ssu_$get_info_ptr (sci_ptr);
	popped_on_pi = "1"b;
	goto common_pop_all;

pop_all:
     entry (lcb_ptr, code);				/* Throw away the invoke stack */


	code = 0;
	temp_lcb_ptr = lcb_ptr;
	popped_on_pi = "0"b;

common_pop_all:
	if temp_lcb_ptr -> lcb.is_ptr ^= iox_$user_input then do;
		call iox_$close (temp_lcb_ptr -> lcb.is_ptr, icode); /* close and detach the current stream */
		call iox_$detach_iocb (temp_lcb_ptr -> lcb.is_ptr, icode);
		temp_lcb_ptr -> lcb.is_ptr = iox_$user_input;
		if temp_lcb_ptr -> lcb.cal_ptr ^= null then do;
			ca_ptr = temp_lcb_ptr -> lcb.cal_ptr;
			do l = 1 to char_argl.nargs;
			     free argument;
			end;
			free char_argl;
			temp_lcb_ptr -> lcb.cal_ptr = null;
		     end;
		if temp_lcb_ptr -> lcb.ivs_ptr ^= null then do;
			ivs_ptr = temp_lcb_ptr -> lcb.ivs_ptr;
			do i = 2 to invoc_stack.ninvocs;
			     call iox_$close (invoc_stack.invoc.iocb_ptr (i), icode);
			     call iox_$detach_iocb (invoc_stack.iocb_ptr (i), icode);
			     if invoc_stack.invoc.arg_ptr (i) ^= null then do;
				     ca_ptr = invoc_stack.invoc.arg_ptr (i);
				     do l = 1 to char_argl.nargs;
					free argument;
				     end;
				     free char_argl;
				end;
			end;
			free invoc_stack;
			temp_lcb_ptr -> lcb.ivs_ptr = null;
		     end;
		call iox_$detach_iocb (iox_$user_input, icode);
		if icode = 0
		then call iox_$move_attach (temp_lcb_ptr -> lcb.actual_input_iocbp, iox_$user_input, icode);
		if icode = 0
		then call iox_$destroy_iocb (temp_lcb_ptr -> lcb.actual_input_iocbp, icode);
		if icode = 0
		then do;
			if temp_lcb_ptr -> lcb.prompt_flag
			then call ssu_$set_prompt_mode (static_sci_ptr, PROMPT | DONT_PROMPT_AFTER_NULL_LINES | PROMPT_IF_TYPEAHEAD);
		     end;
		else if popped_on_pi
		then call ssu_$abort_subsystem (sci_ptr, icode);
		else code = icode;
	     end;


     end linus_invoke;
