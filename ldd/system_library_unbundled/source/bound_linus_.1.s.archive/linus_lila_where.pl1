/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_lila_where:
     proc (lcb_ptr, lsh_ptr, inner, td_ptr, code);

/* DESCRIPTION:

   This  procedure  processes  the  LILA where clause, producing the qualifier
   portion of a MRDS -where clause.  
   
   

   HISTORY:

   77-08-01 J. A. Weeldreyer: Initially written.
   
   80-03-13  Rickie  E.   Brinegar:  Modified  to  use  a work area defined on
   lcb.lila_area_ptr instead of getting system free area.
   
   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.
   
   81-09-17  Rickie  E.   Brinegar:  Changed  the  two  do loops in the reduce
   procedure  to  use the bit variable done in the while clause instead of the
   large  boolean variables that are now done in the if statements just before
   and inside of the do loops.  This avoids subscript range conditions.
   
   81-11-06  Rickie  E.   Brinegar: Added the declaration of the fixed builtin
   and deleted the declaration of the unreferenced linus_data_$max_leaf_vals.
   
*/

%include linus_lcb;
%page;
%include linus_ls_block;
%page;
%include linus_ls_header;
%page;
%include linus_mrds_block;
%page;
%include linus_token_data;

	dcl     (
	        inner,				/* Input: on if inner LILA block */
	        where_flag,				/* on if "where" OK */
	        term_flag,				/* on if term OK */
	        not_flag,				/* on if "^" OK */
	        lp_flag,				/* on if "(" OK */
	        bop_flag,				/* on if bool. op. OK */
	        rp_flag,				/* on if ")" OK */
	        end_flag,				/* on if end OK */
	        done
	        )			 bit (1) unal;	/* internal completion flag */
	dcl     (
	        code,				/* Output: status code */
	        icode
	        )			 fixed bin (35);
	dcl     i			 fixed bin;	/* internal index */
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);
	dcl     token		 char (token_data.length) based (token_data.t_ptr);

	dcl     mrds_bop		 (22:23) char (5) int static options (constant)
				 init (") & (", ") | (");
	dcl     bop_prec		 (22:23) fixed bin int static options (constant) init (2, 1);
	dcl     (
	        END		 init (1),
	        PAREN		 init (2),
	        OP		 init (3)
	        )			 fixed bin int static options (constant);

	dcl     (
	        linus_error_$where_syntax,
	        linus_error_$where_ovfl,
	        linus_error_$incomplete_where,
	        linus_error_$unbal_parens,
	        linus_data_$max_pred_stack_size,
	        linus_data_$max_range_items,
	        mrds_data_$max_token_size,
	        mrds_data_$max_select_items,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (addr, fixed, length, null, rel) builtin;

	dcl     linus_lila_get_token	 entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35));
	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_lila_term	 entry (ptr, ptr, ptr, fixed bin (35));

	mblk_ptr = null;

	lsb_ptr = ls_header.cur_ptr;

	if token_data.key = NULL then do;		/* if need to get new token */
		call
		     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos, td_ptr,
		     icode);
		if icode ^= 0 then
		     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	     end;

	where_flag = "1"b;				/* init. state flags */
	term_flag, not_flag, lp_flag, bop_flag, rp_flag, end_flag = "0"b;

	done = "0"b;

	do while (^done);				/* main token processing loop */

	     go to token_proc (token_data.key);

token_proc (0):					/* null */
token_proc (3):					/* linus variable */
token_proc (4):					/* constant */
token_proc (5):					/* set function */
token_proc (8):					/* * */
token_proc (9):					/* / */
token_proc (10):					/* + */
token_proc (11):					/* - */
token_proc (12):					/* table name */
token_proc (13):					/* row table pair */
token_proc (14):					/* union */
token_proc (15):					/* inter */
token_proc (16):					/* differ */
token_proc (17):					/* row designator */
token_proc (18):					/* { */
token_proc (19):					/* } */
token_proc (20):					/* select */
token_proc (24):					/* = */
token_proc (25):					/* ^= */
token_proc (26):					/* > */
token_proc (27):					/* >= */
token_proc (28):					/* < */
token_proc (29):					/* <= */
token_proc (30):					/* from */
token_proc (32):					/* dup */
token_proc (33):					/* unique */
token_proc (34):					/* , */
	     if ^end_flag then /* these tokens should not be here, try to treat as end */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr,
		     linus_error_$incomplete_where, token);

	     if ^inner then do;			/* if legit end for outer block */
		     call reduce (END);		/* perform final predicate retuction */
		     if ls_block.nprops ^= 0 & ls_block.nterms ^= 1 then
			/* didnt come out right */
			call
			     linus_lila_error (lcb_ptr, lsh_ptr,
			     linus_error_$where_syntax, "");
		end;				/* if outer block */

	     else do;				/* if is legit end for inner block */
		     do i = 1, 2 while (ls_block.pred_pcnt > 0);
			call reduce (PAREN);	/* reduce for 2 implied RP's at end of inner block */
			ls_block.pred_pcnt = ls_block.pred_pcnt - 1;
		     end;
		end;				/* if inner block */
	     done = "1"b;				/* set completion flag */
	     go to next;

token_proc (1):					/* ) */
	     if ^rp_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);

	     if ls_block.pred_pcnt <= 0 then /* if no matching ( */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$unbal_parens,
		     token);

	     call reduce (PAREN);			/* perform any necessary reductions */
	     ls_block.pred_pcnt = ls_block.pred_pcnt - 1;

	     token_data.key = NULL;			/* force new token */
	     go to next;

token_proc (2):					/* column spec. */
token_proc (6):					/* scalar function */
	     if ^term_flag then /* both tokens start terms, is one expected? */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);

	     call linus_lila_term (lcb_ptr, lsh_ptr, td_ptr, icode);
						/* go process the term */
	     if icode ^= 0 then
		call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);

	     term_flag,				/* set state flags */
		lp_flag, not_flag = "0"b;
	     bop_flag, rp_flag, end_flag = "1"b;
	     go to next;

token_proc (7):					/* ( */
	     if ^lp_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);
	     ls_block.pred_pcnt = ls_block.pred_pcnt + 1; /* merely incr. par. count */
	     term_flag,				/* set state flags */
		not_flag = "1"b;
	     token_data.key = NULL;			/* force new token */
	     go to next;

token_proc (21):					/* ^ */
	     if ^not_flag then /* if not allowed here */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);
	     if ls_block.nprops >= linus_data_$max_pred_stack_size then
		/* if op stack ovfl. */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_ovfl,
		     "");
	     ls_block.nprops = ls_block.nprops + 1;	/* add ^ to op stack */
	     ls_block.pred_op_stack.key (ls_block.nprops) = NOT;
	     ls_block.pred_op_stack.p_cnt (ls_block.nprops) = ls_block.pred_pcnt;
	     token_data.key = NULL;			/* force new token */
	     term_flag,				/* set state flags */
		not_flag, rp_flag, bop_flag, end_flag = "0"b;
	     lp_flag = "1"b;
	     go to next;

token_proc (22):					/* & */
token_proc (23):					/* | */
	     if ^bop_flag then /* if bool. oper. not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);
	     if ls_block.nprops > 0 then /* if prev. op. */
		if ls_block.pred_op_stack.p_cnt (ls_block.nprops)
		     = ls_block.pred_pcnt then
		     if bop_prec (token_data.key)
			<= bop_prec (ls_block.pred_op_stack.key (ls_block.nprops))
		     then call reduce (OP);		/* reduce for lower prec. oper. */
	     if ls_block.nprops >= linus_data_$max_pred_stack_size then
		/* if over flow */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_ovfl,
		     "");
	     ls_block.nprops = ls_block.nprops + 1;	/* add new op. to stack */
	     ls_block.pred_op_stack.key (ls_block.nprops) = token_data.key;
	     ls_block.pred_op_stack.p_cnt (ls_block.nprops) = ls_block.pred_pcnt;
	     token_data.key = NULL;			/* force new token */
	     term_flag,				/* set state flags */
		not_flag, lp_flag = "1"b;
	     bop_flag, rp_flag, end_flag = "0"b;
	     go to next;

token_proc (31):					/* where */
	     if ^where_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);

	     if inner then do;			/* if inner block, add implied & and ( */
		     if ls_block.nprops >= linus_data_$max_pred_stack_size then
			/* if will overfl. */
			call
			     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_ovfl,
			     "");
		     ls_block.nprops = ls_block.nprops + 1; /* add & */
		     ls_block.pred_op_stack.key (ls_block.nprops) = AND;
		     ls_block.pred_op_stack.p_cnt (ls_block.nprops) = ls_block.pred_pcnt;
		     ls_block.pred_pcnt = ls_block.pred_pcnt + 1; /* add ( */
		end;				/* if inner block */

	     where_flag = "0"b;			/* set state flags */
	     term_flag, not_flag, lp_flag = "1"b;
	     token_data.key = NULL;			/* force new token */
	     go to next;

next:
	     if token_data.key = NULL then do;		/* if need new token */
		     call
			linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos,
			td_ptr, icode);
		     if icode ^= 0 then
			call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
		end;

	end;					/* main processing loop */

	code = 0;					/* made it */
	return;

reduce:
     proc (type);

/* Procedure to reduce items in pred stack. Three types of reduction are provided:
   (a) for lower precedence operators, (b) for right parenthesis, and (c) final
   reduction. */

	dcl     type		 fixed bin;
	dcl     bp		 ptr;
	dcl     done		 bit (1);

	if type = END then
	     do while (ls_block.nprops > 0 & ls_block.nterms > 1);
		call combine;
	     end;					/* final reduction */
	else if type = PAREN then do;			/* paren reduction */

		done = "0"b;
		if ls_block.nprops ^> 0 | ls_block.nterms ^> 1 then
		     done = "1"b;
		else if ls_block.pred_op_stack.p_cnt (ls_block.nprops)
			^= ls_block.pred_pcnt then
		     done = "1"b;
		do while (^done);
		     call combine;
		     if ls_block.nprops ^> 0 | ls_block.nterms ^> 1 then
			done = "1"b;
		     else if ls_block.pred_op_stack.p_cnt (ls_block.nprops)
			     ^= ls_block.pred_pcnt then
			done = "1"b;
		end;				/* combining all terms within paren */
		if ls_block.nprops > 0 & ls_block.nterms > 1 then /* check for preceding not */
		     if ls_block.pred_op_stack.key (ls_block.nprops) = NOT
			& ls_block.pred_op_stack.p_cnt (ls_block.nprops)
			= ls_block.pred_pcnt - 1 then do;
			     bp = ls_block.term_hd_ptr; /* point to top term in stack */
			     ms_len_init = 3 + length (bp -> mrds_block.mrds_string);
						/* alloc. new block */
			     nval_args_init = bp -> mrds_block.nval_args;
			     allocate mrds_block in (work_area);
			     mrds_block.fwd_ptr = bp -> mrds_block.fwd_ptr;
						/* replace current top term */
			     mrds_block.mrds_string =
				"^(" || bp -> mrds_block.mrds_string || ")";
			     mrds_block.val_args = bp -> mrds_block.val_args;
			     ls_block.nprops = ls_block.nprops - 1;
			     ls_block.term_hd_ptr = mblk_ptr;
			     bp = null;
			     mblk_ptr = null;
			end;			/* incorporating not */
	     end;					/* paren reduction */
	else do;
		done = "0"b;
		if ls_block.nprops ^> 0 | ls_block.nterms ^> 1 then
		     done = "1"b;
		else if ls_block.pred_op_stack.p_cnt (ls_block.nprops)
			^= ls_block.pred_pcnt
			| bop_prec (token_data.key)
			> bop_prec (ls_block.pred_op_stack.key (ls_block.nprops)) then
		     done = "1"b;
		do while (^done);
		     call combine;
		     if ls_block.nprops ^> 0 | ls_block.nterms ^> 1 then
			done = "1"b;
		     else if ls_block.pred_op_stack.p_cnt (ls_block.nprops)
			     ^= ls_block.pred_pcnt
			     | bop_prec (token_data.key)
			     > bop_prec (ls_block.pred_op_stack.key (ls_block.nprops))
		     then done = "1"b;
		end;
	     end;					/* operator reduction */

combine:
     proc;

/* Procedure to combine the top two string blocks and top operator into one
   string block, and replace the items in the stack */

	dcl     (b1p, b2p)		 ptr;
	dcl     i			 fixed bin;

	b2p = ls_block.term_hd_ptr;			/* point to top term */
	b1p = b2p -> mrds_block.fwd_ptr;		/* and prec. term */

	ms_len_init =
	     7 + length (b1p -> mrds_block.mrds_string)
	     + length (b2p -> mrds_block.mrds_string);
	nval_args_init =
	     b1p -> mrds_block.nval_args + b2p -> mrds_block.nval_args;
	allocate mrds_block in (work_area);		/* the combination block */

	mrds_block.fwd_ptr = b1p -> mrds_block.fwd_ptr;	/* replace top two terms */
	mrds_block.mrds_string =
	     "(" || b1p -> mrds_block.mrds_string
	     || mrds_bop (ls_block.pred_op_stack.key (ls_block.nprops))
	     || b2p -> mrds_block.mrds_string || ")";
	do i = 1 to b1p -> mrds_block.nval_args;
	     mrds_block.val_args.arg_ptr (i) =
		b1p -> mrds_block.val_args.arg_ptr (i);
	     mrds_block.val_args.desc_ptr (i) =
		b1p -> mrds_block.val_args.desc_ptr (i);
	end;
	do i = b1p -> mrds_block.nval_args + 1 to mrds_block.nval_args;
	     mrds_block.val_args.arg_ptr (i) =
		b2p
		-> mrds_block.val_args.arg_ptr (i - b1p -> mrds_block.nval_args);
	     mrds_block.val_args.desc_ptr (i) =
		b2p
		-> mrds_block.val_args.desc_ptr (i - b1p -> mrds_block.nval_args);
	end;
	ls_block.nprops = ls_block.nprops - 1;
	ls_block.nterms = ls_block.nterms - 1;
	ls_block.term_hd_ptr = mblk_ptr;
	b1p = null;
	b2p = null;
	mblk_ptr = null;

     end combine;

     end reduce;

     end linus_lila_where;
