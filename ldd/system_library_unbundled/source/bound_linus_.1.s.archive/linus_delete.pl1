/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_delete:
     proc (sci_ptr, lcb_ptr);

/* DESCRIPTION:

   Selected rows are deleted from a single table in the data base.



   HISTORY:

   77-05-14 J. C. C. Jagernauth: Intially written.

   80-03-14  Rickie  E.   Brinegar:  Modified  to  use  a work area defined on
   lcb.linus_area_ptr instead of getting system free area.

   81-06-04  Rickie  E.   Brinegar:  Modified to not pass arguments for return
   values to dsl_$delete.
   
   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.
   
   81-11-13  Rickie  E.  Brinegar: Added timing of dsl_$delete and changed the
   cu_$gen_call to cu_$generate_call.

   82-02-10 Paul W. Benjamin: ssu_ conversion

   82-09-03 Dave J. Schimke: Added a call to dsl_$get_pn to get the opening
   mode and report an error if user tries to delete with a retrieval opening.
   Declared mode, db_path, dsl_$get_path, and linus_error_$update_not_valid.
   This is in response to phx 13742.

   82-11-15 Dave Schimke: Declared fixed and rel builtins.

   83-08-30  Bert Moberg:  Added call to linus_translate_query$auto if no current
   select expression is available
*/

%include linus_lcb;
%page;
%include linus_select_info;
%page;
%include mdbm_arg_list;
%page;
%include linus_arg_list;

	dcl     sci_ptr		 ptr;		/* for ssu_ */

	dcl     nargs		 fixed;

	dcl     (addr, fixed, null, rel, substr, vclock) builtin;

	dcl     (desc, l)		 fixed bin;

	dcl     (icode, out_code)	 fixed bin (35);

	dcl     initial_mrds_vclock	 float bin (63);

	dcl     1 arg_len_bits	 based,
		2 pad		 bit (12) unal,
		2 length		 bit (24) unal;

	dcl     db_path		 char (168) var;
	dcl     mode		 char (20);
	dcl     sel_expr		 char (select_info.se_len) based (select_info.se_ptr);

	dcl     (
	        linus_data_$d_id,
	        linus_error_$inv_for_delete,
	        linus_error_$no_db,
	        linus_error_$no_input_arg_reqd,
	        linus_error_$update_not_allowed,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     dsl_$delete		 entry options (variable);
	dcl     dsl_$get_pn		 entry (fixed bin (35), char (168) var, char (20), fixed bin (35));
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     linus_translate_query$auto	 entry (ptr, ptr);
	dcl     ssu_$abort_line	 entry options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.linus_area_ptr);

	al_ptr, char_ptr = null;
	icode = 0;

	if lcb.db_index = 0 then
	     call error (linus_error_$no_db, "");
	call dsl_$get_pn (lcb.db_index, db_path, mode, icode);
	if substr (mode, 1, 9) = "retrieval" | substr (mode, 11, 9) = "retrieval" then
	     call error (linus_error_$update_not_allowed, "");

	call ssu_$arg_count (sci_ptr, nargs);
	if nargs ^= 0 then
	     call error (linus_error_$no_input_arg_reqd, "");
	if lcb.si_ptr = null then call linus_translate_query$auto (sci_ptr, lcb_ptr); /* try translating it */
	if lcb.si_ptr = null then return; /* No good?  Oh, well */
	si_ptr = lcb.si_ptr;
	if ^select_info.se_flags.val_del then
	     call error (linus_error_$inv_for_delete, "");
	if select_info.nsevals = 0 then do;
		if lcb.timing_mode then
		     initial_mrds_vclock = vclock;
		call dsl_$delete (lcb.db_index, sel_expr, icode);
		if lcb.timing_mode then
		     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
	     end;
	else do;
		n_chars_init = 1;
		allocate char_desc in (work_area);

/* 81-06-04 Rickie E. Brinegar: Start changed code ************************* */

		desc = select_info.nsevals + 3;

/* 81-06-04 Rickie E. Brinegar: End changed code *************************** */

		num_ptrs = desc * 2;
		allocate arg_list in (work_area);

		arg_list.arg_des_ptr (num_ptrs) = addr (char_desc.fb_desc);
						/* Return code descriptor */
		arg_list.arg_des_ptr (1) = addr (lcb.db_index); /* Data base index */
		arg_list.arg_des_ptr (desc + 1) = addr (char_desc.fb_desc);
						/* Data base index descriptor */
		arg_list.arg_count, arg_list.desc_count = num_ptrs; /* Initialize argument list header */
		arg_list.code = 4;
		arg_list.pad = 0;

		arg_list.arg_des_ptr (desc) = addr (icode);
		char_desc.arr.var (1) =
		     addr (select_info.se_len) -> arg_len_bits.length;
		arg_list.arg_des_ptr (2) = select_info.se_ptr;
		arg_list.arg_des_ptr (desc + 2) = addr (char_desc.arr (1));
		do l = 1 to select_info.nsevals;
		     arg_list.arg_des_ptr (2 + l) = select_info.se_vals.arg_ptr (l);
		     arg_list.arg_des_ptr (2 + l + desc) =
			select_info.se_vals.desc_ptr (l);
		end;

		if lcb.timing_mode then
		     initial_mrds_vclock = vclock;
		call cu_$generate_call (dsl_$delete, al_ptr);
		if lcb.timing_mode then
		     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;

	     end;
	if icode ^= 0 then
	     call error (icode, "");

	return;

error:
     proc (err_code, string);

	dcl     err_code		 fixed bin (35);
	dcl     string		 char (*);

	call linus_convert_code (err_code, out_code, linus_data_$d_id);
	call ssu_$abort_line (sci_ptr, out_code);

     end error;

     end linus_delete;
