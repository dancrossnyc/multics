/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(90-04-23,Leskiw), approve(90-10-05,MCR8202),
     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
     Changed calls from assign_ to assign_round_.
                                                   END HISTORY COMMENTS */


linus_eval_set_func:
     proc (lcb_ptr, linus_set_fn_ptr, icode);


/* DESCRIPTION:

   Evaluate LINUS set functions.



   HISTORY:

   77-07-01 J. C. C. Jagernauth: Initially written.

   81-02-03 Rickie E. Brinegar: The addr builtin was added to the declarations.
   
   81-07-13  Rickie E.  Brinegar: The trapping of the conversion condition was
   removed.  This is now relegated to higher level routines.

   81-09-17 Rickie E.  Brinegar: Changed the initialization of num_ptrs from 0
   to arg_list.arg_count to eliminate subscript range conditions.
   
   82-10-13 Dave Schimke: Added call to linus_table$async_retrieval before the
   retrieve to keep linus_table from getting lost when loading in the 
   incremental mode. 

*/

%include linus_lcb;
%page;
%include linus_set_fn;
%page;
%include mdbm_arg_list;

	dcl     err_flag		 bit (1);

	dcl     (caller, i)		 fixed bin;

	dcl     icode		 fixed bin (35);

	dcl     func_code		 fixed bin (35)
				 based (arg_list.arg_des_ptr (arg_list.arg_count / 2));

	dcl     initial_mrds_vclock	 float bin (63);


	dcl     (
	        destination_ptr	 init (null),
	        save_se_desc_ptr	 init (null),
	        save_se_ptr		 init (null)
	        )			 ptr;

	dcl     (addr, null, vclock)	 builtin;

	dcl     (
	        linus_data_$eval_set_func_id,
	        mrds_error_$tuple_not_found,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     ANOTHER		 char (8) int static options (constant) init ("-another");
	dcl     another_len		 bit (36) int static options (constant)
				 init ("101010110000000000000000000000001000"b);

	dcl     1 null_arg_list	 aligned,
		2 arg_count	 fixed bin (17) unsigned unal init (0),
		2 pad1		 bit (1) unal init ("0"b),
		2 call_type	 fixed bin (18) unsigned unal init (4),
		2 desc_count	 fixed bin (17) unsigned unal init (0),
		2 pad2		 bit (19) unal init ("0"b);

	dcl     assign_round_
				 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     dsl_$retrieve	 entry options (variable);
	dcl     linus_table$async_retrieval
				 entry (ptr, fixed bin (35));
	dcl     linus_eval_expr
				 entry (ptr, ptr, ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     linus_eval_scal_func	 entry (ptr, ptr, fixed bin (35));

	al_ptr = linus_set_fn.rtrv_al_ptr;		/* Get arg list for retrieve */
	num_ptrs = arg_list.arg_count;
	save_se_ptr = arg_list.arg_des_ptr (2);
	save_se_desc_ptr = arg_list.arg_des_ptr (arg_list.arg_count / 2 + 2);

	caller = 3;				/* Inform eval_expr that a set function called */
	destination_ptr = linus_set_fn_ptr;		/* The result of eval_expr must be placed in the
						   set function structure */
	icode, func_code = 0;
	err_flag = "0"b;

	if linus_set_fn.prior_ptr ^= null () then
	     call linus_eval_set_func (lcb_ptr, linus_set_fn.prior_ptr, icode);
	if icode ^= 0 then
	     call error (icode);

	call linus_table$async_retrieval (lcb_ptr, icode);
	if icode ^= 0 then
	     call error (icode);

	if lcb.timing_mode then
	     initial_mrds_vclock = vclock;
	call cu_$generate_call (dsl_$retrieve, linus_set_fn.rtrv_al_ptr);
						/* Retrieve data */
	if lcb.timing_mode then
	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	if func_code = mrds_error_$tuple_not_found then
	     err_flag = "1"b;
	arg_list.arg_des_ptr (2) = addr (ANOTHER);	/* Set up for another retrieve */
	arg_list.arg_des_ptr (arg_list.arg_count / 2 + 2) = addr (another_len);

	if linus_set_fn.init_entry_set then
	     call
		cu_$generate_call (linus_set_fn.init_entry, addr (null_arg_list));

	do while (func_code = 0 & icode = 0);
	     do i = 1 to linus_set_fn.nargs;

		go to case (linus_set_fn.arg.type (i));

case (3):
		call
		     linus_eval_scal_func (lcb_ptr, linus_set_fn.arg.ef_ptr (i),
		     icode);			/* Process scalar function */
		go to case (6);

case (4):
		call
		     linus_eval_set_func (lcb_ptr, linus_set_fn.arg.ef_ptr (i), icode)
		     ;				/* Process set function */
		go to case (6);

case (5):
		call
		     linus_eval_expr (lcb_ptr, linus_set_fn.arg.ef_ptr (i),
		     destination_ptr, caller, i, icode);/* expr */

case (1):
case (2):
case (6):
		if icode = 0 then
		     if linus_set_fn.arg.must_convert (i) then
			call
			     assign_round_ (linus_set_fn.arg.arg_assn_ptr (i),
			     linus_set_fn.arg.arg_assn_type (i),
			     linus_set_fn.arg.arg_assn_len (i),
			     linus_set_fn.arg.assn_ptr (i),
			     linus_set_fn.arg.assn_type (i),
			     linus_set_fn.arg.assn_len (i)); /* Convert */
	     end;

	     call
		cu_$generate_call (linus_set_fn.calc_entry,
		linus_set_fn.calc_al_ptr);		/* call calc entry of set function */
	     if lcb.timing_mode then
		initial_mrds_vclock = vclock;
	     call cu_$generate_call (dsl_$retrieve, linus_set_fn.rtrv_al_ptr);
						/* Retrieve another */
	     if lcb.timing_mode then
		lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
	end;

	if func_code = mrds_error_$tuple_not_found then
	     func_code = 0;

	if func_code ^= 0 then
	     call error (func_code);
	if icode ^= 0 then
	     call error (icode);
	call
	     cu_$generate_call (linus_set_fn.assign_entry,
	     linus_set_fn.assign_al_ptr);		/* call assign entry of set function */

	if linus_set_fn.fwd_ptr ^= null () then
	     call linus_eval_set_func (lcb_ptr, linus_set_fn.fwd_ptr, icode);
						/* evaluate set function at this level */
	if icode ^= 0 then
	     call error (icode);

exit:
	;
	arg_list.arg_des_ptr (2) = save_se_ptr;
	arg_list.arg_des_ptr (arg_list.arg_count / 2 + 2) = save_se_desc_ptr;




error:
     proc (err_code);

	dcl     (err_code, out_code)	 fixed bin (35);

	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     linus_print_error	 entry (fixed bin (35), char (*));

	if err_flag then
	     icode = mrds_error_$tuple_not_found;
	else do;
		call
		     linus_convert_code (err_code, out_code,
		     linus_data_$eval_set_func_id);
		call linus_print_error (out_code, "");
		icode = 0;
	     end;

	go to exit;

     end error;


     end linus_eval_set_func;
