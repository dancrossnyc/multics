/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


linus_invoke_:
     proc;

/* This is the IO module that is used when a LINUS macro has been invoked via
   the LINUS invoke request.  The user_input IO switch is attached through this
   module to a segment.  When an get_line operation is done (by ssu_$listen
   or by linus_lila) 2 items of interest occur: 1) argument substitution
   occurs and 2) if at end of file (error_table_$end_of_info) the attachment
   is changed (via linus_invoke$pop) back to either another file or user_i/o.  
   Beyond that there is nothing outstanding here, just an ordinary, pain in
   the backside to code and debug, IO module.

   It should be noted that this is NOT a general purpose IO module.  It knows
   its caller intimately and therefore does not account for as many error
   situations as a general purpose IO module would.

   Written 82-02-22 by Paul W. Benjamin

   82-03-18  DJ Schimke: Fixed bug which caused linus to blow up when a macro 
   didn't end in a new_line character. Problem was in linus_invoke_get_line
   which checked for et$_end_of_info but not for et$_short_record. Fixed a
   stringrange error resulting from adding the NL to the get_line buffer.

   82-08-31  DJ Schimke: Replaced the call to the undocumented entrypoint 
   syn_$syn_attach_ with a call to iox_$attach_ptr. Declared iox_$attach_ptr
   and codeptr builtin. This is in response to phx13314. Also replaced call
   to old entrypoint iox_$attach_ioname with call to iox_$attach_name and 
   replaced the declaration of iox_$attach_ioname with iox_$attach_name.
*/

/* Parameters */
/* These are all standard in iox_$XXX calls */

	dcl     iocbp		 ptr parameter;
	dcl     option		 (*) char (*) varying parameter;
	dcl     ignore_this		 bit (1) aligned parameter; /* will always be ""b */
	dcl     code		 fixed bin (35) parameter;
	dcl     mode		 fixed bin parameter;
	dcl     bufptr		 ptr parameter;
	dcl     buflen		 fixed bin (21) parameter;
	dcl     nread		 fixed bin (21) parameter;

/* Automatic */

	dcl     attach_data_ptr	 ptr;
	dcl     attach_descrip_len	 fixed bin;
	dcl     attach_descrip_ptr	 ptr;
	dcl     dummy_code		 fixed bin (35);
	dcl     mask		 bit (36) aligned;
	dcl     prompt		 char (64) varying;
	dcl     rq_name		 char (32);
	dcl     sci_ptr		 ptr;
	dcl     source_iocbp	 ptr;
	dcl     switch_name		 char (32);

	dcl     1 ti		 aligned,		/* data structure for terminate_process_. */
		2 version		 fixed bin,
		2 code		 fixed bin (35);

/* Based */

	dcl     buf		 char (nread) based (bufptr);

	dcl     1 attach_descrip	 based (attach_descrip_ptr),
		2 length		 fixed bin,
		2 string		 char (attach_descrip_len refer (attach_descrip.length));

	dcl     1 attach_data	 based (attach_data_ptr),
		2 lcb_ptr		 ptr,
		2 sci_ptr		 ptr,
		2 source_iocbp	 ptr;

/* Builtin */

	dcl     (addr, codeptr, fixed, length, null, rel, search, substr) builtin;

/* Condition */

	dcl     (any_other, cleanup)	 condition;

/* Constant */

	dcl     NL		 char (1) internal static options (constant) init ("
");

/* Entries */

	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     cv_ptr_		 entry (char (*), fixed bin (35)) returns (ptr);
	dcl     hcs_$reset_ips_mask	 entry (bit (36) aligned, bit (36) aligned);
	dcl     hcs_$set_ips_mask	 entry (bit (36) aligned, bit (36) aligned);
	dcl     ioa_$nnl		 entry () options (variable);
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$attach_ptr	 entry (ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$get_line	 entry (ptr, ptr, fixed bin (21), fixed bin (21),
				 fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$propagate	 entry (ptr);
	dcl     linus_canon_input	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     linus_invoke$pop	 entry (ptr, fixed bin (35));
	dcl     ssu_$get_prompt	 entry (ptr) returns (char (64) varying);
	dcl     ssu_$get_request_name	 entry (ptr) returns (char (32));
	dcl     ssu_$set_prompt_mode	 entry (ptr, bit (*));
	dcl     terminate_process_	 entry (char (*), ptr);
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));

/* External */

	dcl     error_table_$end_of_info fixed bin (35) ext static;
	dcl     error_table_$long_record fixed bin (35) ext static;
	dcl     error_table_$not_closed fixed bin (35) ext static;
	dcl     error_table_$not_detached fixed bin (35) ext static;
	dcl     error_table_$short_record fixed bin (35) ext static;
	dcl     error_table_$unable_to_do_io fixed bin (35) ext static;
	dcl     iox_$user_input	 ptr ext static;
	dcl     iox_$user_io	 ptr ext static;
	dcl     linus_data_$max_invocs ext static;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;

/* Internal Static */

	dcl     1 static_open_descrip	 internal static,
		2 length		 fixed bin (17) init (12),
		2 string		 char (12) init ("stream_input");

/* Include */

%include iocb;

%include linus_lcb;

%include linus_invoc_stack;

%include ssu_prompt_modes;

linus_invoke_attach:
     entry (iocbp, option, ignore_this, code);

	if iocbp -> iocb.attach_descrip_ptr ^= null
	then do;
		code = error_table_$not_detached;
		return;
	     end;

	source_iocbp = null;
	attach_descrip_ptr = null;
	attach_data_ptr = null;

	on cleanup call janitor;

	switch_name = "linus_invoke_." || unique_chars_ (""b) || "_"; /* make unique switchname */

	call iox_$attach_name (switch_name, source_iocbp, "vfile_ " || option (1), codeptr (linus_invoke_), code);
	if code ^= 0
	then do;
		call janitor;
		return;
	     end;

	lcb_ptr = cv_ptr_ ((option (2)), code);		/* get lcbptr */
	if code ^= 0
	then do;
		call janitor;
		return;
	     end;
	attach_descrip_len = 14 + length (option (1));
	allocate attach_descrip in (lcb.static_area);
	attach_descrip.string = "linus_invoke_ " || option (1);

	allocate attach_data in (lcb.static_area);
	attach_data.lcb_ptr = lcb_ptr;
	attach_data.sci_ptr = cv_ptr_ ((option (3)), code); /* & get sci_ptr */
						/* & put both in attach data (need 'em later) */
	if code ^= 0
	then do;
		call janitor;
		return;
	     end;
	attach_data.source_iocbp = source_iocbp;

	call iox_$open (source_iocbp, 1, "0"b, code);	/* may as well open now, too */
	if code ^= 0
	then do;
		call janitor;
		return;
	     end;

	mask = ""b;
	on any_other call all_hell_broke_loose;		/* this is all standard stuff */
	call hcs_$set_ips_mask (""b, mask);		/* when diddling iocb */
	iocbp -> iocb.open = linus_invoke_open;
	iocbp -> iocb.detach_iocb = linus_invoke_detach;
	iocbp -> iocb.attach_descrip_ptr = attach_descrip_ptr;
	iocbp -> iocb.attach_data_ptr = attach_data_ptr;

	call iox_$propagate (iocbp);
	call hcs_$reset_ips_mask (mask, mask);
	code = 0;
	return;

janitor: proc;

	if source_iocbp ^= null
	then do;
		call iox_$close (source_iocbp, dummy_code);
		call iox_$detach_iocb (source_iocbp, dummy_code);
		call iox_$destroy_iocb (source_iocbp, dummy_code);
	     end;
	if attach_descrip_ptr ^= null
	then free attach_descrip;
	if attach_data_ptr ^= null
	then free attach_data;

     end janitor;

linus_invoke_open:
     entry (iocbp, mode, ignore_this, code);

	if iocbp -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr ^= null
	then do;
		code = error_table_$not_closed;
		return;
	     end;

	mask = ""b;
	on any_other call all_hell_broke_loose;
	call hcs_$set_ips_mask (""b, mask);
	iocbp -> iocb.actual_iocb_ptr -> iocb.get_line = linus_invoke_get_line;
	iocbp -> iocb.actual_iocb_ptr -> iocb.close = linus_invoke_close;
	iocbp -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr = addr (static_open_descrip);
	call iox_$propagate (iocbp -> iocb.actual_iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);
	revert any_other;
	return;

linus_invoke_get_line:
     entry (iocbp, bufptr, buflen, nread, code);

	lcb_ptr = iocbp -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr -> attach_data.lcb_ptr;
	sci_ptr = iocbp -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr -> attach_data.sci_ptr;
	call iox_$get_line (iocbp -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr -> attach_data.source_iocbp,
	     bufptr, buflen, nread, code);
	if code = error_table_$end_of_info | code = error_table_$short_record
	then do;
		if nread > 0			/* file didn't end in NL */
		then do;
			if nread = buflen
			then code = error_table_$long_record;
			else do;
				code = 0;
				nread = nread + 1;
				substr (buf, nread, 1) = NL;
				call to_pop_or_not_to_pop; /* reset 'cause we WERE at EOF */
			     end;
			return;
		     end;
		call to_pop_or_not_to_pop;
		if lcb.is_ptr ^= iox_$user_input	/* read from previous macro */
		then call iox_$get_line (iocbp, bufptr, buflen, nread, code);
		else do;
			rq_name = ssu_$get_request_name (sci_ptr);
			if rq_name = ""		/* called by ssu_$listen */
			then do;
				if lcb.prompt_flag	/* prompt if appropriate */
				then do;
					prompt = ssu_$get_prompt (sci_ptr);
					call ioa_$nnl (prompt, "0"b, 1);
				     end;
				code = 0;		/* fake blank line */
				nread = 1;
				buf = " ";
			     end;
			else if rq_name = "lila"	/* lila would like a blank line here, too */
			then do;
				code = 0;
				nread = 1;
				buf = " ";
			     end;
						/* Must have been in an editor or something,
*		     just do another read */
			else call iox_$get_line (iocbp, bufptr, buflen, nread, code);
		     end;
		return;
	     end;

	if search (buf, "%/") > 0			/* arguments or comments */
	then call linus_canon_input (lcb_ptr, bufptr, nread, code);
	return;

to_pop_or_not_to_pop:
     proc;

	if lcb.ivs_ptr ^= null
	then if lcb.ivs_ptr -> invoc_stack.ninvocs > 0
	     then do;
		     if lcb.prompt_flag & lcb.ivs_ptr -> invoc_stack.ninvocs = 1
		     then call ssu_$set_prompt_mode (sci_ptr, PROMPT | DONT_PROMPT_AFTER_NULL_LINES | PROMPT_IF_TYPEAHEAD);
		     call linus_invoke$pop (lcb_ptr, code); /* reset to previous input stream */
		end;
	     else do;
		     if lcb.prompt_flag
		     then call ssu_$set_prompt_mode (sci_ptr, PROMPT | DONT_PROMPT_AFTER_NULL_LINES | PROMPT_IF_TYPEAHEAD);
		     call iox_$detach_iocb (iox_$user_input, code);
		     if code ^= 0
		     then return;
		     call iox_$attach_ptr (iox_$user_input, "syn_ user_i/o", codeptr (linus_invoke_), code);
		     if code ^= 0
		     then return;
		     lcb.is_ptr = iox_$user_input;
		end;
     end to_pop_or_not_to_pop;

linus_invoke_close:
     entry (iocbp, code);

	call iox_$close (iocbp -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr -> attach_data.source_iocbp, code);

	mask = ""b;
	on any_other call all_hell_broke_loose;
	call hcs_$set_ips_mask (""b, mask);
	iocbp -> iocb.actual_iocb_ptr -> iocb.open = linus_invoke_open;
	iocbp -> iocb.actual_iocb_ptr -> iocb.detach_iocb = linus_invoke_detach;
	iocbp -> iocb.actual_iocb_ptr -> iocb.open_descrip_ptr = null;
	call iox_$propagate (iocbp -> iocb.actual_iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);
	return;

linus_invoke_detach:
     entry (iocbp, code);

	attach_data_ptr = iocbp -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr;
	attach_descrip_ptr = iocbp -> iocb.actual_iocb_ptr -> iocb.attach_descrip_ptr;
	lcb_ptr = attach_data_ptr -> attach_data.lcb_ptr;
	source_iocbp = attach_data_ptr -> attach_data.source_iocbp;

	call iox_$detach_iocb (attach_data_ptr -> attach_data.source_iocbp, code);

	mask = ""b;
	on any_other call all_hell_broke_loose;
	call hcs_$set_ips_mask (""b, mask);
	iocbp -> iocb.attach_descrip_ptr = null;
	call iox_$propagate (iocbp -> iocb.actual_iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);
	revert any_other;
	call janitor;
	return;

all_hell_broke_loose:
     proc;

	if mask					/* If we are in critical section of manipulating */
	then do;
		ti.version = 0;			/* the iocb, then kill the process when a fault */
		ti.code = error_table_$unable_to_do_io; /* comes unexpectedly. */
		call terminate_process_ ("fatal_error", addr (ti));
	     end;
	call continue_to_signal_ (0);			/* otherwise pass on the error.		*/

     end all_hell_broke_loose;

     end linus_invoke_;

