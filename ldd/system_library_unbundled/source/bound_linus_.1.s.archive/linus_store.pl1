/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-13,Dupuis), approve(86-05-23,MCR7404), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Changed code to place the column delimiters between the column
     values when the tuple is written out in an error situation.
  2) change(88-01-27,Dupuis), approve(88-03-03,MCR7844), audit(88-03-14,Blair),
     install(88-03-15,MR12.2-1036):
     Implemented the -progress/-no_progress and -warning/-no_warning
     control arguments.
                                                   END HISTORY COMMENTS */


/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     linus store request. Description and usage follows.

     Description:

     This request prompts the user for values, takes the values from the
     request line, or reads the values from a file. It then takes these
     values and stores them into the specified relation.
     
     Usage: "store table_name {column_values} {-control_args}"

     where table_name is the name of the relation where the data will be 
     stored.

     {column_values} are one or more values provided on the request line.

     {-control_args} can be:

     -brief -- verification of input values isn't performed.

     -column_delimiter X -- the delimiter used to separate column values.
     X can be any single ascii character (default is one blank). The old
     control arg -delimiter is still accepted but not documented.

     -input_file pathname -- the file where the values should be taken from.

     -long -- verification of input values is performed.

     -progress {N} -- prints a progress report every N tuples, where N defaults
     to linus_data_$trace_every_n_tuples if not specified.

     -row_delimiter X -- the delimiter used to separate rows. X can be any 
     single ascii character (default is newline character).

     -warning, -warn, -no_warning, -no_warn -- prints or doesn't print warning
     messages caused by the storing of duplicate tuples or conversion errors.

     Both parameters are passed to this request by ssu_.


     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - September 1983 - complete rewrite of old module.
     Changed - Al Dupuis - November 4, 1983 - changed code from
               error_table_$fatal_error to ssu_et_$program_interrupt in call
	     to ssu_$abort_line after user types "no" to verification of
	     values.

*/
%page;
linus_store: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(3);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(3);
/*
     Mainline Processing Overview:

     (1) Process control arguments setting flags and collecting values.

     (2) Get the values from the request line, from the user, or from an input
         file.

     (3) Store the row. Repeat 2 and 3 if -input_file was used.

     (4) Clean up.

*/
%skip(3);
	call initialize;
%skip(1);
	cleanup_signalled = OFF;
	on cleanup begin;
	     cleanup_signalled = ON;
	     call terminate;
	end;
%skip(1);
	call process_args;
	call get_values_procedure (get_values_mode);
%skip(1);
	call terminate;
%skip(1);
	return;
%page;
get_values_from_file: proc;
%skip(1);
dcl gvff_code fixed bin (35);
dcl gvff_error_occured bit (1) aligned;
dcl gvff_still_storing bit (1) aligned;
%skip(1);
	call linus_parse_file$start (lcb_ptr, addr (data_file_info),
	     table_ip, gvff_code);
	if gvff_code ^= 0
	then call ssu_$abort_line (sci_ptr, gvff_code);
	packed_buffer_ptr = buffer_ptr;
	file_parsing_has_been_started = ON;
%skip(1);
	gvff_still_storing = ON;
	do while (gvff_still_storing);
	     call linus_parse_file$get_row (lcb_ptr, addr (data_file_info),
		table_ip, buffer_ptr, gvff_code);
	     if gvff_code ^= 0
	     then if gvff_code = error_table_$end_of_info
		then gvff_still_storing = OFF;
	          else call ssu_$abort_line (sci_ptr, gvff_code);
	     else;
	     if gvff_still_storing
	     then do;
		call linus_table$store_row (lcb_ptr, table_ip,
		     packed_buffer_ptr, gvff_code);
		if gvff_code ^= 0
		then do;
		     if print_warning_messages
		     & (gvff_code = mrds_error_$duplicate_key | gvff_code = mrds_error_$conversion_condition)
		     then call ssu_$print_message (sci_ptr, gvff_code,
			"^/The error occured on line number ^d while trying to store row number ^d."
			|| PARTIAL_FILE_STORE_MESSAGE,
			data_file_info.current_line_number - 1, data_file_info.current_row_number - 1,
			FILE_NAME_FOR_FAILED_STORE,
			(data_file_info.column_delimiter = BLANK), data_file_info.column_delimiter);
		     call write_partial_file_to_pdir (number_of_columns,
			EXTEND, gvff_error_occured);
		     if gvff_error_occured
		     then call ssu_$abort_line (sci_ptr, gvff_code);
		     if gvff_code ^= mrds_error_$duplicate_key
		     & gvff_code ^= mrds_error_$conversion_condition
		     then call ssu_$abort_line (sci_ptr, gvff_code,
			PARTIAL_FILE_STORE_MESSAGE, FILE_NAME_FOR_FAILED_STORE,
			(data_file_info.column_delimiter = BLANK), data_file_info.column_delimiter);
		end;
		else do;
		     number_of_tuples_stored = number_of_tuples_stored + 1;
		     if data_file_info.flags.tracing
		     then if mod (data_file_info.current_row_number - 1, data_file_info.trace_every_n_tuples) = 0
		          then call ioa_ ("^d lines (^d tuples) read from input file. ^d tuples stored.",
		               data_file_info.current_line_number - 1,
		               data_file_info.current_row_number - 1,
		               number_of_tuples_stored);
		end;
	     end;
	end;
%skip(1);
	if data_file_info.flags.tracing
	then call ioa_ ("Storing completed. ^d lines (^d tuples) read, ^d tuples stored.",
	     data_file_info.current_line_number - 1,
	     data_file_info.current_row_number - 1, number_of_tuples_stored);
%skip(1);
	return;
%skip(1);
     end get_values_from_file;
%page;
get_values_from_request_line: proc;
%skip(3);
dcl gvfrl_error_occured bit (1) aligned;
dcl gvfrl_index fixed bin (21);
dcl gvfrl_length fixed bin (21);
dcl gvfrl_loop fixed bin;
%skip(1);
	current_arg_number = 2;
	do gvfrl_loop = 1 to number_of_columns;
	     gvfrl_index = table_info.columns.column_index (gvfrl_loop);
	     gvfrl_length = table_info.columns.column_length (gvfrl_loop);
	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	     if arg_length > gvfrl_length
	     then do;
		call ssu_$print_message (sci_ptr, 0,
		     "Warning: the value ""^a"" ^/for the ""^a"" column will be truncated to ^d characters.",
		     arg, table_info.columns.column_name (gvfrl_loop), gvfrl_length);
		substr (buffer, gvfrl_index, gvfrl_length) = substr (arg, 1, gvfrl_length);
	     end;
	     else substr (buffer, gvfrl_index, gvfrl_length) = arg;
	     current_arg_number = current_arg_number + 1;
%skip(1);
	     if current_arg_number > number_of_args_supplied
	     then if gvfrl_loop ^= number_of_columns
		then call too_few_values_supplied;
	          else;
	     else;
%skip(1);
	     if first_control_arg_has_been_found
	     then if current_arg_number = first_control_arg_number
		& gvfrl_loop ^= number_of_columns
		then call too_few_values_supplied;
	          else;
	     else;
	end;
%skip(1);
	call store_the_row;
%skip(1);
	return;
%page;
too_few_values_supplied: proc;
%skip(3);
	call write_partial_file_to_pdir (gvfrl_loop, TRUNCATE, gvfrl_error_occured);
%skip(1);
	if ^gvfrl_error_occured
	then call ssu_$abort_line (sci_ptr, error_table_$fatal_error,
	     "^/There were ^d column values expected, but only ^d were supplied."
	     || PARTIAL_FILE_STORE_MESSAGE,
	     table_info.column_count, gvfrl_loop, FILE_NAME_FOR_FAILED_STORE,
	     (data_file_info.column_delimiter = BLANK), data_file_info.column_delimiter);
	else call ssu_$abort_line (sci_ptr, error_table_$fatal_error,
	     "^/There were ^d column values expected, but only ^d were supplied.",
	     table_info.column_count, gvfrl_loop);
%skip(1);
	return;
%skip(1);
     end too_few_values_supplied;
%skip(1);
     end get_values_from_request_line;
%page;
get_values_from_user: proc;
%skip(3);
dcl gvfu_index fixed bin (21);
dcl gvfu_length fixed bin (21);
dcl gvfu_loop fixed bin;
%skip(1);
	do gvfu_loop = 1 to number_of_columns;
	     question_buffer = table_info.columns.column_name (gvfu_loop)
		|| BLANK || QUESTION_MARK || BLANK;
	     gvfu_index = table_info.columns.column_index (gvfu_loop);
	     gvfu_length = table_info.columns.column_length (gvfu_loop);
	     call linus_query (lcb_ptr, answer_buffer, question_buffer);
	     if length (answer_buffer) > gvfu_length
	     then do;
		call ssu_$print_message (sci_ptr, 0,
		     "Warning: the ^d characters just received will be truncated to ^d.",
		     length (answer_buffer), gvfu_length);
		substr (buffer, gvfu_index, gvfu_length) = substr (answer_buffer, 1, gvfu_length);
	     end;
	     else substr (buffer, gvfu_index, gvfu_length) = substr (answer_buffer, 1);
	end;
%skip(1);
	call store_the_row;
%skip(1);
	return;
%skip(1);
     end get_values_from_user;
%page;
initialize: proc;
%skip(1);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
	work_area_ptr = addr (lcb.static_area);
%skip(1);
	unspec (data_file_info) = OFF;
	data_file_info.flags.process_quotes = ON;
	data_file_info.flags.process_whitespace = ON;
	data_file_info.flags.last_column_delimiter_is_optional = ON;
	data_file_info.column_delimiter = BLANK;
	data_file_info.row_delimiter = NEWLINE;
	data_file_info.trace_every_n_tuples = linus_data_$trace_every_n_tuples;
	brief_mode = OFF;
	buffer_has_been_allocated = OFF;
	first_control_arg_has_been_found = OFF;
	table_info_has_been_allocated = OFF;
	file_parsing_has_been_started = OFF;
	print_warning_messages = ON;
	number_of_tuples_stored = 0;
%skip(1);
	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
	if number_of_args_supplied = 0
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
	     "^/Usage: store table_name {column_values} {-control_args}");
          return;
%skip(1);
     end initialize;
%page;
process_args: proc;
%skip(3);
          call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	table_name = arg;
	call linus_table$info_for_store (lcb_ptr, table_name, 
	     work_area_ptr, table_ip, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
	number_of_columns = table_info.column_count;
	table_info_has_been_allocated = ON;
	buffer_length = table_info.row_value_length;
	allocate buffer in (work_area) set (buffer_ptr);
	buffer_has_been_allocated = ON;
	get_values_mode = GET_VALUES_FROM_USER;
%skip(1);
	if number_of_args_supplied = 1
	then return;
%skip(1);
	moved_into_the_values = OFF;
	moved_into_the_control_args = OFF;
	call ssu_$arg_ptr (sci_ptr, 2, arg_ptr, arg_length);
	if arg_length > 0
	then if substr (arg, 1, 1) = "-"
	     then moved_into_the_control_args = ON;
	     else moved_into_the_values = ON;
	else moved_into_the_values = ON;
%skip(1);
	if moved_into_the_values
	then do;
	     get_values_mode = GET_VALUES_FROM_REQUEST_LINE;
	     current_arg_number = 2 + number_of_columns;
	     if current_arg_number > number_of_args_supplied
	     then return;
	     else moved_into_the_control_args = ON;
	end;
	else current_arg_number = 2;
%skip(1);
	first_control_arg_has_been_found = ON;
	first_control_arg_number = current_arg_number;
	still_processing_args = ON;
%skip(1);
	do while (still_processing_args);
	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
%skip(1);
	     if arg = "-column_delimiter" | arg = "-cdm" | arg = "-delimiter" | arg = "-dm"
	     | arg = "-row_delimiter" | arg = "-rdm"
	     then do;
		if current_arg_number + 1 > number_of_args_supplied
		then call ssu_$abort_line (sci_ptr, error_table_$noarg,
		     "^/^a must be followed by a delimiter.", arg);
		else;
		current_arg_number = current_arg_number + 1;
		if arg = "-row_delimiter" | arg = "-rdm"
		then row_delimiter_flag = ON;
		else row_delimiter_flag = OFF;
		call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
		if arg_length ^= 1
		then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		     "The specified delimiter ""^a"" is not a single ascii character.", arg);
		else;
		if row_delimiter_flag
		then data_file_info.row_delimiter = arg;
		else data_file_info.column_delimiter = arg;
		data_file_info.flags.process_quotes = OFF;
		data_file_info.flags.process_whitespace = OFF;
	     end;
	     else if arg = "-input_file" | arg = "-if" | arg = "-file" | arg = "-f"
		then do;
		     if get_values_mode = GET_VALUES_FROM_REQUEST_LINE
		     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
			"^/^a and column values can't both be supplied.", arg);
		     if current_arg_number + 1 > number_of_args_supplied
		     then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			"^/^a must be followed by a pathname.", arg);
		     else;
		     current_arg_number = current_arg_number + 1;
		     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
		     data_file_info.output_file_pathname = arg;
		     get_values_mode = GET_VALUES_FROM_FILE;
		     brief_mode = OFF;
		end;
		else if arg = "-progress" | arg = "-pg"
		     then do;
			data_file_info.flags.tracing = ON;
			if current_arg_number + 1 <= number_of_args_supplied
			then do;
			     call ssu_$arg_ptr (sci_ptr, current_arg_number + 1, arg_ptr, arg_length);
			     if verify (arg, "01234546789") = 0
			     then do;
				data_file_info.trace_every_n_tuples = convert (data_file_info.trace_every_n_tuples, arg);
				current_arg_number = current_arg_number + 1;
			     end;
			end;
		     end;
		     else if arg = "-no_progress" | arg = "-npg"
			then do;
			     data_file_info.flags.tracing = OFF;
			     data_file_info.trace_every_n_tuples = linus_data_$trace_every_n_tuples;
			end;
			else if arg = "-brief" | arg = "-bf"
			     then brief_mode = ON;
			     else if arg = "-long" | arg = "-lg"
				then brief_mode = OFF;
				else if arg = "-warning" | arg = "-warn"
				     then print_warning_messages = ON;
				     else if arg = "-no_warning" | arg = "-no_warn"
					then print_warning_messages = OFF;
					else do;
					     if arg_length > 0
					     then if substr (arg, 1, 1) = "-"
						then code = error_table_$badopt;
						else code = error_table_$bad_arg;
					     else code = error_table_$bad_arg;
					     call ssu_$abort_line (sci_ptr, code, "^a", arg);
					end;
%skip(1);
	     current_arg_number = current_arg_number + 1;
	     if current_arg_number > number_of_args_supplied
	     then still_processing_args = OFF;
	end;
%skip(1);
	return;
%skip(1);
     end process_args;
%page;
store_the_row: proc;
%skip(1);
dcl str_code fixed bin (35);
dcl str_error_occured bit (1) aligned;
%skip(1);
	if ^brief_mode
	then call verify_user_values;
%skip(1);
	packed_buffer_ptr = buffer_ptr;
	call linus_table$store_row (lcb_ptr, table_ip, packed_buffer_ptr, str_code);
	if str_code ^= 0
	then do;
	     call write_partial_file_to_pdir (number_of_columns, TRUNCATE, str_error_occured);
	     if ^str_error_occured
	     then call ssu_$abort_line (sci_ptr, str_code,
		PARTIAL_FILE_STORE_MESSAGE, FILE_NAME_FOR_FAILED_STORE,
		(data_file_info.column_delimiter = BLANK), data_file_info.column_delimiter);
	     else call ssu_$abort_line (sci_ptr, str_code);
	end;
%skip(1);
	return;
%skip(1);
     end store_the_row;
%page;
terminate: proc;
%skip(3);
	if buffer_has_been_allocated
	then do;
	     free buffer;
	     buffer_has_been_allocated = OFF;
	end;
%skip(1);
	if table_info_has_been_allocated
	then do;
	     store_ap = table_info.store_args_ptr;
	     free store_args;
	     free table_info;
	     table_info_has_been_allocated = OFF;
	end;
%skip(1);
	if file_parsing_has_been_started
	then do;
	     call linus_parse_file$stop (lcb_ptr, addr (data_file_info), 
		table_ip, cleanup_signalled, code);
	     file_parsing_has_been_started = OFF;
	end;
%skip(1);
	return;
%skip(1);
     end terminate;
%page;
verify_user_values: proc;
%skip(1);
dcl vuv_error_occured bit (1) aligned;
dcl vuv_loop fixed bin;
dcl vuv_user_wants_to_continue_parm bit (1) aligned;
%skip(1);
	call ioa_ ("");
	do vuv_loop = 1 to number_of_columns;
	     call ioa_$nnl ("^a =^x", table_info.columns.column_name (vuv_loop));
	     call ioa_ ("^a", substr (buffer,
		table_info.columns.column_index (vuv_loop),
		table_info.columns.column_length (vuv_loop)));
	end;
%skip(1);
	call linus_query$yes_no (lcb_ptr, vuv_user_wants_to_continue_parm,
	     NEWLINE || "OK? ");
%skip(1);
	if ^vuv_user_wants_to_continue_parm
	then do;
	     call write_partial_file_to_pdir (number_of_columns, TRUNCATE, vuv_error_occured);
	     if ^vuv_error_occured
	     then call ssu_$abort_line (sci_ptr, ssu_et_$program_interrupt,
		PARTIAL_FILE_STORE_MESSAGE, FILE_NAME_FOR_FAILED_STORE,
		(data_file_info.column_delimiter = BLANK), data_file_info.column_delimiter);
	     else call ssu_$abort_line (sci_ptr, 0);
	     return;
	end;
%skip(1);
	return;
%skip(1);
     end verify_user_values;
%page;
write_partial_file_to_pdir: proc (

	wpftp_number_of_columns_written_parm, /* input: how many we sucessfully got */
	wpftp_truncate_parm,	        /* input: on means to truncate file */
	wpftp_error_occured_parm	        /* output: on if error occured */
			   );
%skip(3);
dcl wpftp_code fixed bin (35);
dcl wpftp_error_occured_parm bit (1) aligned parm;
dcl wpftp_loop fixed bin;
dcl wpftp_number_of_columns_written_parm fixed bin parm;
dcl wpftp_truncate_parm bit (1) aligned parm;
%skip(1);
	wpftp_error_occured_parm = ON;
	switch_name = unique_chars_ ("0"b) || ".linus_store";
	if wpftp_truncate_parm
	then attach_description = "vfile_ " || rtrim (get_pdir_ ()) || ">linus.store.error";
	else attach_description = "vfile_ " || rtrim (get_pdir_ ()) || ">linus.store.error -extend";
%skip(1);
	call iox_$attach_name (switch_name, iocb_ptr, attach_description, null (), wpftp_code);
	if wpftp_code ^= 0
	then return;
%skip(1);
	call iox_$open (iocb_ptr, Stream_output, "0"b, wpftp_code);
	if wpftp_code ^= 0
	then return;
%skip(1);
	do wpftp_loop = 1 to wpftp_number_of_columns_written_parm;
	     call iox_$put_chars (iocb_ptr,
		addr (buffer_as_an_array (table_info.columns.column_index (wpftp_loop))),
		table_info.columns.column_length (wpftp_loop), wpftp_code);
	     call iox_$put_chars (iocb_ptr, addr (data_file_info.column_delimiter), length (data_file_info.column_delimiter), wpftp_code);
	end;
%skip(1);
	call iox_$put_chars (iocb_ptr, addr (NEWLINE), length (NEWLINE), wpftp_code);
	call iox_$close (iocb_ptr, wpftp_code);
	call iox_$detach_iocb (iocb_ptr, wpftp_code);
	call iox_$destroy_iocb (iocb_ptr, wpftp_code);
	wpftp_error_occured_parm = OFF;
%skip(1);
	return;
%skip(1);
     end write_partial_file_to_pdir;
%page;
dcl BLANK char (1) static internal options (constant) init (" ");
%skip(1);
dcl EXTEND bit (1) aligned static internal options (constant) init ("0"b);
%skip(1);
dcl FILE_NAME_FOR_FAILED_STORE char (22) static internal options (constant) init ("[pd]>linus.store.error");
%skip(1);
dcl GET_VALUES_FROM_FILE fixed bin static internal options (constant) init (1);
dcl GET_VALUES_FROM_REQUEST_LINE fixed bin static internal options (constant) init (2);
dcl GET_VALUES_FROM_USER fixed bin static internal options (constant) init (3);
%skip(1);
dcl QUESTION_MARK char (1) static internal options (constant) init ("?");
%skip(1);
dcl MAXIMUM_MRDS_ATTRIBUTE_LENGTH fixed bin static internal options (constant) init (4096);
%skip(1);
dcl NEWLINE char (1) static internal options (constant) init ("
");
%skip(1);
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
dcl PARTIAL_FILE_STORE_MESSAGE char (92) static internal options (constant) init (
"^/The supplied values are in ^a with a ^[blank^;""^a""^]^/separating each column value.");
%skip(1);
dcl TRUNCATE bit (1) aligned static internal options (constant) init ("1"b);
%page;
dcl addr builtin;
dcl answer_buffer char (MAXIMUM_MRDS_ATTRIBUTE_LENGTH) varying;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
dcl attach_description char (256);
%skip(1);
dcl brief_mode bit (1) aligned;
dcl buffer char (buffer_length) based (buffer_ptr);
dcl buffer_as_an_array (buffer_length) char (1) based (buffer_ptr);
dcl buffer_has_been_allocated bit (1) aligned;
dcl buffer_length fixed bin (21);
dcl buffer_ptr ptr;
%skip(1);
dcl cleanup condition;
dcl cleanup_signalled bit (1) aligned;
dcl code fixed bin (35);
dcl current_arg_number fixed bin;
%skip(1);
dcl error_table_$bad_arg fixed bin(35) ext static;
dcl error_table_$badopt fixed bin(35) ext static;
dcl error_table_$end_of_info fixed bin(35) ext static;
dcl error_table_$fatal_error fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$noarg fixed bin(35) ext static;
%skip(1);
dcl file_parsing_has_been_started bit (1) aligned;
dcl first_control_arg_has_been_found bit (1) aligned;
dcl first_control_arg_number fixed bin;
dcl fixed builtin;
%skip(1);
dcl get_pdir_ entry() returns(char(168));
dcl get_values_mode fixed bin;
dcl get_values_procedure (3) entry init (
get_values_from_file,
get_values_from_request_line,
get_values_from_user
);
%skip(1);
dcl ioa_ entry() options(variable);
dcl ioa_$nnl entry() options(variable);
dcl iocb_ptr ptr;
%skip(1);
dcl mrds_error_$conversion_condition fixed bin(35) ext static;
dcl mrds_error_$duplicate_key fixed bin(35) ext static;
%skip(1);
dcl length builtin;
dcl linus_data_$trace_every_n_tuples fixed bin (35) external static;
dcl linus_query entry (ptr, char(*) var, char(*) var);
dcl linus_query$yes_no entry (ptr, bit(1) aligned, char(*) var);
dcl linus_parse_file$get_row entry (ptr, ptr, ptr, ptr, fixed bin(35));
dcl linus_parse_file$start entry (ptr, ptr, ptr, fixed bin(35));
dcl linus_parse_file$stop entry (ptr, ptr, ptr, bit (1) aligned, fixed bin(35));
dcl linus_table$info_for_store entry (ptr, char(30), ptr, ptr, fixed bin(35));
dcl linus_table$store_row entry (ptr, ptr, ptr unal, fixed bin(35));
%skip(1);
dcl packed_buffer_ptr ptr unaligned;
dcl print_warning_messages bit (1) aligned;
%skip(1);
dcl moved_into_the_control_args bit (1) aligned;
dcl moved_into_the_values bit (1) aligned;
%skip(1);
dcl null builtin;
dcl number_of_args_supplied fixed bin;
dcl number_of_columns fixed bin;
dcl number_of_tuples_stored fixed bin (35);
%skip(1);
dcl question_buffer char (80) varying;
%skip(1);
dcl rel builtin;
dcl row_delimiter_flag bit (1) aligned;
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$print_message entry() options(variable);
dcl ssu_et_$program_interrupt fixed bin(35) ext static;
dcl still_processing_args bit (1) aligned;
dcl substr builtin;
dcl switch_name char (32);
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl table_info_has_been_allocated bit (1) aligned;
dcl table_name char (30);
%skip(1);
dcl unique_chars_ entry (bit(*)) returns(char(15));
dcl unspec builtin;
%skip(1);
dcl verify builtin;
%skip(1);
dcl work_area area (sys_info$max_seg_size) based (work_area_ptr);
dcl work_area_ptr ptr;
%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include iox_dcls;
%page;
%include iox_modes;
%page;
%include linus_data_file_info;
%page;
%include linus_lcb;
%page;
%include linus_table_info;
%skip(3);
     end linus_store;
