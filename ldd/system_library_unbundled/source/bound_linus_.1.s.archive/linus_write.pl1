/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-01-27,Dupuis), approve(88-03-03,MCR7844), audit(88-03-14,Blair),
     install(88-03-15,MR12.2-1036):
     Implemented the -progress/-no_progress control arguments.
                                                   END HISTORY COMMENTS */


/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     linus write request. Description and usage follows.

     Description:

     This request retrieves the selected data from the data base and writes
     it to a file.
     
     Usage: "write pathname {-control_args}"

     where pathname is the name of the file which will contain the data.

     -control_args can be:

     -column_delimiter X -- the delimiter used to separate column values.
     X can be any single ascii character (default is one blank). The old
     control arg -delimiter is still accepted but not documented.

     -extend -- the file is extended rather than truncated.

     -progress {N} -- prints a progress report every N tuples, where N defaults
     to linus_data_$trace_every_n_tuples if not specified.

     -row_delimiter X -- the delimiter used to separate rows. X can be any 
     single ascii character (default is newline character).

     -truncate -- the file is truncated rather than extended (default).

     Both parameters are passed to this request by ssu_.


     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - September 1983 - complete rewrite of old module.

*/
%page;
linus_write: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(3);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(3);
/*
     Mainline Processing Overview:

     (1) Process control arguments setting flags and collecting values.

     (2) Have the subroutine do all the work (it reports errors and calls
         ssu_$abort_line if things don't go well).

*/
%skip(3);
	call initialize;
	call process_args;
	call linus_create_data_file (lcb_ptr, addr (data_file_info));
%skip(1);
	return;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	unspec (data_file_info) = OFF;
	data_file_info.column_delimiter = BLANK;
	data_file_info.row_delimiter = NEWLINE;
	data_file_info.flags.truncate_file = ON;
	data_file_info.trace_every_n_tuples = linus_data_$trace_every_n_tuples;
%skip(1);
	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
	if number_of_args_supplied = 0
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
	     "An output file pathname must be supplied.");
%skip(1);
          call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	data_file_info.output_file_pathname = arg;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
process_args: proc;

	do current_arg_number = 2 to number_of_args_supplied;

	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);

	     if arg = "-extend"
	     then data_file_info.flags.truncate_file = OFF;
	     else if arg = "-truncate" | arg = "-tc"
	     then data_file_info.flags.truncate_file = ON;
	     else if arg = "-no_progress" | arg = "-npg"
	     then do;
		data_file_info.flags.tracing = OFF;
		data_file_info.trace_every_n_tuples = linus_data_$trace_every_n_tuples;
	     end;
	     else if arg = "-progress" | arg = "-pg"
	     then call setup_tracing;
	     else if arg = "-column_delimiter" | arg = "-cdm"
	     | arg = "-delimiter" | arg = "-dm" | arg = "-row_delimiter" | arg = "-rdm"
	     then call setup_delimiter;
	     else call ssu_$abort_line (sci_ptr, error_table_$badopt,
		"^a is not a valid control argument.", arg);
	end;

	return;
%page;
setup_delimiter: proc;

	if current_arg_number + 1 > number_of_args_supplied
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/^[-row_delimiter^;-column_delimiter^] must be followed by a delimiter.",
	     (arg = "-row_delimiter" | arg = "-rdm"));

	current_arg_number = current_arg_number + 1;
	call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	if arg_length ^= 1
	then call ssu_$abort_line (sci_ptr, 0,
	     "The specified delimiter ""^a"" is not a single ascii character.", arg);
	if (arg = "-row_delimiter" | arg = "-rdm")
	then data_file_info.row_delimiter = arg;
	else data_file_info.column_delimiter = arg;

	return;

     end setup_delimiter;
%page;
setup_tracing: proc;

	data_file_info.tracing = ON;

	if current_arg_number + 1 > number_of_args_supplied
	then return;

	call ssu_$arg_ptr (sci_ptr, current_arg_number + 1, arg_ptr, arg_length);
	if verify (arg, "01234546789") = 0
	then do;
	     data_file_info.trace_every_n_tuples = convert (data_file_info.trace_every_n_tuples, arg);
	     current_arg_number = current_arg_number + 1;
	end;

	return;

     end setup_tracing;

     end process_args;
%page;
dcl BLANK char (1) static internal options (constant) init (" ");
%skip(1);
dcl NEWLINE char (1) static internal options (constant) init ("
");
%skip(1);
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
%skip(1);
dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl current_arg_number fixed bin;
%skip(1);
dcl error_table_$badopt fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$noarg fixed bin(35) ext static;
%skip(1);
dcl lcb_ptr ptr;
dcl linus_create_data_file entry (ptr, ptr);
dcl linus_data_$trace_every_n_tuples fixed bin (35) external static;
%skip(1);
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
%skip(1);
dcl unspec builtin;
%page;
%include linus_data_file_info;
%skip(3);
     end linus_write;
