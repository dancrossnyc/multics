/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_lila_term:
     proc (lcb_ptr, lsh_ptr, td_ptr, code);

/* DESCRIPTION:

   This procedure processes a LINUS term and produces a MRDS term string.



   HISTORY:

   77-08-01 J. A. Weeldreyer: Initially written.
   
   78-04-01  J.   A.   Weeldreyer:  Modified  to  give  better diagnostics for
   constant expr.  of scalar funs.
   
   78-08-01 J. A. Weeldreyer: Modified to conform to new token data.
   
   80-03-13  Rickie  E.   Brinegar:  Modified  to  use  a work area defined on
   lcb.lila_area_ptr instead of getting system free area.
  
   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler. 

   81-11-03 DJ Schimke: Modified to allow constant -> op -> column_spec 
   ordering for expressions rather than only column_spec -> op -> constant.
*/

%include linus_lcb;
%page;
%include linus_ef_data;
%page;
%include linus_ls_header;
%page;
%include linus_ls_set;
%page;
%include linus_ls_block;
%page;
%include linus_mrds_block;
%page;
%include linus_set_fn;
%page;
%include linus_token_data;
%page;
%include linus_variables;
%page;
%include mdbm_descriptor;

	dcl     (
	        code,				/* Output: return code */
	        icode,				/* internal status code */
	        temp_pos
	        )			 fixed bin (35);	/* temp cur_pos for look ahead */

	dcl     (
	        expr_flag,				/* on if expr OK */
	        atom_flag,				/* on if atom OK */
	        rop_flag,				/* on if rel. op. OK */
	        end_flag,				/* on if end OK */
	        done
	        )			 bit (1) unal;	/* completion flag */

	dcl     (i, leaf_no)	 fixed bin;	/* no. of leaf we are working on */

	dcl     si_ptr		 ptr;		/* pointer to select_info_structure */
	dcl     token		 char (token_data.length) based (token_data.t_ptr);
	dcl     mrds_rop		 (24:29) char (4) var int static options (constant)
				 init (" = ", " ^= ", " > ", " >= ", " < ", " <= ");
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);

	dcl     1 temp_token	 aligned like token_data; /* for look-ahead */
	dcl     1 expr_data		 aligned like ef_data;

	dcl     (
	        linus_error_$where_syntax,
	        linus_error_$incomplete_where,
	        linus_error_$const_expr_fn,
	        linus_data_$max_set_stack_size,
	        linus_data_$max_range_items,
	        linus_data_$max_expr_items,
	        linus_data_$max_pred_stack_size,
	        mrds_data_$max_token_size,
	        mrds_data_$max_select_items,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     (addr, fixed, null, length, addrel, rel) builtin;

	dcl     linus_lila_get_token	 entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35));
	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_lila_set_fn	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_build_expr_str
				 entry (ptr, ptr, ptr, ptr, char (*), fixed bin (35));
	dcl     linus_lila_block	 entry (ptr, ptr, ptr, fixed bin (35));

	call init;				/* initialize */

	if token_data.key = NULL then do;		/* if need new token */
		call
		     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos, td_ptr,
		     icode);
		if icode ^= 0 then
		     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	     end;

	expr_flag = "1"b;
	rop_flag,					/* init. state flags */
	     atom_flag, end_flag = "0"b;

	done = "0"b;				/* init for loop */

	do while (^done);				/* main processing loop */

	     go to token_proc (token_data.key);

token_proc (0):					/* null */
token_proc (1):					/* ) */
token_proc (8):					/* * */
token_proc (9):					/* / */
token_proc (10):					/* + */
token_proc (11):					/* - */
token_proc (12):					/* table name */
token_proc (13):					/* row table pair */
token_proc (14):					/* union */
token_proc (15):					/* inter */
token_proc (16):					/* differ */
token_proc (17):					/* row designator */
token_proc (19):					/* } */
token_proc (20):					/* select */
token_proc (21):					/* ^ */
token_proc (22):					/* & */
token_proc (23):					/* | */
token_proc (30):					/* from */
token_proc (31):					/* where */
token_proc (32):					/* dup */
token_proc (33):					/* unique */
token_proc (34):					/* , */
	     if ^end_flag then /* cant have end of term now */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr,
		     linus_error_$incomplete_where, token);
	     call build_term_block;			/* build mrds term block and put in stack */
	     done = "1"b;
	     go to next;

token_proc (2):					/* column specification */
	     if ^atom_flag & ^expr_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);

	     temp_pos = ls_header.cur_pos;		/* look ahead for operator */
	     call
		linus_lila_get_token (lcb_ptr, lsh_ptr, temp_pos, addr (temp_token),
		icode);
	     if icode ^= 0 then do;			/* reset token pos. ind. prior to error call */
		     token_data = temp_token;
		     ls_header.cur_pos = temp_pos;
		     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
		end;
	     if temp_token.key >= STAR & temp_token.key <= MINUS then
		/* if is expr. */
		call process_expr;
	     else do;				/* is not expression */
		     call
			store_leaf (token_data.mvar || "." || token,
			token_data.must_free);
		     token_data.key = NULL;		/* force new token */
		end;				/* if col. spec. */

	     if expr_flag then do;			/* if was first leaf, expect rel. op. */
		     expr_flag, atom_flag, end_flag = "0"b;
		     rop_flag = "1"b;
		end;
	     else do;				/* if was second leaf, expect end */
		     expr_flag, atom_flag, rop_flag = "0"b;
		     end_flag = "1"b;
		end;
	     go to next;

token_proc (3):					/* linus variable */
	     if ^atom_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);

	     lv_ptr = lcb.lv_ptr;			/* find info for lin. var. */
	     do i = 1 to variables.nvars
		while (token ^= variables.var_info.name (i));
	     end;					/* we know we will find it */
	     call
		add_val_leaf (variables.var_info.var_ptr (i),
		addr (variables.var_info.desc (i)));
	     end_flag = "1"b;
	     atom_flag,				/* reset state flags */
		rop_flag, expr_flag = "0"b;
	     token_data.key = NULL;			/* force new token */
	     go to next;

/* 81-11-03 DJ Schimke: Begin Change *************************************** */
token_proc (4):					/* constant */
	     if ^atom_flag & ^expr_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);

	     temp_pos = ls_header.cur_pos;		/* look ahead for operator */
	     call
		linus_lila_get_token (lcb_ptr, lsh_ptr, temp_pos, addr (temp_token),
		icode);
	     if icode ^= 0 then do;			/* reset token pos. ind. prior to error call */
		     token_data = temp_token;
		     ls_header.cur_pos = temp_pos;
		     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
		end;
	     if temp_token.key >= STAR & temp_token.key <= MINUS then
		/* if is expr. */
		call process_expr;
	     else do;				/* is not expression */
		     call store_leaf (token, token_data.must_free);
		     token_data.key = NULL;		/* force new token */
		end;				/* if constant */

	     if expr_flag then do;			/* if was first leaf, expect rel. op. */
		     expr_flag, atom_flag, end_flag = "0"b;
		     rop_flag = "1"b;
		end;
	     else do;				/* if was second leaf, expect end */
		     expr_flag, atom_flag, rop_flag = "0"b;
		     end_flag = "1"b;
		end;
	     go to next;

/* 81-11-03 DJ Schimke: End Change ***************************************** */

token_proc (5):					/* set function */
	     if ^atom_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);
	     call
		linus_lila_set_fn (lcb_ptr, lsh_ptr, td_ptr, addr (expr_data),
		icode);
	     if icode ^= 0 then
		call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	     call
		add_val_leaf (expr_data.assn_ptr,
		addr (expr_data.ef_ptr -> linus_set_fn.rslt_desc));
	     end_flag = "1"b;			/* reset state flags */
	     rop_flag, expr_flag, atom_flag = "0"b;
	     go to next;

token_proc (6):					/* scalar function */
token_proc (7):					/* ( */
	     if ^expr_flag & ^atom_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);
	     call process_expr;			/* these tokens imply an expression */
	     if expr_flag then do;			/* if expr, then look for rel. op. */
		     rop_flag = "1"b;
		     expr_flag, atom_flag, end_flag = "0"b;
		end;
	     else do;				/* if atom, look for end */
		     end_flag = "1"b;
		     expr_flag, rop_flag, atom_flag = "0"b;
		end;
	     go to next;

token_proc (18):					/* { */
	     if ^atom_flag then /* if not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);

	     ls_block.pred_pcnt = ls_block.pred_pcnt + 1; /* implied paren at start of blockk */
	     ls_set.br_cnt = ls_set.br_cnt + 1;		/* increment bracket count */

	     call linus_lila_block (lcb_ptr, lsh_ptr, td_ptr, icode);
						/* process the inner block */
	     if icode ^= 0 then
		call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);

	     if token_data.key ^= RB then /* last token must be } */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);
	     ls_set.br_cnt = ls_set.br_cnt - 1;		/* decrement bracket count */

	     token_data.key = NULL;			/* force new token */
	     end_flag = "1"b;			/* reset state flags */
	     rop_flag, atom_flag, expr_flag = "0"b;
	     go to next;

token_proc (24):					/* = */
token_proc (25):					/* ^= */
token_proc (26):					/* > */
token_proc (27):					/* >= */
token_proc (28):					/* < */
token_proc (29):					/* <= */
	     if ^rop_flag then /* if rel. op. not expected */
		call
		     linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$where_syntax,
		     token);
	     ls_block.term_op = token_data.key;		/* save rel. op. */
	     atom_flag = "1"b;			/* reset state flags */
	     end_flag, rop_flag, expr_flag = "0"b;
	     token_data.key = NULL;
	     go to next;

next:
	     if token_data.key = NULL then do;		/* get next token */
		     call
			linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos,
			td_ptr, icode);
		     if icode ^= 0 then
			call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
		end;
	end;					/* main processing loop */

	code = 0;					/* made it! */
	return;

stack_term:
     entry (lcb_ptr, lsh_ptr);

/* Entry called by linus_lila_select to cause completed term to be added to
   term stack. */

	call init;				/* initialize */
	call build_term_block;			/* do the work */
	return;

build_term_block:
     proc;

/* Procedure to build a MRDS term string from the term info stored in the ls_block. */

	dcl     i			 fixed bin;

	if ls_block.term_op > 0 then do;		/* only if there is an unbuilt term */
		ms_len_init =
		     length (ls_block.leaf_ptr (1) -> mrds_block.mrds_string)
		     + length (ls_block.leaf_ptr (2) -> mrds_block.mrds_string)
		     + length (mrds_rop (ls_block.term_op)); /* alloc. term block */
		nval_args_init =
		     ls_block.leaf_ptr (1) -> mrds_block.nval_args
		     + ls_block.leaf_ptr (2) -> mrds_block.nval_args;
		allocate mrds_block in (work_area);

		mrds_block.fwd_ptr = ls_block.term_hd_ptr; /* fill in the term block */
		mrds_block.mrds_string =
		     ls_block.leaf_ptr (1) -> mrds_block.mrds_string
		     || mrds_rop (ls_block.term_op)
		     || ls_block.leaf_ptr (2) -> mrds_block.mrds_string;
		ls_block.term_op = 0;		/* indicate no term */

		do i = 1 to ls_block.leaf_ptr (1) -> mrds_block.nval_args;
						/* fill in args from first leaf */
		     mrds_block.val_args.arg_ptr (i) =
			ls_block.leaf_ptr (1) -> mrds_block.arg_ptr (i);
		     mrds_block.val_args.desc_ptr (i) =
			ls_block.leaf_ptr (1) -> mrds_block.desc_ptr (i);
		end;
		do i = ls_block.leaf_ptr (1) -> mrds_block.nval_args + 1
		     to mrds_block.nval_args;		/* add args from second leaf */
		     mrds_block.val_args.arg_ptr (i) =
			ls_block.leaf_ptr (2)
			-> mrds_block.val_args
			.arg_ptr (i - ls_block.leaf_ptr (1) -> mrds_block.nval_args);
		     mrds_block.val_args.desc_ptr (i) =
			ls_block.leaf_ptr (2)
			-> mrds_block.val_args
			.desc_ptr (i - ls_block.leaf_ptr (1) -> mrds_block.nval_args);
		end;

		ls_block.term_hd_ptr = mblk_ptr;
		mblk_ptr = null;
		ls_block.nterms = ls_block.nterms + 1;
		ls_block.leaf_ptr (1) = null;
		ls_block.leaf_ptr (2) = null;
	     end;					/* if there was unbuilt term */

     end build_term_block;

process_expr:
     proc;

/* Procedure to handle where clause expressions. */

	dcl     var		 char (32);

	var = "";
	call
	     linus_lila_build_expr_str (lcb_ptr, lsh_ptr, td_ptr, mblk_ptr, var,
	     icode);				/* build mrds string for this expr. */
	if icode ^= 0 then
	     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
	if var = "" then
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$const_expr_fn,
		"");
	if expr_flag then
	     leaf_no = 1;
	else leaf_no = 2;
	ls_block.leaf_ptr (leaf_no) = mblk_ptr;
	mblk_ptr = null;

     end process_expr;

store_leaf:
     proc (string, must_free);

/* procedure to store a leaf into the current term in the ls_block */

	dcl     string		 char (*);
	dcl     must_free		 bit (1);

	if expr_flag then
	     leaf_no = 1;
	else leaf_no = 2;

	ms_len_init = length (string);		/* make and fill in mrds block for leaf */
	nval_args_init = 0;
	allocate mrds_block in (work_area);
	mrds_block.fwd_ptr = null;
	mrds_block.mrds_string = string;
	ls_block.leaf_ptr (leaf_no) = mblk_ptr;		/* put in leaf */
	mblk_ptr = null;
	token_data.t_ptr = null;

     end store_leaf;

add_val_leaf:
     proc (arg_ptr, desc_ptr);

/* Procedure to add a .V. type of leaf to the current term. */

	dcl     (arg_ptr, desc_ptr)	 ptr;
	dcl     is_var		 (22) bit (1) int static unal options (constant)
				 init ((19) (1)"0"b, "1"b, "0"b, "1"b);

	ms_len_init = 3;				/* make and fill in mrds block for leaf */
	nval_args_init = 1;
	allocate mrds_block in (work_area);
	mrds_block.fwd_ptr = null;
	mrds_block.mrds_string = ".V.";
	if is_var (desc_ptr -> descriptor.type) then
	     mrds_block.val_args.arg_ptr (1) = addrel (arg_ptr, 1);
	else mrds_block.val_args.arg_ptr (1) = arg_ptr;
	mrds_block.val_args.desc_ptr (1) = desc_ptr;
	ls_block.leaf_ptr (2) = mblk_ptr;		/* this type of leaf is always second */
	mblk_ptr = null;

     end add_val_leaf;

init:
     proc;

/* Procedure to initialize for both entries. */

	lsb_ptr = ls_header.cur_ptr;
	lss_ptr = ls_block.back_ptr;
	si_ptr = ls_set.si_ptr;
	mblk_ptr = null;
	num_dims = 0;

     end init;

     end linus_lila_term;
