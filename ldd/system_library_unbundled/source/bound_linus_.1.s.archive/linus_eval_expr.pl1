/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-04-23,Leskiw), approve(90-10-05,MCR8202),
     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
     Changed calls to assign_round_ from assign_ so that selected expressions
     will be rounded instead of truncated.
                                                   END HISTORY COMMENTS */


linus_eval_expr:
     proc (lcb_ptr, ex_ptr, destination_ptr, caller, index, icode);


/* DESCRIPTION:
   
   Evaluate LINUS expressions.   
   

   HISTORY:
   
   77-07-01 J. C. C. Jagernauth: Initially written.
   
   80-01-10  Rickie  E.   Brinegar:  Modified  to  use the mdbm_util_$(complex
   number)_data_class entry points.
   
   81-07-13  Rickie  E.   Brinegar: Removed trapping of conversion conditions.
   This is now relegated to the higher level routines.
   
   81-10-09  Rickie  E.   Brinegar:  changed stack from a based variable to an
   automatic variable to avoid area problems.

*/

%include linus_lcb;
%page;
%include linus_expression;
%page;
%include linus_select_info;
%page;
%include linus_set_fn;
%page;
%include linus_scal_fn;


	dcl     1 stack		 aligned,		/* Operand stack aligned */
		2 nelems		 fixed bin,
		2 operand		 (expression.nelems),
		  3 ptr		 ptr,
		  3 real		 real float dec (59),
		  3 cmpx		 complex float dec (59);
	dcl     (
	        SCAL_FUNC		 init (3),
	        OPERATOR		 init (15),
	        CMPX_ASSN_TYPE	 init (24),
	        REAL_ASSN_TYPE	 init (20)
	        )			 fixed bin int static options (constant);
	dcl     EVAL_ITEM_ASSN_LENGTH	 init (59) fixed bin (35) int static
				 options (constant);

	dcl     (
	        stk_ptr		 init (null),
	        destination_ptr,			/* Points to scalar function, set function or select_info 
structure */
	        eval_item_assn_ptr	 init (null)
	        )			 ptr;

	dcl     (
	        i,
	        caller,				/* 1 = from request processor,
						   2 = from scalar function,
						   3 = from set function */
	        eval_item_assn_type,
	        index
	        )			 fixed bin;

	dcl     icode		 fixed bin (35);


	dcl     arith_scal_fn	 bit (1);		/* 1 = arithmetic scalar function */
	dcl     cmpx		 bit (1);		/* "1" = complex; "0" = real */

	dcl     (
	        linus_error_$inv_sclf_use,
	        linus_error_$inv_expr
	        )			 fixed bin (35) ext;

	dcl     linus_eval_scal_func	 entry (ptr, ptr, fixed bin (35));
	dcl     assign_round_
				 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     (
	        mdbm_util_$complex_data_class,
	        mdbm_util_$number_data_class
	        )			 entry (ptr) returns (bit (1));

	dcl     (addr, null)	 builtin;

	icode = 0;
	si_ptr, linus_set_fn_ptr, sclf_ptr, stk_ptr = null ();
	arith_scal_fn = "1"b;			/* assume arith scalar function */
	cmpx = "0"b;				/* Init to real */
	eval_item_assn_type = REAL_ASSN_TYPE;		/* Init to real assign_ type */

	stack.nelems = 0;

	if mdbm_util_$number_data_class (addr (expression.rslt_desc))
	     & mdbm_util_$complex_data_class (addr (expression.rslt_desc)) then do;
		cmpx = "1"b;			/* Complex */
		eval_item_assn_type = CMPX_ASSN_TYPE;
	     end;
	do i = 1 to expression.nelems while (icode = 0);
	     if expression.elem.type (i) = OPERATOR then
		call calculate;			/* Evaluate */
	     else do;
		     if expression.elem.type (i) = SCAL_FUNC then
			call
			     linus_eval_scal_func (lcb_ptr, expression.elem.fn_ptr (i),
			     icode);
		     if icode = 0
			& mdbm_util_$number_data_class (addr (expression.elem.desc))
		     then do;
			     stack.nelems = stack.nelems + 1; /* Push item onto stack */
			     if cmpx then /* Type is complex */
				stack.operand.ptr (stack.nelems), eval_item_assn_ptr =
				     addr (stack.operand.cmpx (stack.nelems));
			     else stack.operand.ptr (stack.nelems), eval_item_assn_ptr =
				     addr (stack.operand.real (stack.nelems));
			     call
				assign_round_ (eval_item_assn_ptr, eval_item_assn_type,
				EVAL_ITEM_ASSN_LENGTH, expression.elem.assn_ptr (i),
				expression.elem.assn_type (i), expression.elem.assn_len (i));
			end;
		     else if expression.nelems = 1 then do; /* expression should contain only one item */
			     arith_scal_fn = "0"b;
			     si_ptr = destination_ptr;
			     call
				assign_round_ (select_info.user_item.rslt_assn_ptr (index),
				select_info.user_item.rslt_assn_type (index),
				select_info.user_item.rslt_assn_len (index),
				expression.elem.assn_ptr (1), expression.elem.assn_type (1),
				expression.elem.assn_len (1));
			end;
		     else call error (linus_error_$inv_sclf_use);
		end;
	end;

	if icode ^= 0 then
	     call error (icode);
	if cmpx then
	     eval_item_assn_ptr = addr (stack.operand.cmpx (1));
	else eval_item_assn_ptr = addr (stack.operand.real (1));

	if arith_scal_fn then
	     go to store_rslt (caller);
	else go to exit;

store_rslt (1):
	si_ptr = destination_ptr;			/* The request processor called */
	call
	     assign_round_ (select_info.user_item.rslt_assn_ptr (index),
	     select_info.user_item.rslt_assn_type (index),
	     select_info.user_item.rslt_assn_len (index), eval_item_assn_ptr,
	     eval_item_assn_type, EVAL_ITEM_ASSN_LENGTH);
	go to exit;

store_rslt (2):
	sclf_ptr = destination_ptr;			/* A scalar function called */
	call
	     assign_round_ (scal_fn.arg.assn_ptr (index), scal_fn.arg.assn_type (index),
	     scal_fn.arg.assn_len (index), eval_item_assn_ptr, eval_item_assn_type,
	     EVAL_ITEM_ASSN_LENGTH);
	go to exit;

store_rslt (3):
	linus_set_fn_ptr = destination_ptr;		/* A set function called */
	call
	     assign_round_ (linus_set_fn.arg.assn_ptr (index),
	     linus_set_fn.arg.assn_type (index), linus_set_fn.arg.assn_len (index),
	     eval_item_assn_ptr, eval_item_assn_type, EVAL_ITEM_ASSN_LENGTH);

exit:
	return;

calculate:
     proc;

/* Perform arithmetic operation on the two items on top of the operand stack */

	if stack.nelems < 2 then
	     call error (linus_error_$inv_expr);	/* operation cannot be performed if stack does not have 2 items */

	go to case (expression.elem.op_code (i));

case (1):
	if cmpx then /* ADD */
	     stack.operand.cmpx (stack.nelems - 1) =
		stack.operand.cmpx (stack.nelems - 1)
		+ stack.operand.cmpx (stack.nelems);
	else stack.operand.real (stack.nelems - 1) =
		stack.operand.real (stack.nelems - 1)
		+ stack.operand.real (stack.nelems);
	go to calculate_exit;

case (2):
	if cmpx then /* SUBTRACT */
	     stack.operand.cmpx (stack.nelems - 1) =
		stack.operand.cmpx (stack.nelems - 1)
		- stack.operand.cmpx (stack.nelems);
	else stack.operand.real (stack.nelems - 1) =
		stack.operand.real (stack.nelems - 1)
		- stack.operand.real (stack.nelems);
	go to calculate_exit;

case (3):
	if cmpx then /* MULTIPLY */
	     stack.operand.cmpx (stack.nelems - 1) =
		stack.operand.cmpx (stack.nelems - 1)
		* stack.operand.cmpx (stack.nelems);
	else stack.operand.real (stack.nelems - 1) =
		stack.operand.real (stack.nelems - 1)
		* stack.operand.real (stack.nelems);
	go to calculate_exit;

case (4):
	if cmpx then /* DIVIDE */
	     stack.operand.cmpx (stack.nelems - 1) =
		stack.operand.cmpx (stack.nelems - 1)
		/ stack.operand.cmpx (stack.nelems);
	else stack.operand.real (stack.nelems - 1) =
		stack.operand.real (stack.nelems - 1)
		/ stack.operand.real (stack.nelems);

calculate_exit:
	stack.nelems = stack.nelems - 1;		/* Pop 1 item */

     end calculate;



error:
     proc (err_code);

	dcl     err_code		 fixed bin (35);

	icode = err_code;

	go to exit;

     end error;

     end linus_eval_expr;
