/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-13,Dupuis), approve(86-01-13,MCR7188), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Added call to ssu_$get_area and ssu_$release_area to have a general
     freeing area around for linus work, and renamed sfr_ptr to
     force_retrieve_scope_ptr.
  2) change(86-01-13,Dupuis), approve(86-05-23,MCR7404), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Changed version from 4.4. to 4.5 and removed the blast message. This new
     version makes the assign_values, del_scope, list_scope,
     list_values, open, and set_scope requests available as active requests.
     It also provides a new "opened_database" active request.
                                                   END HISTORY COMMENTS */


linus:
     proc;

/*  DESCRIPTION:

   This  is  the  top  level  procedure of the LINUS subsystem.  This procedure
   does initialization, calls ssu_ to handle the request, and does termination.



   HISTORY:

   77-04-01 J. A. Weeldreyer: Initially written.

   78-11-01  J.   C.   C.  Jagernauth: Modified to prevent quote stripping when
   modify is requested.

   78-09-01 J. C. C. Jagernauth: Modified for MR7.0.

   80-01-07 Rickie E. Brinegar: Modified to  use linus_invoke$pop_all.

   80-01-28  Rickie  E.   Brinegar:  Modified to return to command level on the
   cleanup condition.

   80-04-12  Rickie  E.  Brinegar: Modified to use linus_define_area instead of
   get_system_free_area_.

   80-06-01  Jim  Gray:  Modified  to  take out free of variable in non-freeing
   area,  and  to  fix  quit handling so that a database open by linus, but not
   closed by it, would not blow linus of the water, upon quitting.

   80-10-28 Rickie E. Brinegar: short name cls added to create_list.

   80-10-31 Rickie E. Brinegar: short name dl added to delete.

   80-11-03 Jim Gray: Modified to change delete_$ptr to hcs_$delentry_seg calls
   for performance.

   80-11-10  Jim Gray: Modified to change delete_$path to hcs_$del_dir_tree and
   hcs_$delentry_file calls in order to improve performance.

   81-02-03  Rickie E.  Brinegar: Modified to use the corrected linus_rel_array
   include  file.   The unused declarations of delect_$(path ptr) were removed,
   and the rel builtin was added to the declarations.

   81-02-24   Rickie  E.   Brinegar:  Removed  the  linus_set  entry  from  the
   declarations   and   set   up   the   LINUS   set   request   to   call  the
   linus_assign_values  entry instead of the linus_set entry.  This permits the
   set  request  to  make  use  of  the  improvements made to the assign_values
   request.

   81-04-10  Rickie  E.   Brinegar:  Changed the linus version number from 2 to
   3.0.

   81-04-22  Rickie  E.  Brinegar: In one place, lcb.is_ptr (the pointer to the
   input  stream)  was  being  used  instead of lcb.ivs_ptr (the pointer to the
   invoke  stack).   This  was  causing  fatal process errors as pointed out in
   TR9545.  This has now been corrected.

   81-05-12  Rickie  E.   Brinegar:  Modified the sub_error_ handler to replace
   "read_attr",  "modify_attr",  "append_tuple",  and  "delete_tuple" with "r",
   "m",  "s",  and  "d"  respectively in sub_error_info.info_string.  This will
   keep the scope terminology in LINUS consistent.

   81-07-07  Rickie  E.   Brinegar: Changed calls to release_area_ to calls to
   release_temp_segment_.   This  was  done as a result of TR10233.  LINUS and
   MRDS were not correctly freeing temporary segments.

   81-07-13 Rickie E. Brinegar: Added a conversion condition trap.

   81-09-17 Rickie E.  Brinegar: Changed the checkin for a token starting with
   ".."  to insure that the token was atleast two characters long before doing
   a substr.  Corrected the order in which char_argl.nargs is incremented when
   processing  the -argument control argument to increment nargs before making
   an assignment to the structure that depends on nargs as a limit.

   81-09-28 Davids: modified the  if  statement  that  controled  skipping  of
   double  quotes  in  the  get_token proc. Also declared q_flag in that proc.
   This stops a subscriptrange condition from sometimes occuring.
   
   81-11-12  Rickie  E.  Brinegar: Added code to keep track of and display the
   virtual  cpu  seconds  used to determine what a request has been asked, how
   much  time was spent in executing the request, broken down by how much time
   was spent in LINUS and how much time was spent in MRDS.

   82-01-29  David J. Schimke:  Added code to initialize two new variables
   (build_increment and build_start) in the linus control block.  This is part
   of the implementation of the build mode for lila.  

   82-02-04  Paul W. Benjamin:  ssu_ conversion.  Roughly 25% of the code 
   removed, the functionality being supplied by ssu_.  The invoke request has
   been retained.  The intent is to supply an exec_com request as well, but
   that implementation is not part of this change.

   82-06-24 Al Dupuis: Added code to place sci_ptr in 
   lcb.subsystem_control_info_ptr, and call to ssu_$get_invocation_level to
   stuff it in lcb.subsystem_invocation_level.

   82-08-26 DJ Schimke: Added code to set report_control_info_ptr and
   table_control_info_ptr to null on linus initiation.  Added code to
   tidy_up procedure to call linus_table$terminate if table_control_info_ptr
   is not null and to call linus_options$terminate if report_control_info_ptr
   is not null.

   82-10-18  David J. Schimke:  Added code to replace the ssu_$abort_line
   procedure with a linus_abort_line procedure which calls linus_convert_code
   before calling the standard abort_line procedure. Also fixed a bug which
   left the lcb lying around after linus terminated.

   82-10-27  David J. Schimke:  Modified the way linus controls the iteration  
   to use the new ssu_$set_request_processor_options.  Deleted the replacement
   procedures: execute_line, evaluate_active_string, invoke_request and
   unknown_request which were used to implement the original iteration control
   under ssu_.  This also changed the way linus turned on the optional abbrev
   processing as this feature is also now part of the request processor
   options.  Added code to execute a subsystem start_up exec_com using
   ssu_$execute_start_up.  Added "-start_up", "-no_startup", "-no_start_up" 
   and "-ns".

   82-11-10 Al Dupuis: Changed linus version from 4.0 to 4.1. The major changes
   made from 4.0 to 4.1 were the inclusion of the report generator, the 
   self-identify request, and the linus_abort_line procedure.

   83-02-23  David J. Schimke:  Deleted code in tidy_up internal procedure 
   that tried to free the char_argl and macro_request areas after the lcb was 
   already deleted. These were both allocated in the lcb.static area. Also 
   deleted the timer_print call just before the linus exit, since the lcb is
   always gone by that time and lcb.timing_mode couldn't be checked anyway.

   83-04-07 DJ Schimke: Added code to set temp_seg_info_ptr to null on linus
   initiation and to call linus_temp_seg_mgr$terminate in tidy_up if it is not
   null.

   83-04-13 DJ Schimke: Added code to check icode and call com_err_ after calls
   to the various termination entry points so errors can be detected.

   83-05-09 DJ Schimke: Added call to requote_string_ to protect command line
   macro arguments from quote stripping. This is in response to TR 15139. Also
   fixed the calls to com_err_ after termination entrys. The com_err_ calls
   were not in do groups so they were reporting the last error redundantly.


   83-06-06 Bertley G. Moberg:  Added support for -print_search_order and
   -no_optimize

   83-06-13 Al Dupuis: Changed linus version from 4.1 to 4.2. The change
   made from 4.1 to 4.2 was the inclusion of the report writer display 
   request's scrolling feature and a call to ssu_$print_blast to announce
   new features.

   83-08-18 Al Dupuis: Changed version from 4.2 to 4.3. The chaneg made from
   4.2 to 4.3 was the inclusion of new report writer features suggested by
   GM and Ford during the report writer controlled release exposure period.

   83-08-26 Al Dupuis: Added code to get a temp segment for storing the
   query as it is being passed around between different requests and 
   subroutines (i.e. qedx, print_query, save_query, linus_get_query,
   linus_put_query, etc. Added code to release the temp segment at termination.

   83-10-03 Al Dupuis: Changed version from 4.3 to 4.4. Version 4.4 is the
   first version of the report writer that will go to general release, and also
   includes the input_query, print_query, etc. requests, as well as the
   write_data_file and store_from_data_file requests.

   83-11-04 Al Dupuis: Rewrote the sub_error_ handler.

   84-11-05 Al Dupuis: Added call to ssu_$add_request_table and 
		   ssu_$add_info_dir.
*/
%page;
%include condition_info;
%page;
%include condition_info_header;

%include linus_lcb;
%page;
%include cp_character_types;
%page;
%include definition;
%page;
%include linus_char_argl;
%page;
%include linus_rel_array;
%page;
%include object_info;
%page;
%include ssu_prompt_modes;
%page;
%include ssu_rp_options;
%page;
%include sub_error_info;

	dcl     sci_ptr		 ptr;		/* used in all ssu calls */

	dcl     (
	        i,
	        j,
	        nargs				/* no. of args in linus command */
	        )			 fixed bin;

	dcl     (
	        acc_ptr		 init (null),	/* pointer to acc string */
	        arg_ptr		 init (null),	/* ptr to arg list to request processor */
	        ctl_ptr		 init (null),
	        d_ptr		 init (null),	/* pointer to a defn. block */
	        ent_ptr		 init (null),	/*  ptr to request processor entry */
	        lb_ptr		 init (null),	/* pointer to base of linus_builtin_ */
	        ptr_sink		 init (null)	/* sink for envir. ptr */
	        )			 ptr;

	dcl     code		 fixed bin (35);	/* status code from subroutines */

	dcl     (
	        initial_linus_vclock,			/* keep track of the initial vclock values */
	        initial_mrds_vclock
	        )			 float bin (63) int static; /* needs changed if linus allows recursion */

	dcl     ab		 bit (1);		/* user wants abbrevs */
	dcl     bit18		 bit (18) based;	/* template */
	dcl     ctl_arg		 char (ctl_len) based (ctl_ptr);
	dcl     ctl_len		 fixed bin (21);	/* length of control arg */
	dcl     dname		 char (168);	/* for calls to expand_pathname_ */
	dcl     ename		 char (32);	/*   & hcs_$initiate */
	dcl     function_entry	 entry variable;
	dcl     function_name	 char (32) varying;
	dcl     highest_numbered_subsystem_invocation fixed bin; /* for call to ssu_, unused at present */
	dcl     lb_bc		 fixed bin (24);	/* bit count of builtin seg */
	dcl     lb_type		 fixed bin (2);	/* seg type code for linus_builtin_ */
	dcl     macro_request	 char (macro_rq_len) based (macro_rq_ptr); /* macro request string */
	dcl     macro_rq_len	 fixed bin (21);	/* length of macro request string */
	dcl     macro_rq_ptr	 ptr;		/* pointer to macro request string */
	dcl     pf_arg_len		 fixed bin (21);	/* length of profile arg */
	dcl     pf_arg_ptr		 ptr;		/* ptr to profile arg */
	dcl     req_buf		 char (linus_data_$req_buf_len); /* the request buffer */
	dcl     rq_arg_len		 fixed bin (21);	/* length of request arg */
	dcl     rq_arg_ptr		 ptr;		/* ptr to request arg */
          dcl     start_up               bit (1);           /* execute start_up */
	dcl     lila_prompt_char	 char (32) varying based (lcb.lila_promp_chars_ptr);
          dcl     1 local_rpo            aligned like rp_options;
	dcl     ptr_desc		 bit (36) init ("100110100000000000000000000000000000"b);
	dcl     fixed_bin_35_desc	 bit (36) init ("100000110000000000000000000000100011"b);

	dcl     1 obj_info		 aligned like object_info;

	dcl     1 acc		 aligned based (acc_ptr), /* template for acc string */
		2 len		 fixed bin (8) unal,
		2 string		 char (0 refer (acc.len)) unal;

	dcl     recursed		 bit (1) int static init ("0"b); /* flag to tell us if this is second time around */
	dcl     RW		 fixed bin (5) int static options (constant) init (01010b);
	dcl     WHITESPACE_OR_QUOTE    char (7) int static options (constant) init (" 	
""");
	dcl     LAST_POSITION_IN_THE_TABLE fixed bin internal static options (constant) init (9999);
	dcl     my_name		 char (5) int static options (constant) init ("linus");

	dcl     (
	        SEG		 init ("011"b),
	        TEXT		 init ("000"b)
	        )			 bit (3) int static options (constant);

	dcl     (
	        error_table_$badopt,
	        error_table_$inconsistent,
	        error_table_$notadir,
                  error_table_$noentry,
	        linus_data_$max_range_items,
	        linus_data_$req_buf_len,
	        linus_data_$req_proc_id,
	        linus_error_$abort,
	        linus_error_$bad_builtin_obj,
	        linus_error_$conv,
	        linus_error_$dup_ctl_args,
	        linus_error_$inval_ctl_arg,
	        linus_error_$recursed,
	        linus_error_$too_few_ctl_args,
	        linus_rq_table_$linus_rq_table_,
	        ssu_et_$request_line_aborted,
	        ssu_et_$subsystem_aborted,
	        sys_info$max_seg_size
	        )			 ext fixed bin (35);

	dcl     ssu_info_directories_$standard_requests char (168) external;
	dcl     ssu_request_tables_$standard_requests bit(36) aligned external;


	dcl     iox_$user_input	 ptr ext static;

	dcl     (cleanup, conversion, sub_error_) condition;

	dcl     (addr, addrel, empty, fixed, null, ptr, rank, rel,
	         rtrim, search, substr, vclock) builtin;  

/* Multics Subroutines */

	dcl     com_err_		 entry options (variable);
	dcl     continue_to_signal_    entry (fixed bin(35));
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$decode_entry_value entry (entry, ptr, ptr);
	dcl     cv_entry_		 entry (char (*), ptr, fixed bin (35)) returns (entry);
	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*),
				 fixed bin (35));
	dcl     find_condition_info_   entry (ptr, ptr, fixed bin(35));
	dcl     get_pdir_		 entry returns (char (168));
	dcl     hcs_$del_dir_tree	 entry (char (*), char (*), fixed bin (35));
	dcl     hcs_$delentry_file	 entry (char (*), char (*), fixed bin (35));
	dcl     hcs_$delentry_seg	 entry (ptr, fixed bin (35)); /* deletes segs without ref names */
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1),
				 fixed bin (2), ptr, fixed bin (35));
	dcl     hcs_$make_seg
				 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35))
				 ;
	dcl     hcs_$status_mins
				 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     object_info_$brief	 entry (ptr, fixed bin (24), ptr, fixed bin (35));
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
          dcl     requote_string_        entry (char(*)) returns(char(*));
	dcl     ssu_$add_info_dir      entry (ptr, char(*), fixed bin, fixed bin(35));
          dcl     ssu_$add_request_table entry (ptr, ptr, fixed bin, fixed bin(35));
	dcl     ssu_$create_invocation entry (char (*), char (*), ptr, ptr, char (*), ptr,
				 fixed bin (35));
	dcl     ssu_$destroy_invocation entry (ptr);
	dcl     ssu_$execute_line	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
          dcl     ssu_$execute_start_up  entry () options (variable);
	dcl     ssu_$get_area	 entry (ptr, ptr, char(*), ptr);
	dcl     ssu_$get_info_ptr	 entry (ptr) returns (ptr);
	dcl     ssu_$get_invocation_count entry (ptr, fixed bin, fixed bin);
	dcl     ssu_$get_procedure	 entry (ptr, char (*), entry, fixed bin (35));
          dcl     ssu_$get_request_processor_options
                                         entry (ptr, char(8), ptr, fixed bin(35));
	dcl     ssu_$listen		 entry (ptr, ptr, fixed bin (35));
	dcl     ssu_$print_message	 entry options (variable);
	dcl     ssu_$release_area      entry (ptr, ptr);
	dcl     ssu_$set_ec_suffix	 entry (ptr, char (32));
	dcl     ssu_$set_procedure	 entry (ptr, char (*), entry, fixed bin (35));
	dcl     ssu_$set_prompt	 entry (ptr, char (64) varying);
	dcl     ssu_$set_prompt_mode	 entry (ptr, bit (*));
          dcl     ssu_$set_request_processor_options 
                                         entry (ptr, ptr, fixed bin(35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));

/* LINUS/MRDS Subroutines */

          dcl     linus_abort_line       entry() options(variable);
          dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     linus_invoke$pop_all	 entry (ptr, fixed bin (35));
	dcl     linus_invoke$pop_all_on_pi entry (ptr);
	dcl     linus_thread_fn_list
				 entry (ptr, entry, char (168) varying, char (32) varying,
				 fixed bin (35));
	dcl     linus_builtin_	 entry;
	dcl     linus_define_area	 entry (ptr, char (6), fixed bin (35));
	dcl     linus_options$terminate entry (ptr, fixed bin (35));
	dcl     linus_table$terminate	 entry (ptr, fixed bin (35));
	dcl     linus_temp_seg_mgr$get_segment 
				 entry (ptr, char(*), char(*), ptr, fixed bin(35));
	dcl     linus_temp_seg_mgr$release_segment 
				 entry (ptr, char(*), ptr, fixed bin(35));
          dcl     linus_temp_seg_mgr$terminate 
                                         entry (ptr, fixed bin(35));
	dcl     dsl_$close		 entry options (variable);

	sci_ptr = null;
	lcb_ptr = null;
	if recursed then do;			/* if this is second time around */
		call com_err_ (linus_error_$recursed, my_name);
		return;
	     end;
	else do;
		on cleanup call tidy_up;		/* so we leave no traces */
		recursed = "1"b;			/* remember we have arrived */
	     end;

	arg_ptr, ca_ptr, ent_ptr = null;		/* initialize */
	macro_rq_ptr, pf_arg_ptr, rq_arg_ptr = null;
	ab = "0"b;
	start_up = "1"b;				/* execute start_up by default */

	call
	     hcs_$make_seg ("", unique_chars_ ("0"b) || ".lcb", "", RW, ptr_sink,
	     code);				/* make an LCB */
	if ptr_sink = null then
	     call error (code, "^/Creating LINUS Control Block");

	ptr_sink -> lcb.linus_area_ptr, ptr_sink -> lcb.lila_area_ptr,
	     ptr_sink -> lcb.i_o_area_ptr = null;

	ptr_sink -> lcb.lila_count, ptr_sink -> lcb.lila_chars,
	     ptr_sink -> lcb.curr_lv_val_offset, ptr_sink -> lcb.curr_lit_offset,
	     ptr_sink -> lcb.db_index = 0;		/* initialize the LCB */
	ptr_sink -> lcb.request_time, ptr_sink -> lcb.mrds_time = 0;
	ptr_sink -> lcb.prompt_flag = "1"b;		/* default to prompt mode */
	ptr_sink -> lcb.test_flag = "0"b;		/* default is not test mode */
	ptr_sink -> lcb.pso_flag = "0"b;		/* default is to not print search order */
	ptr_sink -> lcb.no_ot_flag = "0"b;		/* default is to optimize */
	ptr_sink -> lcb.cal_ptr, ptr_sink -> lcb.ttn_ptr, ptr_sink -> lcb.si_ptr,
	     ptr_sink -> lcb.force_retrieve_scope_info_ptr, ptr_sink -> lcb.setfi_ptr,
	     ptr_sink -> lcb.sclfi_ptr, ptr_sink -> lcb.lv_ptr,
	     ptr_sink -> lcb.lvv_ptr, ptr_sink -> lcb.ivs_ptr,
	     ptr_sink -> lcb.lit_ptr, ptr_sink -> lcb.liocb_ptr = null;
	ptr_sink -> lcb.is_ptr = iox_$user_input;	/* init pointer to input stream */
	ptr_sink -> lcb.rb_len = linus_data_$req_buf_len;
	ptr_sink -> lcb.lila_fn = "";
	ptr_sink -> lcb.static_area = empty;

	ptr_sink -> lcb.build_increment = 10;
	ptr_sink -> lcb.build_start = 10;

	ptr_sink -> lcb.linus_version = "4.5";		/* SET LINUS VERSION */
	ptr_sink -> lcb.iteration = "0"b;
	ptr_sink -> lcb.report_control_info_ptr = null;
	ptr_sink -> lcb.table_control_info_ptr = null;
	ptr_sink -> lcb.temp_seg_info_ptr = null;
	ptr_sink -> lcb.query_temp_segment_ptr = null;
	ptr_sink -> lcb.general_work_area_ptr = null;

	lcb_ptr = ptr_sink;
	ptr_sink = null;

	call ssu_$create_invocation ("linus", (lcb.linus_version), lcb_ptr, 
	     addr (linus_rq_table_$linus_rq_table_), ">doc>ss>linus", sci_ptr, code);
	if code ^= 0
	then call error (code, "");
	call ssu_$add_request_table (sci_ptr, 
	     addr (ssu_request_tables_$standard_requests), LAST_POSITION_IN_THE_TABLE, code);
	if code ^= 0
	then call error (code, "Unable to add the ssu_ standard requests.");
	call ssu_$add_info_dir (sci_ptr, ssu_info_directories_$standard_requests, LAST_POSITION_IN_THE_TABLE, code);
	if code ^= 0
	then call error (code, "Unable to add the ssu_ standard request info segs.");

	lcb.subsystem_control_info_ptr = sci_ptr;
	call ssu_$get_invocation_count (sci_ptr, lcb.subsystem_invocation_level,
	     highest_numbered_subsystem_invocation);

	allocate lila_prompt_char in (lcb.static_area) set (lcb.lila_promp_chars_ptr);
	lila_prompt_char = "->";

	num_of_rels_init = linus_data_$max_range_items;
	allocate linus_rel_array in (lcb.static_area);
	lcb.rel_array_ptr = linus_rel_array_ptr;
	linus_rel_array.num_of_rels = 0;

	call cu_$decode_entry_value (linus_builtin_, lb_ptr, ptr_sink);
						/* get pointer to linus_builtin_ object */
	if lb_ptr ^= null then do;			/* if found segment */
		lb_ptr = ptr (lb_ptr, 0);		/* point to base of seg */
		call hcs_$status_mins (lb_ptr, lb_type, lb_bc, code);
						/* get bit count */
		if code ^= 0 then
		     call error (linus_error_$bad_builtin_obj, "");
		call object_info_$brief (lb_ptr, lb_bc, addr (obj_info), code);
						/* get object data */
		if code ^= 0 then
		     call error (linus_error_$bad_builtin_obj, "");

		do d_ptr = addrel (obj_info.defp, obj_info.defp -> bit18)
		     /* search for class 3 defn for linus_builtin_ */
		     repeat addrel (obj_info.defp, d_ptr -> definition.value)
		     while (addrel (obj_info.defp, d_ptr -> definition.symbol)
		     -> acc.string ^= "linus_builtin_"
		     & addrel (obj_info.defp, d_ptr -> definition.forward) -> bit18
		     ^= "0"b);
		end;
		if addrel (obj_info.defp, d_ptr -> definition.symbol) -> acc.string
		     ^= "linus_builtin_" then
		     call error (linus_error_$bad_builtin_obj, "");

		do d_ptr = addrel (obj_info.defp, d_ptr -> definition.segname)
		     /* look through entry points in this block */
		     repeat addrel (obj_info.defp, d_ptr -> definition.forward)
		     while (d_ptr -> definition.class ^= SEG
		     & d_ptr -> definition.forward ^= "0"b);
		     if d_ptr -> definition.class = TEXT
			& ^d_ptr -> definition.flags.ignore
			& d_ptr -> definition.flags.entry then do; /* if external entry point */
			     acc_ptr = addrel (obj_info.defp, d_ptr -> definition.symbol);
						/* point to entry name */
			     if substr (acc.string, acc.len - 4, 5) = "_calc" then do;
						/* if calc entry */
				     function_name = substr (acc.string, 1, acc.len - 5);
				     function_entry =
					cv_entry_ ("linus_builtin_$" || acc.string, null, code);
				     if code ^= 0 then
					call
					     error (code,
					     "^/Converting builtin entry: " || function_name);
				     call
					linus_thread_fn_list (lcb_ptr, function_entry,
					"linus_builtin_", function_name, code); /* thread function info into list */
				     if code ^= 0 then
					call error (code, "");
				end;		/* if true function entry */
			end;			/* if text entry */
		end;				/* entry point loop */
	     end;					/* if builtin segment found */

	if lcb.setfi_ptr = null then /* if did not find any builtins */
	     call error (linus_error_$bad_builtin_obj, "");

	lcb.rb_ptr = addr (req_buf);

	on conversion call error (linus_error_$conv, ""); /* print error and reset for next request */

/* set up pi handler */
	call ssu_$set_procedure (sci_ptr, "program_interrupt", linus_invoke$pop_all_on_pi, code);
	if code ^= 0
	then call error (code, "");

	call cu_$arg_count (nargs);			/* see if we have args */

	do i = 1 to nargs;
	     call cu_$arg_ptr (i, ctl_ptr, ctl_len, code);
	     if code ^= 0 then
		call error (code, ctl_arg);

	     if ctl_arg = "-set_linus_prompt_string" | ctl_arg = "-slups" | ctl_arg = "-prompt"
	     then do;
		     if i >= nargs then
			call
			     error (linus_error_$too_few_ctl_args,
			     "^2/-set_linus_prompt_string requires a parameter");
		     i = i + 1;
		     call cu_$arg_ptr (i, ctl_ptr, ctl_len, code);
		     if code ^= 0 then
			call error (code, ctl_arg);
		     call ssu_$set_prompt (sci_ptr, (ctl_arg));
		end;
	     else if ctl_arg = "-set_lila_prompt_string" | ctl_arg = "-slaps"
	     then do;
		     if i >= nargs then
			call
			     error (linus_error_$too_few_ctl_args,
			     "^2/-set_lila_prompt_string requires a parameter");
		     i = i + 1;
		     call cu_$arg_ptr (i, ctl_ptr, ctl_len, code);
		     if code ^= 0 then
			call error (code, ctl_arg);
		     lila_prompt_char = ctl_arg;
		end;
	     else if ctl_arg = "-no_prompt" | ctl_arg = "-npmt" then do;
		     lcb.prompt_flag = "0"b;
		     call ssu_$set_prompt_mode (sci_ptr, DONT_PROMPT);
		end;
	     else if ctl_arg = "-print_search_order" | ctl_arg = "-pso" 
		then lcb.pso_flag = "1"b;
	     else if ctl_arg = "-no_optimize" | ctl_arg = "-no_ot" 
		then lcb.no_ot_flag = "1"b;
	     else if ctl_arg = "-abbrev" | ctl_arg = "-ab"
	     then ab = "1"b;
	     else if ctl_arg = "-no_abbrev" | ctl_arg = "-nab"
	     then ab = "0"b;
	     else if ctl_arg = "-profile" | ctl_arg = "-pf"
	     then do;
		     if i >= nargs
		     then call error (linus_error_$too_few_ctl_args,
			     "^2/-profile requires a parameter");
		     i = i + 1;
		     call cu_$arg_ptr (i, pf_arg_ptr, pf_arg_len, code);
		     if code ^= 0
		     then call error (code, ctl_arg);
		     ab = "1"b;
		end;
	     else if ctl_arg = "-request" | ctl_arg = "-rq"
	     then do;
		     if ca_ptr ^= null
		     then call error (error_table_$inconsistent,
			     "^2/A LINUS macro cannot be specified in addition to -request.");
		     if i >= nargs
		     then call error (linus_error_$too_few_ctl_args,
			     "^2/-request requires a parameter");
		     i = i + 1;
		     call cu_$arg_ptr (i, rq_arg_ptr, rq_arg_len, code);
		     if code ^= 0
		     then call error (code, ctl_arg);
		end;
	     else if ctl_arg = "-iteration" | ctl_arg = "-it"
		then lcb.iteration = "1"b;
	     else if ctl_arg = "-no_iteration" | ctl_arg = "-nit"
		then lcb.iteration = "0"b;
	     else if ctl_arg = "-start_up" | ctl_arg = "-su"
		then start_up = "1"b;
	     else if ctl_arg = "-no_startup" | ctl_arg = "-no_start_up" 
		| ctl_arg = "-ns" | ctl_arg = "-nsu" then start_up = "0"b;
	     else if ctl_arg = "-arguments" | ctl_arg = "-ag" then do;
		     if ca_ptr = null then
			call
			     error (linus_error_$inval_ctl_arg,
			     "^2/A macro_name must be given before the -arguments control argument is vaild."
			     );

		     if i >= nargs then
			call
			     error (linus_error_$too_few_ctl_args,
			     "^2/-arguments requires at least one parameter");
		     i = i + 1;
		     j = 2;
		     do while (i ^> nargs);
			char_argl.nargs = char_argl.nargs + 1;
			call
			     cu_$arg_ptr (i, char_argl.arg.arg_ptr (j),
			     char_argl.arg.arg_len (j), code); /* put arg info into structure */
			if code ^= 0 then
			     call error (code, "macro argument");
			i = i + 1;
			j = j + 1;
		     end;
		end;
	     else if substr (ctl_arg, 1, 1) ^= "-" then do;
		     if ca_ptr ^= null then
			call
			     error (linus_error_$dup_ctl_args,
			     "^2/Only one macro path may be given: " || ctl_arg);
		     if rq_arg_ptr ^= null
		     then call error (error_table_$inconsistent,
			     "^2/A LINUS macro cannot be specified in addition to -request.");
		     nargs_init = nargs - i + 1;
		     if nargs_init > 1 then
			nargs_init = nargs_init - 1;
		     allocate char_argl in (lcb.static_area);
		     char_argl.nargs = 1;
		     char_argl.arg.arg_ptr (1) = ctl_ptr;
		     char_argl.arg.arg_len (1) = ctl_len;
		end;
	     else call error (error_table_$badopt, ctl_arg);
	end;					/* if macro args */

	call ssu_$set_ec_suffix (sci_ptr, "lec");	/* setup for exec_coms */

/* The pre_request_line and post_request_line procedures may be replaced
   for timing mode where we have pre- and post- request procedures. The
   procedures that we will replace them with are in this module and we 
   need to get the default procedures because they will be used when
   timing is turned off.*/

	call ssu_$get_procedure (sci_ptr, "pre_request_line", lcb.ssu_pre_request_line, code);
	if code ^= 0
	then call error (code, "");

	call ssu_$get_procedure (sci_ptr, "post_request_line", lcb.ssu_post_request_line, code);
	if code ^= 0
	then call error (code, "");

/* Setup linus_abort_line as replacement for the standard abort_line. 
   Save the abort_line procedure, first, because linus_abort_line will
   call the standard ssu_abort_line. */

	call ssu_$get_procedure (sci_ptr, "abort_line", lcb.ssu_abort_line, code);
	if code ^= 0
	then call error (code, "");

	call ssu_$set_procedure (sci_ptr, "abort_line", linus_abort_line, code);
	if code ^= 0
	then call error (code, "");

/* Get the request_processor options so we can set up for abbrev processing
   and iteration. Linus iteration is off by default but ssu_ defaults to on. */

	call ssu_$get_request_processor_options (sci_ptr, RP_OPTIONS_VERSION_1, addr(local_rpo), code);
	if code ^= 0 then call error (code, "");

	if ^lcb.iteration				/* don't interpret parens */
	then do;					/* as causing iteration */
	     local_rpo.language_info.non_standard_language = "1"b;
	     local_rpo.language_info.character_types (rank ("(")) = NORMAL_CHARACTER;
	     local_rpo.language_info.character_types (rank (")")) = NORMAL_CHARACTER;
	     end;

	if ab = "1"b				/* user wants abbrevs */
	then do;
		if pf_arg_ptr ^= null		/* user specified a profile */
		then do;
			ctl_len = pf_arg_len;
			ctl_ptr = pf_arg_ptr;
			call expand_pathname_$add_suffix (ctl_arg, "profile", dname, ename, code);
			if code ^= 0
			then call error (code, ctl_arg);
			call hcs_$initiate (dname, ename, "", 0, 0, local_rpo.abbrev_info.default_profile_ptr, code);
			if local_rpo.abbrev_info.default_profile_ptr = null
			then call error (code, rtrim (dname) || ">" || ename);
		     end;

		local_rpo.abbrev_info.expand_request_lines = "1"b;
	     end;

	call ssu_$set_request_processor_options (sci_ptr, addr(local_rpo), code);
	if code ^= 0 then call error (code, "");	     

	if ca_ptr ^= null then do;			/* macro given */
	          macro_rq_len = 6 + char_argl.nargs;
		do i = 1 to char_argl.nargs;
		     macro_rq_len = macro_rq_len + char_argl.arg.arg_len (i) + 1;
		end;
	          macro_rq_len = macro_rq_len * 2 +2;	/* allow room for requoting */
		allocate macro_request in (lcb.static_area);
		macro_request = "invoke";
		do i = 1 to char_argl.nargs;
		     ctl_ptr = char_argl.arg.arg_ptr (i);
		     ctl_len = char_argl.arg.arg_len (i);
		     if ctl_len = 0 
		          then macro_request = rtrim(macro_request) || " """"";
		     else if search (ctl_arg, WHITESPACE_OR_QUOTE) ^= 0
		          then call requote_arg (ctl_arg);
		     else macro_request = rtrim(macro_request) || " " || ctl_arg;
		end;
		free char_argl;
		call ssu_$execute_line (sci_ptr, macro_rq_ptr, macro_rq_len, code); /* set up to take input from macro */
		free macro_request;
		if code = ssu_et_$subsystem_aborted
		then do;
			call tidy_up;
			goto exit;
		     end;
		else if code ^= 0 & code ^= ssu_et_$request_line_aborted
		then do;
			call error (linus_error_$abort, "");
			return;
		     end;
	     end;

	on sub_error_ call sub_error_handler;

	call linus_define_area (lcb.lila_area_ptr, "LILA", code);
	if code ^= 0 then
	     call error (code, "");

	call linus_define_area (lcb.linus_area_ptr, "LINUS", code);
	if code ^= 0
	then call error (code, "");

	call linus_temp_seg_mgr$get_segment (lcb_ptr, "LINUS", "",
	     lcb.query_temp_segment_ptr, code);
	if code ^= 0
	then call error (code, "^/While trying to aquire a temp segment for the query.");
	call ssu_$get_area (sci_ptr, null, "general use area", lcb.general_work_area_ptr);


	if start_up
	     then do;
	     call ssu_$execute_start_up (sci_ptr, code);
	     if code ^= 0 & code ^= error_table_$noentry
		then call error (code, "While executing start_up");
	     end;
   
	initial_linus_vclock = vclock;
	lcb.request_time, lcb.mrds_time = 0;

	if rq_arg_ptr ^= null			/* execute the -rq stuff */
	then do;
		call ssu_$execute_line (sci_ptr, rq_arg_ptr, rq_arg_len, code);
		if code = ssu_et_$subsystem_aborted
		then do;
			call tidy_up;
			goto exit;
		     end;
		else if code ^= 0			/* nonfatal */
		then call ssu_$print_message (sci_ptr, code);
	     end;

listen:
	call ssu_$listen (sci_ptr, iox_$user_input, code);
	if code ^= ssu_et_$subsystem_aborted
	then call error (linus_error_$abort, "");	/* if fatal error in handler */
	call tidy_up;

exit:
	return;

timer_print:
     proc;

	call
	     ioa_ ("^/LINUS time^13t= ^10.3f" || "^/MRDS time^13t= ^10.3f"
	     || "^/Total time^13t= ^10.3f^/",
	     lcb.request_time / 1000000, lcb.mrds_time / 1000000,
	     (lcb.request_time + lcb.mrds_time) / 1000000);
	lcb.request_time, lcb.mrds_time = 0;

     end timer_print;

tidy_up:
     proc;

/* Procedure to clean up loose ends */

	dcl     icode		 fixed bin (35);
	dcl     temp_index		 fixed bin (35);	/* temp storage for database index */

          if lcb.general_work_area_ptr ^= null
	then call ssu_$release_area (sci_ptr, lcb.general_work_area_ptr);

	if sci_ptr ^= null				/* if there is an ssu_ invocation */
	then call ssu_$destroy_invocation (sci_ptr);

	if lcb_ptr ^= null then do;			/* if we have a LCB */

		if lcb.is_ptr ^= iox_$user_input
		then do;				/* if we were in macro */
			lcb.prompt_flag = "0"b;	/* make sure pop doesn't try and call ssu_! */
			call linus_invoke$pop_all (lcb_ptr, icode);
		     end;
		if lcb.db_index ^= 0 then do;		/* if a data base open, close it */
			temp_index = lcb.db_index;
			lcb.db_index = 0;
			on sub_error_ ;
			if lcb.timing_mode then
			     initial_mrds_vclock = vclock;
			call dsl_$close (temp_index, icode);
			if lcb.timing_mode then
			     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
			revert sub_error_;
		     end;

		if lcb.liocb_ptr ^= null then do;	/* clean up the lila file */
			call iox_$close (lcb.liocb_ptr, icode);
			call iox_$detach_iocb (lcb.liocb_ptr, icode);
			call iox_$destroy_iocb (lcb.liocb_ptr, icode);
			lcb.liocb_ptr = null;
			call hcs_$del_dir_tree (get_pdir_ (), lcb.lila_fn, icode);
			if icode = error_table_$notadir | icode = 0 then
			     call hcs_$delentry_file (get_pdir_ (), lcb.lila_fn, icode);

		     end;				/* cleaning up lila file */
		if lcb.linus_area_ptr ^= null then do;
			call
			     release_temp_segment_ ("LINUS.LINUS.area", lcb.linus_area_ptr,
			     icode);
			if icode ^= 0 then
			     call com_err_ (icode, my_name);
			lcb.linus_area_ptr = null;
		     end;
		if lcb.lila_area_ptr ^= null then do;
			call
			     release_temp_segment_ ("LINUS.LILA.area", lcb.lila_area_ptr,
			     icode);
			if icode ^= 0 then
			     call com_err_ (icode, my_name);
			lcb.lila_area_ptr = null;
		     end;
		if lcb.i_o_area_ptr ^= null then do;
			call
			     release_temp_segment_ ("LINUS.I_O_.area", lcb.i_o_area_ptr,
			     icode);
			if icode ^= 0 then
			     call com_err_ (icode, my_name);
			lcb.i_o_area_ptr = null;
		     end;
		if lcb.table_control_info_ptr ^= null
		then do;
		   call linus_table$terminate (lcb_ptr, icode);
		   if icode ^= 0 then
		      call com_err_ (icode, my_name);
		   end;
		if lcb.report_control_info_ptr ^= null
		then do;
		   call linus_options$terminate (lcb_ptr, icode);
		   if icode ^= 0 then
		      call com_err_ (icode, my_name);
		   end;
		if lcb.query_temp_segment_ptr ^= null
		then do;
		     call linus_temp_seg_mgr$release_segment (lcb_ptr,
			"LINUS", lcb.query_temp_segment_ptr, icode);
		     if icode ^= 0
		     then call com_err_ (icode, my_name);
		     else;
		end;
		if lcb.temp_seg_info_ptr ^= null
		then do;
		   call linus_temp_seg_mgr$terminate (lcb_ptr, icode);
		   if icode ^= 0 then
		      call com_err_ (icode, my_name);
		   end;
		if lcb_ptr ^= null then do;
			call hcs_$delentry_seg (lcb_ptr, icode); /* delete the LCB */
			if icode ^= 0 then
			     call com_err_ (icode, my_name);
			lcb_ptr = null;
		     end;
		else if ptr_sink ^= null then do;
			call hcs_$delentry_seg (ptr_sink, icode);
			if icode ^= 0 then
			     call com_err_ (icode, my_name);
			ptr_sink = null;
		     end;


	     end;					/* if we had an LCB */

	recursed = "0"b;				/* so we can be called again */

     end tidy_up;

error:
     proc (icode, msg_str);

/* Error procedure, prints a message and cleans up */

	dcl     (icode, user_code)	 fixed bin (35);
	dcl     msg_str		 char (*);

	call linus_convert_code (icode, user_code, linus_data_$req_proc_id);
	call com_err_ (user_code, my_name, msg_str);
	call tidy_up;
	go to exit;

     end error;

requote_arg:
     proc(arg);
     dcl arg char(*) parm;
     macro_request = rtrim(macro_request) || " " || requote_string_(arg);
end requote_arg;
%page;
sub_error_handler: proc;
%skip(1);
/*
     Find the sub_error_info structure and if it wasn't mrds that
     signalled it then continue to signal. Change appropriate mrds_error_
     codes to linus_error_ codes and print the message. Do a non-local goto
     so the current request will have its cleanup handler invoked but won't
     print the error message we just printed.
*/
%skip(1);
dcl 1 local_condition_info like condition_info;
dcl seh_code fixed bin (35);
%skip(1);
	condition_info_ptr = addr (local_condition_info);
	condition_info.version = condition_info_version_1;
	call find_condition_info_ (null (), condition_info_ptr, seh_code);
	if seh_code ^= 0
	then do;
	     call tidy_up;
	     goto exit;
	end;
%skip(1);
	sub_error_info_ptr = condition_info.info_ptr;
	if substr (sub_error_info.name, 1, 9) ^= "mrds_dsl_"
	& substr (sub_error_info.name, 1, 3) ^= "mu_"
	& substr (sub_error_info.name, 1, 4) ^= "mus_"
	then do;
	     call continue_to_signal_ (seh_code);
	     return;
	end;
%skip(1);
	call linus_convert_code (sub_error_info.header.status_code, seh_code,
	     linus_data_$req_proc_id);
	call ssu_$print_message (sci_ptr, seh_code, sub_error_info.header.info_string);
%skip(1);
	goto listen;
%skip(1);
     end sub_error_handler;

pre_request_line:
     entry (bv_sci_ptr);

/* This procedure is called prior to the execution of a request line.  If the
   user has enabled timing mode, it initializes some timers and returns.
*/
	dcl     bv_sci_ptr		 ptr parameter;

	lcb_ptr = ssu_$get_info_ptr (bv_sci_ptr);
	if ^lcb.timing_mode
	then return;
	lcb.mrds_time = 0;
	initial_linus_vclock = vclock;
	return;

post_request_line:
     entry (bv_sci_ptr);

/* This procedure is called after a request line has been executed.  If the 
   user has timing mode on, it diddles some timers, prints some statistics 
   and returns.
*/

	lcb_ptr = ssu_$get_info_ptr (bv_sci_ptr);
	if ^lcb.timing_mode
	then return;
	if lcb.request_time = -1			/* user just turned on timing */
	then do;
		lcb.request_time = 0;
		return;
	     end;
	lcb.request_time = vclock - initial_linus_vclock - lcb.mrds_time;
	call timer_print;
	return;

     end linus;

