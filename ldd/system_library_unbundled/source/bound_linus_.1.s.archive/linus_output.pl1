/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-04-30,Leskiw), approve(90-10-05,MCR8202),
     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
     Changed calls to assign_round_ from assign_ so that data is rounded.
                                                   END HISTORY COMMENTS */


linus_output:
     proc;
	return;					/* This entry point should never be called */

/* DESCRIPTION:

   The  porpose  of  this  module  is  to  permit  the  common  code  used  by
   linus_create_list,  linus_report,  and  linus_write  to  be maintained in a
   central  location.  Thus corrections that have to be made need only be made
   in one location, not in three.


   HISTORY:

   81-04-29  Rickie  E.   Brinegar:  This  module  was created after hackin on
   linus_create_list, linus_report, and linus_write.  Presumably, it will ease
   maintenance of the three routines.

*/

%include linus_lcb;
%page;
%include linus_select_info;
%page;
%include mdbm_descriptor;

	dcl     (
	        caller,
	        l,
	        len,
	        ob_len,				/* OUTPUT: output buffer length */
	        target_type
	        )			 fixed bin;

	dcl     n_bytes		 fixed bin (21);

	dcl     (
	        called_by,				/* INPUT: The linus_data_ id of my caller */
	        code,				/* INPUT: standard code */
	        icode		 init (0)
	        )			 fixed bin (35);

	dcl     EXPR		 fixed bin (2) int static options (constant) init (2);
	dcl     NEWLINE		 char (1) options (constant) int static init ("
");						/* New line character */
	dcl     wcb_dm		 char (1);	/* INPUT: delimiter character for write request */

	dcl     (
	        dec_3_ptr		 init (null),
	        destination_ptr	 init (null),
	        file_info_ptr,			/* INPUT: pointer to the file information for the create_list request */
	        iocb_ptr,				/* INPUT: iocb_ptr for the report and write requests */
	        out_buf_ptr,			/* INPUT/OUTPUT: if null then allocate and return the value */
	        rec_info_ptr,			/* INPUT: pointer to the record information for the create_list request */
	        ti_ptr,				/* INPUT: target item pointer */
	        user_item_ptr	 init (null)
	        )			 ptr;

	dcl     (addr, fixed, length, ltrim, null, rel, rtrim, substr) builtin;

	dcl     1 user_item		 aligned based (user_item_ptr), /* Valid when mrds_item = user_item */
		2 arg_ptr		 ptr,
		2 bit_len		 fixed bin (35),
		2 desc		 bit (36),
		2 assn_type	 fixed bin,
		2 assn_len	 fixed bin (35);

	dcl     1 ti		 (select_info.n_user_items) aligned based (ti_ptr),
		2 ptr		 ptr,
		2 len		 fixed bin (35);


	dcl     1 record_info	 aligned based (rec_info_ptr),
		2 version		 fixed bin,	/* (INPUT) =1 */
		2 n_fields	 fixed bin,	/* (INPUT) number of fields in this record */
		2 field		 (n refer (record_info.n_fields)) aligned,
		  3 field_ptr	 ptr,		/* (INPUT) ptr to first char of Nth record */
		  3 field_len	 fixed bin (21);	/* (INPUT) len in chars of Nth record */

/*  NOTE:

   This  entry  adds a new record to a lister file.  The order of the fields is
   the   same   as   the   order   in   the   fieldname_info   structure   (see
   lister_$open_file, or lister_$get_fieldnames).  The number of fields in each
   record  must  match  the number of fields in every other record in the file.
   If  the  file  is  full  a non-zero code will be returned.  If the number of
   fields  is  incorrect  a non-zero code will be returned.  Zero-length fields
   are OK.

*/

	dcl     (
	        linus_data_$buff_len,
	        linus_data_$create_list_id,
	        linus_data_$report_id,
	        linus_data_$w_id,
	        sys_info$max_seg_size
	        )			 ext fixed bin (35);

	dcl     dec_3		 pic "+999" based (dec_3_ptr);
	dcl     output_buffer	 (ob_len) char (1) unal based (out_buf_ptr);
	dcl     out_buffer		 char (ob_len) unal based (out_buf_ptr);
	dcl     target_item		 char (ti.len (l)) var aligned based;
	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.i_o_area_ptr);

	dcl     assign_round_
				 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     linus_eval_expr
				 entry (ptr, ptr, ptr, fixed bin, fixed bin, fixed bin (35));
	dcl     lister_$add_record	 entry (ptr, ptr, fixed bin (35));
	dcl     mdbm_util_$string_data_class entry (ptr) returns (bit (1));
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));

create_list:
     entry (lcb_ptr, called_by, file_info_ptr, rec_info_ptr, si_ptr, ti_ptr,
	target_type, out_buf_ptr, ob_len, code);
	call main_routine;
	return;

report:
     entry (lcb_ptr, called_by, iocb_ptr, si_ptr, ti_ptr, target_type,
	out_buf_ptr, ob_len, code);
	allocate dec_3 in (work_area);
	call main_routine;
	return;

write:
     entry (lcb_ptr, called_by, iocb_ptr, si_ptr, wcb_dm, ti_ptr, target_type,
	out_buf_ptr, ob_len, code);
	call main_routine;
	return;

main_routine:
     proc;
	n_bytes = 0;
	code = 0;
	caller = 1;
	destination_ptr = lcb.si_ptr;
	do l = 1 to select_info.n_user_items;

	     if ti.ptr (l) = null then do;
		     if select_info.user_item.item_type (l) = EXPR | select_info.set_fn
		     then desc_ptr = addr (select_info.user_item.rslt_desc (l));
		     else do;
			     user_item_ptr = select_info.user_item.item_ptr (l);
			     desc_ptr = addr (user_item.desc);
			end;

		     if ^mdbm_util_$string_data_class (desc_ptr) then
			ti.len (l) = linus_data_$buff_len;
		     else ti.len (l) =
			     fixed (descriptor.size.scale || descriptor.size.precision);
		     allocate target_item in (work_area) set (ti.ptr (l));
		     ti.ptr (l) -> target_item = "";
		end;

	     if select_info.user_item.item_type (l) = EXPR | select_info.set_fn
	     then do;				/* Evaluate expression */
		     if ^select_info.set_fn then
			call
			     linus_eval_expr (lcb_ptr,
			     select_info.user_item.item_ptr (l), destination_ptr, caller,
			     l, icode);
		     if icode ^= 0 then do;
			     code = icode;
			     return;
			end;
		     call
			assign_round_ (ti.ptr (l), target_type, ti.len (l),
			select_info.user_item.rslt_assn_ptr (l),
			select_info.user_item.rslt_assn_type (l),
			select_info.user_item.rslt_assn_len (l));
		end;
	     else do;
		     user_item_ptr = select_info.user_item.item_ptr (l);
						/* Init user_item structure */
		     call
			assign_round_ (ti.ptr (l), target_type, ti.len (l), user_item.arg_ptr,
			user_item.assn_type, user_item.assn_len);
		end;
	end;

/* get length of output buffer. allocate and fill it with target items */

	if out_buf_ptr = null then do;
		ob_len = 0;
		do l = 1 to select_info.n_user_items;
		     ob_len = ob_len + ti.len (l) + 2;
		end;

		allocate output_buffer in (work_area);
	     end;

	do l = 1 to select_info.n_user_items;
	     if called_by = linus_data_$create_list_id then
		ti.ptr (l) -> target_item =
		     ltrim (rtrim (ti.ptr (l) -> target_item));
	     len = length (ti.ptr (l) -> target_item);
	     if called_by = linus_data_$create_list_id then do;
		     record_info.field.field_len (l) = len;
		     record_info.field.field_ptr (l) =
			addr (output_buffer (n_bytes + 1));
		end;
	     else if called_by = linus_data_$report_id then do;
		     dec_3_ptr = addr (output_buffer (n_bytes + 1));
		     dec_3 = len;
		     n_bytes = n_bytes + 4;
		end;
	     n_bytes = n_bytes + 1;
	     substr (out_buffer, n_bytes, len) = ti.ptr (l) -> target_item;
	     n_bytes = n_bytes + len - 1;
	     if called_by = linus_data_$w_id then do;
		     n_bytes = n_bytes + 1;
		     output_buffer (n_bytes) = wcb_dm;
		end;
	end;

	if called_by = linus_data_$create_list_id then
	     call lister_$add_record (file_info_ptr, rec_info_ptr, code);
	else do;
		if called_by = linus_data_$w_id then do;
			n_bytes = n_bytes + 1;
			output_buffer (n_bytes) = NEWLINE;
		     end;
		call iox_$put_chars (iocb_ptr, out_buf_ptr, n_bytes, code);
	     end;
     end main_routine;

     end linus_output;

