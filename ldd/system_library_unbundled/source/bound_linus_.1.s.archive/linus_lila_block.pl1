/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-13,Dupuis), approve(86-01-13,MCR7188), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     84-12-28 Matthew Pierret: Changed to use linus_lila_tokens_ external
     variables instead of hard-coding reserved words into the code.
                                                   END HISTORY COMMENTS */


linus_lila_block:
     proc (lcb_ptr, lsh_ptr, td_ptr, mblk_ptr, code);

/* DESCRIPTION:

   This  procedure  is  the  top level procedure for the translation of a LILA
   block.   It  calls linus_lila_from, linus_lila_select, and linus_lila_where
   to  process  the  from,  select,  and where clauses respectively.  Then, if
   invoked  to  process  an outer block, it combines the translated clauses to
   form one mrds selection expression for the LILA block.  
   
   

   HISTORY:

   77-01-01 J.  A.  Weeldreyer: Initially written.

   78-02-01 J.  A.  Weeldreyer: Modified to properly locate from clause.

   78-08-01 J.  A.  Weeldreyer: Modified to properly handle row desig.  scope.
   
   80-04-13  Rickie  E.   Brinegar:  Modified  to  use  a work area defined on
   lcb.lila_area_ptr instead of getting system free area.

   80-12-03  Rickie  E.   Brinegar: sel_offset changed from ms_len_init + 3 to
   ms_len_init + 2.
   
   81-06-29 Rickie E. Brinegar: Modified to properly identify the from tokens
   correct place. This is in response to TR10068.
   
   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.
   
   83-06-06 Bertley G. Moberg: Added support for print_search_order and no_optimize

*/

%include linus_lcb;
%page;
%include linus_ls_block;
%page;
%include linus_ls_header;
%page;
%include linus_mrds_block;
%page;
%include linus_source;
%page;
%include linus_token_data;

	dcl     (
	        code,				/* Output:  status code */
	        icode,				/* internal status code */
	        cur_pos,				/* string index for from */
	        sel_offset,
	        sel_length,
	        sel_cur_pos,
	        where_cur_pos,			/* save index */
	        i,				/* internal string indexes */
	        j
	        )			 fixed bin (35);	/* length of error source line */

	dcl     hold_dflt_ri	 fixed bin;	/* save area for prev. default range item */

	dcl     rs_ptr		 ptr;

	dcl     temp_thd		 ptr;

	dcl     (
	        b_cnt,				/* bracket level count */
	        rs_len_init,			/* length of range string */
	        rs_nargs_init,			/* no. temp rels in range string */
	        ind,				/* internal indexes */
	        arg_ind
	        )			 fixed bin;

	dcl     (
	        found,				/* on if from found */
	        inner
	        )			 bit (1);		/* on if this is for inner block */

	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);

	dcl     1 sel_tok_data	 aligned like token_data;

	dcl     1 where_tok_data	 aligned like token_data;

	dcl     1 range_string	 aligned based (rs_ptr), /* temp holding area for inner block ranges */
		2 str_len		 fixed bin,
		2 nargs		 fixed bin,
		2 string		 char (rs_len_init refer (range_string.str_len)) var,
		2 arg_ptr		 (rs_nargs_init refer (range_string.nargs)) ptr,
		2 desc_ptr	 (rs_nargs_init refer (range_string.nargs)) ptr,
		2 thread		 ptr;

	dcl     BLOCK		 fixed bin int static options (constant) init (4);
	dcl     DELIMS		 char (7) int static options (constant) init ("{}()
	 ");

	dcl     (
	        linus_data_$max_pred_stack_size,
	        linus_data_$max_range_items,
	        linus_error_$no_from,
	        mrds_data_$max_select_items,
	        mrds_data_$max_token_size,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;
dcl (
linus_lila_tokens_$differ,
linus_lila_tokens_$from,
linus_lila_tokens_$inter,
linus_lila_tokens_$union,
linus_lila_tokens_$where
) char (32) varying ext;

	dcl     (addr, fixed, null, index, length, rel, search, substr) builtin;

	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_lila_from	 entry (ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_select	 entry (ptr, ptr, bit (1), ptr, fixed bin (35));
	dcl     linus_lila_where	 entry (ptr, ptr, bit (1), ptr, fixed bin (35));

	inner = "0"b;				/* initialize */
	lsb_ptr, mblk_ptr = null;

	if ls_header.cur_ptr -> ls_block.type = BLOCK then do; /* this is inner block */
		lsb_ptr = ls_header.cur_ptr;		/* point to block stack frame */
		inner = "1"b;			/* remember is inner block */
		hold_dflt_ri = ls_block.dflt_ritem;	/* save prev. default */
		ls_block.ib_level = ls_block.ib_level + 1;
	     end;					/* if inner */

	else do;					/* is outer, must setup block stack frame */
		allocate ls_block in (work_area);
		ls_block.nritems,			/* initialize */
		     ls_block.ib_level, ls_block.nrs_chars, ls_block.nselects,
		     ls_block.pred_pcnt, ls_block.nterms, ls_block.nrange_args,
		     ls_block.dflt_ritem, ls_block.nprops, ls_block.term_op,
		     ls_block.nterms = 0;
		ls_block.type = BLOCK;
		ls_block.leaf_ptr (1), ls_block.leaf_ptr (2), ls_block.fwd_ptr,
		     ls_block.rs_hd_ptr, ls_block.term_hd_ptr = null;
		ls_block.tup_var, ls_block.mrds_var, ls_block.rel_name,
		     ls_block.sel_items = "";
		ls_block.back_ptr = ls_header.cur_ptr;	/* thread into lila stack */
		ls_header.cur_ptr -> ls_block.fwd_ptr = lsb_ptr;
		ls_header.cur_ptr = lsb_ptr;
	     end;					/* if outer block */

	sel_tok_data = token_data;			/* save for select clause processing */
	token_data.key = NULL;
	sel_cur_pos, cur_pos = ls_header.cur_pos;	/* init for from search */
	found = "0"b;

	do while (^found & cur_pos < lcb.lila_chars);	/* search for "from" */
	     i = search (substr (source_str, cur_pos), "{}"); /* scan for brackets */
	     if i > 0 then /* if found */
		if source_array (cur_pos + i - 1) = "{" then do;
						/* if start of lower level */
			j = scan_from (cur_pos, i);	/* look for from before { */
			if j > 0 then do;		/* found it */
				found = "1"b;
				cur_pos = cur_pos + j - 1; /* position to "f" */
			     end;			/* if found before { */
			else do;			/* if not found before { */
				b_cnt = 1;	/* init. bracket level count */
				do while (b_cnt > 0 & lcb.lila_chars > cur_pos);
						/* search for end of lower level */
				     cur_pos = cur_pos + i; /* first beyond { */
				     i = search (substr (source_str, cur_pos), "{}");
						/* look for brackets */
				     if i > 0 then do; /* if bracket found */
					     if source_array (cur_pos + i + 1) = "{" then
						b_cnt = b_cnt + 1;
					     else b_cnt = b_cnt - 1; /* adjust bracket count */
					     cur_pos = cur_pos + i; /* first beyond bracket */
					end;	/* if bracket found */
				     else cur_pos = lcb.lila_chars; /* bracket not found, set to end of source */
				end;		/* scan past inner blocks */
			     end;			/* if not found before { */
		     end;				/* if found { */
		else call final_scan (i);		/* if found }, must find from before */
	     else do;				/* found no bracket, look through rest of string for from */
		     i = lcb.lila_chars - cur_pos + 1;
		     call final_scan (i);
		end;				/* no brackets */
	end;					/* search loop */

	if ^found then /* didnt find from */
	     call linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$no_from, "");
	else do;					/* from was found, process from clause */
		ls_header.cur_pos = cur_pos;
		call linus_lila_from (lcb_ptr, lsh_ptr, td_ptr, icode);
		if icode ^= 0 then
		     call linus_lila_error (lcb_ptr, lsh_ptr, icode, "");
		where_tok_data = token_data;		/* save for start of where */
		where_cur_pos = ls_header.cur_pos;
	     end;					/* if from found */

	token_data = sel_tok_data;			/* set for processing select clause */
	ls_header.cur_pos = sel_cur_pos;
	call linus_lila_select (lcb_ptr, lsh_ptr, inner, td_ptr, icode);
	if icode ^= 0 then
	     call linus_lila_error (lcb_ptr, lsh_ptr, icode, "");

	if found then do;				/* if we proc. from clause, load tok. data for where */
		token_data = where_tok_data;
		ls_header.cur_pos = where_cur_pos;
	     end;					/* if had from clause */
	if token_data.key = WHERE then do;		/* if have where clause */
		call linus_lila_where (lcb_ptr, lsh_ptr, inner, td_ptr, icode);
		if icode ^= 0 then
		     call linus_lila_error (lcb_ptr, lsh_ptr, icode, "");
	     end;					/* if where clause exists */

	rs_nargs_init,				/* init. for stringing range for current block */
	     rs_len_init = 0;
	do i = ls_block.nritems by -1 to 1
	     while (ls_block.range_items.level (i) >= ls_block.ib_level);
						/* only for current block */
	     rs_len_init =
		rs_len_init + 4 + length (ls_block.range_items.mrds_var (i))
		+ length (ls_block.range_items.rel_name (i));
	     if ls_block.range_items.arg_ptr (i) ^= null then
		rs_nargs_init = rs_nargs_init + 1;
	end;
	if ls_block.ib_level = 0 then
	     ind = 1;
	else ind = i + 1;

	allocate range_string in (work_area);		/* bild the range string */
	range_string.thread = ls_block.rs_hd_ptr;	/* thread it in */
	ls_block.rs_hd_ptr = rs_ptr;
	range_string.string = "";
	arg_ind = 0;
	do i = ind to ls_block.nritems;		/* add each item to stirng */
	     range_string.string =
		range_string.string || "(" || ls_block.range_items.mrds_var (i)
		|| " " || ls_block.range_items.rel_name (i) || ") ";
	     if ls_block.range_items.arg_ptr (i) ^= null then do;
						/* if temp rel */
		     arg_ind = arg_ind + 1;
		     range_string.arg_ptr (arg_ind) = ls_block.range_items.arg_ptr (i);
		     range_string.desc_ptr (arg_ind) = ls_block.range_items.desc_ptr (i);
		end;
	end;					/* adding items to string */

	ls_block.nritems = ind - 1;			/* reset counters */
	ls_block.nrs_chars = ls_block.nrs_chars + rs_len_init;
	ls_block.ib_level = ls_block.ib_level - 1;

	if ^inner then do;				/* if outer block, put together mrds block */
		ms_len_init = ls_block.nrs_chars + 7;	/* calc. length of full mrds block */
		if lcb.pso_flag then ms_len_init = ms_len_init + 5; /* for "-pso " */
		if lcb.no_ot_flag then ms_len_init = ms_len_init + 7; /* for "-no_ot " */
		ms_len_init = ms_len_init + 12;	/* for -select and opt. -dup */
		sel_offset = ms_len_init + 2;		/* char index of first select term */
		do i = 1 to ls_block.nselects;	/* calc len. of select clause */
		     ms_len_init = ms_len_init + length (ls_block.sel_items (i)) + 2;
		end;
		sel_length = ms_len_init - sel_offset + 2;
		if ls_block.nterms = 1 then do;	/* if have pred. */
			ms_len_init =
			     ms_len_init + 8
			     + length (ls_block.term_hd_ptr -> mrds_block.mrds_string);
			nval_args_init =
			     ls_block.nrange_args
			     + ls_block.term_hd_ptr -> mrds_block.nval_args;
		     end;
		else nval_args_init = ls_block.nrange_args;

		allocate mrds_block in (work_area);	/* space for full mrds block */
		arg_ind = 0;
		mrds_block.fwd_ptr = null;
		mrds_block.sel_offset = sel_offset;
		mrds_block.sel_length = sel_length;
		mrds_block.mrds_string = "-range ";	/* build the whole block */
		if lcb.pso_flag then mrds_block.mrds_string = mrds_block.mrds_string || "-pso ";
		if lcb.no_ot_flag then mrds_block.mrds_string = mrds_block.mrds_string || "-no_ot ";
		do rs_ptr = ls_block.rs_hd_ptr repeat temp_thd while (rs_ptr ^= null);
						/* pick up range strings */
		     do i = 1 to range_string.nargs;
			mrds_block.val_args.arg_ptr (i + arg_ind) =
			     range_string.arg_ptr (i);
			mrds_block.val_args.desc_ptr (i + arg_ind) =
			     range_string.desc_ptr (i);
		     end;
		     arg_ind = arg_ind + range_string.nargs;
		     mrds_block.mrds_string =
			mrds_block.mrds_string || range_string.string;
		     temp_thd = range_string.thread;
		     rs_ptr = null;
		end;				/* adding range */
		mrds_block.mrds_string = mrds_block.mrds_string || "-select     ";
		do i = 1 to ls_block.nselects;
		     mrds_block.mrds_string =
			mrds_block.mrds_string || " " || ls_block.sel_items (i) || " ";
		end;
		if ls_block.nterms = 1 then do;	/* if have pred */
			i = ls_block.nrange_args;
			mrds_block.mrds_string =
			     mrds_block.mrds_string || " -where "
			     || ls_block.term_hd_ptr -> mrds_block.mrds_string;
			do j = i + 1 to ls_block.term_hd_ptr -> mrds_block.nval_args + i;
			     mrds_block.val_args.arg_ptr (j) =
				ls_block.term_hd_ptr -> mrds_block.val_args.arg_ptr (j - i);
			     mrds_block.val_args.desc_ptr (j) =
				ls_block.term_hd_ptr -> mrds_block.val_args.desc_ptr (j - i);
			end;
			ls_block.term_hd_ptr = null;	/* don't need this mrds_block */
		     end;				/* if had pred */
		ls_block.back_ptr -> ls_block.fwd_ptr = null; /* unthread and free block stack frame */
		ls_header.cur_ptr = ls_block.back_ptr;
		lsb_ptr = null;
	     end;					/* if outer block */
	else ls_block.dflt_ritem = hold_dflt_ri;	/* restore prev. default if inner block */

	code = 0;					/* made it */

exit:
	return;

scan_from:
     proc (start, len) returns (fixed bin (35));

/* Procedure to dcan for from which precedes select and where in given sub string */

	dcl     (from_pos, i, start, len) fixed bin (35);

	from_pos = scan_kwd (linus_lila_tokens_$from);			/* look for a from */
	if from_pos > 0 then do;			/* if found */
		i = scan_kwd (linus_lila_tokens_$where);		/* look for where */
		if i > 0 then
		     if from_pos > i then
			from_pos = 0;		/* from must precede where */
		i = scan_kwd (linus_lila_tokens_$inter);
		if i > 0 then
		     if from_pos > i then
			from_pos = 0;		/* must also precede inter */
		i = scan_kwd (linus_lila_tokens_$differ);
		if i > 0 then
		     if from_pos > i then
			from_pos = 0;		/* must also precede differ */
		i = scan_kwd (linus_lila_tokens_$union);
		if i > 0 then
		     if from_pos > i then
			from_pos = 0;		/* must also precede union */
	     end;					/* if from found */

	return (from_pos);

scan_kwd:
     proc (kwd) returns (fixed bin (35));

/* Procedure to find isolated occurence of specified string */

	dcl     kwd		 char (*) varying;
	dcl     (i, j, klen)	 fixed bin (35);

	found = "0"b;				/* init */
	klen = length (kwd);
	i = start;

	do while (i < start + len - 1 & ^found);
	     j = index (substr (source_str, i, start + len - i), kwd);
						/* look for kwd */
	     if j > 0 then /* if key word string found */
		if index (DELIMS, source_array (i + j - 2)) ^= 0
		     /* must be prec. and followed by delimiters */
		     & index (DELIMS, source_array (i + j + klen - 1)) ^= 0 then do;
			if i ^= start then
			     j = i - start + j;
			found = "1"b;
		     end;
		else i = i + j;			/* keep looking */
	     else i = start + len;			/* not there, get out of loop */
	end;					/* search loop */
	if ^found then
	     j = 0;

	return (j);

     end scan_kwd;

     end scan_from;

final_scan:
     proc (len);

/* Procedure to scan final part of string */

	dcl     (len, i)		 fixed bin (35);

	i = scan_from (cur_pos, len);
	if i <= 0 then
	     cur_pos = lcb.lila_chars;		/* get out of loop */
	else do;					/* found it */
		cur_pos = cur_pos + i - 1;
		found = "1"b;
	     end;

     end final_scan;

     end linus_lila_block;
