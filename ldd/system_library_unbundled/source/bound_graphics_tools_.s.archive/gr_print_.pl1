/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

gr_print_: proc (charstring);

/* Written long, long ago, in a galaxy far, far away, by C. D. Tavares */
/* Last modified 08/29/80 by CDT to un-reverse blinking and sensitivity */

dcl  charstring char (*) parameter;

dcl  len fixed bin;

%include graphic_code_dcl;

dcl (i, j) fixed bin,
     prefix_length fixed bin initial (0),
    (index, length, substr, string, abs) builtin,
     ch char (1) aligned,
     ioa_$nnl ext entry options (variable),
     ioa_ ext entry options (variable);

dcl (xyz (3), float_array (6)) float bin,
     node fixed bin (18),
     just_ended bit (1) aligned,
     fixed_array (3) fixed bin,
     temp char (16) aligned,
     off_on (0:1) char (4) aligned initial ("off ", "on  ") static,
     Query_type (3) char (8) aligned static initial ("where", "which", "what"),
     Alignments (9) char (16) static initial
    ("upper left",
     "upper center",
     "upper right",
     "left",
     "center",
     "right",
     "lower left",
     "lower center",
     "lower right"),
     Graphic_names (5) char (12) static initial
    ("setposition", "setpoint", "vector", "shift", "point"),
     Input_device (0:63) static char (12) initial
    ("processor", "keyboard", "mouse", "joystick", "pen/tablet",
     "lightpen", "trackball", (56) (1) "undefined", "any device"),
     Line_Types (0 : 4) char (12) aligned static initial ("solid", "dashed", "dotted", "dash-dotted", "long-dashed");

dcl (graphic_code_util_$decode_spi,
     graphic_code_util_$decode_dpi) ext entry (pointer, fixed bin, fixed bin dimension (*)),
     graphic_code_util_$decode_uid ext entry (pointer, fixed bin, fixed bin (18) dimension (*)),
     graphic_code_util_$decode_scl ext entry (pointer, fixed bin, float bin dimension (*));

dcl  charstring_array (len) char (1) unaligned based (addr (charstring));


	len = length (charstring);

	call ioa_ ("");
	just_ended = "1"b;

	do i = 1 by 1 while (i <= len);

	     ch = substr (charstring, i, 1);
	     j = index (string (Graphic_Code_Structure.Dynamic_and_structural_effectors), ch);
	     if j > 0 then goto Dyn_Struc (j);

	     j = index (string (Graphic_Code_Structure.Graphic_effectors), ch);
	     if j > 0 then do;
		call get_xyz;
		call ioa_ ("^vx^12a ^9.3f ^9.3f ^9.3f", prefix_length, Graphic_names (j), xyz (1), xyz (2), xyz (3));
		goto loopend;
	     end;

	     j = index (string (Graphic_Code_Structure.Mapping_effectors), ch);
	     if j > 0 then goto Mapping (j);

	     j = index (string (Graphic_Code_Structure.Mode_effectors), ch);
	     if j > 0 then goto Mode (j);

	     j = index (string (Graphic_Code_Structure.Special_effectors), ch);
	     if j > 0 then goto Special (j);

	     call ioa_ ("^vxNON-GRAPHIC: ^a", prefix_length, ch);
	     goto loopend;


Dyn_Struc (1): call ioa_ ("pause");
	     goto loopend;

Dyn_Struc (2): call ioa_ ("reference ^o", get_uid ());
	     goto loopend;

Dyn_Struc (3): node = get_uid ();
	     call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 1, fixed_array);
	     call graphic_code_util_$decode_scl (addr (charstring_array (i + 3)), 1, float_array);
	     i = i + 5;
	     call ioa_$nnl ("increment  ^o  ^d times, ^8.4f second delay^/	by: ", node, fixed_array (1), float_array (1));
	     goto loopend;

Dyn_Struc (4): node = get_uid ();
	     call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 1, fixed_array);
	     i = i + 2;
	     call ioa_ ("alter  ^o element ^d to ^o", node, fixed_array (1), get_uid ());
	     goto loopend;

Dyn_Struc (5): i = i + 1;
	     if substr (charstring, i, 1) = List_char then temp = "list";
	     else temp = "array";
	     if just_ended then call ioa_ ("^vxnode_begin ^5a ^o", prefix_length, temp, get_uid ());
	     else call ioa_ ("^/^vxnode_begin ^5a ^o", prefix_length, temp, get_uid ());
	     prefix_length = prefix_length + 5;
	     goto loopend;

Dyn_Struc (6): prefix_length = max (0, prefix_length - 5);
	     call ioa_ ("^vxnode_end^/", prefix_length);
	     just_ended = "1"b;
	     goto loopend_no_reset;

Dyn_Struc (7): call ioa_ ("^vxcontrol ^o", prefix_length, get_uid ());
	     goto loopend;

Dyn_Struc (8): call ioa_ ("display  ^o", get_uid ());
	     goto loopend;

Dyn_Struc (9): call graphic_code_util_$decode_spi (addr (charstring_array (i + 1)), 2, fixed_array);
	     i = i + 2;
	     call ioa_ ("query  ^a from ^a", Query_type (fixed_array (1)), Input_device (fixed_array (2)));
	     goto loopend;

Dyn_Struc (10): call ioa_ ("erase");
	     goto loopend;

Dyn_Struc (11): call ioa_ ("synchronize");
	     goto loopend;

Dyn_Struc (12): call ioa_ ("delete ^o", get_uid ());
	     goto loopend;


Mapping (1):   call get_xyz;
	     call ioa_ ("^vxscaling   ^9.3f ^9.3f ^9.3f", prefix_length, xyz (1), xyz (2), xyz (3));
	     goto loopend;

Mapping (2):   call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 3, fixed_array);
	     call ioa_ ("^vxrotation  ^3d ^3d ^3d", prefix_length, fixed_array (1), fixed_array (2), fixed_array (3));
	     i = i + 6;
	     goto loopend;

Mapping (3):   call graphic_code_util_$decode_scl (addr (charstring_array (i + 1)), 6, float_array);
	     call ioa_ ("^vxclipping  ^9.3f ^9.3f (x)^/^vx^10x^9.3f ^9.3f (y)^/^vx^10x^9.3f ^9.3f (z)",
		prefix_length, float_array (1), float_array (2), prefix_length, float_array (3), float_array (4),
		prefix_length, float_array (5), float_array (6));

	     i = i + 12;
	     goto loopend;


Mode (1):	     call ioa_ ("^vxintensity ^d", prefix_length, get_spi ());
	     goto loopend;

Mode (2):	     call ioa_ ("^vxline_type ^a", prefix_length, Line_Types (get_spi ()));
	     goto loopend;

Mode (3):	     call ioa_ ("^vxsensitivity ^a", prefix_length, off_on (get_spi ()));
	     goto loopend;

Mode (4):	     call ioa_ ("^vxblinking ^a", prefix_length, off_on (get_spi ()));
	     goto loopend;

Mode (5):	     call graphic_code_util_$decode_spi (addr (charstring_array (i + 1)), 3, fixed_array);
	     i = i + 3;
	     call ioa_ ("^vxcolor   ^d red  ^d green  ^d blue",
		prefix_length, fixed_array (1), fixed_array (2), fixed_array (3));
	     goto loopend;


Special (1):   call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 1, fixed_array);
	     i = i + 2;
	     call ioa_ ("^vxsymbol  ""^a""", prefix_length, substr (charstring, i+1, fixed_array (1)));
	     i = i + fixed_array (1);
	     goto loopend;

Special (2):   call graphic_code_util_$decode_spi (addr (charstring_array (i + 1)), 1, fixed_array);
	     temp = Alignments (fixed_array (1));
	     i = i + 1;
	     call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 1, fixed_array);
	     i = i + 2;
	     call ioa_ ("^vxtext  (by ^a) ""^a""", prefix_length, temp, substr (charstring, i+1, fixed_array (1)));
	     i = i + fixed_array (1);
	     goto loopend;

Special (3):   call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 1, fixed_array);
	     i = i + 2;
	     call ioa_ ("^vxdatablock", prefix_length);
	     i = i + divide (fixed_array (1) + 5, 6, 17, 0);
	     goto loopend;


loopend:
	     just_ended = ""b;

loopend_no_reset:
	end;

	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

get_uid:	proc returns (fixed bin (18));

dcl  uid fixed bin (18) dimension (1);

	     call graphic_code_util_$decode_uid (addr (charstring_array (i + 1)), 1, uid);
	     i = i + 3;
	     return (uid (1));
	end get_uid;

get_xyz:	proc;

dcl  k fixed bin;

	     call graphic_code_util_$decode_scl (addr (charstring_array (i + 1)), 3, xyz);
	     i = i + 9;

	     do k = 1 to 3;
		if abs (xyz (k)) <= 1e-6 then xyz (k) = 0e0;
	     end;

	     return;
	end get_xyz;

get_spi:	proc returns (fixed bin);

dcl  spi fixed bin dimension (1);

	     call graphic_code_util_$decode_spi (addr (charstring_array (i + 1)), 1, spi);
	     i = i + 1;
	     return (spi (1));
	end get_spi;

     end gr_print_;
