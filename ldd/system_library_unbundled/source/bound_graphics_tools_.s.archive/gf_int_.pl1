/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


gf_int_attach: proc (iocb_ptr, option_array, com_err_sw, code);

/* IOX version of gf_int_ IO module.
   This IO module is a "wrapper" for the gr_print_ subroutine.  It can be used to
   catch graphic code written down some switch.  It causes an "english" interpretation of
   the graphic code contents to be printed out to user_output.
   Converted to IOX 03/31/75 by C. D. Tavares */

dcl  iocb_ptr pointer parameter,
     option_array char (*) dimension (*) varying parameter,
     com_err_sw bit (1) aligned parameter,
     code fixed bin (35) parameter;

dcl (error_table_$invalid_device,
     error_table_$not_detached,
     error_table_$bad_mode,
     error_table_$noarg) fixed bin (35) external;

%include iocbv;

dcl 1 switch_data_block aligned based (iocb.attach_descrip_ptr),
    2 attach_description char (64) varying,
    2 open_description char (64) varying;

dcl  get_system_free_area_ ext entry returns (ptr),
     free_ptr pointer static initial (null),
     sys_area area based (free_ptr);

dcl  com_err_ ext entry options (variable),
     explanation char (64);

dcl (null, length, substr, addr, hbound, char) builtin;

	if iocb.attach_descrip_ptr ^= null then do;	/* switch already attached */
	     code = error_table_$not_detached;		/* complain */
	     explanation = "";
	     goto attach_error;
	end;

	if hbound (option_array, 1) ^= 1 then do;
	     code = error_table_$noarg;
	     explanation = "Wanted 1 arg, got " || char (hbound (option_array, 1));
	     goto attach_error;
	end;

	if option_array (1) ^= "user_output" then do;
	     code = error_table_$invalid_device;
	     explanation = "This module restricted to use over user_output.";
	     goto attach_error;
	end;

	if free_ptr = null then free_ptr = get_system_free_area_ ();

	allocate switch_data_block in (sys_area) set (iocb.attach_descrip_ptr);

	switch_data_block.attach_description = "gf_int_ " || option_array (1);
	iocb.open = gf_int_open;
	iocb.detach_iocb = gf_int_detach;

	call iox_$propagate (iocb_ptr);

	return;

attach_error:
	if com_err_sw then call com_err_ (code, "gf_int_", explanation);
	return;

gf_int_open: entry (iocb_ptr, mode, append, code);

dcl  mode fixed bin parameter,
     append bit (1) aligned parameter;

%include iox_modes;

dcl  iox_$propagate ext entry (pointer);

	if mode ^= Stream_output then do;
	     code = error_table_$bad_mode;
	     return;
	end;

	actual_iocb_ptr -> iocb.put_chars = gf_int_write;

	open_description = "stream_output";
	iocb.open_descrip_ptr = addr (open_description);

	iocb.close = gf_int_close;

	call iox_$propagate (actual_iocb_ptr);
	code = 0;
	return;

gf_int_close: entry (iocb_ptr, code);

	actual_iocb_ptr -> iocb.open = gf_int_open;
	actual_iocb_ptr -> iocb.detach_iocb = gf_int_detach;
	actual_iocb_ptr -> iocb.open_descrip_ptr = null;

	call iox_$propagate (actual_iocb_ptr);
	code = 0;
	return;


gf_int_detach: entry (iocb_ptr, code);

	free iocb.attach_descrip_ptr -> switch_data_block in (sys_area);
	iocb.attach_descrip_ptr = null;

	call iox_$propagate (iocb_ptr);

	code = 0;
	return;

gf_int_write: entry (iocb_ptr, wksp, nelem, code);

dcl  nelem fixed bin (21) parameter,
     wksp pointer parameter;

dcl  charstring char (nelem) based (wksp),
     gr_print_ external entry (char (*));

	call gr_print_ (charstring);
	code = 0;
	return;

gf_int_module: entry (aa, ab, ac, ad, stat, ae);

dcl (aa, ab, ac, ad, ae) fixed bin,
     stat bit (72) aligned;

dcl  error_table_$not_attached ext bit (36) aligned static;

	call com_err_ (0, "gf_int_", "This I/O module is now an iox_-type module.
     Use iox_$attach and iox_$open, or io attach and io open.");

	stat = error_table_$not_attached;
	substr (stat, 54, 1) = "1"b;			/* transaction aborted */
	substr (stat, 52, 1) = "1"b;			/* detached */
	return;

     end gf_int_attach;
