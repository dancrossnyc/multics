/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_input_file_list_: proc (fn)returns (bit (1));

/* Obtain list of names from input file "fn[.gfms]".
   File contains list of gcos catalog/file
   descriptions optionally preceeded by "^" (not)
   character indicating file is not o be selected.
   Return "1"b if failure occurs.

   Author: Dave Ward	10/19/80
*/
dcl  fn                       char(*)parm;
	call expand_pathname_$add_suffix (
	     fn					/* (input) pathanme. */
	     , "gfms"				/* (input) suffix name. */
	     , dir				/* (output) directory. */
	     , ent				/* (output) entry name. */
	     , code				/* (output) eror code. */
	     );
	if code ^= 0 then do;
	     call com_err_ (
		code
		, "gfms_input_file_list_"
		, "Could not expand ""^a"""
		, fn
		);
	     return ("1"b);				/* Failed. */
	end;

	call hcs_$initiate_count (			/* Obtain input file. */
	     dir					/* (input) directory name. */
	     , ent				/* (input) entry name. */
	     , ""					/* (input) null reference name. */
	     , bc					/* (output) file's bit count. */
	     , 1					/* (input) not a copy. */
	     , fp					/* (output) pointer to input file. */
	     , code				/* (output) status code. */
	     );
	if fp = null () then do;
	     call com_err_ (
		code
		, "gfms_input_file_list_"
		, "Input file ""^a>^a"""
		, dir
		, ent
		);
	     return ("1"b);				/* Failed. */
	end;

/* Process names from input file. */
	il = divide (bc+8, 9, 24);
	nc = 1;
dcl f bit(1)init("0"b);
	do while (nc <= il);
	     k = index (substr (is, nc), NL);
	     if k = 0 then nc = il-nc+2;
	     if k>1 then do;			/* Non-null line. */
		n = "0"b;				/* => no "^". */
		if k>2 then do;
		     if substr (is, nc, 1) = "^" then do;
			n = "1"b;			/* => "^"file. */
			nc = nc+1;
			k = k-1;
		     end;
		end;
		if gfms_file_name_ (n, substr (is, nc, k-1)) then f = "1"b;
	     end;
	     nc = nc+k;
	end;
	return (f);
%page;
/*   Variables for gfms_input_file_list_:		*/
/*   IDENTIFIER		ATTRIBUTES	*/
dcl  bc                       fixed bin(24);
dcl  code                     fixed bin(35);
dcl  com_err_                 entry() options(variable);
dcl  dir                      char(168);
dcl  ent                      char(32);
dcl  expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  fp                       ptr;
dcl  gfms_file_name_          entry (bit(1), char(*)) returns(bit(1));
dcl  hcs_$initiate_count      entry (char(*), char(*), char(*), fixed bin(24), fixed bin(2), ptr, fixed bin(35));
dcl  il                       fixed bin;
dcl  ioa_                     entry() options(variable);
dcl  is                       char(il)aligned based(fp);
dcl  k                        fixed bin;
dcl  n                        bit(1);
dcl  nc                       fixed bin(24);

dcl  NL                       char(1)static int options(constant)init("
");
%page;
%include gfms_do_files;
%page;
%include gfms_ext;
     end gfms_input_file_list_;
