/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_calling_sequence_: proc;

/* Print the input arguments (strings) on error_output
   stream with the following considerations:
   strings containing "|" are justified
   and information after the "|" are folded under this
   character, e.g.,
   abc | stuff xxx
   d   | more stuff

   Author: Dave Ward	02/02/81
   Change: Dave Ward	02/03/81 fold lines not containing |.
   Change: Scott C. Akers	02/08/82 Change name from print_calling_sequence_ to
			gfms_calling_sequence_ for binding into bound_gfms.
*/
	ll = get_line_length_$stream ("error_output", code);
	call cu_$arg_count (na);
	mm = 0;					/* Set initial max m. */

/* Obtain parameter information. */
	do i = 1 to na while (i <= hbound (a, 1));
	     call cu_$arg_ptr (i, p (i), l (i), code);
	     if code ^= 0 then do;
		call com_err_ (
		     code
		     , "gfms_calling_sequence_"
		     , "Arg ^i"
		     , i
		     );
		return;
	     end;

/* Measure for | location. */
	     m (i) = index (argi, "|");
	     mm = max (mm, m (i));
	end;

/* Print the strings. */
	do i = 1 to (i-1);
	     if (m (i) = 0) | (mm > (ll-5)) then do;	/* Either no |, or | too far to the right (a Reagen bar). */
		if length (argi) <= ll then		/* Not more than ll characters to print. */
		     call out (argi);
		else				/* More than ll characters to print. */
		call fold (argi);
	     end;
	     else do;				/* String contains |. */
		call out (substr (argi, 1, m (i)-1));
		if m (i)<mm then
		     call out (substr ((100)" ", 1, mm-m (i)));
		call out (" |");
		if l (i)>m (i) then			/* There are characters after the |. */
		     call pr_rest (after_bar);
	     end;
	     call out (NL);
	end;
fail:	;
	return;
%page;
fold:	proc (s);

/* Output ll characters, break on space, fold remainder.
*/
dcl  s                        char(*)parm;
	     if length (s) <= ll then do;
		call out (s);
		return;
	     end;
	     k = index (reverse (substr (s, 1, ll)), " ");
	     if k>0 then do;
		l = length (rtrim (substr (s, 1, ll-k)));
		if l>0 then do;
		     call out (substr (s, 1, l));
		     call out (NL);
		end;
		l = ll - (k-1) + 1;			/* Location 1st character of remainder. */
		if (length (s)-l+1)>ll then
		     call fold (substr (s, l));
		else do;				/* Right justify final piece. */
		     call out (substr ((100)" ", 1, ll- (length (s)-l+1)));
		     call out (substr (s, l));
		end;
		return;
	     end;

/* No blanks in string. */
	     call out (substr (s, 1, ll));
	     call out (NL);
	     call fold (substr (s, ll+1));
	     return;
dcl  k                        fixed bin;
dcl  l                        fixed bin;
	end fold;
%page;
out:	proc (s);

/* Print string "s". */
dcl  s                        char(*)parm;
	     call iox_$put_chars (
		iox_$error_output
		, addr (s)
		, length (s)
		, code
		);
	     if code ^= 0 then do;
		call com_err_ (
		     code
		     , "gfms_calling_sequence_"
		     , "String ""^a"""
		     , s
		     );
		goto fail;
	     end;
	     return;
	end out;
%page;
pr_rest:	proc (s);

/* Print the string "s" as the rest of the string
   after |.
*/
dcl  s                        char(*)parm;
	     call out (" ");
	     l = ll-mm-2;				/* Print characters available. */
	     pl = length (s);
	     if pl <= l then do;			/* Not more than ll characters to print. */
		call out (s);
		return;
	     end;

/* More than ll characters,
   print up to ll characters on this line
   and fold the remainder.
*/
	     k = index (reverse (substr (s, 1, l)), " ");
	     if k = 0 then do;			/* No space found. */
		call out (substr (s, 1, l));
		fc = l+1;
		ln = pl-l;
		if ln<1 then return;
	     end;
	     else do;				/* Print up to space. */
		call out (rtrim (substr (s, 1, l- (k-1))));
		fc = l-k+2;
		ln = pl-fc+1;
		if ln<1 then return;
	     end;
	     call out (NL);
	     call out (substr ((100)" ", 1, mm-1));
	     call out (" |");
	     call pr_rest (substr (s, fc, ln));
	     return;
dcl  fc                       fixed bin;
dcl  k                        fixed bin;
dcl  l                        fixed bin;
dcl  ln                       fixed bin;
dcl  pl                       fixed bin;
	end pr_rest;
%page;
/*   Variables for gfms_calling_sequence_:	 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  after_bar                char(l(i)-m(i))unal based(addr(ari(m(i)+1)))	/* i-th argument, characters after |. */;
dcl  argi                     char(l(i))unal based(p(i))	/* i-th argument, character string. */;
dcl  ari                      (l(i))char(1)unal based(p(i))	/* i-th argument, array of characters. */;
dcl  code                     fixed bin(35);
dcl  com_err_                 entry() options(variable);
dcl  cu_$arg_count            entry (fixed bin);
dcl  cu_$arg_ptr              entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  get_line_length_$stream  entry (char(*), fixed bin(35)) returns(fixed bin);
dcl  hbound                   builtin;
dcl  i                        fixed bin;
dcl  index                    builtin;
dcl  iox_$error_output        ptr ext static;
dcl  iox_$put_chars           entry (ptr, ptr, fixed bin(21), fixed bin(35));
dcl  ll                       fixed bin;
dcl  max                      builtin;
dcl  min                      builtin;
dcl  mm                       fixed bin;
dcl  na                       fixed bin;
dcl  reverse                  builtin;
dcl  substr                   builtin;

dcl  NL                       char(1)static int options(constant)init("
");

dcl 1 a	(1000)aligned
,     2 p ptr
,     2 l fixed bin(21)
,     2 m fixed bin
;
     end gfms_calling_sequence_;
