/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_header_label_: proc;

/* Process the tape header label.

   Author: Dave Ward	10/17/80
   Change: Dave Ward	01/27/81 signal gfms_return if attach fails.
   Change: Dave Ward	02/23/82 completed tape density algorithm (modeled after read_tape_and_query)
   Change: Ron Barstad        84-11-21 fixed subsequent tape density checking and reel sequence check
*/
	close, detach = "0"b;			/* Assume failure. */
	call attach;
	detach = "1"b;				/* detach allowed, attach completed. */
	call open;
	close = "1"b;				/* close allowed, open completed. */
	call get_density ();
	call iox_$read_record (
	     cbp					/* (input) pointer to control block. */
	     , addr (tape_label)			/* (input) record buffer. */
	     , size (tape_label)*4			/* (input) buffer length in bytes. */
	     , nbr				/* (output) number of bytes read. */
	     , code				/* (output) I/O system status. */
	     );
	if code ^= 0 then do;
	     call com_err_ (
		code
		, "gfms_header_label_"
		, "Attempting to read tape header label file."
		||"^/Tape status ^4.3b"
		||"^/buffer length ^i (bytes)."
		||"^/bytes read ^i."
		||"^/attach description ""^a"""
		, gfms_tape_status_ (cbp)
		, size (tape_label)*4
		, nbr
		, attach_description
		);
fail:	     ;
	     call gfms_dump_rec_ (
		addr (tape_label)
		, divide (nbr+3, 4, 17)
		);
	     signal cond (gfms_fail);
	end;

	if label_identifier ^= GE__600_BTL_ then do;
	     call com_err_ (
		0
		, "gfms_header_label_"
		, "Label identifier ""^12a"" not ""GE  600 BTL """
		, gfms_ascii_ ((label_identifier))
		);
	     goto fail;
	end;

	prn = gfms_ascii_ ((prverr));			/* Previous reel number in error. */
	reel_serial = gfms_ascii_ ((reel_serial_number));
	file_serial = gfms_ascii_ ((file_serial_number));
	reel_sequence = gfms_ascii_ ((reel_sequence_number));

	if file_serial_num = " " then do;		/* Initialize saved label information. */
	     reel_serial_num = reel_serial;
	     file_serial_num = file_serial;
	     reel_sequence_num = (6)"0";
	end;
	call validate_label;

	call ioa ("^|HEADER LABEL INFORMATION:");
	call ioa ("label_identifier^6(.^) ""GE  600 BTL """);
	call ioa ("installation_id^7(.^) ^a", gfms_ascii_ ((installation_id)));
	call ioa ("reel_serial_number^4(.^) ^a", reel_serial);
	call ioa ("file_serial_number^4(.^) ^a", file_serial);
	call ioa ("reel_sequence_number^2(.^) ^a", reel_sequence);
	string (yyddd) = gfms_ascii_ ((creation_date));
	call ioa ("creation_date^9(.^)  year "||year||"  day-of-year "||day_of_year);
	call ioa ("retention_days^8(.^) ^a", gfms_ascii_ ((retention_days)));
	call ioa ("file_name^13(.^) ^a", gfms_ascii_ ((file_name)));
	call ioa ("user_info^13(.^) ^a", gfms_ascii_ ((user_info)));
	call ioa ("prverr^16(.^) ^a", prn);

/* Position to the file after the label file. */
	call iox_$control (
	     cbp					/* (input) pointer to I/O switch. */
	     , "forward_file"			/* (input) control order. */
	     , null ()				/* (input) NOT USED FOR THIS ORDER. */
	     , code				/* (output) I/O status code. */
	     );
	if code ^= 0 then do;
	     call com_err_ (
		code
		, "gfms"
		, "positioning to file after header label. description^/^c"
		, attach_description
		);
	     goto fail;
	end;
	return;
%page;
attach:	proc;

/* Attach I/O switch "gfms_input" to I/O module tape_nstd_.
*/
	     call iox_$attach_name (
		"gfms_input"			/* (input) I/O switch name. */
		, cbp				/* (output) pointer to switch's control block. */
		, attach_description		/* (input) attach description. */
		, null ()				/* (input) usual search rules to find tape_nstd_. */
		, code				/* (output) I/O system status code. */
		);
	     if code = 0 then return;
	     call com_err_ (
		code
		, "gfms"
		, "attaching with description^/^a"
		, attach_description
		);
	     signal cond (gfms_return);

dcl  code                     fixed bin(35);
dcl  iox_$attach_name         entry (char(*), ptr, char(*), ptr, fixed bin(35));
dcl  null                     builtin;
	end attach;
%page;
get_density: proc;

/* Determine the density of the input tape
   by successively trying tape densities until
   successful.
   If failure report, close and detach.
*/
	     ad = "";
	     do i = ftd to ltd;
		ad = ad||tape_densities (i);
		call iox_$control (
		     cbp				/* (input) pointer to I/O switch. */
		     , "d"||tape_densities (i)	/* (input) set tape density control order. */
		     , null ()			/* (input) NOT USED FOR THIS ORDER. */
		     , code			/* (output) I/O status code. */
		     );
		if code = 0 then do;		/* Able to open at density d(i). */
		     call iox_$read_record (		/* Attempt to read at the density set. */
			cbp			/* (input) pointer to control block. */
			, addr (tape_label)		/* (input) record buffer. */
			, size (tape_label)*4	/* (input) buffer length in bytes. */
			, nbr			/* (output) number of bytes read. */
			, code			/* (output) I/O system status. */
			);
		     call iox_$control (		/* Rewind the tape. */
			cbp
			, "rewind"
			, null ()
			, (0)			/* Status code. Ignored. */
			);
		     if code = 0 then		/* Able to read at the density. */
			return;			/* Success. */
		end;
	     end;
	     call com_err_ (
		code
		, "gfms"
		, "unable to set any density (^a) description^/^a"
		, ad
		, attach_description
		);
	     call gfms_close_;
	     call gfms_detach_;
	     goto fail;

dcl  ad                       char(25)var;
dcl  code                     fixed bin(35);
dcl  i                        fixed bin;
dcl  iox_$control             entry (ptr, char(*), ptr, fixed bin(35));

%include gfms_tape_densities;
	end get_density;
%page;
open:	proc;

/* Open I/O switch.
*/
	     call iox_$open (
		cbp				/* (input) pointer to control block. */
		, 4				/* (input) sequential input. */
		, "0"b				/* (input) UNUSED. */
		, code
		);
	     if code = 0 then return;
	     call com_err_ (
		code
		, "gfms"
		, "sequential input opening for attach description^/^a"
		, attach_description
		);
	     call gfms_detach_;
	     goto fail;

dcl  code                     fixed bin(35);
dcl  iox_$open                entry (ptr, fixed bin, bit(1) aligned, fixed bin(35));
	end open;
%page;
validate_label: proc;

/* Validate that label is consistant with previous label. */
	     if file_serial ^= file_serial_num then do;
		call com_err_ (
		     0
		     , "gfms_header_label_"
		     , "Current reel ^a, sequence number ^a, in file ^a"
		     ||"^/Expecting file ^a(reel ^a, sequence ^a)."
		     , file_serial
		     , reel_sequence
		     , reel_serial
		     , file_serial_num
		     , reel_serial_num
		     , reel_sequence_num
		     );
		goto fail;
	     end;
	     if verify (ltrim (reel_sequence), "0123456789")>0 then do;
		call com_err_ (
		     0
		     , "gfms_header_label_"
		     , "Reel sequence number ""^a"" not all numeric."
		     , reel_sequence
		     );
		goto fail;
	     end;
	     if prn = " " then			/* preceding EOR label not erroneous. */
		if fixed (substr(reel_sequence,2), 17) ^= (fixed (substr(reel_sequence_num,2), 17)+1) then do;
		     call com_err_ (
			0
			, "gfms_header_label_"
			, "Reel ^a (file ^a) out of sequence."
			||"^/last sequence ^a, current sequence ^a."
			, reel_serial
			, file_serial
			, reel_sequence_num
			, reel_sequence
			);
		     goto fail;
		end;
		else
		if reel_serial ^= reel_serial_num then do;
		     call com_err_ (
			0
			, "gfms_header_label_"
			, "File ^a sequence number ^a reel serial ^a, expected reel serial ^a."
			, file_serial
			, reel_sequence
			, reel_serial
			, reel_serial_num
			);
		     call command_query_$yes_no (yes, 0, "gcos_fms",
			"Do you want to ignore the reel serial mismatch and process the mounted tape next?",
			"Ignore?");
		     if ^yes then goto fail;
		end;
	     return;
	end validate_label;
%page;
/*   Variables for gfms_header_label_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  code                     fixed bin(35);
dcl  com_err_                 entry() options(variable);
dcl  command_query_$yes_no    entry() options(variable);
dcl  divide                   builtin;
dcl  file_serial              char(6);
dcl  GE__600_BTL_             bit(72)static int options(constant)init("272520200600002022634320"b3);
dcl  gfms_ascii_              entry(bit(*))returns(char(*));
dcl  gfms_close_              entry;
dcl  gfms_detach_             entry;
dcl  gfms_dump_rec_           entry (ptr, fixed bin);
dcl  gfms_fail                condition ext;
dcl  gfms_return              condition ext;
dcl  gfms_tape_status_        entry (ptr) returns(bit(12));
dcl  ioa_                     entry() options(variable);
dcl  iox_$control             entry (ptr, char(*), ptr, fixed bin(35));
dcl  iox_$read_record         entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  nbr                      fixed bin(21);
dcl  prn                      char(6);
dcl  reel_sequence            char(6);
dcl  reel_serial              char(6);
dcl  size                     builtin;
dcl  yes                      bit(1);

/* See DD07 (April 1974) FILE AND RECORD CONTROL
   Page 11-2 standard label format.
*/
dcl 1 tape_label		aligned
,     3 label_identifier	bit(72)
,     3 installation_id	bit(36)
,     3 reel_serial_number	bit(36)
,     3 file_serial_number	bit(36)
,     3 reel_sequence_number	bit(36)
,     3 creation_date	bit(36)
,     3 retention_days	bit(36)
,     3 file_name		bit(72)
,     3 user_info		bit(108)
,     3 prverr		bit(36)
;

dcl 1 yyddd		aligned
,     3 blank		char(1)unal
,     3 year		char(2)unal
,     3 day_of_year		char(3)unal
;
%page;
%include gfms_ext;
     end gfms_header_label_;
