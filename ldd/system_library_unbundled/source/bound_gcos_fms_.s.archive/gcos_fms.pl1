/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_fms: gfms: proc;

/* Display information, excluding data files, from a
   gcos user or master save tape.

   Author: Dave Ward	09/30/80
   Change: Dave Ward	10/04/80	arguments.
   Change: Dave Ward	10/15/80	-den, -gf, -tr, -tll.
   Change: Dave Ward	10/19/80	-file, -no_file and -input_file
   Change: Dave Ward	10/27/80	added -scan_ss option.
   Change: Dave Ward	11/25/80	revised control arguments.
   Change: Dave Ward	01/27/81	provide gfms_return condition.
   Change: Dave Ward	02/02/81	print_calling_sequence_
   Change: Dave Ward	04/22/81	print big tape blocks not available.
   Change: Scott C. Akers	02/08/82	Add -spn, -drm, -rest control_args.
				Convert all names to gfms_<name>.
   Change: Ron Barstad  83-04-05  Make usage message standard, dcl builtins, delete unused dcls
   Change: Ron Barstad  83-06-03  Add -den spec to attach description
   Change: Ron Barstad  84-11-16  Forced tape reel number to upper case
*/
	call cu_$af_return_arg (			/* Obtain reference to caller's input arguments. */
	     na					/* (output) number of arguments. */
	     , rsp				/* (output) pointer to return argument. */
	     , rsl				/* (output) length of return argument. */
	     , code				/* (output) status. */
	     );
	if code = 0 then do;			/* 1) Called as an active function. */
	     get_arg = cu_$af_arg_ptr;		/* Use active function argument getter. */
	     put_err = active_fnc_err_;
	end;
	else
	rsp = addr (rsx);				/* Default return string. */
	rsl = 5;					/* Default length. */
	if code = error_table_$not_act_fnc then do;	/* 2) Not called as active function. */
	     get_arg = cu_$arg_ptr;			/* Use "normal" argument getter. */
	     put_err = com_err_;
	end;
	else do;
	     call com_err_ (			/* 3) Could not obtain args. */
		code
		, "gcos_fms"
		, "^/Could not obtain argument information. Quitting."
		);
	     return;
	end;

	if gcos_big_tape_blocks_ () then do;
	     rs = "false";
	     return;
	end;

	if na<1 then do;
wrong_number_args: ;
	     call put_err (				/* Wrong number arguments. */
		error_table_$noarg
		, "gcos_fms ("||version||")"
		, "^/Usage:^-gfms REEL_NUMBER {-CONTROL_ARGS}"
		);

/* DON'T Print in error output cryptic form of calling sequence. (following is kept as a comment
	     call gfms_calling_sequence_ (
		"arg:"
		, "  -den n|Tape density is n (default dynamic)."
		, "  -dump|Exhaustive display of tape info."
		, "  -file name...|Accept only files named (default is all files)."
		, "  -if file|File names in segment (with suffix .gfms)."
		||" One name per line, may be prefixed with ^ for not."
		, "  -no_ga|Do not supply gtss file attributes (default is to supply)."
		, "  -no_tll|Don't print total llinks (default is to print)."
		, "  -no_unload|Do not unload files (default is to unload)."
		, "  -not_file name...|Accept no file named."
		, "  -prfn|Print sorted list of file names (default is not)."
		, "  -scan_ss|Only print substructure records (default is not)."
		, "  -tk n|Tape is n track (default is 9)."
		, "  -restore UMC_NAME|Restore only UMC specified."
		, "  -rest UMC_NAME|Same as -restore."
		, "  -smc_pathname path|Specify where to do the restore. (Default is working_dir.)"
		, "  -spn path|Same as -smc_pathname."
		, "  -directory_mapping DRM_RULE|Specify whether to place files in working_dir,"
		||" >udd>UMC_NAME, or SMC pathname. (Default is ""wd"")"
		, "  -drm DRM_RULE|Same as -directory_mapping."
		); 
*/
	     return;
	end;

	call init_routine;

/* Obtain temp segments for description tree, file names lists. */

	call get_temp_segments_ (
	     "gfms"
	     , tsp
	     , code
	     );
	if code ^= 0 then do;
	     call put_err (
		code
		, "gfms"
		, "Obtaining 3 temp segments."
		);
	     return;
	end;

/* Process caller's arguments. */
	do i = 1 to na;
	     call get_arg (i, ap, al, code);		/* Obtain the next argument (arg). */
	     if code ^= 0 then do;
		call put_err (
		     code
		     , "gfms"
		     , "Argument ^i."
		     , i
		     );
		goto error_exit;
	     end;

	     if al<1 then do;			/* Argument is zero length string. */
		call put_err (
		     error_table_$smallarg
		     , "gfms"
		     , "Argument ^i zero length. Quitting."
		     , i
		     );
		goto error_exit;
	     end;

	     if substr (arg, 1, 1) = "-" then do;	/* Control argument. */
		if last_was_file & (file_name_count = 0) then do;
		     call put_err (
			0
			, "gfms"
			, "File name control argument not followed by file name."
			);
		     goto error_exit;
		end;
		last_was_file = "0"b;
		file_name_count = -1;

		l = hbound (control_arg, 1);
		do f = 1 to l;			/* Search for control arg name. */
		     if substr (arg, 2) = control_arg (f).name then do;
			last_was_file = "0"b;
			goto carg (control_arg (f).val);
		     end;
		end;
		call put_err (			/* Unknown control arg. */
		     error_table_$badopt
		     , "gfms"
		     , "Arg ^i ""^a"". Quitting."
		     , i
		     , arg
		     );
		goto error_exit;
	     end;

	     if file_name_count >= 0 then do;
		file_name_count = file_name_count+1;
		if gfms_file_name_ (not_file, arg) then arg_err = "1"b;
		goto next_arg;
	     end;

	     if need_input_file then do;
		need_input_file = "0"b;
		if gfms_input_file_list_ (arg) then arg_err = "1"b;
		goto next_arg;
	     end;

	     if need_track then do;
		need_track = "0"b;
		if arg = "7" then tape_track = "7";
		else
		if arg = "9" then tape_track = "9";
		else do;
		     call put_err (
			0
			, "gfms"
			, "Only 7 or 9 track provided for. Quitting."
			);
		     goto error_exit;
		end;
		goto next_arg;
	     end;

	     if need_density then do;
		need_density = "0"b;
		do k = lbound (tape_densities, 1) to hbound (tape_densities, 1);
		     if arg = tape_densities (k) then do;
			ftd, ltd = k;		/* Use density table entry k. */
			den_arg = arg;
			goto next_arg;
		     end;
		end;
		call put_err (
		     error_table_$bad_density
		     , "gfms"
		     , "Only densities ^a provided for. Quitting."
		     , string (tape_densities)
		     );
		goto error_exit;
	     end;

	     if   need_umc_name
	     then do;
		need_umc_name = "0"b;
		gfms_ext$umc_name = arg;
		goto next_arg;
		end;

	     if   need_mapping_rule
	     then do;
		need_mapping_rule = "0"b;
		if   arg = "wd"
		   | arg = "smc"
		   | arg = "umc"
		then do;
		     gfms_ext$mapping_rule = arg;

		     if   arg = "smc"
		        & ^got_smc_path
		     then need_smc_path = "1"b;

		     if   arg = "umc"
		     then gfms_ext$working_dir = ">udd";

		     if   arg = "wd"
		     then gfms_ext$working_dir = rtrim (get_wdir_ ());

		     goto next_arg;
		     end;

		else do;

		     call put_err  (error_table_$badopt,
				"gfms",
				"^/Mapping Rules are:^-WD^-SMC^-UMC");

		     goto error_exit;
		     end;
		end;

	     if   need_smc_path
	     then do;
		need_smc_path = "0"b;
		call expand_pathname_ ((arg), dname, ename, code);

		if   code = 0
		then do;
		     gfms_ext$working_dir = rtrim (dname) || ">" || ename;
		     goto next_arg;
		     end;
		else do;
		     call put_err  (code, "gfms",
				"^/Illegal SMC pathname: ^/^a", arg);
		     goto error_exit;
		     end;
		end;

/* Tape reel number. */
	     reel_number = translate(arg,"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz");
	     goto next_arg;
%page;
carg (01):     ;

/* density */
	     need_density = "1"b;
	     goto next_arg;

carg (02):     ;

/* "dump" */
	     dump = "1"b;				/* Do dump tape information. */
	     gfms_ext$print_routines.ioa = ioa_;
	     gfms_ext$print_routines.ioa_nnl = ioa_$nnl;
	     goto next_arg;

carg (03):     ;

/* "file" */
	     file_name_count = 0;			/* 0 => obtain names. */
	     not_file = "0"b;
	     last_was_file = "1"b;
	     goto next_arg;

carg (04):     ;

/* "input_file" */
	     need_input_file = "1"b;
	     goto next_arg;

carg (05):     ;

/* not gtss file attributes. */
	     gf = "0"b;
	     goto next_arg;

carg (06):     ;

/* no total llinks. */
	     tll = "0"b;
	     goto next_arg;

carg (07):     ;

/* "no_unload" */
	     unload = "0"b;
	     goto next_arg;

carg (08):     ;

/* not_file. */
	     file_name_count = 0;			/* 0 => obtain names. */
	     not_file = "1"b;
	     last_was_file = "1"b;
	     goto next_arg;

carg (09):     ;

/* "pr_file_names" */
	     prfn = "1"b;
	     goto next_arg;

carg (10):     ;
	     scan_ss = "1"b;
	     goto next_arg;

carg (11):     ;

/* track n */
	     need_track = "1"b;
	     goto next_arg;

carg (12):     ;

/* smc smc_path */
	     need_smc_path = "1"b;
	     goto next_arg;

carg (13):     ;

/* drm mapping_rule */
	     need_mapping_rule = "1"b;
	     goto next_arg;

carg (14):     ;

/* restore umc*/
	     need_umc_name = "1"b;
	     goto next_arg;

not_provided:  ;
	     call ioa_ ("Control arg ""^a"" ^i not yet provided."
		, control_arg (f).name
		, i
		);
	     goto next_arg;

next_arg:	     ;
	end;

	if (number_names>0) & dump then
	     call gfms_dump_do_files_;

	if   leftovers ()				/* If any args are left hanging */
	  | arg_err
	then do;
error_exit:    ;
	     call release_temp_segs;
	     rs = "false";
	     return;
	     end;
%page;
/* Store the attach description. */
	attach_description =
	     "tape_nstd_ "				/* name of I/O module. */
	     ||rtrim(reel_number)
	     ||" -bk 15624"			/* => up to 3906 words (file content records largest). */
	     ||" -tk "||tape_track
	     ;
	if den_arg ^= ""
	     then attach_description = rtrim(attach_description)||" -den "||rtrim(den_arg);


/* Establish "on" conditions. */
	on cond (gfms_fail) begin;
	     call put_err (
		0
		, "gfms"
		, "FAILED."
		);
	     call clean_up;
	     goto exit;
	end;

	on cond (cleanup) call clean_up;

	on cond (gfms_return) goto exit;

/* Process the tape. */
	string (tape_reel_information) = "";
	call gfms_header_label_ ();			/* display tape label. */
	call gfms_serial_number_record_ ();		/* display tape serial number record. */
	call gfms_task_block_record_ (master_save);	/* display tape block record (tbr). */
	if master_save then
	     call gfms_smc_records_ ();
	call gfms_substructure_records_ ();
	call gfms_file_content_records_ ();

/* Close and detach the tape. */
	call clean_up;

exit:	;
	return;
%page;
clean_up:	proc;
	     call release_temp_segs;

/* Perform close and detach (cleanup condition)
   activities.
*/
	     if gfms_close_ () then return;
	     call gfms_detach_;
	     return;
	end clean_up;
%page;
init_routine: proc;

/* Performs all the initialization. */


/* Set default options. */
	arg_err = "0"b;				/* No argument errors yet. */
	tape_track = "9";
	close, detach = "0"b;			/* Don't close or detach. */
	gf = "1"b;				/* provide gtss file attributes. */
	tll = "1"b;				/* print file total llinks. */
	dump = "0"b;				/* Do not dump tape information. */
	prfn = "0"b;				/* Don't print file names. */
	unload = "1"b;				/* Do unload files. */
	ftd = lbound (tape_densities, 1);
	ltd = hbound (tape_densities, 1);		/* upper bound of tape densities table. */
	two_words = "0"b;
	nlp = addr (two_words);
	gfms_ext$print_routines.ioa = null_proc;
	gfms_ext$print_routines.ioa_nnl = null_proc;
	gfms_ext$working_dir = rtrim (get_wdir_ ());
	gfms_ext$mapping_rule = "wd";
	gfms_ext$umc_name = "";

	last_was_file
	     , got_smc_path
	     , need_density
	     , need_input_file
	     , need_mapping_rule
	     , need_smc_path
	     , need_track
	     , need_umc_name
	     , scan_ss
	     = "0"b;
	file_name_count = -1;			/* -1 => no file name needed. */
	reel_number = "";
	den_arg = "";

	return;

end init_routine;
%page;
leftovers: proc () returns (bit(1));

	if reel_number = ""
	then do;
	     call put_err (
		error_table_$noarg
		, "gfms"
		, "Tape reel number has not been supplied."
		);
	     return ("1"b);
	     end;

	if need_input_file
	then do;
	     call put_err (
		error_table_$noarg
		, "gfms"
		, "-input_file control argument not followed by input file name."
		);
	     return ("1"b);
	     end;

	if need_density
	then do;
	     call put_err (
		error_table_$noarg
		, "gfms"
		, "-density control argument not followed by density value."
		);
	     return ("1"b);
	     end;

	if need_track
	then do;
	     call put_err (
		error_table_$noarg
		, "gfms"
		, "-track control argument not followed by track value."
		);
	     return ("1"b);
	     end;

	if file_name_count = 0
	then do;
	     call put_err (
		error_table_$noarg
		, "gfms"
		, "-file control argument not followed by file names."
		);
	     return ("1"b);
	     end;

	if need_mapping_rule
	then do;
	     call put_err (
		error_table_$noarg
		, "gfms"
		, "Mapping rule not given."
		|| "^/Mapping Rules are:^-WD^-SMC^-UMC"
		);
	     return ("1"b);
	     end;

	if need_umc_name
	then do;
	     call put_err (
		error_table_$noarg
		, "gfms"
		, "UMC name not given."
		);
	     return ("1"b);
	     end;

	if need_smc_path
	then do;
	     call put_err (
		error_table_$noarg
		, "gfms"
		, "SMC pathname not given."
		);
	     return ("1"b);
	     end;

	return ("0"b);				/* All is well so far. */

end leftovers;
%page;
release_temp_segs: proc;

/* Release temp segment for description tree. */
	     call release_temp_segments_ (
		"gfms"
		, tsp
		, code
		);
	     if code ^= 0 then
		call put_err (
		code
		, "gfms"
		, "Releasing 3 temp segments."
		);
	     return;
	end release_temp_segs;

null_proc: proc;return;end;				/* Procedure that does nothing. */


%page;
/*   Variables for gcos_fms:		*/
/*   IDENTIFIER		ATTRIBUTES	*/
dcl  active_fnc_err_          entry() options(variable);
dcl  addr                     builtin;
dcl  al                       fixed bin;
dcl  ap                       ptr;
dcl  arg                      char(al)unal based(ap);
dcl  arg_err                  bit(1);
dcl  cleanup                  condition ext;
dcl  code                     fixed bin(35);
dcl  com_err_                 entry() options(variable);
dcl  cu_$af_arg_ptr           entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  cu_$af_return_arg        entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  cu_$arg_ptr              entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  den_arg                  char (8);
dcl  dname		char (168);
dcl  ename		char (32);
dcl  error_table_$badopt      fixed bin(35) ext static;
dcl  error_table_$bad_density fixed bin(35) ext static;
dcl  error_table_$noarg       fixed bin(35) ext static;
dcl  error_table_$not_act_fnc fixed bin(35) ext static;
dcl  error_table_$smallarg    fixed bin(35) ext static;
dcl  expand_pathname_	entry (char(*), char(*), char(*), fixed bin(35));
dcl  f                        fixed bin;
dcl  file_name_count          fixed bin;
dcl  gcos_big_tape_blocks_    entry() returns(bit(1));
dcl  get_arg                  entry(fixed bin,ptr,fixed bin,fixed bin(35)) variable auto;
dcl  get_temp_segments_       entry (char(*), (*)ptr, fixed bin(35));
dcl  gfms_close_              entry() returns(bit(1));
dcl  gfms_detach_             entry options(variable);
dcl  gfms_dump_do_files_      entry;
dcl  gfms_fail                condition ext;
dcl  gfms_file_content_records_ entry();
dcl  gfms_file_name_          entry (bit(1), char(*)) returns(bit(1));
dcl  gfms_header_label_       entry();
dcl  gfms_input_file_list_    entry (char(*)) returns(bit(1));
dcl  gfms_return              condition ext;
dcl  gfms_serial_number_record_ entry();
dcl  gfms_smc_records_        entry();
dcl  gfms_substructure_records_ entry();
dcl  gfms_task_block_record_  entry(bit(1));
dcl  got_smc_path		bit(1);
dcl  hbound                   builtin;
dcl  i                        fixed bin;
dcl  ioa_                     entry() options(variable);
dcl  ioa_$nnl                 entry() options(variable);
dcl  k                        fixed bin;
dcl  l                        fixed bin;
dcl  last_was_file            bit(1);
dcl  lbound                   builtin;
dcl  master_save              bit(1);
dcl  na                       fixed bin;
dcl  need_density             bit(1);
dcl  need_input_file          bit(1);
dcl  need_mapping_rule	bit(1);
dcl  need_smc_path		bit(1);
dcl  need_track               bit(1);
dcl  need_umc_name		bit(1);
dcl  not_file                 bit(1);
dcl  put_err                  entry variable options(variable);
dcl  reel_number              char(7);
dcl  release_temp_segments_   entry (char(*), (*)ptr, fixed bin(35));
dcl  rs                       char(rsl)var based(rsp);
dcl  rsl                      fixed bin(21);
dcl  rsp                      ptr;
dcl  rsx                      char(5)var;
dcl  rtrim                    builtin;
dcl  string                   builtin;
dcl  substr                   builtin;
dcl  tape_track               char(1);
dcl  tsp                      (3)aligned ptr based(addr(gfms_ext$temp_segs));
dcl  two_words                bit(72)aligned;
dcl  get_wdir_                entry() returns(char(168));
%page;
dcl 1 control_arg	(23) static int options(constant)
,     3 name	char(20)init(
 /* 01 01 */ "den"
,/* 02 01 */ "density"
,/* 03 02 */ "dump"
,/* 04 03 */ "file"
,/* 05 04 */ "if"
,/* 06 04 */ "input_file"
,/* 07 05 */ "no_ga"
,/* 08 05 */ "no_gtss_attributes"
,/* 09 06 */ "no_tll"
,/* 10 06 */ "no_total_llinks"
,/* 11 07 */ "no_unload"
,/* 12 08 */ "not_file"
,/* 13 09 */ "prfn"
,/* 14 09 */ "print_file_names"
,/* 15 10 */ "scan_ss"
,/* 16 11 */ "tk"
,/* 17 11 */ "track"
,/* 18 12 */ "spn"
,/* 19 12 */ "smc_pathname"
,/* 20 13 */ "drm"
,/* 21 13 */ "directory_mapping"
,/* 22 14 */ "rest"
,/* 23 14 */ "restore"
		)
,     3 val	fixed bin init(
 /* 01 */ 01 /* "den"	*/
,/* 02 */ 01 /* "density"	*/
,/* 03 */ 02 /* "dump"	*/
,/* 04 */ 03 /* "file"	*/
,/* 05 */ 04 /* "if"	*/
,/* 06 */ 04 /* "input_file"	*/
,/* 07 */ 05 /* "no_ga"	*/
,/* 08 */ 05 /* "no_gtss_attributes"	*/
,/* 09 */ 06 /* "no_tll"	*/
,/* 10 */ 06 /* "no_total_llinks"	*/
,/* 11 */ 07 /* "no_unload"	*/
,/* 12 */ 08 /* "not_file"	*/
,/* 13 */ 09 /* "prfn"	*/
,/* 14 */ 09 /* "print_file_names"	*/
,/* 15 */ 10 /* "scan_ss"	*/
,/* 16 */ 11 /* "tk"	*/
,/* 17 */ 11 /* "track"	*/
,/* 18 */ 12 /* "spn"	*/
,/* 19 */ 12 /* "smc_pathname"*/
,/* 20 */ 13 /* "drm"*/
,/* 21 */ 13 /* "directory_mapping"*/
,/* 22 */ 14 /* "rest"*/
,/* 23 */ 14 /* "restore"*/

			)
;
%page;
%include gfms_version;
%page;
%include gfms_tape_densities;
%page;
%include gfms_ext;
%page;
%include gfms_do_files;
     end gcos_fms;
