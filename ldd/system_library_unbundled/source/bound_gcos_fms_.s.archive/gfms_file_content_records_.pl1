/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_file_content_records_: proc ();

/* Display FILE CONTENT records information.

   Author: Dave Ward	10/03/80
   Change: Dave Ward	10/08/80	isolate printing names.
   Change: Dave Ward	10/10/80	create and move date to file.
   Change: Dave Ward	10/13/80	lower case names, handle record_quota_overflow
   Change: Dave Ward	10/15/80	total records, record entry.
   Change: Dave Ward	10/16/80	corrected totaling records.
   Change: Dave Ward	10/17/80	provide gtss file attributes.
   Change: Dave Ward	10/29/80	adjusted to new tree description.
   Change: Dave Ward	10/30/80	adjusted to new file name list.
   Change: Dave Ward	11/12/80	creation date from content record.
   Change: Dave Ward	11/25/80	bug in selective unloading.
   Change: Scott C. Akers	02/08/82	Get working directory from gfms_ext$working_dir.
				Don't blow up on bad file, just skip it.
				Selective unloading by UMC, use UMC
				to specify pathname if "-drm umc" applies.
   Change: Ron Barstad        11/24/82  Fix bug on restoring MSFs--cl was not being set to 0 on new seg
   Change: Ron Barstad        12/23/82  Fix bug on return from quota overflow fix command level
   Change: Ron Barstad        11/21/84  Added rtrims to formation of msf paths

*/

	call ioa ("^|FILE CONTENT RECORDS INFORMATION:");
	first_warning = "1"b;
	rqo_in_progress = "0"b;			/* Whether processing record quota overflow (0 => not). */
	fcbp = null ();				/* MSF fcb pointer. */
	wd = gfms_ext$working_dir;			/* Obtain caller's working directory. */
	i = 0;					/* Total file count. */
	bf = "";					/* Bad file string. */
	file_name_list.next_entry = 1;		/* Next available start entry. */
	file_name_list.nn = 0;			/* Number of file names. */
	file_name_list.total_llinks = 0;		/* Total number llinks in all files. */
	if unload then				/* Unloading, provide for record quota overflow. */
	     on condition (record_quota_overflow)
	     call process_rqo (			/* Procedure to call if quota exceeded. */
	     "Creating file:"
	     ||"^/"||rtrim(wd)||rtrim(sub_dir)||">"||rtrim (file_entry)
	     );
LOOP_1:	do while (get_rec () = GOT_RECORD);		/* Obtain next file content record. */
	     if file_continued = "0"b then
GROUP_1:		do;				/* Start f next file. */
		i = i+1;				/* Count of files. */
		t = file_size;			/* Total file llinks. */
		a = file_llinks_in_record;		/* Accumulated file llinks (1st record). */
		call block_info;
		call display_header (bf);
		call define_file (			/* Establish Multics file in which to unload. */
		     file_name2			/* (input) file name. */
		     , file_desc_sect_num		/* (input) sector number of file description record. */
		     , t				/* (input) total length of file llinks. */
		     , bf				/* (input) string of codes why file bad. */
		     , cfd			/* (output) gcos catalog/file description. */
		     , sub_dir			/* (output) multics directory path. */
		     , gcos_file_name		/* (output) GCOS file name (upper case). */
		     , file_entry			/* (output) multics file entry name (lower case). */
		     , fne_ptr			/* (output) pointer to file name entry. */
		     , have_file			/* (output) "1"b file definition successful. */
		     );
		unloading_file = "0"b;		/* Assume we are not to unload file. */
		if have_file then
		     if unload then
			if do_file (cfd, gcos_file_name) then
GROUP_2:			     do;
			     call create_file (
				wd
				, sub_dir
				, file_entry
				, fcbp
				, c (0)
				, have_file
				);
			     if have_file then do;
				if gf then	/* Provide gtss file attributes. */
				     call gfms_gtss_attributes_ (
				     rtrim(wd)||sub_dir	/* (input) directory. */
				     , file_entry	/* (input) file name. */
				     , fne_ptr	/* (input) pointer to file name entry. */
				     , fcr.file_creation_date /* (input) creation date BCD. */
				     );
				cn = 0;		/* Current component number. */
				cp = c (0);	/* Pointer to the Multics file (segment). */
				cl, nll = a;	/* Number of llinks to move
						   (will not exceed 1st segment <= 3840 words). */
				unspec (cp -> move_llinks) = unspec (addr (fcr.words66_nw) -> move_llinks);
				unloading_file = "1"b; /* File is being unloaded. */
			     end;
			end GROUP_2;

LOOP_2:		do while (t>a);			/* total llinks > accumulated llinks. */
		     i = i+1;
		     if get_rec () = END_OF_FILE then do;
			call com_err_ (
			     0
			     , "gfms_file_content_records_"
			     , "end of input during continuation record in file ^a"
			     , cfd
			     );
			signal condition (gfms_fail);
		     end;
		     if file_continued = "0"b then do;	/* This should be a continued record. */
			call com_err_ (
			     0
			     , "gfms_file_content_records_"
			     , "File ^a file size ^i accumulated ^i uncontinued record."
			     , cfd
			     , t
			     , a
			     );
		     end;
		     call block_info;
		     call display_header (bf);
		     if unloading_file then
			call unload_record;
		     a = a + file_llinks_in_record;	/* Number of accumulated llinks moved. */
		end LOOP_2;

/* "close" the file. */
		if unloading_file then do;
		     call msf_manager_$adjust (
			fcbp
			, cn
			, cl*320*36
			, "1"b			/* Set the bit count. */
			||"1"b			/* truncate the final component. */
			||"1"b			/* terminate the component. */
			, code
			);
		     if code ^= 0 then do;
			call com_err_ (
			     code
			     , "gfms_file_content_records_"
			     , "Unable to adjust at component ^i:"
			     ||"^/""^a"""
			     , cn
			     , rtrim(wd)||rtrim(sub_dir)||">"||file_entry
			     );
		     end;
		     call msf_manager_$close (fcbp);
		end;

		if t ^= a then do;			/* Accumulated records not equal to total. */
		     call com_err_ (
			0
			, "gfms_file_content_records_"
			, "File ^a size ^i accumulated ^i."
			, cfd
			, t
			, a
			);
		end;

	     end GROUP_1;
	     else do;				/* Continued record after file completed. */
		call com_err_ (
		     0
		     , "gfms_file_content_records_"
		     , "Continued record after file ^a completed."
		     , cfd
		     );
	     end;
	end LOOP_1;

	if prfn | tll then call gfms_print_names_ (nn);
	return;
%page;
bcd:	proc (w)returns (char (13));

/* Convert 6 bcd characters to ascii, convert blanks to
   underlines (bcd has no underline character, so this
   distinguishes bcd blanks). Return the 6 characters as a 2
   strings of 6 characters each, space in middle, each input
   character preceeded by a space.
*/
dcl  w                        bit(36)aligned parm;
	     string (s) = gfms_ascii_ ((w));		/* Convert bcd to ascii. */
	     string (s) = translate (string (s), "_", " "); /* Convert spaces to underlines. */
	     string (r) = " ";			/* Blank the result. */
	     do i = 0 to 5;
		if i<3 then k = 1;
		else k = 2;
		r ((i*2)+k) = s (i);		/* Distribute to every other character of the output. */
	     end;
	     return (string (r));

dcl  i                        fixed bin;
dcl  k                        fixed bin;
dcl  r                        (0:12)char(1)unal;
dcl  s                        (0:5)char(1)unal;
	end bcd;
%page;
block_info: proc;

/* Display and verify block information
   from file content record.
*/
	     call ioa (
		"^6i. (block^6i)  size^6i  record-size^6i"
		, i
		, block_serial_number
		, block_size
		, record_size
		);

	     if no_files_in_record ^= 1 then do;
		call ioa ("number of files in record not 1 (^i)", no_files_in_record);
		do i = 0 to 65 by 4;
		     call ioa_nnl ("^12x^2i. ", i);
		     do j = i to (i+3) while (j <= 65);
			call ioa_nnl (" ^12.3b", w (j));
		     end;
		     call ioa_nnl ("^/");
		end;
	     end;
	     return;
	end block_info;
%page;
create_directory: proc (wd, dr);

/* Create subdirectories specified by "dr"
   under directory specified by "wd"
*/
dcl  dr                       char(168)var parm;
dcl  wd                       char(168)var parm;
	     n = 1;
	     on condition (record_quota_overflow)
		call process_rqo (
		"Creating directory:"
		||"^/"||rtrim(wd)||">"||rtrim(dr)||">"||ent
		);
	     do while (n <= length (dr));
		k = index (substr (dr, n), ">");
		if k = 0 then k = length (dr)-n+2;
		if n> 1 then wdir = rtrim(wd)||">"||substr (dr, 1, n-2);
		else wdir = wd;
		ent = substr (dr, n, k-1);
		call hcs_$append_branchx (
		     wdir				/* (input) pathname of containing directory. */
		     , ent			/* (input) name of subdirectory. */
		     , 01011b			/* (input) status, modify and append access for *.*.*. */
		     , rings			/* (input) ring brackets. */
		     , "*.*.*"			/* (input) person project for access. */
		     , 1				/* (input) directory being created. */
		     , 0				/* (input) copy switch not on. */
		     , 0				/* (input) no bit count. */
		     , code			/* (output) storage system status. */
		     );
		if code ^= 0 then
		     if code ^= error_table_$namedup then do;
			call com_err_ (
			     code
			     , "gfms"
			     , "Directory: ^a>^a (retryable)"
			     , wdir
			     , ent
			     );
			signal condition (gfms_fail);
		     end;
		n = n+k;
	     end;
	     revert condition (record_quota_overflow);
	     return;

dcl  ent                      char(32);
dcl  k                        fixed bin;
dcl  n                        fixed bin;
dcl  wdir                     char(168);
	end create_directory;
%page;
create_file: proc (wd, dir, ent, fcbp, p1, fc);

/* Create MSF file wd>dir>ent.
   Set fcbp to MSF file control block (fcb).
   Set pointer p1 to 1st component.
   Set fc "1"b if successful.
*/
dcl  dir                      char(168)var parm;
dcl  ent                      char(32)parm;
dcl  fc                       bit(1)parm;
dcl  fcbp                     ptr parm;
dcl  p1                       ptr parm;
dcl  wd                       char(168)var parm;
	     number_of_attempts = 0;
try2:	     ;
	     call msf_manager_$open (
		rtrim(wd)||dir
		, ent
		, fcbp
		, code
		);
	     if code ^= 0 then
		if code ^= error_table_$noentry then do;
		     if code = error_table_$no_dir then do;
			number_of_attempts = number_of_attempts+1;
			if number_of_attempts = 1 then do;
			     if length (dir)>1 then
				call create_directory (wd, substr (dir, 2));
			     goto try2;
			end;
		     end;
		     call com_err_ (
			code
			, "gfms_file_content_records_"
			, "Attempting to create:"
			||"^/""^a"""
			, rtrim(wd)||rtrim(dir)||">"||ent
			);
		     fc = "0"b;			/* Could not create the file. */
		     return;
		end;

	     call msf_manager_$get_ptr (		/* Obtain pointer to 1st component. */
		fcbp
		, 0				/* 1st component number. */
		, "1"b				/* (input) => create file if non-existent. */
		, p1				/* (output) pointer to component 0. */
		, bc				/* (output) bit count. */
		, code
		);
	     if code ^= 0 then do;
		if code ^= error_table_$namedup then
		     if code ^= error_table_$segknown then do;
			call com_err_ (
			     code
			     , "gfms_file_content_records_"
			     , "Unable to obtain pointer to 1st component of:"
			     ||"^/""^a"""
			     , rtrim(wd)||rtrim(dir)||">"||ent
			     );
			fc = "0"b;		/* Could not create the file. */
			return;
		     end;
		call msf_manager_$adjust (		/* Truncate existing file. */
		     fcbp				/* (input) pointer to file control block. */
		     , 0				/* (input) MSF component. */
		     , 0				/* (input) bit count. */
		     , "0"b			/* (3 bits input) do not set bit count. */
		     ||"1"b			/* truncate the component. */
		     ||"0"b			/* do not terminate the component. */
		     , code			/* (output) status code. */
		     );
		if code ^= 0 then
		     call com_err_ (
		     code
		     , "gfms"
		     , "Unable to truncate existing file ^a^a>^a"
		     , wd
		     , dir
		     , ent
		     );
	     end;

	     fc = "1"b;
	     return;

dcl  number_of_attempts       fixed bin;
	end create_file;
%page;
define_file: proc (n, s, l, bfc, cfn, dir, fn, ent, fep, defined);

/* Look up sector number "s" in the description tree
   and display the catalog description found.
   "n" is the BCD name of the file in the header information.
   "l" is the total length of the file in llinks (=> 320 words @).
   "bfc" is the bad file code string.
   "cfn" is to be output the catalog/file name obtained.
   "dir" is the Multics (sub) directory pathname.
   "fn" is GCOS file name (upper case).
   "ent" is the Multics file entry name (fn lower case).
   "fep" is output set to file name entry.
   "defined" is "1"b if file defined, else "0"b.
*/
dcl  bfc                      char(20)var parm;
dcl  cfn                      char(200)var parm;
dcl  defined                  bit(1)parm;
dcl  dir                      char(168)var parm;
dcl  ent                      char(32)parm;
dcl  fep                      ptr parm;
dcl  fn                       char(12)var parm;
dcl  l                        fixed bin parm;
dcl  n                        bit(72)aligned parm;
dcl  s                        fixed bin(18)unsigned unal parm;
	     defined = "1"b;			/* Assume file will be defined. */
	     cfn					/* GCOS catalog file description. */
		, dir = "";			/* Multics directory pathname. */
	     fn = rtrim (gfms_ascii_ ((n)));		/* GCOS file name (i.e., upper case).. */
	     ent = translate (fn, lower, upper);	/* Multics entry name (lower case). */

/* Locate description record. */
	     d = start_list.desc (mod (s, hbound (start_list.desc, 1)+1));
	     do while (d>0);
		if description (d).sector = s then goto found_desc;
		d = description (d).link;
	     end;
	     call com_err_ (			/* Unable to find desc. */
		0
		, "gfms_file_content_records_"
		, "Can not find description for sector ^6i (^6.3b oct) ""^a"""
		, s
		, unspec (s)
		, fn
		);
fail:	     ;
	     defined = "0"b;			/* File not defined. */
	     goto finish_define_file;

found_desc:    ;

/* Locate file entry of catalog. */
	     f = start_list.file_child (mod (s, hbound (start_list.file_child, 1)+1));
	     do while (f>0);
		if cat (f).child_sector = s then goto found_file;
		f = cat (f).child_link;
	     end;
	     call com_err_ (			/* Unable to find file catalog. */
		0
		, "gfms_file_content_records_"
		, "Can not find sector ^6i (^6.3b oct) ""^a"" file in catalog."
		, s
		, unspec (s)
		, fn
		);
	     goto fail;

found_file:    ;

	     if (n ^= description (d).name) | (n ^= cat (f).name) then
		call com_err_ (			/* Names not consistant. */
		0
		, "gfms_file_content_records_"
		, "Names from content, description and catalog not consistant:"
		||"^/""^a"", ""^a"" and ""^a"""
		||"^/ Using first name."
		, gfms_ascii_ ((n))
		, gfms_ascii_ ((description (d).name))
		, gfms_ascii_ ((cat (f).name))
		);

/* Search the tree (backwards) to determine the
   GCOS catalog/file description and correspondingly
   the Multics pathname.
*/
next_level_up_tree: ;
	     cs = cat (f).parent_sector;		/* Catalog sector of my parent. */
	     f = start_list.cat_child (mod (cs, hbound (start_list.cat_child, 1)+1));
	     do while (f>0);
		if cat (f).child_sector = cs then do;	/* Found my parent. */
		     if length (cfn) = 0 then cfn, dir = cat (f).ascii_name;
		     else do;
			cfn = cat (f).ascii_name||"/"||cfn;
			dir = cat (f).ascii_name||">"||dir;
		     end;
		     goto next_level_up_tree;
		end;
		f = cat (f).child_link;
	     end;

/* Unable to find previous parent.
   => There is no parent, i.e., catalog/file description
   terminated.
*/

/* Collect file information. */
	     fep, fnep = addr (file_name_list.start_entry (file_name_list.next_entry));
	     file_name_entry.char_length.defl = length (bfc);
	     file_name_entry.char_length.naml = length (fn);
	     file_name_entry.char_length.catl = length (cfn);
	     if (file_name_list.next_entry + size (file_name_entry)) > hbound (file_name_list.start_entry, 1) then do;
		if first_warning then
		     call com_err_ (
		     error_table_$too_many_names
		     , "gfms_file_content_records_"
		     , "Only space for first ^i file names. Continuing."
		     , file_name_list.nn
		     );
		first_warning = "0"b;
	     end;
	     else do;				/* Store the next file name entry. */
		nn = nn+1;
		file_name_entry.llinks = l;
		file_name_entry.defective = bfc;
		file_name_entry.name = fn;
		file_name_entry.catalog = cfn;
		unspec (file_name_entry.attr) = unspec (description (d).attributes);
		file_name_list.next_entry =
		     file_name_list.next_entry + size (file_name_entry); /* Locate next available entry. */
	     end;
	     total_llinks = total_llinks + l;		/* Total llinks for all files. */
finish_define_file: ;
	     cfn = cfn||"/"||fn;			/* Complete catalog file description. */
	     if length (dir)>0 then
		dir = ">"|| translate (dir, lower, upper);
	     return;

dcl  cs                       fixed bin(18)unsigned;
dcl  d                        fixed bin;
dcl  f                        fixed bin;
	end define_file;
%page;
display_header: proc (bfc);

/* Display file content header. */
dcl  bfc                      char(20)var parm	/* bad file code. */;
	     call ioa_nnl ("^11x");
	     call ioa_nnl (" file_name2 ^12a", gfms_ascii_ ((file_name2)));
	     call ioa_nnl (" user_name ^12a", gfms_ascii_ ((user_name)));
	     call ioa_nnl (" file_size ^6i llinks", file_size);
	     call ioa_nnl (" file_continued ^1b", file_continued);
	     call ioa_nnl (" file_llinks_in_record ^6i", file_llinks_in_record);
	     call ioa_nnl ("^/^11x");
	     call ioa_nnl (" record_code ^a", record_code_type ());
	     call ioa_nnl (" file_desc_sect_num ^6i", file_desc_sect_num);
	     call ioa_nnl ("^/^11x");
	     if abort_locked ^= "0"b then do;
		bfc = bfc||" AL";
		call ioa_nnl (" abort_locked ^1b", abort_locked);
	     end;
	     if defective_space ^= "0"b then do;
		bfc = bfc||" DS";
		call ioa_nnl (" defective_space ^1b", defective_space);
	     end;
	     if saved_while_write_busy ^= "0"b then do;
		bfc = bfc||" WB";
		call ioa_nnl (" saved_while_write_busy ^1b", saved_while_write_busy);
	     end;
	     if file_creation_date ^= "0"b then
		call ioa_nnl (" file_creation_date ^12a", gfms_date_ (file_creation_date));
	     if defective_llinks ^= "0"b then do;
		bfc = bfc||" DL";
		call ioa_nnl (" defective_llinks ^4.3b", defective_llinks);
	     end;
	     if part_of_file ^= "0"b then do;
		bfc = bfc||" PF";
		call ioa_nnl (" part_of_file ^1b", part_of_file);
	     end;
	     call ioa_nnl ("^/");
	     return;
	end display_header;
%page;
do_file:	proc (c, f)returns (bit (1));

/* Return "1"b if caller designated that
   catalog file description "c" or file "f" is to
   be unloaded.
*/
dcl  c                        char(200)var parm;
dcl  f                        char(12)var parm;
	     if file_names.number_names < 1 then return ("1"b); /* => do all. */
	     k = file_start (gfms_hash_ ((f), hbound (file_start, 1)+1));
	     do while (k>0);			/* Examine if file name specified. */
		if file_name (k).name = f then do;
		     if file_name (k).not then return ("0"b); /* Do not unload file f. */
		     return ("1"b);			/* Do unload file f. */
		end;
		k = file_name (k).link;
	     end;
	     k = cat_start (gfms_hash_ ((c), hbound (cat_start, 1)+1));
	     do while (k>0);			/* Examine if file name specified. */
		if file_name (k).name = c then do;
		     if file_name (k).not then return ("0"b); /* Do not unload file f. */
		     return ("1"b);			/* Do unload file f. */
		end;
		k = file_name (k).link;
	     end;
	     return ("0"b);				/* Neither specified. Don't unload. */

dcl  gfms_hash_               entry (char(*), fixed bin) returns(fixed bin);
dcl  k                        fixed bin;

%include gfms_do_files;
	end do_file;
%page;
dump_rec:	proc (p, l);

/* Display record BCD and octal.
*/
dcl  l                        fixed bin parm;
dcl  p                        ptr parm;
	     n = l-1;				/* Number counting from 0 of l words. */
	     call ioa_$ioa_switch_nnl (iox_$error_output, "^5x");
	     do i = 0 to 7;				/* Print header. */
		call ioa_$ioa_switch_nnl (iox_$error_output, "^13x^i", i);
	     end;
	     call ioa_$ioa_switch_nnl (iox_$error_output, "^/");
	     do i = 0 by 8 to n;
		if i>0 then
		     if last_line = current_line then do;
			if first then do;
			     first = "0"b;
			     call ioa_$ioa_switch_nnl (iox_$error_output, "^6x^12(=^)");
			     call ioa_$ioa_switch_nnl (iox_$error_output, "^/");
			end;
			goto next_line;
		     end;
		first = "1"b;
		call ioa_$ioa_switch_nnl (iox_$error_output, "^4i.", i);
		do j = i to (i+8-1) while (j <= n);	/* Print bcd. */
		     call ioa_$ioa_switch_nnl (iox_$error_output, "^1x^13a", bcd (w (j)));
		end;
		call ioa_$ioa_switch_nnl (iox_$error_output, "^/^5x");
		do j = i to (i+8-1) while (j <= n);	/* Print octal. */
		     call ioa_$ioa_switch_nnl (iox_$error_output, "^1x^6.3b'^6.3b", wl (j), wr (j));
		end;
		call ioa_$ioa_switch_nnl (iox_$error_output, "^/");
next_line:	;
	     end;
	     return;

dcl  current_line             bit(min(8,l-i)*36)aligned based(addr(w(i)));
dcl  first                    bit(1);
dcl  i                        fixed bin;
dcl  ioa_$ioa_switch_nnl      entry() options(variable);
dcl  iox_$error_output        ptr ext static;
dcl  j                        fixed bin;
dcl  last_line                bit(min(8,l-i)*36)aligned based(addr(w(i-8)));
dcl  n                        fixed bin;
dcl  w                        (0:n)bit(36)aligned based(p);

dcl 1 w2			(0:n)aligned based(p)
,     2 wl		bit(18)unal
,     2 wr		bit(18)unal
;
	end dump_rec;
%page;
get_rec:	proc returns (fixed bin);

/* Obtain the next FILE CONTENT record from tape.
   Returns END_OF_FILE when no more input.
   Returns GOT_RECORD when a good record is read.
   Returns SKIP_FILE when a sick record is read.

   If we're restoring a specific UMC, then get_rec "eats" all records
   which don't belong to the user name specified, and only returns
   when one of the foregoing conditions is satisfied.

*/
more:	     ;
	     call iox_$read_record (
		cbp				/* (input) pointer to control block. */
		, addr (fcr_space)			/* (input) record buffer. */
		, size (fcr_space)*4		/* (input) buffer length in bytes. */
		, nbr				/* (output) number of bytes read. */
		, code				/* (output) I/O system status. */
		);
	     if code ^= 0 then
		if code = error_table_$end_of_info then
		     if gfms_end_of_input_ (
		     addr (fcr_space)		/* (input) pointer to input buffer. */
		     , size (fcr_space)*4		/* (input) length of buffer (bytes). */
		     , nbr			/* (input/output) current number bytes in buffer. */
		     ) then return (END_OF_FILE);	/* No more tape input. */
		     else goto cont;		/* Next reel in process. */
		else
		if code ^= error_table_$long_record then do;
		     call com_err_ (
			code
			, "gfms_file_content_records_"
			, "Attempting to read file content record."
			||"^/Tape status ^4.3b"
			||"^/buffer length ^i (bytes)."
			||"^/bytes read ^i."
			||"^/attach description ""^a"""
			, gfms_tape_status_ (cbp)
			, size (fcr_space)*4
			, nbr
			, attach_description
			);
fail:		     ;
		     signal condition (gfms_fail);
		end;

cont:	     ;
	     lc_uname = translate (gfms_ascii_ ((user_name)), lower, upper);
	     if   gfms_ext$umc_name ^= ""		/* Skip this record if it's
						   not related to the specified UMC. */
	        & lc_uname ^= gfms_ext$umc_name
	     then goto more;

	     if   gfms_ext$mapping_rule = "umc"		/* Gotta put the stuff in the
						   right place. */
	     then wd =   rtrim (gfms_ext$working_dir)
		    || ">"
		    || rtrim (lc_uname)
		    || ">"
		    || rtrim (lc_uname);

	     if mod (nbr, 4) ^= 0 then		/* Make sure length in words is consistent. */
		call com_err_ (
		0
		, "gfms_file_content_records_"
		, "Bytes read (^i) not word modulo, will truncate to word and continue."
		, nbr
		);
	     nwr = divide (nbr, 4, 17);		/* Number of words read. */
	     if nwr = 66 then
		if block_size = 65 then
		     if record_size = 64 then
			if no_files_in_record = 1 then
			     if file_llinks_in_record = 0 then do; /* Empty content record. */
				call com_err_ (
				     0
				     , "gfms_file_content_records_"
				     , "Empty content record (file ^i) for ""^a"""
				     , i
				     , gfms_ascii_ ((file_name2))
				     );
				i = i+1;		/* Count file. */
				goto more;
			     end;
	     nw = nwr-1;				/* upper bound of fcr structure. */
	     if nw < lbound (words66_nw, 1) then do;
		call com_err_ (
		     0
		     , "gfms_file_content_records_"
		     , "Faulty file content record."
		     ||"^/file ^i, ^i bytes read."
		     ||"^2/File contents will be inconsistent."
		     , i
		     , nbr
		     );
		call dump_rec (addr (fcr_space), nwr);
		return (SKIP_FILE);			/* Skip this file. */
	     end;
	     return (GOT_RECORD);
end get_rec;
%page;
process_rqo: proc (m);

/* Process record quota overflow (message m).
*/
dcl  m                        char(*)parm;
	     call user_info_$process_type (t);
	     if t ^= 1 then do;			/* Not interactive caller. */
		call com_err_ (
		     0
		     , "gfms"
		     , "Record quota overflow. "||m
		     );
		signal condition (gfms_fail);
	     end;
	     if rqo_in_progress then do;
		call com_err_ (
		     0
		     , "gfms"
		     , "Successive record quota overflow."
		     ||"^/Can not continue."
		     );
		signal condition (gfms_fail);
	     end;
	     rqo_in_progress = "1"b;
	     version = query_info_version_4;
	     yes_or_no_sw = "1"b;			/* Accept only yes or no. */
	     suppress_name_sw = "1"b;			/* Include name. */
	     suppress_spacing = "1"b;
	     cp_escape_control = "00"b;		/* Obey default. */
	     status_code = error_table_$rqover;		/* record quota overflow. */
	     query_code = 0;
	     question_iocbp, answer_iocbp = null ();
	     repeat_time = 0;			/* Don't repeat question. */
	     call command_query_ (
		addr (query_info)
		, ans
		, "gfms"
		, "Record quota overflow. "||m
		||"^/Do you want to correct? "
		);
	     if ans = "no" then signal condition (gfms_fail);
	     on condition (program_interrupt) rqo_in_progress = "0"b;
	     call ioa_ ("You're at command level. Correct and ""pi""");
	     call cu_$cl ();
	     if ^rqo_in_progress then return;
	     call com_err_ (
		0
		, "gfms_file_content_records_"
		, "Record quota overflow. Cannot continue."
		);

	     signal condition (gfms_fail);
dcl  ans                      char(3)var;
dcl  command_query_           entry() options(variable);
dcl  cu_$cl                   entry();
dcl  program_interrupt        condition ext;
dcl  t                        fixed bin;
dcl  user_info_$process_type  entry (fixed bin);
	end process_rqo;
%page;
record_code_type: proc returns (char (*));

/* Evaluate record code. */
	     if record_code = 0 then return ("NORMAL");
	     if record_code = 1 then return ("DELAYED FILE, CONTENT FOLLOWS HEADER");
	     if record_code = 2 then return ("DELAYED FILE, CONTENT LATER");
	     if record_code = 4 then return ("NO CONTENT SAVED");
	     return ("UNKNOW RECORD CODE "||ltrim (char (record_code)));
	end record_code_type;
%page;
unload_record: proc;

/* Unload the current data record into the Multics file. */
	     l = file_llinks_in_record;		/* Expected number of llinks to move. */
	     if (cl + l) > llinks_per_segment then do;	/* About to span a Multics segment. */
		pl, nll = llinks_per_segment - cl;	/* Fill out the segment. */
		l = l - pl;			/* Reduce llinks in record by amount moved. */
		unspec (addrel (cp, 320*cl) -> move_llinks) = /* Move initial part of record. */
		     unspec (addr (fcr.words66_nw) -> move_llinks);

/* Move to next MFS component. */
		cn = cn+1;
		if cn > hbound (c, 1) then do;	/* Exceeded MSF number of components. */
		     call com_err_ (
			code
			, "gfms_file_content_records_"
			, "Exceeded ^i maximum number allowed MSF components:"
			||"^/""^a"""
			, hbound (c, 1)
			, rtrim(wd)||rtrim(sub_dir)||">"||file_entry
			);
		     signal condition (gfms_fail);		/* FOR NOW. */
		end;

		call msf_manager_$get_ptr (		/* Obtain the next MSF component (segment). */
		     fcbp
		     , cn				/* Component number. */
		     , "1"b			/* (input) => create file if non-existent. */
		     , c (cn)
		     , bc				/* (output) bit count. */
		     , code
		     );
		if code ^= 0 then
		     if code ^= error_table_$segknown then do;
			call com_err_ (
			     code
			     , "gfms_file_content_records_"
			     , "Unable to obtain pointer to component ^i of:"
			     ||"^/""^a"""
			     , cn
			     , rtrim(wd)||rtrim(sub_dir)||">"||file_entry
			     );
			signal condition (gfms_fail);
		     end;
		cp = c (cn); cl = 0;		/* Reset to next component segment. */
	     end;
	     else pl = 0;				/* Start of data record to be moved. */
	     nll = l;				/* Number llinks to move. */
	     unspec (addrel (cp, 320*cl) -> move_llinks) = /* Move final part of record. */
		unspec (addrel (addr (fcr.words66_nw), 320*pl) -> move_llinks);
	     cl = cl + nll;				/* Curren length. */
	     return;
	end unload_record;
%page;
/*  Variables for gfms_file_content_records_:			*/
/*   IDENTIFIER		ATTRIBUTES	*/
dcl  a                        fixed bin;
dcl  addr                     builtin;
dcl  addrel                   builtin;
dcl  bc                       fixed bin(24);
dcl  bf                       char(20)var;
dcl  c                        (0:499)ptr;
dcl  cat_ptr                  ptr init(null());
dcl  cfd                      char(200)var;
dcl  char                     builtin;
dcl  cl                       fixed bin(24); /* current length in llinks of seg */
dcl  cn                       fixed bin;
dcl  code                     fixed bin(35);
dcl  com_err_                 entry() options(variable);
dcl  cp                       ptr;
dcl  divide                   builtin;
dcl  END_OF_FILE		fixed bin internal static options (constant) init (3);
dcl  error_table_$end_of_info fixed bin(35) ext static;
dcl  error_table_$long_record fixed bin(35) ext static;
dcl  error_table_$namedup     fixed bin(35) ext static;
dcl  error_table_$noentry     fixed bin(35) ext static;
dcl  error_table_$no_dir      fixed bin(35) ext static;
dcl  error_table_$rqover      fixed bin(35) ext static;
dcl  error_table_$segknown    fixed bin(35) ext static;
dcl  error_table_$too_many_names fixed bin(35) ext static;
dcl  fcbp                     ptr;
dcl  fcr_space                (3906)bit(36)aligned;
dcl  file_entry               char(32);
dcl  first_warning            bit(1);
dcl  fne_ptr                  ptr init(null());
dcl  gcos_file_name           char(12)var;
dcl  gfms_ascii_              entry(bit(*))returns(char(*));
dcl  gfms_date_               entry (bit(36) aligned) returns(char(8));
dcl  gfms_end_of_input_       entry (ptr, fixed bin(21), fixed bin(21)) returns(bit(1));
dcl  gfms_fail                condition ext;
dcl  gfms_gtss_attributes_    entry (char(186), char(32), ptr, bit(36) aligned);
dcl  gfms_print_names_        entry(fixed bin);
dcl  gfms_tape_status_        entry (ptr) returns(bit(12));
dcl  GOT_RECORD		fixed bin internal static options (constant) init (2);
dcl  have_file                bit(1);
dcl  hbound                   builtin;
dcl  i                        fixed bin;
dcl  index                    builtin;
dcl  ioa_                     entry() options(variable);
dcl  iox_$read_record         entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl  j                        fixed bin;
dcl  l                        fixed bin;
dcl  lbound                   builtin;
dcl  lc_uname		char (12);
dcl  length                   builtin;
dcl  llinks_per_segment       fixed bin static int options(constant)init(816);
dcl  lower                    char(26)static int options(constant)init("abcdefghijklmnopqrstuvwxyz");
dcl  ltrim                    builtin;
dcl  min                      builtin;
dcl  mod                      builtin;
dcl  move_llinks              (nll) bit(36*320)aligned based;
dcl  msf_manager_$adjust      entry (ptr, fixed bin, fixed bin(24), bit(3), fixed bin(35));
dcl  msf_manager_$close       entry (ptr);
dcl  msf_manager_$get_ptr     entry (ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35));
dcl  msf_manager_$open        entry (char(*), char(*), ptr, fixed bin(35));
dcl  nbr                      fixed bin(21);
dcl  nll                      fixed bin;
dcl  null                     builtin;
dcl  nw                       fixed bin;
dcl  nwr                      fixed bin;
dcl  pl                       fixed bin;
dcl  record_quota_overflow    condition ext;
dcl  rings                    (3)fixed bin(3)static int options(constant)init(4,4,4);
dcl  rqo_in_progress          bit(1);
dcl  rtrim                    builtin;
dcl  SKIP_FILE		fixed bin internal static options (constant) init (1);
dcl  size                     builtin;
dcl  string                   builtin;
dcl  substr                   builtin;
dcl  sub_dir                  char(168)var;
dcl  t                        fixed bin;
dcl  translate                builtin;
dcl  unloading_file           bit(1);
dcl  unspec                   builtin;
dcl  upper                    char(26)static int options(constant)init("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl  w                        (0:65)bit(36)aligned based(addr(fcr_space));
dcl  wd                       char(168)var;

dcl  hcs_$append_branchx      entry (
			char(*)
,			char(*)
,			fixed bin(5)
,			(3) fixed bin(3)
,			char(*)
,			fixed bin(1)
,			fixed bin(1)
,			fixed bin(24)
,			fixed bin(35)
			);
%page;
/* See DD14, Rev 1 (June 1976) SYSTEM TABLES
   Page 16-27 FILE CONTENT RECORDS (<=3906 words)
*/
dcl 1 fcr			aligned based(addr(fcr_space))
,     3 word0
,       4 block_serial_number	fixed bin(18)unsigned unal
,       4 block_size	fixed bin(18)unsigned unal
,     3 word1
,       4 record_size	fixed bin(18)unsigned unal
,       4 b18_35		bit(18)unal
,     3 content_header
,       4 word2
,         5 record_code	fixed bin(4)unsigned unal
,         5 no_files_in_record fixed bin(4)unsigned unal /* always 1. */
,         5 serial_no_records_in_file fixed bin(4)unsigned unal
,         5 SMC_section_no	fixed bin(6)unsigned unal
,         5 RFG1		bit(18)unal /* RFG => reserved For GCOS. */
,       4 words3_4
,         5 user_name	bit(72)
,       4 word5
,         5 file_desc_sect_num fixed bin(18)unsigned unal
,         5 RFG6		bit(1)unal
,         5 abort_locked	bit(1)unal
,         5 RFG7		bit(7)unal
,         5 defective_space	bit(1)unal
,         5 RFG8		bit(7)unal
,         5 saved_while_write_busy bit(1)unal
,       4 word6
,         5 file_creation_date bit(36)
,       4 word7
,         5 time_at_create	bit(24)unal
,         5 prior_creation	bit(12)unal
,       4 word8
,         5 file_continued	bit(1)unal
,         5 file_llinks_in_record fixed bin(4)unsigned unal
,         5 RFG2		bit(1)unal
,         5 defective_llinks	bit(12)unal
,         5 RFG3		bit(18)unal
,       4 word9
,         5 part_of_file	bit(1)unal
,         5 RFG4		bit(11)unal
,         5 file_size	fixed bin(24)unsigned unal
,       4 words10_11
,         5 file_name	bit(72)
,       4 words12_13
,         5 file_name2	bit(72)
,       4 words14_64
,         5 RFG5		(14:64)bit(36)
,       4 word65
,         5 checksum	bit(36)
,     3 words66_nw		(66:nw)bit(36)
;
%page;
%include gfms_description_tree;
%page;
%include gfms_ext;
%page;
%include gfms_file_name_list;
%page;
%include query_info;
     end gfms_file_content_records_;
