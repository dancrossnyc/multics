/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gfms_dump_description_tree_: proc;

/* Dump description tree.

   Author: Dave Ward	10/23/80
*/
	call ioa_ ("^|DUMP OF cat/desc:");

/* Dump cat. */
	call ioa_ ("^16xprntsc chldlk chldcs name");
	do i = 1 to n_cat;
	     call ioa_ (
		"^6i. ^[catalog^;^3xfile^]^3( ^6i^) ^a"
		, i
		, cat (i).is_cat
		, cat (i).parent_sector
		, cat (i).child_link
		, cat (i).child_sector
		, cat (i).ascii_name
		);
	end;

/* DUMP description. */
	call ioa_ ("^11xlink sector maxsiz mode name");
	do i = 1 to n_desc;
	     call ioa_$nnl (
		"^6i. ^3( ^6i^) ^4b ^a"
		, i
		, description (i).link
		, description (i).sector
		, description (i).attributes.max_size_llinks
		, description (i).attributes.mode
		, gfms_ascii_ ((description (i).name))
		);
	     if description (i).attributes.user_info.present then
		call ioa_$nnl (" ^12.3b", "0"b||attributes (i).value);
	     call ioa_$nnl ("^/");
	end;

/* Check hash chains consume all entries. */
	string (cu) = "0"b;
	call tc (cat_child, cu, "1"b);
	call tc (file_child, cu, "1"b);
	if ^string (cu) ^= "0"b then do;		/* cat entries unaccounted for. */
	     do i = 1 to hbound (cu, 1);
		if cu (i) = "0"b then
		     call ioa_ (
		     "cat^3i NOT USED ^a"
		     , i
		     , cat (i).ascii_name
		     );
	     end;
	end;

	string (du) = "0"b;
	call tc (desc, du, "0"b);
	if ^string (du) ^= "0"b then do;		/* cat entries unaccounted for. */
	     do i = 1 to hbound (du, 1);
		if du (i) = "0"b then
		     call ioa_ (
		     "cat^3i NOT USED ^a"
		     , i
		     , cat (i).ascii_name
		     );
	     end;
	end;
fail:	;
	return;
tc:	proc (l, u, c);

/* Trace chains from start list "l", marking "u" for
   all entries found. "c" is "1"b of this is for cat, versus
   for description.
*/
dcl  c                        bit(1) parm;
dcl  l                        (0:1020)fixed bin(18)unsigned parm;
dcl  u                        (*)bit(1)unal parm;
	     do i = 0 to 1020;
		if l (i)>0 then do;
		     k = l (i);
		     do while (k>0);
			if k>hbound (u, 1) then do;
			     call com_err_ (
				0
				, "gfms_dump_description_tree_"
				, "BUG: link ^i > number entries ^[cat^;desc^] ^i"
				, k
				, c
				, hbound (u, 1)
				);
			     goto fail;
			end;
			u (k) = "1"b;		/* Mark used. */
			if c then k = cat (k).child_link;
			else k = description (k).link;
		     end;
		end;
	     end;
	     return;

dcl  i                        fixed bin;
dcl  k                        fixed bin;
	end tc;
%page;
/*   Variables for gfms_dump_description_tree_:		*/
/*   IDENTIFIER		ATTRIBUTES		*/
dcl  com_err_ entry() options(variable);
dcl  cu                       (n_cat)bit(1)unal based(addr(u));
dcl  du                       (n_desc)bit(1)unal based(addr(u));
dcl  gfms_ascii_              entry (bit(*)) returns(char(*));
dcl  i                        fixed bin;
dcl  ioa_                     entry() options(variable);
dcl  ioa_$nnl                 entry() options(variable);
dcl  u                        bit(36000)aligned;
%page;
%include gfms_description_tree;
%include gfms_ext;
     end;
