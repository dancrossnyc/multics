/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_imp_word.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 07/17/80 by FCH, TEMPORARY was not recognized, [4.3-1], phx06605d(BUG439) */
/* Modified on 10/11/79 by MHD, [4.1-1], added CHECKPOINT-FILE for RERUN */
/* Modified on 06/14/79 by FCH, [4.0-1], run time debug switch */
/* Modified since Version 4.0 */

/* format: style3 */
cobol_imp_word:
     proc (word_ptr) returns (fixed bin);

/*
	switch_name	1(308)	switch-1
			2(309)	switch-2
			3(310)	switch-3
			4(311)	switch-4
			5(312)	switch-5
			6(313)	switch-6
			7(314)	switch-7
			8(315)	switch-8
			9	switch-9	used for run-time switch by DEBUGGING

	device_name	9(281)	sysin
			10(294)	sysout
			11(197)	console

	alphabet_name	20(505)	ascii
			21(273)	ebcdic
			22(418)	gbcd
			23(274)	hbcd
			24(275)	ibcd
			25(276)	jis

	device_appendage	30(199)	card-punch
			31(217)	msd
			32(261)	preattached
			33(198)	printer
			34(283)	virtual
			35(200)	card-reader

	computer_name	40(303)	multics
			41(299)	gcos
			42(103)	level-61-ascii
			43(436)	level-66-ascii
			44(289)	level-62
			45(429)	level-66
			46(303)	level-68
			47(300)	level-64
			48(297)	his-series-60
			49	level-6

	label_name	60(296)	file-id
			61(430)	retention
			62(331)	catalog-name
			62(331)	catalogue-name

	comp_type		80(106)	comp	computational
			81(212)	comp-1	computational-1
			82(213)	comp-2	computational-2
			83(211)	comp-3	computational-3
			84(209)	comp-4	computational-4
			85(210)	comp-5	computational-5
			86(292)	comp-6	computational-6
			87(290)	comp-7	computational-7
			88(610)	comp-8	computational-8

	disp_type		130(42)	disp	display
			131(317)	disp-1	display-1
			132(318)	disp-2	display-2
			133(319)	disp-3	display-3
			134(320)	disp-4	display-4

	io_technique	90	additional
			91	address-format
			92(412)	attach-options
			93(282)	banner
			94	density
			95(405)	detach
			96	device
			97	force
			98	modification
			99	output-mode
			100(410)	permanent
			101	protect
			102	retain
			103	tape-options
			104(409)	temporary
			105	generation
			106	replacement

	file_org		110(422)	complementary
			111(439)	ext
			112(431)	secondary
			113(285)	h-2000
			114(337)	his
			115(298)	ibm-dos
			116(330)	ibm_os
			117(419)	gfrc
			118	uff
			119(136)	ansi

	forign_label_name	140	id

	language_name	200(191)	cobol
			201	pl/i
			202	alm
			203	fortran
			204	apl
			205	basic
	printer_control	210	hof
			211	channel-1
			...	...
			226	channel-16

	misc		1000	temp
			1001	maximum
			1002	supervisor
			1003	descriptors
			1004	aggregate
			1005	scalar
			1006	substitution
			1007	bits
			1008	multiply
[4.1-1]			1009	checkpoint-file

*/


declare	word_ptr		ptr,
	word_size		fixed bin;
declare	(addr, substr, index)
			builtin;

declare	(Wptr, Kptr)	ptr,
	loc		fixed bin;
declare	key		fixed bin;

declare	wd		char (32) varying;

declare	word		char (32) based (word_ptr);
declare	chars		char (1000) based (Wptr);
declare	K		(1000) fixed bin based (Kptr);

declare	W2		(1) char (2) static internal init ("id");

declare	K2		(1) fixed bin static internal,
	init		(140);

declare	W3		(8) char (3) static internal init ("jis", "uff", "his", "hof", "msd", "alm", "apl", "ext");

declare	K3		(8) fixed bin static internal init (25, 118, 114, 210, 31, 202, 204, 111);

declare	W4		(11) char (4) static internal
			init ("gcos", "gbcd", "hbcd", "ibcd", "ansi", "temp", "comp", "disp", "pl/i", "bits",
			"gfrc");

declare	K4		(11) fixed bin static internal init (41, 22, 23, 24, 119, 1000, 80, 130, 201, 1007, 117);

declare	W5		(5) char (5) static internal init ("sysin", "ascii", "cobol", "basic", "force");

declare	K5		(5) fixed bin static internal init (9, 20, 200, 205, 97);

declare	W6		(21) char (6) static internal
			init ("sysout", "comp-1", "comp-2", "comp-3", "comp-4", "comp-5", "comp-6", "comp-7",
			"comp-8", "disp-1", "disp-2", "disp-3", "disp-4", "ebcdic", "ibm-os", "h-2000", "detach",
			"device", "banner", "scalar", "retain");

declare	K6		(21) fixed bin static internal
			init (10, 81, 82, 83, 84, 85, 86, 87, 88, 131, 132, 133, 134, 21, 116, 113, 95, 96, 93,
			1005, 102);

declare	W7		(11) char (7) static internal
			init ("console", "multics", "ibm-dos", "density", "file-id", "printer", "virtual",
			"maximum", "fortran", "level-6", "protect");

declare	K7		(11) fixed bin static internal init (11, 40, 115, 94, 60, 33, 34, 1001, 203, 49, 101);

declare	W8		(14) char (8) static internal /* [4.0-1] */
			init ("switch-1", "switch-2", "switch-3", "switch-4", "switch-5", "switch-6", "switch-7",
			"switch-8", "switch-9",	/* [4.0-1] */
			"multiply", "level-62", "level-66", "level-68", "level-64");

declare	K8		(14) fixed bin static internal /* [4.0-1] */ init (1, 2, 3, 4, 5, 6, 7, 8, 9,
						/* [4.0-1] */
			1008, 44, 45, 46, 47);

declare	W9		(14) char (9) static internal
			init ("secondary", "temporary", "permanent", "channel-1", "channel-2", "channel-3",
			"channel-4", "channel-5", "channel-6", "channel-7", "channel-8", "channel-9", "aggregate",
			"retention");

declare	K9		(14) fixed bin static internal
			init (112, 104, 100, 211, 212, 213, 214, 215, 216, 217, 218, 219, 1004, 61);

declare	W10		(11) char (10) static internal
			init ("additional", "generation", "supervisor", "channel-10", "channel-11", "channel-12",
			"channel-13", "channel-14", "channel-15", "channel-16", "card-punch");

declare	K10		(11) fixed bin static internal init (90, 105, 1002, 220, 221, 222, 223, 224, 225, 226, 30);

declare	W11		(5) char (11) static internal
			init ("output-mode", "card-reader", "replacement", "descriptors", "preattached");

declare	K11		(5) fixed bin static internal init (99, 35, 106, 1003, 32);

declare	W12		(4) char (12) static internal
			init ("tape-options", "catalog-name", "substitution", "modification");

declare	K12		(4) fixed bin static internal init (103, 62, 1006, 98);

declare	W13		(2) char (13) static internal init ("complementary", "his-series-60");

declare	K13		(2) fixed bin static internal init (110, 48);

declare	W14		(5) char (14) static internal
			init ("level-61-ascii", "level-66-ascii", "address-format", "catalogue-name",
			"attach-options");

declare	K14		(5) fixed bin static internal init (42, 43, 91, 62, 92);

declare	W15		(8) char (15) static internal
			init ("computational-1", "computational-2", "computational-3", "computational-4",
			"computational-5", "computational-6", "computational-7",
						/*[4.1-1]*/
			"checkpoint-file");

declare	K15		(8) fixed bin static internal init (81, 82, 83, 84, 85, 86, 87,
						/*[4.1-1]*/
			1009);



find_word:
     proc;

	if user_word.type ^= 8 | user_word.length > 15
	then go to ret_0;
	wd = substr (user_word.word, 1, user_word.length);
	word_size = user_word.length;

	go to S (word_size);

S (0):
	loc = 0;
	return;

S (1):
	Wptr = addr (W2 (1));
	Kptr = addr (K2 (1));
	go to SS;

S (2):
	Wptr = addr (W2 (1));
	Kptr = addr (K2 (1));
	go to SS;

S (3):
	Wptr = addr (W3 (1));
	Kptr = addr (K3 (1));
	go to SS;

S (4):
	Wptr = addr (W4 (1));
	Kptr = addr (K4 (1));
	go to SS;

S (5):
	Wptr = addr (W5 (1));
	Kptr = addr (K5 (1));
	go to SS;

S (6):
	Wptr = addr (W6 (1));
	Kptr = addr (K6 (1));
	go to SS;

S (7):
	Wptr = addr (W7 (1));
	Kptr = addr (K7 (1));
	go to SS;

S (8):
	Wptr = addr (W8 (1));
	Kptr = addr (K8 (1));
	go to SS;

S (9):
	Wptr = addr (W9 (1));
	Kptr = addr (K9 (1));
	go to SS;

S (10):
	Wptr = addr (W10 (1));
	Kptr = addr (K10 (1));
	go to SS;

S (11):
	Wptr = addr (W11 (1));
	Kptr = addr (K11 (1));
	go to SS;

S (12):
	Wptr = addr (W12 (1));
	Kptr = addr (K12 (1));
	go to SS;

S (13):
	Wptr = addr (W13 (1));
	Kptr = addr (K13 (1));
	go to SS;

S (14):
	Wptr = addr (W14 (1));
	Kptr = addr (K14 (1));
	go to SS;

S (15):
	Wptr = addr (W15 (1));
	Kptr = addr (K15 (1));
	go to SS;

SS:
	if Wptr = null () | Kptr = null ()
	then do;
		loc = 0;
		return;
	     end;

	loc = index (chars, wd);

	if loc = 0
	then return;

	loc = K ((loc - 1) / word_size + 1);

     end;

ret_0:
	return (0);

imp_word:
     entry (word_ptr) returns (fixed bin);

	call find_word;

	return (loc);

lang_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		if reserved_word.key = 191
		then return (1);
		else return (0);
	     end;

	call find_word;

	if loc >= 200 & loc <= 205
	then return (loc - 199);
	else return (0);

switch_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key >= 308 & key <= 315
		then return (key - 307);
		else return (0);
	     end;

	call find_word;

	if loc >= 1 & loc < 8
	then return (loc);
	else return (0);

printer_control:
     entry (word_ptr) returns (fixed bin);

	if loc >= 210 & loc < 230
	then return (loc - 209);
	else return (0);

device_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.key = 1
	then do;
		key = reserved_word.key;

		if key = 281
		then return (1);
		else if key = 294
		then return (2);
		else if key = 197
		then return (3);
		else return (0);
	     end;

	call find_word;

	if loc >= 9 & loc < 20
	then return (loc - 8);
	else return (0);

alphabet_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;
		if key = 505
		then return (1);
		else if key = 273
		then return (2);
		else if key = 418
		then return (3);
		else if key = 274
		then return (4);
		else if key = 275
		then return (5);
		else if key = 276
		then return (6);
		else return (0);
	     end;

	call find_word;

	if loc >= 20 & loc < 30
	then return (loc - 19);
	else return (0);

device_appendage:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 199
		then return (1);
		else if key = 217
		then return (2);
		else if key = 198
		then return (4);
		else if key = 283
		then return (5);
		else if key = 200
		then return (6);
		else return (0);
	     end;

	call find_word;

	if loc >= 30 & loc < 40
	then return (loc - 29);
	else return (0);

computer_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 303
		then return (1);
		else if key = 299
		then return (2);
		else if key = 103
		then return (3);
		else if key = 436
		then return (4);
		else if key = 289
		then return (5);
		else if key = 429
		then return (6);
		else if key = 303
		then return (7);
		else if key = 300
		then return (8);
		else if key = 297
		then return (9);
		else return (0);
	     end;

	call find_word;

	if loc >= 40 & loc < 60
	then return (loc - 39);
	else return (0);

label_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 331
		then return (3);
		else return (0);
	     end;

	call find_word;

	if loc >= 60 & loc < 80
	then return (loc - 59);
	else return (0);

forign_label_name:
     entry (word_ptr) returns (fixed bin);

	call find_word;

	if loc = 140
	then return (loc - 139);
	else return (0);

comp_type:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 106
		then return (1);
		else if key = 212
		then return (2);
		else if key = 213
		then return (3);
		else if key = 211
		then return (4);
		else if key = 209
		then return (5);
		else if key = 210
		then return (6);
		else if key = 292
		then return (7);
		else if key = 290
		then return (8);
		else if key = 610
		then return (9);
		else return (0);
	     end;

	call find_word;

	if loc >= 80 & loc < 90
	then return (loc - 79);
	else return (0);

disp_type:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 42
		then return (1);
		else if key = 317
		then return (2);
		else if key = 318
		then return (3);
		else if key = 319
		then return (4);
		else if key = 320
		then return (5);
		else return (0);

	     end;

	call find_word;

	if loc >= 130 & loc < 140
	then return (loc - 129);
	else return (0);

io_technique:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 412
		then return (3);
		else if key = 282
		then return (4);
		else if key = 95
		then return (6);
		else if key = 410
		then return (11);			/*[4.3-1]*/
		else if key = 409
		then return (15);
		else return (0);
	     end;

	call find_word;

	if loc >= 90 & loc < 110
	then return (loc - 89);
	else return (0);

file_org:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 422
		then return (1);
		else if key = 439
		then return (2);
		else if key = 431
		then return (3);
		else if key = 285
		then return (4);
		else if key = 337
		then return (5);
		else if key = 298
		then return (6);
		else if key = 330
		then return (7);
		else if key = 419
		then return (8);
		else if key = 136
		then return (9);
		else return (0);
	     end;
	call find_word;

	if loc >= 110 & loc < 120
	then return (loc - 109);
	else return (0);

declare	1 reserved_word	based (word_ptr),
%include cobol_TYPE1;

declare	1 user_word	based (word_ptr),
%include cobol_TYPE8;

     end;
