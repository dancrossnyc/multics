/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_opch_is.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* format: style3 */
cobol_opch_is:
     proc (source_ptr, target_ptr);

/*
This procuedre sets up an argument list and calls an alm procedure
which in turn calls the cobol overpunch operator to move an
initial value into an overpunch sign data item in the constant section.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	source_ptr	ptr;
dcl	target_ptr	ptr;

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER	DESCRIPTION

source_ptr	Pointer to the data name (type 9) token in the constant
		section to be initialized.(input)
target_ptr	Pointer to the space in the constant segment to be
		initialized. (input)
*/

/*  DECLARATIONS OF EXTERNAL ENTRIES  */

dcl	cobol_opch_init	ext entry (ptr, ptr, bit (36), bit (36), fixed bin (35), fixed bin (35));

/*  DECLARATIONS OF BUILTIN FUNCTIONS  */

dcl	addrel		builtin;
dcl	addr		builtin;
dcl	bin		builtin;
dcl	bit		builtin;
dcl	fixed		builtin;
dcl	substr		builtin;


/*  DECLARATIONS OF INTERNAL VARIABLES  */

dcl	work_ptr		ptr;
dcl	work_space	char (40);

dcl	1 s_scale		aligned,
	  2 scale		fixed bin (17) unaligned,
	  2 precision	fixed bin (17) unaligned;

dcl	1 t_scale		aligned,
	  2 scale		fixed bin (17) unaligned,
	  2 precision	fixed bin (17) unaligned;

dcl	temp_precision	fixed bin (17);
dcl	s_code		fixed bin (35);
dcl	t_code		fixed bin (35);

dcl	source_scale	bit (36) based (s_scale_ptr);
dcl	target_scale	bit (36) based (t_scale_ptr);

dcl	s_scale_ptr	ptr;
dcl	t_scale_ptr	ptr;

dcl	dn_ptr		ptr;



/**************************************************/
/*	START OF EXECUTION		*/
/**************************************************/


	s_scale_ptr = addr (s_scale);
	t_scale_ptr = addr (t_scale);			/*  Establish addressability to the initial value extension.  */
	num_init_ptr = addrel (source_ptr, divide (source_ptr -> data_name.initial_ptr, 4, 17));

	work_ptr = addr (work_space);

/*  Check to see whether the constant or zero should be moved to the constant section.  */
	if (num_init.places_right + source_ptr -> data_name.places_left) <= 0
	     | (num_init.places_left + source_ptr -> data_name.places_right) <= 0 | (num_init.fig_con = "1"b)
	then do;					/*  Move zero to the constant segment, because no part of the source field (the literal)
	can be contained in the target.  */

		substr (work_space, 1, 1) = "0";	/*  Insert trailing sign  */
		if num_init.sign = " "
		then substr (work_space, 2, 1) = "+";	/*  default plus  */
		else substr (work_space, 2, 1) = num_init.sign;

/*  Calculate the precision of the new source. (places right)  */
		temp_precision = 1 - source_ptr -> data_name.places_left;

		s_scale.scale = temp_precision;
		s_scale.precision = 2;

	     end;					/*  Move zero to the constant segment, because no part of the source field (the literal)
		can be contained in the target variable.  */


	else do;					/*  Construct a trailing sign decimal constant to be the source.  */

		substr (work_space, 1, num_init.places) = substr (num_init.literal, 1, num_init.places);

		if num_init.sign = " "
		then substr (work_space, num_init.places + 1, 1) = "+";
		else substr (work_space, num_init.places + 1, 1) = num_init.sign;

		s_scale.scale = num_init.places_right;
		s_scale.precision = num_init.places + 1;

	     end;					/*  Construct a trailing sign decimal constant to be the source.  */

	s_code = 3;				/*  Unpacked decimal, trailing sign source.  */

	if source_ptr -> data_name.sign_type = "010"b	/*  leading overpunch  */
	then t_code = 1;
	else t_code = 2;				/*  trailing overpunch  */

	t_scale.scale = source_ptr -> data_name.places_right;
	t_scale.precision = source_ptr -> data_name.item_length;

	call cobol_opch_init (work_ptr, target_ptr, source_scale, target_scale, s_code, t_code);


/*  INCLUDE FILES USED BY THIS PROCEDURE  */

%include cobol_type9;


%include cobol_init_val_ext;


     end cobol_opch_is;
