/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_io_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 10/27/81 by FCH, [5.1-1], issue diag if long line found, phx11819(BUG517) */
/* Modified on 10/21/80 by FCH, [4.4-1], entry cobol_msf_start added for report writer */
/* Modified on 10/16/79 by MHD, [4.1-1], changed expand_path_ to expand_pathname_, change 01011 to 01010 in make_seg calls */
/* Modified on 05/01/79 by FCH, [4.0-1], tab scanning added, debug statement */
/* Modified since Version 4.0 */






/* format: style3 */
cobol_io_:
     proc;

/*************************************/

initialize:
     entry;

/*[4.0-1]*/
	LINE72.nl = "
";

/*[4.0-1]*/
	TAB = "	";				/*[4.0-1]*/
	STATE, REC_NUM = 0;				/*[4.0-1]*/
	return;

set_state:
     entry (st_num);

/*[4.0-1]*/
	STATE = st_num;				/*[4.0-1]*/
	REC_NUM = 0;				/*[4.0-1]*/
	return;

cobol_cselfle:
cselfle:
     entry (cist, cifp, cifn, cilt, cisr, cioc, cifm);

dcl	cist		bit (32);
dcl	cifp		ptr;
dcl	cifn		char (*);
dcl	cilt		fixed bin;
dcl	cisr		fixed bin;
dcl	cioc		char (1) aligned;
dcl	cifm		bit (8);

start_cselfle:
	if cioc = "k" | cioc = "K"
	then do;

		if cisr = 1
		then do;				/* set bit count */

			bc = 9 * (fixed (substr (bptr, 37, 18), 18)) * 4 + fixed (substr (bptr, 55, 9), 9);

			call hcs_$set_bc_seg (cifp, bc, mcode);

			if mcode ^= 0
			then go to ci_error;

		     end;
		else if cisr = -1
		then do;

			call hcs_$truncate_seg (cifp, 0, mcode);

			if mcode ^= 0
			then go to ci_error;

		     end;

		call hcs_$terminate_noname (cifp, mcode);

		if mcode ^= 0
		then go to ci_error;

		cifp = null ();

	     end;
	else do;

/*[4.1-1]*/
		call expand_pathname_ (cifn, dname, ename, mcode);

		if mcode ^= 0
		then go to ci_error;

		if cioc ^= "h"
		then do;

			call hcs_$initiate (dname, ename, "", 0b, 00b, cifp, mcode);

			if cifp = null ()
			then go to ci_error;

			temp = index (cistr, nl);

			if temp = 0
			then do;

				mcode = error_table_$improper_data_format;

				go to ci_error;

			     end;
		     end;
		else do;

/*[4.1-1]*/
			call hcs_$make_seg (dname, ename, "", 01010b, cifp, mcode);

			if cifp = null ()
			then go to ci_error;

			call hcs_$truncate_seg (cifp, 0, mcode);

			if mcode ^= 0
			then go to ci_error;

		     end;
	     end;

	cist = ""b;

	return;

cobol_get_rec:
get_rec:
     entry (cst, cfp, csr, crp, crl);

dcl	cst		bit (32);
dcl	cfp		ptr;
dcl	csr		fixed bin;
dcl	crp		ptr;
dcl	crl		fixed bin;

start_get_rec:					/*[5.1-1]*/
	go to GRS (STATE);

GRS (0):						/*[5.1-1]*/
	if csr = 0
	then do;
		cst = eof;
		return;
	     end;

	crl = index (cstr, nl);

	if crl = 0
	then cst = eof;
	else do;

/*[4.0-1]*/
		if substr (fixed_common.compile_mode, 3, 1)
						/*[4.0-1]*/
		then call expand_line;		/*[4.0-1]*/
		else crp = cfp;

		cfp = addr (substr (cstr, crl + 1, 1));
		cst = ""b;

/*[5.1-1]*/
		csr = csr - crl;

	     end;

	return;

/* called by cobol_res_words, after WORKING STORAGE */
/*[4.0-1]*/

GRS (1):						/*[4.0-1]*/
	REC_NUM = REC_NUM + 1;			/*[4.0-1]*/
	call cobol_db_phase$get_rec (crp, REC_NUM);

GR1:						/*[4.0-1]*/
	if REC_NUM = 0				/*[4.0-1]*/
	then do;
		STATE = 0;			/*[5.1-1]*/
		go to GRS (0);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	cst = ""b;				/*[4.0-1]*/
	crl = 73;

/*[4.0-1]*/
	return;

/* called by cobol_res_words, after PROCEDURE DIVISION */
GRS (2):						/*[4.0-1]*/
	REC_NUM = REC_NUM + 1;

/*[4.0-1]*/
	call cobol_db_phase$get_tok (crp, REC_NUM);

/*[4.0-1]*/
	go to GR1;				/* called by cobol_res_words, after end declaratives */
GRS (3):						/*[4.0-1]*/
	REC_NUM = REC_NUM + 1;

/*[4.0-1]*/
	call cobol_db_phase$get_perf (crp, REC_NUM);

/*[4.0-1]*/
	go to GR1;

cobol_put_rec:
put_rec:
     entry (cst, cfp, csr, crp, crl);

start_put_rec:
	if substr (incstr, crl, 1) ^= nl
	then do;					/* add new-line if necessary */

		substr (cstr, 1, crl + 1) = incstr || nl;

		cfp = addr (substr (cstr, crl + 2, 1));

	     end;
	else do;

		substr (cstr, 1, crl) = incstr;
		cfp = addr (substr (cstr, crl + 1, 1));

	     end;

	cst = ""b;

	return;


/*[4.0-1]*/

expand_line:
     proc;

/*[4.0-1]*/
dcl	(i, j, tab_loc)	fixed bin;		/*[4.0-1]*/
dcl	ch		char (1);

/*[4.0-1]*/
	tab_loc = index (substr (cstr, 1, 72), TAB);

/*[4.0-1]*/
	if tab_loc <= 0				/*[4.0-1]*/
	then do;
		LINE72.body = substr (cstr, 1, 72);	/*[4.0-1]*/
		crl = 73;				/*[4.0-1]*/
		crp = addr (LINE72);		/*[4.0-1]*/
		return;				/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	i, j = 1;
	tab_loc = 11;
	LINE72.body = " ";

/*[4.0-1]*/
	do while ("1"b);

/*[4.0-1]*/
	     ch = substr (cstr, i, 1);

/*[4.0-1]*/
	     if ch ^= TAB				/*[4.0-1]*/
	     then do;
		     substr (LINE72.body, j, 1) = ch;	/*[4.0-1]*/
		     i = i + 1;			/*[4.0-1]*/
		     j = j + 1;			/*[4.0-1]*/
		     if j = 73
		     then go to END;		/*[4.0-1]*/
		end;				/*[4.0-1]*/
	     else do;
		     i = i + 1;

/*[4.0-1]*/
		     if i = crl
		     then go to END;

/*[4.0-1]*/
		     do while (tab_loc < j);		/*[4.0-1]*/
			tab_loc = tab_loc + 11;	/*[4.0-1]*/
		     end;

/*[4.0-1]*/
		     if tab_loc > 72
		     then go to END;

/*[4.0-1]*/
		     j = tab_loc;			/*[4.0-1]*/
		end;
	end;

END:						/*[4.0-1]*/
	crl = 73;					/*[4.0-1]*/
	crp = addr (LINE72);

     end;

/*************************************/
cobol_swf:
cobol_vdwf:
swf:
vdwf:
     entry (fp, fn);

dcl	fp		ptr;
dcl	fn		char (*);
dcl	temp_ptr		ptr;			/* temporary ptr */
dcl	st		bit (32);
dcl	rp		ptr;
dcl	rl		fixed bin;
dcl	pm		char (2) aligned;
dcl	rk		char (5) unaligned;

start_init:					/*[4.1-1]*/
	call expand_pathname_ (fn, dname, ename, mcode);

	if mcode ^= 0
	then go to init_error;

/*[4.1-1]*/
	call hcs_$make_seg (dname, ename, "", 01010b, fp, mcode);

	if fp = null ()
	then go to init_error;

	call hcs_$truncate_seg (fp, 0, mcode);

	if mcode ^= 0
	then go to init_error;

	return;

cobol_swf_open:
swf_open:
     entry (fp, st, rp, rl, pm);

start_swf_open:
	if pm = "in"
	then do;

		if shdr.code ^= 10
		then go to soi_error;		/* bad format */

		temp_ptr = shdr.prev_file;

		do while (temp_ptr ^= null ());

		     fp = temp_ptr;
		     temp_ptr = fp -> shdr.prev_file;

		end;
	     end;
	else do;					/* output */

		call hcs_$truncate_seg (fp, 0, mcode);

		if mcode ^= 0
		then go to soo_error;

		shdr.code = 10;
		shdr.prev_file = null ();
		shdr.next_file = null ();

		call hcs_$fs_get_path_name (fp, dname, len, ename, mcode);

		if mcode ^= 0
		then call com_err_ (mcode, "cobol_io", "fail to get path name");

		if ename = "cobol_pdout_"
		then fc = "pout";
		else if ename = "cobol_minpral-1_"
		then fc = "min1";
		else if ename = "cobol_minpral-2_"
		then fc = "min2";
		else if ename = "cobol_rmin2_"
		then fc = "rmin";

	     end;

	shdr.next = 15;
	st = ""b;

	return;

cobol_swf_get:
swf_get:
     entry (fp, st, rp, rl);

start_swf_get:
	vp = pointer (fp, shdr.next);
	rl = length (vstr);

	if rl = 0
	then call cobol_ms_handler$get (fp, vp, st, rp, rl);

	else do;

		rp = addrel (vp, 1);
		shdr.next = shdr.next + divide (rl + 7, 4, 17, 0);
		st = ""b;

	     end;

	return;

cobol_msf_start:
     entry (fp, rp);

/*[4.4-1]*/
	rseg = binary (baseno (rp));			/*[4.4-1]*/
	fseg = binary (baseno (fp));

/*[4.4-1]*/
	do while (rseg ^= fseg);

/*[4.4-1]*/
	     fp = shdr.next_file;
	     fseg = binary (baseno (fp));

/*[4.4-1]*/
	end;

/*[4.4-1]*/
	shdr.next = binary (rel (rp));

/*[4.4-1]*/
	return;

cobol_save_pos:
     entry (fp, rp);

/*[4.4-1]*/
	rp = addrel (fp, shdr.next);

/*[4.4-1]*/
	return;


cobol_db_put:
     entry (fp, st, rp, rl, rloc);

/*[4.0-1]*/
	if shdr.next > 260000
	then call cobol_ms_handler$put (fp, vp, st);

/*[4.0-1]*/
	vp, rloc = pointer (fp, shdr.next);

/*[4.0-1]*/
	go to csput;

cobol_swf_put:
swf_put:
     entry (fp, st, rp, rl);

start_swf_put:
	if shdr.next > 260000
	then call cobol_ms_handler$put (fp, vp, st);

	vp = pointer (fp, shdr.next);

csput:
	vstr = instr;
	shdr.next = shdr.next + divide (rl + 7, 4, 17, 0);
	st = ""b;

	return;

cobol_swf_close:
swf_close:
     entry (fp, st, rp, rl);

start_close:
	if file_no = 0
	then shdr.prev_file = null ();

	temp_ptr = shdr.prev_file;

	if rl = 1
	then do;					/* close and delete */

		call hcs_$truncate_seg (fp, 0, mcode);

		if mcode ^= 0
		then go to close_error;

		call hcs_$terminate_seg (fp, 0b, mcode);

		if mcode ^= 0
		then go to close_error;

	     end;
	else do;

		bc = 36 * shdr.next;

		call hcs_$set_bc_seg (fp, bc, mcode);

		if mcode ^= 0
		then go to close_error;

	     end;

	st = ""b;

	if temp_ptr ^= null ()
	then do;

		fp = temp_ptr;
		go to start_close;

	     end;

	return;

cobol_vdwf_close:
     entry (fp, st, rp, rl);

	if rl = 1
	then do;

		call hcs_$truncate_seg (fp, 0, mcode);

		if mcode ^= 0
		then go to close_error;

		call hcs_$terminate_seg (fp, 0b, mcode);

		if mcode ^= 0
		then go to close_error;

	     end;
	else do;

		bc = 36 * vhdr.next_put;

		call hcs_$set_bc_seg (fp, bc, mcode);

		if mcode ^= 0
		then go to close_error;

	     end;

	st = ""b;

	return;


cobol_vdwf_open:
vdwf_open:
     entry (fp, st);

start_vdwf_open:
	if vhdr.code ^= 2
	then do;

		vhdr.next_put = 8;
		vhdr.code = 2;



	     end;

	vhdr.next_get = 8;
	st = ""b;

	return;

cobol_vdwf_sget:
vdwf_sget:
     entry (fp, st, rp, rl, rk);

start_vdwf_sget:
	vp = pointer (fp, vhdr.next_get);
	rl = length (vstr);

	if rl <= 0
	then st = eof;

	else do;

		if fp = cobol_ext_$cobol_ntfp
		then rp = vp;
		else rp = addrel (vp, 1);

		rkb = vhdr.next_get;
		rk = rkt;

		if fp = cobol_ext_$cobol_ntfp
		then vhdr.next_get = vhdr.next_get + divide (rl + 11, 8, 17, 0) * 2;
		else vhdr.next_get = vhdr.next_get + divide (rl + 11, 4, 17, 0);

		st = ""b;

	     end;

	return;







cobol_vdwf_sput:
vdwf_sput:
     entry (fp, st, rp, rl, rk);

start_vdwf_sput:
	vp = pointer (fp, vhdr.next_put);

	if fp = cobol_ext_$cobol_ntfp
	then nt_vstr = instr;
	else vstr = instr;

	rkb = vhdr.next_put;
	rk = rkt;

	if fp = cobol_ext_$cobol_ntfp
	then vhdr.next_put = vhdr.next_put + divide (rl + 11, 8, 17, 0) * 2;
	else vhdr.next_put = vhdr.next_put + divide (rl + 11, 4, 17, 0);

	st = ""b;

	return;

cobol_vdwf_dget:
vdwf_dget:
     entry (fp, st, rp, rl, rk);

start_vdwf_dget:
	rkt = rk;
	vp = pointer (fp, rkb);

	if fp = cobol_ext_$cobol_ntfp
	then rp = vp;
	else rp = addrel (vp, 1);

	rl = length (vstr);

	if fp = cobol_ext_$cobol_ntfp
	then vhdr.next_get = rkb + divide (rl + 11, 8, 17, 0) * 2;
	else vhdr.next_get = rkb + divide (rl + 11, 4, 17, 0);

	st = ""b;

	return;

cobol_vdwf_dput:
vdwf_dput:
     entry (fp, st, rp, rl, rk);

start_vdwf_dput:
	rkt = rk;
	vp = pointer (fp, rkb);

	if fp = cobol_ext_$cobol_ntfp
	then do;

		if fbb < rl
		then go to vdp_error;

		nt_vstr = instr;

	     end;

	else do;

		if length (vstr) < rl
		then go to vdp_error;

		vstr = instr;

	     end;

	st = ""b;

	return;

/*************************************/

cobol_swf_:
cobol_vdwf_:
swf_:
vdwf_:
     entry (fp, fn);

start_save_init:					/*[4.1-1]*/
	call expand_pathname_ (fn, dname, ename, mcode);

	if mcode ^= 0
	then go to save_error;

	call hcs_$initiate (dname, ename, "", 0b, 00b, fp, mcode);

	if fp = null ()
	then go to save_error;

	return;


/*************************************/
/* ERROR PROCESSING */

dcl	1 ioerror,
	  2 name		char (32),
	  2 code		fixed bin (35),
	  2 action	fixed bin,
	  2 iocb_ptr	ptr,
	  2 file_type	fixed bin,
	  2 key		char (5);

dcl	1 iocb,
	  2 version	fixed bin,
	  2 name		char (32),
	  2 actual_ptr	ptr,
	  2 attach_descrip_ptr
			ptr;

dcl	attach_descrip	char (200) varying;
dcl	signal_		entry (char (*), ptr, ptr);
dcl	error_table_$bad_file
			fixed bin (35) ext;
dcl	error_table_$no_operation
			fixed bin (35) ext;

ci_error:
	if substr (cifm, 1, 1)
	then do;

		cist = "00000000000000001111111111111111"b;

		return;

	     end;

	attach_descrip = "cfile_ " || cifn;

	if cioc = "s" | cioc = "S"
	then ioerror.file_type = 1;
	else if cioc = "c" | cioc = "C"
	then ioerror.file_type = 2;
	else ioerror.file_type = 3;

	go to i_error;

init_error:
	attach_descrip = "cfile_ " || fn;
	ioerror.file_type = 6;

i_error:
	ioerror.code = mcode;
	ioerror.action = 1;
	ioerror.iocb_ptr = addr (iocb);
	iocb.attach_descrip_ptr = addr (attach_descrip);

	go to error;

vdp_error:
	ioerror.key = rk;
	ioerror.code = error_table_$no_operation;
	ioerror.action = 4;
	ioerror.file_type = 5;

	go to wf_error;

close_error:
	ioerror.code = mcode;
	ioerror.action = 7;
	ioerror.file_type = 0;

	go to wf_error;

soi_error:
	ioerror.code = error_table_$bad_file;

	go to so_error;

soo_error:
	ioerror.code = mcode;

so_error:
	ioerror.action = 2;
	ioerror.file_type = 4;

wf_error:
	ioerror.iocb_ptr = fp;

error:
	ioerror.name = "cobol_io_";

	call signal_ ("command_abort_", null (), addr (ioerror));

	return;

save_error:
	call com_err_ (mcode, "mcobol_io", fn);
	call signal_ ("command_abort_", null (), null ());

dcl	1 shdr		based (fp) aligned,		/* header of working file */
	  2 x1		char (12),
	  2 next		fixed bin,		/* offset of next token */
	  2 code		fixed bin,		/* 10 for sequential file */
	  2 x3		char (4),			/* unused */
	  2 next_file	ptr,			/* points to next working file */
	  2 prev_file	ptr,			/* points to previous file */
	  2 fc		char (4),			/* file code for each different kind of file */
	  2 file_no	fixed bin,		/* file count for each working file */
	  2 x2		char (12),		/* unused */
	  2 first		fixed bin;		/* first token */

dcl	1 vhdr		based (fp) aligned,
	  2 x1		char (8),
	  2 next_get	fixed bin,
	  2 next_put	fixed bin,
	  2 code		fixed bin,
	  2 x2		char (8),
	  2 first		fixed bin;

dcl	error_table_$noentry
			fixed bin (35) ext;
dcl	fcb_ptr		ptr;
dcl	(vp, rloc)	ptr;

dcl	(null, addr, substr, index, pointer, rel, baseno, binary)
			builtin;

/*[4.0-1]*/
declare	1 LINE72		static int,		/*[4.0-1]*/
	  2 body		char (72),
	  2 nl		char (1);

/*[4.0-1]*/
declare	TAB		char (1) static int;	/*[4.0-1]*/
declare	(REC_NUM, STATE)	fixed bin static int;

/*[4.4-1]*/
declare	(fseg, rseg)	fixed bin;

dcl	rkb		fixed bin (35) based (addr (rkt));
dcl	rkt		char (5) aligned;
dcl	bc		fixed bin (24);
dcl	mcode		fixed bin (35);
dcl	(temp, st_num)	fixed bin;
dcl	len		fixed bin;
dcl	ename		char (32);
dcl	dname		char (168);

dcl	cistr		char (256) based (cifp);
dcl	cstr		char (256) based (cfp);
dcl	incstr		char (crl) based (crp);
dcl	instr		char (rl) based (rp);
dcl	str		char (rl) varying based (fp);
dcl	vstr		char (rl) varying based (vp);
dcl	fbb		fixed bin based (vp);
dcl	nt_vstr		char (rl) based (vp);

dcl	nl		char (1) static init ("
");

dcl	eof		bit (32) static init ("00000000000000000000000000100111"b);
dcl	bptr		bit (72) aligned based (addr (cifp));

dcl	cobol_db_phase$get_rec
			entry (ptr, fixed bin);
dcl	cobol_db_phase$get_tok
			entry (ptr, fixed bin);
dcl	cobol_db_phase$get_perf
			entry (ptr, fixed bin);
dcl	cobol_ms_handler$get
			entry (ptr, ptr, bit (32), ptr, fixed bin) ext;
dcl	cobol_ms_handler$put
			entry (ptr, ptr, bit (32)) ext;
dcl	msf_manager_$open	entry (char (*), char (*), fixed bin (35));
dcl	msf_manager_$adjust entry (ptr, fixed bin, fixed bin (24), bit (3), fixed bin (35));
dcl	msf_manager_$get_ptr
			entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
dcl	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl	hcs_$initiate	entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl	hcs_$truncate_seg	entry (ptr, fixed bin, fixed bin (35));
dcl	hcs_$terminate_seg	entry (ptr, fixed bin (1), fixed bin (35));
dcl	hcs_$terminate_noname
			entry (ptr, fixed bin (35));
dcl	hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35));
dcl	expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35));
dcl	com_err_		entry options (variable);
dcl	error_table_$improper_data_format
			fixed bin (35) ext;

dcl	hcs_$fs_get_path_name
			entry options (variable) ext;
dcl	ioa_		entry options (variable);
dcl	db		entry;


%include cobol_ext_;
%include cobol_fixed_common;
     end cobol_io_;
