/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_ms_handler.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 08/02/77 by Bob Chang to fix the bug for declaration of digit identifier. */
/* Modified on 11/15/76 by Bob Chang to make the declaration for entry explicitly. */
/* Modified since Version 2.0	*/

/*{*/

/* Write on 1-29-76 by Bob Chang	*/

/* format: style3 */
cobol_ms_handler:
     proc (fp, vp, st, rp, rl);

/* This procedure is to handle multi_segment working file.	*/

dcl	code		fixed bin (35),
	fp		ptr,
	rp		ptr,			/* points to the current token */
	rl		fixed bin,		/* length of the current token */
	vstr		char (rl) var based (vp),
	st		bit (32),			/* status code for io */
	vp		ptr;

/*
	code	for return status code.
	fp	points to the current working file. (input and output)
	vp	points to the current token. (input and output)
	*/

dcl	new_ptr		ptr,			/* temporary pointer */
	temp_ptr		ptr,			/* temporary pointer */
	temp_fc		char (4),			/* temporary file_code */
	temp_no		fixed bin,		/* temporary file number. */
	(length, pointer, index, divide, substr, addrel)
			builtin;
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	hcs_$truncate_seg	entry (ptr, fixed bin (18), fixed bin (35));
dcl	hcs_$delentry_file	entry (char (*), char (*), fixed bin (35));
dcl	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl	com_err_		entry options (variable) ext;

dcl	digit		(6) char (1) static init ("1", "2", "3", "4", "5", "6");
						/* array for conversion*/
dcl	dir_name		char (168),		/* directory _name of the file */
	len		fixed bin,		/* length of the directory name */
	len1		fixed bin,		/* length of the entry_name */
	entry_name	char (32);		/* entry name of the file */

dcl	1 shdr		based (fp) aligned,		/* header of working file */
	  2 x1		char (12),
	  2 next		fixed bin,		/* offset of next token */
	  2 code		fixed bin,		/* 10 for sequential file */
	  2 x3		char (4),			/* unused */
	  2 next_file	ptr,			/* points to next working file */
	  2 prev_file	ptr,			/* points to previous file */
	  2 fc		char (4),			/* file code for each different kind of file */
	  2 file_no	fixed bin,		/* file count for each working file */
	  2 x2		char (12),		/* unused */
	  2 first		fixed bin;		/* first token */

/*}*/


/**************************************************/
/*	START OF EXECUTION			*/
/*	ENTRY POINT:  get			*/
/**************************************************/


get:
     entry (fp, vp, st, rp, rl);

	if next_file ^= null ()
	then do;
		fp = next_file;
		shdr.next = 15;
		vp = pointer (fp, shdr.next);
		rp = addrel (vp, 1);
		rl = first;
		shdr.next = shdr.next + divide (rl + 7, 4, 17, 0);
		st = ""b;
	     end;
	else do;
		st = "00000000000000000000000000100111"b;
						/* end of file */
	     end;
	return;



/**************************************************/
/*	START OF EXECUTION			*/
/*	ENTRY POINT:  put			*/
/**************************************************/


put:
     entry (fp, vp, st);

	vp = pointer (fp, shdr.next);
	vstr = "";
	call hcs_$fs_get_path_name (fp, dir_name, len, entry_name, code);
	if code ^= 0
	then call com_err_ (code, "cobol_ms_handler", "fail to get path name");
	if file_no > 5
	then call com_err_ (0, "cobol_ms_handler", "too many work files for ^a", entry_name);
	len1 = index (entry_name, " ") - 1;
	if file_no > 0
	then len1 = len1 - 1;
	temp_no = file_no + 1;
	entry_name = substr (entry_name, 1, len1) || digit (temp_no);
	call hcs_$delentry_file (dir_name, entry_name, code);
	call hcs_$make_seg (dir_name, entry_name, "", 01011b, new_ptr, code);
	if code ^= 0 | new_ptr = null ()
	then call com_err_ (0, "cobol_ms_handler", "fail to create new working file for ^a", entry_name);
	call hcs_$truncate_seg (new_ptr, 0, code);
	if code ^= 0
	then call com_err_ (code, "cobol_ms_handler", "fail to truncate ^a", entry_name);
	next_file = new_ptr;
	temp_ptr = fp;
	temp_fc = fc;
	fp = new_ptr;
	prev_file = temp_ptr;
	next_file = null ();
	shdr.code = 10;
	shdr.next = 15;
	fc = temp_fc;
	file_no = temp_no;
	return;

     end cobol_ms_handler;
