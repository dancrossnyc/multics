/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_lexerr.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* 5/27/77, FCH, fixed bin decls standardized */
/* Last modified on 09/08/76 by ORN to add lexerr4 entry for caller specified column */
/* Modified on 1/21/76 by John O'Neil to use c_l_n rather than c_l_n + 1 for tln  in lexerr2 entry.
	Merge (the only caller) has already updated the c_l_n.  */

/* format: style3 */
cobol_lexerr:
     proc (nr, opt, len, d_b_m);

/* ========================================================================== */
/* This procedure issues diagnostics for lex.  It has three input parameters, as follows: */
/* 	1.  A 2-bit director.  If bit 1 is on a scan is made to the next space or new-line in the source input.   */
/* 	    If bit 2 is on a diagnostic parameter is specified in parameter 3.  */
/* 	2.  The diagnostic number.  If it is zero a complete diagnostic is specified in parameter 3.  */
/* 	3.  This parameter can be omitted if the diagnostic number is not zero and director bit 2 is zero.  */
/* ========================================================================== */


/*   message    */

dcl	1 message		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 5 */
	  2 run		fixed bin,
	  2 number	fixed bin,
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 image		char (200);

dcl	cobol_insert_token	entry (fixed bin, fixed bin) external;
dcl	substr		builtin;

dcl	(nr, len, tcol, tln)
			fixed bin,		/* error number from input */
	(opt, topt)	bit (1),
	d_b_m		char (200),
	q		pointer static;

declare	incol		fixed bin;

	topt = opt;
	tln = message.line;
	tcol = message.column;
	goto start;

lexerr2:
     entry (nr, opt, len, d_b_m);

	tln = cobol_c_l_n;
	tcol = 0;
	topt = opt;
	goto start;

lexerr3:
     entry (nr, opt, len, d_b_m);

	tln = cobol_save_cln;
	tcol = cobol_save_col;
	go to start3;

lexerr4:
     entry (nr, opt, len, d_b_m, incol);

	tln = cobol_c_l_n;
	tcol = incol;
	topt = opt;
	go to start;

lexerr1:
     entry (nr, opt, len, d_b_m);

	topt = "0"b;
	tln = cobol_save_cln;
	tcol = cobol_save_col;

start:
	substr (message.l_info, 3, 1) = topt;

start3:
	call cobol_insert_token (5, len);		/* allocate the 5, len token */

	message.line = tln;
	message.column = tcol;
	message.info = "0"b;
	substr (message.info, 2, 1) = opt;
	message.run = 1;
	message.number = nr;

	if len ^= 0
	then /* if complete diag or parameter is given here... */
	     do;
		if nr ^= 0
		then substr (message.info, 1, 1) = "1"b;/* indicate parameter */

		message.length = len;
		substr (message.image, 1, message.length) = substr (d_b_m, 1, len);
	     end;


%include cobol_ext_lex;

     end cobol_lexerr;
