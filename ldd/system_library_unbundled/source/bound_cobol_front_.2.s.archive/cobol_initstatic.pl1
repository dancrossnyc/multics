/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_initstatic.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 08/17/81 by FCH, [5.0-1], dds_internal changed to based from static, phx07089(BUG475) */
/*  1/4/77, FCH, fixed bin decls standardized */
/* Modified since Version 2.0 */

/* format: style3 */
cobol_initstatic:
     proc;

declare	csv		(m) fixed bin (24) based (cobol_sv_ptr);
declare	cptrs		(21) ptr based (cobol_sv_ptr);
declare	keys_ptr		ptr,
	m		fixed bin;
declare	ckeys		(355) char (1) based (keys_ptr);

/*[5.0-1]*/
dcl	cobol$alloc	entry (fixed bin) returns (ptr);

declare	(addr, fixed, substr, unspec, size, collate, length)
			builtin;

/*[5.0-1]*/
	cobol_sv_ptr = cobol$alloc (size (dds));

	m = size (dds);
	csv = 0;
	keys_ptr = addr (cm_key);

	ckeys = "0";
	fixed_common.init_cd = "0"b;			/* not needed when lex fix made */
	cptrs = null_func;

	coll_ptr = addr (coll_seq);
	coll_seq = collate ();

	call char (50);

	do i = 1 by 1 to 256;

	     dds.transltble (i) = ch;

	end;

	call ord_num ("(");
	dds.transltble (on) = "(";

	call ord_num (")");
	dds.transltble (on) = ")";

	ch_str = "12345678";
	call char (127);

	do i = 1 by 1 to length (ch_str);

	     call ord_num (substr (ch_str, i, 1));
	     dds.transltble (on) = ch;

	end;

	ch_str = "BV,.CDEZ9*9P9l0+999-999" || fixed_common.currency || "999SXA9";

	do i = 1 by 1 to length (ch_str);

	     call ord_num (substr (ch_str, i, 1));
	     call char (i);
	     dds.transltble (on) = ch;

	end;

	ch_str = ":\|[]{}_^~`<>?%&'EFGHIJKMNOQTUWTh";

	on = index (ch_str, fixed_common.currency);

	if on = 1
	then substr (ch_str, 1, 1) = substr (ch_str, 2, 1);
	else if on ^= 0
	then substr (ch_str, on, 1) = substr (ch_str, 1, 1);

	call char (1);

	call ord_num ("/");
	dds.transltble (on) = ch;

	do i = 1 by 1 to length (ch_str);

	     call ord_num (substr (ch_str, i, 1));
	     dds.transltble (on) = ch;

	end;

	call char (32);
	stopper = ch;

	dds.ptr5 = addr (dds.vector_part);
	fd_clauses_ptr = addr (fd_clauses);

	dds.mask1x = "00000000000000000000000000001110"b;
	dds.mask2x = "00000000000000000000000000000010"b;
	dds.mask3x = "00000000000000000000000000000100"b;

	dds.prectble (1) = "00001110000101001000100010010001"b;
	dds.prectble (2) = "01011110101010001010101010101101"b;
	dds.prectble (3) = "00001110000101001000100010011101"b;
	dds.prectble (4) = "01011110101111001010101010111101"b;
	dds.prectble (5) = "00001110000001011111111010011101"b;
	dds.prectble (6) = "00001110000001011111111010011101"b;
	dds.prectble (7) = "10101111111111001110111111111101"b;
	dds.prectble (8) = "01011110111111001110111011111111"b;
	dds.prectble (9) = "00001110011101001110111011111111"b;
	dds.prectble (10) = "01011111101111001110111011111111"b;
	dds.prectble (11) = "00001111100101001110111011111111"b;
	dds.prectble (12) = "01011110101010001010101010101101"b;
	dds.prectble (13) = "10111111111100101110111011101111"b;
	dds.prectble (14) = "11111111111111111111111111111111"b;
	dds.prectble (15) = "00001110000101001000100010010001"b;
	dds.prectble (16) = "11111111111111111111111111111111"b;
	dds.prectble (17) = "00001100000001011111111010011101"b;
	dds.prectble (18) = "01011111111111011011111011111111"b;
	dds.prectble (19) = "00001111111101011001111011111111"b;
	dds.prectble (20) = "11111111111111111111111111111111"b;
	dds.prectble (21) = "00001100000001011111111010011101"b;
	dds.prectble (22) = "01011111111111011111101011111111"b;
	dds.prectble (23) = "00001111111101011111100011111111"b;
	dds.prectble (24) = "11111111111111101110111111111111"b;
	dds.prectble (25) = "11111111111111111111111111111111"b;
	dds.prectble (26) = "01011111111111001110111110111111"b;
	dds.prectble (27) = "00001111111101001110111110011111"b;
	dds.prectble (28) = "11111111111110111111111111111111"b;
	dds.prectble (29) = "01111111111110011111111111110001"b;
	dds.prectble (30) = "01111111111110011111111111110001"b;
	dds.prectble (31) = "00001100000100001010101010100001"b;
	dds.prectble (32) = "00000000000000000000000010000001"b;
	dds.inftble (1) = "10011000"b;
	dds.inftble (2) = "00010000"b;
	dds.inftble (3) = "10011000"b;
	dds.inftble (4) = "00011000"b;
	dds.inftble (5) = "00001000"b;
	dds.inftble (6) = "00001000"b;
	dds.inftble (7) = "00001000"b;

	do fixbin7 = 8 to 11;
	     dds.inftble (fixbin7) = "11001100"b;
	end;

	dds.inftble (12) = "11000000"b;
	dds.inftble (13) = "11000000"b;
	dds.inftble (14) = "00000000"b;
	dds.inftble (15) = "10011000"b;
	dds.inftble (16) = "11101000"b;
	dds.inftble (17) = "11101000"b;
	dds.inftble (18) = "11101100"b;
	dds.inftble (19) = "11101100"b;
	dds.inftble (20) = "11101000"b;
	dds.inftble (21) = "11101000"b;
	dds.inftble (22) = "11101100"b;
	dds.inftble (23) = "11101100"b;
	dds.inftble (24) = "11101000"b;
	dds.inftble (25) = "11101000"b;
	dds.inftble (26) = "11101100"b;
	dds.inftble (27) = "11101100"b;
	dds.inftble (28) = "00000000"b;

	do fixbin7 = 29 to 31;
	     dds.inftble (fixbin7) = "10001100"b;
	end;

	dds.inftble (32) = "00000000"b;

	return;

ord_num:
     proc (ch);

declare	ch		char (1);

	on = index (coll_seq, ch) - 1;

     end;

char:
     proc (val);

declare	val		fixed bin;

	ch = coll_array (val + 1);

     end;

declare	(i, on)		fixed bin;
declare	ch		char (1),
	coll_seq		char (128);
declare	coll_ptr		ptr;

declare	coll_array	(128) char (1) based (coll_ptr);

%include cobol_ext_;
/* %include cobol_segdata_ddsyn;  */
%include cobol_fixed_common;

declare	x		char (1);
declare	y		char (1);
declare	char1		char (1);

declare	fixbin7		fixed bin;
declare	null_func		ptr internal static init (null ());
declare	one_word_in_bits	bit (36);

declare	1 dds		based (cobol_sv_ptr),
%include cobol_shared_var;
%include cobol_ext_ddsyn;
     end cobol_initstatic;
