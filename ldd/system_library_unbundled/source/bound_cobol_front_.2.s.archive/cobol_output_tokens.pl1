/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_output_tokens.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 07/14/83 by FCH, [5.2-2], SUPPRESS verb does not work, BUG533(phx15481) */
/* Modified on 10/21/82 by FCH, [5.2-1], illeg clause DATA REPORT IS blows COBOL, phx13529 */
/* Modified on 02/11/82 by FCH, [5.1-1], ignore "report" before DD, phx12454(BUG526) */
/* Modified on 06/16/80 by FCH, [4.4-1], program table added for REPORT WRITER facility */
/* Modified on 05/01/79 by FCH,[4.0-1], qualif name if debug option */
/* Modified since Version 4.0 */










/* format: style3 */
cobol_output_tokens:
     proc;

/* This routine writes the finished tokens on the minpral file and the name file */


/*   general overlay for any token    */

dcl	1 token		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/*[3.0-1]*/
	  2 info		fixed bin,		/*[3.0-1]*/
	  2 line_size	fixed bin,		/*[4.0-1]*/
	  2 name		char (0 refer (token.line_size));

declare	1 reserved_word	based (cobol_current),
	  2 fwd_link	ptr,
	  2 back_link	ptr,
	  2 rep_link	ptr,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 key		fixed bin;

/*[4.4-1]*/
declare	1 filler		based (class_tab_ptr),	/*[4.4-1]*/
	  2 filler	char (20),		/*[4.4-1]*/
	  2 ct		(1024) fixed bin (18) unal unsigned;
declare	CT		(0:8191) fixed bin based (class_tab_ptr);
declare	cd		(256) fixed bin (9) unal unsigned based;


/*[4.4-1]*/
declare	1 static_int	static int,		/*[4.4-1]*/
	  2 TOKEN		char (256) varying,		/*[4.4-1]*/
	  2 (tok_ptr, proc_def_ptr, p, q, t_cur, class_tab_ptr, program_ptr)
			ptr,			/*[4.4-1]*/
	  2 (state, prev_wd_num, n_t_key, program_size)
			fixed bin,		/*[4.4-1]*/
	  2 (data_object_size, fd_object_size, use_reporting_object_size)
			fixed bin,		/*[4.4-1]*/
	  2 prog_id	(36) bit (1);

/*[4.0-1]*/
declare	ch32		char (32) based;

declare	cobol_class_table_	entry (ptr);
dcl	cobol_swf_put	entry (ptr, bit (32), ptr, fixed bin) ext;
						/*[4.0-1]*/
dcl	cobol_db_put	entry (ptr, bit (32), ptr, fixed bin, ptr);
dcl	cobol_lexerr	entry (fixed bin, bit (1), fixed bin, char (30)) external;
dcl	cobol_delete_tokens$del_force
			entry (ptr, ptr) external;
dcl	cobol$alloc	entry (fixed bin) returns (ptr);

dcl	ioop		char (10);
dcl	st		bit (32),
	sz		fixed bin,
	tok1_ptr		ptr;
dcl	rec_ad		char (5),
	ch2		char (2);
dcl	wd_num		fixed bin;

/*[4.4-1]*/
declare	1 alloc_area	static int,		/*[4.4-1]*/
	  2 loc		ptr,			/*[4.4-1]*/
	  2 size		fixed bin,		/*[4.4-1]*/
	  2 cap		fixed bin,		/*[4.4-1]*/
	  2 area_size	fixed bin,		/*[4.4-1]*/
	  2 area_loc	ptr;

/*[4.0-1]*/
declare	(addr, null, substr, mod, size, addrel)
			builtin;

/*[4.0-1]*/
declare	1 TOK		based (tok_ptr),		/*[4.0-1]*/
	  2 rec_size	fixed bin,		/*[4.0-1]*/
	  2 size		fixed bin,		/*[4.0-1]*/
	  2 line		fixed bin,		/*[4.0-1]*/
	  2 column	fixed bin,		/*[4.0-1]*/
	  2 type		fixed bin,		/*[4.0-1]*/
	  2 info		fixed bin,		/*[4.0-1]*/
	  2 line_size	fixed bin,		/*[4.0-1]*/
	  2 name		char (0 refer (TOK.line_size));


/*[4.0-1]*/
declare	1 TOK1		based (tok1_ptr),		/*[4.0-1]*/
	  2 size		fixed bin,		/*[4.0-1]*/
	  2 line		fixed bin,		/*[4.0-1]*/
	  2 column	fixed bin,		/*[4.0-1]*/
	  2 type		fixed bin,		/*[4.0-1]*/
	  2 info		fixed bin,		/*[4.0-1]*/
	  2 line_size	fixed bin,		/*[4.0-1]*/
	  2 name		char (32);

/*[4.4-1]*/
declare	program		(36) ptr based (program_ptr);

/*[4.4-1]*/
declare	1 data_object	based (alloc_area.area_loc),	/*[4.4-1]*/
	  2 next		ptr,			/* next object */
						/*[4.4-1]*/
	  2 loc		ptr;			/* token */

/*[4.4-1]*/
declare	1 fd_object	based (alloc_area.area_loc),	/*[4.4-1]*/
	  2 next		ptr,			/* next object */
						/*[4.4-1]*/
	  2 loc		ptr,			/* token */
						/*[4.4-1]*/
	  2 rep_loc	ptr;			/* reports clause */

/*[4.4-1]*/
declare	1 use_reporting_object
			based (alloc_area.area_loc),	/*[4.4-1]*/
	  2 next		ptr,			/* next object */
						/*[4.4-1]*/
	  2 loc		ptr,			/* token */
						/*[4.4-1]*/
	  2 proc_loc	ptr,			/* section name */
						/*[4.4-1]*/
	  2 suppress	bit (1);			/* suppress printing */

/*[4.4-1]*/
declare	AA		(64) fixed bin based (alloc_area.loc);
						/*[4.4-1]*/
declare	bit36		bit (36) based;


	p = cobol_frst;
	cobol_current = cobol_frst;

	do while ("1"b);

	     if substr (token.l_info, 3, 1) ^= "1"b
	     then do;

/* if this token should not be put out... */

		     if (token.type > 0) & (token.type < 9)
						/* if token is valid... */
		     then if token.type = 6		/*[3.0-1]*/
			then /*[4.4-1]*/ /*	if processing_report*/ /*[4.4-1]*/ /*then;*/ /*[4.4-1]*/ /*else	*/
			     do;			/*[3.0-1]*/
				token.size = token.size - 1;
						/*[3.0-1]*/
				token.line_size = token.line_size - 1;
						/*[3.0-1]*/
				call cobol_swf_put (cobol_pfp, st, addr (token.size), token.size);
						/*[3.0-1]*/
			     end;

/*[4.4-1]*/
			else /*[4.0-1]*/
			     if fixed_common.debug	/*[4.0-1]*/
			then call PUT;		/* with debugging specified */

			else call word;

		     else call cobol_lexerr (0, "0"b, 29, "Illegal token type - ignored.");

		end;

	     q = token.fwd_link;			/* get next token in string */

	     if q = null ()				/* if last token has been put out... */
	     then do;				/* delete the string and return */

		     cobol_output_sw = "0"b;

		     if (cobol_frst = cobol_ta_ptr) & (cobol_current = cobol_ta_ptr)
		     then return;

		     q = cobol_current;

		     call cobol_delete_tokens$del_force (p, q);

		     return;
		end;

	     cobol_current = q;

	end;

PUT:
     proc;

/* if with debugging specified then construct	*/
/*  the qualified names and store in the first	*/
/* of the qualified name			*/
/*[4.0-1]*/
	go to ST (state);

ST (1):						/* initial state */
						/*[4.0-1]*/
	if token.type ^= 8				/*[4.4-1]*/
	then do;
		call word;			/*[4.0-1]*/
		return;				/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	TOKEN = token.name;				/*[4.0-1]*/
	sz = token.line_size;

/*[4.0-1]*/
	token.line_size = 32;			/*[4.0-1]*/
	tok1_ptr = addr (token.size);			/*[4.0-1]*/
	token.size = size (TOK1) * 4;

/*[4.0-1]*/
	token.line_size = sz;

/*[4.0-1]*/
	state = 2;

/*[4.0-1]*/
	call cobol_db_put (cobol_mfp, st, addr (token.size), token.size, tok_ptr);

/*[4.0-1]*/
	if sz < 32
	then substr (addr (tok_ptr -> TOK.name) -> ch32, sz + 1, 32 - sz) = " ";

/*[4.0-1]*/
	return;

ST (2):						/* type-8 */
						/*[4.0-1]*/
	if token.type ^= 1				/*[4.0-1]*/
	then do;
		call init_TOK;			/*[4.0-1]*/
		go to ST (1);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	if token.info = 101				/*[4.0-1]*/
	then TOKEN = TOKEN || " IN";			/*[4.0-1]*/
	else if token.info = 133			/*[4.0-1]*/
	then TOKEN = TOKEN || " OF";			/*[4.0-1]*/
	else do;
		call init_TOK;			/*[4.0-1]*/
		go to ST (1);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	call PUTREC (3);				/*[4.0-1]*/
	return;

ST (3):						/* type-8 of */
						/*[4.0-1]*/
	if token.type ^= 8				/*[4.0-1]*/
	then do;
		call init_TOK;			/*[4.0-1]*/
		go to ST (1);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	TOKEN = TOKEN || " " || token.name;

/*[4.0-1]*/
	call PUTREC (4);				/*[4.0-1]*/
	return;

ST (4):						/* type-8 of type-8 */
						/*[4.0-1]*/
	if token.type ^= 1				/*[4.0-1]*/
	then do;
		substr (addr (TOK.name) -> ch32, 1, 32) = TOKEN;
						/*[4.0-1]*/
		call init_TOK;			/*[4.0-1]*/
		go to ST (1);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	if token.info = 101				/*[4.0-1]*/
	then TOKEN = TOKEN || " IN";			/*[4.0-1]*/
	else if token.info = 133			/*[4.0-1]*/
	then TOKEN = TOKEN || " OF";			/*[4.0-1]*/
	else do;
		substr (addr (TOK.name) -> ch32, 1, 32) = TOKEN;
						/*[4.0-1]*/
		call init_TOK;			/*[4.0-1]*/
		go to ST (1);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	call PUTREC (3);

     end;

PUTREC:
     proc (st_num);

declare	st_num		fixed bin;

/*[4.0-1]*/
	state = st_num;				/*[4.0-1]*/
	call cobol_swf_put (cobol_mfp, st, addr (token.size), token.size);

     end;

init_TOK:
     proc;

/*[4.0-1]*/
	TOKEN = "";				/*[4.0-1]*/
	state = 1;				/*[4.0-1]*/
	cobol_current = cobol_frst;

     end;

directory_loc:
     entry returns (ptr);				/* return loc of directory */

/*[4.4-1]*/
	return (program_ptr);

initialize:
     entry;					/* called by cobol_lex */
						/*[4.0-1]*/
	call init_TOK;				/*[4.0-1]*/
	tok_ptr = null ();				/*[4.4-1]*/
	proc_def_ptr = null ();

/*[4.4-1]*/
	call cobol_class_table_ (class_tab_ptr);

/*[4.4-1]*/
	program_size = size (program);		/*[4.4-1]*/
	data_object_size = size (data_object);		/*[4.4-1]*/
	fd_object_size = size (fd_object);		/*[4.4-1]*/
	use_reporting_object_size = size (use_reporting_object);

/*[4.4-1]*/
	alloc_area.loc = cobol$alloc (256);		/*[4.4-1]*/
	alloc_area.size = 1;			/*[4.4-1]*/
	alloc_area.cap = 256;

/*[4.4-1]*/
	alloc_area.area_size = program_size;		/*[4.4-1]*/
	call get_space;				/*[4.4-1]*/
	program_ptr = alloc_area.area_loc;

/*[4.4-1]*/
	report_exists = "0"b;			/*[4.4-1]*/
	report_first_token = null ();			/*[4.4-1]*/
	addr (prog_id) -> bit36 = "0"b;		/*[4.4-1]*/
	program (24), program (25), program (16) = null ();
						/* fd,reporting,report */
						/*[4.4-1]*/
	prev_wd_num = 0;

/*[4.0-1]*/
	return;

proc_def_ptr:
     entry (PDF);

/* return a pointer to the last type	*/
/* 7 token on the minpral file	*/


/*[4.0-1]*/
declare	PDF		ptr;

/*[4.0-1]*/
	PDF = proc_def_ptr;

/*[4.0-1]*/
	return;

word:
     proc;					/* write and process the token */

/*[4.4-1]*/
	if token.type = 1 & substr (reserved_word.l_info, 8, 1)
						/*[4.4-1]*/
	then do;					/* major reserved word */

/*[4.4-1]*/
		call cobol_db_put (cobol_mfp, st, addr (token.size), token.size, tok_ptr);

/*[4.4-1]*/
		wd_num = addr (CT (ct (reserved_word.key))) -> cd (6);

/* entry number in class(6) */

/*[4.4-1]*/
		go to RW (wd_num);

RW (1):						/* identification */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (2):						/* environment */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (3):						/* configuration */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (4):						/* source-computer */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (5):						/* object-computer */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (6):						/* special-names */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (7):						/* input-output */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (8):						/* file-control */
						/*[4.4-1]*/
		if ^prog_id (8)			/*[4.4-1]*/
		then do;
			prog_id (8) = "1"b;		/*[4.4-1]*/
			program (8) = tok_ptr;	/*[4.4-1]*/
			program (21) = null ();	/* select */
						/*[4.4-1]*/
		     end;
		go to RW0;

RW (9):						/* i-o-control */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (10):						/* data */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (11):						/* sub-schema */
						/*[4.4-1]*/
		if ^prog_id (11)			/*[4.4-1]*/
		then do;
			prog_id (11) = "1"b;	/*[4.4-1]*/
			program (11) = tok_ptr;	/*[4.4-1]*/
			program (20) = null ();	/* db */
						/*[4.4-1]*/
		     end;
		go to RW0;

RW (12):						/* file */
						/*[4.4-1]*/
		if ^prog_id (12)			/*[4.4-1]*/
		then do;
			prog_id (12) = "1"b;	/*[4.4-1]*/
			program (12) = tok_ptr;	/*[4.4-1]*/
			program (23), program (24) = null ();
						/* sd, fd */
						/*[4.4-1]*/
		     end;
		go to RW0;

RW (13):						/* working-storage */
		call set_program_table;
		go to RW0;

RW (14):						/* linkage */
		call set_program_table;
		go to RW0;

RW (15):						/* communications */
						/*[4.4-1]*/
		if ^prog_id (15)			/*[4.4-1]*/
		then do;
			prog_id (15) = "1"b;	/*[4.4-1]*/
			program (15) = tok_ptr;	/*[4.4-1]*/
			program (19) = null ();	/*cd */
						/*[4.4-1]*/
		     end;
		go to RW0;

RW (16):						/* report */
						/*[5.1-1]*/
		if prev_wd_num = 24 & reserved_word.column > 11
						/* fd */
						/*[4.4-1]*/
		then program (24) -> fd_object.rep_loc = tok_ptr;
						/*[5.2-1]*/
		else if ^prog_id (16) & prog_id (10) & reserved_word.column < 12
						/* report section */
						/*[4.4-1]*/
		then do;
			program (16) = tok_ptr;	/*[4.4-1]*/
			report_first_token = tok_ptr; /*[4.4-1]*/
			prog_id (16) = "1"b;	/*[4.4-1]*/
			program (22) = null ();	/* rd */
						/*[4.4-1]*/
		     end;				/* reports are clause */





		go to RW0;

RW (17):						/* procedure */
						/*[4.4-1]*/
		if ^prog_id (17)			/*[4.4-1]*/
		then do;
			program (17) = tok_ptr;	/*[4.4-1]*/
			report_last_token = tok_ptr;	/*[4.4-1]*/
			prog_id (17) = "1"b;	/*[4.4-1]*/
			program (25) = null ();	/* reporting */
						/*[4.4-1]*/
		     end;
		go to RW0;

RW (18):						/* declaratives */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (19):						/* cd */
						/*[4.4-1]*/
		if prog_id (19)
		then call form_data_object;
		go to RW0;

RW (20):						/* db */
						/*[4.4-1]*/
		if prog_id (11)
		then call form_data_object;		/* sub-schema */
		go to RW0;

RW (21):						/* select */
						/*[4.4-1]*/
		if prog_id (8)
		then call form_data_object;		/* file-control */
		go to RW0;

RW (22):						/* rd */
						/*[4.4-1]*/
		if prog_id (16)
		then call form_data_object;		/* report */
		go to RW0;

RW (23):						/* sd */
						/*[4.4-1]*/
		if prog_id (12)
		then call form_data_object;		/* file */
		go to RW0;

RW (24):						/* fd */
						/*[4.4-1]*/
		if prog_id (12)			/* file */
						/*[4.4-1]*/
		then do;				/*[4.4-1]*/
			alloc_area.area_size = fd_object_size;

/*[4.4-1]*/
			call get_space;

/*[4.4-1]*/
			alloc_area.area_loc -> fd_object.loc = tok_ptr;
						/*[4.4-1]*/
			alloc_area.area_loc -> fd_object.rep_loc = null ();

/*[4.4-1]*/
			if program (24) = null ()	/*[4.4-1]*/
			then fd_object.next = null ();/*[4.4-1]*/
			else fd_object.next = program (24);

/*[4.4-1]*/
			program (24) = alloc_area.area_loc;

/*[4.4-1]*/
		     end;

		go to RW0;

RW (25):						/* reporting */
						/*[4.4-1]*/
		if prog_id (18)			/* declaratives */
						/*[4.4-1]*/
		then do;

/*[4.4-1]*/
			alloc_area.area_size = use_reporting_object_size;

/*[4.4-1]*/
			call get_space;

/*[4.4-1]*/
			use_reporting_object.loc = tok_ptr;
						/*[4.4-1]*/
			use_reporting_object.proc_loc = addrel (proc_def_ptr, 1);
						/*[4.4-1]*/
			use_reporting_object.suppress = "0"b;

/*[4.4-1]*/
			if program (25) = null ()	/*[4.4-1]*/
			then use_reporting_object.next = null ();
						/*[4.4-1]*/
			else use_reporting_object.next = program (25);

/*[4.4-1]*/
			program (25) = alloc_area.area_loc;

/*[4.4-1]*/
		     end;

		go to RW0;

/* program-id */
RW (26):						/*[4.4-1]*/
		call set_program_table;

		go to RW0;

RW (27):						/* suppress */
						/*[4.4-1]*/
		if program (25) ^= null ()
		then program (25) -> use_reporting_object.suppress = "1"b;
		go to RW0;

RW0:						/*[4.4-1]*/
		prev_wd_num = wd_num;		/*[4.4-1]*/
	     end;

	else if token.type = 7			/*[4.4-1]*/
	then call cobol_db_put (cobol_mfp, st, addr (token.size), token.size, proc_def_ptr);
						/* proc def */
						/*[5.2-2]*/
	else do;

/*[5.2-2]*/
		if token.type = 8			/*[5.2-2]*/
		then if substr (token.name, 1, 2) = "SS"/*[5.2-2]*/
		     then if program (25) ^= null ()	/*[5.2.2]*/
			then program (25) -> use_reporting_object.suppress = "1"b;

/*5.2-2]*/
		call cobol_swf_put (cobol_mfp, st, addr (token.size), token.size);

/*[5.2-2]*/
	     end;					/* not proc def */

     end;

get_space:
     proc;

/*[4.4-1]*/
	alloc_area.area_size = alloc_area.area_size + mod (-alloc_area.area_size, 2);
						/*[4.4-1]*/
	alloc_area.area_loc = addr (AA (alloc_area.size));/*[4.4-1]*/
	alloc_area.size = alloc_area.size + alloc_area.area_size;

/*[4.4-1]*/
	if alloc_area.size <= alloc_area.cap
	then return;

/*[4.4-1]*/
	alloc_area.loc, alloc_area.area_loc = cobol$alloc (256);

/*[4.4-1]*/
	alloc_area.size = alloc_area.area_size + 1;

     end;

form_data_object:
     proc;					/* form data object chain */

/*[4.4-1]*/
	alloc_area.area_size = data_object_size;

/*[4.4-1]*/
	call get_space;

/*[4.4-1]*/
	alloc_area.area_loc -> data_object.loc = tok_ptr;

/*[4.4-1]*/
	if program (wd_num) = null ()			/*[4.4-1]*/
	then data_object.next = null ();		/*[4.4-1]*/
	else data_object.next = program (wd_num);

/*[4.4-1]*/
	program (wd_num) = alloc_area.area_loc;

     end;

set_program_table:
     proc;

	if ^prog_id (wd_num)
	then do;
		program (wd_num) = tok_ptr;
		prog_id (wd_num) = "1"b;
	     end;
     end;

%include cobol_ext_;
%include cobol_ext_lex;
%include cobol_fixed_common;

     end cobol_output_tokens;
