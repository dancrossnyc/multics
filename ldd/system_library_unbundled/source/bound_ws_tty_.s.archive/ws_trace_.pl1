/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-12-05,RBarstad), approve(86-12-11,MCR7585),
     audit(87-06-05,Gilcrease), install(87-08-07,MR12.1-1075):
     Created.
                                                   END HISTORY COMMENTS */

/* format: style3,ifthenstmt,indthenelse,^indnoniterdo,^indprocbody,initcol3,dclind5,idind32 */
ws_trace_:
     proc () options (variable);

/* ------------------------  DESCRIPTION  ---------------------------------- */

/****^    VERSION 1.10

  Trace and debug routine for mowse video support. Allows output 
  normally written to the terminal to be saved to a trace file.
  Also has entries to set and get the trace and debug settings.

*/
%page;
/* ------------------------  PARAMETERS  ----------------------------------- */

/* ------------------------  AUTOMATIC  ------------------------------------ */

dcl  arg_list_ptr		       ptr;
dcl  message		       char (512) unal;
dcl  raw_message_length	       fixed bin (21);
dcl  message_length		       fixed bin (21);
dcl  adj_bit_count		       fixed bin (35);
dcl  bit_count		       fixed bin (24);
dcl  code			       fixed bin (35);	/* local version of code */
dcl  created		       bit (1) aligned;
dcl  date_time_		       entry (fixed bin (71), char (*));
dcl  dir_name		       char (168);
dcl  i			       fixed bin (21);
dcl  last_char		       fixed bin (21);
dcl  lock_chars		       char (12) aligned;
dcl  now			       char (24);
dcl  process_id		       fixed bin based (addr (ws_seg.lock));
dcl  retval		       fixed bin (35);
dcl  ws_io_ptr		       ptr;

dcl  01 ws_seg		       aligned based (ws_io_ptr),
       02 lock		       bit (36),
       02 next_byte		       fixed bin (21),
       02 string		       char (MAX_CHARS);

/* ------------------------  ENTRIES  -------------------------------------- */

dcl  cu_$arg_list_ptr	       entry (ptr);
dcl  ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);

dcl  adjust_bit_count_	       entry (char (168), char (32), bit (1) aligned, fixed bin (35), fixed bin (35));
dcl  cv_bin_$oct		       entry (fixed bin, char (12) aligned);
dcl  get_wdir_		       entry () returns (char (168));
dcl  hcs_$set_bc_seg	       entry (ptr, fixed bin (24), fixed bin (35));
dcl  initiate_file_$create	       entry (char (*), char (*), bit (*), ptr, bit (1) aligned, fixed bin (24),
			       fixed bin (35));
dcl  set_lock_$lock		       entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$unlock	       entry (bit (36) aligned, fixed bin (35));
dcl  sub_err_		       entry () options (variable);
dcl  terminate_file_	       entry (ptr, fixed bin (24), bit (*), fixed bin (35));

/* ------------------------  EXTERNALS  ------------------------------------ */

dcl  (
     error_table_$invalid_lock_reset,
     error_table_$lock_not_locked,
     error_table_$locked_by_this_process
     )			       fixed bin (35) ext static;

/* ------------------------  CONSTANTS  ------------------------------------ */

dcl  (
     SEG_NAME		       char (32) init ("ws_tty_.trace"),
     MAX_CHARS		       fixed bin (21) init (1044472),
						/* 255*1024*4-2*4 */
     FUDGE		       fixed bin init (40),	/* 12+1+24+1+2: size of process id+date&time+NL+spaces */
     BLANK		       char (1) init (" "),
     NL			       char (1) init ("
"),						/* new line (line feed) */
     WAIT_TIME		       fixed bin init (10),
     DATE_LEN		       fixed bin init (16)
     )			       internal static options (constant);


/* ------------------------  BUILTINS and CONDITIONS  ---------------------- */

dcl  (addr, clock, divide, length, rtrim, substr)
			       builtin;

%page;
/* ------------------------  MAIN ENTRY  ----------------------------------- */

/****^	     algorithm

	     set the lock control word

	     write the date and time
	     write the caller name and message
	     write a new line

	     update the seg byte count
	     update the seg bit count

	     unlock the lock
*/

/* get and convert the callers ioa string */

     message = " ";
     call cu_$arg_list_ptr (arg_list_ptr);
     call ioa_$general_rs (arg_list_ptr, 1, 2, message, raw_message_length, "1"b, "0"b);
     raw_message_length = length (rtrim (message));
     message = esc_canon (message, raw_message_length, message_length);

/* initialize and get the seg */

     dir_name = get_wdir_ ();

     call initiate_file_$create (dir_name, SEG_NAME, "101"b, ws_io_ptr, created, bit_count, code);
     if code ^= 0 then goto err_exit;
     if bit_count = 0
	then do;					/* virgin seg */
	     bit_count = 72;
	     next_byte = 2;
	     substr (string, 1, 1) = NL;
	     call hcs_$set_bc_seg (ws_io_ptr, bit_count, code);
	     if code ^= 0 then goto err_exit;
	end;


/* lock */

     call set_lock_$lock (ws_seg.lock, WAIT_TIME, code);
     if code ^= 0
	then if code ^= error_table_$invalid_lock_reset
		then if code ^= error_table_$locked_by_this_process then goto err_exit;

/* write the stuff to it */

     if (next_byte + FUDGE + message_length) > MAX_CHARS
	then do;
	     next_byte = 2;
	     substr (string, 1, 1) = NL;
	end;

/* convert and write lock id */

     call cv_bin_$oct (process_id, lock_chars);
     substr (string, next_byte, 12) = lock_chars;
     next_byte = next_byte + 12;
     substr (string, next_byte, 1) = BLANK;
     next_byte = next_byte + 1;

/* write date and time */

     call date_time_ (clock (), now);
     substr (string, next_byte, DATE_LEN) = substr (now, 1, DATE_LEN);
     next_byte = next_byte + DATE_LEN;
     substr (string, next_byte, 1) = BLANK;
     next_byte = next_byte + 1;

/* write caller's message */

     substr (string, next_byte, message_length) = substr (message, 1, message_length);
     next_byte = next_byte + message_length;
     substr (string, next_byte, 1) = NL;
     next_byte = next_byte + 1;

/* set bit count blank to next NL (or end) */

     call adjust_bit_count_ (dir_name, SEG_NAME, "1"b, adj_bit_count, code);
     if code ^= 0 then goto unlock_exit;
     last_char = divide (adj_bit_count - 72, 9, 7);
     do i = next_byte to last_char while (substr (string, i, 1) ^= NL);
	substr (string, i, 1) = "$";
     end;

/* unlock and terminate seg */

     call set_lock_$unlock (ws_seg.lock, code);
     if code ^= 0
	then if code ^= error_table_$lock_not_locked then goto err_exit;

     call terminate_file_ (ws_io_ptr, (adj_bit_count), TERM_FILE_TERM, code);
     if code ^= 0 then goto err_exit;
     goto exit;

unlock_exit:
     ;
     call set_lock_$unlock (ws_seg.lock, code);
     goto exit;					/* code doesn't matter */

err_exit:
     ;

     call sub_err_ (code, "ws_trace_", ACTION_CAN_RESTART, sub_error_info_ptr, retval,
	"While attempting to access trace dump file ^a>^a", dir_name, SEG_NAME);

exit:
     ;
     return;

/* ------------------------  END MAIN  ------------------------------------- */
%page;
esc_canon:
     proc (in_string, I_length, O_length) returns (char (512));

dcl  in_string		       char (*) parm;
dcl  I_length		       fixed bin (21) parm;
dcl  O_length		       fixed bin (21) parm;

dcl  in_char		       char (1);
dcl  out_string		       char (512);
dcl  i			       fixed bin;
dcl  FIRST_CHAR		       char (1) int static options (constant) init (" ");
dcl  LAST_CHAR		       char (1) int static options (constant) init ("~");
dcl  ESC_CHAR		       char (1) int static options (constant) init ("\");
dcl  in_length,
     out_length		       fixed bin (21);
dcl  cv_bin_$oct		       entry (fixed bin, char (12) aligned);
dcl  ascii_chars		       char (12) aligned;
dcl  rank			       builtin;
dcl  MAX_LEN		       fixed bin int static options (constant) init (512);


     in_length = I_length;
     out_length = 0;
     out_string = " ";

     do i = 1 to in_length;
	in_char = substr (in_string, i, 1);
	if ((in_char < FIRST_CHAR) | (in_char > LAST_CHAR)) & (i < in_length)
	     then do;				/* control char */
		if out_length + 4 >= MAX_LEN then goto esc_done;
		out_length = out_length + 1;
		substr (out_string, out_length, 1) = ESC_CHAR;
		out_length = out_length + 1;
		call cv_bin_$oct (rank (in_char), ascii_chars);
		substr (out_string, out_length, 3) = substr (ascii_chars, 10, 3);
		if (substr (out_string, out_length, 1) = " ") then substr (out_string, out_length, 1) = "0";
		if (substr (out_string, out_length + 1, 1) = " ") then substr (out_string, out_length + 1, 1) = "0";
		out_length = out_length + 2;
	     end;
	     else do;				/* normal char */
		if out_length + 1 >= MAX_LEN then goto esc_done;
		out_length = out_length + 1;
		substr (out_string, out_length, 1) = in_char;
	     end;
     end;
esc_done:
     O_length = out_length;
     return (out_string);
     end esc_canon;
%page;
/* ------------------------  ENTRIES  ------------------------------------- */

set_debug:
     entry (debug_switch);
dcl  debug_switch		       bit (1) parm;	/* 1=on, 0=off */
     ws_tty_data$Flags.Debug = debug_switch;
     return;

get_debug:
     entry (debug_switch);
     debug_switch = ws_tty_data$Flags.Debug;
     return;

set_trace:
     entry (trace_switch);
dcl  trace_switch		       bit (1) parm;	/* 1=on, 0=off */
     ws_tty_data$Flags.Trace = trace_switch;
     return;

get_trace:
     entry (trace_switch);
     trace_switch = ws_tty_data$Flags.Trace;
     return;

/* ------------------------  END PROGRAM  ---------------------------------- */
%page;
/* ------------------------  INCLUDES  ------------------------------------- */

%include terminate_file;
%include sub_error_info;
%include condition_info_header;
%include sub_err_flags;
%include ws_tty_data;
     end ws_trace_;
