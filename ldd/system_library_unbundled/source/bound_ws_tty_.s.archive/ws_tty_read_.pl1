/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-12-05,RBarstad), approve(86-12-11,MCR7585),
     audit(87-08-05,Gilcrease), install(87-08-07,MR12.1-1075):
     Created.
                                                   END HISTORY COMMENTS */

/* format: style3,^ifthenstmt,indthenelse,^indnoniterdo,^indprocbody,initcol3,dclind5,idind32 */
ws_tty_read_:
     proc ();
     return;

/* ------------------------  DESCRIPTION  ---------------------------------- */

/****^ VERSION 1.72
							
     ws_tty_ entries to support video mode in MOWSE work station
 							
     ws_tty_$read_echoed 					
     ws_tty_$read
     ws_tty_$read_with_mark

*/
%page;
/* ------------------------  PARAMETERS  ----------------------------------- */

dcl  I_n_chars_to_read	       fixed bin (21) parm;	/* maximum number of chars to return */
dcl  I_offset		       fixed bin (21) parm;	/* offset in buffer to start at */
dcl  I_buffer		       char (*) parm;	/* caller's buffer used by read_with_mark */
dcl  I_buffer_ptr		       ptr parm;		/* pointer to caller's buffer */
dcl  I_screen_left		       fixed bin parm;	/* Space left on line, negotiate entry */
dcl  I_iocb_ptr		       ptr parm;		/* io ptr for iox */
dcl  I_never_block		       bit (1) aligned parm;
dcl  O_code		       fixed bin (35) parm;	/* error code */
dcl  O_echoed		       fixed bin (21) parm;	/* Chars echoed by interrupt side */
dcl  O_mark_index		       fixed bin (21) parm;	/* index in returned string of "mark" */
dcl  O_n_chars_read		       fixed bin (21) parm;	/* actual number of characters returned */
dcl  O_state		       fixed bin parm;	/* tty state, 1 ignored, 2 listening, 5 dialed */

/* ------------------------  AUTOMATIC  ------------------------------------ */

dcl  code			       fixed bin (35);	/* error code */
dcl  echoed		       fixed bin (21);	/* Chars echoed by interrupt side */
dcl  iocb_ptr		       ptr;		/* iocb pointer for iox */
dcl  mark_index		       fixed bin (21);	/* local copy */
dcl  get_msg_id		       char (3);		/* message id actually returned from WSTERM */
dcl  n_chars_to_read	       fixed bin (21);	/* maximum number of chars to return */
dcl  n_chars_read		       fixed bin (21);	/* actual number of characters returned */
dcl  never_block		       bit (1) aligned;
dcl  offset		       fixed bin (21);	/* offset in buffer to start at */
dcl  buffer_ptr		       ptr;		/* pointer to caller's buffer */
dcl  read_ptr		       ptr;		/* actuall ptr to read buffer */
dcl  read_data		       char (2);		/* read count */
dcl  read_data_len		       fixed bin (21);	/* size of read data */
dcl  read_data_ptr		       ptr;
dcl  screen_left		       fixed bin;		/* Space left on line, negotiate entry */
dcl  state		       fixed bin;		/* tty state, 1 ignored, 2 listening, 5 dialed */
dcl  total_chars_read	       fixed bin;
dcl  read_flags		       bit (9);

/* ------------------------  BASED  ---------------------------------------- */

dcl  based_chars		       (0:offset) char (1) based unal;
						/* to bump write ptr */

/* ------------------------  CONSTANTS  ------------------------------------ */

dcl  (
     ME			       char (12) init ("ws_tty_read_"),
     BYTE_SIZE		       fixed bin init (256),
     FALSE		       bit (1) init ("0"b),
     TRUE			       bit (1) init ("1"b)
     )			       internal static options (constant);

/* ------------------------  EXTERNALS  ------------------------------------ */

dcl  (
     error_table_$bad_arg,
     error_table_$improper_data_format
     )			       fixed bin (35) external static;

/* ------------------------  ENTRIES  -------------------------------------- */

dcl  ws_tty_mgr_$ok_iocb	       entry (ptr, ptr, ptr, fixed bin (35)) returns (bit (1));
dcl  ws_tty_mgr_$send_message	       entry (ptr, char (3), bit (9), ptr, fixed bin (21));
dcl  ws_tty_mgr_$get_message	       entry (ptr, ptr, fixed bin (21), fixed bin (21), char (3));
dcl  ws_trace_		       entry () options (variable);

/* ------------------------  BUILTINS and CONDITIONS  ---------------------- */

dcl  (addr, divide, length, max, min) builtin;

dcl  cleanup		       condition;

%page;
/* ------------------------  PROGRAM  -------------------------------------- */

read:
     entry (I_iocb_ptr, I_buffer_ptr, I_offset, I_n_chars_to_read, O_n_chars_read, O_state, O_code);

/**** get params */
     buffer_ptr = I_buffer_ptr;
     offset = I_offset;
     n_chars_to_read = I_n_chars_to_read;

/**** init */
     code = 0;
     state = 0;
     n_chars_read = 0;
     on cleanup call clean_up;

     if ws_tty_data$Flags.Trace = TRUE
	then call ws_trace_ ("^a$read entry: iocb_ptr=^p, buffer_ptr=^p, offset=^i, chars=^i.", ME, I_iocb_ptr,
		buffer_ptr, offset, n_chars_to_read);

/**** check environment */
     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto read_exit;

/**** get buffer ptrs and sizes */

     if n_chars_to_read < 0
	then do;
	     code = error_table_$bad_arg;
	     goto read_exit;
	end;

     read_ptr = addr (buffer_ptr -> based_chars (offset));

     read_data = convert_read_count (n_chars_to_read);
     read_data_ptr = addr (read_data);
     read_data_len = length (read_data);

     if ws_tty_data$Flags.Trace = TRUE
	then call ws_trace_ ("^a$read: read_count=^i.", ME, mowse_io_data.ws.read_count);

/**** read it */
     if (mowse_io_data.ws.read_count = 0) | (n_chars_to_read = 0)
	then do;
	     call ws_tty_mgr_$send_message (iocb_ptr, WS_READ_WITH_NO_ECHO, WS_FLAG_NONE, read_data_ptr, read_data_len);
	     mowse_io_data.ws.read_count = mowse_io_data.ws.read_count + 1;
	end;

     call ws_tty_mgr_$get_message (iocb_ptr, read_ptr, n_chars_to_read, n_chars_read, get_msg_id);

/**** check what was read */
     if get_msg_id = WS_END_NON_ECHOED_INPUT
	then mowse_io_data.ws.read_count = mowse_io_data.ws.read_count - 1;
     else if get_msg_id ^= WS_UNECHOED_INPUT_CHARS
	then code = error_table_$improper_data_format;

read_done:
     O_n_chars_read = n_chars_read;

read_exit:
     if ws_tty_data$Flags.Trace = TRUE
	then call ws_trace_ ("^a$read exit: n_chars_read=^i, state=^i, code=^i.^/", ME, n_chars_read, state, code);

     O_state = state;
     O_code = code;
     return;
%page;
read_echoed:
     entry (I_iocb_ptr, I_buffer_ptr, I_offset, I_n_chars_to_read, O_n_chars_read, O_echoed, I_screen_left, O_state,
	O_code);

/**** get params */
     buffer_ptr = I_buffer_ptr;
     offset = I_offset;
     n_chars_to_read = I_n_chars_to_read;
     screen_left = I_screen_left;

/**** init */
     code = 0;
     state = 0;
     n_chars_read = 0;
     echoed = 0;
     get_msg_id = "   ";
     total_chars_read = 0;
     on cleanup call clean_up;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ (
		"^a$read_echoed entry: iocb_ptr=^p, buffer_ptr=^p, offset=^i, chars=^i, screen=^i, O_echoed=^i.", ME,
		I_iocb_ptr, buffer_ptr, offset, n_chars_to_read, screen_left, O_echoed);

/**** check environment */

     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto read_echoed_exit;

/**** get buffer ptrs and sizes */

     if n_chars_to_read = 0
	then goto read_echoed_done;

     if n_chars_to_read < 0
	then do;
	     code = error_table_$bad_arg;
	     goto read_echoed_exit;
	end;

     read_ptr = addr (buffer_ptr -> based_chars (offset));

     if ws_tty_data$Flags.Trace = TRUE
	then call ws_trace_ ("^a$read_echoed: read_count=^i.", ME, mowse_io_data.ws.read_count);
%page;
/**** read it */
     if screen_left ^= 0 /* turn echo ON, OR return any previously entered non-echoed input */
	then do;
	     n_chars_to_read = min (n_chars_to_read, screen_left);
	     read_data = convert_read_count (n_chars_to_read);
	     read_data_ptr = addr (read_data);
	     read_data_len = length (read_data);

	     if (mowse_io_data.ws.read_count > 0)	/* non-echoed input to clean up */
		then do;
		     call ws_tty_mgr_$send_message (iocb_ptr, WS_READ_WITH_NO_ECHO, WS_FLAG_NO_BLOCK, read_data_ptr,
			read_data_len);
		     mowse_io_data.ws.read_count = mowse_io_data.ws.read_count + 1;

		     do while (mowse_io_data.ws.read_count > 0);
			call ws_tty_mgr_$get_message (iocb_ptr, read_ptr, n_chars_to_read, n_chars_read, get_msg_id);

			total_chars_read = total_chars_read + n_chars_read;
			if get_msg_id = WS_END_NON_ECHOED_INPUT
			     then mowse_io_data.ws.read_count = mowse_io_data.ws.read_count - 1;

			else if (get_msg_id = WS_UNECHOED_INPUT_CHARS)
			     then do;		/* not end, prepare to read again */
				offset = offset + n_chars_read;
				n_chars_to_read = n_chars_to_read - n_chars_read;
				read_ptr = addr (buffer_ptr -> based_chars (offset));
				read_data = convert_read_count (n_chars_to_read);
			     end;

			else if (get_msg_id = " ") & (n_chars_read = 0)
						/* special case from start control order */
			     then /* ignore */;

			else code = error_table_$improper_data_format;
		     end /* do while */;
		end /* if mowse_io_data.ws.read_count > 0 */;

	     /* now finally, we can read echoed input, but only if there was no unechoed input*/
	     if total_chars_read = 0
		then call ws_tty_mgr_$send_message (iocb_ptr, WS_READ_WITH_ECHO, WS_FLAG_NONE, read_data_ptr,
			read_data_len);

	end /* screen_left ^= 0 */;

	else /* screen_left = 0, turn echo OFF */
	     do while ((get_msg_id ^= WS_END_ECHOED_INPUT) & (n_chars_to_read > 0) & (code = 0));
		call ws_tty_mgr_$get_message (iocb_ptr, read_ptr, n_chars_to_read, n_chars_read, get_msg_id);

		total_chars_read = total_chars_read + n_chars_read;
		if get_msg_id = WS_END_ECHOED_INPUT	/* the end */
		     then do;
			echoed = echoed + n_chars_read;
			mowse_io_data.ws.read_count = 0; /* just in case */
		     end;
		     else do /* not WS_END_ECHOED_INPUT, prepare to read again */;
			offset = offset + n_chars_read;
			n_chars_to_read = n_chars_to_read - n_chars_read;
			read_ptr = addr (buffer_ptr -> based_chars (offset));
			read_data = convert_read_count (n_chars_to_read);

			if get_msg_id = WS_ECHOED_INPUT_CHARS
			     then echoed = echoed + n_chars_read;

			else if (get_msg_id = " ") & (n_chars_read = 0)
			     /* special case from start control order */
			     then do;
				n_chars_to_read = 0 /* force stop and exit */;
			     end;

			else code = error_table_$improper_data_format;
		     end /* else not WS_END_ECHOED_INPUT */;
	     end /* do while */;

read_echoed_done:
     O_n_chars_read = total_chars_read;
     O_echoed = echoed;

read_echoed_exit:
     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$read_echoed exit: total_chars_read=^i, echoed=^i, state=^i, code=^i.^/", ME,
		total_chars_read, echoed, state, code);

     O_state = state;
     O_code = code;
     return;
%page;
read_with_mark:
     entry (I_iocb_ptr, I_buffer, I_never_block, O_n_chars_read, O_mark_index, O_state, O_code);

/**** get params */
     never_block = I_never_block;

/**** init */
     code = 0;
     state = 0;
     mark_index = 0;
     n_chars_read = 0;
     total_chars_read = 0;
     offset = 0;
     on cleanup call clean_up;

     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$read_with_mark entry: iocb_ptr=^p, never-block=^i.", ME, I_iocb_ptr, never_block);

/**** check environment */
     if ^ws_tty_mgr_$ok_iocb (I_iocb_ptr, iocb_ptr, mowse_io_data_ptr, code)
	then goto read_with_mark_exit;

/**** get buffer ptrs and sizes */

     buffer_ptr = addr (I_buffer);
     n_chars_to_read = length (I_buffer);

     if n_chars_to_read < 0
	then do;
	     code = error_table_$bad_arg;
	     goto read_with_mark_exit;
	end;

     read_ptr = buffer_ptr;

     read_data = convert_read_count (n_chars_to_read);
     read_data_ptr = addr (read_data);
     read_data_len = length (read_data);

     if never_block
	then read_flags = WS_FLAG_NO_BLOCK;
	else read_flags = WS_FLAG_NONE;

/**** read it */
     if ws_tty_data$Flags.Trace = TRUE
	then call ws_trace_ ("^a$read_with_mark: read_count=^i.", ME, mowse_io_data.ws.read_count);

     if (mowse_io_data.ws.read_count = 0) | (n_chars_to_read = 0) | (never_block)
	then do;
	     call ws_tty_mgr_$send_message (iocb_ptr, WS_READ_WITH_NO_ECHO, read_flags, read_data_ptr, read_data_len);
	     mowse_io_data.ws.read_count = mowse_io_data.ws.read_count + 1;
	end;

unechoed_get_message:      /* come here to complete last unecho read request */
     call ws_tty_mgr_$get_message (iocb_ptr, read_ptr, n_chars_to_read, n_chars_read, get_msg_id);

/**** check what was read */
     if get_msg_id = WS_END_NON_ECHOED_INPUT
	then mowse_io_data.ws.read_count = mowse_io_data.ws.read_count - 1;
     else if get_msg_id ^= WS_UNECHOED_INPUT_CHARS
	then if (get_msg_id = " ") & (n_chars_read = 0)	/* special case from start control order */
		then /* ignore */;
		else code = error_table_$improper_data_format;

     total_chars_read = total_chars_read + n_chars_read;

     if never_block & (mowse_io_data.ws.read_count > 0)
	then do;
	     offset = offset + n_chars_read;
	     read_ptr = addr (buffer_ptr -> based_chars (offset));
	     n_chars_to_read = max (0, n_chars_to_read - n_chars_read);
	     read_data = convert_read_count (n_chars_to_read);
	     goto unechoed_get_message;
	end;

     if (total_chars_read > 0) & (code = 0)
	then if mowse_io_data.ws.flags.mark_set
		then do;
		     mark_index = 1;
		     mowse_io_data.ws.flags.mark_set = FALSE;
		end;

read_with_mark_exit:
     if ws_tty_data$Flags.Trace
	then call ws_trace_ ("^a$read_with_mark exit: total_chars_read=^i, mark_index=^i, state=^i, code=^i.^/", ME,
		total_chars_read, mark_index, state, code);

     O_n_chars_read = total_chars_read;
     O_mark_index = mark_index;
     O_state = state;
     O_code = code;
     return;

/* ------------------------  END PROGRAM  ---------------------------------- */
%page;
/* ------------------------  INTERNAL PROCEDURES  -------------------------- */

clean_up:
     proc;
     n_chars_read, O_n_chars_read = 0;
     state = 0;
     return;
     end clean_up;
%page;
/* ------------------------------------------------------------------------- */

convert_read_count:
     proc (count) returns (char (2));

dcl  count		       fixed bin (21) parm;
dcl  count_chars		       char (2);
dcl  1 count_bytes		       unaligned based (addr (count_chars)),
       2 hi		       fixed bin (8),
       2 lo		       fixed bin (8);

     if count < BYTE_SIZE
	then do;
	     count_bytes.hi = 0;
	     count_bytes.lo = count;
	end;
	else do;
	     count_bytes.hi = divide (count, BYTE_SIZE, 3);
	     count_bytes.lo = count - (BYTE_SIZE * count_bytes.hi);
	end;
     return (count_chars);
     end convert_read_count;
%page;
/* ------------------------  INCLUDES  ------------------------------------- */

%include ws_control_ids;
%page;
%include ws_tty_data;
%page;
%include iocb;
%page;
%include mowse_io_data;

     end ws_tty_read_;
