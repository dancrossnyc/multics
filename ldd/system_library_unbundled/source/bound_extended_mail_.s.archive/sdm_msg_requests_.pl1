/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: off */

/* send_mail requests which manipulate the message text and, occasionally, the header */

/* Created:  January 1979 by G. Palter */
/* Modified: 27 January 1979 by G. Palter to implement -header option of qedx and apply requests, add -brief_header to
      print, change list to print_header, and make header printing show the entire header */
/* Modified: 1 February 1979 by G. Palter to make -header option of qedx and apply flush generated fields from text given
      to user */
/* Modified: 2 February 1979 by G. Palter to check line length in fill request */
/* Modified: 25 December 1979 by W. Olin Sibert to update for new emf_info structure */
/* Modified: 25 December 1979 by W. Olin Sibert to support auto_fill mode */
/* Modified: 18 September 1982 by G. Palter to implement new definition of filling in send_mail (fill => auto fill) and to
      add -fill/-no_fill control arguments to qedx and apply to override the default */
/* Modified: January 1983 by G. Palter to use qedx_ (yea!) */
/* Modified: September 1983 by G. Palter to obey the auto_write flag (sigh) and as part of the conversion to the new mail
      system interface */
/* Modified: 8 March 1984 by G. Palter to fix error #0424 -- if the "-header" option is specified for the qedx or apply
      requests and the message text, after editing, does not have a header, the send_mail invocation will be left without
      a message to process.  Use of any subsequent request which must actually access the message (eg: print) will result
      in a null pointer fault */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


sdm_msg_requests_:
     procedure (P_sci_ptr, P_sdm_invocation_ptr);

	return;					/* not an entry */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_sdm_invocation_ptr pointer parameter;


/* Remaining declarations */

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  message_buffer character (4 * sys_info$max_seg_size) unaligned based (message_buffer_ptr);
dcl  message_text character (message_text_lth) unaligned based (message_buffer_ptr);
dcl  message_buffer_ptr pointer;
dcl  message_text_lth fixed binary (21);

dcl  request_line character (request_line_lth) unaligned based (request_line_ptr);
dcl  request_line_ptr pointer;
dcl  request_line_lth fixed binary (21);

dcl  1 local_qi aligned,				/* data structure for invoking qedx_ */
       2 header like qedx_info.header,
       2 buffers (2) like qedx_info.buffers;		/* ... buffers 0 and (maybe) exec */

dcl  fatal_error bit (1) aligned;			/* set ON by sdm_text_mgr_$fill_text when necessary */
dcl  code fixed binary (35);

dcl  removed_reply_references bit (1) aligned;		/* ON => In-Reply-To field was deleted before editing */

dcl  include_header bit (1) aligned;			/* ON => -header option given to request */
dcl  fill bit (1) aligned;				/* ON => fill the message after editing */
dcl  auto_write bit (1) aligned;			/* ON => enable auto-writing in qedx (sigh) */

dcl  formatting_mode fixed binary;			/* how much detail to be displayed in the message header */

dcl  first_command_argument_idx fixed binary;		/* where command line starts in the apply request */

dcl  fill_width fixed binary;

dcl  sys_info$max_seg_size fixed binary (19) external;
dcl  iox_$user_output pointer external;

/* format: off */
dcl (error_table_$bad_conversion, error_table_$badopt, error_table_$fatal_error, error_table_$noarg,
     error_table_$smallarg, mlsys_et_$message_too_large, mlsys_et_$text_parse_failed)
	fixed binary (35) external;
/* format: on */

dcl  cv_dec_check_ entry (character (*), fixed binary (35)) returns (fixed binary (35));
dcl  ioa_ entry () options (variable);
dcl  mail_system_$add_reply_reference entry (pointer, pointer, fixed binary, fixed binary (35));
dcl  mail_system_$delete_reply_reference entry (pointer, fixed binary, fixed binary (35));
dcl  mail_system_$create_message entry (character (8), pointer, fixed binary (35));
dcl  mail_system_$free_message entry (pointer, fixed binary (35));
dcl  mail_system_$replace_body entry (pointer, pointer, fixed binary (35));
dcl  mlsys_utils_$format_message
	entry (pointer, pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  mlsys_utils_$parse_message_text entry (character (*), pointer, character (8), pointer, pointer, fixed binary (35));
dcl  mlsys_utils_$print_address_field entry (character (*) varying, pointer, fixed binary, pointer, fixed binary (35));
dcl  mlsys_utils_$print_address_list_field
	entry (character (*) varying, pointer, fixed binary, pointer, fixed binary (35));
dcl  mlsys_utils_$print_date_time_field
	entry (character (*) varying, fixed binary (71), bit (1) aligned, fixed binary, pointer, fixed binary (35));
dcl  mlsys_utils_$print_message_body entry (pointer, fixed binary, pointer, fixed binary (35));
dcl  mlsys_utils_$print_message_header entry (pointer, fixed binary, fixed binary, pointer, fixed binary (35));
dcl  mlsys_utils_$print_message_id_field
	entry (character (*) varying, bit (72) aligned, fixed binary, pointer, fixed binary (35));
dcl  mlsys_utils_$print_text_field
	entry (character (*) varying, character (*), bit (1) aligned, fixed binary, pointer, fixed binary (35));
dcl  qedx_ entry (pointer, fixed binary (35));
dcl  sdm_text_mgr_$fill_text entry (pointer, fixed binary, bit (1) aligned);
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$apply_request_util entry (pointer, fixed binary, pointer, fixed binary (21), fixed binary (21));
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);
dcl  ssu_$print_message entry () options (variable);
dcl  ssu_$release_temp_segment entry (pointer, pointer);

dcl  cleanup condition;

dcl  (addr, clock, index, length, null, string, unspec) builtin;
%page;
/* The "print" request: prints the message text and part or all of the header */

print_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	formatting_mode = BRIEF_FORMATTING_MODE;	/* default is -brief_header */

	do argument_idx = 1 to n_arguments;
	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
	     if index (argument, "-") = 1 then		/* a control argument */
		if (argument = "-long_header") | (argument = "-lghe") then formatting_mode = LONG_FORMATTING_MODE;
		else if (argument = "-header") | (argument = "-he") then formatting_mode = DEFAULT_FORMATTING_MODE;
		else if (argument = "-brief_header") | (argument = "-bfhe") then
		     formatting_mode = BRIEF_FORMATTING_MODE;
		else if (argument = "-no_header") | (argument = "-nhe") then formatting_mode = NONE_FORMATTING_MODE;
		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);
	     else call ssu_$abort_line (P_sci_ptr, 0, "Usage:  print {-control_args}");
	end;

	if formatting_mode ^= NONE_FORMATTING_MODE then do;
	     call print_message_header ();		/* ... print the header/summary */
	     call ioa_ ("");			/* ... and a blank line to separate it from the body */
	end;
	else call ioa_ ("^/(^d line^[s^] in body):", message.body.total_lines, (message.body.total_lines ^= -1));

	call mlsys_utils_$print_message_body (message_ptr, 0, iox_$user_output, code);
	if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the message body.");

	return;
%page;
/* format: off */
/* The "print_header" request: either prints the header as it will appear when transmitted or prints a short summary of
   the message in the following form:

	(N lines in text):
         {Subject: STR}
	To:  addresses
         {cc:  addresses}
         {bcc:  addresses}

   where {}'s denote optional items.  If no primary recipients exist, "<No addresses>" is printed in the To field */
/* format: on */

print_header_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	formatting_mode = DEFAULT_FORMATTING_MODE;	/* default is the standard header */

	do argument_idx = 1 to n_arguments;
	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
	     if index (argument, "-") = 1 then		/* a control argument */
		if (argument = "-long") | (argument = "-lg") then formatting_mode = LONG_FORMATTING_MODE;
		else if (argument = "-default") | (argument = "-dft") then formatting_mode = DEFAULT_FORMATTING_MODE;
		else if (argument = "-brief") | (argument = "-bf") then formatting_mode = BRIEF_FORMATTING_MODE;
		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);
	     else call ssu_$abort_line (P_sci_ptr, 0, "Usage:  print_header {-control_args}");
	end;

	call print_message_header ();

	return;
%page;
/* The "qedx" request: invokes the qedx editor on the message text (or the header and text if requested) */

qedx_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	fill_width = sdm_invocation.fill_width;		/* set default width */

	fill = sdm_invocation.fill;			/* use global fill specification */
	auto_write = sdm_invocation.auto_write;		/* use global auto-write specification (sigh) */
	include_header = "0"b;			/* defaults to not editing the header */
	request_line_lth = 0;			/* no -request */

	do argument_idx = 1 to n_arguments;

	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);

	     if index (argument, "-") = 1 then		/* a control agument */
		/*** ... these first two control arguments are bought to you by the MCR boards (sigh) */
		if argument = "-auto_write" then auto_write = "1"b;
		else if argument = "-no_auto_write" then auto_write = "0"b;

		else if (argument = "-fill") | (argument = "-fi") then fill = "1"b;
		else if (argument = "-no_fill") | (argument = "-nfi") then fill = "0"b;

		else if (argument = "-line_length") | (argument = "-ll") then
		     if argument_idx = n_arguments then
			call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "Number after ""-line_length"".");
		     else do;			/* user supplied fill width */
			argument_idx = argument_idx + 1;
			call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
			fill_width = cv_dec_check_ (argument, code);
			if code ^= 0 then
			     call ssu_$abort_line (P_sci_ptr, error_table_$bad_conversion, "", "-line_length ^a",
				argument);
			if fill_width < 31 then
			     call ssu_$abort_line (P_sci_ptr, 0, "Line length must be greater than 30.");
		     end;

		else if (argument = "-header") | (argument = "-he") then include_header = "1"b;
		else if (argument = "-no_header") | (argument = "-nhe") then include_header = "0"b;

		else if (argument = "-request") | (argument = "-rq") then do;
		     if argument_idx = n_arguments then
			call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "String after ""-request"".");
		     argument_idx = argument_idx + 1;
		     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
		     request_line_ptr = addr (argument);
		     request_line_lth = length (argument);
		end;

		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);

	     else call ssu_$abort_line (P_sci_ptr, 0, "Usage:  qedx {-control_args}");
	end;

	message_buffer_ptr = null ();			/* for cleanup handler */
	removed_reply_references = "0"b;

	on condition (cleanup)
	     begin;
		if removed_reply_references then call restore_reply_references ();
		if message_buffer_ptr ^= null () then call ssu_$release_temp_segment (P_sci_ptr, message_buffer_ptr);
	     end;

	call prepare_message ();			/* prepare the message for editing */

	local_qi.header.version = QEDX_INFO_VERSION_1;
	local_qi.editor_name = ssu_$get_subsystem_and_request_name (sci_ptr);
	string (local_qi.header.flags) = ""b;
	local_qi.header.query_if_modified = "1"b;	/* can't exit without writing */

	local_qi.n_buffers = 1;			/* start with just the message buffer */

	local_qi.buffers (1).buffer_name = "0";		/* it's buffer 0 (the default one) */
	local_qi.buffers (1).buffer_pathname = "<send_mail message>";
	local_qi.buffers (1).region_ptr = message_buffer_ptr;
	local_qi.buffers (1).region_max_lth = length (message_buffer);
	local_qi.buffers (1).region_initial_lth = message_text_lth;
	string (local_qi.buffers (1).flags) = ""b;
	local_qi.buffers (1).read_write_region,		/* ... straight into/out of our temporary segment */
	     local_qi.buffers (1).locked_pathname, local_qi.buffers (1).default_read_ok,
	     local_qi.buffers (1).default_write_ok = "1"b;
	local_qi.buffers (1).auto_write = auto_write;	/* ... sigh */

	if request_line_lth > 0 then do;		/* need an "exec" buffer for the requests */
	     local_qi.n_buffers = 2;			/* ... obviously */
	     local_qi.buffers (2).buffer_name = "exec";
	     local_qi.buffers (2).buffer_pathname = "";	/* ... doesn't come from anywhere */
	     local_qi.buffers (2).region_ptr = request_line_ptr;
	     local_qi.buffers (2).region_max_lth, local_qi.buffers (2).region_initial_lth = request_line_lth;
	     string (local_qi.buffers (2).flags) = ""b;
	     local_qi.buffers (2).read_write_region, local_qi.buffers (2).execute_buffer,
		local_qi.buffers (2).locked_pathname = "1"b;
	end;

	call qedx_ (addr (local_qi), code);
	if code = error_table_$fatal_error then		/* couldn't initialize: message already printed... */
	     call ssu_$abort_line (P_sci_ptr, 0);

	message_text_lth = local_qi.buffers (1).region_final_lth;
						/* get length of the buffer after editing */

	call update_message ();			/* get the message header/body back from the user's editing */

	if fill then do;				/* refill it */
	     call sdm_text_mgr_$fill_text (sdm_invocation_ptr, fill_width, fatal_error);
	     if fatal_error then call ssu_$abort_line (P_sci_ptr, 0);
	end;					/* ... fill_text will print appropriate messages */

	return;
%page;
/* The "apply" request: applies an arbitrary Multics command line to a temporary segment containing the message text (or
   text and header if requested) and updates the message with the contents of the segment upon completion of the command
   line.  This request can be used to invoke editors other than qedx (eg: Emacs) on the message */

apply_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	if n_arguments = 0 then call ssu_$abort_line (P_sci_ptr, 0, "Usage:  apply {-control_args} command-line");

	fill_width = sdm_invocation.fill_width;		/* set default width */

	fill = sdm_invocation.fill;			/* defaults to global fill specification */
	include_header = "0"b;
	first_command_argument_idx = 0;		/* haven't found the start of the command line yet */

	do argument_idx = 1 to n_arguments		/* look for control arguments ... */
	     while (first_command_argument_idx = 0);	/* ... until the start of the command line */

	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);

	     if index (argument, "-") = 1 then		/* a control argument */
		if (argument = "-fill") | (argument = "-fi") then fill = "1"b;
		else if (argument = "-no_fill") | (argument = "-nfi") then fill = "0"b;

		else if (argument = "-line_length") | (argument = "-ll") then
		     if argument_idx = n_arguments then
			call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "Number after ""-line_length"".");
		     else do;			/* user supplied fill width */
			argument_idx = argument_idx + 1;
			call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
			fill_width = cv_dec_check_ (argument, code);
			if code ^= 0 then
			     call ssu_$abort_line (P_sci_ptr, error_table_$bad_conversion, "", "-line_length ^a",
				argument);
			if fill_width < 31 then
			     call ssu_$abort_line (P_sci_ptr, 0, "Line length must be greater than 30.");
		     end;

		else if (argument = "-header") | (argument = "-he") then include_header = "1"b;
		else if (argument = "-no_header") | (argument = "-nhe") then include_header = "0"b;

		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);

	     else first_command_argument_idx = argument_idx;
	end;					/* command line starts here */

	if first_command_argument_idx = 0 then
	     call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "Multics command line.");

	message_buffer_ptr = null ();			/* for cleanup handler */
	removed_reply_references = "0"b;

	on condition (cleanup)
	     begin;
		if removed_reply_references then call restore_reply_references ();
		if message_buffer_ptr ^= null () then call ssu_$release_temp_segment (P_sci_ptr, message_buffer_ptr);
	     end;

	call prepare_message ();			/* prepare the message for editing */

	call ssu_$apply_request_util (P_sci_ptr, first_command_argument_idx, message_buffer_ptr, message_text_lth,
	     message_text_lth);			/* call ssu_ to construct and execute the command line */

	call update_message ();			/* get the message header/body back from the user's editing */

	if fill then do;				/* refill it */
	     call sdm_text_mgr_$fill_text (sdm_invocation_ptr, fill_width, fatal_error);
	     if fatal_error then call ssu_$abort_line (P_sci_ptr, 0);
	end;

	return;
%page;
/* The "fill" request: reformats the message body text using format_document_ with fill-on and align-left modes */

fill_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	fill_width = sdm_invocation.fill_width;		/* set default width */

	do argument_idx = 1 to n_arguments;
	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
	     if index (argument, "-") = 1 then		/* a control argument */
		if (argument = "-line_length") | (argument = "-ll") then
		     if argument_idx = n_arguments then
			call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "Number after ""-line_length"".");
		     else do;			/* user supplied fill width */
			argument_idx = argument_idx + 1;
			call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
			fill_width = cv_dec_check_ (argument, code);
			if code ^= 0 then
			     call ssu_$abort_line (P_sci_ptr, error_table_$bad_conversion, "", "-line_length ^a",
				argument);
			if fill_width < 31 then
			     call ssu_$abort_line (P_sci_ptr, 0, "Line length must be greater than 30.");
		     end;
		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);
	     else call ssu_$abort_line (P_sci_ptr, 0, "Usage:  fill {-control_args}");
	end;

	call sdm_text_mgr_$fill_text (sdm_invocation_ptr, fill_width, fatal_error);
	if fatal_error then call ssu_$abort_line (P_sci_ptr, 0);

	return;
%page;
/* Prints the message header or the message summary as described above in the description of the print_header request */

print_message_header:
     procedure ();

	call ioa_ ("^/(^d line^[s^] in body):", message.body.total_lines, (message.body.total_lines ^= 1));


	if formatting_mode = BRIEF_FORMATTING_MODE then do;

/* Print the message summary */

	     if message.subject.text_lth > 0 then do;	/* ... there is a subject */
		call mlsys_utils_$print_text_field (SUBJECT_FIELDNAME, message_subject, "0"b /* single-line field */,
		     0, iox_$user_output, code);
		if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the message subject.");
	     end;

	     if is_empty_list (message.to) then		/* ... no primary recipients */
		call ioa_ ("^a:  <No addresses>", TO_FIELDNAME);
	     else do;
		call mlsys_utils_$print_address_list_field (TO_FIELDNAME, message.to, 0, iox_$user_output, code);
		if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the To field.");
	     end;

	     if ^is_empty_list (message.cc) then do;	/* ... there are secondary recipients */
		call mlsys_utils_$print_address_list_field (CC_FIELDNAME, message.cc, 0, iox_$user_output, code);
		if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the cc field.");
	     end;

	     if ^is_empty_list (message.bcc) then do;	/* ... there are blind recipients */
		call mlsys_utils_$print_address_list_field (BCC_FIELDNAME, message.bcc, 0, iox_$user_output, code);
		if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the bcc field.");
	     end;
	end;


	else do;

/* Print the full message header:  It is necessary to supply the printed representation for the Acknowledge-To, Date,
   From, and Message-ID fields as they are not present in a new message; actually the From field may be present but it
   may also be empty.  This procedure has knowledge of the internal format of message identifiers used by the mail system
   and may fail if said format changes; in addition, the Message-ID field will be printed out of order if there are
   user-defined fields in the message */

	     if sdm_invocation.acknowledge then do;	/* acknowledgements always come to us (for now) */
		call mlsys_utils_$print_address_field (ACKNOWLEDGE_TO_FIELDNAME,
		     sdm_data_$default_from_field -> address_list.addresses (1), 0, iox_$user_output, code);
		if code ^= 0 then
		     call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the Acknowlege-To field.");
	     end;

	     call mlsys_utils_$print_date_time_field (DATE_TIME_CREATED_FIELDNAME,
		sdm_invocation.date_time_body_modified, "1"b /* include day-of-week */, 0, iox_$user_output, code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the Date field.");

	     if is_empty_list (message.from) then do;	/* no From field present: display the default */
		call mlsys_utils_$print_address_list_field (FROM_FIELDNAME, sdm_data_$default_from_field, 0,
		     iox_$user_output, code);
		if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the From field.");
	     end;

	     call mlsys_utils_$print_message_header (message_ptr, formatting_mode, 0, iox_$user_output, code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the message header.");

	     if formatting_mode = LONG_FORMATTING_MODE then do;
		call mlsys_utils_$print_message_id_field (MESSAGE_ID_FIELDNAME,
		     unspec (sdm_invocation.date_time_body_modified), 0, iox_$user_output, code);
		if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Attempting to print the Message-ID field.");
	     end;
	end;

	return;

     end print_message_header;
%page;
/* Prepares the text to be edited by qedx or apply:  The text always includes the message body and, optionally, the
   printed representation of the message header.  As the message references in the In-Reply-To field can not be converted
   back from their printed representations, they are deleted from the message header and are added back later (see
   update_message) */

prepare_message:
     procedure ();

dcl  1 local_fmo aligned like format_message_options;
dcl  idx fixed binary;

	local_fmo.version = FORMAT_MESSAGE_OPTIONS_VERSION_1;
	local_fmo.line_length = -1;			/* ... never need to worry */
	local_fmo.include_body = "1"b;		/* ... always include the body */

	call ssu_$get_temp_segment (P_sci_ptr, "message-text", message_buffer_ptr);
	message_text_lth = 0;			/* nothing in the buffer yet */

	if include_header then do;			/* include the message header (but not In-Reply-To) */
	     if message.n_reply_references > 0 then do;	/* ... get rid of the In-Reply-To field */
		do idx = message.n_reply_references to 1 by -1;
		     call mail_system_$delete_reply_reference (message_ptr, idx, code);
		     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Deleting the In-Reply-To field.");
		end;
		removed_reply_references = "1"b;	/* ... will need to put it back later */
	     end;
	     local_fmo.envelope_formatting_mode, local_fmo.header_formatting_mode,
		local_fmo.redistributions_list_formatting_mode = DEFAULT_FORMATTING_MODE;
	end;

	else					/* include only the message body */
	     local_fmo.envelope_formatting_mode, local_fmo.header_formatting_mode,
		local_fmo.redistributions_list_formatting_mode = NONE_FORMATTING_MODE;

	call mlsys_utils_$format_message (message_ptr, addr (local_fmo), message_buffer_ptr, length (message_buffer),
	     message_text_lth, code);
	if code = error_table_$smallarg then code = mlsys_et_$message_too_large;
	if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Preparing the message for editing.");

	return;

     end prepare_message;
%page;
/* Updates the message from the text returned by qedx or apply:  If the user had asked to edit the header, the new header
   in the message (if any) will replace the old header.  If the In-Reply-To field was deleted by prepare_message, above,
   it will be restored here */

update_message:
     procedure ();

dcl  1 local_pto aligned like parse_text_options;

dcl  abort_the_line bit (1) aligned;
dcl  code fixed binary (35);
dcl  idx fixed binary;

	abort_the_line = "0"b;			/* until proven otherwise */


	if include_header then do;

/* Supplied text contains a header which must be parsed */

	     call mail_system_$free_message (sdm_invocation.message_ptr, (0));
						/* by definition: the old message is invalidated */

	     local_pto.version = PARSE_TEXT_OPTIONS_VERSION_1;
	     local_pto.area_ptr = sdm_invocation.area_ptr;
	     local_pto.list_errors, local_pto.validate_addresses, local_pto.include_invalid_addresses = "1"b;
	     local_pto.mbz = ""b;

	     message_ptr = null ();
	     call mlsys_utils_$parse_message_text (message_text, addr (local_pto), MESSAGE_VERSION_2, message_ptr,
		parse_text_error_list_ptr, code);

	     if message_ptr = null () then do;		/* parse failed badly: treat entire text as message body */
		call mail_system_$create_message (MESSAGE_VERSION_2, message_ptr, (0));
		call use_text_as_message_body ();
	     end;

	     sdm_invocation.message_ptr = message_ptr;	/* this is now the message ... */

	     if removed_reply_references then		/* put back the In-Reply-To field ... */
		call restore_reply_references ();

	     if code ^= 0 then do;			/* something went wrong ... */
		abort_the_line = "1"b;
		if code = mlsys_et_$text_parse_failed then do;
		     do idx = 1 to parse_text_error_list.n_errors;
			begin;
dcl  erroneous_text character (parse_text_error_list.errors (idx).text_lth) unaligned defined (message_text)
	position (parse_text_error_list.errors (idx).text_start);
			     call ssu_$print_message (P_sci_ptr, parse_text_error_list.errors (idx).code,
				"^a^/^-^a", parse_text_error_list.errors (idx).additional_info, erroneous_text);
			end;
		     end;
		end;
		else call ssu_$print_message (P_sci_ptr, code);
	     end;
	end;


	else					/* supplied text is the new message body */
	     call use_text_as_message_body ();


/* Cleanup */

	sdm_invocation.date_time_body_modified = clock ();/* for psuedo Date/Message-ID fields */

	if sdm_invocation.message_state = PROCESSED_MESSAGE then sdm_invocation.message_state = MODIFIED_MESSAGE;

	call ssu_$release_temp_segment (P_sci_ptr, message_buffer_ptr);

	if abort_the_line then call ssu_$abort_line (P_sci_ptr, 0);

	return;



/* Internal to update_message: inserts the supplied text as the message body */

use_text_as_message_body:
	procedure ();

dcl  1 local_mbsp aligned like message_body_section_parameter;
dcl  code fixed binary (35);

	     local_mbsp.version = MESSAGE_BODY_SECTION_PARAMETER_VERSION_2;
	     local_mbsp.section.section_type = MESSAGE_PREFORMATTED_BODY_SECTION;
	     message_body_section_ptr = addr (local_mbsp.section);
	     message_preformatted_body_section.text_ptr = message_buffer_ptr;
	     message_preformatted_body_section.text_lth = message_text_lth;

	     call mail_system_$replace_body (message_ptr, addr (local_mbsp), code);
	     if code ^= 0 then
		call ssu_$abort_line (sdm_invocation.sci_ptr, code,
		     "Attempting to place the edited message text into the message.");

	     return;

	end use_text_as_message_body;

     end update_message;
%page;
/* Actually restores the references to the original messages to the In-Reply-To field */

restore_reply_references:
     procedure ();

dcl  idx fixed binary;

	removed_reply_references = "0"b;		/* only try this once */

	original_messages_ptr = sdm_invocation.original_messages_ptr;

	if original_messages_ptr = null () then return;	/* there are no reply references(?) */

	do idx = 1 to original_messages.n_original_messages;
	     call mail_system_$add_reply_reference (sdm_invocation.message_ptr,
		original_messages.messages (idx).message_ptr, (-1), code);
	     if code ^= 0 then
		call ssu_$print_message (P_sci_ptr, code,
		     "Unable to add the reference to message #^d to the In-Reply-To field.",
		     original_messages.messages (idx).message_idx);
	end;

	return;

     end restore_reply_references;
%page;
/* Determines if the given address list is empty */

is_empty_list:
     procedure (p_address_list_ptr) returns (bit (1) aligned);

dcl  p_address_list_ptr pointer parameter;

	if p_address_list_ptr = null () then		/* if there's no data at all, it's empty */
	     return ("1"b);

	else return ((p_address_list_ptr -> address_list.n_addresses = 0));

     end is_empty_list;
%page;
%include sdm_invocation;
%page;
%include sdm_original_messages;
%page;
%include sdm_data;
%page;
%include send_mail_options;
%page;
%include mlsys_message;
%page;
%include mlsys_address_list;
%page;
%include mlsys_field_names;
%page;
%include mlsys_format_options;
%page;
%include mlsys_parse_txt_options;
%page;
%include qedx_info;

     end sdm_msg_requests_;
