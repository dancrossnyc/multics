/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(89-04-11,Lee), approve(89-05-10,MCR8104),
     audit(89-07-18,LZimmerman), install(89-10-02,MR12.3-1079):
     phx18564, phx17540, phx17353, Mail 446 - added entry set_new_current_msg
     to be used for updating the current message; it will guarantee the new
     current message is not a deleted message; reformatting.
                                                   END HISTORY COMMENTS */


/* format: off */

/* Interface between the read_mail subsystem and the mail_system_ mailbox manager */

/* Created:  September 1983 by G. Palter */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen,^indcomtxt */


rdm_mailbox_interface_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_rdm_invocation_ptr pointer parameter;
dcl  P_code fixed binary (35) parameter;		/* open_mailbox, read_message */

dcl  P_mailbox_dirname character (*) parameter;		/* open_mailbox: absolute pathname of the directory containing
						         the mailbox */
dcl  P_mailbox_ename character (*) parameter;		/* open_mailbox: entryname of the mailbox */
dcl  P_open_options_ptr pointer parameter;		/* open_mailbox: -> structure containing options for mail
						         system to use when opening the mailbox */

dcl  P_announce_new_messages bit (1) aligned parameter;	/* read_new_messages: ON => announce how many new messages
						      were read from the mailbox */
dcl  P_n_new_messages fixed binary parameter;		/* read_new_messages: set to the number of new messages read
						      from the mailbox */

dcl  P_message_number fixed binary parameter;		/* read_message: read_mail message number for the message to
						         be read from the mailbox;
						   mark_processed, mark_processed_and_acknowledge: read_mail
						         message number of message to be marked as processed
						         (and acknowledged) */

dcl  P_message_ptr pointer parameter;			/* read_message: set -> the message structure as read from the
						         mailbox */

dcl  P_delete_force bit (1) aligned parameter;		/* delete_messages: ON => delete unprocessed messages without
						      asking for permission and ignore access errors */

dcl  P_error_during_expunge bit (1) aligned parameter;	/* expunge_messages: set ON => an error occured while trying
						      to expunge messages in the mailbox */

dcl  P_old_current_msg fixed binary parameter;		/* set_new_current_msg: specifies the message number
						       which the new current message must equal or
						       exceed */

dcl  P_new_current_msg fixed binary parameter;		/* set_new_current_msg: the new current message
						       (a non-deleted message) passed back */
/**** format: indcomtxt */

/* Local copies of parameters */

dcl  n_new_messages fixed binary;

dcl  message_number fixed binary;

dcl  code fixed binary (35);


/* Remaining declarations */

dcl  1 mdl aligned based (mdl_ptr),
       2 n_messages fixed binary,
       2 messages (mdl_n_messages refer (mdl.n_messages)),	/* list of messages in the mailbox ... */
         3 message_number fixed binary,			/* ... giving their read_mail message number */
         3 expunged bit (1) aligned;			/* ... and whether or not they were just expunged */
dcl  mdl_ptr pointer;
dcl  mdl_n_messages fixed binary;

dcl  new_message_list_ptr pointer;
dcl  (first_new_message_number, first_new_message_mailbox_idx) fixed binary;

dcl  ok_to_delete bit (1);				/* command_query_$yes_no should've used aligned... */
dcl  last_deleted_message fixed binary;

dcl  (message_idx, idx) fixed binary;
dcl  n_previously_expunged fixed binary;

dcl  iox_$error_output pointer external;

/* format: off */
dcl (emf_et_$expunged_message, error_table_$bad_index, mlsys_et_$all_messages_deleted, mlsys_et_$cant_be_deleted,
     mlsys_et_$no_more_messages, mlsys_et_$some_messages_not_deleted)
	fixed binary (35) external;
/* format: on */

dcl  command_query_$yes_no entry () options (variable);
dcl  continue_to_signal_ entry (fixed binary (35));
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  cu_$cl entry (bit (36) aligned);
dcl  cu_$generate_call entry (entry, pointer);
dcl  find_condition_info_ entry (pointer, pointer, fixed binary (35));
dcl  ioa_ entry () options (variable);
dcl  ioa_$ioa_switch entry () options (variable);
dcl  mail_system_$acknowledge_message entry (pointer, fixed binary (35));
dcl  mail_system_$expunge_messages entry (pointer, fixed binary (35));
dcl  mail_system_$mark_message_for_deletion entry (pointer, fixed binary (35));
dcl  mail_system_$open_mailbox entry (character (*), character (*), pointer, character (8), pointer, fixed binary (35));
dcl  mail_system_$read_message entry (pointer, fixed binary, fixed binary (35));
dcl  mail_system_$read_new_messages entry (pointer, fixed binary, fixed binary, fixed binary, fixed binary (35));
dcl  mail_system_$unmark_message_for_deletion entry (pointer, fixed binary (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$print_message entry () options (variable);
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);

dcl  sub_error_ condition;

dcl  (addr, length, min, null, string) builtin;
%page;
/* Open the specified mailbox and initialize its message chains */

open_mailbox:
     entry (P_rdm_invocation_ptr, P_mailbox_dirname, P_mailbox_ename, P_open_options_ptr, P_code);

	rdm_invocation_ptr = P_rdm_invocation_ptr;

	call mail_system_$open_mailbox (P_mailbox_dirname, P_mailbox_ename, P_open_options_ptr, MAILBOX_VERSION_2,
	     rdm_invocation.mailbox_ptr, P_code);
	if P_code ^= 0 then return;

	mailbox_ptr = rdm_invocation.mailbox_ptr;

	message_list_n_messages = mailbox.n_messages;

	allocate message_list in (rdm_area) set (rdm_invocation.message_list_ptr);
	do idx = 1 to message_list.n_messages;		/* start with the read_mail message numbers ... */
	     message_list.messages (idx).message_idx = idx;
						/* ... being identical to the mail system's */
	     string (message_list.messages (idx).flags) = ""b;
	     message_list.messages (idx).search_text_ptr = null ();
	     message_list.messages (idx).search_text_lth = 0;
	end;

	allocate all_chain in (rdm_area) set (rdm_invocation.message_chains.all);
	all_chain.n_messages = message_list.n_messages;	/* no expunged messages yet */
	do idx = 1 to all_chain.n_messages;
	     all_chain.messages (idx) = idx;
	end;

	allocate undeleted_chain in (rdm_area) set (rdm_invocation.message_chains.undeleted);
	undeleted_chain.n_messages = message_list.n_messages;
	do idx = 1 to undeleted_chain.n_messages;	/* no messages have been marked for deletion */
	     undeleted_chain.messages (idx) = idx;
	end;

	allocate deleted_chain in (rdm_area) set (rdm_invocation.message_chains.deleted);
	deleted_chain.n_messages = 0;			/* no messages have been marked for deletion */

	allocate marked_chain in (rdm_area) set (rdm_invocation.message_chains.marked);
	marked_chain.n_messages = 0;			/* haven't marked any messages yet */

	allocate marked_as_original_chain in (rdm_area) set (rdm_invocation.message_chains.marked_as_original);
	marked_as_original_chain.n_messages = 0;	/* haven't had a reply/forward request yet */

	rdm_invocation.current_message = min (1, all_chain.n_messages);
						/* by definition the first message read is now current */

	P_code = 0;				/* success */

	return;
%page;
/* Read any recently arrived messages from the mailbox and update all message chains appropriately */

read_new_messages:
     entry (P_rdm_invocation_ptr, P_announce_new_messages, P_n_new_messages);

	rdm_invocation_ptr = P_rdm_invocation_ptr;
	mailbox_ptr = rdm_invocation.mailbox_ptr;

	first_new_message_number = message_list.n_messages + 1;
						/* compute message number of first new message (if any) */
	first_new_message_mailbox_idx = mailbox.n_messages + 1;
						/* they appear after last one presently in the mailbox */


/* Read and announce the new messages (if any) */

	call mail_system_$read_new_messages (mailbox_ptr, n_new_messages, (0), (0), code);
	if (code ^= 0) & (code ^= mlsys_et_$no_more_messages) then
	     call abort_read_new_messages (rdm_invocation.sci_ptr, code, "Unable to check for new messages in ^a.",
		rdm_invocation.mailbox_name);

	rdm_invocation.mailbox_ptr = mailbox_ptr;	/* may have been changed */

	P_n_new_messages = n_new_messages;		/* let the caller know */
	if n_new_messages = 0 then return;		/* nothing to do */

	if P_announce_new_messages then		/* tell the user ... */
	     if n_new_messages = 1 then
		call ioa_ ("A new message has arrived.");
	     else call ioa_ ("^d new messages have arrived.", n_new_messages);


/* Add the necessary slots to the end of read_mail's message_list */

	message_list_n_messages = message_list.n_messages + n_new_messages;

	allocate message_list in (rdm_area) set (new_message_list_ptr);

	do idx = 1 to message_list.n_messages;		/* copy the old list */
	     new_message_list_ptr -> message_list.messages (idx) = message_list.messages (idx);
	end;

	do idx = 1 to n_new_messages;			/* add data for the new messages */
	     message_number = first_new_message_number + (idx - 1);
	     new_message_list_ptr -> message_list.messages (message_number).message_idx =
		first_new_message_mailbox_idx + (idx - 1);
	     string (new_message_list_ptr -> message_list.messages (message_number).flags) = ""b;
	     new_message_list_ptr -> message_list.messages (message_number).search_text_ptr = null ();
	     new_message_list_ptr -> message_list.messages (message_number).search_text_lth = 0;
	end;

	rdm_invocation.message_list_ptr = new_message_list_ptr;


/* Update the message chains */

	call grow_message_chain (rdm_invocation.message_chains.all);
	do idx = 1 to n_new_messages;			/* they're in the "all" chain, of course */
	     all_chain.messages (all_chain.n_messages + idx) = first_new_message_number + (idx - 1);
	end;
	all_chain.n_messages = all_chain.n_messages + n_new_messages;

	call grow_message_chain (rdm_invocation.message_chains.undeleted);
	do idx = 1 to n_new_messages;			/* ... and they haven't been deleted yet */
	     undeleted_chain.messages (undeleted_chain.n_messages + idx) = first_new_message_number + (idx - 1);
	end;
	undeleted_chain.n_messages = undeleted_chain.n_messages + n_new_messages;

	call grow_message_chain (rdm_invocation.message_chains.deleted);
	call grow_message_chain (rdm_invocation.message_chains.marked);
	call grow_message_chain (rdm_invocation.message_chains.marked_as_original);

	if rdm_invocation.current_message = 0 then	/* no current message: first one read becomes current ... */
	     rdm_invocation.current_message = first_new_message_number;

	return;



/* Expands the given message chain to insure it has enough room to list all messages now available */

grow_message_chain:
     procedure (p_message_chain_ptr);

dcl  p_message_chain_ptr pointer parameter;

dcl  (old_message_chain_ptr, new_message_chain_ptr) pointer;
dcl  idx fixed binary;

	old_message_chain_ptr = p_message_chain_ptr;

	allocate message_chain in (rdm_area) set (new_message_chain_ptr);

	new_message_chain_ptr -> message_chain.n_messages = old_message_chain_ptr -> message_chain.n_messages;

	do idx = 1 to old_message_chain_ptr -> message_chain.n_messages;
	     new_message_chain_ptr -> message_chain.messages (idx) =
		old_message_chain_ptr -> message_chain.messages (idx);
	end;

	p_message_chain_ptr = new_message_chain_ptr;

	return;

     end grow_message_chain;



/* Aborts the read_new_messages operation after printing an appropriate message:  Errors during this operation can not
   abort the request line; otherwise, it would never be possible to exit read_mail as the quit request invokes this
   entrpyoint */

abort_read_new_messages:
     procedure () options (variable);

	call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr ());

	if rdm_invocation.debug_mode then do;		/* simulate the actions of ssu_$abort_line */
	     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; calling cu_$cl.");
	     call cu_$cl (""b);
	end;

	go to RETURN_FROM_READ_NEW_MESSAGES_AFTER_ERROR;

     end abort_read_new_messages;

RETURN_FROM_READ_NEW_MESSAGES_AFTER_ERROR:
	return;
%page;
/* Read the specified message from the mailbox if it hasn't already been read */

read_message:
     entry (P_rdm_invocation_ptr, P_message_number, P_message_ptr, P_code);

	rdm_invocation_ptr = P_rdm_invocation_ptr;
	mailbox_ptr = rdm_invocation.mailbox_ptr;

	message_number = P_message_number;
	if (message_number < 1) | (message_number > message_list.n_messages) then do;
	     P_code = error_table_$bad_index;		/* not a read_mail message number */
	     return;
	end;

	if message_list.messages (message_number).message_idx = 0 then do;
	     P_code = emf_et_$expunged_message;
	     return;
	end;

	message_ptr = mailbox.messages (message_list.messages (message_number).message_idx).message_ptr;

	if message_ptr = null () then do;		/* hasn't been read yet ... */
	     call mail_system_$read_message (mailbox_ptr, message_list.messages (message_number).message_idx, code);
	     if code = 0 then
		message_ptr = mailbox.messages (message_list.messages (message_number).message_idx).message_ptr;
	end;
	else code = 0;				/* have the message already */

	P_message_ptr = message_ptr;
	P_code = code;

	return;
%page;
/* Mark the specified message as having been processed:  Once a message is processed by a request which causes the user to
   "see" it in some way (eg: list, print), it is marked as processed to allow the user to delete it without being queried
   for permission */

mark_processed:
     entry (P_rdm_invocation_ptr, P_message_number);

	rdm_invocation_ptr = P_rdm_invocation_ptr;
	message_number = P_message_number;

	if (message_number >= 1) & (message_number <= message_list.n_messages) then
	     message_list.messages (message_number).processed = "1"b;

	return;



/* Mark the specified message as processed and send an acknowledgement message if appropriate */

mark_processed_and_acknowledge:
     entry (P_rdm_invocation_ptr, P_message_number);

	rdm_invocation_ptr = P_rdm_invocation_ptr;
	mailbox_ptr = rdm_invocation.mailbox_ptr;

	message_number = P_message_number;

	if (message_number < 1) | (message_number > message_list.n_messages) then return;

	message_list.messages (message_number).processed = "1"b;

	if ^rdm_invocation.acknowledge then return;	/* user doesn't want to acknowledge */

	if message_list.messages (message_number).message_idx ^= 0 then
	     message_ptr = mailbox.messages (message_list.messages (message_number).message_idx).message_ptr;
	else message_ptr = null ();

	if message_ptr ^= null () then		/* don't bother unless it was already read ... */
	     if message.must_be_acknowledged then	/* ... but don't bother the user if it fails */
		call mail_system_$acknowledge_message (message_ptr, (0));

	return;
%page;
/* Delete all marked messages:  Actually, the messages are only logically deleted and are not physically deleted from the
   mailbox until the next call to the expunge_messages entrypoint below.  If the delete_force parameter is not set, the
   user will be queried for permission to deleteany unprocessed messages; if the user denies permission or the user lacks
   access to delete any of the messages, none of the messages are deleted */

delete_messages:
     entry (P_rdm_invocation_ptr, P_delete_force);

	rdm_invocation_ptr = P_rdm_invocation_ptr;

	if ^P_delete_force then do;

/* Check that it's OK to delete all the messages */

	     do message_idx = 1 to marked_chain.n_messages;
		message_number = marked_chain.messages (message_idx);

		call read_message (rdm_invocation_ptr, message_number, message_ptr, code);
		if code ^= 0 then
		     call ssu_$abort_line (rdm_invocation.sci_ptr, code,
			"Reading message #^d from ^a.  No messages deleted.", message_number,
			rdm_invocation.mailbox_name);

		if ^message.can_be_deleted then
		     call ssu_$abort_line (rdm_invocation.sci_ptr, mlsys_et_$cant_be_deleted,
			"Message #^d.  No messages deleted.", message_number);

		if ^message_list.messages (message_number).processed then do;
		     call command_query_$yes_no (ok_to_delete, 0,
			ssu_$get_subsystem_and_request_name (rdm_invocation.sci_ptr), "",
			"Message #^d has not been processed.  OK to delete?", message_number);
		     if ^ok_to_delete then call ssu_$abort_line (rdm_invocation.sci_ptr, 0, "No messages deleted.");
		end;
	     end;
	end;


/* Perform the deletions: all errors at this point are non-fatal */

	rdm_invocation.current_message = 0;		/* no current message while deleting */
	last_deleted_message = 0;			/* we may not actually succeed in deleting anything */

	do message_idx = 1 to marked_chain.n_messages;
	     message_number = marked_chain.messages (message_idx);

	     call read_message (rdm_invocation_ptr, message_number, message_ptr, code);
	     if code ^= 0 then
		call abort_deletion_of_message (rdm_invocation.sci_ptr, code,
		     "Reading message #^d from ^a.  It will not be deleted.", message_number,
		     rdm_invocation.mailbox_name);

	     if ^message.marked_for_deletion then do;
		message_list.messages (message_number).processed = "1"b;

		call mail_system_$mark_message_for_deletion (message_ptr, code);
		if code ^= 0 then
		     call abort_deletion_of_message (rdm_invocation.sci_ptr, code, "Message #^d will not be deleted.",
			message_number);

		call delete_message_from_chain (rdm_invocation.message_chains.undeleted, message_number);
		call add_message_to_chain (rdm_invocation.message_chains.deleted, message_number);

		last_deleted_message = message_number;	/* keep track of last success */
	     end;

DELETE_NEXT_MESSAGE:
	end;


/* Set the current message to the first non-deleted message after the last deleted message */

	if undeleted_chain.n_messages <= 0 then		/* just deleted the last message */
	     if ^rdm_invocation.brief then call ioa_ ("All messages have been deleted.");

	if last_deleted_message > 0 then do;
	     do message_idx = 1 to undeleted_chain.n_messages while (rdm_invocation.current_message = 0);
		if undeleted_chain.messages (message_idx) > last_deleted_message then
		     rdm_invocation.current_message = undeleted_chain.messages (message_idx);
	     end;
	end;

	return;

%page;
/* sets the value of the new current message; if P_old_current_msg is a not a
   deleted message, its value is assigned to P_new_current_msg; otherwise
   the next non-deleted message number is assigned. There is no current
   message (0 is assigned) if P_old_current_msg is a deleted message and no
   more non-deleted messages follow.
*/

set_new_current_msg:
     entry (P_rdm_invocation_ptr, P_old_current_msg, P_new_current_msg);

	rdm_invocation_ptr = P_rdm_invocation_ptr;

/* check undeleted chain for the new current message;
   if old current message is deleted, pass back the next
   undeleted message number  */
	do idx = 1 to undeleted_chain.n_messages;
	     if undeleted_chain.messages (idx) >= P_old_current_msg then do;
		P_new_current_msg = undeleted_chain.messages (idx);
		return;
	     end;
	end;

/* no undeleted messages after old current message; no longer
   a current message */
	P_new_current_msg = 0;
	return;



/* Prints an explanation as to why a message could not be deleted and continues with the deletion of the remaining marked
   messages */

abort_deletion_of_message:
     procedure () options (variable);

	call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr ());

	if rdm_invocation.debug_mode then do;		/* simulate the actions of ssu_$abort_line */
	     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; calling cu_$cl.");
	     call cu_$cl (""b);
	end;

	go to DELETE_NEXT_MESSAGE;

     end abort_deletion_of_message;
%page;
/* Remove the marked messages from the list of messages to be deleted by the next call to the expunge_messages entrypoint
*/

retrieve_messages:
     entry (P_rdm_invocation_ptr);

	rdm_invocation_ptr = P_rdm_invocation_ptr;

	do message_idx = 1 to marked_chain.n_messages;
	     message_number = marked_chain.messages (message_idx);

	     call read_message (rdm_invocation_ptr, message_number, message_ptr, code);
	     if code ^= 0 then
		call abort_retrieval_of_message (rdm_invocation.sci_ptr, code,
		     "Reading message #^d from ^a.  It will not be retrieved.", message_number,
		     rdm_invocation.mailbox_name);

	     if message.marked_for_deletion then do;
		call mail_system_$unmark_message_for_deletion (message_ptr, code);
		if code ^= 0 then
		     call abort_retrieval_of_message (rdm_invocation.sci_ptr, code,
			"Message #^d will not be retrieved.", message_number);

		call delete_message_from_chain (rdm_invocation.message_chains.deleted, message_number);
		call add_message_to_chain (rdm_invocation.message_chains.undeleted, message_number);

		rdm_invocation.current_message = message_number;
	     end;					/* last message retrieved will be current */

RETRIEVE_NEXT_MESSAGE:
	end;

	return;


/* Prints an explanation as to why a message could not be retrieved and continues with the retrieval of the remaining
   marked messages */

abort_retrieval_of_message:
     procedure () options (variable);

	call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr ());

	if rdm_invocation.debug_mode then do;		/* simulate the actions of ssu_$abort_line */
	     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; calling cu_$cl.");
	     call cu_$cl (""b);
	end;

	go to RETRIEVE_NEXT_MESSAGE;

     end abort_retrieval_of_message;
%page;
/* Expunge the messages marked for deletion from the mailbox and update all message chains as appropriate */

expunge_messages:
     entry (P_rdm_invocation_ptr, P_error_during_expunge);

	rdm_invocation_ptr = P_rdm_invocation_ptr;
	mailbox_ptr = rdm_invocation.mailbox_ptr;

	P_error_during_expunge = "0"b;		/* assume everything will go OK */

	if mailbox.n_deleted_messages = 0 then return;	/* nothing waiting to be expunged */



/* Construct an array parallel to the mailbox structure which lists the messages that are going to be deleted along with
   their corresponding read_mail message numbers */

	mdl_n_messages = mailbox.n_messages;

	allocate mdl in (rdm_area) set (mdl_ptr);

	do message_idx = 1 to mdl.n_messages;
	     message_number = 0;
	     do idx = 1 to message_list.n_messages while (message_number = 0);
		if message_list.messages (idx).message_idx = message_idx then message_number = idx;
	     end;
	     if message_number = 0 then
		call abort_expunge_messages (rdm_invocation.sci_ptr, error_table_$bad_index,
		     "Unable to determine the read_mail message number for message #^d in ^a.", message_idx,
		     rdm_invocation.mailbox_name);

	     mdl.messages (message_idx).message_number = message_number;

	     message_ptr = mailbox.messages (message_idx).message_ptr;
	     if message_ptr ^= null () then		/* can't be marked without having been read ... */
		mdl.messages (message_idx).expunged = message.marked_for_deletion;
	     else mdl.messages (message_idx).expunged = "0"b;
	end;


/* Now actually delete the messages and update the above list to reflect those messages which were not deleted */

	on condition (sub_error_)
	     begin;				/* in case something goes wrong while deleting */

dcl  1 ci aligned like condition_info;

	     ci.version = condition_info_version_1;
	     call find_condition_info_ (null (), addr (ci), (0));

	     sub_error_info_ptr = ci.info_ptr;
	     if sub_error_info.name ^= "mail_system_" then do;
		call continue_to_signal_ ((0));	/* not being reported by the mail system */
		go to CONTINUE_FROM_HANDLER;
	     end;

	     delete_error_info_ptr = sub_error_info.info_ptr;

	     call ssu_$print_message (rdm_invocation.sci_ptr, delete_error_info.code,
		"Unable to delete message #^d.^[  ^a^]  Deletion of other messages continues.",
		delete_error_info.message_number, (length (delete_error_info.additional_info) > 0),
		delete_error_info.additional_info);

	     mdl.messages (delete_error_info.message_number).expunged = "0"b;
	     go to CALL_EXPUNGE_MESSAGES;

CONTINUE_FROM_HANDLER:
	end;

CALL_EXPUNGE_MESSAGES:
	call mail_system_$expunge_messages (mailbox_ptr, code);
	if (code ^= 0) & (code ^= mlsys_et_$all_messages_deleted) & (code ^= mlsys_et_$some_messages_not_deleted) then
	     call abort_expunge_messages (rdm_invocation.sci_ptr, code, "Deleting messages from ^a.",
		rdm_invocation.mailbox_name);

	revert condition (sub_error_);

	rdm_invocation.mailbox_ptr = mailbox_ptr;	/* said structure should have been changed by the above */
	P_error_during_expunge = (code = mlsys_et_$some_messages_not_deleted);


/* Finally update the message_list structure to reflect the new mailbox message numbers and remove all expunged messages
   from all message chains */

	n_previously_expunged = 0;			/* # of messages expunged before this message */

	do message_idx = 1 to mdl.n_messages;
	     message_number = mdl.messages (message_idx).message_number;
	     if mdl.messages (message_idx).expunged then do;
		message_list.messages (message_number).message_idx = 0;
		call delete_message_from_chain (rdm_invocation.message_chains.all, message_number);
		call delete_message_from_chain (rdm_invocation.message_chains.undeleted, message_number);
		call delete_message_from_chain (rdm_invocation.message_chains.deleted, message_number);
		call delete_message_from_chain (rdm_invocation.message_chains.marked, message_number);
		call delete_message_from_chain (rdm_invocation.message_chains.marked_as_original, message_number);
		n_previously_expunged = n_previously_expunged + 1;
	     end;
	     else message_list.messages (message_number).message_idx =
		     message_list.messages (message_number).message_idx - n_previously_expunged;
	end;

	return;



/* Aborts the expunge_messages operation after printing an appropriate message */

abort_expunge_messages:
     procedure () options (variable);

	call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr ());

	if rdm_invocation.debug_mode then do;		/* simulate the actions of ssu_$abort_line */
	     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; calling cu_$cl.");
	     call cu_$cl (""b);
	end;

	go to RETURN_FROM_EXPUNGE_MESSAGES_AFTER_ERROR;

     end abort_expunge_messages;

RETURN_FROM_EXPUNGE_MESSAGES_AFTER_ERROR:
	P_error_during_expunge = "1"b;		/* let the caller know something's very wrong */
	return;
%page;
/* Adds the specified message to the given message chain */

add_message_to_chain:
     procedure (p_message_chain_ptr, p_message_number);

dcl  p_message_chain_ptr pointer parameter;
dcl  p_message_number fixed binary parameter;

dcl  (message_idx, idx) fixed binary;


	message_chain_ptr = p_message_chain_ptr;

	do message_idx = 1 to message_chain.n_messages;

	     if message_chain.messages (message_idx) = p_message_number then return;

	     if message_chain.messages (message_idx) > p_message_number then do;
		/*** Insert it here ... */
		do idx = message_chain.n_messages to message_idx by -1;
		     message_chain.messages (idx + 1) = message_chain.messages (idx);
		end;
		message_chain.messages (message_idx) = p_message_number;
		message_chain.n_messages = message_chain.n_messages + 1;
		return;
	     end;
	end;

	/*** Control arrives here iff the new message should be last on the chain */
	message_chain.n_messages = message_chain.n_messages + 1;
	message_chain.messages (message_chain.n_messages) = p_message_number;

	return;

     end add_message_to_chain;



/* Removes the specified message from the given message chain */

delete_message_from_chain:
     procedure (p_message_chain_ptr, p_message_number);

dcl  p_message_chain_ptr pointer parameter;
dcl  p_message_number fixed binary parameter;

dcl  (idx, jdx) fixed binary;

	message_chain_ptr = p_message_chain_ptr;

	do idx = message_chain.n_messages to 1 by -1;	/* go backwards to avoid changing loop terminator value */
	     if message_chain.messages (idx) = p_message_number then do;
		do jdx = (idx + 1) to message_chain.n_messages;
		     message_chain.messages (jdx - 1) = message_chain.messages (jdx);
		end;
		message_chain.n_messages = message_chain.n_messages - 1;
	     end;
	end;

	return;

     end delete_message_from_chain;


%page;
%include rdm_invocation;
%page;
%include rdm_message_list;
%page;
%include rdm_message_chains;
%page;
%include mlsys_mailbox;
%page;
%include mlsys_message;
%page;
%include mlsys_delete_error_info;
%page;
%include condition_info;

%include sub_error_info;

%include condition_info_header;

     end rdm_mailbox_interface_;
