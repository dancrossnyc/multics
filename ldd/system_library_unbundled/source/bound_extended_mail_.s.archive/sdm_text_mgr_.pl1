/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Manager for the text of the message being created by the send_mail subsystem */

/* Created:  1 January 1979 by G. Palter */
/* Modified: 9 January 1979 by G. Palter to implement the fill_text entry */
/* Modified: 11 January 1979 by G. Palter to fix bug causing OOB's in terminal_input */
/* Modified: 24 January 1979 by G. Palter to add process_original_text entry */
/* Modified: 31 January 1979 by G. Palter to change filling of indented lines, fix bug in handling original text, and add
      a program_interrupt handler to terminal_input entry */
/* Modified: 2 January 1980 by G. Palter to fix send_mail bug #003 -- filling the message text occasionally leaves
      whitespace at the end of lines */
/* Modified: 17 September 1982 by G. Palter to fix mail_system error #0360 -- if -include_original is used along with
      -input_file, the reply message will contain nulls for the input file rather then the actual text */
/* Modified: 31 March 1983 by G. Palter to use format_document_ to fill text */
/* Modified: September 1983 by G. Palter to convert to new mail system interface and to fix mail_system error #0359 --
      the header fields included as part of the original message(s) are reformatted if the user requests that the original
      message(s) be reformatted */
/* Modified: 8 March 1984 by G. Palter to fix error #0418 -- when replying to a message which has been forwarded with
      comments, the "-include_original" control argument should cause the comments to be added to the text of the reply
      message */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


sdm_text_mgr_:
     procedure ();

	return;					/* not an entrypoint */


/* Common Parameters */

dcl  P_sdm_invocation_ptr pointer parameter;
dcl  P_fatal_error bit (1) aligned parameter;		/* set ON => an unrecoverable error occured */


/* process_original_text Parameters */

dcl  P_original_text_control_ptr pointer parameter;	/* -> description of how to process the original text */


/* terminal_input Parameters */

dcl  P_input_terminator_type fixed binary parameter;	/* set to type of termination (normal/request-loop/qedx) */
dcl  P_edit_requests_ptr pointer parameter;		/* set -> editor requests input by user (if any) */
dcl  P_edit_requests_lth fixed binary (21) parameter;	/* set to length of the editor requests */


/* file_input Parameters */

dcl  P_input_file_dirname character (*) parameter;	/* directory containing the input file */
dcl  P_input_file_ename character (*) parameter;		/* entryname of the input file */


/* fill_text Parameters */

dcl  P_fill_width fixed binary parameter;		/* width to use for formatting the text */


/* Local copies of parameters */

dcl  1 original_text_control like send_mail_options.original_text_control aligned based (original_text_control_ptr);
dcl  original_text_control_ptr pointer;

dcl  edit_requests character (edit_requests_lth) unaligned based (edit_requests_ptr);
dcl  edit_requests_ptr pointer;
dcl  edit_requests_lth fixed binary (21);

dcl  terminator_type fixed binary;			/* type of terminator seen in text */


/* Remaining declarations */

dcl  original_buffer character (4 * sys_info$max_seg_size) unaligned based (original_buffer_ptr);
dcl  original_text character (original_text_lth) unaligned based (original_buffer_ptr);
dcl  original_buffer_ptr pointer;
dcl  original_text_lth fixed binary (21);

dcl  fdoc_buffer character (4 * sys_info$max_seg_size) unaligned based (fdoc_buffer_ptr);
dcl  fdoc_buffer_ptr pointer;
dcl  fdoc_text_lth fixed binary (21);

dcl  1 local_mbsp aligned like message_body_section_parameter;
dcl  1 local_fdo aligned like format_document_options;

dcl  message_idx fixed binary;

dcl  the_character character (1) aligned;
dcl  (input_line_lth, idx) fixed binary (21);
dcl  last_character_of_sequence fixed binary;

dcl  input_file_ptr pointer;
dcl  input_file_bc fixed binary (24);

dcl  code fixed binary (35);

dcl  NL character (1) static options (constant) initial ("
");

dcl  sys_info$max_seg_size fixed binary (19) external;
dcl  iox_$error_output pointer external;
dcl  iox_$user_input pointer external;

/* format: off */
dcl (error_table_$recoverable_error, error_table_$smallarg, mlsys_et_$message_too_large)
	fixed binary (35) external;
/* format: on */

dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  cu_$cl entry (bit (36) aligned);
dcl  cu_$generate_call entry (entry, pointer);
dcl  format_document_$string entry (character (*), character (*), fixed binary (21), pointer, fixed binary (35));
dcl  initiate_file_ entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35));
dcl  ioa_ entry () options (variable);
dcl  ioa_$ioa_switch entry () options (variable);
dcl  iox_$get_line entry (pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  mail_system_$add_body_section entry (pointer, pointer, fixed binary, fixed binary (35));
dcl  mail_system_$replace_body entry (pointer, pointer, fixed binary (35));
dcl  mlsys_utils_$format_address_list_field
	entry (character (*) varying, pointer, fixed binary, pointer, fixed binary (21), fixed binary (21),
	fixed binary (35));
dcl  mlsys_utils_$format_date_time_field
	entry (character (*) varying, fixed binary (71), bit (1) aligned, fixed binary, pointer, fixed binary (21),
	fixed binary (21), fixed binary (35));
dcl  mlsys_utils_$format_message_body
	entry (pointer, fixed binary, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  mlsys_utils_$format_redistributions_list
	entry (pointer, fixed binary, fixed binary, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  mlsys_utils_$format_text_field
	entry (character (*) varying, character (*), bit (1) aligned, fixed binary, pointer, fixed binary (21),
	fixed binary (21), fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);
dcl  ssu_$print_message entry () options (variable);
dcl  ssu_$release_temp_segment entry (pointer, pointer);
dcl  terminate_file_ entry (pointer, fixed binary (24), bit (*), fixed binary (35));

dcl  (cleanup, program_interrupt) condition;

dcl  (addr, clock, divide, index, length, null, string, substr) builtin;
%page;
/* Adds the original message text to the body of the message:  The original text consists of the Date, From, and Subject
   fields, any redistributions with comments, and the actual message body of the original messages.  This text is indented
   as requested and the original message bodies are also reformatted if requested.  The messages are processed backwards
   in order to allow this entrypoint to be called when the message body isn't empty which will be the case when the
   include_original request is implemented */

process_original_text:
     entry (P_sdm_invocation_ptr, P_original_text_control_ptr, P_fatal_error);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	original_text_control_ptr = P_original_text_control_ptr;

	P_fatal_error = "0"b;			/* until proven otherwise */

	if sdm_invocation.original_messages_ptr = null () then return;

	original_messages_ptr = sdm_invocation.original_messages_ptr;
	if original_messages.n_original_messages = 0 then return;

	input_file_ptr,				/* for cleanup handler */
	     original_buffer_ptr, fdoc_buffer_ptr = null ();

	on condition (cleanup) call release_text_mgr_buffers ();

	call ssu_$get_temp_segment (sdm_invocation.sci_ptr, "original-text", original_buffer_ptr);
	if original_buffer_ptr = null () then		/* ssu_$get_temp_segment has already printed the message */
	     go to RETURN_FROM_TEXT_MGR_WITH_FATAL_ERROR;

	call ssu_$get_temp_segment (sdm_invocation.sci_ptr, "fdoc-text", fdoc_buffer_ptr);
	if fdoc_buffer_ptr = null () then go to RETURN_FROM_TEXT_MGR_WITH_FATAL_ERROR;

	local_mbsp.version = MESSAGE_BODY_SECTION_PARAMETER_VERSION_2;
	local_mbsp.section.section_type = MESSAGE_PREFORMATTED_BODY_SECTION;
	message_body_section_ptr = addr (local_mbsp.section);

	/*** Setup format_document_ options */
	local_fdo.version_number = format_document_version_2;
	if original_text_control.flags.indent_original_text then
	     local_fdo.indentation = original_text_control.original_text_indentation;
	else local_fdo.indentation = 0;
	local_fdo.line_length = sdm_invocation.fill_width;
	string (local_fdo.switches) = ""b;
	local_fdo.galley_sw = "1"b;			/* ... don't insert page breaks */
	local_fdo.literal_sw = "1"b;			/* ... don't recognize controls in the text */
	local_fdo.dont_break_indented_lines_sw = "1"b;	/* ... don't break lines which are indented */
	local_fdo.syllable_size = 0;


/* Original message processing loop ... */

	do message_idx = original_messages.n_original_messages to 1 by -1;

	     message_ptr = original_messages.messages (message_idx).message_ptr;


/* ... Process the body of the original message first */

	     original_text_lth = 0;			/* nothing in the buffer yet */
	     call mlsys_utils_$format_message_body (message_ptr, -1, original_buffer_ptr, length (original_buffer),
		original_text_lth, code);
	     if code = error_table_$smallarg then code = mlsys_et_$message_too_large;
	     if code ^= 0 then
		call abort_text_mgr (sdm_invocation.sci_ptr, code,
		     "Attempting to include the message body from message #^d.",
		     original_messages.messages (message_idx).message_idx);

	     if original_text_control.flags.indent_original_text | original_text_control.flags.fill_original_text
	     then do;
		local_fdo.dont_fill_sw = ^original_text_control.flags.fill_original_text;
		call format_document_$string (original_text, fdoc_buffer, fdoc_text_lth, addr (local_fdo), code);
		if code = error_table_$recoverable_error then code = 0;
		if code ^= 0 then
		     call abort_text_mgr (sdm_invocation.sci_ptr, mlsys_et_$message_too_large,
			"Attempting to include the message body from message #^d.",
			original_messages.messages (message_idx).message_idx);
		message_preformatted_body_section.text_ptr = fdoc_buffer_ptr;
		message_preformatted_body_section.text_lth = fdoc_text_lth;
	     end;
	     else do;				/* text is already properly formatted */
		message_preformatted_body_section.text_ptr = original_buffer_ptr;
		message_preformatted_body_section.text_lth = original_text_lth;
	     end;

	     call mail_system_$add_body_section (sdm_invocation.message_ptr, addr (local_mbsp), (1), code);
	     if code ^= 0 then
		call abort_text_mgr (sdm_invocation.sci_ptr, code,
		     "Attempting to include the message body from message #^d.",
		     original_messages.messages (message_idx).message_idx);


/* ... Now add the Date, From, and Subject fields and any redistributions with comments */

	     original_text_lth = 0;			/* nothing in the buffer again */

	     call mlsys_utils_$format_date_time_field (DATE_TIME_CREATED_FIELDNAME, message.date_time_created, "0"b,
		(local_fdo.line_length - local_fdo.indentation), original_buffer_ptr, length (original_buffer),
		original_text_lth, code);
	     if code = error_table_$smallarg then code = mlsys_et_$message_too_large;
	     if code ^= 0 then
		call abort_text_mgr (sdm_invocation.sci_ptr, code,
		     "Attempting to include the message header from message #^d.",
		     original_messages.messages (message_idx).message_idx);
	     call add_newline ();			/* formatting entrypoints leave off the trailing newline */

	     call mlsys_utils_$format_address_list_field (FROM_FIELDNAME, message.from,
		(local_fdo.line_length - local_fdo.indentation), original_buffer_ptr, length (original_buffer),
		original_text_lth, code);
	     if code = error_table_$smallarg then code = mlsys_et_$message_too_large;
	     if code ^= 0 then
		call abort_text_mgr (sdm_invocation.sci_ptr, code,
		     "Attempting to include the message header from message #^d.",
		     original_messages.messages (message_idx).message_idx);
	     call add_newline ();			/* formatting entrypoints leave off the trailing newline */

	     if message.subject.text_lth ^= 0 then do;
		call mlsys_utils_$format_text_field (SUBJECT_FIELDNAME, message_subject, "0"b,
		     (local_fdo.line_length - local_fdo.indentation), original_buffer_ptr, length (original_buffer),
		     original_text_lth, code);
		if code = error_table_$smallarg then code = mlsys_et_$message_too_large;
		if code ^= 0 then
		     call abort_text_mgr (sdm_invocation.sci_ptr, code,
			"Attempting to include the message header from message #^d.",
			original_messages.messages (message_idx).message_idx);
		call add_newline ();		/* formatting entrypoints leave off the trailing newline */
	     end;

	     if message.n_redistributions > 0 then do;
		call mlsys_utils_$format_redistributions_list (message_ptr, BRIEF_FORMATTING_MODE,
		     (local_fdo.line_length - local_fdo.indentation), original_buffer_ptr, length (original_buffer),
		     original_text_lth, code);
		if code = error_table_$smallarg then code = mlsys_et_$message_too_large;
		if code ^= 0 then
		     call abort_text_mgr (sdm_invocation.sci_ptr, code,
			"Attempting to include the message header from message #^d.",
			original_messages.messages (message_idx).message_idx);
	     end;

	     if original_text_control.flags.indent_original_text then do;
		local_fdo.dont_fill_sw = "1"b;	/* ... never reformat the header fields: just indent them */
		call format_document_$string (original_text, fdoc_buffer, fdoc_text_lth, addr (local_fdo), code);
		if code = error_table_$recoverable_error then code = 0;
		if code ^= 0 then
		     call abort_text_mgr (sdm_invocation.sci_ptr, mlsys_et_$message_too_large,
			"Attempting to include the message header from message #^d.",
			original_messages.messages (message_idx).message_idx);
		message_preformatted_body_section.text_ptr = fdoc_buffer_ptr;
		message_preformatted_body_section.text_lth = fdoc_text_lth;
	     end;
	     else do;				/* header is already properly formatted */
		message_preformatted_body_section.text_ptr = original_buffer_ptr;
		message_preformatted_body_section.text_lth = original_text_lth;
	     end;

	     call mail_system_$add_body_section (sdm_invocation.message_ptr, addr (local_mbsp), (1), code);
	     if code ^= 0 then
		call abort_text_mgr (sdm_invocation.sci_ptr, code,
		     "Attempting to include the message header from message #^d.",
		     original_messages.messages (message_idx).message_idx);

	     sdm_invocation.date_time_body_modified = clock ();
						/* for psuedo Date/Message-ID fields */
	end;

	if sdm_invocation.message_state = PROCESSED_MESSAGE then sdm_invocation.message_state = MODIFIED_MESSAGE;

	call release_text_mgr_buffers ();

	P_fatal_error = "0"b;

	return;



/* Adds a newline to the buffer to separate the Date, From, and Subject fields of the original message */

add_newline:
     procedure ();

	if (original_text_lth + length (NL)) > length (original_buffer) then
	     call abort_text_mgr (sdm_invocation.sci_ptr, mlsys_et_$message_too_large,
		"Attempting to include the message header from message #^d.",
		original_messages.messages (message_idx).message_idx);

	begin;

dcl  newline_piece character (length (NL)) unaligned defined (original_buffer) position (original_text_lth + 1);

	     newline_piece = NL;
	end;

	original_text_lth = original_text_lth + length (NL);

	return;

     end add_newline;
%page;
/* format: off */
/* Reads the text of the message from the terminal: the possible terminators for the text are:
	'.'	end of input
	'\fq'	end of input, enter request loop, and
	'\f...'	end of input, enter editor with given requests (if any) */
/* format: on */

terminal_input:
     entry (P_sdm_invocation_ptr, P_input_terminator_type, P_edit_requests_ptr, P_edit_requests_lth, P_fatal_error);

	sdm_invocation_ptr = P_sdm_invocation_ptr;

	input_file_ptr,				/* for cleanup handler */
	     original_buffer_ptr, fdoc_buffer_ptr = null ();

	on condition (cleanup) call release_text_mgr_buffers ();

	call ssu_$get_temp_segment (sdm_invocation.sci_ptr, "original-text", original_buffer_ptr);
	if original_buffer_ptr = null () then		/* ssu_$get_temp_segment has already printed the message */
	     go to RETURN_FROM_TEXT_MGR_WITH_FATAL_ERROR;

	original_text_lth = 0;			/* nothing read yet */
	edit_requests_lth = 0;			/* no editor requests yet */

	on condition (program_interrupt)
	     begin;				/* stop reading if the user asks us ... */
		terminator_type = ENTER_REQUEST_LOOP;
		go to END_OF_INPUT;
	     end;

	call ioa_ ("Message:");


/* Message reading loop ... */

	terminator_type = 0;			/* really need do until ... */
	input_line_lth = 0;

	do while (terminator_type = 0);
	     original_text_lth = original_text_lth + input_line_lth;

	     begin;

dcl  rest_of_original_buffer character (length (original_buffer) - original_text_lth) unaligned
	defined (original_buffer) position (original_text_lth + 1);

		call iox_$get_line (iox_$user_input, addr (rest_of_original_buffer), length (rest_of_original_buffer),
		     input_line_lth, code);
		if code ^= 0 then			/* ... all errors fatal when an entire segment available */
		     call abort_text_mgr (sdm_invocation.sci_ptr, code, "Reading the message text.");


/* ... Search for terminators */

		begin;

dcl  input_line character (input_line_lth) unaligned defined (original_buffer) position (original_text_lth + 1);

		     if input_line_lth = 2 then
			if substr (input_line, 1, 1) = "." then
			     terminator_type = NORMAL_TERMINATION;
			else ;

		     else do;			/* look for escape (\) sequences */
			idx = index (input_line, "\");
			do while (idx ^= 0);	/* ... while there are \'s in line */
			     original_text_lth = original_text_lth + idx - 1;
						/* ... include everything before the \ in the text */
			     input_line_lth = input_line_lth - idx + 1;
			     begin;
dcl  input_line character (input_line_lth) unaligned defined (original_buffer) position (original_text_lth + 1);
				if input_line_lth >= 2 then do;
						/* ... stuff after \ on line */
				     the_character = substr (input_line, 2, 1);
				     if the_character = "f" then do;
					/*** \f...: terminates input and maybe enters the editor */
					if input_line_lth >= 3 then
					     if substr (input_line, 3, 1) = "q" then do;
						/* ... special case \fq to go straight to request loop */
						last_character_of_sequence = 3;
						go to PROCESS_ENTER_REQUEST_LOOP_ESCAPE;
					     end;
					terminator_type = ENTER_EDITOR;
					if input_line_lth >= 4 then do;
						/* ... if anything after \f and before NL */
					     edit_requests_lth = input_line_lth - 3;
					     allocate edit_requests in (sdm_area) set (edit_requests_ptr);
					     edit_requests = substr (input_line, 3, edit_requests_lth);
					end;
				     end;
				     else if the_character = "q" then do;
					/*** \q or \fq: enter request loop */
					last_character_of_sequence = 2;
PROCESS_ENTER_REQUEST_LOOP_ESCAPE:
					terminator_type = ENTER_REQUEST_LOOP;
					if input_line_lth >= (last_character_of_sequence + 2) then
					     call ssu_$print_message (sdm_invocation.sci_ptr, code,
						"Text after ""^a"" ignored.",
						substr (input_line, 1, last_character_of_sequence));
				     end;
				     else if the_character = "c" then do;
					/*** \c: escape the next character */
					substr (input_line, 1, input_line_lth - 2) = substr (input_line, 3);
					original_text_lth = original_text_lth + 1;
					input_line_lth = input_line_lth - 3;
				     end;
				     else do;
					/*** unknown: take it literally */
					original_text_lth = original_text_lth + 1;
					input_line_lth = input_line_lth - 1;
				     end;
				end;
			     end;
			     begin;
dcl  input_line character (input_line_lth) unaligned defined (original_buffer) position (original_text_lth + 1);
				if terminator_type = 0 then
				     idx = index (input_line, "\");
				else idx = 0;
			     end;
			end;
		     end;
		end;
	     end;
	end;


/* We have the message now */

END_OF_INPUT:
	local_mbsp.version = MESSAGE_BODY_SECTION_PARAMETER_VERSION_2;
	local_mbsp.section.section_type = MESSAGE_PREFORMATTED_BODY_SECTION;
	message_body_section_ptr = addr (local_mbsp.section);
	message_preformatted_body_section.text_ptr = original_buffer_ptr;
	message_preformatted_body_section.text_lth = original_text_lth;

	call mail_system_$add_body_section (sdm_invocation.message_ptr, addr (local_mbsp), (-1), code);
	if code ^= 0 then
	     call abort_text_mgr (sdm_invocation.sci_ptr, code,
		"Attempting to place the message text into the message.");

	sdm_invocation.date_time_body_modified = clock ();/* for psuedo Date/Message-ID fields */

	if sdm_invocation.message_state = PROCESSED_MESSAGE then sdm_invocation.message_state = MODIFIED_MESSAGE;

	call release_text_mgr_buffers ();

	P_input_terminator_type = terminator_type;	/* tell the caller what to do next */

	if edit_requests_lth ^= 0 then		/* there are some editing requests */
	     P_edit_requests_ptr = edit_requests_ptr;
	else P_edit_requests_ptr = null ();
	P_edit_requests_lth = edit_requests_lth;

	P_fatal_error = "0"b;			/* success */

	return;
%page;
/* Reads the text of the message from the specified segment */

file_input:
     entry (P_sdm_invocation_ptr, P_input_file_dirname, P_input_file_ename, P_fatal_error);

	sdm_invocation_ptr = P_sdm_invocation_ptr;

	input_file_ptr,				/* for cleanup handler */
	     original_buffer_ptr, fdoc_buffer_ptr = null ();

	on condition (cleanup) call release_text_mgr_buffers ();

	call initiate_file_ (P_input_file_dirname, P_input_file_ename, R_ACCESS, input_file_ptr, input_file_bc, code);
	if code ^= 0 then
	     call abort_text_mgr (sdm_invocation.sci_ptr, code, "^a",
		pathname_ (P_input_file_dirname, P_input_file_ename));

	local_mbsp.version = MESSAGE_BODY_SECTION_PARAMETER_VERSION_2;
	local_mbsp.section.section_type = MESSAGE_PREFORMATTED_BODY_SECTION;
	message_body_section_ptr = addr (local_mbsp.section);
	message_preformatted_body_section.text_ptr = input_file_ptr;
	message_preformatted_body_section.text_lth = divide ((input_file_bc + 8), 9, 21, 0);

	call mail_system_$add_body_section (sdm_invocation.message_ptr, addr (local_mbsp), (-1), code);
	if code ^= 0 then
	     call abort_text_mgr (sdm_invocation.sci_ptr, code,
		"Attempting to place the input file (^a) into the messsage.",
		pathname_ (P_input_file_dirname, P_input_file_ename));

	sdm_invocation.date_time_body_modified = clock ();/* for psuedo Date/Message-ID fields */

	if sdm_invocation.message_state = PROCESSED_MESSAGE then sdm_invocation.message_state = MODIFIED_MESSAGE;

	call release_text_mgr_buffers ();

	P_fatal_error = "0"b;			/* success */

	return;
%page;
/* Reformats the message body text using format_document_ with fill-on and align-left modes */

fill_text:
     entry (P_sdm_invocation_ptr, P_fill_width, P_fatal_error);

	sdm_invocation_ptr = P_sdm_invocation_ptr;

	input_file_ptr,				/* for cleanup handler */
	     original_buffer_ptr, fdoc_buffer_ptr = null ();

	on condition (cleanup) call release_text_mgr_buffers ();

	call ssu_$get_temp_segment (sdm_invocation.sci_ptr, "original-text", original_buffer_ptr);
	if original_buffer_ptr = null () then		/* ssu_$get_temp_segment has already printed the message */
	     go to RETURN_FROM_TEXT_MGR_WITH_FATAL_ERROR;

	call ssu_$get_temp_segment (sdm_invocation.sci_ptr, "fdoc-text", fdoc_buffer_ptr);
	if fdoc_buffer_ptr = null () then go to RETURN_FROM_TEXT_MGR_WITH_FATAL_ERROR;

	original_text_lth = 0;			/* nothing in the buffer yet */
	call mlsys_utils_$format_message_body (sdm_invocation.message_ptr, -1, original_buffer_ptr,
	     length (original_buffer), original_text_lth, code);
	if code = error_table_$smallarg then code = mlsys_et_$message_too_large;
	if code ^= 0 then
	     call abort_text_mgr (sdm_invocation.sci_ptr, code,
		"Attempting to obtain the present message text for reformatting.");

	/*** Setup format_document_ options */
	local_fdo.version_number = format_document_version_2;
	local_fdo.indentation = 0;
	local_fdo.line_length = P_fill_width;		/* ... let caller control the width */
	string (local_fdo.switches) = ""b;
	local_fdo.galley_sw = "1"b;			/* ... don't insert page breaks */
	local_fdo.literal_sw = "1"b;			/* ... don't recognize controls in the text */
	local_fdo.dont_break_indented_lines_sw = "1"b;	/* ... don't break lines which are indented */
	local_fdo.syllable_size = 0;

	call format_document_$string (original_text, fdoc_buffer, fdoc_text_lth, addr (local_fdo), code);
	if code = error_table_$recoverable_error then code = 0;
	if code ^= 0 then
	     call abort_text_mgr (sdm_invocation.sci_ptr, code, "Attempting to reformat the message text.");

	local_mbsp.version = MESSAGE_BODY_SECTION_PARAMETER_VERSION_2;
	local_mbsp.section.section_type = MESSAGE_PREFORMATTED_BODY_SECTION;
	message_body_section_ptr = addr (local_mbsp.section);
	message_preformatted_body_section.text_ptr = fdoc_buffer_ptr;
	message_preformatted_body_section.text_lth = fdoc_text_lth;

	call mail_system_$replace_body (sdm_invocation.message_ptr, addr (local_mbsp), code);
	if code ^= 0 then
	     call abort_text_mgr (sdm_invocation.sci_ptr, code,
		"Attempting to place the reformatted message text into the message.");

	sdm_invocation.date_time_body_modified = clock ();/* for psuedo Date/Message-ID fields */

	if sdm_invocation.message_state = PROCESSED_MESSAGE then sdm_invocation.message_state = MODIFIED_MESSAGE;

	call release_text_mgr_buffers ();

	P_fatal_error = "0"b;			/* success */

	return;
%page;
/* Releases the buffers used by text manager operations */

release_text_mgr_buffers:
     procedure ();

	if fdoc_buffer_ptr ^= null () then call ssu_$release_temp_segment (sdm_invocation.sci_ptr, fdoc_buffer_ptr);

	if original_buffer_ptr ^= null () then
	     call ssu_$release_temp_segment (sdm_invocation.sci_ptr, original_buffer_ptr);

	if input_file_ptr ^= null () then call terminate_file_ (input_file_ptr, 0, TERM_FILE_TERM, (0));

	return;

     end release_text_mgr_buffers;



/* Prints an error message and aborts execution of the current text manager operation */

abort_text_mgr:
     procedure () options (variable);

	call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr ());

	if sdm_invocation.debug_mode then do;		/* simulate the actions of ssu_$abort_line */
	     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; calling cu_$cl.");
	     call cu_$cl (""b);
	end;

	go to RETURN_FROM_TEXT_MGR_WITH_FATAL_ERROR;

     end abort_text_mgr;

RETURN_FROM_TEXT_MGR_WITH_FATAL_ERROR:
	call release_text_mgr_buffers ();

	P_fatal_error = "1"b;			/* informs caller that we've already printed the message */

	return;
%page;
%include sdm_invocation;
%page;
%include sdm_original_messages;
%page;
%include send_mail_options;
%page;
%include sdm_text_mgr_constants;
%page;
%include mlsys_message;
%page;
%include mlsys_field_names;
%page;
%include mlsys_format_options;
%page;
%include format_document_options;
%page;
%include access_mode_values;
%page;
%include terminate_file;

     end sdm_text_mgr_;
