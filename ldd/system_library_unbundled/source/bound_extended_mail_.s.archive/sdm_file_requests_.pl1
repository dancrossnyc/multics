/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: off */

/* The send_mail write, append, and preface requests */

/* Created:  12 January 1979 by G. Palter */
/* Modified: 15 January 1979 by G. Palter to not cause faults when there is no header */
/* Modified: 16 March 1979 by G. Palter to not write the message if there is some text in it */
/* Modified: 2 June 1980 by G. Palter to fix bug #0304 -- the "write", "append", and "preface" requests should validate
      the name of the segment.  For example, they should reject the name "x." */
/* Modified: September 1983 by G. Palter as part of the conversion to the new mail system interface */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


sdm_file_requests_:
     procedure (P_sci_ptr, P_sdm_invocation_ptr);

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_sdm_invocation_ptr pointer parameter;


/* Local copies of parameters */

dcl  sci_ptr pointer;


/* Remaining declarations */

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  message_buffer character (4 * sys_info$max_seg_size) unaligned based (message_buffer_ptr);
dcl  message_text character (message_text_lth) unaligned based (message_buffer_ptr);
dcl  message_buffer_ptr pointer;
dcl  message_text_lth fixed binary (21);

dcl  1 local_fmo aligned like format_message_options;

dcl  file_dirname character (168);
dcl  file_ename character (32);
dcl  file_ptr pointer;
dcl  file_uid bit (36) aligned;

dcl  file_creation_mode fixed binary;
dcl  file_insertion_mode fixed binary;

dcl  have_filename bit (1) aligned;

dcl  code fixed binary (35);

dcl  sys_info$max_seg_size fixed binary (19) external;

/* format: off */
dcl (error_table_$action_not_performed, error_table_$badopt, error_table_$noarg, error_table_$nostars,
     error_table_$too_many_args,mlsys_et_$empty_message, mlsys_et_$message_too_large)
	fixed binary (35) external;
/* format: on */

dcl  check_star_name_$entry entry (character (*), fixed binary (35));
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  emf_writing_util_$close entry (pointer, bit (36) aligned, fixed binary (35));
dcl  emf_writing_util_$open
	entry (pointer, character (*), character (*), fixed binary, pointer, bit (36) aligned, fixed binary (35));
dcl  emf_writing_util_$write entry (pointer, bit (36) aligned, character (*), fixed binary, fixed binary (35));
dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  ioa_$general_rs
	entry (pointer, fixed binary, fixed binary, character (*), fixed binary (21), bit (1) aligned, bit (1) aligned);
dcl  mlsys_utils_$format_address_field
	entry (character (*) varying, pointer, fixed binary, pointer, fixed binary (21), fixed binary (21),
	fixed binary (35));
dcl  mlsys_utils_$format_address_list_field
	entry (character (*) varying, pointer, fixed binary, pointer, fixed binary (21), fixed binary (21),
	fixed binary (35));
dcl  mlsys_utils_$format_date_time_field
	entry (character (*) varying, fixed binary (71), bit (1) aligned, fixed binary, pointer, fixed binary (21),
	fixed binary (21), fixed binary (35));
dcl  mlsys_utils_$format_message
	entry (pointer, pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_request_name entry (pointer) returns (character (32));
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);
dcl  ssu_$release_temp_segment entry (pointer, pointer);

dcl  cleanup condition;

dcl  (addr, index, length, max, min, null, substr) builtin;
%page;
/* The "write" request: adds the printed representation of the message to the end of the specified file which is created
   if necessary without asking the user's permission */

write_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ();
	if n_arguments = 0 then call ssu_$abort_line (sci_ptr, 0, "Usage:  write path {-control_args}");

	on condition (cleanup) call cleanup_request ();

	have_filename = "0"b;

	file_creation_mode = SILENTLY_CREATE_FILE;
	file_insertion_mode = APPEND_FILE;		/* default is "-extend" */

	do argument_idx = 1 to n_arguments;
	     call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);

	     if index (argument, "-") = 1 then		/* a control argument ... */
		if (argument = "-truncate") | (argument = "-tc") then file_insertion_mode = TRUNCATE_FILE;
		else if argument = "-extend" then file_insertion_mode = APPEND_FILE;

		else call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a""", argument);

	     else if have_filename then
		call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "Only one pathname may be specified.");

	     else do;
		have_filename = "1"b;
		call expand_pathname_$add_suffix (argument, "mail", file_dirname, file_ename, code);
		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", argument);
		call check_star_name_$entry (file_ename, code);
		if (code ^= 0) then			/* validate syntax of the entryname ... */
		     if (code = 1) | (code = 2) then	/* ... and reject starnames */
			call ssu_$abort_line (sci_ptr, error_table_$nostars, "^a",
			     pathname_ (file_dirname, file_ename));
		     else call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (file_dirname, file_ename));
	     end;
	end;

	if ^have_filename then call ssu_$abort_line (sci_ptr, error_table_$noarg, "Pathname of output file.");

	call process_message ();			/* do it */

	call cleanup_request ();

	return;
%page;
/* The "append" request: adds the printed representation of the message to the end of the specified file.  The user is
   asked for permission to create the file if it doesn't exist */

append_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ();

	file_insertion_mode = APPEND_FILE;		/* ... at the end */

	go to APPEND_PREFACE_COMMON;


/* The "preface" request: adds the printed representation of the message to the beginning of the specified file.  The user
   is asked for permission to create the file if it doesn't exist */

preface_request:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	call setup_request ();

	file_insertion_mode = PREFACE_FILE;		/* ... at the beginning */


/* Process the append/preface request */

APPEND_PREFACE_COMMON:
	file_creation_mode = QUERY_TO_CREATE_FILE;

	if n_arguments ^= 1 then			/* print an appropriate error message */
	     if n_arguments = 0 then
		call ssu_$abort_line (sci_ptr, 0, "Usage:  ^a path", ssu_$get_request_name (sci_ptr));
	     else call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "Only one pathname may be specified.");

	call ssu_$arg_ptr (sci_ptr, 1, argument_ptr, argument_lth);

	if index (argument, "-") = 1 then call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a""", argument);

	call expand_pathname_$add_suffix (argument, "mail", file_dirname, file_ename, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", argument);

	call check_star_name_$entry (file_ename, code);
	if (code ^= 0) then				/* validate syntax of the entryname ... */
	     if (code = 1) | (code = 2) then		/* ... and reject starnames */
		call ssu_$abort_line (sci_ptr, error_table_$nostars, "^a", pathname_ (file_dirname, file_ename));
	     else call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (file_dirname, file_ename));

	call process_message ();			/* do it */

	call cleanup_request ();

	return;
%page;
/* Performs initialization common to all requests */

setup_request:
     procedure ();

	sci_ptr = P_sci_ptr;
	call ssu_$arg_count (sci_ptr, n_arguments);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	message_ptr = sdm_invocation.message_ptr;

	file_ptr, message_buffer_ptr = null ();		/* for cleanup handler */

	return;

     end setup_request;



/* Closes the file opened by this request and releases the message buffer */

cleanup_request:
     procedure ();

	if message_buffer_ptr ^= null () then call ssu_$release_temp_segment (sci_ptr, message_buffer_ptr);

	if file_ptr ^= null () then call emf_writing_util_$close (file_ptr, file_uid, (0));

	return;

     end cleanup_request;
%page;
/* Actually performs most of the work of the above requests */

process_message:
     procedure ();

	if is_empty_message () then			/* no sense in writing something without text */
	     call ssu_$abort_line (sci_ptr, mlsys_et_$empty_message);


/* Open the file for writing */

	call emf_writing_util_$open (sci_ptr, file_dirname, file_ename, file_creation_mode, file_ptr, file_uid, code);
	if code ^= 0 then				/* couldn't open thje file ... */
	     if code = error_table_$action_not_performed then
		call ssu_$abort_line (sci_ptr, 0);	/* ... and user answered "no" to the query to create it */
	     else call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (file_dirname, file_ename));


/* Create the printed representation of the message using the default formatting mode */

	local_fmo.version = FORMAT_MESSAGE_OPTIONS_VERSION_1;
	local_fmo.line_length = min (max (sdm_invocation.fill_width, 31), 72);
	local_fmo.envelope_formatting_mode, local_fmo.header_formatting_mode,
	     local_fmo.redistributions_list_formatting_mode = DEFAULT_FORMATTING_MODE;
	local_fmo.include_body = "1"b;

	call ssu_$get_temp_segment (sdm_invocation.sci_ptr, "message_text", message_buffer_ptr);
	message_text_lth = 0;			/* nothing in the buffer yet */

	call add_to_buffer (" #1^[ (^d line^[s^] in body)^]:", (message.body.total_lines ^= -1),
	     message.body.total_lines, (message.body.total_lines ^= 1));

	if sdm_invocation.acknowledge then do;		/* acknowledgements always come to us (for now) */
	     call mlsys_utils_$format_address_field (ACKNOWLEDGE_TO_FIELDNAME,
		sdm_data_$default_from_field -> address_list.addresses (1), local_fmo.line_length, message_buffer_ptr,
		length (message_buffer), message_text_lth, code);
	     if code ^= 0 then
		call ssu_$abort_line (sci_ptr, mlsys_et_$message_too_large,
		     "Preparing the message to be written to ^a.", pathname_ (file_dirname, file_ename));
	     call add_to_buffer ("");
	end;

	call mlsys_utils_$format_date_time_field (DATE_TIME_CREATED_FIELDNAME, sdm_invocation.date_time_body_modified,
	     "1"b, local_fmo.line_length, message_buffer_ptr, length (message_buffer), message_text_lth, code);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, mlsys_et_$message_too_large, "Preparing the message to be written to ^a.",
		pathname_ (file_dirname, file_ename));
	call add_to_buffer ("");

	if is_empty_list (message.from) then do;	/* no From field present: display the default */
	     call mlsys_utils_$format_address_list_field (FROM_FIELDNAME, sdm_data_$default_from_field,
		local_fmo.line_length, message_buffer_ptr, length (message_buffer), message_text_lth, code);
	     if code ^= 0 then
		call ssu_$abort_line (sci_ptr, mlsys_et_$message_too_large,
		     "Preparing the message to be written to ^a.", pathname_ (file_dirname, file_ename));
	     call add_to_buffer ("");
	end;

	call mlsys_utils_$format_message (message_ptr, addr (local_fmo), message_buffer_ptr, length (message_buffer),
	     message_text_lth, code);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, mlsys_et_$message_too_large, "Preparing the message to be written to ^a.",
		pathname_ (file_dirname, file_ename));

	call add_to_buffer (" ---(1)---^2/^|");


/* Write the message into the file */

	call emf_writing_util_$write (file_ptr, file_uid, message_text, file_insertion_mode, code);

	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (file_dirname, file_ename));

	sdm_invocation.message_state = PROCESSED_MESSAGE; /* OK to quit without query now */

	return;


/* Internal to process_message: formats the given text and adds it to the message buffer */

add_to_buffer:
	procedure () options (variable);

dcl  internal_buffer character (256);			/* always called with relatively short messages */
dcl  internal_buffer_used fixed binary (21);

	     call ioa_$general_rs (cu_$arg_list_ptr (), 1, 2, internal_buffer, internal_buffer_used, "0"b, "1"b);

	     begin;
dcl  rest_of_message_buffer character (length (message_buffer) - message_text_lth) unaligned
	defined (message_buffer) position (message_text_lth + 1);

		if internal_buffer_used > length (rest_of_message_buffer) then
		     call ssu_$abort_line (sci_ptr, mlsys_et_$message_too_large,
			"Preparing the message to be written to ^a.", pathname_ (file_dirname, file_ename));

		substr (rest_of_message_buffer, 1, internal_buffer_used) =
		     substr (internal_buffer, 1, internal_buffer_used);
	     end;

	     message_text_lth = message_text_lth + internal_buffer_used;

	     return;

	end add_to_buffer;

     end process_message;
%page;
/* Determines if the given address list is empty */

is_empty_list:
     procedure (p_address_list_ptr) returns (bit (1) aligned);

dcl  p_address_list_ptr pointer parameter;

	if p_address_list_ptr = null () then		/* if there's no data at all, it's empty */
	     return ("1"b);

	else return ((p_address_list_ptr -> address_list.n_addresses = 0));

     end is_empty_list;



/* Determines if the message is empty */

is_empty_message:
     procedure () returns (bit (1) aligned);

dcl  idx fixed binary;

	do idx = 1 to message.n_body_sections;
	     message_body_section_ptr = addr (message.body_sections (idx));
	     if message_body_section.section_type = MESSAGE_PREFORMATTED_BODY_SECTION then
		if message_preformatted_body_section.text_lth > 0 then
		     return ("0"b);			/* any non-zero length section => the message isn't empty */
		else ;
	     else /*** if message_body_section.section_type = MESSAGE_BIT_STRING_BODY_SECTION then */
		if message_bit_string_body_section.bit_string_lth > 0 then return ("0"b);
	end;					/* any non-zero length section => the message isn't empty */

	/*** Control arrives here iff all sections in the body are empty */
	return ("1"b);

     end is_empty_message;
%page;
%include sdm_invocation;
%page;
%include sdm_data;
%page;
%include send_mail_options;
%page;
%include emf_writing_modes;
%page;
%include mlsys_format_options;
%page;
%include mlsys_message;
%page;
%include mlsys_address_list;
%page;
%include mlsys_field_names;

     end sdm_file_requests_;
