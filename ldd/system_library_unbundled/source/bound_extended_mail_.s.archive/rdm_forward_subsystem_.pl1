/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* rdm_forward_subsystem_: a mini-subsystem created by read_mail to permit
   entering and editing a forwarding comment (forward -add_comments).
*/

/* Written: 4 Oct 1983 by B. Margolin 
   Modified: 8 Aug 1984 by P. Benjamin to change ssu_$standard_requests to
       ssu_request_tables_$standard_requests.
*/

/* format: style2,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,idind22 */

rdm_forward_subsystem_:
     proc (P_rdm_invocation_ptr, P_rfso_ptr, P_buffer_ptr, P_buffer_size, P_buffer_used, P_code);

	/*** Parameters ***/

	dcl     (P_rdm_invocation_ptr, P_rfso_ptr, P_buffer_ptr)
				ptr parameter;
	dcl     (P_buffer_size, P_buffer_used)
				fixed bin (21) parameter;
	dcl     P_code		fixed bin (35) parameter;

	/*** Automatic ***/

	dcl     action		bit (35) aligned;
	dcl     buffer_ptr		ptr;
	dcl     buffer_size		fixed bin (21);
	dcl     code		fixed bin (35);
	dcl     default_prompt	char (64) varying;
	dcl     edit_requests_len	fixed bin (21);
	dcl     edit_requests_ptr	ptr;
	dcl     fatal_error		bit (1) aligned;
	dcl     initial_rql_len	fixed bin (21);
	dcl     input_terminator_type fixed bin;
	dcl     level		fixed bin;
	dcl     1 rfi		aligned like rdm_forward_invocation;
	dcl     rfso_ptr		ptr;
	dcl     sci_ptr		ptr;

	/*** Based ***/

	dcl     buffer		char (buffer_size) based (buffer_ptr);
	dcl     edit_requests	char (edit_requests_len) based (edit_requests_ptr);
	dcl     1 rfso		aligned like rdm_forward_subsystem_options based (rfso_ptr);
	dcl     user_initial_requests char (rfso.initial_requests_lth) based (rfso.initial_requests_ptr);

	/*** Entries ***/

	dcl     cu_$cl		entry (bit (36) aligned);
	dcl     (
	        ioa_$ioa_switch,
	        ioa_$rsnnl
	        )			entry () options (variable);
	dcl     pathname_		entry (char (*), char (*)) returns (char (168));
	dcl     rdm_fwd_text_mgr_$file_input
				entry (ptr, ptr, fixed bin (21), bit (1) aligned);
	dcl     rdm_fwd_text_mgr_$terminal_input
				entry (ptr, fixed bin, ptr, fixed bin (21), bit (1) aligned);
	dcl     requote_string_	entry (char (*)) returns (char (*));
	dcl     ssu_$add_request_table
				entry (ptr, ptr, fixed bin, fixed bin (35));
	dcl     ssu_$create_invocation
				entry (char (*), char (*), ptr, ptr, char (*), ptr, fixed bin (35));
	dcl     ssu_$destroy_invocation
				entry (ptr);
	dcl     ssu_$execute_line	entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     ssu_$get_invocation_count
				entry (ptr, fixed bin, fixed bin);
	dcl     ssu_$get_request_name entry (ptr) returns (char (32));
	dcl     ssu_$get_subsystem_name
				entry (ptr) returns (char (32));
	dcl     ssu_$get_temp_segment entry (ptr, char (*), ptr);
	dcl     ssu_$listen		entry (ptr, ptr, fixed bin (35));
	dcl     ssu_$print_message	entry () options (variable);
	dcl     ssu_$release_temp_segment
				entry (ptr, ptr);
	dcl     ssu_$set_abbrev_info	entry (ptr, ptr, ptr, bit (1) aligned);
	dcl     ssu_$set_ec_search_list
				entry (ptr, char (32));
	dcl     ssu_$set_ec_suffix	entry (ptr, char (32));
	dcl     ssu_$set_debug_mode	entry (ptr, bit (1) aligned);
	dcl     ssu_$set_prompt	entry (ptr, char (64) var);
	dcl     ssu_$set_prompt_mode	entry (ptr, bit (*));
	dcl     sub_err_		entry () options (variable);

	/*** Static ***/

	dcl     (
	        emf_et_$forwarding_aborted,
	        error_table_$unimplemented_version,
	        ssu_et_$subsystem_aborted
	        )			fixed bin (35) ext static;
	dcl     iox_$error_output	ptr;
	dcl     (
	        rdm_request_tables_$forward_requests,
	        ssu_request_tables_$standard_requests
	        )			ext static;	/* Data type insignificant */
	dcl     WHOAMI		char (17) int static options (constant) init ("read_mail.forward");

	/*** Miscellany ***/

	dcl     (addwordno, length, min, null, substr)
				builtin;
	dcl     cleanup		condition;
%page;
%include rdm_data;
%page;
%include rdm_fwd_invocation;
%page;
%include rdm_fwd_subsystem_opts;
%page;
%include rdm_fwd_text_mgr_const;
%page;
%include rdm_invocation;
%page;
%include ssu_prompt_modes;
%page;
%include sub_err_flags;
%page;
	rdm_invocation_ptr = P_rdm_invocation_ptr;
	rfso_ptr = P_rfso_ptr;
	buffer_ptr = P_buffer_ptr;
	buffer_size = P_buffer_size;
	P_buffer_used, P_code = 0;

	rfi.temp_seg_ptr, sci_ptr = null ();

	on cleanup call cleanup_rfs ();

	if rfso.version ^= RDM_FORWARD_SUBSYSTEM_OPTIONS_VERSION_1 then
	     call abort_rfs (error_table_$unimplemented_version);

	rfi.type = RDM_FORWARD_INVOCATION;
	rfi.rfso_ptr = rfso_ptr;
	rfi.rdm_invocation_ptr = rdm_invocation_ptr;
	rfi.area_ptr = rdm_invocation.area_ptr;
	rfi.debug_mode = rdm_invocation.debug_mode;

/* Check for a really trivial combination of options */

	if rfso.input_type = FILE_INPUT & rfso.enter_request_loop = NO_REQUEST_LOOP
	     & (rfso.enable_filling = DEFAULT_FILL | rfso.enable_filling = NO_FILL) then do;
						/* Just copy it and return */
	     rfi.buffer_used = rfso.input_file_lth;
	     rfi.buffer_ptr = rfso.input_file_ptr;
	     call successful_return (addr (rfi));
	end;

	call ssu_$create_invocation (WHOAMI, (rdm_data_$version), addr (rfi),
	     addr (rdm_request_tables_$forward_requests), pathname_ (rdm_data_$info_directory, "forward_requests"),
	     sci_ptr, code);
	if code ^= 0 then do;
	     if rfi.debug_mode then
		action = ACTION_CAN_RESTART;
	     else action = ACTION_DEFAULT_RESTART;
	     call sub_err_ (code, WHOAMI, action, null (), (0), "Creating forwarding subsystem invocation.");
	     call unsuccessful_return ();
	end;

	call ssu_$add_request_table (sci_ptr, addr (ssu_request_tables_$standard_requests), 2, code);
	if code ^= 0 then
	     call ssu_$print_message (sci_ptr, code,
		"Adding standard request table.  Going on without standard ssu_ requests.");
	code = 0;

	rfi.sci_ptr = sci_ptr;
	call ssu_$set_debug_mode (sci_ptr, (rfi.debug_mode));

	call ssu_$get_temp_segment (sci_ptr, "Comment Text", rfi.temp_seg_ptr);
	if rfi.temp_seg_ptr = null () then call unsuccessful_return ();
						/* Message already printed by ssu_ */

	if rfso.enable_filling = DEFAULT_FILL then
	     rfi.fill = (rfso.input_type = TERMINAL_INPUT);
	else rfi.fill = (rfso.enable_filling = FILL);
	rfi.fill_width = rfso.fill_width;

	if rfso.enter_request_loop = DEFAULT_REQUEST_LOOP then
	     rfi.enter_request_loop = (rfso.input_type = FILE_INPUT);
	else rfi.enter_request_loop = (rfso.enter_request_loop = REQUEST_LOOP);

	if rfso.enable_prompt = NO_PROMPT then call ssu_$set_prompt_mode (sci_ptr, DONT_PROMPT);
	else if rfso.enable_prompt = USE_PROMPT_STRING then call ssu_$set_prompt (sci_ptr, rfso.prompt_string);
	else if rfso.enable_prompt = DEFAULT_PROMPT then do;
	     call ssu_$get_invocation_count (rdm_invocation.sci_ptr, level, (0));
	     call ioa_$rsnnl ("^^/^a^[ (^d)^;^s^] (^a):^^2x",  /* ^^ because we are generating an ioa_ string */
		default_prompt, (0), ssu_$get_subsystem_name (rdm_invocation.sci_ptr),
	     (level ^= 1), level, ssu_$get_request_name (rdm_invocation.sci_ptr));
	     call ssu_$set_prompt (sci_ptr, default_prompt);
	end;

	rfi.auto_write = rfso.auto_write;

	call ssu_$set_abbrev_info (sci_ptr, rfso.default_profile_ptr, rfso.profile_ptr, (rfso.enable_abbrev));
	call ssu_$set_ec_search_list (sci_ptr, rdm_data_$ec_search_list);
	call ssu_$set_ec_suffix (sci_ptr, rdm_data_$ec_suffix);

/* Now start playing with the text */

	if rfso.input_type = TERMINAL_INPUT then
	     call rdm_fwd_text_mgr_$terminal_input (addr (rfi), input_terminator_type, edit_requests_ptr,
		edit_requests_len, fatal_error);
	else /*** if rfso.input_type = FILE_INPUT then ***/
	     do;
	     call rdm_fwd_text_mgr_$file_input (addr (rfi), rfso.input_file_ptr, rfso.input_file_lth, fatal_error);
	     input_terminator_type = NORMAL_TERMINATION;
	     edit_requests_len = 0;
	end;
	if fatal_error then call unsuccessful_return ();

	/*** Build the initial request line ***/

	initial_rql_len = rfso.initial_requests_lth;	/* -request */
	if edit_requests_len > 0 then			/* said \f<stuff> */
	     initial_rql_len = initial_rql_len + length ("qedx -request """"; ") + 2 * edit_requests_len;
						/* room for requoting */
	else if input_terminator_type = ENTER_EDITOR then /* said \f */
	     initial_rql_len = initial_rql_len + length ("qedx; ");

	if rfi.fill then initial_rql_len = initial_rql_len + length ("fill; ");
	initial_rql_len = initial_rql_len + length ("send");
						/* Just in case, leave room */

initial_request:
	begin;
	     dcl	   initial_rql	     char (initial_rql_len) varying;

	     if ^rfi.enter_request_loop /* No explicit -rql */ & (rfso.initial_requests_lth = 0) /* or -request */
		& (input_terminator_type = NORMAL_TERMINATION) then
						/* Just typed . */
		if rfi.fill then
		     initial_rql = "fill; send";
		else initial_rql = "send";

	     else do;
		initial_rql = "";
		if input_terminator_type = ENTER_EDITOR then
						/* \f */
		     if edit_requests_len = 0 then
			initial_rql = "qedx; ";
		     else do;
			initial_rql = "qedx -request " || requote_string_ (edit_requests);
			initial_rql = initial_rql || "; ";
		     end;
		if rfi.fill then initial_rql = initial_rql || "fill; ";
		if rfso.initial_requests_lth > 0 then initial_rql = initial_rql || user_initial_requests;
	     end;

	     if length (initial_rql) > 0 then do;
		call ssu_$execute_line (sci_ptr, addwordno (addr (initial_rql), 1), length (initial_rql), code);
		if code = ssu_et_$subsystem_aborted then go to SUBSYS_ABORTED;
	     end;

	end initial_request;

	/*** Finally, we get to the real work! ***/

	call ssu_$listen (sci_ptr, null (), code);
	if code ^= 0 then
	     if code = ssu_et_$subsystem_aborted then
SUBSYS_ABORTED:
		if rfi.abort_code = 0 then call successful_return (addr (rfi));
						/* send */
		else if rfi.abort_code = emf_et_$forwarding_aborted then call unsuccessful_return ();
						/* quit */
		else call abort_rfs (rfi.abort_code);	/* some other error */
	     else do;				/* can't call ssu_$abort_subsystem from outside a listener or request line */
		call ssu_$print_message (sci_ptr, code, "Invoking the sub-request-loop listener.");
		if rfi.debug_mode then do;		/* simulate ssu_$abort_subsystem */
		     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; call cu_$cl.");
		     call cu_$cl (""b);
		end;
		call unsuccessful_return ();
	     end;

	call successful_return (addr (rfi));

GLOBAL_RETURN:
	call cleanup_rfs ();
	return;
%page;
/**** Abort the subsystem, returning the specified code ****/
abort_rfs:
     proc (P_abort_code);

	dcl     P_abort_code	fixed bin (35);

	P_code = P_abort_code;
	go to GLOBAL_RETURN;

     end abort_rfs;

/**** Normal return, set the output parameters ****/
successful_return:
     proc (P_rfi_ptr);

	dcl     P_rfi_ptr		ptr parameter;
	dcl     1 local_rfi		aligned like rdm_forward_invocation based (P_rfi_ptr);
	dcl     rfi_buffer		char (local_rfi.buffer_used) based (local_rfi.buffer_ptr);

	P_buffer_used = min (local_rfi.buffer_used, buffer_size);
	substr (buffer, 1, P_buffer_used) = substr (rfi_buffer, 1, P_buffer_used);
	P_code = 0;
	go to GLOBAL_RETURN;

     end successful_return;

/**** Normal return when the message shouldn't be forwarded (e.g. quit) ****/
unsuccessful_return:
     proc ();

	P_code = emf_et_$forwarding_aborted;
	go to GLOBAL_RETURN;

     end unsuccessful_return;

cleanup_rfs:
     proc ();

	if rfi.temp_seg_ptr ^= null then call ssu_$release_temp_segment (sci_ptr, rfi.temp_seg_ptr);
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	return;

     end cleanup_rfs;

     end rdm_forward_subsystem_;

