/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Debugging requests for the send_mail subsystem */

/* Created:  October 1982 by G. Palter */
/* Modified: 5 September 1983 by G. Palter as part of the conversion to the new mail system interface */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


sdm_debug_requests_:
     procedure (P_sci_ptr, P_sdm_invocation_ptr);

	put file (sdm_debug_) data;			/* forces a full symbol table ... */

	return;					/* ... but not really an entrypoint */


dcl  P_sci_ptr pointer parameter;
dcl  P_sdm_invocation_ptr pointer parameter;

dcl  sci_ptr pointer;

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  new_debug_mode bit (1) aligned;
dcl  code fixed binary (35);

dcl  sdm_debug_ file stream internal;

dcl  error_table_$bad_arg fixed binary (35) external;
dcl  error_table_$badopt fixed binary (35) external;

dcl  sdm_set_request_tables_ entry (pointer, fixed binary (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$set_debug_mode entry (pointer, bit (1) aligned);
dcl  probe entry () options (variable);

dcl  index builtin;
%page;
/* The "debug_mode" request: enables/disables send_mail debugging facilities */

debug_mode:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sci_ptr = P_sci_ptr;
	sdm_invocation_ptr = P_sdm_invocation_ptr;

	new_debug_mode = "1"b;			/* defaults to turn on debug_mode */

	call ssu_$arg_count (sci_ptr, n_arguments);

	do argument_idx = 1 to n_arguments;
	     call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);
	     if index (argument, "-") = 1 then		/*  a control argument */
		if argument = "-on" then new_debug_mode = "1"b;
		else if argument = "-off" then new_debug_mode = "0"b;
		else call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a""", argument);
	     else call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		     "This request only accepts control arguments.  ""^a""", argument);
	end;

	sdm_invocation.debug_mode = new_debug_mode;

	call ssu_$set_debug_mode (sci_ptr, (sdm_invocation.debug_mode));
						/* keep ssu_ in step */

	call sdm_set_request_tables_ (sdm_invocation_ptr, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Setting subsystem request tables.");

	return;
%page;
/* The "probe" request: invokes the probe symbolic debugger in a stack frame with all relavent data structure available */

probe:
     entry (P_sci_ptr, P_sdm_invocation_ptr);

	sci_ptr = P_sci_ptr;
	sdm_invocation_ptr = P_sdm_invocation_ptr;

	call ssu_$arg_count (sci_ptr, n_arguments);
	if n_arguments ^= 0 then call ssu_$abort_line (sci_ptr, 0, "No arguments may be supplied.");

	call probe ();

	return;
%page;
%include sdm_invocation;
%page;
%include sdm_original_messages;
%page;
%include mlsys_message;
%page;
%include mlsys_address_list;

     end sdm_debug_requests_;
