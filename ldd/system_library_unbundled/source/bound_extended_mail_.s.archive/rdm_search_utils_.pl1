/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* read_mail Utilities releated to searching the printed representation of various parts of a message for a given
   character string

/* Created:  September 1983 by G. Palter */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen,^indcomtxt */


rdm_search_utils_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_rdm_invocation_ptr pointer parameter;
dcl  P_message_number fixed binary parameter;		/* identifies the message */

dcl  P_regexp_ptr pointer parameter;			/* search_message_wwith_regexp: -> the regular expression */
dcl  P_regexp_lth fixed binary (21) parameter;		/* search_message_wwith_regexp: length of said expression */

dcl  P_fieldname character (*) varying parameter;		/* prepare_*_field_for_search: the name of the field being
						      prepared for use in error messages */
dcl  P_field_value pointer parameter;			/* prepare_*_field_for_search: -> the value of the field */
dcl  P_representation_ptr pointer parameter;		/* prepare_*_field_for_search: set -> the printed
						     representation of the field to be used for the search */
dcl  P_representation_lth fixed binary (21) parameter;	/* prepare_*_field_for_search: set to the length of said
						      printed representation */
/**** format:indcomtxt */


/* Local copies of parameters */

dcl  message_number fixed binary;

dcl  the_regexp character (regexp_lth) unaligned based (regexp_ptr);
dcl  regexp_ptr pointer;
dcl  regexp_lth fixed binary (21);


/* Remaining declarations */

dcl  field_formatter
	entry (character (*) varying, pointer, fixed binary, pointer, fixed binary (21), fixed binary (21),
	fixed binary (35)) variable;

dcl  1 local_fmo aligned like format_message_options;

dcl  message_ptr pointer;
dcl  previous_buffer_used fixed binary (21);

dcl  code fixed binary (35);

dcl  MINIMUM_BUFFER_SIZE fixed binary (21) static options (constant) initial (32768);

dcl  sys_info$max_seg_size fixed binary (19) external;

/* format: off */
dcl (error_table_$nomatch, error_table_$smallarg, mlsys_et_$message_too_large, mlsys_et_$no_message_canonical_form)
	fixed binary (35) external;
/* format: on */

dcl  mail_system_$read_message_canonical_form
	entry (pointer, fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  mlsys_utils_$format_address_list_field
	entry (character (*) varying, pointer, fixed binary, pointer, fixed binary (21), fixed binary (21),
	fixed binary (35));
dcl  mlsys_utils_$format_message_canonical_form
	entry (pointer, pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  mlsys_utils_$format_references_list_field
	entry (character (*) varying, pointer, fixed binary, pointer, fixed binary (21), fixed binary (21),
	fixed binary (35));
dcl  rdm_mailbox_interface_$read_message entry (pointer, fixed binary, pointer, fixed binary (35));
dcl  search_file_$silent
	entry (pointer, fixed binary (21), fixed binary (21), pointer, fixed binary (21), fixed binary (21),
	fixed binary (21), fixed binary (21), fixed binary (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);

dcl  (addcharno, addr, null) builtin;
%page;
/* Search the canonical form of a message for the given qedx regular expression:  The canonical form of a message is the
   text used by the mail system when it stores the message in a mailbox.  In order to avoid the expense of constructing
   this text for each search, this entrypoint first attempts to obtain the canonical form from ring-2; if successfull,
   this entrypoint then saves the text for the remainder of the read_mail invocation.  If ring-2 does not provide a
   canonical form, this entrypoint will construct it once in its own set of temporary segments and then save it for the
   life of the invocation */

search_message_with_regexp:
     entry (P_rdm_invocation_ptr, P_message_number, P_regexp_ptr, P_regexp_lth) returns (bit (1) aligned);

	rdm_invocation_ptr = P_rdm_invocation_ptr;
	regexp_ptr = P_regexp_ptr;
	regexp_lth = P_regexp_lth;

	message_number = P_message_number;
	if (message_number < 1) | (message_number > message_list.n_messages) then
	     call ssu_$abort_line (rdm_invocation.sci_ptr, 0, "There is no message ^d.", message_number);
	if message_list.messages (message_number).message_idx = 0 then
	     call ssu_$abort_line (rdm_invocation.sci_ptr, 0,
		"Message ^d has already been permanently deleted from the mailbox.", message_number);


	if message_list.messages (message_number).search_text_ptr = null () then do;

/* First time searching this message: check if ring-2 already has the canonical form of this message */

	     call mail_system_$read_message_canonical_form (rdm_invocation.mailbox_ptr,
		message_list.messages (message_number).message_idx,
		message_list.messages (message_number).search_text_ptr,
		message_list.messages (message_number).search_text_lth, code);
	     if (code ^= 0) & (code ^= mlsys_et_$no_message_canonical_form) then
		call ssu_$abort_line (rdm_invocation.sci_ptr, code, "Reading message #^d from ^a.", message_number,
		     rdm_invocation.mailbox_name);
	end;


	if message_list.messages (message_number).search_text_ptr = null () then do;

/* First time and ring-2 doesn't have the canonical form of this message: construct it once for this invocation */

	     call rdm_mailbox_interface_$read_message (rdm_invocation_ptr, message_number, message_ptr, code);
	     if code ^= 0 then
		call ssu_$abort_line (rdm_invocation.sci_ptr, code, "Reading message #^d from ^a.", message_number,
		     rdm_invocation.mailbox_name);

	     local_fmo.version = FORMAT_MESSAGE_OPTIONS_VERSION_1;
	     local_fmo.line_length = -1;		/* don't bother with making it pretty */
	     local_fmo.envelope_formatting_mode,	/* use the format most familiar to users */
		local_fmo.header_formatting_mode, local_fmo.redistributions_list_formatting_mode =
		DEFAULT_FORMATTING_MODE;
	     local_fmo.include_body = "1"b;

	     if (rdm_invocation.last_search_buffer.buffer_used + MINIMUM_BUFFER_SIZE) > (4 * sys_info$max_seg_size) then
		call get_fresh_buffer_segment ();	/* go right to the virgin buffer */

RETRY_FORMAT_MESSAGE_CALL:
	     previous_buffer_used = rdm_invocation.last_search_buffer.buffer_used;

	     call mlsys_utils_$format_message_canonical_form (message_ptr, addr (local_fmo),
		rdm_invocation.last_search_buffer.buffer_ptr, 4 * sys_info$max_seg_size,
		rdm_invocation.last_search_buffer.buffer_used, code);
	     if (code ^= 0) & (code ^= error_table_$smallarg) then
		call ssu_$abort_line (rdm_invocation.sci_ptr, code,
		     "Attempting to prepare message #^d for searching.", message_number);

	     if code = error_table_$smallarg then	/* buffer wasn't large enough */
		if previous_buffer_used = 0 then
		     call ssu_$abort_line (rdm_invocation.sci_ptr, mlsys_et_$message_too_large,
			"Attempting to prepare message #^d for searching.", message_number);
		else do;
		     call get_fresh_buffer_segment ();	/* try again with an entire segment as the buffer */
		     go to RETRY_FORMAT_MESSAGE_CALL;
		end;

	     message_list.messages (message_number).search_text_ptr =
		addcharno (rdm_invocation.last_search_buffer.buffer_ptr, previous_buffer_used);
	     message_list.messages (message_number).search_text_lth =
		rdm_invocation.last_search_buffer.buffer_used - previous_buffer_used;
	end;


/* Now search for given regular expression */

	call search_file_$silent (regexp_ptr, 1, regexp_lth, message_list.messages (message_number).search_text_ptr, 1,
	     message_list.messages (message_number).search_text_lth, (0), (0), code);

	if (code ^= 0) & (code ^= error_table_$nomatch) then
	     call ssu_$abort_line (rdm_invocation.sci_ptr, code, "Attempting to search message ^d for ""/^a/"".",
		message_number, the_regexp);

	return ((code = 0));
%page;
/* Prepares a copy of the printed representation of various types of message fields in the temporary segments managed by
   this module in order to save other modules which must search said fields the expsense of having to format the fields
   multiple times.  See rdm_msg_requests_ for an example of how to use these entrypoints */

prepare_address_list_field_for_search:			/* ... address list fields (From, To, etc.) */
     entry (P_rdm_invocation_ptr, P_message_number, P_fieldname, P_field_value, P_representation_ptr,
	P_representation_lth);

	field_formatter = mlsys_utils_$format_address_list_field;
	go to PREPARE_FIELD_FOR_SEARCH;


prepare_message_references_field_for_search:		/* ... list of references fields (ie: In-Reply-To) */
     entry (P_rdm_invocation_ptr, P_message_number, P_fieldname, P_field_value, P_representation_ptr,
	P_representation_lth);

	field_formatter = mlsys_utils_$format_references_list_field;
	go to PREPARE_FIELD_FOR_SEARCH;


/* Prepare a message field for one or more subsequent searches */

PREPARE_FIELD_FOR_SEARCH:
	rdm_invocation_ptr = P_rdm_invocation_ptr;
	message_number = P_message_number;

	if (rdm_invocation.last_search_buffer.buffer_used + MINIMUM_BUFFER_SIZE) > (4 * sys_info$max_seg_size) then
	     call get_fresh_buffer_segment ();		/* go right to the virgin buffer */

RETRY_FORMAT_FIELD_CALL:
	previous_buffer_used = rdm_invocation.last_search_buffer.buffer_used;

	call field_formatter ("", P_field_value, -1, rdm_invocation.last_search_buffer.buffer_ptr,
	     4 * sys_info$max_seg_size, rdm_invocation.last_search_buffer.buffer_used, code);
	if (code ^= 0) & (code ^= error_table_$smallarg) then
	     call ssu_$abort_line (rdm_invocation.sci_ptr, code,
		"Attempting to prepare the ^a field of message #^d for searching.", P_fieldname, message_number);

	if code = error_table_$smallarg then		/* buffer wasn't large enough */
	     if previous_buffer_used = 0 then
		call ssu_$abort_line (rdm_invocation.sci_ptr, mlsys_et_$message_too_large,
		     "Attempting to prepare the ^a field of message #^d for searching.", P_fieldname, message_number);
	     else do;
		call get_fresh_buffer_segment ();	/* try again with an entire segment as the buffer */
		go to RETRY_FORMAT_FIELD_CALL;
	     end;

	P_representation_ptr = addcharno (rdm_invocation.last_search_buffer.buffer_ptr, previous_buffer_used);
	P_representation_lth = rdm_invocation.last_search_buffer.buffer_used - previous_buffer_used;

	return;
%page;
/* Obtains a fresh temporary segment */

get_fresh_buffer_segment:
     procedure ();

	call ssu_$get_temp_segment (rdm_invocation.sci_ptr, "search-buffer",
	     rdm_invocation.last_search_buffer.buffer_ptr);
	rdm_invocation.last_search_buffer.buffer_used = 0;

	return;

     end get_fresh_buffer_segment;
%page;
%include rdm_invocation;
%page;
%include rdm_message_list;
%page;
%include mlsys_format_options;

     end rdm_search_utils_;
