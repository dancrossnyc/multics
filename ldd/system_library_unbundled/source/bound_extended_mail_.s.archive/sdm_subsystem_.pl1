/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: off */

/* The Multics send_mail subsystem */

/* Created:  December 1978 by G. Palter */
/* Modified: 11 January 1979 by G. Palter to print informative error messages and only print sdm_data_$special_message
      once per process */
/* Modified: 15 January 1979 by G. Palter to support no abort feature */
/* Modified: 24 January 1979 by G. Palter to support original text feature for use by read_mail "reply" request */
/* Modified: 31 January 1979 by G. Palter to revert to filling before invoking qedx */
/* Modified: 7 February 1979 by G. Palter to correct bug with -fill and using \f in input mode */
/* Modified: 25 December 1979 by W. Olin Sibert to implement auto_fill mode */
/* Modified: 25 April 1980 by G. Palter to implement abbrev processing */
/* Modified: 28 April 1980 by G. Palter to call v1_ssu_ entries for version 4.1 subsystems */
/* Modified: 5 May 1980 by W. Olin Sibert to use new ssu_ interfaces */
/* Modified: 1 June 1980 by G. Palter to implement suggestion #0186 -- there should be a "print_original" request in
      send_mail which prints the message being replied to when invoked by read_mail's "reply" request */
/* Modified: 4 June 1980 by G. Palter to implement suggestion #0287 -- if a reply is being created and the user exits
      send_mail without sending the reply, the "-delete" control argument of the "reply" request should be ignored */
/* Modified: 27 January 1981 by G. Palter to fix bug #0354 -- both read_mail and send_mail mis-declare ssu_$set_prompt:
      for read_mail, the declaration used works; for send_mail, use of -no_prompt can cause severe problems  (faults,
      fatal process errors, etc.) */
/* Modified: 27 March 1981 by G. Palter to put the "original" requests into a separate request table */
/* Modified: 16 February 1982 by G. Palter for version 4 sdm_subsystem_info (default profiles) and new calling sequences
      for ssu_$create_invocation and ssu_$set_abbrev_info */
/* Modified: 2 March 1982 by G. Palter to eliminate a window which prevented subsystem invocations from being destroyed */
/* Modified: 17 September 1982 by G. Palter to implement new defaults for -fill and -request_loop based on terminal/file
      input, change filling to occur after the initial invocation of qedx, support debug_mode and new prompt control, and
      set the exec_com search list and suffix properly */
/* Modified: 3 October 1982 by G. Palter to use sdm_set_info_directories_ */
/* Modified: September 1983 by G. Palter as part of the conversion of send_mail to the new mail system interface */
/* Modified: April 1984 by G. Palter to fix error #0438 -- the primitives which allow a user to replace the address list
      portions of a message (eg: mail_system_$replace_from, mail_system_$replace_user_field) should not make the user's
      copy of the address list read-only.  Instead, they should copy the user's list to allow the user to continue to
      modify the list if desired for later additional use */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


sdm_subsystem_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sdm_invocation_ptr pointer parameter;		/* -> description of send_mail subsystem */
dcl  P_sdm_subsystem_info_ptr pointer parameter;		/* -> options used to create/control the subsystem */

dcl  P_sdm_subsystem_info_version character (8) parameter;	/* version of above structure desired by the caller */

dcl  P_code fixed binary (35) parameter;


/* Local copies of parameters */

dcl  code fixed binary (35);


/* Remaining declarations */

dcl  sci_ptr pointer;

dcl  initial_rql character (initial_rql_lth) varying based (initial_rql_ptr);
dcl  initial_rql_lth fixed binary (21);
dcl  initial_rql_ptr pointer;

dcl  edit_requests character (edit_requests_lth) unaligned based (edit_requests_ptr);
dcl  edit_requests_lth fixed binary (21);
dcl  edit_requests_ptr pointer;

dcl  user_initial_requests character (sdm_subsystem_info.initial_requests_lth) unaligned
	based (sdm_subsystem_info.initial_requests_ptr);

dcl  sdm_subsystem_info_subject character (sdm_subsystem_info.subject_lth) unaligned
	based (sdm_subsystem_info.subject_ptr);

dcl  subsystem_area area aligned based (subsystem_area_ptr);
dcl  subsystem_area_ptr pointer;
dcl  1 local_ai aligned like area_info;

dcl  subject_line character (1024);
dcl  subject_segment_ptr pointer;
dcl  (subject_lth, rest_of_subject_lth) fixed binary (21);

dcl  enter_request_loop bit (1) aligned;		/* ON => user wants to entry the request loop */
dcl  fatal_error bit (1) aligned;

dcl  input_terminator_type fixed binary;		/* specifies how user ended message */
dcl  (address_type, idx) fixed binary;

dcl  SEND_MAIL character (32) static options (constant) initial ("send_mail");

dcl  sys_info$max_seg_size fixed binary (19) external;
dcl  iox_$error_output pointer external;
dcl  iox_$user_input pointer external;

/* format: off */
dcl (error_table_$fatal_error, error_table_$long_record, error_table_$unimplemented_version, ssu_et_$subsystem_aborted)
	fixed binary (35) external static;
/* format: on */

dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  cu_$cl entry (bit (36) aligned);
dcl  cu_$generate_call entry (entry, pointer);
dcl  cu_$grow_stack_frame entry (fixed binary (18), pointer, fixed binary (35));
dcl  ioa_$ioa_switch entry () options (variable);
dcl  ioa_$nnl entry () options (variable);
dcl  iox_$get_line entry (pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  mail_system_$add_address entry (pointer, pointer, character (8), fixed binary (35));
dcl  mail_system_$add_reply_reference entry (pointer, pointer, fixed binary, fixed binary (35));
dcl  mail_system_$create_address_list entry (character (8), pointer, fixed binary (35));
dcl  mail_system_$create_message entry (character (8), pointer, fixed binary (35));
dcl  mail_system_$free_address_list entry (pointer, fixed binary (35));
dcl  mail_system_$free_message entry (pointer, fixed binary (35));
dcl  mail_system_$get_address_type entry (pointer, fixed binary, fixed binary (35));
dcl  mail_system_$replace_bcc entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$replace_cc entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$replace_from entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$replace_reply_to entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$replace_subject entry (pointer, character (*), fixed binary (35));
dcl  mail_system_$replace_to entry (pointer, pointer, fixed binary (35));
dcl  requote_string_ entry (character (*)) returns (character (*));
dcl  sdm_set_info_directories_ entry (pointer, fixed binary (35));
dcl  sdm_set_request_tables_ entry (pointer, fixed binary (35));
dcl  sdm_text_mgr_$file_input entry (pointer, character (*), character (*), bit (1) aligned);
dcl  sdm_text_mgr_$process_original_text entry (pointer, pointer, bit (1) aligned);
dcl  sdm_text_mgr_$terminal_input entry (pointer, fixed binary, pointer, fixed binary (21), bit (1) aligned);
dcl  ssu_$create_invocation
	entry (character (*), character (*), pointer, pointer, character (*), pointer, fixed binary (35));
dcl  ssu_$destroy_invocation entry (pointer);
dcl  ssu_$execute_line entry (pointer, pointer, fixed binary (21), fixed binary (35));
dcl  ssu_$get_area entry (pointer, pointer, character (*), pointer);
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);
dcl  ssu_$listen entry (pointer, pointer, fixed binary (35));
dcl  ssu_$print_blast entry (pointer, pointer, fixed binary, character (*) varying, fixed binary (35));
dcl  ssu_$print_message entry () options (variable);
dcl  ssu_$record_usage entry (pointer, pointer, fixed binary (35));
dcl  ssu_$release_temp_segment entry (pointer, pointer);
dcl  ssu_$set_abbrev_info entry (pointer, pointer, pointer, bit (1) aligned);
dcl  ssu_$set_debug_mode entry (pointer, bit (1) aligned);
dcl  ssu_$set_ec_search_list entry (pointer, character (32));
dcl  ssu_$set_ec_suffix entry (pointer, character (32));
dcl  ssu_$set_info_ptr entry (pointer, pointer);
dcl  ssu_$set_prompt entry (pointer, character (64) varying);
dcl  ssu_$set_prompt_mode entry (pointer, bit (*));

dcl  cleanup condition;

dcl  (addcharno, addr, addwordno, clock, codeptr, divide, length, null, unspec) builtin;
%page;
/* Initialize an invocation of the send_mail subsystem: creates a subsystem invocation, initializes an sdm_invocation
   structure, and creates an sdm_subsystem_info structure containing default values as obtained from sdm_data_ */

create_invocation:
     entry (P_sdm_subsystem_info_version, P_sdm_invocation_ptr, P_sdm_subsystem_info_ptr, P_code);

	if P_sdm_subsystem_info_version ^= SDM_SUBSYSTEM_INFO_VERSION_6 then do;
	     P_code = error_table_$unimplemented_version; /* only have one supported version */
	     return;
	end;


/* Create the subsystem invocation and an area for use by the subsystem */

	sci_ptr,					/* for cleanup handler */
	     sdm_invocation_ptr, sdm_subsystem_info_ptr = null ();

	on condition (cleanup)
	     begin;
		if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	     end;

	call ssu_$create_invocation (SEND_MAIL, (sdm_data_$version), null (), null (), "", sci_ptr, P_code);
	if P_code ^= 0 then return;			/* failed */

	unspec (local_ai) = ""b;
	local_ai.version = area_info_version_1;
	local_ai.zero_on_alloc, local_ai.extend = "1"b;
	call ssu_$get_area (sci_ptr, addr (local_ai), "", subsystem_area_ptr);


/* Create the send_mail invocation structure */

	allocate sdm_invocation in (subsystem_area) set (sdm_invocation_ptr);
	sdm_invocation.type = SDM_INVOCATION;

	sdm_invocation.sci_ptr = sci_ptr;
	sdm_invocation.area_ptr = subsystem_area_ptr;	/* use the above area for all allocations */

	sdm_invocation.message_ptr = null ();		/* no message yet */

	sdm_invocation.original_messages_ptr = null ();	/* avoids problems with premature terminations */

	call ssu_$set_info_ptr (sci_ptr, sdm_invocation_ptr);


/* Create and initialize the sdm_subsystem_info structure */

	allocate sdm_subsystem_info in (sdm_area) set (sdm_subsystem_info_ptr);

	sdm_subsystem_info.version = SDM_SUBSYSTEM_INFO_VERSION_6;

	sdm_subsystem_info.input_type = TERMINAL_INPUT;	/* defaults to read from the terminal */

	sdm_subsystem_info.address_lists = null ();	/* no sources or destinations yet */

	sdm_subsystem_info.subject_given = "0"b;	/* no subject supplied yet */

	sdm_subsystem_info.options = sdm_data_$default_options;
						/* set up permanent options */

	sdm_subsystem_info.initial_requests_lth = 0;	/* no initial request line */

	sdm_subsystem_info.rdm_invocation_ptr = null ();	/* don't yet know whether it was created by read_mail reply */

	sdm_subsystem_info.original_messages_ptr = null ();
						/* no list of original messages for an In-Reply-To field */

	P_sdm_invocation_ptr = sdm_invocation_ptr;
	P_sdm_subsystem_info_ptr = sdm_subsystem_info_ptr;
	P_code = 0;

	return;
%page;
/* Main workhorse of the subsystem: reads the input message and either sends the message or enters the request loop */

subsystem:
     entry (P_sdm_invocation_ptr, P_sdm_subsystem_info_ptr, P_code);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	sdm_subsystem_info_ptr = P_sdm_subsystem_info_ptr;

	if sdm_subsystem_info.version ^= SDM_SUBSYSTEM_INFO_VERSION_6 then do;
	     P_code = error_table_$unimplemented_version;
	     return;				/* bad version: caller will cleanup */
	end;

	sdm_invocation.debug_mode = sdm_subsystem_info.debug;
	call ssu_$set_debug_mode (sdm_invocation.sci_ptr, (sdm_invocation.debug_mode));


/* Create the message and place the supplied address lists (From/Reply-To/To/cc/bcc fields) into the message */

	call mail_system_$create_message (MESSAGE_VERSION_2, sdm_invocation.message_ptr, code);
	if code ^= 0 then				/* someone changed the mail system out from under us? */
	     call abort_subsystem (sdm_invocation.sci_ptr, code, "Unable to create the message.");

	sdm_invocation.message_state = UNPROCESSED_MESSAGE;
	sdm_invocation.date_time_body_modified = clock ();/* we need some value here */

	if sdm_subsystem_info.from ^= null () then do;	/* explicit authors */
	     call mail_system_$replace_from (sdm_invocation.message_ptr, sdm_subsystem_info.from, code);
	     if code ^= 0 then call abort_subsystem (sdm_invocation.sci_ptr, code, "Unable to replace the From field.");
	end;

	if sdm_data_$default_from_field = null () then do;/* create a default From field for use with "print -header" */
	     call mail_system_$create_address_list (ADDRESS_LIST_VERSION_2, sdm_data_$default_from_field, code);
	     if code ^= 0 then
UNABLE_TO_CREATE_DEFAULT_FROM_FIELD:
		call abort_subsystem (sdm_invocation.sci_ptr, code, "Unable to create the default From field.");
	     call mail_system_$get_address_type (mlsys_data_$user_mail_table_address, address_type, (0));
	     if address_type = INVALID_ADDRESS then	/* ... anonymous user */
		call mail_system_$add_address (sdm_data_$default_from_field, mlsys_data_$user_default_mailbox_address,
		     ADDRESS_LIST_VERSION_2, code);
	     else call mail_system_$add_address (sdm_data_$default_from_field, mlsys_data_$user_mail_table_address,
		     ADDRESS_LIST_VERSION_2, code);
	     if code ^= 0 then go to UNABLE_TO_CREATE_DEFAULT_FROM_FIELD;
	end;

	if sdm_subsystem_info.reply_to ^= null () then do;
	     call mail_system_$replace_reply_to (sdm_invocation.message_ptr, sdm_subsystem_info.reply_to, code);
	     if code ^= 0 then
		call abort_subsystem (sdm_invocation.sci_ptr, code, "Unable to replace the Reply-to field.");
	end;

	if sdm_subsystem_info.to ^= null () then do;
	     call mail_system_$replace_to (sdm_invocation.message_ptr, sdm_subsystem_info.to, code);
	     if code ^= 0 then call abort_subsystem (sdm_invocation.sci_ptr, code, "Unable to replace the To field.");
	end;

	if sdm_subsystem_info.cc ^= null () then do;
	     call mail_system_$replace_cc (sdm_invocation.message_ptr, sdm_subsystem_info.cc, code);
	     if code ^= 0 then call abort_subsystem (sdm_invocation.sci_ptr, code, "Unable to replace the cc field.");
	end;

	if sdm_subsystem_info.bcc ^= null () then do;
	     call mail_system_$replace_bcc (sdm_invocation.message_ptr, sdm_subsystem_info.bcc, code);
	     if code ^= 0 then call abort_subsystem (sdm_invocation.sci_ptr, code, "Unable to replace the bcc field.");
	end;


/* Process the list of original messages for which this message is a reply */

	if sdm_subsystem_info.original_messages_ptr ^= null () then do;

	     if sdm_subsystem_info.original_messages_ptr -> original_messages.version ^= ORIGINAL_MESSAGES_VERSION_1
	     then call abort_subsystem (sdm_invocation.sci_ptr, error_table_$unimplemented_version,
		     "Attempting to process the list of original messages.");

	     original_messages_n_original_messages =	/* ... need our own copy: remaining code always frees it */
		sdm_subsystem_info.original_messages_ptr -> original_messages.n_original_messages;
	     allocate original_messages in (sdm_area) set (sdm_invocation.original_messages_ptr);
	     sdm_invocation.original_messages_ptr -> original_messages =
		sdm_subsystem_info.original_messages_ptr -> original_messages;

	     /*** Now add the original messages to the new message's reply references list */
	     original_messages_ptr = sdm_invocation.original_messages_ptr;
	     do idx = 1 to original_messages.n_original_messages;
		call mail_system_$add_reply_reference (sdm_invocation.message_ptr,
		     original_messages.messages (idx).message_ptr, (-1), code);
		if code ^= 0 then
		     call abort_subsystem (sdm_invocation.sci_ptr, code,
			"Unable to add a reference to message #^d to the In-Reply-To field.",
			original_messages.messages (idx).message_idx);
	     end;
	end;


/* Print the initial greeting message before possibly asking for a subject */

	if sdm_data_$first_invocation then
	     call ssu_$print_blast (sdm_invocation.sci_ptr, codeptr (subsystem), 3, sdm_data_$special_message, (0));
	else call ssu_$record_usage (sdm_invocation.sci_ptr, codeptr (subsystem), (0));

	sdm_data_$first_invocation = "0"b;


/* Set the message subject:  If requested, prompt the user for the subject and read it from the terminal */

	if sdm_subsystem_info.subject_given then	/* user gave a subject on the command line ... */
	     if sdm_subsystem_info.subject_lth ^= 0 then do;
		call mail_system_$replace_subject (sdm_invocation.message_ptr, sdm_subsystem_info_subject, code);
		if code ^= 0 then
		     call abort_subsystem (sdm_invocation.sci_ptr, code, "Unable to replace the Subject field.");
	     end;

	     else ;				/* user explicitly requested no subject on the command line */

	else do;					/* no explicit instructions: ask for a subject */
	     call ioa_$nnl ("Subject: ");

	     call iox_$get_line (iox_$user_input, addr (subject_line), length (subject_line), subject_lth, code);
	     if code = 0 then do;			/* ... got it in our automatic buffer */
		begin;
dcl  the_subject character (subject_lth - 1) unaligned defined (subject_line) position (1);
		     if length (the_subject) > 0 then
			call mail_system_$replace_subject (sdm_invocation.message_ptr, the_subject, code);
		     if code ^= 0 then
			call abort_subsystem (sdm_invocation.sci_ptr, code, "Unable to replace the Subject field.");
		end;
	     end;

	     else if code = error_table_$long_record then do;
		/*** ... too large for our automatic buffer: read the rest into a temporary segment */
		call ssu_$get_temp_segment (sdm_invocation.sci_ptr, "subject-buffer", subject_segment_ptr);
		begin;
dcl  subject_in_segment character (subject_lth) unaligned based (subject_segment_ptr);
dcl  the_subject_so_far character (subject_lth) unaligned defined (subject_line) position (1);
		     subject_in_segment = the_subject_so_far;
		end;
		call iox_$get_line (iox_$user_input, addcharno (subject_segment_ptr, subject_lth),
		     ((4 * sys_info$max_seg_size) - subject_lth), rest_of_subject_lth, code);
		if code ^= 0 then do;		/* ... quite fatal */
		     call ssu_$release_temp_segment (sdm_invocation.sci_ptr, subject_segment_ptr);
		     call abort_subsystem (sdm_invocation.sci_ptr, code, "Reading the message subject.");
		end;
		begin;
dcl  the_subject character (subject_lth + rest_of_subject_lth - 1) unaligned based (subject_segment_ptr);
		     if length (the_subject) > 0 then
			call mail_system_$replace_subject (sdm_invocation.message_ptr, the_subject, code);
		end;				/* ... code is already zero if above call isn't made */
		call ssu_$release_temp_segment (sdm_invocation.sci_ptr, subject_segment_ptr);
		if code ^= 0 then
		     call abort_subsystem (sdm_invocation.sci_ptr, code, "Unable to replace the Subject field.");
	     end;

	     else call abort_subsystem (sdm_invocation.sci_ptr, code, "Reading the message subject.");
	end;


/* Process remaining input options except input source and intial request line */

	sdm_invocation.fill_width = sdm_subsystem_info.fill_width;

	sdm_invocation.brief = sdm_subsystem_info.brief;
	sdm_invocation.acknowledge = sdm_subsystem_info.acknowledge;
	sdm_invocation.notify = sdm_subsystem_info.notify;
	sdm_invocation.auto_write = sdm_subsystem_info.auto_write;

	if sdm_subsystem_info.fill_control = DEFAULT_FILL then
	     sdm_invocation.fill = (sdm_subsystem_info.input_type = TERMINAL_INPUT);
	else sdm_invocation.fill = (sdm_subsystem_info.fill_control = FILL);

	if sdm_subsystem_info.request_loop_control = DEFAULT_REQUEST_LOOP then
	     enter_request_loop = (sdm_subsystem_info.input_type = FILE_INPUT);
	else enter_request_loop = (sdm_subsystem_info.request_loop_control = REQUEST_LOOP);

	if sdm_subsystem_info.prompt_control.prompt_control = DEFAULT_PROMPT then ;
						/* use the default prompt */
	else if sdm_subsystem_info.prompt_control.prompt_control = NO_PROMPT then
	     call ssu_$set_prompt_mode (sdm_invocation.sci_ptr, DONT_PROMPT);
	else call ssu_$set_prompt (sdm_invocation.sci_ptr, sdm_subsystem_info.prompt_string);

	call ssu_$set_abbrev_info (sdm_invocation.sci_ptr, sdm_subsystem_info.default_profile_ptr,
	     sdm_subsystem_info.profile_ptr, (sdm_subsystem_info.abbrev));

	call ssu_$set_ec_search_list (sdm_invocation.sci_ptr, sdm_data_$ec_search_list);
	call ssu_$set_ec_suffix (sdm_invocation.sci_ptr, sdm_data_$ec_suffix);

	sdm_invocation.rdm_invocation_ptr = sdm_subsystem_info.rdm_invocation_ptr;
						/* remember the reply request (if any) */

	call sdm_set_request_tables_ (sdm_invocation_ptr, code);
	if code ^= 0 then call abort_subsystem (sdm_invocation.sci_ptr, code, "Defining the subsystem request tables.");

	call sdm_set_info_directories_ (sdm_invocation_ptr, code);
	if code ^= 0 then
	     call abort_subsystem (sdm_invocation.sci_ptr, code, "Defining the subsystem info directories.");


/* Add the original message text to the body of the message if requested:  The original text consists of the Date, From,
   and Subject fields and the actual message body of the original messages.  This text is indented as requested and the
   original message bodies are also reformatted if requested */

	if sdm_subsystem_info.include_original_text then do;
	     call sdm_text_mgr_$process_original_text (sdm_invocation_ptr,
		addr (sdm_subsystem_info.original_text_control), fatal_error);
	     if fatal_error then go to RETURN_FROM_SUBSYSTEM_WITH_FATAL_ERROR;
	end;					/* ... above call has already printed the error message */


/* Input the message body either from the terminal or the specified file */

	if sdm_subsystem_info.input_type = TERMINAL_INPUT then
	     call sdm_text_mgr_$terminal_input (sdm_invocation_ptr, input_terminator_type, edit_requests_ptr,
		edit_requests_lth, fatal_error);

	else /*** if sdm_subsystem_info.input_type = FILE_INPUT then */
	     do;
	     call sdm_text_mgr_$file_input (sdm_invocation_ptr, sdm_subsystem_info.input_file.dname,
		sdm_subsystem_info.input_file.ename, fatal_error);
	     input_terminator_type = NORMAL_TERMINATION;
	     edit_requests_lth = 0;
	end;

	if fatal_error then				/* above subroutines print the appropriate error messages */
	     go to RETURN_FROM_SUBSYSTEM_WITH_FATAL_ERROR;


/* Build the initial request line */

	initial_rql_lth = sdm_subsystem_info.initial_requests_lth;
						/* start with whatever the user requested */

	if input_terminator_type = ENTER_EDITOR then	/* if necessary to add qedx request */
	     initial_rql_lth = initial_rql_lth + length ("qedx -request """"; ") + 2 * edit_requests_lth;

	if sdm_invocation.fill then			/* if necessary to add fill request */
	     initial_rql_lth = initial_rql_lth + length ("fill; ");

	initial_rql_lth = initial_rql_lth + length ("send; quit");
						/* be sure there's enough room */

	call cu_$grow_stack_frame ((divide ((initial_rql_lth + 3), 4, 18, 0) + 1), initial_rql_ptr, (0));

	if ^enter_request_loop &			/* user didn't explicitly ask for the request loop */
	     (sdm_subsystem_info.initial_requests_lth = 0) & (input_terminator_type = NORMAL_TERMINATION) then
	     if sdm_invocation.fill then		/* ... fill, send, and quit */
		initial_rql = "fill; send; quit";
	     else initial_rql = "send; quit";		/* ... send and quit */

	else do;					/* user asked for the request loop ... */
	     initial_rql = "";
	     if input_terminator_type = ENTER_EDITOR then do;
		initial_rql = initial_rql || "qedx -request ";
		initial_rql = initial_rql || requote_string_ (edit_requests);
		initial_rql = initial_rql || "; ";	/* ... supply input line via request option */
	     end;
	     if sdm_invocation.fill then initial_rql = initial_rql || "fill; ";
	     if sdm_subsystem_info.initial_requests_lth ^= 0 then initial_rql = initial_rql || user_initial_requests;
	end;

	if length (initial_rql) > 0 then do;		/* execute the initial request string */
	     call ssu_$execute_line (sdm_invocation.sci_ptr, addwordno (initial_rql_ptr, 1), length (initial_rql), code)
		;
	     if code = ssu_et_$subsystem_aborted then go to RETURN_FROM_SUBSYSTEM;
	end;


/* Invoke the subsystem listener */

	call ssu_$listen (sdm_invocation.sci_ptr, (null ()), code);
	if code = ssu_et_$subsystem_aborted then code = 0;

	if code ^= 0 then call abort_subsystem (sdm_invocation.sci_ptr, code, "Invoking the subsystem listener.");


/* That's all */

RETURN_FROM_SUBSYSTEM:
	P_code = sdm_invocation.abort_code;		/* reflect any special conditions to the caller */
	return;



/* Prints an error message and aborts the attempted subsystem invocation */

abort_subsystem:
     procedure () options (variable);

	call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr ());

	if sdm_invocation.debug_mode then do;		/* simulate the actions of ssu_$abort_subsystem */
	     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; calling cu_$cl.");
	     call cu_$cl (""b);
	end;

	go to RETURN_FROM_SUBSYSTEM_WITH_FATAL_ERROR;

     end abort_subsystem;

RETURN_FROM_SUBSYSTEM_WITH_FATAL_ERROR:
	P_code = error_table_$fatal_error;		/* we've already reported the error */
	return;
%page;
/* Destroy a send_mail invocation */

destroy_invocation:
     entry (P_sdm_invocation_ptr, P_sdm_subsystem_info_ptr);

	sdm_invocation_ptr = P_sdm_invocation_ptr;
	sdm_subsystem_info_ptr = P_sdm_subsystem_info_ptr;

	P_sdm_invocation_ptr,			/* don't try to do any of this more than once */
	     P_sdm_subsystem_info_ptr = null ();

	if sdm_subsystem_info_ptr ^= null () then do;	/* get rid of input address lists if needed */
	     if sdm_subsystem_info.from ^= null () then
		call mail_system_$free_address_list (sdm_subsystem_info.from, (0));
	     if sdm_subsystem_info.reply_to ^= null () then
		call mail_system_$free_address_list (sdm_subsystem_info.reply_to, (0));
	     if sdm_subsystem_info.to ^= null () then call mail_system_$free_address_list (sdm_subsystem_info.to, (0));
	     if sdm_subsystem_info.cc ^= null () then call mail_system_$free_address_list (sdm_subsystem_info.cc, (0));
	     if sdm_subsystem_info.bcc ^= null () then
		call mail_system_$free_address_list (sdm_subsystem_info.bcc, (0));
	end;

	if sdm_invocation_ptr ^= null () then do;	/* get rid of the message and subsystem invocation */
	     if sdm_invocation.message_ptr ^= null () then
		call mail_system_$free_message (sdm_invocation.message_ptr, (0));
	     if sdm_invocation.sci_ptr ^= null () then	/* ... destroying the subsystem releases the area */
		call ssu_$destroy_invocation (sdm_invocation.sci_ptr);
	end;

	return;
%page;
%include sdm_invocation;
%page;
%include sdm_subsystem_info;
%page;
%include send_mail_options;
%page;
%include sdm_original_messages;
%page;
%include sdm_data;
%page;
%include sdm_text_mgr_constants;
%page;
%include mlsys_data;
%page;
%include mlsys_address_types;
%page;
%include mlsys_address_list;
%page;
%include mlsys_message;
%page;
%include area_info;
%page;
%include ssu_prompt_modes;

     end sdm_subsystem_;
