/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style2,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,idind22 */

rdm_fwd_text_mgr_:
     proc ();

/* entrypoints for manipulating the text of a read_mail forwarding
   comment */

/* Written 7 October 1983 by B. Margolin */

	/*** Common Parameters ***/

	dcl     P_rfi_ptr		pointer parameter;
	dcl     P_fatal_error	bit (1) aligned parameter;
						/* set ON => an unrecoverable error occured */

	/*** terminal_input Parameters ***/

	dcl     P_input_terminator_type
				fixed binary parameter;
						/* set to type of termination (normal/request-loop/qedx) */
	dcl     P_edit_requests_ptr	pointer parameter;	/* set -> editor requests input by user (if any) */
	dcl     P_edit_requests_lth	fixed binary (21) parameter;
						/* set to length of the editor requests */


	/*** file_input Parameters ***/

	dcl     P_input_file_ptr	ptr parameter;	/* -> user-specified input file */
	dcl     P_input_file_len	fixed bin (21) parameter;
						/* length of input file */

	/*** fill_text Parameters ***/

	dcl     P_fill_width	fixed binary parameter;
						/* width to use for formatting the text */

	/*** Automatic ***/

	dcl     code		fixed bin (35);
	dcl     edit_requests_lth	fixed bin (21);
	dcl     edit_requests_ptr	ptr;
	dcl     fdoc_buffer_ptr	ptr;
	dcl     fdoc_text_lth	fixed bin (21);
	dcl     idx		fixed bin (21);
	dcl     input_line_lth	fixed bin (21);
	dcl     last_character_of_sequence
				fixed bin (21);
	dcl     1 local_fdo		aligned like format_document_options;
	dcl     original_buffer_ptr	ptr;
	dcl     original_text_lth	fixed bin (21);
	dcl     rfi_ptr		ptr;
	dcl     terminator_type	fixed bin;
	dcl     the_character	char (1);

	/*** Based ***/

	dcl     edit_requests	char (edit_requests_lth) based (edit_requests_ptr);
	dcl     fdoc_buffer		char (4 * sys_info$max_seg_size) based (fdoc_buffer_ptr);
	dcl     original_buffer	char (4 * sys_info$max_seg_size) based (original_buffer_ptr);
	dcl     original_text	char (original_text_lth) based (original_buffer_ptr);
	dcl     rdm_fwd_area	area based (rfi.area_ptr);
	dcl     1 rfi		aligned like rdm_forward_invocation based (rfi_ptr);

	/*** Entries ***/

	dcl     cu_$arg_list_ptr	entry () returns (ptr);
	dcl     cu_$cl		entry (bit (36) aligned);
	dcl     cu_$generate_call	entry (entry, ptr);
	dcl     format_document_$string
				entry (char (*), char (*), fixed bin (21), ptr, fixed bin (35));
	dcl     ioa_		entry () options (variable);
	dcl     ioa_$ioa_switch	entry () options (variable);
	dcl     iox_$get_line	entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
	dcl     ssu_$get_temp_segment entry (ptr, char (*), ptr);
	dcl     ssu_$print_message	entry () options (variable);
	dcl     ssu_$release_temp_segment
				entry (ptr, ptr);

	/*** Static ***/

	dcl     error_table_$recoverable_error
				fixed bin (35) ext static;
	dcl     (
	        iox_$error_output,
	        iox_$user_input
	        )			ptr ext static;
	dcl     sys_info$max_seg_size fixed bin (35) ext static;

	/*** Misc ***/

	dcl     (cleanup, program_interrupt)
				condition;
%page;
%include format_document_options;
%page;
%include rdm_fwd_invocation;
%page;
%include rdm_fwd_text_mgr_const;
%page;
/*^ Reads the text of the message from the terminal: the possible terminators for the text are:
	'.'	end of input
	'\fq'	end of input, enter request loop, and
	'\f...'	end of input, enter editor with given requests (if any) */

terminal_input:
     entry (P_rfi_ptr, P_input_terminator_type, P_edit_requests_ptr, P_edit_requests_lth, P_fatal_error);

	rfi_ptr = P_rfi_ptr;

	original_text_lth = 0;			/* nothing read yet */
	edit_requests_lth = 0;			/* no editor requests yet */

	on condition (program_interrupt)
	     begin;				/* stop reading if the user asks us ... */
		terminator_type = ENTER_REQUEST_LOOP;
		go to END_OF_INPUT;
	     end;

	call ioa_ ("Comment:");


	/*** Message reading loop ... ***/

	terminator_type = 0;			/* really need do until ... */
	input_line_lth = 0;
	original_buffer_ptr = rfi.temp_seg_ptr;

	do while (terminator_type = 0);
	     original_text_lth = original_text_lth + input_line_lth;

	     begin;

		dcl     rest_of_original_buffer
					character (length (original_buffer) - original_text_lth)
					unaligned defined (original_buffer) position (original_text_lth + 1);

		call iox_$get_line (iox_$user_input, addr (rest_of_original_buffer), length (rest_of_original_buffer),
		     input_line_lth, code);
		if code ^= 0 then			/* ... all errors fatal when an entire segment available */
		     call abort_terminal_input (rfi.sci_ptr, code, "Reading the message text.");


		/*** ... Search for terminators ***/

		begin;

		     dcl	   input_line	     character (input_line_lth) unaligned
					     defined (original_buffer) position (original_text_lth + 1);

		     if input_line_lth = 2 then
			if substr (input_line, 1, 1) = "." then
			     terminator_type = NORMAL_TERMINATION;
			else ;

		     else do;			/* look for escape (\) sequences */
			idx = index (input_line, "\");
			do while (idx ^= 0);	/* ... while there are \'s in line */
			     original_text_lth = original_text_lth + idx - 1;
						/* ... include everything before the \ in the text */
			     input_line_lth = input_line_lth - idx + 1;
			     begin;
				dcl     input_line		character (input_line_lth) unaligned
							defined (original_buffer)
							position (original_text_lth + 1);
				if input_line_lth >= 2 then do;
						/* ... stuff after \ on line */
				     the_character = substr (input_line, 2, 1);
				     if the_character = "f" then do;
					/*** \f...: terminates input and maybe enters the editor */
					if input_line_lth >= 3 then
					     if substr (input_line, 3, 1) = "q" then do;
						/* ... special case \fq to go straight to request loop */
						last_character_of_sequence = 3;
						go to PROCESS_ENTER_REQUEST_LOOP_ESCAPE;
					     end;
					terminator_type = ENTER_EDITOR;
					if input_line_lth >= 4 then do;
						/* ... if anything after \f and before NL */
					     edit_requests_lth = input_line_lth - 3;
					     allocate edit_requests in (rdm_fwd_area) set (edit_requests_ptr);
					     edit_requests = substr (input_line, 3, edit_requests_lth);
					end;
				     end;
				     else if the_character = "q" then do;
					/*** \q or \fq: enter request loop */
					last_character_of_sequence = 2;
PROCESS_ENTER_REQUEST_LOOP_ESCAPE:
					terminator_type = ENTER_REQUEST_LOOP;
					if input_line_lth >= (last_character_of_sequence + 2) then
					     call ssu_$print_message (rfi.sci_ptr, code,
						"Text after ""^a"" ignored.",
						substr (input_line, 1, last_character_of_sequence));
				     end;
				     else if the_character = "c" then do;
					/*** \c: escape the next character */
					substr (input_line, 1, input_line_lth - 2) = substr (input_line, 3);
					original_text_lth = original_text_lth + 1;
					input_line_lth = input_line_lth - 3;
				     end;
				     else do;
					/*** unknown: take it literally */
					original_text_lth = original_text_lth + 1;
					input_line_lth = input_line_lth - 1;
				     end;
				end;
			     end;
			     begin;
				dcl     input_line		character (input_line_lth) unaligned
							defined (original_buffer)
							position (original_text_lth + 1);
				if terminator_type = 0 then
				     idx = index (input_line, "\");
				else idx = 0;
			     end;
			end;
		     end;
		end;
	     end;
	end;

	/*** We have the comment text now ***/

END_OF_INPUT:
	rfi.buffer_ptr = original_buffer_ptr;
	rfi.buffer_used = original_text_lth;
	P_input_terminator_type = terminator_type;	/* tell the caller what to do next */

	if edit_requests_lth ^= 0 then		/* there are some editing requests */
	     P_edit_requests_ptr = edit_requests_ptr;
	else P_edit_requests_ptr = null ();
	P_edit_requests_lth = edit_requests_lth;

	P_fatal_error = "0"b;			/* success */

RETURN_FROM_TERMINAL_INPUT:
	return;
%page;
/* Reads the text of the message from the specified segment */

file_input:
     entry (P_rfi_ptr, P_input_file_ptr, P_input_file_len, P_fatal_error);

	rfi_ptr = P_rfi_ptr;

	rfi.buffer_ptr = P_input_file_ptr;
	rfi.buffer_used = P_input_file_len;

	P_fatal_error = "0"b;			/* success */

	return;
%page;
/* Reformats the message body text using format_document_ with fill-on and align-left modes */

fill_text:
     entry (P_rfi_ptr, P_fill_width, P_fatal_error);

	rfi_ptr = P_rfi_ptr;

	fdoc_buffer_ptr = null ();			/* for cleanup handler */

	on condition (cleanup) call release_fill_buffer ();

	call ssu_$get_temp_segment (rfi.sci_ptr, "fdoc-text", fdoc_buffer_ptr);
	if fdoc_buffer_ptr = null () then call abort_fill_text ();

	original_buffer_ptr = rfi.buffer_ptr;
	original_text_lth = rfi.buffer_used;

	/*** Setup format_document_ options */
	local_fdo.version_number = format_document_version_2;
	local_fdo.indentation = 0;
	local_fdo.line_length = P_fill_width;		/* ... let caller control the width */
	string (local_fdo.switches) = ""b;
	local_fdo.galley_sw = "1"b;			/* ... don't insert page breaks */
	local_fdo.literal_sw = "1"b;			/* ... don't recognize controls in the text */
	local_fdo.dont_compress_sw = "1"b;		/* ... don't compress whitespace */
	local_fdo.dont_break_indented_lines_sw = "1"b;	/* ... don't break lines which are indented */
	local_fdo.syllable_size = 0;

	call format_document_$string (original_text, fdoc_buffer, fdoc_text_lth, addr (local_fdo), code);
	if code = error_table_$recoverable_error then code = 0;
	if code ^= 0 then call abort_fill_text (rfi.sci_ptr, code, "Attempting to reformat the message text.");

	/*** Swap temp-seg ptrs ***/
	rfi.buffer_ptr = fdoc_buffer_ptr;
	fdoc_buffer_ptr = rfi.sci_ptr;		/* for release_fill_buffer */
	rfi.temp_seg_ptr = rfi.buffer_ptr;

	rfi.buffer_used = fdoc_text_lth;

	P_fatal_error = "0"b;			/* success */

RETURN_FROM_FILL_TEXT:
	call release_fill_buffer ();
	return;
%page;
/* Releases the buffer used by the fill operation */

release_fill_buffer:
     procedure ();

	if fdoc_buffer_ptr ^= null () then call ssu_$release_temp_segment (rfi.sci_ptr, fdoc_buffer_ptr);

	return;

     end release_fill_buffer;



/* Prints an error message and aborts execution of the current text manager operation */

abort_fill_text:
     procedure () options (variable);

	call error (RETURN_FROM_FILL_TEXT, cu_$arg_list_ptr ());

abort_terminal_input:
     entry () options (variable);

	call error (RETURN_FROM_TERMINAL_INPUT, cu_$arg_list_ptr ());


error:
     proc (P_return_label, P_alp);

	dcl     P_alp		ptr parameter;	/* arg list ptr */
	dcl     P_return_label	label variable parameter;

	call cu_$generate_call (ssu_$print_message, P_alp);

	if rfi.debug_mode then do;			/* simulate the actions of ssu_$abort_line */
	     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; calling cu_$cl.");
	     call cu_$cl (""b);
	end;

	call fatal_error (P_return_label);

     end error;

     end abort_fill_text;

fatal_error:
     proc (P_return_label);

	dcl     P_return_label	label variable parameter;

	P_fatal_error = "1"b;			/* informs caller that we've already printed the message */

	go to P_return_label;

     end fatal_error;

     end rdm_fwd_text_mgr_;

