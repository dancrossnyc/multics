/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(91-12-04,Huen), approve(91-12-04,MCR8239),
     audit(92-02-13,Zimmerman), install(92-04-24,MR12.5-1013):
     Fix mail_362 - check for new messages after every request line.
                                                   END HISTORY COMMENTS */


/* format: off */

/* The Multics read_mail command: an interactive subsystem to peruse the messages in a mailbox */

/* Written:  3 July 1978 W. Olin Sibert */
/* Modified: 21 June 1979 by G. Palter to fix ACL bug in creation of user's mailbox */
/* Modified: 25 December 1979 by W. Olin Sibert to cause invalid control argument combinations to be diagnosed earlier
      (read_mail bug #133), and to allow specification of more reply options on the command line (read_mail bug #132) */
/* Modified: 11 April 1980 by G. Palter to correct mail_system bug #0178 -- print_mail and read_mail behave poorly when
      invoked as active functions */
/* Modified: 25 April 1980 by G. Palter to implement suggestion #084 -- provide abbrev expansion of request lines; the
      -abbrev, -no_abbrev, and -profile control arguments are added */
/* Modified: 28 April 1980 by G. Palter to call v1_ssu_ entries for version 4.1 subsystems */
/* Modified: 5 May 1980 by W. Olin Sibert to convert to new ssu_ interface */
/* Modified: 31 May 1980 by G. Palter to fix bug #0291 -- read_mail does not recognize the "-no_list" and "-no_print"
      control arguments */
/* Modified: 5 June 1980 by G. Palter to fix bug #0241 -- "read_mail quit" leaves undestroyed invocations of read_mail
      lying around */
/* Modified: 10 June 1980 by G. Palter to implement suggestion #0320 -- read_mail should have a program interrupt handler
      which is active during the execution of "canned" request lines (eg: from "read_mail -print") which causes read_mail
      to enter the request loop */
/* Modified: 27 November 1980 by G. Palter to fix bug #0342 -- specifying a mailbox on the read_mail or print_mail command
      line without using a control argument causes all previous mailbox specifications to be ignored; an error message
      about multiple mailbox specifications should be issued instead.  EG:
	read_mail -user Palter.PDO Sibert.PDO
      will read the mail in Sibert.PDO's mailbox */
/* Modified: 27 January 1981 by G. Palter to fix bug #0354 -- both read_mail and send_mail mis-declare ssu_$set_prompt:
      for read_mail, the declaration used works; for send_mail, use of -no_prompt can cause severe problems */
/* Modified: 30 January 1981 by G. Palter to fix an unreported bug where specifying the "sv.mbx" suffix would fail when
      using the "-save" control argument */
/* Modified: 16 February 1982 by G. Palter for new calling sequences of ssu_$create_invocation and ssu_$set_abbrev_info */
/* Modified: September 1982 by G. Palter to split off print_mail, to support new send_mail fill control, to add
      -debug/-no_debug, and to set proper exec_com suffix and search list */
/* Modified: 7 November 1982 by G. Palter to make rdm_info.reply_options.include_self a three-way switch */
/* Modified: September 1983 by G. Palter to convert to the new mail system interface */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


read_mail:
rdm:
     procedure () options (variable);


dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  profile_pathname character (profile_pathname_lth) unaligned based (profile_pathname_ptr);
dcl  profile_dirname character (168);
dcl  profile_ename character (32);
dcl  (profile_ptr, profile_pathname_ptr) pointer;
dcl  profile_pathname_lth fixed binary (21);
dcl  (enable_abbrev, abbrev_ca_given, profile_pathname_given) bit (1) aligned;

dcl  subsystem_area area aligned based (subsystem_area_ptr);
dcl  subsystem_area_ptr pointer;

dcl  1 local_pcao aligned like parse_ca_options;

dcl  1 local_ai aligned like area_info;

dcl  (sci_ptr, rdm_sci_ptr) pointer;

dcl  have_mailbox bit (1) aligned;			/* ON => have seen a mailbox pathname on the command line */
dcl  mailbox_dirname character (168);
dcl  mailbox_ename character (32);

dcl  mail bit (1) aligned;				/* ON => include ordinary messages from the mailbox */
dcl  interactive_messages bit (1) aligned;		/* ON => include interactive messages from the mailbox */
dcl  display_message_count bit (1) aligned;		/* ON => tell the user how many messages are in the mailbox */
dcl  totals_only bit (1) aligned;			/* ON => exit immediately after printing the message count */
dcl  enter_request_loop_if_no_messages bit (1) aligned;	/* ON => enter the request loop even if mailbox is empty */
dcl  list_messages bit (1) aligned;			/* ON => summarize the messages before the request loop */
dcl  print_messages bit (1) aligned;			/* ON => print the messages before the request loop */
dcl  quit_after_request_line bit (1) aligned;		/* ON => exit immediately after -list/-print/-request done */

dcl  request_line_given bit (1) aligned;		/* ON => user has supplied a request line to execute */
dcl  request_line_ptr pointer;
dcl  request_line_lth fixed binary (21);

dcl  prompt_control bit (2) aligned;			/* controls prompting */
dcl  prompt_string character (64) varying;

dcl  code fixed binary (35);

dcl  READ_MAIL character (32) static options (constant) initial ("read_mail");

dcl  sys_info$max_seg_size fixed binary (19) external;

/* format: off */
dcl (error_table_$bad_conversion, error_table_$inconsistent, error_table_$noarg, error_table_$too_many_args,
     mlsys_et_$mailbox_exists, ssu_et_$program_interrupt, ssu_et_$request_line_aborted, ssu_et_$subsystem_aborted)
	fixed binary (35) external;
/* format: on */

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry () options (variable);
dcl  cu_$af_return_arg entry (fixed binary, pointer, fixed binary (21)) returns (fixed binary (35));
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  cv_dec_check_ entry (character (*), fixed binary (35)) returns (fixed binary (35));
dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  initiate_file_ entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35));
dcl  ioa_ entry () options (variable);
dcl  mail_system_$close_mailbox entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$get_address_pathname entry (pointer, character (*), character (*), character (*), fixed binary (35));
dcl  mlsys_utils_$create_default_mailbox entry (fixed binary (35));
dcl  mlsys_utils_$parse_mailbox_control_args
	entry (pointer, fixed binary, pointer, character (*), character (*), fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  rdm_mailbox_interface_$expunge_messages entry (pointer, bit (1) aligned);
dcl  rdm_mailbox_interface_$open_mailbox entry (pointer, character (*), character (*), pointer, fixed binary (35));
dcl  rdm_mailbox_interface_$read_new_messages entry (pointer, bit (1) aligned, fixed binary (35));
dcl  rdm_set_request_tables_ entry (pointer, fixed binary (35));
dcl  ssu_$abort_subsystem entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$create_invocation
	entry (character (*), character (*), pointer, pointer, character (*), pointer, fixed binary (35));
dcl  ssu_$destroy_invocation entry (pointer);
dcl  ssu_$execute_line entry (pointer, pointer, fixed binary (21), fixed binary (35));
dcl  ssu_$execute_string entry (pointer, character (*), fixed binary (35));
dcl  ssu_$get_area entry (pointer, pointer, character (*), pointer);
dcl  ssu_$listen entry (pointer, pointer, fixed binary (35));
dcl  ssu_$print_blast entry (pointer, pointer, fixed binary, character (*) varying, fixed binary (35));
dcl  ssu_$print_message entry () options (variable);
dcl  ssu_$record_usage entry (pointer, pointer, fixed binary (35));
dcl  ssu_$set_abbrev_info entry (pointer, pointer, pointer, bit (1) aligned);
dcl  ssu_$set_debug_mode entry (pointer, bit (1) aligned);
dcl  ssu_$set_ec_search_list entry (pointer, character (32));
dcl  ssu_$set_ec_suffix entry (pointer, character (32));
dcl  ssu_$set_info_ptr entry (pointer, pointer);
dcl  ssu_$set_procedure entry (ptr, char (*), entry, fixed bin (35));
dcl  ssu_$set_prompt entry (pointer, character (64) varying);
dcl  ssu_$set_prompt_mode entry (pointer, bit (*));
dcl  ssu_$standalone_invocation entry (pointer, character (*), character (*), pointer, entry, fixed binary (35));
dcl  terminate_file_ entry (pointer, fixed binary (24), bit (*), fixed binary (35));

dcl  cleanup condition;

dcl  (addr, codeptr, index, null, string, substr, translate, unspec) builtin;
%page;
/* read_mail: rdm: entry options (variable); */

/* Initialize the read_mail invocation */

	sci_ptr,					/* for cleanup handler */
	     rdm_invocation_ptr, rdm_sci_ptr, profile_ptr = null ();

	on condition (cleanup) call release_data_structures ();

	call ssu_$standalone_invocation (sci_ptr, READ_MAIL, "argument-parse", cu_$arg_list_ptr (),
	     abort_read_mail_command, code);
	if code ^= 0 then do;			/* please forgive the following, but ... */
	     if cu_$af_return_arg (0, (null ()), (0)) = 0 then
		call active_fnc_err_ (code, READ_MAIL, "Can not establish standalone subsystem invocation.");
	     else call com_err_ (code, READ_MAIL, "Can not establish standalone subsystem invocation.");
	     return;
	end;

	call ssu_$arg_count (sci_ptr, n_arguments);	/* aborts if not a command */

	call ssu_$create_invocation (READ_MAIL, (rdm_data_$version), null (), null (), rdm_data_$info_directory,
	     rdm_sci_ptr, code);
	if code ^= 0 then call ssu_$abort_subsystem (sci_ptr, code, "Creating the subsystem invocation.");

	unspec (local_ai) = ""b;
	local_ai.version = area_info_version_1;
	local_ai.zero_on_alloc, local_ai.extend = "1"b;
	call ssu_$get_area (rdm_sci_ptr, addr (local_ai), "", subsystem_area_ptr);

	allocate rdm_invocation in (subsystem_area) set (rdm_invocation_ptr);
	rdm_invocation.type = RDM_INVOCATION;

	rdm_invocation.sci_ptr = rdm_sci_ptr;
	rdm_sci_ptr = null ();			/* don't try to destroy the invocation twice */

	rdm_invocation.area_ptr = subsystem_area_ptr;	/* use the above area for all allocations */

	rdm_invocation.mailbox_ptr,			/* haven't opened the mailbox yet */
	     rdm_invocation.message_list_ptr, rdm_invocation.message_chains = null ();
	rdm_invocation.mailbox_name = "";

	rdm_invocation.current_message = 0;		/* the mailbox isn't open: there can't be a current message */

	rdm_invocation.last_search_buffer.buffer_ptr = null ();
	rdm_invocation.last_search_buffer.buffer_used = 4 * sys_info$max_seg_size;

	call ssu_$set_info_ptr (rdm_invocation.sci_ptr, rdm_invocation_ptr);


/* Initialize default options: reading the user's profile will go here someday */

	begin;					/* avoids problems with duplicate named constants */

dcl  1 local_oo aligned like open_options;

%include mlsys_open_options;

	     have_mailbox = "0"b;			/* haven't seen a mailbox yet */

	     mail = "1"b;				/* assume ordinary mail ... */
	     interactive_messages = "0"b;		/* ... but not interactive messages by default */

	     local_oo.version = OPEN_OPTIONS_VERSION_2;
	     local_oo.sender_selection_mode = ACCESSIBLE_MESSAGES;
						/* read all messages (if possible) */
	     local_oo.message_reading_level = READ_KEYS;	/* will fetch messages one at a time (faster startup) */

	     display_message_count = "1"b;		/* state how many messages before anything else */
	     totals_only = "0"b;			/* do not print just the message count */
	     enter_request_loop_if_no_messages = "0"b;	/* -no_request_loop */

	     list_messages, print_messages, request_line_given, quit_after_request_line = "0"b;
						/* nothing special before the request loop */

	     prompt_control = DEFAULT_PROMPT;		/* use standard prompt */
	     prompt_string = "";

	     enable_abbrev, abbrev_ca_given, profile_pathname_given = "0"b;
						/* abbreviation processing isn't enabled by default */

	     rdm_invocation.acknowledge = "1"b;		/* -acknowledge, -long, -no_debug ... */
	     rdm_invocation.brief, rdm_invocation.debug_mode = "0"b;

	     rdm_invocation.print_options.formatting_mode = DEFAULT_FORMATTING_MODE;
						/* default for the print request is: -header */

	     rdm_invocation.reply_options.line_length = 72;
	     rdm_invocation.reply_options.indentation = 4;/* indent the original (if included) to make it stand out */
	     rdm_invocation.reply_options.include_authors = "1"b;
	     rdm_invocation.reply_options.include_recipients = "0"b;
	     rdm_invocation.reply_options.include_self = DEFAULT_INCLUDE_SELF;
	     rdm_invocation.reply_options.fill_control = DEFAULT_FILL;


/* Process arguments */

	     local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	     local_pcao.logbox_creation_mode,		/* logbox/savebox must already exist */
		local_pcao.savebox_creation_mode = DONT_CREATE_MAILBOX;
	     string (local_pcao.flags) = ""b;
	     local_pcao.abort_on_errors = "1"b;		/* any errors are immediately fatal */
	     local_pcao.validate_addresses = "1"b;	/* insure that any mailbox specified actually exists */

	     do argument_idx = 1 to n_arguments;

		call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);

		if index (argument, "-") = 1 then	/*  a control argument */
		     if (argument = "-mail") | (argument = "-ml") then mail = "1"b;
		     else if (argument = "-no_mail") | (argument = "-nml") then mail = "0"b;

		     else if (argument = "-interactive_messages") | (argument = "-im") then
			interactive_messages = "1"b;
		     else if (argument = "-no_interactive_messages") | (argument = "-nim") then
			interactive_messages = "0"b;

		     else if (argument = "-accessible") | (argument = "-acc") then
			local_oo.sender_selection_mode = ACCESSIBLE_MESSAGES;
		     else if (argument = "-all") | (argument = "-a") then
			local_oo.sender_selection_mode = ALL_MESSAGES;
		     else if argument = "-own" then local_oo.sender_selection_mode = OWN_MESSAGES;
		     else if argument = "-not_own" then local_oo.sender_selection_mode = NOT_OWN_MESSAGES;

		     else if (argument = "-count") | (argument = "-ct") then display_message_count = "1"b;
		     else if (argument = "-no_count") | (argument = "-nct") then display_message_count = "0"b;

		     else if (argument = "-totals") | (argument = "-total") | (argument = "-tt") then
			totals_only = "1"b;

		     else if (argument = "-force") | (argument = "-fc") | (argument = "-request_loop")
			| (argument = "-rql") then
			enter_request_loop_if_no_messages = "1"b;
		     else if (argument = "-no_force") | (argument = "-nfc") | (argument = "-no_request_loop")
			| (argument = "-nrql") then
			enter_request_loop_if_no_messages = "0"b;

		     else if (argument = "-list") | (argument = "-ls") then list_messages = "1"b;
		     else if (argument = "-no_list") | (argument = "-nls") then list_messages = "0"b;

		     else if (argument = "-print") | (argument = "-pr") then print_messages = "1"b;
		     else if (argument = "-no_print") | (argument = "-npr") then print_messages = "0"b;

		     else if (argument = "-request") | (argument = "-rq") then do;
			call get_next_argument ("A string");
			request_line_given = "1"b;
			request_line_ptr = argument_ptr;
			request_line_lth = argument_lth;
		     end;

		     else if argument = "-quit" then quit_after_request_line = "1"b;

		     else if (argument = "-prompt") | (argument = "-pmt") then do;
			call get_next_argument ("A string");
			if argument = "" then	/* equivalent to -no_prompt */
			     prompt_control = NO_PROMPT;
			else do;			/* a real prompt string */
			     prompt_control = USE_PROMPT_STRING;
			     prompt_string = argument;
			end;
		     end;
		     else if (argument = "-no_prompt") | (argument = "-npmt") then prompt_control = NO_PROMPT;

		     else if (argument = "-abbrev") | (argument = "-ab") then enable_abbrev, abbrev_ca_given = "1"b;
		     else if (argument = "-no_abbrev") | (argument = "-nab") then do;
			enable_abbrev = "0"b;
			abbrev_ca_given = "1"b;
		     end;
		     else if (argument = "-profile") | (argument = "-pf") then do;
			call get_next_argument ("A pathname");
			profile_pathname_given = "1"b;/* we'll check it out later */
			profile_pathname_ptr = argument_ptr;
			profile_pathname_lth = argument_lth;
		     end;

		     else if (argument = "-acknowledge") | (argument = "-ack") then rdm_invocation.acknowledge = "1"b;
		     else if (argument = "-no_acknowledge") | (argument = "-nack") then
			rdm_invocation.acknowledge = "0"b;

		     else if (argument = "-brief") | (argument = "-bf") then rdm_invocation.brief = "1"b;
		     else if (argument = "-long") | (argument = "-lg") then rdm_invocation.brief = "0"b;

		     else if (argument = "-debug") | (argument = "-db") then rdm_invocation.debug_mode = "1"b;
		     else if (argument = "-no_debug") | (argument = "-ndb") then rdm_invocation.debug_mode = "0"b;

		     else if (argument = "-long_header") | (argument = "-lghe") then
			rdm_invocation.print_options.formatting_mode = LONG_FORMATTING_MODE;
		     else if (argument = "-header") | (argument = "-he") then
			rdm_invocation.print_options.formatting_mode = DEFAULT_FORMATTING_MODE;
		     else if (argument = "-brief_header") | (argument = "-bfhe") then
			rdm_invocation.print_options.formatting_mode = BRIEF_FORMATTING_MODE;
		     else if (argument = "-no_header") | (argument = "-nhe") then
			rdm_invocation.print_options.formatting_mode = NONE_FORMATTING_MODE;

		     else if (argument = "-line_length") | (argument = "-ll") then do;
			call get_next_argument ("A number");
			rdm_invocation.reply_options.line_length = cv_dec_check_ (argument, code);
			if code ^= 0 then
			     call ssu_$abort_subsystem (sci_ptr, error_table_$bad_conversion, "-line_length ""^a""",
				argument);
			if rdm_invocation.reply_options.line_length < 31 then
			     call ssu_$abort_subsystem (sci_ptr, 0,
				"Reply line length must be greater than 30; not ""^a"".", argument);
		     end;

		     else if (argument = "-indent") | (argument = "-ind") | (argument = "-in") then do;
			call get_next_argument ("A number");
			rdm_invocation.reply_options.indentation = cv_dec_check_ (argument, code);
			if code ^= 0 then
			     call ssu_$abort_subsystem (sci_ptr, error_table_$bad_conversion, "-indent ""^a""",
				argument);
			if (rdm_invocation.reply_options.indentation < 0)
			     | (rdm_invocation.reply_options.indentation > 30) then
			     call ssu_$abort_subsystem (sci_ptr, 0,
				"Reply indentation must be between 0 and 30; not ""^a"".", argument);
		     end;

		     else if (argument = "-include_original") | (argument = "-io") then
			rdm_invocation.reply_options.include_original = "1"b;
		     else if (argument = "-no_include_original") | (argument = "-nio") then
			rdm_invocation.reply_options.include_original = "0"b;

		     else if (argument = "-include_authors") | (argument = "-iat") then
			rdm_invocation.reply_options.include_authors = "1"b;
		     else if (argument = "-no_include_authors") | (argument = "-niat") then
			rdm_invocation.reply_options.include_authors = "0"b;

		     else if (argument = "-include_recipients") | (argument = "-irc") then
			rdm_invocation.reply_options.include_recipients = "1"b;
		     else if (argument = "-no_include_recipients") | (argument = "-nirc") then
			rdm_invocation.reply_options.include_recipients = "0"b;

		     else if (argument = "-include_self") | (argument = "-is") then
			rdm_invocation.reply_options.include_self = INCLUDE_SELF;
		     else if (argument = "-no_include_self") | (argument = "-nis") then
			rdm_invocation.reply_options.include_self = NO_INCLUDE_SELF;

		     else if (argument = "-fill") | (argument = "-fi") then
			rdm_invocation.reply_options.fill_control = FILL;
		     else if (argument = "-no_fill") | (argument = "-nfi") then
			rdm_invocation.reply_options.fill_control = NO_FILL;

		     else go to TRY_ARGUMENT_AS_MAILBOX_PATHNAME;
						/* unknown control argument: maybe a mailbox speciifer? */

		else do;
TRY_ARGUMENT_AS_MAILBOX_PATHNAME:			/* not a control argument: myst be a mailbox specifier */
		     call mlsys_utils_$parse_mailbox_control_args (sci_ptr, argument_idx, addr (local_pcao),
			mailbox_dirname, mailbox_ename, (0));
						/* ... above entrypoint aborts us if anything's wrong */
		     argument_idx = argument_idx - 1;	/* ... do loop will increment it */
		     if have_mailbox then		/* ... this one's OK and we already have one (sigh) */
			call ssu_$abort_subsystem (sci_ptr, error_table_$too_many_args,
			     "Only one mailbox may be specified.");
		     have_mailbox = "1"b;		/* ... now we've got the mailbox to be read */
		end;
	     end;

	     if ^mail & ^interactive_messages then
		call ssu_$abort_subsystem (sci_ptr, error_table_$inconsistent,
		     """-no_mail"" and ""-no_interactive_messages""");

	     if totals_only
		& (enter_request_loop_if_no_messages | list_messages | print_messages | request_line_given
		| quit_after_request_line) then
		call ssu_$abort_subsystem (sci_ptr, error_table_$inconsistent,
		     """-totals"" and^[ ""-request_loop""^]^[ ""-list""^]^[ ""-print""^]^[ ""-request""^]^[ ""-quit""^].",
		     enter_request_loop_if_no_messages, list_messages, print_messages, request_line_given,
		     quit_after_request_line);

	     if quit_after_request_line & ^(list_messages | print_messages | request_line_given) then
		call ssu_$abort_subsystem (sci_ptr, error_table_$noarg,
		     "One of ""-list"", ""-print"", or ""-request"" must be specified with ""-quit"".");


/* If no mailbox was given on the command line, use the user's default mailbox which is created if necessary */

	     if ^have_mailbox then do;
		call mail_system_$get_address_pathname (mlsys_data_$user_default_mailbox_address, mailbox_dirname,
		     mailbox_ename, ((32)" "), code);
		if code ^= 0 then call ssu_$abort_subsystem (sci_ptr, code, "Getting the pathname of your mailbox.");

		call mlsys_utils_$create_default_mailbox (code);
		if code = 0 then			/* just created it ... */
		     call ssu_$print_message (sci_ptr, 0, "Created ^a.", pathname_ (mailbox_dirname, mailbox_ename));
		else if code ^= mlsys_et_$mailbox_exists then
		     call ssu_$abort_subsystem (sci_ptr, code, "Attempting to create your default mailbox. ^a",
			pathname_ (mailbox_dirname, mailbox_ename));
	     end;


/* Complete the read_mail environment */

	     if profile_pathname_given then do;		/* an explicit profile was requested */
		call expand_pathname_$add_suffix (profile_pathname, "profile", profile_dirname, profile_ename, code);
		if code ^= 0 then call ssu_$abort_subsystem (sci_ptr, code, "-profile ""^a""", profile_pathname);
		call initiate_file_ (profile_dirname, profile_ename, R_ACCESS, profile_ptr, (0), code);
		if code ^= 0 then
		     call ssu_$abort_subsystem (sci_ptr, code, "-profile ""^a""",
			pathname_ (profile_dirname, profile_ename));
		if ^abbrev_ca_given then		/* -profile implies -abbrev unless explicit -ab/-nab given */
		     enable_abbrev = "1"b;
	     end;
	     call ssu_$set_abbrev_info (rdm_invocation.sci_ptr, profile_ptr, null (), enable_abbrev);
	     profile_ptr = null ();			/* we'll let ssu_ terminate it for us */

	     call ssu_$set_debug_mode (rdm_invocation.sci_ptr, (rdm_invocation.debug_mode));

	     call rdm_set_request_tables_ (rdm_invocation_ptr, code);
	     if code ^= 0 then call ssu_$abort_subsystem (sci_ptr, code, "Unable to setup request tables.");

	     if prompt_control = USE_PROMPT_STRING then call ssu_$set_prompt (rdm_invocation.sci_ptr, prompt_string);
	     else if prompt_control = NO_PROMPT then call ssu_$set_prompt_mode (rdm_invocation.sci_ptr, DONT_PROMPT);

	     call ssu_$set_ec_suffix (rdm_invocation.sci_ptr, rdm_data_$ec_suffix);
	     call ssu_$set_ec_search_list (rdm_invocation.sci_ptr, rdm_data_$ec_search_list);


/* Open the mailbox, check the salvaged flag, and report the message count */

	     if mail & interactive_messages then	/* want all types of messages */
		local_oo.message_selection_mode = ALL_MESSAGES;
	     else if mail then			/* only want ordinary mail messages */
		local_oo.message_selection_mode = ORDINARY_MESSAGES;
	     else local_oo.message_selection_mode = INTERACTIVE_MESSAGES;
						/* interactive messages only */

	     call rdm_mailbox_interface_$open_mailbox (rdm_invocation_ptr, mailbox_dirname, mailbox_ename,
		addr (local_oo), code);
	     if code ^= 0 then
		call ssu_$abort_subsystem (sci_ptr, code, "Attempting to open ^a.",
		     pathname_ (mailbox_dirname, mailbox_ename));

	     mailbox_ptr = rdm_invocation.mailbox_ptr;	/* will need to access this now */

	     if mailbox.mailbox_type = USER_DEFAULT_MAILBOX then rdm_invocation.mailbox_name = "your mailbox";
	     else if mailbox.mailbox_type = USER_LOGBOX then rdm_invocation.mailbox_name = "your logbox";
	     else rdm_invocation.mailbox_name = pathname_ (mailbox_dirname, mailbox_ename);

	     if mailbox.salvaged then			/* something was probably lost ... */
		if rdm_invocation.brief then
		     call ssu_$print_message (sci_ptr, 0, "Mailbox has been salvaged.");
		else call ssu_$print_message (sci_ptr, 0,
			"Warning: ^a^a has been salvaged since it was last read.^/Some messages may have been lost.",
			translate (substr (rdm_invocation.mailbox_name, 1, 1), "Y", "y"),
			substr (rdm_invocation.mailbox_name, 2));

	     if display_message_count then		/* user wants to know how much is there */
		if mailbox.n_messages = 0 then
		     if rdm_invocation.brief then
			call ioa_ ("No mail.");
		     else call ioa_ ("^[You have no mail^s^;^[You have no messages^;There is no mail^]^]^[ in ^a^].",
			     (mailbox.mailbox_type = USER_DEFAULT_MAILBOX),
			     (mailbox.sender_selection_mode = OWN_MESSAGES),
			     (mailbox.mailbox_type ^= USER_DEFAULT_MAILBOX), rdm_invocation.mailbox_name);
		else if mailbox.n_messages = 1 then
		     if rdm_invocation.brief then
			call ioa_ ("One message.");
		     else call ioa_ (
			     "^[You have one message^s^;^[You have one message^;There is one message^]^]^[ in ^a^].",
			     (mailbox.mailbox_type = USER_DEFAULT_MAILBOX),
			     (mailbox.sender_selection_mode = OWN_MESSAGES),
			     (mailbox.mailbox_type ^= USER_DEFAULT_MAILBOX), rdm_invocation.mailbox_name);
		else /*** if mailbox.n_messages > 1 then */
		     do;
		     if rdm_invocation.brief then
			call ioa_ ("^d messages.", mailbox.n_messages);
		     else call ioa_ ("^[You have^s^;^[You have^;There are^]^] ^d messages^[ in ^a^].",
			     (mailbox.mailbox_type = USER_DEFAULT_MAILBOX),
			     (mailbox.sender_selection_mode = OWN_MESSAGES), mailbox.n_messages,
			     (mailbox.mailbox_type ^= USER_DEFAULT_MAILBOX), rdm_invocation.mailbox_name);
		end;
	end;

	if totals_only |				/* only wanted the message count */
	     ((mailbox.n_messages = 0) & ^enter_request_loop_if_no_messages) then
	     go to RETURN_FROM_READ_MAIL;


/* Mailbox is open and there are messages present: this invocation is, therefore, going to do some real work */

	if rdm_data_$first_invocation then
	     call ssu_$print_blast (rdm_invocation.sci_ptr, codeptr (read_mail), 3, rdm_data_$special_message, (0));
	else call ssu_$record_usage (rdm_invocation.sci_ptr, codeptr (read_mail), (0));

	rdm_data_$first_invocation = "0"b;		/* only issue the blast once per process */


/* Summarize the messages if requested via "-list" */

	if list_messages then do;
	     call ssu_$execute_string (rdm_invocation.sci_ptr, "list all", code);
	     if code = ssu_et_$program_interrupt then go to ENTER_REQUEST_LOOP;
	     else if code = ssu_et_$request_line_aborted then go to EXIT_READ_MAIL_OR_ENTER_REQUEST_LOOP;
	end;


/* Print the messages if requested via "-print" */

	if print_messages then do;
	     call ssu_$execute_string (rdm_invocation.sci_ptr, "print all", code);
	     if code = ssu_et_$program_interrupt then go to ENTER_REQUEST_LOOP;
	     else if code = ssu_et_$request_line_aborted then go to EXIT_READ_MAIL_OR_ENTER_REQUEST_LOOP;
	end;


/* Execute any user-supplied request line and, if "-quit" was not specified, enter the request loop */

	if request_line_given then do;		/* user had some explicit requests */
	     call ssu_$execute_line (rdm_invocation.sci_ptr, request_line_ptr, request_line_lth, code);
	     if code = ssu_et_$program_interrupt then go to ENTER_REQUEST_LOOP;
	     else if code = ssu_et_$subsystem_aborted then go to RETURN_FROM_READ_MAIL;
	end;


EXIT_READ_MAIL_OR_ENTER_REQUEST_LOOP:			/* transfer point if any of the above runs into trouble ... */
	if quit_after_request_line then		/* user asked us to stop even if there were errors ... */
	     call rdm_mailbox_interface_$expunge_messages (rdm_invocation_ptr, ("0"b));

	else do;					/* user wants to get into the request loop ... */
ENTER_REQUEST_LOOP:
	     call ssu_$set_procedure (rdm_invocation.sci_ptr, "post_request_line", post_request_line, code);
	     call ssu_$listen (rdm_invocation.sci_ptr, null (), (0));
     end;

/* Cleanup */

RETURN_FROM_READ_MAIL:
	     call release_data_structures ();

	     return;
%page;


post_request_line:
     procedure ();

	call rdm_mailbox_interface_$read_new_messages (rdm_invocation_ptr, "1"b, (0));
	return;

     end post_request_line;


/* Release any data structures created herein */
release_data_structures:
     procedure ();

dcl  1 local_co aligned like close_options;

	if rdm_invocation_ptr ^= null () then do;	/* destroy the read_mail invocation proper */
	     if rdm_invocation.mailbox_ptr ^= null () then do;
		local_co.version = CLOSE_OPTIONS_VERSION_2;
		string (local_co.flags) = ""b;	/* ... sets perform_deletions off */
		call mail_system_$close_mailbox (rdm_invocation.mailbox_ptr, addr (local_co), (0));
	     end;
	     if rdm_invocation.sci_ptr ^= null () then	/* ... destroying the subsystem releases the area */
		call ssu_$destroy_invocation (rdm_invocation.sci_ptr);
	end;

	if profile_ptr ^= null () then call terminate_file_ (profile_ptr, 0, TERM_FILE_TERM, (0));

	if rdm_sci_ptr ^= null () then call ssu_$destroy_invocation (rdm_sci_ptr);

	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);

	return;

     end release_data_structures;



/* Invoked by ssu_$abort_line and ssu_$abort_subsystem to terminate execution of read_mail */

abort_read_mail_command:
     procedure ();

	go to RETURN_FROM_READ_MAIL;

     end abort_read_mail_command;
%page;
/* Fetches the next argument for control arguments which require values */

get_next_argument:
     procedure (p_string);

dcl  p_string character (*) parameter;

	if argument_idx = n_arguments then
	     call ssu_$abort_subsystem (sci_ptr, error_table_$noarg, "^a after ""^a"".", p_string, argument);

	argument_idx = argument_idx + 1;

	call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);

	return;

     end get_next_argument;
%page;
%include rdm_data;
%page;
%include rdm_invocation;
%page;
%include rdm_message_list;
%page;
%include rdm_message_chains;
%page;
%include mlsys_data;
%page;
%include mlsys_mailbox;
%page;
%include mlsys_close_options;
%page;
%include mlsys_parse_ca_options;
%page;
%include mlsys_format_options;
%page;
%include area_info;
%page;
%include access_mode_values;
%page;
%include terminate_file;
%page;
%include ssu_prompt_modes;
%page;
%include send_mail_options;

     end read_mail;
