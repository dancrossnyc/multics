/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Extended Mail Facility Utilities which support the write, append, and preface requests in read_mail and send_mail */

/* Created:  by W. Olin Sibert */
/* Recoded:  September 1983 by G. Palter */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


emf_writing_util_:
     procedure ();

RETURN_FROM_OPERATION:
	return;					/* not an entrypoint */


/* Aborts the operation in progress */

abort_operation:
     procedure (p_code);

dcl  p_code fixed binary (35) parameter;

	P_code = p_code;
	go to RETURN_FROM_OPERATION;

     end abort_operation;


/* Parameters */

dcl  P_file_ptr pointer parameter;
dcl  P_file_uid bit (36) aligned parameter;
dcl  P_code fixed binary (35) parameter;

dcl  P_sci_ptr pointer parameter;			/* open: -> description of the subsystem invocation */
dcl  P_file_dirname character (*) parameter;		/* open: absolute pathname of containing directory */
dcl  P_file_ename character (*) parameter;		/* open: entryname of the segment */
dcl  P_creation_mode fixed binary parameter;		/* open: what action to take if the segment does not exist */

dcl  P_text character (*) parameter;			/* write: the text to be added to the segment */
dcl  P_insertion_mode fixed binary parameter;		/* write: how to add the text (truncate/append/preface) */


/* Local copies of parameters */

dcl  file_ptr pointer;
dcl  file_uid bit (36) aligned;

dcl  insertion_mode fixed binary;

dcl  code fixed binary (35);


/* Remaining declarations */

dcl  the_file character (file_max_lth) unaligned based (file_ptr);
dcl  file_bit_count fixed binary (24);
dcl  (file_max_lth, file_lth) fixed binary (21);
dcl  file_max_lth_in_words fixed binary (19);

dcl  try_to_create bit (1);
dcl  file_was_created bit (1) aligned;

dcl  insert_position fixed binary (21);

/* format: off */
dcl (emf_et_$insufficient_quota_to_write, emf_et_$insufficient_segment_size, error_table_$action_not_performed,
     error_table_$bad_subr_arg, error_table_$noentry, error_table_$non_matching_uid)
	fixed binary (35) external;
/* format: on */

dcl  command_query_$yes_no entry () options (variable);
dcl  hcs_$get_max_length_seg entry (pointer, fixed binary (19), fixed binary (35));
dcl  hcs_$get_uid_seg entry (pointer, bit (36) aligned, fixed binary (35));
dcl  hcs_$status_mins entry (pointer, fixed binary (2), fixed binary (24), fixed binary (35));
dcl  initiate_file_ entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35));
dcl  initiate_file_$create
	entry (character (*), character (*), bit (*), pointer, bit (1) aligned, fixed binary (24), fixed binary (35));
dcl  mrl_ entry (pointer, fixed binary (21), pointer, fixed binary (21));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$print_message entry () options (variable);
dcl  terminate_file_ entry (pointer, fixed binary (24), bit (*), fixed binary (35));

dcl  record_quota_overflow condition;

dcl  (addcharno, divide, length, null) builtin;
%page;
/* Open the file for writing:  The caller specifies whether the file is to be created if not found with/without asking the
   user's permission and with/without informing the user of the creation */

open:
     entry (P_sci_ptr, P_file_dirname, P_file_ename, P_creation_mode, P_file_ptr, P_file_uid, P_code);

	if (P_creation_mode < DONT_CREATE_FILE) | (P_creation_mode > SILENTLY_CREATE_FILE) then
	     call abort_operation (error_table_$bad_subr_arg);


	if (P_creation_mode = DONT_CREATE_FILE) | (P_creation_mode = QUERY_TO_CREATE_FILE) then do;

/* Try to initiate the file without creating it if the caller doesn't want it created or wants us to ask for permission to
   create it.  If the file doesn't exist, ask the user for permission to create it if appropriate */

	     call initiate_file_ (P_file_dirname, P_file_ename, RW_ACCESS, file_ptr, (0), code);

	     if (code = error_table_$noentry) & (P_creation_mode = QUERY_TO_CREATE_FILE) then do;
		call command_query_$yes_no (try_to_create, 0, ssu_$get_subsystem_and_request_name (P_sci_ptr), "",
		     "Do you wish to create the file ^a?", pathname_ (P_file_dirname, P_file_ename));
		if try_to_create then		/* yes: act like creation mode is to silenty create it */
		     go to INITIATE_OR_CREATE;
		else code = error_table_$action_not_performed;
	     end;

	     if code ^= 0 then call abort_operation (code);

	     file_was_created = "0"b;			/* needed later */
	end;


	else do;

/* Create the file (if necessary), announce the creation if appropriate, and initiate it */

INITIATE_OR_CREATE:
	     call initiate_file_$create (P_file_dirname, P_file_ename, RW_ACCESS, file_ptr, file_was_created, (0), code)
		;

	     if file_was_created & (P_creation_mode = CREATE_AND_ANNOUNCE_FILE) then
		call ssu_$print_message (P_sci_ptr, 0, "Created ^a.", pathname_ (P_file_dirname, P_file_ename));

	     if code ^= 0 then call abort_operation (code);
	end;


/* Finally get the file's UID and return */

	call hcs_$get_uid_seg (file_ptr, file_uid, code);
	if code ^= 0 then do;			/* sigh */
	     if file_was_created then
		call terminate_file_ (file_ptr, 0, TERM_FILE_DELETE, (0));
	     else call terminate_file_ (file_ptr, 0, TERM_FILE_TERM, (0));
	     call abort_operation (code);
	end;

	P_file_ptr = file_ptr;
	P_file_uid = file_uid;
	P_code = 0;				/* success */

	return;
%page;
/* Adds the given text to the file:  The text may be added either at the beginning or end of the file.  The caller may
   request that the file be truncated before adding the text */

write:
     entry (P_file_ptr, P_file_uid, P_text, P_insertion_mode, P_code);

	file_ptr = P_file_ptr;
	insertion_mode = P_insertion_mode;

	if (insertion_mode < TRUNCATE_FILE) | (insertion_mode > PREFACE_FILE) then
	     call abort_operation (error_table_$bad_subr_arg);


/* Verify that the caller's pointer is still valid */

	call hcs_$get_uid_seg (file_ptr, file_uid, code);
	if code ^= 0 then call abort_operation (code);

	if P_file_uid ^= file_uid then call abort_operation (error_table_$non_matching_uid);


/* Determine the file's length and maximum length and whether there is room to perform the requested operation */

	call hcs_$status_mins (file_ptr, (0), file_bit_count, code);
	if code ^= 0 then call abort_operation (code);

	call hcs_$get_max_length_seg (file_ptr, file_max_lth_in_words, code);
	if code ^= 0 then call abort_operation (code);

	if insertion_mode = TRUNCATE_FILE then do;	/* truncation is special: need to ignore above bit count */
	     file_bit_count = 0;
	     call terminate_file_ (file_ptr, 0, TERM_FILE_TRUNC, code);
	     if code ^= 0 then call abort_operation (code);
	end;

	file_lth = divide ((file_bit_count + 8), 9, 21, 0);
	file_max_lth = 4 * file_max_lth_in_words;

	if (file_lth + length (P_text)) > file_max_lth then call abort_operation (emf_et_$insufficient_segment_size);
						/* won't fit */


/* Add the text to the file and update its bit count:  If prefacing, move the file's current content "up" to make room */

	on condition (record_quota_overflow) call abort_operation (emf_et_$insufficient_quota_to_write);

	if (file_lth > 0) & (insertion_mode = PREFACE_FILE) then do;
	     insert_position = 1;			/* put it at the beginning of the file */
	     call mrl_ (file_ptr, file_lth, addcharno (file_ptr, length (P_text)), file_lth);
	end;

	else insert_position = file_lth + 1;		/* put it at the end */

	begin;
dcl  inserted_text character (length (P_text)) unaligned defined (the_file) position (insert_position);
	     inserted_text = P_text;
	end;

	file_bit_count = 9 * (file_lth + length (P_text));/* compute new bit count */

	call terminate_file_ (file_ptr, file_bit_count, TERM_FILE_BC, code);

	P_code = code;				/* indicate success/failure of the set bit count operation */

	return;
%page;
/* Closes the file */

close:
     entry (P_file_ptr, P_file_uid, P_code);

	file_ptr = P_file_ptr;

	call hcs_$get_uid_seg (file_ptr, file_uid, code);
	if code ^= 0 then call abort_operation (code);

	if P_file_uid ^= file_uid then call abort_operation (error_table_$non_matching_uid);

	call terminate_file_ (file_ptr, 0, TERM_FILE_TERM, code);

	P_file_ptr = null ();			/* just give the caller one shot */
	P_code = code;				/* indicate success/failure of the termination */

	return;
%page;
%include emf_writing_modes;
%page;
%include access_mode_values;
%page;
%include terminate_file;

     end emf_writing_util_;
