/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Miscellaneous forward sub-requests */

/* Created: October 1983 by B. Margolin (from sdm_misc_requests_) */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


rdm_fwd_misc_requests_:
     procedure (P_sci_ptr, P_rdm_forward_invocation_ptr);

	return;					/* not an entry */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_rdm_forward_invocation_ptr pointer parameter;


/* Remaining declarations */

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  request_name character (72);
dcl  force bit (1);

/* format: off */
dcl (error_table_$bad_arg, error_table_$badopt, emf_et_$forwarding_aborted)
	fixed binary (35) external;
/* format: on */

dcl  command_query_$yes_no entry () options (variable);
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$abort_subsystem entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);

dcl  index builtin;
%page;
/* The "send" request: exits forwarding sub-request-loop, sending the message. */

send_request:
     entry (P_sci_ptr, P_rdm_forward_invocation_ptr);

	rdm_forward_invocation_ptr = P_rdm_forward_invocation_ptr;

	rdm_forward_invocation.abort_code = 0;
	call ssu_$abort_subsystem (P_sci_ptr, 0);	/* Never returns */
%page;
/* The "quit" request: exits forwarding sub-request-loop without sending the
   message.  The user is queried for permission to exit. */

quit_request:
     entry (P_sci_ptr, P_rdm_forward_invocation_ptr);

	rdm_forward_invocation_ptr = P_rdm_forward_invocation_ptr;

	request_name = ssu_$get_subsystem_and_request_name (P_sci_ptr);

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	rdm_forward_invocation.abort_code = 0;		/* assume message was processed before exit */

	force = "0"b;				/* ask user by default */

	do argument_idx = 1 to n_arguments;
	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);
	     if index (argument, "-") = 1 then
		if (argument = "-force") | (argument = "-fc") then force = "1"b;
		else if (argument = "-no_force") | (argument = "-nfc") then force = "0"b;
		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, "^a", argument);
	     else call ssu_$abort_line (P_sci_ptr, error_table_$bad_arg, "This request only accepts control arugments.")
		     ;
	end;

	if ^force then				/* ... need the user's permission */
	     call command_query_$yes_no (force, 0, request_name, "",
		"The forwarded message has not been sent.^/Do you still wish to quit?");
	if ^force then call ssu_$abort_line (P_sci_ptr, 0);

	rdm_forward_invocation.abort_code = emf_et_$forwarding_aborted;
	call ssu_$abort_subsystem (P_sci_ptr, 0);	/* never returns */
%page;
%include rdm_fwd_invocation;

     end rdm_fwd_misc_requests_;
