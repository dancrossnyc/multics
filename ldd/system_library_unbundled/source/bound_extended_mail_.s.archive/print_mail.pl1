/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(89-04-18,Lee), approve(89-05-10,MCR8103),
     audit(89-07-18,LZimmerman), install(89-10-02,MR12.3-1079):
     phx20253, phx18857, Mail 454 - modified the contents of the blast message
     to remove references to EXL; reformatting.
                                                   END HISTORY COMMENTS */


/* format: off */

/* The Multics print_mail command: prints the messages in a mailbox and asks whether to delete each one after printing */

/* Created: September 1982 by G. Palter by merging print_mail_command_ and the appropriate code from read_mail */
/* Modified: 16 November 1979 by G. Palter to honor acknowledgements */
/* Modified: 6 August 1981 by G. Palter to set query_info.version and recognize "y" and "n" now that command_query_
      recognizes them */
/* Modified: June 1983 by G. Palter to convert to new mail system interface and remove all dependencies on read_mail as a
      prelude to possible future bundling */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


print_mail:
prm:
     procedure () options (variable);


dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  1 local_oo aligned like open_options;
dcl  1 local_pcao aligned like parse_ca_options;
dcl  1 local_fmo aligned like format_message_options;

dcl  sci_ptr pointer;

dcl  have_mailbox bit (1) aligned;			/* ON => we've got a mailbox already */
dcl  (mailbox_dirname, mailbox_printing_name) character (168);
dcl  mailbox_ename character (32);

dcl  formatting_mode fixed binary;
dcl  (acknowledge, brief, display_message_count, interactive_messages, list, mail, reverse) bit (1) aligned;

dcl  (first_message, last_message, current_message, direction) fixed binary;
dcl  processing_message bit (1) aligned;
dcl  disposition character (32) varying;

dcl  code fixed binary (35);

dcl  first_invocation bit (1) aligned static initial ("1"b);

dcl  PRINT_MAIL character (32) static options (constant) initial ("print_mail");
dcl  PRINT_MAIL_VERSION character (32) static options (constant) initial ("3.0a");
dcl  PRINT_MAIL_SPECIAL_MESSAGE character (256) varying static options (constant) initial ("");

dcl  mlsys_data_$user_default_mailbox_address pointer external;

dcl  iox_$user_output pointer external;

/* format: off */
dcl (error_table_$inconsistent, error_table_$too_many_args, mlsys_et_$cant_be_deleted, mlsys_et_$mailbox_exists)
	fixed binary (35) external;
/* format: on */

dcl  active_fnc_err_ entry () options (variable);
dcl  com_err_ entry () options (variable);
dcl  command_query_ entry () options (variable);
dcl  continue_to_signal_ entry (fixed binary (35));
dcl  cu_$af_return_arg entry (fixed binary, pointer, fixed binary (21)) returns (fixed binary (35));
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  find_condition_info_ entry (pointer, pointer, fixed binary (35));
dcl  ioa_ entry () options (variable);
dcl  iox_$control entry (pointer, character (*), pointer, fixed binary (35));
dcl  mail_system_$acknowledge_message entry (pointer, fixed binary (35));
dcl  mail_system_$close_mailbox entry (pointer, pointer, fixed binary (35));
dcl  mail_system_$expunge_messages entry (pointer, fixed binary (35));
dcl  mail_system_$get_address_pathname entry (pointer, character (*), character (*), character (*), fixed binary (35));
dcl  mail_system_$mark_message_for_deletion entry (pointer, fixed binary (35));
dcl  mail_system_$open_mailbox entry (character (*), character (*), pointer, character (8), pointer, fixed binary (35));
dcl  mail_system_$read_message entry (pointer, fixed binary, fixed binary (35));
dcl  mail_system_$unmark_message_for_deletion entry (pointer, fixed binary (35));
dcl  mlsys_utils_$create_default_mailbox entry (fixed binary (35));
dcl  mlsys_utils_$parse_mailbox_control_args
	entry (pointer, fixed binary, pointer, character (*), character (*), fixed binary (35));
dcl  mlsys_utils_$print_message entry (pointer, pointer, pointer, fixed binary (35));
dcl  mlsys_utils_$print_message_summary
	entry (pointer, fixed binary, bit (1) aligned, fixed binary, pointer, fixed binary (35));
dcl  mlsys_utils_$print_message_summary_header entry (fixed binary, pointer, fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$destroy_invocation entry (pointer);
dcl  ssu_$print_blast entry (pointer, pointer, fixed binary, character (*) varying, fixed binary (35));
dcl  ssu_$print_message entry () options (variable);
dcl  ssu_$record_usage entry (pointer, pointer, fixed binary (35));
dcl  ssu_$set_debug_mode entry (pointer, bit (1) aligned);
dcl  ssu_$standalone_invocation entry (pointer, character (*), character (*), pointer, entry, fixed binary (35));

dcl  (cleanup, program_interrupt, sub_error_) condition;

dcl  (addr, codeptr, index, length, null, string, substr, translate) builtin;
%page;
/* print_mail: prm: entry options (variable); */

	sci_ptr, mailbox_ptr = null ();		/* for cleanup handler */

	on condition (cleanup) call release_data_structures ();

	call ssu_$standalone_invocation (sci_ptr, PRINT_MAIL, PRINT_MAIL_VERSION, cu_$arg_list_ptr (),
	     abort_print_mail_command, code);
	if code ^= 0 then do;			/* please forgive the following, but ... */
	     if cu_$af_return_arg (0, (null ()), (0)) = 0 then
		call active_fnc_err_ (code, PRINT_MAIL, "Can not establish standalone subsystem invocation.");
	     else call com_err_ (code, PRINT_MAIL, "Can not establish standalone subsystem invocation.");
	     return;
	end;

	call ssu_$arg_count (sci_ptr, n_arguments);	/* will abort if not a command */


/* Initialize default options: reading the user's profile will go here someday */

	have_mailbox = "0"b;			/* haven't seen a mailbox yet */

	local_oo.version = OPEN_OPTIONS_VERSION_2;
	local_oo.sender_selection_mode = ACCESSIBLE_MESSAGES;
						/* read all messages (if possible) */
	local_oo.message_reading_level = READ_KEYS;	/* will fetch messages one at a time (faster startup) */

	mail, interactive_messages = "1"b;		/* assume ordinary mail and interactive messages by default */
	acknowledge, display_message_count = "1"b;	/* -acknowledge, -count */
	brief, list, reverse = "0"b;			/* -long, -no_list, -no_reverse */

	local_fmo.version = FORMAT_MESSAGE_OPTIONS_VERSION_1;
	local_fmo.line_length = 0;			/* use line length of the terminal */
	local_fmo.include_body = "1"b;
	formatting_mode = DEFAULT_FORMATTING_MODE;	/* default formatting (-header) */


/* Process arguments */

	local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	local_pcao.logbox_creation_mode,		/* logbox/savebox must already exist */
	     local_pcao.savebox_creation_mode = DONT_CREATE_MAILBOX;
	string (local_pcao.flags) = ""b;
	local_pcao.abort_on_errors = "1"b;		/* any errors are immediately fatal */
	local_pcao.validate_addresses = "1"b;		/* insure that any mailbox specified actually exists */

	do argument_idx = 1 to n_arguments;

	     call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);

	     if index (argument, "-") = 1 then		/*  a control argument */
		if (argument = "-brief") | (argument = "-bf") then brief = "1"b;
		else if (argument = "-long") | (argument = "-lg") then brief = "0"b;

		else if (argument = "-long_header") | (argument = "-lghe") then
		     formatting_mode = LONG_FORMATTING_MODE;
		else if (argument = "-header") | (argument = "-he") then formatting_mode = DEFAULT_FORMATTING_MODE;
		else if (argument = "-brief_header") | (argument = "-bfhe") then
		     formatting_mode = BRIEF_FORMATTING_MODE;
		else if (argument = "-no_header") | (argument = "-nhe") then formatting_mode = NONE_FORMATTING_MODE;

		else if (argument = "-acknowledge") | (argument = "-ack") then acknowledge = "1"b;
		else if (argument = "-no_acknowledge") | (argument = "-nack") then acknowledge = "0"b;

		else if (argument = "-interactive_messages") | (argument = "-im") then interactive_messages = "1"b;
		else if (argument = "-no_interactive_messages") | (argument = "-nim") then
		     interactive_messages = "0"b;

		else if (argument = "-mail") | (argument = "-ml") then mail = "1"b;
		else if (argument = "-no_mail") | (argument = "-nml") then mail = "0"b;

		else if (argument = "-count") | (argument = "-ct") then display_message_count = "1"b;
		else if (argument = "-no_count") | (argument = "-nct") then display_message_count = "0"b;

		else if (argument = "-reverse") | (argument = "-rv") then reverse = "1"b;
		else if (argument = "-no_reverse") | (argument = "-nrv") then reverse = "0"b;

		else if (argument = "-list") | (argument = "-ls") then list = "1"b;
		else if (argument = "-no_list") | (argument = "-nls") then list = "0"b;

		else if (argument = "-accessible") | (argument = "-acc") then
		     local_oo.sender_selection_mode = ACCESSIBLE_MESSAGES;
		else if (argument = "-all") | (argument = "-a") then local_oo.sender_selection_mode = ALL_MESSAGES;
		else if argument = "-own" then local_oo.sender_selection_mode = OWN_MESSAGES;
		else if argument = "-not_own" then local_oo.sender_selection_mode = NOT_OWN_MESSAGES;

		else if (argument = "-debug") | (argument = "-db") then call ssu_$set_debug_mode (sci_ptr, "1"b);
		else if (argument = "-no_debug") | (argument = "-ndb") then call ssu_$set_debug_mode (sci_ptr, "0"b);

		else go to TRY_ARGUMENT_AS_MAILBOX_PATHNAME;
						/* unknown control argument: maybe a mailbox specifier? */

	     else do;
TRY_ARGUMENT_AS_MAILBOX_PATHNAME:			/* not a control argument: must be a mailbox specifier */
		call mlsys_utils_$parse_mailbox_control_args (sci_ptr, argument_idx, addr (local_pcao),
		     mailbox_dirname, mailbox_ename, (0));
						/* ... above entrypoint aborts us if anything's wrong */
		argument_idx = argument_idx - 1;	/* ... do loop will increment it */
		if have_mailbox then		/* ... this one's OK and we already have one (sigh) */
		     call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "Only one mailbox may be specified.");
		have_mailbox = "1"b;		/* ... now we've got the mailbox to be printed */
	     end;
	end;

	if ^mail & ^interactive_messages then
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent, """-no_mail"" and ""-no_interactive_messages""");

	if mail & interactive_messages then		/* want all types of messages */
	     local_oo.message_selection_mode = ALL_MESSAGES;
	else if mail then				/* only want ordinary mail messages */
	     local_oo.message_selection_mode = ORDINARY_MESSAGES;
	else local_oo.message_selection_mode = INTERACTIVE_MESSAGES;
						/* interactive messages only */

	if formatting_mode = BRIEF_FORMATTING_MODE then do;
	     local_fmo.envelope_formatting_mode = NONE_FORMATTING_MODE;
	     local_fmo.header_formatting_mode, local_fmo.redistributions_list_formatting_mode = BRIEF_FORMATTING_MODE;
	end;
	else local_fmo.envelope_formatting_mode, local_fmo.header_formatting_mode,
		local_fmo.redistributions_list_formatting_mode = formatting_mode;


/* If no mailbox was given on the command line, use the user's default mailbox which is created if necessary */

	if ^have_mailbox then do;
	     call mail_system_$get_address_pathname (mlsys_data_$user_default_mailbox_address, mailbox_dirname,
		mailbox_ename, ((32)" "), code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Getting the pathname of your mailbox.");

	     call mlsys_utils_$create_default_mailbox (code);
	     if code = 0 then			/* just created it ... */
		call ssu_$print_message (sci_ptr, 0, "Created ^a.", pathname_ (mailbox_dirname, mailbox_ename));
	     else if code ^= mlsys_et_$mailbox_exists then
		call ssu_$abort_line (sci_ptr, code, "Attempting to create your default mailbox. ^a",
		     pathname_ (mailbox_dirname, mailbox_ename));
	end;


/* Open the mailbox, check the salvaged flag, and report the message count */

	call mail_system_$open_mailbox (mailbox_dirname, mailbox_ename, addr (local_oo), MAILBOX_VERSION_2, mailbox_ptr,
	     code);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, code, "Attempting to open ^a.", pathname_ (mailbox_dirname, mailbox_ename));

	if mailbox.mailbox_type = USER_DEFAULT_MAILBOX then mailbox_printing_name = "your mailbox";
	else if mailbox.mailbox_type = USER_LOGBOX then mailbox_printing_name = "your logbox";
	else mailbox_printing_name = pathname_ (mailbox_dirname, mailbox_ename);

	if mailbox.salvaged then			/* something was probably lost ... */
	     if brief then
		call ssu_$print_message (sci_ptr, 0, "Mailbox has been salvaged.");
	     else call ssu_$print_message (sci_ptr, 0,
		     "Warning: ^a^a has been salvaged since it was last read.^/Some messages may have been lost.",
		     translate (substr (mailbox_printing_name, 1, 1), "Y", "y"), substr (mailbox_printing_name, 2));

	if display_message_count then			/* user wants to know how much is there */
	     if mailbox.n_messages = 0 then
		if brief then
		     call ioa_ ("No mail.");
		else call ioa_ ("^[You have no mail^s^;^[You have no messages^;There is no mail^]^]^[ in ^a^].",
			(mailbox.mailbox_type = USER_DEFAULT_MAILBOX),
			(mailbox.sender_selection_mode = OWN_MESSAGES),
			(mailbox.mailbox_type ^= USER_DEFAULT_MAILBOX), mailbox_printing_name);
	     else if mailbox.n_messages = 1 then
		if brief then
		     call ioa_ ("One message.");
		else call ioa_ (
			"^[You have one message^s^;^[You have one message^;There is one message^]^]^[ in ^a^].",
			(mailbox.mailbox_type = USER_DEFAULT_MAILBOX),
			(mailbox.sender_selection_mode = OWN_MESSAGES),
			(mailbox.mailbox_type ^= USER_DEFAULT_MAILBOX), mailbox_printing_name);
	     else /*** if mailbox.n_messages > 1 then */
		do;
		if brief then
		     call ioa_ ("^d messages.", mailbox.n_messages);
		else call ioa_ ("^[You have^s^;^[You have^;There are^]^] ^d messages^[ in ^a^].",
			(mailbox.mailbox_type = USER_DEFAULT_MAILBOX),
			(mailbox.sender_selection_mode = OWN_MESSAGES), mailbox.n_messages,
			(mailbox.mailbox_type ^= USER_DEFAULT_MAILBOX), mailbox_printing_name);
	     end;

	if mailbox.n_messages = 0 then go to RETURN_FROM_PRINT_MAIL;
						/* mailbox is empty: nothing else to do */


/* Mailbox is open and there are messages present: this invocation is, therefore, going to do some real work */

	if first_invocation then
	     call ssu_$print_blast (sci_ptr, codeptr (print_mail), 3, PRINT_MAIL_SPECIAL_MESSAGE, (0));
	else call ssu_$record_usage (sci_ptr, codeptr (print_mail), (0));
	first_invocation = "0"b;

	if reverse then do;				/* go backwards through the messages */
	     first_message = mailbox.n_messages;
	     last_message = 1;
	     direction = -1;
	end;
	else do;					/* go forward through the messages */
	     first_message = 1;
	     last_message = mailbox.n_messages;
	     direction = 1;
	end;


/* Summarize the messages if requested via "-list" */

	if list then do;
	     call mlsys_utils_$print_message_summary_header (0, iox_$user_output, code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Printing listing header line.");

	     do current_message = first_message to last_message by direction;
		call mail_system_$read_message (mailbox_ptr, current_message, code);
		if code ^= 0 then			/* couldn't read the message */
		     call ssu_$abort_line (sci_ptr, code, "Reading message #^d from ^a.", current_message,
			mailbox_printing_name);
		message_ptr = mailbox.messages (current_message).message_ptr;
		call mlsys_utils_$print_message_summary (message_ptr, current_message, "0"b, 0, iox_$user_output,
		     code);
		if code ^= 0 then
		     call ssu_$abort_line (sci_ptr, code, "Printing listing of message #^d.", current_message);
	     end;
	end;
%page;
/* Main processing loop: print a message and ask user for disposition */

	query_info.version = query_info_version_5;

	processing_message = "0"b;			/* handler only valid when playing with a message */

	on condition (program_interrupt)
	     begin;
	     if processing_message then
		go to ASK_MESSAGE_DISPOSITION;
	     else call continue_to_signal_ ((0));
	end;


	do current_message = first_message to last_message by direction;

REPRINT_THE_MESSAGE:
	     if mailbox.messages (current_message).message_ptr = null () then do;
		call mail_system_$read_message (mailbox_ptr, current_message, code);
		if code ^= 0 then
		     call ssu_$abort_line (sci_ptr, code,
			"Reading message #^d from ^a.  No messages will be deleted.", current_message,
			mailbox_printing_name);
	     end;

	     message_ptr = mailbox.messages (current_message).message_ptr;

	     processing_message = "1"b;		/* now OK to ask the disposition */

	     /*** following ioa_ call is OK until messages appear with sections that aren't preformatted */
	     call ioa_ ("^/ #^d^[ (^d line^[s^] in body)^]:", current_message, (message.total_lines ^= -1),
		message.total_lines, (message.total_lines ^= 1));
	     call mlsys_utils_$print_message (message_ptr, addr (local_fmo), iox_$user_output, code);
	     if code ^= 0 then
		call ssu_$abort_line (sci_ptr, code, "Attempting to print message #^d.  No messages will be deleted.",
		     current_message);
	     call ioa_ (" ---(^d)---", current_message);
	     call iox_$control (iox_$user_output, "reset_more", null (), (0));

	     if acknowledge & message.must_be_acknowledged then
		call mail_system_$acknowledge_message (message_ptr, (0));

ASK_MESSAGE_DISPOSITION:
	     call command_query_ (addr (query_info), disposition, PRINT_MAIL, "Delete #^d?", current_message);

	     if disposition = "y" then disposition = "yes";
	     else if disposition = "n" then disposition = "no";
	     else if disposition = "q" then disposition = "quit";
	     else if (disposition = "print") | (disposition = "pr") | (disposition = "p") then disposition = "reprint";

	     if disposition = "yes" then do;		/* mark the message for deletion */
		if message.can_be_deleted then
		     call mail_system_$mark_message_for_deletion (message_ptr, code);
		else code = mlsys_et_$cant_be_deleted;
		if code ^= 0 then			/* ... couldn't delete it */
		     if code = mlsys_et_$cant_be_deleted then
			call ssu_$print_message (sci_ptr, 0,
			     "Insufficient access to delete message #^d.  Continuing to next message.",
			     current_message);
		     else call ssu_$abort_line (sci_ptr, code,
			     "Attempting to delete message #^d.  No messages will be deleted.", current_message);
	     end;

	     else if disposition = "no" then		/* do not delete this message */
		if message.marked_for_deletion then do; /* ... and somehow they changed their mind */
		     call mail_system_$unmark_message_for_deletion (message_ptr, code);
		     if code ^= 0 then
			call ssu_$abort_line (sci_ptr, code,
			     "Attempting to retrieve message #^d.  No messages will be deleted.", current_message);
		end;
		else ;				/* ... but it's not marked for deletion anyway */

	     else if disposition = "reprint" then	/* reprint the message and ask again */
		go to REPRINT_THE_MESSAGE;

	     else if disposition = "quit" then		/* delete marked messages and exit */
		go to DELETE_MESSAGES;

	     else if disposition = "abort" then		/* exit without deleting any marked messages */
		go to RETURN_FROM_PRINT_MAIL;

	     else if disposition = "?" then do;
		call ioa_ ("Acceptable answers and meanings:");
		call ioa_ ("^3xyes^15tMark this message for deletion.");
		call ioa_ ("^3xno^15tLeave this message untouched.");
		call ioa_ ("^3xreprint^15tRe-print the most recent message.");
		call ioa_ ("^3xquit^15tExit print_mail and delete all message marked for deletion.");
		call ioa_ ("^3xabort^15tExit print_mail without deleting any messages.");
		call ioa_ ("^3x?^15tPrint this list.");
		call ioa_ ("Use the program_interrupt command after interrupting the printing of a message.");
		go to ASK_MESSAGE_DISPOSITION;
	     end;

	     else do;				/* unknown answer */
		call ssu_$print_message (sci_ptr, 0, "Unrecognized answer ""^a"".  Type ""?"" for a request list.",
		     disposition);
		go to ASK_MESSAGE_DISPOSITION;
	     end;

	     processing_message = "0"b;		/* done with this message: shut off pi handler */
	end;
%page;
/* User exited the main loop either by "quit" or reading all messages: delete any messages marked for deletion */

DELETE_MESSAGES:
	processing_message = "0"b;			/* make sure this is off */

	on condition (sub_error_)
	     begin;				/* in case something goes wrong while deleting */

dcl  1 ci aligned like condition_info;

	     ci.version = condition_info_version_1;
	     call find_condition_info_ (null (), addr (ci), (0));

	     sub_error_info_ptr = ci.info_ptr;
	     if sub_error_info.name ^= "mail_system_" then do;
		call continue_to_signal_ ((0));	/* not being reported by the mail system */
		go to CONTINUE_FROM_HANDLER;
	     end;

	     delete_error_info_ptr = sub_error_info.info_ptr;

	     call ssu_$print_message (sci_ptr, delete_error_info.code,
		"Unable to delete message #^d.^[  ^a^]  Deletion of other messages continues.",
		delete_error_info.message_number, (length (delete_error_info.additional_info) > 0),
		delete_error_info.additional_info);
	     go to CALL_EXPUNGE_MESSAGES;

CONTINUE_FROM_HANDLER:
	end;

CALL_EXPUNGE_MESSAGES:
	call mail_system_$expunge_messages (mailbox_ptr, code);

	revert condition (sub_error_);
%page;
/* User exited the mail loop via "abort": do not delete any messages; also the target of error transfers */

RETURN_FROM_PRINT_MAIL:
	processing_message = "0"b;			/* make sure this is off */

	call release_data_structures ();

	return;



/* Release any data structures created herein */

release_data_structures:
     procedure ();

dcl  1 local_co aligned like close_options;

	if mailbox_ptr ^= null () then do;		/* close the mailbox (and don't delete anything) */
	     local_co.version = CLOSE_OPTIONS_VERSION_2;
	     string (local_co.flags) = ""b;		/* ... sets perform_deletions off */
	     call mail_system_$close_mailbox (mailbox_ptr, addr (local_co), (0));
	end;

	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);

	return;

     end release_data_structures;



/* Invoked by ssu_$abort_line and ssu_$abort_subsystem to terminate execution of print_mail */

abort_print_mail_command:
     procedure ();

	go to RETURN_FROM_PRINT_MAIL;

     end abort_print_mail_command;
%page;
%include mlsys_mailbox;
%page;
%include mlsys_message;
%page;
%include mlsys_open_options;

%include mlsys_delete_error_info;

%include mlsys_close_options;
%page;
%include mlsys_parse_ca_options;
%page;
%include mlsys_format_options;
%page;
%include query_info;
%page;
%include condition_info;

%include sub_error_info;

%include condition_info_header;

     end print_mail;
