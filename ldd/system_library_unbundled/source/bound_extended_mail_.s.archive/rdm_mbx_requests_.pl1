/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-03-21,Blair), approve(88-03-21,MCR7842),
     audit(88-06-29,Lippard), install(88-07-26,MR12.2-1069):
     Look for the savebox using the mlsys search_paths before querying
     the user for whether or not he wishes to create a new mbx on a save
     request.
  2) change(89-04-07,Lee), approve(89-05-10,MCR8104),
     audit(89-07-18,LZimmerman), install(89-10-02,MR12.3-1079):
     phx19099, phx15783, Mail 457 - added additional message_type parameter to
     call to rdm_message_mark_mgr_$mark_current_message to catch use of "-odl"
     with the current message.
  3) change(89-04-11,Lee), approve(89-05-10,MCR8104),
     audit(89-07-18,LZimmerman), install(89-10-02,MR12.3-1079):
     phx18564, phx17540, phx17353, Mail 446 - the new entry set_new_current_msg
     in rdm_mailbox_interface_ is now called when the current message is
     changed to guarantee that the new current message is never a deleted
     message; reformatting.
                                                   END HISTORY COMMENTS */


/* format: off */

/* The read_mail log, save, and copy requests */

/* Created:  October 1983 by G. Palter from sdm_mbx_requests_ */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


rdm_mbx_requests_:
     procedure (P_sci_ptr, P_rdm_invocation_ptr);

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_rdm_invocation_ptr pointer parameter;


/* Remaining declarations */

dcl  message_specifier_idxs (n_message_specifiers_allocated) fixed binary based (message_specifier_idxs_ptr);
dcl  message_specifier_idxs_ptr pointer;
dcl  (n_message_specifiers_allocated, n_message_specifiers) fixed binary;
dcl  message_type fixed binary;			/* all/only deleted/only non-deleted */

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  error_table_$noentry fixed bin (35) ext static;
dcl  mbx_pathname character (mbx_pathname_lth) unaligned based (mbx_pathname_ptr);
dcl  mbx_pathname_ptr pointer;
dcl  mbx_pathname_lth fixed binary (21);

dcl  mbx_dirname character (168);
dcl  mbx_ename character (32);

dcl  saved_rdm_sci_ptr pointer;
dcl  is_original_request bit (1) aligned;		/* ON => a request executed from within send_mail */

dcl  (delete_after_processing, reverse_processing, have_pathname) bit (1) aligned;
dcl  try_to_create bit (1);

dcl  code fixed binary (35);

/* format: off */
dcl (error_table_$badopt, error_table_$nostars, mlsys_et_$logbox_created, mlsys_et_$no_savebox, mlsys_et_$savebox_created,
     ssu_et_$unimplemented_request)
	fixed binary (35) external;
/* format: on */

dcl  check_star_name_$entry entry (character (*), fixed binary (35));
dcl  command_query_$yes_no entry () options (variable);
dcl  cu_$grow_stack_frame entry (fixed binary (19), pointer, fixed binary (35));
dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  suffixed_name_$make entry (char (*), char (*), char (32), fixed bin (35));
dcl  search_paths_$find_dir entry (char (*), ptr, char (*), char (*), char (*), fixed bin (35));
dcl  mail_system_$copy_message entry (pointer, character (*), character (*), fixed binary (35));
dcl  mail_system_$get_address_pathname entry (pointer, character (*), character (*), character (*), fixed binary (35));
dcl  mail_system_$log_message entry (pointer, bit (1) aligned, fixed binary (35));
dcl  mail_system_$save_message entry (pointer, character (*), character (*), bit (1) aligned, fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  rdm_mailbox_interface_$delete_messages entry (pointer, bit (1) aligned);
dcl  rdm_mailbox_interface_$mark_processed_and_acknowledge entry (pointer, fixed binary);
dcl  rdm_mailbox_interface_$read_message entry (pointer, fixed binary, pointer, fixed binary (35));
dcl  rdm_mailbox_interface_$set_new_current_msg entry (ptr, fixed binary, fixed binary);
dcl  rdm_message_mark_mgr_$clear_marked_messages entry (pointer);
dcl  rdm_message_mark_mgr_$mark_current_message entry (pointer, fixed binary);
dcl  rdm_message_mark_mgr_$mark_messages
	entry (pointer, pointer, fixed binary (21), fixed binary, bit (*), fixed binary (35));
dcl  rdm_message_mark_mgr_$remark_original_messages entry (pointer);
dcl  rdm_message_mark_mgr_$validate_message_specifier
	entry (pointer, pointer, fixed binary (21), fixed binary, bit (*), fixed binary (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_request_name entry (pointer) returns (character (32));
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$print_message entry () options (variable);

dcl  cleanup condition;

dcl  (index, length, null, reverse, search, size) builtin;
%page;
/* The "log" request: places a copy of the specified messages into the user's logbox which is created if necessary */

log_request:
     entry (P_sci_ptr, P_rdm_invocation_ptr);

	call setup_request ("1"b);			/* may be a send_mail original request */

	saved_rdm_sci_ptr = rdm_invocation.sci_ptr;	/* for cleanup handler */

	on condition (cleanup)
	     begin;
	     rdm_invocation.sci_ptr = saved_rdm_sci_ptr;
	end;

	rdm_invocation.sci_ptr = P_sci_ptr;		/* be sure to not abort the reply request by accident */

	call process_arguments ("0"b);		/* don't allow any pathnames */

	call mark_appropriate_messages ();		/* determine which messages to process */

	call process_messages (log_the_message);	/* log them */

	rdm_invocation.sci_ptr = saved_rdm_sci_ptr;

	return;



/* Invoked by process_messages to actually log the given message */

log_the_message:
     procedure (p_message_number, p_message_ptr);

dcl  p_message_number fixed binary parameter;
dcl  p_message_ptr pointer parameter;

	call mail_system_$log_message (p_message_ptr, "1"b /* create if not found */, code);
	if code = mlsys_et_$logbox_created then do;	/* announce that we just created the user's logbox */
	     call mail_system_$get_address_pathname (mlsys_data_$user_logbox_address, mbx_dirname, mbx_ename, ((32)" "),
		(0));
	     call ssu_$print_message (P_sci_ptr, 0, "Created ^a.", pathname_ (mbx_dirname, mbx_ename));
	     code = 0;				/* ... make the code indicate success */
	end;

	if code ^= 0 then
	     call ssu_$abort_line (P_sci_ptr, code, "Adding message #^d to your logbox.", p_message_number);

	return;

     end log_the_message;
%page;
/* The "save" request: places a copy of the specified messages into the specified savebox; the user is queried for
   permission to create the savebox if it does not exist */

save_request:
     entry (P_sci_ptr, P_rdm_invocation_ptr);

	call setup_request ("1"b);			/* may be a send_mail original request */

	saved_rdm_sci_ptr = rdm_invocation.sci_ptr;	/* for cleanup handler */

	on condition (cleanup)
	     begin;
	     rdm_invocation.sci_ptr = saved_rdm_sci_ptr;
	end;

	rdm_invocation.sci_ptr = P_sci_ptr;		/* be sure to not abort the reply request by accident */

	call process_arguments ("1"b);		/* must have a pathname: aborts if none given */

	if index (reverse (mbx_pathname), reverse (".sv")) = 1 then
	     mbx_pathname_lth = mbx_pathname_lth - length (".sv");
						/* remove ".sv" to avoid generating "x.sv.sv.mbx" */

	if search (mbx_pathname, "<>") > 0 then do;
	     call expand_pathname_$add_suffix (mbx_pathname, "sv.mbx", mbx_dirname, mbx_ename, code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", mbx_pathname);

	end;
	else do;
	     call suffixed_name_$make (mbx_pathname, "sv.mbx", mbx_ename, code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", mbx_pathname);
	     call search_paths_$find_dir ("mlsys", null (), mbx_ename, "", mbx_dirname, code);
	     if code ^= 0 then
		if code = error_table_$noentry then do;
		     call expand_pathname_$add_suffix (mbx_pathname, "sv.mbx", mbx_dirname, mbx_ename, code);
		     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", mbx_pathname);
		end;
		else call ssu_$abort_line (P_sci_ptr, code, "^a", mbx_ename);
	end;
	call check_star_name_$entry (mbx_ename, code);
	if code ^= 0 then				/* reject invalid names and star names */
	     if (code = 1) | (code = 2) then
		call ssu_$abort_line (P_sci_ptr, error_table_$nostars, "^a", pathname_ (mbx_dirname, mbx_ename));
	     else call ssu_$abort_line (P_sci_ptr, code, "^a", pathname_ (mbx_dirname, mbx_ename));
	call mark_appropriate_messages ();		/* determine which messages to process */

	call process_messages (save_the_message);	/* save them */

	rdm_invocation.sci_ptr = saved_rdm_sci_ptr;

	return;



/* Invoked by process_messages to actually save the given message */

save_the_message:
     procedure (p_message_number, p_message_ptr);

dcl  p_message_number fixed binary parameter;
dcl  p_message_ptr pointer parameter;

	call mail_system_$save_message (p_message_ptr, mbx_dirname, mbx_ename, "0"b /* do not create if missing */,
	     code);

	if code = mlsys_et_$no_savebox then do;		/* ask for permission to create the savebox */
	     call command_query_$yes_no (try_to_create, 0, ssu_$get_subsystem_and_request_name (P_sci_ptr), "",
		"Do you wish to create the savebox ^a?", pathname_ (mbx_dirname, mbx_ename));
	     if try_to_create then			/* ... permission given: try again */
		call mail_system_$save_message (p_message_ptr, mbx_dirname, mbx_ename, "1"b /* create if not found */,
		     code);
	     else call ssu_$abort_line (P_sci_ptr, 0);	/* ... no permission: stop right here */
	     if code = mlsys_et_$savebox_created then code = 0;
	end;

	if code ^= 0 then				/* couldn't save it */
	     call ssu_$abort_line (P_sci_ptr, code, "Adding message #^d to the savebox ^a.", p_message_number,
		pathname_ (mbx_dirname, mbx_ename));

	return;

     end save_the_message;
%page;
/* The "copy" request: places a copy of the specified messages into the specified mailbox which must already exist */

copy_request:
     entry (P_sci_ptr, P_rdm_invocation_ptr);

	call setup_request ("0"b);			/* may not be a send_mail original request */

	call process_arguments ("1"b);		/* must have a pathname: aborts if none given */

	if search (mbx_pathname, "<>") > 0 then do;
	     call expand_pathname_$add_suffix (mbx_pathname, "mbx", mbx_dirname, mbx_ename, code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", mbx_pathname);

	end;
	else do;
	     call suffixed_name_$make (mbx_pathname, "mbx", mbx_ename, code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", mbx_pathname);
	     call search_paths_$find_dir ("mlsys", null (), mbx_ename, "", mbx_dirname, code);
	     if code ^= 0 then
		if code = error_table_$noentry then do;
		     call expand_pathname_$add_suffix (mbx_pathname, "mbx", mbx_dirname, mbx_ename, code);
		     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "^a", mbx_pathname);
		end;
		else call ssu_$abort_line (P_sci_ptr, code, "^a", mbx_ename);
	end;

	call check_star_name_$entry (mbx_ename, code);
	if code ^= 0 then				/* reject invalid names and star names */
	     if (code = 1) | (code = 2) then
		call ssu_$abort_line (P_sci_ptr, error_table_$nostars, "^a", pathname_ (mbx_dirname, mbx_ename));
	     else call ssu_$abort_line (P_sci_ptr, code, "^a", pathname_ (mbx_dirname, mbx_ename));

	call mark_appropriate_messages ();		/* determine which messages to process */

	call process_messages (copy_the_message);	/* copy them */

	return;



/* Invoked by process_messages to actually copy the given message */

copy_the_message:
     procedure (p_message_number, p_message_ptr);

dcl  p_message_number fixed binary parameter;
dcl  p_message_ptr pointer parameter;

	call mail_system_$copy_message (p_message_ptr, mbx_dirname, mbx_ename, code);

	if code ^= 0 then				/* couldn't copy it */
	     call ssu_$abort_line (P_sci_ptr, code, "Adding message #^d to the mailbox ^a.", p_message_number,
		pathname_ (mbx_dirname, mbx_ename));

	return;

     end copy_the_message;
%page;
/* Prepares for the execution of one of the above requests */

setup_request:
     procedure (p_allow_original_request) /* options (quick) */;

dcl  p_allow_original_request bit (1) aligned;

	rdm_invocation_ptr = P_rdm_invocation_ptr;

	if rdm_invocation.type = SDM_INVOCATION then	/* a send_mail original request ... */
	     if p_allow_original_request then do;	/* ... and that's OK */
		is_original_request = "1"b;
		sdm_invocation_ptr = P_rdm_invocation_ptr;
		rdm_invocation_ptr = sdm_invocation.rdm_invocation_ptr;
		if rdm_invocation_ptr = null () then
		     call ssu_$abort_line (P_sci_ptr, 0, "This request is valid only during a ""reply"" request.");
	     end;
	     else call ssu_$abort_line (P_sci_ptr, ssu_et_$unimplemented_request);

	else is_original_request = "0"b;		/* an ordinary read_mail request */

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	n_message_specifiers_allocated = n_arguments;	/* can't have more message specifiers than arguments */
	call cu_$grow_stack_frame (size (message_specifier_idxs), message_specifier_idxs_ptr, code);
	if code ^= 0 then call ssu_$abort_line (P_sci_ptr, 0, "Too many message specifiers on the request line.");

	n_message_specifiers = 0;			/* haven't actually spotted any yet */

	call rdm_message_mark_mgr_$clear_marked_messages (rdm_invocation_ptr);

	return;

     end setup_request;
%page;
/* Processes the arguments for one of the above requests */

process_arguments:
     procedure (p_pathname_required);

dcl  p_pathname_required bit (1) aligned parameter;

	have_pathname = "0"b;			/* haven't seen a pathname yet */
	reverse_processing = "0"b;			/* default is to process in the order marked */
	delete_after_processing = "0"b;		/* default is to not delete after processing */

	message_type = NON_DELETED_MESSAGES;

	do argument_idx = 1 to n_arguments;

	     call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);

	     if index (argument, "-") = 1 then		/* a controla rgument */
		if ^is_original_request & ((argument = "-delete") | (argument = "-dl")) then
		     delete_after_processing = "1"b;
		else if ^is_original_request & ((argument = "-no_delete") | (argument = "-ndl")) then
		     delete_after_processing = "0"b;

		else if (argument = "-include_deleted") | (argument = "-idl") then message_type = ALL_MESSAGES;
		else if (argument = "-only_deleted") | (argument = "-odl") then message_type = ONLY_DELETED_MESSAGES;
		else if (argument = "-only_non_deleted") | (argument = "-ondl") then
		     message_type = NON_DELETED_MESSAGES;

		else if (argument = "-reverse") | (argument = "-rv") then reverse_processing = "1"b;
		else if (argument = "-no_reverse") | (argument = "-nrv") then reverse_processing = "0"b;

		/*** the following control arguments are obsolete: remove them in MR11 */
		else if (argument = "-all") | (argument = "-a") then message_type = ALL_MESSAGES;

		else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);

	     else do;				/* a message specifier or pathname */
		call rdm_message_mark_mgr_$validate_message_specifier (rdm_invocation_ptr, argument_ptr, argument_lth,
		     ALL_MESSAGES, ""b, code);
		if code = 0 then do;		/* ... it looks like a message specifier */
		     n_message_specifiers = n_message_specifiers + 1;
		     message_specifier_idxs (n_message_specifiers) = argument_idx;
		end;
		else if p_pathname_required then	/* ... it must be the pathname */
		     if have_pathname then		/* ... but we already have one */
			call ssu_$abort_line (P_sci_ptr, 0, "Only one pathname may be given. ""^a"" and ""^a""",
			     mbx_pathname, argument);
		     else do;			/* ... first pathname */
			have_pathname = "1"b;
			mbx_pathname_ptr = argument_ptr;
			mbx_pathname_lth = argument_lth;
		     end;
		else /*** if ^p_pathname_required then */
		     call ssu_$abort_line (P_sci_ptr, code, """^a""", argument);
	     end;
	end;

	if p_pathname_required & ^have_pathname then	/* pathname missing: usage message is better here */
	     call ssu_$abort_line (P_sci_ptr, 0, "Usage: ^a {message_specifiers} path {-control_args}",
		ssu_$get_request_name (P_sci_ptr));

	return;

     end process_arguments;
%page;
/* Marks the appropriate messages for processing */

mark_appropriate_messages:
     procedure ();

dcl  idx fixed binary;

	if n_message_specifiers = 0 then		/* defaults to ... */
	     if is_original_request then		/* ... messages being answered if from send_mail */
		call rdm_message_mark_mgr_$remark_original_messages (rdm_invocation_ptr);

	     else					/* ... current message if from read_mail */
		call rdm_message_mark_mgr_$mark_current_message (rdm_invocation_ptr, message_type);
						/* phx19099 RL - use of "-odl" with the current message will be caught during marking */
	else do;					/* use the messages requested by the user */
	     do idx = 1 to n_message_specifiers;
		call ssu_$arg_ptr (P_sci_ptr, message_specifier_idxs (idx), argument_ptr, argument_lth);
		call rdm_message_mark_mgr_$mark_messages (rdm_invocation_ptr, argument_ptr, argument_lth,
		     message_type, ""b, code);
		if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code);
	     end;
	end;

	return;

     end mark_appropriate_messages;
%page;
/* Processes the marked messages */

process_messages:
     procedure (p_processor);

dcl  p_processor entry (fixed binary, pointer) variable parameter;

dcl  (first_message_idx, last_message_idx, message_idx_increment, message_idx, message_number) fixed binary;
dcl  message_ptr pointer;


	if reverse_processing then do;		/* process them in the opposite order */
	     first_message_idx = marked_chain.n_messages;
	     last_message_idx = 1;
	     message_idx_increment = -1;
	end;
	else do;					/* process them in the order marked */
	     first_message_idx = 1;
	     last_message_idx = marked_chain.n_messages;
	     message_idx_increment = 1;
	end;

	do message_idx = first_message_idx to last_message_idx by message_idx_increment;
	     message_number = marked_chain.messages (message_idx);

	     call rdm_mailbox_interface_$read_message (rdm_invocation_ptr, message_number, message_ptr, code);
	     if code ^= 0 then
		call ssu_$abort_line (P_sci_ptr, code, "Reading message #^d from ^a.", message_number,
		     rdm_invocation.mailbox_name);

/* phx18564 RL - set current message to message_number and guarantee that it's not deleted */
	     call rdm_mailbox_interface_$set_new_current_msg (rdm_invocation_ptr, message_number,
		rdm_invocation.current_message);	/* it's current while we're working on it */

	     call p_processor (message_number, message_ptr);
						/* do the request-specific processing */

	     call rdm_mailbox_interface_$mark_processed_and_acknowledge (rdm_invocation_ptr, message_number);
	end;

	if delete_after_processing then		/* user wants them deleted after processing */
	     call rdm_mailbox_interface_$delete_messages (rdm_invocation_ptr, "0"b);

	return;

     end process_messages;
%page;
%include rdm_invocation;
%page;
%include rdm_message_list;
%page;
%include rdm_message_chains;
%page;
%include mlsys_data;
%page;
%include sdm_invocation;

     end rdm_mbx_requests_;
