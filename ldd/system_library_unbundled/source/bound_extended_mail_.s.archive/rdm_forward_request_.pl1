/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(89-04-07,Lee), approve(89-05-10,MCR8104),
     audit(89-07-18,LZimmerman), install(89-10-02,MR12.3-1079):
     phx19099, phx15783, Mail 457 - added additional msg_type to call to
     rdm_message_mark_mgr_$mark_current_message to catch use of "-odl" with the
     current message.
  2) change(89-04-11,Lee), approve(89-05-10,MCR8104),
     audit(89-07-18,LZimmerman), install(89-10-02,MR12.3-1079):
     phx18564, phx17540, phx17353, Mail 446 - the new entry set_new_current_msg
     in rdm_mailbox_interface_ is now called when the current message is
     changed to guarantee that the new current message is never a deleted
     message; reformatting.
                                                   END HISTORY COMMENTS */


/* format: off */

/* The read_mail forward request */

/* Created:  1978 by W. Olin Sibert */
/* Modified: 3 June 1980 by G. Palter to implement suggestion #0263 -- the current message in read_mail should be set to
      the message being processed; thus, if an error occurs, the current message will remain on which the error occured */
/* Modified: 28 September 1982 by G. Palter to add appropriate negative control arguments */
/* Modified: 20 December 1982 by G. Palter to fix the following entries on the mail_system error list:
      #0364 -- when given with no arguments, the forward request does not print a usefull error message; and
      #0408 -- the forward request does not recognize "-include_deleted", "-only_deleted", and "-only_non_deleted" */
/* Modified: October 1983 by G. Palter as part of the conversion to the new mail system interface.  The capability to add
      a set of comments to the message(s) being forwarded was also implemented */
/* Modified: April 1984 by G. Palter to fix mail system error #0433 -- the send_mail command and all send_mail and
      read_mail requests which accept multiple addresses as arguments do not properly parse "-log -at HOST" */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


rdm_forward_request_:
     procedure (P_sci_ptr, P_rdm_invocation_ptr);

	return;					/* not an entrypoint */


dcl  P_sci_ptr pointer parameter;
dcl  P_rdm_invocation_ptr pointer parameter;

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;

dcl  msg_spec_array (msg_spec_array_size) fixed binary based (msg_spec_array_ptr);
dcl  msg_spec_array_ptr pointer;
dcl  (msg_spec_array_size, msg_spec_count, msg_type) fixed binary;

dcl  comment_buffer character (4 * sys_info$max_seg_size) unaligned based (comment_buffer_ptr);
dcl  comment_text character (comment_text_lth) unaligned based (comment_buffer_ptr);
dcl  comment_buffer_ptr pointer;
dcl  comment_text_lth fixed binary (21);

dcl  input_filename character (input_filename_lth) unaligned based (input_filename_ptr);
dcl  input_file_dirname character (168);
dcl  input_file_ename character (32);
dcl  input_filename_ptr pointer;
dcl  input_file_bitcount fixed binary (24);
dcl  input_filename_lth fixed binary (21);

dcl  profile_pathname character (profile_pathname_lth) unaligned based (profile_pathname_ptr);
dcl  profile_dirname character (168);
dcl  profile_ename character (32);
dcl  profile_pathname_ptr pointer;
dcl  profile_pathname_lth fixed binary (21);
dcl  (profile_pathname_given, abbrev_ca_given) bit (1) aligned;

dcl  1 local_rfso aligned like rdm_forward_subsystem_options;

dcl  1 local_pcao aligned like parse_ca_options;

dcl  1 local_ri aligned,
       2 header like recipients_info.header,
       2 forwarding like recipients_info.lists;
dcl  1 local_do aligned like deliver_options;

dcl  clear_original_message_chain bit (1) aligned;	/* ON => we've marked the original messages */
dcl  saved_current_message fixed binary;		/* current message number before invoking forward subsystem */

dcl  (first_message_idx, last_message_idx, message_idx_increment, message_idx, message_number) fixed binary;
dcl  message_ptr pointer;

dcl  (add_comments, reverse_sw, delete_sw, brief_sw) bit (1) aligned;

dcl  code fixed binary (35);

dcl  NULL_STRING character (1) static options (constant) initial ("");

dcl  sys_info$max_seg_size fixed binary (19) external;

/* format: off */
dcl (emf_et_$forwarding_aborted, error_table_$bad_arg, error_table_$bad_conversion, error_table_$badopt,
     error_table_$noarg, mlsys_et_$message_not_sent, mlsys_et_$message_partially_sent)
	fixed binary (35) external;
/* format: on */

dcl  cu_$grow_stack_frame entry (fixed binary (19), pointer, fixed binary (35));
dcl  cv_dec_check_ entry (character (*), fixed binary (35)) returns (fixed binary (35));
dcl  expand_pathname_ entry (character (*), character (*), character (*), fixed binary (35));
dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$fs_get_path_name entry (pointer, character (*), fixed binary, character (*), fixed binary (35));
dcl  initiate_file_ entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35));
dcl  mail_system_$free_address_list entry (pointer, fixed binary (35));
dcl  mail_system_$redistribute_message entry (pointer, character (*), pointer, pointer, fixed binary (35));
dcl  mlsys_utils_$free_delivery_results entry (pointer, fixed binary (35));
dcl  mlsys_utils_$parse_address_list_control_args
	entry (pointer, fixed binary, pointer, character (8), pointer, pointer, fixed binary (35));
dcl  mlsys_utils_$print_delivery_results entry (pointer, bit (1) aligned, pointer, fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  rdm_forward_subsystem_ entry (pointer, pointer, pointer, fixed binary (21), fixed binary (21), fixed binary (35));
dcl  rdm_mailbox_interface_$delete_messages entry (pointer, bit (1) aligned);
dcl  rdm_mailbox_interface_$mark_processed_and_acknowledge entry (pointer, fixed binary);
dcl  rdm_mailbox_interface_$read_message entry (pointer, fixed binary, pointer, fixed binary (35));
dcl  rdm_mailbox_interface_$set_new_current_msg entry (ptr, fixed binary, fixed binary);
dcl  rdm_message_mark_mgr_$clear_marked_messages entry (pointer);
dcl  rdm_message_mark_mgr_$clear_original_messages entry (pointer);
dcl  rdm_message_mark_mgr_$mark_current_message entry (pointer, fixed binary);
dcl  rdm_message_mark_mgr_$mark_messages
	entry (pointer, pointer, fixed binary (21), fixed binary, bit (*), fixed binary (35));
dcl  rdm_message_mark_mgr_$mark_original_messages entry (pointer);
dcl  rdm_message_mark_mgr_$validate_message_specifier
	entry (pointer, pointer, fixed binary (21), fixed binary, bit (*), fixed binary (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_abbrev_info entry (pointer, pointer, pointer, bit (1) aligned);
dcl  ssu_$get_request_name entry (pointer) returns (character (32));
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);
dcl  ssu_$release_temp_segment entry (pointer, pointer);
dcl  terminate_file_ entry (pointer, fixed binary (24), bit (*), fixed binary (35));

dcl  cleanup condition;

dcl  (addr, currentsize, divide, hbound, index, length, null) builtin;
%page;
forward_request:
     entry (P_sci_ptr, P_rdm_invocation_ptr);

	rdm_invocation_ptr = P_rdm_invocation_ptr;

	call ssu_$arg_count (P_sci_ptr, n_arguments);

	if n_arguments = 0 then			/* must at least supply an address */
NO_FORWARDING_ADDRESSES:
	     call ssu_$abort_line (P_sci_ptr, 0, "Usage: ^a {message_specifier} {addresses} {-control_args}",
		ssu_$get_request_name (P_sci_ptr));

	call rdm_message_mark_mgr_$clear_marked_messages (rdm_invocation_ptr);

	msg_spec_array_size = n_arguments;		/* set up the message specifier indeces array */
	call cu_$grow_stack_frame (currentsize (msg_spec_array), msg_spec_array_ptr, code);
	if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Too many message specifiers in request line.");

	msg_spec_count = 0;				/* haven't seen any message specifiers yet */

	local_rfso.input_file_ptr,			/* for cleanup handler */
	     comment_buffer_ptr, local_ri.expanded_recipients_result_list_ptr, local_ri.forwarding = null ();
	clear_original_message_chain = "0"b;

	on condition (cleanup) call cleanup_after_forward_request ();


/* Setup default options */

	msg_type = NON_DELETED_MESSAGES;		/* default value */

	reverse_sw, delete_sw = "0"b;
	brief_sw = rdm_invocation.brief;

	add_comments = "0"b;			/* do not add comments to the message */

	local_rfso.version = RDM_FORWARD_SUBSYSTEM_OPTIONS_VERSION_1;

	local_rfso.input_type = TERMINAL_INPUT;

	local_rfso.initial_requests_ptr = null ();
	local_rfso.initial_requests_lth = 0;
	local_rfso.enter_request_loop = DEFAULT_REQUEST_LOOP;

	local_rfso.fill_width = 62;			/* comments are indented by 10 spaces */
	local_rfso.enable_filling = DEFAULT_FILL;

	local_rfso.enable_prompt = DEFAULT_PROMPT;

	local_rfso.default_profile_ptr, local_rfso.profile_ptr = null ();
	abbrev_ca_given = "0"b;			/* haven't seen -ab/-nab: use read_mail abbrev state */
	profile_pathname_given = "0"b;		/* no -profile yet */

	local_rfso.auto_write = "0"b;			/* -no_auto_write (good) */
	local_rfso.pad = ""b;

	local_ri.area_ptr = get_system_free_area_ ();
	local_ri.n_lists = 1;
	local_ri.version = RECIPIENTS_INFO_VERSION_2;

	local_do.version = DELIVER_OPTIONS_VERSION_2;
	local_do.delivery_mode = ORDINARY_DELIVERY;	/* forwarding is always ordinary mail */
	local_do.queueing_mode = ALWAYS_QUEUE_FOREIGN;	/* always queue foreign addresses & local when needed */
	local_do.queued_notification_mode = NOTIFY_ON_ERROR;
	local_do.abort = "1"b;			/* don't send it unless all recipients are OK */
	local_do.send_if_empty = "1"b;		/* let user forward anything they want to */
	local_do.recipient_notification = "1"b;		/* default is -notify */
	local_do.acknowledge = "0"b;			/* default is -no_acknowledge */
	local_do.queue_mailing_lists = "0"b;
	local_do.mbz = ""b;

	local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	local_pcao.logbox_creation_mode = CREATE_AND_ANNOUNCE_MAILBOX;
	local_pcao.savebox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	local_pcao.abort_on_errors = "1"b;		/* stop immediately on an invalid address */
	local_pcao.validate_addresses = "1"b;		/* insure that we can send the mail */
	local_pcao.mbz = ""b;


/* Process arguments: check if first argument is a valid message specifier; otherwise, try using it as an address */

	call ssu_$arg_ptr (P_sci_ptr, 1, argument_ptr, argument_lth);

	call rdm_message_mark_mgr_$validate_message_specifier (rdm_invocation_ptr, argument_ptr, argument_lth,
	     ALL_MESSAGES, ""b, code);

	if code = 0 then do;			/* seems to be a message specifier all right */
	     argument_idx = 1;			/* ... neede by process_argument_as_spec */
	     call process_argument_as_spec ();
	     argument_idx = 2;			/* ... so addresses start with the 2nd argument */
	end;
	else argument_idx = 1;			/* not a message specifier: must be an address */


/* Process remaining arguments */

	do while (argument_idx <= n_arguments);

	     call mlsys_utils_$parse_address_list_control_args (P_sci_ptr, argument_idx, addr (local_pcao),
		ADDRESS_LIST_VERSION_2, local_ri.forwarding.address_list_ptr, local_ri.forwarding.address_list_ptr,
		code);
	     if code ^= 0 then			/* only severly fatal errors will get here */
		call ssu_$abort_line (P_sci_ptr, code, "Parsing control arguments.");

	     if argument_idx <= n_arguments then do;

		/*** An argument not recognized by the mail system: must be one of ours */
		call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);

		if index (argument, "-") = 1 then	/*  a control argument */
		     if (argument = "-add_comments") | (argument = "-add_comment") then add_comments = "1"b;
		     else if (argument = "-no_add_comments") | (argument = "-no_add_comment") then
			add_comments = "0"b;

		     else if (argument = "-acknowledge") | (argument = "-ack") then local_do.acknowledge = "1"b;
		     else if (argument = "-no_acknowledge") | (argument = "-nack") then local_do.acknowledge = "0"b;

		     else if (argument = "-brief") | (argument = "-bf") then brief_sw = "1"b;
		     else if (argument = "-long") | (argument = "-lg") then brief_sw = "0"b;

		     else if (argument = "-include_deleted") | (argument = "-idl") then msg_type = ALL_MESSAGES;
		     else if (argument = "-only_deleted") | (argument = "-odl") then msg_type = ONLY_DELETED_MESSAGES;
		     else if (argument = "-only_non_deleted") | (argument = "-ondl") then
			msg_type = NON_DELETED_MESSAGES;

		     else if (argument = "-notify") | (argument = "-nt") then local_do.recipient_notification = "1"b;
		     else if (argument = "-no_notify") | (argument = "-nnt") then
			local_do.recipient_notification = "0"b;

		     else if (argument = "-reverse") | (argument = "-rv") then reverse_sw = "1"b;
		     else if (argument = "-no_reverse") | (argument = "-nrv") then reverse_sw = "0"b;

		     else if (argument = "-delete") | (argument = "-dl") then delete_sw = "1"b;
		     else if (argument = "-no_delete") | (argument = "-ndl") then delete_sw = "0"b;

		     else if (argument = "-message") | (argument = "-msg") then do;
			if argument_idx = n_arguments then
			     call ssu_$abort_line (P_sci_ptr, error_table_$noarg,
				"A message specifier must follow ""^a"".", argument);
			argument_idx = argument_idx + 1;
			call process_argument_as_spec ();
		     end;

		     /*** Control arguments related to adding comments ... */
		     else if (argument = "-terminal_input") | (argument = "-ti") then
			local_rfso.input_type = TERMINAL_INPUT;
		     else if (argument = "-input_file") | (argument = "-if") then do;
			call get_next_argument ("A pathname");
			local_rfso.input_type = FILE_INPUT;
			input_filename_ptr = argument_ptr;
			input_filename_lth = argument_lth;
		     end;				/* save it for later processing */

		     else if (argument = "-fill") | (argument = "-fi") then local_rfso.enable_filling = FILL;
		     else if (argument = "-no_fill") | (argument = "-nfi") then local_rfso.enable_filling = NO_FILL;
		     else if (argument = "-line_length") | (argument = "-ll") then do;
			call get_next_argument ("A number");
			local_rfso.fill_width = cv_dec_check_ (argument, code);
			if code ^= 0 then
			     call ssu_$abort_line (P_sci_ptr, error_table_$bad_conversion, "-line_length ""^a""",
				argument);
			if local_rfso.fill_width < 21 then
			     call ssu_$abort_line (P_sci_ptr, 0, "Line length must be greater than 20.");
		     end;

		     /*** Control arguments required by the MCR boards despite the furious objections of the author */
		     else if argument = "-auto_write" then local_rfso.auto_write = "1"b;
		     else if argument = "-no_auto_write" then local_rfso.auto_write = "0"b;

		     /*** Standard subsystem control arguments */
		     else if (argument = "-abbrev") | (argument = "-ab") then
			local_rfso.enable_abbrev, abbrev_ca_given = "1"b;
		     else if (argument = "-no_abbrev") | (argument = "-nab") then do;
			local_rfso.enable_abbrev = "0"b;
			abbrev_ca_given = "1"b;
		     end;
		     else if (argument = "-profile") | (argument = "-pf") then do;
			call get_next_argument ("A pathname");
			profile_pathname_given = "1"b;
			profile_pathname_ptr = argument_ptr;
			profile_pathname_lth = argument_lth;
		     end;				/* save for later processing */

		     else if (argument = "-prompt") | (argument = "-pmt") then do;
			call get_next_argument ("A string");
			if argument_lth = 0 then	/* same as -no_prompt */
			     local_rfso.enable_prompt = NO_PROMPT;
			else do;
			     local_rfso.enable_prompt = USE_PROMPT_STRING;
			     local_rfso.prompt_string = argument;
			end;
		     end;
		     else if (argument = "-no_prompt") | (argument = "-npmt") then
			local_rfso.enable_prompt = NO_PROMPT;

		     else if (argument = "-request") | (argument = "-rq") then do;
			call get_next_argument ("A string");
			local_rfso.initial_requests_ptr = argument_ptr;
			local_rfso.initial_requests_lth = argument_lth;
		     end;

		     else if (argument = "-request_loop") | (argument = "-rql") then
			local_rfso.enter_request_loop = REQUEST_LOOP;
		     else if (argument = "-no_request_loop") | (argument = "-nrql") then
			local_rfso.enter_request_loop = NO_REQUEST_LOOP;

		     /*** following control arguments are obsolete: remove them in MR11 */
		     else if (argument = "-all") | (argument = "-a") then msg_type = ALL_MESSAGES;

		     else call ssu_$abort_line (P_sci_ptr, error_table_$badopt, """^a""", argument);

		else call ssu_$abort_line (P_sci_ptr, error_table_$bad_arg, """^a""", argument);

		argument_idx = argument_idx + 1;	/* skip over argument we processed */
	     end;
	end;

	if is_empty_list (local_ri.forwarding.address_list_ptr) then go to NO_FORWARDING_ADDRESSES;

	if msg_spec_count = 0 then			/* defaults to the current message */
	     call rdm_message_mark_mgr_$mark_current_message (rdm_invocation_ptr, msg_type);
						/* phx19099 RL - use of "-odl" with current message will be caught during marking */
	else call process_msg_specs ();


	if add_comments then do;

/* Get the user's comment by invoking our sub-subsystem */

	     call ssu_$get_temp_segment (P_sci_ptr, "comment-buffer", comment_buffer_ptr);

	     if local_rfso.input_type = FILE_INPUT then do;
		/*** Find the specified input file ... */
		call expand_pathname_ (input_filename, input_file_dirname, input_file_ename, code);
		if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "-input_file ""^a""", input_filename);
		call initiate_file_ (input_file_dirname, input_file_ename, R_ACCESS, local_rfso.input_file_ptr,
		     input_file_bitcount, code);
		if code ^= 0 then
		     call ssu_$abort_line (P_sci_ptr, code, "-input_file ""^a""",
			pathname_ (input_file_dirname, input_file_ename));
		local_rfso.input_file_lth = divide ((input_file_bitcount + 8), 9, 21, 0);
	     end;

	     if profile_pathname_given then do;
		/*** Initiate the subsystem profile requested by the user */
		call expand_pathname_$add_suffix (profile_pathname, "profile", profile_dirname, profile_ename, code);
		if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "-profile ""^a""", profile_pathname);
		call initiate_file_ (profile_dirname, profile_ename, R_ACCESS, local_rfso.default_profile_ptr, (0),
		     code);
		if code ^= 0 then
		     call ssu_$abort_line (P_sci_ptr, code, "-profile ""^a""",
			pathname_ (profile_dirname, profile_ename));
		if ^abbrev_ca_given then		/* -profile implies -abbrev unless explicit -ab/-nab given */
		     local_rfso.enable_abbrev = "1"b;
		abbrev_ca_given = "1"b;		/* do not copy read_mail's abbreviation processing state */
	     end;

	     if ^abbrev_ca_given then do;
		/*** User did not give any abbrev control arguments: use read_mail's state of abbreviation processing */
		call ssu_$get_abbrev_info (P_sci_ptr, local_rfso.default_profile_ptr, local_rfso.profile_ptr,
		     local_rfso.enable_abbrev);
		if local_rfso.default_profile_ptr ^= null () then
		     call add_null_refname (local_rfso.default_profile_ptr);
		if (local_rfso.profile_ptr ^= null ()) & (local_rfso.profile_ptr ^= local_rfso.default_profile_ptr)
		     then
		     call add_null_refname (local_rfso.profile_ptr);
	     end;					/* ssu_ never terminiates same profile twice */

	     /*** Invoke the subsystem to actually do the work */

	     call rdm_message_mark_mgr_$mark_original_messages (rdm_invocation_ptr);
	     saved_current_message = rdm_invocation.current_message;
	     clear_original_message_chain = "1"b;

	     call rdm_forward_subsystem_ (rdm_invocation_ptr, addr (local_rfso), addr (comment_buffer),
		length (comment_buffer), comment_text_lth, code);

	     clear_original_message_chain = "0"b;
	     rdm_invocation.current_message = saved_current_message;
	     call rdm_message_mark_mgr_$clear_original_messages (rdm_invocation_ptr);

	     if code ^= 0 then
		if code = emf_et_$forwarding_aborted then
		     if brief_sw then
			call ssu_$abort_line (P_sci_ptr, 0);
		     else call ssu_$abort_line (P_sci_ptr, 0, "No messages forwarded.");
		else call ssu_$abort_line (P_sci_ptr, code, "Invoking forward sub-subsystem.");
	end;


	else do;

/* User does not want to add a comment */

	     comment_buffer_ptr = addr (NULL_STRING);	/* prevents faults */
	     comment_text_lth = 0;
	end;


/* Forward the messages one at a time */

	if reverse_sw then do;			/* process messages in the reverse of the order marked */
	     first_message_idx = marked_chain.n_messages;
	     last_message_idx = 1;
	     message_idx_increment = -1;
	end;
	else do;					/* process messages in the order marked */
	     first_message_idx = 1;
	     last_message_idx = marked_chain.n_messages;
	     message_idx_increment = 1;
	end;

	do message_idx = first_message_idx to last_message_idx by message_idx_increment;
	     message_number = marked_chain.messages (message_idx);

/* phx18564 RL - set current message to message_number and guarantee that it's not deleted */
	     call rdm_mailbox_interface_$set_new_current_msg (rdm_invocation_ptr, message_number,
		rdm_invocation.current_message);	/* each message is current as it's processed */

	     call rdm_mailbox_interface_$read_message (rdm_invocation_ptr, message_number, message_ptr, code);
	     if code ^= 0 then
		call ssu_$abort_line (P_sci_ptr, code, "Reading message #^d from ^a.", message_number,
		     rdm_invocation.mailbox_name);

	     call mail_system_$redistribute_message (message_ptr, comment_text, addr (local_ri), addr (local_do), code);
	     if (code ^= 0) & (code ^= mlsys_et_$message_not_sent) & (code ^= mlsys_et_$message_partially_sent) then
		call ssu_$abort_line (P_sci_ptr, code, "Attempting to forward message #^d.", message_number);

	     call mlsys_utils_$print_delivery_results (P_sci_ptr, brief_sw, addr (local_ri), (0));
	     call mlsys_utils_$free_delivery_results (addr (local_ri), (0));

	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Message #^d.", message_number);

	     call rdm_mailbox_interface_$mark_processed_and_acknowledge (rdm_invocation_ptr, message_number);
	end;


/* Clean up */

	if delete_sw then				/* delete messages if requested */
	     call rdm_mailbox_interface_$delete_messages (rdm_invocation_ptr, "0"b);

	call cleanup_after_forward_request ();

	return;
%page;
/* Cleans up after execution of the request */

cleanup_after_forward_request:
     procedure ();

	if clear_original_message_chain then do;
	     rdm_invocation.current_message = saved_current_message;
	     call rdm_message_mark_mgr_$clear_original_messages (rdm_invocation_ptr);
	     clear_original_message_chain = "0"b;
	end;

	call mlsys_utils_$free_delivery_results (addr (local_ri), (0));

	if local_ri.forwarding.address_list_ptr ^= null () then
	     call mail_system_$free_address_list (local_ri.forwarding.address_list_ptr, (0));

	if (comment_buffer_ptr ^= null ()) & (comment_buffer_ptr ^= addr (NULL_STRING)) then
	     call ssu_$release_temp_segment (P_sci_ptr, comment_buffer_ptr);

	if local_rfso.input_file_ptr ^= null () then
	     call terminate_file_ (local_rfso.input_file_ptr, 0, TERM_FILE_TERM, (0));

	return;

     end cleanup_after_forward_request;



/* Fetches the value expected after the given control argument */

get_next_argument:
     procedure (p_argument_type);

dcl  p_argument_type character (*) parameter;

	if argument_idx = n_arguments then
	     call ssu_$abort_line (P_sci_ptr, error_table_$noarg, "^a after ""^a"".", p_argument_type, argument);

	argument_idx = argument_idx + 1;
	call ssu_$arg_ptr (P_sci_ptr, argument_idx, argument_ptr, argument_lth);

	return;

     end get_next_argument;
%page;
/* Marks the current argument as a message specifier */

process_argument_as_spec:
     procedure ();

	if msg_spec_count >= hbound (msg_spec_array, 1) then
	     call ssu_$abort_line (P_sci_ptr, 0, "Too many message specifiers in request.");
						/* can't ever happen */

	msg_spec_count = msg_spec_count + 1;
	msg_spec_array (msg_spec_count) = argument_idx;

	return;

     end process_argument_as_spec;



/* Process the message specifiers on the request line */

process_msg_specs:
     procedure ();

dcl  idx fixed binary;

	do idx = 1 to msg_spec_count;
	     call ssu_$arg_ptr (P_sci_ptr, msg_spec_array (idx), argument_ptr, argument_lth);

	     call rdm_message_mark_mgr_$mark_messages (rdm_invocation_ptr, argument_ptr, argument_lth, msg_type, "0"b,
		code);
	     if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code);
	end;

	return;

     end process_msg_specs;
%page;
/* Adds a null reference name to the supplied profile: ssu_ will terminate a null refname when the forward sub-subsystem
   invocation is destroyed but read_mail will still try to reference the profile; adding an extra null refname here makes
   everything work properly */

add_null_refname:
     procedure (p_profile_ptr);

dcl  p_profile_ptr pointer parameter;
dcl  new_profile_ptr pointer;
dcl  profile_dirname character (168);
dcl  profile_ename character (32);

	call hcs_$fs_get_path_name (p_profile_ptr, profile_dirname, (0), profile_ename, code);
	if code ^= 0 then call ssu_$abort_line (P_sci_ptr, code, "Copying state of read_mail abbrev processing.");

	call initiate_file_ (profile_dirname, profile_ename, R_ACCESS, new_profile_ptr, (0), code);
	if p_profile_ptr ^= new_profile_ptr then
	     call ssu_$abort_line (P_sci_ptr, code, "Copying state of read_mail abbrev processing.");

	return;

     end add_null_refname;



/* Determines if the supplied address list is empty */

is_empty_list:
     procedure (p_address_list_ptr) returns (bit (1) aligned);

dcl  p_address_list_ptr pointer parameter;

	if p_address_list_ptr = null () then		/* nothing there at all */
	     return ("1"b);

	else return ((p_address_list_ptr -> address_list.n_addresses = 0));

     end is_empty_list;
%page;
%include rdm_invocation;
%page;
%include rdm_message_list;
%page;
%include rdm_message_chains;
%page;
%include rdm_fwd_subsystem_opts;
%page;
%include mlsys_address_list;
%page;
%include mlsys_parse_ca_options;
%page;
%include mlsys_deliver_info;
%page;
%include access_mode_values;
%page;
%include terminate_file;

     end rdm_forward_request_;
