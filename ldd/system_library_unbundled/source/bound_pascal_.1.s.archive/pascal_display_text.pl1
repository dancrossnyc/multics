/****^  *************************************************************************
        *                                                                       *
        * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */

/****^  HISTORY COMMENTS:
  1) change(86-10-05,JMAthane), approve(86-10-05,MCR7521),
     audit(86-10-09,JPFauche), install(86-11-12,MR12.0-1212):
     Pascal version for MR12.
                                                   END HISTORY COMMENTS */

pascal_display_text: proc;

/* procedure called at the end of compilation to display on listing the generated code */

%include pascal_context_;
%include pascal_context_table;
%include pascal_fsb;
%include statement_map;
%include operator_names;
%include cgsystem;
%include op_mnemonic_format;

/* MULTICS entry points */

	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);

/* PASCAL compiler externals */

	dcl     RACINE_defs$mpcogout	 ext ptr;
	dcl     RACINE_defs$programnode ext ptr;
	dcl     RACINE_defs$lastproc	 ext ptr;		/* ptr to last generated proc node */
	dcl     pascal_sources_management_$return_source_ptr entry (fixed bin (35), ptr);

	dcl     pascal_operator_names_$pascal_operator_names_ ext fixed bin;

/* internal automatic */
	dcl     (
	        map_ptr,				/* ptr to current statement map element */
	        proc_ptr,				/* ptr to current PASCAL procedure node */
	        out_switch,				/* ptr to io switch for listing output */
	        source_addr,			/* ptr to source string */
	        p1, p2,				/* work */
	        p,				/* ptr to current machine word */
	        pt) /* work */
				 ptr;
	dcl     (
	        map_place,
	        code,				/* err code */
	        delta,				/* offset in text section */
	        deltamax,				/* max offset in text section */
	        source_nbr,				/* current source nbr */
	        current_source,			/* (idem) */
	        bit_index,				/* index in text rel bit string */
	        last_index,
	        curr_index,				/* index in source */
	        abs_count) /* count of abs half words */
				 fixed bin (35);
	dcl     (
	        ignore_ic_mod,
	        double,
	        eis,
	        eis_desc,
	        need_comma,
	        ext_base,
	        itag,
	        instructions,			/* true if instruction part */
	        has_ic,
	        decimal)
				 bit (1);
	dcl     line		 char (180);
	dcl     rel_chars		 char (2);	/* rel_chars for current word */
	dcl     (
	        j,
	        k,
	        m,
	        save_k,
	        mop,
	        nrands,
	        irand,
	        ndesc)
				 fixed bin;
	dcl     len		 fixed bin (21);
	dcl     relbits		 bit (5);
	dcl     c			 char (1);
	dcl     cstring		 char (12);
	dcl     (
	        offset,
	        fract_offset,
	        size,
	        scale)
				 fixed bin (18);
	dcl     op_code		 char (5);
	dcl     tag		 char (3);
	dcl     (ebase, len_reg, ic)	 (3) bit (1) aligned;
	dcl     desc_word		 char (8) varying;

	dcl     used_name		 char (32);

/* internal static constants */

	dcl     ht		 char (1) init ("	") int static options (constant);
	dcl     htht		 char (2) init ("		") int static options (constant);
	dcl     desc_op		 (0:9) char (8) varying int static
				 init ("desc9a", "descb", "desc9fl", "desc9ls", "desc9ts", "desc9ns", "desc4fl", "desc4ls", "desc4ts", "desc4ns");

	dcl     eis_modifier	 (0:15) char (3) aligned int static
				 init ("n", "au", "qu", "du", "ic", "al", "ql", "...",
				 "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7");

	dcl     bool_word		 (0:15) char (6) aligned int static varying
				 init ("clear", "and", "andnot", "move", "andnot", "", "xor", "or",
				 "", "", "", "", "invert", "", "nand", "set");

	dcl     mf		 (3) fixed bin (6) int static init (30, 12, 3); /* location of modification factor fields in EIS inst */

	dcl     digit		 (0:9) char (1) aligned int static
				 init ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9");

	dcl     base		 (0:7) char (4) aligned int static
				 init ("pr0|", "pr1|", "pr2|", "pr3|", "pr4|", "pr5|", "pr6|", "pr7|");

/* based */

	dcl     source_string	 char (255 * 1024 * 4) based (source_addr);
	dcl     name_ptr		 (0:deltamax) ptr unal based (pascal_context_$usednamesaddr);
	dcl     name32		 char (32) based;
	dcl     ft		 fixed bin (35) based;
	dcl     1 a		 based,
		2 (b1, b2, b3, b4)	 bit (9) unal;
	dcl     a4		 char (4) based;
	dcl     fl		 float bin (63) based;

	dcl     1 descriptor	 based aligned,	/* EIS alphanumeric and bit operand descriptor */
		2 address		 bit (18) unal,
		2 char		 bit (2) unal,
		2 bit		 bit (4) unal,
		2 length		 bit (12) unal;

	dcl     1 four_bit_descriptor	 based aligned,	/* EIS 4-bit operand descriptor */
		2 address		 bit (18) unal,
		2 char		 bit (3) unal,
		2 bit		 bit (3) unal,
		2 length		 bit (12) unal;

	dcl     word		 (0:1) bit (36) aligned based (p);

	dcl     1 instruction	 based (p) aligned,
		2 base		 unaligned bit (3),
		2 offset		 unaligned bit (15),
		2 op_code		 unaligned bit (10),
		2 unused		 unaligned bit (1),
		2 ext_base	 unaligned bit (1),
		2 tag		 unaligned bit (6);

	dcl     1 half		 based (p) aligned,
		2 left		 unaligned bit (18),
		2 right		 unaligned bit (18);

	dcl     1 mod_factor	 aligned,
		2 ext_base	 bit (1) unal,
		2 length_in_reg	 bit (1) unal,
		2 indirect_descriptor bit (1) unal,
		2 tag		 bit (4) unal;

	dcl     1 name_pair		 aligned based (p),
		2 rel_ptr		 unaligned bit (18),/* ptr to ascii string */
		2 size		 unaligned bit (18);/* size of string */

	dcl     based_string	 aligned char (size) based (p);

/* builtins */

	dcl     (addr, addrel, char, divide, fixed, length, ltrim, min, null, ptr, rel, string, substr) builtin;






/*  */

/* initialize */

	current_source = -1;
	out_switch = RACINE_defs$mpcogout -> system_ptr;
	deltamax = pascal_context_$text_word_count - 1;
	map_ptr = pascal_context_$map_ptr;
	instructions = "0"b;
	bit_index = 1;
	abs_count = 0;
	last_index = -1;
	eis = "0"b;
	irand = 0;

/* invert procedures historical thread */

	proc_ptr = RACINE_defs$lastproc;
	p2 = null;
go_up:
	p1 = proc_ptr -> nextproc;
	proc_ptr -> nextproc = p2;
	if p1 ^= null then do;
		p2 = proc_ptr;
		RACINE_defs$lastproc, proc_ptr = p1;
		go to go_up;
	     end;


/*  */

	call ioa_$ioa_switch (out_switch, "^|BEGIN PROGRAM ^a", pascal_context_$object_entry_name);

	do delta = 0 to deltamax;			/* loop for each text section word */

	     if addr (delta) -> half.right = map_ptr -> statement_map.location then do;
						/* beginning of a statement map element */
		     map_place = fixed (rel (map_ptr)) - fixed (rel (pascal_context_$map_ptr));

		     proc_ptr = RACINE_defs$lastproc;
		     do while (proc_ptr ^= null);
			if proc_ptr -> blocknodeheader.blocktp = procblock then do;
				if proc_ptr -> procnode.codeend = map_place then do;
					if proc_ptr ^= RACINE_defs$programnode then
					     call ioa_$ioa_switch (out_switch, "  END ^[PROCEDURE^;FUNCTION^] ^a",
						proc_ptr -> blockbox -> proctype = proc_ptr -> blockbox, proc_ptr -> blockbox -> name32);
				     end;

				if proc_ptr -> procnode.codebegin = map_place then do;
					if proc_ptr ^= RACINE_defs$programnode then
					     call ioa_$ioa_switch (out_switch, "BEGIN ^[PROCEDURE^;FUNCTION^] ^a",
						proc_ptr -> blockbox -> proctype = proc_ptr -> blockbox, proc_ptr -> blockbox -> name32);
				     end;
				proc_ptr = proc_ptr -> nextproc;
			     end;
		     end;

		     if map_ptr -> statement_map.length ^= "0"b then do; /* print source line */
			     source_nbr = fixed (map_ptr -> statement_map.file, 8);
			     if source_nbr ^= current_source then do;
				     call pascal_sources_management_$return_source_ptr (source_nbr, source_addr);
				     current_source = source_nbr;
				end;
			     curr_index = fixed (map_ptr -> statement_map.start, 18);
			     call ioa_$ioa_switch (out_switch, "^6-STATEMENT ^d ON LINE ^d ^[OF FILE ^d^;^s^]^[ (CONT.)^]",
				fixed (map_ptr -> statement_map.statement, 5),
				fixed (map_ptr -> statement_map.line, 15),
				current_source ^= 0,
				current_source,
				curr_index = last_index);
			     if source_addr ^= null then
				if last_index ^= curr_index then
				     call ioa_$ioa_switch (out_switch, "^-^a",
					substr (source_string, curr_index + 1, fixed (map_ptr -> statement_map.length, 9)));
			end;
		     else
			call ioa_$ioa_switch (out_switch, "^6-CONSTANTS");

		     last_index = curr_index;
		     map_ptr = addrel (map_ptr, 2);

		end;

	     substr (rel_chars, 1, 1) = next_rel ();
	     substr (rel_chars, 2, 1) = next_rel ();
	     p = addrel (pascal_context_$object_ptr, delta);

	     if (name_ptr (delta) = null) then go to print_instruction;

	     used_name = name_ptr (delta) -> name32;

	     if substr (used_name, 1, 1) = "*" then do;
		     if used_name = "*octal" then do;
print_octal:
			     call ioa_$ioa_switch (out_switch,
				"^6.3b  ^a     ^12.3b",
				addr (delta) -> half.right, rel_chars, p -> word (0));
			end;
		     else if used_name = "*ascii" then do;
			     call ioa_$ioa_switch (out_switch,
				"^6.3b  ^a  ^3.3b ^3.3b ^3.3b ^3.3b^-^a",
				addr (delta) -> half.right, rel_chars, p -> a.b1, p -> a.b2, p -> a.b3, p -> a.b4, p -> a4);
			end;
		     else if used_name = "*nil" then do;
			     call ioa_$ioa_switch (out_switch,
				"^6.3b  ^a     ^12.3b^-nil pointer",
				addr (delta) -> half.right, rel_chars, p -> word (0));
print_next:
			     delta = delta + 1;
			     substr (rel_chars, 1, 1) = next_rel ();
			     substr (rel_chars, 2, 1) = next_rel ();
			     p = addrel (p, 1);
			     go to print_octal;
			end;
		     else if used_name = "*integer" then do;
			     call ioa_$ioa_switch (out_switch,
				"^6.3b  ^a     ^12.3b^-^d",
				addr (delta) -> half.right, rel_chars, p -> word (0), p -> word (0));
			end;
		     else if used_name = "*real" then do;
			     call ioa_$ioa_switch (out_switch,
				"^6.3b  ^a     ^12.3b^-^f",
				addr (delta) -> half.right, rel_chars, p -> word (0), p -> fl);
			     go to print_next;
			end;
		end;
	     else do;
print_instruction:
		     tag = "   ";
		     call ioa_$rsnnl ("^6.3b  ^a", line, len, addr (delta) -> half.right, rel_chars);
		     call ioa_$rsnnl ("^12.3b", cstring, len, p -> word (0));

		     if ^eis
		     then do;
			     mop = fixed (p -> instruction.op_code, 10);
			     op_code = opcode (mop);
			end;
		     else do;
			     mop = 0;
			end;

		     if op_code = ".... "
		     then do;
not_ins:			     substr (line, 13, 3) = "   ";
			     substr (line, 16, 5) = substr (cstring, 1, 5);
			     substr (line, 21, 7) = substr (cstring, 6, 7);
			     k = 28;
			     goto prt;
			end;

		     if num_words (mop) > 1
		     then do;

/* EIS */

			     eis = "1"b;
			     nrands = num_words (mop) - 1;
			     ndesc = num_desc (mop);
			     decimal = dtype (mop) = 2;
			     desc_word = desc_op (dtype (mop));

			     substr (line, 13, 4) = substr (cstring, 1, 3);
			     substr (line, 17, 4) = substr (cstring, 4, 3);
			     substr (line, 21, 4) = substr (cstring, 7, 3);
			     substr (line, 25, 3) = substr (cstring, 10, 3);

			     substr (line, 28, 1) = ht;
			     substr (line, 29, 5) = op_code;
			     substr (line, 34, 1) = ht;

			     k = 35;

			     do j = 1 to ndesc;
				string (mod_factor) = substr (p -> word (0), mf (j), 7);
				ebase (j) = mod_factor.ext_base;
				len_reg (j) = mod_factor.length_in_reg;

				substr (line, k, 1) = "(";
				k = k + 1;
				need_comma = "0"b;

				if ebase (j)
				then do;
					substr (line, k, 2) = "pr";
					k = k + 2;
					need_comma = "1"b;
				     end;

				if len_reg (j)
				then do;
					if need_comma
					then do;
						substr (line, k, 1) = ",";
						k = k + 1;
					     end;
					substr (line, k, 2) = "rl";
					k = k + 2;
					need_comma = "1"b;
				     end;

				if mod_factor.tag
				then do;
					if need_comma
					then do;
						substr (line, k, 1) = ",";
						k = k + 1;
					     end;
					ic (j) = mod_factor.tag = "0100"b; /* IC */
					substr (line, k, 2) = eis_modifier (fixed (mod_factor.tag, 4));
					k = k + 2;
				     end;
				else ic (j) = "0"b;

				substr (line, k, 2) = "),";
				k = k + 2;
			     end;


			     if substr (p -> word (0), 10, 1)
			     then do;
				     substr (line, k, 12) = "enablefault,";
				     k = k + 12;
				end;

			     if desc_word = "desc9a" | desc_word = "desc4a"
			     then if ndesc < 3
				then if (substr (op_code, 1, 3) ^= "scd") & (substr (op_code, 1, 3) ^= "tct")
				     then do;
					     if substr (op_code, 1, 3) = "scm"
					     then substr (line, k, 5) = "mask(";
					     else substr (line, k, 5) = "fill(";

					     k = k + 5;
					     substr (line, k, 3) = substr (cstring, 1, 3);
					     k = k + 3;
					     substr (line, k, 1) = ")";
					     k = k + 1;
					end;
				     else k = k - 1;/* flush trailing , */
				else k = k - 1;	/* .. */
			     else if desc_word = "descb"
			     then do;
				     substr (line, k, 5) = "fill(";
				     k = k + 5;
				     substr (line, k, 1) = digit (fixed (substr (p -> word (0), 1, 1), 1));
				     k = k + 1;
				     substr (line, k, 1) = ")";
				     k = k + 1;
				     if op_code ^= "cmpb "
				     then do;
					     substr (line, k, 6) = ",bool(";
					     k = k + 6;
					     j = fixed (substr (p -> word (0), 6, 4), 4);
					     m = length (bool_word (j));
					     if m > 0
					     then do;
						     substr (line, k, m) = bool_word (j);
						     k = k + m;
						end;
					     else do;
						     substr (line, k, 1) = digit (fixed (substr (p -> word (0), 6, 1), 1));
						     substr (line, k + 1, 1) = digit (fixed (substr (p -> word (0), 7, 3), 3));
						     k = k + 2;
						end;
					     substr (line, k, 1) = ")";
					     k = k + 1;
					end;
				end;
			     else if substr (p -> word (0), 11, 1)
			     then do;
				     substr (line, k, 5) = "round";
				     k = k + 5;
				end;
			     else k = k - 1;

			     irand = 0;
			     go to prt;
			end;

		     double, ignore_ic_mod = "0"b;

		     eis_desc = eis & desc_word ^= "arg";
		     if eis_desc
		     then do;
			     substr (line, 13, 2) = "  ";
			     substr (line, 15, 6) = substr (cstring, 2, 5);
			     substr (line, 21, 3) = substr (cstring, 7, 2);
			     substr (line, 24, 4) = substr (cstring, 9, 4);

			     substr (line, 28, 1) = ht;

			     if decimal
			     then desc_word = desc_op (2 + fixed (p -> four_bit_descriptor.bit, 3));
			     else if desc_word = "desc9a" & p -> four_bit_descriptor.bit = "100"b
			     then desc_word = "desc4a";
			     if irand > 1
			     then if op_code = "dtb  " | op_code = "mvne "
				then desc_word = desc_op (0);
				else ;
			     else if op_code = "btd  "
			     then desc_word = desc_op (0);

			     substr (line, 29, length (desc_word)) = desc_word;
			     k = length (desc_word) + 29;

			     ext_base = ebase (irand);
			     itag = len_reg (irand);
			     if itag
			     then tag = eis_modifier (fixed (substr (p -> descriptor.length, 9, 4), 4));
			     has_ic = ic (irand);
			     go to chk_ext;
			end;

		     if op_code = "rpd  " then goto set;
		     if op_code = "rpt  " then goto set;

		     if p -> instruction.unused then goto not_ins;

		     if num_desc (mop) ^= 0
		     then do;
			     tag = substr (binoct ((p -> instruction.tag)), 1, 2);
			     ignore_ic_mod = "1"b;
			     goto set;
			end;

		     if p -> instruction.tag
		     then do;
			     tag = modifier (fixed (p -> instruction.tag, 6));
			     if tag = "..." then goto not_ins;
			end;

set:		     substr (line, 13, 2) = "  ";
		     substr (line, 15, 6) = substr (cstring, 2, 5);
		     substr (line, 21, 5) = substr (cstring, 7, 4);
		     substr (line, 26, 2) = substr (cstring, 11, 2);

		     substr (line, 28, 1) = ht;
		     k = 29;

		     substr (line, k, 5) = op_code;

		     c = substr (line, k + 3, 1);

		     double = substr (op_code, 1, 2) = "df" | substr (op_code, 3, 2) = "aq" | substr (op_code, 4, 2) = "aq";

		     ext_base = p -> instruction.ext_base;
		     itag = p -> instruction.tag ^= "000000"b;
		     has_ic = p -> instruction.tag = "000100"b; /* IC */

		     k = 34;
chk_ext:
chk_ext1:		     substr (line, k, 1) = ht;
		     k = k + 1;

		     save_k = k;

		     if ^eis
		     then if p -> instruction.unused
			then do;

/* have rpd | rpt instruction */

				tag = digit (fixed (p -> instruction.tag, 6));
				offset = fixed (substr (p -> half.left, 1, 8), 8);
				ignore_ic_mod = "1"b;
				goto sk;
			     end;

		     if ext_base
		     then do;
			     substr (line, k, 4) = base (fixed (p -> instruction.base, 3));
			     offset = fixed (p -> instruction.offset, 15);
			     if offset > 16384 then offset = offset - 32768;
			     k = k + 4;
			     j = 13;
			end;
		     else do;
			     offset = fixed (p -> half.left, 18);

			     if offset > 131072
			     then do;
				     if tag = "du " then goto sk;
				     if tag = "dl " then goto sk;
				     offset = offset - 262144; /* 2's comp */
				end;

sk:			     j = 14;
			end;

		     substr (line, j, 1) = cstring;

		     call bin2dec (offset);

		     if eis_desc
		     then do;
			     if desc_word = "descb"
			     then fract_offset = fixed (p -> descriptor.char, 2) * bits_per_char + fixed (p -> descriptor.bit, 4);
			     else if substr (desc_word, 1, 5) = "desc4"
			     then fract_offset = fixed (p -> four_bit_descriptor.char, 3);
			     else fract_offset = fixed (p -> descriptor.char, 2);
			     if fract_offset ^= 0
			     then do;
				     substr (line, k, 1) = "(";
				     k = k + 1;
				     call bin2dec (fract_offset);
				     substr (line, k, 1) = ")";
				     k = k + 1;
				end;
			end;

		     if itag
		     then do;
			     substr (line, k, 1) = ",";
			     substr (line, k + 1, 3) = tag;

			     k = k + 2;
			     if substr (line, k, 1) ^= " " then k = k + 1;
			     if substr (line, k, 1) ^= " " then k = k + 1;
			end;
		     else if eis_desc
		     then do;
			     substr (line, k, 1) = ",";
			     k = k + 1;
			     if desc_word = "desc9ls" | desc_word = "desc4ls"
			     then do;
				     call bin2dec (fixed (substr (p -> descriptor.length, 7, 6), 6));
				     substr (line, k, 1) = ",";
				     k = k + 1;
				     scale = fixed (substr (p -> descriptor.length, 1, 6), 6);
				     if scale >= 32
				     then scale = scale - 64;
				     call bin2dec (scale);
				end;
			     else call bin2dec (fixed (p -> descriptor.length, 12));
			end;

		     if ignore_ic_mod then goto chk_base;

		     if has_ic
		     then do;
			     substr (line, k, 2) = htht;
			     k = k + 2;

			     pt = addrel (p, offset - irand);
			     substr (line, k, 6) = binoct (rel (pt));

			     k = k + 6;

			     if substr (op_code, 1, 1) = "t" then goto prt;
			     if fixed (rel (pt), 18) > deltamax then goto prt;

			     substr (line, k, 1) = " ";
			     k = k + 1;

equal:			     substr (line, k, 2) = "= ";
			     substr (line, k + 2, 12) = binoct (pt -> word (0));
			     k = k + 14;

			     if double
			     then do;
				     substr (line, k, 1) = " ";
				     substr (line, k + 1, 12) = binoct (pt -> word (1));
				     k = k + 13;
				end;

			     goto prt;
			end;

chk_base:		     if ^ext_base then goto prt;

		     if p -> instruction.base ^= "000"b & op_code ^= "tsp3" /* Assumes that tsp3 is used only to invoke operators */
		     then do;
			     if name_ptr (delta) ^= null then do;
				     substr (line, k, 34) = htht || name_ptr (delta) -> name32;
				     k = k + 34;
				end;

			     goto prt;
			end;

		     if itag then goto prt;

		     op_names_pt = addr (pascal_operator_names_$pascal_operator_names_);

		     if offset >= operator_names.first & offset <= operator_names.last
		     then do;
			     pt = addr (operator_names.names (offset));
			     goto str_info;
			end;

		     else if offset >= operator_names.first_special & offset <= operator_names.last_special
		     then do;
			     do j = 1 to operator_names.number_special;
				if operator_names.special (j).offset = offset
				then do;
					pt = addr (operator_names.special (j).namep);
					goto str_info;
				     end;
			     end;
			     goto prt;
			end;
str_info:		     size = fixed (pt -> name_pair.size, 18);
		     pt = ptr (pt, pt -> name_pair.rel_ptr);

		     substr (line, k, 2) = htht;
		     k = k + 2;

		     substr (line, k, size) = pt -> based_string;
		     k = size + k;

prt:		     call ioa_$ioa_switch (out_switch, "^a", substr (line, 1, k - 1));

		     if eis
		     then do;
			     irand = irand + 1;
			     if irand > nrands
			     then do;
				     eis = "0"b;
				     irand = 0;
				end;
			     else if irand > ndesc
			     then op_code, desc_word = "arg";
			end;

		     if eis then do;
			     substr (rel_chars, 1, 1) = next_rel ();
			     substr (rel_chars, 2, 1) = next_rel ();
			     p = addrel (p, 1);
			     delta = delta + 1;
			     go to print_instruction;
			end;
		end;


	end;					/* loop on text words */


	call ioa_$ioa_switch (out_switch, "END PROGRAM ^a", pascal_context_$object_entry_name);
						/*  */

bin2dec: proc (number);

	dcl     number		 fixed bin (18);

	substr (line, k, length (ltrim (char (number)))) = ltrim (char (number));
	k = k + length (ltrim (char (number)));

     end;

binoct: proc (bits) returns (char (12));

	dcl     bit36		 bit (36);
	dcl     string12		 char (12);
	dcl     bits		 bit (*) aligned;

	bit36 = bits;
	call ioa_$rsnnl ("^12.3b", string12, len, bit36);

	return (string12);

     end;


next_rel: proc returns (char (1));

	if abs_count ^= 0 then do;
		abs_count = abs_count - 1;
		return ("a");
	     end;

	if substr (rel_info (txt).string, bit_index, 1) = "0"b then do;
		bit_index = bit_index + 1;
		return ("a");
	     end;

	relbits = substr (rel_info (txt).string, bit_index, 5);
	bit_index = bit_index + 5;

	if relbits = def_rel then return ("d");
	if relbits = text_rel then return ("t");
	if relbits = symb_rel then return ("s");
	if (relbits = link15) | (relbits = link18) then return ("l");
	if (relbits = int15) | (relbits = int18) then return ("i");
	if relbits = expabs then do;
		abs_count = fixed (substr (rel_info (txt).string, bit_index, 10), 10) - 1;
		bit_index = bit_index + 10;
		return ("a");
	     end;

	return (".");

     end next_rel;


     end pascal_display_text;
