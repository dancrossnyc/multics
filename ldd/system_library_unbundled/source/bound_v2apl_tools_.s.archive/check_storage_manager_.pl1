/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to check an allocation package. */
/* PG 760312 */
/* Modified 790328 by PG to bring up to coding standards, and to put memory
   segment into the user's home dir. */

check_storage_manager_$allocate:
     procedure (bv_storage_ptr, bv_n_words);

/* parameters */

dcl	(
	bv_storage_ptr	ptr unal,
	bv_n_words	fixed bin (18)
	)		parameter;

/* automatic */

dcl	code		fixed bin (35),
	dname		char (168),
	ename		char (32),
	offset		fixed bin,
	person_id		char (22),
	project_id	char (9),
	segno		fixed bin,
	segx		fixed bin;

/* internal static */

dcl	memory_seg_ptr	ptr internal static initial (null);

/* based */

dcl	1 memory		aligned based (memory_seg_ptr),
	  2 last_memory_slot
			fixed bin,
	  2 segno		(35) fixed bin,
	  2 allocated	(35) bit (262144) unaligned;

/* entries */

dcl	com_err_		entry options (variable),
	cu_$cl		entry (),
	hcs_$initiate	entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
	hcs_$truncate_seg	entry (ptr, fixed bin (18), fixed bin (35)),
	ioa_		entry options (variable),
	user_info_	entry options (variable);

/* builtins */

dcl	(baseno, binary, copy, lbound, hbound, null, rel, rtrim, substr)
			builtin;

/* program */

	if memory_seg_ptr = null
	then call initialize;

	segno = binary (baseno (bv_storage_ptr), 15);
	offset = binary (rel (bv_storage_ptr), 18) + 1;	/* convert to 1-origin */

	do segx = lbound (memory.segno, 1) to last_memory_slot while (memory.segno (segx) ^= segno);
	end;

	if segx <= last_memory_slot
	then do;
		if substr (memory.allocated (segx), offset, bv_n_words) ^= ""b
		then do;
			call ioa_ ("check_storage_manager_: ^d words at ^p reuses storage", bv_n_words, bv_storage_ptr);
			call cu_$cl;
		     end;
	     end;
	else if last_memory_slot < hbound (memory.segno, 1)
	then do;
		segx, last_memory_slot = last_memory_slot + 1;
		memory.segno (segx) = segno;
	     end;
	else do;
		call ioa_ ("check_storage_manager_: no more room for memory maps");
		return;
	     end;


	substr (memory.allocated (segx), offset, bv_n_words) = copy ("1"b, bv_n_words);
	return;

free:
     entry (bv_storage_ptr, bv_n_words);

	if memory_seg_ptr = null
	then call initialize;

	segno = binary (baseno (bv_storage_ptr), 15);
	offset = binary (rel (bv_storage_ptr), 18) + 1;	/* convert to 1-origin */

	do segx = lbound (memory.segno, 1) to last_memory_slot while (memory.segno (segx) ^= segno);
	end;

	if segx > last_memory_slot
	then do;
		call ioa_ ("check_storage_manager_: no map for ^d at ^p", bv_n_words, bv_storage_ptr);
		call cu_$cl;
		return;
	     end;

	if (^substr (memory.allocated (segx), offset, bv_n_words)) ^= ""b
	then do;
		call ioa_ ("check_storage_manager_: not all words allocated at free time: ^d at ^p", bv_n_words,
		     bv_storage_ptr);
		call ioa_ ("pattern is ^b", substr (memory.allocated (segx), offset, bv_n_words));
		call cu_$cl;
	     end;

	substr (memory.allocated (segx), offset, bv_n_words) = ""b;
	return;

clear:
     entry ();

	call initialize;
	return;

initialize:
     procedure;

	if memory_seg_ptr = null			/* have we found the segment yet? */
	then do;					/* no */
		call user_info_ (person_id, project_id);
		dname = ">user_dir_dir>" || rtrim (project_id) || ">" || person_id;
		ename = rtrim (person_id) || ".csm";

		call hcs_$initiate (dname, ename, "", 0b, 0b, memory_seg_ptr, code);
		if memory_seg_ptr = null
		then do;				/* not there, try creating it. */
			call hcs_$make_seg (dname, ename, "", 01010b, memory_seg_ptr, code);
			if memory_seg_ptr = null
			then do;
				call com_err_ (code, "check_storage_manager_", "Cannot create ^a>^a", dname, ename);
				return;
			     end;

			call ioa_ ("check_storage_manager_: Creating ^a>^a", dname, ename);
		     end;
	     end;

	call hcs_$truncate_seg (memory_seg_ptr, 0, code);
	if code ^= 0
	then do;
		call com_err_ (code, "check_storage_manager_", "Cannot truncate ^a>^a to 0 words.", dname, ename);
		memory_seg_ptr = null;
		return;
	     end;

	memory.last_memory_slot = lbound (memory.segno, 1) - 1;
	return;

     end /* initialize */;

     end /* check_storage_manager_ */;
