/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Utility command for Version 2 APL.
   Dumps APL beads in a useful form.
   Written by Dave Moon.
   Modified 790316 by PG to change name and make minor changes.
*/

apl_display_bead:
adb:
     procedure options (variable);

/* parameter */

dcl	(
	p_bead_ptr	ptr,
	p_brief_mode	bit (1) aligned
	)		parameter;

/* automatic */

dcl	arg_len		fixed bin (21),
	arg_ptr		ptr,
	brief		bit (1) aligned,
	code		fixed bin (35),
	command		bit (1) aligned,
	data_elements	fixed bin (21),
	n_args		fixed bin,
	p2b		ptr,
	tp		ptr,
	vcs		char (100),
	n		fixed bin;

/* based */

dcl	arg_string	char (arg_len) based (arg_ptr);

/* builtins */

dcl	(fixed, null, rel, string, substr, unspec)
			builtin;

/* entries */

dcl	cu_$arg_count	entry (fixed bin),
	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	cv_ptr_		entry (char (*), fixed bin (35)) returns (ptr),
	cv_ptr_$terminate	entry (ptr),
	(ioa_, com_err_)	entry options (variable);

/* external static */

dcl	(error_table_$badopt, error_table_$noarg)
			fixed bin (35) external static;

/* internal static */

dcl	function_classes	(0:4) char (8) int static options (constant)
			init ("normal", "locked", "ext zfn", "ext mfn", "ext dfn");

/* include files */

%include apl_number_data;
%include apl_bead_format;
%include apl_value_bead;
%include apl_symbol_bead;
%include apl_group_bead;
%include apl_operator_bead;
%include apl_function_bead;
%include apl_lexed_function_bead;
%include apl_list_bead;
%include apl_ws_info;

/* program */

	call cu_$arg_count (n_args);

	if (n_args = 0) | (n_args > 2)
	then do;
		call com_err_ (error_table_$noarg, "apl_display_bead", "Usage: adb virtual_ptr {-brief|-bf}");
		return;
	     end;

	brief = "0"b;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);

	p2b = cv_ptr_ (arg_string, code);
	if code ^= 0
	then do;
		call com_err_ (code, "apl_display_bead", "^a", arg_string);
		return;
	     end;

	call cu_$arg_ptr (2, arg_ptr, arg_len, code);
	if code = 0
	then if arg_string = "-bf" | arg_string = "-brief"
	     then brief = "1"b;
	     else do;
		     call com_err_ (error_table_$badopt, "apl_display_bead", "^a", arg_string);
		     return;
		end;

	command = "1"b;
	go to rejoinder;

apl_display_bead_:
     entry (p_bead_ptr, p_brief_mode);

	p2b = p_bead_ptr;
	brief = p_brief_mode;
	command = "0"b;

rejoinder:
	if p2b = null ()
	then do;
		call ioa_ ("pointer is null.");
		return;
	     end;

	if p2b -> general_bead.type.symbol
	then call ioa_ (
		"symbol bead ^p, reference_count = ^d, size = ^dd = ^oo^/^-named ^a^/^-hash link ^p^/^-meaning ^p^/", p2b,
		p2b -> general_bead.reference_count, fixed (p2b -> general_bead.size, 18),
		fixed (p2b -> general_bead.size, 18), /*once in decimal, once in octal */ p2b -> symbol_bead.name,
		p2b -> symbol_bead.hash_link_pointer, p2b -> symbol_bead.meaning_pointer);

	else if p2b -> general_bead.type.group
	then do;
		call ioa_ ("group bead ^p, reference_count = ^d, size = ^dd = ^oo^/^-with ^d members:", p2b,
		     p2b -> general_bead.reference_count, fixed (p2b -> general_bead.size, 18),
		     fixed (p2b -> general_bead.size, 18), p2b -> group_bead.number_of_members);
		do n = 1 to p2b -> group_bead.number_of_members;
		     call ioa_ ("^2-^p", p2b -> group_bead.member (n));
		end;
		call ioa_ ("");
	     end;

	else if p2b -> general_bead.type.operator
	then call ioa_ (
		"operator bead ^p^/^-bits_for_lex = ^o, bits_for_parse = ^o, op = ^dd, op2 = ^dd, type_code = ^dd^/", p2b,
		fixed (string (p2b -> operator_bead.bits_for_lex), 18),
		fixed (substr (unspec (p2b -> operator_bead.bits_for_parse), 1, 18), 18),
		fixed (p2b -> operator_bead.op1, 9), fixed (p2b -> operator_bead.op2, 9), p2b -> operator_bead.type_code);

	else if p2b -> general_bead.type.value
	then do;
		if p2b -> general_bead.type.list_value
		then vcs = "list";
		else if p2b -> general_bead.type.character_value
		then vcs = "character";
		else if p2b -> general_bead.type.zero_or_one_value
		then vcs = "0 or 1";
		else if p2b -> general_bead.type.integral_value
		then vcs = "integral";
		else if p2b -> general_bead.type.numeric_value
		then vcs = "numeric";
		else vcs = "??? no value_type bits on ???";
		if p2b -> general_bead.type.label
		then vcs = "(label) " || vcs;

		call ioa_
		     (
		     "value bead ^p, reference_count = ^d, size = ^dd = ^oo^/^-data_type = ^a^/^-total_data_elements = ^d, rhorho = ^d, data_pointer = ^p"
		     , p2b, p2b -> general_bead.reference_count, fixed (p2b -> general_bead.size, 18),
		     fixed (p2b -> general_bead.size, 18), vcs, p2b -> value_bead.total_data_elements,
		     p2b -> value_bead.rhorho, p2b -> value_bead.data_pointer);
		if p2b -> value_bead.rhorho ^= 0
		then do;
			call ioa_ ("^-rho vector:");
			do n = 1 to p2b -> value_bead.rhorho;
			     call ioa_ ("^2-^d", p2b -> value_bead.rho (n));
			end;
		     end;

		call check_ptr_alignment (p2b, "value_bead ptr");

		if p2b -> value_bead.numeric_value
		then call check_ptr_alignment ((p2b -> value_bead.data_pointer), "value_bead.data_pointer");

/* now display the actual values (ugh) */

		if ^brief & (p2b -> value_bead.total_data_elements > 0)
		then do;
			call ioa_ ("^-values:");
			data_elements = p2b -> value_bead.total_data_elements;

			if p2b -> value_bead.numeric_value
			then do n = 1 to data_elements;
				call ioa_ ("^2-^e", p2b -> value_bead.data_pointer -> numeric_datum (n - 1));
			     end;
			else call ioa_ ("^a", p2b -> value_bead.data_pointer -> character_string_overlay);
		     end;
		call display_value_stack_ptr;
	     end;
	else if p2b -> general_bead.type.lexed_function
	then do;
		call ioa_ ("lexed function bead ^p, reference_count = ^d, size = ^dd = ^oo", p2b,
		     p2b -> general_bead.reference_count, fixed (p2b -> general_bead.size, 18),
		     fixed (p2b -> general_bead.size, 18));
		call ioa_ ("^5xname = ^p, bits_for_parse = ^w", p2b -> lexed_function_bead.name,
		     unspec (p2b -> lexed_function_bead.bits_for_parse));
		call ioa_ ("^5xstmts = ^d, locals = ^d, labels = ^d", p2b -> lexed_function_bead.number_of_statements,
		     p2b -> lexed_function_bead.number_of_localized_symbols, p2b -> lexed_function_bead.number_of_labels);
		call ioa_ ("^5xlabel_values_ptr = ^p^/^5xstatement_map_ptr =^p^/^5xlexeme_array_ptr = ^p",
		     p2b -> lexed_function_bead.label_values_ptr, p2b -> lexed_function_bead.statement_map_ptr,
		     p2b -> lexed_function_bead.lexeme_array_ptr);
		call ioa_ ("^5xlocalized symbols:");
		do n = 1 to p2b -> lexed_function_bead.number_of_localized_symbols;
		     tp = p2b -> lexed_function_bead.localized_symbols (n);
		     if tp = null
		     then call ioa_ ("^-null");
		     else if tp -> general_bead.symbol
			then call ioa_ ("^-^10p ^a", tp, tp -> symbol_bead.name);
			else call ioa_ ("^-^10p op1 = ^d (system var)", tp, tp -> operator_bead.op1);
		end;
		call ioa_ ("^5xlabel values:");
		do n = 1 to p2b -> lexed_function_bead.number_of_labels;
		     call ioa_ ("^-^p", p2b -> lexed_function_bead.label_values (n));
		end;
		call ioa_ ("^5xstatement map:");
		do n = 1 to p2b -> lexed_function_bead.number_of_statements;
		     call ioa_ ("^-^d^-^d", n, p2b -> lexed_function_bead.statement_map (n));
		end;
		if ^brief
		then do;
			call ioa_ ("^5xlexeme array:");
			do n = 1
			     to p2b
			     -> lexed_function_bead.statement_map (p2b -> lexed_function_bead.number_of_statements);
			     call ioa_ ("^-^d^-^p", n, p2b -> lexed_function_bead.lexeme_array (n));
			end;
		     end;
		call ioa_ ("end of lexed_function_bead ^p", p2b);
	     end;
	else if p2b -> general_bead.type.function
	then call ioa_
		(
		"function bead ^p, reference_count = ^d, size = ^dd = ^oo,^/^-l-f-b-p = ^p, class = ^a, stop_control = ^p, trace_control = ^p, text_length = ^d, text:^/^a^/"
		, p2b, p2b -> function_bead.reference_count, fixed (p2b -> function_bead.size, 18),
		fixed (p2b -> function_bead.size, 18), p2b -> function_bead.lexed_function_bead_pointer,
		function_classes (p2b -> function_bead.class), p2b -> function_bead.stop_control_pointer,
		p2b -> function_bead.trace_control_pointer, p2b -> function_bead.text_length, p2b -> function_bead.text);

	else if p2b -> general_bead.type.list_value
	then do;
		call ioa_ ("list bead ^p, reference_count = ^d, size = ^dd = ^oo^/^d members:^2/", p2b,
		     p2b -> general_bead.reference_count, fixed (p2b -> general_bead.size, 18),
		     fixed (p2b -> general_bead.size, 18), p2b -> list_bead.number_of_members);
		do n = 1 to p2b -> list_bead.number_of_members;
		     call ioa_ ("^-member #^d at ^p, bits = ^w", n, p2b -> list_bead.member_ptr (n),
			p2b -> list_bead.bits (n));
		     call apl_display_bead_ ((p2b -> list_bead.member_ptr (n)), (brief));
		end;
		call ioa_ ("^/end list bead ^p^2/", p2b);
		call display_value_stack_ptr;
	     end;

	else call ioa_ ("some random bead ^p, type field = ^o, reference_count = ^d, size = ^dd = ^oo", p2b,
		fixed (string (p2b -> general_bead.type), 18), p2b -> general_bead.reference_count,
		fixed (p2b -> general_bead.size, 18), fixed (p2b -> general_bead.size, 18));

	if command
	then call cv_ptr_$terminate (p2b);

	return;

check_ptr_alignment:
     procedure (p_ptr, p_msg);

dcl	(
	p_ptr		ptr,
	p_msg		char (*)
	)		parameter;

/* program */

	if substr (rel (p_ptr), 18, 1)
	then call ioa_ ("^a (^p) is not even-word aligned!", p_msg, p_ptr);

     end /* check_ptr_alignment */;

display_value_stack_ptr:
     procedure;

	if ws_info_ptr ^= null
	then call ioa_ ("ws_info.value_stack_ptr = ^p", ws_info.value_stack_ptr);

     end;

     end;
