/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_display_map:
adm:
     procedure;

/* This program dumps out the apl storage system data. */

/* Written 750905 by PG to track down hideous re-used storage bug */
/* Modified 790327 by PG to rename from apl_dump_map, and to print more info */

/* automatic */

declare	global_storage_system_data_pointer
			ptr,
	segx		fixed bin;

/* builtins */

declare	(binary, divide, hbound, lbound, mod, null, string, unspec)
			builtin;

/* entries */

declare	com_err_		entry options (variable),
	ioa_		entry options (variable);

/* internal static */

declare	(
	my_name		char (15) initial ("apl_display_map"),
	type_names	dim (4) char (12) varying initial ("available", "value stack", "little seg", "big seg")
	)		internal static options (constant);

/* include files */

%include apl_number_data;
%include apl_ws_info;
%include apl_storage_system_data;

/* program */

	if ws_info_ptr = null
	then do;
		call com_err_ (0, my_name, "No active workspace.");
		return;
	     end;
	global_storage_system_data_pointer = ws_info.alloc_free_info_ptr;

	call ioa_ ("storage map at ^p, size = ^d", global_storage_system_data_pointer, binary (rel (last_map), 18));
	call ioa_ ("last_map = ^p", global_storage_system_data.last_map);
	call ioa_ ("cur_little_seg = ^d", current_little_bead_seg);
	call ioa_ ("cur_little_scan = ^d", current_little_scan_pos);
	call ioa_ ("cur_big_seg = ^d", current_big_bead_seg);
	call ioa_ ("cur_big_scan = ^d", current_big_scan_pos);

	do segx = lbound (seg_list, 1) to hbound (seg_list, 1);
	     if seg_list (segx).usage > 0
	     then call dump_map (segx);
	end;

	return;

dump_map:
     procedure (bv_seg_index);

/* parameters */

declare	bv_seg_index	fixed bin;

/* automatic */

declare	(fatherx, mapx, segx, type)
			fixed bin;
declare	message		char (16);

/* program */

	segx = bv_seg_index;
	type = seg_list.usage (segx);

	if (type = 1) | (type = 2)
	then do;
		call ioa_ ("^/map ^2d for ^p, ^a", segx, seg_list.pointer (segx), type_names (type));
		return;
	     end;

	seg_map_p = seg_list.pointer (segx);

	call ioa_ ("^/map ^2d for ^p, ^a", segx, seg_map.seg_ptr, type_names (type));
	call ioa_ ("map_ptr = ^p^/smallest_piece = ^d", seg_map_p, seg_map.smallest_piece);
	call ioa_ ("num_entries = ^d^/last_entry = ^d", seg_map.number_of_entries, seg_map.last_entry_used);
	call ioa_ ("amount_used = ^d^/words_free = ^d", seg_map.amount_of_seg_used, seg_list (segx).words_free);

	do mapx = lbound (seg_map.map, 1) to seg_map.last_entry_used;
	     if string (map (mapx)) ^= ""b
	     then do;				/* check that this entry is in proper relation to dad */
		     message = "";			/* assume all ok */
		     fatherx = divide (mapx, 2, 17, 0);
		     if (fatherx ^= mapx) & (fatherx ^= 0)
		     then do;
			     if string (map (fatherx)) = ""b
						/* not good...tree is unconnected... */
			     then message = "no father";
			     else if mod (mapx, 2) = 1/* mapx ODD means it is RIGHT son */
			     then if map.rel_loc (fatherx) ^< map.rel_loc (mapx)
				then message = "father ^< son";
						/* dum da dum dum */
				else ;
			     else if map.rel_loc (fatherx) ^> map.rel_loc (mapx)
			     then message = "father ^> son";
			     else ;

			end;
		     call ioa_ ("^3d ^6o ^6o ^a", mapx, binary (map.size (mapx)), binary (map.rel_loc (mapx)), message);
		end;
	end;

     end;

     end /* apl_display_map */;
