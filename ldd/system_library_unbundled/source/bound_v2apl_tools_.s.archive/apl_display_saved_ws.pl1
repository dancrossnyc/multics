/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Program to symbolically dump a saved Version 2 APL workspace. */
/* PG 740126
   Modified 740626 by PG to print bead info.
   Modified 741031 by PG to print stack info.
   Modified 750404 b y PG to correctly print value beads
   Modified 771003 by PG to change program name and print a little more info
   Modified 790328 by PG to use iox_ and clock builtin.
*/

apl_display_saved_ws:
adsw:
     procedure;

/* entries */

declare	(ioa_, ioa_$nnl)	entry options (variable),
	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (20), fixed bin (35)),
	com_err_		entry options (variable),
	date_time_	entry (fixed bin (71), char (*)),
	expand_pathname_$add_suffix
			entry (char (*), char (*), char (*), char (*), fixed bin (35)),
	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
	hcs_$terminate_noname
			entry (ptr, fixed bin (35)),
	iox_$put_chars	entry (ptr, ptr, fixed bin (21), fixed bin (35));

/* automatic */

declare	argument_pointer	ptr,
	argument_length	fixed bin (20),
	bead_index	fixed bin,
	code		fixed bin (35),
	data_elements	fixed bin (21),
	directory_name	char (168),
	entry_name	char (32),
	bitcount		fixed bin (24),
	date_string	char (24),
	ws_ptr		(0:63) ptr aligned,
	n		fixed bin (21),
	p		ptr;

/* external static */

declare	iox_$user_output	ptr external static;

/* internal static initial */

declare	my_name		char (20) internal static options (constant) initial ("apl_display_saved_ws");
declare	value_name	(0:5) char (9) internal static
			initial ("Unknown", "Boolean", "Integral", "Numeric", "Character", "List");
declare	frame_name	(5) char (10) aligned internal static options (constant)
			initial ("SUSPENDED", "FUNCTION", "EVALUATED", "EXECUTE", "SAVE");
declare	save_frame_type	fixed bin internal static initial (5);

/* based */

declare	argument		char (argument_length) based (argument_pointer),
	based_fixed_bin	fixed bin based,
	varying_string	char (n) varying based;

/* builtins */

declare	(addr, addrel, baseno, clock, divide, fixed, hbound, index, lbound, length, min, null, pointer, ptr, rel, reverse,
	string)		builtin;

/* include files */

%include apl_number_data;
%include apl_bead_format;
%include apl_value_bead;
%include apl_symbol_bead;
%include apl_operator_bead;
%include apl_ws_info;
%include apl_saved_ws;

	call cu_$arg_ptr (1, argument_pointer, argument_length, code);
	if code ^= 0
	then do;
		call com_err_ (code, my_name, "Usage: ^a pathname", my_name);
		return;
	     end;

	call expand_pathname_$add_suffix (argument, "sv.apl", directory_name, entry_name, code);
	if code ^= 0
	then do;
		call com_err_ (code, my_name, "^a", argument);
		return;
	     end;

	call hcs_$initiate_count (directory_name, entry_name, "", bitcount, 0, saved_ws_info_pointer, code);
	if saved_ws_info_pointer = null
	then do;
		call com_err_ (code, my_name, "^a>^a", directory_name, entry_name);
		return;
	     end;

	ws_ptr (0) = saved_ws_info_pointer;

	call date_time_ (clock (), date_string);

	call ioa_ ("^/^-^a>^a^-^a^/", directory_name, entry_name, date_string);

	call date_time_ (saved_ws_info.time_saved, date_string);

	call ioa_ ("workspace:^-^a^/saved by:^2-^a^/saved on:^2-^a^/lock:^2-^a^/user number:^-^5d", saved_ws_info.wsid,
	     saved_ws_info.user_name, date_string, saved_ws_info.lock, saved_ws_info.user_number);

	call ioa_ ("version:^2-^5d^/components:^-^5d^/size in words:^-^5d", saved_ws_info.save_version,
	     saved_ws_info.highest_segment + 1, divide (bitcount + 35, 36, 24, 0));

	call ioa_ ("digits:^2-^5d^/width:^2-^5d^/origin:^2-^5d^/float_origin:^-^e^/link:^-^15d^/fuzz:^2-^e",
	     saved_ws_info.digits, saved_ws_info.width, saved_ws_info.index_origin, saved_ws_info.float_index_origin,
	     saved_ws_info.random_link, saved_ws_info.fuzz);

	call ioa_ ("integer fuzz:^-^e", saved_ws_info.integer_fuzz);

	call ioa_ ("latent expression:^-bead ^d", saved_ws_info.latent_expression);

	call ioa_ ("number of symbols:^-^5d^/number of beads:^-^5d", saved_ws_info.number_of_symbols,
	     saved_ws_info.total_beads);

/* print bead information */

	saved_bead_count = saved_ws_info.total_beads;
	bead_description_pointer = pointer (saved_ws_info_pointer, rel (saved_ws_info.bead_table_pointer));

	do bead_index = lbound (bead_description_table (*), 1) to hbound (bead_description_table (*), 1);
	     call display_bead (bead_index, bead_pointer (bead_index));
	end;

/* print stack information */

	do saved_frame_pointer = un_pseudo_pointer (saved_ws_info.current_parse_frame_ptr)
	     repeat un_pseudo_pointer (saved_pf.last_parse_frame_ptr) while (saved_frame_pointer ^= null);
	     call ioa_ ("^/^a FRAME at ^6.3b", frame_name (saved_pf.parse_frame_type), rel (saved_frame_pointer));

	     if saved_pf.parse_frame_type = save_frame_type
	     then do;
		     call ioa_ ("saved_symbol_count = ^d", saved_sf.saved_symbol_count);
		     call ioa_ ("Symbol  Meaning");
		     do bead_index = lbound (saved_sf.symbol_list, 1) to hbound (saved_sf.symbol_list, 1);
			call ioa_ ("^6d^3x^6d", saved_sf.symbol_list (bead_index).symbol_pointer,
			     saved_sf.symbol_list (bead_index).saved_meaning_pointer);
		     end;
		     go to frame_type (5);
		end;

	     call ioa_ ("function_bead_ptr = ^d", saved_pf.function_bead_ptr);
	     call ioa_ ("current_parseme = ^d", saved_pf.current_parseme);
	     call ioa_ ("current_lexeme = ^d", saved_pf.current_lexeme);
	     call ioa_ ("current_line_number = ^d", saved_pf.current_line_number);
	     call ioa_ ("return_point = ^d", saved_pf.return_point);
	     call ioa_ ("put_result = ^d", saved_pf.put_result);
	     call ioa_ ("print_final_value = ""^1b""b", saved_pf.print_final_value);

	     go to frame_type (saved_pf.parse_frame_type);

frame_type (1):					/* suspended frame */
frame_type (3):					/* evaluated frame */
	     if saved_ws_info.save_version = 3
	     then p = addr (v3_saved_pf.old_meaning_ptrs (1));
	     else p = addr (saved_pf.old_meaning_ptrs (1));

	     n = length (p -> varying_string);
	     call ioa_ ("re-lex source = ""^1b""b", saved_pf.re_lex_source);
	     call ioa_ ("Source: ^a", p -> varying_string);
	     go to end_loop;

frame_type (2):					/* function frame */
	     if saved_ws_info.save_version > 3
	     then do;				/* can print old meanings */
		     call ioa_ ("number_of_ptrs = ^d", saved_pf.number_of_ptrs);
		     do bead_index = 1 to saved_pf.number_of_ptrs;
			call ioa_ ("old(^d) = ^d", bead_index, saved_pf.old_meaning_ptrs (bead_index));
		     end;
		end;
	     go to end_loop;

frame_type (4):					/* execute frame */
	     go to end_loop;

frame_type (5):					/* save frame */
	     go to end_loop;

end_loop:
	end;

	call hcs_$terminate_noname (saved_ws_info_pointer, code);

	return;

un_pseudo_pointer:
     procedure (bv_pseudo_pointer) returns (ptr);

/* parameters */

declare	bv_pseudo_pointer	ptr unaligned;

/* program */

	if bv_pseudo_pointer = null
	then return (null);
	else return (addrel (ws_ptr (fixed (baseno (bv_pseudo_pointer), 18, 0)), rel (bv_pseudo_pointer)));

     end un_pseudo_pointer;

display_bead:
     procedure (bv_bead_index, bv_bead_pointer);

/* parameters */

declare	(
	bv_bead_index	fixed bin,
	bv_bead_pointer	ptr unaligned
	)		parameter;

/* automatic */

declare	i		fixed bin,
	more		bit (1) aligned,
	p		ptr;

/* program */

	saved_bead_pointer = un_pseudo_pointer (bv_bead_pointer);

	call ioa_ ("^/BEAD ^d at ^6.3b, size = ^dd, ^oo", bv_bead_index, rel (bv_bead_pointer),
	     fixed (saved_general_bead.size), fixed (saved_general_bead.size));

	go to type (index (string (saved_general_bead.bead_type), "1"b));

type (0):
type (1):						/* operator */
type (6):						/* label */
type (7):						/* shared variable */
type (8):						/* lexed function */
	call ioa_ ("Impossible type! header = ^w", saved_bead_pointer -> based_fixed_bin);
	return;

type (2):						/* symbol */
	call ioa_ ("Symbol '^a'", saved_sb.name);

	if saved_sb.meaning_pointer ^= 0
	then call ioa_ ("meaning is bead ^d", saved_sb.meaning_pointer);

	return;

type (3):						/* value */
	data_elements = saved_value_bead.total_data_elements;
	i = index (reverse (string (saved_value_bead.data_type)), "1"b);
	call ioa_ ("^a value: total_data_elements = ^d, rhorho = ^d, data_pointer = ^w", (value_name (i)), data_elements,
	     saved_value_bead.rhorho, saved_value_bead.data_pointer);

	if saved_value_bead.rhorho > 0
	then do i = 0 by 1 while (i < saved_value_bead.rhorho);
		call ioa_ ("rho(^d) = ^d", i + 1, saved_value_bead.rho (i + 1));
	     end;

	if data_elements = 0
	then return;

	p = ptr (saved_bead_pointer, rel (saved_value_bead.data_pointer));

	more = "0"b;

	if saved_value_bead.character_value
	then do;
		call iox_$put_chars (iox_$user_output, p, min (70, data_elements), code);
		call ioa_ ("");
		if data_elements > 70
		then more = "1"b;
	     end;
	else if saved_value_bead.zero_or_one_value
	then do;
		if data_elements > 70
		then do;
			data_elements = 70;
			more = "1"b;
		     end;

		call ioa_ ("""^vb""b", data_elements, p -> saved_boolean_datum);
	     end;
	else do;
		if data_elements > 4
		then do;
			data_elements = 4;
			more = "1"b;
		     end;

		do i = 0 by 1 while (i < data_elements);
		     call ioa_ ("^19e", p -> numeric_datum (i));
		end;
	     end;

	if more
	then call ioa_ ("(more)");

	return;

type (4):						/* function */
	call ioa_ ("Function: class = ^d, text_length = ^d", saved_fb.class, saved_fb.text_length);

	if saved_fb.stop_control_pointer ^= 0
	then call ioa_ ("stop control is bead ^d", saved_fb.stop_control_pointer);

	if saved_fb.trace_control_pointer ^= 0
	then call ioa_ ("trace control is bead ^d", saved_fb.trace_control_pointer);

	call ioa_$nnl ("text = ");
	call iox_$put_chars (iox_$user_output, addr (saved_fb.text), length (saved_fb.text), code);

	return;

type (5):						/* group */
	call ioa_ ("Group of ^d members", saved_gb.number_of_members);

	do i = 0 by 1 while (i < saved_gb.number_of_members);
	     call ioa_ ("member(^d) = bead ^d", i + 1, saved_gb.member (i + 1));
	end;

	return;

     end /* display_bead */;

     end /* apl_display_saved_ws */;
