/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

apl_display_si:
adsi:
     procedure;

/* builtins */

dcl	(fixed, hbound, lbound, null)
			builtin;

/* entries */

dcl	ioa_		entry options (variable);

/* automatic */

declare	(p, parse_frame_ptr, rsp)
			ptr;
declare	local		fixed bin;
declare	(i, symbol_number)	fixed bin;
declare	n		fixed bin (21);
declare	rs_type		fixed bin;

/* named constants (internal static initial) */

declare	(
	frame_names	dimension (5) char (12) varying
			initial ("suspended", "function", "evaluated", "execute", "save"),
	rs_type_name	dimension (0:11) char (4)
			initial ("eol", "bol", "val", "op", "(", ")", "[", "]sb", "]rk", "", "sub", "bad")
	)		internal static options (constant);

/* based */

declare	varying_string	char (n) varying based;

/* program */

	do parse_frame_ptr = ws_info.current_parse_frame_ptr repeat parse_frame.last_parse_frame_ptr
	     while (parse_frame_ptr ^= null);

	     call ioa_ ("^a frame at ^p", frame_names (parse_frame.parse_frame_type), parse_frame_ptr);

	     go to frame_type (parse_frame.parse_frame_type);

frame_type (1):					/* suspended */
frame_type (2):					/* function */
frame_type (3):					/* evaluated */
frame_type (4):					/* execute */
	     call ioa_ ("fbp = ^p", parse_frame.function_bead_ptr);

	     if parse_frame.lexed_function_bead_ptr ^= null
	     then call ioa_ ("lfbp = ^p", parse_frame.lexed_function_bead_ptr);

	     rsp = parse_frame.reduction_stack_ptr;

	     call ioa_ ("rsp = ^p", rsp);

	     if parse_frame.current_parseme ^= 0
	     then do;
		     do i = 1 to parse_frame.current_parseme;
			if rsp -> reduction_stack (i).type < lbound (rs_type_name (*), 1)
			     | rsp -> reduction_stack (i).type > hbound (rs_type_name (*), 1)
			then rs_type = hbound (rs_type_name (*), 1);
			else rs_type = rsp -> reduction_stack (i).type;

			call ioa_ ("rs(^d) = ^d ^4a ^w ^w ^w", i, rsp -> reduction_stack (i).type,
			     rs_type_name (rs_type), rsp -> reduction_stack (i).bits,
			     rsp -> reduction_stack (i).semantics, rsp -> reduction_stack (i).lexeme);
		     end;
		end;

	     if parse_frame.current_lexeme ^= 0
	     then call ioa_ ("current lexeme = ^d", parse_frame.current_lexeme);

	     if parse_frame.current_line_number ^= 0
	     then call ioa_ ("current line = ^d", parse_frame.current_line_number);

	     call ioa_ ("return point = ^d", parse_frame.return_point);

	     if parse_frame.put_result ^= 0
	     then call ioa_ ("put result = ^d", parse_frame.put_result);

	     if parse_frame.print_final_value
	     then call ioa_ ("print final value");

	     call ioa_ ("ivsp = ^p", parse_frame.initial_value_stack_ptr);

	     go to sub_type (parse_frame.parse_frame_type);

sub_type (1):					/* suspended */
sub_type (3):					/* evaluated */
	     p = addr (parse_frame.old_meaning_ptrs (1));
	     n = length (p -> varying_string);
	     call ioa_ ("source = ^a", p -> varying_string);
	     go to end_loop;

sub_type (2):					/* function */
	     do local = 1 to parse_frame.number_of_ptrs;
		call ioa_ ("old(^d) = ^p", local, parse_frame.old_meaning_ptrs (local));
	     end;
	     go to end_loop;

sub_type (4):					/* execute */
	     go to end_loop;

frame_type (5):					/* save frame */
	     save_frame_pointer = parse_frame_ptr;

	     call ioa_ ("symbol count = ^d", save_frame.saved_symbol_count);

	     do symbol_number = lbound (save_frame.symbol_list (*), 1) to hbound (save_frame.symbol_list (*), 1);
		call ioa_ ("symbol(^d):", symbol_number);
		call ioa_ ("sp = ^p", save_frame.symbol_list (symbol_number).symbol_pointer);
		call ioa_ ("mp = ^p", save_frame.symbol_list (symbol_number).saved_meaning_pointer);
		call ioa_ ("gmpp = ^p", save_frame.symbol_list (symbol_number).global_meaning_pointer_pointer);
	     end;

end_loop:
	     call ioa_ ("");
	end;

/* include files */

%include apl_number_data;
%include apl_bead_format;
%include apl_function_bead;
%include apl_list_bead;
%include apl_operator_bead;
%include apl_operators_argument;
%include apl_parse_frame;
%include apl_save_frame;
%include apl_symbol_bead;
%include apl_value_bead;
%include apl_ws_info;
     end /* apl_display_si */;
