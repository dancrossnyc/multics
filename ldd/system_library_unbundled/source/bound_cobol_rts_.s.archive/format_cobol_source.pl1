/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 format_cobol_source.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Last modified on 02/01/77 by ORN to support the -lmargin control argument */
/* Last modified on 11/24/76 by ORN to fix bug in which input seg is truncated if same as output seg */
/* Last modified on 08/16/76 by ORN to support -uc and -lc control arguments */

/* format: style3 */
format_cobol_source:
fcs:
     proc;

dcl	dir_ptr		ptr;
dcl	ename_ptr		(2) ptr;
dcl	final_ptr		ptr;
dcl	argptr		ptr;
dcl	segptr		(2) ptr;
dcl	1 i_o		based (addr (segptr (1))),
	  2 inptr		ptr,
	  2 outptr	ptr;
dcl	nargs		fixed bin;
dcl	arglen		fixed bin;
dcl	arg		char (arglen) based (argptr);
dcl	code		fixed bin (35);
dcl	bc		fixed bin (24);
dcl	(i, j)		fixed bin;
dcl	(ctype, mtype)	fixed bin;
dcl	shift		bit (1);
dcl	dir		char (168);
dcl	ename		(2) char (32);
dcl	equalname		char (32);

dcl	error_table_$sameseg
			fixed bin (35) ext;
dcl	error_table_$noarg	fixed bin (35) ext;
dcl	error_table_$badopt fixed bin (35) ext;
dcl	error_table_$arg_ignored
			fixed bin (35) ext;
dcl	error_table_$too_many_args
			fixed bin (35) ext;

dcl	cobol_source_formatter_
			entry (ptr, ptr, fixed bin (24), fixed bin, fixed bin);
dcl	hcs_$truncate_seg	entry (ptr, fixed bin, fixed bin (35));
dcl	cobol_source_formatter_$no_shift
			entry (ptr, ptr, fixed bin (24), fixed bin);
dcl	com_err_		entry options (variable);
dcl	equal_		entry (ptr, ptr, ptr, fixed bin (35));
dcl	expand_path_	entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl	cu_$arg_count	entry (fixed bin);
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl	hcs_$initiate	entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl	hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35));

dcl	addr		builtin;
dcl	index		builtin;
dcl	null		builtin;
dcl	substr		builtin;


/*************************************/
start:
	shift = "1"b;
	go to join;

no_shift:
     entry;
	shift = "0"b;

join:
	dir_ptr = addr (dir);
	ename_ptr (1) = addr (ename (1));
	ename_ptr (2) = addr (equalname);
	call cu_$arg_count (nargs);
	if nargs > 4
	then go to too_many_args_error;
	if nargs < 2
	then go to noarg_error;

/* Process arguments */
	do i = 1 to 2;
	     call cu_$arg_ptr (i, argptr, arglen, code);
	     if code ^= 0
	     then go to multics_error;
	     call expand_path_ (argptr, arglen, dir_ptr, ename_ptr (i), code);
	     if code ^= 0
	     then go to multics_error;
	     if i = 2
	     then do;
		     final_ptr = addr (ename (2));
		     call equal_ (ename_ptr (1), ename_ptr (2), final_ptr, code);
		     if code ^= 0
		     then go to multics_error;
		     ename_ptr (2) = final_ptr;
		end;
	     j = index (ename (i), " ");
	     if j = 0
	     then j = 33;
	     if substr (ename (i), j - 6, 6) ^= ".cobol"
	     then substr (ename (i), j, 6) = ".cobol";
	     call hcs_$initiate (dir, ename (i), "", 0, 1, segptr (i), code);
	     if i = 2
	     then do;
		     if inptr = outptr
		     then go to sameseg_error;
		     if segptr (2) = null ()
		     then do;			/* output segment doesn't exist; create it */
			     call hcs_$make_seg (dir, ename (2), "", 10, segptr (2), code);
			     if code ^= 0
			     then go to multics_arg_error;
			end;
		     else do;
			     call hcs_$truncate_seg (segptr (2), 0, code);
			     if code ^= 0
			     then go to multics_arg_error;
			end;
		end;
	     else if segptr (1) = null ()
	     then go to multics_arg_error;
	end;

	ctype, mtype = 0;
	if nargs > 2
	then do i = 3 to nargs;
		call cu_$arg_ptr (i, argptr, arglen, code);
		if code ^= 0
		then go to multics_error;
		if arg = "-upper_case" | arg = "-uc"
		then do;
			if ctype = 0
			then ctype = 1;
			else call com_err_ (error_table_$arg_ignored, "format_cobol_source", arg);
		     end;
		else if arg = "-lower_case" | arg = "-lc"
		then do;
			if ctype = 0
			then ctype = -1;
			else call com_err_ (error_table_$arg_ignored, "format_cobol_source", arg);
		     end;
		else if arg = "-lmargin" | arg = "-lm"
		then mtype = 1;
		else go to badopt_error;
	     end;


/* Call routine which actually does reformatting. */

	if ^shift
	then call cobol_source_formatter_$no_shift ((inptr), (outptr), bc, ctype);
	else call cobol_source_formatter_ ((inptr), (outptr), bc, ctype, mtype);
						/* pass by value so offsets remain 0 */

	call hcs_$set_bc_seg (outptr, bc, code);
	if code ^= 0
	then go to multics_error;

	return;

/* Error Handling */

noarg_error:
	code = error_table_$noarg;
	go to multics_error;

badopt_error:
	call com_err_ (error_table_$badopt, "format_cobol_source", arg);
	return;

too_many_args_error:
	code = error_table_$too_many_args;
	go to multics_error;

sameseg_error:
	code = error_table_$sameseg;
	go to multics_error;

multics_error:
	call com_err_ (code, "format_cobol_source");
	return;

multics_arg_error:
	call com_err_ (code, "format_cobol_source", "^a", ename (i));
	return;

     end format_cobol_source;
