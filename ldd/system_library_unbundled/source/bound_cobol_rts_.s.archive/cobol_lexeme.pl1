/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8089),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8089 cobol_lexeme.pl1 Remove requirement for write permission to input
     files.
                                                   END HISTORY COMMENTS */


/* Modified on 12/20/84 by FCH, [5.3-2], source prog with r access caused abort */
/* Modified on 10/24/83 by FCH, [5.3-1], ignore COPY in ID, phx14180(BUG599) */
/* Modified on 02/26/79 by FCH, [4.0-1], qualified copy file names */
/* Created for Version 4.0 */






/* format: style3 */
cobol_lexeme:
     proc (lexeme_ptr);

declare	lexeme_ptr	ptr;

dcl	(addr, fixed, index, null, substr, translate, unspec)
			builtin;

declare	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
declare	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
declare	hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35));

declare	(env_ptr, s_ptr)	ptr,
	sname		char (*);
declare	bc		fixed bin (24),
	code		fixed bin (35);
declare	lc		fixed bin;
declare	ch		char (1),
	ch2		char (2),
	ch_val		fixed bin;
declare	key_word		char (32) varying;
declare	saved_offset	fixed bin (35);
declare	(cont, new_line, more, scan_mode)
			bit (1);
declare	(res, dec_pt_count, sign_count)
			fixed bin,
	mask		bit (8);
declare	(i, j)		fixed bin,
	p		ptr;
declare	file_name		char (44);
declare	(old, new, size, tok_size)
			fixed bin;
declare	dir_name		char (168),
	entry_name	char (32);
declare	(e_offset, e_span)	fixed bin (35);

declare	1 b,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 offset	fixed bin (35),
	  2 span		fixed bin,
	  2 string_size	fixed bin (35),
	  2 string_cap	fixed bin,
	  2 string_ptr	ptr,
	  2 string	char (32) varying,
	  2 col_7		char (1);

declare	ldn		fixed bin;
declare	last_token_space	bit (1);

declare	error_table_$zero_length_seg
			fixed bin (35) ext;
declare	error_table_$segknown
			fixed bin (35) ext;

declare	ss		char (1000000) based;
declare	sa		(1000000) char (1) based;
declare	bit9		bit (9) based;

dcl	alloc_1		char (lexeme_env.alloc.cap1) based (lexeme_env.alloc.ptr1);
dcl	alloc_2		char (lexeme_env.alloc.cap2) based (lexeme_env.alloc.ptr2);


declare	mem_tab		(0:511) bit (8) based (mem_tab_ptr);
declare	x		(0:511) fixed bin (8) based (x_ptr);

declare	expand_cobol_source_area
			area based (ecs_ptr);

declare	find_include_file_$initiate_count
			entry (char (*), ptr, char (*), fixed bin (24), ptr, fixed bin (35));

/*
					ignore space tokens, separator comma and
					separator semi-colon
				*/

	call get_token;

	ch = lexeme_env.token.string_ptr -> sa (1);

	do while (lexeme_env.error = 0
	     & (lexeme_env.token.type = 1
	     | (lexeme_env.token.type = 4 & lexeme_env.token.string_size = 1 & (ch = ";" | ch = ","))));

	     call get_token;

	     ch = lexeme_env.token.string_ptr -> sa (1);

	end;

	return;					/*
					initiate usage of cobol_lexeme.pl1
				*/
open:
     entry (lexeme_ptr);

	allocate mem_tab in (expand_cobol_source_area);

	do i = 0 by 1 to 127;
	     mem_tab (i) = m_t (i);
	end;

	do i = 128 by 1 to 511;
	     mem_tab (i) = "0"b;
	end;

	allocate x in (expand_cobol_source_area);

	do i = 0 by 1 to 127;
	     x (i) = x_i (i);
	end;

	do i = 128 by 1 to 511;
	     x (i) = 10;
	end;

/*5.3-1]*/
	state = 1;
	tf = "0"b;

	return;					/*
					terminate usage of cobol_lexeme.pl1
				*/
close:
     entry (lexeme_ptr);

	free mem_tab;
	free x;


	return;

/*
					initialize scanning of source file
				*/

envinit:
     entry (lexeme_ptr);

/*[4.0-1]*/
	call set_bc (lexeme_env.source_table.loc);	/*[4.0-1]*/
	return;

set:
     entry (lexeme_ptr, sname, s_ptr);

	file_name = sname;
	i = 44;

	do while (i > 0 & substr (file_name, i, 1) = " ");

	     i = i - 1;

	end;

	if i > 11
	then if substr (file_name, i - 10, 11) = ".incl.cobol"
	     then do;
		     call find_include_file_$initiate_count ("cobol", s_ptr, sname, bc, lexeme_env.source_table.loc,
			code);

		     if code = error_table_$zero_length_seg
		     then lexeme_env.error = 2;
		     else call env_set;

		     return;
		end;

	lexeme_env.source_table.loc = s_ptr;


/*[4.0-1]*/
	call set_bc (lexeme_env.source_table.loc);	/*[4.0-1]*/
	return;

set_bc:
     proc (p);					/*[4.0-1]*/
dcl	p		ptr;

	call hcs_$fs_get_path_name (p, dir_name, ldn, entry_name, code);
	call hcs_$initiate_count (dir_name, entry_name, "", bc, 1, p, code);

	if code = error_table_$segknown
	then code = 0;

	call env_set;

/*[4.0-1]*/
     end;

env_set:
     proc;					/*[4.0-1]*/
dcl	ch		char (1),
	p		ptr;


/*[4.0-1]*/
	if code = 0				/*[4.0-1]*/
	then do;
		i, j = divide (bc, 9, 31, 0);		/*[4.0-1]*/
		p = lexeme_env.source_table.loc;	/*[4.0-1]*/
		ch = p -> sa (j);

/*[4.0-1]*/
		do while (ch ^= "
");

/*[4.0-1]*/
		     j = j - 1;			/*[4.0-1]*/
		     ch = p -> sa (j);

/*[4.0-1]*/
		end;

/*[4.0-1]*/
		call hcs_$set_bc_seg (p, j * 9, code);

/*[5.3-2]*/
		call env_init;			/*[5.3-2]*/
		return;

/*[4.0-1]*/
	     end;


/*[4.0-1]*/
	lexeme_env.error = 2;

     end;

env_init:
     proc;

	lexeme_env.source_table.offset = 1;
	lexeme_env.source_table.line = 0;
	lexeme_env.current_line.loc = null ();
	lexeme_env.next_line.loc = null ();
	addr (lexeme_env.indicators) -> bit9 = "01"b;

	lexeme_env.alloc.cap1 = 512;			/*[4.0-1]*/
	lexeme_env.alloc.parity = 0;

	allocate alloc_1 in (expand_cobol_source_area);

	lexeme_env.token.string_cap = 512;
	lexeme_env.token.string_ptr = lexeme_env.alloc.ptr1;
	lexeme_env.source_table.size = j;

	call get_line;

     end;

find_copy:
     entry (lexeme_ptr);

	key_word = "copy";

	call seek_word;

	return;					/* scan to the word "replace" */

find_replace:
     entry (lexeme_ptr);				/* scan to the word "copy" */


	key_word = "replace";

	call seek_word;

	return;

/* scan to closing pseudo-text delimiter */

find_pseudo_text:
     entry (lexeme_ptr);

	lexeme_env.pseudo_text = 2;

	call get_token;

	if lexeme_env.error ^= 0
	then return;

	if lexeme_env.token.type = 4
	then do;
		if lexeme_env.token.string = "=="
		then do;
			lexeme_env.token.span = 0;
			return;
		     end;
	     end;
	else if lexeme_env.token.type = 1		/* space token */
	then do;
		lexeme_env.token.type = 6;
		b = lexeme_env.token;

		call get_token;

		if lexeme_env.error ^= 0
		then return;

		if lexeme_env.token.type = 4
		then if lexeme_env.token.string = "=="
		     then do;
			     lexeme_env.token = b;
			     return;
			end;
	     end;

	lexeme_env.token.type = 6;
	b = lexeme_env.token;

	do while ("1"b);

	     call get_token;

	     if lexeme_env.error ^= 0
	     then go to fpt_1;

	     e_offset = lexeme_env.token.offset;

	     if lexeme_env.token.type = 1
	     then do;
		     call get_token;

		     if lexeme_env.error ^= 0
		     then go to fpt_1;

		end;

	     if lexeme_env.token.type = 4
	     then if lexeme_env.token.string = "=="
		then go to fpt_2;
	end;

fpt_1:
	lexeme_env.token = b;
	return;

fpt_2:
	lexeme_env.token = b;
	lexeme_env.token.span = e_offset - b.offset;
	lexeme_env.pseudo_text = 1;

	return;

/* ignore space tokens */

text_word:
     entry (lexeme_ptr);

	call get_token;

	do while (lexeme_env.error = 0 & lexeme_env.token.type = 1);

	     call get_token;

	end;

	return;

/*
					find the next token
				*/

token:
     entry (lexeme_ptr);

	call get_token;

	return;

get_token:
     proc;

	if lexeme_env.current_line.length = 0
	then do;
		lexeme_env.error = 1;
		res = 1;
	     end;

	else do;

		lexeme_env.error = 0;


		dec_pt_count, sign_count = 0;
		lexeme_env.token.line = lexeme_env.source_table.line;
		lexeme_env.token.column = lexeme_env.current_line.column;
		lexeme_env.token.offset = lexeme_env.current_line.offset + lexeme_env.current_line.column - 1;
		lexeme_env.token.span, lexeme_env.token.string_size = 0;

		if lexeme_env.current_line.size >= 7
		then lexeme_env.token.col_7 = lexeme_env.current_line.loc -> sa (7);

		if lexeme_env.current_line.column < 8
		then do;
			lexeme_env.token.type = 1;

			if lexeme_env.current_line.length < 8
			then do;
				lexeme_env.token.span =
				     lexeme_env.current_line.length - lexeme_env.current_line.column;
				lexeme_env.current_line.column = lexeme_env.current_line.length;
			     end;
			else do;
				lexeme_env.token.span = 8 - lexeme_env.current_line.column;
				lexeme_env.current_line.column = 8;
			     end;

			call space;
			res = 1;
		     end;
		else do;

			ch = lexeme_env.current_line.loc -> sa (lexeme_env.current_line.column);

			if ch = " " | ch = "
"
			then do;
				lexeme_env.token.type = 1;

				call space;

				res = 1;
			     end;
			else res = 2;

		     end;

	     end;

	go to st (res);

st (1):
	return;

st (2):
	go to l (x (fixed (unspec (ch), 15)));


/*
					cobol word
				*/

l (1):
	lexeme_env.token.type = 3;
word:
	mask = "1"b;

	call swm;

	call look;

	go to w (res);

w (1):
wd_1:
	if lexeme_env.token.string_ptr -> sa (lexeme_env.token.string_size) = "-"
	then lexeme_env.token.type = 5;

	if lexeme_env.indicators.lc
	then substr (lexeme_env.token.string_ptr -> ss, 1, lexeme_env.token.string_size) =
		translate (substr (lexeme_env.token.string_ptr -> ss, 1, lexeme_env.token.string_size),
		lower_case_alphabet);

ss1:
	if lexeme_env.token.string_size <= 32
	then lexeme_env.token.string = substr (lexeme_env.token.string_ptr -> ss, 1, lexeme_env.token.string_size);


	return;

w (2):
	if lexeme_env.current_line.column + 1 < lexeme_env.current_line.length
	then if substr (lexeme_env.current_line.loc -> ss, lexeme_env.current_line.column + 1, 2) = "=="
	     then go to wd_1;

	go to comm;
w (3):
	go to comm;


/*
					numeric literal
				*/

l (2):
	lexeme_env.token.type = 2;

num_lit:
	mask = "01"b;

	call swm;

	call look;

	go to nl1 (res);

nl1 (1):
	return;
nl1 (2):
	if dec_pt_count > 0
	then go to comm;

	if ch = ";"
	then go to comm;

	call move_char;

	dec_pt_count = 1;

	go to num_lit;

nl1 (3):
	if ch = "-" | ("1"b & mem_tab (fixed (unspec (ch), 15)))
	then if dec_pt_count = 0 & sign_count = 0
	     then do;
		     lexeme_env.token.type = 3;
		     go to word;
		end;
	go to comm;

/*
					"
				*/
l (3):
	lexeme_env.token.type = 2;

	call move_char;

	mask = "0000001"b;
al_1:
	call swnm;

	if lexeme_env.current_line.loc -> sa (lexeme_env.current_line.column) = "
"
	then do;
		call cont_lit;

		go to al1 (res);

al1 (1):
al1 (2):
		go to comm;
al1 (3):
		lexeme_env.token.span = lexeme_env.token.span + 1;

		go to al_1;

	     end;

	call move_lit_char;

al_2:
	call look;

	go to al2 (res);

al2 (1):
	if ch = "
"
	then do;
		call cont_lit;

		go to al21 (res);

al21 (1):
al21 (2):
		go to ss1;

al21 (3):
		lexeme_env.token.span = lexeme_env.token.span + 1;
		go to al_2;

	     end;

	go to ss1;

al2 (2):
	go to ss1;

al2 (3):
al_3:
	call swnm;

	if lexeme_env.current_line.loc -> sa (lexeme_env.current_line.column) = "
"
	then do;
		call cont_lit;
		go to al3 (res);

al3 (1):
al3 (2):
		go to comm;

al3 (3):
		go to al_3;

	     end;


	go to al_1;

/*
					,;
				*/
l (5):
	lexeme_env.token.type = 4;

	call move_char;

	call look;

	go to sep (res);

sep (1):
	go to ss1;
sep (2):
	if "01"b & mem_tab (fixed (unspec (ch), 15))
	then do;
		dec_pt_count = 1;
		lexeme_env.token.type = 2;
		go to num_lit;
	     end;

	go to comm;

sep (3):
	go to comm;

/*
					+-
				*/
l (6):
l (18):
	sign_count = 1;
	lexeme_env.token.type = 3;

	call move_char;

	call look;

	go to sgn (res);

sgn (1):
	lexeme_env.token.type = 3;
	go to ss1;
sgn (2):
	go to comm;

sgn (3):
	if "01"b & mem_tab (fixed (unspec (ch), 15))
	then do;
		lexeme_env.token.type = 2;
		go to num_lit;
	     end;

	go to comm;

/*
					*
				*/
l (7):
	lexeme_env.token.type = 3;

	call move_char;

	call look;

	go to ask (res);

ask (1):
	go to ss1;
ask (2):
	go to comm;

ask (3):
	if ch = "*"
	then do;
		call move_char;

		call look;

		go to exp (res);

exp (1):
		go to ss1;
exp (2):
exp (3):
		go to comm;

	     end;

	go to comm;

/*
					</>
				*/
l (9):
l (16):
l (17):
	lexeme_env.token.type = 3;

dlm:
	call move_char;

dlm_1:
	call look;

	go to wd (res);

wd (1):
	go to ss1;
wd (2):
wd (3):
	go to comm;

/*
					other characters
				*/
l (8):
l (10):
comm:
	lexeme_env.token.type = 5;
com_ent:
	mask = "00000001"b;

	call swnm;

	if new_line
	then do;
		call merge;

		if cont
		then do;
			cont = "0"b;
			go to com_ent;
		     end;
	     end;

	if lexeme_env.current_line.column >= 9
	then do;
		if lexeme_env.token.string_size > 2
		then do;

			if lexeme_env.indicators.copy_replace & lexeme_env.pseudo_text = 2
			then do;

				if substr (lexeme_env.current_line.loc -> ss, lexeme_env.current_line.column - 2,
				     2) = "=="
				then do;
					lexeme_env.token.span = lexeme_env.token.span - 2;
					lexeme_env.token.string_size = lexeme_env.token.string_size - 2;
					lexeme_env.current_line.column = lexeme_env.current_line.column - 2;
				     end;

			     end;

		     end;
	     end;

	return;

/*
					(
				*/
l (11):
	lexeme_env.token.type = 4;

	call move_char;

	go to ss1;

/*
					)
				*/
l (13):
	lexeme_env.token.type = 4;

	call move_char;

	go to ss1;


/*
					.
				*/
l (14):
	lexeme_env.token.type = 4;

	call move_char;

	call look;

	go to per (res);

per (1):
	go to ss1;
per (2):
	if "01"b & mem_tab (fixed (unspec (ch), 15))
	then do;
		dec_pt_count = 1;
		lexeme_env.token.type = 2;
		go to num_lit;
	     end;

	go to comm;

per (3):
	go to comm;

/*
					=
				*/
l (15):
	lexeme_env.token.type = 4;

	if lexeme_env.current_line.column < lexeme_env.current_line.size
	then do;
		call move_char;

		ch = lexeme_env.current_line.loc -> sa (lexeme_env.current_line.column);

		if ch = "="
		then do;
			call move_char;

			if ^lexeme_env.indicators.copy_replace
			then go to dlm_1;

			go to ptxt (lexeme_env.pseudo_text);

ptxt (1):
			lexeme_env.pseudo_text = 2;
			go to ss1;

ptxt (2):
ptxt (3):
			lexeme_env.pseudo_text = 1;

			go to dlm_1;
		     end;

		go to dlm_1;

	     end;

	go to dlm;

     end;

cont_lit:
     proc;					/*	res = 1 not continuation card
			res = 2 first non blank character character not QUOTE
			res = 3 first non blank character character QUOTE not followed by CR
		*/
	call next_cont;

	if ^cont
	then do;
		res = 1;
		return;
	     end;

	call get_line;

	do while ("1"b);

	     if j >= 13
	     then do;

		     p = lexeme_env.current_line.loc;
		     j = 12;

		     do while (p -> sa (j) = " ");

			j = j + 1;

		     end;

		     if p -> sa (j) ^= """"
		     then do;
			     res = 2;
			     return;
			end;

		     if p -> sa (j + 1) ^= "
"
		     then do;
			     lexeme_env.token.span = lexeme_env.token.span + j;
			     lexeme_env.current_line.column = j + 1;
			     res = 3;

			     return;
			end;

		end;

	     call next_cont;

	     if ^cont
	     then do;
		     res = 1;
		     return;
		end;


	     lexeme_env.token.span = lexeme_env.token.span + lexeme_env.current_line.length;

	     call get_line;

	end;
     end;

space:
     proc;					/* form the space token */
	do while ("1"b);

	     i = lexeme_env.current_line.column;	/* find non-blank character */
	     p = lexeme_env.current_line.loc;

	     do while (p -> sa (i) = " ");

		i = i + 1;

	     end;

	     lexeme_env.token.span = lexeme_env.token.span + i - lexeme_env.current_line.column;
						/* adjust span */
	     lexeme_env.current_line.column = i;

	     if p -> sa (i) ^= "
"
	     then return;
	     lexeme_env.token.span = lexeme_env.token.span + 1;

	     more = "1"b;

	     do while (more);

		call get_line;

		if lexeme_env.current_line.length = 0
		then return;			/* card too small */
		if lexeme_env.current_line.length < 8
		then lexeme_env.token.span = lexeme_env.token.span + lexeme_env.current_line.length;

		else /* comment line */
		     if lexeme_env.current_line.loc -> sa (7) = "*"
		then lexeme_env.token.span = lexeme_env.token.span + lexeme_env.current_line.length;

		else /* continuation line */
		     if lexeme_env.current_line.loc -> sa (7) = "-"
		then if lexeme_env.current_line.length < 13
		     then lexeme_env.token.span = lexeme_env.token.span + lexeme_env.current_line.length;
		     else do;
			     lexeme_env.token.span = lexeme_env.token.span + 11;
			     lexeme_env.current_line.column = 12;
			     more = "0"b;
			end;
		else do;
			lexeme_env.token.span = lexeme_env.token.span + 7;
			lexeme_env.current_line.column = 8;
			more = "0"b;
		     end;
	     end;
	end;
     end;

look:
     proc;

/*	res = 1	space new_line )( EOF .,;-separator ==
					res = 2	.,;
					res = 3	other
				*/

	res = 1;
	ch = "";

	if lexeme_env.current_line.length = 0
	then return;

	ch = lexeme_env.current_line.loc -> sa (lexeme_env.current_line.column);

	if ch = " " | ch = "
"
	then return;

	if ch = "." | ch = "," | ch = ";"
	then if lexeme_env.current_line.column = lexeme_env.current_line.size
	     then do;
		     call next_cont;

		     if cont
		     then do;
			     res = 2;
			     return;
			end;
		     else do;
			     res = 1;
			     return;
			end;
		end;

	     else do;
		     ch2 = substr (lexeme_env.current_line.loc -> ss, lexeme_env.current_line.column + 1, 2);

		     if substr (ch2, 1, 1) = " "
		     then do;
			     res = 1;
			     return;
			end;
		     else do;
			     res = 2;
			     if ch2 = "=="
			     then res = 1;
			     return;
			end;
		end;
	else if ch = "(" | ch = ")"
	then do;
		res = 1;
		return;
	     end;
	else do;
		res = 3;
		call p_test;
	     end;
     end;

p_test:
     proc;

	if ch = "=" & lexeme_env.current_line.column + 1 < lexeme_env.current_line.length
	then if lexeme_env.current_line.loc -> sa (lexeme_env.current_line.column + 1) = "="
	     then res = 1;
     end;

merge:
     proc;

	call next_cont;

	if ^cont
	then return;

	lexeme_env.token.span =
	     lexeme_env.token.span + lexeme_env.current_line.length - lexeme_env.current_line.column + 1;

	do while (cont);

	     call get_line;

	     if lexeme_env.current_line.size ^= 7
	     then do;
		     i = 12;

		     do while (lexeme_env.current_line.loc -> sa (i) = " ");

			i = i + 1;

		     end;

		     lexeme_env.token.span = lexeme_env.token.span + i - 1;

		     lexeme_env.current_line.column = i;

		     return;
		end;

	     call next_cont;
	end;
     end;

next_cont:
     proc;

	cont = "0"b;

	if lexeme_env.next_line.length = 0
	then return;

	if lexeme_env.next_line.size < 12
	then return;

	if lexeme_env.next_line.loc -> sa (7) ^= "-"
	then return;

	cont = "1"b;
     end;

move_char:
     proc;

	scan_mode = "0"b;
	call m_c;

     end;

move_lit_char:
     proc;

	scan_mode = "1"b;
	call m_c;

     end;

m_c:
     proc;

	if lexeme_env.token.string_size = lexeme_env.token.string_cap
	then call alloc_lexeme;

	lexeme_env.token.string_size = lexeme_env.token.string_size + 1;

	lexeme_env.token.string_ptr -> sa (lexeme_env.token.string_size) =
	     lexeme_env.current_line.loc -> sa (lexeme_env.current_line.column);

	lexeme_env.current_line.column = lexeme_env.current_line.column + 1;
	lexeme_env.token.span = lexeme_env.token.span + 1;

	if scan_mode | lexeme_env.current_line.column <= lexeme_env.current_line.size
	then return;

	call merge;

     end;


get_line:
     proc;


	if lexeme_env.current_line.loc = null ()
	then do;
		call fill_next_line;

		lexeme_env.current_line = lexeme_env.next_line;
		lexeme_env.source_table.line = lexeme_env.source_table.line + 1;

		if lexeme_env.current_line.size ^= 0
		then call fill_next_line;

		return;

	     end;

	else if lexeme_env.current_line.length = 0
	then return;

	lexeme_env.current_line = lexeme_env.next_line;
	lexeme_env.source_table.line = lexeme_env.source_table.line + 1;

	if lexeme_env.current_line.length = 0
	then return;

	call fill_next_line;

     end;

fill_next_line:
     proc;

declare	(sl, sz)		fixed bin;
declare	ch		char (1),
	p		ptr;

	if lexeme_env.source_table.offset > lexeme_env.source_table.size
	then do;
		lexeme_env.next_line.length = 0;
		lexeme_env.next_line.loc = addr (lexeme_env.source_table.loc -> sa (lexeme_env.source_table.size));

	     end;
	else do;
		p, lexeme_env.next_line.loc =
		     addr (lexeme_env.source_table.loc -> sa (lexeme_env.source_table.offset));

		sl = lexeme_env.source_table.size - lexeme_env.source_table.offset + 1;

		sz = index (substr (lexeme_env.next_line.loc -> ss, 1, sl), "
");

		lexeme_env.next_line.offset = lexeme_env.source_table.offset;
		lexeme_env.next_line.length = sz;
		lexeme_env.next_line.column = 1;
		lexeme_env.source_table.offset = lexeme_env.source_table.offset + sz;

		sz = sz - 1;

		if sz ^= 0
		then do;
			ch = p -> sa (sz);

			do while (ch = " ");

			     sz = sz - 1;

			     if sz = 0
			     then ch = "~";
			     else ch = p -> sa (sz);

			end;
		     end;

		lexeme_env.next_line.size = sz;
	     end;

     end;

/*

	Find a copy or replace statement not contained within a comment
	entry in the IDENTIFICATION DIVISION

	1: XT: eof, copy, replace
	    2: ed, dd, pd
	    3: id
	    1: otherwise

	2: find COPY/REPLACE

	3: XT: eof
	    2: ed, dd, pd
	    4: pn.
	    3: otherwise

	4: XT: eof, copy, replace
	    2: ed, dd, pd
	    5: otherwise

	5: XT: eof
	    2: ed, dd, pd
	    4: pn.
	    5: otherwise

*/

/*[5.3-1]*/
dcl	tf		bit (1),
	found		bit (1);			/*[5.3-1]*/
dcl	state		fixed bin static internal;	/*[5.3-1]*/
dcl	swexit		label;

/*[5.3-1]*/
dcl	ident		char (14) varying init ("identification");
						/*[5.3-1]*/
dcl	div		char (8) varying init ("division");
						/*[5.3-1]*/
dcl	env		char (11) varying init ("environment");
						/*[5.3-1]*/
dcl	dat		char (4) varying init ("data");
						/*[5.3-1]*/
dcl	proc		char (9) varying init ("procedure");
						/*[5.3-1]*/
dcl	cpy		char (4) varying init ("copy");
						/*[5.3-1]*/
dcl	rpl		char (7) varying init ("replace");

seek_word:
     proc;					/* find COPY or REPLACE */

/*[5.3-1]*/
	swexit = swx1;

/*[5.3-1]*/
	do while ("1"b);

/*[5.3-1]*/
	     go to sw (state);

sw (1):						/* initial state */
						/*[5.3-1]*/
	     call sw1;				/*[5.3-1]*/
	     go to swx;

sw (2):						/* ID, DD, PD found */
						/*[5.3-1]*/
	     call SW;				/*[5.3-1]*/
	     return;

sw (3):						/* ID found */
						/*[5.3-1]*/
	     call sw3;				/*[5.3-1]*/
	     go to swx;

sw (4):						/* proc-name found */
						/*[5.3-1]*/
	     call sw4;				/*[5.3-1]*/
	     go to swx;

sw (5):						/* COPY, REPLACE found */
						/*[5.3-1]*/
	     call sw5;				/*[5.3-1]*/
	     go to swx;

swx:						/*[5.3-1]*/
	end;

swx1:
     end;

sw1:
     proc;					/* initial state */

/*[5.3-1]*/
	do while ("1"b);

/*[5.3-1]*/
	     call GT;				/* get a token */

/*[5.3-1]*/
	     call test_hdr ("0"b, 3);			/* test for ID */
						/*[5.3-1]*/
	     if found
	     then return;

/*[5.3-1]*/
	     call test_hdr ("1"b, 2);			/* test for ED, DD, PD */
						/*[5.3-1]*/
	     if found
	     then return;

/*[5.3-1]*/
	     call test_word (addr (key_word));		/* COPY, REPLACE */
						/*[5.3-1]*/
	     if found
	     then go to swexit;			/*[5.3-1]*/
	end;
     end;

sw3:
     proc;					/* after ID */

/*[5.3-1]*/
	do while ("1"b);

/*[5.3-1]*/
	     call GT;				/* get a token */

/*[5.3-1]*/
	     call test_hdr ("1"b, 2);			/* test for ED, DD, PD */
						/*[5.3-1]*/
	     if found
	     then return;				/* get a token */

/*[5.3-1]*/
	     call test_pn (4);			/* test for proc-name. */
						/*[5.3-1]*/
	     if found
	     then return;

/*[5.3-1]*/
	     call test_word (addr (key_word));		/* COPY, REPLACE */
						/*[5.3-1]*/
	     if found
	     then go to swexit;

/*[5.3-1]*/
	end;
     end;

sw4:
     proc;					/* after proc-name. */

/*[5.3-1]*/
	call GT1;					/* get a token */

/*[5.3-1]*/
	call test_hdr ("1"b, 2);			/* test for ED, DD, PD */
						/*[5.3-1]*/
	if found
	then return;

/*[5.3-1]*/
	call test_word (addr (key_word));		/* COPY, REPLACE */
						/*[5.3-1]*/
	if found
	then go to swexit;

/*[5.3-1]*/
	tf = "1"b;				/*[5.3-1]*/
	state = 5;
     end;

sw5:
     proc;					/* after proc-name. */

/*[5.3-1]*/
	do while ("1"b);

/*[5.3-1]*/
	     call GT;				/* get a token */

/*[5.3-1]*/
	     call test_hdr ("1"b, 2);			/* test for ED, DD, PD */
						/*[5.3-1]*/
	     if found
	     then return;

/*[5.3-1]*/
	     call test_pn (4);			/* test for proc-name. */
						/*[5.3-1]*/
	     if found
	     then return;				/*[5.3-1]*/
	end;

     end;

test_hdr:
     proc (md, st);					/* test for division header  */

/*[5.3-1]*/
dcl	md		bit (1),
	st		fixed bin;

/*[5.3-1]*/
	if md					/*[5.3-1]*/
	then call tedp;				/* ED, DD, PD */
						/*[5.3-1]*/
	else call test_word (addr (ident));		/* ID */

/*[5.3-1]*/
	if ^found
	then return;

/*[5.3-1]*/
	call GT1;					/* get token */

/*[5.3-1]*/
	call test_word (addr (div));			/* DIVISION */
						/*[5.3-1]*/
	if ^found
	then go to test_id_xf;

/*[5.3-1]*/
	call gt;					/* get token */

/*[5.3-1]*/
	call per_test;				/* . */
						/*[5.3-1]*/
	if ^found
	then go to test_id_xf;

/*[5.3-1]*/
	state = st;				/*[5.3-1]*/
	return;					/* XT */

test_id_xf:					/* XF */
						/*[5.3-1]*/
	tf = "1"b;


     end;

tedp:
     proc;					/* test for ED, DD, PD */

/*[5.3-1]*/
	call test_word (addr (env));			/* ENVIRONMENT */
						/*[5.3-1]*/
	if found
	then return;

/*[5.3-1]*/
	call test_word (addr (dat));			/* DATA */
						/*[5.3-1]*/
	if found
	then return;

/*[5.3-1]*/
	call test_word (addr (proc));			/* PROCEDURE */

     end;

per_test:
     proc;					/* test for period */

/*[5.3-1]*/
	if lexeme_env.token.type = 4			/*[5.3-1]*/
	then if lexeme_env.token.string = "."		/*[5.3-1]*/
	     then found = "1"b;			/*[5.3-1]*/
	     else found = "0"b;

     end;

test_word:
     proc (p);					/* test for specified string */

/*[5.3-1]*/
dcl	p		ptr;			/*[5.3-1]*/
dcl	word		char (32) varying based (p);

/*[5.3-1]*/
	if lexeme_env.token.type = 3 & lexeme_env.token.string = word
	then found = "1"b;
	else found = "0"b;

     end;

test_pn:
     proc (st);					/* test for proc-name. */

/*[5.3-1]*/
dcl	st		fixed bin;

/*[5.3-1]*/
	call gt;					/* get a token */

/*[5.3-1]*/
	call per_test;				/* . */
						/*[5.3-1]*/
	if ^found
	then go to test_pn_xf;

/*[5.3-1]*/
	found = "1"b;				/*[5.3-1]*/
	state = st;				/*[5.3-1]*/
	return;					/* XT */

test_pn_xf:					/* XF */
						/*[5.3-1]*/
	tf = "1"b;


     end;

gt:
     proc;					/* get a token */

/*[5.3-1]*/
	if tf					/* token already read */
						/*[5.3-1]*/
	then do;
		tf = "0"b;			/*[5.3-1]*/
		return;				/*[5.3-1]*/
	     end;

/*[5.3-1]*/
	call get_token;				/* read a token */

/*[5.3-1]*/
	if lexeme_env.error ^= 0
	then go to swexit;				/* eof */

     end;

GT:
     proc;					/* find word in margin A */

/*[5.3-1]*/
	call gt;					/* get a token */

/*[5.3-1]*/
	do while (lexeme_env.token.column > 11 | lexeme_env.token.type ^= 3);

/*[5.3-1]*/
	     call gt;				/* get a token */

/*[5.3-1]*/
	end;

     end;

GT1:
     proc;					/* find next real token */

/*[5.3-1]*/
	call gt;					/* get a token */

/*[5.3-1]*/
	do while (lexeme_env.token.type = 1);

/*[5.3-1]*/
	     call gt;				/* get a token */

/*[5.3-1]*/
	end;

     end;

SW:
     proc;

	call get_token;

	do while (lexeme_env.error = 0
	     & ((lexeme_env.token.type ^= 3 & lexeme_env.token.type ^= 4)
	     | ((lexeme_env.token.type = 3 | lexeme_env.token.type = 4)
	     & substr (lexeme_env.token.string_ptr -> ss, 1, lexeme_env.token.string_size) ^= key_word)));

	     call get_token;
	end;

     end;

swm:
     proc;


declare	p		ptr;

swm_2:
	if lexeme_env.current_line.length = 0
	then return;

	old, new = lexeme_env.current_line.column;
	p = lexeme_env.current_line.loc;
	tok_size = lexeme_env.current_line.size;

swm_1:
	if new <= tok_size
	then if mask & mem_tab (fixed (unspec (p -> sa (new)), 35))
	     then do;
		     new = new + 1;
		     go to swm_1;
		end;

	call form_str;

	if new_line
	then do;
		call merge;

		if cont
		then do;
			cont = "0"b;
			go to swm_2;
		     end;
	     end;

     end;

swnm:
     proc;


declare	p		ptr;

	if lexeme_env.current_line.length = 0
	then return;

	old, new = lexeme_env.current_line.column;
	p = lexeme_env.current_line.loc;
	tok_size = lexeme_env.current_line.size;

swnm_1:
	if new <= tok_size
	then if mask & ^mem_tab (fixed (unspec (p -> sa (new)), 35))
	     then do;
		     new = new + 1;
		     go to swnm_1;
		end;

	call form_str;

     end swnm;

form_str:
     proc;

	size = new - old;

	if new > tok_size
	then new_line = "1"b;
	else new_line = "0"b;

	if size = 0
	then return;

	tok_size = size + lexeme_env.token.string_size;

	if tok_size > lexeme_env.token.string_cap
	then call alloc_lexeme;

	substr (lexeme_env.token.string_ptr -> ss, lexeme_env.token.string_size + 1, size) =
	     substr (lexeme_env.current_line.loc -> ss, old);

	lexeme_env.token.string_size = lexeme_env.token.string_size + size;
	lexeme_env.token.span = lexeme_env.token.span + size;
	lexeme_env.current_line.column = new;

     end;

alloc_lexeme:
     proc;

	if lexeme_env.alloc.parity = 0
	then do;
		lexeme_env.alloc.parity = 1;
		lexeme_env.alloc.cap2 = 2 * lexeme_env.alloc.cap1;

		allocate alloc_2 in (expand_cobol_source_area);

		if lexeme_env.token.string_size ^= 0
		then alloc_2 = substr (alloc_1, 1, lexeme_env.token.string_size);

		free alloc_1;

		lexeme_env.token.string_cap = lexeme_env.alloc.cap2;
		lexeme_env.token.string_ptr = lexeme_env.alloc.ptr2;
	     end;

	else do;
		lexeme_env.alloc.parity = 0;
		lexeme_env.alloc.cap1 = 2 * lexeme_env.alloc.cap2;

		allocate alloc_1 in (expand_cobol_source_area);

		if lexeme_env.token.string_size ^= 0
		then alloc_1 = substr (alloc_2, 1, lexeme_env.token.string_size);

		free alloc_2;

		lexeme_env.token.string_cap = lexeme_env.alloc.cap1;
		lexeme_env.token.string_ptr = lexeme_env.alloc.ptr1;
	     end;
     end;


/*
				 Membership table for scans and character look-ups 
 	column 1:  alphanumeric characters [0...9 a...z alloc...Z -] 
 	column 2:  digits [0...9] 
 	column 3:  picture characters [all printable characters except " ;] 
 	column 4:  binary characters [0 1] 
 	column 5:  delimiters [nl space " ( ) , . ;] 
 	column 6:  delimiters [. ; ,] 
 	column 7:  delimiters [nl "] 
 	column 8:  delimiters [nl sp . ; ,] 
*/

dcl	m_t		(0:127) bit (8)
			init ("00000000"b /* 	(NUL)	000	  0   */,
			"00000000"b /* 	(SOH)	001	  1   */,
			"00000000"b /* 	(STX)	002	  2   */,
			"00000000"b /* 	(ETX)	003	  3   */,
			"00000000"b /* 	(EOT)	004	  4   */,
			"00000000"b /* 	(ENQ)	005	  5   */,
			"00000000"b /* 	(ACK)	006	  6   */,
			"00000000"b /* 	BEL	007	  7   */,
			"00000000"b /* 	BS	010	  8   */,
			"00000000"b /* 	HT	011	  9   */,
			"00001011"b /* 	NL(LF)	012	 10   */,
			"00000000"b /* 	VT	013	 11   */,
			"00000000"b /* 	NP(FF)	014	 12   */,
			"00000000"b /* 	(CR)	015	 13   */,
			"00000000"b /* 	RRS(S0)	016	 14   */,
			"00000000"b /* 	BRS(S1)	017	 15   */,
			"00000000"b /* 	(DLE)	020	 16   */,
			"00000000"b /* 	(DC1)	021	 17   */,
			"00000000"b /* 	HLF(DC2)	022	 18   */,
			"00000000"b /* 	(DC3)	023	 19   */,
			"00000000"b /* 	HLR(DC4)	024	 20   */,
			"00000000"b /* 	(NAK)	025	 21   */,
			"00000000"b /* 	(SYN)	026	 22   */,
			"00000000"b /* 	(ETB)	027	 23   */,
			"00000000"b /* 	(CAN)	030	 24   */,
			"00000000"b /* 	(EM)	031	 25   */,
			"00000000"b /* 	(SUB)	032	 26   */,
			"00000000"b /* 	(ESC)	033	 27   */,
			"00000000"b /* 	(FS)	034	 28   */,
			"00000000"b /* 	(GS)	035	 29   */,
			"00000000"b /* 	(RS)	036	 30   */,
			"00000000"b /* 	(US)	037	 31   */,
			"00001001"b /* 	Space	040	 32   */,
			"00100000"b /* 	!	041	 33   */,
			"00001010"b /* 	"	042	 34   */,
			"00100000"b /* 	#	043	 35   */,
			"00100000"b /* 	$	044	 36   */,
			"00100000"b /* 	%	045	 37   */,
			"00100000"b /* 	&	046	 38   */,
			"00100000"b /* 	'	047	 39   */,
			"00101001"b /* 	(	050	 40   */,
			"00101001"b /* 	)	051	 41   */,
			"00100000"b /* 	*	052	 42   */,
			"00100000"b /* 	+	053	 43   */,
			"00101101"b /* 	,	054	 44   */,
			"10100000"b /* 	-	055	 45   */,
			"00101101"b /* 	.	056	 46   */,
			"00100000"b /* 	/	057	 47   */,
			"11110000"b /* 	0	060	 48   */,
			"11110000"b /* 	1	061	 49   */,
			"11100000"b /* 	2	062	 50   */,
			"11100000"b /* 	3	063	 51   */,
			"11100000"b /* 	4	064	 52   */,
			"11100000"b /* 	5	065	 53   */,
			"11100000"b /* 	6	066	 54   */,
			"11100000"b /* 	7	067	 55   */,
			"11100000"b /* 	8	070	 56   */,
			"11100000"b /* 	9	071	 57   */,
			"00100000"b /* 	:	072	 58   */,
			"00001101"b /* 	;	073	 59   */,
			"00100000"b /* 	<	074	 60   */,
			"00100000"b /* 	=	075	 61   */,
			"00100000"b /* 	>	076	 62   */,
			"00100000"b /* 	?	077	 63   */,
			"00100000"b /* 	@	100	 64   */,
			"10100000"b /* 	A	101	 65   */,
			"10100000"b /* 	B	102	 66   */,
			"10100000"b /* 	C	103	 67   */,
			"10100000"b /* 	D	104	 68   */,
			"10100000"b /* 	E	105	 69   */,
			"10100000"b /* 	F	106	 70   */,
			"10100000"b /* 	G	107	 71   */,
			"10100000"b /* 	H	110	 72   */,
			"10100000"b /* 	I	111	 73   */,
			"10100000"b /* 	J	112	 74   */,
			"10100000"b /* 	K	113	 75   */,
			"10100000"b /* 	L	114	 76   */,
			"10100000"b /* 	M	115	 77   */,
			"10100000"b /* 	N	116	 78   */,
			"10100000"b /* 	O	117	 79   */,
			"10100000"b /* 	P	120	 80   */,
			"10100000"b /* 	Q	121	 81   */,
			"10100000"b /* 	R	122	 82   */,
			"10100000"b /* 	S	123	 83   */,
			"10100000"b /* 	T	124	 84   */,
			"10100000"b /* 	U	125	 85   */,
			"10100000"b /* 	V	126	 86   */,
			"10100000"b /* 	W	127	 87   */,
			"10100000"b /* 	X	130	 88   */,
			"10100000"b /* 	Y	131	 89   */,
			"10100000"b /* 	Z	132	 90   */,
			"00100000"b /* 	[	133	 91   */,
			"00100000"b /* 	\	134	 92   */,
			"00100000"b /* 	]	135	 93   */,
			"00100000"b /* 	^	136	 94   */,
			"00100000"b /* 	_	137	 95   */,
			"00100000"b /* 	`	140	 96   */,
			"10100000"b /* 	a	141	 97   */,
			"10100000"b /* 	b	142	 98   */,
			"10100000"b /* 	c	143	 99   */,
			"10100000"b /* 	d	144	100   */,
			"10100000"b /* 	e	145	101   */,
			"10100000"b /* 	f	146	102   */,
			"10100000"b /* 	g	147	103   */,
			"10100000"b /* 	h	150	104   */,
			"10100000"b /* 	i	151	105   */,
			"10100000"b /* 	j	152	106   */,
			"10100000"b /* 	k	153	107   */,
			"10100000"b /* 	l	154	108   */,
			"10100000"b /* 	m	155	109   */,
			"10100000"b /* 	n	156	110   */,
			"10100000"b /* 	o	157	111   */,
			"10100000"b /* 	p	160	112   */,
			"10100000"b /* 	q	161	113   */,
			"10100000"b /* 	r	162	114   */,
			"10100000"b /* 	s	163	115   */,
			"10100000"b /* 	t	164	116   */,
			"10100000"b /* 	u	165	117   */,
			"10100000"b /* 	v	166	118   */,
			"10100000"b /* 	w	167	119   */,
			"10100000"b /* 	x	170	120   */,
			"10100000"b /* 	y	171	121   */,
			"10100000"b /* 	z	172	122   */,
			"00100000"b /* 	{	173	123   */,
			"00100000"b /* 	|	174	124   */,
			"00100000"b /* 	}	175	125   */,
			"00100000"b /* 	~	176	126   */,
			"00000000"b /* 	DEL	177	127   */);

/* character classes defined by the x table */

/*	1	A...Za...z
	2	0...9
	3	"
	4
	5	,;
	6	+
	7	*
	8	%
	9	/
	10	illegal
	11	(
	12	nl , SP
	13	)
	14	.
	15	=
	16	<
	17	>
	18	-
*/

dcl	x_i		(0:127) fixed bin (8)
			init (10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12, 10, 3, 10, 10, 8, 10, 10, 11, 13, 7, 6, 5,
			18, 14, 9, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 10, 5, 16, 15, 17, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10);

dcl	lower_case_alphabet char (128) static options (constant) init (" 	
 !""#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");

%include cobol_lexeme_env;

     end;
