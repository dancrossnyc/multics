/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_MSORT_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* format: style3 */
cobol_MSORT_:
     proc;					/* Version 2. */

/*
	cobol_MSORT_ (a special version of SORT) inputs three data structures and a comparison
	procedure. The "records" specified by the data structures are sorted according
	to the comparison procedure and moved into the "next" merge storage areas (three
	similar data structures).

	The array I (based on SIp) contains SIi entries. Each value in I is the index
	to a row in R (based on SRp). Each row of R contains two values, a
	first bit and the number of bits in a "record" located in the S string (based
	on SSp). The records are sorted according to the procedure pointed to by "cmp".
	The result is stored in an R table and S string, in a sorted order, based on
	the pointers "rp" and "sp". A row in the I array (based on MIp) contains the
	number of records for the "next" merge string.
*/
	i = cobol_SM_$MIi + 1;			/* Count the merge strings. */
	if i > cobol_SM_$max4
	then do;
		cobol_SM_$ec = 4;
		signal condition (SORTM_STOP);
	     end;					/* Create the next merge string R and S segments. */
	if cobol_FILE_$OUT ("cobol_MSORT_", (cobol_SM_$sort_dir), "SRTM.MR." || cobol_NUMS_ (i), "rwa", rp)
	     | cobol_FILE_$OUT ("cobol_MSORT_", (cobol_SM_$sort_dir), "SRTM.MS." || cobol_NUMS_ (i), "rwa", sp)
	then do;
		cobol_SM_$ec = 5;
		signal condition (SORTM_STOP);
	     end;

	if i = 1
	then cmpe = cobol_SM_$cmp;			/* Assign the comparison procedure
				   at the  first call. */
	cobol_SM_$MIi = i;
	cobol_SM_$MIp -> I (i) = cobol_SM_$SIi;		/* The number of "records" in the "next" merge store. */
	cobol_SM_$MRp (i) = rp;			/* Pointer to "next" merge R table. */
	cobol_SM_$MSp (i) = sp;			/* Pointer to "next" merge S string. */

/*
	calculate the lengths of
	lists and their start pointers
	in a linear set.
*/
	t = 0;
	l = cobol_SM_$SIi;
	do n = 1 by 1 while (l > 1);
	     cobol_SM_$s (n) = t;			/* start of the next list. */
	     if substr (unspec (l), 36, 1)
	     then l = l + 1;			/* make the length even. */
	     t = t + l;				/* accumulate the lengths. */
	     l = l / 2;				/* next list is 1/2 the length of the present list. */
	end;
	n = n - 1;

/* fill in all lists. */
	do i = 2 to n;
	     lft = cobol_SM_$s (i - 1);
	     rit = cobol_SM_$s (i);
	     do j = 1 by 2 to (rit - lft);
		x = lft + j;
		v1 = cobol_SM_$SIp -> I (x);
		v2 = cobol_SM_$SIp -> I (x + 1);
		if v2 > 0
		then do;
			cobol_SM_$fb1 = cobol_SM_$SRp -> R.pt (v1);
			cobol_SM_$bl1 = cobol_SM_$SRp -> R.ln (v1);
			cobol_SM_$fb2 = cobol_SM_$SRp -> R.pt (v2);
			cobol_SM_$bl2 = cobol_SM_$SRp -> R.ln (v2);
			call cmpe;
			if cobol_SM_$result > 0
			then v1 = v2;
		     end;
		rit = rit + 1;
		cobol_SM_$SIp -> I (rit) = v1;
	     end;
	end;

/* calculate the list of pointers in o */
	y = cobol_SM_$s (n) + 1;
	do i = 1 to cobol_SM_$SIi;
	     v1 = cobol_SM_$SIp -> I (y);
	     v2 = cobol_SM_$SIp -> I (y + 1);
	     if (v1 = 0) & (v2 = 0)
	     then i = cobol_SM_$SIi + 1;		/* End "i" loop. */
	     else do;
		     if v1 = 0
		     then v1 = v2;
		     else if v2 > 0
		     then do;
			     cobol_SM_$fb1 = cobol_SM_$SRp -> R.pt (v1);
			     cobol_SM_$bl1 = cobol_SM_$SRp -> R.ln (v1);
			     cobol_SM_$fb2 = cobol_SM_$SRp -> R.pt (v2);
			     cobol_SM_$bl2 = cobol_SM_$SRp -> R.ln (v2);
			     call cmpe;
			     if cobol_SM_$result > 0
			     then v1 = v2;
			end;			/* Move the next sorted record to the merge  string. */
		     l = cobol_SM_$SRp -> R.ln (v1);
		     substr (sp -> S, ns, l) = substr (cobol_SM_$SSp -> S, cobol_SM_$SRp -> R.pt (v1), l);
		     np = np + 1;
		     rp -> R.pt (np) = ns;		/* Location of merge record. */
		     rp -> R.ln (np) = l;		/* The length of the merge record. */
		     ns = ns + l;
		     cobol_SM_$SIp -> I (v1) = 0;	/* delete the last winner. */
		     do j = 2 to n;			/* get the next winner. */
			lft = cobol_SM_$s (j - 1);
			if substr (unspec (v1), 36, 1)
			then v2 = v1 + 1;
			else v2 = v1 - 1;
			x = (v1 + 1) / 2;
			v1 = cobol_SM_$SIp -> I (v1 + lft);
			v2 = cobol_SM_$SIp -> I (v2 + lft);
			if v1 = 0
			then v1 = v2;
			else if v2 > 0
			then do;
				cobol_SM_$fb1 = cobol_SM_$SRp -> R.pt (v1);
				cobol_SM_$bl1 = cobol_SM_$SRp -> R.ln (v1);
				cobol_SM_$fb2 = cobol_SM_$SRp -> R.pt (v2);
				cobol_SM_$bl2 = cobol_SM_$SRp -> R.ln (v2);
				call cmpe;
				if cobol_SM_$result > 0
				then v1 = v2;
			     end;
			cobol_SM_$SIp -> I (x + cobol_SM_$s (j)) = v1;
			v1 = x;
		     end;
		end;
	end;
dcl	(
	cobol_SM_$SIp,
	cobol_SM_$SSp,
	cobol_SM_$MIp,
	cobol_SM_$MRp	(1000),
	cobol_SM_$MSp	(1000),
	cobol_SM_$SRp
	)		ptr ext,
	(
	cobol_SM_$SIi,
	cobol_SM_$s	(36),
	cobol_SM_$ec,
	cobol_SM_$fb1,
	cobol_SM_$fb2,
	cobol_SM_$bl1,
	cobol_SM_$bl2,
	cobol_SM_$result,
	cobol_SM_$max4,
	cobol_SM_$MIi
	)		fixed bin (35) ext,
	cobol_SM_$sort_dir	char (168) var ext,
	cobol_SM_$cmp	entry variable ext,
	(sp, rp)		ptr,
	S		bit (2359296) aligned based,
	I		(65536) fixed bin (35) aligned based,
	1 R		(32768) aligned based,
	  2 pt		fixed bin (35),
	  2 ln		fixed bin (35),
	cobol_NUMS_	entry (fixed bin (35)) ext returns (char (13) var),
	cobol_FILE_$OUT	entry (char (*), char (*), char (*), char (*), ptr) ext returns (bit (1)),
	cmpe		entry variable static internal,
	SORTM_STOP	condition ext,
	(
	ns		init (1),
	np		init (0)
	)		fixed bin (35),
	(t, n, v1, v2, l, x, j, y, lft, rit, i)
			fixed bin (35) static internal;


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

     end cobol_MSORT_;
