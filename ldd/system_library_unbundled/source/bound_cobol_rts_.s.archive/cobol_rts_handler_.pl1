/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_rts_handler_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 8/18/76 by Bob Chang to change ext data name cobol_sort_  into cobol_SM_. */
/* Modified on 6/30/76 by Bob Chang to implement cleanup condition for sort. */
/*{*/
/* format: style3 */
cobol_rts_handler_:
     proc (mcp, cond_name, wc_cobol_ptr, info_ptr, continue_sw);


dcl	sort_$terminate	entry (fixed bin (35)),
	mcode		fixed bin (35);		/*
This procedure is the fixedoverflow handler for object
programs compiled by the Multics Cobol compiler.
This procedure looks at a flag in the static data portion of
the linkage section of the Cobol program in which the
fixedoverflow was detected, to determine how to respond to the
fixedoverflow.

	1.  If the flag is zero, then this handler sets its
	parameter "continue_sw" ON, and returns.  Setting
	this parameter ON results in the signalling of
	the next most recently established handler for fixedoverflow,
	after this procedure exits.  (  The effect of this
	type of return is that the execution of this procedure
	has no effect.)
	2.  If the flag is non-zero, then the machine state
	saved at the time the fixedoverflow was detected are
	modified slightly,  (see details below) and this
	procedure returns with parameter "continue_sw" set
	to "0"b.  The effect of this type of return is that
	control returns to the Cobol program in which the
	fixedoverflow condition was detected.
*/

/*  DECLARATION OF THE PARAMETERS  */

/*  dcl mcp ptr;  */
/*  THIS PARAMETER IS DECLARED BELOW
	IN AN INCLUDE FILE  */
dcl	cond_name		char (32);
dcl	cobol_SM_$ec	fixed bin (35) ext,
	cobol_SM_$stat_ptr	ptr ext,
	cobol_SM_$error_ptr ptr ext,
	cobol_SM_$RETbl	fixed bin (35) ext;
dcl	wc_cobol_ptr	ptr;
dcl	info_ptr		ptr;
dcl	continue_sw	bit (1);

dcl	cobol_error_	entry (fixed bin, fixed bin (35), fixed bin, fixed bin, char (65) varying, ptr) ext;

/*  DESCRIPTION OF THE PARAMETERS  */

/*  NOTE:  The following information was obtained from the
MPM, section 6.2.  */

/*
PARAMETER		DESCRIPTION

mcp		Pointer to information describing the
		state of the processor at the time the
		fixedoverflow was detected.  (input)
cond_name		Not used by this procedure.
wc_cobol_ptr		Not used by this procedure.
info_ptr		Not used by this procedure.
continue_sw	A binary switch indicating the action to
		be taken when the handler returns to the
		condition mechanism.  Normally, when a
		handler returns, control returns to the
		point at whcih the condiion was raised, and
		that operation is re-tried.  This is the case
		when "continue_sw" is set to "0"b.
		However, if we do want to return
		to the Cobol program in which fixedoverflow
		was detected, we want to return to some
		point OTHER THAN THE POINT WHERE THE
		FIXED OVERFLOW WAS DETECTED.  This is done
		by modifying two entries in the saved
		machine conditions, setting "continue_sw"
		to "0"b, and then returning.  The two entries
		in the saved machine conditions that must
		be modified are:

		1.  The value of the IC at which the
		fixedoverflow was detected.  This value is
		incremented (or decremented) so that when
		this procedure returns, return is to the
		desired point, rather than the point at
		which the fixedoverflow was detected.

		2.  The multi-instruction format
		INDICATOR bit in the saved machine
		conditions is set to "0"b.

		If control is not to return to the Cobol
		program, then the continue_sw" is set to
		"1"b, and this procedure returns.  Under
		these conditions, the condition mechanism
		behaves as though this handler,
		cobol_rts_handler_, had not been established
		and invokes the next most recently established
		handler for the fixedoverflow conditon.

*/

/*}*/

dcl	vprog_id		char (65) varying;

/**************************************************/
/*	START OF EXECUTION			*/
/*	EXTERNAL PROCEDURE			*/
/*	cobol_rts_handler_			*/
/**************************************************/



/* THE CODE FOR HANDLING fixedoverflow IS NOW OBSOLETE */

/*   if cond_name = "fixedoverflow" then do;
/* /*  Base the stack frame template on the stack frame of the procedure in which the fixedoverflow was
/* 	detected.  */
/* 	stack_frame_ptr = mc.prs(6);
/* /*  Get the pointer to the linkage section of the procedure in which the fixedoverflow was detected.  */
/* 	stat_ptr = addrel(stack_frame.link_ptr,8);
/* if stat.fo_flag = 0
/* 	then continue_sw = "1"b;  /*  Return to the most recently previously established
/* 	fixedoverflow handler  */
/* 	else do;  /*  Increment the IC value saved in the machine conditions, and return
/* 		to the Cobol object program in which the overflow was detected.  */
/* 		continue_sw = "0"b;
/* 		/*  Increment the IC by the value contained in the Cobol program's static data area.  */
/* 		scup = addr(mc.scu(0));
/* 		scu.ilc = fixed (unspec(scu.ilc) + stat.fo_disp,18);
/* 		/*  Turn off the multi-instruction format INDICATOR register bit in the
/* 		saved machine conditions for the objcet program in which fixedoverflow was detected.  */
/* 		scu.ir.mif = "0"b;
/* 		end;  /*  Increment the IC value saved in the machine conditions, and return
/* 		to the Cobol object program in whcih the overflow was detected.  */
/*   end;
/* else
*/
	if substr (cond_name, 1, 10) ^= "SORTM_STOP"
	then do;
		call sort_$terminate (mcode);
		return;
	     end;
	else do;					/* temporary. */
		cobol_SM_$RETbl = 0;		/* tell the SORT package  rap up sorting*/
		if cobol_SM_$ec = 8 | cobol_SM_$ec = 9 | cobol_SM_$ec = 11
		then return;
		else do;
			stat_ptr = cobol_SM_$stat_ptr;/* set by appropriate cobol SORT statement. */
			vprog_id = prog_id;
			call cobol_error_ (50, 0, line_no (1), 0, vprog_id, cobol_SM_$error_ptr);
			return;
		     end;
	     end;
	return;					/* shouldn't have gotten here anyhow */



/**************************************************/
/*	INCLUDE FILES USED IN THIS PROCEDURE	*/
/**************************************************/


/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

/* %include mc;  OBSOLETE */
dcl	mcp		ptr;
%include cobol_fixed_static;
/* %include cobol_stack_frame;  OBSOLETE */
/**************************************************/
/*	END OF EXTERNAL PROCEDURE		*/
/*	cobol_rts_handler_			*/
/**************************************************/

     end cobol_rts_handler_;
