/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_error_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 06/08/79 by PRP, [4.0-1], print_cobol_error_ made to use error_output */
/* Modified since Version 4.0 */
/*{*/
/* format: style3 */
cobol_error_:
     proc (cobol_code, multics_code, line_no1, line_no2, progname, error_ptr);

/*  This is a run-time routine for reporting object errors
which occur in cobol programs or are discovered by cobol
run-time support routines.  It reports the error to the
error_output stream and signals the "error" condition.
The sub-generators cobol_process_error and cobol_gen_error are used by
code generators to set up a call to this routine.  */

dcl	cobol_code	fixed bin parameter;
dcl	multics_code	fixed bin (35) parameter;
dcl	line_no1		fixed bin parameter;
dcl	line_no2		fixed bin parameter;
dcl	progname		char (65) varying parameter;
dcl	error_ptr		ptr parameter;


/*
cobol_code	indicates the cobol error number (input).

multics_code	indicates the multics status code (input).

line_no1		the line number on which the error occurred.
		If 0, no line number is applicable
		and no such indication will be given in the
		error message (input).

line_no2		the additional line number.  If 0, then only
		a one-part line number is given (input).

progname		a character string containing the name of the
		program which produced the error.  The
		cobol_process_error sub-generator will always
		set is to the name of the program for which
		code is being generated.  Run-time support
		routines may identify the program which
		called them of themselves, depending on the
		nature of the error.  If this is a null
		string, then no program name is applicable
		and none will be attached to the error
		message (input).

error_ptr		a pointer to the location at which the error
		was discovered or to the location at which
		cobol_error_ is called from.  The
		cobol_process_error sub-generator will always
		set it to the latter (input).


The following message(s) will be output to the "error_output" stream:

     ["progname": Multics message (from com_err_)]
     ["progname": COBOL error message]
     Error occurred at "segno|offset"
          [in "progname" [on line ["line_no2"] "line_no1"]]

The first line is printed only if multics_code is non-zero.  The second line is printed
only if cobol_code is non-zero.
The third line is always printed.  The progname portion of it is not present
if progname is null; the line_no2 portion of it is not present is line_no2 is zero;
the line_no1 portion of it is not present if line_no1 is zero.
}*/

/* COBOL ERROR TABLE */
dcl	cet_ptr		ptr static init (null ());
dcl	cet		char (100000) based (cet_ptr);
dcl	1 cobol_error_table based (cet_ptr),
	  2 max		fixed bin aligned,
	  2 error		(0 refer (cobol_error_table.max)) aligned,
	    3 start	fixed bin unal,
	    3 len		fixed bin unal;		/* DECLARATIONS */
dcl	len		fixed bin;
dcl	code		fixed bin (35);

dcl	dname		char (168);
dcl	ename		char (32);
dcl	inprog		char (168);
dcl	online		char (24);
dcl	shortinfo		char (8) aligned;
dcl	longinfo		char (100) aligned;

dcl	evar		entry auto;
dcl	bptr		ptr based (addr (evar));

dcl	cobol_error_$use	entry (fixed bin, fixed bin (35), fixed bin, fixed bin, char (65) varying, ptr);
dcl	convert_status_code_
			entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl	com_err_		entry options (variable);
dcl	hcs_$make_ptr	entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl	ioa_$ioa_stream	entry options (variable);
dcl	ioa_$ioa_stream_nnl entry options (variable);
dcl	ioa_$rs		entry options (variable);
dcl	ioa_$rsnnl	entry options (variable);
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	signal_		entry (char (*));


/*************************************/
start:
	if cet_ptr = null ()
	then call set_cet_ptr;
	if multics_code ^= 0
	then do;
		call convert_status_code_ (multics_code, shortinfo, longinfo);
		if progname ^= ""
		then call ioa_$ioa_stream_nnl ("error_output", "^a: ", progname);
		call ioa_$ioa_stream ("error_output", longinfo);
	     end;

	if cobol_code > 0
	then do;
		if progname ^= ""
		then call ioa_$ioa_stream_nnl ("error_output", "^a: ", progname);
		if cobol_code > cobol_error_table.max
		then call ioa_$ioa_stream ("error_output", "Invalid cobol error code ^d", cobol_code);
		else call ioa_$ioa_stream ("error_output",
			substr (cet, error.start (cobol_code), error.len (cobol_code)));
						/*-06/02/76-*/
	     end;

	call hcs_$fs_get_path_name (error_ptr, dname, len, ename, code);
	if code ^= 0
	then inprog = "";
	else inprog = " in " || substr (dname, 1, len) || ">" || ename;
	if line_no1 > 0 | line_no2 > 0
	then if line_no1 > 0 & line_no2 > 0
	     then call ioa_$rsnnl (" on line ^d-^d", online, len, line_no2, line_no1);
	     else call ioa_$rsnnl (" on line ^d", online, len, line_no1);
	else online = "";
	call ioa_$ioa_stream ("error_output", "Error occurred at ^p^a^a", error_ptr, inprog, online);
	call cobol_error_$use (cobol_code, multics_code, line_no1, line_no2, progname, error_ptr);
						/*-05/10/76-*/
	call signal_ ("error");
	return;


/*************************************/
use:
     entry (cobol_code, multics_code, line_no1, line_no2, progname, error_ptr);
dcl	errline		char (300) static;
dcl	tline		char (120);
dcl	erroff		fixed bin;
dcl	errlen		fixed bin static init (0);

start_use:
	if cet_ptr = null ()
	then call set_cet_ptr;
	erroff = 1;
	if multics_code ^= 0
	then do;
		call convert_status_code_ (multics_code, shortinfo, longinfo);
		if progname ^= ""
		then do;
			call ioa_$rsnnl ("^a: ", tline, len, progname);
			substr (errline, erroff, len) = tline;
			erroff = erroff + len;
		     end;
		call ioa_$rs (longinfo, tline, len);
		substr (errline, erroff, len) = tline;
		erroff = erroff + len;
	     end;

	if cobol_code > 0
	then do;
		if progname ^= ""
		then do;
			call ioa_$rsnnl ("^a: ", tline, len, progname);
			substr (errline, erroff, len) = tline;
			erroff = erroff + len;
		     end;
		if cobol_code > cobol_error_table.max
		then call ioa_$rs ("Invalid cobol error code ^d", tline, len, cobol_code);
						/*-06/02/76-*/
		else do;
			call ioa_$rs (substr (cet, error.start (cobol_code), error.len (cobol_code)), tline, len);
						/*-06/02/76-*/
			substr (errline, erroff, len) = tline;
			erroff = erroff + len;
		     end;
	     end;

	call hcs_$fs_get_path_name (error_ptr, dname, len, ename, code);
	if code ^= 0
	then inprog = "";
	else inprog = " in " || substr (dname, 1, len) || ">" || ename;
	if line_no1 > 0 | line_no2 > 0
	then if line_no1 > 0 & line_no2 > 0
	     then call ioa_$rsnnl (" on line ^d-^d", online, len, line_no2, line_no1);
	     else call ioa_$rsnnl (" on line ^d", online, len, line_no1);
	else online = "";
	call ioa_$rs ("Error occurred at ^p^a^a", tline, len, error_ptr, inprog, online);
	substr (errline, erroff, len) = tline;
	errlen = erroff + len - 1;
	return;


/*************************************/
print_cobol_error_:
     entry;
dcl	stream		char (32);		/*[4.0-1]*/
	stream = "error_output";
	go to join;

switch:
     entry (in_stream);
dcl	in_stream		char (*) parameter;
	stream = in_stream;

join:
	if errlen = 0
	then call ioa_$ioa_stream (stream, "Improper call to print_cobol_error_ - no pending error recorded");
	else call ioa_$ioa_stream (stream, substr (errline, 1, errlen));
	return;

/*************************************/
abort:
	call signal_ ("error");

set_cet_ptr:
     proc;
	evar = cobol_error_;
	call hcs_$make_ptr (bptr, "cobol_error_table_", "cobol_error_table_", cet_ptr, code);
	if cet_ptr = null ()
	then do;
		call com_err_ (code, "cobol rts", "cobol_error_table_$cobol_error_table_");
		go to abort;
	     end;
	return;
     end set_cet_ptr;

/*****	Declaration for builtin function	*****/

dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
			builtin;

/*****	End of declaration for builtin function	*****/

     end cobol_error_;
