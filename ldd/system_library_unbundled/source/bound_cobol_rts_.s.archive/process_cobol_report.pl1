/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright,(C) Honeywell Information Systems Inc.,1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(1989-04-23,Zimmerman), approve(1989-04-23,MCR8081),
     audit(1989-05-05,RWaters), install(1989-05-24,MR12.3-1048):
     MCR8081 process_cobol_report.pl1 Change behavior to prevent creation of
     zero or incorrect length output files.
  2) change(1989-04-23,Zimmerman), approve(1989-04-23,MCR8084),
     audit(1989-05-05,RWaters), install(1989-05-24,MR12.3-1048):
     MCR8084 process_cobol_report.pl1 Correct problem with adding to MSF
     components.
  3) change(2017-01-19,Swenson), approve(2017-01-19,MCR10028),
     audit(2017-01-20,GDixon), install(2017-01-20,MR12.6f-0015):
     Remove spurious \015 character from source introduced when copied from
     ACTC/MIT tape.
                                                   END HISTORY COMMENTS */


/* Modified on 11/28/84 by FCH, [5.3-2], BUG570(phx16601), MSFs give out of bounds */
/* Modified on 89/03/10 by LVZ, bug572(phx16632) delete null output file. */
/* Modified on 11/17/84 by FCH, {5.3-1], BUG572(phx16632),initialize bit count */
/* Modified since Version 5.0 */

/* format: style3 */
process_cobol_report:
pcr:
     proc;

dcl	SZ_OF_INPUT_STRING	fixed bin (35) static internal options (constant) init (1048576);
dcl	SZ_OF_INPUT_ARRAY	fixed bin (35) static internal options (constant) init (1048576);
dcl	SZ_OF_OUT_STRING	fixed bin (35) static internal options (constant) init (1048576);
dcl	SZ_OF_OUT_ARRAY	fixed bin (35) static internal options (constant) init (1048576);
dcl	SZ_OF_DATA	fixed bin (35) static internal options (constant) init (32768);


dcl	input_string	char (SZ_OF_INPUT_STRING) based (in_ptr);
dcl	input_array	(SZ_OF_INPUT_ARRAY) char (1) based (in_base_ptr);
dcl	sys_info$max_seg_size
			fixed bin (35) ext static;	/*[5.3-2]*/
dcl	(max_size, maxer_size)
			fixed bin (35);		/*[5.3-2]*/
dcl	(old_size, new_size)
			fixed bin;
dcl	character_offset	fixed bin (35);
dcl	next_offset	fixed bin (35);

dcl	01 text_line_in	based (in_ptr) unal,
	  02 size		fixed bin (35) unal,
	  02 report_code	char (2),
	  02 control	char (1),
	  02 filler	char (1),
	  02 data		char (SZ_OF_DATA);

dcl	01 skip_line_in	based (in_ptr) unal,
	  02 size		fixed bin (35) unal,
	  02 report_code	char (2),
	  02 control	char (1),
	  02 filler	char (1),
	  02 number_of_skips
			fixed bin (35) unal;

dcl	skip_length	fixed bin (21);
dcl	report_codes_in	char (255) varying;
dcl	requested_code	char (2);
dcl	cch		char (1);

dcl	in_ptr		pointer;
dcl	in_base_ptr	pointer;

dcl	cu_$arg_count	entry (fixed bin);
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl	num_of_args	fixed bin;
dcl	arg_no		fixed bin;
dcl	arg_ptr		pointer;
dcl	arg_len		fixed bin;
dcl	code		fixed bin (35);
dcl	arg		char (arg_len) based (arg_ptr);

dcl	reply		char (40);
dcl	iox_$get_line	entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl	iox_$put_chars	entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl	iox_$user_output	pointer external;
dcl	user_out		ptr init (null ());

dcl	msf_manager_$open	entry (char (*), char (*), pointer, fixed bin (35));
dcl	msf_manager_$get_ptr
			entry (pointer, fixed bin, bit (1) aligned, pointer, fixed bin (24), fixed bin (35));
dcl	msf_manager_$close	entry (pointer);

dcl	delete_$path	entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl	expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35));
dcl	in_dirname	char (168);
dcl	in_entryname	char (32);

dcl	who_am_i		char (20) init ("process_cobol_report");
dcl	com_err_		entry options (variable);

dcl	i		fixed bin;

dcl	error_table_$badopt fixed bin (35) ext static;
dcl	error_table_$noentry
			fixed bin (35) ext static;
dcl	error_table_$badpath
			fixed bin (35) ext static;

dcl	file_output	bit (1);
dcl	fcb_ptr		pointer;
dcl	component_of_msf	fixed bin;
dcl	in_bit_count	fixed bin (24);
dcl	previous_in_ptr	pointer;
dcl	data_ptr		pointer;

dcl	all_codes		bit (1);
dcl	true		bit (1) static internal options (constant) init ("1"b);
dcl	false		bit (1) static internal options (constant) init ("0"b);

dcl	length_of_data	fixed bin (35);
dcl	newline_buffer	char (254) init ((254)"
");
dcl	eof		bit (1);
dcl	in_seg_size	fixed bin (35);

dcl	out_dirname	char (168);
dcl	out_entryname	char (32);

dcl	out_fcb_ptr	pointer;
dcl	aclinfo_ptr	pointer;
dcl	out_base_ptr	pointer;
dcl	out_ptr		pointer;

dcl	out_string	char (SZ_OF_OUT_STRING) based (out_ptr);
dcl	out_array		(SZ_OF_OUT_ARRAY) char (1) based (out_base_ptr);
dcl	out_bit_count	fixed bin (24);
dcl	out_char_offset	fixed bin (35);
dcl	new_line		char (1) init ("
");

dcl	tssi_$get_file	entry (char (*), char (*), ptr, ptr, ptr, fixed bin (35));
dcl	tssi_$finish_file	entry (ptr, fixed bin, fixed bin (24), bit (36) aligned, ptr, fixed bin (35));

dcl	data_length	fixed bin (21);
dcl	rcd_arg		bit (1);

dcl	1 component_list	(0:15),
	  02 base_seg_ptr	pointer,
	  02 character_count
			fixed bin (35);

dcl	report_code_list	(64) char (2);
dcl	num_of_reports	fixed bin;
dcl	position		fixed bin (35);
dcl	last_component	bit (1);
dcl	report_index	fixed bin;
dcl	list_index	fixed bin;
dcl	found		bit;
dcl	num_of_components	fixed bin;
dcl	rest_of_segment	fixed bin;
dcl	buffer		char (266);
dcl	next_out_char_off	fixed bin;
dcl	out_component	fixed bin;
dcl	out_bc		fixed bin (24);		/*[5.3-2]*/
dcl	max_line_size	fixed bin init (256);	/*[5.3-2]*/
dcl	max_rec_size	fixed bin init (266);	/*[5.3-2]*/
dcl	cd_size		fixed bin init (10);	/*[5.3-2]*/
dcl	(segres, recsize)	fixed bin;
dcl	newpage_flag	bit (1);
dcl	stop_flag		bit (1);
dcl	newpage		char (1) init ("");

/*[5.3-1]*/
	out_bit_count = 0;

	newpage_flag = true;
	stop_flag = false;
	user_out = iox_$user_output;
	max_size = sys_info$max_seg_size * 4;		/*[5.3-2]*/
	maxer_size = max_size + 1;
	all_codes = false;
	rcd_arg = false;
	num_of_reports = 1;
	report_code_list (1) = "  ";
	out_component = 0;
	file_output = false;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);

	if code ^= 0
	then go to error_and_out;

	if arg_len = 0
	then call comerr (0, 1, "^R""""^B");		/* null pathname */

	call expand_pathname_ (arg, in_dirname, in_entryname, code);

	if code ^= 0
	then call comerr (code, 1, arg);

	call cu_$arg_count (num_of_args);

	do i = 2 to num_of_args;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if code ^= 0
	     then go to error_and_out;

	     if arg = "-of" | arg = "-output_file"
	     then do;

		     file_output = "1"b;
		     i = i + 1;

		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

		     if code ^= 0
		     then go to error_and_out;
		     else do;

			     call expand_pathname_ (arg, out_dirname, out_entryname, code);
			     if code ^= 0
			     then go to error_and_out;

			end;
		end;
	     else if arg = "-rcd" | arg = "-report_code"
	     then do;

		     if all_codes
		     then call comerr (0, 1, "The arguments -a and -rcd are incompatible");
		     else rcd_arg = true;

		     i = i + 1;

		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

		     if code ^= 0
		     then go to error_and_out;
		     else do;

			     num_of_reports = 0;

			     do position = 3 to arg_len by 3;

				if substr (arg, position, 1) = ","
				then do;

					num_of_reports = num_of_reports + 1;
					report_code_list (num_of_reports) = substr (arg, position - 2, 2);

				     end;
				else call comerr (0, 1, "Illegal report code list");

			     end;

			     if position - 1 = arg_len
			     then do;

				     num_of_reports = num_of_reports + 1;
				     report_code_list (num_of_reports) = substr (arg, position - 2, 2);

				end;
			     else call comerr (0, 1, "Illegal report code list.");

			end;
		end;
	     else if arg = "-a" | arg = "-all"
	     then if rcd_arg
		then call comerr (0, 1, "The options -rcd and -a are incompatible");
		else all_codes = true;
	     else if arg = "-nnp" | arg = "-no_newpage"
	     then newpage_flag = false;
	     else if arg = "-sp" | arg = "-stop"
	     then stop_flag = true;
	     else call comerr (error_table_$badopt, 1, arg);
	end;

	call msf_manager_$open (in_dirname, in_entryname, fcb_ptr, code);

	if code ^= 0
	then call comerr2 (code, 1, "^a>^a", in_dirname, in_entryname);

	do component_of_msf = 0 to 15;
	     component_list.base_seg_ptr (component_of_msf) = null ();
	end;

	last_component = false;
	component_of_msf = -1;

	do while (^last_component);			/* component table for report file */

	     component_of_msf = component_of_msf + 1;

	     call msf_manager_$get_ptr (fcb_ptr, component_of_msf, "0"b, in_base_ptr, in_bit_count, code);

	     if code = error_table_$noentry
	     then last_component = true;
	     else if code ^= 0
	     then call comerr2 (code, 2, "^a>^a", in_dirname, out_dirname);
	     else do;

		     component_list.base_seg_ptr (component_of_msf) = in_base_ptr;
		     component_list.character_count (component_of_msf) = divide (in_bit_count, 9, 35, 0);

		end;

	end;

	num_of_components = component_of_msf - 1;

	if all_codes
	then call fill_code_list;

	if file_output
	then do;					/*output file specified */

		call tssi_$get_file (out_dirname, out_entryname, out_base_ptr, aclinfo_ptr, out_fcb_ptr, code);

		if code ^= 0
		then call comerr2 (code, 2, "^a>^a", out_dirname, out_entryname);

		out_ptr = out_base_ptr;
		out_char_offset = 1;

	     end;

	do report_index = 1 to num_of_reports;		/* for each report */

	     requested_code = report_code_list (report_index);

	     call set_comp0;

	     eof = false;

	     call get_line;

	     if eof
	     then call comerr2 (0, 3, "Requested report code,^a,not found or format error in ^a", requested_code,
		     in_dirname || ">" || in_entryname);

	     if file_output
	     then do;				/* output file specified */

		     do while (^eof);		/* for each report record */

			data_length = text_line_in.size;

			if cch = ":"
			then do;

				next_out_char_off = out_char_offset + 1 + data_length;

/*[5.3-2]*/
				if next_out_char_off > maxer_size
				then do;		/* record does not fit */

/*[5.3-2]*/
					call set_sizes;

/*[5.3-2]*/
					substr (out_string, 1, old_size) =
					     substr (text_line_in.data, 1, old_size);

					call msf;

/*[5.3-2]*/
					if new_size > 1
						/*[5.3-2]*/
					then substr (out_string, 1, new_size - 1) =
						substr (text_line_in.data, old_size + 1);

/*[5.3-2]*/
					substr (out_string, new_size, 1) = new_line;

				     end;
				else do;		/* record fits */

					substr (out_string, 1, data_length) =
					     substr (text_line_in.data, 1, data_length);
					substr (out_string, data_length + 1, 1) = new_line;

				     end;

				out_char_offset = next_out_char_off;

			     end;
			else if cch = "r"
			then do;

				skip_length = skip_line_in.number_of_skips;

				if skip_length <= 254
				then do;

					next_out_char_off = out_char_offset + skip_length;

/*[5.3-2]*/
					if next_out_char_off > maxer_size
					then do;	/* record does not fit */

/*[5.3-2]*/
						call set_sizes;

/*[5.3-2]*/
						substr (out_string, 1, old_size) =
						     substr (newline_buffer, 1, old_size);

						call msf;

/*[5.3-2]*/
						substr (out_string, 1, new_size) =
						     substr (newline_buffer, 1, new_size);

					     end;
					else substr (out_string, 1, skip_length) =
						substr (newline_buffer, 1, skip_length);

					out_char_offset = next_out_char_off;

				     end;
				else call comerr (0, 3, "Too many successive new lines for output. Limit is 254.")
					;

			     end;
			else if cch = "n"
			then if newpage_flag
			     then do;		/* emit newpage */

				     substr (out_string, 1, 1) = newpage;
				     out_char_offset = out_char_offset + 1;

				end;
			     else ;
			else call comerr2 (0, 3, "Format error in input file. ^a>^a", in_dirname, in_entryname);

			out_ptr = addr (out_array (out_char_offset));

			call get_line;

		     end;

		     out_bit_count = (out_char_offset - 1) * 9;

		end;
	     else do;				/* terminal output specified */

		     if stop_flag
		     then call iox_$get_line (user_out, addr (reply), length (reply), 0, 0);

		     do while (^eof);

			if text_line_in.control = ":"
			then do;

				data_length = text_line_in.size;
				call iox_$put_chars (user_out, addr (text_line_in.data), data_length, code);
				call iox_$put_chars (user_out, addr (newline_buffer), 1, code);

			     end;
			else if cch = "r"
			then do;

				skip_length = skip_line_in.number_of_skips;

				if skip_length <= 254
				then call iox_$put_chars (user_out, addr (newline_buffer), skip_length, code);
				else call comerr (0, 2, "Too many successive new lines for output. Limit is 254.")
					;

			     end;
			else if cch = "n"
			then if stop_flag
			     then call iox_$get_line (user_out, addr (reply), length (reply), 0, 0);
			     else ;
			else call comerr2 (0, 2, "Format error in input file. ^a>^a", in_dirname, in_entryname);

			call get_line;
		     end;
		end;
	end;

fill_code_list:
     proc;

	call set_comp0;

	num_of_reports = 0;
	eof = false;

	do while (^eof);

	     call getl;

	     found = false;

	     do list_index = 1 to num_of_reports while (^found);
		if text_line_in.report_code = report_code_list (list_index)
		then found = true;
	     end;

	     if ^found
	     then do;
		     num_of_reports = num_of_reports + 1;
		     report_code_list (num_of_reports) = text_line_in.report_code;
		end;

	end;

     end fill_code_list;

get_line:
     proc;

	do while (^eof);

	     call getl;

	     if text_line_in.report_code = requested_code
	     then return;

	end;
     end get_line;

getl:
     proc;					/* get the nest record */



/*[5.3-2]*/
	segres = in_seg_size - next_offset + 1;		/* size of remaining data */
						/*[5.3-2]*/
	in_ptr = addr (input_array (next_offset + 2));

/*[5.3-2]*/
	if segres >= max_rec_size			/*[5.3-2]*/
	then do;					/* next record in component */
						/*[5.3-2]*/
		next_offset = next_offset + cd_size + text_line_in.size;
						/*[5.3-2]*/
		go to srx;			/*[5.3-2]*/
	     end;

/*[5.3-2]*/
	if segres > 6				/*[5.3-2]*/
	then do;					/* size control word in component */
						/*[5.3-2]*/
		recsize = cd_size + text_line_in.size;

/*[5.3-2]*/
		if segres >= recsize		/*[5.3-2]*/
		then do;
			next_offset = next_offset + recsize;
						/* next rec in comp */
						/*[5.3-2]*/
			go to srx;		/*[5.3-2]*/
		     end;

/*[5.3-2]*/
		segres = segres - 2;
		recsize = recsize - 2;		/*[5.3-2]*/
		call set_buff (segres, recsize - segres);
						/* split record */
						/*[5.3-2]*/
		next_offset = recsize - segres + 1;	/*[5.3-2]*/
		go to srx;			/*[5.3-2]*/
	     end;

/*[5.3-2]*/
	go to sr (segres);				/* size control word not completely in record */

sr (0):
sr (1):
sr (2):						/*[5.3-2]*/
	if segres = 1				/*[5.3-2]*/
	then if component_of_msf = num_of_components	/*[5.3-2]*/
	     then do;
		     eof = true;			/*[5.3-2]*/
		     return;			/*[5.3-2]*/
		end;

/*[5.3-2]*/
	call set_comp;				/* get next component */
						/*[5.3-2]*/
	next_offset = 3 - segres;			/*[5.3-2]*/
	in_ptr = addr (input_array (next_offset));	/*[5.3-2]*/
	next_offset = next_offset + 8 + text_line_in.size;/*[5.3-2]*/
	go to srx;

sr (3):
sr (4):
sr (5):
sr (6):						/* split size control word */
						/*[5.3-2]*/
	segres = 6 - segres;			/*[5.3-2]*/
	call set_buff (segres, 256 + 8 - segres);	/* split record */
						/*[5.3-2]*/
	next_offset = 4 + text_line_in.size - segres;	/*[5.3-2]*/
	go to srx;

srx:						/*[5.3-2]*/
	if text_line_in.size > max_line_size
	then go to format_error;

/*[5.3-2]*/
	cch = text_line_in.control;

     end;

set_buff:
     proc (lsz, rsz);				/* assemble split record */

/*[5.3-2]*/
dcl	(lsz, rsz, sz)	fixed bin;

/*[5.3-2]*/
	if lsz > 0
	then substr (buffer, 1, lsz) = substr (input_string, 1, lsz);

/*[5.3-2]*/
	call set_comp;				/*[5.3-2]*/
	in_ptr = in_base_ptr;			/*[5.3-2]*/
	sz = min (rsz, 256 - lsz);

/*[5.3-2]*/
	if rsz > 0
	then substr (buffer, lsz + 1, sz) = substr (input_string, 1, sz);

/*[5.3-2]*/
	in_ptr = addr (buffer);

     end;

msf:
     proc;

	out_component = out_component + 1;
	call msf_manager_$get_ptr (out_fcb_ptr, out_component, "1"b, out_base_ptr, out_bc, code);
	out_ptr = out_base_ptr;

     end;

set_sizes:
     proc;

	old_size = maxer_size - out_char_offset;
	new_size = next_out_char_off - max_size;
	next_out_char_off = new_size + 1;

     end;

set_comp0:
     proc;

	component_of_msf = 0;
	in_base_ptr = component_list.base_seg_ptr (0);
	in_seg_size = component_list.character_count (0);
	next_offset = 0;

     end;

set_comp:
     proc;

	if component_of_msf = num_of_components
	then go to format_error;

	component_of_msf = component_of_msf + 1;
	in_base_ptr = component_list.base_seg_ptr (component_of_msf);
	in_seg_size = component_list.character_count (component_of_msf);

     end;

comerr:
     proc (code, labnum, message);

dcl	code		fixed bin (35),
	labnum		fixed bin,
	message		char (*);

	call com_err_ (code, who_am_i, message);

	go to lab (labnum);

lab (1):
	go to the_end;
lab (2):
	go to close_and_end;
lab (3):
	go to close_both_and_end;

     end;

comerr2:
     proc (code, labnum, message, arg1, arg2);

dcl	code		fixed bin (35),
	labnum		fixed bin,
	message		char (*);
dcl	(arg1, arg2)	char (*);

	call com_err_ (code, who_am_i, message, arg1, arg2);

	go to lab (labnum);

lab (1):
	go to the_end;
lab (2):
	go to close_and_end;
lab (3):
	go to close_both_and_end;

     end;

close_both_and_end:
	if file_output
	then call tssi_$finish_file (out_fcb_ptr, out_component, out_bit_count, "110"b, aclinfo_ptr, code);

close_and_end:
	call msf_manager_$close (fcb_ptr);
	if out_bit_count = 0
	then call delete_$path (out_dirname, out_entryname, "011110"b, who_am_i, code);

	go to the_end;

format_error:
	call comerr (0, 3, "format error");

error_and_out:
	call com_err_ (code, who_am_i);

the_end:
     end;
