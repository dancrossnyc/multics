/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_blank_stripper_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 03/06/81 by FCH, [4.4-1], last line not processed unless ends in c.r. char, BUG469(TR9264) */
/* Modified on 10/03/79 by FCH, [4.0-1], ID field ignored */
/* Created for Version 4.1  by FCH */

/* format: style3 */
cobol_blank_stripper_:
     proc (in_ptr, out_ptr, bc);

dcl	(to_offset, from_offset, ret_loc, i, line_size)
			fixed bin (35);
dcl	(non_blank, quotct) fixed bin (35);
dcl	l_num		fixed bin;
dcl	bc		fixed bin (24);
dcl	(code, cct, rct)	fixed bin (35);

dcl	(argptr, l_ptr, in_ptr, out_ptr)
			ptr;

dcl	ch		char (1);

dcl	(divide, index, addr, substr)
			builtin;



declare	program		char (cct) based (in_ptr);
declare	prog_array	(cct) char (1) based (in_ptr);
declare	rest_prog		char (rct) based (l_ptr);
declare	ln		(ret_loc) char (1) based (l_ptr);


	cct = divide (bc, 9, 31, 0);
	to_offset, from_offset = 1;


	do while ("1"b);

	     if from_offset > cct
	     then do;
		     bc = to_offset * 9 - 9;
		     return;
		end;

	     rct = cct - from_offset + 1;
	     l_ptr = addr (prog_array (from_offset));
	     ret_loc = index (rest_prog, "
");

	     if ret_loc <= 0
	     then do;				/*[4.4-1]*/
		     ret_loc = rct + 1;		/*[4.4-1]*/
		     call scan;

		     bc = to_offset * 9 - 9;
		     return;
		end;

/*[4.4-1]*/
	     call scan;

	end;

/*[4.4-1]*/
scan:
     proc;

	ret_loc = ret_loc - 1;

	if ret_loc < 8
	then call move (ret_loc, ret_loc);
	else /*[4.0-1]*/
	     line_size = ret_loc;

/*[4.0-1]*/
	if ret_loc = 80
	then ret_loc = 72;

	if ln (7) ^= " "				/*[4.0-1]*/
	then call move (ret_loc, line_size);
	else do;
		quotct = 1;
		non_blank = 0;

		do i = ret_loc by -1 to 8;

		     ch = ln (i);
		     if ch = """"
		     then quotct = -quotct;

		     if non_blank = 0
		     then if ch ^= " "
			then non_blank = i;
		end;

		if non_blank = 0
		then call move (7, line_size);
		else if quotct < 0			/*[4.0-1]*/
		then call move (ret_loc, line_size);	/*[4.0-1]*/
		else call move (non_blank, line_size);
	     end;
     end;

move:
     proc (to_size, from_size);

declare	(to_size, from_size)
			fixed bin (35);

	substr (out_ptr -> program, to_offset, to_size + 1) = substr (in_ptr -> program, from_offset, to_size) || "
";

	to_offset = to_offset + to_size + 1;
	from_offset = from_offset + from_size + 1;
     end;

     end;
