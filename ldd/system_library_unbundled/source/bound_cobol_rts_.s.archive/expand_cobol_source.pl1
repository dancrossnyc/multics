/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 expand_cobol_source.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 02/08/82 by FCH, [5.1-3], cobol$copy_file_size defined, phx11819(BUG517) */
/* Modified on 01/04/81 by FCH, [5.1-2], let cobol_expand_source know if called by command, phx11818(BUG519) */
/* Modified on 10/27/81 by FCH, [5.1-1], issue diag if long line found, phx11819(BUG517) */
/* Modified on 07/20/81 by FCH, [4.4-2], bit count not computed correctly, phx10605(BUG495) */
/* Modified on 03/06/81 by FCH, [4.4-1], test for zero length seg, release areas if error */
/* Modified on 10/09/79 by FCH, [4.0-4], new control arguments */
/* Modified on 10/03/79 by FCH, [4.0-3], new control arguments */
/* Modified on 03/08/79 by FCH, [4.0-2], -strip blanks option */
/* Modified on 02/23/79 by FCH, [4.0-1], copy library name qualification */
/* Created on 09/16/78 by FCH */








/*	expand_cobol_source  path1 {path2} {-control_args}

	where
		path1	name of input segment, ".cobol" suffix  implied

		control_args

			one of the following

		-lower_case, -lc	lower case conversion, implies formatting

		-upper_case, -uc	upper case conversion, implies formatting

		-card			card image format, strip trailing blanks

		-expand, -exp		expand source

		-no_expand, -no_exp		do not expand source

		-format,-fmt		format cobol source

*/





/* format: style3 */
expand_cobol_source:
ecs:
     proc;

/*************************************/

	call cu_$arg_count (nargs);
	command = "1"b;
	etype = 1;				/*[4.4-1]*/
	tssi_ind = "0"b;
	ecs_info_ptr = addr (ecs_info_table);

	if nargs = 0
	then do;

		call ioa_ ("^a^/^a^/^a^/^a^/", "expand_cobol_source: Expected argument missing",
		     "Usage: expand_cobol_source path1 path2 {control_args}",
		     "Control Arguments: -format(-fmt) -lower_case(-lc) -upper_case(-uc)",
						/*[4.0-2]*/
		     "Control Arguments: -card -expand(-exp) -no_expand(-no_exp)" /*[4.0-3]*/);

		return;
	     end;

	on cleanup call cl;
	on command_abort_ call cl;
	call init;

	if code ^= 0
	then go to multics_error;

/* path1 */



	call cu_$arg_ptr (1, argptr, arglen, code);

	if code ^= 0
	then go to multics_error;

	call expand_pathname_$add_suffix (arg, "cobol", dn_1, en_1, code);

	if code ^= 0
	then go to multics_error;

	if nargs = 1
	then do;
		call gen_path2;
		if code ^= 0
		then go to multics_error;
	     end;

/*[4.0-3]*/
	else do;

		i = 2;

		do while (i <= nargs);

		     call cu_$arg_ptr (i, argptr, arglen, code);

		     if code ^= 0
		     then go to multics_error;

/*[4.0-3]*/
		     if i = 2			/*[4.0-3]*/
		     then do;
			     if substr (arg, 1, 1) = "-"
						/*[4.0-3]*/
			     then do;
				     call gen_path2;/*[4.0-3]*/
				     call process_control_arg;
						/*[4.0-3]*/
				end;		/*[4.0-3]*/
			     else call expand_pathname_$add_suffix (arg, "cobol", dn_2, en_2, code);
						/*[4.0-3]*/
			end;			/*[4.0-4]*/
		     else if substr (arg, 1, 1) = "-"	/*[4.0-4]*/
		     then call process_control_arg;	/*[4.0-4]*/
		     else go to too_many_args_error;

		     i = i + 1;

		end;

/*[4.0-3]*/
	     end;

	call hcs_$initiate_count (dn_1, en_1, "", bc, 1, s1_ptr, code);

	if s1_ptr = null ()
	then do;
		en = en_1;
		go to multics_arg_error;
	     end;					/*[4.4-1]*/
	if bc = 0					/*[4.4-1]*/
	then do;
		code = error_table_$zero_length_seg;	/*[4.4-1]*/
		en = en_1;

/*[4.4-1]*/
		go to multics_arg_error;		/*[4.4-1]*/
	     end;

	en = en_2;

/*[4.0-4]*/
	call hcs_$initiate_count (dn_2, en_2, "", bc_temp, 1, s2_ptr, code);

/*[4.0-4]*/
	if s1_ptr ^= s2_ptr				/*[4.0-4]*/
	then do;
		call tssi_$get_segment (dn_2, en_2, s2_ptr, aclinfo_ptr, code);

/*[4.4-1]*/
		tssi_ind = "1"b;

/*[4.0-4]*/
		if code ^= 0
		then go to multics_arg_error;		/*[4.0-4]*/
	     end;

	ecs_info_table_.format_indicator = "1"b;

	call finish;

	if code ^= 0
	then go to multics_error;

	goto exp_end_1;

expand:
     entry (ecs_ptr, e_code);

	on cleanup call cl;
	on command_abort_ call cl;

	ecs_info_ptr = ecs_ptr;
	command = "0"b;

	call init;

	if code ^= 0
	then go to exp_end;

	call hcs_$fs_get_path_name (ecs_info_table_.input_ptr, dn_1, ldn, en_1, code);

	if code ^= 0
	then go to exp_end;

	call hcs_$initiate_count (dn_1, en_1, "", bc, 1, s1_ptr, code);

	if s1_ptr = null ()
	then go to exp_end;

	call tssi_$get_segment (ecs_info_table_.dir, ecs_info_table_.ent, ecs_info_table_.output_ptr, aclinfo_ptr, code)
	     ;

	if code ^= 0
	then go to exp_end;

/*[4.4-1]*/
	tssi_ind = "1"b;

	s1_ptr = ecs_info_table_.input_ptr;
	s2_ptr = ecs_info_table_.output_ptr;

/*[4.0-4]*/
	if ecs_info_table_.exp_indicator
	then etype = 1;
	else etype = -1;

	if ecs_info_table_.format_indicator
	then ftype = 1;

/*[4.0-4]*/
	if ecs_info_table_.card_indicator
	then ftype = 2;

	ecs_info_table_.format_indicator = "0"b;	/*[4.0-4]*/
	ecs_info_table_.card_indicator = "0"b;

	call finish;

/* Used to reinitialize the new *.ex.cobol (expanded version) and return */
/* the pointer to COBOL */

	call hcs_$initiate_count (ecs_info_table_.dir, ecs_info_table_.ent, "", bc, 01b, ecs_info_table_.output_ptr,
	     code);

	if ^(code = 0 | code = error_table_$segknown)
	then go to exp_end;

	e_code = 0;				/*[5.1-1]*/
	ecs_info_table_.bc = bc;

	goto exp_end_1;

exp_end:
	e_code = code;

exp_end_1:
	if area_info_area.areap ^= null ()
	then call release_area_ (area_info_area.areap);
	call release_temp_segments_ ("expand_cobol_source", temp_ptr, code);

	return;

/*[4.0-1]*/

find_incl_file:
     entry (file_name, lib_name, source_ptr, file_ptr, e_code);

/*[4.0-1]*/
	if lib_name ^= ""				/*[4.0-1]*/
	then do;
		call expand_pathname_$add_suffix
		     /*[4.0-1]*/ (lib_name || ">" || file_name, "incl.cobol", dn_1, en_1, e_code);

/*[4.0-1]*/
		if e_code ^= 0
		then return;

/*[4.0-2]*/
		call hcs_$initiate_count (dn_1, en_1, "", bc, 1, file_ptr, e_code);

/*[4.0-1]*/
		if e_code = error_table_$segknown
		then e_code = 0;

/*[4.0-1]*/
	     end;					/*[4.0-1]*/
	else do;
		call find_include_file_$initiate_count
		     /*[4.0-1]*/ ("cobol", source_ptr, file_name || ".incl.cobol", bc, file_ptr, e_code);

/*[4.0-1]*/
	     end;

/*[5.1-3]*/
	call cobol$copy_file_size (bc);

/*[4.0-1]*/
	return;

/* Error Handling */

badopt_error:
	call com_err_ (error_table_$badopt, "expand_cobol_source", arg);
						/*[4.4-1]*/
	call cl;
	return;

too_many_args_error:
	code = error_table_$too_many_args;
	go to multics_error;

sameseg_error:
	code = error_table_$sameseg;
	go to multics_error;

multics_error:
	call com_err_ (code, "expand_cobol_source");	/*[4.4-1]*/
	call cl;
	return;

multics_arg_error:
	call com_err_ (code, "expand_cobol_source", "^a", en);
						/*[4.4-1]*/
	call cl;
	return;

cl:
     proc;


	if area_info_area.areap ^= null ()
	then call release_area_ (area_info_area.areap);

/*[4.4-1]*/
	if tssi_ind
	then call tssi_$clean_up_segment (aclinfo_ptr);

	call release_temp_segments_ ("expand_cobol_source", temp_ptr, code);

     end;

init:
     proc;

	call get_temp_segments_ ("expand_cobol_source", temp_ptr, code);

	if code ^= 0
	then return;

	area_infop = addr (area_info_area);

	area_info_area.version = area_info_version_1;
	area_info_area.owner = "expand_cobol_source";
	area_info_area.areap = temp_ptr (3);
	area_info_area.size = sys_info$max_seg_size;
	string (area_info_area.control) = "0"b;

/*[4.4-1]*/
	area_info_area.extend /* , area_info_area.zero_on_alloc*/ = "1"b;


	call define_area_ (area_infop, code);

	if code ^= 0
	then return;

	comp_lev = 5;				/*[4.0-2]*/
	ctype, ftype, etype = 0;

     end;

finish:
     proc;

/*	ctype	-1	lc
		 0	no change
		+1	uc

	ftype	0	expand
		1	fmt, lc, uc
		2	card

	etype	-1	no_exp
		 0	exp
		+1	exp


	(I)	fmt/card	(T1)	move	(I)
			(O)

	(I)	copy	(T2)	replace	(T1)	move	(I)
					(O)

	(I)	fmt/card	(T1)	copy	(T2)	replace	(T1)	move	(I)
							(O)

*/

/*[4.0-4]*/
declare	o_ptr		ptr;

/*[4.0-4]*/
	if s1_ptr = s2_ptr
	then o_ptr = temp_ptr (1);
	else o_ptr = s2_ptr;

/*[4.0-4]*/
	go to FT (ftype);

FT (0):						/* expand */
						/*[4.0-4]*/
	call CR (s1_ptr, temp_ptr (2), o_ptr);

	go to FT_END;

FT (1):						/* format */
FT (2):						/* card */
						/*[4.0-4]*/
	if etype < 0				/*[4.0-4]*/
	then call TRANS (s1_ptr, o_ptr);		/*[4.0-4]*/
	else do;
		call TRANS (s1_ptr, temp_ptr (1));	/*[4.0-4]*/
		call CR (temp_ptr (1), temp_ptr (2), o_ptr);
						/*[4.0-4]*/
	     end;

FT_END:						/*[4.0-4]*/
	call MOVE (o_ptr, s1_ptr);

/*[4.0-4]*/
	ecs_info_table_.output_ptr = o_ptr;

/*[4.0-4]*/
	return;

CR:
     proc (in_ptr, t_p, out_ptr);

/*[4.0-4]*/
declare	(in_ptr, t_p, out_ptr)
			ptr;

/*[4.0-4]*/
	ecs_info_table_.input_ptr = in_ptr;		/*[4.0-4]*/
	ecs_info_table_.output_ptr = t_p;

/*[4.0-4]*/
	call SET (t_p, null ());

/*[5.1-2]*/
	ecs_info_table_.command = command;

/*[4.0-4]*/
	call cobol_expand_source_$copy (ecs_info_ptr, bc, command, temp_ptr (3));

/*[4.0-4]*/
	call SET (out_ptr, t_p);

/*[4.0-4]*/
	ecs_info_table_.input_ptr = t_p;		/*[4.0-4]*/
	ecs_info_table_.output_ptr = out_ptr;

/*[4.0-4]*/
	call cobol_expand_source_$replace (ecs_info_ptr, bc, command, temp_ptr (3));

/*[4.0-4]*/
	call SET (t_p, out_ptr);

     end;

SET:
     proc (tr_ptr, set_ptr);

/*[4.0-4]*/
declare	(tr_ptr, set_ptr)	ptr;

/*[4.0-4]*/
	call hcs_$truncate_seg (tr_ptr, 0, code);

/*[4.0-4]*/
	if code ^= 0
	then go to multics_error;

/*[4.0-4]*/
	if set_ptr = null ()
	then return;

/*[4.0-4]*/
	call hcs_$set_bc_seg (set_ptr, bc, code);

/*[4.0-4]*/
	if code ^= 0
	then go to multics_error;

     end;

TRANS:
     proc (in_ptr, out_ptr);

/*[4.0-4]*/
declare	(in_ptr, IP, out_ptr, OP)
			ptr;

/*[4.0-4]*/
	IP = in_ptr;
	OP = out_ptr;

/*[4.0-4]*/
	call SET (OP, IP);

/*[4.0-4]*/
	go to TRAN (ftype);

TRAN (1):						/* format */
	call cobol_source_formatter_ (IP, OP, bc, ctype, 0);

	go to TRAN_END;

TRAN (2):						/* card */
						/*[4.0-4]*/
	call cobol_blank_stripper_ (IP, OP, bc);

TRAN_END:						/*[4.0-4]*/
	call hcs_$set_bc_seg (OP, bc, code);

/*[4.0-4]*/
	if code ^= 0
	then go to multics_error;

     end;

MOVE:
     proc (in_ptr, out_ptr);

/*[4.0-4]*/
declare	(in_ptr, out_ptr)	ptr;			/*[4.4-2]*/
declare	cc		fixed bin;		/*[4.0-4]*/
declare	seg		char (500000) based;

/*[4.0-4]*/
	if s1_ptr = s2_ptr				/*[4.0-4]*/
	then do;
		call hcs_$truncate_seg (out_ptr, 0, code);
						/*[4.0-4]*/
		if code ^= 0
		then go to multics_error;

/*[4.4-2]*/
		cc = divide (bc, 9, 31, 0);		/*[4.4-2]*/
		substr (out_ptr -> seg, 1, cc) = substr (in_ptr -> seg, 1, cc);

/*[4.4-2]*/
		call hcs_$set_bc_seg (out_ptr, bc, code);
						/*[4.4-2]*/
		if code ^= 0
		then go to multics_error;

/*[4.0-4]*/
	     end;					/*[4.0-4]*/
	else do;
		call tssi_$finish_segment (in_ptr, bc, "101"b, aclinfo_ptr, code);

/*[4.0-4]*/
		if code ^= 0
		then go to multics_error;

/*[4.0-4]*/
	     end;

     end;

     end;

cobol_strip:
     proc (p);

declare	p		ptr,
	sz		fixed bin;

declare	name		char (32) based (p);

	call get_length (p);

	if j > 9
	then do;
		if substr (name, j - 8, 9) = ".ex.cobol"
		then do;
			name = substr (name, 1, j - 9);
			return;
		     end;
	     end;

	if j > 6
	then if substr (name, j - 5, 6) = ".cobol"
	     then name = substr (name, 1, j - 6);

     end;

gen_path2:
     proc;

	dn_2 = get_wdir_ ();
	en_2 = en_1;
	code = 0;

	call cobol_strip (addr (en_2));

	call get_length (addr (en_2));

	if j <= 23
	then en_2 = substr (en_2, 1, j) || ".ex.cobol";
	else code = error_table_$entlong;
     end;

process_control_arg:
     proc;

	if arg = "-upper_case" | arg = "-uc"		/*[4.0-2]*/
	then do;
		call test_arg (ctype, 1);		/*[4.0-3]*/
		call test_arg (ftype, 1);		/*[4.0-3]*/
	     end;
	else if arg = "-lower_case" | arg = "-lc"	/*[4.0-2]*/
	then do;
		call test_arg (ctype, -1);		/*[4.0-4]*/
		call test_arg (ftype, 1);		/*[4.0-4]*/
	     end;

	else if arg = "-format" | arg = "-fmt"
	then call test_arg (ftype, 1);

	else /*[4.0-3]*/
	     if arg = "-card"			/*[4.0-3]*/
	then call test_arg (ftype, 2);		/*[4.0-3]*/
	else /*[4.0-3]*/
	     if arg = "-expand" | arg = "-exp"		/*[4.0-3]*/
	then call test_arg (etype, 1);		/*[4.0-3]*/
	else /*[4.0-3]*/
	     if arg = "-no_expand" | arg = "-no_exp"	/*[4.0-3]*/
	then call test_arg (etype, -1);
	else if arg = ""
	then return;
	else go to badopt_error;

     end;

test_arg:
     proc (type, val);				/*[4.0-2]*/

/*[4.0-2]*/
dcl	(type, val)	fixed bin;

/*[4.0-2]*/
	if type = 0				/*[4.0-2]*/
	then type = val;				/*[4.0-2]*/
	else /*[4.0-2]*/
	     call com_err_ (error_table_$arg_ignored, "expand_cobol_source", arg);

     end;						/*[4.0-2]*/

get_length:
     proc (p);

declare	p		ptr;
declare	name		char (32) based (p);

	j = index (name, " ");

	if j = 0
	then j = 32;
	else j = j - 1;

     end;

dcl	(file_name, lib_name)
			char (*),
	(source_ptr, file_ptr)
			ptr;			/*[4.0-1]*/

dcl	command		bit (1);
dcl	dir_ptr		ptr;
dcl	(aclinfo_ptr, ecs_ptr)
			ptr;
dcl	(e1_ptr, e2_ptr)	ptr;
dcl	final_ptr		ptr;
dcl	argptr		ptr;
dcl	(s1_ptr, s2_ptr, sf_ptr)
			ptr;
dcl	tssi_ind		bit (1);
dcl	(nargs, comp_lev)	fixed bin;
dcl	arglen		fixed bin;
dcl	arg		char (arglen) based (argptr);
dcl	1 area_info_area	aligned automatic structure like area_info;
dcl	1 ecs_info_table	automatic structure like ecs_info_table_;
dcl	(code, e_code, abc) fixed bin (35);
dcl	(bc, bc_temp)	fixed bin (24);
dcl	(i, j, ldn)	fixed bin;
dcl	(ctype, etype, ftype)
			fixed bin;		/*[4.0-2]*/
dcl	(dn_1, dn_2)	char (168);
dcl	(en, en_1, en_2)	char (32);
dcl	tn		char (32);

dcl	error_table_$segknown
			fixed bin (35) ext;
dcl	error_table_$sameseg
			fixed bin (35) ext;
dcl	error_table_$noarg	fixed bin (35) ext;
dcl	error_table_$badopt fixed bin (35) ext;
dcl	error_table_$arg_ignored
			fixed bin (35) ext;
dcl	error_table_$too_many_args
			fixed bin (35) ext;
dcl	error_table_$entlong
			fixed bin (35) ext;
dcl	error_table_$zero_length_seg
			fixed bin (35) ext;
dcl	sys_info$max_seg_size
			fixed bin (35) ext;

dcl	cobol_source_formatter_
			entry (ptr, ptr, fixed bin (24), fixed bin, fixed bin);
dcl	hcs_$truncate_seg	entry (ptr, fixed bin, fixed bin (35));
dcl	cobol_source_formatter_$no_shift
			entry (ptr, ptr, fixed bin (24), fixed bin);
dcl	com_err_		entry options (variable);
dcl	cobol_expand_source_$copy
			entry (ptr, fixed bin (24), bit (1), ptr);
dcl	cobol_expand_source_$replace
			entry (ptr, fixed bin (24), bit (1), ptr);
dcl	get_temp_segments_	entry (char (*), (*) ptr, fixed bin (35));
dcl	release_temp_segments_
			entry (char (*), (*) ptr, fixed bin (35));
dcl	hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35));
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	get_system_free_area_
			entry returns (ptr);
dcl	get_wdir_		entry returns (char (168));
dcl	define_area_	entry (ptr, fixed bin (35));
dcl	release_area_	entry (ptr);
dcl	expand_pathname_$add_suffix
			entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl	cu_$arg_count	entry (fixed bin);
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
						/*[4.0-2]*/
dcl	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl	ioa_		entry options (variable);

dcl	tssi_$get_segment	entry (char (*), char (*), ptr, ptr, fixed bin (35));

dcl	find_include_file_$initiate_count
			entry (char (*), ptr, char (*), fixed bin (24), ptr, fixed bin (35));
						/*[4.0-1]*/
dcl	tssi_$finish_segment
			entry (ptr, fixed bin (24), bit (36) aligned, ptr, fixed bin (35));
dcl	tssi_$clean_up_segment
			entry (ptr);
dcl	cobol_blank_stripper_
			entry (ptr, ptr, fixed bin (24));
						/*[4.0-2]*/

/*[5.1-3]*/
declare	cobol$copy_file_size
			entry (fixed bin (24));

dcl	(addr, index, null, substr, divide)
			builtin;

dcl	temp_ptr		(3) ptr;

dcl	(cleanup, command_abort_)
			condition;

%include area_info;
%include cobol_ecs_info;

     end expand_cobol_source;
