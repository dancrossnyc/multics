/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_source_formatter_.pl1 Reformatted code to new Cobol
     standard.
                                                   END HISTORY COMMENTS */


/* Modified on 07/20/81 by FCH, reformatted to improve readability, phx10605(BUG495) */
/* Modified on 03/06/81 by FCH, [4.4-2], last line not processed unless it ends in c.r. char, BUG469(TR9264) */
/* Modified on 09/22/80 by FCH, [4.4-1], tabs not handled properly (BUG444) */
/* Modified since Version 4.4 */




/* format: style3 */
cobol_source_formatter_:
     proc (inp, outp, bc, ctype, mtype);

dcl	inp		ptr;
dcl	outp		ptr;
dcl	bc		fixed bin (24);
dcl	ctype		fixed bin;		/* -1=lower_case; +1=upper_case */
dcl	mtype		fixed bin;		/* 0=ignore leading blanks; 1=take leading blanks into account within areas */
dcl	shift		bit (1);
dcl	(identsw, datasw, procsw)
			bit (1);
dcl	contsw		bit (1);
dcl	periodsw		bit (1);
dcl	last_periodsw	bit (1);
dcl	char_count	fixed bin (35);
dcl	code		fixed bin (35);
dcl	source_length	fixed bin;
dcl	inoff		fixed bin;
dcl	outoff		fixed bin;
dcl	cct		fixed bin;
dcl	nl		char (1) static options (constant) init ("
");
dcl	tab		char (1) static options (constant) init ("	");
dcl	blank		char (1) static options (constant) init (" ");
dcl	spaces		char (256) static options (constant) init ("");
dcl	period		char (1) static options (constant) init (".");
dcl	quote		char (1) static options (constant) init ("""");
dcl	chars		char (256) based;
dcl	char_array	(300) char (1) based;
dcl	(ini, outi, nli, tabj, quotei, quotej)
			fixed bin;
dcl	(blanki, periodi)	fixed bin;
dcl	(i, j, len, n)	fixed bin;
dcl	first_quote	fixed bin;
dcl	tline		char (300);
dcl	line		char (300) varying;
dcl	spec_name		(20) char (16) varying static
			init ("01", "77", "1", "fd", "sd", "cd", "rd", "program-id", "author", "installation",
			"date-written", "date-compiled", "security", "source-computer", "object-computer",
			"special-names", "file-control", "i-o-control", "declaratives", "end");

dcl	(addr, index, substr, length, divide)
			builtin;


/*************************************/
start:
	shift = "1"b;
	go to join;

/*************************************/
no_shift:
     entry (inp, outp, bc, ctype);
	shift = "0"b;
/*************************************/
join:
	char_count = 0;
	identsw, datasw, procsw = "0"b;
	contsw = "0"b;
	last_periodsw = "1"b;
	nli = index (inp -> chars, nl);		/*[4.4-2]*/
	cct = divide (bc, 9, 31, 0);

	do while ("1"b);

/*[4.4-2]*/
	     if nli <= 0
	     then nli = cct + 1;

	     if substr (inp -> chars, 1, 1) = "*" | substr (inp -> chars, 1, 1) = "/"
		| substr (inp -> chars, 1, 7) = "      *" | substr (inp -> chars, 1, 7) = "      /"
	     then do;

		     if substr (inp -> chars, 1, 1) = blank
		     then inoff = 7;
		     else inoff = 1;

		     tline = substr (inp -> chars, 1, nli);
		     substr (outp -> chars, 1, 6) = "";
		     outoff = 7;

		     do i = nli - 1 to inoff by -1 while (substr (tline, i, 1) = blank);
		     end;

		     outi = i + 1;
		     substr (tline, outi, 1) = nl;
		     go to skip_shift;

		end;

convert_tabs_and_case:
	     tline = "";				/* convert tabs and case if necessary */
	     ini, outi = 1;

	     do while (ini < nli);

		quotej = index (substr (inp -> chars, ini, nli - ini), quote);
		if quotej = 0
		then quotej = nli - ini + 1;

		quotei = ini + quotej - 1;
		first_quote = quotej;

		do while (ini < quotei);

		     tabj = index (substr (inp -> chars, ini, quotei - ini), tab);

		     if tabj = 0
		     then do;

			     tabj = quotei - ini + 1;
			     n = 0;
			end;
		     else do;

			     n = 10 - mod (outi + tabj - 1, 10);
			     if n = 0
			     then n = 10;
			end;

		     if ctype = 0
		     then substr (tline, outi, tabj - 1) = substr (inp -> chars, ini, tabj - 1);
		     else do;

			     if ctype > 0
			     then line = upper_case (substr (inp -> chars, ini, tabj - 1));
			     else line = lower_case (substr (inp -> chars, ini, tabj - 1));

			     substr (tline, outi, tabj - 1) = line;

			end;

		     ini = ini + tabj;
		     outi = outi + tabj + n - 1;



		end;

		if quotei < nli
		then do;

			quotej = index (substr (inp -> chars, quotei + 1, nli - quotei), quote);


			if quotej = 0
			then do;			/* a continued nonnumeric literal */

				quotej = nli - ini + 1;
				contsw = "1"b;
			     end;
			else quotej = quotej + 1;	/* include both quotes */

			substr (tline, outi, quotej) = substr (inp -> chars, quotei, quotej);
			ini = quotei + quotej;
			outi = outi + quotej;

		     end;

	     end;

check_empty_line:
	     if outi = 1 | tline = ""
	     then do;				/* an empty line */

		     outi = 1;
		     outoff = 1;
		     inoff = 1;
		     substr (tline, 1, 1) = nl;
		     go to skip_shift;
		end;

	     if ^shift
	     then do;

		     substr (tline, outi, 1) = nl;
		     outoff = 1;
		     inoff = 1;
		     go to skip_shift;

		end;

strip_trailing_blanks:
	     substr (outp -> chars, 1, 256) = "";

/* strip trailing blanks and convert to lower case */

	     periodsw = last_periodsw;

	     if ^contsw
	     then do;

		     do i = outi - 1 to 1 by -1 while (substr (tline, i, 1) = blank);
		     end;

		     if substr (tline, i, 1) = period
		     then last_periodsw = "1"b;
		     else last_periodsw = "0"b;

		     outi = i + 1;

		end;
	     else do;

		     contsw = "0"b;
		     last_periodsw = "0"b;
		end;

	     substr (tline, outi, 1) = nl;
	     line = lower_case (substr (tline, 1, outi));

explicit_check:
	     if substr (line, 1, 2) = "a*"
	     then do;				/* check for explicit area specification */

		     substr (line, 1, 2) = "";
		     call division_check;
		     outoff = 8;

		     do inoff = 3 to outi while (substr (line, inoff, 1) = blank);
		     end;

		     if substr (line, inoff, 2) = "1 " | substr (line, inoff, 2) = "1" || nl
		     then do;

			     if inoff = 3 | inoff > 6 | mtype = 0
			     then outoff = 9;
			     else inoff = 3;

			end;
		     else if inoff < 7
		     then inoff = 3;

/* maintain A area indentation */

		end;

	     else if substr (line, 1, 1) = "-" | substr (line, 1, 7) = "      -"
	     then do;

		     if substr (line, 1, 1) = "-"
		     then inoff = 2;
		     else inoff = 8;

		     do inoff = inoff to outi while (substr (line, inoff, 1) = blank);
		     end;

		     substr (outp -> chars, 7, 1) = "-";
		     outoff = 12;

		end;
	     else if substr (line, 1, 2) = "d*"
	     then do;

		     substr (outp -> chars, 7, 1) = "d";
		     inoff = 3;
		     substr (line, 1, 2) = "";

		     go to implicit_check;

		end;
	     else if substr (line, 1, 3) = "da*"
	     then do;

		     substr (outp -> chars, 7, 1) = "d";
		     outoff = 8;

		     do inoff = 4 to outi while (substr (line, inoff, 1) = blank);
		     end;

		     if substr (line, inoff, 2) = "1 " | substr (line, inoff, 2) = "1" || nl
		     then do;

			     if inoff = 4 | inoff > 7 | mtype = 0
			     then outoff = 9;
			     else inoff = 4;
			end;
		     else if inoff < 8
		     then inoff = 4;

		end;
	     else do;				/* no explicit specification - must figure it out */

		     inoff = 1;

implicit_check:
		     outoff = 0;			/* until we know */

		     if ^identsw
		     then do;			/* check for section names and section headers */

section_check:
			     n = index (line, " section");

			     if n > 0 & n < first_quote
			     then if substr (line, n + 8, 1) = period | substr (line, n + 8, 1) = blank
				     | substr (line, n + 8, 1) = nl
				then outoff = 8;

			end;

		     if outoff = 0
		     then call division_check;	/* check for division headers */

		     if outoff = 0 & procsw
		     then do;			/* check for user-defined paragraph names */

paragraph_check:					/*[4.4-1]*/
			     do i = inoff to outi while (substr (line, i, 1) = blank);
			     end;

/* position to first non-blank */

			     blanki = index (substr (line, i, nli - i), blank);

/*[4.4-1]*/
			     if blanki = 0
			     then blanki = outi;
			     else blanki = blanki + i - 1;
						/* set relative to beginning of line */

			     periodi = index (line, period);

			     if periodi > 1
			     then if substr (line, periodi + 1, 1) = nl | substr (line, periodi + 1, 1) = blank
				then do;

					if periodi > blanki
					then do;	/* ignore blanks immediately preceding period */

						do j = periodi - 1 to blanki by -1
						     while (substr (line, j, 1) = blank);
						end;

						periodi = j + 1;

					     end;
					else j = periodi - 1;

					j = j - i + 1;

					if periodi <= blanki & periodsw
					then if (substr (line, i, j) ^= "exit")
						& (substr (line, i, j) ^= "suppress")
					     then outoff = 8;

/* paragraph name */

				     end;

			end;
		     else if outoff = 0 & ^procsw & periodsw
		     then do;			/* check for level indicators */

level_number_check:
			     if mtype = 0
			     then do i = inoff to nli while (substr (line, i, 1) = blank);
				end;
			     else i = inoff;

/* don't adjust B area level numbers already indented */

			     blanki = index (substr (line, i, nli - i), blank);

			     if blanki = 2
			     then do;

				     if substr (line, i, 1) >= "2" & substr (line, i, 1) <= "9"
				     then outoff = 8 + fixed (substr (line, i, 1));


				end;

			     else if blanki = 3 & substr (line, i + 1, 1) ^= "d"
			     then do;		/* FD, CD, RD, or SD */

				     if substr (line, i, 1) >= "0" & substr (line, i, 1) <= "8"
				     then if substr (line, i + 1, 1) >= "0" & substr (line, i + 1, 1) <= "9"
					then outoff = 7 + fixed (substr (line, i, 2));

				     if outoff = 8 | outoff = 84
				     then outoff = 0;
						/* catch 01 and 77 as reserved words */
				     else if outoff = 7 | outoff > 56
				     then outoff = 12;
						/* illegal and 66 and 88 */

				end;

			end;

reserved_word_check:
		     if procsw
		     then i = 20;			/* include "end cobol" only */
		     else if periodsw
		     then i = 1;			/* include level numbers */
		     else i = 4;

		     do i = i to 20 while (outoff = 0); /* check for other Area A reserved words */

			n = index (line, spec_name (i));

			if n > 0
			then if n = 1 | substr (line, 1, n - 1) = substr (spaces, 1, n - 1)
			     then if substr (line, n + length (spec_name (i)), 1) = blank
				     | (substr (line, n + length (spec_name (i)), 1) = period & i > 3)
				     | substr (line, n + length (spec_name (i)), 1) = nl
				then do;

					if i = 3
					then do;	/* "1" */

						outoff = 9;

						do i = inoff to outi while (substr (line, i, 1) = blank);
						end;

						if i < inoff + 4 & i ^= inoff
						then inoff = inoff + 1;
						else inoff = i;

					     end;
					else if i = 20
						/*"end" */
					then if procsw
					     then outoff = 8;
						/* end cobol */
					     else outoff = 12;
						/* end key */

					else outoff = 8;

				     end;

		     end;

		     if outoff = 0			/* nothing special - shift to Area B */
		     then if procsw & ^periodsw & mtype = 0
			then outoff = 16;
			else outoff = 12;


		     else if outoff = 8
		     then do;			/* get rid of leading blanks */

			     do i = inoff to outi while (substr (line, i, 1) = blank);
			     end;

			     if i ^< inoff + 4
			     then inoff = i;

			end;

		end;				/* eliminate existing margins unless -lm specified */

	     if mtype = 0
	     then do inoff = inoff to outi while (substr (line, inoff, 1) = blank);
		end;

skip_shift:					/* output this line and look at next */
	     source_length = outi - inoff + 1;
	     substr (outp -> chars, outoff, source_length) = substr (tline, inoff, source_length);
	     inp = addr (inp -> char_array (nli + 1));
	     char_count = char_count + source_length + outoff - 1;
	     outp = addr (outp -> char_array (source_length + outoff));

/*[4.4-2]*/
	     cct = cct - nli;

/*[4.4-2]*/
	     if cct <= 0				/*[4.4-2]*/
	     then do;
		     bc = 9 * char_count;		/*[4.4-2]*/
		     return;			/*[4.4-2]*/
		end;

	     nli = index (inp -> chars, nl);

	end;

/*************************************/

division_check:
     proc;
start_division_check:
	n = index (line, " division");

	if n > 0 & n < first_quote
	then if substr (line, n + 9, 1) = period | substr (line, n + 9, 1) = blank | substr (line, n + 9, 1) = nl
	     then do;

		     if identsw
		     then do;

			     n = index (line, "environment ");

			     if n = 0
			     then n = index (line, "data ");

			     if n = 0
			     then n = index (line, "procedure ");

			     if n > 0
			     then if n = 1 | substr (line, 1, n - 1) = substr (spaces, 1, n - 1)
				then do;
					identsw = "0"b;
					outoff = 8;
				     end;

			end;

		     else do;
			     outoff = 8;


			     if index (line, "identification") > 0
			     then identsw = "1"b;

			end;

		     if index (line, "procedure") > 0
		     then do;

			     procsw = "1"b;
			     identsw, datasw = "0"b;	/* just for consistency in weird cases */
			end;
		     else if index (line, "data") > 0
		     then do;

			     datasw = "1"b;
			     identsw, procsw = "0"b;
			end;

		end;

     end division_check;


/*************************************/
lower_case:
     proc (str) returns (char (300) varying);
dcl	str		char (*);
dcl	lc_alphabet	char (128) static options (constant) init (" 	
 !""#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
dcl	translate		builtin;
	return (translate (str, lc_alphabet));
     end lower_case;

upper_case:
     proc (str) returns (char (300) varying);
dcl	str		char (*);
dcl	lc_alphabet	char (128) static options (constant) init (" 	
 !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~");
dcl	translate		builtin;
	return (translate (str, lc_alphabet));
     end upper_case;

     end cobol_source_formatter_;
