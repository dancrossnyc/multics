/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_FILE_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* format: style3 */
cobol_FILE_:
     proc;
	call com_err_ (0, "cobol_FILE_", "For documentation execute:^/ec >udd>LIS>Wardd>pr_doc cobol_FILE_ MPM");
	return;
IN:
     entry (cn, n1, n2, opn, p, l, k) returns (bit (1));
	p = null ();
	l = 0;					/* Initiate. */
	if length (opn) > 0
	then if ^gn (n1, n2, opn)
	     then call hcs_$initiate (dn, en, "", 0b, 00b, p, e);
	if p = null ()
	then do;
		if gn (n1, n2, "")
		then return ("1"b);
		call hcs_$initiate (dn, en, "", 0b, 00b, p, e);
	     end;
	if p = null ()
	then do;					/* Attempt to use names as an initiated segment. */
		call hcs_$make_ptr (null (), n1 || n2 || opn, "", p, e);
		if length (opn) > 0
		then if p = null ()
		     then call hcs_$make_ptr (null (), n1 || n2, "", p, e);
		if p ^= null ()
		then call hcs_$fs_get_path_name (p, dn, l1, wen, e);
	     end;
	if p = null ()
	then do;
		call com_err_ (e, cn, NAMES ());
		return ("1"b);
	     end;
	call hcs_$status_mins (p, tp, bc, e);
	if e > 0
	then do;
		call com_err_ (e, cn, (NAMES ()));
		return ("1"b);
	     end;
	if k = 0
	then do;
		call com_err_ (0, cn, "Warning,zero divide factor " || NAMES ());
		l = -bc;
		return ("1"b);
	     end;
	if k < 0
	then call com_err_ (0, cn, "Warning, divide factor (^d) negative " || NAMES (), k);
	if bc < 1
	then call com_err_ (0, cn, "Warning, bit-count zero " || NAMES ());
	l = divide ((bc + (k - 1)), k, 35, 0);
	return ("0"b);

LEN:
     entry (cn, n1, n2, l) returns (bit (1));
	if gn (n1, n2, "")
	then return ("1"b);
	if l < 0
	then call hcs_$delentry_file (dn, en, e);
	else do;
		call hcs_$set_bc (dn, en, fixed (l, 24), e);
		if e = 0
		then call hcs_$truncate_file (dn, en, divide ((l + 35), 36, 24, 0), e);
	     end;
	if e > 0
	then do;
		call com_err_ (e, cn, "Attempted bit-count ^d " || NAMES (), l);
		return ("1"b);
	     end;
	return ("0"b);

SBC:
     entry (cn, segp, l) returns (bit (1));
	if l < 0
	then call hcs_$delentry_seg (segp, e);
	else call hcs_$set_bc_seg (segp, fixed (l, 24), e);
	if e > 0
	then do;					/* Obtain  the segment's pathname. */
		call hcs_$fs_get_path_name (segp, dn, l1, en, e);
		call com_err_ (e, cn, "Attempted to set bi ^d " || NAMES (), l);
		return ("1"b);
	     end;
	return ("0"b);


OUT:
     entry (cn, n1, n2, opn, p) returns (bit (1));
	p = null ();
	if gn (n1, n2, "")
	then return ("1"b);
	do l1 = 1 to length (opn);			/* Verify that access is acceptable characters. */
	     l2 = index ("rewa", substr (opn, l1, 1));
	     if l2 < 1
	     then do;
		     call com_err_ (0, cn, "Parameter 4, access must be letters from ""rewa"", (""^a"").", opn);
		     return ("1"b);
		end;
	     substr (mode, (l2 + 1), 1) = "1"b;
	end;
	call hcs_$make_seg (dn, en, "", fixed (mode, 5), p, e);
	if p ^= null ()
	then do;
		call hcs_$truncate_file (dn, en, 0, e);
		call hcs_$set_bc (dn, en, 0, e);
	     end;
	if p = null ()
	then do;
		call com_err_ (e, cn, (NAMES ()));
		return ("1"b);
	     end;
	call hcs_$acl_add1 (dn, en, "*.*.*", 01100b, rbc, e);
	return ("0"b);

PROC:
     entry (cn, n1, n2, p) returns (bit (1));
	p = null ();
	SN = n1 || n2;
	EN = "";
	DN = "";
	i = index (SN, "$");
	if i > 0
	then do;					/* Specific entry name. */
		EN = substr (SN, (i + 1), (length (SN) - i));
		SN = substr (SN, 1, (i - 1));
	     end;					/* Isolate segment name from directory. */
	do i = length (SN) to 1 by -1 while ((substr (SN, i, 1) ^= ">") & (substr (SN, i, 1) ^= "<"));
	end;
	if i > 0
	then do;					/* More than a segment name input. */
		DN = substr (SN, 1, i);
		SN = substr (SN, (i + 1), (length (SN) - i));
	     end;
	if length (EN) < 1
	then EN = SN;				/* Entry name, if not specific. */
						/* Establish calling directory. */
	dp = null ();
	if length (DN) > 0
	then if ^gn ((DN), (SN), "")
	     then call hcs_$initiate (dn, en, "", 0b, 00b, dp, e);
	call hcs_$make_ptr (dp, (SN), (EN), p, e);
	if e > 0
	then do;
		call com_err_ (e, cn, "Could not obtain pointer to an entry from name ""^a^a""", n1, n2);
		return ("1"b);
	     end;
	return ("0"b);


/* Internal procedures. */
gn:
     proc (n1, n2, opn) returns (bit (1));		/* Obtain directory name in dn and entry name in en. */
	if length (n1) > 0
	then N = n1 || n2 || opn;
	else do;
		call cobol_set_pdir (N);
		N = N || ">" || n2 || opn;
	     end;
	call expand_path_ (addrel (addr (N), 1), length (N), addr (dn), addr (en), e);
	if e > 0
	then do;
		if length (opn) > 0
		then call com_err_ (e, cn, "for (""^a"",""^a"",[""^a""]).", n1, n2, opn);
		else call com_err_ (e, cn, "for (""^a"",""^a"").", n1, n2);
		return ("1"b);
	     end;
	return ("0"b);
dcl	(n1, n2, opn)	char (*) parm;
dcl	N		char (256) var;
     end gn;

NAMES:
     proc returns (char (256) var);
	l1 = index (en, " ");
	if l1 < 1
	then l1 = 33;
	else l1 = l1 - 1;
	l2 = index (dn, " ");
	if l2 < 1
	then l2 = 169;
	else l2 = l2 - 1;
	r = "Segment """ || substr (en, 1, l1) || """ in directory """ || substr (dn, 1, l2) || """.";
	return (r);

dcl	r		char (256) var;
     end NAMES;					/* Declarations for variables. */
dcl	(
	cn,					/* Caller's name. */
	n1,					/* Name left part. */
	n2,					/* Name right part. */
	opn					/* Name right optional part (| access mode. */
	)		char (*) parm,
	segp		ptr parm,			/* Input pointer. */
	p		ptr parm,			/* Output pointer. */
	l		fixed bin (35) parm,	/* Output length. */
	k		fixed bin (35) parm,	/* Bit-count divide constant. */
	(l1, l2)		fixed bin (35),
	bc		fixed bin (24),
	tp		bin (2),
	e		fixed bin (35),		/* Error code. */
	com_err_		entry options (variable) ext,
	mode		bit (5) aligned init ("00000"b),
	dn		char (169),
	(en, wen)		char (33);
dcl	(addr, addrel, null, substr, index, length)
			builtin;
dcl	expand_path_	entry (ptr, fixed bin (35), ptr, ptr, fixed bin (35)) ext,
	hcs_$initiate	entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)) ext,
	hcs_$status_mins	entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35)) ext,
	hcs_$set_bc	entry (char (*), char (*), fixed bin (24), fixed bin (35)) ext,
	hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35)) ext,
	hcs_$delentry_file	entry (char (*), char (*), fixed bin (35)) ext,
	hcs_$delentry_seg	entry (ptr, fixed bin (35)) ext,
	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)) ext,
	hcs_$truncate_seg	entry (ptr, fixed bin (35), fixed bin (35)) ext,
	hcs_$truncate_file	entry (char (*), char (*), fixed bin (35), fixed bin (35)) ext,
	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin (35), char (*), fixed bin (35)) ext,
	hcs_$make_ptr	entry (ptr, char (*), char (*), ptr, fixed bin (35)) ext;

dcl	hcs_$acl_add1	entry (char (*), char (*), char (*), fixed bin (5), (3) fixed bin (6), fixed bin (35)) ext;
dcl	rbc		(3) fixed bin (6) init (4, 4, 4) static internal;
dcl	cobol_set_pdir	entry (char (*) var) ext;
dcl	SN		char (256) var;
dcl	EN		char (32) var;
dcl	DN		char (168) var;
dcl	i		fixed bin (35);
dcl	dp		ptr;
     end cobol_FILE_;
