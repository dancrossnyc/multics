/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the subroutine called by requests to implement the
     qedx'ing of the current query. Description and usage follows.

     Description:

     This subroutine takes the current query and calls qedx_ with it in
     a buffer, or calls qedx with an empty buffer depending on the setting
     of the second parameter. Unless the user did a quit_force the edited
     query replaces the original.
     
     Usage: call linus_qedx_the_query (lcb_ptr, new_query_flag);

     lcb_ptr - input - pointer to linus control block structure
     new_query_flag - input - on means start a new query, off means use the old

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_qedx_the_query: proc (

	lcb_ptr_parm,   /* input: ptr to the linus control block info structure */
	new_flag_parm   /* input: on if caller wants to start with a new query */
		     );
%skip(3);
dcl lcb_ptr_parm ptr parm;
dcl new_flag_parm bit (1) aligned parm;
%skip(3);
/*
     Mainline Processing Overview:

     (1) Get the current query placed in a temp segment, or get an empty
         temp segment if there is no current query. Set the temp segment
         length to zero if a new query was requested.

     (2) Fill in the qedx_information structure.

     (3) Call qedx and let the user do some editing.

     (4) If user didn't do a quit force then make the result of editing
         the current query.
*/
%skip(1);
	call initialize;
	call call_qedx;
	if query_should_be_replaced
	then do;
	     call linus_query_mgr$put (lcb_ptr, query_segment_ptr, 
		qedx_information.buffers (1).region_final_lth, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code);
	     else;
	end;
	else;
%skip(1);
	return;
%page;
call_qedx: proc;
%skip(1);
	query_should_be_replaced = OFF;
	call qedx_ (addr (qedx_information), code);
	if code ^= 0
	then if code = error_table_$fatal_error
	     then call ssu_$abort_line (sci_ptr, 0);
	     else if code = error_table_$recoverable_error
		then if qedx_information.flags.quit_forced
		     then return;
	               else;
		else call ssu_$abort_line (sci_ptr, 0);
	else;
%skip(1);
	query_should_be_replaced = ON;
%skip(1);
	return;
%skip(1);
     end call_qedx;
%page;
initialize: proc;
%skip(3);
	lcb_ptr = lcb_ptr_parm;
	new_query = new_flag_parm;
	sci_ptr = lcb.subsystem_control_info_ptr;
%skip(1);
	call linus_query_mgr$get (lcb_ptr, query_segment_ptr,
	     query_segment_length, code);
	if code ^= 0
	then if code = linus_error_$no_current_query
	     then;
	     else call ssu_$abort_line (sci_ptr, code);
	else;
%skip(1);
	if new_query
	then query_segment_length = 0;
%skip(1);
     	qedx_information.header.version = QEDX_INFO_VERSION_1;
     	qedx_information.editor_name = "linus (qedx)";
     	unspec (qedx_information.header.flags) = OFF;
	qedx_information.header.flags.query_if_modified = ON;
	qedx_information.n_buffers = 1;
%skip(1);
     	qedx_information.buffers (1).buffer_name = "0";
     	qedx_information.buffers (1).buffer_pathname = "<linus query>";
	qedx_information.buffers (1).region_ptr = query_segment_ptr;
	qedx_information.buffers (1).region_max_lth = sys_info$max_seg_size * 4;
	qedx_information.buffers (1).region_initial_lth = query_segment_length;
%skip(1);
	unspec (qedx_information.buffers (1).flags) = OFF;
	qedx_information.buffers (1).flags.read_write_region = ON;
	qedx_information.buffers (1).flags.locked_pathname = ON;
	qedx_information.buffers (1).flags.default_read_ok = ON;
	qedx_information.buffers (1).flags.default_write_ok = ON;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
%page;
dcl addr builtin;
%skip(1);
dcl code fixed bin (35);
%skip(1);
dcl error_table_$fatal_error fixed bin(35) ext static;
dcl error_table_$recoverable_error fixed bin(35) ext static;
%skip(1);
dcl fixed builtin;
%skip(1);
dcl linus_error_$no_current_query fixed bin(35) ext static;
dcl linus_query_mgr$get entry (ptr, ptr, fixed bin(21), fixed bin(35));
dcl linus_query_mgr$put entry (ptr, ptr, fixed bin(21), fixed bin(35));
%skip(1);
dcl new_query bit (1) aligned;
%skip(1);
dcl qedx_ entry (ptr, fixed bin(35));
dcl 1 qedx_information aligned,
      2 header like qedx_info.header,
      2 buffers (1) like qedx_info.buffers;
dcl query_segment_ptr ptr;
dcl query_segment_length fixed bin (21);
dcl query_should_be_replaced bit (1) aligned;
%skip(1);
dcl rel builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl unspec builtin;
%page;
%include linus_lcb;
%page;
%include qedx_info;
%skip(3);
     end linus_qedx_the_query;
