/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-01-27,Dupuis), approve(88-03-03,MCR7844), audit(88-03-14,Blair),
     install(88-03-15,MR12.2-1036):
     Implemented the -progress/-no_progress and -warning/-no_warning
     control arguments.
                                                   END HISTORY COMMENTS */


/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     linus store_from_data_file request. Description and usage follows.

     Description:

     This request reads the values from a file. It then takes these
     values and stores them into the specified relation.
     
     Usage: "store_from_data_file table_name -control_args"

     where table_name is the name of the relation where the data will be 
     stored.

     -control_args can be:

     -column_delimiter X -- the delimiter used to separate column values.
     X can be any single ascii character (default is a tilde).

     -input_file pathname -- the file where the values should be taken from.
     This is a required control argument.

     -progress {N} -- prints a progress report every N tuples, where N defaults
     to linus_data_$trace_every_n_tuples if not specified.

     -row_delimiter X -- the delimiter used to separate rows. X can be any 
     single ascii character (default is newline character).

     -warning, -warn, -no_warning, -no_warn -- prints or doesn't print warning
     messages caused by the storing of duplicate tuples or conversion errors.

     Both parameters are passed to this request by ssu_.


     Known Bugs:

     Other Problems:

     History:

     Written - September 1983 - Al Dupuis

*/
%page;
linus_store_from_data_file: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(3);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(3);
/*
     Mainline Processing Overview:

     (1) Process control arguments setting flags and collecting values.

     (2) Get a row from the file.

     (3) Store the row and repeat 2 and 3 until no more rows.

     (4) Clean up things.

*/
%skip(3);
	call initialize;
%skip(1);
	cleanup_signalled = OFF;
	on cleanup begin;
	     cleanup_signalled = ON;
	     call terminate;
	end;
%skip(1);
	call process_args;
%skip(1);
	if ^input_file_has_been_supplied
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     "^/An input file name must be supplied.");
%skip(1);
	still_storing = ON;
	do while (still_storing);
	     call get_row_from_file;
	     if still_storing
	     then do;
		call store_the_row;
		if data_file_info.flags.tracing
		then if mod (data_file_info.current_row_number - 1, data_file_info.trace_every_n_tuples) = 0
		     then call ioa_ ("^d lines (^d tuples) read from input file. ^d tuples stored.",
		          data_file_info.current_line_number - 1,
		          data_file_info.current_row_number - 1, number_of_tuples_stored);
	     end;
	     else if data_file_info.flags.tracing
		then call ioa_ ("Storing completed. ^d lines (^d tuples) read, ^d tuples stored.",
		     data_file_info.current_line_number - 1,
		     data_file_info.current_row_number - 1, number_of_tuples_stored);
	end;
%skip(1);
	call terminate;
%skip(1);
	return;
%page;
get_row_from_file: proc;
%skip(1);
dcl grff_code fixed bin (35);
%skip(1);
	if ^file_parsing_has_been_started
	then do;
	     call linus_parse_file$start (lcb_ptr, addr (data_file_info), 
		table_ip, grff_code);
	     if grff_code ^= 0
	     then call ssu_$abort_line (sci_ptr, grff_code);
	     file_parsing_has_been_started = ON;
	end;
%skip(1);
	call linus_parse_file$get_row (lcb_ptr, addr (data_file_info), 
	     table_ip, buffer_ptr, grff_code);
	if grff_code ^= 0
	then if grff_code = error_table_$end_of_info
	     then still_storing = OFF;
	     else call ssu_$abort_line (sci_ptr, grff_code);
	else;
%skip(1);
	return;
%skip(1);
     end get_row_from_file;
%page;
initialize: proc;
%skip(1);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
	work_area_ptr = addr (lcb.static_area);
%skip(1);
	unspec (data_file_info) = OFF;
	data_file_info.flags.process_quotes = ON;
	data_file_info.column_delimiter = TILDE;
	data_file_info.row_delimiter = NEWLINE;
	data_file_info.trace_every_n_tuples = linus_data_$trace_every_n_tuples;
	buffer_has_been_allocated = OFF;
	table_info_has_been_allocated = OFF;
	file_parsing_has_been_started = OFF;
	input_file_has_been_supplied = OFF;
	print_warning_messages = ON;
	number_of_tuples_stored = 0;
%skip(1);
	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
	if number_of_args_supplied = 0
	then call ssu_$abort_line (sci_ptr, error_table_$noarg, USAGE_MESSAGE);
%skip(1);
	return;
%skip(1);
     end initialize;
%page;
process_args: proc;
%skip(1);
          call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	table_name = arg;
	call linus_table$info_for_store (lcb_ptr, table_name,
	     work_area_ptr, table_ip, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
	number_of_columns = table_info.column_count;
	table_info_has_been_allocated = ON;
	buffer_length = table_info.row_value_length;
	allocate buffer in (work_area) set (buffer_ptr);
	buffer_has_been_allocated = ON;
%skip(1);
	if number_of_args_supplied = 1
	then return;
%skip(1);
	current_arg_number = 2;
	still_processing_args = ON;
%skip(1);
	do while (still_processing_args);
	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
%skip(1);
	     if arg = "-column_delimiter" | arg = "-cdm"
	     | arg = "-row_delimiter" | arg = "-rdm"
	     then do;
		current_arg_number = current_arg_number + 1;
		if current_arg_number > number_of_args_supplied
		then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		     "^/^a must be followed by a delimiter.", arg);
		else;
		if arg = "-row_delimiter" | arg = "-rdm"
		then row_delimiter_flag = ON;
		else row_delimiter_flag = OFF;
		call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
		if arg_length ^= 1
		then call ssu_$abort_line (sci_ptr, 0,
		     "The specified delimiter ""^a"" is not a single ascii character.", arg);
		else;
		if row_delimiter_flag
		then data_file_info.row_delimiter = arg;
		else data_file_info.column_delimiter = arg;
	     end;
	     else if arg = "-input_file" | arg = "-if"
		then do;
		     current_arg_number = current_arg_number + 1;
		     if current_arg_number > number_of_args_supplied
		     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
			"^/^a must be followed by a pathname.", arg);
		     else;
		     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
		     data_file_info.output_file_pathname = arg;
		     input_file_has_been_supplied = ON;
		end;
	     else if arg = "-progress" | arg = "-pg"
		then do;
		     data_file_info.flags.tracing = ON;
		     if current_arg_number + 1 <= number_of_args_supplied
		     then do;
			call ssu_$arg_ptr (sci_ptr, current_arg_number + 1, arg_ptr, arg_length);
			if verify (arg, "01234546789") = 0
			then do;
			     data_file_info.trace_every_n_tuples = convert (data_file_info.trace_every_n_tuples, arg);
			     current_arg_number = current_arg_number + 1;
			end;
		     end;
		end;
		else if arg = "-no_progress" | arg = "-npg"
		     then do;
			data_file_info.flags.tracing = OFF;
			data_file_info.trace_every_n_tuples = linus_data_$trace_every_n_tuples;
		     end;
		     else if arg = "-warning" | arg = "-warn"
			then print_warning_messages = ON;
		          else if arg = "-no_warning" | arg = "-no_warn"
			     then print_warning_messages = OFF;
			     else call ssu_$abort_line (sci_ptr, error_table_$badopt,
				"^a is not a valid control argument.", arg);
%skip(1);
	     current_arg_number = current_arg_number + 1;
	     if current_arg_number > number_of_args_supplied
	     then still_processing_args = OFF;
	end;
%skip(1);
          return;
%skip(1);
     end process_args;
%page;
store_the_row: proc;
%skip(1);
dcl str_code fixed bin (35);
dcl str_loop fixed bin;
%skip(1);
	row_value_p = buffer_ptr;
	call linus_table$store_row (lcb_ptr, table_ip, row_value_p, str_code);
	if str_code = 0
	then number_of_tuples_stored = number_of_tuples_stored + 1;
	if str_code = 0
	| ((str_code = mrds_error_$duplicate_key | str_code ^= mrds_error_$conversion_condition) & ^print_warning_messages)
	then return;

	call ssu_$print_message (sci_ptr, str_code,
	     "^/The error occured on line number ^d while trying to store row number ^d.",
	     data_file_info.current_line_number - 1, data_file_info.current_row_number - 1);
	call ioa_ ("^/The column values were:");

	do str_loop = 1 to number_of_columns;
	     call ioa_ ("^a^x=^x""^a""",
		table_info.columns.column_name (str_loop),
		substr (row_value,
		table_info.columns.column_index (str_loop),
		table_info.columns.column_length (str_loop)));
	end;

	if str_code ^= mrds_error_$duplicate_key
	& str_code ^= mrds_error_$conversion_condition
	then call ssu_$abort_line (sci_ptr, 0);
%skip(1);
	return;
%skip(1);
     end store_the_row;
%page;
terminate: proc;
%skip(3);
	if buffer_has_been_allocated
	then do;
	     free buffer;
	     buffer_has_been_allocated = OFF;
	end;
%skip(1);
	if table_info_has_been_allocated
	then do;
	     store_ap = table_info.store_args_ptr;
	     free store_args;
	     free table_info;
	     table_info_has_been_allocated = OFF;
	end;
%skip(1);
	if file_parsing_has_been_started
	then do;
	     call linus_parse_file$stop (lcb_ptr, addr (data_file_info), 
		table_ip, cleanup_signalled, code);
	     file_parsing_has_been_started = OFF;
	end;
%skip(1);
	return;
%skip(1);
     end terminate;
%page;
%skip(1);
%skip(1);
dcl NEWLINE char (1) static internal options (constant) init ("
");
%skip(1);
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
%skip(1);
dcl TILDE char (1) static internal options (constant) init ("~");
dcl USAGE_MESSAGE char (73) static internal options (constant) init (
"^/Usage: store_from_data_file table_name -input_file path {-control_args}");
%page;
dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl buffer char (buffer_length) based (buffer_ptr);
dcl buffer_has_been_allocated bit (1) aligned;
dcl buffer_length fixed bin (21);
dcl buffer_ptr ptr;
%skip(1);
dcl cleanup condition;
dcl cleanup_signalled bit (1) aligned;
dcl code fixed bin (35);
dcl convert builtin;
dcl current_arg_number fixed bin;
%skip(1);
dcl error_table_$badopt fixed bin(35) ext static;
dcl error_table_$end_of_info fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$noarg fixed bin(35) ext static;
%skip(1);
dcl file_parsing_has_been_started bit (1) aligned;
dcl fixed builtin;
%skip(1);
dcl input_file_has_been_supplied bit (1) aligned;
dcl ioa_ entry() options(variable);
%skip(1);
dcl linus_data_$trace_every_n_tuples fixed bin (35) external static;
dcl linus_parse_file$get_row entry (ptr, ptr, ptr, ptr, fixed bin(35));
dcl linus_parse_file$start entry (ptr, ptr, ptr, fixed bin(35));
dcl linus_parse_file$stop entry (ptr, ptr, ptr, bit(1) aligned, fixed bin(35));
dcl linus_table$info_for_store entry (ptr, char(30), ptr, ptr, fixed bin(35));
dcl linus_table$store_row entry (ptr, ptr, ptr unal, fixed bin(35));
%skip(1);
dcl mod builtin;
dcl mrds_error_$conversion_condition fixed bin(35) ext static;
dcl mrds_error_$duplicate_key fixed bin(35) ext static;
%skip(1);
dcl number_of_args_supplied fixed bin;
dcl number_of_columns fixed bin;
dcl number_of_tuples_stored fixed bin (35);
%skip(1);
dcl print_warning_messages bit (1) aligned;
%skip(1);
dcl rel builtin;
dcl row_delimiter_flag bit (1) aligned;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$print_message entry() options(variable);
dcl still_processing_args bit (1) aligned;
dcl still_storing bit (1) aligned;
dcl substr builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl table_info_has_been_allocated bit (1) aligned;
dcl table_name char (30);
%skip(1);
dcl unspec builtin;
%skip(1);
dcl verify builtin;
%skip(1);
dcl work_area area (sys_info$max_seg_size) based (work_area_ptr);
dcl work_area_ptr ptr;
%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include iox_dcls;
%page;
%include iox_modes;
%page;
%include linus_data_file_info;
%page;
%include linus_lcb;
%page;
%include linus_table_info;
%skip(3);
     end linus_store_from_data_file;
