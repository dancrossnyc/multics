/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-01-08,Dupuis), approve(86-01-10,MCR7188), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Written - Al Dupuis - December 1984 as part of the rewrite of all linus
     scope modules.
  2) change(86-01-08,Dupuis), approve(86-05-23,MCR7404), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Changed code so that del_scope and set_scope work as active requests. (SCP
     6287).
  3) change(86-10-03,Dupuis), approve(86-10-21,MCR7562), audit(86-10-22,Blair),
     install(86-10-23,MR12.0-1199):
     Changed the default wait time from 30 seconds to
     linus_data_$lock_wait_time.
                                                   END HISTORY COMMENTS */

/* format: off */
%skip(1);
/*   This is the main level procedure called by ssu_ to implement the
     linus set_scope and del_scope request. */
%page;
linus_scope_manager: proc;
%skip(3);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(1);
	call com_err_ (error_table_$badcall,
	     "linus_scope_manager", "^/This isn't a valid entry.");
%skip(1);
	return;
%page;
delete_scope: entry (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(1);
	the_entry_called = "delete_scope";
	call initialize;
%skip(1);
	on cleanup begin;
	     cleanup_has_been_signalled = ON;
	     call terminate;
	end;
%skip(1);
	call housekeeping;
	call process_delete_scope_args;
%skip(1);
	if delete_all_scope
	then do;
	     call dsl_$dl_scope_all (lcb.db_index, code);
	     if code ^= 0
	     then call ssu_$abort_line (sci_ptr, code,
		"^/Unable to delete all scope.");
	     else if active_request_flag
		then return_value = "true";
	end;
	else do;
	     call process_common_args;
	     if active_request_flag
	     then do;
		error_codes (1) = mrds_error_$scope_not_found;
		on sub_error_ call linus_stifle_mrds_sub_error (error_codes);
	     end;
	     call cu_$generate_call (dsl_$dl_scope, arg_list_ptr);
	     if active_request_flag
	     then revert sub_error_;
	     if scope_information.dsl_error_code ^= 0
	     then if scope_information.dsl_error_code = mrds_error_$scope_not_found & active_request_flag
		then return_value = "false";
	          else call ssu_$abort_line (sci_ptr, scope_information.dsl_error_code);
	     else if active_request_flag
		then return_value = "true";
	end;
%skip(1);
	call terminate;
%skip(1);
	return;
%page;
set_scope: entry (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(1);
	the_entry_called = "set_scope";
	call initialize;
%skip(1);
	on cleanup begin;
	     cleanup_has_been_signalled = ON;
	     call terminate;
	end;
%skip(1);
	call housekeeping;
	call process_set_scope_args;
	call process_common_args;
%skip(1);
	if active_request_flag
	then do;
	     error_codes (1) = mrds_error_$db_busy;
	     on sub_error_ call linus_stifle_mrds_sub_error (error_codes);
	end;
%skip(1);
	call cu_$generate_call (dsl_$set_scope, arg_list_ptr);
	if scope_information.dsl_error_code ^= 0
	then if scope_information.dsl_error_code = mrds_error_$db_busy & active_request_flag
	     then return_value = "false";
	     else call ssu_$abort_line (sci_ptr, scope_information.dsl_error_code);
	else if active_request_flag
	     then return_value = "true";
%skip(1);
	call terminate;
%skip(1);
	return;
%page;
housekeeping: proc;
%skip(1);
dcl h_code fixed bin (35);
%skip(1);
	call dsl_$get_scope_info (lcb.db_index, work_area_ptr, scope_ptr, h_code);
	if h_code ^= 0
	then call ssu_$abort_line (sci_ptr, h_code,
	     "^/Unable to get the scope information.");
%skip(1);
	call dsl_$get_pn (lcb.db_index, data_base_pathname, opening_mode, h_code);
	if h_code ^= 0
	then call ssu_$abort_line (sci_ptr, h_code,
	     "^/Unable to get the database pathname.");
%skip(1);
	if substr (opening_mode, 1, 9) = "exclusive"
	then call ssu_$abort_line (sci_ptr, mrds_error_$unshared_opening);
	else if the_entry_called = "set_scope"
	     then if scope_info.active_scopes > 0
	          then call ssu_$abort_line (sci_ptr, mrds_error_$scope_not_empty);
		else;
	     else;
%skip(1);
	return;
%skip(1);
     end housekeeping;
%page;
initialize: proc;
%skip(1);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	call ssu_$return_arg (sci_ptr, number_of_args_supplied,
	     active_request_flag, return_value_ptr, return_value_length);
	if active_request_flag
	then return_value = "";
%skip(1);
	if lcb.db_index = 0
	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);
%skip(1);
	work_area_ptr = lcb.general_work_area_ptr;
	scope_ptr = null;
	scope_information_ptr = null;
	arg_list_ptr = null;
	forced_retrieve_scope_info_ptr = null;
	cleanup_has_been_signalled = OFF;
	delete_all_scope = OFF;
	wait_time = linus_data_$lock_wait_time;
%skip(1);
	arg_descriptor_ptr = addr (character_30_descriptor);
	arg_descriptor.flag = ON;
	arg_descriptor.type = char_dtype;
	arg_descriptor.packed = ON;
	arg_descriptor.number_dims = 0;
	arg_descriptor.size = 30;
%skip(1);
	arg_descriptor_ptr = addr (fixed_bin_35_descriptor);
	fixed_arg_descriptor.flag = ON;
	fixed_arg_descriptor.type = real_fix_bin_1_dtype;
	fixed_arg_descriptor.packed = OFF;
	fixed_arg_descriptor.number_dims = 0;
	fixed_arg_descriptor.scale = 0;
	fixed_arg_descriptor.precision = 35;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
process_common_args: proc;
%skip(1);
dcl pca_loop fixed bin;
dcl pca_scope_index fixed bin;
%skip(1);
	if mod (number_of_args_supplied, 3) ^= 0
	then if the_entry_called = "set_scope"
	     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	          SET_SCOPE_USAGE_MESSAGE);
	     else call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	          DELETE_SCOPE_USAGE_MESSAGE);
	else;
%skip(1);
	si_init_number_of_triplets = divide (number_of_args_supplied, 3, 17);
	allocate scope_information in (work_area) set (scope_information_ptr);
	scope_information.data_base_index = lcb.db_index;
	scope_information.dsl_error_code = 0;
%skip(1);
	forced_retrieve_scope_info_ptr = lcb.force_retrieve_scope_info_ptr;
	if the_entry_called = "set_scope"
	then do;
	     if forced_retrieve_scope_info_ptr ^= null
	     then free forced_retrieve_scope_info;
	     frsi_init_number_of_relations = si_init_number_of_triplets;
	     allocate forced_retrieve_scope_info in (work_area)
		set (forced_retrieve_scope_info_ptr);
	     forced_retrieve_scope_info.relations.name (*) = "";
	     forced_retrieve_scope_info.relations.retrieve_scope_was_forced (*) = OFF;
	     lcb.force_retrieve_scope_info_ptr = forced_retrieve_scope_info_ptr;
	end;
%skip(1);
	arg_list_arg_count = number_of_args_supplied
	     + ONE_FOR_DATA_BASE_INDEX_AND_ONE_FOR_ERROR_CODE;
	if the_entry_called = "set_scope"
	then arg_list_arg_count = arg_list_arg_count + ONE_FOR_THE_WAIT_TIME;
	allocate arg_list in (work_area) set (arg_list_ptr);
	arg_list_ptr -> arg_list.pad1 = OFF;
	arg_list_ptr -> arg_list.call_type = Interseg_call_type;
	arg_list_ptr -> arg_list.desc_count = arg_list_ptr -> arg_list.arg_count;
	arg_list_ptr -> arg_list.pad2 = OFF;
	arg_list_ptr -> arg_list.arg_ptrs (1) = addr (scope_information.data_base_index);
	arg_list_ptr -> arg_list.desc_ptrs (1) = addr (fixed_bin_35_descriptor);
	arg_list_ptr -> arg_list.arg_ptrs (arg_list_arg_count) = addr (scope_information.dsl_error_code);
	arg_list_ptr -> arg_list.desc_ptrs (arg_list_arg_count) = addr (fixed_bin_35_descriptor);
	if the_entry_called = "set_scope"
	then do;
	     scope_information.wait_time = wait_time;
	     arg_list_ptr -> arg_list.arg_ptrs (arg_list_arg_count - 1) = addr (scope_information.wait_time);
	     arg_list_ptr -> arg_list.desc_ptrs (arg_list_arg_count - 1) = addr (fixed_bin_35_descriptor);
	end;
%page;
	pca_scope_index = 1;
%skip(1);
	do pca_loop = 1 to number_of_args_supplied by 3;
%skip(1);
	     call ssu_$arg_ptr (sci_ptr, pca_loop, arg_ptr, arg_length);
	     scope_information.triplets.relation_name (pca_scope_index)
		= check_relation_name (arg);
	     arg_list_ptr -> arg_list.arg_ptrs (pca_loop + 1)
		= addr (scope_information.triplets.relation_name (pca_scope_index));
	     arg_list_ptr -> arg_list.desc_ptrs (pca_loop + 1)
		= addr (character_30_descriptor);
%skip(1);
	     call ssu_$arg_ptr (sci_ptr, pca_loop + 1, arg_ptr, arg_length);
	     scope_information.triplets.permit_op (pca_scope_index)
		= convert_scope_to_binary (arg, PERMITS);
	     arg_list_ptr -> arg_list.arg_ptrs (pca_loop + 2)
		= addr (scope_information.triplets.permit_op (pca_scope_index));
	     arg_list_ptr -> arg_list.desc_ptrs (pca_loop + 2)
		= addr (fixed_bin_35_descriptor);
	     call force_retrieve_kludge_for_modify;
%skip(1);
	     call ssu_$arg_ptr (sci_ptr, pca_loop + 2, arg_ptr, arg_length);
	     scope_information.triplets.prevent_op (pca_scope_index)
		= convert_scope_to_binary (arg, PREVENTS);
	     arg_list_ptr -> arg_list.arg_ptrs (pca_loop + 3)
		= addr (scope_information.triplets.prevent_op (pca_scope_index));
	     arg_list_ptr -> arg_list.desc_ptrs (pca_loop + 3)
		= addr (fixed_bin_35_descriptor);
	     pca_scope_index = pca_scope_index + 1;
%skip(1);
	end;
%skip(1);
	return;
%page;
check_relation_name: proc (

	crn_relation_name_parm)	/* input: relation name */
	returns (char (30));	/* output: relation name */
%skip(1);
dcl crn_loop fixed bin;
dcl crn_relation_name char (30);
dcl crn_relation_name_parm char (*) parm;
%skip(1);
	if length (crn_relation_name_parm) > 30
	then call ssu_$abort_line (sci_ptr, mrds_error_$rel_name_too_long,
	     "^/The table name ^a is invalid.", crn_relation_name_parm);
	crn_relation_name = crn_relation_name_parm;
%skip(1);
	do crn_loop = 1 to scope_info.nfiles;
	     if crn_relation_name = scope_info.scope.sm_name (crn_loop)
	     then return (crn_relation_name);
	end;
%skip(1);
	call ssu_$abort_line (sci_ptr, linus_error_$inv_table,
	     "^/The table ^a isn't a permanent table.", crn_relation_name);
%skip(1);
     end check_relation_name;
%page;
convert_scope_to_binary: proc (

	cstb_scope_parm,	    /* input: character version of scope */
	cstb_prevents_parm)	    /* input: on if this is a prevent */
	returns (fixed bin	    /* output: encoded version of scope */
		 );
%skip(1);
dcl cstb_binary_scope fixed bin;
dcl cstb_prevents_parm bit (1) aligned parm;
dcl cstb_scope_parm char (*) parm;
dcl cstb_scope char (6) varying;
%skip(1);
	if length (cstb_scope_parm) > VALID_SCOPE_SETTINGS_LENGTH
	then call ssu_$abort_line (sci_ptr, error_table_$bigarg,
	     "^/The maximum length ^a can be is ^d characters.",
	     cstb_scope_parm, VALID_SCOPE_SETTINGS_LENGTH);
	cstb_scope = cstb_scope_parm;
	if verify (cstb_scope, VALID_SCOPE_SETTINGS) ^= 0
	then call ssu_$abort_line (sci_ptr, linus_error_$ill_scp_op, "^x^a", cstb_scope_parm);
	if index (cstb_scope, NULL_CHARACTER) > 0
	then if cstb_scope ^= NULL_CHARACTER
	     then call ssu_$abort_line (sci_ptr, linus_error_$ill_scp_op,
	          "^/The scope string ^a can't specify ""n"" in conjunction with other scopes.", cstb_scope);
	if index (cstb_scope, UPDATE_CHARACTER) ^= 0
	then if ^(cstb_scope = UPDATE_CHARACTER || RETRIEVE_CHARACTER
	     | cstb_scope = RETRIEVE_CHARACTER || UPDATE_CHARACTER
	     | cstb_scope = UPDATE_CHARACTER)
	     then call ssu_$abort_line (sci_ptr, linus_error_$ill_scp_op,
	          "^/The scope string ^a can only specify ""r"" in addition to ""u"".", cstb_scope);
%skip(1);
	if search (cstb_scope, UPDATE_CHARACTER) ^= 0
	then if cstb_prevents_parm
	     then return (MODIFY_BINARY + STORE_BINARY + DELETE_BINARY);
	     else return (RETRIEVE_BINARY + MODIFY_BINARY + STORE_BINARY + DELETE_BINARY);
	else;
%skip(1);
	cstb_binary_scope = 0;
	if search (cstb_scope, RETRIEVE_CHARACTER) ^= 0
	then cstb_binary_scope = RETRIEVE_BINARY;
	if search (cstb_scope, MODIFY_CHARACTER) ^= 0
	then if cstb_prevents_parm
	     then cstb_binary_scope = cstb_binary_scope + MODIFY_BINARY;
	     else cstb_binary_scope = RETRIEVE_BINARY + MODIFY_BINARY;
	else;
	if search (cstb_scope, DELETE_CHARACTER) ^= 0
	then cstb_binary_scope = cstb_binary_scope + DELETE_BINARY;
	if search (cstb_scope, STORE_CHARACTER) ^= 0
	then cstb_binary_scope = cstb_binary_scope + STORE_BINARY;
%skip(1);
	return (cstb_binary_scope);
%skip(1);
     end convert_scope_to_binary;
%page;
force_retrieve_kludge_for_modify: proc;
%skip(1);
dcl frkfm_loop fixed bin;
%skip(1);
	if the_entry_called = "set_scope"
	then do;
	     forced_retrieve_scope_info.relations.name (pca_scope_index)
		= scope_information.triplets.relation_name (pca_scope_index);
	     if index (arg, MODIFY_CHARACTER) > 0 & index (arg, RETRIEVE_CHARACTER) = 0
	     then forced_retrieve_scope_info.relations.retrieve_scope_was_forced (pca_scope_index) = ON;
	     else if arg = UPDATE_CHARACTER
		then forced_retrieve_scope_info.relations.retrieve_scope_was_forced (pca_scope_index) = ON;
	          else;
	     return;
	end;
%skip(1);
	if forced_retrieve_scope_info_ptr = null
	then return;
%skip(1);
	do frkfm_loop = 1 to forced_retrieve_scope_info.number_of_relations_scope_is_set_for
	     while (forced_retrieve_scope_info.relations.name (frkfm_loop)
	     ^= scope_information.triplets.relation_name (pca_scope_index));
	end;
%skip(1);
	if frkfm_loop > forced_retrieve_scope_info.number_of_relations_scope_is_set_for
	then call ssu_$abort_line (sci_ptr, linus_error_$inv_table,
	     "^/Scope hasn't been set for ^a.",
	     scope_information.triplets.relation_name (pca_scope_index));
	else;
%skip(1);
	if index (arg, RETRIEVE_CHARACTER) > 0
	then if forced_retrieve_scope_info.relations.retrieve_scope_was_forced (frkfm_loop)
	     then call ssu_$abort_line (sci_ptr, linus_error_$r_scope_not_set,
	          "^/Retrieve scope can't be deleted for ^a because it's needed for modify.",
	           forced_retrieve_scope_info.relations.name (frkfm_loop));
	     else;
	else if arg = UPDATE_CHARACTER
	     then if ^forced_retrieve_scope_info.relations.retrieve_scope_was_forced (frkfm_loop)
	          then scope_information.triplets.permit_op (pca_scope_index)
	               = scope_information.triplets.permit_op (pca_scope_index) - RETRIEVE_BINARY;
	          else;
	     else;
%skip(1);
	return;
%skip(1);
     end force_retrieve_kludge_for_modify;
%skip(1);
     end process_common_args;
%page;
process_delete_scope_args: proc;
%skip(1);
	if number_of_args_supplied = 0
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
	     DELETE_SCOPE_USAGE_MESSAGE);
	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	if arg = "*"
	then do;
	     if number_of_args_supplied > 1
	     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		DELETE_SCOPE_USAGE_MESSAGE);
	     else delete_all_scope = ON;
	end;
%skip(1);
	return;
%skip(1);
     end process_delete_scope_args;
%page;
process_set_scope_args: proc;
%skip(1);
	if number_of_args_supplied ^> 2
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, 
	     SET_SCOPE_USAGE_MESSAGE);
%skip(1);
	call ssu_$arg_ptr (sci_ptr, number_of_args_supplied - 1, arg_ptr, arg_length);
	if arg = "-time" | arg = "-tm"
	then do;
	     call ssu_$arg_ptr (sci_ptr, number_of_args_supplied, arg_ptr, arg_length);
	     if verify (arg, DIGITS) ^= 0 | arg_length > REASONABLE_NUMBER_OF_DIGITS
	     then call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
		"^/The value ^a is not acceptable for a wait time.", arg);
	     wait_time = convert (wait_time, arg);
	     number_of_args_supplied = number_of_args_supplied - 2;
	end;
%skip(1);
	return;
%skip(1);
     end process_set_scope_args;
%page;
terminate: proc;
%skip(1);
	if scope_ptr ^= null
	then free scope_info;
	if scope_information_ptr ^= null
	then free scope_information;
	if arg_list_ptr ^= null
	then free arg_list_ptr -> arg_list;
%skip(1);
	if cleanup_has_been_signalled & the_entry_called = "set_scope"
	& forced_retrieve_scope_info_ptr ^= null
	then do;
	     free forced_retrieve_scope_info;
	     lcb.force_retrieve_scope_info_ptr = null;
	end;
%skip(1);
	if active_request_flag
	then if cleanup_has_been_signalled
	     then return_value = "false";
%skip(1);
	return;
%skip(1);
     end terminate;
%page;
dcl DELETE_BINARY fixed bin internal static options (constant) init (4);
dcl DELETE_CHARACTER char (1) internal static options (constant) init ("d");
dcl DELETE_SCOPE_USAGE_MESSAGE char (71) internal static options (constant) init ("^/Usage: ds table_1 {permit_1 prevent_1 ... table_n permit_n prevent_n}");
dcl DIGITS char (10) internal static options (constant) init ("0123456789");
%skip(1);
dcl MODIFY_BINARY fixed bin internal static options (constant) init (8);
dcl MODIFY_CHARACTER char (1) internal static options (constant) init ("m");
%skip(1);
dcl NULL_CHARACTER char (1) internal static options (constant) init ("n");
%skip(1);
dcl OFF bit (1) aligned internal static options (constant) init ("0"b);
dcl ON bit (1) aligned internal static options (constant) init ("1"b);
dcl ONE_FOR_DATA_BASE_INDEX_AND_ONE_FOR_ERROR_CODE fixed bin internal static options (constant) init (2);
dcl ONE_FOR_THE_WAIT_TIME fixed bin internal static options (constant) init (1);
%skip(1);
dcl PERMITS bit (1) aligned internal static options (constant) init ("0"b);
dcl PREVENTS bit (1) aligned internal static options (constant) init ("1"b);
%skip(1);
dcl REASONABLE_NUMBER_OF_DIGITS fixed bin internal static options (constant) init (5);
dcl RETRIEVE_BINARY fixed bin internal static options (constant) init (1);
dcl RETRIEVE_CHARACTER char (1) internal static options (constant) init ("r");
dcl SET_SCOPE_USAGE_MESSAGE char (85) internal static options (constant) init ("^/Usage: ss table_1 permit_1 prevent_1 {...table_n permit_n prevent_n {-control_arg}}");
%skip(1);
dcl STORE_BINARY fixed bin internal static options (constant) init (2);
dcl STORE_CHARACTER char (1) internal static options (constant) init ("s");
%skip(1);
dcl UPDATE_CHARACTER char (1) internal static options (constant) init ("u");
%skip(1);
dcl VALID_SCOPE_SETTINGS char (6) internal static options (constant) init ("dmnrsu");
dcl VALID_SCOPE_SETTINGS_LENGTH fixed bin internal static options (constant) init (6);
%page;
dcl active_request_flag bit (1) aligned;
dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_list_arg_count fixed bin;
dcl arg_list_ptr ptr;
dcl arg_ptr ptr;
%skip(1);
dcl character_30_descriptor bit (36) aligned;
dcl cleanup condition;
dcl cleanup_has_been_signalled bit (1) aligned;
dcl code fixed bin (35);
dcl com_err_ entry() options(variable);
dcl convert builtin;
dcl cu_$generate_call entry (entry, ptr);
%skip(1);
dcl data_base_pathname char (168);
dcl delete_all_scope bit (1) aligned;
dcl divide builtin;
dcl dsl_$dl_scope entry() options(variable);
dcl dsl_$dl_scope_all entry (fixed bin(35), fixed bin(35));
dcl dsl_$get_pn entry (fixed bin (35), char (168), char (20), fixed bin (35));
dcl dsl_$get_scope_info entry (fixed bin (35), ptr, ptr, fixed bin (35));
dcl dsl_$set_scope entry() options(variable);
%skip(1);
dcl error_codes (1) fixed bin (35);
dcl error_table_$bad_conversion fixed bin(35) ext static;
dcl error_table_$badcall fixed bin(35) ext static;
dcl error_table_$bigarg fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$noarg fixed bin(35) ext static;
%skip(1);
dcl fixed builtin;
dcl fixed_bin_35_descriptor bit (36) aligned;
%skip(1);
dcl index builtin;
%skip(1);
dcl length builtin;
dcl linus_data_$lock_wait_time fixed bin (35) ext static;
dcl linus_error_$ill_scp_op fixed bin(35) ext static;
dcl linus_error_$inv_table fixed bin(35) ext static;
dcl linus_error_$no_db fixed bin(35) ext static;
dcl linus_error_$r_scope_not_set fixed bin(35) ext static;
dcl linus_stifle_mrds_sub_error entry ((*) fixed bin(35));
%skip(1);
dcl mod builtin;
dcl mrds_error_$db_busy fixed bin(35) ext static;
dcl mrds_error_$rel_name_too_long fixed bin(35) ext static;
dcl mrds_error_$scope_not_empty fixed bin(35) ext static;
dcl mrds_error_$scope_not_found fixed bin(35) ext static;
dcl mrds_error_$unshared_opening fixed bin(35) ext static;
%skip(1);
dcl null builtin;
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl opening_mode char (20);
%skip(1);
dcl rel builtin;
dcl return_value char (return_value_length) varying based (return_value_ptr);
dcl return_value_length fixed bin (21);
dcl return_value_ptr ptr;
%skip(1);
dcl sci_ptr ptr;
dcl 1 scope_information aligned based (scope_information_ptr),
      2 data_base_index fixed bin (35),
      2 wait_time fixed bin (35),
      2 dsl_error_code fixed bin (35),
      2 number_of_triplets fixed bin,
      2 triplets (si_init_number_of_triplets refer (scope_information.number_of_triplets)),
        3 relation_name char (30) unaligned,
        3 permit_op fixed bin (35),
        3 prevent_op fixed bin (35);
dcl scope_information_ptr ptr;
dcl search builtin;
dcl si_init_number_of_triplets fixed bin;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
dcl sub_error_ condition;
dcl substr builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl the_entry_called char (12);
%skip(1);
dcl verify builtin;
%skip(1);
dcl wait_time fixed bin (35);
dcl work_area area (sys_info$max_seg_size) based (work_area_ptr);
dcl work_area_ptr ptr;
%page;
%include arg_list;
%page;
%include arg_descriptor;
%page;
%include linus_lcb;
%page;
%include linus_forced_scope_info;
%page;
%include mdbm_scope_info;
%page;
%include std_descriptor_types;
%skip(3);
     end linus_scope_manager;
