/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

linus_translate_query:
     proc (sci_ptr, arg_lcb_ptr);

/* DESCRIPTION:

   This  is  the  top  level procedure of the LILA translator for LINUS.  This
   procedure  deletes the previous MRDS selection expression (if any), sets up
   the  LILA  stack  header,  places  the  LILA source into a single character
   string,  and  calls  a  procedure  to  process  a  set value or a LILA set,
   whichever  is  appropriate.   The result of this procedure is a select_info
   structure suitable for use by data base access requests.  
   
   

   HISTORY:

   77-07-01 J. A. Weeldreyer: Initially written.
   
   78-03-01 J. A. Weeldreyer: Modified to give better error message.
   
   78-03-02 J. A. Weeldreyer: Modified to check ending token.
   
   80-03-13  Rickie  E.   Brinegar:  Modified  to  use  a  work  area based on
   lcb.lila_area_ptr rather than getting system free area.
   
   81-10-07   Rickie   E.   Brinegar:  changed  to  set  ls_header.(from_token
   reserved) to "0"b.  This is in response to TR11628.
   
   81-10-07  Rickie  E.   Brinegar:  changed  the  name  of  this  module from
   linus_translate to linus_lila_translate as only linus_lila calls it and its
   purpose  in  life  is  to translate a LILA selection expression into a MRDS
   selection expression.
   
   81-11-06  Rickie  E.  Brinegar: Change to allocate the selection expression
   in  the  lila  temporary  segment  which has its header reset each time the
   linus  lila  proc request is issued.  Removed calls to linus_free_se as the
   selection expression is now allocated in the lila area.
   
   82-06-22  Dave J. Schimke: added if-then conditionals to the initialization
   of select_info.se_vals, select_info.mrds_item, and select_info.user_item to
   avoid stringrange errors when the extents of the arrays are zero.

   82-06-24  Al Dupuis: added code to increment
   lcb.selection_expression_identifier after sucessful proc'ing of lila 
   select clause.

   82-11-15  Dave Schimke: Declared unspec builtin.

   83-08-29  Bert Moberg: Changed to linus_translate_query and added the entry
   point proc for lila

   83-08-31  Al Dupuis: Added the setting of error code to 
   linus_error_$no_llila_data or linus_error_$no_current_query depending on
   whether this was called via "translate_query" or lila "proc".
*/

%include linus_lcb;
%page;
%include linus_lit_string;
%page;
%include linus_ls_header;
%page;
%include linus_select_info;
%page;
%include linus_source;
%page;
%include linus_ef_data;
%page;
%include linus_rel_array;
%page;
%include linus_token_data;
%page;
%include linus_set_fn;

	dcl     (sci_ptr, arg_lcb_ptr)	ptr;

	dcl     called_from_lila	bit (1);
	dcl     nargs		fixed;

	dcl     (
	        code,				/* Output:  kill flag */
	        icode,				/* internal status code */
	        source_pos
	        )			 fixed bin (35);	/* curr. pos. while making source str. */

	dcl     i			 fixed bin;	/* internal index */

	dcl     (
	        rec_len,				/* LILA source record length */
	        nread
	        )			 fixed bin (21);	/* num. chars read */

	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);
	dcl     fn_name		 char (32) var;	/* name of set function */
	dcl     1 tok_data		 aligned like token_data;
	dcl     1 set_fn_data	 aligned like ef_data;
	dcl     token		 char (tok_data.length) based (tok_data.t_ptr); /* token value */
	dcl     sex		 char (select_info.se_len) based (select_info.se_ptr);
	dcl     key		 char (256) var;	/* LILA source line no. */

	dcl     BOF		 fixed bin int static options (constant) init (-1);
	dcl     HEADER		 fixed bin int static options (constant) init (1);
	dcl     SET_FUN		 fixed bin int static options (constant) init (3);
	dcl     KILL		 fixed bin (35) int static options (constant) init (1);
	dcl     NOKILL		 fixed bin (35) int static options (constant) init (0);

	dcl     (
	        linus_data_$max_user_items,
	        linus_data_$max_expr_items,
	        linus_data_$lila_id,
	        linus_data_$lit_string_size,
	        linus_data_$max_range_items,
	        linus_data_$max_lvars,
	        linus_error_$text_follows,
	        linus_error_$no_current_query,
	        linus_error_$no_db,
	        linus_error_$no_input_arg_reqd,
	        linus_error_$no_lila_data,
	        mrds_data_$max_select_items,
	        sys_info$max_seg_size
	        )			 fixed bin (35) ext;

	dcl     linus_lila_error_ condition;

	dcl     (null, substr, after, addr, fixed, rel, unspec) builtin;

	dcl     iox_$position	 entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
	dcl     iox_$read_key	 entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
	dcl     iox_$read_record
				 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));

	dcl     linus_define_area	 entry (ptr, char (6), fixed bin (35));
	dcl     linus_lila_get_token	 entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35));
	dcl     linus_lila_set_fn	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_set	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     linus_lila_error	 entry (ptr, ptr, fixed bin (35), char (*));
	dcl     linus_print_error	 entry (fixed bin (35), char (*));
	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$abort_line	 entry() options(variable);
	dcl     ssu_$abort_subsystem	 entry() options(variable);

	lcb_ptr = arg_lcb_ptr;
	called_from_lila = "0"b;
	call ssu_$arg_count (sci_ptr, nargs);
	if nargs ^= 0 then call error (linus_error_$no_input_arg_reqd, "", NOKILL);
	goto common;
auto:	entry      (sci_ptr, arg_lcb_ptr);	/*  Auto proc doesn't care if there were arguments */
	lcb_ptr = arg_lcb_ptr;
	called_from_lila = "0"b;
	goto common;

proc:	entry      (arg_lcb_ptr, code);

	lcb_ptr = arg_lcb_ptr;
	called_from_lila = "1"b;

common:
	if lcb.db_index = 0
	then call ssu_$abort_line (lcb.subsystem_control_info_ptr, linus_error_$no_db);

	si_ptr, lsh_ptr, lcb.lit_ptr = null;		/* init. */
	lcb.si_ptr = null;

	on linus_lila_error_
	     begin;
		if ^called_from_lila then call ssu_$abort_line (sci_ptr);
		go to exit;
	     end;

	call linus_define_area (lcb.lila_area_ptr, "LILA", icode);
	if icode ^= 0 then call error (icode, "", icode);

	linus_rel_array_ptr = lcb.rel_array_ptr;
	linus_rel_array.num_of_rels = 0;

	if lcb.lila_count <= 0
	then if called_from_lila
	     then call error (linus_error_$no_lila_data, "", NOKILL);
	     else call error (linus_error_$no_current_query, "", NOKILL);
	else;
	

	allocate ls_header in (work_area);		/* set up lila stack header */
	ls_header.type = HEADER;
	ls_header.src_ptr, ls_header.back_ptr, ls_header.fwd_ptr = null;
	ls_header.cur_ptr = lsh_ptr;
	ls_header.trans_failed = "0"b;
	ls_header.from_token = "0"b;
	ls_header.reserved = "0"b;

	call iox_$position (lcb.liocb_ptr, BOF, 0, icode);/* position to begining of lila source file */
	if icode ^= 0 then
	     call error (icode, "LILA source file", KILL);
	allocate source_str in (work_area);		/* place for string version */
	source_pos = 1;				/* initialize */
	ls_header.line_data.lno (0) = "0000";
	ls_header.line_data.last_char (0) = 0;
	do i = 1 to lcb.lila_count;			/* for every source line */
	     call iox_$read_key (lcb.liocb_ptr, key, rec_len, icode);
						/* get record len. */
	     if icode ^= 0 then
		call error (icode, "LILA source file", KILL);
	     call
		iox_$read_record (lcb.liocb_ptr, addr (source_array (source_pos)),
		rec_len, nread, icode);		/* read the record */
	     if icode ^= 0 then
		call error (icode, "LILA source file", KILL);
	     source_pos = source_pos + rec_len;		/* update position */
	     ls_header.line_data.lno (i) = key;
	     ls_header.line_data.last_char (i) =
		ls_header.line_data.last_char (i - 1) + rec_len; /* and line char table */
	end;					/* making source string */
	ls_header.cur_pos = 1;			/* initialize scan pos. */

	allocate lit_string in (work_area);
	lit_string = "0"b;
	lcb.curr_lit_offset = 0;

	call
	     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos,
	     addr (tok_data), icode);			/* get first token */
	if icode ^= 0 then
	     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);

	if tok_data.key = SET_FN then do;		/* if set function */
		fn_name = token;			/* save name */
		call
		     linus_lila_set_fn (lcb_ptr, lsh_ptr, addr (tok_data),
		     addr (set_fn_data), icode);	/* process set funct. */
		if icode ^= 0 then
		     call error (icode, "", NOKILL);

		nsv_init, nmi_init = 0;		/* allocate and set up select info for set funct. */
		nui_init = 1;
		allocate select_info in (work_area);
		unspec (select_info.se_flags) = "0"b;
		if select_info.nsv_alloc ^= 0
		then unspec (select_info.se_vals) = "0"b;
		if select_info.nmi_alloc ^= 0
		then unspec (select_info.mrds_item) = "0"b;
		if select_info.nui_alloc ^= 0
		then unspec (select_info.user_item) = "0"b;
		select_info.set_fn, select_info.se_flags.val_ret = "1"b;
		select_info.dup_flag, select_info.unique_flag,
		     select_info.se_flags.val_dtt, select_info.se_flags.val_del,
		     select_info.se_flags.val_mod = "0"b;
		select_info.prior_sf_ptr, select_info.se_ptr,
		     select_info.sel_items_ptr = null;
		select_info.nsevals, select_info.n_mrds_items,
		     select_info.sel_items_len, select_info.se_len = 0;
		select_info.n_user_items = 1;
		select_info.user_item.name (1) = fn_name;
		select_info.user_item.item_type (1) = SET_FUN;
		select_info.user_item.rslt_desc (1) = set_fn_data.desc;
		select_info.user_item.rslt_bit_len (1) = set_fn_data.bit_length;
		select_info.user_item.rslt_assn_ptr (1) = set_fn_data.assn_ptr;
		select_info.user_item.rslt_assn_type (1) = set_fn_data.assn_type;
		select_info.user_item.rslt_assn_len (1) = set_fn_data.assn_len;
		select_info.user_item.item_ptr = set_fn_data.ef_ptr;
		set_fn_data.ef_ptr -> linus_set_fn.fwd_ptr = null; /* no other set fn at this level */

	     end;					/* if set value */

	else do;					/* if lila set */

		nmi_init = mrds_data_$max_select_items; /* init and alloc select info */
		nui_init = linus_data_$max_user_items;
		nsv_init = linus_data_$max_range_items + linus_data_$max_lvars;
		allocate select_info in (work_area);
		call linus_lila_set (lcb_ptr, lsh_ptr, addr (tok_data), si_ptr, icode);
						/* process the lila set */
		if icode ^= 0 then
		     call error (icode, "", NOKILL);
		if select_info.dup_flag & ^select_info.unique_flag then
		     /* need to add -dup */
		     substr (after (sex, "-select "), 1, 4) = "-dup";
	     end;					/* if lila set */

	if tok_data.key ^= NULL then /* must end with null token */
	     call
		linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$text_follows,
		token);
	if ls_header.cur_pos < lcb.lila_chars then do;	/* if text left */
		call
		     linus_lila_get_token (lcb_ptr, lsh_ptr, ls_header.cur_pos,
		     addr (tok_data), icode);
		if icode ^= 0 then
		     call linus_lila_error (lcb_ptr, lsh_ptr, icode, token);
		if tok_data.key ^= NULL then /* if meaningfull data at end */
		     call
			linus_lila_error (lcb_ptr, lsh_ptr, linus_error_$text_follows,
			token);
	     end;

	ls_header.src_ptr = null;
	lcb.si_ptr = si_ptr;
	lsh_ptr = null;
	lcb.selection_expression_identifier = lcb.selection_expression_identifier + 1;

exit:
	return;

error:
     proc (cd, msg, fatal_flag);

/* error procedure */

	dcl     (cd, ucd, fatal_flag)	 fixed bin (35);
	dcl     msg		 char (*);

	call linus_convert_code (cd, ucd, linus_data_$lila_id);
	call linus_print_error (ucd, msg);
	if ^called_from_lila then do;
	     if fatal_flag = NOKILL then call ssu_$abort_line (sci_ptr);
	     else call ssu_$abort_subsystem (sci_ptr);
	end;
	else code = fatal_flag;
	go to exit;

     end error;

     end linus_translate_query;
