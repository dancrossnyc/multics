/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */



/*   This is the main level procedure called by ssu_ to implement the
     linus apply request. Description and usage follows.

     Description:

     This request allows a user to edit the current query or a new query
     through use of apply.
     
     Usage: apply {-new | -old} command_line

     The control argument -new specifies that the user should start off with
     an empty query. The control argument -old specifies that the user should
     use the existing query. -old is the default.

     Both parameters are passed to this request by ssu_.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_apply: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );

dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;

/*
     Mainline Processing Overview:

     (1) Check to make sure a data base is open. Process control args.

     (2) Get the subroutine to apply the query.
*/

	call initialize;

	if new_or_old_query_flag | lcb.liocb_ptr = null then
	     call linus_query_mgr$initialize_query_file (lcb_ptr);

	call linus_query_mgr$get (lcb_ptr, query_segment_ptr, query_segment_length, code);
	if code ^= 0 & code ^= linus_error_$no_current_query
	then call ssu_$abort_line (sci_ptr, code);

	call ssu_$apply_request_util (sci_ptr, first_command_argument, query_segment_ptr, query_segment_length, new_length);

	call linus_query_mgr$put (lcb_ptr, query_segment_ptr, new_length, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);

	return;

initialize: proc;


	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;

	if lcb.db_index = 0
	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);

	new_or_old_query_flag = OFF;

	call ssu_$arg_count (sci_ptr, number_of_args_supplied);

	first_command_argument = 0;
	do current_arg_number = 1 to number_of_args_supplied while (first_command_argument = 0);
	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	     if arg = "-new"
	     then new_or_old_query_flag = ON;
	     else if arg = "-old"
		then new_or_old_query_flag = OFF;
	          else do;
		     first_command_argument = current_arg_number;
		     return;
		end;
	end;
	call ssu_$abort_line (sci_ptr, 0, "Usage: apply {-new | -old} command_line");

          return;

     end initialize;

dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);

dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;

dcl code fixed bin (35);
dcl current_arg_number fixed bin;

dcl first_command_argument fixed bin;
dcl fixed builtin;

dcl linus_error_$no_current_query fixed bin(35) ext static;
dcl linus_error_$no_db fixed bin(35) ext static;
dcl linus_query_mgr$get entry (ptr, ptr, fixed bin(21), fixed bin(35));
dcl linus_query_mgr$initialize_query_file entry (ptr);
dcl linus_query_mgr$put entry (ptr, ptr, fixed bin(21), fixed bin(35));

dcl new_length fixed bin (21);
dcl new_or_old_query_flag bit (1) aligned;
dcl null builtin;
dcl number_of_args_supplied fixed bin;

dcl query_segment_ptr ptr;
dcl query_segment_length fixed bin (21);

dcl rel builtin;

dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$apply_request_util entry (ptr, fixed bin, ptr, fixed bin(21), fixed bin(21));
dcl sys_info$max_seg_size fixed bin(35) ext static;
%page;
%include linus_lcb;



     end linus_apply;
