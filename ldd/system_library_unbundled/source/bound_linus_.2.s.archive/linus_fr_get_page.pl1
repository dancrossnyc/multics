/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(1);
/*

     This module is called to get a page.

 
     Known Bugs:
 
     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_fr_get_page: proc (

	lcb_ptr_parm,	/* input: ptr to linus control block */
	page_number_parm,	/* input: desired page */
	page_ip_parm,	/* output: ptr to page_info */
	code_parm		/* output: success or failure */
		    );
%skip(3);
dcl code_parm fixed bin (35) parm;
dcl lcb_ptr_parm ptr parm;
dcl page_number_parm fixed bin (21) parm;
dcl page_ip_parm ptr parm;
%skip(3);
	lcb_ptr = lcb_ptr_parm;
	code_parm = 0;
	page_ip_parm = null ();
%skip(1);
	/* Move the pointers for the structures we will need. */
%skip(1);
	report_cip = lcb.report_control_info_ptr;
	format_report_ip = report_control_info.format_report_info_ptr;
	iocb_ptr = format_report_info.report_iocb_ptr;
%skip(1);
	/* Get set to read in the page. */
%skip(1);
	record_key = ltrim (convert (record_key, page_number_parm));
	call iox_$seek_key (iocb_ptr, record_key, record_length, code_parm);
	if code_parm ^= 0
	then return;
%skip(1);
	/* It has it's own segment for it's exclusive use. */
%skip(1);
	buffer_ptr = report_control_info.report_temp_seg_ptr;
	buffer_length = sys_info$max_seg_size * 4;
	call iox_$read_record (iocb_ptr, buffer_ptr, buffer_length,
	     record_length, code_parm);
	if code_parm ^= 0
	then return;
%skip(1);
	/* Get set to read in the page_info structure for the page. */
%skip(1);
	record_key = record_key || ".page_info";
	call iox_$seek_key (iocb_ptr, record_key, record_length, code_parm);
	if code_parm ^= 0
	then return;
%skip(1);
	/* It will temporarily go into a report temp segment. */
%skip(1);
	buffer_ptr = report_control_info.input_string_temp_seg_ptr;
	call iox_$read_record (iocb_ptr, buffer_ptr, buffer_length,
	     record_length, code_parm);
	if code_parm ^= 0
	then return;
%skip(1);
/*
	Set the automatic pointer the structure is based on and set
	the pointer to where the page is stored. Adjust the buffer
	pointer and length so the next structure can share the same segment.
*/
%skip(1);
	page_ip = buffer_ptr;
	page_info.page_ptr = report_control_info.report_temp_seg_ptr;
	buffer_word_displacement = divide (record_length, 4, 21) + 1;
	if mod (buffer_word_displacement, 2) ^= 0
	then buffer_word_displacement = buffer_word_displacement + 1;
	buffer_ptr = addrel (buffer_ptr, buffer_word_displacement);
	buffer_length = buffer_length - (buffer_word_displacement * 4);
%skip(1);
	/* Get set to read in the formatted_page_info structure. */
%skip(1);
	record_key = before (record_key, ".") || ".formatted_page_info";
	call iox_$seek_key (iocb_ptr, record_key, record_length, code_parm);
	if code_parm ^= 0
	then return;
%skip(1);
	/* Set the pointer for the structure and re-adjust buffer length. */
%skip(1);
	call iox_$read_record (iocb_ptr, buffer_ptr, buffer_length,
	     record_length, code_parm);
	if code_parm ^= 0
	then return;
	page_info.formatted_page_info_ptr = buffer_ptr;
	buffer_length = sys_info$max_seg_size * 4;
%skip(1);
/*
	If the page contains overstruck characters then read in that
	structure. Set the pointer to the structure.
*/
%skip(1);
	if page_info.page_overstrike_info_ptr ^= null ()
	then do;
	     buffer_ptr = report_control_info.output_string_temp_seg_ptr;
	     record_key = before (record_key, ".") || ".page_overstrike_info";
	     call iox_$seek_key (iocb_ptr, record_key, record_length, code_parm);
	     if code_parm ^= 0
	     then return;
	     call iox_$read_record (iocb_ptr, buffer_ptr, buffer_length,
		record_length, code_parm);
	     if code_parm ^= 0
	     then return;
	     page_info.page_overstrike_info_ptr = buffer_ptr;
	end;
%skip(1);
	page_ip_parm = page_ip;
%skip(1);
	return;
%page;
dcl addr builtin;
dcl addrel builtin;
dcl before builtin;
dcl buffer_length fixed bin (21);
dcl buffer_ptr ptr;
dcl buffer_word_displacement fixed bin (21);
dcl convert builtin;
dcl divide builtin;
dcl fixed builtin;
dcl iocb_ptr ptr;
dcl iox_$seek_key entry (ptr, char(256) var, fixed bin(21), fixed bin(35));
dcl iox_$read_record entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
dcl ltrim builtin;
dcl mod builtin;
dcl null builtin;
dcl record_key char (256) varying;
dcl record_length fixed bin (21);
dcl rel builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%page;
%include linus_options_extents;
%page;
%include linus_lcb;
%page;
%include linus_page_info;
%page;
%include linus_report_info;
%page;
%include linus_report_structures;
%skip(3);
     end linus_fr_get_page;
