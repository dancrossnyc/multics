/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-01-27,Dupuis), approve(88-03-03,MCR7844), audit(88-03-14,Blair),
     install(88-03-15,MR12.2-1036):
     Implemented the -progress/-no_progress control arguments.
                                                   END HISTORY COMMENTS */


/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     linus write_data_file request. Description and usage follows.

     Description:

     This request retrieves the selected data from the data base and writes
     it to a file which can later be input to the load_data_file request.
     
     Usage: "write_data_file pathname {-control_args}"

     pathname is the required file where the data will be written to.

     -control_args can be:

     -column_delimiter X -- the delimiter used to separate column values.
     X can be any single ascii character (default is one blank). The old
     control arg -delimiter is still accepted but not documented.

     -create_columns N {... N} -- new columns with null values are placed in
     the specified column positions.

     -extend -- the file is extended rather than truncated.

     -progress {N} -- prints a progress report every N tuples, where N defaults
     to linus_data_$trace_every_n_tuples if not specified.

     -row_delimiter X -- the delimiter used to separate rows. X can be any 
     single ascii character (default is newline character).

     -truncate -- the file is truncated rather than extended (default).

     Both parameters are passed to this request by ssu_.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - September 1983.

*/
%page;
linus_write_data_file: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(3);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(3);
/*
     Mainline Processing Overview:

     (1) Process control arguments setting flags and collecting values.

     (2) Have the subroutine do all the work (it reports errors and calls
         ssu_$abort_line if things don't go well).

*/
%skip(3);
	call initialize;
	on cleanup call terminate;
	call process_args;
	call linus_create_data_file (lcb_ptr, addr (data_file_info));
	call terminate;
%skip(1);
	return;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	unspec (data_file_info) = OFF;
	data_file_info.column_delimiter = TILDE;
	data_file_info.row_delimiter = NEWLINE;
	data_file_info.trace_every_n_tuples = linus_data_$trace_every_n_tuples;
%skip(1);
	data_file_info.flags.truncate_file = ON;
	data_file_info.flags.check_values_for_delimiters = ON;
	create_columns_map_has_been_allocated = OFF;
%skip(1);
	return;
%skip(1);
     end initialize;
%page;
process_args: proc;
%skip(3);
	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
	if number_of_args_supplied = 0
	then call ssu_$abort_line (sci_ptr, error_table_$noarg,
	     "^/Usage: write_data_file pathname {-control_args}.");
%skip(1);
	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	data_file_info.output_file_pathname = arg;
	if number_of_args_supplied = 1
	then return;
%skip(1);
	current_arg_number = 2;
	still_processing_args = ON;
%skip(1);
	do while (still_processing_args);
%skip(1);
	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	     argument_type = lookup_arg_number (arg);
	     if argument_type = 0
	     then call ssu_$abort_line (sci_ptr, error_table_$badopt,
		"^/Invalid control argument ^a.", arg);
	     else;
%skip(1);
	     if argument_type ^> ARGUMENT_TYPE_1
	     then call process_args_type_1 (argument_type);
	     else if argument_type ^> ARGUMENT_TYPE_2
		then call process_args_type_2 (argument_type);
	          else if argument_type ^> ARGUMENT_TYPE_3
		     then call process_args_type_3 (argument_type);
		     else call process_args_type_4 (argument_type);
%skip(1);
	     current_arg_number = current_arg_number + 1;
	     if current_arg_number > number_of_args_supplied
	     then still_processing_args = OFF;
%skip(1);
	end;
%skip(1);
          return;
%page;
lookup_arg_number: proc (
	argument_parm /* input: name of control argument */
		    ) returns (fixed bin);
%skip(3);
dcl argument_parm char (*) parm;
%skip(1);
	if argument_parm = "-column_delimiter" | argument_parm = "-cdm"
	then return (COLUMN_DELIMITER_INDEX);
	else if argument_parm = "-row_delimiter" | argument_parm = "-rdm"
	     then return (ROW_DELIMITER_INDEX);
	     else if argument_parm = "-extend"
		then return (EXTEND_INDEX);
	          else if argument_parm = "-truncate" | argument_parm = "-tc"
		     then return (TRUNCATE_INDEX);
		     else if argument_parm = "-create_columns" | argument_parm = "-crc"
			then return (CREATE_COLUMNS_INDEX);
		          else if argument_parm = "-progress" | argument_parm = "-pg"
			     then return (TRACE_INDEX);
			     else if argument_parm = "-no_progress"  | argument_parm = "-npg" 
				then return (NO_TRACE_INDEX);
			          else return (0);
%skip(1);
     end lookup_arg_number;
%page;
process_args_type_1: proc (

	argument_type_parm	/* input: index for type of argument */
	         );
%skip(3);
dcl argument_type_parm fixed bin parm;
%skip(1);
	current_arg_number = current_arg_number + 1;
	if current_arg_number > number_of_args_supplied
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     ERROR_MESSAGE_FOR_MISSING_MODIFIER (argument_type));
%skip(1);
	call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	if arg_length ^= 1
	then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
	     ERROR_MESSAGE_FOR_MISSING_MODIFIER (argument_type)
	     || "^/The delimiter ""^a"" is invalid.", arg);
	else;
	if argument_type = COLUMN_DELIMITER_INDEX
	then data_file_info.column_delimiter = arg;
	else data_file_info.row_delimiter = arg;
%skip(1);
	return;
%skip(1);
     end process_args_type_1;
%page;
process_args_type_2: proc (

	pat2_argument_type_parm	/* input: index for type of argument */
	         );
%skip(1);
dcl pat2_argument_type_parm fixed bin parm;
dcl pat2_current_arg_number fixed bin;
dcl pat2_error_occured bit (1) aligned;
dcl pat2_loop fixed bin;
dcl pat2_still_processing_args bit (1) aligned;
%skip(1);
	current_arg_number = current_arg_number + 1;
	pat2_error_occured = OFF;
	if current_arg_number > number_of_args_supplied
	then pat2_error_occured = ON;
	else do;
	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	     if arg_length = 0
	     then pat2_error_occured = ON;
	     else if substr (arg, 1, 1) = "-"
		then pat2_error_occured = ON;
	          else;
	end;
	if pat2_error_occured
	then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
	     ERROR_MESSAGE_FOR_MISSING_MODIFIER (argument_type));
	else;
%skip(1);
	if create_columns_map_has_been_allocated
	then do;
	     free create_columns_map in (lcb.static_area);
	     create_columns_map_has_been_allocated = OFF;
	     data_file_info.flags.create_new_columns = OFF;
	end;
%skip(1);
	create_columns_map_init_number_of_columns = 0;
	pat2_current_arg_number = current_arg_number;
	pat2_still_processing_args = ON;
%skip(1);
	do while (pat2_still_processing_args);
	     call ssu_$arg_ptr (sci_ptr, pat2_current_arg_number, arg_ptr, arg_length);
	     if arg_length ^> 0
	     then pat2_still_processing_args = OFF;
	     else if substr (arg, 1, 1) = "-"
		then pat2_still_processing_args = OFF;
	          else do;
		     create_columns_map_init_number_of_columns
			= create_columns_map_init_number_of_columns + 1;
		     pat2_current_arg_number = pat2_current_arg_number + 1;
		     if pat2_current_arg_number > number_of_args_supplied
		     then pat2_still_processing_args = OFF;
		     else;
		end;
	end;
%page;
	allocate create_columns_map in (lcb.static_area)
	     set (create_cm_ptr);
	create_columns_map_has_been_allocated = ON;
	create_columns_map.column_numbers (*) = 0;
%skip(1);
	do pat2_loop = 1 to create_columns_map_init_number_of_columns;
	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	     if verify (arg, DIGITS) ^= 0
	     then call ssu_$abort_line (sci_ptr, 0,
		"The argument ""^a"" could not be converted to a column position.", arg);
	     create_columns_map.column_numbers (pat2_loop)
		= convert (pat2_loop, arg);
	     if create_columns_map.column_numbers (pat2_loop) = 0
	     then call ssu_$abort_line (sci_ptr, 0,
		"The argument ""^a"" cannot be used a column position.", arg);
	     current_arg_number = current_arg_number + 1;
	end;
%skip(1);
	data_file_info.create_columns_map_ptr = create_cm_ptr;
	data_file_info.flags.create_new_columns = ON;
%skip(1);
	return;
%skip(1);
     end process_args_type_2;
%page;
process_args_type_3: proc (

	argument_type_parm	/* input: index for type of argument */
	         );
%skip(3);
dcl argument_type_parm fixed bin parm;
%skip(1);
	if argument_type = EXTEND_INDEX
	then data_file_info.flags.truncate_file = OFF;
	else if argument_type = TRUNCATE_INDEX
	     then data_file_info.flags.truncate_file = ON;
	     else if argument_type = NO_TRACE_INDEX
		then do;
		     data_file_info.tracing = OFF;
		     data_file_info.trace_every_n_tuples = linus_data_$trace_every_n_tuples;
		end;
%skip(1);
	return;
%skip(1);
     end process_args_type_3;
%page;
process_args_type_4: proc (

	argument_type_parm	/* input: index for type of argument */
	         );
%skip(3);
dcl argument_type_parm fixed bin parm;
%skip(1);
	data_file_info.tracing = ON;
%skip(1);
	if current_arg_number + 1 > number_of_args_supplied
	then return;
%skip(1);
	call ssu_$arg_ptr (sci_ptr, current_arg_number + 1, arg_ptr, arg_length);
	if verify (arg, "01234546789") = 0
	then do;
	     data_file_info.trace_every_n_tuples = convert (data_file_info.trace_every_n_tuples, arg);
	     current_arg_number = current_arg_number + 1;
	end;
%skip(1);
	return;
%skip(1);
     end process_args_type_4;
%skip(1);
     end process_args;
%page;
terminate: proc;
%skip(3);
	if create_columns_map_has_been_allocated
	then do;
	     free create_columns_map in (lcb.static_area);
	     create_columns_map_has_been_allocated = OFF;
	end;
%skip(1);
	return;
%skip(1);
     end terminate;
%page;
dcl ARGUMENT_TYPE_1 fixed bin static internal options (constant) init (2);
dcl ARGUMENT_TYPE_2 fixed bin static internal options (constant) init (3);
dcl ARGUMENT_TYPE_3 fixed bin static internal options (constant) init (6);
%skip(1);
dcl COLUMN_DELIMITER_INDEX fixed bin static internal options (constant) init (1);
dcl CREATE_COLUMNS_INDEX fixed bin static internal options (constant) init (3);
%skip(1);
dcl DIGITS char (10) static internal options (constant) init ("0123456789");
%skip(1);
dcl ERROR_MESSAGE_FOR_MISSING_MODIFIER (ARGUMENT_TYPE_2) char (65) init (
"^/-column_delimiter must be followed by a single ascii character.",
"^/-row_delimiter must be followed by a single ascii character.",
"^/-create_columns must be followed by column numbers."
);
dcl EXTEND_INDEX fixed bin static internal options (constant) init (4);
%skip(1);
dcl NEWLINE char (1) static internal options (constant) init ("
");
dcl NO_TRACE_INDEX fixed bin static internal options (constant) init (6);
%skip(1);
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
%skip(1);
dcl ROW_DELIMITER_INDEX fixed bin static internal options (constant) init (2);
%skip(1);
dcl TILDE char (1) static internal options (constant) init ("~");
dcl TRUNCATE_INDEX fixed bin static internal options (constant) init (5);
dcl TRACE_INDEX fixed bin static internal options (constant) init (7);
%page;
dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
dcl argument_type fixed bin;
%skip(1);
dcl cleanup condition;
dcl convert builtin;
dcl create_columns_map_has_been_allocated bit (1) aligned;
dcl current_arg_number fixed bin;
%skip(1);
dcl error_table_$bad_arg fixed bin(35) ext static;
dcl error_table_$badopt fixed bin(35) ext static;
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$noarg fixed bin(35) ext static;
%skip(1);
dcl fixed builtin;
%skip(1);
dcl linus_create_data_file entry (ptr, ptr);
dcl linus_data_$trace_every_n_tuples fixed bin (35) external static;
%skip(1);
dcl number_of_args_supplied fixed bin;
%skip(1);
dcl rel builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl still_processing_args bit (1) aligned;
dcl substr builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl unspec builtin;
%skip(1);
dcl verify builtin;
%page;
%include linus_data_file_info;
%page;
%include linus_lcb;
%skip(3);
     end linus_write_data_file;
