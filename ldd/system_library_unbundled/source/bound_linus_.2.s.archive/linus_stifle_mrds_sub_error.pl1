/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */
/*
     This is the procedure called by linus active requests to stifle
     the sub_error_ action of mrds, for certain error codes. An example of
     when this would be used would be for requests like "[open foobar u]".
     If the database can't be opened because of mrds_error_$db_busy, the
     request would like to return the value "false" without mrds printing
     all of the sub_error_ garbage on the terminal. If the database couldn't
     be opened for other reasons (trouble switch set, doesn't exist, etc.),
     the garbage will be printed on the terminal and ssu_$abort_line will
     eventually get called.
*/
/****^  HISTORY COMMENTS:
  1) change(86-01-07,Dupuis), approve(86-05-23,MCR7404), audit(86-07-23,GWMay),
     install(86-07-29,MR12.0-1106):
     Initially written.
                                                   END HISTORY COMMENTS */
/* format: off */
%page;
linus_stifle_mrds_sub_error: proc (

	error_codes_parm /* input: an array of codes to look for */
			    );
%skip(1);
dcl error_codes_parm (*) fixed bin (35);
%skip(1);
	condition_info_ptr = addr (local_condition_info);
	condition_info.version = condition_info_version_1;
	call find_condition_info_ (null (), condition_info_ptr, (0));
%skip(1);
	sub_error_info_ptr = condition_info.info_ptr;
	if substr (sub_error_info.name, 1, 9) ^= "mrds_dsl_"
	& substr (sub_error_info.name, 1, 3) ^= "mu_"
	& substr (sub_error_info.name, 1, 4) ^= "mus_"
	then call continue_to_signal_ ((0));
	else do loop = 1 to hbound (error_codes_parm, 1);
	     if sub_error_info.header.status_code = error_codes_parm (loop)
	     then return;
	end;
	call continue_to_signal_ ((0));
%skip(1);
	return;
%page;
dcl addr builtin;
dcl continue_to_signal_ entry (fixed bin(35));
dcl find_condition_info_ entry (ptr, ptr, fixed bin(35));
dcl hbound builtin;
dcl 1 local_condition_info like condition_info;
dcl loop fixed bin;
dcl null builtin;
dcl substr builtin;
%page;
%include condition_info;
%page;
%include condition_info_header;
%page;
%include sub_error_info;
%skip(1);
     end linus_stifle_mrds_sub_error;
