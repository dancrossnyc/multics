/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-01-27,Dupuis), approve(88-03-03,MCR7844), audit(88-03-14,Blair),
     install(88-03-15,MR12.2-1036):
     Implemented the -progress/-no_progress control arguments.
                                                   END HISTORY COMMENTS */


/* format: off */
%skip(3);
/*   This is the subroutine called by the linus write and write_data_file
     requests to implement the file writing. Description and usage follows.

     Description:

     This subroutine retrieves the selected data from the data base and writes
     it to a file which can later be input to the store_data_file request, and
     sometimes to the linus store request if the delimiters don't get in
     the way.
     
     Usage: "call linus_create_data_file (lcb_ptr, addr (data_file_info));

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - September 1983.

*/
%page;
linus_create_data_file: proc (

	lcb_ptr_parm,	    /* input: ptr to the linus control block info structure */
	data_file_info_ptr_parm /* input: ptr to the data_file_info structure */
		     );
%skip(3);
dcl data_file_info_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(3);
/*
     Mainline Processing Overview:

     (1) Check that a data base is open and a translated query is available.

     (2) Attach and open output file.

     (3) Begin a new table and have first row retrieved.

     (4) Write the row to the output file, retrieve another and repeat.

     (5) Close file and delete table.

*/
%page;
%skip(3);
	call initialize;
	if lcb.db_index = 0
	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);
%skip(1);
	if lcb.si_ptr = null
	then do;
	     call linus_translate_query$auto (sci_ptr, lcb_ptr);
	     if lcb.si_ptr = null
	     then call ssu_$abort_line (sci_ptr, 0);
	end;
%skip(1);
	cleanup_signalled = OFF;
	on cleanup begin;
	     cleanup_signalled = ON;
	     call terminate;
	end;
%skip(1);
	call setup_for_retrieval;
	still_retrieving = ON;
%skip(1);
	do while (still_retrieving);
	     call write_row_to_output_file;
	     call linus_table$get_row (lcb_ptr, row_value_p, code);
	     if code ^= 0
	     then if code = mrds_error_$tuple_not_found
		then still_retrieving = OFF;
	          else call ssu_$abort_line (sci_ptr, code);
	     else;
	end;
%skip(1);
	call terminate;
%skip(1);
	return;
%page;
initialize: proc;
%skip(3);
	lcb_ptr = lcb_ptr_parm;
	file_info_ptr = data_file_info_ptr_parm;
%skip(1);
	sci_ptr = lcb.subsystem_control_info_ptr;
	truncate = file_info.flags.truncate_file;
%skip(1);
	checking_values = file_info.flags.check_values_for_delimiters;
	the_column_delimiter = file_info.column_delimiter;
	the_row_delimiter = file_info.row_delimiter;
	if checking_values
	then special_characters = the_column_delimiter || the_row_delimiter || QUOTE;
%skip(1);
	creating_new_columns = file_info.flags.create_new_columns;
	if creating_new_columns
	then create_cm_ptr = file_info.create_columns_map_ptr;
	else create_cm_ptr = null;
%skip(1);
	file_is_attached = OFF;
	file_is_opened = OFF;
	table_has_been_started = OFF;
	temp_segment_has_been_acquired = OFF;
	output_columns_map_has_been_allocated = OFF;
%skip(1);
	return;
%skip(1);
     end initialize;
%page;
setup_for_retrieval: proc;
%skip(3);
dcl sfr_current_table_column_number fixed bin;
dcl sfr_inner_loop fixed bin;
dcl sfr_loop fixed bin;
dcl sfr_new_column_found bit (1) aligned;
%skip(1);
%skip(1);
	call linus_table$translate_query (lcb_ptr, table_ip, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
	call linus_table$new_table (lcb_ptr, get_pdir_ (), TEMPORARY_TABLE, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
	table_has_been_started = ON;
%skip(1);
	call linus_table$info (lcb_ptr, table_ip, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
	row_segs_ip = table_info.row_segs_info_ptr;
	row_ptrs_p = row_segs_info.seg_ptr (1);
	row_value_p = row_ptrs.row_value_ptr (1);
	number_of_output_columns = table_info.column_count;
	if creating_new_columns
	then number_of_output_columns = number_of_output_columns
	     + create_columns_map.number_of_columns;
	allocate output_columns_map in (lcb.static_area)
	     set (output_columns_map_ptr);
	output_columns_map_has_been_allocated = ON;
	output_columns_map.columns.index (*) = 0;
	output_columns_map.columns.length (*) = 0;
	output_columns_map.columns.value (*) = "";
%skip(1);
	sfr_current_table_column_number = 1;
	do sfr_loop = 1 to number_of_output_columns;
	     sfr_new_column_found = OFF;
	     if creating_new_columns
	     then do sfr_inner_loop = 1 to create_columns_map.number_of_columns
		while (^sfr_new_column_found);
		if create_columns_map.column_numbers (sfr_inner_loop) = sfr_loop
		then sfr_new_column_found = ON;
		else;
	     end;
	     if ^sfr_new_column_found
	     then do;
		output_columns_map.columns (sfr_loop).index 
		     = table_info.columns.column_index (sfr_current_table_column_number);
		output_columns_map.columns (sfr_loop).length
		     = table_info.columns.column_length (sfr_current_table_column_number);
		sfr_current_table_column_number = sfr_current_table_column_number + 1;
	     end;
	     else;
	end;
%skip(1);
	current_row_number = 0;
%skip(1);
	call linus_temp_seg_mgr$get_segment (lcb_ptr, CREATE_DATA_FILE, "",
	     buffer_ptr, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to acquire a temporary segment.");
	temp_segment_has_been_acquired = ON;
	buffer_length = sys_info$max_seg_size * 4 - 4;
	one_word_past_buffer_ptr = addrel (buffer_ptr, 1);
%skip(1);
	spare_buffer_as_non_varying_ptr = addrel (addr (spare_buffer), 1);
%skip(1);
	call expand_pathname_ (file_info.output_file_pathname, 
	     directory_name, entry_name, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to expand the output file pathname ^a.",
	     file_info.output_file_pathname);
%skip(1);
	switch_name = unique_chars_ ("0"b) || ".create_data_file";
	if truncate
	then attach_description = "vfile_ "
	     || rtrim (directory_name) || ">" || rtrim (entry_name);
	else attach_description = "vfile_ "
	     || rtrim (directory_name) || ">" || rtrim (entry_name) || " -extend";
%skip(1);
	call iox_$attach_name (switch_name, output_file_iocb_ptr, attach_description, null (), code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to attach file ^a in dir ^a.",
	     rtrim (directory_name), rtrim (entry_name));
	file_is_attached = ON;
%skip(1);
	call iox_$open (output_file_iocb_ptr, Stream_output, "0"b, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to open file ^a in dir ^a.",
	     rtrim (directory_name), rtrim (entry_name));
	file_is_opened = ON;
%skip(1);
	return;
%skip(1);
     end setup_for_retrieval;
%page;
terminate: proc;
%skip(3);
	if ^cleanup_signalled & file_info.flags.tracing
	then call ioa_ ("Writing completed. ^d tuples written.", current_row_number);
%skip(1);
	if temp_segment_has_been_acquired
	then do;
	     call linus_temp_seg_mgr$release_segment (lcb_ptr, CREATE_DATA_FILE, buffer_ptr, code);
	     if code ^= 0
	     then if cleanup_signalled
		then call ssu_$print_message (sci_ptr, code,
		     "^/While trying to release a temporary segment.");
		else call ssu_$abort_line (sci_ptr, code,
		     "^/While trying to release a temporary segment.");
	     else temp_segment_has_been_acquired = OFF;
	end;
%skip(1);
	if file_is_opened
	then do;
	     call iox_$close (output_file_iocb_ptr, code);
	     if code ^= 0
	     then if cleanup_signalled
		then call ssu_$print_message (sci_ptr, code,
		     "^/While trying to close ^a.", entry_name);
	          else call ssu_$abort_line (sci_ptr, code,
		     "^/While trying to close ^a.", entry_name);
	     else file_is_opened = OFF;
	end;
	else;
%skip(1);
	if file_is_attached
	then do;
	     call iox_$detach_iocb (output_file_iocb_ptr, code);
	     if code ^= 0
	     then if cleanup_signalled
		then call ssu_$print_message (sci_ptr, code,
		     "^/While trying to detach ^p.", output_file_iocb_ptr);
	          else call ssu_$abort_line (sci_ptr, code,
		     "^/While trying to detach ^p.", output_file_iocb_ptr);
	     else do;
		file_is_attached = OFF;
		call iox_$destroy_iocb (output_file_iocb_ptr, code);
		if code ^= 0
		then if cleanup_signalled
		     then call ssu_$print_message (sci_ptr, code,
		          "^/While trying to destroy ^p.", output_file_iocb_ptr);
		     else call ssu_$abort_line (sci_ptr, code,
			"^/While trying to destroy ^p.", output_file_iocb_ptr);
		else;
	     end;
	end;
%page;
	if table_has_been_started
	then do;
	     call linus_table$delete_table (lcb_ptr, code);
	     if code ^= 0
	     then if cleanup_signalled
		then call ssu_$print_message (sci_ptr, code,
		     "^/While trying to delete the table.");
		else call ssu_$abort_line (sci_ptr, code,
		     "^/While trying to delete the table.");
	     else table_has_been_started = OFF;
	end;
%skip(1);
	if output_columns_map_has_been_allocated
	then do;
	     free output_columns_map in (lcb.static_area);
	     output_columns_map_has_been_allocated = OFF;
	end;
%skip(1);
	return;
%skip(1);
     end terminate;
%page;
write_row_to_output_file: proc;
%skip(3);
dcl wrtof_loop fixed bin;
dcl wrtof_table_column_number fixed bin;
%skip(1);
	buffer = "";
	current_row_number = current_row_number + 1;
	wrtof_table_column_number = 0;
%skip(1);
	do wrtof_loop = 1 to number_of_output_columns;
	     if output_columns_map.columns (wrtof_loop).index ^= 0
	     then do;
		wrtof_table_column_number = wrtof_table_column_number + 1;
		if ^checking_values
		then buffer = buffer || substr (row_value,
		     output_columns_map.columns (wrtof_loop).index,
		     output_columns_map.columns (wrtof_loop).length);
		else call add_checked_value_to_buffer (wrtof_loop, wrtof_table_column_number);
	     end;
	     buffer = buffer || the_column_delimiter;
	end;
%skip(1);
	buffer = buffer || the_row_delimiter;
	call iox_$put_chars (output_file_iocb_ptr, one_word_past_buffer_ptr,
	     length (buffer), code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to write row number ^d to the output file.", current_row_number);
%skip(1);
	if file_info.flags.tracing
	then if mod (current_row_number, file_info.trace_every_n_tuples) = 0
	     then call ioa_ ("^d tuples have been written.", current_row_number);
%skip(1);
	return;
%skip(1);
     end write_row_to_output_file;
%page;
add_checked_value_to_buffer: proc (

	acvtb_column_index_parm, /* input: number of current output column */
	acvtb_table_index_parm   /* input: number of current table column */
			    );
%skip(3);
dcl acvtb_column_index fixed bin (21);
dcl acvtb_column_index_parm fixed bin parm;
dcl acvtb_column_length fixed bin (21);
dcl acvtb_data_type fixed bin (6) unsigned unaligned;
dcl acvtb_table_index_parm fixed bin parm;
%skip(1);
	acvtb_column_index = output_columns_map.columns (acvtb_column_index_parm).index;
	acvtb_column_length = output_columns_map.columns (acvtb_column_index_parm).length;
	acvtb_data_type = addr (table_info.columns.column_data_type (
	     acvtb_table_index_parm)) -> descriptor.type;
%skip(1);
	if acvtb_data_type ^= char_dtype & acvtb_data_type ^= varying_char_dtype
	& acvtb_data_type ^= bit_dtype & acvtb_data_type ^= varying_bit_dtype
	then spare_buffer = ltrim (rtrim (substr (row_value,
	     acvtb_column_index, acvtb_column_length)));
	else spare_buffer = rtrim (substr (row_value,
	     acvtb_column_index, acvtb_column_length));
	if search (spare_buffer, special_characters) = 0
	then buffer = buffer || spare_buffer;
	else do;
	     spare_buffer_length = length (spare_buffer);
	     buffer = buffer || requote_string_ (spare_buffer_as_non_varying);
	end;
%skip(1);
	return;
%skip(1);
     end add_checked_value_to_buffer;
%page;
dcl CREATE_DATA_FILE char (16) static internal options (constant) init ("create_data_file");
%skip(1);
dcl MAXIMUM_MRDS_ATTRIBUTE_LENGTH fixed bin static internal options (constant) init (4096);
%skip(1);
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
%skip(1);
dcl QUOTE char (1) static internal options (constant) init ("""");
%skip(1);
dcl TEMPORARY_TABLE bit (1) aligned static internal options (constant) init ("0"b);
%page;
dcl addr builtin;
dcl addrel builtin;
dcl attach_description char (256);
%skip(1);
dcl buffer char (buffer_length) varying based (buffer_ptr);
dcl buffer_length fixed bin (21);
dcl buffer_ptr ptr;
%skip(1);
dcl checking_values bit (1) aligned;
dcl cleanup condition;
dcl cleanup_signalled bit (1) aligned;
dcl code fixed bin (35);
dcl creating_new_columns bit (1) aligned;
dcl current_row_number fixed bin;
%skip(1);
dcl directory_name char (168);
%skip(1);
dcl entry_name char (32);
dcl expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
%skip(1);
dcl 1 file_info like data_file_info based (file_info_ptr);
dcl file_info_ptr ptr;
dcl file_is_attached bit (1) aligned;
dcl file_is_opened bit (1) aligned;
dcl fixed builtin;
%skip(1);
dcl get_pdir_ entry() returns(char(168));
%skip(1);
dcl ioa_ entry() options(variable);
%skip(1);
dcl length builtin;
dcl linus_error_$no_db fixed bin(35) ext static;
dcl linus_table$delete_table entry (ptr, fixed bin(35));
dcl linus_table$info entry (ptr, ptr, fixed bin(35));
dcl linus_table$new_table entry (ptr, char(168) var, bit(1) aligned, fixed bin(35));
dcl linus_table$get_row entry (ptr, ptr unaligned, fixed bin (35));
dcl linus_table$translate_query entry (ptr, ptr, fixed bin(35));
dcl linus_temp_seg_mgr$get_segment entry (ptr, char(*), char(*), ptr, fixed bin(35));
dcl linus_temp_seg_mgr$release_segment entry (ptr, char(*), ptr, fixed bin(35));
dcl linus_translate_query$auto entry (ptr, ptr);
dcl ltrim builtin;
%skip(1);
dcl mod builtin;
dcl mrds_error_$tuple_not_found fixed bin(35) ext static;
%skip(1);
dcl null builtin;
dcl number_of_output_columns fixed bin;
%skip(1);
dcl one_word_past_buffer_ptr ptr;
dcl 1 output_columns_map aligned based (output_columns_map_ptr),
      2 number_of_columns fixed bin,
      2 columns (number_of_output_columns refer (output_columns_map.number_of_columns)),
        3 index fixed bin (21),
        3 length fixed bin (21),
        3 value char (1) varying;
dcl output_columns_map_has_been_allocated bit (1) aligned;
dcl output_columns_map_ptr ptr;
dcl output_file_iocb_ptr ptr;
%skip(1);
dcl rel builtin;
dcl requote_string_ entry (char(*)) returns(char(*));
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl search builtin;
dcl spare_buffer char (MAXIMUM_MRDS_ATTRIBUTE_LENGTH) varying;
dcl spare_buffer_length fixed bin;
dcl spare_buffer_as_non_varying char (spare_buffer_length) based (spare_buffer_as_non_varying_ptr);
dcl spare_buffer_as_non_varying_ptr ptr;
dcl special_characters char (3);
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$print_message entry() options(variable);
dcl still_retrieving bit (1) aligned;
dcl substr builtin;
dcl switch_name char (32);
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl table_has_been_started bit (1) aligned;
dcl temp_segment_has_been_acquired bit (1) aligned;
dcl the_column_delimiter char (1);
dcl the_row_delimiter char (1);
dcl truncate bit (1) aligned;
%skip(1);
dcl unique_chars_ entry (bit(*)) returns(char(15));
%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include iox_dcls;
%page;
%include iox_modes;
%page;
%include linus_data_file_info;
%page;
%include linus_lcb;
%page;
%include linus_table_info;
%page;
%include mdbm_descriptor;
%page;
%include std_descriptor_types;
%skip(3);
     end linus_create_data_file;
