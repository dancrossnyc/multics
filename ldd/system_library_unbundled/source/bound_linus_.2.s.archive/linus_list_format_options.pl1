/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%skip(3);
/*   The main level procedure called by ssu_ to implement the
     linus list_format_options request. Description and usage follows.

     This request does either 1, 2 or 3 listed below.
     
     1) Lists the ACTIVE option names and values.

     2) Lists ALL the option names and values.

     3) Lists USER SPECIFIED option names and values.
     
     Usage (1): "list_format_options" or "list_format_options -active"

     Only the active option names and values are listed.

     Usage (2): list_format_options -all

     All of the formatting option names and values are listed.

     Usage (3): list_format_options -format_option_args
        or      [list_format_options -format_option_args]

     Where -format_option_args are the same ones taken by the 
     set_format_options_request except no values are supplied.
     When used as an active request only one format option can
     be specified.

     Both parameters are passed to this request by ssu_.


     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_list_format_options: proc (sci_ptr_parm, lcb_ptr_parm);
%skip(3);
dcl sci_ptr_parm ptr parm;  /* ptr to the subsystem control info structure */
dcl lcb_ptr_parm ptr parm;  /* ptr to the linus control block info structure */
%skip(3);
/*
          Mainline Processing Overview.

          (1) Determine requested usage.

          (2) (a) For usage 1 and 2 get the active or all the option
                   names and values.

              (b) For usage 3 as a request, get the option value, list it, 
                  continue until all user provided option names are exhausted, 
                  then return. For usage 3 as an active request do the same
                  except only one format option is specified.
	     
          (3) List the names and values.
*/
%page;
%skip(3);
	call initialize;
%skip(1);
          if usage_1
	then call linus_options$get_active (lcb_ptr,
	     names_and_values_info_ptr, no_of_names_and_values,
	     names_and_values_ptr, size_of_names_and_values, code);
	else if usage_2
	     then call linus_options$get_all (lcb_ptr,
		names_and_values_info_ptr, no_of_names_and_values,
		names_and_values_ptr, size_of_names_and_values, code);
	     else do;
		call get_and_list_user_specified_option_values;
		return;
	     end;
%skip(1);
	if code ^= 0 
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
          call list_the_values;
%skip(1);
          return;
%page;
get_and_list_option_name: proc;
%skip(3);
	call linus_options$get (lcb_ptr, long_option_name, 
	     option_identifier, normalized_option_name, 
	     option_value, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
	if active_request_flag
	then do;
	     if ^identifier_needed
	     then number_of_legal_args = 1;
	     else number_of_legal_args = 2;
	     if number_of_args_supplied > number_of_legal_args
	     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		INVALID_ACTIVE_REQUEST_MESSAGE);
	     else;
	     return_value = requote_string_ ((option_value));
	     return;
	end;
	else;
%skip(1);
	if index (option_value, NEWLINE) = 0
	then do;
	     padded_option_name = normalized_option_name;
	     call ioa_ ("^a", padded_option_name || QUOTE
		|| option_value || QUOTE);
	end;
	else call ioa_ ("^a^x^a^/^a^a^x^a", 
	     normalized_option_name, "beginning",
	     option_value, normalized_option_name, "end");
%skip(1);
	return;
%skip(1);
     end get_and_list_option_name;
%page;
get_and_list_star_name: proc;
%skip(3);
	/* Get and list the names and values for the columns named
	   by the starname. */
%skip(1);
	if active_request_flag
	then call ssu_$abort_line (sci_ptr, error_table_$nostars,
	     "^/When used as an active request starnames are not allowed.");
%skip(1);
	option_name_table.the_name (1) = long_option_name;
	option_name_table.the_identifier (1) = option_identifier;
%skip(1);
	call linus_options$get_named (lcb_ptr, 
	     option_name_table_ptr, no_of_options_in_name_table,
	     names_and_values_info_ptr, no_of_names_and_values,
	     names_and_values_ptr, size_of_names_and_values, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
	else;
%skip(1);
	call list_the_values;
%skip(1);
	return;
%skip(1);
     end get_and_list_star_name;
%page;
get_and_list_user_specified_option_values: proc;
%skip(3);
/*
	Walk through the loop once for each format option. Pick up the
          format option name and have it expanded into a long name, and
          determine if it needs a column identifier. If it does need a
          column identifier then pick it up. Get the option value associated
          with the format option. If called as an active request then set the
          return value and return. If called as a regular request then list
          the value and repeat the loop as long as there are more options.
*/
%skip(1);
          report_cip = lcb.report_control_info_ptr;
          names_and_values_area_ptr = report_control_info.name_value_area_ptr;
	no_of_options_in_name_table = 1;
	allocate option_name_table in (names_and_values_area)
	     set (option_name_table_ptr);
%skip(1);
          option_identifier = "";
	current_arg_number = 1;
%skip(1);
	call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
	current_arg_number = current_arg_number + 1;
          still_processing_args = ON;
%skip(1);
          do while (still_processing_args);
%skip(1);
	     option_name = arg;
               call linus_options$check_name (lcb_ptr, option_name, 
		long_option_name, identifier_needed, code);
	     if code ^= 0
	     then if code = linus_error_$no_lila_expr_processed
		then call ssu_$abort_line (sci_ptr, code,
		     "^/There must be columns defined before the value of ^a can be listed.", 
		     long_option_name);
	          else if code = linus_error_$bad_option_name
		     then call ssu_$abort_line (sci_ptr, code,
		          "^/^a is not a valid option name.", option_name);
		     else call ssu_$abort_line (sci_ptr, code);
	     else;
%skip(1);
	     this_is_a_star_name = OFF;
	     if identifier_needed
	     then do;
		if current_arg_number > number_of_args_supplied
	          then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		     "The option ^a was not followed by a column identifier.",
		     long_option_name);
		else;
		call ssu_$arg_ptr (sci_ptr, current_arg_number, 
		     arg_ptr, arg_length);
		current_arg_number = current_arg_number + 1;
		option_identifier = arg;
		call linus_options$check_identifier (lcb_ptr,
		     long_option_name, option_identifier,
		     normalized_option_name, code);
		if code ^= 0
		then if code = linus_error_$bad_option_identifier
		     then call ssu_$abort_line (sci_ptr, code,
		          "^/^a is not a valid column identifier for ^a.",
		          option_identifier, long_option_name);
		     else if code = error_table_$nostars
			then this_is_a_star_name = ON;
		          else call ssu_$abort_line (sci_ptr, code);
		else;
	     end;
	     else;
%skip(1);
	     if this_is_a_star_name
	     then call get_and_list_star_name;
	     else call get_and_list_option_name;
%skip(1);
	     if active_request_flag
	     then return;
%skip(1);
	     if current_arg_number > number_of_args_supplied
	     then still_processing_args = OFF;
	     else do;
		call ssu_$arg_ptr (sci_ptr, current_arg_number,
		     arg_ptr, arg_length);
		current_arg_number = current_arg_number + 1;
	     end;
%skip(1);
	end;
%skip(1);
	return;
%skip(1);
     end get_and_list_user_specified_option_values;
%page;
initialize: proc;
%skip(3);
/*

	If zero args then usage_1 is requested.  If there are any args
	supplied then walk through them all once setting the usage_1 and
	usage_2 flags as -active and -all are found.  If -active and -all
	are not found then usage_3 has been requested, or an incorrectly
	spelled control arg has been given.  If -active or -all are found
	then there can't be any format_option_args supplied.

*/
%skip(1);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
          usage_1 = OFF;
	usage_2 = OFF;
	usage_3 = OFF;
%skip(1);
	/* Make sure the format options are up to date. */
%skip(1);
	call linus_options$initialize (lcb_ptr, code);
	if code ^= 0 
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
          /* Find the longest column name for the current select. */
%skip(1);
          call linus_table$info (lcb_ptr, table_ip, code);
	if code = linus_error_$no_lila_expr_processed
	then the_longest_option_name 
	     = LONGEST_GENERAL_REPORT_OPTION_NAME_LENGTH + 5;
	else do;
	     if LONGEST_SPECIFIC_COLUMN_OPTION_NAME_LENGTH
	     > LONGEST_GENERAL_COLUMN_OPTION_NAME_LENGTH
	     then the_longest_option_name 
		= LONGEST_SPECIFIC_COLUMN_OPTION_NAME_LENGTH;
	     else the_longest_option_name
		= LONGEST_GENERAL_COLUMN_OPTION_NAME_LENGTH;
	     the_longest_option_name = the_longest_option_name
		+ table_info.maximum_column_name_length + 5;
	end;
	padded_option_name_ptr = addr (chunk_of_automatic_storage);
%skip(1);
	call ssu_$return_arg (sci_ptr, number_of_args_supplied,
	     active_request_flag, return_value_ptr, return_value_length);
%page;
	if number_of_args_supplied = 0
	then do;
	     usage_1 = ON;
	     if active_request_flag
	     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		INVALID_ACTIVE_REQUEST_MESSAGE);
	     else;
	end;
	else do;
	     number_of_control_args_found = 0;
	     do loop = 1 to number_of_args_supplied;
		call ssu_$arg_ptr (sci_ptr, loop, arg_ptr, arg_length);
		if arg = "-active" | arg = "-act"
		then do;
		     number_of_control_args_found 
			= number_of_control_args_found + 1;
		     usage_1 = ON;
		     usage_2 = OFF;
		end;
		else if arg = "-all" | arg = "-a"
		     then do;
			number_of_control_args_found 
			     = number_of_control_args_found + 1;
			usage_2 = ON;
			usage_1 = OFF;
		     end;
		     else;
	     end;
	     if usage_1 | usage_2
	     then if active_request_flag
		then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, 
		     INVALID_ACTIVE_REQUEST_MESSAGE);
	          else if number_of_control_args_found ^= number_of_args_supplied
		     then call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		          "^/When used, ^[-all^;-active^] must be the only argument given.",
		          fixed (usage_1 || usage_2));
		     else;
	     else;
	end;
%skip(1);
	if ^usage_1 & ^usage_2
	then usage_3 = ON;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
list_the_values: proc;
%skip(3);
/*
	Walk through the loop once for each format option value. The
          user may have requested that the active options were to be
          listed, and the result of this may be zero option values to list.
*/
%skip(1);
          if no_of_names_and_values = 0
	then do;
	     call ioa_ ("^a^/^a",
		"All of the formatting options are set to their default values.",
		"There are no column options defined.");
	     return;
	end;
%skip(1);
          do loop = 1 to no_of_names_and_values;
%skip(1);
	     option_value = substr (names_and_values, 
		name_value_info.value.index (loop), 
		name_value_info.value.length (loop));
%skip(1);
	     if index (option_value, NEWLINE) = 0
	     then do;
		padded_option_name = substr (names_and_values,
		name_value_info.name.index (loop), 
		name_value_info.name.length (loop));
	          call ioa_ ("^a", padded_option_name || QUOTE
		     || option_value || QUOTE);
	     end;
	     else call ioa_ ("^a^x^a^/^a^a^x^a", 
		substr (names_and_values, 
		name_value_info.name.index (loop), 
		name_value_info.name.length (loop)), 
		"beginning", option_value, 
		substr (names_and_values, 
		name_value_info.name.index (loop), 
		name_value_info.name.length (loop)), "end");
%skip(1);
	end;
%skip(1);
          return;
%skip(1);          
     end list_the_values;
%page;
dcl INVALID_ACTIVE_REQUEST_MESSAGE char (79) static int options (constant) init (
"^/When used as an active request only one format option value can be requested.");
dcl NEWLINE char (1) static int options (constant) init ("
");
dcl OFF bit (1) aligned static int options (constant) init ("0"b);
dcl ON bit (1) aligned static int options (constant) init ("1"b);
dcl QUOTE char (1) static int options (constant) init ("""");
%skip(1);
dcl active_request_flag bit (1) aligned;
dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
%skip(1);
dcl chunk_of_automatic_storage char (MAXIMUM_NORMALIZED_OPTION_NAME_LENGTH);
dcl code fixed bin (35);
dcl current_arg_number fixed bin;
%skip(1);
dcl error_table_$inconsistent fixed bin(35) ext static;
dcl error_table_$nostars fixed bin(35) ext static;
%skip(1);
dcl fixed builtin;
%skip(1);
dcl identifier_needed bit (1) aligned;
dcl index builtin;
dcl ioa_ entry() options(variable);
%skip(1);
dcl linus_error_$bad_option_identifier fixed bin(35) ext static;
dcl linus_error_$bad_option_name fixed bin(35) ext static;
dcl linus_error_$no_lila_expr_processed fixed bin(35) ext static;
dcl linus_options$check_identifier entry (ptr, char(*) var, char(*) var, char(*) var, fixed bin(35));
dcl linus_options$check_name entry (ptr, char(*) var, char(*) var, bit(1) aligned, fixed bin(35));
dcl linus_options$get entry (ptr, char(*) var, char(*) var, char(*) var, char(*) var, fixed bin(35));
dcl linus_options$get_active entry (ptr, ptr, fixed bin(21), ptr, fixed bin(21), fixed bin(35));
dcl linus_options$get_all entry (ptr, ptr, fixed bin(21), ptr, fixed bin(21), fixed bin(35));
dcl linus_options$get_named entry (ptr, ptr, fixed bin(21), ptr, fixed bin(21), ptr, fixed bin(21),	fixed bin(35));
dcl linus_options$initialize entry (ptr, fixed bin(35));
dcl linus_table$info entry (ptr, ptr, fixed bin(35));
dcl long_option_name char (MAXIMUM_OPTION_NAME_LENGTH) varying;
dcl loop fixed bin;
%skip(1);
dcl names_and_values_area area (sys_info$max_seg_size) based (names_and_values_area_ptr);
dcl names_and_values_area_ptr ptr;
dcl normalized_option_name char (MAXIMUM_NORMALIZED_OPTION_NAME_LENGTH) varying;
dcl null builtin;
dcl number_of_args_supplied fixed bin;
dcl number_of_control_args_found fixed bin;
dcl number_of_legal_args fixed bin;
%skip(1);
dcl option_identifier char (MAXIMUM_OPTION_IDENTIFIER_LENGTH) varying;
dcl option_name char (MAXIMUM_OPTION_NAME_LENGTH) varying;
dcl option_value char (MAXIMUM_OPTION_VALUE_LENGTH) varying;
%skip(1);
dcl padded_option_name char (the_longest_option_name) based (padded_option_name_ptr);
dcl padded_option_name_ptr ptr;
%skip(1);
dcl rel builtin;
dcl requote_string_ entry (char(*)) returns(char(*));
dcl return_value char (return_value_length) varying based (return_value_ptr);
dcl return_value_length fixed bin (21);
dcl return_value_ptr ptr;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
dcl still_processing_args bit (1) aligned;
dcl substr builtin;
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl the_longest_option_name fixed bin;
dcl this_is_a_star_name bit (1) aligned;
%skip(1);
dcl usage_1 bit (1) aligned;
dcl usage_2 bit (1) aligned;
dcl usage_3 bit (1) aligned;
%page;
%include arg_descriptor;
%page;
%include arg_list;
%page;
%include linus_lcb;
%page;
%include linus_names_and_values;
%page;
%include linus_options_extents;
%page;
%include linus_report_info;
%page;
%include linus_table_info;
%page;
     end linus_list_format_options;
