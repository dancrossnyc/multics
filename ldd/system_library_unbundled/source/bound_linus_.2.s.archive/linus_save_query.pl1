/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: off */
%skip(3);
/*   This is the main level procedure called by ssu_ to implement the
     linus save_query request. Description and usage follows.

     Description:

     This request saves the current query in the file named by the caller.
     
     Usage: save_query path.lquery

     Both parameters are passed to this request by ssu_.

     Known Bugs:

     Other Problems:

     History:

     Written - Al Dupuis - August 1983

*/
%page;
linus_save_query: proc (

	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
		     );
%skip(1);
dcl sci_ptr_parm ptr parm;
dcl lcb_ptr_parm ptr parm;
%skip(1);
/*
     Mainline Processing Overview:

     (1) Check to make sure a data base is open and get the current 
         query. 

     (2) Open the file, write the query, and close the file.
*/
%skip(1);
	call initialize;
%skip(1);
	on cleanup begin;
	     cleanup_signalled = ON;
	     call close_file;
	end;
%skip(1);
	call open_file;
	call write_the_file;
	call close_file;
%skip(1);
	return;
%page;
close_file: proc;
%skip(3);
	if opened
	then do;
	     call iox_$close (output_file_iocb_ptr, code);
	     if code ^= 0
	     then if cleanup_signalled
		then call ssu_$print_message (sci_ptr, code,
		     "^/While trying to close ^a.", output_file_pathname);
	          else call ssu_$abort_line (sci_ptr, code,
		     "^/While trying to close ^a.", output_file_pathname);
	     else opened = OFF;
	end;
	else;
%skip(1);
	if attached
	then do;
	     call iox_$detach_iocb (output_file_iocb_ptr, code);
	     if code ^= 0
	     then if cleanup_signalled
		then call ssu_$print_message (sci_ptr, code,
		     "^/While trying to detach ^p.", output_file_iocb_ptr);
	          else call ssu_$abort_line (sci_ptr, code,
		     "^/While trying to detach ^p.", output_file_iocb_ptr);
	     else do;
		attached = OFF;
		call iox_$destroy_iocb (output_file_iocb_ptr, code);
		if code ^= 0
		then if cleanup_signalled
		     then call ssu_$print_message (sci_ptr, code,
		          "^/While trying to destroy ^p.", output_file_iocb_ptr);
		     else call ssu_$abort_line (sci_ptr, code,
			"^/While trying to destroy ^p.", output_file_iocb_ptr);
		else;
	     end;
	end;
%skip(1);
	return;
%skip(1);
     end close_file;
%page;
initialize: proc;
%skip(3);
	sci_ptr = sci_ptr_parm;
	lcb_ptr = lcb_ptr_parm;
%skip(1);
	attached = OFF;
	opened = OFF;
	cleanup_signalled = OFF;
%skip(1);
	if lcb.db_index = 0
	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);
%skip(1);
	call linus_query_mgr$get (lcb_ptr, query_segment_ptr,
	     query_segment_length, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
	if number_of_args_supplied = 0
	then call ssu_$abort_line (sci_ptr, error_table_$noarg, USAGE_MESSAGE);
	else if number_of_args_supplied ^= 1
	     then call ssu_$abort_line (sci_ptr, error_table_$too_many_args, USAGE_MESSAGE);
%skip(1);
	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_length);
	output_file_pathname = arg;
%skip(1);
          return;
%skip(1);
     end initialize;
%page;
open_file: proc;
%skip(3);
	call expand_pathname_$add_suffix (output_file_pathname, "lquery",
	     output_file_directory_name, output_file_entry_name, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to expand ^a.", rtrim (output_file_pathname));
	switch_name = unique_chars_ ("0"b) || "linus.save_query";
%skip(1);
	call iox_$attach_name (switch_name, output_file_iocb_ptr,
	     "vfile_ " || rtrim (output_file_directory_name) || ">"
	     || rtrim (output_file_entry_name), null (), code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to attach ^a in ^a.",
	     output_file_entry_name, output_file_directory_name);
	else attached = ON;
%skip(1);
	call iox_$open (output_file_iocb_ptr, Stream_output, "0"b, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code,
	     "^/While trying to open ^a in ^a.",
	     output_file_entry_name, output_file_directory_name);
	else opened = ON;
%skip(1);
	return;
%skip(1);
     end open_file;
%page;
write_the_file: proc;
%skip(3);
	call iox_$put_chars (output_file_iocb_ptr, query_segment_ptr,
	     query_segment_length, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code);
%skip(1);
	return;
%skip(1);
     end write_the_file;
%page;
dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
dcl ON bit (1) aligned static internal options (constant) init ("1"b);
dcl USAGE_MESSAGE char (28) static internal options (constant) init (
"^/Usage: save_query pathname");
%skip(1);
dcl addr builtin;
dcl arg char (arg_length) based (arg_ptr);
dcl arg_length fixed bin (21);
dcl arg_ptr ptr;
dcl attached bit (1) aligned;
%skip(1);
dcl code fixed bin (35);
dcl cleanup condition;
dcl cleanup_signalled bit (1) aligned;
%skip(1);
dcl error_table_$too_many_args fixed bin(35) ext static;
dcl error_table_$noarg fixed bin(35) ext static;
dcl expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
%skip(1);
dcl fixed builtin;
%skip(1);
dcl linus_error_$no_db fixed bin(35) ext static;
dcl linus_query_mgr$get entry (ptr, ptr, fixed bin(21), fixed bin(35));
%skip(1);
dcl number_of_args_supplied fixed bin;
dcl null builtin;
%skip(1);
dcl opened bit (1) aligned;
dcl output_file_directory_name char (168);
dcl output_file_entry_name char (32);
dcl output_file_iocb_ptr ptr;
dcl output_file_pathname char (168);
%skip(1);
dcl query_segment_length fixed bin (21);
dcl query_segment_ptr ptr;
%skip(1);
dcl rel builtin;
dcl rtrim builtin;
%skip(1);
dcl sci_ptr ptr;
dcl ssu_$abort_line entry() options(variable);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
dcl ssu_$print_message entry() options(variable);
dcl switch_name char (32);
dcl sys_info$max_seg_size fixed bin(35) ext static;
%skip(1);
dcl unique_chars_ entry (bit(*)) returns(char(15));
%page;
%include iox_modes;
%page;
%include iox_dcls;
%page;
%include linus_lcb;
%skip(3);
     end linus_save_query;
