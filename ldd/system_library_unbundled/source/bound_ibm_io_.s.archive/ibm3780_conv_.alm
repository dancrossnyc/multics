" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************
"ibm3780_conv_ - Conversion routine for producing ascii IBM3780 printer output
"	Coded March 1977 by David Vinograd

" 1) Version -- for new Printer DIM.

"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************


"
" The manner in which this procedure is utilized is described in detail
" in the listing of prt_conv_.
"
" This proc puts carriage control chars
" at the beginning of each output line.



	name	ibm3780_conv_
	segdef	printer
	segdef	punch
	segdef	teleprinter

	tempd	init_outp
	tempd	saved_outp
	tempd	saved_lp
	tempd	saved_sb

	tempd	saved_aq
	include	stack_header
	temp	carriage_ctl
	equ	pci,5
	equ	outp,3
	equ	inp,2


teleprinter:
printer:
	tra	send_init
	tra	send_chars
	tra	send_slew_pattern
	tra	send_slew_count

punch:
	tra	pr7|0
	tra	send_chars
	tra	pr7|0
	tra	no_slew
no_slew:
	lda	0,du
	tra	pr7|0
" 

	include	prt_conv_info


" 

send_init:

	spri3	init_outp		store output ptr
	ldq	2,dl		advance output ptr
	a9bd	outp|0,ql		..
	tra	pr7|0		return

" 

send_chars:
	sprilp	saved_lp
	sprisb	saved_sb
	staq	saved_aq
	epbpsb	sp|0
	epaq	*
	lprplp	sb|stack_header.lot_ptr,*au
	ldq	lp|transparent
	tze	spaceloop
	eaq	0,2
	tmoz	nospace
	tra	spaceout
spaceloop:
	eaq	0,2		white space count in QU
	tmoz	nospace		skip if no white space
	sbx2	63,du		can take only 63 at a time
	tmoz	*+2		..
	ldq	63,du		if more, take 63 to begin with
	cmpq	3,du		if fewer than 3 spaces,
	tmi	blankout		insert blanks instead

	mlr	(),(pr)		insert  dup char
	desc9a	dupchar,1	..
	desc9a	bb|0,1		..

	mlr	(qu),(pr)		insert dup count character
	desc9a	duptable,1	..
	desc9a	bb|0(1),1		..

	ldq	2,dl		step output pointer
	a9bd	bb|0,ql		..
	tra	spaceloop		loop

blankout:	mlr	(),(pr,rl),fill(040)  insert requisite number of blanks
	desc9a	*,0		..
	desc9a	bb|0,qu		..

	a9bd	bb|0,qu		bump output pointer
	tra	spaceloop		and loop

spaceout:
	epplp	saved_lp,*
	eppsb	saved_sb,*
	mlr	(),(pr,rl),fill(040)
	desc9a	*,0
	desc9a	bb|0,2

	a9bd	bb|0,2
nospace:
	epplp	saved_lp,*
	eppsb	saved_sb,*
	ldaq	saved_aq
	mlr	(pr,rl),(pr,rl)	copy characters into output
	desc9a	inp|0,au		..
	desc9a	outp|0,au		..

	a9bd	inp|0,au		step input and output pointers
	a9bd	outp|0,au		..
	eax2	0		make sure X2 now zero
	tra	pr7|0		return to caller

" 

send_slew_pattern:
	eax7	0		initialize for search
	sprilp	saved_lp
	sprisb	saved_sb
	epbpsb	sp|0
	staq	saved_aq
	epaq	*
	lprplp	sb|stack_header.lot_ptr,*au
	ldaq	saved_aq
	equ	nslew,6
	epplp	lp|slew_ctl_table_ptr,*
	rpt	nslew/2,2,tze	search for slew characters
	cmpa	lp|0,7		..
	ldq	lp|-1,7

stslew:
	epplp	saved_lp,*
	eppsb	saved_sb,*
	stq	carriage_ctl	save carriage control chars
	spri3	saved_outp	store output ptr
	epp3	init_outp,*	move ptr to register
	mlr	(pr),(pr)		move carriage control into output
	desc9a	carriage_ctl,2	..
	desc9a	pr3|0,2		..
	epp3	saved_outp,*	restore orignal output ptr
	tra	pr7|0		return to caller


send_slew_count:
	eaq	0,al		line count in QU
	sbla	3,dl		can slew at most 3 lines at a time
	tmoz	*+2		if more than 3 lines,
          ldq       3,du                do only 3 to start
	sprilp	saved_lp
	sprisb	saved_sb
	epbpsb	sp|0
	staq	saved_aq
	epaq	*
	lprplp	sb|stack_header.lot_ptr,*au
	ldaq	saved_aq
	ldq	lp|carriage_ctl_table_ptr,*qu
	tra	stslew		and store it for later

dupchar:
	vfd	o9/035
duptable:
	aci	"@ABCDEFGHIJKLMNO"
	aci	"PQRSTUVWXYZ[\]^_"
	aci	"`abcdefghijklmno"
	aci	"pqrstuvwxyz{|}~"
	use internal_static
	join	/link/internal_static
	segdef	carriage_ctl_table_ptr
	segdef	slew_ctl_table_ptr
	segdef	transparent

transparent:
	oct	0
	even
carriage_ctl_table_ptr:
	its	-1,1
slew_ctl_table_ptr:
	its	-1,1



	end
