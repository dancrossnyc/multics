/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* Module called to handle io_call control orders. */

/* Written:  March 1984 by Allan Haggett. */

ibm3780_io_call_control_:
     procedure (P_attach_data_ptr, P_iocb_ptr, P_info_ptr, P_code);

/**** Parameters */

dcl  P_attach_data_ptr      pointer;
dcl  P_iocb_ptr	        pointer parameter;
dcl  P_info_ptr	        pointer parameter;	     /* To io_call_info */
dcl  P_code	        fixed bin (35);

/**** Automatic */

dcl  arg_count	        fixed bin;
dcl  caller	        character (32);
dcl  code		        fixed bin (35);
dcl  device	        character (32);	     /* For select_device */
dcl  idx		        fixed bin;
dcl  iocb_ptr	        pointer;
dcl  multi_record_count     fixed bin (35);
dcl  order	        character (32);	     /* From io_call_info. */
dcl  (report,
     error)	        entry variable options (variable);
dcl  1 set_bsc_modes        automatic,
       2 transparent        bit (1) unaligned,
       2 ebcdic_sw	        bit (1) unaligned,
       2 pad	        bit (34) unaligned;

/**** Constant */

dcl  SIMPLE_ORDERS	        (5) character (32) internal static options (constant)
		        init ("runout", "end_write_mode", "resetread", "resetwrite", "reset");

/**** Entries and external. */

dcl  cv_dec_check_	        entry (character (*), fixed bin (35)) returns (fixed bin (35));
dcl  iox_$control	        entry (ptr, character (*), ptr, fixed bin (35));

dcl  (error_table_$badopt,
     error_table_$noarg,
     error_table_$no_operation) fixed bin (35) external static;

dcl (addr, hbound, null) builtin;
%page;
	/* Copy parameters. */
	adp = P_attach_data_ptr;		     /* Attach Data Ptr */
	iocb_ptr = P_iocb_ptr;
	io_call_infop = P_info_ptr;		     /* See io_call_info.incl.pl1 */
	P_code = 0;

	/* Get a pointer to the CommInfoBlock for this switch. This is */
	/* a block of information about the single "bisync_" attachment. */
	cib_ptr = ad.cib_ptr;

	order = io_call_info.order_name;
	arg_count = io_call_info.nargs;
	caller = io_call_info.caller_name;
	error = io_call_info.error;
	report = io_call_info.report;
	code = 0;				     /* Pass this back at the very end. */

	/* Check to see if this order can simply be passed on without any */
	/* further processing. Should we check the argument count? */
	do idx = 1 to hbound (SIMPLE_ORDERS, 1)
	     while (order ^= SIMPLE_ORDERS (idx));
	end;

	if (idx <= hbound (SIMPLE_ORDERS, 1)) then
	     call iox_$control (iocb_ptr, order, null (), code);

	else if (order = "set_bsc_modes") then do;

	     /* No arguments means we just make sure bisync_ is in sync. */
	     set_bsc_modes.ebcdic_sw = (ad.char_mode = EBCDIC);
	     set_bsc_modes.transparent = ad.transparent;

	     do idx = 1 to arg_count;

		if (io_call_info.args (idx) = "ascii") then
		     set_bsc_modes.ebcdic_sw = "0"b;
		else if (io_call_info.args (idx) = "ebcdic") then
		     set_bsc_modes.ebcdic_sw = "1"b;
		else if (io_call_info.args (idx) = "transparent") then
		     set_bsc_modes.transparent = "1"b;
		else if (io_call_info.args (idx) = "nontransparent") then
		     set_bsc_modes.transparent = "0"b;
		else do;			     /* Unknown keyword. */
		     call error (error_table_$badopt, caller, "Invalid BISYNC mode: ^a", io_call_info.args (idx));
		     goto ERROR_RETURN;	     /* code = 0 */
		end;
	     end;

	     /* Keywords are processed, pass it to ourself. */
	     call iox_$control (iocb_ptr, order, addr (set_bsc_modes), code);

	end;

	/* Debugging order. */
	else if (order = "ibm3780_info") then do;

	     call report ("Bisync modes:^21t^[non^]transparent,^[ascii^;ebcdic^]",
		^ad.transparent, (ad.char_mode = ASCII));
	     call report ("Multi-record:^21t^[ON^;OFF^] (count=^d)",
		ad.multi_record, ad.multi_record_count);
	     call report ("Record length:^21t^d", ad.record_len);

	end;

	else if (order = "select_device") then do;
	     if (arg_count < 1) then do;
		call error (error_table_$noarg, caller, "No device name for ^a order.", order);
		goto ERROR_RETURN;
	     end;

	     /* Copy device string and pass pointer. */
	     device = io_call_info.args (1);
	     call iox_$control (iocb_ptr, order, addr (device), code);

	     /* Interpret code returned by ibm3780_. */
	     if (code = error_table_$no_operation) then do;
		call error (0, caller, "Invalid device name: ^a", device);
		code = 0;			     /* So io_call does not try again. */
	     end;
	end;

	else if (order = "set_multi_record_mode") then do;

	     if (arg_count = 0) then
		call iox_$control (iocb_ptr, order, null (), code);
	     else do;			     /* Get number. */
		multi_record_count = get_numeric_arg (1, "record count");
		call iox_$control (iocb_ptr, order, addr (multi_record_count), code);
	     end;
	end;

	/* See if bisync_ will accommodate. */
	else call iox_$control (cib.comm_iocb_ptr, "io_call", io_call_infop, code);

ERROR_RETURN:
	P_code = code;			     /* Pass it back. */

	return;
%page;
get_numeric_arg:
     procedure (P_idx, P_what) returns (fixed bin (35));

dcl  P_idx	        fixed bin parameter;
dcl  P_what	        character (*) parameter;

dcl  bad_pos	        fixed bin (35);	     /* From cv_deck_check_. */
dcl  result	        fixed bin (35);

	if (P_idx > arg_count) then do;
	     call error (error_table_$noarg, caller, "No ^a for ^a order.",
		P_what, order);
	     goto ERROR_RETURN;
	end;

	result = cv_dec_check_ ((io_call_info.args (P_idx)), bad_pos);
	if (bad_pos ^= 0) then do;
	     call error (0, caller, "Bad integer value for ^a: ^a", P_what, io_call_info.args (P_idx));
	     goto ERROR_RETURN;
	end;

	if (result < 0) then do;
	     call error (0, caller, "Value for ^a cannot be less than zero: ^d",
		P_what, result);
	     goto ERROR_RETURN;
	end;

	return (result);

     end get_numeric_arg;

%page; %include ibm3780_data;
%page; %include remote_ttt_info;
%page; %include io_call_info;

     end ibm3780_io_call_control_;
