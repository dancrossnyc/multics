/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-27,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
message_parser_:
     proc (p_mowse_mcb_ptr, p_msg_len, p_msg_ptr, p_ecode);

/* : PROGRAM FUNCTION

Determine the destination of the message depending on the major capability
number and direct control appropriately.
*/

/* : NOTES
*/


/* INPUT PARAMETERS */
dcl p_mowse_mcb_ptr	       ptr parameter;	    /* mcb of mowse_io_ */
dcl p_msg_len	       fixed bin (17) parameter;  /* Length of message */
dcl p_msg_ptr	       ptr parameter;	    /* Pointer to message */

/* OUTPUT PARAMETERS */
dcl p_ecode	       fixed bin (35) parameter;  /* Error code */


/* EXTERNAL CALLS */
dcl external_mowse_	       entry (ptr, fixed bin, fixed bin, ptr, fixed bin,
		       fixed bin (35));
dcl internal_mowse_	       entry (ptr, fixed bin, fixed bin, ptr,
		       fixed bin (35));


/* MISC VARIABLES */
dcl msg_type	       fixed bin;		    /* See send_mowse_message.pl1 */
dcl system	       fixed bin (17);
dcl major		       fixed bin (17);
dcl minor		       fixed bin (17);


/* CONDITIONS */


/* BUILTINS */
dcl rank		       builtin;


/**/

/* INITIALIZATION */

	p_ecode = 0;
	message_ptr = p_msg_ptr;
	message_len = p_msg_len;
	msg_type = rank (message_ptr -> event_message.header.msg_type);

	if msg_type = CONTINUE then do;
	     system =
		rank (message_ptr -> more_remaining_message.header.system);
	     major =
		rank (message_ptr -> more_remaining_message.header.major);
	     minor =
		rank (message_ptr -> more_remaining_message.header.minor);
	end;
	else if msg_type = MORE then do;
	     system =
		rank (message_ptr -> request_more_message.header.system);
	     major =
		rank (message_ptr -> request_more_message.header.major);
	     minor = -1;
	end;
	else do;
	     system = rank (message_ptr -> last_message.header.system);
	     major = rank (message_ptr -> last_message.header.major);
	     minor = rank (message_ptr -> last_message.header.minor);
	end;

/* : if major = INTERNAL then handle internal message */

	if (major = INTERNAL) then
	     call internal_mowse_ (p_mowse_mcb_ptr, message_len, minor,
		message_ptr, p_ecode);

/* : else handle message destined for some capability */

	else do;
	     call external_mowse_ (p_mowse_mcb_ptr, major, minor,
		message_ptr, message_len, p_ecode);
	     return;
	end;

%page;

/* INCLUDE FILES */
%include mowse;
%include mowse_messages;
%include mowse_info;

/* : END message_parser_ */
     end message_parser_;
