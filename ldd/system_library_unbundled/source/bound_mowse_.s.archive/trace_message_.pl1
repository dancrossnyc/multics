/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-28,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
trace_message_:
     proc (p_iocb_ptr, p_trace_message_info_ptr);


/* : PROGRAM FUNCTION

Prints out diagnostic information about the messges received and sent by
MOWSE.
*/

/* : NOTES
*/

/* INPUT PARAMETERS */
dcl p_trace_message_info_ptr
		       ptr;		    /* Pointer to info to be contained in trace message */
dcl p_iocb_ptr	       ptr;		    /* Pointer to i/o switch control block */


/* OUTPUT PARAMETERS */


/* MISC VARIABLES */
dcl msg_type_name	       char (10) varying;
dcl direction_name	       char (3);
dcl from_system_name       char (32) varying;
dcl system_name	       char (32) varying;
dcl minor_name	       char (32) varying;


/* STRUCTURES */
dcl 01 trc_info	       like trace_message_info
		       based (p_trace_message_info_ptr);


/* SYSTEM CALLS */
dcl ioa_$ioa_switch	       entry () options (variable);
dcl ioa_$rsnnl	       entry () options (variable);

/* SYSTEM CALL SUPPORT */


/* EXTERNAL CALLS */


/* EXTERNAL CALL SUPPORT */


/* BUILTINS */
dcl length	       builtin;
dcl null		       builtin;

/* CONDITIONS */


/* CONSTANTS */


/**/
/* INITIALIZATION */


/* MAIN */
/* : Check the trace flag */

	if p_iocb_ptr = null then
	     return;

/* : Compose diagnostic message */

	if p_trace_message_info_ptr -> trc_info.direction = 0 then
	     direction_name = "SND";
	else if p_trace_message_info_ptr -> trc_info.direction = 1 then
	     direction_name = "RCV";
	else
	     direction_name = "???";

	if (p_trace_message_info_ptr -> trc_info.dest_minor < 32) &
	     (p_trace_message_info_ptr -> trc_info.dest_minor ^= -1)
	then do;
	     minor_name = "INVALID MINOR";
	     goto end_case;
	end;
	else if p_trace_message_info_ptr -> trc_info.dest_minor > 63
	then do;
	     minor_name = "USER MINOR";
	     goto end_case;
	end;
	else if p_trace_message_info_ptr -> trc_info.dest_minor = -1
	then do;
	     minor_name = "<MORE>";
	     goto end_case;
	end;


	if p_trace_message_info_ptr -> trc_info.dest_major = INTERNAL
	then do;
	     if p_trace_message_info_ptr -> trc_info.dest_minor > 63
		| p_trace_message_info_ptr -> trc_info.dest_minor < 32
	     then do;
		minor_name = "INVALID";
		goto end_case;
	     end;

	     if p_trace_message_info_ptr -> trc_info.dest_minor
		= EXECUTE_COMMAND then
		minor_name = "EXECUTE_COMMAND";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= ADD_TO_REMOTE_CAT then
		minor_name = "ADD_TO_REMOTE_CAT";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= DELETE_FROM_REMOTE_CAT then
		minor_name = "DELETE_FROM_REMOTE_CAT";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= REQUEST_CONNECT then
		minor_name = "REQUEST_CONNECT";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= SET_SLEEP_FLAG then
		minor_name = "SET_SLEEP_FLAG";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= RESET_REPLY then
		minor_name = "RESET_REPLY";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= RESET_SLEEP_FLAG then
		minor_name = "RESET_SLEEP_FLAG";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= SET_SUSPEND then
		minor_name = "SET_SUSPEND";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= RESET_SUSPEND then
		minor_name = "RESET_SUSPEND";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= PUT_TO_BACKGROUND_BUFFER then
		minor_name = "INFO";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= PUT_TO_QUERY_MESSAGE_BUFFER then
		minor_name = "QUERY";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= FAIL_CAPABILITY then
		minor_name = "FAIL_CAPABILITY";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= STATUS_REPLY then
		minor_name = "STATUS_REPLY";
	     else
		call ioa_$rsnnl ("^d", minor_name, (0),
		     p_trace_message_info_ptr -> trc_info.dest_minor);
	end;

	if p_trace_message_info_ptr -> trc_info.dest_major > INTERNAL
	then do;
	     if p_trace_message_info_ptr -> trc_info.dest_minor > 63
	     then do;
		minor_name = "INVALID";
		goto end_case;
	     end;

	     if p_trace_message_info_ptr -> trc_info.dest_minor
		= EXECUTE_COMMAND_REPLY then
		minor_name = "EXECUTE_COMMAND_REPLY";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= QUERY_REPLY then
		minor_name = "QUERY_REPLY";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= FAIL_CAPABILITY then
		minor_name = "FAIL_CAPABILITY";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= SUSPEND_APPLICATION then
		minor_name = "SUSPEND_APPLICATION";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= RESUME_APPLICATION then
		minor_name = "RESUME_APPLICATION";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= TERMINATE_APPLICATION then
		minor_name = "TERMINATE_APPLICATION";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= RESET_APPLICATION then
		minor_name = "RESET_APPLICATION";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= WAKE_UP then
		minor_name = "WAKE_UP";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= STATUS then
		minor_name = "STATUS";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= OVERFLOWED_BUFFER then
		minor_name = "OVERFLOWED_BUFFER";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= SYSTEM_ERROR then
		minor_name = "SYSTEM_ERROR";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= RESPONSE_CONNECT then
		minor_name = "RESPONSE_CONNECT";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= RESPONSE_DISCONNECT then
		minor_name = "RESPONSE_DISCONNECT";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= REQUEST_CONNECT then
		minor_name = "REQUEST_CONNECT";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= REQUEST_DISCONNECT then
		minor_name = "REQUEST_DISCONNECT";
	     else if p_trace_message_info_ptr -> trc_info.dest_minor
		= STATUS_REPLY then
		minor_name = "STATUS_REPLY";
	     else
		call ioa_$rsnnl ("^d", minor_name, (0),
		     p_trace_message_info_ptr -> trc_info.dest_minor);
	end;

end_case:

	if p_trace_message_info_ptr -> trc_info.dest_system
	     = LOCAL_SYSTEM then
	     system_name = "LOCAL_SYSTEM";
	else if p_trace_message_info_ptr -> trc_info.dest_system
	     = REMOTE_SYSTEM then
	     system_name = "REMOTE_SYSTEM";
	else
	     system_name = "INVALID_SYSTEM";

	if p_trace_message_info_ptr -> trc_info.from_system
	     = LOCAL_SYSTEM then
	     from_system_name = "LOCAL_SYSTEM";
	else if p_trace_message_info_ptr -> trc_info.from_system
	     = REMOTE_SYSTEM then
	     from_system_name = "REMOTE_SYSTEM";
	else
	     from_system_name = "INVALID_SYSTEM";

	if p_trace_message_info_ptr -> trc_info.msg_type = MORE then
	     msg_type_name = "MORE";
	else if p_trace_message_info_ptr -> trc_info.msg_type = CONTINUE
	     then
	     msg_type_name = "CONTINUE";
	else if p_trace_message_info_ptr -> trc_info.msg_type = LAST then
	     msg_type_name = "LAST";
	else
	     msg_type_name = "INVALID";


	call ioa_$ioa_switch (p_iocb_ptr,
	     "^/TRC ^a: from ^a:^d to ^a:^d:^d = ^a", direction_name,
	     from_system_name,
	     p_trace_message_info_ptr -> trc_info.from_major,
	     system_name,
	     p_trace_message_info_ptr -> trc_info.dest_major,
	     p_trace_message_info_ptr -> trc_info.dest_minor, minor_name);

	if length (p_trace_message_info_ptr -> trc_info.message) = 1 &
	     p_trace_message_info_ptr -> trc_info.message = " " then
	     call ioa_$ioa_switch (p_iocb_ptr, "TRC Msg_type ^a :^d:| |",
		msg_type_name,
		length (p_trace_message_info_ptr -> trc_info.message));
	else
	     call ioa_$ioa_switch (p_iocb_ptr, "TRC Msg_type ^a :^d:|^a",
		msg_type_name,
		length (p_trace_message_info_ptr -> trc_info.message),
		p_trace_message_info_ptr -> trc_info.message || "|");
	return;


/**/
/* INTERNAL PROCEDURES */




%page;
/* INCLUDE FILES */
%include mowse;
%include mowse_info;
%include mowse_messages;
%include mowse_io_control_info;

/* : END */
     end;
