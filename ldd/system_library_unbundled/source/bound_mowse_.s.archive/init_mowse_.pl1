/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-13,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-09-19,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Allowed up to 32 (number of cat entry) capabilities to be autoloaded.
  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
  4) change(86-12-10,Flegel), approve(86-12-10,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Replaced signalling of mowse_fatal_error with a call to fatal_mowse_trap_.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
init_mowse_:
     proc (p_mowse_mcb_ptr, p_init_mowse_info_ptr, p_code);

/* : PROGRAM FUNCTION

Sets up tables required by MOWSE to allow the library functions
supported to be performed.  Sets flags used by mowse to determine
information to display to users based on command line arguements
given to atm (attach_mowse).
*/

/* : NOTES
*/

/* INPUT PARAMETERS */
dcl p_init_mowse_info_ptr  ptr;		    /* Pointer to initialization info structure */
dcl p_mowse_mcb_ptr	       ptr parameter;	    /* Pointer to mowse mcb */

/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;


/* MISC VARIABLES */
dcl mowse_info_ptr	       ptr;		    /* Pointer to mowse_info_ structure */
dcl i		       fixed bin;		    /* Counter */


/* STRUCTURES */
dcl 01 io_info_store       like mowse_io_store_info automatic;
dcl 01 io_info_debug       like mowse_io_debug_info automatic;
dcl 01 io_info_trace       like mowse_io_debug_info automatic;


/* SYSTEM CALLS */
dcl iox_$control	       entry (ptr, char (*), ptr, fixed bin (35));
dcl ioa_$ioa_switch	       entry () options (variable);
dcl get_temp_segment_      entry (char (*), ptr, fixed bin (35));


/* SYSTEM CALL SUPPORT */
dcl ws_error_$invalid_mcb  fixed bin (35) ext static;


/* EXTERNAL CALLS */
dcl execom_	       entry (ptr, fixed bin, char (*), fixed bin,
		       fixed bin, fixed bin, fixed bin (35));


/* EXTERNAL CALL SUPPORT */


/* BUILTINS */
dcl null		       builtin;
dcl addr		       builtin;
dcl length	       builtin;

/* CONDITIONS */


/* CONSTANTS */


/**/
/* INITIALIZATION */
	init_mowse_info_ptr = p_init_mowse_info_ptr;
	mowse_info_ptr = null;

/* MAIN */

/* : Check mcb pointer */

	if p_mowse_mcb_ptr = null then do;
	     p_code = ws_error_$invalid_mcb;
	     return;
	end;

/* : Get temp_seg (MOWSE_) in which tables will be allocated. */

	call get_temp_segment_ (temp_seg_name, mowse_info_ptr, p_code);
	if p_code ^= 0 then
	     return;

	io_info_store.version = mowse_io_info_version_1;
	io_info_store.info_ptr = mowse_info_ptr;
	call iox_$control (p_mowse_mcb_ptr -> mcb.iocb_ptr,
	     "store_mowse_info", addr (io_info_store), p_code);
	if p_code ^= 0 then
	     return;

/* : Initialize pointer to initialization info */

	p_mowse_mcb_ptr -> mcb.mowse_info_ptr = mowse_info_ptr;
	mowse_info_ptr -> mowse_info.init_mowse_info_ptr =
	     init_mowse_info_ptr;

/* : Set version of mowse_info structure */

	mowse_info_ptr -> mowse_info.version = MOWSE_VERSION_;

/* : Initialize the CAT tables */

	mowse_info_ptr -> mowse_info.local_cat (*).mcb_ptr = null;
	mowse_info_ptr -> mowse_info.local_cat (*).sleep_time = 1;
	mowse_info_ptr -> mowse_info.local_cat (*).flags.reset = "0"b;
	mowse_info_ptr -> mowse_info.local_cat (*).flags.suspended = "0"b;
	mowse_info_ptr -> mowse_info.local_cat (*).flags.status = "0"b;
	mowse_info_ptr -> mowse_info.remote_cat (*).major_capability = 0;

	mowse_info_ptr -> mowse_info.remote_cat (*).capability_name =
	     ((32)" ");
	mowse_info_ptr -> mowse_info.remote_cat (*).flags.reset = "0"b;
	mowse_info_ptr -> mowse_info.remote_cat (*).flags.suspended = "0"b;
	mowse_info_ptr -> mowse_info.remote_cat (*).sleep_time = "0"b;

/* : Initialize the message_manager_info substructure */

	mowse_info_ptr
	     -> mowse_info.message_manager_info.head_list_ptr = null;
	mowse_info_ptr
	     -> mowse_info.message_manager_info.tail_list_ptr = null;
	mowse_info_ptr
	     -> mowse_info.message_manager_info.pending_messages = 0;

	mowse_info_ptr -> mowse_info.mowse_flags.debug = "0"b;
	mowse_info_ptr -> mowse_info.mowse_flags.debug_file_iocb = null;
	mowse_info_ptr -> mowse_info.mowse_flags.trace = "0"b;
	mowse_info_ptr -> mowse_info.mowse_flags.trace_file_iocb = null;

/* : Examine arguements given to mowse and perform the required tasks */

	if init_mowse_info_ptr = null then
	     return;
	if init_mowse_info.version ^= MOWSE_VERSION_ then
	     return;

	if init_mowse_info.flags.debug_sw then do;
	     io_info_debug.version = mowse_io_info_version_1;
	     io_info_debug.segment_name = init_mowse_info.debug;
	     call iox_$control (p_mowse_mcb_ptr -> mcb.iocb_ptr, "debug_on",
		addr (io_info_debug), p_code);
	     if p_code ^= 0 then
		return;
	end;

	if init_mowse_info.flags.trace_sw then do;
	     io_info_trace.version = mowse_io_info_version_1;
	     io_info_trace.segment_name = init_mowse_info.trace;
	     call iox_$control (p_mowse_mcb_ptr -> mcb.iocb_ptr,
		"trace_on", addr (io_info_trace), p_code);
	     if p_code ^= 0 then
		return;
	     call ioa_$ioa_switch (mowse_info_ptr
		-> mowse_info.mowse_flags.trace_file_iocb,
		"MOWSE MESSAGE TRACE^/format:" ||
		"^/TRC <direction>: from <source_system>:" ||
		"^/<source_major>: to <destination_system>:" ||
		"^/<destination_major>:<destination_minor> = <minor_name>"
		||
		"^/TRC Msg_type<message_type>: <message_length>: <message>^/"
		);
	end;

/* : Execute all of the startup capabilities specified */

	i = 1;
	do while (init_mowse_info.startup (i) ^= ""
	     & init_mowse_info.flags.start_up_sw);

	     call execom_ (p_mowse_mcb_ptr,
		(length (init_mowse_info.startup (i))),
		(init_mowse_info.startup (i)),
		(0), (LOCAL_SYSTEM), (INTERNAL), p_code);
	     if p_code ^= 0 then
		return;
	     i = i + 1;
	end;

%page;
/* INCLUDE FILES */
%include mowse_io_control_info;
%include mowse_mcb;
%include mowse_info;
%include mowse;

/* : END */
     end;
