/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-07-01,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
send_msg_:
     proc (p_mcb_ptr, p_major, p_minor, p_arg, p_arg_len, p_channel, p_ecode);

/* : PROGRAM FUNCTION

Send a message to the specified application.
*/

/* : NOTES
*/


/* INPUT PARAMETERS */
dcl p_mcb_ptr	       ptr parameter;	    /* Pointer to callers mcb */
dcl p_major	       fixed bin (17) parameter;  /* Destination major */
dcl p_minor	       fixed bin (17) parameter;  /* Destination minor */
dcl p_arg		       ptr parameter;	    /* Message pointer */
dcl p_arg_len	       fixed bin (17) parameter;  /* Message length */
dcl p_channel	       fixed bin (17) parameter;  /* Channel (FG,BG) */
dcl p_ecode	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl source_system	       fixed bin (17);
dcl source_p_major	       fixed bin (17);
dcl dest_system	       fixed bin (17);
dcl dest_p_major	       fixed bin (17);


/* EXTERNAL CALLS */
dcl put_application_outbuff_
		       entry (ptr, fixed bin, fixed bin, fixed bin,
		       ptr, fixed bin, fixed bin (35));
dcl send_mowse_message_    entry (ptr, fixed bin, fixed bin, fixed bin,
		       fixed bin, fixed bin, fixed bin, ptr,
		       fixed bin, fixed bin, fixed bin (35));
dcl send_outbuff_data_     entry (ptr, fixed bin, fixed bin, fixed bin,
		       fixed bin (35));
dcl capability_$unpack     entry (fixed bin, fixed bin, fixed bin, fixed
		       bin (35));


/* SYSTEM CALL SUPPORT */
dcl ws_error_$invalid_data_ptr
		       fixed bin (35) ext static;
dcl ws_error_$invalid_mcb  fixed bin (35) ext static;
dcl ws_error_$invalid_capability_number
		       fixed bin (35) ext static;

/* BUILTINS */
dcl null		       builtin;

/**/

/* INITIALIZATION */

/* MAIN */

/* : Null message then return */

	if (p_arg = null) & (p_arg_len ^= 0) then do;
	     p_ecode = ws_error_$invalid_data_ptr;
	     return;
	end;

/* : Check the mcb pointer */

	if p_mcb_ptr = null then do;
	     p_ecode = ws_error_$invalid_mcb;
	     return;
	end;

/* : Unpack the source and destination */

	call capability_$unpack (source_system, source_p_major,
	     p_mcb_ptr -> mcb.major_capability, p_ecode);
	if p_ecode ^= 0 then
	     return;

	call capability_$unpack (dest_system, dest_p_major, p_major,
	     p_ecode);
	if p_ecode ^= 0 then
	     return;

/* : If the message is large, use the outbuffer */

	if (p_arg_len > MAXIMUM_PACKET_SIZE) then do;
	     if (dest_p_major < MINIMUM_CAT_ENTRY |
		dest_p_major > MAXIMUM_CAT_ENTRY) then do;
		p_ecode = ws_error_$invalid_capability_number;
		return;
	     end;

	     call put_application_outbuff_ (p_mcb_ptr, dest_system,
		dest_p_major, p_minor, p_arg, p_arg_len, p_ecode);
	     if p_ecode ^= 0 then
		return;
	     call send_outbuff_data_ (p_mcb_ptr, dest_system, dest_p_major,
		p_minor, p_ecode);
	     return;
	end;

/* : Send the message */

	call send_mowse_message_ (p_mcb_ptr, source_system,
	     source_p_major, dest_system, dest_p_major, p_minor, LAST,
	     p_arg, p_arg_len, p_channel, p_ecode);

%page;

/* INCLUDE FILES */
%include mowse;
%include mowse_messages;
%include mowse_info;
%include mowse_mcb;

/* : END */
     end send_msg_;
