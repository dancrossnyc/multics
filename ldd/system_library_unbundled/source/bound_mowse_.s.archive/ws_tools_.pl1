/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
ws_tools_:
     proc ();


/* PROGRAM FUNCTION

This is a collection of routines which need to be accessed from a number of
external entry points for the MOWSE protocol handling.
*/


/* NOTES
*/

/****^  HISTORY COMMENTS:
  1) change(87-05-28,Flegel), approve(87-06-23,MCR7649),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
                                                   END HISTORY COMMENTS */

/* INPUT PARAMETERS */
dcl p_buffer_size	       fixed bin (21) parameter;  /* Size of buffer */
dcl p_buffer_ptr	       ptr parameter;	    /* Buffer to fill */
dcl p_channel	       fixed bin;		    /* Channel ID */
dcl p_mio_data_ptr	       ptr parameter;	    /* mowse_io_ data */
dcl p_value	       fixed bin parameter;	    /* Value to be shifted */
dcl p_shift	       fixed bin parameter;	    /* Value to be shifted */
dcl p_packet_length	       fixed bin (21) parameter;  /* Packet length */
dcl p_chr		       char (1) parameter;	    /* Character to be CRCed */
dcl p_seed	       fixed bin parameter;	    /* Value 0 to 63 wich is the seed for the calculation */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl data_ptr	       ptr;
dcl rdatl		       fixed bin (21);	    /* Extracted data length */
dcl space		       fixed bin (21);	    /* Space remaining in user_input queue */
dcl buffer_size	       fixed bin (21);	    /* Local copy of buffer size */
dcl buffer_ptr	       ptr;		    /* Local copy of buffer pointer */
dcl mio_data_ptr	       ptr;		    /* mowse_io_ data pointer */
dcl channel	       fixed bin;		    /* Channel ID */
dcl i		       fixed bin;
dcl q		       fixed bin;		    /* Next quotient of division */
dcl b		       fixed bin;		    /* Bit counter */
dcl schr		       fixed bin;		    /* rank of crc shifted right 'b' times */
dcl crc		       fixed bin;		    /* Accumulator */

/* STRUCTURES */
dcl buffer	       char (buffer_size) based (buffer_ptr);
dcl 01 mio_data	       like mowse_io_data based (mio_data_ptr);

/* SYSTEM CALLS */

/* SYSTEM CALL SUPPORT */

/* EXTERNAL CALLS */
dcl ws_debug_$packet       entry (char (*), ptr, fixed bin (21), ptr);

/* EXTERNAL CALL SUPPORT */

/* BUILTINS */
dcl byte		       builtin;
dcl null		       builtin;
dcl length	       builtin;
dcl hbound	       builtin;
dcl bool		       builtin;
dcl unspec	       builtin;
dcl divide	       builtin;
dcl mod		       builtin;
dcl rank		       builtin;

/* CONDITIONS */

/* CONSTANTS */
dcl False		       bit (1) int static options (constant) init ("0"b);
dcl Exp2		       (0:16) fixed bin static options (constant)
		       init (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024,
		       2048, 4096, 8192, 1634, 3276, 65536);

/**/

/* INITIALIZATION */

/* MAIN */

	return;

/**/

%page;

/* INTERNAL ENTRIES */


/* *** Entry: ars - Internal entry for ws_tools_  *** */

ars:
     entry (p_value, p_shift) returns (fixed bin);


/* PROCEDURE FUNCTION

Arithmetic shift right.
*/

/* NOTES
*/

	return (divide (p_value, Exp2 (p_shift), 17, 0));

/**/

/* *** Entry: check_length - Internal entry for ws_tools_  *** */

check_length:
     entry (p_packet_length) returns (char (1));


/* ENTRY FUNCTION

Calculate the check length character.
*/

/* RETURNS:

chklen = (p_length & 077) + 32
*/

/* NOTES
*/

	return (byte (mod (p_packet_length, 64) + 32));

/**/

/* *** Entry: crc_char - Internal entry for ws_tools_  *** */

crc_char:
     entry (p_chr, p_seed) returns (fixed bin);


/* ENTRY FUNCTION

Calculate a 6-bit CRC for a character based on a generator polynomial of:
	x**6 + x**5 + x**2 + 1.
*/

/* RETURNS

A value in the range 0 through 63 which is the desired CRC.
*/

/* NOTES

The result of this function is the remainder produced by synthetic division
modulo 2 of a 7-bit integer (whose bits are the coefficients of the generator
polynomial) into a 14-bit integer (whose top 8 bits are those of the
character, in reverse order, and whose low 6 bits are the low 6 bits of the
seed).

The CRC for a string of characters is calculated by calling crc_chr' once for
each character in the block, from first character to last.  The seed for the
first character is 0 and the seed for each remaining character is the CRC
produced for the previous character.  The CRC produced for the last character
is the CRC for the whole string.
*/

	crc = p_seed;
	schr = rank (p_chr);

/* For each bit in the character
     - q = xor of low bits of crc and schr */

	do b = 0 to 7;
	     q = mod (crc + schr, 2);
	     crc = divide (crc, 2, 17);
	     if q ^= 0 then
		unspec (crc) =
		     bool (unspec (crc), unspec (REVPOLY), XOR);
	     schr = divide (schr, 2, 17);
	end;

	return (crc);

/**/

/* *** Entry: getdat - Internal entry for ws_tools_  *** */

getdat:
     entry (p_mio_data_ptr, p_channel, p_buffer_ptr, p_buffer_size)
	returns (fixed bin (21));

/* ENTRY FUNCTION

Retreive a packet of data from the packet queue on the specified channel.
Update all necessary control info related to the extraction.
*/

/* RETURNS

The amount of data extracted.
*/

/* NOTES
*/

	mio_data_ptr = p_mio_data_ptr;
	buffer_ptr = p_buffer_ptr;
	buffer_size = p_buffer_size;

/* If the received data queue is empty, there is nothing to do. */

	if mio_data.r.psn (p_channel) = mio_data.s.nasn (p_channel) then
	     return (0);

/* If Disconnect is active, return 0 */

	if mio_data.switches.disconnect_active then
	     return (0);

/* If the foreground channel, then make sure there is enough space in the
   user_input queue before getting it out */

	if p_channel = FG then do;

/* Calculate the amount of space in the input queue */

	     if mio_data.user_input.in >= mio_data.user_input.out then
		space = hbound (mio_data.user_input.queue, 1) -
		     mio_data.user_input.in
		     + mio_data.user_input.out - 1;
	     else
		space = mio_data.user_input.out
		     - mio_data.user_input.out - 1;

/* If not enough space then return 0 for length */

	     if space < length (mio_data.r.dat (FG, mio_data.s.nasn (FG)))
		then
		return (0);
	end;

/* Extract the data in the head element of the queue. */

	rdatl = length (mio_data.r.dat (p_channel, mio_data.s.nasn (p_channel)));
	buffer = mio_data.r.dat (p_channel, mio_data.s.nasn (p_channel));
	mio_data.s.nasn (p_channel) =
	     mod (mio_data.s.nasn (p_channel) + 1, SeqCnt);

	return (rdatl);

/**/

/* *** Entry: getldat - Internal entry for ws_tools_  *** */

getldat:
     entry (p_mio_data_ptr, p_channel, p_buffer_ptr)
	returns (fixed bin (21));


/* ENTRY FUNCTION

Get any available received data from the local queue.
*/

/* NOTES

Data is stored in Packet size packet size chunks to emulate what happens in
regards to remote packets, so they are extracted the same.
*/

	mio_data_ptr = p_mio_data_ptr;

/* If the recevied data queue is empty there is nothing to do */

	if mio_data.l_dat (p_channel).out_ptr = null then
	     return (0);

/* If Disconnect is active, return 0 */

	if mio_data.disconnect_active then
	     return (0);

/* Extract the data from the head element of the queue */

	p_buffer_ptr = mio_data.l_dat (p_channel).out_ptr -> local_data_node.data_ptr;
	rdatl = mio_data.l_dat (p_channel).out_ptr -> local_data_node.data_len;

/* Free the node from the queue */

	data_ptr = mio_data.l_dat (p_channel).out_ptr;
	if data_ptr -> local_data_node.next = null then do;
	     mio_data.l_dat (p_channel).in_ptr = null;
	     mio_data.l_dat (p_channel).out_ptr = null;
	end;
	else
	     mio_data.l_dat (p_channel).out_ptr =
		data_ptr -> local_data_node.next;

	free data_ptr -> local_data_node;
	data_ptr = null;

	if mio_data.debug_iocb_ptr ^= null then
	     call ws_debug_$packet ("R:L:DAT-->", p_buffer_ptr, rdatl,
		mio_data.debug_iocb_ptr);

	return (rdatl);

/**/

/* *** Entry: reset_data - Internal entry for ws_tools_  *** */

reset_data:
     entry (p_mio_data_ptr);


/* ENTRY FUNCTION

To initialize the flow control related variables of the protocol.
*/

/* NOTES
*/

	mio_data_ptr = p_mio_data_ptr;

/* Clear the receive packet queue */

	do i = 0 to RQS - 1;
	     mio_data.r.pkt (i) = "";
	end;
	mio_data.r.pktin = 0;
	mio_data.r.pktout = 0;

/* Clear the pending flags */

	mio_data.ds_pending (*) = False;

/* For each message channel */

	do channel = 0 to ChnCnt - 1;

/* Clear all receiving windows */

	     do i = 0 to SeqCnt - 1;
		mio_data.r.dat (channel, i) = "";
	     end;
	     mio_data.r.ignoring (channel) = False;
	     mio_data.r.asn (channel) = 0;
	     mio_data.r.psn (channel) = 0;

/* : - Clear all sending channels */

	     do i = 0 to SeqCnt - 1;
		mio_data.s.dat (channel, i) = "";
	     end;
	     mio_data.s.lasn (channel) = 0;
	     mio_data.s.nasn (channel) = 0;
	     mio_data.s.psn (channel) = 0;
	end;

	return;

/**/

%page;

/* INTERNAL PROCEDURES */

/**/

%page;

/* INCLUDE FILES */
%include mowse_io_structures;
%include mowse;
%include mowse_messages;
%include mowse_io_data;
%include mowse_io_constants;

     end ws_tools_;
