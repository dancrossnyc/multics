/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-07,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created to parse through command line options.
  2) change(86-09-19,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Support to accept up to 32 capabilities to be autoloaded (-start_up).
  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
  4) change(87-02-25,Flegel), approve(87-02-25,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Added the force and no_force arguments.
  5) change(87-03-24,Flegel), approve(87-03-24,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Added -escape (-esc) and -network (-net) arguments.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
startup_parser_:
     proc (p_mowse_arg_list_ptr, p_arg_count, p_init_mowse_info_ptr,
	p_string, p_code);

/* : PROGRAM FUNCTION

Parse command line arguements and fills out a structure containing
information gathered from the command line.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_mowse_arg_list_ptr   ptr;		    /* Pointer to command line arguement list */
dcl p_arg_count	       fixed bin;		    /* Number of command line arguements */
dcl p_init_mowse_info_ptr  ptr;		    /* Pointer to structure containing initialization information */



/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;  /* return code */
dcl p_string	       char (*) var parameter;    /* return string for error message */

/* MISC VARIABLES */
dcl esc_index	       fixed bin (35);	    /* Octal conversion result */
dcl startup_indx	       fixed bin;		    /* Next available slot in startup list */
dcl system_free_area_ptr   ptr;
dcl system_free_area       area based (system_free_area_ptr);
dcl arg_str	       char (arg_len) based (arg_ptr);
					    /* argument in command line */
dcl arg_ptr	       ptr;		    /* Pointer to an arguement */
dcl arg_len	       fixed bin (21);	    /* length of a command line arguement */
dcl arg_num	       fixed bin;		    /* mowse arguement number */

/* SYSTEM CALLS */
dcl cv_oct_check_	       entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl get_system_free_area_  entry () returns (ptr);
dcl cu_$arg_ptr_rel	       entry (fixed bin, ptr, fixed bin (21),
		       fixed bin (35), ptr);


/* SYSTEM CALL SUPPORT */
dcl ws_error_$invalid_escape_char fixed bin (35) ext static;
dcl error_table_$badopt    fixed bin (35) ext static;
dcl error_table_$noarg     fixed bin (35) ext static;


/* BUILTINS */
dcl null		       builtin;
dcl substr	       builtin;

/**/

/* INITIALIZATION */
	p_string = "";
	startup_indx = 1;
	p_code = 0;
	system_free_area_ptr = get_system_free_area_ ();

/* MAIN */
/* : Allocate init_mowse_info structure */

	allocate init_mowse_info in (system_free_area)
	     set (p_init_mowse_info_ptr);
	init_mowse_info_ptr = p_init_mowse_info_ptr;

	init_mowse_info.version = MOWSE_VERSION_;
	init_mowse_info.flags.trace_sw = "0"b;
	init_mowse_info.flags.debug_sw = "0"b;
	init_mowse_info.flags.io_switch_sw = "0"b;
	init_mowse_info.flags.force_sw = "0"b;
	init_mowse_info.flags.start_up_sw = "0"b;
	init_mowse_info.flags.escape_sw = "0"b;
	init_mowse_info.flags.network_sw = "0"b;
	init_mowse_info.escape.chars (*) = "0"b;
	init_mowse_info.trace = "";
	init_mowse_info.debug = "";
	init_mowse_info.io_switch = "";
	init_mowse_info.startup (*) = "";

	if p_mowse_arg_list_ptr = null then
	     return;

	if p_arg_count <= 0 then
	     return;

/* : Parse command line arguements and fill out strucure accordingly
     Return with error code set if there was an error in the arguements */

	arg_num = 1;
	do while (arg_num <= p_arg_count);
	     call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len, p_code,
		p_mowse_arg_list_ptr);

/* : - debug */

	     if substr (arg_str, 1, arg_len) = "-debug" then do;
		init_mowse_info.debug = "debug.mowse_io_";
		init_mowse_info.flags.debug_sw = "1"b;

		if arg_num < p_arg_count then do;
		     call cu_$arg_ptr_rel ((arg_num + 1), arg_ptr,
			arg_len, p_code, p_mowse_arg_list_ptr);

		     if substr (arg_str, 1, 1) ^= "-" then do;
			init_mowse_info.debug
			     = substr (arg_str, 1, arg_len)
			     || ".mowse_io_";
			arg_num = arg_num + 1;
		     end;
		end;
	     end;

/* : - no_debug */

	     else if substr (arg_str, 1, arg_len) = "-no_debug" then do;
		init_mowse_info.flags.debug_sw = "0"b;
		init_mowse_info.debug = "";
	     end;

/* : - escape */

	     else if substr (arg_str, 1, arg_len) = "-escape"
		| substr (arg_str, 1, arg_len) = "-esc"
	     then do;
		call cu_$arg_ptr_rel ((arg_num + 1), arg_ptr,
		     arg_len, p_code, p_mowse_arg_list_ptr);
		if p_code ^= 0 then
		     return;
		if arg_ptr = null then do;
		     p_code = error_table_$noarg;
		     return;
		end;
		if substr (arg_str, 1, 1) = "-" then do;
		     p_code = error_table_$noarg;
		     return;
		end;

		esc_index = cv_oct_check_ (arg_str, p_code);
		if p_code ^= 0 then do;
		     p_string = arg_str;
		     return;
		end;
		if esc_index < 0 | esc_index > 255 then do;
		     p_code = ws_error_$invalid_escape_char;
		     p_string = arg_str;
		     return;
		end;

		p_init_mowse_info_ptr
		     -> init_mowse_info.escape.chars (esc_index) = "1"b;
		p_init_mowse_info_ptr -> init_mowse_info.flags.escape_sw
		     = "1"b;
		arg_num = arg_num + 1;
	     end;

/* : - network */

	     else if substr (arg_str, 1, arg_len) = "-network"
		| substr (arg_str, 1, arg_len) = "-net"
	     then do;
		p_init_mowse_info_ptr -> init_mowse_info.flags.network_sw
		     = "1"b;
	     end;

/* : - trace */

	     else if substr (arg_str, 1, arg_len) = "-trace" then do;
		init_mowse_info.trace = "trace.mowse_io_";
		init_mowse_info.flags.trace_sw = "1"b;

		if arg_num < p_arg_count then do;
		     call cu_$arg_ptr_rel ((arg_num + 1), arg_ptr,
			arg_len, p_code, p_mowse_arg_list_ptr);

		     if substr (arg_str, 1, 1) ^= "-" then do;
			p_init_mowse_info_ptr -> init_mowse_info.trace =
			     substr (arg_str, 1, arg_len)
			     || ".mowse_io_";
			arg_num = arg_num + 1;
		     end;
		end;
	     end;

/* : - no_trace */

	     else if substr (arg_str, 1, arg_len) = "-no_trace" then do;
		init_mowse_info.flags.trace_sw = "0"b;
		init_mowse_info.trace = "";
	     end;

/* : - io_switch */

	     else if substr (arg_str, 1, arg_len) = "-io_switch"
		| substr (arg_str, 1, arg_len) = "-iosw" then do;

		arg_num = arg_num + 1;
		call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len,
		     p_code, p_mowse_arg_list_ptr);

		if arg_ptr = null then do;
		     p_code = error_table_$noarg;
		     p_string = "";
		     return;
		end;
		else if substr (arg_str, 1, 1) = "-" then do;
		     p_code = error_table_$noarg;
		     p_string = "";
		     return;
		end;

		init_mowse_info.flags.io_switch_sw = "1"b;
		init_mowse_info.io_switch = substr (arg_str, 1, arg_len);
	     end;

/* : - start_up */

	     else if substr (arg_str, 1, arg_len) = "-start_up"
		| substr (arg_str, 1, arg_len) = "-su" then do;

		arg_num = arg_num + 1;
		call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len,
		     p_code, p_mowse_arg_list_ptr);

		if arg_ptr = null then do;
		     p_code = error_table_$noarg;
		     p_string = "";
		     return;
		end;

		if substr (arg_str, 1, 1) = "-" then do;
		     p_code = error_table_$noarg;
		     p_string = "";
		     return;
		end;

		init_mowse_info.flags.start_up_sw = "1"b;
		if startup_indx
		     <= MAXIMUM_CAT_ENTRY - MINIMUM_CAT_ENTRY + 1
		then do;
		     init_mowse_info.startup (startup_indx) =
			substr (arg_str, 1, arg_len);
		     startup_indx = startup_indx + 1;
		end;
	     end;

/* : - no_start_up */

	     else if substr (arg_str, 1, arg_len) = "-no_start_up"
		| substr (arg_str, 1, arg_len) = "-nsu"
	     then do;
		init_mowse_info.flags.start_up_sw = "0"b;
		init_mowse_info.startup (1) = "";
	     end;

/* : - force */

	     else if substr (arg_str, 1, arg_len) = "-force"
		| substr (arg_str, 1, arg_len) = "-fc"
	     then do;
		init_mowse_info.flags.force_sw = "1"b;
	     end;

/* : -no_force */

	     else if substr (arg_str, 1, arg_len) = "-no_force"
		| substr (arg_str, 1, arg_len) = "-nfc"
	     then do;
		init_mowse_info.flags.force_sw = "0"b;
	     end;

/* : - Default */

	     else do;
		p_code = error_table_$badopt;
		p_string = substr (arg_str, 1, arg_len);
		return;
	     end;

	     arg_num = arg_num + 1;
	end;

%page;
/* INCLUDE FILES */
%include mowse;
%include mowse_info;

/* : END */
     end;
