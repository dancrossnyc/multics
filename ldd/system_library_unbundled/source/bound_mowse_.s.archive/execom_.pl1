/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-28,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
  3) change(86-12-10,Flegel), approve(86-12-10,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Replaced signalling of mowse_fatal_error with a call to fatal_mowse_trap_.
                                                   END HISTORY COMMENTS */
/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
execom_:
     proc (p_mcb_ptr, p_com_len, p_command, p_cmd_id, p_system,
	p_major_cap, p_ecode);

/* : PROGRAM FUNCTION

Handles EXECUTE_COMMAND messages sent to internal mowse from some system.
*/

/* : NOTES
*/


/* INPUT PARAMETERS */
dcl p_mcb_ptr	       ptr parameter;	    /* mowse mcb pointer */
dcl p_com_len	       fixed bin parameter;	    /* length of command */
dcl p_command	       char (*) parameter;	    /* command to be executed */
dcl p_cmd_id	       fixed bin parameter;	    /* unique command id */
dcl p_system	       fixed bin parameter;	    /* MOWSE system */
dcl p_major_cap	       fixed bin parameter;	    /* major capability number (index into CAT tables) */


/* OUTPUT PARAMETERS */
dcl p_ecode	       fixed bin (35);	    /* return code */


/* MISC VARIABLES */
dcl return_status	       fixed bin;		    /* status to be returned in reply message */
dcl dest_maj	       fixed bin;		    /* destination major capability */


/* STRUCTURES */
dcl 01 data,
       02 cmd_id	       fixed bin (17) unal,
       02 status	       char unal;


/* SYSTEM CALLS */
dcl send_msg_	       entry (ptr, fixed bin, fixed bin, ptr,
		       fixed bin, fixed bin, fixed bin (35));
dcl capability_$pack       entry (fixed bin, fixed bin, fixed bin,
		       fixed bin (35));
dcl cu_$cp	       entry (ptr, fixed bin (21), fixed bin (35));

/* EXTERNAL CALLS */
dcl fatal_mowse_trap_      entry (fixed bin (35));

/* EXTERNAL CALL SUPPORT */

/* BUILTINS */
dcl addr		       builtin;
dcl byte		       builtin;
dcl length	       builtin;

/* CONDITIONS */
dcl cleanup	       condition;


/**/
/* INITIALIZATION */
	p_ecode = 0;

	on cleanup
	     begin;
	     data.cmd_id = p_cmd_id;
	     data.status = byte (STATUS_FAILED);
	     call send_msg_ (p_mcb_ptr, dest_maj, EXECUTE_COMMAND_REPLY,
		addr (data), 3, BG, p_ecode);
	     if p_ecode ^= 0 then do;
		call fatal_mowse_trap_ (p_ecode);
		goto ERROR_RETURN;
	     end;
	end;

/* MAIN */

/* : Evaluate destination major first in case we blow up */

	call capability_$pack (p_system, p_major_cap, dest_maj, p_ecode);
	if p_ecode ^= 0 then do;
	     call fatal_mowse_trap_ (p_ecode);
	     return;
	end;

/* : Execute command */

	call cu_$cp (addr (p_command), length (p_command), p_ecode);

/* : if execution fails then
     - send a EXECUTE_COMMAND_REPLY message with the status = STAUS_FAILED
     - else send one with STATUS_SUCCESS.*/

	if p_ecode ^= 0 then
	     return_status = STATUS_FAILED;
	else
	     return_status = STATUS_SUCCESS;

	data.cmd_id = p_cmd_id;
	data.status = byte (return_status);

	call send_msg_ (p_mcb_ptr, dest_maj, EXECUTE_COMMAND_REPLY,
	     addr (data), 3, BG, p_ecode);
	if (p_ecode ^= 0) then do;
	     call fatal_mowse_trap_ (p_ecode);
	     return;
	end;

	return;

ERROR_RETURN:
	return;

%page;
/* INCLUDE FILES */
%include mowse;
%include mowse_messages;

/* : END */
     end;
