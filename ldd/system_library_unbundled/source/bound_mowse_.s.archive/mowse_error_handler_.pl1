/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-09-24,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
mowse_error_handler_:
     proc (p_mcb_ptr, p_cat_index, p_minor);


/* : PROGRAM FUNCTION

Clean up the CAT tables when an application experiences a fatal error.
*/

/* : NOTES
*/


/* INPUT PARAMETERS */
dcl p_mcb_ptr	       ptr;		    /* Pointer to caller mcb */
dcl p_cat_index	       fixed bin parameter;	    /* capabilitiy number of application */
dcl p_minor	       fixed bin parameter;	    /* minor to be executed */


/* OUTPUT PARAMETERS */


/* MISC VARIABLES */
dcl msg_len	       fixed bin;		    /* message length */
dcl msg_ptr	       ptr;		    /* condition message (not set since area is null) */
dcl cap_id	       fixed bin;		    /* capabilities index into CAT */
dcl cap_id_byte	       char;		    /* byte containing cap_id (char) */
dcl stack_ptr	       ptr;		    /*  Pointer to condition stack frame */
dcl code		       fixed bin (35);	    /* Error code */
dcl mowse_info_ptr	       ptr;		    /* Pointer to mowse info structure */
dcl 01 temp_mcb	       like mcb based (temp_mcb_ptr);
					    /* temporary mcb overlay */
dcl temp_mcb_ptr	       ptr;		    /* Pointer to temp mcb */
dcl temp_ptr	       ptr;		    /* Pointer to temporary buffers */
dcl temp_inbuff	       char (mowse_info_ptr
		       -> mowse_info.local_cat (p_cat_index).mcb_ptr
		       -> mcb.inbuff_data_length) based (temp_ptr);
					    /* temp buffer overlay */
dcl condition_message      char (1200) based (msg_ptr);
					    /* conditon message buffer */
dcl destination	       fixed bin;		    /* destination message */
dcl cap_name	       char (32) varying;	    /* capabilities name */
dcl system_free_area       area based (system_free_area_ptr);
					    /* area allocated in system space */
dcl system_free_area_ptr   ptr;		    /* Pointer to system free area */


/* STRUCTURES */


/* SYSTEM CALLS */
dcl ioa_$ioa_switch	       entry () options (variable);
dcl condition_interpreter_ entry (ptr, ptr, fixed bin, fixed bin, ptr,
		       char (*), ptr, ptr);
dcl ioa_		       entry () options (variable);
dcl find_condition_frame_  entry (ptr) returns (ptr);
dcl find_condition_info_   entry (ptr, ptr, fixed bin (35));
dcl get_system_free_area_  entry () returns (ptr);


/* SYSTEM CALL SUPPORT */


/* EXTERNAL CALLS */
dcl get_mowse_info_ptr_    entry (ptr, ptr, fixed bin (35));
dcl capability_$pack       entry (fixed bin, fixed bin, fixed bin,
		       fixed bin (35));
dcl send_msg_	       entry (ptr, fixed bin, fixed bin, ptr,
		       fixed bin, fixed bin, fixed bin (35));
dcl release_outbuffer_     entry (ptr);


/* EXTERNAL CALL SUPPORT */


/* BUILTINS */
dcl stackframeptr	       builtin;
dcl null		       builtin;
dcl addr		       builtin;
dcl byte		       builtin;
dcl substr	       builtin;


/* CONDITIONS */
dcl cleanup	       condition;


/* CONSTANTS */


/**/
/* INITIALIZATION */

	msg_ptr = null;
	stack_ptr = null;
	system_free_area_ptr = get_system_free_area_ ();
	condition_info_ptr = null;
	msg_len = -1;
	cap_id_byte = byte (p_cat_index);
	cap_id = p_cat_index;

	on cleanup
	     begin;
	     if condition_info_ptr ^= null then do;
		free condition_info_ptr -> condition_info;
		condition_info_ptr = null;
	     end;
	     if msg_ptr ^= null then do;
		free msg_ptr -> condition_message;
		msg_ptr = null;
	     end;
	end;

	allocate condition_info in (system_free_area)
	     set (condition_info_ptr);
	call get_mowse_info_ptr_ (p_mcb_ptr, mowse_info_ptr, code);

	if mowse_info_ptr -> mowse_info.mowse_flags.error_handled
	     ^= "0"b then
	     return;
	mowse_info_ptr -> mowse_info.mowse_flags.error_handled = "1"b;

/* : If MOWSE didn't catch that the major was invalid then
     indicatea fatal capability error */

	if p_cat_index < INTERNAL | p_cat_index > MAXIMUM_CAT_ENTRY
	then do;
	     call ioa_ ("^/MULTICS MOWSE:FATAL CAPABILITY ERROR [1]");
	     mowse_info_ptr -> mowse_info.mowse_flags.error_handled = "0"b;
	     return;
	end;

/* : If the p_cat_index is INTERNAL then initiate cleanup */

	if p_cat_index = INTERNAL then do;
	     call ioa_ ("^/MULTICS MOWSE:FATAL CAPABILITY ERROR [2]");
	     mowse_info_ptr -> mowse_info.mowse_flags.error_handled = "0"b;
	     return;
	end;

	if mowse_info_ptr -> mowse_info.local_cat (p_cat_index).mcb_ptr
	     = null
	then do;
	     call ioa_ ("^/MULTICS MOWSE:FATAL CAPABILITY ERROR [3]");
	     mowse_info_ptr -> mowse_info.mowse_flags.error_handled = "0"b;
	     return;
	end;

/* : else Free space allocated for application is system space */

	temp_ptr = mowse_info_ptr
	     -> mowse_info.local_cat (p_cat_index).mcb_ptr -> mcb.inbuff;

	if temp_ptr ^= null then do;
	     free temp_inbuff;
	     temp_ptr = null;
	     mowse_info_ptr
		-> mowse_info.local_cat (p_cat_index).mcb_ptr
		-> mcb.inbuff = null;
	end;

	call release_outbuffer_
	     (mowse_info_ptr -> mowse_info.local_cat (p_cat_index).mcb_ptr);

/* : Send a message to the remote system to update the CAT */

	cap_name = mowse_info_ptr
	     -> mowse_info.local_cat (p_cat_index).mcb_ptr
	     -> mcb.capability_name;

	call capability_$pack (REMOTE_SYSTEM, INTERNAL, destination,
	     code);
	call send_msg_
	     ((mowse_info_ptr -> mowse_info.local_cat (p_cat_index).mcb_ptr),
	     destination, DELETE_FROM_REMOTE_CAT, addr (cap_id_byte), 1, BG,
	     code);

/* : Send a background message to notify the user */

	stack_ptr = find_condition_frame_ (stackframeptr);
	call find_condition_info_ (stack_ptr, condition_info_ptr, code);
	if code ^= 0 | condition_info_ptr = null then do;
	     call ioa_ ("^/MULTICS MOWSE:FATAL CAPABILITY ERROR [4]");
	     mowse_info_ptr -> mowse_info.mowse_flags.error_handled = "0"b;
	     return;
	end;

	call condition_interpreter_ (system_free_area_ptr, msg_ptr,
	     msg_len, 1, condition_info_ptr -> condition_info.mc_ptr,
	     (condition_info_ptr -> condition_info.condition_name),
	     condition_info_ptr -> condition_info.wc_ptr,
	     condition_info_ptr -> condition_info.info_ptr);

	if msg_ptr ^= null then do;
	     call ioa_ ("^a",
		substr (msg_ptr -> condition_message, 1, msg_len));
	     if (mowse_info_ptr -> mowse_info.mowse_flags.trace = "1"b) then
		call ioa_$ioa_switch (mowse_info_ptr
		     -> mowse_info.mowse_flags.trace_file_iocb, "^a",
		     substr (msg_ptr -> condition_message, 1, msg_len));
	end;

	call ioa_ (
	     "MULTICS MOWSE: Terminating capability ^a [^d:^d:^d]",
	     cap_name, LOCAL_SYSTEM, p_cat_index, p_minor);
	if (mowse_info_ptr -> mowse_info.mowse_flags.trace = "1"b) then
	     call ioa_$ioa_switch (mowse_info_ptr
		-> mowse_info.mowse_flags.trace_file_iocb,
		"MULTICS MOWSE: Terminating capability ^a [cap_num = ^d] on minor ^d",
		cap_name, p_cat_index, p_minor);

/* Free the memory associated with the mcb */

	if p_cat_index > INTERNAL & p_cat_index <= MAXIMUM_CAT_ENTRY then do;
	     temp_mcb_ptr = mowse_info_ptr
		-> mowse_info.local_cat (p_cat_index).mcb_ptr;
	     if temp_mcb_ptr ^= null then do;
		free temp_mcb;
		temp_mcb_ptr = null;
		mowse_info_ptr
		     -> mowse_info.local_cat (p_cat_index).mcb_ptr = null;
	     end;
	end;

	free condition_info_ptr -> condition_info;
	condition_info_ptr = null;
	if msg_ptr ^= null then do;
	     free msg_ptr -> condition_message;
	     condition_info_ptr = null;
	end;
	mowse_info_ptr -> mowse_info.mowse_flags.error_handled = "0"b;

%page;
/* INCLUDE FILES */
%include condition_info;
%include mowse;
%include mowse_info;
%include mowse_mcb;
%include mowse_messages;

/* : END */
     end;
