/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-11-20,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
  3) change(86-12-10,Flegel), approve(86-12-10,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Replaced signalling of mowse_fatal_error with a call to fatal_mowse_trap_.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
internal_connect_request_:
     proc (p_mcb_ptr, p_message_ptr, p_message_len, p_code);

/* PROGRAM FUNCTION

If the destination capability already exists, then simply pass on the message
to it.  Otherwise, create it and then pass on the message to it.  If the
creation fails, then return FAIL to the source of the request in the
connect_response message.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_mcb_ptr	       ptr parameter;	    /* MOWSE's MCB */
dcl p_message_ptr	       ptr parameter;	    /* Message */
dcl p_message_len	       fixed bin parameter;	    /* Length of message */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;


/* MISC VARIABLES */
dcl cap_num	       fixed bin;		    /* Capability_number */
dcl sysid		       fixed bin;		    /* System id */
dcl return_status	       char (1);		    /* SUCCESS/REJECT of connect */
dcl destination	       fixed bin;		    /* Destination of reply */
dcl major_num	       fixed bin;		    /* Number of the destination capability */
dcl capname_len	       fixed bin;		    /* Length of capability name */
dcl capname	       char (CAPABILITY_NAME_LENGTH);
					    /* Name of capability to connect to */
dcl connect_request_string char (MAXIMUM_PACKET_SIZE);
					    /* Message data */
dcl blkpos	       fixed bin;		    /* End of capability name */


/* STRUCTURES */


/* SYSTEM CALLS */
dcl cu_$cp	       entry (ptr, fixed bin (21), fixed bin (35));


/* SYSTEM CALL SUPPORT */


/* EXTERNAL CALLS */
dcl capability_$unpack     entry (fixed bin, fixed bin, fixed bin,
		       fixed bin (35));
dcl send_mowse_message_    entry (ptr, fixed bin, fixed bin, fixed bin,
		       fixed bin, fixed bin,
		       fixed bin, ptr, fixed bin, fixed bin,
		       fixed bin (35));
dcl send_msg_	       entry (ptr, fixed bin, fixed bin, ptr, fixed bin,
		       fixed bin, fixed bin (35));
dcl ws_$put_background_message
		       entry () options (variable);
dcl capability_$pack       entry (fixed bin, fixed bin, fixed bin,
		       fixed bin (35));
dcl ws_$find_capability_number
		       entry (char (*), fixed bin, fixed bin,
		       fixed bin (35));
dcl fatal_mowse_trap_      entry (fixed bin (35));

/* EXTERNAL CALL SUPPORT */


/* BUILTINS */
dcl null		       builtin;
dcl byte		       builtin;
dcl index		       builtin;
dcl min		       builtin;
dcl substr	       builtin;
dcl addr		       builtin;
dcl rank		       builtin;


/* CONDITIONS */


/* CONSTANTS */


/**/
/* INITIALIZATION */


/* MAIN */

/* : Extract the name of the capability */

	message_len = p_message_len;
	connect_request_string =
	     p_message_ptr -> last_message.data.data_buf;
	blkpos = index (connect_request_string, " ");
	if blkpos ^= 0 then
	     capname_len = min (blkpos - 1, CAPABILITY_NAME_LENGTH);
	else
	     capname_len = min (p_message_len - 5, CAPABILITY_NAME_LENGTH);
	capname = substr (connect_request_string, 1, capname_len);

/* : Try to find the capability to which connection is requested
     - If it is not found the try to create it */

	call ws_$find_capability_number (substr (capname, 1, capname_len),
	     LOCAL_SYSTEM, major_num, p_code);
	if p_code ^= 0 then do;
	     call cu_$cp (addr (connect_request_string), p_message_len - 5,
		p_code);
	     if p_code = 0 then
		call ws_$find_capability_number (
		     substr (capname, 1, capname_len), LOCAL_SYSTEM,
		     major_num, p_code);
	end;

/* : - If it cannot be created then send message to the capability requesting
       the connect that it has failed */

	if p_code ^= 0 then do;
	     call capability_$pack (
		rank (p_message_ptr -> last_message.header.source_system),
		rank (p_message_ptr -> last_message.header.source_major),
		destination, p_code);
	     if p_code ^= 0 then do;
		call ws_$put_background_message (p_mcb_ptr, p_code,
		     "MULTICS MOWSE",
		     "Request connect from invalid source");
		p_code = 0;
		return;
	     end;
	     return_status = byte (REJECT);
	     call send_msg_ (p_mcb_ptr, destination, RESPONSE_CONNECT,
		addr (return_status), 1, BG, p_code);
	     if p_code ^= 0 then do;
		call fatal_mowse_trap_ (p_code);
		return;
	     end;
	     return;
	end;

/* : - Otherwise send a request connect to the capability */

	call capability_$unpack (sysid, cap_num, major_num, p_code);
	if p_code ^= 0 then do;
	     call fatal_mowse_trap_ (p_code);
	     return;
	end;
	call send_mowse_message_ (p_mcb_ptr,
	     rank (p_message_ptr -> last_message.header.source_system),
	     rank (p_message_ptr -> last_message.header.source_major),
	     sysid, cap_num, REQUEST_CONNECT, LAST, null, 0, BG, p_code);
	if p_code ^= 0 then do;
	     call fatal_mowse_trap_ (p_code);
	     return;
	end;

	return;

%page;
/* INCLUDE FILES */
%include mowse_info;
%include mowse_messages;
%include mowse;

     end;
