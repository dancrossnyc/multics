/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-05-15,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-07-12,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Minor revisions.
  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */
/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
capability_:
     proc ();

/* : PROGRAM FUNCTION

Contains two entry points:

	pack:   Converts a MOWSE system id and a capability number
                  into a single fixed bin value (major_capability).
          unpack: Convert a major_capability back into the system id
	        and the capability number.
*/

/* : NOTES
*/

/* INPUT PARAMETERS */
dcl p_system_id	       fixed bin parameter;	    /* MOWSE sytem id */
dcl p_major_capability     fixed bin parameter;	    /* Major capability id */
dcl p_major_number	       fixed bin parameter;	    /* CAT index of capability */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);


/* MISC VARIABLES */
dcl fixed8	       fixed bin (8) based;	    /* Dummy for convert */
dcl fixed17	       fixed bin (17) based;	    /* Dummey for convert */
dcl major_ptr	       ptr;		    /* Pointer to p_major_capability */
dcl major		       fixed bin (35);	    /* Temporary major_capability (packed) */


/* SYSTEM CALL SUPPORT */
dcl ws_error_$invalid_system_id
		       fixed bin (35) ext static;
dcl ws_error_$invalid_capability_number
		       fixed bin (35) ext static;

/* STRUCTURES */
dcl 01 major_overlay       unaligned based (major_ptr),
       02 pad	       bit (18),
       02 system	       fixed bin (8),
       02 index	       fixed bin (8);

/* BUILTINS */
dcl addr		       builtin;
dcl convert	       builtin;

/* MAIN */
	return;

/**/

/* : Pack: */
pack:
     entry (p_system_id, p_major_number, p_major_capability, p_code);

	p_code = 0;
	major = 0;
	major_ptr = addr (major);

/* : If major_capability_number is invalid */

	if (p_major_number < INTERNAL)
	     | (p_major_number > MAXIMUM_CAT_ENTRY) then do;

	     p_code = ws_error_$invalid_capability_number;
	     return;
	end;

/* : If p_system_id is invalid */

	if (p_system_id ^= REMOTE_SYSTEM) & (p_system_id ^= LOCAL_SYSTEM)
	then do;
	     p_code = ws_error_$invalid_system_id;
	     return;
	end;

/* : pack the system id and major number */

	major_overlay.system = convert (fixed8, p_system_id);
	major_overlay.index = convert (fixed8, p_major_number);
	p_major_capability = convert (fixed17, major);
	return;

/**/

/* : Unpack: */
unpack:
     entry (p_system_id, p_major_number, p_major_capability, p_code);

	p_code = 0;
	major = p_major_capability;
	major_ptr = addr (major);

/* : Check that the unpacked fields are correct */

	if (major_overlay.system ^= LOCAL_SYSTEM
	     & major_overlay.system ^= REMOTE_SYSTEM)
	     | (major_overlay.index < INTERNAL
	     | major_overlay.index > MAXIMUM_CAT_ENTRY) then

	     p_code = ws_error_$invalid_capability_number;

	else do;
	     p_major_number = major_overlay.index;
	     p_system_id = major_overlay.system;
	end;
	return;

%page;
/* INCLUDE FILES */
%include "mowse";
%include "mowse_info";

/* : END */
     end capability_;
