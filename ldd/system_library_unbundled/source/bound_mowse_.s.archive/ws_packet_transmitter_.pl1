/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
ws_packet_transmitter_:
     proc ();


/* PROGRAM FUNCTION

This procedure is responsible for the transmission of data to the PC.  Such
data consists of all BG and FG data packets and supervisory packets.

There are a number of means of entry into this procedure: one is through direct
procedure calls from a timeout handler, the packet receiver (for supervisory
packet transmission) and the I/O interface; also this procedure may be
required to block due to a data transmission window being full, in this case
then it awaits a wakeup on the event wait channel from the packet receiver
when the window has opened up.
*/


/* NOTES
*/

/****^  HISTORY COMMENTS:
  1) change(87-04-16,Flegel), approve(87-06-23,MCR7649),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(88-11-08,Flegel), approve(88-11-16,MCR8023), audit(88-12-12,Lee),
     install(89-01-24,MR12.3-1012):
     phx21215 - Added support for a foreground event channel upon which
                events are transmitted when foreground data has finished
                transmission.
                                                   END HISTORY COMMENTS */

/* INPUT PARAMETERS */
dcl p_type	       char (1) parameter;	    /* Packet type field */
dcl p_open_struc_ptr       ptr parameter;	    /* User specified control settings */
dcl p_mio_data_ptr	       ptr parameter;	    /* mowse_io_data */
dcl p_minor	       fixed bin parameter;	    /* Minor capability number */
dcl p_channel	       fixed bin parameter;	    /* Channel type */
dcl p_data_ptr	       ptr parameter;	    /* Data buffer pointer */
dcl p_data_len	       fixed bin (21) parameter;  /* Data length */

/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;

/* MISC VARIABLES */
dcl psn		       fixed bin;		    /* Packet sequence number */
dcl type		       char (1);		    /* Packet type */
dcl i		       fixed bin (21);
dcl mio_data_ptr	       ptr;		    /* mowse_io_ data */

/* STRUCTURES */
dcl 01 mio_data	       like mowse_io_data based (mio_data_ptr);

/* SYSTEM CALLS */
dcl hcs_$wakeup	       entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl ipc_$unmask_ev_calls   entry (fixed bin (35));
dcl ipc_$mask_ev_calls     entry (fixed bin (35));
dcl ipc_$delete_ev_chn     entry (fixed bin (71), fixed bin (35));
dcl get_system_free_area_  entry () returns (ptr);
dcl ipc_$create_ev_chn     entry (fixed bin (71), fixed bin (35));
dcl hcs_$reset_ips_mask    entry (bit (36) aligned, bit (36) aligned);
dcl iox_$put_chars	       entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl hcs_$set_ips_mask      entry (bit (36) aligned, bit (36) aligned);

/* SYSTEM CALL SUPPORT */

/* EXTERNAL CALLS */
dcl ws_debug_$line	       entry () options (variable);
dcl ws_channel_$call_wakeup entry (ptr, fixed bin (71));
dcl ws_timer_$reset_reset  entry options (variable);
dcl ws_timer_$reset_sender entry (fixed bin);
dcl ws_channel_$wait_block entry (ptr, ptr, char (*), ptr);
dcl ws_tools_$reset_data   entry (ptr);
dcl ws_tools_$ars	       entry (fixed bin, fixed bin) returns (fixed bin);
dcl ws_tools_$check_length entry (fixed bin (21)) returns (char (1));
dcl ws_tools_$crc_char     entry (char (1), fixed bin) returns (fixed bin);
dcl ws_debug_$packet       entry (char (*), ptr, fixed bin (21), ptr);
dcl ws_channel_$wait_wakeup entry (ptr, ptr);

/* EXTERNAL CALL SUPPORT */

/* BUILTINS */
dcl translate	       builtin;
dcl substr	       builtin;
dcl addr		       builtin;
dcl bool		       builtin;
dcl null		       builtin;
dcl unspec	       builtin;
dcl length	       builtin;
dcl rank		       builtin;
dcl mod		       builtin;
dcl byte		       builtin;

/* CONDITIONS */
dcl mowse_io_error	       condition;

/* CONSTANTS */
dcl EscKey	       (0:2) bit (9) int static options (constant) init ("100"b3, "200"b3, "300"b3);
dcl GrpEscIdx	       (0:7) fixed bin int static options (constant) init (0, -1, -1, 0, 2, 1, 1, 2);
dcl False		       bit (1) int static options (constant) init ("0"b);
dcl True		       bit (1) int static options (constant) init ("1"b);
dcl Null_Convert	       fixed bin (8) int static options (constant) init (20);

/**/

/* INITIALIZATION */

/* MAIN */

	return;

/**/

%page;

/* INTERNAL ENTRIES */


/* *** Entry: ack - Internal entry for ws_packet_transmitter_  *** */

ack:
     entry (p_channel, p_mio_data_ptr);


/* ENTRY FUNCTION

Send an ack-packet to the remote.
*/

/* NOTES
*/

	call setup_entry ();

	type = byte ((p_channel * SeqCnt) + mio_data.s.nasn (p_channel)
	     + AckOff);
	call send_packet (type, "");
	mio_data.s.lasn (p_channel) = mio_data.s.nasn (p_channel);

	return;

/**/

/* *** Entry: data - Internal entry for ws_packet_transmitter_  *** */

data:
     entry (p_mio_data_ptr, p_channel, p_data_ptr, p_data_len, p_minor);


/* ENTRY FUNCTION

Transmit a data packet to the remote (PC).  This includes inserting control
and maintaining transmit packet Queues.
*/

/* NOTES
*/

	call setup_entry ();

	call send_data (p_channel, p_data_ptr, p_data_len, p_minor);

/* MF - phx21215 - Send an event on the foreground channel to signal
 * completion
 */
	if p_channel = FG then do;
	     call hcs_$wakeup (mio_data.channel_info.process_id,
		mio_data.channel_info.foreground.channel, 0, (0));
	end;

	return;

/**/

/* *** Entry: initialize - Internal entry for ws_packet_transmitter_  *** */

initialize:
     entry (p_mio_data_ptr, p_open_struc_ptr, p_code);


/* ENTRY FUNCTION

Initialize all pertinent data in the mowse_io_data which is used by the
packet transmitter.
*/

/* NOTES
*/

	call setup_entry ();

	open_struc_ptr = p_open_struc_ptr;

/* Create a wait channel for blocking */

	mio_data.channel_info.packet_transmitter.channel = 0;
	mio_data.channel_info.packet_transmitter.count = 0;
	mio_data.channel_info.packet_transmitter.flags.transmitted = False;
	call ipc_$create_ev_chn (
	     mio_data.channel_info.packet_transmitter.channel, p_code);
	if p_code ^= 0 then
	     return;

/* Initialize transmitter control variables */

	mio_data.r.asn (*) = 0;

	if open_struc_ptr ^= null then
	     if open_struc.flags.network_sw then
		mio_data.s.eop = CR;
	     else
		mio_data.s.eop = LF;

	mio_data.s.sop = SOH;
	mio_data.s.esc (0) = ESC;
	mio_data.s.esc (1) = SI;
	mio_data.s.esc (2) = SO;
	mio_data.s.psn (*) = 0;
	mio_data.s.lasn (*) = 0;
	mio_data.s.nasn (*) = 0;
	mio_data.s.dat (*, *) = "";

	mio_data.s.escreq (*) = False;
	mio_data.s.escreq (Null_Convert) = True;
	mio_data.s.escreq (rank (SOH)) = True;
	mio_data.s.escreq (rank (ESC)) = True;
	mio_data.s.escreq (rank (SI)) = True;
	mio_data.s.escreq (rank (SO)) = True;
	mio_data.s.escreq (rank (mio_data.s.eop)) = True;
	do i = 128 to 255;
	     mio_data.s.escreq (i) = True;
	end;
	if open_struc_ptr ^= null then
	     if open_struc.flags.escape_sw then
		mio_data.s.escreq
		     = bool (mio_data.s.escreq, open_struc.escape.switches,
		     OR);

	return;

/**/

/* *** Entry: local_data - Internal entry for ws_packet_transmitter_  *** */

local_data:
     entry (p_mio_data_ptr, p_channel, p_data_ptr, p_data_len, p_minor);


/* ENTRY FUNCTION

To queue data to send to the local system.
*/

/* NOTES

Messages are stored in packet_size chunks as a linked list of pending packets.
*/

	call setup_entry ();

	call send_local_data (p_channel, p_data_ptr, p_data_len, p_minor);

	return;

/**/

/* *** Entry: nak - Internal entry for ws_packet_transmitter_  *** */

nak:
     entry (p_channel, p_mio_data_ptr);


/* ENTRY FUNCTION

Send a Nak-packet to the remote.
*/

/* NOTES
*/

	call setup_entry ();

	type = byte ((p_channel * SeqCnt) + mio_data.s.nasn (p_channel)
	     + NakOff);
	call send_packet (type, "");

	return;

/**/

/* *** Entry: resend - Internal entry for ws_packet_transmitter_  *** */

resend:
     entry (p_mio_data_ptr, p_channel);


/* ENTRY FUNCTION

Resend all unacknowledged packets on the specified channel.
*/

/* NOTES
*/

	call setup_entry ();

/* For each of the packet numbers on the specified channel */

	do psn = mio_data.r.asn (p_channel) repeat mod (psn + 1, SeqCnt)
	     while (psn ^= mio_data.s.psn (p_channel));

/* - Determine the type of the packet to be resent */

	     if mio_data.debug_iocb_ptr ^= null then
		call ws_debug_$line (mio_data.debug_iocb_ptr, "resend");

	     type = byte ((((p_channel * SeqCnt) + psn) * SeqCnt)
		+ mio_data.s.nasn (p_channel) + DatOff);

/* - Send the packet again */

	     call send_packet (type, mio_data.s.dat (p_channel, psn));
	     mio_data.s.lasn (p_channel) = mio_data.s.nasn (p_channel);
	     call ws_timer_$reset_sender (p_channel);
	end;

	return;

/**/

/* *** Entry: reset - Internal entry for ws_packet_transmitter_  *** */

reset:
     entry (p_mio_data_ptr);


/* ENTRY FUNCTION

Send a reset packet.
*/

/* NOTES

Reset will reset both foreground and background channels and block the sending
and receiving of data (except the reset confirm) until confirmation has been
received from the PC.
*/

	mio_data_ptr = p_mio_data_ptr;

/* If currently resetting, ignore */

	if mio_data.rs_pending (1) | mio_data.rs_pending (2) then
	     return;

/* Send the reset request packet */

	mio_data.rs_pending (1) = True;
	call ws_tools_$reset_data (mio_data_ptr);
	call send_packet (byte (RstOff + Request), "");
	call ws_timer_$reset_reset ();
	return;

/**/

/* *** Entry: supervisory - Internal entry for ws_packet_transmitter_  *** */

supervisory:
     entry (p_mio_data_ptr, p_type);


/* ENTRY FUNCTION

Given a packet type, send the packet to the remote.  The packet contains NO
data and the type field is assumed to be valid for the complete packet.
*/

/* NOTES
*/

	call setup_entry ();

	call send_packet (p_type, "");

	return;

/**/

/* *** Entry: terminate - Internal entry for ws_packet_transmitter_  *** */

terminate:
     entry (p_mio_data_ptr);


/* ENTRY FUNCTION

Terminate all necessary items to the transmitter.
*/

/* NOTES
*/

	call setup_entry ();

	if mio_data.channel_info.packet_transmitter.channel ^= 0 then do;
	     call ipc_$delete_ev_chn (
		mio_data.channel_info.packet_transmitter.channel, (0));
	     mio_data.channel_info.packet_transmitter.count = 0;
	end;

	return;

/**/

%page;

/* INTERNAL PROCEDURES */


/* *** Procedure: send_data - Internal proc for ws_packet_transmitter_  *** */

send_data:
     proc (p_channel, p_data_ptr, p_data_len, p_minor);


/* PROCEDURE FUNCTION

To queue and send data to the remote.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_channel	       fixed bin parameter;	    /* FG or BG channel */
dcl p_data_ptr	       ptr parameter;	    /* Data */
dcl p_data_len	       fixed bin (21) parameter;  /* Data length */
dcl p_minor	       fixed bin parameter;	    /* Minor capability of data */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl type		       char (1);		    /* Packet type */
dcl send_data_ptr	       ptr;		    /* Ptr to data packet */
dcl send_psn	       fixed bin;		    /* Temporary send packet SN */
dcl new_length	       fixed bin (21);	    /* New length of data */
dcl i		       fixed bin (21);
dcl reset_write_flag       bit (1);		    /* resetwrite state on entry */
dcl minor		       fixed bin;		    /* Local copy of minor */

/* STRUCTURES */
dcl data		       char (p_data_len) based (p_data_ptr);
dcl out_data	       char (MaxDatLen) var based (send_data_ptr); /* Data to transmit */

/* INITIALIZATION */
	minor = p_minor;
	reset_write_flag = mio_data.switches.reset_write;

/* MAIN */

/* Return if we are disconnecting */

	if mio_data.switches.disconnect_active then
	     return;

/* Wait while a reset is going on */

	do while (mio_data.switches.rs_pending (1)
	     | mio_data.switches.rs_pending (2));

	     call ws_channel_$wait_block (mio_data_ptr,
		addr (mio_data.channel_info.packet_transmitter),
		"packet_transmitter (send_data-1)",
		mio_data.debug_iocb_ptr);
	end;

/* Build and send packets until all data is sent. */

	i = 0;
	do while (i < p_data_len);

/* Resetwrite is tested, however, we can do nothing about it for now.  This
   section is left in case future development requires something to be done
   with resetwrite */

	     if mio_data.switches.reset_write & ^reset_write_flag
		& (p_channel = FG)
	     then do;
		mio_data.reset_write = False;
	     end;

/* If a break has started, then quit sending the current stream and return */

	     if mio_data.brk_pending & p_channel = FG
		& p_minor = FG_TERMINAL_DATA
		then
		return;

/* Determine amount of data to be sent in the next packet; it is the
   smaller of what is left and MaxDatLen. */

	     new_length = p_data_len - i;
	     if new_length > MaxDatLen then
		new_length = MaxDatLen - 1;

/* If the send data queue is full we must wait until it opens before
   making our new data visible by updating the packet sequence number.
   - Block until something is read from tty_ */

	     do while (
		mod (mio_data.s.psn (p_channel) - mio_data.r.asn (p_channel),
		SeqCnt) >= SWS);

		call ws_channel_$wait_block (mio_data_ptr,
		     addr (mio_data.channel_info.packet_transmitter),
		     "packet_transmitter (send_data-2)",
		     mio_data.debug_iocb_ptr);
	     end;

/* Save the data in the next slot of the send data queue. */

	     call ipc_$mask_ev_calls ((0));

	     send_psn = mio_data.s.psn (p_channel);
	     mio_data.s.psn (p_channel) = mod (send_psn + 1, SeqCnt);

	     send_data_ptr = addr (mio_data.s.dat (p_channel, send_psn));
	     if minor = FG_CONTROL_MESSAGE | minor = FG_TERMINAL_DATA
		| minor = FG_BREAK
		then
		out_data
		     = byte (minor) || substr (data, i + 1, new_length);
	     else
		out_data = substr (data, i + 1, new_length);

	     i = i + new_length;

/* Send the data and reset the resend timer. */

	     type = byte ((((p_channel * SeqCnt) + send_psn) * SeqCnt) +
		mio_data.s.nasn (p_channel) + DatOff);
	     call send_packet (type, out_data);
	     mio_data.s.lasn (p_channel) = mio_data.s.nasn (p_channel);

	     call ipc_$unmask_ev_calls ((0));

	     call ws_timer_$reset_sender (p_channel);
	end;

/* Open up the blocking channel in case anything is awaiting */

	call ws_channel_$wait_wakeup (mio_data_ptr,
	     addr (mio_data.channel_info.packet_transmitter));

     end send_data;

/**/

/* *** Procedure: send_local_data - Internal proc for ws_packet_transmitter_  *** */

send_local_data:
     proc (p_channel, p_data_ptr, p_data_len, p_minor);


/* PROCEDURE FUNCTION

To queue data to send between local applications.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_channel	       fixed bin parameter;	    /*  Channel ID */
dcl p_data_ptr	       ptr parameter;	    /* Data */
dcl p_data_len	       fixed bin (21) parameter;  /* Length of data */
dcl p_minor	       fixed bin parameter;	    /* Minor capability number */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl data_ptr	       ptr;
dcl p_data	       char (p_data_len) based (p_data_ptr);
dcl data		       char (p_data_len) based (data_ptr); /* Data descriptor */
dcl node_ptr	       ptr;
dcl system_free_area_ptr   ptr;
dcl system_free_area       area based (system_free_area_ptr);

/* STRUCTURES */

/* INITIALIZATION */
	system_free_area_ptr = get_system_free_area_ ();

/* MAIN */

/* No data, return */

	if p_data_ptr = null | p_data_len <= 0 then
	     return;

/* Allocate a node for message */

	allocate local_data_node in (system_free_area) set (node_ptr);
	node_ptr -> local_data_node.next = null;

/* Allocate space for data */

	allocate data in (system_free_area) set (data_ptr);
	data = p_data;
	node_ptr -> local_data_node.data_ptr = data_ptr;
	node_ptr -> local_data_node.data_len = p_data_len;

/* Debugging info */

	if mio_data.debug_iocb_ptr ^= null then
	     call ws_debug_$packet ("S:L:DAT-->",
		node_ptr -> local_data_node.data_ptr, p_data_len,
		mio_data.debug_iocb_ptr);

/* Message queue currently empty? put at in_ptr position */

	if mio_data.l_dat (p_channel).in_ptr = null then do;
	     mio_data.l_dat (p_channel).in_ptr = node_ptr;
	     mio_data.l_dat (p_channel).out_ptr = node_ptr;
	end;

/* Insert somewhere else in queue */

	else do;
	     mio_data.l_dat (p_channel).in_ptr -> local_data_node.next
		= node_ptr;
	     mio_data.l_dat (p_channel).in_ptr = node_ptr;
	end;

/* Process the message if there is NO background processing going on */

	if ^mio_data.task.active (BG_task)
	     & mio_data.l_dat (BG).out_ptr ^= null
	     then
	     call ws_channel_$call_wakeup (mio_data_ptr,
		mio_data.channel_info.packet_dispatcher.async_channel);

     end send_local_data;

/**/

/* *** Procedure: send_modem_string - Internal proc for ws_packet_transmitter_  *** */

send_modem_string:
     proc (p_string_ptr, p_string_len);


/* PROCEDURE FUNCTION

Send a string of characters to the remote.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_string_ptr	       ptr parameter;	    /* String pointer to transmit */
dcl p_string_len	       fixed bin (21) parameter;  /* String length to transmit */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl mask		       bit (36) aligned;	    /* IPS mask */
dcl code		       fixed bin (35);
dcl buffer	       char (p_string_len);	    /* Conversion buffer for NULL converted */

/* STRUCTURES */
dcl packet_buffer	       char (p_string_len) based (p_string_ptr);

/* INITIALIZATION */

/* MAIN */

/* : Convert all NULL characters to another character as the PC is ignoring
     these */

	buffer = translate (packet_buffer, byte (Null_Convert), byte (0));

/* : Put the modem string out */

	call hcs_$set_ips_mask (""b, mask);
	call iox_$put_chars (mio_data.iocb_ptr, addr (buffer), p_string_len,
	     code);
	call hcs_$reset_ips_mask (mask, mask);

	if code ^= 0 then do;
	     signal mowse_io_error;
	     return;
	end;
     end send_modem_string;

/**/

/* *** Procedure: send_packet - Internal proc for ws_packet_transmitter_  *** */

send_packet:
     proc (p_type, p_data);


/* PROCEDURE FUNCTION

To send a packet to the remote.
*/

/* NOTES

The packet to be sent is built in the local buffer 'pkt' and then sent to
the remote all at once.  The space required for this buffer could be saved
if the packet were sent to the remote a character at a time.  This was not
done because the time to execute a call to the routine that sends data to
the remote is greater than that to add a character to a buffer, and because
to send the packet in pieces would require that interrupts be inhibited for
the duration of the execution of 'sndpkt' in order to prevent it from being
re-entered.

Data outside the range ' ' through '_' for which the corresponding element
of 's_escreq' is set is replaced in the packet by a two character escape
sequence consisting of an element of the array "s_ESC" followed by a
printable ASCII character between ' ' and '_'.  These two characters are
chosen such that the exclusive-or of the second with 64 times the ordinal
in 's_ESC' of the first yields the character they represent.

        eg. <\000> => <esc>< >

The replacement of data characters via two character escape sequences has
no effect upon the checksum of the packet:  The checksum is calculated
using the original data characters rather than those actually sent in the
data field of the packet.  This allows the receiver of the packet to revert
escape sequences as soon as they are encountered.
*/

/* INPUT PARAMETERS */
dcl p_type	       char (1) parameter;	    /* Packet type */
dcl p_data	       char (*) var parameter;    /* Packet data to be sent */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl escidx	       fixed bin;		    /* Escape table index */
dcl group		       fixed bin;		    /* Escape group number */
dcl type		       fixed bin (8);	    /* Packet type converted */
dcl i		       fixed bin (21);
dcl crc		       fixed bin;		    /* CRC control char */
dcl chr		       fixed bin (8) unal;	    /* 8-bit character translations */
dcl data_len	       fixed bin (21);	    /* Length of packet data */
dcl packet_len	       fixed bin (21);	    /* Length of packet to send */
dcl packet	       (0:MinPktLen + 2 * MaxDatLen - 1) char (1); /* Sending packet */

/* STRUCTURES */

/* INITIALIZATION */
	crc = 0;

/* MAIN */

/* If disconnect is in progress and the packet type is not DisCon, don't
   send the message */

	if (mio_data.ds_pending (1) | mio_data.ds_pending (2))
	     & (rank (p_type) ^= DisCon + Request
	     & rank (p_type) ^= DisCon + Confirm)
	     then
	     return;

/* Assemble the packet.  Insert escape sequences as required. */

	packet (0) = mio_data.s.sop;
	packet (1) = p_type;
	packet_len = 2;
	crc = ws_tools_$crc_char (packet (0), INIT_CRC);
	crc = ws_tools_$crc_char (packet (1), crc);
	data_len = length (p_data);

/* For each character */

	do i = 1 to data_len;

/* - Build the checksum (make sure that the p_data character will fit into
       8 bits) */

	     unspec (chr) = bool (unspec (substr (p_data, i, 1)),
		"011111111"b, And);
	     crc = ws_tools_$crc_char (byte (chr), crc);

/* - Convert escape sequences */

	     group = ws_tools_$ars ((chr), 5);
	     escidx = GrpEscIdx (group);
	     if escidx >= 0 & mio_data.s.escreq (chr) then do;
		packet (packet_len) = mio_data.s.esc (escidx);
		packet_len = packet_len + 1;
		unspec (chr) =
		     bool (unspec (chr), EscKey (escidx), XOR);
	     end;

/* - Accumulate packet */

	     packet (packet_len) = byte (chr);
	     packet_len = packet_len + 1;
	end;

/* Delimit packet with control information */

	packet (packet_len)
	     = ws_tools_$check_length (packet_len + LenLen + ChkLen + EOPLen);
	crc = ws_tools_$crc_char (packet (packet_len), crc);
	packet_len = packet_len + 1;
	packet (packet_len) = byte (crc + CONVERT_CRC);
	packet_len = packet_len + 1;
	packet (packet_len) = mio_data.s.eop;
	packet_len = packet_len + 1;

	if mio_data.debug_iocb_ptr ^= null then do;
	     type = rank (p_type);
	     if DatOff <= type & type < DatOff + DatCnt then
		call ws_debug_$packet ("S:DAT---->", addr (packet), packet_len, mio_data.debug_iocb_ptr);
	     else if AckOff <= type & type < AckOff + AckCnt then
		call ws_debug_$packet ("S:ACK---->", addr (packet), packet_len, mio_data.debug_iocb_ptr);
	     else if NakOff <= type & type < NakOff + NakCnt then
		call ws_debug_$packet ("S:NAK---->", addr (packet), packet_len, mio_data.debug_iocb_ptr);
	     else if BrkOff <= type & type < BrkOff + BrkCnt - 2 then
		call ws_debug_$packet ("S:DisCon->", addr (packet), packet_len, mio_data.debug_iocb_ptr);
	     else if BrkOff <= type & type < BrkOff + BrkCnt then
		call ws_debug_$packet ("S:Brk---->", addr (packet), packet_len, mio_data.debug_iocb_ptr);
	     else if RstOff <= type & type < RstOff + RstCnt then
		call ws_debug_$packet ("S:RST---->", addr (packet), packet_len, mio_data.debug_iocb_ptr);
	end;

/* Send packet to the remote */

	call send_modem_string (addr (packet), packet_len);

     end send_packet;

/**/

/* *** Procedure: setup_entry - Internal proc for ws_packet_transmitter_  *** */

setup_entry:
     proc ();


/* PROCEDURE FUNCTION

Initialize the necessary information for each of the entry points.
*/

/* NOTES
*/

/* MAIN */

	mio_data_ptr = p_mio_data_ptr;

     end setup_entry;

/**/

%page;

/* INCLUDE FILES */
%include mowse_io_structures;
%include mowse_info;
%include mowse_messages;
%include mowse_io_constants;
%include mowse;
%include mowse_io_data;

     end;
