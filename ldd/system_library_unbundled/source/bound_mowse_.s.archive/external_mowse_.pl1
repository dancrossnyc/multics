/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-27,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-10-22,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Modified code to handle the special mowse message responsible for
     resetting, suspending, resuming and terminating a capability.
  3) change(86-10-22,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Modified code to handle messages with invalid destinations.
  4) change(86-11-14,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Changed method of implementation of messages for suspended applications.
  5) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
  6) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Clear the application output buffers when a FAIL_CAPABILITY message is
     received.
  7) change(86-12-10,Flegel), approve(86-12-10,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Replaced signalling of mowse_fatal_error with a call to fatal_mowse_trap_.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
external_mowse_:
     proc (p_mowse_mcb_ptr, p_major, p_minor, p_mess_ptr, p_mess_len,
	p_ecode);

/* : PROGRAM FUNCTION

Places messages in the buffers associated with the capability to which a
message is 'addressed'.  Should a message be longer than the pre-defined
packet size the routine handles the reassembling of the complete message from
the several partial messages transmitted.  The routine also handles the
disassembly of long messages destined for some remote capability.  A
functionally identical routine exists on remote system within the mowse
environment. */

/* : NOTES
*/


/* INPUT PARAMETERS */
dcl p_mowse_mcb_ptr	       ptr parameter;	    /* mcb for mowse_io_ */
dcl p_major	       fixed bin parameter;	    /* Major cap number */
dcl p_minor	       fixed bin parameter;	    /* Minor cap number */
dcl p_mess_ptr	       ptr parameter;	    /* Message pointer */
dcl p_mess_len	       fixed bin parameter;	    /* Message length */
dcl p_ecode	       fixed bin (35) parameter;  /* Error code */


/* SYSTEM CALL SUPPORT */
dcl ws_error_$input_buffer_overflow
		       fixed bin (35) ext static;

/* EXTERNAL CALLS */
dcl prepare_trace_	       entry (ptr, fixed bin, ptr, fixed bin);
dcl mowse_error_handler_   entry (ptr, fixed bin, fixed bin);
dcl send_mowse_message_    entry (ptr, fixed bin, fixed bin, fixed bin,
		       fixed bin, fixed bin, fixed bin, ptr,
		       fixed bin, fixed bin, fixed bin (35));
dcl get_mowse_info_ptr_    entry (ptr, ptr, fixed bin (35));
dcl send_outbuff_data_     entry (ptr, fixed bin, fixed bin, fixed bin,
		       fixed bin (35));
dcl send_msg_	       entry (ptr, fixed bin, fixed bin, ptr,
		       fixed bin, fixed bin, fixed bin (35));
dcl capability_$pack       entry (fixed bin, fixed bin, fixed bin,
		       fixed bin (35));
dcl message_manager_       entry (ptr, fixed bin, fixed bin, ptr,
		       fixed bin, fixed bin (35));
dcl release_outbuffer_     entry (ptr);
dcl fatal_mowse_trap_      entry (fixed bin (35));

/* EXTERNAL CALL SUPPORT */
dcl ws_error_$recursive_background_error
		       fixed bin (35) ext static;

/* MISC VARIABLES */
dcl mowse_info_ptr	       ptr;		    /* Pointer to mowse info structure */
dcl destination	       fixed bin;		    /* Destination of failure message */
dcl mcb_ptr	       ptr;
dcl msg_type	       fixed bin;

/* BUILTINS */
dcl null		       builtin;
dcl rank		       builtin;

/* STRUCTURES */

/* CONDITIONS */
dcl any_other	       condition;

/* CONSTANTS */
dcl TRUE		       bit (1) int static options (constant) init ("1"b);
dcl FALSE		       bit (1) int static options (constant) init ("0"b);

/**/

/* INITIALIZATION */
	p_ecode = 0;
	call get_mowse_info_ptr_ (p_mowse_mcb_ptr, mowse_info_ptr,
	     p_ecode);
	if p_ecode ^= 0 then
	     return;

/*  Establish  handler */

	mowse_info_ptr -> mowse_info.mowse_flags.error_handled = FALSE;
	on any_other
	     begin;
	     call mowse_error_handler_ (p_mowse_mcb_ptr, p_major,
		p_minor);
	     goto CAPABILITY_ERROR_RETURN;
	end;

/* MAIN */

/* : If message_ptr is null, return */

	if p_mess_ptr = null then
	     return;

	msg_type = rank (p_mess_ptr -> event_message.header.msg_type);

/* : Call trace message to print message received */

	if mowse_info_ptr -> mowse_info.mowse_flags.trace = TRUE then
	     call prepare_trace_ (p_mess_ptr, p_mess_len,
		mowse_info_ptr -> mowse_info.mowse_flags.trace_file_iocb,
		p_minor);

/* : If invalid application, send a fail to source */

	if (p_major < MINIMUM_CAT_ENTRY) | (p_major > MAXIMUM_CAT_ENTRY)
	then do;
	     call send_fail (p_mess_ptr, p_minor, p_mowse_mcb_ptr, p_ecode);
	     if p_ecode ^= 0 then
		return;
	end;

/* : If destination MCB does not exist, send fail to source */

	mcb_ptr =
	     mowse_info_ptr -> mowse_info.local_cat (p_major).mcb_ptr;
	if mcb_ptr = null then do;
	     call send_fail (p_mess_ptr, p_minor, p_mowse_mcb_ptr, p_ecode);
	     if p_ecode ^= 0 then
		return;
	end;

/* : MORE message */

	if msg_type = MORE then do;
	     call external_more (mowse_info_ptr, mcb_ptr, p_mess_ptr,
		p_mess_len, p_ecode);
	     return;
	end;

/* : CONTINUE message */

	if msg_type = CONTINUE then do;
	     call external_continue (mcb_ptr, p_mowse_mcb_ptr,
		p_mess_ptr, p_mess_len, p_major, p_minor, p_ecode);
	     return;
	end;

/* : TERMINATE_APPLICATION message */

	if p_minor = TERMINATE_APPLICATION then do;
	     call external_terminate (mowse_info_ptr, mcb_ptr, p_mess_ptr,
		p_mess_len, p_ecode);
	     return;
	end;

/* : RESET_APPLICATION message */

	if p_minor = RESET_APPLICATION then do;
	     call external_reset (mcb_ptr, p_major, mowse_info_ptr,
		p_mess_ptr, p_mess_len, p_ecode);
	     return;
	end;

/* : FAIL_CAPABILITY or SYSTEM_ERROR message */

	if p_minor = FAIL_CAPABILITY | p_minor = SYSTEM_ERROR then do;
	     call external_fail (mcb_ptr, p_major, mowse_info_ptr,
		p_mess_ptr, p_mess_len, p_ecode);
	     return;
	end;

/* : SUSPEND_APPLICATION message */

	if p_minor = SUSPEND_APPLICATION then do;
	     call external_suspend (mcb_ptr, mowse_info_ptr, p_mess_ptr,
		p_mess_len, p_major, p_ecode);
	     return;
	end;

/* : RESUME_APPLICATION message */

	if p_minor = RESUME_APPLICATION then do;
	     call external_resume (mcb_ptr, mowse_info_ptr, p_mess_ptr,
		p_mess_len, p_ecode);
	     return;
	end;

/* : DEFAULT message (any other) */

	call message_processor (mowse_info_ptr, mcb_ptr, p_mess_ptr,
	     p_mess_len, p_minor, p_ecode);

	p_ecode = 0;
	return;

/* : Termination of application performed in the event of an "any_other".
     This is the control point of a non-local goto in the event of any
     condition signalled by the capability.  The capability is unwound
     from the stack (via the goto) and is removed from MOWSE because of
     its error.  */

CAPABILITY_ERROR_RETURN:

	p_ecode = 0;
	call capability_$pack (
	     rank (p_mess_ptr -> last_message.header.source_system),
	     rank (p_mess_ptr -> last_message.header.source_major),
	     destination, p_ecode);

	if p_ecode = 0 &
	     rank (p_mess_ptr -> last_message.header.source_major)
	     ^= INTERNAL
	     then
	     call send_msg_ (p_mowse_mcb_ptr, destination, FAIL_CAPABILITY,
		null, 0, BG, p_ecode);

	p_ecode = 0;
	call get_mowse_info_ptr_ (p_mowse_mcb_ptr, mowse_info_ptr, p_ecode);
	if (p_ecode ^= 0) then
	     return;

	if (mowse_info_ptr = null) then
	     return;

	if mowse_info_ptr -> mowse_info.mowse_flags.error_handled then do;
	     mowse_info_ptr -> mowse_info.mowse_flags.error_handled = FALSE;
	     revert any_other;
	     call fatal_mowse_trap_ (ws_error_$recursive_background_error);
	     return;
	end;

/**/

/* INTERNAL PROCEDURES */


/* : *** Procedure: message_processor - Internal proc for external_mowse_  *** */


message_processor:
     proc (p_mowse_info_ptr, p_mcb_ptr, p_message_ptr, p_message_len, p_minor,
	p_code);

/* : PROCEDURE FUNCTION

Take the current message and processes it accordingly.
*/

/* INPUT PARAMETERS */
dcl p_mowse_info_ptr       ptr parameter;	    /* MOWSE info */
dcl p_minor	       fixed bin parameter;	    /* Minor of message */
dcl p_message_len	       fixed bin;		    /* Length of message */
dcl p_mcb_ptr	       ptr parameter;	    /* Applciation's MCB */
dcl p_message_ptr	       ptr parameter;	    /* Message */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;


/* MISC VARIABLES */
dcl major		       fixed bin;		    /* Destination major */
dcl minor		       fixed bin;		    /* Minor to be passed */
dcl source_major	       fixed bin;		    /* Packed major capability of source */
dcl code		       fixed bin (35);	    /* Internal error code */
dcl source_major_num       fixed bin;		    /* Sourc emajor of message */
dcl source_system	       fixed bin;		    /* Source system of message */


/* INITIALIZATION */
	p_code = 0;

	source_system =
	     rank (p_message_ptr -> last_message.header.source_system);
	source_major_num =
	     rank (p_message_ptr -> last_message.header.source_major);

	call message_manager_ (p_mcb_ptr, LAST, source_major_num,
	     p_message_ptr, p_message_len, code);

/* : set the data_length field and the input buffer position so that the next
     block of data gets placed at the beginning of the buffer */

	p_mcb_ptr -> mcb.inbuff_data_length =
	     p_mcb_ptr -> mcb.inbuff_position_index;
	p_mcb_ptr -> mcb.inbuff_position_index = 0;

	call capability_$pack (source_system, source_major_num,
	     source_major, p_code);
	if p_code ^= 0 then
	     return;

/* : If suspended and the message is not resume or terminate, send a fail to
     the source */

	major = rank (p_message_ptr -> last_message.header.major);
	if p_mowse_info_ptr -> mowse_info.local_cat (major).flags.suspended
	     & p_minor ^= TERMINATE_APPLICATION
	     & p_minor ^= RESUME_APPLICATION
	     & p_minor ^= SUSPEND_APPLICATION
	then do;
	     if source_major_num = INTERNAL then
		return;
	     call send_msg_ (p_mcb_ptr, source_major, FAIL_CAPABILITY, null,
		0, BG, p_ecode);
	     return;
	end;

/* : If there is an overflow, call the application with the overflow minor
     Else pass the message on */

	minor = p_minor;
	if code = ws_error_$input_buffer_overflow then
	     minor = OVERFLOWED_BUFFER;

/* : All parameters MUST be passed by value as we cannot allow the application
     to modify them */

	call p_mcb_ptr -> mcb.entry_var ((minor), (source_major),
	     (p_mcb_ptr -> mcb.inbuff),
	     (p_mcb_ptr -> mcb.inbuff_data_length),
	     (p_mcb_ptr), (p_mcb_ptr -> data_block_ptr));

     end message_processor;

/**/

/* : *** Procedure: external_resume - Internal proc for external_mowse_  *** */


external_resume:
     proc (p_mcb_ptr, p_mowse_info_ptr, p_message_ptr, p_message_len, p_code);

/* : PROCEDURE FUNCTION

If the suspend flag is set then reset it and call the application, otherwise
ignore the message.
*/

/* INPUT PARAMETERS */
dcl p_message_len	       fixed bin parameter;	    /* Length of message */
dcl p_mcb_ptr	       ptr parameter;	    /* MCB of application */
dcl p_message_ptr	       ptr parameter;	    /* Message */
dcl p_mowse_info_ptr       ptr parameter;	    /* MOWSE info */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;


/* MISC VARIABLES */


/* INITIALIZATION */

	p_code = 0;

/* : If the suspend flag is not set then ignore */

	if ^p_mowse_info_ptr
	     -> mowse_info.local_cat (p_major).flags.suspended then do;

	     p_mcb_ptr -> inbuff_position_index = 0;
	     p_mcb_ptr -> inbuff_data_length = 0;
	     return;
	end;

/* : Set the flag and pass the message to the application */

	p_mowse_info_ptr -> mowse_info.local_cat (p_major).flags.suspended =
	     FALSE;

	p_mcb_ptr -> mcb.inbuff_position_index = 0;
	p_mcb_ptr -> mcb.inbuff_data_length = 0;

	call message_processor (p_mowse_info_ptr, p_mcb_ptr, p_message_ptr,
	     p_message_len, RESUME_APPLICATION, p_code);

     end external_resume;

/**/

/* : *** Procedure: external_suspend - Internal proc for external_mowse_  *** */


external_suspend:
     proc (p_mcb_ptr, p_mowse_info_ptr, p_message_ptr, p_message_len, p_major,
	p_code);

/* : PROCEDURE FUNCTION

If suspended flag is NOT set then set the suspended flag and pass the
message to the application
*/

/* INPUT PARAMETERS */
dcl p_message_len	       fixed bin parameter;	    /* Length of message */
dcl p_mcb_ptr	       ptr parameter;	    /* MCB of application */
dcl p_message_ptr	       ptr parameter;	    /* Message */
dcl p_major	       fixed bin parameter;	    /* Major capability of this application */
dcl p_mowse_info_ptr       ptr parameter;	    /* MOWSE info */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;


/* MISC VARIABLES */


/* INITIALIZATION */

	p_code = 0;

/* : If already suspended, then return */

	if p_mowse_info_ptr
	     -> mowse_info.local_cat (p_major).flags.suspended then do;

	     p_mcb_ptr -> inbuff_position_index = 0;
	     p_mcb_ptr -> inbuff_data_length = 0;
	     return;
	end;

/* : Else set the flag and pass the message to the application */

	p_mowse_info_ptr -> mowse_info.local_cat (p_major).flags.suspended
	     = TRUE;

	p_mcb_ptr -> mcb.inbuff_data_length = 0;
	p_mcb_ptr -> mcb.inbuff_position_index = 0;

	call message_processor (p_mowse_info_ptr, p_mcb_ptr, p_message_ptr,
	     p_message_len, SUSPEND_APPLICATION, p_code);

     end external_suspend;

/**/

/* : *** Procedure: external_fail - Internal proc for external_mowse_  *** */


external_fail:
     proc (p_mcb_ptr, p_major, p_mowse_info_ptr, p_message_ptr, p_message_len,
	p_code);

/* : PROCEDURE FUNCTION

Clear out the application's output buffer cause it was trying to send stuff
which caused a screwup.
*/

/* INPUT PARAMETERS */
dcl p_major	       fixed bin parameter;	    /* Major of message */
dcl p_message_len	       fixed bin parameter;	    /* Length of message */
dcl p_message_ptr	       ptr parameter;	    /* Message */
dcl p_mcb_ptr	       ptr parameter;	    /* Application's MCB */
dcl p_mowse_info_ptr       ptr parameter;	    /* MOWSE info */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);


/* MISC VARIABLES */


/* INITIALIZATION */

	p_code = 0;

/* : Empty out all stored messages in output buffer */

	call release_outbuffer_ (p_mcb_ptr);

/* : Call the application */

	call message_processor (p_mowse_info_ptr, p_mcb_ptr, p_message_ptr,
	     p_message_len, FAIL_CAPABILITY, p_code);
	if p_code ^= 0 then
	     return;
     end external_fail;

/**/

/* : *** Procedure: external_reset - Internal proc for external_mowse_  *** */


external_reset:
     proc (p_mcb_ptr, p_major, p_mowse_info_ptr, p_message_ptr, p_message_len,
	p_code);

/* : PROCEDURE FUNCTION

Set the reset flag and pass the message to the application only if the flag
was not already set.
*/

/* INPUT PARAMETERS */
dcl p_major	       fixed bin parameter;	    /* Major of message */
dcl p_message_len	       fixed bin parameter;	    /* Length of message */
dcl p_message_ptr	       ptr parameter;	    /* Message */
dcl p_mcb_ptr	       ptr parameter;	    /* Application's MCB */
dcl p_mowse_info_ptr       ptr parameter;	    /* MOWSE info */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);


/* MISC VARIABLES */
dcl source_major	       fixed bin;		    /* Packed source major capability */
dcl source_system	       fixed bin;		    /* Source system of message */

/* INITIALIZATION */

	p_code = 0;

/* : If the flag is already set, ignore the message */

	if p_mowse_info_ptr -> mowse_info.local_cat (p_major).flags.reset
	     then

	     return;

/* : Set the flag and pass the message to the application */

	p_mowse_info_ptr -> mowse_info.local_cat (p_major).flags.reset
	     = TRUE;

/* : Empty out all stored messages */

	p_mcb_ptr -> mcb.inbuff_position_index = 0;
	p_mcb_ptr -> mcb.inbuff_data_length = 0;

	call release_outbuffer_ (p_mcb_ptr);

/* : Call the application */

	call message_processor (p_mowse_info_ptr, p_mcb_ptr, p_message_ptr,
	     p_message_len, RESET_APPLICATION, p_code);
	if p_code ^= 0 then
	     return;

/* : Send the reset reply to the source system's MOWSE capability only if
     the source is on a remote system */

	p_mowse_info_ptr -> mowse_info.local_cat (p_major).flags.reset
	     = FALSE;

	source_system
	     = rank (p_message_ptr -> last_message.header.source_system);
	if source_system = LOCAL_SYSTEM then
	     return;

	call capability_$pack (source_system, INTERNAL, source_major,
	     p_code);
	if p_code ^= 0 then
	     return;

	call send_msg_ (p_mcb_ptr, source_major, RESET_REPLY, null, 0, BG,
	     p_code);

     end external_reset;

/**/

/* : *** Procedure: external_terminate - Internal proc for external_mowse_  *** */


external_terminate:
     proc (p_mowse_info_ptr, p_mcb_ptr, p_message_ptr, p_message_len, p_code);

/* : PROCEDURE FUNCTION

Handle the functions necessary for passing on a terminate message.
*/

/* INPUT PARAMETERS */
dcl p_mowse_info_ptr       ptr parameter;	    /* MOWSE info */
dcl p_message_len	       fixed bin parameter;	    /* Length of message */
dcl p_message_ptr	       ptr parameter;	    /* Message */
dcl p_mcb_ptr	       ptr parameter;	    /* Application's MCB */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;


/* MISC VARIABLES */


/* INITIALIZATION */

	p_code = 0;

/* : Clear the suspend flag */

	mowse_info_ptr -> mowse_info.local_cat (p_major).flags.suspended =
	     FALSE;

/* : Pass on the message */

	mcb_ptr -> mcb.inbuff_position_index = 0;
	mcb_ptr -> mcb.inbuff_data_length = 0;

	call message_processor (p_mowse_info_ptr, p_mcb_ptr, p_message_ptr,
	     p_message_len, TERMINATE_APPLICATION, p_code);

     end external_terminate;

/**/

/* : *** Procedure: external_continue - Internal proc for external_mowse_  *** */


external_continue:
     proc (p_mcb_ptr, p_mowse_mcb_ptr, p_message_ptr, p_message_len, p_major,
	p_minor, p_code);

/* : PROCEDURE FUNCTION

Place the message in a buffer associated with the source of the message.
If for some reason the applications mcb is not valid then return a
FAIL_CAPABILITY to the source of the message to indicate the the capability
failed.
*/

/* INPUT PARAMETERS */
dcl p_mcb_ptr	       ptr parameter;	    /* MCB of capability */
dcl p_minor	       fixed bin parameter;	    /* Minor of message */
dcl p_major	       fixed bin parameter;	    /* Major of destination */
dcl p_mowse_mcb_ptr	       ptr parameter;	    /* Mowse's MCB */
dcl p_message_len	       fixed bin parameter;	    /* Length of message */
dcl p_message_ptr	       ptr parameter;	    /* Message */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;


/* MISC VARIABLES */
dcl dest_system	       fixed bin;		    /* Destination system id of message */
dcl source_major_num       fixed bin;		    /* Source major number of message */
dcl source_system	       fixed bin;		    /* Source system of message */


/* INITIALIZATION */

	p_code = 0;

	source_system =
	     rank (p_message_ptr
	     -> more_remaining_message.header.source_system);
	source_major_num =
	     rank (p_message_ptr
	     -> more_remaining_message.header.source_major);
	dest_system =
	     rank (p_message_ptr -> more_remaining_message.header.system);

/* : If the source major is invalid, then ignore the message */

	if (source_major_num < MINIMUM_CAT_ENTRY)
	     | (source_major_num > MAXIMUM_CAT_ENTRY) then

	     return;

/* : Manipulate the message into the queues of the application */

	call message_manager_ (p_mcb_ptr, CONTINUE, source_major_num,
	     p_message_ptr, p_message_len, p_code);

/* : Get the next portion from the source */

	call send_mowse_message_ (p_mowse_mcb_ptr, source_system,
	     source_major_num, dest_system, p_major, p_minor, MORE, null, 0,
	     BG, p_code);

     end external_continue;

/**/

/* : *** Procedure: external_more - Internal proc for external_mowse_  *** */


external_more:
     proc (p_mowse_info_ptr, p_mcb_ptr, p_message_ptr, p_message_len, p_code);

/* : PROCEDURE FUNCTION

Send another packet from the outbuffer to the capability requesting more
data.
*/

/* INPUT PARAMETERS */
dcl p_mowse_info_ptr       ptr parameter;	    /* MOWSE info */
dcl p_message_len	       fixed bin parameter;	    /* Length of message */
dcl p_mcb_ptr	       ptr parameter;	    /* MCB of destination capability */
dcl p_message_ptr	       ptr parameter;	    /* Message */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);


/* MISC VARIABLES */
dcl source_minor	       fixed bin;		    /* Source minor of message */
dcl source_major_num       fixed bin;		    /* Source major of message */
dcl source_system	       fixed bin;		    /* Source system of message */


/* INITIALIZATION */

	p_code = 0;

	source_system =
	     rank (p_message_ptr
	     -> request_more_message.header.source_system);
	source_major_num =
	     rank (p_message_ptr
	     -> request_more_message.header.source_major);
	source_minor =
	     rank (p_message_ptr
	     -> request_more_message.header.source_minor);

/* : If source major or minor is invalid, ignore message */

	if (source_major_num < MINIMUM_CAT_ENTRY)
	     | (source_major_num > MAXIMUM_CAT_ENTRY)
	     | (source_minor < MINIMUM_SYSTEM_MINOR)
	     | (source_minor > MAXIMUM_USER_MINOR) then

	     return;

	call send_outbuff_data_ (p_mcb_ptr, source_system, source_major_num,
	     source_minor, p_code);
	if p_code = 0 then
	     return;

/* : If something went wrong with the next portion, send a FAIL capability
     to this application */

	p_mcb_ptr -> mcb.inbuff_position_index = 0;
	p_mcb_ptr -> mcb.inbuff_data_length = 0;

	call message_processor (p_mowse_info_ptr, p_mcb_ptr, p_message_ptr,
	     p_message_len, FAIL_CAPABILITY, p_code);

     end external_more;

/**/

/* : *** Procedure: send_fail - Internal proc for external_mowse_  *** */


send_fail:
     proc (p_message_ptr, p_minor, p_mowse_mcb_ptr, p_code);

/* : PROCEDURE FUNCTION

Determine if it is valid to send a FAIL_CAPABILITY message to the source of
the message, if so then send it.
*/

/* INPUT PARAMETERS */
dcl p_minor	       fixed bin parameter;	    /* Minor capability number */
dcl p_mowse_mcb_ptr	       ptr parameter;	    /* MOWSE's MCB */
dcl p_message_ptr	       ptr parameter;	    /* Invalid message destination */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;


/* MISC VARIABLES */
dcl destination	       fixed bin;		    /* Destination capability of fail */


/* INITIALIZATION */

	p_code = 0;

	if p_minor = EXECUTE_COMMAND_REPLY | p_minor = FAIL_CAPABILITY |
	     p_minor = RESET_REPLY | p_minor = QUERY_REPLY |
	     p_minor = RESPONSE_CONNECT | p_minor = RESPONSE_DISCONNECT
	then do;

	     p_code = 0;
	     return;
	end;

	call capability_$pack (
	     rank (p_message_ptr -> last_message.header.source_system),
	     rank (p_message_ptr -> last_message.header.source_major),
	     destination, p_code);
	if p_ecode ^= 0 then do;
	     p_code = 0;
	     return;
	end;

	call send_msg_ (p_mowse_mcb_ptr, destination, FAIL_CAPABILITY,
	     null, 0, BG, p_code);

     end send_fail;

/**/

%page;

/* INCLUDE FILES */
%include "mowse";
%include "mowse_info";
%include "mowse_mcb";
%include "mowse_messages";

/* : END external_mowse_ */
     end external_mowse_;
