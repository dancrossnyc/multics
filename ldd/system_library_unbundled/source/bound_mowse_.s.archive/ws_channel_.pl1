/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
ws_channel_:
     proc ();


/* PROGRAM FUNCTION

This is a collection of entry points which are used to aid mowse in waiting
on specific events (wait channels).
*/


/* NOTES
*/

/****^  HISTORY COMMENTS:
  1) change(87-04-20,Flegel), approve(87-06-23,MCR7649),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
                                                   END HISTORY COMMENTS */

/* INPUT PARAMETERS */
dcl p_wait_ptr	       ptr parameter;	    /* Channel control info */
dcl p_iocb_ptr	       ptr parameter;	    /* Debug File */
dcl p_caller	       char (*) parameter;	    /* Caller name */
dcl p_channel	       fixed bin (71) aligned parameter; /* Channel ID */
dcl p_mio_data_ptr	       ptr parameter;	    /* mowse_io_ info */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl code		       fixed bin (35);
dcl mask		       bit (36) aligned;	    /* IPS mask */
dcl mio_data_ptr	       ptr;		    /* mowse_io_data pointer */

/* STRUCTURES */
dcl 01 mio_data	       like mowse_io_data based (mio_data_ptr);

dcl 01 fatal_error_info    aligned,
       02 version	       fixed bin,		    /* Must be 0 */
       02 status_code      fixed bin (35);	    /* Error code causing fatality */

/* SYSTEM CALLS */
dcl ipc_$unmask_ev_calls   entry (fixed bin(35));
dcl hcs_$wakeup	       entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl ipc_$block	       entry (ptr, ptr, fixed bin (35));
dcl iox_$modes	       entry (ptr, char (*), char (*), fixed bin (35));
dcl hcs_$reset_ips_mask    entry (bit (36) aligned, bit (36) aligned);
dcl hcs_$set_ips_mask      entry (bit (36) aligned, bit (36) aligned);
dcl terminate_process_     entry (char (*), ptr);
dcl create_ips_mask_       entry (ptr, fixed bin, bit (36) aligned);
dcl hcs_$get_ips_mask      entry (bit (36) aligned);

/* SYSTEM CALL SUPPORT */
dcl error_table_$unable_to_do_io fixed bin (35) ext static;

/* EXTERNAL CALLS */
dcl ws_packet_transmitter_$supervisory entry (ptr, char(1));
dcl ws_debug_$line	       entry () options (variable);

/* EXTERNAL CALL SUPPORT */

/* BUILTINS */
dcl byte		       builtin;
dcl bool		       builtin;
dcl addr		       builtin;

/* CONDITIONS */
dcl mowse_io_error	       condition;
dcl cleanup	       condition;

/* CONSTANTS */
dcl True		       bit (1) int static options (constant) init ("1"b);
dcl False		       bit (1) int static options (constant) init ("0"b);

/**/

/* INITIALIZATION */

/* MAIN */

	return;

/**/

%page;

/* INTERNAL ENTRIES */


/* *** Entry: call_wakeup - Internal entry for ws_channel_  *** */

call_wakeup:
     entry (p_mio_data_ptr, p_channel);


/* ENTRY FUNCTION

Generate a wakeup on the specified channel which is a call event channel.
*/

/* NOTES

This is NOT an async channel so control will not be given until something goes
blocked.
*/

	mio_data_ptr = p_mio_data_ptr;
	call hcs_$wakeup (mio_data.channel_info.process_id, p_channel,
	     0, (0));

	return;

/**/

/* *** Entry: wait_block - Internal entry for ws_channel_  *** */

wait_block:
     entry (p_mio_data_ptr, p_wait_ptr, p_caller, p_iocb_ptr);


/* ENTRY FUNCTION

Wait for an event to occur on the specified channel.
*/

/* NOTES
*/

	mio_data_ptr = p_mio_data_ptr;

	call check_ips_mask ();

/* Add myself to the count of blocked events */

	mask = ""b;
	call hcs_$set_ips_mask (""b, mask);
	p_wait_ptr -> wait_info.count = p_wait_ptr -> wait_info.count + 1;
	on cleanup
	     p_wait_ptr -> wait_info.count = p_wait_ptr -> wait_info.count - 1;
	call hcs_$reset_ips_mask (mask, mask);

/* Block */

	call ws_debug_$line (p_iocb_ptr, "vvv blocking:   ^a (^d)", p_caller,
	     p_wait_ptr -> wait_info.count);

	call wait_block_handle (p_wait_ptr -> wait_info.channel);

	call ws_debug_$line (p_iocb_ptr, "^^^^^^ unblocking: ^a (^d)",
	     p_caller, p_wait_ptr -> wait_info.count);

/* Remove from the list of blocked on user_input */

	p_wait_ptr -> wait_info.flags.transmitted = False;
	p_wait_ptr -> wait_info.count = p_wait_ptr -> wait_info.count - 1;

	return;

/**/

/* *** Entry: user_input_wakeup - Internal entry for ws_channel_  *** */

wait_wakeup:
     entry (p_mio_data_ptr, p_wait_ptr);


/* ENTRY FUNCTION

Issue a wakeup on the wait channel if there is something waiting on it.
*/

/* NOTES
*/

	mio_data_ptr = p_mio_data_ptr;

	if p_wait_ptr -> wait_info.count > 0
	     & ^p_wait_ptr -> wait_info.flags.transmitted
	then do;
	     p_wait_ptr -> wait_info.flags.transmitted = True;
	     call hcs_$wakeup (mio_data.channel_info.process_id,
		p_wait_ptr -> wait_info.channel, 0, code);
	     if code ^= 0 then
		signal mowse_io_error;
	end;

	return;

/**/

%page;

/* INTERNAL PROCEDURES */


/* *** Procedure: check_ips_mask - Internal proc for ws_channel_  *** */

check_ips_mask:
     proc ();


/* PROCEDURE FUNCTION

When blocking on a channel, the alrm_ mask cannot be masked, otherwise a wakeup
will never be seen on the channel.  If this condition occurs, the process is
terminated and the remote is notified.

In addition, event calls (ipc_$mask_ev_calls) cannot be set.
*/

/* NOTES
*/

/* INPUT PARAMETERS */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl mask_array	       (2) char (32) aligned;	    /* Array of IPS names */
dcl mask		       bit (36) aligned;	    /* Current IPS mask */
dcl test_mask	       bit (36) aligned;	    /* IPS test mask */
dcl code		       fixed bin (35);

/* STRUCTURES */

/* INITIALIZATION */
	test_mask = ""b;
	mask = ""b;
	mask_array (1) = "wkp_";
	mask_array (2) = "alrm";

/* MAIN */

	call hcs_$get_ips_mask (mask);
	call create_ips_mask_ (addr (mask_array), 2, test_mask);
	if bool (^mask, ^test_mask, And) then
	     goto FATAL_IO_ERROR;

	call ipc_$unmask_ev_calls (code);
	if code = 0 then
	     goto FATAL_IO_ERROR;

	return;

FATAL_IO_ERROR:
	call ws_packet_transmitter_$supervisory (mio_data_ptr,
	     byte (FastDis));
	call iox_$modes (mio_data.iocb_ptr, mio_data.old_modes, "", 0);
	fatal_error_info.version = 0;
	fatal_error_info.status_code = error_table_$unable_to_do_io;
	call terminate_process_ ("fatal_error", addr (fatal_error_info));

     end check_ips_mask;

/**/

/* *** Procedure: wait_block_handle - Internal proc for ws_channel_  *** */

wait_block_handle:
     proc (p_channel_id);


/* PROCEDURE FUNCTION

Wait on the specified channel for a wakeup.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_channel_id	       fixed bin (71) aligned parameter; /* Channel to wait on */

/* OUTPUT PARAMETERS */

/* MISC VARIABLES */
dcl code		       fixed bin (35);

/* STRUCTURES */
dcl 01 ewc	       like event_wait_channel aligned automatic;
dcl 01 ewi	       like event_wait_info aligned automatic;

/* INITIALIZATION */

/* MAIN */

	ewc.n_channels = 1;
	ewc.pad = ""b;
	ewc.channel_id = p_channel_id;

	call ipc_$block (addr (ewc), addr (ewi), code);
	if code ^= 0 then
	     signal mowse_io_error;

     end wait_block_handle;

/**/

%page;

/* INCLUDE FILES */
%include mowse_io_constants;
%include event_wait_info;
%include event_wait_channel;
%include mowse_io_data;

     end;
