/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-28,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
terminate_mowse_:
     proc (p_mowse_info_ptr, p_code);

/* : PROGRAM FUNCTION

This module deallocates all space reserved by MOWSE and the applications
running in the MOWSE environment.
*/

/* : NOTES
*/

/* INPUT PARAMETERS */
dcl p_mowse_info_ptr       ptr;		    /* Pointer to mowse info structure */


/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35);	    /* Error code */


/* MISC VARIABLES */
dcl cat_index	       fixed bin;		    /* CAT index */
dcl mcb_ptr	       ptr;		    /* MCB */
dcl temp_buff_ptr	       ptr;		    /* Miscellaneous ptr */
dcl temp_buff_ptr_2	       ptr;		    /* Miscellaneous ptr */
dcl input_buffer_length    fixed bin;		    /* Length of char buffer */
dcl partial_message_ptr_1  ptr;		    /* Node in message chain */
dcl partial_message_ptr_2  ptr;		    /* Node in message chain */
dcl mask		       bit (36) aligned;	    /* IPS mask */
dcl mowse_capability       fixed bin;		    /* MOWSE capability number */

/* STRUCTURES */
dcl input_buffer_data      char (input_buffer_length) based (temp_buff_ptr);
					    /* Freed buffer */

/* SYSTEM CALLS */
dcl hcs_$set_ips_mask      entry (bit (36) aligned, bit (36) aligned);
dcl hcs_$reset_ips_mask    entry (bit (36) aligned, bit (36) aligned);
dcl iox_$close	       entry (ptr, fixed bin (35));
dcl iox_$detach_iocb       entry (ptr, fixed bin (35));
dcl release_temp_segment_  entry (char (*), ptr, fixed bin (35));

/* SYSTEM CALL SUPPORT */


/* EXTERNAL CALLS */
dcl release_outbuffer_     entry (ptr);
dcl capability_$pack       entry (fixed bin, fixed bin, fixed bin,
		       fixed bin (35));

/* EXTERNAL CALL SUPPORT */


/* BUILTINS */
dcl null		       builtin;


/* CONDITIONS */


/* CONSTANTS */


/**/
/* INITIALIZATION */
	p_code = 0;
	call capability_$pack (LOCAL_SYSTEM, INTERNAL, mowse_capability,
	     p_code);
	if p_code ^= 0 then
	     return;

/* MAIN */

/* : If mowse_info_ptr is null then return */

	if p_mowse_info_ptr = null then
	     return;

/* : Look at mcb pointers associated with each local cat entry
     and release any space associated with it, if any */

	do cat_index = MINIMUM_CAT_ENTRY to MAXIMUM_CAT_ENTRY;
	     mcb_ptr = p_mowse_info_ptr
		-> mowse_info.local_cat (cat_index).mcb_ptr;

/* : - if mcb ptr is not null, then there is an application
     -- send a TERMINATE_APPLICATION to the capability
     - if application did not destroy its instance
     -- free its input buffer, output buffers (nodes and data), mcb */

	     if mcb_ptr ^= null then
		call mcb_ptr -> mcb.entry_var ((TERMINATE_APPLICATION),
		     (mowse_capability), (null), (0), (mcb_ptr),
		     (mcb_ptr -> data_block_ptr));

	     mcb_ptr = p_mowse_info_ptr
		-> mowse_info.local_cat (cat_index).mcb_ptr;
	     if mcb_ptr ^= null then do;
		temp_buff_ptr = mcb_ptr -> mcb.inbuff;
		if temp_buff_ptr ^= null then do;
		     input_buffer_length
			= mcb_ptr -> mcb.inbuff_data_length;
		     free input_buffer_data;
		     temp_buff_ptr = null;
		end;
		mcb_ptr -> inbuff = null;

		call release_outbuffer_ (mcb_ptr);

		free mcb_ptr -> mcb;
		mcb_ptr = null;
	     end;
	end;

/* : Clean up pending messages */

	temp_buff_ptr = p_mowse_info_ptr
	     -> mowse_info.message_manager_info.head_list_ptr;
	do while (temp_buff_ptr ^= null);
	     partial_message_ptr_1
		= temp_buff_ptr -> message_node.partial_msg_list_ptr;
	     do while (partial_message_ptr_1 ^= null);
		partial_message_ptr_2 =
		     partial_message_ptr_1 -> partial_message.msg_ptr;
		partial_message_ptr_1 =
		     partial_message_ptr_2 -> partial_message.next_msg;
		free partial_message_ptr_2 -> partial_message;
		partial_message_ptr_2 = null;
	     end;

	     temp_buff_ptr_2 = temp_buff_ptr;
	     temp_buff_ptr = temp_buff_ptr_2 -> message_node.next_node;
	     free temp_buff_ptr_2 -> message_node;
	     temp_buff_ptr_2 = null;
	end;

/* : Close debug and trace files if open */

	if p_mowse_info_ptr -> mowse_info.mowse_flags.debug_file_iocb
	     ^= null
	then do;
	     mask = ""b;
	     call hcs_$set_ips_mask (""b, mask);
	     call iox_$close (p_mowse_info_ptr
		-> mowse_info.mowse_flags.debug_file_iocb, (0));
	     call iox_$detach_iocb (p_mowse_info_ptr
		-> mowse_info.mowse_flags.debug_file_iocb, (0));
	     call hcs_$reset_ips_mask (mask, mask);
	end;

	if p_mowse_info_ptr -> mowse_info.mowse_flags.trace_file_iocb
	     ^= null
	then do;
	     mask = ""b;
	     call hcs_$set_ips_mask (""b, mask);
	     call iox_$close (p_mowse_info_ptr
		-> mowse_info.mowse_flags.trace_file_iocb, (0));
	     call iox_$detach_iocb (p_mowse_info_ptr
		-> mowse_info.mowse_flags.trace_file_iocb, (0));
	     call hcs_$reset_ips_mask (mask, mask);
	end;

/* : Free init_mowse_info structure */

	if p_mowse_info_ptr -> mowse_info.init_mowse_info_ptr ^= null
	then do;
	     free p_mowse_info_ptr
		-> mowse_info.init_mowse_info_ptr -> init_mowse_info;
	     p_mowse_info_ptr -> mowse_info.init_mowse_info_ptr = null;
	end;

/* : Release temporary segment */

	call release_temp_segment_ (temp_seg_name, p_mowse_info_ptr,
	     p_code);

%page;
/* INCLUDE FILES */
%include mowse_mcb;
%include mowse_messages;
%include mowse_info;
%include mowse;

/* : END */
     end;
