/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-27,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-10-22,Smith), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Added checks for messages with invalid destinations.
  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
  4) change(86-12-10,Flegel), approve(86-12-10,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Replaced signalling of mowse_fatal_error with a call to fatal_mowse_trap_.
  5) change(86-12-11,Flegel), approve(86-12-11,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Guaruntee that a RESPONSE_DISCONNECT message is sent back in the event of
     an error to the destination of a REQUEST_DISCONNECT message.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
rcvdat_:
     proc (p_mowse_mcb_ptr, p_msg_ptr, p_msg_len, p_status);

/* : PROGRAM FUNCTION
Get a message from the Protocol Handler (0.1) and pass it on to the parser.
*/

/* : NOTES

All error handling should be done from here on down.
*/

/* INPUT PARAMETERS */
dcl p_mowse_mcb_ptr	       ptr parameter;	    /* mcb of mowse_io_ */
dcl p_msg_ptr	       ptr parameter;	    /* Pointer to a message record */
dcl p_msg_len	       fixed bin (21) parameter;  /* Length of message */
dcl p_status	       fixed bin (35) parameter;  /* Error code */


/* EXTERNAL CALLS */
dcl send_msg_	       entry (ptr, fixed bin, fixed bin, ptr, fixed bin,
		       fixed bin, fixed bin (35));
dcl capability_$pack       entry (fixed bin, fixed bin, fixed bin,
		       fixed bin (35));
dcl ws_$put_background_message
		       entry () options (variable);
dcl message_parser_	       entry (ptr, fixed bin, ptr, fixed bin (35));

/* SYSTEM CALLS */

/* SYSTEM CALL SUPPORT */
dcl ws_error_$no_capability
		       fixed bin (35) ext static;
dcl ws_error_$invalid_capability_number
		       fixed bin (35) ext static;
dcl ws_error_$invalid_system_id
		       fixed bin (35) ext static;

/* STRUCTURES */

/* MISC VARIABLES */
dcl mowse_info_ptr	       ptr;
dcl system	       fixed bin;
dcl major		       fixed bin;
dcl minor		       fixed bin;
dcl source_system	       fixed bin;
dcl source_major	       fixed bin;
dcl ecode		       fixed bin (35);

/* BUILTINS */
dcl convert	       builtin;
dcl null		       builtin;
dcl rank		       builtin;
dcl addr		       builtin;
dcl byte		       builtin;

/* CONDITIONS */

/**/

/* INITIALIZATION */

	p_status = 0;
	message_ptr = p_msg_ptr;
	message_len = convert (message_len, p_msg_len);

/* MAIN */

/* : Get mowse_info_ptr */

	mowse_info_ptr = p_mowse_mcb_ptr -> mcb.mowse_info_ptr;

/* : Ensure that the destination of the message is valid. Ignore messages
     received for the wrong system */

	system = rank (message_ptr -> input_message.header.system);
	major = rank (message_ptr -> input_message.header.major);
	minor = rank (message_ptr -> input_message.header.minor);
	if minor ^= CONTINUE then do;
	     source_system =
		rank (message_ptr -> input_message.header.source_system);
	     source_major =
		rank (message_ptr -> input_message.header.source_major);
	end;
	else do;
	     source_system =
		rank (message_ptr
		-> more_remaining_message.header.source_system);
	     source_major =
		rank (message_ptr
		-> more_remaining_message.header.source_major);
	end;

/* : If destination major or system is invalid, send an error */

	if major < INTERNAL | major > MAXIMUM_CAT_ENTRY then do;
	     call message_error (system, major, minor, source_system,
		source_major, p_mowse_mcb_ptr,
		ws_error_$invalid_capability_number);
	     return;
	end;

/* : If the system is invalid, send an error */

	if system ^= LOCAL_SYSTEM then do;
	     call message_error (system, major, minor, source_system,
		source_major, p_mowse_mcb_ptr,
		ws_error_$invalid_system_id);
	     return;
	end;

/* : If the major number of the destination is valid ensure that there
     is a valid MCB for this capability (ie the application is registered
     with MOWSE). */

	if major ^= INTERNAL then
	     if p_mowse_mcb_ptr -> mcb.mowse_info_ptr
		-> mowse_info.local_cat (major).mcb_ptr = null
	     then do;
		call message_error (system, major, minor, source_system,
		     source_major, p_mowse_mcb_ptr,
		     ws_error_$no_capability);
		return;
	     end;

/* : call message parser with message length and pointer to mesaage */

	call message_parser_ (p_mowse_mcb_ptr, message_len, p_msg_ptr,
	     ecode);

/* : if the message is invalid then display a message indicating this
     fact and terminate the capability sending the message */

	p_status = 0;
	if ecode ^= 0 then do;
	     call message_error (system, major, minor, source_system,
		source_major, p_mowse_mcb_ptr, ecode);
	     return;
	end;

/**/
/* INTERNAL PROCEDURES */

/* *** Procedure: message_error - Internal proc for rcvdat_  *** */


message_error:
     proc (p_system, p_major, p_minor, p_source_system, p_source_major,
	p_mowse_mcb_ptr, p_code);

/* : PROCEDURE FUNCTION

Generate the appropriate action when an invalid message has been received.
*/

/* INPUT PARAMETERS */
dcl p_minor	       fixed bin parameter;	    /* Destination minor capability */
dcl p_mowse_mcb_ptr	       ptr parameter;
dcl p_code	       fixed bin (35);
dcl p_source_major	       fixed bin parameter;	    /* Source major of message */
dcl p_source_system	       fixed bin parameter;	    /* Source system of message */
dcl p_major	       fixed bin parameter;	    /* Destination major */
dcl p_system	       fixed bin parameter;


/* MISC VARIABLES */
dcl data_message	       char (32);		    /* Data message string */
dcl source_major_cap       fixed bin;		    /* Packed capability number */
dcl data		       char (1);		    /* Data to send_msg_ */

/* INITIALIZATION */

/* : Generate an error message only if it is not because the destination
     capability does not exist */

	if p_code ^= ws_error_$no_capability then
	     call ws_$put_background_message (p_mowse_mcb_ptr,
		p_code, "MULTICS MOWSE", "From [^d:^d] to [^d:^d:^d]",
		p_source_system, p_source_major, p_system, p_major,
		p_minor);
	p_code = 0;

/* : If invalid message was from MOWSE then do not send a message to the
     source of the message. */

	if p_source_major = INTERNAL then
	     return;

/* : Otherwise send a message to the source of the invalid message. */

	call capability_$pack (p_source_system, p_source_major,
	     source_major_cap, ecode);
	if p_code ^= 0 then
	     return;

	if p_minor = REQUEST_DISCONNECT then do;
	     data = byte (REJECT);
	     call send_msg_ (p_mowse_mcb_ptr, source_major_cap,
		RESPONSE_DISCONNECT, addr (data), 1, BG, p_code);
	end;
	else if p_minor = STATUS then do;
	     data_message = "Capability does not exist.";
	     call send_msg_ (p_mowse_mcb_ptr, source_major_cap,
		STATUS_REPLY, addr (data_message), 26, FG, p_code);
	end;

	else if p_minor >= MINIMUM_USER_MINOR & p_minor <= MAXIMUM_USER_MINOR
	     then
	     call send_msg_ (p_mowse_mcb_ptr, source_major_cap,
		FAIL_CAPABILITY, null, 0, BG, p_code);
	else
	     call send_msg_ (p_mowse_mcb_ptr, source_major_cap,
		SYSTEM_ERROR, null, 0, BG, ecode);

     end message_error;

/**/

/**/
%page;

/* INCLUDE FILES */
%include mowse;
%include mowse_mcb;
%include mowse_messages;
%include mowse_info;

/* : END */
     end rcvdat_;
