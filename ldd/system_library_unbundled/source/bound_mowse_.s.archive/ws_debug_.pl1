/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
ws_debug_:
     proc ();


/* PROGRAM FUNCTION

This is a collection of entry points which are responsible for handling the
debug files of MOWSE.
*/


/* NOTES
*/

/****^  HISTORY COMMENTS:
  1) change(87-05-04,Flegel), approve(87-06-23,MCR7649),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
                                                   END HISTORY COMMENTS */

/* INPUT PARAMETERS */
dcl p_header	       char (*) parameter;	    /* Packet header info */
dcl p_packet_ptr	       ptr parameter;	    /* Packet */
dcl p_packet_len	       fixed bin (21) parameter;  /* Length of packet */
dcl p_info_ptr	       ptr parameter;	    /* Control info pointer */

/* OUTPUT PARAMETERS */
dcl p_iocb_ptr	       ptr parameter;	    /* IOCB of debug file */
dcl p_code	       fixed bin (35) parameter;  /* Error code */

/* MISC VARIABLES */
dcl asn		       fixed bin;		    /* Packet ACK SN */
dcl psn		       fixed bin;		    /* Packet SN */
dcl channel	       fixed bin;		    /* Channel ID */
dcl debug_len	       fixed bin (21);	    /* Length of nonvarying debug string */
dcl debug_string	       char (512);		    /* Non-varying debug string */
dcl iocb_ptr	       ptr;		    /* IOCB */
dcl arg_len	       fixed bin (21);	    /* Length of argument */
dcl arg_ptr	       ptr;		    /* Argument */
dcl arg_list_ptr	       ptr;		    /* Argument list */
dcl code		       fixed bin (35);
dcl arg_count	       fixed bin;		    /* Number of args */
dcl chr		       char (1);		    /* Single char holder */
dcl i		       fixed bin (21);
dcl debug_string_var       char (512) var;	    /* Output string */
dcl debug_name	       char (512) var;	    /* Debug file name */

/* STRUCTURES */
dcl based_ptr	       ptr based;		    /* ptr overlay */
dcl packet_data	       char (p_packet_len) based (p_packet_ptr);

/* SYSTEM CALLS */
dcl cu_$arg_ptr	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl iox_$put_chars	       entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
		       bit (1) aligned);
dcl cu_$arg_list_ptr       entry (ptr);
dcl cu_$arg_count	       entry (fixed bin, fixed bin (35));
dcl iox_$close	       entry (ptr, fixed bin (35));
dcl iox_$detach_iocb       entry (ptr, fixed bin (35));
dcl iox_$open	       entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl iox_$attach_name       entry (char (*), ptr, char (*), ptr, fixed bin (35));

/* SYSTEM CALL SUPPORT */
dcl error_table_$active_function fixed bin (35) ext static;
dcl ws_error_$trace_already_on fixed bin (35) ext static;
dcl error_table_$unimplemented_version fixed bin (35) ext static;
dcl ws_error_$debug_already_on fixed bin (35) ext static;

/* EXTERNAL CALLS */
dcl ws_tools_$ars	       entry (fixed bin, fixed bin) returns (fixed bin);
dcl ws_debug_$line	       entry options (variable);

/* EXTERNAL CALL SUPPORT */

/* BUILTINS */
dcl substr	       builtin;
dcl addr		       builtin;
dcl rank		       builtin;
dcl divide	       builtin;
dcl mod		       builtin;
dcl byte		       builtin;
dcl index		       builtin;
dcl null		       builtin;
dcl length	       builtin;

/* CONDITIONS */

/* CONSTANTS */

/**/

/* INITIALIZATION */

/* MAIN */

	return;

/**/

%page;

/* INTERNAL ENTRIES */


/* *** Entry: debug_close - Internal entry for ws_debug_  *** */

debug_close:
     entry (p_iocb_ptr, p_code);


/* ENTRY FUNCTION

Close and detach the specified IOCB.
*/

/* NOTES
*/

	p_code = 0;
	call close_file (p_iocb_ptr, p_code);

	return;

/**/

/* *** Entry: line - Internal entry for ws_debug_  *** */

line:
     entry options (variable);


/* ENTRY FUNCTION

Works like ioa_$ioa_switch but provides a single entry into all writing
to the debug file.
*/

/* NOTES

Calling sequence:

   call ws_debug_$line (iocb_ptr, control_string, arg1, ..., argN);
*/

/* Verify that the number of args is OK */

	call cu_$arg_count (arg_count, code);
	if code ^= 0 & code ^= error_table_$active_function then
	     return;
	if arg_count < 2 then
	     return;

/* The first argument must be a pointer (IOCB) */

	call cu_$arg_list_ptr (arg_list_ptr);
	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0 then
	     return;
	if arg_ptr = null then
	     return;
	if arg_ptr -> based_ptr = null then
	     return;
	iocb_ptr = arg_ptr -> based_ptr;

/* Get the remainder of the arguments and write the string */

	call ioa_$general_rs (arg_list_ptr, 2, 3, debug_string, debug_len,
	     "0"b, "1"b);
	call iox_$put_chars (iocb_ptr, addr (debug_string), debug_len, code);
	if code ^= 0 then
	     return;

	return;

/**/

/* *** Entry: debug_open - Internal entry for ws_debug_  *** */

debug_open:
     entry (p_info_ptr, p_iocb_ptr, p_code);


/* ENTRY FUNCTION

Open the specified IOCB into which debug info is dumped.
*/

/* NOTES
*/

	p_code = 0;

/* IOCB not null means that it is already open */

	if p_iocb_ptr ^= null then do;
	     p_code = ws_error_$debug_already_on;
	     return;
	end;

/* Determine what to call the file */

	debug_name = "debug.mowse_io_";
	if p_info_ptr ^= null then do;
	     if p_info_ptr -> mowse_io_debug_info.version
		^= mowse_io_info_version_1
	     then do;
		p_code = error_table_$unimplemented_version;
		return;
	     end;

	     if length (p_info_ptr -> mowse_io_debug_info.segment_name) ^= 0
		then
		debug_name
		     = p_info_ptr -> mowse_io_debug_info.segment_name;
	end;

	if index (debug_name, ".mowse_io_") = 0 then
	     debug_name = debug_name || ".mowse_io_";

/* Open the file */

	call open_file (debug_name, "mowse_io_debug", p_iocb_ptr, p_code);

	return;

/**/

/* *** Entry: packet - Internal entry for ws_debug_  *** */

packet:
     entry (p_header, p_packet_ptr, p_packet_len, p_iocb_ptr);


/* ENTRY FUNCTION

Write the packet to the debug file.
*/

/* NOTES
*/

/* Does the file exist? */

	if p_iocb_ptr = null then
	     return;

/* Write the info to the file */

	debug_string_var = "";
	do i = 1 to p_packet_len;
	     if substr (packet_data, i, 1) < " "
		| substr (packet_data, i, 1) > "~"
	     then do;
		chr = substr (packet_data, i, 1);
		debug_string_var = debug_string_var
		     || "\";
		debug_string_var = debug_string_var
		     || byte (mod (divide (rank (chr), 64, 3), 8)
		     + rank ("0"));
		debug_string_var = debug_string_var
		     || byte (mod (divide (rank (chr), 8, 3), 8)
		     + rank ("0"));
		debug_string_var = debug_string_var
		     || byte (mod (rank (chr), 8)
		     + rank ("0"));
	     end;
	     else
		debug_string_var = debug_string_var
		     || substr (packet_data, i, 1);
	end;

	if substr (packet_data, 1, 1) = byte (1) then do;
	     call extract_type (rank (substr (packet_data, 2, 1)), channel,
		psn, asn);
	     call ws_debug_$line (p_iocb_ptr,
		"^a(^[BG^;FG^;SS^]-^[P^d^;**^s^]-^[A^d^;**^s^]):^a",
		p_header, channel + 1, (psn >= 0), psn, (asn >= 0), asn,
		debug_string_var);
	end;
	else
	     call ws_debug_$line (p_iocb_ptr, "^a^a", p_header,
		debug_string_var);

	return;

/**/

/* *** Entry: trace_close - Internal entry for ws_debug_  *** */

trace_close:
     entry (p_iocb_ptr, p_code);


/* ENTRY FUNCTION

Close and detach the specified IOCB.
*/

/* NOTES
*/

	p_code = 0;
	call close_file (p_iocb_ptr, p_code);

	return;

/**/

/* *** Entry: trace_open - Internal entry for ws_debug_  *** */

trace_open:
     entry (p_info_ptr, p_iocb_ptr, p_code);


/* ENTRY FUNCTION

Open the specified IOCB into which trace info is dumped.
*/

/* NOTES
*/

	p_code = 0;

/* IOCB not null means that it is already open */

	if p_iocb_ptr ^= null then do;
	     p_code = ws_error_$trace_already_on;
	     return;
	end;

/* Determine what to call the file */

	debug_name = "trace.mowse_io_";
	if p_info_ptr ^= null then do;
	     if p_info_ptr -> mowse_io_debug_info.version
		^= mowse_io_info_version_1
	     then do;
		p_code = error_table_$unimplemented_version;
		return;
	     end;

	     if length (p_info_ptr -> mowse_io_debug_info.segment_name) ^= 0
		then
		debug_name
		     = p_info_ptr -> mowse_io_debug_info.segment_name;
	end;

	if index (debug_name, ".mowse_io_") = 0 then
	     debug_name = debug_name || ".mowse_io_";

/* Open the file */

	call open_file (debug_name, "mowse_io_trace", p_iocb_ptr, p_code);

	return;

/**/

%page;

/* INTERNAL PROCEDURES */


/* *** Procedure: close_file - Internal proc for ws_debug_  *** */

close_file:
     proc (p_iocb_ptr, p_code);


/* PROCEDURE FUNCTION

Close and detach the specified file IOCB.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_iocb_ptr	       ptr parameter;	    /* the IOCB to close and detach */

/* OUTPUT PARAMETERS */
dcl p_code	       fixed bin (35) parameter;

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */
	p_code = 0;

/* MAI */

	if p_iocb_ptr = null then
	     return;

	call iox_$close (p_iocb_ptr, p_code);
	if p_code ^= 0 then
	     return;

	call iox_$detach_iocb (p_iocb_ptr, p_code);
	if p_code ^= 0 then
	     return;

	p_iocb_ptr = null;

     end close_file;

/**/

/* *** Procedure: extract_type - Internal proc for ws_debug_  *** */

extract_type:
     proc (p_type, p_channel, p_psn, p_asn);


/* PROCEDURE FUNCTION

Given a type field, extract the channel, packet sequence number and ack
sequence number.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_type	       fixed bin parameter;	    /* Packet type to decipher */

/* OUTPUT PARAMETERS */
dcl p_channel	       fixed bin parameter;	    /* Channel ID */
dcl p_psn		       fixed bin parameter;	    /* Packet SN */
dcl p_asn		       fixed bin parameter;	    /* Packet ACK SN */

/* MISC VARIABLES */
dcl fields	       fixed bin;		    /* Type offset removed */

/* STRUCTURES */

/* INITIALIZATION */
	p_channel = 2;
	p_psn = -1;
	p_asn = -1;

/* MAIN */

	if DatOff <= p_type & p_type < DatOff + DatCnt then do;
	     fields = p_type - DatOff;
	     p_asn = mod (fields, SeqCnt);
	     p_psn = mod (ws_tools_$ars (fields, SeqFld), SeqCnt);
	     channel = ws_tools_$ars (fields, SeqFld + SeqFld);
	end;
	else if AckOff <= p_type & p_type < AckOff + AckCnt then do;
	     fields = p_type - AckOff;
	     p_asn = mod (fields, SeqCnt);
	     p_channel = ws_tools_$ars (fields, SeqFld);
	end;
	else if NakOff <= p_type & p_type < NakOff + NakCnt then do;
	     fields = p_type - NakOff;
	     p_asn = mod (fields, SeqCnt);
	     p_channel = ws_tools_$ars (fields, SeqFld);
	end;
	else
	     return;

     end extract_type;

/**/

/* *** Procedure: open_file - Internal proc for ws_debug_  *** */

open_file:
     proc (p_name, p_switch_name, p_iocb_ptr, p_code);


/* PROCEDURE FUNCTION

Open an IOCB for the specified file on the provided switch name.
*/

/* NOTES
*/

/* INPUT PARAMETERS */
dcl p_name	       char (*) var parameter;    /* Name of file */
dcl p_switch_name	       char (*) parameter;	    /* name of IOCB switch */

/* OUTPUT PARAMETERS */
dcl p_iocb_ptr	       ptr parameter;	    /* IOCB block */
dcl p_code	       fixed bin (35) parameter;

/* MISC VARIABLES */

/* STRUCTURES */

/* INITIALIZATION */

/* MAIN */

	call iox_$attach_name (p_switch_name, p_iocb_ptr,
	     "vfile_ " || p_name, null, p_code);
	if p_code ^= 0 then do;
	     p_iocb_ptr = null;
	     return;
	end;

	call iox_$open (p_iocb_ptr, Stream_output, ""b, p_code);
	if p_code ^= 0 then do;
	     call iox_$detach_iocb (p_iocb_ptr, (0));
	     p_iocb_ptr = null;
	     return;
	end;

     end open_file;

/**/

%page;

/* INCLUDE FILES */
%include mowse_io_constants;
%include iox_modes;
%include mowse_io_control_info;
%include mowse_io_data;

     end;
