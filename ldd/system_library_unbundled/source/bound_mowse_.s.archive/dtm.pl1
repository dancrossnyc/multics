/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-14,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Created.
  2) change(86-08-28,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Looks for the switch attached to mowse_io_ rather than always to
     user_i/o.
  3) change(86-10-07,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Removes the syn_ attached above mowse_io_. Change to find support new
     names for io switches, added call to flush both subchannels being
     transmitted.
  4) change(86-10-09,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Masked around critical switch movements.
  5) change(86-10-10,Flegel), approve(87-07-15,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Look for user_terminal_ as we cannot detach with the video system
     invoked.
  6) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Approved.
  7) change(86-12-03,Flegel), approve(86-12-03,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Removed flushing of background subchannel.
  8) change(86-12-11,Flegel), approve(86-12-11,MCR7580),
     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
     Removed external static "interactive_initiated_disconnect" and replaced
     with a call iox_$close_file to mowse_i/o to tell mowse_io_ what kind of
     disconnect to perform with the PC.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
dtm:
detach_mowse:
     proc ();

/* : PROGRAM FUNCTION

Detach the MOWSE environment.
*/

/* : NOTES
*/

/* MISC VARIABLES */
dcl new_mask	       bit (36) aligned;	    /* IPS mask */
dcl old_mask	       bit (36) aligned;	    /* IPS mask */
dcl syn_iocb_ptr	       ptr;		    /* The iocb attached to the syn_ for mowse_i/o */
dcl iocb_ptr	       ptr;		    /* The iocb attached before mowse_io_ */
dcl mowse_iocb_ptr	       ptr;
dcl code		       fixed bin (35);

/* STRUCTURES */
dcl 01 fsc	       like mowse_io_flush_subchannel_info automatic;

/* EXTERNAL STATIC */

/* SYSTEM CALLS */
dcl hcs_$set_ips_mask      entry (bit (36) aligned, bit (36) aligned);
dcl hcs_$reset_ips_mask    entry (bit (36) aligned, bit (36) aligned);
dcl iox_$control	       entry (ptr, char (*), ptr, fixed bin (35));
dcl terminate_process_     entry (char (*), ptr);
dcl iox_$destroy_iocb      entry (ptr, fixed bin (35));
dcl iox_$look_iocb	       entry (char (*), ptr, fixed bin (35));
dcl com_err_	       entry () options (variable);
dcl iox_$move_attach       entry (ptr, ptr, fixed bin (35));
dcl iox_$detach_iocb       entry (ptr, fixed bin (35));
dcl iox_$close	       entry (ptr, fixed bin (35));
dcl iox_$close_file	       entry (ptr, char (*), fixed bin (35));


/* SYSTEM CALL SUPPORT */
dcl ws_error_$ws_video_invoked
		       fixed bin (35) ext static;
dcl error_table_$unable_to_do_io
		       fixed bin (35) ext static;


/* EXTERNAL CALLS */
dcl get_at_	       entry (char (*), char (*), ptr, fixed bin (35));


/* EXTERNAL CALL SUPPORT */


/* BUILTINS */
dcl addr		       builtin;


/* CONDITIONS */


/* CONSTANTS */
dcl dtm_name	       char (12) int static options (constant)
		       init ("detach_mowse");

/**/
/* INITIALIZATION */


/* MAIN */

/* : If mowse_i/o not found, return */

	call iox_$look_iocb ("mowse_tty", mowse_iocb_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, dtm_name, "While looking for mowse_tty.");
	     return;
	end;

/* : Find the mowse_i/o switch */

	call iox_$look_iocb ("mowse_i/o", syn_iocb_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, dtm_name, "While looking for mowse_i/o.");
	     return;
	end;

/* : Look for the user_terminal_ IOCB so that if it exists, the detachment
     will fail */

	call iox_$look_iocb ("user_terminal_", iocb_ptr, code);
	if code = 0 then do;
	     call com_err_ (ws_error_$ws_video_invoked, dtm_name,
		"MOWSE not detached.");
	     return;
	end;

/* : Flush both FG and BG subchannels */

	fsc.version = mowse_io_info_version_1;
	fsc.subchannel = FG;
	call iox_$control (syn_iocb_ptr, "flush_subchannel", addr (fsc),
	     (0));

/* : Find the switch attached to mowse_io_ */

	call get_at_ ("syn_", "mowse_i/o", iocb_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, dtm_name,
		"Finding iocb attached to mowse_io_.");
	     return;
	end;

/* : Close MOWSE */

	call iox_$close_file (iocb_ptr, "confirmed_disconnect", code);

	if code ^= 0 then do;
	     call com_err_ (code, dtm_name,
		"While closing ^a.", iocb_ptr -> iocb.name);
	     return;
	end;

/* : Detach MOWSE */

	new_mask = ""b;
	call hcs_$set_ips_mask (new_mask, old_mask);
	call iox_$detach_iocb (iocb_ptr, code);
	if code ^= 0 then do;
	     call hcs_$reset_ips_mask (old_mask, new_mask);
	     call fatal_return ();
	end;

/* : Attach the iocb above mowse_i/o to tty_ */

	call iox_$move_attach (mowse_iocb_ptr, iocb_ptr, code);
	if code ^= 0 then do;
	     call hcs_$reset_ips_mask (old_mask, new_mask);
	     call fatal_return ();
	end;
	call hcs_$reset_ips_mask (old_mask, new_mask);

/* : Destroy the iocb to mowse_tty (it is in limbo as the switches have been
     moved around from foo_i/o to tty_) */

	call iox_$destroy_iocb (mowse_iocb_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, dtm_name, "Destroying ^a.",
		mowse_iocb_ptr -> iocb.name);
	     return;
	end;

/* : Close the mowse_i/o (It better be there or all of MOWSE would not have
     been working properly) */

	call iox_$close (syn_iocb_ptr, (0));
	call iox_$detach_iocb (syn_iocb_ptr, (0));
	call iox_$destroy_iocb (syn_iocb_ptr, (0));

/**/
/* INTERNAL PROCEDURES */

/* : *** fatal_return: Internal procedure for detach_mowse *** */

fatal_return:
     proc ();

/* : PROCEDURE FUNCTION

Invoke a call to terminate_process because something really bad has happened.
*/

/* STRUCTURES */
dcl 01 fatal_error_info    aligned,
       02 version	       fixed bin,		    /* Must be 0 */
       02 status_code      fixed bin (35);	    /* Error code to terminate_process_ */


	fatal_error_info.version = 0;
	fatal_error_info.status_code = error_table_$unable_to_do_io;
	call terminate_process_ ("fatal_error", addr (fatal_error_info));

     end fatal_return;

%page;
/* INCLUDE FILES */
%include iocbv;
%include mowse_messages;
%include mowse_io_control_info;
%include mowse;

/* : END */
     end;
