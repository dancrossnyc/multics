/****^  ******************************************
        *                                        *
        * Copyright, (C) Honeywell Limited, 1983 *
        *                                        *
        ****************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-09-18,DGHowe), approve(86-09-18,MCR7420),
     audit(86-09-19,Schroth), install(86-11-20,MR12.0-1222):
     changed the calling sequence of list_init_.
                                                   END HISTORY COMMENTS */


/* format: style3,^delnl,linecom */
fortran_storage_:
     proc (sp, lp, tp) options (support);
create:
     entry (sp, lp, tp);


/* This driver receives control from pl1_operators_ when a call is received
   from a fortran program to create and/or initialize external data storage,
   such as Large and Very Large Arrays.

   Entry Conditions:

   sp          This is the stack pointer to the stack frame of the fortran
               program making the request.
   lp          This is the linkage pointer to the linkage section of the
               program making the request.
   tp          This is a pointer to the text section parameter word.  This
               word is in the format:

               vfd 18/create_relative_offset,18/initialize_relative_offset

               These pointers are offsets from the base of the segment of tp.

*/

/* Create 82-09-07 by T. Oke (UNCA) */

/* Modification History:

   Modified: 27 June 1986, DH & BW - Use new interface to list_init_ and
	set_external_variable_.
   Modified: 16 June 1983, TO- Use condition_info_header, have
	options (support).
   Modified: 29 May 1983, MW - To call sub_err_ if find perprocess static
   Modified: 16 February 1983, TO- Set stack_header.have_static_vlas for use
	of run_.
   Modified: 15 February 1983, TO- Set linkage_header_flags.static_vlas for
	use of run_.
   Modified: 26 January 1983, HH - Replaced 'fill_VLA_addressors' routine.
   Modified: 18 January 1983, TO - Match with CISL implementation of link
	snapping to VLA COMMON from the linker.
*/



dcl	lp		ptr;			/* Pointer to base of linkage section */
dcl	sp		ptr;			/* Pointer to stack frame of caller */
dcl	tp		ptr;			/* Pointer to parameter word */

dcl	(alp, asp, atp)	ptr;			/* actual running pointers */

dcl	1 parm		based (tp),
	  2 create_relp	bit (18) unaligned,		/* relative offset from tp to creation data */
	  2 init_relp	bit (18) unaligned;		/* relative offfset from tp to initialization data */

%include fortran_storage;

/* Based Variables */

dcl	based_ptr		ptr based;
dcl	LA_base_addressor	ptr based (base_addressor_ptr);
dcl	VLA_base_addressor	ptr unaligned based (base_addressor_ptr);

/* Automatic Storage */

dcl	base_addressor_ptr	ptr;
dcl	code		fixed bin (35);
dcl	cp		ptr;			/* pointer to create entry */
dcl	defp		ptr;			/* pointer to definition section */
dcl	found_sw		bit (1) aligned;		/* external was found */
dcl	length		fixed bin (24);		/* number of words needed */
dcl	linkp		ptr;			/* pointer to link */
dcl	looping		bit (1);			/* true while doing lists */
dcl	namep		ptr;			/* pointer to block name from link */
dcl	num_segs_needed	fixed bin;		/* number of segments needed */
dcl	storage_ptr	ptr;
dcl	textp		ptr;			/* pointer to text section */
dcl	type_ptr		ptr;			/* pointer to type_pair */
dcl	variablep		ptr;			/* pointer to variable_node */

dcl	pl1_operators_$VLA_words_per_seg_
			fixed bin (19) external;

dcl	fortran_storage_manager_$alloc
			entry (fixed bin, ptr, ptr);
dcl	list_init_	entry (ptr, ptr, fixed bin (35), ptr, ptr, fixed bin (35));
dcl	set_ext_variable_	entry (char (*), ptr, ptr, bit (1) aligned, ptr, fixed bin (35));
dcl	sub_err_		entry options (variable);


dcl	(addr, addrel, baseno, currentsize, divide, fixed, null, ptr, rel, rtrim, stackbaseptr, string, substr, unspec)
			builtin;

	textp = ptr (tp, "000000"b3);			/* get pointer to text section */
	atp = tp;
	alp = lp;
	asp = sp;
	code = 0;



/* process Storage creation. */

	looping = "1"b;
	if parm.create_relp ^= "777777"b3		/* list exists */
	then do cp = ptr (atp, parm.create_relp) repeat ptr (atp, unspec (cp -> create_entry.next)) while (looping);

		length = cp -> create_entry.length;

/* pl1_operators_$VLA_words_per_seg_ determines the actual addressing which will occur in
   this execution.  It is used to determine the number of segments required. */

		num_segs_needed =
		     divide (length + pl1_operators_$VLA_words_per_seg_ - 1, pl1_operators_$VLA_words_per_seg_, 17);

		if cp -> create_entry.flags.auto
		then do;				/* Automatic storage */
			call fortran_storage_manager_$alloc (num_segs_needed, asp, storage_ptr);
			if cp -> create_entry.init
			then call list_init_ (storage_ptr,
				addrel (cp, currentsize (cp -> create_entry)),
				(cp -> create_entry.length),
				stackbaseptr (), null (), code);
			base_addressor_ptr = addrel (asp, cp -> create_entry.location);
			if cp -> create_entry.flags.LA
			then LA_base_addressor = storage_ptr;
			else call fill_VLA_addressors;
		     end;

		else if cp -> create_entry.flags.static
		then do;				/* Static if not init */
			base_addressor_ptr = addrel (alp, cp -> create_entry.location);
			if cp -> create_entry.flags.LA
			then do;
				if LA_base_addressor = null ()
				then do;
					if alp -> linkage_header_flags.perprocess_static
					then call signal_sub_error;
					call fortran_storage_manager_$alloc (num_segs_needed, alp, storage_ptr);
					if cp -> create_entry.init
					then call list_init_ (storage_ptr,
						addrel (cp, currentsize (cp -> create_entry)),
						(cp -> create_entry.length), stackbaseptr (),
						null (), code);
					LA_base_addressor = storage_ptr;
				     end;
			     end;
			else do;
				if VLA_base_addressor = null ()
				then do;
					if alp -> linkage_header_flags.perprocess_static
					then call signal_sub_error;
					call fortran_storage_manager_$alloc (num_segs_needed, alp, storage_ptr);
					if cp -> create_entry.init
					then call list_init_ (storage_ptr,
						addrel (cp, currentsize (cp -> create_entry)),
						(cp -> create_entry.length), stackbaseptr (),
						null (), code);
					call fill_VLA_addressors;
				     end;
			     end;

/* Set stack_header.have_statis_vlas and linkage_header_flags.static_vlas to
   inform run_ that there will be external segments to preserve. */

			ptr (asp, "0"b) -> stack_header.have_static_vlas = "1"b;
			alp -> linkage_header_flags.static_vlas = "1"b;

		     end;

		else if cp -> create_entry.flags.common
		then do;

/* Find pointer to addressor (base_addressor_ptr -> VLA_base_addressor), and pointer to true full
   link (linkp -> link). */

			base_addressor_ptr = addrel (alp, cp -> create_entry.location);
			linkp = addrel (alp, cp -> create_entry.common_link);

/* If link is unsnapped, or disagrees with 'VLA_base_addressor' then update 'VLA_base_addressor' */

			if linkp -> link.ft2 ^= "46"b3/* snapped */
			then if linkp -> based_ptr ^= VLA_base_addressor
						/* wrong VLA_base_addressor */
			     then do;		/* take link */
				     storage_ptr = linkp -> based_ptr;
				     call fill_VLA_addressors;
				end;
			     else ;

			else do;			/* snap link and fill pointers */
re_try_snap:
				call snap_link (code);
				if code ^= 0
				then do;
					call signal_fortran_storage_error (code,
					     " COMMON block " || cp -> create_entry.block_name);
					goto re_try_snap;
				     end;
				call fill_VLA_addressors;
			     end;
		     end;

		if code ^= 0
		then do;
			call sub_err_ (code, "fortran_storage_",
			     ACTION_CANT_RESTART, null, 0,
			     "An error has occurred while initializing ^a.",
			     cp -> create_entry.block_name);
			return;
		     end;
		if cp -> create_entry.next = 0
		then looping = "0"b;
	     end;
	return;

/* Resolve a linkage error for VLA COMMON. */

resolve_VLA_COMMON_link:
     entry (a_link_ptr, a_def_ptr, a_type_ptr, a_code);


dcl	a_code		fixed bin (35);		/* error code */
dcl	a_def_ptr		ptr;			/* definition ptr, also text section ptr */
dcl	a_link_ptr	ptr;			/* pointer to link  to snap */
dcl	a_type_ptr	ptr;			/* pointer to type_word */


/* When the linker finds a link to VLA COMMON 'link_trap_caller_' will call
   us to resolve the link and initialize it.  We in turn simply call our
   local 'snap_link' procedure. */

	linkp = a_link_ptr;

/* setup for snapping the link and creation of the COMMON.

   text pointer is taken from a_def_ptr, which should be into the text segment
   and therefore usable in our case. */

	atp = ptr (a_def_ptr, "0"b);
	alp = addrel (linkp, linkp -> link.head_ptr);
	call snap_link (a_code);
	return;

fill_VLA_addressors:
     proc;

/*  Function:  to calculate and store the addressors of the base and various */
/*     offsets of a VLA.  The logical address of the VLA is stored in the    */
/*     base addressor and the packed pointer to the offset is stored in each */
/*     offset addressor.  (The logical address of a storage location is just */
/*     its segment number times the maximum length in words of its segment   */
/*     plus its word offset in the segment.  For 256K segments, it is just   */
/*     the packed pointer to the location, considered as an integer.)        */

/*  Global Arguments:                                                        */
/*                                                                           */
/*  base_addressor_ptr  (Input)                                              */
/*     is the address where the value of the base addressor of the VLA is to */
/*     be stored.  The addressors of any offsets into the VLA are stored in  */
/*     successive locations.                                                 */
/*                                                                           */
/*  cp  (Input)                                                              */
/*     is the address of the 'creation_entry' structure which specifies any  */
/*     offsets into the VLA and whether the calling program can operate with */
/*     other than 256K segments.                                             */
/*                                                                           */
/*  storage_ptr  (Input)                                                     */
/*     is the address of the storage that has been assigned to the VLA.      */

dcl	error_table_$resource_unavailable
			fixed bin (35) ext;

dcl	01 VLA_addressors	aligned based (base_addressor_ptr),
	  02 addressor_of_base
			fixed bin (30),
	  02 addressor_of_offset
			(offset_cnt) fixed bin (30);

dcl	offset		(offset_cnt) fixed bin (24) based (offset_ptr);

dcl	i		fixed bin,
	logical_address_of_base
			fixed bin (30),
	logical_address_of_offset
			fixed bin (30),
	offset_cnt	fixed bin,
	offset_ptr	ptr,
	VLA_base_ptr	ptr unaligned;

/*  Copy various input values to local storage so we can get faster access.  */

	offset_cnt = cp -> create_entry.pointer_count;
	if offset_cnt > 0
	then offset_ptr = addr (cp -> create_entry.pointer_offsets);
	VLA_base_ptr = storage_ptr;

/*  If the 256K flag is set, we must ensure that storage is being allocated  */
/*  in 256K segments, since otherwise the calling program will not operate   */
/*  correctly.                                                               */

	if cp -> create_entry.K256
	then do while (pl1_operators_$VLA_words_per_seg_ ^= 262144);
		call signal_fortran_storage_error (error_table_$resource_unavailable,
		     "Program requires storage to be allocated in 256K segments.");
	     end;

/*  Fill in the addressors of the base and offsets into the VLA.  If storage */
/*  is allocated in 256K segments, logical addresses are also packed ptrs    */
/*  and so we can use simpler code which runs much faster.                   */

	if pl1_operators_$VLA_words_per_seg_ = 262144
	then do;					/*  Logical addresses are also packed pointers.  */
		unspec (logical_address_of_base) = unspec (VLA_base_ptr);
		VLA_addressors.addressor_of_base = logical_address_of_base;
		do i = 1 to offset_cnt;
		     VLA_addressors.addressor_of_offset (i) = logical_address_of_base + offset (i);
		end;
	     end;
	else do;					/*  Logical addresses are different than packed pointers.  */
		logical_address_of_base =
		     fixed (baseno (VLA_base_ptr), 12) * pl1_operators_$VLA_words_per_seg_
		     + fixed (rel (VLA_base_ptr), 18);
		VLA_addressors.addressor_of_base = logical_address_of_base;
		do i = 1 to offset_cnt;
		     logical_address_of_offset = logical_address_of_base + offset (i);
		     VLA_addressors.addressor_of_offset (i) =
			logical_address_of_offset
			+ fixed (262144 - pl1_operators_$VLA_words_per_seg_, 18)
			* divide (logical_address_of_offset, pl1_operators_$VLA_words_per_seg_, 12);
		end;
	     end;
     end fill_VLA_addressors;

signal_fortran_storage_error:
     proc (status, details);

/*  Function:  to signal the restartable condition 'fortran_storage_error'.  */

/*  Arguments:                                                               */
/*                                                                           */
/*  status  (Input)                                                          */
/*     is a standard system status code describing why the condition is      */
/*     being signalled.                                                      */
/*                                                                           */
/*  details  (Input)                                                         */
/*     is supplementary information regarding why the condition is being     */
/*     signalled.                                                            */

dcl	status		fixed bin (35),
	details		char (*);

dcl	signal_		entry options (variable);

dcl	size		builtin;

%include condition_info_header;

dcl	01 condition_info	aligned like condition_info_header;

	condition_info.length = size (condition_info);
	condition_info.version = 1;
	unspec (condition_info.action_flags) = ""b;
	condition_info.info_string = rtrim (details);
	condition_info.status_code = status;
	call signal_ ("fortran_storage_error", null, addr (condition_info));
     end signal_fortran_storage_error;

/* Snap a VLA Common link. */

snap_link:
     proc (code);

dcl	code		fixed bin (35);

/* Routine to snap a link, if it is unsnapped, and create the VLA common. */

/* Global Inputs:
   atp	  Text pointer.  Pointer to some point in the text section.
   alp    Linkage ptr.   Pointer to start of linkage section in area.linker.
   linkp  Link pointer.  Pointer to the link ptr to be snapped.

   Local Inputs

   code   return error code.

   Outputs:
   storage_ptr Has pointer to start of variable, whether created or not.
   */

dcl	block_name	char (32) varying;

/* if link is unsnapped, then snap it and create the common if necessary. */
/* set_ext_variable_ will also initialize the common.		    */

	if linkp -> link.ft2 = "46"b3			/* unsnapped */
	then do;

/* defp is pointer to definition section. */
/* type_pair points to type_pair word.    */
/* init_info_ptr is initialization block. */

		defp = ptr (atp, alp -> virgin_linkage_header.def_offset);
		type_ptr = addrel (defp, (addrel (defp, linkp -> link.exp_ptr) -> exp_word.type_ptr));
		namep = addrel (defp, type_ptr -> type_pair.ext_ptr);
		block_name = substr (namep -> name.char_string, 1, fixed (namep -> name.nchars, 9));
		init_info_ptr = addrel (defp, type_ptr -> type_pair.trap_ptr);
		call set_ext_variable_ ((block_name), init_info_ptr, stackbaseptr (), found_sw, variablep, code);
		if code ^= 0
		then if ^found_sw
		     then return;

		storage_ptr = variablep -> variable_node.vbl_ptr;
		linkp -> based_ptr = storage_ptr;	/* snap link too */
	     end;

/* accept the previously snapped link. */

	else storage_ptr = linkp -> based_ptr;
	return;
     end snap_link;
%page;
signal_sub_error:
     proc;

/* Subroutine to call sub_err_ if the program has both perprocess static and
   static LA/VLAs.  For now we specify action_cant_restart because
   there is no easy way to reset the active perprocess static flag.
*/

dcl	retval		fixed bin (35);
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	dirname		char (168);
dcl	entryname		char (32);
dcl	dirname_length	fixed bin;

	retval = 0;
	call hcs_$fs_get_path_name (textp, dirname, dirname_length, entryname, code);
	call sub_err_ (0, "fortran_storage_", ACTION_CANT_RESTART, null, retval,
	     "Attempt by perprocess static segment ^a>^a^/to use static (very) large arrays.  This combination is illegal."
	     ,
	     dirname, entryname);
	return;					/* should never get here */

     end signal_sub_error;
%page;
%include system_link_init_info;
%include linkdcl;
%include system_link_names;
%include stack_header;

%include sub_err_flags;

     end fortran_storage_;
