/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* **********************************************************************
   ************************************************************************
   *
   *
   *	$  INCODE  CARD  PROCESSING
   *
   *  This procedure processes $ INCODE cards in the following format:
   *
   *	$  INCODE  type
   *
   *  where type is the code type to be translated into bcd. Currently,
   *  this module takes three types, ibmf, ibmc, and ibmel. The
   *  actual implementation of this card is done in gcos_incode_ which will do
   *  the actual translation. All that is done in this module is to set some
   *  translation directing switches in external static.
   *
   *
   *  	WRITTEN BY DICK SNYDER DECEMBER 20,1971
   *      MODIFIED BY T.CASEY DECEMBER 1972
   *	MODIFIED BY D.KAYDEN JANUARY 1975
   *	Modified by M. R. Jordan, August 1977
   *
   ************************************************************************
   ********************************************************************** */




gcos_cc_incode_: proc (card);

dcl  card char (80);
dcl  gcos_error_ ext entry options (variable);
dcl  gcos_et_$cc_bad_field fixed bin(35) ext;
dcl  gcos_et_$cc_missing_field fixed bin(35) ext;
dcl  gcos_get_cc_field_ ext entry (char (80), char (*), fixed bin(24));
dcl  result fixed bin(24);
dcl  type char (6);

/*

   Process a $ INCODE control card.

   First get the incode specification (type) from the control card.

*/


	call gcos_get_cc_field_ (card, type, result);	/* get translation type */
	if result ^= 0 then call gcos_error_ (gcos_et_$cc_missing_field, "Missing incode specification.^/^a^2x^a",
	     gcos_ext_stat_$card_num, card);


/*

   Now process the incode type.  If it is unsupported, say so.
   If it is unrecognized abort the processing of the job.

*/


	if type = "ibmf" then gcos_ext_stat_$incode = 1;
	else if type = "ibmc" then gcos_ext_stat_$incode = 2;
	else if type = "ibmel" then gcos_ext_stat_$incode = 3;
	else if type = "reset" then gcos_ext_stat_$incode = 0;
	else if type = "ge225" | type = "ibmpl" then call gcos_error_ (gcos_et_$cc_bad_field,
	     "An unsupported incode specification has been encountered.  ""^a""^/^a^2x^a", type,
	     gcos_ext_stat_$card_num, card);
	else call gcos_error_ (gcos_et_$cc_bad_field, "Unrecognized incode specification.  ""^a""^/^a^2x^a",
	     type, gcos_ext_stat_$card_num, card);


	return;

%include gcos_ext_stat_;



     end gcos_cc_incode_;
