/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_close_file_: proc (fp);

/*
   This procedure is called with a pointer to the file info
   block of the file to be closed. The disposition of the file
   is checked. If is is save, no action is taken. If it is
   continue and the file is a tape, a set file protect command
   is issued and the tape is rewound. If the disposition of the
   file is release or dismount, the file is detached. If the
   file is a scratch file, it is also deleted. If it is a print
   or a punch file, its pathname is paced in the sysout queue.

   Author: DICK SNYDER SEPTEMBER 21, 1970
   Change: T.CASEY DECEMBER 1972, OCTOBER 1973, AUGUST 1974
   Change: D. KAYDEN  APRIL 1974, JULY 1974, MARCH 1975, JUNE 1975
   Change: Dave Ward	09/13/81 structured.
   Change: R. Barstad         11/03/82  IDS2 concurrency control on detach
*/
dcl  fp                       ptr parm;
	fibptr = fp;
	if substr (fib.disp, 1, 1) then do;		/* disp = save */
	     if fib.tape then			/* tape */
		if fib.disp = "11"b then do;		/* with C disposition? */
		     call ios_$order ((fib.stream), "protect", null, status); /* set file to protected */
		     if code ^= 0 then do;		/* fatal error */
			err_msg = "from ios_$order protect ^a";
error_rtrn:		;
			call gcos_error_ (code, err_msg, fib.pathnm);
			return;
		     end;

		     call ios_$order ((fib.stream), "rewind", null, status); /* rewind tape */
		     if code ^= 0 then do;		/* fatal error */
			err_msg = "from ios_$order rewind ^a";
			go to error_rtrn;
		     end;
		     fib.disp = "10"b;		/* set file protect need not be done again */
		end;

	     return;				/* saved file - do not detach */
	end;

	if ^fib.attached then go to wipe;		/* stream never attached */

	if fib.console then go to wipe;		/* no attachment exists for a typewriter console either */

	if fib.null then go to wipe;			/* no attachment exists for a null file */

	if fib.tape then go to detach;

	call expand_path_ (addr (fib.pathnm), 168,	/* break pathname up */
	     addr (pname), addr (ename), code);		/* into entry and directory name */
	if code ^= 0 then go to path_error;		/* fatal error ? */

	if fib.perm then go to detach;		/* permanent disk file */

	if fib.print | fib.punch then do;
	     if fib.current = 0 then
		if fib.buffer = null		/* see if anything was written on the file */
		then go to detach;			/* if not, ignore it */


/* File is ready to be printed or punched. Add pathname of file to sysout */
/* queue. There is room for 10 files. */

	     save_data.sysout_queue (save_data.sqindex) = ename; /* copy entry name to queue */

/* set media code of sysout file */

	     if fib.print then
		save_data.sysout_queue_media (save_data.sqindex) = 3;
	     else save_data.sysout_queue_media (save_data.sqindex) = 1;

	     save_data.sqindex = save_data.sqindex + 1;	/* bump free entry index */

	end;
	else delete = "1"b;				/* file is scratch - remember to delete it */

detach:	;
	call ios_$detach ((fib.stream), "", "", status);	/* detach */
	if code ^= 0 then
	     if code ^= error_table_$ioname_not_found then do; /* fatal error ? */
		err_msg = "from ios_$detach ^a";
		go to error_rtrn;
	     end;

                                                            /* deallocate IDS2 file */
	if fib.perm & fib.type /* random */
	     then if gcos_ids2_concur_$have_xid(pname,ename,code) then do;
		call gcos_ids2_concur_$deallocate(pname,ename,fib.read, fib.write,code);
		if code ^= 0 then do;
		     err_msg = "from gcos_ids2_concur_$deallocate ^a";
		     goto error_rtrn;
		     end;
		end;

	if delete then do;
	     if gcos_ext_stat_$save_data.debug then	/* if user is interactive and wants questions */
		delete_switches = "27"b3 ;		/* noforce,question,nodirs,segs,links,chase */
	     else delete_switches = "07"b3 ;		/* noforce,noquestion,nodirs,segs,links,chase */

	     call delete_$path (pname, ename, delete_switches, "gcos", code);
	     if code ^= 0 then			/* if anything wrong */
		if code ^= error_table_$noentry then do; /* anything but file never having been written on, that is */
		     if ^gcos_ext_stat_$save_data.continue then /* unless -continue argument given, */
			if ^gcos_ext_stat_$save_data.endjob then do; /* or already aborting */
path_error:		     ;
			     err_msg = "attempting to delete ^a"; /* bomb out */
			     go to error_rtrn;
			end;
		     if ^gcos_ext_stat_$save_data.brief then /* if user did not say -brief, print warning */
			call com_err_ (code, "gcos_close_file_", "attempting to delete ^a", fib.pathnm);
		end;
	end;

/* Remove buffer. */

wipe:	;
	fib.used = "0"b;				/* set unused */
	if fib.buffer_indx > 0 then
	     buffer_in_use (fib.buffer_indx) = "0"b;
	fib.buffer_indx = 0;
	fib.buffer = null;				/* set buffer null */

	return;
%page;
/*   Variables for gcos_close_file_:		 */
/*   IDENTIFIER		ATTRIBUTES	 */
dcl  addr                     builtin;
dcl  code                     fixed bin(35) based (addr (status))	/* error rtrn code */;
dcl  com_err_                 ext entry options (variable);
dcl  delete                   bit (1) init ("0"b);
dcl  delete_$path             ext entry (char (*), char (*), bit (6), char (*), fixed bin(35));
dcl  delete_switches          bit (6);
dcl  ename                    char (32)	/* entry name of a file */;
dcl  error_table_$ioname_not_found ext static fixed bin(35)	/* error code for no attach */;
dcl  error_table_$noentry     ext static fixed bin(35)	/* error code for no entry */;
dcl  err_msg                  char (60) var;
dcl  expand_path_             ext entry (pointer, fixed bin(24), pointer, pointer, fixed bin(35));
dcl  gcos_error_              ext entry options (variable);
dcl  gcos_ids2_concur_$deallocate ext entry (char(*), char(*), bit(1), bit(1), fixed bin (35));
dcl  gcos_ids2_concur_$have_xid ext entry (char(*), char(*), fixed bin(35)) returns (bit(1));
dcl  ios_$detach              ext entry (char (*) aligned, char (*), char (*), bit (72) aligned);
dcl  ios_$order               ext entry (char (*) aligned, char (*), ptr, bit (72) aligned);
dcl  null                     builtin;
dcl  pname                    char (168) 	/* path name of a file */;
dcl  status                   bit (72) aligned	/* ios_ status */;
dcl  substr                   builtin;
dcl  endoutput                char (33) int static init ("     ***end of output***
");
%page;
%include gcos_fibs;
%page;
%include gcos_ext_stat_;
     end gcos_close_file_;
