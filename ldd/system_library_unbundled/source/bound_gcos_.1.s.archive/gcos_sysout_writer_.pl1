/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
gcos_sysout_writer_: proc;

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* PROCEDURE TO SEND SYSOUT FILES TO PRINTER OR CARD PUNCH

   Calls gcos_sysprint and gcos_syspunch commands to translate files from BCD
   to Multics-usable format (Multics ASCII for printer, RAW mode for punch).

   Calls dprint and dpunch commands (if necessary) to place converted files on
   daemon output queues.

   We use cu_$cp to call these commands. This has two side effects:
   
   1) ABBREV  may  be used to supply default arguments to these commands
   (e.g.  -he -ds), and
   
   2)  the  search  rule  "referencing  directory" will not find gcos_sysprint
   or gcos_syspunch, even if they are  in  the  same  directory  as  the  gcos
   simulator.

*/
%page;
/*

   WRITTEN BY T. CASEY	MAR 73
   MODIFIED BY T. CASEY	APR 74
			AUG 74
   MODIFIED BY D. KAYDEN	MAR 75
			JUN 75
   MODIFIED BY R.H. MORRISON  JUL 75
   MODIFIED BY S.C. AKERS	DEC 81	Fix "-syot_dir" ctl_arg so gsp and gspn
				look in the right place for input, and
				put the output in the working_dir.

*/
%page;
	call initialize_routine;

	do   i = save_data.sqindex-1 to 1 by -1;	/* sqindex points to first FREE spot in queue */
	     converted = "0"b;
	     call build_io_pathnames;			/* Build the pathnames for input and output files. */

	     medium = save_data.sysout_queue_media (i);	/* pick up media code */

	     if   medium = 1			/* punch file */
	     then call process_punch;
	     else if   medium = 3
		then call process_print;		/* print file */

		else do;				/* must be bad media code */
		     call com_err_ (0, "gcos",
				"Bad sysout media code; file not processed:^/^a",
				in_pathname);

		     goto next_file;
		     end;

	     if ^gcos_ext_stat_$save_data.nosave	/* if save/restart is active */
	     then do;
		save_data.sqindex = i;		/* set sysout queue index so that this entry is not */
						/* processed again */
		saved_sqindex = i;			/* and also saved value of sqindex */
		end;

	     if   delete
	     then call delete_original;

	     if   gcos_ext_stat_$save_data.gtssflag
	     then if   not_queued
		then call gcos_gtss_update_$status_update (OUTPUT_WAITING);
		else call gcos_gtss_update_$status_update (OUTPUT_COMPLETE);

	     if   ^gcos_ext_stat_$save_data.brief	/* unless told otherwise,       */
	      &   not_queued			/* print names of files not queued for daemon output */
	     then do;
		if ^printed_heading			/* print heading once PER CALL */
		then do;
		     call ioa_ ("^/GCOS sysout files NOT queued for daemon output:");
		     printed_heading = "1"b;
		     end;
		if   ^converted			/* Which name to ship to user. */
		then call ioa_ (in_pathname);
		else call ioa_ (out_pathname);
		end;
next_file:     ;
	     end;

	return;
%page;
build_io_pathnames: proc;				/* Build the input and output pathnames. */

	in_pathname = save_data.syot_dir
		  ||">"
		  ||rtrim (save_data.sysout_queue (i));

	l = length (in_pathname);			/* remember pathname length */

	out_pathname = rtrim (output_dir)
		   ||">"
		   ||rtrim (save_data.sysout_queue (i));

	return;

end build_io_pathnames;
%page;
command_error_handler: proc; 				/* Does  the dirty work when command_error
						   occurs in the syspunch,  sysprint,  dpunch,
						   or dprint routines.  */
	
	on condition (command_error);			/* Can't handle it here. */
	command_error_switch = "1"b;			/* turn on a static switch */
	call continue_to_signal_ (code);		/* and then go print normal message on terminal */
	if code ^= 0				/* can't figure why, but better say something */
	then call com_err_ (code, "gcos_sysout_writer_:", 
			     "Error while attempting to ""continue_to_signal_ command_error"" ");
	revert command_error;

	return;

end command_error_handler;
%page;
delete_original: proc;
	delete = "0"b;				/* turn off delete switch */
	call delete_$path   (syotdir,			/* directory portion of pathname */
			(save_data.sysout_queue (i)),	/* entry portion of pathname */
			"000100"b,		/* noforce,noquestion,nodirectories,segments,nolinks,nochase */
			"gcos",			/* name of caller */
			code);			/* error code */
	if code ^= 0
	then call com_err_ (code, "gcos", "while attempting to delete ^a",
			substr (in_pathname, 1, l));	/* pathname, less .raw or .list suffix */

	return;

end delete_original;
%page;
initialize_routine: proc;				/* Performs initialization chores. */


	delete, not_queued, printed_heading = "0"b;	/* Turn off the flags. */

	syotdir = save_data.syot_dir;			/* Save for "delete" call */
	output_dir = get_wdir_ ();			/* Where to put the Multics
						   printer and punch files. */

	saved_sqindex_offset = fixed (rel (addr (save_data.sqindex)))
			   - fixed (rel (addr (gcos_ext_stat_$save_data)));
	saved_sqindex_ptr = addrel (addr (restart_control.restart_data),
			        saved_sqindex_offset);

	return;

end initialize_routine;
%page;
process_print: proc;				/* Process a print file. */

	not_queued = "1"b;				/* switch turned off only if dprint called later */
	if gcos_ext_stat_$save_data.list		/* If we need to translate from bcd */
	then do;					/* then call translation command */
	     out_pathname = out_pathname || ".list";

	     varline = "gcos_sysprint " || in_pathname || " " || out_pathname;

	     if   gcos_ext_stat_$save_data.lower_case
	     then varline = varline || " -lower_case";
	     line = varline;
	     len = length (varline);
	     command_error_switch = "0"b;
	     on condition (command_error)
	     call command_error_handler;
	     call cu_$cp (addr (line), len, code);
	     revert command_error;
	     if   code ^= 0
	      |   command_error_switch
	     then do;				/* if any problem */
		call com_err_ (code, "gcos_sysout_writer_",
			     "Error in sysout conversion; original not deleted:^/^a",
			     in_pathname);

		goto next_file;
		end;

	     delete = "1"b;				/* remember to delete original */
	     converted = "1"b;
	     if   gcos_ext_stat_$save_data.dprint	/* If we're to print it */
	     then do;				/* then call dprint command */
		varline = "dprint " || gcos_ext_stat_$dpo || " " || out_pathname;
		line = varline;
		len = length (varline);

		command_error_switch = "0"b;
		on condition (command_error)
		call command_error_handler;
		call cu_$cp (addr (line), len, code);
		revert command_error;
		if   code ^= 0
		 |   command_error_switch		/* if any problem */
		then do;
		     call com_err_ (code, "gcos_sysout_writer_",
				"^/Error in sysout call; listing file not dprinted or deleted:^/^a",
				out_pathname);
		     goto next_file;
		     end;

		not_queued = "0"b;			/* file on dprint queue so turn off switch */
		end;
	     end;

	return;

end process_print;
%page;
process_punch: proc;

	not_queued = "1"b;				/* switch turned off only if dpunch called later */

	if gcos_ext_stat_$save_data.raw		/* If we're to translate from BCD */
	then do;					/* then call translation command */
	     out_pathname = out_pathname || ".raw";	/* syspunch so names its output file */
	     varline = "gcos_syspunch " || in_pathname;
	     line = varline;
	     len = length (varline);

	     command_error_switch = "0"b;
	     on condition (command_error)
	     call command_error_handler;
	     call cu_$cp (addr (line), len, code);
	     revert command_error;

	     if code ^= 0
	      | command_error_switch
	     then do;				/* if any problem, print message and go on to next file */
		call com_err_ (code, "gcos_sysout_writer_",
			     "Error in sysout conversion; original not deleted:^/^a",
			     in_pathname);
		goto next_file;
		end;

	     delete = "1"b;				/* remember to delete the original */
	     converted = "1"b;

	     if gcos_ext_stat_$save_data.dpunch		/* if to be dpunched */
	     then do;
		varline = "dpunch " || gcos_ext_stat_$dpno || " " || out_pathname;
		line = varline;
		len = length (varline);

		command_error_switch = "0"b;
		on condition (command_error)
		call command_error_handler;
		call cu_$cp (addr (line), len, code);
		revert command_error;
		if code ^= 0 | command_error_switch
		then do;				/* if problem in dpunch */
		     call com_err_ (code, "gcos_sysout_writer_",
				"Error in sysout dpunch call; output file will not dpunched or deleted:^/^a",
				out_pathname);
		     goto next_file;
		     end;

		not_queued = "0"b;			/* file on dpunch queue, so turn off switch */
		end;

	     end;

	return;

end process_punch;
%page;
/*	External Entries	*/

dcl  ioa_ ext entry options (variable);
dcl  size builtin;
dcl  com_err_ ext entry options (variable);
dcl  continue_to_signal_ ext entry (fixed bin(35));
dcl  cu_$cp ext entry (ptr, fixed bin(24), fixed bin(35));
dcl  delete_$path ext entry (char (*), char (*), bit (6), char (*), fixed bin(35));
dcl  get_wdir_ entry() returns(char(168));
dcl  gcos_restart_$save ext entry;

/*	Work Variables 	*/

dcl  code			fixed bin(35);
dcl  command_error		condition;
dcl  command_error_switch	bit (1) aligned int static;
dcl  converted		bit (1);
dcl  delete		bit (1);			/* switch on if bcd file to be deleted */
dcl  in_pathname		char (168) varying;
dcl  len			fixed bin(24);
dcl  line			char (500);		/* fixed length version for cu_$cp parameter */
dcl  not_queued		bit (1);			/* switch on if "not queued" message needed for this file */
dcl  out_pathname		char (168) varying;
dcl  output_dir		char (168);
dcl  printed_heading	bit (1);			/* switch on if "not queued" heading already printed */
dcl  saved_sqindex		fixed bin (24)
			based (saved_sqindex_ptr);	/* sqindex value in save_data */
dcl  saved_sqindex_offset	fixed bin(24);
dcl  saved_sqindex_ptr	ptr;
dcl  syotdir		char (168);
dcl  varline		char (500) varying;		/* place to construct command line for cu_$cp calls */
dcl (addr, addrel, rel, index, length, substr) builtin;
dcl (i, j, l, medium) fixed bin(24);
%page;
%include gcos_ext_stat_;
%page;
%include gcos_gtss_dcls;
%page;
%include gcos_restart_control_;

end gcos_sysout_writer_;
