/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* *******************************************************************************************
   *******************************************************************************************
   *
   *
   *	Written by M. R. Jordan, October 1977
   *  Modified:  Ron Barstad  83-08-02  Added "_" as a valid fms name char.
   *  Modified:  Ron Barstad  84-02-21  Fixed fence check for userid 
   *
   *******************************************************************************************
   ******************************************************************************************* */
%page;
gcos_build_pathname_: proc (a_cfdesc_ptr, buf_ptr, dir_name, entry_name, fms_code);

	cfdesc_ptr = a_cfdesc_ptr;			/* Initialize any data items needed. */
	fms_code = (72)"0"b;
	fms_return_code_ptr = addr (fms_code);
	fms_return_code.termination_indicator = "1"b;
%page;
/*

   Now start to build the pathname.  First we must get the proper prefix
   for the user's current mode of operation.

*/


	pathname = save_data.pathname_prefix;
	if cfdesc_name = (72)"1"b then do;
	     if (^save_data.skip_umc) & gcos_ext_stat_$userid = "" then
		call gcos_mme_bort_$system (gcos_et_$unimp_mme,
		"A $ USERID card is necessary if UMC substitution is to be performed by the system.");
	     else name = gcos_ext_stat_$userid;
	end;
	else call bcd_to_ascii_ (cfdesc_name, name);
	if verify (rtrim (name), VALID_FMS_CHARS) ^= 0 then do ;


bad_char:

	     code = gcos_et_$fms_bad_cfdesc;
	     fms_return_code.bad_name_loc = rel (cfdesc_ptr);


report_error:

	     call gcos_fms_error_ (code, buf_ptr, fms_code);
	     return;
	end;
	if ^save_data.skip_umc then pathname = pathname || ">" || rtrim (name);
%page;
/*

   At this point we are ready to process the catalog/filename description
   past the umc name.  We must continuously check for the fence (a
   word equal to minus one) and for an out of bounds condition.

*/


	cfdesc_ptr = addrel (cfdesc_ptr, 4);

	do while (fence ^= (36)"1"b);
	     call bcd_to_ascii_ (cfdesc_name, name);
	     if verify (rtrim (name), VALID_FMS_CHARS) ^= 0 then goto bad_char ;
	     pathname = pathname || ">" || rtrim (name);
	     cfdesc_ptr = addrel (cfdesc_ptr, 4);
	end;
%page;
	call expand_pathname_ ((pathname), dir_name, entry_name, code);
	if code ^= 0
	then call gcos_mme_bort_$system (code,
	     """^a"" - attempting to build a Multics pathname from a GCOS catalog/filename description",
	     pathname);

	return;
%page;
dcl  VALID_FMS_CHARS char (39) static internal options (constant) init (".-0123456789_abcdefghijklmnopqrstuvwxyz");
dcl  a_cfdesc_ptr ptr;
dcl  addrel builtin;
dcl  bcd_to_ascii_ entry (bit (*), char (*));
dcl  buf_ptr ptr;
dcl  cfdesc_name bit (72) based (cfdesc_ptr);
dcl  cfdesc_ptr ptr;
dcl  code fixed bin(35);
dcl  dir_name char (*);
dcl  entry_name char (*);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin(35));
dcl  fence bit (36) aligned based (cfdesc_ptr);
dcl  fms_code bit (72) aligned;
dcl  gcos_et_$fms_bad_cfdesc fixed bin(35) ext;
dcl  gcos_et_$unimp_mme fixed bin(35) ext;
dcl  gcos_fms_error_ entry (fixed bin(35), ptr, bit (72) aligned);
dcl  gcos_mme_bort_$system entry options (variable);
dcl  name char (12);
dcl  pathname char (256) varying;
dcl  rel builtin;
dcl  rtrim builtin;
dcl  verify builtin;
%page;
%include	gcos_ext_stat_;
%page;
%include gcos_fms_return_code_;

end gcos_build_pathname_;
