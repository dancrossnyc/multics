/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ***************************************************************************************
   *****************************************************************************************
   *
   *
   * 	$  E N D J O B  C A R D  P R O C E S S O R
   *
   *
   *  This procedure processes $ ENDJOB cards which have the following format:
   *
   *
   *     CONTROL CARD:		ENDJOB
   *
   *
   *     FORMAT:		$    ENDJOB
   *
   *
   *     FIELDS:		none
   *
   *  This procedure writes termination messages on console and execution report;
   *  finishes writing (and outputs) the execution report, sysout, print, and punch
   *  files; closes all files; and terminates the simulation via a nonlocal GOTO
   *  to a label in procedure gcos_gein_, thus cleaning up the stack.
   *
   *  This procedure is called:
   *
   *	1) when a $ ENDJOB card is encountered by gcos_gein_;
   *
   *	2) when the job is to be terminated for any reason other than a $ ENDJOB card,
   *	   (provided that it has not already been called once - thus an error in
   *	   this procedure or one that it calls cannot cause an infinite loop).
   *
   *
   *
   *****************************************************************************************
   *************************************************************************************** */
%page;
/*
   *
   *	WRITTEN BY DICK SNYDER	SEP 70
   *      MODIFIED BY T.CASEY		DEC 72
   *				OCT 73
   *				APR 74
   *				AUG 74
   *	MODIFIED BY D. KAYDEN	APR 74
   *				FEB 75
   *	MODIFIED BY R.H. MORRISON	MAY 75
   *	MODIFIED BY S.C. AKERS	DEC 81	Change \014 to %page;
  Modified:  Ron Barstad  82-11-00  Fix format of EOJ console msg
  Modified:  Ron Barstad  83-04-28  Print EOJ only if not abort and before dprint queued message
*/
%page;
gcos_cc_endjob_: proc (card);

	gcos_ext_stat_$save_data.endjob = "1"b;		/* remember that this procedure has been called
						   in this job, and therefore should not be
						   called again after any fault or error */

	er = gcos_ext_stat_$er;			/* copy fib pointer for speed */

	sysprint_stream = gcos_ext_stat_$prt -> fib.stream; /* copy stream names for speed */
	er_stream = er -> fib.stream;

/* job accounting */

	call gcos_time_convert_ ((clock_ ())-gcos_ext_stat_$job_real_time, rtt.time); /* get real time for job */

	call gcos_write_$ptr (er, string (rtt), "11111100"b); /* write on execution report */

	call hcs_$get_usage_values (k, cptime, k);	/* get current cputime */

	call gcos_time_convert_ (cptime-gcos_ext_stat_$job_cpu_time, ptt.time); /* get cp time for job */

	call gcos_write_$ptr (er, string (ptt), "11111100"b); /* put on execution report */

	call gcos_write_$ptr (er, eoj, "11111100"b);	/* end job on execution report */

	call gcos_write_$ptr (er, "", (8)"0"b);		/* eof on execution report */

/* Append execution report to sysout print collector file. First, though,
   write an ASCII record on that file, flagging the start of the execution report,
   force out the block containing that record, find the offset in the file of the
   next block (which will be the first block of the execution report), and write
   that offset, and the snumb of the job, into a record at the beginning of the
   sysout print collector file, that was written there earlier, to reserve
   space for this information. This facilitates printing the file in a GCOS-like
   format, by gcos_sysprint. */

	call gcos_write_$record_ptr (gcos_ext_stat_$prt, endrecord, (8)"0"b); /* write "start ex rpt" */

	call gcos_write_$force_ptr (gcos_ext_stat_$prt);	/* force out the block */

	call ios_$tell (sysprint_stream, "write", "first", ex_rpt_offset, status); /* get offset of next block */
	if code ^= 0 then do;
	     error_entry = "tell";
p_error:	     error_stream = sysprint_stream;
ios_error:     call gcos_error_ (code, "from ios_$^a ^a", error_entry, error_stream);
	end;

	call ios_$seek (sysprint_stream, "write", "first", 4, status); /* seek to word 4 (counting from zero)
						   0=bcw,1=rcw,2=newline,3=rec1,4=offset */
	if code ^= 0 then do;
seek_error:    error_entry = "seek";
	     goto p_error;
	end;

	first_record_subset.er_offset = ex_rpt_offset;	/* put in offset of first block */
	first_record_subset.snumb = substr (save_data.actid, 1, 5); /* put in snumb */

	call ios_$write (sysprint_stream, addr (first_record_subset), 0, 3, j, status); /* write 3 words */
	if code ^= 0 then do;
	     error_entry = "write";
	     goto p_error;
	end;

	call ios_$seek (sysprint_stream, "write", "first", ex_rpt_offset, status);
						/* seek write pointer back to first block */
	if code ^= 0 then goto seek_error;

	call ios_$seek (er_stream, "read", "first", 0, status); /* seek read pointer to start of file */
	if code ^= 0 then do;
	     error_entry = "seek";
er_error:	     error_stream = er_stream;
	     goto ios_error;
	end;

	eofsw = ""b;
	do while (^eofsw);				/* read 'til eof on execution report */
	     call ios_$read (er_stream, addr (buffer), 0, 320, j, status); /* read exec. report block */
	     if code ^= 0 then do;
		error_entry = "read";
		goto er_error;
	     end;

	     eofsw = substr (status, 46, 1);		/* save eof switch returned by ios_$read */

	     call gcos_write_$block_ptr (gcos_ext_stat_$prt, buffer); /* write block on sysout print collector */
						/* we use gcos_write_$block_ptr instead of ios_$write, here,
						   because the former puts the correct bsn into the bcw before
						   writing, thus avoiding bsn errors while reading it back */

	end;					/* end of do-while group */
						/* we fall thru here when we hit eof */
	er -> fib.print = "0"b;			/* reset so close_file_ will not queue it for sysout */


/* avoid writing EOF on an otherwise empty sysout punch collector file */

	if gcos_ext_stat_$pch -> fib.buffer ^= null then	/* if file not empty */
	     call gcos_write_$record_ptr (gcos_ext_stat_$pch, "", (8)"0"b); /* write EOF on it */

	if ^gcos_ext_stat_$save_data.nosave then	/* if save/restart specified */
	     call gcos_restart_$save;			/* save restart data */

restart:	entry;					/* entry for restart */

	if ^gcos_ext_stat_$save_data.brief & ^gcos_ext_stat_$save_data.this_act_abort
	     then do;	/* print end of job message on terminal,
						   unless user said -brief */
	     call date_time_ ((clock_ ()), holdtime);	/* get date and time */
	     call ioa_ (" *EOJ  ^a  @^a", save_data.actid, substr (holdtime, 11, 6));
	end;
/* queue sysout and close files */

	fibptr = addr (save_data.fibs);		/* close all remaining files */
	do i = 1 to hbound (save_data.fibs, 1);

	     if ^fib.used then go to not_used;
	     fib.disp = "01"b;			/* force file to be released */
	     call gcos_close_file_ (fibptr);

not_used:	     fibptr = addrel (fibptr, size (fib));
	end;

	call ios_$detach ("glib", "", "", status);	/* now detach the software libraries */
	if gcos_ext_stat_$save_data.userlib then
	     call ios_$detach ("slib", "", "", status);


	call gcos_sysout_writer_;			/* dispose of all files which are */
						/* queued in the sysout queue */

	call hcs_$truncate_seg (gcos_ext_stat_$gcos_slave_area_seg, 0, code); /* truncate slave segment */

	call ios_$detach ("gcos_job_stream_", "", "", status); /* in case it was a msf */
	call delete_$path (string (gcos_ext_stat_$save_dir), gcos_ext_stat_$job_id || ".job_deck", "000100"b, "gcos", code);

	if ^gcos_ext_stat_$save_data.nosave then
	     call delete_$path (string (gcos_ext_stat_$save_dir), gcos_ext_stat_$job_id || ".save_data",
	     "000100"b, "gcos", code);		/* get rid of it */
	goto gcos_ext_stat_$normal_return;		/* revert stack and return to gcos_gein_ */
%page;
/* 	D E C L A R A T I O N S				 */


%include gcos_ext_stat_;
/* 	External Entries					 */


dcl (ios_$read, ios_$write) ext entry (char (*) aligned, ptr, fixed bin(24), fixed bin(24), fixed bin(24), bit (72) aligned);
dcl size builtin;
dcl (ios_$seek, ios_$tell) ext entry (char (*) aligned, char (*), char (*), fixed bin(24), bit (72) aligned);
dcl  ios_$detach ext entry (char (*) aligned, char (*), char (*), bit (72) aligned);
dcl  clock_ ext entry returns (fixed bin(71));
dcl  ioa_ ext entry options (variable);
dcl  gcos_time_convert_ ext entry (fixed bin(71), char (19));
dcl  gcos_write_$ptr ext entry (ptr, char (*), bit (8));
dcl  gcos_write_$record_ptr ext entry (ptr, char (*), bit (8));
dcl  gcos_write_$block_ptr ext entry (ptr, char (*));
dcl  gcos_write_$force_ptr ext entry (ptr);

dcl  hcs_$get_usage_values ext entry (fixed bin(24), fixed bin(71), fixed bin(24));
dcl  hcs_$truncate_seg ext entry (pointer, fixed bin(24), fixed bin(35));
dcl  date_time_ ext entry (fixed bin(71), char (*));

dcl  gcos_close_file_ ext entry (pointer);
dcl  gcos_sysout_writer_ ext entry;

dcl  gcos_error_ ext entry options (variable);

dcl  delete_$path ext entry (char (*) aligned, char (*) aligned, bit (6), char (*), fixed bin(35));

dcl  gcos_restart_$save ext entry;						/* restart procedures */


/* 	Work Variables					 */

dcl  endrecord char (20) based (addr (end_record));
dcl 1 end_record aligned int static,
    2 rcw bit (36) init ("000000000000000100000000000011111100"b), /* length=4,media=3,report=74 */
    2 newline_word bit (36) init ("111111000001000000000000000000000000"b), /* 7701 */
    2 end_message char (12) init ("start ex rpt");

dcl 1 first_record_subset aligned,
    2 er_offset fixed bin(24)aligned,
    2 snumb char (5),
    2 pad char (3);

dcl  buffer char (1280);						/* 320 words */

dcl  ex_rpt_offset fixed bin(24);

dcl  status bit (72) aligned;
dcl  code fixed bin(35) based (addr (status));

dcl  error_entry char (32);
dcl  error_stream char (32);

dcl  eofsw bit (1) aligned;

dcl  er pointer;						/* local for fib pointer of execution report */

dcl  er_stream char (8) aligned;						/* for stream name of execution report */
dcl  sysprint_stream char (8) aligned;						/* stream name of sysprint file */


dcl  card char (80);						/* input card */
dcl (i, j) fixed bin(24);						/* temp */

dcl  k fixed bin(24);						/* temp */
dcl  cptime fixed bin(71);						/* cpu usage */
dcl  holdtime char (24);						/* date and time */
dcl 1 rtt int static,
    2 msg char (18) init ("real time total = "),
    2 time char (19),
    2 nls char (4) init ("



");

dcl (addr, addrel, null, string, substr) builtin;


dcl 1 ptt int static,
    2 msg char (23) init ("processor time total = "),
    2 time char (19),
    2 nls char (2) init ("

");

dcl  eoj char (12) int static init ("end-of-job

");
end gcos_cc_endjob_;
