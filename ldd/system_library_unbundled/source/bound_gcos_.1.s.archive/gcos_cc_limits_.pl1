/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* *****************************************************************************************
   *******************************************************************************************
   *
   *
   *	P R O C E S S  $  L I M I T S  C A R D
   *
   *
   *  The $ LIMITS card is used to modify the following standard activity limits:
   *
   *	Time--activity time limit expressed in hundredths of an hour
   *
   *	Storage1--max core required. Given in number of words required or
   *		in the form nk where k = 1024 words and n is a multiple.
   *
   *	Storage2--loader shared storage. Given same way as storage1
   *
   *	Sysout limit--number of sysout print lines allowed.
   *
   *	If this card is encountered before the first activity defining
   *	card, the time and sysout limits will be saved in special
   *	variables, and applied to the whole job, while any other non null
   *	values on the card will be effectively ignored (since the variables
   *	they are stored in will be overwritten with standard values
   *	when the first activity defining card is processed).
   *
   *	WRITTEN BY DICK SNYDER JANUARY 11,1971
   *	MODIFIED BY T. CASEY FEBRUARY 1974
   *	MODIFIED BY D. KAYDEN  JUNE 1974
   *	Modified by M. R. Jordan, August 1977
   *
   *
   ********************************************************************************************
   ****************************************************************************************** */




gcos_cc_limits_: proc (card);

dcl  END_OF_CARD fixed bin(24)static internal options (constant) init (2);
dcl  NULL_FIELD fixed bin(24)static internal options (constant) init (1);
dcl  accum fixed bin(24);						/* temp */
dcl  addr builtin;
dcl  card char (80);						/* input card image */
dcl  cp fixed bin(24);						/* card col position */
dcl  divide builtin;
dcl  fixed builtin;
dcl  gcos_error_ ext entry options (variable);
dcl  gcos_et_$cc_bad_field fixed bin(35) ext;
dcl  gcos_get_cc_field_ ext entry (char (80), char (*), fixed bin(24));
dcl  nsw bit (1) aligned init ("0"b);						/* control switch */
dcl  psw bit (1) aligned init ("0"b);
dcl  result fixed bin(24);						/* result from getnum */
dcl  substr builtin;
dcl  sw bit (1) aligned init ("0"b);						/* control switch */
dcl  unspec builtin;



	call getnum;				/* get time limit field */
	if result = 0 then do;			/* null field...try next field */
	     if accum > 999 then accum = 999;		/* max activity = 9.99 hours */
	     accum = 36*accum;			/* convert time limit to secs */
	     if save_data.activity_no = 0 then	/* if activity 1 has not been defined yet */
		save_data.job_time_limit = accum;	/* this is the job time limit */
	     else
	     gcos_ext_stat_$time_limit = accum;		/* else this is the activity limit */
	end;


	sw = "1"b;				/* enable "k option" */
	call getnum;				/* get storage 1 field */
	if result = 0 then				/* null...try next field */
	     gcos_ext_stat_$storage_limit =		/* save storage limit */
	     divide (accum+1023, 1024, 17, 0) * 1024;	/* rounding up to a multiple of 1024 */


	nsw = "1"b;				/* enable negative value for loader space */
	call getnum;				/* get storage 2 field */
	if result = 0 then				/* null...try next field */
	     gcos_ext_stat_$ldrss = accum;		/* save value */


	psw = "1"b;
	nsw = "0"b;				/* disable negative value */
	call getnum;				/* get line limit */
	if result = 0 then do;			/* exit if null field */
	     if save_data.activity_no = 0 then	/* if activity 0 has not been defined yet then */
		save_data.job_sysout_limit = accum; /* this is the job sysout limit */
	     else
	     gcos_ext_stat_$sysout_limit = accum;	/* else this is the activity sysout limit */
	end;


exit:	return;					/* that's it */

getnum:	proc ();


/*  Internal procedure to extract a numeric field from a $ LIMITS card.
   This procedure has implicit inputs...sw and nsw. If sw is a 1, the field
   may legally contain a "k" which will cause the preceeding numeric portion of
   the field to be multiplied by 1024. If nsw = "1"b, negative values are allowed.
   The numeric field is accumulated in "accum". In addition, the result of the field
   extraction is returned in result. If the field was non-null , result
   is set to 0.  If the field was null, result is set to 1.  If the end
   of the card was reached, this procedure will not return.	*/


dcl  field char (12);
dcl  negative bit (1) aligned init ("0"b);						/* to remember a minus sign */
dcl  i fixed bin(24);						/* temp */


	     call gcos_get_cc_field_ (card, field, result);
	     if result = NULL_FIELD then return;	/* null field */
	     if result = END_OF_CARD then go to exit;	/* end of card */


	     cp = 1;				/* init field position */
	     accum = 0;				/* clear accumulator */


	     if psw then				/* if p string allowed in sysout limits ... */
		if substr (field, 1, 1) = "p" then do;
		     psw = "0"b;
		     cp = 2;
		end;


	     if nsw then				/* if negative value allowed */
		if substr (field, 1, 1) = "-" then do;	/* minus sign? */
		     nsw = "0"b;			/* only one allowed in a field */
		     negative = "1"b;		/* remember it */
		     cp = 2;			/* go get next digit */
		end;


next:	     i = fixed (unspec (substr (field, cp, 1)), 17)-48; /* pick up char */
	     if i >= 0 & i <= 9 then do;		/* numeric? */
		accum = accum*10+i;			/* add bcd digit to accumulator */
bump:		cp = cp+1;			/* skip to next digit */
		go to next;			/* go get it */
	     end;


	     if sw then if substr (field, cp, 1) = "k" then do;
		     accum = accum*1024;		/* multiply accum by 1k */
		     cp = cp+1;			/* "k" must be followed by a terminator */
		end;


	     if substr (field, cp, 1) ^= " " then	/* blank terminator */
		call gcos_error_ (gcos_et_$cc_bad_field, "Bad character in numeric field.  ""^a""^/^a^2x^a",
		substr (field, cp, 1), gcos_ext_stat_$card_num, card);


	     if negative then accum = -accum;		/* was there a minus sign? */


	     return;				/* exit */


	end getnum;

%include gcos_ext_stat_;



     end gcos_cc_limits_;
